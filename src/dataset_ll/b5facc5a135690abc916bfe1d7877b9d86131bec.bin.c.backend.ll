source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_n = internal unnamed_addr global i1 false
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1db00.5 = global i32 0
@global_var_1db10.6 = global i32* @global_var_1db00.5
@global_var_1dc70.12 = global i32 0
@global_var_f108.18 = constant i32 -382906384
@global_var_150d4.21 = constant [4 x i8] c"GET\00"
@global_var_150d8.23 = constant i32 47
@global_var_129d8.25 = constant i32 -382910448
@global_var_150cc.27 = constant i32 32
@global_var_150a4.29 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_150bc.31 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_150c8.33 = constant [3 x i8] c"\0D\0A\00"
@global_var_150dc.35 = constant [9 x i8] c"Cookie: \00"
@global_var_150e8.37 = constant [3 x i8] c"; \00"
@global_var_150ec.39 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_150f4.41 = constant i32 59
@global_var_150f8.43 = constant [5 x i8] c"http\00"
@global_var_15100.45 = constant [5 x i8] c"url=\00"
@global_var_15108.47 = constant [5 x i8] c"POST\00"
@global_var_1206c.48 = constant i32 -439275520
@global_var_15110.50 = constant i32 39
@global_var_1540c.52 = constant i32 61
@global_var_13600.53 = constant i32 -481296384
@global_var_1dc8c.57 = global i32 0
@global_var_a394.58 = constant i32 -352321555
@global_var_d7c8.64 = constant i32 -382906384
@global_var_dcc8.66 = constant i32 -382906384
@global_var_ce04.68 = constant i32 -382906384
@global_var_c688.70 = constant i32 -382906384
@global_var_bec8.72 = constant i32 -382906384
@global_var_b5b8.74 = constant i32 -382906384
@global_var_ae80.76 = constant i32 -382906384
@global_var_a6d8.78 = constant i32 -382906384
@global_var_81cc.80 = constant i32 -382906384
@global_var_1dd2c.82 = global i32 0
@global_var_1dc90.93 = global i32 0
@global_var_1dd30.97 = local_unnamed_addr global i32 0
@global_var_1dc94.99 = global i32 0
@global_var_ee5c.101 = constant i32 -382910448
@global_var_1db1c.103 = global i32 74492
@global_var_1dd38.107 = local_unnamed_addr global i32 0
@global_var_1dd37.108 = local_unnamed_addr global i32 0
@global_var_1dd36.109 = local_unnamed_addr global i32 0
@global_var_1db14.111 = global i32 -1
@global_var_1dc98.116 = global i32 0
@global_var_ee44.118 = constant i32 -442556408
@global_var_1dd35.122 = local_unnamed_addr global i32 0
@global_var_15114.126 = constant i32 10
@global_var_1db18.128 = global i32 -1
@global_var_122fc.132 = constant i32 -382910224
@global_var_15118.135 = constant i32 16777216
@global_var_1dca0.137 = global i32 0
@global_var_1dcac.139 = global i32 0
@global_var_1dca4.141 = global i32 0
@global_var_1dca8.143 = global i32 0
@global_var_1dd4c.153 = global i32 0
@global_var_1dce4.155 = global i32 0
@global_var_1dcb0.157 = global i32 0
@global_var_1dcdc.159 = global i32 0
@global_var_1dd44.167 = global i32 0
@global_var_1dd48.169 = global i32 0
@global_var_1dcb7.172 = local_unnamed_addr global i32 0
@global_var_1dcb6.173 = local_unnamed_addr global i32 0
@global_var_1dcc8.175 = global i32 0
@global_var_1dcbc.177 = local_unnamed_addr global i32 0
@global_var_1dcb9.178 = local_unnamed_addr global i32 0
@global_var_1dcc9.179 = local_unnamed_addr global i32 0
@global_var_1dccb.180 = local_unnamed_addr global i32 0
@global_var_1dcbd.181 = local_unnamed_addr global i32 0
@global_var_1dcb8.182 = local_unnamed_addr global i32 0
@global_var_1dcca.183 = local_unnamed_addr global i32 0
@global_var_1dcd7.185 = local_unnamed_addr global i32 0
@global_var_1dcd6.186 = local_unnamed_addr global i32 0
@global_var_151f8.188 = constant [6 x i8] c"14=9>\00"
@global_var_15200.190 = constant [8 x i8] c"1!%1\229?\00"
@global_var_15208.192 = constant [5 x i8] c" 1##\00"
@global_var_15210.194 = constant [9 x i8] c"381>75=5\00"
@global_var_1521c.196 = constant i32 490349927
@global_var_150f0.198 = constant i32 0
@global_var_151f0.200 = constant [5 x i8] c"abcd\00"
@global_var_15120.202 = constant [4 x i8] c"14=\00"
@global_var_15124.204 = constant [5 x i8] c"\22??$\00"
@global_var_1512c.206 = constant [5 x i8] c"1>;?\00"
@global_var_15134.208 = constant [7 x i8] c"(3ceaa\00"
@global_var_1513c.210 = constant [6 x i8] c"$$>5$\00"
@global_var_15144.212 = constant [9 x i8] c"8%>$egei\00"
@global_var_15150.214 = constant [6 x i8] c"&9*(&\00"
@global_var_15158.216 = constant [6 x i8] c"abcde\00"
@global_var_15160.218 = constant [9 x i8] c"a``a389>\00"
@global_var_1516c.220 = constant [8 x i8] c"4561%<$\00"
@global_var_15174.222 = constant [4 x i8] c"abc\00"
@global_var_15178.224 = constant [7 x i8] c"1>$#<!\00"
@global_var_15180.226 = constant [4 x i8] c"e% \00"
@global_var_15184.228 = constant [9 x i8] c":%1>$538\00"
@global_var_15190.230 = constant [6 x i8] c"*<((~\00"
@global_var_15198.232 = constant [7 x i8] c"abcdef\00"
@global_var_151a0.234 = constant [11 x i8] c"?5<9>%(abc\00"
@global_var_151ac.236 = constant [7 x i8] c"\0A$5eba\00"
@global_var_151b4.238 = constant i32 490349927
@global_var_151c4.240 = constant [5 x i8] c"%#5\22\00"
@global_var_151cc.242 = constant [7 x i8] c"415=?>\00"
@global_var_151d4.244 = constant [4 x i8] c"29>\00"
@global_var_151d8.246 = constant [8 x i8] c"#%  ?\22$\00"
@global_var_151e0.248 = constant [11 x i8] c"#% 5\22&9#?\22\00"
@global_var_151ec.250 = constant [9 x i8] c"*)14abcd\00"
@global_var_1dcc0.251 = local_unnamed_addr global i32 0
@global_var_1dcbe.253 = local_unnamed_addr global i32 0
@global_var_1dcbf.254 = local_unnamed_addr global i32 0
@global_var_1dcd8.256 = local_unnamed_addr global i32 0
@global_var_1dcd9.257 = local_unnamed_addr global i32 0
@global_var_15232.264 = constant i32 2096127
@global_var_15229.266 = constant i32 2095871
@global_var_1dd54.270 = global i32 0
@global_var_1db24.273 = global i32 1043935
@global_var_15238.278 = constant i32 39228
@global_var_1dd64.279 = local_unnamed_addr global i32 0
@global_var_1dd68.280 = local_unnamed_addr global i32 0
@global_var_1dd69.281 = local_unnamed_addr global i32 0
@global_var_1523c.283 = constant i32 55430
@global_var_1dd74.284 = local_unnamed_addr global i32 0
@global_var_1dd78.285 = local_unnamed_addr global i32 0
@global_var_1dd79.286 = local_unnamed_addr global i32 0
@global_var_15240.288 = constant i32 1499028601
@global_var_1dd80.289 = local_unnamed_addr global i32 0
@global_var_1dd7c.290 = local_unnamed_addr global i32 0
@global_var_1dd81.291 = local_unnamed_addr global i32 0
@global_var_15260.293 = constant i32 1380928786
@global_var_1dd84.294 = local_unnamed_addr global i32 0
@global_var_1dd88.295 = local_unnamed_addr global i32 0
@global_var_1dd89.296 = local_unnamed_addr global i32 0
@global_var_15268.298 = constant i32 1480939538
@global_var_1dd90.299 = local_unnamed_addr global i32 0
@global_var_1dd8c.300 = local_unnamed_addr global i32 0
@global_var_1dd91.301 = local_unnamed_addr global i32 0
@global_var_15270.303 = constant i32 1029266194
@global_var_1dd98.304 = local_unnamed_addr global i32 0
@global_var_1dd94.305 = local_unnamed_addr global i32 0
@global_var_1dd99.306 = local_unnamed_addr global i32 0
@global_var_15278.308 = constant i32 1380928786
@global_var_1dda0.309 = local_unnamed_addr global i32 0
@global_var_1dd9c.310 = local_unnamed_addr global i32 0
@global_var_1dda1.311 = local_unnamed_addr global i32 0
@global_var_15288.313 = constant i32 1297895442
@global_var_1dda4.314 = local_unnamed_addr global i32 0
@global_var_1dda8.315 = local_unnamed_addr global i32 0
@global_var_1dda9.316 = local_unnamed_addr global i32 0
@global_var_15290.318 = constant i32 1548307986
@global_var_1ddac.319 = local_unnamed_addr global i32 0
@global_var_1ddb0.320 = local_unnamed_addr global i32 0
@global_var_1ddb1.321 = local_unnamed_addr global i32 0
@global_var_1529c.323 = constant i32 1414749203
@global_var_1ddb4.324 = local_unnamed_addr global i32 0
@global_var_1ddb8.325 = local_unnamed_addr global i32 0
@global_var_1ddb9.326 = local_unnamed_addr global i32 0
@global_var_152a4.328 = constant i32 1380928786
@global_var_1ddc0.329 = local_unnamed_addr global i32 0
@global_var_1ddbc.330 = local_unnamed_addr global i32 0
@global_var_1ddc1.331 = local_unnamed_addr global i32 0
@global_var_152b8.333 = constant i32 1380928786
@global_var_1ddc8.334 = local_unnamed_addr global i32 0
@global_var_1ddc4.335 = local_unnamed_addr global i32 0
@global_var_1ddc9.336 = local_unnamed_addr global i32 0
@global_var_152c8.338 = constant i32 1920627327
@global_var_1ddcc.339 = local_unnamed_addr global i32 0
@global_var_1ddd0.340 = local_unnamed_addr global i32 0
@global_var_1ddd1.341 = local_unnamed_addr global i32 0
@global_var_152d4.343 = constant i32 1581864978
@global_var_1ddd8.344 = local_unnamed_addr global i32 0
@global_var_1ddd4.345 = local_unnamed_addr global i32 0
@global_var_1ddd9.346 = local_unnamed_addr global i32 0
@global_var_152e8.348 = constant i32 1599867994
@global_var_1dddc.349 = local_unnamed_addr global i32 0
@global_var_1dde0.350 = local_unnamed_addr global i32 0
@global_var_1dde1.351 = local_unnamed_addr global i32 0
@global_var_15300.353 = constant [9 x i8] c"\5CNNJROY=\00"
@global_var_1dde4.354 = local_unnamed_addr global i32 0
@global_var_1dde8.355 = local_unnamed_addr global i32 0
@global_var_1dde9.356 = local_unnamed_addr global i32 0
@global_var_1530c.358 = constant i32 1264081170
@global_var_1ddf0.359 = local_unnamed_addr global i32 0
@global_var_1ddec.360 = local_unnamed_addr global i32 0
@global_var_1ddf1.361 = local_unnamed_addr global i32 0
@global_var_1531c.363 = constant i32 1264081170
@global_var_1ddf8.364 = local_unnamed_addr global i32 0
@global_var_1ddf4.365 = local_unnamed_addr global i32 0
@global_var_1ddf9.366 = local_unnamed_addr global i32 0
@global_var_15330.368 = constant i32 1264081170
@global_var_1ddfc.369 = local_unnamed_addr global i32 0
@global_var_1de00.370 = local_unnamed_addr global i32 0
@global_var_1de01.371 = local_unnamed_addr global i32 0
@global_var_15348.373 = constant i32 1264081170
@global_var_1de08.374 = local_unnamed_addr global i32 0
@global_var_1de04.375 = local_unnamed_addr global i32 0
@global_var_1de09.376 = local_unnamed_addr global i32 0
@global_var_15364.378 = constant i32 1264081170
@global_var_1de10.379 = local_unnamed_addr global i32 0
@global_var_1de0c.380 = local_unnamed_addr global i32 0
@global_var_1de11.381 = local_unnamed_addr global i32 0
@global_var_15374.383 = constant [7 x i8] c"NUXQQ=\00"
@global_var_1de14.384 = local_unnamed_addr global i32 0
@global_var_1de18.385 = local_unnamed_addr global i32 0
@global_var_1de19.386 = local_unnamed_addr global i32 0
@global_var_1537c.388 = constant [8 x i8] c"XS\5C_QX=\00"
@global_var_1de1c.389 = local_unnamed_addr global i32 0
@global_var_1de20.390 = local_unnamed_addr global i32 0
@global_var_1de21.391 = local_unnamed_addr global i32 0
@global_var_15384.393 = constant [8 x i8] c"NDNIXP=\00"
@global_var_1de24.394 = local_unnamed_addr global i32 0
@global_var_1de28.395 = local_unnamed_addr global i32 0
@global_var_1de29.396 = local_unnamed_addr global i32 0
@global_var_1538c.398 = constant [4 x i8] c"NU=\00"
@global_var_1de30.399 = local_unnamed_addr global i32 0
@global_var_1de2c.400 = local_unnamed_addr global i32 0
@global_var_1de31.401 = local_unnamed_addr global i32 0
@global_var_15390.403 = constant i32 1398038290
@global_var_1de34.404 = local_unnamed_addr global i32 0
@global_var_1de38.405 = local_unnamed_addr global i32 0
@global_var_1de39.406 = local_unnamed_addr global i32 0
@global_var_153a8.408 = constant i32 1499028569
@global_var_1de40.409 = local_unnamed_addr global i32 0
@global_var_1de3c.410 = local_unnamed_addr global i32 0
@global_var_1de41.411 = local_unnamed_addr global i32 0
@global_var_153c8.413 = constant [10 x i8] c"S^ROOX^I=\00"
@global_var_1de44.414 = local_unnamed_addr global i32 0
@global_var_1de48.415 = local_unnamed_addr global i32 0
@global_var_1de49.416 = local_unnamed_addr global i32 0
@global_var_1de4c.417 = local_unnamed_addr global i32 0
@global_var_1de50.418 = local_unnamed_addr global i32 0
@global_var_1de51.419 = local_unnamed_addr global i32 0
@global_var_153d4.421 = constant [6 x i8] c"RZTS=\00"
@global_var_1de58.422 = local_unnamed_addr global i32 0
@global_var_1de54.423 = local_unnamed_addr global i32 0
@global_var_1de59.424 = local_unnamed_addr global i32 0
@global_var_153dc.426 = constant [7 x i8] c"XSIXO=\00"
@global_var_1de5c.427 = local_unnamed_addr global i32 0
@global_var_1de60.428 = local_unnamed_addr global i32 0
@global_var_1de61.429 = local_unnamed_addr global i32 0
@global_var_153e4.431 = constant i32 1398038290
@global_var_1de68.432 = local_unnamed_addr global i32 0
@global_var_1de64.433 = local_unnamed_addr global i32 0
@global_var_1de69.434 = local_unnamed_addr global i32 0
@global_var_153f8.436 = constant i32 1398038290
@global_var_1de6c.437 = local_unnamed_addr global i32 0
@global_var_1de70.438 = local_unnamed_addr global i32 0
@global_var_1de71.439 = local_unnamed_addr global i32 0
@global_var_15410.441 = constant i32 1213361769
@global_var_1de74.442 = local_unnamed_addr global i32 0
@global_var_1de78.443 = local_unnamed_addr global i32 0
@global_var_1de79.444 = local_unnamed_addr global i32 0
@global_var_15428.446 = constant i32 1581864978
@global_var_1de80.447 = local_unnamed_addr global i32 0
@global_var_1de7c.448 = local_unnamed_addr global i32 0
@global_var_1de81.449 = local_unnamed_addr global i32 0
@global_var_1543c.451 = constant [12 x i8] c"S\5CPXNXOKXO=\00"
@global_var_1de84.452 = local_unnamed_addr global i32 0
@global_var_1de88.453 = local_unnamed_addr global i32 0
@global_var_1de89.454 = local_unnamed_addr global i32 0
@global_var_15448.456 = constant i32 1397969534
@global_var_1de8c.457 = local_unnamed_addr global i32 0
@global_var_1de90.458 = local_unnamed_addr global i32 0
@global_var_1de91.459 = local_unnamed_addr global i32 0
@global_var_1576c.461 = constant i32 1482579580
@global_var_1de98.462 = local_unnamed_addr global i32 0
@global_var_1de94.463 = local_unnamed_addr global i32 0
@global_var_1de99.464 = local_unnamed_addr global i32 0
@global_var_157c0.466 = constant i32 1482579580
@global_var_1dea0.467 = local_unnamed_addr global i32 0
@global_var_1de9c.468 = local_unnamed_addr global i32 0
@global_var_1dea1.469 = local_unnamed_addr global i32 0
@global_var_15460.471 = constant i32 1230197374
@global_var_1dea8.472 = local_unnamed_addr global i32 0
@global_var_1dea4.473 = local_unnamed_addr global i32 0
@global_var_1dea9.474 = local_unnamed_addr global i32 0
@global_var_15494.476 = constant i32 2118735950
@global_var_1deac.477 = local_unnamed_addr global i32 0
@global_var_1deb0.478 = local_unnamed_addr global i32 0
@global_var_1deb1.479 = local_unnamed_addr global i32 0
@global_var_154a4.481 = constant i32 1331386447
@global_var_1deb4.482 = local_unnamed_addr global i32 0
@global_var_1deb8.483 = local_unnamed_addr global i32 0
@global_var_1deb9.484 = local_unnamed_addr global i32 0
@global_var_154b0.486 = constant i32 1549685329
@global_var_1debc.487 = local_unnamed_addr global i32 0
@global_var_1dec0.488 = local_unnamed_addr global i32 0
@global_var_1dec1.489 = local_unnamed_addr global i32 0
@global_var_154bc.491 = constant i32 273242190
@global_var_1dec4.492 = local_unnamed_addr global i32 0
@global_var_1dec8.493 = local_unnamed_addr global i32 0
@global_var_1dec9.494 = local_unnamed_addr global i32 0
@global_var_154cc.496 = constant i32 1230197342
@global_var_1ded0.497 = local_unnamed_addr global i32 0
@global_var_1decc.498 = local_unnamed_addr global i32 0
@global_var_1ded1.499 = local_unnamed_addr global i32 0
@global_var_154e0.501 = constant i32 1398558537
@global_var_1ded8.502 = local_unnamed_addr global i32 0
@global_var_1ded4.503 = local_unnamed_addr global i32 0
@global_var_1ded9.504 = local_unnamed_addr global i32 0
@global_var_154f4.506 = constant [9 x i8] c"^UHSVXY=\00"
@global_var_1dedc.507 = local_unnamed_addr global i32 0
@global_var_1dee0.508 = local_unnamed_addr global i32 0
@global_var_1dee1.509 = local_unnamed_addr global i32 0
@global_var_15454.511 = constant i32 1297635414
@global_var_1dee4.512 = local_unnamed_addr global i32 0
@global_var_1dee8.513 = local_unnamed_addr global i32 0
@global_var_1dee9.514 = local_unnamed_addr global i32 0
@global_var_15500.516 = constant i32 1397969502
@global_var_1deec.517 = local_unnamed_addr global i32 0
@global_var_1def0.518 = local_unnamed_addr global i32 0
@global_var_1def1.519 = local_unnamed_addr global i32 0
@global_var_15510.521 = constant i32 1263491150
@global_var_1def8.522 = local_unnamed_addr global i32 0
@global_var_1def4.523 = local_unnamed_addr global i32 0
@global_var_1def9.524 = local_unnamed_addr global i32 0
@global_var_15524.526 = constant i32 1263491150
@global_var_1df00.527 = local_unnamed_addr global i32 0
@global_var_1defc.528 = local_unnamed_addr global i32 0
@global_var_1df01.529 = local_unnamed_addr global i32 0
@global_var_15540.531 = constant i32 1413960304
@global_var_1df04.532 = local_unnamed_addr global i32 0
@global_var_1df08.533 = local_unnamed_addr global i32 0
@global_var_1df09.534 = local_unnamed_addr global i32 0
@global_var_155b4.536 = constant i32 1413960304
@global_var_1df0c.537 = local_unnamed_addr global i32 0
@global_var_1df10.538 = local_unnamed_addr global i32 0
@global_var_1df11.539 = local_unnamed_addr global i32 0
@global_var_15628.541 = constant i32 1413960304
@global_var_1df18.542 = local_unnamed_addr global i32 0
@global_var_1df14.543 = local_unnamed_addr global i32 0
@global_var_1df19.544 = local_unnamed_addr global i32 0
@global_var_15678.546 = constant i32 1413960304
@global_var_1df1c.547 = local_unnamed_addr global i32 0
@global_var_1df20.548 = local_unnamed_addr global i32 0
@global_var_1df21.549 = local_unnamed_addr global i32 0
@global_var_156ec.551 = constant i32 1413960304
@global_var_1df28.552 = local_unnamed_addr global i32 0
@global_var_1df24.553 = local_unnamed_addr global i32 0
@global_var_1df29.554 = local_unnamed_addr global i32 0
@global_var_1df30.555 = local_unnamed_addr global i32 0
@global_var_1df2c.556 = local_unnamed_addr global i32 0
@global_var_1df31.557 = local_unnamed_addr global i32 0
@global_var_1df38.558 = local_unnamed_addr global i32 0
@global_var_1df34.559 = local_unnamed_addr global i32 0
@global_var_1df39.560 = local_unnamed_addr global i32 0
@global_var_1df3c.561 = local_unnamed_addr global i32 0
@global_var_1df40.562 = local_unnamed_addr global i32 0
@global_var_1df41.563 = local_unnamed_addr global i32 0
@global_var_15760.565 = constant [11 x i8] c"YKOuXQMXO=\00"
@global_var_1df49.566 = local_unnamed_addr global i32 0
@global_var_1df44.567 = local_unnamed_addr global i32 0
@global_var_1df48.568 = local_unnamed_addr global i32 0
@global_var_13e3c.571 = constant i32 -476053504
@global_var_12d7c.575 = constant i32 -443219956
@global_var_12ee8.580 = constant i32 -376111092
@global_var_1dd20.583 = global i32 0
@global_var_1305c.585 = constant i32 -456978431
@global_var_1df4c.587 = global i32 0
@global_var_1dce8.589 = global i32 0
@global_var_1dc24.592 = global i32 256
@global_var_1db28.593 = global i32* @global_var_1dc24.592
@global_var_1dd10.596 = global i32 0
@global_var_1dfcc.598 = global i32 0
@global_var_145f0.599 = constant i32 -382910416
@global_var_12fe0.600 = constant i32 -509595648
@global_var_13680.607 = constant i32 -442564520
@global_var_1dc30.613 = global i32 0
@global_var_12c54.615 = constant i32 -481230848
@global_var_1dd00.617 = global i32 0
@global_var_14240.619 = constant i32 -509587456
@global_var_1dc48.622 = global i32 0
@global_var_1dd04.626 = local_unnamed_addr global i32 0
@global_var_13bf4.628 = constant i32 -352321419
@global_var_1daf4.632 = global i32 -1
@global_var_1dd14.635 = global i32 0
@global_var_1dd18.637 = local_unnamed_addr global i32 0
@global_var_13e28.638 = constant i32 -390234096
@global_var_157e4.640 = constant [10 x i8] c"/dev/null\00"
@global_var_1dd1c.642 = global i32 0
@global_var_1dd08.647 = local_unnamed_addr global i32 0
@global_var_1dd0c.649 = global i32 0
@global_var_12fc0.651 = constant i32 -369097054
@global_var_1dc60 = external local_unnamed_addr global i32
@global_var_158f0.657 = constant i32 33554944
@global_var_12f80.662 = constant i32 -442564608
@global_var_140f0.664 = constant i32 -335544664
@global_var_1420c.667 = constant i32 -275775369
@global_var_14984.668 = constant i32 -382910352
@global_var_1dd28.670 = global i32 0
@global_var_1dc68.672 = global i32* @global_var_158f0.657
@global_var_1dfe4.674 = global i32 0
@global_var_1dfe8.676 = global i32 0
@global_var_1daf8.679 = global i32 0
@global_var_1dc6c.3 = external global i8*
@global_var_1dc88.55 = external global i8*
@global_var_1dc89.62 = global i8 0
@global_var_1dd34.105 = external global i8*
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1db20.113 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1dc9c.131 = external global i8*
@global_var_1dce0.161 = external global i8*
@global_var_1dce1.162 = local_unnamed_addr global i8 0
@global_var_1dcb4.171 = external global i8*
@global_var_1dcd4.176 = local_unnamed_addr global i8 0
@global_var_1dcd5.184 = local_unnamed_addr global i8 0
@global_var_1dccc.255 = local_unnamed_addr global i8 0
@global_var_1dcc4.252 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_15044(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1dc6c.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1dc6c.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1db10.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1db10.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1db10.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1db10.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1dc6c.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1db10.6, { 1, 0 }
  uselistorder i8** @global_var_1dc6c.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_8124
  %v1_8124 = load i32, i32* @r5, align 4
  store i32 %v1_8124, i32* %arg2, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_8124, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 121604 to i32*), align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 121604

bb2:                                              ; preds = %.thread
  ret i32 121604

; uselistorder directives
  uselistorder i32 121604, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_13edc(i32 ptrtoint (i32* @global_var_f108.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 86144, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_13a50()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_81cc = load i32, i32* @r4, align 4
  store i32 %v3_81cc, i32* %stack_var_-36, align 4
  %v6_81cc = load i32, i32* @r5, align 4
  %v9_81cc = load i32, i32* @r6, align 4
  %v15_81cc = load i32, i32* @r8, align 4
  %v1_81d8 = urem i32 %arg3, 256
  store i32 %v1_81d8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_81e4 = urem i32 %arg1, 256
  store i32 %v1_81e4, i32* %ip.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_81d8, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8200 = inttoptr i32 %arg4 to i32*
  %v6_8200 = call i32 @function_9f84(i32 %v1_81d8, i32* %v5_8200, i32 20, i32 0, i32 %arg2)
  %v0_8204 = load i32, i32* @r5, align 4
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_8210 = load i32, i32* @r4, align 4
  store i32 %v0_8210, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_150d4.21 to i32), i32* %r3.global-to-local, align 4
  %v6_8218 = inttoptr i32 %v0_8204 to i32*
  %v7_8218 = call i32 @function_9f84(i32 %v0_8210, i32* %v6_8218, i32 19, i32 ptrtoint ([4 x i8]* @global_var_150d4.21 to i32), i32 %v6_8200)
  %v0_821c = load i32, i32* @r5, align 4
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_8218, i32* %fp.global-to-local, align 4
  %v0_822c = load i32, i32* @r4, align 4
  store i32 %v0_822c, i32* %r0.global-to-local, align 4
  %v5_8230 = inttoptr i32 %v0_821c to i32*
  %v6_8230 = call i32 @function_9f84(i32 %v0_822c, i32* %v5_8230, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8234 = load i32, i32* @r5, align 4
  store i32 %v0_8234, i32* %r1.global-to-local, align 4
  store i32 %v6_8230, i32* %sb.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  %v0_8240 = load i32, i32* @r4, align 4
  store i32 %v0_8240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150d8.23 to i32), i32* %r3.global-to-local, align 4
  %v5_8248 = inttoptr i32 %v0_8234 to i32*
  %v6_8248 = call i32 @function_9f84(i32 %v0_8240, i32* %v5_8248, i32 21, i32 ptrtoint (i32* @global_var_150d8.23 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_824c = load i32, i32* @r5, align 4
  store i32 %v0_824c, i32* %r1.global-to-local, align 4
  store i32 %v6_8248, i32* @sl, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v0_8258 = load i32, i32* @r4, align 4
  store i32 %v0_8258, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8260 = inttoptr i32 %v0_824c to i32*
  %v5_8260 = call i32 @function_a054(i32 %v0_8258, i32* %v4_8260, i32 23, i32 1)
  %v0_8264 = load i32, i32* @r5, align 4
  store i32 %v0_8264, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8260, i32* @r6, align 4
  %v0_8274 = load i32, i32* @r4, align 4
  store i32 %v0_8274, i32* %r0.global-to-local, align 4
  %v4_8278 = inttoptr i32 %v0_8264 to i32*
  %v5_8278 = call i32 @function_a054(i32 %v0_8274, i32* %v4_8278, i32 7, i32 80)
  %v2_8280 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8288 = mul i32 %v5_8278, 65536
  store i32 %v3_8288, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_829c = urem i32 %v5_8278, 65536
  store i32 %v3_829c, i32* %r8.global-to-local, align 4
  %v3_82a0 = call i32 @function_12fe0(i8* %tmp199, i32 0)
  store i32 %v3_82a0, i32* %r0.global-to-local, align 4
  %v0_82a4 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_82a4 = icmp slt i32 %v0_82a4, 0
  store i1 %v1_82a4, i1* %cpsr_n.global-to-local, align 1
  %v2_82a4 = icmp eq i32 %v0_82a4, 0
  store i1 %v2_82a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_82a4, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_81cc
  %v1_82a8 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_82a8 = icmp slt i32 %v1_82a8, 0
  store i1 %v2_82a8, i1* %cpsr_n.global-to-local, align 1
  %v3_82a8 = icmp eq i32 %v1_82a8, 0
  store i1 %v3_82a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_82a8, label %bb200, label %dec_label_pc_82c4

.thread13:                                        ; preds = %dec_label_pc_81cc
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %bb200, %dec_label_pc_82e4, %.thread13, %dec_label_pc_82d4, %dec_label_pc_82c4
  %v29_82c0 = phi i32 [ %v2_82e8, %dec_label_pc_82e4 ], [ %v3_82a0, %.thread13 ], [ %v3_82a0, %bb200 ], [ %v2_82d8, %dec_label_pc_82d4 ], [ %v2_82c8, %dec_label_pc_82c4 ]
  %v2_82c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_82c0, i32* %r4.global-to-local, align 4
  store i32 %v6_81cc, i32* %r5.global-to-local, align 4
  store i32 %v9_81cc, i32* %r6.global-to-local, align 4
  store i32 %v15_81cc, i32* %r8.global-to-local, align 4
  ret i32 %v29_82c0

dec_label_pc_82c4:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82c8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82c8 = call i32 @function_12044(i8* %v1_82c8)
  store i32 %v2_82c8, i32* %r0.global-to-local, align 4
  %v1_82cc = add i32 %v2_82c8, -255
  %v2_82cc = icmp ugt i32 %v2_82c8, 254
  store i1 %v2_82cc, i1* %cpsr_c.global-to-local, align 1
  %v3_82cc = sub i32 254, %v2_82c8
  %v4_82cc = and i32 %v3_82cc, %v2_82c8
  %v5_82cc = icmp slt i32 %v4_82cc, 0
  store i1 %v5_82cc, i1* %cpsr_v.global-to-local, align 1
  %v6_82cc = icmp slt i32 %v1_82cc, 0
  store i1 %v6_82cc, i1* %cpsr_n.global-to-local, align 1
  %v7_82cc = icmp eq i32 %v2_82c8, 255
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  %v8_82d0 = icmp sgt i32 %v2_82c8, 255
  br i1 %v8_82d0, label %dec_label_pc_82b8, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82c4
  %v0_82d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_82d4, i32* %r0.global-to-local, align 4
  %v1_82d8 = inttoptr i32 %v0_82d4 to i8*
  %v2_82d8 = call i32 @function_12044(i8* %v1_82d8)
  store i32 %v2_82d8, i32* %r0.global-to-local, align 4
  %v1_82dc = add i32 %v2_82d8, -127
  %v2_82dc = icmp ugt i32 %v2_82d8, 126
  store i1 %v2_82dc, i1* %cpsr_c.global-to-local, align 1
  %v3_82dc = sub i32 126, %v2_82d8
  %v4_82dc = and i32 %v3_82dc, %v2_82d8
  %v5_82dc = icmp slt i32 %v4_82dc, 0
  store i1 %v5_82dc, i1* %cpsr_v.global-to-local, align 1
  %v6_82dc = icmp slt i32 %v1_82dc, 0
  store i1 %v6_82dc, i1* %cpsr_n.global-to-local, align 1
  %v7_82dc = icmp eq i32 %v2_82d8, 127
  store i1 %v7_82dc, i1* %cpsr_z.global-to-local, align 1
  %v8_82e0 = icmp sgt i32 %v2_82d8, 127
  br i1 %v8_82e0, label %dec_label_pc_82b8, label %dec_label_pc_82e4

dec_label_pc_82e4:                                ; preds = %dec_label_pc_82d4
  %v0_82e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82e4, i32* %r0.global-to-local, align 4
  %v1_82e8 = inttoptr i32 %v0_82e4 to i8*
  %v2_82e8 = call i32 @function_12044(i8* %v1_82e8)
  store i32 %v2_82e8, i32* %r0.global-to-local, align 4
  %v1_82ec = add i32 %v2_82e8, -9
  %v2_82ec = icmp ugt i32 %v2_82e8, 8
  store i1 %v2_82ec, i1* %cpsr_c.global-to-local, align 1
  %v3_82ec = sub i32 8, %v2_82e8
  %v4_82ec = and i32 %v3_82ec, %v2_82e8
  %v5_82ec = icmp slt i32 %v4_82ec, 0
  store i1 %v5_82ec, i1* %cpsr_v.global-to-local, align 1
  %v6_82ec = icmp slt i32 %v1_82ec, 0
  store i1 %v6_82ec, i1* %cpsr_n.global-to-local, align 1
  %v7_82ec = icmp eq i32 %v2_82e8, 9
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  %v7_82f0 = icmp sgt i32 %v2_82e8, 9
  br i1 %v7_82f0, label %dec_label_pc_82b8, label %bb201

bb201:                                            ; preds = %dec_label_pc_82e4
  %v10_82f0 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v8_82f4 = load i32, i32* @r4, align 4
  %v10_82f4 = add i32 %v10_82f0, 364
  %v11_82f4 = inttoptr i32 %v10_82f4 to i32*
  store i32 %v8_82f4, i32* %v11_82f4, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %bb201, %bb205
  %v0_82fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82fc, i32* %r0.global-to-local, align 4
  %v1_8300 = inttoptr i32 %v0_82fc to i8*
  %v2_8300 = call i32 @function_12044(i8* %v1_8300)
  store i32 %v2_8300, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_8308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8308, i32* %ip.global-to-local, align 4
  %v2_830c = sub i32 %v2_8300, %v3_8308
  %v3_830c = icmp uge i32 %v2_8300, %v3_8308
  store i1 %v3_830c, i1* %cpsr_c.global-to-local, align 1
  %v4_830c = xor i32 %v3_8308, %v2_8300
  %v5_830c = xor i32 %v2_830c, %v2_8300
  %v6_830c = and i32 %v5_830c, %v4_830c
  %v7_830c = icmp slt i32 %v6_830c, 0
  store i1 %v7_830c, i1* %cpsr_v.global-to-local, align 1
  %v8_830c = icmp slt i32 %v2_830c, 0
  store i1 %v8_830c, i1* %cpsr_n.global-to-local, align 1
  %v9_830c = icmp eq i32 %v2_8300, %v3_8308
  store i1 %v9_830c, i1* %cpsr_z.global-to-local, align 1
  %v7_8310 = icmp sgt i32 %v2_8300, %v3_8308
  br i1 %v7_8310, label %dec_label_pc_8314, label %dec_label_pc_8340

dec_label_pc_8314:                                ; preds = %dec_label_pc_82fc
  %v0_8314 = load i32, i32* %fp.global-to-local, align 4
  %v2_8314 = add i32 %v0_8314, %v3_8308
  %v3_8314 = inttoptr i32 %v2_8314 to i8*
  %v4_8314 = load i8, i8* %v3_8314, align 1
  %v6_8314 = zext i8 %v4_8314 to i32
  %v1_8318 = add nsw i32 %v6_8314, -32
  store i32 %v1_8318, i32* %r2.global-to-local, align 4
  %v1_831c = add nsw i32 %v6_8314, -97
  store i32 %v1_831c, i32* %r3.global-to-local, align 4
  %v2_8320 = icmp ugt i32 %v1_831c, 24
  store i1 %v2_8320, i1* %cpsr_c.global-to-local, align 1
  %v3_8320 = sub nsw i32 121, %v6_8314
  %v4_8320 = and i32 %v3_8320, %v1_831c
  %v5_8320 = icmp slt i32 %v4_8320, 0
  store i1 %v5_8320, i1* %cpsr_v.global-to-local, align 1
  %v6_8320 = icmp ult i8 %v4_8314, 122
  store i1 %v6_8320, i1* %cpsr_n.global-to-local, align 1
  %v7_8320 = icmp eq i32 %v1_831c, 25
  store i1 %v7_8320, i1* %cpsr_z.global-to-local, align 1
  %v2_8324 = xor i1 %v2_8320, true
  %v3_8324 = or i1 %v7_8320, %v2_8324
  br i1 %v3_8324, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_8314
  %v5_8324 = trunc i32 %v1_8318 to i8
  store i8 %v5_8324, i8* %v3_8314, align 1
  %v0_8328.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8328.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_8314, %bb202
  %v1_832c = phi i1 [ %v2_8320, %dec_label_pc_8314 ], [ %v1_8328.pre, %bb202 ]
  %v0_832c = phi i1 [ false, %dec_label_pc_8314 ], [ %v0_8328.pre, %bb202 ]
  %v2_8328 = xor i1 %v1_832c, true
  %v3_8328 = or i1 %v0_832c, %v2_8328
  br i1 %v3_8328, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_8334.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v7_832c = load i32, i32* %v11_82f4, align 4
  store i32 %v7_832c, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_8334 = phi i32 [ %v0_8334.pre, %._crit_edge ], [ %v7_832c, %bb204 ]
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v1_8334 = add i32 %v0_8334, 1
  store i32 %v1_8334, i32* %ip.global-to-local, align 4
  store i32 %v1_8334, i32* %stack_var_-40, align 4
  br label %dec_label_pc_82fc

dec_label_pc_8340:                                ; preds = %dec_label_pc_82fc
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_11590(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_11590(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_8354 = call i32 @function_11590(i32 45)
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_835c = call i32 @function_11590(i32 46)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_8364 = call i32 @function_11590(i32 47)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_836c = call i32 @function_11590(i32 48)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_8374 = call i32 @function_11590(i32 49)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_837c = call i32 @function_11590(i32 50)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_8384 = call i32 @function_11590(i32 51)
  store i32 52, i32* %r0.global-to-local, align 4
  %v1_838c = call i32 @function_11590(i32 52)
  store i32 %v1_838c, i32* %r0.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v2_8390 = add i32 %v0_8390, -512
  %v3_8390 = icmp ugt i32 %v0_8390, 511
  store i1 %v3_8390, i1* %cpsr_c.global-to-local, align 1
  %v4_8390 = sub i32 511, %v0_8390
  %v5_8390 = and i32 %v4_8390, %v0_8390
  %v6_8390 = icmp slt i32 %v5_8390, 0
  store i1 %v6_8390, i1* %cpsr_v.global-to-local, align 1
  %v7_8390 = icmp slt i32 %v2_8390, 0
  store i1 %v7_8390, i1* %cpsr_n.global-to-local, align 1
  %v8_8390 = icmp eq i32 %v0_8390, 512
  store i1 %v8_8390, i1* %cpsr_z.global-to-local, align 1
  %v5_8394 = icmp slt i32 %v0_8390, 512
  br i1 %v5_8394, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_8340
  store i32 512, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8340, %bb206
  %v0_839c = phi i32 [ 512, %bb206 ], [ %v0_8390, %dec_label_pc_8340 ]
  store i32 53, i32* %r0.global-to-local, align 4
  %v1_83a0 = call i32 @function_11590(i32 53)
  store i32 %v0_839c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_83b0 = call i32 @function_135a8(i32 %v0_839c, i32 3140)
  store i32 %v2_83b0, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_83b8 = icmp slt i32 %v0_839c, 0
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  %v2_83b8 = icmp eq i32 %v0_839c, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83b0, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_839c, 1
  br i1 %tmp207, label %dec_label_pc_84f4, label %dec_label_pc_83c8

dec_label_pc_83c8:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_83cc

dec_label_pc_83cc:                                ; preds = %dec_label_pc_9e70, %dec_label_pc_83c8
  %v1_83d8 = phi i32 [ %v1_9e8c, %dec_label_pc_9e70 ], [ %v2_83b0, %dec_label_pc_83c8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_81e4, i32* %r1.global-to-local, align 4
  %v2_83d8 = inttoptr i32 %v1_83d8 to i32*
  store i32 -1, i32* %v2_83d8, align 4
  %v3_83dc = load i32, i32* @r5, align 4
  %v4_83dc = add i32 %v3_83dc, 4
  %v5_83dc = inttoptr i32 %v4_83dc to i8*
  store i8 0, i8* %v5_83dc, align 1
  %v0_83e0 = load i32, i32* @r7, align 4
  store i32 %v0_83e0, i32* %r0.global-to-local, align 4
  %v5_83e4 = call i32 @function_1282c(i32 %v0_83e0, i32 %v1_81e4, i32 -1, i32 0)
  store i32 %v5_83e4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_83f0 = and i32 %v5_83e4, 536870912
  %v3_83f0 = icmp ne i32 %v2_83f0, 0
  store i1 %v3_83f0, i1* %cpsr_c.global-to-local, align 1
  %v5_83f0 = mul i32 %v5_83e4, 24
  store i32 %v5_83f0, i32* %r3.global-to-local, align 4
  %v2_83f4 = add i32 %v5_83f0, %arg2
  store i32 %v2_83f4, i32* @r6, align 4
  %v1_83f8 = add i32 %v2_83f4, 16
  %v2_83f8 = inttoptr i32 %v1_83f8 to i32*
  %v3_83f8 = load i32, i32* %v2_83f8, align 4
  store i32 %v3_83f8, i32* %r2.global-to-local, align 4
  %v0_83fc = load i32, i32* @r5, align 4
  %v1_83fc = add i32 %v0_83fc, 532
  store i32 %v1_83fc, i32* @lr, align 4
  store i32 %v1_83fc, i32* @r0, align 4
  %v0_8404 = load i32, i32* @sl, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v2_8408 = add i32 %v0_83fc, 16
  %v3_8408 = inttoptr i32 %v2_8408 to i32*
  store i32 %v3_83f8, i32* %v3_8408, align 4
  %v0_840c = load i32, i32* @lr, align 4
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @function_1206c(i8* %v2_8410, i32 %v0_8404)
  store i32 %v3_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @r5, align 4
  %v1_8414 = add i32 %v0_8414, 532
  %v2_8414 = inttoptr i32 %v1_8414 to i8*
  %v3_8414 = load i8, i8* %v2_8414, align 1
  %v4_8414 = zext i8 %v3_8414 to i32
  store i32 %v4_8414, i32* %r3.global-to-local, align 4
  %v2_8418 = icmp ugt i8 %v3_8414, 46
  store i1 %v2_8418, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8418 = icmp ult i8 %v3_8414, 47
  store i1 %v6_8418, i1* %cpsr_n.global-to-local, align 1
  %v7_8418 = icmp eq i8 %v3_8414, 47
  store i1 %v7_8418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8418, label %dec_label_pc_8444, label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_83cc
  store i32 %v0_840c, i32* %r0.global-to-local, align 4
  %v1_8424 = inttoptr i32 %v0_840c to i8*
  %v2_8424 = call i32 @function_12044(i8* %v1_8424)
  store i32 %v2_8424, i32* @r2, align 4
  %v0_842c = load i32, i32* @r5, align 4
  %v1_8430 = add i32 %v0_842c, 533
  store i32 %v1_8430, i32* @r0, align 4
  store i32 %v0_840c, i32* @r1, align 4
  %v3_8438 = call i32 @function_12fd0(i32 %v1_8430, i32 %v0_840c, i32 %v2_8424)
  store i32 %v3_8438, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8440 = load i32, i32* @r5, align 4
  %v3_8440 = add i32 %v2_8440, 532
  %v4_8440 = inttoptr i32 %v3_8440 to i8*
  store i8 47, i8* %v4_8440, align 1
  %v0_8448.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %dec_label_pc_83cc, %dec_label_pc_8420
  %v0_8448 = phi i32 [ %v0_8414, %dec_label_pc_83cc ], [ %v0_8448.pre, %dec_label_pc_8420 ]
  %v0_8444 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8444, i32* %r1.global-to-local, align 4
  %v1_8448 = add i32 %v0_8448, 1440
  store i32 %v1_8448, i32* @r0, align 4
  %v2_844c = inttoptr i32 %v1_8448 to i8*
  %v3_844c = call i32 @function_1206c(i8* %v2_844c, i32 %v0_8444)
  %v0_8450 = load i32, i32* @r5, align 4
  %v0_8454 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8454, i32* %r1.global-to-local, align 4
  %v1_8458 = add i32 %v0_8450, 1431
  store i32 %v1_8458, i32* @r0, align 4
  %v2_845c = inttoptr i32 %v1_8458 to i8*
  %v3_845c = call i32 @function_1206c(i8* %v2_845c, i32 %v0_8454)
  %v0_8460 = load i32, i32* @r5, align 4
  %v1_8464 = add i32 %v0_8460, 789
  store i32 %v1_8464, i32* @r0, align 4
  %v0_8468 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8468, i32* %r1.global-to-local, align 4
  %v2_846c = inttoptr i32 %v1_8464 to i8*
  %v3_846c = call i32 @function_1206c(i8* %v2_846c, i32 %v0_8468)
  store i32 %v3_846c, i32* %r0.global-to-local, align 4
  %v0_8470 = load i32, i32* @r6, align 4
  %v1_8470 = add i32 %v0_8470, 20
  %v2_8470 = inttoptr i32 %v1_8470 to i8*
  %v3_8470 = load i8, i8* %v2_8470, align 1
  %v4_8470 = zext i8 %v3_8470 to i32
  store i32 %v4_8470, i32* %r3.global-to-local, align 4
  %v2_8474 = icmp ugt i8 %v3_8470, 30
  store i1 %v2_8474, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8474 = icmp ult i8 %v3_8470, 31
  store i1 %v6_8474, i1* %cpsr_n.global-to-local, align 1
  %v7_8474 = icmp eq i8 %v3_8470, 31
  store i1 %v7_8474, i1* %cpsr_z.global-to-local, align 1
  %v2_8478 = xor i1 %v7_8474, true
  %v3_8478 = and i1 %v2_8474, %v2_8478
  br i1 %v3_8478, label %dec_label_pc_84c8, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8444
  %v1_847c = add i32 %v0_8470, 16
  %v2_847c = inttoptr i32 %v1_847c to i32*
  %v3_847c = load i32, i32* %v2_847c, align 4
  store i32 %v3_847c, i32* @r4, align 4
  %v0_8480 = call i32 @function_f8c0()
  store i32 %v0_8480, i32* %r0.global-to-local, align 4
  %v0_8484 = load i32, i32* @r4, align 4
  %v1_8488 = and i32 %v0_8484, 65280
  store i32 %v1_8488, i32* %r3.global-to-local, align 4
  %v1_8484 = udiv i32 %v0_8484, 256
  %v3_848c = and i32 %v1_8484, 65280
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  %v3_8490 = mul i32 %v0_8484, 16777216
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_8494 = mul nuw nsw i32 %v1_8488, 256
  %v5_8494 = or i32 %v4_8494, %v3_8490
  store i32 %v5_8494, i32* %r1.global-to-local, align 4
  %v0_8498 = load i32, i32* @r6, align 4
  %v1_8498 = add i32 %v0_8498, 20
  %v2_8498 = inttoptr i32 %v1_8498 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* %ip.global-to-local, align 4
  %v2_84a0 = call i32 @llvm.bswap.i32(i32 %v0_8484)
  %v7_84a4 = lshr i32 %v0_8480, %v4_8498
  %v8_84a4 = add i32 %v7_84a4, %v2_84a0
  store i32 %v8_84a4, i32* %r2.global-to-local, align 4
  %v3_84b0 = mul i32 %v8_84a4, 16777216
  %v1_84b4 = and i32 %v8_84a4, 65280
  store i32 %v1_84b4, i32* %r0.global-to-local, align 4
  %v4_84b8 = mul nuw nsw i32 %v1_84b4, 256
  %v5_84b8 = or i32 %v4_84b8, %v3_84b0
  store i32 %v5_84b8, i32* %r1.global-to-local, align 4
  %v2_84bc = and i32 %v8_84a4, 8388608
  %v3_84bc = icmp ne i32 %v2_84bc, 0
  store i1 %v3_84bc, i1* %cpsr_c.global-to-local, align 1
  %v2_84c0 = call i32 @llvm.bswap.i32(i32 %v8_84a4)
  store i32 %v2_84c0, i32* %r3.global-to-local, align 4
  %v1_84c4 = load i32, i32* @r5, align 4
  %v2_84c4 = add i32 %v1_84c4, 16
  %v3_84c4 = inttoptr i32 %v2_84c4 to i32*
  store i32 %v2_84c0, i32* %v3_84c4, align 4
  br label %dec_label_pc_84c8

dec_label_pc_84c8:                                ; preds = %dec_label_pc_8444, %dec_label_pc_847c
  %v0_84c8 = call i32 @function_f8c0()
  store i32 %v0_84c8, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_84d0 = call i32 @function_12760(i32 %v0_84c8, i32 5)
  store i32 %v2_84d0, i32* %r0.global-to-local, align 4
  %v1_84d4 = add i32 %v2_84d0, -4
  %v3_84d4 = sub i32 3, %v2_84d0
  %v4_84d4 = and i32 %v3_84d4, %v2_84d0
  %v5_84d4 = icmp slt i32 %v4_84d4, 0
  store i1 %v5_84d4, i1* %cpsr_v.global-to-local, align 1
  %v6_84d4 = icmp slt i32 %v1_84d4, 0
  store i1 %v6_84d4, i1* %cpsr_n.global-to-local, align 1
  %v7_84d4 = icmp eq i32 %v2_84d0, 4
  store i1 %v7_84d4, i1* %cpsr_z.global-to-local, align 1
  %v5_84d8 = and i32 %v2_84d0, 1073741824
  %v6_84d8 = icmp ne i32 %v5_84d8, 0
  store i1 %v6_84d8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_84d0, label %dec_label_pc_9e70 [
    i32 0, label %dec_label_pc_9ed4
    i32 1, label %dec_label_pc_9f00
    i32 2, label %dec_label_pc_9f2c
    i32 3, label %dec_label_pc_9f58
    i32 4, label %dec_label_pc_9e48
  ]

dec_label_pc_84f4:                                ; preds = %thread-pre-split
  %v1_84f8 = add i32 %v2_83b0, 1456
  %v0_8500 = load i32, i32* %r8.global-to-local, align 4
  %v1_8500 = urem i32 %v0_8500, 256
  store i32 %v1_8500, i32* %r3.global-to-local, align 4
  %v1_8504 = add i32 %v2_83b0, 1464
  store i32 %v1_8504, i32* %r1.global-to-local, align 4
  %v2_8508 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_8508, i32* %r2.global-to-local, align 4
  store i32 %v1_84f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_8528.preheader:                      ; preds = %dec_label_pc_84f4, %dec_label_pc_9e94
  %storemerge148.in.in = phi i32 [ %v0_9ea8, %dec_label_pc_9e94 ], [ %v0_8500, %dec_label_pc_84f4 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_9ea0, %dec_label_pc_9e94 ], [ %v1_84f8, %dec_label_pc_84f4 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_9ea8, %dec_label_pc_9e94 ], [ %v1_8500, %dec_label_pc_84f4 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9eac, %dec_label_pc_9e94 ], [ %v1_8504, %dec_label_pc_84f4 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_9eb0, %dec_label_pc_9e94 ], [ %v2_8508, %dec_label_pc_84f4 ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_9eb8, i32* %r8.global-to-local, align 4
  %v4_8590 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_86d0 = ptrtoint i32* %stack_var_-148 to i32
  %v2_86e8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_8728 = ptrtoint i32* %stack_var_-72 to i32
  %v3_8734 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_8748 = ptrtoint i32* %stack_var_-36 to i32
  %v1_8940 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_8c94 = icmp slt i32 %v6_8200, 0
  %v2_8c94 = icmp eq i32 %v6_8200, 0
  %v4_8ce8 = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_8b90 = inttoptr i32 %v6_8200 to i8*
  %v2_87b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_87b8 = ptrtoint i32* %stack_var_-200 to i32
  %v2_87bc = ptrtoint i32* %stack_var_-328 to i32
  %v2_921c = add i32 %v2_8748, -20773
  %v2_88a8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_88b4 = ptrtoint i32* %stack_var_-48 to i32
  %v5_8590 = or i32 %v4_8590, %v3_9eb8
  %v1_8594 = and i32 %v3_9eb8, 128
  %v2_8594 = icmp ne i32 %v1_8594, 0
  %v3_8594248 = udiv i32 %v5_8590, 256
  %v1_859c = add i32 %stack_var_-20872.0.ph, -1464
  %v1_85a4 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_8594248, 16777216
  %v4_8710 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_9eb8, 16777216
  %v4_8718 = sdiv i32 %sext10, 16777216
  %v2_85dc = add i32 %v2_86d0, 112
  br label %dec_label_pc_8528

dec_label_pc_8528:                                ; preds = %dec_label_pc_8794, %dec_label_pc_878c, %dec_label_pc_8574, %dec_label_pc_8838, %dec_label_pc_8528.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_852c = call i32 @function_12ca8(i32* null)
  store i32 %v2_852c, i32* %r0.global-to-local, align 4
  store i32 %v2_852c, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_854c256 = load i32, i32* @sp, align 4
  %v3_854c257 = add i32 %v2_854c256, 20684
  %v4_854c258 = inttoptr i32 %v3_854c257 to i32*
  store i32 0, i32* %v4_854c258, align 4
  br label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_853c.dec_label_pc_853c_crit_edge:    ; preds = %dec_label_pc_8528, %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v0_853c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_854c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8540 = add i32 %v0_853c.pre, 4
  store i32 %v1_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = add i32 %v0_853c.pre, 20684
  store i32 %v1_8544, i32* %ip.global-to-local, align 4
  %v7_8548 = icmp eq i32 %v1_8540, 128
  %v2_854c = load i32, i32* @sp, align 4
  %v3_854c = add i32 %v2_854c, %v1_8544
  %v4_854c = inttoptr i32 %v3_854c to i32*
  store i32 %v0_854c.pre, i32* %v4_854c, align 4
  br i1 %v7_8548, label %dec_label_pc_8554, label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_8554:                                ; preds = %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v1_8548 = add i32 %v0_853c.pre, -124
  %v6_8548 = icmp slt i32 %v1_8548, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_8548, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8554 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8554, i32* %r0.global-to-local, align 4
  %v1_8560259 = add i32 %v0_8554, 4
  store i32 %v1_8560259, i32* %r3.global-to-local, align 4
  %v1_8564260 = add i32 %v0_8554, 20556
  store i32 %v1_8564260, i32* %lr.global-to-local, align 4
  %v7_8568261 = icmp eq i32 %v1_8560259, 128
  %v2_856c262 = load i32, i32* @sp, align 4
  %v3_856c263 = add i32 %v2_856c262, %v1_8564260
  %v4_856c264 = inttoptr i32 %v3_856c263 to i32*
  store i32 %v0_8554, i32* %v4_856c264, align 4
  br i1 %v7_8568261, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_855c.dec_label_pc_855c_crit_edge:    ; preds = %dec_label_pc_8554, %dec_label_pc_855c.dec_label_pc_855c_crit_edge
  %v0_855c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_856c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_8560 = add i32 %v0_855c.pre, 4
  store i32 %v1_8560, i32* %r3.global-to-local, align 4
  %v1_8564 = add i32 %v0_855c.pre, 20556
  store i32 %v1_8564, i32* %lr.global-to-local, align 4
  %v7_8568 = icmp eq i32 %v1_8560, 128
  %v2_856c = load i32, i32* @sp, align 4
  %v3_856c = add i32 %v2_856c, %v1_8564
  %v4_856c = inttoptr i32 %v3_856c to i32*
  store i32 %v0_856c.pre, i32* %v4_856c, align 4
  br i1 %v7_8568, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_8574:                                ; preds = %dec_label_pc_855c.dec_label_pc_855c_crit_edge, %dec_label_pc_8554
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_8528, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8574
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_8590, i32* %r2.global-to-local, align 4
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_8594248, i32* %lr.global-to-local, align 4
  %v0_8598 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8598, i32* @sl, align 4
  store i32 %v1_859c, i32* @r7, align 4
  store i32 %v0_8598, i32* @r8, align 4
  store i32 %v1_85a4, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_8650

dec_label_pc_85b8:                                ; preds = %dec_label_pc_865c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_85b8 = icmp eq i8 %v3_8650, 2
  store i1 %v7_85b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85b8, label %dec_label_pc_8d68, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %dec_label_pc_85b8
  %v2_85c0 = icmp ugt i8 %v3_8650, 3
  store i1 %v2_85c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c0 = icmp ult i8 %v3_8650, 4
  store i1 %v6_85c0, i1* %cpsr_n.global-to-local, align 1
  %v7_85c0 = icmp eq i8 %v3_8650, 4
  store i1 %v7_85c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c0, label %dec_label_pc_890c, label %dec_label_pc_85c8

dec_label_pc_85c8:                                ; preds = %dec_label_pc_85c0
  %v2_85c8 = icmp ugt i8 %v3_8650, 5
  store i1 %v2_85c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c8 = icmp ult i8 %v3_8650, 6
  store i1 %v6_85c8, i1* %cpsr_n.global-to-local, align 1
  %v7_85c8 = icmp eq i8 %v3_8650, 6
  store i1 %v7_85c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c8, label %.thread24, label %dec_label_pc_85e8

.thread24:                                        ; preds = %dec_label_pc_85c8
  %v2_85cc = add i32 %v3_8900, -1431
  %v3_85cc = inttoptr i32 %v2_85cc to i32*
  %v4_85cc = load i32, i32* %v3_85cc, align 4
  store i32 %v4_85cc, i32* %r0.global-to-local, align 4
  %v4_85d4 = udiv i32 %v4_85cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85d8 = mul nuw nsw i32 %v4_85d4, 4
  store i32 %v2_85dc, i32* %r1.global-to-local, align 4
  %v3_85e0 = add i32 %v4_85d8, %v2_85dc
  store i32 %v3_85e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85c8
  %v2_85e8 = icmp ugt i8 %v3_8650, 6
  store i1 %v2_85e8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85e8 = icmp ult i8 %v3_8650, 7
  store i1 %v6_85e8, i1* %cpsr_n.global-to-local, align 1
  %v7_85e8 = icmp eq i8 %v3_8650, 7
  store i1 %v7_85e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85e8, label %.thread35, label %dec_label_pc_8608

.thread35:                                        ; preds = %dec_label_pc_85e8
  %v2_85ec = add i32 %v3_8900, -1431
  %v3_85ec = inttoptr i32 %v2_85ec to i32*
  %v4_85ec = load i32, i32* %v3_85ec, align 4
  store i32 %v4_85ec, i32* %r0.global-to-local, align 4
  %v4_85f4 = udiv i32 %v4_85ec, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85f8 = mul nuw nsw i32 %v4_85f4, 4
  store i32 %v2_85dc, i32* %r2.global-to-local, align 4
  %v3_8600 = add i32 %v4_85f8, %v2_85dc
  store i32 %v3_8600, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8608:                                ; preds = %dec_label_pc_85e8
  %v2_8608 = icmp ugt i8 %v3_8650, 9
  store i1 %v2_8608, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8608 = icmp ult i8 %v3_8650, 10
  store i1 %v6_8608, i1* %cpsr_n.global-to-local, align 1
  %v7_8608 = icmp eq i8 %v3_8650, 10
  store i1 %v7_8608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8608, label %dec_label_pc_8d30, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8608
  %v1_8610 = add nsw i32 %v4_8650, -11
  %v2_8610 = icmp ugt i8 %v3_8650, 10
  store i1 %v2_8610, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8610 = icmp ult i8 %v3_8650, 11
  store i1 %v6_8610, i1* %cpsr_n.global-to-local, align 1
  %v7_8610 = icmp eq i8 %v3_8650, 11
  store i1 %v7_8610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8610, label %dec_label_pc_98a4, label %dec_label_pc_8618

dec_label_pc_8618:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8610
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8650, align 1
  %v0_8620 = load i32, i32* @r6, align 4
  %v1_8620 = add i32 %v0_8620, -1431
  %v2_8620 = inttoptr i32 %v1_8620 to i32*
  %v3_8620 = load i32, i32* %v2_8620, align 4
  store i32 %v3_8620, i32* %r0.global-to-local, align 4
  %v1_8624 = call i32 @function_129d8(i32 %v3_8620)
  store i32 %v1_8624, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_862c = load i32, i32* @r6, align 4
  %v2_862c = add i32 %v1_862c, -1431
  %v3_862c = inttoptr i32 %v2_862c to i32*
  store i32 -1, i32* %v3_862c, align 4
  br label %dec_label_pc_8630

dec_label_pc_8630:                                ; preds = %dec_label_pc_8ccc, %dec_label_pc_8d48, %dec_label_pc_8750, %dec_label_pc_8664, %dec_label_pc_98a4, %dec_label_pc_8618
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8634 = load i32, i32* @r8, align 4
  %v1_8634 = add i32 %v0_8634, 1
  store i32 %v1_8634, i32* @r8, align 4
  %v0_8638 = load i32, i32* @r7, align 4
  %v0_863c = load i32, i32* @r6, align 4
  %v2_8640 = sub i32 %v0_839c, %v1_8634
  %v3_8640 = icmp uge i32 %v0_839c, %v1_8634
  store i1 %v3_8640, i1* %cpsr_c.global-to-local, align 1
  %v4_8640 = xor i32 %v1_8634, %v0_839c
  %v5_8640 = xor i32 %v2_8640, %v0_839c
  %v6_8640 = and i32 %v5_8640, %v4_8640
  %v7_8640 = icmp slt i32 %v6_8640, 0
  store i1 %v7_8640, i1* %cpsr_v.global-to-local, align 1
  %v8_8640 = icmp slt i32 %v2_8640, 0
  store i1 %v8_8640, i1* %cpsr_n.global-to-local, align 1
  %v9_8640 = icmp eq i32 %v0_839c, %v1_8634
  store i1 %v9_8640, i1* %cpsr_z.global-to-local, align 1
  %v1_8644 = add i32 %v0_8638, 3140
  store i32 %v1_8644, i32* @r7, align 4
  %v1_8648 = add i32 %v0_863c, 3140
  store i32 %v1_8648, i32* @r6, align 4
  br i1 %v9_8640, label %dec_label_pc_8630.dec_label_pc_878c_crit_edge, label %dec_label_pc_8650

dec_label_pc_8630.dec_label_pc_878c_crit_edge:    ; preds = %dec_label_pc_8630
  %v0_878c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_878c

dec_label_pc_8650:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630, %dec_label_pc_8580
  %v3_8900 = phi i32 [ %v1_85a4, %dec_label_pc_8580 ], [ %v1_8648, %dec_label_pc_8630 ], [ %v1_8784, %dec_label_pc_876c ]
  %v1_8650 = add i32 %v3_8900, -1427
  %v2_8650 = inttoptr i32 %v1_8650 to i8*
  %v3_8650 = load i8, i8* %v2_8650, align 1
  %v4_8650 = zext i8 %v3_8650 to i32
  store i32 %v4_8650, i32* %r3.global-to-local, align 4
  %v2_8654 = icmp ne i8 %v3_8650, 0
  store i1 %v2_8654, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8654 = icmp eq i8 %v3_8650, 0
  store i1 %v6_8654, i1* %cpsr_n.global-to-local, align 1
  %v7_8654 = icmp eq i8 %v3_8650, 1
  store i1 %v7_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8654, label %dec_label_pc_88f4, label %dec_label_pc_865c

dec_label_pc_865c:                                ; preds = %dec_label_pc_8650
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8654, label %dec_label_pc_8664, label %dec_label_pc_85b8

dec_label_pc_8664:                                ; preds = %.thread43.dec_label_pc_8664_crit_edge, %dec_label_pc_865c
  %v0_8664 = phi i32 [ %v0_8664.pre, %.thread43.dec_label_pc_8664_crit_edge ], [ %v3_8900, %dec_label_pc_865c ]
  %v1_8664 = add i32 %v0_8664, -1431
  %v2_8664 = inttoptr i32 %v1_8664 to i32*
  %v3_8664 = load i32, i32* %v2_8664, align 4
  store i32 %v3_8664, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v1_8670 = add i32 %v3_8664, 1
  %v2_8670 = icmp eq i32 %v3_8664, -1
  store i1 %v2_8670, i1* %cpsr_c.global-to-local, align 1
  %v3_8670 = sub i32 0, %v3_8664
  %v4_8670 = and i32 %v1_8670, %v3_8670
  %v5_8670 = icmp slt i32 %v4_8670, 0
  store i1 %v5_8670, i1* %cpsr_v.global-to-local, align 1
  %v6_8670 = icmp slt i32 %v1_8670, 0
  store i1 %v6_8670, i1* %cpsr_n.global-to-local, align 1
  %v7_8670 = icmp eq i32 %v1_8670, 0
  store i1 %v7_8670, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8684 = xor i1 %v7_8670, true
  call void @__pseudo_cond_branch(i1 %v1_8684, i32 ptrtoint (i32* @global_var_129d8.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8690 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8690, i32* %r2.global-to-local, align 4
  %v3_8694 = call i32 @function_132bc(i32 2, i32 1, i32 %v0_8690)
  store i32 %v3_8694, i32* %r0.global-to-local, align 4
  %v1_8698 = add i32 %v3_8694, 1
  %v2_8698 = icmp eq i32 %v3_8694, -1
  store i1 %v2_8698, i1* %cpsr_c.global-to-local, align 1
  %v3_8698 = sub i32 0, %v3_8694
  %v4_8698 = and i32 %v1_8698, %v3_8698
  %v5_8698 = icmp slt i32 %v4_8698, 0
  store i1 %v5_8698, i1* %cpsr_v.global-to-local, align 1
  %v6_8698 = icmp slt i32 %v1_8698, 0
  store i1 %v6_8698, i1* %cpsr_n.global-to-local, align 1
  %v7_8698 = icmp eq i32 %v1_8698, 0
  store i1 %v7_8698, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8694, i32* @r4, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = add i32 %v1_86a0, -1431
  %v3_86a0 = inttoptr i32 %v2_86a0 to i32*
  store i32 %v3_8694, i32* %v3_86a0, align 4
  br i1 %v7_8698, label %dec_label_pc_8630, label %dec_label_pc_86a8

dec_label_pc_86a8:                                ; preds = %dec_label_pc_8664
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_86ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86ac, i32* @r2, align 4
  %v0_86b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_86b0 = call i32 @function_12914(i32 %v0_86b0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_86b8 = or i32 %v2_86b0, 2048
  store i32 %v1_86b8, i32* @r2, align 4
  %v0_86bc = load i32, i32* @r4, align 4
  store i32 %v0_86bc, i32* %r0.global-to-local, align 4
  %v2_86c0 = call i32 @function_12914(i32 %v0_86bc, i32 4)
  store i32 %v2_86c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r6, align 4
  %v1_86d4 = add i32 %v0_86d4, -1431
  %v2_86d4 = inttoptr i32 %v1_86d4 to i32*
  %v3_86d4 = load i32, i32* %v2_86d4, align 4
  store i32 %v3_86d4, i32* %r0.global-to-local, align 4
  %v0_86d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_86e8, i32* %r3.global-to-local, align 4
  %v6_86f0 = call i32 @function_1328c(i32 %v3_86d4, i32 %v0_86d8, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_86f0, i32* %r0.global-to-local, align 4
  %v0_86f4 = load i32, i32* @r6, align 4
  %v1_86f4 = add i32 %v0_86f4, -1415
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  %v3_86f4 = load i32, i32* %v2_86f4, align 4
  store i32 %v3_86f4, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8704 = add i32 %v0_86f4, -1431
  %v2_8704 = inttoptr i32 %v1_8704 to i32*
  %v3_8704 = load i32, i32* %v2_8704, align 4
  store i32 %v3_8704, i32* %r0.global-to-local, align 4
  %v3_870c = add i32 %v0_86f4, -1427
  %v4_870c = inttoptr i32 %v3_870c to i8*
  store i8 2, i8* %v4_870c, align 1
  store i32 %v4_8710, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8714, i32* %stack_var_-72, align 4
  store i32 %v4_8718, i32* %r3.global-to-local, align 4
  store i32 %v2_8728, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_8730 = load i32, i32* %sb.global-to-local, align 4
  %v1_8730 = load i32, i32* @r6, align 4
  %v2_8730 = add i32 %v1_8730, -1423
  %v3_8730 = inttoptr i32 %v2_8730 to i32*
  store i32 %v0_8730, i32* %v3_8730, align 4
  %v4_8734 = call i32 @function_13118(i32 %v3_8704, %sockaddr* nonnull %v3_8734, i32 16)
  store i32 %v4_8734, i32* %r0.global-to-local, align 4
  %v0_8738 = load i32, i32* @r6, align 4
  %v1_8738 = add i32 %v0_8738, -1431
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  %v3_8738 = load i32, i32* %v2_8738, align 4
  store i32 %v3_8738, i32* %r0.global-to-local, align 4
  %v3_8740 = udiv i32 %v3_8738, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8744 = mul nuw nsw i32 %v3_8740, 4
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8750:                                ; preds = %dec_label_pc_8d78, %dec_label_pc_86a8
  %v1_875c = phi i32 [ %v3_8738, %dec_label_pc_86a8 ], [ %v3_8d78, %dec_label_pc_8d78 ]
  %v3_8744.pn = phi i32 [ %v3_8744, %dec_label_pc_86a8 ], [ %v3_8d84, %dec_label_pc_8d78 ]
  %storemerge = add i32 %v3_8744.pn, %v2_8748
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_8750 = add i32 %storemerge, -292
  %v2_8750 = inttoptr i32 %v1_8750 to i32*
  %v3_8750 = load i32, i32* %v2_8750, align 4
  %v1_8754 = urem i32 %v1_875c, 32
  store i32 %v1_8754, i32* %r1.global-to-local, align 4
  %v1_8758 = load i32, i32* %fp.global-to-local, align 4
  %v7_8758 = shl i32 %v1_8758, %v1_8754
  %v8_8758 = or i32 %v7_8758, %v3_8750
  store i32 %v8_8758, i32* %r2.global-to-local, align 4
  %v0_875c = load i32, i32* @sl, align 4
  %v2_875c = sub i32 %v0_875c, %v1_875c
  %v3_875c = icmp uge i32 %v0_875c, %v1_875c
  store i1 %v3_875c, i1* %cpsr_c.global-to-local, align 1
  %v4_875c = xor i32 %v0_875c, %v1_875c
  %v5_875c = xor i32 %v2_875c, %v0_875c
  %v6_875c = and i32 %v5_875c, %v4_875c
  %v7_875c = icmp slt i32 %v6_875c, 0
  store i1 %v7_875c, i1* %cpsr_v.global-to-local, align 1
  %v8_875c = icmp slt i32 %v2_875c, 0
  store i1 %v8_875c, i1* %cpsr_n.global-to-local, align 1
  %v9_875c = icmp eq i32 %v0_875c, %v1_875c
  store i1 %v9_875c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8758, i32* %v2_8750, align 4
  %v2_8764 = xor i1 %v8_875c, %v7_875c
  br i1 %v2_8764, label %dec_label_pc_8768, label %dec_label_pc_8630

dec_label_pc_8768:                                ; preds = %dec_label_pc_8750
  %v0_8768 = load i32, i32* %r0.global-to-local, align 4
  %v1_8768 = add i32 %v0_8768, 1
  store i32 %v1_8768, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_876c:                                ; preds = %dec_label_pc_8d60, %dec_label_pc_8d28, %dec_label_pc_8768
  %v0_878c98 = phi i32 [ %v1_8d60, %dec_label_pc_8d60 ], [ %v1_8d28, %dec_label_pc_8d28 ], [ %v1_8768, %dec_label_pc_8768 ]
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8770 = load i32, i32* @r8, align 4
  %v1_8770 = add i32 %v0_8770, 1
  store i32 %v1_8770, i32* @r8, align 4
  %v0_8774 = load i32, i32* @r7, align 4
  %v0_8778 = load i32, i32* @r6, align 4
  %v2_877c = sub i32 %v0_839c, %v1_8770
  %v3_877c = icmp uge i32 %v0_839c, %v1_8770
  store i1 %v3_877c, i1* %cpsr_c.global-to-local, align 1
  %v4_877c = xor i32 %v1_8770, %v0_839c
  %v5_877c = xor i32 %v2_877c, %v0_839c
  %v6_877c = and i32 %v5_877c, %v4_877c
  %v7_877c = icmp slt i32 %v6_877c, 0
  store i1 %v7_877c, i1* %cpsr_v.global-to-local, align 1
  %v8_877c = icmp slt i32 %v2_877c, 0
  store i1 %v8_877c, i1* %cpsr_n.global-to-local, align 1
  %v9_877c = icmp eq i32 %v0_839c, %v1_8770
  store i1 %v9_877c, i1* %cpsr_z.global-to-local, align 1
  %v1_8780 = add i32 %v0_8774, 3140
  store i32 %v1_8780, i32* @r7, align 4
  %v1_8784 = add i32 %v0_8778, 3140
  store i32 %v1_8784, i32* @r6, align 4
  br i1 %v9_877c, label %dec_label_pc_878c, label %dec_label_pc_8650

dec_label_pc_878c:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630.dec_label_pc_878c_crit_edge
  %v0_87c4 = phi i32 [ %v0_878c.pre, %dec_label_pc_8630.dec_label_pc_878c_crit_edge ], [ %v0_878c98, %dec_label_pc_876c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_878c = icmp slt i32 %v0_87c4, 0
  store i1 %v1_878c, i1* %cpsr_n.global-to-local, align 1
  %v2_878c = icmp eq i32 %v0_87c4, 0
  store i1 %v2_878c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_878c, label %dec_label_pc_8528, label %dec_label_pc_8794

dec_label_pc_8794:                                ; preds = %dec_label_pc_878c
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_87b4, i32* %ip.global-to-local, align 4
  store i32 %v2_87b8, i32* %r1.global-to-local, align 4
  store i32 %v2_87bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_87c4, i32* %r0.global-to-local, align 4
  %v5_87cc = call i32 @function_12bf8(i32 %v0_87c4, i32 %v2_87b8, i32 %v2_87bc, i32 0, i32 %v2_87b4)
  store i32 %v5_87cc, i32* @r4, align 4
  %v0_87d4 = load i32, i32* @r5, align 4
  store i32 %v0_87d4, i32* %r0.global-to-local, align 4
  %v1_87d8 = inttoptr i32 %v0_87d4 to i32*
  %v2_87d8 = call i32 @function_12ca8(i32* %v1_87d8)
  store i32 %v2_87d8, i32* %r0.global-to-local, align 4
  %v0_87dc = load i32, i32* @r4, align 4
  %v1_87dc = load i32, i32* @r5, align 4
  %v2_87dc = sub i32 %v0_87dc, %v1_87dc
  %v3_87dc = icmp uge i32 %v0_87dc, %v1_87dc
  store i1 %v3_87dc, i1* %cpsr_c.global-to-local, align 1
  %v4_87dc = xor i32 %v1_87dc, %v0_87dc
  %v5_87dc = xor i32 %v2_87dc, %v0_87dc
  %v6_87dc = and i32 %v5_87dc, %v4_87dc
  %v7_87dc = icmp slt i32 %v6_87dc, 0
  store i1 %v7_87dc, i1* %cpsr_v.global-to-local, align 1
  %v8_87dc = icmp slt i32 %v2_87dc, 0
  store i1 %v8_87dc, i1* %cpsr_n.global-to-local, align 1
  %v9_87dc = icmp eq i32 %v0_87dc, %v1_87dc
  store i1 %v9_87dc, i1* %cpsr_z.global-to-local, align 1
  %v7_87e4 = icmp sgt i32 %v0_87dc, %v1_87dc
  br i1 %v7_87e4, label %dec_label_pc_87e8, label %dec_label_pc_8528

dec_label_pc_87e8:                                ; preds = %dec_label_pc_8794
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_8858

dec_label_pc_87f4:                                ; preds = %.thread38.dec_label_pc_87f4_crit_edge, %dec_label_pc_8868
  %v0_880c = phi i32 [ %v0_87f4.pre, %.thread38.dec_label_pc_87f4_crit_edge ], [ %v3_8858, %dec_label_pc_8868 ]
  %v3_87f4 = udiv i32 %v0_880c, 32
  store i32 %v2_8748, i32* %r2.global-to-local, align 4
  %v3_8800 = mul nuw nsw i32 %v3_87f4, 4
  %v2_8804 = add i32 %v3_8800, %v2_8748
  store i32 %v2_8804, i32* %r3.global-to-local, align 4
  %v1_8808 = add i32 %v2_8804, -164
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  %v3_8808 = load i32, i32* %v2_8808, align 4
  %v1_880c = urem i32 %v0_880c, 32
  store i32 %v1_880c, i32* %r1.global-to-local, align 4
  %v2_8810 = add nsw i32 %v1_880c, -1
  %v3_8810 = shl i32 1, %v2_8810
  %v4_8810 = and i32 %v3_8810, %v3_8808
  %v5_8810 = icmp ne i32 %v4_8810, 0
  store i1 %v5_8810, i1* %cpsr_c.global-to-local, align 1
  %v6_8810 = lshr i32 %v3_8808, %v1_880c
  store i32 %v6_8810, i32* %r2.global-to-local, align 4
  %v1_8814 = urem i32 %v6_8810, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8814 = icmp eq i32 %v1_8814, 0
  store i1 %v2_8814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8814, label %dec_label_pc_8838, label %dec_label_pc_881c

dec_label_pc_881c:                                ; preds = %dec_label_pc_87f4
  %v0_881c = load i32, i32* @r8, align 4
  %v1_881c = add i32 %v0_881c, -1452
  %v2_881c = inttoptr i32 %v1_881c to i8*
  %v3_881c = load i8, i8* %v2_881c, align 1
  %v4_881c = zext i8 %v3_881c to i32
  store i32 %v4_881c, i32* %r3.global-to-local, align 4
  %v2_8820 = icmp ugt i8 %v3_881c, 5
  store i1 %v2_8820, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8820 = icmp ult i8 %v3_881c, 6
  store i1 %v6_8820, i1* %cpsr_n.global-to-local, align 1
  %v7_8820 = icmp eq i8 %v3_881c, 6
  store i1 %v7_8820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8820, label %dec_label_pc_8dd0, label %dec_label_pc_8828

dec_label_pc_8828:                                ; preds = %dec_label_pc_881c
  %v2_8828 = icmp ugt i8 %v3_881c, 6
  store i1 %v2_8828, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8828 = icmp ult i8 %v3_881c, 7
  store i1 %v6_8828, i1* %cpsr_n.global-to-local, align 1
  %v7_8828 = icmp eq i8 %v3_881c, 7
  store i1 %v7_8828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8828, label %dec_label_pc_940c, label %dec_label_pc_8830

dec_label_pc_8830:                                ; preds = %dec_label_pc_8828
  %v2_8830 = icmp ugt i8 %v3_881c, 9
  store i1 %v2_8830, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8830 = icmp ult i8 %v3_881c, 10
  store i1 %v6_8830, i1* %cpsr_n.global-to-local, align 1
  %v7_8830 = icmp eq i8 %v3_881c, 10
  store i1 %v7_8830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8830, label %dec_label_pc_961c, label %dec_label_pc_8838

dec_label_pc_8838:                                ; preds = %dec_label_pc_9510, %dec_label_pc_9950, %dec_label_pc_9a98, %dec_label_pc_8830, %dec_label_pc_87f4, %dec_label_pc_8858, %dec_label_pc_9914, %dec_label_pc_9d84, %dec_label_pc_9b34, %dec_label_pc_9a7c, %dec_label_pc_965c, %dec_label_pc_9400, %dec_label_pc_88dc, %dec_label_pc_9934, %dec_label_pc_98fc, %dec_label_pc_9884
  store i32 %v0_839c, i32* %r3.global-to-local, align 4
  %v1_8840 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_8840, i32* %r2.global-to-local, align 4
  %v0_8844 = load i32, i32* @r8, align 4
  %v2_8848 = sub i32 %v1_8840, %v0_839c
  %v3_8848 = icmp uge i32 %v1_8840, %v0_839c
  store i1 %v3_8848, i1* %cpsr_c.global-to-local, align 1
  %v4_8848 = xor i32 %v1_8840, %v0_839c
  %v5_8848 = xor i32 %v2_8848, %v1_8840
  %v6_8848 = and i32 %v5_8848, %v4_8848
  %v7_8848 = icmp slt i32 %v6_8848, 0
  store i1 %v7_8848, i1* %cpsr_v.global-to-local, align 1
  %v8_8848 = icmp slt i32 %v2_8848, 0
  store i1 %v8_8848, i1* %cpsr_n.global-to-local, align 1
  %v9_8848 = icmp eq i32 %v1_8840, %v0_839c
  store i1 %v9_8848, i1* %cpsr_z.global-to-local, align 1
  %v1_8850 = add i32 %v0_8844, 3140
  store i32 %v1_8850, i32* @r8, align 4
  br i1 %v9_8848, label %dec_label_pc_8528, label %dec_label_pc_8858

dec_label_pc_8858:                                ; preds = %dec_label_pc_8838, %dec_label_pc_87e8
  %v0_8860 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_87e8 ], [ %v1_8850, %dec_label_pc_8838 ]
  %stack_var_-20832.0 = phi i32 [ %v1_87dc, %dec_label_pc_87e8 ], [ %v1_8840, %dec_label_pc_8838 ]
  %v1_8858 = add i32 %v0_8860, -1456
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  %v3_8858 = load i32, i32* %v2_8858, align 4
  store i32 %v3_8858, i32* %r0.global-to-local, align 4
  %v1_885c = add i32 %v3_8858, 1
  %v2_885c = icmp eq i32 %v3_8858, -1
  store i1 %v2_885c, i1* %cpsr_c.global-to-local, align 1
  %v3_885c = sub i32 0, %v3_8858
  %v4_885c = and i32 %v1_885c, %v3_885c
  %v5_885c = icmp slt i32 %v4_885c, 0
  store i1 %v5_885c, i1* %cpsr_v.global-to-local, align 1
  %v6_885c = icmp slt i32 %v1_885c, 0
  store i1 %v6_885c, i1* %cpsr_n.global-to-local, align 1
  %v7_885c = icmp eq i32 %v1_885c, 0
  store i1 %v7_885c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8858, i32* %sb.global-to-local, align 4
  br i1 %v7_885c, label %dec_label_pc_8838, label %dec_label_pc_8868

dec_label_pc_8868:                                ; preds = %dec_label_pc_8858
  %v3_8868 = udiv i32 %v3_8858, 32
  %v3_8870 = mul nuw nsw i32 %v3_8868, 4
  store i32 %v2_8748, i32* @lr, align 4
  %v2_8878 = add i32 %v3_8870, %v2_8748
  store i32 %v2_8878, i32* %r3.global-to-local, align 4
  %v1_887c = add i32 %v2_8878, -292
  %v2_887c = inttoptr i32 %v1_887c to i32*
  %v3_887c = load i32, i32* %v2_887c, align 4
  %v1_8880 = urem i32 %v3_8858, 32
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v2_8884 = add nsw i32 %v1_8880, -1
  %v3_8884 = shl i32 1, %v2_8884
  %v4_8884 = and i32 %v3_887c, %v3_8884
  %v5_8884 = icmp ne i32 %v4_8884, 0
  store i1 %v5_8884, i1* %cpsr_c.global-to-local, align 1
  %v6_8884 = lshr i32 %v3_887c, %v1_8880
  store i32 %v6_8884, i32* %r2.global-to-local, align 4
  %v1_8888 = urem i32 %v6_8884, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8888 = icmp eq i32 %v1_8888, 0
  store i1 %v2_8888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8888, label %dec_label_pc_87f4, label %dec_label_pc_8890

dec_label_pc_8890:                                ; preds = %dec_label_pc_8868
  store i32 4, i32* @r4, align 4
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_88a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_88b4, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v6_88c0 = call i32 @function_13170(i32 %v3_8858, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_88b4)
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_88c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_88c8, i32* %r3.global-to-local, align 4
  %v2_88cc = or i32 %v3_88c8, %v6_88c0
  store i32 %v2_88cc, i32* %r0.global-to-local, align 4
  %v3_88cc = icmp slt i32 %v2_88cc, 0
  store i1 %v3_88cc, i1* %cpsr_n.global-to-local, align 1
  %v4_88cc = icmp eq i32 %v2_88cc, 0
  store i1 %v4_88cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_88cc, label %.thread38, label %dec_label_pc_88dc

.thread38:                                        ; preds = %dec_label_pc_8890
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, -1456
  %v3_88d0 = inttoptr i32 %v2_88d0 to i32*
  %v4_88d0 = load i32, i32* %v3_88d0, align 4
  store i32 %v4_88d0, i32* %r0.global-to-local, align 4
  %v1_88d4 = load i32, i32* @r4, align 4
  %v2_88d4 = trunc i32 %v1_88d4 to i8
  %v4_88d4 = add i32 %v1_88d0, -1452
  %v5_88d4 = inttoptr i32 %v4_88d4 to i8*
  store i8 %v2_88d4, i8* %v5_88d4, align 1
  %v0_88d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_88d8.pr.pr, label %.thread38.dec_label_pc_87f4_crit_edge, label %dec_label_pc_88dc

.thread38.dec_label_pc_87f4_crit_edge:            ; preds = %.thread38
  %v0_87f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87f4

dec_label_pc_88dc:                                ; preds = %dec_label_pc_8890, %.thread38
  %v0_88dc = load i32, i32* @r8, align 4
  %v1_88dc = add i32 %v0_88dc, -1456
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  %v3_88dc = load i32, i32* %v2_88dc, align 4
  store i32 %v3_88dc, i32* %r0.global-to-local, align 4
  %v1_88e0 = call i32 @function_129d8(i32 %v3_88dc)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r8, align 4
  %v2_88e8 = add i32 %v1_88e8, -1456
  %v3_88e8 = inttoptr i32 %v2_88e8 to i32*
  store i32 -1, i32* %v3_88e8, align 4
  %v0_88ec = load i32, i32* @r5, align 4
  %v1_88ec = trunc i32 %v0_88ec to i8
  %v2_88ec = load i32, i32* @r8, align 4
  %v3_88ec = add i32 %v2_88ec, -1452
  %v4_88ec = inttoptr i32 %v3_88ec to i8*
  store i8 %v1_88ec, i8* %v4_88ec, align 1
  br label %dec_label_pc_8838

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8650
  %v1_88f4 = add i32 %v3_8900, 25
  %v2_88f4 = inttoptr i32 %v1_88f4 to i32*
  %v3_88f4 = load i32, i32* %v2_88f4, align 4
  store i32 %v3_88f4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_88f8 = icmp slt i32 %v3_88f4, 0
  store i1 %v1_88f8, i1* %cpsr_n.global-to-local, align 1
  %v2_88f8 = icmp eq i32 %v3_88f4, 0
  store i1 %v2_88f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_88f8, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_88f4
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_8650, align 1
  %v0_8904.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8904.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_890c

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_8904.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_8904.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8904.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_88f4
  %v3_8904 = phi i32 [ %v3_8904.pre, %.thread41..thread43_crit_edge ], [ %v3_8900, %dec_label_pc_88f4 ]
  %v1_8904.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_88f4 ]
  %v4_8904 = add i32 %v3_8904, -1427
  %v5_8904 = inttoptr i32 %v4_8904 to i8*
  store i8 %v1_8904.off0, i8* %v5_8904, align 1
  %v0_8908.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8908.pr, label %.thread43.dec_label_pc_8664_crit_edge, label %dec_label_pc_890c

.thread43.dec_label_pc_8664_crit_edge:            ; preds = %.thread43
  %v0_8664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8664

dec_label_pc_890c:                                ; preds = %.thread41, %.thread43, %dec_label_pc_85c0
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_8914 = load i32, i32* @r7, align 4
  %v1_8914 = add i32 %v0_8914, 2112
  store i32 %v1_8914, i32* %r0.global-to-local, align 4
  %v1_8918 = load i32, i32* @r6, align 4
  %v2_8918 = add i32 %v1_8918, 33
  %v3_8918 = inttoptr i32 %v2_8918 to i32*
  store i32 -1, i32* %v3_8918, align 4
  %v0_891c = load i32, i32* %r0.global-to-local, align 4
  %v1_891c = add i32 %v0_891c, 4
  store i32 %v1_891c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8924 = load i32, i32* @r5, align 4
  %v1_8924 = load i32, i32* @r6, align 4
  %v2_8924 = add i32 %v1_8924, 21
  %v3_8924 = inttoptr i32 %v2_8924 to i32*
  store i32 %v0_8924, i32* %v3_8924, align 4
  %v2_8928 = call i32 @function_120e4(i32 %v1_891c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8934 = load i32, i32* @r5, align 4
  %v1_8934 = load i32, i32* @r6, align 4
  %v2_8934 = add i32 %v1_8934, 681
  %v3_8934 = inttoptr i32 %v2_8934 to i32*
  store i32 %v0_8934, i32* %v3_8934, align 4
  %v2_8938 = call i32 @function_120e4(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8940 = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_8948 = load i32, i32* @r6, align 4
  store i32 %v0_8948, i32* %r1.global-to-local, align 4
  %v2_894c = add i32 %v2_8940, %stack_var_-20856.0.ph
  store i32 %v2_894c, i32* @r0, align 4
  %v2_8950 = inttoptr i32 %v2_894c to i8*
  %v3_8950 = call i32 @function_1206c(i8* %v2_8950, i32 %v0_8948)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8958 = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150cc.27 to i32), i32* %r1.global-to-local, align 4
  %v2_8964 = add i32 %v2_8958, %stack_var_-20856.0.ph
  store i32 %v2_8964, i32* @r0, align 4
  %v2_8968 = inttoptr i32 %v2_8964 to i8*
  %v3_8968 = call i32 @function_1206c(i8* %v2_8968, i32 ptrtoint (i32* @global_var_150cc.27 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8970 = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_8978 = load i32, i32* @r7, align 4
  %v1_8978 = add i32 %v0_8978, 532
  store i32 %v1_8978, i32* %r1.global-to-local, align 4
  %v2_897c = add i32 %v2_8970, %stack_var_-20856.0.ph
  store i32 %v2_897c, i32* @r0, align 4
  %v2_8980 = inttoptr i32 %v2_897c to i8*
  %v3_8980 = call i32 @function_1206c(i8* %v2_8980, i32 %v1_8978)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8988 = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_150a4.29 to i32), i32* %r1.global-to-local, align 4
  %v2_8994 = add i32 %v2_8988, %stack_var_-20856.0.ph
  store i32 %v2_8994, i32* @r0, align 4
  %v3_8998 = inttoptr i32 %v2_8994 to i8*
  %v4_8998 = call i32 @function_1206c(i8* %v3_8998, i32 ptrtoint ([24 x i8]* @global_var_150a4.29 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89a0 = call i32 @function_12044(i8* %v1_8940)
  %v2_89a8 = add i32 %v2_89a0, %stack_var_-20856.0.ph
  store i32 %v2_89a8, i32* @r0, align 4
  %v0_89ac = load i32, i32* @r7, align 4
  %v1_89ac = add i32 %v0_89ac, 20
  store i32 %v1_89ac, i32* %r1.global-to-local, align 4
  %v2_89b0 = inttoptr i32 %v2_89a8 to i8*
  %v3_89b0 = call i32 @function_1206c(i8* %v2_89b0, i32 %v1_89ac)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b8 = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_150bc.31 to i32), i32* %r1.global-to-local, align 4
  %v2_89c4 = add i32 %v2_89b8, %stack_var_-20856.0.ph
  store i32 %v2_89c4, i32* @r0, align 4
  %v3_89c8 = inttoptr i32 %v2_89c4 to i8*
  %v4_89c8 = call i32 @function_1206c(i8* %v3_89c8, i32 ptrtoint ([9 x i8]* @global_var_150bc.31 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d0 = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r7, align 4
  %v2_89dc = add i32 %v2_89d0, %stack_var_-20856.0.ph
  store i32 %v2_89dc, i32* @r0, align 4
  %v1_89e0 = add i32 %v0_89d8, 789
  store i32 %v1_89e0, i32* %r1.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v2_89dc to i8*
  %v3_89e4 = call i32 @function_1206c(i8* %v2_89e4, i32 %v1_89e0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89ec = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  %v2_89f8 = add i32 %v2_89ec, %stack_var_-20856.0.ph
  store i32 %v2_89f8, i32* @r0, align 4
  %v3_89fc = inttoptr i32 %v2_89f8 to i8*
  %v4_89fc = call i32 @function_1206c(i8* %v3_89fc, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32))
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_8a04 = call i32 @function_11590(i32 39)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a0c = call i32 @function_12044(i8* %v1_8940)
  %v0_8a10 = load i32, i32* @r5, align 4
  store i32 %v0_8a10, i32* %r1.global-to-local, align 4
  store i32 %v2_8a0c, i32* @r4, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_8a1c = inttoptr i32 %v0_8a10 to i32*
  %v3_8a1c = call i32 @function_114ac(i32 39, i32* %v2_8a1c)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_8a1c, i32* %r1.global-to-local, align 4
  %v1_8a28 = load i32, i32* @r4, align 4
  %v2_8a28 = add i32 %v1_8a28, %stack_var_-20856.0.ph
  store i32 %v2_8a28, i32* @r0, align 4
  %v2_8a2c = inttoptr i32 %v2_8a28 to i8*
  %v3_8a2c = call i32 @function_1206c(i8* %v2_8a2c, i32 %v3_8a1c)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_8a34 = call i32 @function_114d8(i32 39)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a3c = call i32 @function_12044(i8* %v1_8940)
  %v2_8a44 = add i32 %v2_8a3c, %stack_var_-20856.0.ph
  store i32 %v2_8a44, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  %v3_8a4c = inttoptr i32 %v2_8a44 to i8*
  %v4_8a4c = call i32 @function_1206c(i8* %v3_8a4c, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32))
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_8a54 = call i32 @function_11590(i32 40)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a5c = call i32 @function_12044(i8* %v1_8940)
  %v0_8a60 = load i32, i32* @r5, align 4
  store i32 %v0_8a60, i32* %r1.global-to-local, align 4
  store i32 %v2_8a5c, i32* @r4, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_8a6c = inttoptr i32 %v0_8a60 to i32*
  %v3_8a6c = call i32 @function_114ac(i32 40, i32* %v2_8a6c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a6c, i32* %r1.global-to-local, align 4
  %v1_8a78 = load i32, i32* @r4, align 4
  %v2_8a78 = add i32 %v1_8a78, %stack_var_-20856.0.ph
  store i32 %v2_8a78, i32* @r0, align 4
  %v2_8a7c = inttoptr i32 %v2_8a78 to i8*
  %v3_8a7c = call i32 @function_1206c(i8* %v2_8a7c, i32 %v3_8a6c)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_8a84 = call i32 @function_114d8(i32 40)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a8c = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8a98 = add i32 %v2_8a8c, %stack_var_-20856.0.ph
  store i32 %v2_8a98, i32* @r0, align 4
  %v3_8a9c = inttoptr i32 %v2_8a98 to i8*
  %v4_8a9c = call i32 @function_1206c(i8* %v3_8a9c, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32))
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8aa4 = call i32 @function_11590(i32 41)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8aac = call i32 @function_12044(i8* %v1_8940)
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 %v2_8aac, i32* @r4, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_8abc = inttoptr i32 %v0_8ab0 to i32*
  %v3_8abc = call i32 @function_114ac(i32 41, i32* %v2_8abc)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8abc, i32* %r1.global-to-local, align 4
  %v1_8ac8 = load i32, i32* @r4, align 4
  %v2_8ac8 = add i32 %v1_8ac8, %stack_var_-20856.0.ph
  store i32 %v2_8ac8, i32* @r0, align 4
  %v2_8acc = inttoptr i32 %v2_8ac8 to i8*
  %v3_8acc = call i32 @function_1206c(i8* %v2_8acc, i32 %v3_8abc)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8ad4 = call i32 @function_114d8(i32 41)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8adc = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8ae8 = add i32 %v2_8adc, %stack_var_-20856.0.ph
  store i32 %v2_8ae8, i32* @r0, align 4
  %v3_8aec = inttoptr i32 %v2_8ae8 to i8*
  %v4_8aec = call i32 @function_1206c(i8* %v3_8aec, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32))
  store i32 %v4_8aec, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v1_8af4 = load i32, i32* @r5, align 4
  %v2_8af4 = sub i32 %v6_8200, %v1_8af4
  %v3_8af4 = icmp uge i32 %v6_8200, %v1_8af4
  store i1 %v3_8af4, i1* %cpsr_c.global-to-local, align 1
  %v4_8af4 = xor i32 %v1_8af4, %v6_8200
  %v5_8af4 = xor i32 %v2_8af4, %v6_8200
  %v6_8af4 = and i32 %v5_8af4, %v4_8af4
  %v7_8af4 = icmp slt i32 %v6_8af4, 0
  store i1 %v7_8af4, i1* %cpsr_v.global-to-local, align 1
  %v8_8af4 = icmp slt i32 %v2_8af4, 0
  store i1 %v8_8af4, i1* %cpsr_n.global-to-local, align 1
  %v9_8af4 = icmp eq i32 %v6_8200, %v1_8af4
  store i1 %v9_8af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8af4, label %dec_label_pc_8bcc, label %dec_label_pc_8afc

dec_label_pc_8afc:                                ; preds = %dec_label_pc_890c
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8b00 = call i32 @function_11590(i32 42)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_12044(i8* %v1_8940)
  %v0_8b0c = load i32, i32* @r5, align 4
  store i32 %v0_8b0c, i32* %r1.global-to-local, align 4
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_8b18 = inttoptr i32 %v0_8b0c to i32*
  %v3_8b18 = call i32 @function_114ac(i32 42, i32* %v2_8b18)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8b18, i32* %r1.global-to-local, align 4
  %v1_8b24 = load i32, i32* @r4, align 4
  %v2_8b24 = add i32 %v1_8b24, %stack_var_-20856.0.ph
  store i32 %v2_8b24, i32* @r0, align 4
  %v2_8b28 = inttoptr i32 %v2_8b24 to i8*
  %v3_8b28 = call i32 @function_1206c(i8* %v2_8b28, i32 %v3_8b18)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8b30 = call i32 @function_114d8(i32 42)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b38 = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8b44 = add i32 %v2_8b38, %stack_var_-20856.0.ph
  store i32 %v2_8b44, i32* @r0, align 4
  %v3_8b48 = inttoptr i32 %v2_8b44 to i8*
  %v4_8b48 = call i32 @function_1206c(i8* %v3_8b48, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b50 = call i32 @function_12044(i8* %v1_8940)
  %v0_8b54 = load i32, i32* @r5, align 4
  store i32 %v0_8b54, i32* %r1.global-to-local, align 4
  store i32 %v2_8b50, i32* %r4.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v2_8b60 = inttoptr i32 %v0_8b54 to i32*
  %v3_8b60 = call i32 @function_114ac(i32 47, i32* %v2_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8b60, i32* %r1.global-to-local, align 4
  %v2_8b6c = add i32 %v2_8b50, %stack_var_-20856.0.ph
  store i32 %v2_8b6c, i32* @r0, align 4
  %v2_8b70 = inttoptr i32 %v2_8b6c to i8*
  %v3_8b70 = call i32 @function_1206c(i8* %v2_8b70, i32 %v3_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b78 = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_150cc.27 to i32), i32* %r1.global-to-local, align 4
  %v2_8b84 = add i32 %v2_8b78, %stack_var_-20856.0.ph
  store i32 %v2_8b84, i32* @r0, align 4
  %v2_8b88 = inttoptr i32 %v2_8b84 to i8*
  %v3_8b88 = call i32 @function_1206c(i8* %v2_8b88, i32 ptrtoint (i32* @global_var_150cc.27 to i32))
  store i32 %v6_8200, i32* %r0.global-to-local, align 4
  %v2_8b90 = call i32 @function_12044(i8* %v1_8b90)
  store i32 %v2_8b90, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b9c = call i32 @function_12044(i8* %v1_8940)
  %v2_8ba4 = add i32 %v2_8b9c, %stack_var_-20856.0.ph
  store i32 %v2_8ba4, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_8bac = load i32, i32* @r4, align 4
  store i32 %v0_8bac, i32* %r0.global-to-local, align 4
  %v3_8bb0 = trunc i32 %v0_8bac to i8
  %v4_8bb0 = call i32 @function_12538(i8 %v3_8bb0, i32 10, i32 %v2_8ba4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bb8 = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8bc4 = add i32 %v2_8bb8, %stack_var_-20856.0.ph
  store i32 %v2_8bc4, i32* @r0, align 4
  %v3_8bc8 = inttoptr i32 %v2_8bc4 to i8*
  %v4_8bc8 = call i32 @function_1206c(i8* %v3_8bc8, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32))
  store i32 %v4_8bc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bcc

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_890c, %dec_label_pc_8afc
  %v0_8bcc = load i32, i32* @r6, align 4
  %v1_8bcc = add i32 %v0_8bcc, 37
  %v2_8bcc = inttoptr i32 %v1_8bcc to i32*
  %v3_8bcc = load i32, i32* %v2_8bcc, align 4
  store i32 %v3_8bcc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bd0 = icmp slt i32 %v3_8bcc, 0
  store i1 %v1_8bd0, i1* %cpsr_n.global-to-local, align 1
  %v2_8bd0 = icmp eq i32 %v3_8bcc, 0
  store i1 %v2_8bd0, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_8bcc, 1
  br i1 %tmp208, label %dec_label_pc_8c78, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bcc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_150dc.35 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20856.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_1206c(i8* %v3_8bec, i32 ptrtoint ([9 x i8]* @global_var_150dc.35 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  %v0_8bf0 = load i32, i32* @r6, align 4
  %v1_8bf0 = add i32 %v0_8bf0, 37
  %v2_8bf0 = inttoptr i32 %v1_8bf0 to i32*
  %v3_8bf0 = load i32, i32* %v2_8bf0, align 4
  store i32 %v3_8bf0, i32* %r3.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bf8 = icmp slt i32 %v3_8bf0, 0
  store i1 %v1_8bf8, i1* %cpsr_n.global-to-local, align 1
  %v2_8bf8 = icmp eq i32 %v3_8bf0, 0
  store i1 %v2_8bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_8bfc = load i32, i32* @r5, align 4
  store i32 %v0_8bfc, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_8bf0, 1
  br i1 %tmp209, label %dec_label_pc_8c60, label %dec_label_pc_8c04

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8c04
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c08 = call i32 @function_12044(i8* %v1_8940)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_8c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_8c18 = and i32 %v3_8c10, 33554432
  %v2_8c18 = icmp ne i32 %v1_8c18, 0
  store i1 %v2_8c18, i1* %cpsr_c.global-to-local, align 1
  %v3_8c18 = mul i32 %v3_8c10, 128
  %v1_8c1c = add i32 %v3_8c18, 1472
  %v2_8c20 = add i32 %v2_8c08, %stack_var_-20856.0.ph
  store i32 %v2_8c20, i32* @r0, align 4
  %v0_8c24 = load i32, i32* @r7, align 4
  %v2_8c24 = add i32 %v1_8c1c, %v0_8c24
  store i32 %v2_8c24, i32* %r1.global-to-local, align 4
  %v2_8c28 = inttoptr i32 %v2_8c20 to i8*
  %v3_8c28 = call i32 @function_1206c(i8* %v2_8c28, i32 %v2_8c24)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c30 = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150e8.37 to i32), i32* %r1.global-to-local, align 4
  %v2_8c3c = add i32 %v2_8c30, %stack_var_-20856.0.ph
  store i32 %v2_8c3c, i32* @r0, align 4
  %v3_8c40 = inttoptr i32 %v2_8c3c to i8*
  %v4_8c40 = call i32 @function_1206c(i8* %v3_8c40, i32 ptrtoint ([3 x i8]* @global_var_150e8.37 to i32))
  store i32 %v4_8c40, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_8c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8c48, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* @r6, align 4
  %v1_8c4c = add i32 %v0_8c4c, 37
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v1_8c50 = add i32 %v3_8c48, 1
  store i32 %v1_8c50, i32* %ip.global-to-local, align 4
  %v2_8c54 = sub i32 %v3_8c4c, %v1_8c50
  %v3_8c54 = icmp uge i32 %v3_8c4c, %v1_8c50
  store i1 %v3_8c54, i1* %cpsr_c.global-to-local, align 1
  %v4_8c54 = xor i32 %v3_8c4c, %v1_8c50
  %v5_8c54 = xor i32 %v2_8c54, %v3_8c4c
  %v6_8c54 = and i32 %v5_8c54, %v4_8c54
  %v7_8c54 = icmp slt i32 %v6_8c54, 0
  store i1 %v7_8c54, i1* %cpsr_v.global-to-local, align 1
  %v8_8c54 = icmp slt i32 %v2_8c54, 0
  store i1 %v8_8c54, i1* %cpsr_n.global-to-local, align 1
  %v9_8c54 = icmp eq i32 %v3_8c4c, %v1_8c50
  store i1 %v9_8c54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8c50, i32* %stack_var_-40, align 4
  %v8_8c5c = icmp sgt i32 %v3_8c4c, %v1_8c50
  br i1 %v8_8c5c, label %dec_label_pc_8c04, label %dec_label_pc_8c60

dec_label_pc_8c60:                                ; preds = %dec_label_pc_8c04, %dec_label_pc_8bd8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c64 = call i32 @function_12044(i8* %v1_8940)
  %v2_8c6c = add i32 %v2_8c64, %stack_var_-20856.0.ph
  store i32 %v2_8c6c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  %v3_8c74 = inttoptr i32 %v2_8c6c to i8*
  %v4_8c74 = call i32 @function_1206c(i8* %v3_8c74, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32))
  store i32 %v4_8c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8bcc, %dec_label_pc_8c60
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c7c = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8c88 = add i32 %v2_8c7c, %stack_var_-20856.0.ph
  store i32 %v2_8c88, i32* @r0, align 4
  %v3_8c8c = inttoptr i32 %v2_8c88 to i8*
  %v4_8c8c = call i32 @function_1206c(i8* %v3_8c8c, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32))
  store i32 %v4_8c8c, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_8c94, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_8c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c94, label %dec_label_pc_8cb4, label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c78
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ca0 = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v2_8cac = add i32 %v2_8ca0, %stack_var_-20856.0.ph
  store i32 %v2_8cac, i32* @r0, align 4
  %v2_8cb0 = inttoptr i32 %v2_8cac to i8*
  %v3_8cb0 = call i32 @function_1206c(i8* %v2_8cb0, i32 %v6_8200)
  store i32 %v3_8cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8cb4

dec_label_pc_8cb4:                                ; preds = %dec_label_pc_8c78, %dec_label_pc_8c9c
  %v0_8cb4 = load i32, i32* @r7, align 4
  %v1_8cb4 = add i32 %v0_8cb4, 1440
  store i32 %v1_8cb4, i32* %r4.global-to-local, align 4
  %v0_8cb8 = load i32, i32* @r6, align 4
  store i32 %v0_8cb8, i32* %r0.global-to-local, align 4
  store i32 %v1_8cb4, i32* %r1.global-to-local, align 4
  %v2_8cc0 = inttoptr i32 %v0_8cb8 to i8*
  %v3_8cc0 = call i32 @function_12424(i8* %v2_8cc0, i32 %v1_8cb4)
  store i32 %v3_8cc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8cc4 = icmp slt i32 %v3_8cc0, 0
  store i1 %v1_8cc4, i1* %cpsr_n.global-to-local, align 1
  %v2_8cc4 = icmp eq i32 %v3_8cc0, 0
  store i1 %v2_8cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8cc4, label %dec_label_pc_960c, label %dec_label_pc_8ccc

dec_label_pc_8ccc:                                ; preds = %dec_label_pc_8cb4, %dec_label_pc_960c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8cd0 = load i32, i32* @r6, align 4
  %v1_8cd0 = add i32 %v0_8cd0, -1431
  %v2_8cd0 = inttoptr i32 %v1_8cd0 to i32*
  %v3_8cd0 = load i32, i32* %v2_8cd0, align 4
  store i32 %v3_8cd0, i32* @r4, align 4
  %v2_8cd4 = call i32 @function_12044(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8cd4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ce4 = load i32, i32* @r4, align 4
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  %v5_8ce8 = call i32 @function_1322c(i32 %v0_8ce4, i32* %v4_8ce8, i32 %v2_8cd4, i32 16384)
  store i32 %v5_8ce8, i32* %r0.global-to-local, align 4
  %v0_8cec = load i32, i32* @r6, align 4
  %v1_8cec = add i32 %v0_8cec, -1431
  %v2_8cec = inttoptr i32 %v1_8cec to i32*
  %v3_8cec = load i32, i32* %v2_8cec, align 4
  store i32 %v3_8cec, i32* %r0.global-to-local, align 4
  %v3_8cf4 = udiv i32 %v3_8cec, 32
  %v3_8cf8 = mul nuw nsw i32 %v3_8cf4, 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8d00 = add i32 %v3_8cf8, %v2_8748
  store i32 %v2_8d00, i32* %r3.global-to-local, align 4
  %v1_8d04 = add i32 %v2_8d00, -164
  %v2_8d04 = inttoptr i32 %v1_8d04 to i32*
  %v3_8d04 = load i32, i32* %v2_8d04, align 4
  %v1_8d08 = urem i32 %v3_8cec, 32
  %v1_8d0c = load i32, i32* %fp.global-to-local, align 4
  %v7_8d0c = shl i32 %v1_8d0c, %v1_8d08
  %v8_8d0c = or i32 %v7_8d0c, %v3_8d04
  store i32 %v8_8d0c, i32* %r2.global-to-local, align 4
  %v0_8d10 = load i32, i32* @sl, align 4
  %v2_8d10 = sub i32 %v0_8d10, %v3_8cec
  %v3_8d10 = icmp uge i32 %v0_8d10, %v3_8cec
  store i1 %v3_8d10, i1* %cpsr_c.global-to-local, align 1
  %v4_8d10 = xor i32 %v0_8d10, %v3_8cec
  %v5_8d10 = xor i32 %v2_8d10, %v0_8d10
  %v6_8d10 = and i32 %v5_8d10, %v4_8d10
  %v7_8d10 = icmp slt i32 %v6_8d10, 0
  store i1 %v7_8d10, i1* %cpsr_v.global-to-local, align 1
  %v8_8d10 = icmp slt i32 %v2_8d10, 0
  store i1 %v8_8d10, i1* %cpsr_n.global-to-local, align 1
  %v9_8d10 = icmp eq i32 %v0_8d10, %v3_8cec
  store i1 %v9_8d10, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_8d0c, i32* %v2_8d04, align 4
  %v0_8d1c = load i32, i32* %sb.global-to-local, align 4
  %v1_8d1c = load i32, i32* @r6, align 4
  %v2_8d1c = add i32 %v1_8d1c, -1419
  %v3_8d1c = inttoptr i32 %v2_8d1c to i32*
  store i32 %v0_8d1c, i32* %v3_8d1c, align 4
  %v0_8d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i8
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = add i32 %v2_8d20, -1427
  %v4_8d20 = inttoptr i32 %v3_8d20 to i8*
  store i8 %v1_8d20, i8* %v4_8d20, align 1
  %v0_8d24 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_8d24 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_8d24 = xor i1 %v0_8d24, %v1_8d24
  br i1 %v2_8d24, label %dec_label_pc_8d28, label %dec_label_pc_8630

dec_label_pc_8d28:                                ; preds = %dec_label_pc_8ccc
  %v0_8d28 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d30:                                ; preds = %dec_label_pc_8608
  %v1_8d30 = add i32 %v3_8900, -1431
  %v2_8d30 = inttoptr i32 %v1_8d30 to i32*
  %v3_8d30 = load i32, i32* %v2_8d30, align 4
  store i32 %v3_8d30, i32* %r0.global-to-local, align 4
  %v3_8d38 = udiv i32 %v3_8d30, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d3c = mul nuw nsw i32 %v3_8d38, 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8d44 = add i32 %v3_8d3c, %v2_8748
  store i32 %v2_8d44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %.thread24, %.thread35, %dec_label_pc_8d30
  %v1_8d54 = phi i32 [ %v4_85ec, %.thread35 ], [ %v4_85cc, %.thread24 ], [ %v3_8d30, %dec_label_pc_8d30 ]
  %v1_8d58 = phi i32 [ %v3_8600, %.thread35 ], [ %v3_85e0, %.thread24 ], [ %v2_8d44, %dec_label_pc_8d30 ]
  %v1_8d48 = add i32 %v1_8d58, -164
  %v2_8d48 = inttoptr i32 %v1_8d48 to i32*
  %v3_8d48 = load i32, i32* %v2_8d48, align 4
  %v1_8d4c = urem i32 %v1_8d54, 32
  store i32 %v1_8d4c, i32* %r1.global-to-local, align 4
  %v1_8d50 = load i32, i32* %fp.global-to-local, align 4
  %v7_8d50 = shl i32 %v1_8d50, %v1_8d4c
  %v8_8d50 = or i32 %v7_8d50, %v3_8d48
  store i32 %v8_8d50, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* @sl, align 4
  %v2_8d54 = sub i32 %v0_8d54, %v1_8d54
  %v3_8d54 = icmp uge i32 %v0_8d54, %v1_8d54
  store i1 %v3_8d54, i1* %cpsr_c.global-to-local, align 1
  %v4_8d54 = xor i32 %v0_8d54, %v1_8d54
  %v5_8d54 = xor i32 %v2_8d54, %v0_8d54
  %v6_8d54 = and i32 %v5_8d54, %v4_8d54
  %v7_8d54 = icmp slt i32 %v6_8d54, 0
  store i1 %v7_8d54, i1* %cpsr_v.global-to-local, align 1
  %v8_8d54 = icmp slt i32 %v2_8d54, 0
  store i1 %v8_8d54, i1* %cpsr_n.global-to-local, align 1
  %v9_8d54 = icmp eq i32 %v0_8d54, %v1_8d54
  store i1 %v9_8d54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d50, i32* %v2_8d48, align 4
  %v2_8d5c = xor i1 %v8_8d54, %v7_8d54
  br i1 %v2_8d5c, label %dec_label_pc_8d60, label %dec_label_pc_8630

dec_label_pc_8d60:                                ; preds = %dec_label_pc_8d48
  %v0_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d60 = add i32 %v0_8d60, 1
  store i32 %v1_8d60, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d68:                                ; preds = %dec_label_pc_85b8
  %v1_8d68 = add i32 %v3_8900, -1423
  %v2_8d68 = inttoptr i32 %v1_8d68 to i32*
  %v3_8d68 = load i32, i32* %v2_8d68, align 4
  %v1_8d6c = load i32, i32* %sb.global-to-local, align 4
  %v2_8d6c = sub i32 %v1_8d6c, %v3_8d68
  store i32 %v2_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = add i32 %v2_8d6c, -30
  %v2_8d70 = icmp ugt i32 %v2_8d6c, 29
  store i1 %v2_8d70, i1* %cpsr_c.global-to-local, align 1
  %v3_8d70 = sub i32 29, %v2_8d6c
  %v4_8d70 = and i32 %v3_8d70, %v2_8d6c
  %v5_8d70 = icmp slt i32 %v4_8d70, 0
  store i1 %v5_8d70, i1* %cpsr_v.global-to-local, align 1
  %v6_8d70 = icmp slt i32 %v1_8d70, 0
  store i1 %v6_8d70, i1* %cpsr_n.global-to-local, align 1
  %v7_8d70 = icmp eq i32 %v2_8d6c, 30
  store i1 %v7_8d70, i1* %cpsr_z.global-to-local, align 1
  %v2_8d74 = xor i1 %v7_8d70, true
  %v3_8d74 = and i1 %v2_8d70, %v2_8d74
  br i1 %v3_8d74, label %dec_label_pc_8618, label %dec_label_pc_8d78

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d68
  %v1_8d78 = add i32 %v3_8900, -1431
  %v2_8d78 = inttoptr i32 %v1_8d78 to i32*
  %v3_8d78 = load i32, i32* %v2_8d78, align 4
  store i32 %v3_8d78, i32* %r0.global-to-local, align 4
  %v3_8d80 = udiv i32 %v3_8d78, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d84 = mul nuw nsw i32 %v3_8d80, 4
  store i32 %v3_8d84, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_881c
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8dd8 = call i32 @function_120e4(i32 %v2_8280, i32 10240)
  store i32 %v2_8dd8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  %v1_8de4 = add i32 %v0_8de4, -1456
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_8df0 = call i32 @function_131cc(i32 %v3_8de4, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_8df0, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8df8 = icmp slt i32 %v5_8df0, 0
  store i1 %v1_8df8, i1* %cpsr_n.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v5_8df0, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v5_8df0, 1
  br i1 %tmp210, label %dec_label_pc_9a7c, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_150ec.39 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_8e14 = call i32 @function_12108(i32 %v2_8280, i32 %v5_8df0, i32 ptrtoint ([5 x i8]* @global_var_150ec.39 to i32), i32 4)
  store i32 %v5_8e14, i32* %r0.global-to-local, align 4
  %v1_8e18 = add i32 %v5_8e14, 1
  %v2_8e18 = icmp eq i32 %v5_8e14, -1
  store i1 %v2_8e18, i1* %cpsr_c.global-to-local, align 1
  %v3_8e18 = sub i32 0, %v5_8e14
  %v4_8e18 = and i32 %v1_8e18, %v3_8e18
  %v5_8e18 = icmp slt i32 %v4_8e18, 0
  store i1 %v5_8e18, i1* %cpsr_v.global-to-local, align 1
  %v6_8e18 = icmp slt i32 %v1_8e18, 0
  store i1 %v6_8e18, i1* %cpsr_n.global-to-local, align 1
  %v7_8e18 = icmp eq i32 %v1_8e18, 0
  store i1 %v7_8e18, i1* %cpsr_z.global-to-local, align 1
  %v0_9914 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_8e18, label %dec_label_pc_9914, label %dec_label_pc_8e20

dec_label_pc_8e20:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_9914
  store i32 ptrtoint ([5 x i8]* @global_var_150ec.39 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_9914, i32* %r1.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_8e30 = call i32 @function_12108(i32 %v2_8280, i32 %v0_9914, i32 ptrtoint ([5 x i8]* @global_var_150ec.39 to i32), i32 4)
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8e3c = add i32 %v5_8e30, %v2_8748
  store i32 %v2_8e3c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_8e44 = load i32, i32* @r6, align 4
  %v4_8e44 = add i32 %v3_8e44, %v2_8e3c
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 0, i8* %v5_8e44, align 1
  %v0_8e48 = load i32, i32* @r5, align 4
  store i32 %v0_8e48, i32* %r1.global-to-local, align 4
  store i32 53, i32* %r0.global-to-local, align 4
  %v2_8e50 = inttoptr i32 %v0_8e48 to i32*
  %v3_8e50 = call i32 @function_114ac(i32 53, i32* %v2_8e50)
  %v0_8e54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e54, i32* @r1, align 4
  store i32 %v3_8e50, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e60 = call i32 @function_12398(i8* %tmp199, i32 %v0_8e54, i32 %v3_8e50)
  store i32 %v4_8e60, i32* %r0.global-to-local, align 4
  %v1_8e64 = add i32 %v4_8e60, 1
  %v2_8e64 = icmp eq i32 %v4_8e60, -1
  store i1 %v2_8e64, i1* %cpsr_c.global-to-local, align 1
  %v3_8e64 = sub i32 0, %v4_8e60
  %v4_8e64 = and i32 %v1_8e64, %v3_8e64
  %v5_8e64 = icmp slt i32 %v4_8e64, 0
  store i1 %v5_8e64, i1* %cpsr_v.global-to-local, align 1
  %v6_8e64 = icmp slt i32 %v1_8e64, 0
  store i1 %v6_8e64, i1* %cpsr_n.global-to-local, align 1
  %v7_8e64 = icmp eq i32 %v1_8e64, 0
  store i1 %v7_8e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e64, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_8e20
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_8e6c = load i32, i32* @r8, align 4
  %v3_8e6c = add i32 %v2_8e6c, -4
  %v4_8e6c = inttoptr i32 %v3_8e6c to i32*
  store i32 2, i32* %v4_8e6c, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_8e20, %bb211
  %v0_8e70 = load i32, i32* @r5, align 4
  store i32 %v0_8e70, i32* %r1.global-to-local, align 4
  store i32 52, i32* %r0.global-to-local, align 4
  %v2_8e78 = inttoptr i32 %v0_8e70 to i32*
  %v3_8e78 = call i32 @function_114ac(i32 52, i32* %v2_8e78)
  %v0_8e7c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e7c, i32* @r1, align 4
  store i32 %v3_8e78, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_12398(i8* %tmp199, i32 %v0_8e7c, i32 %v3_8e78)
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v1_8e8c = add i32 %v4_8e88, 1
  %v2_8e8c = icmp eq i32 %v4_8e88, -1
  store i1 %v2_8e8c, i1* %cpsr_c.global-to-local, align 1
  %v3_8e8c = sub i32 0, %v4_8e88
  %v4_8e8c = and i32 %v1_8e8c, %v3_8e8c
  %v5_8e8c = icmp slt i32 %v4_8e8c, 0
  store i1 %v5_8e8c, i1* %cpsr_v.global-to-local, align 1
  %v6_8e8c = icmp slt i32 %v1_8e8c, 0
  store i1 %v6_8e8c, i1* %cpsr_n.global-to-local, align 1
  %v7_8e8c = icmp eq i32 %v1_8e8c, 0
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8e94 = load i32, i32* @r8, align 4
  %v3_8e94 = add i32 %v2_8e94, -4
  %v4_8e94 = inttoptr i32 %v3_8e94 to i32*
  store i32 1, i32* %v4_8e94, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 %v0_8e98, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_8ea0 = load i32, i32* @r8, align 4
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  store i32 %v0_8e98, i32* %v2_8ea0, align 4
  %v2_8ea4 = inttoptr i32 %v0_8e98 to i32*
  %v3_8ea4 = call i32 @function_114ac(i32 51, i32* %v2_8ea4)
  %v0_8ea8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  store i32 %v3_8ea4, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8eb4 = call i32 @function_12398(i8* %tmp199, i32 %v0_8ea8, i32 %v3_8ea4)
  store i32 %v4_8eb4, i32* %r0.global-to-local, align 4
  %v1_8eb8 = add i32 %v4_8eb4, 1
  %v2_8eb8 = icmp eq i32 %v4_8eb4, -1
  store i1 %v2_8eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_8eb8 = sub i32 0, %v4_8eb4
  %v4_8eb8 = and i32 %v1_8eb8, %v3_8eb8
  %v5_8eb8 = icmp slt i32 %v4_8eb8, 0
  store i1 %v5_8eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_8eb8 = icmp slt i32 %v1_8eb8, 0
  store i1 %v6_8eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_8eb8 = icmp eq i32 %v1_8eb8, 0
  store i1 %v7_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8eb8, label %.thread47, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %.thread46
  %v0_8ec0 = load i32, i32* @r5, align 4
  store i32 %v0_8ec0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v2_8ec8 = inttoptr i32 %v0_8ec0 to i32*
  %v3_8ec8 = call i32 @function_114ac(i32 51, i32* %v2_8ec8)
  %v0_8ecc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ecc, i32* @r1, align 4
  store i32 %v3_8ec8, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8ed8 = call i32 @function_12398(i8* %tmp199, i32 %v0_8ecc, i32 %v3_8ec8)
  store i32 %v4_8ed8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8ee4 = add i32 %v4_8ed8, %v2_8748
  store i32 %v2_8ee4, i32* %r3.global-to-local, align 4
  %v1_8ee8 = load i32, i32* @r6, align 4
  %v2_8ee8 = add i32 %v1_8ee8, %v2_8ee4
  %v3_8ee8 = inttoptr i32 %v2_8ee8 to i8*
  %v4_8ee8 = load i8, i8* %v3_8ee8, align 1
  %v2_8ef0 = icmp ugt i8 %v4_8ee8, 31
  store i1 %v2_8ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8ef0 = icmp ult i8 %v4_8ee8, 32
  store i1 %v6_8ef0, i1* %cpsr_n.global-to-local, align 1
  %v7_8ef0 = icmp eq i8 %v4_8ee8, 32
  store i1 %v7_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v2_8ef8 = zext i1 %v7_8ef0 to i32
  %v2_8ef8.v4_8ed8 = add i32 %v2_8ef8, %v4_8ed8
  store i32 %v2_8ef8.v4_8ed8, i32* @r4, align 4
  %v2_8efc = add i32 %v2_8ef8.v4_8ed8, %v2_8280
  store i32 %v2_8efc, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8efc, i32* %r0.global-to-local, align 4
  %v1_8f08 = load i32, i32* %fp.global-to-local, align 4
  %v2_8f08 = sub i32 %v1_8f08, %v2_8ef8.v4_8ed8
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8f10 = call i32 @function_12108(i32 %v2_8efc, i32 %v2_8f08, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32 2)
  store i32 %v5_8f10, i32* %r0.global-to-local, align 4
  %v1_8f14 = add i32 %v5_8f10, 1
  %v2_8f14 = icmp eq i32 %v5_8f10, -1
  store i1 %v2_8f14, i1* %cpsr_c.global-to-local, align 1
  %v3_8f14 = sub i32 0, %v5_8f10
  %v4_8f14 = and i32 %v1_8f14, %v3_8f14
  %v5_8f14 = icmp slt i32 %v4_8f14, 0
  store i1 %v5_8f14, i1* %cpsr_v.global-to-local, align 1
  %v6_8f14 = icmp slt i32 %v1_8f14, 0
  store i1 %v6_8f14, i1* %cpsr_n.global-to-local, align 1
  %v7_8f14 = icmp eq i32 %v1_8f14, 0
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8f10, i32* %r2.global-to-local, align 4
  br i1 %v7_8f14, label %.thread47, label %dec_label_pc_8f20

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ec0
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_8f28 = load i32, i32* @r4, align 4
  %v2_8f28 = add i32 %v1_8f28, %v2_8748
  %v1_8f2c = add i32 %v5_8f10, -1
  %v2_8f2c = icmp ne i32 %v5_8f10, 0
  store i1 %v2_8f2c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f2c = sub i32 0, %v5_8f10
  %v4_8f2c = and i32 %v5_8f10, %v3_8f2c
  %v5_8f2c = icmp slt i32 %v4_8f2c, 0
  store i1 %v5_8f2c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f2c = icmp slt i32 %v1_8f2c, 0
  store i1 %v6_8f2c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f2c = icmp eq i32 %v5_8f10, 1
  store i1 %v7_8f2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f30 = add i32 %v2_8f28, -20736
  store i32 %v1_8f30, i32* %r3.global-to-local, align 4
  %v7_8f34 = icmp sgt i32 %v5_8f10, 1
  br i1 %v7_8f34, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_8f20
  %v9_8f34 = add i32 %v5_8f10, -2
  store i32 %v9_8f34, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_8f20, %bb213
  %v3_8f3c = phi i32 [ %v5_8f10, %dec_label_pc_8f20 ], [ %v9_8f34, %bb213 ]
  %v1_8f38 = add i32 %v2_8f28, -20773
  store i32 %v1_8f38, i32* %r3.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r5, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v4_8f3c = add i32 %v3_8f3c, %v1_8f38
  %v5_8f3c = inttoptr i32 %v4_8f3c to i8*
  store i8 %v1_8f3c, i8* %v5_8f3c, align 1
  %v0_8f40 = load i32, i32* @r6, align 4
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  %v1_8f44 = inttoptr i32 %v0_8f40 to i8*
  %v2_8f44 = call i32 @function_12044(i8* %v1_8f44)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 %v2_8f44, i32* @r4, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v2_8f54 = inttoptr i32 %v0_8f48 to i32*
  %v3_8f54 = call i32 @function_114ac(i32 50, i32* %v2_8f54)
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* @r1, align 4
  store i32 %v3_8f54, i32* %r2.global-to-local, align 4
  %v0_8f60 = load i32, i32* @r6, align 4
  store i32 %v0_8f60, i32* %r0.global-to-local, align 4
  %v3_8f64 = inttoptr i32 %v0_8f60 to i8*
  %v4_8f64 = call i32 @function_12398(i8* %v3_8f64, i32 %v0_8f58, i32 %v3_8f54)
  store i32 %v4_8f64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8f68 = icmp slt i32 %v4_8f64, 0
  store i1 %v1_8f68, i1* %cpsr_n.global-to-local, align 1
  %v2_8f68 = icmp eq i32 %v4_8f64, 0
  store i1 %v2_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f68, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8f70 = load i32, i32* @r8, align 4
  %v3_8f70 = inttoptr i32 %v2_8f70 to i32*
  store i32 1, i32* %v3_8f70, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_8ec0, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_8f80 = load i32, i32* @r8, align 4
  %v2_8f80 = add i32 %v1_8f80, 4
  %v3_8f80 = inttoptr i32 %v2_8f80 to i32*
  store i32 0, i32* %v3_8f80, align 4
  %v3_8f84 = call i32 @function_114ac(i32 48, i32* null)
  %v0_8f88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8f88, i32* @r1, align 4
  store i32 %v3_8f84, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8f94 = call i32 @function_12398(i8* %tmp199, i32 %v0_8f88, i32 %v3_8f84)
  store i32 %v4_8f94, i32* %r0.global-to-local, align 4
  %v1_8f9c = add i32 %v4_8f94, 1
  %v2_8f9c = icmp eq i32 %v4_8f94, -1
  store i1 %v2_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f9c = sub i32 0, %v4_8f94
  %v4_8f9c = and i32 %v1_8f9c, %v3_8f9c
  %v5_8f9c = icmp slt i32 %v4_8f9c, 0
  store i1 %v5_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f9c = icmp slt i32 %v1_8f9c, 0
  store i1 %v6_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f9c = icmp eq i32 %v1_8f9c, 0
  store i1 %v7_8f9c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_8f9c, label %.thread48, label %dec_label_pc_8fa8

dec_label_pc_8fa8:                                ; preds = %.thread47
  %v0_8fa8 = load i32, i32* @r6, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v2_8fb0 = inttoptr i32 %v0_8fa8 to i32*
  %v3_8fb0 = call i32 @function_114ac(i32 48, i32* %v2_8fb0)
  %v0_8fb4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fb4, i32* @r1, align 4
  store i32 %v3_8fb0, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8fc0 = call i32 @function_12398(i8* %tmp199, i32 %v0_8fb4, i32 %v3_8fb0)
  store i32 %v4_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8fcc = add i32 %v4_8fc0, %v2_8748
  store i32 %v2_8fcc, i32* %r3.global-to-local, align 4
  %v1_8fd0 = load i32, i32* @r5, align 4
  %v2_8fd0 = add i32 %v1_8fd0, %v2_8fcc
  %v3_8fd0 = inttoptr i32 %v2_8fd0 to i8*
  %v4_8fd0 = load i8, i8* %v3_8fd0, align 1
  %v2_8fd8 = icmp ugt i8 %v4_8fd0, 31
  store i1 %v2_8fd8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8fd8 = icmp ult i8 %v4_8fd0, 32
  store i1 %v6_8fd8, i1* %cpsr_n.global-to-local, align 1
  %v7_8fd8 = icmp eq i8 %v4_8fd0, 32
  store i1 %v7_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_8fe0 = zext i1 %v7_8fd8 to i32
  %v2_8fe0.v4_8fc0 = add i32 %v2_8fe0, %v4_8fc0
  store i32 %v2_8fe0.v4_8fc0, i32* @r4, align 4
  %v2_8fe4 = add i32 %v2_8fe0.v4_8fc0, %v2_8280
  store i32 %v2_8fe4, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8fe4, i32* %r0.global-to-local, align 4
  %v1_8ff0 = load i32, i32* %fp.global-to-local, align 4
  %v2_8ff0 = sub i32 %v1_8ff0, %v2_8fe0.v4_8fc0
  store i32 %v2_8ff0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8ff8 = call i32 @function_12108(i32 %v2_8fe4, i32 %v2_8ff0, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32 2)
  store i32 %v5_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = add i32 %v5_8ff8, 1
  %v2_8ffc = icmp eq i32 %v5_8ff8, -1
  store i1 %v2_8ffc, i1* %cpsr_c.global-to-local, align 1
  %v3_8ffc = sub i32 0, %v5_8ff8
  %v4_8ffc = and i32 %v1_8ffc, %v3_8ffc
  %v5_8ffc = icmp slt i32 %v4_8ffc, 0
  store i1 %v5_8ffc, i1* %cpsr_v.global-to-local, align 1
  %v6_8ffc = icmp slt i32 %v1_8ffc, 0
  store i1 %v6_8ffc, i1* %cpsr_n.global-to-local, align 1
  %v7_8ffc = icmp eq i32 %v1_8ffc, 0
  store i1 %v7_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8ff8, i32* %r2.global-to-local, align 4
  br i1 %v7_8ffc, label %.thread48, label %dec_label_pc_9008

dec_label_pc_9008:                                ; preds = %dec_label_pc_8fa8
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9010 = load i32, i32* @r4, align 4
  %v2_9010 = add i32 %v1_9010, %v2_8748
  %v1_9014 = add i32 %v5_8ff8, -1
  %v2_9014 = icmp ne i32 %v5_8ff8, 0
  store i1 %v2_9014, i1* %cpsr_c.global-to-local, align 1
  %v3_9014 = sub i32 0, %v5_8ff8
  %v4_9014 = and i32 %v5_8ff8, %v3_9014
  %v5_9014 = icmp slt i32 %v4_9014, 0
  store i1 %v5_9014, i1* %cpsr_v.global-to-local, align 1
  %v6_9014 = icmp slt i32 %v1_9014, 0
  store i1 %v6_9014, i1* %cpsr_n.global-to-local, align 1
  %v7_9014 = icmp eq i32 %v5_8ff8, 1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  %v1_9018 = add i32 %v2_9010, -20736
  store i32 %v1_9018, i32* %r3.global-to-local, align 4
  %v7_901c = icmp sgt i32 %v5_8ff8, 1
  br i1 %v7_901c, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_9008
  %v9_901c = add i32 %v5_8ff8, -2
  store i32 %v9_901c, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_9008, %bb216
  %v3_9024 = phi i32 [ %v5_8ff8, %dec_label_pc_9008 ], [ %v9_901c, %bb216 ]
  %v1_9020 = add i32 %v2_9010, -20773
  store i32 %v1_9020, i32* %r3.global-to-local, align 4
  %v0_9024 = load i32, i32* @r6, align 4
  %v1_9024 = trunc i32 %v0_9024 to i8
  %v4_9024 = add i32 %v3_9024, %v1_9020
  %v5_9024 = inttoptr i32 %v4_9024 to i8*
  store i8 %v1_9024, i8* %v5_9024, align 1
  %v0_9028 = load i32, i32* @r5, align 4
  store i32 %v0_9028, i32* %r0.global-to-local, align 4
  %v1_902c = inttoptr i32 %v0_9028 to i8*
  %v2_902c = call i32 @function_12044(i8* %v1_902c)
  %v0_9030 = load i32, i32* @r6, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 %v2_902c, i32* @r4, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v2_903c = inttoptr i32 %v0_9030 to i32*
  %v3_903c = call i32 @function_114ac(i32 49, i32* %v2_903c)
  %v0_9040 = load i32, i32* @r4, align 4
  store i32 %v0_9040, i32* @r1, align 4
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v0_9048 = load i32, i32* @r5, align 4
  store i32 %v0_9048, i32* %r0.global-to-local, align 4
  %v3_904c = inttoptr i32 %v0_9048 to i8*
  %v4_904c = call i32 @function_12398(i8* %v3_904c, i32 %v0_9040, i32 %v3_903c)
  store i32 %v4_904c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9050 = icmp slt i32 %v4_904c, 0
  store i1 %v1_9050, i1* %cpsr_n.global-to-local, align 1
  %v2_9050 = icmp eq i32 %v4_904c, 0
  store i1 %v2_9050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9050, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9058 = load i32, i32* @r8, align 4
  %v3_9058 = add i32 %v2_9058, 4
  %v4_9058 = inttoptr i32 %v3_9058 to i32*
  store i32 1, i32* %v4_9058, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_8fa8, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9064 = call i32 @function_114ac(i32 47, i32* null)
  %v0_9068 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9068, i32* @r1, align 4
  store i32 %v3_9064, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9074 = call i32 @function_12398(i8* %tmp199, i32 %v0_9068, i32 %v3_9064)
  store i32 %v4_9074, i32* %r0.global-to-local, align 4
  %v1_9078 = add i32 %v4_9074, 1
  %v2_9078 = icmp eq i32 %v4_9074, -1
  store i1 %v2_9078, i1* %cpsr_c.global-to-local, align 1
  %v3_9078 = sub i32 0, %v4_9074
  %v4_9078 = and i32 %v1_9078, %v3_9078
  %v5_9078 = icmp slt i32 %v4_9078, 0
  store i1 %v5_9078, i1* %cpsr_v.global-to-local, align 1
  %v6_9078 = icmp slt i32 %v1_9078, 0
  store i1 %v6_9078, i1* %cpsr_n.global-to-local, align 1
  %v7_9078 = icmp eq i32 %v1_9078, 0
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9078, label %.thread, label %dec_label_pc_9090

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9088 = load i32, i32* @r8, align 4
  %v3_9088 = add i32 %v2_9088, 8
  %v4_9088 = inttoptr i32 %v3_9088 to i32*
  store i32 0, i32* %v4_9088, align 4
  br label %dec_label_pc_9124

dec_label_pc_9090:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9098 = call i32 @function_114ac(i32 47, i32* null)
  %v0_909c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_909c, i32* @r1, align 4
  store i32 %v3_9098, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_90a8 = call i32 @function_12398(i8* %tmp199, i32 %v0_909c, i32 %v3_9098)
  store i32 %v4_90a8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_90b4 = add i32 %v4_90a8, %v2_8748
  store i32 %v2_90b4, i32* %r3.global-to-local, align 4
  %v1_90b8 = load i32, i32* @r5, align 4
  %v2_90b8 = add i32 %v1_90b8, %v2_90b4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i8*
  %v4_90b8 = load i8, i8* %v3_90b8, align 1
  %v2_90c0 = icmp ugt i8 %v4_90b8, 31
  store i1 %v2_90c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_90c0 = icmp ult i8 %v4_90b8, 32
  store i1 %v6_90c0, i1* %cpsr_n.global-to-local, align 1
  %v7_90c0 = icmp eq i8 %v4_90b8, 32
  store i1 %v7_90c0, i1* %cpsr_z.global-to-local, align 1
  %v2_90c8 = zext i1 %v7_90c0 to i32
  %v2_90c8.v4_90a8 = add i32 %v2_90c8, %v4_90a8
  store i32 %v2_90c8.v4_90a8, i32* @r4, align 4
  %v2_90cc = add i32 %v2_90c8.v4_90a8, %v2_8280
  store i32 %v2_90cc, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_90cc, i32* %r0.global-to-local, align 4
  %v1_90d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_90d8 = sub i32 %v1_90d8, %v2_90c8.v4_90a8
  store i32 %v2_90d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_90e0 = call i32 @function_12108(i32 %v2_90cc, i32 %v2_90d8, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32 2)
  store i32 %v5_90e0, i32* %r0.global-to-local, align 4
  %v1_90e4 = add i32 %v5_90e0, 1
  %v2_90e4 = icmp eq i32 %v5_90e0, -1
  store i1 %v2_90e4, i1* %cpsr_c.global-to-local, align 1
  %v3_90e4 = sub i32 0, %v5_90e0
  %v4_90e4 = and i32 %v1_90e4, %v3_90e4
  %v5_90e4 = icmp slt i32 %v4_90e4, 0
  store i1 %v5_90e4, i1* %cpsr_v.global-to-local, align 1
  %v6_90e4 = icmp slt i32 %v1_90e4, 0
  store i1 %v6_90e4, i1* %cpsr_n.global-to-local, align 1
  %v7_90e4 = icmp eq i32 %v1_90e4, 0
  store i1 %v7_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_90e0, i32* %r2.global-to-local, align 4
  br i1 %v7_90e4, label %dec_label_pc_9124, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_9090
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_90f8 = load i32, i32* @r4, align 4
  %v2_90f8 = add i32 %v1_90f8, %v2_8748
  %v1_90fc = add i32 %v5_90e0, -1
  %v2_90fc = icmp ne i32 %v5_90e0, 0
  store i1 %v2_90fc, i1* %cpsr_c.global-to-local, align 1
  %v3_90fc = sub i32 0, %v5_90e0
  %v4_90fc = and i32 %v5_90e0, %v3_90fc
  %v5_90fc = icmp slt i32 %v4_90fc, 0
  store i1 %v5_90fc, i1* %cpsr_v.global-to-local, align 1
  %v6_90fc = icmp slt i32 %v1_90fc, 0
  store i1 %v6_90fc, i1* %cpsr_n.global-to-local, align 1
  %v7_90fc = icmp eq i32 %v5_90e0, 1
  store i1 %v7_90fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9100 = add i32 %v2_90f8, -20736
  store i32 %v1_9100, i32* %r3.global-to-local, align 4
  %v7_9104 = icmp sgt i32 %v5_90e0, 1
  br i1 %v7_9104, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_90f0
  %v9_9104 = add i32 %v5_90e0, -2
  store i32 %v9_9104, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_90f0, %bb219
  %v3_9118 = phi i32 [ %v5_90e0, %dec_label_pc_90f0 ], [ %v9_9104, %bb219 ]
  %v1_9108 = add i32 %v2_90f8, -20773
  store i32 %v1_9108, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_9110 = load i32, i32* @r5, align 4
  store i32 %v0_9110, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9118 = add i32 %v3_9118, %v1_9108
  %v5_9118 = inttoptr i32 %v4_9118 to i8*
  store i8 0, i8* %v5_9118, align 1
  %v2_911c = inttoptr i32 %v0_9110 to i8*
  %v3_911c = call i32 @function_12170(i8* %v2_911c, i32 10)
  store i32 %v3_911c, i32* %r0.global-to-local, align 4
  %v1_9120 = load i32, i32* @r8, align 4
  %v2_9120 = add i32 %v1_9120, 8
  %v3_9120 = inttoptr i32 %v2_9120 to i32*
  store i32 %v3_911c, i32* %v3_9120, align 4
  br label %dec_label_pc_9124

dec_label_pc_9124:                                ; preds = %.thread, %dec_label_pc_9090, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_92fc, %dec_label_pc_927c, %dec_label_pc_9124
  %v1_9134 = phi i32 [ 0, %dec_label_pc_9124 ], [ %v0_927c, %dec_label_pc_927c ], [ %v1_9134.pre.pre, %dec_label_pc_92fc ]
  store i32 %v2_8280, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_9134 = add i32 %v1_9134, %v2_8280
  store i32 %v2_9134, i32* @r4, align 4
  %v3_9138 = call i32 @function_114ac(i32 46, i32* null)
  %v0_913c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_913c, i32* @r1, align 4
  store i32 %v3_9138, i32* %r2.global-to-local, align 4
  %v0_9144 = load i32, i32* @r4, align 4
  store i32 %v0_9144, i32* %r0.global-to-local, align 4
  %v3_9148 = inttoptr i32 %v0_9144 to i8*
  %v4_9148 = call i32 @function_12398(i8* %v3_9148, i32 %v0_913c, i32 %v3_9138)
  store i32 %v4_9148, i32* %r0.global-to-local, align 4
  %v1_9150 = add i32 %v4_9148, 1
  %v2_9150 = icmp eq i32 %v4_9148, -1
  store i1 %v2_9150, i1* %cpsr_c.global-to-local, align 1
  %v3_9150 = sub i32 0, %v4_9148
  %v4_9150 = and i32 %v1_9150, %v3_9150
  %v5_9150 = icmp slt i32 %v4_9150, 0
  store i1 %v5_9150, i1* %cpsr_v.global-to-local, align 1
  %v6_9150 = icmp slt i32 %v1_9150, 0
  store i1 %v6_9150, i1* %cpsr_n.global-to-local, align 1
  %v7_9150 = icmp eq i32 %v1_9150, 0
  store i1 %v7_9150, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9150, label %dec_label_pc_9328, label %dec_label_pc_915c

dec_label_pc_915c:                                ; preds = %dec_label_pc_9128
  %v0_915c = load i32, i32* @r8, align 4
  %v1_915c = add i32 %v0_915c, 12
  %v2_915c = inttoptr i32 %v1_915c to i32*
  %v3_915c = load i32, i32* %v2_915c, align 4
  store i32 %v3_915c, i32* %r3.global-to-local, align 4
  %v1_9160 = add i32 %v3_915c, -4
  %v2_9160 = icmp ugt i32 %v3_915c, 3
  store i1 %v2_9160, i1* %cpsr_c.global-to-local, align 1
  %v3_9160 = sub i32 3, %v3_915c
  %v4_9160 = and i32 %v3_9160, %v3_915c
  %v5_9160 = icmp slt i32 %v4_9160, 0
  store i1 %v5_9160, i1* %cpsr_v.global-to-local, align 1
  %v6_9160 = icmp slt i32 %v1_9160, 0
  store i1 %v6_9160, i1* %cpsr_n.global-to-local, align 1
  %v7_9160 = icmp eq i32 %v3_915c, 4
  store i1 %v7_9160, i1* %cpsr_z.global-to-local, align 1
  %v8_9164 = icmp sgt i32 %v3_915c, 4
  br i1 %v8_9164, label %dec_label_pc_9328, label %dec_label_pc_9168

dec_label_pc_9168:                                ; preds = %dec_label_pc_915c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v3_9170 = call i32 @function_114ac(i32 46, i32* null)
  %v0_9174 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9174, i32* @r1, align 4
  store i32 %v3_9170, i32* %r2.global-to-local, align 4
  %v0_917c = load i32, i32* @r4, align 4
  store i32 %v0_917c, i32* %r0.global-to-local, align 4
  %v3_9180 = inttoptr i32 %v0_917c to i8*
  %v4_9180 = call i32 @function_12398(i8* %v3_9180, i32 %v0_9174, i32 %v3_9170)
  store i32 %v4_9180, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* @r5, align 4
  %v2_9188 = add i32 %v0_9188, %v4_9180
  store i32 %v2_9188, i32* @sl, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v2_9190 = add i32 %v2_9188, %v2_8748
  store i32 %v2_9190, i32* %r3.global-to-local, align 4
  %v1_9194 = load i32, i32* @r6, align 4
  %v2_9194 = add i32 %v1_9194, %v2_9190
  %v3_9194 = inttoptr i32 %v2_9194 to i8*
  %v4_9194 = load i8, i8* %v3_9194, align 1
  %v6_9194 = zext i8 %v4_9194 to i32
  store i32 %v6_9194, i32* %r2.global-to-local, align 4
  %v2_9198 = icmp ugt i8 %v4_9194, 31
  store i1 %v2_9198, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9198 = icmp ult i8 %v4_9194, 32
  store i1 %v6_9198, i1* %cpsr_n.global-to-local, align 1
  %v7_9198 = icmp eq i8 %v4_9194, 32
  store i1 %v7_9198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9198, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_9168
  %v2_919c = add i32 %v4_9180, 1
  store i32 %v2_919c, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_9168, %bb221
  %v2_91ac = phi i32 [ %v4_9180, %dec_label_pc_9168 ], [ %v2_919c, %bb221 ]
  %v1_91a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_91a0 = sub i32 %v1_91a0, %v0_9188
  store i32 %v2_91a0, i32* %r3.global-to-local, align 4
  %v2_91a4 = sub i32 %v2_91a0, %v2_91ac
  store i32 %v2_91a4, i32* @r7, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  %v2_91a8 = add i32 %v0_91a8, %v2_91ac
  store i32 %v2_91a8, i32* @r6, align 4
  br i1 %v7_9198, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_91ac = add i32 %v2_91ac, %v0_9188
  store i32 %v3_91ac, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_91a4, i32* %r1.global-to-local, align 4
  store i32 %v2_91a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91c0 = call i32 @function_12108(i32 %v2_91a8, i32 %v2_91a4, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32 2)
  store i32 %v5_91c0, i32* %r0.global-to-local, align 4
  %v1_91c4 = add i32 %v5_91c0, 1
  %v2_91c4 = icmp eq i32 %v5_91c0, -1
  store i1 %v2_91c4, i1* %cpsr_c.global-to-local, align 1
  %v3_91c4 = sub i32 0, %v5_91c0
  %v4_91c4 = and i32 %v1_91c4, %v3_91c4
  %v5_91c4 = icmp slt i32 %v4_91c4, 0
  store i1 %v5_91c4, i1* %cpsr_v.global-to-local, align 1
  %v6_91c4 = icmp slt i32 %v1_91c4, 0
  store i1 %v6_91c4, i1* %cpsr_n.global-to-local, align 1
  %v7_91c4 = icmp eq i32 %v1_91c4, 0
  store i1 %v7_91c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_91c0, i32* @r4, align 4
  br i1 %v7_91c4, label %dec_label_pc_927c, label %dec_label_pc_91d0

dec_label_pc_91d0:                                ; preds = %bb224
  store i32 %v2_8280, i32* %r2.global-to-local, align 4
  %v1_91d4 = add i32 %v5_91c0, -1
  %v2_91d4 = icmp ne i32 %v5_91c0, 0
  store i1 %v2_91d4, i1* %cpsr_c.global-to-local, align 1
  %v3_91d4 = sub i32 0, %v5_91c0
  %v4_91d4 = and i32 %v5_91c0, %v3_91d4
  %v5_91d4 = icmp slt i32 %v4_91d4, 0
  store i1 %v5_91d4, i1* %cpsr_v.global-to-local, align 1
  %v6_91d4 = icmp slt i32 %v1_91d4, 0
  store i1 %v6_91d4, i1* %cpsr_n.global-to-local, align 1
  %v7_91d4 = icmp eq i32 %v5_91c0, 1
  store i1 %v7_91d4, i1* %cpsr_z.global-to-local, align 1
  %v7_91d8 = icmp slt i32 %v5_91c0, 2
  br i1 %v7_91d8, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_91d0
  %v9_91d8 = add i32 %v5_91c0, -2
  store i32 %v9_91d8, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_91d0, %bb225
  %v1_91dc = load i32, i32* @sl, align 4
  %v2_91dc = add i32 %v1_91dc, %v2_8280
  store i32 %v2_91dc, i32* @r5, align 4
  %v0_91e0 = load i32, i32* @r6, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v0_91e4 = load i32, i32* @r7, align 4
  store i32 %v0_91e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150f4.41 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_91f0 = call i32 @function_12108(i32 %v0_91e0, i32 %v0_91e4, i32 ptrtoint (i32* @global_var_150f4.41 to i32), i32 1)
  store i32 %v4_91f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_91f4 = icmp slt i32 %v4_91f0, 0
  store i1 %v1_91f4, i1* %cpsr_n.global-to-local, align 1
  %v2_91f4 = icmp eq i32 %v4_91f0, 0
  store i1 %v2_91f4, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_91f0, 1
  br i1 %tmp227, label %.dec_label_pc_9214_crit_edge, label %dec_label_pc_91fc

.dec_label_pc_9214_crit_edge:                     ; preds = %bb226
  %v1_921c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9214

dec_label_pc_91fc:                                ; preds = %bb226
  %v0_91fc = load i32, i32* @r6, align 4
  store i32 %v0_91fc, i32* %r0.global-to-local, align 4
  %v0_9200 = load i32, i32* @r7, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150f4.41 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_920c = call i32 @function_12108(i32 %v0_91fc, i32 %v0_9200, i32 ptrtoint (i32* @global_var_150f4.41 to i32), i32 1)
  store i32 %v4_920c, i32* %r0.global-to-local, align 4
  %v1_9210 = add i32 %v4_920c, -1
  store i32 %v1_9210, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %.dec_label_pc_9214_crit_edge, %dec_label_pc_91fc
  %v1_921c = phi i32 [ %v1_921c.pre, %.dec_label_pc_9214_crit_edge ], [ %v1_9210, %dec_label_pc_91fc ]
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9224 = add i32 %v2_921c, %v1_921c
  store i32 %v1_9224, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9234 = load i32, i32* @sl, align 4
  %v4_9234 = add i32 %v3_9234, %v1_9224
  %v5_9234 = inttoptr i32 %v4_9234 to i8*
  store i8 0, i8* %v5_9234, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9254.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9254

dec_label_pc_9240:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_924c

dec_label_pc_924c:                                ; preds = %dec_label_pc_9240
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9214, %dec_label_pc_924c
  %v0_9254 = phi i32 [ %v0_9240, %dec_label_pc_924c ], [ %v0_9254.pre, %dec_label_pc_9214 ]
  %storemerge4 = phi i32 [ %v1_9268, %dec_label_pc_924c ], [ %storemerge4.pre, %dec_label_pc_9214 ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v1_9258 = inttoptr i32 %v0_9254 to i8*
  %v2_9258 = call i32 @function_12044(i8* %v1_9258)
  store i32 %v2_9258, i32* %r0.global-to-local, align 4
  %v3_9260 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9260, i32* %r4.global-to-local, align 4
  %v2_9264 = sub i32 %v2_9258, %v3_9260
  %v3_9264 = icmp uge i32 %v2_9258, %v3_9260
  store i1 %v3_9264, i1* %cpsr_c.global-to-local, align 1
  %v4_9264 = xor i32 %v3_9260, %v2_9258
  %v5_9264 = xor i32 %v2_9264, %v2_9258
  %v6_9264 = and i32 %v5_9264, %v4_9264
  %v7_9264 = icmp slt i32 %v6_9264, 0
  store i1 %v7_9264, i1* %cpsr_v.global-to-local, align 1
  %v8_9264 = icmp slt i32 %v2_9264, 0
  store i1 %v8_9264, i1* %cpsr_n.global-to-local, align 1
  %v9_9264 = icmp eq i32 %v2_9258, %v3_9260
  store i1 %v9_9264, i1* %cpsr_z.global-to-local, align 1
  %v1_9268 = add i32 %v3_9260, 1
  store i32 %v1_9268, i32* %ip.global-to-local, align 4
  %v8_926c = icmp sgt i32 %v2_9258, %v3_9260
  %v0_9240 = load i32, i32* @r5, align 4
  %v2_9240 = add i32 %v0_9240, %v3_9260
  %v3_9240 = inttoptr i32 %v2_9240 to i8*
  %v4_9240 = load i8, i8* %v3_9240, align 1
  %v6_9240 = zext i8 %v4_9240 to i32
  store i32 %v6_9240, i32* %r3.global-to-local, align 4
  %v2_9244 = icmp ugt i8 %v4_9240, 60
  store i1 %v2_9244, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9244 = icmp ult i8 %v4_9240, 61
  store i1 %v6_9244, i1* %cpsr_n.global-to-local, align 1
  %v7_9244 = icmp eq i8 %v4_9240, 61
  store i1 %v7_9244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_926c, label %dec_label_pc_9240, label %dec_label_pc_9270

dec_label_pc_9270:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_927c

dec_label_pc_927c:                                ; preds = %dec_label_pc_92c8, %dec_label_pc_92ec, %dec_label_pc_9270, %bb224
  %v0_927c = load i32, i32* @sl, align 4
  store i32 %v0_927c, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9284:                                ; preds = %dec_label_pc_9240, %dec_label_pc_9270
  %v0_9284 = load i32, i32* @r8, align 4
  %v1_9284 = add i32 %v0_9284, 12
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  store i32 %v3_9284, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9290 = icmp slt i32 %v3_9284, 0
  store i1 %v1_9290, i1* %cpsr_n.global-to-local, align 1
  %v2_9290 = icmp eq i32 %v3_9284, 0
  store i1 %v2_9290, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_9284, 1
  br i1 %tmp228, label %dec_label_pc_92ec, label %dec_label_pc_929c

dec_label_pc_929c:                                ; preds = %dec_label_pc_9284
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92a4:                                ; preds = %dec_label_pc_92c8
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_92a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_92a8, i32* %r3.global-to-local, align 4
  %v0_92ac = load i32, i32* @r8, align 4
  %v1_92ac = add i32 %v0_92ac, 12
  %v2_92ac = inttoptr i32 %v1_92ac to i32*
  %v3_92ac = load i32, i32* %v2_92ac, align 4
  %v1_92b0 = add i32 %v3_92a8, 1
  store i32 %v1_92b0, i32* %ip.global-to-local, align 4
  %v2_92b4 = sub i32 %v3_92ac, %v1_92b0
  %v3_92b4 = icmp uge i32 %v3_92ac, %v1_92b0
  store i1 %v3_92b4, i1* %cpsr_c.global-to-local, align 1
  %v4_92b4 = xor i32 %v3_92ac, %v1_92b0
  %v5_92b4 = xor i32 %v2_92b4, %v3_92ac
  %v6_92b4 = and i32 %v5_92b4, %v4_92b4
  %v7_92b4 = icmp slt i32 %v6_92b4, 0
  store i1 %v7_92b4, i1* %cpsr_v.global-to-local, align 1
  %v8_92b4 = icmp slt i32 %v2_92b4, 0
  store i1 %v8_92b4, i1* %cpsr_n.global-to-local, align 1
  %v9_92b4 = icmp eq i32 %v3_92ac, %v1_92b0
  store i1 %v9_92b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v1_92b0, i32* %r1.global-to-local, align 4
  store i32 %v1_92b0, i32* %stack_var_-40, align 4
  %v7_92c4 = icmp sgt i32 %v3_92ac, %v1_92b0
  %v0_92d4.pre = load i32, i32* @r5, align 4
  br i1 %v7_92c4, label %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, label %dec_label_pc_92ec

dec_label_pc_92a4.dec_label_pc_92c8_crit_edge:    ; preds = %dec_label_pc_92a4
  %v0_92d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, %dec_label_pc_929c
  %v0_92d8 = phi i32 [ %v0_92d8.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v3_9260, %dec_label_pc_929c ]
  %v0_92d4 = phi i32 [ %v0_92d4.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v0_9240, %dec_label_pc_929c ]
  %v0_92c8 = phi i32 [ %v1_92b0, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ 0, %dec_label_pc_929c ]
  %v1_92c8 = and i32 %v0_92c8, 33554432
  %v2_92c8 = icmp ne i32 %v1_92c8, 0
  store i1 %v2_92c8, i1* %cpsr_c.global-to-local, align 1
  %v3_92c8 = mul i32 %v0_92c8, 128
  %v1_92cc = add i32 %v3_92c8, 1472
  %v0_92d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_92d0 = add i32 %v1_92cc, %v0_92d0
  store i32 %v2_92d0, i32* %r1.global-to-local, align 4
  store i32 %v0_92d4, i32* %r0.global-to-local, align 4
  store i32 %v0_92d8, i32* %r2.global-to-local, align 4
  %v3_92dc = inttoptr i32 %v0_92d4 to i8*
  %v4_92dc = call i32 @function_124a8(i8* %v3_92dc, i32 %v2_92d0, i32 %v0_92d8)
  store i32 %v4_92dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_92e0 = icmp slt i32 %v4_92dc, 0
  store i1 %v1_92e0, i1* %cpsr_n.global-to-local, align 1
  %v2_92e0 = icmp eq i32 %v4_92dc, 0
  store i1 %v2_92e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_92e0, label %dec_label_pc_92a4, label %dec_label_pc_927c

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92a4, %dec_label_pc_9284
  %v0_92ec = phi i32 [ %v0_9240, %dec_label_pc_9284 ], [ %v0_92d4.pre, %dec_label_pc_92a4 ]
  store i32 %v0_92ec, i32* %r0.global-to-local, align 4
  %v1_92f0 = inttoptr i32 %v0_92ec to i8*
  %v2_92f0 = call i32 @function_12044(i8* %v1_92f0)
  store i32 %v2_92f0, i32* %r0.global-to-local, align 4
  %v1_92f4 = add i32 %v2_92f0, -127
  %v2_92f4 = icmp ugt i32 %v2_92f0, 126
  store i1 %v2_92f4, i1* %cpsr_c.global-to-local, align 1
  %v3_92f4 = sub i32 126, %v2_92f0
  %v4_92f4 = and i32 %v3_92f4, %v2_92f0
  %v5_92f4 = icmp slt i32 %v4_92f4, 0
  store i1 %v5_92f4, i1* %cpsr_v.global-to-local, align 1
  %v6_92f4 = icmp slt i32 %v1_92f4, 0
  store i1 %v6_92f4, i1* %cpsr_n.global-to-local, align 1
  %v7_92f4 = icmp eq i32 %v2_92f0, 127
  store i1 %v7_92f4, i1* %cpsr_z.global-to-local, align 1
  %v8_92f8 = icmp sgt i32 %v2_92f0, 127
  br i1 %v8_92f8, label %dec_label_pc_927c, label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_92ec
  %v0_92fc = load i32, i32* @r8, align 4
  %v1_92fc = add i32 %v0_92fc, 12
  %v2_92fc = inttoptr i32 %v1_92fc to i32*
  %v3_92fc = load i32, i32* %v2_92fc, align 4
  %v1_9300 = and i32 %v3_92fc, 33554432
  %v2_9300 = icmp ne i32 %v1_9300, 0
  store i1 %v2_9300, i1* %cpsr_c.global-to-local, align 1
  %v3_9300 = mul i32 %v3_92fc, 128
  %v1_9304 = add i32 %v3_9300, 1472
  %v0_9308 = load i32, i32* @r5, align 4
  store i32 %v0_9308, i32* %r1.global-to-local, align 4
  %v0_930c = load i32, i32* %sb.global-to-local, align 4
  %v2_930c = add i32 %v1_9304, %v0_930c
  store i32 %v2_930c, i32* @r0, align 4
  %v2_9310 = inttoptr i32 %v2_930c to i8*
  %v3_9310 = call i32 @function_1206c(i8* %v2_9310, i32 %v0_9308)
  store i32 %v3_9310, i32* %r0.global-to-local, align 4
  %v0_9314 = load i32, i32* @r8, align 4
  %v1_9314 = add i32 %v0_9314, 12
  %v2_9314 = inttoptr i32 %v1_9314 to i32*
  %v3_9314 = load i32, i32* %v2_9314, align 4
  %v0_9318 = load i32, i32* @sl, align 4
  store i32 %v0_9318, i32* @r5, align 4
  %v1_931c = add i32 %v3_9314, 1
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  store i32 %v1_931c, i32* %v2_9314, align 4
  %v1_9134.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9328:                                ; preds = %dec_label_pc_915c, %dec_label_pc_9128
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v3_9330 = call i32 @function_114ac(i32 45, i32* null)
  %v0_9334 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9334, i32* @r1, align 4
  store i32 %v3_9330, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9340 = call i32 @function_12398(i8* %tmp199, i32 %v0_9334, i32 %v3_9330)
  store i32 %v4_9340, i32* %r0.global-to-local, align 4
  %v1_9344 = add i32 %v4_9340, 1
  %v2_9344 = icmp eq i32 %v4_9340, -1
  store i1 %v2_9344, i1* %cpsr_c.global-to-local, align 1
  %v3_9344 = sub i32 0, %v4_9340
  %v4_9344 = and i32 %v1_9344, %v3_9344
  %v5_9344 = icmp slt i32 %v4_9344, 0
  store i1 %v5_9344, i1* %cpsr_v.global-to-local, align 1
  %v6_9344 = icmp slt i32 %v1_9344, 0
  store i1 %v6_9344, i1* %cpsr_n.global-to-local, align 1
  %v7_9344 = icmp eq i32 %v1_9344, 0
  store i1 %v7_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9344, label %dec_label_pc_9678, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v3_9354 = call i32 @function_114ac(i32 45, i32* null)
  %v0_9358 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9358, i32* @r1, align 4
  store i32 %v3_9354, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9364 = call i32 @function_12398(i8* %tmp199, i32 %v0_9358, i32 %v3_9354)
  store i32 %v4_9364, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_9370 = add i32 %v4_9364, %v2_8748
  store i32 %v2_9370, i32* %r3.global-to-local, align 4
  %v1_9374 = load i32, i32* @r6, align 4
  %v2_9374 = add i32 %v1_9374, %v2_9370
  %v3_9374 = inttoptr i32 %v2_9374 to i8*
  %v4_9374 = load i8, i8* %v3_9374, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9374, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_937c = icmp ult i8 %v4_9374, 32
  store i1 %v6_937c, i1* %cpsr_n.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9374, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  %v2_9384 = zext i1 %v7_937c to i32
  %v2_9384.v4_9364 = add i32 %v2_9384, %v4_9364
  store i32 %v2_9384.v4_9364, i32* @r4, align 4
  %v2_9388 = add i32 %v2_9384.v4_9364, %v2_8280
  store i32 %v2_9388, i32* @r5, align 4
  store i32 %v2_9388, i32* %r0.global-to-local, align 4
  %v1_9390 = load i32, i32* %fp.global-to-local, align 4
  %v2_9390 = sub i32 %v1_9390, %v2_9384.v4_9364
  store i32 %v2_9390, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_939c = call i32 @function_12108(i32 %v2_9388, i32 %v2_9390, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32 2)
  store i32 %v5_939c, i32* %r0.global-to-local, align 4
  %v1_93a0 = add i32 %v5_939c, 1
  %v2_93a0 = icmp eq i32 %v5_939c, -1
  store i1 %v2_93a0, i1* %cpsr_c.global-to-local, align 1
  %v3_93a0 = sub i32 0, %v5_939c
  %v4_93a0 = and i32 %v1_93a0, %v3_93a0
  %v5_93a0 = icmp slt i32 %v4_93a0, 0
  store i1 %v5_93a0, i1* %cpsr_v.global-to-local, align 1
  %v6_93a0 = icmp slt i32 %v1_93a0, 0
  store i1 %v6_93a0, i1* %cpsr_n.global-to-local, align 1
  %v7_93a0 = icmp eq i32 %v1_93a0, 0
  store i1 %v7_93a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_939c, i32* %lr.global-to-local, align 4
  br i1 %v7_93a0, label %dec_label_pc_9678, label %dec_label_pc_93ac

dec_label_pc_93ac:                                ; preds = %dec_label_pc_934c
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_93b4 = add i32 %v5_939c, -1
  %v2_93b4 = icmp ne i32 %v5_939c, 0
  store i1 %v2_93b4, i1* %cpsr_c.global-to-local, align 1
  %v3_93b4 = sub i32 0, %v5_939c
  %v4_93b4 = and i32 %v5_939c, %v3_93b4
  %v5_93b4 = icmp slt i32 %v4_93b4, 0
  store i1 %v5_93b4, i1* %cpsr_v.global-to-local, align 1
  %v6_93b4 = icmp slt i32 %v1_93b4, 0
  store i1 %v6_93b4, i1* %cpsr_n.global-to-local, align 1
  %v7_93b4 = icmp eq i32 %v5_939c, 1
  store i1 %v7_93b4, i1* %cpsr_z.global-to-local, align 1
  %v1_93b8 = load i32, i32* @r4, align 4
  %v2_93b8 = add i32 %v1_93b8, %v2_8748
  store i32 %v2_93b8, i32* %ip.global-to-local, align 4
  %v7_93bc = icmp sgt i32 %v5_939c, 1
  br i1 %v7_93bc, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_93ac
  %v9_93bc = add i32 %v5_939c, -2
  store i32 %v9_93bc, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_93ac, %bb229
  %v3_93e0 = phi i32 [ %v5_939c, %dec_label_pc_93ac ], [ %v9_93bc, %bb229 ]
  %v1_93c4 = add i32 %v3_93e0, 1
  store i32 %v1_93c4, i32* %r6.global-to-local, align 4
  %v1_93c8 = add i32 %v2_93b8, -20773
  store i32 %v1_93c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_93d0 = load i32, i32* @r5, align 4
  store i32 %v0_93d0, i32* %r0.global-to-local, align 4
  store i32 %v1_93c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_150f8.43 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_93e0 = add i32 %v3_93e0, %v1_93c8
  %v5_93e0 = inttoptr i32 %v4_93e0 to i8*
  store i8 0, i8* %v5_93e0, align 1
  %v5_93e4 = call i32 @function_12108(i32 %v0_93d0, i32 %v1_93c4, i32 ptrtoint ([5 x i8]* @global_var_150f8.43 to i32), i32 4)
  store i32 %v5_93e4, i32* %r0.global-to-local, align 4
  %v1_93e8 = add i32 %v5_93e4, -4
  %v2_93e8 = icmp ugt i32 %v5_93e4, 3
  store i1 %v2_93e8, i1* %cpsr_c.global-to-local, align 1
  %v3_93e8 = sub i32 3, %v5_93e4
  %v4_93e8 = and i32 %v3_93e8, %v5_93e4
  %v5_93e8 = icmp slt i32 %v4_93e8, 0
  store i1 %v5_93e8, i1* %cpsr_v.global-to-local, align 1
  %v6_93e8 = icmp slt i32 %v1_93e8, 0
  store i1 %v6_93e8, i1* %cpsr_n.global-to-local, align 1
  %v7_93e8 = icmp eq i32 %v5_93e4, 4
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93e8, label %dec_label_pc_9960, label %dec_label_pc_93f0

dec_label_pc_93f0:                                ; preds = %bb230
  store i32 %v2_8280, i32* %ip.global-to-local, align 4
  %v1_93f4 = load i32, i32* @r4, align 4
  %v2_93f4 = add i32 %v1_93f4, %v2_8280
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  %v4_93f4 = load i8, i8* %v3_93f4, align 1
  %v6_93f4 = zext i8 %v4_93f4 to i32
  store i32 %v6_93f4, i32* %r3.global-to-local, align 4
  %v2_93f8 = icmp ugt i8 %v4_93f4, 46
  store i1 %v2_93f8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_93f8 = icmp ult i8 %v4_93f4, 47
  store i1 %v6_93f8, i1* %cpsr_n.global-to-local, align 1
  %v7_93f8 = icmp eq i8 %v4_93f4, 47
  store i1 %v7_93f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93f8, label %dec_label_pc_9b54, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_94ac, %dec_label_pc_9a98, %dec_label_pc_9b84, %dec_label_pc_9b54, %dec_label_pc_93f0, %dec_label_pc_9a30, %dec_label_pc_9a14, %dec_label_pc_9ba0, %dec_label_pc_9a60
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9404 = load i32, i32* @r8, align 4
  %v3_9404 = add i32 %v2_9404, -1452
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 1, i8* %v4_9404, align 1
  br label %dec_label_pc_8838

dec_label_pc_940c:                                ; preds = %dec_label_pc_8828
  %v0_940c = call i32 @function_12f80()
  store i32 %v0_940c, i32* %r0.global-to-local, align 4
  %v0_9410 = load i32, i32* %sb.global-to-local, align 4
  %v1_9410 = add i32 %v0_9410, 1472
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v0_9418 = load i32, i32* @r8, align 4
  %v1_9418 = add i32 %v0_9418, 656
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  store i32 %v3_9418, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %v3_9418, -1024
  %v2_9420 = icmp ugt i32 %v3_9418, 1023
  store i1 %v2_9420, i1* %cpsr_c.global-to-local, align 1
  %v3_9420 = sub i32 1023, %v3_9418
  %v4_9420 = and i32 %v3_9420, %v3_9418
  %v5_9420 = icmp slt i32 %v4_9420, 0
  store i1 %v5_9420, i1* %cpsr_v.global-to-local, align 1
  %v6_9420 = icmp slt i32 %v1_9420, 0
  store i1 %v6_9420, i1* %cpsr_n.global-to-local, align 1
  %v7_9420 = icmp eq i32 %v3_9418, 1024
  store i1 %v7_9420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_940c, i32* %fp.global-to-local, align 4
  %v1_9428 = add i32 %v0_9410, 2116
  store i32 %v1_9428, i32* @r7, align 4
  br i1 %v7_9420, label %dec_label_pc_9528, label %dec_label_pc_9430

dec_label_pc_9430:                                ; preds = %dec_label_pc_940c, %dec_label_pc_9528, %dec_label_pc_951c
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_9434 = load i32, i32* %fp.global-to-local, align 4
  %v2_9434 = inttoptr i32 %v1_9434 to i32*
  store i32 0, i32* %v2_9434, align 4
  %v0_9438 = load i32, i32* @r8, align 4
  %v1_9438 = add i32 %v0_9438, 656
  %v2_9438 = inttoptr i32 %v1_9438 to i32*
  %v3_9438 = load i32, i32* %v2_9438, align 4
  store i32 %v3_9438, i32* %r1.global-to-local, align 4
  %v1_943c = add i32 %v0_9438, -1456
  %v2_943c = inttoptr i32 %v1_943c to i32*
  %v3_943c = load i32, i32* %v2_943c, align 4
  store i32 %v3_943c, i32* %r0.global-to-local, align 4
  %v1_9440 = sub i32 1024, %v3_9438
  store i32 %v1_9440, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9448 = load i32, i32* @r7, align 4
  %v2_9448 = add i32 %v0_9448, %v3_9438
  store i32 %v2_9448, i32* %r1.global-to-local, align 4
  %v4_944c = inttoptr i32 %v2_9448 to i32*
  %v5_944c = call i32 @function_131cc(i32 %v3_943c, i32* %v4_944c, i32 %v1_9440, i32 16384)
  store i32 %v5_944c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9450 = icmp slt i32 %v5_944c, 0
  store i1 %v1_9450, i1* %cpsr_n.global-to-local, align 1
  %v2_9450 = icmp eq i32 %v5_944c, 0
  store i1 %v2_9450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9450, label %dec_label_pc_992c, label %dec_label_pc_9458

dec_label_pc_9458:                                ; preds = %dec_label_pc_9430
  %v1_9458 = add i32 %v5_944c, 1
  %v2_9458 = icmp eq i32 %v5_944c, -1
  store i1 %v2_9458, i1* %cpsr_c.global-to-local, align 1
  %v3_9458 = sub i32 0, %v5_944c
  %v4_9458 = and i32 %v1_9458, %v3_9458
  %v5_9458 = icmp slt i32 %v4_9458, 0
  store i1 %v5_9458, i1* %cpsr_v.global-to-local, align 1
  %v6_9458 = icmp slt i32 %v1_9458, 0
  store i1 %v6_9458, i1* %cpsr_n.global-to-local, align 1
  %v7_9458 = icmp eq i32 %v1_9458, 0
  store i1 %v7_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9458, label %dec_label_pc_9950, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_9458
  %v0_9460 = load i32, i32* @r8, align 4
  %v1_9460 = add i32 %v0_9460, 656
  %v2_9460 = inttoptr i32 %v1_9460 to i32*
  %v3_9460 = load i32, i32* %v2_9460, align 4
  store i32 %v2_87d8, i32* %r1.global-to-local, align 4
  %v2_9468 = add i32 %v3_9460, %v5_944c
  store i32 %v2_9468, i32* @r4, align 4
  store i32 %v2_9468, i32* %v2_9460, align 4
  %v0_9470 = load i32, i32* %r1.global-to-local, align 4
  %v1_9470 = load i32, i32* @r8, align 4
  %v2_9470 = add i32 %v1_9470, -1448
  %v3_9470 = inttoptr i32 %v2_9470 to i32*
  store i32 %v0_9470, i32* %v3_9470, align 4
  br label %dec_label_pc_94fc

dec_label_pc_9478:                                ; preds = %dec_label_pc_94fc
  %v1_9478 = add i32 %v0_94fc, -4
  %v2_9478 = inttoptr i32 %v1_9478 to i32*
  %v3_9478 = load i32, i32* %v2_9478, align 4
  store i32 %v3_9478, i32* @sl, align 4
  %v1_947c = load i32, i32* @r4, align 4
  %v5_9480 = icmp slt i32 %v3_94fc, %v1_947c
  %storemerge73 = select i1 %v5_9480, i32 %v3_94fc, i32 %v1_947c
  store i32 %storemerge73, i32* @r5, align 4
  %v2_9488 = sub i32 %v3_94fc, %storemerge73
  store i32 %v2_9488, i32* @r6, align 4
  %v1_948c = add i32 %v3_9478, -1
  %v2_948c = icmp ne i32 %v3_9478, 0
  store i1 %v2_948c, i1* %cpsr_c.global-to-local, align 1
  %v3_948c = sub i32 0, %v3_9478
  %v4_948c = and i32 %v3_9478, %v3_948c
  %v5_948c = icmp slt i32 %v4_948c, 0
  store i1 %v5_948c, i1* %cpsr_v.global-to-local, align 1
  %v6_948c = icmp slt i32 %v1_948c, 0
  store i1 %v6_948c, i1* %cpsr_n.global-to-local, align 1
  %v7_948c = icmp eq i32 %v3_9478, 1
  store i1 %v7_948c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9488, i32* %v2_94fc, align 4
  br i1 %v7_948c, label %dec_label_pc_9548, label %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge

dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge: ; preds = %dec_label_pc_9478
  %v0_9498.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9498:                                ; preds = %dec_label_pc_9508, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge, %dec_label_pc_9570
  %v0_9498 = phi i32 [ %v3_9570, %dec_label_pc_9570 ], [ %v0_9498.pr.pre, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge ], [ %v3_94fc, %dec_label_pc_9508 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9498 = icmp slt i32 %v0_9498, 0
  store i1 %v1_9498, i1* %cpsr_n.global-to-local, align 1
  %v2_9498 = icmp eq i32 %v0_9498, 0
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %dec_label_pc_94a0, label %dec_label_pc_94c0

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9498
  %v0_94a0 = load i32, i32* @r8, align 4
  %v1_94a0 = add i32 %v0_94a0, 4
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  store i32 %v3_94a0, i32* @r4, align 4
  %v1_94a4 = add i32 %v3_94a0, -1
  %v2_94a4 = icmp ne i32 %v3_94a0, 0
  store i1 %v2_94a4, i1* %cpsr_c.global-to-local, align 1
  %v3_94a4 = sub i32 0, %v3_94a0
  %v4_94a4 = and i32 %v3_94a0, %v3_94a4
  %v5_94a4 = icmp slt i32 %v4_94a4, 0
  store i1 %v5_94a4, i1* %cpsr_v.global-to-local, align 1
  %v6_94a4 = icmp slt i32 %v1_94a4, 0
  store i1 %v6_94a4, i1* %cpsr_n.global-to-local, align 1
  %v7_94a4 = icmp eq i32 %v3_94a0, 1
  store i1 %v7_94a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94a4, label %dec_label_pc_9578, label %dec_label_pc_94ac

dec_label_pc_94ac:                                ; preds = %dec_label_pc_94a0
  %v1_94ac = add i32 %v0_94a0, 656
  %v2_94ac = inttoptr i32 %v1_94ac to i32*
  %v3_94ac = load i32, i32* %v2_94ac, align 4
  %v0_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = sub i32 %v3_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94b4 = icmp slt i32 %v2_94b0, 0
  store i1 %v1_94b4, i1* %cpsr_n.global-to-local, align 1
  %v2_94b4 = icmp eq i32 %v2_94b0, 0
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  %v2_94b8 = add i32 %v0_94a0, 8
  %v3_94b8 = inttoptr i32 %v2_94b8 to i32*
  store i32 %v2_94b0, i32* %v3_94b8, align 4
  br i1 %v2_94b4, label %dec_label_pc_9400, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_9498, %dec_label_pc_9578, %dec_label_pc_94ac, %dec_label_pc_9600
  %v0_94c0 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94c0 = icmp slt i32 %v0_94c0, 0
  store i1 %v1_94c0, i1* %cpsr_n.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v0_94c0, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9510, label %dec_label_pc_94c8

dec_label_pc_94c8:                                ; preds = %dec_label_pc_94c0
  %v0_94c8 = load i32, i32* @r8, align 4
  %v1_94c8 = add i32 %v0_94c8, 656
  %v2_94c8 = inttoptr i32 %v1_94c8 to i32*
  %v3_94c8 = load i32, i32* %v2_94c8, align 4
  store i32 %v3_94c8, i32* %r3.global-to-local, align 4
  %v2_94cc = sub i32 %v3_94c8, %v0_94c0
  store i32 %v2_94cc, i32* @r4, align 4
  store i32 %v2_94cc, i32* @r2, align 4
  store i32 %v2_94cc, i32* %v2_94c8, align 4
  %v0_94d8 = load i32, i32* @r7, align 4
  %v1_94d8 = load i32, i32* @r5, align 4
  %v2_94d8 = add i32 %v1_94d8, %v0_94d8
  store i32 %v2_94d8, i32* @r1, align 4
  store i32 %v0_94d8, i32* @r0, align 4
  %v3_94e0 = call i32 @function_12fd0(i32 %v0_94d8, i32 %v2_94d8, i32 %v2_94cc)
  store i32 %v3_94e0, i32* %r0.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r8, align 4
  %v1_94e4 = add i32 %v0_94e4, 656
  %v2_94e4 = inttoptr i32 %v1_94e4 to i32*
  %v3_94e4 = load i32, i32* %v2_94e4, align 4
  store i32 %v3_94e4, i32* @r4, align 4
  store i32 0, i32* @lr, align 4
  %v1_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94ec, %v3_94e4
  store i32 %v2_94ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94f0 = icmp slt i32 %v3_94e4, 0
  store i1 %v1_94f0, i1* %cpsr_n.global-to-local, align 1
  %v2_94f0 = icmp eq i32 %v3_94e4, 0
  store i1 %v2_94f0, i1* %cpsr_z.global-to-local, align 1
  %v3_94f4 = add i32 %v2_94ec, 2116
  %v4_94f4 = inttoptr i32 %v3_94f4 to i8*
  store i8 0, i8* %v4_94f4, align 1
  %v0_94f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94f8, label %dec_label_pc_9510, label %dec_label_pc_94fc

dec_label_pc_94fc:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_9460
  %v0_94fc = load i32, i32* @r8, align 4
  %v1_94fc = add i32 %v0_94fc, 8
  %v2_94fc = inttoptr i32 %v1_94fc to i32*
  %v3_94fc = load i32, i32* %v2_94fc, align 4
  store i32 %v3_94fc, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9500 = icmp slt i32 %v3_94fc, 0
  store i1 %v1_9500, i1* %cpsr_n.global-to-local, align 1
  %v2_9500 = icmp eq i32 %v3_94fc, 0
  store i1 %v2_9500, i1* %cpsr_z.global-to-local, align 1
  %v5_9504 = icmp sgt i32 %v3_94fc, 0
  br i1 %v5_9504, label %dec_label_pc_9478, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_94fc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9498

dec_label_pc_9510:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_94c0
  %v0_9510 = load i32, i32* @r8, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i8*
  %v3_9510 = load i8, i8* %v2_9510, align 1
  %v4_9510 = zext i8 %v3_9510 to i32
  store i32 %v4_9510, i32* %r3.global-to-local, align 4
  %v2_9514 = icmp ugt i8 %v3_9510, 6
  store i1 %v2_9514, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9514 = icmp ult i8 %v3_9510, 7
  store i1 %v6_9514, i1* %cpsr_n.global-to-local, align 1
  %v7_9514 = icmp eq i8 %v3_9510, 7
  store i1 %v7_9514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9514, label %dec_label_pc_951c, label %dec_label_pc_8838

dec_label_pc_951c:                                ; preds = %dec_label_pc_9510
  %v1_951c = add i32 %v0_9510, 656
  %v2_951c = inttoptr i32 %v1_951c to i32*
  %v3_951c = load i32, i32* %v2_951c, align 4
  store i32 %v3_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v3_951c, -1024
  %v2_9520 = icmp ugt i32 %v3_951c, 1023
  store i1 %v2_9520, i1* %cpsr_c.global-to-local, align 1
  %v3_9520 = sub i32 1023, %v3_951c
  %v4_9520 = and i32 %v3_9520, %v3_951c
  %v5_9520 = icmp slt i32 %v4_9520, 0
  store i1 %v5_9520, i1* %cpsr_v.global-to-local, align 1
  %v6_9520 = icmp slt i32 %v1_9520, 0
  store i1 %v6_9520, i1* %cpsr_n.global-to-local, align 1
  %v7_9520 = icmp eq i32 %v3_951c, 1024
  store i1 %v7_9520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9520, label %dec_label_pc_9528.loopexit, label %dec_label_pc_9430

dec_label_pc_9528.loopexit:                       ; preds = %dec_label_pc_951c
  %v0_9528.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9528

dec_label_pc_9528:                                ; preds = %dec_label_pc_9528.loopexit, %dec_label_pc_940c
  %v0_9528 = phi i32 [ %v0_9528.pre, %dec_label_pc_9528.loopexit ], [ %v1_9428, %dec_label_pc_940c ]
  store i32 %v0_9528, i32* @r0, align 4
  %v1_952c = add i32 %v0_9528, 64
  store i32 %v1_952c, i32* @r1, align 4
  store i32 960, i32* @r2, align 4
  %v3_9534 = call i32 @function_12fd0(i32 %v0_9528, i32 %v1_952c, i32 960)
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v0_9538 = load i32, i32* @r8, align 4
  %v1_9538 = add i32 %v0_9538, 656
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_953c = add i32 %v3_9538, -64
  store i32 %v1_953c, i32* @r4, align 4
  store i32 %v1_953c, i32* %v2_9538, align 4
  br label %dec_label_pc_9430

dec_label_pc_9548:                                ; preds = %dec_label_pc_9478
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_114ac(i32 43, i32* null)
  %v0_9554 = load i32, i32* @r4, align 4
  store i32 %v0_9554, i32* %r1.global-to-local, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9560 = load i32, i32* @r7, align 4
  store i32 %v0_9560, i32* %r0.global-to-local, align 4
  %v4_9564 = call i32 @function_12108(i32 %v0_9560, i32 %v0_9554, i32 %v3_9550, i32 11)
  store i32 %v4_9564, i32* %r0.global-to-local, align 4
  %v2_9568 = add i32 %v4_9564, 1
  %v3_9568 = icmp eq i32 %v4_9564, -1
  store i1 %v3_9568, i1* %cpsr_c.global-to-local, align 1
  %v4_9568 = sub i32 0, %v4_9564
  %v5_9568 = and i32 %v2_9568, %v4_9568
  %v6_9568 = icmp slt i32 %v5_9568, 0
  store i1 %v6_9568, i1* %cpsr_v.global-to-local, align 1
  %v7_9568 = icmp slt i32 %v2_9568, 0
  store i1 %v7_9568, i1* %cpsr_n.global-to-local, align 1
  %v8_9568 = icmp eq i32 %v2_9568, 0
  store i1 %v8_9568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9568, label %dec_label_pc_9570, label %dec_label_pc_9ad4

dec_label_pc_9570:                                ; preds = %dec_label_pc_9548
  %v0_9570 = load i32, i32* @r8, align 4
  %v1_9570 = add i32 %v0_9570, 8
  %v2_9570 = inttoptr i32 %v1_9570 to i32*
  %v3_9570 = load i32, i32* %v2_9570, align 4
  store i32 %v3_9570, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9578:                                ; preds = %dec_label_pc_94a0
  %v0_9578 = load i32, i32* @r7, align 4
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  %v1_957c = add i32 %v0_94a0, 656
  %v2_957c = inttoptr i32 %v1_957c to i32*
  %v3_957c = load i32, i32* %v2_957c, align 4
  store i32 %v3_957c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9588 = call i32 @function_12108(i32 %v0_9578, i32 %v3_957c, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32 2)
  store i32 %v5_9588, i32* %r0.global-to-local, align 4
  %v1_958c = add i32 %v5_9588, 1
  %v2_958c = icmp eq i32 %v5_9588, -1
  store i1 %v2_958c, i1* %cpsr_c.global-to-local, align 1
  %v3_958c = sub i32 0, %v5_9588
  %v4_958c = and i32 %v1_958c, %v3_958c
  %v5_958c = icmp slt i32 %v4_958c, 0
  store i1 %v5_958c, i1* %cpsr_v.global-to-local, align 1
  %v6_958c = icmp slt i32 %v1_958c, 0
  store i1 %v6_958c, i1* %cpsr_n.global-to-local, align 1
  %v7_958c = icmp eq i32 %v1_958c, 0
  store i1 %v7_958c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_958c, label %dec_label_pc_94c0, label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9578
  %v0_9594 = load i32, i32* @r8, align 4
  %v1_9594 = add i32 %v0_9594, 656
  %v2_9594 = inttoptr i32 %v1_9594 to i32*
  %v3_9594 = load i32, i32* %v2_9594, align 4
  store i32 %v3_9594, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_95a0 = load i32, i32* @r7, align 4
  store i32 %v0_95a0, i32* %r0.global-to-local, align 4
  %v5_95a4 = call i32 @function_12108(i32 %v0_95a0, i32 %v3_9594, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32 2)
  %v1_95a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, %v5_95a4
  store i32 %v2_95a8, i32* %ip.global-to-local, align 4
  store i32 %v5_95a4, i32* @r5, align 4
  store i32 %v5_95a4, i32* %r1.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r7, align 4
  store i32 %v0_95b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150f4.41 to i32), i32* %r2.global-to-local, align 4
  %v0_95bc = load i32, i32* @r4, align 4
  store i32 %v0_95bc, i32* %r3.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r6, align 4
  %v1_95c0 = trunc i32 %v0_95c0 to i8
  %v3_95c0 = add i32 %v2_95a8, 2114
  %v4_95c0 = inttoptr i32 %v3_95c0 to i8*
  store i8 %v1_95c0, i8* %v4_95c0, align 1
  %v4_95c4 = call i32 @function_12108(i32 %v0_95b4, i32 %v5_95a4, i32 ptrtoint (i32* @global_var_150f4.41 to i32), i32 %v0_95bc)
  store i32 %v4_95c4, i32* %r0.global-to-local, align 4
  %v1_95c8 = add i32 %v4_95c4, 1
  %v2_95c8 = icmp eq i32 %v4_95c4, -1
  store i1 %v2_95c8, i1* %cpsr_c.global-to-local, align 1
  %v3_95c8 = sub i32 0, %v4_95c4
  %v4_95c8 = and i32 %v1_95c8, %v3_95c8
  %v5_95c8 = icmp slt i32 %v4_95c8, 0
  store i1 %v5_95c8, i1* %cpsr_v.global-to-local, align 1
  %v6_95c8 = icmp slt i32 %v1_95c8, 0
  store i1 %v6_95c8, i1* %cpsr_n.global-to-local, align 1
  %v7_95c8 = icmp eq i32 %v1_95c8, 0
  store i1 %v7_95c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95c8, label %dec_label_pc_95ec, label %dec_label_pc_95d0

dec_label_pc_95d0:                                ; preds = %dec_label_pc_9594
  %v0_95d0 = load i32, i32* @r7, align 4
  store i32 %v0_95d0, i32* %r0.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r5, align 4
  store i32 %v0_95d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150f4.41 to i32), i32* %r2.global-to-local, align 4
  %v0_95dc = load i32, i32* @r4, align 4
  store i32 %v0_95dc, i32* %r3.global-to-local, align 4
  %v4_95e0 = call i32 @function_12108(i32 %v0_95d0, i32 %v0_95d4, i32 ptrtoint (i32* @global_var_150f4.41 to i32), i32 %v0_95dc)
  %v1_95e4 = load i32, i32* %sb.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, %v4_95e0
  store i32 %v2_95e4, i32* %r0.global-to-local, align 4
  %v0_95e8 = load i32, i32* @r6, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v3_95e8 = add i32 %v2_95e4, 2116
  %v4_95e8 = inttoptr i32 %v3_95e8 to i8*
  store i8 %v1_95e8, i8* %v4_95e8, align 1
  br label %dec_label_pc_95ec

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9594, %dec_label_pc_95d0
  %v0_95ec = load i32, i32* @r7, align 4
  store i32 %v0_95ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_95f4 = inttoptr i32 %v0_95ec to i8*
  %v3_95f4 = call i32 @function_12170(i8* %v2_95f4, i32 16)
  store i32 %v3_95f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_95f8 = icmp slt i32 %v3_95f4, 0
  store i1 %v1_95f8, i1* %cpsr_n.global-to-local, align 1
  %v2_95f8 = icmp eq i32 %v3_95f4, 0
  store i1 %v2_95f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f8, label %dec_label_pc_9d84, label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %dec_label_pc_95ec
  %v1_9600 = add i32 %v3_95f4, 2
  store i32 %v1_9600, i32* %r6.global-to-local, align 4
  %v1_9604 = load i32, i32* @r8, align 4
  %v2_9604 = add i32 %v1_9604, 8
  %v3_9604 = inttoptr i32 %v2_9604 to i32*
  store i32 %v1_9600, i32* %v3_9604, align 4
  br label %dec_label_pc_94c0

dec_label_pc_960c:                                ; preds = %dec_label_pc_8cb4
  %v0_960c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  store i32 %v0_9610, i32* @r0, align 4
  %v2_9614 = inttoptr i32 %v0_9610 to i8*
  %v3_9614 = call i32 @function_1206c(i8* %v2_9614, i32 %v0_960c)
  store i32 %v3_9614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ccc

dec_label_pc_961c:                                ; preds = %dec_label_pc_8830
  %v0_961c = call i32 @function_12f80()
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v0_961c, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_9648.dec_label_pc_9628_crit_edge, %dec_label_pc_961c
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ %v0_961c, %dec_label_pc_961c ]
  %v0_9628 = phi i32 [ %v0_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ 0, %dec_label_pc_961c ]
  %v2_9628 = inttoptr i32 %v1_9628 to i32*
  store i32 %v0_9628, i32* %v2_9628, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v0_9630 = load i32, i32* @r8, align 4
  %v1_9630 = add i32 %v0_9630, -1456
  %v2_9630 = inttoptr i32 %v1_9630 to i32*
  %v3_9630 = load i32, i32* %v2_9630, align 4
  store i32 %v3_9630, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_963c = call i32 @function_131cc(i32 %v3_9630, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_963c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9640 = icmp slt i32 %v5_963c, 0
  store i1 %v1_9640, i1* %cpsr_n.global-to-local, align 1
  %v2_9640 = icmp eq i32 %v5_963c, 0
  store i1 %v2_9640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9640, label %dec_label_pc_9920, label %dec_label_pc_9648

dec_label_pc_9648:                                ; preds = %dec_label_pc_9628
  %v2_9648 = add i32 %v5_963c, 1
  %v3_9648 = icmp eq i32 %v5_963c, -1
  store i1 %v3_9648, i1* %cpsr_c.global-to-local, align 1
  %v4_9648 = sub i32 0, %v5_963c
  %v5_9648 = and i32 %v2_9648, %v4_9648
  %v6_9648 = icmp slt i32 %v5_9648, 0
  store i1 %v6_9648, i1* %cpsr_v.global-to-local, align 1
  %v7_9648 = icmp slt i32 %v2_9648, 0
  store i1 %v7_9648, i1* %cpsr_n.global-to-local, align 1
  %v8_9648 = icmp eq i32 %v2_9648, 0
  store i1 %v8_9648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9648, label %dec_label_pc_9650, label %dec_label_pc_9648.dec_label_pc_9628_crit_edge

dec_label_pc_9648.dec_label_pc_9628_crit_edge:    ; preds = %dec_label_pc_9648
  %v0_9628.pre = load i32, i32* @r5, align 4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9650:                                ; preds = %dec_label_pc_9648
  %v0_9650 = load i32, i32* @r4, align 4
  %v1_9650 = inttoptr i32 %v0_9650 to i32*
  %v2_9650 = load i32, i32* %v1_9650, align 4
  store i32 %v2_9650, i32* %r3.global-to-local, align 4
  %v1_9654 = add i32 %v2_9650, -11
  %v2_9654 = icmp ugt i32 %v2_9650, 10
  store i1 %v2_9654, i1* %cpsr_c.global-to-local, align 1
  %v3_9654 = sub i32 10, %v2_9650
  %v4_9654 = and i32 %v3_9654, %v2_9650
  %v5_9654 = icmp slt i32 %v4_9654, 0
  store i1 %v5_9654, i1* %cpsr_v.global-to-local, align 1
  %v6_9654 = icmp slt i32 %v1_9654, 0
  store i1 %v6_9654, i1* %cpsr_n.global-to-local, align 1
  %v7_9654 = icmp eq i32 %v2_9650, 11
  store i1 %v7_9654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9654, label %dec_label_pc_9a98, label %dec_label_pc_965c

dec_label_pc_965c:                                ; preds = %dec_label_pc_9650, %dec_label_pc_9920
  %v0_965c = load i32, i32* @r8, align 4
  %v1_965c = add i32 %v0_965c, -1456
  %v2_965c = inttoptr i32 %v1_965c to i32*
  %v3_965c = load i32, i32* %v2_965c, align 4
  store i32 %v3_965c, i32* %r0.global-to-local, align 4
  %v1_9660 = call i32 @function_129d8(i32 %v3_965c)
  store i32 %v1_9660, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_966c = load i32, i32* @r8, align 4
  %v2_966c = add i32 %v1_966c, -1456
  %v3_966c = inttoptr i32 %v2_966c to i32*
  store i32 -1, i32* %v3_966c, align 4
  %v0_9670 = load i32, i32* %r1.global-to-local, align 4
  %v1_9670 = trunc i32 %v0_9670 to i8
  %v2_9670 = load i32, i32* @r8, align 4
  %v3_9670 = add i32 %v2_9670, -1452
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 %v1_9670, i8* %v4_9670, align 1
  br label %dec_label_pc_8838

dec_label_pc_9678:                                ; preds = %dec_label_pc_934c, %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v3_9680 = call i32 @function_114ac(i32 44, i32* null)
  %v0_9684 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9684, i32* @r1, align 4
  store i32 %v3_9680, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9690 = call i32 @function_12398(i8* %tmp199, i32 %v0_9684, i32 %v3_9680)
  store i32 %v4_9690, i32* %r0.global-to-local, align 4
  %v1_9698 = add i32 %v4_9690, 1
  %v2_9698 = icmp eq i32 %v4_9690, -1
  store i1 %v2_9698, i1* %cpsr_c.global-to-local, align 1
  %v3_9698 = sub i32 0, %v4_9690
  %v4_9698 = and i32 %v1_9698, %v3_9698
  %v5_9698 = icmp slt i32 %v4_9698, 0
  store i1 %v5_9698, i1* %cpsr_v.global-to-local, align 1
  %v6_9698 = icmp slt i32 %v1_9698, 0
  store i1 %v6_9698, i1* %cpsr_n.global-to-local, align 1
  %v7_9698 = icmp eq i32 %v1_9698, 0
  store i1 %v7_9698, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9698, label %dec_label_pc_98c0, label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %dec_label_pc_9678
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v3_96ac = call i32 @function_114ac(i32 44, i32* null)
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96b0, i32* @r1, align 4
  store i32 %v3_96ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_96bc = call i32 @function_12398(i8* %tmp199, i32 %v0_96b0, i32 %v3_96ac)
  store i32 %v4_96bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_96c8 = add i32 %v4_96bc, %v2_8748
  store i32 %v2_96c8, i32* %r3.global-to-local, align 4
  %v1_96cc = load i32, i32* @r5, align 4
  %v2_96cc = add i32 %v1_96cc, %v2_96c8
  %v3_96cc = inttoptr i32 %v2_96cc to i8*
  %v4_96cc = load i8, i8* %v3_96cc, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_96d4 = icmp ugt i8 %v4_96cc, 31
  store i1 %v2_96d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_96d4 = icmp ult i8 %v4_96cc, 32
  store i1 %v6_96d4, i1* %cpsr_n.global-to-local, align 1
  %v7_96d4 = icmp eq i8 %v4_96cc, 32
  store i1 %v7_96d4, i1* %cpsr_z.global-to-local, align 1
  %v2_96dc = zext i1 %v7_96d4 to i32
  %v2_96dc.v4_96bc = add i32 %v2_96dc, %v4_96bc
  store i32 %v2_96dc.v4_96bc, i32* @r4, align 4
  %v2_96e0 = add i32 %v2_96dc.v4_96bc, %v2_8280
  store i32 %v2_96e0, i32* @r6, align 4
  store i32 %v2_96e0, i32* %r0.global-to-local, align 4
  %v1_96e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_96e8 = sub i32 %v1_96e8, %v2_96dc.v4_96bc
  store i32 %v2_96e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_96f4 = call i32 @function_12108(i32 %v2_96e0, i32 %v2_96e8, i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32 2)
  store i32 %v5_96f4, i32* %r0.global-to-local, align 4
  %v1_96f8 = add i32 %v5_96f4, 1
  %v2_96f8 = icmp eq i32 %v5_96f4, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v3_96f8 = sub i32 0, %v5_96f4
  %v4_96f8 = and i32 %v1_96f8, %v3_96f8
  %v5_96f8 = icmp slt i32 %v4_96f8, 0
  store i1 %v5_96f8, i1* %cpsr_v.global-to-local, align 1
  %v6_96f8 = icmp slt i32 %v1_96f8, 0
  store i1 %v6_96f8, i1* %cpsr_n.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v1_96f8, 0
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_96f4, i32* @r7, align 4
  br i1 %v7_96f8, label %dec_label_pc_98c0, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96a4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_970c = load i32, i32* @r4, align 4
  %v2_970c = add i32 %v1_970c, %v2_8748
  %v1_9710 = add i32 %v5_96f4, -1
  %v2_9710 = icmp ne i32 %v5_96f4, 0
  store i1 %v2_9710, i1* %cpsr_c.global-to-local, align 1
  %v3_9710 = sub i32 0, %v5_96f4
  %v4_9710 = and i32 %v5_96f4, %v3_9710
  %v5_9710 = icmp slt i32 %v4_9710, 0
  store i1 %v5_9710, i1* %cpsr_v.global-to-local, align 1
  %v6_9710 = icmp slt i32 %v1_9710, 0
  store i1 %v6_9710, i1* %cpsr_n.global-to-local, align 1
  %v7_9710 = icmp eq i32 %v5_96f4, 1
  store i1 %v7_9710, i1* %cpsr_z.global-to-local, align 1
  %v1_9714 = add i32 %v2_970c, -20736
  store i32 %v1_9714, i32* %r3.global-to-local, align 4
  %v7_9718 = icmp sgt i32 %v5_96f4, 1
  br i1 %v7_9718, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_9704
  %v9_9718 = add i32 %v5_96f4, -2
  store i32 %v9_9718, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9704, %bb231
  %v3_9724 = phi i32 [ %v5_96f4, %dec_label_pc_9704 ], [ %v9_9718, %bb231 ]
  %v1_971c = add i32 %v2_970c, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_9724 = add i32 %v1_971c, %v3_9724
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 0, i8* %v5_9724, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* @lr, align 4
  %v1_9738 = load i32, i32* @r4, align 4
  %v2_9738 = add i32 %v1_9738, %v2_8280
  %v3_9738 = inttoptr i32 %v2_9738 to i8*
  %v4_9738 = load i8, i8* %v3_9738, align 1
  %v6_9738 = zext i8 %v4_9738 to i32
  store i32 %v6_9738, i32* %r0.global-to-local, align 4
  %v1_973c = add nsw i32 %v6_9738, -48
  store i32 %v1_973c, i32* %r3.global-to-local, align 4
  %v2_9740 = icmp ugt i32 %v1_973c, 8
  store i1 %v2_9740, i1* %cpsr_c.global-to-local, align 1
  %v3_9740 = sub nsw i32 56, %v6_9738
  %v4_9740 = and i32 %v3_9740, %v1_973c
  %v5_9740 = icmp slt i32 %v4_9740, 0
  store i1 %v5_9740, i1* %cpsr_v.global-to-local, align 1
  %v6_9740 = icmp ult i8 %v4_9738, 57
  store i1 %v6_9740, i1* %cpsr_n.global-to-local, align 1
  %v7_9740 = icmp eq i32 %v1_973c, 9
  store i1 %v7_9740, i1* %cpsr_z.global-to-local, align 1
  %v2_9744 = xor i1 %v7_9740, true
  %v3_9744 = and i1 %v2_9740, %v2_9744
  br i1 %v3_9744, label %.thread142, label %dec_label_pc_974c

.thread142:                                       ; preds = %bb232
  %v4_9744 = load i32, i32* @r6, align 4
  br label %dec_label_pc_9774

dec_label_pc_974c:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_975c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9750, %dec_label_pc_974c
  %v0_9750 = phi i32 [ %v1_9750, %dec_label_pc_9750 ], [ 0, %dec_label_pc_974c ]
  %v1_9750 = add i32 %v0_9750, 1
  store i32 %v1_9750, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 %v1_9750, i32* %stack_var_-40, align 4
  %v2_975c = add i32 %v1_9750, %v1_975c.pre
  %v3_975c = inttoptr i32 %v2_975c to i8*
  %v4_975c = load i8, i8* %v3_975c, align 1
  %v6_975c = zext i8 %v4_975c to i32
  store i32 %v6_975c, i32* %r0.global-to-local, align 4
  %v1_9760 = add nsw i32 %v6_975c, -48
  %v2_9764 = icmp ugt i32 %v1_9760, 8
  store i1 %v2_9764, i1* %cpsr_c.global-to-local, align 1
  %v3_9764 = sub nsw i32 56, %v6_975c
  %v4_9764 = and i32 %v3_9764, %v1_9760
  %v5_9764 = icmp slt i32 %v4_9764, 0
  store i1 %v5_9764, i1* %cpsr_v.global-to-local, align 1
  %v6_9764 = icmp ult i8 %v4_975c, 57
  store i1 %v6_9764, i1* %cpsr_n.global-to-local, align 1
  %v7_9764 = icmp eq i32 %v1_9760, 9
  store i1 %v7_9764, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v2_976c = xor i1 %v2_9764, true
  %v3_976c = or i1 %v7_9764, %v2_976c
  br i1 %v3_976c, label %dec_label_pc_9750, label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9750, %.thread142
  %v2_9780 = phi i32 [ %v4_9744, %.thread142 ], [ %v2_975c, %dec_label_pc_9750 ]
  %v0_9774 = phi i32 [ %v6_9738, %.thread142 ], [ %v6_975c, %dec_label_pc_9750 ]
  store i32 %v2_9780, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9774 = icmp eq i32 %v0_9774, 0
  store i1 %v2_9774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9774, label %dec_label_pc_98c0, label %dec_label_pc_977c

dec_label_pc_977c:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* @r5, align 4
  %v3_9780 = inttoptr i32 %v2_9780 to i8*
  store i8 0, i8* %v3_9780, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9788 = load i32, i32* %stack_var_-40, align 4
  %v1_978c = add i32 %v3_9788, 1
  store i32 %v1_978c, i32* %ip.global-to-local, align 4
  store i32 %v1_978c, i32* %stack_var_-40, align 4
  %v0_9794 = load i32, i32* @r6, align 4
  %v2_9794 = add i32 %v0_9794, %v1_978c
  %v3_9794 = inttoptr i32 %v2_9794 to i8*
  %v4_9794 = load i8, i8* %v3_9794, align 1
  %v6_9794 = zext i8 %v4_9794 to i32
  store i32 %v6_9794, i32* %r3.global-to-local, align 4
  %v2_9798 = icmp ugt i8 %v4_9794, 31
  store i1 %v2_9798, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9798 = icmp ult i8 %v4_9794, 32
  store i1 %v6_9798, i1* %cpsr_n.global-to-local, align 1
  %v7_9798 = icmp eq i8 %v4_9794, 32
  store i1 %v7_9798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9798, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_977c
  store i32 %v2_9794, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_977c
  %v2_979c = add i32 %v3_9788, 2
  store i32 %v2_979c, i32* %ip.global-to-local, align 4
  %v2_97a0 = add i32 %v0_9794, %v2_979c
  store i32 %v2_97a0, i32* @r4, align 4
  store i32 %v2_979c, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_97a8 = phi i32 [ %v2_9794, %.thread56 ], [ %v2_97a0, %bb233 ]
  store i32 %v0_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = inttoptr i32 %v0_97a8 to i8*
  %v2_97ac = call i32 @function_12044(i8* %v1_97ac)
  store i32 ptrtoint ([5 x i8]* @global_var_15100.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97ac, i32* @r1, align 4
  %v0_97b8 = load i32, i32* @r4, align 4
  store i32 %v0_97b8, i32* %r0.global-to-local, align 4
  %v4_97bc = inttoptr i32 %v0_97b8 to i8*
  %v5_97bc = call i32 @function_12398(i8* %v4_97bc, i32 %v2_97ac, i32 ptrtoint ([5 x i8]* @global_var_15100.45 to i32))
  store i32 %v5_97bc, i32* %r0.global-to-local, align 4
  %v1_97c0 = add i32 %v5_97bc, 1
  %v2_97c0 = icmp eq i32 %v5_97bc, -1
  store i1 %v2_97c0, i1* %cpsr_c.global-to-local, align 1
  %v3_97c0 = sub i32 0, %v5_97bc
  %v4_97c0 = and i32 %v1_97c0, %v3_97c0
  %v5_97c0 = icmp slt i32 %v4_97c0, 0
  store i1 %v5_97c0, i1* %cpsr_v.global-to-local, align 1
  %v6_97c0 = icmp slt i32 %v1_97c0, 0
  store i1 %v6_97c0, i1* %cpsr_n.global-to-local, align 1
  %v7_97c0 = icmp eq i32 %v1_97c0, 0
  store i1 %v7_97c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97c0, label %.thread60, label %dec_label_pc_97d0

.thread60:                                        ; preds = %bb234
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v4_97c8 = load i32, i32* %v11_82f4, align 4
  store i32 %v4_97c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9804

dec_label_pc_97d0:                                ; preds = %bb234
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_97d4 = load i32, i32* %stack_var_-40, align 4
  %v0_97d8 = load i32, i32* @r6, align 4
  %v2_97d8 = add i32 %v0_97d8, %v3_97d4
  store i32 %v2_97d8, i32* @r4, align 4
  store i32 %v2_97d8, i32* %r0.global-to-local, align 4
  %v1_97e0 = inttoptr i32 %v2_97d8 to i8*
  %v2_97e0 = call i32 @function_12044(i8* %v1_97e0)
  store i32 ptrtoint ([5 x i8]* @global_var_15100.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* @r1, align 4
  %v0_97ec = load i32, i32* @r4, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v4_97f0 = inttoptr i32 %v0_97ec to i8*
  %v5_97f0 = call i32 @function_12398(i8* %v4_97f0, i32 %v2_97e0, i32 ptrtoint ([5 x i8]* @global_var_15100.45 to i32))
  store i32 %v5_97f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_97f8 = load i32, i32* %stack_var_-40, align 4
  %v2_97fc = add i32 %v3_97f8, %v5_97f0
  store i32 %v2_97fc, i32* %ip.global-to-local, align 4
  store i32 %v2_97fc, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9804

dec_label_pc_9804:                                ; preds = %.thread60, %dec_label_pc_97d0
  %v0_9d8c = phi i32 [ %v4_97c8, %.thread60 ], [ %v2_97fc, %dec_label_pc_97d0 ]
  %v0_9804 = load i32, i32* @r6, align 4
  %v2_9804 = add i32 %v0_9804, %v0_9d8c
  %v3_9804 = inttoptr i32 %v2_9804 to i8*
  %v4_9804 = load i8, i8* %v3_9804, align 1
  %v6_9804 = zext i8 %v4_9804 to i32
  store i32 %v6_9804, i32* %r3.global-to-local, align 4
  %v2_9808 = icmp ugt i8 %v4_9804, 33
  store i1 %v2_9808, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9808 = icmp ult i8 %v4_9804, 34
  store i1 %v6_9808, i1* %cpsr_n.global-to-local, align 1
  %v7_9808 = icmp eq i8 %v4_9804, 34
  store i1 %v7_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9808, label %dec_label_pc_9d8c, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_9d8c, %dec_label_pc_9804, %dec_label_pc_9db4
  %v0_9810 = load i32, i32* @r6, align 4
  store i32 %v0_9810, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9818 = inttoptr i32 %v0_9810 to i8*
  %v3_9818 = call i32 @function_12170(i8* %v2_9818, i32 10)
  store i32 %v3_9818, i32* %r0.global-to-local, align 4
  %v1_981c = add i32 %v3_9818, -1
  store i32 %v1_981c, i32* %r3.global-to-local, align 4
  %v1_9820 = add i32 %v3_9818, -9
  %v2_9820 = icmp ugt i32 %v1_981c, 7
  store i1 %v2_9820, i1* %cpsr_c.global-to-local, align 1
  %v3_9820 = sub i32 8, %v3_9818
  %v4_9820 = and i32 %v3_9820, %v1_981c
  %v5_9820 = icmp slt i32 %v4_9820, 0
  store i1 %v5_9820, i1* %cpsr_v.global-to-local, align 1
  %v6_9820 = icmp slt i32 %v1_9820, 0
  store i1 %v6_9820, i1* %cpsr_n.global-to-local, align 1
  %v7_9820 = icmp eq i32 %v1_981c, 8
  store i1 %v7_9820, i1* %cpsr_z.global-to-local, align 1
  %v2_9824 = xor i1 %v2_9820, true
  %v3_9824 = or i1 %v7_9820, %v2_9824
  br i1 %v3_9824, label %dec_label_pc_9838.preheader, label %dec_label_pc_984c

dec_label_pc_9838.preheader:                      ; preds = %dec_label_pc_9810
  store i32 %v2_87d8, i32* %ip.global-to-local, align 4
  %v6_9828 = add i32 %v3_9818, %v2_87d8
  store i32 %v6_9828, i32* @r4, align 4
  br label %dec_label_pc_9838

dec_label_pc_9834:                                ; preds = %dec_label_pc_9838
  %v1_9834 = call i32 @function_13c2c(i32 1)
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9838

dec_label_pc_9838:                                ; preds = %dec_label_pc_9838.preheader, %dec_label_pc_9834
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_983c = call i32 @function_12ca8(i32* null)
  %v1_9840 = load i32, i32* @r4, align 4
  %v2_9840 = sub i32 %v2_983c, %v1_9840
  %v3_9840 = icmp uge i32 %v2_983c, %v1_9840
  store i1 %v3_9840, i1* %cpsr_c.global-to-local, align 1
  %v4_9840 = xor i32 %v1_9840, %v2_983c
  %v5_9840 = xor i32 %v2_9840, %v2_983c
  %v6_9840 = and i32 %v5_9840, %v4_9840
  %v7_9840 = icmp slt i32 %v6_9840, 0
  store i1 %v7_9840, i1* %cpsr_v.global-to-local, align 1
  %v8_9840 = icmp slt i32 %v2_9840, 0
  store i1 %v8_9840, i1* %cpsr_n.global-to-local, align 1
  %v9_9840 = icmp eq i32 %v2_983c, %v1_9840
  store i1 %v9_9840, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_9840, label %dec_label_pc_984c, label %dec_label_pc_9834

dec_label_pc_984c:                                ; preds = %dec_label_pc_9838, %dec_label_pc_9810
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9850, i32* @r4, align 4
  %v0_9854 = load i32, i32* @r6, align 4
  %v2_9854 = add i32 %v0_9854, %v3_9850
  store i32 %v2_9854, i32* @r5, align 4
  store i32 %v2_9854, i32* %r0.global-to-local, align 4
  %v1_985c = inttoptr i32 %v2_9854 to i8*
  %v2_985c = call i32 @function_12044(i8* %v1_985c)
  store i32 ptrtoint ([5 x i8]* @global_var_150f8.43 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_985c, i32* @r1, align 4
  %v0_9868 = load i32, i32* @r5, align 4
  store i32 %v0_9868, i32* %r0.global-to-local, align 4
  %v4_986c = inttoptr i32 %v0_9868 to i8*
  %v5_986c = call i32 @function_12398(i8* %v4_986c, i32 %v2_985c, i32 ptrtoint ([5 x i8]* @global_var_150f8.43 to i32))
  store i32 %v5_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v5_986c, -4
  %v2_9870 = icmp ugt i32 %v5_986c, 3
  store i1 %v2_9870, i1* %cpsr_c.global-to-local, align 1
  %v3_9870 = sub i32 3, %v5_986c
  %v4_9870 = and i32 %v3_9870, %v5_986c
  %v5_9870 = icmp slt i32 %v4_9870, 0
  store i1 %v5_9870, i1* %cpsr_v.global-to-local, align 1
  %v6_9870 = icmp slt i32 %v1_9870, 0
  store i1 %v6_9870, i1* %cpsr_n.global-to-local, align 1
  %v7_9870 = icmp eq i32 %v5_986c, 4
  store i1 %v7_9870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9870, label %dec_label_pc_9c68, label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %dec_label_pc_984c
  %v0_9878 = load i32, i32* @r6, align 4
  %v1_9878 = load i32, i32* @r4, align 4
  %v2_9878 = add i32 %v1_9878, %v0_9878
  %v3_9878 = inttoptr i32 %v2_9878 to i8*
  %v4_9878 = load i8, i8* %v3_9878, align 1
  %v6_9878 = zext i8 %v4_9878 to i32
  store i32 %v6_9878, i32* %r3.global-to-local, align 4
  %v2_987c = icmp ugt i8 %v4_9878, 46
  store i1 %v2_987c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_987c = icmp ult i8 %v4_9878, 47
  store i1 %v6_987c, i1* %cpsr_n.global-to-local, align 1
  %v7_987c = icmp eq i8 %v4_9878, 47
  store i1 %v7_987c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_987c, label %dec_label_pc_9de0, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9dfc, %dec_label_pc_9de0, %dec_label_pc_9d38, %dec_label_pc_9d1c, %dec_label_pc_9878, %dec_label_pc_9e2c, %dec_label_pc_9d68
  %v0_9884 = load i32, i32* %sb.global-to-local, align 4
  %v1_9888 = add i32 %v0_9884, 1431
  store i32 %v1_9888, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_150d4.21 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v4_9894 = call i32 @function_12fc0(i32 %v1_9888, i32 ptrtoint ([4 x i8]* @global_var_150d4.21 to i32), i32 4)
  store i32 %v4_9894, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_989c = load i32, i32* @r8, align 4
  %v3_989c = add i32 %v2_989c, -1452
  %v4_989c = inttoptr i32 %v3_989c to i8*
  store i8 10, i8* %v4_989c, align 1
  br label %dec_label_pc_8838

dec_label_pc_98a4:                                ; preds = %dec_label_pc_8610
  store i32 %v1_8610, i32* %r3.global-to-local, align 4
  %v1_98a8 = trunc i32 %v1_8610 to i8
  store i8 %v1_98a8, i8* %v2_8650, align 1
  %v0_98ac = load i32, i32* @r6, align 4
  %v1_98ac = add i32 %v0_98ac, -1431
  %v2_98ac = inttoptr i32 %v1_98ac to i32*
  %v3_98ac = load i32, i32* %v2_98ac, align 4
  store i32 %v3_98ac, i32* %r0.global-to-local, align 4
  %v1_98b0 = call i32 @function_129d8(i32 %v3_98ac)
  store i32 %v1_98b0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_98b8 = load i32, i32* @r6, align 4
  %v2_98b8 = add i32 %v1_98b8, -1431
  %v3_98b8 = inttoptr i32 %v2_98b8 to i32*
  store i32 -1, i32* %v3_98b8, align 4
  br label %dec_label_pc_8630

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9774, %dec_label_pc_96a4, %dec_label_pc_9678
  %v0_98c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_150ec.39 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_98d0 = call i32 @function_12108(i32 %v2_8280, i32 %v0_98c0, i32 ptrtoint ([5 x i8]* @global_var_150ec.39 to i32), i32 4)
  %v0_98d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_98d8 = add i32 %v0_98d4, 1431
  store i32 %v1_98d8, i32* @r4, align 4
  store i32 %v5_98d0, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15108.47 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_98d8, i32* %r0.global-to-local, align 4
  %v3_98e8 = inttoptr i32 %v1_98d8 to i8*
  %v4_98e8 = call i32 @function_12424(i8* %v3_98e8, i32 ptrtoint ([5 x i8]* @global_var_15108.47 to i32))
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98ec = icmp slt i32 %v4_98e8, 0
  store i1 %v1_98ec, i1* %cpsr_n.global-to-local, align 1
  %v2_98ec = icmp eq i32 %v4_98e8, 0
  store i1 %v2_98ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_98ec, label %dec_label_pc_9aa8, label %dec_label_pc_98f4

dec_label_pc_98f4:                                ; preds = %dec_label_pc_9aa8, %dec_label_pc_98c0
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r8, align 4
  %v3_98f8 = add i32 %v2_98f8, -1452
  %v4_98f8 = inttoptr i32 %v3_98f8 to i8*
  store i8 7, i8* %v4_98f8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_98fc:                                ; preds = %bb240, %dec_label_pc_98f4
  %v0_98fc = load i32, i32* @r5, align 4
  store i32 %v0_98fc, i32* %r2.global-to-local, align 4
  %v0_9900 = load i32, i32* @r8, align 4
  %v1_9900 = add i32 %v0_9900, -1456
  %v2_9900 = inttoptr i32 %v1_9900 to i32*
  %v3_9900 = load i32, i32* %v2_9900, align 4
  store i32 %v3_9900, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_990c = call i32 @function_131cc(i32 %v3_9900, i32* nonnull %stack_var_-20809, i32 %v0_98fc, i32 16384)
  store i32 %v5_990c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8838

dec_label_pc_9914:                                ; preds = %dec_label_pc_8e04
  %v2_9914 = add i32 %v0_9914, -10240
  %v3_9914 = icmp ugt i32 %v0_9914, 10239
  store i1 %v3_9914, i1* %cpsr_c.global-to-local, align 1
  %v4_9914 = sub i32 10239, %v0_9914
  %v5_9914 = and i32 %v4_9914, %v0_9914
  %v6_9914 = icmp slt i32 %v5_9914, 0
  store i1 %v6_9914, i1* %cpsr_v.global-to-local, align 1
  %v7_9914 = icmp slt i32 %v2_9914, 0
  store i1 %v7_9914, i1* %cpsr_n.global-to-local, align 1
  %v8_9914 = icmp eq i32 %v0_9914, 10240
  store i1 %v8_9914, i1* %cpsr_z.global-to-local, align 1
  %v5_9918 = icmp slt i32 %v0_9914, 10240
  br i1 %v5_9918, label %dec_label_pc_8838, label %dec_label_pc_8e20

dec_label_pc_9920:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9924 = load i32, i32* @r4, align 4
  %v2_9924 = inttoptr i32 %v1_9924 to i32*
  store i32 104, i32* %v2_9924, align 4
  br label %dec_label_pc_965c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9430
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9930 = load i32, i32* %fp.global-to-local, align 4
  %v2_9930 = inttoptr i32 %v1_9930 to i32*
  store i32 104, i32* %v2_9930, align 4
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %dec_label_pc_9950, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r8, align 4
  %v1_9934 = add i32 %v0_9934, -1456
  %v2_9934 = inttoptr i32 %v1_9934 to i32*
  %v3_9934 = load i32, i32* %v2_9934, align 4
  store i32 %v3_9934, i32* %r0.global-to-local, align 4
  %v1_9938 = call i32 @function_129d8(i32 %v3_9934)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_9944 = load i32, i32* @r8, align 4
  %v2_9944 = add i32 %v1_9944, -1456
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  store i32 -1, i32* %v3_9944, align 4
  %v0_9948 = load i32, i32* %lr.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* @r8, align 4
  %v3_9948 = add i32 %v2_9948, -1452
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  br label %dec_label_pc_8838

dec_label_pc_9950:                                ; preds = %dec_label_pc_9458
  %v0_9950 = load i32, i32* %fp.global-to-local, align 4
  %v1_9950 = inttoptr i32 %v0_9950 to i32*
  %v2_9950 = load i32, i32* %v1_9950, align 4
  store i32 %v2_9950, i32* %r3.global-to-local, align 4
  %v1_9954 = add i32 %v2_9950, -11
  %v2_9954 = icmp ugt i32 %v2_9950, 10
  store i1 %v2_9954, i1* %cpsr_c.global-to-local, align 1
  %v3_9954 = sub i32 10, %v2_9950
  %v4_9954 = and i32 %v3_9954, %v2_9950
  %v5_9954 = icmp slt i32 %v4_9954, 0
  store i1 %v5_9954, i1* %cpsr_v.global-to-local, align 1
  %v6_9954 = icmp slt i32 %v1_9954, 0
  store i1 %v6_9954, i1* %cpsr_n.global-to-local, align 1
  %v7_9954 = icmp eq i32 %v2_9950, 11
  store i1 %v7_9954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9954, label %dec_label_pc_8838, label %dec_label_pc_9934

dec_label_pc_9960:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_996c = load i32, i32* @r5, align 4
  %v1_996c = add i32 %v0_996c, 4
  %v2_996c = inttoptr i32 %v1_996c to i8*
  %v3_996c = load i8, i8* %v2_996c, align 1
  %v4_996c = zext i8 %v3_996c to i32
  store i32 %v4_996c, i32* %r3.global-to-local, align 4
  %v2_9970 = icmp ugt i8 %v3_996c, 114
  store i1 %v2_9970, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9970 = icmp ult i8 %v3_996c, 115
  store i1 %v6_9970, i1* %cpsr_n.global-to-local, align 1
  %v7_9970 = icmp eq i8 %v3_996c, 115
  store i1 %v7_9970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9970, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_9960
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_9960, %bb235
  %v3_9980 = phi i32 [ 7, %dec_label_pc_9960 ], [ 8, %bb235 ]
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 %v0_996c, i32* @r0, align 4
  %v1_9988 = load i32, i32* %r6.global-to-local, align 4
  %v2_9988 = sub i32 %v1_9988, %v3_9980
  store i32 %v2_9988, i32* @r2, align 4
  %v2_998c = add i32 %v3_9980, %v0_996c
  store i32 %v2_998c, i32* @r1, align 4
  %v3_9990 = call i32 @function_12fd0(i32 %v0_996c, i32 %v2_998c, i32 %v2_9988)
  store i32 %v3_9990, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v0_9998 = load i32, i32* @r7, align 4
  store i32 %v0_9998, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v1_99a0 = load i32, i32* @r4, align 4
  %v2_99a0 = add i32 %v1_99a0, %v2_8280
  %v3_99a0 = inttoptr i32 %v2_99a0 to i8*
  %v4_99a0 = load i8, i8* %v3_99a0, align 1
  %v6_99a0 = zext i8 %v4_99a0 to i32
  store i32 %v6_99a0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99a4 = icmp eq i8 %v4_99a0, 0
  store i1 %v2_99a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99a4, label %dec_label_pc_99e8, label %dec_label_pc_99ac

dec_label_pc_99ac:                                ; preds = %.thread63
  %v2_99ac = icmp ugt i8 %v4_99a0, 46
  store i1 %v2_99ac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99ac = icmp ult i8 %v4_99a0, 47
  store i1 %v6_99ac, i1* %cpsr_n.global-to-local, align 1
  %v7_99ac = icmp eq i8 %v4_99a0, 47
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  %v1_99b0 = load i32, i32* @r5, align 4
  br i1 %v7_99ac, label %bb236, label %dec_label_pc_99b8

bb236:                                            ; preds = %dec_label_pc_99ac
  store i32 %v1_99b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9b48

dec_label_pc_99b8:                                ; preds = %dec_label_pc_99ac
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99c8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c8
  %v2_99c0 = icmp ugt i8 %v4_99d4, 46
  store i1 %v2_99c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99c0 = icmp ult i8 %v4_99d4, 47
  store i1 %v6_99c0, i1* %cpsr_n.global-to-local, align 1
  %v7_99c0 = icmp eq i8 %v4_99d4, 47
  store i1 %v7_99c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99c0, label %dec_label_pc_9b48, label %dec_label_pc_99c8

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99b8
  %v0_99dc = phi i32 [ %v1_99dc, %dec_label_pc_99c0 ], [ 1, %dec_label_pc_99b8 ]
  store i32 %v0_99dc, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 %v0_99dc, i32* %stack_var_-40, align 4
  %v2_99d4 = add i32 %v0_99dc, %v1_99b0
  %v3_99d4 = inttoptr i32 %v2_99d4 to i8*
  %v4_99d4 = load i8, i8* %v3_99d4, align 1
  %v6_99d4 = zext i8 %v4_99d4 to i32
  store i32 %v6_99d4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99d8 = icmp eq i8 %v4_99d4, 0
  store i1 %v2_99d8, i1* %cpsr_z.global-to-local, align 1
  %v1_99dc = add i32 %v0_99dc, 1
  store i32 %v1_99dc, i32* %r3.global-to-local, align 4
  store i32 %v2_99d4, i32* %r1.global-to-local, align 4
  br i1 %v2_99d8, label %dec_label_pc_99e8, label %dec_label_pc_99c0

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c8, %.thread63, %dec_label_pc_9b48
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r0.global-to-local, align 4
  %v1_99ec = inttoptr i32 %v0_99e8 to i8*
  %v2_99ec = call i32 @function_12044(i8* %v1_99ec)
  store i32 %v2_99ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_99f0 = icmp slt i32 %v2_99ec, 0
  store i1 %v1_99f0, i1* %cpsr_n.global-to-local, align 1
  %v2_99f0 = icmp eq i32 %v2_99ec, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_99ec, 1
  br i1 %tmp237, label %dec_label_pc_9a14, label %dec_label_pc_99f8

dec_label_pc_99f8:                                ; preds = %dec_label_pc_99e8
  %v0_99f8 = load i32, i32* @r5, align 4
  store i32 %v0_99f8, i32* %r0.global-to-local, align 4
  %v1_99fc = inttoptr i32 %v0_99f8 to i8*
  %v2_99fc = call i32 @function_12044(i8* %v1_99fc)
  store i32 %v2_99fc, i32* %r0.global-to-local, align 4
  %v1_9a00 = add i32 %v2_99fc, -127
  %v2_9a00 = icmp ugt i32 %v2_99fc, 126
  store i1 %v2_9a00, i1* %cpsr_c.global-to-local, align 1
  %v3_9a00 = sub i32 126, %v2_99fc
  %v4_9a00 = and i32 %v3_9a00, %v2_99fc
  %v5_9a00 = icmp slt i32 %v4_9a00, 0
  store i1 %v5_9a00, i1* %cpsr_v.global-to-local, align 1
  %v6_9a00 = icmp slt i32 %v1_9a00, 0
  store i1 %v6_9a00, i1* %cpsr_n.global-to-local, align 1
  %v7_9a00 = icmp eq i32 %v2_99fc, 127
  store i1 %v7_9a00, i1* %cpsr_z.global-to-local, align 1
  %v7_9a04 = icmp sgt i32 %v2_99fc, 127
  br i1 %v7_9a04, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_99f8
  %v8_9a04 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a08 = add i32 %v8_9a04, 789
  store i32 %v9_9a08, i32* %r0.global-to-local, align 4
  %v8_9a0c = load i32, i32* @r5, align 4
  store i32 %v8_9a0c, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_99f8, %bb238
  store i32 39444, i32* %lr.global-to-local, align 4
  %v3_9a10 = xor i1 %v6_9a00, %v5_9a00
  %v4_9a10 = or i1 %v7_9a00, %v3_9a10
  call void @__pseudo_cond_branch(i1 %v4_9a10, i32 ptrtoint (i32* @global_var_1206c.48 to i32))
  br label %dec_label_pc_9a14

dec_label_pc_9a14:                                ; preds = %dec_label_pc_99e8, %.thread66
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9a18 = load i32, i32* %stack_var_-40, align 4
  %v0_9a1c = load i32, i32* @r5, align 4
  %v2_9a1c = add i32 %v3_9a18, 1
  %v1_9a20 = add i32 %v2_9a1c, %v0_9a1c
  store i32 %v1_9a20, i32* %r0.global-to-local, align 4
  %v1_9a24 = inttoptr i32 %v1_9a20 to i8*
  %v2_9a24 = call i32 @function_12044(i8* %v1_9a24)
  store i32 %v2_9a24, i32* %r0.global-to-local, align 4
  %v1_9a28 = add i32 %v2_9a24, -255
  %v2_9a28 = icmp ugt i32 %v2_9a24, 254
  store i1 %v2_9a28, i1* %cpsr_c.global-to-local, align 1
  %v3_9a28 = sub i32 254, %v2_9a24
  %v4_9a28 = and i32 %v3_9a28, %v2_9a24
  %v5_9a28 = icmp slt i32 %v4_9a28, 0
  store i1 %v5_9a28, i1* %cpsr_v.global-to-local, align 1
  %v6_9a28 = icmp slt i32 %v1_9a28, 0
  store i1 %v6_9a28, i1* %cpsr_n.global-to-local, align 1
  %v7_9a28 = icmp eq i32 %v2_9a24, 255
  store i1 %v7_9a28, i1* %cpsr_z.global-to-local, align 1
  %v8_9a2c = icmp sgt i32 %v2_9a24, 255
  br i1 %v8_9a2c, label %dec_label_pc_9400, label %dec_label_pc_9a30

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a14
  %v0_9a30 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a34 = add i32 %v0_9a30, 533
  store i32 %v1_9a34, i32* @r4, align 4
  store i32 %v1_9a34, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9a40 = call i32 @function_120e4(i32 %v1_9a34, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9a48 = load i32, i32* %stack_var_-40, align 4
  %v0_9a4c = load i32, i32* @r5, align 4
  %v2_9a4c = add i32 %v3_9a48, 1
  %v1_9a50 = add i32 %v2_9a4c, %v0_9a4c
  store i32 %v1_9a50, i32* %r0.global-to-local, align 4
  %v1_9a54 = inttoptr i32 %v1_9a50 to i8*
  %v2_9a54 = call i32 @function_12044(i8* %v1_9a54)
  store i32 %v2_9a54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a58 = icmp slt i32 %v2_9a54, 0
  store i1 %v1_9a58, i1* %cpsr_n.global-to-local, align 1
  %v2_9a58 = icmp eq i32 %v2_9a54, 0
  store i1 %v2_9a58, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_9a54, 1
  br i1 %tmp239, label %dec_label_pc_9400, label %dec_label_pc_9a60

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a30
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9a64 = load i32, i32* %stack_var_-40, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  %v0_9a6c = load i32, i32* @r4, align 4
  store i32 %v0_9a6c, i32* @r0, align 4
  %v2_9a68 = add i32 %v3_9a64, 1
  %v1_9a70 = add i32 %v2_9a68, %v0_9a68
  store i32 %v1_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = inttoptr i32 %v0_9a6c to i8*
  %v3_9a74 = call i32 @function_1206c(i8* %v2_9a74, i32 %v1_9a70)
  store i32 %v3_9a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_8dd0
  %v0_9a7c = load i32, i32* @r8, align 4
  %v1_9a7c = add i32 %v0_9a7c, -1456
  %v2_9a7c = inttoptr i32 %v1_9a7c to i32*
  %v3_9a7c = load i32, i32* %v2_9a7c, align 4
  store i32 %v3_9a7c, i32* %r0.global-to-local, align 4
  %v1_9a80 = call i32 @function_129d8(i32 %v3_9a7c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9a8c = load i32, i32* @r8, align 4
  %v2_9a8c = add i32 %v1_9a8c, -1456
  %v3_9a8c = inttoptr i32 %v2_9a8c to i32*
  store i32 -1, i32* %v3_9a8c, align 4
  %v0_9a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a90 = trunc i32 %v0_9a90 to i8
  %v2_9a90 = load i32, i32* @r8, align 4
  %v3_9a90 = add i32 %v2_9a90, -1452
  %v4_9a90 = inttoptr i32 %v3_9a90 to i8*
  store i8 %v1_9a90, i8* %v4_9a90, align 1
  br label %dec_label_pc_8838

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9650
  %v0_9a98 = load i32, i32* @r8, align 4
  %v1_9a98 = add i32 %v0_9a98, -1452
  %v2_9a98 = inttoptr i32 %v1_9a98 to i8*
  %v3_9a98 = load i8, i8* %v2_9a98, align 1
  %v4_9a98 = zext i8 %v3_9a98 to i32
  store i32 %v4_9a98, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9a9c = icmp eq i8 %v3_9a98, 0
  store i1 %v2_9a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a9c, label %dec_label_pc_8838, label %dec_label_pc_9400

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_98c0
  %v0_9aa8 = load i32, i32* @r4, align 4
  store i32 %v0_9aa8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_150d4.21 to i32), i32* %r1.global-to-local, align 4
  %v3_9ab0 = inttoptr i32 %v0_9aa8 to i8*
  %v4_9ab0 = call i32 @function_12424(i8* %v3_9ab0, i32 ptrtoint ([4 x i8]* @global_var_150d4.21 to i32))
  store i32 %v4_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ab4 = icmp slt i32 %v4_9ab0, 0
  store i1 %v1_9ab4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v4_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ab4, label %bb240, label %dec_label_pc_98f4

bb240:                                            ; preds = %dec_label_pc_9aa8
  %v0_9abc = load i32, i32* %fp.global-to-local, align 4
  %v1_9abc = load i32, i32* @r5, align 4
  %v2_9abc = sub i32 %v0_9abc, %v1_9abc
  %v3_9abc = icmp uge i32 %v0_9abc, %v1_9abc
  store i1 %v3_9abc, i1* %cpsr_c.global-to-local, align 1
  %v4_9abc = xor i32 %v1_9abc, %v0_9abc
  %v5_9abc = xor i32 %v2_9abc, %v0_9abc
  %v6_9abc = and i32 %v5_9abc, %v4_9abc
  %v7_9abc = icmp slt i32 %v6_9abc, 0
  store i1 %v7_9abc, i1* %cpsr_v.global-to-local, align 1
  %v8_9abc = icmp slt i32 %v2_9abc, 0
  store i1 %v8_9abc, i1* %cpsr_n.global-to-local, align 1
  %v9_9abc = icmp eq i32 %v0_9abc, %v1_9abc
  store i1 %v9_9abc, i1* %cpsr_z.global-to-local, align 1
  %v7_9ac0 = icmp sgt i32 %v0_9abc, %v1_9abc
  %. = select i1 %v7_9ac0, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9ac8 = trunc i32 %. to i8
  %v10_9ac8 = load i32, i32* @r8, align 4
  %v11_9ac8 = add i32 %v10_9ac8, -1452
  %v12_9ac8 = inttoptr i32 %v11_9ac8 to i8*
  store i8 %v9_9ac8, i8* %v12_9ac8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v0_9adc = load i32, i32* @r8, align 4
  %v1_9adc = add i32 %v0_9adc, 656
  %v2_9adc = inttoptr i32 %v1_9adc to i32*
  %v3_9adc = load i32, i32* %v2_9adc, align 4
  store i32 %v3_9adc, i32* @r4, align 4
  %v3_9ae0 = call i32 @function_114ac(i32 43, i32* null)
  %v0_9ae4 = load i32, i32* @r4, align 4
  store i32 %v0_9ae4, i32* %r1.global-to-local, align 4
  store i32 %v3_9ae0, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9af0 = load i32, i32* @r7, align 4
  store i32 %v0_9af0, i32* %r0.global-to-local, align 4
  %v4_9af4 = call i32 @function_12108(i32 %v0_9af0, i32 %v0_9ae4, i32 %v3_9ae0, i32 11)
  store i32 %v4_9af4, i32* %r0.global-to-local, align 4
  %v0_9af8 = load i32, i32* @r8, align 4
  %v1_9af8 = add i32 %v0_9af8, 656
  %v2_9af8 = inttoptr i32 %v1_9af8 to i32*
  %v3_9af8 = load i32, i32* %v2_9af8, align 4
  %v0_9afc = load i32, i32* @r7, align 4
  %v2_9afc = add i32 %v0_9afc, %v4_9af4
  store i32 %v2_9afc, i32* @r5, align 4
  store i32 %v4_9af4, i32* @r4, align 4
  %v2_9b04 = sub i32 %v3_9af8, %v4_9af4
  store i32 %v2_9b04, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15110.50 to i32), i32* %r2.global-to-local, align 4
  %v0_9b0c = load i32, i32* @sl, align 4
  store i32 %v0_9b0c, i32* %r3.global-to-local, align 4
  store i32 %v2_9afc, i32* %r0.global-to-local, align 4
  %v4_9b14 = call i32 @function_12108(i32 %v2_9afc, i32 %v2_9b04, i32 ptrtoint (i32* @global_var_15110.50 to i32), i32 %v0_9b0c)
  store i32 %v4_9b14, i32* %r0.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r8, align 4
  %v1_9b18 = add i32 %v0_9b18, 12
  %v2_9b18 = inttoptr i32 %v1_9b18 to i32*
  %v3_9b18 = load i32, i32* %v2_9b18, align 4
  store i32 %v3_9b18, i32* %r3.global-to-local, align 4
  %v0_9b1c = load i32, i32* @r4, align 4
  %v2_9b1c = add i32 %v0_9b1c, %v4_9b14
  store i32 %v2_9b1c, i32* %r6.global-to-local, align 4
  %v1_9b20 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b20 = add i32 %v1_9b20, %v2_9b1c
  store i32 %v2_9b20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_9b28 = add i32 %v3_9b18, -4
  %v2_9b28 = icmp ugt i32 %v3_9b18, 3
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = sub i32 3, %v3_9b18
  %v4_9b28 = and i32 %v3_9b28, %v3_9b18
  %v5_9b28 = icmp slt i32 %v4_9b28, 0
  store i1 %v5_9b28, i1* %cpsr_v.global-to-local, align 1
  %v6_9b28 = icmp slt i32 %v1_9b28, 0
  store i1 %v6_9b28, i1* %cpsr_n.global-to-local, align 1
  %v7_9b28 = icmp eq i32 %v3_9b18, 4
  store i1 %v7_9b28, i1* %cpsr_z.global-to-local, align 1
  %v3_9b2c = add i32 %v2_9b20, 2115
  %v4_9b2c = inttoptr i32 %v3_9b2c to i8*
  store i8 0, i8* %v4_9b2c, align 1
  %v7_9b30 = icmp sgt i32 %v3_9b18, 4
  br i1 %v7_9b30, label %dec_label_pc_9b34, label %dec_label_pc_9bbc

dec_label_pc_9b34:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_9bbc, %dec_label_pc_9bcc
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_9b3c = load i32, i32* @r8, align 4
  %v2_9b3c = add i32 %v1_9b3c, 8
  %v3_9b3c = inttoptr i32 %v2_9b3c to i32*
  store i32 -1, i32* %v3_9b3c, align 4
  %v0_9b40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b40 = trunc i32 %v0_9b40 to i8
  %v2_9b40 = load i32, i32* @r8, align 4
  %v3_9b40 = add i32 %v2_9b40, -1452
  %v4_9b40 = inttoptr i32 %v3_9b40 to i8*
  store i8 %v1_9b40, i8* %v4_9b40, align 1
  br label %dec_label_pc_8838

dec_label_pc_9b48:                                ; preds = %dec_label_pc_99c0, %bb236
  %v2_9b4c = phi i32 [ %v1_99b0, %bb236 ], [ %v2_99d4, %dec_label_pc_99c0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b4c = inttoptr i32 %v2_9b4c to i8*
  store i8 0, i8* %v3_9b4c, align 1
  br label %dec_label_pc_99e8

dec_label_pc_9b54:                                ; preds = %dec_label_pc_93f0
  %v0_9b54 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b58 = add i32 %v0_9b54, 533
  store i32 %v1_9b58, i32* @r4, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9b64 = call i32 @function_120e4(i32 %v1_9b58, i32 255)
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_9b6c = load i32, i32* %stack_var_-40, align 4
  %v0_9b70 = load i32, i32* @r5, align 4
  %v2_9b70 = add i32 %v3_9b6c, 1
  %v1_9b74 = add i32 %v2_9b70, %v0_9b70
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  %v1_9b78 = inttoptr i32 %v1_9b74 to i8*
  %v2_9b78 = call i32 @function_12044(i8* %v1_9b78)
  store i32 %v2_9b78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9b7c = icmp slt i32 %v2_9b78, 0
  store i1 %v1_9b7c, i1* %cpsr_n.global-to-local, align 1
  %v2_9b7c = icmp eq i32 %v2_9b78, 0
  store i1 %v2_9b7c, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_9b78, 1
  br i1 %tmp241, label %dec_label_pc_9400, label %dec_label_pc_9b84

dec_label_pc_9b84:                                ; preds = %dec_label_pc_9b54
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9b88 = load i32, i32* %stack_var_-40, align 4
  %v0_9b8c = load i32, i32* @r5, align 4
  %v2_9b8c = add i32 %v3_9b88, 1
  %v1_9b90 = add i32 %v2_9b8c, %v0_9b8c
  store i32 %v1_9b90, i32* %r0.global-to-local, align 4
  %v1_9b94 = inttoptr i32 %v1_9b90 to i8*
  %v2_9b94 = call i32 @function_12044(i8* %v1_9b94)
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v1_9b98 = add i32 %v2_9b94, -255
  %v2_9b98 = icmp ugt i32 %v2_9b94, 254
  store i1 %v2_9b98, i1* %cpsr_c.global-to-local, align 1
  %v3_9b98 = sub i32 254, %v2_9b94
  %v4_9b98 = and i32 %v3_9b98, %v2_9b94
  %v5_9b98 = icmp slt i32 %v4_9b98, 0
  store i1 %v5_9b98, i1* %cpsr_v.global-to-local, align 1
  %v6_9b98 = icmp slt i32 %v1_9b98, 0
  store i1 %v6_9b98, i1* %cpsr_n.global-to-local, align 1
  %v7_9b98 = icmp eq i32 %v2_9b94, 255
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 255
  br i1 %v8_9b9c, label %dec_label_pc_9400, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b84
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9ba4 = load i32, i32* %stack_var_-40, align 4
  %v0_9ba8 = load i32, i32* @r5, align 4
  %v0_9bac = load i32, i32* @r4, align 4
  store i32 %v0_9bac, i32* @r0, align 4
  %v2_9ba8 = add i32 %v3_9ba4, 1
  %v1_9bb0 = add i32 %v2_9ba8, %v0_9ba8
  store i32 %v1_9bb0, i32* %r1.global-to-local, align 4
  %v2_9bb4 = inttoptr i32 %v0_9bac to i8*
  %v3_9bb4 = call i32 @function_1206c(i8* %v2_9bb4, i32 %v1_9bb0)
  store i32 %v3_9bb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9bbc:                                ; preds = %dec_label_pc_9ad4
  %v0_9bbc = load i32, i32* @r5, align 4
  store i32 %v0_9bbc, i32* %r0.global-to-local, align 4
  %v1_9bc0 = inttoptr i32 %v0_9bbc to i8*
  %v2_9bc0 = call i32 @function_12044(i8* %v1_9bc0)
  store i32 %v2_9bc0, i32* %r0.global-to-local, align 4
  %v1_9bc4 = add i32 %v2_9bc0, -127
  %v2_9bc4 = icmp ugt i32 %v2_9bc0, 126
  store i1 %v2_9bc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bc4 = sub i32 126, %v2_9bc0
  %v4_9bc4 = and i32 %v3_9bc4, %v2_9bc0
  %v5_9bc4 = icmp slt i32 %v4_9bc4, 0
  store i1 %v5_9bc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9bc4 = icmp slt i32 %v1_9bc4, 0
  store i1 %v6_9bc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9bc4 = icmp eq i32 %v2_9bc0, 127
  store i1 %v7_9bc4, i1* %cpsr_z.global-to-local, align 1
  %v8_9bc8 = icmp sgt i32 %v2_9bc0, 127
  br i1 %v8_9bc8, label %dec_label_pc_9b34, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %dec_label_pc_9bbc
  %v0_9bcc = load i32, i32* @r8, align 4
  %v1_9bcc = add i32 %v0_9bcc, 12
  %v2_9bcc = inttoptr i32 %v1_9bcc to i32*
  %v3_9bcc = load i32, i32* %v2_9bcc, align 4
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v1_9bd4 = and i32 %v3_9bcc, 33554432
  %v2_9bd4 = icmp ne i32 %v1_9bd4, 0
  store i1 %v2_9bd4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bd4 = mul i32 %v3_9bcc, 128
  %v0_9bd8 = load i32, i32* @r5, align 4
  store i32 %v0_9bd8, i32* %r1.global-to-local, align 4
  %v2_9bdc = add i32 %v3_9bd4, %v1_9410
  store i32 %v2_9bdc, i32* @r0, align 4
  %v2_9be0 = inttoptr i32 %v2_9bdc to i8*
  %v3_9be0 = call i32 @function_1206c(i8* %v2_9be0, i32 %v0_9bd8)
  store i32 %v3_9be0, i32* %r0.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r8, align 4
  %v1_9be4 = add i32 %v0_9be4, 12
  %v2_9be4 = inttoptr i32 %v1_9be4 to i32*
  %v3_9be4 = load i32, i32* %v2_9be4, align 4
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v1_9bec = and i32 %v3_9be4, 33554432
  %v2_9bec = icmp ne i32 %v1_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_c.global-to-local, align 1
  %v3_9bec = mul i32 %v3_9be4, 128
  %v2_9bf0 = add i32 %v3_9bec, %v1_9410
  store i32 %v2_9bf0, i32* %r4.global-to-local, align 4
  store i32 %v2_9bf0, i32* %r0.global-to-local, align 4
  %v1_9bf8 = inttoptr i32 %v2_9bf0 to i8*
  %v2_9bf8 = call i32 @function_12044(i8* %v1_9bf8)
  store i32 ptrtoint (i32* @global_var_1540c.52 to i32), i32* %r1.global-to-local, align 4
  %v2_9c00 = add i32 %v2_9bf0, %v2_9bf8
  store i32 %v2_9c00, i32* @r0, align 4
  %v2_9c04 = inttoptr i32 %v2_9c00 to i8*
  %v3_9c04 = call i32 @function_1206c(i8* %v2_9c04, i32 ptrtoint (i32* @global_var_1540c.52 to i32))
  store i32 %v3_9c04, i32* %r0.global-to-local, align 4
  %v0_9c08 = load i32, i32* %r6.global-to-local, align 4
  %v1_9c08 = add i32 %v0_9c08, 3
  store i32 %v1_9c08, i32* @r4, align 4
  %v0_9c0c = load i32, i32* @r8, align 4
  %v1_9c0c = add i32 %v0_9c0c, 656
  %v2_9c0c = inttoptr i32 %v1_9c0c to i32*
  %v3_9c0c = load i32, i32* %v2_9c0c, align 4
  %v0_9c10 = load i32, i32* @r7, align 4
  %v2_9c10 = add i32 %v0_9c10, %v1_9c08
  store i32 %v2_9c10, i32* %r6.global-to-local, align 4
  %v2_9c14 = sub i32 %v3_9c0c, %v1_9c08
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v0_9c18 = load i32, i32* @sl, align 4
  store i32 %v0_9c18, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15110.50 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9c10, i32* %r0.global-to-local, align 4
  %v4_9c24 = call i32 @function_12108(i32 %v2_9c10, i32 %v2_9c14, i32 ptrtoint (i32* @global_var_15110.50 to i32), i32 %v0_9c18)
  store i32 %v4_9c24, i32* %r0.global-to-local, align 4
  %v0_9c28 = load i32, i32* @r8, align 4
  %v1_9c28 = add i32 %v0_9c28, 12
  %v2_9c28 = inttoptr i32 %v1_9c28 to i32*
  %v3_9c28 = load i32, i32* %v2_9c28, align 4
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v1_9c30 = and i32 %v3_9c28, 33554432
  %v2_9c30 = icmp ne i32 %v1_9c30, 0
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v3_9c30 = mul i32 %v3_9c28, 128
  %v0_9c34 = load i32, i32* @r4, align 4
  %v1_9c34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9c38 = add i32 %v3_9c30, %v1_9410
  store i32 %v2_9c38, i32* @r5, align 4
  %v2_9c34 = add i32 %v0_9c34, %v4_9c24
  %v2_9c3c = add i32 %v2_9c34, %v1_9c34
  store i32 %v2_9c3c, i32* @r4, align 4
  %v0_9c40 = load i32, i32* %fp.global-to-local, align 4
  %v1_9c40 = trunc i32 %v0_9c40 to i8
  %v3_9c40 = add i32 %v2_9c3c, 2115
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 %v1_9c40, i8* %v4_9c40, align 1
  %v0_9c44 = load i32, i32* @r5, align 4
  store i32 %v0_9c44, i32* %r0.global-to-local, align 4
  %v1_9c48 = inttoptr i32 %v0_9c44 to i8*
  %v2_9c48 = call i32 @function_12044(i8* %v1_9c48)
  %v0_9c4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9c4c, i32* %r1.global-to-local, align 4
  %v0_9c50 = load i32, i32* @r5, align 4
  %v2_9c50 = add i32 %v0_9c50, %v2_9c48
  store i32 %v2_9c50, i32* @r0, align 4
  %v2_9c54 = inttoptr i32 %v2_9c50 to i8*
  %v3_9c54 = call i32 @function_1206c(i8* %v2_9c54, i32 %v0_9c4c)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  %v0_9c58 = load i32, i32* @r8, align 4
  %v1_9c58 = add i32 %v0_9c58, 12
  %v2_9c58 = inttoptr i32 %v1_9c58 to i32*
  %v3_9c58 = load i32, i32* %v2_9c58, align 4
  %v1_9c5c = add i32 %v3_9c58, 1
  store i32 %v1_9c5c, i32* %r3.global-to-local, align 4
  store i32 %v1_9c5c, i32* %v2_9c58, align 4
  br label %dec_label_pc_9b34

dec_label_pc_9c68:                                ; preds = %dec_label_pc_984c
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_9c74 = load i32, i32* @r5, align 4
  %v1_9c74 = add i32 %v0_9c74, 4
  %v2_9c74 = inttoptr i32 %v1_9c74 to i8*
  %v3_9c74 = load i8, i8* %v2_9c74, align 1
  %v4_9c74 = zext i8 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r3.global-to-local, align 4
  %v2_9c78 = icmp ugt i8 %v3_9c74, 114
  store i1 %v2_9c78, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c78 = icmp ult i8 %v3_9c74, 115
  store i1 %v6_9c78, i1* %cpsr_n.global-to-local, align 1
  %v7_9c78 = icmp eq i8 %v3_9c74, 115
  store i1 %v7_9c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c78, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_9c68
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_9c68, %bb242
  %v3_9c88 = phi i32 [ 7, %dec_label_pc_9c68 ], [ 8, %bb242 ]
  %v0_9c8c = load i32, i32* @r7, align 4
  %v1_9c8c = sub nsw i32 1, %v3_9c88
  %v2_9c90 = add i32 %v1_9c8c, %v0_9c8c
  store i32 %v2_9c90, i32* @r2, align 4
  store i32 %v0_9c74, i32* @r0, align 4
  %v2_9c98 = add i32 %v3_9c88, %v0_9c74
  store i32 %v2_9c98, i32* @r1, align 4
  %v3_9c9c = call i32 @function_12fd0(i32 %v0_9c74, i32 %v2_9c98, i32 %v2_9c90)
  store i32 %v3_9c9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_9cac = load i32, i32* @r6, align 4
  %v1_9cac = load i32, i32* @r4, align 4
  %v2_9cac = add i32 %v1_9cac, %v0_9cac
  %v3_9cac = inttoptr i32 %v2_9cac to i8*
  %v4_9cac = load i8, i8* %v3_9cac, align 1
  %v6_9cac = zext i8 %v4_9cac to i32
  store i32 %v6_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_9cb0 = icmp eq i8 %v4_9cac, 0
  store i1 %v9_9cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9cb0, label %dec_label_pc_9cf0, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %.thread69
  %v2_9cb8 = icmp ugt i8 %v4_9cac, 46
  store i1 %v2_9cb8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9cb8 = icmp ult i8 %v4_9cac, 47
  store i1 %v6_9cb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9cb8 = icmp eq i8 %v4_9cac, 47
  store i1 %v7_9cb8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cbc = load i32, i32* @r5, align 4
  br i1 %v7_9cb8, label %bb243, label %dec_label_pc_9cc4

bb243:                                            ; preds = %dec_label_pc_9cb8
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9dd4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9cb8
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9cd4

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9cd4
  %v2_9ccc = icmp ugt i8 %v4_9cdc, 46
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ccc = icmp ult i8 %v4_9cdc, 47
  store i1 %v6_9ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_9ccc = icmp eq i8 %v4_9cdc, 47
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ccc, label %dec_label_pc_9dd4, label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9ccc, %dec_label_pc_9cc4
  %v1_9ce4 = phi i32 [ %v1_9ce8, %dec_label_pc_9ccc ], [ 1, %dec_label_pc_9cc4 ]
  store i32 %v10_82f0, i32* @lr, align 4
  store i32 %v1_9ce4, i32* %stack_var_-40, align 4
  %v2_9cdc = add i32 %v1_9ce4, %v1_9cbc
  %v3_9cdc = inttoptr i32 %v2_9cdc to i8*
  %v4_9cdc = load i8, i8* %v3_9cdc, align 1
  %v6_9cdc = zext i8 %v4_9cdc to i32
  store i32 %v6_9cdc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9ce0 = icmp eq i8 %v4_9cdc, 0
  store i1 %v2_9ce0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9cdc, i32* %r1.global-to-local, align 4
  %v1_9ce8 = add i32 %v1_9ce4, 1
  store i32 %v1_9ce8, i32* %r3.global-to-local, align 4
  br i1 %v2_9ce0, label %dec_label_pc_9cf0, label %dec_label_pc_9ccc

dec_label_pc_9cf0:                                ; preds = %dec_label_pc_9cd4, %.thread69, %dec_label_pc_9dd4
  %v0_9cf0 = load i32, i32* @r5, align 4
  store i32 %v0_9cf0, i32* %r0.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v0_9cf0 to i8*
  %v2_9cf4 = call i32 @function_12044(i8* %v1_9cf4)
  store i32 %v2_9cf4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9cf8 = icmp slt i32 %v2_9cf4, 0
  store i1 %v1_9cf8, i1* %cpsr_n.global-to-local, align 1
  %v2_9cf8 = icmp eq i32 %v2_9cf4, 0
  store i1 %v2_9cf8, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_9cf4, 1
  br i1 %tmp244, label %dec_label_pc_9d1c, label %dec_label_pc_9d00

dec_label_pc_9d00:                                ; preds = %dec_label_pc_9cf0
  %v0_9d00 = load i32, i32* @r5, align 4
  store i32 %v0_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v0_9d00 to i8*
  %v2_9d04 = call i32 @function_12044(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  %v1_9d08 = add i32 %v2_9d04, -127
  %v2_9d08 = icmp ugt i32 %v2_9d04, 126
  store i1 %v2_9d08, i1* %cpsr_c.global-to-local, align 1
  %v3_9d08 = sub i32 126, %v2_9d04
  %v4_9d08 = and i32 %v3_9d08, %v2_9d04
  %v5_9d08 = icmp slt i32 %v4_9d08, 0
  store i1 %v5_9d08, i1* %cpsr_v.global-to-local, align 1
  %v6_9d08 = icmp slt i32 %v1_9d08, 0
  store i1 %v6_9d08, i1* %cpsr_n.global-to-local, align 1
  %v7_9d08 = icmp eq i32 %v2_9d04, 127
  store i1 %v7_9d08, i1* %cpsr_z.global-to-local, align 1
  %v7_9d0c = icmp sgt i32 %v2_9d04, 127
  br i1 %v7_9d0c, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_9d00
  %v8_9d0c = load i32, i32* %sb.global-to-local, align 4
  %v9_9d10 = add i32 %v8_9d0c, 789
  store i32 %v9_9d10, i32* %r0.global-to-local, align 4
  %v8_9d14 = load i32, i32* @r5, align 4
  store i32 %v8_9d14, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_9d00, %bb245
  store i32 40220, i32* @lr, align 4
  %v3_9d18 = xor i1 %v6_9d08, %v5_9d08
  %v4_9d18 = or i1 %v7_9d08, %v3_9d18
  call void @__pseudo_cond_branch(i1 %v4_9d18, i32 ptrtoint (i32* @global_var_1206c.48 to i32))
  br label %dec_label_pc_9d1c

dec_label_pc_9d1c:                                ; preds = %dec_label_pc_9cf0, %.thread72
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9d20 = load i32, i32* %stack_var_-40, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  %v2_9d24 = add i32 %v3_9d20, 1
  %v1_9d28 = add i32 %v2_9d24, %v0_9d24
  store i32 %v1_9d28, i32* %r0.global-to-local, align 4
  %v1_9d2c = inttoptr i32 %v1_9d28 to i8*
  %v2_9d2c = call i32 @function_12044(i8* %v1_9d2c)
  store i32 %v2_9d2c, i32* %r0.global-to-local, align 4
  %v1_9d30 = add i32 %v2_9d2c, -255
  %v2_9d30 = icmp ugt i32 %v2_9d2c, 254
  store i1 %v2_9d30, i1* %cpsr_c.global-to-local, align 1
  %v3_9d30 = sub i32 254, %v2_9d2c
  %v4_9d30 = and i32 %v3_9d30, %v2_9d2c
  %v5_9d30 = icmp slt i32 %v4_9d30, 0
  store i1 %v5_9d30, i1* %cpsr_v.global-to-local, align 1
  %v6_9d30 = icmp slt i32 %v1_9d30, 0
  store i1 %v6_9d30, i1* %cpsr_n.global-to-local, align 1
  %v7_9d30 = icmp eq i32 %v2_9d2c, 255
  store i1 %v7_9d30, i1* %cpsr_z.global-to-local, align 1
  %v8_9d34 = icmp sgt i32 %v2_9d2c, 255
  br i1 %v8_9d34, label %dec_label_pc_9884, label %dec_label_pc_9d38

dec_label_pc_9d38:                                ; preds = %dec_label_pc_9d1c
  %v0_9d38 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d38, 533
  store i32 %v1_9d3c, i32* @r4, align 4
  store i32 %v1_9d3c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9d48 = call i32 @function_120e4(i32 %v1_9d3c, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9d50 = load i32, i32* %stack_var_-40, align 4
  %v0_9d54 = load i32, i32* @r5, align 4
  %v2_9d54 = add i32 %v3_9d50, 1
  %v1_9d58 = add i32 %v2_9d54, %v0_9d54
  store i32 %v1_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = inttoptr i32 %v1_9d58 to i8*
  %v2_9d5c = call i32 @function_12044(i8* %v1_9d5c)
  store i32 %v2_9d5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d60 = icmp slt i32 %v2_9d5c, 0
  store i1 %v1_9d60, i1* %cpsr_n.global-to-local, align 1
  %v2_9d60 = icmp eq i32 %v2_9d5c, 0
  store i1 %v2_9d60, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_9d5c, 1
  br i1 %tmp246, label %dec_label_pc_9884, label %dec_label_pc_9d68

dec_label_pc_9d68:                                ; preds = %dec_label_pc_9d38
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9d6c = load i32, i32* %stack_var_-40, align 4
  %v0_9d70 = load i32, i32* @r5, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* @r0, align 4
  %v2_9d70 = add i32 %v3_9d6c, 1
  %v1_9d78 = add i32 %v2_9d70, %v0_9d70
  store i32 %v1_9d78, i32* %r1.global-to-local, align 4
  %v2_9d7c = inttoptr i32 %v0_9d74 to i8*
  %v3_9d7c = call i32 @function_1206c(i8* %v2_9d7c, i32 %v1_9d78)
  store i32 %v3_9d7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9d84:                                ; preds = %dec_label_pc_95ec
  %v0_9d84 = load i32, i32* @r4, align 4
  %v1_9d84 = trunc i32 %v0_9d84 to i8
  %v2_9d84 = load i32, i32* @r8, align 4
  %v3_9d84 = add i32 %v2_9d84, -1452
  %v4_9d84 = inttoptr i32 %v3_9d84 to i8*
  store i8 %v1_9d84, i8* %v4_9d84, align 1
  br label %dec_label_pc_8838

dec_label_pc_9d8c:                                ; preds = %dec_label_pc_9804
  %v1_9d8c = add i32 %v0_9d8c, 1
  store i32 %v1_9d8c, i32* %ip.global-to-local, align 4
  %v2_9d90 = add i32 %v0_9804, %v1_9d8c
  store i32 %v2_9d90, i32* %r4.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v2_9d90, i32* %r0.global-to-local, align 4
  store i32 %v1_9d8c, i32* %stack_var_-40, align 4
  %v1_9da0 = inttoptr i32 %v2_9d90 to i8*
  %v2_9da0 = call i32 @function_12044(i8* %v1_9da0)
  store i32 %v2_9da0, i32* %r0.global-to-local, align 4
  %v0_9da4 = load i32, i32* %r4.global-to-local, align 4
  %v2_9da4 = add i32 %v0_9da4, %v2_9da0
  store i32 %v2_9da4, i32* @r4, align 4
  %v1_9da8 = add i32 %v2_9da4, -1
  %v2_9da8 = inttoptr i32 %v1_9da8 to i8*
  %v3_9da8 = load i8, i8* %v2_9da8, align 1
  %v4_9da8 = zext i8 %v3_9da8 to i32
  store i32 %v4_9da8, i32* %r3.global-to-local, align 4
  %v2_9dac = icmp ugt i8 %v3_9da8, 33
  store i1 %v2_9dac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9dac = icmp ult i8 %v3_9da8, 34
  store i1 %v6_9dac, i1* %cpsr_n.global-to-local, align 1
  %v7_9dac = icmp eq i8 %v3_9da8, 34
  store i1 %v7_9dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9dac, label %dec_label_pc_9db4, label %dec_label_pc_9810

dec_label_pc_9db4:                                ; preds = %dec_label_pc_9d8c
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9db8 = load i32, i32* %stack_var_-40, align 4
  %v0_9dbc = load i32, i32* @r6, align 4
  %v2_9dbc = add i32 %v0_9dbc, %v3_9db8
  store i32 %v2_9dbc, i32* %r4.global-to-local, align 4
  store i32 %v2_9dbc, i32* %r0.global-to-local, align 4
  %v1_9dc4 = inttoptr i32 %v2_9dbc to i8*
  %v2_9dc4 = call i32 @function_12044(i8* %v1_9dc4)
  store i32 %v2_9dc4, i32* %r0.global-to-local, align 4
  %v2_9dc8 = add i32 %v2_9dbc, %v2_9dc4
  store i32 %v2_9dc8, i32* @r4, align 4
  %v0_9dcc = load i32, i32* @r5, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i8
  %v3_9dcc = add i32 %v2_9dc8, -1
  %v4_9dcc = inttoptr i32 %v3_9dcc to i8*
  store i8 %v1_9dcc, i8* %v4_9dcc, align 1
  br label %dec_label_pc_9810

dec_label_pc_9dd4:                                ; preds = %dec_label_pc_9ccc, %bb243
  %v2_9dd8 = phi i32 [ %v1_9cbc, %bb243 ], [ %v2_9cdc, %dec_label_pc_9ccc ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i8*
  store i8 0, i8* %v3_9dd8, align 1
  br label %dec_label_pc_9cf0

dec_label_pc_9de0:                                ; preds = %dec_label_pc_9878
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  %v3_9de4 = load i32, i32* %stack_var_-40, align 4
  %v0_9de8 = load i32, i32* @r5, align 4
  %v2_9de8 = add i32 %v3_9de4, 1
  %v1_9dec = add i32 %v2_9de8, %v0_9de8
  store i32 %v1_9dec, i32* %r0.global-to-local, align 4
  %v1_9df0 = inttoptr i32 %v1_9dec to i8*
  %v2_9df0 = call i32 @function_12044(i8* %v1_9df0)
  store i32 %v2_9df0, i32* %r0.global-to-local, align 4
  %v1_9df4 = add i32 %v2_9df0, -255
  %v2_9df4 = icmp ugt i32 %v2_9df0, 254
  store i1 %v2_9df4, i1* %cpsr_c.global-to-local, align 1
  %v3_9df4 = sub i32 254, %v2_9df0
  %v4_9df4 = and i32 %v3_9df4, %v2_9df0
  %v5_9df4 = icmp slt i32 %v4_9df4, 0
  store i1 %v5_9df4, i1* %cpsr_v.global-to-local, align 1
  %v6_9df4 = icmp slt i32 %v1_9df4, 0
  store i1 %v6_9df4, i1* %cpsr_n.global-to-local, align 1
  %v7_9df4 = icmp eq i32 %v2_9df0, 255
  store i1 %v7_9df4, i1* %cpsr_z.global-to-local, align 1
  %v8_9df8 = icmp sgt i32 %v2_9df0, 255
  br i1 %v8_9df8, label %dec_label_pc_9884, label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9de0
  %v0_9dfc = load i32, i32* %sb.global-to-local, align 4
  %v1_9e00 = add i32 %v0_9dfc, 533
  store i32 %v1_9e00, i32* @r4, align 4
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9e0c = call i32 @function_120e4(i32 %v1_9e00, i32 255)
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9e14 = load i32, i32* %stack_var_-40, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v2_9e18 = add i32 %v3_9e14, 1
  %v1_9e1c = add i32 %v2_9e18, %v0_9e18
  store i32 %v1_9e1c, i32* %r0.global-to-local, align 4
  %v1_9e20 = inttoptr i32 %v1_9e1c to i8*
  %v2_9e20 = call i32 @function_12044(i8* %v1_9e20)
  store i32 %v2_9e20, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9e24 = icmp slt i32 %v2_9e20, 0
  store i1 %v1_9e24, i1* %cpsr_n.global-to-local, align 1
  %v2_9e24 = icmp eq i32 %v2_9e20, 0
  store i1 %v2_9e24, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_9e20, 1
  br i1 %tmp247, label %dec_label_pc_9884, label %dec_label_pc_9e2c

dec_label_pc_9e2c:                                ; preds = %dec_label_pc_9dfc
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9e30 = load i32, i32* %stack_var_-40, align 4
  %v0_9e34 = load i32, i32* @r5, align 4
  %v0_9e38 = load i32, i32* @r4, align 4
  store i32 %v0_9e38, i32* @r0, align 4
  %v2_9e34 = add i32 %v3_9e30, 1
  %v1_9e3c = add i32 %v2_9e34, %v0_9e34
  store i32 %v1_9e3c, i32* %r1.global-to-local, align 4
  %v2_9e40 = inttoptr i32 %v0_9e38 to i8*
  %v3_9e40 = call i32 @function_1206c(i8* %v2_9e40, i32 %v1_9e3c)
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9e48:                                ; preds = %dec_label_pc_84c8
  store i32 58, i32* %r0.global-to-local, align 4
  %v1_9e4c = call i32 @function_11590(i32 58)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 58, i32* %r0.global-to-local, align 4
  %v3_9e58 = call i32 @function_114ac(i32 58, i32* null)
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v0_9e60 = load i32, i32* @r5, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r0, align 4
  %v2_9e64 = inttoptr i32 %v1_9e60 to i8*
  %v3_9e64 = call i32 @function_1206c(i8* %v2_9e64, i32 %v3_9e58)
  store i32 58, i32* %r0.global-to-local, align 4
  %v1_9e6c = call i32 @function_114d8(i32 58)
  store i32 %v1_9e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_84c8, %dec_label_pc_9f58, %dec_label_pc_9f2c, %dec_label_pc_9f00, %dec_label_pc_9ed4, %dec_label_pc_9e48
  %v0_9e70 = load i32, i32* @sl, align 4
  store i32 %v0_9e70, i32* %r1.global-to-local, align 4
  store i32 %v0_840c, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v0_840c to i8*
  %v3_9e78 = call i32 @function_1206c(i8* %v2_9e78, i32 %v0_9e70)
  store i32 %v3_9e78, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r7, align 4
  %v1_9e80 = add i32 %v0_9e80, 1
  store i32 %v1_9e80, i32* @r7, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  %v2_9e88 = sub i32 %v0_839c, %v1_9e80
  %v3_9e88 = icmp uge i32 %v0_839c, %v1_9e80
  store i1 %v3_9e88, i1* %cpsr_c.global-to-local, align 1
  %v4_9e88 = xor i32 %v1_9e80, %v0_839c
  %v5_9e88 = xor i32 %v2_9e88, %v0_839c
  %v6_9e88 = and i32 %v5_9e88, %v4_9e88
  %v7_9e88 = icmp slt i32 %v6_9e88, 0
  store i1 %v7_9e88, i1* %cpsr_v.global-to-local, align 1
  %v8_9e88 = icmp slt i32 %v2_9e88, 0
  store i1 %v8_9e88, i1* %cpsr_n.global-to-local, align 1
  %v9_9e88 = icmp eq i32 %v0_839c, %v1_9e80
  store i1 %v9_9e88, i1* %cpsr_z.global-to-local, align 1
  %v1_9e8c = add i32 %v0_9e84, 3140
  store i32 %v1_9e8c, i32* @r5, align 4
  br i1 %v9_9e88, label %dec_label_pc_9e94, label %dec_label_pc_83cc

dec_label_pc_9e94:                                ; preds = %dec_label_pc_9e70
  %v1_9ea0 = add i32 %v2_83b0, 1456
  %v0_9ea8 = load i32, i32* %r8.global-to-local, align 4
  %v1_9ea8 = urem i32 %v0_9ea8, 256
  store i32 %v1_9ea8, i32* %ip.global-to-local, align 4
  %v1_9eac = add i32 %v2_83b0, 1464
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v2_9eb0 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_9eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ea0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_9ed4:                                ; preds = %dec_label_pc_84c8
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_9ed8 = call i32 @function_11590(i32 54)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 54, i32* %r0.global-to-local, align 4
  %v3_9ee4 = call i32 @function_114ac(i32 54, i32* null)
  store i32 %v3_9ee4, i32* %r1.global-to-local, align 4
  %v0_9eec = load i32, i32* @r5, align 4
  %v1_9eec = add i32 %v0_9eec, 20
  store i32 %v1_9eec, i32* @r0, align 4
  %v2_9ef0 = inttoptr i32 %v1_9eec to i8*
  %v3_9ef0 = call i32 @function_1206c(i8* %v2_9ef0, i32 %v3_9ee4)
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_114d8(i32 54)
  store i32 %v1_9ef8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f00:                                ; preds = %dec_label_pc_84c8
  store i32 55, i32* %r0.global-to-local, align 4
  %v1_9f04 = call i32 @function_11590(i32 55)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 55, i32* %r0.global-to-local, align 4
  %v3_9f10 = call i32 @function_114ac(i32 55, i32* null)
  store i32 %v3_9f10, i32* %r1.global-to-local, align 4
  %v0_9f18 = load i32, i32* @r5, align 4
  %v1_9f18 = add i32 %v0_9f18, 20
  store i32 %v1_9f18, i32* @r0, align 4
  %v2_9f1c = inttoptr i32 %v1_9f18 to i8*
  %v3_9f1c = call i32 @function_1206c(i8* %v2_9f1c, i32 %v3_9f10)
  store i32 55, i32* %r0.global-to-local, align 4
  %v1_9f24 = call i32 @function_114d8(i32 55)
  store i32 %v1_9f24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f2c:                                ; preds = %dec_label_pc_84c8
  store i32 56, i32* %r0.global-to-local, align 4
  %v1_9f30 = call i32 @function_11590(i32 56)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r0.global-to-local, align 4
  %v3_9f3c = call i32 @function_114ac(i32 56, i32* null)
  store i32 %v3_9f3c, i32* %r1.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  %v1_9f44 = add i32 %v0_9f44, 20
  store i32 %v1_9f44, i32* @r0, align 4
  %v2_9f48 = inttoptr i32 %v1_9f44 to i8*
  %v3_9f48 = call i32 @function_1206c(i8* %v2_9f48, i32 %v3_9f3c)
  store i32 56, i32* %r0.global-to-local, align 4
  %v1_9f50 = call i32 @function_114d8(i32 56)
  store i32 %v1_9f50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f58:                                ; preds = %dec_label_pc_84c8
  store i32 57, i32* %r0.global-to-local, align 4
  %v1_9f5c = call i32 @function_11590(i32 57)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 57, i32* %r0.global-to-local, align 4
  %v3_9f68 = call i32 @function_114ac(i32 57, i32* null)
  store i32 %v3_9f68, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r5, align 4
  %v1_9f70 = add i32 %v0_9f70, 20
  store i32 %v1_9f70, i32* @r0, align 4
  %v2_9f74 = inttoptr i32 %v1_9f70 to i8*
  %v3_9f74 = call i32 @function_1206c(i8* %v2_9f74, i32 %v3_9f68)
  store i32 57, i32* %r0.global-to-local, align 4
  %v1_9f7c = call i32 @function_114d8(i32 57)
  store i32 %v1_9f7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

; uselistorder directives
  uselistorder i32 %v2_9eb0, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e8c, { 1, 0 }
  uselistorder i32 %v2_9e88, { 1, 0 }
  uselistorder i32 %v1_9e80, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9df0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9d8c, { 1, 0, 2 }
  uselistorder i32 %v2_9d2c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9d04, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9ce8, { 1, 0 }
  uselistorder i8 %v4_9cdc, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_9ce4, { 1, 0, 2 }
  uselistorder i1 %v7_9ccc, { 1, 0 }
  uselistorder i32 %v1_9cbc, { 1, 0, 2 }
  uselistorder i1 %v7_9cb8, { 1, 0 }
  uselistorder i1 %v9_9cb0, { 1, 0 }
  uselistorder i32 %v2_9c90, { 1, 0 }
  uselistorder i32 %v0_9c74, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9c10, { 1, 0, 2 }
  uselistorder i32 %v1_9c08, { 1, 0, 2 }
  uselistorder i32 %v2_9bc0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9b94, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_9b18, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_9afc, { 1, 0, 2 }
  uselistorder i32 %v4_9af4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9abc, { 1, 0 }
  uselistorder i32 %v1_9abc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_9abc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9a24, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_99fc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_99dc, { 1, 0 }
  uselistorder i8 %v4_99d4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_99dc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99c0, { 1, 0 }
  uselistorder i32 %v1_99b0, { 1, 0, 2 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v0_996c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9950, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_986c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9840, { 1, 0 }
  uselistorder i32 %v1_9840, { 2, 0, 1, 3 }
  uselistorder i32 %v2_983c, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_981c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9804, { 1, 0 }
  uselistorder i32 %v0_9d8c, { 1, 0 }
  uselistorder i32 %v1_97c0, { 1, 2, 0 }
  uselistorder i32 %v5_97bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97a8, { 1, 0 }
  uselistorder i32 %v2_979c, { 1, 0, 2 }
  uselistorder i32 %v1_9760, { 0, 2, 1 }
  uselistorder i32 %v1_9750, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_973c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_96f8, { 1, 2, 0 }
  uselistorder i32 %v5_96f4, { 1, 3, 2, 5, 8, 9, 7, 6, 4, 0, 11, 10, 12 }
  uselistorder i32 %v2_96dc.v4_96bc, { 1, 0, 2 }
  uselistorder i32 %v1_9698, { 1, 2, 0 }
  uselistorder i32 %v4_9690, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9650, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9648, { 1, 2, 0 }
  uselistorder i32 %v5_963c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_95c8, { 1, 2, 0 }
  uselistorder i32 %v4_95c4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_95a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_958c, { 1, 2, 0 }
  uselistorder i32 %v5_9588, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9570, { 1, 0 }
  uselistorder i32 %v2_9568, { 1, 2, 0 }
  uselistorder i32 %v4_9564, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9528, { 2, 1, 0 }
  uselistorder i32 %v3_951c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_94fc, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_94fc, { 1, 0 }
  uselistorder i32 %v0_94fc, { 1, 0 }
  uselistorder i32 %v3_94e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_94d8, { 1, 2, 0 }
  uselistorder i32 %v0_94c0, { 0, 2, 1 }
  uselistorder i32 %v3_94a0, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_9478, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_9458, { 1, 2, 0 }
  uselistorder i32 %v5_944c, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_9418, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9410, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_93e4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_93c4, { 1, 0, 2 }
  uselistorder i32 %v1_93a0, { 1, 2, 0 }
  uselistorder i32 %v5_939c, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_9384.v4_9364, { 1, 0, 2 }
  uselistorder i32 %v1_9344, { 1, 2, 0 }
  uselistorder i32 %v4_9340, { 0, 2, 1, 3 }
  uselistorder i32 %v2_92f0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_92ec, { 1, 0 }
  uselistorder i32 %v0_92d4, { 1, 0 }
  uselistorder i32 %v0_92d8, { 1, 0 }
  uselistorder i32 %v2_92b4, { 1, 0 }
  uselistorder i32 %v1_92b0, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_92ac, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_927c, { 1, 0 }
  uselistorder i1 %v7_9244, { 0, 2, 1 }
  uselistorder i32 %v1_9268, { 1, 0 }
  uselistorder i32 %v2_9264, { 1, 0 }
  uselistorder i32 %v3_9260, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9258, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9254, { 1, 0 }
  uselistorder i32 %v1_91c4, { 1, 2, 0 }
  uselistorder i32 %v5_91c0, { 1, 8, 3, 6, 7, 5, 4, 2, 0, 10, 9, 11 }
  uselistorder i32 %v2_91a8, { 1, 0, 2 }
  uselistorder i32 %v2_91a4, { 1, 0, 2 }
  uselistorder i32 %v0_9188, { 0, 2, 1 }
  uselistorder i32 %v4_9180, { 1, 2, 0, 3 }
  uselistorder i32 %v3_915c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9150, { 1, 2, 0 }
  uselistorder i32 %v4_9148, { 0, 2, 1, 3 }
  uselistorder i32 %v1_90e4, { 1, 2, 0 }
  uselistorder i32 %v5_90e0, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_90c8.v4_90a8, { 1, 0, 2 }
  uselistorder i32 %v1_9078, { 1, 2, 0 }
  uselistorder i32 %v4_9074, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v5_8ff8, { 1, 9, 8, 3, 6, 7, 5, 4, 2, 0, 11, 10, 12 }
  uselistorder i32 %v2_8fe0.v4_8fc0, { 1, 0, 2 }
  uselistorder i32 %v1_8f9c, { 1, 2, 0 }
  uselistorder i32 %v4_8f94, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8f14, { 1, 2, 0 }
  uselistorder i32 %v5_8f10, { 1, 2, 9, 4, 7, 8, 6, 5, 3, 0, 11, 10, 12 }
  uselistorder i32 %v2_8ef8.v4_8ed8, { 1, 0, 2 }
  uselistorder i32 %v1_8eb8, { 1, 2, 0 }
  uselistorder i32 %v4_8eb4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e8c, { 1, 2, 0 }
  uselistorder i32 %v4_8e88, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e64, { 1, 2, 0 }
  uselistorder i32 %v4_8e60, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9914, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_8e18, { 1, 2, 0 }
  uselistorder i32 %v5_8e14, { 0, 2, 1, 3 }
  uselistorder i32 %v5_8df0, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_8d78, { 0, 2, 1 }
  uselistorder i32 %v2_8d6c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_8d60, { 1, 0 }
  uselistorder i32 %v2_8d54, { 1, 0 }
  uselistorder i32 %v0_8d54, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8d4c, { 1, 0 }
  uselistorder i32 %v1_8d54, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8d30, { 1, 0, 2 }
  uselistorder i32 %v1_8d28, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v0_8d10, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_8cec, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_8c54, { 1, 0 }
  uselistorder i32 %v1_8c50, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_8c4c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_8af4, { 1, 0 }
  uselistorder i32 %v1_8af4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8880, { 2, 1, 0 }
  uselistorder i32 %v3_887c, { 1, 0 }
  uselistorder i32 %v1_885c, { 1, 2, 0 }
  uselistorder i32 %v3_8858, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_8848, { 1, 0 }
  uselistorder i32 %v1_8840, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_8830, { 1, 0 }
  uselistorder i1 %v7_8828, { 1, 0 }
  uselistorder i32 %v1_880c, { 2, 1, 0 }
  uselistorder i32 %v3_8808, { 1, 0 }
  uselistorder i32 %v0_880c, { 1, 0 }
  uselistorder i32 %v2_87dc, { 1, 0 }
  uselistorder i32 %v1_87dc, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_87dc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_87d8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_87c4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8784, { 1, 0 }
  uselistorder i32 %v2_877c, { 1, 0 }
  uselistorder i32 %v1_8770, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_875c, { 1, 0 }
  uselistorder i32 %v0_875c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_875c, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8744, { 1, 0 }
  uselistorder i32 %v3_8738, { 1, 0, 2 }
  uselistorder i32 %v0_86f4, { 1, 0, 2 }
  uselistorder i32 %v1_8698, { 1, 2, 0 }
  uselistorder i32 %v3_8694, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_8670, { 1, 2, 0 }
  uselistorder i32 %v3_8664, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8650, { 1, 0 }
  uselistorder i8 %v3_8650, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8650, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8900, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v1_8634, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_8610, { 1, 0 }
  uselistorder i32 %v1_8610, { 1, 0 }
  uselistorder i1 %v7_8608, { 1, 0 }
  uselistorder i32 %v4_85ec, { 1, 0, 2 }
  uselistorder i1 %v7_85e8, { 1, 0 }
  uselistorder i32 %v4_85cc, { 1, 0, 2 }
  uselistorder i1 %v7_85c8, { 1, 0 }
  uselistorder i1 %v7_85c0, { 1, 0 }
  uselistorder i1 %v7_85b8, { 1, 0 }
  uselistorder i32 %v2_85dc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8594248, { 1, 0 }
  uselistorder i32 %v5_8590, { 1, 0 }
  uselistorder i8* %v1_8940, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8748, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_86d0, { 1, 0 }
  uselistorder i32 %v3_9eb8, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_8500, { 1, 0 }
  uselistorder i32 %v0_8500, { 1, 0 }
  uselistorder i32 %v2_84d0, { 2, 1, 3, 0, 5, 4, 6 }
  uselistorder i32 %v2_84c0, { 1, 0 }
  uselistorder i32 %v8_84a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v0_840c, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b0, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_839c, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_8390, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8320, { 1, 0, 2 }
  uselistorder i32 %v1_831c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_830c, { 1, 0 }
  uselistorder i32 %v3_8308, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8300, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_82f4, { 1, 0, 2 }
  uselistorder i32 %v10_82f0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_82e8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82d8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82c8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_82a8, { 1, 0 }
  uselistorder i32 %v0_82a4, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_8280, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_8278, { 1, 0 }
  uselistorder i32 %v6_8200, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_81e4, { 2, 1, 0 }
  uselistorder i32 %v1_81d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 13, 14, 15, 6, 7, 8, 9, 12, 10, 11, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 6, 5, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 12, 10, 11, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 21, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 145, 146, 147, 148, 97, 98, 99, 100, 104, 101, 102, 103, 105, 106, 109, 110, 107, 108, 111, 113, 112, 114, 115, 116, 117, 118, 123, 119, 120, 121, 122, 124, 126, 125, 3, 128, 127, 2, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 163, 144, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 106, 107, 108, 109, 110, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 103, 104, 105, 70, 71, 72, 73, 74, 77, 78, 75, 76, 79, 80, 81, 82, 83, 84, 85, 87, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 171, 25, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 162, 163, 165, 164, 166, 167, 168, 169, 170, 172, 33, 34, 9, 35, 36, 37, 38, 41, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 155, 156, 157, 158, 159, 160, 161, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 121, 123, 124, 126, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 153, 0 }
  uselistorder i32* %r0.global-to-local, { 12, 11, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 204, 34, 143, 206, 74, 40, 35, 37, 36, 38, 41, 39, 43, 42, 45, 44, 46, 48, 47, 49, 52, 50, 51, 54, 53, 57, 55, 56, 58, 59, 60, 62, 61, 63, 64, 65, 67, 66, 68, 70, 69, 72, 71, 73, 76, 75, 78, 77, 79, 81, 80, 330, 329, 6, 332, 331, 333, 336, 334, 335, 338, 337, 5, 339, 340, 10, 342, 341, 9, 343, 4, 344, 345, 347, 346, 82, 84, 83, 85, 86, 87, 3, 89, 88, 91, 90, 92, 94, 93, 95, 96, 97, 99, 98, 101, 100, 102, 104, 103, 105, 107, 106, 109, 108, 110, 111, 114, 112, 113, 115, 117, 116, 118, 120, 119, 122, 121, 123, 124, 125, 127, 126, 128, 130, 129, 132, 131, 134, 133, 135, 137, 136, 138, 139, 141, 140, 2, 142, 145, 144, 147, 146, 149, 148, 152, 150, 151, 154, 153, 155, 157, 156, 158, 1, 159, 161, 160, 163, 162, 164, 166, 165, 167, 169, 168, 170, 171, 173, 172, 175, 174, 176, 178, 177, 179, 181, 180, 182, 183, 185, 184, 187, 186, 188, 190, 189, 191, 193, 192, 194, 8, 195, 196, 197, 199, 198, 201, 200, 209, 202, 203, 275, 205, 207, 208, 7, 210, 211, 213, 212, 214, 215, 216, 217, 218, 219, 222, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 256, 258, 259, 260, 261, 263, 262, 264, 265, 266, 33, 267, 32, 268, 270, 269, 30, 31, 272, 271, 280, 273, 274, 276, 278, 277, 279, 220, 281, 29, 283, 282, 27, 284, 285, 286, 287, 28, 288, 26, 289, 290, 291, 293, 292, 294, 295, 296, 298, 297, 299, 300, 301, 303, 302, 305, 304, 307, 306, 309, 308, 311, 310, 312, 313, 314, 315, 316, 317, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 27, 28, 29, 30, 31, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 26, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 54, 55, 56, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 52, 53, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0, 45, 46, 47, 48, 49, 50, 51 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 6, 4, 3, 28, 7, 8, 9, 2, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 141, 142, 143, 144, 146, 145, 147, 148, 149, 150, 151, 152, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 139, 140, 97, 99, 98, 100, 101, 102, 107, 109, 108, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 123, 124, 116, 117, 118, 119, 120, 121, 122, 125, 0, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 134, 135, 136, 137, 139, 138, 140, 141, 142, 143, 144, 145, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 50, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 132, 133, 97, 98, 103, 102, 99, 100, 101, 104, 105, 106, 107, 108, 109, 117, 118, 110, 111, 112, 113, 114, 115, 116, 119, 0, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 137, 138, 139, 140, 142, 141, 143, 144, 145, 146, 147, 148, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 50, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 135, 136, 97, 98, 99, 104, 106, 105, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 120, 121, 113, 114, 115, 116, 117, 118, 119, 122, 0, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 153, 154, 155, 156, 158, 157, 159, 160, 161, 162, 163, 164, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 150, 151, 152, 103, 104, 109, 111, 110, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 128, 129, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 0, 135, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149 }
  uselistorder i32 ptrtoint (i32* @global_var_15110.50 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15100.45 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_150f8.43 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_150f4.41 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_150ec.39 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 (i8*, i32)* @function_12424, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_150cc.27 to i32), { 0, 2, 1, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_150d4.21 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9e70, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9d1c, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_9cf0, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_9b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9a14, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_9884, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9838, { 1, 0 }
  uselistorder label %dec_label_pc_9810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9804, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_965c, { 1, 0 }
  uselistorder label %dec_label_pc_95ec, { 1, 0 }
  uselistorder label %dec_label_pc_94c0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_9498, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9430, { 1, 2, 0 }
  uselistorder label %dec_label_pc_9400, { 7, 2, 3, 1, 8, 5, 6, 0, 4 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_9284, { 1, 0 }
  uselistorder label %dec_label_pc_927c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9254, { 1, 0 }
  uselistorder label %dec_label_pc_9214, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9124, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_8e20, { 1, 0 }
  uselistorder label %dec_label_pc_8d48, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8ccc, { 1, 0 }
  uselistorder label %dec_label_pc_8cb4, { 1, 0 }
  uselistorder label %dec_label_pc_8c78, { 1, 0 }
  uselistorder label %dec_label_pc_8c04, { 1, 0 }
  uselistorder label %dec_label_pc_8bcc, { 1, 0 }
  uselistorder label %dec_label_pc_890c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_88dc, { 1, 0 }
  uselistorder label %dec_label_pc_8838, { 7, 8, 2, 9, 1, 13, 6, 14, 15, 10, 0, 11, 12, 5, 3, 4 }
  uselistorder label %dec_label_pc_8630, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_855c.dec_label_pc_855c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_853c.dec_label_pc_853c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8528, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8528.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_84c8, { 1, 0 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 1, 0 }
  uselistorder label %dec_label_pc_82b8, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f84(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f84:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9f84 = urem i32 %arg1, 256
  %v2_9f88 = icmp eq i32 %v1_9f84, 0
  %v1_9f90 = urem i32 %arg3, 256
  br i1 %v2_9f88, label %dec_label_pc_9fd4, label %dec_label_pc_9f9c

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84
  %v0_9f9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9f9c = add i32 %v0_9f9c, 4
  %v2_9f9c = inttoptr i32 %v1_9f9c to i8*
  %v3_9f9c = load i8, i8* %v2_9f9c, align 1
  %v4_9f9c = zext i8 %v3_9f9c to i32
  %v9_9fa0 = icmp eq i32 %v4_9f9c, %v1_9f90
  br i1 %v9_9fa0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.preheader

dec_label_pc_9fc4.preheader:                      ; preds = %dec_label_pc_9f9c
  br label %dec_label_pc_9fc4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fc4
  %v1_9fb4 = add i32 %v0_9fbc.in, 12
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i8*
  %v3_9fb4 = load i8, i8* %v2_9fb4, align 1
  %v4_9fb4 = zext i8 %v3_9fb4 to i32
  %v9_9fb8 = icmp eq i32 %v4_9fb4, %v1_9f90
  br i1 %v9_9fb8, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fc4.preheader, %dec_label_pc_9fb4
  %v0_9fbc.in = phi i32 [ %v0_9f9c, %dec_label_pc_9fc4.preheader ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v0_9fc4 = phi i32 [ 0, %dec_label_pc_9fc4.preheader ], [ %v1_9fc4, %dec_label_pc_9fb4 ]
  %v0_9fbc = add i32 %v0_9fbc.in, 8
  %v1_9fc4 = add i32 %v0_9fc4, 1
  store i32 %v1_9fc4, i32* @lr, align 4
  %v9_9fc8 = icmp eq i32 %v1_9fc4, %v1_9f84
  store i32 %v0_9fbc, i32* %r1.global-to-local, align 4
  br i1 %v9_9fc8, label %dec_label_pc_9fd4, label %dec_label_pc_9fb4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9f84
  ret i32 %arg4

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fb4, %dec_label_pc_9f9c
  %v0_9fdc = phi i32 [ %v0_9f9c, %dec_label_pc_9f9c ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v1_9fdc = inttoptr i32 %v0_9fdc to i32*
  %v2_9fdc = load i32, i32* %v1_9fdc, align 4
  ret i32 %v2_9fdc

; uselistorder directives
  uselistorder i32 %v1_9fc4, { 1, 2, 0 }
  uselistorder i32 %v0_9fbc, { 1, 0, 2 }
  uselistorder i32 %v0_9fbc.in, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0, 2 }
  uselistorder i32 %v1_9f90, { 1, 0 }
  uselistorder i32 %v1_9f84, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9fc4, { 1, 0 }
}

define i32 @function_9fe8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9fe8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9fe8 = urem i32 %arg1, 256
  %v2_9fec = icmp eq i32 %v1_9fe8, 0
  %v3_9ff0 = load i32, i32* @r4, align 4
  br i1 %v2_9fec, label %dec_label_pc_a038, label %dec_label_pc_9ffc

dec_label_pc_9ffc:                                ; preds = %dec_label_pc_9fe8
  %v0_9ffc = load i32, i32* %r1.global-to-local, align 4
  %v1_9ffc = add i32 %v0_9ffc, 4
  %v2_9ffc = inttoptr i32 %v1_9ffc to i8*
  %v3_9ffc = load i8, i8* %v2_9ffc, align 1
  %v4_9ffc = zext i8 %v3_9ffc to i32
  %v1_a000 = urem i32 %arg3, 256
  %v9_a004 = icmp eq i32 %v4_9ffc, %v1_a000
  br i1 %v9_a004, label %dec_label_pc_a040, label %dec_label_pc_a028.preheader

dec_label_pc_a028.preheader:                      ; preds = %dec_label_pc_9ffc
  br label %dec_label_pc_a028

dec_label_pc_a018:                                ; preds = %dec_label_pc_a028
  %v1_a018 = add i32 %v0_a020.in, 12
  %v2_a018 = inttoptr i32 %v1_a018 to i8*
  %v3_a018 = load i8, i8* %v2_a018, align 1
  %v4_a018 = zext i8 %v3_a018 to i32
  %v9_a01c = icmp eq i32 %v1_a000, %v4_a018
  br i1 %v9_a01c, label %dec_label_pc_a040, label %dec_label_pc_a028

dec_label_pc_a028:                                ; preds = %dec_label_pc_a028.preheader, %dec_label_pc_a018
  %v0_a020.in = phi i32 [ %v0_9ffc, %dec_label_pc_a028.preheader ], [ %v0_a020, %dec_label_pc_a018 ]
  %v0_a028 = phi i32 [ 0, %dec_label_pc_a028.preheader ], [ %v1_a028, %dec_label_pc_a018 ]
  %v0_a020 = add i32 %v0_a020.in, 8
  %v1_a028 = add i32 %v0_a028, 1
  %v9_a02c = icmp eq i32 %v1_9fe8, %v1_a028
  store i32 %v0_a020, i32* %r1.global-to-local, align 4
  br i1 %v9_a02c, label %dec_label_pc_a038, label %dec_label_pc_a018

dec_label_pc_a038:                                ; preds = %dec_label_pc_a028, %dec_label_pc_a040, %dec_label_pc_9fe8
  store i32 %v3_9ff0, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a040:                                ; preds = %dec_label_pc_a018, %dec_label_pc_9ffc
  %v0_a040 = phi i32 [ %v0_9ffc, %dec_label_pc_9ffc ], [ %v0_a020, %dec_label_pc_a018 ]
  %v1_a040 = inttoptr i32 %v0_a040 to i32*
  %v2_a040 = load i32, i32* %v1_a040, align 4
  store i32 %v2_a040, i32* @r0, align 4
  %v2_a044 = icmp eq i32 %v2_a040, 0
  br i1 %v2_a044, label %dec_label_pc_a038, label %dec_label_pc_a04c

dec_label_pc_a04c:                                ; preds = %dec_label_pc_a040
  store i32 %v3_9ff0, i32* @r4, align 4
  %v1_a050 = call i32 @function_1309c(i32 %v2_a040)
  ret i32 %v1_a050

; uselistorder directives
  uselistorder i32 %v1_a028, { 1, 0 }
  uselistorder i32 %v0_a020, { 1, 0, 2 }
  uselistorder i32 %v0_a020.in, { 1, 0 }
  uselistorder i32 %v1_a000, { 1, 0 }
  uselistorder i32 %v0_9ffc, { 1, 0, 2 }
  uselistorder i32 %v3_9ff0, { 1, 0 }
  uselistorder i32 %v1_9fe8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a038, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a028, { 1, 0 }
}

define i32 @function_a054(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a054:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a054 = urem i32 %arg1, 256
  %v2_a058 = icmp eq i32 %v1_a054, 0
  %v3_a05c = load i32, i32* @r4, align 4
  %v6_a05c = load i32, i32* @lr, align 4
  br i1 %v2_a058, label %dec_label_pc_a0a4, label %dec_label_pc_a068

dec_label_pc_a068:                                ; preds = %dec_label_pc_a054
  %v0_a068 = load i32, i32* %r1.global-to-local, align 4
  %v1_a068 = add i32 %v0_a068, 4
  %v2_a068 = inttoptr i32 %v1_a068 to i8*
  %v3_a068 = load i8, i8* %v2_a068, align 1
  %v4_a068 = zext i8 %v3_a068 to i32
  %v1_a06c = urem i32 %arg3, 256
  %v9_a070 = icmp eq i32 %v4_a068, %v1_a06c
  br i1 %v9_a070, label %dec_label_pc_a0ac, label %dec_label_pc_a094.preheader

dec_label_pc_a094.preheader:                      ; preds = %dec_label_pc_a068
  br label %dec_label_pc_a094

dec_label_pc_a084:                                ; preds = %dec_label_pc_a094
  %v1_a084 = add i32 %v0_a08c.in, 12
  %v2_a084 = inttoptr i32 %v1_a084 to i8*
  %v3_a084 = load i8, i8* %v2_a084, align 1
  %v4_a084 = zext i8 %v3_a084 to i32
  %v9_a088 = icmp eq i32 %v1_a06c, %v4_a084
  br i1 %v9_a088, label %dec_label_pc_a0ac, label %dec_label_pc_a094

dec_label_pc_a094:                                ; preds = %dec_label_pc_a094.preheader, %dec_label_pc_a084
  %v0_a08c.in = phi i32 [ %v0_a068, %dec_label_pc_a094.preheader ], [ %v0_a08c, %dec_label_pc_a084 ]
  %v0_a094 = phi i32 [ 0, %dec_label_pc_a094.preheader ], [ %v1_a094, %dec_label_pc_a084 ]
  %v0_a08c = add i32 %v0_a08c.in, 8
  %v1_a094 = add i32 %v0_a094, 1
  store i32 %v1_a094, i32* @lr, align 4
  %v9_a098 = icmp eq i32 %v1_a054, %v1_a094
  store i32 %v0_a08c, i32* %r1.global-to-local, align 4
  br i1 %v9_a098, label %dec_label_pc_a0a4, label %dec_label_pc_a084

dec_label_pc_a0a4:                                ; preds = %dec_label_pc_a094, %dec_label_pc_a0ac, %dec_label_pc_a054
  store i32 %v3_a05c, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a0ac:                                ; preds = %dec_label_pc_a084, %dec_label_pc_a068
  %v0_a0ac = phi i32 [ %v0_a068, %dec_label_pc_a068 ], [ %v0_a08c, %dec_label_pc_a084 ]
  %v1_a0ac = inttoptr i32 %v0_a0ac to i32*
  %v2_a0ac = load i32, i32* %v1_a0ac, align 4
  %v2_a0b0 = icmp eq i32 %v2_a0ac, 0
  br i1 %v2_a0b0, label %dec_label_pc_a0a4, label %dec_label_pc_a0b8

dec_label_pc_a0b8:                                ; preds = %dec_label_pc_a0ac
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_a05c, i32* @r4, align 4
  store i32 %v6_a05c, i32* @lr, align 4
  %v2_a0c0 = inttoptr i32 %v2_a0ac to i8*
  %v3_a0c0 = call i32 @function_12170(i8* %v2_a0c0, i32 10)
  ret i32 %v3_a0c0

; uselistorder directives
  uselistorder i32 %v1_a094, { 1, 2, 0 }
  uselistorder i32 %v0_a08c, { 1, 0, 2 }
  uselistorder i32 %v0_a08c.in, { 1, 0 }
  uselistorder i32 %v1_a06c, { 1, 0 }
  uselistorder i32 %v0_a068, { 1, 0, 2 }
  uselistorder i32 %v3_a05c, { 1, 0 }
  uselistorder i32 %v1_a054, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a0a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a094, { 1, 0 }
}

define i32 @function_a0c4(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a0c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_a0c4 = load i32, i32* @r4, align 4
  %v6_a0c4 = load i32, i32* @r5, align 4
  %v9_a0c4 = load i32, i32* @r6, align 4
  %v12_a0c4 = load i32, i32* @r7, align 4
  %v15_a0c4 = load i32, i32* @r8, align 4
  %v18_a0c4 = load i32, i32* @sb, align 4
  %v21_a0c4 = load i32, i32* @sl, align 4
  %v24_a0c4 = load i32, i32* @fp, align 4
  %v27_a0c4 = load i32, i32* @lr, align 4
  %v7_a0c8 = icmp eq i32 %arg2, 3
  store i1 %v7_a0c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_a0d4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a0d4, i32* @r4, align 4
  %tmp47 = icmp ult i32 %arg2, 4
  br i1 %tmp47, label %dec_label_pc_a0e8, label %dec_label_pc_a0dc

dec_label_pc_a0dc:                                ; preds = %dec_label_pc_a0c4
  %v7_a0dc = icmp eq i32 %arg2, 4
  store i1 %v7_a0dc, i1* %cpsr_z.global-to-local, align 1
  %v1_a0e0 = inttoptr i32 %v0_a0d4 to i32*
  %v2_a0e0 = load i32, i32* %v1_a0e0, align 4
  store i32 %v2_a0e0, i32* %sl.global-to-local, align 4
  br i1 %v7_a0dc, label %dec_label_pc_a0e8, label %dec_label_pc_a0f0

dec_label_pc_a0e8:                                ; preds = %dec_label_pc_a10c, %.dec_label_pc_a0e8_crit_edge, %dec_label_pc_a0dc, %dec_label_pc_a100, %dec_label_pc_a0f0, %dec_label_pc_a0c4
  %v29_a0ec = phi i32 [ %v29_a0ec.pre, %.dec_label_pc_a0e8_crit_edge ], [ %v0_a0d4, %dec_label_pc_a10c ], [ %v0_a0d4, %dec_label_pc_a0dc ], [ %v0_a0d4, %dec_label_pc_a100 ], [ %v0_a0d4, %dec_label_pc_a0f0 ], [ %v0_a0d4, %dec_label_pc_a0c4 ]
  store i32 %v3_a0c4, i32* %r4.global-to-local, align 4
  store i32 %v9_a0c4, i32* @r6, align 4
  store i32 %v12_a0c4, i32* @r7, align 4
  store i32 %v18_a0c4, i32* @sb, align 4
  store i32 %v21_a0c4, i32* @sl, align 4
  store i32 %v24_a0c4, i32* @fp, align 4
  ret i32 %v29_a0ec

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0dc
  %v7_a0f0 = icmp eq i32 %arg2, 5
  store i1 %v7_a0f0, i1* %cpsr_z.global-to-local, align 1
  %v1_a0f4 = add i32 %v0_a0d4, 4
  %v2_a0f4 = inttoptr i32 %v1_a0f4 to i8*
  %v3_a0f4 = load i8, i8* %v2_a0f4, align 1
  %v4_a0f4 = zext i8 %v3_a0f4 to i32
  store i32 %v4_a0f4, i32* %r1.global-to-local, align 4
  br i1 %v7_a0f0, label %dec_label_pc_a0e8, label %dec_label_pc_a100

dec_label_pc_a100:                                ; preds = %dec_label_pc_a0f0
  %v1_a100 = add i32 %v0_a0d4, 5
  %v2_a100 = inttoptr i32 %v1_a100 to i8*
  %v3_a100 = load i8, i8* %v2_a100, align 1
  %v4_a100 = zext i8 %v3_a100 to i32
  store i32 %v4_a100, i32* @r8, align 4
  %v2_a104 = icmp eq i8 %v3_a100, 0
  store i1 %v2_a104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a104, label %dec_label_pc_a0e8, label %dec_label_pc_a10c

dec_label_pc_a10c:                                ; preds = %dec_label_pc_a100
  %v3_a10c = mul nuw nsw i32 %v4_a100, 4
  store i32 %v3_a10c, i32* %sb.global-to-local, align 4
  %v1_a110 = add i32 %arg2, -6
  store i32 %v1_a110, i32* @r6, align 4
  %v2_a114 = mul nuw nsw i32 %v4_a100, 5
  store i32 %v2_a114, i32* @r7, align 4
  %v3_a118 = icmp ult i32 %v1_a110, %v2_a114
  %v9_a118 = icmp eq i32 %v1_a110, %v2_a114
  store i1 %v9_a118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a118, label %dec_label_pc_a0e8, label %dec_label_pc_a120

dec_label_pc_a120:                                ; preds = %dec_label_pc_a10c
  store i32 %v4_a100, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_a128 = call i32 @function_135a8(i32 %v4_a100, i32 24)
  store i32 %v2_a128, i32* %r0.global-to-local, align 4
  %v0_a12c = load i32, i32* @r8, align 4
  %v2_a12c = icmp eq i32 %v0_a12c, 0
  store i1 %v2_a12c, i1* %cpsr_z.global-to-local, align 1
  %v0_a134 = load i32, i32* @r4, align 4
  %v1_a134 = add i32 %v0_a134, 6
  store i32 %v1_a134, i32* %fp.global-to-local, align 4
  %tmp36 = icmp slt i32 %v0_a12c, 1
  br i1 %tmp36, label %dec_label_pc_a18cthread-pre-split, label %dec_label_pc_a13c

dec_label_pc_a13c:                                ; preds = %dec_label_pc_a120
  store i32 %v2_a128, i32* %r1.global-to-local, align 4
  %v1_a140 = load i32, i32* @r7, align 4
  %v2_a140 = add i32 %v1_a140, %v0_a134
  store i32 %v2_a140, i32* @ip, align 4
  store i32 %v0_a134, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_a150

dec_label_pc_a150:                                ; preds = %dec_label_pc_a150.dec_label_pc_a150_crit_edge, %dec_label_pc_a13c
  %v2_a160 = phi i32 [ %v1_a174, %dec_label_pc_a150.dec_label_pc_a150_crit_edge ], [ %v2_a128, %dec_label_pc_a13c ]
  %v0_a15c = phi i32 [ %v0_a15c.pre, %dec_label_pc_a150.dec_label_pc_a150_crit_edge ], [ %v2_a140, %dec_label_pc_a13c ]
  %v0_a158 = phi i32 [ %v0_a150.pre, %dec_label_pc_a150.dec_label_pc_a150_crit_edge ], [ %v0_a134, %dec_label_pc_a13c ]
  %v1_a150 = add i32 %v0_a158, 10
  %v2_a150 = inttoptr i32 %v1_a150 to i8*
  %v3_a150 = load i8, i8* %v2_a150, align 1
  %v1_a154 = add i32 %v0_a158, 6
  %v2_a154 = inttoptr i32 %v1_a154 to i32*
  %v3_a154 = load i32, i32* %v2_a154, align 4
  store i32 %v3_a154, i32* @r2, align 4
  %v1_a158 = add i32 %v0_a158, 5
  store i32 %v1_a158, i32* %r0.global-to-local, align 4
  %v9_a15c = icmp eq i32 %v0_a15c, %v1_a158
  store i1 %v9_a15c, i1* %cpsr_z.global-to-local, align 1
  %v3_a160 = add i32 %v2_a160, 20
  %v4_a160 = inttoptr i32 %v3_a160 to i8*
  store i8 %v3_a150, i8* %v4_a160, align 1
  %v0_a164 = load i32, i32* @r2, align 4
  %v1_a164 = load i32, i32* %r1.global-to-local, align 4
  %v2_a164 = add i32 %v1_a164, 4
  %v3_a164 = inttoptr i32 %v2_a164 to i32*
  store i32 %v0_a164, i32* %v3_a164, align 4
  %v0_a168 = load i32, i32* @r2, align 4
  %v1_a168 = load i32, i32* %r1.global-to-local, align 4
  %v2_a168 = add i32 %v1_a168, 16
  %v3_a168 = inttoptr i32 %v2_a168 to i32*
  store i32 %v0_a168, i32* %v3_a168, align 4
  %v0_a16c = load i32, i32* @r4, align 4
  %v1_a16c = trunc i32 %v0_a16c to i8
  %v2_a16c = load i32, i32* %r1.global-to-local, align 4
  %v3_a16c = inttoptr i32 %v2_a16c to i8*
  store i8 %v1_a16c, i8* %v3_a16c, align 1
  %v0_a170 = load i32, i32* @lr, align 4
  %v1_a170 = trunc i32 %v0_a170 to i8
  %v2_a170 = load i32, i32* %r1.global-to-local, align 4
  %v3_a170 = add i32 %v2_a170, 1
  %v4_a170 = inttoptr i32 %v3_a170 to i8*
  store i8 %v1_a170, i8* %v4_a170, align 1
  %v0_a174 = load i32, i32* %r1.global-to-local, align 4
  %v1_a174 = add i32 %v0_a174, 24
  store i32 %v1_a174, i32* %r1.global-to-local, align 4
  %v0_a178 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a178, label %dec_label_pc_a17c, label %dec_label_pc_a150.dec_label_pc_a150_crit_edge

dec_label_pc_a150.dec_label_pc_a150_crit_edge:    ; preds = %dec_label_pc_a150
  %v0_a150.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_a15c.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a150

dec_label_pc_a17c:                                ; preds = %dec_label_pc_a150
  %v0_a17c = load i32, i32* %sb.global-to-local, align 4
  %v1_a17c = load i32, i32* @r8, align 4
  %v1_a180 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_a17c, %v0_a17c
  %v2_a180 = sub i32 %v1_a180, %sum
  %v0_a184 = load i32, i32* %r0.global-to-local, align 4
  %v1_a184 = add i32 %v0_a184, 6
  store i32 %v1_a184, i32* %fp.global-to-local, align 4
  %v1_a188 = add i32 %v2_a180, -6
  store i32 %v1_a188, i32* @r6, align 4
  br label %dec_label_pc_a18c

dec_label_pc_a18cthread-pre-split:                ; preds = %dec_label_pc_a120
  %v0_a18c.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_a18c

dec_label_pc_a18c:                                ; preds = %dec_label_pc_a18cthread-pre-split, %dec_label_pc_a17c
  %v0_a198 = phi i32 [ %v1_a134, %dec_label_pc_a18cthread-pre-split ], [ %v1_a184, %dec_label_pc_a17c ]
  %v1_a190 = phi i32 [ %v0_a18c.pr, %dec_label_pc_a18cthread-pre-split ], [ %v1_a188, %dec_label_pc_a17c ]
  %v2_a18c = icmp eq i32 %v1_a190, 0
  store i1 %v2_a18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a18c, label %dec_label_pc_a2ac, label %dec_label_pc_a198

dec_label_pc_a198:                                ; preds = %dec_label_pc_a18c
  %v1_a198 = inttoptr i32 %v0_a198 to i8*
  %v2_a198 = load i8, i8* %v1_a198, align 1
  %v3_a198 = zext i8 %v2_a198 to i32
  store i32 %v3_a198, i32* %sb.global-to-local, align 4
  %v2_a19c = icmp eq i8 %v2_a198, 0
  store i1 %v2_a19c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a19c, label %dec_label_pc_a27c, label %dec_label_pc_a1ac

dec_label_pc_a1ac:                                ; preds = %dec_label_pc_a198
  store i32 %v3_a198, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a1b4 = call i32 @function_135a8(i32 %v3_a198, i32 8)
  store i32 %v2_a1b4, i32* %r0.global-to-local, align 4
  %v0_a1b8 = load i32, i32* %sb.global-to-local, align 4
  %v2_a1b8 = icmp eq i32 %v0_a1b8, 0
  store i1 %v2_a1b8, i1* %cpsr_z.global-to-local, align 1
  %tmp37 = icmp slt i32 %v0_a1b8, 1
  br i1 %tmp37, label %dec_label_pc_a27c, label %dec_label_pc_a1c8

dec_label_pc_a1c8:                                ; preds = %dec_label_pc_a1ac
  %v0_a1c8 = load i32, i32* @r6, align 4
  %v1_a1c8 = add i32 %v0_a1c8, -1
  store i32 %v1_a1c8, i32* @r2, align 4
  %v7_a1c8 = icmp eq i32 %v0_a1c8, 1
  store i1 %v7_a1c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1c8, label %dec_label_pc_a2ac, label %dec_label_pc_a1d0

dec_label_pc_a1d0:                                ; preds = %dec_label_pc_a1c8
  %v0_a1d0 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1d0 = add i32 %v0_a1d0, 1
  %v2_a1d0 = inttoptr i32 %v1_a1d0 to i8*
  %v3_a1d0 = load i8, i8* %v2_a1d0, align 1
  %v1_a1d4 = add i32 %v0_a1c8, -2
  store i32 %v1_a1d4, i32* @r2, align 4
  %v7_a1d4 = icmp eq i32 %v1_a1c8, 1
  store i1 %v7_a1d4, i1* %cpsr_z.global-to-local, align 1
  %v3_a1d8 = add i32 %v2_a1b4, 4
  %v4_a1d8 = inttoptr i32 %v3_a1d8 to i8*
  store i8 %v3_a1d0, i8* %v4_a1d8, align 1
  %v0_a1dc = load i32, i32* %fp.global-to-local, align 4
  %v1_a1dc = add i32 %v0_a1dc, 1
  store i32 %v1_a1dc, i32* %r0.global-to-local, align 4
  %v0_a1e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1e0, label %dec_label_pc_a2ac, label %dec_label_pc_a1e4

dec_label_pc_a1e4:                                ; preds = %dec_label_pc_a1d0
  %v1_a1e4 = add i32 %v0_a1dc, 2
  %v2_a1e4 = inttoptr i32 %v1_a1e4 to i8*
  %v3_a1e4 = load i8, i8* %v2_a1e4, align 1
  %v4_a1e4 = zext i8 %v3_a1e4 to i32
  store i32 %v4_a1e4, i32* @r4, align 4
  %v0_a1e8 = load i32, i32* @r2, align 4
  %v1_a1e8 = add i32 %v0_a1e8, -1
  store i32 %v1_a1e8, i32* @r7, align 4
  %v9_a1ec = icmp eq i32 %v1_a1e8, %v4_a1e4
  store i1 %v9_a1ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a1e4, i32* %r0.global-to-local, align 4
  %v5_a1f4 = icmp slt i32 %v1_a1e8, %v4_a1e4
  br i1 %v5_a1f4, label %dec_label_pc_a2ac, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1e4
  store i32 %v2_a1b4, i32* @r5, align 4
  %v1_a200 = add i32 %v2_a1b4, 8
  %v1_a204 = add i32 %v0_a1dc, 3
  store i32 %v1_a204, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_a254

dec_label_pc_a214:                                ; preds = %dec_label_pc_a254
  %v0_a214 = load i32, i32* @r7, align 4
  %v1_a214 = load i32, i32* @r4, align 4
  %v2_a214 = sub i32 %v0_a214, %v1_a214
  store i32 %v2_a214, i32* @r2, align 4
  %v9_a214 = icmp eq i32 %v0_a214, %v1_a214
  store i1 %v9_a214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a214, label %dec_label_pc_a2ac, label %dec_label_pc_a21c

dec_label_pc_a21c:                                ; preds = %dec_label_pc_a214
  %v1_a21c = load i32, i32* @r6, align 4
  %v2_a21c = add i32 %v1_a21c, %v1_a214
  %v3_a21c = inttoptr i32 %v2_a21c to i8*
  %v4_a21c = load i8, i8* %v3_a21c, align 1
  store i32 %stack_var_-44.0, i32* @r5, align 4
  %v1_a224 = add i32 %v2_a214, -1
  store i32 %v1_a224, i32* @r2, align 4
  %v7_a224 = icmp eq i32 %v2_a214, 1
  store i1 %v7_a224, i1* %cpsr_z.global-to-local, align 1
  %v3_a228 = add i32 %stack_var_-44.0, 4
  %v4_a228 = inttoptr i32 %v3_a228 to i8*
  store i8 %v4_a21c, i8* %v4_a228, align 1
  %v0_a22c = load i32, i32* @r4, align 4
  %v1_a22c = load i32, i32* @r6, align 4
  %v2_a22c = add i32 %v1_a22c, %v0_a22c
  store i32 %v2_a22c, i32* %r0.global-to-local, align 4
  %v0_a230 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a230, label %dec_label_pc_a2ac, label %dec_label_pc_a234

dec_label_pc_a234:                                ; preds = %dec_label_pc_a21c
  %v1_a234 = add i32 %v2_a22c, 1
  %v2_a234 = inttoptr i32 %v1_a234 to i8*
  %v3_a234 = load i8, i8* %v2_a234, align 1
  %v4_a234 = zext i8 %v3_a234 to i32
  store i32 %v4_a234, i32* @r4, align 4
  %v0_a238 = load i32, i32* @r2, align 4
  %v1_a238 = add i32 %v0_a238, -1
  store i32 %v1_a238, i32* @r7, align 4
  %v0_a23c = load i32, i32* @r5, align 4
  %v1_a23c = add i32 %v0_a23c, 8
  store i32 %v1_a23c, i32* %r1.global-to-local, align 4
  %v2_a240 = sub i32 %v1_a238, %v4_a234
  %tmp39 = sub i32 0, %v2_a240
  %v6_a240 = and i32 %v1_a238, %tmp39
  %v7_a240 = icmp slt i32 %v6_a240, 0
  %v8_a240 = icmp slt i32 %v2_a240, 0
  %v9_a240 = icmp eq i32 %v1_a238, %v4_a234
  store i1 %v9_a240, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a234, i32* %r0.global-to-local, align 4
  %v2_a24c = xor i1 %v8_a240, %v7_a240
  br i1 %v2_a24c, label %dec_label_pc_a2ac, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a234
  %v1_a250 = add i32 %v2_a22c, 2
  store i32 %v1_a250, i32* @r6, align 4
  br label %dec_label_pc_a254

dec_label_pc_a254:                                ; preds = %dec_label_pc_a1f8, %dec_label_pc_a250
  %v0_a258 = phi i32 [ %v4_a1e4, %dec_label_pc_a1f8 ], [ %v4_a234, %dec_label_pc_a250 ]
  %stack_var_-44.0 = phi i32 [ %v1_a200, %dec_label_pc_a1f8 ], [ %v1_a23c, %dec_label_pc_a250 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_a258 = add nuw nsw i32 %v0_a258, 1
  store i32 %v2_a258, i32* %r0.global-to-local, align 4
  %v2_a25c = call i32 @function_135a8(i32 %v2_a258, i32 1)
  store i32 %v2_a25c, i32* %r0.global-to-local, align 4
  %v0_a260 = load i32, i32* %fp.global-to-local, align 4
  %v1_a260 = add i32 %v0_a260, 1
  store i32 %v1_a260, i32* %fp.global-to-local, align 4
  %v1_a264 = load i32, i32* @r5, align 4
  %v2_a264 = inttoptr i32 %v1_a264 to i32*
  store i32 %v2_a25c, i32* %v2_a264, align 4
  %v0_a268 = load i32, i32* @r6, align 4
  store i32 %v0_a268, i32* %r1.global-to-local, align 4
  %v0_a26c = load i32, i32* @r4, align 4
  %v3_a270 = call i32 @function_120c0(i32 %v2_a25c, i32 %v0_a268, i32 %v0_a26c)
  store i32 %v3_a270, i32* %r0.global-to-local, align 4
  %v0_a274 = load i32, i32* %sb.global-to-local, align 4
  %v1_a274 = load i32, i32* %fp.global-to-local, align 4
  %v9_a274 = icmp eq i32 %v0_a274, %v1_a274
  store i1 %v9_a274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a274, label %dec_label_pc_a27c, label %dec_label_pc_a214

dec_label_pc_a27c:                                ; preds = %dec_label_pc_a254, %dec_label_pc_a1ac, %dec_label_pc_a198
  %stack_var_-52.2 = phi i32 [ %v3_a198, %dec_label_pc_a198 ], [ %v2_a1b4, %dec_label_pc_a1ac ], [ %v2_a1b4, %dec_label_pc_a254 ]
  %v0_a27c = call i32 @function_12f80()
  store i32 %v0_a27c, i32* %r0.global-to-local, align 4
  %v2_a284 = inttoptr i32 %v0_a27c to i32*
  store i32 0, i32* %v2_a284, align 4
  %v0_a288 = call i32 @function_12a04()
  store i32 %v0_a288, i32* %r0.global-to-local, align 4
  %v7_a28c = icmp eq i32 %v0_a288, -1
  %v2_a298 = icmp eq i32 %v0_a288, 0
  store i1 %v2_a298, i1* %cpsr_z.global-to-local, align 1
  %tmp41 = icmp slt i32 %v0_a288, 1
  br i1 %tmp41, label %bb42, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_a27c
  store i32 1, i32* @r2, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a2ac

bb42:                                             ; preds = %dec_label_pc_a27c
  %. = zext i1 %v7_a28c to i32
  store i32 %., i32* @r2, align 4
  %v2_a2a4 = icmp eq i1 %v7_a28c, false
  store i1 %v2_a2a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2a4, label %dec_label_pc_a300, label %dec_label_pc_a2ac

dec_label_pc_a2ac:                                ; preds = %dec_label_pc_a234, %dec_label_pc_a21c, %dec_label_pc_a214, %.thread1, %bb42, %dec_label_pc_a1e4, %dec_label_pc_a1d0, %dec_label_pc_a1c8, %dec_label_pc_a18c
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_a18c ], [ %stack_var_-52.2, %bb42 ], [ %v2_a1b4, %dec_label_pc_a1c8 ], [ %v2_a1b4, %dec_label_pc_a1d0 ], [ %v2_a1b4, %dec_label_pc_a1e4 ], [ %stack_var_-52.2, %.thread1 ], [ %v2_a1b4, %dec_label_pc_a214 ], [ %v2_a1b4, %dec_label_pc_a21c ], [ %v2_a1b4, %dec_label_pc_a234 ]
  store i32 %v2_a128, i32* %r1.global-to-local, align 4
  %v2_a2b0 = icmp eq i32 %v2_a128, 0
  store i1 %v2_a2b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2b0, label %bb44, label %bb43

bb43:                                             ; preds = %dec_label_pc_a2ac
  store i32 %v2_a128, i32* %r0.global-to-local, align 4
  br label %bb44

bb44:                                             ; preds = %dec_label_pc_a2ac, %bb43
  %v1_a2b8 = xor i1 %v2_a2b0, true
  call void @__pseudo_cond_branch(i1 %v1_a2b8, i32 ptrtoint (i32* @global_var_13600.53 to i32))
  %v2_a2c0 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_a2c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2c0, label %.dec_label_pc_a0e8_crit_edge, label %dec_label_pc_a2c8

.dec_label_pc_a0e8_crit_edge:                     ; preds = %bb44
  %v29_a0ec.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0e8

dec_label_pc_a2c8:                                ; preds = %bb44
  %v0_a2c8 = load i32, i32* %sb.global-to-local, align 4
  %v2_a2c8 = icmp eq i32 %v0_a2c8, 0
  store i1 %v2_a2c8, i1* %cpsr_z.global-to-local, align 1
  %tmp45 = icmp slt i32 %v0_a2c8, 1
  br i1 %tmp45, label %dec_label_pc_a2f0, label %dec_label_pc_a2d0

dec_label_pc_a2d0:                                ; preds = %dec_label_pc_a2c8
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a2d0
  %v1_a2d8 = phi i32 [ %v1_a2e4, %dec_label_pc_a2d4 ], [ 0, %dec_label_pc_a2d0 ]
  store i32 %stack_var_-52.3, i32* %r1.global-to-local, align 4
  %v4_a2d8 = mul i32 %v1_a2d8, 8
  %v5_a2d8 = add i32 %v4_a2d8, %stack_var_-52.3
  %v6_a2d8 = inttoptr i32 %v5_a2d8 to i32*
  %v7_a2d8 = load i32, i32* %v6_a2d8, align 4
  store i32 %v7_a2d8, i32* %r0.global-to-local, align 4
  %v2_a2dc = icmp eq i32 %v7_a2d8, 0
  store i1 %v2_a2dc, i1* %cpsr_z.global-to-local, align 1
  %v1_a2e0 = xor i1 %v2_a2dc, true
  call void @__pseudo_cond_branch(i1 %v1_a2e0, i32 ptrtoint (i32* @global_var_13600.53 to i32))
  %v0_a2e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_a2e4 = add i32 %v0_a2e4, 1
  store i32 %v1_a2e4, i32* %r4.global-to-local, align 4
  %v0_a2e8 = load i32, i32* %sb.global-to-local, align 4
  %v9_a2e8 = icmp eq i32 %v0_a2e8, %v1_a2e4
  store i1 %v9_a2e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2e8, label %dec_label_pc_a2f0, label %dec_label_pc_a2d4

dec_label_pc_a2f0:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a2c8
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_a0c4, i32* @r4, align 4
  store i32 %v6_a0c4, i32* @r5, align 4
  store i32 %v9_a0c4, i32* @r6, align 4
  store i32 %v12_a0c4, i32* @r7, align 4
  store i32 %v15_a0c4, i32* @r8, align 4
  store i32 %v18_a0c4, i32* %sb.global-to-local, align 4
  store i32 %v21_a0c4, i32* %sl.global-to-local, align 4
  store i32 %v24_a0c4, i32* %fp.global-to-local, align 4
  store i32 %v27_a0c4, i32* @lr, align 4
  %v0_a2fc = call i32 @function_13600()
  store i32 %v0_a2fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %bb42, %dec_label_pc_a2f0
  %stack_var_-52.4 = phi i32 [ %stack_var_-52.3, %dec_label_pc_a2f0 ], [ %stack_var_-52.2, %bb42 ]
  %v2_a304 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a304 = zext i8 %v2_a304 to i32
  %v2_a308 = icmp eq i8 %v2_a304, 0
  store i1 %v2_a308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a308, label %dec_label_pc_a350, label %dec_label_pc_a310

dec_label_pc_a310:                                ; preds = %dec_label_pc_a300
  %v2_a314 = load i32, i32* @global_var_1dc8c.57, align 4
  store i32 %v2_a314, i32* %r0.global-to-local, align 4
  %v1_a318 = inttoptr i32 %v2_a314 to i32*
  %v2_a318 = load i32, i32* %v1_a318, align 4
  store i32 %v2_a318, i32* @ip, align 4
  store i32 %v4_a0f4, i32* %r4.global-to-local, align 4
  %v1_a320 = add i32 %v2_a318, 4
  %v2_a320 = inttoptr i32 %v1_a320 to i8*
  %v3_a320 = load i8, i8* %v2_a320, align 1
  store i32 %v4_a0f4, i32* %r1.global-to-local, align 4
  %v9_a328 = icmp eq i8 %v3_a320, %v3_a0f4
  store i1 %v9_a328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a328, label %dec_label_pc_a358, label %dec_label_pc_a344.preheader

dec_label_pc_a344.preheader:                      ; preds = %dec_label_pc_a310
  %v0_a344.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_a344

dec_label_pc_a334:                                ; preds = %dec_label_pc_a344
  %v4_a334 = mul i32 %v1_a344, 4
  %v5_a334 = add i32 %v4_a334, %v2_a314
  %v6_a334 = inttoptr i32 %v5_a334 to i32*
  %v7_a334 = load i32, i32* %v6_a334, align 4
  store i32 %v7_a334, i32* @ip, align 4
  %v1_a338 = add i32 %v7_a334, 4
  %v2_a338 = inttoptr i32 %v1_a338 to i8*
  %v3_a338 = load i8, i8* %v2_a338, align 1
  %v9_a33c = icmp eq i8 %v3_a338, %v3_a0f4
  store i1 %v9_a33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a33c, label %dec_label_pc_a358, label %dec_label_pc_a344

dec_label_pc_a344:                                ; preds = %dec_label_pc_a344.preheader, %dec_label_pc_a334
  %v0_a344 = phi i32 [ %v0_a344.pre, %dec_label_pc_a344.preheader ], [ %v1_a344, %dec_label_pc_a334 ]
  %v1_a344 = add i32 %v0_a344, 1
  %v9_a348 = icmp eq i32 %v1_a344, %v3_a304
  store i1 %v9_a348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a348, label %dec_label_pc_a350, label %dec_label_pc_a334

dec_label_pc_a350:                                ; preds = %dec_label_pc_a344, %dec_label_pc_a300, %dec_label_pc_a358
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_a354 = call i32 @function_13b98(i32 0)
  store i32 %v1_a354, i32* %r0.global-to-local, align 4
  %v0_a390.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a358

dec_label_pc_a358:                                ; preds = %dec_label_pc_a334, %dec_label_pc_a310, %dec_label_pc_a350
  %v0_a390 = phi i32 [ %v2_a318, %dec_label_pc_a310 ], [ %v0_a390.pre, %dec_label_pc_a350 ], [ %v7_a334, %dec_label_pc_a334 ]
  %v0_a358 = load i32, i32* %sl.global-to-local, align 4
  store i32 %stack_var_-52.4, i32* %r4.global-to-local, align 4
  %v2_a37c = call i32 @llvm.bswap.i32(i32 %v0_a358)
  store i32 %v2_a37c, i32* %r0.global-to-local, align 4
  %v0_a384 = load i32, i32* @r8, align 4
  store i32 %v0_a384, i32* %r1.global-to-local, align 4
  %v1_a390 = inttoptr i32 %v0_a390 to i32*
  %v2_a390 = load i32, i32* %v1_a390, align 4
  call void @__pseudo_branch(i32 %v2_a390)
  br label %dec_label_pc_a350

; uselistorder directives
  uselistorder i32 %v1_a344, { 2, 0, 1 }
  uselistorder i1 %v9_a33c, { 1, 0 }
  uselistorder i1 %v9_a328, { 1, 0 }
  uselistorder i32 %v1_a2e4, { 1, 2, 0 }
  uselistorder i32 %stack_var_-52.3, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_a2a4, { 1, 0 }
  uselistorder i1 %v7_a28c, { 1, 0 }
  uselistorder i32 %v0_a288, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-52.2, { 2, 0, 1 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v2_a240, { 1, 0 }
  uselistorder i32 %v1_a238, { 2, 0, 1, 3 }
  uselistorder i32 %v4_a234, { 2, 1, 0, 3 }
  uselistorder i32 %v0_a1c8, { 0, 2, 1 }
  uselistorder i32 %v2_a1b4, { 0, 1, 2, 10, 9, 8, 3, 5, 6, 7, 4, 11 }
  uselistorder i32 %v3_a198, { 2, 0, 1, 3 }
  uselistorder i32 %v1_a174, { 1, 0 }
  uselistorder i32 %v0_a158, { 0, 2, 1 }
  uselistorder i32 %v0_a134, { 1, 2, 0, 3 }
  uselistorder i32 %v2_a128, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_a114, { 2, 1, 0 }
  uselistorder i32 %v4_a100, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_a0d4, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32 %v3_a0c4, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 0, 4, 5, 1, 2, 3, 6, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 8, 4, 5, 2, 6, 25, 7, 26, 11, 12, 16, 13, 9, 10, 14, 15, 22, 17, 19, 18, 20, 21, 24, 23, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 16, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 %arg2, { 1, 3, 2, 0, 5, 4, 6 }
  uselistorder label %dec_label_pc_a358, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a350, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a344, { 1, 0 }
  uselistorder label %dec_label_pc_a300, { 1, 0 }
  uselistorder label %bb44, { 1, 0 }
  uselistorder label %dec_label_pc_a2ac, { 4, 3, 0, 1, 2, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_a254, { 1, 0 }
  uselistorder label %dec_label_pc_a0e8, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_a3a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_a3a0:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_a3a0 = load i32, i32* @r4, align 4
  store i32 %v3_a3a0, i32* %stack_var_-24, align 4
  %v6_a3a0 = load i32, i32* @r5, align 4
  %v9_a3a0 = load i32, i32* @r6, align 4
  %v12_a3a0 = load i32, i32* @r7, align 4
  %v15_a3a0 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a3ac = call i32 @function_135a8(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1dc88.55 to i32), i32* @r4, align 4
  %v2_a3b4 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a3b4 = zext i8 %v2_a3b4 to i32
  store i32 ptrtoint (i32* @global_var_1dc8c.57 to i32), i32* @r6, align 4
  store i32 53536, i32* %r2.global-to-local, align 4
  store i32 %v2_a3ac, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a3c8 = mul nuw nsw i32 %v3_a3b4, 4
  store i32 %v3_a3c8, i32* %r1.global-to-local, align 4
  %v2_a3cc = load i32, i32* @global_var_1dc8c.57, align 4
  %v2_a3d0 = inttoptr i32 %v2_a3ac to i32*
  store i32 53536, i32* %v2_a3d0, align 4
  %v3_a3d4 = load i32, i32* @r5, align 4
  %v4_a3d4 = add i32 %v3_a3d4, 4
  %v5_a3d4 = inttoptr i32 %v4_a3d4 to i8*
  store i8 0, i8* %v5_a3d4, align 1
  %v0_a3d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a3d8 = add i32 %v0_a3d8, 4
  store i32 %v1_a3d8, i32* %r1.global-to-local, align 4
  %v5_a3dc = call i32 @function_136f0(i32 %v2_a3cc, i32 %v1_a3d8, i32 53536, i32 0)
  %v2_a3e0 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a3e0 = zext i8 %v2_a3e0 to i32
  store i32 %v3_a3e0, i32* %r3.global-to-local, align 4
  store i32 %v5_a3dc, i32* %ip.global-to-local, align 4
  %v0_a3e8 = load i32, i32* @r5, align 4
  %v5_a3e8 = mul nuw nsw i32 %v3_a3e0, 4
  %v6_a3e8 = add i32 %v5_a3e8, %v5_a3dc
  %v7_a3e8 = inttoptr i32 %v6_a3e8 to i32*
  store i32 %v0_a3e8, i32* %v7_a3e8, align 4
  store i32 ptrtoint (i8* @global_var_1dc89.62 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_a3f8 = load i32, i32* @r4, align 4
  %v4_a3f8 = inttoptr i32 %v3_a3f8 to i8*
  store i8 ptrtoint (i8* @global_var_1dc89.62 to i8), i8* %v4_a3f8, align 1
  %v0_a3fc = load i32, i32* %ip.global-to-local, align 4
  %v1_a3fc = load i32, i32* @r6, align 4
  %v2_a3fc = inttoptr i32 %v1_a3fc to i32*
  store i32 %v0_a3fc, i32* %v2_a3fc, align 4
  %v2_a400 = call i32 @function_135a8(i32 1, i32 8)
  %v2_a404 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a404 = zext i8 %v2_a404 to i32
  store i32 ptrtoint (i32* @global_var_d7c8.64 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_a400, i32* @r5, align 4
  %v3_a414 = mul nuw nsw i32 %v3_a404, 4
  store i32 %v3_a414, i32* %r1.global-to-local, align 4
  %v2_a418 = load i32, i32* @global_var_1dc8c.57, align 4
  %v2_a41c = inttoptr i32 %v2_a400 to i32*
  store i32 ptrtoint (i32* @global_var_d7c8.64 to i32), i32* %v2_a41c, align 4
  %v0_a420 = load i32, i32* @r8, align 4
  %v1_a420 = trunc i32 %v0_a420 to i8
  %v2_a420 = load i32, i32* @r5, align 4
  %v3_a420 = add i32 %v2_a420, 4
  %v4_a420 = inttoptr i32 %v3_a420 to i8*
  store i8 %v1_a420, i8* %v4_a420, align 1
  %v0_a424 = load i32, i32* %r1.global-to-local, align 4
  %v1_a424 = add i32 %v0_a424, 4
  store i32 %v1_a424, i32* %r1.global-to-local, align 4
  %v5_a428 = call i32 @function_136f0(i32 %v2_a418, i32 %v1_a424, i32 sext (i8 ptrtoint (i8* @global_var_1dc89.62 to i8) to i32), i32 ptrtoint (i32* @global_var_d7c8.64 to i32))
  %v2_a42c = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a42c = zext i8 %v2_a42c to i32
  store i32 %v3_a42c, i32* %r3.global-to-local, align 4
  store i32 %v5_a428, i32* %ip.global-to-local, align 4
  %v0_a434 = load i32, i32* @r5, align 4
  %v5_a434 = mul nuw nsw i32 %v3_a42c, 4
  %v6_a434 = add i32 %v5_a434, %v5_a428
  %v7_a434 = inttoptr i32 %v6_a434 to i32*
  store i32 %v0_a434, i32* %v7_a434, align 4
  %v0_a438 = load i32, i32* %r3.global-to-local, align 4
  %v1_a438 = load i32, i32* @r8, align 4
  %v2_a438 = add i32 %v1_a438, %v0_a438
  store i32 %v2_a438, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a444 = load i32, i32* %ip.global-to-local, align 4
  %v1_a444 = load i32, i32* @r6, align 4
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  store i32 %v0_a444, i32* %v2_a444, align 4
  %v0_a448 = load i32, i32* %r2.global-to-local, align 4
  %v1_a448 = trunc i32 %v0_a448 to i8
  %v2_a448 = load i32, i32* @r4, align 4
  %v3_a448 = inttoptr i32 %v2_a448 to i8*
  store i8 %v1_a448, i8* %v3_a448, align 1
  %v2_a44c = call i32 @function_135a8(i32 %v1_a438, i32 8)
  %v2_a450 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a450 = zext i8 %v2_a450 to i32
  store i32 ptrtoint (i32* @global_var_dcc8.66 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a44c, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a460 = mul nuw nsw i32 %v3_a450, 4
  store i32 %v3_a460, i32* %r1.global-to-local, align 4
  %v2_a464 = load i32, i32* @global_var_1dc8c.57, align 4
  %v2_a468 = inttoptr i32 %v2_a44c to i32*
  store i32 ptrtoint (i32* @global_var_dcc8.66 to i32), i32* %v2_a468, align 4
  %v3_a46c = load i32, i32* @r5, align 4
  %v4_a46c = add i32 %v3_a46c, 4
  %v5_a46c = inttoptr i32 %v4_a46c to i8*
  store i8 2, i8* %v5_a46c, align 1
  %v0_a470 = load i32, i32* %r1.global-to-local, align 4
  %v1_a470 = add i32 %v0_a470, 4
  store i32 %v1_a470, i32* %r1.global-to-local, align 4
  %v5_a474 = call i32 @function_136f0(i32 %v2_a464, i32 %v1_a470, i32 ptrtoint (i32* @global_var_dcc8.66 to i32), i32 2)
  %v2_a478 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a478 = zext i8 %v2_a478 to i32
  store i32 %v3_a478, i32* %r3.global-to-local, align 4
  store i32 %v5_a474, i32* %ip.global-to-local, align 4
  %v1_a480 = load i32, i32* @r8, align 4
  %v2_a480 = add i32 %v1_a480, %v3_a478
  %v3_a480 = trunc i32 %v2_a480 to i8
  store i32 %v2_a480, i32* %r2.global-to-local, align 4
  %v0_a484 = load i32, i32* @r5, align 4
  %v5_a484 = mul nuw nsw i32 %v3_a478, 4
  %v6_a484 = add i32 %v5_a484, %v5_a474
  %v7_a484 = inttoptr i32 %v6_a484 to i32*
  store i32 %v0_a484, i32* %v7_a484, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a48c = load i32, i32* @r8, align 4
  %v3_a490 = load i32, i32* @r4, align 4
  %v4_a490 = inttoptr i32 %v3_a490 to i8*
  store i8 %v3_a480, i8* %v4_a490, align 1
  %v0_a494 = load i32, i32* %ip.global-to-local, align 4
  %v1_a494 = load i32, i32* @r6, align 4
  %v2_a494 = inttoptr i32 %v1_a494 to i32*
  store i32 %v0_a494, i32* %v2_a494, align 4
  %v2_a498 = call i32 @function_135a8(i32 %v0_a48c, i32 8)
  %v2_a49c = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a49c = zext i8 %v2_a49c to i32
  store i32 ptrtoint (i32* @global_var_ce04.68 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_a498, i32* @r5, align 4
  %v3_a4ac = mul nuw nsw i32 %v3_a49c, 4
  store i32 %v3_a4ac, i32* %r1.global-to-local, align 4
  %v2_a4b0 = load i32, i32* @global_var_1dc8c.57, align 4
  %v2_a4b4 = inttoptr i32 %v2_a498 to i32*
  store i32 ptrtoint (i32* @global_var_ce04.68 to i32), i32* %v2_a4b4, align 4
  %v0_a4b8 = load i32, i32* @r7, align 4
  %v1_a4b8 = trunc i32 %v0_a4b8 to i8
  %v2_a4b8 = load i32, i32* @r5, align 4
  %v3_a4b8 = add i32 %v2_a4b8, 4
  %v4_a4b8 = inttoptr i32 %v3_a4b8 to i8*
  store i8 %v1_a4b8, i8* %v4_a4b8, align 1
  %v0_a4bc = load i32, i32* %r1.global-to-local, align 4
  %v1_a4bc = add i32 %v0_a4bc, 4
  store i32 %v1_a4bc, i32* %r1.global-to-local, align 4
  %v5_a4c0 = call i32 @function_136f0(i32 %v2_a4b0, i32 %v1_a4bc, i32 %v2_a480, i32 ptrtoint (i32* @global_var_ce04.68 to i32))
  %v2_a4c4 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a4c4 = zext i8 %v2_a4c4 to i32
  store i32 %v3_a4c4, i32* %r3.global-to-local, align 4
  store i32 %v5_a4c0, i32* %ip.global-to-local, align 4
  %v0_a4cc = load i32, i32* @r5, align 4
  %v5_a4cc = mul nuw nsw i32 %v3_a4c4, 4
  %v6_a4cc = add i32 %v5_a4cc, %v5_a4c0
  %v7_a4cc = inttoptr i32 %v6_a4cc to i32*
  store i32 %v0_a4cc, i32* %v7_a4cc, align 4
  %v0_a4d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a4d0 = load i32, i32* @r8, align 4
  %v2_a4d0 = add i32 %v1_a4d0, %v0_a4d0
  store i32 %v2_a4d0, i32* %r2.global-to-local, align 4
  %v0_a4d4 = load i32, i32* @r7, align 4
  store i32 %v0_a4d4, i32* %r1.global-to-local, align 4
  %v0_a4dc = load i32, i32* %ip.global-to-local, align 4
  %v1_a4dc = load i32, i32* @r6, align 4
  %v2_a4dc = inttoptr i32 %v1_a4dc to i32*
  store i32 %v0_a4dc, i32* %v2_a4dc, align 4
  %v0_a4e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a4e0 = trunc i32 %v0_a4e0 to i8
  %v2_a4e0 = load i32, i32* @r4, align 4
  %v3_a4e0 = inttoptr i32 %v2_a4e0 to i8*
  store i8 %v1_a4e0, i8* %v3_a4e0, align 1
  %v2_a4e4 = call i32 @function_135a8(i32 %v1_a4d0, i32 %v0_a4d4)
  %v2_a4e8 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a4e8 = zext i8 %v2_a4e8 to i32
  store i32 ptrtoint (i32* @global_var_c688.70 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a4e4, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_a4f8 = mul nuw nsw i32 %v3_a4e8, 4
  store i32 %v3_a4f8, i32* %r1.global-to-local, align 4
  %v2_a4fc = load i32, i32* @global_var_1dc8c.57, align 4
  %v2_a500 = inttoptr i32 %v2_a4e4 to i32*
  store i32 ptrtoint (i32* @global_var_c688.70 to i32), i32* %v2_a500, align 4
  %v3_a504 = load i32, i32* @r5, align 4
  %v4_a504 = add i32 %v3_a504, 4
  %v5_a504 = inttoptr i32 %v4_a504 to i8*
  store i8 3, i8* %v5_a504, align 1
  %v0_a508 = load i32, i32* %r1.global-to-local, align 4
  %v1_a508 = add i32 %v0_a508, 4
  store i32 %v1_a508, i32* %r1.global-to-local, align 4
  %v5_a50c = call i32 @function_136f0(i32 %v2_a4fc, i32 %v1_a508, i32 ptrtoint (i32* @global_var_c688.70 to i32), i32 3)
  %v2_a510 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a510 = zext i8 %v2_a510 to i32
  store i32 %v3_a510, i32* %r3.global-to-local, align 4
  store i32 %v5_a50c, i32* %ip.global-to-local, align 4
  %v0_a518 = load i32, i32* @r5, align 4
  %v5_a518 = mul nuw nsw i32 %v3_a510, 4
  %v6_a518 = add i32 %v5_a518, %v5_a50c
  %v7_a518 = inttoptr i32 %v6_a518 to i32*
  store i32 %v0_a518, i32* %v7_a518, align 4
  %v0_a51c = load i32, i32* %r3.global-to-local, align 4
  %v1_a51c = load i32, i32* @r8, align 4
  %v2_a51c = add i32 %v1_a51c, %v0_a51c
  store i32 %v2_a51c, i32* %r2.global-to-local, align 4
  %v0_a520 = load i32, i32* @r7, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  %v0_a528 = load i32, i32* %ip.global-to-local, align 4
  %v1_a528 = load i32, i32* @r6, align 4
  %v2_a528 = inttoptr i32 %v1_a528 to i32*
  store i32 %v0_a528, i32* %v2_a528, align 4
  %v0_a52c = load i32, i32* %r2.global-to-local, align 4
  %v1_a52c = trunc i32 %v0_a52c to i8
  %v2_a52c = load i32, i32* @r4, align 4
  %v3_a52c = inttoptr i32 %v2_a52c to i8*
  store i8 %v1_a52c, i8* %v3_a52c, align 1
  %v2_a530 = call i32 @function_135a8(i32 %v1_a51c, i32 %v0_a520)
  %v2_a534 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a534 = zext i8 %v2_a534 to i32
  store i32 ptrtoint (i32* @global_var_bec8.72 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a530, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_a544 = mul nuw nsw i32 %v3_a534, 4
  store i32 %v3_a544, i32* %r1.global-to-local, align 4
  %v2_a548 = load i32, i32* @global_var_1dc8c.57, align 4
  %v2_a54c = inttoptr i32 %v2_a530 to i32*
  store i32 ptrtoint (i32* @global_var_bec8.72 to i32), i32* %v2_a54c, align 4
  %v3_a550 = load i32, i32* @r5, align 4
  %v4_a550 = add i32 %v3_a550, 4
  %v5_a550 = inttoptr i32 %v4_a550 to i8*
  store i8 4, i8* %v5_a550, align 1
  %v0_a554 = load i32, i32* %r1.global-to-local, align 4
  %v1_a554 = add i32 %v0_a554, 4
  store i32 %v1_a554, i32* %r1.global-to-local, align 4
  %v5_a558 = call i32 @function_136f0(i32 %v2_a548, i32 %v1_a554, i32 ptrtoint (i32* @global_var_bec8.72 to i32), i32 4)
  %v2_a55c = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a55c = zext i8 %v2_a55c to i32
  store i32 %v3_a55c, i32* %r3.global-to-local, align 4
  store i32 %v5_a558, i32* %ip.global-to-local, align 4
  %v0_a564 = load i32, i32* @r5, align 4
  %v5_a564 = mul nuw nsw i32 %v3_a55c, 4
  %v6_a564 = add i32 %v5_a564, %v5_a558
  %v7_a564 = inttoptr i32 %v6_a564 to i32*
  store i32 %v0_a564, i32* %v7_a564, align 4
  %v0_a568 = load i32, i32* %r3.global-to-local, align 4
  %v1_a568 = load i32, i32* @r8, align 4
  %v2_a568 = add i32 %v1_a568, %v0_a568
  store i32 %v2_a568, i32* %r2.global-to-local, align 4
  %v0_a56c = load i32, i32* @r7, align 4
  store i32 %v0_a56c, i32* %r1.global-to-local, align 4
  %v0_a574 = load i32, i32* %ip.global-to-local, align 4
  %v1_a574 = load i32, i32* @r6, align 4
  %v2_a574 = inttoptr i32 %v1_a574 to i32*
  store i32 %v0_a574, i32* %v2_a574, align 4
  %v0_a578 = load i32, i32* %r2.global-to-local, align 4
  %v1_a578 = trunc i32 %v0_a578 to i8
  %v2_a578 = load i32, i32* @r4, align 4
  %v3_a578 = inttoptr i32 %v2_a578 to i8*
  store i8 %v1_a578, i8* %v3_a578, align 1
  %v2_a57c = call i32 @function_135a8(i32 %v1_a568, i32 %v0_a56c)
  %v2_a580 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a580 = zext i8 %v2_a580 to i32
  store i32 ptrtoint (i32* @global_var_b5b8.74 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a57c, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_a590 = mul nuw nsw i32 %v3_a580, 4
  store i32 %v3_a590, i32* %r1.global-to-local, align 4
  %v2_a594 = load i32, i32* @global_var_1dc8c.57, align 4
  %v2_a598 = inttoptr i32 %v2_a57c to i32*
  store i32 ptrtoint (i32* @global_var_b5b8.74 to i32), i32* %v2_a598, align 4
  %v3_a59c = load i32, i32* @r5, align 4
  %v4_a59c = add i32 %v3_a59c, 4
  %v5_a59c = inttoptr i32 %v4_a59c to i8*
  store i8 5, i8* %v5_a59c, align 1
  %v0_a5a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a5a0 = add i32 %v0_a5a0, 4
  store i32 %v1_a5a0, i32* %r1.global-to-local, align 4
  %v5_a5a4 = call i32 @function_136f0(i32 %v2_a594, i32 %v1_a5a0, i32 ptrtoint (i32* @global_var_b5b8.74 to i32), i32 5)
  %v2_a5a8 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a5a8 = zext i8 %v2_a5a8 to i32
  store i32 %v3_a5a8, i32* %r3.global-to-local, align 4
  store i32 %v5_a5a4, i32* %ip.global-to-local, align 4
  %v0_a5b0 = load i32, i32* @r5, align 4
  %v5_a5b0 = mul nuw nsw i32 %v3_a5a8, 4
  %v6_a5b0 = add i32 %v5_a5b0, %v5_a5a4
  %v7_a5b0 = inttoptr i32 %v6_a5b0 to i32*
  store i32 %v0_a5b0, i32* %v7_a5b0, align 4
  %v0_a5b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5b4 = load i32, i32* @r8, align 4
  %v2_a5b4 = add i32 %v1_a5b4, %v0_a5b4
  store i32 %v2_a5b4, i32* %r2.global-to-local, align 4
  %v0_a5b8 = load i32, i32* @r7, align 4
  store i32 %v0_a5b8, i32* %r1.global-to-local, align 4
  %v0_a5c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a5c0 = load i32, i32* @r6, align 4
  %v2_a5c0 = inttoptr i32 %v1_a5c0 to i32*
  store i32 %v0_a5c0, i32* %v2_a5c0, align 4
  %v0_a5c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a5c4 = trunc i32 %v0_a5c4 to i8
  %v2_a5c4 = load i32, i32* @r4, align 4
  %v3_a5c4 = inttoptr i32 %v2_a5c4 to i8*
  store i8 %v1_a5c4, i8* %v3_a5c4, align 1
  %v2_a5c8 = call i32 @function_135a8(i32 %v1_a5b4, i32 %v0_a5b8)
  %v2_a5cc = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a5cc = zext i8 %v2_a5cc to i32
  store i32 ptrtoint (i32* @global_var_ae80.76 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a5c8, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_a5dc = mul nuw nsw i32 %v3_a5cc, 4
  store i32 %v3_a5dc, i32* %r1.global-to-local, align 4
  %v2_a5e0 = load i32, i32* @global_var_1dc8c.57, align 4
  %v2_a5e4 = inttoptr i32 %v2_a5c8 to i32*
  store i32 ptrtoint (i32* @global_var_ae80.76 to i32), i32* %v2_a5e4, align 4
  %v3_a5e8 = load i32, i32* @r5, align 4
  %v4_a5e8 = add i32 %v3_a5e8, 4
  %v5_a5e8 = inttoptr i32 %v4_a5e8 to i8*
  store i8 6, i8* %v5_a5e8, align 1
  %v0_a5ec = load i32, i32* %r1.global-to-local, align 4
  %v1_a5ec = add i32 %v0_a5ec, 4
  store i32 %v1_a5ec, i32* %r1.global-to-local, align 4
  %v5_a5f0 = call i32 @function_136f0(i32 %v2_a5e0, i32 %v1_a5ec, i32 ptrtoint (i32* @global_var_ae80.76 to i32), i32 6)
  %v2_a5f4 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a5f4 = zext i8 %v2_a5f4 to i32
  store i32 %v3_a5f4, i32* %r3.global-to-local, align 4
  store i32 %v5_a5f0, i32* %ip.global-to-local, align 4
  %v0_a5fc = load i32, i32* @r5, align 4
  %v5_a5fc = mul nuw nsw i32 %v3_a5f4, 4
  %v6_a5fc = add i32 %v5_a5fc, %v5_a5f0
  %v7_a5fc = inttoptr i32 %v6_a5fc to i32*
  store i32 %v0_a5fc, i32* %v7_a5fc, align 4
  %v0_a600 = load i32, i32* %r3.global-to-local, align 4
  %v1_a600 = load i32, i32* @r8, align 4
  %v2_a600 = add i32 %v1_a600, %v0_a600
  store i32 %v2_a600, i32* %r2.global-to-local, align 4
  %v0_a604 = load i32, i32* @r7, align 4
  store i32 %v0_a604, i32* %r1.global-to-local, align 4
  %v0_a60c = load i32, i32* %ip.global-to-local, align 4
  %v1_a60c = load i32, i32* @r6, align 4
  %v2_a60c = inttoptr i32 %v1_a60c to i32*
  store i32 %v0_a60c, i32* %v2_a60c, align 4
  %v0_a610 = load i32, i32* %r2.global-to-local, align 4
  %v1_a610 = trunc i32 %v0_a610 to i8
  %v2_a610 = load i32, i32* @r4, align 4
  %v3_a610 = inttoptr i32 %v2_a610 to i8*
  store i8 %v1_a610, i8* %v3_a610, align 1
  %v2_a614 = call i32 @function_135a8(i32 %v1_a600, i32 %v0_a604)
  %v2_a618 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a618 = zext i8 %v2_a618 to i32
  store i32 ptrtoint (i32* @global_var_a6d8.78 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a614, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_a628 = mul nuw nsw i32 %v3_a618, 4
  store i32 %v3_a628, i32* %r1.global-to-local, align 4
  %v2_a62c = load i32, i32* @global_var_1dc8c.57, align 4
  %v2_a630 = inttoptr i32 %v2_a614 to i32*
  store i32 ptrtoint (i32* @global_var_a6d8.78 to i32), i32* %v2_a630, align 4
  %v3_a634 = load i32, i32* @r5, align 4
  %v4_a634 = add i32 %v3_a634, 4
  %v5_a634 = inttoptr i32 %v4_a634 to i8*
  store i8 7, i8* %v5_a634, align 1
  %v0_a638 = load i32, i32* %r1.global-to-local, align 4
  %v1_a638 = add i32 %v0_a638, 4
  store i32 %v1_a638, i32* %r1.global-to-local, align 4
  %v5_a63c = call i32 @function_136f0(i32 %v2_a62c, i32 %v1_a638, i32 ptrtoint (i32* @global_var_a6d8.78 to i32), i32 7)
  %v2_a640 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a640 = zext i8 %v2_a640 to i32
  store i32 %v3_a640, i32* %r3.global-to-local, align 4
  store i32 %v5_a63c, i32* %ip.global-to-local, align 4
  %v0_a648 = load i32, i32* @r5, align 4
  %v5_a648 = mul nuw nsw i32 %v3_a640, 4
  %v6_a648 = add i32 %v5_a648, %v5_a63c
  %v7_a648 = inttoptr i32 %v6_a648 to i32*
  store i32 %v0_a648, i32* %v7_a648, align 4
  %v0_a64c = load i32, i32* %r3.global-to-local, align 4
  %v1_a64c = load i32, i32* @r8, align 4
  %v2_a64c = add i32 %v1_a64c, %v0_a64c
  store i32 %v2_a64c, i32* %r2.global-to-local, align 4
  %v0_a650 = load i32, i32* @r7, align 4
  store i32 %v0_a650, i32* %r1.global-to-local, align 4
  %v1_a658 = trunc i32 %v2_a64c to i8
  %v2_a658 = load i32, i32* @r4, align 4
  %v3_a658 = inttoptr i32 %v2_a658 to i8*
  store i8 %v1_a658, i8* %v3_a658, align 1
  %v0_a65c = load i32, i32* %ip.global-to-local, align 4
  %v1_a65c = load i32, i32* @r6, align 4
  %v2_a65c = inttoptr i32 %v1_a65c to i32*
  store i32 %v0_a65c, i32* %v2_a65c, align 4
  %v2_a660 = call i32 @function_135a8(i32 %v1_a64c, i32 %v0_a650)
  %v2_a664 = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a664 = zext i8 %v2_a664 to i32
  store i32 ptrtoint (i32* @global_var_81cc.80 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a660, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_a674 = mul nuw nsw i32 %v3_a664, 4
  store i32 %v3_a674, i32* %r1.global-to-local, align 4
  %v2_a678 = load i32, i32* @global_var_1dc8c.57, align 4
  %v2_a67c = inttoptr i32 %v2_a660 to i32*
  store i32 ptrtoint (i32* @global_var_81cc.80 to i32), i32* %v2_a67c, align 4
  %v3_a680 = load i32, i32* @r5, align 4
  %v4_a680 = add i32 %v3_a680, 4
  %v5_a680 = inttoptr i32 %v4_a680 to i8*
  store i8 9, i8* %v5_a680, align 1
  %v0_a684 = load i32, i32* %r1.global-to-local, align 4
  %v1_a684 = add i32 %v0_a684, 4
  store i32 %v1_a684, i32* %r1.global-to-local, align 4
  %v5_a688 = call i32 @function_136f0(i32 %v2_a678, i32 %v1_a684, i32 ptrtoint (i32* @global_var_81cc.80 to i32), i32 9)
  %v2_a68c = load i8, i8* bitcast (i8** @global_var_1dc88.55 to i8*), align 4
  %v3_a68c = zext i8 %v2_a68c to i32
  store i32 %v3_a68c, i32* %r3.global-to-local, align 4
  %v1_a690 = load i32, i32* @r6, align 4
  %v2_a690 = inttoptr i32 %v1_a690 to i32*
  store i32 %v5_a688, i32* %v2_a690, align 4
  %v0_a694 = load i32, i32* @r5, align 4
  %v2_a694 = load i32, i32* %r3.global-to-local, align 4
  %v5_a694 = mul i32 %v2_a694, 4
  %v6_a694 = add i32 %v5_a694, %v5_a688
  %v7_a694 = inttoptr i32 %v6_a694 to i32*
  store i32 %v0_a694, i32* %v7_a694, align 4
  %v0_a698 = load i32, i32* %r3.global-to-local, align 4
  %v1_a698 = load i32, i32* @r8, align 4
  %v2_a698 = add i32 %v1_a698, %v0_a698
  store i32 %v2_a698, i32* %r2.global-to-local, align 4
  %v1_a6a0 = trunc i32 %v2_a698 to i8
  %v2_a6a0 = load i32, i32* @r4, align 4
  %v3_a6a0 = inttoptr i32 %v2_a6a0 to i8*
  store i8 %v1_a6a0, i8* %v3_a6a0, align 1
  %v2_a6a4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_a6a4, i32* @r4, align 4
  store i32 %v6_a3a0, i32* @r5, align 4
  store i32 %v9_a3a0, i32* @r6, align 4
  store i32 %v12_a3a0, i32* @r7, align 4
  store i32 %v15_a3a0, i32* @r8, align 4
  ret i32 %v1_a698

; uselistorder directives
  uselistorder i32 %v1_a698, { 1, 0 }
  uselistorder i32 %v1_a64c, { 1, 0 }
  uselistorder i32 %v1_a600, { 1, 0 }
  uselistorder i32 %v1_a5b4, { 1, 0 }
  uselistorder i32 %v1_a568, { 1, 0 }
  uselistorder i32 %v1_a51c, { 1, 0 }
  uselistorder i32 %v1_a4d0, { 1, 0 }
  uselistorder i32 %v2_a480, { 0, 2, 1 }
  uselistorder i32 %v3_a478, { 1, 0, 2 }
  uselistorder i32 %v1_a438, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i8 7, { 4, 5, 6, 7, 0, 1, 2, 3 }
  uselistorder i32* @global_var_1dc8c.57, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i8* bitcast (i8** @global_var_1dc88.55 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_a6d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a6d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a6d8 = load i32, i32* @r4, align 4
  %v15_a6d8 = load i32, i32* @r8, align 4
  %v21_a6d8 = load i32, i32* @sl, align 4
  %v24_a6d8 = load i32, i32* @fp, align 4
  %v1_a6dc = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_a6dc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a6f8 = urem i32 %arg4, 256
  store i32 %v1_a6f8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_a708 = call i32 @function_135a8(i32 %v1_a6dc, i32 4)
  %v0_a70c = load i32, i32* @r5, align 4
  store i32 %v0_a70c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a718 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a718, i32* %r3.global-to-local, align 4
  %v0_a71c = load i32, i32* @r4, align 4
  store i32 %v0_a71c, i32* %r0.global-to-local, align 4
  %v5_a720 = inttoptr i32 %v0_a70c to i32*
  %v6_a720 = call i32 @function_a054(i32 %v0_a71c, i32* %v5_a720, i32 2, i32 %v0_a718)
  %v1_a72c = urem i32 %v6_a720, 256
  store i32 %v1_a72c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a738 = load i32, i32* @r5, align 4
  store i32 %v0_a738, i32* %r1.global-to-local, align 4
  %v0_a73c = load i32, i32* @r4, align 4
  store i32 %v0_a73c, i32* %r0.global-to-local, align 4
  %v5_a740 = trunc i32 %v6_a720 to i8
  %v6_a744 = inttoptr i32 %v0_a738 to i32*
  %v7_a744 = call i32 @function_a054(i32 %v0_a73c, i32* %v6_a744, i32 3, i32 65535)
  %v0_a748 = load i32, i32* @r5, align 4
  store i32 %v0_a748, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a744, i32* @r7, align 4
  %v0_a758 = load i32, i32* @r4, align 4
  store i32 %v0_a758, i32* %r0.global-to-local, align 4
  %v4_a75c = inttoptr i32 %v0_a748 to i32*
  %v5_a75c = call i32 @function_a054(i32 %v0_a758, i32* %v4_a75c, i32 4, i32 64)
  %v1_a764 = urem i32 %v5_a75c, 256
  store i32 %v1_a764, i32* %ip.global-to-local, align 4
  %v0_a768 = load i32, i32* @r5, align 4
  store i32 %v0_a768, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a774 = load i32, i32* @r4, align 4
  store i32 %v0_a774, i32* %r0.global-to-local, align 4
  %v5_a778 = trunc i32 %v5_a75c to i8
  %v6_a77c = inttoptr i32 %v0_a768 to i32*
  %v7_a77c = call i32 @function_a054(i32 %v0_a774, i32* %v6_a77c, i32 5, i32 1)
  %v1_a788 = urem i32 %v7_a77c, 256
  store i32 %v1_a788, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a794 = load i32, i32* @r5, align 4
  store i32 %v0_a794, i32* %r1.global-to-local, align 4
  %v0_a798 = load i32, i32* @r4, align 4
  store i32 %v0_a798, i32* %r0.global-to-local, align 4
  %v5_a7a0 = inttoptr i32 %v0_a794 to i32*
  %v6_a7a0 = call i32 @function_a054(i32 %v0_a798, i32* %v5_a7a0, i32 6, i32 65535)
  %v0_a7ac = load i32, i32* @r5, align 4
  store i32 %v0_a7ac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a7b8 = load i32, i32* @r4, align 4
  store i32 %v0_a7b8, i32* %r0.global-to-local, align 4
  %v5_a7bc = inttoptr i32 %v0_a7ac to i32*
  %v6_a7bc = call i32 @function_a054(i32 %v0_a7b8, i32* %v5_a7bc, i32 7, i32 65535)
  %v0_a7c0 = load i32, i32* @r5, align 4
  store i32 %v0_a7c0, i32* %r1.global-to-local, align 4
  %v0_a7c4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a7c4, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_a7bc, i32* @sl, align 4
  %v0_a7d0 = load i32, i32* @r4, align 4
  store i32 %v0_a7d0, i32* %r0.global-to-local, align 4
  %v4_a7d4 = inttoptr i32 %v0_a7c0 to i32*
  %v5_a7d4 = call i32 @function_a054(i32 %v0_a7d0, i32* %v4_a7d4, i32 %v0_a7c4, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a7e4 = load i32, i32* @r5, align 4
  store i32 %v0_a7e4, i32* %r1.global-to-local, align 4
  %v0_a7e8 = load i32, i32* @r4, align 4
  store i32 %v0_a7e8, i32* %r0.global-to-local, align 4
  %v4_a7ec = inttoptr i32 %v0_a7e4 to i32*
  %v5_a7ec = call i32 @function_a054(i32 %v0_a7e8, i32* %v4_a7ec, i32 1, i32 1)
  %v1_a7f4 = urem i32 %v5_a7ec, 256
  store i32 %v1_a7f4, i32* %ip.global-to-local, align 4
  %v0_a7f8 = load i32, i32* @r5, align 4
  store i32 %v0_a7f8, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a800 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a800, i32* %r3.global-to-local, align 4
  %v0_a804 = load i32, i32* @r4, align 4
  store i32 %v0_a804, i32* %r0.global-to-local, align 4
  %v5_a80c = inttoptr i32 %v0_a7f8 to i32*
  %v6_a80c = call i32 @function_a054(i32 %v0_a804, i32* %v5_a80c, i32 18, i32 %v0_a800)
  %v0_a814 = load i32, i32* @r5, align 4
  store i32 %v0_a814, i32* %r1.global-to-local, align 4
  %v2_a818 = load i32, i32* @global_var_1dd2c.82, align 4
  store i32 %v2_a818, i32* %r3.global-to-local, align 4
  store i32 %v6_a80c, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_a824 = load i32, i32* @r4, align 4
  store i32 %v0_a824, i32* %r0.global-to-local, align 4
  %v4_a828 = inttoptr i32 %v0_a814 to i32*
  %v5_a828 = call i32 @function_a054(i32 %v0_a824, i32* %v4_a828, i32 24, i32 %v2_a818)
  %v0_a830 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a830, i32* %r0.global-to-local, align 4
  %v1_a834 = inttoptr i32 %v0_a830 to i32*
  %v2_a834 = call i32 @function_12ca8(i32* %v1_a834)
  %v1_a838 = load i32, i32* @r6, align 4
  %v2_a838 = add i32 %v1_a838, %v2_a834
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a84c = call i32 @function_132bc(i32 2, i32 3, i32 6)
  store i32 %v3_a84c, i32* %r0.global-to-local, align 4
  %v7_a850 = icmp eq i32 %v3_a84c, -1
  store i1 %v7_a850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a850, label %dec_label_pc_ae68, label %dec_label_pc_a85c

dec_label_pc_a85c:                                ; preds = %dec_label_pc_a6d8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a864 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a864, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_a86c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a86c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a878 = call i32 @function_1328c(i32 %v3_a84c, i32 %v0_a86c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_a878, i32* %r0.global-to-local, align 4
  %v7_a87c = icmp eq i32 %v6_a878, -1
  store i1 %v7_a87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a87c, label %dec_label_pc_ae70, label %dec_label_pc_a884

dec_label_pc_a884:                                ; preds = %dec_label_pc_a85c
  %v0_a890 = load i32, i32* @sl, align 4
  %v3_a890 = mul i32 %v0_a890, 65536
  store i32 %v3_a890, i32* %sl.global-to-local, align 4
  %v0_a894 = load i32, i32* @r7, align 4
  %v2_a89c = icmp eq i32 %v1_a6dc, 0
  store i1 %v2_a89c, i1* %cpsr_z.global-to-local, align 1
  %v0_a8a0 = load i32, i32* @r8, align 4
  %v1_a8a0 = urem i32 %v0_a8a0, 256
  store i32 %v1_a8a0, i32* %r8.global-to-local, align 4
  %v3_a8a4 = urem i32 %v0_a894, 65536
  store i32 %v3_a8a4, i32* %r3.global-to-local, align 4
  %v3_a8a8 = urem i32 %v6_a7a0, 65536
  store i32 %v3_a8a8, i32* %r1.global-to-local, align 4
  %v3_a8ac = urem i32 %v0_a890, 65536
  store i32 %v3_a8ac, i32* %r2.global-to-local, align 4
  %v0_a8b8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a8b8, i32* %stack_var_-40, align 4
  br i1 %v2_a89c, label %dec_label_pc_ab4c.preheader, label %dec_label_pc_a8cc

dec_label_pc_a8cc:                                ; preds = %dec_label_pc_a884
  %v3_a8d4 = mul i32 %v5_a7d4, 65536
  %v1_a8dc = urem i32 %v6_a7a0, 256
  %v1_a8e4 = add i32 %v3_a8d4, 524288
  %v1_a8e8 = add i32 %v3_a8d4, 4325376
  %v1_a8ec = urem i32 %v0_a890, 256
  %v1_a8f0 = add i32 %v3_a8d4, 1835008
  %v0_a894.not = or i32 %v0_a894, -65536
  %v1_a8f8 = xor i32 %v0_a894.not, 65535
  %v3_a8fc = udiv i32 %v1_a8f0, 256
  %tmp82 = udiv i32 %v0_a894, 256
  %v1_a910 = and i32 %v3_a8fc, 65280
  store i32 %v1_a910, i32* %r0.global-to-local, align 4
  %v3_a934 = mul nuw nsw i32 %v1_a8dc, 256
  %tmp83 = udiv i32 %v6_a7a0, 256
  %v4_a93c = urem i32 %tmp83, 256
  %v5_a93c = or i32 %v4_a93c, %v3_a934
  store i32 %v5_a93c, i32* @lr, align 4
  %tmp84 = mul nsw i32 %v1_a8f8, 256
  %v3_a944 = mul nuw nsw i32 %v1_a8ec, 256
  %sext23 = mul i32 %tmp82, 16777216
  %v4_a94c = sdiv i32 %sext23, 16777216
  %v4_a914 = sdiv i32 %v1_a8e8, 16777216
  %tmp85 = udiv i32 %v0_a890, 256
  %v4_a954 = urem i32 %tmp85, 256
  %v5_a954 = or i32 %v4_a954, %v3_a944
  store i32 %v5_a954, i32* @r7, align 4
  %v1_a958 = and i32 %tmp84, 65280
  store i32 %v1_a958, i32* %ip.global-to-local, align 4
  %v4_a95c = sdiv i32 %v1_a8f0, 16777216
  %v3_a960 = udiv i32 %v1_a8e4, 256
  %tmp86 = udiv i32 %v1_a8f8, 256
  %v4_a964 = urem i32 %tmp86, 256
  %v5_a964 = or i32 %v4_a964, %v1_a958
  store i32 %v5_a964, i32* @r6, align 4
  %v3_a968 = ashr i32 %v1_a8e8, 31
  %v3_a96c = ashr i32 %sext23, 31
  %v1_a970 = and i32 %v3_a960, 65280
  store i32 %v1_a970, i32* @r5, align 4
  %v3_a97c = ashr i32 %v1_a8f0, 31
  store i32 %v3_a97c, i32* %r2.global-to-local, align 4
  %v3_a98032 = udiv i32 %v1_a958, 256
  store i32 %v3_a98032, i32* %r3.global-to-local, align 4
  store i32 %v1_a8dc, i32* %r1.global-to-local, align 4
  %v4_a988 = udiv i32 %v1_a8e4, 16777216
  %v5_a988 = or i32 %v4_a988, %v1_a970
  store i32 %v5_a988, i32* %r8.global-to-local, align 4
  %v5_a98c = trunc i32 %tmp86 to i8
  store i32 %v0_a8b8, i32* @r4, align 4
  %v3_a9a433 = udiv i32 %v1_a970, 256
  store i32 %v3_a9a433, i32* %sl.global-to-local, align 4
  store i32 %v1_a8ec, i32* %fp.global-to-local, align 4
  %v4_a9f8 = sext i8 %v5_a778 to i32
  %sext15 = mul i32 %v1_a8f8, 16777216
  %v4_aac8 = sdiv i32 %sext15, 16777216
  %v2_aaf8 = icmp eq i32 %v1_a8a0, 0
  %sext16 = mul i32 %v6_a7a0, 16777216
  %v4_ab0c = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp83, 16777216
  %v4_ab28 = sdiv i32 %sext17, 16777216
  %v1_aa10 = trunc i32 %v4_a94c to i8
  br label %dec_label_pc_a9ac

dec_label_pc_a9ac:                                ; preds = %bb97, %dec_label_pc_a8cc
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a9b8 = call i32 @function_135a8(i32 1510, i32 4)
  store i32 %v2_a9b8, i32* %r0.global-to-local, align 4
  store i32 %v2_a708, i32* %r2.global-to-local, align 4
  %v3_a9c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a9c0, i32* %r3.global-to-local, align 4
  %v2_a9c4 = load i32, i32* @r4, align 4
  %v5_a9c4 = mul i32 %v2_a9c4, 4
  %v6_a9c4 = add i32 %v5_a9c4, %v2_a708
  %v7_a9c4 = inttoptr i32 %v6_a9c4 to i32*
  store i32 %v2_a9b8, i32* %v7_a9c4, align 4
  %v0_a9c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a9c8 = load i32, i32* %r3.global-to-local, align 4
  %v4_a9c8 = mul i32 %v1_a9c8, 4
  %v5_a9c8 = add i32 %v4_a9c8, %v0_a9c8
  %v6_a9c8 = inttoptr i32 %v5_a9c8 to i32*
  %v7_a9c8 = load i32, i32* %v6_a9c8, align 4
  store i32 %v7_a9c8, i32* %r4.global-to-local, align 4
  %v1_a9cc = inttoptr i32 %v7_a9c8 to i8*
  %v2_a9cc = load i8, i8* %v1_a9cc, align 1
  %tmp = urem i8 %v2_a9cc, 16
  %v1_a9d0 = zext i8 %tmp to i32
  %v1_a9d4 = or i32 %v1_a9d0, 64
  store i32 %v1_a9d4, i32* %r2.global-to-local, align 4
  %v1_a9d8 = trunc i32 %v1_a9d4 to i8
  store i8 %v1_a9d8, i8* %v1_a9cc, align 1
  %v0_a9dc = load i32, i32* %r4.global-to-local, align 4
  %v1_a9dc = inttoptr i32 %v0_a9dc to i8*
  %v2_a9dc = load i8, i8* %v1_a9dc, align 1
  %v1_a9e0 = and i8 %v2_a9dc, -16
  %v1_a9e4 = or i8 %v1_a9e0, 5
  store i32 %v1_a788, i32* %r1.global-to-local, align 4
  store i8 %v1_a9e4, i8* %v1_a9dc, align 1
  %v2_a9f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_a9f4 = add i32 %v2_a9f4, 1
  %v4_a9f4 = inttoptr i32 %v3_a9f4 to i8*
  store i8 %v5_a740, i8* %v4_a9f4, align 1
  %v2_a9fc = load i32, i32* %r4.global-to-local, align 4
  %v3_a9fc = add i32 %v2_a9fc, 8
  %v4_a9fc = inttoptr i32 %v3_a9fc to i8*
  store i8 %v5_a778, i8* %v4_a9fc, align 1
  store i32 %v4_a94c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_aa08 = load i32, i32* %r1.global-to-local, align 4
  %v9_aa08 = icmp eq i32 %v0_aa08, 0
  store i1 %v9_aa08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a968, i32* %r2.global-to-local, align 4
  %v2_aa10 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa10 = add i32 %v2_aa10, 4
  %v4_aa10 = inttoptr i32 %v3_aa10 to i8*
  store i8 %v1_aa10, i8* %v4_aa10, align 1
  store i32 %v4_a914, i32* %r1.global-to-local, align 4
  %v0_aa18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa18, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a9ac
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_aa1c = load i32, i32* %r4.global-to-local, align 4
  %v4_aa1c = add i32 %v3_aa1c, 6
  %v5_aa1c = inttoptr i32 %v4_aa1c to i8*
  store i8 64, i8* %v5_aa1c, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a9ac, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_aa24 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa24 = trunc i32 %v0_aa24 to i8
  %v2_aa24 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa24 = add i32 %v2_aa24, 3
  %v4_aa24 = inttoptr i32 %v3_aa24 to i8*
  store i8 %v1_aa24, i8* %v4_aa24, align 1
  %v0_aa28 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa28 = trunc i32 %v0_aa28 to i8
  %v2_aa28 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa28 = add i32 %v2_aa28, 2
  %v4_aa28 = inttoptr i32 %v3_aa28 to i8*
  store i8 %v1_aa28, i8* %v4_aa28, align 1
  %v0_aa2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa2c, label %bb88, label %bb87

bb87:                                             ; preds = %.thread
  %v1_aa2c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_aa2c, i32* %r2.global-to-local, align 4
  br label %bb88

bb88:                                             ; preds = %.thread, %bb87
  store i32 %v3_a96c, i32* %r1.global-to-local, align 4
  %v0_aa34 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa34 = trunc i32 %v0_aa34 to i8
  %v2_aa34 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa34 = add i32 %v2_aa34, 9
  %v4_aa34 = inttoptr i32 %v3_aa34 to i8*
  store i8 %v1_aa34, i8* %v4_aa34, align 1
  %v0_aa38 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa38, label %bb90, label %bb89

bb89:                                             ; preds = %bb88
  %v1_aa38 = load i32, i32* %r2.global-to-local, align 4
  %v2_aa38 = trunc i32 %v1_aa38 to i8
  %v3_aa38 = load i32, i32* %r4.global-to-local, align 4
  %v4_aa38 = add i32 %v3_aa38, 7
  %v5_aa38 = inttoptr i32 %v4_aa38 to i8*
  store i8 %v2_aa38, i8* %v5_aa38, align 1
  br label %bb90

bb90:                                             ; preds = %bb88, %bb89
  %v3_aa3c = load i32, i32* %stack_var_-40, align 4
  %v5_aa44 = mul i32 %v3_aa3c, 24
  store i32 %v5_aa44, i32* %r3.global-to-local, align 4
  store i32 %v5_a828, i32* %r2.global-to-local, align 4
  %v1_aa4c = load i32, i32* %r4.global-to-local, align 4
  %v2_aa4c = add i32 %v1_aa4c, 12
  %v3_aa4c = inttoptr i32 %v2_aa4c to i32*
  store i32 %v5_a828, i32* %v3_aa4c, align 4
  %v0_aa50 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa50 = load i32, i32* @sb, align 4
  %v2_aa50 = add i32 %v1_aa50, %v0_aa50
  store i32 %v2_aa50, i32* %r3.global-to-local, align 4
  %v1_aa54 = add i32 %v2_aa50, 16
  %v2_aa54 = inttoptr i32 %v1_aa54 to i32*
  %v3_aa54 = load i32, i32* %v2_aa54, align 4
  store i32 %v3_aa54, i32* %r2.global-to-local, align 4
  %v0_aa58 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa58 = trunc i32 %v0_aa58 to i8
  %v2_aa58 = load i32, i32* %r4.global-to-local, align 4
  %v3_aa58 = add i32 %v2_aa58, 5
  %v4_aa58 = inttoptr i32 %v3_aa58 to i8*
  store i8 %v1_aa58, i8* %v4_aa58, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_aa60 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa60 = add i32 %v0_aa60, 20
  store i32 %v1_aa60, i32* %r1.global-to-local, align 4
  %v3_aa64 = add i32 %v0_aa60, 22
  %v4_aa64 = inttoptr i32 %v3_aa64 to i8*
  store i8 101, i8* %v4_aa64, align 1
  %v0_aa68 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa68 = load i32, i32* %r4.global-to-local, align 4
  %v2_aa68 = add i32 %v1_aa68, 16
  %v3_aa68 = inttoptr i32 %v2_aa68 to i32*
  store i32 %v0_aa68, i32* %v3_aa68, align 4
  %v0_aa6c = load i32, i32* %r4.global-to-local, align 4
  %v1_aa6c = add i32 %v0_aa6c, 24
  store i32 %v1_aa6c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_aa74 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa74 = add i32 %v0_aa74, -93
  store i32 %v1_aa74, i32* %r3.global-to-local, align 4
  %v2_aa78 = load i32, i32* %r1.global-to-local, align 4
  %v3_aa78 = add i32 %v2_aa78, 3
  %v4_aa78 = inttoptr i32 %v3_aa78 to i8*
  store i8 88, i8* %v4_aa78, align 1
  %v0_aa7c = load i32, i32* %r3.global-to-local, align 4
  %v1_aa7c = trunc i32 %v0_aa7c to i8
  %v2_aa7c = load i32, i32* %r0.global-to-local, align 4
  %v3_aa7c = add i32 %v2_aa7c, 12
  %v4_aa7c = inttoptr i32 %v3_aa7c to i8*
  store i8 %v1_aa7c, i8* %v4_aa7c, align 1
  %v0_aa80 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa80 = trunc i32 %v0_aa80 to i8
  %v2_aa80 = load i32, i32* %r0.global-to-local, align 4
  %v3_aa80 = add i32 %v2_aa80, 13
  %v4_aa80 = inttoptr i32 %v3_aa80 to i8*
  store i8 %v1_aa80, i8* %v4_aa80, align 1
  %v0_aa84 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa84 = add i32 %v0_aa84, 38
  %v2_aa84 = inttoptr i32 %v1_aa84 to i8*
  %v3_aa84 = load i8, i8* %v2_aa84, align 1
  %tmp103 = urem i8 %v3_aa84, 16
  %v1_aa88 = zext i8 %tmp103 to i32
  %v1_aa8c = or i32 %v1_aa88, 64
  store i32 %v1_aa8c, i32* %r3.global-to-local, align 4
  %v1_aa90 = trunc i32 %v1_aa8c to i8
  store i8 %v1_aa90, i8* %v2_aa84, align 1
  %v0_aa94 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa94 = add i32 %v0_aa94, 38
  %v2_aa94 = inttoptr i32 %v1_aa94 to i8*
  %v3_aa94 = load i8, i8* %v2_aa94, align 1
  %v1_aa98 = and i8 %v3_aa94, -16
  %v1_aa9c = or i8 %v1_aa98, 5
  store i8 %v1_aa9c, i8* %v2_aa94, align 1
  %v0_aaa8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aaa8 = add i32 %v0_aaa8, 38
  store i32 %v1_aaa8, i32* @r5, align 4
  %v3_aaac = add i32 %v0_aaa8, 39
  %v4_aaac = inttoptr i32 %v3_aaac to i8*
  store i8 %v5_a740, i8* %v4_aaac, align 1
  store i32 %v4_a95c, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_a97c, i32* %r2.global-to-local, align 4
  %v2_aabc = load i32, i32* @r5, align 4
  %v3_aabc = add i32 %v2_aabc, 4
  %v4_aabc = inttoptr i32 %v3_aabc to i8*
  store i8 %v5_a98c, i8* %v4_aabc, align 1
  %v0_aac0 = load i32, i32* %r1.global-to-local, align 4
  %v1_aac0 = trunc i32 %v0_aac0 to i8
  %v2_aac0 = load i32, i32* @r5, align 4
  %v3_aac0 = add i32 %v2_aac0, 2
  %v4_aac0 = inttoptr i32 %v3_aac0 to i8*
  store i8 %v1_aac0, i8* %v4_aac0, align 1
  %v0_aac4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aac4, label %bb92, label %bb91

bb91:                                             ; preds = %bb90
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %bb90, %bb91
  store i32 %v4_aac8, i32* %r1.global-to-local, align 4
  %v0_aacc = load i32, i32* %r2.global-to-local, align 4
  %v1_aacc = trunc i32 %v0_aacc to i8
  %v2_aacc = load i32, i32* @r5, align 4
  %v3_aacc = add i32 %v2_aacc, 3
  %v4_aacc = inttoptr i32 %v3_aacc to i8*
  store i8 %v1_aacc, i8* %v4_aacc, align 1
  store i32 %v4_a9f8, i32* %r2.global-to-local, align 4
  %v0_aad4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aad4, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_aad4 = load i32, i32* %r3.global-to-local, align 4
  %v2_aad4 = trunc i32 %v1_aad4 to i8
  %v3_aad4 = load i32, i32* @r5, align 4
  %v4_aad4 = add i32 %v3_aad4, 6
  %v5_aad4 = inttoptr i32 %v4_aad4 to i8*
  store i8 %v2_aad4, i8* %v5_aad4, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_aadc = load i32, i32* %r1.global-to-local, align 4
  %v1_aadc = trunc i32 %v0_aadc to i8
  %v2_aadc = load i32, i32* @r5, align 4
  %v3_aadc = add i32 %v2_aadc, 5
  %v4_aadc = inttoptr i32 %v3_aadc to i8*
  store i8 %v1_aadc, i8* %v4_aadc, align 1
  %v0_aae0 = load i32, i32* %r2.global-to-local, align 4
  %v1_aae0 = trunc i32 %v0_aae0 to i8
  %v2_aae0 = load i32, i32* @r5, align 4
  %v3_aae0 = add i32 %v2_aae0, 8
  %v4_aae0 = inttoptr i32 %v3_aae0 to i8*
  store i8 %v1_aae0, i8* %v4_aae0, align 1
  %v0_aae4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aae4, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_aae4 = load i32, i32* %ip.global-to-local, align 4
  %v2_aae4 = trunc i32 %v1_aae4 to i8
  %v3_aae4 = load i32, i32* @r5, align 4
  %v4_aae4 = add i32 %v3_aae4, 7
  %v5_aae4 = inttoptr i32 %v4_aae4 to i8*
  store i8 %v2_aae4, i8* %v5_aae4, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_aae8 = load i32, i32* %r3.global-to-local, align 4
  %v1_aae8 = trunc i32 %v0_aae8 to i8
  %v2_aae8 = load i32, i32* @r5, align 4
  %v3_aae8 = add i32 %v2_aae8, 9
  %v4_aae8 = inttoptr i32 %v3_aae8 to i8*
  store i8 %v1_aae8, i8* %v4_aae8, align 1
  %v0_aaec = call i32 @function_f8c0()
  store i32 %v0_aaec, i32* %r0.global-to-local, align 4
  store i32 %v1_a8a0, i32* %r1.global-to-local, align 4
  store i1 %v2_aaf8, i1* %cpsr_z.global-to-local, align 1
  %v1_aafc = sub i32 1023, %v0_aaec
  store i32 %v1_aafc, i32* %r3.global-to-local, align 4
  br i1 %v2_aaf8, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb96
  %v2_ab04 = load i32, i32* @r5, align 4
  %v3_ab04 = add i32 %v2_ab04, 16
  %v4_ab04 = inttoptr i32 %v3_ab04 to i32*
  store i32 %v1_aafc, i32* %v4_ab04, align 4
  br label %bb97

.thread19:                                        ; preds = %bb96
  %v1_ab00 = load i32, i32* %r4.global-to-local, align 4
  %v2_ab00 = add i32 %v1_ab00, 16
  %v3_ab00 = inttoptr i32 %v2_ab00 to i32*
  %v4_ab00 = load i32, i32* %v3_ab00, align 4
  store i32 %v4_ab00, i32* %r3.global-to-local, align 4
  %v2_ab08 = load i32, i32* @r5, align 4
  %v3_ab08 = add i32 %v2_ab08, 16
  %v4_ab08 = inttoptr i32 %v3_ab08 to i32*
  store i32 %v4_ab00, i32* %v4_ab08, align 4
  br label %bb97

bb97:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_ab0c, i32* %r3.global-to-local, align 4
  %v0_ab10 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab10 = add i32 %v0_ab10, 58
  store i32 %v1_ab10, i32* @r6, align 4
  %v1_ab14 = load i32, i32* @r5, align 4
  %v2_ab14 = add i32 %v1_ab14, 12
  %v3_ab14 = inttoptr i32 %v2_ab14 to i32*
  store i32 %v0_aaec, i32* %v3_ab14, align 4
  %v0_ab18 = load i32, i32* %r3.global-to-local, align 4
  %v1_ab18 = trunc i32 %v0_ab18 to i8
  %v2_ab18 = load i32, i32* @r6, align 4
  %v3_ab18 = add i32 %v2_ab18, 1
  %v4_ab18 = inttoptr i32 %v3_ab18 to i8*
  store i8 %v1_ab18, i8* %v4_ab18, align 1
  %v3_ab1c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab1c, i32* %r3.global-to-local, align 4
  store i32 %v1_a6dc, i32* %r1.global-to-local, align 4
  %v1_ab24 = add i32 %v3_ab1c, 1
  store i32 %v1_ab24, i32* @r4, align 4
  store i32 %v4_ab28, i32* %r2.global-to-local, align 4
  %v9_ab2c = icmp eq i32 %v1_ab24, %v1_a6dc
  store i1 %v9_ab2c, i1* %cpsr_z.global-to-local, align 1
  %v0_ab30 = load i32, i32* %sl.global-to-local, align 4
  %v1_ab30 = trunc i32 %v0_ab30 to i8
  %v2_ab30 = load i32, i32* @r6, align 4
  %v3_ab30 = add i32 %v2_ab30, 5
  %v4_ab30 = inttoptr i32 %v3_ab30 to i8*
  store i8 %v1_ab30, i8* %v4_ab30, align 1
  %v0_ab34 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab34 = trunc i32 %v0_ab34 to i8
  %v2_ab34 = load i32, i32* @r6, align 4
  %v3_ab34 = inttoptr i32 %v2_ab34 to i8*
  store i8 %v1_ab34, i8* %v3_ab34, align 1
  %v0_ab38 = load i32, i32* @r7, align 4
  %v1_ab38 = trunc i32 %v0_ab38 to i8
  %v2_ab38 = load i32, i32* @r6, align 4
  %v3_ab38 = add i32 %v2_ab38, 2
  %v4_ab38 = inttoptr i32 %v3_ab38 to i8*
  store i8 %v1_ab38, i8* %v4_ab38, align 1
  %v0_ab3c = load i32, i32* %fp.global-to-local, align 4
  %v1_ab3c = trunc i32 %v0_ab3c to i8
  %v2_ab3c = load i32, i32* @r6, align 4
  %v3_ab3c = add i32 %v2_ab3c, 3
  %v4_ab3c = inttoptr i32 %v3_ab3c to i8*
  store i8 %v1_ab3c, i8* %v4_ab3c, align 1
  %v0_ab40 = load i32, i32* %r8.global-to-local, align 4
  %v1_ab40 = trunc i32 %v0_ab40 to i8
  %v2_ab40 = load i32, i32* @r6, align 4
  %v3_ab40 = add i32 %v2_ab40, 4
  %v4_ab40 = inttoptr i32 %v3_ab40 to i8*
  store i8 %v1_ab40, i8* %v4_ab40, align 1
  %v0_ab44 = load i32, i32* @r4, align 4
  store i32 %v0_ab44, i32* %stack_var_-40, align 4
  %v5_ab48 = icmp slt i32 %v1_ab24, %v1_a6dc
  br i1 %v5_ab48, label %dec_label_pc_a9ac, label %dec_label_pc_ab4c.preheader

dec_label_pc_ab4c.preheader:                      ; preds = %bb97, %dec_label_pc_a884
  %v1_ab6c = add i32 %v5_a7d4, 66
  %v1_ab70 = add i32 %v5_a7d4, 8
  %v2_ab84 = icmp eq i32 %v5_a828, -1
  %v7_ab84 = icmp eq i32 %v5_a828, -1
  %v3_ada8 = icmp eq i32 %v3_a8a4, 65535
  %v2_ae18 = icmp eq i32 %v1_a8a0, 0
  %v2_abe0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_abf8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_ac08 = ptrtoint i32* %stack_var_-52 to i32
  %v2_ac14 = ptrtoint i32* %stack_var_-50 to i32
  %v2_ac28 = icmp eq i32 %v1_a7f4, 0
  br label %dec_label_pc_ab4c

dec_label_pc_ab4c:                                ; preds = %dec_label_pc_ab4c.preheader, %dec_label_pc_ae54
  store i32 %v1_a6dc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_a89c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_a89c, label %dec_label_pc_ae54, label %dec_label_pc_ab60

dec_label_pc_ab60:                                ; preds = %dec_label_pc_ab4c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_a7d4, i32* %r1.global-to-local, align 4
  store i32 %v1_ab6c, i32* @fp, align 4
  store i32 %v1_ab70, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_ad04

dec_label_pc_ab80:                                ; preds = %dec_label_pc_ad04
  store i32 %v5_a828, i32* %r2.global-to-local, align 4
  store i1 %v7_ab84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ab84, label %dec_label_pc_ad98, label %dec_label_pc_ab8c

dec_label_pc_ab8c:                                ; preds = %dec_label_pc_ad30, %dec_label_pc_ab80
  store i32 %v3_a8a4, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ada8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ada8, label %dec_label_pc_adb4, label %dec_label_pc_aba0

dec_label_pc_aba0:                                ; preds = %dec_label_pc_ad98.dec_label_pc_aba0_crit_edge, %dec_label_pc_ab8c
  %v1_aba4 = phi i32 [ %v1_aba4.pre, %dec_label_pc_ad98.dec_label_pc_aba0_crit_edge ], [ 65535, %dec_label_pc_ab8c ]
  store i32 %v3_a8a8, i32* %r1.global-to-local, align 4
  %v9_aba4 = icmp eq i32 %v3_a8a8, %v1_aba4
  store i1 %v9_aba4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aba4, label %dec_label_pc_adec, label %dec_label_pc_abac

dec_label_pc_abac:                                ; preds = %dec_label_pc_adb4.dec_label_pc_abac_crit_edge, %dec_label_pc_aba0
  %v1_abb0 = phi i32 [ %v1_abb0.pre, %dec_label_pc_adb4.dec_label_pc_abac_crit_edge ], [ %v1_aba4, %dec_label_pc_aba0 ]
  store i32 %v3_a8ac, i32* %r2.global-to-local, align 4
  %v9_abb0 = icmp eq i32 %v3_a8ac, %v1_abb0
  store i1 %v9_abb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_abb0, label %dec_label_pc_ae08, label %dec_label_pc_abb8

dec_label_pc_abb8:                                ; preds = %dec_label_pc_adec, %dec_label_pc_abac
  store i32 %v1_a8a0, i32* %r3.global-to-local, align 4
  store i1 %v2_ae18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae18, label %dec_label_pc_ae2c, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_abb8
  %v1_abc0 = load i32, i32* @r5, align 4
  %v2_abc0 = add i32 %v1_abc0, 16
  %v3_abc0 = inttoptr i32 %v2_abc0 to i32*
  %v4_abc0 = load i32, i32* %v3_abc0, align 4
  store i32 %v4_abc0, i32* %r3.global-to-local, align 4
  %v2_abc4 = load i32, i32* @r6, align 4
  %v3_abc4 = add i32 %v2_abc4, 16
  %v4_abc4 = inttoptr i32 %v3_abc4 to i32*
  store i32 %v4_abc0, i32* %v4_abc4, align 4
  br label %dec_label_pc_abcc

dec_label_pc_abcc:                                ; preds = %bb102, %.thread20, %dec_label_pc_ae2c
  %v0_abcc = call i32 @function_f8c0()
  store i32 %v0_abcc, i32* %r0.global-to-local, align 4
  store i32 %v0_abcc, i32* %stack_var_-44, align 4
  %v0_abd4 = call i32 @function_f8c0()
  store i32 %v0_abd4, i32* %r0.global-to-local, align 4
  store i32 %v0_abd4, i32* %stack_var_-48, align 4
  %v0_abdc = call i32 @function_f8c0()
  store i32 %v2_abe0, i32* %r1.global-to-local, align 4
  store i32 %v0_abdc, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_abec = load i32, i32* @r8, align 4
  store i32 %v0_abec, i32* %r0.global-to-local, align 4
  %v3_abf0 = call i32 @function_120c0(i32 %v0_abec, i32 %v2_abe0, i32 4)
  %v0_abf4 = load i32, i32* @r8, align 4
  %v1_abf4 = add i32 %v0_abf4, 6
  store i32 %v1_abf4, i32* %r0.global-to-local, align 4
  store i32 %v2_abf8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_ac00 = call i32 @function_120c0(i32 %v1_abf4, i32 %v2_abf8, i32 4)
  %v0_ac04 = load i32, i32* @r8, align 4
  %v1_ac04 = add i32 %v0_ac04, 4
  store i32 %v1_ac04, i32* %r0.global-to-local, align 4
  store i32 %v2_ac08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ac10 = call i32 @function_120c0(i32 %v1_ac04, i32 %v2_ac08, i32 2)
  store i32 %v2_ac14, i32* %r1.global-to-local, align 4
  %v0_ac18 = load i32, i32* @r8, align 4
  %v1_ac18 = add i32 %v0_ac18, 10
  store i32 %v1_ac18, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ac20 = call i32 @function_120c0(i32 %v1_ac18, i32 %v2_ac14, i32 2)
  store i32 %v3_ac20, i32* %r0.global-to-local, align 4
  store i32 %v1_a7f4, i32* %r1.global-to-local, align 4
  store i1 %v2_ac28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac28, label %dec_label_pc_ac30, label %dec_label_pc_ae38

dec_label_pc_ac30:                                ; preds = %dec_label_pc_abcc, %dec_label_pc_ae38
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ac34 = load i32, i32* @sl, align 4
  %v1_ac34 = trunc i32 %v0_ac34 to i8
  %v2_ac34 = load i32, i32* @r5, align 4
  %v3_ac34 = add i32 %v2_ac34, 10
  %v4_ac34 = inttoptr i32 %v3_ac34 to i8*
  store i8 %v1_ac34, i8* %v4_ac34, align 1
  %v0_ac38 = load i32, i32* @sl, align 4
  %v1_ac38 = trunc i32 %v0_ac38 to i8
  %v2_ac38 = load i32, i32* @r5, align 4
  %v3_ac38 = add i32 %v2_ac38, 11
  %v4_ac38 = inttoptr i32 %v3_ac38 to i8*
  store i8 %v1_ac38, i8* %v4_ac38, align 1
  %v0_ac3c = load i32, i32* @r5, align 4
  store i32 %v0_ac3c, i32* @r0, align 4
  %v2_ac40 = call i32 @function_e498(i32 %v0_ac3c, i32 20)
  %v3_ac40 = trunc i32 %v2_ac40 to i8
  %v4_ac44 = sdiv i32 %v2_ac40, 256
  store i32 %v4_ac44, i32* %r3.global-to-local, align 4
  %v1_ac48 = trunc i32 %v4_ac44 to i8
  %v2_ac48 = load i32, i32* @r5, align 4
  %v3_ac48 = add i32 %v2_ac48, 11
  %v4_ac48 = inttoptr i32 %v3_ac48 to i8*
  store i8 %v1_ac48, i8* %v4_ac48, align 1
  %v3_ac4c = load i32, i32* @r5, align 4
  %v4_ac4c = add i32 %v3_ac4c, 10
  %v5_ac4c = inttoptr i32 %v4_ac4c to i8*
  store i8 %v3_ac40, i8* %v5_ac4c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ac54 = load i32, i32* @sl, align 4
  %v1_ac54 = trunc i32 %v0_ac54 to i8
  %v2_ac54 = load i32, i32* @r6, align 4
  %v3_ac54 = add i32 %v2_ac54, 10
  %v4_ac54 = inttoptr i32 %v3_ac54 to i8*
  store i8 %v1_ac54, i8* %v4_ac54, align 1
  %v0_ac58 = load i32, i32* @sl, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i8
  %v2_ac58 = load i32, i32* @r6, align 4
  %v3_ac58 = add i32 %v2_ac58, 11
  %v4_ac58 = inttoptr i32 %v3_ac58 to i8*
  store i8 %v1_ac58, i8* %v4_ac58, align 1
  %v0_ac5c = load i32, i32* @r6, align 4
  store i32 %v0_ac5c, i32* @r0, align 4
  %v2_ac60 = call i32 @function_e498(i32 %v0_ac5c, i32 20)
  %v3_ac60 = trunc i32 %v2_ac60 to i8
  store i32 %v2_ac60, i32* %r0.global-to-local, align 4
  %v4_ac64 = sdiv i32 %v2_ac60, 256
  store i32 %v4_ac64, i32* %r3.global-to-local, align 4
  %v3_ac68 = load i32, i32* @r6, align 4
  %v4_ac68 = add i32 %v3_ac68, 10
  %v5_ac68 = inttoptr i32 %v4_ac68 to i8*
  store i8 %v3_ac60, i8* %v5_ac68, align 1
  %v0_ac6c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac6c = trunc i32 %v0_ac6c to i8
  %v2_ac6c = load i32, i32* @r6, align 4
  %v3_ac6c = add i32 %v2_ac6c, 11
  %v4_ac6c = inttoptr i32 %v3_ac6c to i8*
  store i8 %v1_ac6c, i8* %v4_ac6c, align 1
  %v0_ac70 = load i32, i32* @r7, align 4
  %v1_ac70 = add i32 %v0_ac70, 4
  %v2_ac70 = inttoptr i32 %v1_ac70 to i8*
  %v3_ac70 = load i8, i8* %v2_ac70, align 1
  %v4_ac70 = zext i8 %v3_ac70 to i32
  store i32 %v4_ac70, i32* %r3.global-to-local, align 4
  %v1_ac74 = add i32 %v0_ac70, 5
  %v2_ac74 = inttoptr i32 %v1_ac74 to i8*
  %v3_ac74 = load i8, i8* %v2_ac74, align 1
  %v4_ac74 = zext i8 %v3_ac74 to i32
  store i32 %v0_ac70, i32* @r1, align 4
  %v4_ac7c = mul nuw nsw i32 %v4_ac74, 256
  %v5_ac7c = or i32 %v4_ac7c, %v4_ac70
  store i32 %v5_ac7c, i32* %r2.global-to-local, align 4
  %v0_ac80 = load i32, i32* @sl, align 4
  %v1_ac80 = trunc i32 %v0_ac80 to i8
  %v3_ac80 = add i32 %v0_ac70, 6
  %v4_ac80 = inttoptr i32 %v3_ac80 to i8*
  store i8 %v1_ac80, i8* %v4_ac80, align 1
  store i32 %v1_ab70, i32* %r3.global-to-local, align 4
  %v0_ac88 = load i32, i32* @sl, align 4
  %v1_ac88 = trunc i32 %v0_ac88 to i8
  %v2_ac88 = load i32, i32* @r7, align 4
  %v3_ac88 = add i32 %v2_ac88, 7
  %v4_ac88 = inttoptr i32 %v3_ac88 to i8*
  store i8 %v1_ac88, i8* %v4_ac88, align 1
  %v0_ac8c = load i32, i32* @r6, align 4
  store i32 %v0_ac8c, i32* %r0.global-to-local, align 4
  %v4_ac90 = call i32 @function_e4f4(i32 %v0_ac8c, i32 %v0_ac70, i32 %v5_ac7c, i32 %v1_ab70)
  %v5_ac90 = trunc i32 %v4_ac90 to i8
  store i32 %v4_ac90, i32* %r0.global-to-local, align 4
  %v3_ac94 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ac94, i32* %r3.global-to-local, align 4
  %v3_ac98 = mul i32 %v3_ac94, 32
  store i32 %v3_ac98, i32* %r2.global-to-local, align 4
  %v0_ac9c = load i32, i32* @r5, align 4
  %v1_ac9c = add i32 %v0_ac9c, 16
  %v2_ac9c = inttoptr i32 %v1_ac9c to i32*
  %v3_ac9c = load i32, i32* %v2_ac9c, align 4
  store i32 %v3_ac9c, i32* %r1.global-to-local, align 4
  %v5_aca0 = mul i32 %v3_ac94, 24
  store i32 %v5_aca0, i32* %r2.global-to-local, align 4
  %v4_aca435 = udiv i32 %v4_ac90, 256
  %v1_aca8 = trunc i32 %v4_aca435 to i8
  %v2_aca8 = load i32, i32* @r7, align 4
  %v3_aca8 = add i32 %v2_aca8, 7
  %v4_aca8 = inttoptr i32 %v3_aca8 to i8*
  store i8 %v1_aca8, i8* %v4_aca8, align 1
  %v0_acac = load i32, i32* %r2.global-to-local, align 4
  %v1_acac = load i32, i32* @sb, align 4
  %v2_acac = add i32 %v1_acac, %v0_acac
  store i32 %v2_acac, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_acb4 = load i32, i32* @r7, align 4
  %v4_acb4 = add i32 %v3_acb4, 6
  %v5_acb4 = inttoptr i32 %v4_acb4 to i8*
  store i8 %v5_ac90, i8* %v5_acb4, align 1
  %v0_acb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_acb8 = load i32, i32* %lr.global-to-local, align 4
  %v2_acb8 = add i32 %v1_acb8, 4
  %v3_acb8 = inttoptr i32 %v2_acb8 to i32*
  store i32 %v0_acb8, i32* %v3_acb8, align 4
  %v0_acbc = load i32, i32* %r3.global-to-local, align 4
  %v1_acbc = trunc i32 %v0_acbc to i8
  %v2_acbc = load i32, i32* %r2.global-to-local, align 4
  %v3_acbc = load i32, i32* @sb, align 4
  %v4_acbc = add i32 %v3_acbc, %v2_acbc
  %v5_acbc = inttoptr i32 %v4_acbc to i8*
  store i8 %v1_acbc, i8* %v5_acbc, align 1
  %v0_acc0 = load i32, i32* @sl, align 4
  %v1_acc0 = trunc i32 %v0_acc0 to i8
  %v2_acc0 = load i32, i32* %lr.global-to-local, align 4
  %v3_acc0 = add i32 %v2_acc0, 2
  %v4_acc0 = inttoptr i32 %v3_acc0 to i8*
  store i8 %v1_acc0, i8* %v4_acc0, align 1
  %v0_acc4 = load i32, i32* @sl, align 4
  %v1_acc4 = trunc i32 %v0_acc4 to i8
  %v2_acc4 = load i32, i32* %lr.global-to-local, align 4
  %v3_acc4 = add i32 %v2_acc4, 1
  %v4_acc4 = inttoptr i32 %v3_acc4 to i8*
  store i8 %v1_acc4, i8* %v4_acc4, align 1
  %v0_acc8 = load i32, i32* @sl, align 4
  %v1_acc8 = trunc i32 %v0_acc8 to i8
  %v2_acc8 = load i32, i32* %lr.global-to-local, align 4
  %v3_acc8 = add i32 %v2_acc8, 3
  %v4_acc8 = inttoptr i32 %v3_acc8 to i8*
  store i8 %v1_acc8, i8* %v4_acc8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r5, align 4
  store i32 %v0_acd4, i32* %r1.global-to-local, align 4
  store i32 %v3_a84c, i32* %r0.global-to-local, align 4
  %v0_acdc = load i32, i32* @fp, align 4
  store i32 %v0_acdc, i32* %r2.global-to-local, align 4
  %v0_ace0 = load i32, i32* %lr.global-to-local, align 4
  %v6_ace8 = inttoptr i32 %v0_acd4 to i32*
  %v7_ace8 = call i32 @function_13258(i32 %v3_a84c, i32* %v6_ace8, i32 %v0_acdc, i32 16384, i32 %v0_ace0, i32 16)
  %v3_acec = load i32, i32* %stack_var_-40, align 4
  %v1_acf0 = add i32 %v3_acec, 1
  store i32 %v1_acf0, i32* %r0.global-to-local, align 4
  store i32 %v1_a6dc, i32* %r3.global-to-local, align 4
  %v9_acf8 = icmp eq i32 %v1_acf0, %v1_a6dc
  store i1 %v9_acf8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_acf0, i32* %stack_var_-40, align 4
  %v6_ad00 = icmp slt i32 %v1_acf0, %v1_a6dc
  br i1 %v6_ad00, label %dec_label_pc_ad04, label %dec_label_pc_ae54

dec_label_pc_ad04:                                ; preds = %dec_label_pc_ac30, %dec_label_pc_ab60
  %v1_ad18 = phi i32 [ %v1_acf0, %dec_label_pc_ac30 ], [ 0, %dec_label_pc_ab60 ]
  %v5_ad08 = mul i32 %v1_ad18, 24
  %v1_ad0c = load i32, i32* @sb, align 4
  %v2_ad0c = add i32 %v1_ad0c, %v5_ad08
  store i32 %v2_ad0c, i32* %r3.global-to-local, align 4
  store i32 %v2_a708, i32* %r1.global-to-local, align 4
  %v1_ad14 = add i32 %v2_ad0c, 20
  %v2_ad14 = inttoptr i32 %v1_ad14 to i8*
  %v3_ad14 = load i8, i8* %v2_ad14, align 1
  %v4_ad14 = zext i8 %v3_ad14 to i32
  store i32 %v4_ad14, i32* %r2.global-to-local, align 4
  %v4_ad18 = mul i32 %v1_ad18, 4
  %v5_ad18 = add i32 %v4_ad18, %v2_a708
  %v6_ad18 = inttoptr i32 %v5_ad18 to i32*
  %v7_ad18 = load i32, i32* %v6_ad18, align 4
  store i32 %v7_ad18, i32* @r5, align 4
  %v2_ad1c = icmp ugt i8 %v3_ad14, 30
  %v7_ad1c = icmp eq i8 %v3_ad14, 31
  store i1 %v7_ad1c, i1* %cpsr_z.global-to-local, align 1
  %v1_ad20 = add i32 %v7_ad18, 24
  store i32 %v1_ad20, i32* @r8, align 4
  %v1_ad24 = add i32 %v7_ad18, 38
  store i32 %v1_ad24, i32* @r6, align 4
  %v1_ad28 = add i32 %v7_ad18, 58
  store i32 %v1_ad28, i32* @r7, align 4
  %v2_ad2c = xor i1 %v7_ad1c, true
  %v3_ad2c = and i1 %v2_ad1c, %v2_ad2c
  br i1 %v3_ad2c, label %dec_label_pc_ab80, label %dec_label_pc_ad30

dec_label_pc_ad30:                                ; preds = %dec_label_pc_ad04
  %v1_ad30 = add i32 %v2_ad0c, 16
  %v2_ad30 = inttoptr i32 %v1_ad30 to i32*
  %v3_ad30 = load i32, i32* %v2_ad30, align 4
  store i32 %v3_ad30, i32* %r4.global-to-local, align 4
  %v0_ad34 = call i32 @function_f8c0()
  store i32 %v0_ad34, i32* %r0.global-to-local, align 4
  %v3_ad38 = load i32, i32* %stack_var_-40, align 4
  %v5_ad40 = mul i32 %v3_ad38, 24
  %v0_ad44 = load i32, i32* %r4.global-to-local, align 4
  %v1_ad48 = load i32, i32* @sb, align 4
  %v2_ad48 = add i32 %v1_ad48, %v5_ad40
  store i32 %v2_ad48, i32* %r1.global-to-local, align 4
  %v1_ad4c = and i32 %v0_ad44, 65280
  store i32 %v1_ad4c, i32* %r3.global-to-local, align 4
  %v1_ad44 = udiv i32 %v0_ad44, 256
  %v3_ad50 = and i32 %v1_ad44, 65280
  store i32 %v3_ad50, i32* %r2.global-to-local, align 4
  %v3_ad54 = mul i32 %v0_ad44, 16777216
  store i32 %v3_ad54, i32* %ip.global-to-local, align 4
  %v1_ad58 = add i32 %v2_ad48, 20
  %v2_ad58 = inttoptr i32 %v1_ad58 to i8*
  %v3_ad58 = load i8, i8* %v2_ad58, align 1
  %v4_ad58 = zext i8 %v3_ad58 to i32
  store i32 %v4_ad58, i32* %lr.global-to-local, align 4
  %v4_ad5c = mul nuw nsw i32 %v1_ad4c, 256
  %v5_ad5c = or i32 %v4_ad5c, %v3_ad54
  store i32 %v5_ad5c, i32* %ip.global-to-local, align 4
  %v2_ad64 = call i32 @llvm.bswap.i32(i32 %v0_ad44)
  %v7_ad68 = lshr i32 %v0_ad34, %v4_ad58
  %v8_ad68 = add i32 %v7_ad68, %v2_ad64
  %v3_ad74 = mul i32 %v8_ad68, 16777216
  %v1_ad78 = and i32 %v8_ad68, 65280
  store i32 %v1_ad78, i32* %r0.global-to-local, align 4
  store i32 %v5_a828, i32* %r2.global-to-local, align 4
  %v4_ad84 = mul nuw nsw i32 %v1_ad78, 256
  %v5_ad84 = or i32 %v4_ad84, %v3_ad74
  store i32 %v5_ad84, i32* %r1.global-to-local, align 4
  %v2_ad88 = call i32 @llvm.bswap.i32(i32 %v8_ad68)
  store i32 %v2_ad88, i32* %r3.global-to-local, align 4
  store i1 %v7_ab84, i1* %cpsr_z.global-to-local, align 1
  %v1_ad90 = load i32, i32* @r5, align 4
  %v2_ad90 = add i32 %v1_ad90, 16
  %v3_ad90 = inttoptr i32 %v2_ad90 to i32*
  store i32 %v2_ad88, i32* %v3_ad90, align 4
  br i1 %v2_ab84, label %dec_label_pc_ad98, label %dec_label_pc_ab8c

dec_label_pc_ad98:                                ; preds = %dec_label_pc_ad30, %dec_label_pc_ab80
  %v0_ad98 = call i32 @function_f8c0()
  store i32 %v0_ad98, i32* %r0.global-to-local, align 4
  store i32 %v3_a8a4, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ada8, i1* %cpsr_z.global-to-local, align 1
  %v1_adac = load i32, i32* @r5, align 4
  %v2_adac = add i32 %v1_adac, 12
  %v3_adac = inttoptr i32 %v2_adac to i32*
  store i32 %v0_ad98, i32* %v3_adac, align 4
  br i1 %v3_ada8, label %dec_label_pc_adb4, label %dec_label_pc_ad98.dec_label_pc_aba0_crit_edge

dec_label_pc_ad98.dec_label_pc_aba0_crit_edge:    ; preds = %dec_label_pc_ad98
  %v1_aba4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aba0

dec_label_pc_adb4:                                ; preds = %dec_label_pc_ad98, %dec_label_pc_ab8c
  %v0_adb4 = call i32 @function_f8c0()
  %v3_adbc = urem i32 %v0_adb4, 65536
  store i32 %v3_adbc, i32* %r0.global-to-local, align 4
  %v1_adc4 = sub nsw i32 999, %v3_adbc
  store i32 %v1_adc4, i32* %r2.global-to-local, align 4
  %v3_adc8 = sdiv i32 %v1_adc4, 256
  store i32 %v3_adc8, i32* %r1.global-to-local, align 4
  %v3_adcc34 = udiv i32 %v3_adbc, 256
  store i32 %v3_adcc34, i32* %r3.global-to-local, align 4
  %v1_add0 = trunc i32 %v3_adcc34 to i8
  %v2_add0 = load i32, i32* @r5, align 4
  %v3_add0 = add i32 %v2_add0, 5
  %v4_add0 = inttoptr i32 %v3_add0 to i8*
  store i8 %v1_add0, i8* %v4_add0, align 1
  %v0_add4 = load i32, i32* %r0.global-to-local, align 4
  %v1_add4 = trunc i32 %v0_add4 to i8
  %v2_add4 = load i32, i32* @r5, align 4
  %v3_add4 = add i32 %v2_add4, 4
  %v4_add4 = inttoptr i32 %v3_add4 to i8*
  store i8 %v1_add4, i8* %v4_add4, align 1
  %v0_add8 = load i32, i32* %r1.global-to-local, align 4
  %v1_add8 = trunc i32 %v0_add8 to i8
  %v2_add8 = load i32, i32* @r6, align 4
  %v3_add8 = add i32 %v2_add8, 5
  %v4_add8 = inttoptr i32 %v3_add8 to i8*
  store i8 %v1_add8, i8* %v4_add8, align 1
  store i32 %v3_a8a8, i32* %r1.global-to-local, align 4
  %v1_ade0 = load i32, i32* @r4, align 4
  %v9_ade0 = icmp eq i32 %v3_a8a8, %v1_ade0
  store i1 %v9_ade0, i1* %cpsr_z.global-to-local, align 1
  %v0_ade4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ade4 = trunc i32 %v0_ade4 to i8
  %v2_ade4 = load i32, i32* @r6, align 4
  %v3_ade4 = add i32 %v2_ade4, 4
  %v4_ade4 = inttoptr i32 %v3_ade4 to i8*
  store i8 %v1_ade4, i8* %v4_ade4, align 1
  %v0_ade8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ade8, label %dec_label_pc_adec, label %dec_label_pc_adb4.dec_label_pc_abac_crit_edge

dec_label_pc_adb4.dec_label_pc_abac_crit_edge:    ; preds = %dec_label_pc_adb4
  %v1_abb0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_abac

dec_label_pc_adec:                                ; preds = %dec_label_pc_adb4, %dec_label_pc_aba0
  %v0_adec = call i32 @function_f8c0()
  %v1_adec = trunc i32 %v0_adec to i8
  store i32 %v0_adec, i32* %r0.global-to-local, align 4
  store i32 %v3_a8ac, i32* %r2.global-to-local, align 4
  %v4_adf4 = sdiv i32 %v0_adec, 256
  store i32 %v4_adf4, i32* %r3.global-to-local, align 4
  %v1_adf8 = load i32, i32* @r4, align 4
  %v9_adf8 = icmp eq i32 %v3_a8ac, %v1_adf8
  store i1 %v9_adf8, i1* %cpsr_z.global-to-local, align 1
  %v3_adfc = load i32, i32* @r5, align 4
  %v4_adfc = add i32 %v3_adfc, 58
  %v5_adfc = inttoptr i32 %v4_adfc to i8*
  store i8 %v1_adec, i8* %v5_adfc, align 1
  %v0_ae00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae00 = trunc i32 %v0_ae00 to i8
  %v2_ae00 = load i32, i32* @r7, align 4
  %v3_ae00 = add i32 %v2_ae00, 1
  %v4_ae00 = inttoptr i32 %v3_ae00 to i8*
  store i8 %v1_ae00, i8* %v4_ae00, align 1
  %v0_ae04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae04, label %dec_label_pc_ae08, label %dec_label_pc_abb8

dec_label_pc_ae08:                                ; preds = %dec_label_pc_adec, %dec_label_pc_abac
  %v0_ae08 = call i32 @function_f8c0()
  %v1_ae08 = trunc i32 %v0_ae08 to i8
  store i32 %v0_ae08, i32* %r0.global-to-local, align 4
  %v4_ae0c36 = udiv i32 %v0_ae08, 256
  %v1_ae10 = trunc i32 %v4_ae0c36 to i8
  %v2_ae10 = load i32, i32* @r7, align 4
  %v3_ae10 = add i32 %v2_ae10, 3
  %v4_ae10 = inttoptr i32 %v3_ae10 to i8*
  store i8 %v1_ae10, i8* %v4_ae10, align 1
  store i32 %v1_a8a0, i32* %r3.global-to-local, align 4
  store i1 %v2_ae18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ae18, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_ae08
  %v1_ae1c = load i32, i32* @r5, align 4
  %v2_ae1c = add i32 %v1_ae1c, 16
  %v3_ae1c = inttoptr i32 %v2_ae1c to i32*
  %v4_ae1c = load i32, i32* %v3_ae1c, align 4
  store i32 %v4_ae1c, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_ae08, %bb100
  %v3_ae20 = load i32, i32* @r7, align 4
  %v4_ae20 = add i32 %v3_ae20, 2
  %v5_ae20 = inttoptr i32 %v4_ae20 to i8*
  store i8 %v1_ae08, i8* %v5_ae20, align 1
  %v0_ae24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae24, label %dec_label_pc_ae2c, label %bb102

bb102:                                            ; preds = %bb101
  %v1_ae24 = load i32, i32* %r3.global-to-local, align 4
  %v2_ae24 = load i32, i32* @r6, align 4
  %v3_ae24 = add i32 %v2_ae24, 16
  %v4_ae24 = inttoptr i32 %v3_ae24 to i32*
  store i32 %v1_ae24, i32* %v4_ae24, align 4
  br label %dec_label_pc_abcc

dec_label_pc_ae2c:                                ; preds = %dec_label_pc_abb8, %bb101
  %v0_ae2c = call i32 @function_f8c0()
  store i32 %v0_ae2c, i32* %r0.global-to-local, align 4
  %v1_ae30 = load i32, i32* @r6, align 4
  %v2_ae30 = add i32 %v1_ae30, 16
  %v3_ae30 = inttoptr i32 %v2_ae30 to i32*
  store i32 %v0_ae2c, i32* %v3_ae30, align 4
  br label %dec_label_pc_abcc

dec_label_pc_ae38:                                ; preds = %dec_label_pc_abcc
  %v0_ae38 = load i32, i32* @r7, align 4
  %v1_ae38 = add i32 %v0_ae38, 8
  store i32 %v1_ae38, i32* @r4, align 4
  store i32 %v1_ae38, i32* %r0.global-to-local, align 4
  store i32 %v5_a7d4, i32* %r1.global-to-local, align 4
  %v2_ae44 = call i32 @function_f974(i32 %v1_ae38, i32 %v5_a7d4)
  store i32 %v2_ae44, i32* %r0.global-to-local, align 4
  store i32 %v5_a7d4, i32* %r2.global-to-local, align 4
  %v0_ae4c = load i32, i32* @sl, align 4
  %v1_ae4c = trunc i32 %v0_ae4c to i8
  %v2_ae4c = load i32, i32* @r4, align 4
  %v4_ae4c = add i32 %v2_ae4c, %v5_a7d4
  %v5_ae4c = inttoptr i32 %v4_ae4c to i8*
  store i8 %v1_ae4c, i8* %v5_ae4c, align 1
  br label %dec_label_pc_ac30

dec_label_pc_ae54:                                ; preds = %dec_label_pc_ac30, %dec_label_pc_ab4c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ae58 = call i32 @function_12ca8(i32* null)
  store i32 %v2_ae58, i32* %r0.global-to-local, align 4
  store i32 %v2_a838, i32* %r1.global-to-local, align 4
  %v9_ae60 = icmp eq i32 %v2_a838, %v2_ae58
  store i1 %v9_ae60, i1* %cpsr_z.global-to-local, align 1
  %v6_ae64 = icmp slt i32 %v2_a838, %v2_ae58
  br i1 %v6_ae64, label %dec_label_pc_ae68, label %dec_label_pc_ab4c

dec_label_pc_ae68:                                ; preds = %dec_label_pc_ae54, %dec_label_pc_a6d8, %dec_label_pc_ae70
  %v29_ae6c = phi i32 [ %v3_a84c, %dec_label_pc_a6d8 ], [ %v1_ae74, %dec_label_pc_ae70 ], [ %v2_ae58, %dec_label_pc_ae54 ]
  store i32 %v3_a6d8, i32* %r4.global-to-local, align 4
  store i32 %v15_a6d8, i32* %r8.global-to-local, align 4
  store i32 %v21_a6d8, i32* %sl.global-to-local, align 4
  store i32 %v24_a6d8, i32* %fp.global-to-local, align 4
  ret i32 %v29_ae6c

dec_label_pc_ae70:                                ; preds = %dec_label_pc_a85c
  store i32 %v3_a84c, i32* %r0.global-to-local, align 4
  %v1_ae74 = call i32 @function_129d8(i32 %v3_a84c)
  store i32 %v1_ae74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ae68

; uselistorder directives
  uselistorder i32 %v1_ae74, { 1, 0 }
  uselistorder i32 %v0_ae08, { 0, 2, 1 }
  uselistorder i32 %v0_adec, { 0, 2, 1 }
  uselistorder i32 %v3_adbc, { 0, 2, 1 }
  uselistorder i32 %v2_ad88, { 1, 0 }
  uselistorder i32 %v8_ad68, { 1, 2, 0 }
  uselistorder i32 %v3_ad54, { 1, 0 }
  uselistorder i32 %v0_ad44, { 2, 0, 1, 3 }
  uselistorder i32 %v7_ad18, { 2, 1, 0, 3 }
  uselistorder i32 %v1_acf0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_ac94, { 1, 0, 2 }
  uselistorder i32 %v4_ac90, { 0, 2, 1 }
  uselistorder i32 %v0_ac70, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_ac60, { 0, 2, 1 }
  uselistorder i32 %v4_ac44, { 1, 0 }
  uselistorder i1 %v2_ae18, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ada8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_ab84, { 2, 1, 0 }
  uselistorder i32 %v1_ab70, { 1, 0, 2 }
  uselistorder i32 %v0_aaec, { 1, 0, 2 }
  uselistorder i32 %v3_a97c, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0, 2 }
  uselistorder i32 %v1_a8f8, { 0, 2, 1 }
  uselistorder i32 %v1_a8f0, { 2, 1, 0 }
  uselistorder i32 %v1_a8ec, { 1, 0 }
  uselistorder i32 %v1_a8e8, { 1, 0 }
  uselistorder i32 %v1_a8dc, { 1, 0 }
  uselistorder i32 %v3_a8d4, { 2, 0, 1 }
  uselistorder i32 %v3_a8a4, { 0, 1, 3, 2 }
  uselistorder i32 %v1_a8a0, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_a89c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a894, { 0, 2, 1 }
  uselistorder i32 %v0_a890, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a87c, { 1, 0 }
  uselistorder i1 %v7_a850, { 1, 0 }
  uselistorder i32 %v3_a84c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_a838, { 2, 1, 0 }
  uselistorder i32 %v5_a828, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_a7f4, { 1, 2, 0 }
  uselistorder i32 %v5_a7d4, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_a788, { 1, 0 }
  uselistorder i8 %v5_a778, { 1, 0 }
  uselistorder i32 %v5_a75c, { 1, 0 }
  uselistorder i32 %v6_a720, { 1, 0 }
  uselistorder i32 %v2_a708, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a6dc, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 45, 46, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 19, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 15, 14, 16, 18, 17, 19, 21, 20, 22, 23, 24, 25, 27, 26, 31, 28, 29, 30, 34, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_ae68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ae2c, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_ac30, { 1, 0 }
  uselistorder label %dec_label_pc_abcc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ab4c, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ae80(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ae80:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_ae80 = load i32, i32* @r4, align 4
  %v15_ae80 = load i32, i32* @r8, align 4
  %v21_ae80 = load i32, i32* @sl, align 4
  %v24_ae80 = load i32, i32* @fp, align 4
  %v1_ae84 = urem i32 %arg2, 256
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_ae84, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_aea0 = urem i32 %arg4, 256
  store i32 %v1_aea0, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_aeb0 = call i32 @function_135a8(i32 %v1_ae84, i32 4)
  %v0_aeb4 = load i32, i32* @r5, align 4
  store i32 %v0_aeb4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_aec0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_aec0, i32* %r3.global-to-local, align 4
  %v0_aec4 = load i32, i32* @r4, align 4
  store i32 %v0_aec4, i32* %r0.global-to-local, align 4
  %v5_aec8 = inttoptr i32 %v0_aeb4 to i32*
  %v6_aec8 = call i32 @function_a054(i32 %v0_aec4, i32* %v5_aec8, i32 2, i32 %v0_aec0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_aee0 = load i32, i32* @r5, align 4
  store i32 %v0_aee0, i32* %r1.global-to-local, align 4
  %v0_aee4 = load i32, i32* @r4, align 4
  store i32 %v0_aee4, i32* %r0.global-to-local, align 4
  %v5_aee8 = trunc i32 %v6_aec8 to i8
  %v6_aeec = inttoptr i32 %v0_aee0 to i32*
  %v7_aeec = call i32 @function_a054(i32 %v0_aee4, i32* %v6_aeec, i32 3, i32 65535)
  %v0_aef0 = load i32, i32* @r5, align 4
  store i32 %v0_aef0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_aeec, i32* @r7, align 4
  %v0_af00 = load i32, i32* @r4, align 4
  store i32 %v0_af00, i32* %r0.global-to-local, align 4
  %v4_af04 = inttoptr i32 %v0_aef0 to i32*
  %v5_af04 = call i32 @function_a054(i32 %v0_af00, i32* %v4_af04, i32 4, i32 64)
  %v0_af10 = load i32, i32* @r5, align 4
  store i32 %v0_af10, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_af1c = load i32, i32* @r4, align 4
  store i32 %v0_af1c, i32* %r0.global-to-local, align 4
  %v5_af20 = trunc i32 %v5_af04 to i8
  %v6_af24 = inttoptr i32 %v0_af10 to i32*
  %v7_af24 = call i32 @function_a054(i32 %v0_af1c, i32* %v6_af24, i32 5, i32 1)
  %v1_af30 = urem i32 %v7_af24, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_af3c = load i32, i32* @r5, align 4
  store i32 %v0_af3c, i32* %r1.global-to-local, align 4
  %v0_af40 = load i32, i32* @r4, align 4
  store i32 %v0_af40, i32* %r0.global-to-local, align 4
  %v5_af48 = inttoptr i32 %v0_af3c to i32*
  %v6_af48 = call i32 @function_a054(i32 %v0_af40, i32* %v5_af48, i32 6, i32 65535)
  %v0_af54 = load i32, i32* @r5, align 4
  store i32 %v0_af54, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_af60 = load i32, i32* @r4, align 4
  store i32 %v0_af60, i32* %r0.global-to-local, align 4
  %v5_af64 = inttoptr i32 %v0_af54 to i32*
  %v6_af64 = call i32 @function_a054(i32 %v0_af60, i32* %v5_af64, i32 7, i32 65535)
  %v0_af68 = load i32, i32* @r5, align 4
  store i32 %v0_af68, i32* %r1.global-to-local, align 4
  %v0_af6c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_af6c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_af64, i32* @sl, align 4
  %v0_af78 = load i32, i32* @r4, align 4
  store i32 %v0_af78, i32* %r0.global-to-local, align 4
  %v4_af7c = inttoptr i32 %v0_af68 to i32*
  %v5_af7c = call i32 @function_a054(i32 %v0_af78, i32* %v4_af7c, i32 %v0_af6c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_af8c = load i32, i32* @r5, align 4
  store i32 %v0_af8c, i32* %r1.global-to-local, align 4
  %v0_af90 = load i32, i32* @r4, align 4
  store i32 %v0_af90, i32* %r0.global-to-local, align 4
  %v4_af94 = inttoptr i32 %v0_af8c to i32*
  %v5_af94 = call i32 @function_a054(i32 %v0_af90, i32* %v4_af94, i32 1, i32 1)
  %v1_af9c = urem i32 %v5_af94, 256
  %v0_afa0 = load i32, i32* @r5, align 4
  store i32 %v0_afa0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_afa8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_afa8, i32* %r3.global-to-local, align 4
  %v0_afac = load i32, i32* @r4, align 4
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v5_afb4 = inttoptr i32 %v0_afa0 to i32*
  %v6_afb4 = call i32 @function_a054(i32 %v0_afac, i32* %v5_afb4, i32 18, i32 %v0_afa8)
  %v0_afbc = load i32, i32* @r5, align 4
  store i32 %v0_afbc, i32* %r1.global-to-local, align 4
  %v2_afc0 = load i32, i32* @global_var_1dd2c.82, align 4
  store i32 %v2_afc0, i32* %r3.global-to-local, align 4
  store i32 %v6_afb4, i32* @r8, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_afcc = load i32, i32* @r4, align 4
  store i32 %v0_afcc, i32* %r0.global-to-local, align 4
  %v4_afd0 = inttoptr i32 %v0_afbc to i32*
  %v5_afd0 = call i32 @function_a054(i32 %v0_afcc, i32* %v4_afd0, i32 24, i32 %v2_afc0)
  %v0_afd8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_afd8, i32* %r0.global-to-local, align 4
  %v1_afdc = inttoptr i32 %v0_afd8 to i32*
  %v2_afdc = call i32 @function_12ca8(i32* %v1_afdc)
  %v1_afe0 = load i32, i32* @r6, align 4
  %v2_afe0 = add i32 %v1_afe0, %v2_afdc
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_aff4 = call i32 @function_132bc(i32 2, i32 3, i32 6)
  store i32 %v3_aff4, i32* %r0.global-to-local, align 4
  %v7_aff8 = icmp eq i32 %v3_aff4, -1
  store i1 %v7_aff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aff8, label %dec_label_pc_b5a0, label %dec_label_pc_b004

dec_label_pc_b004:                                ; preds = %dec_label_pc_ae80
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b00c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b00c, i32* %r3.global-to-local, align 4
  %v0_b014 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b014, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b020 = call i32 @function_1328c(i32 %v3_aff4, i32 %v0_b014, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b020, i32* %r0.global-to-local, align 4
  %v7_b024 = icmp eq i32 %v6_b020, -1
  store i1 %v7_b024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b024, label %dec_label_pc_b5a8, label %dec_label_pc_b02c

dec_label_pc_b02c:                                ; preds = %dec_label_pc_b004
  %v0_b038 = load i32, i32* @sl, align 4
  %v3_b038 = mul i32 %v0_b038, 65536
  store i32 %v3_b038, i32* %sl.global-to-local, align 4
  %v0_b03c = load i32, i32* @r7, align 4
  %v2_b044 = icmp eq i32 %v1_ae84, 0
  store i1 %v2_b044, i1* %cpsr_z.global-to-local, align 1
  %v0_b048 = load i32, i32* @r8, align 4
  %v1_b048 = urem i32 %v0_b048, 256
  store i32 %v1_b048, i32* %r8.global-to-local, align 4
  %v3_b04c = urem i32 %v0_b03c, 65536
  store i32 %v3_b04c, i32* %r3.global-to-local, align 4
  %v3_b050 = urem i32 %v6_af48, 65536
  store i32 %v3_b050, i32* %r1.global-to-local, align 4
  %v3_b054 = urem i32 %v0_b038, 65536
  store i32 %v3_b054, i32* %r2.global-to-local, align 4
  %v0_b060 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_b060, i32* %stack_var_-40, align 4
  br i1 %v2_b044, label %dec_label_pc_b2e0.preheader, label %dec_label_pc_b074

dec_label_pc_b074:                                ; preds = %dec_label_pc_b02c
  %v3_b07c = mul i32 %v5_af7c, 65536
  %v1_b084 = urem i32 %v6_af48, 256
  %v1_b08c = add i32 %v3_b07c, 524288
  %v1_b090 = add i32 %v3_b07c, 3407872
  %v1_b094 = urem i32 %v0_b038, 256
  %v1_b098 = add i32 %v3_b07c, 1835008
  %v0_b03c.not = or i32 %v0_b03c, -65536
  %v1_b0a0 = xor i32 %v0_b03c.not, 65535
  %v3_b0a4 = udiv i32 %v1_b098, 256
  %tmp77 = udiv i32 %v0_b03c, 256
  %v1_b0b8 = and i32 %v3_b0a4, 65280
  store i32 %v1_b0b8, i32* %r0.global-to-local, align 4
  %v3_b0dc = mul nuw nsw i32 %v1_b084, 256
  %tmp78 = udiv i32 %v6_af48, 256
  %v4_b0e4 = urem i32 %tmp78, 256
  %v5_b0e4 = or i32 %v4_b0e4, %v3_b0dc
  store i32 %v5_b0e4, i32* @lr, align 4
  %tmp79 = mul nsw i32 %v1_b0a0, 256
  %v3_b0ec = mul nuw nsw i32 %v1_b094, 256
  %sext23 = mul i32 %tmp77, 16777216
  %v4_b0f4 = sdiv i32 %sext23, 16777216
  %v4_b0bc = sdiv i32 %v1_b090, 16777216
  %tmp80 = udiv i32 %v0_b038, 256
  %v4_b0fc = urem i32 %tmp80, 256
  %v5_b0fc = or i32 %v4_b0fc, %v3_b0ec
  store i32 %v5_b0fc, i32* @r7, align 4
  %v1_b100 = and i32 %tmp79, 65280
  %v4_b104 = sdiv i32 %v1_b098, 16777216
  %v3_b108 = udiv i32 %v1_b08c, 256
  %tmp81 = udiv i32 %v1_b0a0, 256
  %v4_b10c = urem i32 %tmp81, 256
  %v5_b10c = or i32 %v4_b10c, %v1_b100
  store i32 %v5_b10c, i32* @r6, align 4
  %v3_b110 = ashr i32 %v1_b090, 31
  %v3_b114 = ashr i32 %sext23, 31
  %v1_b118 = and i32 %v3_b108, 65280
  store i32 %v1_b118, i32* @r5, align 4
  %v3_b124 = ashr i32 %v1_b098, 31
  store i32 %v3_b124, i32* %r2.global-to-local, align 4
  %v3_b12832 = udiv i32 %v1_b100, 256
  store i32 %v3_b12832, i32* %r3.global-to-local, align 4
  store i32 %v1_b084, i32* %r1.global-to-local, align 4
  %v4_b130 = udiv i32 %v1_b08c, 16777216
  %v5_b130 = or i32 %v4_b130, %v1_b118
  store i32 %v5_b130, i32* %r8.global-to-local, align 4
  %v5_b134 = trunc i32 %tmp81 to i8
  store i32 %v0_b060, i32* @r4, align 4
  %v3_b14c33 = udiv i32 %v1_b118, 256
  store i32 %v3_b14c33, i32* %sl.global-to-local, align 4
  store i32 %v1_b094, i32* %fp.global-to-local, align 4
  %v4_b1a0 = sext i8 %v5_af20 to i32
  %sext15 = mul i32 %v1_b0a0, 16777216
  %v4_b25c = sdiv i32 %sext15, 16777216
  %v2_b28c = icmp eq i32 %v1_b048, 0
  %sext16 = mul i32 %v6_af48, 16777216
  %v4_b2a0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %tmp78, 16777216
  %v4_b2bc = sdiv i32 %sext17, 16777216
  %v1_b1b8 = trunc i32 %v4_b0f4 to i8
  br label %dec_label_pc_b154

dec_label_pc_b154:                                ; preds = %bb92, %dec_label_pc_b074
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b160 = call i32 @function_135a8(i32 1510, i32 4)
  store i32 %v2_b160, i32* %r0.global-to-local, align 4
  store i32 %v2_aeb0, i32* %r2.global-to-local, align 4
  %v3_b168 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b168, i32* %r3.global-to-local, align 4
  %v2_b16c = load i32, i32* @r4, align 4
  %v5_b16c = mul i32 %v2_b16c, 4
  %v6_b16c = add i32 %v5_b16c, %v2_aeb0
  %v7_b16c = inttoptr i32 %v6_b16c to i32*
  store i32 %v2_b160, i32* %v7_b16c, align 4
  %v0_b170 = load i32, i32* %r2.global-to-local, align 4
  %v1_b170 = load i32, i32* %r3.global-to-local, align 4
  %v4_b170 = mul i32 %v1_b170, 4
  %v5_b170 = add i32 %v4_b170, %v0_b170
  %v6_b170 = inttoptr i32 %v5_b170 to i32*
  %v7_b170 = load i32, i32* %v6_b170, align 4
  store i32 %v7_b170, i32* %r4.global-to-local, align 4
  %v1_b174 = inttoptr i32 %v7_b170 to i8*
  %v2_b174 = load i8, i8* %v1_b174, align 1
  %tmp = urem i8 %v2_b174, 16
  %v1_b178 = zext i8 %tmp to i32
  %v1_b17c = or i32 %v1_b178, 64
  store i32 %v1_b17c, i32* %r2.global-to-local, align 4
  %v1_b180 = trunc i32 %v1_b17c to i8
  store i8 %v1_b180, i8* %v1_b174, align 1
  %v0_b184 = load i32, i32* %r4.global-to-local, align 4
  %v1_b184 = inttoptr i32 %v0_b184 to i8*
  %v2_b184 = load i8, i8* %v1_b184, align 1
  %v1_b188 = and i8 %v2_b184, -16
  %v1_b18c = or i8 %v1_b188, 5
  store i32 %v1_af30, i32* %r1.global-to-local, align 4
  store i8 %v1_b18c, i8* %v1_b184, align 1
  %v2_b19c = load i32, i32* %r4.global-to-local, align 4
  %v3_b19c = add i32 %v2_b19c, 1
  %v4_b19c = inttoptr i32 %v3_b19c to i8*
  store i8 %v5_aee8, i8* %v4_b19c, align 1
  %v2_b1a4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1a4 = add i32 %v2_b1a4, 8
  %v4_b1a4 = inttoptr i32 %v3_b1a4 to i8*
  store i8 %v5_af20, i8* %v4_b1a4, align 1
  store i32 %v4_b0f4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_b1b0 = load i32, i32* %r1.global-to-local, align 4
  %v9_b1b0 = icmp eq i32 %v0_b1b0, 0
  store i1 %v9_b1b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b110, i32* %r2.global-to-local, align 4
  %v2_b1b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1b8 = add i32 %v2_b1b8, 4
  %v4_b1b8 = inttoptr i32 %v3_b1b8 to i8*
  store i8 %v1_b1b8, i8* %v4_b1b8, align 1
  store i32 %v4_b0bc, i32* %r1.global-to-local, align 4
  %v0_b1c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1c0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b154
  %v1_b1c0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_b1c0, i32* %r3.global-to-local, align 4
  %v2_b1c4 = trunc i32 %v1_b1c0 to i8
  %v3_b1c4 = load i32, i32* %r4.global-to-local, align 4
  %v4_b1c4 = add i32 %v3_b1c4, 7
  %v5_b1c4 = inttoptr i32 %v4_b1c4 to i8*
  store i8 %v2_b1c4, i8* %v5_b1c4, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b154, %bb
  store i32 47, i32* %r3.global-to-local, align 4
  %v0_b1cc = load i32, i32* %r2.global-to-local, align 4
  %v1_b1cc = trunc i32 %v0_b1cc to i8
  %v2_b1cc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1cc = add i32 %v2_b1cc, 3
  %v4_b1cc = inttoptr i32 %v3_b1cc to i8*
  store i8 %v1_b1cc, i8* %v4_b1cc, align 1
  %v0_b1d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b1d0 = trunc i32 %v0_b1d0 to i8
  %v2_b1d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_b1d0 = add i32 %v2_b1d0, 2
  %v4_b1d0 = inttoptr i32 %v3_b1d0 to i8*
  store i8 %v1_b1d0, i8* %v4_b1d0, align 1
  %v0_b1d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1d4, label %bb83, label %bb82

bb82:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb83

bb83:                                             ; preds = %.thread, %bb82
  store i32 %v3_b114, i32* %r1.global-to-local, align 4
  %v0_b1dc = load i32, i32* %r3.global-to-local, align 4
  %v1_b1dc = trunc i32 %v0_b1dc to i8
  %v2_b1dc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1dc = add i32 %v2_b1dc, 9
  %v4_b1dc = inttoptr i32 %v3_b1dc to i8*
  store i8 %v1_b1dc, i8* %v4_b1dc, align 1
  %v0_b1e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b1e0, label %bb85, label %bb84

bb84:                                             ; preds = %bb83
  %v1_b1e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_b1e0 = trunc i32 %v1_b1e0 to i8
  %v3_b1e0 = load i32, i32* %r4.global-to-local, align 4
  %v4_b1e0 = add i32 %v3_b1e0, 6
  %v5_b1e0 = inttoptr i32 %v4_b1e0 to i8*
  store i8 %v2_b1e0, i8* %v5_b1e0, align 1
  br label %bb85

bb85:                                             ; preds = %bb83, %bb84
  %v3_b1e4 = load i32, i32* %stack_var_-40, align 4
  %v5_b1ec = mul i32 %v3_b1e4, 24
  store i32 %v5_b1ec, i32* %r3.global-to-local, align 4
  store i32 %v5_afd0, i32* %r2.global-to-local, align 4
  %v1_b1f4 = load i32, i32* %r4.global-to-local, align 4
  %v2_b1f4 = add i32 %v1_b1f4, 12
  %v3_b1f4 = inttoptr i32 %v2_b1f4 to i32*
  store i32 %v5_afd0, i32* %v3_b1f4, align 4
  %v0_b1f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b1f8 = load i32, i32* @sb, align 4
  %v2_b1f8 = add i32 %v1_b1f8, %v0_b1f8
  store i32 %v2_b1f8, i32* %r3.global-to-local, align 4
  %v0_b1fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b1fc = trunc i32 %v0_b1fc to i8
  %v2_b1fc = load i32, i32* %r4.global-to-local, align 4
  %v3_b1fc = add i32 %v2_b1fc, 5
  %v4_b1fc = inttoptr i32 %v3_b1fc to i8*
  store i8 %v1_b1fc, i8* %v4_b1fc, align 1
  %v0_b200 = load i32, i32* %r3.global-to-local, align 4
  %v1_b200 = add i32 %v0_b200, 16
  %v2_b200 = inttoptr i32 %v1_b200 to i32*
  %v3_b200 = load i32, i32* %v2_b200, align 4
  store i32 %v3_b200, i32* %r2.global-to-local, align 4
  %v0_b204 = load i32, i32* %r4.global-to-local, align 4
  %v1_b204 = add i32 %v0_b204, 20
  store i32 %v1_b204, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_b20c = load i32, i32* %r0.global-to-local, align 4
  %v1_b20c = trunc i32 %v0_b20c to i8
  %v3_b20c = add i32 %v0_b204, 23
  %v4_b20c = inttoptr i32 %v3_b20c to i8*
  store i8 %v1_b20c, i8* %v4_b20c, align 1
  %v0_b210 = load i32, i32* %r3.global-to-local, align 4
  %v1_b210 = trunc i32 %v0_b210 to i8
  %v2_b210 = load i32, i32* %r1.global-to-local, align 4
  %v3_b210 = add i32 %v2_b210, 2
  %v4_b210 = inttoptr i32 %v3_b210 to i8*
  store i8 %v1_b210, i8* %v4_b210, align 1
  %v0_b214 = load i32, i32* %r4.global-to-local, align 4
  %v1_b214 = add i32 %v0_b214, 24
  %v2_b214 = inttoptr i32 %v1_b214 to i8*
  %v3_b214 = load i8, i8* %v2_b214, align 1
  %tmp98 = urem i8 %v3_b214, 16
  %v1_b218 = zext i8 %tmp98 to i32
  %v1_b21c = or i32 %v1_b218, 64
  store i32 %v1_b21c, i32* %r3.global-to-local, align 4
  %v1_b220 = trunc i32 %v1_b21c to i8
  store i8 %v1_b220, i8* %v2_b214, align 1
  %v0_b224 = load i32, i32* %r2.global-to-local, align 4
  %v1_b224 = load i32, i32* %r4.global-to-local, align 4
  %v2_b224 = add i32 %v1_b224, 16
  %v3_b224 = inttoptr i32 %v2_b224 to i32*
  store i32 %v0_b224, i32* %v3_b224, align 4
  %v0_b228 = load i32, i32* %r4.global-to-local, align 4
  %v1_b228 = add i32 %v0_b228, 24
  %v2_b228 = inttoptr i32 %v1_b228 to i8*
  %v3_b228 = load i8, i8* %v2_b228, align 1
  %v1_b22c = and i8 %v3_b228, -16
  %v1_b230 = or i8 %v1_b22c, 5
  store i8 %v1_b230, i8* %v2_b228, align 1
  %v0_b23c = load i32, i32* %r4.global-to-local, align 4
  %v1_b23c = add i32 %v0_b23c, 24
  store i32 %v1_b23c, i32* @r5, align 4
  %v3_b240 = add i32 %v0_b23c, 25
  %v4_b240 = inttoptr i32 %v3_b240 to i8*
  store i8 %v5_aee8, i8* %v4_b240, align 1
  store i32 %v4_b104, i32* %r1.global-to-local, align 4
  store i32 %tmp81, i32* %r3.global-to-local, align 4
  store i32 %v3_b124, i32* %r2.global-to-local, align 4
  %v2_b250 = load i32, i32* @r5, align 4
  %v3_b250 = add i32 %v2_b250, 4
  %v4_b250 = inttoptr i32 %v3_b250 to i8*
  store i8 %v5_b134, i8* %v4_b250, align 1
  %v0_b254 = load i32, i32* %r1.global-to-local, align 4
  %v1_b254 = trunc i32 %v0_b254 to i8
  %v2_b254 = load i32, i32* @r5, align 4
  %v3_b254 = add i32 %v2_b254, 2
  %v4_b254 = inttoptr i32 %v3_b254 to i8*
  store i8 %v1_b254, i8* %v4_b254, align 1
  %v0_b258 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b258, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  store i32 %v4_b25c, i32* %r1.global-to-local, align 4
  %v0_b260 = load i32, i32* %r2.global-to-local, align 4
  %v1_b260 = trunc i32 %v0_b260 to i8
  %v2_b260 = load i32, i32* @r5, align 4
  %v3_b260 = add i32 %v2_b260, 3
  %v4_b260 = inttoptr i32 %v3_b260 to i8*
  store i8 %v1_b260, i8* %v4_b260, align 1
  store i32 %v4_b1a0, i32* %r2.global-to-local, align 4
  %v0_b268 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b268, label %bb89, label %bb88

bb88:                                             ; preds = %bb87
  %v1_b268 = load i32, i32* %r3.global-to-local, align 4
  %v2_b268 = trunc i32 %v1_b268 to i8
  %v3_b268 = load i32, i32* @r5, align 4
  %v4_b268 = add i32 %v3_b268, 6
  %v5_b268 = inttoptr i32 %v4_b268 to i8*
  store i8 %v2_b268, i8* %v5_b268, align 1
  br label %bb89

bb89:                                             ; preds = %bb87, %bb88
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b270 = load i32, i32* %r1.global-to-local, align 4
  %v1_b270 = trunc i32 %v0_b270 to i8
  %v2_b270 = load i32, i32* @r5, align 4
  %v3_b270 = add i32 %v2_b270, 5
  %v4_b270 = inttoptr i32 %v3_b270 to i8*
  store i8 %v1_b270, i8* %v4_b270, align 1
  %v0_b274 = load i32, i32* %r2.global-to-local, align 4
  %v1_b274 = trunc i32 %v0_b274 to i8
  %v2_b274 = load i32, i32* @r5, align 4
  %v3_b274 = add i32 %v2_b274, 8
  %v4_b274 = inttoptr i32 %v3_b274 to i8*
  store i8 %v1_b274, i8* %v4_b274, align 1
  %v0_b278 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b278, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v1_b278 = load i32, i32* %r0.global-to-local, align 4
  %v2_b278 = trunc i32 %v1_b278 to i8
  %v3_b278 = load i32, i32* @r5, align 4
  %v4_b278 = add i32 %v3_b278, 7
  %v5_b278 = inttoptr i32 %v4_b278 to i8*
  store i8 %v2_b278, i8* %v5_b278, align 1
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_b27c = load i32, i32* %r3.global-to-local, align 4
  %v1_b27c = trunc i32 %v0_b27c to i8
  %v2_b27c = load i32, i32* @r5, align 4
  %v3_b27c = add i32 %v2_b27c, 9
  %v4_b27c = inttoptr i32 %v3_b27c to i8*
  store i8 %v1_b27c, i8* %v4_b27c, align 1
  %v0_b280 = call i32 @function_f8c0()
  store i32 %v0_b280, i32* %r0.global-to-local, align 4
  store i32 %v1_b048, i32* %r1.global-to-local, align 4
  store i1 %v2_b28c, i1* %cpsr_z.global-to-local, align 1
  %v1_b290 = sub i32 1023, %v0_b280
  store i32 %v1_b290, i32* %r3.global-to-local, align 4
  br i1 %v2_b28c, label %.thread18, label %.thread19

.thread18:                                        ; preds = %bb91
  %v2_b298 = load i32, i32* @r5, align 4
  %v3_b298 = add i32 %v2_b298, 16
  %v4_b298 = inttoptr i32 %v3_b298 to i32*
  store i32 %v1_b290, i32* %v4_b298, align 4
  br label %bb92

.thread19:                                        ; preds = %bb91
  %v1_b294 = load i32, i32* %r4.global-to-local, align 4
  %v2_b294 = add i32 %v1_b294, 16
  %v3_b294 = inttoptr i32 %v2_b294 to i32*
  %v4_b294 = load i32, i32* %v3_b294, align 4
  store i32 %v4_b294, i32* %r3.global-to-local, align 4
  %v2_b29c = load i32, i32* @r5, align 4
  %v3_b29c = add i32 %v2_b29c, 16
  %v4_b29c = inttoptr i32 %v3_b29c to i32*
  store i32 %v4_b294, i32* %v4_b29c, align 4
  br label %bb92

bb92:                                             ; preds = %.thread18, %.thread19
  store i32 %v4_b2a0, i32* %r3.global-to-local, align 4
  %v0_b2a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b2a4 = add i32 %v0_b2a4, 44
  store i32 %v1_b2a4, i32* @r6, align 4
  %v1_b2a8 = load i32, i32* @r5, align 4
  %v2_b2a8 = add i32 %v1_b2a8, 12
  %v3_b2a8 = inttoptr i32 %v2_b2a8 to i32*
  store i32 %v0_b280, i32* %v3_b2a8, align 4
  %v0_b2ac = load i32, i32* %r3.global-to-local, align 4
  %v1_b2ac = trunc i32 %v0_b2ac to i8
  %v2_b2ac = load i32, i32* @r6, align 4
  %v3_b2ac = add i32 %v2_b2ac, 1
  %v4_b2ac = inttoptr i32 %v3_b2ac to i8*
  store i8 %v1_b2ac, i8* %v4_b2ac, align 1
  %v3_b2b0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b2b0, i32* %r3.global-to-local, align 4
  store i32 %v1_ae84, i32* %r1.global-to-local, align 4
  %v1_b2b8 = add i32 %v3_b2b0, 1
  store i32 %v1_b2b8, i32* @r4, align 4
  store i32 %v4_b2bc, i32* %r2.global-to-local, align 4
  %v9_b2c0 = icmp eq i32 %v1_b2b8, %v1_ae84
  store i1 %v9_b2c0, i1* %cpsr_z.global-to-local, align 1
  %v0_b2c4 = load i32, i32* %sl.global-to-local, align 4
  %v1_b2c4 = trunc i32 %v0_b2c4 to i8
  %v2_b2c4 = load i32, i32* @r6, align 4
  %v3_b2c4 = add i32 %v2_b2c4, 5
  %v4_b2c4 = inttoptr i32 %v3_b2c4 to i8*
  store i8 %v1_b2c4, i8* %v4_b2c4, align 1
  %v0_b2c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b2c8 = trunc i32 %v0_b2c8 to i8
  %v2_b2c8 = load i32, i32* @r6, align 4
  %v3_b2c8 = inttoptr i32 %v2_b2c8 to i8*
  store i8 %v1_b2c8, i8* %v3_b2c8, align 1
  %v0_b2cc = load i32, i32* @r7, align 4
  %v1_b2cc = trunc i32 %v0_b2cc to i8
  %v2_b2cc = load i32, i32* @r6, align 4
  %v3_b2cc = add i32 %v2_b2cc, 2
  %v4_b2cc = inttoptr i32 %v3_b2cc to i8*
  store i8 %v1_b2cc, i8* %v4_b2cc, align 1
  %v0_b2d0 = load i32, i32* %fp.global-to-local, align 4
  %v1_b2d0 = trunc i32 %v0_b2d0 to i8
  %v2_b2d0 = load i32, i32* @r6, align 4
  %v3_b2d0 = add i32 %v2_b2d0, 3
  %v4_b2d0 = inttoptr i32 %v3_b2d0 to i8*
  store i8 %v1_b2d0, i8* %v4_b2d0, align 1
  %v0_b2d4 = load i32, i32* %r8.global-to-local, align 4
  %v1_b2d4 = trunc i32 %v0_b2d4 to i8
  %v2_b2d4 = load i32, i32* @r6, align 4
  %v3_b2d4 = add i32 %v2_b2d4, 4
  %v4_b2d4 = inttoptr i32 %v3_b2d4 to i8*
  store i8 %v1_b2d4, i8* %v4_b2d4, align 1
  %v0_b2d8 = load i32, i32* @r4, align 4
  store i32 %v0_b2d8, i32* %stack_var_-40, align 4
  %v5_b2dc = icmp slt i32 %v1_b2b8, %v1_ae84
  br i1 %v5_b2dc, label %dec_label_pc_b154, label %dec_label_pc_b2e0.preheader

dec_label_pc_b2e0.preheader:                      ; preds = %bb92, %dec_label_pc_b02c
  %v1_b300 = add i32 %v5_af7c, 8
  %v1_b304 = add i32 %v5_af7c, 52
  %v2_b310 = icmp eq i32 %v5_afd0, -1
  %v7_b310 = icmp eq i32 %v5_afd0, -1
  %v3_b4d8 = icmp eq i32 %v3_b04c, 65535
  %v2_b548 = icmp eq i32 %v1_b048, 0
  %v2_b564 = icmp eq i32 %v1_af9c, 0
  br label %dec_label_pc_b2e0

dec_label_pc_b2e0:                                ; preds = %dec_label_pc_b2e0.preheader, %dec_label_pc_b58c
  store i32 %v1_ae84, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b044, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b044, label %dec_label_pc_b58c, label %dec_label_pc_b2f4

dec_label_pc_b2f4:                                ; preds = %dec_label_pc_b2e0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_af7c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  store i32 %v1_b300, i32* @fp, align 4
  store i32 %v1_b304, i32* @sl, align 4
  br label %dec_label_pc_b438

dec_label_pc_b30c:                                ; preds = %dec_label_pc_b438
  store i32 %v5_afd0, i32* %r2.global-to-local, align 4
  store i1 %v7_b310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b310, label %dec_label_pc_b4c8, label %dec_label_pc_b318

dec_label_pc_b318:                                ; preds = %dec_label_pc_b460, %dec_label_pc_b30c
  store i32 %v3_b04c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b4d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b4d8, label %dec_label_pc_b4e4, label %dec_label_pc_b32c

dec_label_pc_b32c:                                ; preds = %dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge, %dec_label_pc_b318
  %v1_b330 = phi i32 [ %v1_b330.pre, %dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge ], [ 65535, %dec_label_pc_b318 ]
  store i32 %v3_b050, i32* %r1.global-to-local, align 4
  %v9_b330 = icmp eq i32 %v3_b050, %v1_b330
  store i1 %v9_b330, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b330, label %dec_label_pc_b51c, label %dec_label_pc_b338

dec_label_pc_b338:                                ; preds = %dec_label_pc_b4e4.dec_label_pc_b338_crit_edge, %dec_label_pc_b32c
  %v1_b33c = phi i32 [ %v1_b33c.pre, %dec_label_pc_b4e4.dec_label_pc_b338_crit_edge ], [ %v1_b330, %dec_label_pc_b32c ]
  store i32 %v3_b054, i32* %r2.global-to-local, align 4
  %v9_b33c = icmp eq i32 %v3_b054, %v1_b33c
  store i1 %v9_b33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b33c, label %dec_label_pc_b538, label %dec_label_pc_b344

dec_label_pc_b344:                                ; preds = %dec_label_pc_b51c, %dec_label_pc_b338
  store i32 %v1_b048, i32* %r3.global-to-local, align 4
  store i1 %v2_b548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b548, label %dec_label_pc_b55c, label %.thread20

.thread20:                                        ; preds = %dec_label_pc_b344
  %v1_b34c = load i32, i32* @r5, align 4
  %v2_b34c = add i32 %v1_b34c, 16
  %v3_b34c = inttoptr i32 %v2_b34c to i32*
  %v4_b34c = load i32, i32* %v3_b34c, align 4
  store i32 %v4_b34c, i32* %r3.global-to-local, align 4
  %v2_b350 = load i32, i32* @r6, align 4
  %v3_b350 = add i32 %v2_b350, 16
  %v4_b350 = inttoptr i32 %v3_b350 to i32*
  store i32 %v4_b34c, i32* %v4_b350, align 4
  br label %dec_label_pc_b358

dec_label_pc_b358:                                ; preds = %bb97, %.thread20
  store i32 %v1_af9c, i32* %r1.global-to-local, align 4
  store i1 %v2_b564, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b564, label %dec_label_pc_b364, label %dec_label_pc_b570

dec_label_pc_b364:                                ; preds = %dec_label_pc_b358, %dec_label_pc_b55c, %dec_label_pc_b570
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b368 = load i32, i32* @r8, align 4
  %v1_b368 = trunc i32 %v0_b368 to i8
  %v2_b368 = load i32, i32* @r5, align 4
  %v3_b368 = add i32 %v2_b368, 10
  %v4_b368 = inttoptr i32 %v3_b368 to i8*
  store i8 %v1_b368, i8* %v4_b368, align 1
  %v0_b36c = load i32, i32* @r8, align 4
  %v1_b36c = trunc i32 %v0_b36c to i8
  %v2_b36c = load i32, i32* @r5, align 4
  %v3_b36c = add i32 %v2_b36c, 11
  %v4_b36c = inttoptr i32 %v3_b36c to i8*
  store i8 %v1_b36c, i8* %v4_b36c, align 1
  %v0_b370 = load i32, i32* @r5, align 4
  store i32 %v0_b370, i32* @r0, align 4
  %v2_b374 = call i32 @function_e498(i32 %v0_b370, i32 20)
  %v3_b374 = trunc i32 %v2_b374 to i8
  %v4_b378 = sdiv i32 %v2_b374, 256
  store i32 %v4_b378, i32* %r3.global-to-local, align 4
  %v1_b37c = trunc i32 %v4_b378 to i8
  %v2_b37c = load i32, i32* @r5, align 4
  %v3_b37c = add i32 %v2_b37c, 11
  %v4_b37c = inttoptr i32 %v3_b37c to i8*
  store i8 %v1_b37c, i8* %v4_b37c, align 1
  %v3_b380 = load i32, i32* @r5, align 4
  %v4_b380 = add i32 %v3_b380, 10
  %v5_b380 = inttoptr i32 %v4_b380 to i8*
  store i8 %v3_b374, i8* %v5_b380, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b388 = load i32, i32* @r8, align 4
  %v1_b388 = trunc i32 %v0_b388 to i8
  %v2_b388 = load i32, i32* @r6, align 4
  %v3_b388 = add i32 %v2_b388, 10
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 %v1_b388, i8* %v4_b388, align 1
  %v0_b38c = load i32, i32* @r8, align 4
  %v1_b38c = trunc i32 %v0_b38c to i8
  %v2_b38c = load i32, i32* @r6, align 4
  %v3_b38c = add i32 %v2_b38c, 11
  %v4_b38c = inttoptr i32 %v3_b38c to i8*
  store i8 %v1_b38c, i8* %v4_b38c, align 1
  %v0_b390 = load i32, i32* @r6, align 4
  store i32 %v0_b390, i32* @r0, align 4
  %v2_b394 = call i32 @function_e498(i32 %v0_b390, i32 20)
  %v3_b394 = trunc i32 %v2_b394 to i8
  store i32 %v2_b394, i32* %r0.global-to-local, align 4
  %v4_b398 = sdiv i32 %v2_b394, 256
  store i32 %v4_b398, i32* %r3.global-to-local, align 4
  %v3_b39c = load i32, i32* @r6, align 4
  %v4_b39c = add i32 %v3_b39c, 10
  %v5_b39c = inttoptr i32 %v4_b39c to i8*
  store i8 %v3_b394, i8* %v5_b39c, align 1
  %v0_b3a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3a0 = trunc i32 %v0_b3a0 to i8
  %v2_b3a0 = load i32, i32* @r6, align 4
  %v3_b3a0 = add i32 %v2_b3a0, 11
  %v4_b3a0 = inttoptr i32 %v3_b3a0 to i8*
  store i8 %v1_b3a0, i8* %v4_b3a0, align 1
  %v0_b3a4 = load i32, i32* @r7, align 4
  %v1_b3a4 = add i32 %v0_b3a4, 4
  %v2_b3a4 = inttoptr i32 %v1_b3a4 to i8*
  %v3_b3a4 = load i8, i8* %v2_b3a4, align 1
  %v4_b3a4 = zext i8 %v3_b3a4 to i32
  store i32 %v4_b3a4, i32* %r3.global-to-local, align 4
  %v1_b3a8 = add i32 %v0_b3a4, 5
  %v2_b3a8 = inttoptr i32 %v1_b3a8 to i8*
  %v3_b3a8 = load i8, i8* %v2_b3a8, align 1
  %v4_b3a8 = zext i8 %v3_b3a8 to i32
  store i32 %v0_b3a4, i32* @r1, align 4
  %v4_b3b0 = mul nuw nsw i32 %v4_b3a8, 256
  %v5_b3b0 = or i32 %v4_b3b0, %v4_b3a4
  store i32 %v5_b3b0, i32* %r2.global-to-local, align 4
  %v0_b3b4 = load i32, i32* @r8, align 4
  %v1_b3b4 = trunc i32 %v0_b3b4 to i8
  %v3_b3b4 = add i32 %v0_b3a4, 6
  %v4_b3b4 = inttoptr i32 %v3_b3b4 to i8*
  store i8 %v1_b3b4, i8* %v4_b3b4, align 1
  %v0_b3b8 = load i32, i32* @fp, align 4
  store i32 %v0_b3b8, i32* %r3.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r8, align 4
  %v1_b3bc = trunc i32 %v0_b3bc to i8
  %v2_b3bc = load i32, i32* @r7, align 4
  %v3_b3bc = add i32 %v2_b3bc, 7
  %v4_b3bc = inttoptr i32 %v3_b3bc to i8*
  store i8 %v1_b3bc, i8* %v4_b3bc, align 1
  %v0_b3c0 = load i32, i32* @r6, align 4
  store i32 %v0_b3c0, i32* %r0.global-to-local, align 4
  %v4_b3c4 = call i32 @function_e4f4(i32 %v0_b3c0, i32 %v0_b3a4, i32 %v5_b3b0, i32 %v0_b3b8)
  %v5_b3c4 = trunc i32 %v4_b3c4 to i8
  store i32 %v4_b3c4, i32* %r0.global-to-local, align 4
  %v3_b3c8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b3c8, i32* %r3.global-to-local, align 4
  %v3_b3cc = mul i32 %v3_b3c8, 32
  store i32 %v3_b3cc, i32* %r2.global-to-local, align 4
  %v0_b3d0 = load i32, i32* @r5, align 4
  %v1_b3d0 = add i32 %v0_b3d0, 16
  %v2_b3d0 = inttoptr i32 %v1_b3d0 to i32*
  %v3_b3d0 = load i32, i32* %v2_b3d0, align 4
  store i32 %v3_b3d0, i32* %r1.global-to-local, align 4
  %v5_b3d4 = mul i32 %v3_b3c8, 24
  store i32 %v5_b3d4, i32* %r2.global-to-local, align 4
  %v4_b3d835 = udiv i32 %v4_b3c4, 256
  %v1_b3dc = trunc i32 %v4_b3d835 to i8
  %v2_b3dc = load i32, i32* @r7, align 4
  %v3_b3dc = add i32 %v2_b3dc, 7
  %v4_b3dc = inttoptr i32 %v3_b3dc to i8*
  store i8 %v1_b3dc, i8* %v4_b3dc, align 1
  %v0_b3e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3e0 = load i32, i32* @sb, align 4
  %v2_b3e0 = add i32 %v1_b3e0, %v0_b3e0
  store i32 %v2_b3e0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b3e8 = load i32, i32* @r7, align 4
  %v4_b3e8 = add i32 %v3_b3e8, 6
  %v5_b3e8 = inttoptr i32 %v4_b3e8 to i8*
  store i8 %v5_b3c4, i8* %v5_b3e8, align 1
  %v0_b3ec = load i32, i32* %r1.global-to-local, align 4
  %v1_b3ec = load i32, i32* %lr.global-to-local, align 4
  %v2_b3ec = add i32 %v1_b3ec, 4
  %v3_b3ec = inttoptr i32 %v2_b3ec to i32*
  store i32 %v0_b3ec, i32* %v3_b3ec, align 4
  %v0_b3f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3f0 = trunc i32 %v0_b3f0 to i8
  %v2_b3f0 = load i32, i32* %r2.global-to-local, align 4
  %v3_b3f0 = load i32, i32* @sb, align 4
  %v4_b3f0 = add i32 %v3_b3f0, %v2_b3f0
  %v5_b3f0 = inttoptr i32 %v4_b3f0 to i8*
  store i8 %v1_b3f0, i8* %v5_b3f0, align 1
  %v0_b3f4 = load i32, i32* @r8, align 4
  %v1_b3f4 = trunc i32 %v0_b3f4 to i8
  %v2_b3f4 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3f4 = add i32 %v2_b3f4, 2
  %v4_b3f4 = inttoptr i32 %v3_b3f4 to i8*
  store i8 %v1_b3f4, i8* %v4_b3f4, align 1
  %v0_b3f8 = load i32, i32* @r8, align 4
  %v1_b3f8 = trunc i32 %v0_b3f8 to i8
  %v2_b3f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3f8 = add i32 %v2_b3f8, 1
  %v4_b3f8 = inttoptr i32 %v3_b3f8 to i8*
  store i8 %v1_b3f8, i8* %v4_b3f8, align 1
  %v0_b3fc = load i32, i32* @r8, align 4
  %v1_b3fc = trunc i32 %v0_b3fc to i8
  %v2_b3fc = load i32, i32* %lr.global-to-local, align 4
  %v3_b3fc = add i32 %v2_b3fc, 3
  %v4_b3fc = inttoptr i32 %v3_b3fc to i8*
  store i8 %v1_b3fc, i8* %v4_b3fc, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b408 = load i32, i32* @r5, align 4
  store i32 %v0_b408, i32* %r1.global-to-local, align 4
  store i32 %v3_aff4, i32* %r0.global-to-local, align 4
  %v0_b410 = load i32, i32* @sl, align 4
  store i32 %v0_b410, i32* %r2.global-to-local, align 4
  %v0_b414 = load i32, i32* %lr.global-to-local, align 4
  %v6_b41c = inttoptr i32 %v0_b408 to i32*
  %v7_b41c = call i32 @function_13258(i32 %v3_aff4, i32* %v6_b41c, i32 %v0_b410, i32 16384, i32 %v0_b414, i32 16)
  %v3_b420 = load i32, i32* %stack_var_-40, align 4
  %v1_b424 = add i32 %v3_b420, 1
  store i32 %v1_b424, i32* %r0.global-to-local, align 4
  store i32 %v1_ae84, i32* %r3.global-to-local, align 4
  %v9_b42c = icmp eq i32 %v1_b424, %v1_ae84
  store i1 %v9_b42c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b424, i32* %stack_var_-40, align 4
  %v6_b434 = icmp slt i32 %v1_b424, %v1_ae84
  br i1 %v6_b434, label %dec_label_pc_b438, label %dec_label_pc_b58c

dec_label_pc_b438:                                ; preds = %dec_label_pc_b364, %dec_label_pc_b2f4
  %v1_b44c = phi i32 [ %v1_b424, %dec_label_pc_b364 ], [ 0, %dec_label_pc_b2f4 ]
  %v5_b43c = mul i32 %v1_b44c, 24
  %v1_b440 = load i32, i32* @sb, align 4
  %v2_b440 = add i32 %v1_b440, %v5_b43c
  store i32 %v2_b440, i32* %r3.global-to-local, align 4
  store i32 %v2_aeb0, i32* %r1.global-to-local, align 4
  %v1_b448 = add i32 %v2_b440, 20
  %v2_b448 = inttoptr i32 %v1_b448 to i8*
  %v3_b448 = load i8, i8* %v2_b448, align 1
  %v4_b448 = zext i8 %v3_b448 to i32
  store i32 %v4_b448, i32* %r2.global-to-local, align 4
  %v4_b44c = mul i32 %v1_b44c, 4
  %v5_b44c = add i32 %v4_b44c, %v2_aeb0
  %v6_b44c = inttoptr i32 %v5_b44c to i32*
  %v7_b44c = load i32, i32* %v6_b44c, align 4
  store i32 %v7_b44c, i32* @r5, align 4
  %v2_b450 = icmp ugt i8 %v3_b448, 30
  %v7_b450 = icmp eq i8 %v3_b448, 31
  store i1 %v7_b450, i1* %cpsr_z.global-to-local, align 1
  %v1_b454 = add i32 %v7_b44c, 24
  store i32 %v1_b454, i32* @r6, align 4
  %v1_b458 = add i32 %v7_b44c, 44
  store i32 %v1_b458, i32* @r7, align 4
  %v2_b45c = xor i1 %v7_b450, true
  %v3_b45c = and i1 %v2_b450, %v2_b45c
  br i1 %v3_b45c, label %dec_label_pc_b30c, label %dec_label_pc_b460

dec_label_pc_b460:                                ; preds = %dec_label_pc_b438
  %v1_b460 = add i32 %v2_b440, 16
  %v2_b460 = inttoptr i32 %v1_b460 to i32*
  %v3_b460 = load i32, i32* %v2_b460, align 4
  store i32 %v3_b460, i32* %r4.global-to-local, align 4
  %v0_b464 = call i32 @function_f8c0()
  store i32 %v0_b464, i32* %r0.global-to-local, align 4
  %v3_b468 = load i32, i32* %stack_var_-40, align 4
  %v5_b470 = mul i32 %v3_b468, 24
  %v0_b474 = load i32, i32* %r4.global-to-local, align 4
  %v1_b478 = load i32, i32* @sb, align 4
  %v2_b478 = add i32 %v1_b478, %v5_b470
  store i32 %v2_b478, i32* %r1.global-to-local, align 4
  %v1_b47c = and i32 %v0_b474, 65280
  store i32 %v1_b47c, i32* %r3.global-to-local, align 4
  %v1_b474 = udiv i32 %v0_b474, 256
  %v3_b480 = and i32 %v1_b474, 65280
  store i32 %v3_b480, i32* %r2.global-to-local, align 4
  %v1_b488 = add i32 %v2_b478, 20
  %v2_b488 = inttoptr i32 %v1_b488 to i8*
  %v3_b488 = load i8, i8* %v2_b488, align 1
  %v4_b488 = zext i8 %v3_b488 to i32
  store i32 %v4_b488, i32* %lr.global-to-local, align 4
  %v2_b494 = call i32 @llvm.bswap.i32(i32 %v0_b474)
  %v7_b498 = lshr i32 %v0_b464, %v4_b488
  %v8_b498 = add i32 %v7_b498, %v2_b494
  %v3_b4a4 = mul i32 %v8_b498, 16777216
  %v1_b4a8 = and i32 %v8_b498, 65280
  store i32 %v1_b4a8, i32* %r0.global-to-local, align 4
  store i32 %v5_afd0, i32* %r2.global-to-local, align 4
  %v4_b4b4 = mul nuw nsw i32 %v1_b4a8, 256
  %v5_b4b4 = or i32 %v4_b4b4, %v3_b4a4
  store i32 %v5_b4b4, i32* %r1.global-to-local, align 4
  %v2_b4b8 = call i32 @llvm.bswap.i32(i32 %v8_b498)
  store i32 %v2_b4b8, i32* %r3.global-to-local, align 4
  store i1 %v7_b310, i1* %cpsr_z.global-to-local, align 1
  %v1_b4c0 = load i32, i32* @r5, align 4
  %v2_b4c0 = add i32 %v1_b4c0, 16
  %v3_b4c0 = inttoptr i32 %v2_b4c0 to i32*
  store i32 %v2_b4b8, i32* %v3_b4c0, align 4
  br i1 %v2_b310, label %dec_label_pc_b4c8, label %dec_label_pc_b318

dec_label_pc_b4c8:                                ; preds = %dec_label_pc_b460, %dec_label_pc_b30c
  %v0_b4c8 = call i32 @function_f8c0()
  store i32 %v0_b4c8, i32* %r0.global-to-local, align 4
  store i32 %v3_b04c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b4d8, i1* %cpsr_z.global-to-local, align 1
  %v1_b4dc = load i32, i32* @r5, align 4
  %v2_b4dc = add i32 %v1_b4dc, 12
  %v3_b4dc = inttoptr i32 %v2_b4dc to i32*
  store i32 %v0_b4c8, i32* %v3_b4dc, align 4
  br i1 %v3_b4d8, label %dec_label_pc_b4e4, label %dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge

dec_label_pc_b4c8.dec_label_pc_b32c_crit_edge:    ; preds = %dec_label_pc_b4c8
  %v1_b330.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b32c

dec_label_pc_b4e4:                                ; preds = %dec_label_pc_b4c8, %dec_label_pc_b318
  %v0_b4e4 = call i32 @function_f8c0()
  %v3_b4ec = urem i32 %v0_b4e4, 65536
  store i32 %v3_b4ec, i32* %r0.global-to-local, align 4
  %v1_b4f4 = sub nsw i32 999, %v3_b4ec
  store i32 %v1_b4f4, i32* %r2.global-to-local, align 4
  %v3_b4f8 = sdiv i32 %v1_b4f4, 256
  store i32 %v3_b4f8, i32* %r1.global-to-local, align 4
  %v3_b4fc34 = udiv i32 %v3_b4ec, 256
  store i32 %v3_b4fc34, i32* %r3.global-to-local, align 4
  %v1_b500 = trunc i32 %v3_b4fc34 to i8
  %v2_b500 = load i32, i32* @r5, align 4
  %v3_b500 = add i32 %v2_b500, 5
  %v4_b500 = inttoptr i32 %v3_b500 to i8*
  store i8 %v1_b500, i8* %v4_b500, align 1
  %v0_b504 = load i32, i32* %r0.global-to-local, align 4
  %v1_b504 = trunc i32 %v0_b504 to i8
  %v2_b504 = load i32, i32* @r5, align 4
  %v3_b504 = add i32 %v2_b504, 4
  %v4_b504 = inttoptr i32 %v3_b504 to i8*
  store i8 %v1_b504, i8* %v4_b504, align 1
  %v0_b508 = load i32, i32* %r1.global-to-local, align 4
  %v1_b508 = trunc i32 %v0_b508 to i8
  %v2_b508 = load i32, i32* @r6, align 4
  %v3_b508 = add i32 %v2_b508, 5
  %v4_b508 = inttoptr i32 %v3_b508 to i8*
  store i8 %v1_b508, i8* %v4_b508, align 1
  store i32 %v3_b050, i32* %r1.global-to-local, align 4
  %v1_b510 = load i32, i32* @r4, align 4
  %v9_b510 = icmp eq i32 %v3_b050, %v1_b510
  store i1 %v9_b510, i1* %cpsr_z.global-to-local, align 1
  %v0_b514 = load i32, i32* %r2.global-to-local, align 4
  %v1_b514 = trunc i32 %v0_b514 to i8
  %v2_b514 = load i32, i32* @r6, align 4
  %v3_b514 = add i32 %v2_b514, 4
  %v4_b514 = inttoptr i32 %v3_b514 to i8*
  store i8 %v1_b514, i8* %v4_b514, align 1
  %v0_b518 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b518, label %dec_label_pc_b51c, label %dec_label_pc_b4e4.dec_label_pc_b338_crit_edge

dec_label_pc_b4e4.dec_label_pc_b338_crit_edge:    ; preds = %dec_label_pc_b4e4
  %v1_b33c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b338

dec_label_pc_b51c:                                ; preds = %dec_label_pc_b4e4, %dec_label_pc_b32c
  %v0_b51c = call i32 @function_f8c0()
  %v1_b51c = trunc i32 %v0_b51c to i8
  store i32 %v0_b51c, i32* %r0.global-to-local, align 4
  store i32 %v3_b054, i32* %r2.global-to-local, align 4
  %v4_b524 = sdiv i32 %v0_b51c, 256
  store i32 %v4_b524, i32* %r3.global-to-local, align 4
  %v1_b528 = load i32, i32* @r4, align 4
  %v9_b528 = icmp eq i32 %v3_b054, %v1_b528
  store i1 %v9_b528, i1* %cpsr_z.global-to-local, align 1
  %v3_b52c = load i32, i32* @r5, align 4
  %v4_b52c = add i32 %v3_b52c, 44
  %v5_b52c = inttoptr i32 %v4_b52c to i8*
  store i8 %v1_b51c, i8* %v5_b52c, align 1
  %v0_b530 = load i32, i32* %r3.global-to-local, align 4
  %v1_b530 = trunc i32 %v0_b530 to i8
  %v2_b530 = load i32, i32* @r7, align 4
  %v3_b530 = add i32 %v2_b530, 1
  %v4_b530 = inttoptr i32 %v3_b530 to i8*
  store i8 %v1_b530, i8* %v4_b530, align 1
  %v0_b534 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b534, label %dec_label_pc_b538, label %dec_label_pc_b344

dec_label_pc_b538:                                ; preds = %dec_label_pc_b51c, %dec_label_pc_b338
  %v0_b538 = call i32 @function_f8c0()
  %v1_b538 = trunc i32 %v0_b538 to i8
  store i32 %v0_b538, i32* %r0.global-to-local, align 4
  %v4_b53c36 = udiv i32 %v0_b538, 256
  %v1_b540 = trunc i32 %v4_b53c36 to i8
  %v2_b540 = load i32, i32* @r7, align 4
  %v3_b540 = add i32 %v2_b540, 3
  %v4_b540 = inttoptr i32 %v3_b540 to i8*
  store i8 %v1_b540, i8* %v4_b540, align 1
  store i32 %v1_b048, i32* %r3.global-to-local, align 4
  store i1 %v2_b548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b548, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_b538
  %v1_b54c = load i32, i32* @r5, align 4
  %v2_b54c = add i32 %v1_b54c, 16
  %v3_b54c = inttoptr i32 %v2_b54c to i32*
  %v4_b54c = load i32, i32* %v3_b54c, align 4
  store i32 %v4_b54c, i32* %r3.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_b538, %bb95
  %v3_b550 = load i32, i32* @r7, align 4
  %v4_b550 = add i32 %v3_b550, 2
  %v5_b550 = inttoptr i32 %v4_b550 to i8*
  store i8 %v1_b538, i8* %v5_b550, align 1
  %v0_b554 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b554, label %dec_label_pc_b55c, label %bb97

bb97:                                             ; preds = %bb96
  %v1_b554 = load i32, i32* %r3.global-to-local, align 4
  %v2_b554 = load i32, i32* @r6, align 4
  %v3_b554 = add i32 %v2_b554, 16
  %v4_b554 = inttoptr i32 %v3_b554 to i32*
  store i32 %v1_b554, i32* %v4_b554, align 4
  br label %dec_label_pc_b358

dec_label_pc_b55c:                                ; preds = %dec_label_pc_b344, %bb96
  %v0_b55c = call i32 @function_f8c0()
  store i32 %v0_b55c, i32* %r0.global-to-local, align 4
  store i32 %v1_af9c, i32* %r1.global-to-local, align 4
  store i1 %v2_b564, i1* %cpsr_z.global-to-local, align 1
  %v1_b568 = load i32, i32* @r6, align 4
  %v2_b568 = add i32 %v1_b568, 16
  %v3_b568 = inttoptr i32 %v2_b568 to i32*
  store i32 %v0_b55c, i32* %v3_b568, align 4
  br i1 %v2_b564, label %dec_label_pc_b364, label %dec_label_pc_b570

dec_label_pc_b570:                                ; preds = %dec_label_pc_b358, %dec_label_pc_b55c
  %v0_b570 = load i32, i32* @r7, align 4
  %v1_b570 = add i32 %v0_b570, 8
  store i32 %v1_b570, i32* @r4, align 4
  store i32 %v1_b570, i32* %r0.global-to-local, align 4
  store i32 %v5_af7c, i32* %r1.global-to-local, align 4
  %v2_b57c = call i32 @function_f974(i32 %v1_b570, i32 %v5_af7c)
  store i32 %v2_b57c, i32* %r0.global-to-local, align 4
  store i32 %v5_af7c, i32* %r2.global-to-local, align 4
  %v0_b584 = load i32, i32* @r8, align 4
  %v1_b584 = trunc i32 %v0_b584 to i8
  %v2_b584 = load i32, i32* @r4, align 4
  %v4_b584 = add i32 %v2_b584, %v5_af7c
  %v5_b584 = inttoptr i32 %v4_b584 to i8*
  store i8 %v1_b584, i8* %v5_b584, align 1
  br label %dec_label_pc_b364

dec_label_pc_b58c:                                ; preds = %dec_label_pc_b364, %dec_label_pc_b2e0
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b590 = call i32 @function_12ca8(i32* null)
  store i32 %v2_b590, i32* %r0.global-to-local, align 4
  store i32 %v2_afe0, i32* %r1.global-to-local, align 4
  %v9_b598 = icmp eq i32 %v2_afe0, %v2_b590
  store i1 %v9_b598, i1* %cpsr_z.global-to-local, align 1
  %v6_b59c = icmp slt i32 %v2_afe0, %v2_b590
  br i1 %v6_b59c, label %dec_label_pc_b5a0, label %dec_label_pc_b2e0

dec_label_pc_b5a0:                                ; preds = %dec_label_pc_b58c, %dec_label_pc_ae80, %dec_label_pc_b5a8
  %v29_b5a4 = phi i32 [ %v3_aff4, %dec_label_pc_ae80 ], [ %v1_b5ac, %dec_label_pc_b5a8 ], [ %v2_b590, %dec_label_pc_b58c ]
  store i32 %v3_ae80, i32* %r4.global-to-local, align 4
  store i32 %v15_ae80, i32* %r8.global-to-local, align 4
  store i32 %v21_ae80, i32* %sl.global-to-local, align 4
  store i32 %v24_ae80, i32* %fp.global-to-local, align 4
  ret i32 %v29_b5a4

dec_label_pc_b5a8:                                ; preds = %dec_label_pc_b004
  store i32 %v3_aff4, i32* %r0.global-to-local, align 4
  %v1_b5ac = call i32 @function_129d8(i32 %v3_aff4)
  store i32 %v1_b5ac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5a0

; uselistorder directives
  uselistorder i32 %v1_b5ac, { 1, 0 }
  uselistorder i32 %v0_b538, { 0, 2, 1 }
  uselistorder i32 %v0_b51c, { 0, 2, 1 }
  uselistorder i32 %v3_b4ec, { 0, 2, 1 }
  uselistorder i32 %v2_b4b8, { 1, 0 }
  uselistorder i32 %v8_b498, { 1, 2, 0 }
  uselistorder i32 %v0_b474, { 1, 0, 2 }
  uselistorder i32 %v7_b44c, { 1, 0, 2 }
  uselistorder i32 %v1_b424, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_b3c8, { 1, 0, 2 }
  uselistorder i32 %v4_b3c4, { 0, 2, 1 }
  uselistorder i32 %v0_b3a4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b394, { 0, 2, 1 }
  uselistorder i32 %v4_b378, { 1, 0 }
  uselistorder i1 %v2_b564, { 2, 3, 1, 0 }
  uselistorder i1 %v2_b548, { 2, 3, 1, 0 }
  uselistorder i1 %v3_b4d8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_b310, { 2, 1, 0 }
  uselistorder i32 %v0_b280, { 1, 0, 2 }
  uselistorder i32 %v3_b124, { 1, 0 }
  uselistorder i32 %tmp81, { 1, 0, 2 }
  uselistorder i32 %v1_b0a0, { 0, 2, 1 }
  uselistorder i32 %v1_b098, { 2, 1, 0 }
  uselistorder i32 %v1_b094, { 1, 0 }
  uselistorder i32 %v1_b090, { 1, 0 }
  uselistorder i32 %v1_b084, { 1, 0 }
  uselistorder i32 %v3_b07c, { 2, 0, 1 }
  uselistorder i32 %v3_b04c, { 0, 1, 3, 2 }
  uselistorder i32 %v1_b048, { 4, 3, 5, 1, 2, 0 }
  uselistorder i1 %v2_b044, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b03c, { 0, 2, 1 }
  uselistorder i32 %v0_b038, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b024, { 1, 0 }
  uselistorder i1 %v7_aff8, { 1, 0 }
  uselistorder i32 %v3_aff4, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_afe0, { 2, 1, 0 }
  uselistorder i32 %v5_afd0, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_af9c, { 1, 0, 2 }
  uselistorder i32 %v5_af7c, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i8 %v5_af20, { 1, 0 }
  uselistorder i32 %v2_aeb0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_ae84, { 1, 2, 3, 0, 4, 5, 6, 9, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 16, 9, 10, 11, 12, 14, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 44, 43, 46, 45, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 7, 10, 11, 8, 9, 13, 12, 15, 14, 16, 18, 17, 19, 20, 25, 21, 22, 23, 24, 28, 26, 27, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_b5a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b570, { 1, 0 }
  uselistorder label %dec_label_pc_b55c, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_b364, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b2e0, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b5b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b5b8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i8 @__decompiler_undefined_function_1()
  %tmp33 = call i32 @__decompiler_undefined_function_0()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b5bc = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %v1_b5bc, i32* %r0.global-to-local, align 4
  %v1_b5d8 = urem i32 %arg4, 256
  store i32 %v1_b5d8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_b5e8 = call i32 @function_135a8(i32 %v1_b5bc, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_b5bc, i32* %r0.global-to-local, align 4
  %v2_b5f8 = call i32 @function_135a8(i32 %v1_b5bc, i32 4)
  %v0_b5fc = load i32, i32* @r5, align 4
  store i32 %v0_b5fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b608 = load i32, i32* @r7, align 4
  store i32 %v0_b608, i32* %r3.global-to-local, align 4
  %v0_b60c = load i32, i32* @r4, align 4
  store i32 %v0_b60c, i32* %r0.global-to-local, align 4
  %v5_b610 = inttoptr i32 %v0_b5fc to i32*
  %v6_b610 = call i32 @function_a054(i32 %v0_b60c, i32* %v5_b610, i32 2, i32 %v0_b608)
  %v1_b61c = urem i32 %v6_b610, 256
  store i32 %v1_b61c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b628 = load i32, i32* @r5, align 4
  store i32 %v0_b628, i32* %r1.global-to-local, align 4
  %v0_b62c = load i32, i32* @r4, align 4
  store i32 %v0_b62c, i32* %r0.global-to-local, align 4
  %v5_b630 = trunc i32 %v6_b610 to i8
  %v6_b634 = inttoptr i32 %v0_b628 to i32*
  %v7_b634 = call i32 @function_a054(i32 %v0_b62c, i32* %v6_b634, i32 3, i32 65535)
  %v0_b638 = load i32, i32* @r5, align 4
  store i32 %v0_b638, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b634, i32* @sl, align 4
  %v0_b648 = load i32, i32* @r4, align 4
  store i32 %v0_b648, i32* %r0.global-to-local, align 4
  %v4_b64c = inttoptr i32 %v0_b638 to i32*
  %v5_b64c = call i32 @function_a054(i32 %v0_b648, i32* %v4_b64c, i32 4, i32 64)
  %v1_b654 = urem i32 %v5_b64c, 256
  store i32 %v1_b654, i32* %ip.global-to-local, align 4
  %v0_b658 = load i32, i32* @r5, align 4
  store i32 %v0_b658, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b664 = load i32, i32* @r4, align 4
  store i32 %v0_b664, i32* %r0.global-to-local, align 4
  %v6_b66c = inttoptr i32 %v0_b658 to i32*
  %v7_b66c = call i32 @function_a054(i32 %v0_b664, i32* %v6_b66c, i32 5, i32 1)
  %v1_b678 = urem i32 %v7_b66c, 256
  store i32 %v1_b678, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b680 = load i32, i32* @r5, align 4
  store i32 %v0_b680, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b688 = load i32, i32* @r4, align 4
  store i32 %v0_b688, i32* %r0.global-to-local, align 4
  %v5_b690 = inttoptr i32 %v0_b680 to i32*
  %v6_b690 = call i32 @function_a054(i32 %v0_b688, i32* %v5_b690, i32 7, i32 65535)
  %v0_b694 = load i32, i32* @r5, align 4
  store i32 %v0_b694, i32* %r1.global-to-local, align 4
  %v3_b698 = mul i32 %v6_b690, 65536
  store i32 %v3_b698, i32* @r8, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_b6a0 = load i32, i32* @r7, align 4
  store i32 %v0_b6a0, i32* %r3.global-to-local, align 4
  %v0_b6a4 = load i32, i32* @r4, align 4
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  %v4_b6a8 = inttoptr i32 %v0_b694 to i32*
  %v5_b6a8 = call i32 @function_a054(i32 %v0_b6a4, i32* %v4_b6a8, i32 10, i32 %v0_b6a0)
  %v1_b6b0 = urem i32 %v5_b6a8, 256
  store i32 %v1_b6b0, i32* %ip.global-to-local, align 4
  %v0_b6b4 = load i32, i32* @r5, align 4
  store i32 %v0_b6b4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b6c0 = load i32, i32* @r4, align 4
  store i32 %v0_b6c0, i32* %r0.global-to-local, align 4
  %v5_b6c8 = inttoptr i32 %v0_b6b4 to i32*
  %v6_b6c8 = call i32 @function_a054(i32 %v0_b6c0, i32* %v5_b6c8, i32 11, i32 1)
  %v1_b6d0 = urem i32 %v6_b6c8, 256
  store i32 %v1_b6d0, i32* %ip.global-to-local, align 4
  %v0_b6d4 = load i32, i32* @r5, align 4
  store i32 %v0_b6d4, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b6e0 = load i32, i32* @r4, align 4
  store i32 %v0_b6e0, i32* %r0.global-to-local, align 4
  %v5_b6e8 = inttoptr i32 %v0_b6d4 to i32*
  %v6_b6e8 = call i32 @function_a054(i32 %v0_b6e0, i32* %v5_b6e8, i32 12, i32 1)
  %v1_b6f0 = urem i32 %v6_b6e8, 256
  store i32 %v1_b6f0, i32* %ip.global-to-local, align 4
  %v0_b6f4 = load i32, i32* @r5, align 4
  store i32 %v0_b6f4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_b6fc = load i32, i32* @r7, align 4
  store i32 %v0_b6fc, i32* %r3.global-to-local, align 4
  %v0_b700 = load i32, i32* @r4, align 4
  store i32 %v0_b700, i32* %r0.global-to-local, align 4
  %v5_b708 = inttoptr i32 %v0_b6f4 to i32*
  %v6_b708 = call i32 @function_a054(i32 %v0_b700, i32* %v5_b708, i32 13, i32 %v0_b6fc)
  %v1_b710 = urem i32 %v6_b708, 256
  store i32 %v1_b710, i32* %ip.global-to-local, align 4
  %v0_b714 = load i32, i32* @r5, align 4
  store i32 %v0_b714, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_b71c = load i32, i32* @r7, align 4
  store i32 %v0_b71c, i32* %r3.global-to-local, align 4
  %v0_b720 = load i32, i32* @r4, align 4
  store i32 %v0_b720, i32* %r0.global-to-local, align 4
  %v5_b728 = inttoptr i32 %v0_b714 to i32*
  %v6_b728 = call i32 @function_a054(i32 %v0_b720, i32* %v5_b728, i32 14, i32 %v0_b71c)
  %v1_b730 = urem i32 %v6_b728, 256
  store i32 %v1_b730, i32* %ip.global-to-local, align 4
  %v0_b734 = load i32, i32* @r5, align 4
  store i32 %v0_b734, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_b73c = load i32, i32* @r7, align 4
  store i32 %v0_b73c, i32* %r3.global-to-local, align 4
  %v0_b740 = load i32, i32* @r4, align 4
  store i32 %v0_b740, i32* %r0.global-to-local, align 4
  %v5_b748 = inttoptr i32 %v0_b734 to i32*
  %v6_b748 = call i32 @function_a054(i32 %v0_b740, i32* %v5_b748, i32 15, i32 %v0_b73c)
  %v1_b750 = urem i32 %v6_b748, 256
  store i32 %v1_b750, i32* %ip.global-to-local, align 4
  %v0_b754 = load i32, i32* @r7, align 4
  store i32 %v0_b754, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b75c = load i32, i32* @r5, align 4
  store i32 %v0_b75c, i32* %r1.global-to-local, align 4
  %v0_b760 = load i32, i32* @r4, align 4
  store i32 %v0_b760, i32* %r0.global-to-local, align 4
  %v5_b768 = inttoptr i32 %v0_b75c to i32*
  %v6_b768 = call i32 @function_a054(i32 %v0_b760, i32* %v5_b768, i32 %v0_b754, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b774 = load i32, i32* @r5, align 4
  store i32 %v0_b774, i32* %r1.global-to-local, align 4
  %v0_b77c = load i32, i32* @r4, align 4
  store i32 %v0_b77c, i32* %r0.global-to-local, align 4
  %v4_b780 = inttoptr i32 %v0_b774 to i32*
  %v5_b780 = call i32 @function_a054(i32 %v0_b77c, i32* %v4_b780, i32 1, i32 1)
  %v1_b788 = urem i32 %v5_b780, 256
  store i32 %v1_b788, i32* %r3.global-to-local, align 4
  %v0_b78c = load i32, i32* @r7, align 4
  store i32 %v0_b78c, i32* %r0.global-to-local, align 4
  %v1_b794 = inttoptr i32 %v0_b78c to i32*
  %v2_b794 = call i32 @function_12ca8(i32* %v1_b794)
  %v1_b798 = load i32, i32* @r6, align 4
  %v2_b798 = add i32 %v1_b798, %v2_b794
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b7ac = call i32 @function_132bc(i32 2, i32 3, i32 6)
  store i32 %v3_b7ac, i32* %r0.global-to-local, align 4
  %v0_b7b0 = load i32, i32* @r8, align 4
  %v3_b7b0 = udiv i32 %v0_b7b0, 65536
  store i32 %v3_b7b0, i32* %r1.global-to-local, align 4
  %v7_b7b4 = icmp eq i32 %v3_b7ac, -1
  store i1 %v7_b7b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b7ac, i32* @sb, align 4
  br i1 %v7_b7b4, label %dec_label_pc_bb68, label %dec_label_pc_b7c4

dec_label_pc_b7c4:                                ; preds = %dec_label_pc_b5b8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b7cc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b7cc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b7d4 = load i32, i32* @r7, align 4
  store i32 %v0_b7d4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b7e0 = call i32 @function_1328c(i32 %v3_b7ac, i32 %v0_b7d4, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_b7e0, i32* %r0.global-to-local, align 4
  %v7_b7e4 = icmp eq i32 %v6_b7e0, -1
  store i1 %v7_b7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b7e4, label %dec_label_pc_bb60, label %dec_label_pc_b7ec

dec_label_pc_b7ec:                                ; preds = %dec_label_pc_b7c4
  store i32 %v1_b5bc, i32* %r2.global-to-local, align 4
  %v0_b7f0 = load i32, i32* @sl, align 4
  %v3_b7f0 = mul i32 %v0_b7f0, 65536
  store i32 %v3_b7f0, i32* %r0.global-to-local, align 4
  %v3_b7f4 = urem i32 %v0_b7f0, 65536
  store i32 %v3_b7f4, i32* %r3.global-to-local, align 4
  %v2_b7f8 = icmp eq i32 %v1_b5bc, 0
  store i1 %v2_b7f8, i1* %cpsr_z.global-to-local, align 1
  %v0_b7fc = load i32, i32* @r7, align 4
  store i32 %v0_b7fc, i32* %stack_var_-40, align 4
  br i1 %v2_b7f8, label %dec_label_pc_b7ec.dec_label_pc_b9e8.preheader_crit_edge, label %dec_label_pc_b808

dec_label_pc_b7ec.dec_label_pc_b9e8.preheader_crit_edge: ; preds = %dec_label_pc_b7ec
  %.pre = add i32 %v6_b768, 40
  br label %dec_label_pc_b9e8.preheader

dec_label_pc_b808:                                ; preds = %dec_label_pc_b7ec
  %v0_b80c = load i32, i32* @r8, align 4
  %v3_b80c = udiv i32 %v0_b80c, 16777216
  %tmp77 = udiv i32 %v0_b7f0, 256
  %v3_b810 = urem i32 %tmp77, 256
  store i32 %v3_b810, i32* %r0.global-to-local, align 4
  %v1_b814 = add i32 %v6_b768, 40
  store i32 %v1_b814, i32* %ip.global-to-local, align 4
  %v3_bbdc = icmp ugt i32 %v0_b7b0, -65537
  %v2_b8c0 = ptrtoint i32* %stack_var_-60 to i32
  %v3_b8cc = bitcast i32* %stack_var_-60 to %sockaddr*
  %v1_b8e4 = urem i32 %v1_b814, 256
  %tmp78 = udiv i32 %v1_b814, 256
  %v3_b8e8 = urem i32 %tmp78, 256
  %v2_b8f8 = ptrtoint i32* %stack_var_-76 to i32
  %v2_b8fc = ptrtoint i32* %stack_var_-332 to i32
  %v2_b900 = ptrtoint i32* %stack_var_-44 to i32
  %v4_b974 = zext i8 %tmp32 to i32
  %v4_b978 = zext i8 %tmp31 to i32
  %v4_b984 = mul nuw nsw i32 %v4_b978, 256
  %v4_b994 = zext i8 %tmp30 to i32
  %v1_b998 = and i32 %v4_b994, 18
  %v2_b99c = icmp eq i32 %v1_b998, 18
  %v4_bd04 = sext i8 %v5_b630 to i32
  %sext6 = mul i32 %v5_b64c, 16777216
  %v4_bd10 = sdiv i32 %sext6, 16777216
  %v1_bdf4 = urem i32 %v5_b6a8, 2
  %tmp101 = sub nsw i32 0, %v1_bdf4
  %v4_bdfc = and i32 %tmp101, 32
  %v1_be28 = urem i32 %v6_b6e8, 2
  %tmp102 = sub nsw i32 0, %v1_be28
  %v4_be30 = and i32 %tmp102, 8
  %v1_be74 = urem i32 %v6_b748, 2
  %v4_b8ec = mul nuw nsw i32 %v1_b8e4, 256
  %v5_b8ec = or i32 %v4_b8ec, %v3_b8e8
  %v5_b984 = or i32 %v4_b974, %v4_b984
  %v1_b9a4 = and i32 %v4_b994, 5
  %v2_b9a4 = icmp eq i32 %v1_b9a4, 0
  %v1_b8ac = urem i32 %v3_b7b0, 256
  %v4_b8b0 = mul nuw nsw i32 %v1_b8ac, 256
  %v5_b8b0 = or i32 %v3_b80c, %v4_b8b0
  %v1_b8b8 = trunc i32 %v3_b7b0 to i8
  %v1_b8bc = trunc i32 %v3_b80c to i8
  %v1_bce4 = urem i32 %v0_b7f0, 256
  %v4_bcec = mul nuw nsw i32 %v1_bce4, 256
  %v5_bcec = or i32 %v4_bcec, %v3_b810
  %sext = mul i32 %v1_b814, 16777216
  %v4_bd08 = sdiv i32 %sext, 16777216
  %v1_be0c = urem i32 %v6_b6c8, 2
  %tmp103 = sub nsw i32 0, %v1_be0c
  %v4_be14 = and i32 %tmp103, 16
  %v1_be40 = urem i32 %v6_b708, 2
  %tmp104 = sub nsw i32 0, %v1_be40
  %v4_be48 = and i32 %tmp104, 4
  %v1_be58 = urem i32 %v6_b728, 2
  %tmp105 = sub nsw i32 0, %v1_be58
  %v3_be60 = and i32 %tmp105, 2
  br label %dec_label_pc_b824.outer

dec_label_pc_b824.outer:                          ; preds = %bb93, %dec_label_pc_b808
  %stack_var_-336.0.ph = phi i32 [ %v0_bd24, %bb93 ], [ %tmp, %dec_label_pc_b808 ]
  %stack_var_-56.0.ph = phi i32 [ %v0_bc30, %bb93 ], [ %tmp38, %dec_label_pc_b808 ]
  br label %dec_label_pc_b824

dec_label_pc_b824:                                ; preds = %dec_label_pc_b824.outer, %dec_label_pc_b9d0
  %stack_var_-56.0 = phi i32 [ %stack_var_-56.5, %dec_label_pc_b9d0 ], [ %stack_var_-56.0.ph, %dec_label_pc_b824.outer ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b830 = call i32 @function_132bc(i32 2, i32 1, i32 0)
  store i32 %v3_b830, i32* %r0.global-to-local, align 4
  %v7_b834 = icmp eq i32 %v3_b830, -1
  store i1 %v7_b834, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b830, i32* @sl, align 4
  br i1 %v7_b834, label %dec_label_pc_b9d0, label %dec_label_pc_b840

dec_label_pc_b840:                                ; preds = %dec_label_pc_b824, %dec_label_pc_b9ac
  %v0_b848 = phi i32 [ %v3_b9c0, %dec_label_pc_b9ac ], [ %v3_b830, %dec_label_pc_b824 ]
  %stack_var_-56.1 = phi i32 [ %v0_bc30, %dec_label_pc_b9ac ], [ %stack_var_-56.0, %dec_label_pc_b824 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b848 = call i32 @function_12914(i32 %v0_b848, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b850 = or i32 %v2_b848, 2048
  store i32 %v1_b850, i32* @r2, align 4
  %v0_b854 = load i32, i32* @sl, align 4
  store i32 %v0_b854, i32* %r0.global-to-local, align 4
  %v2_b858 = call i32 @function_12914(i32 %v0_b854, i32 4)
  store i32 %v2_b858, i32* %r0.global-to-local, align 4
  %v3_b85c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b85c, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %lr.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_b878 = mul i32 %v3_b85c, 24
  store i32 %v5_b878, i32* %r1.global-to-local, align 4
  %v2_b87c = add i32 %v5_b878, %arg3
  store i32 %v2_b87c, i32* %r2.global-to-local, align 4
  %v1_b880 = add i32 %v2_b87c, 20
  %v2_b880 = inttoptr i32 %v1_b880 to i8*
  %v3_b880 = load i8, i8* %v2_b880, align 1
  %v4_b880 = zext i8 %v3_b880 to i32
  store i32 %v4_b880, i32* %r3.global-to-local, align 4
  %v2_b884 = icmp ugt i8 %v3_b880, 30
  %v7_b884 = icmp eq i8 %v3_b880, 31
  store i1 %v7_b884, i1* %cpsr_z.global-to-local, align 1
  %v2_b888 = xor i1 %v7_b884, true
  %v3_b888 = and i1 %v2_b884, %v2_b888
  br i1 %v3_b888, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_b840
  %v5_b888 = add i32 %v2_b87c, 16
  %v6_b888 = inttoptr i32 %v5_b888 to i32*
  %v7_b888 = load i32, i32* %v6_b888, align 4
  store i32 %v7_b888, i32* %r3.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_b840, %bb
  %v4_b88c = phi i32 [ %v4_b880, %dec_label_pc_b840 ], [ %v7_b888, %bb ]
  %v4_b88c.stack_var_-56.1 = select i1 %v3_b888, i32 %v4_b88c, i32 %stack_var_-56.1
  %v2_b890 = xor i1 %v2_b884, true
  %v3_b890 = or i1 %v7_b884, %v2_b890
  br i1 %v3_b890, label %dec_label_pc_bb70, label %dec_label_pc_b894

dec_label_pc_b894:                                ; preds = %bb79
  store i32 %v3_b7b0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bbdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bbdc, label %dec_label_pc_bbe4, label %dec_label_pc_b8a8

dec_label_pc_b8a8:                                ; preds = %dec_label_pc_bb70, %dec_label_pc_b894
  %stack_var_-56.3 = phi i32 [ %v2_bbc8, %dec_label_pc_bb70 ], [ %v4_b88c.stack_var_-56.1, %dec_label_pc_b894 ]
  store i32 %v3_b80c, i32* %r0.global-to-local, align 4
  store i32 %v5_b8b0, i32* %r3.global-to-local, align 4
  store i32 %v1_b8ac, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b8c0

dec_label_pc_b8c0:                                ; preds = %dec_label_pc_bbe4, %dec_label_pc_b8a8
  %stack_var_-57.0 = phi i8 [ %v1_bbec, %dec_label_pc_bbe4 ], [ %v1_b8b8, %dec_label_pc_b8a8 ]
  %v0_bc30 = phi i32 [ %stack_var_-56.6, %dec_label_pc_bbe4 ], [ %stack_var_-56.3, %dec_label_pc_b8a8 ]
  %storemerge = phi i8 [ %v1_bbe4, %dec_label_pc_bbe4 ], [ %v1_b8bc, %dec_label_pc_b8a8 ]
  store i32 %v2_b8c0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b8c8 = load i32, i32* @sl, align 4
  store i32 %v0_b8c8, i32* %r0.global-to-local, align 4
  %v4_b8cc = call i32 @function_13118(i32 %v0_b8c8, %sockaddr* %v3_b8cc, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b8d4 = call i32 @function_12ca8(i32* null)
  store i32 %v2_b8d4, i32* %r0.global-to-local, align 4
  store i32 %v1_b814, i32* %r1.global-to-local, align 4
  store i32 %v1_b8e4, i32* %r3.global-to-local, align 4
  store i32 %v5_b8ec, i32* @fp, align 4
  store i32 %v1_b8e4, i32* %r2.global-to-local, align 4
  store i32 %v2_b8d4, i32* @r4, align 4
  store i32 %v2_b8fc, i32* @r7, align 4
  store i32 %v2_b900, i32* @r6, align 4
  %v9_b958 = icmp eq i32 %tmp33, %v0_bc30
  %v4_b97c = zext i8 %storemerge to i32
  %v4_b980 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_b958 to i32
  %v9_b96c = icmp eq i1 %v9_b958, false
  %v4_b988 = mul nuw nsw i32 %v4_b980, 256
  %v5_b988 = or i32 %v4_b97c, %v4_b988
  %v9_b98c = icmp eq i32 %v5_b988, %v5_b984
  br label %dec_label_pc_b91c

dec_label_pc_b90c:                                ; preds = %.thread25, %dec_label_pc_b974, %dec_label_pc_b9a4, %bb82
  %v2_b90c = call i32 @function_12ca8(i32* null)
  %v0_b910 = load i32, i32* @r4, align 4
  %v2_b910 = sub i32 %v2_b90c, %v0_b910
  store i32 %v2_b910, i32* %r0.global-to-local, align 4
  %v7_b914 = icmp eq i32 %v2_b910, 10
  store i1 %v7_b914, i1* %cpsr_z.global-to-local, align 1
  %v8_b918 = icmp sgt i32 %v2_b910, 10
  br i1 %v8_b918, label %dec_label_pc_b9ac, label %dec_label_pc_b91c

dec_label_pc_b91c:                                ; preds = %dec_label_pc_b90c, %dec_label_pc_b8c0
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_b8fc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b92c = load i32, i32* @sb, align 4
  store i32 %v0_b92c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  %v7_b93c = call i32 @function_131f8(i32 %v0_b92c, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_b8f8, i32 %v2_b900)
  store i32 %v7_b93c, i32* %r2.global-to-local, align 4
  %v7_b944 = icmp eq i32 %v7_b93c, -1
  store i1 %v7_b944, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b944, label %dec_label_pc_bb68, label %dec_label_pc_b950

dec_label_pc_b950:                                ; preds = %dec_label_pc_b91c
  store i32 %tmp33, i32* %r3.global-to-local, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b964 = icmp eq i32 %v7_b93c, 40
  store i1 %v7_b964, i1* %cpsr_z.global-to-local, align 1
  %tmp106 = icmp ult i32 %v7_b93c, 41
  br i1 %tmp106, label %.thread25, label %bb82

.thread25:                                        ; preds = %dec_label_pc_b950
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b90c

bb82:                                             ; preds = %dec_label_pc_b950
  store i1 %v9_b96c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b96c, label %dec_label_pc_b90c, label %dec_label_pc_b974

dec_label_pc_b974:                                ; preds = %bb82
  store i32 %v4_b978, i32* %r1.global-to-local, align 4
  store i32 %v4_b97c, i32* %ip.global-to-local, align 4
  store i32 %v4_b980, i32* %r2.global-to-local, align 4
  store i32 %v5_b984, i32* %r3.global-to-local, align 4
  store i32 %v5_b988, i32* @r5, align 4
  store i1 %v9_b98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b98c, label %dec_label_pc_b994, label %dec_label_pc_b90c

dec_label_pc_b994:                                ; preds = %dec_label_pc_b974
  store i32 %v4_b994, i32* %r2.global-to-local, align 4
  store i32 %v1_b998, i32* %r3.global-to-local, align 4
  store i1 %v2_b99c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b99c, label %dec_label_pc_bc24, label %dec_label_pc_b9a4

dec_label_pc_b9a4:                                ; preds = %dec_label_pc_b994
  store i1 %v2_b9a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b9a4, label %dec_label_pc_b90c, label %dec_label_pc_b9ac

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b9a4, %dec_label_pc_b90c
  %v0_b9ac = load i32, i32* @sl, align 4
  store i32 %v0_b9ac, i32* %r0.global-to-local, align 4
  %v1_b9b0 = call i32 @function_129d8(i32 %v0_b9ac)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b9c0 = call i32 @function_132bc(i32 2, i32 1, i32 0)
  store i32 %v3_b9c0, i32* %r0.global-to-local, align 4
  %v3_b9c4 = icmp eq i32 %v3_b9c0, -1
  %v8_b9c4 = icmp eq i32 %v3_b9c0, -1
  store i1 %v8_b9c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b9c0, i32* @sl, align 4
  br i1 %v3_b9c4, label %dec_label_pc_b9d0, label %dec_label_pc_b840

dec_label_pc_b9d0:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b824
  %stack_var_-56.5 = phi i32 [ %stack_var_-56.0, %dec_label_pc_b824 ], [ %v0_bc30, %dec_label_pc_b9ac ]
  %v3_b9d0 = load i32, i32* %stack_var_-40, align 4
  %v1_b9d8 = add i32 %v3_b9d0, 1
  store i32 %v1_b9d8, i32* %r3.global-to-local, align 4
  %v9_b9dc = icmp eq i32 %v1_b9d8, %v1_b5bc
  store i1 %v9_b9dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b9d8, i32* %stack_var_-40, align 4
  %v5_b9e4 = icmp slt i32 %v1_b9d8, %v1_b5bc
  br i1 %v5_b9e4, label %dec_label_pc_b824, label %dec_label_pc_b9e8.preheader

dec_label_pc_b9e8.preheader:                      ; preds = %bb93, %dec_label_pc_b9d0, %dec_label_pc_b7ec.dec_label_pc_b9e8.preheader_crit_edge
  %v1_ba1c.pre-phi = phi i32 [ %.pre, %dec_label_pc_b7ec.dec_label_pc_b9e8.preheader_crit_edge ], [ %v1_b814, %dec_label_pc_b9d0 ], [ %v1_b814, %bb93 ]
  %v1_ba00 = add i32 %v6_b768, 20
  %v3_ba04 = mul i32 %v1_ba00, 65536
  %tmp84 = mul i32 %v1_ba00, 256
  %v1_ba0c = and i32 %tmp84, 65280
  %tmp85 = udiv i32 %v1_ba00, 256
  %v4_ba10 = urem i32 %tmp85, 256
  %v5_ba10 = or i32 %v4_ba10, %v1_ba0c
  %v2_bb40 = icmp eq i32 %v1_b788, 0
  %v3_bb2c = icmp eq i32 %v3_b7f4, 65535
  br label %dec_label_pc_b9e8

dec_label_pc_b9e8:                                ; preds = %dec_label_pc_b9e8.preheader, %dec_label_pc_bc0c
  store i32 %v1_b5bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_b7f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b7f8, label %dec_label_pc_bc0c, label %dec_label_pc_b9fc

dec_label_pc_b9fc:                                ; preds = %dec_label_pc_b9e8
  store i32 %v1_ba00, i32* @r8, align 4
  store i32 %v3_ba04, i32* %r2.global-to-local, align 4
  store i32 %v5_ba10, i32* @fp, align 4
  store i32 %v6_b768, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_ba1c.pre-phi, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_bb18

dec_label_pc_ba28:                                ; preds = %dec_label_pc_bb3c, %dec_label_pc_bb50
  %v0_ba28 = load i32, i32* @r7, align 4
  %v1_ba28 = trunc i32 %v0_ba28 to i8
  %v2_ba28 = load i32, i32* @r4, align 4
  %v3_ba28 = add i32 %v2_ba28, 10
  %v4_ba28 = inttoptr i32 %v3_ba28 to i8*
  store i8 %v1_ba28, i8* %v4_ba28, align 1
  %v0_ba2c = load i32, i32* @r7, align 4
  %v1_ba2c = trunc i32 %v0_ba2c to i8
  %v2_ba2c = load i32, i32* @r4, align 4
  %v3_ba2c = add i32 %v2_ba2c, 11
  %v4_ba2c = inttoptr i32 %v3_ba2c to i8*
  store i8 %v1_ba2c, i8* %v4_ba2c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ba34 = load i32, i32* @r4, align 4
  store i32 %v0_ba34, i32* @r0, align 4
  %v2_ba38 = call i32 @function_e498(i32 %v0_ba34, i32 20)
  %v3_ba38 = trunc i32 %v2_ba38 to i8
  store i32 %v2_ba38, i32* %r0.global-to-local, align 4
  %v3_ba3c = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b5e8, i32* %r2.global-to-local, align 4
  %v3_ba44 = mul i32 %v3_ba3c, 16
  %v2_ba48 = add i32 %v3_ba44, %v2_b5e8
  store i32 %v2_ba48, i32* %r1.global-to-local, align 4
  %v1_ba4c = add i32 %v2_ba48, 4
  %v2_ba4c = inttoptr i32 %v1_ba4c to i32*
  %v3_ba4c = load i32, i32* %v2_ba4c, align 4
  %v3_ba50 = mul i32 %v3_ba4c, 65536
  store i32 %v3_ba50, i32* %ip.global-to-local, align 4
  %tmp86 = mul i32 %v3_ba4c, 256
  %v1_ba58 = and i32 %tmp86, 65280
  %tmp87 = udiv i32 %v3_ba4c, 256
  %v4_ba5c = urem i32 %tmp87, 256
  %v5_ba5c = or i32 %v4_ba5c, %v1_ba58
  store i32 %v5_ba5c, i32* %r2.global-to-local, align 4
  %v1_ba60 = add i32 %v3_ba4c, 1
  store i32 %v1_ba60, i32* %r3.global-to-local, align 4
  store i32 %v1_ba60, i32* %v2_ba4c, align 4
  %v0_ba68 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba68 = load i32, i32* @r5, align 4
  %v2_ba68 = add i32 %v1_ba68, 4
  %v3_ba68 = inttoptr i32 %v2_ba68 to i32*
  store i32 %v0_ba68, i32* %v3_ba68, align 4
  %v0_ba6c = load i32, i32* %r1.global-to-local, align 4
  %v1_ba6c = add i32 %v0_ba6c, 8
  %v2_ba6c = inttoptr i32 %v1_ba6c to i32*
  %v3_ba6c = load i32, i32* %v2_ba6c, align 4
  %tmp88 = mul i32 %v3_ba6c, 256
  %v1_ba78 = and i32 %tmp88, 65280
  %tmp89 = udiv i32 %v3_ba6c, 256
  %v4_ba7c = urem i32 %tmp89, 256
  %v5_ba7c = or i32 %v4_ba7c, %v1_ba78
  store i32 %v5_ba7c, i32* %r2.global-to-local, align 4
  %v4_ba8028 = udiv i32 %v2_ba38, 256
  %v1_ba84 = trunc i32 %v4_ba8028 to i8
  %v2_ba84 = load i32, i32* @r4, align 4
  %v3_ba84 = add i32 %v2_ba84, 11
  %v4_ba84 = inttoptr i32 %v3_ba84 to i8*
  store i8 %v1_ba84, i8* %v4_ba84, align 1
  %v3_ba88 = load i32, i32* @r4, align 4
  %v4_ba88 = add i32 %v3_ba88, 10
  %v5_ba88 = inttoptr i32 %v4_ba88 to i8*
  store i8 %v3_ba38, i8* %v5_ba88, align 1
  %v0_ba8c = load i32, i32* %r2.global-to-local, align 4
  %v1_ba8c = load i32, i32* @r5, align 4
  %v2_ba8c = add i32 %v1_ba8c, 8
  %v3_ba8c = inttoptr i32 %v2_ba8c to i32*
  store i32 %v0_ba8c, i32* %v3_ba8c, align 4
  %v0_ba90 = load i32, i32* @r5, align 4
  store i32 %v0_ba90, i32* @r1, align 4
  %v0_ba94 = load i32, i32* @fp, align 4
  store i32 %v0_ba94, i32* %r2.global-to-local, align 4
  %v0_ba98 = load i32, i32* @r8, align 4
  store i32 %v0_ba98, i32* %r3.global-to-local, align 4
  %v0_ba9c = load i32, i32* @r4, align 4
  store i32 %v0_ba9c, i32* %r0.global-to-local, align 4
  %v0_baa0 = load i32, i32* @r7, align 4
  %v1_baa0 = trunc i32 %v0_baa0 to i8
  %v3_baa0 = add i32 %v0_ba90, 16
  %v4_baa0 = inttoptr i32 %v3_baa0 to i8*
  store i8 %v1_baa0, i8* %v4_baa0, align 1
  %v0_baa4 = load i32, i32* @r7, align 4
  %v1_baa4 = trunc i32 %v0_baa4 to i8
  %v2_baa4 = load i32, i32* @r5, align 4
  %v3_baa4 = add i32 %v2_baa4, 17
  %v4_baa4 = inttoptr i32 %v3_baa4 to i8*
  store i8 %v1_baa4, i8* %v4_baa4, align 1
  %v4_baa8 = call i32 @function_e4f4(i32 %v0_ba9c, i32 %v0_ba90, i32 %v0_ba94, i32 %v0_ba98)
  %v5_baa8 = trunc i32 %v4_baa8 to i8
  store i32 %v4_baa8, i32* %r0.global-to-local, align 4
  %v4_baac29 = udiv i32 %v4_baa8, 256
  %v1_bab0 = trunc i32 %v4_baac29 to i8
  %v2_bab0 = load i32, i32* @r5, align 4
  %v3_bab0 = add i32 %v2_bab0, 17
  %v4_bab0 = inttoptr i32 %v3_bab0 to i8*
  store i8 %v1_bab0, i8* %v4_bab0, align 1
  %v3_bab4 = load i32, i32* @r5, align 4
  %v4_bab4 = add i32 %v3_bab4, 16
  %v5_bab4 = inttoptr i32 %v4_bab4 to i8*
  store i8 %v5_baa8, i8* %v5_bab4, align 1
  %v3_bab8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bab8, i32* %r3.global-to-local, align 4
  %v0_babc = load i32, i32* @r4, align 4
  %v1_babc = add i32 %v0_babc, 20
  %v2_babc = inttoptr i32 %v1_babc to i32*
  %v3_babc = load i32, i32* %v2_babc, align 4
  %v5_bac4 = mul i32 %v3_bab8, 24
  %v3_bacc = udiv i32 %v3_babc, 65536
  store i32 %v3_bacc, i32* %r2.global-to-local, align 4
  %v2_bad0 = add i32 %v5_bac4, %arg3
  store i32 %v2_bad0, i32* %ip.global-to-local, align 4
  %v3_bad44 = udiv i32 %v3_babc, 16777216
  %v1_bad8 = trunc i32 %v3_bad44 to i8
  %v3_bad8 = add i32 %v2_bad0, 3
  %v4_bad8 = inttoptr i32 %v3_bad8 to i8*
  store i8 %v1_bad8, i8* %v4_bad8, align 1
  %v0_badc = load i32, i32* %r2.global-to-local, align 4
  %v1_badc = trunc i32 %v0_badc to i8
  %v2_badc = load i32, i32* %ip.global-to-local, align 4
  %v3_badc = add i32 %v2_badc, 2
  %v4_badc = inttoptr i32 %v3_badc to i8*
  store i8 %v1_badc, i8* %v4_badc, align 1
  %v0_bae0 = load i32, i32* @r4, align 4
  store i32 %v0_bae0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bae8 = load i32, i32* @sb, align 4
  store i32 %v0_bae8, i32* %r0.global-to-local, align 4
  %v0_baec = load i32, i32* @sl, align 4
  store i32 %v0_baec, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_baf4 = load i32, i32* %ip.global-to-local, align 4
  %v6_bafc = inttoptr i32 %v0_bae0 to i32*
  %v7_bafc = call i32 @function_13258(i32 %v0_bae8, i32* %v6_bafc, i32 %v0_baec, i32 16384, i32 %v0_baf4, i32 16)
  %v3_bb00 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bb00, i32* %r3.global-to-local, align 4
  store i32 %v1_b5bc, i32* %ip.global-to-local, align 4
  %v1_bb08 = add i32 %v3_bb00, 1
  store i32 %v1_bb08, i32* %r0.global-to-local, align 4
  %v9_bb0c = icmp eq i32 %v1_bb08, %v1_b5bc
  store i1 %v9_bb0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bb08, i32* %stack_var_-40, align 4
  %v6_bb14 = icmp slt i32 %v1_bb08, %v1_b5bc
  br i1 %v6_bb14, label %dec_label_pc_bb18, label %dec_label_pc_bc0c

dec_label_pc_bb18:                                ; preds = %dec_label_pc_ba28, %dec_label_pc_b9fc
  %v1_bb24 = phi i32 [ %v1_bb08, %dec_label_pc_ba28 ], [ 0, %dec_label_pc_b9fc ]
  store i32 %v2_b5f8, i32* %ip.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b7f4, i32* %lr.global-to-local, align 4
  %v4_bb24 = mul i32 %v1_bb24, 4
  %v5_bb24 = add i32 %v4_bb24, %v2_b5f8
  %v6_bb24 = inttoptr i32 %v5_bb24 to i32*
  %v7_bb24 = load i32, i32* %v6_bb24, align 4
  store i32 %v7_bb24, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bb2c, i1* %cpsr_z.global-to-local, align 1
  %v1_bb30 = add i32 %v7_bb24, 40
  store i32 %v1_bb30, i32* @r6, align 4
  %v1_bb34 = add i32 %v7_bb24, 20
  store i32 %v1_bb34, i32* @r5, align 4
  br i1 %v3_bb2c, label %dec_label_pc_bbf8, label %dec_label_pc_bb3c

dec_label_pc_bb3c:                                ; preds = %dec_label_pc_bb18, %dec_label_pc_bbf8
  %v0_bb48 = phi i32 [ %v1_bb30, %dec_label_pc_bb18 ], [ %v0_bb48.pre, %dec_label_pc_bbf8 ]
  store i1 %v2_bb40, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_b768, i32* %r1.global-to-local, align 4
  store i32 %v0_bb48, i32* %r0.global-to-local, align 4
  br i1 %v2_bb40, label %dec_label_pc_ba28, label %dec_label_pc_bb50

dec_label_pc_bb50:                                ; preds = %dec_label_pc_bb3c
  %v2_bb50 = call i32 @function_f974(i32 %v0_bb48, i32 %v6_b768)
  store i32 %v2_bb50, i32* %r0.global-to-local, align 4
  store i32 %v6_b768, i32* %r1.global-to-local, align 4
  %v0_bb58 = load i32, i32* @r7, align 4
  %v1_bb58 = trunc i32 %v0_bb58 to i8
  %v2_bb58 = load i32, i32* @r6, align 4
  %v4_bb58 = add i32 %v2_bb58, %v6_b768
  %v5_bb58 = inttoptr i32 %v4_bb58 to i8*
  store i8 %v1_bb58, i8* %v5_bb58, align 1
  br label %dec_label_pc_ba28

dec_label_pc_bb60:                                ; preds = %dec_label_pc_b7c4
  %v0_bb60 = load i32, i32* @sb, align 4
  store i32 %v0_bb60, i32* %r0.global-to-local, align 4
  %v1_bb64 = call i32 @function_129d8(i32 %v0_bb60)
  store i32 %v1_bb64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb68

dec_label_pc_bb68:                                ; preds = %dec_label_pc_b91c, %dec_label_pc_bc0c, %dec_label_pc_b5b8, %dec_label_pc_bb60
  %v29_bb6c = phi i32 [ %v3_b7ac, %dec_label_pc_b5b8 ], [ %v1_bb64, %dec_label_pc_bb60 ], [ %v2_bc10, %dec_label_pc_bc0c ], [ 0, %dec_label_pc_b91c ]
  ret i32 %v29_bb6c

dec_label_pc_bb70:                                ; preds = %bb79
  %v1_bb70 = add i32 %v2_b87c, 16
  %v2_bb70 = inttoptr i32 %v1_bb70 to i32*
  %v3_bb70 = load i32, i32* %v2_bb70, align 4
  store i32 %v3_bb70, i32* @r4, align 4
  %v0_bb74 = call i32 @function_f8c0()
  store i32 %v0_bb74, i32* %r0.global-to-local, align 4
  %v3_bb78 = load i32, i32* %stack_var_-40, align 4
  %v5_bb80 = mul i32 %v3_bb78, 24
  %v0_bb88 = load i32, i32* @r4, align 4
  %v2_bb8c = add i32 %v5_bb80, %arg3
  store i32 %v2_bb8c, i32* %r1.global-to-local, align 4
  %v1_bb88 = udiv i32 %v0_bb88, 256
  %v3_bb90 = and i32 %v1_bb88, 65280
  store i32 %v3_bb90, i32* %r2.global-to-local, align 4
  %v1_bb94 = and i32 %v0_bb88, 65280
  store i32 %v1_bb94, i32* %r3.global-to-local, align 4
  %v3_bb98 = mul i32 %v0_bb88, 16777216
  %v4_bb9c = mul nuw nsw i32 %v1_bb94, 256
  %v5_bb9c = or i32 %v4_bb9c, %v3_bb98
  store i32 %v5_bb9c, i32* %ip.global-to-local, align 4
  %v1_bba0 = add i32 %v2_bb8c, 20
  %v2_bba0 = inttoptr i32 %v1_bba0 to i8*
  %v3_bba0 = load i8, i8* %v2_bba0, align 1
  %v4_bba0 = zext i8 %v3_bba0 to i32
  store i32 %v4_bba0, i32* %lr.global-to-local, align 4
  %v2_bba8 = call i32 @llvm.bswap.i32(i32 %v0_bb88)
  %v7_bbac = lshr i32 %v0_bb74, %v4_bba0
  %v8_bbac = add i32 %v7_bbac, %v2_bba8
  store i32 %v8_bbac, i32* %r2.global-to-local, align 4
  %v3_bbb8 = mul i32 %v8_bbac, 16777216
  %v1_bbbc = and i32 %v8_bbac, 65280
  store i32 %v1_bbbc, i32* %r0.global-to-local, align 4
  %v4_bbc0 = mul nuw nsw i32 %v1_bbbc, 256
  %v5_bbc0 = or i32 %v4_bbc0, %v3_bbb8
  store i32 %v5_bbc0, i32* %r1.global-to-local, align 4
  %v2_bbc8 = call i32 @llvm.bswap.i32(i32 %v8_bbac)
  store i32 %v3_b7b0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bbdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bbdc, label %dec_label_pc_bbe4, label %dec_label_pc_b8a8

dec_label_pc_bbe4:                                ; preds = %dec_label_pc_bb70, %dec_label_pc_b894
  %stack_var_-56.6 = phi i32 [ %v2_bbc8, %dec_label_pc_bb70 ], [ %v4_b88c.stack_var_-56.1, %dec_label_pc_b894 ]
  %v0_bbe4 = call i32 @function_f8c0()
  %v1_bbe4 = trunc i32 %v0_bbe4 to i8
  store i32 %v0_bbe4, i32* %r0.global-to-local, align 4
  %v4_bbe8 = sdiv i32 %v0_bbe4, 256
  store i32 %v4_bbe8, i32* %r3.global-to-local, align 4
  %v1_bbec = trunc i32 %v4_bbe8 to i8
  br label %dec_label_pc_b8c0

dec_label_pc_bbf8:                                ; preds = %dec_label_pc_bb18
  %v0_bbf8 = call i32 @function_f8c0()
  %v1_bbf8 = trunc i32 %v0_bbf8 to i8
  store i32 %v0_bbf8, i32* %r0.global-to-local, align 4
  %v4_bbfc = sdiv i32 %v0_bbf8, 256
  store i32 %v4_bbfc, i32* %r3.global-to-local, align 4
  %v1_bc00 = trunc i32 %v4_bbfc to i8
  %v2_bc00 = load i32, i32* @r4, align 4
  %v3_bc00 = add i32 %v2_bc00, 5
  %v4_bc00 = inttoptr i32 %v3_bc00 to i8*
  store i8 %v1_bc00, i8* %v4_bc00, align 1
  %v3_bc04 = load i32, i32* @r4, align 4
  %v4_bc04 = add i32 %v3_bc04, 4
  %v5_bc04 = inttoptr i32 %v4_bc04 to i8*
  store i8 %v1_bbf8, i8* %v5_bc04, align 1
  %v0_bb48.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bb3c

dec_label_pc_bc0c:                                ; preds = %dec_label_pc_ba28, %dec_label_pc_b9e8
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bc10 = call i32 @function_12ca8(i32* null)
  store i32 %v2_bc10, i32* %r0.global-to-local, align 4
  store i32 %v2_b798, i32* %lr.global-to-local, align 4
  %v9_bc18 = icmp eq i32 %v2_b798, %v2_bc10
  store i1 %v9_bc18, i1* %cpsr_z.global-to-local, align 1
  %v6_bc1c = icmp slt i32 %v2_b798, %v2_bc10
  br i1 %v6_bc1c, label %dec_label_pc_bb68, label %dec_label_pc_b9e8

dec_label_pc_bc24:                                ; preds = %dec_label_pc_b994
  %v3_bc24 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc24, i32* @r4, align 4
  store i32 %v2_b5e8, i32* %r0.global-to-local, align 4
  %v3_bc2c = mul i32 %v3_bc24, 16
  store i32 %v3_bc2c, i32* %ip.global-to-local, align 4
  %v3_bc30 = add i32 %v3_bc2c, %v2_b5e8
  %v4_bc30 = inttoptr i32 %v3_bc30 to i32*
  store i32 %v0_bc30, i32* %v4_bc30, align 4
  store i32 %stack_var_-336.0.ph, i32* %r1.global-to-local, align 4
  %v1_bc38 = add i32 %stack_var_-336.0.ph, 4
  %v2_bc38 = inttoptr i32 %v1_bc38 to i32*
  %v3_bc38 = load i32, i32* %v2_bc38, align 4
  store i32 %v3_bc38, i32* %r0.global-to-local, align 4
  %v1_bc40 = and i32 %v3_bc38, 65280
  store i32 %v1_bc40, i32* %r1.global-to-local, align 4
  %v2_bc54 = call i32 @llvm.bswap.i32(i32 %v3_bc38)
  store i32 %v2_b5e8, i32* %r2.global-to-local, align 4
  %v1_bc5c = load i32, i32* %ip.global-to-local, align 4
  %v2_bc5c = add i32 %v1_bc5c, %v2_b5e8
  store i32 %v2_bc5c, i32* %ip.global-to-local, align 4
  %v2_bc60 = add i32 %v2_bc5c, 4
  %v3_bc60 = inttoptr i32 %v2_bc60 to i32*
  store i32 %v2_bc54, i32* %v3_bc60, align 4
  store i32 %stack_var_-336.0.ph, i32* %r3.global-to-local, align 4
  %v1_bc68 = add i32 %stack_var_-336.0.ph, 8
  %v2_bc68 = inttoptr i32 %v1_bc68 to i32*
  %v3_bc68 = load i32, i32* %v2_bc68, align 4
  store i32 %v3_bc68, i32* %r0.global-to-local, align 4
  %v1_bc70 = and i32 %v3_bc68, 65280
  store i32 %v1_bc70, i32* %r1.global-to-local, align 4
  %v3_bc74 = mul i32 %v3_bc68, 16777216
  %v4_bc7c = mul nuw nsw i32 %v1_bc70, 256
  %v5_bc7c = or i32 %v4_bc7c, %v3_bc74
  store i32 %v5_bc7c, i32* %r2.global-to-local, align 4
  %v2_bc84 = call i32 @llvm.bswap.i32(i32 %v3_bc68)
  store i32 %v2_bc84, i32* %r3.global-to-local, align 4
  %v1_bc88 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc88 = add i32 %v1_bc88, 8
  %v3_bc88 = inttoptr i32 %v2_bc88 to i32*
  store i32 %v2_bc84, i32* %v3_bc88, align 4
  store i32 %stack_var_-336.0.ph, i32* %lr.global-to-local, align 4
  %v1_bc90 = inttoptr i32 %stack_var_-336.0.ph to i32*
  %v2_bc90 = load i32, i32* %v1_bc90, align 4
  %v3_bc94 = udiv i32 %v2_bc90, 65536
  store i32 %v3_bc94, i32* %r2.global-to-local, align 4
  %v3_bc985 = udiv i32 %v2_bc90, 16777216
  store i32 %v3_bc985, i32* %r1.global-to-local, align 4
  %v0_bc9c = load i32, i32* @r5, align 4
  %v3_bc9c = sdiv i32 %v0_bc9c, 256
  store i32 %v3_bc9c, i32* %r3.global-to-local, align 4
  %v1_bca0 = trunc i32 %v3_bc9c to i8
  %v2_bca0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bca0 = add i32 %v2_bca0, 15
  %v4_bca0 = inttoptr i32 %v3_bca0 to i8*
  store i8 %v1_bca0, i8* %v4_bca0, align 1
  %v0_bca4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bca4 = trunc i32 %v0_bca4 to i8
  %v2_bca4 = load i32, i32* %ip.global-to-local, align 4
  %v3_bca4 = add i32 %v2_bca4, 13
  %v4_bca4 = inttoptr i32 %v3_bca4 to i8*
  store i8 %v1_bca4, i8* %v4_bca4, align 1
  %v0_bca8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bca8 = trunc i32 %v0_bca8 to i8
  %v2_bca8 = load i32, i32* %ip.global-to-local, align 4
  %v3_bca8 = add i32 %v2_bca8, 12
  %v4_bca8 = inttoptr i32 %v3_bca8 to i8*
  store i8 %v1_bca8, i8* %v4_bca8, align 1
  %v0_bcac = load i32, i32* @r5, align 4
  %v1_bcac = trunc i32 %v0_bcac to i8
  %v2_bcac = load i32, i32* %ip.global-to-local, align 4
  %v3_bcac = add i32 %v2_bcac, 14
  %v4_bcac = inttoptr i32 %v3_bcac to i8*
  store i8 %v1_bcac, i8* %v4_bcac, align 1
  store i32 %v1_b814, i32* %r0.global-to-local, align 4
  %v1_bcb4 = call i32 @function_13454(i32 %v1_b814)
  store i32 %v1_bcb4, i32* %r0.global-to-local, align 4
  store i32 %v2_b5f8, i32* %r1.global-to-local, align 4
  %v3_bcbc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bcbc, i32* %r2.global-to-local, align 4
  %v2_bcc0 = load i32, i32* @r4, align 4
  %v5_bcc0 = mul i32 %v2_bcc0, 4
  %v6_bcc0 = add i32 %v5_bcc0, %v2_b5f8
  %v7_bcc0 = inttoptr i32 %v6_bcc0 to i32*
  store i32 %v1_bcb4, i32* %v7_bcc0, align 4
  %v0_bcc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bcc4 = load i32, i32* %r2.global-to-local, align 4
  %v4_bcc4 = mul i32 %v1_bcc4, 4
  %v5_bcc4 = add i32 %v4_bcc4, %v0_bcc4
  %v6_bcc4 = inttoptr i32 %v5_bcc4 to i32*
  %v7_bcc4 = load i32, i32* %v6_bcc4, align 4
  store i32 %v7_bcc4, i32* %r0.global-to-local, align 4
  %v1_bcc8 = inttoptr i32 %v7_bcc4 to i8*
  %v2_bcc8 = load i8, i8* %v1_bcc8, align 1
  %tmp107 = urem i8 %v2_bcc8, 16
  %v1_bccc = zext i8 %tmp107 to i32
  %v1_bcd0 = or i32 %v1_bccc, 64
  store i32 %v1_bcd0, i32* %r3.global-to-local, align 4
  %v1_bcd4 = trunc i32 %v1_bcd0 to i8
  store i8 %v1_bcd4, i8* %v1_bcc8, align 1
  store i32 %v3_b7f4, i32* %ip.global-to-local, align 4
  %v0_bcdc = load i32, i32* %r0.global-to-local, align 4
  %v1_bcdc = inttoptr i32 %v0_bcdc to i8*
  %v2_bcdc = load i8, i8* %v1_bcdc, align 1
  %v1_bce8 = and i8 %v2_bcdc, -16
  store i32 %v5_bcec, i32* %r3.global-to-local, align 4
  %v1_bcf0 = or i8 %v1_bce8, 5
  store i32 %v1_b678, i32* %ip.global-to-local, align 4
  store i32 %v1_bce4, i32* %r1.global-to-local, align 4
  store i8 %v1_bcf0, i8* %v1_bcdc, align 1
  %v0_bd00 = load i32, i32* %r1.global-to-local, align 4
  %v1_bd00 = trunc i32 %v0_bd00 to i8
  %v2_bd00 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd00 = add i32 %v2_bd00, 5
  %v4_bd00 = inttoptr i32 %v3_bd00 to i8*
  store i8 %v1_bd00, i8* %v4_bd00, align 1
  store i32 %v4_bd04, i32* %r1.global-to-local, align 4
  store i32 %v4_bd08, i32* %lr.global-to-local, align 4
  %v2_bd0c = load i32, i32* %r0.global-to-local, align 4
  %v3_bd0c = add i32 %v2_bd0c, 1
  %v4_bd0c = inttoptr i32 %v3_bd0c to i8*
  store i8 %v5_b630, i8* %v4_bd0c, align 1
  store i32 %v4_bd10, i32* %r2.global-to-local, align 4
  %v0_bd14 = load i32, i32* %ip.global-to-local, align 4
  %v2_bd14 = icmp eq i32 %v0_bd14, 0
  store i1 %v2_bd14, i1* %cpsr_z.global-to-local, align 1
  %v0_bd18 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd18 = trunc i32 %v0_bd18 to i8
  %v2_bd18 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd18 = add i32 %v2_bd18, 4
  %v4_bd18 = inttoptr i32 %v3_bd18 to i8*
  store i8 %v1_bd18, i8* %v4_bd18, align 1
  %v0_bd1c = load i32, i32* %r0.global-to-local, align 4
  %v1_bd1c = add i32 %v0_bd1c, 20
  store i32 %v1_bd1c, i32* %r3.global-to-local, align 4
  %v0_bd20 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd20 = trunc i32 %v0_bd20 to i8
  %v3_bd20 = add i32 %v0_bd1c, 8
  %v4_bd20 = inttoptr i32 %v3_bd20 to i8*
  store i8 %v1_bd20, i8* %v4_bd20, align 1
  %v0_bd24 = load i32, i32* %r3.global-to-local, align 4
  %v0_bd28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd28, label %.thread8, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_bc24
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bd2c = load i32, i32* %r0.global-to-local, align 4
  %v4_bd2c = add i32 %v3_bd2c, 6
  %v5_bd2c = inttoptr i32 %v4_bd2c to i8*
  store i8 64, i8* %v5_bd2c, align 1
  %v0_bd30.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd30.pr.pr, label %.thread8, label %bb91

bb91:                                             ; preds = %.thread7
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_bc24, %.thread7, %bb91
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bd38 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd38 = add i32 %v2_bd38, 9
  %v4_bd38 = inttoptr i32 %v3_bd38 to i8*
  store i8 6, i8* %v4_bd38, align 1
  %v0_bd3c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd3c, label %bb93, label %bb92

bb92:                                             ; preds = %.thread8
  %v1_bd3c = load i32, i32* %r2.global-to-local, align 4
  %v2_bd3c = trunc i32 %v1_bd3c to i8
  %v3_bd3c = load i32, i32* %r0.global-to-local, align 4
  %v4_bd3c = add i32 %v3_bd3c, 7
  %v5_bd3c = inttoptr i32 %v4_bd3c to i8*
  store i8 %v2_bd3c, i8* %v5_bd3c, align 1
  br label %bb93

bb93:                                             ; preds = %.thread8, %bb92
  %v2_bd44 = load i32, i32* @global_var_1dd2c.82, align 4
  store i32 %v2_bd44, i32* %r3.global-to-local, align 4
  %v1_bd48 = load i32, i32* %r0.global-to-local, align 4
  %v2_bd48 = add i32 %v1_bd48, 12
  %v3_bd48 = inttoptr i32 %v2_bd48 to i32*
  store i32 %v2_bd44, i32* %v3_bd48, align 4
  %v3_bd4c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bd4c, i32* %r2.global-to-local, align 4
  store i32 %v2_b5e8, i32* %ip.global-to-local, align 4
  %v4_bd54 = mul i32 %v3_bd4c, 16
  %v5_bd54 = add i32 %v4_bd54, %v2_b5e8
  %v6_bd54 = inttoptr i32 %v5_bd54 to i32*
  %v7_bd54 = load i32, i32* %v6_bd54, align 4
  store i32 %v7_bd54, i32* %r3.global-to-local, align 4
  %v0_bd58 = load i32, i32* %lr.global-to-local, align 4
  %v1_bd58 = trunc i32 %v0_bd58 to i8
  %v2_bd58 = load i32, i32* %r0.global-to-local, align 4
  %v3_bd58 = add i32 %v2_bd58, 3
  %v4_bd58 = inttoptr i32 %v3_bd58 to i8*
  store i8 %v1_bd58, i8* %v4_bd58, align 1
  %v0_bd5c = load i32, i32* @fp, align 4
  %v1_bd5c = trunc i32 %v0_bd5c to i8
  %v2_bd5c = load i32, i32* %r0.global-to-local, align 4
  %v3_bd5c = add i32 %v2_bd5c, 2
  %v4_bd5c = inttoptr i32 %v3_bd5c to i8*
  store i8 %v1_bd5c, i8* %v4_bd5c, align 1
  %v0_bd60 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd60 = load i32, i32* %r0.global-to-local, align 4
  %v2_bd60 = add i32 %v1_bd60, 16
  %v3_bd60 = inttoptr i32 %v2_bd60 to i32*
  store i32 %v0_bd60, i32* %v3_bd60, align 4
  %v0_bd64 = load i32, i32* %r2.global-to-local, align 4
  %v3_bd64 = mul i32 %v0_bd64, 16
  %v1_bd68 = load i32, i32* %ip.global-to-local, align 4
  %v2_bd68 = add i32 %v1_bd68, %v3_bd64
  store i32 %v2_bd68, i32* %r2.global-to-local, align 4
  %v1_bd6c = add i32 %v2_bd68, 13
  %v2_bd6c = inttoptr i32 %v1_bd6c to i8*
  %v3_bd6c = load i8, i8* %v2_bd6c, align 1
  %v4_bd6c = zext i8 %v3_bd6c to i32
  store i32 %v4_bd6c, i32* %r1.global-to-local, align 4
  %v1_bd70 = add i32 %v2_bd68, 12
  %v2_bd70 = inttoptr i32 %v1_bd70 to i8*
  %v3_bd70 = load i8, i8* %v2_bd70, align 1
  %v4_bd70 = zext i8 %v3_bd70 to i32
  store i32 %v0_bd24, i32* %lr.global-to-local, align 4
  %v4_bd78 = mul nuw nsw i32 %v4_bd6c, 256
  %v5_bd78 = or i32 %v4_bd70, %v4_bd78
  store i32 %v5_bd78, i32* %r3.global-to-local, align 4
  %v2_bd7c = load i32, i32* %r0.global-to-local, align 4
  %v3_bd7c = add i32 %v2_bd7c, 20
  %v4_bd7c = inttoptr i32 %v3_bd7c to i8*
  store i8 %v3_bd70, i8* %v4_bd7c, align 1
  %v0_bd80 = load i32, i32* %r3.global-to-local, align 4
  %v3_bd80 = sdiv i32 %v0_bd80, 256
  store i32 %v3_bd80, i32* %r3.global-to-local, align 4
  %v1_bd84 = trunc i32 %v3_bd80 to i8
  %v2_bd84 = load i32, i32* %lr.global-to-local, align 4
  %v3_bd84 = add i32 %v2_bd84, 1
  %v4_bd84 = inttoptr i32 %v3_bd84 to i8*
  store i8 %v1_bd84, i8* %v4_bd84, align 1
  %v0_bd88 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd88 = add i32 %v0_bd88, 8
  %v2_bd88 = inttoptr i32 %v1_bd88 to i32*
  %v3_bd88 = load i32, i32* %v2_bd88, align 4
  store i32 %v3_bd88, i32* %r1.global-to-local, align 4
  %v0_bd8c = load i32, i32* %lr.global-to-local, align 4
  %v1_bd8c = add i32 %v0_bd8c, 13
  %v2_bd8c = inttoptr i32 %v1_bd8c to i8*
  %v3_bd8c = load i8, i8* %v2_bd8c, align 1
  %v4_bd8c = zext i8 %v3_bd8c to i32
  store i32 %v4_bd8c, i32* %r3.global-to-local, align 4
  %v1_bd90 = add i32 %v0_bd88, 15
  %v2_bd90 = inttoptr i32 %v1_bd90 to i8*
  %v3_bd90 = load i8, i8* %v2_bd90, align 1
  %v4_bd90 = zext i8 %v3_bd90 to i32
  store i32 %v4_bd90, i32* %ip.global-to-local, align 4
  %v0_bd94 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd94 = add i32 %v0_bd94, 40
  store i32 %v1_bd94, i32* @r4, align 4
  %v1_bd98 = add i32 %v0_bd88, 14
  %v2_bd98 = inttoptr i32 %v1_bd98 to i8*
  %v3_bd98 = load i8, i8* %v2_bd98, align 1
  %v4_bd98 = zext i8 %v3_bd98 to i32
  store i32 %v4_bd98, i32* %r0.global-to-local, align 4
  %v2_bd9c = add i32 %v0_bd8c, 4
  %v3_bd9c = inttoptr i32 %v2_bd9c to i32*
  store i32 %v3_bd88, i32* %v3_bd9c, align 4
  store i32 %v0_bd24, i32* %r1.global-to-local, align 4
  %v0_bda4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bda4 = or i32 %v0_bda4, 1
  store i32 %v1_bda4, i32* %r3.global-to-local, align 4
  %v0_bda8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bda8 = add i32 %v0_bda8, 4
  %v2_bda8 = inttoptr i32 %v1_bda8 to i32*
  %v3_bda8 = load i32, i32* %v2_bda8, align 4
  store i32 %v3_bda8, i32* %lr.global-to-local, align 4
  %v1_bdac = trunc i32 %v1_bda4 to i8
  %v3_bdac = add i32 %v0_bd24, 13
  %v4_bdac = inttoptr i32 %v3_bdac to i8*
  store i8 %v1_bdac, i8* %v4_bdac, align 1
  %v0_bdb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_bdb0 = add i32 %v0_bdb0, 12
  %v2_bdb0 = inttoptr i32 %v1_bdb0 to i8*
  %v3_bdb0 = load i8, i8* %v2_bdb0, align 1
  %v4_bdb0 = zext i8 %v3_bdb0 to i32
  store i32 %v4_bdb0, i32* %r2.global-to-local, align 4
  %v1_bdb4 = add i32 %v0_bdb0, 13
  %v2_bdb4 = inttoptr i32 %v1_bdb4 to i8*
  %v3_bdb4 = load i8, i8* %v2_bdb4, align 1
  %v4_bdb4 = zext i8 %v3_bdb4 to i32
  %v0_bdb8 = load i32, i32* %r0.global-to-local, align 4
  %v1_bdb8 = load i32, i32* %ip.global-to-local, align 4
  %v4_bdb8 = mul i32 %v1_bdb8, 256
  %v5_bdb8 = or i32 %v4_bdb8, %v0_bdb8
  store i32 %v5_bdb8, i32* %r0.global-to-local, align 4
  %tmp108 = urem i8 %v3_bdb0, 16
  %v1_bdbc = zext i8 %tmp108 to i32
  store i32 %v0_bd24, i32* %ip.global-to-local, align 4
  %v3_bdc4 = sdiv i32 %v5_bdb8, 256
  store i32 %v3_bdc4, i32* %r1.global-to-local, align 4
  %v1_bdc8 = or i32 %v1_bdbc, 128
  store i32 %v1_bdc8, i32* %r2.global-to-local, align 4
  %v1_bdcc = or i32 %v4_bdb4, 16
  store i32 %v1_bdcc, i32* %r3.global-to-local, align 4
  %v1_bdd0 = trunc i32 %v3_bdc4 to i8
  %v3_bdd0 = add i32 %v0_bd24, 3
  %v4_bdd0 = inttoptr i32 %v3_bdd0 to i8*
  store i8 %v1_bdd0, i8* %v4_bdd0, align 1
  %v0_bdd4 = load i32, i32* %lr.global-to-local, align 4
  %v1_bdd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_bdd4 = add i32 %v1_bdd4, 8
  %v3_bdd4 = inttoptr i32 %v2_bdd4 to i32*
  store i32 %v0_bdd4, i32* %v3_bdd4, align 4
  %v0_bdd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bdd8 = trunc i32 %v0_bdd8 to i8
  %v2_bdd8 = load i32, i32* %ip.global-to-local, align 4
  %v3_bdd8 = add i32 %v2_bdd8, 12
  %v4_bdd8 = inttoptr i32 %v3_bdd8 to i8*
  store i8 %v1_bdd8, i8* %v4_bdd8, align 1
  %v0_bddc = load i32, i32* %r3.global-to-local, align 4
  %v1_bddc = trunc i32 %v0_bddc to i8
  %v2_bddc = load i32, i32* %ip.global-to-local, align 4
  %v3_bddc = add i32 %v2_bddc, 13
  %v4_bddc = inttoptr i32 %v3_bddc to i8*
  store i8 %v1_bddc, i8* %v4_bddc, align 1
  %v0_bde0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bde0 = trunc i32 %v0_bde0 to i8
  %v2_bde0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bde0 = add i32 %v2_bde0, 2
  %v4_bde0 = inttoptr i32 %v3_bde0 to i8*
  store i8 %v1_bde0, i8* %v4_bde0, align 1
  %v0_bde4 = call i32 @function_f8c0()
  %v1_bde4 = trunc i32 %v0_bde4 to i8
  store i32 %v0_bde4, i32* %r0.global-to-local, align 4
  store i32 %v0_bd24, i32* %lr.global-to-local, align 4
  store i32 %v1_b6b0, i32* %r1.global-to-local, align 4
  %v3_bdf0 = load i8, i8* %v4_bdac, align 1
  %v4_bdf0 = zext i8 %v3_bdf0 to i32
  store i32 %v1_bdf4, i32* %r2.global-to-local, align 4
  %v1_bdf8 = and i32 %v4_bdf0, 223
  %v5_bdfc = or i32 %v1_bdf8, %v4_bdfc
  store i32 %v5_bdfc, i32* %r3.global-to-local, align 4
  %v1_be00 = trunc i32 %v5_bdfc to i8
  store i8 %v1_be00, i8* %v4_bdac, align 1
  store i32 %v1_b6d0, i32* %ip.global-to-local, align 4
  %v0_be08 = load i32, i32* %lr.global-to-local, align 4
  %v1_be08 = add i32 %v0_be08, 13
  %v2_be08 = inttoptr i32 %v1_be08 to i8*
  %v3_be08 = load i8, i8* %v2_be08, align 1
  %v4_be08 = zext i8 %v3_be08 to i32
  store i32 %v1_be0c, i32* %r3.global-to-local, align 4
  %v1_be10 = and i32 %v4_be08, 239
  %v5_be14 = or i32 %v1_be10, %v4_be14
  store i32 %v5_be14, i32* %r2.global-to-local, align 4
  %v1_be18 = trunc i32 %v5_be14 to i8
  store i8 %v1_be18, i8* %v2_be08, align 1
  %v0_be1c = load i32, i32* %lr.global-to-local, align 4
  %v1_be1c = add i32 %v0_be1c, 13
  %v2_be1c = inttoptr i32 %v1_be1c to i8*
  %v3_be1c = load i8, i8* %v2_be1c, align 1
  %v4_be1c = zext i8 %v3_be1c to i32
  store i32 %v1_b6f0, i32* %lr.global-to-local, align 4
  store i32 %v0_bd24, i32* %r1.global-to-local, align 4
  store i32 %v1_be28, i32* %r2.global-to-local, align 4
  %v1_be2c = and i32 %v4_be1c, 247
  %v5_be30 = or i32 %v1_be2c, %v4_be30
  store i32 %v5_be30, i32* %r3.global-to-local, align 4
  %v1_be34 = trunc i32 %v5_be30 to i8
  store i8 %v1_be34, i8* %v4_bdac, align 1
  store i32 %v1_b710, i32* %ip.global-to-local, align 4
  %v0_be3c = load i32, i32* %r1.global-to-local, align 4
  %v1_be3c = add i32 %v0_be3c, 13
  %v2_be3c = inttoptr i32 %v1_be3c to i8*
  %v3_be3c = load i8, i8* %v2_be3c, align 1
  %v4_be3c = zext i8 %v3_be3c to i32
  store i32 %v1_be40, i32* %r3.global-to-local, align 4
  %v1_be44 = and i32 %v4_be3c, 251
  %v5_be48 = or i32 %v1_be44, %v4_be48
  store i32 %v5_be48, i32* %r2.global-to-local, align 4
  %v1_be4c = trunc i32 %v5_be48 to i8
  store i8 %v1_be4c, i8* %v2_be3c, align 1
  store i32 %v1_b730, i32* %lr.global-to-local, align 4
  %v0_be54 = load i32, i32* %r1.global-to-local, align 4
  %v1_be54 = add i32 %v0_be54, 13
  %v2_be54 = inttoptr i32 %v1_be54 to i8*
  %v3_be54 = load i8, i8* %v2_be54, align 1
  %v4_be54 = zext i8 %v3_be54 to i32
  store i32 %v1_be58, i32* %r2.global-to-local, align 4
  %v1_be5c = and i32 %v4_be54, 253
  %v4_be60 = or i32 %v1_be5c, %v3_be60
  store i32 %v4_be60, i32* %r3.global-to-local, align 4
  %v1_be64 = trunc i32 %v4_be60 to i8
  store i8 %v1_be64, i8* %v2_be54, align 1
  %v0_be68 = load i32, i32* %r1.global-to-local, align 4
  %v1_be68 = add i32 %v0_be68, 13
  %v2_be68 = inttoptr i32 %v1_be68 to i8*
  %v3_be68 = load i8, i8* %v2_be68, align 1
  %v4_be68 = zext i8 %v3_be68 to i32
  %v1_be70 = and i32 %v4_be68, 254
  %v2_be78 = or i32 %v1_be70, %v1_be74
  store i32 %v2_be78, i32* %r3.global-to-local, align 4
  store i32 %v0_bd24, i32* %r2.global-to-local, align 4
  %v4_be80 = sdiv i32 %v0_bde4, 256
  store i32 %v4_be80, i32* %r1.global-to-local, align 4
  %v1_be84 = trunc i32 %v2_be78 to i8
  store i8 %v1_be84, i8* %v4_bdac, align 1
  %v0_be88 = load i32, i32* %r1.global-to-local, align 4
  %v1_be88 = trunc i32 %v0_be88 to i8
  %v2_be88 = load i32, i32* %r2.global-to-local, align 4
  %v3_be88 = add i32 %v2_be88, 15
  %v4_be88 = inttoptr i32 %v3_be88 to i8*
  store i8 %v1_be88, i8* %v4_be88, align 1
  %v3_be8c = load i32, i32* %r2.global-to-local, align 4
  %v4_be8c = add i32 %v3_be8c, 14
  %v5_be8c = inttoptr i32 %v4_be8c to i8*
  store i8 %v1_bde4, i8* %v5_be8c, align 1
  store i32 %v6_b768, i32* %r1.global-to-local, align 4
  %v0_be94 = load i32, i32* @r4, align 4
  store i32 %v0_be94, i32* %r0.global-to-local, align 4
  %v2_be98 = call i32 @function_f974(i32 %v0_be94, i32 %v6_b768)
  store i32 %v2_be98, i32* %r0.global-to-local, align 4
  store i32 %v6_b768, i32* %ip.global-to-local, align 4
  %v2_bea4 = load i32, i32* @r4, align 4
  %v4_bea4 = add i32 %v2_bea4, %v6_b768
  %v5_bea4 = inttoptr i32 %v4_bea4 to i8*
  store i8 0, i8* %v5_bea4, align 1
  %v3_bea8 = load i32, i32* %stack_var_-40, align 4
  %v1_beb0 = add i32 %v3_bea8, 1
  store i32 %v1_beb0, i32* %r3.global-to-local, align 4
  %v9_beb4 = icmp eq i32 %v1_beb0, %v1_b5bc
  store i1 %v9_beb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_beb0, i32* %stack_var_-40, align 4
  %v5_bebc = icmp slt i32 %v1_beb0, %v1_b5bc
  br i1 %v5_bebc, label %dec_label_pc_b824.outer, label %dec_label_pc_b9e8.preheader

; uselistorder directives
  uselistorder i32 %v1_beb0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bde4, { 0, 2, 1 }
  uselistorder i32 %v3_bdc4, { 1, 0 }
  uselistorder i32 %v3_bd80, { 1, 0 }
  uselistorder i32 %v0_bd24, { 3, 4, 5, 0, 6, 1, 7, 8, 2 }
  uselistorder i32 %v3_bc9c, { 1, 0 }
  uselistorder i32 %v2_bc84, { 1, 0 }
  uselistorder i32 %v3_bc68, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bc2c, { 1, 0 }
  uselistorder i32 %v2_bc10, { 1, 2, 3, 0 }
  uselistorder i32 %v4_bbfc, { 1, 0 }
  uselistorder i32 %v0_bbf8, { 0, 2, 1 }
  uselistorder i32 %v4_bbe8, { 1, 0 }
  uselistorder i32 %v0_bbe4, { 0, 2, 1 }
  uselistorder i32 %v8_bbac, { 1, 2, 0, 3 }
  uselistorder i32 %v0_bb88, { 2, 0, 3, 1 }
  uselistorder i32 %v0_bb48, { 1, 0 }
  uselistorder i32 %v7_bb24, { 1, 0, 2 }
  uselistorder i32 %v1_bb08, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_baa8, { 0, 2, 1 }
  uselistorder i32 %v0_ba90, { 1, 0, 2 }
  uselistorder i32 %v3_ba6c, { 1, 0 }
  uselistorder i32 %v3_ba4c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_ba38, { 0, 2, 1 }
  uselistorder i1 %v3_bb2c, { 1, 0 }
  uselistorder i32 %v1_ba00, { 3, 2, 0, 1 }
  uselistorder i32 %v1_b9d8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b9c0, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b944, { 1, 0 }
  uselistorder i32 %v7_b93c, { 0, 2, 1, 3 }
  uselistorder i32 %v5_b988, { 1, 0 }
  uselistorder i1 %v9_b96c, { 1, 0 }
  uselistorder i32 %v4_b980, { 1, 0 }
  uselistorder i32 %v4_b97c, { 1, 0 }
  uselistorder i32 %v0_bc30, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_b884, { 1, 0, 2 }
  uselistorder i1 %v7_b834, { 1, 0 }
  uselistorder i32 %v3_b830, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-56.0, { 1, 0 }
  uselistorder i32 %stack_var_-336.0.ph, { 4, 5, 2, 3, 0, 1 }
  uselistorder i32 %v1_be58, { 1, 0 }
  uselistorder i32 %v1_be40, { 1, 0 }
  uselistorder i32 %v1_be0c, { 1, 0 }
  uselistorder i32 %v1_bce4, { 1, 0 }
  uselistorder i32 %v1_b8ac, { 1, 0 }
  uselistorder i32 %v5_b984, { 1, 0 }
  uselistorder i32 %v1_be28, { 1, 0 }
  uselistorder i32 %v1_bdf4, { 1, 0 }
  uselistorder i1 %v2_b99c, { 1, 0 }
  uselistorder i32 %v1_b998, { 1, 0 }
  uselistorder i32 %v4_b994, { 2, 0, 1 }
  uselistorder i32 %v4_b978, { 1, 0 }
  uselistorder i32 %v1_b8e4, { 2, 1, 0 }
  uselistorder i1 %v3_bbdc, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b814, { 6, 5, 3, 4, 7, 0, 1, 2, 8 }
  uselistorder i32 %v3_b80c, { 1, 0, 2 }
  uselistorder i1 %v2_b7f8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b7f4, { 1, 2, 3, 0 }
  uselistorder i32 %v0_b7f0, { 1, 0, 3, 2 }
  uselistorder i1 %v7_b7e4, { 1, 0 }
  uselistorder i1 %v7_b7b4, { 1, 0 }
  uselistorder i32 %v3_b7b0, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_b7ac, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_b798, { 2, 1, 0 }
  uselistorder i32 %v1_b788, { 1, 0 }
  uselistorder i32 %v6_b768, { 0, 6, 5, 4, 1, 7, 9, 8, 10, 11, 3, 2 }
  uselistorder i32 %v1_b730, { 1, 0 }
  uselistorder i32 %v1_b710, { 1, 0 }
  uselistorder i32 %v1_b6f0, { 1, 0 }
  uselistorder i32 %v1_b6d0, { 1, 0 }
  uselistorder i32 %v1_b6b0, { 1, 0 }
  uselistorder i32 %v1_b678, { 1, 0 }
  uselistorder i8 %v5_b630, { 1, 0 }
  uselistorder i32 %v6_b610, { 1, 0 }
  uselistorder i32 %v2_b5f8, { 0, 2, 1, 3 }
  uselistorder i32 %v2_b5e8, { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 %v1_b5bc, { 11, 12, 6, 7, 8, 5, 9, 10, 13, 4, 2, 3, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 18, 16, 17 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r2.global-to-local, { 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 56, 58, 59, 60, 62, 61, 63, 64, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %r1.global-to-local, { 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 42, 41, 43, 45, 44, 0 }
  uselistorder i32* %r0.global-to-local, { 79, 73, 78, 74, 75, 76, 77, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1, 15, 20, 16, 17, 18, 19, 22, 21, 23, 25, 24, 26, 28, 27, 30, 34, 29, 31, 33, 32, 37, 35, 36, 38, 39, 40, 42, 43, 41, 44, 47, 45, 46, 49, 48, 53, 50, 51, 52, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 0 }
  uselistorder i32* %lr.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4 }
  uselistorder i32* %ip.global-to-local, { 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 14, 15, 16, 17, 18, 20, 21, 0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i1* %cpsr_z.global-to-local, { 22, 23, 25, 24, 26, 1, 2, 4, 5, 3, 6, 7, 8, 9, 10, 11, 13, 0, 14, 15, 12, 16, 17, 18, 19, 20, 21 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %.thread8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bb68, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_bb3c, { 1, 0 }
  uselistorder label %dec_label_pc_ba28, { 1, 0 }
  uselistorder label %dec_label_pc_b9e8, { 1, 0 }
  uselistorder label %dec_label_pc_b90c, { 2, 1, 3, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %dec_label_pc_b840, { 1, 0 }
  uselistorder label %dec_label_pc_b824, { 1, 0 }
}

define i32 @function_bec8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_bec8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_bec8 = load i32, i32* @sb, align 4
  %v24_bec8 = load i32, i32* @fp, align 4
  %v1_becc = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bee8 = urem i32 %arg4, 256
  store i32 %v1_bee8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_bef8 = call i32 @function_135a8(i32 %v1_becc, i32 4)
  %v0_befc = load i32, i32* @r5, align 4
  store i32 %v0_befc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_bf08 = load i32, i32* @r7, align 4
  store i32 %v0_bf08, i32* %r3.global-to-local, align 4
  %v0_bf0c = load i32, i32* @r4, align 4
  %v5_bf10 = inttoptr i32 %v0_befc to i32*
  %v6_bf10 = call i32 @function_a054(i32 %v0_bf0c, i32* %v5_bf10, i32 2, i32 %v0_bf08)
  %v1_bf1c = urem i32 %v6_bf10, 256
  store i32 %v1_bf1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bf28 = load i32, i32* @r5, align 4
  store i32 %v0_bf28, i32* %r1.global-to-local, align 4
  %v0_bf2c = load i32, i32* @r4, align 4
  %v5_bf30 = trunc i32 %v6_bf10 to i8
  %v6_bf34 = inttoptr i32 %v0_bf28 to i32*
  %v7_bf34 = call i32 @function_a054(i32 %v0_bf2c, i32* %v6_bf34, i32 3, i32 65535)
  %v0_bf38 = load i32, i32* @r5, align 4
  store i32 %v0_bf38, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_bf48 = load i32, i32* @r4, align 4
  %v5_bf4c = inttoptr i32 %v0_bf38 to i32*
  %v6_bf4c = call i32 @function_a054(i32 %v0_bf48, i32* %v5_bf4c, i32 4, i32 64)
  %v1_bf54 = urem i32 %v6_bf4c, 256
  store i32 %v1_bf54, i32* %ip.global-to-local, align 4
  %v0_bf58 = load i32, i32* @r5, align 4
  store i32 %v0_bf58, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_bf60 = load i32, i32* @r7, align 4
  store i32 %v0_bf60, i32* %r3.global-to-local, align 4
  %v0_bf64 = load i32, i32* @r4, align 4
  %v5_bf68 = trunc i32 %v6_bf4c to i8
  %v6_bf6c = inttoptr i32 %v0_bf58 to i32*
  %v7_bf6c = call i32 @function_a054(i32 %v0_bf64, i32* %v6_bf6c, i32 5, i32 %v0_bf60)
  %v1_bf78 = urem i32 %v7_bf6c, 256
  store i32 %v1_bf78, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bf84 = load i32, i32* @r5, align 4
  store i32 %v0_bf84, i32* %r1.global-to-local, align 4
  %v0_bf88 = load i32, i32* @r4, align 4
  %v5_bf90 = inttoptr i32 %v0_bf84 to i32*
  %v6_bf90 = call i32 @function_a054(i32 %v0_bf88, i32* %v5_bf90, i32 6, i32 65535)
  %v0_bf98 = load i32, i32* @r5, align 4
  store i32 %v0_bf98, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bf90, i32* %sb.global-to-local, align 4
  %v0_bfa8 = load i32, i32* @r4, align 4
  %v4_bfac = inttoptr i32 %v0_bf98 to i32*
  %v5_bfac = call i32 @function_a054(i32 %v0_bfa8, i32* %v4_bfac, i32 7, i32 65535)
  %v0_bfb8 = load i32, i32* @r5, align 4
  store i32 %v0_bfb8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_bfc4 = load i32, i32* @r4, align 4
  %v5_bfc8 = inttoptr i32 %v0_bfb8 to i32*
  %v6_bfc8 = call i32 @function_a054(i32 %v0_bfc4, i32* %v5_bfc8, i32 16, i32 65535)
  %v0_bfd4 = load i32, i32* @r5, align 4
  store i32 %v0_bfd4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_bfe0 = load i32, i32* @r4, align 4
  %v5_bfe4 = inttoptr i32 %v0_bfd4 to i32*
  %v6_bfe4 = call i32 @function_a054(i32 %v0_bfe0, i32* %v5_bfe4, i32 17, i32 65535)
  %v0_bfe8 = load i32, i32* @r5, align 4
  store i32 %v0_bfe8, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_bff4 = load i32, i32* @r7, align 4
  store i32 %v0_bff4, i32* %r3.global-to-local, align 4
  %v0_bff8 = load i32, i32* @r4, align 4
  %v5_bffc = inttoptr i32 %v0_bfe8 to i32*
  %v6_bffc = call i32 @function_a054(i32 %v0_bff8, i32* %v5_bffc, i32 10, i32 %v0_bff4)
  %v0_c000 = load i32, i32* @r5, align 4
  store i32 %v0_c000, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c010 = load i32, i32* @r4, align 4
  %v5_c014 = inttoptr i32 %v0_c000 to i32*
  %v6_c014 = call i32 @function_a054(i32 %v0_c010, i32* %v5_c014, i32 11, i32 1)
  %v0_c018 = load i32, i32* @r5, align 4
  store i32 %v0_c018, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_c024 = load i32, i32* @r7, align 4
  store i32 %v0_c024, i32* %r3.global-to-local, align 4
  %v0_c028 = load i32, i32* @r4, align 4
  %v5_c02c = inttoptr i32 %v0_c018 to i32*
  %v6_c02c = call i32 @function_a054(i32 %v0_c028, i32* %v5_c02c, i32 12, i32 %v0_c024)
  %v0_c030 = load i32, i32* @r5, align 4
  store i32 %v0_c030, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_c03c = load i32, i32* @r7, align 4
  store i32 %v0_c03c, i32* %r3.global-to-local, align 4
  %v0_c040 = load i32, i32* @r4, align 4
  %v5_c044 = inttoptr i32 %v0_c030 to i32*
  %v6_c044 = call i32 @function_a054(i32 %v0_c040, i32* %v5_c044, i32 13, i32 %v0_c03c)
  %v0_c048 = load i32, i32* @r5, align 4
  store i32 %v0_c048, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_c054 = load i32, i32* @r7, align 4
  store i32 %v0_c054, i32* %r3.global-to-local, align 4
  %v0_c058 = load i32, i32* @r4, align 4
  %v5_c05c = inttoptr i32 %v0_c048 to i32*
  %v6_c05c = call i32 @function_a054(i32 %v0_c058, i32* %v5_c05c, i32 14, i32 %v0_c054)
  %v0_c060 = load i32, i32* @r5, align 4
  store i32 %v0_c060, i32* %r1.global-to-local, align 4
  %v0_c068 = load i32, i32* @r7, align 4
  store i32 %v0_c068, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_c070 = load i32, i32* @r4, align 4
  %v5_c074 = inttoptr i32 %v0_c060 to i32*
  %v6_c074 = call i32 @function_a054(i32 %v0_c070, i32* %v5_c074, i32 15, i32 %v0_c068)
  %v0_c078 = load i32, i32* @r5, align 4
  store i32 %v0_c078, i32* %r1.global-to-local, align 4
  %v0_c07c = load i32, i32* @r7, align 4
  store i32 %v0_c07c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_c074, i32* %fp.global-to-local, align 4
  %v0_c088 = load i32, i32* @r4, align 4
  %v4_c08c = inttoptr i32 %v0_c078 to i32*
  %v5_c08c = call i32 @function_a054(i32 %v0_c088, i32* %v4_c08c, i32 %v0_c07c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c098 = load i32, i32* @r5, align 4
  store i32 %v0_c098, i32* %r1.global-to-local, align 4
  store i32 %v5_c08c, i32* @sl, align 4
  %v0_c0a0 = load i32, i32* @r4, align 4
  %v4_c0a4 = inttoptr i32 %v0_c098 to i32*
  %v5_c0a4 = call i32 @function_a054(i32 %v0_c0a0, i32* %v4_c0a4, i32 1, i32 1)
  %v2_c0b0 = load i32, i32* @global_var_1dd2c.82, align 4
  store i32 %v2_c0b0, i32* %r3.global-to-local, align 4
  %v1_c0b4 = urem i32 %v5_c0a4, 256
  store i32 %v1_c0b4, i32* %ip.global-to-local, align 4
  %v0_c0b8 = load i32, i32* @r5, align 4
  store i32 %v0_c0b8, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_c0c0 = load i32, i32* @r4, align 4
  %v5_c0c8 = inttoptr i32 %v0_c0b8 to i32*
  %v6_c0c8 = call i32 @function_9fe8(i32 %v0_c0c0, i32* %v5_c0c8, i32 24, i32 %v2_c0b0, i32 %v1_c0b4)
  %v0_c0d0 = load i32, i32* @r7, align 4
  %v1_c0d4 = inttoptr i32 %v0_c0d0 to i32*
  %v2_c0d4 = call i32 @function_12ca8(i32* %v1_c0d4)
  %v1_c0d8 = load i32, i32* @r6, align 4
  %v2_c0d8 = add i32 %v1_c0d8, %v2_c0d4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c0ec = call i32 @function_132bc(i32 2, i32 3, i32 6)
  %v7_c0f0 = icmp eq i32 %v3_c0ec, -1
  store i1 %v7_c0f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c0f0, label %dec_label_pc_c670, label %dec_label_pc_c0fc

dec_label_pc_c0fc:                                ; preds = %dec_label_pc_bec8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c104 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c104, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_c10c = load i32, i32* @r7, align 4
  store i32 %v0_c10c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c118 = call i32 @function_1328c(i32 %v3_c0ec, i32 %v0_c10c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_c11c = icmp eq i32 %v6_c118, -1
  store i1 %v7_c11c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c11c, label %dec_label_pc_c678, label %dec_label_pc_c124

dec_label_pc_c124:                                ; preds = %dec_label_pc_c0fc
  store i32 %v1_becc, i32* %r3.global-to-local, align 4
  %v3_c130 = mul i32 %v7_bf34, 65536
  store i32 %v3_c130, i32* @r4, align 4
  %v0_c134 = load i32, i32* %sb.global-to-local, align 4
  %v3_c134 = mul i32 %v0_c134, 65536
  store i32 %v3_c134, i32* %sb.global-to-local, align 4
  %v3_c13c = urem i32 %v7_bf34, 65536
  store i32 %v3_c13c, i32* %ip.global-to-local, align 4
  %v3_c140 = urem i32 %v0_c134, 65536
  store i32 %v3_c140, i32* %r1.global-to-local, align 4
  %v3_c144 = urem i32 %v5_bfac, 65536
  store i32 %v3_c144, i32* %r2.global-to-local, align 4
  %v2_c148 = icmp eq i32 %v1_becc, 0
  store i1 %v2_c148, i1* %cpsr_z.global-to-local, align 1
  %v0_c14c = load i32, i32* @r7, align 4
  store i32 %v0_c14c, i32* %stack_var_-40, align 4
  br i1 %v2_c148, label %dec_label_pc_c3e4.preheader, label %dec_label_pc_c160

dec_label_pc_c160:                                ; preds = %dec_label_pc_c124
  %v0_c170 = load i32, i32* @sl, align 4
  %v1_c178 = urem i32 %v0_c134, 256
  %tmp73 = udiv i32 %v7_bf34, 256
  %v1_c190 = urem i32 %v5_bfac, 256
  store i32 %v1_c190, i32* @lr, align 4
  %tmp74 = mul i32 %v6_bfc8, 256
  %v1_c1a0 = and i32 %tmp74, 65280
  %tmp76 = udiv i32 %v6_bfc8, 256
  %v4_c1a4 = urem i32 %tmp76, 256
  %v5_c1a4 = or i32 %v4_c1a4, %v1_c1a0
  %v1_c1c0 = urem i32 %v6_bffc, 2
  %v1_c1c4 = urem i32 %v6_c014, 2
  %v1_c1c8 = urem i32 %v6_c02c, 2
  %v1_c1cc = urem i32 %v6_c044, 2
  %v1_c170 = mul i32 %v0_c170, 65536
  %tmp93 = add i32 %v1_c170, 2621440
  %v3_c1ec = sdiv i32 %tmp93, 16777216
  %sext12 = mul i32 %tmp73, 16777216
  %v7_c1ec = sdiv i32 %sext12, 16777216
  %v3_c1f0 = mul nuw nsw i32 %v1_c178, 256
  %tmp77 = udiv i32 %v5_bfac, 256
  %v3_c1f4 = urem i32 %tmp77, 256
  %v1_c1f8 = urem i32 %v6_c05c, 2
  store i32 %v1_c1f8, i32* %ip.global-to-local, align 4
  %v1_c1fc = urem i32 %v6_c02c, 256
  store i32 %v1_c1fc, i32* %r1.global-to-local, align 4
  %v3_c200 = ashr i32 %tmp93, 31
  store i32 %v3_c200, i32* %r2.global-to-local, align 4
  %v3_c204 = ashr i32 %sext12, 31
  store i32 %v3_c204, i32* %r3.global-to-local, align 4
  %tmp94 = udiv i32 %v0_c134, 256
  %v4_c208 = urem i32 %tmp94, 256
  %v5_c208 = or i32 %v4_c208, %v3_c1f0
  store i32 %v5_c208, i32* @r4, align 4
  %v0_c20c = load i32, i32* %fp.global-to-local, align 4
  %v1_c20c = urem i32 %v0_c20c, 2
  %v4_c210 = mul nuw nsw i32 %v1_c190, 256
  %v5_c210 = or i32 %v4_c210, %v3_c1f4
  store i32 %v5_c210, i32* @r5, align 4
  %v5_c21c = trunc i32 %v3_c200 to i8
  store i32 %v0_c14c, i32* @r6, align 4
  store i32 %v1_c178, i32* @fp, align 4
  store i32 %v1_c190, i32* @sb, align 4
  %v4_c284 = sext i8 %v5_bf68 to i32
  %tmp = sub nsw i32 0, %v1_c1c0
  %v4_c300 = and i32 %tmp, 32
  %tmp95 = sub nsw i32 0, %v1_c1c4
  %v4_c314 = and i32 %tmp95, 16
  %tmp96 = sub nsw i32 0, %v1_c1c8
  %v4_c328 = and i32 %tmp96, 8
  %tmp97 = sub nsw i32 0, %v1_c1cc
  %v4_c33c = and i32 %tmp97, 4
  %tmp98 = sub nsw i32 0, %v1_c1f8
  %v3_c350 = and i32 %tmp98, 2
  %v2_c3a0 = icmp eq i32 %v1_c1fc, 0
  br label %dec_label_pc_c238

dec_label_pc_c238:                                ; preds = %.thread11, %dec_label_pc_c160
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c244 = call i32 @function_135a8(i32 1510, i32 1)
  store i32 %v2_bef8, i32* %ip.global-to-local, align 4
  %v3_c24c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c24c, i32* %r3.global-to-local, align 4
  %v2_c250 = load i32, i32* @r6, align 4
  %v5_c250 = mul i32 %v2_c250, 4
  %v6_c250 = add i32 %v5_c250, %v2_bef8
  %v7_c250 = inttoptr i32 %v6_c250 to i32*
  store i32 %v2_c244, i32* %v7_c250, align 4
  %v0_c254 = load i32, i32* %ip.global-to-local, align 4
  %v1_c254 = load i32, i32* %r3.global-to-local, align 4
  %v4_c254 = mul i32 %v1_c254, 4
  %v5_c254 = add i32 %v4_c254, %v0_c254
  %v6_c254 = inttoptr i32 %v5_c254 to i32*
  %v7_c254 = load i32, i32* %v6_c254, align 4
  store i32 %v7_c254, i32* %r1.global-to-local, align 4
  %v1_c258 = inttoptr i32 %v7_c254 to i8*
  %v2_c258 = load i8, i8* %v1_c258, align 1
  %tmp99 = urem i8 %v2_c258, 16
  %v1_c25c = zext i8 %tmp99 to i32
  %v1_c260 = or i32 %v1_c25c, 64
  store i32 %v1_c260, i32* %r2.global-to-local, align 4
  %v1_c264 = trunc i32 %v1_c260 to i8
  store i8 %v1_c264, i8* %v1_c258, align 1
  %v0_c268 = load i32, i32* %r1.global-to-local, align 4
  %v1_c268 = inttoptr i32 %v0_c268 to i8*
  %v2_c268 = load i8, i8* %v1_c268, align 1
  %v1_c26c = and i8 %v2_c268, -16
  %v1_c270 = or i8 %v1_c26c, 5
  store i32 %v1_bf78, i32* %r2.global-to-local, align 4
  store i8 %v1_c270, i8* %v1_c268, align 1
  %v2_c280 = load i32, i32* %r1.global-to-local, align 4
  %v3_c280 = add i32 %v2_c280, 1
  %v4_c280 = inttoptr i32 %v3_c280 to i8*
  store i8 %v5_bf30, i8* %v4_c280, align 1
  store i32 %v4_c284, i32* %ip.global-to-local, align 4
  %v2_c288 = load i32, i32* %r1.global-to-local, align 4
  %v3_c288 = add i32 %v2_c288, 8
  %v4_c288 = inttoptr i32 %v3_c288 to i8*
  store i8 %v5_bf68, i8* %v4_c288, align 1
  %v0_c28c = load i32, i32* %r2.global-to-local, align 4
  %v2_c28c = icmp eq i32 %v0_c28c, 0
  store i1 %v2_c28c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c200, i32* %r3.global-to-local, align 4
  store i32 %v3_c1ec, i32* %r2.global-to-local, align 4
  %v2_c298 = load i32, i32* %r1.global-to-local, align 4
  %v3_c298 = add i32 %v2_c298, 3
  %v4_c298 = inttoptr i32 %v3_c298 to i8*
  store i8 %v5_c21c, i8* %v4_c298, align 1
  %v0_c29c = load i32, i32* %r2.global-to-local, align 4
  %v1_c29c = trunc i32 %v0_c29c to i8
  %v2_c29c = load i32, i32* %r1.global-to-local, align 4
  %v3_c29c = add i32 %v2_c29c, 2
  %v4_c29c = inttoptr i32 %v3_c29c to i8*
  store i8 %v1_c29c, i8* %v4_c29c, align 1
  %v0_c2a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2a0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_c238
  store i32 %v3_c204, i32* %r2.global-to-local, align 4
  %extract.t91 = trunc i32 %v3_c204 to i8
  br label %bb78

bb:                                               ; preds = %dec_label_pc_c238
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_c204, i32* %r2.global-to-local, align 4
  %v3_c2a8 = load i32, i32* %r1.global-to-local, align 4
  %v4_c2a8 = add i32 %v3_c2a8, 6
  %v5_c2a8 = inttoptr i32 %v4_c2a8 to i8*
  store i8 64, i8* %v5_c2a8, align 1
  %v0_c2b0.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t92 = trunc i32 %v0_c2b0.pre to i8
  br label %bb78

bb78:                                             ; preds = %.thread, %bb
  %v3_c204.sink.off0 = phi i8 [ %extract.t91, %.thread ], [ %extract.t92, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c2b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2b0 = add i32 %v2_c2b0, 5
  %v4_c2b0 = inttoptr i32 %v3_c2b0 to i8*
  store i8 %v3_c204.sink.off0, i8* %v4_c2b0, align 1
  store i32 %v7_c1ec, i32* %ip.global-to-local, align 4
  %v0_c2b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2b8, label %bb80, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %bb78, %bb79
  %v0_c2bc = load i32, i32* %r3.global-to-local, align 4
  %v1_c2bc = trunc i32 %v0_c2bc to i8
  %v2_c2bc = load i32, i32* %r1.global-to-local, align 4
  %v3_c2bc = add i32 %v2_c2bc, 9
  %v4_c2bc = inttoptr i32 %v3_c2bc to i8*
  store i8 %v1_c2bc, i8* %v4_c2bc, align 1
  %v0_c2c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2c0, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_c2c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_c2c0 = trunc i32 %v1_c2c0 to i8
  %v3_c2c0 = load i32, i32* %r1.global-to-local, align 4
  %v4_c2c0 = add i32 %v3_c2c0, 7
  %v5_c2c0 = inttoptr i32 %v4_c2c0 to i8*
  store i8 %v2_c2c0, i8* %v5_c2c0, align 1
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  %v3_c2c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2c4, i32* %r2.global-to-local, align 4
  %v0_c2c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_c2c8 = trunc i32 %v0_c2c8 to i8
  %v2_c2c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2c8 = add i32 %v2_c2c8, 4
  %v4_c2c8 = inttoptr i32 %v3_c2c8 to i8*
  store i8 %v1_c2c8, i8* %v4_c2c8, align 1
  store i32 %v6_c0c8, i32* %ip.global-to-local, align 4
  %v0_c2d0 = load i32, i32* %r2.global-to-local, align 4
  %v3_c2d0 = mul i32 %v0_c2d0, 32
  store i32 %v3_c2d0, i32* %r3.global-to-local, align 4
  %v1_c2d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_c2d4 = add i32 %v1_c2d4, 12
  %v3_c2d4 = inttoptr i32 %v2_c2d4 to i32*
  store i32 %v6_c0c8, i32* %v3_c2d4, align 4
  %v0_c2d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c2d8 = load i32, i32* %r2.global-to-local, align 4
  %tmp100 = mul i32 %v1_c2d8, -8
  %v5_c2d8 = add i32 %v0_c2d8, %tmp100
  %v1_c2dc = load i32, i32* @r8, align 4
  %v2_c2dc = add i32 %v1_c2dc, %v5_c2d8
  store i32 %v2_c2dc, i32* %r3.global-to-local, align 4
  %v1_c2e0 = add i32 %v2_c2dc, 16
  %v2_c2e0 = inttoptr i32 %v1_c2e0 to i32*
  %v3_c2e0 = load i32, i32* %v2_c2e0, align 4
  store i32 %v3_c2e0, i32* %r2.global-to-local, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  %v1_c2e4 = trunc i32 %v0_c2e4 to i8
  %v2_c2e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c2e4 = add i32 %v2_c2e4, 20
  %v4_c2e4 = inttoptr i32 %v3_c2e4 to i8*
  store i8 %v1_c2e4, i8* %v4_c2e4, align 1
  %v0_c2e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c2e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_c2e8 = add i32 %v1_c2e8, 16
  %v3_c2e8 = inttoptr i32 %v2_c2e8 to i32*
  store i32 %v0_c2e8, i32* %v3_c2e8, align 4
  %v0_c2ec = load i32, i32* %r1.global-to-local, align 4
  %v1_c2ec = add i32 %v0_c2ec, 20
  store i32 %v1_c2ec, i32* @r6, align 4
  %v1_c2f0 = add i32 %v0_c2ec, 33
  %v2_c2f0 = inttoptr i32 %v1_c2f0 to i8*
  %v3_c2f0 = load i8, i8* %v2_c2f0, align 1
  %v4_c2f0 = zext i8 %v3_c2f0 to i32
  %v1_c2f4 = add i32 %v0_c2ec, 40
  store i32 %v1_c2f4, i32* @r7, align 4
  store i32 %v1_c1c0, i32* %r1.global-to-local, align 4
  %v1_c2fc = and i32 %v4_c2f0, 223
  %v5_c300 = or i32 %v1_c2fc, %v4_c300
  store i32 %v5_c300, i32* %r3.global-to-local, align 4
  %v1_c304 = trunc i32 %v5_c300 to i8
  store i8 %v1_c304, i8* %v2_c2f0, align 1
  %v0_c308 = load i32, i32* @r6, align 4
  %v1_c308 = add i32 %v0_c308, 13
  %v2_c308 = inttoptr i32 %v1_c308 to i8*
  %v3_c308 = load i8, i8* %v2_c308, align 1
  %v4_c308 = zext i8 %v3_c308 to i32
  store i32 %v1_c1c4, i32* %r3.global-to-local, align 4
  %v1_c310 = and i32 %v4_c308, 239
  %v5_c314 = or i32 %v1_c310, %v4_c314
  store i32 %v5_c314, i32* %r2.global-to-local, align 4
  %v1_c318 = trunc i32 %v5_c314 to i8
  store i8 %v1_c318, i8* %v2_c308, align 1
  %v0_c31c = load i32, i32* @r6, align 4
  %v1_c31c = add i32 %v0_c31c, 13
  %v2_c31c = inttoptr i32 %v1_c31c to i8*
  %v3_c31c = load i8, i8* %v2_c31c, align 1
  %v4_c31c = zext i8 %v3_c31c to i32
  store i32 %v1_c1c8, i32* %ip.global-to-local, align 4
  %v1_c324 = and i32 %v4_c31c, 247
  %v5_c328 = or i32 %v1_c324, %v4_c328
  store i32 %v5_c328, i32* %r3.global-to-local, align 4
  %v1_c32c = trunc i32 %v5_c328 to i8
  store i8 %v1_c32c, i8* %v2_c31c, align 1
  %v0_c330 = load i32, i32* @r6, align 4
  %v1_c330 = add i32 %v0_c330, 13
  %v2_c330 = inttoptr i32 %v1_c330 to i8*
  %v3_c330 = load i8, i8* %v2_c330, align 1
  %v4_c330 = zext i8 %v3_c330 to i32
  store i32 %v1_c1cc, i32* %r1.global-to-local, align 4
  %v1_c338 = and i32 %v4_c330, 251
  %v5_c33c = or i32 %v1_c338, %v4_c33c
  store i32 %v5_c33c, i32* %r2.global-to-local, align 4
  %v1_c340 = trunc i32 %v5_c33c to i8
  store i8 %v1_c340, i8* %v2_c330, align 1
  %v0_c344 = load i32, i32* @r6, align 4
  %v1_c344 = add i32 %v0_c344, 13
  %v2_c344 = inttoptr i32 %v1_c344 to i8*
  %v3_c344 = load i8, i8* %v2_c344, align 1
  %v4_c344 = zext i8 %v3_c344 to i32
  store i32 %v1_c1f8, i32* %r2.global-to-local, align 4
  %v1_c34c = and i32 %v4_c344, 253
  %v4_c350 = or i32 %v1_c34c, %v3_c350
  store i32 %v4_c350, i32* %r3.global-to-local, align 4
  %v1_c354 = trunc i32 %v4_c350 to i8
  store i8 %v1_c354, i8* %v2_c344, align 1
  %v0_c358 = load i32, i32* @r6, align 4
  %v1_c358 = add i32 %v0_c358, 12
  %v2_c358 = inttoptr i32 %v1_c358 to i8*
  %v3_c358 = load i8, i8* %v2_c358, align 1
  %v4_c358 = zext i8 %v3_c358 to i32
  store i32 %v4_c358, i32* %r2.global-to-local, align 4
  %v1_c35c = add i32 %v0_c358, 13
  %v2_c35c = inttoptr i32 %v1_c35c to i8*
  %v3_c35c = load i8, i8* %v2_c35c, align 1
  %v4_c35c = zext i8 %v3_c35c to i32
  store i32 %v1_c20c, i32* %ip.global-to-local, align 4
  %tmp101 = urem i8 %v3_c358, 16
  %v1_c364 = zext i8 %tmp101 to i32
  %v1_c368 = and i32 %v4_c35c, 254
  %v2_c36c = or i32 %v1_c368, %v1_c20c
  store i32 %v2_c36c, i32* %r3.global-to-local, align 4
  %v1_c370 = or i32 %v1_c364, 80
  store i32 %v1_c370, i32* %r2.global-to-local, align 4
  %v1_c374 = trunc i32 %v1_c370 to i8
  store i8 %v1_c374, i8* %v2_c358, align 1
  %v0_c378 = load i32, i32* %r3.global-to-local, align 4
  %v1_c378 = trunc i32 %v0_c378 to i8
  %v2_c378 = load i32, i32* @r6, align 4
  %v3_c378 = add i32 %v2_c378, 13
  %v4_c378 = inttoptr i32 %v3_c378 to i8*
  store i8 %v1_c378, i8* %v4_c378, align 1
  store i32 %v5_c1a4, i32* %r1.global-to-local, align 4
  %v0_c380 = load i32, i32* @fp, align 4
  %v1_c380 = trunc i32 %v0_c380 to i8
  %v2_c380 = load i32, i32* @r6, align 4
  %v3_c380 = add i32 %v2_c380, 1
  %v4_c380 = inttoptr i32 %v3_c380 to i8*
  store i8 %v1_c380, i8* %v4_c380, align 1
  %v0_c384 = load i32, i32* %r1.global-to-local, align 4
  %v1_c384 = load i32, i32* @r6, align 4
  %v2_c384 = add i32 %v1_c384, 4
  %v3_c384 = inttoptr i32 %v2_c384 to i32*
  store i32 %v0_c384, i32* %v3_c384, align 4
  %v0_c388 = load i32, i32* @r5, align 4
  %v1_c388 = trunc i32 %v0_c388 to i8
  %v2_c388 = load i32, i32* @r6, align 4
  %v3_c388 = add i32 %v2_c388, 2
  %v4_c388 = inttoptr i32 %v3_c388 to i8*
  store i8 %v1_c388, i8* %v4_c388, align 1
  %v0_c38c = load i32, i32* @sb, align 4
  %v1_c38c = trunc i32 %v0_c38c to i8
  %v2_c38c = load i32, i32* @r6, align 4
  %v3_c38c = add i32 %v2_c38c, 3
  %v4_c38c = inttoptr i32 %v3_c38c to i8*
  store i8 %v1_c38c, i8* %v4_c38c, align 1
  %v0_c390 = call i32 @function_f8c0()
  store i32 %v1_c1fc, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c390, 16777216
  %v1_c398 = sdiv i32 %sext, 16777216
  store i32 %v1_c398, i32* %r2.global-to-local, align 4
  %v3_c39c = ashr i32 %sext, 31
  store i32 %v3_c39c, i32* %r3.global-to-local, align 4
  store i1 %v2_c3a0, i1* %cpsr_z.global-to-local, align 1
  %v1_c3a4 = trunc i32 %v3_c39c to i8
  %v2_c3a4 = load i32, i32* @r6, align 4
  %v3_c3a4 = add i32 %v2_c3a4, 15
  %v4_c3a4 = inttoptr i32 %v3_c3a4 to i8*
  store i8 %v1_c3a4, i8* %v4_c3a4, align 1
  %v0_c3a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3a8, label %.thread11, label %bb83

bb83:                                             ; preds = %bb82
  %v1_c3a8 = load i32, i32* @r6, align 4
  %v2_c3a8 = add i32 %v1_c3a8, 13
  %v3_c3a8 = inttoptr i32 %v2_c3a8 to i8*
  %v4_c3a8 = load i8, i8* %v3_c3a8, align 1
  %v5_c3a8 = zext i8 %v4_c3a8 to i32
  %v2_c3ac = or i32 %v5_c3a8, 8
  store i32 %v2_c3ac, i32* %r3.global-to-local, align 4
  %v2_c3b0 = trunc i32 %v2_c3ac to i8
  store i8 %v2_c3b0, i8* %v3_c3a8, align 1
  br label %.thread11

.thread11:                                        ; preds = %bb82, %bb83
  %v0_c3b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3b4 = trunc i32 %v0_c3b4 to i8
  %v2_c3b4 = load i32, i32* @r6, align 4
  %v3_c3b4 = add i32 %v2_c3b4, 14
  %v4_c3b4 = inttoptr i32 %v3_c3b4 to i8*
  store i8 %v1_c3b4, i8* %v4_c3b4, align 1
  %v0_c3b8 = load i32, i32* @sl, align 4
  store i32 %v0_c3b8, i32* %r1.global-to-local, align 4
  %v0_c3bc = load i32, i32* @r7, align 4
  %v2_c3c0 = call i32 @function_f974(i32 %v0_c3bc, i32 %v0_c3b8)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c3c8 = load i32, i32* @r7, align 4
  %v3_c3c8 = load i32, i32* @sl, align 4
  %v4_c3c8 = add i32 %v3_c3c8, %v2_c3c8
  %v5_c3c8 = inttoptr i32 %v4_c3c8 to i8*
  store i8 0, i8* %v5_c3c8, align 1
  %v3_c3cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3cc, i32* %r2.global-to-local, align 4
  store i32 %v1_becc, i32* %r1.global-to-local, align 4
  %v1_c3d4 = add i32 %v3_c3cc, 1
  store i32 %v1_c3d4, i32* @r6, align 4
  %v9_c3d8 = icmp eq i32 %v1_becc, %v1_c3d4
  store i1 %v9_c3d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c3d4, i32* %stack_var_-40, align 4
  %v8_c3e0 = icmp sgt i32 %v1_becc, %v1_c3d4
  br i1 %v8_c3e0, label %dec_label_pc_c238, label %dec_label_pc_c3e4.preheader

dec_label_pc_c3e4.preheader:                      ; preds = %.thread11, %dec_label_pc_c124
  %v2_c424 = icmp eq i32 %v6_c0c8, -1
  %v7_c424 = icmp eq i32 %v6_c0c8, -1
  %v3_c5bc = icmp eq i32 %v3_c13c, 65535
  %v2_c638 = icmp eq i32 %v1_c0b4, 0
  br label %dec_label_pc_c3e4

dec_label_pc_c3e4:                                ; preds = %dec_label_pc_c3e4.preheader, %dec_label_pc_c65c
  store i32 %v1_becc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_c148, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_c148, label %dec_label_pc_c65c, label %dec_label_pc_c3f8

dec_label_pc_c3f8:                                ; preds = %dec_label_pc_c3e4
  %v0_c3f8 = load i32, i32* @sl, align 4
  %v1_c3f8 = add i32 %v0_c3f8, 20
  store i32 %v1_c3f8, i32* @sb, align 4
  %tmp84 = mul i32 %v1_c3f8, 256
  %v1_c404 = and i32 %tmp84, 65280
  store i32 %v1_c404, i32* %r3.global-to-local, align 4
  %tmp85 = udiv i32 %v1_c3f8, 256
  %v4_c408 = urem i32 %tmp85, 256
  %v5_c408 = or i32 %v4_c408, %v1_c404
  store i32 %v5_c408, i32* %r2.global-to-local, align 4
  %v1_c410 = add i32 %v0_c3f8, 40
  store i32 %v1_c410, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c520

dec_label_pc_c420:                                ; preds = %dec_label_pc_c520
  store i32 %v6_c0c8, i32* %r1.global-to-local, align 4
  store i1 %v7_c424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c424, label %dec_label_pc_c5ac, label %dec_label_pc_c42c

dec_label_pc_c42c:                                ; preds = %dec_label_pc_c544, %dec_label_pc_c420
  store i32 %v3_c13c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c5bc, label %dec_label_pc_c5c8, label %dec_label_pc_c440

dec_label_pc_c440:                                ; preds = %dec_label_pc_c5ac.dec_label_pc_c440_crit_edge, %dec_label_pc_c42c
  %v1_c444 = phi i32 [ %v1_c444.pre, %dec_label_pc_c5ac.dec_label_pc_c440_crit_edge ], [ 65535, %dec_label_pc_c42c ]
  store i32 %v3_c140, i32* %r3.global-to-local, align 4
  %v9_c444 = icmp eq i32 %v3_c140, %v1_c444
  store i1 %v9_c444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c444, label %dec_label_pc_c5e4, label %dec_label_pc_c44c

dec_label_pc_c44c:                                ; preds = %dec_label_pc_c5c8.dec_label_pc_c44c_crit_edge, %dec_label_pc_c440
  %v1_c450 = phi i32 [ %v1_c450.pre, %dec_label_pc_c5c8.dec_label_pc_c44c_crit_edge ], [ %v1_c444, %dec_label_pc_c440 ]
  store i32 %v3_c144, i32* %ip.global-to-local, align 4
  %v9_c450 = icmp eq i32 %v3_c144, %v1_c450
  store i1 %v9_c450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c450, label %dec_label_pc_c600, label %dec_label_pc_c458

dec_label_pc_c458:                                ; preds = %dec_label_pc_c5e4.dec_label_pc_c458_crit_edge, %dec_label_pc_c44c
  %v1_c45c = phi i32 [ %v1_c45c.pre, %dec_label_pc_c5e4.dec_label_pc_c458_crit_edge ], [ %v1_c450, %dec_label_pc_c44c ]
  store i32 %v6_bfc8, i32* %r1.global-to-local, align 4
  %v9_c45c = icmp eq i32 %v6_bfc8, %v1_c45c
  store i1 %v9_c45c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c45c, label %dec_label_pc_c61c, label %dec_label_pc_c464

dec_label_pc_c464:                                ; preds = %dec_label_pc_c600.dec_label_pc_c464_crit_edge, %dec_label_pc_c458
  %v1_c468 = phi i32 [ %v1_c468.pre, %dec_label_pc_c600.dec_label_pc_c464_crit_edge ], [ %v1_c45c, %dec_label_pc_c458 ]
  store i32 %v6_bfe4, i32* %r2.global-to-local, align 4
  %v9_c468 = icmp eq i32 %v6_bfe4, %v1_c468
  store i1 %v9_c468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c468, label %dec_label_pc_c630, label %dec_label_pc_c470

dec_label_pc_c470:                                ; preds = %dec_label_pc_c61c, %dec_label_pc_c464
  store i32 %v1_c0b4, i32* %r3.global-to-local, align 4
  store i1 %v2_c638, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c638, label %dec_label_pc_c47c, label %dec_label_pc_c644

dec_label_pc_c47c:                                ; preds = %dec_label_pc_c470, %dec_label_pc_c630, %dec_label_pc_c644
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c480 = load i32, i32* @r7, align 4
  %v1_c480 = trunc i32 %v0_c480 to i8
  %v2_c480 = load i32, i32* @r5, align 4
  %v3_c480 = add i32 %v2_c480, 10
  %v4_c480 = inttoptr i32 %v3_c480 to i8*
  store i8 %v1_c480, i8* %v4_c480, align 1
  %v0_c484 = load i32, i32* @r7, align 4
  %v1_c484 = trunc i32 %v0_c484 to i8
  %v2_c484 = load i32, i32* @r5, align 4
  %v3_c484 = add i32 %v2_c484, 11
  %v4_c484 = inttoptr i32 %v3_c484 to i8*
  store i8 %v1_c484, i8* %v4_c484, align 1
  %v0_c488 = load i32, i32* @r5, align 4
  store i32 %v0_c488, i32* @r0, align 4
  %v2_c48c = call i32 @function_e498(i32 %v0_c488, i32 20)
  %v3_c48c = trunc i32 %v2_c48c to i8
  %v4_c49024 = udiv i32 %v2_c48c, 256
  %v1_c494 = trunc i32 %v4_c49024 to i8
  %v2_c494 = load i32, i32* @r5, align 4
  %v3_c494 = add i32 %v2_c494, 11
  %v4_c494 = inttoptr i32 %v3_c494 to i8*
  store i8 %v1_c494, i8* %v4_c494, align 1
  %v3_c498 = load i32, i32* @r5, align 4
  %v4_c498 = add i32 %v3_c498, 10
  %v5_c498 = inttoptr i32 %v4_c498 to i8*
  store i8 %v3_c48c, i8* %v5_c498, align 1
  %v0_c49c = load i32, i32* @r6, align 4
  store i32 %v0_c49c, i32* @r1, align 4
  store i32 %v5_c408, i32* %r2.global-to-local, align 4
  %v0_c4a4 = load i32, i32* @sb, align 4
  store i32 %v0_c4a4, i32* %r3.global-to-local, align 4
  %v0_c4a8 = load i32, i32* @r7, align 4
  %v1_c4a8 = trunc i32 %v0_c4a8 to i8
  %v3_c4a8 = add i32 %v0_c49c, 16
  %v4_c4a8 = inttoptr i32 %v3_c4a8 to i8*
  store i8 %v1_c4a8, i8* %v4_c4a8, align 1
  %v0_c4ac = load i32, i32* @r7, align 4
  %v1_c4ac = trunc i32 %v0_c4ac to i8
  %v2_c4ac = load i32, i32* @r6, align 4
  %v3_c4ac = add i32 %v2_c4ac, 17
  %v4_c4ac = inttoptr i32 %v3_c4ac to i8*
  store i8 %v1_c4ac, i8* %v4_c4ac, align 1
  %v0_c4b0 = load i32, i32* @r5, align 4
  %v4_c4b4 = call i32 @function_e4f4(i32 %v0_c4b0, i32 %v0_c49c, i32 %v5_c408, i32 %v0_c4a4)
  %v5_c4b4 = trunc i32 %v4_c4b4 to i8
  %v4_c4b825 = udiv i32 %v4_c4b4, 256
  %v1_c4bc = trunc i32 %v4_c4b825 to i8
  %v2_c4bc = load i32, i32* @r6, align 4
  %v3_c4bc = add i32 %v2_c4bc, 17
  %v4_c4bc = inttoptr i32 %v3_c4bc to i8*
  store i8 %v1_c4bc, i8* %v4_c4bc, align 1
  %v3_c4c0 = load i32, i32* @r6, align 4
  %v4_c4c0 = add i32 %v3_c4c0, 16
  %v5_c4c0 = inttoptr i32 %v4_c4c0 to i8*
  store i8 %v5_c4b4, i8* %v5_c4c0, align 1
  %v3_c4c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c4c4, i32* %r3.global-to-local, align 4
  %v0_c4c8 = load i32, i32* @r5, align 4
  %v1_c4c8 = add i32 %v0_c4c8, 20
  %v2_c4c8 = inttoptr i32 %v1_c4c8 to i32*
  %v3_c4c8 = load i32, i32* %v2_c4c8, align 4
  %v3_c4d0 = udiv i32 %v3_c4c8, 65536
  store i32 %v3_c4d0, i32* %r2.global-to-local, align 4
  %v5_c4d4 = mul i32 %v3_c4c4, 24
  %v1_c4d8 = load i32, i32* @r8, align 4
  %v2_c4d8 = add i32 %v1_c4d8, %v5_c4d4
  store i32 %v2_c4d8, i32* %ip.global-to-local, align 4
  %v3_c4dc21 = udiv i32 %v3_c4c8, 16777216
  %v1_c4e0 = trunc i32 %v3_c4dc21 to i8
  %v3_c4e0 = add i32 %v2_c4d8, 3
  %v4_c4e0 = inttoptr i32 %v3_c4e0 to i8*
  store i8 %v1_c4e0, i8* %v4_c4e0, align 1
  %v0_c4e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c4e4 = trunc i32 %v0_c4e4 to i8
  %v2_c4e4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c4e4 = add i32 %v2_c4e4, 2
  %v4_c4e4 = inttoptr i32 %v3_c4e4 to i8*
  store i8 %v1_c4e4, i8* %v4_c4e4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c4ec = load i32, i32* @r5, align 4
  store i32 %v0_c4ec, i32* %r1.global-to-local, align 4
  %v0_c4f4 = load i32, i32* @fp, align 4
  store i32 %v0_c4f4, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c4fc = load i32, i32* %ip.global-to-local, align 4
  %v6_c504 = inttoptr i32 %v0_c4ec to i32*
  %v7_c504 = call i32 @function_13258(i32 %v3_c0ec, i32* %v6_c504, i32 %v0_c4f4, i32 16384, i32 %v0_c4fc, i32 16)
  %v3_c508 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c508, i32* %r3.global-to-local, align 4
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v1_c510 = add i32 %v3_c508, 1
  %v9_c514 = icmp eq i32 %v1_becc, %v1_c510
  store i1 %v9_c514, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c510, i32* %stack_var_-40, align 4
  %v7_c51c = icmp sgt i32 %v1_becc, %v1_c510
  br i1 %v7_c51c, label %dec_label_pc_c520, label %dec_label_pc_c65c

dec_label_pc_c520:                                ; preds = %dec_label_pc_c47c, %dec_label_pc_c3f8
  %v1_c534 = phi i32 [ %v1_c510, %dec_label_pc_c47c ], [ 0, %dec_label_pc_c3f8 ]
  %v5_c524 = mul i32 %v1_c534, 24
  %v1_c528 = load i32, i32* @r8, align 4
  %v2_c528 = add i32 %v1_c528, %v5_c524
  store i32 %v2_c528, i32* %r3.global-to-local, align 4
  store i32 %v2_bef8, i32* %ip.global-to-local, align 4
  %v1_c530 = add i32 %v2_c528, 20
  %v2_c530 = inttoptr i32 %v1_c530 to i8*
  %v3_c530 = load i8, i8* %v2_c530, align 1
  %v4_c530 = zext i8 %v3_c530 to i32
  store i32 %v4_c530, i32* %r2.global-to-local, align 4
  %v4_c534 = mul i32 %v1_c534, 4
  %v5_c534 = add i32 %v4_c534, %v2_bef8
  %v6_c534 = inttoptr i32 %v5_c534 to i32*
  %v7_c534 = load i32, i32* %v6_c534, align 4
  store i32 %v7_c534, i32* @r5, align 4
  %v2_c538 = icmp ugt i8 %v3_c530, 30
  %v7_c538 = icmp eq i8 %v3_c530, 31
  store i1 %v7_c538, i1* %cpsr_z.global-to-local, align 1
  %v1_c53c = add i32 %v7_c534, 20
  store i32 %v1_c53c, i32* @r6, align 4
  %v2_c540 = xor i1 %v7_c538, true
  %v3_c540 = and i1 %v2_c538, %v2_c540
  br i1 %v3_c540, label %dec_label_pc_c420, label %dec_label_pc_c544

dec_label_pc_c544:                                ; preds = %dec_label_pc_c520
  %v1_c544 = add i32 %v2_c528, 16
  %v2_c544 = inttoptr i32 %v1_c544 to i32*
  %v3_c544 = load i32, i32* %v2_c544, align 4
  %v0_c548 = call i32 @function_f8c0()
  %v3_c54c = load i32, i32* %stack_var_-40, align 4
  %v5_c554 = mul i32 %v3_c54c, 24
  %v1_c55c = load i32, i32* @r8, align 4
  %v2_c55c = add i32 %v1_c55c, %v5_c554
  store i32 %v2_c55c, i32* %r1.global-to-local, align 4
  %v1_c560 = and i32 %v3_c544, 65280
  store i32 %v1_c560, i32* %r3.global-to-local, align 4
  %v1_c558 = udiv i32 %v3_c544, 256
  %v3_c564 = and i32 %v1_c558, 65280
  store i32 %v3_c564, i32* %r2.global-to-local, align 4
  %v3_c568 = mul i32 %v3_c544, 16777216
  store i32 %v3_c568, i32* %ip.global-to-local, align 4
  %v1_c56c = add i32 %v2_c55c, 20
  %v2_c56c = inttoptr i32 %v1_c56c to i8*
  %v3_c56c = load i8, i8* %v2_c56c, align 1
  %v4_c56c = zext i8 %v3_c56c to i32
  %v4_c570 = mul nuw nsw i32 %v1_c560, 256
  %v5_c570 = or i32 %v4_c570, %v3_c568
  store i32 %v5_c570, i32* %ip.global-to-local, align 4
  %v2_c578 = call i32 @llvm.bswap.i32(i32 %v3_c544)
  %v7_c57c = lshr i32 %v0_c548, %v4_c56c
  %v8_c57c = add i32 %v7_c57c, %v2_c578
  store i32 %v8_c57c, i32* %r2.global-to-local, align 4
  %v2_c598 = call i32 @llvm.bswap.i32(i32 %v8_c57c)
  store i32 %v2_c598, i32* %r3.global-to-local, align 4
  store i32 %v6_c0c8, i32* %r1.global-to-local, align 4
  store i1 %v7_c424, i1* %cpsr_z.global-to-local, align 1
  %v1_c5a4 = load i32, i32* @r5, align 4
  %v2_c5a4 = add i32 %v1_c5a4, 16
  %v3_c5a4 = inttoptr i32 %v2_c5a4 to i32*
  store i32 %v2_c598, i32* %v3_c5a4, align 4
  br i1 %v2_c424, label %dec_label_pc_c5ac, label %dec_label_pc_c42c

dec_label_pc_c5ac:                                ; preds = %dec_label_pc_c544, %dec_label_pc_c420
  %v0_c5ac = call i32 @function_f8c0()
  store i32 %v3_c13c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c5bc, i1* %cpsr_z.global-to-local, align 1
  %v1_c5c0 = load i32, i32* @r5, align 4
  %v2_c5c0 = add i32 %v1_c5c0, 12
  %v3_c5c0 = inttoptr i32 %v2_c5c0 to i32*
  store i32 %v0_c5ac, i32* %v3_c5c0, align 4
  br i1 %v3_c5bc, label %dec_label_pc_c5c8, label %dec_label_pc_c5ac.dec_label_pc_c440_crit_edge

dec_label_pc_c5ac.dec_label_pc_c440_crit_edge:    ; preds = %dec_label_pc_c5ac
  %v1_c444.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c440

dec_label_pc_c5c8:                                ; preds = %dec_label_pc_c5ac, %dec_label_pc_c42c
  %v0_c5c8 = call i32 @function_f8c0()
  %v1_c5c8 = trunc i32 %v0_c5c8 to i8
  %v4_c5cc26 = udiv i32 %v0_c5c8, 256
  %v1_c5d0 = trunc i32 %v4_c5cc26 to i8
  %v2_c5d0 = load i32, i32* @r5, align 4
  %v3_c5d0 = add i32 %v2_c5d0, 5
  %v4_c5d0 = inttoptr i32 %v3_c5d0 to i8*
  store i8 %v1_c5d0, i8* %v4_c5d0, align 1
  store i32 %v3_c140, i32* %r3.global-to-local, align 4
  %v1_c5d8 = load i32, i32* @r4, align 4
  %v9_c5d8 = icmp eq i32 %v3_c140, %v1_c5d8
  store i1 %v9_c5d8, i1* %cpsr_z.global-to-local, align 1
  %v3_c5dc = load i32, i32* @r5, align 4
  %v4_c5dc = add i32 %v3_c5dc, 4
  %v5_c5dc = inttoptr i32 %v4_c5dc to i8*
  store i8 %v1_c5c8, i8* %v5_c5dc, align 1
  %v0_c5e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5e0, label %dec_label_pc_c5e4, label %dec_label_pc_c5c8.dec_label_pc_c44c_crit_edge

dec_label_pc_c5c8.dec_label_pc_c44c_crit_edge:    ; preds = %dec_label_pc_c5c8
  %v1_c450.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c44c

dec_label_pc_c5e4:                                ; preds = %dec_label_pc_c5c8, %dec_label_pc_c440
  %v0_c5e4 = call i32 @function_f8c0()
  %v1_c5e4 = trunc i32 %v0_c5e4 to i8
  store i32 %v3_c144, i32* %ip.global-to-local, align 4
  %v4_c5ec = sdiv i32 %v0_c5e4, 256
  store i32 %v4_c5ec, i32* %r3.global-to-local, align 4
  %v1_c5f0 = load i32, i32* @r4, align 4
  %v9_c5f0 = icmp eq i32 %v3_c144, %v1_c5f0
  store i1 %v9_c5f0, i1* %cpsr_z.global-to-local, align 1
  %v3_c5f4 = load i32, i32* @r5, align 4
  %v4_c5f4 = add i32 %v3_c5f4, 20
  %v5_c5f4 = inttoptr i32 %v4_c5f4 to i8*
  store i8 %v1_c5e4, i8* %v5_c5f4, align 1
  %v0_c5f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5f8 = trunc i32 %v0_c5f8 to i8
  %v2_c5f8 = load i32, i32* @r6, align 4
  %v3_c5f8 = add i32 %v2_c5f8, 1
  %v4_c5f8 = inttoptr i32 %v3_c5f8 to i8*
  store i8 %v1_c5f8, i8* %v4_c5f8, align 1
  %v0_c5fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5fc, label %dec_label_pc_c600, label %dec_label_pc_c5e4.dec_label_pc_c458_crit_edge

dec_label_pc_c5e4.dec_label_pc_c458_crit_edge:    ; preds = %dec_label_pc_c5e4
  %v1_c45c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c458

dec_label_pc_c600:                                ; preds = %dec_label_pc_c5e4, %dec_label_pc_c44c
  %v0_c600 = call i32 @function_f8c0()
  %v1_c600 = trunc i32 %v0_c600 to i8
  store i32 %v6_bfc8, i32* %r1.global-to-local, align 4
  %v4_c608 = sdiv i32 %v0_c600, 256
  store i32 %v4_c608, i32* %r3.global-to-local, align 4
  %v1_c60c = load i32, i32* @r4, align 4
  %v9_c60c = icmp eq i32 %v6_bfc8, %v1_c60c
  store i1 %v9_c60c, i1* %cpsr_z.global-to-local, align 1
  %v1_c610 = trunc i32 %v4_c608 to i8
  %v2_c610 = load i32, i32* @r6, align 4
  %v3_c610 = add i32 %v2_c610, 3
  %v4_c610 = inttoptr i32 %v3_c610 to i8*
  store i8 %v1_c610, i8* %v4_c610, align 1
  %v3_c614 = load i32, i32* @r6, align 4
  %v4_c614 = add i32 %v3_c614, 2
  %v5_c614 = inttoptr i32 %v4_c614 to i8*
  store i8 %v1_c600, i8* %v5_c614, align 1
  %v0_c618 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c618, label %dec_label_pc_c61c, label %dec_label_pc_c600.dec_label_pc_c464_crit_edge

dec_label_pc_c600.dec_label_pc_c464_crit_edge:    ; preds = %dec_label_pc_c600
  %v1_c468.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c464

dec_label_pc_c61c:                                ; preds = %dec_label_pc_c600, %dec_label_pc_c458
  %v0_c61c = call i32 @function_f8c0()
  store i32 %v6_bfe4, i32* %r2.global-to-local, align 4
  %v1_c624 = load i32, i32* @r4, align 4
  %v9_c624 = icmp eq i32 %v6_bfe4, %v1_c624
  store i1 %v9_c624, i1* %cpsr_z.global-to-local, align 1
  %v1_c628 = load i32, i32* @r6, align 4
  %v2_c628 = add i32 %v1_c628, 4
  %v3_c628 = inttoptr i32 %v2_c628 to i32*
  store i32 %v0_c61c, i32* %v3_c628, align 4
  br i1 %v9_c624, label %dec_label_pc_c630, label %dec_label_pc_c470

dec_label_pc_c630:                                ; preds = %dec_label_pc_c61c, %dec_label_pc_c464
  %v0_c630 = call i32 @function_f8c0()
  store i32 %v1_c0b4, i32* %r3.global-to-local, align 4
  store i1 %v2_c638, i1* %cpsr_z.global-to-local, align 1
  %v1_c63c = load i32, i32* @r6, align 4
  %v2_c63c = add i32 %v1_c63c, 8
  %v3_c63c = inttoptr i32 %v2_c63c to i32*
  store i32 %v0_c630, i32* %v3_c63c, align 4
  br i1 %v2_c638, label %dec_label_pc_c47c, label %dec_label_pc_c644

dec_label_pc_c644:                                ; preds = %dec_label_pc_c470, %dec_label_pc_c630
  %v0_c644 = load i32, i32* @r5, align 4
  %v1_c644 = add i32 %v0_c644, 40
  store i32 %v1_c644, i32* @r4, align 4
  %v0_c64c = load i32, i32* @sl, align 4
  store i32 %v0_c64c, i32* %r1.global-to-local, align 4
  %v2_c650 = call i32 @function_f974(i32 %v1_c644, i32 %v0_c64c)
  %v0_c654 = load i32, i32* @r7, align 4
  %v1_c654 = trunc i32 %v0_c654 to i8
  %v2_c654 = load i32, i32* @r4, align 4
  %v3_c654 = load i32, i32* @sl, align 4
  %v4_c654 = add i32 %v3_c654, %v2_c654
  %v5_c654 = inttoptr i32 %v4_c654 to i8*
  store i8 %v1_c654, i8* %v5_c654, align 1
  br label %dec_label_pc_c47c

dec_label_pc_c65c:                                ; preds = %dec_label_pc_c47c, %dec_label_pc_c3e4
  %v2_c660 = call i32 @function_12ca8(i32* null)
  store i32 %v2_c0d8, i32* %r1.global-to-local, align 4
  %v9_c668 = icmp eq i32 %v2_c0d8, %v2_c660
  store i1 %v9_c668, i1* %cpsr_z.global-to-local, align 1
  %v6_c66c = icmp slt i32 %v2_c0d8, %v2_c660
  br i1 %v6_c66c, label %dec_label_pc_c670, label %dec_label_pc_c3e4

dec_label_pc_c670:                                ; preds = %dec_label_pc_c65c, %dec_label_pc_bec8, %dec_label_pc_c678
  %v29_c674 = phi i32 [ %v3_c0ec, %dec_label_pc_bec8 ], [ %v1_c67c, %dec_label_pc_c678 ], [ %v2_c660, %dec_label_pc_c65c ]
  store i32 %v18_bec8, i32* %sb.global-to-local, align 4
  store i32 %v24_bec8, i32* %fp.global-to-local, align 4
  ret i32 %v29_c674

dec_label_pc_c678:                                ; preds = %dec_label_pc_c0fc
  %v1_c67c = call i32 @function_129d8(i32 %v3_c0ec)
  br label %dec_label_pc_c670

; uselistorder directives
  uselistorder i32 %v4_c608, { 1, 0 }
  uselistorder i32 %v2_c598, { 1, 0 }
  uselistorder i32 %v3_c568, { 1, 0 }
  uselistorder i32 %v3_c544, { 1, 3, 2, 0 }
  uselistorder i32 %v1_c510, { 1, 2, 0, 3 }
  uselistorder i32 %v0_c49c, { 1, 0, 2 }
  uselistorder i32 %v1_c3f8, { 1, 0, 2 }
  uselistorder i1 %v2_c638, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c5bc, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c424, { 2, 1, 0 }
  uselistorder i32 %v1_c3d4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c20c, { 1, 0 }
  uselistorder i32 %v3_c204, { 2, 0, 1, 3 }
  uselistorder i32 %v3_c200, { 0, 2, 1 }
  uselistorder i32 %v1_c1fc, { 1, 2, 0 }
  uselistorder i32 %v1_c1f8, { 2, 0, 1 }
  uselistorder i32 %tmp93, { 1, 0 }
  uselistorder i32 %v1_c1cc, { 1, 0 }
  uselistorder i32 %v1_c1c8, { 1, 0 }
  uselistorder i32 %v1_c1c4, { 1, 0 }
  uselistorder i32 %v1_c1c0, { 1, 0 }
  uselistorder i32 %v1_c190, { 2, 0, 1 }
  uselistorder i32 %v1_c178, { 1, 0 }
  uselistorder i1 %v2_c148, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c13c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c134, { 0, 1, 3, 2 }
  uselistorder i1 %v7_c11c, { 1, 0 }
  uselistorder i1 %v7_c0f0, { 1, 0 }
  uselistorder i32 %v3_c0ec, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_c0d8, { 2, 1, 0 }
  uselistorder i32 %v6_c0c8, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_c0b4, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bfe4, { 3, 2, 1, 0 }
  uselistorder i32 %v6_bfc8, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_bf78, { 1, 0 }
  uselistorder i8 %v5_bf68, { 1, 0 }
  uselistorder i32 %v6_bf4c, { 1, 0 }
  uselistorder i32 %v7_bf34, { 0, 2, 1 }
  uselistorder i32 %v6_bf10, { 1, 0 }
  uselistorder i32 %v2_bef8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_becc, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 18, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 27, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_c670, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c644, { 1, 0 }
  uselistorder label %dec_label_pc_c47c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c3e4, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb78, { 1, 0 }
}

define i32 @function_c688(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c688:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c688 = load i32, i32* @r4, align 4
  %v12_c688 = load i32, i32* @r7, align 4
  %v1_c68c = urem i32 %arg2, 256
  store i32 %v1_c68c, i32* %fp.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v1_c68c, i32* %r0.global-to-local, align 4
  %v1_c6a4 = urem i32 %arg4, 256
  store i32 %v1_c6a4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_c6b4 = call i32 @function_135a8(i32 %v1_c68c, i32 4)
  %v0_c6b8 = load i32, i32* @r5, align 4
  store i32 %v0_c6b8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c6c0 = load i32, i32* @r7, align 4
  store i32 %v0_c6c0, i32* %r3.global-to-local, align 4
  store i32 %v2_c6b4, i32* %sb.global-to-local, align 4
  %v0_c6c8 = load i32, i32* @r4, align 4
  store i32 %v0_c6c8, i32* %r0.global-to-local, align 4
  %v4_c6cc = inttoptr i32 %v0_c6b8 to i32*
  %v5_c6cc = call i32 @function_a054(i32 %v0_c6c8, i32* %v4_c6cc, i32 2, i32 %v0_c6c0)
  %v1_c6d8 = urem i32 %v5_c6cc, 256
  store i32 %v1_c6d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c6e4 = load i32, i32* @r5, align 4
  store i32 %v0_c6e4, i32* %r1.global-to-local, align 4
  %v0_c6e8 = load i32, i32* @r4, align 4
  store i32 %v0_c6e8, i32* %r0.global-to-local, align 4
  %v5_c6ec = trunc i32 %v5_c6cc to i8
  %v6_c6f0 = inttoptr i32 %v0_c6e4 to i32*
  %v7_c6f0 = call i32 @function_a054(i32 %v0_c6e8, i32* %v6_c6f0, i32 3, i32 65535)
  %v0_c6f4 = load i32, i32* @r5, align 4
  store i32 %v0_c6f4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c704 = load i32, i32* @r4, align 4
  store i32 %v0_c704, i32* %r0.global-to-local, align 4
  %v5_c708 = inttoptr i32 %v0_c6f4 to i32*
  %v6_c708 = call i32 @function_a054(i32 %v0_c704, i32* %v5_c708, i32 4, i32 64)
  %v1_c710 = urem i32 %v6_c708, 256
  store i32 %v1_c710, i32* %ip.global-to-local, align 4
  %v0_c714 = load i32, i32* @r5, align 4
  store i32 %v0_c714, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c720 = load i32, i32* @r4, align 4
  store i32 %v0_c720, i32* %r0.global-to-local, align 4
  %v6_c728 = inttoptr i32 %v0_c714 to i32*
  %v7_c728 = call i32 @function_a054(i32 %v0_c720, i32* %v6_c728, i32 5, i32 1)
  %v1_c734 = urem i32 %v7_c728, 256
  store i32 %v1_c734, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c740 = load i32, i32* @r5, align 4
  store i32 %v0_c740, i32* %r1.global-to-local, align 4
  %v0_c744 = load i32, i32* @r4, align 4
  store i32 %v0_c744, i32* %r0.global-to-local, align 4
  %v5_c74c = inttoptr i32 %v0_c740 to i32*
  %v6_c74c = call i32 @function_a054(i32 %v0_c744, i32* %v5_c74c, i32 6, i32 65535)
  %v0_c758 = load i32, i32* @r5, align 4
  store i32 %v0_c758, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c764 = load i32, i32* @r4, align 4
  store i32 %v0_c764, i32* %r0.global-to-local, align 4
  %v5_c768 = inttoptr i32 %v0_c758 to i32*
  %v6_c768 = call i32 @function_a054(i32 %v0_c764, i32* %v5_c768, i32 7, i32 65535)
  %v0_c774 = load i32, i32* @r5, align 4
  store i32 %v0_c774, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c780 = load i32, i32* @r4, align 4
  store i32 %v0_c780, i32* %r0.global-to-local, align 4
  %v5_c784 = inttoptr i32 %v0_c774 to i32*
  %v6_c784 = call i32 @function_a054(i32 %v0_c780, i32* %v5_c784, i32 16, i32 65535)
  %v0_c788 = load i32, i32* @r5, align 4
  store i32 %v0_c788, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_c794 = load i32, i32* @r7, align 4
  store i32 %v0_c794, i32* %r3.global-to-local, align 4
  %v0_c798 = load i32, i32* @r4, align 4
  store i32 %v0_c798, i32* %r0.global-to-local, align 4
  %v5_c79c = inttoptr i32 %v0_c788 to i32*
  %v6_c79c = call i32 @function_a054(i32 %v0_c798, i32* %v5_c79c, i32 17, i32 %v0_c794)
  %v0_c7a0 = load i32, i32* @r5, align 4
  store i32 %v0_c7a0, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_c7ac = load i32, i32* @r7, align 4
  store i32 %v0_c7ac, i32* %r3.global-to-local, align 4
  %v0_c7b0 = load i32, i32* @r4, align 4
  store i32 %v0_c7b0, i32* %r0.global-to-local, align 4
  %v5_c7b4 = inttoptr i32 %v0_c7a0 to i32*
  %v6_c7b4 = call i32 @function_a054(i32 %v0_c7b0, i32* %v5_c7b4, i32 10, i32 %v0_c7ac)
  %v0_c7b8 = load i32, i32* @r5, align 4
  store i32 %v0_c7b8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v0_c7c4 = load i32, i32* @r7, align 4
  store i32 %v0_c7c4, i32* %r3.global-to-local, align 4
  %v0_c7c8 = load i32, i32* @r4, align 4
  store i32 %v0_c7c8, i32* %r0.global-to-local, align 4
  %v5_c7cc = inttoptr i32 %v0_c7b8 to i32*
  %v6_c7cc = call i32 @function_a054(i32 %v0_c7c8, i32* %v5_c7cc, i32 11, i32 %v0_c7c4)
  %v0_c7d0 = load i32, i32* @r5, align 4
  store i32 %v0_c7d0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_c7dc = load i32, i32* @r7, align 4
  store i32 %v0_c7dc, i32* %r3.global-to-local, align 4
  %v0_c7e0 = load i32, i32* @r4, align 4
  store i32 %v0_c7e0, i32* %r0.global-to-local, align 4
  %v5_c7e4 = inttoptr i32 %v0_c7d0 to i32*
  %v6_c7e4 = call i32 @function_a054(i32 %v0_c7e0, i32* %v5_c7e4, i32 12, i32 %v0_c7dc)
  %v0_c7e8 = load i32, i32* @r5, align 4
  store i32 %v0_c7e8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_c7f4 = load i32, i32* @r7, align 4
  store i32 %v0_c7f4, i32* %r3.global-to-local, align 4
  %v0_c7f8 = load i32, i32* @r4, align 4
  store i32 %v0_c7f8, i32* %r0.global-to-local, align 4
  %v5_c7fc = inttoptr i32 %v0_c7e8 to i32*
  %v6_c7fc = call i32 @function_a054(i32 %v0_c7f8, i32* %v5_c7fc, i32 13, i32 %v0_c7f4)
  %v0_c800 = load i32, i32* @r5, align 4
  store i32 %v0_c800, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c810 = load i32, i32* @r4, align 4
  store i32 %v0_c810, i32* %r0.global-to-local, align 4
  %v5_c814 = inttoptr i32 %v0_c800 to i32*
  %v6_c814 = call i32 @function_a054(i32 %v0_c810, i32* %v5_c814, i32 14, i32 1)
  %v0_c818 = load i32, i32* @r5, align 4
  store i32 %v0_c818, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_c824 = load i32, i32* @r7, align 4
  store i32 %v0_c824, i32* %r3.global-to-local, align 4
  %v0_c828 = load i32, i32* @r4, align 4
  store i32 %v0_c828, i32* %r0.global-to-local, align 4
  %v5_c82c = inttoptr i32 %v0_c818 to i32*
  %v6_c82c = call i32 @function_a054(i32 %v0_c828, i32* %v5_c82c, i32 15, i32 %v0_c824)
  %v0_c834 = load i32, i32* @r5, align 4
  store i32 %v0_c834, i32* %r1.global-to-local, align 4
  %v2_c838 = load i32, i32* @global_var_1dd2c.82, align 4
  store i32 %v2_c838, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_c844 = load i32, i32* @r4, align 4
  store i32 %v0_c844, i32* %r0.global-to-local, align 4
  %v5_c848 = inttoptr i32 %v0_c834 to i32*
  %v6_c848 = call i32 @function_9fe8(i32 %v0_c844, i32* %v5_c848, i32 24, i32 %v2_c838, i32 %v6_c82c)
  %v0_c850 = load i32, i32* @r7, align 4
  store i32 %v0_c850, i32* %r0.global-to-local, align 4
  %v1_c854 = inttoptr i32 %v0_c850 to i32*
  %v2_c854 = call i32 @function_12ca8(i32* %v1_c854)
  %v1_c858 = load i32, i32* @r6, align 4
  %v2_c858 = add i32 %v1_c858, %v2_c854
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c86c = call i32 @function_132bc(i32 2, i32 3, i32 6)
  store i32 %v3_c86c, i32* %r0.global-to-local, align 4
  %v7_c870 = icmp eq i32 %v3_c86c, -1
  store i1 %v7_c870, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c86c, i32* %sl.global-to-local, align 4
  br i1 %v7_c870, label %dec_label_pc_cdec, label %dec_label_pc_c87c

dec_label_pc_c87c:                                ; preds = %dec_label_pc_c688
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c884 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c884, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_c88c = load i32, i32* @r7, align 4
  store i32 %v0_c88c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c898 = call i32 @function_1328c(i32 %v3_c86c, i32 %v0_c88c, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c898, i32* %r0.global-to-local, align 4
  %v7_c89c = icmp eq i32 %v6_c898, -1
  store i1 %v7_c89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c89c, label %dec_label_pc_cdf4, label %dec_label_pc_c8a4

dec_label_pc_c8a4:                                ; preds = %dec_label_pc_c87c
  %v3_c8b8 = mul i32 %v6_c74c, 65536
  store i32 %v3_c8b8, i32* @r4, align 4
  %v3_c8bc = urem i32 %v7_c6f0, 65536
  store i32 %v3_c8bc, i32* %ip.global-to-local, align 4
  %v3_c8c0 = urem i32 %v6_c74c, 65536
  store i32 %v3_c8c0, i32* %r0.global-to-local, align 4
  %v3_c8c4 = urem i32 %v6_c768, 65536
  store i32 %v3_c8c4, i32* %r2.global-to-local, align 4
  %v1_c8c8 = urem i32 %v6_c7b4, 256
  store i32 %v1_c8c8, i32* %r3.global-to-local, align 4
  %v0_c8cc = load i32, i32* %fp.global-to-local, align 4
  %v2_c8cc = icmp eq i32 %v0_c8cc, 0
  store i1 %v2_c8cc, i1* %cpsr_z.global-to-local, align 1
  %v0_c8d0 = load i32, i32* @r7, align 4
  store i32 %v0_c8d0, i32* %stack_var_-40, align 4
  %tmp69 = icmp slt i32 %v0_c8cc, 1
  br i1 %tmp69, label %dec_label_pc_cb8c.preheader, label %dec_label_pc_c8e8

dec_label_pc_c8e8:                                ; preds = %dec_label_pc_c8a4
  %v1_c8f0 = urem i32 %v7_c6f0, 256
  %v1_c904 = urem i32 %v6_c768, 256
  %tmp70 = mul i32 %v6_c784, 256
  %v1_c90c = and i32 %tmp70, 65280
  %tmp71 = udiv i32 %v6_c784, 256
  %v4_c910 = urem i32 %tmp71, 256
  %v5_c910 = or i32 %v4_c910, %v1_c90c
  %v3_c914 = mul nuw nsw i32 %v1_c904, 256
  %tmp72 = udiv i32 %v6_c768, 256
  %v4_c920 = urem i32 %tmp72, 256
  %v5_c920 = or i32 %v4_c920, %v3_c914
  store i32 %v5_c920, i32* @r6, align 4
  %v1_c900 = mul i32 %v6_c74c, 256
  %v3_c924 = and i32 %v1_c900, 65280
  store i32 %v3_c924, i32* %r1.global-to-local, align 4
  %v3_c930 = mul nuw nsw i32 %v1_c8f0, 256
  %tmp73 = udiv i32 %v6_c74c, 256
  %v1_c938 = urem i32 %v6_c7b4, 2
  %tmp74 = udiv i32 %v7_c6f0, 256
  %v4_c93c = urem i32 %tmp74, 256
  %v5_c93c = or i32 %v4_c93c, %v3_c930
  store i32 %v5_c93c, i32* @lr, align 4
  %v1_c944 = urem i32 %v6_c7cc, 2
  %v1_c948 = urem i32 %v6_c7fc, 2
  %sext11 = mul i32 %tmp73, 16777216
  %v4_c964 = sdiv i32 %sext11, 16777216
  %v1_c968 = urem i32 %v6_c7e4, 2
  %v1_c96c = urem i32 %v6_c814, 2
  %v1_c978 = urem i32 %v6_c82c, 2
  store i32 %v1_c978, i32* %r0.global-to-local, align 4
  store i32 %v1_c8f0, i32* %r2.global-to-local, align 4
  %v3_c980 = ashr i32 %sext11, 31
  store i32 %v3_c980, i32* %r3.global-to-local, align 4
  store i32 %v1_c904, i32* %ip.global-to-local, align 4
  %v5_c994 = trunc i32 %v3_c980 to i8
  store i32 %v0_c8d0, i32* @r4, align 4
  store i32 %v0_c8d0, i32* @r5, align 4
  store i32 6, i32* @r7, align 4
  %sext = mul i32 %v6_c708, 16777216
  %v4_c9f0 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v7_c6f0, 16777216
  %v4_c9fc = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %tmp74, 16777216
  %v4_ca00 = sdiv i32 %sext9, 16777216
  %tmp = sub nsw i32 0, %v1_c938
  %v4_ca5c = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_c944
  %v4_ca70 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_c968
  %v4_ca84 = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_c948
  %v4_ca98 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_c96c
  %v3_caac = and i32 %tmp81, 2
  %sext10 = mul i32 %v6_c768, 16777216
  %v7_cadc = sdiv i32 %sext10, 16777216
  br label %dec_label_pc_c9a8

dec_label_pc_c9a8:                                ; preds = %bb76, %dec_label_pc_c8e8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c9b0 = call i32 @function_135a8(i32 128, i32 1)
  store i32 %v2_c9b0, i32* %r0.global-to-local, align 4
  %v3_c9b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c9b4, i32* %r2.global-to-local, align 4
  %v1_c9b8 = load i32, i32* %sb.global-to-local, align 4
  %v2_c9b8 = load i32, i32* @r4, align 4
  %v5_c9b8 = mul i32 %v2_c9b8, 4
  %v6_c9b8 = add i32 %v5_c9b8, %v1_c9b8
  %v7_c9b8 = inttoptr i32 %v6_c9b8 to i32*
  store i32 %v2_c9b0, i32* %v7_c9b8, align 4
  %v0_c9bc = load i32, i32* %sb.global-to-local, align 4
  %v1_c9bc = load i32, i32* %r2.global-to-local, align 4
  %v4_c9bc = mul i32 %v1_c9bc, 4
  %v5_c9bc = add i32 %v4_c9bc, %v0_c9bc
  %v6_c9bc = inttoptr i32 %v5_c9bc to i32*
  %v7_c9bc = load i32, i32* %v6_c9bc, align 4
  store i32 %v7_c9bc, i32* %r4.global-to-local, align 4
  %v1_c9c0 = inttoptr i32 %v7_c9bc to i8*
  %v2_c9c0 = load i8, i8* %v1_c9c0, align 1
  %tmp82 = urem i8 %v2_c9c0, 16
  %v1_c9c4 = zext i8 %tmp82 to i32
  %v1_c9c8 = or i32 %v1_c9c4, 64
  store i32 %v1_c9c8, i32* %r3.global-to-local, align 4
  %v1_c9cc = trunc i32 %v1_c9c8 to i8
  store i8 %v1_c9cc, i8* %v1_c9c0, align 1
  %v0_c9d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_c9d0 = inttoptr i32 %v0_c9d0 to i8*
  %v2_c9d0 = load i8, i8* %v1_c9d0, align 1
  %v1_c9d4 = and i8 %v2_c9d0, -16
  %v1_c9d8 = or i8 %v1_c9d4, 5
  store i32 %v1_c734, i32* %r0.global-to-local, align 4
  store i8 %v1_c9d8, i8* %v1_c9d0, align 1
  %v2_c9e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9e8 = add i32 %v2_c9e8, 1
  %v4_c9e8 = inttoptr i32 %v3_c9e8 to i8*
  store i8 %v5_c6ec, i8* %v4_c9e8, align 1
  %v0_c9ec = load i32, i32* %r0.global-to-local, align 4
  %v2_c9ec = icmp eq i32 %v0_c9ec, 0
  store i1 %v2_c9ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_c9f0, i32* %r0.global-to-local, align 4
  %v2_c9f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9f8 = add i32 %v2_c9f8, 3
  %v4_c9f8 = inttoptr i32 %v3_c9f8 to i8*
  store i8 60, i8* %v4_c9f8, align 1
  store i32 %v4_c9fc, i32* %ip.global-to-local, align 4
  store i32 %v4_ca00, i32* %r3.global-to-local, align 4
  %v0_ca04 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca04 = trunc i32 %v0_ca04 to i8
  %v2_ca04 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca04 = add i32 %v2_ca04, 8
  %v4_ca04 = inttoptr i32 %v3_ca04 to i8*
  store i8 %v1_ca04, i8* %v4_ca04, align 1
  %v0_ca08 = load i32, i32* @r7, align 4
  %v1_ca08 = trunc i32 %v0_ca08 to i8
  %v2_ca08 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca08 = add i32 %v2_ca08, 9
  %v4_ca08 = inttoptr i32 %v3_ca08 to i8*
  store i8 %v1_ca08, i8* %v4_ca08, align 1
  %v3_ca0c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca0c, i32* %r2.global-to-local, align 4
  %v0_ca10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca10 = trunc i32 %v0_ca10 to i8
  %v2_ca10 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca10 = add i32 %v2_ca10, 4
  %v4_ca10 = inttoptr i32 %v3_ca10 to i8*
  store i8 %v1_ca10, i8* %v4_ca10, align 1
  %v0_ca14 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca14, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c9a8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ca18 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca18 = add i32 %v3_ca18, 6
  %v5_ca18 = inttoptr i32 %v4_ca18 to i8*
  store i8 64, i8* %v5_ca18, align 1
  %v0_ca38.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c9a8, %bb
  %v0_ca38 = phi i1 [ true, %dec_label_pc_c9a8 ], [ %v0_ca38.pre, %bb ]
  %v0_ca1c = load i32, i32* %r2.global-to-local, align 4
  %v5_ca20 = mul i32 %v0_ca1c, 24
  store i32 %v5_ca20, i32* %r3.global-to-local, align 4
  store i32 %v6_c848, i32* %r2.global-to-local, align 4
  %v1_ca28 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca28 = add i32 %v1_ca28, 12
  %v3_ca28 = inttoptr i32 %v2_ca28 to i32*
  store i32 %v6_c848, i32* %v3_ca28, align 4
  %v0_ca2c = load i32, i32* %r3.global-to-local, align 4
  %v1_ca2c = load i32, i32* @r8, align 4
  %v2_ca2c = add i32 %v1_ca2c, %v0_ca2c
  store i32 %v2_ca2c, i32* %r3.global-to-local, align 4
  %v1_ca30 = add i32 %v2_ca2c, 16
  %v2_ca30 = inttoptr i32 %v1_ca30 to i32*
  %v3_ca30 = load i32, i32* %v2_ca30, align 4
  store i32 %v3_ca30, i32* %r2.global-to-local, align 4
  store i32 %v4_c964, i32* %r3.global-to-local, align 4
  br i1 %v0_ca38, label %bb76, label %bb75

bb75:                                             ; preds = %.thread
  %v1_ca38 = load i32, i32* @r5, align 4
  %v2_ca38 = trunc i32 %v1_ca38 to i8
  %v3_ca38 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca38 = add i32 %v3_ca38, 7
  %v5_ca38 = inttoptr i32 %v4_ca38 to i8*
  store i8 %v2_ca38, i8* %v5_ca38, align 1
  br label %bb76

bb76:                                             ; preds = %.thread, %bb75
  %v0_ca3c = load i32, i32* %ip.global-to-local, align 4
  %v1_ca3c = trunc i32 %v0_ca3c to i8
  %v2_ca3c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca3c = add i32 %v2_ca3c, 5
  %v4_ca3c = inttoptr i32 %v3_ca3c to i8*
  store i8 %v1_ca3c, i8* %v4_ca3c, align 1
  %v0_ca40 = load i32, i32* @r5, align 4
  %v1_ca40 = trunc i32 %v0_ca40 to i8
  %v2_ca40 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca40 = add i32 %v2_ca40, 2
  %v4_ca40 = inttoptr i32 %v3_ca40 to i8*
  store i8 %v1_ca40, i8* %v4_ca40, align 1
  %v0_ca44 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca44 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca44 = add i32 %v1_ca44, 16
  %v3_ca44 = inttoptr i32 %v2_ca44 to i32*
  store i32 %v0_ca44, i32* %v3_ca44, align 4
  %v0_ca48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca48 = trunc i32 %v0_ca48 to i8
  %v2_ca48 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca48 = add i32 %v2_ca48, 20
  %v4_ca48 = inttoptr i32 %v3_ca48 to i8*
  store i8 %v1_ca48, i8* %v4_ca48, align 1
  %v0_ca4c = load i32, i32* %r4.global-to-local, align 4
  %v1_ca4c = add i32 %v0_ca4c, 20
  store i32 %v1_ca4c, i32* %r1.global-to-local, align 4
  %v1_ca50 = add i32 %v0_ca4c, 33
  %v2_ca50 = inttoptr i32 %v1_ca50 to i8*
  %v3_ca50 = load i8, i8* %v2_ca50, align 1
  %v4_ca50 = zext i8 %v3_ca50 to i32
  store i32 %v1_c938, i32* %ip.global-to-local, align 4
  %v1_ca58 = and i32 %v4_ca50, 223
  %v5_ca5c = or i32 %v1_ca58, %v4_ca5c
  store i32 %v5_ca5c, i32* %r3.global-to-local, align 4
  %v1_ca60 = trunc i32 %v5_ca5c to i8
  store i8 %v1_ca60, i8* %v2_ca50, align 1
  %v0_ca64 = load i32, i32* %r1.global-to-local, align 4
  %v1_ca64 = add i32 %v0_ca64, 13
  %v2_ca64 = inttoptr i32 %v1_ca64 to i8*
  %v3_ca64 = load i8, i8* %v2_ca64, align 1
  %v4_ca64 = zext i8 %v3_ca64 to i32
  store i32 %v1_c944, i32* %r0.global-to-local, align 4
  %v1_ca6c = and i32 %v4_ca64, 239
  %v5_ca70 = or i32 %v1_ca6c, %v4_ca70
  store i32 %v5_ca70, i32* %r2.global-to-local, align 4
  %v1_ca74 = trunc i32 %v5_ca70 to i8
  store i8 %v1_ca74, i8* %v2_ca64, align 1
  %v0_ca78 = load i32, i32* %r1.global-to-local, align 4
  %v1_ca78 = add i32 %v0_ca78, 13
  %v2_ca78 = inttoptr i32 %v1_ca78 to i8*
  %v3_ca78 = load i8, i8* %v2_ca78, align 1
  %v4_ca78 = zext i8 %v3_ca78 to i32
  store i32 %v1_c968, i32* %r2.global-to-local, align 4
  %v1_ca80 = and i32 %v4_ca78, 247
  %v5_ca84 = or i32 %v1_ca80, %v4_ca84
  store i32 %v5_ca84, i32* %r3.global-to-local, align 4
  %v1_ca88 = trunc i32 %v5_ca84 to i8
  store i8 %v1_ca88, i8* %v2_ca78, align 1
  %v0_ca8c = load i32, i32* %r1.global-to-local, align 4
  %v1_ca8c = add i32 %v0_ca8c, 13
  %v2_ca8c = inttoptr i32 %v1_ca8c to i8*
  %v3_ca8c = load i8, i8* %v2_ca8c, align 1
  %v4_ca8c = zext i8 %v3_ca8c to i32
  store i32 %v1_c948, i32* %r3.global-to-local, align 4
  %v1_ca94 = and i32 %v4_ca8c, 251
  %v5_ca98 = or i32 %v1_ca94, %v4_ca98
  store i32 %v5_ca98, i32* %r2.global-to-local, align 4
  %v1_ca9c = trunc i32 %v5_ca98 to i8
  store i8 %v1_ca9c, i8* %v2_ca8c, align 1
  %v0_caa0 = load i32, i32* %r1.global-to-local, align 4
  %v1_caa0 = add i32 %v0_caa0, 13
  %v2_caa0 = inttoptr i32 %v1_caa0 to i8*
  %v3_caa0 = load i8, i8* %v2_caa0, align 1
  %v4_caa0 = zext i8 %v3_caa0 to i32
  store i32 %v1_c96c, i32* %ip.global-to-local, align 4
  %v1_caa8 = and i32 %v4_caa0, 253
  %v4_caac = or i32 %v1_caa8, %v3_caac
  store i32 %v4_caac, i32* %r3.global-to-local, align 4
  %v1_cab0 = trunc i32 %v4_caac to i8
  store i8 %v1_cab0, i8* %v2_caa0, align 1
  %v0_cab4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cab4 = add i32 %v0_cab4, 12
  %v2_cab4 = inttoptr i32 %v1_cab4 to i8*
  %v3_cab4 = load i8, i8* %v2_cab4, align 1
  %v4_cab4 = zext i8 %v3_cab4 to i32
  store i32 %v4_cab4, i32* %r2.global-to-local, align 4
  %v1_cab8 = add i32 %v0_cab4, 13
  %v2_cab8 = inttoptr i32 %v1_cab8 to i8*
  %v3_cab8 = load i8, i8* %v2_cab8, align 1
  %v4_cab8 = zext i8 %v3_cab8 to i32
  %tmp83 = urem i8 %v3_cab4, 16
  %v1_cac0 = zext i8 %tmp83 to i32
  %v1_cac4 = and i32 %v4_cab8, 254
  %v2_cac8 = or i32 %v1_cac4, %v1_c978
  %v1_cacc = or i32 %v1_cac0, 160
  store i32 %v1_cacc, i32* %r2.global-to-local, align 4
  %v1_cad0 = trunc i32 %v2_cac8 to i8
  store i8 %v1_cad0, i8* %v2_cab8, align 1
  %v0_cad4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cad4 = trunc i32 %v0_cad4 to i8
  %v2_cad4 = load i32, i32* %r1.global-to-local, align 4
  %v3_cad4 = add i32 %v2_cad4, 12
  %v4_cad4 = inttoptr i32 %v3_cad4 to i8*
  store i8 %v1_cad4, i8* %v4_cad4, align 1
  store i32 %v7_cadc, i32* %r3.global-to-local, align 4
  store i32 %v5_c910, i32* %ip.global-to-local, align 4
  %v2_cae4 = load i32, i32* %r1.global-to-local, align 4
  %v3_cae4 = add i32 %v2_cae4, 1
  %v4_cae4 = inttoptr i32 %v3_cae4 to i8*
  store i8 %v5_c994, i8* %v4_cae4, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_caf0 = load i32, i32* %r3.global-to-local, align 4
  %v1_caf0 = trunc i32 %v0_caf0 to i8
  %v2_caf0 = load i32, i32* %r1.global-to-local, align 4
  %v3_caf0 = add i32 %v2_caf0, 3
  %v4_caf0 = inttoptr i32 %v3_caf0 to i8*
  store i8 %v1_caf0, i8* %v4_caf0, align 1
  %v0_caf4 = load i32, i32* %ip.global-to-local, align 4
  %v1_caf4 = load i32, i32* %r1.global-to-local, align 4
  %v2_caf4 = add i32 %v1_caf4, 4
  %v3_caf4 = inttoptr i32 %v2_caf4 to i32*
  store i32 %v0_caf4, i32* %v3_caf4, align 4
  %v0_caf8 = load i32, i32* @r6, align 4
  %v1_caf8 = trunc i32 %v0_caf8 to i8
  %v2_caf8 = load i32, i32* %r1.global-to-local, align 4
  %v3_caf8 = add i32 %v2_caf8, 2
  %v4_caf8 = inttoptr i32 %v3_caf8 to i8*
  store i8 %v1_caf8, i8* %v4_caf8, align 1
  %v0_cafc = load i32, i32* %r2.global-to-local, align 4
  %v1_cafc = trunc i32 %v0_cafc to i8
  %v2_cafc = load i32, i32* %r4.global-to-local, align 4
  %v3_cafc = add i32 %v2_cafc, 41
  %v4_cafc = inttoptr i32 %v3_cafc to i8*
  store i8 %v1_cafc, i8* %v4_cafc, align 1
  %v0_cb00 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb00 = trunc i32 %v0_cb00 to i8
  %v2_cb00 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb00 = add i32 %v2_cb00, 40
  %v4_cb00 = inttoptr i32 %v3_cb00 to i8*
  store i8 %v1_cb00, i8* %v4_cb00, align 1
  %v0_cb04 = call i32 @function_f8c0()
  %v1_cb08 = urem i32 %v0_cb04, 16
  %v1_cb0c = or i32 %v1_cb08, 1392
  %v1_cb10 = add nuw nsw i32 %v1_cb0c, 8
  %v3_cb14 = mul nuw nsw i32 %v1_cb10, 65536
  store i32 %v3_cb14, i32* %r0.global-to-local, align 4
  %v3_cb18 = mul nuw nsw i32 %v1_cb10, 256
  %v1_cb1c = and i32 %v3_cb18, 65280
  %v5_cb20 = or i32 %v1_cb1c, 5
  store i32 %v5_cb20, i32* %r3.global-to-local, align 4
  %v2_cb24 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb24 = add i32 %v2_cb24, 42
  %v4_cb24 = inttoptr i32 %v3_cb24 to i8*
  store i8 5, i8* %v4_cb24, align 1
  %v0_cb28 = load i32, i32* %r3.global-to-local, align 4
  %v3_cb28 = sdiv i32 %v0_cb28, 256
  store i32 %v3_cb28, i32* %r1.global-to-local, align 4
  %v0_cb2c = load i32, i32* %r4.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v1_cb34 = trunc i32 %v3_cb28 to i8
  %v3_cb34 = add i32 %v0_cb2c, 43
  %v4_cb34 = inttoptr i32 %v3_cb34 to i8*
  store i8 %v1_cb34, i8* %v4_cb34, align 1
  store i32 2, i32* %ip.global-to-local, align 4
  %v0_cb3c = load i32, i32* %r3.global-to-local, align 4
  %v1_cb3c = trunc i32 %v0_cb3c to i8
  %v2_cb3c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb3c = add i32 %v2_cb3c, 46
  %v4_cb3c = inttoptr i32 %v3_cb3c to i8*
  store i8 %v1_cb3c, i8* %v4_cb3c, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_cb48 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb48 = add i32 %v2_cb48, 47
  %v4_cb48 = inttoptr i32 %v3_cb48 to i8*
  store i8 10, i8* %v4_cb48, align 1
  %v0_cb4c = load i32, i32* %r3.global-to-local, align 4
  %v1_cb4c = trunc i32 %v0_cb4c to i8
  %v2_cb4c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb4c = add i32 %v2_cb4c, 44
  %v4_cb4c = inttoptr i32 %v3_cb4c to i8*
  store i8 %v1_cb4c, i8* %v4_cb4c, align 1
  %v0_cb50 = load i32, i32* %ip.global-to-local, align 4
  %v1_cb50 = trunc i32 %v0_cb50 to i8
  %v2_cb50 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb50 = add i32 %v2_cb50, 45
  %v4_cb50 = inttoptr i32 %v3_cb50 to i8*
  store i8 %v1_cb50, i8* %v4_cb50, align 1
  %v0_cb54 = call i32 @function_f8c0()
  store i32 %v0_cb54, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_cb60 = load i32, i32* %r4.global-to-local, align 4
  %v2_cb60 = add i32 %v1_cb60, 48
  %v3_cb60 = inttoptr i32 %v2_cb60 to i32*
  store i32 %v0_cb54, i32* %v3_cb60, align 4
  %v0_cb64 = load i32, i32* %r3.global-to-local, align 4
  %v1_cb64 = trunc i32 %v0_cb64 to i8
  %v2_cb64 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb64 = add i32 %v2_cb64, 56
  %v4_cb64 = inttoptr i32 %v3_cb64 to i8*
  store i8 %v1_cb64, i8* %v4_cb64, align 1
  %v0_cb68 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb68 = trunc i32 %v0_cb68 to i8
  %v2_cb68 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb68 = add i32 %v2_cb68, 58
  %v4_cb68 = inttoptr i32 %v3_cb68 to i8*
  store i8 %v1_cb68, i8* %v4_cb68, align 1
  %v0_cb6c = load i32, i32* @r7, align 4
  %v1_cb6c = trunc i32 %v0_cb6c to i8
  %v2_cb6c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb6c = add i32 %v2_cb6c, 59
  %v4_cb6c = inttoptr i32 %v3_cb6c to i8*
  store i8 %v1_cb6c, i8* %v4_cb6c, align 1
  %v0_cb70 = load i32, i32* @r5, align 4
  %v1_cb70 = load i32, i32* %r4.global-to-local, align 4
  %v2_cb70 = add i32 %v1_cb70, 52
  %v3_cb70 = inttoptr i32 %v2_cb70 to i32*
  store i32 %v0_cb70, i32* %v3_cb70, align 4
  %v0_cb74 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb74 = trunc i32 %v0_cb74 to i8
  %v2_cb74 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb74 = add i32 %v2_cb74, 57
  %v4_cb74 = inttoptr i32 %v3_cb74 to i8*
  store i8 %v1_cb74, i8* %v4_cb74, align 1
  %v3_cb78 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cb78, i32* %r3.global-to-local, align 4
  %v1_cb7c = add i32 %v3_cb78, 1
  store i32 %v1_cb7c, i32* @r4, align 4
  %v0_cb80 = load i32, i32* %fp.global-to-local, align 4
  %v9_cb80 = icmp eq i32 %v0_cb80, %v1_cb7c
  store i1 %v9_cb80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb7c, i32* %stack_var_-40, align 4
  %v8_cb88 = icmp sgt i32 %v0_cb80, %v1_cb7c
  br i1 %v8_cb88, label %dec_label_pc_c9a8, label %dec_label_pc_cb8c.preheader

dec_label_pc_cb8c.preheader:                      ; preds = %bb76, %dec_label_pc_c8a4
  %v0_cb9014 = phi i32 [ %v0_c8cc, %dec_label_pc_c8a4 ], [ %v0_cb80, %bb76 ]
  %v2_cbac = icmp eq i32 %v6_c848, -1
  %v7_cbac = icmp eq i32 %v6_c848, -1
  %v3_cd3c = icmp eq i32 %v3_c8bc, 65535
  %v2_cdb8 = icmp eq i32 %v1_c8c8, 0
  br label %dec_label_pc_cb8c

dec_label_pc_cb8c:                                ; preds = %dec_label_pc_cdd8.dec_label_pc_cb8c_crit_edge, %dec_label_pc_cb8c.preheader
  %v0_cb90 = phi i32 [ %v0_cb90.pre, %dec_label_pc_cdd8.dec_label_pc_cb8c_crit_edge ], [ %v0_cb9014, %dec_label_pc_cb8c.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_cb90 = icmp eq i32 %v0_cb90, 0
  store i1 %v2_cb90, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp77 = icmp slt i32 %v0_cb90, 1
  br i1 %tmp77, label %dec_label_pc_cdd8, label %dec_label_pc_cb9c

dec_label_pc_cb9c:                                ; preds = %dec_label_pc_cb8c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cca4

dec_label_pc_cba8:                                ; preds = %dec_label_pc_cca4
  store i32 %v6_c848, i32* %r0.global-to-local, align 4
  store i1 %v7_cbac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cbac, label %dec_label_pc_cd2c, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %dec_label_pc_ccc4, %dec_label_pc_cba8
  store i32 %v3_c8bc, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cd3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_cd3c, label %dec_label_pc_cd48, label %dec_label_pc_cbc8

dec_label_pc_cbc8:                                ; preds = %dec_label_pc_cd2c.dec_label_pc_cbc8_crit_edge, %dec_label_pc_cbb4
  %v1_cbcc = phi i32 [ %v1_cbcc.pre, %dec_label_pc_cd2c.dec_label_pc_cbc8_crit_edge ], [ 65535, %dec_label_pc_cbb4 ]
  store i32 %v3_c8c0, i32* %r3.global-to-local, align 4
  %v9_cbcc = icmp eq i32 %v3_c8c0, %v1_cbcc
  store i1 %v9_cbcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbcc, label %dec_label_pc_cd64, label %dec_label_pc_cbd4

dec_label_pc_cbd4:                                ; preds = %dec_label_pc_cd48.dec_label_pc_cbd4_crit_edge, %dec_label_pc_cbc8
  %v1_cbd8 = phi i32 [ %v1_cbd8.pre, %dec_label_pc_cd48.dec_label_pc_cbd4_crit_edge ], [ %v1_cbcc, %dec_label_pc_cbc8 ]
  store i32 %v3_c8c4, i32* %ip.global-to-local, align 4
  %v9_cbd8 = icmp eq i32 %v3_c8c4, %v1_cbd8
  store i1 %v9_cbd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbd8, label %dec_label_pc_cd80, label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %dec_label_pc_cd64.dec_label_pc_cbe0_crit_edge, %dec_label_pc_cbd4
  %v1_cbe4 = phi i32 [ %v1_cbe4.pre, %dec_label_pc_cd64.dec_label_pc_cbe0_crit_edge ], [ %v1_cbd8, %dec_label_pc_cbd4 ]
  store i32 %v6_c784, i32* %r0.global-to-local, align 4
  %v9_cbe4 = icmp eq i32 %v6_c784, %v1_cbe4
  store i1 %v9_cbe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbe4, label %dec_label_pc_cd9c, label %dec_label_pc_cbec

dec_label_pc_cbec:                                ; preds = %dec_label_pc_cd80.dec_label_pc_cbec_crit_edge, %dec_label_pc_cbe0
  %v1_cbf0 = phi i32 [ %v1_cbf0.pre, %dec_label_pc_cd80.dec_label_pc_cbec_crit_edge ], [ %v1_cbe4, %dec_label_pc_cbe0 ]
  store i32 %v6_c79c, i32* %r2.global-to-local, align 4
  %v9_cbf0 = icmp eq i32 %v6_c79c, %v1_cbf0
  store i1 %v9_cbf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cbf0, label %dec_label_pc_cdb0, label %dec_label_pc_cbf8

dec_label_pc_cbf8:                                ; preds = %dec_label_pc_cd9c, %dec_label_pc_cbec
  store i32 %v1_c8c8, i32* %r3.global-to-local, align 4
  store i1 %v2_cdb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cdb8, label %dec_label_pc_cc04, label %dec_label_pc_cdc4

dec_label_pc_cc04:                                ; preds = %dec_label_pc_cbf8, %dec_label_pc_cdb0, %dec_label_pc_cdc4
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cc08 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc08 = trunc i32 %v0_cc08 to i8
  %v2_cc08 = load i32, i32* @r5, align 4
  %v3_cc08 = add i32 %v2_cc08, 10
  %v4_cc08 = inttoptr i32 %v3_cc08 to i8*
  store i8 %v1_cc08, i8* %v4_cc08, align 1
  %v0_cc0c = load i32, i32* %r7.global-to-local, align 4
  %v1_cc0c = trunc i32 %v0_cc0c to i8
  %v2_cc0c = load i32, i32* @r5, align 4
  %v3_cc0c = add i32 %v2_cc0c, 11
  %v4_cc0c = inttoptr i32 %v3_cc0c to i8*
  store i8 %v1_cc0c, i8* %v4_cc0c, align 1
  %v0_cc10 = load i32, i32* @r5, align 4
  store i32 %v0_cc10, i32* @r0, align 4
  %v2_cc14 = call i32 @function_e498(i32 %v0_cc10, i32 20)
  %v3_cc14 = trunc i32 %v2_cc14 to i8
  %v4_cc1822 = udiv i32 %v2_cc14, 256
  %v1_cc1c = trunc i32 %v4_cc1822 to i8
  %v2_cc1c = load i32, i32* @r5, align 4
  %v3_cc1c = add i32 %v2_cc1c, 11
  %v4_cc1c = inttoptr i32 %v3_cc1c to i8*
  store i8 %v1_cc1c, i8* %v4_cc1c, align 1
  %v3_cc20 = load i32, i32* @r5, align 4
  %v4_cc20 = add i32 %v3_cc20, 10
  %v5_cc20 = inttoptr i32 %v4_cc20 to i8*
  store i8 %v3_cc14, i8* %v5_cc20, align 1
  %v0_cc24 = load i32, i32* @r6, align 4
  store i32 %v0_cc24, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_cc30 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc30 = trunc i32 %v0_cc30 to i8
  %v3_cc30 = add i32 %v0_cc24, 16
  %v4_cc30 = inttoptr i32 %v3_cc30 to i8*
  store i8 %v1_cc30, i8* %v4_cc30, align 1
  %v0_cc34 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc34 = trunc i32 %v0_cc34 to i8
  %v2_cc34 = load i32, i32* @r6, align 4
  %v3_cc34 = add i32 %v2_cc34, 17
  %v4_cc34 = inttoptr i32 %v3_cc34 to i8*
  store i8 %v1_cc34, i8* %v4_cc34, align 1
  %v0_cc38 = load i32, i32* @r5, align 4
  store i32 %v0_cc38, i32* %r0.global-to-local, align 4
  %v4_cc3c = call i32 @function_e4f4(i32 %v0_cc38, i32 %v0_cc24, i32 10240, i32 40)
  %v5_cc3c = trunc i32 %v4_cc3c to i8
  store i32 %v4_cc3c, i32* %r0.global-to-local, align 4
  %v4_cc4023 = udiv i32 %v4_cc3c, 256
  %v1_cc44 = trunc i32 %v4_cc4023 to i8
  %v2_cc44 = load i32, i32* @r6, align 4
  %v3_cc44 = add i32 %v2_cc44, 17
  %v4_cc44 = inttoptr i32 %v3_cc44 to i8*
  store i8 %v1_cc44, i8* %v4_cc44, align 1
  %v3_cc48 = load i32, i32* @r6, align 4
  %v4_cc48 = add i32 %v3_cc48, 16
  %v5_cc48 = inttoptr i32 %v4_cc48 to i8*
  store i8 %v5_cc3c, i8* %v5_cc48, align 1
  %v3_cc4c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc4c, i32* %r3.global-to-local, align 4
  %v0_cc50 = load i32, i32* @r5, align 4
  %v1_cc50 = add i32 %v0_cc50, 20
  %v2_cc50 = inttoptr i32 %v1_cc50 to i32*
  %v3_cc50 = load i32, i32* %v2_cc50, align 4
  %v3_cc58 = udiv i32 %v3_cc50, 65536
  store i32 %v3_cc58, i32* %r2.global-to-local, align 4
  %v5_cc5c = mul i32 %v3_cc4c, 24
  %v1_cc60 = load i32, i32* @r8, align 4
  %v2_cc60 = add i32 %v1_cc60, %v5_cc5c
  store i32 %v2_cc60, i32* %ip.global-to-local, align 4
  %v3_cc6421 = udiv i32 %v3_cc50, 16777216
  %v1_cc68 = trunc i32 %v3_cc6421 to i8
  %v3_cc68 = add i32 %v2_cc60, 3
  %v4_cc68 = inttoptr i32 %v3_cc68 to i8*
  store i8 %v1_cc68, i8* %v4_cc68, align 1
  %v0_cc6c = load i32, i32* %r2.global-to-local, align 4
  %v1_cc6c = trunc i32 %v0_cc6c to i8
  %v2_cc6c = load i32, i32* %ip.global-to-local, align 4
  %v3_cc6c = add i32 %v2_cc6c, 2
  %v4_cc6c = inttoptr i32 %v3_cc6c to i8*
  store i8 %v1_cc6c, i8* %v4_cc6c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cc74 = load i32, i32* @r5, align 4
  store i32 %v0_cc74, i32* %r1.global-to-local, align 4
  %v0_cc78 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_cc78, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_cc84 = load i32, i32* %ip.global-to-local, align 4
  %v6_cc8c = inttoptr i32 %v0_cc74 to i32*
  %v7_cc8c = call i32 @function_13258(i32 %v0_cc78, i32* %v6_cc8c, i32 60, i32 16384, i32 %v0_cc84, i32 16)
  %v3_cc90 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc90, i32* %r3.global-to-local, align 4
  %v1_cc94 = add i32 %v3_cc90, 1
  store i32 %v1_cc94, i32* %r0.global-to-local, align 4
  %v0_cc98 = load i32, i32* %fp.global-to-local, align 4
  %v9_cc98 = icmp eq i32 %v0_cc98, %v1_cc94
  store i1 %v9_cc98, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cc94, i32* %stack_var_-40, align 4
  %v7_cca0 = icmp sgt i32 %v0_cc98, %v1_cc94
  br i1 %v7_cca0, label %dec_label_pc_cca4, label %dec_label_pc_cdd8

dec_label_pc_cca4:                                ; preds = %dec_label_pc_cc04, %dec_label_pc_cb9c
  %v1_ccb4 = phi i32 [ %v1_cc94, %dec_label_pc_cc04 ], [ 0, %dec_label_pc_cb9c ]
  %v5_cca8 = mul i32 %v1_ccb4, 24
  %v1_ccac = load i32, i32* @r8, align 4
  %v2_ccac = add i32 %v1_ccac, %v5_cca8
  store i32 %v2_ccac, i32* %r3.global-to-local, align 4
  %v1_ccb0 = add i32 %v2_ccac, 20
  %v2_ccb0 = inttoptr i32 %v1_ccb0 to i8*
  %v3_ccb0 = load i8, i8* %v2_ccb0, align 1
  %v4_ccb0 = zext i8 %v3_ccb0 to i32
  store i32 %v4_ccb0, i32* %r2.global-to-local, align 4
  %v0_ccb4 = load i32, i32* %sb.global-to-local, align 4
  %v4_ccb4 = mul i32 %v1_ccb4, 4
  %v5_ccb4 = add i32 %v0_ccb4, %v4_ccb4
  %v6_ccb4 = inttoptr i32 %v5_ccb4 to i32*
  %v7_ccb4 = load i32, i32* %v6_ccb4, align 4
  store i32 %v7_ccb4, i32* @r5, align 4
  %v2_ccb8 = icmp ugt i8 %v3_ccb0, 30
  %v7_ccb8 = icmp eq i8 %v3_ccb0, 31
  store i1 %v7_ccb8, i1* %cpsr_z.global-to-local, align 1
  %v1_ccbc = add i32 %v7_ccb4, 20
  store i32 %v1_ccbc, i32* @r6, align 4
  %v2_ccc0 = xor i1 %v7_ccb8, true
  %v3_ccc0 = and i1 %v2_ccb8, %v2_ccc0
  br i1 %v3_ccc0, label %dec_label_pc_cba8, label %dec_label_pc_ccc4

dec_label_pc_ccc4:                                ; preds = %dec_label_pc_cca4
  %v1_ccc4 = add i32 %v2_ccac, 16
  %v2_ccc4 = inttoptr i32 %v1_ccc4 to i32*
  %v3_ccc4 = load i32, i32* %v2_ccc4, align 4
  store i32 %v3_ccc4, i32* %r4.global-to-local, align 4
  %v0_ccc8 = call i32 @function_f8c0()
  store i32 %v0_ccc8, i32* %r0.global-to-local, align 4
  %v3_cccc = load i32, i32* %stack_var_-40, align 4
  %v5_ccd4 = mul i32 %v3_cccc, 24
  %v0_ccd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_ccdc = load i32, i32* @r8, align 4
  %v2_ccdc = add i32 %v1_ccdc, %v5_ccd4
  store i32 %v2_ccdc, i32* %r1.global-to-local, align 4
  %v1_cce0 = and i32 %v0_ccd8, 65280
  store i32 %v1_cce0, i32* %r3.global-to-local, align 4
  %v1_ccd8 = udiv i32 %v0_ccd8, 256
  %v3_cce4 = and i32 %v1_ccd8, 65280
  store i32 %v3_cce4, i32* %r2.global-to-local, align 4
  %v3_cce8 = mul i32 %v0_ccd8, 16777216
  store i32 %v3_cce8, i32* %ip.global-to-local, align 4
  %v1_ccec = add i32 %v2_ccdc, 20
  %v2_ccec = inttoptr i32 %v1_ccec to i8*
  %v3_ccec = load i8, i8* %v2_ccec, align 1
  %v4_ccec = zext i8 %v3_ccec to i32
  %v4_ccf0 = mul nuw nsw i32 %v1_cce0, 256
  %v5_ccf0 = or i32 %v4_ccf0, %v3_cce8
  store i32 %v5_ccf0, i32* %ip.global-to-local, align 4
  %v2_ccf8 = call i32 @llvm.bswap.i32(i32 %v0_ccd8)
  %v7_ccfc = lshr i32 %v0_ccc8, %v4_ccec
  %v8_ccfc = add i32 %v7_ccfc, %v2_ccf8
  store i32 %v8_ccfc, i32* %r2.global-to-local, align 4
  %v3_cd08 = mul i32 %v8_ccfc, 16777216
  %v1_cd00 = mul i32 %v8_ccfc, 256
  %v4_cd0c = and i32 %v1_cd00, 16711680
  %v5_cd0c = or i32 %v4_cd0c, %v3_cd08
  store i32 %v5_cd0c, i32* %r1.global-to-local, align 4
  store i32 %v6_c848, i32* %r0.global-to-local, align 4
  %v2_cd1c = call i32 @llvm.bswap.i32(i32 %v8_ccfc)
  store i32 %v2_cd1c, i32* %r3.global-to-local, align 4
  store i1 %v7_cbac, i1* %cpsr_z.global-to-local, align 1
  %v1_cd24 = load i32, i32* @r5, align 4
  %v2_cd24 = add i32 %v1_cd24, 16
  %v3_cd24 = inttoptr i32 %v2_cd24 to i32*
  store i32 %v2_cd1c, i32* %v3_cd24, align 4
  br i1 %v2_cbac, label %dec_label_pc_cd2c, label %dec_label_pc_cbb4

dec_label_pc_cd2c:                                ; preds = %dec_label_pc_ccc4, %dec_label_pc_cba8
  %v0_cd2c = call i32 @function_f8c0()
  store i32 %v0_cd2c, i32* %r0.global-to-local, align 4
  store i32 %v3_c8bc, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cd3c, i1* %cpsr_z.global-to-local, align 1
  %v1_cd40 = load i32, i32* @r5, align 4
  %v2_cd40 = add i32 %v1_cd40, 12
  %v3_cd40 = inttoptr i32 %v2_cd40 to i32*
  store i32 %v0_cd2c, i32* %v3_cd40, align 4
  br i1 %v3_cd3c, label %dec_label_pc_cd48, label %dec_label_pc_cd2c.dec_label_pc_cbc8_crit_edge

dec_label_pc_cd2c.dec_label_pc_cbc8_crit_edge:    ; preds = %dec_label_pc_cd2c
  %v1_cbcc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbc8

dec_label_pc_cd48:                                ; preds = %dec_label_pc_cd2c, %dec_label_pc_cbb4
  %v0_cd48 = call i32 @function_f8c0()
  %v1_cd48 = trunc i32 %v0_cd48 to i8
  store i32 %v0_cd48, i32* %r0.global-to-local, align 4
  %v4_cd4c24 = udiv i32 %v0_cd48, 256
  %v1_cd50 = trunc i32 %v4_cd4c24 to i8
  %v2_cd50 = load i32, i32* @r5, align 4
  %v3_cd50 = add i32 %v2_cd50, 5
  %v4_cd50 = inttoptr i32 %v3_cd50 to i8*
  store i8 %v1_cd50, i8* %v4_cd50, align 1
  store i32 %v3_c8c0, i32* %r3.global-to-local, align 4
  %v1_cd58 = load i32, i32* @r4, align 4
  %v9_cd58 = icmp eq i32 %v3_c8c0, %v1_cd58
  store i1 %v9_cd58, i1* %cpsr_z.global-to-local, align 1
  %v3_cd5c = load i32, i32* @r5, align 4
  %v4_cd5c = add i32 %v3_cd5c, 4
  %v5_cd5c = inttoptr i32 %v4_cd5c to i8*
  store i8 %v1_cd48, i8* %v5_cd5c, align 1
  %v0_cd60 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd60, label %dec_label_pc_cd64, label %dec_label_pc_cd48.dec_label_pc_cbd4_crit_edge

dec_label_pc_cd48.dec_label_pc_cbd4_crit_edge:    ; preds = %dec_label_pc_cd48
  %v1_cbd8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbd4

dec_label_pc_cd64:                                ; preds = %dec_label_pc_cd48, %dec_label_pc_cbc8
  %v0_cd64 = call i32 @function_f8c0()
  %v1_cd64 = trunc i32 %v0_cd64 to i8
  store i32 %v0_cd64, i32* %r0.global-to-local, align 4
  store i32 %v3_c8c4, i32* %ip.global-to-local, align 4
  %v4_cd6c = sdiv i32 %v0_cd64, 256
  store i32 %v4_cd6c, i32* %r3.global-to-local, align 4
  %v1_cd70 = load i32, i32* @r4, align 4
  %v9_cd70 = icmp eq i32 %v3_c8c4, %v1_cd70
  store i1 %v9_cd70, i1* %cpsr_z.global-to-local, align 1
  %v3_cd74 = load i32, i32* @r5, align 4
  %v4_cd74 = add i32 %v3_cd74, 20
  %v5_cd74 = inttoptr i32 %v4_cd74 to i8*
  store i8 %v1_cd64, i8* %v5_cd74, align 1
  %v0_cd78 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd78 = trunc i32 %v0_cd78 to i8
  %v2_cd78 = load i32, i32* @r6, align 4
  %v3_cd78 = add i32 %v2_cd78, 1
  %v4_cd78 = inttoptr i32 %v3_cd78 to i8*
  store i8 %v1_cd78, i8* %v4_cd78, align 1
  %v0_cd7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd7c, label %dec_label_pc_cd80, label %dec_label_pc_cd64.dec_label_pc_cbe0_crit_edge

dec_label_pc_cd64.dec_label_pc_cbe0_crit_edge:    ; preds = %dec_label_pc_cd64
  %v1_cbe4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbe0

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd64, %dec_label_pc_cbd4
  %v0_cd80 = call i32 @function_f8c0()
  %v1_cd80 = trunc i32 %v0_cd80 to i8
  %v4_cd84 = sdiv i32 %v0_cd80, 256
  store i32 %v4_cd84, i32* %r3.global-to-local, align 4
  %v3_cd88 = load i32, i32* @r6, align 4
  %v4_cd88 = add i32 %v3_cd88, 2
  %v5_cd88 = inttoptr i32 %v4_cd88 to i8*
  store i8 %v1_cd80, i8* %v5_cd88, align 1
  store i32 %v6_c784, i32* %r0.global-to-local, align 4
  %v1_cd90 = load i32, i32* @r4, align 4
  %v9_cd90 = icmp eq i32 %v6_c784, %v1_cd90
  store i1 %v9_cd90, i1* %cpsr_z.global-to-local, align 1
  %v0_cd94 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd94 = trunc i32 %v0_cd94 to i8
  %v2_cd94 = load i32, i32* @r6, align 4
  %v3_cd94 = add i32 %v2_cd94, 3
  %v4_cd94 = inttoptr i32 %v3_cd94 to i8*
  store i8 %v1_cd94, i8* %v4_cd94, align 1
  %v0_cd98 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd98, label %dec_label_pc_cd9c, label %dec_label_pc_cd80.dec_label_pc_cbec_crit_edge

dec_label_pc_cd80.dec_label_pc_cbec_crit_edge:    ; preds = %dec_label_pc_cd80
  %v1_cbf0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbec

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_cd80, %dec_label_pc_cbe0
  %v0_cd9c = call i32 @function_f8c0()
  store i32 %v0_cd9c, i32* %r0.global-to-local, align 4
  store i32 %v6_c79c, i32* %r2.global-to-local, align 4
  %v1_cda4 = load i32, i32* @r4, align 4
  %v9_cda4 = icmp eq i32 %v6_c79c, %v1_cda4
  store i1 %v9_cda4, i1* %cpsr_z.global-to-local, align 1
  %v1_cda8 = load i32, i32* @r6, align 4
  %v2_cda8 = add i32 %v1_cda8, 4
  %v3_cda8 = inttoptr i32 %v2_cda8 to i32*
  store i32 %v0_cd9c, i32* %v3_cda8, align 4
  br i1 %v9_cda4, label %dec_label_pc_cdb0, label %dec_label_pc_cbf8

dec_label_pc_cdb0:                                ; preds = %dec_label_pc_cd9c, %dec_label_pc_cbec
  %v0_cdb0 = call i32 @function_f8c0()
  store i32 %v0_cdb0, i32* %r0.global-to-local, align 4
  store i32 %v1_c8c8, i32* %r3.global-to-local, align 4
  store i1 %v2_cdb8, i1* %cpsr_z.global-to-local, align 1
  %v1_cdbc = load i32, i32* @r6, align 4
  %v2_cdbc = add i32 %v1_cdbc, 8
  %v3_cdbc = inttoptr i32 %v2_cdbc to i32*
  store i32 %v0_cdb0, i32* %v3_cdbc, align 4
  br i1 %v2_cdb8, label %dec_label_pc_cc04, label %dec_label_pc_cdc4

dec_label_pc_cdc4:                                ; preds = %dec_label_pc_cbf8, %dec_label_pc_cdb0
  %v0_cdc4 = call i32 @function_f8c0()
  %v1_cdc4 = trunc i32 %v0_cdc4 to i8
  store i32 %v0_cdc4, i32* %r0.global-to-local, align 4
  %v4_cdc8 = sdiv i32 %v0_cdc4, 256
  store i32 %v4_cdc8, i32* %r3.global-to-local, align 4
  %v1_cdcc = trunc i32 %v4_cdc8 to i8
  %v2_cdcc = load i32, i32* @r6, align 4
  %v3_cdcc = add i32 %v2_cdcc, 19
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  %v3_cdd0 = load i32, i32* @r6, align 4
  %v4_cdd0 = add i32 %v3_cdd0, 18
  %v5_cdd0 = inttoptr i32 %v4_cdd0 to i8*
  store i8 %v1_cdc4, i8* %v5_cdd0, align 1
  br label %dec_label_pc_cc04

dec_label_pc_cdd8:                                ; preds = %dec_label_pc_cc04, %dec_label_pc_cb8c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_cddc = call i32 @function_12ca8(i32* null)
  store i32 %v2_cddc, i32* %r0.global-to-local, align 4
  store i32 %v2_c858, i32* %ip.global-to-local, align 4
  %v9_cde4 = icmp eq i32 %v2_c858, %v2_cddc
  store i1 %v9_cde4, i1* %cpsr_z.global-to-local, align 1
  %v6_cde8 = icmp slt i32 %v2_c858, %v2_cddc
  br i1 %v6_cde8, label %dec_label_pc_cdec, label %dec_label_pc_cdd8.dec_label_pc_cb8c_crit_edge

dec_label_pc_cdd8.dec_label_pc_cb8c_crit_edge:    ; preds = %dec_label_pc_cdd8
  %v0_cb90.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_cb8c

dec_label_pc_cdec:                                ; preds = %dec_label_pc_cdd8, %dec_label_pc_c688, %dec_label_pc_cdf4
  %v29_cdf0 = phi i32 [ %v3_c86c, %dec_label_pc_c688 ], [ %v1_cdf8, %dec_label_pc_cdf4 ], [ %v2_cddc, %dec_label_pc_cdd8 ]
  store i32 %v3_c688, i32* %r4.global-to-local, align 4
  store i32 %v12_c688, i32* %r7.global-to-local, align 4
  ret i32 %v29_cdf0

dec_label_pc_cdf4:                                ; preds = %dec_label_pc_c87c
  %v0_cdf4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_cdf4, i32* %r0.global-to-local, align 4
  %v1_cdf8 = call i32 @function_129d8(i32 %v0_cdf4)
  store i32 %v1_cdf8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cdec

; uselistorder directives
  uselistorder i32 %v1_cdf8, { 1, 0 }
  uselistorder i32 %v4_cdc8, { 1, 0 }
  uselistorder i32 %v0_cdc4, { 0, 2, 1 }
  uselistorder i32 %v0_cd64, { 0, 2, 1 }
  uselistorder i32 %v0_cd48, { 0, 2, 1 }
  uselistorder i32 %v2_cd1c, { 1, 0 }
  uselistorder i32 %v8_ccfc, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cce8, { 1, 0 }
  uselistorder i32 %v0_ccd8, { 2, 0, 1, 3 }
  uselistorder i32 %v1_cc94, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_cc3c, { 0, 2, 1 }
  uselistorder i32 %v0_cc24, { 1, 0, 2 }
  uselistorder i1 %v2_cdb8, { 2, 3, 1, 0 }
  uselistorder i1 %v3_cd3c, { 1, 0, 2, 3 }
  uselistorder i1 %v7_cbac, { 2, 1, 0 }
  uselistorder i32 %v1_cb7c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_cb28, { 1, 0 }
  uselistorder i32 %v3_c980, { 1, 0 }
  uselistorder i32 %v1_c978, { 1, 0 }
  uselistorder i32 %v1_c96c, { 1, 0 }
  uselistorder i32 %v1_c968, { 1, 0 }
  uselistorder i32 %v1_c948, { 1, 0 }
  uselistorder i32 %v1_c944, { 1, 0 }
  uselistorder i32 %v1_c938, { 1, 0 }
  uselistorder i32 %v1_c904, { 1, 0 }
  uselistorder i32 %v1_c8f0, { 1, 0 }
  uselistorder i32 %v0_c8d0, { 1, 0, 2 }
  uselistorder i32 %v1_c8c8, { 2, 1, 3, 0 }
  uselistorder i32 %v3_c8c0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v3_c8bc, { 0, 1, 3, 2 }
  uselistorder i1 %v7_c89c, { 1, 0 }
  uselistorder i1 %v7_c870, { 1, 0 }
  uselistorder i32 %v3_c86c, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_c858, { 2, 1, 0 }
  uselistorder i32 %v6_c848, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_c79c, { 3, 2, 1, 0 }
  uselistorder i32 %v6_c784, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c74c, { 1, 0, 3, 2 }
  uselistorder i32 %v1_c734, { 1, 0 }
  uselistorder i32 %v5_c6cc, { 1, 0 }
  uselistorder i32 %v1_c68c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 11, 12 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 20, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 13, 14, 15, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 19, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 43, { 1, 0, 4, 2, 5, 3, 6 }
  uselistorder i32 42, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder label %dec_label_pc_cdec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cdc4, { 1, 0 }
  uselistorder label %dec_label_pc_cc04, { 2, 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ce04(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ce04:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-84 = alloca i8, align 1
  %v1_ce08 = urem i32 %arg2, 256
  store i32 %v1_ce08, i32* @sl, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %v1_ce08, i32* %r0.global-to-local, align 4
  %v1_ce1c = urem i32 %arg4, 256
  store i32 %v1_ce1c, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  %v2_ce28 = call i32 @function_135a8(i32 %v1_ce08, i32 4)
  %v0_ce34 = load i32, i32* @sl, align 4
  store i32 %v0_ce34, i32* %r0.global-to-local, align 4
  %v2_ce38 = call i32 @function_135a8(i32 %v0_ce34, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_ce44 = load i32, i32* @r5, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_ce38, i32* @sb, align 4
  %v0_ce54 = load i32, i32* @r4, align 4
  store i32 %v0_ce54, i32* %r0.global-to-local, align 4
  %v4_ce58 = inttoptr i32 %v0_ce44 to i32*
  %v5_ce58 = call i32 @function_a054(i32 %v0_ce54, i32* %v4_ce58, i32 7, i32 65535)
  %v0_ce5c = load i32, i32* @r5, align 4
  %v0_ce68 = load i32, i32* @r6, align 4
  store i32 %v0_ce68, i32* %r3.global-to-local, align 4
  %v0_ce6c = load i32, i32* @r4, align 4
  store i32 %v0_ce6c, i32* %r0.global-to-local, align 4
  %v3_ce70 = urem i32 %v5_ce58, 65536
  store i32 %v3_ce70, i32* @fp, align 4
  %v4_ce74 = inttoptr i32 %v0_ce5c to i32*
  %v5_ce74 = call i32 @function_a054(i32 %v0_ce6c, i32* %v4_ce74, i32 6, i32 %v0_ce68)
  %v0_ce78 = load i32, i32* @r5, align 4
  %v3_ce7c = mul i32 %v5_ce74, 65536
  store i32 %v3_ce7c, i32* @r8, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_ce88 = load i32, i32* @r4, align 4
  store i32 %v0_ce88, i32* %r0.global-to-local, align 4
  %v4_ce8c = inttoptr i32 %v0_ce78 to i32*
  %v5_ce8c = call i32 @function_a054(i32 %v0_ce88, i32* %v4_ce8c, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v3_ce9c = urem i32 %v5_ce8c, 65536
  %v0_cea0 = load i32, i32* @r5, align 4
  %v0_cea4 = load i32, i32* @r4, align 4
  store i32 %v0_cea4, i32* %r0.global-to-local, align 4
  %v4_ceac = inttoptr i32 %v0_cea0 to i32*
  %v5_ceac = call i32 @function_a054(i32 %v0_cea4, i32* %v4_ceac, i32 1, i32 1)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ceb8 = urem i32 %v5_ceac, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_ced4 = call i32 @function_12ca8(i32* null)
  %v0_ced8 = load i32, i32* @r8, align 4
  %v3_ced8 = udiv i32 %v0_ced8, 65536
  store i32 %v3_ced8, i32* %r3.global-to-local, align 4
  %v1_cedc = load i32, i32* @r6, align 4
  %v9_cedc = icmp eq i32 %v3_ced8, %v1_cedc
  %v1_cee44 = load i32, i32* @r7, align 4
  %v2_cee45 = add i32 %v1_cee44, %v2_ced4
  store i32 %v2_cee45, i32* %r0.global-to-local, align 4
  br i1 %v9_cedc, label %dec_label_pc_d0c0, label %bb

bb:                                               ; preds = %dec_label_pc_ce04
  %v2_cee0 = mul nuw nsw i32 %v3_ced8, 256
  %v4_cee8 = and i32 %v2_cee0, 65280
  store i32 %v4_cee8, i32* %r3.global-to-local, align 4
  %v5_cef0 = udiv i32 %v0_ced8, 16777216
  %v6_cef0 = or i32 %v4_cee8, %v5_cef0
  br label %dec_label_pc_cef8

dec_label_pc_cef8:                                ; preds = %bb, %dec_label_pc_d0c0
  %storemerge = phi i32 [ %v6_cef0, %bb ], [ %v3_d0c8, %dec_label_pc_d0c0 ]
  store i32 %storemerge, i32* @r7, align 4
  %v0_cef8 = load i32, i32* @sl, align 4
  %tmp47 = icmp slt i32 %v0_cef8, 1
  br i1 %tmp47, label %dec_label_pc_d090, label %dec_label_pc_cf00

dec_label_pc_cf00:                                ; preds = %dec_label_pc_cef8
  %v0_cf00 = load i32, i32* @fp, align 4
  %v3_cf00 = udiv i32 %v0_cf00, 256
  %v1_cf04 = mul i32 %v0_cf00, 256
  %v4_cf08 = and i32 %v1_cf04, 65280
  %v5_cf08 = or i32 %v4_cf08, %v3_cf00
  store i32 0, i32* @r8, align 4
  store i32 %arg3, i32* @r5, align 4
  %v5_cf18 = trunc i32 %v3_cf00 to i8
  %v3_cf203 = udiv i32 %v5_cf08, 256
  store i32 %v3_cf203, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_cf2c = trunc i32 %v3_cf203 to i8
  store i8 %v4_cf2c, i8* %stack_var_-84, align 1
  %v3_cfd0 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_cf54

dec_label_pc_cf34:                                ; preds = %dec_label_pc_cfb8
  %v0_cf34 = load i32, i32* @r6, align 4
  %v1_cf34 = load i32, i32* @sb, align 4
  %v2_cf34 = add i32 %v1_cf34, %v0_cf34
  %v3_cf34 = inttoptr i32 %v2_cf34 to i32*
  %v4_cf34 = load i32, i32* %v3_cf34, align 4
  store i32 %v4_cf34, i32* %r0.global-to-local, align 4
  %v3_cf40 = inttoptr i32 %v0_cfd4 to %sockaddr*
  %v4_cf40 = call i32 @function_13118(i32 %v4_cf34, %sockaddr* %v3_cf40, i32 16)
  store i32 %v4_cf40, i32* %r0.global-to-local, align 4
  %v0_cf44 = load i32, i32* @r8, align 4
  %v1_cf44 = load i32, i32* @sl, align 4
  %v9_cf44 = icmp eq i32 %v0_cf44, %v1_cf44
  %v0_cf48 = load i32, i32* @r6, align 4
  %v1_cf48 = add i32 %v0_cf48, 4
  store i32 %v1_cf48, i32* @r6, align 4
  %v0_cf4c = load i32, i32* @r5, align 4
  %v1_cf4c = add i32 %v0_cf4c, 24
  store i32 %v1_cf4c, i32* @r5, align 4
  br i1 %v9_cf44, label %dec_label_pc_d04c, label %dec_label_pc_cf54

dec_label_pc_cf54:                                ; preds = %dec_label_pc_cfe0, %dec_label_pc_cf34, %dec_label_pc_cf00
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_cf60 = call i32 @function_135a8(i32 65535, i32 1)
  store i32 %v2_cf60, i32* %r0.global-to-local, align 4
  store i32 %v2_ce28, i32* %r3.global-to-local, align 4
  %v0_cf6c = load i32, i32* @fp, align 4
  %v9_cf6c = icmp eq i32 %v0_cf6c, 65535
  %v1_cf70 = load i32, i32* @r6, align 4
  %v3_cf70 = add i32 %v1_cf70, %v2_ce28
  %v4_cf70 = inttoptr i32 %v3_cf70 to i32*
  store i32 %v2_cf60, i32* %v4_cf70, align 4
  br i1 %v9_cf6c, label %dec_label_pc_d0ac, label %dec_label_pc_cf78

dec_label_pc_cf78:                                ; preds = %dec_label_pc_cf54
  %v2_cf7c = load i8, i8* %stack_var_-84, align 1
  %v3_cf7c = sext i8 %v2_cf7c to i32
  store i32 %v3_cf7c, i32* %r3.global-to-local, align 4
  %v2_cf80 = load i32, i32* @r5, align 4
  %v3_cf80 = add i32 %v2_cf80, 2
  %v4_cf80 = inttoptr i32 %v3_cf80 to i8*
  store i8 %v5_cf18, i8* %v4_cf80, align 1
  %v0_cf84 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf84 = trunc i32 %v0_cf84 to i8
  %v2_cf84 = load i32, i32* @r5, align 4
  %v3_cf84 = add i32 %v2_cf84, 3
  %v4_cf84 = inttoptr i32 %v3_cf84 to i8*
  store i8 %v1_cf84, i8* %v4_cf84, align 1
  br label %dec_label_pc_cf88

dec_label_pc_cf88:                                ; preds = %dec_label_pc_d0ac, %dec_label_pc_cf78
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cf94 = call i32 @function_132bc(i32 2, i32 2, i32 17)
  store i32 %v3_cf94, i32* %r0.global-to-local, align 4
  %v7_cf98 = icmp eq i32 %v3_cf94, -1
  %v0_cf9c = load i32, i32* @r8, align 4
  %v1_cf9c = add i32 %v0_cf9c, 1
  store i32 %v1_cf9c, i32* @r8, align 4
  store i32 0, i32* @lr, align 4
  %v1_cfb0 = load i32, i32* @r6, align 4
  %v2_cfb0 = load i32, i32* @sb, align 4
  %v3_cfb0 = add i32 %v2_cfb0, %v1_cfb0
  %v4_cfb0 = inttoptr i32 %v3_cfb0 to i32*
  store i32 %v3_cf94, i32* %v4_cfb0, align 4
  br i1 %v7_cf98, label %dec_label_pc_d0a4.loopexit, label %dec_label_pc_cfb8

dec_label_pc_cfb8:                                ; preds = %dec_label_pc_cf88
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v0_cfd0 = load i32, i32* %r0.global-to-local, align 4
  %v4_cfd0 = call i32 @function_130ec(i32 %v0_cfd0, %sockaddr* %v3_cfd0, i32 16)
  store i32 %v4_cfd0, i32* %r0.global-to-local, align 4
  %v0_cfd4 = load i32, i32* @r5, align 4
  %v1_cfd4 = add i32 %v0_cfd4, 20
  %v2_cfd4 = inttoptr i32 %v1_cfd4 to i8*
  %v3_cfd4 = load i8, i8* %v2_cfd4, align 1
  %v4_cfd4 = zext i8 %v3_cfd4 to i32
  store i32 %v4_cfd4, i32* %r3.global-to-local, align 4
  %tmp51 = icmp ugt i8 %v3_cfd4, 31
  br i1 %tmp51, label %dec_label_pc_cf34, label %dec_label_pc_cfe0

dec_label_pc_cfe0:                                ; preds = %dec_label_pc_cfb8
  %v1_cfe0 = add i32 %v0_cfd4, 16
  %v2_cfe0 = inttoptr i32 %v1_cfe0 to i32*
  %v3_cfe0 = load i32, i32* %v2_cfe0, align 4
  store i32 %v3_cfe0, i32* @r4, align 4
  %v0_cfe4 = call i32 @function_f8c0()
  store i32 %v0_cfe4, i32* %r0.global-to-local, align 4
  %v0_cfe8 = load i32, i32* @r4, align 4
  %v1_cfec = and i32 %v0_cfe8, 65280
  store i32 %v1_cfec, i32* %r3.global-to-local, align 4
  %v0_cffc = load i32, i32* @r5, align 4
  %v1_cffc = add i32 %v0_cffc, 20
  %v2_cffc = inttoptr i32 %v1_cffc to i8*
  %v3_cffc = load i8, i8* %v2_cffc, align 1
  %v4_cffc = zext i8 %v3_cffc to i32
  %v2_d004 = call i32 @llvm.bswap.i32(i32 %v0_cfe8)
  %v7_d008 = lshr i32 %v0_cfe4, %v4_cffc
  %v8_d008 = add i32 %v7_d008, %v2_d004
  %v1_d010 = and i32 %v8_d008, 65280
  store i32 %v1_d010, i32* %r0.global-to-local, align 4
  %v2_d024 = call i32 @llvm.bswap.i32(i32 %v8_d008)
  store i32 %v2_d024, i32* %r3.global-to-local, align 4
  %v2_d028 = add i32 %v0_cffc, 4
  %v3_d028 = inttoptr i32 %v2_d028 to i32*
  store i32 %v2_d024, i32* %v3_d028, align 4
  %v0_d02c = load i32, i32* @r5, align 4
  %v0_d030 = load i32, i32* @r6, align 4
  %v1_d030 = load i32, i32* @sb, align 4
  %v2_d030 = add i32 %v1_d030, %v0_d030
  %v3_d030 = inttoptr i32 %v2_d030 to i32*
  %v4_d030 = load i32, i32* %v3_d030, align 4
  store i32 %v4_d030, i32* %r0.global-to-local, align 4
  %v3_d038 = inttoptr i32 %v0_d02c to %sockaddr*
  %v4_d038 = call i32 @function_13118(i32 %v4_d030, %sockaddr* %v3_d038, i32 16)
  store i32 %v4_d038, i32* %r0.global-to-local, align 4
  %v0_d03c = load i32, i32* @r8, align 4
  %v1_d03c = load i32, i32* @sl, align 4
  %v9_d03c = icmp eq i32 %v0_d03c, %v1_d03c
  %v0_d040 = load i32, i32* @r6, align 4
  %v1_d040 = add i32 %v0_d040, 4
  store i32 %v1_d040, i32* @r6, align 4
  %v0_d044 = load i32, i32* @r5, align 4
  %v1_d044 = add i32 %v0_d044, 24
  store i32 %v1_d044, i32* @r5, align 4
  br i1 %v9_d03c, label %dec_label_pc_d04c, label %dec_label_pc_cf54

dec_label_pc_d04c:                                ; preds = %dec_label_pc_cfe0, %dec_label_pc_cf34, %dec_label_pc_d090.dec_label_pc_d04c_crit_edge
  %v0_d04c = phi i32 [ %v0_d04c.pre, %dec_label_pc_d090.dec_label_pc_d04c_crit_edge ], [ %v0_d03c, %dec_label_pc_cfe0 ], [ %v0_cf44, %dec_label_pc_cf34 ]
  %tmp48 = icmp slt i32 %v0_d04c, 1
  br i1 %tmp48, label %dec_label_pc_d090, label %dec_label_pc_d054

dec_label_pc_d054:                                ; preds = %dec_label_pc_d04c
  %v2_d058 = icmp eq i32 %v1_ceb8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_d058, label %dec_label_pc_d060, label %dec_label_pc_d0d0

dec_label_pc_d060:                                ; preds = %dec_label_pc_d054
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_d068

dec_label_pc_d068:                                ; preds = %dec_label_pc_d068, %dec_label_pc_d060
  %v0_d074 = phi i32 [ %v1_d074, %dec_label_pc_d068 ], [ 0, %dec_label_pc_d060 ]
  %v0_d06c = phi i32 [ %v1_d088, %dec_label_pc_d068 ], [ 0, %dec_label_pc_d060 ]
  store i32 %v2_ce28, i32* %r3.global-to-local, align 4
  %v1_d06c = load i32, i32* @sb, align 4
  %v2_d06c = add i32 %v1_d06c, %v0_d06c
  %v3_d06c = inttoptr i32 %v2_d06c to i32*
  %v4_d06c = load i32, i32* %v3_d06c, align 4
  store i32 %v4_d06c, i32* %r0.global-to-local, align 4
  %v2_d070 = add i32 %v0_d06c, %v2_ce28
  %v3_d070 = inttoptr i32 %v2_d070 to i32*
  %v4_d070 = load i32, i32* %v3_d070, align 4
  %v1_d074 = add i32 %v0_d074, 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_d080 = inttoptr i32 %v4_d070 to i32*
  %v5_d080 = call i32 @function_1322c(i32 %v4_d06c, i32* %v4_d080, i32 %v3_ce9c, i32 16384)
  store i32 %v5_d080, i32* %r0.global-to-local, align 4
  %v1_d084 = load i32, i32* @sl, align 4
  %v9_d084 = icmp eq i32 %v1_d074, %v1_d084
  %v0_d088 = load i32, i32* @r4, align 4
  %v1_d088 = add i32 %v0_d088, 4
  store i32 %v1_d088, i32* @r4, align 4
  br i1 %v9_d084, label %dec_label_pc_d090, label %dec_label_pc_d068

dec_label_pc_d090:                                ; preds = %dec_label_pc_d0d8, %dec_label_pc_d068, %dec_label_pc_d04c, %dec_label_pc_cef8
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_d094 = call i32 @function_12ca8(i32* null)
  store i32 %v2_d094, i32* %r0.global-to-local, align 4
  store i32 %v2_cee45, i32* %r3.global-to-local, align 4
  %v6_d0a0 = icmp slt i32 %v2_cee45, %v2_d094
  br i1 %v6_d0a0, label %dec_label_pc_d0a4, label %dec_label_pc_d090.dec_label_pc_d04c_crit_edge

dec_label_pc_d090.dec_label_pc_d04c_crit_edge:    ; preds = %dec_label_pc_d090
  %v0_d04c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_d04c

dec_label_pc_d0a4.loopexit:                       ; preds = %dec_label_pc_cf88
  %v29_d0a8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d0a4

dec_label_pc_d0a4:                                ; preds = %dec_label_pc_d0a4.loopexit, %dec_label_pc_d090
  %v29_d0a8 = phi i32 [ %v29_d0a8.pre, %dec_label_pc_d0a4.loopexit ], [ %v2_d094, %dec_label_pc_d090 ]
  ret i32 %v29_d0a8

dec_label_pc_d0ac:                                ; preds = %dec_label_pc_cf54
  %v0_d0ac = call i32 @function_f8c0()
  %v1_d0ac = trunc i32 %v0_d0ac to i8
  store i32 %v0_d0ac, i32* %r0.global-to-local, align 4
  %v4_d0b0 = sdiv i32 %v0_d0ac, 256
  store i32 %v4_d0b0, i32* %r3.global-to-local, align 4
  %v1_d0b4 = trunc i32 %v4_d0b0 to i8
  %v2_d0b4 = load i32, i32* @r5, align 4
  %v3_d0b4 = add i32 %v2_d0b4, 3
  %v4_d0b4 = inttoptr i32 %v3_d0b4 to i8*
  store i8 %v1_d0b4, i8* %v4_d0b4, align 1
  %v3_d0b8 = load i32, i32* @r5, align 4
  %v4_d0b8 = add i32 %v3_d0b8, 2
  %v5_d0b8 = inttoptr i32 %v4_d0b8 to i8*
  store i8 %v1_d0ac, i8* %v5_d0b8, align 1
  br label %dec_label_pc_cf88

dec_label_pc_d0c0:                                ; preds = %dec_label_pc_ce04
  %v0_d0c0 = call i32 @function_f8c0()
  %v3_d0c4 = mul i32 %v0_d0c0, 65536
  store i32 %v3_d0c4, i32* %r0.global-to-local, align 4
  %v3_d0c8 = urem i32 %v0_d0c0, 65536
  br label %dec_label_pc_cef8

dec_label_pc_d0d0:                                ; preds = %dec_label_pc_d054
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_d0d8

dec_label_pc_d0d8:                                ; preds = %dec_label_pc_d0d8, %dec_label_pc_d0d0
  %v0_d0dc = phi i32 [ %v1_d114, %dec_label_pc_d0d8 ], [ 0, %dec_label_pc_d0d0 ]
  %v2_d0dc = add i32 %v0_d0dc, %v2_ce28
  %v3_d0dc = inttoptr i32 %v2_d0dc to i32*
  %v4_d0dc = load i32, i32* %v3_d0dc, align 4
  store i32 %v4_d0dc, i32* @r4, align 4
  store i32 %v4_d0dc, i32* %r0.global-to-local, align 4
  %v2_d0e8 = call i32 @function_f974(i32 %v4_d0dc, i32 %v3_ce9c)
  store i32 %v2_d0e8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_d0f4 = load i32, i32* @r4, align 4
  %v4_d0f4 = add i32 %v2_d0f4, %v3_ce9c
  %v5_d0f4 = inttoptr i32 %v4_d0f4 to i8*
  store i8 0, i8* %v5_d0f4, align 1
  %v0_d0f8 = load i32, i32* @r4, align 4
  %v0_d0fc = load i32, i32* @r6, align 4
  %v1_d0fc = load i32, i32* @sb, align 4
  %v2_d0fc = add i32 %v1_d0fc, %v0_d0fc
  %v3_d0fc = inttoptr i32 %v2_d0fc to i32*
  %v4_d0fc = load i32, i32* %v3_d0fc, align 4
  store i32 %v4_d0fc, i32* %r0.global-to-local, align 4
  %v0_d100 = load i32, i32* @r5, align 4
  %v1_d100 = add i32 %v0_d100, 1
  store i32 %v1_d100, i32* @r5, align 4
  %v0_d108 = load i32, i32* %r3.global-to-local, align 4
  %v1_d108 = add i32 %v0_d108, 16384
  store i32 %v1_d108, i32* %r3.global-to-local, align 4
  %v4_d10c = inttoptr i32 %v0_d0f8 to i32*
  %v5_d10c = call i32 @function_1322c(i32 %v4_d0fc, i32* %v4_d10c, i32 %v3_ce9c, i32 %v1_d108)
  store i32 %v5_d10c, i32* %r0.global-to-local, align 4
  %v0_d110 = load i32, i32* @r5, align 4
  %v1_d110 = load i32, i32* @sl, align 4
  %v9_d110 = icmp eq i32 %v0_d110, %v1_d110
  %v0_d114 = load i32, i32* @r6, align 4
  %v1_d114 = add i32 %v0_d114, 4
  store i32 %v1_d114, i32* @r6, align 4
  br i1 %v9_d110, label %dec_label_pc_d090, label %dec_label_pc_d0d8

; uselistorder directives
  uselistorder i32 %v1_d114, { 1, 0 }
  uselistorder i32 %v0_d0c0, { 1, 0 }
  uselistorder i32 %v4_d0b0, { 1, 0 }
  uselistorder i32 %v0_d0ac, { 0, 2, 1 }
  uselistorder i32 %v1_d088, { 1, 0 }
  uselistorder i32 %v2_d024, { 1, 0 }
  uselistorder i32 %v0_cfd4, { 1, 2, 0 }
  uselistorder i32 %v3_cf94, { 1, 0, 2 }
  uselistorder i32 %v3_ced8, { 0, 2, 1 }
  uselistorder i32 %v3_ce9c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_ce28, { 0, 1, 4, 2, 3 }
  uselistorder i32 %v1_ce08, { 1, 2, 0 }
  uselistorder i8* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 7, 5, 6, 8, 20, 10, 9, 12, 11, 15, 13, 14, 16, 1, 21, 22, 19, 24, 23, 18, 17, 2, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder label %dec_label_pc_d04c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cef8, { 1, 0 }
}

define i32 @function_d120(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d120:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_d120 = load i32, i32* @sb, align 4
  %v21_d120 = load i32, i32* @sl, align 4
  %v1_d124 = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v1_d124, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_d140 = urem i32 %arg4, 256
  store i32 %v1_d140, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_d150 = call i32 @function_135a8(i32 %v1_d124, i32 4)
  %v0_d154 = load i32, i32* @r5, align 4
  store i32 %v0_d154, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d160 = load i32, i32* @r7, align 4
  store i32 %v0_d160, i32* %r3.global-to-local, align 4
  %v0_d164 = load i32, i32* @r4, align 4
  store i32 %v0_d164, i32* %r0.global-to-local, align 4
  %v5_d168 = inttoptr i32 %v0_d154 to i32*
  %v6_d168 = call i32 @function_a054(i32 %v0_d164, i32* %v5_d168, i32 2, i32 %v0_d160)
  %v1_d174 = urem i32 %v6_d168, 256
  store i32 %v1_d174, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d180 = load i32, i32* @r5, align 4
  store i32 %v0_d180, i32* %r1.global-to-local, align 4
  %v0_d184 = load i32, i32* @r4, align 4
  store i32 %v0_d184, i32* %r0.global-to-local, align 4
  %v5_d188 = trunc i32 %v6_d168 to i8
  %v6_d18c = inttoptr i32 %v0_d180 to i32*
  %v7_d18c = call i32 @function_a054(i32 %v0_d184, i32* %v6_d18c, i32 3, i32 65535)
  %v0_d190 = load i32, i32* @r5, align 4
  store i32 %v0_d190, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d1a0 = load i32, i32* @r4, align 4
  store i32 %v0_d1a0, i32* %r0.global-to-local, align 4
  %v5_d1a4 = inttoptr i32 %v0_d190 to i32*
  %v6_d1a4 = call i32 @function_a054(i32 %v0_d1a0, i32* %v5_d1a4, i32 4, i32 64)
  %v1_d1ac = urem i32 %v6_d1a4, 256
  store i32 %v1_d1ac, i32* %ip.global-to-local, align 4
  %v0_d1b0 = load i32, i32* @r5, align 4
  store i32 %v0_d1b0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_d1b8 = load i32, i32* @r7, align 4
  store i32 %v0_d1b8, i32* %r3.global-to-local, align 4
  %v0_d1bc = load i32, i32* @r4, align 4
  store i32 %v0_d1bc, i32* %r0.global-to-local, align 4
  %v5_d1c0 = trunc i32 %v6_d1a4 to i8
  %v6_d1c4 = inttoptr i32 %v0_d1b0 to i32*
  %v7_d1c4 = call i32 @function_a054(i32 %v0_d1bc, i32* %v6_d1c4, i32 5, i32 %v0_d1b8)
  %v1_d1d0 = urem i32 %v7_d1c4, 256
  store i32 %v1_d1d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d1dc = load i32, i32* @r5, align 4
  store i32 %v0_d1dc, i32* %r1.global-to-local, align 4
  %v0_d1e0 = load i32, i32* @r4, align 4
  store i32 %v0_d1e0, i32* %r0.global-to-local, align 4
  %v5_d1e8 = inttoptr i32 %v0_d1dc to i32*
  %v6_d1e8 = call i32 @function_a054(i32 %v0_d1e0, i32* %v5_d1e8, i32 6, i32 65535)
  %v0_d1f4 = load i32, i32* @r5, align 4
  store i32 %v0_d1f4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d200 = load i32, i32* @r4, align 4
  store i32 %v0_d200, i32* %r0.global-to-local, align 4
  %v5_d204 = inttoptr i32 %v0_d1f4 to i32*
  %v6_d204 = call i32 @function_a054(i32 %v0_d200, i32* %v5_d204, i32 7, i32 65535)
  %v0_d208 = load i32, i32* @r5, align 4
  store i32 %v0_d208, i32* %r1.global-to-local, align 4
  %v0_d20c = load i32, i32* @r7, align 4
  store i32 %v0_d20c, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_d204, i32* %sb.global-to-local, align 4
  %v0_d218 = load i32, i32* @r4, align 4
  store i32 %v0_d218, i32* %r0.global-to-local, align 4
  %v4_d21c = inttoptr i32 %v0_d208 to i32*
  %v5_d21c = call i32 @function_a054(i32 %v0_d218, i32* %v4_d21c, i32 %v0_d20c, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d228 = load i32, i32* @r5, align 4
  store i32 %v0_d228, i32* %r1.global-to-local, align 4
  store i32 %v5_d21c, i32* @sl, align 4
  %v0_d230 = load i32, i32* @r4, align 4
  store i32 %v0_d230, i32* %r0.global-to-local, align 4
  %v4_d234 = inttoptr i32 %v0_d228 to i32*
  %v5_d234 = call i32 @function_a054(i32 %v0_d230, i32* %v4_d234, i32 1, i32 1)
  %v2_d240 = load i32, i32* @global_var_1dd2c.82, align 4
  store i32 %v2_d240, i32* %r3.global-to-local, align 4
  %v1_d244 = urem i32 %v5_d234, 256
  store i32 %v1_d244, i32* %ip.global-to-local, align 4
  %v0_d248 = load i32, i32* @r5, align 4
  store i32 %v0_d248, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_d250 = load i32, i32* @r4, align 4
  store i32 %v0_d250, i32* %r0.global-to-local, align 4
  %v5_d258 = inttoptr i32 %v0_d248 to i32*
  %v6_d258 = call i32 @function_a054(i32 %v0_d250, i32* %v5_d258, i32 24, i32 %v2_d240)
  store i32 %v6_d258, i32* @fp, align 4
  %v0_d260 = load i32, i32* @r7, align 4
  store i32 %v0_d260, i32* %r0.global-to-local, align 4
  %v1_d264 = inttoptr i32 %v0_d260 to i32*
  %v2_d264 = call i32 @function_12ca8(i32* %v1_d264)
  %v1_d268 = load i32, i32* @r6, align 4
  %v2_d268 = add i32 %v1_d268, %v2_d264
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d27c = call i32 @function_132bc(i32 2, i32 3, i32 17)
  store i32 %v3_d27c, i32* %r0.global-to-local, align 4
  %v7_d280 = icmp eq i32 %v3_d27c, -1
  store i1 %v7_d280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d280, label %dec_label_pc_d6a8, label %dec_label_pc_d28c

dec_label_pc_d28c:                                ; preds = %dec_label_pc_d120
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d294 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d294, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_d29c = load i32, i32* @r7, align 4
  store i32 %v0_d29c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d2a8 = call i32 @function_1328c(i32 %v3_d27c, i32 %v0_d29c, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_d2a8, i32* %r0.global-to-local, align 4
  %v7_d2ac = icmp eq i32 %v6_d2a8, -1
  store i1 %v7_d2ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d2ac, label %dec_label_pc_d6b0, label %dec_label_pc_d2b4

dec_label_pc_d2b4:                                ; preds = %dec_label_pc_d28c
  %v0_d2b4 = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_d2c0 = urem i32 %v0_d2b4, 65536
  store i32 %v3_d2c0, i32* %r2.global-to-local, align 4
  %v3_d2c4 = icmp ugt i32 %v3_d2c0, 1459
  %v9_d2c4 = icmp eq i32 %v3_d2c0, 1460
  store i1 %v9_d2c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d2c4, label %bb, label %bb56

bb:                                               ; preds = %dec_label_pc_d2b4
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_d2b4, %bb
  %v0_d2cc = phi i32 [ %v3_d2c0, %dec_label_pc_d2b4 ], [ 1460, %bb ]
  store i32 %v7_d18c, i32* %r1.global-to-local, align 4
  store i32 %v6_d1e8, i32* %r2.global-to-local, align 4
  store i32 %v1_d124, i32* %r3.global-to-local, align 4
  %v0_d2dc = load i32, i32* %sb.global-to-local, align 4
  %v3_d2e0 = mul i32 %v7_d18c, 65536
  store i32 %v3_d2e0, i32* %r0.global-to-local, align 4
  %v3_d2e4 = mul i32 %v6_d1e8, 65536
  store i32 %v3_d2e4, i32* %sl.global-to-local, align 4
  %v3_d2e8 = urem i32 %v7_d18c, 65536
  store i32 %v3_d2e8, i32* @r4, align 4
  %v3_d2ec = urem i32 %v6_d1e8, 65536
  store i32 %v3_d2ec, i32* %sb.global-to-local, align 4
  %v3_d2f0 = urem i32 %v0_d2dc, 65536
  store i32 %v3_d2f0, i32* %ip.global-to-local, align 4
  %v2_d2f4 = icmp eq i32 %v1_d124, 0
  store i1 %v2_d2f4, i1* %cpsr_z.global-to-local, align 1
  %v0_d2f8 = load i32, i32* @r7, align 4
  store i32 %v0_d2f8, i32* %stack_var_-40, align 4
  br i1 %v2_d2f4, label %.dec_label_pc_d468.preheader_crit_edge, label %dec_label_pc_d30c

.dec_label_pc_d468.preheader_crit_edge:           ; preds = %bb56
  %.pre = add nuw nsw i32 %v0_d2cc, 8
  %.pre19 = add nuw nsw i32 %v0_d2cc, 28
  br label %dec_label_pc_d468.preheader

dec_label_pc_d30c:                                ; preds = %bb56
  %v1_d310 = add nuw nsw i32 %v0_d2cc, 28
  %v1_d314 = add nuw nsw i32 %v0_d2cc, 8
  %v1_d318 = urem i32 %v6_d1e8, 256
  %tmp57 = udiv i32 %v7_d18c, 256
  %v3_d324 = urem i32 %tmp57, 256
  %v3_d328 = mul i32 %v1_d314, 65536
  store i32 %v3_d328, i32* @lr, align 4
  %tmp58 = mul nuw nsw i32 %v1_d310, 256
  %v1_d334 = urem i32 %v7_d18c, 256
  %tmp59 = mul nuw nsw i32 %v1_d314, 256
  %v1_d340 = and i32 %tmp58, 65280
  store i32 %v1_d340, i32* %r3.global-to-local, align 4
  %v4_d344 = mul nuw nsw i32 %v1_d334, 256
  %v5_d344 = or i32 %v4_d344, %v3_d324
  store i32 %v5_d344, i32* %r0.global-to-local, align 4
  %v3_d348 = mul nuw nsw i32 %v1_d318, 256
  store i32 %v3_d348, i32* %r1.global-to-local, align 4
  %tmp60 = udiv i32 %v0_d2dc, 256
  %v3_d34c = urem i32 %tmp60, 256
  %v1_d350 = and i32 %tmp59, 65280
  store i32 %v1_d350, i32* %ip.global-to-local, align 4
  %v2_d354 = icmp eq i32 %v1_d1d0, 0
  store i1 %v2_d354, i1* %cpsr_z.global-to-local, align 1
  %tmp61 = udiv i32 %v1_d310, 256
  %v4_d358 = urem i32 %tmp61, 256
  %v5_d358 = or i32 %v4_d358, %v1_d340
  store i32 %v5_d358, i32* %r2.global-to-local, align 4
  %v1_d35c = urem i32 %v0_d2dc, 256
  %v5_d360 = trunc i32 %tmp61 to i8
  %v5_d364 = trunc i32 %tmp57 to i8
  %tmp62 = udiv i32 %v6_d1e8, 256
  %v4_d368 = urem i32 %tmp62, 256
  %v5_d368 = or i32 %v4_d368, %v3_d348
  store i32 %v5_d368, i32* @r5, align 4
  %v4_d36c = mul nuw nsw i32 %v1_d35c, 256
  %v5_d36c = or i32 %v4_d36c, %v3_d34c
  store i32 %v5_d36c, i32* @r6, align 4
  %tmp63 = udiv i32 %v1_d314, 256
  %v4_d370 = urem i32 %tmp63, 256
  %v5_d370 = or i32 %v4_d370, %v1_d350
  store i32 %v5_d370, i32* %sb.global-to-local, align 4
  br i1 %v2_d354, label %dec_label_pc_d378, label %dec_label_pc_d6bc

dec_label_pc_d378:                                ; preds = %dec_label_pc_d30c
  %v3_d37822 = udiv i32 %v1_d340, 256
  store i32 %v3_d37822, i32* %ip.global-to-local, align 4
  store i32 %v1_d334, i32* %r0.global-to-local, align 4
  store i32 %v1_d318, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v1_d35c, i32* %sl.global-to-local, align 4
  %v3_d39823 = udiv i32 %v1_d350, 256
  store i32 %v3_d39823, i32* @r7, align 4
  %v4_d3f0 = sext i8 %v5_d1c0 to i32
  %sext10 = mul i32 %v1_d310, 16777216
  %v4_d420 = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v7_d18c, 16777216
  %v4_d42c = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v6_d1e8, 16777216
  %v4_d430 = sdiv i32 %sext12, 16777216
  %v4_d438 = sext i8 %v5_d364 to i32
  %v4_d414 = sext i8 %v5_d360 to i32
  br label %dec_label_pc_d39c

dec_label_pc_d39c:                                ; preds = %dec_label_pc_d39c, %dec_label_pc_d378
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d3a8 = call i32 @function_135a8(i32 1510, i32 1)
  store i32 %v2_d3a8, i32* %r0.global-to-local, align 4
  store i32 %v2_d150, i32* %r3.global-to-local, align 4
  %v2_d3b4 = load i32, i32* @r4, align 4
  %v5_d3b4 = mul i32 %v2_d3b4, 4
  %v6_d3b4 = add i32 %v5_d3b4, %v2_d150
  %v7_d3b4 = inttoptr i32 %v6_d3b4 to i32*
  store i32 %v2_d3a8, i32* %v7_d3b4, align 4
  %v3_d3b8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3b8, i32* %r2.global-to-local, align 4
  %v0_d3bc = load i32, i32* %r3.global-to-local, align 4
  %v4_d3bc = mul i32 %v3_d3b8, 4
  %v5_d3bc = add i32 %v0_d3bc, %v4_d3bc
  %v6_d3bc = inttoptr i32 %v5_d3bc to i32*
  %v7_d3bc = load i32, i32* %v6_d3bc, align 4
  store i32 %v7_d3bc, i32* %r1.global-to-local, align 4
  %v1_d3c0 = inttoptr i32 %v7_d3bc to i8*
  %v2_d3c0 = load i8, i8* %v1_d3c0, align 1
  %tmp = urem i8 %v2_d3c0, 16
  %v1_d3c4 = zext i8 %tmp to i32
  %v1_d3c8 = or i32 %v1_d3c4, 64
  store i32 %v1_d3c8, i32* %r3.global-to-local, align 4
  %v1_d3cc = trunc i32 %v1_d3c8 to i8
  store i8 %v1_d3cc, i8* %v1_d3c0, align 1
  %v0_d3d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3d0 = inttoptr i32 %v0_d3d0 to i8*
  %v2_d3d0 = load i8, i8* %v1_d3d0, align 1
  %v3_d3d0 = zext i8 %v2_d3d0 to i32
  %v1_d3d4 = and i32 %v3_d3d0, 240
  %v1_d3d8 = or i32 %v1_d3d4, 5
  store i32 %v1_d3d8, i32* %r2.global-to-local, align 4
  %v3_d3e0 = add i32 %v0_d3d0, 9
  %v4_d3e0 = inttoptr i32 %v3_d3e0 to i8*
  store i8 17, i8* %v4_d3e0, align 1
  %v0_d3e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d3e4 = trunc i32 %v0_d3e4 to i8
  %v2_d3e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d3e4 = inttoptr i32 %v2_d3e4 to i8*
  store i8 %v1_d3e4, i8* %v3_d3e4, align 1
  %v2_d3ec = load i32, i32* %r1.global-to-local, align 4
  %v3_d3ec = add i32 %v2_d3ec, 1
  %v4_d3ec = inttoptr i32 %v3_d3ec to i8*
  store i8 %v5_d188, i8* %v4_d3ec, align 1
  store i32 %v4_d3f0, i32* %ip.global-to-local, align 4
  %v2_d3f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d3f4 = add i32 %v2_d3f4, 8
  %v4_d3f4 = inttoptr i32 %v3_d3f4 to i8*
  store i8 %v5_d1c0, i8* %v4_d3f4, align 1
  %v3_d3f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3f8, i32* %r2.global-to-local, align 4
  %v3_d3fc = mul i32 %v3_d3f8, 32
  store i32 %v3_d3fc, i32* %r3.global-to-local, align 4
  %v0_d400 = load i32, i32* @fp, align 4
  %v1_d400 = load i32, i32* %r1.global-to-local, align 4
  %v2_d400 = add i32 %v1_d400, 12
  %v3_d400 = inttoptr i32 %v2_d400 to i32*
  store i32 %v0_d400, i32* %v3_d400, align 4
  %v0_d404 = load i32, i32* %r3.global-to-local, align 4
  %v1_d404 = load i32, i32* %r2.global-to-local, align 4
  %tmp66 = mul i32 %v1_d404, -8
  %v5_d404 = add i32 %v0_d404, %tmp66
  %v1_d408 = load i32, i32* @r8, align 4
  %v2_d408 = add i32 %v5_d404, %v1_d408
  store i32 %v2_d408, i32* %r3.global-to-local, align 4
  %v1_d40c = add i32 %v2_d408, 16
  %v2_d40c = inttoptr i32 %v1_d40c to i32*
  %v3_d40c = load i32, i32* %v2_d40c, align 4
  %v1_d410 = add i32 %v1_d404, 1
  store i32 %v1_d410, i32* @r4, align 4
  store i32 %v4_d414, i32* %ip.global-to-local, align 4
  store i32 %v1_d124, i32* %r2.global-to-local, align 4
  %v1_d41c = load i32, i32* %r1.global-to-local, align 4
  %v2_d41c = add i32 %v1_d41c, 16
  %v3_d41c = inttoptr i32 %v2_d41c to i32*
  store i32 %v3_d40c, i32* %v3_d41c, align 4
  store i32 %v4_d420, i32* %r0.global-to-local, align 4
  %v0_d424 = load i32, i32* %ip.global-to-local, align 4
  %v1_d424 = trunc i32 %v0_d424 to i8
  %v2_d424 = load i32, i32* %r1.global-to-local, align 4
  %v3_d424 = add i32 %v2_d424, 2
  %v4_d424 = inttoptr i32 %v3_d424 to i8*
  store i8 %v1_d424, i8* %v4_d424, align 1
  %v0_d428 = load i32, i32* %r0.global-to-local, align 4
  %v1_d428 = trunc i32 %v0_d428 to i8
  %v2_d428 = load i32, i32* %r1.global-to-local, align 4
  %v3_d428 = add i32 %v2_d428, 3
  %v4_d428 = inttoptr i32 %v3_d428 to i8*
  store i8 %v1_d428, i8* %v4_d428, align 1
  store i32 %v4_d42c, i32* %ip.global-to-local, align 4
  store i32 %v4_d430, i32* %r0.global-to-local, align 4
  %v0_d434 = load i32, i32* @r4, align 4
  %v1_d434 = load i32, i32* %r2.global-to-local, align 4
  %v9_d434 = icmp eq i32 %v0_d434, %v1_d434
  store i1 %v9_d434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_d438, i32* %r2.global-to-local, align 4
  %v0_d43c = load i32, i32* %r1.global-to-local, align 4
  %v1_d43c = add i32 %v0_d43c, 20
  store i32 %v1_d43c, i32* %r3.global-to-local, align 4
  %v3_d440 = add i32 %v0_d43c, 4
  %v4_d440 = inttoptr i32 %v3_d440 to i8*
  store i8 %v5_d364, i8* %v4_d440, align 1
  %v0_d444 = load i32, i32* %ip.global-to-local, align 4
  %v1_d444 = trunc i32 %v0_d444 to i8
  %v2_d444 = load i32, i32* %r1.global-to-local, align 4
  %v3_d444 = add i32 %v2_d444, 5
  %v4_d444 = inttoptr i32 %v3_d444 to i8*
  store i8 %v1_d444, i8* %v4_d444, align 1
  %v0_d448 = load i32, i32* @r5, align 4
  %v1_d448 = trunc i32 %v0_d448 to i8
  %v2_d448 = load i32, i32* %r1.global-to-local, align 4
  %v3_d448 = add i32 %v2_d448, 20
  %v4_d448 = inttoptr i32 %v3_d448 to i8*
  store i8 %v1_d448, i8* %v4_d448, align 1
  %v0_d44c = load i32, i32* @r7, align 4
  %v1_d44c = trunc i32 %v0_d44c to i8
  %v2_d44c = load i32, i32* %r3.global-to-local, align 4
  %v3_d44c = add i32 %v2_d44c, 5
  %v4_d44c = inttoptr i32 %v3_d44c to i8*
  store i8 %v1_d44c, i8* %v4_d44c, align 1
  %v0_d450 = load i32, i32* %r0.global-to-local, align 4
  %v1_d450 = trunc i32 %v0_d450 to i8
  %v2_d450 = load i32, i32* %r3.global-to-local, align 4
  %v3_d450 = add i32 %v2_d450, 1
  %v4_d450 = inttoptr i32 %v3_d450 to i8*
  store i8 %v1_d450, i8* %v4_d450, align 1
  %v0_d454 = load i32, i32* @r6, align 4
  %v1_d454 = trunc i32 %v0_d454 to i8
  %v2_d454 = load i32, i32* %r3.global-to-local, align 4
  %v3_d454 = add i32 %v2_d454, 2
  %v4_d454 = inttoptr i32 %v3_d454 to i8*
  store i8 %v1_d454, i8* %v4_d454, align 1
  %v0_d458 = load i32, i32* %sl.global-to-local, align 4
  %v1_d458 = trunc i32 %v0_d458 to i8
  %v2_d458 = load i32, i32* %r3.global-to-local, align 4
  %v3_d458 = add i32 %v2_d458, 3
  %v4_d458 = inttoptr i32 %v3_d458 to i8*
  store i8 %v1_d458, i8* %v4_d458, align 1
  %v0_d45c = load i32, i32* %sb.global-to-local, align 4
  %v1_d45c = trunc i32 %v0_d45c to i8
  %v2_d45c = load i32, i32* %r3.global-to-local, align 4
  %v3_d45c = add i32 %v2_d45c, 4
  %v4_d45c = inttoptr i32 %v3_d45c to i8*
  store i8 %v1_d45c, i8* %v4_d45c, align 1
  %v0_d460 = load i32, i32* @r4, align 4
  store i32 %v0_d460, i32* %stack_var_-40, align 4
  %v5_d464 = icmp slt i32 %v0_d434, %v1_d434
  br i1 %v5_d464, label %dec_label_pc_d39c, label %dec_label_pc_d468.preheader

dec_label_pc_d468.preheader:                      ; preds = %dec_label_pc_d6e8, %dec_label_pc_d39c, %.dec_label_pc_d468.preheader_crit_edge
  %v1_d48c.pre-phi = phi i32 [ %.pre19, %.dec_label_pc_d468.preheader_crit_edge ], [ %v1_d310, %dec_label_pc_d39c ], [ %v1_d310, %dec_label_pc_d6e8 ]
  %v1_d488.pre-phi = phi i32 [ %.pre, %.dec_label_pc_d468.preheader_crit_edge ], [ %v1_d314, %dec_label_pc_d39c ], [ %v1_d314, %dec_label_pc_d6e8 ]
  %v3_d618 = icmp eq i32 %v3_d2e8, 65535
  %v2_d4cc = icmp eq i32 %v1_d244, 0
  br label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d468.preheader, %dec_label_pc_d694
  store i32 %v1_d124, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_d2f4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_d2f4, label %dec_label_pc_d694, label %dec_label_pc_d47c

dec_label_pc_d47c:                                ; preds = %dec_label_pc_d468
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_d2cc, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  store i32 %v1_d488.pre-phi, i32* @sb, align 4
  store i32 %v1_d48c.pre-phi, i32* @sl, align 4
  br label %dec_label_pc_d580

dec_label_pc_d494:                                ; preds = %dec_label_pc_d580
  %v0_d494 = load i32, i32* @fp, align 4
  %v7_d494 = icmp eq i32 %v0_d494, -1
  store i1 %v7_d494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d494, label %dec_label_pc_d608, label %dec_label_pc_d49c

dec_label_pc_d49c:                                ; preds = %dec_label_pc_d5a4, %dec_label_pc_d494
  store i32 %v3_d2e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d618, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d618, label %dec_label_pc_d624, label %dec_label_pc_d4b0

dec_label_pc_d4b0:                                ; preds = %dec_label_pc_d608.dec_label_pc_d4b0_crit_edge, %dec_label_pc_d49c
  %v1_d4b4 = phi i32 [ %v1_d4b4.pre, %dec_label_pc_d608.dec_label_pc_d4b0_crit_edge ], [ 65535, %dec_label_pc_d49c ]
  store i32 %v3_d2ec, i32* %r0.global-to-local, align 4
  %v9_d4b4 = icmp eq i32 %v3_d2ec, %v1_d4b4
  store i1 %v9_d4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4b4, label %dec_label_pc_d640, label %dec_label_pc_d4bc

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d624.dec_label_pc_d4bc_crit_edge, %dec_label_pc_d4b0
  %v1_d4c0 = phi i32 [ %v1_d4c0.pre, %dec_label_pc_d624.dec_label_pc_d4bc_crit_edge ], [ %v1_d4b4, %dec_label_pc_d4b0 ]
  store i32 %v3_d2f0, i32* %r1.global-to-local, align 4
  %v9_d4c0 = icmp eq i32 %v3_d2f0, %v1_d4c0
  store i1 %v9_d4c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4c0, label %dec_label_pc_d65c, label %dec_label_pc_d4c8

dec_label_pc_d4c8:                                ; preds = %dec_label_pc_d640, %dec_label_pc_d4bc
  store i32 %v1_d244, i32* %r2.global-to-local, align 4
  store i1 %v2_d4cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d4cc, label %dec_label_pc_d4d4, label %dec_label_pc_d678

dec_label_pc_d4d4:                                ; preds = %dec_label_pc_d4c8, %dec_label_pc_d65c, %dec_label_pc_d678
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d4d8 = load i32, i32* @r7, align 4
  %v1_d4d8 = trunc i32 %v0_d4d8 to i8
  %v2_d4d8 = load i32, i32* @r5, align 4
  %v3_d4d8 = add i32 %v2_d4d8, 10
  %v4_d4d8 = inttoptr i32 %v3_d4d8 to i8*
  store i8 %v1_d4d8, i8* %v4_d4d8, align 1
  %v0_d4dc = load i32, i32* @r7, align 4
  %v1_d4dc = trunc i32 %v0_d4dc to i8
  %v2_d4dc = load i32, i32* @r5, align 4
  %v3_d4dc = add i32 %v2_d4dc, 11
  %v4_d4dc = inttoptr i32 %v3_d4dc to i8*
  store i8 %v1_d4dc, i8* %v4_d4dc, align 1
  %v0_d4e0 = load i32, i32* @r5, align 4
  store i32 %v0_d4e0, i32* @r0, align 4
  %v2_d4e4 = call i32 @function_e498(i32 %v0_d4e0, i32 20)
  %v3_d4e4 = trunc i32 %v2_d4e4 to i8
  store i32 %v2_d4e4, i32* %r0.global-to-local, align 4
  %v4_d4e8 = sdiv i32 %v2_d4e4, 256
  store i32 %v4_d4e8, i32* %r3.global-to-local, align 4
  %v1_d4ec = trunc i32 %v4_d4e8 to i8
  %v2_d4ec = load i32, i32* @r5, align 4
  %v3_d4ec = add i32 %v2_d4ec, 11
  %v4_d4ec = inttoptr i32 %v3_d4ec to i8*
  store i8 %v1_d4ec, i8* %v4_d4ec, align 1
  %v3_d4f0 = load i32, i32* @r5, align 4
  %v4_d4f0 = add i32 %v3_d4f0, 10
  %v5_d4f0 = inttoptr i32 %v4_d4f0 to i8*
  store i8 %v3_d4e4, i8* %v5_d4f0, align 1
  %v0_d4f4 = load i32, i32* @r7, align 4
  %v1_d4f4 = trunc i32 %v0_d4f4 to i8
  %v2_d4f4 = load i32, i32* @r6, align 4
  %v3_d4f4 = add i32 %v2_d4f4, 6
  %v4_d4f4 = inttoptr i32 %v3_d4f4 to i8*
  store i8 %v1_d4f4, i8* %v4_d4f4, align 1
  %v0_d4f8 = load i32, i32* @r7, align 4
  %v1_d4f8 = trunc i32 %v0_d4f8 to i8
  %v2_d4f8 = load i32, i32* @r6, align 4
  %v3_d4f8 = add i32 %v2_d4f8, 7
  %v4_d4f8 = inttoptr i32 %v3_d4f8 to i8*
  store i8 %v1_d4f8, i8* %v4_d4f8, align 1
  %v0_d4fc = load i32, i32* @r5, align 4
  %v1_d4fc = add i32 %v0_d4fc, 24
  %v2_d4fc = inttoptr i32 %v1_d4fc to i8*
  %v3_d4fc = load i8, i8* %v2_d4fc, align 1
  %v4_d4fc = zext i8 %v3_d4fc to i32
  store i32 %v4_d4fc, i32* %r3.global-to-local, align 4
  %v1_d500 = add i32 %v0_d4fc, 25
  %v2_d500 = inttoptr i32 %v1_d500 to i8*
  %v3_d500 = load i8, i8* %v2_d500, align 1
  %v4_d500 = zext i8 %v3_d500 to i32
  %v0_d504 = load i32, i32* @r6, align 4
  store i32 %v0_d504, i32* @r1, align 4
  %v4_d508 = mul nuw nsw i32 %v4_d500, 256
  %v5_d508 = or i32 %v4_d508, %v4_d4fc
  store i32 %v5_d508, i32* %r2.global-to-local, align 4
  store i32 %v0_d4fc, i32* %r0.global-to-local, align 4
  %v0_d510 = load i32, i32* @sb, align 4
  store i32 %v0_d510, i32* %r3.global-to-local, align 4
  %v4_d514 = call i32 @function_e4f4(i32 %v0_d4fc, i32 %v0_d504, i32 %v5_d508, i32 %v0_d510)
  %v5_d514 = trunc i32 %v4_d514 to i8
  store i32 %v4_d514, i32* %r0.global-to-local, align 4
  %v4_d51824 = udiv i32 %v4_d514, 256
  %v1_d51c = trunc i32 %v4_d51824 to i8
  %v2_d51c = load i32, i32* @r6, align 4
  %v3_d51c = add i32 %v2_d51c, 7
  %v4_d51c = inttoptr i32 %v3_d51c to i8*
  store i8 %v1_d51c, i8* %v4_d51c, align 1
  %v3_d520 = load i32, i32* @r6, align 4
  %v4_d520 = add i32 %v3_d520, 6
  %v5_d520 = inttoptr i32 %v4_d520 to i8*
  store i8 %v5_d514, i8* %v5_d520, align 1
  %v3_d524 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d524, i32* %r3.global-to-local, align 4
  %v0_d528 = load i32, i32* @r5, align 4
  %v1_d528 = add i32 %v0_d528, 20
  %v2_d528 = inttoptr i32 %v1_d528 to i32*
  %v3_d528 = load i32, i32* %v2_d528, align 4
  %v3_d530 = udiv i32 %v3_d528, 65536
  store i32 %v3_d530, i32* %r2.global-to-local, align 4
  %v5_d534 = mul i32 %v3_d524, 24
  %v1_d538 = load i32, i32* @r8, align 4
  %v2_d538 = add i32 %v1_d538, %v5_d534
  store i32 %v2_d538, i32* %ip.global-to-local, align 4
  %v3_d53c21 = udiv i32 %v3_d528, 16777216
  %v1_d540 = trunc i32 %v3_d53c21 to i8
  %v3_d540 = add i32 %v2_d538, 3
  %v4_d540 = inttoptr i32 %v3_d540 to i8*
  store i8 %v1_d540, i8* %v4_d540, align 1
  %v0_d544 = load i32, i32* %r2.global-to-local, align 4
  %v1_d544 = trunc i32 %v0_d544 to i8
  %v2_d544 = load i32, i32* %ip.global-to-local, align 4
  %v3_d544 = add i32 %v2_d544, 2
  %v4_d544 = inttoptr i32 %v3_d544 to i8*
  store i8 %v1_d544, i8* %v4_d544, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_d550 = load i32, i32* @r5, align 4
  store i32 %v0_d550, i32* %r1.global-to-local, align 4
  store i32 %v3_d27c, i32* %r0.global-to-local, align 4
  %v0_d558 = load i32, i32* @sl, align 4
  store i32 %v0_d558, i32* %r2.global-to-local, align 4
  %v0_d560 = load i32, i32* %ip.global-to-local, align 4
  %v6_d564 = inttoptr i32 %v0_d550 to i32*
  %v7_d564 = call i32 @function_13258(i32 %v3_d27c, i32* %v6_d564, i32 %v0_d558, i32 16384, i32 %v0_d560, i32 16)
  %v3_d568 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d568, i32* %r3.global-to-local, align 4
  store i32 %v1_d124, i32* @r4, align 4
  %v1_d570 = add i32 %v3_d568, 1
  store i32 %v1_d570, i32* %r0.global-to-local, align 4
  %v9_d574 = icmp eq i32 %v1_d570, %v1_d124
  store i1 %v9_d574, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d570, i32* %stack_var_-40, align 4
  %v6_d57c = icmp slt i32 %v1_d570, %v1_d124
  br i1 %v6_d57c, label %dec_label_pc_d580, label %dec_label_pc_d694

dec_label_pc_d580:                                ; preds = %dec_label_pc_d4d4, %dec_label_pc_d47c
  %v1_d594 = phi i32 [ %v1_d570, %dec_label_pc_d4d4 ], [ 0, %dec_label_pc_d47c ]
  %v5_d584 = mul i32 %v1_d594, 24
  %v1_d588 = load i32, i32* @r8, align 4
  %v2_d588 = add i32 %v1_d588, %v5_d584
  store i32 %v2_d588, i32* %r3.global-to-local, align 4
  %v1_d590 = add i32 %v2_d588, 20
  %v2_d590 = inttoptr i32 %v1_d590 to i8*
  %v3_d590 = load i8, i8* %v2_d590, align 1
  %v4_d590 = zext i8 %v3_d590 to i32
  store i32 %v4_d590, i32* %r2.global-to-local, align 4
  %v4_d594 = mul i32 %v1_d594, 4
  %v5_d594 = add i32 %v4_d594, %v2_d150
  %v6_d594 = inttoptr i32 %v5_d594 to i32*
  %v7_d594 = load i32, i32* %v6_d594, align 4
  store i32 %v7_d594, i32* @r5, align 4
  %v2_d598 = icmp ugt i8 %v3_d590, 30
  %v7_d598 = icmp eq i8 %v3_d590, 31
  store i1 %v7_d598, i1* %cpsr_z.global-to-local, align 1
  %v1_d59c = add i32 %v7_d594, 20
  store i32 %v1_d59c, i32* @r6, align 4
  %v2_d5a0 = xor i1 %v7_d598, true
  %v3_d5a0 = and i1 %v2_d598, %v2_d5a0
  br i1 %v3_d5a0, label %dec_label_pc_d494, label %dec_label_pc_d5a4

dec_label_pc_d5a4:                                ; preds = %dec_label_pc_d580
  %v1_d5a4 = add i32 %v2_d588, 16
  %v2_d5a4 = inttoptr i32 %v1_d5a4 to i32*
  %v3_d5a4 = load i32, i32* %v2_d5a4, align 4
  %v0_d5a8 = call i32 @function_f8c0()
  store i32 %v0_d5a8, i32* %r0.global-to-local, align 4
  %v3_d5ac = load i32, i32* %stack_var_-40, align 4
  %v5_d5b4 = mul i32 %v3_d5ac, 24
  %v1_d5bc = load i32, i32* @r8, align 4
  %v2_d5bc = add i32 %v1_d5bc, %v5_d5b4
  store i32 %v2_d5bc, i32* %r1.global-to-local, align 4
  %v1_d5c0 = and i32 %v3_d5a4, 65280
  store i32 %v1_d5c0, i32* %r3.global-to-local, align 4
  %v1_d5b8 = udiv i32 %v3_d5a4, 256
  %v3_d5c4 = and i32 %v1_d5b8, 65280
  store i32 %v3_d5c4, i32* %r2.global-to-local, align 4
  %v3_d5c8 = mul i32 %v3_d5a4, 16777216
  store i32 %v3_d5c8, i32* %ip.global-to-local, align 4
  %v1_d5cc = add i32 %v2_d5bc, 20
  %v2_d5cc = inttoptr i32 %v1_d5cc to i8*
  %v3_d5cc = load i8, i8* %v2_d5cc, align 1
  %v4_d5cc = zext i8 %v3_d5cc to i32
  %v4_d5d0 = mul nuw nsw i32 %v1_d5c0, 256
  %v5_d5d0 = or i32 %v4_d5d0, %v3_d5c8
  store i32 %v5_d5d0, i32* %ip.global-to-local, align 4
  %v2_d5d8 = call i32 @llvm.bswap.i32(i32 %v3_d5a4)
  %v7_d5dc = lshr i32 %v0_d5a8, %v4_d5cc
  %v8_d5dc = add i32 %v7_d5dc, %v2_d5d8
  store i32 %v8_d5dc, i32* %r2.global-to-local, align 4
  %v3_d5e8 = mul i32 %v8_d5dc, 16777216
  %v1_d5ec = and i32 %v8_d5dc, 65280
  store i32 %v1_d5ec, i32* %r0.global-to-local, align 4
  %v4_d5f0 = mul nuw nsw i32 %v1_d5ec, 256
  %v5_d5f0 = or i32 %v4_d5f0, %v3_d5e8
  store i32 %v5_d5f0, i32* %r1.global-to-local, align 4
  %v2_d5f8 = call i32 @llvm.bswap.i32(i32 %v8_d5dc)
  store i32 %v2_d5f8, i32* %r3.global-to-local, align 4
  %v0_d5fc = load i32, i32* @fp, align 4
  %v3_d5fc = icmp eq i32 %v0_d5fc, -1
  %v8_d5fc = icmp eq i32 %v0_d5fc, -1
  store i1 %v8_d5fc, i1* %cpsr_z.global-to-local, align 1
  %v1_d600 = load i32, i32* @r5, align 4
  %v2_d600 = add i32 %v1_d600, 16
  %v3_d600 = inttoptr i32 %v2_d600 to i32*
  store i32 %v2_d5f8, i32* %v3_d600, align 4
  br i1 %v3_d5fc, label %dec_label_pc_d608, label %dec_label_pc_d49c

dec_label_pc_d608:                                ; preds = %dec_label_pc_d5a4, %dec_label_pc_d494
  %v0_d608 = call i32 @function_f8c0()
  store i32 %v0_d608, i32* %r0.global-to-local, align 4
  store i32 %v3_d2e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d618, i1* %cpsr_z.global-to-local, align 1
  %v1_d61c = load i32, i32* @r5, align 4
  %v2_d61c = add i32 %v1_d61c, 12
  %v3_d61c = inttoptr i32 %v2_d61c to i32*
  store i32 %v0_d608, i32* %v3_d61c, align 4
  br i1 %v3_d618, label %dec_label_pc_d624, label %dec_label_pc_d608.dec_label_pc_d4b0_crit_edge

dec_label_pc_d608.dec_label_pc_d4b0_crit_edge:    ; preds = %dec_label_pc_d608
  %v1_d4b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4b0

dec_label_pc_d624:                                ; preds = %dec_label_pc_d608, %dec_label_pc_d49c
  %v0_d624 = call i32 @function_f8c0()
  %v1_d624 = trunc i32 %v0_d624 to i8
  %v4_d628 = sdiv i32 %v0_d624, 256
  store i32 %v4_d628, i32* %r3.global-to-local, align 4
  %v3_d62c = load i32, i32* @r5, align 4
  %v4_d62c = add i32 %v3_d62c, 4
  %v5_d62c = inttoptr i32 %v4_d62c to i8*
  store i8 %v1_d624, i8* %v5_d62c, align 1
  store i32 %v3_d2ec, i32* %r0.global-to-local, align 4
  %v1_d634 = load i32, i32* @r4, align 4
  %v9_d634 = icmp eq i32 %v3_d2ec, %v1_d634
  store i1 %v9_d634, i1* %cpsr_z.global-to-local, align 1
  %v0_d638 = load i32, i32* %r3.global-to-local, align 4
  %v1_d638 = trunc i32 %v0_d638 to i8
  %v2_d638 = load i32, i32* @r5, align 4
  %v3_d638 = add i32 %v2_d638, 5
  %v4_d638 = inttoptr i32 %v3_d638 to i8*
  store i8 %v1_d638, i8* %v4_d638, align 1
  %v0_d63c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d63c, label %dec_label_pc_d640, label %dec_label_pc_d624.dec_label_pc_d4bc_crit_edge

dec_label_pc_d624.dec_label_pc_d4bc_crit_edge:    ; preds = %dec_label_pc_d624
  %v1_d4c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4bc

dec_label_pc_d640:                                ; preds = %dec_label_pc_d624, %dec_label_pc_d4b0
  %v0_d640 = call i32 @function_f8c0()
  %v1_d640 = trunc i32 %v0_d640 to i8
  store i32 %v0_d640, i32* %r0.global-to-local, align 4
  store i32 %v3_d2f0, i32* %r1.global-to-local, align 4
  %v4_d648 = sdiv i32 %v0_d640, 256
  store i32 %v4_d648, i32* %r3.global-to-local, align 4
  %v1_d64c = load i32, i32* @r4, align 4
  %v9_d64c = icmp eq i32 %v3_d2f0, %v1_d64c
  store i1 %v9_d64c, i1* %cpsr_z.global-to-local, align 1
  %v3_d650 = load i32, i32* @r5, align 4
  %v4_d650 = add i32 %v3_d650, 20
  %v5_d650 = inttoptr i32 %v4_d650 to i8*
  store i8 %v1_d640, i8* %v5_d650, align 1
  %v0_d654 = load i32, i32* %r3.global-to-local, align 4
  %v1_d654 = trunc i32 %v0_d654 to i8
  %v2_d654 = load i32, i32* @r6, align 4
  %v3_d654 = add i32 %v2_d654, 1
  %v4_d654 = inttoptr i32 %v3_d654 to i8*
  store i8 %v1_d654, i8* %v4_d654, align 1
  %v0_d658 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d658, label %dec_label_pc_d65c, label %dec_label_pc_d4c8

dec_label_pc_d65c:                                ; preds = %dec_label_pc_d640, %dec_label_pc_d4bc
  %v0_d65c = call i32 @function_f8c0()
  %v1_d65c = trunc i32 %v0_d65c to i8
  store i32 %v0_d65c, i32* %r0.global-to-local, align 4
  store i32 %v1_d244, i32* %r2.global-to-local, align 4
  %v4_d664 = sdiv i32 %v0_d65c, 256
  store i32 %v4_d664, i32* %r3.global-to-local, align 4
  store i1 %v2_d4cc, i1* %cpsr_z.global-to-local, align 1
  %v1_d66c = trunc i32 %v4_d664 to i8
  %v2_d66c = load i32, i32* @r6, align 4
  %v3_d66c = add i32 %v2_d66c, 3
  %v4_d66c = inttoptr i32 %v3_d66c to i8*
  store i8 %v1_d66c, i8* %v4_d66c, align 1
  %v3_d670 = load i32, i32* @r6, align 4
  %v4_d670 = add i32 %v3_d670, 2
  %v5_d670 = inttoptr i32 %v4_d670 to i8*
  store i8 %v1_d65c, i8* %v5_d670, align 1
  %v0_d674 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d674, label %dec_label_pc_d4d4, label %dec_label_pc_d678

dec_label_pc_d678:                                ; preds = %dec_label_pc_d4c8, %dec_label_pc_d65c
  %v0_d678 = load i32, i32* @r5, align 4
  %v1_d678 = add i32 %v0_d678, 28
  store i32 %v1_d678, i32* @r4, align 4
  store i32 %v1_d678, i32* %r0.global-to-local, align 4
  store i32 %v0_d2cc, i32* %r1.global-to-local, align 4
  %v2_d684 = call i32 @function_f974(i32 %v1_d678, i32 %v0_d2cc)
  store i32 %v2_d684, i32* %r0.global-to-local, align 4
  store i32 %v0_d2cc, i32* %r3.global-to-local, align 4
  %v0_d68c = load i32, i32* @r7, align 4
  %v1_d68c = trunc i32 %v0_d68c to i8
  %v2_d68c = load i32, i32* @r4, align 4
  %v4_d68c = add i32 %v2_d68c, %v0_d2cc
  %v5_d68c = inttoptr i32 %v4_d68c to i8*
  store i8 %v1_d68c, i8* %v5_d68c, align 1
  br label %dec_label_pc_d4d4

dec_label_pc_d694:                                ; preds = %dec_label_pc_d4d4, %dec_label_pc_d468
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_d698 = call i32 @function_12ca8(i32* null)
  store i32 %v2_d698, i32* %r0.global-to-local, align 4
  store i32 %v2_d268, i32* %sb.global-to-local, align 4
  %v9_d6a0 = icmp eq i32 %v2_d268, %v2_d698
  store i1 %v9_d6a0, i1* %cpsr_z.global-to-local, align 1
  %v6_d6a4 = icmp slt i32 %v2_d268, %v2_d698
  br i1 %v6_d6a4, label %dec_label_pc_d6a8, label %dec_label_pc_d468

dec_label_pc_d6a8:                                ; preds = %dec_label_pc_d694, %dec_label_pc_d120, %dec_label_pc_d6b0
  %v29_d6ac = phi i32 [ %v3_d27c, %dec_label_pc_d120 ], [ %v1_d6b4, %dec_label_pc_d6b0 ], [ %v2_d698, %dec_label_pc_d694 ]
  store i32 %v18_d120, i32* %sb.global-to-local, align 4
  store i32 %v21_d120, i32* %sl.global-to-local, align 4
  ret i32 %v29_d6ac

dec_label_pc_d6b0:                                ; preds = %dec_label_pc_d28c
  store i32 %v3_d27c, i32* %r0.global-to-local, align 4
  %v1_d6b4 = call i32 @function_129d8(i32 %v3_d27c)
  store i32 %v1_d6b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d6a8

dec_label_pc_d6bc:                                ; preds = %dec_label_pc_d30c
  %v3_d6c0 = sext i8 %v5_d360 to i32
  %v7_d6c0 = sext i8 %v5_d364 to i32
  %v3_d6c4 = sdiv i32 %v3_d6c0, 256
  store i32 %v3_d6c4, i32* %r1.global-to-local, align 4
  %v3_d6c8 = sdiv i32 %v7_d6c0, 256
  store i32 %v3_d6c8, i32* %r2.global-to-local, align 4
  store i32 %v1_d318, i32* %r3.global-to-local, align 4
  store i32 %v0_d2f8, i32* @r4, align 4
  store i32 %v1_d35c, i32* %sl.global-to-local, align 4
  %v3_d6e420 = udiv i32 %v1_d350, 256
  store i32 %v3_d6e420, i32* @r7, align 4
  %v4_d730 = sext i8 %v5_d188 to i32
  %sext9 = mul i32 %v6_d1e8, 16777216
  %v4_d7a0 = sdiv i32 %sext9, 16777216
  %v1_d790 = trunc i32 %v3_d6c4 to i8
  br label %dec_label_pc_d6e8

dec_label_pc_d6e8:                                ; preds = %dec_label_pc_d6e8, %dec_label_pc_d6bc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d6f4 = call i32 @function_135a8(i32 1510, i32 1)
  store i32 %v2_d6f4, i32* %r0.global-to-local, align 4
  store i32 %v2_d150, i32* %ip.global-to-local, align 4
  %v3_d6fc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d6fc, i32* %r2.global-to-local, align 4
  %v2_d700 = load i32, i32* @r4, align 4
  %v5_d700 = mul i32 %v2_d700, 4
  %v6_d700 = add i32 %v5_d700, %v2_d150
  %v7_d700 = inttoptr i32 %v6_d700 to i32*
  store i32 %v2_d6f4, i32* %v7_d700, align 4
  %v0_d704 = load i32, i32* %ip.global-to-local, align 4
  %v1_d704 = load i32, i32* %r2.global-to-local, align 4
  %v4_d704 = mul i32 %v1_d704, 4
  %v5_d704 = add i32 %v4_d704, %v0_d704
  %v6_d704 = inttoptr i32 %v5_d704 to i32*
  %v7_d704 = load i32, i32* %v6_d704, align 4
  store i32 %v7_d704, i32* %r1.global-to-local, align 4
  %v1_d708 = inttoptr i32 %v7_d704 to i8*
  %v2_d708 = load i8, i8* %v1_d708, align 1
  %tmp67 = urem i8 %v2_d708, 16
  %v1_d70c = zext i8 %tmp67 to i32
  %v1_d710 = or i32 %v1_d70c, 64
  store i32 %v1_d710, i32* %r3.global-to-local, align 4
  %v1_d714 = trunc i32 %v1_d710 to i8
  store i8 %v1_d714, i8* %v1_d708, align 1
  %v0_d718 = load i32, i32* %r1.global-to-local, align 4
  %v1_d718 = inttoptr i32 %v0_d718 to i8*
  %v2_d718 = load i8, i8* %v1_d718, align 1
  %v3_d718 = zext i8 %v2_d718 to i32
  %v1_d71c = and i32 %v3_d718, 240
  %v1_d720 = or i32 %v1_d71c, 5
  store i32 %v1_d720, i32* %r2.global-to-local, align 4
  %v3_d728 = add i32 %v0_d718, 9
  %v4_d728 = inttoptr i32 %v3_d728 to i8*
  store i8 17, i8* %v4_d728, align 1
  %v0_d72c = load i32, i32* %r2.global-to-local, align 4
  %v1_d72c = trunc i32 %v0_d72c to i8
  %v2_d72c = load i32, i32* %r1.global-to-local, align 4
  %v3_d72c = inttoptr i32 %v2_d72c to i8*
  store i8 %v1_d72c, i8* %v3_d72c, align 1
  store i32 %v4_d730, i32* %r0.global-to-local, align 4
  %v2_d734 = load i32, i32* %r1.global-to-local, align 4
  %v3_d734 = add i32 %v2_d734, 1
  %v4_d734 = inttoptr i32 %v3_d734 to i8*
  store i8 %v5_d188, i8* %v4_d734, align 1
  %v2_d73c = load i32, i32* %r1.global-to-local, align 4
  %v3_d73c = add i32 %v2_d73c, 8
  %v4_d73c = inttoptr i32 %v3_d73c to i8*
  store i8 %v5_d1c0, i8* %v4_d73c, align 1
  %v3_d740 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d740, i32* %r2.global-to-local, align 4
  %v3_d744 = mul i32 %v3_d740, 32
  store i32 %v3_d744, i32* %r3.global-to-local, align 4
  %v0_d748 = load i32, i32* @fp, align 4
  %v1_d748 = load i32, i32* %r1.global-to-local, align 4
  %v2_d748 = add i32 %v1_d748, 12
  %v3_d748 = inttoptr i32 %v2_d748 to i32*
  store i32 %v0_d748, i32* %v3_d748, align 4
  %v0_d74c = load i32, i32* %r3.global-to-local, align 4
  %v1_d74c = load i32, i32* %r2.global-to-local, align 4
  %tmp68 = mul i32 %v1_d74c, -8
  %v5_d74c = add i32 %v0_d74c, %tmp68
  %v1_d750 = load i32, i32* @r8, align 4
  %v2_d750 = add i32 %v5_d74c, %v1_d750
  store i32 %v2_d750, i32* %r3.global-to-local, align 4
  %v1_d754 = add i32 %v2_d750, 16
  %v2_d754 = inttoptr i32 %v1_d754 to i32*
  %v3_d754 = load i32, i32* %v2_d754, align 4
  store i32 %v1_d124, i32* %r3.global-to-local, align 4
  %v1_d75c = add i32 %v1_d74c, 1
  store i32 %v1_d75c, i32* @r4, align 4
  %v1_d760 = load i32, i32* %r1.global-to-local, align 4
  %v2_d760 = add i32 %v1_d760, 16
  %v3_d760 = inttoptr i32 %v2_d760 to i32*
  store i32 %v3_d754, i32* %v3_d760, align 4
  store i32 %v3_d6c0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_d76c = load i32, i32* @r4, align 4
  %v1_d76c = load i32, i32* %r3.global-to-local, align 4
  %v9_d76c = icmp eq i32 %v0_d76c, %v1_d76c
  store i1 %v9_d76c, i1* %cpsr_z.global-to-local, align 1
  %v2_d774 = load i32, i32* %r1.global-to-local, align 4
  %v3_d774 = add i32 %v2_d774, 6
  %v4_d774 = inttoptr i32 %v3_d774 to i8*
  store i8 64, i8* %v4_d774, align 1
  %v0_d778 = load i32, i32* %r2.global-to-local, align 4
  %v1_d778 = trunc i32 %v0_d778 to i8
  %v2_d778 = load i32, i32* %r1.global-to-local, align 4
  %v3_d778 = add i32 %v2_d778, 7
  %v4_d778 = inttoptr i32 %v3_d778 to i8*
  store i8 %v1_d778, i8* %v4_d778, align 1
  %v0_d77c = load i32, i32* %ip.global-to-local, align 4
  %v1_d77c = trunc i32 %v0_d77c to i8
  %v2_d77c = load i32, i32* %r1.global-to-local, align 4
  %v3_d77c = add i32 %v2_d77c, 2
  %v4_d77c = inttoptr i32 %v3_d77c to i8*
  store i8 %v1_d77c, i8* %v4_d77c, align 1
  store i32 %v3_d6c4, i32* %r2.global-to-local, align 4
  store i32 %v7_d6c0, i32* %r3.global-to-local, align 4
  store i32 %v3_d6c8, i32* %ip.global-to-local, align 4
  %v0_d78c = load i32, i32* %r1.global-to-local, align 4
  %v1_d78c = add i32 %v0_d78c, 20
  store i32 %v1_d78c, i32* %r0.global-to-local, align 4
  %v3_d790 = add i32 %v0_d78c, 3
  %v4_d790 = inttoptr i32 %v3_d790 to i8*
  store i8 %v1_d790, i8* %v4_d790, align 1
  %v0_d794 = load i32, i32* %r3.global-to-local, align 4
  %v1_d794 = trunc i32 %v0_d794 to i8
  %v2_d794 = load i32, i32* %r1.global-to-local, align 4
  %v3_d794 = add i32 %v2_d794, 4
  %v4_d794 = inttoptr i32 %v3_d794 to i8*
  store i8 %v1_d794, i8* %v4_d794, align 1
  %v0_d798 = load i32, i32* %ip.global-to-local, align 4
  %v1_d798 = trunc i32 %v0_d798 to i8
  %v2_d798 = load i32, i32* %r1.global-to-local, align 4
  %v3_d798 = add i32 %v2_d798, 5
  %v4_d798 = inttoptr i32 %v3_d798 to i8*
  store i8 %v1_d798, i8* %v4_d798, align 1
  %v0_d79c = load i32, i32* @r5, align 4
  %v1_d79c = trunc i32 %v0_d79c to i8
  %v2_d79c = load i32, i32* %r1.global-to-local, align 4
  %v3_d79c = add i32 %v2_d79c, 20
  %v4_d79c = inttoptr i32 %v3_d79c to i8*
  store i8 %v1_d79c, i8* %v4_d79c, align 1
  store i32 %v4_d7a0, i32* %r1.global-to-local, align 4
  %v0_d7a4 = load i32, i32* @r7, align 4
  %v1_d7a4 = trunc i32 %v0_d7a4 to i8
  %v2_d7a4 = load i32, i32* %r0.global-to-local, align 4
  %v3_d7a4 = add i32 %v2_d7a4, 5
  %v4_d7a4 = inttoptr i32 %v3_d7a4 to i8*
  store i8 %v1_d7a4, i8* %v4_d7a4, align 1
  %v0_d7a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d7a8 = trunc i32 %v0_d7a8 to i8
  %v2_d7a8 = load i32, i32* %r0.global-to-local, align 4
  %v3_d7a8 = add i32 %v2_d7a8, 1
  %v4_d7a8 = inttoptr i32 %v3_d7a8 to i8*
  store i8 %v1_d7a8, i8* %v4_d7a8, align 1
  %v0_d7ac = load i32, i32* @r6, align 4
  %v1_d7ac = trunc i32 %v0_d7ac to i8
  %v2_d7ac = load i32, i32* %r0.global-to-local, align 4
  %v3_d7ac = add i32 %v2_d7ac, 2
  %v4_d7ac = inttoptr i32 %v3_d7ac to i8*
  store i8 %v1_d7ac, i8* %v4_d7ac, align 1
  %v0_d7b0 = load i32, i32* %sl.global-to-local, align 4
  %v1_d7b0 = trunc i32 %v0_d7b0 to i8
  %v2_d7b0 = load i32, i32* %r0.global-to-local, align 4
  %v3_d7b0 = add i32 %v2_d7b0, 3
  %v4_d7b0 = inttoptr i32 %v3_d7b0 to i8*
  store i8 %v1_d7b0, i8* %v4_d7b0, align 1
  %v0_d7b4 = load i32, i32* %sb.global-to-local, align 4
  %v1_d7b4 = trunc i32 %v0_d7b4 to i8
  %v2_d7b4 = load i32, i32* %r0.global-to-local, align 4
  %v3_d7b4 = add i32 %v2_d7b4, 4
  %v4_d7b4 = inttoptr i32 %v3_d7b4 to i8*
  store i8 %v1_d7b4, i8* %v4_d7b4, align 1
  %v0_d7b8 = load i32, i32* @r4, align 4
  store i32 %v0_d7b8, i32* %stack_var_-40, align 4
  %v5_d7bc = icmp slt i32 %v0_d76c, %v1_d76c
  br i1 %v5_d7bc, label %dec_label_pc_d6e8, label %dec_label_pc_d468.preheader

; uselistorder directives
  uselistorder i32 %v1_d74c, { 1, 0 }
  uselistorder i32 %v3_d6c8, { 1, 0 }
  uselistorder i32 %v3_d6c4, { 2, 1, 0 }
  uselistorder i32 %v7_d6c0, { 1, 0 }
  uselistorder i32 %v3_d6c0, { 1, 0 }
  uselistorder i32 %v1_d6b4, { 1, 0 }
  uselistorder i32 %v4_d664, { 1, 0 }
  uselistorder i32 %v0_d65c, { 0, 2, 1 }
  uselistorder i32 %v0_d640, { 0, 2, 1 }
  uselistorder i32 %v2_d5f8, { 1, 0 }
  uselistorder i32 %v8_d5dc, { 1, 2, 0, 3 }
  uselistorder i32 %v3_d5c8, { 1, 0 }
  uselistorder i32 %v3_d5a4, { 1, 3, 2, 0 }
  uselistorder i32 %v1_d570, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_d514, { 0, 2, 1 }
  uselistorder i32 %v0_d4fc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d4e8, { 1, 0 }
  uselistorder i32 %v2_d4e4, { 0, 2, 1 }
  uselistorder i1 %v7_d494, { 1, 0 }
  uselistorder i1 %v3_d618, { 1, 0, 2, 3 }
  uselistorder i32 %v1_d404, { 1, 0 }
  uselistorder i8 %v5_d364, { 0, 2, 1 }
  uselistorder i8 %v5_d360, { 1, 0 }
  uselistorder i32 %v1_d35c, { 1, 2, 0 }
  uselistorder i32 %v3_d348, { 1, 0 }
  uselistorder i32 %v1_d334, { 1, 0 }
  uselistorder i32 %v1_d318, { 1, 2, 0 }
  uselistorder i32 %v1_d314, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v1_d310, { 3, 4, 0, 2, 1 }
  uselistorder i1 %v2_d2f4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_d2e8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d2dc, { 1, 0, 2 }
  uselistorder i32 %v0_d2cc, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_d2c0, { 3, 1, 2, 0 }
  uselistorder i1 %v7_d2ac, { 1, 0 }
  uselistorder i1 %v7_d280, { 1, 0 }
  uselistorder i32 %v3_d27c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_d268, { 2, 1, 0 }
  uselistorder i32 %v1_d244, { 3, 1, 2, 0 }
  uselistorder i32 %v6_d1e8, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_d1d0, { 1, 0 }
  uselistorder i8 %v5_d1c0, { 0, 2, 1 }
  uselistorder i32 %v6_d1a4, { 1, 0 }
  uselistorder i32 %v7_d18c, { 0, 2, 1, 4, 3, 5 }
  uselistorder i8 %v5_d188, { 1, 0, 2 }
  uselistorder i32 %v6_d168, { 1, 0 }
  uselistorder i32 %v2_d150, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_d124, { 6, 2, 3, 4, 1, 5, 9, 0, 7, 8 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 15, 13, 14 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 51, 50, 53, 52, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 11, 10, 13, 12, 15, 14, 17, 18, 16, 20, 19, 22, 21, 23, 25, 24, 32, 26, 27, 28, 29, 30, 31, 37, 33, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_d6a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d678, { 1, 0 }
  uselistorder label %dec_label_pc_d4d4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d468, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
}

define i32 @function_d7c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d7c8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_d7c8 = load i32, i32* @r4, align 4
  %v12_d7c8 = load i32, i32* @r7, align 4
  %v15_d7c8 = load i32, i32* @r8, align 4
  %v1_d7cc = urem i32 %arg2, 256
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  %v1_d7e8 = urem i32 %arg4, 256
  store i32 %v1_d7e8, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_d7f8 = call i32 @function_135a8(i32 %v1_d7cc, i32 4)
  %v0_d7fc = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d804 = load i32, i32* @r7, align 4
  store i32 %v0_d804, i32* %r3.global-to-local, align 4
  store i32 %v2_d7f8, i32* %fp.global-to-local, align 4
  %v0_d80c = load i32, i32* @r4, align 4
  %v4_d810 = inttoptr i32 %v0_d7fc to i32*
  %v5_d810 = call i32 @function_a054(i32 %v0_d80c, i32* %v4_d810, i32 2, i32 %v0_d804)
  %v1_d81c = urem i32 %v5_d810, 256
  store i32 %v1_d81c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d828 = load i32, i32* @r4, align 4
  %v0_d82c = load i32, i32* @r5, align 4
  %v5_d830 = trunc i32 %v5_d810 to i8
  %v6_d834 = inttoptr i32 %v0_d82c to i32*
  %v7_d834 = call i32 @function_a054(i32 %v0_d828, i32* %v6_d834, i32 3, i32 65535)
  %v0_d838 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_d844 = load i32, i32* @r4, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_d84c = inttoptr i32 %v0_d838 to i32*
  %v6_d84c = call i32 @function_a054(i32 %v0_d844, i32* %v5_d84c, i32 4, i32 64)
  %v1_d854 = urem i32 %v6_d84c, 256
  store i32 %v1_d854, i32* %ip.global-to-local, align 4
  %v0_d858 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_d860 = load i32, i32* @r7, align 4
  store i32 %v0_d860, i32* %r3.global-to-local, align 4
  %v0_d864 = load i32, i32* @r4, align 4
  %v6_d86c = inttoptr i32 %v0_d858 to i32*
  %v7_d86c = call i32 @function_a054(i32 %v0_d864, i32* %v6_d86c, i32 5, i32 %v0_d860)
  %v1_d878 = urem i32 %v7_d86c, 256
  store i32 %v1_d878, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d884 = load i32, i32* @r4, align 4
  %v0_d888 = load i32, i32* @r5, align 4
  %v5_d890 = inttoptr i32 %v0_d888 to i32*
  %v6_d890 = call i32 @function_a054(i32 %v0_d884, i32* %v5_d890, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d8a0 = load i32, i32* @r5, align 4
  store i32 %v6_d890, i32* @r8, align 4
  %v0_d8a8 = load i32, i32* @r4, align 4
  %v4_d8ac = inttoptr i32 %v0_d8a0 to i32*
  %v5_d8ac = call i32 @function_a054(i32 %v0_d8a8, i32* %v4_d8ac, i32 7, i32 27015)
  store i32 %v5_d8ac, i32* @r4, align 4
  %v0_d8b4 = load i32, i32* @r7, align 4
  store i32 %v0_d8b4, i32* %stack_var_-44, align 4
  %v1_d8bc = inttoptr i32 %v0_d8b4 to i32*
  %v2_d8bc = call i32 @function_12ca8(i32* %v1_d8bc)
  %v1_d8c0 = load i32, i32* @r6, align 4
  %v2_d8c0 = add i32 %v1_d8c0, %v2_d8bc
  %v1_d8cc = call i32 @function_11590(i32 36)
  %v3_d8d8 = call i32 @function_114ac(i32 36, i32* nonnull %stack_var_-44)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d8ec = call i32 @function_132bc(i32 2, i32 3, i32 17)
  %v7_d8f0 = icmp eq i32 %v3_d8ec, -1
  store i1 %v7_d8f0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d8ec, i32* %sb.global-to-local, align 4
  br i1 %v7_d8f0, label %dec_label_pc_dcb0, label %dec_label_pc_d8fc

dec_label_pc_d8fc:                                ; preds = %dec_label_pc_d7c8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d904 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d904, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_d90c = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d918 = call i32 @function_1328c(i32 %v3_d8ec, i32 %v0_d90c, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_d91c = icmp eq i32 %v6_d918, -1
  store i1 %v7_d91c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d91c, label %dec_label_pc_dcb8, label %dec_label_pc_d924

dec_label_pc_d924:                                ; preds = %dec_label_pc_d8fc
  store i32 %v1_d7cc, i32* %r2.global-to-local, align 4
  %v0_d930 = load i32, i32* @r4, align 4
  %v3_d930 = mul i32 %v0_d930, 65536
  store i32 %v3_d930, i32* @lr, align 4
  %v0_d934 = load i32, i32* @r8, align 4
  %v3_d934 = mul i32 %v0_d934, 65536
  store i32 %v3_d934, i32* %ip.global-to-local, align 4
  %v3_d938 = urem i32 %v7_d834, 65536
  store i32 %v3_d938, i32* %r3.global-to-local, align 4
  %v3_d93c = urem i32 %v0_d934, 65536
  store i32 %v3_d93c, i32* %r4.global-to-local, align 4
  %v3_d940 = urem i32 %v0_d930, 65536
  %v2_d944 = icmp eq i32 %v1_d7cc, 0
  store i1 %v2_d944, i1* %cpsr_z.global-to-local, align 1
  %v0_d948 = load i32, i32* @r7, align 4
  store i32 %v0_d948, i32* %stack_var_-40, align 4
  br i1 %v2_d944, label %dec_label_pc_dc9c.critedge, label %dec_label_pc_d95c

dec_label_pc_d95c:                                ; preds = %dec_label_pc_d924
  %v1_d960 = urem i32 %v7_d834, 256
  %v1_d964 = urem i32 %v0_d930, 256
  %tmp41 = udiv i32 %v7_d834, 256
  %v3_d96c = urem i32 %tmp41, 256
  %v3_d970 = mul nuw nsw i32 %v1_d964, 256
  store i32 %v3_d970, i32* %r3.global-to-local, align 4
  %v1_d974 = urem i32 %v0_d934, 256
  %v4_d978 = mul nuw nsw i32 %v1_d960, 256
  %v5_d978 = or i32 %v4_d978, %v3_d96c
  store i32 %v5_d978, i32* %r8.global-to-local, align 4
  %tmp42 = udiv i32 %v0_d934, 256
  %v3_d97c = urem i32 %tmp42, 256
  store i32 %v3_d97c, i32* %ip.global-to-local, align 4
  %tmp43 = udiv i32 %v0_d930, 256
  %v4_d980 = urem i32 %tmp43, 256
  %v5_d980 = or i32 %v4_d980, %v3_d970
  store i32 %v5_d980, i32* @r5, align 4
  %v4_d984 = mul nuw nsw i32 %v1_d974, 256
  %v5_d984 = or i32 %v4_d984, %v3_d97c
  store i32 %v5_d984, i32* @r6, align 4
  store i32 %v1_d964, i32* %r2.global-to-local, align 4
  store i32 %v0_d948, i32* @r4, align 4
  store i32 %v1_d974, i32* @r7, align 4
  %sext = mul i32 %v6_d84c, 16777216
  %v4_da00 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v7_d834, 16777216
  %v4_da1c = sdiv i32 %sext5, 16777216
  %sext6 = mul i32 %v0_d930, 16777216
  %v4_da78 = sdiv i32 %sext6, 16777216
  %v2_da04 = icmp eq i32 %v1_d878, 0
  %v1_da08 = trunc i32 %v4_da00 to i8
  br label %dec_label_pc_d9a0

dec_label_pc_d9a0:                                ; preds = %bb47, %dec_label_pc_d95c
  %v2_d9a8 = call i32 @function_135a8(i32 128, i32 1)
  %v3_d9ac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9ac, i32* %r3.global-to-local, align 4
  %v1_d9b0 = load i32, i32* %fp.global-to-local, align 4
  %v2_d9b0 = load i32, i32* @r4, align 4
  %v5_d9b0 = mul i32 %v2_d9b0, 4
  %v6_d9b0 = add i32 %v5_d9b0, %v1_d9b0
  %v7_d9b0 = inttoptr i32 %v6_d9b0 to i32*
  store i32 %v2_d9a8, i32* %v7_d9b0, align 4
  %v0_d9b4 = load i32, i32* %fp.global-to-local, align 4
  %v1_d9b4 = load i32, i32* %r3.global-to-local, align 4
  %v4_d9b4 = mul i32 %v1_d9b4, 4
  %v5_d9b4 = add i32 %v4_d9b4, %v0_d9b4
  %v6_d9b4 = inttoptr i32 %v5_d9b4 to i32*
  %v7_d9b4 = load i32, i32* %v6_d9b4, align 4
  store i32 %v7_d9b4, i32* @lr, align 4
  %v1_d9b8 = inttoptr i32 %v7_d9b4 to i8*
  %v2_d9b8 = load i8, i8* %v1_d9b8, align 1
  %tmp = urem i8 %v2_d9b8, 16
  %v1_d9bc = zext i8 %tmp to i32
  %v1_d9c0 = or i32 %v1_d9bc, 64
  store i32 %v1_d9c0, i32* %r3.global-to-local, align 4
  %v1_d9c8 = trunc i32 %v1_d9c0 to i8
  store i8 %v1_d9c8, i8* %v1_d9b8, align 1
  %v0_d9cc = load i32, i32* @lr, align 4
  %v1_d9cc = inttoptr i32 %v0_d9cc to i8*
  %v2_d9cc = load i8, i8* %v1_d9cc, align 1
  %v1_d9d0 = and i8 %v2_d9cc, -16
  %v1_d9d4 = or i8 %v1_d9d0, 5
  store i8 %v1_d9d4, i8* %v1_d9cc, align 1
  %v2_d9e0 = load i32, i32* @lr, align 4
  %v3_d9e0 = add i32 %v2_d9e0, 1
  %v4_d9e0 = inttoptr i32 %v3_d9e0 to i8*
  store i8 %v5_d830, i8* %v4_d9e0, align 1
  %v3_d9e4 = load i32, i32* %stack_var_-44, align 4
  %v1_d9e8 = add i32 %v3_d9e4, 32
  %tmp44 = mul i32 %v1_d9e8, 256
  store i32 %v1_d878, i32* %r4.global-to-local, align 4
  %v1_d9f8 = and i32 %tmp44, 65280
  %tmp45 = udiv i32 %v1_d9e8, 256
  %v4_d9fc = urem i32 %tmp45, 256
  %v5_d9fc = or i32 %v4_d9fc, %v1_d9f8
  store i32 %v5_d9fc, i32* %r2.global-to-local, align 4
  store i32 %v4_da00, i32* %r3.global-to-local, align 4
  store i1 %v2_da04, i1* %cpsr_z.global-to-local, align 1
  %v2_da08 = load i32, i32* @lr, align 4
  %v3_da08 = add i32 %v2_da08, 8
  %v4_da08 = inttoptr i32 %v3_da08 to i8*
  store i8 %v1_da08, i8* %v4_da08, align 1
  %v0_da0c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da0c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d9a0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_da10 = load i32, i32* @lr, align 4
  %v4_da10 = add i32 %v3_da10, 6
  %v5_da10 = inttoptr i32 %v4_da10 to i8*
  store i8 64, i8* %v5_da10, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d9a0, %bb
  %v0_da18 = load i32, i32* %r2.global-to-local, align 4
  %v3_da18 = sdiv i32 %v0_da18, 256
  store i32 %v3_da18, i32* %ip.global-to-local, align 4
  store i32 %v4_da1c, i32* %r4.global-to-local, align 4
  %v2_da20 = load i32, i32* @lr, align 4
  %v3_da20 = add i32 %v2_da20, 9
  %v4_da20 = inttoptr i32 %v3_da20 to i8*
  store i8 17, i8* %v4_da20, align 1
  store i32 ptrtoint (i32* @global_var_1dd2c.82 to i32), i32* %r3.global-to-local, align 4
  %v0_da28 = load i32, i32* %r2.global-to-local, align 4
  %v1_da28 = trunc i32 %v0_da28 to i8
  %v2_da28 = load i32, i32* @lr, align 4
  %v3_da28 = add i32 %v2_da28, 2
  %v4_da28 = inttoptr i32 %v3_da28 to i8*
  store i8 %v1_da28, i8* %v4_da28, align 1
  %v0_da2c = load i32, i32* %ip.global-to-local, align 4
  %v1_da2c = trunc i32 %v0_da2c to i8
  %v2_da2c = load i32, i32* @lr, align 4
  %v3_da2c = add i32 %v2_da2c, 3
  %v4_da2c = inttoptr i32 %v3_da2c to i8*
  store i8 %v1_da2c, i8* %v4_da2c, align 1
  %v0_da30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da30, label %.thread7, label %bb46

.thread7:                                         ; preds = %.thread
  %v3_da348 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da348, i32* %ip.global-to-local, align 4
  br label %bb47

bb46:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_da34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da34, i32* %ip.global-to-local, align 4
  %v3_da38 = load i32, i32* @lr, align 4
  %v4_da38 = add i32 %v3_da38, 7
  %v5_da38 = inttoptr i32 %v4_da38 to i8*
  store i8 0, i8* %v5_da38, align 1
  %v0_da40.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb47

bb47:                                             ; preds = %.thread7, %bb46
  %v0_da40 = phi i32 [ %v3_da348, %.thread7 ], [ %v0_da40.pre, %bb46 ]
  %v2_da3c = load i32, i32* @global_var_1dd2c.82, align 4
  store i32 %v2_da3c, i32* %r2.global-to-local, align 4
  %v3_da40 = mul i32 %v0_da40, 32
  store i32 %v3_da40, i32* %r3.global-to-local, align 4
  %v1_da44 = load i32, i32* @lr, align 4
  %v2_da44 = add i32 %v1_da44, 12
  %v3_da44 = inttoptr i32 %v2_da44 to i32*
  store i32 %v2_da3c, i32* %v3_da44, align 4
  %v0_da48 = load i32, i32* %r3.global-to-local, align 4
  %v1_da48 = load i32, i32* %ip.global-to-local, align 4
  %tmp52 = mul i32 %v1_da48, -8
  %v5_da48 = add i32 %v0_da48, %tmp52
  %v1_da4c = load i32, i32* @sl, align 4
  %v2_da4c = add i32 %v5_da48, %v1_da4c
  store i32 %v2_da4c, i32* %r3.global-to-local, align 4
  %v1_da50 = add i32 %v2_da4c, 16
  %v2_da50 = inttoptr i32 %v1_da50 to i32*
  %v3_da50 = load i32, i32* %v2_da50, align 4
  %v1_da54 = load i32, i32* @lr, align 4
  %v2_da54 = add i32 %v1_da54, 16
  %v3_da54 = inttoptr i32 %v2_da54 to i32*
  store i32 %v3_da50, i32* %v3_da54, align 4
  %v3_da58 = load i32, i32* %stack_var_-44, align 4
  %v1_da5c = add i32 %v3_da58, 12
  %tmp48 = mul i32 %v1_da5c, 256
  %v1_da6c = and i32 %tmp48, 65280
  %tmp49 = udiv i32 %v1_da5c, 256
  %v4_da70 = urem i32 %tmp49, 256
  %v5_da70 = or i32 %v4_da70, %v1_da6c
  store i32 %v5_da70, i32* %ip.global-to-local, align 4
  %v1_da74 = load i32, i32* @lr, align 4
  %v2_da74 = add i32 %v1_da74, 28
  %v3_da74 = inttoptr i32 %v2_da74 to i32*
  store i32 -1, i32* %v3_da74, align 4
  store i32 %v4_da78, i32* %r2.global-to-local, align 4
  %v0_da7c = load i32, i32* %r4.global-to-local, align 4
  %v1_da7c = trunc i32 %v0_da7c to i8
  %v2_da7c = load i32, i32* @lr, align 4
  %v3_da7c = add i32 %v2_da7c, 5
  %v4_da7c = inttoptr i32 %v3_da7c to i8*
  store i8 %v1_da7c, i8* %v4_da7c, align 1
  %v0_da80 = load i32, i32* %ip.global-to-local, align 4
  %v3_da80 = sdiv i32 %v0_da80, 256
  store i32 %v3_da80, i32* %r3.global-to-local, align 4
  %v0_da84 = load i32, i32* @lr, align 4
  %v1_da84 = add i32 %v0_da84, 20
  store i32 %v1_da84, i32* %r4.global-to-local, align 4
  %v0_da88 = load i32, i32* %r8.global-to-local, align 4
  %v1_da88 = trunc i32 %v0_da88 to i8
  %v3_da88 = add i32 %v0_da84, 4
  %v4_da88 = inttoptr i32 %v3_da88 to i8*
  store i8 %v1_da88, i8* %v4_da88, align 1
  %v0_da8c = load i32, i32* @r6, align 4
  %v1_da8c = trunc i32 %v0_da8c to i8
  %v2_da8c = load i32, i32* @lr, align 4
  %v3_da8c = add i32 %v2_da8c, 20
  %v4_da8c = inttoptr i32 %v3_da8c to i8*
  store i8 %v1_da8c, i8* %v4_da8c, align 1
  %v0_da90 = load i32, i32* %r3.global-to-local, align 4
  %v1_da90 = trunc i32 %v0_da90 to i8
  %v2_da90 = load i32, i32* %r4.global-to-local, align 4
  %v3_da90 = add i32 %v2_da90, 5
  %v4_da90 = inttoptr i32 %v3_da90 to i8*
  store i8 %v1_da90, i8* %v4_da90, align 1
  %v0_da94 = load i32, i32* @r5, align 4
  %v1_da94 = trunc i32 %v0_da94 to i8
  %v2_da94 = load i32, i32* %r4.global-to-local, align 4
  %v3_da94 = add i32 %v2_da94, 2
  %v4_da94 = inttoptr i32 %v3_da94 to i8*
  store i8 %v1_da94, i8* %v4_da94, align 1
  %v0_da98 = load i32, i32* @r7, align 4
  %v1_da98 = trunc i32 %v0_da98 to i8
  %v2_da98 = load i32, i32* %r4.global-to-local, align 4
  %v3_da98 = add i32 %v2_da98, 1
  %v4_da98 = inttoptr i32 %v3_da98 to i8*
  store i8 %v1_da98, i8* %v4_da98, align 1
  %v0_da9c = load i32, i32* @lr, align 4
  %v1_da9c = add i32 %v0_da9c, 32
  %v0_daa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_daa0 = trunc i32 %v0_daa0 to i8
  %v2_daa0 = load i32, i32* %r4.global-to-local, align 4
  %v3_daa0 = add i32 %v2_daa0, 3
  %v4_daa0 = inttoptr i32 %v3_daa0 to i8*
  store i8 %v1_daa0, i8* %v4_daa0, align 1
  %v0_daa4 = load i32, i32* %ip.global-to-local, align 4
  %v1_daa4 = trunc i32 %v0_daa4 to i8
  %v2_daa4 = load i32, i32* %r4.global-to-local, align 4
  %v3_daa4 = add i32 %v2_daa4, 4
  %v4_daa4 = inttoptr i32 %v3_daa4 to i8*
  store i8 %v1_daa4, i8* %v4_daa4, align 1
  %v3_daa8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_daa8, i32* %r2.global-to-local, align 4
  %v3_daac = call i32 @function_120c0(i32 %v1_da9c, i32 %v3_d8d8, i32 %v3_daa8)
  %v3_dab0 = load i32, i32* %stack_var_-40, align 4
  %v1_dab4 = add i32 %v3_dab0, 1
  store i32 %v1_dab4, i32* @r4, align 4
  store i32 %v1_d7cc, i32* %r3.global-to-local, align 4
  %v9_dabc = icmp eq i32 %v1_dab4, %v1_d7cc
  store i1 %v9_dabc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dab4, i32* %stack_var_-40, align 4
  %v5_dac4 = icmp slt i32 %v1_dab4, %v1_d7cc
  br i1 %v5_dac4, label %dec_label_pc_d9a0, label %dec_label_pc_dac8

dec_label_pc_dac8:                                ; preds = %bb47, %dec_label_pc_dc9c
  store i32 %v1_d7cc, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_d944, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_d944, label %dec_label_pc_dc9c, label %dec_label_pc_dadc

dec_label_pc_dadc:                                ; preds = %dec_label_pc_dac8
  store i32 0, i32* %r8.global-to-local, align 4
  %v3_daec = icmp eq i32 %v3_d938, 65535
  br label %dec_label_pc_dbc0

dec_label_pc_dae8:                                ; preds = %dec_label_pc_dbc0
  store i1 %v3_daec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_daec, label %dec_label_pc_dc50, label %dec_label_pc_daf4

dec_label_pc_daf4:                                ; preds = %dec_label_pc_dbe8.dec_label_pc_daf4_crit_edge, %dec_label_pc_dae8
  %v1_daf8 = phi i32 [ %v1_daf8.pre, %dec_label_pc_dbe8.dec_label_pc_daf4_crit_edge ], [ 65535, %dec_label_pc_dae8 ]
  store i32 %v3_d93c, i32* %r2.global-to-local, align 4
  %v9_daf8 = icmp eq i32 %v3_d93c, %v1_daf8
  store i1 %v9_daf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_daf8, label %dec_label_pc_dc6c, label %dec_label_pc_db00

dec_label_pc_db00:                                ; preds = %dec_label_pc_dc50.dec_label_pc_db00_crit_edge, %dec_label_pc_daf4
  %v1_db04 = phi i32 [ %v1_db04.pre, %dec_label_pc_dc50.dec_label_pc_db00_crit_edge ], [ %v1_daf8, %dec_label_pc_daf4 ]
  store i32 %v3_d940, i32* %r3.global-to-local, align 4
  %v9_db04 = icmp eq i32 %v3_d940, %v1_db04
  store i1 %v9_db04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_db04, label %dec_label_pc_dc88, label %dec_label_pc_db0c

dec_label_pc_db0c:                                ; preds = %dec_label_pc_dc6c, %dec_label_pc_db00, %dec_label_pc_dc88
  %v0_db10 = load i32, i32* %r8.global-to-local, align 4
  %v1_db10 = trunc i32 %v0_db10 to i8
  %v2_db10 = load i32, i32* @r5, align 4
  %v3_db10 = add i32 %v2_db10, 10
  %v4_db10 = inttoptr i32 %v3_db10 to i8*
  store i8 %v1_db10, i8* %v4_db10, align 1
  %v0_db14 = load i32, i32* %r8.global-to-local, align 4
  %v1_db14 = trunc i32 %v0_db14 to i8
  %v2_db14 = load i32, i32* @r5, align 4
  %v3_db14 = add i32 %v2_db14, 11
  %v4_db14 = inttoptr i32 %v3_db14 to i8*
  store i8 %v1_db14, i8* %v4_db14, align 1
  %v0_db18 = load i32, i32* @r5, align 4
  store i32 %v0_db18, i32* @r0, align 4
  %v2_db1c = call i32 @function_e498(i32 %v0_db18, i32 20)
  %v3_db1c = trunc i32 %v2_db1c to i8
  %v4_db20 = sdiv i32 %v2_db1c, 256
  store i32 %v4_db20, i32* %r3.global-to-local, align 4
  %v1_db24 = trunc i32 %v4_db20 to i8
  %v2_db24 = load i32, i32* @r5, align 4
  %v3_db24 = add i32 %v2_db24, 11
  %v4_db24 = inttoptr i32 %v3_db24 to i8*
  store i8 %v1_db24, i8* %v4_db24, align 1
  %v3_db28 = load i32, i32* @r5, align 4
  %v4_db28 = add i32 %v3_db28, 10
  %v5_db28 = inttoptr i32 %v4_db28 to i8*
  store i8 %v3_db1c, i8* %v5_db28, align 1
  %v0_db2c = load i32, i32* %r8.global-to-local, align 4
  %v1_db2c = trunc i32 %v0_db2c to i8
  %v2_db2c = load i32, i32* @r6, align 4
  %v3_db2c = add i32 %v2_db2c, 6
  %v4_db2c = inttoptr i32 %v3_db2c to i8*
  store i8 %v1_db2c, i8* %v4_db2c, align 1
  %v0_db30 = load i32, i32* %r8.global-to-local, align 4
  %v1_db30 = trunc i32 %v0_db30 to i8
  %v2_db30 = load i32, i32* @r6, align 4
  %v3_db30 = add i32 %v2_db30, 7
  %v4_db30 = inttoptr i32 %v3_db30 to i8*
  store i8 %v1_db30, i8* %v4_db30, align 1
  %v0_db34 = load i32, i32* @r5, align 4
  %v1_db34 = add i32 %v0_db34, 24
  %v2_db34 = inttoptr i32 %v1_db34 to i8*
  %v3_db34 = load i8, i8* %v2_db34, align 1
  %v4_db34 = zext i8 %v3_db34 to i32
  store i32 %v4_db34, i32* %r3.global-to-local, align 4
  %v1_db38 = add i32 %v0_db34, 25
  %v2_db38 = inttoptr i32 %v1_db38 to i8*
  %v3_db38 = load i8, i8* %v2_db38, align 1
  %v4_db38 = zext i8 %v3_db38 to i32
  %v4_db3c = mul nuw nsw i32 %v4_db38, 256
  %v5_db3c = or i32 %v4_db3c, %v4_db34
  store i32 %v5_db3c, i32* %r2.global-to-local, align 4
  %v3_db40 = load i32, i32* %stack_var_-44, align 4
  %v0_db44 = load i32, i32* @r6, align 4
  store i32 %v0_db44, i32* @r1, align 4
  %v1_db48 = add i32 %v3_db40, 12
  store i32 %v1_db48, i32* %r3.global-to-local, align 4
  %v4_db50 = call i32 @function_e4f4(i32 %v0_db34, i32 %v0_db44, i32 %v5_db3c, i32 %v1_db48)
  %v5_db50 = trunc i32 %v4_db50 to i8
  %v4_db5414 = udiv i32 %v4_db50, 256
  %v1_db58 = trunc i32 %v4_db5414 to i8
  %v2_db58 = load i32, i32* @r6, align 4
  %v3_db58 = add i32 %v2_db58, 7
  %v4_db58 = inttoptr i32 %v3_db58 to i8*
  store i8 %v1_db58, i8* %v4_db58, align 1
  %v3_db5c = load i32, i32* @r6, align 4
  %v4_db5c = add i32 %v3_db5c, 6
  %v5_db5c = inttoptr i32 %v4_db5c to i8*
  store i8 %v5_db50, i8* %v5_db5c, align 1
  %v3_db60 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db60, i32* %r3.global-to-local, align 4
  %v0_db64 = load i32, i32* @r5, align 4
  %v1_db64 = add i32 %v0_db64, 20
  %v2_db64 = inttoptr i32 %v1_db64 to i32*
  %v3_db64 = load i32, i32* %v2_db64, align 4
  %v5_db6c = mul i32 %v3_db60, 24
  %v1_db70 = load i32, i32* @sl, align 4
  %v2_db70 = add i32 %v1_db70, %v5_db6c
  store i32 %v2_db70, i32* %ip.global-to-local, align 4
  %v3_db74 = udiv i32 %v3_db64, 65536
  store i32 %v3_db74, i32* %r2.global-to-local, align 4
  %v1_db78 = trunc i32 %v3_db74 to i8
  %v3_db78 = add i32 %v2_db70, 2
  %v4_db78 = inttoptr i32 %v3_db78 to i8*
  store i8 %v1_db78, i8* %v4_db78, align 1
  %v0_db7c = load i32, i32* %r2.global-to-local, align 4
  %v3_db7c15 = udiv i32 %v0_db7c, 256
  %v3_db80 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_db80, i32* %r2.global-to-local, align 4
  %v1_db84 = trunc i32 %v3_db7c15 to i8
  %v2_db84 = load i32, i32* %ip.global-to-local, align 4
  %v3_db84 = add i32 %v2_db84, 3
  %v4_db84 = inttoptr i32 %v3_db84 to i8*
  store i8 %v1_db84, i8* %v4_db84, align 1
  store i32 16, i32* @r4, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_db90 = load i32, i32* @r5, align 4
  %v0_db94 = load i32, i32* %r2.global-to-local, align 4
  %v1_db94 = add i32 %v0_db94, 32
  store i32 %v1_db94, i32* %r2.global-to-local, align 4
  %v0_db98 = load i32, i32* %sb.global-to-local, align 4
  %v0_dba0 = load i32, i32* %ip.global-to-local, align 4
  %v6_dba4 = inttoptr i32 %v0_db90 to i32*
  %v7_dba4 = call i32 @function_13258(i32 %v0_db98, i32* %v6_dba4, i32 %v1_db94, i32 16384, i32 %v0_dba0, i32 16)
  %v3_dba8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dba8, i32* %r3.global-to-local, align 4
  store i32 %v1_d7cc, i32* @r4, align 4
  %v1_dbb0 = add i32 %v3_dba8, 1
  %v9_dbb4 = icmp eq i32 %v1_dbb0, %v1_d7cc
  store i1 %v9_dbb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dbb0, i32* %stack_var_-40, align 4
  %v6_dbbc = icmp slt i32 %v1_dbb0, %v1_d7cc
  br i1 %v6_dbbc, label %dec_label_pc_dbc0, label %dec_label_pc_dc9c

dec_label_pc_dbc0:                                ; preds = %dec_label_pc_db0c, %dec_label_pc_dadc
  %v1_dbd0 = phi i32 [ %v1_dbb0, %dec_label_pc_db0c ], [ 0, %dec_label_pc_dadc ]
  %v5_dbc4 = mul i32 %v1_dbd0, 24
  %v1_dbc8 = load i32, i32* @sl, align 4
  %v2_dbc8 = add i32 %v1_dbc8, %v5_dbc4
  store i32 %v2_dbc8, i32* %r3.global-to-local, align 4
  %v1_dbcc = add i32 %v2_dbc8, 20
  %v2_dbcc = inttoptr i32 %v1_dbcc to i8*
  %v3_dbcc = load i8, i8* %v2_dbcc, align 1
  %v4_dbcc = zext i8 %v3_dbcc to i32
  store i32 %v4_dbcc, i32* %r2.global-to-local, align 4
  %v0_dbd0 = load i32, i32* %fp.global-to-local, align 4
  %v4_dbd0 = mul i32 %v1_dbd0, 4
  %v5_dbd0 = add i32 %v0_dbd0, %v4_dbd0
  %v6_dbd0 = inttoptr i32 %v5_dbd0 to i32*
  %v7_dbd0 = load i32, i32* %v6_dbd0, align 4
  store i32 %v7_dbd0, i32* @r5, align 4
  %v2_dbd8 = icmp ugt i8 %v3_dbcc, 30
  %v7_dbd8 = icmp eq i8 %v3_dbcc, 31
  store i1 %v7_dbd8, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_dbe0 = add i32 %v7_dbd0, 20
  store i32 %v1_dbe0, i32* @r6, align 4
  %v2_dbe4 = xor i1 %v7_dbd8, true
  %v3_dbe4 = and i1 %v2_dbd8, %v2_dbe4
  br i1 %v3_dbe4, label %dec_label_pc_dae8, label %dec_label_pc_dbe8

dec_label_pc_dbe8:                                ; preds = %dec_label_pc_dbc0
  %v1_dbe8 = add i32 %v2_dbc8, 16
  %v2_dbe8 = inttoptr i32 %v1_dbe8 to i32*
  %v3_dbe8 = load i32, i32* %v2_dbe8, align 4
  store i32 %v3_dbe8, i32* @r4, align 4
  %v0_dbec = call i32 @function_f8c0()
  %v3_dbf0 = load i32, i32* %stack_var_-40, align 4
  %v5_dbf8 = mul i32 %v3_dbf0, 24
  %v0_dbfc = load i32, i32* @r4, align 4
  %v1_dc00 = and i32 %v0_dbfc, 65280
  store i32 %v1_dc00, i32* %r3.global-to-local, align 4
  %v1_dbfc = udiv i32 %v0_dbfc, 256
  %v3_dc04 = and i32 %v1_dbfc, 65280
  store i32 %v3_dc04, i32* %r2.global-to-local, align 4
  %v1_dc08 = load i32, i32* @sl, align 4
  %v2_dc08 = add i32 %v1_dc08, %v5_dbf8
  store i32 %v2_dc08, i32* %ip.global-to-local, align 4
  %v1_dc14 = add i32 %v2_dc08, 20
  %v2_dc14 = inttoptr i32 %v1_dc14 to i8*
  %v3_dc14 = load i8, i8* %v2_dc14, align 1
  %v4_dc14 = zext i8 %v3_dc14 to i32
  %v2_dc1c = call i32 @llvm.bswap.i32(i32 %v0_dbfc)
  %v7_dc20 = lshr i32 %v0_dbec, %v4_dc14
  %v8_dc20 = add i32 %v7_dc20, %v2_dc1c
  store i32 %v8_dc20, i32* %r2.global-to-local, align 4
  %v2_dc3c = call i32 @llvm.bswap.i32(i32 %v8_dc20)
  store i32 %v2_dc3c, i32* %r3.global-to-local, align 4
  %v1_dc44 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc44 = icmp eq i32 %v3_d938, %v1_dc44
  store i1 %v9_dc44, i1* %cpsr_z.global-to-local, align 1
  %v1_dc48 = load i32, i32* @r5, align 4
  %v2_dc48 = add i32 %v1_dc48, 16
  %v3_dc48 = inttoptr i32 %v2_dc48 to i32*
  store i32 %v2_dc3c, i32* %v3_dc48, align 4
  br i1 %v9_dc44, label %dec_label_pc_dc50, label %dec_label_pc_dbe8.dec_label_pc_daf4_crit_edge

dec_label_pc_dbe8.dec_label_pc_daf4_crit_edge:    ; preds = %dec_label_pc_dbe8
  %v1_daf8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_daf4

dec_label_pc_dc50:                                ; preds = %dec_label_pc_dbe8, %dec_label_pc_dae8
  %v0_dc50 = call i32 @function_f8c0()
  %v1_dc50 = trunc i32 %v0_dc50 to i8
  store i32 %v3_d93c, i32* %r2.global-to-local, align 4
  %v4_dc58 = sdiv i32 %v0_dc50, 256
  store i32 %v4_dc58, i32* %r3.global-to-local, align 4
  %v1_dc5c = load i32, i32* %r7.global-to-local, align 4
  %v9_dc5c = icmp eq i32 %v3_d93c, %v1_dc5c
  store i1 %v9_dc5c, i1* %cpsr_z.global-to-local, align 1
  %v1_dc60 = trunc i32 %v4_dc58 to i8
  %v2_dc60 = load i32, i32* @r5, align 4
  %v3_dc60 = add i32 %v2_dc60, 5
  %v4_dc60 = inttoptr i32 %v3_dc60 to i8*
  store i8 %v1_dc60, i8* %v4_dc60, align 1
  %v3_dc64 = load i32, i32* @r5, align 4
  %v4_dc64 = add i32 %v3_dc64, 4
  %v5_dc64 = inttoptr i32 %v4_dc64 to i8*
  store i8 %v1_dc50, i8* %v5_dc64, align 1
  %v0_dc68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc68, label %dec_label_pc_dc6c, label %dec_label_pc_dc50.dec_label_pc_db00_crit_edge

dec_label_pc_dc50.dec_label_pc_db00_crit_edge:    ; preds = %dec_label_pc_dc50
  %v1_db04.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_db00

dec_label_pc_dc6c:                                ; preds = %dec_label_pc_dc50, %dec_label_pc_daf4
  %v0_dc6c = call i32 @function_f8c0()
  %v1_dc6c = trunc i32 %v0_dc6c to i8
  %v4_dc70 = sdiv i32 %v0_dc6c, 256
  store i32 %v4_dc70, i32* %r3.global-to-local, align 4
  %v3_dc74 = load i32, i32* @r5, align 4
  %v4_dc74 = add i32 %v3_dc74, 20
  %v5_dc74 = inttoptr i32 %v4_dc74 to i8*
  store i8 %v1_dc6c, i8* %v5_dc74, align 1
  %v0_dc78 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc78 = trunc i32 %v0_dc78 to i8
  %v2_dc78 = load i32, i32* @r6, align 4
  %v3_dc78 = add i32 %v2_dc78, 1
  %v4_dc78 = inttoptr i32 %v3_dc78 to i8*
  store i8 %v1_dc78, i8* %v4_dc78, align 1
  store i32 %v3_d940, i32* %r3.global-to-local, align 4
  %v1_dc80 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc80 = icmp eq i32 %v3_d940, %v1_dc80
  store i1 %v9_dc80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dc80, label %dec_label_pc_dc88, label %dec_label_pc_db0c

dec_label_pc_dc88:                                ; preds = %dec_label_pc_dc6c, %dec_label_pc_db00
  %v0_dc88 = call i32 @function_f8c0()
  %v1_dc88 = trunc i32 %v0_dc88 to i8
  %v4_dc8c = sdiv i32 %v0_dc88, 256
  store i32 %v4_dc8c, i32* %r3.global-to-local, align 4
  %v1_dc90 = trunc i32 %v4_dc8c to i8
  %v2_dc90 = load i32, i32* @r6, align 4
  %v3_dc90 = add i32 %v2_dc90, 3
  %v4_dc90 = inttoptr i32 %v3_dc90 to i8*
  store i8 %v1_dc90, i8* %v4_dc90, align 1
  %v3_dc94 = load i32, i32* @r6, align 4
  %v4_dc94 = add i32 %v3_dc94, 2
  %v5_dc94 = inttoptr i32 %v4_dc94 to i8*
  store i8 %v1_dc88, i8* %v5_dc94, align 1
  br label %dec_label_pc_db0c

dec_label_pc_dc9c.critedge:                       ; preds = %dec_label_pc_d924
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_dc9c

dec_label_pc_dc9c:                                ; preds = %dec_label_pc_db0c, %dec_label_pc_dc9c.critedge, %dec_label_pc_dac8
  %v2_dca0 = call i32 @function_12ca8(i32* null)
  %v9_dca8 = icmp eq i32 %v2_d8c0, %v2_dca0
  store i1 %v9_dca8, i1* %cpsr_z.global-to-local, align 1
  %v6_dcac = icmp slt i32 %v2_d8c0, %v2_dca0
  br i1 %v6_dcac, label %dec_label_pc_dcb0, label %dec_label_pc_dac8

dec_label_pc_dcb0:                                ; preds = %dec_label_pc_dc9c, %dec_label_pc_d7c8, %dec_label_pc_dcb8
  %v29_dcb4 = phi i32 [ %v3_d8ec, %dec_label_pc_d7c8 ], [ %v1_dcbc, %dec_label_pc_dcb8 ], [ %v2_dca0, %dec_label_pc_dc9c ]
  store i32 %v3_d7c8, i32* %r4.global-to-local, align 4
  store i32 %v12_d7c8, i32* %r7.global-to-local, align 4
  store i32 %v15_d7c8, i32* %r8.global-to-local, align 4
  ret i32 %v29_dcb4

dec_label_pc_dcb8:                                ; preds = %dec_label_pc_d8fc
  %v0_dcb8 = load i32, i32* %sb.global-to-local, align 4
  %v1_dcbc = call i32 @function_129d8(i32 %v0_dcb8)
  br label %dec_label_pc_dcb0

; uselistorder directives
  uselistorder i32 %v4_dc8c, { 1, 0 }
  uselistorder i32 %v4_dc58, { 1, 0 }
  uselistorder i32 %v2_dc3c, { 1, 0 }
  uselistorder i32 %v0_dbfc, { 1, 0, 2 }
  uselistorder i32 %v1_dbb0, { 1, 2, 0, 3 }
  uselistorder i32 %v3_db74, { 1, 0 }
  uselistorder i32 %v4_db20, { 1, 0 }
  uselistorder i1 %v3_daec, { 1, 0 }
  uselistorder i32 %v1_dab4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_da5c, { 1, 0 }
  uselistorder i32 %v1_d9e8, { 1, 0 }
  uselistorder i32 %v1_d974, { 1, 0 }
  uselistorder i32 %v3_d970, { 1, 0 }
  uselistorder i32 %v1_d964, { 1, 0 }
  uselistorder i32 %v3_d938, { 0, 2, 1 }
  uselistorder i32 %v0_d934, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d930, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d91c, { 1, 0 }
  uselistorder i1 %v7_d8f0, { 1, 0 }
  uselistorder i32 %v3_d8ec, { 1, 2, 3, 0 }
  uselistorder i32 %v2_d8c0, { 1, 0 }
  uselistorder i32 %v1_d878, { 1, 2, 0 }
  uselistorder i32 %v5_d810, { 1, 0 }
  uselistorder i32 %v1_d7cc, { 2, 3, 4, 1, 5, 6, 7, 9, 0, 8 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32* %stack_var_-40, { 0, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 2, 15, 13, 14 }
  uselistorder i32* %r8.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 2, 4, 1, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 1, 16, 17, 18, 19, 20, 21, 22, 30, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r2.global-to-local, { 14, 15, 16, 24, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %ip.global-to-local, { 9, 10, 11, 12, 13, 14, 15, 17, 16, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32* %fp.global-to-local, { 2, 0, 1, 3 }
  uselistorder i1* %cpsr_z.global-to-local, { 7, 0, 8, 9, 10, 11, 16, 12, 13, 14, 15, 17, 18, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_dcb0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dc9c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_db0c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dac8, { 1, 0 }
  uselistorder label %bb47, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_dcc8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_dcc8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_dcc8 = load i32, i32* @r4, align 4
  %v15_dcc8 = load i32, i32* @r8, align 4
  %v21_dcc8 = load i32, i32* @sl, align 4
  %v24_dcc8 = load i32, i32* @fp, align 4
  %v1_dcd4 = urem i32 %arg2, 256
  store i32 0, i32* @r6, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %v1_dcd4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_dcec = urem i32 %arg4, 256
  store i32 %v1_dcec, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v2_dcfc = call i32 @function_135a8(i32 %v1_dcd4, i32 4)
  %v0_dd00 = load i32, i32* @r5, align 4
  store i32 %v0_dd00, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_dd0c = load i32, i32* @r4, align 4
  store i32 %v0_dd0c, i32* %r0.global-to-local, align 4
  %v0_dd10 = load i32, i32* @r6, align 4
  store i32 %v0_dd10, i32* %r3.global-to-local, align 4
  %v5_dd14 = inttoptr i32 %v0_dd00 to i32*
  %v6_dd14 = call i32 @function_a054(i32 %v0_dd0c, i32* %v5_dd14, i32 2, i32 %v0_dd10)
  %v1_dd20 = urem i32 %v6_dd14, 256
  store i32 %v1_dd20, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_dd2c = load i32, i32* @r4, align 4
  store i32 %v0_dd2c, i32* %r0.global-to-local, align 4
  %v0_dd30 = load i32, i32* @r5, align 4
  store i32 %v0_dd30, i32* %r1.global-to-local, align 4
  %v5_dd34 = trunc i32 %v6_dd14 to i8
  %v6_dd38 = inttoptr i32 %v0_dd30 to i32*
  %v7_dd38 = call i32 @function_a054(i32 %v0_dd2c, i32* %v6_dd38, i32 3, i32 65535)
  %v0_dd3c = load i32, i32* @r5, align 4
  store i32 %v0_dd3c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_dd48 = load i32, i32* @r4, align 4
  store i32 %v0_dd48, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_dd50 = inttoptr i32 %v0_dd3c to i32*
  %v6_dd50 = call i32 @function_a054(i32 %v0_dd48, i32* %v5_dd50, i32 4, i32 64)
  %v1_dd58 = urem i32 %v6_dd50, 256
  store i32 %v1_dd58, i32* %ip.global-to-local, align 4
  %v0_dd5c = load i32, i32* @r5, align 4
  store i32 %v0_dd5c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_dd64 = load i32, i32* @r6, align 4
  store i32 %v0_dd64, i32* %r3.global-to-local, align 4
  %v0_dd68 = load i32, i32* @r4, align 4
  store i32 %v0_dd68, i32* %r0.global-to-local, align 4
  %v6_dd70 = inttoptr i32 %v0_dd5c to i32*
  %v7_dd70 = call i32 @function_a054(i32 %v0_dd68, i32* %v6_dd70, i32 5, i32 %v0_dd64)
  %v1_dd7c = urem i32 %v7_dd70, 256
  store i32 %v1_dd7c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_dd88 = load i32, i32* @r4, align 4
  store i32 %v0_dd88, i32* %r0.global-to-local, align 4
  %v0_dd8c = load i32, i32* @r5, align 4
  store i32 %v0_dd8c, i32* %r1.global-to-local, align 4
  %v5_dd94 = inttoptr i32 %v0_dd8c to i32*
  %v6_dd94 = call i32 @function_a054(i32 %v0_dd88, i32* %v5_dd94, i32 6, i32 65535)
  %v0_dd98 = load i32, i32* @r5, align 4
  store i32 %v0_dd98, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_dda4 = load i32, i32* @r4, align 4
  store i32 %v0_dda4, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_ddac = inttoptr i32 %v0_dd98 to i32*
  %v6_ddac = call i32 @function_a054(i32 %v0_dda4, i32* %v5_ddac, i32 7, i32 53)
  %v0_ddb8 = load i32, i32* @r5, align 4
  store i32 %v0_ddb8, i32* %r1.global-to-local, align 4
  %v0_ddbc = load i32, i32* @r4, align 4
  store i32 %v0_ddbc, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ddc8 = inttoptr i32 %v0_ddb8 to i32*
  %v6_ddc8 = call i32 @function_a054(i32 %v0_ddbc, i32* %v5_ddc8, i32 9, i32 65535)
  %v0_ddcc = load i32, i32* @r5, align 4
  store i32 %v0_ddcc, i32* %r1.global-to-local, align 4
  %v0_ddd4 = load i32, i32* @r6, align 4
  store i32 %v0_ddd4, i32* %r2.global-to-local, align 4
  %v0_ddd8 = load i32, i32* @r4, align 4
  store i32 %v0_ddd8, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_dde0 = inttoptr i32 %v0_ddcc to i32*
  %v6_dde0 = call i32 @function_a054(i32 %v0_ddd8, i32* %v5_dde0, i32 %v0_ddd4, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_dde8 = load i32, i32* @r6, align 4
  store i32 %v0_dde8, i32* %r3.global-to-local, align 4
  %v0_ddec = load i32, i32* @r5, align 4
  store i32 %v0_ddec, i32* %r1.global-to-local, align 4
  %v0_ddf4 = load i32, i32* @r4, align 4
  store i32 %v0_ddf4, i32* %r0.global-to-local, align 4
  %v5_ddf8 = inttoptr i32 %v0_ddec to i32*
  %v6_ddf8 = call i32 @function_9f84(i32 %v0_ddf4, i32* %v5_ddf8, i32 8, i32 %v0_dde8, i32 %v6_dde0)
  store i32 %v6_ddf8, i32* @r7, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_de04 = call i32 @function_11590(i32 37)
  %v0_de08 = load i32, i32* @r6, align 4
  store i32 %v0_de08, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v2_de10 = inttoptr i32 %v0_de08 to i32*
  %v3_de10 = call i32 @function_114ac(i32 37, i32* %v2_de10)
  store i32 %v3_de10, i32* %r0.global-to-local, align 4
  %v0_de14 = load i32, i32* @r6, align 4
  store i32 %v0_de14, i32* %r1.global-to-local, align 4
  %v2_de18 = inttoptr i32 %v3_de10 to i8*
  %v3_de18 = call i32 @function_12b04(i8* %v2_de18, i32 %v0_de14)
  store i32 %v3_de18, i32* @r4, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_de24 = call i32 @function_114d8(i32 37)
  store i32 %v1_de24, i32* %r0.global-to-local, align 4
  %v0_de28 = load i32, i32* @r4, align 4
  %v1_de28 = load i32, i32* @r6, align 4
  %v9_de28 = icmp eq i32 %v0_de28, %v1_de28
  store i1 %v9_de28, i1* %cpsr_z.global-to-local, align 1
  %v5_de2c = icmp slt i32 %v0_de28, %v1_de28
  br i1 %v5_de2c, label %dec_label_pc_df00, label %dec_label_pc_de30

dec_label_pc_de30:                                ; preds = %dec_label_pc_dcc8
  %v2_de34 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_de34, i32* %sl.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_de34, i32* %r1.global-to-local, align 4
  store i32 %v0_de28, i32* %r0.global-to-local, align 4
  %v4_de44 = call i32 @function_12ba0(i32 %v0_de28, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_de44, i32* @r5, align 4
  %v0_de4c = load i32, i32* @r4, align 4
  store i32 %v0_de4c, i32* %r0.global-to-local, align 4
  %v1_de50 = call i32 @function_129d8(i32 %v0_de4c)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_de58 = call i32 @function_11590(i32 38)
  %v0_de5c = load i32, i32* @r6, align 4
  store i32 %v0_de5c, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v2_de64 = inttoptr i32 %v0_de5c to i32*
  %v3_de64 = call i32 @function_114ac(i32 38, i32* %v2_de64)
  %v0_de68 = load i32, i32* @r5, align 4
  store i32 %v0_de68, i32* @r1, align 4
  store i32 %v3_de64, i32* %r2.global-to-local, align 4
  store i32 %v2_de34, i32* %r0.global-to-local, align 4
  %v3_de74 = bitcast i32* %stack_var_-2120 to i8*
  %v4_de74 = call i32 @function_12398(i8* %v3_de74, i32 %v0_de68, i32 %v3_de64)
  store i32 %v4_de74, i32* %r8.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_de80 = call i32 @function_114d8(i32 38)
  store i32 %v1_de80, i32* %r0.global-to-local, align 4
  %v7_de84 = icmp eq i32 %v4_de74, -1
  store i1 %v7_de84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de84, label %dec_label_pc_df00, label %dec_label_pc_de8c

dec_label_pc_de8c:                                ; preds = %dec_label_pc_de30
  %v0_de8c = load i32, i32* @r5, align 4
  %v9_de8c = icmp eq i32 %v0_de8c, %v4_de74
  store i1 %v9_de8c, i1* %cpsr_z.global-to-local, align 1
  %v7_de90 = icmp sgt i32 %v0_de8c, %v4_de74
  br i1 %v7_de90, label %dec_label_pc_de94, label %dec_label_pc_df00

dec_label_pc_de94:                                ; preds = %dec_label_pc_de8c
  %v2_de8c = sub i32 %v0_de8c, %v4_de74
  store i32 %v2_de8c, i32* %r3.global-to-local, align 4
  %v2_de9c = ptrtoint i32* %stack_var_-72 to i32
  %v0_dea0 = load i32, i32* @r6, align 4
  store i32 %v0_dea0, i32* %r1.global-to-local, align 4
  store i32 %v4_de74, i32* %r2.global-to-local, align 4
  %v0_deac = load i32, i32* %sl.global-to-local, align 4
  %v2_deac = add i32 %v0_deac, %v4_de74
  store i32 %v2_deac, i32* %r0.global-to-local, align 4
  store i32 %v2_de9c, i32* @r4, align 4
  %v1_debc = add i32 %v0_de8c, -1
  br label %dec_label_pc_deb4

dec_label_pc_deb4:                                ; preds = %dec_label_pc_def0, %dec_label_pc_de94
  %v0_def8 = phi i32 [ %v1_def8, %dec_label_pc_def0 ], [ %v2_de9c, %dec_label_pc_de94 ]
  %v0_def0 = phi i32 [ %v1_def0, %dec_label_pc_def0 ], [ %v4_de74, %dec_label_pc_de94 ]
  %v0_ded8 = phi i32 [ %v0_ded846, %dec_label_pc_def0 ], [ %v0_dea0, %dec_label_pc_de94 ]
  %v0_deb8 = phi i32 [ %v0_deb842, %dec_label_pc_def0 ], [ %v0_dea0, %dec_label_pc_de94 ]
  %v0_dec0 = phi i32 [ %v1_dec0, %dec_label_pc_def0 ], [ %v2_deac, %dec_label_pc_de94 ]
  %v1_deb4 = inttoptr i32 %v0_dec0 to i8*
  %v2_deb4 = load i8, i8* %v1_deb4, align 1
  %v3_deb4 = zext i8 %v2_deb4 to i32
  store i32 %v3_deb4, i32* %r3.global-to-local, align 4
  %v2_deb8 = icmp eq i32 %v0_deb8, 0
  store i1 %v2_deb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_debc, i32* %lr.global-to-local, align 4
  %v1_dec0 = add i32 %v0_dec0, 1
  store i32 %v1_dec0, i32* %r0.global-to-local, align 4
  %v1_dec4 = add nsw i32 %v3_deb4, -48
  store i32 %v1_dec4, i32* %ip.global-to-local, align 4
  br i1 %v2_deb8, label %dec_label_pc_decc, label %dec_label_pc_dedc

dec_label_pc_decc:                                ; preds = %dec_label_pc_deb4
  %v7_decc = icmp eq i8 %v2_deb4, 9
  store i1 %v7_decc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_decc, label %dec_label_pc_def0, label %bb

bb:                                               ; preds = %dec_label_pc_decc
  %v8_ded0 = icmp eq i8 %v2_deb4, 32
  store i1 %v8_ded0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ded0, label %dec_label_pc_def0, label %dec_label_pc_ded8

dec_label_pc_ded8:                                ; preds = %bb
  %v1_ded8 = add i32 %v0_ded8, 1
  store i32 %v1_ded8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_dedc

dec_label_pc_dedc:                                ; preds = %dec_label_pc_deb4, %dec_label_pc_ded8
  %v0_ded847 = phi i32 [ %v0_ded8, %dec_label_pc_deb4 ], [ %v1_ded8, %dec_label_pc_ded8 ]
  %v0_deb843 = phi i32 [ %v0_deb8, %dec_label_pc_deb4 ], [ %v1_ded8, %dec_label_pc_ded8 ]
  %v7_dedc = icmp eq i8 %v2_deb4, 46
  store i1 %v7_dedc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dedc, label %dec_label_pc_dee8, label %bb129

bb129:                                            ; preds = %dec_label_pc_dedc
  %v3_dee0 = icmp ugt i32 %v1_dec4, 8
  %v8_dee0 = icmp eq i32 %v1_dec4, 9
  store i1 %v8_dee0, i1* %cpsr_z.global-to-local, align 1
  %v2_dee4 = xor i1 %v8_dee0, true
  %v3_dee4 = and i1 %v3_dee0, %v2_dee4
  br i1 %v3_dee4, label %dec_label_pc_e430, label %dec_label_pc_dee8

dec_label_pc_dee8:                                ; preds = %dec_label_pc_dedc, %bb129
  %v9_dee8 = icmp eq i32 %v0_def0, %v1_debc
  store i1 %v9_dee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dee8, label %dec_label_pc_e430, label %dec_label_pc_def0

dec_label_pc_def0:                                ; preds = %dec_label_pc_decc, %dec_label_pc_dee8, %bb
  %v0_ded846 = phi i32 [ %v0_ded8, %dec_label_pc_decc ], [ %v0_ded847, %dec_label_pc_dee8 ], [ %v0_ded8, %bb ]
  %v0_deb842 = phi i32 [ 0, %dec_label_pc_decc ], [ %v0_deb843, %dec_label_pc_dee8 ], [ 0, %bb ]
  %v1_def0 = add i32 %v0_def0, 1
  store i32 %v1_def0, i32* %r2.global-to-local, align 4
  %v9_def4 = icmp eq i32 %v0_de8c, %v1_def0
  store i1 %v9_def4, i1* %cpsr_z.global-to-local, align 1
  %v1_def8 = add i32 %v0_def8, 1
  store i32 %v1_def8, i32* @r4, align 4
  br i1 %v9_def4, label %dec_label_pc_df00, label %dec_label_pc_deb4

dec_label_pc_df00:                                ; preds = %dec_label_pc_def0, %dec_label_pc_de8c, %dec_label_pc_de30, %dec_label_pc_dcc8
  %v0_df00 = call i32 @function_f8c0()
  %v1_df04 = urem i32 %v0_df00, 4
  store i32 %v1_df04, i32* %r0.global-to-local, align 4
  %v2_df08 = icmp eq i32 %v1_df04, 3
  store i1 %v2_df08, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_df00 to i2
  switch i2 %trunc, label %dec_label_pc_df2c25 [
    i2 0, label %dec_label_pc_e468
    i2 1, label %dec_label_pc_df24
    i2 -2, label %dec_label_pc_e458
    i2 -1, label %dec_label_pc_e47c
  ]

dec_label_pc_df24:                                ; preds = %dec_label_pc_df00
  store i32 74, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_df2c

dec_label_pc_df2c25:                              ; preds = %dec_label_pc_df00
  unreachable

dec_label_pc_df2c:                                ; preds = %dec_label_pc_e47c, %dec_label_pc_e468, %dec_label_pc_e458, %dec_label_pc_e430, %dec_label_pc_df24
  %stack_var_-2188.0 = phi i32 [ 4, %dec_label_pc_e47c ], [ 64, %dec_label_pc_e458 ], [ 74, %dec_label_pc_df24 ], [ 8, %dec_label_pc_e468 ], [ %phitmp, %dec_label_pc_e430 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_df30 = call i32 @function_12ca8(i32* null)
  %v0_df34 = load i32, i32* @r7, align 4
  %v2_df34 = icmp eq i32 %v0_df34, 0
  store i1 %v2_df34, i1* %cpsr_z.global-to-local, align 1
  %v1_df38 = load i32, i32* %fp.global-to-local, align 4
  %v2_df38 = add i32 %v1_df38, %v2_df30
  store i32 %v2_df38, i32* %r0.global-to-local, align 4
  br i1 %v2_df34, label %dec_label_pc_e40c, label %dec_label_pc_df44

dec_label_pc_df44:                                ; preds = %dec_label_pc_df2c
  store i32 %v0_df34, i32* %r0.global-to-local, align 4
  %v1_df48 = inttoptr i32 %v0_df34 to i8*
  %v2_df48 = call i32 @function_12044(i8* %v1_df48)
  %v3_df48 = inttoptr i32 %v2_df48 to i8*
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_df5c = call i32 @function_132bc(i32 2, i32 3, i32 17)
  store i32 %v3_df5c, i32* %r0.global-to-local, align 4
  %v7_df60 = icmp eq i32 %v3_df5c, -1
  store i1 %v7_df60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df60, label %dec_label_pc_e40c, label %dec_label_pc_df6c

dec_label_pc_df6c:                                ; preds = %dec_label_pc_df44
  store i32 1, i32* %lr.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_df78 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_df78, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_df8c = call i32 @function_1328c(i32 %v3_df5c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_df8c, i32* %r0.global-to-local, align 4
  %v7_df90 = icmp eq i32 %v6_df8c, -1
  store i1 %v7_df90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df90, label %dec_label_pc_e404, label %dec_label_pc_df98

dec_label_pc_df98:                                ; preds = %dec_label_pc_df6c
  %v3_dfa0 = mul i32 %v7_dd38, 65536
  store i32 %v3_dfa0, i32* %r8.global-to-local, align 4
  %v3_dfac = mul i32 %v6_dd94, 65536
  store i32 %v3_dfac, i32* %r0.global-to-local, align 4
  %v3_dfb0 = mul i32 %v6_ddac, 65536
  store i32 %v3_dfb0, i32* %sl.global-to-local, align 4
  %v3_dfb4 = mul i32 %v6_ddc8, 65536
  store i32 %v3_dfb4, i32* %fp.global-to-local, align 4
  %v2_dfb8 = icmp eq i32 %v1_dcd4, 0
  store i1 %v2_dfb8, i1* %cpsr_z.global-to-local, align 1
  %v1_dfbc = urem i32 %v6_dde0, 256
  store i32 %v1_dfbc, i32* @sb, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_dfc4 = urem i32 %v7_dd38, 65536
  %v3_dfc8 = urem i32 %v6_dd94, 65536
  store i32 %v3_dfc8, i32* %ip.global-to-local, align 4
  %v3_dfcc = urem i32 %v6_ddac, 65536
  store i32 %v3_dfcc, i32* %lr.global-to-local, align 4
  %v3_dfd0 = urem i32 %v6_ddc8, 65536
  store i32 %v3_dfd0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_dfb8, label %dec_label_pc_e418.critedge, label %dec_label_pc_dfec

dec_label_pc_dfec:                                ; preds = %dec_label_pc_df98
  %v2_dff4 = add i32 %v2_df48, %v1_dfbc
  %v3_dff8 = mul i32 %v2_dff4, 65536
  %v1_dffc = add i32 %v3_dff8, 1769472
  %v1_e000 = add i32 %v3_dff8, 3080192
  %v1_e01c = urem i32 %v6_ddc8, 256
  %tmp130 = udiv i32 %v6_dd94, 256
  %v3_e020 = urem i32 %tmp130, 256
  %v1_e024 = urem i32 %v6_dd94, 256
  %v1_e018 = mul i32 %v7_dd38, 256
  %v3_e02c = and i32 %v1_e018, 65280
  store i32 %v3_e02c, i32* %r1.global-to-local, align 4
  %v1_e034 = urem i32 %v6_ddac, 256
  %tmp131 = udiv i32 %v7_dd38, 256
  %v3_e03c = udiv i32 %v1_dffc, 256
  %v1_e044 = and i32 %v3_e03c, 65280
  %tmp132 = udiv i32 %v6_ddac, 256
  %v4_e054 = udiv i32 %v1_dffc, 16777216
  %v5_e054 = or i32 %v1_e044, %v4_e054
  store i32 %v5_e054, i32* @r6, align 4
  %v3_e05c = sdiv i32 %v1_e000, 16777216
  %sext39 = mul i32 %tmp131, 16777216
  %v7_e05c = sdiv i32 %sext39, 16777216
  %v3_e060 = mul nuw nsw i32 %v1_e01c, 256
  %v4_e068 = mul nuw nsw i32 %v1_e024, 256
  %v5_e068 = or i32 %v4_e068, %v3_e020
  store i32 %v5_e068, i32* %r0.global-to-local, align 4
  %v3_e06c = ashr i32 %v1_e000, 31
  %tmp133 = udiv i32 %v6_ddc8, 256
  %v4_e070 = urem i32 %tmp133, 256
  %v5_e070 = or i32 %v4_e070, %v3_e060
  store i32 %v5_e070, i32* @r5, align 4
  %v3_e074 = ashr i32 %sext39, 31
  store i32 1, i32* %r8.global-to-local, align 4
  %v2_e07c = add i32 %v2_df48, 1
  store i32 %v2_e07c, i32* %fp.global-to-local, align 4
  store i32 %v1_e034, i32* %r3.global-to-local, align 4
  store i32 %v1_e024, i32* %r2.global-to-local, align 4
  %v3_e09069 = udiv i32 %v1_e044, 256
  store i32 %v3_e09069, i32* %ip.global-to-local, align 4
  store i32 %v1_e01c, i32* @lr, align 4
  store i32 0, i32* @r4, align 4
  %v5_e09c = trunc i32 %tmp130 to i8
  store i32 0, i32* %sl.global-to-local, align 4
  %sext18 = mul i32 %v6_dd50, 16777216
  %v4_e11c = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v1_dffc, 256
  %v4_e14c = sdiv i32 %sext19, 16777216
  %sext21 = mul i32 %v6_ddac, 16777216
  %v4_e168 = sdiv i32 %sext21, 16777216
  %sext22 = mul nuw i32 %v4_e054, 16777216
  %v4_e16c = sdiv i32 %sext22, 16777216
  %sext24 = mul i32 %v6_ddc8, 16777216
  %v4_e18c = sdiv i32 %sext24, 16777216
  %v1_e110 = trunc i32 %v3_e06c to i8
  %extract.t = trunc i32 %v3_e074 to i8
  %v1_e170 = trunc i32 %tmp132 to i8
  %v1_e198 = trunc i32 %v6_dd94 to i8
  br label %dec_label_pc_e0bc

dec_label_pc_e0bc:                                ; preds = %dec_label_pc_e21c, %dec_label_pc_dfec
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_e0c4 = call i32 @function_135a8(i32 600, i32 1)
  store i32 %v2_e0c4, i32* %r0.global-to-local, align 4
  store i32 %v2_dcfc, i32* %r2.global-to-local, align 4
  %v3_e0cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e0cc, i32* %r3.global-to-local, align 4
  %v2_e0d0 = load i32, i32* @r4, align 4
  %v5_e0d0 = mul i32 %v2_e0d0, 4
  %v6_e0d0 = add i32 %v5_e0d0, %v2_dcfc
  %v7_e0d0 = inttoptr i32 %v6_e0d0 to i32*
  store i32 %v2_e0c4, i32* %v7_e0d0, align 4
  %v0_e0d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_e0d4 = load i32, i32* %r3.global-to-local, align 4
  %v4_e0d4 = mul i32 %v1_e0d4, 4
  %v5_e0d4 = add i32 %v4_e0d4, %v0_e0d4
  %v6_e0d4 = inttoptr i32 %v5_e0d4 to i32*
  %v7_e0d4 = load i32, i32* %v6_e0d4, align 4
  store i32 %v7_e0d4, i32* %r1.global-to-local, align 4
  %v1_e0d8 = inttoptr i32 %v7_e0d4 to i8*
  %v2_e0d8 = load i8, i8* %v1_e0d8, align 1
  %tmp = urem i8 %v2_e0d8, 16
  %v1_e0dc = zext i8 %tmp to i32
  %v1_e0e0 = or i32 %v1_e0dc, 64
  store i32 %v1_e0e0, i32* %r2.global-to-local, align 4
  %v1_e0e4 = trunc i32 %v1_e0e0 to i8
  store i8 %v1_e0e4, i8* %v1_e0d8, align 1
  %v0_e0e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0e8 = inttoptr i32 %v0_e0e8 to i8*
  %v2_e0e8 = load i8, i8* %v1_e0e8, align 1
  %v1_e0ec = and i8 %v2_e0e8, -16
  %v1_e0f0 = or i8 %v1_e0ec, 5
  store i32 %v1_dd7c, i32* %ip.global-to-local, align 4
  store i8 %v1_e0f0, i8* %v1_e0e8, align 1
  %v2_e100 = load i32, i32* %r1.global-to-local, align 4
  %v3_e100 = add i32 %v2_e100, 1
  %v4_e100 = inttoptr i32 %v3_e100 to i8*
  store i8 %v5_dd34, i8* %v4_e100, align 1
  store i32 %v3_e06c, i32* %r3.global-to-local, align 4
  store i32 %v3_e05c, i32* %r2.global-to-local, align 4
  %v0_e10c = load i32, i32* %ip.global-to-local, align 4
  %v2_e10c = icmp eq i32 %v0_e10c, 0
  store i1 %v2_e10c, i1* %cpsr_z.global-to-local, align 1
  %v2_e110 = load i32, i32* %r1.global-to-local, align 4
  %v3_e110 = add i32 %v2_e110, 3
  %v4_e110 = inttoptr i32 %v3_e110 to i8*
  store i8 %v1_e110, i8* %v4_e110, align 1
  %v0_e114 = load i32, i32* %r2.global-to-local, align 4
  %v1_e114 = trunc i32 %v0_e114 to i8
  %v2_e114 = load i32, i32* %r1.global-to-local, align 4
  %v3_e114 = add i32 %v2_e114, 2
  %v4_e114 = inttoptr i32 %v3_e114 to i8*
  store i8 %v1_e114, i8* %v4_e114, align 1
  store i32 %v3_e074, i32* %lr.global-to-local, align 4
  store i32 %v4_e11c, i32* %r2.global-to-local, align 4
  %v0_e120 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e120, label %.thread26, label %bb134

bb134:                                            ; preds = %dec_label_pc_e0bc
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e124 = load i32, i32* %r1.global-to-local, align 4
  %v4_e124 = add i32 %v3_e124, 6
  %v5_e124 = inttoptr i32 %v4_e124 to i8*
  store i8 64, i8* %v5_e124, align 1
  %v0_e12c.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t70 = trunc i32 %v0_e12c.pre to i8
  br label %.thread26

.thread26:                                        ; preds = %dec_label_pc_e0bc, %bb134
  %v0_e12c.off0 = phi i8 [ %extract.t, %dec_label_pc_e0bc ], [ %extract.t70, %bb134 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_e12c = load i32, i32* %r1.global-to-local, align 4
  %v3_e12c = add i32 %v2_e12c, 5
  %v4_e12c = inttoptr i32 %v3_e12c to i8*
  store i8 %v0_e12c.off0, i8* %v4_e12c, align 1
  store i32 %v7_e05c, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dd2c.82 to i32), i32* %lr.global-to-local, align 4
  %v0_e138 = load i32, i32* %r2.global-to-local, align 4
  %v1_e138 = trunc i32 %v0_e138 to i8
  %v2_e138 = load i32, i32* %r1.global-to-local, align 4
  %v3_e138 = add i32 %v2_e138, 8
  %v4_e138 = inttoptr i32 %v3_e138 to i8*
  store i8 %v1_e138, i8* %v4_e138, align 1
  %v0_e13c = load i32, i32* %r3.global-to-local, align 4
  %v1_e13c = trunc i32 %v0_e13c to i8
  %v2_e13c = load i32, i32* %r1.global-to-local, align 4
  %v3_e13c = add i32 %v2_e13c, 9
  %v4_e13c = inttoptr i32 %v3_e13c to i8*
  store i8 %v1_e13c, i8* %v4_e13c, align 1
  %v0_e140 = load i32, i32* %r1.global-to-local, align 4
  %v1_e140 = add i32 %v0_e140, 41
  %v2_e144 = load i32, i32* @global_var_1dd2c.82, align 4
  store i32 %v2_e144, i32* %r3.global-to-local, align 4
  %v0_e148 = load i32, i32* @sb, align 4
  %v2_e148 = add i32 %v1_e140, %v0_e148
  store i32 %v2_e148, i32* %r4.global-to-local, align 4
  store i32 %v4_e14c, i32* %r2.global-to-local, align 4
  %v1_e150 = add i32 %v0_e140, 20
  store i32 %v1_e150, i32* %r0.global-to-local, align 4
  %v0_e154 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e154, label %bb136, label %bb135

bb135:                                            ; preds = %.thread26
  %v1_e154 = load i32, i32* %sl.global-to-local, align 4
  %v2_e154 = trunc i32 %v1_e154 to i8
  %v4_e154 = add i32 %v0_e140, 7
  %v5_e154 = inttoptr i32 %v4_e154 to i8*
  store i8 %v2_e154, i8* %v5_e154, align 1
  %v2_e158.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb136

bb136:                                            ; preds = %.thread26, %bb135
  %v2_e158 = phi i32 [ %v0_e140, %.thread26 ], [ %v2_e158.pre, %bb135 ]
  %v0_e158 = load i32, i32* %ip.global-to-local, align 4
  %v1_e158 = trunc i32 %v0_e158 to i8
  %v3_e158 = add i32 %v2_e158, 4
  %v4_e158 = inttoptr i32 %v3_e158 to i8*
  store i8 %v1_e158, i8* %v4_e158, align 1
  %v0_e15c = load i32, i32* %r3.global-to-local, align 4
  %v1_e15c = load i32, i32* %r1.global-to-local, align 4
  %v2_e15c = add i32 %v1_e15c, 12
  %v3_e15c = inttoptr i32 %v2_e15c to i32*
  store i32 %v0_e15c, i32* %v3_e15c, align 4
  %v0_e160 = load i32, i32* %r2.global-to-local, align 4
  %v1_e160 = trunc i32 %v0_e160 to i8
  %v2_e160 = load i32, i32* %r0.global-to-local, align 4
  %v3_e160 = add i32 %v2_e160, 5
  %v4_e160 = inttoptr i32 %v3_e160 to i8*
  store i8 %v1_e160, i8* %v4_e160, align 1
  store i32 %v4_e168, i32* %lr.global-to-local, align 4
  store i32 %v4_e16c, i32* %r2.global-to-local, align 4
  %v2_e170 = load i32, i32* %r0.global-to-local, align 4
  %v3_e170 = add i32 %v2_e170, 2
  %v4_e170 = inttoptr i32 %v3_e170 to i8*
  store i8 %v1_e170, i8* %v4_e170, align 1
  %v0_e174 = load i32, i32* %lr.global-to-local, align 4
  %v1_e174 = trunc i32 %v0_e174 to i8
  %v2_e174 = load i32, i32* %r0.global-to-local, align 4
  %v3_e174 = add i32 %v2_e174, 3
  %v4_e174 = inttoptr i32 %v3_e174 to i8*
  store i8 %v1_e174, i8* %v4_e174, align 1
  %v0_e178 = load i32, i32* %r2.global-to-local, align 4
  %v1_e178 = trunc i32 %v0_e178 to i8
  %v2_e178 = load i32, i32* %r0.global-to-local, align 4
  %v3_e178 = add i32 %v2_e178, 4
  %v4_e178 = inttoptr i32 %v3_e178 to i8*
  store i8 %v1_e178, i8* %v4_e178, align 1
  store i32 %stack_var_-2188.0, i32* %lr.global-to-local, align 4
  %v2_e184 = load i32, i32* %r1.global-to-local, align 4
  %v3_e184 = add i32 %v2_e184, 20
  %v4_e184 = inttoptr i32 %v3_e184 to i8*
  store i8 %v5_e09c, i8* %v4_e184, align 1
  store i32 %v4_e18c, i32* %r3.global-to-local, align 4
  %v0_e190 = load i32, i32* %r1.global-to-local, align 4
  %v1_e190 = add i32 %v0_e190, 28
  store i32 %v1_e190, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v2_e198 = load i32, i32* %r0.global-to-local, align 4
  %v3_e198 = add i32 %v2_e198, 1
  %v4_e198 = inttoptr i32 %v3_e198 to i8*
  store i8 %v1_e198, i8* %v4_e198, align 1
  %v0_e19c = load i32, i32* %lr.global-to-local, align 4
  %v1_e19c = load i32, i32* %r1.global-to-local, align 4
  %v2_e19c = add i32 %v1_e19c, 16
  %v3_e19c = inttoptr i32 %v2_e19c to i32*
  store i32 %v0_e19c, i32* %v3_e19c, align 4
  %v0_e1a0 = load i32, i32* %r8.global-to-local, align 4
  %v1_e1a0 = trunc i32 %v0_e1a0 to i8
  %v2_e1a0 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1a0 = add i32 %v2_e1a0, 5
  %v4_e1a0 = inttoptr i32 %v3_e1a0 to i8*
  store i8 %v1_e1a0, i8* %v4_e1a0, align 1
  %v0_e1a4 = load i32, i32* @r5, align 4
  %v1_e1a4 = trunc i32 %v0_e1a4 to i8
  %v2_e1a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e1a4 = add i32 %v2_e1a4, 28
  %v4_e1a4 = inttoptr i32 %v3_e1a4 to i8*
  store i8 %v1_e1a4, i8* %v4_e1a4, align 1
  %v0_e1a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_e1a8 = trunc i32 %v0_e1a8 to i8
  %v2_e1a8 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1a8 = add i32 %v2_e1a8, 2
  %v4_e1a8 = inttoptr i32 %v3_e1a8 to i8*
  store i8 %v1_e1a8, i8* %v4_e1a8, align 1
  %v0_e1ac = load i32, i32* %r3.global-to-local, align 4
  %v1_e1ac = trunc i32 %v0_e1ac to i8
  %v2_e1ac = load i32, i32* %ip.global-to-local, align 4
  %v3_e1ac = add i32 %v2_e1ac, 1
  %v4_e1ac = inttoptr i32 %v3_e1ac to i8*
  store i8 %v1_e1ac, i8* %v4_e1ac, align 1
  %v0_e1b0 = load i32, i32* @r6, align 4
  %v1_e1b0 = trunc i32 %v0_e1b0 to i8
  %v2_e1b0 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1b0 = add i32 %v2_e1b0, 3
  %v4_e1b0 = inttoptr i32 %v3_e1b0 to i8*
  store i8 %v1_e1b0, i8* %v4_e1b0, align 1
  %v0_e1b4 = load i32, i32* @r6, align 4
  %v1_e1b4 = trunc i32 %v0_e1b4 to i8
  %v2_e1b4 = load i32, i32* %ip.global-to-local, align 4
  %v3_e1b4 = add i32 %v2_e1b4, 4
  %v4_e1b4 = inttoptr i32 %v3_e1b4 to i8*
  store i8 %v1_e1b4, i8* %v4_e1b4, align 1
  %v0_e1b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_e1b8 = add i32 %v0_e1b8, 1
  store i32 %v1_e1b8, i32* %r0.global-to-local, align 4
  %v0_e1bc = load i32, i32* @sb, align 4
  %v1_e1bc = trunc i32 %v0_e1bc to i8
  %v2_e1bc = load i32, i32* %r1.global-to-local, align 4
  %v3_e1bc = add i32 %v2_e1bc, 40
  %v4_e1bc = inttoptr i32 %v3_e1bc to i8*
  store i8 %v1_e1bc, i8* %v4_e1bc, align 1
  %v0_e1c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_e1c0, i32* %r2.global-to-local, align 4
  %v0_e1c4 = load i32, i32* @r7, align 4
  store i32 %v0_e1c4, i32* %r1.global-to-local, align 4
  %v3_e1c8 = call i32 @function_120c0(i32 %v1_e1b8, i32 %v0_e1c4, i32 %v0_e1c0)
  store i32 %v3_e1c8, i32* %r0.global-to-local, align 4
  %v1_e1d0 = load i32, i32* @r6, align 4
  %v10_e1d0 = inttoptr i32 %v1_e1d0 to i8*
  %v15_e1d0 = icmp eq i32 %v2_df48, %v1_e1d0
  store i1 %v15_e1d0, i1* %cpsr_z.global-to-local, align 1
  %v9_e1d4 = icmp sgt i8* %v3_df48, %v10_e1d0
  store i32 %v1_e1d0, i32* %lr.global-to-local, align 4
  %v0_e1e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e1e4, i32* %ip.global-to-local, align 4
  %extract.t72 = trunc i32 %v1_e1d0 to i8
  br i1 %v9_e1d4, label %dec_label_pc_e1e0, label %dec_label_pc_e21c

dec_label_pc_e1e0:                                ; preds = %bb136
  store i32 %v1_e1d0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e1ec

dec_label_pc_e1ec:                                ; preds = %.thread38, %dec_label_pc_e1e0
  %v1_e1f4 = phi i32 [ %v1_e1f458, %.thread38 ], [ %v1_e1d0, %dec_label_pc_e1e0 ]
  %v0_e1ec = phi i32 [ %v1_e208, %.thread38 ], [ %v1_e1d0, %dec_label_pc_e1e0 ]
  %v1_e1ec = load i32, i32* @r7, align 4
  %v2_e1ec = add i32 %v1_e1ec, %v0_e1ec
  %v3_e1ec = inttoptr i32 %v2_e1ec to i8*
  %v4_e1ec = load i8, i8* %v3_e1ec, align 1
  %v6_e1ec = zext i8 %v4_e1ec to i32
  store i32 %v6_e1ec, i32* %r3.global-to-local, align 4
  %v7_e1f0 = icmp eq i8 %v4_e1ec, 46
  store i1 %v7_e1f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e1f0, label %bb137, label %.thread34

.thread34:                                        ; preds = %dec_label_pc_e1ec
  %v1_e1f836 = add i32 %v1_e1f4, 1
  store i32 %v1_e1f836, i32* %r2.global-to-local, align 4
  br label %bb138

bb137:                                            ; preds = %dec_label_pc_e1ec
  %v2_e1f4 = trunc i32 %v1_e1f4 to i8
  %v3_e1f4 = load i32, i32* %ip.global-to-local, align 4
  %v4_e1f4 = inttoptr i32 %v3_e1f4 to i8*
  store i8 %v2_e1f4, i8* %v4_e1f4, align 1
  %v0_e1fc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_e1f8 = load i32, i32* %lr.global-to-local, align 4
  %v1_e1f8 = add i32 %v0_e1f8, 1
  store i32 %v1_e1f8, i32* %r2.global-to-local, align 4
  br i1 %v0_e1fc.pr, label %bb139, label %bb138

bb138:                                            ; preds = %.thread34, %bb137
  %v1_e1f837 = phi i32 [ %v1_e1f836, %.thread34 ], [ %v1_e1f8, %bb137 ]
  %v2_e1fc = urem i32 %v1_e1f837, 256
  store i32 %v2_e1fc, i32* %lr.global-to-local, align 4
  br label %bb139

bb139:                                            ; preds = %bb137, %bb138
  %v1_e1f459 = phi i32 [ %v0_e1f8, %bb137 ], [ %v2_e1fc, %bb138 ]
  %v0_e210.pr = phi i1 [ true, %bb137 ], [ false, %bb138 ]
  store i32 %v2_df48, i32* %r2.global-to-local, align 4
  %v0_e204 = load i32, i32* %r4.global-to-local, align 4
  %v1_e204 = load i32, i32* %r1.global-to-local, align 4
  %v2_e204 = add i32 %v1_e204, %v0_e204
  store i32 %v2_e204, i32* %r0.global-to-local, align 4
  %v1_e208 = add i32 %v1_e204, 1
  store i32 %v1_e208, i32* %r1.global-to-local, align 4
  br i1 %v0_e210.pr, label %bb140, label %.thread38

bb140:                                            ; preds = %bb139
  %v2_e20c = add i32 %v2_e204, 1
  store i32 %v2_e20c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread38

.thread38:                                        ; preds = %bb139, %bb140
  %v1_e1f458 = phi i32 [ %v1_e1f459, %bb139 ], [ 0, %bb140 ]
  %v9_e214 = icmp eq i32 %v2_df48, %v1_e208
  store i1 %v9_e214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e214, label %dec_label_pc_e21c.loopexit, label %dec_label_pc_e1ec

dec_label_pc_e21c.loopexit:                       ; preds = %.thread38
  %v2_e21c.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_e1f458 to i8
  br label %dec_label_pc_e21c

dec_label_pc_e21c:                                ; preds = %dec_label_pc_e21c.loopexit, %bb136
  %v2_e21c = phi i32 [ %v2_e21c.pre, %dec_label_pc_e21c.loopexit ], [ %v0_e1e4, %bb136 ]
  %v0_e21c.off0 = phi i8 [ %extract.t71, %dec_label_pc_e21c.loopexit ], [ %extract.t72, %bb136 ]
  %v3_e21c = inttoptr i32 %v2_e21c to i8*
  store i8 %v0_e21c.off0, i8* %v3_e21c, align 1
  %v3_e220 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_df48, i32* %ip.global-to-local, align 4
  store i32 %v1_dcd4, i32* @lr, align 4
  %v0_e22c = load i32, i32* %r4.global-to-local, align 4
  %v2_e22c = add i32 %v0_e22c, %v2_df48
  store i32 %v2_e22c, i32* %r3.global-to-local, align 4
  %v1_e230 = add i32 %v3_e220, 1
  store i32 %v1_e230, i32* @r4, align 4
  %v9_e234 = icmp eq i32 %v1_dcd4, %v1_e230
  store i1 %v9_e234, i1* %cpsr_z.global-to-local, align 1
  %v1_e238 = add i32 %v2_e22c, 2
  store i32 %v1_e238, i32* %r2.global-to-local, align 4
  %v0_e23c = load i32, i32* %sl.global-to-local, align 4
  %v1_e23c = trunc i32 %v0_e23c to i8
  %v4_e23c = inttoptr i32 %v1_e238 to i8*
  store i8 %v1_e23c, i8* %v4_e23c, align 1
  %v0_e240 = load i32, i32* %r8.global-to-local, align 4
  %v1_e240 = trunc i32 %v0_e240 to i8
  %v2_e240 = load i32, i32* %r2.global-to-local, align 4
  %v3_e240 = add i32 %v2_e240, 3
  %v4_e240 = inttoptr i32 %v3_e240 to i8*
  store i8 %v1_e240, i8* %v4_e240, align 1
  %v0_e244 = load i32, i32* %r8.global-to-local, align 4
  %v1_e244 = trunc i32 %v0_e244 to i8
  %v2_e244 = load i32, i32* %r2.global-to-local, align 4
  %v3_e244 = add i32 %v2_e244, 1
  %v4_e244 = inttoptr i32 %v3_e244 to i8*
  store i8 %v1_e244, i8* %v4_e244, align 1
  %v0_e248 = load i32, i32* %sl.global-to-local, align 4
  %v1_e248 = trunc i32 %v0_e248 to i8
  %v2_e248 = load i32, i32* %r2.global-to-local, align 4
  %v3_e248 = add i32 %v2_e248, 2
  %v4_e248 = inttoptr i32 %v3_e248 to i8*
  store i8 %v1_e248, i8* %v4_e248, align 1
  %v0_e24c = load i32, i32* @r4, align 4
  store i32 %v0_e24c, i32* %stack_var_-40, align 4
  %v8_e250 = icmp sgt i32 %v1_dcd4, %v1_e230
  br i1 %v8_e250, label %dec_label_pc_e0bc, label %dec_label_pc_e254

dec_label_pc_e254:                                ; preds = %dec_label_pc_e21c, %dec_label_pc_e418
  store i32 %v1_dcd4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_dfb8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_dfb8, label %dec_label_pc_e418, label %dec_label_pc_e268

dec_label_pc_e268:                                ; preds = %dec_label_pc_e254
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_e274 = load i32, i32* @sb, align 4
  %v2_e274 = add i32 %v0_e274, %v2_df48
  store i32 %v2_e274, i32* %r3.global-to-local, align 4
  %v1_e278 = add i32 %v2_e274, 47
  store i32 %v1_e278, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r8, align 4
  %v1_e280 = add i32 %v2_e274, 27
  store i32 %v1_e280, i32* @fp, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e37c

dec_label_pc_e290:                                ; preds = %dec_label_pc_e37c
  store i32 %v3_dfc8, i32* %r3.global-to-local, align 4
  %v9_e294 = icmp eq i32 %v3_dfc8, %v1_e294
  store i1 %v9_e294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e294, label %dec_label_pc_e3b8, label %dec_label_pc_e29c

dec_label_pc_e29c:                                ; preds = %dec_label_pc_e39c.dec_label_pc_e29c_crit_edge, %dec_label_pc_e290
  %v1_e2a0 = phi i32 [ %v1_e2a0.pre, %dec_label_pc_e39c.dec_label_pc_e29c_crit_edge ], [ %v1_e294, %dec_label_pc_e290 ]
  store i32 %v3_dfcc, i32* %ip.global-to-local, align 4
  %v9_e2a0 = icmp eq i32 %v3_dfcc, %v1_e2a0
  store i1 %v9_e2a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e2a0, label %dec_label_pc_e3d4, label %dec_label_pc_e2a8

dec_label_pc_e2a8:                                ; preds = %dec_label_pc_e3b8.dec_label_pc_e2a8_crit_edge, %dec_label_pc_e29c
  %v1_e2ac = phi i32 [ %v1_e2ac.pre, %dec_label_pc_e3b8.dec_label_pc_e2a8_crit_edge ], [ %v1_e2a0, %dec_label_pc_e29c ]
  store i32 %v3_dfd0, i32* %lr.global-to-local, align 4
  %v9_e2ac = icmp eq i32 %v3_dfd0, %v1_e2ac
  store i1 %v9_e2ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e2ac, label %dec_label_pc_e3f0, label %dec_label_pc_e2b4

dec_label_pc_e2b4:                                ; preds = %dec_label_pc_e3d4, %dec_label_pc_e2a8, %dec_label_pc_e3f0
  %v0_e2b4 = load i32, i32* @r6, align 4
  store i32 %v0_e2b4, i32* %r0.global-to-local, align 4
  %v0_e2b8 = load i32, i32* @sb, align 4
  store i32 %v0_e2b8, i32* %r1.global-to-local, align 4
  %v2_e2bc = call i32 @function_f974(i32 %v0_e2b4, i32 %v0_e2b8)
  %v0_e2c0 = load i32, i32* @r7, align 4
  %v1_e2c0 = trunc i32 %v0_e2c0 to i8
  %v2_e2c0 = load i32, i32* @r6, align 4
  %v3_e2c0 = load i32, i32* @sb, align 4
  %v4_e2c0 = add i32 %v3_e2c0, %v2_e2c0
  %v5_e2c0 = inttoptr i32 %v4_e2c0 to i8*
  store i8 %v1_e2c0, i8* %v5_e2c0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e2c8 = load i32, i32* @r7, align 4
  %v1_e2c8 = trunc i32 %v0_e2c8 to i8
  %v2_e2c8 = load i32, i32* @r4, align 4
  %v3_e2c8 = add i32 %v2_e2c8, 10
  %v4_e2c8 = inttoptr i32 %v3_e2c8 to i8*
  store i8 %v1_e2c8, i8* %v4_e2c8, align 1
  %v0_e2cc = load i32, i32* @r7, align 4
  %v1_e2cc = trunc i32 %v0_e2cc to i8
  %v2_e2cc = load i32, i32* @r4, align 4
  %v3_e2cc = add i32 %v2_e2cc, 11
  %v4_e2cc = inttoptr i32 %v3_e2cc to i8*
  store i8 %v1_e2cc, i8* %v4_e2cc, align 1
  %v0_e2d0 = load i32, i32* @r4, align 4
  store i32 %v0_e2d0, i32* @r0, align 4
  %v2_e2d4 = call i32 @function_e498(i32 %v0_e2d0, i32 20)
  %v3_e2d4 = trunc i32 %v2_e2d4 to i8
  store i32 %v2_e2d4, i32* %r0.global-to-local, align 4
  %v4_e2d8 = sdiv i32 %v2_e2d4, 256
  store i32 %v4_e2d8, i32* %r3.global-to-local, align 4
  %v1_e2dc = trunc i32 %v4_e2d8 to i8
  %v2_e2dc = load i32, i32* @r4, align 4
  %v3_e2dc = add i32 %v2_e2dc, 11
  %v4_e2dc = inttoptr i32 %v3_e2dc to i8*
  store i8 %v1_e2dc, i8* %v4_e2dc, align 1
  %v3_e2e0 = load i32, i32* @r4, align 4
  %v4_e2e0 = add i32 %v3_e2e0, 10
  %v5_e2e0 = inttoptr i32 %v4_e2e0 to i8*
  store i8 %v3_e2d4, i8* %v5_e2e0, align 1
  %v0_e2e4 = load i32, i32* @r7, align 4
  %v1_e2e4 = trunc i32 %v0_e2e4 to i8
  %v2_e2e4 = load i32, i32* @r5, align 4
  %v3_e2e4 = add i32 %v2_e2e4, 6
  %v4_e2e4 = inttoptr i32 %v3_e2e4 to i8*
  store i8 %v1_e2e4, i8* %v4_e2e4, align 1
  %v0_e2e8 = load i32, i32* @r7, align 4
  %v1_e2e8 = trunc i32 %v0_e2e8 to i8
  %v2_e2e8 = load i32, i32* @r5, align 4
  %v3_e2e8 = add i32 %v2_e2e8, 7
  %v4_e2e8 = inttoptr i32 %v3_e2e8 to i8*
  store i8 %v1_e2e8, i8* %v4_e2e8, align 1
  %v0_e2ec = load i32, i32* @r4, align 4
  %v1_e2ec = add i32 %v0_e2ec, 24
  %v2_e2ec = inttoptr i32 %v1_e2ec to i8*
  %v3_e2ec = load i8, i8* %v2_e2ec, align 1
  %v4_e2ec = zext i8 %v3_e2ec to i32
  store i32 %v4_e2ec, i32* %r3.global-to-local, align 4
  %v1_e2f0 = add i32 %v0_e2ec, 25
  %v2_e2f0 = inttoptr i32 %v1_e2f0 to i8*
  %v3_e2f0 = load i8, i8* %v2_e2f0, align 1
  %v4_e2f0 = zext i8 %v3_e2f0 to i32
  %v0_e2f4 = load i32, i32* @r5, align 4
  store i32 %v0_e2f4, i32* @r1, align 4
  %v4_e2f8 = mul nuw nsw i32 %v4_e2f0, 256
  %v5_e2f8 = or i32 %v4_e2f8, %v4_e2ec
  store i32 %v5_e2f8, i32* %r2.global-to-local, align 4
  store i32 %v0_e2ec, i32* %r0.global-to-local, align 4
  %v0_e300 = load i32, i32* @fp, align 4
  store i32 %v0_e300, i32* %r3.global-to-local, align 4
  %v4_e304 = call i32 @function_e4f4(i32 %v0_e2ec, i32 %v0_e2f4, i32 %v5_e2f8, i32 %v0_e300)
  %v5_e304 = trunc i32 %v4_e304 to i8
  store i32 %v4_e304, i32* %r0.global-to-local, align 4
  %v3_e308 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v5_e314 = mul i32 %v3_e308, 24
  store i32 %v5_e314, i32* %lr.global-to-local, align 4
  %v4_e31877 = udiv i32 %v4_e304, 256
  %v1_e31c = trunc i32 %v4_e31877 to i8
  %v2_e31c = load i32, i32* @r5, align 4
  %v3_e31c = add i32 %v2_e31c, 7
  %v4_e31c = inttoptr i32 %v3_e31c to i8*
  store i8 %v1_e31c, i8* %v4_e31c, align 1
  store i32 %stack_var_-2188.0, i32* %r3.global-to-local, align 4
  %v0_e324 = load i32, i32* %lr.global-to-local, align 4
  %v1_e324 = load i32, i32* %r2.global-to-local, align 4
  %v2_e324 = add i32 %v1_e324, %v0_e324
  store i32 %v2_e324, i32* %lr.global-to-local, align 4
  %v3_e328 = load i32, i32* @r5, align 4
  %v4_e328 = add i32 %v3_e328, 6
  %v5_e328 = inttoptr i32 %v4_e328 to i8*
  store i8 %v5_e304, i8* %v5_e328, align 1
  %v0_e32c = load i32, i32* %r3.global-to-local, align 4
  %v1_e32c = load i32, i32* %lr.global-to-local, align 4
  %v2_e32c = add i32 %v1_e32c, 4
  %v3_e32c = inttoptr i32 %v2_e32c to i32*
  store i32 %v0_e32c, i32* %v3_e32c, align 4
  %v0_e330 = load i32, i32* @r4, align 4
  %v1_e330 = add i32 %v0_e330, 20
  %v2_e330 = inttoptr i32 %v1_e330 to i32*
  %v3_e330 = load i32, i32* %v2_e330, align 4
  %v3_e334 = udiv i32 %v3_e330, 65536
  store i32 %v3_e334, i32* %r3.global-to-local, align 4
  %v3_e33816 = udiv i32 %v3_e330, 16777216
  %v1_e33c = trunc i32 %v3_e33816 to i8
  %v2_e33c = load i32, i32* %lr.global-to-local, align 4
  %v3_e33c = add i32 %v2_e33c, 3
  %v4_e33c = inttoptr i32 %v3_e33c to i8*
  store i8 %v1_e33c, i8* %v4_e33c, align 1
  %v0_e340 = load i32, i32* %r3.global-to-local, align 4
  %v1_e340 = trunc i32 %v0_e340 to i8
  %v2_e340 = load i32, i32* %lr.global-to-local, align 4
  %v3_e340 = add i32 %v2_e340, 2
  %v4_e340 = inttoptr i32 %v3_e340 to i8*
  store i8 %v1_e340, i8* %v4_e340, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e34c = load i32, i32* @r4, align 4
  store i32 %v0_e34c, i32* %r1.global-to-local, align 4
  store i32 %v3_df5c, i32* %r0.global-to-local, align 4
  store i32 %v1_e278, i32* %r2.global-to-local, align 4
  %v0_e358 = load i32, i32* %lr.global-to-local, align 4
  %v6_e360 = inttoptr i32 %v0_e34c to i32*
  %v7_e360 = call i32 @function_13258(i32 %v3_df5c, i32* %v6_e360, i32 %v1_e278, i32 16384, i32 %v0_e358, i32 16)
  %v3_e364 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e364, i32* %r3.global-to-local, align 4
  %v1_e36c = add i32 %v3_e364, 1
  store i32 %v1_e36c, i32* %r0.global-to-local, align 4
  %v9_e370 = icmp eq i32 %v1_dcd4, %v1_e36c
  store i1 %v9_e370, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e36c, i32* %stack_var_-40, align 4
  %v7_e378 = icmp sgt i32 %v1_dcd4, %v1_e36c
  br i1 %v7_e378, label %dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge, label %dec_label_pc_e418

dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge:    ; preds = %dec_label_pc_e2b4
  %v1_e388.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e37c

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge, %dec_label_pc_e268
  %v1_e294 = phi i32 [ %v1_e388.pre, %dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge ], [ 65535, %dec_label_pc_e268 ]
  %v1_e384 = phi i32 [ %v1_e36c, %dec_label_pc_e2b4.dec_label_pc_e37c_crit_edge ], [ 0, %dec_label_pc_e268 ]
  store i32 %v2_dcfc, i32* %lr.global-to-local, align 4
  store i32 %v3_dfc4, i32* %r2.global-to-local, align 4
  %v4_e384 = mul i32 %v1_e384, 4
  %v5_e384 = add i32 %v4_e384, %v2_dcfc
  %v6_e384 = inttoptr i32 %v5_e384 to i32*
  %v7_e384 = load i32, i32* %v6_e384, align 4
  store i32 %v7_e384, i32* @r4, align 4
  %v9_e388 = icmp eq i32 %v3_dfc4, %v1_e294
  store i1 %v9_e388, i1* %cpsr_z.global-to-local, align 1
  %v1_e38c = add i32 %v7_e384, 20
  store i32 %v1_e38c, i32* @r5, align 4
  %v1_e390 = add i32 %v7_e384, 41
  store i32 %v1_e390, i32* @r6, align 4
  %v1_e394 = add i32 %v7_e384, 28
  store i32 %v1_e394, i32* @sl, align 4
  br i1 %v9_e388, label %dec_label_pc_e39c, label %dec_label_pc_e290

dec_label_pc_e39c:                                ; preds = %dec_label_pc_e37c
  %v0_e39c = call i32 @function_f8c0()
  %v1_e39c = trunc i32 %v0_e39c to i8
  store i32 %v0_e39c, i32* %r0.global-to-local, align 4
  %v4_e3a078 = udiv i32 %v0_e39c, 256
  %v1_e3a4 = trunc i32 %v4_e3a078 to i8
  %v2_e3a4 = load i32, i32* @r4, align 4
  %v3_e3a4 = add i32 %v2_e3a4, 5
  %v4_e3a4 = inttoptr i32 %v3_e3a4 to i8*
  store i8 %v1_e3a4, i8* %v4_e3a4, align 1
  store i32 %v3_dfc8, i32* %r3.global-to-local, align 4
  %v1_e3ac = load i32, i32* @r8, align 4
  %v9_e3ac = icmp eq i32 %v3_dfc8, %v1_e3ac
  store i1 %v9_e3ac, i1* %cpsr_z.global-to-local, align 1
  %v3_e3b0 = load i32, i32* @r4, align 4
  %v4_e3b0 = add i32 %v3_e3b0, 4
  %v5_e3b0 = inttoptr i32 %v4_e3b0 to i8*
  store i8 %v1_e39c, i8* %v5_e3b0, align 1
  %v0_e3b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3b4, label %dec_label_pc_e3b8, label %dec_label_pc_e39c.dec_label_pc_e29c_crit_edge

dec_label_pc_e39c.dec_label_pc_e29c_crit_edge:    ; preds = %dec_label_pc_e39c
  %v1_e2a0.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e29c

dec_label_pc_e3b8:                                ; preds = %dec_label_pc_e39c, %dec_label_pc_e290
  %v0_e3b8 = call i32 @function_f8c0()
  %v1_e3b8 = trunc i32 %v0_e3b8 to i8
  store i32 %v0_e3b8, i32* %r0.global-to-local, align 4
  store i32 %v3_dfcc, i32* %ip.global-to-local, align 4
  %v4_e3c0 = sdiv i32 %v0_e3b8, 256
  store i32 %v4_e3c0, i32* %r3.global-to-local, align 4
  %v1_e3c4 = load i32, i32* @r8, align 4
  %v9_e3c4 = icmp eq i32 %v3_dfcc, %v1_e3c4
  store i1 %v9_e3c4, i1* %cpsr_z.global-to-local, align 1
  %v3_e3c8 = load i32, i32* @r4, align 4
  %v4_e3c8 = add i32 %v3_e3c8, 20
  %v5_e3c8 = inttoptr i32 %v4_e3c8 to i8*
  store i8 %v1_e3b8, i8* %v5_e3c8, align 1
  %v0_e3cc = load i32, i32* %r3.global-to-local, align 4
  %v1_e3cc = trunc i32 %v0_e3cc to i8
  %v2_e3cc = load i32, i32* @r5, align 4
  %v3_e3cc = add i32 %v2_e3cc, 1
  %v4_e3cc = inttoptr i32 %v3_e3cc to i8*
  store i8 %v1_e3cc, i8* %v4_e3cc, align 1
  %v0_e3d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3d0, label %dec_label_pc_e3d4, label %dec_label_pc_e3b8.dec_label_pc_e2a8_crit_edge

dec_label_pc_e3b8.dec_label_pc_e2a8_crit_edge:    ; preds = %dec_label_pc_e3b8
  %v1_e2ac.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e2a8

dec_label_pc_e3d4:                                ; preds = %dec_label_pc_e3b8, %dec_label_pc_e29c
  %v0_e3d4 = call i32 @function_f8c0()
  %v1_e3d4 = trunc i32 %v0_e3d4 to i8
  store i32 %v0_e3d4, i32* %r0.global-to-local, align 4
  store i32 %v3_dfd0, i32* %lr.global-to-local, align 4
  %v4_e3dc = sdiv i32 %v0_e3d4, 256
  store i32 %v4_e3dc, i32* %r3.global-to-local, align 4
  %v1_e3e0 = load i32, i32* @r8, align 4
  %v9_e3e0 = icmp eq i32 %v3_dfd0, %v1_e3e0
  store i1 %v9_e3e0, i1* %cpsr_z.global-to-local, align 1
  %v1_e3e4 = trunc i32 %v4_e3dc to i8
  %v2_e3e4 = load i32, i32* @r5, align 4
  %v3_e3e4 = add i32 %v2_e3e4, 3
  %v4_e3e4 = inttoptr i32 %v3_e3e4 to i8*
  store i8 %v1_e3e4, i8* %v4_e3e4, align 1
  %v3_e3e8 = load i32, i32* @r5, align 4
  %v4_e3e8 = add i32 %v3_e3e8, 2
  %v5_e3e8 = inttoptr i32 %v4_e3e8 to i8*
  store i8 %v1_e3d4, i8* %v5_e3e8, align 1
  %v0_e3ec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3ec, label %dec_label_pc_e3f0, label %dec_label_pc_e2b4

dec_label_pc_e3f0:                                ; preds = %dec_label_pc_e3d4, %dec_label_pc_e2a8
  %v0_e3f0 = call i32 @function_f8c0()
  %v1_e3f0 = trunc i32 %v0_e3f0 to i8
  store i32 %v0_e3f0, i32* %r0.global-to-local, align 4
  %v4_e3f4 = sdiv i32 %v0_e3f0, 256
  store i32 %v4_e3f4, i32* %r3.global-to-local, align 4
  %v3_e3f8 = load i32, i32* @r4, align 4
  %v4_e3f8 = add i32 %v3_e3f8, 28
  %v5_e3f8 = inttoptr i32 %v4_e3f8 to i8*
  store i8 %v1_e3f0, i8* %v5_e3f8, align 1
  %v0_e3fc = load i32, i32* %r3.global-to-local, align 4
  %v1_e3fc = trunc i32 %v0_e3fc to i8
  %v2_e3fc = load i32, i32* @sl, align 4
  %v3_e3fc = add i32 %v2_e3fc, 1
  %v4_e3fc = inttoptr i32 %v3_e3fc to i8*
  store i8 %v1_e3fc, i8* %v4_e3fc, align 1
  br label %dec_label_pc_e2b4

dec_label_pc_e404:                                ; preds = %dec_label_pc_df6c
  store i32 %v3_df5c, i32* %r0.global-to-local, align 4
  %v1_e408 = call i32 @function_129d8(i32 %v3_df5c)
  store i32 %v1_e408, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e40c

dec_label_pc_e40c:                                ; preds = %dec_label_pc_e418, %dec_label_pc_df44, %dec_label_pc_df2c, %dec_label_pc_e404
  %v29_e414 = phi i32 [ %v3_df5c, %dec_label_pc_df44 ], [ %v2_df38, %dec_label_pc_df2c ], [ %v1_e408, %dec_label_pc_e404 ], [ %v2_e41c, %dec_label_pc_e418 ]
  store i32 %v3_dcc8, i32* %r4.global-to-local, align 4
  store i32 %v15_dcc8, i32* %r8.global-to-local, align 4
  store i32 %v21_dcc8, i32* %sl.global-to-local, align 4
  store i32 %v24_dcc8, i32* %fp.global-to-local, align 4
  ret i32 %v29_e414

dec_label_pc_e418.critedge:                       ; preds = %dec_label_pc_df98
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_e418

dec_label_pc_e418:                                ; preds = %dec_label_pc_e2b4, %dec_label_pc_e418.critedge, %dec_label_pc_e254
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_e41c = call i32 @function_12ca8(i32* null)
  store i32 %v2_e41c, i32* %r0.global-to-local, align 4
  store i32 %v2_df38, i32* %ip.global-to-local, align 4
  %v9_e424 = icmp eq i32 %v2_df38, %v2_e41c
  store i1 %v9_e424, i1* %cpsr_z.global-to-local, align 1
  %v6_e428 = icmp slt i32 %v2_df38, %v2_e41c
  br i1 %v6_e428, label %dec_label_pc_e40c, label %dec_label_pc_e254

dec_label_pc_e430:                                ; preds = %dec_label_pc_dee8, %bb129
  %v0_def0.lcssa = phi i32 [ %v1_debc, %dec_label_pc_dee8 ], [ %v0_def0, %bb129 ]
  %v2_e430 = sub i32 %v0_def0.lcssa, %v4_de74
  store i32 %v2_e430, i32* %r2.global-to-local, align 4
  store i32 %v2_deac, i32* %r1.global-to-local, align 4
  store i32 %v2_de9c, i32* %r0.global-to-local, align 4
  %v3_e43c = call i32 @function_120c0(i32 %v2_de9c, i32 %v2_deac, i32 %v2_e430)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_de9c, i32* @r0, align 4
  %v2_e448 = load i32, i32* @r4, align 4
  %v3_e448 = inttoptr i32 %v2_e448 to i8*
  store i8 0, i8* %v3_e448, align 1
  %v1_e44c = call i32 @function_1309c(i32 %v2_de9c)
  store i32 %v1_e44c, i32* %r0.global-to-local, align 4
  %sext40 = mul i32 %v1_e44c, 16777216
  %phitmp = sdiv i32 %sext40, 16777216
  br label %dec_label_pc_df2c

dec_label_pc_e458:                                ; preds = %dec_label_pc_df00
  store i32 104859200, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_df2c

dec_label_pc_e468:                                ; preds = %dec_label_pc_df00
  br label %dec_label_pc_df2c

dec_label_pc_e47c:                                ; preds = %dec_label_pc_df00
  store i32 33686020, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_df2c

; uselistorder directives
  uselistorder i32 %v2_e41c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_e3f0, { 0, 2, 1 }
  uselistorder i32 %v4_e3dc, { 1, 0 }
  uselistorder i32 %v0_e3d4, { 0, 2, 1 }
  uselistorder i32 %v0_e3b8, { 0, 2, 1 }
  uselistorder i32 %v0_e39c, { 0, 2, 1 }
  uselistorder i32 %v7_e384, { 2, 1, 0, 3 }
  uselistorder i32 %v1_e294, { 2, 1, 0 }
  uselistorder i32 %v1_e36c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_e304, { 0, 2, 1 }
  uselistorder i32 %v0_e2ec, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e2d8, { 1, 0 }
  uselistorder i32 %v2_e2d4, { 0, 2, 1 }
  uselistorder i32 %v1_e278, { 1, 0, 2 }
  uselistorder i32 %v1_e208, { 0, 2, 1 }
  uselistorder i32 %v1_e204, { 1, 0 }
  uselistorder i32 %v2_e1fc, { 1, 0 }
  uselistorder i32 %v1_e1d0, { 2, 1, 4, 0, 3, 6, 5 }
  uselistorder i32 %v3_e074, { 1, 0 }
  uselistorder i32 %v3_e06c, { 1, 0 }
  uselistorder i32 %v1_e024, { 1, 0 }
  uselistorder i32 %v1_e01c, { 1, 0 }
  uselistorder i32 %v1_e000, { 1, 0 }
  uselistorder i32 %v3_dff8, { 1, 0 }
  uselistorder i32 %v1_dfbc, { 1, 0 }
  uselistorder i1 %v7_df90, { 1, 0 }
  uselistorder i1 %v7_df60, { 1, 0 }
  uselistorder i32 %v3_df5c, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_df48, { 0, 1, 6, 3, 5, 7, 4, 2, 8 }
  uselistorder i32 %v2_df38, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v0_df34, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2188.0, { 1, 0 }
  uselistorder i32 %v1_df04, { 1, 0 }
  uselistorder i32 %v0_df00, { 1, 0 }
  uselistorder i32 %v1_def8, { 1, 0 }
  uselistorder i32 %v1_def0, { 1, 2, 0 }
  uselistorder i1 %v7_dedc, { 1, 0 }
  uselistorder i32 %v1_ded8, { 1, 0, 2 }
  uselistorder i1 %v8_ded0, { 1, 0 }
  uselistorder i1 %v7_decc, { 1, 0 }
  uselistorder i32 %v1_dec0, { 1, 0 }
  uselistorder i8 %v2_deb4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_deb8, { 1, 0 }
  uselistorder i32 %v0_ded8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_deac, { 1, 0, 2, 3 }
  uselistorder i32 %v0_dea0, { 1, 0, 2 }
  uselistorder i32 %v2_de9c, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_de8c, { 1, 0, 4, 2, 3 }
  uselistorder i1 %v7_de84, { 1, 0 }
  uselistorder i32 %v4_de74, { 6, 5, 7, 4, 3, 1, 2, 0, 8 }
  uselistorder i32 %v0_de28, { 1, 0, 2, 3 }
  uselistorder i32 %v6_ddc8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_ddac, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v6_dd94, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v1_dd7c, { 1, 0 }
  uselistorder i32 %v7_dd38, { 1, 0, 3, 2 }
  uselistorder i32 %v6_dd14, { 1, 0 }
  uselistorder i32 %v2_dcfc, { 0, 3, 1, 2 }
  uselistorder i32 %v1_dcd4, { 3, 4, 2, 6, 7, 5, 8, 1, 0 }
  uselistorder i32* %stack_var_-40, { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 12, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 33, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 26, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 40, 39, 41, 43, 42, 45, 44, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 6, 5, 7, 8, 9, 11, 10, 12, 14, 13, 15, 16, 17, 18, 26, 19, 20, 21, 22, 23, 24, 25, 30, 27, 28, 29, 31, 33, 32, 35, 34, 36, 37, 38, 39, 41, 40, 42, 43, 45, 44, 46, 48, 47, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 9, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 23, 24, 25, 26 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 21, 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder i32 41, { 4, 5, 6, 0, 1, 7, 2, 8, 3, 9 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_a054, { 82, 83, 84, 85, 86, 87, 88, 89, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 90, 91 }
  uselistorder label %dec_label_pc_e418, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e40c, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_e2b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e254, { 1, 0 }
  uselistorder label %.thread38, { 1, 0 }
  uselistorder label %bb139, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
  uselistorder label %bb136, { 1, 0 }
  uselistorder label %.thread26, { 1, 0 }
  uselistorder label %dec_label_pc_def0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_dee8, { 1, 0 }
  uselistorder label %dec_label_pc_dedc, { 1, 0 }
}

define i32 @function_e490(i32 %arg1) local_unnamed_addr {
dec_label_pc_e490:
  call void @__pseudo_cond_branch(i1 false, i32 11152832)
  %v0_e494 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e494, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e490
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e490, %bb
  %v7_e494 = load i32, i32* @r0, align 4
  ret i32 %v7_e494

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e498(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e498:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_e4c8, label %dec_label_pc_e4a4

dec_label_pc_e4a4:                                ; preds = %dec_label_pc_e498
  %v0_e4a8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e4a8, %dec_label_pc_e4a4
  %v0_e4bc = phi i32 [ %v2_e4bc, %dec_label_pc_e4a8 ], [ 0, %dec_label_pc_e4a4 ]
  %v0_e4b0 = phi i32 [ %v1_e4b0, %dec_label_pc_e4a8 ], [ %arg1, %dec_label_pc_e4a4 ]
  %v0_e4c0 = phi i32 [ %v1_e4c0, %dec_label_pc_e4a8 ], [ %v0_e4a8.pre, %dec_label_pc_e4a4 ]
  %v1_e4a8 = inttoptr i32 %v0_e4c0 to i8*
  %v2_e4a8 = load i8, i8* %v1_e4a8, align 1
  %v3_e4a8 = zext i8 %v2_e4a8 to i32
  %v1_e4ac = add i32 %v0_e4c0, 1
  %v2_e4ac = inttoptr i32 %v1_e4ac to i8*
  %v3_e4ac = load i8, i8* %v2_e4ac, align 1
  %v4_e4ac = zext i8 %v3_e4ac to i32
  %v1_e4b0 = add i32 %v0_e4b0, -2
  %v4_e4b4 = mul nuw nsw i32 %v4_e4ac, 256
  %v5_e4b4 = or i32 %v4_e4b4, %v3_e4a8
  %v2_e4bc = add i32 %v5_e4b4, %v0_e4bc
  %v1_e4c0 = add i32 %v0_e4c0, 2
  store i32 %v1_e4c0, i32* @r0, align 4
  %v1_e4b0.cmp = icmp ugt i32 %v1_e4b0, 1
  br i1 %v1_e4b0.cmp, label %dec_label_pc_e4a8, label %dec_label_pc_e4c8

dec_label_pc_e4c8:                                ; preds = %dec_label_pc_e4a8, %dec_label_pc_e498
  %v1_e4d0 = phi i32 [ 0, %dec_label_pc_e498 ], [ %v2_e4bc, %dec_label_pc_e4a8 ]
  %v0_e4c8 = phi i32 [ %arg1, %dec_label_pc_e498 ], [ %v1_e4b0, %dec_label_pc_e4a8 ]
  %v7_e4c8 = icmp eq i32 %v0_e4c8, 1
  br i1 %v7_e4c8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e4c8
  %v1_e4cc = load i32, i32* @r0, align 4
  %v2_e4cc = inttoptr i32 %v1_e4cc to i8*
  %v3_e4cc = load i8, i8* %v2_e4cc, align 1
  %v4_e4cc = zext i8 %v3_e4cc to i32
  %v3_e4d0 = add i32 %v1_e4d0, %v4_e4cc
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e4c8, %bb
  %v0_e4d4 = phi i32 [ %v1_e4d0, %dec_label_pc_e4c8 ], [ %v3_e4d0, %bb ]
  %v3_e4d8 = urem i32 %v0_e4d4, 65536
  %v4_e4dc = udiv i32 %v0_e4d4, 65536
  %v5_e4dc = add nuw nsw i32 %v4_e4dc, %v3_e4d8
  %v4_e4e0 = udiv i32 %v5_e4dc, 65536
  %v5_e4e0 = add nuw nsw i32 %v4_e4e0, %v5_e4dc
  %v1_e4e4 = urem i32 %v5_e4e0, 65536
  %v3_e4ec = xor i32 %v1_e4e4, 65535
  ret i32 %v3_e4ec

; uselistorder directives
  uselistorder i32 %v5_e4dc, { 1, 0 }
  uselistorder i32 %v1_e4c0, { 1, 0 }
  uselistorder i32 %v1_e4b0, { 1, 0, 2 }
  uselistorder i32 %v0_e4c0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e4f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e4f4:
  %v3_e504 = urem i32 %arg2, 65536
  %v1_e508 = add i32 %arg1, 12
  %v1_e50c = inttoptr i32 %v1_e508 to i32*
  %v2_e50c = load i32, i32* %v1_e50c, align 4
  %v3_e50c = add i32 %arg1, 16
  %v4_e50c = inttoptr i32 %v3_e50c to i32*
  %v5_e50c = load i32, i32* %v4_e50c, align 4
  %v7_e510 = icmp sgt i32 %arg3, 1
  br i1 %v7_e510, label %dec_label_pc_e51c.preheader, label %dec_label_pc_e53c

dec_label_pc_e51c.preheader:                      ; preds = %dec_label_pc_e4f4
  %v0_e51c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_e51c

dec_label_pc_e51c:                                ; preds = %dec_label_pc_e51c.preheader, %dec_label_pc_e51c
  %v0_e530 = phi i32 [ 0, %dec_label_pc_e51c.preheader ], [ %v2_e530, %dec_label_pc_e51c ]
  %v0_e524 = phi i32 [ %arg3, %dec_label_pc_e51c.preheader ], [ %v1_e524, %dec_label_pc_e51c ]
  %v0_e534 = phi i32 [ %v0_e51c.pre, %dec_label_pc_e51c.preheader ], [ %v1_e534, %dec_label_pc_e51c ]
  %v1_e51c = inttoptr i32 %v0_e534 to i8*
  %v2_e51c = load i8, i8* %v1_e51c, align 1
  %v3_e51c = zext i8 %v2_e51c to i32
  %v1_e520 = add i32 %v0_e534, 1
  %v2_e520 = inttoptr i32 %v1_e520 to i8*
  %v3_e520 = load i8, i8* %v2_e520, align 1
  %v4_e520 = zext i8 %v3_e520 to i32
  %v1_e524 = add nsw i32 %v0_e524, -2
  %v4_e528 = mul nuw nsw i32 %v4_e520, 256
  %v5_e528 = or i32 %v4_e528, %v3_e51c
  %v2_e530 = add i32 %v5_e528, %v0_e530
  %v1_e534 = add i32 %v0_e534, 2
  store i32 %v1_e534, i32* @r1, align 4
  %v8_e538 = icmp sgt i32 %v1_e524, 1
  br i1 %v8_e538, label %dec_label_pc_e51c, label %dec_label_pc_e53c

dec_label_pc_e53c:                                ; preds = %dec_label_pc_e51c, %dec_label_pc_e4f4
  %v1_e544 = phi i32 [ 0, %dec_label_pc_e4f4 ], [ %v2_e530, %dec_label_pc_e51c ]
  %v0_e53c = phi i32 [ %arg3, %dec_label_pc_e4f4 ], [ %v1_e524, %dec_label_pc_e51c ]
  %v7_e53c = icmp eq i32 %v0_e53c, 1
  br i1 %v7_e53c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e53c
  %v1_e540 = load i32, i32* @r1, align 4
  %v2_e540 = inttoptr i32 %v1_e540 to i8*
  %v3_e540 = load i8, i8* %v2_e540, align 1
  %v4_e540 = zext i8 %v3_e540 to i32
  %v3_e544 = add i32 %v4_e540, %v1_e544
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e53c, %bb
  %v0_e568 = phi i32 [ %v1_e544, %dec_label_pc_e53c ], [ %v3_e544, %bb ]
  %v3_e54c = urem i32 %v2_e50c, 65536
  %v1_e554 = add i32 %arg1, 9
  %v2_e554 = inttoptr i32 %v1_e554 to i8*
  %v3_e554 = load i8, i8* %v2_e554, align 1
  %v4_e554 = zext i8 %v3_e554 to i32
  %v3_e558 = urem i32 %v5_e50c, 65536
  %v4_e55c = udiv i32 %v2_e50c, 65536
  %v3_e564 = mul nuw nsw i32 %v4_e554, 256
  %v4_e568 = udiv i32 %v5_e50c, 65536
  %v5_e568 = add i32 %v0_e568, %v4_e568
  %v2_e56c = add i32 %v5_e568, %v3_e564
  %v5_e55c = add nuw nsw i32 %v3_e54c, %v3_e504
  %v2_e560 = add nuw nsw i32 %v5_e55c, %v4_e55c
  %v2_e570 = add nuw nsw i32 %v2_e560, %v3_e558
  %v2_e574 = add i32 %v2_e56c, %v2_e570
  %tmp = icmp ult i32 %v2_e574, 65536
  br i1 %tmp, label %dec_label_pc_e594, label %dec_label_pc_e580

dec_label_pc_e580:                                ; preds = %.thread, %dec_label_pc_e580
  %v2_e5881 = phi i32 [ %v2_e588, %dec_label_pc_e580 ], [ %v2_e574, %.thread ]
  %v3_e58c2.in = phi i32 [ %v2_e588, %dec_label_pc_e580 ], [ %v2_e574, %.thread ]
  %v3_e58c2 = udiv i32 %v3_e58c2.in, 65536
  %v3_e584 = urem i32 %v2_e5881, 65536
  %v2_e588 = add nuw nsw i32 %v3_e584, %v3_e58c2
  %tmp14 = icmp ult i32 %v2_e588, 65536
  br i1 %tmp14, label %dec_label_pc_e594.loopexit, label %dec_label_pc_e580

dec_label_pc_e594.loopexit:                       ; preds = %dec_label_pc_e580
  br label %dec_label_pc_e594

dec_label_pc_e594:                                ; preds = %dec_label_pc_e594.loopexit, %.thread
  %v0_e594 = phi i32 [ %v2_e588, %dec_label_pc_e594.loopexit ], [ %v2_e574, %.thread ]
  %v1_e594 = urem i32 %v0_e594, 65536
  %v3_e59c = xor i32 %v1_e594, 65535
  ret i32 %v3_e59c

; uselistorder directives
  uselistorder i32 %v2_e588, { 2, 1, 3, 0 }
  uselistorder i32 %v2_e574, { 3, 0, 2, 1 }
  uselistorder i32 %v1_e544, { 1, 0 }
  uselistorder i32 %v1_e534, { 1, 0 }
  uselistorder i32 %v1_e524, { 0, 2, 1 }
  uselistorder i32 %v0_e534, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e580, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e51c, { 1, 0 }
}

define i32 @function_e5a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_e5a4:
  %v2_e5a8 = load i32, i32* @global_var_1dc90.93, align 4
  %v2_e5b0 = call i32 @function_12ad8(i32 %v2_e5a8, i32 9)
  %v0_e5b4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e5b4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e5a4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e5a4, %bb
  ret i32 %v2_e5b0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e5b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_e5b8:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e5b8 = load i32, i32* @r4, align 4
  store i32 %v3_e5b8, i32* %stack_var_-36, align 4
  %v6_e5b8 = load i32, i32* @r5, align 4
  %v9_e5b8 = load i32, i32* @r6, align 4
  %v12_e5b8 = load i32, i32* @r7, align 4
  %v15_e5b8 = load i32, i32* @r8, align 4
  %v18_e5b8 = load i32, i32* @sb, align 4
  %v21_e5b8 = load i32, i32* @sl, align 4
  %v24_e5b8 = load i32, i32* @fp, align 4
  %v2_e5cc = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_e5cc, i32* @sl, align 4
  %v3_e5d4 = mul i32 %arg1, 65536
  store i32 %v3_e5d4, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_e5e0 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_e5ec = bitcast i32* %stack_var_-4677 to i8*
  %v3_e5ec = call i32 @function_12fe0(i8* %v2_e5ec, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_e604 = bitcast i32* %stack_var_-8773 to i8*
  %v3_e604 = call i32 @function_12fe0(i8* %v2_e604, i32 0)
  %v2_e608 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_e608, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_e628 = call i32 @function_12fe0(i8* nonnull %stack_var_-581, i32 0)
  %v2_e62c = ptrtoint i8* %stack_var_-68 to i32
  %v1_e634 = load i32, i32* @r5, align 4
  %v4_e634 = udiv i32 %v1_e634, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_e654 = trunc i32 %v4_e634 to i8
  %v4_e654 = call i32 @function_12538(i8 %v3_e654, i32 16, i32 %v2_e62c)
  %v2_e65c = call i32 @function_12044(i8* nonnull %stack_var_-68)
  %v7_e660 = icmp eq i32 %v2_e65c, 2
  br i1 %v7_e660, label %dec_label_pc_eb0c, label %dec_label_pc_e668

dec_label_pc_e668:                                ; preds = %dec_label_pc_e5b8, %dec_label_pc_eb0c
  %v1_e66c = call i32 @function_11590(i32 6)
  %v1_e674 = call i32 @function_11590(i32 7)
  %v1_e67c = call i32 @function_11590(i32 8)
  %v1_e684 = call i32 @function_11590(i32 9)
  %v0_e688 = load i32, i32* @r4, align 4
  %v2_e690 = inttoptr i32 %v0_e688 to i32*
  %v3_e690 = call i32 @function_114ac(i32 9, i32* %v2_e690)
  %v0_e694 = load i32, i32* @r4, align 4
  %v2_e698 = inttoptr i32 %v3_e690 to i8*
  %v3_e698 = call i32 @function_12b04(i8* %v2_e698, i32 %v0_e694)
  %v7_e69c = icmp eq i32 %v3_e698, -1
  store i32 %v3_e698, i32* @r8, align 4
  br i1 %v7_e69c, label %dec_label_pc_eacc, label %dec_label_pc_e6a8.preheader

dec_label_pc_e6a8.preheader:                      ; preds = %dec_label_pc_e668
  %v4_e6b458 = call i32 @function_1229c(i8* nonnull %stack_var_-581, i32 512, i32 %v3_e698)
  %v2_e6b860 = icmp eq i32 %v4_e6b458, 0
  br i1 %v2_e6b860, label %dec_label_pc_e848.loopexit, label %dec_label_pc_e6c0.lr.ph

dec_label_pc_e6c0.lr.ph:                          ; preds = %dec_label_pc_e6a8.preheader
  %v2_e708 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e6c0

dec_label_pc_e6c0:                                ; preds = %dec_label_pc_e6c0.lr.ph, %dec_label_pc_e6a8.backedge
  %v3_e6c4 = load i8, i8* %stack_var_-581, align 1
  %v4_e6c4 = sext i8 %v3_e6c4 to i32
  %v2_e6c8 = icmp eq i8 %v3_e6c4, 0
  br i1 %v2_e6c8, label %bb130, label %bb

bb:                                               ; preds = %dec_label_pc_e6c0
  %v8_e6cc = icmp eq i8 %v3_e6c4, 58
  br i1 %v8_e6cc, label %.thread6, label %dec_label_pc_e6e0

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e6f8

bb130:                                            ; preds = %dec_label_pc_e6c0
  br label %dec_label_pc_e6f8

dec_label_pc_e6e0:                                ; preds = %bb
  %v1_e6e8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e6e4

dec_label_pc_e6e4:                                ; preds = %bb131, %dec_label_pc_e6e0
  %v0_e6e4 = phi i32 [ %v1_e6e4, %bb131 ], [ 0, %dec_label_pc_e6e0 ]
  %v1_e6e4 = add i32 %v0_e6e4, 1
  %v2_e6e8 = add i32 %v1_e6e4, %v1_e6e8.pre
  %v3_e6e8 = inttoptr i32 %v2_e6e8 to i8*
  %v4_e6e8 = load i8, i8* %v3_e6e8, align 1
  %v6_e6e8 = zext i8 %v4_e6e8 to i32
  %v2_e6ec = icmp eq i8 %v4_e6e8, 0
  br i1 %v2_e6ec, label %dec_label_pc_e6f8, label %bb131

bb131:                                            ; preds = %dec_label_pc_e6e4
  %v8_e6f0 = icmp eq i8 %v4_e6e8, 58
  br i1 %v8_e6f0, label %dec_label_pc_e6f8, label %dec_label_pc_e6e4

dec_label_pc_e6f8:                                ; preds = %dec_label_pc_e6e4, %bb131, %bb130, %.thread6
  %v1_e724 = phi i32 [ 0, %.thread6 ], [ 0, %bb130 ], [ %v1_e6e4, %bb131 ], [ %v1_e6e4, %dec_label_pc_e6e4 ]
  %v0_e6f8 = phi i32 [ %v4_e6c4, %.thread6 ], [ %v4_e6c4, %bb130 ], [ %v6_e6e8, %bb131 ], [ %v6_e6e8, %dec_label_pc_e6e4 ]
  %v2_e6f8 = icmp eq i32 %v0_e6f8, 0
  br i1 %v2_e6f8, label %dec_label_pc_e6a8.backedge, label %dec_label_pc_e700

dec_label_pc_e6a8.backedge:                       ; preds = %dec_label_pc_e6f8, %dec_label_pc_e7d0, %dec_label_pc_e81c, %dec_label_pc_e744
  %v0_e6b0 = load i32, i32* @r8, align 4
  %v4_e6b4 = call i32 @function_1229c(i8* nonnull %stack_var_-581, i32 512, i32 %v0_e6b0)
  %v2_e6b8 = icmp eq i32 %v4_e6b4, 0
  br i1 %v2_e6b8, label %dec_label_pc_e848.loopexit, label %dec_label_pc_e6c0

dec_label_pc_e700:                                ; preds = %dec_label_pc_e6f8
  %v1_e704 = add i32 %v1_e724, 2
  %v2_e70c = add i32 %v1_e704, %v2_e708
  %v1_e710 = add i32 %v2_e70c, -545
  %v2_e710 = inttoptr i32 %v1_e710 to i8*
  %v3_e710 = load i8, i8* %v2_e710, align 1
  %v2_e714 = icmp eq i8 %v3_e710, 0
  br i1 %v2_e714, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_e700
  %v8_e718 = icmp eq i8 %v3_e710, 32
  br i1 %v8_e718, label %.thread10, label %dec_label_pc_e724

.thread10:                                        ; preds = %bb132
  store i32 %v1_e704, i32* @r5, align 4
  br label %dec_label_pc_e744

bb133:                                            ; preds = %dec_label_pc_e700
  store i32 %v1_e704, i32* @r5, align 4
  br label %dec_label_pc_e744

dec_label_pc_e724:                                ; preds = %bb132
  %v0_e724 = load i32, i32* @r6, align 4
  %v2_e724 = add i32 %v0_e724, %v1_e724
  br label %dec_label_pc_e728

dec_label_pc_e728:                                ; preds = %bb134, %dec_label_pc_e724
  %v0_e73413 = phi i32 [ %v1_e734, %bb134 ], [ %v2_e724, %dec_label_pc_e724 ]
  %v1_e728 = add i32 %v0_e73413, 3
  %v2_e728 = inttoptr i32 %v1_e728 to i8*
  %v3_e728 = load i8, i8* %v2_e728, align 1
  %v2_e72c = icmp eq i8 %v3_e728, 0
  br i1 %v2_e72c, label %.thread12, label %bb134

.thread12:                                        ; preds = %dec_label_pc_e728
  %v1_e73414 = add i32 %v0_e73413, 1
  br label %dec_label_pc_e73c

bb134:                                            ; preds = %dec_label_pc_e728
  %v8_e730 = icmp eq i8 %v3_e728, 32
  %v1_e734 = add i32 %v0_e73413, 1
  br i1 %v8_e730, label %dec_label_pc_e73c, label %dec_label_pc_e728

dec_label_pc_e73c:                                ; preds = %bb134, %.thread12
  %v1_e73415 = phi i32 [ %v1_e73414, %.thread12 ], [ %v1_e734, %bb134 ]
  %v2_e73c = sub i32 %v1_e73415, %v0_e724
  %v1_e740 = add i32 %v2_e73c, 2
  store i32 %v1_e740, i32* @r5, align 4
  br label %dec_label_pc_e744

dec_label_pc_e744:                                ; preds = %bb133, %.thread10, %dec_label_pc_e73c
  %v1_e750 = phi i32 [ %v1_e704, %.thread10 ], [ %v1_e704, %bb133 ], [ %v1_e740, %dec_label_pc_e73c ]
  %v0_e744 = load i32, i32* @r6, align 4
  %v2_e744 = add i32 %v0_e744, %v1_e704
  store i32 %v2_e744, i32* @r4, align 4
  %v2_e750 = add i32 %v1_e750, %v2_e708
  store i32 0, i32* @r7, align 4
  %v3_e75c = add i32 %v2_e750, -545
  %v4_e75c = inttoptr i32 %v3_e75c to i8*
  store i8 0, i8* %v4_e75c, align 1
  %v1_e760 = inttoptr i32 %v2_e744 to i8*
  %v2_e760 = call i32 @function_12044(i8* %v1_e760)
  store i32 %v2_e760, i32* @r1, align 4
  %v0_e76c = load i32, i32* @r4, align 4
  %v3_e770 = inttoptr i32 %v0_e76c to i8*
  %v4_e770 = call i32 @function_12398(i8* %v3_e770, i32 %v2_e760, i32 %v2_e62c)
  %v7_e774 = icmp eq i32 %v4_e770, -1
  br i1 %v7_e774, label %dec_label_pc_e6a8.backedge, label %dec_label_pc_e790.preheader

dec_label_pc_e790.preheader:                      ; preds = %dec_label_pc_e744
  %v1_e778 = load i32, i32* @r7, align 4
  %v1_e77c = load i32, i32* @r6, align 4
  %v2_e77c = load i32, i32* @r5, align 4
  %v3_e77c = add i32 %v2_e77c, %v1_e77c
  store i32 %v1_e778, i32* @lr, align 4
  store i32 %v1_e778, i32* @r4, align 4
  %v1_e79050 = add i32 %v3_e77c, 2
  %v2_e79051 = inttoptr i32 %v1_e79050 to i8*
  %v3_e79052 = load i8, i8* %v2_e79051, align 1
  %v2_e79454 = icmp eq i8 %v3_e79052, 0
  %v1_e79856 = add i32 %v2_e77c, 2
  br i1 %v2_e79454, label %dec_label_pc_e7d0, label %dec_label_pc_e7a0

dec_label_pc_e7a0:                                ; preds = %dec_label_pc_e790.preheader, %dec_label_pc_e790.backedge
  %v0_e7d086 = phi i32 [ %v0_e7d085, %dec_label_pc_e790.backedge ], [ %v1_e778, %dec_label_pc_e790.preheader ]
  %v0_e7b8.pr = phi i32 [ %v0_e7b8.pr71, %dec_label_pc_e790.backedge ], [ %v1_e778, %dec_label_pc_e790.preheader ]
  %v0_eadc = phi i32 [ %v0_eadc74, %dec_label_pc_e790.backedge ], [ %v1_e778, %dec_label_pc_e790.preheader ]
  %v0_e79882 = phi i32 [ %v1_e798, %dec_label_pc_e790.backedge ], [ %v1_e79856, %dec_label_pc_e790.preheader ]
  %v0_e7c8 = phi i32 [ %v0_e790, %dec_label_pc_e790.backedge ], [ %v3_e77c, %dec_label_pc_e790.preheader ]
  %v1_e7a4.in = phi i8 [ %v3_e790, %dec_label_pc_e790.backedge ], [ %v3_e79052, %dec_label_pc_e790.preheader ]
  %v7_e7a0 = icmp eq i8 %v1_e7a4.in, 9
  br i1 %v7_e7a0, label %.thread23, label %bb135

bb135:                                            ; preds = %dec_label_pc_e7a0
  %v8_e7a4 = icmp eq i8 %v1_e7a4.in, 32
  br i1 %v8_e7a4, label %.thread23.thread35, label %dec_label_pc_e7b8

.thread23.thread35:                               ; preds = %bb135
  br label %dec_label_pc_e7c4

.thread23:                                        ; preds = %dec_label_pc_e7a0
  br label %dec_label_pc_e7c4

dec_label_pc_e7b8:                                ; preds = %bb135
  %v7_e7b8 = icmp eq i32 %v0_e7b8.pr, 1
  br i1 %v7_e7b8, label %dec_label_pc_eadc, label %dec_label_pc_e7c0

dec_label_pc_e7c0:                                ; preds = %dec_label_pc_eadc, %dec_label_pc_e7b8
  %v0_e7c479 = phi i32 [ %v1_eadc, %dec_label_pc_eadc ], [ %v0_eadc, %dec_label_pc_e7b8 ]
  br label %dec_label_pc_e7c4

dec_label_pc_e7c4:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e7c0
  %v0_e7c4 = phi i32 [ %v0_eadc, %.thread23.thread35 ], [ %v0_eadc, %.thread23 ], [ %v0_e7c479, %dec_label_pc_e7c0 ]
  %v0_e7b8.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e7c0 ]
  %v7_e7cc = icmp sgt i32 %v0_e7c4, 6
  br i1 %v7_e7cc, label %dec_label_pc_e7d0, label %dec_label_pc_e790.backedge

dec_label_pc_e7d0:                                ; preds = %dec_label_pc_e790.backedge, %dec_label_pc_e7c4, %dec_label_pc_e790.preheader
  %v1_e820 = phi i32 [ %v1_e79856, %dec_label_pc_e790.preheader ], [ %v1_e798, %dec_label_pc_e790.backedge ], [ %v0_e79882, %dec_label_pc_e7c4 ]
  %v0_e7d0 = phi i32 [ %v1_e778, %dec_label_pc_e790.preheader ], [ %v0_e7d085, %dec_label_pc_e790.backedge ], [ %v0_e7d086, %dec_label_pc_e7c4 ]
  %v2_e7d0 = icmp eq i32 %v0_e7d0, 0
  br i1 %v2_e7d0, label %dec_label_pc_e6a8.backedge, label %dec_label_pc_e7dc

dec_label_pc_e7dc:                                ; preds = %dec_label_pc_e7d0
  %v2_e7e4 = add i32 %v1_e820, %v2_e708
  %v1_e7e8 = add i32 %v2_e7e4, -545
  %v2_e7e8 = inttoptr i32 %v1_e7e8 to i8*
  %v3_e7e8 = load i8, i8* %v2_e7e8, align 1
  %v2_e7ec = icmp eq i8 %v3_e7e8, 0
  br i1 %v2_e7ec, label %dec_label_pc_e81c, label %bb136

bb136:                                            ; preds = %dec_label_pc_e7dc
  %v8_e7f0 = icmp eq i8 %v3_e7e8, 32
  br i1 %v8_e7f0, label %dec_label_pc_e81c, label %dec_label_pc_e7f8

dec_label_pc_e7f8:                                ; preds = %bb136
  %v2_e7f8 = add i32 %v1_e820, %v1_e77c
  br label %dec_label_pc_e7fc

dec_label_pc_e7fc:                                ; preds = %bb137, %dec_label_pc_e7f8
  %v0_e80828 = phi i32 [ %v1_e808, %bb137 ], [ %v1_e820, %dec_label_pc_e7f8 ]
  %v0_e7fc = phi i32 [ %v1_e7fc, %bb137 ], [ %v2_e7f8, %dec_label_pc_e7f8 ]
  %v1_e7fc = add i32 %v0_e7fc, 1
  %v2_e7fc = inttoptr i32 %v1_e7fc to i8*
  %v3_e7fc = load i8, i8* %v2_e7fc, align 1
  %v2_e800 = icmp eq i8 %v3_e7fc, 0
  br i1 %v2_e800, label %.thread27, label %bb137

.thread27:                                        ; preds = %dec_label_pc_e7fc
  %v1_e80829 = add i32 %v0_e80828, 1
  br label %dec_label_pc_e810

bb137:                                            ; preds = %dec_label_pc_e7fc
  %v8_e804 = icmp eq i8 %v3_e7fc, 32
  %v1_e808 = add i32 %v0_e80828, 1
  br i1 %v8_e804, label %dec_label_pc_e810, label %dec_label_pc_e7fc

dec_label_pc_e810:                                ; preds = %bb137, %.thread27
  %v1_e818 = phi i32 [ %v1_e80829, %.thread27 ], [ %v1_e808, %bb137 ]
  %v2_e818 = add i32 %v1_e818, %v2_e708
  br label %dec_label_pc_e81c

dec_label_pc_e81c:                                ; preds = %dec_label_pc_e7dc, %bb136, %dec_label_pc_e810
  %v2_e828 = phi i32 [ %v2_e7e4, %dec_label_pc_e7dc ], [ %v2_e7e4, %bb136 ], [ %v2_e818, %dec_label_pc_e810 ]
  %v2_e820 = add i32 %v1_e820, %v1_e77c
  store i32 %v2_e820, i32* @r4, align 4
  %v3_e828 = add i32 %v2_e828, -545
  %v4_e828 = inttoptr i32 %v3_e828 to i8*
  store i8 0, i8* %v4_e828, align 1
  %v1_e82c = inttoptr i32 %v2_e820 to i8*
  %v2_e82c = call i32 @function_12044(i8* %v1_e82c)
  %v8_e834 = icmp sgt i32 %v2_e82c, 15
  br i1 %v8_e834, label %dec_label_pc_e6a8.backedge, label %dec_label_pc_e838

dec_label_pc_e838:                                ; preds = %dec_label_pc_e81c
  %v0_e83c = load i32, i32* @r4, align 4
  %v2_e840 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e840, i32* @r0, align 4
  %v2_e844 = bitcast i32* %stack_var_-52 to i8*
  %v3_e844 = call i32 @function_1206c(i8* %v2_e844, i32 %v0_e83c)
  br label %dec_label_pc_e848

dec_label_pc_e848.loopexit:                       ; preds = %dec_label_pc_e6a8.backedge, %dec_label_pc_e6a8.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre99 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e848

dec_label_pc_e848:                                ; preds = %dec_label_pc_e848.loopexit, %dec_label_pc_e838
  %v1_e858.pre-phi = phi i8* [ %.pre99, %dec_label_pc_e848.loopexit ], [ %v2_e844, %dec_label_pc_e838 ]
  %v2_e854.pre-phi = phi i32 [ %.pre, %dec_label_pc_e848.loopexit ], [ %v2_e840, %dec_label_pc_e838 ]
  %v0_e848 = load i32, i32* @r8, align 4
  %v1_e84c = call i32 @function_129d8(i32 %v0_e848)
  %v2_e858 = call i32 @function_12044(i8* %v1_e858.pre-phi)
  store i32 %v2_e858, i32* @r4, align 4
  %v2_e85c = icmp eq i32 %v2_e858, 0
  br i1 %v2_e85c, label %dec_label_pc_eaac, label %dec_label_pc_e864

dec_label_pc_e864:                                ; preds = %dec_label_pc_e848
  %v3_e86c = call i32 @function_114ac(i32 6, i32* null)
  store i32 %v3_e86c, i32* @r0, align 4
  %v1_e870 = call i32 @function_12db4(i32 %v3_e86c)
  store i32 %v1_e870, i32* @r8, align 4
  %v2_e874 = icmp eq i32 %v1_e870, 0
  br i1 %v2_e874, label %dec_label_pc_eaa4, label %dec_label_pc_e884.preheader

dec_label_pc_e884.preheader:                      ; preds = %dec_label_pc_e864
  store i32 0, i32* @r5, align 4
  %v1_e88845 = inttoptr i32 %v1_e870 to i32*
  %v2_e88846 = call i32 @function_12eb0(i32* %v1_e88845)
  %v2_e88c48 = icmp eq i32 %v2_e88846, 0
  br i1 %v2_e88c48, label %dec_label_pc_ea98, label %dec_label_pc_e894.preheader

dec_label_pc_e884.loopexit:                       ; preds = %dec_label_pc_e89c, %dec_label_pc_e8b0, %dec_label_pc_e918
  %v0_e884 = load i32, i32* @r8, align 4
  %v1_e888 = inttoptr i32 %v0_e884 to i32*
  %v2_e888 = call i32 @function_12eb0(i32* %v1_e888)
  %v2_e88c = icmp eq i32 %v2_e888, 0
  br i1 %v2_e88c, label %dec_label_pc_ea98, label %dec_label_pc_e894.preheader

dec_label_pc_e894.preheader:                      ; preds = %dec_label_pc_e884.preheader, %dec_label_pc_e884.loopexit
  %v0_e89c94 = phi i32 [ %v2_e888, %dec_label_pc_e884.loopexit ], [ %v2_e88846, %dec_label_pc_e884.preheader ]
  br label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %dec_label_pc_e894.preheader, %dec_label_pc_ea80
  %v0_e8a8 = phi i32 [ %v0_e89c94, %dec_label_pc_e894.preheader ], [ %v2_ea8c, %dec_label_pc_ea80 ]
  %v0_e894 = load i32, i32* @r5, align 4
  %v2_e894 = icmp eq i32 %v0_e894, 0
  br i1 %v2_e894, label %dec_label_pc_e89c, label %dec_label_pc_ea98

dec_label_pc_e89c:                                ; preds = %dec_label_pc_e894
  %v1_e89c = add i32 %v0_e8a8, 11
  %v2_e89c = inttoptr i32 %v1_e89c to i8*
  %v3_e89c = load i8, i8* %v2_e89c, align 1
  %v4_e89c = zext i8 %v3_e89c to i32
  %v1_e8a0 = add nsw i32 %v4_e89c, -48
  store i32 %v1_e89c, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e8a0, 9
  br i1 %tmp, label %dec_label_pc_e884.loopexit, label %dec_label_pc_e8b0

dec_label_pc_e8b0:                                ; preds = %dec_label_pc_e89c
  %v3_e8b8 = call i32 @function_114ac(i32 6, i32* null)
  store i32 %v2_e5cc, i32* @r0, align 4
  %v3_e8c4 = call i32 @function_1206c(i8* %v2_e5ec, i32 %v3_e8b8)
  %v2_e8cc = call i32 @function_12044(i8* %v2_e5ec)
  %v0_e8d0 = load i32, i32* @r7, align 4
  %v0_e8d4 = load i32, i32* @sl, align 4
  %v2_e8d4 = add i32 %v0_e8d4, %v2_e8cc
  store i32 %v2_e8d4, i32* @r0, align 4
  %v2_e8d8 = inttoptr i32 %v2_e8d4 to i8*
  %v3_e8d8 = call i32 @function_1206c(i8* %v2_e8d8, i32 %v0_e8d0)
  %v2_e8e0 = call i32 @function_12044(i8* %v2_e5ec)
  %v0_e8e4 = load i32, i32* @r5, align 4
  store i32 %v2_e8e0, i32* @r4, align 4
  %v2_e8f0 = inttoptr i32 %v0_e8e4 to i32*
  %v3_e8f0 = call i32 @function_114ac(i32 7, i32* %v2_e8f0)
  %v0_e8f8 = load i32, i32* @sl, align 4
  %v1_e8f8 = load i32, i32* @r4, align 4
  %v2_e8f8 = add i32 %v1_e8f8, %v0_e8f8
  store i32 %v2_e8f8, i32* @r0, align 4
  %v2_e8fc = inttoptr i32 %v2_e8f8 to i8*
  %v3_e8fc = call i32 @function_1206c(i8* %v2_e8fc, i32 %v3_e8f0)
  %v4_e90c = call i32 @function_12bcc(i8* %v2_e5ec, i32 %v2_e5e0, i32 4096)
  %v7_e910 = icmp eq i32 %v4_e90c, -1
  br i1 %v7_e910, label %dec_label_pc_e884.loopexit, label %dec_label_pc_e918

dec_label_pc_e918:                                ; preds = %dec_label_pc_e8b0
  %v0_e918 = load i32, i32* @r5, align 4
  %v2_e920 = inttoptr i32 %v0_e918 to i32*
  %v3_e920 = call i32 @function_114ac(i32 6, i32* %v2_e920)
  store i32 %v2_e5cc, i32* @r0, align 4
  %v3_e92c = call i32 @function_1206c(i8* %v2_e5ec, i32 %v3_e920)
  %v2_e934 = call i32 @function_12044(i8* %v2_e5ec)
  %v0_e938 = load i32, i32* @r7, align 4
  %v0_e93c = load i32, i32* @sl, align 4
  %v2_e93c = add i32 %v0_e93c, %v2_e934
  store i32 %v2_e93c, i32* @r0, align 4
  %v2_e940 = inttoptr i32 %v2_e93c to i8*
  %v3_e940 = call i32 @function_1206c(i8* %v2_e940, i32 %v0_e938)
  %v2_e948 = call i32 @function_12044(i8* %v2_e5ec)
  %v0_e94c = load i32, i32* @r5, align 4
  store i32 %v2_e948, i32* @r4, align 4
  %v2_e958 = inttoptr i32 %v0_e94c to i32*
  %v3_e958 = call i32 @function_114ac(i32 8, i32* %v2_e958)
  %v0_e960 = load i32, i32* @sl, align 4
  %v1_e960 = load i32, i32* @r4, align 4
  %v2_e960 = add i32 %v1_e960, %v0_e960
  store i32 %v2_e960, i32* @r0, align 4
  %v2_e964 = inttoptr i32 %v2_e960 to i8*
  %v3_e964 = call i32 @function_1206c(i8* %v2_e964, i32 %v3_e958)
  store i32 %v2_e5cc, i32* @r0, align 4
  %v1_e96c = call i32 @function_12db4(i32 %v2_e5cc)
  store i32 %v1_e96c, i32* @sb, align 4
  %v2_e970 = icmp eq i32 %v1_e96c, 0
  br i1 %v2_e970, label %dec_label_pc_e884.loopexit, label %dec_label_pc_e978.preheader

dec_label_pc_e978.preheader:                      ; preds = %dec_label_pc_e918
  %v1_e97c40 = inttoptr i32 %v1_e96c to i32*
  %v2_e97c41 = call i32 @function_12eb0(i32* %v1_e97c40)
  store i32 %v2_e97c41, i32* @r6, align 4
  %v2_e98043 = icmp eq i32 %v2_e97c41, 0
  br i1 %v2_e98043, label %dec_label_pc_ea80, label %dec_label_pc_e990thread-pre-split

dec_label_pc_e978.loopexit:                       ; preds = %dec_label_pc_e998, %dec_label_pc_ea30
  %v0_e978 = load i32, i32* @sb, align 4
  %v1_e97c = inttoptr i32 %v0_e978 to i32*
  %v2_e97c = call i32 @function_12eb0(i32* %v1_e97c)
  store i32 %v2_e97c, i32* @r6, align 4
  %v2_e980 = icmp eq i32 %v2_e97c, 0
  br i1 %v2_e980, label %dec_label_pc_ea80, label %dec_label_pc_e990thread-pre-split

dec_label_pc_e990thread-pre-split:                ; preds = %dec_label_pc_e978.preheader, %dec_label_pc_e978.loopexit
  %v0_e990.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e990

dec_label_pc_e990:                                ; preds = %dec_label_pc_e990thread-pre-split, %dec_label_pc_ea58
  %v0_e990 = phi i32 [ %v0_e990.pr, %dec_label_pc_e990thread-pre-split ], [ 1, %dec_label_pc_ea58 ]
  %v2_e990 = icmp eq i32 %v0_e990, 0
  br i1 %v2_e990, label %dec_label_pc_e998, label %dec_label_pc_ea80

dec_label_pc_e998:                                ; preds = %dec_label_pc_e990
  %v2_e998 = call i32 @function_120e4(i32 %v2_e5e0, i32 4096)
  %v0_e99c = load i32, i32* @r5, align 4
  %v2_e9a4 = inttoptr i32 %v0_e99c to i32*
  %v3_e9a4 = call i32 @function_114ac(i32 6, i32* %v2_e9a4)
  store i32 %v2_e5cc, i32* @r0, align 4
  %v3_e9b0 = call i32 @function_1206c(i8* %v2_e5ec, i32 %v3_e9a4)
  %v2_e9b8 = call i32 @function_12044(i8* %v2_e5ec)
  %v0_e9bc = load i32, i32* @r7, align 4
  %v0_e9c0 = load i32, i32* @sl, align 4
  %v2_e9c0 = add i32 %v0_e9c0, %v2_e9b8
  store i32 %v2_e9c0, i32* @r0, align 4
  %v2_e9c4 = inttoptr i32 %v2_e9c0 to i8*
  %v3_e9c4 = call i32 @function_1206c(i8* %v2_e9c4, i32 %v0_e9bc)
  %v2_e9cc = call i32 @function_12044(i8* %v2_e5ec)
  %v0_e9d0 = load i32, i32* @r5, align 4
  store i32 %v2_e9cc, i32* @r4, align 4
  %v2_e9dc = inttoptr i32 %v0_e9d0 to i32*
  %v3_e9dc = call i32 @function_114ac(i32 8, i32* %v2_e9dc)
  %v0_e9e4 = load i32, i32* @sl, align 4
  %v1_e9e4 = load i32, i32* @r4, align 4
  %v2_e9e4 = add i32 %v1_e9e4, %v0_e9e4
  store i32 %v2_e9e4, i32* @r0, align 4
  %v2_e9e8 = inttoptr i32 %v2_e9e4 to i8*
  %v3_e9e8 = call i32 @function_1206c(i8* %v2_e9e8, i32 %v3_e9dc)
  %v2_e9f0 = call i32 @function_12044(i8* %v2_e5ec)
  %v0_e9f8 = load i32, i32* @sl, align 4
  %v2_e9f8 = add i32 %v0_e9f8, %v2_e9f0
  store i32 %v2_e9f8, i32* @r0, align 4
  %v2_e9fc = inttoptr i32 %v2_e9f8 to i8*
  %v3_e9fc = call i32 @function_1206c(i8* %v2_e9fc, i32 ptrtoint (i32* @global_var_150d8.23 to i32))
  %v2_ea04 = call i32 @function_12044(i8* %v2_e5ec)
  %v0_ea08 = load i32, i32* @r6, align 4
  %v1_ea08 = add i32 %v0_ea08, 11
  %v0_ea0c = load i32, i32* @sl, align 4
  %v2_ea0c = add i32 %v0_ea0c, %v2_ea04
  store i32 %v2_ea0c, i32* @r0, align 4
  %v2_ea10 = inttoptr i32 %v2_ea0c to i8*
  %v3_ea10 = call i32 @function_1206c(i8* %v2_ea10, i32 %v1_ea08)
  %v4_ea20 = call i32 @function_12bcc(i8* %v2_e5ec, i32 %v2_e5e0, i32 4096)
  %v7_ea24 = icmp eq i32 %v4_ea20, -1
  br i1 %v7_ea24, label %dec_label_pc_e978.loopexit, label %dec_label_pc_ea30

dec_label_pc_ea30:                                ; preds = %dec_label_pc_e998
  %v2_ea30 = call i32 @function_12044(i8* %v2_e604)
  store i32 %v2_ea30, i32* @r1, align 4
  %v4_ea44 = call i32 @function_12398(i8* %v2_e604, i32 %v2_ea30, i32 %v2_e854.pre-phi)
  %v7_ea48 = icmp eq i32 %v4_ea44, -1
  br i1 %v7_ea48, label %dec_label_pc_e978.loopexit, label %dec_label_pc_ea58

dec_label_pc_ea58:                                ; preds = %dec_label_pc_ea30
  %v0_ea50 = load i32, i32* @r7, align 4
  %v2_ea58 = inttoptr i32 %v0_ea50 to i8*
  %v3_ea58 = call i32 @function_12170(i8* %v2_ea58, i32 10)
  %v2_ea60 = call i32 @function_12ad8(i32 %v3_ea58, i32 9)
  %v0_ea64 = load i32, i32* @sb, align 4
  %v1_ea68 = inttoptr i32 %v0_ea64 to i32*
  %v2_ea68 = call i32 @function_12eb0(i32* %v1_ea68)
  store i32 %v2_ea68, i32* @r6, align 4
  %v2_ea6c = icmp eq i32 %v2_ea68, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_ea6c, label %dec_label_pc_ea80, label %dec_label_pc_e990

dec_label_pc_ea80:                                ; preds = %dec_label_pc_e978.loopexit, %dec_label_pc_ea58, %dec_label_pc_e990, %dec_label_pc_e978.preheader
  %v0_ea80 = load i32, i32* @sb, align 4
  %v1_ea84 = inttoptr i32 %v0_ea80 to i32*
  %v2_ea84 = call i32 @function_12d00(i32* %v1_ea84)
  %v0_ea88 = load i32, i32* @r8, align 4
  %v1_ea8c = inttoptr i32 %v0_ea88 to i32*
  %v2_ea8c = call i32 @function_12eb0(i32* %v1_ea8c)
  %v2_ea90 = icmp eq i32 %v2_ea8c, 0
  br i1 %v2_ea90, label %dec_label_pc_ea98, label %dec_label_pc_e894

dec_label_pc_ea98:                                ; preds = %dec_label_pc_e884.loopexit, %dec_label_pc_ea80, %dec_label_pc_e894, %dec_label_pc_e884.preheader
  %v0_ea98 = load i32, i32* @r8, align 4
  %v1_ea9c = inttoptr i32 %v0_ea98 to i32*
  %v2_ea9c = call i32 @function_12d00(i32* %v1_ea9c)
  %v0_eaa0 = load i32, i32* @r5, align 4
  %v1_eaa0 = urem i32 %v0_eaa0, 256
  br label %dec_label_pc_eaa4

dec_label_pc_eaa4:                                ; preds = %dec_label_pc_e864, %dec_label_pc_ea98
  %storemerge = phi i32 [ %v1_eaa0, %dec_label_pc_ea98 ], [ 0, %dec_label_pc_e864 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_eaa8 = call i32 @function_13c2c(i32 1)
  br label %dec_label_pc_eaac

dec_label_pc_eaac:                                ; preds = %dec_label_pc_e848, %dec_label_pc_eaa4
  %v1_eab0 = call i32 @function_114d8(i32 6)
  %v1_eab8 = call i32 @function_114d8(i32 7)
  %v1_eac0 = call i32 @function_114d8(i32 8)
  %v1_eac8 = call i32 @function_114d8(i32 9)
  br label %dec_label_pc_eacc

dec_label_pc_eacc:                                ; preds = %dec_label_pc_e668, %dec_label_pc_eaac
  %v0_eacc = load i32, i32* @r4, align 4
  %v2_ead8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ead8, i32* @r4, align 4
  store i32 %v6_e5b8, i32* @r5, align 4
  store i32 %v9_e5b8, i32* @r6, align 4
  store i32 %v12_e5b8, i32* @r7, align 4
  store i32 %v15_e5b8, i32* @r8, align 4
  store i32 %v18_e5b8, i32* @sb, align 4
  store i32 %v21_e5b8, i32* @sl, align 4
  store i32 %v24_e5b8, i32* @fp, align 4
  ret i32 %v0_eacc

dec_label_pc_eadc:                                ; preds = %dec_label_pc_e7b8
  %v1_eadc = add i32 %v0_eadc, 1
  store i32 %v1_eadc, i32* @lr, align 4
  %v7_eae0 = icmp eq i32 %v0_eadc, 0
  br i1 %v7_eae0, label %dec_label_pc_eae8, label %dec_label_pc_e7c0

dec_label_pc_eae8:                                ; preds = %dec_label_pc_eadc
  %v1_eae8 = add i32 %v0_e7c8, 3
  %v2_eae8 = inttoptr i32 %v1_eae8 to i8*
  %v3_eae8 = load i8, i8* %v2_eae8, align 1
  %v7_eaec = icmp eq i8 %v3_eae8, 65
  br i1 %v7_eaec, label %dec_label_pc_eafc, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_eae8
  br label %dec_label_pc_e790.backedge

dec_label_pc_eafc:                                ; preds = %dec_label_pc_eae8
  store i32 %v1_eadc, i32* @r4, align 4
  br label %dec_label_pc_e790.backedge

dec_label_pc_e790.backedge:                       ; preds = %.thread33, %dec_label_pc_eafc, %dec_label_pc_e7c4
  %v0_e7d085 = phi i32 [ %v1_eadc, %dec_label_pc_eafc ], [ %v0_e7d086, %dec_label_pc_e7c4 ], [ %v0_e7d086, %.thread33 ]
  %v0_eadc74 = phi i32 [ %v1_eadc, %dec_label_pc_eafc ], [ %v0_e7c4, %dec_label_pc_e7c4 ], [ %v1_eadc, %.thread33 ]
  %v0_e7b8.pr71 = phi i32 [ 0, %dec_label_pc_eafc ], [ %v0_e7b8.pr72, %dec_label_pc_e7c4 ], [ 0, %.thread33 ]
  %v0_e790 = add i32 %v0_e7c8, 1
  %v1_e790 = add i32 %v0_e7c8, 3
  %v2_e790 = inttoptr i32 %v1_e790 to i8*
  %v3_e790 = load i8, i8* %v2_e790, align 1
  %v2_e794 = icmp eq i8 %v3_e790, 0
  %v1_e798 = add i32 %v0_e79882, 1
  br i1 %v2_e794, label %dec_label_pc_e7d0, label %dec_label_pc_e7a0

dec_label_pc_eb0c:                                ; preds = %dec_label_pc_e5b8
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_e668

; uselistorder directives
  uselistorder i32 %v1_e798, { 1, 0 }
  uselistorder i8 %v3_e790, { 1, 0 }
  uselistorder i32 %v0_e7d085, { 1, 0 }
  uselistorder i32 %v1_eadc, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_ea8c, { 1, 0 }
  uselistorder i32 %v1_e7fc, { 1, 0 }
  uselistorder i32 %v0_e80828, { 1, 0 }
  uselistorder i32 %v1_e820, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e7c4, { 1, 0 }
  uselistorder i32 %v0_e79882, { 1, 0 }
  uselistorder i32 %v0_eadc, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e7d086, { 1, 2, 0 }
  uselistorder i32 %v1_e79856, { 1, 0 }
  uselistorder i32 %v2_e77c, { 1, 0 }
  uselistorder i32 %v1_e778, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_e73413, { 1, 0, 2 }
  uselistorder i32 %v0_e724, { 1, 0 }
  uselistorder i32 %v1_e704, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_e698, { 1, 2, 0 }
  uselistorder i32 %v2_e5e0, { 1, 0, 2 }
  uselistorder i32 %v2_e5cc, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_1229c, { 1, 0 }
  uselistorder label %dec_label_pc_e790.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eacc, { 1, 0 }
  uselistorder label %dec_label_pc_eaac, { 1, 0 }
  uselistorder label %dec_label_pc_eaa4, { 1, 0 }
  uselistorder label %dec_label_pc_ea98, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ea80, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e990, { 1, 0 }
  uselistorder label %dec_label_pc_e990thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e978.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e894, { 1, 0 }
  uselistorder label %dec_label_pc_e894.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e884.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e81c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e7c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e7a0, { 1, 0 }
  uselistorder label %dec_label_pc_e744, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e6a8.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e6f8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e6c0, { 1, 0 }
  uselistorder label %dec_label_pc_e668, { 1, 0 }
}

define i32 @function_eb38(i32 %arg1) local_unnamed_addr {
dec_label_pc_eb38:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-628 = alloca i32, align 4
  %stack_var_-116 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %v3_eb38 = load i32, i32* @r4, align 4
  %v6_eb38 = load i32, i32* @r5, align 4
  %v9_eb38 = load i32, i32* @r6, align 4
  %v12_eb38 = load i32, i32* @r7, align 4
  %v15_eb38 = load i32, i32* @r8, align 4
  %v18_eb38 = load i32, i32* @sb, align 4
  %v21_eb38 = load i32, i32* @sl, align 4
  %v24_eb38 = load i32, i32* @fp, align 4
  %v2_eb44 = call i32 @function_12ca8(i32* null)
  store i32 %v2_eb44, i32* @r6, align 4
  %v0_eb4c = call i32 @function_12a04()
  %v7_eb50 = icmp eq i32 %v0_eb4c, -1
  %. = zext i1 %v7_eb50 to i32
  %tmp56 = icmp slt i32 %v0_eb4c, 1
  %storemerge37 = select i1 %tmp56, i32 %., i32 1
  store i32 %storemerge37, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1dc90.93 to i32), i32* %r3.global-to-local, align 4
  %v2_eb6c = icmp eq i32 %storemerge37, 0
  store i32 %v0_eb4c, i32* @global_var_1dc90.93, align 4
  br i1 %v2_eb6c, label %dec_label_pc_eb80, label %dec_label_pc_eb78

dec_label_pc_eb78:                                ; preds = %dec_label_pc_ebdc, %dec_label_pc_eb38
  %v29_eb7c = phi i32 [ %v0_eb4c, %dec_label_pc_eb38 ], [ 0, %dec_label_pc_ebdc ]
  store i32 %v3_eb38, i32* @r4, align 4
  store i32 %v6_eb38, i32* @r5, align 4
  store i32 %v9_eb38, i32* @r6, align 4
  store i32 %v12_eb38, i32* @r7, align 4
  store i32 %v15_eb38, i32* @r8, align 4
  store i32 %v18_eb38, i32* @sb, align 4
  store i32 %v21_eb38, i32* @sl, align 4
  store i32 %v24_eb38, i32* @fp, align 4
  ret i32 %v29_eb7c

dec_label_pc_eb80:                                ; preds = %dec_label_pc_eb38
  store i32 2, i32* @r5, align 4
  store i32 2, i32* %stack_var_-52, align 4
  %v1_eb94 = call i32 @function_e5b8(i32 20736)
  %v2_eb98 = icmp eq i32 %v1_eb94, 0
  br i1 %v2_eb98, label %dec_label_pc_eba0, label %dec_label_pc_edf4

dec_label_pc_eba0:                                ; preds = %dec_label_pc_eb80, %dec_label_pc_edf4, %dec_label_pc_ee1c
  %v1_eba4 = call i32 @function_13c2c(i32 5)
  %v1_ebac = call i32 @function_13454(i32 4096)
  %v2_ebac = inttoptr i32 %v1_ebac to i8*
  store i32 %v1_ebac, i32* @global_var_1dd30.97, align 4
  store i32 ptrtoint (i32* @global_var_1dc94.99 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i8 0, i8* %v2_ebac, align 1
  %v0_ebc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ebc4 = load i32, i32* %r3.global-to-local, align 4
  %v2_ebc4 = inttoptr i32 %v1_ebc4 to i32*
  store i32 %v0_ebc4, i32* %v2_ebc4, align 4
  %v0_ebc8 = load i32, i32* @r6, align 4
  store i32 %v0_ebc8, i32* @r5, align 4
  %v0_ebcc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ebcc, i32* @sb, align 4
  store i32 400, i32* @r6, align 4
  %v2_ebd4 = ptrtoint i32* %stack_var_-116 to i32
  store i32 %v2_ebd4, i32* @fp, align 4
  %v2_ebd8 = ptrtoint i32* %stack_var_-628 to i32
  store i32 %v2_ebd8, i32* @r8, align 4
  %v2_eccc = bitcast i32* %stack_var_-116 to i8*
  br label %dec_label_pc_ebdc

dec_label_pc_ebdc:                                ; preds = %dec_label_pc_ec90, %dec_label_pc_eba0
  %v1_ebe0 = call i32 @function_11590(i32 6)
  %v3_ebec = call i32 @function_114ac(i32 6, i32* null)
  store i32 %v3_ebec, i32* @r0, align 4
  %v1_ebf0 = call i32 @function_12db4(i32 %v3_ebec)
  store i32 %v1_ebf0, i32* @sl, align 4
  %v2_ebf4 = icmp eq i32 %v1_ebf0, 0
  br i1 %v2_ebf4, label %dec_label_pc_eb78, label %dec_label_pc_ebfc

dec_label_pc_ebfc:                                ; preds = %dec_label_pc_ebdc
  %v1_ec00 = call i32 @function_114d8(i32 6)
  %v0_ec0420 = load i32, i32* @sl, align 4
  %v1_ec0821 = inttoptr i32 %v0_ec0420 to i32*
  %v2_ec0822 = call i32 @function_12eb0(i32* %v1_ec0821)
  %v2_ec0c24 = icmp eq i32 %v2_ec0822, 0
  br i1 %v2_ec0c24, label %dec_label_pc_ec90, label %dec_label_pc_ec14.preheader

dec_label_pc_ec14.preheader:                      ; preds = %dec_label_pc_ebfc, %dec_label_pc_ec04.backedge
  %v0_ec1429 = phi i32 [ %v2_ec08, %dec_label_pc_ec04.backedge ], [ %v2_ec0822, %dec_label_pc_ebfc ]
  br label %dec_label_pc_ec14

dec_label_pc_ec14:                                ; preds = %dec_label_pc_ec14.preheader, %dec_label_pc_ec78
  %v0_ec24 = phi i32 [ %v0_ec1429, %dec_label_pc_ec14.preheader ], [ %v2_ec84, %dec_label_pc_ec78 ]
  %v1_ec14 = add i32 %v0_ec24, 11
  %v2_ec14 = inttoptr i32 %v1_ec14 to i8*
  %v3_ec14 = load i8, i8* %v2_ec14, align 1
  %v4_ec14 = zext i8 %v3_ec14 to i32
  %v1_ec18 = add nsw i32 %v4_ec14, -48
  store i32 %v1_ec18, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_ec18, 9
  br i1 %tmp, label %dec_label_pc_ec04.backedge, label %dec_label_pc_ec24

dec_label_pc_ec24:                                ; preds = %dec_label_pc_ec14
  store i32 %v1_ec14, i32* @r4, align 4
  %v3_ec30 = call i32 @function_12170(i8* %v2_ec14, i32 10)
  %v0_ec34 = load i32, i32* @r6, align 4
  store i32 %v3_ec30, i32* @r7, align 4
  %v0_ec3c = load i32, i32* @sb, align 4
  %v1_ec3c = add i32 %v0_ec3c, 1
  store i32 %v1_ec3c, i32* @sb, align 4
  %v5_ec40 = icmp slt i32 %v0_ec34, %v3_ec30
  %v2_eca0 = call i32 @function_12ca8(i32* null)
  br i1 %v5_ec40, label %dec_label_pc_ec9c, label %dec_label_pc_ec44

dec_label_pc_ec44:                                ; preds = %dec_label_pc_ec24
  %v0_ec4c = load i32, i32* @r5, align 4
  %v2_ec4c = sub i32 %v2_eca0, %v0_ec4c
  %v7_ec54 = icmp slt i32 %v2_ec4c, 601
  br i1 %v7_ec54, label %dec_label_pc_ec5c, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_ec44
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_ec04.backedge

dec_label_pc_ec5c:                                ; preds = %dec_label_pc_ec44
  %v0_ec5c = load i32, i32* @r7, align 4
  %v7_ec60 = icmp slt i32 %v0_ec5c, 401
  br i1 %v7_ec60, label %dec_label_pc_ec04.backedge, label %dec_label_pc_ec64

dec_label_pc_ec64:                                ; preds = %dec_label_pc_ec5c
  %v0_ec64 = load i32, i32* @sb, align 4
  %v2_ec6c = call i32 @function_12760(i32 %v0_ec64, i32 10)
  %v2_ec70 = icmp eq i32 %v2_ec6c, 0
  br i1 %v2_ec70, label %dec_label_pc_ec78, label %dec_label_pc_ec04.backedge

dec_label_pc_ec78:                                ; preds = %dec_label_pc_ec64
  %v1_ec7c = call i32 @function_13c2c(i32 1)
  %v0_ec80 = load i32, i32* @sl, align 4
  %v1_ec84 = inttoptr i32 %v0_ec80 to i32*
  %v2_ec84 = call i32 @function_12eb0(i32* %v1_ec84)
  %v2_ec88 = icmp eq i32 %v2_ec84, 0
  br i1 %v2_ec88, label %dec_label_pc_ec90, label %dec_label_pc_ec14

dec_label_pc_ec90:                                ; preds = %dec_label_pc_ec04.backedge, %dec_label_pc_ec78, %dec_label_pc_ebfc
  %v0_ec90 = load i32, i32* @sl, align 4
  %v1_ec94 = inttoptr i32 %v0_ec90 to i32*
  %v2_ec94 = call i32 @function_12d00(i32* %v1_ec94)
  br label %dec_label_pc_ebdc

dec_label_pc_ec9c:                                ; preds = %dec_label_pc_ec24
  store i32 %v2_eca0, i32* %stack_var_-632, align 4
  %v1_ecac = call i32 @function_11590(i32 6)
  %v1_ecb4 = call i32 @function_11590(i32 10)
  %v3_ecc0 = call i32 @function_114ac(i32 6, i32* null)
  store i32 %v2_ebd4, i32* @r0, align 4
  %v3_eccc = call i32 @function_1206c(i8* %v2_eccc, i32 %v3_ecc0)
  %v0_ecd0 = load i32, i32* @fp, align 4
  %v2_ecd0 = add i32 %v0_ecd0, %v3_eccc
  store i32 %v2_ecd0, i32* @r5, align 4
  %v0_ecd4 = load i32, i32* @r4, align 4
  store i32 %v2_ecd0, i32* @r0, align 4
  %v2_ecdc = inttoptr i32 %v2_ecd0 to i8*
  %v3_ecdc = call i32 @function_1206c(i8* %v2_ecdc, i32 %v0_ecd4)
  store i32 %v3_ecdc, i32* @r4, align 4
  %v3_ecec = call i32 @function_114ac(i32 10, i32* null)
  %v0_ecf4 = load i32, i32* @r5, align 4
  %v1_ecf4 = load i32, i32* @r4, align 4
  %v2_ecf4 = add i32 %v1_ecf4, %v0_ecf4
  store i32 %v2_ecf4, i32* @r0, align 4
  %v2_ecf8 = inttoptr i32 %v2_ecf4 to i8*
  %v3_ecf8 = call i32 @function_1206c(i8* %v2_ecf8, i32 %v3_ecec)
  %v1_ed00 = call i32 @function_114d8(i32 6)
  %v1_ed08 = call i32 @function_114d8(i32 10)
  %v3_ed14 = call i32 @function_12b04(i8* %v2_eccc, i32 0)
  %v7_ed18 = icmp eq i32 %v3_ed14, -1
  store i32 %v3_ed14, i32* @r6, align 4
  br i1 %v7_ed18, label %dec_label_pc_edc0, label %dec_label_pc_ed24

dec_label_pc_ed24:                                ; preds = %dec_label_pc_ec9c
  %v1_ed28 = call i32 @function_11590(i32 62)
  br label %dec_label_pc_ed2c

dec_label_pc_ed2c:                                ; preds = %dec_label_pc_ed94, %.thread6, %dec_label_pc_ed44, %dec_label_pc_ed24
  %v0_ed2c = load i32, i32* @r6, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v4_ed38 = call i32 @function_12ba0(i32 %v0_ed2c, i32* nonnull %stack_var_-628, i32 512)
  store i32 %v4_ed38, i32* @r4, align 4
  %tmp59 = icmp slt i32 %v4_ed38, 1
  br i1 %tmp59, label %dec_label_pc_ede0, label %dec_label_pc_ed44

dec_label_pc_ed44:                                ; preds = %dec_label_pc_ed2c
  %v3_ed4c = call i32 @function_114ac(i32 62, i32* null)
  store i32 %v3_ed4c, i32* @r5, align 4
  %v3_ed5c = call i32 @function_114ac(i32 62, i32* null)
  %v1_ed60 = inttoptr i32 %v3_ed5c to i8*
  %v2_ed60 = call i32 @function_12044(i8* %v1_ed60)
  %v0_ed64 = load i32, i32* @r4, align 4
  %v5_ed68 = icmp slt i32 %v0_ed64, %v2_ed60
  br i1 %v5_ed68, label %dec_label_pc_ed2c, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_ed44
  %v1_ed7412 = add i32 %v0_ed64, -1
  store i32 %v1_ed7412, i32* @r4, align 4
  %v2_ed7413 = icmp eq i32 %v0_ed64, 0
  br i1 %v2_ed7413, label %dec_label_pc_ed2c, label %dec_label_pc_ed7c.lr.ph

dec_label_pc_ed7c.lr.ph:                          ; preds = %.thread6
  %v0_ed7c.pre = load i32, i32* @r5, align 4
  %v1_ed80.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_ed7c

dec_label_pc_ed7c:                                ; preds = %dec_label_pc_ed94, %dec_label_pc_ed7c.lr.ph
  %v0_ed74 = phi i32 [ %v1_ed7412, %dec_label_pc_ed7c.lr.ph ], [ %v1_ed74, %dec_label_pc_ed94 ]
  %v0_ed94 = phi i32 [ 0, %dec_label_pc_ed7c.lr.ph ], [ %v1_ed94, %dec_label_pc_ed94 ]
  %v0_ed88 = phi i32 [ 0, %dec_label_pc_ed7c.lr.ph ], [ %v1_ed88., %dec_label_pc_ed94 ]
  %v2_ed7c = add i32 %v0_ed88, %v0_ed7c.pre
  %v3_ed7c = inttoptr i32 %v2_ed7c to i8*
  %v4_ed7c = load i8, i8* %v3_ed7c, align 1
  %v6_ed7c = zext i8 %v4_ed7c to i32
  store i32 %v6_ed7c, i32* %r2.global-to-local, align 4
  %v2_ed80 = add i32 %v0_ed94, %v1_ed80.pre
  %v3_ed80 = inttoptr i32 %v2_ed80 to i8*
  %v4_ed80 = load i8, i8* %v3_ed80, align 1
  %v6_ed80 = zext i8 %v4_ed80 to i32
  store i32 %v6_ed80, i32* %r3.global-to-local, align 4
  %v9_ed84 = icmp eq i8 %v4_ed80, %v4_ed7c
  %v1_ed88 = add i32 %v0_ed88, 1
  %v1_ed88. = select i1 %v9_ed84, i32 %v1_ed88, i32 0
  br i1 %v9_ed84, label %dec_label_pc_ed9c, label %dec_label_pc_ed94

dec_label_pc_ed94:                                ; preds = %dec_label_pc_ed9c, %dec_label_pc_ed7c
  %v1_ed94 = add i32 %v0_ed94, 1
  %v1_ed74 = add i32 %v0_ed74, -1
  store i32 %v1_ed74, i32* @r4, align 4
  %v2_ed74 = icmp eq i32 %v0_ed74, 0
  br i1 %v2_ed74, label %dec_label_pc_ed2c, label %dec_label_pc_ed7c

dec_label_pc_ed9c:                                ; preds = %dec_label_pc_ed7c
  %v9_ed9c = icmp eq i32 %v2_ed60, %v1_ed88.
  br i1 %v9_ed9c, label %dec_label_pc_eda4, label %dec_label_pc_ed94

dec_label_pc_eda4:                                ; preds = %dec_label_pc_ed9c
  %v1_eda8 = call i32 @function_114d8(i32 62)
  %v0_edac = load i32, i32* @r6, align 4
  %v1_edb0 = call i32 @function_129d8(i32 %v0_edac)
  %v0_edb4 = load i32, i32* @r7, align 4
  %v2_edbc = call i32 @function_12ad8(i32 %v0_edb4, i32 9)
  br label %dec_label_pc_edc0

dec_label_pc_edc0:                                ; preds = %dec_label_pc_ec9c, %dec_label_pc_ede0, %dec_label_pc_eda4
  %v2_edc8 = call i32 @function_120e4(i32 %v2_ebd4, i32 64)
  %v1_edd0 = call i32 @function_13c2c(i32 1)
  %v2_edd4 = load i32, i32* %stack_var_-632, align 4
  store i32 %v2_edd4, i32* @r5, align 4
  %v0_edd8 = load i32, i32* @r7, align 4
  store i32 %v0_edd8, i32* @r6, align 4
  br label %dec_label_pc_ec04.backedge

dec_label_pc_ec04.backedge:                       ; preds = %dec_label_pc_ec64, %dec_label_pc_ec5c, %dec_label_pc_ec14, %dec_label_pc_edc0, %.thread1
  %v0_ec04 = load i32, i32* @sl, align 4
  %v1_ec08 = inttoptr i32 %v0_ec04 to i32*
  %v2_ec08 = call i32 @function_12eb0(i32* %v1_ec08)
  %v2_ec0c = icmp eq i32 %v2_ec08, 0
  br i1 %v2_ec0c, label %dec_label_pc_ec90, label %dec_label_pc_ec14.preheader

dec_label_pc_ede0:                                ; preds = %dec_label_pc_ed2c
  %v1_ede4 = call i32 @function_114d8(i32 62)
  %v0_ede8 = load i32, i32* @r6, align 4
  %v1_edec = call i32 @function_129d8(i32 %v0_ede8)
  br label %dec_label_pc_edc0

dec_label_pc_edf4:                                ; preds = %dec_label_pc_eb80
  %v0_edf4 = load i32, i32* @r4, align 4
  store i32 %v0_edf4, i32* %r2.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_edfc = load i32, i32* @r5, align 4
  %v3_ee0c = call i32 @function_132bc(i32 %v0_edfc, i32 1, i32 %v0_edf4)
  %v7_ee10 = icmp eq i32 %v3_ee0c, -1
  store i32 %v3_ee0c, i32* @r4, align 4
  br i1 %v7_ee10, label %dec_label_pc_eba0, label %dec_label_pc_ee1c

dec_label_pc_ee1c:                                ; preds = %dec_label_pc_edf4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_ee24 = bitcast i32* %stack_var_-52 to %sockaddr*
  %v4_ee24 = call i32 @function_130ec(i32 %v3_ee0c, %sockaddr* %v3_ee24, i32 16)
  %v0_ee28 = load i32, i32* @r4, align 4
  %v2_ee30 = call i32 @function_131a0(i32 %v0_ee28, i32 1)
  br label %dec_label_pc_eba0

; uselistorder directives
  uselistorder i32 %v3_ee0c, { 2, 1, 0 }
  uselistorder i32 %v2_ec08, { 1, 0 }
  uselistorder i32 %v1_ed74, { 1, 0 }
  uselistorder i32 %v1_ed88., { 1, 0 }
  uselistorder i1 %v9_ed84, { 1, 0 }
  uselistorder i32 %v0_ed88, { 1, 0 }
  uselistorder i32 %v0_ed94, { 1, 0 }
  uselistorder i32 %v0_ed74, { 1, 0 }
  uselistorder i32 %v0_ed64, { 1, 0, 2 }
  uselistorder i32 %v2_ed60, { 1, 0 }
  uselistorder i32 %v3_ed14, { 1, 0 }
  uselistorder i32 %v2_ec84, { 1, 0 }
  uselistorder i32 %storemerge37, { 1, 0 }
  uselistorder i32 %v0_eb4c, { 1, 2, 3, 0 }
  uselistorder i32 (i8*, i32)* @function_12170, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32*)* @function_12eb0, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_12db4, { 2, 1, 0 }
  uselistorder i32* @global_var_1dc90.93, { 0, 2, 1 }
  uselistorder label %dec_label_pc_ec04.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_edc0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ec14, { 1, 0 }
  uselistorder label %dec_label_pc_ec14.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_eba0, { 2, 1, 0 }
}

define i32 @function_ee44(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ee44:
  store i32 ptrtoint (i32* @global_var_ee5c.101 to i32), i32* @global_var_1db1c.103, align 4
  ret i32 %arg1
}

define i32 @function_ee5c() local_unnamed_addr {
dec_label_pc_ee5c:
  %stack_var_-8 = alloca i32, align 4
  %v3_ee5c = load i32, i32* @r4, align 4
  store i32 %v3_ee5c, i32* %stack_var_-8, align 4
  %v1_ee64 = call i32 @function_11590(i32 2)
  store i32 1503156639, i32* @global_var_1dd38.107, align 4
  %v3_ee7c = call i32 @function_114ac(i32 2, i32* null)
  %v4_ee7c = inttoptr i32 %v3_ee7c to i8*
  %v2_ee80 = add i32 %v3_ee7c, 1
  %v3_ee80 = inttoptr i32 %v2_ee80 to i8*
  %v4_ee80 = load i8, i8* %v3_ee80, align 1
  %v3_ee84 = load i8, i8* %v4_ee7c, align 1
  store i8 %v4_ee80, i8* bitcast (i32* @global_var_1dd37.108 to i8*), align 4
  store i8 %v3_ee84, i8* bitcast (i32* @global_var_1dd36.109 to i8*), align 4
  %v2_ee9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ee9c, i32* @r4, align 4
  %v1_eea0 = call i32 @function_114d8(i32 2)
  %v0_eea4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_eea4, label %bb, label %bb4

bb:                                               ; preds = %dec_label_pc_ee5c
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_ee5c, %bb
  %v0_eea8 = load i1, i1* @cpsr_n, align 1
  br i1 %v0_eea8, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  %v1_eea8 = load i32, i32* @r8, align 4
  %v2_eea8 = add i32 %v1_eea8, 4
  %v3_eea8 = inttoptr i32 %v2_eea8 to i32*
  %v4_eea8 = load i32, i32* %v3_eea8, align 4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v32_eea8 = phi i32 [ %v1_eea0, %bb4 ], [ %v4_eea8, %bb5 ]
  ret i32 %v32_eea8

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_eeac(i32 %arg1) local_unnamed_addr {
dec_label_pc_eeac:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_eeac = load i32, i32* @r4, align 4
  %v9_eeac = load i32, i32* @r6, align 4
  %v12_eeac = load i32, i32* @r7, align 4
  %v15_eeac = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_eec8 = call i32 @function_132bc(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1db14.111 to i32), i32* @r6, align 4
  %v7_eed0 = icmp eq i32 %v3_eec8, -1
  store i32 %v3_eec8, i32* @global_var_1db14.111, align 4
  br i1 %v7_eed0, label %dec_label_pc_ef90, label %dec_label_pc_eedc

dec_label_pc_eedc:                                ; preds = %dec_label_pc_eeac
  %v0_eee0 = load i32, i32* @r4, align 4
  %v6_eef0 = call i32 @function_1328c(i32 %v3_eec8, i32 %v0_eee0, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_eef4 = load i32, i32* @global_var_1db14.111, align 4
  store i32 %v2_eef4, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_ef04 = call i32 @function_12914(i32 %v2_eef4, i32 3)
  %v1_ef0c = or i32 %v2_ef04, 2048
  store i32 %v1_ef0c, i32* @r2, align 4
  %v0_ef10 = load i32, i32* @r4, align 4
  %v2_ef14 = call i32 @function_12914(i32 %v0_ef10, i32 4)
  store i32 ptrtoint (i8** @global_var_1db20.113 to i32), i32* @r8, align 4
  %v2_ef1c = load i8, i8* bitcast (i8** @global_var_1db20.113 to i8*), align 4
  %v2_ef20 = icmp eq i8 %v2_ef1c, 0
  br i1 %v2_ef20, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_eedc
  br label %bb

.thread:                                          ; preds = %dec_label_pc_eedc
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_ef58 = call i32 @function_12f80()
  %v0_ef5c = load i32, i32* @r5, align 4
  %v2_ef5c = inttoptr i32 %v0_ef58 to i32*
  store i32 %v0_ef5c, i32* %v2_ef5c, align 4
  %v2_ef60 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_ef60, i32* @r7, align 4
  store i32 %v0_ef58, i32* @r4, align 4
  %v2_ef6c = load i32, i32* @global_var_1db14.111, align 4
  %v3_ef74 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_ef74 = call i32 @function_130ec(i32 %v2_ef6c, %sockaddr* %v3_ef74, i32 16)
  %v7_ef78 = icmp eq i32 %v4_ef74, -1
  br i1 %v7_ef78, label %dec_label_pc_ef98, label %dec_label_pc_ef80

dec_label_pc_ef80:                                ; preds = %bb
  %v2_ef88 = load i32, i32* @global_var_1db14.111, align 4
  %v2_ef8c = call i32 @function_131a0(i32 %v2_ef88, i32 1)
  br label %dec_label_pc_ef90

dec_label_pc_ef90:                                ; preds = %dec_label_pc_eeac, %dec_label_pc_efa4, %dec_label_pc_ef80
  %v20_ef94 = phi i32 [ %v3_eec8, %dec_label_pc_eeac ], [ %v1_eff4, %dec_label_pc_efa4 ], [ %v2_ef8c, %dec_label_pc_ef80 ]
  store i32 %v3_eeac, i32* @r4, align 4
  store i32 %v9_eeac, i32* @r6, align 4
  store i32 %v12_eeac, i32* @r7, align 4
  store i32 %v15_eeac, i32* @r8, align 4
  ret i32 %v20_ef94

dec_label_pc_ef98:                                ; preds = %bb
  %v0_ef98 = load i32, i32* @r4, align 4
  %v1_ef98 = inttoptr i32 %v0_ef98 to i32*
  %v2_ef98 = load i32, i32* %v1_ef98, align 4
  %v7_ef9c = icmp eq i32 %v2_ef98, 99
  br i1 %v7_ef9c, label %dec_label_pc_effc, label %dec_label_pc_efa4

dec_label_pc_efa4:                                ; preds = %dec_label_pc_effc, %bb21, %dec_label_pc_ef98
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_efbc = load i32, i32* @global_var_1db14.111, align 4
  %v4_efd4 = call i32 @function_13118(i32 %v2_efbc, %sockaddr* %v3_ef74, i32 16)
  %v1_efdc = call i32 @function_13c2c(i32 5)
  %v2_efe0 = load i32, i32* @global_var_1db14.111, align 4
  %v1_efe4 = call i32 @function_129d8(i32 %v2_efe0)
  %v1_eff0 = call i32 @function_e5b8(i32 50951)
  %v1_eff4 = call i32 @function_eeac(i32 %v1_eff0)
  br label %dec_label_pc_ef90

dec_label_pc_effc:                                ; preds = %dec_label_pc_ef98
  %v2_effc = load i8, i8* bitcast (i8** @global_var_1db20.113 to i8*), align 4
  %v3_effc = zext i8 %v2_effc to i32
  %v1_f000 = load i32, i32* @r5, align 4
  %v9_f000 = icmp eq i32 %v3_effc, %v1_f000
  br i1 %v9_f000, label %dec_label_pc_efa4, label %bb21

bb21:                                             ; preds = %dec_label_pc_effc
  %v2_f008 = trunc i32 %v1_f000 to i8
  store i8 %v2_f008, i8* bitcast (i8** @global_var_1db20.113 to i8*), align 4
  br label %dec_label_pc_efa4

; uselistorder directives
  uselistorder i32 %v3_eec8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_e5b8, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_131a0, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1db20.113 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1db20.113, { 1, 0 }
  uselistorder label %dec_label_pc_efa4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ef90, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_f01c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f01c:
  %stack_var_-16 = alloca i32, align 4
  %v3_f01c = load i32, i32* @r4, align 4
  %v6_f01c = load i32, i32* @r5, align 4
  %v2_f020 = ptrtoint i32* %stack_var_-16 to i32
  %v0_f024 = call i32 @function_12a04()
  %v7_f028 = icmp eq i32 %v0_f024, -1
  %. = zext i1 %v7_f028 to i32
  %tmp10 = icmp slt i32 %v0_f024, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_f044 = icmp eq i32 %storemerge4, 0
  store i32 %v0_f024, i32* @global_var_1dc98.116, align 4
  br i1 %v2_f044, label %dec_label_pc_f058, label %dec_label_pc_f050

dec_label_pc_f050:                                ; preds = %dec_label_pc_f01c
  store i32 %v3_f01c, i32* @r4, align 4
  store i32 %v6_f01c, i32* @r5, align 4
  ret i32 %v0_f024

dec_label_pc_f058:                                ; preds = %dec_label_pc_f01c
  store i32 1, i32* %stack_var_-16, align 4
  %v1_f064 = call i32 @function_11590(i32 59)
  %v1_f06c = call i32 @function_11590(i32 60)
  %v0_f070 = load i32, i32* @r5, align 4
  %v2_f078 = inttoptr i32 %v0_f070 to i32*
  %v3_f078 = call i32 @function_114ac(i32 59, i32* %v2_f078)
  %v2_f080 = inttoptr i32 %v3_f078 to i8*
  %v3_f080 = call i32 @function_12b04(i8* %v2_f080, i32 2)
  %v7_f084 = icmp eq i32 %v3_f080, -1
  store i32 %v3_f080, i32* @r4, align 4
  br i1 %v7_f084, label %dec_label_pc_f0cc, label %dec_label_pc_f090

dec_label_pc_f090:                                ; preds = %dec_label_pc_f0cc, %dec_label_pc_f058
  %v0_f09c = phi i32 [ %v3_f0dc, %dec_label_pc_f0cc ], [ %v3_f080, %dec_label_pc_f058 ]
  %v3_f0a4 = call i32 @function_12a88(i32 %v0_f09c, i32 -2147199228, i32 %v2_f020)
  br label %dec_label_pc_f0a8

dec_label_pc_f0a8:                                ; preds = %dec_label_pc_f0a8, %dec_label_pc_f090
  %v0_f0b4 = load i32, i32* @r4, align 4
  %v3_f0bc = call i32 @function_12a88(i32 %v0_f0b4, i32 -2147199227, i32 0)
  %v1_f0c4 = call i32 @function_13c2c(i32 10)
  br label %dec_label_pc_f0a8

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_f058
  %v0_f0cc = load i32, i32* @r5, align 4
  %v2_f0d4 = inttoptr i32 %v0_f0cc to i32*
  %v3_f0d4 = call i32 @function_114ac(i32 60, i32* %v2_f0d4)
  %v2_f0dc = inttoptr i32 %v3_f0d4 to i8*
  %v3_f0dc = call i32 @function_12b04(i8* %v2_f0dc, i32 2)
  %v3_f0e0 = icmp eq i32 %v3_f0dc, -1
  store i32 %v3_f0dc, i32* @r4, align 4
  br i1 %v3_f0e0, label %dec_label_pc_f0ec, label %dec_label_pc_f090

dec_label_pc_f0ec:                                ; preds = %dec_label_pc_f0cc
  %v1_f0f0 = call i32 @function_114d8(i32 59)
  %v1_f0f8 = call i32 @function_114d8(i32 60)
  %v0_f0fc = load i32, i32* @r5, align 4
  %v1_f100 = call i32 @function_13b98(i32 %v0_f0fc)
  %v0_f104 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f104, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_f0ec
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_f0ec, %bb13
  ret i32 %v1_f100

; uselistorder directives
  uselistorder i32 %v3_f0dc, { 1, 2, 0 }
  uselistorder i32 %v3_f080, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_f024, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_12a88, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_f108(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f108:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f108 = load i32, i32* @r4, align 4
  store i32 %v3_f108, i32* %stack_var_-36, align 4
  %v6_f108 = load i32, i32* @r5, align 4
  %v9_f108 = load i32, i32* @r6, align 4
  %v15_f108 = load i32, i32* @r8, align 4
  %v2_f114 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_f114, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_f114, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_f12c = call i32 @function_13318(i32 %v2_f114)
  store i32 %v2_f114, i32* @r0, align 4
  %v2_f138 = call i32 @function_132e8(i32 %v2_f114, i32 2)
  %v0_f13c = load i32, i32* @r5, align 4
  store i32 %v0_f13c, i32* %r2.global-to-local, align 4
  %v3_f148 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_f148 = call i32 @function_12c54(i32 %v0_f13c, %_TYPEDEF_sigset_t* %v3_f148, i32 %v0_f13c)
  %v2_f154 = call i32 @function_13330(i32 17, i32 1)
  %v2_f160 = call i32 @function_13330(i32 5, i32 ptrtoint (i32* @global_var_ee44.118 to i32))
  %v0_f164 = call i32 @function_122fc()
  store i32 %v0_f164, i32* @global_var_1dd2c.82, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1dd37.108 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1dd34.105 to i8*), align 4
  store i32 1494907824, i32* @global_var_1dd38.107, align 4
  %v0_f18c = load i32, i32* @r5, align 4
  %v1_f18c = trunc i32 %v0_f18c to i8
  store i8 %v1_f18c, i8* bitcast (i32* @global_var_1dd36.109 to i8*), align 4
  store i8 %v1_f18c, i8* bitcast (i32* @global_var_1dd35.122 to i8*), align 4
  %v6_f194 = call i32 @function_11648(i32 %v0_f164, i32 ptrtoint (i8** @global_var_1dd34.105 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_ee5c.101 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ee5c.101 to i32), i32* @global_var_1db1c.103, align 4
  %v2_f1a8 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_f1a8, i32* @sb, align 4
  %v1_f1ac = call i32 @function_eeac(i32 %v6_f194)
  %v1_f1b0 = call i32 @function_f918(i32 %v1_f1ac)
  %v2_f1bc = call i32 @function_120e4(i32 %v2_f1a8, i32 32)
  %v0_f1c0 = load i32, i32* @r6, align 4
  %v7_f1c0 = icmp eq i32 %v0_f1c0, 2
  br i1 %v7_f1c0, label %dec_label_pc_f2ec, label %dec_label_pc_f1c8

dec_label_pc_f1c8:                                ; preds = %dec_label_pc_f2ec, %dec_label_pc_f108, %dec_label_pc_f2fc
  %v0_f1c8 = call i32 @function_f8c0()
  store i32 %v0_f1c8, i32* %r6.global-to-local, align 4
  %v0_f1d0 = load i32, i32* @r8, align 4
  %v1_f1d0 = inttoptr i32 %v0_f1d0 to i32*
  %v2_f1d0 = load i32, i32* %v1_f1d0, align 4
  %v1_f1d4 = inttoptr i32 %v2_f1d0 to i8*
  %v2_f1d4 = call i32 @function_12044(i8* %v1_f1d4)
  %v0_f1dc = load i32, i32* @r8, align 4
  %v1_f1dc = inttoptr i32 %v0_f1dc to i32*
  %v2_f1dc = load i32, i32* %v1_f1dc, align 4
  %v1_f1e0 = inttoptr i32 %v2_f1dc to i8*
  %v2_f1e0 = call i32 @function_12044(i8* %v1_f1e0)
  %v1_f1e4 = sub i32 20, %v2_f1d4
  store i32 %v2_f1e0, i32* @r5, align 4
  %v0_f1ec = load i32, i32* %r6.global-to-local, align 4
  %v2_f1f0 = call i32 @function_12760(i32 %v0_f1ec, i32 %v1_f1e4)
  %v1_f1f8 = load i32, i32* @r5, align 4
  %v2_f1f8 = add i32 %v1_f1f8, %v2_f1f0
  store i32 %v2_f1f8, i32* @r4, align 4
  %v2_f1fc = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_f1fc, i32* @r6, align 4
  %v2_f208 = call i32 @function_f974(i32 %v2_f1fc, i32 %v2_f1f8)
  %v2_f20c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f20c, i32* %r2.global-to-local, align 4
  %v1_f210 = load i32, i32* @r4, align 4
  %v2_f210 = add i32 %v1_f210, %v2_f20c
  store i32 %v2_f210, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_f21c = load i32, i32* @r8, align 4
  %v1_f21c = inttoptr i32 %v0_f21c to i32*
  %v2_f21c = load i32, i32* %v1_f21c, align 4
  store i32 %v2_f21c, i32* @r0, align 4
  %v3_f220 = add i32 %v2_f210, -72
  %v4_f220 = inttoptr i32 %v3_f220 to i8*
  store i8 0, i8* %v4_f220, align 1
  %v2_f224 = inttoptr i32 %v2_f21c to i8*
  %v3_f224 = call i32 @function_1206c(i8* %v2_f224, i32 %v2_f1fc)
  %v2_f230 = call i32 @function_120e4(i32 %v2_f1fc, i32 32)
  %v0_f234 = call i32 @function_f8c0()
  store i32 %v0_f234, i32* @r7, align 4
  %v0_f23c = load i32, i32* @r8, align 4
  %v1_f23c = inttoptr i32 %v0_f23c to i32*
  %v2_f23c = load i32, i32* %v1_f23c, align 4
  %v1_f240 = inttoptr i32 %v2_f23c to i8*
  %v2_f240 = call i32 @function_12044(i8* %v1_f240)
  %v0_f248 = load i32, i32* @r8, align 4
  %v1_f248 = inttoptr i32 %v0_f248 to i32*
  %v2_f248 = load i32, i32* %v1_f248, align 4
  %v1_f24c = inttoptr i32 %v2_f248 to i8*
  %v2_f24c = call i32 @function_12044(i8* %v1_f24c)
  %v1_f250 = sub i32 20, %v2_f240
  store i32 %v2_f24c, i32* @r5, align 4
  %v0_f258 = load i32, i32* @r7, align 4
  %v2_f25c = call i32 @function_12760(i32 %v0_f258, i32 %v1_f250)
  %v1_f260 = load i32, i32* @r5, align 4
  %v2_f260 = add i32 %v1_f260, %v2_f25c
  store i32 %v2_f260, i32* @r4, align 4
  %v2_f26c = call i32 @function_f974(i32 %v2_f1fc, i32 %v2_f260)
  %v1_f274 = load i32, i32* @r4, align 4
  %v2_f274 = add i32 %v1_f274, %v2_f20c
  store i32 %v2_f274, i32* @r3, align 4
  %v0_f278 = load i32, i32* @sl, align 4
  %v1_f278 = trunc i32 %v0_f278 to i8
  %v3_f278 = add i32 %v2_f274, -72
  %v4_f278 = inttoptr i32 %v3_f278 to i8*
  store i8 %v1_f278, i8* %v4_f278, align 1
  %v2_f284 = call i32 @function_12b70(i32 15, i32 %v2_f1fc)
  %v1_f28c = call i32 @function_11590(i32 5)
  %v3_f29c = call i32 @function_114ac(i32 5, i32* nonnull %stack_var_-44)
  %v3_f2a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f2a0, i32* %r2.global-to-local, align 4
  %v3_f2ac = inttoptr i32 %v3_f29c to i32*
  %v4_f2ac = call i32 @function_12cd4(i32 1, i32* %v3_f2ac, i32 %v3_f2a0)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f2bc = call i32 @function_12cd4(i32 1, i32* nonnull @global_var_15114.126, i32 1)
  %v1_f2c4 = call i32 @function_114d8(i32 5)
  %v1_f2c8 = call i32 @function_a3a0(i32 %v1_f2c4)
  %v1_f2cc = call i32 @function_eb38(i32 %v1_f2c8)
  %v1_f2d0 = call i32 @function_f01c(i32 %v1_f2cc)
  %v0_f2d4 = call i32 @function_12a04()
  %v1_f2d8 = load i32, i32* @sl, align 4
  %v7_f2dc = icmp sgt i32 %v0_f2d4, %v1_f2d8
  br i1 %v7_f2dc, label %dec_label_pc_f2e0, label %dec_label_pc_f324

dec_label_pc_f2e0:                                ; preds = %dec_label_pc_f1c8
  store i32 %v6_f108, i32* %r5.global-to-local, align 4
  store i32 %v9_f108, i32* %r6.global-to-local, align 4
  store i32 %v15_f108, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_f2ec:                                ; preds = %dec_label_pc_f108
  %v0_f2ec = load i32, i32* @r8, align 4
  %v1_f2ec = add i32 %v0_f2ec, 4
  %v2_f2ec = inttoptr i32 %v1_f2ec to i32*
  %v3_f2ec = load i32, i32* %v2_f2ec, align 4
  %v1_f2f0 = inttoptr i32 %v3_f2ec to i8*
  %v2_f2f0 = call i32 @function_12044(i8* %v1_f2f0)
  %v8_f2f8 = icmp sgt i32 %v2_f2f0, 31
  br i1 %v8_f2f8, label %dec_label_pc_f1c8, label %dec_label_pc_f2fc

dec_label_pc_f2fc:                                ; preds = %dec_label_pc_f2ec
  %v0_f2fc = load i32, i32* @r8, align 4
  %v1_f2fc = add i32 %v0_f2fc, 4
  %v2_f2fc = inttoptr i32 %v1_f2fc to i32*
  %v3_f2fc = load i32, i32* %v2_f2fc, align 4
  store i32 %v2_f1a8, i32* @r0, align 4
  %v2_f304 = bitcast i32* %stack_var_-140 to i8*
  %v3_f304 = call i32 @function_1206c(i8* %v2_f304, i32 %v3_f2fc)
  %v0_f308 = load i32, i32* @r8, align 4
  %v1_f308 = add i32 %v0_f308, 4
  %v2_f308 = inttoptr i32 %v1_f308 to i32*
  %v3_f308 = load i32, i32* %v2_f308, align 4
  %v1_f310 = inttoptr i32 %v3_f308 to i8*
  %v2_f310 = call i32 @function_12044(i8* %v1_f310)
  %v2_f31c = call i32 @function_120e4(i32 %v3_f308, i32 %v2_f310)
  br label %dec_label_pc_f1c8

dec_label_pc_f324:                                ; preds = %dec_label_pc_f1c8
  %v1_f324 = call i32 @function_12c28(i32 %v0_f2d4)
  %v0_f32c = load i32, i32* @sl, align 4
  %v1_f330 = call i32 @function_129d8(i32 %v0_f32c)
  %v1_f338 = call i32 @function_129d8(i32 1)
  %v1_f340 = call i32 @function_129d8(i32 2)
  %v1_f344 = call i32 @function_a3a0(i32 %v1_f340)
  %v1_f348 = call i32 @function_eb38(i32 %v1_f344)
  %v1_f34c = call i32 @function_f01c(i32 %v1_f348)
  %v1_f350 = call i32 @function_fcdc(i32 %v1_f34c)
  store i32 ptrtoint (i32* @global_var_1db18.128 to i32), i32* @fp, align 4
  %v2_f360 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_f360, i32* @r6, align 4
  %v2_f364 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_f364, i32* @r7, align 4
  %v2_f43c = ptrtoint i32* %stack_var_-60 to i32
  %v2_f67c = ptrtoint i32* %stack_var_-52 to i32
  %v4_f690 = bitcast i8** %stack_var_-38 to i32*
  %v2_f7ec = ptrtoint i32* %stack_var_-1548 to i32
  %v2_f6a0 = ptrtoint i32* %stack_var_-48 to i32
  %v1_f744 = bitcast i32* %stack_var_-140 to i8*
  %v5_f70c = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_f720 = sub i32 0, %v1_f324
  br label %dec_label_pc_f368

dec_label_pc_f368:                                ; preds = %dec_label_pc_f368.backedge, %dec_label_pc_f324
  %v2_f37046 = phi i32 [ %v2_f37046.pre, %dec_label_pc_f368.backedge ], [ %v2_f360, %dec_label_pc_f324 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_f37048 = inttoptr i32 %v2_f37046 to i32*
  store i32 0, i32* %v4_f37048, align 4
  %v0_f37449 = load i32, i32* %r3.global-to-local, align 4
  %v1_f37450 = add i32 %v0_f37449, 4
  store i32 %v1_f37450, i32* %r3.global-to-local, align 4
  %v7_f37851 = icmp eq i32 %v1_f37450, 128
  br i1 %v7_f37851, label %dec_label_pc_f380, label %dec_label_pc_f370.dec_label_pc_f370_crit_edge

dec_label_pc_f370.dec_label_pc_f370_crit_edge:    ; preds = %dec_label_pc_f368, %dec_label_pc_f370.dec_label_pc_f370_crit_edge
  %v1_f37452 = phi i32 [ %v1_f374, %dec_label_pc_f370.dec_label_pc_f370_crit_edge ], [ %v1_f37450, %dec_label_pc_f368 ]
  %v0_f370.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_f370 = load i32, i32* @r6, align 4
  %v3_f370 = add i32 %v2_f370, %v1_f37452
  %v4_f370 = inttoptr i32 %v3_f370 to i32*
  store i32 %v0_f370.pre, i32* %v4_f370, align 4
  %v0_f374 = load i32, i32* %r3.global-to-local, align 4
  %v1_f374 = add i32 %v0_f374, 4
  store i32 %v1_f374, i32* %r3.global-to-local, align 4
  %v7_f378 = icmp eq i32 %v1_f374, 128
  br i1 %v7_f378, label %dec_label_pc_f380, label %dec_label_pc_f370.dec_label_pc_f370_crit_edge

dec_label_pc_f380:                                ; preds = %dec_label_pc_f370.dec_label_pc_f370_crit_edge, %dec_label_pc_f368
  %v0_f380 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f380, i32* %r3.global-to-local, align 4
  store i32 %v0_f380, i32* @r4, align 4
  %v2_f38853 = load i32, i32* @r7, align 4
  %v3_f38854 = add i32 %v2_f38853, %v0_f380
  %v4_f38855 = inttoptr i32 %v3_f38854 to i32*
  store i32 %v0_f380, i32* %v4_f38855, align 4
  %v0_f38c56 = load i32, i32* %r3.global-to-local, align 4
  %v1_f38c57 = add i32 %v0_f38c56, 4
  store i32 %v1_f38c57, i32* %r3.global-to-local, align 4
  %v7_f39058 = icmp eq i32 %v1_f38c57, 128
  br i1 %v7_f39058, label %dec_label_pc_f398, label %dec_label_pc_f388.dec_label_pc_f388_crit_edge

dec_label_pc_f388.dec_label_pc_f388_crit_edge:    ; preds = %dec_label_pc_f380, %dec_label_pc_f388.dec_label_pc_f388_crit_edge
  %v1_f38c59 = phi i32 [ %v1_f38c, %dec_label_pc_f388.dec_label_pc_f388_crit_edge ], [ %v1_f38c57, %dec_label_pc_f380 ]
  %v0_f388.pre = load i32, i32* @r4, align 4
  %v2_f388 = load i32, i32* @r7, align 4
  %v3_f388 = add i32 %v2_f388, %v1_f38c59
  %v4_f388 = inttoptr i32 %v3_f388 to i32*
  store i32 %v0_f388.pre, i32* %v4_f388, align 4
  %v0_f38c = load i32, i32* %r3.global-to-local, align 4
  %v1_f38c = add i32 %v0_f38c, 4
  store i32 %v1_f38c, i32* %r3.global-to-local, align 4
  %v7_f390 = icmp eq i32 %v1_f38c, 128
  br i1 %v7_f390, label %dec_label_pc_f398, label %dec_label_pc_f388.dec_label_pc_f388_crit_edge

dec_label_pc_f398:                                ; preds = %dec_label_pc_f388.dec_label_pc_f388_crit_edge, %dec_label_pc_f380
  store i32 ptrtoint (i32* @global_var_1db14.111 to i32), i32* %r2.global-to-local, align 4
  %v2_f39c = load i32, i32* @global_var_1db14.111, align 4
  %v7_f3a0 = icmp eq i32 %v2_f39c, -1
  br i1 %v7_f3a0, label %dec_label_pc_f3cc, label %dec_label_pc_f3a8

dec_label_pc_f3a8:                                ; preds = %dec_label_pc_f398
  %v3_f3a8 = udiv i32 %v2_f39c, 32
  %v3_f3ac = mul nuw nsw i32 %v3_f3a8, 4
  %v2_f3b4 = add i32 %v3_f3ac, %v2_f20c
  store i32 %v2_f3b4, i32* %r3.global-to-local, align 4
  %v1_f3b8 = add i32 %v2_f3b4, -360
  %v2_f3b8 = inttoptr i32 %v1_f3b8 to i32*
  %v3_f3b8 = load i32, i32* %v2_f3b8, align 4
  %v1_f3bc = urem i32 %v2_f39c, 32
  %v7_f3c4 = shl i32 1, %v1_f3bc
  %v8_f3c4 = or i32 %v3_f3b8, %v7_f3c4
  store i32 %v8_f3c4, i32* %r2.global-to-local, align 4
  store i32 %v8_f3c4, i32* %v2_f3b8, align 4
  br label %dec_label_pc_f3cc

dec_label_pc_f3cc:                                ; preds = %dec_label_pc_f398, %dec_label_pc_f3a8
  %v2_f3cc = load i32, i32* @global_var_1db18.128, align 4
  store i32 %v2_f3cc, i32* %r3.global-to-local, align 4
  %v7_f3d0 = icmp eq i32 %v2_f3cc, -1
  store i32 ptrtoint (i32* @global_var_1db18.128 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_f3d0, label %dec_label_pc_f608, label %dec_label_pc_f3dc

dec_label_pc_f3dc:                                ; preds = %dec_label_pc_f608, %dec_label_pc_f3cc, %.thread
  store i32 ptrtoint (i8** @global_var_1dc9c.131 to i32), i32* %r2.global-to-local, align 4
  %v2_f3e0 = load i8, i8* bitcast (i8** @global_var_1dc9c.131 to i8*), align 4
  %v2_f3e4 = icmp eq i8 %v2_f3e0, 0
  %v2_f524 = load i32, i32* @global_var_1db18.128, align 4
  %v3_f528 = udiv i32 %v2_f524, 32
  store i32 %v3_f528, i32* %r3.global-to-local, align 4
  br i1 %v2_f3e4, label %dec_label_pc_f524, label %dec_label_pc_f3ec

dec_label_pc_f3ec:                                ; preds = %dec_label_pc_f3dc
  %v3_f3f4 = mul nuw nsw i32 %v3_f528, 4
  %v2_f3fc = add i32 %v3_f3f4, %v2_f20c
  store i32 %v2_f3fc, i32* %r3.global-to-local, align 4
  %v1_f400 = add i32 %v2_f3fc, -488
  %v2_f400 = inttoptr i32 %v1_f400 to i32*
  %v3_f400 = load i32, i32* %v2_f400, align 4
  %v1_f404 = urem i32 %v2_f524, 32
  %v7_f40c = shl i32 1, %v1_f404
  %v8_f40c = or i32 %v3_f400, %v7_f40c
  store i32 %v8_f40c, i32* %r2.global-to-local, align 4
  store i32 %v8_f40c, i32* %v2_f400, align 4
  br label %dec_label_pc_f414

dec_label_pc_f414:                                ; preds = %dec_label_pc_f524, %dec_label_pc_f3ec
  %v2_f418 = load i32, i32* @global_var_1db14.111, align 4
  %v2_f41c = load i32, i32* @global_var_1db18.128, align 4
  store i32 %v2_f41c, i32* %r3.global-to-local, align 4
  %v5_f428 = icmp slt i32 %v2_f418, %v2_f41c
  br i1 %v5_f428, label %bb, label %bb43

bb:                                               ; preds = %dec_label_pc_f414
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_f414, %bb
  %v0_f440 = phi i32 [ %v2_f418, %dec_label_pc_f414 ], [ %v2_f41c, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f440 = add i32 %v0_f440, 1
  store i32 %v2_f364, i32* %r2.global-to-local, align 4
  %v5_f454 = call i32 @function_12bf8(i32 %v1_f440, i32 %v2_f360, i32 %v2_f364, i32 0, i32 %v2_f43c)
  %v7_f458 = icmp eq i32 %v5_f454, -1
  store i32 %v5_f454, i32* %r3.global-to-local, align 4
  br i1 %v7_f458, label %dec_label_pc_f368.backedge, label %dec_label_pc_f464

dec_label_pc_f464:                                ; preds = %bb43
  %v2_f464 = icmp eq i32 %v5_f454, 0
  br i1 %v2_f464, label %dec_label_pc_f46c, label %dec_label_pc_f48c

dec_label_pc_f46c:                                ; preds = %dec_label_pc_f464
  %v0_f46c = load i32, i32* @sl, align 4
  store i8* null, i8** %stack_var_-38, align 4
  %v5_f47c = call i32 @function_1282c(i32 %v0_f46c, i32 6, i32 %v2_f364, i32 0)
  %v2_f480 = icmp eq i32 %v5_f47c, 0
  %v0_f484 = load i32, i32* @sl, align 4
  %v1_f484 = add i32 %v0_f484, 1
  store i32 %v1_f484, i32* @sl, align 4
  br i1 %v2_f480, label %dec_label_pc_f678, label %dec_label_pc_f48c

dec_label_pc_f48c:                                ; preds = %dec_label_pc_f464, %dec_label_pc_f46c, %dec_label_pc_f678
  store i32 ptrtoint (i32* @global_var_1db14.111 to i32), i32* %r2.global-to-local, align 4
  %v2_f490 = load i32, i32* @global_var_1db14.111, align 4
  %v7_f494 = icmp eq i32 %v2_f490, -1
  br i1 %v7_f494, label %dec_label_pc_f4c0, label %dec_label_pc_f49c

dec_label_pc_f49c:                                ; preds = %dec_label_pc_f48c
  %v3_f49c = udiv i32 %v2_f490, 32
  %v3_f4a0 = mul nuw nsw i32 %v3_f49c, 4
  store i32 %v2_f20c, i32* @ip, align 4
  %v2_f4a8 = add i32 %v3_f4a0, %v2_f20c
  store i32 %v2_f4a8, i32* %r3.global-to-local, align 4
  %v1_f4ac = add i32 %v2_f4a8, -360
  %v2_f4ac = inttoptr i32 %v1_f4ac to i32*
  %v3_f4ac = load i32, i32* %v2_f4ac, align 4
  %v1_f4b0 = urem i32 %v2_f490, 32
  %v6_f4b4 = lshr i32 %v3_f4ac, %v1_f4b0
  store i32 %v6_f4b4, i32* %r2.global-to-local, align 4
  %v1_f4b8 = urem i32 %v6_f4b4, 2
  %v2_f4b8 = icmp eq i32 %v1_f4b8, 0
  br i1 %v2_f4b8, label %dec_label_pc_f4c0, label %dec_label_pc_f6f4

dec_label_pc_f4c0:                                ; preds = %dec_label_pc_f49c, %dec_label_pc_f48c
  store i32 ptrtoint (i8** @global_var_1dc9c.131 to i32), i32* %r3.global-to-local, align 4
  %v2_f4c4 = load i8, i8* bitcast (i8** @global_var_1dc9c.131 to i8*), align 4
  %v3_f4c4 = zext i8 %v2_f4c4 to i32
  store i32 %v3_f4c4, i32* @r4, align 4
  %v2_f4c8 = icmp eq i8 %v2_f4c4, 0
  %v2_f550 = load i32, i32* @global_var_1db18.128, align 4
  br i1 %v2_f4c8, label %dec_label_pc_f550, label %dec_label_pc_f4d0

dec_label_pc_f4d0:                                ; preds = %dec_label_pc_f4c0
  %v3_f4d4 = udiv i32 %v2_f550, 32
  %v3_f4dc = mul nuw nsw i32 %v3_f4d4, 4
  %v2_f4e0 = add i32 %v3_f4dc, %v2_f20c
  store i32 %v2_f4e0, i32* %r3.global-to-local, align 4
  %v1_f4e4 = add i32 %v2_f4e0, -488
  %v2_f4e4 = inttoptr i32 %v1_f4e4 to i32*
  %v3_f4e4 = load i32, i32* %v2_f4e4, align 4
  %v1_f4e8 = urem i32 %v2_f550, 32
  %v6_f4ec = lshr i32 %v3_f4e4, %v1_f4e8
  store i32 %v6_f4ec, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1dc9c.131 to i32), i32* %r3.global-to-local, align 4
  %v1_f4f8 = urem i32 %v6_f4ec, 2
  %v2_f4f8 = icmp eq i32 %v1_f4f8, 0
  store i8 0, i8* bitcast (i8** @global_var_1dc9c.131 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1db18.128 to i32), i32* @r5, align 4
  br i1 %v2_f4f8, label %dec_label_pc_f508, label %dec_label_pc_f698

dec_label_pc_f508:                                ; preds = %dec_label_pc_f4d0
  store i32 62736, i32* @lr, align 4
  %v1_f50c = icmp ne i32 %v2_f550, -1
  call void @__pseudo_cond_branch(i1 %v1_f50c, i32 ptrtoint (i32* @global_var_129d8.25 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f514 = load i32, i32* @r5, align 4
  %v2_f514 = inttoptr i32 %v1_f514 to i32*
  store i32 -1, i32* %v2_f514, align 4
  %v1_f51c = call i32 @function_13c2c(i32 1)
  br label %dec_label_pc_f368.backedge

dec_label_pc_f368.backedge:                       ; preds = %dec_label_pc_f508, %dec_label_pc_f5f4, %dec_label_pc_f6cc, %dec_label_pc_f790, %dec_label_pc_f7b4, %dec_label_pc_f868, %dec_label_pc_f874, %bb43, %dec_label_pc_f550, %dec_label_pc_f560, %dec_label_pc_f740, %bb45, %dec_label_pc_f814, %dec_label_pc_f7a4
  %v2_f37046.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f368

dec_label_pc_f524:                                ; preds = %dec_label_pc_f3dc
  store i32 %v2_f20c, i32* %r2.global-to-local, align 4
  %v3_f530 = mul nuw nsw i32 %v3_f528, 4
  %v2_f534 = add i32 %v3_f530, %v2_f20c
  store i32 %v2_f534, i32* %r3.global-to-local, align 4
  %v1_f538 = add i32 %v2_f534, -360
  %v2_f538 = inttoptr i32 %v1_f538 to i32*
  %v3_f538 = load i32, i32* %v2_f538, align 4
  %v1_f53c = urem i32 %v2_f524, 32
  %v7_f544 = shl i32 1, %v1_f53c
  %v8_f544 = or i32 %v3_f538, %v7_f544
  store i32 %v8_f544, i32* %r2.global-to-local, align 4
  store i32 %v8_f544, i32* %v2_f538, align 4
  br label %dec_label_pc_f414

dec_label_pc_f550:                                ; preds = %dec_label_pc_f4c0
  %v7_f554 = icmp eq i32 %v2_f550, -1
  store i32 ptrtoint (i32* @global_var_1db18.128 to i32), i32* @r5, align 4
  br i1 %v7_f554, label %dec_label_pc_f368.backedge, label %dec_label_pc_f560

dec_label_pc_f560:                                ; preds = %dec_label_pc_f550
  %v3_f560 = udiv i32 %v2_f550, 32
  %v3_f564 = mul nuw nsw i32 %v3_f560, 4
  %v2_f56c = add i32 %v3_f564, %v2_f20c
  store i32 %v2_f56c, i32* %r3.global-to-local, align 4
  %v1_f570 = add i32 %v2_f56c, -360
  %v2_f570 = inttoptr i32 %v1_f570 to i32*
  %v3_f570 = load i32, i32* %v2_f570, align 4
  %v1_f574 = urem i32 %v2_f550, 32
  %v6_f578 = lshr i32 %v3_f570, %v1_f574
  store i32 %v6_f578, i32* %r2.global-to-local, align 4
  %v1_f57c = urem i32 %v6_f578, 2
  %v2_f57c = icmp eq i32 %v1_f57c, 0
  br i1 %v2_f57c, label %dec_label_pc_f368.backedge, label %dec_label_pc_f584

dec_label_pc_f584:                                ; preds = %dec_label_pc_f560
  %v6_f584 = inttoptr i32 %v3_f4c4 to i8*
  store i8* %v6_f584, i8** %stack_var_-38, align 4
  %v0_f58c = call i32 @function_12f80()
  %v0_f590 = load i32, i32* @r4, align 4
  %v2_f590 = inttoptr i32 %v0_f58c to i32*
  store i32 %v0_f590, i32* %v2_f590, align 4
  store i32 %v0_f58c, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f5a4 = load i32, i32* @global_var_1db18.128, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_f5b0 = call i32 @function_131cc(i32 %v2_f5a4, i32* %v4_f690, i32 2, i32 16386)
  %v7_f5b4 = icmp eq i32 %v5_f5b0, -1
  br i1 %v7_f5b4, label %dec_label_pc_f7a4, label %dec_label_pc_f5bc

dec_label_pc_f5bc:                                ; preds = %dec_label_pc_f584
  %v2_f5bc = icmp eq i32 %v5_f5b0, 0
  br i1 %v2_f5bc, label %dec_label_pc_f7b4, label %dec_label_pc_f5c4

dec_label_pc_f5c4:                                ; preds = %dec_label_pc_f5bc
  %v3_f5c4 = load i8*, i8** %stack_var_-38, align 4
  %v4_f5c4 = ptrtoint i8* %v3_f5c4 to i32
  store i32 %v3_f4c4, i32* %r3.global-to-local, align 4
  %v4_f5cc = mul nuw nsw i32 %v3_f4c4, 256
  %v5_f5cc = or i32 %v4_f5c4, %v4_f5cc
  store i32 %v5_f5cc, i32* %r2.global-to-local, align 4
  %v7_f5cc = icmp eq i32 %v5_f5cc, 0
  br i1 %v7_f5cc, label %dec_label_pc_f874, label %dec_label_pc_f5d4

dec_label_pc_f5d4:                                ; preds = %dec_label_pc_f5c4
  %v1_f5d4 = mul i32 %v4_f5c4, 256
  %v3_f5d8 = and i32 %v1_f5d4, 65280
  %v4_f5dc = udiv i32 %v5_f5cc, 256
  %v5_f5dc = or i32 %v3_f5d8, %v4_f5dc
  %v6_f5dc = trunc i32 %v4_f5dc to i8
  store i32 %v5_f5dc, i32* %r2.global-to-local, align 4
  %v4_f5e0 = udiv i32 %v5_f5cc, 65536
  store i32 %v4_f5e0, i32* %r3.global-to-local, align 4
  %v3_f5e4 = icmp slt i8 %v6_f5dc, 0
  %v7_f5ec = inttoptr i32 %v4_f5dc to i8*
  store i8* %v7_f5ec, i8** %stack_var_-38, align 4
  br i1 %v3_f5e4, label %dec_label_pc_f5f4, label %dec_label_pc_f7e4

dec_label_pc_f5f4:                                ; preds = %dec_label_pc_f5d4
  %v2_f5f4 = load i32, i32* @global_var_1db18.128, align 4
  %v1_f5f8 = call i32 @function_129d8(i32 %v2_f5f4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f600 = load i32, i32* @r5, align 4
  %v2_f600 = inttoptr i32 %v1_f600 to i32*
  store i32 -1, i32* %v2_f600, align 4
  br label %dec_label_pc_f368.backedge

dec_label_pc_f608:                                ; preds = %dec_label_pc_f3cc
  %v0_f610 = load i32, i32* @r4, align 4
  store i32 %v0_f610, i32* %r2.global-to-local, align 4
  %v3_f614 = call i32 @function_132bc(i32 2, i32 1, i32 %v0_f610)
  %v7_f618 = icmp eq i32 %v3_f614, -1
  store i32 %v3_f614, i32* %r5.global-to-local, align 4
  %v1_f620 = load i32, i32* %r8.global-to-local, align 4
  %v2_f620 = inttoptr i32 %v1_f620 to i32*
  store i32 %v3_f614, i32* %v2_f620, align 4
  br i1 %v7_f618, label %dec_label_pc_f3dc, label %dec_label_pc_f628

dec_label_pc_f628:                                ; preds = %dec_label_pc_f608
  %v0_f628 = load i32, i32* @r4, align 4
  store i32 %v0_f628, i32* @r2, align 4
  %v2_f630 = call i32 @function_12914(i32 %v3_f614, i32 3)
  %v1_f638 = or i32 %v2_f630, 2048
  store i32 %v1_f638, i32* @r2, align 4
  %v0_f63c = load i32, i32* %r5.global-to-local, align 4
  %v2_f640 = call i32 @function_12914(i32 %v0_f63c, i32 4)
  store i32 ptrtoint (i32* @global_var_1db1c.103 to i32), i32* %r2.global-to-local, align 4
  %v2_f648 = load i32, i32* @global_var_1db1c.103, align 4
  store i32 %v2_f648, i32* %r3.global-to-local, align 4
  %v2_f64c = icmp eq i32 %v2_f648, 0
  br i1 %v2_f64c, label %.thread, label %bb44

bb44:                                             ; preds = %dec_label_pc_f628
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_122fc.132 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f628, %bb44
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f660 = load i32, i32* @global_var_1db18.128, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1dc9c.131 to i8*), align 4
  %v5_f670 = call i32 @function_13118(i32 %v2_f660, %sockaddr* bitcast (i8** @global_var_1dd34.105 to %sockaddr*), i32 16)
  br label %dec_label_pc_f3dc

dec_label_pc_f678:                                ; preds = %dec_label_pc_f46c
  %v2_f680 = load i32, i32* @global_var_1db18.128, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f690 = call i32 @function_1322c(i32 %v2_f680, i32* nonnull %v4_f690, i32 2, i32 16384)
  br label %dec_label_pc_f48c

dec_label_pc_f698:                                ; preds = %dec_label_pc_f4d0
  store i32 4, i32* @r4, align 4
  store i32 %v2_f6a0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_f6bc = call i32 @function_13170(i32 %v2_f550, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_f67c)
  %v3_f6c0 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f6c0, i32* %r3.global-to-local, align 4
  %v2_f6c4 = icmp eq i32 %v3_f6c0, 0
  br i1 %v2_f6c4, label %dec_label_pc_f740, label %dec_label_pc_f6cc

dec_label_pc_f6cc:                                ; preds = %dec_label_pc_f698
  %v2_f6cc = load i32, i32* @global_var_1db18.128, align 4
  %v1_f6d0 = call i32 @function_129d8(i32 %v2_f6cc)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f6d8 = load i32, i32* @r5, align 4
  %v2_f6d8 = inttoptr i32 %v1_f6d8 to i32*
  store i32 -1, i32* %v2_f6d8, align 4
  %v0_f6dc = call i32 @function_f8c0()
  %v2_f6e4 = call i32 @function_12760(i32 %v0_f6dc, i32 10)
  %v1_f6e8 = add i32 %v2_f6e4, 1
  %v1_f6ec = call i32 @function_13c2c(i32 %v1_f6e8)
  br label %dec_label_pc_f368.backedge

dec_label_pc_f6f4:                                ; preds = %dec_label_pc_f49c
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_f6a0, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_f70c = call i32 @function_130c0(i32 %v2_f490, %sockaddr* %v5_f70c, i32 %v2_f6a0, i32 16, i32 16)
  %v1_f710 = call i32 @function_fa40(i32 %v6_f70c)
  %v1_f714 = call i32 @function_e5a4(i32 %v1_f710)
  store i32 %v1_f324, i32* %r2.global-to-local, align 4
  %v2_f724 = call i32 @function_12ad8(i32 %v1_f720, i32 9)
  store i32 ptrtoint (i32* @global_var_1dc98.116 to i32), i32* %r3.global-to-local, align 4
  %v2_f72c = load i32, i32* @global_var_1dc98.116, align 4
  %v2_f730 = icmp eq i32 %v2_f72c, 0
  br i1 %v2_f730, label %dec_label_pc_f738, label %dec_label_pc_f7d8

dec_label_pc_f738:                                ; preds = %dec_label_pc_f6f4, %dec_label_pc_f7d8
  %v1_f73c = call i32 @function_13b98(i32 0)
  br label %dec_label_pc_f740

dec_label_pc_f740:                                ; preds = %dec_label_pc_f698, %dec_label_pc_f738
  %v2_f744 = call i32 @function_12044(i8* %v1_f744)
  %sext = mul i32 %v2_f744, 16777216
  %v1_f748 = sdiv i32 %sext, 16777216
  %v7_f748 = inttoptr i32 %v1_f748 to i8*
  store i8* %v7_f748, i8** %stack_var_-38, align 4
  %v0_f74c = call i32 @function_122fc()
  store i32 %v0_f74c, i32* @global_var_1dd2c.82, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f760 = load i32, i32* @r4, align 4
  store i32 %v0_f760, i32* %r2.global-to-local, align 4
  %v0_f764 = load i32, i32* @r5, align 4
  %v1_f764 = inttoptr i32 %v0_f764 to i32*
  %v2_f764 = load i32, i32* %v1_f764, align 4
  %v5_f768 = call i32 @function_1322c(i32 %v2_f764, i32* nonnull @global_var_15118.135, i32 %v0_f760, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_f774 = load i32, i32* @r5, align 4
  %v1_f774 = inttoptr i32 %v0_f774 to i32*
  %v2_f774 = load i32, i32* %v1_f774, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f780 = call i32 @function_1322c(i32 %v2_f774, i32* %v4_f690, i32 1, i32 16384)
  %v3_f784 = load i8*, i8** %stack_var_-38, align 4
  %v4_f784 = ptrtoint i8* %v3_f784 to i32
  store i32 %v4_f784, i32* %r2.global-to-local, align 4
  %v3_f788 = icmp eq i8* %v3_f784, null
  br i1 %v3_f788, label %dec_label_pc_f368.backedge, label %dec_label_pc_f790

dec_label_pc_f790:                                ; preds = %dec_label_pc_f740
  %v0_f790 = load i32, i32* @r5, align 4
  %v1_f790 = inttoptr i32 %v0_f790 to i32*
  %v2_f790 = load i32, i32* %v1_f790, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_f79c = call i32 @function_1322c(i32 %v2_f790, i32* nonnull %stack_var_-140, i32 %v4_f784, i32 16384)
  br label %dec_label_pc_f368.backedge

dec_label_pc_f7a4:                                ; preds = %dec_label_pc_f7e4, %dec_label_pc_f584
  %v0_f7a4 = load i32, i32* @r8, align 4
  %v1_f7a4 = inttoptr i32 %v0_f7a4 to i32*
  %v2_f7a4 = load i32, i32* %v1_f7a4, align 4
  store i32 %v2_f7a4, i32* %r3.global-to-local, align 4
  %v7_f7a8 = icmp eq i32 %v2_f7a4, 4
  br i1 %v7_f7a8, label %dec_label_pc_f368.backedge, label %bb45

bb45:                                             ; preds = %dec_label_pc_f7a4
  %v8_f7ac = icmp eq i32 %v2_f7a4, 11
  br i1 %v8_f7ac, label %dec_label_pc_f368.backedge, label %dec_label_pc_f7b4

dec_label_pc_f7b4:                                ; preds = %dec_label_pc_f80c, %bb45, %dec_label_pc_f5bc
  %v2_f7b4 = load i32, i32* @global_var_1db18.128, align 4
  store i32 63424, i32* @lr, align 4
  %v1_f7bc = icmp ne i32 %v2_f7b4, -1
  call void @__pseudo_cond_branch(i1 %v1_f7bc, i32 ptrtoint (i32* @global_var_129d8.25 to i32))
  store i32 ptrtoint (i32* @global_var_1db18.128 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1db18.128, align 4
  %v1_f7d0 = call i32 @function_13c2c(i32 1)
  br label %dec_label_pc_f368.backedge

dec_label_pc_f7d8:                                ; preds = %dec_label_pc_f6f4
  %v2_f7dc = call i32 @function_12ad8(i32 %v2_f72c, i32 9)
  br label %dec_label_pc_f738

dec_label_pc_f7e4:                                ; preds = %dec_label_pc_f5d4
  %v0_f7e4 = load i32, i32* @r4, align 4
  %v1_f7e4 = load i32, i32* @r8, align 4
  %v2_f7e4 = inttoptr i32 %v1_f7e4 to i32*
  store i32 %v0_f7e4, i32* %v2_f7e4, align 4
  store i32 %v2_f7ec, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f7f8 = load i32, i32* @global_var_1db18.128, align 4
  %v9_f800 = call i32 @function_131cc(i32 %v2_f7f8, i32* nonnull %stack_var_-1548, i32 %v4_f5dc, i32 16386)
  %v7_f804 = icmp eq i32 %v9_f800, -1
  br i1 %v7_f804, label %dec_label_pc_f7a4, label %dec_label_pc_f80c

dec_label_pc_f80c:                                ; preds = %dec_label_pc_f7e4
  %v2_f80c = icmp eq i32 %v9_f800, 0
  br i1 %v2_f80c, label %dec_label_pc_f7b4, label %dec_label_pc_f814

dec_label_pc_f814:                                ; preds = %dec_label_pc_f80c
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f824 = load i32, i32* @global_var_1db18.128, align 4
  %v5_f828 = call i32 @function_131cc(i32 %v2_f824, i32* nonnull %v4_f690, i32 2, i32 16384)
  %v3_f82c = load i8*, i8** %stack_var_-38, align 4
  %v4_f82c = ptrtoint i8* %v3_f82c to i32
  %v4_f830 = urem i32 %v4_f5e0, 256
  %v4_f834 = mul i32 %v4_f82c, 256
  %v5_f834 = or i32 %v4_f834, %v4_f830
  store i32 %v5_f834, i32* @ip, align 4
  store i32 %v5_f834, i32* %r2.global-to-local, align 4
  %v3_f83c = sdiv i32 %v4_f834, 256
  store i32 %v3_f83c, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f848 = load i32, i32* @global_var_1db18.128, align 4
  %v6_f850 = inttoptr i32 %v5_f834 to i8*
  store i8* %v6_f850, i8** %stack_var_-38, align 4
  %v8_f854 = call i32 @function_131cc(i32 %v2_f848, i32* nonnull %stack_var_-1548, i32 %v5_f834, i32 16384)
  %v3_f858 = load i8*, i8** %stack_var_-38, align 4
  %v4_f858 = ptrtoint i8* %v3_f858 to i32
  store i32 %v4_f858, i32* %r2.global-to-local, align 4
  %v4_f85c = urem i32 %v3_f83c, 256
  store i32 %v4_f85c, i32* %r3.global-to-local, align 4
  %v6_f860 = mul nuw nsw i32 %v4_f85c, 256
  %v7_f860 = or i32 %v4_f858, %v6_f860
  %v9_f860 = icmp eq i32 %v7_f860, 0
  br i1 %v9_f860, label %dec_label_pc_f368.backedge, label %dec_label_pc_f868

dec_label_pc_f868:                                ; preds = %dec_label_pc_f814
  %v7_f86c = call i32 @function_a0c4(i32* nonnull %stack_var_-1548, i32 %v7_f860, i32 %v4_f858, i32 %v4_f85c)
  br label %dec_label_pc_f368.backedge

dec_label_pc_f874:                                ; preds = %dec_label_pc_f5c4
  %v2_f878 = load i32, i32* @global_var_1db18.128, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f888 = call i32 @function_131cc(i32 %v2_f878, i32* nonnull %v4_f690, i32 2, i32 16384)
  br label %dec_label_pc_f368.backedge

; uselistorder directives
  uselistorder i32 %v4_f85c, { 2, 0, 1 }
  uselistorder i32 %v4_f858, { 1, 0, 2 }
  uselistorder i32 %v3_f83c, { 1, 0 }
  uselistorder i32 %v5_f834, { 1, 0, 2, 3 }
  uselistorder i32 %v4_f834, { 1, 0 }
  uselistorder i32 %v9_f800, { 1, 0 }
  uselistorder i32 %v3_f614, { 3, 2, 1, 0 }
  uselistorder i32 %v4_f5dc, { 2, 3, 0, 1 }
  uselistorder i32 %v5_f5b0, { 1, 0 }
  uselistorder i32 %v2_f550, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_f490, { 3, 2, 1, 0 }
  uselistorder i32 %v5_f454, { 2, 1, 0 }
  uselistorder i32 %v2_f39c, { 2, 1, 0 }
  uselistorder i32 %v1_f38c, { 1, 2, 0 }
  uselistorder i32 %v1_f374, { 1, 2, 0 }
  uselistorder i32 %v2_f6a0, { 1, 0, 2 }
  uselistorder i32* %v4_f690, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_f364, { 0, 2, 1, 3 }
  uselistorder i32 %v2_f360, { 1, 0, 2 }
  uselistorder i32 %v2_f20c, { 0, 1, 9, 2, 3, 8, 4, 5, 6, 7, 10 }
  uselistorder i32 %v2_f1fc, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_f114, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 47, 48, 40, 41, 37, 45, 46, 38, 39, 42, 43, 44 }
  uselistorder i32* @global_var_1dc98.116, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 (i32)* @function_13c2c, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* null, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1dc9c.131 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1dc9c.131, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1dc9c.131 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1db14.111, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1db18.128, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i32)* @function_f01c, { 1, 0 }
  uselistorder i32 (i32)* @function_eb38, { 1, 0 }
  uselistorder i32 (i32)* @function_a3a0, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_1206c, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 60, 29, 30, 31, 32, 33, 34, 55, 56, 57, 58, 59, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 }
  uselistorder i32 (i32, i32)* @function_f974, { 10, 9, 8, 7, 6, 5, 4, 0, 3, 2, 1 }
  uselistorder i32 (i32)* @function_eeac, { 1, 0 }
  uselistorder i32* @global_var_1db1c.103, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_ee5c.101 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_13330, { 1, 0 }
  uselistorder label %dec_label_pc_f740, { 1, 0 }
  uselistorder label %dec_label_pc_f738, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f368.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_f48c, { 2, 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_f3dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f3cc, { 1, 0 }
  uselistorder label %dec_label_pc_f388.dec_label_pc_f388_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f370.dec_label_pc_f370_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f1c8, { 2, 0, 1 }
}

define i32 @function_f8c0() local_unnamed_addr {
dec_label_pc_f8c0:
  %v2_f8cc = load i32, i32* @global_var_1dca0.137, align 4
  %v2_f8d0 = load i32, i32* @global_var_1dcac.139, align 4
  store i32 ptrtoint (i32* @global_var_1dca4.141 to i32), i32* @lr, align 4
  %v4_f8dc = mul i32 %v2_f8cc, 2048
  %v5_f8dc = xor i32 %v4_f8dc, %v2_f8cc
  %v4_f8e0 = udiv i32 %v2_f8d0, 524288
  %v5_f8e0 = xor i32 %v4_f8e0, %v2_f8d0
  %v2_f8e4 = load i32, i32* @global_var_1dca4.141, align 4
  %v2_f8e8 = load i32, i32* @global_var_1dca8.143, align 4
  %v2_f8ec = xor i32 %v5_f8e0, %v5_f8dc
  %v4_f8f0 = udiv i32 %v5_f8dc, 256
  %v5_f8f0 = xor i32 %v2_f8ec, %v4_f8f0
  store i32 %v2_f8e4, i32* @global_var_1dca0.137, align 4
  store i32 %v2_f8e8, i32* @global_var_1dca4.141, align 4
  store i32 %v2_f8d0, i32* @global_var_1dca8.143, align 4
  store i32 %v5_f8f0, i32* @global_var_1dcac.139, align 4
  ret i32 %v5_f8f0

; uselistorder directives
  uselistorder i32 %v2_f8d0, { 2, 1, 0 }
  uselistorder i32 %v2_f8cc, { 1, 0 }
}

define i32 @function_f918(i32 %arg1) local_unnamed_addr {
dec_label_pc_f918:
  %stack_var_-12 = alloca i32, align 4
  %v3_f918 = load i32, i32* @r4, align 4
  store i32 %v3_f918, i32* %stack_var_-12, align 4
  %v2_f920 = call i32 @function_12ca8(i32* null)
  store i32 %v2_f920, i32* @global_var_1dca0.137, align 4
  %v0_f92c = call i32 @function_12a30()
  store i32 %v0_f92c, i32* @r4, align 4
  %v0_f934 = call i32 @function_12a5c()
  %v0_f93c = load i32, i32* @r4, align 4
  %v2_f93c = xor i32 %v0_f93c, %v0_f934
  store i32 %v2_f93c, i32* @r4, align 4
  store i32 %v2_f93c, i32* @global_var_1dca4.141, align 4
  %v1_f944 = call i32 @function_12f8c(i32 %v0_f934)
  %v2_f948 = load i32, i32* @global_var_1dca4.141, align 4
  %v2_f954 = xor i32 %v2_f948, %v1_f944
  store i32 %v2_f954, i32* @global_var_1dcac.139, align 4
  store i32 %v1_f944, i32* @global_var_1dca8.143, align 4
  %v2_f960 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f960, i32* @r4, align 4
  ret i32 %v1_f944

; uselistorder directives
  uselistorder i32 %v1_f944, { 1, 2, 0 }
  uselistorder i32 %v0_f934, { 1, 0 }
}

define i32 @function_f974(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f974:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f974 = load i32, i32* @r4, align 4
  store i32 %v3_f974, i32* %stack_var_-36, align 4
  %v6_f974 = load i32, i32* @r5, align 4
  %v9_f974 = load i32, i32* @r6, align 4
  %v12_f974 = load i32, i32* @r7, align 4
  %v28_f974 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_f97c = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_f988 = call i32 @function_11590(i32 61)
  %v3_f994 = call i32 @function_114ac(i32 61, i32* null)
  %v2_f9a0 = inttoptr i32 %v3_f994 to i8*
  %v3_f9a0 = call i32 @function_13080(i32 %v2_f97c, i8* %v2_f9a0)
  %v2_f9a4 = icmp eq i32 %arg2, 0
  br i1 %v2_f9a4, label %dec_label_pc_fa20, label %dec_label_pc_f9ac

dec_label_pc_f9ac:                                ; preds = %dec_label_pc_f974
  store i32 ptrtoint (i32* @global_var_1dca0.137 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dca4.141 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dca8.143 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1dcac.139 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_f9f4 = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_f9c0

dec_label_pc_f9c0:                                ; preds = %dec_label_pc_f9c0.dec_label_pc_f9c0_crit_edge, %dec_label_pc_f9ac
  %v1_f9e4 = phi i32 [ %v1_f9e4.pre, %dec_label_pc_f9c0.dec_label_pc_f9c0_crit_edge ], [ ptrtoint (i32* @global_var_1dca0.137 to i32), %dec_label_pc_f9ac ]
  %v2_f9c0 = load i32, i32* @global_var_1dcac.139, align 4
  store i32 %v2_f9c0, i32* %r2.global-to-local, align 4
  %v2_f9c4 = load i32, i32* @global_var_1dca0.137, align 4
  %v4_f9c8 = udiv i32 %v2_f9c0, 524288
  %v5_f9c8 = xor i32 %v4_f9c8, %v2_f9c0
  %v4_f9cc = mul i32 %v2_f9c4, 2048
  %v5_f9cc = xor i32 %v4_f9cc, %v2_f9c4
  %v2_f9d0 = xor i32 %v5_f9c8, %v5_f9cc
  %v2_f9d4 = load i32, i32* @global_var_1dca4.141, align 4
  %v2_f9d8 = load i32, i32* @global_var_1dca8.143, align 4
  store i32 %v2_f9d8, i32* %ip.global-to-local, align 4
  %v4_f9dc = udiv i32 %v5_f9cc, 256
  %v5_f9dc = xor i32 %v2_f9d0, %v4_f9dc
  store i32 %v5_f9dc, i32* @r4, align 4
  %v2_f9e4 = inttoptr i32 %v1_f9e4 to i32*
  store i32 %v2_f9d4, i32* %v2_f9e4, align 4
  %v0_f9e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_f9e8 = load i32, i32* %r8.global-to-local, align 4
  %v2_f9e8 = inttoptr i32 %v1_f9e8 to i32*
  store i32 %v0_f9e8, i32* %v2_f9e8, align 4
  %v0_f9ec = load i32, i32* %r2.global-to-local, align 4
  %v1_f9ec = load i32, i32* @r7, align 4
  %v2_f9ec = inttoptr i32 %v1_f9ec to i32*
  store i32 %v0_f9ec, i32* %v2_f9ec, align 4
  %v0_f9f0 = load i32, i32* @r4, align 4
  %v1_f9f0 = load i32, i32* @r6, align 4
  %v2_f9f0 = inttoptr i32 %v1_f9f0 to i32*
  store i32 %v0_f9f0, i32* %v2_f9f0, align 4
  %v2_f9f4 = call i32 @function_12044(i8* %v1_f9f4)
  %v0_f9fc = load i32, i32* @r4, align 4
  %v2_fa00 = call i32 @function_12760(i32 %v0_f9fc, i32 %v2_f9f4)
  %v2_fa08 = add i32 %v2_fa00, %v28_f974
  %v1_fa0c = add i32 %v2_fa08, -32
  %v2_fa0c = inttoptr i32 %v1_fa0c to i8*
  %v3_fa0c = load i8, i8* %v2_fa0c, align 1
  %v2_fa10 = load i32, i32* @r5, align 4
  %v3_fa10 = load i32, i32* %fp.global-to-local, align 4
  %v4_fa10 = add i32 %v3_fa10, %v2_fa10
  %v5_fa10 = inttoptr i32 %v4_fa10 to i8*
  store i8 %v3_fa0c, i8* %v5_fa10, align 1
  %v0_fa14 = load i32, i32* @r5, align 4
  %v1_fa14 = add i32 %v0_fa14, 1
  store i32 %v1_fa14, i32* @r5, align 4
  %v1_fa18 = load i32, i32* %sb.global-to-local, align 4
  %v9_fa18 = icmp eq i32 %v1_fa14, %v1_fa18
  br i1 %v9_fa18, label %dec_label_pc_fa20, label %dec_label_pc_f9c0.dec_label_pc_f9c0_crit_edge

dec_label_pc_f9c0.dec_label_pc_f9c0_crit_edge:    ; preds = %dec_label_pc_f9c0
  %v1_f9e4.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f9c0

dec_label_pc_fa20:                                ; preds = %dec_label_pc_f9c0, %dec_label_pc_f974
  %v1_fa24 = call i32 @function_114d8(i32 61)
  %v2_fa2c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_fa2c, i32* @r4, align 4
  store i32 %v6_f974, i32* @r5, align 4
  store i32 %v9_f974, i32* @r6, align 4
  store i32 %v12_f974, i32* @r7, align 4
  ret i32 %v1_fa24

; uselistorder directives
  uselistorder i32 %v2_f9c4, { 1, 0 }
  uselistorder i32 %v2_f9c0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* @global_var_1dcac.139, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1dca8.143, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1dca4.141, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32* @global_var_1dca0.137, { 2, 4, 1, 0, 3 }
}

define i32 @function_fa40(i32 %arg1) local_unnamed_addr {
dec_label_pc_fa40:
  %v2_fa44 = load i32, i32* @global_var_1dd4c.153, align 4
  %v2_fa4c = call i32 @function_12ad8(i32 %v2_fa44, i32 9)
  %v0_fa50 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_fa50, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_fa40
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_fa40, %bb
  ret i32 %v2_fa4c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_fa54() local_unnamed_addr {
dec_label_pc_fa54:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_fa54 = load i32, i32* @r4, align 4
  store i32 %v3_fa54, i32* %stack_var_-16, align 4
  %v0_fa58 = load i32, i32* @r0, align 4
  store i32 %v0_fa58, i32* %r5.global-to-local, align 4
  %v1_fa5c = add i32 %v0_fa58, 4
  %v2_fa5c = inttoptr i32 %v1_fa5c to i32*
  %v3_fa5c = load i32, i32* %v2_fa5c, align 4
  store i32 %v3_fa5c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 64128, i32* @lr, align 4
  %v1_fa7c = icmp ne i32 %v3_fa5c, -1
  call void @__pseudo_cond_branch(i1 %v1_fa7c, i32 ptrtoint (i32* @global_var_129d8.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_fa8c = call i32 @function_132bc(i32 2, i32 1, i32 0)
  store i32 %v3_fa8c, i32* %r3.global-to-local, align 4
  %v7_fa94 = icmp eq i32 %v3_fa8c, -1
  %v0_fa9c = load i32, i32* %r5.global-to-local, align 4
  %v1_fa9c = add i32 %v0_fa9c, 28
  store i32 %v1_fa9c, i32* %r0.global-to-local, align 4
  %v2_faa0 = add i32 %v0_fa9c, 4
  %v3_faa0 = inttoptr i32 %v2_faa0 to i32*
  store i32 %v3_fa8c, i32* %v3_faa0, align 4
  br i1 %v7_fa94, label %dec_label_pc_fa54.dec_label_pc_fb1c_crit_edge, label %dec_label_pc_faa8

dec_label_pc_fa54.dec_label_pc_fb1c_crit_edge:    ; preds = %dec_label_pc_fa54
  %v14_fb20.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb1c

dec_label_pc_faa8:                                ; preds = %dec_label_pc_fa54
  %v0_faa8 = load i32, i32* %r6.global-to-local, align 4
  %v1_faa8 = load i32, i32* %r5.global-to-local, align 4
  %v2_faa8 = add i32 %v1_faa8, 24
  %v3_faa8 = inttoptr i32 %v2_faa8 to i32*
  store i32 %v0_faa8, i32* %v3_faa8, align 4
  %v0_faac = load i32, i32* %r0.global-to-local, align 4
  %v2_faac = call i32 @function_120e4(i32 %v0_faac, i32 256)
  store i32 %v2_faac, i32* %r0.global-to-local, align 4
  %v0_fab0 = load i32, i32* %r5.global-to-local, align 4
  %v1_fab0 = add i32 %v0_fab0, 4
  %v2_fab0 = inttoptr i32 %v1_fab0 to i32*
  %v3_fab0 = load i32, i32* %v2_fab0, align 4
  store i32 %v3_fab0, i32* @r4, align 4
  %v0_fab8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fab8, i32* @r2, align 4
  store i32 %v3_fab0, i32* %r0.global-to-local, align 4
  %v2_fac0 = call i32 @function_12914(i32 %v3_fab0, i32 3)
  %v1_fac8 = or i32 %v2_fac0, 2048
  store i32 %v1_fac8, i32* @r2, align 4
  %v0_facc = load i32, i32* @r4, align 4
  store i32 %v0_facc, i32* %r0.global-to-local, align 4
  %v2_fad0 = call i32 @function_12914(i32 %v0_facc, i32 4)
  store i32 %v2_fad0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dce4.155 to i32), i32* %r3.global-to-local, align 4
  %v0_fad8 = load i32, i32* %r5.global-to-local, align 4
  %v1_fad8 = add i32 %v0_fad8, 20
  %v2_fad8 = inttoptr i32 %v1_fad8 to i32*
  %v3_fad8 = load i32, i32* %v2_fad8, align 4
  store i32 %v3_fad8, i32* @r4, align 4
  %v2_fadc = load i32, i32* @global_var_1dce4.155, align 4
  %v1_fae0 = add i32 %v0_fad8, 16
  %v2_fae0 = inttoptr i32 %v1_fae0 to i32*
  %v3_fae0 = load i32, i32* %v2_fae0, align 4
  store i32 %v3_fae0, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_fae8 = add i32 %v0_fad8, 8
  %v3_fae8 = inttoptr i32 %v2_fae8 to i32*
  store i32 %v2_fadc, i32* %v3_fae8, align 4
  %v0_faec = load i32, i32* %r3.global-to-local, align 4
  %v1_faec = load i32, i32* %r5.global-to-local, align 4
  %v2_faec = add i32 %v1_faec, 12
  %v3_faec = inttoptr i32 %v2_faec to i32*
  store i32 %v0_faec, i32* %v3_faec, align 4
  %v0_faf4 = load i32, i32* %r5.global-to-local, align 4
  %v1_faf4 = add i32 %v0_faf4, 4
  %v2_faf4 = inttoptr i32 %v1_faf4 to i32*
  %v3_faf4 = load i32, i32* %v2_faf4, align 4
  store i32 %v3_faf4, i32* %r0.global-to-local, align 4
  %v0_faf8 = load i32, i32* %r3.global-to-local, align 4
  %v2_faf8 = mul i32 %v0_faf8, 2
  store i32 %v2_faf8, i32* %r3.global-to-local, align 4
  store i32 %v2_faf8, i32* %stack_var_-32, align 4
  %v3_fb18 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_fb18 = call i32 @function_13118(i32 %v3_faf4, %sockaddr* %v3_fb18, i32 16)
  store i32 %v4_fb18, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb1c

dec_label_pc_fb1c:                                ; preds = %dec_label_pc_fa54.dec_label_pc_fb1c_crit_edge, %dec_label_pc_faa8
  %v14_fb20 = phi i32 [ %v14_fb20.pre, %dec_label_pc_fa54.dec_label_pc_fb1c_crit_edge ], [ %v4_fb18, %dec_label_pc_faa8 ]
  %v2_fb20 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_fb20, i32* @r4, align 4
  ret i32 %v14_fb20

; uselistorder directives
  uselistorder i32 %v2_faf8, { 1, 0 }
  uselistorder i32 %v3_fa8c, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 6, 5, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_120e4, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_fb1c, { 1, 0 }
}

define i32 @function_fb28(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fb28:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_fb28 = load i32, i32* @r4, align 4
  %v6_fb28 = load i32, i32* @r5, align 4
  %v9_fb28 = load i32, i32* @r6, align 4
  %v12_fb28 = load i32, i32* @r7, align 4
  %v15_fb28 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1dcb0.157 to i32), i32* @r8, align 4
  %v2_fb30 = load i32, i32* @global_var_1dcb0.157, align 4
  store i32 ptrtoint (i32* @global_var_1dcdc.159 to i32), i32* %sb.global-to-local, align 4
  %v3_fb3c = mul i32 %v2_fb30, 16
  store i32 %v3_fb3c, i32* %r3.global-to-local, align 4
  %v3_fb44 = urem i32 %arg3, 65536
  store i32 %v3_fb44, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_fb50 = load i32, i32* @global_var_1dcdc.159, align 4
  %v1_fb54 = add i32 %v3_fb3c, 16
  store i32 %v1_fb54, i32* %r1.global-to-local, align 4
  store i32 %v3_fb44, i32* %stack_var_-44, align 4
  %v15_fb5c = call i32 @function_136f0(i32 %v2_fb50, i32 %v1_fb54, i32 %v3_fb44, i32 %v3_fb3c)
  store i32 %v15_fb5c, i32* %sl.global-to-local, align 4
  %v0_fb64 = load i32, i32* @r5, align 4
  %v1_fb68 = load i32, i32* %sb.global-to-local, align 4
  %v2_fb68 = inttoptr i32 %v1_fb68 to i32*
  store i32 %v15_fb5c, i32* %v2_fb68, align 4
  %v2_fb6c = load i32, i32* @global_var_1dcb0.157, align 4
  store i32 %v2_fb6c, i32* %fp.global-to-local, align 4
  %v1_fb70 = inttoptr i32 %v0_fb64 to i8*
  %v2_fb70 = call i32 @function_12044(i8* %v1_fb70)
  %sext = mul i32 %v2_fb70, 16777216
  %v1_fb74 = sdiv i32 %sext, 16777216
  %v2_fb74 = add nsw i32 %v1_fb74, 1
  store i32 %v2_fb74, i32* @r4, align 4
  store i32 %v1_fb74, i32* @r7, align 4
  %v1_fb80 = call i32 @function_13454(i32 %v2_fb74)
  %v0_fb84 = load i32, i32* @r5, align 4
  store i32 %v0_fb84, i32* %r1.global-to-local, align 4
  %v0_fb88 = load i32, i32* @r4, align 4
  store i32 %v0_fb88, i32* %r2.global-to-local, align 4
  store i32 %v1_fb80, i32* @r6, align 4
  %v3_fb90 = call i32 @function_120c0(i32 %v1_fb80, i32 %v0_fb84, i32 %v0_fb88)
  %v0_fb94 = load i32, i32* @r7, align 4
  %tmp23 = icmp slt i32 %v0_fb94, 1
  %extract.t8 = trunc i32 %v0_fb94 to i8
  br i1 %tmp23, label %dec_label_pc_fbc0, label %dec_label_pc_fb9c

dec_label_pc_fb9c:                                ; preds = %dec_label_pc_fb28
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fba4

dec_label_pc_fba4:                                ; preds = %dec_label_pc_fba4.dec_label_pc_fba4_crit_edge, %dec_label_pc_fb9c
  %v1_fbac = phi i32 [ %v1_fbac.pre, %dec_label_pc_fba4.dec_label_pc_fba4_crit_edge ], [ -81, %dec_label_pc_fb9c ]
  %v2_fbb0 = phi i32 [ %v1_fbb4, %dec_label_pc_fba4.dec_label_pc_fba4_crit_edge ], [ 0, %dec_label_pc_fb9c ]
  %v1_fba4 = load i32, i32* @r6, align 4
  %v2_fba4 = add i32 %v1_fba4, %v2_fbb0
  %v3_fba4 = inttoptr i32 %v2_fba4 to i8*
  %v4_fba4 = load i8, i8* %v3_fba4, align 1
  %v6_fba4 = zext i8 %v4_fba4 to i32
  %v1_fba8 = sub i32 -1, %v1_fbac
  %v2_fbac = xor i32 %v6_fba4, %v1_fba8
  store i32 %v2_fbac, i32* %r3.global-to-local, align 4
  %v1_fbb0 = trunc i32 %v2_fbac to i8
  store i8 %v1_fbb0, i8* %v3_fba4, align 1
  %v0_fbb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_fbb4 = add i32 %v0_fbb4, 1
  store i32 %v1_fbb4, i32* %r2.global-to-local, align 4
  %v0_fbb8 = load i32, i32* @r7, align 4
  %v9_fbb8 = icmp eq i32 %v0_fbb8, %v1_fbb4
  br i1 %v9_fbb8, label %dec_label_pc_fbc0.loopexit, label %dec_label_pc_fba4.dec_label_pc_fba4_crit_edge

dec_label_pc_fba4.dec_label_pc_fba4_crit_edge:    ; preds = %dec_label_pc_fba4
  %v1_fbac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fba4

dec_label_pc_fbc0.loopexit:                       ; preds = %dec_label_pc_fba4
  %extract.t = trunc i32 %v1_fbb4 to i8
  br label %dec_label_pc_fbc0

dec_label_pc_fbc0:                                ; preds = %dec_label_pc_fbc0.loopexit, %dec_label_pc_fb28
  %v0_fbd0.off0 = phi i8 [ %extract.t, %dec_label_pc_fbc0.loopexit ], [ %extract.t8, %dec_label_pc_fb28 ]
  %v2_fbc0 = load i32, i32* @global_var_1dcb0.157, align 4
  %v2_fbc4 = load i32, i32* @global_var_1dcdc.159, align 4
  store i32 %v2_fbc4, i32* %r2.global-to-local, align 4
  %v3_fbc8 = mul i32 %v2_fbc0, 16
  %v2_fbcc = add i32 %v2_fbc4, %v3_fbc8
  store i32 %v2_fbcc, i32* %r3.global-to-local, align 4
  %v3_fbd0 = add i32 %v2_fbcc, 12
  %v4_fbd0 = inttoptr i32 %v3_fbd0 to i8*
  store i8 %v0_fbd0.off0, i8* %v4_fbd0, align 1
  %v0_fbd4 = load i32, i32* @r6, align 4
  %v1_fbd4 = load i32, i32* %sl.global-to-local, align 4
  %v2_fbd4 = load i32, i32* %fp.global-to-local, align 4
  %v5_fbd4 = mul i32 %v2_fbd4, 16
  %v6_fbd4 = add i32 %v5_fbd4, %v1_fbd4
  %v7_fbd4 = inttoptr i32 %v6_fbd4 to i32*
  store i32 %v0_fbd4, i32* %v7_fbd4, align 4
  %v2_fbdc = load i32, i32* @global_var_1dcb0.157, align 4
  store i32 %v2_fbdc, i32* @r7, align 4
  %v2_fbe0 = load i32, i32* @global_var_1dcdc.159, align 4
  store i32 %v2_fbe0, i32* %sl.global-to-local, align 4
  %v1_fbe4 = inttoptr i32 %arg2 to i8*
  %v2_fbe4 = call i32 @function_12044(i8* %v1_fbe4)
  %sext1 = mul i32 %v2_fbe4, 16777216
  %v1_fbe8 = sdiv i32 %sext1, 16777216
  %v2_fbe8 = add nsw i32 %v1_fbe8, 1
  store i32 %v2_fbe8, i32* @r4, align 4
  store i32 %v1_fbe8, i32* @r5, align 4
  %v1_fbf4 = call i32 @function_13454(i32 %v2_fbe8)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_fbfc = load i32, i32* @r4, align 4
  store i32 %v0_fbfc, i32* %r2.global-to-local, align 4
  store i32 %v1_fbf4, i32* %r6.global-to-local, align 4
  %v3_fc04 = call i32 @function_120c0(i32 %v1_fbf4, i32 %arg2, i32 %v0_fbfc)
  %v0_fc08 = load i32, i32* @r5, align 4
  %tmp24 = icmp slt i32 %v0_fc08, 1
  %extract.t10 = trunc i32 %v0_fc08 to i8
  br i1 %tmp24, label %dec_label_pc_fc34, label %dec_label_pc_fc10

dec_label_pc_fc10:                                ; preds = %dec_label_pc_fbc0
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -81, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc18

dec_label_pc_fc18:                                ; preds = %dec_label_pc_fc18.dec_label_pc_fc18_crit_edge, %dec_label_pc_fc10
  %v1_fc20 = phi i32 [ %v1_fc20.pre, %dec_label_pc_fc18.dec_label_pc_fc18_crit_edge ], [ -81, %dec_label_pc_fc10 ]
  %v2_fc24 = phi i32 [ %v1_fc28, %dec_label_pc_fc18.dec_label_pc_fc18_crit_edge ], [ 0, %dec_label_pc_fc10 ]
  %v1_fc18 = load i32, i32* %r6.global-to-local, align 4
  %v2_fc18 = add i32 %v1_fc18, %v2_fc24
  %v3_fc18 = inttoptr i32 %v2_fc18 to i8*
  %v4_fc18 = load i8, i8* %v3_fc18, align 1
  %v6_fc18 = zext i8 %v4_fc18 to i32
  %v1_fc1c = sub i32 -1, %v1_fc20
  %v2_fc20 = xor i32 %v6_fc18, %v1_fc1c
  store i32 %v2_fc20, i32* %r3.global-to-local, align 4
  %v1_fc24 = trunc i32 %v2_fc20 to i8
  store i8 %v1_fc24, i8* %v3_fc18, align 1
  %v0_fc28 = load i32, i32* %r2.global-to-local, align 4
  %v1_fc28 = add i32 %v0_fc28, 1
  store i32 %v1_fc28, i32* %r2.global-to-local, align 4
  %v0_fc2c = load i32, i32* @r5, align 4
  %v9_fc2c = icmp eq i32 %v0_fc2c, %v1_fc28
  br i1 %v9_fc2c, label %dec_label_pc_fc34.loopexit, label %dec_label_pc_fc18.dec_label_pc_fc18_crit_edge

dec_label_pc_fc18.dec_label_pc_fc18_crit_edge:    ; preds = %dec_label_pc_fc18
  %v1_fc20.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc18

dec_label_pc_fc34.loopexit:                       ; preds = %dec_label_pc_fc18
  %extract.t9 = trunc i32 %v1_fc28 to i8
  br label %dec_label_pc_fc34

dec_label_pc_fc34:                                ; preds = %dec_label_pc_fc34.loopexit, %dec_label_pc_fbc0
  %v0_fc44.off0 = phi i8 [ %extract.t9, %dec_label_pc_fc34.loopexit ], [ %extract.t10, %dec_label_pc_fbc0 ]
  %v2_fc34 = load i32, i32* @global_var_1dcb0.157, align 4
  %v2_fc38 = load i32, i32* @global_var_1dcdc.159, align 4
  %v3_fc3c = mul i32 %v2_fc34, 16
  %v2_fc40 = or i32 %v3_fc3c, 13
  %v3_fc44 = add i32 %v2_fc40, %v2_fc38
  %v4_fc44 = inttoptr i32 %v3_fc44 to i8*
  store i8 %v0_fc44.off0, i8* %v4_fc44, align 1
  %v2_fc4c = load i32, i32* @global_var_1dcb0.157, align 4
  store i32 %v2_fc4c, i32* %lr.global-to-local, align 4
  %v4_fc50 = load i8, i8* @global_var_1dce1.162, align 1
  %v5_fc50 = zext i8 %v4_fc50 to i32
  %v3_fc54 = load i8, i8* bitcast (i8** @global_var_1dce0.161 to i8*), align 4
  %v4_fc54 = zext i8 %v3_fc54 to i32
  %v2_fc58 = load i32, i32* @global_var_1dcdc.159, align 4
  %v4_fc5c = mul nuw nsw i32 %v5_fc50, 256
  %v5_fc5c = or i32 %v4_fc54, %v4_fc5c
  store i32 %v5_fc5c, i32* %r2.global-to-local, align 4
  %v3_fc60 = mul i32 %v2_fc4c, 16
  %v2_fc64 = add i32 %v2_fc58, %v3_fc60
  store i32 %v2_fc64, i32* %r1.global-to-local, align 4
  %v3_fc6c = add i32 %v2_fc64, 9
  %v4_fc6c = inttoptr i32 %v3_fc6c to i8*
  store i8 %v4_fc50, i8* %v4_fc6c, align 1
  %v0_fc70 = load i32, i32* %r2.global-to-local, align 4
  %v1_fc70 = trunc i32 %v0_fc70 to i8
  %v2_fc70 = load i32, i32* %r1.global-to-local, align 4
  %v3_fc70 = add i32 %v2_fc70, 8
  %v4_fc70 = inttoptr i32 %v3_fc70 to i8*
  store i8 %v1_fc70, i8* %v4_fc70, align 1
  %v4_fc74 = load i8, i8* @global_var_1dce1.162, align 1
  %v5_fc74 = zext i8 %v4_fc74 to i32
  %v3_fc78 = load i8, i8* bitcast (i8** @global_var_1dce0.161 to i8*), align 4
  %v4_fc78 = zext i8 %v3_fc78 to i32
  %v4_fc7c = mul nuw nsw i32 %v5_fc74, 256
  %v5_fc7c = or i32 %v4_fc78, %v4_fc7c
  %v2_fc80 = load i32, i32* %stack_var_-44, align 4
  %v2_fc84 = add i32 %v5_fc7c, %v2_fc80
  store i32 %v2_fc84, i32* %r3.global-to-local, align 4
  %v3_fc8811 = udiv i32 %v2_fc84, 256
  %v1_fc8c = trunc i32 %v3_fc8811 to i8
  %v2_fc8c = load i32, i32* %r1.global-to-local, align 4
  %v3_fc8c = add i32 %v2_fc8c, 11
  %v4_fc8c = inttoptr i32 %v3_fc8c to i8*
  store i8 %v1_fc8c, i8* %v4_fc8c, align 1
  %v0_fc90 = load i32, i32* %r3.global-to-local, align 4
  %v1_fc90 = trunc i32 %v0_fc90 to i8
  %v2_fc90 = load i32, i32* %r1.global-to-local, align 4
  %v3_fc90 = add i32 %v2_fc90, 10
  %v4_fc90 = inttoptr i32 %v3_fc90 to i8*
  store i8 %v1_fc90, i8* %v4_fc90, align 1
  %v4_fc94 = load i8, i8* @global_var_1dce1.162, align 1
  %v5_fc94 = zext i8 %v4_fc94 to i32
  %v3_fc98 = load i8, i8* bitcast (i8** @global_var_1dce0.161 to i8*), align 4
  %v4_fc98 = zext i8 %v3_fc98 to i32
  %v4_fc9c = mul nuw nsw i32 %v5_fc94, 256
  %v5_fc9c = or i32 %v4_fc98, %v4_fc9c
  %v2_fca0 = load i32, i32* %stack_var_-44, align 4
  %v2_fca4 = add i32 %v5_fc9c, %v2_fca0
  store i32 %v2_fca4, i32* %r2.global-to-local, align 4
  %v0_fca8 = load i32, i32* @r7, align 4
  %v3_fca8 = mul i32 %v0_fca8, 16
  %v1_fcac = load i32, i32* %sl.global-to-local, align 4
  %v2_fcac = add i32 %v1_fcac, %v3_fca8
  store i32 %v2_fcac, i32* %r3.global-to-local, align 4
  %v0_fcb0 = load i32, i32* %lr.global-to-local, align 4
  %v1_fcb0 = add i32 %v0_fcb0, 1
  store i32 %v1_fcb0, i32* @lr, align 4
  %v3_fcb4 = sdiv i32 %v2_fca4, 256
  store i32 %v3_fcb4, i32* %r1.global-to-local, align 4
  %v0_fcb8 = load i32, i32* %r6.global-to-local, align 4
  %v2_fcb8 = add i32 %v2_fcac, 4
  %v3_fcb8 = inttoptr i32 %v2_fcb8 to i32*
  store i32 %v0_fcb8, i32* %v3_fcb8, align 4
  %v0_fcbc = load i32, i32* @lr, align 4
  %v1_fcbc = load i32, i32* @r8, align 4
  %v2_fcbc = inttoptr i32 %v1_fcbc to i32*
  store i32 %v0_fcbc, i32* %v2_fcbc, align 4
  %v0_fcc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_fcc0 = trunc i32 %v0_fcc0 to i8
  store i8 %v1_fcc0, i8* @global_var_1dce1.162, align 1
  %v0_fcc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_fcc4 = trunc i32 %v0_fcc4 to i8
  store i8 %v1_fcc4, i8* bitcast (i8** @global_var_1dce0.161 to i8*), align 4
  store i32 %v3_fb28, i32* @r4, align 4
  store i32 %v6_fb28, i32* @r5, align 4
  store i32 %v9_fb28, i32* @r6, align 4
  store i32 %v12_fb28, i32* @r7, align 4
  store i32 %v15_fb28, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1dce0.161 to i32)

; uselistorder directives
  uselistorder i32 %v1_fc28, { 0, 2, 3, 1 }
  uselistorder i32 %v1_fbf4, { 1, 0 }
  uselistorder i32 %v1_fbb4, { 0, 2, 3, 1 }
  uselistorder i32 %v1_fb80, { 1, 0 }
  uselistorder i32 %v3_fb44, { 1, 2, 0 }
  uselistorder i32 %v3_fb3c, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32 -81, { 0, 2, 1, 3 }
  uselistorder i32 (i8*)* @function_12044, { 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 78, 79, 80, 81, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 70, 71, 72, 73, 74, 75, 76, 77, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69 }
  uselistorder i32 (i32, i32, i32, i32)* @function_136f0, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_fcdc(i32 %arg1) local_unnamed_addr {
dec_label_pc_fcdc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp249 = call i32 @__decompiler_undefined_function_0()
  %tmp250 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-52 = alloca i8, align 1
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %tmp278 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-36 = alloca i32, align 4
  %v3_fcdc = load i32, i32* @r4, align 4
  store i32 %v3_fcdc, i32* %stack_var_-36, align 4
  %v6_fcdc = load i32, i32* @r5, align 4
  %v15_fcdc = load i32, i32* @r8, align 4
  %v18_fcdc = load i32, i32* @sb, align 4
  %v21_fcdc = load i32, i32* @sl, align 4
  %v0_fce8 = call i32 @function_12a04()
  store i32 %v0_fce8, i32* %r0.global-to-local, align 4
  %v7_fcec = icmp eq i32 %v0_fce8, -1
  %. = zext i1 %v7_fcec to i32
  %tmp281 = icmp slt i32 %v0_fce8, 1
  %storemerge240 = select i1 %tmp281, i32 %., i32 1
  store i32 %storemerge240, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1dd4c.153 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd08 = icmp eq i32 %storemerge240, 0
  store i1 %v2_fd08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_fce8, i32* @global_var_1dd4c.153, align 4
  br i1 %v2_fd08, label %dec_label_pc_fd20, label %dec_label_pc_fd14

dec_label_pc_fd14:                                ; preds = %dec_label_pc_fcdc
  store i32 %v3_fcdc, i32* %r4.global-to-local, align 4
  store i32 %v6_fcdc, i32* %r5.global-to-local, align 4
  store i32 %v15_fcdc, i32* %r8.global-to-local, align 4
  store i32 %v18_fcdc, i32* @sb, align 4
  store i32 %v21_fcdc, i32* @sl, align 4
  ret i32 %v0_fce8

dec_label_pc_fd20:                                ; preds = %dec_label_pc_fcdc
  %v0_fd20 = call i32 @function_122fc()
  store i32 %v0_fd20, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dd2c.82 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_fd20, i32* @global_var_1dd2c.82, align 4
  %v1_fd2c = call i32 @function_f918(i32 %v0_fd20)
  %v0_fd30 = load i32, i32* @r4, align 4
  store i32 %v0_fd30, i32* %r0.global-to-local, align 4
  %v1_fd34 = inttoptr i32 %v0_fd30 to i32*
  %v2_fd34 = call i32 @function_12ca8(i32* %v1_fd34)
  store i32 ptrtoint (i32* @global_var_1dce4.155 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_fd34, i32* @global_var_1dce4.155, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_fd48 = call i32 @function_135a8(i32 256, i32 288)
  store i32 %v2_fd48, i32* %lr.global-to-local, align 4
  %v0_fd54 = load i32, i32* @r4, align 4
  store i32 %v0_fd54, i32* %stack_var_-48, align 4
  store i32 %v2_fd48, i32* @global_var_1dd44.167, align 4
  store i32 %v0_fd54, i32* %r3.global-to-local, align 4
  store i32 %v0_fd54, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_fd54, i32* %ip.global-to-local, align 4
  %v1_fd6c = add i32 %v2_fd48, 4
  store i32 %v1_fd6c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fd70

dec_label_pc_fd70:                                ; preds = %dec_label_pc_fd70.dec_label_pc_fd70_crit_edge, %dec_label_pc_fd20
  %v0_fd88 = phi i32 [ %v0_fd88.pre, %dec_label_pc_fd70.dec_label_pc_fd70_crit_edge ], [ %v0_fd54, %dec_label_pc_fd20 ]
  %v0_fd78 = phi i32 [ %v0_fd90, %dec_label_pc_fd70.dec_label_pc_fd70_crit_edge ], [ %v0_fd54, %dec_label_pc_fd20 ]
  %v1_fd80 = phi i32 [ %v1_fd80.pre, %dec_label_pc_fd70.dec_label_pc_fd70_crit_edge ], [ %v2_fd48, %dec_label_pc_fd20 ]
  %v3_fd70 = mul i32 %v0_fd78, 256
  store i32 %v3_fd70, i32* %r2.global-to-local, align 4
  %v1_fd78 = add i32 %v0_fd78, 1
  store i32 %v1_fd78, i32* %ip.global-to-local, align 4
  %v2_fd7c = mul i32 %v0_fd78, 288
  %v2_fd80 = add i32 %v1_fd80, 12
  %v2_fd88 = add i32 %v2_fd80, %v2_fd7c
  %v3_fd88 = inttoptr i32 %v2_fd88 to i32*
  store i32 %v0_fd88, i32* %v3_fd88, align 4
  %v0_fd8c = load i32, i32* %r0.global-to-local, align 4
  %v1_fd8c = load i32, i32* %r1.global-to-local, align 4
  %v2_fd8c = inttoptr i32 %v1_fd8c to i32*
  store i32 %v0_fd8c, i32* %v2_fd8c, align 4
  %v3_fd8c = load i32, i32* %r1.global-to-local, align 4
  %v4_fd8c = add i32 %v3_fd8c, 288
  store i32 %v4_fd8c, i32* %r1.global-to-local, align 4
  %v0_fd90 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_fd90, i32* %r3.global-to-local, align 4
  %v7_fd94 = icmp sgt i32 %v1_fd78, 255
  br i1 %v7_fd94, label %dec_label_pc_fd98, label %dec_label_pc_fd70.dec_label_pc_fd70_crit_edge

dec_label_pc_fd70.dec_label_pc_fd70_crit_edge:    ; preds = %dec_label_pc_fd70
  %v1_fd80.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_fd88.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_fd70

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd70
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_fd90, i32* %stack_var_-48, align 4
  %v3_fda8 = call i32 @function_132bc(i32 2, i32 3, i32 6)
  store i32 %v3_fda8, i32* %r0.global-to-local, align 4
  %v2_fdb0 = icmp eq i32 %v3_fda8, -1
  store i1 %v2_fdb0, i1* %cpsr_c.global-to-local, align 1
  %v7_fdb0 = icmp eq i32 %v3_fda8, -1
  store i1 %v7_fdb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_fda8, i32* @r4, align 4
  store i32 %v3_fda8, i32* @global_var_1dd48.169, align 4
  br i1 %v7_fdb0, label %dec_label_pc_10580, label %dec_label_pc_fdc0

dec_label_pc_fdc0:                                ; preds = %dec_label_pc_fd98
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_fdc4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_fdc4, i32* @r2, align 4
  %v2_fdc8 = call i32 @function_12914(i32 %v3_fda8, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_fdd0 = or i32 %v2_fdc8, 2048
  store i32 %v1_fdd0, i32* @r2, align 4
  %v0_fdd4 = load i32, i32* @r4, align 4
  store i32 %v0_fdd4, i32* %r0.global-to-local, align 4
  %v2_fdd8 = call i32 @function_12914(i32 %v0_fdd4, i32 4)
  %v2_fde4 = load i32, i32* @global_var_1dd48.169, align 4
  store i32 %v2_fde4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_fdec = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_fdec, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_fdf4 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_fdf4, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v6_fe04 = call i32 @function_1328c(i32 %v2_fde4, i32 %v0_fdec, i32 3, i32* nonnull %stack_var_-48, i32 4)
  store i32 %v6_fe04, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe08 = icmp eq i32 %v6_fe04, 0
  store i1 %v2_fe08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe08, label %dec_label_pc_fe10, label %dec_label_pc_10574

dec_label_pc_fe10:                                ; preds = %dec_label_pc_fdc0, %dec_label_pc_fe10
  %v0_fe10 = call i32 @function_f8c0()
  %v3_fe14 = mul i32 %v0_fe10, 65536
  store i32 %v3_fe14, i32* %r0.global-to-local, align 4
  %v1_fe20 = mul i32 %v0_fe10, 256
  %v3_fe24 = and i32 %v1_fe20, 65280
  %tmp284 = udiv i32 %v0_fe10, 256
  %v4_fe28 = urem i32 %tmp284, 256
  %v5_fe28 = or i32 %v4_fe28, %v3_fe24
  store i32 %v5_fe28, i32* %r3.global-to-local, align 4
  %v2_fe2c = icmp ugt i32 %v5_fe28, 1023
  store i1 %v2_fe2c, i1* %cpsr_c.global-to-local, align 1
  %v7_fe2c = icmp eq i32 %v5_fe28, 1024
  store i1 %v7_fe2c, i1* %cpsr_z.global-to-local, align 1
  %v3_fe30 = icmp ult i32 %v5_fe28, 1022
  br i1 %v3_fe30, label %dec_label_pc_fe10, label %dec_label_pc_fe34

dec_label_pc_fe34:                                ; preds = %dec_label_pc_fe10
  %v5_fe1c.le = trunc i32 %v0_fe10 to i8
  store i32 ptrtoint (i8** @global_var_1dcb4.171 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1dcb4.171 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1dcb7.172 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1dcb6.173 to i8*), align 4
  %v0_fe68 = call i32 @function_f8c0()
  %v1_fe68 = trunc i32 %v0_fe68 to i8
  store i32 %v0_fe68, i32* %r0.global-to-local, align 4
  %v4_fe70 = sext i8 %v5_fe1c.le to i32
  %v3_fe74 = load i8, i8* @global_var_1dcd4.176, align 1
  store i32 ptrtoint (i8** @global_var_1dcb4.171 to i32), i32* %lr.global-to-local, align 4
  %v3_fe7c239 = udiv i32 %v4_fe70, 256
  store i8 64, i8* bitcast (i32* @global_var_1dcbc.177 to i8*), align 4
  %v2_fe88 = and i32 %v0_fe68, 128
  %v3_fe88 = icmp ne i32 %v2_fe88, 0
  store i1 %v3_fe88, i1* %cpsr_c.global-to-local, align 1
  %v4_fe88238 = udiv i32 %v0_fe68, 256
  store i32 ptrtoint (i32* @global_var_1dcc8.175 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_fe74, 16
  %v1_fe90 = zext i8 %tmp to i32
  %v1_fe94 = trunc i32 %v4_fe88238 to i8
  store i8 %v1_fe94, i8* bitcast (i32* @global_var_1dcb9.178 to i8*), align 4
  %v1_fe98 = or i32 %v1_fe90, 80
  store i32 %v1_fe98, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  store i32 6, i32* @r6, align 4
  %v1_fea4 = trunc i32 %v1_fe98 to i8
  store i8 %v1_fea4, i8* @global_var_1dcd4.176, align 1
  %v1_fea8 = trunc i32 %v3_fe7c239 to i8
  store i8 %v1_fea8, i8* bitcast (i32* @global_var_1dcc9.179 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1dccb.180 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1dcbd.181 to i8*), align 4
  store i32 %v4_fe70, i32* %ip.global-to-local, align 4
  store i8 %v1_fe68, i8* bitcast (i32* @global_var_1dcb8.182 to i8*), align 4
  store i8 %v5_fe1c.le, i8* bitcast (i32* @global_var_1dcc8.175 to i8*), align 4
  %v0_fec0 = load i32, i32* @r5, align 4
  %v1_fec0 = trunc i32 %v0_fec0 to i8
  store i8 %v1_fec0, i8* bitcast (i32* @global_var_1dcca.183 to i8*), align 4
  %v0_fec4 = call i32 @function_f8c0()
  %v1_fec4 = trunc i32 %v0_fec4 to i8
  store i32 ptrtoint (i32* @global_var_1dcc8.175 to i32), i32* @lr, align 4
  %v3_fecc = load i8, i8* @global_var_1dcd5.184, align 1
  %v4_fecc = zext i8 %v3_fecc to i32
  %v2_fed0 = and i32 %v0_fec4, 128
  %v3_fed0 = icmp ne i32 %v2_fed0, 0
  store i1 %v3_fed0, i1* %cpsr_c.global-to-local, align 1
  %v4_fed0 = sdiv i32 %v0_fec4, 256
  store i32 %v4_fed0, i32* %ip.global-to-local, align 4
  %v1_fed4 = or i32 %v4_fecc, 2
  store i32 %v1_fed4, i32* %r3.global-to-local, align 4
  store i32 %v0_fec4, i32* @r4, align 4
  %v1_fedc = trunc i32 %v4_fed0 to i8
  store i8 %v1_fedc, i8* bitcast (i32* @global_var_1dcd7.185 to i8*), align 4
  %v1_fee0 = trunc i32 %v1_fed4 to i8
  store i8 %v1_fee0, i8* @global_var_1dcd5.184, align 1
  store i8 %v1_fec4, i8* bitcast (i32* @global_var_1dcd6.186 to i8*), align 4
  store i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15200.190 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_fef4 = call i32 @function_fb28(i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32 ptrtoint ([8 x i8]* @global_var_15200.190 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15208.192 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ff04 = call i32 @function_fb28(i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_15208.192 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15210.194 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_ff14 = call i32 @function_fb28(i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32 ptrtoint ([9 x i8]* @global_var_15210.194 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32* %r1.global-to-local, align 4
  %v5_ff24 = call i32 @function_fb28(i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1521c.196 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_ff34 = call i32 @function_fb28(i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32 ptrtoint (i32* @global_var_1521c.196 to i32), i32 17)
  store i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150f0.198 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_ff44 = call i32 @function_fb28(i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32 ptrtoint (i32* @global_var_150f0.198 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_151f0.200 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ff54 = call i32 @function_fb28(i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_151f0.200 to i32), i32 9)
  store i32 ptrtoint ([4 x i8]* @global_var_15120.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150f0.198 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_ff64 = call i32 @function_fb28(i32 ptrtoint ([4 x i8]* @global_var_15120.202 to i32), i32 ptrtoint (i32* @global_var_150f0.198 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1512c.206 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_ff74 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([5 x i8]* @global_var_1512c.206 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15134.208 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_ff84 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([7 x i8]* @global_var_15134.208 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150f0.198 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_ff94 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint (i32* @global_var_150f0.198 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1513c.210 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ffa4 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([6 x i8]* @global_var_1513c.210 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15144.212 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_ffb4 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([9 x i8]* @global_var_15144.212 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15150.214 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ffc4 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([6 x i8]* @global_var_15150.214 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15158.216 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ffd4 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([6 x i8]* @global_var_15158.216 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15160.218 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_ffe4 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([9 x i8]* @global_var_15160.218 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_1516c.220 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_fff4 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([8 x i8]* @global_var_1516c.220 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15174.222 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10004 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([4 x i8]* @global_var_15174.222 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15178.224 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10014 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([7 x i8]* @global_var_15178.224 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15180.226 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10024 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([4 x i8]* @global_var_15180.226 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15184.228 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10034 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([9 x i8]* @global_var_15184.228 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15210.194 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_10044 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([9 x i8]* @global_var_15210.194 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1521c.196 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10054 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint (i32* @global_var_1521c.196 to i32), i32 16)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15190.230 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_10064 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([6 x i8]* @global_var_15190.230 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15198.232 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10074 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([7 x i8]* @global_var_15198.232 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_151a0.234 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v5_10084 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([11 x i8]* @global_var_151a0.234 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_151ac.236 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_10094 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint ([7 x i8]* @global_var_151ac.236 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151b4.238 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_100a4 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), i32 ptrtoint (i32* @global_var_151b4.238 to i32), i32 16)
  store i32 ptrtoint ([8 x i8]* @global_var_1516c.220 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150f0.198 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_100b4 = call i32 @function_fb28(i32 ptrtoint ([8 x i8]* @global_var_1516c.220 to i32), i32 ptrtoint (i32* @global_var_150f0.198 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_151c4.240 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_151c4.240 to i32), i32* %r1.global-to-local, align 4
  %v5_100c4 = call i32 @function_fb28(i32 ptrtoint ([5 x i8]* @global_var_151c4.240 to i32), i32 ptrtoint ([5 x i8]* @global_var_151c4.240 to i32), i32 8)
  %v0_100c8 = load i32, i32* @r6, align 4
  store i32 %v0_100c8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_151cc.242 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150f0.198 to i32), i32* %r1.global-to-local, align 4
  %v4_100d4 = call i32 @function_fb28(i32 ptrtoint ([7 x i8]* @global_var_151cc.242 to i32), i32 ptrtoint (i32* @global_var_150f0.198 to i32), i32 %v0_100c8)
  store i32 ptrtoint ([4 x i8]* @global_var_151d4.244 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150f0.198 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_100e4 = call i32 @function_fb28(i32 ptrtoint ([4 x i8]* @global_var_151d4.244 to i32), i32 ptrtoint (i32* @global_var_150f0.198 to i32), i32 3)
  store i32 ptrtoint ([8 x i8]* @global_var_151d8.246 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_151d8.246 to i32), i32* %r1.global-to-local, align 4
  %v5_100f4 = call i32 @function_fb28(i32 ptrtoint ([8 x i8]* @global_var_151d8.246 to i32), i32 ptrtoint ([8 x i8]* @global_var_151d8.246 to i32), i32 14)
  store i32 ptrtoint ([11 x i8]* @global_var_151e0.248 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_151ec.250 to i32), i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v5_10104 = call i32 @function_fb28(i32 ptrtoint ([11 x i8]* @global_var_151e0.248 to i32), i32 ptrtoint ([9 x i8]* @global_var_151ec.250 to i32), i32 18)
  %v2_1010c = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_1010c, i32* %r0.global-to-local, align 4
  %v2_10110 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_10110, i32* %r1.global-to-local, align 4
  %tmp285 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_1011c

dec_label_pc_1011c:                               ; preds = %dec_label_pc_10764, %dec_label_pc_fe34
  %v0_1043c = phi i32 [ %v2_1010c, %dec_label_pc_fe34 ], [ %stack_var_-1872.1, %dec_label_pc_10764 ]
  %stack_var_-1868.0 = phi i8 [ %v5_fe1c.le, %dec_label_pc_fe34 ], [ %stack_var_-1868.1, %dec_label_pc_10764 ]
  %stack_var_-1876.0 = phi i8* [ %tmp285, %dec_label_pc_fe34 ], [ %stack_var_-1876.1, %dec_label_pc_10764 ]
  store i32 ptrtoint (i32* @global_var_1dce4.155 to i32), i32* %r2.global-to-local, align 4
  %v2_10120 = load i32, i32* @global_var_1dce4.155, align 4
  store i32 %v2_10120, i32* %r8.global-to-local, align 4
  %v0_10124 = load i32, i32* @fp, align 4
  %v3_10124 = icmp uge i32 %v0_10124, %v2_10120
  store i1 %v3_10124, i1* %cpsr_c.global-to-local, align 1
  %v9_10124 = icmp eq i32 %v0_10124, %v2_10120
  store i1 %v9_10124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10124, label %dec_label_pc_103cc, label %dec_label_pc_1012c

dec_label_pc_1012c:                               ; preds = %dec_label_pc_1011c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_103a0 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_10138

dec_label_pc_10138:                               ; preds = %.thread50.dec_label_pc_10138_crit_edge, %dec_label_pc_1012c
  %v0_10138 = phi i32 [ %v0_10138.pre, %.thread50.dec_label_pc_10138_crit_edge ], [ 0, %dec_label_pc_1012c ]
  store i32 %v0_10138, i32* %stack_var_-92, align 4
  %v0_10148 = call i32 @function_f8c0()
  %v1_10148 = trunc i32 %v0_10148 to i8
  store i32 %v0_10148, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dd2c.82 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1dcb4.171 to i32), i32* %lr.global-to-local, align 4
  %v2_10154 = load i32, i32* @global_var_1dd2c.82, align 4
  store i32 %v2_10154, i32* %r2.global-to-local, align 4
  %v2_10158 = and i32 %v0_10148, 128
  %v3_10158 = icmp ne i32 %v2_10158, 0
  store i1 %v3_10158, i1* %cpsr_c.global-to-local, align 1
  %v4_10158 = sdiv i32 %v0_10148, 256
  store i32 %v4_10158, i32* %r3.global-to-local, align 4
  %v1_1015c = trunc i32 %v4_10158 to i8
  store i8 %v1_1015c, i8* bitcast (i32* @global_var_1dcb9.178 to i8*), align 4
  store i32 %v2_10154, i32* @global_var_1dcc0.251, align 4
  store i8 %v1_10148, i8* bitcast (i32* @global_var_1dcb8.182 to i8*), align 4
  br label %dec_label_pc_10168

dec_label_pc_10168:                               ; preds = %dec_label_pc_1023c, %dec_label_pc_10198, %dec_label_pc_10270, %dec_label_pc_10264, %dec_label_pc_10258, %dec_label_pc_1024c, %.thread35, %bb304, %bb303, %bb302, %bb301, %bb300, %dec_label_pc_10234, %dec_label_pc_1022c, %bb296, %dec_label_pc_101fc, %dec_label_pc_101d8, %bb289, %dec_label_pc_101a8, %bb288, %dec_label_pc_10190, %bb287, %bb306, %dec_label_pc_10138
  %v0_10168 = call i32 @function_f8c0()
  store i32 %v0_10168, i32* %r0.global-to-local, align 4
  %v1_1016c = urem i32 %v0_10168, 256
  store i32 %v1_1016c, i32* %r1.global-to-local, align 4
  %v3_10170 = udiv i32 %v0_10168, 256
  store i32 %v3_10170, i32* %r3.global-to-local, align 4
  %v3_10174 = udiv i32 %v0_10168, 65536
  store i32 %v3_10174, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10178 = icmp eq i32 %v1_1016c, 0
  store i1 %v2_10178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10178, label %bb287, label %bb286

bb286:                                            ; preds = %dec_label_pc_10168
  %v3_1017c = icmp ugt i32 %v1_1016c, 126
  store i1 %v3_1017c, i1* %cpsr_c.global-to-local, align 1
  %v8_1017c = icmp eq i32 %v1_1016c, 127
  store i1 %v8_1017c, i1* %cpsr_z.global-to-local, align 1
  br label %bb287

bb287:                                            ; preds = %dec_label_pc_10168, %bb286
  %v0_1018c = phi i1 [ true, %dec_label_pc_10168 ], [ %v8_1017c, %bb286 ]
  %v1_10180 = urem i32 %v3_10170, 256
  store i32 %v1_10180, i32* %ip.global-to-local, align 4
  %v1_10184 = urem i32 %v3_10174, 256
  store i32 %v1_10184, i32* %r2.global-to-local, align 4
  %v1_10188 = and i32 %v0_10168, 8388608
  %v2_10188 = icmp ne i32 %v1_10188, 0
  store i1 %v2_10188, i1* %cpsr_c.global-to-local, align 1
  %v3_10188 = udiv i32 %v0_10168, 16777216
  store i32 %v3_10188, i32* %r0.global-to-local, align 4
  br i1 %v0_1018c, label %dec_label_pc_10168, label %dec_label_pc_10190

dec_label_pc_10190:                               ; preds = %bb287
  %v2_10190 = icmp ugt i32 %v1_1016c, 2
  store i1 %v2_10190, i1* %cpsr_c.global-to-local, align 1
  %v7_10190 = icmp eq i32 %v1_1016c, 3
  store i1 %v7_10190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10190, label %dec_label_pc_10168, label %dec_label_pc_10198

dec_label_pc_10198:                               ; preds = %dec_label_pc_10190
  %v1_10198 = add nsw i32 %v1_1016c, -15
  store i32 %v1_10198, i32* %r3.global-to-local, align 4
  %v2_1019c = icmp ugt i32 %v1_1016c, 55
  store i1 %v2_1019c, i1* %cpsr_c.global-to-local, align 1
  %v7_1019c = icmp eq i32 %v1_1016c, 56
  store i1 %v7_1019c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1019c, label %dec_label_pc_10168, label %bb288

bb288:                                            ; preds = %dec_label_pc_10198
  %v3_101a0 = icmp ne i32 %v1_10198, 0
  store i1 %v3_101a0, i1* %cpsr_c.global-to-local, align 1
  %v8_101a0 = icmp eq i32 %v1_10198, 1
  store i1 %v8_101a0, i1* %cpsr_z.global-to-local, align 1
  %v2_101a4 = xor i1 %v3_101a0, true
  %v3_101a4 = or i1 %v8_101a0, %v2_101a4
  br i1 %v3_101a4, label %dec_label_pc_10168, label %dec_label_pc_101a8

dec_label_pc_101a8:                               ; preds = %bb288
  %v2_101a8 = icmp ugt i32 %v1_1016c, 9
  store i1 %v2_101a8, i1* %cpsr_c.global-to-local, align 1
  %v7_101a8 = icmp eq i32 %v1_1016c, 10
  store i1 %v7_101a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101a8, label %dec_label_pc_10168, label %dec_label_pc_101b0

dec_label_pc_101b0:                               ; preds = %dec_label_pc_101a8
  %v2_101b0 = icmp ugt i32 %v1_1016c, 191
  store i1 %v2_101b0, i1* %cpsr_c.global-to-local, align 1
  %v7_101b0 = icmp eq i32 %v1_1016c, 192
  store i1 %v7_101b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101b0, label %bb289, label %dec_label_pc_101bc

bb289:                                            ; preds = %dec_label_pc_101b0
  %v3_101b4 = icmp ugt i32 %v1_10180, 167
  store i1 %v3_101b4, i1* %cpsr_c.global-to-local, align 1
  %v8_101b4 = icmp eq i32 %v1_10180, 168
  store i1 %v8_101b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_101b4, label %dec_label_pc_10168, label %dec_label_pc_101bc

dec_label_pc_101bc:                               ; preds = %dec_label_pc_101b0, %bb289
  %v7_101bc = icmp eq i32 %v1_1016c, 172
  %.356 = zext i1 %v7_101bc to i32
  store i32 %.356, i32* %r3.global-to-local, align 4
  %v2_101c8 = icmp ugt i32 %v1_10180, 14
  store i1 %v2_101c8, i1* %cpsr_c.global-to-local, align 1
  %v7_101c8 = icmp eq i32 %v1_10180, 15
  store i1 %v7_101c8, i1* %cpsr_z.global-to-local, align 1
  %v2_101cc = xor i1 %v2_101c8, true
  %v3_101cc = or i1 %v7_101c8, %v2_101cc
  br i1 %v3_101cc, label %.thread13, label %bb292

.thread13:                                        ; preds = %dec_label_pc_101bc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_101e0

bb292:                                            ; preds = %dec_label_pc_101bc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101d0 = icmp eq i1 %v7_101bc, false
  store i1 %v2_101d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101d0, label %dec_label_pc_101e0, label %dec_label_pc_101d8

dec_label_pc_101d8:                               ; preds = %bb292
  %v2_101d8 = icmp ugt i32 %v1_10180, 30
  store i1 %v2_101d8, i1* %cpsr_c.global-to-local, align 1
  %v7_101d8 = icmp eq i32 %v1_10180, 31
  store i1 %v7_101d8, i1* %cpsr_z.global-to-local, align 1
  %v2_101dc = xor i1 %v2_101d8, true
  %v3_101dc = or i1 %v7_101d8, %v2_101dc
  br i1 %v3_101dc, label %dec_label_pc_10168, label %dec_label_pc_101e0

dec_label_pc_101e0:                               ; preds = %.thread13, %dec_label_pc_101d8, %bb292
  %v7_101e0 = icmp eq i32 %v1_1016c, 100
  %.357 = zext i1 %v7_101e0 to i32
  store i32 %.357, i32* %r3.global-to-local, align 4
  %v2_101ec = icmp ugt i32 %v1_10180, 62
  store i1 %v2_101ec, i1* %cpsr_c.global-to-local, align 1
  %v7_101ec = icmp eq i32 %v1_10180, 63
  store i1 %v7_101ec, i1* %cpsr_z.global-to-local, align 1
  %v2_101f0 = xor i1 %v2_101ec, true
  %v3_101f0 = or i1 %v7_101ec, %v2_101f0
  br i1 %v3_101f0, label %.thread18, label %bb295

.thread18:                                        ; preds = %dec_label_pc_101e0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10204

bb295:                                            ; preds = %dec_label_pc_101e0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101f4 = icmp eq i1 %v7_101e0, false
  store i1 %v2_101f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101f4, label %dec_label_pc_10204, label %dec_label_pc_101fc

dec_label_pc_101fc:                               ; preds = %bb295
  %v2_101fc = icmp ugt i32 %v1_10180, 125
  store i1 %v2_101fc, i1* %cpsr_c.global-to-local, align 1
  %v7_101fc = icmp eq i32 %v1_10180, 126
  store i1 %v7_101fc, i1* %cpsr_z.global-to-local, align 1
  %v2_10200 = xor i1 %v2_101fc, true
  %v3_10200 = or i1 %v7_101fc, %v2_10200
  br i1 %v3_10200, label %dec_label_pc_10168, label %dec_label_pc_10204

dec_label_pc_10204:                               ; preds = %.thread18, %dec_label_pc_101fc, %bb295
  %v2_10204 = icmp ugt i32 %v1_1016c, 168
  store i1 %v2_10204, i1* %cpsr_c.global-to-local, align 1
  %v7_10204 = icmp eq i32 %v1_1016c, 169
  store i1 %v7_10204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10204, label %bb296, label %dec_label_pc_10210

bb296:                                            ; preds = %dec_label_pc_10204
  %v3_10208 = icmp eq i32 %v1_10180, 255
  store i1 %v3_10208, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10208, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10208, label %dec_label_pc_10168, label %dec_label_pc_10210

dec_label_pc_10210:                               ; preds = %dec_label_pc_10204, %bb296
  %v7_10210 = icmp eq i32 %v1_1016c, 198
  %.358 = zext i1 %v7_10210 to i32
  store i32 %.358, i32* %r3.global-to-local, align 4
  %v2_1021c = icmp ugt i32 %v1_10180, 16
  store i1 %v2_1021c, i1* %cpsr_c.global-to-local, align 1
  %v7_1021c = icmp eq i32 %v1_10180, 17
  store i1 %v7_1021c, i1* %cpsr_z.global-to-local, align 1
  %v2_10220 = xor i1 %v2_1021c, true
  %v3_10220 = or i1 %v7_1021c, %v2_10220
  br i1 %v3_10220, label %.thread24, label %bb299

.thread24:                                        ; preds = %dec_label_pc_10210
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10234

bb299:                                            ; preds = %dec_label_pc_10210
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10224 = icmp eq i1 %v7_10210, false
  store i1 %v2_10224, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10224, label %dec_label_pc_10234, label %dec_label_pc_1022c

dec_label_pc_1022c:                               ; preds = %bb299
  %v2_1022c = icmp ugt i32 %v1_10180, 18
  store i1 %v2_1022c, i1* %cpsr_c.global-to-local, align 1
  %v7_1022c = icmp eq i32 %v1_10180, 19
  store i1 %v7_1022c, i1* %cpsr_z.global-to-local, align 1
  %v2_10230 = xor i1 %v2_1022c, true
  %v3_10230 = or i1 %v7_1022c, %v2_10230
  br i1 %v3_10230, label %dec_label_pc_10168, label %dec_label_pc_10234

dec_label_pc_10234:                               ; preds = %.thread24, %dec_label_pc_1022c, %bb299
  %v2_10234 = icmp ugt i32 %v1_1016c, 222
  store i1 %v2_10234, i1* %cpsr_c.global-to-local, align 1
  %v7_10234 = icmp eq i32 %v1_1016c, 223
  store i1 %v7_10234, i1* %cpsr_z.global-to-local, align 1
  %v2_10238 = xor i1 %v7_10234, true
  %v3_10238 = and i1 %v2_10234, %v2_10238
  br i1 %v3_10238, label %dec_label_pc_10168, label %dec_label_pc_1023c

dec_label_pc_1023c:                               ; preds = %dec_label_pc_10234
  %v1_1023c = add nsw i32 %v1_1016c, -6
  store i32 %v1_1023c, i32* %r3.global-to-local, align 4
  %v2_10240 = icmp ugt i32 %v1_1016c, 10
  store i1 %v2_10240, i1* %cpsr_c.global-to-local, align 1
  %v7_10240 = icmp eq i32 %v1_1016c, 11
  store i1 %v7_10240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10240, label %dec_label_pc_10168, label %bb300

bb300:                                            ; preds = %dec_label_pc_1023c
  %v3_10244 = icmp ne i32 %v1_1023c, 0
  store i1 %v3_10244, i1* %cpsr_c.global-to-local, align 1
  %v8_10244 = icmp eq i32 %v1_1023c, 1
  store i1 %v8_10244, i1* %cpsr_z.global-to-local, align 1
  %v2_10248 = xor i1 %v3_10244, true
  %v3_10248 = or i1 %v8_10244, %v2_10248
  br i1 %v3_10248, label %dec_label_pc_10168, label %dec_label_pc_1024c

dec_label_pc_1024c:                               ; preds = %bb300
  %v2_1024c = icmp ugt i32 %v1_1016c, 21
  store i1 %v2_1024c, i1* %cpsr_c.global-to-local, align 1
  %v7_1024c = icmp eq i32 %v1_1016c, 22
  store i1 %v7_1024c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1024c, label %dec_label_pc_10168, label %bb301

bb301:                                            ; preds = %dec_label_pc_1024c
  %v3_10250 = icmp ugt i32 %v1_1016c, 20
  store i1 %v3_10250, i1* %cpsr_c.global-to-local, align 1
  %v8_10250 = icmp eq i32 %v1_1016c, 21
  store i1 %v8_10250, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10250, label %dec_label_pc_10168, label %dec_label_pc_10258

dec_label_pc_10258:                               ; preds = %bb301
  %v2_10258 = icmp ugt i32 %v1_1016c, 27
  store i1 %v2_10258, i1* %cpsr_c.global-to-local, align 1
  %v7_10258 = icmp eq i32 %v1_1016c, 28
  store i1 %v7_10258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10258, label %dec_label_pc_10168, label %bb302

bb302:                                            ; preds = %dec_label_pc_10258
  %v3_1025c = icmp ugt i32 %v1_1016c, 25
  store i1 %v3_1025c, i1* %cpsr_c.global-to-local, align 1
  %v8_1025c = icmp eq i32 %v1_1016c, 26
  store i1 %v8_1025c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1025c, label %dec_label_pc_10168, label %dec_label_pc_10264

dec_label_pc_10264:                               ; preds = %bb302
  %v2_10264 = icmp ugt i32 %v1_1016c, 29
  store i1 %v2_10264, i1* %cpsr_c.global-to-local, align 1
  %v7_10264 = icmp eq i32 %v1_1016c, 30
  store i1 %v7_10264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10264, label %dec_label_pc_10168, label %bb303

bb303:                                            ; preds = %dec_label_pc_10264
  %v3_10268 = icmp ugt i32 %v1_1016c, 28
  store i1 %v3_10268, i1* %cpsr_c.global-to-local, align 1
  %v8_10268 = icmp eq i32 %v1_1016c, 29
  store i1 %v8_10268, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10268, label %dec_label_pc_10168, label %dec_label_pc_10270

dec_label_pc_10270:                               ; preds = %bb303
  %v2_10270 = icmp ugt i32 %v1_1016c, 54
  store i1 %v2_10270, i1* %cpsr_c.global-to-local, align 1
  %v7_10270 = icmp eq i32 %v1_1016c, 55
  store i1 %v7_10270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10270, label %dec_label_pc_10168, label %bb304

bb304:                                            ; preds = %dec_label_pc_10270
  %v3_10274 = icmp ugt i32 %v1_1016c, 32
  store i1 %v3_10274, i1* %cpsr_c.global-to-local, align 1
  %v8_10274 = icmp eq i32 %v1_1016c, 33
  store i1 %v8_10274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10274, label %dec_label_pc_10168, label %dec_label_pc_1027c

dec_label_pc_1027c:                               ; preds = %bb304
  %v2_1027c = icmp ugt i32 %v1_1016c, 214
  store i1 %v2_1027c, i1* %cpsr_c.global-to-local, align 1
  %v7_1027c = icmp eq i32 %v1_1016c, 215
  store i1 %v7_1027c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1027c, label %.thread35, label %bb305

bb305:                                            ; preds = %dec_label_pc_1027c
  %v3_10280 = icmp ugt i32 %v1_1016c, 213
  store i1 %v3_10280, i1* %cpsr_c.global-to-local, align 1
  %v8_10280 = icmp eq i32 %v1_1016c, 214
  store i1 %v8_10280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10280, label %bb306, label %dec_label_pc_10290

.thread35:                                        ; preds = %dec_label_pc_1027c
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10168

bb306:                                            ; preds = %bb305
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10168

dec_label_pc_10290:                               ; preds = %bb305
  store i32 0, i32* @r4, align 4
  %v5_1029c = call i32 @llvm.bswap.i32(i32 %v0_10168)
  store i32 %v5_1029c, i32* %r3.global-to-local, align 4
  %tmp307 = and i32 %v0_10168, 65280
  %tmp308 = call i32 @llvm.bswap.i32(i32 %tmp307)
  %tmp309 = and i32 %v0_10168, 16711680
  %tmp310 = call i32 @llvm.bswap.i32(i32 %tmp309)
  %v3_102a8 = mul nuw i32 %v3_10188, 16777216
  %v3_102ac = udiv i32 %tmp308, 256
  %v4_102b0 = mul nuw nsw i32 %tmp310, 256
  %tmp311 = and i32 %v0_10168, 32768
  %v3_102b4 = icmp ne i32 %tmp311, 0
  store i1 %v3_102b4, i1* %cpsr_c.global-to-local, align 1
  %v4_102b4 = udiv i32 %v5_1029c, 16777216
  store i32 ptrtoint (i8** @global_var_1dcb4.171 to i32), i32* @r0, align 4
  %v5_102b4 = or i32 %v4_102b4, %v3_102a8
  %v5_102b0 = or i32 %v5_102b4, %v4_102b0
  %v2_102bc = or i32 %v5_102b0, %v3_102ac
  store i32 %v2_102bc, i32* %r2.global-to-local, align 4
  %v5_102c0 = trunc i32 %v4_102b4 to i8
  store i8 %v5_102c0, i8* @global_var_1dcc4.252, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1dcbe.253 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1dcbf.254 to i8*), align 4
  %v3_102d0 = call i32 @function_e498(i32 ptrtoint (i8** @global_var_1dcb4.171 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1dcb4.171 to i32), i32* %ip.global-to-local, align 4
  %sext9 = mul i32 %v3_102d0, 16777216
  %v1_102d8 = sdiv i32 %sext9, 16777216
  store i32 %v1_102d8, i32* %r3.global-to-local, align 4
  %v2_102dc = and i32 %v1_102d8, 128
  %v3_102dc = icmp ne i32 %v2_102dc, 0
  store i1 %v3_102dc, i1* %cpsr_c.global-to-local, align 1
  %v4_102dc = ashr i32 %sext9, 31
  store i32 %v4_102dc, i32* %r2.global-to-local, align 4
  %v1_102e0 = trunc i32 %v1_102d8 to i8
  store i8 %v1_102e0, i8* bitcast (i32* @global_var_1dcbe.253 to i8*), align 4
  %v1_102e4 = trunc i32 %v4_102dc to i8
  store i8 %v1_102e4, i8* bitcast (i32* @global_var_1dcbf.254 to i8*), align 4
  %v3_102e8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_102e8, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_102f0 = call i32 @function_1282c(i32 %v3_102e8, i32 10, i32 %v4_102dc, i32 %v1_102d8)
  store i32 %v4_102f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_102f4 = icmp eq i32 %v4_102f0, 0
  store i1 %v2_102f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102f4, label %.thread217, label %bb312

.thread217:                                       ; preds = %dec_label_pc_10290
  store i32 ptrtoint (i32* @global_var_1dcc8.175 to i32), i32* @lr, align 4
  br label %.thread45.thread88

bb312:                                            ; preds = %dec_label_pc_10290
  store i32 ptrtoint (i32* @global_var_1dcc8.175 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_10304 = load i32, i32* @r4, align 4
  %v2_10304 = trunc i32 %v1_10304 to i8
  store i8 %v2_10304, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1dcc8.175 to i32), i32 2) to i8*), align 2
  %v0_10308.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10308.pr.pre, label %.thread45.thread88, label %.thread42

.thread42:                                        ; preds = %bb312
  %v1_10308 = load i32, i32* %r3.global-to-local, align 4
  %v2_10308 = trunc i32 %v1_10308 to i8
  %v3_10308 = load i32, i32* %r0.global-to-local, align 4
  %v4_10308 = add i32 %v3_10308, 3
  %v5_10308 = inttoptr i32 %v4_10308 to i8*
  store i8 %v2_10308, i8* %v5_10308, align 1
  %v0_10310.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1dcb4.171 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_10310.pr.pr, label %.thread48, label %.thread50

.thread45.thread88:                               ; preds = %bb312, %.thread217
  store i32 ptrtoint (i8** @global_var_1dcb4.171 to i32), i32* %r0.global-to-local, align 4
  br label %.thread48

.thread48:                                        ; preds = %.thread42, %.thread45.thread88
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_10318 = load i32, i32* @lr, align 4
  %v4_10318 = add i32 %v3_10318, 2
  %v5_10318 = inttoptr i32 %v4_10318 to i8*
  store i8 9, i8* %v5_10318, align 1
  %v0_1031c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1031c.pr.pr, label %bb313, label %.thread50

bb313:                                            ; preds = %.thread48
  %v1_1031c = load i32, i32* %r2.global-to-local, align 4
  %v2_1031c = trunc i32 %v1_1031c to i8
  %v3_1031c = load i32, i32* @lr, align 4
  %v4_1031c = add i32 %v3_1031c, 3
  %v5_1031c = inttoptr i32 %v4_1031c to i8*
  store i8 %v2_1031c, i8* %v5_1031c, align 1
  br label %.thread50

.thread50:                                        ; preds = %.thread42, %.thread48, %bb313
  %v4_10320 = load i8, i8* @global_var_1dcc4.252, align 1
  %v5_10320 = sext i8 %v4_10320 to i32
  store i32 %v5_10320, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dcc8.175 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dcc8.175 to i32), i32* @r1, align 4
  store i8 %v4_10320, i8* @global_var_1dccc.255, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_10338 = load i32, i32* %sl.global-to-local, align 4
  %v1_10338 = trunc i32 %v0_10338 to i8
  store i8 %v1_10338, i8* bitcast (i32* @global_var_1dcd8.256 to i8*), align 4
  store i8 %v1_10338, i8* bitcast (i32* @global_var_1dcd9.257 to i8*), align 4
  %v5_10340 = call i32 @function_e4f4(i32 ptrtoint (i8** @global_var_1dcb4.171 to i32), i32 ptrtoint (i32* @global_var_1dcc8.175 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_10340, 16777216
  %v1_10348 = sdiv i32 %sext, 16777216
  %v3_10350 = ashr i32 %sext, 31
  %v2_10354 = load i32, i32* @global_var_1dcc8.175, align 4
  %v1_1035c = trunc i32 %v3_10350 to i8
  store i8 %v1_1035c, i8* bitcast (i32* @global_var_1dcd9.257 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_10370 = load i8, i8* @global_var_1dcc4.252, align 1
  %v4_10370 = sext i8 %v3_10370 to i32
  store i32 %v4_10370, i32* @r4, align 4
  %v2_10374 = load i32, i32* @global_var_1dd48.169, align 4
  store i32 %v2_10374, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dcc8.175 to i32), i32* %ip.global-to-local, align 4
  %v1_10384 = and i32 %v2_10354, 8388608
  %v2_10384 = icmp ne i32 %v1_10384, 0
  store i1 %v2_10384, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1dcb4.171 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_10398 = trunc i32 %v1_10348 to i8
  store i8 %v1_10398, i8* bitcast (i32* @global_var_1dcd8.256 to i8*), align 4
  store i32 %v2_103a0, i32* %lr.global-to-local, align 4
  %v8_103b0 = call i32 @function_13258(i32 %v2_10374, i32* bitcast (i8** @global_var_1dcb4.171 to i32*), i32 40, i32 16384, i32 %v2_103a0, i32 16)
  store i32 %v8_103b0, i32* %r0.global-to-local, align 4
  %v3_103b4 = load i32, i32* %stack_var_-48, align 4
  %v1_103b8 = add i32 %v3_103b4, 1
  store i32 %v1_103b8, i32* %r3.global-to-local, align 4
  %v3_103bc = icmp ugt i32 %v1_103b8, 383
  store i1 %v3_103bc, i1* %cpsr_c.global-to-local, align 1
  %v8_103bc = icmp eq i32 %v1_103b8, 384
  store i1 %v8_103bc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_103b8, i32* %stack_var_-48, align 4
  %v5_103c4 = icmp slt i32 %v1_103b8, 384
  br i1 %v5_103c4, label %.thread50.dec_label_pc_10138_crit_edge, label %dec_label_pc_103c8

.thread50.dec_label_pc_10138_crit_edge:           ; preds = %.thread50
  %v0_10138.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10138

dec_label_pc_103c8:                               ; preds = %.thread50
  %v0_103c8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_103c8, i32* @fp, align 4
  br label %dec_label_pc_103cc

dec_label_pc_103cc:                               ; preds = %dec_label_pc_1011c, %dec_label_pc_103c8
  %v0_103cc = call i32 @function_12f80()
  store i32 %v0_103cc, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v0_103cc, i32* @sb, align 4
  %v6_10404 = inttoptr i32 %v0_1043c to i32*
  %v1_1042c = add i32 %v0_1043c, 16
  %v2_1042c = inttoptr i32 %v1_1042c to i32*
  %v4_10448 = ptrtoint i8* %stack_var_-1876.0 to i32
  %v1_10450 = add i32 %v4_10448, 1
  %v2_10450 = inttoptr i32 %v1_10450 to i8*
  %v1_10474 = add i32 %v4_10448, 2
  %v2_10474 = inttoptr i32 %v1_10474 to i8*
  %v1_10478 = add i32 %v4_10448, 3
  %v2_10478 = inttoptr i32 %v1_10478 to i8*
  %v4_1047c = sext i8 %stack_var_-1868.0 to i32
  %v1_10490 = add i32 %v4_10448, 13
  %v2_10490 = inttoptr i32 %v1_10490 to i8*
  %v1_1055c = bitcast i8* %stack_var_-1876.0 to i32*
  %v1_1043c = add i32 %v0_1043c, 9
  %v2_1043c = inttoptr i32 %v1_1043c to i8*
  %v1_104b4 = add i32 %v4_10448, 8
  %v2_104b4 = inttoptr i32 %v1_104b4 to i32*
  %v1_104f4 = add i32 %v0_1043c, 12
  %v2_104f4 = inttoptr i32 %v1_104f4 to i32*
  br label %dec_label_pc_103d8

dec_label_pc_103d8:                               ; preds = %dec_label_pc_104b4, %dec_label_pc_104ac, %dec_label_pc_104a4, %dec_label_pc_10470, %dec_label_pc_10460, %dec_label_pc_1043c, %dec_label_pc_10424, %dec_label_pc_1049c, %dec_label_pc_1048c, %dec_label_pc_1041c, %dec_label_pc_10554, %dec_label_pc_103cc
  %v1_103dc = phi i32 [ %v0_103cc, %dec_label_pc_103cc ], [ %v1_103dc.pre.pre, %dec_label_pc_10554 ], [ %v0_10410, %dec_label_pc_1041c ], [ %v0_10410, %dec_label_pc_1048c ], [ %v0_10410, %dec_label_pc_1049c ], [ %v0_10410, %dec_label_pc_10424 ], [ %v0_10410, %dec_label_pc_1043c ], [ %v0_10410, %dec_label_pc_10460 ], [ %v0_10410, %dec_label_pc_10470 ], [ %v0_10410, %dec_label_pc_104a4 ], [ %v0_10410, %dec_label_pc_104ac ], [ %v0_10410, %dec_label_pc_104b4 ]
  %v2_103dc = inttoptr i32 %v1_103dc to i32*
  store i32 0, i32* %v2_103dc, align 4
  %v2_103e8 = load i32, i32* @global_var_1dd48.169, align 4
  store i32 %v2_103e8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_1043c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_10404 = call i32 @function_131f8(i32 %v2_103e8, i32* %v6_10404, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_10404, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10408 = icmp eq i32 %v7_10404, 0
  store i1 %v2_10408, i1* %cpsr_z.global-to-local, align 1
  %tmp314 = icmp slt i32 %v7_10404, 1
  br i1 %tmp314, label %dec_label_pc_10588, label %dec_label_pc_10410

dec_label_pc_10410:                               ; preds = %dec_label_pc_103d8
  %v0_10410 = load i32, i32* @sb, align 4
  %v1_10410 = inttoptr i32 %v0_10410 to i32*
  %v2_10410 = load i32, i32* %v1_10410, align 4
  store i32 %v2_10410, i32* %r3.global-to-local, align 4
  %v2_10414 = icmp ugt i32 %v2_10410, 10
  store i1 %v2_10414, i1* %cpsr_c.global-to-local, align 1
  %v7_10414 = icmp eq i32 %v2_10410, 11
  store i1 %v7_10414, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10414, label %dec_label_pc_10588, label %dec_label_pc_1041c

dec_label_pc_1041c:                               ; preds = %dec_label_pc_10410
  %v2_1041c = icmp ugt i32 %v7_10404, 38
  store i1 %v2_1041c, i1* %cpsr_c.global-to-local, align 1
  %v7_1041c = icmp eq i32 %v7_10404, 39
  store i1 %v7_1041c, i1* %cpsr_z.global-to-local, align 1
  %v2_10420 = xor i1 %v2_1041c, true
  %v3_10420 = or i1 %v7_1041c, %v2_10420
  br i1 %v3_10420, label %dec_label_pc_103d8, label %dec_label_pc_10424

dec_label_pc_10424:                               ; preds = %dec_label_pc_1041c
  store i32 %v0_1043c, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dd2c.82 to i32), i32* %r0.global-to-local, align 4
  %v3_1042c = load i32, i32* %v2_1042c, align 4
  store i32 %v3_1042c, i32* %r2.global-to-local, align 4
  %v2_10430 = load i32, i32* @global_var_1dd2c.82, align 4
  store i32 %v2_10430, i32* %r3.global-to-local, align 4
  %v3_10434 = icmp uge i32 %v3_1042c, %v2_10430
  store i1 %v3_10434, i1* %cpsr_c.global-to-local, align 1
  %v9_10434 = icmp eq i32 %v3_1042c, %v2_10430
  store i1 %v9_10434, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10434, label %dec_label_pc_1043c, label %dec_label_pc_103d8

dec_label_pc_1043c:                               ; preds = %dec_label_pc_10424
  %v3_1043c = load i8, i8* %v2_1043c, align 1
  %v4_1043c = zext i8 %v3_1043c to i32
  store i32 %v4_1043c, i32* %r3.global-to-local, align 4
  %v2_10440 = icmp ugt i8 %v3_1043c, 5
  store i1 %v2_10440, i1* %cpsr_c.global-to-local, align 1
  %v7_10440 = icmp eq i8 %v3_1043c, 6
  store i1 %v7_10440, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10440, label %dec_label_pc_10448, label %dec_label_pc_103d8

dec_label_pc_10448:                               ; preds = %dec_label_pc_1043c
  store i32 %v4_10448, i32* %r1.global-to-local, align 4
  %v2_1044c = load i8, i8* %stack_var_-1876.0, align 1
  %v3_1044c = zext i8 %v2_1044c to i32
  store i32 %v3_1044c, i32* %r2.global-to-local, align 4
  %v3_10450 = load i8, i8* %v2_10450, align 1
  %v4_10450 = zext i8 %v3_10450 to i32
  store i32 %v4_10450, i32* %r3.global-to-local, align 4
  %v4_10454 = mul nuw nsw i32 %v4_10450, 256
  %v5_10454 = or i32 %v4_10454, %v3_1044c
  store i32 %v5_10454, i32* %r2.global-to-local, align 4
  %v2_10458 = icmp ugt i32 %v5_10454, 5887
  store i1 %v2_10458, i1* %cpsr_c.global-to-local, align 1
  %v7_10458 = icmp eq i32 %v5_10454, 5888
  store i1 %v7_10458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10458, label %dec_label_pc_10470, label %dec_label_pc_10460

dec_label_pc_10460:                               ; preds = %dec_label_pc_10448
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_10468 = icmp ugt i32 %v5_10454, 4872
  store i1 %v3_10468, i1* %cpsr_c.global-to-local, align 1
  %v9_10468 = icmp eq i32 %v5_10454, 4873
  store i1 %v9_10468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10468, label %dec_label_pc_10470, label %dec_label_pc_103d8

dec_label_pc_10470:                               ; preds = %dec_label_pc_10460, %dec_label_pc_10448
  store i32 %v4_10448, i32* %r2.global-to-local, align 4
  %v3_10474 = load i8, i8* %v2_10474, align 1
  %v4_10474 = zext i8 %v3_10474 to i32
  store i32 %v4_10474, i32* %r3.global-to-local, align 4
  %v3_10478 = load i8, i8* %v2_10478, align 1
  %v4_10478 = zext i8 %v3_10478 to i32
  store i32 %v4_10478, i32* %r2.global-to-local, align 4
  store i32 %v4_1047c, i32* %ip.global-to-local, align 4
  %v4_10480 = mul nuw nsw i32 %v4_10478, 256
  %v5_10480 = or i32 %v4_10480, %v4_10474
  store i32 %v5_10480, i32* %r3.global-to-local, align 4
  %v3_10484 = icmp uge i32 %v5_10480, %v4_1047c
  store i1 %v3_10484, i1* %cpsr_c.global-to-local, align 1
  %v9_10484 = icmp eq i32 %v5_10480, %v4_1047c
  store i1 %v9_10484, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10484, label %dec_label_pc_1048c, label %dec_label_pc_103d8

dec_label_pc_1048c:                               ; preds = %dec_label_pc_10470
  store i32 %v4_10448, i32* %lr.global-to-local, align 4
  %v3_10490 = load i8, i8* %v2_10490, align 1
  %v4_10490 = zext i8 %v3_10490 to i32
  store i32 %v4_10490, i32* %r3.global-to-local, align 4
  %v1_10494 = and i32 %v4_10490, 2
  %v2_10494 = icmp eq i32 %v1_10494, 0
  store i1 %v2_10494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10494, label %dec_label_pc_103d8, label %dec_label_pc_1049c

dec_label_pc_1049c:                               ; preds = %dec_label_pc_1048c
  %v1_1049c = and i32 %v4_10490, 16
  %v2_1049c = icmp eq i32 %v1_1049c, 0
  store i1 %v2_1049c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1049c, label %dec_label_pc_103d8, label %dec_label_pc_104a4

dec_label_pc_104a4:                               ; preds = %dec_label_pc_1049c
  %v1_104a4 = and i32 %v4_10490, 4
  %v2_104a4 = icmp eq i32 %v1_104a4, 0
  store i1 %v2_104a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104a4, label %dec_label_pc_104ac, label %dec_label_pc_103d8

dec_label_pc_104ac:                               ; preds = %dec_label_pc_104a4
  %tmp461 = urem i8 %v3_10490, 2
  %v2_104ac = icmp eq i8 %tmp461, 0
  store i1 %v2_104ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104ac, label %dec_label_pc_104b4, label %dec_label_pc_103d8

dec_label_pc_104b4:                               ; preds = %dec_label_pc_104ac
  %v3_104b4 = load i32, i32* %v2_104b4, align 4
  %v2_104d0 = call i32 @llvm.bswap.i32(i32 %v3_104b4)
  %v1_104d4 = add i32 %v2_104d0, -1
  %v1_104d8 = udiv i32 %v1_104d4, 256
  %v3_104dc = and i32 %v1_104d8, 65280
  %v1_104e0 = and i32 %v1_104d4, 65280
  store i32 %v1_104e0, i32* %r2.global-to-local, align 4
  %v3_104e4 = mul i32 %v1_104d4, 16777216
  %v4_104e8 = udiv i32 %v1_104d4, 16777216
  %v5_104e8 = or i32 %v3_104dc, %v4_104e8
  store i32 %v5_104e8, i32* %r1.global-to-local, align 4
  store i32 %v0_1043c, i32* %r3.global-to-local, align 4
  %v4_104f0 = mul nuw nsw i32 %v1_104e0, 256
  %v5_104f0 = or i32 %v4_104f0, %v3_104e4
  store i32 %v5_104f0, i32* %r0.global-to-local, align 4
  %v3_104f4 = load i32, i32* %v2_104f4, align 4
  store i32 %v3_104f4, i32* %r2.global-to-local, align 4
  %v2_104f8 = call i32 @llvm.bswap.i32(i32 %v1_104d4)
  store i32 %v2_104f8, i32* %ip.global-to-local, align 4
  %v3_104fc = icmp uge i32 %v2_104f8, %v3_104f4
  store i1 %v3_104fc, i1* %cpsr_c.global-to-local, align 1
  %v9_104fc = icmp eq i32 %v2_104f8, %v3_104f4
  store i1 %v9_104fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_104fc, label %dec_label_pc_10504, label %dec_label_pc_103d8

dec_label_pc_10504:                               ; preds = %dec_label_pc_104b4
  %v0_10504 = load i32, i32* @r4, align 4
  %v2_10504 = icmp ugt i32 %v0_10504, 254
  store i1 %v2_10504, i1* %cpsr_c.global-to-local, align 1
  %v7_10504 = icmp eq i32 %v0_10504, 255
  store i1 %v7_10504, i1* %cpsr_z.global-to-local, align 1
  %v8_10508 = icmp sgt i32 %v0_10504, 255
  br i1 %v8_10508, label %dec_label_pc_10588, label %dec_label_pc_1050c

dec_label_pc_1050c:                               ; preds = %dec_label_pc_10504
  store i32 ptrtoint (i32* @global_var_1dd44.167 to i32), i32* %lr.global-to-local, align 4
  %v3_10510 = mul i32 %v0_10504, 256
  store i32 %v3_10510, i32* %r2.global-to-local, align 4
  %v2_10514 = load i32, i32* @global_var_1dd44.167, align 4
  store i32 %v2_10514, i32* %r1.global-to-local, align 4
  %v2_1051c = mul i32 %v0_10504, 288
  store i32 %v2_1051c, i32* %r3.global-to-local, align 4
  %v2_10520 = add i32 %v2_10514, %v2_1051c
  store i32 %v2_10520, i32* @r0, align 4
  %v1_10524 = add i32 %v2_10520, 12
  %v2_10524 = inttoptr i32 %v1_10524 to i32*
  %v3_10524 = load i32, i32* %v2_10524, align 4
  store i32 %v3_10524, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10528 = icmp eq i32 %v3_10524, 0
  store i1 %v2_10528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10528, label %dec_label_pc_10554, label %dec_label_pc_10534.preheader

dec_label_pc_10534.preheader:                     ; preds = %dec_label_pc_1050c
  %v2_1052c = add i32 %v2_10520, 288
  store i32 %v2_1052c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10534

dec_label_pc_10534:                               ; preds = %dec_label_pc_10534.preheader, %dec_label_pc_10540
  %v0_10540 = phi i32 [ %v2_1052c, %dec_label_pc_10534.preheader ], [ %v1_1054c, %dec_label_pc_10540 ]
  %v0_10534 = phi i32 [ %v0_10504, %dec_label_pc_10534.preheader ], [ %v1_10534, %dec_label_pc_10540 ]
  %v1_10534 = add i32 %v0_10534, 1
  store i32 %v1_10534, i32* @r4, align 4
  %v7_10538 = icmp eq i32 %v1_10534, 256
  br i1 %v7_10538, label %dec_label_pc_10588.loopexit, label %dec_label_pc_10540

dec_label_pc_10540:                               ; preds = %dec_label_pc_10534
  store i32 %v0_10540, i32* @r0, align 4
  %v1_10544 = add i32 %v0_10540, 12
  %v2_10544 = inttoptr i32 %v1_10544 to i32*
  %v3_10544 = load i32, i32* %v2_10544, align 4
  %v2_10548 = icmp eq i32 %v3_10544, 0
  %v1_1054c = add i32 %v0_10540, 288
  store i32 %v1_1054c, i32* %r3.global-to-local, align 4
  br i1 %v2_10548, label %dec_label_pc_10554.loopexit, label %dec_label_pc_10534

dec_label_pc_10554.loopexit:                      ; preds = %dec_label_pc_10540
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10554

dec_label_pc_10554:                               ; preds = %dec_label_pc_10554.loopexit, %dec_label_pc_1050c
  %v1_10554 = phi i32 [ %v0_10540, %dec_label_pc_10554.loopexit ], [ %v2_10520, %dec_label_pc_1050c ]
  %v2_10554 = add i32 %v1_10554, 16
  %v3_10554 = inttoptr i32 %v2_10554 to i32*
  store i32 %v3_104f4, i32* %v3_10554, align 4
  store i32 %v4_10448, i32* %r1.global-to-local, align 4
  %v2_1055c = load i32, i32* %v1_1055c, align 4
  store i32 %v2_1055c, i32* %r2.global-to-local, align 4
  %v1_10560 = and i32 %v2_1055c, 128
  %v2_10560 = icmp ne i32 %v1_10560, 0
  store i1 %v2_10560, i1* %cpsr_c.global-to-local, align 1
  %v3_10560 = sdiv i32 %v2_1055c, 256
  store i32 %v3_10560, i32* %r3.global-to-local, align 4
  %v1_10564 = trunc i32 %v3_10560 to i8
  %v2_10564 = load i32, i32* @r0, align 4
  %v3_10564 = add i32 %v2_10564, 21
  %v4_10564 = inttoptr i32 %v3_10564 to i8*
  store i8 %v1_10564, i8* %v4_10564, align 1
  %v0_10568 = load i32, i32* %r2.global-to-local, align 4
  %v1_10568 = trunc i32 %v0_10568 to i8
  %v2_10568 = load i32, i32* @r0, align 4
  %v3_10568 = add i32 %v2_10568, 20
  %v4_10568 = inttoptr i32 %v3_10568 to i8*
  store i8 %v1_10568, i8* %v4_10568, align 1
  %v0_1056c = call i32 @function_fa54()
  store i32 %v0_1056c, i32* %r0.global-to-local, align 4
  %v1_103dc.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_103d8

dec_label_pc_10574:                               ; preds = %dec_label_pc_fdc0
  store i32 ptrtoint (i32* @global_var_1dd48.169 to i32), i32* %r2.global-to-local, align 4
  %v2_10578 = load i32, i32* @global_var_1dd48.169, align 4
  store i32 %v2_10578, i32* %r0.global-to-local, align 4
  %v1_1057c = call i32 @function_129d8(i32 %v2_10578)
  store i32 %v1_1057c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10580

dec_label_pc_10580:                               ; preds = %dec_label_pc_fd98, %dec_label_pc_10574
  %v0_10580 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10580, i32* %r0.global-to-local, align 4
  %v1_10584 = call i32 @function_13b98(i32 %v0_10580)
  store i32 %v1_10584, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10588

dec_label_pc_10588.loopexit:                      ; preds = %dec_label_pc_10534
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10588

dec_label_pc_10588:                               ; preds = %dec_label_pc_10504, %dec_label_pc_10410, %dec_label_pc_103d8, %dec_label_pc_10588.loopexit, %dec_label_pc_10580
  %stack_var_-1872.1 = phi i32 [ %tmp249, %dec_label_pc_10580 ], [ %v0_1043c, %dec_label_pc_10588.loopexit ], [ %v0_1043c, %dec_label_pc_103d8 ], [ %v0_1043c, %dec_label_pc_10410 ], [ %v0_1043c, %dec_label_pc_10504 ]
  %stack_var_-1868.1 = phi i8 [ %tmp250, %dec_label_pc_10580 ], [ %stack_var_-1868.0, %dec_label_pc_10588.loopexit ], [ %stack_var_-1868.0, %dec_label_pc_103d8 ], [ %stack_var_-1868.0, %dec_label_pc_10410 ], [ %stack_var_-1868.0, %dec_label_pc_10504 ]
  %stack_var_-1876.1 = phi i8* [ %tmp278, %dec_label_pc_10580 ], [ %stack_var_-1876.0, %dec_label_pc_10588.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_103d8 ], [ %stack_var_-1876.0, %dec_label_pc_10410 ], [ %stack_var_-1876.0, %dec_label_pc_10504 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_1059c414 = load i32, i32* @sp, align 4
  %v3_1059c415 = add i32 %v2_1059c414, 1664
  %v4_1059c416 = inttoptr i32 %v3_1059c415 to i32*
  store i32 0, i32* %v4_1059c416, align 4
  br label %dec_label_pc_10590.dec_label_pc_10590_crit_edge

dec_label_pc_10590.dec_label_pc_10590_crit_edge:  ; preds = %dec_label_pc_10588, %dec_label_pc_10590.dec_label_pc_10590_crit_edge
  %v0_10590.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_1059c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10590 = add i32 %v0_10590.pre, 1664
  store i32 %v1_10590, i32* %ip.global-to-local, align 4
  %v1_10594 = add i32 %v0_10590.pre, 4
  store i32 %v1_10594, i32* %r3.global-to-local, align 4
  %v7_10598 = icmp eq i32 %v1_10594, 128
  %v2_1059c = load i32, i32* @sp, align 4
  %v3_1059c = add i32 %v2_1059c, %v1_10590
  %v4_1059c = inttoptr i32 %v3_1059c to i32*
  store i32 %v0_1059c.pre, i32* %v4_1059c, align 4
  br i1 %v7_10598, label %dec_label_pc_105a4, label %dec_label_pc_10590.dec_label_pc_10590_crit_edge

dec_label_pc_105a4:                               ; preds = %dec_label_pc_10590.dec_label_pc_10590_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_105a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_105a8408 = add i32 %v0_105a4, 1536
  store i32 %v1_105a8408, i32* %lr.global-to-local, align 4
  %v1_105ac409 = add i32 %v0_105a4, 4
  store i32 %v1_105ac409, i32* %r3.global-to-local, align 4
  %v7_105b0410 = icmp eq i32 %v1_105ac409, 128
  %v2_105b4411 = load i32, i32* @sp, align 4
  %v3_105b4412 = add i32 %v2_105b4411, %v1_105a8408
  %v4_105b4413 = inttoptr i32 %v3_105b4412 to i32*
  store i32 %v0_105a4, i32* %v4_105b4413, align 4
  br i1 %v7_105b0410, label %dec_label_pc_105bc, label %dec_label_pc_105a8.dec_label_pc_105a8_crit_edge

dec_label_pc_105a8.dec_label_pc_105a8_crit_edge:  ; preds = %dec_label_pc_105a4, %dec_label_pc_105a8.dec_label_pc_105a8_crit_edge
  %v0_105a8.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_105b4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_105a8 = add i32 %v0_105a8.pre, 1536
  store i32 %v1_105a8, i32* %lr.global-to-local, align 4
  %v1_105ac = add i32 %v0_105a8.pre, 4
  store i32 %v1_105ac, i32* %r3.global-to-local, align 4
  %v7_105b0 = icmp eq i32 %v1_105ac, 128
  %v2_105b4 = load i32, i32* @sp, align 4
  %v3_105b4 = add i32 %v2_105b4, %v1_105a8
  %v4_105b4 = inttoptr i32 %v3_105b4 to i32*
  store i32 %v0_105b4.pre, i32* %v4_105b4, align 4
  br i1 %v7_105b0, label %dec_label_pc_105bc, label %dec_label_pc_105a8.dec_label_pc_105a8_crit_edge

dec_label_pc_105bc:                               ; preds = %dec_label_pc_105a8.dec_label_pc_105a8_crit_edge, %dec_label_pc_105a4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_105bc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_105bc, i32* @r6, align 4
  store i32 %v0_105bc, i32* @r5, align 4
  store i32 %v0_105bc, i32* @r7, align 4
  store i32 %v0_105bc, i32* %stack_var_-48, align 4
  %v2_10680 = ptrtoint i32* %stack_var_-36 to i32
  %v2_106f8 = ptrtoint i32* %stack_var_-76 to i32
  %v2_106fc = ptrtoint i32* %stack_var_-348 to i32
  %v2_10704 = ptrtoint i32* %stack_var_-64 to i32
  %v2_10708 = ptrtoint i32* %stack_var_-220 to i32
  %v2_110cc = ptrtoint i32* %stack_var_-41 to i32
  %v2_110dc = ptrtoint i32* %stack_var_-73 to i32
  %v2_108b0 = ptrtoint i8* %stack_var_-52 to i32
  %v2_108b8 = bitcast i8* %stack_var_-52 to i32*
  %v2_108c4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_113a0 = ptrtoint i32* %stack_var_-92 to i32
  %v3_113a8 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_10638

dec_label_pc_105d0:                               ; preds = %dec_label_pc_10660, %dec_label_pc_10638
  %storemerge232 = phi i32 [ 30, %dec_label_pc_10638 ], [ 5, %dec_label_pc_10660 ]
  store i32 %storemerge232, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dce4.155 to i32), i32* %r2.global-to-local, align 4
  %v2_105d4 = load i32, i32* @global_var_1dce4.155, align 4
  store i32 %v2_105d4, i32* %r3.global-to-local, align 4
  %v1_105d8 = add i32 %v2_1064c, 8
  %v2_105d8 = inttoptr i32 %v1_105d8 to i32*
  %v3_105d8 = load i32, i32* %v2_105d8, align 4
  store i32 %v3_105d8, i32* %r2.global-to-local, align 4
  %v2_105dc = sub i32 %v2_105d4, %v3_105d8
  store i32 %v2_105dc, i32* %r3.global-to-local, align 4
  %v3_105e0 = icmp uge i32 %v2_105dc, %storemerge232
  store i1 %v3_105e0, i1* %cpsr_c.global-to-local, align 1
  %v9_105e0 = icmp eq i32 %v2_105dc, %storemerge232
  store i1 %v9_105e0, i1* %cpsr_z.global-to-local, align 1
  %v2_105e4 = xor i1 %v9_105e0, true
  %v3_105e4 = and i1 %v3_105e0, %v2_105e4
  br i1 %v3_105e4, label %dec_label_pc_106a4, label %dec_label_pc_105e8

dec_label_pc_105e8:                               ; preds = %dec_label_pc_105d0
  store i1 %v2_10654, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_10654, i1* %cpsr_z.global-to-local, align 1
  %v1_10670 = add i32 %v2_1064c, 4
  %v2_10670 = inttoptr i32 %v1_10670 to i32*
  %v3_10670 = load i32, i32* %v2_10670, align 4
  br i1 %v7_10654, label %dec_label_pc_10670, label %dec_label_pc_105f0

dec_label_pc_105f0:                               ; preds = %dec_label_pc_105e8
  store i32 %v3_10670, i32* %ip.global-to-local, align 4
  %v3_105f8 = udiv i32 %v3_10670, 32
  store i32 %v2_10680, i32* %r0.global-to-local, align 4
  %v3_10600 = mul nuw nsw i32 %v3_105f8, 4
  %v2_10604 = add i32 %v3_10600, %v2_10680
  store i32 %v2_10604, i32* %r3.global-to-local, align 4
  %v1_10608 = add i32 %v2_10604, -184
  %v2_10608 = inttoptr i32 %v1_10608 to i32*
  %v3_10608 = load i32, i32* %v2_10608, align 4
  %v1_1060c = urem i32 %v3_10670, 32
  store i32 %v1_1060c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_10614 = shl i32 1, %v1_1060c
  %v8_10614 = or i32 %v3_10608, %v7_10614
  store i32 %v8_10614, i32* %r2.global-to-local, align 4
  store i32 %v8_10614, i32* %v2_10608, align 4
  %v0_1061c = load i32, i32* @r6, align 4
  %v1_1061c = load i32, i32* %ip.global-to-local, align 4
  %v2_1061c = sub i32 %v0_1061c, %v1_1061c
  %v3_1061c = icmp uge i32 %v0_1061c, %v1_1061c
  store i1 %v3_1061c, i1* %cpsr_c.global-to-local, align 1
  %v4_1061c = xor i32 %v1_1061c, %v0_1061c
  %v5_1061c = xor i32 %v2_1061c, %v0_1061c
  %v6_1061c = and i32 %v5_1061c, %v4_1061c
  %v7_1061c = icmp slt i32 %v6_1061c, 0
  %v8_1061c = icmp slt i32 %v2_1061c, 0
  %v9_1061c = icmp eq i32 %v0_1061c, %v1_1061c
  store i1 %v9_1061c, i1* %cpsr_z.global-to-local, align 1
  %v2_10620 = xor i1 %v8_1061c, %v7_1061c
  br i1 %v2_10620, label %bb316, label %bb317

bb316:                                            ; preds = %dec_label_pc_105f0
  store i32 %v1_1061c, i32* @r6, align 4
  br label %bb317

bb317:                                            ; preds = %dec_label_pc_10660, %dec_label_pc_113c4, %dec_label_pc_106d8, %bb319, %dec_label_pc_105f0, %bb316
  %v3_10624 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10624, i32* %r3.global-to-local, align 4
  %v1_10628 = add i32 %v3_10624, 1
  store i32 %v1_10628, i32* %r2.global-to-local, align 4
  %v2_1062c = icmp ugt i32 %v1_10628, 254
  store i1 %v2_1062c, i1* %cpsr_c.global-to-local, align 1
  %v7_1062c = icmp eq i32 %v1_10628, 255
  store i1 %v7_1062c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_10628, i32* %stack_var_-48, align 4
  %v8_10634 = icmp sgt i32 %v1_10628, 255
  br i1 %v8_10634, label %dec_label_pc_106e4, label %dec_label_pc_10638

dec_label_pc_10638:                               ; preds = %bb317, %dec_label_pc_105bc
  %v0_10644 = phi i32 [ %v1_10628, %bb317 ], [ %v0_105bc, %dec_label_pc_105bc ]
  store i32 ptrtoint (i32* @global_var_1dd44.167 to i32), i32* %r0.global-to-local, align 4
  %v3_1063c = mul i32 %v0_10644, 256
  store i32 %v3_1063c, i32* %r3.global-to-local, align 4
  %v2_10640 = load i32, i32* @global_var_1dd44.167, align 4
  store i32 %v2_10640, i32* %r1.global-to-local, align 4
  %v2_10648 = mul i32 %v0_10644, 288
  store i32 %v2_10648, i32* %r2.global-to-local, align 4
  %v2_1064c = add i32 %v2_10640, %v2_10648
  store i32 %v2_1064c, i32* @r4, align 4
  %v1_10650 = add i32 %v2_1064c, 12
  %v2_10650 = inttoptr i32 %v1_10650 to i32*
  %v3_10650 = load i32, i32* %v2_10650, align 4
  store i32 %v3_10650, i32* %ip.global-to-local, align 4
  %v2_10654 = icmp ne i32 %v3_10650, 0
  store i1 %v2_10654, i1* %cpsr_c.global-to-local, align 1
  %v7_10654 = icmp eq i32 %v3_10650, 1
  store i1 %v7_10654, i1* %cpsr_z.global-to-local, align 1
  %v2_10658 = xor i1 %v7_10654, true
  %v3_10658 = and i1 %v2_10654, %v2_10658
  br i1 %v3_10658, label %dec_label_pc_105d0, label %dec_label_pc_10660

dec_label_pc_10660:                               ; preds = %dec_label_pc_10638
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10660 = icmp eq i32 %v3_10650, 0
  store i1 %v2_10660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10660, label %bb317, label %dec_label_pc_105d0

dec_label_pc_10670:                               ; preds = %dec_label_pc_105e8
  store i32 %v3_10670, i32* %r0.global-to-local, align 4
  %v3_10678 = udiv i32 %v3_10670, 32
  %v3_1067c = mul nuw nsw i32 %v3_10678, 4
  store i32 %v2_10680, i32* %lr.global-to-local, align 4
  %v2_10684 = add i32 %v3_1067c, %v2_10680
  store i32 %v2_10684, i32* %r3.global-to-local, align 4
  %v1_10688 = add i32 %v2_10684, -312
  %v2_10688 = inttoptr i32 %v1_10688 to i32*
  %v3_10688 = load i32, i32* %v2_10688, align 4
  %v1_1068c = urem i32 %v3_10670, 32
  store i32 %v1_1068c, i32* %r1.global-to-local, align 4
  %v7_10690 = shl i32 1, %v1_1068c
  %v8_10690 = or i32 %v3_10688, %v7_10690
  store i32 %v8_10690, i32* %r2.global-to-local, align 4
  %v0_10694 = load i32, i32* @r5, align 4
  %v2_10694 = sub i32 %v0_10694, %v3_10670
  %v3_10694 = icmp uge i32 %v0_10694, %v3_10670
  store i1 %v3_10694, i1* %cpsr_c.global-to-local, align 1
  %v4_10694 = xor i32 %v0_10694, %v3_10670
  %v5_10694 = xor i32 %v2_10694, %v0_10694
  %v6_10694 = and i32 %v5_10694, %v4_10694
  %v7_10694 = icmp slt i32 %v6_10694, 0
  %v8_10694 = icmp slt i32 %v2_10694, 0
  %v9_10694 = icmp eq i32 %v0_10694, %v3_10670
  store i1 %v9_10694, i1* %cpsr_z.global-to-local, align 1
  %v2_10698 = xor i1 %v8_10694, %v7_10694
  br i1 %v2_10698, label %bb318, label %bb319

bb318:                                            ; preds = %dec_label_pc_10670
  store i32 %v3_10670, i32* @r5, align 4
  br label %bb319

bb319:                                            ; preds = %dec_label_pc_10670, %bb318
  store i32 %v8_10690, i32* %v2_10688, align 4
  br label %bb317

dec_label_pc_106a4:                               ; preds = %dec_label_pc_105d0
  %v1_106a4 = add i32 %v2_1064c, 4
  %v2_106a4 = inttoptr i32 %v1_106a4 to i32*
  %v3_106a4 = load i32, i32* %v2_106a4, align 4
  store i32 %v3_106a4, i32* %r0.global-to-local, align 4
  %v1_106a8 = call i32 @function_129d8(i32 %v3_106a4)
  store i32 %v1_106a8, i32* %r0.global-to-local, align 4
  %v0_106ac = load i32, i32* @r4, align 4
  %v1_106ac = add i32 %v0_106ac, 12
  %v2_106ac = inttoptr i32 %v1_106ac to i32*
  %v3_106ac = load i32, i32* %v2_106ac, align 4
  store i32 %v3_106ac, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_106b4 = icmp ugt i32 %v3_106ac, 1
  store i1 %v2_106b4, i1* %cpsr_c.global-to-local, align 1
  %v7_106b4 = icmp eq i32 %v3_106ac, 2
  store i1 %v7_106b4, i1* %cpsr_z.global-to-local, align 1
  %v2_106b8 = add i32 %v0_106ac, 4
  %v3_106b8 = inttoptr i32 %v2_106b8 to i32*
  store i32 -1, i32* %v3_106b8, align 4
  %v2_106bc = xor i1 %v2_106b4, true
  %v3_106bc = or i1 %v7_106b4, %v2_106bc
  br i1 %v3_106bc, label %dec_label_pc_113c4, label %dec_label_pc_106c0

dec_label_pc_106c0:                               ; preds = %dec_label_pc_106a4
  %v0_106c0 = load i32, i32* @r4, align 4
  %v1_106c0 = add i32 %v0_106c0, 284
  %v2_106c0 = inttoptr i32 %v1_106c0 to i8*
  %v3_106c0 = load i8, i8* %v2_106c0, align 1
  %v4_106c0 = zext i8 %v3_106c0 to i32
  %v1_106c4 = add nuw nsw i32 %v4_106c0, 1
  %v1_106c8 = urem i32 %v1_106c4, 256
  store i32 %v1_106c8, i32* %r3.global-to-local, align 4
  %v2_106cc = icmp ugt i32 %v1_106c8, 9
  store i1 %v2_106cc, i1* %cpsr_c.global-to-local, align 1
  %v7_106cc = icmp eq i32 %v1_106c8, 10
  store i1 %v7_106cc, i1* %cpsr_z.global-to-local, align 1
  %v1_106d0 = trunc i32 %v1_106c4 to i8
  store i8 %v1_106d0, i8* %v2_106c0, align 1
  %v0_106d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_106d4, label %dec_label_pc_113c4, label %dec_label_pc_106d8

dec_label_pc_106d8:                               ; preds = %dec_label_pc_106c0
  %v0_106d8 = load i32, i32* @r4, align 4
  store i32 %v0_106d8, i32* @r0, align 4
  %v0_106dc = call i32 @function_fa54()
  store i32 %v0_106dc, i32* %r0.global-to-local, align 4
  br label %bb317

dec_label_pc_106e4:                               ; preds = %bb317
  store i32 1, i32* %stack_var_-64, align 4
  %v0_106ec = load i32, i32* @r6, align 4
  %v1_106ec = load i32, i32* @r5, align 4
  %v2_106ec = sub i32 %v0_106ec, %v1_106ec
  %v3_106ec = icmp uge i32 %v0_106ec, %v1_106ec
  store i1 %v3_106ec, i1* %cpsr_c.global-to-local, align 1
  %v4_106ec = xor i32 %v1_106ec, %v0_106ec
  %v5_106ec = xor i32 %v2_106ec, %v0_106ec
  %v6_106ec = and i32 %v5_106ec, %v4_106ec
  %v7_106ec = icmp slt i32 %v6_106ec, 0
  %v8_106ec = icmp slt i32 %v2_106ec, 0
  %v9_106ec = icmp eq i32 %v0_106ec, %v1_106ec
  store i1 %v9_106ec, i1* %cpsr_z.global-to-local, align 1
  %v2_106f0 = xor i1 %v8_106ec, %v7_106ec
  %v1_106ec.v0_106ec = select i1 %v2_106f0, i32 %v1_106ec, i32 %v0_106ec
  store i32 %v2_106fc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_10704, i32* %ip.global-to-local, align 4
  store i32 %v2_10708, i32* %r1.global-to-local, align 4
  %v1_1070c = add i32 %v1_106ec.v0_106ec, 1
  store i32 %v1_1070c, i32* %r0.global-to-local, align 4
  %v5_10718 = call i32 @function_12bf8(i32 %v1_1070c, i32 %v2_10708, i32 %v2_106fc, i32 0, i32 %v2_10704)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_10720 = call i32 @function_12ca8(i32* null)
  store i32 ptrtoint (i32* @global_var_1dce4.155 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_10720, i32* @global_var_1dce4.155, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  br label %dec_label_pc_10778

dec_label_pc_1073c:                               ; preds = %dec_label_pc_1079c, %dec_label_pc_10888
  %v0_10754 = phi i32 [ %v3_10790, %dec_label_pc_1079c ], [ %v0_1073c.pre, %dec_label_pc_10888 ]
  %v3_1073c = udiv i32 %v0_10754, 32
  %v3_10744 = mul nuw nsw i32 %v3_1073c, 4
  store i32 %v2_10680, i32* @lr, align 4
  %v2_1074c = add i32 %v3_10744, %v2_10680
  store i32 %v2_1074c, i32* %r3.global-to-local, align 4
  %v1_10750 = add i32 %v2_1074c, -184
  %v2_10750 = inttoptr i32 %v1_10750 to i32*
  %v3_10750 = load i32, i32* %v2_10750, align 4
  %v1_10754 = urem i32 %v0_10754, 32
  store i32 %v1_10754, i32* %r1.global-to-local, align 4
  %v2_10758 = add nsw i32 %v1_10754, -1
  %v3_10758 = shl i32 1, %v2_10758
  %v4_10758 = and i32 %v3_10758, %v3_10750
  %v5_10758 = icmp ne i32 %v4_10758, 0
  store i1 %v5_10758, i1* %cpsr_c.global-to-local, align 1
  %v6_10758 = lshr i32 %v3_10750, %v1_10754
  store i32 %v6_10758, i32* %r2.global-to-local, align 4
  %v1_1075c = urem i32 %v6_10758, 2
  %v2_1075c = icmp eq i32 %v1_1075c, 0
  store i1 %v2_1075c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1075c, label %dec_label_pc_10764, label %dec_label_pc_10914.preheader

dec_label_pc_10914.preheader:                     ; preds = %dec_label_pc_1073c
  %v0_10914112 = load i32, i32* @r5, align 4
  %v1_10914113 = add i32 %v0_10914112, 12
  %v2_10914114 = inttoptr i32 %v1_10914113 to i32*
  %v3_10914115 = load i32, i32* %v2_10914114, align 4
  store i32 %v3_10914115, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10918111117 = icmp eq i32 %v3_10914115, 0
  store i1 %v2_10918111117, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10918111117, label %dec_label_pc_10764, label %dec_label_pc_10920.lr.ph

dec_label_pc_10764:                               ; preds = %dec_label_pc_10914.loopexit, %dec_label_pc_10918.backedge, %dec_label_pc_10914.preheader, %dec_label_pc_1073c, %.thread228, %dec_label_pc_11240, %dec_label_pc_10778, %dec_label_pc_113d8, %dec_label_pc_11280
  %v3_10764 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10764, i32* %r3.global-to-local, align 4
  %v1_10768 = add i32 %v3_10764, 1
  store i32 %v1_10768, i32* %r2.global-to-local, align 4
  %v2_1076c = icmp ugt i32 %v1_10768, 254
  store i1 %v2_1076c, i1* %cpsr_c.global-to-local, align 1
  %v7_1076c = icmp eq i32 %v1_10768, 255
  store i1 %v7_1076c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_10768, i32* %stack_var_-48, align 4
  %v8_10774 = icmp sgt i32 %v1_10768, 255
  br i1 %v8_10774, label %dec_label_pc_1011c, label %dec_label_pc_10778

dec_label_pc_10778:                               ; preds = %dec_label_pc_10764, %dec_label_pc_106e4
  %v0_10784 = phi i32 [ %v1_10768, %dec_label_pc_10764 ], [ 0, %dec_label_pc_106e4 ]
  store i32 ptrtoint (i32* @global_var_1dd44.167 to i32), i32* %ip.global-to-local, align 4
  %v3_1077c = mul i32 %v0_10784, 256
  store i32 %v3_1077c, i32* %r3.global-to-local, align 4
  %v2_10780 = load i32, i32* @global_var_1dd44.167, align 4
  store i32 %v2_10780, i32* %r1.global-to-local, align 4
  %v2_10788 = mul i32 %v0_10784, 288
  store i32 %v2_10788, i32* %r2.global-to-local, align 4
  %v2_1078c = add i32 %v2_10780, %v2_10788
  store i32 %v2_1078c, i32* @r5, align 4
  %v1_10790 = add i32 %v2_1078c, 4
  %v2_10790 = inttoptr i32 %v1_10790 to i32*
  %v3_10790 = load i32, i32* %v2_10790, align 4
  store i32 %v3_10790, i32* @r4, align 4
  %v2_10794 = icmp eq i32 %v3_10790, -1
  store i1 %v2_10794, i1* %cpsr_c.global-to-local, align 1
  %v7_10794 = icmp eq i32 %v3_10790, -1
  store i1 %v7_10794, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10794, label %dec_label_pc_10764, label %dec_label_pc_1079c

dec_label_pc_1079c:                               ; preds = %dec_label_pc_10778
  %v3_1079c = udiv i32 %v3_10790, 32
  %v3_107a4 = mul nuw nsw i32 %v3_1079c, 4
  store i32 %v2_10680, i32* %lr.global-to-local, align 4
  %v2_107ac = add i32 %v3_107a4, %v2_10680
  store i32 %v2_107ac, i32* %r3.global-to-local, align 4
  %v1_107b0 = add i32 %v2_107ac, -312
  %v2_107b0 = inttoptr i32 %v1_107b0 to i32*
  %v3_107b0 = load i32, i32* %v2_107b0, align 4
  %v1_107b4 = urem i32 %v3_10790, 32
  store i32 %v1_107b4, i32* %r1.global-to-local, align 4
  %v2_107b8 = add nsw i32 %v1_107b4, -1
  %v3_107b8 = shl i32 1, %v2_107b8
  %v4_107b8 = and i32 %v3_107b0, %v3_107b8
  %v5_107b8 = icmp ne i32 %v4_107b8, 0
  store i1 %v5_107b8, i1* %cpsr_c.global-to-local, align 1
  %v6_107b8 = lshr i32 %v3_107b0, %v1_107b4
  store i32 %v6_107b8, i32* %r2.global-to-local, align 4
  %v1_107bc = urem i32 %v6_107b8, 2
  %v2_107bc = icmp eq i32 %v1_107bc, 0
  store i1 %v2_107bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_107bc, label %dec_label_pc_1073c, label %dec_label_pc_107c4

dec_label_pc_107c4:                               ; preds = %dec_label_pc_1079c
  store i32 4, i32* %r2.global-to-local, align 4
  store i8 4, i8* %stack_var_-52, align 1
  store i32 %v2_108c4, i32* %r3.global-to-local, align 4
  store i32 %v2_108b0, i32* %ip.global-to-local, align 4
  store i32 %v3_10790, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v6_107f4 = call i32 @function_13170(i32 %v3_10790, i32 1, i32 4, i32* nonnull %stack_var_-56, i32 %v2_108b0)
  %v3_107f8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_107f8, i32* %r3.global-to-local, align 4
  %v2_107fc = or i32 %v3_107f8, %v6_107f4
  store i32 %v2_107fc, i32* %r0.global-to-local, align 4
  %v4_107fc = icmp eq i32 %v2_107fc, 0
  store i1 %v4_107fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_107fc, label %dec_label_pc_10804, label %dec_label_pc_113d8

dec_label_pc_10804:                               ; preds = %dec_label_pc_107c4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_10808 = load i32, i32* @r5, align 4
  %v2_10808 = add i32 %v1_10808, 12
  %v3_10808 = inttoptr i32 %v2_10808 to i32*
  store i32 2, i32* %v3_10808, align 4
  %v0_1080c = call i32 @function_f8c0()
  store i32 %v0_1080c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1dce0.161 to i32), i32* %r3.global-to-local, align 4
  %v3_10814 = load i8, i8* @global_var_1dce1.162, align 1
  %v4_10814 = zext i8 %v3_10814 to i32
  store i32 %v4_10814, i32* %r2.global-to-local, align 4
  %v2_10818 = load i8, i8* bitcast (i8** @global_var_1dce0.161 to i8*), align 4
  %v3_10818 = zext i8 %v2_10818 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_1081c = mul nuw nsw i32 %v4_10814, 256
  %v5_1081c = or i32 %v3_10818, %v4_1081c
  store i32 %v5_1081c, i32* %r1.global-to-local, align 4
  %v2_10820 = call i32 @function_12760(i32 %v0_1080c, i32 %v5_1081c)
  store i32 ptrtoint (i32* @global_var_1dcb0.157 to i32), i32* %r3.global-to-local, align 4
  %v2_10828 = load i32, i32* @global_var_1dcb0.157, align 4
  store i32 %v2_10828, i32* %lr.global-to-local, align 4
  %v1_10830 = load i32, i32* @r6, align 4
  %v9_10830 = icmp eq i32 %v2_10828, %v1_10830
  store i1 %v9_10830, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_10834 = urem i32 %v2_10820, 65536
  store i32 %v3_10834, i32* %r0.global-to-local, align 4
  %v7_10838 = icmp sgt i32 %v2_10828, %v1_10830
  br i1 %v7_10838, label %dec_label_pc_1083c, label %dec_label_pc_113d0

dec_label_pc_1083c:                               ; preds = %dec_label_pc_10804
  %v2_10840 = load i32, i32* @global_var_1dcdc.159, align 4
  store i32 %v2_10840, i32* %r3.global-to-local, align 4
  store i32 %v1_10830, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1085c

dec_label_pc_1084c:                               ; preds = %dec_label_pc_10874, %dec_label_pc_1085c
  %v1_1084c = add i32 %v0_1084c, 1
  store i32 %v1_1084c, i32* %ip.global-to-local, align 4
  %v3_10850 = icmp uge i32 %v2_10828, %v1_1084c
  store i1 %v3_10850, i1* %cpsr_c.global-to-local, align 1
  %v9_10850 = icmp eq i32 %v2_10828, %v1_1084c
  store i1 %v9_10850, i1* %cpsr_z.global-to-local, align 1
  %v1_10854 = add i32 %v0_10854, 16
  store i32 %v1_10854, i32* %r3.global-to-local, align 4
  br i1 %v9_10850, label %dec_label_pc_113d0, label %dec_label_pc_1085c

dec_label_pc_1085c:                               ; preds = %dec_label_pc_1084c, %dec_label_pc_1083c
  %v0_1084c = phi i32 [ %v1_1084c, %dec_label_pc_1084c ], [ %v1_10830, %dec_label_pc_1083c ]
  %v0_10854 = phi i32 [ %v1_10854, %dec_label_pc_1084c ], [ %v2_10840, %dec_label_pc_1083c ]
  store i32 %v0_10854, i32* %r1.global-to-local, align 4
  %v1_10860 = add i32 %v0_10854, 9
  %v2_10860 = inttoptr i32 %v1_10860 to i8*
  %v3_10860 = load i8, i8* %v2_10860, align 1
  %v4_10860 = zext i8 %v3_10860 to i32
  store i32 %v4_10860, i32* %r2.global-to-local, align 4
  %v1_10864 = add i32 %v0_10854, 8
  %v2_10864 = inttoptr i32 %v1_10864 to i8*
  %v3_10864 = load i8, i8* %v2_10864, align 1
  %v4_10864 = zext i8 %v3_10864 to i32
  %v4_10868 = mul nuw nsw i32 %v4_10860, 256
  %v5_10868 = or i32 %v4_10864, %v4_10868
  store i32 %v5_10868, i32* %r3.global-to-local, align 4
  %v3_1086c = icmp uge i32 %v5_10868, %v3_10834
  store i1 %v3_1086c, i1* %cpsr_c.global-to-local, align 1
  %v9_1086c = icmp eq i32 %v5_10868, %v3_10834
  store i1 %v9_1086c, i1* %cpsr_z.global-to-local, align 1
  %v2_10870 = xor i1 %v9_1086c, true
  %v3_10870 = and i1 %v3_1086c, %v2_10870
  br i1 %v3_10870, label %dec_label_pc_1084c, label %dec_label_pc_10874

dec_label_pc_10874:                               ; preds = %dec_label_pc_1085c
  %v1_10874 = add i32 %v0_10854, 10
  %v2_10874 = inttoptr i32 %v1_10874 to i8*
  %v3_10874 = load i8, i8* %v2_10874, align 1
  %v4_10874 = zext i8 %v3_10874 to i32
  store i32 %v4_10874, i32* %r3.global-to-local, align 4
  %v1_10878 = add i32 %v0_10854, 11
  %v2_10878 = inttoptr i32 %v1_10878 to i8*
  %v3_10878 = load i8, i8* %v2_10878, align 1
  %v4_10878 = zext i8 %v3_10878 to i32
  store i32 %v4_10878, i32* %r2.global-to-local, align 4
  %v4_1087c = mul nuw nsw i32 %v4_10878, 256
  %v5_1087c = or i32 %v4_1087c, %v4_10874
  store i32 %v5_1087c, i32* %r3.global-to-local, align 4
  %v3_10880 = icmp uge i32 %v5_1087c, %v3_10834
  store i1 %v3_10880, i1* %cpsr_c.global-to-local, align 1
  %v9_10880 = icmp eq i32 %v5_1087c, %v3_10834
  store i1 %v9_10880, i1* %cpsr_z.global-to-local, align 1
  %v2_10884 = xor i1 %v3_10880, true
  %v3_10884 = or i1 %v9_10880, %v2_10884
  br i1 %v3_10884, label %dec_label_pc_1084c, label %dec_label_pc_10888

dec_label_pc_10888:                               ; preds = %dec_label_pc_10874, %dec_label_pc_113d0
  %v0_10890 = phi i32 [ 0, %dec_label_pc_113d0 ], [ %v0_10854, %dec_label_pc_10874 ]
  %v0_10888 = load i32, i32* @r5, align 4
  %v1_10888 = add i32 %v0_10888, 4
  %v2_10888 = inttoptr i32 %v1_10888 to i32*
  %v3_10888 = load i32, i32* %v2_10888, align 4
  store i32 %v3_10888, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_10890 = inttoptr i32 %v0_10888 to i32*
  store i32 %v0_10890, i32* %v2_10890, align 4
  %v0_10894 = load i32, i32* %ip.global-to-local, align 4
  %v1_10894 = load i32, i32* @r5, align 4
  %v2_10894 = add i32 %v1_10894, 24
  %v3_10894 = inttoptr i32 %v2_10894 to i32*
  store i32 %v0_10894, i32* %v3_10894, align 4
  %v0_1073c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1073c

dec_label_pc_1089c:                               ; preds = %dec_label_pc_10adc, %dec_label_pc_10ab0, %dec_label_pc_10af8
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_108a0 = call i32 @function_11590(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_108a8 = call i32 @function_11590(i32 33)
  store i32 %v2_108b0, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v3_108b8 = call i32 @function_114ac(i32 32, i32* %v2_108b8)
  store i32 %v3_108b8, i32* @r4, align 4
  store i32 %v2_108c4, i32* %r1.global-to-local, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v3_108cc = call i32 @function_114ac(i32 33, i32* nonnull %stack_var_-56)
  %v3_108d0 = load i8, i8* %stack_var_-52, align 1
  %v4_108d0 = sext i8 %v3_108d0 to i32
  %sext7 = mul i32 %v3_108cc, 16777216
  %v1_108d4 = sdiv i32 %sext7, 16777216
  store i32 %v1_108d4, i32* @r6, align 4
  %v0_108d8 = load i32, i32* @r4, align 4
  store i32 %v0_108d8, i32* %r2.global-to-local, align 4
  %v1_108dc = add nsw i32 %v4_108d0, -1
  store i32 %v1_108dc, i32* %r3.global-to-local, align 4
  %v0_108e0 = load i32, i32* @sl, align 4
  store i32 %v0_108e0, i32* %r0.global-to-local, align 4
  %v0_108e4 = load i32, i32* @r5, align 4
  %v1_108e4 = add i32 %v0_108e4, 24
  %v2_108e4 = inttoptr i32 %v1_108e4 to i32*
  %v3_108e4 = load i32, i32* %v2_108e4, align 4
  store i32 %v3_108e4, i32* %r1.global-to-local, align 4
  %v4_108e8 = call i32 @function_12108(i32 %v0_108e0, i32 %v3_108e4, i32 %v0_108d8, i32 %v1_108dc)
  store i32 %v4_108e8, i32* %r0.global-to-local, align 4
  %v2_108ec = icmp eq i32 %v4_108e8, -1
  store i1 %v2_108ec, i1* %cpsr_c.global-to-local, align 1
  %v7_108ec = icmp eq i32 %v4_108e8, -1
  store i1 %v7_108ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108ec, label %dec_label_pc_11300, label %dec_label_pc_108fc

dec_label_pc_108fc:                               ; preds = %dec_label_pc_11300, %dec_label_pc_1089c
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10900 = call i32 @function_114d8(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_10908 = call i32 @function_114d8(i32 33)
  store i32 %v1_10908, i32* %r0.global-to-local, align 4
  %v0_1090c = load i32, i32* @r7, align 4
  %v3_1090c = icmp eq i32 %v0_1090c, -1
  store i1 %v3_1090c, i1* %cpsr_c.global-to-local, align 1
  %v8_1090c = icmp eq i32 %v0_1090c, -1
  store i1 %v8_1090c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1090c, label %dec_label_pc_10914.loopexit, label %dec_label_pc_10b04

dec_label_pc_10914.loopexit:                      ; preds = %dec_label_pc_1117c, %dec_label_pc_10aa0, %dec_label_pc_10994, %dec_label_pc_108fc, %dec_label_pc_11168
  %v0_10914 = load i32, i32* @r5, align 4
  %v1_10914 = add i32 %v0_10914, 12
  %v2_10914 = inttoptr i32 %v1_10914 to i32*
  %v3_10914 = load i32, i32* %v2_10914, align 4
  store i32 %v3_10914, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10918111 = icmp eq i32 %v3_10914, 0
  store i1 %v2_10918111, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10918111, label %dec_label_pc_10764, label %dec_label_pc_10920.lr.ph

dec_label_pc_10920.lr.ph:                         ; preds = %dec_label_pc_10914.preheader, %dec_label_pc_10914.loopexit
  %v0_10920145 = phi i32 [ %v0_10914, %dec_label_pc_10914.loopexit ], [ %v0_10914112, %dec_label_pc_10914.preheader ]
  br label %dec_label_pc_10920

dec_label_pc_10920:                               ; preds = %dec_label_pc_10918.backedge.thread, %dec_label_pc_10918.backedge, %dec_label_pc_10918.backedge.thread457, %dec_label_pc_10920.lr.ph
  %v0_112b8 = phi i32 [ %v0_10920145, %dec_label_pc_10920.lr.ph ], [ %v0_10920142, %dec_label_pc_10918.backedge ], [ %v0_10994, %dec_label_pc_10918.backedge.thread ], [ %v0_10994, %dec_label_pc_10918.backedge.thread457 ]
  %v1_10920 = add i32 %v0_112b8, 24
  %v2_10920 = inttoptr i32 %v1_10920 to i32*
  %v3_10920 = load i32, i32* %v2_10920, align 4
  store i32 %v3_10920, i32* %r3.global-to-local, align 4
  %v2_10924 = icmp ugt i32 %v3_10920, 255
  store i1 %v2_10924, i1* %cpsr_c.global-to-local, align 1
  %v7_10924 = icmp eq i32 %v3_10920, 256
  store i1 %v7_10924, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_112b8, 28
  store i32 %.pre, i32* @sl, align 4
  br i1 %v7_10924, label %dec_label_pc_112b8, label %dec_label_pc_10930

dec_label_pc_10930:                               ; preds = %dec_label_pc_10920, %dec_label_pc_112b8
  store i32 0, i32* @r6, align 4
  %v1_10934 = load i32, i32* @sb, align 4
  %v2_10934 = inttoptr i32 %v1_10934 to i32*
  store i32 0, i32* %v2_10934, align 4
  %v0_10938 = load i32, i32* @r5, align 4
  %v1_10938 = add i32 %v0_10938, 24
  %v2_10938 = inttoptr i32 %v1_10938 to i32*
  %v3_10938 = load i32, i32* %v2_10938, align 4
  store i32 %v3_10938, i32* %r2.global-to-local, align 4
  %v0_1093c = load i32, i32* @sl, align 4
  %v2_1093c = add i32 %v0_1093c, %v3_10938
  store i32 %v2_1093c, i32* @r4, align 4
  %v1_10940 = add i32 %v0_10938, 4
  %v2_10940 = inttoptr i32 %v1_10940 to i32*
  %v3_10940 = load i32, i32* %v2_10940, align 4
  store i32 %v3_10940, i32* %r0.global-to-local, align 4
  %v1_10944 = sub i32 256, %v3_10938
  store i32 %v1_10944, i32* %r2.global-to-local, align 4
  store i32 %v2_1093c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10950 = inttoptr i32 %v2_1093c to i32*
  %v5_10950 = call i32 @function_131cc(i32 %v3_10940, i32* %v4_10950, i32 %v1_10944, i32 16384)
  store i32 %v5_10950, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10954 = icmp eq i32 %v5_10950, 0
  store i1 %v2_10954, i1* %cpsr_z.global-to-local, align 1
  %tmp322 = icmp slt i32 %v5_10950, 1
  br i1 %tmp322, label %dec_label_pc_11234, label %dec_label_pc_1095c

dec_label_pc_1095c:                               ; preds = %dec_label_pc_10930
  %v0_1095c = load i32, i32* @r6, align 4
  store i32 %v0_1095c, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10964

dec_label_pc_10964:                               ; preds = %bb324, %dec_label_pc_1095c
  %v3_1096c = phi i32 [ %v1_10970, %bb324 ], [ %v0_1095c, %dec_label_pc_1095c ]
  %v1_10964 = load i32, i32* @r4, align 4
  %v2_10964 = add i32 %v1_10964, %v3_1096c
  %v3_10964 = inttoptr i32 %v2_10964 to i8*
  %v4_10964 = load i8, i8* %v3_10964, align 1
  %v6_10964 = zext i8 %v4_10964 to i32
  store i32 %v6_10964, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10968 = icmp eq i8 %v4_10964, 0
  store i1 %v2_10968, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10968, label %bb323, label %bb324

bb323:                                            ; preds = %dec_label_pc_10964
  %v1_1096c = load i32, i32* %r1.global-to-local, align 4
  %v2_1096c = trunc i32 %v1_1096c to i8
  store i8 %v2_1096c, i8* %v3_10964, align 1
  %v0_10970.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb324

bb324:                                            ; preds = %dec_label_pc_10964, %bb323
  %v0_10970 = phi i32 [ %v3_1096c, %dec_label_pc_10964 ], [ %v0_10970.pre, %bb323 ]
  %v1_10970 = add i32 %v0_10970, 1
  store i32 %v1_10970, i32* %r2.global-to-local, align 4
  %v3_10974 = icmp uge i32 %v5_10950, %v1_10970
  store i1 %v3_10974, i1* %cpsr_c.global-to-local, align 1
  %v9_10974 = icmp eq i32 %v5_10950, %v1_10970
  store i1 %v9_10974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10974, label %dec_label_pc_1097c, label %dec_label_pc_10964

dec_label_pc_1097c:                               ; preds = %bb324, %dec_label_pc_11238
  store i32 ptrtoint (i32* @global_var_1dce4.155 to i32), i32* %r1.global-to-local, align 4
  %v0_10980 = load i32, i32* @r5, align 4
  %v1_10980 = add i32 %v0_10980, 24
  %v2_10980 = inttoptr i32 %v1_10980 to i32*
  %v3_10980 = load i32, i32* %v2_10980, align 4
  %v2_10984 = load i32, i32* @global_var_1dce4.155, align 4
  store i32 %v2_10984, i32* %r3.global-to-local, align 4
  %v2_10988 = add i32 %v3_10980, %v5_10950
  store i32 %v2_10988, i32* %ip.global-to-local, align 4
  store i32 %v2_10988, i32* %v2_10980, align 4
  %v0_10990 = load i32, i32* %r3.global-to-local, align 4
  %v1_10990 = load i32, i32* @r5, align 4
  %v2_10990 = add i32 %v1_10990, 8
  %v3_10990 = inttoptr i32 %v2_10990 to i32*
  store i32 %v0_10990, i32* %v3_10990, align 4
  br label %dec_label_pc_10994

dec_label_pc_10994:                               ; preds = %dec_label_pc_10fe8, %dec_label_pc_1097c
  %v0_10994 = load i32, i32* @r5, align 4
  %v1_10994 = add i32 %v0_10994, 12
  %v2_10994 = inttoptr i32 %v1_10994 to i32*
  %v3_10994 = load i32, i32* %v2_10994, align 4
  store i32 %v3_10994, i32* %r2.global-to-local, align 4
  %v1_10998 = add i32 %v3_10994, -2
  store i32 %v1_10998, i32* %r3.global-to-local, align 4
  %v7_1099c = icmp eq i32 %v1_10998, 8
  store i1 %v7_1099c, i1* %cpsr_z.global-to-local, align 1
  %v5_109a0 = and i32 %v1_10998, 1073741824
  %v6_109a0 = icmp ne i32 %v5_109a0, 0
  store i1 %v6_109a0, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_10994, label %dec_label_pc_10914.loopexit [
    i32 2, label %dec_label_pc_109cc
    i32 3, label %dec_label_pc_10ab0
    i32 4, label %dec_label_pc_10b48
    i32 5, label %dec_label_pc_10bd8
    i32 6, label %dec_label_pc_10c8c
    i32 7, label %dec_label_pc_10eb0
    i32 8, label %dec_label_pc_10dfc
    i32 9, label %dec_label_pc_1100c
    i32 10, label %dec_label_pc_10f64
  ]

dec_label_pc_109cc:                               ; preds = %dec_label_pc_10994
  %v1_109cc = add i32 %v0_10994, 24
  %v2_109cc = inttoptr i32 %v1_109cc to i32*
  %v3_109cc = load i32, i32* %v2_109cc, align 4
  store i32 %v3_109cc, i32* %ip.global-to-local, align 4
  %v0_109d0 = load i32, i32* @sl, align 4
  store i32 %v0_109d0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v1_109d8 = add i32 %v0_10994, 29
  store i32 %v1_109d8, i32* @r4, align 4
  store i32 -3, i32* %r8.global-to-local, align 4
  %v3_109e0102 = icmp eq i32 %v3_109cc, 0
  store i1 %v3_109e0102, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_109e0102, i1* %cpsr_z.global-to-local, align 1
  %v6_109e4109 = icmp sgt i32 %v3_109cc, 0
  br i1 %v6_109e4109, label %dec_label_pc_109e8.preheader, label %dec_label_pc_10a90

dec_label_pc_109e0.loopexit:                      ; preds = %dec_label_pc_10a00
  %v2_10a08 = add i32 %v1_10a08, 2
  store i32 %v2_10a08, i32* @r6, align 4
  %v2_10a0c = add i32 %v1_10a0c, 2
  store i32 %v2_10a0c, i32* @r4, align 4
  %v2_10a10 = add i32 %v1_10a10, 2
  store i32 %v2_10a10, i32* @r7, align 4
  %v3_109e0 = icmp uge i32 %v2_10a10, %v1_109e0
  store i1 %v3_109e0, i1* %cpsr_c.global-to-local, align 1
  %v9_109e0 = icmp eq i32 %v2_10a10, %v1_109e0
  store i1 %v9_109e0, i1* %cpsr_z.global-to-local, align 1
  %v6_109e4 = icmp slt i32 %v2_10a10, %v1_109e0
  br i1 %v6_109e4, label %dec_label_pc_109e8.preheader, label %dec_label_pc_10a90

dec_label_pc_109e8.preheader:                     ; preds = %dec_label_pc_109cc, %dec_label_pc_109e0.loopexit
  %v6_10a98184 = phi i32 [ %v6_10a98185, %dec_label_pc_109e0.loopexit ], [ %v0_10994, %dec_label_pc_109cc ]
  %v1_10a10173 = phi i32 [ %v2_10a10, %dec_label_pc_109e0.loopexit ], [ 0, %dec_label_pc_109cc ]
  %v1_10a08171 = phi i32 [ %v2_10a08, %dec_label_pc_109e0.loopexit ], [ %v0_109d0, %dec_label_pc_109cc ]
  %v1_109f4169 = phi i32 [ %v1_109e0, %dec_label_pc_109e0.loopexit ], [ %v3_109cc, %dec_label_pc_109cc ]
  %v0_109e8167 = phi i32 [ %v2_10a0c, %dec_label_pc_109e0.loopexit ], [ %v1_109d8, %dec_label_pc_109cc ]
  br label %dec_label_pc_109e8

dec_label_pc_109e8:                               ; preds = %dec_label_pc_109e8.preheader, %dec_label_pc_10a70
  %v6_10a98185 = phi i32 [ %v6_10a98184, %dec_label_pc_109e8.preheader ], [ %v0_10a78, %dec_label_pc_10a70 ]
  %v1_10a10 = phi i32 [ %v1_10a10173, %dec_label_pc_109e8.preheader ], [ %v1_10a7c, %dec_label_pc_10a70 ]
  %v1_10a08 = phi i32 [ %v1_10a08171, %dec_label_pc_109e8.preheader ], [ %v1_10a84, %dec_label_pc_10a70 ]
  %v1_109e0 = phi i32 [ %v1_109f4169, %dec_label_pc_109e8.preheader ], [ %v3_10a78, %dec_label_pc_10a70 ]
  %v1_10a0c = phi i32 [ %v0_109e8167, %dec_label_pc_109e8.preheader ], [ %v1_10a88, %dec_label_pc_10a70 ]
  %v1_109e8 = add i32 %v1_10a0c, -1
  %v2_109e8 = inttoptr i32 %v1_109e8 to i8*
  %v3_109e8 = load i8, i8* %v2_109e8, align 1
  %v4_109e8 = zext i8 %v3_109e8 to i32
  store i32 %v4_109e8, i32* %r3.global-to-local, align 4
  %v2_109ec = icmp eq i8 %v3_109e8, -1
  store i1 %v2_109ec, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_109ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_109ec, label %dec_label_pc_109f4, label %dec_label_pc_10a90

dec_label_pc_109f4:                               ; preds = %dec_label_pc_109e8
  %v0_109f4 = load i32, i32* @sl, align 4
  %v2_109f4 = add i32 %v0_109f4, %v1_109e0
  store i32 %v2_109f4, i32* %r2.global-to-local, align 4
  %v3_109f8 = icmp uge i32 %v2_109f4, %v1_10a0c
  store i1 %v3_109f8, i1* %cpsr_c.global-to-local, align 1
  %v9_109f8 = icmp eq i32 %v2_109f4, %v1_10a0c
  store i1 %v9_109f8, i1* %cpsr_z.global-to-local, align 1
  %v2_109fc = xor i1 %v3_109f8, true
  %v3_109fc = or i1 %v9_109f8, %v2_109fc
  br i1 %v3_109fc, label %dec_label_pc_10a90, label %dec_label_pc_10a00

dec_label_pc_10a00:                               ; preds = %dec_label_pc_109f4
  %v1_10a00 = inttoptr i32 %v1_10a0c to i8*
  %v2_10a00 = load i8, i8* %v1_10a00, align 1
  %v3_10a00 = zext i8 %v2_10a00 to i32
  store i32 %v3_10a00, i32* %r3.global-to-local, align 4
  %v2_10a04 = icmp eq i8 %v2_10a00, -1
  store i1 %v2_10a04, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10a04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10a04, label %dec_label_pc_109e0.loopexit, label %dec_label_pc_10a18

dec_label_pc_10a18:                               ; preds = %dec_label_pc_10a00
  %v2_10a18 = icmp ugt i8 %v2_10a00, -4
  store i1 %v2_10a18, i1* %cpsr_c.global-to-local, align 1
  %v7_10a18 = icmp eq i8 %v2_10a00, -3
  store i1 %v7_10a18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a18, label %dec_label_pc_110c0, label %dec_label_pc_10a20

dec_label_pc_10a20:                               ; preds = %dec_label_pc_10a18
  %v1_10a20 = add i32 %v1_10a08, 2
  store i32 %v1_10a20, i32* %r3.global-to-local, align 4
  %v3_10a24 = icmp uge i32 %v2_109f4, %v1_10a20
  store i1 %v3_10a24, i1* %cpsr_c.global-to-local, align 1
  %v9_10a24 = icmp eq i32 %v2_109f4, %v1_10a20
  store i1 %v9_10a24, i1* %cpsr_z.global-to-local, align 1
  %v2_10a28 = xor i1 %v3_10a24, true
  %v3_10a28 = or i1 %v9_10a24, %v2_10a28
  br i1 %v3_10a28, label %dec_label_pc_10a90, label %dec_label_pc_10a2c

dec_label_pc_10a2c:                               ; preds = %bb346, %dec_label_pc_1111c, %dec_label_pc_10a20, %.thread75
  %v0_10a2c = load i32, i32* @r4, align 4
  %v1_10a2c = inttoptr i32 %v0_10a2c to i8*
  %v2_10a2c = load i8, i8* %v1_10a2c, align 1
  %v3_10a2c = zext i8 %v2_10a2c to i32
  store i32 %v3_10a2c, i32* %r3.global-to-local, align 4
  %v2_10a30 = icmp ugt i8 %v2_10a2c, -4
  store i1 %v2_10a30, i1* %cpsr_c.global-to-local, align 1
  %v7_10a30 = icmp eq i8 %v2_10a2c, -3
  store i1 %v7_10a30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a30, label %.thread62, label %dec_label_pc_10a40

.thread62:                                        ; preds = %dec_label_pc_10a2c
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_10a2c, align 1
  %v0_10a3c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10a3c.pr.pr, label %bb326, label %.thread62.dec_label_pc_10a40thread-pre-split_crit_edge

.thread62.dec_label_pc_10a40thread-pre-split_crit_edge: ; preds = %.thread62
  %v0_10a40.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10a40

dec_label_pc_10a40:                               ; preds = %dec_label_pc_10a2c, %.thread62.dec_label_pc_10a40thread-pre-split_crit_edge
  %v0_10a40.pr = phi i32 [ %v0_10a40.pr.pre, %.thread62.dec_label_pc_10a40thread-pre-split_crit_edge ], [ %v3_10a2c, %dec_label_pc_10a2c ]
  %v2_10a40 = icmp ugt i32 %v0_10a40.pr, 250
  store i1 %v2_10a40, i1* %cpsr_c.global-to-local, align 1
  %v7_10a40 = icmp eq i32 %v0_10a40.pr, 251
  store i1 %v7_10a40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a40, label %bb325, label %bb326

bb325:                                            ; preds = %dec_label_pc_10a40
  %v1_10a44 = load i32, i32* %r8.global-to-local, align 4
  %v2_10a44 = trunc i32 %v1_10a44 to i8
  %v3_10a44 = load i32, i32* @r4, align 4
  %v4_10a44 = inttoptr i32 %v3_10a44 to i8*
  store i8 %v2_10a44, i8* %v4_10a44, align 1
  br label %bb326

bb326:                                            ; preds = %.thread62, %dec_label_pc_10a40, %bb325
  %v0_10a48 = load i32, i32* @r4, align 4
  %v1_10a48 = add i32 %v0_10a48, 1
  %v2_10a48 = inttoptr i32 %v1_10a48 to i8*
  %v3_10a48 = load i8, i8* %v2_10a48, align 1
  %v4_10a48 = zext i8 %v3_10a48 to i32
  store i32 %v4_10a48, i32* %r3.global-to-local, align 4
  %v2_10a4c = icmp ugt i8 %v3_10a48, -4
  store i1 %v2_10a4c, i1* %cpsr_c.global-to-local, align 1
  %v7_10a4c = icmp eq i8 %v3_10a48, -3
  store i1 %v7_10a4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a4c, label %.thread65, label %dec_label_pc_10a5c

.thread65:                                        ; preds = %bb326
  store i32 -4, i32* %ip.global-to-local, align 4
  store i8 -4, i8* %v2_10a48, align 1
  %v0_10a58.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10a58.pr.pr, label %bb328, label %.thread65.dec_label_pc_10a5c_crit_edge

.thread65.dec_label_pc_10a5c_crit_edge:           ; preds = %.thread65
  %v0_10a5c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10a5c

dec_label_pc_10a5c:                               ; preds = %.thread65.dec_label_pc_10a5c_crit_edge, %bb326
  %v0_10a5c = phi i32 [ %v0_10a5c.pre, %.thread65.dec_label_pc_10a5c_crit_edge ], [ %v4_10a48, %bb326 ]
  %v2_10a5c = icmp ugt i32 %v0_10a5c, 250
  store i1 %v2_10a5c, i1* %cpsr_c.global-to-local, align 1
  %v7_10a5c = icmp eq i32 %v0_10a5c, 251
  store i1 %v7_10a5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a5c, label %bb327, label %bb328

bb327:                                            ; preds = %dec_label_pc_10a5c
  %v1_10a60 = load i32, i32* %r8.global-to-local, align 4
  %v2_10a60 = trunc i32 %v1_10a60 to i8
  %v3_10a60 = load i32, i32* @r4, align 4
  %v4_10a60 = add i32 %v3_10a60, 1
  %v5_10a60 = inttoptr i32 %v4_10a60 to i8*
  store i8 %v2_10a60, i8* %v5_10a60, align 1
  br label %bb328

bb328:                                            ; preds = %.thread65, %dec_label_pc_10a5c, %bb327
  %v0_10a64 = load i32, i32* @r5, align 4
  %v1_10a64 = add i32 %v0_10a64, 4
  %v2_10a64 = inttoptr i32 %v1_10a64 to i32*
  %v3_10a64 = load i32, i32* %v2_10a64, align 4
  store i32 %v3_10a64, i32* %r0.global-to-local, align 4
  %v0_10a68 = load i32, i32* @r6, align 4
  br label %dec_label_pc_10a70

dec_label_pc_10a70:                               ; preds = %dec_label_pc_1128c, %bb328
  %v0_10a74 = phi i32 [ %v3_112a8, %dec_label_pc_1128c ], [ %v3_10a64, %bb328 ]
  %storemerge8 = phi i32 [ %v2_110dc, %dec_label_pc_1128c ], [ %v0_10a68, %bb328 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_1128c ], [ 3, %bb328 ]
  store i32 %storemerge8, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10a74 = inttoptr i32 %storemerge8 to i32*
  %v5_10a74 = call i32 @function_1322c(i32 %v0_10a74, i32* %v4_10a74, i32 %storemerge, i32 16384)
  store i32 %v5_10a74, i32* %r0.global-to-local, align 4
  %v0_10a78 = load i32, i32* @r5, align 4
  %v1_10a78 = add i32 %v0_10a78, 24
  %v2_10a78 = inttoptr i32 %v1_10a78 to i32*
  %v3_10a78 = load i32, i32* %v2_10a78, align 4
  store i32 %v3_10a78, i32* %ip.global-to-local, align 4
  %v0_10a7c = load i32, i32* @r7, align 4
  %v1_10a7c = add i32 %v0_10a7c, 3
  store i32 %v1_10a7c, i32* @r7, align 4
  %v3_10a80 = icmp uge i32 %v1_10a7c, %v3_10a78
  store i1 %v3_10a80, i1* %cpsr_c.global-to-local, align 1
  %v9_10a80 = icmp eq i32 %v1_10a7c, %v3_10a78
  store i1 %v9_10a80, i1* %cpsr_z.global-to-local, align 1
  %v0_10a84 = load i32, i32* @r6, align 4
  %v1_10a84 = add i32 %v0_10a84, 3
  store i32 %v1_10a84, i32* @r6, align 4
  %v0_10a88 = load i32, i32* @r4, align 4
  %v1_10a88 = add i32 %v0_10a88, 3
  store i32 %v1_10a88, i32* @r4, align 4
  %v5_10a8c = icmp slt i32 %v1_10a7c, %v3_10a78
  br i1 %v5_10a8c, label %dec_label_pc_109e8, label %dec_label_pc_10a90

dec_label_pc_10a90:                               ; preds = %dec_label_pc_109e0.loopexit, %dec_label_pc_109e8, %dec_label_pc_10a70, %dec_label_pc_10a20, %dec_label_pc_109f4, %dec_label_pc_109cc, %dec_label_pc_110c0.dec_label_pc_10a90.loopexit_crit_edge
  %v6_10a98 = phi i32 [ %v0_110e8, %dec_label_pc_110c0.dec_label_pc_10a90.loopexit_crit_edge ], [ %v0_10994, %dec_label_pc_109cc ], [ %v6_10a98185, %dec_label_pc_109e8 ], [ %v0_10a78, %dec_label_pc_10a70 ], [ %v6_10a98185, %dec_label_pc_10a20 ], [ %v6_10a98185, %dec_label_pc_109f4 ], [ %v6_10a98185, %dec_label_pc_109e0.loopexit ]
  %v0_10aa0.pre = phi i32 [ %v0_10a90.pre.pre, %dec_label_pc_110c0.dec_label_pc_10a90.loopexit_crit_edge ], [ 0, %dec_label_pc_109cc ], [ %v1_10a10, %dec_label_pc_109e8 ], [ %v1_10a7c, %dec_label_pc_10a70 ], [ %v1_10a10, %dec_label_pc_10a20 ], [ %v1_10a10, %dec_label_pc_109f4 ], [ %v2_10a10, %dec_label_pc_109e0.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a90 = icmp eq i32 %v0_10aa0.pre, 0
  store i1 %v2_10a90, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v0_10aa0.pre, 1
  br i1 %tmp329, label %dec_label_pc_10aa0, label %.thread223

.thread223:                                       ; preds = %dec_label_pc_10a90
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_10a98 = add i32 %v6_10a98, 12
  %v8_10a98 = inttoptr i32 %v7_10a98 to i32*
  store i32 3, i32* %v8_10a98, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10aa0:                               ; preds = %dec_label_pc_10a90, %dec_label_pc_11060, %dec_label_pc_10b04, %dec_label_pc_111c8, %dec_label_pc_10f04, %dec_label_pc_10e50, %dec_label_pc_10d9c, %dec_label_pc_10c2c, %dec_label_pc_10b94
  %v0_10aa0 = phi i32 [ %v1_11054, %dec_label_pc_11060 ], [ %v0_10b04, %dec_label_pc_10b04 ], [ %v0_111c0, %dec_label_pc_111c8 ], [ %v1_10ef8, %dec_label_pc_10f04 ], [ %v1_10e44, %dec_label_pc_10e50 ], [ %v1_10d90, %dec_label_pc_10d9c ], [ %v1_10c20, %dec_label_pc_10c2c ], [ %v0_10b94, %dec_label_pc_10b94 ], [ %v0_10aa0.pre, %dec_label_pc_10a90 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10aa0 = icmp eq i32 %v0_10aa0, 0
  store i1 %v2_10aa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10aa0, label %dec_label_pc_10914.loopexit, label %dec_label_pc_10aa8

dec_label_pc_10aa8:                               ; preds = %dec_label_pc_10aa0
  %v0_10aa8 = load i32, i32* @r5, align 4
  %v1_10aa8 = add i32 %v0_10aa8, 24
  %v2_10aa8 = inttoptr i32 %v1_10aa8 to i32*
  %v3_10aa8 = load i32, i32* %v2_10aa8, align 4
  store i32 %v3_10aa8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10ab0:                               ; preds = %dec_label_pc_10994
  %v1_10ab0 = add i32 %v0_10994, 24
  %v2_10ab0 = inttoptr i32 %v1_10ab0 to i32*
  %v3_10ab0 = load i32, i32* %v2_10ab0, align 4
  store i32 %v3_10ab0, i32* %ip.global-to-local, align 4
  %v1_10ab4 = add i32 %v3_10ab0, -1
  store i32 %v1_10ab4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10ab8 = icmp eq i32 %v1_10ab4, 0
  store i1 %v2_10ab8, i1* %cpsr_z.global-to-local, align 1
  %v5_10abc = icmp sgt i32 %v1_10ab4, 0
  br i1 %v5_10abc, label %dec_label_pc_10ae4, label %dec_label_pc_1089c

dec_label_pc_10ac4:                               ; preds = %bb330
  %v2_10ac4 = icmp ugt i8 %v3_10ae8, 35
  store i1 %v2_10ac4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ac4 = icmp eq i8 %v3_10ae8, 36
  store i1 %v7_10ac4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ac4, label %dec_label_pc_10af8, label %dec_label_pc_10acc

dec_label_pc_10acc:                               ; preds = %dec_label_pc_10ac4
  %v2_10acc = icmp ugt i8 %v3_10ae8, 34
  store i1 %v2_10acc, i1* %cpsr_c.global-to-local, align 1
  %v7_10acc = icmp eq i8 %v3_10ae8, 35
  store i1 %v7_10acc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10acc, label %dec_label_pc_10af8, label %dec_label_pc_10ad4

dec_label_pc_10ad4:                               ; preds = %dec_label_pc_10acc
  %v2_10ad4 = icmp ugt i8 %v3_10ae8, 36
  store i1 %v2_10ad4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ad4 = icmp eq i8 %v3_10ae8, 37
  store i1 %v7_10ad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ad4, label %dec_label_pc_10af8, label %dec_label_pc_10adc

dec_label_pc_10adc:                               ; preds = %dec_label_pc_10ad4
  %v1_10adc = add i32 %v0_10af8, -1
  store i32 %v1_10adc, i32* %r0.global-to-local, align 4
  %v2_10adc = icmp ne i32 %v0_10af8, 0
  store i1 %v2_10adc, i1* %cpsr_c.global-to-local, align 1
  %v7_10adc = icmp eq i32 %v0_10af8, 1
  store i1 %v7_10adc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10adc, label %dec_label_pc_1089c, label %dec_label_pc_10ae4

dec_label_pc_10ae4:                               ; preds = %dec_label_pc_10ab0, %dec_label_pc_10adc
  %v0_10af8 = phi i32 [ %v1_10adc, %dec_label_pc_10adc ], [ %v1_10ab4, %dec_label_pc_10ab0 ]
  %v2_10ae4 = add i32 %v0_10af8, %v0_10994
  store i32 %v2_10ae4, i32* %r3.global-to-local, align 4
  %v1_10ae8 = add i32 %v2_10ae4, 28
  %v2_10ae8 = inttoptr i32 %v1_10ae8 to i8*
  %v3_10ae8 = load i8, i8* %v2_10ae8, align 1
  %v4_10ae8 = zext i8 %v3_10ae8 to i32
  store i32 %v4_10ae8, i32* %r3.global-to-local, align 4
  %v2_10aec = icmp ugt i8 %v3_10ae8, 61
  store i1 %v2_10aec, i1* %cpsr_c.global-to-local, align 1
  %v7_10aec = icmp eq i8 %v3_10ae8, 62
  store i1 %v7_10aec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10aec, label %dec_label_pc_10af8, label %bb330

bb330:                                            ; preds = %dec_label_pc_10ae4
  %v3_10af0 = icmp ugt i8 %v3_10ae8, 57
  store i1 %v3_10af0, i1* %cpsr_c.global-to-local, align 1
  %v8_10af0 = icmp eq i8 %v3_10ae8, 58
  store i1 %v8_10af0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10af0, label %dec_label_pc_10af8, label %dec_label_pc_10ac4

dec_label_pc_10af8:                               ; preds = %dec_label_pc_10ae4, %bb330, %dec_label_pc_10ad4, %dec_label_pc_10acc, %dec_label_pc_10ac4
  %v1_10af8 = add i32 %v0_10af8, 1
  store i32 %v1_10af8, i32* @r7, align 4
  %v2_10afc = icmp eq i32 %v1_10af8, -1
  store i1 %v2_10afc, i1* %cpsr_c.global-to-local, align 1
  %v7_10afc = icmp eq i32 %v0_10af8, -2
  store i1 %v7_10afc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10afc, label %dec_label_pc_1089c, label %dec_label_pc_10b04

dec_label_pc_10b04:                               ; preds = %dec_label_pc_108fc, %dec_label_pc_10af8
  %v0_10b04 = phi i32 [ %v0_1090c, %dec_label_pc_108fc ], [ %v1_10af8, %dec_label_pc_10af8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b04 = icmp eq i32 %v0_10b04, 0
  store i1 %v2_10b04, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v0_10b04, 1
  br i1 %tmp331, label %dec_label_pc_10aa0, label %dec_label_pc_10b0c

dec_label_pc_10b0c:                               ; preds = %dec_label_pc_10b04
  %v0_10b0c = load i32, i32* @r5, align 4
  %v1_10b0c = inttoptr i32 %v0_10b0c to i32*
  %v2_10b0c = load i32, i32* %v1_10b0c, align 4
  store i32 %v2_10b0c, i32* %r3.global-to-local, align 4
  %v1_10b10 = add i32 %v0_10b0c, 4
  %v2_10b10 = inttoptr i32 %v1_10b10 to i32*
  %v3_10b10 = load i32, i32* %v2_10b10, align 4
  store i32 %v3_10b10, i32* %r0.global-to-local, align 4
  %v1_10b14 = add i32 %v2_10b0c, 12
  %v2_10b14 = inttoptr i32 %v1_10b14 to i8*
  %v3_10b14 = load i8, i8* %v2_10b14, align 1
  %v4_10b14 = zext i8 %v3_10b14 to i32
  store i32 %v4_10b14, i32* %r2.global-to-local, align 4
  %v1_10b18 = inttoptr i32 %v2_10b0c to i32*
  %v2_10b18 = load i32, i32* %v1_10b18, align 4
  store i32 %v2_10b18, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10b20 = inttoptr i32 %v2_10b18 to i32*
  %v5_10b20 = call i32 @function_1322c(i32 %v3_10b10, i32* %v4_10b20, i32 %v4_10b14, i32 16384)
  store i32 %v5_10b20, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10b28 = load i32, i32* @r5, align 4
  %v1_10b28 = add i32 %v0_10b28, 4
  %v2_10b28 = inttoptr i32 %v1_10b28 to i32*
  %v3_10b28 = load i32, i32* %v2_10b28, align 4
  store i32 %v3_10b28, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10b34 = call i32 @function_1322c(i32 %v3_10b28, i32* bitcast ([3 x i8]* @global_var_150c8.33 to i32*), i32 2, i32 16384)
  store i32 %v5_10b34, i32* %r0.global-to-local, align 4
  %v0_10b38 = load i32, i32* @r5, align 4
  %v1_10b38 = add i32 %v0_10b38, 24
  %v2_10b38 = inttoptr i32 %v1_10b38 to i32*
  %v3_10b38 = load i32, i32* %v2_10b38, align 4
  store i32 %v3_10b38, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_10b40 = add i32 %v0_10b38, 12
  %v3_10b40 = inttoptr i32 %v2_10b40 to i32*
  store i32 4, i32* %v3_10b40, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10b48:                               ; preds = %dec_label_pc_10994
  %v1_10b48 = add i32 %v0_10994, 24
  %v2_10b48 = inttoptr i32 %v1_10b48 to i32*
  %v3_10b48 = load i32, i32* %v2_10b48, align 4
  store i32 %v3_10b48, i32* %ip.global-to-local, align 4
  %v1_10b4c = add i32 %v3_10b48, -1
  store i32 %v1_10b4c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b50 = icmp eq i32 %v1_10b4c, 0
  store i1 %v2_10b50, i1* %cpsr_z.global-to-local, align 1
  %v5_10b54 = icmp sgt i32 %v1_10b4c, 0
  br i1 %v5_10b54, label %dec_label_pc_10b74, label %dec_label_pc_11128

dec_label_pc_10b5c:                               ; preds = %bb332
  %v2_10b5c = icmp ugt i8 %v3_10b78, 35
  store i1 %v2_10b5c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b5c = icmp eq i8 %v3_10b78, 36
  store i1 %v7_10b5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b5c, label %dec_label_pc_10b88, label %dec_label_pc_10b64

dec_label_pc_10b64:                               ; preds = %dec_label_pc_10b5c
  %v2_10b64 = icmp ugt i8 %v3_10b78, 34
  store i1 %v2_10b64, i1* %cpsr_c.global-to-local, align 1
  %v7_10b64 = icmp eq i8 %v3_10b78, 35
  store i1 %v7_10b64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b64, label %dec_label_pc_10b88, label %dec_label_pc_10b6c

dec_label_pc_10b6c:                               ; preds = %dec_label_pc_10b64
  %v1_10b6c = add i32 %v0_10b88, -1
  store i32 %v1_10b6c, i32* %r0.global-to-local, align 4
  %v2_10b6c = icmp ne i32 %v0_10b88, 0
  store i1 %v2_10b6c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b6c = icmp eq i32 %v0_10b88, 1
  store i1 %v7_10b6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b6c, label %dec_label_pc_11128, label %dec_label_pc_10b74

dec_label_pc_10b74:                               ; preds = %dec_label_pc_10b48, %dec_label_pc_10b6c
  %v0_10b88 = phi i32 [ %v1_10b6c, %dec_label_pc_10b6c ], [ %v1_10b4c, %dec_label_pc_10b48 ]
  %v2_10b74 = add i32 %v0_10b88, %v0_10994
  store i32 %v2_10b74, i32* %r3.global-to-local, align 4
  %v1_10b78 = add i32 %v2_10b74, 28
  %v2_10b78 = inttoptr i32 %v1_10b78 to i8*
  %v3_10b78 = load i8, i8* %v2_10b78, align 1
  %v4_10b78 = zext i8 %v3_10b78 to i32
  store i32 %v4_10b78, i32* %r3.global-to-local, align 4
  %v2_10b7c = icmp ugt i8 %v3_10b78, 61
  store i1 %v2_10b7c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b7c = icmp eq i8 %v3_10b78, 62
  store i1 %v7_10b7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b7c, label %dec_label_pc_10b88, label %bb332

bb332:                                            ; preds = %dec_label_pc_10b74
  %v3_10b80 = icmp ugt i8 %v3_10b78, 57
  store i1 %v3_10b80, i1* %cpsr_c.global-to-local, align 1
  %v8_10b80 = icmp eq i8 %v3_10b78, 58
  store i1 %v8_10b80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10b80, label %dec_label_pc_10b88, label %dec_label_pc_10b5c

dec_label_pc_10b88:                               ; preds = %dec_label_pc_10b74, %bb332, %dec_label_pc_10b64, %dec_label_pc_10b5c
  %v1_10b88 = add i32 %v0_10b88, 1
  store i32 %v1_10b88, i32* @r7, align 4
  %v2_10b8c = icmp eq i32 %v1_10b88, -1
  store i1 %v2_10b8c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b8c = icmp eq i32 %v0_10b88, -2
  store i1 %v7_10b8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b8c, label %dec_label_pc_11128, label %dec_label_pc_10b94

dec_label_pc_10b94:                               ; preds = %dec_label_pc_11168, %dec_label_pc_10b88
  %v0_10b94 = phi i32 [ %v0_11170, %dec_label_pc_11168 ], [ %v1_10b88, %dec_label_pc_10b88 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b94 = icmp eq i32 %v0_10b94, 0
  store i1 %v2_10b94, i1* %cpsr_z.global-to-local, align 1
  %tmp333 = icmp slt i32 %v0_10b94, 1
  br i1 %tmp333, label %dec_label_pc_10aa0, label %dec_label_pc_10b9c

dec_label_pc_10b9c:                               ; preds = %dec_label_pc_10b94
  %v0_10b9c = load i32, i32* @r5, align 4
  %v1_10b9c = inttoptr i32 %v0_10b9c to i32*
  %v2_10b9c = load i32, i32* %v1_10b9c, align 4
  store i32 %v2_10b9c, i32* %r3.global-to-local, align 4
  %v1_10ba0 = add i32 %v0_10b9c, 4
  %v2_10ba0 = inttoptr i32 %v1_10ba0 to i32*
  %v3_10ba0 = load i32, i32* %v2_10ba0, align 4
  store i32 %v3_10ba0, i32* %r0.global-to-local, align 4
  %v1_10ba4 = add i32 %v2_10b9c, 13
  %v2_10ba4 = inttoptr i32 %v1_10ba4 to i8*
  %v3_10ba4 = load i8, i8* %v2_10ba4, align 1
  %v4_10ba4 = zext i8 %v3_10ba4 to i32
  store i32 %v4_10ba4, i32* %r2.global-to-local, align 4
  %v1_10ba8 = add i32 %v2_10b9c, 4
  %v2_10ba8 = inttoptr i32 %v1_10ba8 to i32*
  %v3_10ba8 = load i32, i32* %v2_10ba8, align 4
  store i32 %v3_10ba8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10bb0 = inttoptr i32 %v3_10ba8 to i32*
  %v5_10bb0 = call i32 @function_1322c(i32 %v3_10ba0, i32* %v4_10bb0, i32 %v4_10ba4, i32 16384)
  store i32 %v5_10bb0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10bb8 = load i32, i32* @r5, align 4
  %v1_10bb8 = add i32 %v0_10bb8, 4
  %v2_10bb8 = inttoptr i32 %v1_10bb8 to i32*
  %v3_10bb8 = load i32, i32* %v2_10bb8, align 4
  store i32 %v3_10bb8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10bc4 = call i32 @function_1322c(i32 %v3_10bb8, i32* bitcast ([3 x i8]* @global_var_150c8.33 to i32*), i32 2, i32 16384)
  store i32 %v5_10bc4, i32* %r0.global-to-local, align 4
  %v0_10bc8 = load i32, i32* @r5, align 4
  %v1_10bc8 = add i32 %v0_10bc8, 24
  %v2_10bc8 = inttoptr i32 %v1_10bc8 to i32*
  %v3_10bc8 = load i32, i32* %v2_10bc8, align 4
  store i32 %v3_10bc8, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_10bd0 = add i32 %v0_10bc8, 12
  %v3_10bd0 = inttoptr i32 %v2_10bd0 to i32*
  store i32 5, i32* %v3_10bd0, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10bd8:                               ; preds = %dec_label_pc_10994
  %v1_10bd8 = add i32 %v0_10994, 24
  %v2_10bd8 = inttoptr i32 %v1_10bd8 to i32*
  %v3_10bd8 = load i32, i32* %v2_10bd8, align 4
  store i32 %v3_10bd8, i32* %ip.global-to-local, align 4
  %v1_10bdc = add i32 %v3_10bd8, -1
  store i32 %v1_10bdc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10be0 = icmp eq i32 %v1_10bdc, 0
  store i1 %v2_10be0, i1* %cpsr_z.global-to-local, align 1
  %v5_10be4 = icmp sgt i32 %v1_10bdc, 0
  br i1 %v5_10be4, label %dec_label_pc_10c0c, label %dec_label_pc_10918.backedge.thread

dec_label_pc_10bec:                               ; preds = %bb334
  %v2_10bec = icmp ugt i8 %v3_10c10, 35
  store i1 %v2_10bec, i1* %cpsr_c.global-to-local, align 1
  %v7_10bec = icmp eq i8 %v3_10c10, 36
  store i1 %v7_10bec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bec, label %dec_label_pc_10c20, label %dec_label_pc_10bf4

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10bec
  %v2_10bf4 = icmp ugt i8 %v3_10c10, 34
  store i1 %v2_10bf4, i1* %cpsr_c.global-to-local, align 1
  %v7_10bf4 = icmp eq i8 %v3_10c10, 35
  store i1 %v7_10bf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bf4, label %dec_label_pc_10c20, label %dec_label_pc_10bfc

dec_label_pc_10bfc:                               ; preds = %dec_label_pc_10bf4
  %v2_10bfc = icmp ugt i8 %v3_10c10, 36
  store i1 %v2_10bfc, i1* %cpsr_c.global-to-local, align 1
  %v7_10bfc = icmp eq i8 %v3_10c10, 37
  store i1 %v7_10bfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bfc, label %dec_label_pc_10c20, label %dec_label_pc_10c04

dec_label_pc_10c04:                               ; preds = %dec_label_pc_10bfc
  %v1_10c04 = add i32 %v0_10c20, -1
  store i32 %v1_10c04, i32* %r0.global-to-local, align 4
  %v2_10c04 = icmp ne i32 %v0_10c20, 0
  store i1 %v2_10c04, i1* %cpsr_c.global-to-local, align 1
  %v7_10c04 = icmp eq i32 %v0_10c20, 1
  store i1 %v7_10c04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c04, label %dec_label_pc_10918.backedge.thread457, label %dec_label_pc_10c0c

dec_label_pc_10c0c:                               ; preds = %dec_label_pc_10bd8, %dec_label_pc_10c04
  %v0_10c20 = phi i32 [ %v1_10c04, %dec_label_pc_10c04 ], [ %v1_10bdc, %dec_label_pc_10bd8 ]
  %v2_10c0c = add i32 %v0_10c20, %v0_10994
  store i32 %v2_10c0c, i32* %r3.global-to-local, align 4
  %v1_10c10 = add i32 %v2_10c0c, 28
  %v2_10c10 = inttoptr i32 %v1_10c10 to i8*
  %v3_10c10 = load i8, i8* %v2_10c10, align 1
  %v4_10c10 = zext i8 %v3_10c10 to i32
  store i32 %v4_10c10, i32* %r3.global-to-local, align 4
  %v2_10c14 = icmp ugt i8 %v3_10c10, 61
  store i1 %v2_10c14, i1* %cpsr_c.global-to-local, align 1
  %v7_10c14 = icmp eq i8 %v3_10c10, 62
  store i1 %v7_10c14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c14, label %dec_label_pc_10c20, label %bb334

bb334:                                            ; preds = %dec_label_pc_10c0c
  %v3_10c18 = icmp ugt i8 %v3_10c10, 57
  store i1 %v3_10c18, i1* %cpsr_c.global-to-local, align 1
  %v8_10c18 = icmp eq i8 %v3_10c10, 58
  store i1 %v8_10c18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10c18, label %dec_label_pc_10c20, label %dec_label_pc_10bec

dec_label_pc_10c20:                               ; preds = %dec_label_pc_10c0c, %bb334, %dec_label_pc_10bfc, %dec_label_pc_10bf4, %dec_label_pc_10bec
  %v1_10c20 = add i32 %v0_10c20, 1
  store i32 %v1_10c20, i32* @r7, align 4
  %v2_10c24 = icmp eq i32 %v1_10c20, -1
  store i1 %v2_10c24, i1* %cpsr_c.global-to-local, align 1
  %v7_10c24 = icmp eq i32 %v0_10c20, -2
  store i1 %v7_10c24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c24, label %dec_label_pc_10918.backedge.thread457, label %dec_label_pc_10c2c

dec_label_pc_10c2c:                               ; preds = %dec_label_pc_10c20
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c2c = icmp eq i32 %v1_10c20, 0
  store i1 %v2_10c2c, i1* %cpsr_z.global-to-local, align 1
  %tmp335 = icmp slt i32 %v1_10c20, 1
  br i1 %tmp335, label %dec_label_pc_10aa0, label %dec_label_pc_10c34

dec_label_pc_10c34:                               ; preds = %dec_label_pc_10c2c
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10c38 = call i32 @function_11590(i32 25)
  store i32 %v2_108b0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_10c48 = call i32 @function_114ac(i32 25, i32* %v2_108b8)
  store i32 %v3_10c48, i32* %r0.global-to-local, align 4
  %v3_10c4c = load i8, i8* %stack_var_-52, align 1
  %v4_10c4c = sext i8 %v3_10c4c to i32
  store i32 %v4_10c4c, i32* %r2.global-to-local, align 4
  store i32 %v3_10c48, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c58 = load i32, i32* @r5, align 4
  %v1_10c58 = add i32 %v0_10c58, 4
  %v2_10c58 = inttoptr i32 %v1_10c58 to i32*
  %v3_10c58 = load i32, i32* %v2_10c58, align 4
  store i32 %v3_10c58, i32* %r0.global-to-local, align 4
  %v4_10c5c = inttoptr i32 %v3_10c48 to i32*
  %v5_10c5c = call i32 @function_1322c(i32 %v3_10c58, i32* %v4_10c5c, i32 %v4_10c4c, i32 16384)
  store i32 %v5_10c5c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c6c = load i32, i32* @r5, align 4
  %v1_10c6c = add i32 %v0_10c6c, 4
  %v2_10c6c = inttoptr i32 %v1_10c6c to i32*
  %v3_10c6c = load i32, i32* %v2_10c6c, align 4
  store i32 %v3_10c6c, i32* %r0.global-to-local, align 4
  %v5_10c70 = call i32 @function_1322c(i32 %v3_10c6c, i32* bitcast ([3 x i8]* @global_var_150c8.33 to i32*), i32 2, i32 16384)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10c78 = call i32 @function_114d8(i32 25)
  store i32 %v1_10c78, i32* %r0.global-to-local, align 4
  %v0_10c7c = load i32, i32* @r5, align 4
  %v1_10c7c = add i32 %v0_10c7c, 24
  %v2_10c7c = inttoptr i32 %v1_10c7c to i32*
  %v3_10c7c = load i32, i32* %v2_10c7c, align 4
  store i32 %v3_10c7c, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_10c84 = add i32 %v0_10c7c, 12
  %v3_10c84 = inttoptr i32 %v2_10c84 to i32*
  store i32 6, i32* %v3_10c84, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10c8c:                               ; preds = %dec_label_pc_10994
  %v1_10c8c = add i32 %v0_10994, 24
  %v2_10c8c = inttoptr i32 %v1_10c8c to i32*
  %v3_10c8c = load i32, i32* %v2_10c8c, align 4
  store i32 %v3_10c8c, i32* %ip.global-to-local, align 4
  %v1_10c90 = add i32 %v3_10c8c, -1
  store i32 %v1_10c90, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c94 = icmp eq i32 %v1_10c90, 0
  store i1 %v2_10c94, i1* %cpsr_z.global-to-local, align 1
  %v5_10c98 = icmp sgt i32 %v1_10c90, 0
  br i1 %v5_10c98, label %dec_label_pc_10d7c, label %dec_label_pc_10918.backedge.thread

dec_label_pc_10d5c:                               ; preds = %bb336
  %v2_10d5c = icmp ugt i8 %v3_10d80, 35
  store i1 %v2_10d5c, i1* %cpsr_c.global-to-local, align 1
  %v7_10d5c = icmp eq i8 %v3_10d80, 36
  store i1 %v7_10d5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d5c, label %dec_label_pc_10d90, label %dec_label_pc_10d64

dec_label_pc_10d64:                               ; preds = %dec_label_pc_10d5c
  %v2_10d64 = icmp ugt i8 %v3_10d80, 34
  store i1 %v2_10d64, i1* %cpsr_c.global-to-local, align 1
  %v7_10d64 = icmp eq i8 %v3_10d80, 35
  store i1 %v7_10d64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d64, label %dec_label_pc_10d90, label %dec_label_pc_10d6c

dec_label_pc_10d6c:                               ; preds = %dec_label_pc_10d64
  %v2_10d6c = icmp ugt i8 %v3_10d80, 36
  store i1 %v2_10d6c, i1* %cpsr_c.global-to-local, align 1
  %v7_10d6c = icmp eq i8 %v3_10d80, 37
  store i1 %v7_10d6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d6c, label %dec_label_pc_10d90, label %dec_label_pc_10d74

dec_label_pc_10d74:                               ; preds = %dec_label_pc_10d6c
  %v1_10d74 = add i32 %v0_10d90, -1
  store i32 %v1_10d74, i32* %r0.global-to-local, align 4
  %v2_10d74 = icmp ne i32 %v0_10d90, 0
  store i1 %v2_10d74, i1* %cpsr_c.global-to-local, align 1
  %v7_10d74 = icmp eq i32 %v0_10d90, 1
  store i1 %v7_10d74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d74, label %dec_label_pc_10918.backedge.thread457, label %dec_label_pc_10d7c

dec_label_pc_10d7c:                               ; preds = %dec_label_pc_10c8c, %dec_label_pc_10d74
  %v0_10d90 = phi i32 [ %v1_10d74, %dec_label_pc_10d74 ], [ %v1_10c90, %dec_label_pc_10c8c ]
  %v2_10d7c = add i32 %v0_10d90, %v0_10994
  store i32 %v2_10d7c, i32* %r3.global-to-local, align 4
  %v1_10d80 = add i32 %v2_10d7c, 28
  %v2_10d80 = inttoptr i32 %v1_10d80 to i8*
  %v3_10d80 = load i8, i8* %v2_10d80, align 1
  %v4_10d80 = zext i8 %v3_10d80 to i32
  store i32 %v4_10d80, i32* %r3.global-to-local, align 4
  %v2_10d84 = icmp ugt i8 %v3_10d80, 61
  store i1 %v2_10d84, i1* %cpsr_c.global-to-local, align 1
  %v7_10d84 = icmp eq i8 %v3_10d80, 62
  store i1 %v7_10d84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d84, label %dec_label_pc_10d90, label %bb336

bb336:                                            ; preds = %dec_label_pc_10d7c
  %v3_10d88 = icmp ugt i8 %v3_10d80, 57
  store i1 %v3_10d88, i1* %cpsr_c.global-to-local, align 1
  %v8_10d88 = icmp eq i8 %v3_10d80, 58
  store i1 %v8_10d88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10d88, label %dec_label_pc_10d90, label %dec_label_pc_10d5c

dec_label_pc_10d90:                               ; preds = %dec_label_pc_10d7c, %bb336, %dec_label_pc_10d6c, %dec_label_pc_10d64, %dec_label_pc_10d5c
  %v1_10d90 = add i32 %v0_10d90, 1
  store i32 %v1_10d90, i32* @r7, align 4
  %v2_10d94 = icmp eq i32 %v1_10d90, -1
  store i1 %v2_10d94, i1* %cpsr_c.global-to-local, align 1
  %v7_10d94 = icmp eq i32 %v0_10d90, -2
  store i1 %v7_10d94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d94, label %dec_label_pc_10918.backedge.thread457, label %dec_label_pc_10d9c

dec_label_pc_10d9c:                               ; preds = %dec_label_pc_10d90
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10d9c = icmp eq i32 %v1_10d90, 0
  store i1 %v2_10d9c, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v1_10d90, 1
  br i1 %tmp337, label %dec_label_pc_10aa0, label %dec_label_pc_10da4

dec_label_pc_10da4:                               ; preds = %dec_label_pc_10d9c
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10da8 = call i32 @function_11590(i32 26)
  store i32 %v2_108c4, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_10db8 = call i32 @function_114ac(i32 26, i32* nonnull %stack_var_-56)
  store i32 %v3_10db8, i32* %r0.global-to-local, align 4
  %v3_10dbc = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10dbc, i32* %r2.global-to-local, align 4
  store i32 %v3_10db8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10dc8 = load i32, i32* @r5, align 4
  %v1_10dc8 = add i32 %v0_10dc8, 4
  %v2_10dc8 = inttoptr i32 %v1_10dc8 to i32*
  %v3_10dc8 = load i32, i32* %v2_10dc8, align 4
  store i32 %v3_10dc8, i32* %r0.global-to-local, align 4
  %v4_10dcc = inttoptr i32 %v3_10db8 to i32*
  %v5_10dcc = call i32 @function_1322c(i32 %v3_10dc8, i32* %v4_10dcc, i32 %v3_10dbc, i32 16384)
  store i32 %v5_10dcc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ddc = load i32, i32* @r5, align 4
  %v1_10ddc = add i32 %v0_10ddc, 4
  %v2_10ddc = inttoptr i32 %v1_10ddc to i32*
  %v3_10ddc = load i32, i32* %v2_10ddc, align 4
  store i32 %v3_10ddc, i32* %r0.global-to-local, align 4
  %v5_10de0 = call i32 @function_1322c(i32 %v3_10ddc, i32* bitcast ([3 x i8]* @global_var_150c8.33 to i32*), i32 2, i32 16384)
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10de8 = call i32 @function_114d8(i32 26)
  store i32 %v1_10de8, i32* %r0.global-to-local, align 4
  %v0_10dec = load i32, i32* @r5, align 4
  %v1_10dec = add i32 %v0_10dec, 24
  %v2_10dec = inttoptr i32 %v1_10dec to i32*
  %v3_10dec = load i32, i32* %v2_10dec, align 4
  store i32 %v3_10dec, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_10df4 = add i32 %v0_10dec, 12
  %v3_10df4 = inttoptr i32 %v2_10df4 to i32*
  store i32 7, i32* %v3_10df4, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10dfc:                               ; preds = %dec_label_pc_10994
  %v1_10dfc = add i32 %v0_10994, 24
  %v2_10dfc = inttoptr i32 %v1_10dfc to i32*
  %v3_10dfc = load i32, i32* %v2_10dfc, align 4
  store i32 %v3_10dfc, i32* %ip.global-to-local, align 4
  %v1_10e00 = add i32 %v3_10dfc, -1
  store i32 %v1_10e00, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e04 = icmp eq i32 %v1_10e00, 0
  store i1 %v2_10e04, i1* %cpsr_z.global-to-local, align 1
  %v5_10e08 = icmp sgt i32 %v1_10e00, 0
  br i1 %v5_10e08, label %dec_label_pc_10e30, label %dec_label_pc_10918.backedge.thread

dec_label_pc_10e10:                               ; preds = %bb338
  %v2_10e10 = icmp ugt i8 %v3_10e34, 35
  store i1 %v2_10e10, i1* %cpsr_c.global-to-local, align 1
  %v7_10e10 = icmp eq i8 %v3_10e34, 36
  store i1 %v7_10e10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e10, label %dec_label_pc_10e44, label %dec_label_pc_10e18

dec_label_pc_10e18:                               ; preds = %dec_label_pc_10e10
  %v2_10e18 = icmp ugt i8 %v3_10e34, 34
  store i1 %v2_10e18, i1* %cpsr_c.global-to-local, align 1
  %v7_10e18 = icmp eq i8 %v3_10e34, 35
  store i1 %v7_10e18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e18, label %dec_label_pc_10e44, label %dec_label_pc_10e20

dec_label_pc_10e20:                               ; preds = %dec_label_pc_10e18
  %v2_10e20 = icmp ugt i8 %v3_10e34, 36
  store i1 %v2_10e20, i1* %cpsr_c.global-to-local, align 1
  %v7_10e20 = icmp eq i8 %v3_10e34, 37
  store i1 %v7_10e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e20, label %dec_label_pc_10e44, label %dec_label_pc_10e28

dec_label_pc_10e28:                               ; preds = %dec_label_pc_10e20
  %v1_10e28 = add i32 %v0_10e44, -1
  store i32 %v1_10e28, i32* %r0.global-to-local, align 4
  %v2_10e28 = icmp ne i32 %v0_10e44, 0
  store i1 %v2_10e28, i1* %cpsr_c.global-to-local, align 1
  %v7_10e28 = icmp eq i32 %v0_10e44, 1
  store i1 %v7_10e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e28, label %dec_label_pc_10918.backedge.thread457, label %dec_label_pc_10e30

dec_label_pc_10e30:                               ; preds = %dec_label_pc_10dfc, %dec_label_pc_10e28
  %v0_10e44 = phi i32 [ %v1_10e28, %dec_label_pc_10e28 ], [ %v1_10e00, %dec_label_pc_10dfc ]
  %v2_10e30 = add i32 %v0_10e44, %v0_10994
  store i32 %v2_10e30, i32* %r3.global-to-local, align 4
  %v1_10e34 = add i32 %v2_10e30, 28
  %v2_10e34 = inttoptr i32 %v1_10e34 to i8*
  %v3_10e34 = load i8, i8* %v2_10e34, align 1
  %v4_10e34 = zext i8 %v3_10e34 to i32
  store i32 %v4_10e34, i32* %r3.global-to-local, align 4
  %v2_10e38 = icmp ugt i8 %v3_10e34, 61
  store i1 %v2_10e38, i1* %cpsr_c.global-to-local, align 1
  %v7_10e38 = icmp eq i8 %v3_10e34, 62
  store i1 %v7_10e38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e38, label %dec_label_pc_10e44, label %bb338

bb338:                                            ; preds = %dec_label_pc_10e30
  %v3_10e3c = icmp ugt i8 %v3_10e34, 57
  store i1 %v3_10e3c, i1* %cpsr_c.global-to-local, align 1
  %v8_10e3c = icmp eq i8 %v3_10e34, 58
  store i1 %v8_10e3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e3c, label %dec_label_pc_10e44, label %dec_label_pc_10e10

dec_label_pc_10e44:                               ; preds = %dec_label_pc_10e30, %bb338, %dec_label_pc_10e20, %dec_label_pc_10e18, %dec_label_pc_10e10
  %v1_10e44 = add i32 %v0_10e44, 1
  store i32 %v1_10e44, i32* @r7, align 4
  %v2_10e48 = icmp eq i32 %v1_10e44, -1
  store i1 %v2_10e48, i1* %cpsr_c.global-to-local, align 1
  %v7_10e48 = icmp eq i32 %v0_10e44, -2
  store i1 %v7_10e48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e48, label %dec_label_pc_10918.backedge.thread457, label %dec_label_pc_10e50

dec_label_pc_10e50:                               ; preds = %dec_label_pc_10e44
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e50 = icmp eq i32 %v1_10e44, 0
  store i1 %v2_10e50, i1* %cpsr_z.global-to-local, align 1
  %tmp339 = icmp slt i32 %v1_10e44, 1
  br i1 %tmp339, label %dec_label_pc_10aa0, label %dec_label_pc_10e58

dec_label_pc_10e58:                               ; preds = %dec_label_pc_10e50
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10e5c = call i32 @function_11590(i32 27)
  store i32 %v2_108b0, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_10e6c = call i32 @function_114ac(i32 27, i32* %v2_108b8)
  store i32 %v3_10e6c, i32* %r0.global-to-local, align 4
  %v3_10e70 = load i8, i8* %stack_var_-52, align 1
  %v4_10e70 = sext i8 %v3_10e70 to i32
  store i32 %v4_10e70, i32* %r2.global-to-local, align 4
  store i32 %v3_10e6c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10e7c = load i32, i32* @r5, align 4
  %v1_10e7c = add i32 %v0_10e7c, 4
  %v2_10e7c = inttoptr i32 %v1_10e7c to i32*
  %v3_10e7c = load i32, i32* %v2_10e7c, align 4
  store i32 %v3_10e7c, i32* %r0.global-to-local, align 4
  %v4_10e80 = inttoptr i32 %v3_10e6c to i32*
  %v5_10e80 = call i32 @function_1322c(i32 %v3_10e7c, i32* %v4_10e80, i32 %v4_10e70, i32 16384)
  store i32 %v5_10e80, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10e90 = load i32, i32* @r5, align 4
  %v1_10e90 = add i32 %v0_10e90, 4
  %v2_10e90 = inttoptr i32 %v1_10e90 to i32*
  %v3_10e90 = load i32, i32* %v2_10e90, align 4
  store i32 %v3_10e90, i32* %r0.global-to-local, align 4
  %v5_10e94 = call i32 @function_1322c(i32 %v3_10e90, i32* bitcast ([3 x i8]* @global_var_150c8.33 to i32*), i32 2, i32 16384)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10e9c = call i32 @function_114d8(i32 27)
  store i32 %v1_10e9c, i32* %r0.global-to-local, align 4
  %v0_10ea0 = load i32, i32* @r5, align 4
  %v1_10ea0 = add i32 %v0_10ea0, 24
  %v2_10ea0 = inttoptr i32 %v1_10ea0 to i32*
  %v3_10ea0 = load i32, i32* %v2_10ea0, align 4
  store i32 %v3_10ea0, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_10ea8 = add i32 %v0_10ea0, 12
  %v3_10ea8 = inttoptr i32 %v2_10ea8 to i32*
  store i32 9, i32* %v3_10ea8, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10eb0:                               ; preds = %dec_label_pc_10994
  %v1_10eb0 = add i32 %v0_10994, 24
  %v2_10eb0 = inttoptr i32 %v1_10eb0 to i32*
  %v3_10eb0 = load i32, i32* %v2_10eb0, align 4
  store i32 %v3_10eb0, i32* %ip.global-to-local, align 4
  %v1_10eb4 = add i32 %v3_10eb0, -1
  store i32 %v1_10eb4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10eb8 = icmp eq i32 %v1_10eb4, 0
  store i1 %v2_10eb8, i1* %cpsr_z.global-to-local, align 1
  %v5_10ebc = icmp sgt i32 %v1_10eb4, 0
  br i1 %v5_10ebc, label %dec_label_pc_10ee4, label %dec_label_pc_10918.backedge.thread

dec_label_pc_10ec4:                               ; preds = %bb340
  %v2_10ec4 = icmp ugt i8 %v3_10ee8, 35
  store i1 %v2_10ec4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ec4 = icmp eq i8 %v3_10ee8, 36
  store i1 %v7_10ec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ec4, label %dec_label_pc_10ef8, label %dec_label_pc_10ecc

dec_label_pc_10ecc:                               ; preds = %dec_label_pc_10ec4
  %v2_10ecc = icmp ugt i8 %v3_10ee8, 34
  store i1 %v2_10ecc, i1* %cpsr_c.global-to-local, align 1
  %v7_10ecc = icmp eq i8 %v3_10ee8, 35
  store i1 %v7_10ecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ecc, label %dec_label_pc_10ef8, label %dec_label_pc_10ed4

dec_label_pc_10ed4:                               ; preds = %dec_label_pc_10ecc
  %v2_10ed4 = icmp ugt i8 %v3_10ee8, 36
  store i1 %v2_10ed4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ed4 = icmp eq i8 %v3_10ee8, 37
  store i1 %v7_10ed4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ed4, label %dec_label_pc_10ef8, label %dec_label_pc_10edc

dec_label_pc_10edc:                               ; preds = %dec_label_pc_10ed4
  %v1_10edc = add i32 %v0_10ef8, -1
  store i32 %v1_10edc, i32* %r0.global-to-local, align 4
  %v2_10edc = icmp ne i32 %v0_10ef8, 0
  store i1 %v2_10edc, i1* %cpsr_c.global-to-local, align 1
  %v7_10edc = icmp eq i32 %v0_10ef8, 1
  store i1 %v7_10edc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10edc, label %dec_label_pc_10918.backedge.thread457, label %dec_label_pc_10ee4

dec_label_pc_10ee4:                               ; preds = %dec_label_pc_10eb0, %dec_label_pc_10edc
  %v0_10ef8 = phi i32 [ %v1_10edc, %dec_label_pc_10edc ], [ %v1_10eb4, %dec_label_pc_10eb0 ]
  %v2_10ee4 = add i32 %v0_10ef8, %v0_10994
  store i32 %v2_10ee4, i32* %r3.global-to-local, align 4
  %v1_10ee8 = add i32 %v2_10ee4, 28
  %v2_10ee8 = inttoptr i32 %v1_10ee8 to i8*
  %v3_10ee8 = load i8, i8* %v2_10ee8, align 1
  %v4_10ee8 = zext i8 %v3_10ee8 to i32
  store i32 %v4_10ee8, i32* %r3.global-to-local, align 4
  %v2_10eec = icmp ugt i8 %v3_10ee8, 61
  store i1 %v2_10eec, i1* %cpsr_c.global-to-local, align 1
  %v7_10eec = icmp eq i8 %v3_10ee8, 62
  store i1 %v7_10eec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10eec, label %dec_label_pc_10ef8, label %bb340

bb340:                                            ; preds = %dec_label_pc_10ee4
  %v3_10ef0 = icmp ugt i8 %v3_10ee8, 57
  store i1 %v3_10ef0, i1* %cpsr_c.global-to-local, align 1
  %v8_10ef0 = icmp eq i8 %v3_10ee8, 58
  store i1 %v8_10ef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10ef0, label %dec_label_pc_10ef8, label %dec_label_pc_10ec4

dec_label_pc_10ef8:                               ; preds = %dec_label_pc_10ee4, %bb340, %dec_label_pc_10ed4, %dec_label_pc_10ecc, %dec_label_pc_10ec4
  %v1_10ef8 = add i32 %v0_10ef8, 1
  store i32 %v1_10ef8, i32* @r7, align 4
  %v2_10efc = icmp eq i32 %v1_10ef8, -1
  store i1 %v2_10efc, i1* %cpsr_c.global-to-local, align 1
  %v7_10efc = icmp eq i32 %v0_10ef8, -2
  store i1 %v7_10efc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10efc, label %dec_label_pc_10918.backedge.thread457, label %dec_label_pc_10f04

dec_label_pc_10f04:                               ; preds = %dec_label_pc_10ef8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10f04 = icmp eq i32 %v1_10ef8, 0
  store i1 %v2_10f04, i1* %cpsr_z.global-to-local, align 1
  %tmp341 = icmp slt i32 %v1_10ef8, 1
  br i1 %tmp341, label %dec_label_pc_10aa0, label %dec_label_pc_10f0c

dec_label_pc_10f0c:                               ; preds = %dec_label_pc_10f04
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_10f10 = call i32 @function_11590(i32 24)
  store i32 %v2_108c4, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_10f20 = call i32 @function_114ac(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_10f20, i32* %r0.global-to-local, align 4
  %v3_10f24 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10f24, i32* %r2.global-to-local, align 4
  store i32 %v3_10f20, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f30 = load i32, i32* @r5, align 4
  %v1_10f30 = add i32 %v0_10f30, 4
  %v2_10f30 = inttoptr i32 %v1_10f30 to i32*
  %v3_10f30 = load i32, i32* %v2_10f30, align 4
  store i32 %v3_10f30, i32* %r0.global-to-local, align 4
  %v4_10f34 = inttoptr i32 %v3_10f20 to i32*
  %v5_10f34 = call i32 @function_1322c(i32 %v3_10f30, i32* %v4_10f34, i32 %v3_10f24, i32 16384)
  store i32 %v5_10f34, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f44 = load i32, i32* @r5, align 4
  %v1_10f44 = add i32 %v0_10f44, 4
  %v2_10f44 = inttoptr i32 %v1_10f44 to i32*
  %v3_10f44 = load i32, i32* %v2_10f44, align 4
  store i32 %v3_10f44, i32* %r0.global-to-local, align 4
  %v5_10f48 = call i32 @function_1322c(i32 %v3_10f44, i32* bitcast ([3 x i8]* @global_var_150c8.33 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_10f50 = call i32 @function_114d8(i32 24)
  store i32 %v1_10f50, i32* %r0.global-to-local, align 4
  %v0_10f54 = load i32, i32* @r5, align 4
  %v1_10f54 = add i32 %v0_10f54, 24
  %v2_10f54 = inttoptr i32 %v1_10f54 to i32*
  %v3_10f54 = load i32, i32* %v2_10f54, align 4
  store i32 %v3_10f54, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_10f5c = add i32 %v0_10f54, 12
  %v3_10f5c = inttoptr i32 %v2_10f5c to i32*
  store i32 8, i32* %v3_10f5c, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10f64:                               ; preds = %dec_label_pc_10994
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10f68 = call i32 @function_11590(i32 30)
  store i32 %v2_108b0, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_10f78 = call i32 @function_114ac(i32 30, i32* %v2_108b8)
  %v3_10f7c = load i8, i8* %stack_var_-52, align 1
  %v4_10f7c = sext i8 %v3_10f7c to i32
  store i32 %v3_10f78, i32* %r2.global-to-local, align 4
  %v1_10f84 = add nsw i32 %v4_10f7c, -1
  store i32 %v1_10f84, i32* %r3.global-to-local, align 4
  %v0_10f88 = load i32, i32* @sl, align 4
  store i32 %v0_10f88, i32* %r0.global-to-local, align 4
  %v0_10f8c = load i32, i32* @r5, align 4
  %v1_10f8c = add i32 %v0_10f8c, 24
  %v2_10f8c = inttoptr i32 %v1_10f8c to i32*
  %v3_10f8c = load i32, i32* %v2_10f8c, align 4
  store i32 %v3_10f8c, i32* %r1.global-to-local, align 4
  %v4_10f90 = call i32 @function_12108(i32 %v0_10f88, i32 %v3_10f8c, i32 %v3_10f78, i32 %v1_10f84)
  %v2_10f94 = icmp eq i32 %v4_10f90, -1
  store i1 %v2_10f94, i1* %cpsr_c.global-to-local, align 1
  %v7_10f94 = icmp eq i32 %v4_10f90, -1
  store i1 %v7_10f94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_10f90, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_11180 = call i32 @function_114d8(i32 30)
  br i1 %v7_10f94, label %dec_label_pc_1117c, label %dec_label_pc_10fa0

dec_label_pc_10fa0:                               ; preds = %dec_label_pc_10f64
  store i32 %v1_11180, i32* %r0.global-to-local, align 4
  %v0_10fa8 = load i32, i32* @r5, align 4
  %v1_10fa8 = add i32 %v0_10fa8, 4
  %v2_10fa8 = inttoptr i32 %v1_10fa8 to i32*
  %v3_10fa8 = load i32, i32* %v2_10fa8, align 4
  store i32 %v3_10fa8, i32* %r0.global-to-local, align 4
  %v1_10fac = call i32 @function_129d8(i32 %v3_10fa8)
  store i32 %v1_10fac, i32* %r0.global-to-local, align 4
  %v0_10fb0 = load i32, i32* @r5, align 4
  %v1_10fb0 = add i32 %v0_10fb0, 284
  %v2_10fb0 = inttoptr i32 %v1_10fb0 to i8*
  %v3_10fb0 = load i8, i8* %v2_10fb0, align 1
  %v4_10fb0 = zext i8 %v3_10fb0 to i32
  %v1_10fb4 = add nuw nsw i32 %v4_10fb0, 1
  %v1_10fb8 = urem i32 %v1_10fb4, 256
  store i32 %v1_10fb8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_10fc0 = icmp ugt i32 %v1_10fb8, 9
  store i1 %v2_10fc0, i1* %cpsr_c.global-to-local, align 1
  %v7_10fc0 = icmp eq i32 %v1_10fb8, 10
  store i1 %v7_10fc0, i1* %cpsr_z.global-to-local, align 1
  %v2_10fc4 = add i32 %v0_10fb0, 4
  %v3_10fc4 = inttoptr i32 %v2_10fc4 to i32*
  store i32 -1, i32* %v3_10fc4, align 4
  %v0_10fc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_10fc8 = trunc i32 %v0_10fc8 to i8
  %v2_10fc8 = load i32, i32* @r5, align 4
  %v3_10fc8 = add i32 %v2_10fc8, 284
  %v4_10fc8 = inttoptr i32 %v3_10fc8 to i8*
  store i8 %v1_10fc8, i8* %v4_10fc8, align 1
  %v0_10fcc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10fcc, label %dec_label_pc_10fd0, label %dec_label_pc_112dc

dec_label_pc_10fd0:                               ; preds = %dec_label_pc_10fa0
  store i32 0, i32* @lr, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_10fd8 = load i32, i32* @r5, align 4
  %v1_10fd8 = add i32 %v0_10fd8, 24
  %v2_10fd8 = inttoptr i32 %v1_10fd8 to i32*
  %v3_10fd8 = load i32, i32* %v2_10fd8, align 4
  store i32 %v3_10fd8, i32* %ip.global-to-local, align 4
  %v3_10fdc = add i32 %v0_10fd8, 284
  %v4_10fdc = inttoptr i32 %v3_10fdc to i8*
  store i8 0, i8* %v4_10fdc, align 1
  %v0_10fe0 = load i32, i32* %r0.global-to-local, align 4
  %v1_10fe0 = load i32, i32* @r5, align 4
  %v2_10fe0 = add i32 %v1_10fe0, 12
  %v3_10fe0 = inttoptr i32 %v2_10fe0 to i32*
  store i32 %v0_10fe0, i32* %v3_10fe0, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_10fe8:                               ; preds = %.thread223, %dec_label_pc_11068, %dec_label_pc_10b0c, %dec_label_pc_10aa8, %dec_label_pc_112dc, %dec_label_pc_11218, %dec_label_pc_10f0c, %dec_label_pc_10e58, %dec_label_pc_10da4, %dec_label_pc_10c34, %dec_label_pc_10b9c, %dec_label_pc_10fd0
  %v0_10fe8 = load i32, i32* %ip.global-to-local, align 4
  %v1_10fe8 = load i32, i32* @r7, align 4
  %v2_10fe8 = sub i32 %v0_10fe8, %v1_10fe8
  %v3_10fe8 = icmp uge i32 %v0_10fe8, %v1_10fe8
  store i1 %v3_10fe8, i1* %cpsr_c.global-to-local, align 1
  %v4_10fe8 = xor i32 %v1_10fe8, %v0_10fe8
  %v5_10fe8 = xor i32 %v2_10fe8, %v0_10fe8
  %v6_10fe8 = and i32 %v5_10fe8, %v4_10fe8
  %v7_10fe8 = icmp slt i32 %v6_10fe8, 0
  %v8_10fe8 = icmp slt i32 %v2_10fe8, 0
  %v9_10fe8 = icmp eq i32 %v0_10fe8, %v1_10fe8
  store i1 %v9_10fe8, i1* %cpsr_z.global-to-local, align 1
  %v2_10fec = xor i1 %v8_10fe8, %v7_10fe8
  %v0_10fe8.v1_10fe8 = select i1 %v2_10fec, i32 %v0_10fe8, i32 %v1_10fe8
  store i32 %v0_10fe8.v1_10fe8, i32* %r1.global-to-local, align 4
  %v2_10ff4 = sub i32 %v0_10fe8, %v0_10fe8.v1_10fe8
  store i32 %v2_10ff4, i32* @r2, align 4
  %v1_10ff8 = load i32, i32* @r5, align 4
  %v2_10ff8 = add i32 %v1_10ff8, 24
  %v3_10ff8 = inttoptr i32 %v2_10ff8 to i32*
  store i32 %v2_10ff4, i32* %v3_10ff8, align 4
  %v0_10ffc = load i32, i32* @sl, align 4
  %v1_10ffc = load i32, i32* %r1.global-to-local, align 4
  %v2_10ffc = add i32 %v1_10ffc, %v0_10ffc
  store i32 %v2_10ffc, i32* @r1, align 4
  store i32 %v0_10ffc, i32* @r0, align 4
  %v3_11004 = call i32 @function_12fd0(i32 %v0_10ffc, i32 %v2_10ffc, i32 %v2_10ff4)
  store i32 %v3_11004, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10994

dec_label_pc_1100c:                               ; preds = %dec_label_pc_10994
  %v1_1100c = add i32 %v0_10994, 24
  %v2_1100c = inttoptr i32 %v1_1100c to i32*
  %v3_1100c = load i32, i32* %v2_1100c, align 4
  store i32 %v3_1100c, i32* %ip.global-to-local, align 4
  %v1_11010 = add i32 %v3_1100c, -1
  store i32 %v1_11010, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11014 = icmp eq i32 %v1_11010, 0
  store i1 %v2_11014, i1* %cpsr_z.global-to-local, align 1
  %v5_11018 = icmp sgt i32 %v1_11010, 0
  br i1 %v5_11018, label %dec_label_pc_11040, label %dec_label_pc_10918.backedge.thread

dec_label_pc_11020:                               ; preds = %bb344
  %v2_11020 = icmp ugt i8 %v3_11044, 35
  store i1 %v2_11020, i1* %cpsr_c.global-to-local, align 1
  %v7_11020 = icmp eq i8 %v3_11044, 36
  store i1 %v7_11020, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11020, label %dec_label_pc_11054, label %dec_label_pc_11028

dec_label_pc_11028:                               ; preds = %dec_label_pc_11020
  %v2_11028 = icmp ugt i8 %v3_11044, 34
  store i1 %v2_11028, i1* %cpsr_c.global-to-local, align 1
  %v7_11028 = icmp eq i8 %v3_11044, 35
  store i1 %v7_11028, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11028, label %dec_label_pc_11054, label %dec_label_pc_11030

dec_label_pc_11030:                               ; preds = %dec_label_pc_11028
  %v2_11030 = icmp ugt i8 %v3_11044, 36
  store i1 %v2_11030, i1* %cpsr_c.global-to-local, align 1
  %v7_11030 = icmp eq i8 %v3_11044, 37
  store i1 %v7_11030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11030, label %dec_label_pc_11054, label %dec_label_pc_11038

dec_label_pc_11038:                               ; preds = %dec_label_pc_11030
  %v1_11038 = add i32 %v0_11054, -1
  store i32 %v1_11038, i32* %r0.global-to-local, align 4
  %v2_11038 = icmp ne i32 %v0_11054, 0
  store i1 %v2_11038, i1* %cpsr_c.global-to-local, align 1
  %v7_11038 = icmp eq i32 %v0_11054, 1
  store i1 %v7_11038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11038, label %dec_label_pc_10918.backedge.thread457, label %dec_label_pc_11040

dec_label_pc_11040:                               ; preds = %dec_label_pc_1100c, %dec_label_pc_11038
  %v0_11054 = phi i32 [ %v1_11038, %dec_label_pc_11038 ], [ %v1_11010, %dec_label_pc_1100c ]
  %v2_11040 = add i32 %v0_11054, %v0_10994
  store i32 %v2_11040, i32* %r3.global-to-local, align 4
  %v1_11044 = add i32 %v2_11040, 28
  %v2_11044 = inttoptr i32 %v1_11044 to i8*
  %v3_11044 = load i8, i8* %v2_11044, align 1
  %v4_11044 = zext i8 %v3_11044 to i32
  store i32 %v4_11044, i32* %r3.global-to-local, align 4
  %v2_11048 = icmp ugt i8 %v3_11044, 61
  store i1 %v2_11048, i1* %cpsr_c.global-to-local, align 1
  %v7_11048 = icmp eq i8 %v3_11044, 62
  store i1 %v7_11048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11048, label %dec_label_pc_11054, label %bb344

bb344:                                            ; preds = %dec_label_pc_11040
  %v3_1104c = icmp ugt i8 %v3_11044, 57
  store i1 %v3_1104c, i1* %cpsr_c.global-to-local, align 1
  %v8_1104c = icmp eq i8 %v3_11044, 58
  store i1 %v8_1104c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1104c, label %dec_label_pc_11054, label %dec_label_pc_11020

dec_label_pc_11054:                               ; preds = %dec_label_pc_11040, %bb344, %dec_label_pc_11030, %dec_label_pc_11028, %dec_label_pc_11020
  %v1_11054 = add i32 %v0_11054, 1
  store i32 %v1_11054, i32* @r7, align 4
  %v2_11058 = icmp eq i32 %v1_11054, -1
  store i1 %v2_11058, i1* %cpsr_c.global-to-local, align 1
  %v7_11058 = icmp eq i32 %v0_11054, -2
  store i1 %v7_11058, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11058, label %dec_label_pc_10918.backedge.thread457, label %dec_label_pc_11060

dec_label_pc_11060:                               ; preds = %dec_label_pc_11054
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11060 = icmp eq i32 %v1_11054, 0
  store i1 %v2_11060, i1* %cpsr_z.global-to-local, align 1
  %tmp345 = icmp slt i32 %v1_11054, 1
  br i1 %tmp345, label %dec_label_pc_10aa0, label %dec_label_pc_11068

dec_label_pc_11068:                               ; preds = %dec_label_pc_11060
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_1106c = call i32 @function_11590(i32 28)
  store i32 %v2_108b0, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_1107c = call i32 @function_114ac(i32 28, i32* %v2_108b8)
  store i32 %v3_1107c, i32* %r0.global-to-local, align 4
  %v3_11080 = load i8, i8* %stack_var_-52, align 1
  %v4_11080 = sext i8 %v3_11080 to i32
  store i32 %v4_11080, i32* %r2.global-to-local, align 4
  store i32 %v3_1107c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1108c = load i32, i32* @r5, align 4
  %v1_1108c = add i32 %v0_1108c, 4
  %v2_1108c = inttoptr i32 %v1_1108c to i32*
  %v3_1108c = load i32, i32* %v2_1108c, align 4
  store i32 %v3_1108c, i32* %r0.global-to-local, align 4
  %v4_11090 = inttoptr i32 %v3_1107c to i32*
  %v5_11090 = call i32 @function_1322c(i32 %v3_1108c, i32* %v4_11090, i32 %v4_11080, i32 16384)
  store i32 %v5_11090, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_110a0 = load i32, i32* @r5, align 4
  %v1_110a0 = add i32 %v0_110a0, 4
  %v2_110a0 = inttoptr i32 %v1_110a0 to i32*
  %v3_110a0 = load i32, i32* %v2_110a0, align 4
  store i32 %v3_110a0, i32* %r0.global-to-local, align 4
  %v5_110a4 = call i32 @function_1322c(i32 %v3_110a0, i32* bitcast ([3 x i8]* @global_var_150c8.33 to i32*), i32 2, i32 16384)
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_110ac = call i32 @function_114d8(i32 28)
  store i32 %v1_110ac, i32* %r0.global-to-local, align 4
  %v0_110b0 = load i32, i32* @r5, align 4
  %v1_110b0 = add i32 %v0_110b0, 24
  %v2_110b0 = inttoptr i32 %v1_110b0 to i32*
  %v3_110b0 = load i32, i32* %v2_110b0, align 4
  store i32 %v3_110b0, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_110b8 = add i32 %v0_110b0, 12
  %v3_110b8 = inttoptr i32 %v2_110b8 to i32*
  store i32 10, i32* %v3_110b8, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_110c0:                               ; preds = %dec_label_pc_10a18
  store i32 ptrtoint (i32* @global_var_15232.264 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_110cc, i32* @r0, align 4
  %v3_110d0 = call i32 @function_12fc0(i32 %v2_110cc, i32 ptrtoint (i32* @global_var_15232.264 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_110dc, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_15229.266 to i32), i32* @r1, align 4
  %v3_110e4 = call i32 @function_12fc0(i32 %v2_110dc, i32 ptrtoint (i32* @global_var_15229.266 to i32), i32 9)
  store i32 %v3_110e4, i32* %r0.global-to-local, align 4
  %v0_110e8 = load i32, i32* @r5, align 4
  %v1_110e8 = add i32 %v0_110e8, 24
  %v2_110e8 = inttoptr i32 %v1_110e8 to i32*
  %v3_110e8 = load i32, i32* %v2_110e8, align 4
  store i32 %v3_110e8, i32* %ip.global-to-local, align 4
  %v0_110ec = load i32, i32* @r6, align 4
  %v1_110ec = add i32 %v0_110ec, 2
  store i32 %v1_110ec, i32* %r2.global-to-local, align 4
  %v0_110f0 = load i32, i32* @sl, align 4
  %v2_110f0 = add i32 %v0_110f0, %v3_110e8
  store i32 %v2_110f0, i32* %r3.global-to-local, align 4
  %v3_110f4 = icmp uge i32 %v2_110f0, %v1_110ec
  store i1 %v3_110f4, i1* %cpsr_c.global-to-local, align 1
  %v9_110f4 = icmp eq i32 %v2_110f0, %v1_110ec
  store i1 %v9_110f4, i1* %cpsr_z.global-to-local, align 1
  %v2_110f8 = xor i1 %v3_110f4, true
  %v3_110f8 = or i1 %v9_110f4, %v2_110f8
  br i1 %v3_110f8, label %dec_label_pc_110c0.dec_label_pc_10a90.loopexit_crit_edge, label %dec_label_pc_110fc

dec_label_pc_110c0.dec_label_pc_10a90.loopexit_crit_edge: ; preds = %dec_label_pc_110c0
  %v0_10a90.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10a90

dec_label_pc_110fc:                               ; preds = %dec_label_pc_110c0
  %v0_110fc = load i32, i32* @r4, align 4
  %v1_110fc = add i32 %v0_110fc, 1
  %v2_110fc = inttoptr i32 %v1_110fc to i8*
  %v3_110fc = load i8, i8* %v2_110fc, align 1
  %v4_110fc = zext i8 %v3_110fc to i32
  store i32 %v4_110fc, i32* %r3.global-to-local, align 4
  %v2_11100 = icmp ugt i8 %v3_110fc, 30
  store i1 %v2_11100, i1* %cpsr_c.global-to-local, align 1
  %v7_11100 = icmp eq i8 %v3_110fc, 31
  store i1 %v7_11100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11100, label %dec_label_pc_1128c, label %dec_label_pc_11108

dec_label_pc_11108:                               ; preds = %dec_label_pc_110fc
  %v1_11108 = add i32 %v0_110fc, -1
  %v2_11108 = inttoptr i32 %v1_11108 to i8*
  %v3_11108 = load i8, i8* %v2_11108, align 1
  %v4_11108 = zext i8 %v3_11108 to i32
  store i32 %v4_11108, i32* %r3.global-to-local, align 4
  %v2_1110c = icmp ugt i8 %v3_11108, -4
  store i1 %v2_1110c, i1* %cpsr_c.global-to-local, align 1
  %v7_1110c = icmp eq i8 %v3_11108, -3
  store i1 %v7_1110c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1110c, label %.thread75, label %dec_label_pc_1111c

.thread75:                                        ; preds = %dec_label_pc_11108
  store i32 -4, i32* %r2.global-to-local, align 4
  store i8 -4, i8* %v2_11108, align 1
  %v0_11118.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11118.pr.pr, label %dec_label_pc_10a2c, label %.thread75.dec_label_pc_1111c_crit_edge

.thread75.dec_label_pc_1111c_crit_edge:           ; preds = %.thread75
  %v0_1111c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1111c

dec_label_pc_1111c:                               ; preds = %.thread75.dec_label_pc_1111c_crit_edge, %dec_label_pc_11108
  %v0_1111c = phi i32 [ %v0_1111c.pre, %.thread75.dec_label_pc_1111c_crit_edge ], [ %v4_11108, %dec_label_pc_11108 ]
  %v2_1111c = icmp ugt i32 %v0_1111c, 250
  store i1 %v2_1111c, i1* %cpsr_c.global-to-local, align 1
  %v7_1111c = icmp eq i32 %v0_1111c, 251
  store i1 %v7_1111c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1111c, label %bb346, label %dec_label_pc_10a2c

bb346:                                            ; preds = %dec_label_pc_1111c
  %v1_11120 = load i32, i32* %r8.global-to-local, align 4
  %v2_11120 = trunc i32 %v1_11120 to i8
  %v3_11120 = load i32, i32* @r4, align 4
  %v4_11120 = add i32 %v3_11120, -1
  %v5_11120 = inttoptr i32 %v4_11120 to i8*
  store i8 %v2_11120, i8* %v5_11120, align 1
  br label %dec_label_pc_10a2c

dec_label_pc_11128:                               ; preds = %dec_label_pc_10b6c, %dec_label_pc_10b48, %dec_label_pc_10b88
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_1112c = call i32 @function_11590(i32 31)
  store i32 %v2_108b0, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_1113c = call i32 @function_114ac(i32 31, i32* %v2_108b8)
  %v3_11140 = load i8, i8* %stack_var_-52, align 1
  %v4_11140 = sext i8 %v3_11140 to i32
  store i32 %v3_1113c, i32* %r2.global-to-local, align 4
  %v1_11148 = add nsw i32 %v4_11140, -1
  store i32 %v1_11148, i32* %r3.global-to-local, align 4
  %v0_1114c = load i32, i32* @sl, align 4
  store i32 %v0_1114c, i32* %r0.global-to-local, align 4
  %v0_11150 = load i32, i32* @r5, align 4
  %v1_11150 = add i32 %v0_11150, 24
  %v2_11150 = inttoptr i32 %v1_11150 to i32*
  %v3_11150 = load i32, i32* %v2_11150, align 4
  store i32 %v3_11150, i32* %r1.global-to-local, align 4
  %v4_11154 = call i32 @function_12108(i32 %v0_1114c, i32 %v3_11150, i32 %v3_1113c, i32 %v1_11148)
  store i32 %v4_11154, i32* %r0.global-to-local, align 4
  %v1_11158 = add i32 %v4_11154, 1
  store i32 %v1_11158, i32* @r7, align 4
  %v2_11158 = icmp eq i32 %v4_11154, -1
  store i1 %v2_11158, i1* %cpsr_c.global-to-local, align 1
  %v7_11158 = icmp eq i32 %v1_11158, 0
  store i1 %v7_11158, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11158, label %thread-pre-split78, label %bb347

bb347:                                            ; preds = %dec_label_pc_11128
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split78

thread-pre-split78:                               ; preds = %dec_label_pc_11128, %bb347
  %v0_11160 = phi i1 [ false, %bb347 ], [ true, %dec_label_pc_11128 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_11160, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_112f4 = call i32 @function_114d8(i32 31)
  store i32 %v1_112f4, i32* %r0.global-to-local, align 4
  br i1 %v0_11160, label %dec_label_pc_112f0, label %dec_label_pc_11168

dec_label_pc_11168:                               ; preds = %thread-pre-split78
  %v0_11170 = load i32, i32* @r7, align 4
  %v3_11170 = icmp eq i32 %v0_11170, -1
  store i1 %v3_11170, i1* %cpsr_c.global-to-local, align 1
  %v8_11170 = icmp eq i32 %v0_11170, -1
  store i1 %v8_11170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11170, label %dec_label_pc_10914.loopexit, label %dec_label_pc_10b94

dec_label_pc_1117c:                               ; preds = %dec_label_pc_10f64
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_11188 = call i32 @function_11590(i32 29)
  store i32 %v2_108b0, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_11198 = call i32 @function_114ac(i32 29, i32* nonnull %v2_108b8)
  store i32 %v3_11198, i32* %r0.global-to-local, align 4
  %v3_1119c = load i8, i8* %stack_var_-52, align 1
  %v4_1119c = sext i8 %v3_1119c to i32
  store i32 %v3_11198, i32* %r2.global-to-local, align 4
  %v1_111a4 = add nsw i32 %v4_1119c, -1
  store i32 %v1_111a4, i32* %r3.global-to-local, align 4
  %v0_111a8 = load i32, i32* @r5, align 4
  %v1_111a8 = add i32 %v0_111a8, 24
  %v2_111a8 = inttoptr i32 %v1_111a8 to i32*
  %v3_111a8 = load i32, i32* %v2_111a8, align 4
  store i32 %v3_111a8, i32* %r1.global-to-local, align 4
  %v0_111ac = load i32, i32* @sl, align 4
  store i32 %v0_111ac, i32* %r0.global-to-local, align 4
  %v4_111b0 = call i32 @function_12108(i32 %v0_111ac, i32 %v3_111a8, i32 %v3_11198, i32 %v1_111a4)
  %sext6 = mul i32 %v4_111b0, 16777216
  %v1_111b4 = sdiv i32 %sext6, 16777216
  store i32 %v1_111b4, i32* @r7, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_111bc = call i32 @function_114d8(i32 29)
  store i32 %v1_111bc, i32* %r0.global-to-local, align 4
  %v0_111c0 = load i32, i32* @r7, align 4
  %v2_111c0 = icmp eq i32 %v0_111c0, -1
  store i1 %v2_111c0, i1* %cpsr_c.global-to-local, align 1
  %v7_111c0 = icmp eq i32 %v0_111c0, -1
  store i1 %v7_111c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_111c0, label %dec_label_pc_10914.loopexit, label %dec_label_pc_111c8

dec_label_pc_111c8:                               ; preds = %dec_label_pc_1117c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_111c8 = icmp eq i32 %v0_111c0, 0
  store i1 %v2_111c8, i1* %cpsr_z.global-to-local, align 1
  %tmp348 = icmp slt i32 %v0_111c0, 1
  br i1 %tmp348, label %dec_label_pc_10aa0, label %dec_label_pc_111d0

dec_label_pc_111d0:                               ; preds = %dec_label_pc_111c8
  %v0_111d0 = load i32, i32* @r5, align 4
  %v1_111d0 = add i32 %v0_111d0, 21
  %v2_111d0 = inttoptr i32 %v1_111d0 to i8*
  %v3_111d0 = load i8, i8* %v2_111d0, align 1
  %v4_111d0 = zext i8 %v3_111d0 to i32
  store i32 %v4_111d0, i32* %r3.global-to-local, align 4
  %v1_111d4 = add i32 %v0_111d0, 20
  %v2_111d4 = inttoptr i32 %v1_111d4 to i8*
  %v3_111d4 = load i8, i8* %v2_111d4, align 1
  %v4_111d4 = zext i8 %v3_111d4 to i32
  store i32 %v4_111d4, i32* %r2.global-to-local, align 4
  %v1_111d8 = add i32 %v0_111d0, 16
  %v2_111d8 = inttoptr i32 %v1_111d8 to i32*
  %v3_111d8 = load i32, i32* %v2_111d8, align 4
  store i32 %v3_111d8, i32* %r1.global-to-local, align 4
  %v4_111dc = mul nuw nsw i32 %v4_111d0, 256
  %v5_111dc = or i32 %v4_111d4, %v4_111dc
  store i32 %v5_111dc, i32* %r2.global-to-local, align 4
  %v1_111e0 = and i32 %v4_111d4, 128
  %v2_111e0 = icmp ne i32 %v1_111e0, 0
  store i1 %v2_111e0, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_111d0, i32* %r3.global-to-local, align 4
  store i32 %v3_111d8, i32* %stack_var_-56, align 4
  store i32 %v5_111dc, i32* %stack_var_-38, align 4
  %v1_111f0 = inttoptr i32 %v0_111d0 to i32*
  %v2_111f0 = load i32, i32* %v1_111f0, align 4
  store i32 %v2_111f0, i32* %r8.global-to-local, align 4
  %v0_111f4 = call i32 @function_12a04()
  store i32 %v0_111f4, i32* %r0.global-to-local, align 4
  %v7_111f8 = icmp eq i32 %v0_111f4, -1
  %.359 = zext i1 %v7_111f8 to i32
  store i32 %.359, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11204 = icmp eq i32 %v0_111f4, 0
  store i1 %v2_11204, i1* %cpsr_z.global-to-local, align 1
  %tmp351 = icmp slt i32 %v0_111f4, 1
  br i1 %tmp351, label %bb352, label %.thread81

.thread81:                                        ; preds = %dec_label_pc_111d0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11218

bb352:                                            ; preds = %dec_label_pc_111d0
  store i32 %.359, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11210 = icmp eq i1 %v7_111f8, false
  store i1 %v2_11210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11210, label %dec_label_pc_11340, label %dec_label_pc_11218

dec_label_pc_11218:                               ; preds = %.thread81, %bb352
  %v0_11218 = load i32, i32* @r5, align 4
  %v1_11218 = add i32 %v0_11218, 4
  %v2_11218 = inttoptr i32 %v1_11218 to i32*
  %v3_11218 = load i32, i32* %v2_11218, align 4
  store i32 %v3_11218, i32* %r0.global-to-local, align 4
  %v1_1121c = call i32 @function_129d8(i32 %v3_11218)
  store i32 %v1_1121c, i32* %r0.global-to-local, align 4
  %v0_11220 = load i32, i32* @r5, align 4
  %v1_11220 = add i32 %v0_11220, 24
  %v2_11220 = inttoptr i32 %v1_11220 to i32*
  %v3_11220 = load i32, i32* %v2_11220, align 4
  store i32 %v3_11220, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_11228 = load i32, i32* @r4, align 4
  %v2_11228 = add i32 %v0_11220, 4
  %v3_11228 = inttoptr i32 %v2_11228 to i32*
  store i32 %v0_11228, i32* %v3_11228, align 4
  %v0_1122c = load i32, i32* %r2.global-to-local, align 4
  %v1_1122c = load i32, i32* @r5, align 4
  %v2_1122c = add i32 %v1_1122c, 12
  %v3_1122c = inttoptr i32 %v2_1122c to i32*
  store i32 %v0_1122c, i32* %v3_1122c, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_11234:                               ; preds = %dec_label_pc_10930
  br i1 %v2_10954, label %dec_label_pc_113f4, label %dec_label_pc_11238

dec_label_pc_11238:                               ; preds = %dec_label_pc_11234
  %v3_11238 = icmp eq i32 %v5_10950, -1
  store i1 %v3_11238, i1* %cpsr_c.global-to-local, align 1
  %v8_11238 = icmp eq i32 %v5_10950, -1
  store i1 %v8_11238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11238, label %dec_label_pc_11240, label %dec_label_pc_1097c

dec_label_pc_11240:                               ; preds = %dec_label_pc_11238
  %v0_11240 = load i32, i32* @sb, align 4
  %v1_11240 = inttoptr i32 %v0_11240 to i32*
  %v2_11240 = load i32, i32* %v1_11240, align 4
  store i32 %v2_11240, i32* %r3.global-to-local, align 4
  %v2_11244 = icmp ugt i32 %v2_11240, 10
  store i1 %v2_11244, i1* %cpsr_c.global-to-local, align 1
  %v7_11244 = icmp eq i32 %v2_11240, 11
  store i1 %v7_11244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11244, label %dec_label_pc_10764, label %dec_label_pc_1124c

dec_label_pc_1124c:                               ; preds = %dec_label_pc_11240, %dec_label_pc_113f4
  %v0_1124c = load i32, i32* @r5, align 4
  %v1_1124c = add i32 %v0_1124c, 4
  %v2_1124c = inttoptr i32 %v1_1124c to i32*
  %v3_1124c = load i32, i32* %v2_1124c, align 4
  store i32 %v3_1124c, i32* %r0.global-to-local, align 4
  %v1_11250 = call i32 @function_129d8(i32 %v3_1124c)
  store i32 %v1_11250, i32* %r0.global-to-local, align 4
  %v0_11254 = load i32, i32* @r5, align 4
  %v1_11254 = add i32 %v0_11254, 284
  %v2_11254 = inttoptr i32 %v1_11254 to i8*
  %v3_11254 = load i8, i8* %v2_11254, align 1
  %v4_11254 = zext i8 %v3_11254 to i32
  %v1_11258 = add nuw nsw i32 %v4_11254, 1
  %v1_1125c = urem i32 %v1_11258, 256
  store i32 %v1_1125c, i32* %r3.global-to-local, align 4
  %v2_11260 = icmp ugt i32 %v1_1125c, 8
  store i1 %v2_11260, i1* %cpsr_c.global-to-local, align 1
  %v7_11260 = icmp eq i32 %v1_1125c, 9
  store i1 %v7_11260, i1* %cpsr_z.global-to-local, align 1
  %v2_11264 = xor i1 %v7_11260, true
  %v3_11264 = and i1 %v2_11260, %v2_11264
  br i1 %v3_11264, label %bb353, label %bb354

bb353:                                            ; preds = %dec_label_pc_1124c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb354

bb354:                                            ; preds = %dec_label_pc_1124c, %bb353
  store i32 -1, i32* @r4, align 4
  %v1_1126c = trunc i32 %v1_11258 to i8
  store i8 %v1_1126c, i8* %v2_11254, align 1
  %v0_11270 = load i32, i32* @r4, align 4
  %v1_11270 = load i32, i32* @r5, align 4
  %v2_11270 = add i32 %v1_11270, 4
  %v3_11270 = inttoptr i32 %v2_11270 to i32*
  store i32 %v0_11270, i32* %v3_11270, align 4
  %v0_11274 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11274 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_11274 = xor i1 %v1_11274, true
  %v3_11274 = and i1 %v0_11274, %v2_11274
  br i1 %v3_11274, label %bb355, label %.thread228

bb355:                                            ; preds = %bb354
  %v4_11274 = load i32, i32* %r0.global-to-local, align 4
  %v5_11274 = load i32, i32* @r5, align 4
  %v6_11274 = add i32 %v5_11274, 12
  %v7_11274 = inttoptr i32 %v6_11274 to i32*
  store i32 %v4_11274, i32* %v7_11274, align 4
  %v4_11278 = load i32, i32* %r0.global-to-local, align 4
  %v5_11278 = trunc i32 %v4_11278 to i8
  %v6_11278 = load i32, i32* @r5, align 4
  %v7_11278 = add i32 %v6_11278, 284
  %v8_11278 = inttoptr i32 %v7_11278 to i8*
  store i8 %v5_11278, i8* %v8_11278, align 1
  %v0_1127c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_1127c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread228

.thread228:                                       ; preds = %bb354, %bb355
  %v1_1127c = phi i1 [ %v1_1127c.pre, %bb355 ], [ %v1_11274, %bb354 ]
  %v0_1127c = phi i1 [ %v0_1127c.pre, %bb355 ], [ %v0_11274, %bb354 ]
  %v2_1127c = xor i1 %v1_1127c, true
  %v3_1127c = and i1 %v0_1127c, %v2_1127c
  br i1 %v3_1127c, label %dec_label_pc_10764, label %dec_label_pc_11280

dec_label_pc_11280:                               ; preds = %.thread228
  %v0_11280 = load i32, i32* @r5, align 4
  store i32 %v0_11280, i32* @r0, align 4
  %v0_11284 = call i32 @function_fa54()
  store i32 %v0_11284, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10764

dec_label_pc_1128c:                               ; preds = %dec_label_pc_110fc
  store i32 %v2_110cc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_1129c = add i32 %v0_110e8, 4
  %v2_1129c = inttoptr i32 %v1_1129c to i32*
  %v3_1129c = load i32, i32* %v2_1129c, align 4
  store i32 %v3_1129c, i32* %r0.global-to-local, align 4
  %v5_112a0 = call i32 @function_1322c(i32 %v3_1129c, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_112a0, i32* %r0.global-to-local, align 4
  store i32 %v2_106f8, i32* %r1.global-to-local, align 4
  %v0_112a8 = load i32, i32* @r5, align 4
  %v1_112a8 = add i32 %v0_112a8, 4
  %v2_112a8 = inttoptr i32 %v1_112a8 to i32*
  %v3_112a8 = load i32, i32* %v2_112a8, align 4
  store i32 %v3_112a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10a70

dec_label_pc_112b8:                               ; preds = %dec_label_pc_10920
  store i32 %.pre, i32* @r0, align 4
  %v1_112c0 = add i32 %v0_112b8, 92
  store i32 %v1_112c0, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_112c8 = call i32 @function_12fd0(i32 %.pre, i32 %v1_112c0, i32 192)
  store i32 %v3_112c8, i32* %r0.global-to-local, align 4
  %v0_112cc = load i32, i32* @r5, align 4
  %v1_112cc = add i32 %v0_112cc, 24
  %v2_112cc = inttoptr i32 %v1_112cc to i32*
  %v3_112cc = load i32, i32* %v2_112cc, align 4
  store i32 %v3_112cc, i32* %r3.global-to-local, align 4
  %v1_112d0 = add i32 %v3_112cc, -64
  store i32 %v1_112d0, i32* %ip.global-to-local, align 4
  store i32 %v1_112d0, i32* %v2_112cc, align 4
  br label %dec_label_pc_10930

dec_label_pc_112dc:                               ; preds = %dec_label_pc_10fa0
  %v0_112dc = load i32, i32* @r5, align 4
  store i32 %v0_112dc, i32* @r0, align 4
  %v0_112e0 = call i32 @function_fa54()
  store i32 %v0_112e0, i32* %r0.global-to-local, align 4
  %v0_112e4 = load i32, i32* @r5, align 4
  %v1_112e4 = add i32 %v0_112e4, 24
  %v2_112e4 = inttoptr i32 %v1_112e4 to i32*
  %v3_112e4 = load i32, i32* %v2_112e4, align 4
  store i32 %v3_112e4, i32* %ip.global-to-local, align 4
  %v0_112e8 = load i32, i32* @r4, align 4
  store i32 %v0_112e8, i32* @r7, align 4
  br label %dec_label_pc_10fe8

dec_label_pc_112f0:                               ; preds = %thread-pre-split78
  %v0_112f8 = load i32, i32* @r5, align 4
  %v1_112f8 = add i32 %v0_112f8, 12
  %v2_112f8 = inttoptr i32 %v1_112f8 to i32*
  %v3_112f8 = load i32, i32* %v2_112f8, align 4
  br label %dec_label_pc_10918.backedge

dec_label_pc_10918.backedge.thread:               ; preds = %dec_label_pc_10bd8, %dec_label_pc_10c8c, %dec_label_pc_10dfc, %dec_label_pc_10eb0, %dec_label_pc_1100c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10920

dec_label_pc_10918.backedge.thread457:            ; preds = %dec_label_pc_10c04, %dec_label_pc_10d74, %dec_label_pc_10edc, %dec_label_pc_10e28, %dec_label_pc_11038, %dec_label_pc_10c20, %dec_label_pc_10d90, %dec_label_pc_10e44, %dec_label_pc_10ef8, %dec_label_pc_11054
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10920

dec_label_pc_10918.backedge:                      ; preds = %dec_label_pc_112f0, %dec_label_pc_11328
  %storemerge460 = phi i32 [ %v3_112f8, %dec_label_pc_112f0 ], [ %v3_11338, %dec_label_pc_11328 ]
  %v0_10918.be = phi i32 [ %v3_112f8, %dec_label_pc_112f0 ], [ %v3_11338, %dec_label_pc_11328 ]
  %v0_10920142 = phi i32 [ %v0_112f8, %dec_label_pc_112f0 ], [ %v0_11338, %dec_label_pc_11328 ]
  store i32 %storemerge460, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10918 = icmp eq i32 %v0_10918.be, 0
  store i1 %v2_10918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10918, label %dec_label_pc_10764, label %dec_label_pc_10920

dec_label_pc_11300:                               ; preds = %dec_label_pc_1089c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_11300 = load i32, i32* %stack_var_-56, align 4
  %v0_11304 = load i32, i32* @r6, align 4
  store i32 %v0_11304, i32* %r2.global-to-local, align 4
  %v1_11308 = add i32 %v3_11300, -1
  store i32 %v1_11308, i32* %r3.global-to-local, align 4
  %v0_1130c = load i32, i32* @sl, align 4
  store i32 %v0_1130c, i32* %r0.global-to-local, align 4
  %v0_11310 = load i32, i32* @r5, align 4
  %v1_11310 = add i32 %v0_11310, 24
  %v2_11310 = inttoptr i32 %v1_11310 to i32*
  %v3_11310 = load i32, i32* %v2_11310, align 4
  store i32 %v3_11310, i32* %r1.global-to-local, align 4
  %v4_11314 = call i32 @function_12108(i32 %v0_1130c, i32 %v3_11310, i32 %v0_11304, i32 %v1_11308)
  store i32 %v4_11314, i32* %r0.global-to-local, align 4
  %v2_11318 = icmp eq i32 %v4_11314, -1
  store i1 %v2_11318, i1* %cpsr_c.global-to-local, align 1
  %v7_11318 = icmp eq i32 %v4_11314, -1
  store i1 %v7_11318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11318, label %dec_label_pc_11328, label %dec_label_pc_108fc

dec_label_pc_11328:                               ; preds = %dec_label_pc_11300
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_1132c = call i32 @function_114d8(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_11334 = call i32 @function_114d8(i32 33)
  store i32 %v1_11334, i32* %r0.global-to-local, align 4
  %v0_11338 = load i32, i32* @r5, align 4
  %v1_11338 = add i32 %v0_11338, 12
  %v2_11338 = inttoptr i32 %v1_11338 to i32*
  %v3_11338 = load i32, i32* %v2_11338, align 4
  br label %dec_label_pc_10918.backedge

dec_label_pc_11340:                               ; preds = %bb352
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_1134c = call i32 @function_132bc(i32 2, i32 1, i32 0)
  store i32 %v3_1134c, i32* %r0.global-to-local, align 4
  %v2_11350 = icmp eq i32 %v3_1134c, -1
  store i1 %v2_11350, i1* %cpsr_c.global-to-local, align 1
  %v7_11350 = icmp eq i32 %v3_1134c, -1
  store i1 %v7_11350, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_1134c, i32* @r4, align 4
  br i1 %v7_11350, label %dec_label_pc_114a4, label %dec_label_pc_1135c

dec_label_pc_1135c:                               ; preds = %dec_label_pc_11340
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_11360 = call i32 @function_11590(i32 4)
  store i32 1503156639, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1dd34.105 to i32), i32* %r3.global-to-local, align 4
  %v0_1136c = load i32, i32* @r6, align 4
  store i32 %v0_1136c, i32* %r1.global-to-local, align 4
  store i32 1503156639, i32* @global_var_1dd38.107, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_11378 = inttoptr i32 %v0_1136c to i32*
  %v3_11378 = call i32 @function_114ac(i32 4, i32* %v2_11378)
  %v4_11378 = inttoptr i32 %v3_11378 to i8*
  store i32 %v3_11378, i32* %r0.global-to-local, align 4
  %v2_1137c = add i32 %v3_11378, 1
  %v3_1137c = inttoptr i32 %v2_1137c to i8*
  %v4_1137c = load i8, i8* %v3_1137c, align 1
  %v5_1137c = zext i8 %v4_1137c to i32
  store i32 %v5_1137c, i32* %r2.global-to-local, align 4
  %v3_11380 = load i8, i8* %v4_11378, align 1
  %v4_11380 = zext i8 %v3_11380 to i32
  %v4_11384 = mul nuw nsw i32 %v5_1137c, 256
  %v5_11384 = or i32 %v4_11380, %v4_11384
  store i32 %v5_11384, i32* %r3.global-to-local, align 4
  %v1_11388 = and i32 %v4_11380, 128
  %v2_11388 = icmp ne i32 %v1_11388, 0
  store i1 %v2_11388, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_1137c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_11398 = call i32 @function_114d8(i32 4)
  %v0_1139c = load i32, i32* @r4, align 4
  store i32 %v0_1139c, i32* %r0.global-to-local, align 4
  store i32 %v2_113a0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_113a8 = call i32 @function_13118(i32 %v0_1139c, %sockaddr* %v3_113a8, i32 16)
  store i32 %v4_113a8, i32* %r0.global-to-local, align 4
  %v3_113ac = icmp eq i32 %v4_113a8, -1
  store i1 %v3_113ac, i1* %cpsr_c.global-to-local, align 1
  %v8_113ac = icmp eq i32 %v4_113a8, -1
  store i1 %v8_113ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_113ac, label %dec_label_pc_113b4, label %dec_label_pc_11400

dec_label_pc_113b4:                               ; preds = %dec_label_pc_1135c
  %v0_113b4 = load i32, i32* @r4, align 4
  store i32 %v0_113b4, i32* %r0.global-to-local, align 4
  %v1_113b8 = call i32 @function_129d8(i32 %v0_113b4)
  %v0_113bc = load i32, i32* @r6, align 4
  store i32 %v0_113bc, i32* %r0.global-to-local, align 4
  %v1_113c0 = call i32 @function_13b98(i32 %v0_113bc)
  store i32 %v1_113c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_113c4

dec_label_pc_113c4:                               ; preds = %dec_label_pc_106c0, %dec_label_pc_106a4, %dec_label_pc_113b4
  %v0_113c4 = load i32, i32* @r7, align 4
  %v1_113c4 = load i32, i32* @r4, align 4
  %v2_113c4 = add i32 %v1_113c4, 12
  %v3_113c4 = inttoptr i32 %v2_113c4 to i32*
  store i32 %v0_113c4, i32* %v3_113c4, align 4
  %v0_113c8 = load i32, i32* @r7, align 4
  %v1_113c8 = trunc i32 %v0_113c8 to i8
  %v2_113c8 = load i32, i32* @r4, align 4
  %v3_113c8 = add i32 %v2_113c8, 284
  %v4_113c8 = inttoptr i32 %v3_113c8 to i8*
  store i8 %v1_113c8, i8* %v4_113c8, align 1
  br label %bb317

dec_label_pc_113d0:                               ; preds = %dec_label_pc_1084c, %dec_label_pc_10804
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10888

dec_label_pc_113d8:                               ; preds = %dec_label_pc_107c4
  %v0_113d8 = load i32, i32* @r5, align 4
  %v1_113d8 = add i32 %v0_113d8, 4
  %v2_113d8 = inttoptr i32 %v1_113d8 to i32*
  %v3_113d8 = load i32, i32* %v2_113d8, align 4
  store i32 %v3_113d8, i32* %r0.global-to-local, align 4
  %v1_113dc = call i32 @function_129d8(i32 %v3_113d8)
  store i32 %v1_113dc, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_113e4 = load i32, i32* @r6, align 4
  %v1_113e4 = load i32, i32* @r5, align 4
  %v2_113e4 = add i32 %v1_113e4, 12
  %v3_113e4 = inttoptr i32 %v2_113e4 to i32*
  store i32 %v0_113e4, i32* %v3_113e4, align 4
  %v0_113e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_113e8 = load i32, i32* @r5, align 4
  %v2_113e8 = add i32 %v1_113e8, 4
  %v3_113e8 = inttoptr i32 %v2_113e8 to i32*
  store i32 %v0_113e8, i32* %v3_113e8, align 4
  %v0_113ec = load i32, i32* @r6, align 4
  %v1_113ec = trunc i32 %v0_113ec to i8
  %v2_113ec = load i32, i32* @r5, align 4
  %v3_113ec = add i32 %v2_113ec, 284
  %v4_113ec = inttoptr i32 %v3_113ec to i8*
  store i8 %v1_113ec, i8* %v4_113ec, align 1
  br label %dec_label_pc_10764

dec_label_pc_113f4:                               ; preds = %dec_label_pc_11234
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_113f8 = load i32, i32* @sb, align 4
  %v2_113f8 = inttoptr i32 %v1_113f8 to i32*
  store i32 104, i32* %v2_113f8, align 4
  br label %dec_label_pc_1124c

dec_label_pc_11400:                               ; preds = %dec_label_pc_1135c
  store i32 %v2_108b0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11410 = load i32, i32* @r4, align 4
  store i32 %v0_11410, i32* %r0.global-to-local, align 4
  %v0_11414 = load i32, i32* @r6, align 4
  %v6_11414 = trunc i32 %v0_11414 to i8
  store i8 %v6_11414, i8* %stack_var_-52, align 1
  %v7_11418 = call i32 @function_1322c(i32 %v0_11410, i32* %v2_108b8, i32 1, i32 16384)
  store i32 %v2_108c4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1142c = load i32, i32* @r4, align 4
  store i32 %v0_1142c, i32* %r0.global-to-local, align 4
  %v5_11430 = call i32 @function_1322c(i32 %v0_1142c, i32* nonnull %stack_var_-56, i32 4, i32 16384)
  %v2_11438 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_11438, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11444 = load i32, i32* @r4, align 4
  store i32 %v0_11444, i32* %r0.global-to-local, align 4
  %v5_11448 = call i32 @function_1322c(i32 %v0_11444, i32* nonnull %stack_var_-38, i32 2, i32 16384)
  %v0_1144c = load i32, i32* %r8.global-to-local, align 4
  %v1_1144c = add i32 %v0_1144c, 12
  store i32 %v1_1144c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11458 = load i32, i32* @r4, align 4
  store i32 %v0_11458, i32* %r0.global-to-local, align 4
  %v4_1145c = inttoptr i32 %v1_1144c to i32*
  %v5_1145c = call i32 @function_1322c(i32 %v0_11458, i32* %v4_1145c, i32 1, i32 16384)
  store i32 %v5_1145c, i32* %r0.global-to-local, align 4
  %v0_11460 = load i32, i32* %r8.global-to-local, align 4
  %v1_11460 = inttoptr i32 %v0_11460 to i32*
  %v2_11460 = load i32, i32* %v1_11460, align 4
  store i32 %v2_11460, i32* %r1.global-to-local, align 4
  %v1_11464 = add i32 %v0_11460, 12
  %v2_11464 = inttoptr i32 %v1_11464 to i8*
  %v3_11464 = load i8, i8* %v2_11464, align 1
  %v4_11464 = zext i8 %v3_11464 to i32
  store i32 %v4_11464, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1146c = load i32, i32* @r4, align 4
  store i32 %v0_1146c, i32* %r0.global-to-local, align 4
  %v4_11470 = inttoptr i32 %v2_11460 to i32*
  %v5_11470 = call i32 @function_1322c(i32 %v0_1146c, i32* %v4_11470, i32 %v4_11464, i32 16384)
  %v0_11474 = load i32, i32* %r8.global-to-local, align 4
  %v1_11474 = add i32 %v0_11474, 13
  store i32 %v1_11474, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11480 = load i32, i32* @r4, align 4
  store i32 %v0_11480, i32* %r0.global-to-local, align 4
  %v4_11484 = inttoptr i32 %v1_11474 to i32*
  %v5_11484 = call i32 @function_1322c(i32 %v0_11480, i32* %v4_11484, i32 1, i32 16384)
  %v0_11488 = load i32, i32* @r4, align 4
  store i32 %v0_11488, i32* %r0.global-to-local, align 4
  %v0_1148c = load i32, i32* %r8.global-to-local, align 4
  %v1_1148c = add i32 %v0_1148c, 13
  %v2_1148c = inttoptr i32 %v1_1148c to i8*
  %v3_1148c = load i8, i8* %v2_1148c, align 1
  %v4_1148c = zext i8 %v3_1148c to i32
  store i32 %v4_1148c, i32* %r2.global-to-local, align 4
  %v1_11490 = add i32 %v0_1148c, 4
  %v2_11490 = inttoptr i32 %v1_11490 to i32*
  %v3_11490 = load i32, i32* %v2_11490, align 4
  store i32 %v3_11490, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11498 = inttoptr i32 %v3_11490 to i32*
  %v5_11498 = call i32 @function_1322c(i32 %v0_11488, i32* %v4_11498, i32 %v4_1148c, i32 16384)
  %v0_1149c = load i32, i32* @r4, align 4
  store i32 %v0_1149c, i32* %r0.global-to-local, align 4
  %v1_114a0 = call i32 @function_129d8(i32 %v0_1149c)
  store i32 %v1_114a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_114a4

dec_label_pc_114a4:                               ; preds = %dec_label_pc_11340, %dec_label_pc_11400
  %v0_114a4 = load i32, i32* @r6, align 4
  store i32 %v0_114a4, i32* %r0.global-to-local, align 4
  %v1_114a8 = call i32 @function_13b98(i32 %v0_114a4)
  store i32 %v1_114a8, i32* %r0.global-to-local, align 4
  ret i32 %v1_114a8

; uselistorder directives
  uselistorder i32 %v4_11380, { 1, 0 }
  uselistorder i32 %v5_1137c, { 1, 0, 2 }
  uselistorder i1 %v7_11350, { 1, 0 }
  uselistorder i32 %v3_1134c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_11338, { 1, 0 }
  uselistorder i32 %v0_11338, { 1, 0 }
  uselistorder i1 %v7_11318, { 1, 0 }
  uselistorder i32 %v3_112a8, { 1, 0 }
  uselistorder i1 %v1_11274, { 1, 0 }
  uselistorder i32 %v1_1125c, { 2, 1, 0 }
  uselistorder i32 %v1_11258, { 1, 0 }
  uselistorder i1 %v2_11210, { 1, 0 }
  uselistorder i32 %.359, { 1, 0 }
  uselistorder i1 %v7_111f8, { 1, 0 }
  uselistorder i32 %v0_111f4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_111d4, { 1, 0, 2 }
  uselistorder i32 %v4_111d0, { 1, 0, 2 }
  uselistorder i1 %v7_111c0, { 1, 0 }
  uselistorder i32 %v0_111c0, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v0_11170, { 0, 2, 1 }
  uselistorder i1 %v0_11160, { 1, 0 }
  uselistorder i32 %v4_11154, { 1, 0, 2 }
  uselistorder i32 %v0_110e8, { 1, 2, 0 }
  uselistorder i1 %v7_11058, { 1, 0 }
  uselistorder i32 %v1_11054, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_1104c, { 1, 0 }
  uselistorder i8 %v3_11044, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11054, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11030, { 1, 0 }
  uselistorder i1 %v7_11028, { 1, 0 }
  uselistorder i1 %v7_11020, { 1, 0 }
  uselistorder i32 %v0_10ffc, { 1, 2, 0 }
  uselistorder i32 %v2_10fe8, { 1, 0 }
  uselistorder i32 %v1_10fe8, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_10fe8, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_10fb8, { 2, 1, 0 }
  uselistorder i1 %v7_10f94, { 1, 0 }
  uselistorder i32 %v4_10f90, { 1, 0, 2 }
  uselistorder i1 %v7_10efc, { 1, 0 }
  uselistorder i32 %v1_10ef8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10ef0, { 1, 0 }
  uselistorder i8 %v3_10ee8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10ef8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10ed4, { 1, 0 }
  uselistorder i1 %v7_10ecc, { 1, 0 }
  uselistorder i1 %v7_10ec4, { 1, 0 }
  uselistorder i1 %v7_10e48, { 1, 0 }
  uselistorder i32 %v1_10e44, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10e3c, { 1, 0 }
  uselistorder i8 %v3_10e34, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10e44, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10e20, { 1, 0 }
  uselistorder i1 %v7_10e18, { 1, 0 }
  uselistorder i1 %v7_10e10, { 1, 0 }
  uselistorder i1 %v7_10d94, { 1, 0 }
  uselistorder i32 %v1_10d90, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10d88, { 1, 0 }
  uselistorder i8 %v3_10d80, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10d90, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10d6c, { 1, 0 }
  uselistorder i1 %v7_10d64, { 1, 0 }
  uselistorder i1 %v7_10d5c, { 1, 0 }
  uselistorder i1 %v7_10c24, { 1, 0 }
  uselistorder i32 %v1_10c20, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10c18, { 1, 0 }
  uselistorder i8 %v3_10c10, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10c20, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10bfc, { 1, 0 }
  uselistorder i1 %v7_10bf4, { 1, 0 }
  uselistorder i1 %v7_10bec, { 1, 0 }
  uselistorder i32 %v0_10b94, { 2, 1, 0 }
  uselistorder i1 %v7_10b8c, { 1, 0 }
  uselistorder i1 %v8_10b80, { 1, 0 }
  uselistorder i8 %v3_10b78, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_10b88, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10b64, { 1, 0 }
  uselistorder i1 %v7_10b5c, { 1, 0 }
  uselistorder i32 %v0_10b04, { 2, 1, 0 }
  uselistorder i1 %v7_10afc, { 1, 0 }
  uselistorder i1 %v8_10af0, { 1, 0 }
  uselistorder i8 %v3_10ae8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10af8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10ad4, { 1, 0 }
  uselistorder i1 %v7_10acc, { 1, 0 }
  uselistorder i1 %v7_10ac4, { 1, 0 }
  uselistorder i32 %v0_10aa0.pre, { 0, 2, 1 }
  uselistorder i32 %v1_10a88, { 1, 0 }
  uselistorder i32 %v1_10a84, { 1, 0 }
  uselistorder i32 %v1_10a7c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_10a78, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_10a78, { 0, 2, 1 }
  uselistorder i32 %v0_10a40.pr, { 1, 0 }
  uselistorder i1 %v7_10a18, { 1, 0 }
  uselistorder i1 %v2_10a04, { 1, 0, 2 }
  uselistorder i1 %v2_109ec, { 1, 0, 2 }
  uselistorder i32 %v1_10a0c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_109e0, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_10a08, { 1, 0 }
  uselistorder i32 %v2_10a10, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_109cc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_10994, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_10970, { 1, 2, 3, 0 }
  uselistorder i32 %v3_1096c, { 1, 0 }
  uselistorder i32 %v5_10950, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_1093c, { 1, 0, 2 }
  uselistorder i32 %v3_10938, { 1, 0, 2 }
  uselistorder i32 %v0_112b8, { 1, 0, 2 }
  uselistorder i32 %v0_1090c, { 1, 0, 2 }
  uselistorder i1 %v7_108ec, { 1, 0 }
  uselistorder i32 %v0_10854, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_10834, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_10828, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_107b4, { 2, 1, 0 }
  uselistorder i32 %v3_107b0, { 1, 0 }
  uselistorder i1 %v7_10794, { 1, 0 }
  uselistorder i32 %v3_10790, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_10784, { 1, 0 }
  uselistorder i32 %v1_10768, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_10754, { 2, 1, 0 }
  uselistorder i32 %v3_10750, { 1, 0 }
  uselistorder i32 %v0_10754, { 1, 0 }
  uselistorder i32 %v2_106ec, { 1, 0 }
  uselistorder i32 %v1_106ec, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_106ec, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_106c8, { 2, 1, 0 }
  uselistorder i32 %v1_106c4, { 1, 0 }
  uselistorder i32 %v2_10694, { 1, 0 }
  uselistorder i32 %v0_10694, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_1068c, { 1, 0 }
  uselistorder i1 %v7_10654, { 0, 3, 1, 2 }
  uselistorder i1 %v2_10654, { 1, 2, 0 }
  uselistorder i32 %v2_1064c, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_10644, { 1, 0 }
  uselistorder i32 %v1_10628, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v2_1061c, { 1, 0 }
  uselistorder i32 %v1_1061c, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_1061c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_1060c, { 1, 0 }
  uselistorder i32 %v3_10670, { 5, 7, 4, 8, 6, 1, 0, 10, 3, 2, 9 }
  uselistorder i32 %storemerge232, { 1, 0, 2 }
  uselistorder i32 %v2_108c4, { 0, 2, 3, 4, 1 }
  uselistorder i32* %v2_108b8, { 2, 1, 6, 3, 0, 4, 5, 7 }
  uselistorder i32 %v2_108b0, { 4, 3, 8, 5, 2, 6, 7, 9, 1, 0 }
  uselistorder i32 %v2_110dc, { 1, 2, 0 }
  uselistorder i32 %v2_10680, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v3_10560, { 1, 0 }
  uselistorder i32 %v1_1054c, { 1, 0 }
  uselistorder i32 %v1_10534, { 1, 2, 0 }
  uselistorder i32 %v0_10540, { 0, 3, 2, 1 }
  uselistorder i32 %v0_10504, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_104f8, { 2, 1, 0 }
  uselistorder i32 %v1_104d4, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_104ac, { 1, 0 }
  uselistorder i32 %v0_10410, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_10448, { 1, 2, 4, 8, 0, 3, 6, 5, 7 }
  uselistorder i32 %v1_103b8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_102dc, { 0, 2, 1 }
  uselistorder i32 %v1_102d8, { 3, 2, 0, 1 }
  uselistorder i32 %v4_102b4, { 1, 0 }
  uselistorder i1 %v2_10224, { 1, 0 }
  uselistorder i1 %v3_10208, { 1, 0, 2 }
  uselistorder i1 %v2_101f4, { 1, 0 }
  uselistorder i1 %v2_101d0, { 1, 0 }
  uselistorder i32 %v1_10180, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1016c, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10168, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_10158, { 1, 0 }
  uselistorder i32 %v0_10148, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10124, { 1, 0 }
  uselistorder i8* %stack_var_-1876.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_1043c, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i32 %v4_fed0, { 1, 0 }
  uselistorder i32 %v0_fec4, { 2, 0, 1, 3 }
  uselistorder i32 %v4_fe70, { 1, 0 }
  uselistorder i32 %v0_fe68, { 0, 1, 3, 2 }
  uselistorder i32 %v0_fe10, { 3, 2, 0, 1 }
  uselistorder i1 %v7_fdb0, { 1, 0 }
  uselistorder i32 %v3_fda8, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_fd90, { 0, 2, 1 }
  uselistorder i32 %v0_fd78, { 2, 1, 0 }
  uselistorder i32 %v0_fd54, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge240, { 1, 0 }
  uselistorder i32 %v0_fce8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-56, { 1, 5, 6, 7, 4, 8, 3, 2, 9, 0, 10, 11 }
  uselistorder i8* %stack_var_-52, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 7, 8, 9, 10, 11, 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 95, 96, 97, 98, 99, 100, 101, 17, 102, 103, 12, 18, 134, 19, 20, 86, 104, 105, 106, 126, 135, 136, 137, 2, 0, 1, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 13, 14, 15, 132, 133, 3, 4, 5, 6, 7, 8, 9, 10, 11, 21, 22, 23, 24, 25, 26, 16, 27, 28, 30, 29, 31, 32, 33, 34, 35, 37, 39, 38, 36, 40, 41, 42, 43, 49, 44, 45, 46, 47, 50, 138, 139, 51, 140, 141, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 85, 69, 70, 71, 72, 73, 74, 76, 75, 78, 77, 48, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92 }
  uselistorder i32* %r2.global-to-local, { 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 7, 116, 137, 114, 115, 117, 118, 119, 133, 138, 3, 0, 1, 2, 120, 121, 123, 122, 124, 126, 125, 127, 129, 128, 130, 131, 132, 134, 136, 135, 8, 10, 9, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 11, 19, 20, 21, 22, 23, 25, 27, 26, 102, 24, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 40, 39, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 140, 141, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 66, 68, 69, 139, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101 }
  uselistorder i32* %r1.global-to-local, { 81, 82, 83, 84, 85, 86, 87, 9, 88, 89, 90, 91, 3, 113, 114, 92, 93, 94, 109, 110, 0, 1, 2, 78, 79, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 4, 5, 116, 10, 11, 12, 13, 6, 7, 8, 14, 15, 16, 18, 19, 17, 20, 21, 23, 22, 80, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 115, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77 }
  uselistorder i32* %r0.global-to-local, { 127, 126, 129, 128, 130, 131, 132, 134, 133, 135, 136, 137, 31, 30, 139, 138, 140, 142, 141, 143, 145, 144, 146, 148, 147, 12, 13, 14, 16, 15, 224, 32, 220, 223, 222, 34, 36, 37, 33, 38, 35, 150, 149, 151, 153, 152, 154, 156, 155, 157, 208, 207, 210, 209, 211, 212, 9, 1, 0, 2, 4, 3, 6, 5, 7, 8, 125, 17, 159, 160, 162, 161, 163, 158, 164, 165, 166, 167, 169, 168, 171, 170, 173, 172, 174, 175, 176, 177, 179, 178, 181, 180, 183, 182, 184, 185, 186, 187, 189, 188, 191, 190, 193, 192, 194, 195, 196, 198, 197, 199, 201, 200, 203, 202, 204, 205, 206, 214, 213, 221, 215, 216, 217, 19, 18, 21, 20, 218, 219, 11, 10, 41, 39, 23, 22, 24, 26, 25, 27, 28, 29, 50, 40, 43, 42, 44, 45, 47, 46, 48, 55, 49, 51, 54, 52, 53, 56, 58, 59, 57, 62, 60, 61, 64, 63, 65, 67, 66, 111, 68, 69, 70, 72, 71, 73, 74, 76, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 112, 115, 114, 116, 120, 119, 117, 118, 121, 122, 123, 124 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 14, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 36, 7, 37, 1, 0, 35, 47, 38, 39, 41, 40, 43, 42, 44, 45, 46, 48, 49, 5, 50, 6, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 18, 16, 17, 19, 51, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 132, 133, 22, 23, 28, 40, 202, 130, 31, 30, 32, 33, 34, 134, 117, 136, 137, 138, 178, 179, 180, 197, 198, 199, 200, 201, 0, 1, 6, 7, 2, 3, 4, 5, 131, 24, 139, 140, 141, 142, 143, 148, 149, 144, 145, 146, 147, 150, 151, 152, 157, 158, 153, 154, 155, 156, 159, 160, 161, 166, 167, 162, 163, 164, 165, 168, 169, 170, 175, 176, 171, 172, 173, 174, 177, 181, 182, 186, 187, 183, 184, 185, 188, 26, 189, 194, 195, 190, 191, 192, 193, 196, 25, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 122, 35, 36, 37, 38, 39, 123, 27, 135, 29, 41, 43, 42, 44, 45, 47, 49, 48, 124, 46, 50, 51, 52, 53, 54, 55, 60, 56, 57, 58, 59, 127, 128, 125, 126, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 78, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 116, 96, 97, 98, 99, 100, 115, 101, 102, 103, 114, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 129, 121 }
  uselistorder i1* %cpsr_c.global-to-local, { 131, 132, 133, 19, 20, 25, 37, 200, 128, 27, 28, 29, 30, 31, 134, 113, 135, 136, 137, 138, 177, 178, 179, 196, 197, 198, 199, 0, 1, 6, 129, 2, 3, 4, 5, 130, 21, 139, 140, 141, 142, 147, 148, 143, 144, 145, 146, 149, 150, 151, 156, 157, 152, 153, 154, 155, 158, 159, 160, 165, 166, 161, 162, 163, 164, 167, 168, 169, 174, 175, 170, 171, 172, 173, 176, 180, 181, 185, 186, 182, 183, 184, 187, 23, 188, 193, 194, 189, 190, 191, 192, 195, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 120, 32, 33, 34, 35, 36, 121, 24, 114, 26, 38, 40, 39, 41, 42, 44, 46, 45, 122, 43, 47, 48, 49, 50, 51, 56, 52, 53, 54, 55, 125, 126, 123, 57, 124, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 111, 89, 90, 91, 92, 93, 110, 94, 95, 96, 109, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 115, 116, 117, 118, 127, 119 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder i8** @global_var_1dd34.105, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1dd34.105 to i32), { 1, 0 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 30, { 6, 0, 1, 2, 3, 7, 4, 5, 8 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_150c8.33 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_150c8.33, { 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_150c8.33 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_1322c, { 11, 12, 13, 14, 15, 16, 17, 28, 0, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 3, 4, 2, 5, 6, 7, 8, 9, 10, 29 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_131cc, { 0, 1, 2, 3, 4, 5, 9, 6, 7, 8 }
  uselistorder i32 (i32)* @function_114d8, { 17, 35, 34, 16, 10, 36, 15, 14, 13, 12, 11, 33, 32, 9, 31, 30, 29, 37, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12108, { 24, 22, 20, 21, 23, 19, 18, 17, 0, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32*)* @function_114ac, { 23, 24, 30, 0, 25, 26, 27, 28, 29, 1, 2, 31, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 55, 56, 57, 58 }
  uselistorder i32 (i32)* @function_11590, { 29, 28, 22, 46, 27, 26, 25, 24, 23, 45, 44, 21, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 15, 30, 20, 19, 18, 17, 16, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1dce0.161 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1dce1.162, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1dce0.161 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_12bf8, { 2, 1, 0 }
  uselistorder i32 284, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder i32 ()* @function_fa54, { 0, 3, 2, 1 }
  uselistorder i32 254, { 8, 9, 10, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8 2, { 0, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_13258, { 0, 1, 8, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 16384, { 31, 49, 32, 50, 33, 51, 34, 52, 35, 53, 36, 54, 13, 55, 12, 66, 0, 47, 1, 48, 2, 56, 3, 57, 4, 58, 5, 59, 6, 60, 7, 61, 8, 62, 9, 63, 29, 64, 30, 65, 27, 68, 28, 69, 26, 67, 37, 70, 10, 71, 11, 72, 39, 73, 15, 74, 40, 75, 41, 76, 42, 77, 14, 78, 38, 79, 16, 80, 17, 81, 18, 82, 83, 43, 84, 19, 85, 20, 86, 22, 87, 21, 88, 23, 89, 24, 90, 45, 91, 46, 92, 25, 93, 44, 94 }
  uselistorder i32 (i32, i32, i32, i32)* @function_e4f4, { 8, 7, 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_1282c, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_e498, { 10, 9, 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1dcc4.252, { 2, 1, 0 }
  uselistorder i32 16711680, { 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 127, { 5, 0, 6, 3, 7, 1, 8, 2, 9, 4, 10 }
  uselistorder i32 126, { 11, 5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_1516c.220 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15124.204 to i32), { 0, 20, 1, 21, 2, 22, 3, 23, 4, 24, 5, 25, 6, 26, 7, 27, 8, 28, 9, 29, 10, 30, 11, 31, 12, 32, 13, 33, 14, 34, 15, 35, 16, 36, 17, 37, 18, 38, 19, 39 }
  uselistorder i32 ptrtoint (i32* @global_var_150f0.198 to i32), { 0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_1521c.196 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_15210.194 to i32), { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32, i32)* @function_fb28, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_151f8.188 to i32), { 0, 9, 1, 10, 2, 11, 3, 4, 5, 12, 6, 13, 7, 14, 8, 15 }
  uselistorder i8* @global_var_1dcd5.184, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1dcc8.175 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1dcd4.176, { 1, 0 }
  uselistorder i8** @global_var_1dcb4.171, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1dcb4.171 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 65280, { 28, 1, 15, 0, 2, 29, 3, 4, 30, 22, 23, 31, 5, 32, 16, 17, 33, 34, 6, 7, 8, 35, 36, 9, 18, 10, 37, 24, 19, 38, 39, 40, 41, 11, 25, 26, 27, 42, 12, 43, 44, 20, 45, 46, 13, 47, 48, 21, 49, 50, 14, 51 }
  uselistorder i32 ()* @function_f8c0, { 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 5, 4, 3, 2, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 6, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 1, 0 }
  uselistorder i32 2048, { 4, 3, 0, 1, 5, 6, 2, 7, 8, 9 }
  uselistorder i32* @global_var_1dd48.169, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1dd44.167, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1dce4.155, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_12ca8, { 0, 1, 2, 3, 4, 5, 6, 24, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27 }
  uselistorder i32 (i32)* @function_f918, { 1, 0 }
  uselistorder i32* @global_var_1dd2c.82, { 3, 4, 0, 1, 2, 5, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_122fc, { 2, 1, 0 }
  uselistorder i32* @global_var_1dd4c.153, { 0, 2, 1 }
  uselistorder i32 ()* @function_12a04, { 1, 5, 4, 3, 2, 0 }
  uselistorder i32* @sl, { 9, 3, 5, 6, 10, 4, 7, 8, 13, 12, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 23, 24, 2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 0, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 1, 113, 114, 115, 116 }
  uselistorder i32* @sb, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 46, 47, 49, 50, 51, 54, 52, 53, 55, 56, 57, 58 }
  uselistorder label %dec_label_pc_114a4, { 1, 0 }
  uselistorder label %dec_label_pc_113c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10918.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_10918.backedge.thread457, { 9, 4, 8, 2, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_10918.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %.thread228, { 1, 0 }
  uselistorder label %bb354, { 1, 0 }
  uselistorder label %dec_label_pc_1124c, { 1, 0 }
  uselistorder label %dec_label_pc_11218, { 1, 0 }
  uselistorder label %thread-pre-split78, { 1, 0 }
  uselistorder label %dec_label_pc_11128, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11054, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11040, { 1, 0 }
  uselistorder label %dec_label_pc_10fe8, { 4, 5, 1, 11, 6, 7, 8, 9, 10, 2, 3, 0 }
  uselistorder label %dec_label_pc_10ef8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10ee4, { 1, 0 }
  uselistorder label %dec_label_pc_10e44, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10e30, { 1, 0 }
  uselistorder label %dec_label_pc_10d90, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10d7c, { 1, 0 }
  uselistorder label %dec_label_pc_10c20, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10c0c, { 1, 0 }
  uselistorder label %dec_label_pc_10b88, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10b74, { 1, 0 }
  uselistorder label %dec_label_pc_10b04, { 1, 0 }
  uselistorder label %dec_label_pc_10af8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10ae4, { 1, 0 }
  uselistorder label %dec_label_pc_10aa0, { 3, 1, 4, 5, 6, 7, 8, 2, 0 }
  uselistorder label %dec_label_pc_10a90, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb328, { 2, 1, 0 }
  uselistorder label %bb326, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10a40, { 1, 0 }
  uselistorder label %dec_label_pc_10a2c, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_109e8, { 1, 0 }
  uselistorder label %dec_label_pc_109e8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1097c, { 1, 0 }
  uselistorder label %bb324, { 1, 0 }
  uselistorder label %dec_label_pc_10930, { 1, 0 }
  uselistorder label %dec_label_pc_10920, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_10920.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_10914.loopexit, { 0, 4, 1, 2, 3 }
  uselistorder label %dec_label_pc_1089c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10888, { 1, 0 }
  uselistorder label %dec_label_pc_10764, { 7, 1, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_1073c, { 1, 0 }
  uselistorder label %bb319, { 1, 0 }
  uselistorder label %bb317, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_105a8.dec_label_pc_105a8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10590.dec_label_pc_10590_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10588, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_10580, { 1, 0 }
  uselistorder label %dec_label_pc_10534, { 1, 0 }
  uselistorder label %dec_label_pc_103d8, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_103cc, { 1, 0 }
  uselistorder label %.thread50, { 2, 1, 0 }
  uselistorder label %.thread48, { 1, 0 }
  uselistorder label %dec_label_pc_10234, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10210, { 1, 0 }
  uselistorder label %dec_label_pc_10204, { 1, 2, 0 }
  uselistorder label %dec_label_pc_101e0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_101bc, { 1, 0 }
  uselistorder label %bb287, { 1, 0 }
  uselistorder label %dec_label_pc_10168, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_fe10, { 1, 0 }
}

define i32 @function_114ac(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_114ac:
  store i32 ptrtoint (i32* @global_var_1dd54.270 to i32), i32* @ip, align 4
  %v3_114b0 = mul i32 %arg1, 8
  %v2_114b4 = add i32 %v3_114b0, ptrtoint (i32* @global_var_1dd54.270 to i32)
  %v2_114b8 = icmp eq i32* %arg2, null
  br i1 %v2_114b8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_114ac
  %v3_114c411 = inttoptr i32 %v2_114b4 to i32*
  %v4_114c412 = load i32, i32* %v3_114c411, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_114ac
  %v2_114bc = add i32 %v3_114b0, add (i32 ptrtoint (i32* @global_var_1dd54.270 to i32), i32 5)
  %v3_114bc = inttoptr i32 %v2_114bc to i8*
  %v4_114bc = load i8, i8* %v3_114bc, align 1
  %v5_114bc = zext i8 %v4_114bc to i32
  store i32 %v5_114bc, i32* @r2, align 4
  %v2_114c0 = add i32 %v3_114b0, add (i32 ptrtoint (i32* @global_var_1dd54.270 to i32), i32 4)
  %v3_114c0 = inttoptr i32 %v2_114c0 to i8*
  %v4_114c0 = load i8, i8* %v3_114c0, align 4
  %v5_114c0 = zext i8 %v4_114c0 to i32
  %v3_114c4 = inttoptr i32 %v2_114b4 to i32*
  %v4_114c4 = load i32, i32* %v3_114c4, align 4
  %v5_114c8 = mul nuw nsw i32 %v5_114bc, 256
  %v6_114c8 = or i32 %v5_114c0, %v5_114c8
  store i32 %v6_114c8, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_114c4714 = phi i32 [ %v4_114c412, %.thread ], [ %v4_114c4, %bb ]
  ret i32 %v4_114c4714

; uselistorder directives
  uselistorder i32 %v2_114b4, { 1, 0 }
  uselistorder i32 %v3_114b0, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_114d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_114d8:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_114d8 = mul i32 %arg1, 8
  %v3_114dc = load i32, i32* @r4, align 4
  store i32 %v3_114dc, i32* %stack_var_-20, align 4
  %v3_114ec = and i32 %v3_114d8, 2040
  %v2_114f0 = add i32 %v3_114ec, ptrtoint (i32* @global_var_1dd54.270 to i32)
  store i32 %v2_114f0, i32* @lr, align 4
  %v1_114f8 = add i32 %v3_114ec, add (i32 ptrtoint (i32* @global_var_1dd54.270 to i32), i32 4)
  store i32 %v1_114f8, i32* %r7.global-to-local, align 4
  %v2_114fc = load i32, i32* @global_var_1db24.273, align 4
  store i32 %v2_114fc, i32* @r2, align 4
  %v2_11500 = inttoptr i32 %v1_114f8 to i8*
  %v3_11500 = load i8, i8* %v2_11500, align 4
  %v4_11500 = zext i8 %v3_11500 to i32
  %v1_11504 = add i32 %v3_114ec, add (i32 ptrtoint (i32* @global_var_1dd54.270 to i32), i32 5)
  %v2_11504 = inttoptr i32 %v1_11504 to i8*
  %v3_11504 = load i8, i8* %v2_11504, align 1
  %v4_11504 = zext i8 %v3_11504 to i32
  %v3_11508 = udiv i32 %v2_114fc, 256
  %v4_1150c = mul nuw nsw i32 %v4_11504, 256
  %v5_1150c = or i32 %v4_1150c, %v4_11500
  store i1 false, i1* @cpsr_n, align 1
  %v7_1150c = icmp eq i32 %v5_1150c, 0
  store i1 %v7_1150c, i1* @cpsr_z, align 1
  %v3_11510 = udiv i32 %v2_114fc, 65536
  %v1_11514 = urem i32 %v3_11508, 256
  store i32 %v1_11514, i32* %r6.global-to-local, align 4
  %v1_11518 = urem i32 %v3_11510, 256
  store i32 %v1_11518, i32* %r5.global-to-local, align 4
  %v3_1151c = udiv i32 %v2_114fc, 16777216
  store i32 %v3_1151c, i32* %r4.global-to-local, align 4
  %v1_11520 = urem i32 %v2_114fc, 256
  br i1 %v7_1150c, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_114d8
  store i32 %v3_114dc, i32* @r4, align 4
  ret i32 %v1_11520

bb8:                                              ; preds = %dec_label_pc_114d8
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_1152c

dec_label_pc_1152c:                               ; preds = %dec_label_pc_1152c, %bb8
  %v2_11538 = phi i32 [ %v1_11574, %dec_label_pc_1152c ], [ 0, %bb8 ]
  %v0_1152c = phi i32 [ %v0_1156c, %dec_label_pc_1152c ], [ %v2_114f0, %bb8 ]
  %v1_1152c = inttoptr i32 %v0_1152c to i32*
  %v2_1152c = load i32, i32* %v1_1152c, align 4
  %v2_11530 = add i32 %v2_1152c, %v2_11538
  %v3_11530 = inttoptr i32 %v2_11530 to i8*
  %v4_11530 = load i8, i8* %v3_11530, align 1
  %v6_11530 = zext i8 %v4_11530 to i32
  %v2_11534 = xor i32 %v6_11530, %v1_11520
  %v1_11538 = trunc i32 %v2_11534 to i8
  store i8 %v1_11538, i8* %v3_11530, align 1
  %v0_1153c = load i32, i32* @lr, align 4
  %v1_1153c = inttoptr i32 %v0_1153c to i32*
  %v2_1153c = load i32, i32* %v1_1153c, align 4
  %v0_11540 = load i32, i32* @ip, align 4
  %v2_11540 = add i32 %v0_11540, %v2_1153c
  %v3_11540 = inttoptr i32 %v2_11540 to i8*
  %v4_11540 = load i8, i8* %v3_11540, align 1
  %v6_11540 = zext i8 %v4_11540 to i32
  %v0_11544 = load i32, i32* %r6.global-to-local, align 4
  %v2_11544 = xor i32 %v0_11544, %v6_11540
  %v1_11548 = trunc i32 %v2_11544 to i8
  store i8 %v1_11548, i8* %v3_11540, align 1
  %v0_1154c = load i32, i32* @lr, align 4
  %v1_1154c = inttoptr i32 %v0_1154c to i32*
  %v2_1154c = load i32, i32* %v1_1154c, align 4
  %v0_11550 = load i32, i32* @ip, align 4
  %v2_11550 = add i32 %v0_11550, %v2_1154c
  %v3_11550 = inttoptr i32 %v2_11550 to i8*
  %v4_11550 = load i8, i8* %v3_11550, align 1
  %v6_11550 = zext i8 %v4_11550 to i32
  %v0_11554 = load i32, i32* %r5.global-to-local, align 4
  %v2_11554 = xor i32 %v0_11554, %v6_11550
  %v1_11558 = trunc i32 %v2_11554 to i8
  store i8 %v1_11558, i8* %v3_11550, align 1
  %v0_1155c = load i32, i32* @lr, align 4
  %v1_1155c = inttoptr i32 %v0_1155c to i32*
  %v2_1155c = load i32, i32* %v1_1155c, align 4
  %v0_11560 = load i32, i32* @ip, align 4
  %v2_11560 = add i32 %v0_11560, %v2_1155c
  %v3_11560 = inttoptr i32 %v2_11560 to i8*
  %v4_11560 = load i8, i8* %v3_11560, align 1
  %v6_11560 = zext i8 %v4_11560 to i32
  %v0_11564 = load i32, i32* %r4.global-to-local, align 4
  %v2_11564 = xor i32 %v0_11564, %v6_11560
  %v1_11568 = trunc i32 %v2_11564 to i8
  store i8 %v1_11568, i8* %v3_11560, align 1
  %v0_1156c = load i32, i32* @lr, align 4
  %v1_1156c = add i32 %v0_1156c, 4
  %v2_1156c = inttoptr i32 %v1_1156c to i8*
  %v3_1156c = load i8, i8* %v2_1156c, align 1
  %v4_1156c = zext i8 %v3_1156c to i32
  %v0_11570 = load i32, i32* %r7.global-to-local, align 4
  %v1_11570 = add i32 %v0_11570, 1
  %v2_11570 = inttoptr i32 %v1_11570 to i8*
  %v3_11570 = load i8, i8* %v2_11570, align 1
  %v4_11570 = zext i8 %v3_11570 to i32
  %v0_11574 = load i32, i32* @ip, align 4
  %v1_11574 = add i32 %v0_11574, 1
  store i32 %v1_11574, i32* @ip, align 4
  %v4_11578 = mul nuw nsw i32 %v4_11570, 256
  %v5_11578 = or i32 %v4_11578, %v4_1156c
  store i32 %v5_11578, i32* @r2, align 4
  %v2_1157c = sub i32 %v5_11578, %v1_11574
  %v8_1157c = icmp slt i32 %v2_1157c, 0
  store i1 %v8_1157c, i1* @cpsr_n, align 1
  %v9_1157c = icmp eq i32 %v5_11578, %v1_11574
  store i1 %v9_1157c, i1* @cpsr_z, align 1
  %v8_11580 = icmp sgt i32 %v5_11578, %v1_11574
  br i1 %v8_11580, label %dec_label_pc_1152c, label %dec_label_pc_11584

dec_label_pc_11584:                               ; preds = %dec_label_pc_1152c
  %v2_11584 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11584, i32* @r4, align 4
  ret i32 %v1_11520

; uselistorder directives
  uselistorder i32 %v5_11578, { 0, 2, 1, 3 }
  uselistorder i32 %v1_11574, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v0_1156c, { 1, 0 }
  uselistorder i32 %v1_11520, { 0, 2, 1 }
  uselistorder i32 %v2_114fc, { 3, 0, 1, 2, 4 }
  uselistorder i1* @cpsr_n, { 1, 2, 0 }
}

define i32 @function_11590(i32 %arg1) local_unnamed_addr {
dec_label_pc_11590:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11590 = mul i32 %arg1, 8
  %v3_11594 = load i32, i32* @r4, align 4
  store i32 %v3_11594, i32* %stack_var_-20, align 4
  %v3_115a4 = and i32 %v3_11590, 2040
  %v2_115a8 = add i32 %v3_115a4, ptrtoint (i32* @global_var_1dd54.270 to i32)
  store i32 %v2_115a8, i32* @lr, align 4
  %v1_115b0 = add i32 %v3_115a4, add (i32 ptrtoint (i32* @global_var_1dd54.270 to i32), i32 4)
  store i32 %v1_115b0, i32* %r7.global-to-local, align 4
  %v2_115b4 = load i32, i32* @global_var_1db24.273, align 4
  store i32 %v2_115b4, i32* @r2, align 4
  %v2_115b8 = inttoptr i32 %v1_115b0 to i8*
  %v3_115b8 = load i8, i8* %v2_115b8, align 4
  %v4_115b8 = zext i8 %v3_115b8 to i32
  %v1_115bc = add i32 %v3_115a4, add (i32 ptrtoint (i32* @global_var_1dd54.270 to i32), i32 5)
  %v2_115bc = inttoptr i32 %v1_115bc to i8*
  %v3_115bc = load i8, i8* %v2_115bc, align 1
  %v4_115bc = zext i8 %v3_115bc to i32
  %v3_115c0 = udiv i32 %v2_115b4, 256
  %v4_115c4 = mul nuw nsw i32 %v4_115bc, 256
  %v5_115c4 = or i32 %v4_115c4, %v4_115b8
  %v7_115c4 = icmp eq i32 %v5_115c4, 0
  %v3_115c8 = udiv i32 %v2_115b4, 65536
  %v1_115cc = urem i32 %v3_115c0, 256
  store i32 %v1_115cc, i32* %r6.global-to-local, align 4
  %v1_115d0 = urem i32 %v3_115c8, 256
  store i32 %v1_115d0, i32* %r5.global-to-local, align 4
  %v3_115d4 = udiv i32 %v2_115b4, 16777216
  store i32 %v3_115d4, i32* %r4.global-to-local, align 4
  %v1_115d8 = urem i32 %v2_115b4, 256
  br i1 %v7_115c4, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_11590
  store i32 %v3_11594, i32* @r4, align 4
  ret i32 %v1_115d8

bb8:                                              ; preds = %dec_label_pc_11590
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_115e4

dec_label_pc_115e4:                               ; preds = %dec_label_pc_115e4, %bb8
  %v2_115f0 = phi i32 [ %v1_1162c, %dec_label_pc_115e4 ], [ 0, %bb8 ]
  %v0_115e4 = phi i32 [ %v0_11624, %dec_label_pc_115e4 ], [ %v2_115a8, %bb8 ]
  %v1_115e4 = inttoptr i32 %v0_115e4 to i32*
  %v2_115e4 = load i32, i32* %v1_115e4, align 4
  %v2_115e8 = add i32 %v2_115e4, %v2_115f0
  %v3_115e8 = inttoptr i32 %v2_115e8 to i8*
  %v4_115e8 = load i8, i8* %v3_115e8, align 1
  %v6_115e8 = zext i8 %v4_115e8 to i32
  %v2_115ec = xor i32 %v6_115e8, %v1_115d8
  %v1_115f0 = trunc i32 %v2_115ec to i8
  store i8 %v1_115f0, i8* %v3_115e8, align 1
  %v0_115f4 = load i32, i32* @lr, align 4
  %v1_115f4 = inttoptr i32 %v0_115f4 to i32*
  %v2_115f4 = load i32, i32* %v1_115f4, align 4
  %v0_115f8 = load i32, i32* %ip.global-to-local, align 4
  %v2_115f8 = add i32 %v0_115f8, %v2_115f4
  %v3_115f8 = inttoptr i32 %v2_115f8 to i8*
  %v4_115f8 = load i8, i8* %v3_115f8, align 1
  %v6_115f8 = zext i8 %v4_115f8 to i32
  %v0_115fc = load i32, i32* %r6.global-to-local, align 4
  %v2_115fc = xor i32 %v0_115fc, %v6_115f8
  %v1_11600 = trunc i32 %v2_115fc to i8
  store i8 %v1_11600, i8* %v3_115f8, align 1
  %v0_11604 = load i32, i32* @lr, align 4
  %v1_11604 = inttoptr i32 %v0_11604 to i32*
  %v2_11604 = load i32, i32* %v1_11604, align 4
  %v0_11608 = load i32, i32* %ip.global-to-local, align 4
  %v2_11608 = add i32 %v0_11608, %v2_11604
  %v3_11608 = inttoptr i32 %v2_11608 to i8*
  %v4_11608 = load i8, i8* %v3_11608, align 1
  %v6_11608 = zext i8 %v4_11608 to i32
  %v0_1160c = load i32, i32* %r5.global-to-local, align 4
  %v2_1160c = xor i32 %v0_1160c, %v6_11608
  %v1_11610 = trunc i32 %v2_1160c to i8
  store i8 %v1_11610, i8* %v3_11608, align 1
  %v0_11614 = load i32, i32* @lr, align 4
  %v1_11614 = inttoptr i32 %v0_11614 to i32*
  %v2_11614 = load i32, i32* %v1_11614, align 4
  %v0_11618 = load i32, i32* %ip.global-to-local, align 4
  %v2_11618 = add i32 %v0_11618, %v2_11614
  %v3_11618 = inttoptr i32 %v2_11618 to i8*
  %v4_11618 = load i8, i8* %v3_11618, align 1
  %v6_11618 = zext i8 %v4_11618 to i32
  %v0_1161c = load i32, i32* %r4.global-to-local, align 4
  %v2_1161c = xor i32 %v0_1161c, %v6_11618
  %v1_11620 = trunc i32 %v2_1161c to i8
  store i8 %v1_11620, i8* %v3_11618, align 1
  %v0_11624 = load i32, i32* @lr, align 4
  %v1_11624 = add i32 %v0_11624, 4
  %v2_11624 = inttoptr i32 %v1_11624 to i8*
  %v3_11624 = load i8, i8* %v2_11624, align 1
  %v4_11624 = zext i8 %v3_11624 to i32
  %v0_11628 = load i32, i32* %r7.global-to-local, align 4
  %v1_11628 = add i32 %v0_11628, 1
  %v2_11628 = inttoptr i32 %v1_11628 to i8*
  %v3_11628 = load i8, i8* %v2_11628, align 1
  %v4_11628 = zext i8 %v3_11628 to i32
  %v0_1162c = load i32, i32* %ip.global-to-local, align 4
  %v1_1162c = add i32 %v0_1162c, 1
  store i32 %v1_1162c, i32* %ip.global-to-local, align 4
  %v4_11630 = mul nuw nsw i32 %v4_11628, 256
  %v5_11630 = or i32 %v4_11630, %v4_11624
  store i32 %v5_11630, i32* @r2, align 4
  %v8_11638 = icmp sgt i32 %v5_11630, %v1_1162c
  br i1 %v8_11638, label %dec_label_pc_115e4, label %dec_label_pc_1163c

dec_label_pc_1163c:                               ; preds = %dec_label_pc_115e4
  %v2_1163c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1163c, i32* @r4, align 4
  ret i32 %v1_115d8

; uselistorder directives
  uselistorder i32 %v1_1162c, { 1, 2, 0 }
  uselistorder i32 %v0_11624, { 1, 0 }
  uselistorder i32 %v1_115d8, { 0, 2, 1 }
  uselistorder i32 %v2_115b4, { 3, 0, 1, 2, 4 }
}

define i32 @function_11648(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11648:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11648 = load i32, i32* @r4, align 4
  store i32 %v3_11648, i32* %stack_var_-36, align 4
  %v6_11648 = load i32, i32* @r5, align 4
  %v9_11648 = load i32, i32* @r6, align 4
  %v12_11648 = load i32, i32* @r7, align 4
  %v1_11650 = call i32 @function_13454(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1dd54.270 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_11650, i32* @r7, align 4
  %v3_1166c = call i32 @function_120c0(i32 %v1_11650, i32 ptrtoint (i32* @global_var_15238.278 to i32), i32 2)
  %v0_11670 = load i32, i32* @r5, align 4
  %v0_11674 = load i32, i32* @r7, align 4
  store i32 %v0_11674, i32* @global_var_1dd64.279, align 4
  %v1_11678 = trunc i32 %v0_11670 to i8
  store i8 %v1_11678, i8* bitcast (i32* @global_var_1dd68.280 to i8*), align 4
  %v0_1167c = load i32, i32* @r6, align 4
  %v1_1167c = trunc i32 %v0_1167c to i8
  store i8 %v1_1167c, i8* bitcast (i32* @global_var_1dd69.281 to i8*), align 4
  %v1_11680 = call i32 @function_13454(i32 %v0_11670)
  %v0_11684 = load i32, i32* @r5, align 4
  store i32 %v1_11680, i32* @r7, align 4
  %v3_11690 = call i32 @function_120c0(i32 %v1_11680, i32 ptrtoint (i32* @global_var_1523c.283 to i32), i32 %v0_11684)
  %v0_11698 = load i32, i32* @r7, align 4
  store i32 %v0_11698, i32* @global_var_1dd74.284, align 4
  %v0_1169c = load i32, i32* @r5, align 4
  %v1_1169c = trunc i32 %v0_1169c to i8
  store i8 %v1_1169c, i8* bitcast (i32* @global_var_1dd78.285 to i8*), align 4
  %v0_116a0 = load i32, i32* @r6, align 4
  %v1_116a0 = trunc i32 %v0_116a0 to i8
  store i8 %v1_116a0, i8* bitcast (i32* @global_var_1dd79.286 to i8*), align 4
  %v1_116a4 = call i32 @function_13454(i32 29)
  store i32 %v1_116a4, i32* @r5, align 4
  %v3_116b4 = call i32 @function_120c0(i32 %v1_116a4, i32 ptrtoint (i32* @global_var_15240.288 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1dd80.289 to i8*), align 4
  %v0_116c4 = load i32, i32* @r5, align 4
  store i32 %v0_116c4, i32* @global_var_1dd7c.290, align 4
  %v0_116c8 = load i32, i32* @r6, align 4
  %v1_116c8 = trunc i32 %v0_116c8 to i8
  store i8 %v1_116c8, i8* bitcast (i32* @global_var_1dd81.291 to i8*), align 4
  %v1_116cc = call i32 @function_13454(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_116cc, i32* @r5, align 4
  %v3_116e0 = call i32 @function_120c0(i32 %v1_116cc, i32 ptrtoint (i32* @global_var_15260.293 to i32), i32 7)
  %v0_116e8 = load i32, i32* @r5, align 4
  store i32 %v0_116e8, i32* @global_var_1dd84.294, align 4
  %v0_116ec = load i32, i32* @r7, align 4
  %v1_116ec = trunc i32 %v0_116ec to i8
  store i8 %v1_116ec, i8* bitcast (i32* @global_var_1dd88.295 to i8*), align 4
  %v0_116f0 = load i32, i32* @r6, align 4
  %v1_116f0 = trunc i32 %v0_116f0 to i8
  store i8 %v1_116f0, i8* bitcast (i32* @global_var_1dd89.296 to i8*), align 4
  %v1_116f4 = call i32 @function_13454(i32 5)
  store i32 %v1_116f4, i32* @r5, align 4
  %v3_11704 = call i32 @function_120c0(i32 %v1_116f4, i32 ptrtoint (i32* @global_var_15268.298 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1dd90.299 to i8*), align 4
  %v0_11714 = load i32, i32* @r5, align 4
  store i32 %v0_11714, i32* @global_var_1dd8c.300, align 4
  %v0_11718 = load i32, i32* @r6, align 4
  %v1_11718 = trunc i32 %v0_11718 to i8
  store i8 %v1_11718, i8* bitcast (i32* @global_var_1dd91.301 to i8*), align 4
  %v1_1171c = call i32 @function_13454(i32 4)
  store i32 %v1_1171c, i32* @r5, align 4
  %v3_1172c = call i32 @function_120c0(i32 %v1_1171c, i32 ptrtoint (i32* @global_var_15270.303 to i32), i32 4)
  store i8 4, i8* bitcast (i32* @global_var_1dd98.304 to i8*), align 4
  %v0_1173c = load i32, i32* @r5, align 4
  store i32 %v0_1173c, i32* @global_var_1dd94.305, align 4
  %v0_11740 = load i32, i32* @r6, align 4
  %v1_11740 = trunc i32 %v0_11740 to i8
  store i8 %v1_11740, i8* bitcast (i32* @global_var_1dd99.306 to i8*), align 4
  %v1_11744 = call i32 @function_13454(i32 14)
  store i32 %v1_11744, i32* @r5, align 4
  %v3_11754 = call i32 @function_120c0(i32 %v1_11744, i32 ptrtoint (i32* @global_var_15278.308 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1dda0.309 to i8*), align 4
  %v0_11764 = load i32, i32* @r5, align 4
  store i32 %v0_11764, i32* @global_var_1dd9c.310, align 4
  %v0_11768 = load i32, i32* @r6, align 4
  %v1_11768 = trunc i32 %v0_11768 to i8
  store i8 %v1_11768, i8* bitcast (i32* @global_var_1dda1.311 to i8*), align 4
  %v1_1176c = call i32 @function_13454(i32 6)
  store i32 6, i32* %r8.global-to-local, align 4
  store i32 %v1_1176c, i32* @r5, align 4
  %v3_11780 = call i32 @function_120c0(i32 %v1_1176c, i32 ptrtoint (i32* @global_var_15288.313 to i32), i32 6)
  %v0_11788 = load i32, i32* @r5, align 4
  store i32 %v0_11788, i32* @global_var_1dda4.314, align 4
  store i8 6, i8* bitcast (i32* @global_var_1dda8.315 to i8*), align 4
  %v0_11790 = load i32, i32* @r6, align 4
  %v1_11790 = trunc i32 %v0_11790 to i8
  store i8 %v1_11790, i8* bitcast (i32* @global_var_1dda9.316 to i8*), align 4
  %v1_11794 = call i32 @function_13454(i32 8)
  store i32 8, i32* %sb.global-to-local, align 4
  store i32 %v1_11794, i32* @r5, align 4
  %v3_117a8 = call i32 @function_120c0(i32 %v1_11794, i32 ptrtoint (i32* @global_var_15290.318 to i32), i32 8)
  %v0_117ac = load i32, i32* @r7, align 4
  %v0_117b0 = load i32, i32* @r5, align 4
  store i32 %v0_117b0, i32* @global_var_1ddac.319, align 4
  store i8 8, i8* bitcast (i32* @global_var_1ddb0.320 to i8*), align 4
  %v0_117b8 = load i32, i32* @r6, align 4
  %v1_117b8 = trunc i32 %v0_117b8 to i8
  store i8 %v1_117b8, i8* bitcast (i32* @global_var_1ddb1.321 to i8*), align 4
  %v1_117bc = call i32 @function_13454(i32 %v0_117ac)
  %v0_117c0 = load i32, i32* @r7, align 4
  store i32 %v1_117bc, i32* @r5, align 4
  %v3_117cc = call i32 @function_120c0(i32 %v1_117bc, i32 ptrtoint (i32* @global_var_1529c.323 to i32), i32 %v0_117c0)
  %v0_117d4 = load i32, i32* @r5, align 4
  store i32 %v0_117d4, i32* @global_var_1ddb4.324, align 4
  %v0_117d8 = load i32, i32* @r7, align 4
  %v1_117d8 = trunc i32 %v0_117d8 to i8
  store i8 %v1_117d8, i8* bitcast (i32* @global_var_1ddb8.325 to i8*), align 4
  %v0_117dc = load i32, i32* @r6, align 4
  %v1_117dc = trunc i32 %v0_117dc to i8
  store i8 %v1_117dc, i8* bitcast (i32* @global_var_1ddb9.326 to i8*), align 4
  %v1_117e0 = call i32 @function_13454(i32 16)
  store i32 %v1_117e0, i32* @r5, align 4
  %v3_117f0 = call i32 @function_120c0(i32 %v1_117e0, i32 ptrtoint (i32* @global_var_152a4.328 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1ddc0.329 to i8*), align 4
  %v0_11800 = load i32, i32* @r5, align 4
  store i32 %v0_11800, i32* @global_var_1ddbc.330, align 4
  %v0_11804 = load i32, i32* @r6, align 4
  %v1_11804 = trunc i32 %v0_11804 to i8
  store i8 %v1_11804, i8* bitcast (i32* @global_var_1ddc1.331 to i8*), align 4
  %v1_11808 = call i32 @function_13454(i32 14)
  store i32 %v1_11808, i32* @r5, align 4
  %v3_11818 = call i32 @function_120c0(i32 %v1_11808, i32 ptrtoint (i32* @global_var_152b8.333 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1ddc8.334 to i8*), align 4
  %v0_11828 = load i32, i32* @r5, align 4
  store i32 %v0_11828, i32* @global_var_1ddc4.335, align 4
  %v0_1182c = load i32, i32* @r6, align 4
  %v1_1182c = trunc i32 %v0_1182c to i8
  store i8 %v1_1182c, i8* bitcast (i32* @global_var_1ddc9.336 to i8*), align 4
  %v1_11830 = call i32 @function_13454(i32 9)
  store i32 9, i32* %fp.global-to-local, align 4
  store i32 %v1_11830, i32* @r5, align 4
  %v3_11844 = call i32 @function_120c0(i32 %v1_11830, i32 ptrtoint (i32* @global_var_152c8.338 to i32), i32 9)
  %v0_1184c = load i32, i32* @r5, align 4
  store i32 %v0_1184c, i32* @global_var_1ddcc.339, align 4
  store i8 9, i8* bitcast (i32* @global_var_1ddd0.340 to i8*), align 4
  %v0_11854 = load i32, i32* @r6, align 4
  %v1_11854 = trunc i32 %v0_11854 to i8
  store i8 %v1_11854, i8* bitcast (i32* @global_var_1ddd1.341 to i8*), align 4
  %v1_11858 = call i32 @function_13454(i32 19)
  store i32 %v1_11858, i32* @r5, align 4
  %v3_11868 = call i32 @function_120c0(i32 %v1_11858, i32 ptrtoint (i32* @global_var_152d4.343 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1ddd8.344 to i8*), align 4
  %v0_11878 = load i32, i32* @r5, align 4
  store i32 %v0_11878, i32* @global_var_1ddd4.345, align 4
  %v0_1187c = load i32, i32* @r6, align 4
  %v1_1187c = trunc i32 %v0_1187c to i8
  store i8 %v1_1187c, i8* bitcast (i32* @global_var_1ddd9.346 to i8*), align 4
  %v1_11880 = call i32 @function_13454(i32 23)
  store i32 23, i32* %sl.global-to-local, align 4
  store i32 %v1_11880, i32* @r5, align 4
  %v3_11894 = call i32 @function_120c0(i32 %v1_11880, i32 ptrtoint (i32* @global_var_152e8.348 to i32), i32 23)
  %v0_11898 = load i32, i32* %sb.global-to-local, align 4
  %v0_1189c = load i32, i32* @r5, align 4
  store i32 %v0_1189c, i32* @global_var_1dddc.349, align 4
  store i8 23, i8* bitcast (i32* @global_var_1dde0.350 to i8*), align 4
  %v0_118a4 = load i32, i32* @r6, align 4
  %v1_118a4 = trunc i32 %v0_118a4 to i8
  store i8 %v1_118a4, i8* bitcast (i32* @global_var_1dde1.351 to i8*), align 4
  %v1_118a8 = call i32 @function_13454(i32 %v0_11898)
  %v0_118b0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_118a8, i32* @r5, align 4
  %v4_118b8 = call i32 @function_120c0(i32 %v1_118a8, i32 ptrtoint ([9 x i8]* @global_var_15300.353 to i32), i32 %v0_118b0)
  %v0_118c0 = load i32, i32* @r5, align 4
  store i32 %v0_118c0, i32* @global_var_1dde4.354, align 4
  %v1_118c4 = trunc i32 %v0_118b0 to i8
  store i8 %v1_118c4, i8* bitcast (i32* @global_var_1dde8.355 to i8*), align 4
  %v0_118c8 = load i32, i32* @r6, align 4
  %v1_118c8 = trunc i32 %v0_118c8 to i8
  store i8 %v1_118c8, i8* bitcast (i32* @global_var_1dde9.356 to i8*), align 4
  %v1_118cc = call i32 @function_13454(i32 14)
  store i32 %v1_118cc, i32* @r5, align 4
  %v3_118dc = call i32 @function_120c0(i32 %v1_118cc, i32 ptrtoint (i32* @global_var_1530c.358 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1ddf0.359 to i8*), align 4
  %v0_118ec = load i32, i32* @r5, align 4
  store i32 %v0_118ec, i32* @global_var_1ddec.360, align 4
  %v0_118f0 = load i32, i32* @r6, align 4
  %v1_118f0 = trunc i32 %v0_118f0 to i8
  store i8 %v1_118f0, i8* bitcast (i32* @global_var_1ddf1.361 to i8*), align 4
  %v1_118f4 = call i32 @function_13454(i32 19)
  store i32 %v1_118f4, i32* @r5, align 4
  %v3_11904 = call i32 @function_120c0(i32 %v1_118f4, i32 ptrtoint (i32* @global_var_1531c.363 to i32), i32 19)
  %v0_1190c = load i32, i32* %sl.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1ddf8.364 to i8*), align 4
  %v0_11914 = load i32, i32* @r5, align 4
  store i32 %v0_11914, i32* @global_var_1ddf4.365, align 4
  %v0_11918 = load i32, i32* @r6, align 4
  %v1_11918 = trunc i32 %v0_11918 to i8
  store i8 %v1_11918, i8* bitcast (i32* @global_var_1ddf9.366 to i8*), align 4
  %v1_1191c = call i32 @function_13454(i32 %v0_1190c)
  %v0_11924 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_1191c, i32* @r5, align 4
  %v3_1192c = call i32 @function_120c0(i32 %v1_1191c, i32 ptrtoint (i32* @global_var_15330.368 to i32), i32 %v0_11924)
  %v0_11934 = load i32, i32* @r5, align 4
  store i32 %v0_11934, i32* @global_var_1ddfc.369, align 4
  %v1_11938 = trunc i32 %v0_11924 to i8
  store i8 %v1_11938, i8* bitcast (i32* @global_var_1de00.370 to i8*), align 4
  %v0_1193c = load i32, i32* @r6, align 4
  %v1_1193c = trunc i32 %v0_1193c to i8
  store i8 %v1_1193c, i8* bitcast (i32* @global_var_1de01.371 to i8*), align 4
  %v1_11940 = call i32 @function_13454(i32 24)
  store i32 %v1_11940, i32* @r5, align 4
  %v3_11950 = call i32 @function_120c0(i32 %v1_11940, i32 ptrtoint (i32* @global_var_15348.373 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1de08.374 to i8*), align 4
  %v0_11960 = load i32, i32* @r5, align 4
  store i32 %v0_11960, i32* @global_var_1de04.375, align 4
  %v0_11964 = load i32, i32* @r6, align 4
  %v1_11964 = trunc i32 %v0_11964 to i8
  store i8 %v1_11964, i8* bitcast (i32* @global_var_1de09.376 to i8*), align 4
  %v1_11968 = call i32 @function_13454(i32 15)
  store i32 %v1_11968, i32* @r5, align 4
  %v3_11978 = call i32 @function_120c0(i32 %v1_11968, i32 ptrtoint (i32* @global_var_15364.378 to i32), i32 15)
  %v0_11980 = load i32, i32* %r8.global-to-local, align 4
  store i8 15, i8* bitcast (i32* @global_var_1de10.379 to i8*), align 4
  %v0_11988 = load i32, i32* @r5, align 4
  store i32 %v0_11988, i32* @global_var_1de0c.380, align 4
  %v0_1198c = load i32, i32* @r6, align 4
  %v1_1198c = trunc i32 %v0_1198c to i8
  store i8 %v1_1198c, i8* bitcast (i32* @global_var_1de11.381 to i8*), align 4
  %v1_11990 = call i32 @function_13454(i32 %v0_11980)
  %v0_11994 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_11990, i32* @r5, align 4
  %v4_119a0 = call i32 @function_120c0(i32 %v1_11990, i32 ptrtoint ([7 x i8]* @global_var_15374.383 to i32), i32 %v0_11994)
  %v0_119a4 = load i32, i32* @r7, align 4
  %v0_119a8 = load i32, i32* @r5, align 4
  store i32 %v0_119a8, i32* @global_var_1de14.384, align 4
  %v1_119ac = trunc i32 %v0_11994 to i8
  store i8 %v1_119ac, i8* bitcast (i32* @global_var_1de18.385 to i8*), align 4
  %v0_119b0 = load i32, i32* @r6, align 4
  %v1_119b0 = trunc i32 %v0_119b0 to i8
  store i8 %v1_119b0, i8* bitcast (i32* @global_var_1de19.386 to i8*), align 4
  %v1_119b4 = call i32 @function_13454(i32 %v0_119a4)
  %v0_119b8 = load i32, i32* @r7, align 4
  store i32 %v1_119b4, i32* @r5, align 4
  %v4_119c4 = call i32 @function_120c0(i32 %v1_119b4, i32 ptrtoint ([8 x i8]* @global_var_1537c.388 to i32), i32 %v0_119b8)
  %v0_119c8 = load i32, i32* @r7, align 4
  %v0_119cc = load i32, i32* @r5, align 4
  store i32 %v0_119cc, i32* @global_var_1de1c.389, align 4
  %v1_119d0 = trunc i32 %v0_119c8 to i8
  store i8 %v1_119d0, i8* bitcast (i32* @global_var_1de20.390 to i8*), align 4
  %v0_119d4 = load i32, i32* @r6, align 4
  %v1_119d4 = trunc i32 %v0_119d4 to i8
  store i8 %v1_119d4, i8* bitcast (i32* @global_var_1de21.391 to i8*), align 4
  %v1_119d8 = call i32 @function_13454(i32 %v0_119c8)
  %v0_119dc = load i32, i32* @r7, align 4
  store i32 %v1_119d8, i32* @r5, align 4
  %v4_119e8 = call i32 @function_120c0(i32 %v1_119d8, i32 ptrtoint ([8 x i8]* @global_var_15384.393 to i32), i32 %v0_119dc)
  %v0_119f0 = load i32, i32* @r5, align 4
  store i32 %v0_119f0, i32* @global_var_1de24.394, align 4
  %v0_119f4 = load i32, i32* @r7, align 4
  %v1_119f4 = trunc i32 %v0_119f4 to i8
  store i8 %v1_119f4, i8* bitcast (i32* @global_var_1de28.395 to i8*), align 4
  %v0_119f8 = load i32, i32* @r6, align 4
  %v1_119f8 = trunc i32 %v0_119f8 to i8
  store i8 %v1_119f8, i8* bitcast (i32* @global_var_1de29.396 to i8*), align 4
  %v1_119fc = call i32 @function_13454(i32 3)
  store i32 %v1_119fc, i32* @r5, align 4
  %v4_11a0c = call i32 @function_120c0(i32 %v1_119fc, i32 ptrtoint ([4 x i8]* @global_var_1538c.398 to i32), i32 3)
  %v0_11a14 = load i32, i32* %sl.global-to-local, align 4
  store i8 3, i8* bitcast (i32* @global_var_1de30.399 to i8*), align 4
  %v0_11a1c = load i32, i32* @r5, align 4
  store i32 %v0_11a1c, i32* @global_var_1de2c.400, align 4
  %v0_11a20 = load i32, i32* @r6, align 4
  %v1_11a20 = trunc i32 %v0_11a20 to i8
  store i8 %v1_11a20, i8* bitcast (i32* @global_var_1de31.401 to i8*), align 4
  %v1_11a24 = call i32 @function_13454(i32 %v0_11a14)
  %v0_11a2c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_11a24, i32* @r5, align 4
  %v3_11a34 = call i32 @function_120c0(i32 %v1_11a24, i32 ptrtoint (i32* @global_var_15390.403 to i32), i32 %v0_11a2c)
  %v0_11a3c = load i32, i32* @r5, align 4
  store i32 %v0_11a3c, i32* @global_var_1de34.404, align 4
  %v1_11a40 = trunc i32 %v0_11a2c to i8
  store i8 %v1_11a40, i8* bitcast (i32* @global_var_1de38.405 to i8*), align 4
  %v0_11a44 = load i32, i32* @r6, align 4
  %v1_11a44 = trunc i32 %v0_11a44 to i8
  store i8 %v1_11a44, i8* bitcast (i32* @global_var_1de39.406 to i8*), align 4
  %v1_11a48 = call i32 @function_13454(i32 28)
  store i32 %v1_11a48, i32* @r5, align 4
  %v3_11a58 = call i32 @function_120c0(i32 %v1_11a48, i32 ptrtoint (i32* @global_var_153a8.408 to i32), i32 28)
  %v0_11a60 = load i32, i32* %fp.global-to-local, align 4
  store i8 28, i8* bitcast (i32* @global_var_1de40.409 to i8*), align 4
  %v0_11a68 = load i32, i32* @r5, align 4
  store i32 %v0_11a68, i32* @global_var_1de3c.410, align 4
  %v0_11a6c = load i32, i32* @r6, align 4
  %v1_11a6c = trunc i32 %v0_11a6c to i8
  store i8 %v1_11a6c, i8* bitcast (i32* @global_var_1de41.411 to i8*), align 4
  %v1_11a70 = call i32 @function_13454(i32 %v0_11a60)
  %v0_11a74 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_11a70, i32* @r5, align 4
  %v4_11a80 = call i32 @function_120c0(i32 %v1_11a70, i32 ptrtoint ([10 x i8]* @global_var_153c8.413 to i32), i32 %v0_11a74)
  %v0_11a84 = load i32, i32* %sb.global-to-local, align 4
  %v0_11a88 = load i32, i32* @r5, align 4
  store i32 %v0_11a88, i32* @global_var_1de44.414, align 4
  %v1_11a8c = trunc i32 %v0_11a74 to i8
  store i8 %v1_11a8c, i8* bitcast (i32* @global_var_1de48.415 to i8*), align 4
  %v0_11a90 = load i32, i32* @r6, align 4
  %v1_11a90 = trunc i32 %v0_11a90 to i8
  store i8 %v1_11a90, i8* bitcast (i32* @global_var_1de49.416 to i8*), align 4
  %v1_11a94 = call i32 @function_13454(i32 %v0_11a84)
  %v0_11a9c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_11a94, i32* @r5, align 4
  %v4_11aa4 = call i32 @function_120c0(i32 %v1_11a94, i32 ptrtoint ([9 x i8]* @global_var_15300.353 to i32), i32 %v0_11a9c)
  %v0_11aac = load i32, i32* @r5, align 4
  store i32 %v0_11aac, i32* @global_var_1de4c.417, align 4
  %v1_11ab0 = trunc i32 %v0_11a9c to i8
  store i8 %v1_11ab0, i8* bitcast (i32* @global_var_1de50.418 to i8*), align 4
  %v0_11ab4 = load i32, i32* @r6, align 4
  %v1_11ab4 = trunc i32 %v0_11ab4 to i8
  store i8 %v1_11ab4, i8* bitcast (i32* @global_var_1de51.419 to i8*), align 4
  %v1_11ab8 = call i32 @function_13454(i32 5)
  store i32 %v1_11ab8, i32* @r5, align 4
  %v4_11ac8 = call i32 @function_120c0(i32 %v1_11ab8, i32 ptrtoint ([6 x i8]* @global_var_153d4.421 to i32), i32 5)
  %v0_11ad0 = load i32, i32* %r8.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1de58.422 to i8*), align 4
  %v0_11ad8 = load i32, i32* @r5, align 4
  store i32 %v0_11ad8, i32* @global_var_1de54.423, align 4
  %v0_11adc = load i32, i32* @r6, align 4
  %v1_11adc = trunc i32 %v0_11adc to i8
  store i8 %v1_11adc, i8* bitcast (i32* @global_var_1de59.424 to i8*), align 4
  %v1_11ae0 = call i32 @function_13454(i32 %v0_11ad0)
  %v0_11ae4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_11ae0, i32* @r5, align 4
  %v4_11af0 = call i32 @function_120c0(i32 %v1_11ae0, i32 ptrtoint ([7 x i8]* @global_var_153dc.426 to i32), i32 %v0_11ae4)
  %v0_11af8 = load i32, i32* @r5, align 4
  store i32 %v0_11af8, i32* @global_var_1de5c.427, align 4
  %v1_11afc = trunc i32 %v0_11ae4 to i8
  store i8 %v1_11afc, i8* bitcast (i32* @global_var_1de60.428 to i8*), align 4
  %v0_11b00 = load i32, i32* @r6, align 4
  %v1_11b00 = trunc i32 %v0_11b00 to i8
  store i8 %v1_11b00, i8* bitcast (i32* @global_var_1de61.429 to i8*), align 4
  %v1_11b04 = call i32 @function_13454(i32 16)
  store i32 %v1_11b04, i32* @r5, align 4
  %v3_11b14 = call i32 @function_120c0(i32 %v1_11b04, i32 ptrtoint (i32* @global_var_153e4.431 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1de68.432 to i8*), align 4
  %v0_11b24 = load i32, i32* @r5, align 4
  store i32 %v0_11b24, i32* @global_var_1de64.433, align 4
  %v0_11b28 = load i32, i32* @r6, align 4
  %v1_11b28 = trunc i32 %v0_11b28 to i8
  store i8 %v1_11b28, i8* bitcast (i32* @global_var_1de69.434 to i8*), align 4
  %v1_11b2c = call i32 @function_13454(i32 21)
  store i32 21, i32* @r5, align 4
  store i32 %v1_11b2c, i32* @r7, align 4
  %v3_11b40 = call i32 @function_120c0(i32 %v1_11b2c, i32 ptrtoint (i32* @global_var_153f8.436 to i32), i32 21)
  %v0_11b44 = load i32, i32* @r5, align 4
  %v0_11b48 = load i32, i32* @r7, align 4
  store i32 %v0_11b48, i32* @global_var_1de6c.437, align 4
  %v1_11b4c = trunc i32 %v0_11b44 to i8
  store i8 %v1_11b4c, i8* bitcast (i32* @global_var_1de70.438 to i8*), align 4
  %v0_11b50 = load i32, i32* @r6, align 4
  %v1_11b50 = trunc i32 %v0_11b50 to i8
  store i8 %v1_11b50, i8* bitcast (i32* @global_var_1de71.439 to i8*), align 4
  %v1_11b54 = call i32 @function_13454(i32 %v0_11b44)
  %v0_11b58 = load i32, i32* @r5, align 4
  store i32 %v1_11b54, i32* @r7, align 4
  %v3_11b64 = call i32 @function_120c0(i32 %v1_11b54, i32 ptrtoint (i32* @global_var_15410.441 to i32), i32 %v0_11b58)
  %v0_11b6c = load i32, i32* @r7, align 4
  store i32 %v0_11b6c, i32* @global_var_1de74.442, align 4
  %v0_11b70 = load i32, i32* @r5, align 4
  %v1_11b70 = trunc i32 %v0_11b70 to i8
  store i8 %v1_11b70, i8* bitcast (i32* @global_var_1de78.443 to i8*), align 4
  %v0_11b74 = load i32, i32* @r6, align 4
  %v1_11b74 = trunc i32 %v0_11b74 to i8
  store i8 %v1_11b74, i8* bitcast (i32* @global_var_1de79.444 to i8*), align 4
  %v1_11b78 = call i32 @function_13454(i32 17)
  store i32 %v1_11b78, i32* @r5, align 4
  %v3_11b88 = call i32 @function_120c0(i32 %v1_11b78, i32 ptrtoint (i32* @global_var_15428.446 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1de80.447 to i8*), align 4
  %v0_11b98 = load i32, i32* @r5, align 4
  store i32 %v0_11b98, i32* @global_var_1de7c.448, align 4
  %v0_11b9c = load i32, i32* @r6, align 4
  %v1_11b9c = trunc i32 %v0_11b9c to i8
  store i8 %v1_11b9c, i8* bitcast (i32* @global_var_1de81.449 to i8*), align 4
  %v1_11ba0 = call i32 @function_13454(i32 11)
  store i32 %v1_11ba0, i32* @r5, align 4
  %v0_11bb0 = load i32, i32* %r8.global-to-local, align 4
  %v1_11bb0 = add i32 %v0_11bb0, 5
  store i32 %v1_11bb0, i32* %r8.global-to-local, align 4
  %v4_11bb4 = call i32 @function_120c0(i32 %v1_11ba0, i32 ptrtoint ([12 x i8]* @global_var_1543c.451 to i32), i32 11)
  %v0_11bb8 = load i32, i32* %sl.global-to-local, align 4
  %v0_11bbc = load i32, i32* @r5, align 4
  store i32 %v0_11bbc, i32* @global_var_1de84.452, align 4
  %v1_11bc0 = trunc i32 %v1_11bb0 to i8
  store i8 %v1_11bc0, i8* bitcast (i32* @global_var_1de88.453 to i8*), align 4
  %v0_11bc4 = load i32, i32* @r6, align 4
  %v1_11bc4 = trunc i32 %v0_11bc4 to i8
  store i8 %v1_11bc4, i8* bitcast (i32* @global_var_1de89.454 to i8*), align 4
  %v1_11bc8 = call i32 @function_13454(i32 %v0_11bb8)
  %v0_11bd0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_11bc8, i32* @r5, align 4
  %v3_11bd8 = call i32 @function_120c0(i32 %v1_11bc8, i32 ptrtoint (i32* @global_var_15448.456 to i32), i32 %v0_11bd0)
  %v0_11be0 = load i32, i32* @r5, align 4
  store i32 %v0_11be0, i32* @global_var_1de8c.457, align 4
  %v1_11be4 = trunc i32 %v0_11bd0 to i8
  store i8 %v1_11be4, i8* bitcast (i32* @global_var_1de90.458 to i8*), align 4
  %v0_11be8 = load i32, i32* @r6, align 4
  %v1_11be8 = trunc i32 %v0_11be8 to i8
  store i8 %v1_11be8, i8* bitcast (i32* @global_var_1de91.459 to i8*), align 4
  %v1_11bec = call i32 @function_13454(i32 83)
  store i32 %v1_11bec, i32* @r5, align 4
  %v3_11bfc = call i32 @function_120c0(i32 %v1_11bec, i32 ptrtoint (i32* @global_var_1576c.461 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1de98.462 to i8*), align 4
  %v0_11c0c = load i32, i32* @r5, align 4
  store i32 %v0_11c0c, i32* @global_var_1de94.463, align 4
  %v0_11c10 = load i32, i32* @r6, align 4
  %v1_11c10 = trunc i32 %v0_11c10 to i8
  store i8 %v1_11c10, i8* bitcast (i32* @global_var_1de99.464 to i8*), align 4
  %v1_11c14 = call i32 @function_13454(i32 32)
  store i32 %v1_11c14, i32* @r5, align 4
  %v3_11c24 = call i32 @function_120c0(i32 %v1_11c14, i32 ptrtoint (i32* @global_var_157c0.466 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1dea0.467 to i8*), align 4
  %v0_11c34 = load i32, i32* @r5, align 4
  store i32 %v0_11c34, i32* @global_var_1de9c.468, align 4
  %v0_11c38 = load i32, i32* @r6, align 4
  %v1_11c38 = trunc i32 %v0_11c38 to i8
  store i8 %v1_11c38, i8* bitcast (i32* @global_var_1dea1.469 to i8*), align 4
  %v1_11c3c = call i32 @function_13454(i32 48)
  store i32 %v1_11c3c, i32* @r5, align 4
  %v3_11c4c = call i32 @function_120c0(i32 %v1_11c3c, i32 ptrtoint (i32* @global_var_15460.471 to i32), i32 48)
  store i8 48, i8* bitcast (i32* @global_var_1dea8.472 to i8*), align 4
  %v0_11c5c = load i32, i32* @r5, align 4
  store i32 %v0_11c5c, i32* @global_var_1dea4.473, align 4
  %v0_11c60 = load i32, i32* @r6, align 4
  %v1_11c60 = trunc i32 %v0_11c60 to i8
  store i8 %v1_11c60, i8* bitcast (i32* @global_var_1dea9.474 to i8*), align 4
  %v1_11c64 = call i32 @function_13454(i32 12)
  store i32 12, i32* @r7, align 4
  store i32 %v1_11c64, i32* @r5, align 4
  %v3_11c78 = call i32 @function_120c0(i32 %v1_11c64, i32 ptrtoint (i32* @global_var_15494.476 to i32), i32 12)
  %v0_11c7c = load i32, i32* %fp.global-to-local, align 4
  %v0_11c80 = load i32, i32* @r5, align 4
  store i32 %v0_11c80, i32* @global_var_1deac.477, align 4
  %v0_11c84 = load i32, i32* @r7, align 4
  %v1_11c84 = trunc i32 %v0_11c84 to i8
  store i8 %v1_11c84, i8* bitcast (i32* @global_var_1deb0.478 to i8*), align 4
  %v0_11c88 = load i32, i32* @r6, align 4
  %v1_11c88 = trunc i32 %v0_11c88 to i8
  store i8 %v1_11c88, i8* bitcast (i32* @global_var_1deb1.479 to i8*), align 4
  %v1_11c8c = call i32 @function_13454(i32 %v0_11c7c)
  %v0_11c90 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_11c8c, i32* @r5, align 4
  %v3_11c9c = call i32 @function_120c0(i32 %v1_11c8c, i32 ptrtoint (i32* @global_var_154a4.481 to i32), i32 %v0_11c90)
  %v0_11ca4 = load i32, i32* @r5, align 4
  store i32 %v0_11ca4, i32* @global_var_1deb4.482, align 4
  %v1_11ca8 = trunc i32 %v0_11c90 to i8
  store i8 %v1_11ca8, i8* bitcast (i32* @global_var_1deb8.483 to i8*), align 4
  %v0_11cac = load i32, i32* @r6, align 4
  %v1_11cac = trunc i32 %v0_11cac to i8
  store i8 %v1_11cac, i8* bitcast (i32* @global_var_1deb9.484 to i8*), align 4
  %v1_11cb0 = call i32 @function_13454(i32 10)
  store i32 %v1_11cb0, i32* @r5, align 4
  %v0_11cc0 = load i32, i32* %fp.global-to-local, align 4
  %v1_11cc0 = add i32 %v0_11cc0, 1
  store i32 %v1_11cc0, i32* %fp.global-to-local, align 4
  %v3_11cc4 = call i32 @function_120c0(i32 %v1_11cb0, i32 ptrtoint (i32* @global_var_154b0.486 to i32), i32 10)
  %v0_11cc8 = load i32, i32* @r7, align 4
  %v0_11ccc = load i32, i32* @r5, align 4
  store i32 %v0_11ccc, i32* @global_var_1debc.487, align 4
  %v1_11cd0 = trunc i32 %v1_11cc0 to i8
  store i8 %v1_11cd0, i8* bitcast (i32* @global_var_1dec0.488 to i8*), align 4
  %v0_11cd4 = load i32, i32* @r6, align 4
  %v1_11cd4 = trunc i32 %v0_11cd4 to i8
  store i8 %v1_11cd4, i8* bitcast (i32* @global_var_1dec1.489 to i8*), align 4
  %v1_11cd8 = call i32 @function_13454(i32 %v0_11cc8)
  %v0_11cdc = load i32, i32* @r7, align 4
  store i32 %v1_11cd8, i32* @r5, align 4
  %v3_11ce8 = call i32 @function_120c0(i32 %v1_11cd8, i32 ptrtoint (i32* @global_var_154bc.491 to i32), i32 %v0_11cdc)
  %v0_11cf0 = load i32, i32* @r5, align 4
  store i32 %v0_11cf0, i32* @global_var_1dec4.492, align 4
  %v0_11cf4 = load i32, i32* @r7, align 4
  %v1_11cf4 = trunc i32 %v0_11cf4 to i8
  store i8 %v1_11cf4, i8* bitcast (i32* @global_var_1dec8.493 to i8*), align 4
  %v0_11cf8 = load i32, i32* @r6, align 4
  %v1_11cf8 = trunc i32 %v0_11cf8 to i8
  store i8 %v1_11cf8, i8* bitcast (i32* @global_var_1dec9.494 to i8*), align 4
  %v1_11cfc = call i32 @function_13454(i32 16)
  store i32 %v1_11cfc, i32* @r5, align 4
  %v3_11d0c = call i32 @function_120c0(i32 %v1_11cfc, i32 ptrtoint (i32* @global_var_154cc.496 to i32), i32 16)
  store i8 16, i8* bitcast (i32* @global_var_1ded0.497 to i8*), align 4
  %v0_11d1c = load i32, i32* @r5, align 4
  store i32 %v0_11d1c, i32* @global_var_1decc.498, align 4
  %v0_11d20 = load i32, i32* @r6, align 4
  %v1_11d20 = trunc i32 %v0_11d20 to i8
  store i8 %v1_11d20, i8* bitcast (i32* @global_var_1ded1.499 to i8*), align 4
  %v1_11d24 = call i32 @function_13454(i32 19)
  store i32 %v1_11d24, i32* @r5, align 4
  %v3_11d34 = call i32 @function_120c0(i32 %v1_11d24, i32 ptrtoint (i32* @global_var_154e0.501 to i32), i32 19)
  %v0_11d3c = load i32, i32* %sb.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1ded8.502 to i8*), align 4
  %v0_11d44 = load i32, i32* @r5, align 4
  store i32 %v0_11d44, i32* @global_var_1ded4.503, align 4
  %v0_11d48 = load i32, i32* @r6, align 4
  %v1_11d48 = trunc i32 %v0_11d48 to i8
  store i8 %v1_11d48, i8* bitcast (i32* @global_var_1ded9.504 to i8*), align 4
  %v1_11d4c = call i32 @function_13454(i32 %v0_11d3c)
  %v0_11d54 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_11d4c, i32* @r5, align 4
  %v4_11d5c = call i32 @function_120c0(i32 %v1_11d4c, i32 ptrtoint ([9 x i8]* @global_var_154f4.506 to i32), i32 %v0_11d54)
  %v0_11d60 = load i32, i32* %r8.global-to-local, align 4
  %v0_11d64 = load i32, i32* @r5, align 4
  store i32 %v0_11d64, i32* @global_var_1dedc.507, align 4
  %v1_11d68 = trunc i32 %v0_11d54 to i8
  store i8 %v1_11d68, i8* bitcast (i32* @global_var_1dee0.508 to i8*), align 4
  %v0_11d6c = load i32, i32* @r6, align 4
  %v1_11d6c = trunc i32 %v0_11d6c to i8
  store i8 %v1_11d6c, i8* bitcast (i32* @global_var_1dee1.509 to i8*), align 4
  %v1_11d70 = call i32 @function_13454(i32 %v0_11d60)
  %v0_11d78 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_11d70, i32* @r5, align 4
  %v3_11d80 = call i32 @function_120c0(i32 %v1_11d70, i32 ptrtoint (i32* @global_var_15454.511 to i32), i32 %v0_11d78)
  %v0_11d84 = load i32, i32* @r7, align 4
  %v0_11d88 = load i32, i32* @r5, align 4
  store i32 %v0_11d88, i32* @global_var_1dee4.512, align 4
  %v1_11d8c = trunc i32 %v0_11d78 to i8
  store i8 %v1_11d8c, i8* bitcast (i32* @global_var_1dee8.513 to i8*), align 4
  %v0_11d90 = load i32, i32* @r6, align 4
  %v1_11d90 = trunc i32 %v0_11d90 to i8
  store i8 %v1_11d90, i8* bitcast (i32* @global_var_1dee9.514 to i8*), align 4
  %v1_11d94 = call i32 @function_13454(i32 %v0_11d84)
  %v0_11d98 = load i32, i32* @r7, align 4
  store i32 %v1_11d94, i32* @r5, align 4
  %v3_11da4 = call i32 @function_120c0(i32 %v1_11d94, i32 ptrtoint (i32* @global_var_15500.516 to i32), i32 %v0_11d98)
  %v0_11dac = load i32, i32* @r5, align 4
  store i32 %v0_11dac, i32* @global_var_1deec.517, align 4
  %v0_11db0 = load i32, i32* @r7, align 4
  %v1_11db0 = trunc i32 %v0_11db0 to i8
  store i8 %v1_11db0, i8* bitcast (i32* @global_var_1def0.518 to i8*), align 4
  %v0_11db4 = load i32, i32* @r6, align 4
  %v1_11db4 = trunc i32 %v0_11db4 to i8
  store i8 %v1_11db4, i8* bitcast (i32* @global_var_1def1.519 to i8*), align 4
  %v1_11db8 = call i32 @function_13454(i32 18)
  store i32 %v1_11db8, i32* @r5, align 4
  %v3_11dc8 = call i32 @function_120c0(i32 %v1_11db8, i32 ptrtoint (i32* @global_var_15510.521 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1def8.522 to i8*), align 4
  %v0_11dd8 = load i32, i32* @r5, align 4
  store i32 %v0_11dd8, i32* @global_var_1def4.523, align 4
  %v0_11ddc = load i32, i32* @r6, align 4
  %v1_11ddc = trunc i32 %v0_11ddc to i8
  store i8 %v1_11ddc, i8* bitcast (i32* @global_var_1def9.524 to i8*), align 4
  %v1_11de0 = call i32 @function_13454(i32 25)
  store i32 %v1_11de0, i32* @r5, align 4
  %v3_11df0 = call i32 @function_120c0(i32 %v1_11de0, i32 ptrtoint (i32* @global_var_15524.526 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1df00.527 to i8*), align 4
  %v0_11e00 = load i32, i32* @r5, align 4
  store i32 %v0_11e00, i32* @global_var_1defc.528, align 4
  %v0_11e04 = load i32, i32* @r6, align 4
  %v1_11e04 = trunc i32 %v0_11e04 to i8
  store i8 %v1_11e04, i8* bitcast (i32* @global_var_1df01.529 to i8*), align 4
  %v1_11e08 = call i32 @function_13454(i32 115)
  store i32 115, i32* @r5, align 4
  store i32 %v1_11e08, i32* @r7, align 4
  %v3_11e1c = call i32 @function_120c0(i32 %v1_11e08, i32 ptrtoint (i32* @global_var_15540.531 to i32), i32 115)
  %v0_11e20 = load i32, i32* @r5, align 4
  %v0_11e24 = load i32, i32* @r7, align 4
  store i32 %v0_11e24, i32* @global_var_1df04.532, align 4
  %v1_11e28 = trunc i32 %v0_11e20 to i8
  store i8 %v1_11e28, i8* bitcast (i32* @global_var_1df08.533 to i8*), align 4
  %v0_11e2c = load i32, i32* @r6, align 4
  %v1_11e2c = trunc i32 %v0_11e2c to i8
  store i8 %v1_11e2c, i8* bitcast (i32* @global_var_1df09.534 to i8*), align 4
  %v1_11e30 = call i32 @function_13454(i32 %v0_11e20)
  %v0_11e34 = load i32, i32* @r5, align 4
  store i32 %v1_11e30, i32* @r7, align 4
  %v3_11e40 = call i32 @function_120c0(i32 %v1_11e30, i32 ptrtoint (i32* @global_var_155b4.536 to i32), i32 %v0_11e34)
  %v0_11e48 = load i32, i32* @r7, align 4
  store i32 %v0_11e48, i32* @global_var_1df0c.537, align 4
  %v0_11e4c = load i32, i32* @r5, align 4
  %v1_11e4c = trunc i32 %v0_11e4c to i8
  store i8 %v1_11e4c, i8* bitcast (i32* @global_var_1df10.538 to i8*), align 4
  %v0_11e50 = load i32, i32* @r6, align 4
  %v1_11e50 = trunc i32 %v0_11e50 to i8
  store i8 %v1_11e50, i8* bitcast (i32* @global_var_1df11.539 to i8*), align 4
  %v1_11e54 = call i32 @function_13454(i32 79)
  store i32 %v1_11e54, i32* @r5, align 4
  %v3_11e64 = call i32 @function_120c0(i32 %v1_11e54, i32 ptrtoint (i32* @global_var_15628.541 to i32), i32 79)
  store i8 79, i8* bitcast (i32* @global_var_1df18.542 to i8*), align 4
  %v0_11e74 = load i32, i32* @r5, align 4
  store i32 %v0_11e74, i32* @global_var_1df14.543, align 4
  %v0_11e78 = load i32, i32* @r6, align 4
  %v1_11e78 = trunc i32 %v0_11e78 to i8
  store i8 %v1_11e78, i8* bitcast (i32* @global_var_1df19.544 to i8*), align 4
  %v1_11e7c = call i32 @function_13454(i32 114)
  store i32 114, i32* @r5, align 4
  store i32 %v1_11e7c, i32* @r7, align 4
  %v3_11e90 = call i32 @function_120c0(i32 %v1_11e7c, i32 ptrtoint (i32* @global_var_15678.546 to i32), i32 114)
  %v0_11e94 = load i32, i32* @r5, align 4
  %v0_11e98 = load i32, i32* @r7, align 4
  store i32 %v0_11e98, i32* @global_var_1df1c.547, align 4
  %v1_11e9c = trunc i32 %v0_11e94 to i8
  store i8 %v1_11e9c, i8* bitcast (i32* @global_var_1df20.548 to i8*), align 4
  %v0_11ea0 = load i32, i32* @r6, align 4
  %v1_11ea0 = trunc i32 %v0_11ea0 to i8
  store i8 %v1_11ea0, i8* bitcast (i32* @global_var_1df21.549 to i8*), align 4
  %v1_11ea4 = call i32 @function_13454(i32 %v0_11e94)
  %v0_11ea8 = load i32, i32* @r5, align 4
  store i32 %v1_11ea4, i32* @r7, align 4
  %v3_11eb4 = call i32 @function_120c0(i32 %v1_11ea4, i32 ptrtoint (i32* @global_var_156ec.551 to i32), i32 %v0_11ea8)
  %v0_11ebc = load i32, i32* @r5, align 4
  %v1_11ebc = trunc i32 %v0_11ebc to i8
  store i8 %v1_11ebc, i8* bitcast (i32* @global_var_1df28.552 to i8*), align 4
  %v0_11ec0 = load i32, i32* @r7, align 4
  store i32 %v0_11ec0, i32* @global_var_1df24.553, align 4
  %v0_11ec4 = load i32, i32* @r6, align 4
  %v1_11ec4 = trunc i32 %v0_11ec4 to i8
  store i8 %v1_11ec4, i8* bitcast (i32* @global_var_1df29.554 to i8*), align 4
  %v1_11ec8 = call i32 @function_13454(i32 14)
  store i32 %v1_11ec8, i32* @r5, align 4
  %v3_11ed8 = call i32 @function_120c0(i32 %v1_11ec8, i32 ptrtoint (i32* @global_var_1530c.358 to i32), i32 14)
  store i8 14, i8* bitcast (i32* @global_var_1df30.555 to i8*), align 4
  %v0_11ee8 = load i32, i32* @r5, align 4
  store i32 %v0_11ee8, i32* @global_var_1df2c.556, align 4
  %v0_11eec = load i32, i32* @r6, align 4
  %v1_11eec = trunc i32 %v0_11eec to i8
  store i8 %v1_11eec, i8* bitcast (i32* @global_var_1df31.557 to i8*), align 4
  %v1_11ef0 = call i32 @function_13454(i32 19)
  store i32 %v1_11ef0, i32* @r5, align 4
  %v3_11f00 = call i32 @function_120c0(i32 %v1_11ef0, i32 ptrtoint (i32* @global_var_1531c.363 to i32), i32 19)
  %v0_11f08 = load i32, i32* %sl.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1df38.558 to i8*), align 4
  %v0_11f10 = load i32, i32* @r5, align 4
  store i32 %v0_11f10, i32* @global_var_1df34.559, align 4
  %v0_11f14 = load i32, i32* @r6, align 4
  %v1_11f14 = trunc i32 %v0_11f14 to i8
  store i8 %v1_11f14, i8* bitcast (i32* @global_var_1df39.560 to i8*), align 4
  %v1_11f18 = call i32 @function_13454(i32 %v0_11f08)
  %v0_11f20 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_11f18, i32* @r5, align 4
  %v3_11f28 = call i32 @function_120c0(i32 %v1_11f18, i32 ptrtoint (i32* @global_var_152e8.348 to i32), i32 %v0_11f20)
  %v0_11f2c = load i32, i32* %fp.global-to-local, align 4
  %v0_11f30 = load i32, i32* @r5, align 4
  store i32 %v0_11f30, i32* @global_var_1df3c.561, align 4
  %v1_11f34 = trunc i32 %v0_11f20 to i8
  store i8 %v1_11f34, i8* bitcast (i32* @global_var_1df40.562 to i8*), align 4
  %v0_11f38 = load i32, i32* @r6, align 4
  %v1_11f38 = trunc i32 %v0_11f38 to i8
  store i8 %v1_11f38, i8* bitcast (i32* @global_var_1df41.563 to i8*), align 4
  %v1_11f3c = call i32 @function_13454(i32 %v0_11f2c)
  %v0_11f44 = load i32, i32* %fp.global-to-local, align 4
  %v4_11f4c = call i32 @function_120c0(i32 %v1_11f3c, i32 ptrtoint ([11 x i8]* @global_var_15760.565 to i32), i32 %v0_11f44)
  %v0_11f50 = load i32, i32* @r6, align 4
  %v1_11f50 = trunc i32 %v0_11f50 to i8
  store i8 %v1_11f50, i8* bitcast (i32* @global_var_1df49.566 to i8*), align 4
  store i32 %v1_11f3c, i32* @global_var_1df44.567, align 4
  %v1_11f58 = trunc i32 %v0_11f44 to i8
  store i8 %v1_11f58, i8* bitcast (i32* @global_var_1df48.568 to i8*), align 4
  %v2_11f5c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11f5c, i32* @r4, align 4
  store i32 %v6_11648, i32* @r5, align 4
  store i32 %v9_11648, i32* @r6, align 4
  store i32 %v12_11648, i32* @r7, align 4
  ret i32 %v4_11f4c

; uselistorder directives
  uselistorder i32 %v1_11f18, { 1, 0 }
  uselistorder i32 %v1_11ea4, { 1, 0 }
  uselistorder i32 %v1_11e7c, { 1, 0 }
  uselistorder i32 %v1_11e30, { 1, 0 }
  uselistorder i32 %v1_11e08, { 1, 0 }
  uselistorder i32 %v1_11d94, { 1, 0 }
  uselistorder i32 %v1_11d70, { 1, 0 }
  uselistorder i32 %v1_11d4c, { 1, 0 }
  uselistorder i32 %v1_11cd8, { 1, 0 }
  uselistorder i32 %v1_11c8c, { 1, 0 }
  uselistorder i32 %v1_11c64, { 1, 0 }
  uselistorder i32 %v1_11bc8, { 1, 0 }
  uselistorder i32 %v1_11b54, { 1, 0 }
  uselistorder i32 %v1_11b2c, { 1, 0 }
  uselistorder i32 %v1_11ae0, { 1, 0 }
  uselistorder i32 %v1_11a94, { 1, 0 }
  uselistorder i32 %v1_11a70, { 1, 0 }
  uselistorder i32 %v1_11a24, { 1, 0 }
  uselistorder i32 %v1_119d8, { 1, 0 }
  uselistorder i32 %v1_119b4, { 1, 0 }
  uselistorder i32 %v1_11990, { 1, 0 }
  uselistorder i32 %v1_1191c, { 1, 0 }
  uselistorder i32 %v1_118a8, { 1, 0 }
  uselistorder i32 %v1_11880, { 1, 0 }
  uselistorder i32 %v1_11830, { 1, 0 }
  uselistorder i32 %v1_117bc, { 1, 0 }
  uselistorder i32 %v1_11794, { 1, 0 }
  uselistorder i32 %v1_1176c, { 1, 0 }
  uselistorder i32 %v1_116cc, { 1, 0 }
  uselistorder i32 %v1_11680, { 1, 0 }
  uselistorder i32 %v1_11650, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 3, 5, 4, 7, 6, 8 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 3, 4, 5, 7, 6, 8 }
  uselistorder i32 114, { 1, 2, 0 }
  uselistorder i32 115, { 1, 2, 0 }
  uselistorder i8 17, { 1, 0, 2, 3 }
  uselistorder i8 3, { 2, 1, 0 }
  uselistorder i8 16, { 15, 16, 17, 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i8 6, { 0, 7, 5, 8, 6, 9, 1, 10, 11, 2, 3, 4 }
  uselistorder i8 4, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 5, { 11, 12, 13, 0, 1, 14, 2, 3, 4, 5, 6, 7, 8, 10, 15, 9 }
  uselistorder i32 (i32, i32, i32)* @function_120c0, { 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_1dd54.270 to i32), { 5, 0, 1, 2, 3, 4, 6 }
}

define i32 @function_12044(i8* %arg1) local_unnamed_addr {
dec_label_pc_12044:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_12048 = load i8, i8* %arg1, align 1
  %v4_12048 = zext i8 %v3_12048 to i32
  %v2_1204c = icmp eq i8 %v3_12048, 0
  br i1 %v2_1204c, label %dec_label_pc_12068, label %bb

dec_label_pc_12068:                               ; preds = %dec_label_pc_12058, %dec_label_pc_12044
  %merge = phi i32 [ %v4_12048, %dec_label_pc_12044 ], [ %v1_12058, %dec_label_pc_12058 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_12044
  br label %dec_label_pc_12058

dec_label_pc_12058:                               ; preds = %dec_label_pc_12058, %bb
  %v0_12058 = phi i32 [ %v1_12058, %dec_label_pc_12058 ], [ 0, %bb ]
  %v1_12058 = add i32 %v0_12058, 1
  %v2_1205c = add i32 %v1_12058, %tmp
  %v3_1205c = inttoptr i32 %v2_1205c to i8*
  %v4_1205c = load i8, i8* %v3_1205c, align 1
  %v2_12060 = icmp eq i8 %v4_1205c, 0
  br i1 %v2_12060, label %dec_label_pc_12068, label %dec_label_pc_12058

; uselistorder directives
  uselistorder i32 %v1_12058, { 1, 0, 2 }
}

define i32 @function_1206c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1206c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_1206c = load i8, i8* %arg1, align 1
  %v3_1206c = zext i8 %v2_1206c to i32
  %v2_12070 = icmp eq i8 %v2_1206c, 0
  br i1 %v2_12070, label %dec_label_pc_120b4, label %dec_label_pc_12078

dec_label_pc_12078:                               ; preds = %dec_label_pc_1206c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1207c

dec_label_pc_1207c:                               ; preds = %dec_label_pc_1207c, %dec_label_pc_12078
  %v0_1207c = phi i32 [ %v1_1207c, %dec_label_pc_1207c ], [ 0, %dec_label_pc_12078 ]
  %v1_1207c = add i32 %v0_1207c, 1
  store i32 %v1_1207c, i32* %ip.global-to-local, align 4
  %v2_12080 = add i32 %v1_1207c, %tmp
  %v3_12080 = inttoptr i32 %v2_12080 to i8*
  %v4_12080 = load i8, i8* %v3_12080, align 1
  %v2_12084 = icmp eq i8 %v4_12080, 0
  br i1 %v2_12084, label %dec_label_pc_1208c, label %dec_label_pc_1207c

dec_label_pc_1208c:                               ; preds = %dec_label_pc_1207c
  %v7_1208c = icmp eq i32 %v0_1207c, -2
  br i1 %v7_1208c, label %dec_label_pc_120ac, label %dec_label_pc_12098.preheader

dec_label_pc_12098.preheader:                     ; preds = %dec_label_pc_1208c, %dec_label_pc_120b4
  %storemerge = phi i32 [ %v3_1206c, %dec_label_pc_120b4 ], [ %v1_1207c, %dec_label_pc_1208c ]
  %v2_120a4.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12098

dec_label_pc_12098:                               ; preds = %dec_label_pc_12098.dec_label_pc_12098_crit_edge, %dec_label_pc_12098.preheader
  %v2_120a4 = phi i32 [ %v5_120a4, %dec_label_pc_12098.dec_label_pc_12098_crit_edge ], [ %v2_120a4.pre, %dec_label_pc_12098.preheader ]
  %v0_1209c = phi i32 [ %v0_1209c.pre, %dec_label_pc_12098.dec_label_pc_12098_crit_edge ], [ %tmp, %dec_label_pc_12098.preheader ]
  %v0_12098 = phi i32 [ %v0_12098.pre, %dec_label_pc_12098.dec_label_pc_12098_crit_edge ], [ %storemerge, %dec_label_pc_12098.preheader ]
  %v1_12098 = add i32 %v0_12098, -1
  store i32 %v1_12098, i32* @r2, align 4
  %v1_1209c = inttoptr i32 %v0_1209c to i8*
  %v2_1209c = load i8, i8* %v1_1209c, align 1
  %v5_1209c = add i32 %v0_1209c, 1
  store i32 %v5_1209c, i32* %r1.global-to-local, align 4
  %v3_120a0 = icmp eq i32 %v0_12098, 0
  %v3_120a4 = inttoptr i32 %v2_120a4 to i8*
  store i8 %v2_1209c, i8* %v3_120a4, align 1
  %v4_120a4 = load i32, i32* @r0, align 4
  %v5_120a4 = add i32 %v4_120a4, 1
  store i32 %v5_120a4, i32* @r0, align 4
  br i1 %v3_120a0, label %dec_label_pc_120ac.loopexit, label %dec_label_pc_12098.dec_label_pc_12098_crit_edge

dec_label_pc_12098.dec_label_pc_12098_crit_edge:  ; preds = %dec_label_pc_12098
  %v0_12098.pre = load i32, i32* @r2, align 4
  %v0_1209c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12098

dec_label_pc_120ac.loopexit:                      ; preds = %dec_label_pc_12098
  %v0_120ac.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_120ac

dec_label_pc_120ac:                               ; preds = %dec_label_pc_120ac.loopexit, %dec_label_pc_1208c
  %v0_120ac = phi i32 [ %v0_120ac.pre, %dec_label_pc_120ac.loopexit ], [ %v1_1207c, %dec_label_pc_1208c ]
  ret i32 %v0_120ac

dec_label_pc_120b4:                               ; preds = %dec_label_pc_1206c
  store i32 %v3_1206c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12098.preheader

; uselistorder directives
  uselistorder i32 %v5_120a4, { 1, 0 }
  uselistorder i32 %v0_1209c, { 1, 0 }
  uselistorder i32 %v1_1207c, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_1206c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12098.preheader, { 1, 0 }
}

define i32 @function_120c0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_120c0:
  %v2_120c0 = icmp eq i32 %arg3, 0
  br i1 %v2_120c0, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_120cc, %dec_label_pc_120c0
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_120c0
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_120cc

dec_label_pc_120cc:                               ; preds = %dec_label_pc_120cc, %bb
  %v0_120cc = phi i32 [ %v1_120d4, %dec_label_pc_120cc ], [ 0, %bb ]
  %v2_120cc = add i32 %v0_120cc, %arg2
  %v3_120cc = inttoptr i32 %v2_120cc to i8*
  %v4_120cc = load i8, i8* %v3_120cc, align 1
  %v4_120d0 = add i32 %v0_120cc, %arg1
  %v5_120d0 = inttoptr i32 %v4_120d0 to i8*
  store i8 %v4_120cc, i8* %v5_120d0, align 1
  %v0_120d4 = load i32, i32* @ip, align 4
  %v1_120d4 = add i32 %v0_120d4, 1
  store i32 %v1_120d4, i32* @ip, align 4
  %v9_120d8 = icmp eq i32 %v1_120d4, %arg3
  br i1 %v9_120d8, label %.loopexit, label %dec_label_pc_120cc

; uselistorder directives
  uselistorder i32 %v1_120d4, { 1, 2, 0 }
}

define i32 @function_120e4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_120e4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_120e4 = icmp eq i32 %arg2, 0
  br i1 %v2_120e4, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_120f4, %dec_label_pc_120e4
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_120e4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_120f4

dec_label_pc_120f4:                               ; preds = %dec_label_pc_120f4.dec_label_pc_120f4_crit_edge, %bb
  %v2_120f4 = phi i32 [ %v1_120f8, %dec_label_pc_120f4.dec_label_pc_120f4_crit_edge ], [ 0, %bb ]
  %v0_120f4.off0 = phi i8 [ %extract.t, %dec_label_pc_120f4.dec_label_pc_120f4_crit_edge ], [ 0, %bb ]
  %v4_120f4 = add i32 %v2_120f4, %arg1
  %v5_120f4 = inttoptr i32 %v4_120f4 to i8*
  store i8 %v0_120f4.off0, i8* %v5_120f4, align 1
  %v0_120f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_120f8 = add i32 %v0_120f8, 1
  store i32 %v1_120f8, i32* %r3.global-to-local, align 4
  %v9_120fc = icmp eq i32 %v1_120f8, %arg2
  br i1 %v9_120fc, label %.loopexit, label %dec_label_pc_120f4.dec_label_pc_120f4_crit_edge

dec_label_pc_120f4.dec_label_pc_120f4_crit_edge:  ; preds = %dec_label_pc_120f4
  %v0_120f4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_120f4.pre to i8
  br label %dec_label_pc_120f4

; uselistorder directives
  uselistorder i32 %v1_120f8, { 1, 2, 0 }
}

define i32 @function_12108(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12108:
  store i32 %arg4, i32* @lr, align 4
  %v7_1211c = icmp sgt i32 %arg4, %arg2
  br i1 %v7_1211c, label %dec_label_pc_12120, label %dec_label_pc_12128

dec_label_pc_12120:                               ; preds = %dec_label_pc_1213c, %dec_label_pc_12108, %dec_label_pc_12128
  ret i32 -1

dec_label_pc_12128:                               ; preds = %dec_label_pc_12108
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_12120, label %dec_label_pc_12130

dec_label_pc_12130:                               ; preds = %dec_label_pc_12128
  br label %dec_label_pc_12148

dec_label_pc_1213c:                               ; preds = %dec_label_pc_12160, %dec_label_pc_12148
  %v1_1213c = add i32 %v0_12168, 1
  %v9_12140 = icmp eq i32 %v1_1213c, %arg2
  br i1 %v9_12140, label %dec_label_pc_12120, label %dec_label_pc_12148

dec_label_pc_12148:                               ; preds = %dec_label_pc_1213c, %dec_label_pc_12130
  %v0_12168 = phi i32 [ %v1_1213c, %dec_label_pc_1213c ], [ 0, %dec_label_pc_12130 ]
  %v0_12154 = phi i32 [ %v1_12154., %dec_label_pc_1213c ], [ 0, %dec_label_pc_12130 ]
  %v2_12148 = add i32 %v0_12154, %arg3
  %v3_12148 = inttoptr i32 %v2_12148 to i8*
  %v4_12148 = load i8, i8* %v3_12148, align 1
  %v2_1214c = add i32 %v0_12168, %arg1
  %v3_1214c = inttoptr i32 %v2_1214c to i8*
  %v4_1214c = load i8, i8* %v3_1214c, align 1
  %v9_12150 = icmp eq i8 %v4_1214c, %v4_12148
  %v1_12154 = add i32 %v0_12154, 1
  %v1_12154. = select i1 %v9_12150, i32 %v1_12154, i32 0
  br i1 %v9_12150, label %dec_label_pc_12160, label %dec_label_pc_1213c

dec_label_pc_12160:                               ; preds = %dec_label_pc_12148
  %v9_12160 = icmp eq i32 %v1_12154., %arg4
  br i1 %v9_12160, label %dec_label_pc_12168, label %dec_label_pc_1213c

dec_label_pc_12168:                               ; preds = %dec_label_pc_12160
  %v1_12168 = add i32 %v0_12168, 1
  ret i32 %v1_12168

; uselistorder directives
  uselistorder i1 %v9_12150, { 1, 0 }
  uselistorder i32 %v0_12154, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12120, { 0, 2, 1 }
}

define i32 @function_12170(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12170:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_12170 = load i32, i32* @r4, align 4
  store i32 %v3_12170, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1217c

dec_label_pc_1217c:                               ; preds = %.thread, %dec_label_pc_12194, %bb, %dec_label_pc_12170
  %v0_1217c = phi i32 [ %tmp, %dec_label_pc_12170 ], [ %v5_1217c, %bb ], [ %v5_1217c, %dec_label_pc_12194 ], [ %v5_1217c, %.thread ]
  %v1_1217c = inttoptr i32 %v0_1217c to i8*
  %v2_1217c = load i8, i8* %v1_1217c, align 1
  %v3_1217c = zext i8 %v2_1217c to i32
  %v5_1217c = add i32 %v0_1217c, 1
  store i32 %v5_1217c, i32* %r5.global-to-local, align 4
  %v7_12184 = icmp eq i8 %v2_1217c, 9
  br i1 %v7_12184, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1217c
  store i32 %v3_1217c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1217c

bb:                                               ; preds = %dec_label_pc_1217c
  %v8_12188 = icmp eq i8 %v2_1217c, 32
  store i32 %v3_1217c, i32* %r4.global-to-local, align 4
  br i1 %v8_12188, label %dec_label_pc_1217c, label %dec_label_pc_12194

dec_label_pc_12194:                               ; preds = %bb
  %v7_12194 = icmp eq i8 %v2_1217c, 10
  br i1 %v7_12194, label %dec_label_pc_1217c, label %dec_label_pc_1219c

dec_label_pc_1219c:                               ; preds = %dec_label_pc_12194
  %v7_1219c = icmp eq i8 %v2_1217c, 45
  br i1 %v7_1219c, label %dec_label_pc_1227c, label %dec_label_pc_121a4

dec_label_pc_121a4:                               ; preds = %dec_label_pc_1219c
  %v7_121a4 = icmp eq i8 %v2_1217c, 43
  br i1 %v7_121a4, label %bb48, label %dec_label_pc_121b4

bb48:                                             ; preds = %dec_label_pc_121a4
  %v2_121a8 = inttoptr i32 %v5_1217c to i8*
  %v3_121a8 = load i8, i8* %v2_121a8, align 1
  %v4_121a8 = zext i8 %v3_121a8 to i32
  store i32 %v4_121a8, i32* %r4.global-to-local, align 4
  %v6_121a8 = add i32 %v0_1217c, 2
  store i32 %v6_121a8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_121b4

dec_label_pc_121b4:                               ; preds = %bb48, %dec_label_pc_121a4, %dec_label_pc_1227c
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_1227c ], [ 2147483647, %dec_label_pc_121a4 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_1227c ], [ 0, %dec_label_pc_121a4 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_121bc = call i32 @function_12760(i32 %storemerge1, i32 %arg2)
  %v0_121c0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_121c0, i32* @r1, align 4
  store i32 %v2_121bc, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_121cc = call i32 @function_12650()
  store i32 %v0_121cc, i32* @lr, align 4
  %v0_121dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_121dc

dec_label_pc_121dc:                               ; preds = %.thread8, %dec_label_pc_121b4
  %v2_1225811 = phi i32 [ %v1_1227426, %.thread8 ], [ 0, %dec_label_pc_121b4 ]
  %v1_12234 = phi i32 [ %v0_1226824, %.thread8 ], [ 0, %dec_label_pc_121b4 ]
  %v1_1221c = phi i32 [ %v3_12260, %.thread8 ], [ %v0_121dc.pre, %dec_label_pc_121b4 ]
  %v1_121dc = urem i32 %v1_1221c, 256
  %v1_121e0 = add nsw i32 %v1_121dc, -48
  %v1_121e8 = add nsw i32 %v1_121dc, -97
  %v1_121ec = add i32 %v1_1221c, -48
  %v1_121f0 = add nsw i32 %v1_121dc, -65
  %tmp71 = icmp ult i32 %v1_121e0, 10
  br i1 %tmp71, label %dec_label_pc_12220, label %dec_label_pc_121f8

dec_label_pc_121f8:                               ; preds = %dec_label_pc_121dc
  %v2_121f8 = icmp ugt i32 %v1_121f0, 24
  %v7_121f8 = icmp eq i32 %v1_121f0, 25
  %v2_121fc = xor i1 %v7_121f8, true
  %v3_121fc = and i1 %v2_121f8, %v2_121fc
  br i1 %v3_121fc, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_121f8
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_121f8, %bb49
  %v0_1221020 = phi i32 [ %v1_121ec, %dec_label_pc_121f8 ], [ 0, %bb49 ]
  %v2_12200 = xor i1 %v2_121f8, true
  %v3_12200 = or i1 %v7_121f8, %v2_12200
  br i1 %v3_12200, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_12210 = phi i32 [ %v0_1221020, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_121fc, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_12208 = icmp ugt i32 %v1_121e8, 24
  %v11_12208 = icmp eq i32 %v1_121e8, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_1220c = phi i1 [ %v7_121f8, %bb52 ], [ %v11_12208, %bb53 ]
  %v0_1220c = phi i1 [ %v2_121f8, %bb52 ], [ %v6_12208, %bb53 ]
  %v2_1220c = xor i1 %v1_1220c, true
  %v3_1220c = and i1 %v0_1220c, %v2_1220c
  br i1 %v3_1220c, label %dec_label_pc_12268, label %dec_label_pc_12210

dec_label_pc_12210:                               ; preds = %bb54
  %v2_12210 = icmp eq i32 %v0_12210, 0
  %. = select i1 %v2_12210, i32 87, i32 55
  %v2_1221c = sub i32 %v1_1221c, %.
  br label %dec_label_pc_12220

dec_label_pc_12220:                               ; preds = %dec_label_pc_121dc, %dec_label_pc_12210
  %v0_1223434 = phi i32 [ %v1_121f0, %dec_label_pc_121dc ], [ %., %dec_label_pc_12210 ]
  %v3_1225812 = phi i32 [ %v1_121ec, %dec_label_pc_121dc ], [ %v2_1221c, %dec_label_pc_12210 ]
  %v1_12220 = load i32, i32* %r6.global-to-local, align 4
  %v6_12224 = icmp slt i32 %v3_1225812, %v1_12220
  br i1 %v6_12224, label %dec_label_pc_12228, label %dec_label_pc_12268

dec_label_pc_12228:                               ; preds = %dec_label_pc_12220
  %v3_12228 = icmp uge i32 %v2_1225811, %v0_121cc
  %v9_12228 = icmp eq i32 %v2_1225811, %v0_121cc
  %v2_1222c = xor i1 %v3_12228, true
  %v3_1222c = or i1 %v9_12228, %v2_1222c
  br i1 %v3_1222c, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12228
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12228, %bb57
  %v0_1223433 = phi i32 [ %v0_1223434, %dec_label_pc_12228 ], [ 0, %bb57 ]
  %v2_12230 = xor i1 %v9_12228, true
  %v3_12230 = and i1 %v3_12228, %v2_12230
  br i1 %v3_12230, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_12234 = phi i32 [ %v0_1223433, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_12234, 0
  %v4_12234 = zext i1 %tmp72 to i32
  %v5_12234 = or i32 %v0_12234, %v4_12234
  %v7_12234 = icmp eq i32 %v5_12234, 0
  br i1 %v7_12234, label %dec_label_pc_12240, label %.thread8

dec_label_pc_12240:                               ; preds = %bb60
  %v1_1224c = load i32, i32* %r8.global-to-local, align 4
  %v7_12250 = icmp sgt i32 %v3_1225812, %v1_1224c
  br i1 %v7_12250, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_12240
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_12240
  %v2_12254 = icmp eq i1 %v9_12228, false
  br i1 %v2_12254, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_1225813 = mul i32 %v1_12220, %v2_1225811
  %v5_1225814 = add i32 %v4_1225813, %v3_1225812
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_1227426 = phi i32 [ %v2_1225811, %bb63 ], [ %v2_1225811, %bb60 ], [ %v5_1225814, %bb64 ]
  %v0_1226824 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_12260 = load i32, i32* %r5.global-to-local, align 4
  %v1_12260 = inttoptr i32 %v0_12260 to i8*
  %v2_12260 = load i8, i8* %v1_12260, align 1
  %v3_12260 = zext i8 %v2_12260 to i32
  store i32 %v3_12260, i32* %r4.global-to-local, align 4
  %v5_12260 = add i32 %v0_12260, 1
  store i32 %v5_12260, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_121dc

dec_label_pc_12268:                               ; preds = %dec_label_pc_12220, %bb54
  %v1_12268 = icmp slt i32 %v1_12234, 0
  %v0_1228c = load i32, i32* %sl.global-to-local, align 4
  %v2_1228c = icmp eq i32 %v0_1228c, 0
  br i1 %v1_12268, label %dec_label_pc_1228c, label %dec_label_pc_12270

dec_label_pc_12270:                               ; preds = %dec_label_pc_12268
  br i1 %v2_1228c, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_12270
  %v2_12274 = sub i32 0, %v2_1225811
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12270, %bb65
  %v23_12278 = phi i32 [ %v2_1225811, %dec_label_pc_12270 ], [ %v2_12274, %bb65 ]
  %v2_12278 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12278, i32* @r4, align 4
  ret i32 %v23_12278

dec_label_pc_1227c:                               ; preds = %dec_label_pc_1219c
  %v1_1227c = inttoptr i32 %v5_1217c to i8*
  %v2_1227c = load i8, i8* %v1_1227c, align 1
  %v3_1227c = zext i8 %v2_1227c to i32
  store i32 %v3_1227c, i32* %r4.global-to-local, align 4
  %v5_1227c = add i32 %v0_1217c, 2
  store i32 %v5_1227c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_121b4

dec_label_pc_1228c:                               ; preds = %dec_label_pc_12268
  %.70 = select i1 %v2_1228c, i32 2147483647, i32 -2147483648
  %v2_12298 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12298, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_12260, { 1, 0 }
  uselistorder i1 %v9_12228, { 1, 0, 2 }
  uselistorder i1 %v3_12228, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_121f8, { 1, 2, 0 }
  uselistorder i1 %v2_121f8, { 1, 0, 2 }
  uselistorder i32 %v1_121dc, { 1, 2, 0 }
  uselistorder i32 %v1_1221c, { 1, 2, 0 }
  uselistorder i32 %v1_12234, { 1, 0 }
  uselistorder i32 %v2_1225811, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_121cc, { 1, 0, 2 }
  uselistorder i32 %v5_1217c, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_1217c, { 1, 0 }
  uselistorder i32 %v0_1217c, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 32, { 1, 7, 2, 3, 0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i8 9, { 7, 0, 5, 1, 2, 6, 3, 4 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_12220, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_121b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1217c, { 1, 2, 0, 3 }
}

define i32 @function_1229c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1229c:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_1229c = load i32, i32* @r4, align 4
  store i32 %v3_1229c, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_122b4

dec_label_pc_122b4:                               ; preds = %dec_label_pc_122e0.dec_label_pc_122b4_crit_edge, %dec_label_pc_1229c
  %v0_122b8 = phi i32 [ %v0_122b8.pre, %dec_label_pc_122e0.dec_label_pc_122b4_crit_edge ], [ %arg3, %dec_label_pc_1229c ]
  %v0_122b4 = phi i32 [ %v1_122cc, %dec_label_pc_122e0.dec_label_pc_122b4_crit_edge ], [ %tmp, %dec_label_pc_1229c ]
  %tmp12 = inttoptr i32 %v0_122b4 to i32*
  %v5_122c0 = call i32 @function_12ba0(i32 %v0_122b8, i32* %tmp12, i32 1)
  %v7_122c4 = icmp eq i32 %v5_122c0, 1
  %v0_122c8 = load i32, i32* @r4, align 4
  %v1_122cc = add i32 %v0_122c8, 1
  store i32 %v1_122cc, i32* @r4, align 4
  %v0_122d4 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_122c4, label %dec_label_pc_122d4, label %dec_label_pc_122ec

dec_label_pc_122d4:                               ; preds = %dec_label_pc_122b4
  %v1_122d4 = add i32 %v0_122d4, 1
  store i32 %v1_122d4, i32* %r5.global-to-local, align 4
  %v0_122d8 = load i32, i32* %r7.global-to-local, align 4
  %v7_122dc = icmp sgt i32 %v0_122d8, %v1_122d4
  br i1 %v7_122dc, label %dec_label_pc_122e0, label %dec_label_pc_122ec

dec_label_pc_122e0:                               ; preds = %dec_label_pc_122d4
  %v1_122e0 = inttoptr i32 %v0_122c8 to i8*
  %v2_122e0 = load i8, i8* %v1_122e0, align 1
  %v7_122e4 = icmp eq i8 %v2_122e0, 10
  br i1 %v7_122e4, label %dec_label_pc_122ec, label %dec_label_pc_122e0.dec_label_pc_122b4_crit_edge

dec_label_pc_122e0.dec_label_pc_122b4_crit_edge:  ; preds = %dec_label_pc_122e0
  %v0_122b8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_122b4

dec_label_pc_122ec:                               ; preds = %dec_label_pc_122b4, %dec_label_pc_122e0, %dec_label_pc_122d4
  %v0_122ec = phi i32 [ %v1_122d4, %dec_label_pc_122e0 ], [ %v1_122d4, %dec_label_pc_122d4 ], [ %v0_122d4, %dec_label_pc_122b4 ]
  %v2_122ec = icmp eq i32 %v0_122ec, 0
  %v1_122f0 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_122ec, i32 0, i32 %v1_122f0
  %v2_122f8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_122f8, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_122cc, { 1, 0 }
  uselistorder i8 10, { 6, 0, 7, 8, 1, 2, 3, 4, 5 }
  uselistorder i32 (i32, i32*, i32)* @function_12ba0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_122ec, { 1, 2, 0 }
}

define i32 @function_122fc() local_unnamed_addr {
dec_label_pc_122fc:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_122fc = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_1230c = call i32 @function_12f80()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_12314 = inttoptr i32 %v0_1230c to i32*
  store i32 0, i32* %v2_12314, align 4
  %v0_12320 = load i32, i32* %r6.global-to-local, align 4
  %v3_12324 = call i32 @function_132bc(i32 2, i32 2, i32 %v0_12320)
  %v7_12330 = icmp eq i32 %v3_12324, -1
  store i32 %v3_12324, i32* %r5.global-to-local, align 4
  %v2_1233c = load i32, i32* @r4, align 4
  br i1 %v7_12330, label %dec_label_pc_1238c, label %dec_label_pc_12350

dec_label_pc_12350:                               ; preds = %dec_label_pc_122fc
  %v7_1233c = shl i32 2056, %v2_1233c
  %v8_1233c = or i32 %v7_1233c, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_1236c = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_1236c = call i32 @function_13118(i32 %v3_12324, %sockaddr* %v3_1236c, i32 %v2_1233c)
  %v2_12374 = ptrtoint i32* %stack_var_-24 to i32
  %v0_12378 = load i32, i32* %r5.global-to-local, align 4
  %v4_1237c = call i32 @function_13144(i32 %v0_12378, %sockaddr* %v3_1236c, i32 %v2_12374)
  %v1_12384 = call i32 @function_129d8(i32 %v0_12378)
  br label %dec_label_pc_1238c

dec_label_pc_1238c:                               ; preds = %dec_label_pc_122fc, %dec_label_pc_12350
  %v0_1238c = phi i32 [ %v0_12320, %dec_label_pc_122fc ], [ %v8_1233c, %dec_label_pc_12350 ]
  store i32 %v3_122fc, i32* @r4, align 4
  ret i32 %v0_1238c

; uselistorder directives
  uselistorder i32 %v3_12324, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_13118, { 0, 6, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_132bc, { 18, 6, 16, 17, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1238c, { 1, 0 }
}

define i32 @function_12398(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12398:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_1239c = load i8, i8* %tmp, align 1
  %v2_123a0 = icmp eq i8 %v3_1239c, 0
  br i1 %v2_123a0, label %bb, label %dec_label_pc_123b4

bb:                                               ; preds = %dec_label_pc_12398
  %v4_1239c = zext i8 %v3_1239c to i32
  br label %dec_label_pc_123c8

dec_label_pc_123b4:                               ; preds = %dec_label_pc_12398
  br label %dec_label_pc_123b8

dec_label_pc_123b8:                               ; preds = %dec_label_pc_123b8, %dec_label_pc_123b4
  %v0_123b8 = phi i32 [ %v1_123b8, %dec_label_pc_123b8 ], [ 0, %dec_label_pc_123b4 ]
  %v1_123b8 = add i32 %v0_123b8, 1
  %v2_123bc = add i32 %v1_123b8, %arg2
  %v3_123bc = inttoptr i32 %v2_123bc to i8*
  %v4_123bc = load i8, i8* %v3_123bc, align 1
  %v2_123c0 = icmp eq i8 %v4_123bc, 0
  br i1 %v2_123c0, label %dec_label_pc_123c8, label %dec_label_pc_123b8

dec_label_pc_123c8:                               ; preds = %dec_label_pc_123b8, %bb
  %v0_1240c18 = phi i32 [ %v4_1239c, %bb ], [ %v1_123b8, %dec_label_pc_123b8 ]
  %v0_123d01 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_123d01, 1
  br i1 %tmp27, label %dec_label_pc_1241c, label %dec_label_pc_123dc

dec_label_pc_123dc:                               ; preds = %dec_label_pc_123c8, %dec_label_pc_123d0.backedge
  %v0_123d4.in = phi i32 [ %v0_123d4, %dec_label_pc_123d0.backedge ], [ %v0_123d01, %dec_label_pc_123c8 ]
  %v0_12400 = phi i32 [ %v1_12400., %dec_label_pc_123d0.backedge ], [ 0, %dec_label_pc_123c8 ]
  %v0_123dc = phi i32 [ %v5_123dc, %dec_label_pc_123d0.backedge ], [ %tmp20, %dec_label_pc_123c8 ]
  %v0_123d4 = add i32 %v0_123d4.in, -1
  %v1_123dc = inttoptr i32 %v0_123dc to i8*
  %v2_123dc = load i8, i8* %v1_123dc, align 1
  %v3_123dc = zext i8 %v2_123dc to i32
  store i32 %v3_123dc, i32* @lr, align 4
  %v5_123dc = add i32 %v0_123dc, 1
  %v2_123e0 = add i32 %v0_12400, %arg2
  %v3_123e0 = inttoptr i32 %v2_123e0 to i8*
  %v4_123e0 = load i8, i8* %v3_123e0, align 1
  %v6_123e0 = zext i8 %v4_123e0 to i32
  %v1_123e4 = add nsw i32 %v3_123dc, -65
  %v1_123e8 = add nsw i32 %v6_123e0, -65
  %tmp35 = icmp ult i32 %v1_123e4, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_123dc
  %v5_123f0 = or i32 %v3_123dc, 96
  store i32 %v5_123f0, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_123dc, %bb28
  %v0_123fc = phi i32 [ %v3_123dc, %dec_label_pc_123dc ], [ %v5_123f0, %bb28 ]
  %tmp36 = icmp ult i32 %v1_123e8, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_123f8 = or i32 %v6_123e0, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_123fc = phi i32 [ %v6_123e0, %bb29 ], [ %v5_123f8, %bb30 ]
  %v9_123fc = icmp eq i32 %v0_123fc, %v1_123fc
  %v1_12400 = add i32 %v0_12400, 1
  %v1_12400. = select i1 %v9_123fc, i32 %v1_12400, i32 0
  br i1 %v9_123fc, label %dec_label_pc_1240c, label %dec_label_pc_123d0.backedge

dec_label_pc_123d0.backedge:                      ; preds = %bb31, %dec_label_pc_1240c
  %tmp32 = icmp slt i32 %v0_123d4, 1
  br i1 %tmp32, label %dec_label_pc_1241c, label %dec_label_pc_123dc

dec_label_pc_1240c:                               ; preds = %bb31
  %v9_1240c = icmp eq i32 %v0_1240c18, %v1_12400.
  br i1 %v9_1240c, label %dec_label_pc_12414, label %dec_label_pc_123d0.backedge

dec_label_pc_12414:                               ; preds = %dec_label_pc_1240c
  %v2_12414 = sub i32 %v5_123dc, %tmp20
  ret i32 %v2_12414

dec_label_pc_1241c:                               ; preds = %dec_label_pc_123d0.backedge, %dec_label_pc_123c8
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_12400., { 1, 0 }
  uselistorder i32 %v0_123dc, { 1, 0 }
  uselistorder i32 %v0_12400, { 1, 0 }
  uselistorder i8 %v3_1239c, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_123d0.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_123dc, { 1, 0 }
}

define i32 @function_12424(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12424:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_12424 = load i8, i8* %arg1, align 1
  %v2_12428 = icmp eq i8 %v2_12424, 0
  br i1 %v2_12428, label %bb, label %dec_label_pc_12434

bb:                                               ; preds = %dec_label_pc_12424
  %v3_12424 = zext i8 %v2_12424 to i32
  br label %dec_label_pc_12448

dec_label_pc_12434:                               ; preds = %dec_label_pc_12424
  br label %dec_label_pc_12438

dec_label_pc_12438:                               ; preds = %dec_label_pc_12438, %dec_label_pc_12434
  %v0_12438 = phi i32 [ %v1_12438, %dec_label_pc_12438 ], [ 0, %dec_label_pc_12434 ]
  %v1_12438 = add i32 %v0_12438, 1
  %v2_1243c = add i32 %v1_12438, %tmp
  %v3_1243c = inttoptr i32 %v2_1243c to i8*
  %v4_1243c = load i8, i8* %v3_1243c, align 1
  %v2_12440 = icmp eq i8 %v4_1243c, 0
  br i1 %v2_12440, label %dec_label_pc_12448, label %dec_label_pc_12438

dec_label_pc_12448:                               ; preds = %dec_label_pc_12438, %bb
  %v0_1246c = phi i32 [ %v3_12424, %bb ], [ %v1_12438, %dec_label_pc_12438 ]
  %v1_12448 = inttoptr i32 %arg2 to i8*
  %v2_12448 = load i8, i8* %v1_12448, align 1
  %v2_1244c = icmp eq i8 %v2_12448, 0
  br i1 %v2_1244c, label %bb22, label %dec_label_pc_12458

bb22:                                             ; preds = %dec_label_pc_12448
  %v3_12448 = zext i8 %v2_12448 to i32
  br label %dec_label_pc_1246c

dec_label_pc_12458:                               ; preds = %dec_label_pc_12448
  br label %dec_label_pc_1245c

dec_label_pc_1245c:                               ; preds = %dec_label_pc_1245c, %dec_label_pc_12458
  %v0_1245c = phi i32 [ %v1_1245c, %dec_label_pc_1245c ], [ 0, %dec_label_pc_12458 ]
  %v1_1245c = add i32 %v0_1245c, 1
  %v2_12460 = add i32 %v1_1245c, %arg2
  %v3_12460 = inttoptr i32 %v2_12460 to i8*
  %v4_12460 = load i8, i8* %v3_12460, align 1
  %v2_12464 = icmp eq i8 %v4_12460, 0
  br i1 %v2_12464, label %dec_label_pc_1246c, label %dec_label_pc_1245c

dec_label_pc_1246c:                               ; preds = %dec_label_pc_1245c, %bb22
  %v0_124984 = phi i32 [ %v3_12448, %bb22 ], [ %v1_1245c, %dec_label_pc_1245c ]
  %v9_1246c = icmp eq i32 %v0_1246c, %v0_124984
  br i1 %v9_1246c, label %dec_label_pc_12498.preheader, label %dec_label_pc_12478

dec_label_pc_12498.preheader:                     ; preds = %dec_label_pc_1246c
  %v2_124986 = icmp eq i32 %v0_1246c, 0
  br i1 %v2_124986, label %dec_label_pc_124a0, label %dec_label_pc_12480

dec_label_pc_12478:                               ; preds = %dec_label_pc_12480, %dec_label_pc_1246c
  ret i32 0

dec_label_pc_12480:                               ; preds = %dec_label_pc_12490, %dec_label_pc_12498.preheader
  %v0_12498.in = phi i32 [ %v0_12498, %dec_label_pc_12490 ], [ %v0_1246c, %dec_label_pc_12498.preheader ]
  %v0_12494 = phi i32 [ %v1_12494, %dec_label_pc_12490 ], [ %arg2, %dec_label_pc_12498.preheader ]
  %v0_12490 = phi i32 [ %v1_12490, %dec_label_pc_12490 ], [ %tmp, %dec_label_pc_12498.preheader ]
  %v0_12498 = add i32 %v0_12498.in, -1
  %v1_12480 = inttoptr i32 %v0_12490 to i8*
  %v2_12480 = load i8, i8* %v1_12480, align 1
  %v1_12484 = inttoptr i32 %v0_12494 to i8*
  %v2_12484 = load i8, i8* %v1_12484, align 1
  %v9_12488 = icmp eq i8 %v2_12480, %v2_12484
  br i1 %v9_12488, label %dec_label_pc_12490, label %dec_label_pc_12478

dec_label_pc_12490:                               ; preds = %dec_label_pc_12480
  %v1_12490 = add i32 %v0_12490, 1
  %v1_12494 = add i32 %v0_12494, 1
  %v2_12498 = icmp eq i32 %v0_12498, 0
  br i1 %v2_12498, label %dec_label_pc_124a0, label %dec_label_pc_12480

dec_label_pc_124a0:                               ; preds = %dec_label_pc_12490, %dec_label_pc_12498.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_12448, { 1, 0 }
  uselistorder i8 %v2_12424, { 1, 0 }
}

define i32 @function_124a8(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_124a8:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_124ac = load i8, i8* %arg1, align 1
  %v2_124b0 = icmp eq i8 %v2_124ac, 0
  %v0_124b4 = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_124b0, label %bb, label %dec_label_pc_124c0

bb:                                               ; preds = %dec_label_pc_124a8
  %v3_124ac = zext i8 %v2_124ac to i32
  br label %dec_label_pc_124d4

dec_label_pc_124c0:                               ; preds = %dec_label_pc_124a8
  br label %dec_label_pc_124c4

dec_label_pc_124c4:                               ; preds = %dec_label_pc_124c4, %dec_label_pc_124c0
  %v0_124c4 = phi i32 [ %v1_124c4, %dec_label_pc_124c4 ], [ 0, %dec_label_pc_124c0 ]
  %v1_124c4 = add i32 %v0_124c4, 1
  %v2_124c8 = add i32 %v1_124c4, %tmp
  %v3_124c8 = inttoptr i32 %v2_124c8 to i8*
  %v4_124c8 = load i8, i8* %v3_124c8, align 1
  %v2_124cc = icmp eq i8 %v4_124c8, 0
  br i1 %v2_124cc, label %dec_label_pc_124d4, label %dec_label_pc_124c4

dec_label_pc_124d4:                               ; preds = %dec_label_pc_124c4, %bb
  %v9_124fc = phi i32 [ %v3_124ac, %bb ], [ %v1_124c4, %dec_label_pc_124c4 ]
  %v0_124d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_124d4 = inttoptr i32 %v0_124d4 to i8*
  %v2_124d4 = load i8, i8* %v1_124d4, align 1
  %v3_124d4 = zext i8 %v2_124d4 to i32
  %v2_124d8 = icmp eq i8 %v2_124d4, 0
  br i1 %v2_124d8, label %bb26, label %dec_label_pc_124e4

bb26:                                             ; preds = %dec_label_pc_124d4
  store i32 %v3_124d4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_124f8

dec_label_pc_124e4:                               ; preds = %dec_label_pc_124d4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_124e8

dec_label_pc_124e8:                               ; preds = %dec_label_pc_124e8, %dec_label_pc_124e4
  %v0_124e8 = phi i32 [ %v1_124e8, %dec_label_pc_124e8 ], [ 0, %dec_label_pc_124e4 ]
  %v1_124e8 = add i32 %v0_124e8, 1
  store i32 %v1_124e8, i32* %r2.global-to-local, align 4
  %v2_124ec = add i32 %v1_124e8, %v0_124d4
  %v3_124ec = inttoptr i32 %v2_124ec to i8*
  %v4_124ec = load i8, i8* %v3_124ec, align 1
  %v2_124f0 = icmp eq i8 %v4_124ec, 0
  br i1 %v2_124f0, label %dec_label_pc_124f8, label %dec_label_pc_124e8

dec_label_pc_124f8:                               ; preds = %dec_label_pc_124e8, %bb26
  %v1_124f8 = phi i32 [ %v3_124d4, %bb26 ], [ %v1_124e8, %dec_label_pc_124e8 ]
  %v2_124f8 = sub i32 %v0_124b4, %v1_124f8
  %v4_124f8 = xor i32 %v1_124f8, %v0_124b4
  %v5_124f8 = xor i32 %v2_124f8, %v0_124b4
  %v6_124f8 = and i32 %v5_124f8, %v4_124f8
  %v7_124fc = icmp sgt i32 %v0_124b4, %v1_124f8
  br i1 %v7_124fc, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_124f8
  %v10_124fc = sub i32 %v0_124b4, %v9_124fc
  %v12_124fc = xor i32 %v9_124fc, %v0_124b4
  %v13_124fc = xor i32 %v10_124fc, %v0_124b4
  %v14_124fc = and i32 %v13_124fc, %v12_124fc
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_124f8, %bb27
  %v2_12500.in = phi i32 [ %v6_124f8, %dec_label_pc_124f8 ], [ %v14_124fc, %bb27 ]
  %v1_12500.in = phi i32 [ %v2_124f8, %dec_label_pc_124f8 ], [ %v10_124fc, %bb27 ]
  %v1_124f8.pn = phi i32 [ %v1_124f8, %dec_label_pc_124f8 ], [ %v9_124fc, %bb27 ]
  %v0_12500 = icmp eq i32 %v0_124b4, %v1_124f8.pn
  %v1_12500 = icmp slt i32 %v1_12500.in, 0
  %v2_12500 = icmp slt i32 %v2_12500.in, 0
  %v3_12500 = xor i1 %v2_12500, %v1_12500
  %v4_12500 = or i1 %v0_12500, %v3_12500
  br i1 %v4_12500, label %dec_label_pc_12510.preheader, label %dec_label_pc_12528

dec_label_pc_12510.preheader:                     ; preds = %bb28
  %v2_125105 = icmp eq i32 %v0_124b4, 0
  br i1 %v2_125105, label %dec_label_pc_12530, label %dec_label_pc_12518

dec_label_pc_12508:                               ; preds = %dec_label_pc_12518
  %v1_12508 = add i32 %v0_12508, 1
  %v1_1250c = add i32 %v0_1250c, 1
  store i32 %v1_1250c, i32* %r1.global-to-local, align 4
  %v2_12510 = icmp eq i32 %v0_12510, 0
  br i1 %v2_12510, label %dec_label_pc_12530, label %dec_label_pc_12518

dec_label_pc_12518:                               ; preds = %dec_label_pc_12508, %dec_label_pc_12510.preheader
  %v0_12510.in = phi i32 [ %v0_12510, %dec_label_pc_12508 ], [ %v0_124b4, %dec_label_pc_12510.preheader ]
  %v0_1250c = phi i32 [ %v1_1250c, %dec_label_pc_12508 ], [ %v0_124d4, %dec_label_pc_12510.preheader ]
  %v0_12508 = phi i32 [ %v1_12508, %dec_label_pc_12508 ], [ %tmp, %dec_label_pc_12510.preheader ]
  %v0_12510 = add i32 %v0_12510.in, -1
  %v1_12518 = inttoptr i32 %v0_12508 to i8*
  %v2_12518 = load i8, i8* %v1_12518, align 1
  %v3_12518 = zext i8 %v2_12518 to i32
  store i32 %v3_12518, i32* %r2.global-to-local, align 4
  %v1_1251c = inttoptr i32 %v0_1250c to i8*
  %v2_1251c = load i8, i8* %v1_1251c, align 1
  %v9_12520 = icmp eq i8 %v2_12518, %v2_1251c
  br i1 %v9_12520, label %dec_label_pc_12508, label %dec_label_pc_12528

dec_label_pc_12528:                               ; preds = %dec_label_pc_12518, %bb28
  ret i32 0

dec_label_pc_12530:                               ; preds = %dec_label_pc_12508, %dec_label_pc_12510.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_12508, { 1, 0 }
  uselistorder i32 %v0_1250c, { 1, 0 }
  uselistorder i32 %v1_124f8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_124e8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_124b4, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_124ac, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_12538(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12538:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_12538 = load i32, i32* @r4, align 4
  store i32 %v3_12538, i32* %stack_var_-28, align 4
  %v22_12538 = ptrtoint i32* %stack_var_-28 to i32
  %v0_1253c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_1253c, i32* %r8.global-to-local, align 4
  %v2_1253c = icmp eq i32 %v0_1253c, 0
  store i1 %v2_1253c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_1253c, label %dec_label_pc_1262c, label %dec_label_pc_1254c

dec_label_pc_1254c:                               ; preds = %dec_label_pc_12538
  %v3_1254c = icmp eq i8 %arg1, 0
  store i1 %v3_1254c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1254c, label %.thread, label %dec_label_pc_12560

.thread:                                          ; preds = %dec_label_pc_1254c
  %v4_12554 = inttoptr i32 %v0_1253c to i8*
  store i8 48, i8* %v4_12554, align 1
  %v0_12558.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12558.pr.pr, label %.thread1, label %dec_label_pc_12560

.thread1:                                         ; preds = %.thread
  %v4_12558 = load i32, i32* %r8.global-to-local, align 4
  %v5_12558 = add i32 %v4_12558, 1
  %v6_12558 = inttoptr i32 %v5_12558 to i8*
  store i8 0, i8* %v6_12558, align 1
  %v0_1255c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1255c.pr.pr, label %dec_label_pc_1262c, label %dec_label_pc_12560

dec_label_pc_12560:                               ; preds = %dec_label_pc_1254c, %.thread, %.thread1
  %tmp39 = icmp slt i8 %arg1, 0
  %v7_12564 = icmp eq i32 %arg2, 10
  store i1 %v7_12564, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12564, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_12560
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_12560
  %v4_12560 = zext i1 %tmp39 to i32
  store i32 %v4_12560, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_12588

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12598

dec_label_pc_12588:                               ; preds = %bb
  %v2_12588 = sub nsw i32 0, %tmp
  store i32 %v2_12588, i32* %r4.global-to-local, align 4
  store i1 %v3_1254c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1254c, label %dec_label_pc_12638, label %dec_label_pc_12598

dec_label_pc_12598:                               ; preds = %dec_label_pc_12588, %.thread4
  %v0_125a010 = phi i32 [ %tmp, %.thread4 ], [ %v2_12588, %dec_label_pc_12588 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_12588 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_1259c = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_1259c, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_125a0

dec_label_pc_125a0:                               ; preds = %bb37, %dec_label_pc_12598
  %v0_125a0 = phi i32 [ %v0_125c4, %bb37 ], [ %v0_125a010, %dec_label_pc_12598 ]
  store i32 %v0_125a0, i32* %r0.global-to-local, align 4
  %v0_125a4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_125a4, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_125a0, 16777216
  %v1_125a8 = sdiv i32 %sext, 16777216
  %v3_125a8 = call i32 @function_12760(i32 %v1_125a8, i32 %v0_125a4)
  store i32 %v3_125a8, i32* %r0.global-to-local, align 4
  %v7_125ac = icmp eq i32 %v3_125a8, 9
  store i1 %v7_125ac, i1* %cpsr_z.global-to-local, align 1
  %v1_125b0 = add i32 %v3_125a8, 48
  %v0_125b4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_125b4, i32* @r1, align 4
  %v7_125b8 = icmp sgt i32 %v3_125a8, 9
  %extract.t = trunc i32 %v1_125b0 to i8
  br i1 %v7_125b8, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_125a0
  %v9_125b8 = add i32 %v3_125a8, 55
  %extract.t20 = trunc i32 %v9_125b8 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_125a0, %bb36
  %v0_125c0.off0 = phi i8 [ %extract.t, %dec_label_pc_125a0 ], [ %extract.t20, %bb36 ]
  %v0_125bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_125bc, i32* @r0, align 4
  %v2_125c0 = load i32, i32* %r7.global-to-local, align 4
  %v3_125c0 = inttoptr i32 %v2_125c0 to i8*
  store i8 %v0_125c0.off0, i8* %v3_125c0, align 1
  %v4_125c0 = load i32, i32* %r7.global-to-local, align 4
  %v5_125c0 = add i32 %v4_125c0, -1
  store i32 %v5_125c0, i32* %r7.global-to-local, align 4
  %v0_125c4 = call i32 @function_12650()
  store i32 %v0_125c4, i32* %r0.global-to-local, align 4
  store i32 %v0_125c4, i32* %r4.global-to-local, align 4
  %v2_125c8 = icmp eq i32 %v0_125c4, 0
  store i1 %v2_125c8, i1* %cpsr_z.global-to-local, align 1
  %v0_125cc = load i32, i32* %r6.global-to-local, align 4
  %v1_125cc = add i32 %v0_125cc, -1
  store i32 %v1_125cc, i32* %r6.global-to-local, align 4
  br i1 %v2_125c8, label %dec_label_pc_125d4, label %dec_label_pc_125a0

dec_label_pc_125d4:                               ; preds = %bb37
  %v0_125d4 = load i32, i32* %sl.global-to-local, align 4
  %v2_125d4 = icmp eq i32 %v0_125d4, 0
  store i1 %v2_125d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_125d4, label %bb38, label %dec_label_pc_1263c

bb38:                                             ; preds = %dec_label_pc_125d4
  store i32 %v0_125cc, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_125e0

dec_label_pc_125e0:                               ; preds = %bb38, %dec_label_pc_1263c
  %v1_125ec = phi i32 [ %v0_125cc, %bb38 ], [ %v1_125e4.pre, %dec_label_pc_1263c ]
  %v2_125e0 = ptrtoint i32* %stack_var_-62 to i32
  %v2_125e4 = add i32 %v1_125ec, %v2_125e0
  %v3_125e4 = inttoptr i32 %v2_125e4 to i8*
  %v4_125e4 = load i8, i8* %v3_125e4, align 1
  %v6_125e4 = zext i8 %v4_125e4 to i32
  store i32 %v6_125e4, i32* %r2.global-to-local, align 4
  %v2_125e8 = icmp eq i8 %v4_125e4, 0
  store i1 %v2_125e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_125e4, i32* %r1.global-to-local, align 4
  br i1 %v2_125e8, label %dec_label_pc_12610, label %dec_label_pc_125f4

dec_label_pc_125f4:                               ; preds = %dec_label_pc_125e0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_125f8

dec_label_pc_125f8:                               ; preds = %dec_label_pc_125f8, %dec_label_pc_125f4
  %v0_125f8 = phi i32 [ %v1_125f8, %dec_label_pc_125f8 ], [ 0, %dec_label_pc_125f4 ]
  %v1_125f8 = add i32 %v0_125f8, 1
  store i32 %v1_125f8, i32* %r2.global-to-local, align 4
  %v2_125fc = add i32 %v1_125f8, %v2_125e4
  %v3_125fc = inttoptr i32 %v2_125fc to i8*
  %v4_125fc = load i8, i8* %v3_125fc, align 1
  %v2_12600 = icmp eq i8 %v4_125fc, 0
  store i1 %v2_12600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12600, label %dec_label_pc_12608, label %dec_label_pc_125f8

dec_label_pc_12608:                               ; preds = %dec_label_pc_125f8
  %v7_12608 = icmp eq i32 %v0_125f8, -2
  store i1 %v7_12608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12608, label %dec_label_pc_1262c, label %dec_label_pc_12610

dec_label_pc_12610:                               ; preds = %dec_label_pc_12608, %dec_label_pc_125e0
  %v0_1261817 = phi i32 [ %v1_125f8, %dec_label_pc_12608 ], [ %v6_125e4, %dec_label_pc_125e0 ]
  store i32 %v2_125e4, i32* %r0.global-to-local, align 4
  %v0_12614 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_12614, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12618

dec_label_pc_12618:                               ; preds = %dec_label_pc_12618.dec_label_pc_12618_crit_edge, %dec_label_pc_12610
  %v2_12624 = phi i32 [ %v5_12624, %dec_label_pc_12618.dec_label_pc_12618_crit_edge ], [ %v0_12614, %dec_label_pc_12610 ]
  %v0_1261c = phi i32 [ %v0_1261c.pre, %dec_label_pc_12618.dec_label_pc_12618_crit_edge ], [ %v2_125e4, %dec_label_pc_12610 ]
  %v0_12618 = phi i32 [ %v0_12618.pre, %dec_label_pc_12618.dec_label_pc_12618_crit_edge ], [ %v0_1261817, %dec_label_pc_12610 ]
  %v1_12618 = add i32 %v0_12618, -1
  store i32 %v1_12618, i32* %r2.global-to-local, align 4
  %v1_1261c = inttoptr i32 %v0_1261c to i8*
  %v2_1261c = load i8, i8* %v1_1261c, align 1
  %v5_1261c = add i32 %v0_1261c, 1
  store i32 %v5_1261c, i32* %r0.global-to-local, align 4
  %v3_12620 = icmp eq i32 %v0_12618, 0
  store i1 %v3_12620, i1* %cpsr_z.global-to-local, align 1
  %v3_12624 = inttoptr i32 %v2_12624 to i8*
  store i8 %v2_1261c, i8* %v3_12624, align 1
  %v4_12624 = load i32, i32* %r1.global-to-local, align 4
  %v5_12624 = add i32 %v4_12624, 1
  store i32 %v5_12624, i32* %r1.global-to-local, align 4
  br i1 %v3_12620, label %dec_label_pc_1262c, label %dec_label_pc_12618.dec_label_pc_12618_crit_edge

dec_label_pc_12618.dec_label_pc_12618_crit_edge:  ; preds = %dec_label_pc_12618
  %v0_12618.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_1261c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12618

dec_label_pc_1262c:                               ; preds = %dec_label_pc_12618, %dec_label_pc_12608, %.thread1, %dec_label_pc_12538
  %v0_1262c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1262c, i32* %r0.global-to-local, align 4
  %v2_12634 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12634, i32* @r4, align 4
  ret i32 %v0_1262c

dec_label_pc_12638:                               ; preds = %dec_label_pc_12588
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1263c

dec_label_pc_1263c:                               ; preds = %dec_label_pc_125d4, %dec_label_pc_12638
  %v1_12640 = phi i32 [ %v1_125cc, %dec_label_pc_125d4 ], [ 32, %dec_label_pc_12638 ]
  %v2_12640 = add i32 %v1_12640, %v22_12538
  store i32 %v2_12640, i32* %r2.global-to-local, align 4
  %v3_12648 = add i32 %v2_12640, -34
  %v4_12648 = inttoptr i32 %v3_12648 to i8*
  store i8 45, i8* %v4_12648, align 1
  %v1_125e4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_125e0

; uselistorder directives
  uselistorder i32 %v5_12624, { 1, 0 }
  uselistorder i1 %v3_12620, { 1, 0 }
  uselistorder i32 %v0_1261c, { 1, 0 }
  uselistorder i1 %v7_12608, { 1, 0 }
  uselistorder i32 %v1_125f8, { 0, 1, 3, 2 }
  uselistorder i32 %v2_125e4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_125c4, { 1, 2, 3, 0 }
  uselistorder i32 %v3_125a8, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_1254c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1253c, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 12, 11, 13, 14 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_12760, { 2, 1, 8, 3, 7, 6, 5, 4, 0 }
  uselistorder label %dec_label_pc_1263c, { 1, 0 }
  uselistorder label %dec_label_pc_125e0, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_12560, { 2, 1, 0 }
}

define i32 @function_12650() local_unnamed_addr {
dec_label_pc_12650:
  %v0_12650 = load i32, i32* @r1, align 4
  %v1_12650 = add i32 %v0_12650, -1
  store i32 %v1_12650, i32* @r2, align 4
  %v7_12650 = icmp eq i32 %v0_12650, 1
  br i1 %v7_12650, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_12650
  %v2_12654 = load i32, i32* @r0, align 4
  ret i32 %v2_12654

bb82:                                             ; preds = %dec_label_pc_12650
  %v2_12650 = icmp eq i32 %v0_12650, 0
  br i1 %v2_12650, label %dec_label_pc_12738, label %dec_label_pc_1265c

dec_label_pc_1265c:                               ; preds = %bb82
  %v0_1265c = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_1265c, %v0_12650
  br i1 %tmp, label %dec_label_pc_12664, label %dec_label_pc_126f0

dec_label_pc_12664:                               ; preds = %dec_label_pc_1265c
  %v2_12664 = and i32 %v1_12650, %v0_12650
  %v4_12664 = icmp eq i32 %v2_12664, 0
  br i1 %v4_12664, label %dec_label_pc_126fc, label %dec_label_pc_1266c

dec_label_pc_1266c:                               ; preds = %dec_label_pc_12664
  %v3_1266c = icmp ult i32 %v0_12650, 536870912
  br i1 %v3_1266c, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_1266c
  %v4_12670 = mul i32 %v0_12650, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_1266c, %.thread
  %v0_12690.pr36.ph = phi i32 [ %v4_12670, %.thread ], [ %v0_12650, %dec_label_pc_1266c ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_1266c ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_12690.pr36 = phi i32 [ %v4_12684, %bb85 ], [ %v0_12690.pr36.ph, %.preheader.preheader ]
  %v1_12688 = phi i32 [ %v4_12688, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_1267c = icmp ugt i32 %v0_12690.pr36, 268435455
  br i1 %v2_1267c, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_12690thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_12680 = icmp ult i32 %v0_12690.pr36, %v0_1265c
  br i1 %v4_12680, label %bb84, label %dec_label_pc_12690thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_12684 = and i32 %v0_12690.pr36, 268435456
  %v3_12684 = icmp eq i32 %v2_12684, 0
  %v4_12684 = mul i32 %v0_12690.pr36, 16
  br i1 %v3_12684, label %bb85, label %dec_label_pc_12690.loopexit

bb85:                                             ; preds = %bb84
  %v2_12688 = and i32 %v1_12688, 268435456
  %v3_12688 = icmp eq i32 %v2_12688, 0
  %v4_12688 = mul i32 %v1_12688, 16
  br i1 %v3_12688, label %.preheader, label %dec_label_pc_12690thread-pre-split.loopexit.loopexit

dec_label_pc_12690thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_1269c48.ph = phi i32 [ %v1_12688, %bb83 ], [ %v4_12688, %bb85 ]
  %v0_12690.pr38.ph = phi i32 [ %v0_12690.pr36, %bb83 ], [ %v4_12684, %bb85 ]
  br label %dec_label_pc_12690thread-pre-split.loopexit

dec_label_pc_12690thread-pre-split.loopexit:      ; preds = %dec_label_pc_12690thread-pre-split.loopexit.loopexit, %.thread2
  %v1_1269c48 = phi i32 [ %v1_12688, %.thread2 ], [ %v1_1269c48.ph, %dec_label_pc_12690thread-pre-split.loopexit.loopexit ]
  %v0_12690.pr38 = phi i32 [ %v0_12690.pr36, %.thread2 ], [ %v0_12690.pr38.ph, %dec_label_pc_12690thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_12690thread-pre-split

dec_label_pc_12690thread-pre-split:               ; preds = %dec_label_pc_12690thread-pre-split.loopexit, %bb87
  %v1_1269c46 = phi i32 [ %v1_1269c48, %dec_label_pc_12690thread-pre-split.loopexit ], [ %v3_1269c, %bb87 ]
  %v0_12690.pr = phi i32 [ %v0_12690.pr38, %dec_label_pc_12690thread-pre-split.loopexit ], [ %v3_12698, %bb87 ]
  br label %dec_label_pc_12690

dec_label_pc_12690.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_12690

dec_label_pc_12690:                               ; preds = %dec_label_pc_12690.loopexit, %dec_label_pc_12690thread-pre-split
  %v1_1269c = phi i32 [ %v1_1269c46, %dec_label_pc_12690thread-pre-split ], [ %v1_12688, %dec_label_pc_12690.loopexit ]
  %v1_12698 = phi i32 [ %v0_12690.pr, %dec_label_pc_12690thread-pre-split ], [ %v4_12684, %dec_label_pc_12690.loopexit ]
  %v2_12690 = icmp slt i32 %v1_12698, 0
  br i1 %v2_12690, label %dec_label_pc_126a4, label %bb86

bb86:                                             ; preds = %dec_label_pc_12690
  %v4_12694 = icmp ult i32 %v1_12698, %v0_1265c
  br i1 %v4_12694, label %bb87, label %dec_label_pc_126a4

bb87:                                             ; preds = %bb86
  %v3_12698 = mul i32 %v1_12698, 2
  %v2_1269c = icmp slt i32 %v1_1269c, 0
  %v3_1269c = mul i32 %v1_1269c, 2
  br i1 %v2_1269c, label %dec_label_pc_126a4, label %dec_label_pc_12690thread-pre-split

dec_label_pc_126a4:                               ; preds = %bb86, %dec_label_pc_12690, %bb87
  %v2_126b059 = phi i32 [ %v3_1269c, %bb87 ], [ %v1_1269c, %bb86 ], [ %v1_1269c, %dec_label_pc_12690 ]
  %v1_126a851 = phi i32 [ %v3_12698, %bb87 ], [ %v1_12698, %bb86 ], [ %v1_12698, %dec_label_pc_12690 ]
  store i32 0, i32* @r2, align 4
  br label %dec_label_pc_126a8

dec_label_pc_126a8:                               ; preds = %.thread11, %dec_label_pc_126a4
  %v1_126dc = phi i32 [ %v4_126dc, %.thread11 ], [ %v2_126b059, %dec_label_pc_126a4 ]
  %v1_126b0 = phi i32 [ %v0_126e8, %.thread11 ], [ 0, %dec_label_pc_126a4 ]
  %v1_126e0 = phi i32 [ %v4_126e0, %.thread11 ], [ %v1_126a851, %dec_label_pc_126a4 ]
  %v1_126ac = phi i32 [ %v0_126d8, %.thread11 ], [ %v0_1265c, %dec_label_pc_126a4 ]
  %v3_126a8 = icmp ult i32 %v1_126ac, %v1_126e0
  br i1 %v3_126a8, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_126a8
  %v3_126ac = sub i32 %v1_126ac, %v1_126e0
  %v3_126b0 = or i32 %v1_126b0, %v1_126dc
  store i32 %v3_126b0, i32* @r2, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_126a8, %bb88
  %v1_126b8 = phi i32 [ %v1_126ac, %dec_label_pc_126a8 ], [ %v3_126ac, %bb88 ]
  %v1_126bc = phi i32 [ %v1_126b0, %dec_label_pc_126a8 ], [ %v3_126b0, %bb88 ]
  %v4_126b4 = udiv i32 %v1_126e0, 2
  %v6_126b4 = icmp ult i32 %v1_126b8, %v4_126b4
  br i1 %v6_126b4, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_126b8 = urem i32 %v1_126e0, 2
  %v4_126b8 = icmp eq i32 %v3_126b8, 0
  %v6_126b8 = sub i32 %v1_126b8, %v4_126b4
  br i1 %v4_126b8, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_126bc = udiv i32 %v1_126dc, 2
  %v6_126bc = or i32 %v1_126bc, %v5_126bc
  store i32 %v6_126bc, i32* @r2, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_126c4 = phi i32 [ %v6_126b8, %bb89 ], [ %v1_126b8, %.thread7 ], [ %v6_126b8, %bb90 ]
  %v1_126c8 = phi i32 [ %v1_126bc, %bb89 ], [ %v1_126bc, %.thread7 ], [ %v6_126bc, %bb90 ]
  %v4_126c0 = udiv i32 %v1_126e0, 4
  %v6_126c0 = icmp ult i32 %v1_126c4, %v4_126c0
  br i1 %v6_126c0, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_126c4 = and i32 %v1_126e0, 2
  %v4_126c4 = icmp eq i32 %v3_126c4, 0
  %v6_126c4 = sub i32 %v1_126c4, %v4_126c0
  br i1 %v4_126c4, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_126c8 = udiv i32 %v1_126dc, 4
  %v6_126c8 = or i32 %v1_126c8, %v5_126c8
  store i32 %v6_126c8, i32* @r2, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_126d0 = phi i32 [ %v6_126c4, %bb91 ], [ %v1_126c4, %.thread8 ], [ %v6_126c4, %bb92 ]
  %v1_126d4 = phi i32 [ %v1_126c8, %bb91 ], [ %v1_126c8, %.thread8 ], [ %v6_126c8, %bb92 ]
  %v4_126cc = udiv i32 %v1_126e0, 8
  %v6_126cc = icmp ult i32 %v1_126d0, %v4_126cc
  br i1 %v6_126cc, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_126d0 = and i32 %v1_126e0, 4
  %v4_126d0 = icmp eq i32 %v3_126d0, 0
  %v6_126d0 = sub i32 %v1_126d0, %v4_126cc
  br i1 %v4_126d0, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_126d4 = udiv i32 %v1_126dc, 8
  %v6_126d4 = or i32 %v1_126d4, %v5_126d4
  store i32 %v6_126d4, i32* @r2, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_126e8 = phi i32 [ %v1_126d4, %bb93 ], [ %v1_126d4, %.thread9 ], [ %v6_126d4, %bb94 ]
  %v0_126d8 = phi i32 [ %v6_126d0, %bb93 ], [ %v1_126d0, %.thread9 ], [ %v6_126d0, %bb94 ]
  %v2_126d8 = icmp eq i32 %v0_126d8, 0
  br i1 %v2_126d8, label %dec_label_pc_126e8, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_126dc, 16
  br i1 %tmp142, label %dec_label_pc_126e8, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_126dc = udiv i32 %v1_126dc, 16
  %v4_126e0 = udiv i32 %v1_126e0, 16
  br label %dec_label_pc_126a8

dec_label_pc_126e8:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_126e8

dec_label_pc_126f0:                               ; preds = %dec_label_pc_1265c
  %v9_1265c = icmp eq i32 %v0_1265c, %v0_12650
  %. = zext i1 %v9_1265c to i32
  ret i32 %.

dec_label_pc_126fc:                               ; preds = %dec_label_pc_12664
  %v2_126fc = icmp ugt i32 %v0_12650, 65535
  br i1 %v2_126fc, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_126fc
  %v2_12700 = and i32 %v0_12650, 32768
  %v3_12700 = icmp eq i32 %v2_12700, 0
  %v4_12700 = udiv i32 %v0_12650, 65536
  br i1 %v3_12700, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_126fc
  %v0_1270c65 = phi i32 [ %v0_12650, %dec_label_pc_126fc ], [ %v4_12700, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_12710 = phi i32 [ %v0_1270c65, %.thread16 ], [ %v4_12700, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  store i32 %storemerge, i32* @r2, align 4
  %v2_1270c = icmp ugt i32 %v1_12710, 255
  br i1 %v2_1270c, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_12710 = and i32 %v1_12710, 128
  %v3_12710 = icmp eq i32 %v2_12710, 0
  %v4_12710 = udiv i32 %v1_12710, 256
  br i1 %v3_12710, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_12714 = or i32 %storemerge, 8
  store i32 %v2_12714, i32* @r2, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_12720 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_12714, %bb102 ]
  %v1_1271c = phi i32 [ %v1_12710, %bb100 ], [ %v4_12710, %bb101 ], [ %v4_12710, %bb102 ]
  %v2_12718 = icmp ugt i32 %v1_1271c, 15
  br i1 %v2_12718, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_1271c = and i32 %v1_1271c, 8
  %v3_1271c = icmp eq i32 %v2_1271c, 0
  %v4_1271c = udiv i32 %v1_1271c, 16
  br i1 %v3_1271c, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_12720 = add nsw i32 %v1_12720, 4
  store i32 %v2_12720, i32* @r2, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_12728 = phi i32 [ %v1_12720, %.thread17 ], [ %v1_12720, %bb103 ], [ %v2_12720, %bb104 ]
  %v5_1272c = phi i32 [ %v1_1271c, %.thread17 ], [ %v4_1271c, %bb103 ], [ %v4_1271c, %bb104 ]
  %v2_12724 = icmp ugt i32 %v5_1272c, 3
  %v7_12724 = icmp eq i32 %v5_1272c, 4
  %v2_12728 = xor i1 %v7_12724, true
  %v3_12728 = and i1 %v2_12724, %v2_12728
  br i1 %v3_12728, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_12728 = add nsw i32 %v4_12728, 3
  store i32 %v5_12728, i32* @r2, align 4
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_1272c = phi i32 [ %v4_12728, %.thread18 ], [ %v5_12728, %bb105 ]
  %v2_1272c = xor i1 %v2_12724, true
  %v3_1272c = or i1 %v7_12724, %v2_1272c
  br i1 %v3_1272c, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_1272c = udiv i32 %v5_1272c, 2
  %v9_1272c = add i32 %v4_1272c, %v8_1272c
  store i32 %v9_1272c, i32* @r2, align 4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_12730 = phi i32 [ %v4_1272c, %bb106 ], [ %v9_1272c, %bb107 ]
  %v6_12730 = lshr i32 %v0_1265c, %v1_12730
  ret i32 %v6_12730

dec_label_pc_12738:                               ; preds = %bb82
  %v0_12738 = load i32, i32* @lr, align 4
  %v0_1273c = call i32 @function_12910()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_12738)
  %v6_12748 = load i32, i32* @r1, align 4
  %v9_12748 = load i32, i32* @lr, align 4
  %v0_1274c = call i32 @function_12650()
  store i32 %v6_12748, i32* @r2, align 4
  store i32 %v9_12748, i32* @lr, align 4
  ret i32 %v0_1274c

; uselistorder directives
  uselistorder i32 %v4_1272c, { 1, 0 }
  uselistorder i1 %v7_12724, { 1, 0 }
  uselistorder i32 %v4_1271c, { 1, 0 }
  uselistorder i32 %v1_1271c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_12714, { 1, 0 }
  uselistorder i32 %v4_12710, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12710, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12700, { 1, 0 }
  uselistorder i32 %v0_126d8, { 1, 0 }
  uselistorder i32 %v4_126cc, { 1, 0 }
  uselistorder i32 %v1_126d4, { 1, 2, 0 }
  uselistorder i32 %v4_126c0, { 1, 0 }
  uselistorder i32 %v1_126c8, { 1, 2, 0 }
  uselistorder i32 %v4_126b4, { 1, 0 }
  uselistorder i32 %v1_126bc, { 1, 2, 0 }
  uselistorder i32 %v1_126e0, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_126b0, { 1, 0 }
  uselistorder i32 %v1_126dc, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_1269c, { 1, 0 }
  uselistorder i32 %v3_12698, { 1, 0 }
  uselistorder i32 %v1_12698, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_1269c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12688, { 1, 0 }
  uselistorder i32 %v4_12684, { 2, 1, 0 }
  uselistorder i32 %v1_12688, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_12690.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_1265c, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_12650, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 91, 1, 2, 12, 42, 23, 22, 25, 43, 24, 44, 14, 13, 3, 27, 45, 26, 46, 48, 15, 47, 4, 49, 50, 28, 51, 29, 52, 0, 53, 54, 30, 55, 56, 58, 16, 57, 5, 59, 60, 61, 62, 32, 63, 31, 64, 66, 17, 65, 6, 67, 68, 69, 70, 33, 71, 34, 72, 35, 73, 74, 18, 7, 75, 36, 76, 37, 77, 79, 19, 78, 8, 9, 80, 81, 39, 82, 38, 83, 85, 20, 84, 10, 11, 86, 87, 41, 88, 40, 89, 21, 90 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_126e8, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_126a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12690thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_12760(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12760:
  store i32 %arg1, i32* @r0, align 4
  %v1_12760 = add i32 %arg2, -1
  %v2_12760 = icmp eq i32 %arg2, 0
  br i1 %v2_12760, label %dec_label_pc_1281c, label %dec_label_pc_12768

dec_label_pc_12768:                               ; preds = %dec_label_pc_12760
  %v7_12760 = icmp eq i32 %arg2, 1
  br i1 %v7_12760, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_12768
  %v1_12768 = load i32, i32* @r0, align 4
  %v10_12768 = icmp eq i32 %v1_12768, %arg2
  br i1 %v10_12768, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_12768, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_12768 = icmp ult i32 %v1_12768, %arg2
  br i1 %v4_12768, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_12770 = and i32 %v1_12760, %arg2
  %v8_12770 = icmp eq i32 %v6_12770, 0
  br i1 %v8_12770, label %.thread67, label %dec_label_pc_12780.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_12774 = phi i32 [ %v1_12768, %bb75 ], [ 0, %.thread65 ]
  %v3_12774 = and i32 %v1_12774, %v1_12760
  br label %bb76

dec_label_pc_12780.preheader:                     ; preds = %bb75
  %v2_1278099 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1278099, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_12810, %bb74, %bb89, %bb84, %dec_label_pc_127e0, %.thread67
  %v5_12778 = phi i32 [ %v1_12768, %bb74 ], [ %v3_12774, %.thread67 ], [ %v1_127bc.v6_127bc.v6_127c4.v6_127cc, %dec_label_pc_127e0 ], [ 0, %bb84 ], [ %v1_12814, %dec_label_pc_12810 ], [ %v2_12810, %bb89 ]
  ret i32 %v5_12778

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_12780.preheader
  %v0_12794.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_12780.preheader ], [ %v4_12788, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_12780.preheader ], [ %v2_1278c11, %.thread1.thread9 ]
  br label %dec_label_pc_12794thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_12780.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1278c11, %.thread1.thread9 ], [ 0, %dec_label_pc_12780.preheader ]
  %v0_12794.pr33100 = phi i32 [ %v4_12788, %.thread1.thread9 ], [ %arg2, %dec_label_pc_12780.preheader ]
  %v4_12784 = icmp ult i32 %v0_12794.pr33100, %v1_12768
  br i1 %v4_12784, label %bb78, label %dec_label_pc_12794thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_12788 = and i32 %v0_12794.pr33100, 268435456
  %v3_12788 = icmp eq i32 %v2_12788, 0
  %v4_12788 = mul i32 %v0_12794.pr33100, 16
  br i1 %v3_12788, label %.thread1.thread9, label %dec_label_pc_12794.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1278c11 = add i32 %storemerge101, 4
  %v2_12780 = icmp ugt i32 %v4_12788, 268435455
  br i1 %v2_12780, label %.thread, label %bb77

dec_label_pc_12794thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_12794thread-pre-split.loopexit

dec_label_pc_12794thread-pre-split.loopexit:      ; preds = %dec_label_pc_12794thread-pre-split.loopexit.loopexit, %.thread
  %v0_12794.pr3398 = phi i32 [ %v0_12794.pr33.lcssa, %.thread ], [ %v0_12794.pr33100, %dec_label_pc_12794thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_12794thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_12794thread-pre-split

dec_label_pc_12794thread-pre-split:               ; preds = %.thread4, %dec_label_pc_12794thread-pre-split.loopexit
  %v1_127a039 = phi i32 [ %storemerge95, %dec_label_pc_12794thread-pre-split.loopexit ], [ %v2_127a0, %.thread4 ]
  %v0_12794.pr = phi i32 [ %v0_12794.pr3398, %dec_label_pc_12794thread-pre-split.loopexit ], [ %v3_1279c, %.thread4 ]
  br label %dec_label_pc_12794

dec_label_pc_12794.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_12794

dec_label_pc_12794:                               ; preds = %dec_label_pc_12794.loopexit, %dec_label_pc_12794thread-pre-split
  %v0_127a8.pr = phi i32 [ %v1_127a039, %dec_label_pc_12794thread-pre-split ], [ %storemerge101, %dec_label_pc_12794.loopexit ]
  %v1_1279c = phi i32 [ %v0_12794.pr, %dec_label_pc_12794thread-pre-split ], [ %v4_12788, %dec_label_pc_12794.loopexit ]
  %v2_12794 = icmp slt i32 %v1_1279c, 0
  br i1 %v2_12794, label %dec_label_pc_127a8, label %bb79

bb79:                                             ; preds = %dec_label_pc_12794
  %v4_12798 = icmp ult i32 %v1_1279c, %v1_12768
  br i1 %v4_12798, label %.thread4, label %dec_label_pc_127a8

.thread4:                                         ; preds = %bb79
  %v3_1279c = mul i32 %v1_1279c, 2
  %v2_127a0 = add i32 %v0_127a8.pr, 1
  br label %dec_label_pc_12794thread-pre-split

dec_label_pc_127a8:                               ; preds = %bb79, %dec_label_pc_12794
  %v2_127a8 = add i32 %v0_127a8.pr, -3
  %v5_127ac = icmp slt i32 %v0_127a8.pr, 3
  br i1 %v5_127ac, label %dec_label_pc_127ec, label %dec_label_pc_127b0

dec_label_pc_127b0:                               ; preds = %dec_label_pc_127a8, %bb83
  %v6_127d8 = phi i32 [ %v0_127e0, %bb83 ], [ %v2_127a8, %dec_label_pc_127a8 ]
  %v1_127b4 = phi i32 [ %v1_127bc.v6_127bc.v6_127c4.v6_127cc, %bb83 ], [ %v1_12768, %dec_label_pc_127a8 ]
  %v3_127d412 = phi i32 [ %v3_127d4, %bb83 ], [ %v1_1279c, %dec_label_pc_127a8 ]
  %v3_127b0 = icmp ult i32 %v1_127b4, %v3_127d412
  %v3_127b4 = select i1 %v3_127b0, i32 0, i32 %v3_127d412
  %v1_127bc = sub i32 %v1_127b4, %v3_127b4
  %v4_127b8 = udiv i32 %v3_127d412, 2
  %v6_127b8 = icmp ult i32 %v1_127bc, %v4_127b8
  %v6_127bc = select i1 %v6_127b8, i32 0, i32 %v4_127b8
  %v1_127bc.v6_127bc = sub i32 %v1_127bc, %v6_127bc
  %.demorgan = and i1 %v3_127b0, %v6_127b8
  %v4_127c0 = udiv i32 %v3_127d412, 4
  %v6_127c0 = icmp ult i32 %v1_127bc.v6_127bc, %v4_127c0
  %v6_127c4 = select i1 %v6_127c0, i32 0, i32 %v4_127c0
  %v1_127bc.v6_127bc.v6_127c4 = sub i32 %v1_127bc.v6_127bc, %v6_127c4
  %.demorgan71 = and i1 %.demorgan, %v6_127c0
  %v4_127c8 = udiv i32 %v3_127d412, 8
  %v6_127c8 = icmp ult i32 %v1_127bc.v6_127bc.v6_127c4, %v4_127c8
  %v6_127cc = select i1 %v6_127c8, i32 0, i32 %v4_127c8
  %v1_127bc.v6_127bc.v6_127c4.v6_127cc = sub i32 %v1_127bc.v6_127bc.v6_127c4, %v6_127cc
  %.demorgan72 = and i1 %.demorgan71, %v6_127c8
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_127b0
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_127b0, %bb80
  %v2_127d0 = add i32 %v1_127bc.v6_127bc.v6_127c4.v6_127cc, -1
  %v4_127d0 = sub i32 0, %v1_127bc.v6_127bc.v6_127c4.v6_127cc
  %v5_127d0 = and i32 %v1_127bc.v6_127bc.v6_127c4.v6_127cc, %v4_127d0
  %v3_127d4 = udiv i32 %v3_127d412, 16
  %v5_127d8 = icmp slt i32 %v1_127bc.v6_127bc.v6_127c4.v6_127cc, 1
  br i1 %v5_127d8, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_127d8 = add i32 %v6_127d8, -4
  %v9_127d8 = sub i32 3, %v6_127d8
  %v10_127d8 = and i32 %v9_127d8, %v6_127d8
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_127e0 = phi i32 [ %v6_127d8, %bb81 ], [ %v7_127d8, %bb82 ]
  %v0_127dc15.in = phi i32 [ %v2_127d0, %bb81 ], [ %v7_127d8, %bb82 ]
  %v1_127dc14.in = phi i32 [ %v5_127d0, %bb81 ], [ %v10_127d8, %bb82 ]
  %v1_127dc14 = icmp slt i32 %v1_127dc14.in, 0
  %v0_127dc15 = icmp slt i32 %v0_127dc15.in, 0
  %v2_127dc = xor i1 %v0_127dc15, %v1_127dc14
  br i1 %v2_127dc, label %dec_label_pc_127e0, label %dec_label_pc_127b0

dec_label_pc_127e0:                               ; preds = %bb83
  %v1_127e0 = urem i32 %v0_127e0, 4
  %v2_127e0 = icmp eq i32 %v1_127e0, 0
  br i1 %v2_127e0, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_127e0
  %v3_127e4 = icmp eq i32 %v1_127bc.v6_127bc.v6_127c4.v6_127cc, 0
  br i1 %v3_127e4, label %bb76, label %dec_label_pc_127ec

dec_label_pc_127ec:                               ; preds = %bb84, %dec_label_pc_127a8
  %v0_12800 = phi i32 [ %v3_127d4, %bb84 ], [ %v1_1279c, %dec_label_pc_127a8 ]
  %v1_127fc = phi i32 [ %v1_127bc.v6_127bc.v6_127c4.v6_127cc, %bb84 ], [ %v1_12768, %dec_label_pc_127a8 ]
  %v0_127ec = phi i32 [ %v0_127e0, %bb84 ], [ %v2_127a8, %dec_label_pc_127a8 ]
  %v5_127f0 = icmp slt i32 %v0_127ec, -2
  br i1 %v5_127f0, label %dec_label_pc_12810, label %dec_label_pc_127f4

dec_label_pc_127f4:                               ; preds = %dec_label_pc_127ec
  %v8_127ec = icmp eq i32 %v0_127ec, -2
  br i1 %v8_127ec, label %dec_label_pc_12804, label %dec_label_pc_127f8

dec_label_pc_127f8:                               ; preds = %dec_label_pc_127f4
  %v3_127f8 = icmp ult i32 %v1_127fc, %v0_12800
  br i1 %v3_127f8, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_127f8
  %v2_127f8 = sub i32 %v1_127fc, %v0_12800
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_127f8, %bb85
  %v0_1280452 = phi i32 [ %v1_127fc, %dec_label_pc_127f8 ], [ %v2_127f8, %bb85 ]
  %v3_12800 = udiv i32 %v0_12800, 2
  br label %dec_label_pc_12804

dec_label_pc_12804:                               ; preds = %dec_label_pc_127f4, %bb86
  %v0_1280c = phi i32 [ %v0_12800, %dec_label_pc_127f4 ], [ %v3_12800, %bb86 ]
  %v1_12808 = phi i32 [ %v1_127fc, %dec_label_pc_127f4 ], [ %v0_1280452, %bb86 ]
  %v3_12804 = icmp ult i32 %v1_12808, %v0_1280c
  br i1 %v3_12804, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_12804
  %v2_12804 = sub i32 %v1_12808, %v0_1280c
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_12804, %bb87
  %v0_1281055 = phi i32 [ %v1_12808, %dec_label_pc_12804 ], [ %v2_12804, %bb87 ]
  %v3_1280c = udiv i32 %v0_1280c, 2
  br label %dec_label_pc_12810

dec_label_pc_12810:                               ; preds = %dec_label_pc_127ec, %bb88
  %v2_12814 = phi i32 [ %v0_12800, %dec_label_pc_127ec ], [ %v3_1280c, %bb88 ]
  %v1_12814 = phi i32 [ %v1_127fc, %dec_label_pc_127ec ], [ %v0_1281055, %bb88 ]
  %v3_12810 = icmp ult i32 %v1_12814, %v2_12814
  br i1 %v3_12810, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_12810
  %v2_12810 = sub i32 %v1_12814, %v2_12814
  br label %bb76

dec_label_pc_1281c:                               ; preds = %dec_label_pc_12760
  %v0_1281c = load i32, i32* @lr, align 4
  %v0_12820 = call i32 @function_12910()
  call void @__pseudo_branch(i32 %v0_1281c)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12814, { 1, 2, 0 }
  uselistorder i32 %v0_12800, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_127e0, { 1, 0, 2 }
  uselistorder i32 %v7_127d8, { 1, 0 }
  uselistorder i32 %v3_127d4, { 1, 0 }
  uselistorder i32 %v1_127bc.v6_127bc.v6_127c4.v6_127cc, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_127c8, { 1, 0 }
  uselistorder i32 %v4_127c0, { 1, 0 }
  uselistorder i32 %v4_127b8, { 1, 0 }
  uselistorder i32 %v6_127d8, { 3, 0, 2, 1 }
  uselistorder i32 %v2_127a8, { 1, 0 }
  uselistorder i32 %v1_1279c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_12788, { 1, 0, 3, 2 }
  uselistorder i32 %v0_12794.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12768, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_12810, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_12804, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_127b0, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_1282c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1282c:
  store i32 %arg1, i32* @r0, align 4
  %v2_1282c = icmp eq i32 %arg2, 0
  br i1 %v2_1282c, label %dec_label_pc_12900, label %dec_label_pc_12834

dec_label_pc_12834:                               ; preds = %dec_label_pc_1282c
  %v1_1282c = icmp slt i32 %arg2, 0
  br i1 %v1_1282c, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_12834
  %v2_12834 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_12834, %bb
  %v4_1284c = phi i32 [ %arg2, %dec_label_pc_12834 ], [ %v2_12834, %bb ]
  %v0_12838 = load i32, i32* @r0, align 4
  %v1_12838 = icmp slt i32 %v0_12838, 0
  br i1 %v1_12838, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_1283c = sub i32 0, %v0_12838
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_12844 = phi i32 [ %v0_12838, %bb79 ], [ %v2_1283c, %bb80 ]
  %v1_12840 = add i32 %v4_1284c, -1
  %v7_12840 = icmp eq i32 %v4_1284c, 1
  br i1 %v7_12840, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_12844 = icmp eq i32 %v1_12844, %v4_1284c
  br i1 %v10_12844, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_12844 = icmp ult i32 %v1_12844, %v4_1284c
  br i1 %v4_12844, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_1284c = and i32 %v1_12840, %v4_1284c
  %v8_1284c = icmp eq i32 %v6_1284c, 0
  br i1 %v8_1284c, label %.thread72, label %dec_label_pc_1285c.preheader

dec_label_pc_1285c.preheader:                     ; preds = %bb84
  %v2_1285c109 = icmp ugt i32 %v4_1284c, 268435455
  br i1 %v2_1285c109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1285064 = phi i32 [ %v1_12844, %bb84 ], [ 0, %.thread70 ]
  %v3_12850 = and i32 %v1_1285064, %v1_12840
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_1285c.preheader
  %v0_12870.pr35.lcssa = phi i32 [ %v4_1284c, %dec_label_pc_1285c.preheader ], [ %v4_12864, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_1285c.preheader ], [ %v2_128689, %.thread2.thread7 ]
  br label %dec_label_pc_12870thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_1285c.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_128689, %.thread2.thread7 ], [ 0, %dec_label_pc_1285c.preheader ]
  %v0_12870.pr35110 = phi i32 [ %v4_12864, %.thread2.thread7 ], [ %v4_1284c, %dec_label_pc_1285c.preheader ]
  %v4_12860 = icmp ult i32 %v0_12870.pr35110, %v1_12844
  br i1 %v4_12860, label %bb86, label %dec_label_pc_12870thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_12864 = and i32 %v0_12870.pr35110, 268435456
  %v3_12864 = icmp eq i32 %v2_12864, 0
  %v4_12864 = mul i32 %v0_12870.pr35110, 16
  br i1 %v3_12864, label %.thread2.thread7, label %dec_label_pc_12870.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_128689 = add i32 %storemerge111, 4
  %v2_1285c = icmp ugt i32 %v4_12864, 268435455
  br i1 %v2_1285c, label %.thread1, label %bb85

dec_label_pc_12870thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_12870thread-pre-split.loopexit

dec_label_pc_12870thread-pre-split.loopexit:      ; preds = %dec_label_pc_12870thread-pre-split.loopexit.loopexit, %.thread1
  %v0_12870.pr35108 = phi i32 [ %v0_12870.pr35.lcssa, %.thread1 ], [ %v0_12870.pr35110, %dec_label_pc_12870thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_12870thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_12870thread-pre-split

dec_label_pc_12870thread-pre-split:               ; preds = %.thread4, %dec_label_pc_12870thread-pre-split.loopexit
  %v1_1287c41 = phi i32 [ %storemerge105, %dec_label_pc_12870thread-pre-split.loopexit ], [ %v2_1287c, %.thread4 ]
  %v2_1287436 = phi i32 [ %v1_12844, %dec_label_pc_12870thread-pre-split.loopexit ], [ %v2_12874, %.thread4 ]
  %v0_12870.pr = phi i32 [ %v0_12870.pr35108, %dec_label_pc_12870thread-pre-split.loopexit ], [ %v3_12878, %.thread4 ]
  br label %dec_label_pc_12870

dec_label_pc_12870.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_12870

dec_label_pc_12870:                               ; preds = %dec_label_pc_12870.loopexit, %dec_label_pc_12870thread-pre-split
  %v0_12884.pr = phi i32 [ %v1_1287c41, %dec_label_pc_12870thread-pre-split ], [ %storemerge111, %dec_label_pc_12870.loopexit ]
  %v2_12874 = phi i32 [ %v2_1287436, %dec_label_pc_12870thread-pre-split ], [ %v1_12844, %dec_label_pc_12870.loopexit ]
  %v1_12878 = phi i32 [ %v0_12870.pr, %dec_label_pc_12870thread-pre-split ], [ %v4_12864, %dec_label_pc_12870.loopexit ]
  %v2_12870 = icmp slt i32 %v1_12878, 0
  br i1 %v2_12870, label %dec_label_pc_12884, label %bb87

bb87:                                             ; preds = %dec_label_pc_12870
  %v4_12874 = icmp ult i32 %v1_12878, %v2_12874
  br i1 %v4_12874, label %.thread4, label %dec_label_pc_12884

.thread4:                                         ; preds = %bb87
  %v3_12878 = mul i32 %v1_12878, 2
  %v2_1287c = add i32 %v0_12884.pr, 1
  br label %dec_label_pc_12870thread-pre-split

dec_label_pc_12884:                               ; preds = %bb87, %dec_label_pc_12870
  %v2_12884 = add i32 %v0_12884.pr, -3
  %v5_12888 = icmp slt i32 %v0_12884.pr, 3
  br i1 %v5_12888, label %dec_label_pc_128c8, label %dec_label_pc_1288c

dec_label_pc_1288c:                               ; preds = %dec_label_pc_12884, %bb91
  %v6_128b4 = phi i32 [ %v0_128bc, %bb91 ], [ %v2_12884, %dec_label_pc_12884 ]
  %v1_12890 = phi i32 [ %v1_12898.v6_12898.v6_128a0.v6_128a8, %bb91 ], [ %v2_12874, %dec_label_pc_12884 ]
  %v3_128b010 = phi i32 [ %v3_128b0, %bb91 ], [ %v1_12878, %dec_label_pc_12884 ]
  %v3_1288c = icmp ult i32 %v1_12890, %v3_128b010
  %v3_12890 = select i1 %v3_1288c, i32 0, i32 %v3_128b010
  %v1_12898 = sub i32 %v1_12890, %v3_12890
  %v4_12894 = udiv i32 %v3_128b010, 2
  %v6_12894 = icmp ult i32 %v1_12898, %v4_12894
  %v6_12898 = select i1 %v6_12894, i32 0, i32 %v4_12894
  %v1_12898.v6_12898 = sub i32 %v1_12898, %v6_12898
  %.demorgan = and i1 %v3_1288c, %v6_12894
  %v4_1289c = udiv i32 %v3_128b010, 4
  %v6_1289c = icmp ult i32 %v1_12898.v6_12898, %v4_1289c
  %v6_128a0 = select i1 %v6_1289c, i32 0, i32 %v4_1289c
  %v1_12898.v6_12898.v6_128a0 = sub i32 %v1_12898.v6_12898, %v6_128a0
  %.demorgan76 = and i1 %.demorgan, %v6_1289c
  %v4_128a4 = udiv i32 %v3_128b010, 8
  %v6_128a4 = icmp ult i32 %v1_12898.v6_12898.v6_128a0, %v4_128a4
  %v6_128a8 = select i1 %v6_128a4, i32 0, i32 %v4_128a4
  %v1_12898.v6_12898.v6_128a0.v6_128a8 = sub i32 %v1_12898.v6_12898.v6_128a0, %v6_128a8
  %.demorgan77 = and i1 %.demorgan76, %v6_128a4
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_1288c
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_1288c, %bb88
  %v2_128ac = add i32 %v1_12898.v6_12898.v6_128a0.v6_128a8, -1
  %v4_128ac = sub i32 0, %v1_12898.v6_12898.v6_128a0.v6_128a8
  %v5_128ac = and i32 %v1_12898.v6_12898.v6_128a0.v6_128a8, %v4_128ac
  %v3_128b0 = udiv i32 %v3_128b010, 16
  %v5_128b4 = icmp slt i32 %v1_12898.v6_12898.v6_128a0.v6_128a8, 1
  br i1 %v5_128b4, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_128b4 = add i32 %v6_128b4, -4
  %v9_128b4 = sub i32 3, %v6_128b4
  %v10_128b4 = and i32 %v9_128b4, %v6_128b4
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_128bc = phi i32 [ %v6_128b4, %bb89 ], [ %v7_128b4, %bb90 ]
  %v0_128b813.in = phi i32 [ %v2_128ac, %bb89 ], [ %v7_128b4, %bb90 ]
  %v1_128b812.in = phi i32 [ %v5_128ac, %bb89 ], [ %v10_128b4, %bb90 ]
  %v1_128b812 = icmp slt i32 %v1_128b812.in, 0
  %v0_128b813 = icmp slt i32 %v0_128b813.in, 0
  %v2_128b8 = xor i1 %v0_128b813, %v1_128b812
  br i1 %v2_128b8, label %dec_label_pc_128bc, label %dec_label_pc_1288c

dec_label_pc_128bc:                               ; preds = %bb91
  %v1_128bc = urem i32 %v0_128bc, 4
  %v2_128bc = icmp eq i32 %v1_128bc, 0
  br i1 %v2_128bc, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_128bc
  %v3_128c0 = icmp eq i32 %v1_12898.v6_12898.v6_128a0.v6_128a8, 0
  br i1 %v3_128c0, label %.thread6, label %dec_label_pc_128c8

dec_label_pc_128c8:                               ; preds = %bb92, %dec_label_pc_12884
  %v0_128dc = phi i32 [ %v3_128b0, %bb92 ], [ %v1_12878, %dec_label_pc_12884 ]
  %v1_128d8 = phi i32 [ %v1_12898.v6_12898.v6_128a0.v6_128a8, %bb92 ], [ %v2_12874, %dec_label_pc_12884 ]
  %v0_128c8 = phi i32 [ %v0_128bc, %bb92 ], [ %v2_12884, %dec_label_pc_12884 ]
  %v5_128cc = icmp slt i32 %v0_128c8, -2
  br i1 %v5_128cc, label %dec_label_pc_128ec, label %dec_label_pc_128d0

dec_label_pc_128d0:                               ; preds = %dec_label_pc_128c8
  %v8_128c8 = icmp eq i32 %v0_128c8, -2
  br i1 %v8_128c8, label %dec_label_pc_128e0, label %dec_label_pc_128d4

dec_label_pc_128d4:                               ; preds = %dec_label_pc_128d0
  %v3_128d4 = icmp ult i32 %v1_128d8, %v0_128dc
  br i1 %v3_128d4, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_128d4
  %v2_128d4 = sub i32 %v1_128d8, %v0_128dc
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_128d4, %bb93
  %v0_128e054 = phi i32 [ %v1_128d8, %dec_label_pc_128d4 ], [ %v2_128d4, %bb93 ]
  %v3_128dc = udiv i32 %v0_128dc, 2
  br label %dec_label_pc_128e0

dec_label_pc_128e0:                               ; preds = %dec_label_pc_128d0, %bb94
  %v0_128e8 = phi i32 [ %v0_128dc, %dec_label_pc_128d0 ], [ %v3_128dc, %bb94 ]
  %v1_128e4 = phi i32 [ %v1_128d8, %dec_label_pc_128d0 ], [ %v0_128e054, %bb94 ]
  %v3_128e0 = icmp ult i32 %v1_128e4, %v0_128e8
  br i1 %v3_128e0, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_128e0
  %v2_128e0 = sub i32 %v1_128e4, %v0_128e8
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_128e0, %bb95
  %v0_128ec57 = phi i32 [ %v1_128e4, %dec_label_pc_128e0 ], [ %v2_128e0, %bb95 ]
  %v3_128e8 = udiv i32 %v0_128e8, 2
  br label %dec_label_pc_128ec

dec_label_pc_128ec:                               ; preds = %dec_label_pc_128c8, %bb96
  %v2_128f0 = phi i32 [ %v0_128dc, %dec_label_pc_128c8 ], [ %v3_128e8, %bb96 ]
  %v1_128f0 = phi i32 [ %v1_128d8, %dec_label_pc_128c8 ], [ %v0_128ec57, %bb96 ]
  %v3_128ec = icmp ult i32 %v1_128f0, %v2_128f0
  br i1 %v3_128ec, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_128ec
  %v2_128ec = sub i32 %v1_128f0, %v2_128f0
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_128ec, %bb83, %.thread72, %dec_label_pc_128bc, %bb92, %bb97
  %v1_128f8 = phi i32 [ %v1_12898.v6_12898.v6_128a0.v6_128a8, %dec_label_pc_128bc ], [ 0, %bb92 ], [ %v1_128f0, %dec_label_pc_128ec ], [ %v2_128ec, %bb97 ], [ %v3_12850, %.thread72 ], [ %v1_12844, %bb83 ]
  br i1 %v1_12838, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_128f8 = sub i32 0, %v1_128f8
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_128fc = phi i32 [ %v1_128f8, %.thread6 ], [ %v2_128f8, %bb98 ]
  ret i32 %v1_128fc

dec_label_pc_12900:                               ; preds = %dec_label_pc_1282c
  %v0_12900 = load i32, i32* @lr, align 4
  %v0_12904 = call i32 @function_12910()
  call void @__pseudo_branch(i32 %v0_12900)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_128dc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_128bc, { 1, 0, 2 }
  uselistorder i32 %v7_128b4, { 1, 0 }
  uselistorder i32 %v3_128b0, { 1, 0 }
  uselistorder i32 %v1_12898.v6_12898.v6_128a0.v6_128a8, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_128a4, { 1, 0 }
  uselistorder i32 %v4_1289c, { 1, 0 }
  uselistorder i32 %v4_12894, { 1, 0 }
  uselistorder i32 %v6_128b4, { 3, 0, 2, 1 }
  uselistorder i32 %v2_12884, { 1, 0 }
  uselistorder i32 %v1_12878, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_12874, { 1, 0, 3, 2 }
  uselistorder i32 %v4_12864, { 1, 0, 3, 2 }
  uselistorder i32 %v0_12870.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12844, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_1284c, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_12910, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_128ec, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_128e0, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_1288c, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_12910() local_unnamed_addr {
dec_label_pc_12910:
  %v1_12910 = load i32, i32* @r0, align 4
  ret i32 %v1_12910
}

define i32 @function_12914(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12914:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_12914 = load i32, i32* @r2, align 4
  %v1_12924 = add i32 %arg2, -12
  store i32 %v6_12914, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_12924, 2
  br i1 %tmp, label %dec_label_pc_1294c, label %dec_label_pc_12944

dec_label_pc_12944:                               ; preds = %dec_label_pc_12914
  %v0_12944 = call i32 @function_12988()
  br label %dec_label_pc_12978

dec_label_pc_1294c:                               ; preds = %dec_label_pc_12914
  %v2_12954 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_12954, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_12954, -4095
  br i1 %tmp8, label %dec_label_pc_12978, label %dec_label_pc_12964

dec_label_pc_12964:                               ; preds = %dec_label_pc_1294c
  %v0_12964 = call i32 @function_12f80()
  %v0_12968 = load i32, i32* %r4.global-to-local, align 4
  %v1_12968 = sub i32 0, %v0_12968
  %v2_1296c = inttoptr i32 %v0_12964 to i32*
  store i32 %v1_12968, i32* %v2_1296c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12978

dec_label_pc_12978:                               ; preds = %dec_label_pc_12964, %dec_label_pc_1294c, %dec_label_pc_12944
  %storemerge = phi i32 [ %v0_12944, %dec_label_pc_12944 ], [ %v2_12954, %dec_label_pc_1294c ], [ -1, %dec_label_pc_12964 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_12954, { 1, 0, 2 }
}

define i32 @function_12988() local_unnamed_addr {
dec_label_pc_12988:
  %r4.global-to-local = alloca i32, align 4
  %v0_129a8 = load i32, i32* @r0, align 4
  store i32 %v0_129a8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_129a8, -4095
  br i1 %tmp, label %dec_label_pc_129c4, label %dec_label_pc_129b4

dec_label_pc_129b4:                               ; preds = %dec_label_pc_12988
  %v0_129b4 = call i32 @function_12f80()
  %v0_129b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_129b8 = sub i32 0, %v0_129b8
  %v2_129bc = inttoptr i32 %v0_129b4 to i32*
  store i32 %v1_129b8, i32* %v2_129bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_129c4

dec_label_pc_129c4:                               ; preds = %dec_label_pc_12988, %dec_label_pc_129b4
  %v0_129c4 = phi i32 [ %v0_129a8, %dec_label_pc_12988 ], [ -1, %dec_label_pc_129b4 ]
  ret i32 %v0_129c4

; uselistorder directives
  uselistorder i32 %v0_129a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_129c4, { 1, 0 }
}

define i32 @function_129d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_129d8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_129d8 = load i32, i32* @r4, align 4
  store i32 %v3_129d8, i32* %stack_var_-8, align 4
  %v1_129dc = call i32 @close(i32 %arg1)
  store i32 %v1_129dc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_129dc, -4095
  br i1 %tmp, label %dec_label_pc_129fc, label %dec_label_pc_129ec

dec_label_pc_129ec:                               ; preds = %dec_label_pc_129d8
  %v0_129ec = call i32 @function_12f80()
  %v0_129f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_129f0 = sub i32 0, %v0_129f0
  %v2_129f4 = inttoptr i32 %v0_129ec to i32*
  store i32 %v1_129f0, i32* %v2_129f4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_129fc

dec_label_pc_129fc:                               ; preds = %dec_label_pc_129d8, %dec_label_pc_129ec
  %v0_129fc = phi i32 [ %v1_129dc, %dec_label_pc_129d8 ], [ -1, %dec_label_pc_129ec ]
  %v2_12a00 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12a00, i32* @r4, align 4
  ret i32 %v0_129fc

; uselistorder directives
  uselistorder i32 %v1_129dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_129fc, { 1, 0 }
}

define i32 @function_12a04() local_unnamed_addr {
dec_label_pc_12a04:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a04 = load i32, i32* @r4, align 4
  store i32 %v3_12a04, i32* %stack_var_-8, align 4
  %v0_12a08 = call i32 @fork()
  store i32 %v0_12a08, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12a08, -4095
  br i1 %tmp, label %dec_label_pc_12a28, label %dec_label_pc_12a18

dec_label_pc_12a18:                               ; preds = %dec_label_pc_12a04
  %v0_12a18 = call i32 @function_12f80()
  %v0_12a1c = load i32, i32* %r4.global-to-local, align 4
  %v1_12a1c = sub i32 0, %v0_12a1c
  %v2_12a20 = inttoptr i32 %v0_12a18 to i32*
  store i32 %v1_12a1c, i32* %v2_12a20, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12a28

dec_label_pc_12a28:                               ; preds = %dec_label_pc_12a04, %dec_label_pc_12a18
  %v0_12a28 = phi i32 [ %v0_12a08, %dec_label_pc_12a04 ], [ -1, %dec_label_pc_12a18 ]
  %v2_12a2c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12a2c, i32* @r4, align 4
  ret i32 %v0_12a28

; uselistorder directives
  uselistorder i32 %v0_12a08, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a28, { 1, 0 }
}

define i32 @function_12a30() local_unnamed_addr {
dec_label_pc_12a30:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a30 = load i32, i32* @r4, align 4
  store i32 %v3_12a30, i32* %stack_var_-8, align 4
  %v0_12a34 = call i32 @getpid()
  store i32 %v0_12a34, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12a34, -4095
  br i1 %tmp, label %dec_label_pc_12a54, label %dec_label_pc_12a44

dec_label_pc_12a44:                               ; preds = %dec_label_pc_12a30
  %v0_12a44 = call i32 @function_12f80()
  %v0_12a48 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a48 = sub i32 0, %v0_12a48
  %v2_12a4c = inttoptr i32 %v0_12a44 to i32*
  store i32 %v1_12a48, i32* %v2_12a4c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12a54

dec_label_pc_12a54:                               ; preds = %dec_label_pc_12a30, %dec_label_pc_12a44
  %v0_12a54 = phi i32 [ %v0_12a34, %dec_label_pc_12a30 ], [ -1, %dec_label_pc_12a44 ]
  %v2_12a58 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12a58, i32* @r4, align 4
  ret i32 %v0_12a54

; uselistorder directives
  uselistorder i32 %v0_12a34, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a54, { 1, 0 }
}

define i32 @function_12a5c() local_unnamed_addr {
dec_label_pc_12a5c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a5c = load i32, i32* @r4, align 4
  store i32 %v3_12a5c, i32* %stack_var_-8, align 4
  %v0_12a60 = call i32 @getppid()
  store i32 %v0_12a60, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12a60, -4095
  br i1 %tmp, label %dec_label_pc_12a80, label %dec_label_pc_12a70

dec_label_pc_12a70:                               ; preds = %dec_label_pc_12a5c
  %v0_12a70 = call i32 @function_12f80()
  %v0_12a74 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a74 = sub i32 0, %v0_12a74
  %v2_12a78 = inttoptr i32 %v0_12a70 to i32*
  store i32 %v1_12a74, i32* %v2_12a78, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12a80

dec_label_pc_12a80:                               ; preds = %dec_label_pc_12a5c, %dec_label_pc_12a70
  %v0_12a80 = phi i32 [ %v0_12a60, %dec_label_pc_12a5c ], [ -1, %dec_label_pc_12a70 ]
  %v2_12a84 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12a84, i32* @r4, align 4
  ret i32 %v0_12a80

; uselistorder directives
  uselistorder i32 %v0_12a60, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a80, { 1, 0 }
}

define i32 @function_12a88(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12a88:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_12a88 = load i32, i32* @r3, align 4
  store i32 %v9_12a88, i32* %stack_var_-4, align 4
  %v2_12a94 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_12a94, i32* @r3, align 4
  %v2_12aa4 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_12aa4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_12aa4, -4095
  br i1 %tmp, label %dec_label_pc_12ac4, label %dec_label_pc_12ab4

dec_label_pc_12ab4:                               ; preds = %dec_label_pc_12a88
  %v0_12ab4 = call i32 @function_12f80()
  %v0_12ab8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12ab8 = sub i32 0, %v0_12ab8
  store i32 %v1_12ab8, i32* @r3, align 4
  %v2_12abc = inttoptr i32 %v0_12ab4 to i32*
  store i32 %v1_12ab8, i32* %v2_12abc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12ac4

dec_label_pc_12ac4:                               ; preds = %dec_label_pc_12a88, %dec_label_pc_12ab4
  %v0_12ac4 = phi i32 [ %v2_12aa4, %dec_label_pc_12a88 ], [ -1, %dec_label_pc_12ab4 ]
  ret i32 %v0_12ac4

; uselistorder directives
  uselistorder i32 %v2_12aa4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_12ac4, { 1, 0 }
}

define i32 @function_12ad8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12ad8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ad8 = load i32, i32* @r4, align 4
  store i32 %v3_12ad8, i32* %stack_var_-8, align 4
  %v2_12adc = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_12ae0 = icmp eq i32 %v2_12adc, -4096
  store i1 %v7_12ae0, i1* @cpsr_z, align 1
  store i32 %v2_12adc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_12adc, -4095
  br i1 %tmp, label %dec_label_pc_12afc, label %dec_label_pc_12aec

dec_label_pc_12aec:                               ; preds = %dec_label_pc_12ad8
  %v0_12aec = call i32 @function_12f80()
  %v0_12af0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12af0 = sub i32 0, %v0_12af0
  %v2_12af4 = inttoptr i32 %v0_12aec to i32*
  store i32 %v1_12af0, i32* %v2_12af4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12afc

dec_label_pc_12afc:                               ; preds = %dec_label_pc_12ad8, %dec_label_pc_12aec
  %v0_12afc = phi i32 [ %v2_12adc, %dec_label_pc_12ad8 ], [ -1, %dec_label_pc_12aec ]
  %v2_12b00 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12b00, i32* @r4, align 4
  ret i32 %v0_12afc

; uselistorder directives
  uselistorder i32 %v2_12adc, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_12afc, { 1, 0 }
}

define i32 @function_12b04(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12b04:
  %r4.global-to-local = alloca i32, align 4
  %v6_12b04 = load i32, i32* @r2, align 4
  %v1_12b14 = and i32 %arg2, 64
  store i32 %v1_12b14, i32* @r3, align 4
  %v2_12b14 = icmp eq i32 %v1_12b14, 0
  br i1 %v2_12b14, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_12b04
  store i32 %v6_12b04, i32* @r3, align 4
  %phitmp = urem i32 %v6_12b04, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12b04, %bb
  %v0_12b24 = phi i32 [ 0, %dec_label_pc_12b04 ], [ %phitmp, %bb ]
  store i32 %v0_12b24, i32* @r2, align 4
  %v4_12b2c = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_12b30 = icmp eq i32 %v4_12b2c, -4096
  store i1 %v7_12b30, i1* @cpsr_z, align 1
  store i32 %v4_12b2c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12b2c, -4095
  br i1 %tmp, label %dec_label_pc_12b4c, label %dec_label_pc_12b3c

dec_label_pc_12b3c:                               ; preds = %.thread1
  %v0_12b3c = call i32 @function_12f80()
  %v0_12b40 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b40 = sub i32 0, %v0_12b40
  store i32 %v1_12b40, i32* @r3, align 4
  %v2_12b44 = inttoptr i32 %v0_12b3c to i32*
  store i32 %v1_12b40, i32* %v2_12b44, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b4c

dec_label_pc_12b4c:                               ; preds = %.thread1, %dec_label_pc_12b3c
  %v0_12b4c = phi i32 [ %v4_12b2c, %.thread1 ], [ -1, %dec_label_pc_12b3c ]
  ret i32 %v0_12b4c

; uselistorder directives
  uselistorder i32 %v4_12b2c, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_12b4c, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_12b60(i32 %arg1) local_unnamed_addr {
dec_label_pc_12b60:
  store i32 %arg1, i32* @r2, align 4
  %v0_12b68 = load i32, i32* @r0, align 4
  %v2_12b68 = inttoptr i32 %v0_12b68 to i8*
  %v3_12b68 = call i32 @function_12b04(i8* %v2_12b68, i32 577)
  %v0_12b6c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12b6c, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_12b60
  %v6_12b6c = and i32 %v3_12b68, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_12b60, %bb
  %v7_12b6c = phi i32 [ %v3_12b68, %dec_label_pc_12b60 ], [ %v6_12b6c, %bb ]
  ret i32 %v7_12b6c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_12b70(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12b70:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12b70 = load i32, i32* @r4, align 4
  store i32 %v3_12b70, i32* %stack_var_-8, align 4
  %v2_12b78 = load i32, i32* @r2, align 4
  %v3_12b78 = load i32, i32* @r3, align 4
  %v4_12b78 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_12b78, i32 %v3_12b78, i32 0)
  store i32 %v4_12b78, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12b78, -4095
  br i1 %tmp, label %dec_label_pc_12b98, label %dec_label_pc_12b88

dec_label_pc_12b88:                               ; preds = %dec_label_pc_12b70
  %v0_12b88 = call i32 @function_12f80()
  %v0_12b8c = load i32, i32* %r4.global-to-local, align 4
  %v1_12b8c = sub i32 0, %v0_12b8c
  %v2_12b90 = inttoptr i32 %v0_12b88 to i32*
  store i32 %v1_12b8c, i32* %v2_12b90, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b98

dec_label_pc_12b98:                               ; preds = %dec_label_pc_12b70, %dec_label_pc_12b88
  %v0_12b98 = phi i32 [ %v4_12b78, %dec_label_pc_12b70 ], [ -1, %dec_label_pc_12b88 ]
  %v2_12b9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12b9c, i32* @r4, align 4
  ret i32 %v0_12b98

; uselistorder directives
  uselistorder i32 %v4_12b78, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12b98, { 1, 0 }
}

define i32 @function_12ba0(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12ba0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ba0 = load i32, i32* @r4, align 4
  store i32 %v3_12ba0, i32* %stack_var_-8, align 4
  %v4_12ba4 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_12ba4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12ba4, -4095
  br i1 %tmp, label %dec_label_pc_12bc4, label %dec_label_pc_12bb4

dec_label_pc_12bb4:                               ; preds = %dec_label_pc_12ba0
  %v0_12bb4 = call i32 @function_12f80()
  %v0_12bb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12bb8 = sub i32 0, %v0_12bb8
  %v2_12bbc = inttoptr i32 %v0_12bb4 to i32*
  store i32 %v1_12bb8, i32* %v2_12bbc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12bc4

dec_label_pc_12bc4:                               ; preds = %dec_label_pc_12ba0, %dec_label_pc_12bb4
  %v0_12bc4 = phi i32 [ %v4_12ba4, %dec_label_pc_12ba0 ], [ -1, %dec_label_pc_12bb4 ]
  %v2_12bc8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12bc8, i32* @r4, align 4
  ret i32 %v0_12bc4

; uselistorder directives
  uselistorder i32 %v4_12ba4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12bc4, { 1, 0 }
}

define i32 @function_12bcc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12bcc:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_12bcc = load i32, i32* @r4, align 4
  store i32 %v3_12bcc, i32* %stack_var_-8, align 4
  %v7_12bd0 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_12bd0, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_12bd0, -4095
  br i1 %tmp6, label %dec_label_pc_12bf0, label %dec_label_pc_12be0

dec_label_pc_12be0:                               ; preds = %dec_label_pc_12bcc
  %v0_12be0 = call i32 @function_12f80()
  %v0_12be4 = load i32, i32* %r4.global-to-local, align 4
  %v1_12be4 = sub i32 0, %v0_12be4
  %v2_12be8 = inttoptr i32 %v0_12be0 to i32*
  store i32 %v1_12be4, i32* %v2_12be8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12bf0

dec_label_pc_12bf0:                               ; preds = %dec_label_pc_12bcc, %dec_label_pc_12be0
  %v0_12bf0 = phi i32 [ %v7_12bd0, %dec_label_pc_12bcc ], [ -1, %dec_label_pc_12be0 ]
  %v2_12bf4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12bf4, i32* @r4, align 4
  ret i32 %v0_12bf0

; uselistorder directives
  uselistorder i32 %v7_12bd0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12bf0, { 1, 0 }
}

define i32 @function_12bf8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12bf8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12bf8 = load i32, i32* @r4, align 4
  store i32 %v3_12bf8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12c20, label %dec_label_pc_12c10

dec_label_pc_12c10:                               ; preds = %dec_label_pc_12bf8
  %v0_12c10 = call i32 @function_12f80()
  %v0_12c14 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c14 = sub i32 0, %v0_12c14
  %v2_12c18 = inttoptr i32 %v0_12c10 to i32*
  store i32 %v1_12c14, i32* %v2_12c18, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12c24.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12c20

dec_label_pc_12c20:                               ; preds = %dec_label_pc_12bf8, %dec_label_pc_12c10
  %v2_12c24 = phi i32 [ %v3_12bf8, %dec_label_pc_12bf8 ], [ %v2_12c24.pre, %dec_label_pc_12c10 ]
  %v0_12c20 = phi i32 [ %arg1, %dec_label_pc_12bf8 ], [ -1, %dec_label_pc_12c10 ]
  store i32 %v2_12c24, i32* @r4, align 4
  ret i32 %v0_12c20

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12c20, { 1, 0 }
}

define i32 @function_12c28(i32 %arg1) local_unnamed_addr {
dec_label_pc_12c28:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12c28 = load i32, i32* @r4, align 4
  store i32 %v3_12c28, i32* %stack_var_-8, align 4
  %v0_12c2c = call i32 @setsid()
  store i32 %v0_12c2c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12c2c, -4095
  br i1 %tmp, label %dec_label_pc_12c4c, label %dec_label_pc_12c3c

dec_label_pc_12c3c:                               ; preds = %dec_label_pc_12c28
  %v0_12c3c = call i32 @function_12f80()
  %v0_12c40 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c40 = sub i32 0, %v0_12c40
  %v2_12c44 = inttoptr i32 %v0_12c3c to i32*
  store i32 %v1_12c40, i32* %v2_12c44, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c4c

dec_label_pc_12c4c:                               ; preds = %dec_label_pc_12c28, %dec_label_pc_12c3c
  %v0_12c4c = phi i32 [ %v0_12c2c, %dec_label_pc_12c28 ], [ -1, %dec_label_pc_12c3c ]
  %v2_12c50 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12c50, i32* @r4, align 4
  ret i32 %v0_12c4c

; uselistorder directives
  uselistorder i32 %v0_12c2c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12c4c, { 1, 0 }
}

define i32 @function_12c54(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12c54:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12c54 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_12c54, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12c54
  %v3_12c5c5 = load i32, i32* @r4, align 4
  store i32 %v3_12c5c5, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12c7c

bb:                                               ; preds = %dec_label_pc_12c54
  %v3_12c5c = load i32, i32* @r4, align 4
  store i32 %v3_12c5c, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_12c7c, label %dec_label_pc_12c68

dec_label_pc_12c68:                               ; preds = %bb
  %v0_12c68 = call i32 @function_12f80()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12c74 = inttoptr i32 %v0_12c68 to i32*
  store i32 22, i32* %v2_12c74, align 4
  %v0_12ca0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12ca0

dec_label_pc_12c7c:                               ; preds = %.thread, %bb
  %v7_12c7c = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_12c7c, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_12c7c, -4095
  br i1 %tmp13, label %dec_label_pc_12c9c, label %dec_label_pc_12c8c

dec_label_pc_12c8c:                               ; preds = %dec_label_pc_12c7c
  %v0_12c8c = call i32 @function_12f80()
  %v0_12c90 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c90 = sub i32 0, %v0_12c90
  %v2_12c94 = inttoptr i32 %v0_12c8c to i32*
  store i32 %v1_12c90, i32* %v2_12c94, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c9c

dec_label_pc_12c9c:                               ; preds = %dec_label_pc_12c7c, %dec_label_pc_12c8c
  %v0_12c9c = phi i32 [ %v7_12c7c, %dec_label_pc_12c7c ], [ -1, %dec_label_pc_12c8c ]
  store i32 %v0_12c9c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12ca0

dec_label_pc_12ca0:                               ; preds = %dec_label_pc_12c68, %dec_label_pc_12c9c
  %v0_12ca0 = phi i32 [ %v0_12ca0.pre, %dec_label_pc_12c68 ], [ %v0_12c9c, %dec_label_pc_12c9c ]
  %v2_12ca4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12ca4, i32* @r4, align 4
  ret i32 %v0_12ca0

; uselistorder directives
  uselistorder i32 %v7_12c7c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_12ca0, { 1, 0 }
  uselistorder label %dec_label_pc_12c9c, { 1, 0 }
  uselistorder label %dec_label_pc_12c7c, { 1, 0 }
}

define i32 @function_12ca8(i32* %arg1) local_unnamed_addr {
dec_label_pc_12ca8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ca8 = load i32, i32* @r4, align 4
  store i32 %v3_12ca8, i32* %stack_var_-8, align 4
  %v2_12cac = call i32 @time(i32* %arg1)
  store i32 %v2_12cac, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_12cac, -4095
  br i1 %tmp, label %dec_label_pc_12ccc, label %dec_label_pc_12cbc

dec_label_pc_12cbc:                               ; preds = %dec_label_pc_12ca8
  %v0_12cbc = call i32 @function_12f80()
  %v0_12cc0 = load i32, i32* %r4.global-to-local, align 4
  %v1_12cc0 = sub i32 0, %v0_12cc0
  %v2_12cc4 = inttoptr i32 %v0_12cbc to i32*
  store i32 %v1_12cc0, i32* %v2_12cc4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12ccc

dec_label_pc_12ccc:                               ; preds = %dec_label_pc_12ca8, %dec_label_pc_12cbc
  %v0_12ccc = phi i32 [ %v2_12cac, %dec_label_pc_12ca8 ], [ -1, %dec_label_pc_12cbc ]
  %v2_12cd0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12cd0, i32* @r4, align 4
  ret i32 %v0_12ccc

; uselistorder directives
  uselistorder i32 %v2_12cac, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12ccc, { 1, 0 }
}

define i32 @function_12cd4(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12cd4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12cd4 = load i32, i32* @r4, align 4
  store i32 %v3_12cd4, i32* %stack_var_-8, align 4
  %v4_12cd8 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_12cd8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12cd8, -4095
  br i1 %tmp, label %dec_label_pc_12cf8, label %dec_label_pc_12ce8

dec_label_pc_12ce8:                               ; preds = %dec_label_pc_12cd4
  %v0_12ce8 = call i32 @function_12f80()
  %v0_12cec = load i32, i32* %r4.global-to-local, align 4
  %v1_12cec = sub i32 0, %v0_12cec
  %v2_12cf0 = inttoptr i32 %v0_12ce8 to i32*
  store i32 %v1_12cec, i32* %v2_12cf0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12cf8

dec_label_pc_12cf8:                               ; preds = %dec_label_pc_12cd4, %dec_label_pc_12ce8
  %v0_12cf8 = phi i32 [ %v4_12cd8, %dec_label_pc_12cd4 ], [ -1, %dec_label_pc_12ce8 ]
  %v2_12cfc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12cfc, i32* @r4, align 4
  ret i32 %v0_12cf8

; uselistorder directives
  uselistorder i32 %v4_12cd8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12cf8, { 1, 0 }
}

define i32 @function_12d00(i32* %arg1) local_unnamed_addr {
dec_label_pc_12d00:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12d00 = load i32, i32* @r4, align 4
  store i32 %v3_12d00, i32* %stack_var_-20, align 4
  %v6_12d00 = load i32, i32* @r5, align 4
  %v9_12d00 = load i32, i32* @r6, align 4
  %v12_12d00 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12d08 = load i32, i32* %arg1, align 4
  store i32 %v2_12d08, i32* %r4.global-to-local, align 4
  %v2_12d0c = ptrtoint i32* %stack_var_-36 to i32
  %v1_12d10 = add i32 %tmp, 24
  store i32 %v1_12d10, i32* @r6, align 4
  %v3_12d14 = icmp eq i32 %v2_12d08, -1
  store i32 %v2_12d0c, i32* @r7, align 4
  store i32 %v1_12d10, i32* %r2.global-to-local, align 4
  store i32 %v2_12d0c, i32* @r0, align 4
  br i1 %v3_12d14, label %dec_label_pc_12d2c, label %dec_label_pc_12d40

dec_label_pc_12d2c:                               ; preds = %dec_label_pc_12d00
  %v0_12d2c = call i32 @function_12f80()
  %v0_12d34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12d34, i32* %r2.global-to-local, align 4
  %v2_12d38 = inttoptr i32 %v0_12d2c to i32*
  store i32 9, i32* %v2_12d38, align 4
  %v0_12d98.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d98

dec_label_pc_12d40:                               ; preds = %dec_label_pc_12d00
  %v8_12d48 = call i32 @function_13e44(i32 %v2_12d0c, i32 ptrtoint (i32* @global_var_13e3c.571 to i32), i32 %v1_12d10, i32 81476, i32 %v3_12d00, i32 %v6_12d00, i32 %v9_12d00)
  %v1_12d58 = call i32 @function_13e3c()
  %v0_12d64 = load i32, i32* @r5, align 4
  %v1_12d64 = inttoptr i32 %v0_12d64 to i32*
  %v2_12d64 = load i32, i32* %v1_12d64, align 4
  store i32 %v2_12d64, i32* @r4, align 4
  store i32 %v2_12d0c, i32* @r0, align 4
  store i32 -1, i32* %v1_12d64, align 4
  store i32 ptrtoint (i32* @global_var_12d7c.575 to i32), i32* @lr, align 4
  %v8_12d78 = call i32 @function_13e44(i32 %v2_12d0c, i32 1, i32 %v1_12d10, i32 81476, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_12d7c = load i32, i32* @r5, align 4
  %v1_12d7c = add i32 %v0_12d7c, 12
  %v2_12d7c = inttoptr i32 %v1_12d7c to i32*
  %v3_12d7c = load i32, i32* %v2_12d7c, align 4
  store i32 %v3_12d7c, i32* @r0, align 4
  %v0_12d80 = call i32 @function_13600()
  %v0_12d84 = load i32, i32* @r5, align 4
  store i32 %v0_12d84, i32* @r0, align 4
  %v0_12d88 = call i32 @function_13600()
  %v0_12d8c = load i32, i32* @r4, align 4
  %v1_12d90 = call i32 @function_129d8(i32 %v0_12d8c)
  store i32 %v1_12d90, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d98

dec_label_pc_12d98:                               ; preds = %dec_label_pc_12d2c, %dec_label_pc_12d40
  %v0_12d98 = phi i32 [ %v0_12d98.pre, %dec_label_pc_12d2c ], [ %v1_12d90, %dec_label_pc_12d40 ]
  %v2_12da0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12da0, i32* @r4, align 4
  store i32 %v6_12d00, i32* @r5, align 4
  store i32 %v9_12d00, i32* @r6, align 4
  store i32 %v12_12d00, i32* @r7, align 4
  ret i32 %v0_12d98

; uselistorder directives
  uselistorder i32 %v1_12d10, { 2, 1, 0, 3 }
  uselistorder i32 %v2_12d0c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_12d00, { 1, 0 }
  uselistorder i32 %v6_12d00, { 1, 0 }
  uselistorder label %dec_label_pc_12d98, { 1, 0 }
}

define i32 @function_12db4(i32 %arg1) local_unnamed_addr {
dec_label_pc_12db4:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_12db4 = load i32, i32* @r4, align 4
  %v9_12db4 = load i32, i32* @r6, align 4
  %v12_12db4 = load i32, i32* @r7, align 4
  %v0_12dc0 = load i32, i32* @r0, align 4
  %v2_12dc0 = inttoptr i32 %v0_12dc0 to i8*
  %v3_12dc0 = call i32 @function_12b04(i8* %v2_12dc0, i32 18432)
  store i32 %v3_12dc0, i32* @r0, align 4
  store i32 %v3_12dc0, i32* @r7, align 4
  %v1_12dc4 = icmp slt i32 %v3_12dc0, 0
  br i1 %v1_12dc4, label %.thread1, label %dec_label_pc_12dd0

.thread1:                                         ; preds = %dec_label_pc_12db4
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_12ea0

dec_label_pc_12dd0:                               ; preds = %dec_label_pc_12db4
  %v2_12dbc = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_12dbc, i32* @r1, align 4
  %v0_12dd4 = call i32 @function_14268()
  %v1_12dd8 = icmp slt i32 %v0_12dd4, 0
  br i1 %v1_12dd8, label %dec_label_pc_12df8, label %dec_label_pc_12de0

dec_label_pc_12de0:                               ; preds = %dec_label_pc_12dd0
  %v0_12de0 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_12dec = call i32 @function_12914(i32 %v0_12de0, i32 2)
  %v1_12df0 = icmp slt i32 %v2_12dec, 0
  br i1 %v1_12df0, label %dec_label_pc_12df8, label %dec_label_pc_12e18

dec_label_pc_12df8:                               ; preds = %dec_label_pc_12de0, %dec_label_pc_12dd0
  %v0_12df8 = call i32 @function_12f80()
  store i32 %v0_12df8, i32* %r5.global-to-local, align 4
  %v0_12e00 = load i32, i32* @r7, align 4
  %v1_12e04 = inttoptr i32 %v0_12df8 to i32*
  %v2_12e04 = load i32, i32* %v1_12e04, align 4
  store i32 %v2_12e04, i32* @r4, align 4
  %v1_12e08 = call i32 @function_129d8(i32 %v0_12e00)
  store i32 0, i32* @r6, align 4
  %v0_12e10 = load i32, i32* @r4, align 4
  %v1_12e10 = load i32, i32* %r5.global-to-local, align 4
  %v2_12e10 = inttoptr i32 %v1_12e10 to i32*
  store i32 %v0_12e10, i32* %v2_12e10, align 4
  br label %dec_label_pc_12ea0

dec_label_pc_12e18:                               ; preds = %dec_label_pc_12de0
  %v1_12e1c = call i32 @function_13454(i32 48)
  store i32 %v1_12e1c, i32* @r6, align 4
  %v2_12e20 = icmp eq i32 %v1_12e1c, 0
  br i1 %v2_12e20, label %dec_label_pc_12e70, label %dec_label_pc_12e28

dec_label_pc_12e28:                               ; preds = %dec_label_pc_12e18
  store i32 0, i32* @r4, align 4
  %v2_12e2c = add i32 %v1_12e1c, 16
  %v3_12e2c = inttoptr i32 %v2_12e2c to i32*
  store i32 0, i32* %v3_12e2c, align 4
  %v2_12e34 = icmp ugt i32 %tmp, 511
  %v1_12e38 = load i32, i32* @r6, align 4
  %v2_12e38 = add i32 %v1_12e38, 20
  %v3_12e38 = inttoptr i32 %v2_12e38 to i32*
  store i32 %tmp, i32* %v3_12e38, align 4
  br i1 %v2_12e34, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12e28
  %v2_12e40 = load i32, i32* @r6, align 4
  %v3_12e40 = add i32 %v2_12e40, 20
  %v4_12e40 = inttoptr i32 %v3_12e40 to i32*
  store i32 512, i32* %v4_12e40, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12e28, %bb
  %v0_12e44 = load i32, i32* @r7, align 4
  %v1_12e44 = load i32, i32* @r6, align 4
  %v2_12e44 = inttoptr i32 %v1_12e44 to i32*
  store i32 %v0_12e44, i32* %v2_12e44, align 4
  %v0_12e48 = load i32, i32* @r4, align 4
  %v1_12e48 = load i32, i32* @r6, align 4
  %v2_12e48 = add i32 %v1_12e48, 8
  %v3_12e48 = inttoptr i32 %v2_12e48 to i32*
  store i32 %v0_12e48, i32* %v3_12e48, align 4
  %v0_12e4c = load i32, i32* @r4, align 4
  %v1_12e4c = load i32, i32* @r6, align 4
  %v2_12e4c = add i32 %v1_12e4c, 4
  %v3_12e4c = inttoptr i32 %v2_12e4c to i32*
  store i32 %v0_12e4c, i32* %v3_12e4c, align 4
  %v0_12e54 = load i32, i32* @r6, align 4
  %v1_12e54 = add i32 %v0_12e54, 20
  %v2_12e54 = inttoptr i32 %v1_12e54 to i32*
  %v3_12e54 = load i32, i32* %v2_12e54, align 4
  %v2_12e58 = call i32 @function_135a8(i32 1, i32 %v3_12e54)
  %v2_12e5c = icmp eq i32 %v2_12e58, 0
  %v1_12e60 = load i32, i32* @r6, align 4
  %v2_12e60 = add i32 %v1_12e60, 12
  %v3_12e60 = inttoptr i32 %v2_12e60 to i32*
  store i32 %v2_12e58, i32* %v3_12e60, align 4
  br i1 %v2_12e5c, label %dec_label_pc_12e68, label %dec_label_pc_12e8c

dec_label_pc_12e68:                               ; preds = %.thread
  %v0_12e68 = load i32, i32* @r6, align 4
  store i32 %v0_12e68, i32* @r0, align 4
  %v0_12e6c = call i32 @function_13600()
  br label %dec_label_pc_12e70

dec_label_pc_12e70:                               ; preds = %dec_label_pc_12e18, %dec_label_pc_12e68
  %v0_12e70 = load i32, i32* @r7, align 4
  %v1_12e74 = call i32 @function_129d8(i32 %v0_12e70)
  %v0_12e78 = call i32 @function_12f80()
  store i32 0, i32* @r6, align 4
  %v2_12e84 = inttoptr i32 %v0_12e78 to i32*
  store i32 12, i32* %v2_12e84, align 4
  br label %dec_label_pc_12ea0

dec_label_pc_12e8c:                               ; preds = %.thread
  store i32 77472, i32* @lr, align 4
  %v1_12e9c = call i32 @function_13e3c()
  br label %dec_label_pc_12ea0

dec_label_pc_12ea0:                               ; preds = %.thread1, %dec_label_pc_12e70, %dec_label_pc_12df8, %dec_label_pc_12e8c
  %v0_12ea0 = load i32, i32* @r6, align 4
  store i32 %v3_12db4, i32* @r4, align 4
  store i32 %v9_12db4, i32* @r6, align 4
  store i32 %v12_12db4, i32* @r7, align 4
  ret i32 %v0_12ea0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_135a8, { 34, 35, 33, 1, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 2, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0 }
  uselistorder i32 512, { 1, 8, 11, 9, 2, 3, 12, 10, 13, 4, 14, 5, 15, 6, 16, 0, 17, 7, 18 }
  uselistorder i32 511, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_129d8, { 23, 22, 21, 36, 14, 35, 13, 34, 12, 11, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 20, 19, 18, 6, 17, 16, 15, 10, 9, 8, 7, 2, 1, 0, 5, 4, 3 }
  uselistorder label %dec_label_pc_12ea0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_12e70, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12eb0(i32* %arg1) local_unnamed_addr {
dec_label_pc_12eb0:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_12eb0 = load i32, i32* @r4, align 4
  %v6_12eb0 = load i32, i32* @r5, align 4
  %v9_12eb0 = load i32, i32* @lr, align 4
  %v1_12eb4 = add i32 %tmp, 24
  store i32 %v1_12eb4, i32* @r4, align 4
  %v2_12eb8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 81476, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_12eb8, i32* @r0, align 4
  store i32 %v1_12eb4, i32* %r2.global-to-local, align 4
  %v8_12ed4 = call i32 @function_13e44(i32 %v2_12eb8, i32 ptrtoint (i32* @global_var_13e3c.571 to i32), i32 %v1_12eb4, i32 81476, i32 %v3_12eb0, i32 %v6_12eb0, i32 %v9_12eb0)
  %v0_12ed8 = load i32, i32* @r4, align 4
  store i32 %v0_12ed8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13e3c.571 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12ee8.580 to i32), i32* @lr, align 4
  %v1_12ee4 = call i32 @function_13e3c()
  store i32 %v1_12ee4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12ee8

dec_label_pc_12ee8:                               ; preds = %dec_label_pc_12f1c, %dec_label_pc_12eb0
  %v0_12ee8 = load i32, i32* @r5, align 4
  %v1_12ee8 = add i32 %v0_12ee8, 4
  %v2_12ee8 = inttoptr i32 %v1_12ee8 to i32*
  %v3_12ee8 = load i32, i32* %v2_12ee8, align 4
  store i32 %v3_12ee8, i32* %r2.global-to-local, align 4
  %v4_12ee8 = add i32 %v0_12ee8, 8
  %v5_12ee8 = inttoptr i32 %v4_12ee8 to i32*
  %v6_12ee8 = load i32, i32* %v5_12ee8, align 4
  store i32 %v6_12ee8, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_12ee8, %v3_12ee8
  br i1 %tmp8, label %dec_label_pc_12f1c, label %dec_label_pc_12ef4

dec_label_pc_12ef4:                               ; preds = %dec_label_pc_12ee8
  %v1_12ef4 = inttoptr i32 %v0_12ee8 to i32*
  %v2_12ef4 = load i32, i32* %v1_12ef4, align 4
  store i32 %v2_12ef4, i32* @r0, align 4
  %v1_12ef8 = add i32 %v0_12ee8, 12
  %v2_12ef8 = inttoptr i32 %v1_12ef8 to i32*
  %v3_12ef8 = load i32, i32* %v2_12ef8, align 4
  %v1_12efc = add i32 %v0_12ee8, 20
  %v2_12efc = inttoptr i32 %v1_12efc to i32*
  %v3_12efc = load i32, i32* %v2_12efc, align 4
  store i32 %v3_12efc, i32* @r2, align 4
  %v4_12f00 = call i32 @function_142b8(i32 %v2_12ef4, i32 %v3_12ef8, i32 %v3_12efc, i32 %v6_12ee8)
  store i32 %v4_12f00, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_12f00, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_12f10

.thread:                                          ; preds = %dec_label_pc_12ef4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12f50

dec_label_pc_12f10:                               ; preds = %dec_label_pc_12ef4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12f14 = load i32, i32* @r5, align 4
  %v2_12f14 = add i32 %v1_12f14, 4
  %v3_12f14 = inttoptr i32 %v2_12f14 to i32*
  store i32 0, i32* %v3_12f14, align 4
  %v1_12f18 = load i32, i32* @r5, align 4
  %v2_12f18 = add i32 %v1_12f18, 8
  %v3_12f18 = inttoptr i32 %v2_12f18 to i32*
  store i32 %v4_12f00, i32* %v3_12f18, align 4
  %v0_12f1c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12f1c

dec_label_pc_12f1c:                               ; preds = %dec_label_pc_12ee8, %dec_label_pc_12f10
  %v1_12f34 = phi i32 [ %v0_12ee8, %dec_label_pc_12ee8 ], [ %v0_12f1c.pre, %dec_label_pc_12f10 ]
  %v1_12f1c = add i32 %v1_12f34, 4
  %v2_12f1c = inttoptr i32 %v1_12f1c to i32*
  %v3_12f1c = load i32, i32* %v2_12f1c, align 4
  store i32 %v3_12f1c, i32* %r2.global-to-local, align 4
  %v1_12f20 = add i32 %v1_12f34, 12
  %v2_12f20 = inttoptr i32 %v1_12f20 to i32*
  %v3_12f20 = load i32, i32* %v2_12f20, align 4
  store i32 %v3_12f20, i32* %ip.global-to-local, align 4
  %v2_12f24 = add i32 %v3_12f20, %v3_12f1c
  store i32 %v2_12f24, i32* @r4, align 4
  %v1_12f28 = add i32 %v2_12f24, 4
  %v2_12f28 = inttoptr i32 %v1_12f28 to i32*
  %v3_12f28 = load i32, i32* %v2_12f28, align 4
  %v1_12f2c = add i32 %v2_12f24, 8
  %v2_12f2c = inttoptr i32 %v1_12f2c to i8*
  %v3_12f2c = load i8, i8* %v2_12f2c, align 1
  %v4_12f2c = zext i8 %v3_12f2c to i32
  store i32 %v4_12f2c, i32* %r3.global-to-local, align 4
  %v1_12f30 = add i32 %v2_12f24, 9
  %v2_12f30 = inttoptr i32 %v1_12f30 to i8*
  %v3_12f30 = load i8, i8* %v2_12f30, align 1
  %v4_12f30 = zext i8 %v3_12f30 to i32
  store i32 %v4_12f30, i32* %r0.global-to-local, align 4
  %v2_12f34 = add i32 %v1_12f34, 16
  %v3_12f34 = inttoptr i32 %v2_12f34 to i32*
  store i32 %v3_12f28, i32* %v3_12f34, align 4
  %v0_12f38 = load i32, i32* %r2.global-to-local, align 4
  %v1_12f38 = load i32, i32* %ip.global-to-local, align 4
  %v2_12f38 = add i32 %v1_12f38, %v0_12f38
  %v3_12f38 = inttoptr i32 %v2_12f38 to i32*
  %v4_12f38 = load i32, i32* %v3_12f38, align 4
  %v0_12f3c = load i32, i32* %r3.global-to-local, align 4
  %v1_12f3c = load i32, i32* %r0.global-to-local, align 4
  %v4_12f3c = mul i32 %v1_12f3c, 256
  %v5_12f3c = or i32 %v4_12f3c, %v0_12f3c
  store i32 %v5_12f3c, i32* %r3.global-to-local, align 4
  %v2_12f40 = add i32 %v5_12f3c, %v0_12f38
  store i32 %v2_12f40, i32* @r2, align 4
  %v2_12f44 = icmp eq i32 %v4_12f38, 0
  %v1_12f48 = load i32, i32* @r5, align 4
  %v2_12f48 = add i32 %v1_12f48, 4
  %v3_12f48 = inttoptr i32 %v2_12f48 to i32*
  store i32 %v2_12f40, i32* %v3_12f48, align 4
  br i1 %v2_12f44, label %dec_label_pc_12ee8, label %dec_label_pc_12f50

dec_label_pc_12f50:                               ; preds = %dec_label_pc_12f1c, %.thread
  store i32 %v2_12eb8, i32* @r0, align 4
  store i32 81476, i32* %r3.global-to-local, align 4
  store i32 77668, i32* @lr, align 4
  %v3_12f60 = load i32, i32* @r2, align 4
  %v8_12f60 = call i32 @function_13e44(i32 %v2_12eb8, i32 1, i32 %v3_12f60, i32 81476, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_12f64 = load i32, i32* @r4, align 4
  store i32 %v0_12f64, i32* %r0.global-to-local, align 4
  store i32 %v3_12eb0, i32* @r4, align 4
  store i32 %v6_12eb0, i32* @r5, align 4
  ret i32 %v0_12f64

; uselistorder directives
  uselistorder i32 %v1_12f34, { 0, 2, 1 }
  uselistorder i32 %v6_12ee8, { 1, 0, 2 }
  uselistorder i32 %v0_12ee8, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_12eb8, { 1, 0, 3, 2 }
  uselistorder i32 %v1_12eb4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_12f1c, { 1, 0 }
}

define i32 @function_12f80() local_unnamed_addr {
dec_label_pc_12f80:
  ret i32 ptrtoint (i32* @global_var_1dd20.583 to i32)
}

define i32 @function_12f8c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12f8c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_12f98 = bitcast i32* %stack_var_-20 to %tms*
  %v2_12f98 = call i32 @function_14648(%tms* %v1_12f98)
  %v2_12fa0 = load i32, i32* %stack_var_-20, align 4
  %v2_12fa4 = add i32 %v2_12fa0, %tmp
  %v2_12fac = mul i32 %v2_12fa4, 10000
  %v1_12fb0 = and i32 %v2_12fac, 2147483632
  ret i32 %v1_12fb0

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_12fc0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12fc0:
  %v0_12fc0 = call i32 @function_14a50()
  ret i32 %v0_12fc0
}

define i32 @function_12fd0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12fd0:
  %v0_12fd0 = call i32 @function_14a50()
  ret i32 %v0_12fd0

; uselistorder directives
  uselistorder i32 ()* @function_14a50, { 1, 0 }
}

define i32 @function_12fe0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12fe0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_12fe4 = load i32, i32* @r2, align 4
  %v8_12fe4 = icmp eq i32 %v0_12fe4, 8
  store i1 %v8_12fe4, i1* %cpsr_z.global-to-local, align 1
  %v5_12fe8 = icmp slt i32 %v0_12fe4, 8
  br i1 %v5_12fe8, label %dec_label_pc_13048, label %dec_label_pc_12fec

dec_label_pc_12fec:                               ; preds = %dec_label_pc_12fe0
  %v4_12fec = mul i32 %arg2, 256
  %v5_12fec = or i32 %v4_12fec, %arg2
  %v4_12ff0 = mul i32 %v5_12fec, 65536
  %v5_12ff0 = or i32 %v4_12ff0, %v5_12fec
  store i32 %v5_12ff0, i32* %r1.global-to-local, align 4
  %v1_12ff457 = urem i32 %tmp, 4
  %v2_12ff458 = icmp eq i32 %v1_12ff457, 0
  store i1 %v2_12ff458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_12ff458, label %dec_label_pc_13004, label %bb

bb:                                               ; preds = %dec_label_pc_12fec, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_12fec ]
  %v3_12ff859 = phi i32 [ %v6_12ff8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_12fec ]
  %v4_12ff8 = inttoptr i32 %v3_12ff859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_12ff8, align 1
  %v5_12ff8 = load i32, i32* %r3.global-to-local, align 4
  %v6_12ff8 = add i32 %v5_12ff8, 1
  store i32 %v6_12ff8, i32* %r3.global-to-local, align 4
  %v0_12ffc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_13008.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_12ffc.pr, label %dec_label_pc_13004, label %.thread

.thread:                                          ; preds = %bb
  %v2_12ffc = add i32 %v0_13008.pr.pre, -1
  store i32 %v2_12ffc, i32* @r2, align 4
  %v1_12ff4 = urem i32 %v6_12ff8, 4
  %v2_12ff4 = icmp eq i32 %v1_12ff4, 0
  store i1 %v2_12ff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12ff4, label %dec_label_pc_13004, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_12ff8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_12ff8.pre to i8
  br label %bb

dec_label_pc_13004:                               ; preds = %.thread, %bb, %dec_label_pc_12fec
  %v0_1301028 = phi i32 [ %tmp, %dec_label_pc_12fec ], [ %v6_12ff8, %bb ], [ %v6_12ff8, %.thread ]
  %v0_13008.pr = phi i32 [ %v0_12fe4, %dec_label_pc_12fec ], [ %v0_13008.pr.pre, %bb ], [ %v2_12ffc, %.thread ]
  %v0_13004 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13004, i32* %ip.global-to-local, align 4
  %v8_1300810 = icmp eq i32 %v0_13008.pr, 8
  store i1 %v8_1300810, i1* %cpsr_z.global-to-local, align 1
  %v5_1300c11 = icmp slt i32 %v0_13008.pr, 8
  br i1 %v5_1300c11, label %dec_label_pc_13048, label %dec_label_pc_13010.preheader

dec_label_pc_13010.preheader:                     ; preds = %dec_label_pc_13004
  %v1_1301046 = inttoptr i32 %v0_1301028 to i32*
  store i32 %v0_13004, i32* %v1_1301046, align 4
  %v3_1301047 = add i32 %v0_1301028, 4
  %v4_1301048 = inttoptr i32 %v3_1301047 to i32*
  %v5_1301049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1301049, i32* %v4_1301048, align 4
  %v6_1301050 = add i32 %v0_1301028, 8
  store i32 %v6_1301050, i32* %r3.global-to-local, align 4
  %v0_1301451 = load i32, i32* @r2, align 4
  %v1_1301452 = add i32 %v0_1301451, -8
  store i32 %v1_1301452, i32* %r2.global-to-local, align 4
  %v5_1301c53 = icmp slt i32 %v1_1301452, 8
  br i1 %v5_1301c53, label %dec_label_pc_13010.dec_label_pc_13048.loopexit_crit_edge, label %dec_label_pc_13020

dec_label_pc_13020:                               ; preds = %dec_label_pc_13010.preheader, %dec_label_pc_13008.dec_label_pc_13010_crit_edge
  %v6_1301055 = phi i32 [ %v6_13010, %dec_label_pc_13008.dec_label_pc_13010_crit_edge ], [ %v6_1301050, %dec_label_pc_13010.preheader ]
  %v0_1301054 = phi i32 [ %v12_1303c, %dec_label_pc_13008.dec_label_pc_13010_crit_edge ], [ %v0_1301028, %dec_label_pc_13010.preheader ]
  %v1_13020 = inttoptr i32 %v6_1301055 to i32*
  %v2_13020 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13020, i32* %v1_13020, align 4
  %v3_13020 = add i32 %v0_1301054, 12
  %v4_13020 = inttoptr i32 %v3_13020 to i32*
  %v5_13020 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13020, i32* %v4_13020, align 4
  %v6_13020 = add i32 %v0_1301054, 16
  store i32 %v6_13020, i32* %r3.global-to-local, align 4
  %v0_13024 = load i32, i32* %r2.global-to-local, align 4
  %v1_13024 = add i32 %v0_13024, -8
  store i32 %v1_13024, i32* %r2.global-to-local, align 4
  %v5_1302c = icmp slt i32 %v1_13024, 8
  br i1 %v5_1302c, label %dec_label_pc_13020.dec_label_pc_13048.loopexit_crit_edge, label %dec_label_pc_13030

dec_label_pc_13030:                               ; preds = %dec_label_pc_13020
  %v1_13030 = inttoptr i32 %v6_13020 to i32*
  %v2_13030 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13030, i32* %v1_13030, align 4
  %v3_13030 = add i32 %v0_1301054, 20
  %v4_13030 = inttoptr i32 %v3_13030 to i32*
  %v5_13030 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13030, i32* %v4_13030, align 4
  %v6_13030 = add i32 %v0_1301054, 24
  store i32 %v6_13030, i32* %r3.global-to-local, align 4
  %v0_13034 = load i32, i32* %r2.global-to-local, align 4
  %v1_13034 = add i32 %v0_13034, -8
  store i32 %v1_13034, i32* %r2.global-to-local, align 4
  %v5_1303c = icmp slt i32 %v1_13034, 8
  br i1 %v5_1303c, label %dec_label_pc_13030.dec_label_pc_13048.loopexit_crit_edge, label %dec_label_pc_13008

dec_label_pc_13008:                               ; preds = %dec_label_pc_13030
  %v7_1303c = inttoptr i32 %v6_13030 to i32*
  %v8_1303c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1303c, i32* %v7_1303c, align 4
  %v9_1303c = add i32 %v0_1301054, 28
  %v10_1303c = inttoptr i32 %v9_1303c to i32*
  %v11_1303c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1303c, i32* %v10_1303c, align 4
  %v12_1303c = add i32 %v0_1301054, 32
  store i32 %v12_1303c, i32* %r3.global-to-local, align 4
  %v6_13040 = load i32, i32* %r2.global-to-local, align 4
  %v7_13040 = add i32 %v6_13040, -8
  store i32 %v7_13040, i32* %r2.global-to-local, align 4
  %v5_1300c = icmp slt i32 %v7_13040, 8
  br i1 %v5_1300c, label %dec_label_pc_13008.dec_label_pc_13048.loopexit_crit_edge, label %dec_label_pc_13008.dec_label_pc_13010_crit_edge

dec_label_pc_13008.dec_label_pc_13010_crit_edge:  ; preds = %dec_label_pc_13008
  %v2_13010.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13010 = inttoptr i32 %v12_1303c to i32*
  store i32 %v2_13010.pre, i32* %v1_13010, align 4
  %v3_13010 = add i32 %v0_1301054, 36
  %v4_13010 = inttoptr i32 %v3_13010 to i32*
  %v5_13010 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13010, i32* %v4_13010, align 4
  %v6_13010 = add i32 %v0_1301054, 40
  store i32 %v6_13010, i32* %r3.global-to-local, align 4
  %v0_13014 = load i32, i32* %r2.global-to-local, align 4
  %v1_13014 = add i32 %v0_13014, -8
  store i32 %v1_13014, i32* %r2.global-to-local, align 4
  %v5_1301c = icmp slt i32 %v1_13014, 8
  br i1 %v5_1301c, label %dec_label_pc_13010.dec_label_pc_13048.loopexit_crit_edge, label %dec_label_pc_13020

dec_label_pc_13010.dec_label_pc_13048.loopexit_crit_edge: ; preds = %dec_label_pc_13008.dec_label_pc_13010_crit_edge, %dec_label_pc_13010.preheader
  %v1_13014.lcssa = phi i32 [ %v1_1301452, %dec_label_pc_13010.preheader ], [ %v1_13014, %dec_label_pc_13008.dec_label_pc_13010_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13048

dec_label_pc_13008.dec_label_pc_13048.loopexit_crit_edge: ; preds = %dec_label_pc_13008
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13048

dec_label_pc_13020.dec_label_pc_13048.loopexit_crit_edge: ; preds = %dec_label_pc_13020
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13048

dec_label_pc_13030.dec_label_pc_13048.loopexit_crit_edge: ; preds = %dec_label_pc_13030
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13048

dec_label_pc_13048:                               ; preds = %dec_label_pc_13004, %dec_label_pc_13010.dec_label_pc_13048.loopexit_crit_edge, %dec_label_pc_13008.dec_label_pc_13048.loopexit_crit_edge, %dec_label_pc_13020.dec_label_pc_13048.loopexit_crit_edge, %dec_label_pc_13030.dec_label_pc_13048.loopexit_crit_edge, %dec_label_pc_12fe0
  %v0_13050 = phi i32 [ %v0_12fe4, %dec_label_pc_12fe0 ], [ %v1_13034, %dec_label_pc_13030.dec_label_pc_13048.loopexit_crit_edge ], [ %v1_13024, %dec_label_pc_13020.dec_label_pc_13048.loopexit_crit_edge ], [ %v7_13040, %dec_label_pc_13008.dec_label_pc_13048.loopexit_crit_edge ], [ %v1_13014.lcssa, %dec_label_pc_13010.dec_label_pc_13048.loopexit_crit_edge ], [ %v0_13008.pr, %dec_label_pc_13004 ]
  %v2_13048 = icmp eq i32 %v0_13050, 0
  store i1 %v2_13048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13048, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_13048
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_13048
  %v1_13050 = sub i32 7, %v0_13050
  store i32 %v1_13050, i32* %r2.global-to-local, align 4
  %v3_13054 = mul i32 %v1_13050, 4
  %v4_13054 = add i32 %v3_13054, ptrtoint (i32* @global_var_1305c.585 to i32)
  call void @__pseudo_branch(i32 %v4_13054)
  %v0_1305c = load i32, i32* %r1.global-to-local, align 4
  %v1_1305c = trunc i32 %v0_1305c to i8
  %v2_1305c = load i32, i32* %r3.global-to-local, align 4
  %v3_1305c = inttoptr i32 %v2_1305c to i8*
  store i8 %v1_1305c, i8* %v3_1305c, align 1
  %v4_1305c = load i32, i32* %r3.global-to-local, align 4
  %v5_1305c = add i32 %v4_1305c, 1
  store i32 %v5_1305c, i32* %r3.global-to-local, align 4
  %v0_13060 = load i32, i32* %r1.global-to-local, align 4
  %v1_13060 = trunc i32 %v0_13060 to i8
  %v3_13060 = inttoptr i32 %v5_1305c to i8*
  store i8 %v1_13060, i8* %v3_13060, align 1
  %v4_13060 = load i32, i32* %r3.global-to-local, align 4
  %v5_13060 = add i32 %v4_13060, 1
  store i32 %v5_13060, i32* %r3.global-to-local, align 4
  %v0_13064 = load i32, i32* %r1.global-to-local, align 4
  %v1_13064 = trunc i32 %v0_13064 to i8
  %v3_13064 = inttoptr i32 %v5_13060 to i8*
  store i8 %v1_13064, i8* %v3_13064, align 1
  %v4_13064 = load i32, i32* %r3.global-to-local, align 4
  %v5_13064 = add i32 %v4_13064, 1
  store i32 %v5_13064, i32* %r3.global-to-local, align 4
  %v0_13068 = load i32, i32* %r1.global-to-local, align 4
  %v1_13068 = trunc i32 %v0_13068 to i8
  %v3_13068 = inttoptr i32 %v5_13064 to i8*
  store i8 %v1_13068, i8* %v3_13068, align 1
  %v4_13068 = load i32, i32* %r3.global-to-local, align 4
  %v5_13068 = add i32 %v4_13068, 1
  store i32 %v5_13068, i32* %r3.global-to-local, align 4
  %v0_1306c = load i32, i32* %r1.global-to-local, align 4
  %v1_1306c = trunc i32 %v0_1306c to i8
  %v3_1306c = inttoptr i32 %v5_13068 to i8*
  store i8 %v1_1306c, i8* %v3_1306c, align 1
  %v4_1306c = load i32, i32* %r3.global-to-local, align 4
  %v5_1306c = add i32 %v4_1306c, 1
  store i32 %v5_1306c, i32* %r3.global-to-local, align 4
  %v0_13070 = load i32, i32* %r1.global-to-local, align 4
  %v1_13070 = trunc i32 %v0_13070 to i8
  %v3_13070 = inttoptr i32 %v5_1306c to i8*
  store i8 %v1_13070, i8* %v3_13070, align 1
  %v4_13070 = load i32, i32* %r3.global-to-local, align 4
  %v5_13070 = add i32 %v4_13070, 1
  store i32 %v5_13070, i32* %r3.global-to-local, align 4
  %v0_13074 = load i32, i32* %r1.global-to-local, align 4
  %v1_13074 = trunc i32 %v0_13074 to i8
  %v3_13074 = inttoptr i32 %v5_13070 to i8*
  store i8 %v1_13074, i8* %v3_13074, align 1
  %v4_13074 = load i32, i32* %r3.global-to-local, align 4
  %v5_13074 = add i32 %v4_13074, 1
  store i32 %v5_13074, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_13010, { 1, 0 }
  uselistorder i32 %v12_1303c, { 1, 2, 0 }
  uselistorder i32 %v0_1301054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_13008.pr, { 0, 2, 1 }
  uselistorder i32 %v6_12ff8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_12fec, { 1, 0 }
  uselistorder i32 %v0_12fe4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13048, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_13020, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_13080(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_13080:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_13080 = sub i32 %arg1, %tmp
  %v1_13084 = add i32 %v2_13080, -1
  store i32 %v1_13084, i32* %r2.global-to-local, align 4
  %v2_130884 = load i8, i8* %arg2, align 1
  %v5_130886 = add i32 %tmp, 1
  store i32 %v5_130886, i32* %r1.global-to-local, align 4
  %v2_1308c7 = icmp eq i8 %v2_130884, 0
  store i1 %v2_1308c7, i1* %cpsr_z.global-to-local, align 1
  %v5_130908 = inttoptr i32 %arg1 to i8*
  store i8 %v2_130884, i8* %v5_130908, align 1
  %v0_130949 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_130949, label %dec_label_pc_13098, label %dec_label_pc_13088.dec_label_pc_13088_crit_edge

dec_label_pc_13088.dec_label_pc_13088_crit_edge:  ; preds = %dec_label_pc_13080, %dec_label_pc_13088.dec_label_pc_13088_crit_edge
  %v0_13088.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_13090.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_13088 = inttoptr i32 %v0_13088.pre to i8*
  %v2_13088 = load i8, i8* %v1_13088, align 1
  %v5_13088 = add i32 %v0_13088.pre, 1
  store i32 %v5_13088, i32* %r1.global-to-local, align 4
  %v2_1308c = icmp eq i8 %v2_13088, 0
  store i1 %v2_1308c, i1* %cpsr_z.global-to-local, align 1
  %v4_13090 = add i32 %v5_13088, %v3_13090.pre
  %v5_13090 = inttoptr i32 %v4_13090 to i8*
  store i8 %v2_13088, i8* %v5_13090, align 1
  %v0_13094 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13094, label %dec_label_pc_13098, label %dec_label_pc_13088.dec_label_pc_13088_crit_edge

dec_label_pc_13098:                               ; preds = %dec_label_pc_13088.dec_label_pc_13088_crit_edge, %dec_label_pc_13080
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 2, 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13088.dec_label_pc_13088_crit_edge, { 1, 0 }
}

define i32 @function_1309c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1309c:
  %stack_var_-8 = alloca i32, align 4
  %v2_130a0 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_130a0, i32* @r1, align 4
  %v0_130a8 = call i32 @function_14ee0()
  %v2_130ac = icmp eq i32 %v0_130a8, 0
  br i1 %v2_130ac, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_1309c
  %v3_130b4 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_1309c, %bb
  %v5_130bc = phi i32 [ -1, %dec_label_pc_1309c ], [ %v3_130b4, %bb ]
  ret i32 %v5_130bc

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_130c0(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_130c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_130c0 = load i32, i32* @r4, align 4
  store i32 %v3_130c0, i32* %stack_var_-8, align 4
  %v5_130c4 = inttoptr i32 %arg3 to i32*
  %v6_130c4 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_130c4)
  store i32 %v6_130c4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_130c4, -4095
  br i1 %tmp, label %dec_label_pc_130e4, label %dec_label_pc_130d4

dec_label_pc_130d4:                               ; preds = %dec_label_pc_130c0
  %v0_130d4 = call i32 @function_12f80()
  %v0_130d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_130d8 = sub i32 0, %v0_130d8
  %v2_130dc = inttoptr i32 %v0_130d4 to i32*
  store i32 %v1_130d8, i32* %v2_130dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_130e4

dec_label_pc_130e4:                               ; preds = %dec_label_pc_130c0, %dec_label_pc_130d4
  %v0_130e4 = phi i32 [ %v6_130c4, %dec_label_pc_130c0 ], [ -1, %dec_label_pc_130d4 ]
  %v2_130e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_130e8, i32* @r4, align 4
  ret i32 %v0_130e4

; uselistorder directives
  uselistorder i32 %v6_130c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_130e4, { 1, 0 }
}

define i32 @function_130ec(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_130ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_130ec = load i32, i32* @r4, align 4
  store i32 %v3_130ec, i32* %stack_var_-8, align 4
  %v5_130f0 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_130f0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_130f0, -4095
  br i1 %tmp, label %dec_label_pc_13110, label %dec_label_pc_13100

dec_label_pc_13100:                               ; preds = %dec_label_pc_130ec
  %v0_13100 = call i32 @function_12f80()
  %v0_13104 = load i32, i32* %r4.global-to-local, align 4
  %v1_13104 = sub i32 0, %v0_13104
  %v2_13108 = inttoptr i32 %v0_13100 to i32*
  store i32 %v1_13104, i32* %v2_13108, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13110

dec_label_pc_13110:                               ; preds = %dec_label_pc_130ec, %dec_label_pc_13100
  %v0_13110 = phi i32 [ %v5_130f0, %dec_label_pc_130ec ], [ -1, %dec_label_pc_13100 ]
  %v2_13114 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13114, i32* @r4, align 4
  ret i32 %v0_13110

; uselistorder directives
  uselistorder i32 %v5_130f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13110, { 1, 0 }
}

define i32 @function_13118(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13118:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13118 = load i32, i32* @r4, align 4
  store i32 %v3_13118, i32* %stack_var_-8, align 4
  %v5_1311c = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_1311c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_1311c, -4095
  br i1 %tmp, label %dec_label_pc_1313c, label %dec_label_pc_1312c

dec_label_pc_1312c:                               ; preds = %dec_label_pc_13118
  %v0_1312c = call i32 @function_12f80()
  %v0_13130 = load i32, i32* %r4.global-to-local, align 4
  %v1_13130 = sub i32 0, %v0_13130
  %v2_13134 = inttoptr i32 %v0_1312c to i32*
  store i32 %v1_13130, i32* %v2_13134, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1313c

dec_label_pc_1313c:                               ; preds = %dec_label_pc_13118, %dec_label_pc_1312c
  %v0_1313c = phi i32 [ %v5_1311c, %dec_label_pc_13118 ], [ -1, %dec_label_pc_1312c ]
  %v2_13140 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13140, i32* @r4, align 4
  ret i32 %v0_1313c

; uselistorder directives
  uselistorder i32 %v5_1311c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1313c, { 1, 0 }
}

define i32 @function_13144(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13144:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13144 = load i32, i32* @r4, align 4
  store i32 %v3_13144, i32* %stack_var_-8, align 4
  %v5_13148 = inttoptr i32 %arg3 to i32*
  %v6_13148 = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_13148)
  store i32 %v6_13148, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13148, -4095
  br i1 %tmp, label %dec_label_pc_13168, label %dec_label_pc_13158

dec_label_pc_13158:                               ; preds = %dec_label_pc_13144
  %v0_13158 = call i32 @function_12f80()
  %v0_1315c = load i32, i32* %r4.global-to-local, align 4
  %v1_1315c = sub i32 0, %v0_1315c
  %v2_13160 = inttoptr i32 %v0_13158 to i32*
  store i32 %v1_1315c, i32* %v2_13160, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13168

dec_label_pc_13168:                               ; preds = %dec_label_pc_13144, %dec_label_pc_13158
  %v0_13168 = phi i32 [ %v6_13148, %dec_label_pc_13144 ], [ -1, %dec_label_pc_13158 ]
  %v2_1316c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1316c, i32* @r4, align 4
  ret i32 %v0_13168

; uselistorder directives
  uselistorder i32 %v6_13148, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13168, { 1, 0 }
}

define i32 @function_13170(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13170:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13170 = load i32, i32* @r4, align 4
  store i32 %v3_13170, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13178 = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_13178, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13178, -4095
  br i1 %tmp, label %dec_label_pc_13198, label %dec_label_pc_13188

dec_label_pc_13188:                               ; preds = %dec_label_pc_13170
  %v0_13188 = call i32 @function_12f80()
  %v0_1318c = load i32, i32* %r4.global-to-local, align 4
  %v1_1318c = sub i32 0, %v0_1318c
  %v2_13190 = inttoptr i32 %v0_13188 to i32*
  store i32 %v1_1318c, i32* %v2_13190, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13198

dec_label_pc_13198:                               ; preds = %dec_label_pc_13170, %dec_label_pc_13188
  %v0_13198 = phi i32 [ %v5_13178, %dec_label_pc_13170 ], [ -1, %dec_label_pc_13188 ]
  %v2_1319c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1319c, i32* @r4, align 4
  ret i32 %v0_13198

; uselistorder directives
  uselistorder i32 %v5_13178, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13198, { 1, 0 }
}

define i32 @function_131a0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_131a0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_131a0 = load i32, i32* @r4, align 4
  store i32 %v3_131a0, i32* %stack_var_-8, align 4
  %v2_131a4 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_131a4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_131a4, -4095
  br i1 %tmp, label %dec_label_pc_131c4, label %dec_label_pc_131b4

dec_label_pc_131b4:                               ; preds = %dec_label_pc_131a0
  %v0_131b4 = call i32 @function_12f80()
  %v0_131b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_131b8 = sub i32 0, %v0_131b8
  %v2_131bc = inttoptr i32 %v0_131b4 to i32*
  store i32 %v1_131b8, i32* %v2_131bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_131c4

dec_label_pc_131c4:                               ; preds = %dec_label_pc_131a0, %dec_label_pc_131b4
  %v0_131c4 = phi i32 [ %v2_131a4, %dec_label_pc_131a0 ], [ -1, %dec_label_pc_131b4 ]
  %v2_131c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_131c8, i32* @r4, align 4
  ret i32 %v0_131c4

; uselistorder directives
  uselistorder i32 %v2_131a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_131c4, { 1, 0 }
}

define i32 @function_131cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_131cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_131cc = load i32, i32* @r4, align 4
  store i32 %v3_131cc, i32* %stack_var_-8, align 4
  %v5_131d0 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_131d0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_131d0, -4095
  br i1 %tmp, label %dec_label_pc_131f0, label %dec_label_pc_131e0

dec_label_pc_131e0:                               ; preds = %dec_label_pc_131cc
  %v0_131e0 = call i32 @function_12f80()
  %v0_131e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_131e4 = sub i32 0, %v0_131e4
  %v2_131e8 = inttoptr i32 %v0_131e0 to i32*
  store i32 %v1_131e4, i32* %v2_131e8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_131f0

dec_label_pc_131f0:                               ; preds = %dec_label_pc_131cc, %dec_label_pc_131e0
  %v0_131f0 = phi i32 [ %v5_131d0, %dec_label_pc_131cc ], [ -1, %dec_label_pc_131e0 ]
  %v2_131f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_131f4, i32* @r4, align 4
  ret i32 %v0_131f0

; uselistorder directives
  uselistorder i32 %v5_131d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_131f0, { 1, 0 }
}

define i32 @function_131f8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_131f8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_131f8 = load i32, i32* @r4, align 4
  store i32 %v3_131f8, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13204 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_13204, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13204, -4095
  br i1 %tmp, label %dec_label_pc_13224, label %dec_label_pc_13214

dec_label_pc_13214:                               ; preds = %dec_label_pc_131f8
  %v0_13214 = call i32 @function_12f80()
  %v0_13218 = load i32, i32* %r4.global-to-local, align 4
  %v1_13218 = sub i32 0, %v0_13218
  %v2_1321c = inttoptr i32 %v0_13214 to i32*
  store i32 %v1_13218, i32* %v2_1321c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13224

dec_label_pc_13224:                               ; preds = %dec_label_pc_131f8, %dec_label_pc_13214
  %v0_13224 = phi i32 [ %v5_13204, %dec_label_pc_131f8 ], [ -1, %dec_label_pc_13214 ]
  %v2_13228 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13228, i32* @r4, align 4
  ret i32 %v0_13224

; uselistorder directives
  uselistorder i32 %v5_13204, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13224, { 1, 0 }
}

define i32 @function_1322c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1322c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1322c = load i32, i32* @r4, align 4
  store i32 %v3_1322c, i32* %stack_var_-8, align 4
  %v5_13230 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13230, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13230, -4095
  br i1 %tmp, label %dec_label_pc_13250, label %dec_label_pc_13240

dec_label_pc_13240:                               ; preds = %dec_label_pc_1322c
  %v0_13240 = call i32 @function_12f80()
  %v0_13244 = load i32, i32* %r4.global-to-local, align 4
  %v1_13244 = sub i32 0, %v0_13244
  %v2_13248 = inttoptr i32 %v0_13240 to i32*
  store i32 %v1_13244, i32* %v2_13248, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13250

dec_label_pc_13250:                               ; preds = %dec_label_pc_1322c, %dec_label_pc_13240
  %v0_13250 = phi i32 [ %v5_13230, %dec_label_pc_1322c ], [ -1, %dec_label_pc_13240 ]
  %v2_13254 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13254, i32* @r4, align 4
  ret i32 %v0_13250

; uselistorder directives
  uselistorder i32 %v5_13230, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13250, { 1, 0 }
}

define i32 @function_13258(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13258:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13258 = load i32, i32* @r4, align 4
  store i32 %v3_13258, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13264 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_13264, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13264, -4095
  br i1 %tmp, label %dec_label_pc_13284, label %dec_label_pc_13274

dec_label_pc_13274:                               ; preds = %dec_label_pc_13258
  %v0_13274 = call i32 @function_12f80()
  %v0_13278 = load i32, i32* %r4.global-to-local, align 4
  %v1_13278 = sub i32 0, %v0_13278
  %v2_1327c = inttoptr i32 %v0_13274 to i32*
  store i32 %v1_13278, i32* %v2_1327c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13284

dec_label_pc_13284:                               ; preds = %dec_label_pc_13258, %dec_label_pc_13274
  %v0_13284 = phi i32 [ %v5_13264, %dec_label_pc_13258 ], [ -1, %dec_label_pc_13274 ]
  %v2_13288 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13288, i32* @r4, align 4
  ret i32 %v0_13284

; uselistorder directives
  uselistorder i32 %v5_13264, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13284, { 1, 0 }
}

define i32 @function_1328c(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1328c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1328c = load i32, i32* @r4, align 4
  store i32 %v3_1328c, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13294 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_13294, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13294, -4095
  br i1 %tmp, label %dec_label_pc_132b4, label %dec_label_pc_132a4

dec_label_pc_132a4:                               ; preds = %dec_label_pc_1328c
  %v0_132a4 = call i32 @function_12f80()
  %v0_132a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_132a8 = sub i32 0, %v0_132a8
  %v2_132ac = inttoptr i32 %v0_132a4 to i32*
  store i32 %v1_132a8, i32* %v2_132ac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_132b4

dec_label_pc_132b4:                               ; preds = %dec_label_pc_1328c, %dec_label_pc_132a4
  %v0_132b4 = phi i32 [ %v5_13294, %dec_label_pc_1328c ], [ -1, %dec_label_pc_132a4 ]
  %v2_132b8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_132b8, i32* @r4, align 4
  ret i32 %v0_132b4

; uselistorder directives
  uselistorder i32 %v5_13294, { 1, 0, 2 }
  uselistorder label %dec_label_pc_132b4, { 1, 0 }
}

define i32 @function_132bc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_132bc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_132bc = load i32, i32* @r4, align 4
  store i32 %v3_132bc, i32* %stack_var_-8, align 4
  %v3_132c0 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_132c0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_132c0, -4095
  br i1 %tmp, label %dec_label_pc_132e0, label %dec_label_pc_132d0

dec_label_pc_132d0:                               ; preds = %dec_label_pc_132bc
  %v0_132d0 = call i32 @function_12f80()
  %v0_132d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_132d4 = sub i32 0, %v0_132d4
  %v2_132d8 = inttoptr i32 %v0_132d0 to i32*
  store i32 %v1_132d4, i32* %v2_132d8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_132e0

dec_label_pc_132e0:                               ; preds = %dec_label_pc_132bc, %dec_label_pc_132d0
  %v0_132e0 = phi i32 [ %v3_132c0, %dec_label_pc_132bc ], [ -1, %dec_label_pc_132d0 ]
  %v2_132e4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_132e4, i32* @r4, align 4
  ret i32 %v0_132e0

; uselistorder directives
  uselistorder i32 %v3_132c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_132e0, { 1, 0 }
}

define i32 @function_132e8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_132e8:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_13304, label %dec_label_pc_132f4

dec_label_pc_132f4:                               ; preds = %dec_label_pc_132e8
  %v8_132f8 = icmp sgt i32 %arg1, 64
  br i1 %v8_132f8, label %dec_label_pc_13304, label %dec_label_pc_132fc

dec_label_pc_132fc:                               ; preds = %dec_label_pc_132f4
  %v0_13300 = call i32 @function_1340c()
  br label %dec_label_pc_13304

dec_label_pc_13304:                               ; preds = %dec_label_pc_132f4, %dec_label_pc_132e8, %dec_label_pc_132fc
  %v0_13304 = call i32 @function_12f80()
  %v2_1330c = inttoptr i32 %v0_13304 to i32*
  store i32 22, i32* %v2_1330c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13304, { 2, 0, 1 }
}

define i32 @function_13318(i32 %arg1) local_unnamed_addr {
dec_label_pc_13318:
  store i32 128, i32* @r2, align 4
  %v0_13324 = load i32, i32* @r0, align 4
  %v2_13324 = inttoptr i32 %v0_13324 to i8*
  %v3_13324 = call i32 @function_12fe0(i8* %v2_13324, i32 0)
  ret i32 0
}

define i32 @function_13330(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13330:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13330 = load i32, i32* @r4, align 4
  store i32 %v3_13330, i32* %stack_var_-12, align 4
  %v6_13330 = load i32, i32* @r5, align 4
  %v10_13330 = ptrtoint i32* %stack_var_-12 to i32
  %v7_13334 = icmp eq i32 %arg2, -1
  %v0_13340.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_13334, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_13330
  br label %dec_label_pc_13358

bb:                                               ; preds = %dec_label_pc_13330
  %v2_1333c = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_13340.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_13340.pre, 1
  br i1 %tmp19, label %dec_label_pc_13358, label %dec_label_pc_13348

dec_label_pc_13348:                               ; preds = %bb
  %v7_1334c = icmp sgt i32 %v0_13340.pre, 64
  br i1 %v7_1334c, label %dec_label_pc_13358, label %bb20

bb20:                                             ; preds = %dec_label_pc_13348
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_1337c24 = add i32 %v10_13330, 124
  store i32 %v5_1337c24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1336c

dec_label_pc_13358:                               ; preds = %.thread, %dec_label_pc_13348, %bb
  %v0_13358 = call i32 @function_12f80()
  store i32 %v0_13358, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_13364 = inttoptr i32 %v0_13358 to i32*
  store i32 22, i32* %v2_13364, align 4
  %v0_133d8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_133d8

dec_label_pc_1336c:                               ; preds = %bb20, %dec_label_pc_1336c
  %v5_1337c25 = phi i32 [ %v5_1337c24, %bb20 ], [ %v5_1337c, %dec_label_pc_1336c ]
  %v2_13370 = add i32 %v5_1337c25, -136
  %v3_13370 = inttoptr i32 %v2_13370 to i32*
  store i32 0, i32* %v3_13370, align 4
  %v0_13374.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_13374 = add i32 %v0_13374.pre, -1
  store i32 %v1_13374, i32* %r0.global-to-local, align 4
  %v6_13374 = icmp slt i32 %v1_13374, 0
  %v4_1337c = mul i32 %v1_13374, 4
  %v5_1337c = add i32 %v4_1337c, %v10_13330
  store i32 %v5_1337c, i32* %r2.global-to-local, align 4
  br i1 %v6_13374, label %dec_label_pc_13384, label %dec_label_pc_1336c

dec_label_pc_13384:                               ; preds = %dec_label_pc_1336c
  %v2_13384 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_13384, i32* @r5, align 4
  %v2_13388 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_13388, i32* @r0, align 4
  %v0_1338c = load i32, i32* @r4, align 4
  store i32 %v0_1338c, i32* @r1, align 4
  %v0_13390 = call i32 @function_1340c()
  store i32 %v0_13390, i32* %r0.global-to-local, align 4
  %v1_13394 = icmp slt i32 %v0_13390, 0
  br i1 %v1_13394, label %dec_label_pc_133d4, label %dec_label_pc_1339c

dec_label_pc_1339c:                               ; preds = %dec_label_pc_13384
  %v0_1339c = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1df4c.587 to i32), i32* %r0.global-to-local, align 4
  %v2_133a4 = call i32 @function_133e8(i32 ptrtoint (i32* @global_var_1df4c.587 to i32), i32 %v0_1339c)
  store i32 %v2_1333c, i32* %r2.global-to-local, align 4
  %v0_133bc = load i32, i32* @r4, align 4
  store i32 %v0_133bc, i32* %r0.global-to-local, align 4
  %v4_133c4 = call i32 @function_14128(i32 %v0_133bc, i32* nonnull %stack_var_-152, i32 %v2_1333c)
  store i32 %v4_133c4, i32* %r0.global-to-local, align 4
  %v1_133c8 = icmp slt i32 %v4_133c4, 0
  br i1 %v1_133c8, label %dec_label_pc_133d4, label %bb23

bb23:                                             ; preds = %dec_label_pc_1339c
  %v5_133cc = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_133cc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_133d8

dec_label_pc_133d4:                               ; preds = %dec_label_pc_1339c, %dec_label_pc_13384
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_133d8

dec_label_pc_133d8:                               ; preds = %bb23, %dec_label_pc_13358, %dec_label_pc_133d4
  %v0_133d8 = phi i32 [ %v5_133cc, %bb23 ], [ %v0_133d8.pre, %dec_label_pc_13358 ], [ -1, %dec_label_pc_133d4 ]
  store i32 %v0_133d8, i32* %r0.global-to-local, align 4
  %v2_133e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_133e0, i32* @r4, align 4
  store i32 %v6_13330, i32* @r5, align 4
  ret i32 %v0_133d8

; uselistorder directives
  uselistorder i32 %v0_133d8, { 1, 0 }
  uselistorder i32 %v5_1337c, { 1, 0 }
  uselistorder i32 %v1_13374, { 0, 2, 1 }
  uselistorder i32 %v2_1333c, { 1, 0 }
  uselistorder i32 %v0_13340.pre, { 1, 0, 2 }
  uselistorder i32 %v10_13330, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_133d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1336c, { 1, 0 }
  uselistorder label %dec_label_pc_13358, { 1, 2, 0 }
}

define i32 @function_133e8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_133e8:
  %v1_133e8 = add i32 %arg2, -1
  %v3_133ec = udiv i32 %v1_133e8, 32
  %v4_133f0 = mul nuw nsw i32 %v3_133ec, 4
  %v5_133f0 = add i32 %v4_133f0, %arg1
  %v6_133f0 = inttoptr i32 %v5_133f0 to i32*
  %v7_133f0 = load i32, i32* %v6_133f0, align 4
  %v1_133f4 = urem i32 %v1_133e8, 32
  %v7_133fc = shl i32 1, %v1_133f4
  %v8_133fc = and i32 %v7_133f0, %v7_133fc
  %v10_133fc = icmp ne i32 %v8_133fc, 0
  %. = zext i1 %v10_133fc to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_133e8, { 1, 0 }
}

define i32 @function_1340c() local_unnamed_addr {
dec_label_pc_1340c:
  %v0_1340c = load i32, i32* @r1, align 4
  %v1_1340c = add i32 %v0_1340c, -1
  %v3_13410 = udiv i32 %v1_1340c, 32
  %v0_13414 = load i32, i32* @r0, align 4
  %v4_13414 = mul nuw nsw i32 %v3_13410, 4
  %v5_13414 = add i32 %v0_13414, %v4_13414
  %v6_13414 = inttoptr i32 %v5_13414 to i32*
  %v7_13414 = load i32, i32* %v6_13414, align 4
  %v1_13418 = urem i32 %v1_1340c, 32
  %v7_13420 = shl i32 1, %v1_13418
  %v8_13420 = or i32 %v7_13414, %v7_13420
  store i32 %v8_13420, i32* %v6_13414, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1340c, { 1, 0 }
}

define i32 @function_13430(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13430:
  %v1_13430 = add i32 %arg2, -1
  %v3_13434 = udiv i32 %v1_13430, 32
  %v4_13438 = mul nuw nsw i32 %v3_13434, 4
  %v5_13438 = add i32 %v4_13438, %arg1
  %v6_13438 = inttoptr i32 %v5_13438 to i32*
  %v7_13438 = load i32, i32* %v6_13438, align 4
  %v1_1343c = urem i32 %v1_13430, 32
  %tmp = shl i32 -1, %v1_1343c
  %v8_13444 = add i32 %tmp, -1
  %v9_13444 = and i32 %v7_13438, %v8_13444
  store i32 %v9_13444, i32* %v6_13438, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_13430, { 1, 0 }
}

define i32 @function_13454(i32 %arg1) local_unnamed_addr {
dec_label_pc_13454:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13454 = load i32, i32* @r4, align 4
  %v6_13454 = load i32, i32* @r5, align 4
  %v9_13454 = load i32, i32* @r6, align 4
  %v0_13458 = load i32, i32* %r0.global-to-local, align 4
  %v2_13458 = icmp eq i32 %v0_13458, 0
  %v2_1345c = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_13458, label %bb, label %dec_label_pc_13468

bb:                                               ; preds = %dec_label_pc_13454
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13470

dec_label_pc_13468:                               ; preds = %dec_label_pc_13454
  %tmp = icmp ugt i32 %v0_13458, -8
  br i1 %tmp, label %dec_label_pc_13574, label %dec_label_pc_13470

dec_label_pc_13470:                               ; preds = %bb, %dec_label_pc_13468
  %v0_13470 = phi i32 [ %v0_13458, %dec_label_pc_13468 ], [ 1, %bb ]
  %v1_13470 = add i32 %v0_13470, 4
  store i32 %v1_13470, i32* %stack_var_-20, align 4
  store i32 %v2_1345c, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1dce8.589 to i32), i32* %r0.global-to-local, align 4
  %v1_13488 = call i32 @function_13e3c()
  store i32 ptrtoint (i32** @global_var_1db28.593 to i32), i32* %r0.global-to-local, align 4
  %v3_13494 = call i32 @function_13808(i32* bitcast (i32** @global_var_1db28.593 to i32*), i32 %v2_1345c)
  store i32 %v3_13494, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dce8.589 to i32), i32* %r0.global-to-local, align 4
  store i32 79020, i32* @lr, align 4
  %v1_134a8 = call i32 @function_13e3c()
  store i32 %v1_134a8, i32* %r0.global-to-local, align 4
  %v2_134ac = icmp eq i32 %v3_13494, 0
  br i1 %v2_134ac, label %dec_label_pc_134b4, label %dec_label_pc_13564

dec_label_pc_134b4:                               ; preds = %dec_label_pc_13470
  %v2_134b8 = load i32, i32* @global_var_1dd10.596, align 4
  store i32 %v2_134b8, i32* @r4, align 4
  %v2_134bc = load i32, i32* %stack_var_-20, align 4
  %v3_134c0 = icmp ult i32 %v2_134bc, %v2_134b8
  br i1 %v3_134c0, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_134b4
  %v3_134c4 = add i32 %v2_134b8, -1
  %v2_134c8 = add i32 %v3_134c4, %v2_134bc
  %v2_134cc = sub i32 0, %v2_134b8
  %v3_134d0 = and i32 %v2_134c8, %v2_134cc
  store i32 %v3_134d0, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_134b4, %bb14
  store i32 ptrtoint (i32* @global_var_1dfcc.598 to i32), i32* %r0.global-to-local, align 4
  %v1_134dc = call i32 @function_13e3c()
  %v0_134e0 = load i32, i32* @r4, align 4
  store i32 %v0_134e0, i32* %r0.global-to-local, align 4
  %v1_134e4 = call i32 @function_145f0(i32 %v0_134e0)
  store i32 %v1_134e4, i32* %r0.global-to-local, align 4
  %v7_134e8 = icmp eq i32 %v1_134e4, -1
  br i1 %v7_134e8, label %bb15, label %dec_label_pc_134f4

bb15:                                             ; preds = %.thread3
  store i32 %v1_134e4, i32* @r5, align 4
  br label %dec_label_pc_13508

dec_label_pc_134f4:                               ; preds = %.thread3
  %v1_134f4 = add i32 %v1_134e4, 3
  %v1_134f8 = and i32 %v1_134f4, -4
  store i32 %v1_134f8, i32* @r5, align 4
  %v9_134fc = icmp eq i32 %v1_134f8, %v1_134e4
  br i1 %v9_134fc, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_134f4
  %v3_13500 = sub i32 %v1_134f8, %v1_134e4
  store i32 %v3_13500, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_134f4, %bb16
  %v1_13504 = xor i1 %v9_134fc, true
  call void @__pseudo_cond_branch(i1 %v1_13504, i32 ptrtoint (i32* @global_var_145f0.599 to i32))
  br label %dec_label_pc_13508

dec_label_pc_13508:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1dfcc.598 to i32), i32* %r0.global-to-local, align 4
  store i32 79128, i32* @lr, align 4
  %v1_13514 = call i32 @function_13e3c()
  store i32 %v1_13514, i32* %r0.global-to-local, align 4
  %v0_13518 = load i32, i32* @r5, align 4
  %v7_13518 = icmp eq i32 %v0_13518, -1
  br i1 %v7_13518, label %dec_label_pc_13574, label %dec_label_pc_13520

dec_label_pc_13520:                               ; preds = %dec_label_pc_13508
  store i32 ptrtoint (i32* @global_var_1dce8.589 to i32), i32* %r0.global-to-local, align 4
  %v1_1352c = call i32 @function_13e3c()
  %v0_13530 = load i32, i32* @r4, align 4
  %v0_13534 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1db28.593 to i32), i32* %r0.global-to-local, align 4
  %v4_1353c = call i32 @function_1395c(i32* bitcast (i32** @global_var_1db28.593 to i32*), i32 %v0_13534, i32 %v0_13530)
  store i32 ptrtoint (i32** @global_var_1db28.593 to i32), i32* %r0.global-to-local, align 4
  %v3_13548 = call i32 @function_13808(i32* bitcast (i32** @global_var_1db28.593 to i32*), i32 %v2_1345c)
  store i32 %v3_13548, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1dce8.589 to i32), i32* %r0.global-to-local, align 4
  store i32 79196, i32* @lr, align 4
  %v1_13558 = call i32 @function_13e3c()
  store i32 %v1_13558, i32* %r0.global-to-local, align 4
  %v2_1355c = icmp eq i32 %v3_13548, 0
  br i1 %v2_1355c, label %dec_label_pc_13574, label %dec_label_pc_13564

dec_label_pc_13564:                               ; preds = %dec_label_pc_13470, %dec_label_pc_13520
  %v1_13568 = phi i32 [ %v3_13494, %dec_label_pc_13470 ], [ %v3_13548, %dec_label_pc_13520 ]
  %v2_13564 = load i32, i32* %stack_var_-20, align 4
  %v2_13568 = inttoptr i32 %v1_13568 to i32*
  store i32 %v2_13564, i32* %v2_13568, align 4
  %v3_13568 = load i32, i32* %r4.global-to-local, align 4
  %v4_13568 = add i32 %v3_13568, 4
  store i32 %v4_13568, i32* %r4.global-to-local, align 4
  %v2_1356c = icmp eq i32 %v4_13568, 0
  br i1 %v2_1356c, label %dec_label_pc_13574, label %dec_label_pc_13584

dec_label_pc_13574:                               ; preds = %dec_label_pc_13564, %dec_label_pc_13520, %dec_label_pc_13508, %dec_label_pc_13468
  %v0_13574 = call i32 @function_12f80()
  store i32 %v0_13574, i32* %r0.global-to-local, align 4
  %v2_1357c = inttoptr i32 %v0_13574 to i32*
  store i32 12, i32* %v2_1357c, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13584

dec_label_pc_13584:                               ; preds = %dec_label_pc_13564, %dec_label_pc_13574
  %v0_13584 = phi i32 [ %v4_13568, %dec_label_pc_13564 ], [ 0, %dec_label_pc_13574 ]
  store i32 %v0_13584, i32* %r0.global-to-local, align 4
  store i32 %v3_13454, i32* @r4, align 4
  store i32 %v6_13454, i32* @r5, align 4
  store i32 %v9_13454, i32* @r6, align 4
  ret i32 %v0_13584

; uselistorder directives
  uselistorder i32 %v0_13584, { 1, 0 }
  uselistorder i32 %v3_13548, { 1, 0, 2 }
  uselistorder i32 %v1_134f8, { 1, 0, 2 }
  uselistorder i32 %v1_134e4, { 4, 0, 3, 2, 1, 5 }
  uselistorder i32 %v3_13494, { 1, 0, 2 }
  uselistorder i32 %v0_13458, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 6, 8, 3, 7, 9, 10, 11, 4, 13, 12, 5, 15, 14, 2, 16, 17, 18, 19, 0, 1 }
  uselistorder label %dec_label_pc_13584, { 1, 0 }
  uselistorder label %dec_label_pc_13564, { 1, 0 }
  uselistorder label %dec_label_pc_13508, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_13470, { 1, 0 }
}

define i32 @function_135a8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_135a8:
  %stack_var_-12 = alloca i32, align 4
  %v3_135a8 = load i32, i32* @r4, align 4
  store i32 %v3_135a8, i32* %stack_var_-12, align 4
  %v6_135a8 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_135b0 = mul i32 %arg2, %arg1
  store i32 %v2_135b0, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_135b4 = icmp eq i32 %arg1, 0
  store i32 %v2_135b0, i32* @r0, align 4
  br i1 %v2_135b4, label %dec_label_pc_135e0, label %dec_label_pc_135c0

dec_label_pc_135c0:                               ; preds = %dec_label_pc_135a8
  %v0_135c0 = call i32 @function_12650()
  %v0_135c4 = load i32, i32* @r5, align 4
  %v9_135c4 = icmp eq i32 %v0_135c4, %v0_135c0
  store i32 0, i32* @r5, align 4
  br i1 %v9_135c4, label %dec_label_pc_135c0.dec_label_pc_135e0_crit_edge, label %dec_label_pc_135d0

dec_label_pc_135c0.dec_label_pc_135e0_crit_edge:  ; preds = %dec_label_pc_135c0
  %v0_135e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_135e0

dec_label_pc_135d0:                               ; preds = %dec_label_pc_135c0
  %v0_135d0 = call i32 @function_12f80()
  %v2_135d8 = inttoptr i32 %v0_135d0 to i32*
  store i32 12, i32* %v2_135d8, align 4
  br label %dec_label_pc_135f8

dec_label_pc_135e0:                               ; preds = %dec_label_pc_135c0.dec_label_pc_135e0_crit_edge, %dec_label_pc_135a8
  %v0_135e0 = phi i32 [ %v0_135e0.pre, %dec_label_pc_135c0.dec_label_pc_135e0_crit_edge ], [ %v2_135b0, %dec_label_pc_135a8 ]
  %v1_135e4 = call i32 @function_13454(i32 %v0_135e0)
  store i32 %v1_135e4, i32* @r5, align 4
  %v0_135ec = load i32, i32* @r4, align 4
  store i32 %v0_135ec, i32* @r2, align 4
  store i32 79352, i32* @lr, align 4
  %v1_135f4 = icmp ne i32 %v1_135e4, 0
  call void @__pseudo_cond_branch(i1 %v1_135f4, i32 ptrtoint (i32* @global_var_12fe0.600 to i32))
  br label %dec_label_pc_135f8

dec_label_pc_135f8:                               ; preds = %dec_label_pc_135d0, %dec_label_pc_135e0
  %v0_135f8 = load i32, i32* @r5, align 4
  %v2_135fc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_135fc, i32* @r4, align 4
  store i32 %v6_135a8, i32* @r5, align 4
  ret i32 %v0_135f8

; uselistorder directives
  uselistorder i32 ()* @function_12650, { 2, 3, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_135f8, { 1, 0 }
}

define i32 @function_13600() local_unnamed_addr {
dec_label_pc_13600:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_13600 = load i32, i32* @r0, align 4
  %v2_13600 = icmp eq i32 %v0_13600, 0
  %v3_13604 = load i32, i32* @r4, align 4
  store i32 %v3_13604, i32* %stack_var_-24, align 4
  %v6_13604 = load i32, i32* @r5, align 4
  %v9_13604 = load i32, i32* @r6, align 4
  %v15_13604 = load i32, i32* @r8, align 4
  br i1 %v2_13600, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_13600
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_13600
  %v1_1360c = add i32 %v0_13600, -4
  %v2_1360c = inttoptr i32 %v1_1360c to i32*
  %v3_1360c = load i32, i32* %v2_1360c, align 4
  store i32 %v3_1360c, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1db28.593 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_1360c, i32* @r4, align 4
  %v1_13624 = call i32 @function_13e3c()
  %v0_13628 = load i32, i32* @r4, align 4
  %v0_1362c = load i32, i32* @r5, align 4
  %v4_13634 = call i32 @function_1395c(i32* bitcast (i32** @global_var_1db28.593 to i32*), i32 %v0_13628, i32 %v0_1362c)
  %v1_1363c = inttoptr i32 %v4_13634 to i32*
  %v2_1363c = load i32, i32* %v1_1363c, align 4
  store i32 %v2_1363c, i32* %r6.global-to-local, align 4
  %v2_13640 = load i32, i32* @global_var_1dd10.596, align 4
  %v4_13644 = mul i32 %v2_13640, 8
  %v6_13644 = icmp ult i32 %v2_1363c, %v4_13644
  store i32 %v4_13634, i32* @r4, align 4
  br i1 %v6_13644, label %dec_label_pc_13684, label %dec_label_pc_13650

dec_label_pc_13650:                               ; preds = %bb11
  %v1_13658 = call i32 @function_13e3c()
  %v1_13660 = call i32 @function_145f0(i32 0)
  %v0_13664 = load i32, i32* @r4, align 4
  %v1_13664 = add i32 %v0_13664, 12
  store i32 %v1_13664, i32* @r5, align 4
  %v9_13668 = icmp eq i32 %v1_13664, %v1_13660
  br i1 %v9_13668, label %dec_label_pc_1368c, label %dec_label_pc_13670

dec_label_pc_13670:                               ; preds = %dec_label_pc_13650
  %v1_1367c = call i32 @function_13e3c()
  br label %dec_label_pc_13684

dec_label_pc_13684:                               ; preds = %bb11, %dec_label_pc_13670, %bb14
  %v2_13684 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13684, i32* @r4, align 4
  store i32 %v6_13604, i32* @r5, align 4
  store i32 %v9_13604, i32* %r6.global-to-local, align 4
  store i32 %v15_13604, i32* %r8.global-to-local, align 4
  %v0_13688 = call i32 @function_13e3c()
  %v0_1368c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1368c

dec_label_pc_1368c:                               ; preds = %dec_label_pc_13650, %dec_label_pc_13684
  %v1_13694 = phi i32 [ %v0_13664, %dec_label_pc_13650 ], [ %v0_1368c.pre, %dec_label_pc_13684 ]
  %v1_1368c = add i32 %v1_13694, 4
  %v2_1368c = inttoptr i32 %v1_1368c to i32*
  %v3_1368c = load i32, i32* %v2_1368c, align 4
  %v2_13690 = icmp eq i32 %v3_1368c, 0
  br i1 %v2_13690, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_1368c
  %v2_13694 = add i32 %v1_13694, 8
  %v3_13694 = inttoptr i32 %v2_13694 to i32*
  %v4_13694 = load i32, i32* %v3_13694, align 4
  %v3_13698 = add i32 %v3_1368c, 8
  %v4_13698 = inttoptr i32 %v3_13698 to i32*
  store i32 %v4_13694, i32* %v4_13698, align 4
  %v0_1369c.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1368c, %bb12
  %v0_1369c = phi i32 [ %v1_13694, %dec_label_pc_1368c ], [ %v0_1369c.pre, %bb12 ]
  %v1_1369c = add i32 %v0_1369c, 8
  %v2_1369c = inttoptr i32 %v1_1369c to i32*
  %v3_1369c = load i32, i32* %v2_1369c, align 4
  %v1_136a0 = add i32 %v0_1369c, 4
  %v2_136a0 = inttoptr i32 %v1_136a0 to i32*
  %v3_136a0 = load i32, i32* %v2_136a0, align 4
  %v2_136a4 = icmp eq i32 %v3_1369c, 0
  br i1 %v2_136a4, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_136a8 = add i32 %v3_1369c, 4
  %v4_136a8 = inttoptr i32 %v3_136a8 to i32*
  store i32 %v3_136a0, i32* %v4_136a8, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_136ac = load i32, i32* %r8.global-to-local, align 4
  %v3_136ac = inttoptr i32 %v2_136ac to i32*
  store i32 %v3_136a0, i32* %v3_136ac, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_136bc = call i32 @function_13e3c()
  %v0_136c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_136c0 = load i32, i32* @r4, align 4
  %v0_136c8 = load i32, i32* @r5, align 4
  %v2_136c0 = sub i32 12, %v0_136c0
  %v1_136c4 = add i32 %v2_136c0, %v1_136c0
  %v2_136c8 = sub i32 %v1_136c4, %v0_136c8
  %v1_136cc = call i32 @function_145f0(i32 %v2_136c8)
  br label %dec_label_pc_13684

; uselistorder directives
  uselistorder i32 %v0_1369c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_145f0, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_1368c, { 1, 0 }
  uselistorder label %dec_label_pc_13684, { 2, 1, 0 }
}

define i32 @function_136f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_136f0:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_136f0 = load i32, i32* @r4, align 4
  store i32 %v3_136f0, i32* %stack_var_-24, align 4
  %v6_136f0 = load i32, i32* @r5, align 4
  %v9_136f0 = load i32, i32* @r6, align 4
  %v12_136f0 = load i32, i32* @r7, align 4
  %v15_136f0 = load i32, i32* @r8, align 4
  %v18_136f0 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_136f4 = icmp eq i32 %arg2, 0
  %v0_136f8 = load i32, i32* @r0, align 4
  store i32 %v0_136f8, i32* @r7, align 4
  br i1 %v2_136f4, label %dec_label_pc_13700, label %dec_label_pc_13708

dec_label_pc_13700:                               ; preds = %dec_label_pc_136f0
  %v0_13700 = call i32 @function_13600()
  %v0_13710.pre = load i32, i32* @r4, align 4
  %v2_13714.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_13710

dec_label_pc_13708:                               ; preds = %dec_label_pc_136f0
  %v2_13708 = icmp eq i32 %v0_136f8, 0
  br i1 %v2_13708, label %dec_label_pc_13710, label %dec_label_pc_1371c

dec_label_pc_13710:                               ; preds = %dec_label_pc_13708, %dec_label_pc_13700
  %v2_13714 = phi i32 [ %v3_136f0, %dec_label_pc_13708 ], [ %v2_13714.pre, %dec_label_pc_13700 ]
  %v0_13710 = phi i32 [ %arg2, %dec_label_pc_13708 ], [ %v0_13710.pre, %dec_label_pc_13700 ]
  store i32 %v2_13714, i32* @r4, align 4
  store i32 %v6_136f0, i32* @r5, align 4
  store i32 %v9_136f0, i32* @r6, align 4
  store i32 %v12_136f0, i32* @r7, align 4
  store i32 %v18_136f0, i32* @lr, align 4
  %v1_13718 = call i32 @function_13454(i32 %v0_13710)
  %v0_1371c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1371c

dec_label_pc_1371c:                               ; preds = %dec_label_pc_13708, %dec_label_pc_13710
  %v0_13734 = phi i32 [ %v0_136f8, %dec_label_pc_13708 ], [ %v1_13718, %dec_label_pc_13710 ]
  %v0_1371c = phi i32 [ %arg2, %dec_label_pc_13708 ], [ %v0_1371c.pre, %dec_label_pc_13710 ]
  %v1_1371c = add i32 %v0_1371c, 7
  %v1_13720 = and i32 %v1_1371c, -4
  store i32 %v1_13720, i32* @r5, align 4
  %v2_13724 = icmp ugt i32 %v1_13720, 10
  %v1_13728 = add i32 %v0_13734, -4
  %v2_13728 = inttoptr i32 %v1_13728 to i32*
  %v3_13728 = load i32, i32* %v2_13728, align 4
  store i32 %v3_13728, i32* @r6, align 4
  br i1 %v2_13724, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_1371c
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_1371c, %bb
  %v0_137b0 = phi i32 [ %v1_13720, %dec_label_pc_1371c ], [ 12, %bb ]
  store i32 %v1_13728, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_137b0, %v3_13728
  br i1 %tmp, label %dec_label_pc_1373c, label %dec_label_pc_137b0

dec_label_pc_1373c:                               ; preds = %bb14
  %v2_13730 = sub i32 %v0_137b0, %v3_13728
  %v1_1374c = call i32 @function_13e3c()
  %v0_13754 = load i32, i32* @r8, align 4
  %v1_13754 = load i32, i32* @r6, align 4
  %v2_13754 = add i32 %v1_13754, %v0_13754
  %v4_1375c = call i32 @function_1389c(i32* bitcast (i32** @global_var_1db28.593 to i32*), i32 %v2_13754, i32 %v2_13730)
  store i32 %v4_1375c, i32* @r4, align 4
  store i32 79732, i32* @lr, align 4
  %v1_13770 = call i32 @function_13e3c()
  %v0_13774 = load i32, i32* @r4, align 4
  %v2_13774 = icmp eq i32 %v0_13774, 0
  br i1 %v2_13774, label %dec_label_pc_13784, label %.thread

.thread:                                          ; preds = %dec_label_pc_1373c
  %v1_13778 = load i32, i32* @r6, align 4
  %v3_13778 = add i32 %v1_13778, %v0_13774
  %v2_1377c = load i32, i32* @r7, align 4
  %v3_1377c = add i32 %v2_1377c, -4
  %v4_1377c = inttoptr i32 %v3_1377c to i32*
  store i32 %v3_13778, i32* %v4_1377c, align 4
  br label %dec_label_pc_137f0

dec_label_pc_13784:                               ; preds = %dec_label_pc_1373c
  %v0_13784 = load i32, i32* @r5, align 4
  %v1_13784 = add i32 %v0_13784, -4
  %v1_13788 = call i32 @function_13454(i32 %v1_13784)
  store i32 %v1_13788, i32* @r0, align 4
  store i32 %v1_13788, i32* @r4, align 4
  %v2_1378c = icmp eq i32 %v1_13788, 0
  br i1 %v2_1378c, label %dec_label_pc_137a8, label %dec_label_pc_13794

dec_label_pc_13794:                               ; preds = %dec_label_pc_13784
  %v0_13794 = load i32, i32* @r6, align 4
  %v1_13794 = add i32 %v0_13794, -4
  store i32 %v1_13794, i32* @r2, align 4
  %v0_13798 = load i32, i32* @r7, align 4
  store i32 %v0_13798, i32* @r1, align 4
  %v3_1379c = call i32 @function_12fc0(i32 %v1_13788, i32 %v0_13798, i32 %v1_13794)
  %v0_137a0 = load i32, i32* @r7, align 4
  store i32 %v0_137a0, i32* @r0, align 4
  %v0_137a4 = call i32 @function_13600()
  %v0_137a8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_137a8

dec_label_pc_137a8:                               ; preds = %dec_label_pc_13784, %dec_label_pc_13794
  %v0_137a8 = phi i32 [ 0, %dec_label_pc_13784 ], [ %v0_137a8.pre, %dec_label_pc_13794 ]
  store i32 %v0_137a8, i32* @r7, align 4
  br label %dec_label_pc_137f0

dec_label_pc_137b0:                               ; preds = %bb14
  %v1_137b0 = add i32 %v0_137b0, 28
  %tmp15 = icmp ugt i32 %v1_137b0, %v3_13728
  br i1 %tmp15, label %dec_label_pc_137f0, label %dec_label_pc_137bc

dec_label_pc_137bc:                               ; preds = %dec_label_pc_137b0
  %v1_137c8 = call i32 @function_13e3c()
  %v0_137cc = load i32, i32* @r8, align 4
  %v1_137cc = load i32, i32* @r5, align 4
  %v2_137cc = add i32 %v1_137cc, %v0_137cc
  %v1_137d0 = load i32, i32* @r6, align 4
  %v2_137d0 = sub i32 %v1_137d0, %v1_137cc
  %v4_137d8 = call i32 @function_1395c(i32* bitcast (i32** @global_var_1db28.593 to i32*), i32 %v2_137cc, i32 %v2_137d0)
  store i32 79852, i32* @lr, align 4
  %v1_137e8 = call i32 @function_13e3c()
  %v0_137ec = load i32, i32* @r5, align 4
  %v1_137ec = load i32, i32* @r7, align 4
  %v2_137ec = add i32 %v1_137ec, -4
  %v3_137ec = inttoptr i32 %v2_137ec to i32*
  store i32 %v0_137ec, i32* %v3_137ec, align 4
  br label %dec_label_pc_137f0

dec_label_pc_137f0:                               ; preds = %.thread, %dec_label_pc_137b0, %dec_label_pc_137a8, %dec_label_pc_137bc
  %v0_137f0 = load i32, i32* @r7, align 4
  %v2_137f4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_137f4, i32* @r4, align 4
  store i32 %v6_136f0, i32* @r5, align 4
  store i32 %v9_136f0, i32* @r6, align 4
  store i32 %v12_136f0, i32* @r7, align 4
  store i32 %v15_136f0, i32* @r8, align 4
  ret i32 %v0_137f0

; uselistorder directives
  uselistorder i32 %v1_137cc, { 1, 0 }
  uselistorder i32 %v0_137b0, { 1, 2, 0 }
  uselistorder i32 %v3_13728, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1db28.593, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1db28.593 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_13454, { 1, 67, 0, 3, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2 }
  uselistorder i32 ()* @function_13600, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32* @r8, { 96, 97, 98, 99, 100, 115, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 1, 39, 2, 40, 3, 41, 42, 43, 44, 45, 46, 47, 49, 48, 50, 51, 52, 54, 55, 53, 56, 57, 58, 59, 61, 60, 62, 63, 64, 66, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 88, 89, 90, 91, 93, 94, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 180, 183, 184, 185, 186, 187, 188, 189 }
  uselistorder i32* @r7, { 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 7, 8, 9, 15, 16, 17, 3, 6, 24, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 25, 1, 64, 65, 66, 67, 68, 69, 70, 71, 207, 208, 209, 210, 72, 0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 2, 5, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 198, 199, 200, 201, 203, 204, 205, 206, 211, 212, 213, 214, 219, 215, 216, 217, 218, 220, 221, 222, 223, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 4, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286 }
  uselistorder label %dec_label_pc_137f0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_137a8, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_1371c, { 1, 0 }
}

define i32 @function_13808(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13808:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_13808 = inttoptr i32 %arg2 to i32*
  %v2_13808 = load i32, i32* %v1_13808, align 4
  %v3_1380c = load i32, i32* @r4, align 4
  store i32 %v3_1380c, i32* %stack_var_-8, align 4
  %v1_13810 = add i32 %v2_13808, 3
  %v1_13814 = and i32 %v1_13810, -4
  store i32 %v1_13814, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_1381c = icmp ugt i32 %v1_13814, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_13824 = load i32, i32* %arg1, align 4
  store i32 %v2_13824, i32* %r0.global-to-local, align 4
  br i1 %v2_1381c, label %dec_label_pc_13890.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_13808
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13890.preheader

dec_label_pc_13890.preheader:                     ; preds = %dec_label_pc_13808, %bb
  %v1_13844 = phi i32 [ %v1_13814, %dec_label_pc_13808 ], [ 12, %bb ]
  %v2_138909 = icmp eq i32 %v2_13824, 0
  br i1 %v2_138909, label %dec_label_pc_13898, label %dec_label_pc_13830

dec_label_pc_13830:                               ; preds = %dec_label_pc_13890.preheader, %dec_label_pc_1388c
  %v2_13848 = phi i32 [ %v3_1388c, %dec_label_pc_1388c ], [ %v2_13824, %dec_label_pc_13890.preheader ]
  %v1_13830 = inttoptr i32 %v2_13848 to i32*
  %v2_13830 = load i32, i32* %v1_13830, align 4
  store i32 %v2_13830, i32* @ip, align 4
  %v3_13834 = icmp ult i32 %v2_13830, %v1_13844
  br i1 %v3_13834, label %dec_label_pc_1388c, label %dec_label_pc_1383c

dec_label_pc_1383c:                               ; preds = %dec_label_pc_13830
  %v1_1383c = add i32 %v1_13844, 44
  %v3_13840 = icmp ult i32 %v2_13830, %v1_1383c
  br i1 %v3_13840, label %dec_label_pc_13850, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_1383c
  %v2_13834.le = sub i32 %v2_13830, %v1_13844
  store i32 %v2_13834.le, i32* %v1_13830, align 4
  %v0_1387c.pre = load i32, i32* @ip, align 4
  %v0_13884.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_13850:                               ; preds = %dec_label_pc_1383c
  %v1_13850 = add i32 %v2_13848, 4
  %v2_13850 = inttoptr i32 %v1_13850 to i32*
  %v3_13850 = load i32, i32* %v2_13850, align 4
  store i32 %v3_13850, i32* %r2.global-to-local, align 4
  %v2_13854 = icmp eq i32 %v3_13850, 0
  br i1 %v2_13854, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_13850
  %v2_13858 = add i32 %v2_13848, 8
  %v3_13858 = inttoptr i32 %v2_13858 to i32*
  %v4_13858 = load i32, i32* %v3_13858, align 4
  %v3_1385c = add i32 %v3_13850, 8
  %v4_1385c = inttoptr i32 %v3_1385c to i32*
  store i32 %v4_13858, i32* %v4_1385c, align 4
  %v0_13860.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13850, %bb27
  %v0_13860 = phi i32 [ %v2_13848, %dec_label_pc_13850 ], [ %v0_13860.pre, %bb27 ]
  %v1_13860 = add i32 %v0_13860, 8
  %v2_13860 = inttoptr i32 %v1_13860 to i32*
  %v3_13860 = load i32, i32* %v2_13860, align 4
  %v1_13864 = add i32 %v0_13860, 4
  %v2_13864 = inttoptr i32 %v1_13864 to i32*
  %v3_13864 = load i32, i32* %v2_13864, align 4
  %v2_13868 = icmp eq i32 %v3_13860, 0
  br i1 %v2_13868, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_1386c = add i32 %v3_13860, 4
  %v4_1386c = inttoptr i32 %v3_1386c to i32*
  store i32 %v3_13864, i32* %v4_1386c, align 4
  %v1_13874 = load i32, i32* @ip, align 4
  store i32 %v1_13874, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_13870 = load i32, i32* %r1.global-to-local, align 4
  %v3_13870 = inttoptr i32 %v2_13870 to i32*
  store i32 %v3_13864, i32* %v3_13870, align 4
  %v1_13878.pre = load i32, i32* @ip, align 4
  store i32 %v1_13878.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_13884 = phi i32 [ %v0_13884.pre, %.thread._crit_edge ], [ %v1_13874, %bb28 ], [ %v1_13878.pre, %.thread5 ]
  %v0_1387c = phi i32 [ %v0_1387c.pre, %.thread._crit_edge ], [ %v1_13874, %bb28 ], [ %v1_13878.pre, %.thread5 ]
  %v1_1387c = load i32, i32* %r0.global-to-local, align 4
  %v2_1387c = sub i32 %v1_1387c, %v0_1387c
  %v1_13880 = add i32 %v2_1387c, 12
  store i32 %v1_13880, i32* %r0.global-to-local, align 4
  %v1_13884 = load i32, i32* %r4.global-to-local, align 4
  %v2_13884 = inttoptr i32 %v1_13884 to i32*
  store i32 %v0_13884, i32* %v2_13884, align 4
  %v2_13888 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13888, i32* %r4.global-to-local, align 4
  ret i32 %v1_13880

dec_label_pc_1388c:                               ; preds = %dec_label_pc_13830
  %v1_1388c = add i32 %v2_13848, 4
  %v2_1388c = inttoptr i32 %v1_1388c to i32*
  %v3_1388c = load i32, i32* %v2_1388c, align 4
  store i32 %v3_1388c, i32* %r0.global-to-local, align 4
  %v2_13890 = icmp eq i32 %v3_1388c, 0
  br i1 %v2_13890, label %dec_label_pc_13890.dec_label_pc_13898_crit_edge, label %dec_label_pc_13830

dec_label_pc_13890.dec_label_pc_13898_crit_edge:  ; preds = %dec_label_pc_1388c
  br label %dec_label_pc_13898

dec_label_pc_13898:                               ; preds = %dec_label_pc_13890.dec_label_pc_13898_crit_edge, %dec_label_pc_13890.preheader
  store i32 %v3_1380c, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_1388c, { 1, 2, 0 }
  uselistorder i32 %v0_13860, { 1, 0 }
  uselistorder i32 %v2_13830, { 1, 0, 2, 3 }
  uselistorder i32 %v2_13848, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_13844, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_13830, { 1, 0 }
  uselistorder label %dec_label_pc_13890.preheader, { 1, 0 }
}

define i32 @function_1389c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1389c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_138a0 = load i32, i32* %arg1, align 4
  store i32 %v2_138a0, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_139186 = icmp eq i32 %v2_138a0, 0
  br i1 %v2_139186, label %dec_label_pc_13920, label %dec_label_pc_138ac

dec_label_pc_138ac:                               ; preds = %dec_label_pc_1389c, %dec_label_pc_13914
  %v0_138ec = phi i32 [ %v3_13914, %dec_label_pc_13914 ], [ %v2_138a0, %dec_label_pc_1389c ]
  %v1_138ac = inttoptr i32 %v0_138ec to i32*
  %v2_138ac = load i32, i32* %v1_138ac, align 4
  store i32 %v2_138ac, i32* %r0.global-to-local, align 4
  %v2_138b0 = sub i32 %v0_138ec, %v2_138ac
  %v1_138b4 = add i32 %v2_138b0, 12
  %v3_138b8 = icmp uge i32 %v1_138b4, %arg2
  %v9_138b8 = icmp eq i32 %v1_138b4, %arg2
  %v2_138bc = xor i1 %v9_138b8, true
  %v3_138bc = and i1 %v3_138b8, %v2_138bc
  br i1 %v3_138bc, label %dec_label_pc_13914, label %dec_label_pc_138c0

dec_label_pc_138c0:                               ; preds = %dec_label_pc_138ac
  br i1 %v9_138b8, label %dec_label_pc_138c4, label %dec_label_pc_13920

dec_label_pc_138c4:                               ; preds = %dec_label_pc_138c0
  %v1_138c4 = add i32 %arg3, 3
  %v1_138c8 = and i32 %v1_138c4, -4
  store i32 %v1_138c8, i32* %r2.global-to-local, align 4
  %v2_138cc = sub i32 %v2_138ac, %v1_138c8
  %v3_138cc = icmp ult i32 %v2_138ac, %v1_138c8
  br i1 %v3_138cc, label %dec_label_pc_13920, label %dec_label_pc_138d4

dec_label_pc_138d4:                               ; preds = %dec_label_pc_138c4
  %v1_138d4 = add i32 %v1_138c8, 44
  %v3_138d8 = icmp ult i32 %v2_138ac, %v1_138d4
  br i1 %v3_138d8, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_138d4
  store i32 %v2_138cc, i32* %v1_138ac, align 4
  %v1_138e4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_138e4, i32* %r0.global-to-local, align 4
  ret i32 %v1_138e4

.thread2:                                         ; preds = %dec_label_pc_138d4
  %v1_138ec = add i32 %v0_138ec, 4
  %v2_138ec = inttoptr i32 %v1_138ec to i32*
  %v3_138ec = load i32, i32* %v2_138ec, align 4
  store i32 %v3_138ec, i32* %r2.global-to-local, align 4
  %v2_138f0 = icmp eq i32 %v3_138ec, 0
  br i1 %v2_138f0, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_138f4 = add i32 %v0_138ec, 8
  %v3_138f4 = inttoptr i32 %v2_138f4 to i32*
  %v4_138f4 = load i32, i32* %v3_138f4, align 4
  %v3_138f8 = add i32 %v3_138ec, 8
  %v4_138f8 = inttoptr i32 %v3_138f8 to i32*
  store i32 %v4_138f4, i32* %v4_138f8, align 4
  %v0_138fc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_138fc = phi i32 [ %v0_138ec, %.thread2 ], [ %v0_138fc.pre, %bb17 ]
  %v1_138fc = add i32 %v0_138fc, 8
  %v2_138fc = inttoptr i32 %v1_138fc to i32*
  %v3_138fc = load i32, i32* %v2_138fc, align 4
  store i32 %v3_138fc, i32* %r2.global-to-local, align 4
  %v1_13900 = add i32 %v0_138fc, 4
  %v2_13900 = inttoptr i32 %v1_13900 to i32*
  %v3_13900 = load i32, i32* %v2_13900, align 4
  %v2_13904 = icmp eq i32 %v3_138fc, 0
  br i1 %v2_13904, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_13908 = add i32 %v3_138fc, 4
  %v4_13908 = inttoptr i32 %v3_13908 to i32*
  store i32 %v3_13900, i32* %v4_13908, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_1390c = load i32, i32* %lr.global-to-local, align 4
  %v3_1390c = inttoptr i32 %v2_1390c to i32*
  store i32 %v3_13900, i32* %v3_1390c, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_13910 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_13910

dec_label_pc_13914:                               ; preds = %dec_label_pc_138ac
  %v1_13914 = add i32 %v0_138ec, 4
  %v2_13914 = inttoptr i32 %v1_13914 to i32*
  %v3_13914 = load i32, i32* %v2_13914, align 4
  store i32 %v3_13914, i32* %ip.global-to-local, align 4
  %v2_13918 = icmp eq i32 %v3_13914, 0
  br i1 %v2_13918, label %dec_label_pc_13918.dec_label_pc_13920.loopexit_crit_edge, label %dec_label_pc_138ac

dec_label_pc_13918.dec_label_pc_13920.loopexit_crit_edge: ; preds = %dec_label_pc_13914
  br label %dec_label_pc_13920

dec_label_pc_13920:                               ; preds = %dec_label_pc_138c4, %dec_label_pc_1389c, %dec_label_pc_13918.dec_label_pc_13920.loopexit_crit_edge, %dec_label_pc_138c0
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_13914, { 1, 2, 0 }
  uselistorder i32 %v0_138fc, { 1, 0 }
  uselistorder i32 %v1_138c8, { 0, 2, 1, 3 }
  uselistorder i1 %v9_138b8, { 1, 0 }
  uselistorder i32 %v2_138ac, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_138ec, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_13920, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_138ac, { 1, 0 }
}

define i32 @function_13928() local_unnamed_addr {
dec_label_pc_13928:
  %v0_13928 = load i32, i32* @r2, align 4
  %v2_13928 = icmp eq i32 %v0_13928, 0
  %v0_1392c = load i32, i32* @r3, align 4
  %v1_1392c = load i32, i32* @r1, align 4
  %v2_1392c = add i32 %v1_1392c, 4
  %v3_1392c = inttoptr i32 %v2_1392c to i32*
  store i32 %v0_1392c, i32* %v3_1392c, align 4
  %v0_13930 = load i32, i32* @r2, align 4
  %v1_13930 = load i32, i32* @r1, align 4
  %v2_13930 = add i32 %v1_13930, 8
  %v3_13930 = inttoptr i32 %v2_13930 to i32*
  store i32 %v0_13930, i32* %v3_13930, align 4
  %v1_13938 = load i32, i32* @r1, align 4
  br i1 %v2_13928, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13928
  %v2_13934 = load i32, i32* @r2, align 4
  %v3_13934 = add i32 %v2_13934, 4
  %v4_13934 = inttoptr i32 %v3_13934 to i32*
  store i32 %v1_13938, i32* %v4_13934, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_13928
  %v2_13938 = load i32, i32* @r0, align 4
  %v3_13938 = inttoptr i32 %v2_13938 to i32*
  store i32 %v1_13938, i32* %v3_13938, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_1393c = load i32, i32* @r3, align 4
  %v2_1393c = icmp eq i32 %v0_1393c, 0
  br i1 %v2_1393c, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_13940 = load i32, i32* @r1, align 4
  %v3_13940 = add i32 %v0_1393c, 8
  %v4_13940 = inttoptr i32 %v3_13940 to i32*
  store i32 %v1_13940, i32* %v4_13940, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_13944 = load i32, i32* @r0, align 4
  ret i32 %v1_13944

; uselistorder directives
  uselistorder i32 %v1_13938, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_13948() local_unnamed_addr {
dec_label_pc_13948:
  %v0_13948 = load i32, i32* @r2, align 4
  %v2_13948 = icmp eq i32 %v0_13948, 0
  %v1_1394c = load i32, i32* @r1, align 4
  br i1 %v2_13948, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_13948
  %v2_1394c = load i32, i32* @r0, align 4
  %v3_1394c = inttoptr i32 %v2_1394c to i32*
  store i32 %v1_1394c, i32* %v3_1394c, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_13948
  %v3_13950 = add i32 %v0_13948, 4
  %v4_13950 = inttoptr i32 %v3_13950 to i32*
  store i32 %v1_1394c, i32* %v4_13950, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_13954 = load i32, i32* @r2, align 4
  %v1_13954 = load i32, i32* @r1, align 4
  %v2_13954 = add i32 %v1_13954, 8
  %v3_13954 = inttoptr i32 %v2_13954 to i32*
  store i32 %v0_13954, i32* %v3_13954, align 4
  %v1_13958 = load i32, i32* @r0, align 4
  ret i32 %v1_13958

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_1395c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1395c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1395c = load i32, i32* @r4, align 4
  store i32 %v3_1395c, i32* %stack_var_-20, align 4
  %v2_13960 = load i32, i32* %arg1, align 4
  store i32 %v2_13960, i32* %r4.global-to-local, align 4
  %v2_13964 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_139802 = icmp eq i32 %v2_13960, 0
  br i1 %v2_139802, label %dec_label_pc_13a30, label %dec_label_pc_13970

dec_label_pc_13970:                               ; preds = %dec_label_pc_1395c, %dec_label_pc_13978
  %v0_139c0 = phi i32 [ %v0_139c8, %dec_label_pc_13978 ], [ 0, %dec_label_pc_1395c ]
  %v0_139c8 = phi i32 [ %v3_1397c, %dec_label_pc_13978 ], [ %v2_13960, %dec_label_pc_1395c ]
  %v1_139845.in = phi i32 [ %v3_1397c, %dec_label_pc_13978 ], [ %v2_13960, %dec_label_pc_1395c ]
  %v1_139845 = add i32 %v1_139845.in, 12
  %v3_13970 = icmp ult i32 %v1_139845, %arg2
  br i1 %v3_13970, label %dec_label_pc_13978, label %dec_label_pc_13990

dec_label_pc_13978:                               ; preds = %dec_label_pc_13970
  store i32 %v0_139c8, i32* %r6.global-to-local, align 4
  %v1_1397c = add i32 %v0_139c8, 4
  %v2_1397c = inttoptr i32 %v1_1397c to i32*
  %v3_1397c = load i32, i32* %v2_1397c, align 4
  store i32 %v3_1397c, i32* %r4.global-to-local, align 4
  %v2_13980 = icmp eq i32 %v3_1397c, 0
  br i1 %v2_13980, label %dec_label_pc_13980.dec_label_pc_13a30.loopexit_crit_edge, label %dec_label_pc_13970

dec_label_pc_13990:                               ; preds = %dec_label_pc_13970
  %v1_13990 = inttoptr i32 %v0_139c8 to i32*
  %v2_13990 = load i32, i32* %v1_13990, align 4
  store i32 %v2_13990, i32* @ip, align 4
  %v2_13994 = sub i32 %v0_139c8, %v2_13990
  %v1_13998 = add i32 %v2_13994, 12
  %v3_1399c = icmp uge i32 %v1_13998, %v2_13964
  %v9_1399c = icmp eq i32 %v1_13998, %v2_13964
  %v2_139a0 = xor i1 %v9_1399c, true
  %v3_139a0 = and i1 %v3_1399c, %v2_139a0
  br i1 %v3_139a0, label %dec_label_pc_13a30, label %dec_label_pc_139a4

dec_label_pc_139a4:                               ; preds = %dec_label_pc_13990
  %v2_139a4 = add i32 %v2_13990, %arg3
  store i32 %v2_139a4, i32* %r7.global-to-local, align 4
  br i1 %v9_1399c, label %dec_label_pc_139ac, label %dec_label_pc_139d8

dec_label_pc_139ac:                               ; preds = %dec_label_pc_139a4
  %v2_139ac = icmp eq i32 %v0_139c0, 0
  br i1 %v2_139ac, label %dec_label_pc_13a24, label %dec_label_pc_139b4

dec_label_pc_139b4:                               ; preds = %dec_label_pc_139ac
  %v1_139b4 = add i32 %v0_139c0, 12
  %v9_139b8 = icmp eq i32 %v1_139b4, %arg2
  br i1 %v9_139b8, label %dec_label_pc_139c0, label %dec_label_pc_13a24

dec_label_pc_139c0:                               ; preds = %dec_label_pc_139b4
  %v1_139c0 = inttoptr i32 %v0_139c0 to i32*
  %v2_139c0 = load i32, i32* %v1_139c0, align 4
  %v1_139c4 = add i32 %v0_139c0, 8
  %v2_139c4 = inttoptr i32 %v1_139c4 to i32*
  %v3_139c4 = load i32, i32* %v2_139c4, align 4
  store i32 %v3_139c4, i32* @r2, align 4
  store i32 %v0_139c8, i32* @r1, align 4
  %v2_139cc = add i32 %v2_139c0, %v2_139a4
  store i32 %v2_139cc, i32* %r7.global-to-local, align 4
  %v0_139d0 = call i32 @function_13948()
  br label %dec_label_pc_13a24

dec_label_pc_139d8:                               ; preds = %dec_label_pc_139a4
  %v1_139d8 = add i32 %v0_139c8, 4
  %v2_139d8 = inttoptr i32 %v1_139d8 to i32*
  %v3_139d8 = load i32, i32* %v2_139d8, align 4
  store i32 %v3_139d8, i32* %r5.global-to-local, align 4
  %v2_139dc = icmp eq i32 %v3_139d8, 0
  br i1 %v2_139dc, label %dec_label_pc_13a10, label %dec_label_pc_139e4

dec_label_pc_139e4:                               ; preds = %dec_label_pc_139d8
  %v1_139e4 = inttoptr i32 %v3_139d8 to i32*
  %v2_139e4 = load i32, i32* %v1_139e4, align 4
  store i32 %v2_139e4, i32* @ip, align 4
  %v2_139e8 = sub i32 %v3_139d8, %v2_139e4
  %v1_139ec = add i32 %v2_139e8, 12
  %v9_139f0 = icmp eq i32 %v2_13964, %v1_139ec
  br i1 %v9_139f0, label %dec_label_pc_139f8, label %dec_label_pc_13a10

dec_label_pc_139f8:                               ; preds = %dec_label_pc_139e4
  store i32 %v0_139c0, i32* @r2, align 4
  store i32 %v3_139d8, i32* @r1, align 4
  %v2_13a00 = add i32 %v2_139e4, %v2_139a4
  store i32 %v2_13a00, i32* %r7.global-to-local, align 4
  %v0_13a04 = call i32 @function_13948()
  %v0_13a08 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13a08, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13a24

dec_label_pc_13a10:                               ; preds = %dec_label_pc_139e4, %dec_label_pc_139d8
  %v2_13a10 = add i32 %v0_139c8, %arg3
  store i32 %v2_13a10, i32* %r4.global-to-local, align 4
  store i32 %v3_139d8, i32* @r3, align 4
  store i32 %v0_139c0, i32* @r2, align 4
  store i32 %v2_13a10, i32* @r1, align 4
  %v0_13a20 = call i32 @function_13928()
  br label %dec_label_pc_13a24

dec_label_pc_13a24:                               ; preds = %dec_label_pc_139b4, %dec_label_pc_139ac, %dec_label_pc_139f8, %dec_label_pc_139c0, %dec_label_pc_13a10
  %v0_13a24 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13a24, i32* %r5.global-to-local, align 4
  %v0_13a28 = load i32, i32* %r7.global-to-local, align 4
  %v2_13a28 = inttoptr i32 %v0_13a24 to i32*
  store i32 %v0_13a28, i32* %v2_13a28, align 4
  br label %dec_label_pc_13a48

dec_label_pc_13980.dec_label_pc_13a30.loopexit_crit_edge: ; preds = %dec_label_pc_13978
  br label %dec_label_pc_13a30

dec_label_pc_13a30:                               ; preds = %dec_label_pc_1395c, %dec_label_pc_13980.dec_label_pc_13a30.loopexit_crit_edge, %dec_label_pc_13990
  %v1_13a30 = add i32 %v2_13964, -12
  store i32 %v1_13a30, i32* %r5.global-to-local, align 4
  %v3_13a34 = inttoptr i32 %v1_13a30 to i32*
  store i32 %arg3, i32* %v3_13a34, align 4
  %v0_13a38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13a38, i32* @r3, align 4
  %v0_13a3c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_13a3c, i32* @r2, align 4
  %v0_13a40 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13a40, i32* @r1, align 4
  %v0_13a44 = call i32 @function_13928()
  br label %dec_label_pc_13a48

dec_label_pc_13a48:                               ; preds = %dec_label_pc_13a24, %dec_label_pc_13a30
  %v0_13a48 = load i32, i32* %r5.global-to-local, align 4
  %v2_13a4c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13a4c, i32* @r4, align 4
  ret i32 %v0_13a48

; uselistorder directives
  uselistorder i32 %v3_139d8, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_1399c, { 1, 0 }
  uselistorder i32 %v3_1397c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_139c8, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_139c0, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_13928, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_13948, { 1, 0 }
  uselistorder i32* @ip, { 12, 13, 1, 14, 0, 15, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 4, 5, 2, 9, 10, 3, 11 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13a48, { 1, 0 }
  uselistorder label %dec_label_pc_13a30, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13a24, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_13970, { 1, 0 }
}

define i32 @function_13a50() local_unnamed_addr {
dec_label_pc_13a6c.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_13a50 = ptrtoint i32* %stack_var_-268 to i32
  %v1_13a60 = call i32 @function_13e3c()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_13a6c = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_13a6c

dec_label_pc_13a6c:                               ; preds = %dec_label_pc_13a6c.lr.ph, %dec_label_pc_13a6c
  %v1_13a70 = phi i32 [ 31, %dec_label_pc_13a6c.lr.ph ], [ %v1_13a7c, %dec_label_pc_13a6c ]
  %v4_13a70 = mul i32 %v1_13a70, 4
  %v5_13a70 = add i32 %v4_13a70, %v2_13a6c
  %v2_13a78 = add i32 %v5_13a70, -128
  %v3_13a78 = inttoptr i32 %v2_13a78 to i32*
  store i32 0, i32* %v3_13a78, align 4
  %v0_13a7c = load i32, i32* %r1.global-to-local, align 4
  %v1_13a7c = add i32 %v0_13a7c, -1
  store i32 %v1_13a7c, i32* %r1.global-to-local, align 4
  %v6_13a7c = icmp slt i32 %v1_13a7c, 0
  br i1 %v6_13a7c, label %dec_label_pc_13a84, label %dec_label_pc_13a6c

dec_label_pc_13a84:                               ; preds = %dec_label_pc_13a6c
  %v2_13a84 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_13a84, i32* @r4, align 4
  store i32 %v2_13a84, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_13a90 = call i32 @function_1340c()
  %v2_13a94 = icmp eq i32 %v0_13a90, 0
  br i1 %v2_13a94, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_13a84
  store i32 %v2_13a84, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13a84, %bb
  store i32 80552, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_13a94, i32 ptrtoint (i32* @global_var_12c54.615 to i32))
  %v2_13aac = load i32, i32* @global_var_1dd00.617, align 4
  %v2_13ab0 = icmp eq i32 %v2_13aac, 0
  br i1 %v2_13ab0, label %dec_label_pc_13ab8, label %dec_label_pc_13ae8

dec_label_pc_13ab8:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1dd00.617, align 4
  br label %dec_label_pc_13ac0

dec_label_pc_13ac0:                               ; preds = %dec_label_pc_13b38, %dec_label_pc_13ab8
  %v1_13acc = call i32 @function_13e3c()
  %v1_13ad4 = call i32 @function_14fcc(i32 6)
  store i32 80616, i32* @lr, align 4
  %v1_13ae4 = call i32 @function_13e3c()
  %v2_13aec.pre = load i32, i32* @global_var_1dd00.617, align 4
  br label %dec_label_pc_13ae8

dec_label_pc_13ae8:                               ; preds = %.thread1, %dec_label_pc_13ac0
  %v0_13b5c = phi i32 [ %v2_13aac, %.thread1 ], [ %v2_13aec.pre, %dec_label_pc_13ac0 ]
  store i32 ptrtoint (i32* @global_var_1dd00.617 to i32), i32* %ip.global-to-local, align 4
  %v7_13af0 = icmp eq i32 %v0_13b5c, 1
  br i1 %v7_13af0, label %dec_label_pc_13b20.lr.ph, label %dec_label_pc_13b54

dec_label_pc_13b20.lr.ph:                         ; preds = %dec_label_pc_13ae8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1dd00.617, align 4
  %v2_13b0c = bitcast i32* %stack_var_-268 to i8*
  %v3_13b0c = call i32 @function_12fe0(i8* %v2_13b0c, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13b20

dec_label_pc_13b20:                               ; preds = %dec_label_pc_13b20.lr.ph, %dec_label_pc_13b20
  %v1_13b24 = phi i32 [ 31, %dec_label_pc_13b20.lr.ph ], [ %v1_13b30, %dec_label_pc_13b20 ]
  %v4_13b24 = mul i32 %v1_13b24, 4
  %v5_13b24 = add i32 %v4_13b24, %v2_13a6c
  %v2_13b2c = add i32 %v5_13b24, -264
  %v3_13b2c = inttoptr i32 %v2_13b2c to i32*
  store i32 -1, i32* %v3_13b2c, align 4
  %v0_13b30 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b30 = add i32 %v0_13b30, -1
  store i32 %v1_13b30, i32* %r1.global-to-local, align 4
  %v6_13b30 = icmp slt i32 %v1_13b30, 0
  br i1 %v6_13b30, label %dec_label_pc_13b38, label %dec_label_pc_13b20

dec_label_pc_13b38:                               ; preds = %dec_label_pc_13b20
  store i32 %v2_13a50, i32* %r1.global-to-local, align 4
  %v4_13b4c = call i32 @function_14128(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_13ac0

dec_label_pc_13b54:                               ; preds = %dec_label_pc_13ae8
  %v7_13b54 = icmp eq i32 %v0_13b5c, 2
  br i1 %v7_13b54, label %dec_label_pc_13b5c, label %dec_label_pc_13b68

dec_label_pc_13b5c:                               ; preds = %dec_label_pc_13b54
  store i32 3, i32* @global_var_1dd00.617, align 4
  %v0_13b64 = call i32 @function_13a50()
  %v2_13b68.pre = load i32, i32* @global_var_1dd00.617, align 4
  br label %dec_label_pc_13b68

dec_label_pc_13b68:                               ; preds = %dec_label_pc_13b54, %dec_label_pc_13b5c
  %v1_13b70 = phi i32 [ %v0_13b5c, %dec_label_pc_13b54 ], [ %v2_13b68.pre, %dec_label_pc_13b5c ]
  %v7_13b6c = icmp eq i32 %v1_13b70, 3
  br i1 %v7_13b6c, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_13b68
  %v2_13b78 = load i32, i32* %ip.global-to-local, align 4
  %v3_13b78 = inttoptr i32 %v2_13b78 to i32*
  store i32 4, i32* %v3_13b78, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_13b68, %bb27
  call void @__pseudo_cond_branch(i1 %v7_13b6c, i32 ptrtoint (i32* @global_var_14240.619 to i32))
  br label %dec_label_pc_13b80

dec_label_pc_13b80:                               ; preds = %dec_label_pc_13b80, %.thread3
  %v0_13b80 = call i32 @function_13a50()
  br label %dec_label_pc_13b80

; uselistorder directives
  uselistorder i32 %v1_13b30, { 2, 1, 0 }
  uselistorder i32 %v1_13a7c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1dd00.617, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_13b68, { 1, 0 }
  uselistorder label %dec_label_pc_13b20, { 1, 0 }
  uselistorder label %dec_label_pc_13ae8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_13a6c, { 1, 0 }
}

define i32 @function_13b98(i32 %arg1) local_unnamed_addr {
dec_label_pc_13b98:
  %stack_var_-16 = alloca i32, align 4
  %v2_13b98 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_13b98, i32* @r0, align 4
  %v8_13bb4 = call i32 @function_13e44(i32 %v2_13b98, i32 ptrtoint (i32* @global_var_13e3c.571 to i32), i32 ptrtoint (i32* @global_var_1dc48.622 to i32), i32 81476, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_13bc4 = call i32 @function_13e3c()
  %v2_13bcc = load i32, i32* @global_var_1dd04.626, align 4
  %v2_13bd0 = icmp eq i32 %v2_13bcc, 0
  br i1 %v2_13bd0, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_13b98
  call void @__pseudo_branch(i32 %v2_13bcc)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13b98, %bb
  store i32 %v2_13b98, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_13bf4.628 to i32), i32* @lr, align 4
  %v8_13bf0 = call i32 @function_13e44(i32 %v2_13b98, i32 1, i32 ptrtoint (i32* @global_var_1dc48.622 to i32), i32 81476, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_13bf0, i32* @r0, align 4
  %v1_13bf4 = call i32 @function_13dd0(i32 %v8_13bf0)
  store i1 true, i1* @cpsr_z, align 1
  %v0_13c08 = load i32, i32* @r4, align 4
  %v1_13c0c = call i32 @function_14240(i32 %v0_13c08)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_13b98, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_13e3c, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_13e44, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 81476, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1dc48.622 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_13e3c.571 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_13c2c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13c2c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13c2c = load i32, i32* @r4, align 4
  store i32 %v3_13c2c, i32* %stack_var_-20, align 4
  %v6_13c2c = load i32, i32* @r5, align 4
  %v9_13c2c = load i32, i32* @r6, align 4
  %v16_13c2c = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %ip.global-to-local, align 4
  %v2_13c30 = icmp eq i32 %arg1, 0
  %v2_13c34 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_13c30, label %dec_label_pc_13db8, label %dec_label_pc_13c4c.preheader

dec_label_pc_13c4c.preheader:                     ; preds = %dec_label_pc_13c2c
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_13c5417 = add i32 %v16_13c2c, 124
  br label %dec_label_pc_13c44

dec_label_pc_13c44:                               ; preds = %dec_label_pc_13c4c.preheader, %dec_label_pc_13c44
  %v5_13c5418 = phi i32 [ %v5_13c5417, %dec_label_pc_13c4c.preheader ], [ %v5_13c54, %dec_label_pc_13c44 ]
  %v2_13c48 = add i32 %v5_13c5418, -136
  %v3_13c48 = inttoptr i32 %v2_13c48 to i32*
  store i32 0, i32* %v3_13c48, align 4
  %v0_13c4c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13c4c = add i32 %v0_13c4c.pre, -1
  store i32 %v1_13c4c, i32* %r1.global-to-local, align 4
  %v6_13c4c = icmp slt i32 %v1_13c4c, 0
  %v4_13c54 = mul i32 %v1_13c4c, 4
  %v5_13c54 = add i32 %v4_13c54, %v16_13c2c
  br i1 %v6_13c4c, label %dec_label_pc_13c5c, label %dec_label_pc_13c44

dec_label_pc_13c5c:                               ; preds = %dec_label_pc_13c44
  %v2_13c5c = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_13c5c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_13c6c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_13c6c, i32* %stack_var_-28, align 4
  %v0_13c74 = call i32 @function_1340c()
  store i32 %v0_13c74, i32* %r0.global-to-local, align 4
  %v1_13c78 = load i32, i32* @r5, align 4
  %v5_13c7c = icmp slt i32 %v0_13c74, %v1_13c78
  br i1 %v5_13c7c, label %dec_label_pc_13dc0, label %dec_label_pc_13c80

dec_label_pc_13c80:                               ; preds = %dec_label_pc_13c5c
  %v2_13c80 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_13c80, i32* @r4, align 4
  store i32 %v1_13c78, i32* %r0.global-to-local, align 4
  store i32 %v2_13c5c, i32* %r1.global-to-local, align 4
  %v3_13c90 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_13c90 = call i32 @function_12c54(i32 %v1_13c78, %_TYPEDEF_sigset_t* %v3_13c90, i32 %v2_13c80)
  store i32 %v4_13c90, i32* %r0.global-to-local, align 4
  %v1_13c94 = load i32, i32* @r5, align 4
  %v9_13c94 = icmp eq i32 %v4_13c90, %v1_13c94
  br i1 %v9_13c94, label %dec_label_pc_13c9c, label %dec_label_pc_13dc0

dec_label_pc_13c9c:                               ; preds = %dec_label_pc_13c80
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_13c80, i32* %r0.global-to-local, align 4
  %v2_13ca4 = call i32 @function_133e8(i32 %v2_13c80, i32 17)
  store i32 %v2_13ca4, i32* %r0.global-to-local, align 4
  %v1_13ca8 = load i32, i32* @r5, align 4
  %v9_13ca8 = icmp eq i32 %v2_13ca4, %v1_13ca8
  br i1 %v9_13ca8, label %dec_label_pc_13cc0.preheader, label %dec_label_pc_13c9c.dec_label_pc_13d88_crit_edge

dec_label_pc_13c9c.dec_label_pc_13d88_crit_edge:  ; preds = %dec_label_pc_13c9c
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_13d88

dec_label_pc_13cc0.preheader:                     ; preds = %dec_label_pc_13c9c
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13cb8

dec_label_pc_13cb8:                               ; preds = %dec_label_pc_13cc0.preheader, %dec_label_pc_13cb8
  %v5_13cc816 = phi i32 [ %v5_13c5417, %dec_label_pc_13cc0.preheader ], [ %v5_13cc8, %dec_label_pc_13cb8 ]
  %v2_13cbc = add i32 %v5_13cc816, -136
  %v3_13cbc = inttoptr i32 %v2_13cbc to i32*
  store i32 0, i32* %v3_13cbc, align 4
  %v0_13cc0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13cc0 = add i32 %v0_13cc0.pre, -1
  store i32 %v1_13cc0, i32* %r1.global-to-local, align 4
  %v6_13cc0 = icmp slt i32 %v1_13cc0, 0
  %v4_13cc8 = mul i32 %v1_13cc0, 4
  %v5_13cc8 = add i32 %v4_13cc8, %v16_13c2c
  br i1 %v6_13cc0, label %dec_label_pc_13cd0, label %dec_label_pc_13cb8

dec_label_pc_13cd0:                               ; preds = %dec_label_pc_13cb8
  store i32 %v2_13c5c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_13cd8 = call i32 @function_1340c()
  store i32 %v0_13cd8, i32* %r0.global-to-local, align 4
  %v1_13cdc = icmp slt i32 %v0_13cd8, 0
  br i1 %v1_13cdc, label %dec_label_pc_13dc0, label %dec_label_pc_13ce4

dec_label_pc_13ce4:                               ; preds = %dec_label_pc_13cd0
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_13cf0 = call i32 @function_14128(i32 17, i32* null, i32 %v2_13c34)
  store i32 %v4_13cf0, i32* %r0.global-to-local, align 4
  %v1_13cf4 = icmp slt i32 %v4_13cf0, 0
  br i1 %v1_13cf4, label %dec_label_pc_13cfc, label %dec_label_pc_13d24

dec_label_pc_13cfc:                               ; preds = %dec_label_pc_13ce4
  %v0_13cfc = call i32 @function_12f80()
  store i32 %v2_13c80, i32* %r1.global-to-local, align 4
  store i32 %v0_13cfc, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_13d10 = inttoptr i32 %v0_13cfc to i32*
  %v2_13d10 = load i32, i32* %v1_13d10, align 4
  store i32 %v2_13d10, i32* @r4, align 4
  %v3_13d14 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13d14 = call i32 @function_12c54(i32 2, %_TYPEDEF_sigset_t* %v3_13d14, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_13d1c = load i32, i32* @r4, align 4
  %v1_13d1c = load i32, i32* %r5.global-to-local, align 4
  %v2_13d1c = inttoptr i32 %v1_13d1c to i32*
  store i32 %v0_13d1c, i32* %v2_13d1c, align 4
  %v17_13dc8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13dc4

dec_label_pc_13d24:                               ; preds = %dec_label_pc_13ce4
  %v2_13d24 = load i32, i32* %stack_var_-424, align 4
  %v7_13d28 = icmp eq i32 %v2_13d24, 1
  %v2_13d30 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_13d30, i32* @r4, align 4
  br i1 %v7_13d28, label %dec_label_pc_13d38, label %dec_label_pc_13d6c

dec_label_pc_13d38:                               ; preds = %dec_label_pc_13d24
  store i32 %v2_13d30, i32* %r1.global-to-local, align 4
  store i32 %v2_13d30, i32* %r0.global-to-local, align 4
  %v2_13d40 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_13d40 = call i32 @function_145c4(%timespec* %v2_13d40, i32 %v2_13d30)
  store i32 %v3_13d40, i32* %r0.global-to-local, align 4
  store i32 %v3_13d40, i32* %r6.global-to-local, align 4
  %v0_13d48 = call i32 @function_12f80()
  store i32 %v2_13c80, i32* %r1.global-to-local, align 4
  store i32 %v0_13d48, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_13d5c = inttoptr i32 %v0_13d48 to i32*
  %v2_13d5c = load i32, i32* %v1_13d5c, align 4
  store i32 %v2_13d5c, i32* @r4, align 4
  %v3_13d60 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13d60 = call i32 @function_12c54(i32 2, %_TYPEDEF_sigset_t* %v3_13d60, i32 0)
  store i32 %v4_13d60, i32* %r0.global-to-local, align 4
  %v0_13d64 = load i32, i32* @r4, align 4
  %v1_13d64 = load i32, i32* %r5.global-to-local, align 4
  %v2_13d64 = inttoptr i32 %v1_13d64 to i32*
  store i32 %v0_13d64, i32* %v2_13d64, align 4
  %v0_13d94.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13d94

dec_label_pc_13d6c:                               ; preds = %dec_label_pc_13d24
  store i32 %v2_13c80, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_13d78 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13d78 = call i32 @function_12c54(i32 2, %_TYPEDEF_sigset_t* %v3_13d78, i32 0)
  store i32 %v4_13d78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13d88

dec_label_pc_13d88:                               ; preds = %dec_label_pc_13c9c.dec_label_pc_13d88_crit_edge, %dec_label_pc_13d6c
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_13c9c.dec_label_pc_13d88_crit_edge ], [ %v2_13d30, %dec_label_pc_13d6c ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_13d8c = bitcast i32* %stack_var_-28 to %timespec*
  %v3_13d8c = call i32 @function_145c4(%timespec* %v2_13d8c, i32 %storemerge.pre-phi)
  store i32 %v3_13d8c, i32* %r0.global-to-local, align 4
  store i32 %v3_13d8c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13d94

dec_label_pc_13d94:                               ; preds = %dec_label_pc_13d38, %dec_label_pc_13d88
  %v0_13d94 = phi i32 [ %v0_13d94.pr, %dec_label_pc_13d38 ], [ %v3_13d8c, %dec_label_pc_13d88 ]
  %v2_13d94 = icmp eq i32 %v0_13d94, 0
  br i1 %v2_13d94, label %dec_label_pc_13db8, label %dec_label_pc_13d9c

dec_label_pc_13d9c:                               ; preds = %dec_label_pc_13d94
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_13da4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_13da4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13dc4

dec_label_pc_13db8:                               ; preds = %dec_label_pc_13c2c, %dec_label_pc_13d94
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13dc4

dec_label_pc_13dc0:                               ; preds = %dec_label_pc_13c80, %dec_label_pc_13cd0, %dec_label_pc_13c5c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13dc4

dec_label_pc_13dc4:                               ; preds = %dec_label_pc_13d9c, %dec_label_pc_13db8, %dec_label_pc_13cfc, %dec_label_pc_13dc0
  %v17_13dc8 = phi i32 [ %v3_13da4, %dec_label_pc_13d9c ], [ 0, %dec_label_pc_13db8 ], [ %v17_13dc8.pre, %dec_label_pc_13cfc ], [ -1, %dec_label_pc_13dc0 ]
  %v2_13dc8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13dc8, i32* @r4, align 4
  store i32 %v6_13c2c, i32* @r5, align 4
  store i32 %v9_13c2c, i32* @r6, align 4
  ret i32 %v17_13dc8

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_13d30, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_13cc0, { 0, 2, 1 }
  uselistorder i32 %v2_13c80, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_13c78, { 1, 0, 2 }
  uselistorder i32 %v1_13c4c, { 0, 2, 1 }
  uselistorder i32 %v16_13c2c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 9, 0, 11, 12, 14, 13, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 0, 7, 6, 9, 8, 21, 10, 12, 13, 11, 15, 14, 16, 20, 17, 22, 18, 19, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_14128, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_12c54, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_1340c, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13dc4, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_13dc0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13db8, { 1, 0 }
  uselistorder label %dec_label_pc_13d94, { 1, 0 }
  uselistorder label %dec_label_pc_13d88, { 1, 0 }
  uselistorder label %dec_label_pc_13cb8, { 1, 0 }
  uselistorder label %dec_label_pc_13c44, { 1, 0 }
}

define i32 @function_13dd0(i32 %arg1) local_unnamed_addr {
dec_label_pc_13dfc:
  %stack_var_-8 = alloca i32, align 4
  %v3_13dd0 = load i32, i32* @r4, align 4
  store i32 %v3_13dd0, i32* %stack_var_-8, align 4
  %v2_13e00 = load i32, i32* @global_var_1dd14.635, align 4
  %v2_13e04 = icmp eq i32 %v2_13e00, 0
  br i1 %v2_13e04, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13dfc
  store i32 81424, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_13e00)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13dfc, %bb
  %v2_13e14 = load i32, i32* @global_var_1dd18.637, align 4
  %v2_13e18 = icmp eq i32 %v2_13e14, 0
  br i1 %v2_13e18, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_13e1c = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_13e1c, i32* @r4, align 4
  %v9_13e1c = load i32, i32* @r0, align 4
  ret i32 %v9_13e1c

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_13e28.638 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_13e14)
  %v2_13e28 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e28, i32* @r4, align 4
  %v8_13e28 = load i32, i32* @r0, align 4
  ret i32 %v8_13e28

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13e3c() local_unnamed_addr {
dec_label_pc_13e3c:
  ret i32 0
}

define i32 @function_13e44(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13e44:
  %v1_13e44 = load i32, i32* @r0, align 4
  ret i32 %v1_13e44
}

define i32 @function_13e48(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13e48:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13e48 = load i32, i32* @r4, align 4
  store i32 %v3_13e48, i32* %stack_var_-12, align 4
  %v6_13e48 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_13e58 = call i32 @function_12914(i32 %arg1, i32 1)
  %v7_13e5c = icmp eq i32 %v2_13e58, -1
  br i1 %v7_13e5c, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13e48
  %v3_13e60 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_13e60, i32* @r4, align 4
  store i32 %v6_13e48, i32* @r5, align 4
  ret i32 %v2_13e58

bb4:                                              ; preds = %dec_label_pc_13e48
  %v0_13e64 = load i32, i32* @r4, align 4
  %v4_13e6c = call i32 @function_12b04(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_157e4.640, i32 0, i32 0), i32 %v0_13e64)
  %v1_13e70 = load i32, i32* %r5.global-to-local, align 4
  %v9_13e70 = icmp eq i32 %v4_13e6c, %v1_13e70
  br i1 %v9_13e70, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_13e74 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_13e74, i32* @r4, align 4
  store i32 %v6_13e48, i32* @r5, align 4
  ret i32 %v4_13e6c

bb6:                                              ; preds = %bb4
  %v0_13e78 = call i32 @function_13a50()
  %v0_13e7c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13e7c, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %v2_13e7c = load i32, i32* @r4, align 4
  %v3_13e7c = udiv i32 %v2_13e7c, 32768
  %v4_13e7c = mul i32 %v2_13e7c, 131072
  %v5_13e7c = or i32 %v3_13e7c, %v4_13e7c
  %v8_13e7c = and i32 %v5_13e7c, %v0_13e64
  store i32 %v8_13e7c, i32* @r5, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_13e78

; uselistorder directives
  uselistorder i32 %v2_13e58, { 1, 0 }
  uselistorder i32 %v6_13e48, { 1, 0 }
  uselistorder i1* @cpsr_z, { 11, 10, 0, 12, 9, 6, 7, 1, 2, 3, 4, 5, 8 }
  uselistorder i32 ()* @function_13a50, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_12b04, { 7, 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 (i32, i32)* @function_12914, { 0, 5, 11, 10, 13, 12, 9, 8, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_13e80(i32 %arg1) local_unnamed_addr {
dec_label_pc_13e80:
  %v2_13e84 = load i32, i32* @global_var_1dd1c.642, align 4
  %v2_13e88 = icmp eq i32 %v2_13e84, 0
  br i1 %v2_13e88, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_13e80
  %v6_13e94 = load i32, i32* @r0, align 4
  ret i32 %v6_13e94

bb2:                                              ; preds = %dec_label_pc_13e80
  store i32 1, i32* @global_var_1dd1c.642, align 4
  store i32 4096, i32* @global_var_1dd10.596, align 4
  ret i32 undef
}

define i32 @function_13edc(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13edc:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_13ee0 = mul i32 %arg2, 4
  %v5_13ee0 = add i32 %tmp, %v4_13ee0
  %v2_13ee4 = load i32, i32* %arg3, align 4
  %v2_13ee8 = ptrtoint i32* %stack_var_-120 to i32
  %v1_13eec = add i32 %v5_13ee0, 4
  %v9_13ef0 = icmp eq i32 %v1_13eec, %v2_13ee4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1dd08.647, align 4
  store i32 %v1_13eec, i32* @global_var_1dd0c.649, align 4
  store i32 %arg6, i32* @global_var_1dd18.637, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_13ef0, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_13edc
  store i32 %v5_13ee0, i32* @global_var_1dd0c.649, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_13edc, %bb
  %v2_13f30 = bitcast i32* %stack_var_-120 to i8*
  %v3_13f30 = call i32 @function_12fe0(i8* %v2_13f30, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1dd0c.649, align 4
  br label %dec_label_pc_13f40

dec_label_pc_13f40:                               ; preds = %dec_label_pc_13f40, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_13f40, %dec_label_pc_13f40 ]
  %v1_13f40 = inttoptr i32 %storemerge to i32*
  %v2_13f40 = load i32, i32* %v1_13f40, align 4
  %v4_13f40 = add i32 %storemerge, 4
  %v2_13f44 = icmp eq i32 %v2_13f40, 0
  br i1 %v2_13f44, label %dec_label_pc_13f50, label %dec_label_pc_13f40

dec_label_pc_13f50:                               ; preds = %dec_label_pc_13f40
  store i32 %v4_13f40, i32* @r4, align 4
  %v1_13f7022 = inttoptr i32 %v4_13f40 to i32*
  %v2_13f7023 = load i32, i32* %v1_13f7022, align 4
  %v2_13f7425 = icmp eq i32 %v2_13f7023, 0
  br i1 %v2_13f7425, label %dec_label_pc_13f7c, label %dec_label_pc_13f58

dec_label_pc_13f58:                               ; preds = %dec_label_pc_13f50, %dec_label_pc_13f70
  %v5_13f5c = phi i32 [ %v2_13f70, %dec_label_pc_13f70 ], [ %v2_13f7023, %dec_label_pc_13f50 ]
  %v2_13f58 = icmp ugt i32 %v5_13f5c, 13
  %v7_13f58 = icmp eq i32 %v5_13f5c, 14
  %v2_13f5c = xor i1 %v2_13f58, true
  %v3_13f5c = or i1 %v7_13f58, %v2_13f5c
  br i1 %v3_13f5c, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_13f58
  %v6_13f5c = and i32 %v5_13f5c, 536870912
  %v7_13f5c = icmp ne i32 %v6_13f5c, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_13f58, %bb42
  %v1_13f68 = phi i1 [ %v2_13f58, %dec_label_pc_13f58 ], [ %v7_13f5c, %bb42 ]
  %v2_13f60 = xor i1 %v1_13f68, true
  %v3_13f60 = or i1 %v7_13f58, %v2_13f60
  br i1 %v3_13f60, label %bb44, label %dec_label_pc_13f70

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_13f70

dec_label_pc_13f70:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_13f60, i32 ptrtoint (i32* @global_var_12fc0.651 to i32))
  %v0_13f6c = load i32, i32* @r4, align 4
  %v1_13f6c = add i32 %v0_13f6c, 8
  store i32 %v1_13f6c, i32* @r4, align 4
  %v1_13f70 = inttoptr i32 %v1_13f6c to i32*
  %v2_13f70 = load i32, i32* %v1_13f70, align 4
  %v2_13f74 = icmp eq i32 %v2_13f70, 0
  br i1 %v2_13f74, label %dec_label_pc_13f7c, label %dec_label_pc_13f58

dec_label_pc_13f7c:                               ; preds = %dec_label_pc_13f70, %dec_label_pc_13f50
  %v1_13f80 = call i32 @function_14fe4(i32 %v2_13ee8)
  store i32 %v1_13f80, i32* @r0, align 4
  %v1_13f84 = call i32 @function_13e80(i32 %v1_13f80)
  store i32 %v1_13f84, i32* @r0, align 4
  %v2_13f90 = icmp eq i32 %tmp37, 0
  br i1 %v2_13f90, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_13f7c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_13f7c, %bb45
  %v0_13fa0 = phi i32 [ %tmp37, %dec_label_pc_13f7c ], [ 4096, %bb45 ]
  %v3_13f98 = icmp eq i32 %tmp36, -1
  %v8_13f98 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1dd10.596 to i32), i32* @r2, align 4
  store i32 %v0_13fa0, i32* @global_var_1dd10.596, align 4
  br i1 %v3_13f98, label %dec_label_pc_13fa8, label %dec_label_pc_13fd0

dec_label_pc_13fa8:                               ; preds = %bb46
  %v0_13fa8 = call i32 @function_14534()
  store i32 %v0_13fa8, i32* @r0, align 4
  store i32 %v0_13fa8, i32* @r4, align 4
  %v0_13fb0 = call i32 @function_144dc()
  %v0_13fb4 = load i32, i32* @r4, align 4
  %v9_13fb4 = icmp eq i32 %v0_13fb4, %v0_13fb0
  br i1 %v9_13fb4, label %dec_label_pc_13fbc, label %dec_label_pc_13ff8

dec_label_pc_13fbc:                               ; preds = %dec_label_pc_13fa8
  %v1_13fbc = call i32 @function_14508(i32 %v0_13fb0)
  store i32 %v1_13fbc, i32* @r0, align 4
  store i32 %v1_13fbc, i32* @r4, align 4
  %v0_13fc4 = call i32 @function_144b0()
  %v0_13fc8 = load i32, i32* @r4, align 4
  %v9_13fc8 = icmp eq i32 %v0_13fc8, %v0_13fc4
  br i1 %v9_13fc8, label %dec_label_pc_13fd0, label %dec_label_pc_13ff8

dec_label_pc_13fd0:                               ; preds = %dec_label_pc_13fbc, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_13f98, label %dec_label_pc_14064, label %dec_label_pc_13fdc

dec_label_pc_13fdc:                               ; preds = %dec_label_pc_13fd0
  %v9_13fe0 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_13fe0, label %dec_label_pc_13fe8, label %dec_label_pc_13ff8

dec_label_pc_13fe8:                               ; preds = %dec_label_pc_13fdc
  br label %dec_label_pc_13ff8

dec_label_pc_13ff8:                               ; preds = %dec_label_pc_13fe8, %dec_label_pc_13fdc, %dec_label_pc_13fbc, %dec_label_pc_13fa8
  %v2_14000 = call i32 @function_13e48(i32 0, i32 32768)
  %v2_1400c = call i32 @function_13e48(i32 1, i32 32770)
  %v2_14018 = call i32 @function_13e48(i32 2, i32 32770)
  br label %dec_label_pc_14064

dec_label_pc_14064:                               ; preds = %dec_label_pc_13ff8, %dec_label_pc_13fd0
  %v0_14028 = load i32, i32* %r6.global-to-local, align 4
  %v1_14028 = inttoptr i32 %v0_14028 to i32*
  %v2_14028 = load i32, i32* %v1_14028, align 4
  store i32 %v2_14028, i32* @global_var_1dc60, align 4
  store i32 %arg5, i32* @global_var_1dd14.635, align 4
  %v2_14064 = icmp eq i32 %arg4, 0
  br i1 %v2_14064, label %dec_label_pc_140a0, label %bb47

bb47:                                             ; preds = %dec_label_pc_14064
  br label %dec_label_pc_140a0

dec_label_pc_140a0:                               ; preds = %dec_label_pc_14064, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_140b0 = call i32 @function_12f80()
  %v2_140b8 = inttoptr i32 %v1_140b0 to i32*
  store i32 0, i32* %v2_140b8, align 4
  %v0_140e4 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_140f0 = call i32 @function_13b98(i32 %v0_140e4)
  ret i32 %v1_140f0

; uselistorder directives
  uselistorder i32 %v2_13f70, { 1, 0 }
  uselistorder i32 %v1_13f6c, { 1, 0 }
  uselistorder i1 %v2_13f58, { 1, 0 }
  uselistorder i32 %v4_13f40, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_13b98, { 0, 3, 2, 6, 5, 4, 1 }
  uselistorder i32 (i32, i32)* @function_13e48, { 2, 1, 0 }
  uselistorder i32 32768, { 2, 0, 3, 1 }
  uselistorder i32* @global_var_1dd10.596, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i1 true, { 0, 1, 87, 2, 3, 4, 5, 6, 57, 7, 8, 9, 10, 11, 64, 89, 65, 113, 112, 52, 58, 15, 16, 17, 90, 80, 91, 92, 93, 59, 18, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 19, 20, 110, 111, 79, 55, 13, 14, 78, 12, 114, 32, 31, 66, 73, 67, 74, 62, 72, 63, 77, 115, 21, 116, 117, 22, 23, 24, 118, 81, 82, 25, 26, 119, 83, 84, 27, 28, 120, 85, 86, 29, 30, 61, 121, 122, 75, 123, 53, 68, 33, 54, 34, 35, 36, 69, 37, 60, 38, 39, 40, 41, 42, 43, 124, 125, 126, 127, 70, 128, 129, 130, 131, 132, 133, 134, 135, 48, 136, 49, 50, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 47, 151, 152, 153, 154, 155, 156, 46, 157, 56, 158, 71, 76, 51, 159, 44, 45, 88, 160 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_140a0, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_13f70, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_13f58, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_14128(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14128:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_14128 = load i32, i32* @r4, align 4
  %v6_14128 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_1412c = icmp eq i32* %arg2, null
  %v2_14130 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_1412c, label %dec_label_pc_1419c, label %dec_label_pc_14140

dec_label_pc_14140:                               ; preds = %dec_label_pc_14128
  %v2_14144 = load i32, i32* %arg2, align 4
  %v4_14144 = add i32 %tmp, 4
  store i32 %v4_14144, i32* @r1, align 4
  %v2_14148 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_14148, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_14144, i32* %stack_var_-156, align 4
  %v3_14154 = call i32 @function_12fc0(i32 %v2_14148, i32 %v4_14144, i32 128)
  store i32 %v3_14154, i32* %r0.global-to-local, align 4
  %v0_14158 = load i32, i32* @r4, align 4
  %v1_14158 = add i32 %v0_14158, 132
  %v2_14158 = inttoptr i32 %v1_14158 to i32*
  %v3_14158 = load i32, i32* %v2_14158, align 4
  %v1_1415c = and i32 %v3_14158, 67108864
  %v2_1415c = icmp eq i32 %v1_1415c, 0
  br i1 %v2_1415c, label %dec_label_pc_14170, label %bb

bb:                                               ; preds = %dec_label_pc_14140
  br label %dec_label_pc_1418c

dec_label_pc_14170:                               ; preds = %dec_label_pc_14140
  %v1_14178 = and i32 %v3_14158, 4
  %v2_14178 = icmp eq i32 %v1_14178, 0
  br i1 %v2_14178, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_14170
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_14170, %bb20
  br label %dec_label_pc_1418c

dec_label_pc_1418c:                               ; preds = %bb, %bb21
  %v2_1418c = icmp eq i32 %v0_14158, 0
  %v3_14190 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_14190 = select i1 %v2_1418c, i32 0, i32 %v3_14190
  %v0_1419c.pre = load i32, i32* @r5, align 4
  %v0_141ac.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1419c

dec_label_pc_1419c:                               ; preds = %dec_label_pc_1418c, %dec_label_pc_14128
  %v0_141ac = phi i32 [ %arg1, %dec_label_pc_14128 ], [ %v0_141ac.pre, %dec_label_pc_1418c ]
  %v0_1419c = phi i32 [ %arg3, %dec_label_pc_14128 ], [ %v0_1419c.pre, %dec_label_pc_1418c ]
  %storemerge = phi i32 [ 0, %dec_label_pc_14128 ], [ %.v3_14190, %dec_label_pc_1418c ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_1419c = icmp eq i32 %v0_1419c, 0
  %.v2_14130 = select i1 %v2_1419c, i32 0, i32 %v2_14130
  store i32 %.v2_14130, i32* @r2, align 4
  store i32 %v0_141ac, i32* %r0.global-to-local, align 4
  %v1_141b0 = call i32 @function_14214(i32 %v0_141ac)
  store i32 %v1_141b0, i32* %r0.global-to-local, align 4
  %v0_141b4 = load i32, i32* @r5, align 4
  %v2_141b4 = icmp eq i32 %v0_141b4, 0
  br i1 %v2_141b4, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_1419c
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_1419c, %bb25
  %v0_141c4.pr = phi i32 [ 0, %dec_label_pc_1419c ], [ 1, %bb25 ]
  %v1_141bc = icmp slt i32 %v1_141b0, 0
  br i1 %v1_141bc, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_141f8

thread-pre-split:                                 ; preds = %bb26
  %v2_141c4 = icmp eq i32 %v0_141c4.pr, 0
  store i32 %v1_141b0, i32* @r4, align 4
  br i1 %v2_141c4, label %dec_label_pc_141f8, label %dec_label_pc_141d0

dec_label_pc_141d0:                               ; preds = %thread-pre-split
  %v2_141d0 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_141b4, i32* %r0.global-to-local, align 4
  %v2_141d8 = inttoptr i32 %v0_141b4 to i32*
  store i32 %v2_141d0, i32* %v2_141d8, align 4
  %v3_141d8 = load i32, i32* %r0.global-to-local, align 4
  %v4_141d8 = add i32 %v3_141d8, 4
  store i32 %v4_141d8, i32* @r0, align 4
  %v2_141dc = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_141dc, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_141e4 = call i32 @function_12fc0(i32 %v4_141d8, i32 %v2_141dc, i32 128)
  store i32 %v3_141e4, i32* %r0.global-to-local, align 4
  %v1_141ec = load i32, i32* @r5, align 4
  %v2_141ec = add i32 %v1_141ec, 136
  %v3_141ec = inttoptr i32 %v2_141ec to i32*
  %v1_141f4 = load i32, i32* @r5, align 4
  %v2_141f4 = add i32 %v1_141f4, 132
  %v3_141f4 = inttoptr i32 %v2_141f4 to i32*
  %v0_141f8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_141f8

dec_label_pc_141f8:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_141d0
  %v0_141f8 = phi i32 [ %v1_141b0, %thread-pre-split ], [ %v0_141f8.pre, %dec_label_pc_141d0 ], [ %v1_141b0, %thread-pre-split.thread ]
  store i32 %v0_141f8, i32* %r0.global-to-local, align 4
  store i32 %v3_14128, i32* @r4, align 4
  store i32 %v6_14128, i32* @r5, align 4
  ret i32 %v0_141f8

; uselistorder directives
  uselistorder i32 %v0_141f8, { 1, 0 }
  uselistorder i32 %v0_141b4, { 1, 0, 2 }
  uselistorder i32 %v0_141ac, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_141f8, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_1418c, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_14214(i32 %arg1) local_unnamed_addr {
dec_label_pc_14214:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14214 = load i32, i32* @r4, align 4
  store i32 %v3_14214, i32* %stack_var_-8, align 4
  %v1_14218 = load i32, i32* @r1, align 4
  %v2_14218 = inttoptr i32 %v1_14218 to %sigaction*
  %v3_14218 = load i32, i32* @r2, align 4
  %v4_14218 = inttoptr i32 %v3_14218 to %sigaction*
  %v5_14218 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_14218, %sigaction* %v4_14218)
  store i32 %v5_14218, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14218, -4095
  br i1 %tmp, label %dec_label_pc_14238, label %dec_label_pc_14228

dec_label_pc_14228:                               ; preds = %dec_label_pc_14214
  %v0_14228 = call i32 @function_12f80()
  %v0_1422c = load i32, i32* %r4.global-to-local, align 4
  %v1_1422c = sub i32 0, %v0_1422c
  %v2_14230 = inttoptr i32 %v0_14228 to i32*
  store i32 %v1_1422c, i32* %v2_14230, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14238

dec_label_pc_14238:                               ; preds = %dec_label_pc_14214, %dec_label_pc_14228
  %v0_14238 = phi i32 [ %v5_14218, %dec_label_pc_14214 ], [ -1, %dec_label_pc_14228 ]
  %v2_1423c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1423c, i32* %r4.global-to-local, align 4
  ret i32 %v0_14238

; uselistorder directives
  uselistorder i32 %v5_14218, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14238, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_14240(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_14240:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_14268() local_unnamed_addr {
dec_label_pc_14268:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_14278 = load i32, i32* @r0, align 4
  %v4_14278 = call i32 @fstat(i32 %v0_14278, %stat* %tmp4)
  store i32 %v4_14278, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_14278, -4095
  br i1 %tmp, label %dec_label_pc_1429c, label %dec_label_pc_14288

dec_label_pc_14288:                               ; preds = %dec_label_pc_14268
  %v0_14288 = call i32 @function_12f80()
  %v0_1428c = load i32, i32* %r4.global-to-local, align 4
  %v1_1428c = sub i32 0, %v0_1428c
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14294 = inttoptr i32 %v0_14288 to i32*
  store i32 %v1_1428c, i32* %v2_14294, align 4
  br label %dec_label_pc_142ac

dec_label_pc_1429c:                               ; preds = %dec_label_pc_14268
  %v2_1429c = icmp eq i32 %v4_14278, 0
  store i32 82604, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_1429c, i32 ptrtoint (i32* @global_var_14984.668 to i32))
  br label %dec_label_pc_142ac

dec_label_pc_142ac:                               ; preds = %dec_label_pc_14288, %dec_label_pc_1429c
  %v0_142ac = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_142ac

; uselistorder directives
  uselistorder i32 %v4_14278, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 3, 14, 12, 13, 7, 8, 0, 1, 2, 4, 5, 6, 9, 10, 11 }
  uselistorder label %dec_label_pc_142ac, { 1, 0 }
}

define i32 @function_142b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_142b8:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_142b8 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_142c0 = call i32 @function_1434c()
  store i32 %v0_142c0, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_142c0, 1
  br i1 %tmp8, label %dec_label_pc_14344, label %dec_label_pc_14330.preheader

dec_label_pc_14330.preheader:                     ; preds = %dec_label_pc_142b8
  %v5_142c8 = load i32, i32* @r4, align 4
  %v7_142c8 = add i32 %v5_142c8, %v0_142c0
  store i32 %v7_142c8, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14330

dec_label_pc_142d4:                               ; preds = %dec_label_pc_14330
  %v1_142d4 = add i32 %v2_142e4, 16
  %v2_142d4 = inttoptr i32 %v1_142d4 to i32*
  %v3_142d4 = load i32, i32* %v2_142d4, align 4
  store i32 %v3_142d4, i32* @lr, align 4
  %v2_142d8 = inttoptr i32 %v1_14334 to i32*
  %v3_142d8 = load i32, i32* %v2_142d8, align 4
  store i32 %v3_142d8, i32* %r2.global-to-local, align 4
  %v1_142dc = add i32 %v2_142e4, 18
  %v2_142dc = inttoptr i32 %v1_142dc to i8*
  %v3_142dc = load i8, i8* %v2_142dc, align 1
  %v4_142dc = zext i8 %v3_142dc to i32
  store i32 %v4_142dc, i32* %ip.global-to-local, align 4
  %v3_142e0 = sdiv i32 %v3_142d4, 256
  store i32 %v3_142e0, i32* %r3.global-to-local, align 4
  %v1_142e4 = trunc i32 %v3_142d4 to i8
  %v4_142e4 = inttoptr i32 %v1_14334 to i8*
  store i8 %v1_142e4, i8* %v4_142e4, align 1
  %v0_142e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_142e8 = load i32, i32* @r4, align 4
  %v2_142e8 = add i32 %v1_142e8, 4
  %v3_142e8 = inttoptr i32 %v2_142e8 to i32*
  store i32 %v0_142e8, i32* %v3_142e8, align 4
  %v0_142ec = load i32, i32* %ip.global-to-local, align 4
  %v1_142ec = trunc i32 %v0_142ec to i8
  %v2_142ec = load i32, i32* @r4, align 4
  %v3_142ec = add i32 %v2_142ec, 10
  %v4_142ec = inttoptr i32 %v3_142ec to i8*
  store i8 %v1_142ec, i8* %v4_142ec, align 1
  %v0_142f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_142f0 = trunc i32 %v0_142f0 to i8
  %v2_142f0 = load i32, i32* @r4, align 4
  %v3_142f0 = add i32 %v2_142f0, 9
  %v4_142f0 = inttoptr i32 %v3_142f0 to i8*
  store i8 %v1_142f0, i8* %v4_142f0, align 1
  %v0_142f4 = load i32, i32* @r4, align 4
  %v1_142f4 = add i32 %v0_142f4, 8
  %v2_142f4 = inttoptr i32 %v1_142f4 to i8*
  %v3_142f4 = load i8, i8* %v2_142f4, align 1
  %v4_142f4 = zext i8 %v3_142f4 to i32
  store i32 %v4_142f4, i32* %r2.global-to-local, align 4
  %v0_142f8 = load i32, i32* @r5, align 4
  %v1_142f8 = add i32 %v0_142f8, 1
  %v2_142f8 = inttoptr i32 %v1_142f8 to i8*
  %v3_142f8 = load i8, i8* %v2_142f8, align 1
  %v4_142f8 = zext i8 %v3_142f8 to i32
  store i32 %v4_142f8, i32* %r3.global-to-local, align 4
  %v4_142fc = mul nuw nsw i32 %v4_142f8, 256
  %v5_142fc = or i32 %v4_142fc, %v4_142f4
  %v1_14300 = add nsw i32 %v5_142fc, -19
  store i32 %v1_14300, i32* @r2, align 4
  %v3_14304 = call i32 @function_12fd0(i32 %v1_1433c, i32 %v1_14338, i32 %v1_14300)
  %v0_14308 = load i32, i32* @r4, align 4
  %v1_14308 = add i32 %v0_14308, 8
  %v2_14308 = inttoptr i32 %v1_14308 to i8*
  %v3_14308 = load i8, i8* %v2_14308, align 1
  %v4_14308 = zext i8 %v3_14308 to i32
  store i32 %v4_14308, i32* %r3.global-to-local, align 4
  %v0_1430c = load i32, i32* @r5, align 4
  %v1_1430c = add i32 %v0_1430c, 1
  %v2_1430c = inttoptr i32 %v1_1430c to i8*
  %v3_1430c = load i8, i8* %v2_1430c, align 1
  %v4_1430c = zext i8 %v3_1430c to i32
  store i32 %v0_14308, i32* @r0, align 4
  %v4_14314 = mul nuw nsw i32 %v4_1430c, 256
  %v5_14314 = or i32 %v4_14314, %v4_14308
  store i32 %v5_14314, i32* @r2, align 4
  store i32 %v0_14308, i32* @r1, align 4
  %v3_1431c = call i32 @function_12fd0(i32 %v0_14308, i32 %v0_14308, i32 %v5_14314)
  %v0_14320 = load i32, i32* @r4, align 4
  %v1_14320 = add i32 %v0_14320, 8
  %v2_14320 = inttoptr i32 %v1_14320 to i8*
  %v3_14320 = load i8, i8* %v2_14320, align 1
  %v4_14320 = zext i8 %v3_14320 to i32
  store i32 %v4_14320, i32* %r3.global-to-local, align 4
  %v0_14324 = load i32, i32* @r5, align 4
  %v1_14324 = add i32 %v0_14324, 1
  %v2_14324 = inttoptr i32 %v1_14324 to i8*
  %v3_14324 = load i8, i8* %v2_14324, align 1
  %v4_14324 = zext i8 %v3_14324 to i32
  store i32 %v4_14324, i32* @r2, align 4
  %v4_14328 = mul nuw nsw i32 %v4_14324, 256
  %v5_14328 = or i32 %v4_14328, %v4_14320
  store i32 %v5_14328, i32* %r3.global-to-local, align 4
  %v2_1432c = add i32 %v5_14328, %v0_14320
  store i32 %v2_1432c, i32* @r4, align 4
  %v1_14330.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14330

dec_label_pc_14330:                               ; preds = %dec_label_pc_14330.preheader, %dec_label_pc_142d4
  %v1_14330 = phi i32 [ %v7_142c8, %dec_label_pc_14330.preheader ], [ %v1_14330.pre, %dec_label_pc_142d4 ]
  %v2_142e4 = phi i32 [ %v5_142c8, %dec_label_pc_14330.preheader ], [ %v2_1432c, %dec_label_pc_142d4 ]
  %v3_14330 = icmp ult i32 %v2_142e4, %v1_14330
  %v1_14334 = add i32 %v2_142e4, 8
  store i32 %v1_14334, i32* @r5, align 4
  %v1_14338 = add i32 %v2_142e4, 19
  store i32 %v1_14338, i32* @r1, align 4
  %v1_1433c = add i32 %v2_142e4, 11
  store i32 %v1_1433c, i32* @r0, align 4
  br i1 %v3_14330, label %dec_label_pc_142d4, label %dec_label_pc_14344.loopexit

dec_label_pc_14344.loopexit:                      ; preds = %dec_label_pc_14330
  %v0_14344.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14344

dec_label_pc_14344:                               ; preds = %dec_label_pc_142b8, %dec_label_pc_14344.loopexit
  %v0_14344 = phi i32 [ %v0_14344.pre, %dec_label_pc_14344.loopexit ], [ %v0_142c0, %dec_label_pc_142b8 ]
  store i32 %v6_142b8, i32* @r5, align 4
  ret i32 %v0_14344

; uselistorder directives
  uselistorder i32 %v1_1433c, { 1, 0 }
  uselistorder i32 %v1_14338, { 1, 0 }
  uselistorder i32 %v1_14334, { 2, 1, 0 }
  uselistorder i32 %v2_142e4, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_14308, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_142d4, { 1, 0, 2 }
  uselistorder i32 %v5_142c8, { 1, 0 }
  uselistorder i32 %v0_142c0, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_12fd0, { 6, 5, 7, 8, 4, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_14344, { 1, 0 }
  uselistorder label %dec_label_pc_14330, { 1, 0 }
}

define i32 @function_1434c() local_unnamed_addr {
dec_label_pc_1434c:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_14350 = load i32, i32* @r4, align 4
  %v9_14350 = load i32, i32* @r6, align 4
  %v0_14354 = load i32, i32* @r2, align 4
  %v1_14354 = add i32 %v0_14354, 6
  %v2_1435c = ptrtoint i32* %stack_var_-60 to i32
  %v1_14360 = and i32 %v1_14354, -4
  store i32 %v1_14360, i32* %r3.global-to-local, align 4
  %v2_14364 = sub i32 %v2_1435c, %v1_14360
  %v0_14368 = load i32, i32* @r1, align 4
  store i32 %v0_14368, i32* %r8.global-to-local, align 4
  store i32 %v0_14354, i32* %stack_var_-60, align 4
  store i32 %v2_14364, i32* %sl.global-to-local, align 4
  %v0_14374 = load i32, i32* @r0, align 4
  %v1_14378 = inttoptr i32 %v2_14364 to %linux_dirent64*
  store i32 %v2_14364, i32* %r1.global-to-local, align 4
  %v5_1437c = call i32 @getdents64(i32 %v0_14374, %linux_dirent64* %v1_14378, i32 %v0_14354)
  store i32 %v5_1437c, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_1437c, -4095
  br i1 %tmp, label %dec_label_pc_143a0, label %dec_label_pc_1438c

dec_label_pc_1438c:                               ; preds = %dec_label_pc_1434c
  %v0_1438c = call i32 @function_12f80()
  %v0_14390 = load i32, i32* @r6, align 4
  %v1_14390 = sub i32 0, %v0_14390
  store i32 %v1_14390, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_14398 = inttoptr i32 %v0_1438c to i32*
  store i32 %v1_14390, i32* %v2_14398, align 4
  %v0_143a8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_143a8

dec_label_pc_143a0:                               ; preds = %dec_label_pc_1434c
  br i1 false, label %dec_label_pc_143a8, label %dec_label_pc_143b0

dec_label_pc_143a8:                               ; preds = %dec_label_pc_143a0, %dec_label_pc_1438c
  %v0_143a8 = phi i32 [ -1, %dec_label_pc_143a0 ], [ %v0_143a8.pre, %dec_label_pc_1438c ]
  store i32 %v0_143a8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_144a4

dec_label_pc_143b0:                               ; preds = %dec_label_pc_143a0
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_143b8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_143b8, i32* @r5, align 4
  %v0_143bc = load i32, i32* @sp, align 4
  store i32 %v0_143bc, i32* @r4, align 4
  br label %dec_label_pc_14480

dec_label_pc_143cc:                               ; preds = %dec_label_pc_14480
  %v2_14498 = add i32 %v3_14484, %v0_14498
  %v1_143cc = add i32 %v0_143d0, 17
  %v2_143cc = inttoptr i32 %v1_143cc to i8*
  %v3_143cc = load i8, i8* %v2_143cc, align 1
  %v4_143cc = zext i8 %v3_143cc to i32
  %v2_143d0 = inttoptr i32 %v1_1448c to i8*
  %v3_143d0 = load i8, i8* %v2_143d0, align 1
  %v4_143d0 = zext i8 %v3_143d0 to i32
  %v4_143d4 = mul nuw nsw i32 %v4_143cc, 256
  %v5_143d4 = or i32 %v4_143d0, %v4_143d4
  %v1_143d8 = add nuw nsw i32 %v5_143d4, 3
  %v1_143dc = and i32 %v1_143d8, 131068
  store i32 %v1_143dc, i32* %r3.global-to-local, align 4
  %v2_143e0 = add i32 %v1_143dc, %v2_14420
  store i32 %v2_143e0, i32* %sb.global-to-local, align 4
  %v9_143e4 = icmp eq i32 %v2_143e0, %v2_14498
  %v1_143e8 = and i32 %v1_143d8, 128
  %v2_143ec = icmp eq i32 %v1_143e8, 0
  %v3_143ec = or i1 %v9_143e4, %v2_143ec
  br i1 %v3_143ec, label %dec_label_pc_14420, label %dec_label_pc_143f0

dec_label_pc_143f0:                               ; preds = %dec_label_pc_143cc
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_14400 = call i32 @function_14560(i32 %v0_14374, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_14404 = load i32, i32* @r5, align 4
  %v1_14404 = load i32, i32* %r8.global-to-local, align 4
  %v9_14404 = icmp eq i32 %v0_14404, %v1_14404
  br i1 %v9_14404, label %dec_label_pc_1440c, label %dec_label_pc_144a0

dec_label_pc_1440c:                               ; preds = %dec_label_pc_143f0
  %v0_1440c = call i32 @function_12f80()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_14418 = inttoptr i32 %v0_1440c to i32*
  store i32 22, i32* %v2_14418, align 4
  %v0_144a4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_144a4

dec_label_pc_14420:                               ; preds = %dec_label_pc_143cc
  %v3_143e811 = udiv i32 %v1_143d8, 256
  %v1_14420 = trunc i32 %v3_143e811 to i8
  %v3_14420 = add i32 %v2_14420, 17
  %v4_14420 = inttoptr i32 %v3_14420 to i8*
  store i8 %v1_14420, i8* %v4_14420, align 1
  %v0_14424 = load i32, i32* %r3.global-to-local, align 4
  %v1_14424 = trunc i32 %v0_14424 to i8
  %v2_14424 = load i32, i32* @r5, align 4
  %v3_14424 = add i32 %v2_14424, 16
  %v4_14424 = inttoptr i32 %v3_14424 to i8*
  store i8 %v1_14424, i8* %v4_14424, align 1
  %v0_14428 = load i32, i32* @r4, align 4
  %v1_14428 = add i32 %v0_14428, 8
  %v1_1442c = inttoptr i32 %v1_14428 to i32*
  %v2_1442c = load i32, i32* %v1_1442c, align 4
  %v3_1442c = add i32 %v0_14428, 12
  %v4_1442c = inttoptr i32 %v3_1442c to i32*
  %v5_1442c = load i32, i32* %v4_1442c, align 4
  store i32 %v5_1442c, i32* %r3.global-to-local, align 4
  %v1_14438 = inttoptr i32 %v0_14428 to i32*
  %v2_14438 = load i32, i32* %v1_14438, align 4
  %v3_14438 = add i32 %v0_14428, 4
  %v4_14438 = inttoptr i32 %v3_14438 to i32*
  %v5_14438 = load i32, i32* %v4_14438, align 4
  store i32 %v5_14438, i32* %r3.global-to-local, align 4
  %v0_1443c = load i32, i32* @r5, align 4
  %v1_1443c = inttoptr i32 %v0_1443c to i32*
  store i32 %v2_14438, i32* %v1_1443c, align 4
  %v3_1443c = add i32 %v0_1443c, 4
  %v4_1443c = inttoptr i32 %v3_1443c to i32*
  %v5_1443c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_1443c, i32* %v4_1443c, align 4
  %v0_14440 = load i32, i32* @r4, align 4
  %v1_14440 = add i32 %v0_14440, 8
  %v1_14444 = inttoptr i32 %v1_14440 to i32*
  %v2_14444 = load i32, i32* %v1_14444, align 4
  %v3_14444 = add i32 %v0_14440, 12
  %v4_14444 = inttoptr i32 %v3_14444 to i32*
  %v5_14444 = load i32, i32* %v4_14444, align 4
  store i32 %v5_14444, i32* %r3.global-to-local, align 4
  %v1_14448 = load i32, i32* @r5, align 4
  %v2_14448 = add i32 %v1_14448, 8
  %v3_14448 = inttoptr i32 %v2_14448 to i32*
  store i32 %v2_14444, i32* %v3_14448, align 4
  %v0_1444c = load i32, i32* %r3.global-to-local, align 4
  %v1_1444c = load i32, i32* @r5, align 4
  %v2_1444c = add i32 %v1_1444c, 12
  %v3_1444c = inttoptr i32 %v2_1444c to i32*
  store i32 %v0_1444c, i32* %v3_1444c, align 4
  %v0_14450 = load i32, i32* @r4, align 4
  %v1_14450 = add i32 %v0_14450, 18
  %v2_14450 = inttoptr i32 %v1_14450 to i8*
  %v3_14450 = load i8, i8* %v2_14450, align 1
  %v4_14450 = zext i8 %v3_14450 to i32
  store i32 %v4_14450, i32* %r3.global-to-local, align 4
  %v2_14454 = load i32, i32* @r5, align 4
  %v3_14454 = add i32 %v2_14454, 18
  %v4_14454 = inttoptr i32 %v3_14454 to i8*
  store i8 %v3_14450, i8* %v4_14454, align 1
  %v0_14458 = load i32, i32* @r4, align 4
  %v1_14458 = add i32 %v0_14458, 16
  %v2_14458 = inttoptr i32 %v1_14458 to i8*
  %v3_14458 = load i8, i8* %v2_14458, align 1
  %v4_14458 = zext i8 %v3_14458 to i32
  %v0_1445c = load i32, i32* %r7.global-to-local, align 4
  %v1_1445c = add i32 %v0_1445c, 1
  %v2_1445c = inttoptr i32 %v1_1445c to i8*
  %v3_1445c = load i8, i8* %v2_1445c, align 1
  %v4_1445c = zext i8 %v3_1445c to i32
  store i32 %v4_1445c, i32* %r3.global-to-local, align 4
  %v4_14460 = mul nuw nsw i32 %v4_1445c, 256
  %v5_14460 = or i32 %v4_14460, %v4_14458
  %v1_14464 = add nsw i32 %v5_14460, -19
  store i32 %v1_14464, i32* @r2, align 4
  %v3_14468 = call i32 @function_12fc0(i32 %v1_14490, i32 %v1_14494, i32 %v1_14464)
  %v0_1446c = load i32, i32* @r4, align 4
  %v1_1446c = add i32 %v0_1446c, 16
  %v2_1446c = inttoptr i32 %v1_1446c to i8*
  %v3_1446c = load i8, i8* %v2_1446c, align 1
  %v4_1446c = zext i8 %v3_1446c to i32
  store i32 %v4_1446c, i32* %r3.global-to-local, align 4
  %v0_14470 = load i32, i32* %r7.global-to-local, align 4
  %v1_14470 = add i32 %v0_14470, 1
  %v2_14470 = inttoptr i32 %v1_14470 to i8*
  %v3_14470 = load i8, i8* %v2_14470, align 1
  %v4_14470 = zext i8 %v3_14470 to i32
  %v4_14474 = mul nuw nsw i32 %v4_14470, 256
  %v5_14474 = or i32 %v4_14474, %v4_1446c
  store i32 %v5_14474, i32* %r3.global-to-local, align 4
  %v2_14478 = add i32 %v5_14474, %v0_1446c
  store i32 %v2_14478, i32* @r4, align 4
  %v0_1447c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_1447c, i32* @r5, align 4
  %v1_14480.pre = load i32, i32* @r6, align 4
  %v0_14498.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_14480

dec_label_pc_14480:                               ; preds = %dec_label_pc_143b0, %dec_label_pc_14420
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_143b0 ], [ %v2_1442c, %dec_label_pc_14420 ]
  %v0_14498 = phi i32 [ %v0_143b8, %dec_label_pc_143b0 ], [ %v0_14498.pre, %dec_label_pc_14420 ]
  %v2_14420 = phi i32 [ %v0_143b8, %dec_label_pc_143b0 ], [ %v0_1447c, %dec_label_pc_14420 ]
  %v0_143d0 = phi i32 [ %v0_143bc, %dec_label_pc_143b0 ], [ %v2_14478, %dec_label_pc_14420 ]
  %v1_14480 = phi i32 [ %v5_1437c, %dec_label_pc_143b0 ], [ %v1_14480.pre, %dec_label_pc_14420 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_143b0 ], [ %v5_1442c, %dec_label_pc_14420 ]
  %v0_14480 = load i32, i32* %sl.global-to-local, align 4
  %v2_14480 = add i32 %v0_14480, %v1_14480
  store i32 %v2_14480, i32* %r3.global-to-local, align 4
  %v3_14484 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_14484, i32* @r2, align 4
  %v3_14488 = icmp ult i32 %v0_143d0, %v2_14480
  %v1_1448c = add i32 %v0_143d0, 16
  store i32 %v1_1448c, i32* %r7.global-to-local, align 4
  %v1_14490 = add i32 %v2_14420, 19
  store i32 %v1_14490, i32* @r0, align 4
  %v1_14494 = add i32 %v0_143d0, 19
  store i32 %v1_14494, i32* @r1, align 4
  br i1 %v3_14488, label %dec_label_pc_143cc, label %dec_label_pc_144a0

dec_label_pc_144a0:                               ; preds = %dec_label_pc_14480, %dec_label_pc_143f0
  %v1_144a0 = phi i32 [ %v0_14404, %dec_label_pc_143f0 ], [ %v2_14420, %dec_label_pc_14480 ]
  %v0_144a0 = phi i32 [ %v1_14404, %dec_label_pc_143f0 ], [ %v0_14498, %dec_label_pc_14480 ]
  %v2_144a0 = sub i32 %v1_144a0, %v0_144a0
  store i32 %v2_144a0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_144a4

dec_label_pc_144a4:                               ; preds = %dec_label_pc_1440c, %dec_label_pc_143a8, %dec_label_pc_144a0
  %v0_144a4 = phi i32 [ %v0_144a4.pre, %dec_label_pc_1440c ], [ %v0_143a8, %dec_label_pc_143a8 ], [ %v2_144a0, %dec_label_pc_144a0 ]
  store i32 %v3_14350, i32* @r4, align 4
  store i32 %v9_14350, i32* %r6.global-to-local, align 4
  ret i32 %v0_144a4

; uselistorder directives
  uselistorder i32 %v1_14494, { 1, 0 }
  uselistorder i32 %v1_14490, { 1, 0 }
  uselistorder i32 %v1_1448c, { 1, 0 }
  uselistorder i32 %v3_14484, { 1, 0 }
  uselistorder i32 %v0_143d0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_14420, { 0, 3, 1, 2 }
  uselistorder i32 %v0_14428, { 1, 0, 2, 3 }
  uselistorder i32 %v0_143b8, { 1, 0, 2 }
  uselistorder i32 %v5_1437c, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_12fc0, { 4, 1, 0, 3, 6, 5, 2 }
  uselistorder i32 128, { 11, 12, 34, 13, 35, 25, 16, 17, 18, 26, 2, 27, 19, 20, 21, 22, 23, 28, 3, 29, 4, 14, 15, 30, 31, 6, 0, 1, 7, 8, 9, 32, 5, 33, 24, 10 }
  uselistorder i32* @sp, { 6, 4, 1, 5, 0, 7, 2, 8, 3 }
  uselistorder i32* @r6, { 1, 124, 125, 126, 346, 347, 313, 314, 315, 316, 317, 318, 319, 320, 334, 348, 349, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 10, 11, 86, 87, 12, 13, 21, 14, 15, 16, 17, 18, 19, 20, 88, 89, 22, 90, 91, 92, 93, 94, 95, 96, 102, 97, 98, 99, 100, 101, 287, 288, 289, 290, 0, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 145, 146, 147, 148, 8, 149, 150, 151, 2, 152, 153, 156, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 180, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 194, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 3, 260, 261, 262, 263, 264, 265, 266, 267, 268, 276, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 302, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 339, 336, 337, 338, 340, 341, 9, 342, 343, 344, 345, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 4, 360, 361, 362, 363, 364, 365, 367, 5, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 6, 7, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414 }
  uselistorder label %dec_label_pc_144a4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14480, { 1, 0 }
}

define i32 @function_144b0() local_unnamed_addr {
dec_label_pc_144b0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_144b0 = load i32, i32* @r4, align 4
  store i32 %v3_144b0, i32* %stack_var_-8, align 4
  %v0_144b8 = load i32, i32* @r0, align 4
  store i32 %v0_144b8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_144b8, -4095
  br i1 %tmp, label %dec_label_pc_144d4, label %dec_label_pc_144c4

dec_label_pc_144c4:                               ; preds = %dec_label_pc_144b0
  %v0_144c4 = call i32 @function_12f80()
  %v0_144c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_144c8 = sub i32 0, %v0_144c8
  %v2_144cc = inttoptr i32 %v0_144c4 to i32*
  store i32 %v1_144c8, i32* %v2_144cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_144d8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_144d4

dec_label_pc_144d4:                               ; preds = %dec_label_pc_144b0, %dec_label_pc_144c4
  %v2_144d8 = phi i32 [ %v3_144b0, %dec_label_pc_144b0 ], [ %v2_144d8.pre, %dec_label_pc_144c4 ]
  %v0_144d4 = phi i32 [ %v0_144b8, %dec_label_pc_144b0 ], [ -1, %dec_label_pc_144c4 ]
  store i32 %v2_144d8, i32* @r4, align 4
  ret i32 %v0_144d4

; uselistorder directives
  uselistorder i32 %v0_144b8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_144d4, { 1, 0 }
}

define i32 @function_144dc() local_unnamed_addr {
dec_label_pc_144dc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_144dc = load i32, i32* @r4, align 4
  store i32 %v3_144dc, i32* %stack_var_-8, align 4
  %v0_144e4 = load i32, i32* @r0, align 4
  store i32 %v0_144e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_144e4, -4095
  br i1 %tmp, label %dec_label_pc_14500, label %dec_label_pc_144f0

dec_label_pc_144f0:                               ; preds = %dec_label_pc_144dc
  %v0_144f0 = call i32 @function_12f80()
  %v0_144f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_144f4 = sub i32 0, %v0_144f4
  %v2_144f8 = inttoptr i32 %v0_144f0 to i32*
  store i32 %v1_144f4, i32* %v2_144f8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14504.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14500

dec_label_pc_14500:                               ; preds = %dec_label_pc_144dc, %dec_label_pc_144f0
  %v2_14504 = phi i32 [ %v3_144dc, %dec_label_pc_144dc ], [ %v2_14504.pre, %dec_label_pc_144f0 ]
  %v0_14500 = phi i32 [ %v0_144e4, %dec_label_pc_144dc ], [ -1, %dec_label_pc_144f0 ]
  store i32 %v2_14504, i32* @r4, align 4
  ret i32 %v0_14500

; uselistorder directives
  uselistorder i32 %v0_144e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14500, { 1, 0 }
}

define i32 @function_14508(i32 %arg1) local_unnamed_addr {
dec_label_pc_14508:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14508 = load i32, i32* @r4, align 4
  store i32 %v3_14508, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1452c, label %dec_label_pc_1451c

dec_label_pc_1451c:                               ; preds = %dec_label_pc_14508
  %v0_1451c = call i32 @function_12f80()
  %v0_14520 = load i32, i32* %r4.global-to-local, align 4
  %v1_14520 = sub i32 0, %v0_14520
  %v2_14524 = inttoptr i32 %v0_1451c to i32*
  store i32 %v1_14520, i32* %v2_14524, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14530.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1452c

dec_label_pc_1452c:                               ; preds = %dec_label_pc_14508, %dec_label_pc_1451c
  %v2_14530 = phi i32 [ %v3_14508, %dec_label_pc_14508 ], [ %v2_14530.pre, %dec_label_pc_1451c ]
  %v0_1452c = phi i32 [ %arg1, %dec_label_pc_14508 ], [ -1, %dec_label_pc_1451c ]
  store i32 %v2_14530, i32* %r4.global-to-local, align 4
  ret i32 %v0_1452c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1452c, { 1, 0 }
}

define i32 @function_14534() local_unnamed_addr {
dec_label_pc_14534:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14534 = load i32, i32* @r4, align 4
  store i32 %v3_14534, i32* %stack_var_-8, align 4
  %v0_1453c = load i32, i32* @r0, align 4
  store i32 %v0_1453c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1453c, -4095
  br i1 %tmp, label %dec_label_pc_14558, label %dec_label_pc_14548

dec_label_pc_14548:                               ; preds = %dec_label_pc_14534
  %v0_14548 = call i32 @function_12f80()
  %v0_1454c = load i32, i32* %r4.global-to-local, align 4
  %v1_1454c = sub i32 0, %v0_1454c
  %v2_14550 = inttoptr i32 %v0_14548 to i32*
  store i32 %v1_1454c, i32* %v2_14550, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1455c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14558

dec_label_pc_14558:                               ; preds = %dec_label_pc_14534, %dec_label_pc_14548
  %v2_1455c = phi i32 [ %v3_14534, %dec_label_pc_14534 ], [ %v2_1455c.pre, %dec_label_pc_14548 ]
  %v0_14558 = phi i32 [ %v0_1453c, %dec_label_pc_14534 ], [ -1, %dec_label_pc_14548 ]
  store i32 %v2_1455c, i32* %r4.global-to-local, align 4
  ret i32 %v0_14558

; uselistorder directives
  uselistorder i32 %v0_1453c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14558, { 1, 0 }
}

define i32 @function_14560(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14560:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_145a4, label %dec_label_pc_14590

dec_label_pc_14590:                               ; preds = %dec_label_pc_14560
  %v0_14590 = call i32 @function_12f80()
  %v0_14594 = load i32, i32* %r4.global-to-local, align 4
  %v1_14594 = sub i32 0, %v0_14594
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1459c = inttoptr i32 %v0_14590 to i32*
  store i32 %v1_14594, i32* %v2_1459c, align 4
  %v0_145ac.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_145ac

dec_label_pc_145a4:                               ; preds = %dec_label_pc_14560
  %v2_145a4 = icmp eq i32 %arg1, 0
  br i1 %v2_145a4, label %dec_label_pc_145b8, label %dec_label_pc_145ac

dec_label_pc_145ac:                               ; preds = %dec_label_pc_145a4, %dec_label_pc_14590
  %v0_145ac = phi i32 [ %arg1, %dec_label_pc_145a4 ], [ %v0_145ac.pre, %dec_label_pc_14590 ]
  br label %dec_label_pc_145bc

dec_label_pc_145b8:                               ; preds = %dec_label_pc_145a4
  br label %dec_label_pc_145bc

dec_label_pc_145bc:                               ; preds = %dec_label_pc_145ac, %dec_label_pc_145b8
  %v14_145c0 = phi i32 [ %v0_145ac, %dec_label_pc_145ac ], [ %tmp9, %dec_label_pc_145b8 ]
  ret i32 %v14_145c0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_145bc, { 1, 0 }
}

define i32 @function_145c4(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_145c4:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_145c4 = load i32, i32* @r4, align 4
  store i32 %v3_145c4, i32* %stack_var_-8, align 4
  %v6_145c8 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_145c8, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_145c8, -4095
  br i1 %tmp6, label %dec_label_pc_145e8, label %dec_label_pc_145d8

dec_label_pc_145d8:                               ; preds = %dec_label_pc_145c4
  %v0_145d8 = call i32 @function_12f80()
  %v0_145dc = load i32, i32* %r4.global-to-local, align 4
  %v1_145dc = sub i32 0, %v0_145dc
  %v2_145e0 = inttoptr i32 %v0_145d8 to i32*
  store i32 %v1_145dc, i32* %v2_145e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_145e8

dec_label_pc_145e8:                               ; preds = %dec_label_pc_145c4, %dec_label_pc_145d8
  %v0_145e8 = phi i32 [ %v6_145c8, %dec_label_pc_145c4 ], [ -1, %dec_label_pc_145d8 ]
  %v2_145ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_145ec, i32* %r4.global-to-local, align 4
  ret i32 %v0_145e8

; uselistorder directives
  uselistorder i32 %v6_145c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_145e8, { 1, 0 }
}

define i32 @function_145f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_145f0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_145f0 = load i32, i32* @r4, align 4
  store i32 %v3_145f0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1dd28.670 to i32), i32* %r4.global-to-local, align 4
  %v2_145f8 = load i32, i32* @global_var_1dd28.670, align 4
  %v2_145fc = icmp eq i32 %v2_145f8, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_145fc, label %dec_label_pc_1460c, label %dec_label_pc_14618

dec_label_pc_1460c:                               ; preds = %dec_label_pc_145f0
  %v2_1460c = call i32 @function_15008(i32* null)
  %v1_14610 = icmp slt i32 %v2_1460c, 0
  br i1 %v1_14610, label %dec_label_pc_14638, label %dec_label_pc_14618thread-pre-split

dec_label_pc_14618thread-pre-split:               ; preds = %dec_label_pc_1460c
  %v0_1461c.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_14618.pre = load i32, i32* @global_var_1dd28.670, align 4
  br label %dec_label_pc_14618

dec_label_pc_14618:                               ; preds = %dec_label_pc_14618thread-pre-split, %dec_label_pc_145f0
  %v2_14618 = phi i32 [ %v2_14618.pre, %dec_label_pc_14618thread-pre-split ], [ %v2_145f8, %dec_label_pc_145f0 ]
  %v1_14624 = phi i32 [ %v0_1461c.pr, %dec_label_pc_14618thread-pre-split ], [ %arg1, %dec_label_pc_145f0 ]
  %v2_1461c = icmp eq i32 %v1_14624, 0
  store i32 %v2_14618, i32* %r4.global-to-local, align 4
  br i1 %v2_1461c, label %dec_label_pc_1463c, label %dec_label_pc_1462c

dec_label_pc_1462c:                               ; preds = %dec_label_pc_14618
  %v2_14624 = add i32 %v1_14624, %v2_14618
  %v1_1462c = inttoptr i32 %v2_14624 to i32*
  %v2_1462c = call i32 @function_15008(i32* %v1_1462c)
  %v1_14630 = icmp slt i32 %v2_1462c, 0
  br i1 %v1_14630, label %dec_label_pc_14638, label %dec_label_pc_1462c.dec_label_pc_1463c_crit_edge

dec_label_pc_1462c.dec_label_pc_1463c_crit_edge:  ; preds = %dec_label_pc_1462c
  %v0_1463c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1463c

dec_label_pc_14638:                               ; preds = %dec_label_pc_1462c, %dec_label_pc_1460c
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1463c

dec_label_pc_1463c:                               ; preds = %dec_label_pc_1462c.dec_label_pc_1463c_crit_edge, %dec_label_pc_14618, %dec_label_pc_14638
  %v0_1463c = phi i32 [ %v0_1463c.pre, %dec_label_pc_1462c.dec_label_pc_1463c_crit_edge ], [ %v2_14618, %dec_label_pc_14618 ], [ -1, %dec_label_pc_14638 ]
  %v2_14640 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14640, i32* @r4, align 4
  ret i32 %v0_1463c

; uselistorder directives
  uselistorder i32 %v2_14618, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 7, 48, 49, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 2, 29, 30, 31, 35, 34, 33, 32, 47, 6, 36, 37, 38, 45, 39, 40, 41, 42, 43, 44, 5, 46 }
  uselistorder label %dec_label_pc_1463c, { 2, 0, 1 }
}

define i32 @function_14648(%tms* %arg1) local_unnamed_addr {
dec_label_pc_14648:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14648 = load i32, i32* @r4, align 4
  store i32 %v3_14648, i32* %stack_var_-8, align 4
  %v3_1464c = call i32 @times(%tms* %arg1)
  store i32 %v3_1464c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_1464c, -4095
  br i1 %tmp, label %dec_label_pc_1466c, label %dec_label_pc_1465c

dec_label_pc_1465c:                               ; preds = %dec_label_pc_14648
  %v0_1465c = call i32 @function_12f80()
  %v0_14660 = load i32, i32* %r4.global-to-local, align 4
  %v1_14660 = sub i32 0, %v0_14660
  %v2_14664 = inttoptr i32 %v0_1465c to i32*
  store i32 %v1_14660, i32* %v2_14664, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1466c

dec_label_pc_1466c:                               ; preds = %dec_label_pc_14648, %dec_label_pc_1465c
  %v0_1466c = phi i32 [ %v3_1464c, %dec_label_pc_14648 ], [ -1, %dec_label_pc_1465c ]
  %v2_14670 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14670, i32* %r4.global-to-local, align 4
  ret i32 %v0_1466c

; uselistorder directives
  uselistorder i32 %v3_1464c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1466c, { 1, 0 }
}

define i32 @function_14674(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14674:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_14690 = inttoptr i32 %arg2 to i8*
  %v3_14690 = call i32 @function_12fe0(i8* %v2_14690, i32 0)
  %v1_14694 = add i32 %tmp, 1
  %v2_14694 = inttoptr i32 %v1_14694 to i8*
  %v3_14694 = load i8, i8* %v2_14694, align 1
  %v4_14694 = zext i8 %v3_14694 to i32
  %v1_14698 = add i32 %tmp, 5
  %v2_14698 = inttoptr i32 %v1_14698 to i8*
  %v3_14698 = load i8, i8* %v2_14698, align 1
  %v4_14698 = zext i8 %v3_14698 to i32
  %v2_1469c = load i8, i8* %arg1, align 1
  %v3_1469c = zext i8 %v2_1469c to i32
  %v1_146a0 = add i32 %tmp, 4
  %v2_146a0 = inttoptr i32 %v1_146a0 to i8*
  %v3_146a0 = load i8, i8* %v2_146a0, align 1
  %v4_146a0 = zext i8 %v3_146a0 to i32
  %v1_146a4 = add i32 %tmp, 2
  %v2_146a4 = inttoptr i32 %v1_146a4 to i8*
  %v3_146a4 = load i8, i8* %v2_146a4, align 1
  %v4_146a4 = zext i8 %v3_146a4 to i32
  %v1_146a8 = add i32 %tmp, 6
  %v2_146a8 = inttoptr i32 %v1_146a8 to i8*
  %v3_146a8 = load i8, i8* %v2_146a8, align 1
  %v4_146a8 = zext i8 %v3_146a8 to i32
  %v1_146ac = add i32 %tmp, 3
  %v2_146ac = inttoptr i32 %v1_146ac to i8*
  %v3_146ac = load i8, i8* %v2_146ac, align 1
  %v4_146ac = zext i8 %v3_146ac to i32
  %v4_146b0 = mul nuw nsw i32 %v4_14694, 256
  %v5_146b0 = or i32 %v3_1469c, %v4_146b0
  %v4_146b4 = mul nuw nsw i32 %v4_14698, 256
  %v5_146b4 = or i32 %v4_146a0, %v4_146b4
  %v1_146b8 = add i32 %tmp, 7
  %v2_146b8 = inttoptr i32 %v1_146b8 to i8*
  %v3_146b8 = load i8, i8* %v2_146b8, align 1
  %v4_146b8 = zext i8 %v3_146b8 to i32
  %v4_146bc = mul nuw nsw i32 %v4_146a4, 65536
  %v5_146bc = or i32 %v4_146bc, %v5_146b0
  %v4_146c0 = mul nuw nsw i32 %v4_146a8, 65536
  %v5_146c0 = or i32 %v4_146c0, %v5_146b4
  %v4_146c4 = mul nuw i32 %v4_146ac, 16777216
  %v5_146c4 = or i32 %v4_146c4, %v5_146bc
  %v4_146c8 = mul nuw i32 %v4_146b8, 16777216
  %v5_146c8 = or i32 %v4_146c8, %v5_146c0
  store i32 %v5_146c8, i32* %r3.global-to-local, align 4
  %v0_146cc = load i32, i32* %r7.global-to-local, align 4
  %v1_146cc = inttoptr i32 %v0_146cc to i32*
  store i32 %v5_146c4, i32* %v1_146cc, align 4
  %v3_146cc = add i32 %v0_146cc, 4
  %v4_146cc = inttoptr i32 %v3_146cc to i32*
  %v5_146cc = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_146cc, i32* %v4_146cc, align 4
  %v0_146d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_146d0 = add i32 %v0_146d0, 89
  %v2_146d0 = inttoptr i32 %v1_146d0 to i8*
  %v3_146d0 = load i8, i8* %v2_146d0, align 1
  %v4_146d0 = zext i8 %v3_146d0 to i32
  %v1_146d4 = add i32 %v0_146d0, 93
  %v2_146d4 = inttoptr i32 %v1_146d4 to i8*
  %v3_146d4 = load i8, i8* %v2_146d4, align 1
  %v4_146d4 = zext i8 %v3_146d4 to i32
  %v1_146d8 = add i32 %v0_146d0, 88
  %v2_146d8 = inttoptr i32 %v1_146d8 to i8*
  %v3_146d8 = load i8, i8* %v2_146d8, align 1
  %v4_146d8 = zext i8 %v3_146d8 to i32
  %v1_146dc = add i32 %v0_146d0, 92
  %v2_146dc = inttoptr i32 %v1_146dc to i8*
  %v3_146dc = load i8, i8* %v2_146dc, align 1
  %v4_146dc = zext i8 %v3_146dc to i32
  store i32 %v4_146dc, i32* %r3.global-to-local, align 4
  %v1_146e0 = add i32 %v0_146d0, 94
  %v2_146e0 = inttoptr i32 %v1_146e0 to i8*
  %v3_146e0 = load i8, i8* %v2_146e0, align 1
  %v4_146e0 = zext i8 %v3_146e0 to i32
  %v1_146e4 = add i32 %v0_146d0, 90
  %v2_146e4 = inttoptr i32 %v1_146e4 to i8*
  %v3_146e4 = load i8, i8* %v2_146e4, align 1
  %v4_146e4 = zext i8 %v3_146e4 to i32
  %v1_146e8 = add i32 %v0_146d0, 91
  %v2_146e8 = inttoptr i32 %v1_146e8 to i8*
  %v3_146e8 = load i8, i8* %v2_146e8, align 1
  %v4_146e8 = zext i8 %v3_146e8 to i32
  %v4_146ec = mul nuw nsw i32 %v4_146d0, 256
  %v5_146ec = or i32 %v4_146d8, %v4_146ec
  %v4_146f0 = mul nuw nsw i32 %v4_146d4, 256
  %v5_146f0 = or i32 %v4_146dc, %v4_146f0
  store i32 %v5_146f0, i32* %r3.global-to-local, align 4
  %v1_146f4 = add i32 %v0_146d0, 95
  %v2_146f4 = inttoptr i32 %v1_146f4 to i8*
  %v3_146f4 = load i8, i8* %v2_146f4, align 1
  %v4_146f4 = zext i8 %v3_146f4 to i32
  %v4_146f8 = mul nuw nsw i32 %v4_146e0, 65536
  %v5_146f8 = or i32 %v4_146f8, %v5_146f0
  store i32 %v5_146f8, i32* %r3.global-to-local, align 4
  %v4_146fc = mul nuw nsw i32 %v4_146e4, 65536
  %v5_146fc = or i32 %v4_146fc, %v5_146ec
  %v4_14700 = mul nuw i32 %v4_146e8, 16777216
  %v5_14700 = or i32 %v4_14700, %v5_146fc
  %v4_14704 = mul nuw i32 %v4_146f4, 16777216
  %v5_14704 = or i32 %v4_14704, %v5_146f8
  store i32 %v5_14704, i32* %r6.global-to-local, align 4
  %v1_14708 = load i32, i32* %r7.global-to-local, align 4
  %v2_14708 = add i32 %v1_14708, 88
  %v3_14708 = inttoptr i32 %v2_14708 to i32*
  store i32 %v5_14700, i32* %v3_14708, align 4
  %v0_1470c = load i32, i32* %r6.global-to-local, align 4
  %v1_1470c = load i32, i32* %r7.global-to-local, align 4
  %v2_1470c = add i32 %v1_1470c, 92
  %v3_1470c = inttoptr i32 %v2_1470c to i32*
  store i32 %v0_1470c, i32* %v3_1470c, align 4
  %v0_14710 = load i32, i32* %r4.global-to-local, align 4
  %v1_14710 = add i32 %v0_14710, 13
  %v2_14710 = inttoptr i32 %v1_14710 to i8*
  %v3_14710 = load i8, i8* %v2_14710, align 1
  %v4_14710 = zext i8 %v3_14710 to i32
  %v1_14714 = add i32 %v0_14710, 12
  %v2_14714 = inttoptr i32 %v1_14714 to i8*
  %v3_14714 = load i8, i8* %v2_14714, align 1
  %v4_14714 = zext i8 %v3_14714 to i32
  store i32 %v4_14714, i32* %r3.global-to-local, align 4
  %v1_14718 = add i32 %v0_14710, 14
  %v2_14718 = inttoptr i32 %v1_14718 to i8*
  %v3_14718 = load i8, i8* %v2_14718, align 1
  %v4_14718 = zext i8 %v3_14718 to i32
  %v4_1471c = mul nuw nsw i32 %v4_14710, 256
  %v5_1471c = or i32 %v4_14714, %v4_1471c
  store i32 %v5_1471c, i32* %r3.global-to-local, align 4
  %v1_14720 = add i32 %v0_14710, 15
  %v2_14720 = inttoptr i32 %v1_14720 to i8*
  %v3_14720 = load i8, i8* %v2_14720, align 1
  %v4_14720 = zext i8 %v3_14720 to i32
  %v4_14724 = mul nuw nsw i32 %v4_14718, 65536
  %v5_14724 = or i32 %v4_14724, %v5_1471c
  %v4_14728 = mul nuw i32 %v4_14720, 16777216
  %v5_14728 = or i32 %v5_14724, %v4_14728
  store i32 %v5_14728, i32* %r3.global-to-local, align 4
  %v1_1472c = load i32, i32* %r7.global-to-local, align 4
  %v2_1472c = add i32 %v1_1472c, 12
  %v3_1472c = inttoptr i32 %v2_1472c to i32*
  store i32 %v5_14728, i32* %v3_1472c, align 4
  %v0_14730 = load i32, i32* %r4.global-to-local, align 4
  %v1_14730 = add i32 %v0_14730, 17
  %v2_14730 = inttoptr i32 %v1_14730 to i8*
  %v3_14730 = load i8, i8* %v2_14730, align 1
  %v4_14730 = zext i8 %v3_14730 to i32
  %v1_14734 = add i32 %v0_14730, 16
  %v2_14734 = inttoptr i32 %v1_14734 to i8*
  %v3_14734 = load i8, i8* %v2_14734, align 1
  %v4_14734 = zext i8 %v3_14734 to i32
  store i32 %v4_14734, i32* %r3.global-to-local, align 4
  %v1_14738 = add i32 %v0_14730, 18
  %v2_14738 = inttoptr i32 %v1_14738 to i8*
  %v3_14738 = load i8, i8* %v2_14738, align 1
  %v4_14738 = zext i8 %v3_14738 to i32
  %v4_1473c = mul nuw nsw i32 %v4_14730, 256
  %v5_1473c = or i32 %v4_14734, %v4_1473c
  store i32 %v5_1473c, i32* %r3.global-to-local, align 4
  %v1_14740 = add i32 %v0_14730, 19
  %v2_14740 = inttoptr i32 %v1_14740 to i8*
  %v3_14740 = load i8, i8* %v2_14740, align 1
  %v4_14740 = zext i8 %v3_14740 to i32
  %v4_14744 = mul nuw nsw i32 %v4_14738, 65536
  %v5_14744 = or i32 %v4_14744, %v5_1473c
  %v4_14748 = mul nuw i32 %v4_14740, 16777216
  %v5_14748 = or i32 %v5_14744, %v4_14748
  store i32 %v5_14748, i32* %r3.global-to-local, align 4
  %v1_1474c = load i32, i32* %r7.global-to-local, align 4
  %v2_1474c = add i32 %v1_1474c, 16
  %v3_1474c = inttoptr i32 %v2_1474c to i32*
  store i32 %v5_14748, i32* %v3_1474c, align 4
  %v0_14750 = load i32, i32* %r4.global-to-local, align 4
  %v1_14750 = add i32 %v0_14750, 21
  %v2_14750 = inttoptr i32 %v1_14750 to i8*
  %v3_14750 = load i8, i8* %v2_14750, align 1
  %v4_14750 = zext i8 %v3_14750 to i32
  %v1_14754 = add i32 %v0_14750, 20
  %v2_14754 = inttoptr i32 %v1_14754 to i8*
  %v3_14754 = load i8, i8* %v2_14754, align 1
  %v4_14754 = zext i8 %v3_14754 to i32
  store i32 %v4_14754, i32* %r3.global-to-local, align 4
  %v1_14758 = add i32 %v0_14750, 22
  %v2_14758 = inttoptr i32 %v1_14758 to i8*
  %v3_14758 = load i8, i8* %v2_14758, align 1
  %v4_14758 = zext i8 %v3_14758 to i32
  %v4_1475c = mul nuw nsw i32 %v4_14750, 256
  %v5_1475c = or i32 %v4_14754, %v4_1475c
  store i32 %v5_1475c, i32* %r3.global-to-local, align 4
  %v1_14760 = add i32 %v0_14750, 23
  %v2_14760 = inttoptr i32 %v1_14760 to i8*
  %v3_14760 = load i8, i8* %v2_14760, align 1
  %v4_14760 = zext i8 %v3_14760 to i32
  %v4_14764 = mul nuw nsw i32 %v4_14758, 65536
  %v5_14764 = or i32 %v4_14764, %v5_1475c
  %v4_14768 = mul nuw i32 %v4_14760, 16777216
  %v5_14768 = or i32 %v5_14764, %v4_14768
  store i32 %v5_14768, i32* %r3.global-to-local, align 4
  %v1_1476c = load i32, i32* %r7.global-to-local, align 4
  %v2_1476c = add i32 %v1_1476c, 20
  %v3_1476c = inttoptr i32 %v2_1476c to i32*
  store i32 %v5_14768, i32* %v3_1476c, align 4
  %v0_14770 = load i32, i32* %r4.global-to-local, align 4
  %v1_14770 = add i32 %v0_14770, 25
  %v2_14770 = inttoptr i32 %v1_14770 to i8*
  %v3_14770 = load i8, i8* %v2_14770, align 1
  %v4_14770 = zext i8 %v3_14770 to i32
  %v1_14774 = add i32 %v0_14770, 24
  %v2_14774 = inttoptr i32 %v1_14774 to i8*
  %v3_14774 = load i8, i8* %v2_14774, align 1
  %v4_14774 = zext i8 %v3_14774 to i32
  store i32 %v4_14774, i32* %r3.global-to-local, align 4
  %v1_14778 = add i32 %v0_14770, 26
  %v2_14778 = inttoptr i32 %v1_14778 to i8*
  %v3_14778 = load i8, i8* %v2_14778, align 1
  %v4_14778 = zext i8 %v3_14778 to i32
  %v4_1477c = mul nuw nsw i32 %v4_14770, 256
  %v5_1477c = or i32 %v4_14774, %v4_1477c
  store i32 %v5_1477c, i32* %r3.global-to-local, align 4
  %v1_14780 = add i32 %v0_14770, 27
  %v2_14780 = inttoptr i32 %v1_14780 to i8*
  %v3_14780 = load i8, i8* %v2_14780, align 1
  %v4_14780 = zext i8 %v3_14780 to i32
  %v4_14784 = mul nuw nsw i32 %v4_14778, 65536
  %v5_14784 = or i32 %v4_14784, %v5_1477c
  %v4_14788 = mul nuw i32 %v4_14780, 16777216
  %v5_14788 = or i32 %v5_14784, %v4_14788
  store i32 %v5_14788, i32* %r3.global-to-local, align 4
  %v1_1478c = load i32, i32* %r7.global-to-local, align 4
  %v2_1478c = add i32 %v1_1478c, 24
  %v3_1478c = inttoptr i32 %v2_1478c to i32*
  store i32 %v5_14788, i32* %v3_1478c, align 4
  %v0_14790 = load i32, i32* %r4.global-to-local, align 4
  %v1_14790 = add i32 %v0_14790, 29
  %v2_14790 = inttoptr i32 %v1_14790 to i8*
  %v3_14790 = load i8, i8* %v2_14790, align 1
  %v4_14790 = zext i8 %v3_14790 to i32
  %v1_14794 = add i32 %v0_14790, 28
  %v2_14794 = inttoptr i32 %v1_14794 to i8*
  %v3_14794 = load i8, i8* %v2_14794, align 1
  %v4_14794 = zext i8 %v3_14794 to i32
  store i32 %v4_14794, i32* %r3.global-to-local, align 4
  %v1_14798 = add i32 %v0_14790, 30
  %v2_14798 = inttoptr i32 %v1_14798 to i8*
  %v3_14798 = load i8, i8* %v2_14798, align 1
  %v4_14798 = zext i8 %v3_14798 to i32
  %v4_1479c = mul nuw nsw i32 %v4_14790, 256
  %v5_1479c = or i32 %v4_14794, %v4_1479c
  store i32 %v5_1479c, i32* %r3.global-to-local, align 4
  %v1_147a0 = add i32 %v0_14790, 31
  %v2_147a0 = inttoptr i32 %v1_147a0 to i8*
  %v3_147a0 = load i8, i8* %v2_147a0, align 1
  %v4_147a0 = zext i8 %v3_147a0 to i32
  %v4_147a4 = mul nuw nsw i32 %v4_14798, 65536
  %v5_147a4 = or i32 %v4_147a4, %v5_1479c
  %v4_147a8 = mul nuw i32 %v4_147a0, 16777216
  %v5_147a8 = or i32 %v5_147a4, %v4_147a8
  store i32 %v5_147a8, i32* %r3.global-to-local, align 4
  %v1_147ac = load i32, i32* %r7.global-to-local, align 4
  %v2_147ac = add i32 %v1_147ac, 28
  %v3_147ac = inttoptr i32 %v2_147ac to i32*
  store i32 %v5_147a8, i32* %v3_147ac, align 4
  %v0_147b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_147b0 = add i32 %v0_147b0, 33
  %v2_147b0 = inttoptr i32 %v1_147b0 to i8*
  %v3_147b0 = load i8, i8* %v2_147b0, align 1
  %v4_147b0 = zext i8 %v3_147b0 to i32
  %v1_147b4 = add i32 %v0_147b0, 37
  %v2_147b4 = inttoptr i32 %v1_147b4 to i8*
  %v3_147b4 = load i8, i8* %v2_147b4, align 1
  %v4_147b4 = zext i8 %v3_147b4 to i32
  %v1_147b8 = add i32 %v0_147b0, 32
  %v2_147b8 = inttoptr i32 %v1_147b8 to i8*
  %v3_147b8 = load i8, i8* %v2_147b8, align 1
  %v4_147b8 = zext i8 %v3_147b8 to i32
  %v1_147bc = add i32 %v0_147b0, 36
  %v2_147bc = inttoptr i32 %v1_147bc to i8*
  %v3_147bc = load i8, i8* %v2_147bc, align 1
  %v4_147bc = zext i8 %v3_147bc to i32
  store i32 %v4_147bc, i32* %r3.global-to-local, align 4
  %v1_147c0 = add i32 %v0_147b0, 34
  %v2_147c0 = inttoptr i32 %v1_147c0 to i8*
  %v3_147c0 = load i8, i8* %v2_147c0, align 1
  %v4_147c0 = zext i8 %v3_147c0 to i32
  %v1_147c4 = add i32 %v0_147b0, 38
  %v2_147c4 = inttoptr i32 %v1_147c4 to i8*
  %v3_147c4 = load i8, i8* %v2_147c4, align 1
  %v4_147c4 = zext i8 %v3_147c4 to i32
  %v1_147c8 = add i32 %v0_147b0, 35
  %v2_147c8 = inttoptr i32 %v1_147c8 to i8*
  %v3_147c8 = load i8, i8* %v2_147c8, align 1
  %v4_147c8 = zext i8 %v3_147c8 to i32
  %v4_147cc = mul nuw nsw i32 %v4_147b0, 256
  %v5_147cc = or i32 %v4_147b8, %v4_147cc
  %v4_147d0 = mul nuw nsw i32 %v4_147b4, 256
  %v5_147d0 = or i32 %v4_147bc, %v4_147d0
  store i32 %v5_147d0, i32* %r3.global-to-local, align 4
  %v1_147d4 = add i32 %v0_147b0, 39
  %v2_147d4 = inttoptr i32 %v1_147d4 to i8*
  %v3_147d4 = load i8, i8* %v2_147d4, align 1
  %v4_147d4 = zext i8 %v3_147d4 to i32
  %v4_147d8 = mul nuw nsw i32 %v4_147c0, 65536
  %v5_147d8 = or i32 %v4_147d8, %v5_147cc
  %v4_147dc = mul nuw nsw i32 %v4_147c4, 65536
  %v5_147dc = or i32 %v4_147dc, %v5_147d0
  %v4_147e0 = mul nuw i32 %v4_147c8, 16777216
  %v5_147e0 = or i32 %v5_147d8, %v4_147e0
  %v4_147e4 = mul nuw i32 %v4_147d4, 16777216
  %v5_147e4 = or i32 %v5_147dc, %v4_147e4
  store i32 %v5_147e4, i32* %r3.global-to-local, align 4
  %v1_147f8 = load i32, i32* %r7.global-to-local, align 4
  %v2_147f8 = add i32 %v1_147f8, 32
  %v3_147f8 = inttoptr i32 %v2_147f8 to i32*
  store i32 %v5_147e0, i32* %v3_147f8, align 4
  %v0_147fc = load i32, i32* %r3.global-to-local, align 4
  %v1_147fc = load i32, i32* %r7.global-to-local, align 4
  %v2_147fc = add i32 %v1_147fc, 36
  %v3_147fc = inttoptr i32 %v2_147fc to i32*
  store i32 %v0_147fc, i32* %v3_147fc, align 4
  %v0_14800 = load i32, i32* %r4.global-to-local, align 4
  %v1_14800 = add i32 %v0_14800, 45
  %v2_14800 = inttoptr i32 %v1_14800 to i8*
  %v3_14800 = load i8, i8* %v2_14800, align 1
  %v4_14800 = zext i8 %v3_14800 to i32
  %v1_14804 = add i32 %v0_14800, 49
  %v2_14804 = inttoptr i32 %v1_14804 to i8*
  %v3_14804 = load i8, i8* %v2_14804, align 1
  %v4_14804 = zext i8 %v3_14804 to i32
  %v1_14808 = add i32 %v0_14800, 44
  %v2_14808 = inttoptr i32 %v1_14808 to i8*
  %v3_14808 = load i8, i8* %v2_14808, align 1
  %v4_14808 = zext i8 %v3_14808 to i32
  %v1_1480c = add i32 %v0_14800, 48
  %v2_1480c = inttoptr i32 %v1_1480c to i8*
  %v3_1480c = load i8, i8* %v2_1480c, align 1
  %v4_1480c = zext i8 %v3_1480c to i32
  store i32 %v4_1480c, i32* %r3.global-to-local, align 4
  %v1_14810 = add i32 %v0_14800, 46
  %v2_14810 = inttoptr i32 %v1_14810 to i8*
  %v3_14810 = load i8, i8* %v2_14810, align 1
  %v4_14810 = zext i8 %v3_14810 to i32
  %v1_14814 = add i32 %v0_14800, 50
  %v2_14814 = inttoptr i32 %v1_14814 to i8*
  %v3_14814 = load i8, i8* %v2_14814, align 1
  %v4_14814 = zext i8 %v3_14814 to i32
  %v1_14818 = add i32 %v0_14800, 47
  %v2_14818 = inttoptr i32 %v1_14818 to i8*
  %v3_14818 = load i8, i8* %v2_14818, align 1
  %v4_14818 = zext i8 %v3_14818 to i32
  %v4_1481c = mul nuw nsw i32 %v4_14800, 256
  %v5_1481c = or i32 %v4_14808, %v4_1481c
  %v4_14820 = mul nuw nsw i32 %v4_14804, 256
  %v5_14820 = or i32 %v4_1480c, %v4_14820
  store i32 %v5_14820, i32* %r3.global-to-local, align 4
  %v1_14824 = add i32 %v0_14800, 51
  %v2_14824 = inttoptr i32 %v1_14824 to i8*
  %v3_14824 = load i8, i8* %v2_14824, align 1
  %v4_14824 = zext i8 %v3_14824 to i32
  %v4_14828 = mul nuw nsw i32 %v4_14810, 65536
  %v5_14828 = or i32 %v4_14828, %v5_1481c
  %v4_1482c = mul nuw nsw i32 %v4_14814, 65536
  %v5_1482c = or i32 %v4_1482c, %v5_14820
  %v4_14830 = mul nuw i32 %v4_14818, 16777216
  %v5_14830 = or i32 %v5_14828, %v4_14830
  %v4_14834 = mul nuw i32 %v4_14824, 16777216
  %v5_14834 = or i32 %v5_1482c, %v4_14834
  store i32 %v5_14834, i32* %r3.global-to-local, align 4
  %v1_14848 = load i32, i32* %r7.global-to-local, align 4
  %v2_14848 = add i32 %v1_14848, 44
  %v3_14848 = inttoptr i32 %v2_14848 to i32*
  store i32 %v5_14830, i32* %v3_14848, align 4
  %v0_1484c = load i32, i32* %r3.global-to-local, align 4
  %v1_1484c = load i32, i32* %r7.global-to-local, align 4
  %v2_1484c = add i32 %v1_1484c, 48
  %v3_1484c = inttoptr i32 %v2_1484c to i32*
  store i32 %v0_1484c, i32* %v3_1484c, align 4
  %v0_14850 = load i32, i32* %r4.global-to-local, align 4
  %v1_14850 = add i32 %v0_14850, 53
  %v2_14850 = inttoptr i32 %v1_14850 to i8*
  %v3_14850 = load i8, i8* %v2_14850, align 1
  %v4_14850 = zext i8 %v3_14850 to i32
  %v1_14854 = add i32 %v0_14850, 52
  %v2_14854 = inttoptr i32 %v1_14854 to i8*
  %v3_14854 = load i8, i8* %v2_14854, align 1
  %v4_14854 = zext i8 %v3_14854 to i32
  store i32 %v4_14854, i32* %r3.global-to-local, align 4
  %v1_14858 = add i32 %v0_14850, 54
  %v2_14858 = inttoptr i32 %v1_14858 to i8*
  %v3_14858 = load i8, i8* %v2_14858, align 1
  %v4_14858 = zext i8 %v3_14858 to i32
  %v4_1485c = mul nuw nsw i32 %v4_14850, 256
  %v5_1485c = or i32 %v4_14854, %v4_1485c
  store i32 %v5_1485c, i32* %r3.global-to-local, align 4
  %v1_14860 = add i32 %v0_14850, 55
  %v2_14860 = inttoptr i32 %v1_14860 to i8*
  %v3_14860 = load i8, i8* %v2_14860, align 1
  %v4_14860 = zext i8 %v3_14860 to i32
  %v4_14864 = mul nuw nsw i32 %v4_14858, 65536
  %v5_14864 = or i32 %v4_14864, %v5_1485c
  %v4_14868 = mul nuw i32 %v4_14860, 16777216
  %v5_14868 = or i32 %v5_14864, %v4_14868
  store i32 %v5_14868, i32* %r3.global-to-local, align 4
  %v1_1486c = load i32, i32* %r7.global-to-local, align 4
  %v2_1486c = add i32 %v1_1486c, 52
  %v3_1486c = inttoptr i32 %v2_1486c to i32*
  store i32 %v5_14868, i32* %v3_1486c, align 4
  %v0_14870 = load i32, i32* %r4.global-to-local, align 4
  %v1_14870 = add i32 %v0_14870, 57
  %v2_14870 = inttoptr i32 %v1_14870 to i8*
  %v3_14870 = load i8, i8* %v2_14870, align 1
  %v4_14870 = zext i8 %v3_14870 to i32
  %v1_14874 = add i32 %v0_14870, 56
  %v2_14874 = inttoptr i32 %v1_14874 to i8*
  %v3_14874 = load i8, i8* %v2_14874, align 1
  %v4_14874 = zext i8 %v3_14874 to i32
  %v1_14878 = add i32 %v0_14870, 60
  %v2_14878 = inttoptr i32 %v1_14878 to i8*
  %v3_14878 = load i8, i8* %v2_14878, align 1
  %v4_14878 = zext i8 %v3_14878 to i32
  store i32 %v4_14878, i32* %r3.global-to-local, align 4
  %v1_1487c = add i32 %v0_14870, 61
  %v2_1487c = inttoptr i32 %v1_1487c to i8*
  %v3_1487c = load i8, i8* %v2_1487c, align 1
  %v4_1487c = zext i8 %v3_1487c to i32
  %v1_14880 = add i32 %v0_14870, 58
  %v2_14880 = inttoptr i32 %v1_14880 to i8*
  %v3_14880 = load i8, i8* %v2_14880, align 1
  %v4_14880 = zext i8 %v3_14880 to i32
  %v1_14884 = add i32 %v0_14870, 62
  %v2_14884 = inttoptr i32 %v1_14884 to i8*
  %v3_14884 = load i8, i8* %v2_14884, align 1
  %v4_14884 = zext i8 %v3_14884 to i32
  %v1_14888 = add i32 %v0_14870, 59
  %v2_14888 = inttoptr i32 %v1_14888 to i8*
  %v3_14888 = load i8, i8* %v2_14888, align 1
  %v4_14888 = zext i8 %v3_14888 to i32
  %v4_1488c = mul nuw nsw i32 %v4_14870, 256
  %v5_1488c = or i32 %v4_14874, %v4_1488c
  %v4_14890 = mul nuw nsw i32 %v4_1487c, 256
  %v5_14890 = or i32 %v4_14890, %v4_14878
  store i32 %v5_14890, i32* %r3.global-to-local, align 4
  %v1_14894 = add i32 %v0_14870, 63
  %v2_14894 = inttoptr i32 %v1_14894 to i8*
  %v3_14894 = load i8, i8* %v2_14894, align 1
  %v4_14894 = zext i8 %v3_14894 to i32
  %v4_14898 = mul nuw nsw i32 %v4_14880, 65536
  %v5_14898 = or i32 %v4_14898, %v5_1488c
  %v4_1489c = mul nuw nsw i32 %v4_14884, 65536
  %v5_1489c = or i32 %v4_1489c, %v5_14890
  %v4_148a0 = mul nuw i32 %v4_14894, 16777216
  %v5_148a0 = or i32 %v5_1489c, %v4_148a0
  %v4_148a4 = mul nuw i32 %v4_14888, 16777216
  %v5_148a4 = or i32 %v5_14898, %v4_148a4
  store i32 %v5_148a0, i32* %r3.global-to-local, align 4
  %v1_148b4 = load i32, i32* %r7.global-to-local, align 4
  %v2_148b4 = add i32 %v1_148b4, 56
  %v3_148b4 = inttoptr i32 %v2_148b4 to i32*
  store i32 %v5_148a4, i32* %v3_148b4, align 4
  %v0_148b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_148b8 = load i32, i32* %r7.global-to-local, align 4
  %v2_148b8 = add i32 %v1_148b8, 60
  %v3_148b8 = inttoptr i32 %v2_148b8 to i32*
  store i32 %v0_148b8, i32* %v3_148b8, align 4
  %v0_148bc = load i32, i32* %r4.global-to-local, align 4
  %v1_148bc = add i32 %v0_148bc, 65
  %v2_148bc = inttoptr i32 %v1_148bc to i8*
  %v3_148bc = load i8, i8* %v2_148bc, align 1
  %v4_148bc = zext i8 %v3_148bc to i32
  %v1_148c0 = add i32 %v0_148bc, 64
  %v2_148c0 = inttoptr i32 %v1_148c0 to i8*
  %v3_148c0 = load i8, i8* %v2_148c0, align 1
  %v4_148c0 = zext i8 %v3_148c0 to i32
  store i32 %v4_148c0, i32* %r3.global-to-local, align 4
  %v1_148c4 = add i32 %v0_148bc, 66
  %v2_148c4 = inttoptr i32 %v1_148c4 to i8*
  %v3_148c4 = load i8, i8* %v2_148c4, align 1
  %v4_148c4 = zext i8 %v3_148c4 to i32
  %v4_148c8 = mul nuw nsw i32 %v4_148bc, 256
  %v5_148c8 = or i32 %v4_148c0, %v4_148c8
  store i32 %v5_148c8, i32* %r3.global-to-local, align 4
  %v1_148cc = add i32 %v0_148bc, 67
  %v2_148cc = inttoptr i32 %v1_148cc to i8*
  %v3_148cc = load i8, i8* %v2_148cc, align 1
  %v4_148cc = zext i8 %v3_148cc to i32
  %v4_148d0 = mul nuw nsw i32 %v4_148c4, 65536
  %v5_148d0 = or i32 %v4_148d0, %v5_148c8
  %v4_148d4 = mul nuw i32 %v4_148cc, 16777216
  %v5_148d4 = or i32 %v5_148d0, %v4_148d4
  store i32 %v5_148d4, i32* %r3.global-to-local, align 4
  %v1_148d8 = load i32, i32* %r7.global-to-local, align 4
  %v2_148d8 = add i32 %v1_148d8, 64
  %v3_148d8 = inttoptr i32 %v2_148d8 to i32*
  store i32 %v5_148d4, i32* %v3_148d8, align 4
  %v0_148dc = load i32, i32* %r4.global-to-local, align 4
  %v1_148dc = add i32 %v0_148dc, 73
  %v2_148dc = inttoptr i32 %v1_148dc to i8*
  %v3_148dc = load i8, i8* %v2_148dc, align 1
  %v4_148dc = zext i8 %v3_148dc to i32
  %v1_148e0 = add i32 %v0_148dc, 72
  %v2_148e0 = inttoptr i32 %v1_148e0 to i8*
  %v3_148e0 = load i8, i8* %v2_148e0, align 1
  %v4_148e0 = zext i8 %v3_148e0 to i32
  store i32 %v4_148e0, i32* %r3.global-to-local, align 4
  %v1_148e4 = add i32 %v0_148dc, 74
  %v2_148e4 = inttoptr i32 %v1_148e4 to i8*
  %v3_148e4 = load i8, i8* %v2_148e4, align 1
  %v4_148e4 = zext i8 %v3_148e4 to i32
  %v4_148e8 = mul nuw nsw i32 %v4_148dc, 256
  %v5_148e8 = or i32 %v4_148e0, %v4_148e8
  store i32 %v5_148e8, i32* %r3.global-to-local, align 4
  %v1_148ec = add i32 %v0_148dc, 75
  %v2_148ec = inttoptr i32 %v1_148ec to i8*
  %v3_148ec = load i8, i8* %v2_148ec, align 1
  %v4_148ec = zext i8 %v3_148ec to i32
  %v4_148f0 = mul nuw nsw i32 %v4_148e4, 65536
  %v5_148f0 = or i32 %v4_148f0, %v5_148e8
  %v4_148f4 = mul nuw i32 %v4_148ec, 16777216
  %v5_148f4 = or i32 %v5_148f0, %v4_148f4
  store i32 %v5_148f4, i32* %r3.global-to-local, align 4
  %v1_148f8 = load i32, i32* %r7.global-to-local, align 4
  %v2_148f8 = add i32 %v1_148f8, 72
  %v3_148f8 = inttoptr i32 %v2_148f8 to i32*
  store i32 %v5_148f4, i32* %v3_148f8, align 4
  %v0_148fc = load i32, i32* %r4.global-to-local, align 4
  %v1_148fc = add i32 %v0_148fc, 81
  %v2_148fc = inttoptr i32 %v1_148fc to i8*
  %v3_148fc = load i8, i8* %v2_148fc, align 1
  %v4_148fc = zext i8 %v3_148fc to i32
  %v1_14900 = add i32 %v0_148fc, 80
  %v2_14900 = inttoptr i32 %v1_14900 to i8*
  %v3_14900 = load i8, i8* %v2_14900, align 1
  %v4_14900 = zext i8 %v3_14900 to i32
  store i32 %v4_14900, i32* %r3.global-to-local, align 4
  %v1_14904 = add i32 %v0_148fc, 82
  %v2_14904 = inttoptr i32 %v1_14904 to i8*
  %v3_14904 = load i8, i8* %v2_14904, align 1
  %v4_14904 = zext i8 %v3_14904 to i32
  %v4_14908 = mul nuw nsw i32 %v4_148fc, 256
  %v5_14908 = or i32 %v4_14900, %v4_14908
  store i32 %v5_14908, i32* %r3.global-to-local, align 4
  %v1_1490c = add i32 %v0_148fc, 83
  %v2_1490c = inttoptr i32 %v1_1490c to i8*
  %v3_1490c = load i8, i8* %v2_1490c, align 1
  %v4_1490c = zext i8 %v3_1490c to i32
  %v4_14910 = mul nuw nsw i32 %v4_14904, 65536
  %v5_14910 = or i32 %v4_14910, %v5_14908
  %v4_14914 = mul nuw i32 %v4_1490c, 16777216
  %v5_14914 = or i32 %v5_14910, %v4_14914
  store i32 %v5_14914, i32* %r3.global-to-local, align 4
  %v1_14918 = load i32, i32* %r7.global-to-local, align 4
  %v2_14918 = add i32 %v1_14918, 80
  %v3_14918 = inttoptr i32 %v2_14918 to i32*
  store i32 %v5_14914, i32* %v3_14918, align 4
  %v0_1491c = load i32, i32* %r4.global-to-local, align 4
  %v1_1491c = add i32 %v0_1491c, 69
  %v2_1491c = inttoptr i32 %v1_1491c to i8*
  %v3_1491c = load i8, i8* %v2_1491c, align 1
  %v4_1491c = zext i8 %v3_1491c to i32
  %v1_14920 = add i32 %v0_1491c, 68
  %v2_14920 = inttoptr i32 %v1_14920 to i8*
  %v3_14920 = load i8, i8* %v2_14920, align 1
  %v4_14920 = zext i8 %v3_14920 to i32
  store i32 %v4_14920, i32* %r3.global-to-local, align 4
  %v1_14924 = add i32 %v0_1491c, 70
  %v2_14924 = inttoptr i32 %v1_14924 to i8*
  %v3_14924 = load i8, i8* %v2_14924, align 1
  %v4_14924 = zext i8 %v3_14924 to i32
  %v4_14928 = mul nuw nsw i32 %v4_1491c, 256
  %v5_14928 = or i32 %v4_14920, %v4_14928
  store i32 %v5_14928, i32* %r3.global-to-local, align 4
  %v1_1492c = add i32 %v0_1491c, 71
  %v2_1492c = inttoptr i32 %v1_1492c to i8*
  %v3_1492c = load i8, i8* %v2_1492c, align 1
  %v4_1492c = zext i8 %v3_1492c to i32
  %v4_14930 = mul nuw nsw i32 %v4_14924, 65536
  %v5_14930 = or i32 %v4_14930, %v5_14928
  %v4_14934 = mul nuw i32 %v4_1492c, 16777216
  %v5_14934 = or i32 %v5_14930, %v4_14934
  store i32 %v5_14934, i32* %r3.global-to-local, align 4
  %v1_14938 = load i32, i32* %r7.global-to-local, align 4
  %v2_14938 = add i32 %v1_14938, 68
  %v3_14938 = inttoptr i32 %v2_14938 to i32*
  store i32 %v5_14934, i32* %v3_14938, align 4
  %v0_1493c = load i32, i32* %r4.global-to-local, align 4
  %v1_1493c = add i32 %v0_1493c, 77
  %v2_1493c = inttoptr i32 %v1_1493c to i8*
  %v3_1493c = load i8, i8* %v2_1493c, align 1
  %v4_1493c = zext i8 %v3_1493c to i32
  %v1_14940 = add i32 %v0_1493c, 76
  %v2_14940 = inttoptr i32 %v1_14940 to i8*
  %v3_14940 = load i8, i8* %v2_14940, align 1
  %v4_14940 = zext i8 %v3_14940 to i32
  store i32 %v4_14940, i32* %r3.global-to-local, align 4
  %v1_14944 = add i32 %v0_1493c, 78
  %v2_14944 = inttoptr i32 %v1_14944 to i8*
  %v3_14944 = load i8, i8* %v2_14944, align 1
  %v4_14944 = zext i8 %v3_14944 to i32
  %v4_14948 = mul nuw nsw i32 %v4_1493c, 256
  %v5_14948 = or i32 %v4_14940, %v4_14948
  store i32 %v5_14948, i32* %r3.global-to-local, align 4
  %v1_1494c = add i32 %v0_1493c, 79
  %v2_1494c = inttoptr i32 %v1_1494c to i8*
  %v3_1494c = load i8, i8* %v2_1494c, align 1
  %v4_1494c = zext i8 %v3_1494c to i32
  %v4_14950 = mul nuw nsw i32 %v4_14944, 65536
  %v5_14950 = or i32 %v4_14950, %v5_14948
  %v4_14954 = mul nuw i32 %v4_1494c, 16777216
  %v5_14954 = or i32 %v5_14950, %v4_14954
  store i32 %v5_14954, i32* %r3.global-to-local, align 4
  %v1_14958 = load i32, i32* %r7.global-to-local, align 4
  %v2_14958 = add i32 %v1_14958, 76
  %v3_14958 = inttoptr i32 %v2_14958 to i32*
  store i32 %v5_14954, i32* %v3_14958, align 4
  %v0_1495c = load i32, i32* %r4.global-to-local, align 4
  %v1_1495c = add i32 %v0_1495c, 85
  %v2_1495c = inttoptr i32 %v1_1495c to i8*
  %v3_1495c = load i8, i8* %v2_1495c, align 1
  %v4_1495c = zext i8 %v3_1495c to i32
  %v1_14960 = add i32 %v0_1495c, 84
  %v2_14960 = inttoptr i32 %v1_14960 to i8*
  %v3_14960 = load i8, i8* %v2_14960, align 1
  %v4_14960 = zext i8 %v3_14960 to i32
  store i32 %v4_14960, i32* %r3.global-to-local, align 4
  %v1_14964 = add i32 %v0_1495c, 86
  %v2_14964 = inttoptr i32 %v1_14964 to i8*
  %v3_14964 = load i8, i8* %v2_14964, align 1
  %v4_14964 = zext i8 %v3_14964 to i32
  %v4_14968 = mul nuw nsw i32 %v4_1495c, 256
  %v5_14968 = or i32 %v4_14960, %v4_14968
  store i32 %v5_14968, i32* %r3.global-to-local, align 4
  %v1_1496c = add i32 %v0_1495c, 87
  %v2_1496c = inttoptr i32 %v1_1496c to i8*
  %v3_1496c = load i8, i8* %v2_1496c, align 1
  %v4_1496c = zext i8 %v3_1496c to i32
  %v4_14970 = mul nuw nsw i32 %v4_14964, 65536
  %v5_14970 = or i32 %v4_14970, %v5_14968
  %v4_14974 = mul nuw i32 %v4_1496c, 16777216
  %v5_14974 = or i32 %v5_14970, %v4_14974
  store i32 %v5_14974, i32* %r3.global-to-local, align 4
  %v1_14978 = load i32, i32* %r7.global-to-local, align 4
  %v2_14978 = add i32 %v1_14978, 84
  %v3_14978 = inttoptr i32 %v2_14978 to i32*
  store i32 %v5_14974, i32* %v3_14978, align 4
  ret i32 %v4_1487c

; uselistorder directives
  uselistorder i32 %v4_1487c, { 1, 0 }
  uselistorder i32 %v0_14870, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_14800, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_147b0, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_146d0, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 79, { 2, 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 80, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 74, { 2, 0, 1 }
  uselistorder i32 59, { 4, 0, 1, 2, 5, 3 }
  uselistorder i32 62, { 6, 5, 0, 1, 2, 3, 4 }
  uselistorder i32 58, { 3, 4, 5, 6, 7, 0, 8, 1, 9, 2, 10 }
  uselistorder i32 61, { 4, 0, 1, 2, 3 }
  uselistorder i32 57, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32 55, { 5, 10, 0, 6, 4, 1, 7, 2, 8, 3, 9 }
  uselistorder i32 54, { 4, 3, 0, 5, 1, 6, 2, 7 }
  uselistorder i32 53, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 51, { 3, 1, 4, 0, 5, 2, 6 }
  uselistorder i32 47, { 5, 6, 7, 8, 9, 1, 10, 2, 11, 0, 12, 13, 3, 14, 4 }
  uselistorder i32 50, { 2, 0, 3, 1, 4 }
  uselistorder i32 46, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32 49, { 2, 0, 3, 1, 4 }
  uselistorder i32 45, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32 39, { 5, 6, 0, 1, 7, 2, 8, 3, 9, 4 }
  uselistorder i32 38, { 4, 3, 0, 5, 1, 6, 2, 7, 8, 9, 10, 11 }
  uselistorder i32 37, { 3, 0, 4, 1, 5, 2, 6, 7, 8, 9 }
  uselistorder i32 33, { 6, 0, 7, 1, 8, 2, 9, 3, 10, 11, 4, 5, 12 }
  uselistorder i32 30, { 5, 1, 6, 2, 7, 3, 8, 0, 9, 4, 10 }
  uselistorder i32 29, { 8, 1, 0, 2, 9, 3, 10, 4, 11, 12, 13, 6, 5, 7 }
  uselistorder i32 26, { 5, 0, 1, 2, 6, 3, 7, 4, 8, 9 }
  uselistorder i32 25, { 7, 14, 15, 1, 0, 2, 8, 3, 9, 4, 10, 6, 11, 12, 13, 5, 16, 17 }
  uselistorder i32 23, { 4, 1, 5, 0, 6, 7, 8, 2, 3, 9 }
  uselistorder i32 22, { 5, 0, 7, 1, 2, 3, 6, 4 }
  uselistorder i32 21, { 4, 1, 6, 0, 5, 7, 8, 3, 9, 2, 10 }
  uselistorder i32 19, { 10, 12, 13, 14, 5, 1, 6, 2, 7, 3, 8, 4, 0, 11, 15, 9, 16 }
  uselistorder i32 18, { 7, 9, 10, 11, 3, 0, 6, 4, 8, 12, 5, 13, 1, 14, 2, 15 }
  uselistorder i32 17, { 13, 16, 0, 3, 31, 32, 4, 33, 34, 5, 1, 14, 6, 15, 7, 17, 8, 18, 9, 19, 10, 20, 11, 21, 22, 2, 23, 24, 25, 12, 26, 27, 28, 29, 30 }
  uselistorder i32 6, { 35, 40, 13, 14, 82, 15, 37, 2, 16, 36, 0, 38, 17, 39, 3, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 4, 29, 41, 42, 43, 5, 44, 45, 46, 47, 6, 48, 49, 50, 51, 7, 52, 8, 53, 54, 30, 55, 9, 56, 57, 58, 31, 59, 10, 60, 61, 62, 32, 63, 64, 65, 66, 67, 33, 68, 11, 69, 70, 71, 72, 73, 74, 34, 75, 12, 76, 1, 77, 78, 79, 80, 81 }
}

define i32 @function_14984(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14984:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14984 = load i32, i32* @r4, align 4
  store i32 %v3_14984, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_1499c = inttoptr i32 %arg2 to i8*
  %v3_1499c = call i32 @function_12fe0(i8* %v2_1499c, i32 0)
  store i32 %v3_1499c, i32* %r0.global-to-local, align 4
  %v0_149a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_149a0 = inttoptr i32 %v0_149a0 to i32*
  %v2_149a0 = load i32, i32* %v1_149a0, align 4
  store i32 %v2_149a0, i32* %r3.global-to-local, align 4
  %v1_149a4 = add i32 %v0_149a0, 4
  %v2_149a4 = inttoptr i32 %v1_149a4 to i32*
  %v3_149a4 = load i32, i32* %v2_149a4, align 4
  store i32 %v3_149a4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_149ac = load i32, i32* %r6.global-to-local, align 4
  %v1_149ac = inttoptr i32 %v0_149ac to i32*
  store i32 %v2_149a0, i32* %v1_149ac, align 4
  %v3_149ac = add i32 %v0_149ac, 4
  %v4_149ac = inttoptr i32 %v3_149ac to i32*
  %v5_149ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_149ac, i32* %v4_149ac, align 4
  %v0_149b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_149b0 = load i32, i32* %r6.global-to-local, align 4
  %v2_149b0 = add i32 %v1_149b0, 12
  %v3_149b0 = inttoptr i32 %v2_149b0 to i32*
  store i32 %v0_149b0, i32* %v3_149b0, align 4
  %v0_149b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_149b4 = add i32 %v0_149b4, 9
  %v2_149b4 = inttoptr i32 %v1_149b4 to i8*
  %v3_149b4 = load i8, i8* %v2_149b4, align 1
  %v4_149b4 = zext i8 %v3_149b4 to i32
  store i32 %v4_149b4, i32* %r2.global-to-local, align 4
  %v1_149b8 = add i32 %v0_149b4, 8
  %v2_149b8 = inttoptr i32 %v1_149b8 to i8*
  %v3_149b8 = load i8, i8* %v2_149b8, align 1
  %v4_149b8 = zext i8 %v3_149b8 to i32
  %v4_149bc = mul nuw nsw i32 %v4_149b4, 256
  %v5_149bc = or i32 %v4_149b8, %v4_149bc
  store i32 %v5_149bc, i32* %r3.global-to-local, align 4
  %v1_149c0 = load i32, i32* %r6.global-to-local, align 4
  %v2_149c0 = add i32 %v1_149c0, 16
  %v3_149c0 = inttoptr i32 %v2_149c0 to i32*
  store i32 %v5_149bc, i32* %v3_149c0, align 4
  %v0_149c4 = load i32, i32* %r5.global-to-local, align 4
  %v1_149c4 = add i32 %v0_149c4, 11
  %v2_149c4 = inttoptr i32 %v1_149c4 to i8*
  %v3_149c4 = load i8, i8* %v2_149c4, align 1
  %v4_149c4 = zext i8 %v3_149c4 to i32
  store i32 %v4_149c4, i32* %r2.global-to-local, align 4
  %v1_149c8 = add i32 %v0_149c4, 10
  %v2_149c8 = inttoptr i32 %v1_149c8 to i8*
  %v3_149c8 = load i8, i8* %v2_149c8, align 1
  %v4_149c8 = zext i8 %v3_149c8 to i32
  %v4_149cc = mul nuw nsw i32 %v4_149c4, 256
  %v5_149cc = or i32 %v4_149c8, %v4_149cc
  store i32 %v5_149cc, i32* %r3.global-to-local, align 4
  %v1_149d0 = load i32, i32* %r6.global-to-local, align 4
  %v2_149d0 = add i32 %v1_149d0, 20
  %v3_149d0 = inttoptr i32 %v2_149d0 to i32*
  store i32 %v5_149cc, i32* %v3_149d0, align 4
  %v0_149d4 = load i32, i32* %r5.global-to-local, align 4
  %v1_149d4 = add i32 %v0_149d4, 13
  %v2_149d4 = inttoptr i32 %v1_149d4 to i8*
  %v3_149d4 = load i8, i8* %v2_149d4, align 1
  %v4_149d4 = zext i8 %v3_149d4 to i32
  store i32 %v4_149d4, i32* %r2.global-to-local, align 4
  %v1_149d8 = add i32 %v0_149d4, 12
  %v2_149d8 = inttoptr i32 %v1_149d8 to i8*
  %v3_149d8 = load i8, i8* %v2_149d8, align 1
  %v4_149d8 = zext i8 %v3_149d8 to i32
  %v4_149dc = mul nuw nsw i32 %v4_149d4, 256
  %v5_149dc = or i32 %v4_149d8, %v4_149dc
  store i32 %v5_149dc, i32* %r3.global-to-local, align 4
  %v1_149e0 = load i32, i32* %r6.global-to-local, align 4
  %v2_149e0 = add i32 %v1_149e0, 24
  %v3_149e0 = inttoptr i32 %v2_149e0 to i32*
  store i32 %v5_149dc, i32* %v3_149e0, align 4
  %v0_149e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_149e4 = add i32 %v0_149e4, 20
  %v2_149e4 = inttoptr i32 %v1_149e4 to i32*
  %v3_149e4 = load i32, i32* %v2_149e4, align 4
  store i32 %v3_149e4, i32* %r3.global-to-local, align 4
  %v1_149e8 = add i32 %v0_149e4, 14
  %v2_149e8 = inttoptr i32 %v1_149e8 to i8*
  %v3_149e8 = load i8, i8* %v2_149e8, align 1
  %v4_149e8 = zext i8 %v3_149e8 to i32
  store i32 %v4_149e8, i32* %r0.global-to-local, align 4
  %v1_149ec = add i32 %v0_149e4, 15
  %v2_149ec = inttoptr i32 %v1_149ec to i8*
  %v3_149ec = load i8, i8* %v2_149ec, align 1
  %v4_149ec = zext i8 %v3_149ec to i32
  store i32 %v4_149ec, i32* %ip.global-to-local, align 4
  %v1_149f0 = add i32 %v0_149e4, 16
  %v2_149f0 = inttoptr i32 %v1_149f0 to i32*
  %v3_149f0 = load i32, i32* %v2_149f0, align 4
  store i32 %v3_149f0, i32* %r1.global-to-local, align 4
  %v1_149f4 = load i32, i32* %r6.global-to-local, align 4
  %v2_149f4 = add i32 %v1_149f4, 44
  %v3_149f4 = inttoptr i32 %v2_149f4 to i32*
  store i32 %v3_149e4, i32* %v3_149f4, align 4
  %v0_149f8 = load i32, i32* %r5.global-to-local, align 4
  %v1_149f8 = add i32 %v0_149f8, 24
  %v2_149f8 = inttoptr i32 %v1_149f8 to i32*
  %v3_149f8 = load i32, i32* %v2_149f8, align 4
  store i32 %v3_149f8, i32* %r3.global-to-local, align 4
  %v1_149fc = load i32, i32* %r6.global-to-local, align 4
  %v2_149fc = add i32 %v1_149fc, 48
  %v3_149fc = inttoptr i32 %v2_149fc to i32*
  store i32 %v3_149f8, i32* %v3_149fc, align 4
  %v0_14a00 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a00 = add i32 %v0_14a00, 28
  %v2_14a00 = inttoptr i32 %v1_14a00 to i32*
  %v3_14a00 = load i32, i32* %v2_14a00, align 4
  store i32 %v3_14a00, i32* %r3.global-to-local, align 4
  %v1_14a04 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a04 = add i32 %v1_14a04, 52
  %v3_14a04 = inttoptr i32 %v2_14a04 to i32*
  store i32 %v3_14a00, i32* %v3_14a04, align 4
  %v0_14a08 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a08 = add i32 %v0_14a08, 32
  %v2_14a08 = inttoptr i32 %v1_14a08 to i32*
  %v3_14a08 = load i32, i32* %v2_14a08, align 4
  store i32 %v3_14a08, i32* %r3.global-to-local, align 4
  %v1_14a0c = load i32, i32* %r6.global-to-local, align 4
  %v2_14a0c = add i32 %v1_14a0c, 56
  %v3_14a0c = inttoptr i32 %v2_14a0c to i32*
  store i32 %v3_14a08, i32* %v3_14a0c, align 4
  %v0_14a10 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a10 = add i32 %v0_14a10, 40
  %v2_14a10 = inttoptr i32 %v1_14a10 to i32*
  %v3_14a10 = load i32, i32* %v2_14a10, align 4
  store i32 %v3_14a10, i32* %r3.global-to-local, align 4
  %v1_14a14 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a14 = add i32 %v1_14a14, 64
  %v3_14a14 = inttoptr i32 %v2_14a14 to i32*
  store i32 %v3_14a10, i32* %v3_14a14, align 4
  %v0_14a18 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a18 = add i32 %v0_14a18, 48
  %v2_14a18 = inttoptr i32 %v1_14a18 to i32*
  %v3_14a18 = load i32, i32* %v2_14a18, align 4
  store i32 %v3_14a18, i32* %r3.global-to-local, align 4
  %v1_14a1c = load i32, i32* %r6.global-to-local, align 4
  %v2_14a1c = add i32 %v1_14a1c, 72
  %v3_14a1c = inttoptr i32 %v2_14a1c to i32*
  store i32 %v3_14a18, i32* %v3_14a1c, align 4
  %v0_14a20 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a20 = add i32 %v0_14a20, 36
  %v2_14a20 = inttoptr i32 %v1_14a20 to i32*
  %v3_14a20 = load i32, i32* %v2_14a20, align 4
  store i32 %v3_14a20, i32* %r3.global-to-local, align 4
  %v1_14a24 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a24 = add i32 %v1_14a24, 60
  %v3_14a24 = inttoptr i32 %v2_14a24 to i32*
  store i32 %v3_14a20, i32* %v3_14a24, align 4
  %v0_14a28 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a28 = add i32 %v0_14a28, 44
  %v2_14a28 = inttoptr i32 %v1_14a28 to i32*
  %v3_14a28 = load i32, i32* %v2_14a28, align 4
  store i32 %v3_14a28, i32* %r3.global-to-local, align 4
  %v0_14a2c = load i32, i32* %r0.global-to-local, align 4
  %v1_14a2c = load i32, i32* %ip.global-to-local, align 4
  %v4_14a2c = mul i32 %v1_14a2c, 256
  %v5_14a2c = or i32 %v4_14a2c, %v0_14a2c
  store i32 %v5_14a2c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_14a34 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a34 = add i32 %v1_14a34, 28
  %v3_14a34 = inttoptr i32 %v2_14a34 to i32*
  store i32 %v5_14a2c, i32* %v3_14a34, align 4
  %v0_14a38 = load i32, i32* %r1.global-to-local, align 4
  %v1_14a38 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a38 = add i32 %v1_14a38, 32
  %v3_14a38 = inttoptr i32 %v2_14a38 to i32*
  store i32 %v0_14a38, i32* %v3_14a38, align 4
  %v0_14a3c = load i32, i32* %r2.global-to-local, align 4
  %v1_14a3c = load i32, i32* %r6.global-to-local, align 4
  %v2_14a3c = add i32 %v1_14a3c, 36
  %v3_14a3c = inttoptr i32 %v2_14a3c to i32*
  store i32 %v0_14a3c, i32* %v3_14a3c, align 4
  %v0_14a40 = load i32, i32* %r3.global-to-local, align 4
  %v1_14a40 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a40 = add i32 %v1_14a40, 68
  %v3_14a40 = inttoptr i32 %v2_14a40 to i32*
  store i32 %v0_14a40, i32* %v3_14a40, align 4
  %v0_14a44 = load i32, i32* %r5.global-to-local, align 4
  %v1_14a44 = add i32 %v0_14a44, 52
  %v2_14a44 = inttoptr i32 %v1_14a44 to i32*
  %v3_14a44 = load i32, i32* %v2_14a44, align 4
  store i32 %v3_14a44, i32* %r3.global-to-local, align 4
  %v1_14a48 = load i32, i32* %r6.global-to-local, align 4
  %v2_14a48 = add i32 %v1_14a48, 76
  %v3_14a48 = inttoptr i32 %v2_14a48 to i32*
  store i32 %v3_14a44, i32* %v3_14a48, align 4
  %v2_14a4c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14a4c, i32* %r4.global-to-local, align 4
  ret i32 %v5_14a2c

; uselistorder directives
  uselistorder i32 %v0_149e4, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 6, 4, 5, 1, 2, 3, 0, 7 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 14, 12, 13, 1, 5, 44, 6, 15, 16, 0, 7, 17, 18, 19, 8, 20, 21, 22, 9, 23, 24, 25, 10, 26, 27, 28, 11, 29, 30, 31, 2, 32, 33, 34, 35, 36, 3, 37, 38, 39, 40, 41, 4, 42, 43 }
  uselistorder i32 56, { 8, 5, 6, 7, 9, 0, 10, 1, 11, 2, 12, 3, 4 }
  uselistorder i32 52, { 4, 5, 2, 3, 6, 7, 0, 8, 1, 9 }
  uselistorder i32 15, { 10, 8, 7, 3, 0, 9, 4, 5, 1, 11, 12, 6, 13, 14, 15, 16, 2, 17 }
  uselistorder i32 14, { 17, 14, 25, 6, 0, 7, 1, 8, 2, 9, 3, 13, 10, 15, 11, 16, 12, 18, 19, 4, 20, 21, 22, 23, 5, 24 }
  uselistorder i32 13, { 12, 6, 5, 7, 8, 9, 10, 4, 11, 0, 13, 14, 15, 16, 17, 1, 18, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 3, 38, 39 }
  uselistorder i32 9, { 45, 46, 47, 8, 5, 63, 9, 34, 6, 35, 11, 33, 29, 12, 32, 10, 3, 36, 30, 37, 2, 31, 13, 38, 14, 39, 15, 40, 16, 41, 17, 42, 18, 43, 44, 19, 20, 21, 22, 0, 23, 24, 1, 25, 26, 27, 59, 48, 49, 28, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 4, 62, 64, 65, 7, 66 }
  uselistorder i32 (i8*, i32)* @function_12fe0, { 2, 0, 8, 7, 1, 3, 4, 5, 6 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_14a50() local_unnamed_addr {
dec_label_pc_14a50:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_14a50 = load i32, i32* @r1, align 4
  %v1_14a50 = load i32, i32* @r0, align 4
  %v2_14a50 = sub i32 %v0_14a50, %v1_14a50
  %v3_14a50 = icmp ult i32 %v0_14a50, %v1_14a50
  %v4_14a50 = xor i32 %v1_14a50, %v0_14a50
  %v5_14a50 = xor i32 %v2_14a50, %v0_14a50
  %v6_14a50 = and i32 %v5_14a50, %v4_14a50
  %v7_14a50 = icmp slt i32 %v6_14a50, 0
  store i1 %v7_14a50, i1* %cpsr_v.global-to-local, align 1
  %v8_14a50 = icmp slt i32 %v2_14a50, 0
  store i1 %v8_14a50, i1* %cpsr_n.global-to-local, align 1
  %v9_14a50 = icmp eq i32 %v0_14a50, %v1_14a50
  store i1 %v9_14a50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14a50, label %dec_label_pc_14c9c, label %dec_label_pc_14a58

dec_label_pc_14a58:                               ; preds = %dec_label_pc_14a50
  br i1 %v9_14a50, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_14a58
  %merge = phi i32 [ %v0_14a50, %dec_label_pc_14a58 ], [ %v2_14d30, %bb141 ], [ %v11_14d4c, %bb144 ], [ %v7_14d4c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_14a58
  store i32 %v1_14a50, i32* %stack_var_-8, align 4
  %v0_14a60 = load i32, i32* @r2, align 4
  %v2_14a60 = add i32 %v0_14a60, -4
  store i32 %v2_14a60, i32* %r2.global-to-local, align 4
  %v4_14a60 = sub i32 3, %v0_14a60
  %v5_14a60 = and i32 %v4_14a60, %v0_14a60
  %v6_14a60 = icmp slt i32 %v5_14a60, 0
  store i1 %v6_14a60, i1* %cpsr_v.global-to-local, align 1
  %v7_14a60 = icmp slt i32 %v2_14a60, 0
  store i1 %v7_14a60, i1* %cpsr_n.global-to-local, align 1
  %v8_14a60 = icmp eq i32 %v0_14a60, 4
  store i1 %v8_14a60, i1* %cpsr_z.global-to-local, align 1
  %v5_14a64 = icmp slt i32 %v0_14a60, 4
  br i1 %v5_14a64, label %bb131, label %dec_label_pc_14a68

dec_label_pc_14a68:                               ; preds = %bb
  %v1_14a68 = urem i32 %v1_14a50, 4
  store i32 %v1_14a68, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14a68 = icmp eq i32 %v1_14a68, 0
  store i1 %v2_14a68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14a68, label %dec_label_pc_14a70, label %dec_label_pc_14b14

dec_label_pc_14a70:                               ; preds = %dec_label_pc_14a68
  %v1_14a70 = urem i32 %v0_14a50, 4
  store i32 %v1_14a70, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14a70 = icmp eq i32 %v1_14a70, 0
  store i1 %v2_14a70, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_14a50 to i2
  br i1 %v2_14a70, label %dec_label_pc_14a78, label %dec_label_pc_14b44

dec_label_pc_14a78:                               ; preds = %dec_label_pc_14a70, %dec_label_pc_14b3c
  %v0_14a9092 = phi i32 [ %v1_14a50, %dec_label_pc_14a70 ], [ %v0_14b8c75, %dec_label_pc_14b3c ]
  %v0_14a8c91 = phi i32 [ %v0_14a50, %dec_label_pc_14a70 ], [ %v0_14b3c, %dec_label_pc_14b3c ]
  %v0_14a78 = phi i32 [ %v2_14a60, %dec_label_pc_14a70 ], [ %v2_14b34, %dec_label_pc_14b3c ]
  %v2_14a78 = add i32 %v0_14a78, -8
  store i32 %v2_14a78, i32* %r2.global-to-local, align 4
  %v4_14a78 = sub i32 7, %v0_14a78
  %v5_14a78 = and i32 %v4_14a78, %v0_14a78
  %v6_14a78 = icmp slt i32 %v5_14a78, 0
  store i1 %v6_14a78, i1* %cpsr_v.global-to-local, align 1
  %v7_14a78 = icmp slt i32 %v2_14a78, 0
  store i1 %v7_14a78, i1* %cpsr_n.global-to-local, align 1
  %v8_14a78 = icmp eq i32 %v0_14a78, 8
  store i1 %v8_14a78, i1* %cpsr_z.global-to-local, align 1
  %v5_14a7c = icmp slt i32 %v0_14a78, 8
  br i1 %v5_14a7c, label %dec_label_pc_14acc, label %dec_label_pc_14a80

dec_label_pc_14a80:                               ; preds = %dec_label_pc_14a78
  %v2_14a80 = add i32 %v0_14a78, -28
  store i32 %v2_14a80, i32* %r2.global-to-local, align 4
  %v4_14a80 = sub i32 27, %v0_14a78
  %v5_14a80 = and i32 %v4_14a80, %v2_14a78
  %v6_14a80 = icmp slt i32 %v5_14a80, 0
  store i1 %v6_14a80, i1* %cpsr_v.global-to-local, align 1
  %v7_14a80 = icmp slt i32 %v2_14a80, 0
  store i1 %v7_14a80, i1* %cpsr_n.global-to-local, align 1
  %v8_14a80 = icmp eq i32 %v2_14a78, 20
  store i1 %v8_14a80, i1* %cpsr_z.global-to-local, align 1
  %v5_14a84 = icmp slt i32 %v2_14a78, 20
  br i1 %v5_14a84, label %dec_label_pc_14ab8, label %dec_label_pc_14a88

dec_label_pc_14a88:                               ; preds = %dec_label_pc_14a80
  %v0_14a88 = load i32, i32* @r4, align 4
  store i32 %v0_14a88, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14a8c

dec_label_pc_14a8c:                               ; preds = %dec_label_pc_14a8c.dec_label_pc_14a8c_crit_edge, %dec_label_pc_14a88
  %v0_14a90 = phi i32 [ %v12_14a98, %dec_label_pc_14a8c.dec_label_pc_14a8c_crit_edge ], [ %v0_14a9092, %dec_label_pc_14a88 ]
  %v0_14a8c = phi i32 [ %v0_14a8c.pre, %dec_label_pc_14a8c.dec_label_pc_14a8c_crit_edge ], [ %v0_14a8c91, %dec_label_pc_14a88 ]
  %v1_14a8c = inttoptr i32 %v0_14a8c to i32*
  %v2_14a8c = load i32, i32* %v1_14a8c, align 4
  store i32 %v2_14a8c, i32* %r3.global-to-local, align 4
  %v3_14a8c = add i32 %v0_14a8c, 4
  %v4_14a8c = inttoptr i32 %v3_14a8c to i32*
  %v5_14a8c = load i32, i32* %v4_14a8c, align 4
  store i32 %v5_14a8c, i32* %r4.global-to-local, align 4
  %v6_14a8c = add i32 %v0_14a8c, 8
  %v7_14a8c = inttoptr i32 %v6_14a8c to i32*
  %v8_14a8c = load i32, i32* %v7_14a8c, align 4
  store i32 %v8_14a8c, i32* %ip.global-to-local, align 4
  %v9_14a8c = add i32 %v0_14a8c, 12
  %v10_14a8c = inttoptr i32 %v9_14a8c to i32*
  %v11_14a8c = load i32, i32* %v10_14a8c, align 4
  store i32 %v11_14a8c, i32* %lr.global-to-local, align 4
  %v12_14a8c = add i32 %v0_14a8c, 16
  store i32 %v12_14a8c, i32* %r1.global-to-local, align 4
  %v1_14a90 = inttoptr i32 %v0_14a90 to i32*
  store i32 %v2_14a8c, i32* %v1_14a90, align 4
  %v3_14a90 = add i32 %v0_14a90, 4
  %v4_14a90 = inttoptr i32 %v3_14a90 to i32*
  %v5_14a90 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14a90, i32* %v4_14a90, align 4
  %v6_14a90 = add i32 %v0_14a90, 8
  %v7_14a90 = inttoptr i32 %v6_14a90 to i32*
  %v8_14a90 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14a90, i32* %v7_14a90, align 4
  %v9_14a90 = add i32 %v0_14a90, 12
  %v10_14a90 = inttoptr i32 %v9_14a90 to i32*
  %v11_14a90 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14a90, i32* %v10_14a90, align 4
  %v12_14a90 = add i32 %v0_14a90, 16
  store i32 %v12_14a90, i32* %r0.global-to-local, align 4
  %v0_14a94 = load i32, i32* %r1.global-to-local, align 4
  %v1_14a94 = inttoptr i32 %v0_14a94 to i32*
  %v2_14a94 = load i32, i32* %v1_14a94, align 4
  store i32 %v2_14a94, i32* %r3.global-to-local, align 4
  %v3_14a94 = add i32 %v0_14a94, 4
  %v4_14a94 = inttoptr i32 %v3_14a94 to i32*
  %v5_14a94 = load i32, i32* %v4_14a94, align 4
  store i32 %v5_14a94, i32* %r4.global-to-local, align 4
  %v6_14a94 = add i32 %v0_14a94, 8
  %v7_14a94 = inttoptr i32 %v6_14a94 to i32*
  %v8_14a94 = load i32, i32* %v7_14a94, align 4
  store i32 %v8_14a94, i32* %ip.global-to-local, align 4
  %v9_14a94 = add i32 %v0_14a94, 12
  %v10_14a94 = inttoptr i32 %v9_14a94 to i32*
  %v11_14a94 = load i32, i32* %v10_14a94, align 4
  store i32 %v11_14a94, i32* @lr, align 4
  %v12_14a94 = add i32 %v0_14a94, 16
  store i32 %v12_14a94, i32* @r1, align 4
  %v1_14a98 = inttoptr i32 %v12_14a90 to i32*
  store i32 %v2_14a94, i32* %v1_14a98, align 4
  %v3_14a98 = add i32 %v0_14a90, 20
  %v4_14a98 = inttoptr i32 %v3_14a98 to i32*
  %v5_14a98 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14a98, i32* %v4_14a98, align 4
  %v6_14a98 = add i32 %v0_14a90, 24
  %v7_14a98 = inttoptr i32 %v6_14a98 to i32*
  %v8_14a98 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14a98, i32* %v7_14a98, align 4
  %v9_14a98 = add i32 %v0_14a90, 28
  %v10_14a98 = inttoptr i32 %v9_14a98 to i32*
  %v11_14a98 = load i32, i32* @lr, align 4
  store i32 %v11_14a98, i32* %v10_14a98, align 4
  %v12_14a98 = add i32 %v0_14a90, 32
  store i32 %v12_14a98, i32* @r0, align 4
  %v0_14a9c = load i32, i32* %r2.global-to-local, align 4
  %v2_14a9c = add i32 %v0_14a9c, -32
  store i32 %v2_14a9c, i32* %r2.global-to-local, align 4
  %v6_14aa0 = icmp slt i32 %v0_14a9c, 32
  br i1 %v6_14aa0, label %dec_label_pc_14aa4, label %dec_label_pc_14a8c.dec_label_pc_14a8c_crit_edge

dec_label_pc_14a8c.dec_label_pc_14a8c_crit_edge:  ; preds = %dec_label_pc_14a8c
  %v0_14a8c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_14a8c

dec_label_pc_14aa4:                               ; preds = %dec_label_pc_14a8c
  %v4_14aa4 = add i32 %v0_14a9c, -16
  %v6_14aa4 = add i32 %v0_14a9c, 2147483616
  %v7_14aa4 = and i32 %v4_14aa4, %v6_14aa4
  %v8_14aa4 = icmp slt i32 %v7_14aa4, 0
  store i1 %v8_14aa4, i1* %cpsr_v.global-to-local, align 1
  %v9_14aa4 = icmp slt i32 %v4_14aa4, 0
  store i1 %v9_14aa4, i1* %cpsr_n.global-to-local, align 1
  %v10_14aa4 = icmp eq i32 %v4_14aa4, 0
  store i1 %v10_14aa4, i1* %cpsr_z.global-to-local, align 1
  %v5_14aa8 = icmp slt i32 %v2_14a9c, -16
  br i1 %v5_14aa8, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_14aa4
  %v6_14aa8 = load i32, i32* @r1, align 4
  %v7_14aa8 = inttoptr i32 %v6_14aa8 to i32*
  %v8_14aa8 = load i32, i32* %v7_14aa8, align 4
  store i32 %v8_14aa8, i32* %r3.global-to-local, align 4
  %v9_14aa8 = add i32 %v6_14aa8, 4
  %v10_14aa8 = inttoptr i32 %v9_14aa8 to i32*
  %v11_14aa8 = load i32, i32* %v10_14aa8, align 4
  store i32 %v11_14aa8, i32* %r4.global-to-local, align 4
  %v12_14aa8 = add i32 %v6_14aa8, 8
  %v13_14aa8 = inttoptr i32 %v12_14aa8 to i32*
  %v14_14aa8 = load i32, i32* %v13_14aa8, align 4
  store i32 %v14_14aa8, i32* %ip.global-to-local, align 4
  %v15_14aa8 = add i32 %v6_14aa8, 12
  %v16_14aa8 = inttoptr i32 %v15_14aa8 to i32*
  %v17_14aa8 = load i32, i32* %v16_14aa8, align 4
  store i32 %v17_14aa8, i32* @lr, align 4
  %v18_14aa8 = add i32 %v6_14aa8, 16
  store i32 %v18_14aa8, i32* @r1, align 4
  %v7_14aac = inttoptr i32 %v12_14a98 to i32*
  store i32 %v8_14aa8, i32* %v7_14aac, align 4
  %v9_14aac = add i32 %v0_14a90, 36
  %v10_14aac = inttoptr i32 %v9_14aac to i32*
  %v11_14aac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_14aac, i32* %v10_14aac, align 4
  %v12_14aac = add i32 %v0_14a90, 40
  %v13_14aac = inttoptr i32 %v12_14aac to i32*
  %v14_14aac = load i32, i32* %ip.global-to-local, align 4
  store i32 %v14_14aac, i32* %v13_14aac, align 4
  %v15_14aac = add i32 %v0_14a90, 44
  %v16_14aac = inttoptr i32 %v15_14aac to i32*
  %v17_14aac = load i32, i32* @lr, align 4
  store i32 %v17_14aac, i32* %v16_14aac, align 4
  %v18_14aac = add i32 %v0_14a90, 48
  store i32 %v18_14aac, i32* @r0, align 4
  %v6_14ab0 = load i32, i32* %r2.global-to-local, align 4
  %v7_14ab0 = add i32 %v6_14ab0, -16
  store i32 %v7_14ab0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14aa4, %bb128
  %v3_14ac0101 = phi i32 [ %v12_14a98, %dec_label_pc_14aa4 ], [ %v18_14aac, %bb128 ]
  %v0_14ab895 = phi i32 [ %v2_14a9c, %dec_label_pc_14aa4 ], [ %v7_14ab0, %bb128 ]
  %v2_14ab4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14ab4, i32* @r4, align 4
  br label %dec_label_pc_14ab8

dec_label_pc_14ab8:                               ; preds = %dec_label_pc_14a80, %.thread1
  %v3_14ac0100 = phi i32 [ %v0_14a9092, %dec_label_pc_14a80 ], [ %v3_14ac0101, %.thread1 ]
  %v0_14ab8 = phi i32 [ %v2_14a80, %dec_label_pc_14a80 ], [ %v0_14ab895, %.thread1 ]
  %v1_14ab8 = add i32 %v0_14ab8, 20
  store i32 %v1_14ab8, i32* %r2.global-to-local, align 4
  %v3_14ab8 = sub i32 0, %v0_14ab8
  %v4_14ab8 = and i32 %v1_14ab8, %v3_14ab8
  %v5_14ab8 = icmp slt i32 %v4_14ab8, 0
  store i1 %v5_14ab8, i1* %cpsr_v.global-to-local, align 1
  %v6_14ab8 = icmp slt i32 %v1_14ab8, 0
  store i1 %v6_14ab8, i1* %cpsr_n.global-to-local, align 1
  %v7_14ab8 = icmp eq i32 %v1_14ab8, 0
  store i1 %v7_14ab8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14abc

dec_label_pc_14abc:                               ; preds = %.thread117, %dec_label_pc_14ab8
  %v0_14acc.pre147 = phi i32 [ %v0_14acc.pre, %.thread117 ], [ %v1_14ab8, %dec_label_pc_14ab8 ]
  %v3_14ac0 = phi i32 [ %v3_14ac098118, %.thread117 ], [ %v3_14ac0100, %dec_label_pc_14ab8 ]
  %v1_14ac4 = phi i1 [ %v1_14ac8, %.thread117 ], [ %v5_14ab8, %dec_label_pc_14ab8 ]
  %v0_14ac4 = phi i1 [ %v0_14ac8, %.thread117 ], [ %v6_14ab8, %dec_label_pc_14ab8 ]
  %v2_14abc = xor i1 %v1_14ac4, %v0_14ac4
  br i1 %v2_14abc, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_14abc
  %v3_14abc = load i32, i32* @r1, align 4
  %v4_14abc = inttoptr i32 %v3_14abc to i32*
  %v5_14abc = load i32, i32* %v4_14abc, align 4
  store i32 %v5_14abc, i32* %r3.global-to-local, align 4
  %v6_14abc = add i32 %v3_14abc, 4
  %v7_14abc = inttoptr i32 %v6_14abc to i32*
  %v8_14abc = load i32, i32* %v7_14abc, align 4
  store i32 %v8_14abc, i32* %ip.global-to-local, align 4
  %v9_14abc = add i32 %v3_14abc, 8
  %v10_14abc = inttoptr i32 %v9_14abc to i32*
  %v11_14abc = load i32, i32* %v10_14abc, align 4
  store i32 %v11_14abc, i32* @lr, align 4
  %v12_14abc = add i32 %v3_14abc, 12
  store i32 %v12_14abc, i32* @r1, align 4
  %v4_14ac0 = inttoptr i32 %v3_14ac0 to i32*
  store i32 %v5_14abc, i32* %v4_14ac0, align 4
  %v6_14ac0 = add i32 %v3_14ac0, 4
  %v7_14ac0 = inttoptr i32 %v6_14ac0 to i32*
  %v8_14ac0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14ac0, i32* %v7_14ac0, align 4
  %v9_14ac0 = add i32 %v3_14ac0, 8
  %v10_14ac0 = inttoptr i32 %v9_14ac0 to i32*
  %v11_14ac0 = load i32, i32* @lr, align 4
  store i32 %v11_14ac0, i32* %v10_14ac0, align 4
  %v12_14ac0 = add i32 %v3_14ac0, 12
  store i32 %v12_14ac0, i32* @r0, align 4
  %v3_14ac4 = load i32, i32* %r2.global-to-local, align 4
  %v4_14ac4 = add i32 %v3_14ac4, -12
  store i32 %v4_14ac4, i32* %r2.global-to-local, align 4
  %v6_14ac4 = sub i32 11, %v3_14ac4
  %v7_14ac4 = and i32 %v6_14ac4, %v3_14ac4
  %v8_14ac4 = icmp slt i32 %v7_14ac4, 0
  store i1 %v8_14ac4, i1* %cpsr_v.global-to-local, align 1
  %v9_14ac4 = icmp slt i32 %v4_14ac4, 0
  store i1 %v9_14ac4, i1* %cpsr_n.global-to-local, align 1
  %v10_14ac4 = icmp eq i32 %v3_14ac4, 12
  store i1 %v10_14ac4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_14abc, %bb129
  %v0_14acc.pre = phi i32 [ %v4_14ac4, %bb129 ], [ %v0_14acc.pre147, %dec_label_pc_14abc ]
  %v3_14ac098118 = phi i32 [ %v12_14ac0, %bb129 ], [ %v3_14ac0, %dec_label_pc_14abc ]
  %v1_14ac8 = phi i1 [ %v8_14ac4, %bb129 ], [ %v1_14ac4, %dec_label_pc_14abc ]
  %v0_14ac8 = phi i1 [ %v9_14ac4, %bb129 ], [ %v0_14ac4, %dec_label_pc_14abc ]
  %v2_14ac8 = xor i1 %v1_14ac8, %v0_14ac8
  br i1 %v2_14ac8, label %dec_label_pc_14acc, label %dec_label_pc_14abc

dec_label_pc_14acc:                               ; preds = %.thread117, %dec_label_pc_14a78
  %v7_14adc = phi i32 [ %v0_14a9092, %dec_label_pc_14a78 ], [ %v3_14ac098118, %.thread117 ]
  %v0_14acc = phi i32 [ %v2_14a78, %dec_label_pc_14a78 ], [ %v0_14acc.pre, %.thread117 ]
  %v2_14acc = add i32 %v0_14acc, 8
  store i32 %v2_14acc, i32* %r2.global-to-local, align 4
  %v4_14acc = sub i32 0, %v0_14acc
  %v5_14acc = and i32 %v2_14acc, %v4_14acc
  %v6_14acc = icmp slt i32 %v5_14acc, 0
  store i1 %v6_14acc, i1* %cpsr_v.global-to-local, align 1
  %v7_14acc = icmp slt i32 %v2_14acc, 0
  store i1 %v7_14acc, i1* %cpsr_n.global-to-local, align 1
  %v8_14acc = icmp eq i32 %v2_14acc, 0
  store i1 %v8_14acc, i1* %cpsr_z.global-to-local, align 1
  %v5_14ad0 = icmp slt i32 %v0_14acc, -8
  br i1 %v5_14ad0, label %bb131, label %dec_label_pc_14ad4

dec_label_pc_14ad4:                               ; preds = %dec_label_pc_14acc
  %v6_14ad4 = add i32 %v0_14acc, 4
  store i32 %v6_14ad4, i32* %r2.global-to-local, align 4
  %v8_14ad4 = sub i32 -5, %v0_14acc
  %v9_14ad4 = and i32 %v8_14ad4, %v2_14acc
  %v10_14ad4 = icmp slt i32 %v9_14ad4, 0
  store i1 %v10_14ad4, i1* %cpsr_v.global-to-local, align 1
  %v11_14ad4 = icmp slt i32 %v6_14ad4, 0
  store i1 %v11_14ad4, i1* %cpsr_n.global-to-local, align 1
  %v12_14ad4 = icmp eq i32 %v2_14acc, 4
  store i1 %v12_14ad4, i1* %cpsr_z.global-to-local, align 1
  %v5_14ad8 = icmp slt i32 %v2_14acc, 4
  %v6_14ad8 = load i32, i32* @r1, align 4
  %v7_14ad8 = inttoptr i32 %v6_14ad8 to i32*
  %v8_14ad8 = load i32, i32* %v7_14ad8, align 4
  store i32 %v8_14ad8, i32* %r3.global-to-local, align 4
  %v10_14ad8 = add i32 %v6_14ad8, 4
  br i1 %v5_14ad8, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_14ad4
  store i32 %v10_14ad8, i32* @r1, align 4
  %v8_14adc = inttoptr i32 %v7_14adc to i32*
  store i32 %v8_14ad8, i32* %v8_14adc, align 4
  %v9_14adc = load i32, i32* @r0, align 4
  %v10_14adc = add i32 %v9_14adc, 4
  store i32 %v10_14adc, i32* @r0, align 4
  %v0_14aec.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_14ad4
  %v10_14ae0 = inttoptr i32 %v10_14ad8 to i32*
  %v11_14ae0 = load i32, i32* %v10_14ae0, align 4
  store i32 %v11_14ae0, i32* %ip.global-to-local, align 4
  %v12_14ae0 = add i32 %v6_14ad8, 8
  store i32 %v12_14ae0, i32* @r1, align 4
  %v7_14ae4 = inttoptr i32 %v7_14adc to i32*
  store i32 %v8_14ad8, i32* %v7_14ae4, align 4
  %v9_14ae4 = add i32 %v7_14adc, 4
  %v10_14ae4 = inttoptr i32 %v9_14ae4 to i32*
  %v11_14ae4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_14ae4, i32* %v10_14ae4, align 4
  %v12_14ae4 = add i32 %v7_14adc, 8
  store i32 %v12_14ae4, i32* @r0, align 4
  %v6_14ae8 = load i32, i32* %r2.global-to-local, align 4
  %v7_14ae8 = add i32 %v6_14ae8, -4
  store i32 %v7_14ae8, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_14acc, %bb, %dec_label_pc_14c94, %dec_label_pc_14c28, %dec_label_pc_14bbc, %bb130
  %v2_14afc = phi i32 [ %v10_14adc, %.thread5 ], [ %v0_14b8c75, %.thread11 ], [ %v7_14adc, %dec_label_pc_14acc ], [ %v1_14a50, %bb ], [ %v2_14afc113, %dec_label_pc_14c94 ], [ %v2_14afc112, %dec_label_pc_14c28 ], [ %v2_14afc111, %dec_label_pc_14bbc ], [ %v12_14ae4, %bb130 ]
  %v0_14aec = phi i32 [ %v0_14aec.pre, %.thread5 ], [ %v2_14b34, %.thread11 ], [ %v2_14acc, %dec_label_pc_14acc ], [ %v2_14a60, %bb ], [ %v0_14aec109, %dec_label_pc_14c94 ], [ %v0_14aec108, %dec_label_pc_14c28 ], [ %v0_14aec107, %dec_label_pc_14bbc ], [ %v7_14ae8, %bb130 ]
  %v1_14aec = add i32 %v0_14aec, 4
  store i32 %v1_14aec, i32* %r2.global-to-local, align 4
  %v3_14aec = sub i32 0, %v0_14aec
  %v4_14aec = and i32 %v1_14aec, %v3_14aec
  %v5_14aec = icmp slt i32 %v4_14aec, 0
  store i1 %v5_14aec, i1* %cpsr_v.global-to-local, align 1
  %v6_14aec = icmp slt i32 %v1_14aec, 0
  store i1 %v6_14aec, i1* %cpsr_n.global-to-local, align 1
  %v7_14aec = icmp eq i32 %v1_14aec, 0
  store i1 %v7_14aec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14aec, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_14af0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_14af0, i32* %r0.global-to-local, align 4
  ret i32 %v3_14af0

bb133:                                            ; preds = %bb131
  %v1_14af4 = add i32 %v0_14aec, 2
  %v3_14af4 = sub i32 -3, %v0_14aec
  %v4_14af4 = and i32 %v3_14af4, %v1_14aec
  %v5_14af4 = icmp slt i32 %v4_14af4, 0
  store i1 %v5_14af4, i1* %cpsr_v.global-to-local, align 1
  %v6_14af4 = icmp slt i32 %v1_14af4, 0
  store i1 %v6_14af4, i1* %cpsr_n.global-to-local, align 1
  %v7_14af4 = icmp eq i32 %v1_14aec, 2
  store i1 %v7_14af4, i1* %cpsr_z.global-to-local, align 1
  %v0_14af8 = load i32, i32* @r1, align 4
  %v1_14af8 = inttoptr i32 %v0_14af8 to i8*
  %v2_14af8 = load i8, i8* %v1_14af8, align 1
  %v3_14af8 = zext i8 %v2_14af8 to i32
  store i32 %v3_14af8, i32* %r3.global-to-local, align 4
  %v5_14af8 = add i32 %v0_14af8, 1
  store i32 %v5_14af8, i32* %r1.global-to-local, align 4
  %v3_14afc = inttoptr i32 %v2_14afc to i8*
  store i8 %v2_14af8, i8* %v3_14afc, align 1
  %v4_14afc = load i32, i32* @r0, align 4
  %v5_14afc = add i32 %v4_14afc, 1
  store i32 %v5_14afc, i32* %r0.global-to-local, align 4
  %v0_14b00 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14b00 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14b00 = xor i1 %v0_14b00, %v1_14b00
  br i1 %v2_14b00, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_14b00 = load i32, i32* %r1.global-to-local, align 4
  %v4_14b00 = inttoptr i32 %v3_14b00 to i8*
  %v5_14b00 = load i8, i8* %v4_14b00, align 1
  %v6_14b00 = zext i8 %v5_14b00 to i32
  store i32 %v6_14b00, i32* %r3.global-to-local, align 4
  %v8_14b00 = add i32 %v3_14b00, 1
  store i32 %v8_14b00, i32* %r1.global-to-local, align 4
  %v6_14b04 = inttoptr i32 %v5_14afc to i8*
  store i8 %v5_14b00, i8* %v6_14b04, align 1
  %v7_14b04 = load i32, i32* %r0.global-to-local, align 4
  %v8_14b04 = add i32 %v7_14b04, 1
  store i32 %v8_14b04, i32* %r0.global-to-local, align 4
  %v1_14b08.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14b08.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_14b0c = phi i32 [ %v8_14b04, %bb134 ], [ %v5_14afc, %bb133 ]
  %v2_14b0c = phi i1 [ %v2_14b08.pre, %bb134 ], [ %v1_14b00, %bb133 ]
  %v1_14b0c = phi i1 [ %v1_14b08.pre, %bb134 ], [ %v0_14b00, %bb133 ]
  %v0_14b08 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14b08 = xor i1 %v2_14b0c, %v1_14b0c
  %v4_14b08 = or i1 %v0_14b08, %v3_14b08
  br i1 %v4_14b08, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_14b08 = load i32, i32* %r1.global-to-local, align 4
  %v6_14b08 = inttoptr i32 %v5_14b08 to i8*
  %v7_14b08 = load i8, i8* %v6_14b08, align 1
  %v8_14b08 = zext i8 %v7_14b08 to i32
  store i32 %v8_14b08, i32* %r3.global-to-local, align 4
  %v10_14b08 = add i32 %v5_14b08, 1
  store i32 %v10_14b08, i32* %r1.global-to-local, align 4
  %v8_14b0c = inttoptr i32 %v7_14b0c to i8*
  store i8 %v7_14b08, i8* %v8_14b0c, align 1
  %v9_14b0c = load i32, i32* %r0.global-to-local, align 4
  %v10_14b0c = add i32 %v9_14b0c, 1
  store i32 %v10_14b0c, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_14b10 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14b10, i32* %r0.global-to-local, align 4
  ret i32 %v2_14b10

dec_label_pc_14b14:                               ; preds = %dec_label_pc_14a68
  %v1_14b14 = sub nsw i32 4, %v1_14a68
  store i32 %v1_14b14, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14b18 = icmp ult i32 %v1_14b14, 2
  store i1 %v8_14b18, i1* %cpsr_n.global-to-local, align 1
  %v9_14b18 = icmp eq i32 %v1_14b14, 2
  store i1 %v9_14b18, i1* %cpsr_z.global-to-local, align 1
  %v1_14b1c = inttoptr i32 %v0_14a50 to i8*
  %v2_14b1c = load i8, i8* %v1_14b1c, align 1
  %v3_14b1c = zext i8 %v2_14b1c to i32
  store i32 %v3_14b1c, i32* %r3.global-to-local, align 4
  %v5_14b1c = add i32 %v0_14a50, 1
  store i32 %v5_14b1c, i32* @r1, align 4
  %v3_14b20 = inttoptr i32 %v1_14a50 to i8*
  store i8 %v2_14b1c, i8* %v3_14b20, align 1
  %v4_14b20 = load i32, i32* @r0, align 4
  %v5_14b20 = add i32 %v4_14b20, 1
  store i32 %v5_14b20, i32* @r0, align 4
  br i1 %v8_14b18, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_14b14
  %v6_14b24 = load i32, i32* @r1, align 4
  %v7_14b24 = inttoptr i32 %v6_14b24 to i8*
  %v8_14b24 = load i8, i8* %v7_14b24, align 1
  %v9_14b24 = zext i8 %v8_14b24 to i32
  store i32 %v9_14b24, i32* %r3.global-to-local, align 4
  %v11_14b24 = add i32 %v6_14b24, 1
  store i32 %v11_14b24, i32* @r1, align 4
  %v9_14b28 = inttoptr i32 %v5_14b20 to i8*
  store i8 %v8_14b24, i8* %v9_14b28, align 1
  %v10_14b28 = load i32, i32* @r0, align 4
  %v11_14b28 = add i32 %v10_14b28, 1
  store i32 %v11_14b28, i32* @r0, align 4
  br i1 %v9_14b18, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_14b2c = load i32, i32* @r1, align 4
  %v9_14b2c = inttoptr i32 %v8_14b2c to i8*
  %v10_14b2c = load i8, i8* %v9_14b2c, align 1
  %v11_14b2c = zext i8 %v10_14b2c to i32
  store i32 %v11_14b2c, i32* %r3.global-to-local, align 4
  %v13_14b2c = add i32 %v8_14b2c, 1
  store i32 %v13_14b2c, i32* @r1, align 4
  %v11_14b30 = inttoptr i32 %v11_14b28 to i8*
  store i8 %v10_14b2c, i8* %v11_14b30, align 1
  %v12_14b30 = load i32, i32* @r0, align 4
  %v13_14b30 = add i32 %v12_14b30, 1
  store i32 %v13_14b30, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_14b14, %bb137
  %v0_14b8c75 = phi i32 [ %v11_14b28, %bb136 ], [ %v5_14b20, %dec_label_pc_14b14 ], [ %v13_14b30, %bb137 ]
  %v0_14b34 = load i32, i32* %r2.global-to-local, align 4
  %v1_14b34 = load i32, i32* %ip.global-to-local, align 4
  %v2_14b34 = sub i32 %v0_14b34, %v1_14b34
  store i32 %v2_14b34, i32* %r2.global-to-local, align 4
  %v4_14b34 = xor i32 %v1_14b34, %v0_14b34
  %v5_14b34 = xor i32 %v2_14b34, %v0_14b34
  %v6_14b34 = and i32 %v5_14b34, %v4_14b34
  %v7_14b34 = icmp slt i32 %v6_14b34, 0
  store i1 %v7_14b34, i1* %cpsr_v.global-to-local, align 1
  %v8_14b34 = icmp slt i32 %v2_14b34, 0
  store i1 %v8_14b34, i1* %cpsr_n.global-to-local, align 1
  %v9_14b34 = icmp eq i32 %v0_14b34, %v1_14b34
  store i1 %v9_14b34, i1* %cpsr_z.global-to-local, align 1
  %v5_14b38 = icmp slt i32 %v0_14b34, %v1_14b34
  br i1 %v5_14b38, label %bb131, label %dec_label_pc_14b3c

dec_label_pc_14b3c:                               ; preds = %.thread11
  %v0_14b3c = load i32, i32* @r1, align 4
  %v1_14b3c = urem i32 %v0_14b3c, 4
  store i32 %v1_14b3c, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14b3c = icmp eq i32 %v1_14b3c, 0
  store i1 %v2_14b3c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_14b3c to i2
  br i1 %v2_14b3c, label %dec_label_pc_14a78, label %dec_label_pc_14b44

dec_label_pc_14b44:                               ; preds = %dec_label_pc_14a70, %dec_label_pc_14b3c
  %v0_14b8c74 = phi i32 [ %v1_14a50, %dec_label_pc_14a70 ], [ %v0_14b8c75, %dec_label_pc_14b3c ]
  %v0_14c38 = phi i32 [ %v2_14a60, %dec_label_pc_14a70 ], [ %v2_14b34, %dec_label_pc_14b3c ]
  %v0_14b4c.off0 = phi i2 [ %extract.t, %dec_label_pc_14a70 ], [ %extract.t123, %dec_label_pc_14b3c ]
  %v0_14b44 = phi i32 [ %v0_14a50, %dec_label_pc_14a70 ], [ %v0_14b3c, %dec_label_pc_14b3c ]
  %v1_14b44 = and i32 %v0_14b44, -4
  store i32 %v1_14b44, i32* %r1.global-to-local, align 4
  %v1_14b48 = inttoptr i32 %v1_14b44 to i32*
  %v2_14b48 = load i32, i32* %v1_14b48, align 4
  store i32 %v2_14b48, i32* @lr, align 4
  %v4_14b48 = add i32 %v1_14b44, 4
  store i32 %v4_14b48, i32* %r1.global-to-local, align 4
  %v2_14c30 = add i32 %v0_14c38, -12
  %v4_14c30 = sub i32 11, %v0_14c38
  %v5_14c30 = and i32 %v4_14c30, %v0_14c38
  %v6_14c30 = icmp slt i32 %v5_14c30, 0
  store i1 %v6_14c30, i1* %cpsr_v.global-to-local, align 1
  %v7_14c30 = icmp slt i32 %v2_14c30, 0
  store i1 %v7_14c30, i1* %cpsr_n.global-to-local, align 1
  %v8_14c30 = icmp eq i32 %v0_14c38, 12
  store i1 %v8_14c30, i1* %cpsr_z.global-to-local, align 1
  %v5_14c34 = icmp slt i32 %v0_14c38, 12
  switch i2 %v0_14b4c.off0, label %dec_label_pc_14b58 [
    i2 -1, label %dec_label_pc_14c30
    i2 -2, label %dec_label_pc_14bc4
  ]

dec_label_pc_14b58:                               ; preds = %dec_label_pc_14b44
  br i1 %v5_14c34, label %dec_label_pc_14ba4, label %dec_label_pc_14b60

dec_label_pc_14b60:                               ; preds = %dec_label_pc_14b58
  store i32 %v2_14c30, i32* %r2.global-to-local, align 4
  %v3_14b64 = load i32, i32* @r4, align 4
  store i32 %v3_14b64, i32* %stack_var_-16, align 4
  %v6_14b64 = load i32, i32* @r5, align 4
  store i32 %v6_14b64, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14b68

dec_label_pc_14b68:                               ; preds = %dec_label_pc_14b68.dec_label_pc_14b68_crit_edge, %dec_label_pc_14b60
  %v0_14b8c = phi i32 [ %v12_14b8c, %dec_label_pc_14b68.dec_label_pc_14b68_crit_edge ], [ %v0_14b8c74, %dec_label_pc_14b60 ]
  %v0_14b6c = phi i32 [ %v0_14b6c.pre, %dec_label_pc_14b68.dec_label_pc_14b68_crit_edge ], [ %v4_14b48, %dec_label_pc_14b60 ]
  %v0_14b68 = phi i32 [ %v0_14b68.pre, %dec_label_pc_14b68.dec_label_pc_14b68_crit_edge ], [ %v2_14b48, %dec_label_pc_14b60 ]
  %v3_14b68 = udiv i32 %v0_14b68, 256
  store i32 %v3_14b68, i32* %r3.global-to-local, align 4
  %v1_14b6c = inttoptr i32 %v0_14b6c to i32*
  %v2_14b6c = load i32, i32* %v1_14b6c, align 4
  store i32 %v2_14b6c, i32* %r4.global-to-local, align 4
  %v3_14b6c = add i32 %v0_14b6c, 4
  %v4_14b6c = inttoptr i32 %v3_14b6c to i32*
  %v5_14b6c = load i32, i32* %v4_14b6c, align 4
  store i32 %v5_14b6c, i32* %r5.global-to-local, align 4
  %v6_14b6c = add i32 %v0_14b6c, 8
  %v7_14b6c = inttoptr i32 %v6_14b6c to i32*
  %v8_14b6c = load i32, i32* %v7_14b6c, align 4
  store i32 %v8_14b6c, i32* %ip.global-to-local, align 4
  %v9_14b6c = add i32 %v0_14b6c, 12
  %v10_14b6c = inttoptr i32 %v9_14b6c to i32*
  %v11_14b6c = load i32, i32* %v10_14b6c, align 4
  store i32 %v11_14b6c, i32* @lr, align 4
  %v12_14b6c = add i32 %v0_14b6c, 16
  store i32 %v12_14b6c, i32* %r1.global-to-local, align 4
  %v4_14b70 = mul i32 %v2_14b6c, 16777216
  %v5_14b70 = or i32 %v4_14b70, %v3_14b68
  store i32 %v5_14b70, i32* %r3.global-to-local, align 4
  %v3_14b74 = udiv i32 %v2_14b6c, 256
  %v4_14b78 = mul i32 %v5_14b6c, 16777216
  %v5_14b78 = or i32 %v4_14b78, %v3_14b74
  store i32 %v5_14b78, i32* %r4.global-to-local, align 4
  %v3_14b7c = udiv i32 %v5_14b6c, 256
  %v4_14b80 = mul i32 %v8_14b6c, 16777216
  %v5_14b80 = or i32 %v4_14b80, %v3_14b7c
  store i32 %v5_14b80, i32* %r5.global-to-local, align 4
  %v3_14b84 = udiv i32 %v8_14b6c, 256
  %v4_14b88 = mul i32 %v11_14b6c, 16777216
  %v5_14b88 = or i32 %v4_14b88, %v3_14b84
  store i32 %v5_14b88, i32* %ip.global-to-local, align 4
  %v1_14b8c = inttoptr i32 %v0_14b8c to i32*
  store i32 %v5_14b70, i32* %v1_14b8c, align 4
  %v3_14b8c = add i32 %v0_14b8c, 4
  %v4_14b8c = inttoptr i32 %v3_14b8c to i32*
  %v5_14b8c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14b8c, i32* %v4_14b8c, align 4
  %v6_14b8c = add i32 %v0_14b8c, 8
  %v7_14b8c = inttoptr i32 %v6_14b8c to i32*
  %v8_14b8c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14b8c, i32* %v7_14b8c, align 4
  %v9_14b8c = add i32 %v0_14b8c, 12
  %v10_14b8c = inttoptr i32 %v9_14b8c to i32*
  %v11_14b8c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_14b8c, i32* %v10_14b8c, align 4
  %v12_14b8c = add i32 %v0_14b8c, 16
  store i32 %v12_14b8c, i32* @r0, align 4
  %v0_14b90 = load i32, i32* %r2.global-to-local, align 4
  %v2_14b90 = add i32 %v0_14b90, -16
  store i32 %v2_14b90, i32* %r2.global-to-local, align 4
  %v6_14b94 = icmp slt i32 %v0_14b90, 16
  br i1 %v6_14b94, label %dec_label_pc_14b98, label %dec_label_pc_14b68.dec_label_pc_14b68_crit_edge

dec_label_pc_14b68.dec_label_pc_14b68_crit_edge:  ; preds = %dec_label_pc_14b68
  %v0_14b68.pre = load i32, i32* @lr, align 4
  %v0_14b6c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14b68

dec_label_pc_14b98:                               ; preds = %dec_label_pc_14b68
  %v2_14b98 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14b98, i32* @r4, align 4
  %v5_14b98 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14b98, i32* @r5, align 4
  %v2_14b9c = add i32 %v0_14b90, -4
  store i32 %v2_14b9c, i32* %r2.global-to-local, align 4
  %v4_14b9c = add i32 %v0_14b90, 2147483632
  %v5_14b9c = and i32 %v2_14b9c, %v4_14b9c
  %v6_14b9c = icmp slt i32 %v5_14b9c, 0
  store i1 %v6_14b9c, i1* %cpsr_v.global-to-local, align 1
  %v7_14b9c = icmp slt i32 %v2_14b9c, 0
  store i1 %v7_14b9c, i1* %cpsr_n.global-to-local, align 1
  %v8_14b9c = icmp eq i32 %v2_14b9c, 0
  store i1 %v8_14b9c, i1* %cpsr_z.global-to-local, align 1
  %v5_14ba0 = icmp slt i32 %v2_14b90, -12
  br i1 %v5_14ba0, label %dec_label_pc_14bbc, label %dec_label_pc_14ba4

dec_label_pc_14ba4:                               ; preds = %dec_label_pc_14b98, %dec_label_pc_14b58, %dec_label_pc_14ba4
  %v1_14bb0 = phi i32 [ %v4_14bb0, %dec_label_pc_14ba4 ], [ %v12_14b8c, %dec_label_pc_14b98 ], [ %v0_14b8c74, %dec_label_pc_14b58 ]
  %v0_14ba4 = load i32, i32* @lr, align 4
  %v3_14ba4 = udiv i32 %v0_14ba4, 256
  store i32 %v3_14ba4, i32* %ip.global-to-local, align 4
  %v0_14ba8 = load i32, i32* %r1.global-to-local, align 4
  %v1_14ba8 = inttoptr i32 %v0_14ba8 to i32*
  %v2_14ba8 = load i32, i32* %v1_14ba8, align 4
  store i32 %v2_14ba8, i32* @lr, align 4
  %v4_14ba8 = add i32 %v0_14ba8, 4
  store i32 %v4_14ba8, i32* %r1.global-to-local, align 4
  %v4_14bac = mul i32 %v2_14ba8, 16777216
  %v5_14bac = or i32 %v4_14bac, %v3_14ba4
  store i32 %v5_14bac, i32* %ip.global-to-local, align 4
  %v2_14bb0 = inttoptr i32 %v1_14bb0 to i32*
  store i32 %v5_14bac, i32* %v2_14bb0, align 4
  %v3_14bb0 = load i32, i32* @r0, align 4
  %v4_14bb0 = add i32 %v3_14bb0, 4
  store i32 %v4_14bb0, i32* @r0, align 4
  %v0_14bb4 = load i32, i32* %r2.global-to-local, align 4
  %v2_14bb4 = add i32 %v0_14bb4, -4
  store i32 %v2_14bb4, i32* %r2.global-to-local, align 4
  %v6_14bb8 = icmp slt i32 %v0_14bb4, 4
  br i1 %v6_14bb8, label %dec_label_pc_14bbc.loopexit, label %dec_label_pc_14ba4

dec_label_pc_14bbc.loopexit:                      ; preds = %dec_label_pc_14ba4
  %v4_14bb4 = sub i32 3, %v0_14bb4
  %v5_14bb4 = and i32 %v4_14bb4, %v0_14bb4
  %v6_14bb4 = icmp slt i32 %v5_14bb4, 0
  %v7_14bb4 = icmp slt i32 %v2_14bb4, 0
  store i1 %v6_14bb4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14bb4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14bbc

dec_label_pc_14bbc:                               ; preds = %dec_label_pc_14bbc.loopexit, %dec_label_pc_14b98
  %v2_14afc111 = phi i32 [ %v4_14bb0, %dec_label_pc_14bbc.loopexit ], [ %v12_14b8c, %dec_label_pc_14b98 ]
  %v0_14aec107 = phi i32 [ %v2_14bb4, %dec_label_pc_14bbc.loopexit ], [ %v2_14b9c, %dec_label_pc_14b98 ]
  %v0_14bbc = load i32, i32* %r1.global-to-local, align 4
  %v1_14bbc = add i32 %v0_14bbc, -3
  store i32 %v1_14bbc, i32* @r1, align 4
  br label %bb131

dec_label_pc_14bc4:                               ; preds = %dec_label_pc_14b44
  br i1 %v5_14c34, label %dec_label_pc_14c10, label %dec_label_pc_14bcc

dec_label_pc_14bcc:                               ; preds = %dec_label_pc_14bc4
  store i32 %v2_14c30, i32* %r2.global-to-local, align 4
  %v3_14bd0 = load i32, i32* @r4, align 4
  store i32 %v3_14bd0, i32* %stack_var_-16, align 4
  %v6_14bd0 = load i32, i32* @r5, align 4
  store i32 %v6_14bd0, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14bd4

dec_label_pc_14bd4:                               ; preds = %dec_label_pc_14bd4.dec_label_pc_14bd4_crit_edge, %dec_label_pc_14bcc
  %v0_14bf8 = phi i32 [ %v12_14bf8, %dec_label_pc_14bd4.dec_label_pc_14bd4_crit_edge ], [ %v0_14b8c74, %dec_label_pc_14bcc ]
  %v0_14bd8 = phi i32 [ %v0_14bd8.pre, %dec_label_pc_14bd4.dec_label_pc_14bd4_crit_edge ], [ %v4_14b48, %dec_label_pc_14bcc ]
  %v0_14bd4 = phi i32 [ %v0_14bd4.pre, %dec_label_pc_14bd4.dec_label_pc_14bd4_crit_edge ], [ %v2_14b48, %dec_label_pc_14bcc ]
  %v3_14bd4 = udiv i32 %v0_14bd4, 65536
  store i32 %v3_14bd4, i32* %r3.global-to-local, align 4
  %v1_14bd8 = inttoptr i32 %v0_14bd8 to i32*
  %v2_14bd8 = load i32, i32* %v1_14bd8, align 4
  store i32 %v2_14bd8, i32* %r4.global-to-local, align 4
  %v3_14bd8 = add i32 %v0_14bd8, 4
  %v4_14bd8 = inttoptr i32 %v3_14bd8 to i32*
  %v5_14bd8 = load i32, i32* %v4_14bd8, align 4
  store i32 %v5_14bd8, i32* %r5.global-to-local, align 4
  %v6_14bd8 = add i32 %v0_14bd8, 8
  %v7_14bd8 = inttoptr i32 %v6_14bd8 to i32*
  %v8_14bd8 = load i32, i32* %v7_14bd8, align 4
  store i32 %v8_14bd8, i32* %ip.global-to-local, align 4
  %v9_14bd8 = add i32 %v0_14bd8, 12
  %v10_14bd8 = inttoptr i32 %v9_14bd8 to i32*
  %v11_14bd8 = load i32, i32* %v10_14bd8, align 4
  store i32 %v11_14bd8, i32* @lr, align 4
  %v12_14bd8 = add i32 %v0_14bd8, 16
  store i32 %v12_14bd8, i32* %r1.global-to-local, align 4
  %v4_14bdc = mul i32 %v2_14bd8, 65536
  %v5_14bdc = or i32 %v4_14bdc, %v3_14bd4
  store i32 %v5_14bdc, i32* %r3.global-to-local, align 4
  %v3_14be0 = udiv i32 %v2_14bd8, 65536
  %v4_14be4 = mul i32 %v5_14bd8, 65536
  %v5_14be4 = or i32 %v4_14be4, %v3_14be0
  store i32 %v5_14be4, i32* %r4.global-to-local, align 4
  %v3_14be8 = udiv i32 %v5_14bd8, 65536
  %v4_14bec = mul i32 %v8_14bd8, 65536
  %v5_14bec = or i32 %v4_14bec, %v3_14be8
  store i32 %v5_14bec, i32* %r5.global-to-local, align 4
  %v3_14bf0 = udiv i32 %v8_14bd8, 65536
  %v4_14bf4 = mul i32 %v11_14bd8, 65536
  %v5_14bf4 = or i32 %v4_14bf4, %v3_14bf0
  store i32 %v5_14bf4, i32* %ip.global-to-local, align 4
  %v1_14bf8 = inttoptr i32 %v0_14bf8 to i32*
  store i32 %v5_14bdc, i32* %v1_14bf8, align 4
  %v3_14bf8 = add i32 %v0_14bf8, 4
  %v4_14bf8 = inttoptr i32 %v3_14bf8 to i32*
  %v5_14bf8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14bf8, i32* %v4_14bf8, align 4
  %v6_14bf8 = add i32 %v0_14bf8, 8
  %v7_14bf8 = inttoptr i32 %v6_14bf8 to i32*
  %v8_14bf8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14bf8, i32* %v7_14bf8, align 4
  %v9_14bf8 = add i32 %v0_14bf8, 12
  %v10_14bf8 = inttoptr i32 %v9_14bf8 to i32*
  %v11_14bf8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_14bf8, i32* %v10_14bf8, align 4
  %v12_14bf8 = add i32 %v0_14bf8, 16
  store i32 %v12_14bf8, i32* @r0, align 4
  %v0_14bfc = load i32, i32* %r2.global-to-local, align 4
  %v2_14bfc = add i32 %v0_14bfc, -16
  store i32 %v2_14bfc, i32* %r2.global-to-local, align 4
  %v6_14c00 = icmp slt i32 %v0_14bfc, 16
  br i1 %v6_14c00, label %dec_label_pc_14c04, label %dec_label_pc_14bd4.dec_label_pc_14bd4_crit_edge

dec_label_pc_14bd4.dec_label_pc_14bd4_crit_edge:  ; preds = %dec_label_pc_14bd4
  %v0_14bd4.pre = load i32, i32* @lr, align 4
  %v0_14bd8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14bd4

dec_label_pc_14c04:                               ; preds = %dec_label_pc_14bd4
  %v2_14c04 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14c04, i32* @r4, align 4
  %v5_14c04 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14c04, i32* @r5, align 4
  %v2_14c08 = add i32 %v0_14bfc, -4
  store i32 %v2_14c08, i32* %r2.global-to-local, align 4
  %v4_14c08 = add i32 %v0_14bfc, 2147483632
  %v5_14c08 = and i32 %v2_14c08, %v4_14c08
  %v6_14c08 = icmp slt i32 %v5_14c08, 0
  store i1 %v6_14c08, i1* %cpsr_v.global-to-local, align 1
  %v7_14c08 = icmp slt i32 %v2_14c08, 0
  store i1 %v7_14c08, i1* %cpsr_n.global-to-local, align 1
  %v8_14c08 = icmp eq i32 %v2_14c08, 0
  store i1 %v8_14c08, i1* %cpsr_z.global-to-local, align 1
  %v5_14c0c = icmp slt i32 %v2_14bfc, -12
  br i1 %v5_14c0c, label %dec_label_pc_14c28, label %dec_label_pc_14c10

dec_label_pc_14c10:                               ; preds = %dec_label_pc_14c04, %dec_label_pc_14bc4, %dec_label_pc_14c10
  %v1_14c1c = phi i32 [ %v4_14c1c, %dec_label_pc_14c10 ], [ %v12_14bf8, %dec_label_pc_14c04 ], [ %v0_14b8c74, %dec_label_pc_14bc4 ]
  %v0_14c10 = load i32, i32* @lr, align 4
  %v3_14c10 = udiv i32 %v0_14c10, 65536
  store i32 %v3_14c10, i32* %ip.global-to-local, align 4
  %v0_14c14 = load i32, i32* %r1.global-to-local, align 4
  %v1_14c14 = inttoptr i32 %v0_14c14 to i32*
  %v2_14c14 = load i32, i32* %v1_14c14, align 4
  store i32 %v2_14c14, i32* @lr, align 4
  %v4_14c14 = add i32 %v0_14c14, 4
  store i32 %v4_14c14, i32* %r1.global-to-local, align 4
  %v4_14c18 = mul i32 %v2_14c14, 65536
  %v5_14c18 = or i32 %v4_14c18, %v3_14c10
  store i32 %v5_14c18, i32* %ip.global-to-local, align 4
  %v2_14c1c = inttoptr i32 %v1_14c1c to i32*
  store i32 %v5_14c18, i32* %v2_14c1c, align 4
  %v3_14c1c = load i32, i32* @r0, align 4
  %v4_14c1c = add i32 %v3_14c1c, 4
  store i32 %v4_14c1c, i32* @r0, align 4
  %v0_14c20 = load i32, i32* %r2.global-to-local, align 4
  %v2_14c20 = add i32 %v0_14c20, -4
  store i32 %v2_14c20, i32* %r2.global-to-local, align 4
  %v6_14c24 = icmp slt i32 %v0_14c20, 4
  br i1 %v6_14c24, label %dec_label_pc_14c28.loopexit, label %dec_label_pc_14c10

dec_label_pc_14c28.loopexit:                      ; preds = %dec_label_pc_14c10
  %v4_14c20 = sub i32 3, %v0_14c20
  %v5_14c20 = and i32 %v4_14c20, %v0_14c20
  %v6_14c20 = icmp slt i32 %v5_14c20, 0
  %v7_14c20 = icmp slt i32 %v2_14c20, 0
  store i1 %v6_14c20, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14c20, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14c28

dec_label_pc_14c28:                               ; preds = %dec_label_pc_14c28.loopexit, %dec_label_pc_14c04
  %v2_14afc112 = phi i32 [ %v4_14c1c, %dec_label_pc_14c28.loopexit ], [ %v12_14bf8, %dec_label_pc_14c04 ]
  %v0_14aec108 = phi i32 [ %v2_14c20, %dec_label_pc_14c28.loopexit ], [ %v2_14c08, %dec_label_pc_14c04 ]
  %v0_14c28 = load i32, i32* %r1.global-to-local, align 4
  %v1_14c28 = add i32 %v0_14c28, -2
  store i32 %v1_14c28, i32* @r1, align 4
  br label %bb131

dec_label_pc_14c30:                               ; preds = %dec_label_pc_14b44
  br i1 %v5_14c34, label %dec_label_pc_14c7c, label %dec_label_pc_14c38

dec_label_pc_14c38:                               ; preds = %dec_label_pc_14c30
  store i32 %v2_14c30, i32* %r2.global-to-local, align 4
  %v3_14c3c = load i32, i32* @r4, align 4
  store i32 %v3_14c3c, i32* %stack_var_-16, align 4
  %v6_14c3c = load i32, i32* @r5, align 4
  store i32 %v6_14c3c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14c40

dec_label_pc_14c40:                               ; preds = %dec_label_pc_14c40.dec_label_pc_14c40_crit_edge, %dec_label_pc_14c38
  %v0_14c64 = phi i32 [ %v12_14c64, %dec_label_pc_14c40.dec_label_pc_14c40_crit_edge ], [ %v0_14b8c74, %dec_label_pc_14c38 ]
  %v0_14c44 = phi i32 [ %v0_14c44.pre, %dec_label_pc_14c40.dec_label_pc_14c40_crit_edge ], [ %v4_14b48, %dec_label_pc_14c38 ]
  %v0_14c40 = phi i32 [ %v0_14c40.pre, %dec_label_pc_14c40.dec_label_pc_14c40_crit_edge ], [ %v2_14b48, %dec_label_pc_14c38 ]
  %v3_14c40 = udiv i32 %v0_14c40, 16777216
  store i32 %v3_14c40, i32* %r3.global-to-local, align 4
  %v1_14c44 = inttoptr i32 %v0_14c44 to i32*
  %v2_14c44 = load i32, i32* %v1_14c44, align 4
  store i32 %v2_14c44, i32* %r4.global-to-local, align 4
  %v3_14c44 = add i32 %v0_14c44, 4
  %v4_14c44 = inttoptr i32 %v3_14c44 to i32*
  %v5_14c44 = load i32, i32* %v4_14c44, align 4
  store i32 %v5_14c44, i32* %r5.global-to-local, align 4
  %v6_14c44 = add i32 %v0_14c44, 8
  %v7_14c44 = inttoptr i32 %v6_14c44 to i32*
  %v8_14c44 = load i32, i32* %v7_14c44, align 4
  store i32 %v8_14c44, i32* %ip.global-to-local, align 4
  %v9_14c44 = add i32 %v0_14c44, 12
  %v10_14c44 = inttoptr i32 %v9_14c44 to i32*
  %v11_14c44 = load i32, i32* %v10_14c44, align 4
  store i32 %v11_14c44, i32* @lr, align 4
  %v12_14c44 = add i32 %v0_14c44, 16
  store i32 %v12_14c44, i32* %r1.global-to-local, align 4
  %v4_14c48 = mul i32 %v2_14c44, 256
  %v5_14c48 = or i32 %v4_14c48, %v3_14c40
  store i32 %v5_14c48, i32* %r3.global-to-local, align 4
  %v3_14c4c = udiv i32 %v2_14c44, 16777216
  %v4_14c50 = mul i32 %v5_14c44, 256
  %v5_14c50 = or i32 %v4_14c50, %v3_14c4c
  store i32 %v5_14c50, i32* %r4.global-to-local, align 4
  %v3_14c54 = udiv i32 %v5_14c44, 16777216
  %v4_14c58 = mul i32 %v8_14c44, 256
  %v5_14c58 = or i32 %v4_14c58, %v3_14c54
  store i32 %v5_14c58, i32* %r5.global-to-local, align 4
  %v3_14c5c = udiv i32 %v8_14c44, 16777216
  %v4_14c60 = mul i32 %v11_14c44, 256
  %v5_14c60 = or i32 %v4_14c60, %v3_14c5c
  store i32 %v5_14c60, i32* %ip.global-to-local, align 4
  %v1_14c64 = inttoptr i32 %v0_14c64 to i32*
  store i32 %v5_14c48, i32* %v1_14c64, align 4
  %v3_14c64 = add i32 %v0_14c64, 4
  %v4_14c64 = inttoptr i32 %v3_14c64 to i32*
  %v5_14c64 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14c64, i32* %v4_14c64, align 4
  %v6_14c64 = add i32 %v0_14c64, 8
  %v7_14c64 = inttoptr i32 %v6_14c64 to i32*
  %v8_14c64 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14c64, i32* %v7_14c64, align 4
  %v9_14c64 = add i32 %v0_14c64, 12
  %v10_14c64 = inttoptr i32 %v9_14c64 to i32*
  %v11_14c64 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_14c64, i32* %v10_14c64, align 4
  %v12_14c64 = add i32 %v0_14c64, 16
  store i32 %v12_14c64, i32* @r0, align 4
  %v0_14c68 = load i32, i32* %r2.global-to-local, align 4
  %v2_14c68 = add i32 %v0_14c68, -16
  store i32 %v2_14c68, i32* %r2.global-to-local, align 4
  %v6_14c6c = icmp slt i32 %v0_14c68, 16
  br i1 %v6_14c6c, label %dec_label_pc_14c70, label %dec_label_pc_14c40.dec_label_pc_14c40_crit_edge

dec_label_pc_14c40.dec_label_pc_14c40_crit_edge:  ; preds = %dec_label_pc_14c40
  %v0_14c40.pre = load i32, i32* @lr, align 4
  %v0_14c44.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14c40

dec_label_pc_14c70:                               ; preds = %dec_label_pc_14c40
  %v2_14c70 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14c70, i32* @r4, align 4
  %v5_14c70 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14c70, i32* @r5, align 4
  %v2_14c74 = add i32 %v0_14c68, -4
  store i32 %v2_14c74, i32* %r2.global-to-local, align 4
  %v4_14c74 = add i32 %v0_14c68, 2147483632
  %v5_14c74 = and i32 %v2_14c74, %v4_14c74
  %v6_14c74 = icmp slt i32 %v5_14c74, 0
  store i1 %v6_14c74, i1* %cpsr_v.global-to-local, align 1
  %v7_14c74 = icmp slt i32 %v2_14c74, 0
  store i1 %v7_14c74, i1* %cpsr_n.global-to-local, align 1
  %v8_14c74 = icmp eq i32 %v2_14c74, 0
  store i1 %v8_14c74, i1* %cpsr_z.global-to-local, align 1
  %v5_14c78 = icmp slt i32 %v2_14c68, -12
  br i1 %v5_14c78, label %dec_label_pc_14c94, label %dec_label_pc_14c7c

dec_label_pc_14c7c:                               ; preds = %dec_label_pc_14c70, %dec_label_pc_14c30, %dec_label_pc_14c7c
  %v1_14c88 = phi i32 [ %v4_14c88, %dec_label_pc_14c7c ], [ %v12_14c64, %dec_label_pc_14c70 ], [ %v0_14b8c74, %dec_label_pc_14c30 ]
  %v0_14c7c = load i32, i32* @lr, align 4
  %v3_14c7c = udiv i32 %v0_14c7c, 16777216
  store i32 %v3_14c7c, i32* %ip.global-to-local, align 4
  %v0_14c80 = load i32, i32* %r1.global-to-local, align 4
  %v1_14c80 = inttoptr i32 %v0_14c80 to i32*
  %v2_14c80 = load i32, i32* %v1_14c80, align 4
  store i32 %v2_14c80, i32* @lr, align 4
  %v4_14c80 = add i32 %v0_14c80, 4
  store i32 %v4_14c80, i32* %r1.global-to-local, align 4
  %v4_14c84 = mul i32 %v2_14c80, 256
  %v5_14c84 = or i32 %v4_14c84, %v3_14c7c
  store i32 %v5_14c84, i32* %ip.global-to-local, align 4
  %v2_14c88 = inttoptr i32 %v1_14c88 to i32*
  store i32 %v5_14c84, i32* %v2_14c88, align 4
  %v3_14c88 = load i32, i32* @r0, align 4
  %v4_14c88 = add i32 %v3_14c88, 4
  store i32 %v4_14c88, i32* @r0, align 4
  %v0_14c8c = load i32, i32* %r2.global-to-local, align 4
  %v2_14c8c = add i32 %v0_14c8c, -4
  store i32 %v2_14c8c, i32* %r2.global-to-local, align 4
  %v6_14c90 = icmp slt i32 %v0_14c8c, 4
  br i1 %v6_14c90, label %dec_label_pc_14c94.loopexit, label %dec_label_pc_14c7c

dec_label_pc_14c94.loopexit:                      ; preds = %dec_label_pc_14c7c
  %v4_14c8c = sub i32 3, %v0_14c8c
  %v5_14c8c = and i32 %v4_14c8c, %v0_14c8c
  %v6_14c8c = icmp slt i32 %v5_14c8c, 0
  %v7_14c8c = icmp slt i32 %v2_14c8c, 0
  store i1 %v6_14c8c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14c8c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14c94

dec_label_pc_14c94:                               ; preds = %dec_label_pc_14c94.loopexit, %dec_label_pc_14c70
  %v2_14afc113 = phi i32 [ %v4_14c88, %dec_label_pc_14c94.loopexit ], [ %v12_14c64, %dec_label_pc_14c70 ]
  %v0_14aec109 = phi i32 [ %v2_14c8c, %dec_label_pc_14c94.loopexit ], [ %v2_14c74, %dec_label_pc_14c70 ]
  %v0_14c94 = load i32, i32* %r1.global-to-local, align 4
  %v1_14c94 = add i32 %v0_14c94, -1
  store i32 %v1_14c94, i32* @r1, align 4
  br label %bb131

dec_label_pc_14c9c:                               ; preds = %dec_label_pc_14a50
  %v1_14c9c = load i32, i32* @r2, align 4
  %v2_14c9c = add i32 %v1_14c9c, %v0_14a50
  store i32 %v2_14c9c, i32* %r1.global-to-local, align 4
  %v2_14ca0 = add i32 %v1_14c9c, %v1_14a50
  store i32 %v2_14ca0, i32* %r0.global-to-local, align 4
  %v2_14ca4 = add i32 %v1_14c9c, -4
  store i32 %v2_14ca4, i32* %r2.global-to-local, align 4
  %v4_14ca4 = sub i32 3, %v1_14c9c
  %v5_14ca4 = and i32 %v4_14ca4, %v1_14c9c
  %v6_14ca4 = icmp slt i32 %v5_14ca4, 0
  store i1 %v6_14ca4, i1* %cpsr_v.global-to-local, align 1
  %v7_14ca4 = icmp slt i32 %v2_14ca4, 0
  store i1 %v7_14ca4, i1* %cpsr_n.global-to-local, align 1
  %v8_14ca4 = icmp eq i32 %v1_14c9c, 4
  store i1 %v8_14ca4, i1* %cpsr_z.global-to-local, align 1
  %v5_14ca8 = icmp slt i32 %v1_14c9c, 4
  br i1 %v5_14ca8, label %bb141, label %dec_label_pc_14cac

dec_label_pc_14cac:                               ; preds = %dec_label_pc_14c9c
  %v1_14cac = urem i32 %v2_14ca0, 4
  store i32 %v1_14cac, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14cac = icmp eq i32 %v1_14cac, 0
  store i1 %v2_14cac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14cac, label %dec_label_pc_14cb4, label %dec_label_pc_14d54

dec_label_pc_14cb4:                               ; preds = %dec_label_pc_14cac
  %v1_14cb4 = urem i32 %v2_14c9c, 4
  store i32 %v1_14cb4, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14cb4 = icmp eq i32 %v1_14cb4, 0
  store i1 %v2_14cb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14cb4, label %dec_label_pc_14cbc, label %dec_label_pc_14d80

dec_label_pc_14cbc:                               ; preds = %dec_label_pc_14cb4, %dec_label_pc_14d78
  %v0_14cd448 = phi i32 [ %v2_14ca0, %dec_label_pc_14cb4 ], [ %v0_14dc831, %dec_label_pc_14d78 ]
  %v0_14cd047 = phi i32 [ %v2_14c9c, %dec_label_pc_14cb4 ], [ %v0_14d78, %dec_label_pc_14d78 ]
  %v0_14cbc = phi i32 [ %v2_14ca4, %dec_label_pc_14cb4 ], [ %v2_14d70, %dec_label_pc_14d78 ]
  %v2_14cbc = add i32 %v0_14cbc, -8
  store i32 %v2_14cbc, i32* %r2.global-to-local, align 4
  %v4_14cbc = sub i32 7, %v0_14cbc
  %v5_14cbc = and i32 %v4_14cbc, %v0_14cbc
  %v6_14cbc = icmp slt i32 %v5_14cbc, 0
  store i1 %v6_14cbc, i1* %cpsr_v.global-to-local, align 1
  %v7_14cbc = icmp slt i32 %v2_14cbc, 0
  store i1 %v7_14cbc, i1* %cpsr_n.global-to-local, align 1
  %v8_14cbc = icmp eq i32 %v0_14cbc, 8
  store i1 %v8_14cbc, i1* %cpsr_z.global-to-local, align 1
  %v5_14cc0 = icmp slt i32 %v0_14cbc, 8
  br i1 %v5_14cc0, label %dec_label_pc_14d0c, label %dec_label_pc_14cc4

dec_label_pc_14cc4:                               ; preds = %dec_label_pc_14cbc
  %v3_14cc4 = load i32, i32* @r4, align 4
  store i32 %v3_14cc4, i32* %stack_var_-8, align 4
  %v6_14cc4 = load i32, i32* @lr, align 4
  %v2_14cc8 = add i32 %v0_14cbc, -28
  store i32 %v2_14cc8, i32* %r2.global-to-local, align 4
  %v4_14cc8 = sub i32 27, %v0_14cbc
  %v5_14cc8 = and i32 %v4_14cc8, %v2_14cbc
  %v6_14cc8 = icmp slt i32 %v5_14cc8, 0
  store i1 %v6_14cc8, i1* %cpsr_v.global-to-local, align 1
  %v7_14cc8 = icmp slt i32 %v2_14cc8, 0
  store i1 %v7_14cc8, i1* %cpsr_n.global-to-local, align 1
  %v8_14cc8 = icmp eq i32 %v2_14cbc, 20
  store i1 %v8_14cc8, i1* %cpsr_z.global-to-local, align 1
  %v5_14ccc = icmp slt i32 %v2_14cbc, 20
  br i1 %v5_14ccc, label %dec_label_pc_14ce8, label %dec_label_pc_14cd0

dec_label_pc_14cd0:                               ; preds = %dec_label_pc_14cc4, %dec_label_pc_14cd0.dec_label_pc_14cd0_crit_edge
  %v0_14cd4 = phi i32 [ %v1_14cdc, %dec_label_pc_14cd0.dec_label_pc_14cd0_crit_edge ], [ %v0_14cd448, %dec_label_pc_14cc4 ]
  %v0_14cd0 = phi i32 [ %v0_14cd0.pre, %dec_label_pc_14cd0.dec_label_pc_14cd0_crit_edge ], [ %v0_14cd047, %dec_label_pc_14cc4 ]
  %v1_14cd0 = add i32 %v0_14cd0, -4
  %v2_14cd0 = inttoptr i32 %v1_14cd0 to i32*
  %v3_14cd0 = load i32, i32* %v2_14cd0, align 4
  store i32 %v3_14cd0, i32* %r3.global-to-local, align 4
  %v4_14cd0 = add i32 %v0_14cd0, -8
  %v5_14cd0 = inttoptr i32 %v4_14cd0 to i32*
  %v6_14cd0 = load i32, i32* %v5_14cd0, align 4
  store i32 %v6_14cd0, i32* %r4.global-to-local, align 4
  %v7_14cd0 = add i32 %v0_14cd0, -12
  %v8_14cd0 = inttoptr i32 %v7_14cd0 to i32*
  %v9_14cd0 = load i32, i32* %v8_14cd0, align 4
  store i32 %v9_14cd0, i32* %ip.global-to-local, align 4
  %v10_14cd0 = add i32 %v0_14cd0, -16
  %v11_14cd0 = inttoptr i32 %v10_14cd0 to i32*
  %v12_14cd0 = load i32, i32* %v11_14cd0, align 4
  store i32 %v12_14cd0, i32* %lr.global-to-local, align 4
  store i32 %v10_14cd0, i32* %r1.global-to-local, align 4
  %v1_14cd4 = add i32 %v0_14cd4, -16
  %v2_14cd4 = inttoptr i32 %v1_14cd4 to i32*
  store i32 %v3_14cd0, i32* %v2_14cd4, align 4
  %v4_14cd4 = add i32 %v0_14cd4, -12
  %v5_14cd4 = inttoptr i32 %v4_14cd4 to i32*
  %v6_14cd4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_14cd4, i32* %v5_14cd4, align 4
  %v7_14cd4 = add i32 %v0_14cd4, -8
  %v8_14cd4 = inttoptr i32 %v7_14cd4 to i32*
  %v9_14cd4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14cd4, i32* %v8_14cd4, align 4
  %v10_14cd4 = add i32 %v0_14cd4, -4
  %v11_14cd4 = inttoptr i32 %v10_14cd4 to i32*
  %v12_14cd4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14cd4, i32* %v11_14cd4, align 4
  store i32 %v1_14cd4, i32* %r0.global-to-local, align 4
  %v0_14cd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_14cd8 = add i32 %v0_14cd8, -4
  %v2_14cd8 = inttoptr i32 %v1_14cd8 to i32*
  %v3_14cd8 = load i32, i32* %v2_14cd8, align 4
  store i32 %v3_14cd8, i32* %r3.global-to-local, align 4
  %v4_14cd8 = add i32 %v0_14cd8, -8
  %v5_14cd8 = inttoptr i32 %v4_14cd8 to i32*
  %v6_14cd8 = load i32, i32* %v5_14cd8, align 4
  store i32 %v6_14cd8, i32* %r4.global-to-local, align 4
  %v7_14cd8 = add i32 %v0_14cd8, -12
  %v8_14cd8 = inttoptr i32 %v7_14cd8 to i32*
  %v9_14cd8 = load i32, i32* %v8_14cd8, align 4
  store i32 %v9_14cd8, i32* %ip.global-to-local, align 4
  %v10_14cd8 = add i32 %v0_14cd8, -16
  %v11_14cd8 = inttoptr i32 %v10_14cd8 to i32*
  %v12_14cd8 = load i32, i32* %v11_14cd8, align 4
  store i32 %v12_14cd8, i32* %lr.global-to-local, align 4
  store i32 %v10_14cd8, i32* %r1.global-to-local, align 4
  %v1_14cdc = add i32 %v0_14cd4, -32
  %v2_14cdc = inttoptr i32 %v1_14cdc to i32*
  store i32 %v3_14cd8, i32* %v2_14cdc, align 4
  %v4_14cdc = add i32 %v0_14cd4, -28
  %v5_14cdc = inttoptr i32 %v4_14cdc to i32*
  %v6_14cdc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_14cdc, i32* %v5_14cdc, align 4
  %v7_14cdc = add i32 %v0_14cd4, -24
  %v8_14cdc = inttoptr i32 %v7_14cdc to i32*
  %v9_14cdc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14cdc, i32* %v8_14cdc, align 4
  %v10_14cdc = add i32 %v0_14cd4, -20
  %v11_14cdc = inttoptr i32 %v10_14cdc to i32*
  %v12_14cdc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14cdc, i32* %v11_14cdc, align 4
  store i32 %v1_14cdc, i32* %r0.global-to-local, align 4
  %v0_14ce0 = load i32, i32* %r2.global-to-local, align 4
  %v2_14ce0 = add i32 %v0_14ce0, -32
  store i32 %v2_14ce0, i32* %r2.global-to-local, align 4
  %v6_14ce4 = icmp slt i32 %v0_14ce0, 32
  br i1 %v6_14ce4, label %dec_label_pc_14ce8.loopexit, label %dec_label_pc_14cd0.dec_label_pc_14cd0_crit_edge

dec_label_pc_14cd0.dec_label_pc_14cd0_crit_edge:  ; preds = %dec_label_pc_14cd0
  %v0_14cd0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14cd0

dec_label_pc_14ce8.loopexit:                      ; preds = %dec_label_pc_14cd0
  %v4_14ce0 = sub i32 31, %v0_14ce0
  %v5_14ce0 = and i32 %v4_14ce0, %v0_14ce0
  %v6_14ce0 = icmp slt i32 %v5_14ce0, 0
  %v7_14ce0 = icmp slt i32 %v2_14ce0, 0
  store i1 %v6_14ce0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14ce0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14ce8

dec_label_pc_14ce8:                               ; preds = %dec_label_pc_14ce8.loopexit, %dec_label_pc_14cc4
  %v6_14cf0 = phi i32 [ %v1_14cdc, %dec_label_pc_14ce8.loopexit ], [ %v0_14cd448, %dec_label_pc_14cc4 ]
  %v0_14cf8.pr = phi i32 [ %v2_14ce0, %dec_label_pc_14ce8.loopexit ], [ %v2_14cc8, %dec_label_pc_14cc4 ]
  %v4_14ce8 = add i32 %v0_14cf8.pr, 16
  %v6_14ce8 = sub i32 0, %v0_14cf8.pr
  %v7_14ce8 = and i32 %v4_14ce8, %v6_14ce8
  %v8_14ce8 = icmp slt i32 %v7_14ce8, 0
  store i1 %v8_14ce8, i1* %cpsr_v.global-to-local, align 1
  %v9_14ce8 = icmp slt i32 %v4_14ce8, 0
  store i1 %v9_14ce8, i1* %cpsr_n.global-to-local, align 1
  %v10_14ce8 = icmp eq i32 %v4_14ce8, 0
  store i1 %v10_14ce8, i1* %cpsr_z.global-to-local, align 1
  %v5_14cec = icmp slt i32 %v0_14cf8.pr, -16
  br i1 %v5_14cec, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_14ce8
  %v6_14cec = load i32, i32* %r1.global-to-local, align 4
  %v7_14cec = add i32 %v6_14cec, -4
  %v8_14cec = inttoptr i32 %v7_14cec to i32*
  %v9_14cec = load i32, i32* %v8_14cec, align 4
  store i32 %v9_14cec, i32* %r3.global-to-local, align 4
  %v10_14cec = add i32 %v6_14cec, -8
  %v11_14cec = inttoptr i32 %v10_14cec to i32*
  %v12_14cec = load i32, i32* %v11_14cec, align 4
  store i32 %v12_14cec, i32* %r4.global-to-local, align 4
  %v13_14cec = add i32 %v6_14cec, -12
  %v14_14cec = inttoptr i32 %v13_14cec to i32*
  %v15_14cec = load i32, i32* %v14_14cec, align 4
  store i32 %v15_14cec, i32* %ip.global-to-local, align 4
  %v16_14cec = add i32 %v6_14cec, -16
  %v17_14cec = inttoptr i32 %v16_14cec to i32*
  %v18_14cec = load i32, i32* %v17_14cec, align 4
  store i32 %v18_14cec, i32* %lr.global-to-local, align 4
  store i32 %v16_14cec, i32* %r1.global-to-local, align 4
  %v7_14cf0 = add i32 %v6_14cf0, -16
  %v8_14cf0 = inttoptr i32 %v7_14cf0 to i32*
  store i32 %v9_14cec, i32* %v8_14cf0, align 4
  %v10_14cf0 = add i32 %v6_14cf0, -12
  %v11_14cf0 = inttoptr i32 %v10_14cf0 to i32*
  %v12_14cf0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_14cf0, i32* %v11_14cf0, align 4
  %v13_14cf0 = add i32 %v6_14cf0, -8
  %v14_14cf0 = inttoptr i32 %v13_14cf0 to i32*
  %v15_14cf0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v15_14cf0, i32* %v14_14cf0, align 4
  %v16_14cf0 = add i32 %v6_14cf0, -4
  %v17_14cf0 = inttoptr i32 %v16_14cf0 to i32*
  %v18_14cf0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_14cf0, i32* %v17_14cf0, align 4
  store i32 %v7_14cf0, i32* %r0.global-to-local, align 4
  %v6_14cf4 = load i32, i32* %r2.global-to-local, align 4
  %v7_14cf4 = add i32 %v6_14cf4, -16
  store i32 %v7_14cf4, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_14ce8, %bb138
  %v6_14d00 = phi i32 [ %v7_14cf0, %bb138 ], [ %v6_14cf0, %dec_label_pc_14ce8 ]
  %v0_14cf8 = phi i32 [ %v7_14cf4, %bb138 ], [ %v0_14cf8.pr, %dec_label_pc_14ce8 ]
  %v4_14cf8 = add i32 %v0_14cf8, 20
  store i32 %v4_14cf8, i32* %r2.global-to-local, align 4
  %v6_14cf8 = sub i32 0, %v0_14cf8
  %v7_14cf8 = and i32 %v4_14cf8, %v6_14cf8
  %v8_14cf8 = icmp slt i32 %v7_14cf8, 0
  store i1 %v8_14cf8, i1* %cpsr_v.global-to-local, align 1
  %v9_14cf8 = icmp slt i32 %v4_14cf8, 0
  store i1 %v9_14cf8, i1* %cpsr_n.global-to-local, align 1
  %v10_14cf8 = icmp eq i32 %v4_14cf8, 0
  store i1 %v10_14cf8, i1* %cpsr_z.global-to-local, align 1
  %v5_14cfc = icmp slt i32 %v0_14cf8, -20
  br i1 %v5_14cfc, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_14cfc = load i32, i32* %r1.global-to-local, align 4
  %v7_14cfc = add i32 %v6_14cfc, -4
  %v8_14cfc = inttoptr i32 %v7_14cfc to i32*
  %v9_14cfc = load i32, i32* %v8_14cfc, align 4
  store i32 %v9_14cfc, i32* %r3.global-to-local, align 4
  %v10_14cfc = add i32 %v6_14cfc, -8
  %v11_14cfc = inttoptr i32 %v10_14cfc to i32*
  %v12_14cfc = load i32, i32* %v11_14cfc, align 4
  store i32 %v12_14cfc, i32* %ip.global-to-local, align 4
  %v13_14cfc = add i32 %v6_14cfc, -12
  %v14_14cfc = inttoptr i32 %v13_14cfc to i32*
  %v15_14cfc = load i32, i32* %v14_14cfc, align 4
  store i32 %v15_14cfc, i32* %lr.global-to-local, align 4
  store i32 %v13_14cfc, i32* %r1.global-to-local, align 4
  %v7_14d00 = add i32 %v6_14d00, -12
  %v8_14d00 = inttoptr i32 %v7_14d00 to i32*
  store i32 %v9_14cfc, i32* %v8_14d00, align 4
  %v10_14d00 = add i32 %v6_14d00, -8
  %v11_14d00 = inttoptr i32 %v10_14d00 to i32*
  %v12_14d00 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_14d00, i32* %v11_14d00, align 4
  %v13_14d00 = add i32 %v6_14d00, -4
  %v14_14d00 = inttoptr i32 %v13_14d00 to i32*
  %v15_14d00 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_14d00, i32* %v14_14d00, align 4
  store i32 %v7_14d00, i32* %r0.global-to-local, align 4
  %v6_14d04 = load i32, i32* %r2.global-to-local, align 4
  %v7_14d04 = add i32 %v6_14d04, -12
  store i32 %v7_14d04, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_14d2456 = phi i32 [ %v6_14d00, %.thread13 ], [ %v7_14d00, %bb139 ]
  %v0_14d0c54 = phi i32 [ %v4_14cf8, %.thread13 ], [ %v7_14d04, %bb139 ]
  %v2_14d08 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14d08, i32* @r4, align 4
  store i32 %v6_14cc4, i32* @lr, align 4
  br label %dec_label_pc_14d0c

dec_label_pc_14d0c:                               ; preds = %dec_label_pc_14cbc, %.thread15
  %v7_14d1c = phi i32 [ %v0_14cd448, %dec_label_pc_14cbc ], [ %v6_14d2456, %.thread15 ]
  %v0_14d0c = phi i32 [ %v2_14cbc, %dec_label_pc_14cbc ], [ %v0_14d0c54, %.thread15 ]
  %v2_14d0c = add i32 %v0_14d0c, 8
  store i32 %v2_14d0c, i32* %r2.global-to-local, align 4
  %v4_14d0c = sub i32 0, %v0_14d0c
  %v5_14d0c = and i32 %v2_14d0c, %v4_14d0c
  %v6_14d0c = icmp slt i32 %v5_14d0c, 0
  store i1 %v6_14d0c, i1* %cpsr_v.global-to-local, align 1
  %v7_14d0c = icmp slt i32 %v2_14d0c, 0
  store i1 %v7_14d0c, i1* %cpsr_n.global-to-local, align 1
  %v8_14d0c = icmp eq i32 %v2_14d0c, 0
  store i1 %v8_14d0c, i1* %cpsr_z.global-to-local, align 1
  %v5_14d10 = icmp slt i32 %v0_14d0c, -8
  br i1 %v5_14d10, label %bb141, label %dec_label_pc_14d14

dec_label_pc_14d14:                               ; preds = %dec_label_pc_14d0c
  %v6_14d14 = add i32 %v0_14d0c, 4
  store i32 %v6_14d14, i32* %r2.global-to-local, align 4
  %v8_14d14 = sub i32 -5, %v0_14d0c
  %v9_14d14 = and i32 %v8_14d14, %v2_14d0c
  %v10_14d14 = icmp slt i32 %v9_14d14, 0
  store i1 %v10_14d14, i1* %cpsr_v.global-to-local, align 1
  %v11_14d14 = icmp slt i32 %v6_14d14, 0
  store i1 %v11_14d14, i1* %cpsr_n.global-to-local, align 1
  %v12_14d14 = icmp eq i32 %v2_14d0c, 4
  store i1 %v12_14d14, i1* %cpsr_z.global-to-local, align 1
  %v5_14d18 = icmp slt i32 %v2_14d0c, 4
  %v6_14d18 = load i32, i32* %r1.global-to-local, align 4
  %v7_14d18 = add i32 %v6_14d18, -4
  %v8_14d18 = inttoptr i32 %v7_14d18 to i32*
  %v9_14d18 = load i32, i32* %v8_14d18, align 4
  store i32 %v9_14d18, i32* %r3.global-to-local, align 4
  br i1 %v5_14d18, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_14d14
  store i32 %v7_14d18, i32* %r1.global-to-local, align 4
  %v8_14d1c = add i32 %v7_14d1c, -4
  %v9_14d1c = inttoptr i32 %v8_14d1c to i32*
  store i32 %v9_14d18, i32* %v9_14d1c, align 4
  %v10_14d1c = load i32, i32* %r0.global-to-local, align 4
  %v11_14d1c = add i32 %v10_14d1c, -4
  store i32 %v11_14d1c, i32* %r0.global-to-local, align 4
  %v0_14d2c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_14d14
  %v10_14d20 = add i32 %v6_14d18, -8
  %v11_14d20 = inttoptr i32 %v10_14d20 to i32*
  %v12_14d20 = load i32, i32* %v11_14d20, align 4
  store i32 %v12_14d20, i32* %ip.global-to-local, align 4
  store i32 %v10_14d20, i32* %r1.global-to-local, align 4
  %v7_14d24 = add i32 %v7_14d1c, -8
  %v8_14d24 = inttoptr i32 %v7_14d24 to i32*
  store i32 %v9_14d18, i32* %v8_14d24, align 4
  %v10_14d24 = add i32 %v7_14d1c, -4
  %v11_14d24 = inttoptr i32 %v10_14d24 to i32*
  %v12_14d24 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v12_14d24, i32* %v11_14d24, align 4
  store i32 %v7_14d24, i32* %r0.global-to-local, align 4
  %v6_14d28 = load i32, i32* %r2.global-to-local, align 4
  %v7_14d28 = add i32 %v6_14d28, -4
  store i32 %v7_14d28, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_14d0c, %dec_label_pc_14c9c, %dec_label_pc_14ed0, %dec_label_pc_14e64, %dec_label_pc_14df8, %bb140
  %v2_14d30 = phi i32 [ %v11_14d1c, %.thread19 ], [ %v0_14dc831, %.thread25 ], [ %v7_14d1c, %dec_label_pc_14d0c ], [ %v2_14ca0, %dec_label_pc_14c9c ], [ %v2_14d3c64, %dec_label_pc_14ed0 ], [ %v2_14d3c63, %dec_label_pc_14e64 ], [ %v2_14d3c62, %dec_label_pc_14df8 ], [ %v7_14d24, %bb140 ]
  %v0_14d2c = phi i32 [ %v0_14d2c.pre, %.thread19 ], [ %v2_14d70, %.thread25 ], [ %v2_14d0c, %dec_label_pc_14d0c ], [ %v2_14ca4, %dec_label_pc_14c9c ], [ %v0_14d2c60, %dec_label_pc_14ed0 ], [ %v0_14d2c59, %dec_label_pc_14e64 ], [ %v0_14d2c58, %dec_label_pc_14df8 ], [ %v7_14d28, %bb140 ]
  %v1_14d2c = add i32 %v0_14d2c, 4
  store i32 %v1_14d2c, i32* %r2.global-to-local, align 4
  %v3_14d2c = sub i32 0, %v0_14d2c
  %v4_14d2c = and i32 %v1_14d2c, %v3_14d2c
  %v5_14d2c = icmp slt i32 %v4_14d2c, 0
  store i1 %v5_14d2c, i1* %cpsr_v.global-to-local, align 1
  %v6_14d2c = icmp slt i32 %v1_14d2c, 0
  store i1 %v6_14d2c, i1* %cpsr_n.global-to-local, align 1
  %v7_14d2c = icmp eq i32 %v1_14d2c, 0
  store i1 %v7_14d2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14d2c, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_14d34 = add i32 %v0_14d2c, 2
  %v3_14d34 = sub i32 -3, %v0_14d2c
  %v4_14d34 = and i32 %v3_14d34, %v1_14d2c
  %v5_14d34 = icmp slt i32 %v4_14d34, 0
  store i1 %v5_14d34, i1* %cpsr_v.global-to-local, align 1
  %v6_14d34 = icmp slt i32 %v1_14d34, 0
  store i1 %v6_14d34, i1* %cpsr_n.global-to-local, align 1
  %v7_14d34 = icmp eq i32 %v1_14d2c, 2
  store i1 %v7_14d34, i1* %cpsr_z.global-to-local, align 1
  %v0_14d38 = load i32, i32* %r1.global-to-local, align 4
  %v1_14d38 = add i32 %v0_14d38, -1
  %v2_14d38 = inttoptr i32 %v1_14d38 to i8*
  %v3_14d38 = load i8, i8* %v2_14d38, align 1
  %v4_14d38 = zext i8 %v3_14d38 to i32
  store i32 %v4_14d38, i32* %r3.global-to-local, align 4
  store i32 %v1_14d38, i32* %r1.global-to-local, align 4
  %v3_14d3c = add i32 %v2_14d30, -1
  %v4_14d3c = inttoptr i32 %v3_14d3c to i8*
  store i8 %v3_14d38, i8* %v4_14d3c, align 1
  %v5_14d3c = load i32, i32* %r0.global-to-local, align 4
  %v6_14d3c = add i32 %v5_14d3c, -1
  store i32 %v6_14d3c, i32* %r0.global-to-local, align 4
  %v0_14d40 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14d40 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14d40 = xor i1 %v0_14d40, %v1_14d40
  br i1 %v2_14d40, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_14d40 = load i32, i32* %r1.global-to-local, align 4
  %v4_14d40 = add i32 %v3_14d40, -1
  %v5_14d40 = inttoptr i32 %v4_14d40 to i8*
  %v6_14d40 = load i8, i8* %v5_14d40, align 1
  %v7_14d40 = zext i8 %v6_14d40 to i32
  store i32 %v7_14d40, i32* %r3.global-to-local, align 4
  store i32 %v4_14d40, i32* %r1.global-to-local, align 4
  %v6_14d44 = add i32 %v5_14d3c, -2
  %v7_14d44 = inttoptr i32 %v6_14d44 to i8*
  store i8 %v6_14d40, i8* %v7_14d44, align 1
  %v8_14d44 = load i32, i32* %r0.global-to-local, align 4
  %v9_14d44 = add i32 %v8_14d44, -1
  store i32 %v9_14d44, i32* %r0.global-to-local, align 4
  %v1_14d48.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14d48.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_14d4c = phi i32 [ %v9_14d44, %bb143 ], [ %v6_14d3c, %bb142 ]
  %v2_14d4c = phi i1 [ %v2_14d48.pre, %bb143 ], [ %v1_14d40, %bb142 ]
  %v1_14d4c = phi i1 [ %v1_14d48.pre, %bb143 ], [ %v0_14d40, %bb142 ]
  %v0_14d48 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14d48 = xor i1 %v2_14d4c, %v1_14d4c
  %v4_14d48 = or i1 %v0_14d48, %v3_14d48
  br i1 %v4_14d48, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_14d48 = load i32, i32* %r1.global-to-local, align 4
  %v6_14d48 = add i32 %v5_14d48, -1
  %v7_14d48 = inttoptr i32 %v6_14d48 to i8*
  %v8_14d48 = load i8, i8* %v7_14d48, align 1
  %v9_14d48 = zext i8 %v8_14d48 to i32
  store i32 %v9_14d48, i32* %r3.global-to-local, align 4
  store i32 %v6_14d48, i32* %r1.global-to-local, align 4
  %v8_14d4c = add i32 %v7_14d4c, -1
  %v9_14d4c = inttoptr i32 %v8_14d4c to i8*
  store i8 %v8_14d48, i8* %v9_14d4c, align 1
  %v10_14d4c = load i32, i32* %r0.global-to-local, align 4
  %v11_14d4c = add i32 %v10_14d4c, -1
  store i32 %v11_14d4c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_14d54:                               ; preds = %dec_label_pc_14cac
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14d54 = icmp eq i32 %v1_14cac, 1
  store i1 %v8_14d54, i1* %cpsr_n.global-to-local, align 1
  %v9_14d54 = icmp eq i32 %v1_14cac, 2
  store i1 %v9_14d54, i1* %cpsr_z.global-to-local, align 1
  %v1_14d58 = add i32 %v2_14c9c, -1
  %v2_14d58 = inttoptr i32 %v1_14d58 to i8*
  %v3_14d58 = load i8, i8* %v2_14d58, align 1
  %v4_14d58 = zext i8 %v3_14d58 to i32
  store i32 %v4_14d58, i32* %r3.global-to-local, align 4
  store i32 %v1_14d58, i32* %r1.global-to-local, align 4
  %v3_14d5c = add i32 %v2_14ca0, -1
  %v4_14d5c = inttoptr i32 %v3_14d5c to i8*
  store i8 %v3_14d58, i8* %v4_14d5c, align 1
  %v5_14d5c = load i32, i32* %r0.global-to-local, align 4
  %v6_14d5c = add i32 %v5_14d5c, -1
  store i32 %v6_14d5c, i32* %r0.global-to-local, align 4
  br i1 %v8_14d54, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_14d54
  %v6_14d60 = load i32, i32* %r1.global-to-local, align 4
  %v7_14d60 = add i32 %v6_14d60, -1
  %v8_14d60 = inttoptr i32 %v7_14d60 to i8*
  %v9_14d60 = load i8, i8* %v8_14d60, align 1
  %v10_14d60 = zext i8 %v9_14d60 to i32
  store i32 %v10_14d60, i32* %r3.global-to-local, align 4
  store i32 %v7_14d60, i32* %r1.global-to-local, align 4
  %v9_14d64 = add i32 %v5_14d5c, -2
  %v10_14d64 = inttoptr i32 %v9_14d64 to i8*
  store i8 %v9_14d60, i8* %v10_14d64, align 1
  %v11_14d64 = load i32, i32* %r0.global-to-local, align 4
  %v12_14d64 = add i32 %v11_14d64, -1
  store i32 %v12_14d64, i32* %r0.global-to-local, align 4
  br i1 %v9_14d54, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_14d68 = load i32, i32* %r1.global-to-local, align 4
  %v9_14d68 = add i32 %v8_14d68, -1
  %v10_14d68 = inttoptr i32 %v9_14d68 to i8*
  %v11_14d68 = load i8, i8* %v10_14d68, align 1
  %v12_14d68 = zext i8 %v11_14d68 to i32
  store i32 %v12_14d68, i32* %r3.global-to-local, align 4
  store i32 %v9_14d68, i32* %r1.global-to-local, align 4
  %v11_14d6c = add i32 %v11_14d64, -2
  %v12_14d6c = inttoptr i32 %v11_14d6c to i8*
  store i8 %v11_14d68, i8* %v12_14d6c, align 1
  %v13_14d6c = load i32, i32* %r0.global-to-local, align 4
  %v14_14d6c = add i32 %v13_14d6c, -1
  store i32 %v14_14d6c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_14d54, %bb146
  %v0_14dc831 = phi i32 [ %v12_14d64, %bb145 ], [ %v6_14d5c, %dec_label_pc_14d54 ], [ %v14_14d6c, %bb146 ]
  %v0_14d70 = load i32, i32* %r2.global-to-local, align 4
  %v1_14d70 = load i32, i32* %ip.global-to-local, align 4
  %v2_14d70 = sub i32 %v0_14d70, %v1_14d70
  store i32 %v2_14d70, i32* %r2.global-to-local, align 4
  %v4_14d70 = xor i32 %v1_14d70, %v0_14d70
  %v5_14d70 = xor i32 %v2_14d70, %v0_14d70
  %v6_14d70 = and i32 %v5_14d70, %v4_14d70
  %v7_14d70 = icmp slt i32 %v6_14d70, 0
  store i1 %v7_14d70, i1* %cpsr_v.global-to-local, align 1
  %v8_14d70 = icmp slt i32 %v2_14d70, 0
  store i1 %v8_14d70, i1* %cpsr_n.global-to-local, align 1
  %v9_14d70 = icmp eq i32 %v0_14d70, %v1_14d70
  store i1 %v9_14d70, i1* %cpsr_z.global-to-local, align 1
  %v5_14d74 = icmp slt i32 %v0_14d70, %v1_14d70
  br i1 %v5_14d74, label %bb141, label %dec_label_pc_14d78

dec_label_pc_14d78:                               ; preds = %.thread25
  %v0_14d78 = load i32, i32* %r1.global-to-local, align 4
  %v1_14d78 = urem i32 %v0_14d78, 4
  store i32 %v1_14d78, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14d78 = icmp eq i32 %v1_14d78, 0
  store i1 %v2_14d78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14d78, label %dec_label_pc_14cbc, label %dec_label_pc_14d80

dec_label_pc_14d80:                               ; preds = %dec_label_pc_14cb4, %dec_label_pc_14d78
  %v0_14dc830 = phi i32 [ %v2_14ca0, %dec_label_pc_14cb4 ], [ %v0_14dc831, %dec_label_pc_14d78 ]
  %v0_14e74 = phi i32 [ %v2_14ca4, %dec_label_pc_14cb4 ], [ %v2_14d70, %dec_label_pc_14d78 ]
  %v0_14d80 = phi i32 [ %v2_14c9c, %dec_label_pc_14cb4 ], [ %v0_14d78, %dec_label_pc_14d78 ]
  %v0_14d88 = phi i32 [ %v1_14cb4, %dec_label_pc_14cb4 ], [ %v1_14d78, %dec_label_pc_14d78 ]
  %v1_14d80 = and i32 %v0_14d80, -4
  store i32 %v1_14d80, i32* %r1.global-to-local, align 4
  %v1_14d84 = inttoptr i32 %v1_14d80 to i32*
  %v2_14d84 = load i32, i32* %v1_14d84, align 4
  store i32 %v2_14d84, i32* %r3.global-to-local, align 4
  %v7_14d88 = icmp ult i32 %v0_14d88, 2
  %v2_14e6c = add i32 %v0_14e74, -12
  %v4_14e6c = sub i32 11, %v0_14e74
  %v5_14e6c = and i32 %v4_14e6c, %v0_14e74
  %v6_14e6c = icmp slt i32 %v5_14e6c, 0
  store i1 %v6_14e6c, i1* %cpsr_v.global-to-local, align 1
  %v7_14e6c = icmp slt i32 %v2_14e6c, 0
  store i1 %v7_14e6c, i1* %cpsr_n.global-to-local, align 1
  %v8_14e6c = icmp eq i32 %v0_14e74, 12
  store i1 %v8_14e6c, i1* %cpsr_z.global-to-local, align 1
  %v5_14e70 = icmp slt i32 %v0_14e74, 12
  br i1 %v7_14d88, label %dec_label_pc_14e6c, label %dec_label_pc_14d90

dec_label_pc_14d90:                               ; preds = %dec_label_pc_14d80
  %v8_14d88 = icmp eq i32 %v0_14d88, 2
  br i1 %v8_14d88, label %dec_label_pc_14e00, label %dec_label_pc_14d94

dec_label_pc_14d94:                               ; preds = %dec_label_pc_14d90
  br i1 %v5_14e70, label %dec_label_pc_14de0, label %dec_label_pc_14d9c

dec_label_pc_14d9c:                               ; preds = %dec_label_pc_14d94
  store i32 %v2_14e6c, i32* %r2.global-to-local, align 4
  %v3_14da0 = load i32, i32* @r4, align 4
  store i32 %v3_14da0, i32* %stack_var_-12, align 4
  %v6_14da0 = load i32, i32* @r5, align 4
  store i32 %v6_14da0, i32* %stack_var_-8, align 4
  %v9_14da0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14da4

dec_label_pc_14da4:                               ; preds = %dec_label_pc_14da4.dec_label_pc_14da4_crit_edge, %dec_label_pc_14d9c
  %v0_14dc8 = phi i32 [ %v1_14dc8, %dec_label_pc_14da4.dec_label_pc_14da4_crit_edge ], [ %v0_14dc830, %dec_label_pc_14d9c ]
  %v0_14da8 = phi i32 [ %v0_14da8.pre, %dec_label_pc_14da4.dec_label_pc_14da4_crit_edge ], [ %v1_14d80, %dec_label_pc_14d9c ]
  %v0_14da4 = phi i32 [ %v0_14da4.pre, %dec_label_pc_14da4.dec_label_pc_14da4_crit_edge ], [ %v2_14d84, %dec_label_pc_14d9c ]
  %v3_14da4 = mul i32 %v0_14da4, 256
  store i32 %v3_14da4, i32* %lr.global-to-local, align 4
  %v1_14da8 = add i32 %v0_14da8, -4
  %v2_14da8 = inttoptr i32 %v1_14da8 to i32*
  %v3_14da8 = load i32, i32* %v2_14da8, align 4
  store i32 %v3_14da8, i32* %r3.global-to-local, align 4
  %v4_14da8 = add i32 %v0_14da8, -8
  %v5_14da8 = inttoptr i32 %v4_14da8 to i32*
  %v6_14da8 = load i32, i32* %v5_14da8, align 4
  store i32 %v6_14da8, i32* %r4.global-to-local, align 4
  %v7_14da8 = add i32 %v0_14da8, -12
  %v8_14da8 = inttoptr i32 %v7_14da8 to i32*
  %v9_14da8 = load i32, i32* %v8_14da8, align 4
  store i32 %v9_14da8, i32* %r5.global-to-local, align 4
  %v10_14da8 = add i32 %v0_14da8, -16
  %v11_14da8 = inttoptr i32 %v10_14da8 to i32*
  %v12_14da8 = load i32, i32* %v11_14da8, align 4
  store i32 %v10_14da8, i32* %r1.global-to-local, align 4
  %v4_14dac = udiv i32 %v12_14da8, 16777216
  %v5_14dac = or i32 %v4_14dac, %v3_14da4
  store i32 %v5_14dac, i32* %lr.global-to-local, align 4
  %v3_14db0 = mul i32 %v12_14da8, 256
  %v4_14db4 = udiv i32 %v9_14da8, 16777216
  %v5_14db4 = or i32 %v3_14db0, %v4_14db4
  store i32 %v5_14db4, i32* %ip.global-to-local, align 4
  %v3_14db8 = mul i32 %v9_14da8, 256
  %v4_14dbc = udiv i32 %v6_14da8, 16777216
  %v5_14dbc = or i32 %v3_14db8, %v4_14dbc
  store i32 %v5_14dbc, i32* %r5.global-to-local, align 4
  %v3_14dc0 = mul i32 %v6_14da8, 256
  %v4_14dc4 = udiv i32 %v3_14da8, 16777216
  %v5_14dc4 = or i32 %v3_14dc0, %v4_14dc4
  store i32 %v5_14dc4, i32* %r4.global-to-local, align 4
  %v1_14dc8 = add i32 %v0_14dc8, -16
  %v2_14dc8 = inttoptr i32 %v1_14dc8 to i32*
  store i32 %v5_14dc4, i32* %v2_14dc8, align 4
  %v4_14dc8 = add i32 %v0_14dc8, -12
  %v5_14dc8 = inttoptr i32 %v4_14dc8 to i32*
  %v6_14dc8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14dc8, i32* %v5_14dc8, align 4
  %v7_14dc8 = add i32 %v0_14dc8, -8
  %v8_14dc8 = inttoptr i32 %v7_14dc8 to i32*
  %v9_14dc8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14dc8, i32* %v8_14dc8, align 4
  %v10_14dc8 = add i32 %v0_14dc8, -4
  %v11_14dc8 = inttoptr i32 %v10_14dc8 to i32*
  %v12_14dc8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14dc8, i32* %v11_14dc8, align 4
  store i32 %v1_14dc8, i32* %r0.global-to-local, align 4
  %v0_14dcc = load i32, i32* %r2.global-to-local, align 4
  %v2_14dcc = add i32 %v0_14dcc, -16
  store i32 %v2_14dcc, i32* %r2.global-to-local, align 4
  %v6_14dd0 = icmp slt i32 %v0_14dcc, 16
  br i1 %v6_14dd0, label %dec_label_pc_14dd4, label %dec_label_pc_14da4.dec_label_pc_14da4_crit_edge

dec_label_pc_14da4.dec_label_pc_14da4_crit_edge:  ; preds = %dec_label_pc_14da4
  %v0_14da4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14da8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14da4

dec_label_pc_14dd4:                               ; preds = %dec_label_pc_14da4
  %v2_14dd4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14dd4, i32* @r4, align 4
  %v5_14dd4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_14dd4, i32* @r5, align 4
  store i32 %v9_14da0, i32* @lr, align 4
  %v2_14dd8 = add i32 %v0_14dcc, -4
  store i32 %v2_14dd8, i32* %r2.global-to-local, align 4
  %v4_14dd8 = add i32 %v0_14dcc, 2147483632
  %v5_14dd8 = and i32 %v2_14dd8, %v4_14dd8
  %v6_14dd8 = icmp slt i32 %v5_14dd8, 0
  store i1 %v6_14dd8, i1* %cpsr_v.global-to-local, align 1
  %v7_14dd8 = icmp slt i32 %v2_14dd8, 0
  store i1 %v7_14dd8, i1* %cpsr_n.global-to-local, align 1
  %v8_14dd8 = icmp eq i32 %v2_14dd8, 0
  store i1 %v8_14dd8, i1* %cpsr_z.global-to-local, align 1
  %v5_14ddc = icmp slt i32 %v2_14dcc, -12
  br i1 %v5_14ddc, label %dec_label_pc_14df8, label %dec_label_pc_14de0

dec_label_pc_14de0:                               ; preds = %dec_label_pc_14dd4, %dec_label_pc_14d94, %dec_label_pc_14de0
  %v1_14dec = phi i32 [ %v5_14dec, %dec_label_pc_14de0 ], [ %v1_14dc8, %dec_label_pc_14dd4 ], [ %v0_14dc830, %dec_label_pc_14d94 ]
  %v0_14de0 = load i32, i32* %r3.global-to-local, align 4
  %v3_14de0 = mul i32 %v0_14de0, 256
  store i32 %v3_14de0, i32* %ip.global-to-local, align 4
  %v0_14de4 = load i32, i32* %r1.global-to-local, align 4
  %v1_14de4 = add i32 %v0_14de4, -4
  %v2_14de4 = inttoptr i32 %v1_14de4 to i32*
  %v3_14de4 = load i32, i32* %v2_14de4, align 4
  store i32 %v3_14de4, i32* %r3.global-to-local, align 4
  store i32 %v1_14de4, i32* %r1.global-to-local, align 4
  %v4_14de8 = udiv i32 %v3_14de4, 16777216
  %v5_14de8 = or i32 %v4_14de8, %v3_14de0
  store i32 %v5_14de8, i32* %ip.global-to-local, align 4
  %v2_14dec = add i32 %v1_14dec, -4
  %v3_14dec = inttoptr i32 %v2_14dec to i32*
  store i32 %v5_14de8, i32* %v3_14dec, align 4
  %v4_14dec = load i32, i32* %r0.global-to-local, align 4
  %v5_14dec = add i32 %v4_14dec, -4
  store i32 %v5_14dec, i32* %r0.global-to-local, align 4
  %v0_14df0 = load i32, i32* %r2.global-to-local, align 4
  %v2_14df0 = add i32 %v0_14df0, -4
  store i32 %v2_14df0, i32* %r2.global-to-local, align 4
  %v6_14df4 = icmp slt i32 %v0_14df0, 4
  br i1 %v6_14df4, label %dec_label_pc_14df8.loopexit, label %dec_label_pc_14de0

dec_label_pc_14df8.loopexit:                      ; preds = %dec_label_pc_14de0
  %v4_14df0 = sub i32 3, %v0_14df0
  %v5_14df0 = and i32 %v4_14df0, %v0_14df0
  %v6_14df0 = icmp slt i32 %v5_14df0, 0
  %v7_14df0 = icmp slt i32 %v2_14df0, 0
  store i1 %v6_14df0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14df0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14df8

dec_label_pc_14df8:                               ; preds = %dec_label_pc_14df8.loopexit, %dec_label_pc_14dd4
  %v2_14d3c62 = phi i32 [ %v5_14dec, %dec_label_pc_14df8.loopexit ], [ %v1_14dc8, %dec_label_pc_14dd4 ]
  %v0_14d2c58 = phi i32 [ %v2_14df0, %dec_label_pc_14df8.loopexit ], [ %v2_14dd8, %dec_label_pc_14dd4 ]
  %v0_14df8 = load i32, i32* %r1.global-to-local, align 4
  %v1_14df8 = add i32 %v0_14df8, 3
  store i32 %v1_14df8, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_14e00:                               ; preds = %dec_label_pc_14d90
  br i1 %v5_14e70, label %dec_label_pc_14e4c, label %dec_label_pc_14e08

dec_label_pc_14e08:                               ; preds = %dec_label_pc_14e00
  store i32 %v2_14e6c, i32* %r2.global-to-local, align 4
  %v3_14e0c = load i32, i32* @r4, align 4
  store i32 %v3_14e0c, i32* %stack_var_-12, align 4
  %v6_14e0c = load i32, i32* @r5, align 4
  store i32 %v6_14e0c, i32* %stack_var_-8, align 4
  %v9_14e0c = load i32, i32* @lr, align 4
  br label %dec_label_pc_14e10

dec_label_pc_14e10:                               ; preds = %dec_label_pc_14e10.dec_label_pc_14e10_crit_edge, %dec_label_pc_14e08
  %v0_14e34 = phi i32 [ %v1_14e34, %dec_label_pc_14e10.dec_label_pc_14e10_crit_edge ], [ %v0_14dc830, %dec_label_pc_14e08 ]
  %v0_14e14 = phi i32 [ %v0_14e14.pre, %dec_label_pc_14e10.dec_label_pc_14e10_crit_edge ], [ %v1_14d80, %dec_label_pc_14e08 ]
  %v0_14e10 = phi i32 [ %v0_14e10.pre, %dec_label_pc_14e10.dec_label_pc_14e10_crit_edge ], [ %v2_14d84, %dec_label_pc_14e08 ]
  %v3_14e10 = mul i32 %v0_14e10, 65536
  store i32 %v3_14e10, i32* %lr.global-to-local, align 4
  %v1_14e14 = add i32 %v0_14e14, -4
  %v2_14e14 = inttoptr i32 %v1_14e14 to i32*
  %v3_14e14 = load i32, i32* %v2_14e14, align 4
  store i32 %v3_14e14, i32* %r3.global-to-local, align 4
  %v4_14e14 = add i32 %v0_14e14, -8
  %v5_14e14 = inttoptr i32 %v4_14e14 to i32*
  %v6_14e14 = load i32, i32* %v5_14e14, align 4
  store i32 %v6_14e14, i32* %r4.global-to-local, align 4
  %v7_14e14 = add i32 %v0_14e14, -12
  %v8_14e14 = inttoptr i32 %v7_14e14 to i32*
  %v9_14e14 = load i32, i32* %v8_14e14, align 4
  store i32 %v9_14e14, i32* %r5.global-to-local, align 4
  %v10_14e14 = add i32 %v0_14e14, -16
  %v11_14e14 = inttoptr i32 %v10_14e14 to i32*
  %v12_14e14 = load i32, i32* %v11_14e14, align 4
  store i32 %v10_14e14, i32* %r1.global-to-local, align 4
  %v4_14e18 = udiv i32 %v12_14e14, 65536
  %v5_14e18 = or i32 %v4_14e18, %v3_14e10
  store i32 %v5_14e18, i32* %lr.global-to-local, align 4
  %v3_14e1c = mul i32 %v12_14e14, 65536
  %v4_14e20 = udiv i32 %v9_14e14, 65536
  %v5_14e20 = or i32 %v3_14e1c, %v4_14e20
  store i32 %v5_14e20, i32* %ip.global-to-local, align 4
  %v3_14e24 = mul i32 %v9_14e14, 65536
  %v4_14e28 = udiv i32 %v6_14e14, 65536
  %v5_14e28 = or i32 %v3_14e24, %v4_14e28
  store i32 %v5_14e28, i32* %r5.global-to-local, align 4
  %v3_14e2c = mul i32 %v6_14e14, 65536
  %v4_14e30 = udiv i32 %v3_14e14, 65536
  %v5_14e30 = or i32 %v3_14e2c, %v4_14e30
  store i32 %v5_14e30, i32* %r4.global-to-local, align 4
  %v1_14e34 = add i32 %v0_14e34, -16
  %v2_14e34 = inttoptr i32 %v1_14e34 to i32*
  store i32 %v5_14e30, i32* %v2_14e34, align 4
  %v4_14e34 = add i32 %v0_14e34, -12
  %v5_14e34 = inttoptr i32 %v4_14e34 to i32*
  %v6_14e34 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14e34, i32* %v5_14e34, align 4
  %v7_14e34 = add i32 %v0_14e34, -8
  %v8_14e34 = inttoptr i32 %v7_14e34 to i32*
  %v9_14e34 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14e34, i32* %v8_14e34, align 4
  %v10_14e34 = add i32 %v0_14e34, -4
  %v11_14e34 = inttoptr i32 %v10_14e34 to i32*
  %v12_14e34 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14e34, i32* %v11_14e34, align 4
  store i32 %v1_14e34, i32* %r0.global-to-local, align 4
  %v0_14e38 = load i32, i32* %r2.global-to-local, align 4
  %v2_14e38 = add i32 %v0_14e38, -16
  store i32 %v2_14e38, i32* %r2.global-to-local, align 4
  %v6_14e3c = icmp slt i32 %v0_14e38, 16
  br i1 %v6_14e3c, label %dec_label_pc_14e40, label %dec_label_pc_14e10.dec_label_pc_14e10_crit_edge

dec_label_pc_14e10.dec_label_pc_14e10_crit_edge:  ; preds = %dec_label_pc_14e10
  %v0_14e10.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14e14.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14e10

dec_label_pc_14e40:                               ; preds = %dec_label_pc_14e10
  %v2_14e40 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14e40, i32* @r4, align 4
  %v5_14e40 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_14e40, i32* @r5, align 4
  store i32 %v9_14e0c, i32* @lr, align 4
  %v2_14e44 = add i32 %v0_14e38, -4
  store i32 %v2_14e44, i32* %r2.global-to-local, align 4
  %v4_14e44 = add i32 %v0_14e38, 2147483632
  %v5_14e44 = and i32 %v2_14e44, %v4_14e44
  %v6_14e44 = icmp slt i32 %v5_14e44, 0
  store i1 %v6_14e44, i1* %cpsr_v.global-to-local, align 1
  %v7_14e44 = icmp slt i32 %v2_14e44, 0
  store i1 %v7_14e44, i1* %cpsr_n.global-to-local, align 1
  %v8_14e44 = icmp eq i32 %v2_14e44, 0
  store i1 %v8_14e44, i1* %cpsr_z.global-to-local, align 1
  %v5_14e48 = icmp slt i32 %v2_14e38, -12
  br i1 %v5_14e48, label %dec_label_pc_14e64, label %dec_label_pc_14e4c

dec_label_pc_14e4c:                               ; preds = %dec_label_pc_14e40, %dec_label_pc_14e00, %dec_label_pc_14e4c
  %v1_14e58 = phi i32 [ %v5_14e58, %dec_label_pc_14e4c ], [ %v1_14e34, %dec_label_pc_14e40 ], [ %v0_14dc830, %dec_label_pc_14e00 ]
  %v0_14e4c = load i32, i32* %r3.global-to-local, align 4
  %v3_14e4c = mul i32 %v0_14e4c, 65536
  store i32 %v3_14e4c, i32* %ip.global-to-local, align 4
  %v0_14e50 = load i32, i32* %r1.global-to-local, align 4
  %v1_14e50 = add i32 %v0_14e50, -4
  %v2_14e50 = inttoptr i32 %v1_14e50 to i32*
  %v3_14e50 = load i32, i32* %v2_14e50, align 4
  store i32 %v3_14e50, i32* %r3.global-to-local, align 4
  store i32 %v1_14e50, i32* %r1.global-to-local, align 4
  %v4_14e54 = udiv i32 %v3_14e50, 65536
  %v5_14e54 = or i32 %v4_14e54, %v3_14e4c
  store i32 %v5_14e54, i32* %ip.global-to-local, align 4
  %v2_14e58 = add i32 %v1_14e58, -4
  %v3_14e58 = inttoptr i32 %v2_14e58 to i32*
  store i32 %v5_14e54, i32* %v3_14e58, align 4
  %v4_14e58 = load i32, i32* %r0.global-to-local, align 4
  %v5_14e58 = add i32 %v4_14e58, -4
  store i32 %v5_14e58, i32* %r0.global-to-local, align 4
  %v0_14e5c = load i32, i32* %r2.global-to-local, align 4
  %v2_14e5c = add i32 %v0_14e5c, -4
  store i32 %v2_14e5c, i32* %r2.global-to-local, align 4
  %v6_14e60 = icmp slt i32 %v0_14e5c, 4
  br i1 %v6_14e60, label %dec_label_pc_14e64.loopexit, label %dec_label_pc_14e4c

dec_label_pc_14e64.loopexit:                      ; preds = %dec_label_pc_14e4c
  %v4_14e5c = sub i32 3, %v0_14e5c
  %v5_14e5c = and i32 %v4_14e5c, %v0_14e5c
  %v6_14e5c = icmp slt i32 %v5_14e5c, 0
  %v7_14e5c = icmp slt i32 %v2_14e5c, 0
  store i1 %v6_14e5c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14e5c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14e64

dec_label_pc_14e64:                               ; preds = %dec_label_pc_14e64.loopexit, %dec_label_pc_14e40
  %v2_14d3c63 = phi i32 [ %v5_14e58, %dec_label_pc_14e64.loopexit ], [ %v1_14e34, %dec_label_pc_14e40 ]
  %v0_14d2c59 = phi i32 [ %v2_14e5c, %dec_label_pc_14e64.loopexit ], [ %v2_14e44, %dec_label_pc_14e40 ]
  %v0_14e64 = load i32, i32* %r1.global-to-local, align 4
  %v1_14e64 = add i32 %v0_14e64, 2
  store i32 %v1_14e64, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_14e6c:                               ; preds = %dec_label_pc_14d80
  br i1 %v5_14e70, label %dec_label_pc_14eb8, label %dec_label_pc_14e74

dec_label_pc_14e74:                               ; preds = %dec_label_pc_14e6c
  store i32 %v2_14e6c, i32* %r2.global-to-local, align 4
  %v3_14e78 = load i32, i32* @r4, align 4
  store i32 %v3_14e78, i32* %stack_var_-12, align 4
  %v6_14e78 = load i32, i32* @r5, align 4
  store i32 %v6_14e78, i32* %stack_var_-8, align 4
  %v9_14e78 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14e7c

dec_label_pc_14e7c:                               ; preds = %dec_label_pc_14e7c.dec_label_pc_14e7c_crit_edge, %dec_label_pc_14e74
  %v0_14ea0 = phi i32 [ %v1_14ea0, %dec_label_pc_14e7c.dec_label_pc_14e7c_crit_edge ], [ %v0_14dc830, %dec_label_pc_14e74 ]
  %v0_14e80 = phi i32 [ %v0_14e80.pre, %dec_label_pc_14e7c.dec_label_pc_14e7c_crit_edge ], [ %v1_14d80, %dec_label_pc_14e74 ]
  %v0_14e7c = phi i32 [ %v0_14e7c.pre, %dec_label_pc_14e7c.dec_label_pc_14e7c_crit_edge ], [ %v2_14d84, %dec_label_pc_14e74 ]
  %v3_14e7c = mul i32 %v0_14e7c, 16777216
  store i32 %v3_14e7c, i32* %lr.global-to-local, align 4
  %v1_14e80 = add i32 %v0_14e80, -4
  %v2_14e80 = inttoptr i32 %v1_14e80 to i32*
  %v3_14e80 = load i32, i32* %v2_14e80, align 4
  store i32 %v3_14e80, i32* %r3.global-to-local, align 4
  %v4_14e80 = add i32 %v0_14e80, -8
  %v5_14e80 = inttoptr i32 %v4_14e80 to i32*
  %v6_14e80 = load i32, i32* %v5_14e80, align 4
  store i32 %v6_14e80, i32* %r4.global-to-local, align 4
  %v7_14e80 = add i32 %v0_14e80, -12
  %v8_14e80 = inttoptr i32 %v7_14e80 to i32*
  %v9_14e80 = load i32, i32* %v8_14e80, align 4
  store i32 %v9_14e80, i32* %r5.global-to-local, align 4
  %v10_14e80 = add i32 %v0_14e80, -16
  %v11_14e80 = inttoptr i32 %v10_14e80 to i32*
  %v12_14e80 = load i32, i32* %v11_14e80, align 4
  store i32 %v10_14e80, i32* %r1.global-to-local, align 4
  %v4_14e84 = udiv i32 %v12_14e80, 256
  %v5_14e84 = or i32 %v4_14e84, %v3_14e7c
  store i32 %v5_14e84, i32* %lr.global-to-local, align 4
  %v3_14e88 = mul i32 %v12_14e80, 16777216
  %v4_14e8c = udiv i32 %v9_14e80, 256
  %v5_14e8c = or i32 %v3_14e88, %v4_14e8c
  store i32 %v5_14e8c, i32* %ip.global-to-local, align 4
  %v3_14e90 = mul i32 %v9_14e80, 16777216
  %v4_14e94 = udiv i32 %v6_14e80, 256
  %v5_14e94 = or i32 %v3_14e90, %v4_14e94
  store i32 %v5_14e94, i32* %r5.global-to-local, align 4
  %v3_14e98 = mul i32 %v6_14e80, 16777216
  %v4_14e9c = udiv i32 %v3_14e80, 256
  %v5_14e9c = or i32 %v3_14e98, %v4_14e9c
  store i32 %v5_14e9c, i32* %r4.global-to-local, align 4
  %v1_14ea0 = add i32 %v0_14ea0, -16
  %v2_14ea0 = inttoptr i32 %v1_14ea0 to i32*
  store i32 %v5_14e9c, i32* %v2_14ea0, align 4
  %v4_14ea0 = add i32 %v0_14ea0, -12
  %v5_14ea0 = inttoptr i32 %v4_14ea0 to i32*
  %v6_14ea0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14ea0, i32* %v5_14ea0, align 4
  %v7_14ea0 = add i32 %v0_14ea0, -8
  %v8_14ea0 = inttoptr i32 %v7_14ea0 to i32*
  %v9_14ea0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14ea0, i32* %v8_14ea0, align 4
  %v10_14ea0 = add i32 %v0_14ea0, -4
  %v11_14ea0 = inttoptr i32 %v10_14ea0 to i32*
  %v12_14ea0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14ea0, i32* %v11_14ea0, align 4
  store i32 %v1_14ea0, i32* %r0.global-to-local, align 4
  %v0_14ea4 = load i32, i32* %r2.global-to-local, align 4
  %v2_14ea4 = add i32 %v0_14ea4, -16
  store i32 %v2_14ea4, i32* %r2.global-to-local, align 4
  %v6_14ea8 = icmp slt i32 %v0_14ea4, 16
  br i1 %v6_14ea8, label %dec_label_pc_14eac, label %dec_label_pc_14e7c.dec_label_pc_14e7c_crit_edge

dec_label_pc_14e7c.dec_label_pc_14e7c_crit_edge:  ; preds = %dec_label_pc_14e7c
  %v0_14e7c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14e80.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14e7c

dec_label_pc_14eac:                               ; preds = %dec_label_pc_14e7c
  %v2_14eac = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14eac, i32* @r4, align 4
  %v5_14eac = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_14eac, i32* @r5, align 4
  store i32 %v9_14e78, i32* @lr, align 4
  %v2_14eb0 = add i32 %v0_14ea4, -4
  store i32 %v2_14eb0, i32* %r2.global-to-local, align 4
  %v4_14eb0 = add i32 %v0_14ea4, 2147483632
  %v5_14eb0 = and i32 %v2_14eb0, %v4_14eb0
  %v6_14eb0 = icmp slt i32 %v5_14eb0, 0
  store i1 %v6_14eb0, i1* %cpsr_v.global-to-local, align 1
  %v7_14eb0 = icmp slt i32 %v2_14eb0, 0
  store i1 %v7_14eb0, i1* %cpsr_n.global-to-local, align 1
  %v8_14eb0 = icmp eq i32 %v2_14eb0, 0
  store i1 %v8_14eb0, i1* %cpsr_z.global-to-local, align 1
  %v5_14eb4 = icmp slt i32 %v2_14ea4, -12
  br i1 %v5_14eb4, label %dec_label_pc_14ed0, label %dec_label_pc_14eb8

dec_label_pc_14eb8:                               ; preds = %dec_label_pc_14eac, %dec_label_pc_14e6c, %dec_label_pc_14eb8
  %v1_14ec4 = phi i32 [ %v5_14ec4, %dec_label_pc_14eb8 ], [ %v1_14ea0, %dec_label_pc_14eac ], [ %v0_14dc830, %dec_label_pc_14e6c ]
  %v0_14eb8 = load i32, i32* %r3.global-to-local, align 4
  %v3_14eb8 = mul i32 %v0_14eb8, 16777216
  store i32 %v3_14eb8, i32* %ip.global-to-local, align 4
  %v0_14ebc = load i32, i32* %r1.global-to-local, align 4
  %v1_14ebc = add i32 %v0_14ebc, -4
  %v2_14ebc = inttoptr i32 %v1_14ebc to i32*
  %v3_14ebc = load i32, i32* %v2_14ebc, align 4
  store i32 %v3_14ebc, i32* %r3.global-to-local, align 4
  store i32 %v1_14ebc, i32* %r1.global-to-local, align 4
  %v4_14ec0 = udiv i32 %v3_14ebc, 256
  %v5_14ec0 = or i32 %v4_14ec0, %v3_14eb8
  store i32 %v5_14ec0, i32* %ip.global-to-local, align 4
  %v2_14ec4 = add i32 %v1_14ec4, -4
  %v3_14ec4 = inttoptr i32 %v2_14ec4 to i32*
  store i32 %v5_14ec0, i32* %v3_14ec4, align 4
  %v4_14ec4 = load i32, i32* %r0.global-to-local, align 4
  %v5_14ec4 = add i32 %v4_14ec4, -4
  store i32 %v5_14ec4, i32* %r0.global-to-local, align 4
  %v0_14ec8 = load i32, i32* %r2.global-to-local, align 4
  %v2_14ec8 = add i32 %v0_14ec8, -4
  store i32 %v2_14ec8, i32* %r2.global-to-local, align 4
  %v6_14ecc = icmp slt i32 %v0_14ec8, 4
  br i1 %v6_14ecc, label %dec_label_pc_14ed0.loopexit, label %dec_label_pc_14eb8

dec_label_pc_14ed0.loopexit:                      ; preds = %dec_label_pc_14eb8
  %v4_14ec8 = sub i32 3, %v0_14ec8
  %v5_14ec8 = and i32 %v4_14ec8, %v0_14ec8
  %v6_14ec8 = icmp slt i32 %v5_14ec8, 0
  %v7_14ec8 = icmp slt i32 %v2_14ec8, 0
  store i1 %v6_14ec8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14ec8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14ed0

dec_label_pc_14ed0:                               ; preds = %dec_label_pc_14ed0.loopexit, %dec_label_pc_14eac
  %v2_14d3c64 = phi i32 [ %v5_14ec4, %dec_label_pc_14ed0.loopexit ], [ %v1_14ea0, %dec_label_pc_14eac ]
  %v0_14d2c60 = phi i32 [ %v2_14ec8, %dec_label_pc_14ed0.loopexit ], [ %v2_14eb0, %dec_label_pc_14eac ]
  %v0_14ed0 = load i32, i32* %r1.global-to-local, align 4
  %v1_14ed0 = add i32 %v0_14ed0, 1
  store i32 %v1_14ed0, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_14ec4, { 0, 2, 1 }
  uselistorder i32 %v3_14eb8, { 1, 0 }
  uselistorder i32 %v2_14eb0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14ea0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14e80, { 1, 0 }
  uselistorder i32 %v3_14e7c, { 1, 0 }
  uselistorder i32 %v0_14e80, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14ea0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14e58, { 0, 2, 1 }
  uselistorder i32 %v3_14e4c, { 1, 0 }
  uselistorder i32 %v2_14e44, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14e34, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14e14, { 1, 0 }
  uselistorder i32 %v3_14e10, { 1, 0 }
  uselistorder i32 %v0_14e14, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14e34, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14dec, { 0, 2, 1 }
  uselistorder i32 %v3_14de0, { 1, 0 }
  uselistorder i32 %v2_14dd8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14dc8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14da8, { 1, 0 }
  uselistorder i32 %v3_14da4, { 1, 0 }
  uselistorder i32 %v0_14da8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14dc8, { 3, 2, 1, 0 }
  uselistorder i1 %v5_14e70, { 2, 0, 1 }
  uselistorder i32 %v0_14d88, { 1, 0 }
  uselistorder i32 %v0_14e74, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_14dc830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_14d78, { 2, 1, 0 }
  uselistorder i32 %v0_14d78, { 2, 0, 1 }
  uselistorder i32 %v2_14d70, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14d70, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14d70, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_14dc831, { 2, 1, 0 }
  uselistorder i32 %v11_14d4c, { 1, 0 }
  uselistorder i32 %v7_14d4c, { 1, 0 }
  uselistorder i32 %v1_14d2c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_14d2c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_14d30, { 1, 0 }
  uselistorder i32 %v7_14d24, { 0, 2, 1 }
  uselistorder i32 %v10_14d20, { 1, 0 }
  uselistorder i32 %v9_14d18, { 1, 0, 2 }
  uselistorder i32 %v6_14d14, { 1, 0 }
  uselistorder i32 %v2_14d0c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_14d0c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_14d1c, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14d00, { 0, 2, 1 }
  uselistorder i32 %v13_14cfc, { 1, 0 }
  uselistorder i32 %v4_14cf8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_14cf8, { 2, 0, 1 }
  uselistorder i32 %v6_14d00, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14cf0, { 0, 2, 1 }
  uselistorder i32 %v16_14cec, { 1, 0 }
  uselistorder i32 %v4_14ce8, { 1, 2, 0 }
  uselistorder i32 %v0_14cf8.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_14cf0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_14cdc, { 0, 3, 2, 1 }
  uselistorder i32 %v10_14cd8, { 1, 0 }
  uselistorder i32 %v1_14cd4, { 1, 0 }
  uselistorder i32 %v10_14cd0, { 1, 0 }
  uselistorder i32 %v0_14cd0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14cd4, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_14cc8, { 0, 2, 1 }
  uselistorder i32 %v2_14cbc, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_14cbc, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_14cd448, { 1, 2, 0 }
  uselistorder i32 %v1_14cb4, { 2, 1, 0 }
  uselistorder i32 %v1_14cac, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14ca4, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_14ca0, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_14c9c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_14c9c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_14c88, { 0, 2, 1 }
  uselistorder i32 %v3_14c7c, { 1, 0 }
  uselistorder i32 %v2_14c74, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_14c64, { 1, 0, 3, 2 }
  uselistorder i32 %v8_14c44, { 1, 0, 2 }
  uselistorder i32 %v5_14c44, { 1, 0, 2 }
  uselistorder i32 %v2_14c44, { 1, 0, 2 }
  uselistorder i32 %v3_14c40, { 1, 0 }
  uselistorder i32 %v0_14c44, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14c64, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_14c1c, { 0, 2, 1 }
  uselistorder i32 %v3_14c10, { 1, 0 }
  uselistorder i32 %v2_14c08, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_14bf8, { 1, 0, 3, 2 }
  uselistorder i32 %v8_14bd8, { 1, 0, 2 }
  uselistorder i32 %v5_14bd8, { 1, 0, 2 }
  uselistorder i32 %v2_14bd8, { 1, 0, 2 }
  uselistorder i32 %v3_14bd4, { 1, 0 }
  uselistorder i32 %v0_14bd8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14bf8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_14bb0, { 0, 2, 1 }
  uselistorder i32 %v3_14ba4, { 1, 0 }
  uselistorder i32 %v2_14b9c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_14b8c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_14b6c, { 1, 0, 2 }
  uselistorder i32 %v5_14b6c, { 1, 0, 2 }
  uselistorder i32 %v2_14b6c, { 1, 0, 2 }
  uselistorder i32 %v3_14b68, { 1, 0 }
  uselistorder i32 %v0_14b6c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14b8c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_14c34, { 2, 0, 1 }
  uselistorder i32 %v0_14c38, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_14b8c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_14b3c, { 1, 0 }
  uselistorder i32 %v0_14b3c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_14b34, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14b34, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14b34, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_14b8c75, { 2, 1, 0 }
  uselistorder i32 %v1_14b14, { 1, 0, 2 }
  uselistorder i32 %v1_14aec, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_14aec, { 1, 2, 0, 3 }
  uselistorder i32 %v8_14ad8, { 1, 0, 2 }
  uselistorder i32 %v6_14ad4, { 1, 0 }
  uselistorder i32 %v2_14acc, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_14acc, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_14adc, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_14ac4, { 0, 2, 1 }
  uselistorder i32 %v3_14ac4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_14ac4, { 1, 0 }
  uselistorder i1 %v1_14ac4, { 1, 0 }
  uselistorder i32 %v3_14ac0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_14ab8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_14aa4, { 1, 2, 0 }
  uselistorder i32 %v12_14a98, { 0, 1, 3, 2 }
  uselistorder i32 %v0_14a8c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14a90, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_14a80, { 0, 2, 1 }
  uselistorder i32 %v2_14a78, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_14a78, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_14a70, { 1, 0 }
  uselistorder i32 %v1_14a68, { 2, 1, 0 }
  uselistorder i32 %v2_14a60, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_14a60, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_14a50, { 1, 0 }
  uselistorder i32 %v1_14a50, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_14a50, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 49, 47, 53, 48, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 53, 54, 55, 21, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 0, 24, 1, 26, 2, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 0, 23, 1, 25, 2, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 0, 25, 1, 27, 2, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 25, 26, 1, 0, 14, 16, 15, 17, 2, 19, 27, 20, 28, 21, 29, 22, 18, 30, 23, 7, 3, 8, 24, 9, 4, 5, 10, 11, 6, 12, 13 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 23, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 24, 25, 26, 14, 22, 21, 20, 19, 18, 17 }
  uselistorder i32 65536, { 5, 4, 10, 6, 11, 7, 12, 8, 13, 9, 14, 15, 16, 20, 17, 21, 18, 22, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 1, 55, 56, 2, 57, 0, 3, 58, 59, 60, 61, 62, 65, 63, 64, 66, 67, 68, 73, 74, 75, 76, 69, 70, 71, 72, 77, 80, 81, 82, 78, 79, 83, 84, 87, 88, 89, 85, 86, 90, 92, 91, 94, 95, 93, 96, 97, 98, 100, 101, 102, 99, 103, 104, 107, 108, 109, 105, 106, 110, 132, 112, 111, 113, 115, 114, 117, 116, 118, 119, 121, 122, 123, 120, 124, 125, 127, 128, 129, 126, 131, 130 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 51, 50, 53, 52, 57, 54, 56, 55, 58, 60, 59, 62, 61, 64, 63, 65, 67, 66, 68, 75, 69, 76, 70, 77, 71, 78, 79, 72, 80, 73, 81, 74, 85, 82, 86, 83, 87, 84, 89, 88, 90, 91, 92, 96, 93, 97, 94, 98, 95, 99, 100, 101, 102, 108, 103, 109, 104, 110, 105, 111, 106, 112, 107, 113, 114, 116, 115, 118, 117, 119, 121, 120, 122, 123, 124, 128, 125, 129, 126, 127, 130, 136, 131, 137, 132, 138, 133, 135, 139, 140, 141, 134, 142, 143, 149, 144, 150, 145, 151, 146, 148, 152, 153, 154, 147, 157, 155, 158, 156, 159, 160, 161 }
  uselistorder i32* @r5, { 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 260, 261, 262, 264, 758, 759, 760, 761, 762, 0, 763, 764, 765, 766, 767, 768, 625, 626, 627, 628, 629, 630, 566, 567, 568, 569, 570, 571, 572, 573, 606, 607, 608, 609, 610, 611, 631, 632, 633, 640, 641, 642, 643, 634, 635, 636, 637, 638, 639, 59, 60, 61, 265, 266, 2, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 51, 52, 42, 17, 18, 186, 47, 187, 188, 189, 190, 191, 192, 19, 20, 21, 22, 23, 43, 48, 14, 15, 16, 53, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 54, 55, 56, 57, 49, 50, 193, 194, 195, 196, 197, 58, 198, 199, 200, 201, 9, 202, 203, 204, 205, 214, 215, 216, 206, 207, 208, 209, 210, 211, 212, 213, 521, 522, 523, 524, 525, 526, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 1, 237, 238, 239, 240, 241, 242, 3, 243, 244, 245, 246, 247, 248, 249, 250, 278, 279, 280, 281, 282, 11, 283, 284, 285, 286, 287, 288, 289, 290, 12, 291, 292, 293, 294, 295, 296, 302, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 330, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 355, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 402, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 437, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 466, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 496, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 527, 528, 529, 530, 531, 532, 541, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 612, 615, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 644, 645, 624, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 7, 683, 684, 685, 686, 687, 688, 689, 10, 690, 691, 4, 692, 693, 5, 694, 695, 6, 696, 697, 698, 699, 700, 701, 13, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 8, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 8, 9, 10, 19, 20, 0, 1, 11, 12, 13, 14, 4, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 2, 31, 32, 33, 5, 34, 35, 36, 3, 37, 38, 39, 40, 41, 42, 43, 44, 45, 6, 46, 47, 48, 7, 49 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 9, 10, 7, 8, 3, 12, 4, 1, 11, 5, 13, 2, 14, 6, 15 }
  uselistorder i32 40, { 1, 10, 0, 3, 8, 9, 11, 4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 5, 21, 6, 22, 7, 23 }
  uselistorder i32 36, { 1, 7, 8, 5, 6, 0, 2, 3, 4 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 4, 3 }
  uselistorder i32 24, { 0, 80, 81, 42, 43, 1, 82, 83, 39, 40, 15, 12, 69, 46, 74, 47, 48, 62, 66, 44, 45, 70, 49, 50, 51, 16, 52, 17, 53, 18, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 71, 65, 72, 67, 68, 75, 76, 77, 73, 78, 79, 2, 84, 19, 20, 3, 85, 21, 22, 4, 86, 13, 87, 88, 89, 23, 24, 5, 25, 26, 90, 27, 28, 6, 14, 91, 29, 7, 8, 30, 92, 31, 9, 93, 94, 95, 32, 33, 96, 34, 97, 35, 10, 98, 36, 37, 99, 100, 38, 101, 11, 41 }
  uselistorder i32* @lr, { 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 0, 110, 111, 112, 1, 113, 114, 115, 2, 116, 117, 118, 119, 120, 121, 122, 123, 19, 20, 124, 125, 126, 127, 128, 53, 54, 55, 56, 61, 62, 63, 64, 21, 22, 23, 24, 25, 65, 66, 4, 5, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 6, 7, 10, 11, 3, 14, 12, 13, 8, 9, 82, 15, 16, 17, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 }
  uselistorder i32 16, { 31, 32, 33, 172, 34, 173, 174, 35, 175, 176, 36, 177, 178, 179, 180, 181, 182, 88, 89, 72, 73, 93, 90, 91, 92, 94, 23, 95, 96, 4, 5, 6, 7, 8, 22, 9, 10, 0, 11, 12, 48, 76, 49, 37, 50, 38, 51, 39, 52, 74, 75, 77, 79, 80, 81, 24, 71, 53, 82, 54, 83, 13, 14, 21, 69, 15, 84, 16, 55, 78, 42, 41, 40, 85, 43, 86, 44, 56, 57, 87, 58, 59, 25, 97, 98, 99, 100, 26, 101, 102, 103, 104, 105, 106, 107, 29, 108, 109, 110, 61, 111, 45, 60, 112, 113, 62, 114, 115, 116, 17, 117, 118, 1, 63, 119, 120, 121, 64, 122, 123, 124, 125, 126, 2, 65, 127, 128, 18, 129, 70, 19, 130, 66, 131, 132, 133, 20, 30, 134, 67, 135, 136, 3, 46, 137, 138, 139, 140, 141, 142, 27, 143, 144, 145, 146, 148, 147, 149, 150, 151, 152, 153, 154, 155, 28, 156, 157, 158, 159, 160, 162, 161, 163, 164, 165, 68, 166, 47, 167, 168, 169, 170, 171 }
  uselistorder i32 20, { 103, 2, 104, 105, 0, 3, 106, 27, 28, 18, 19, 1, 29, 30, 31, 32, 20, 22, 4, 23, 5, 24, 17, 21, 25, 26, 33, 36, 34, 6, 35, 37, 38, 39, 40, 42, 43, 41, 7, 44, 45, 46, 47, 48, 49, 52, 53, 50, 8, 51, 54, 55, 56, 57, 58, 59, 62, 63, 60, 9, 61, 64, 65, 66, 67, 70, 71, 68, 10, 69, 72, 73, 74, 75, 76, 77, 80, 78, 16, 79, 81, 82, 83, 86, 12, 84, 11, 85, 87, 88, 91, 14, 89, 13, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 15, 102 }
  uselistorder i32 27, { 1, 0, 6, 2, 7, 3, 8, 4, 9, 5, 10 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 25, 26, 28, 62, 68, 10, 30, 4, 11, 29, 2, 12, 31, 13, 32, 14, 33, 15, 16, 17, 34, 35, 36, 18, 37, 38, 39, 40, 5, 41, 42, 43, 44, 19, 45, 6, 46, 20, 47, 48, 7, 49, 50, 8, 51, 52, 53, 54, 55, 21, 56, 57, 58, 59, 60, 22, 61, 3, 63, 0, 23, 64, 1, 24, 65, 66, 27, 9, 67 }
  uselistorder i32 -8, { 15, 16, 17, 18, 19, 20, 14, 13, 6, 12, 11, 10, 9, 21, 22, 23, 24, 7, 25, 0, 28, 8, 26, 27, 5, 1, 3, 2, 4 }
  uselistorder i1 false, { 46, 47, 48, 84, 16, 45, 85, 86, 42, 43, 44, 87, 15, 88, 89, 0, 51, 50, 52, 49, 2, 4, 17, 3, 12, 5, 54, 14, 11, 18, 56, 6, 7, 8, 53, 1, 19, 9, 10, 55, 90, 59, 91, 92, 60, 93, 24, 25, 26, 27, 61, 94, 95, 77, 96, 97, 98, 66, 99, 29, 30, 67, 100, 68, 101, 62, 63, 64, 28, 102, 65, 103, 104, 76, 105, 106, 107, 108, 109, 110, 69, 70, 111, 112, 71, 113, 72, 73, 114, 74, 115, 75, 116, 57, 58, 117, 118, 119, 120, 121, 122, 31, 32, 78, 123, 124, 79, 38, 125, 80, 21, 22, 33, 23, 34, 35, 36, 13, 37, 126, 39, 40, 81, 82, 127, 20, 83, 128, 41, 129, 130 }
  uselistorder i32 4, { 85, 76, 77, 5, 408, 78, 409, 57, 6, 7, 79, 410, 80, 411, 412, 413, 414, 81, 415, 416, 417, 418, 82, 419, 420, 421, 422, 423, 8, 424, 425, 426, 427, 428, 83, 429, 56, 430, 431, 432, 433, 434, 435, 9, 10, 84, 436, 243, 244, 183, 184, 245, 246, 247, 437, 438, 439, 440, 441, 134, 135, 136, 58, 137, 138, 370, 372, 371, 368, 369, 332, 333, 334, 335, 373, 374, 375, 376, 357, 358, 359, 377, 378, 139, 140, 141, 142, 143, 49, 11, 12, 248, 249, 250, 251, 252, 253, 13, 14, 67, 15, 16, 68, 379, 380, 181, 17, 18, 102, 86, 381, 382, 59, 187, 103, 188, 213, 214, 105, 189, 106, 190, 107, 191, 207, 208, 215, 216, 192, 193, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 104, 210, 211, 212, 209, 69, 217, 218, 87, 108, 19, 219, 20, 220, 221, 21, 22, 222, 223, 51, 224, 50, 229, 109, 230, 110, 232, 111, 233, 234, 231, 225, 112, 226, 227, 228, 235, 65, 64, 63, 236, 113, 23, 24, 25, 26, 27, 28, 237, 52, 238, 53, 239, 240, 241, 0, 114, 242, 254, 144, 255, 256, 257, 258, 145, 146, 116, 259, 66, 29, 115, 260, 88, 261, 262, 147, 263, 264, 148, 149, 265, 117, 266, 89, 267, 268, 150, 151, 269, 152, 270, 271, 153, 154, 70, 272, 118, 273, 90, 274, 275, 276, 277, 278, 279, 119, 91, 280, 281, 155, 282, 283, 284, 285, 156, 157, 2, 286, 120, 287, 92, 288, 289, 290, 158, 291, 292, 159, 160, 3, 71, 293, 121, 294, 93, 295, 296, 297, 298, 161, 162, 299, 300, 301, 163, 302, 303, 122, 304, 4, 305, 94, 306, 123, 307, 308, 309, 164, 310, 311, 312, 313, 314, 165, 166, 124, 315, 72, 95, 316, 96, 317, 318, 319, 167, 320, 321, 322, 125, 323, 126, 324, 325, 326, 327, 168, 169, 127, 328, 73, 329, 97, 330, 98, 331, 170, 336, 337, 30, 171, 338, 339, 31, 172, 340, 341, 32, 173, 342, 343, 33, 174, 74, 344, 345, 34, 346, 175, 347, 348, 35, 176, 349, 350, 36, 177, 351, 352, 37, 178, 353, 354, 38, 179, 355, 356, 39, 360, 180, 361, 362, 363, 364, 40, 365, 366, 1, 383, 367, 384, 385, 101, 386, 387, 75, 388, 128, 389, 390, 391, 392, 99, 393, 129, 394, 395, 396, 100, 397, 130, 398, 41, 42, 43, 399, 400, 62, 61, 60, 401, 44, 45, 46, 131, 402, 132, 403, 47, 48, 404, 54, 405, 55, 133, 406, 407, 182 }
  uselistorder i32* @r2, { 89, 90, 25, 9, 26, 28, 27, 29, 30, 31, 32, 7, 91, 1, 92, 97, 98, 101, 93, 53, 57, 58, 61, 59, 60, 54, 55, 56, 41, 62, 15, 0, 99, 3, 100, 6, 33, 34, 35, 8, 10, 94, 95, 96, 11, 63, 64, 65, 66, 2, 67, 68, 69, 70, 71, 72, 4, 73, 74, 75, 76, 77, 78, 79, 16, 12, 13, 14, 19, 20, 17, 18, 21, 22, 23, 24, 36, 37, 38, 39, 40, 5, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 80, 81, 82, 83, 84, 85, 86, 87, 88 }
  uselistorder label %dec_label_pc_14eb8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14e4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14de0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14d80, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_14d0c, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_14cd0, { 1, 0 }
  uselistorder label %dec_label_pc_14cbc, { 1, 0 }
  uselistorder label %dec_label_pc_14c7c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14c10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14ba4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14b44, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_14ab8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_14a78, { 1, 0 }
}

define i32 @function_14ed8(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ed8:
  ret i32 %arg1
}

define i32 @function_14ee0() local_unnamed_addr {
dec_label_pc_14ee0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_14ee0 = load i32, i32* @r0, align 4
  %v2_14ee0 = icmp eq i32 %v0_14ee0, 0
  %v3_14ee4 = load i32, i32* @r4, align 4
  store i32 %v3_14ee4, i32* %stack_var_-20, align 4
  %v0_14ee8 = load i32, i32* @r1, align 4
  br i1 %v2_14ee0, label %dec_label_pc_14fc0, label %dec_label_pc_14efc.lr.ph

dec_label_pc_14efc:                               ; preds = %dec_label_pc_14efc.lr.ph, %dec_label_pc_14f80
  %v1_14f80 = phi i32 [ 0, %dec_label_pc_14efc.lr.ph ], [ %v5_14f80, %dec_label_pc_14f80 ]
  %v0_14f84 = phi i32 [ 1, %dec_label_pc_14efc.lr.ph ], [ %v1_14f84, %dec_label_pc_14f80 ]
  %v0_14f04 = phi i32 [ %v0_14ee0, %dec_label_pc_14efc.lr.ph ], [ %v0_14f0425, %dec_label_pc_14f80 ]
  %v1_14f04 = inttoptr i32 %v0_14f04 to i8*
  %v2_14f04 = load i8, i8* %v1_14f04, align 1
  %v3_14f04 = zext i8 %v2_14f04 to i32
  %v3_14f08 = mul nuw nsw i32 %v3_14f04, 2
  %v4_14f08 = add i32 %v3_14f08, %v2_14f00.pre
  %v5_14f08 = inttoptr i32 %v4_14f08 to i8*
  %v6_14f08 = load i8, i8* %v5_14f08, align 1
  %v1_14f0c = and i8 %v6_14f08, 8
  %v2_14f0c = icmp eq i8 %v1_14f0c, 0
  br i1 %v2_14f0c, label %dec_label_pc_14fc0, label %dec_label_pc_14f14

dec_label_pc_14f14:                               ; preds = %dec_label_pc_14efc
  br label %dec_label_pc_14f34

dec_label_pc_14f1c:                               ; preds = %dec_label_pc_14f34
  %v3_14f20 = mul i32 %v0_14f80, 10
  %v4_14f20 = add i32 %v3_14f34, %v3_14f20
  %v1_14f24 = add i32 %v4_14f20, -48
  %v8_14f2c = icmp sgt i32 %v1_14f24, 255
  br i1 %v8_14f2c, label %dec_label_pc_14fc0, label %dec_label_pc_14f30

dec_label_pc_14f30:                               ; preds = %dec_label_pc_14f1c
  %v1_14f30 = add i32 %v0_14f70, 1
  store i32 %v1_14f30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14f34

dec_label_pc_14f34:                               ; preds = %dec_label_pc_14f14, %dec_label_pc_14f30
  %v0_14f80 = phi i32 [ 0, %dec_label_pc_14f14 ], [ %v1_14f24, %dec_label_pc_14f30 ]
  %v0_14f70 = phi i32 [ %v0_14f04, %dec_label_pc_14f14 ], [ %v1_14f30, %dec_label_pc_14f30 ]
  %v1_14f34 = inttoptr i32 %v0_14f70 to i8*
  %v2_14f34 = load i8, i8* %v1_14f34, align 1
  %v3_14f34 = zext i8 %v2_14f34 to i32
  %v2_14f38 = mul nuw nsw i32 %v3_14f34, 2
  %v2_14f3c = add i32 %v2_14f38, %v2_14f00.pre
  %v3_14f40 = inttoptr i32 %v2_14f3c to i8*
  %v4_14f40 = load i8, i8* %v3_14f40, align 1
  %v6_14f40 = zext i8 %v4_14f40 to i32
  %v1_14f4c = and i32 %v6_14f40, 8
  %v2_14f4c = icmp eq i32 %v1_14f4c, 0
  br i1 %v2_14f4c, label %dec_label_pc_14f54, label %dec_label_pc_14f1c

dec_label_pc_14f54:                               ; preds = %dec_label_pc_14f34
  %v8_14f58 = icmp sgt i32 %v0_14f84, 3
  br i1 %v8_14f58, label %dec_label_pc_14f6c, label %dec_label_pc_14f5c

dec_label_pc_14f5c:                               ; preds = %dec_label_pc_14f54
  %v7_14f5c = icmp eq i8 %v2_14f34, 46
  br i1 %v7_14f5c, label %dec_label_pc_14f64, label %dec_label_pc_14fc0

dec_label_pc_14f64:                               ; preds = %dec_label_pc_14f5c
  %v1_14f64 = add i32 %v0_14f70, 1
  store i32 %v1_14f64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14f80

dec_label_pc_14f6c:                               ; preds = %dec_label_pc_14f54
  %v2_14f6c = icmp eq i8 %v2_14f34, 0
  %v1_14f70 = add i32 %v0_14f70, 1
  store i32 %v1_14f70, i32* %r0.global-to-local, align 4
  br i1 %v2_14f6c, label %dec_label_pc_14f80, label %dec_label_pc_14f78

dec_label_pc_14f78:                               ; preds = %dec_label_pc_14f6c
  %v1_14f78 = and i32 %v6_14f40, 32
  %v2_14f78 = icmp eq i32 %v1_14f78, 0
  br i1 %v2_14f78, label %dec_label_pc_14fc0, label %dec_label_pc_14f80

dec_label_pc_14f80:                               ; preds = %dec_label_pc_14f78, %dec_label_pc_14f6c, %dec_label_pc_14f64
  %v0_14f0425 = phi i32 [ %v1_14f70, %dec_label_pc_14f78 ], [ %v1_14f70, %dec_label_pc_14f6c ], [ %v1_14f64, %dec_label_pc_14f64 ]
  %v4_14f80 = mul i32 %v1_14f80, 256
  %v5_14f80 = or i32 %v0_14f80, %v4_14f80
  %v1_14f84 = add nuw nsw i32 %v0_14f84, 1
  %v7_14f8c = icmp slt i32 %v1_14f84, 5
  br i1 %v7_14f8c, label %dec_label_pc_14efc, label %dec_label_pc_14f90

dec_label_pc_14efc.lr.ph:                         ; preds = %dec_label_pc_14ee0
  %v2_14f00.pre = load i32, i32* bitcast (i32** @global_var_1dc68.672 to i32*), align 4
  br label %dec_label_pc_14efc

dec_label_pc_14f90:                               ; preds = %dec_label_pc_14f80
  %v2_14f90 = icmp eq i32 %v0_14ee8, 0
  br i1 %v2_14f90, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_14f90
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_14f90
  %v3_14fac = call i32 @llvm.bswap.i32(i32 %v5_14f80)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_14fb8 = inttoptr i32 %v0_14ee8 to i32*
  store i32 %v3_14fac, i32* %v3_14fb8, align 4
  %v2_14fbc.pre = load i32, i32* %stack_var_-20, align 4
  %v17_14fbc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_14fbc = phi i32 [ 1, %bb ], [ %v17_14fbc.pre, %bb40 ]
  %v2_14fbc = phi i32 [ %v3_14ee4, %bb ], [ %v2_14fbc.pre, %bb40 ]
  store i32 %v2_14fbc, i32* @r4, align 4
  ret i32 %v17_14fbc

dec_label_pc_14fc0:                               ; preds = %dec_label_pc_14f5c, %dec_label_pc_14f78, %dec_label_pc_14efc, %dec_label_pc_14f1c, %dec_label_pc_14ee0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_14ee4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_14f00.pre, { 1, 0 }
  uselistorder i32 %v1_14f84, { 1, 0 }
  uselistorder i32 %v0_14f70, { 0, 1, 3, 2 }
  uselistorder i32 %v3_14ee4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 16, 17, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 5, { 15, 28, 30, 16, 5, 17, 6, 2, 18, 29, 3, 0, 19, 31, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 7, 36, 37, 38, 39, 8, 40, 41, 42, 43, 44, 45, 46, 47, 9, 48, 49, 26, 50, 10, 51, 52, 53, 11, 54, 55, 56, 57, 12, 58, 59, 60, 61, 62, 63, 64, 13, 65, 66, 67, 68, 69, 70, 71, 14, 72, 4, 73, 74, 1, 75, 76, 27, 77 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 60, 61, 65, 68, 69, 70, 66, 67, 71, 72, 73, 74, 75, 420, 421, 76, 77, 78, 79, 80, 81, 82, 422, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 95, 96, 100, 99, 98, 101, 418, 423, 106, 102, 105, 103, 104, 416, 107, 108, 109, 112, 111, 110, 113, 115, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 125, 127, 128, 129, 133, 139, 134, 130, 131, 135, 136, 137, 140, 132, 141, 142, 138, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 154, 157, 160, 161, 159, 158, 162, 165, 164, 163, 166, 172, 169, 173, 170, 167, 174, 168, 175, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 192, 194, 195, 196, 207, 202, 197, 208, 203, 209, 210, 204, 211, 205, 198, 199, 200, 212, 201, 213, 206, 214, 215, 216, 217, 218, 219, 220, 221, 223, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 238, 248, 244, 245, 240, 241, 249, 246, 242, 250, 247, 243, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 267, 266, 269, 276, 272, 277, 278, 273, 270, 279, 274, 271, 280, 275, 281, 282, 283, 284, 285, 286, 287, 290, 291, 288, 292, 289, 294, 293, 295, 296, 297, 298, 299, 302, 303, 306, 304, 300, 307, 305, 301, 310, 309, 308, 417, 424, 311, 312, 318, 313, 319, 314, 315, 320, 316, 321, 322, 317, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 341, 343, 344, 348, 349, 356, 350, 351, 357, 352, 345, 346, 358, 353, 347, 354, 355, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 373, 375, 376, 380, 381, 388, 382, 383, 389, 384, 377, 378, 390, 385, 379, 386, 387, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 407, 409, 410, 411, 412, 413, 414, 415, 419 }
  uselistorder i32 32, { 73, 50, 51, 48, 68, 69, 62, 63, 4, 3, 6, 5, 8, 7, 49, 47, 74, 75, 53, 52, 54, 64, 55, 65, 56, 66, 57, 67, 10, 9, 12, 11, 14, 13, 16, 15, 61, 18, 17, 19, 21, 20, 23, 22, 24, 25, 27, 26, 58, 59, 70, 71, 28, 72, 29, 30, 0, 31, 1, 2, 32, 33, 34, 35, 36, 38, 37, 40, 39, 42, 41, 43, 44, 45, 46, 60 }
  uselistorder i8 46, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 3, { 34, 58, 59, 163, 60, 61, 62, 63, 64, 65, 78, 94, 164, 4, 155, 158, 159, 0, 66, 21, 67, 22, 160, 73, 35, 23, 24, 79, 38, 80, 2, 81, 82, 83, 84, 36, 19, 85, 86, 87, 88, 39, 89, 40, 90, 25, 91, 41, 92, 37, 93, 42, 43, 44, 1, 95, 96, 97, 98, 99, 100, 101, 102, 45, 103, 46, 104, 47, 26, 105, 106, 107, 108, 109, 6, 5, 48, 27, 110, 111, 112, 113, 114, 115, 116, 8, 7, 49, 117, 28, 118, 119, 120, 121, 122, 123, 124, 125, 10, 9, 50, 126, 29, 127, 128, 129, 130, 131, 12, 11, 51, 132, 30, 133, 134, 135, 136, 52, 137, 14, 13, 53, 138, 31, 139, 140, 141, 142, 143, 144, 16, 15, 54, 145, 32, 146, 147, 148, 149, 150, 151, 152, 18, 17, 55, 153, 33, 154, 20, 156, 3, 157, 161, 68, 74, 69, 75, 70, 76, 71, 77, 56, 162, 57, 72 }
  uselistorder i32 8, { 129, 147, 30, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 31, 164, 74, 75, 76, 77, 81, 78, 79, 80, 165, 133, 132, 130, 131, 115, 116, 117, 134, 135, 136, 123, 124, 125, 6, 34, 35, 32, 33, 16, 17, 26, 27, 36, 166, 82, 83, 84, 85, 7, 8, 58, 20, 9, 10, 15, 11, 44, 64, 37, 12, 13, 14, 59, 45, 63, 29, 65, 66, 67, 68, 70, 46, 71, 47, 72, 73, 69, 48, 49, 50, 51, 86, 28, 57, 38, 87, 88, 89, 90, 91, 21, 92, 93, 94, 95, 3, 96, 97, 98, 4, 99, 100, 101, 102, 103, 104, 105, 5, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 39, 119, 40, 120, 41, 121, 52, 122, 55, 126, 127, 53, 128, 0, 1, 2, 18, 22, 23, 137, 19, 24, 25, 138, 54, 60, 61, 139, 140, 142, 141, 143, 144, 42, 145, 56, 62, 43, 146 }
  uselistorder i32 255, { 2, 15, 16, 3, 17, 4, 18, 5, 19, 0, 1, 8, 20, 9, 21, 6, 22, 7, 23, 12, 24, 13, 25, 10, 26, 11, 27, 14, 28 }
  uselistorder i32 10, { 12, 52, 53, 33, 34, 81, 0, 4, 5, 35, 13, 40, 41, 3, 42, 43, 36, 14, 44, 37, 45, 15, 46, 16, 47, 17, 48, 18, 49, 19, 50, 51, 20, 1, 21, 22, 23, 24, 25, 26, 6, 54, 55, 56, 57, 58, 59, 60, 61, 62, 7, 63, 64, 65, 8, 66, 67, 68, 27, 69, 9, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 10, 82, 83, 2, 31, 38, 84, 29, 85, 32, 39, 11, 86, 28, 87, 30 }
  uselistorder i8 0, { 4, 0, 22, 3, 23, 24, 1, 8, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 5, 36, 37, 38, 39, 11, 40, 2, 10, 9, 12, 41, 42, 43, 44, 17, 45, 46, 49, 18, 47, 48, 16, 50, 51, 52, 53, 54, 55, 13, 56, 57, 58, 20, 59, 60, 61, 63, 64, 7, 67, 15, 73, 68, 69, 65, 66, 14, 19, 70, 71, 72, 6, 74, 75, 62, 21, 76, 77, 78, 79, 80, 81, 82 }
  uselistorder i32 2, { 4, 138, 259, 260, 57, 261, 262, 47, 263, 46, 264, 45, 141, 81, 82, 244, 83, 245, 84, 246, 265, 52, 85, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 139, 14, 15, 16, 17, 18, 87, 88, 86, 48, 49, 89, 156, 90, 92, 143, 93, 144, 150, 64, 142, 65, 145, 66, 146, 67, 147, 68, 148, 69, 149, 70, 155, 151, 152, 153, 154, 59, 94, 157, 19, 20, 158, 160, 161, 95, 162, 53, 140, 163, 91, 164, 21, 96, 159, 100, 165, 98, 166, 99, 167, 97, 101, 168, 22, 23, 24, 102, 169, 60, 103, 104, 105, 106, 61, 108, 109, 107, 71, 110, 111, 112, 170, 50, 56, 171, 172, 173, 230, 231, 174, 175, 176, 177, 178, 179, 180, 113, 181, 72, 182, 183, 184, 185, 186, 114, 73, 187, 188, 189, 190, 191, 192, 193, 115, 194, 74, 195, 196, 116, 197, 117, 118, 198, 199, 200, 201, 202, 203, 204, 205, 1, 25, 26, 27, 28, 29, 30, 119, 206, 75, 207, 208, 209, 210, 211, 2, 31, 32, 33, 34, 35, 36, 120, 76, 212, 213, 214, 215, 121, 216, 54, 217, 122, 218, 3, 37, 38, 39, 40, 41, 42, 123, 219, 77, 220, 221, 222, 223, 224, 225, 226, 227, 124, 228, 78, 229, 232, 233, 234, 125, 235, 126, 236, 237, 238, 239, 127, 240, 79, 241, 62, 242, 58, 63, 243, 51, 128, 247, 248, 80, 249, 135, 250, 129, 251, 130, 131, 252, 132, 253, 133, 254, 134, 255, 55, 256, 43, 44, 257, 136, 258, 137 }
  uselistorder i32* @r1, { 33, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1, 93, 94, 14, 15, 17, 16, 4, 6, 95, 0, 96, 35, 36, 98, 37, 42, 43, 46, 44, 45, 38, 39, 40, 41, 32, 47, 97, 11, 5, 34, 18, 7, 48, 49, 3, 50, 12, 8, 9, 10, 13, 19, 20, 29, 30, 2, 21, 22, 23, 24, 25, 26, 27, 28, 31, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75 }
  uselistorder label %dec_label_pc_14fc0, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_14f34, { 1, 0 }
}

define i32 @function_14fcc(i32 %arg1) local_unnamed_addr {
dec_label_pc_14fcc:
  %v3_14fcc = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_14fd4 = call i32 @function_12a30()
  %v0_14fd8 = load i32, i32* @r4, align 4
  store i32 %v3_14fcc, i32* @r4, align 4
  %v2_14fe0 = call i32 @function_12ad8(i32 %v0_14fd4, i32 %v0_14fd8)
  ret i32 %v2_14fe0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_12ad8, { 4, 6, 3, 2, 1, 0, 5 }
}

define i32 @function_14fe4(i32 %arg1) local_unnamed_addr {
dec_label_pc_14fe4:
  %v1_14fe4 = add i32 %arg1, 28
  %v2_14fe4 = inttoptr i32 %v1_14fe4 to i32*
  %v3_14fe4 = load i32, i32* %v2_14fe4, align 4
  %v1_14fec = add i32 %arg1, 44
  %v2_14fec = inttoptr i32 %v1_14fec to i32*
  %v3_14fec = load i32, i32* %v2_14fec, align 4
  store i32 %v3_14fe4, i32* @global_var_1dfe4.674, align 4
  store i32 %v3_14fec, i32* @global_var_1dfe8.676, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 17, 0, 6, 7, 4, 5, 12, 13, 8, 9, 10, 11, 1, 14, 2, 15, 3, 16 }
  uselistorder i32 28, { 34, 0, 24, 25, 10, 11, 33, 1, 5, 4, 6, 12, 7, 13, 8, 14, 15, 16, 17, 18, 19, 20, 21, 2, 9, 23, 22, 26, 27, 28, 29, 30, 31, 32, 3 }
}

define i32 @function_15008(i32* %arg1) local_unnamed_addr {
dec_label_pc_15008:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_15010 = call i32 @brk(i32* %arg1)
  %v3_15014 = icmp ult i32 %v2_15010, %tmp
  store i32 %v2_15010, i32* @global_var_1dd28.670, align 4
  br i1 %v3_15014, label %dec_label_pc_15028, label %dec_label_pc_15038

dec_label_pc_15028:                               ; preds = %dec_label_pc_15008
  %v0_15028 = call i32 @function_12f80()
  %v2_15030 = inttoptr i32 %v0_15028 to i32*
  store i32 12, i32* %v2_15030, align 4
  br label %dec_label_pc_15038

dec_label_pc_15038:                               ; preds = %dec_label_pc_15008, %dec_label_pc_15028
  %v0_15038 = phi i32 [ 0, %dec_label_pc_15008 ], [ -1, %dec_label_pc_15028 ]
  ret i32 %v0_15038

; uselistorder directives
  uselistorder i32 12, { 16, 10, 121, 122, 123, 125, 126, 127, 128, 11, 124, 129, 130, 131, 132, 133, 134, 135, 65, 66, 29, 30, 67, 17, 18, 106, 107, 108, 0, 103, 109, 7, 110, 8, 104, 4, 105, 19, 20, 6, 68, 69, 21, 70, 71, 22, 46, 12, 32, 33, 47, 48, 43, 40, 49, 34, 31, 35, 36, 37, 38, 39, 41, 44, 45, 42, 50, 51, 52, 9, 53, 54, 56, 57, 58, 23, 59, 24, 60, 25, 61, 26, 62, 27, 64, 5, 63, 55, 98, 72, 28, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 13, 84, 85, 86, 87, 14, 88, 89, 90, 91, 92, 93, 15, 94, 95, 96, 97, 99, 100, 101, 102, 1, 2, 3, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120 }
  uselistorder i32 ()* @function_12f80, { 29, 57, 28, 42, 9, 8, 7, 6, 41, 40, 39, 5, 58, 27, 26, 24, 25, 56, 55, 23, 22, 32, 21, 14, 20, 43, 19, 54, 18, 33, 53, 38, 37, 36, 52, 17, 4, 3, 51, 16, 35, 34, 50, 2, 11, 49, 48, 10, 31, 15, 1, 0, 47, 46, 45, 44, 30, 13, 12 }
  uselistorder i32* @global_var_1dd28.670, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15038, { 1, 0 }
}

define i32 @function_15044(i32 %arg1) local_unnamed_addr {
dec_label_pc_15044:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15048 = load i32, i32* @global_var_1daf4.632, align 4
  %v7_1504c = icmp eq i32 %v3_15048, -1
  %v3_15050 = load i32, i32* @r4, align 4
  store i32 %v3_15050, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1daf4.632 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_1504c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_15044
  store i32 %v3_15050, i32* %r4.global-to-local, align 4
  %v9_15058 = load i32, i32* @r0, align 4
  ret i32 %v9_15058

.preheader:                                       ; preds = %dec_label_pc_15044, %.preheader
  %v0_15060 = phi i32 [ %v3_15064, %.preheader ], [ %v3_15048, %dec_label_pc_15044 ]
  call void @__pseudo_branch(i32 %v0_15060)
  %v0_15064 = load i32, i32* %r4.global-to-local, align 4
  %v1_15064 = add i32 %v0_15064, -4
  %v2_15064 = inttoptr i32 %v1_15064 to i32*
  %v3_15064 = load i32, i32* %v2_15064, align 4
  store i32 %v1_15064, i32* %r4.global-to-local, align 4
  %v3_15068 = icmp eq i32 %v3_15064, -1
  br i1 %v3_15068, label %dec_label_pc_15070, label %.preheader

dec_label_pc_15070:                               ; preds = %.preheader
  %v2_15070 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15070, i32* %r4.global-to-local, align 4
  %v8_15070 = load i32, i32* @r0, align 4
  ret i32 %v8_15070

; uselistorder directives
  uselistorder i32 %v3_15064, { 1, 0 }
  uselistorder i32 %v3_15048, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 54, 15, 55, 56, 57, 3, 16, 17, 18, 58, 59, 60, 4, 19, 20, 21, 61, 62, 63, 5, 22, 23, 64, 14, 13, 65, 66, 67, 12, 11, 10, 9, 24, 25, 26, 27, 28, 0, 29, 1, 30, 2, 68, 8, 31, 42, 43, 49, 44, 32, 33, 45, 46, 47, 48, 50, 7, 6, 39, 40, 41, 34, 35, 51, 36, 37, 52, 53, 38 }
  uselistorder i32 -1, { 153, 0, 86, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 154, 87, 270, 88, 300, 89, 301, 289, 90, 341, 91, 342, 92, 343, 93, 344, 133, 84, 290, 291, 94, 292, 293, 95, 345, 1, 155, 2, 96, 302, 303, 156, 157, 158, 135, 159, 3, 4, 83, 73, 74, 160, 161, 162, 82, 271, 163, 272, 5, 6, 97, 304, 98, 305, 99, 298, 100, 306, 101, 297, 102, 307, 103, 288, 104, 308, 105, 273, 106, 309, 107, 296, 108, 274, 109, 164, 152, 110, 165, 111, 275, 112, 310, 113, 346, 347, 114, 276, 115, 311, 116, 294, 117, 295, 118, 277, 119, 348, 120, 324, 121, 278, 122, 279, 123, 325, 124, 299, 125, 312, 126, 349, 85, 350, 166, 167, 168, 169, 170, 171, 172, 173, 7, 8, 9, 10, 11, 127, 128, 12, 174, 280, 18, 175, 19, 176, 14, 177, 178, 281, 13, 179, 77, 20, 180, 181, 17, 182, 183, 184, 267, 268, 185, 186, 187, 265, 129, 266, 21, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 269, 15, 208, 16, 209, 210, 211, 22, 212, 213, 130, 282, 214, 23, 215, 283, 78, 75, 76, 24, 25, 28, 136, 284, 27, 138, 285, 26, 137, 286, 29, 30, 139, 287, 31, 32, 33, 34, 35, 216, 36, 79, 37, 38, 40, 217, 132, 39, 80, 41, 42, 43, 44, 45, 46, 47, 218, 48, 131, 49, 50, 52, 219, 51, 53, 54, 55, 56, 220, 57, 58, 59, 221, 60, 61, 62, 222, 63, 64, 65, 66, 67, 223, 68, 69, 70, 224, 71, 72, 81, 225, 226, 227, 228, 313, 314, 145, 315, 143, 316, 144, 317, 141, 318, 229, 230, 231, 232, 233, 146, 319, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 140, 320, 147, 321, 260, 261, 262, 263, 264, 142, 322, 134, 148, 323, 149, 150, 151 }
  uselistorder i32* @global_var_1daf4.632, { 1, 0 }
  uselistorder i32 1, { 518, 77, 330, 368, 872, 873, 874, 875, 876, 344, 519, 303, 984, 333, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 522, 521, 520, 294, 295, 298, 297, 293, 292, 296, 301, 299, 291, 300, 523, 256, 255, 251, 253, 252, 254, 257, 250, 682, 52, 49, 51, 50, 524, 53, 525, 238, 239, 526, 41, 273, 527, 304, 528, 108, 529, 278, 530, 282, 752, 753, 531, 287, 283, 288, 284, 285, 289, 286, 754, 755, 756, 413, 70, 71, 67, 69, 68, 532, 311, 533, 275, 0, 537, 536, 535, 534, 244, 243, 414, 538, 97, 98, 345, 415, 539, 116, 540, 878, 545, 544, 543, 542, 541, 188, 189, 190, 192, 191, 416, 546, 997, 346, 549, 548, 547, 313, 312, 550, 94, 95, 93, 96, 22, 23, 24, 25, 551, 102, 103, 101, 100, 552, 553, 310, 309, 554, 347, 879, 555, 114, 115, 417, 418, 328, 559, 558, 557, 556, 187, 186, 334, 560, 109, 561, 240, 562, 73, 563, 80, 564, 277, 565, 66, 566, 113, 567, 263, 568, 264, 569, 9, 570, 10, 571, 259, 572, 845, 319, 262, 261, 260, 683, 684, 685, 686, 687, 688, 689, 998, 29, 30, 26, 27, 28, 573, 419, 420, 574, 56, 55, 57, 54, 376, 757, 575, 81, 377, 577, 576, 79, 78, 578, 58, 579, 19, 580, 20, 21, 581, 72, 582, 276, 583, 43, 584, 241, 585, 142, 242, 586, 274, 587, 74, 588, 314, 589, 302, 590, 281, 591, 216, 290, 99, 378, 880, 881, 379, 882, 883, 318, 884, 885, 886, 887, 324, 888, 594, 593, 592, 38, 40, 32, 33, 36, 34, 35, 31, 37, 39, 1, 889, 890, 891, 892, 16, 15, 2, 893, 894, 895, 896, 335, 897, 898, 336, 899, 596, 595, 280, 279, 758, 759, 760, 421, 597, 14, 13, 12, 11, 900, 348, 349, 3, 412, 901, 598, 46, 44, 47, 48, 45, 902, 904, 903, 422, 905, 76, 75, 860, 906, 907, 908, 17, 18, 909, 715, 599, 147, 149, 150, 148, 910, 911, 600, 248, 247, 246, 245, 249, 912, 913, 601, 146, 145, 144, 143, 423, 692, 424, 693, 380, 694, 695, 433, 696, 716, 434, 435, 706, 707, 712, 432, 690, 691, 697, 430, 698, 699, 431, 700, 701, 429, 702, 703, 428, 704, 705, 427, 708, 709, 426, 710, 711, 425, 713, 714, 717, 436, 329, 718, 437, 719, 721, 722, 720, 723, 438, 724, 681, 350, 727, 725, 439, 726, 729, 440, 730, 731, 732, 369, 733, 734, 351, 740, 741, 325, 441, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 513, 604, 603, 602, 204, 207, 205, 206, 210, 213, 215, 214, 208, 209, 212, 211, 735, 736, 442, 737, 738, 443, 739, 615, 237, 236, 231, 235, 234, 233, 230, 232, 728, 444, 617, 616, 306, 308, 305, 307, 846, 619, 618, 220, 221, 219, 218, 217, 222, 620, 447, 381, 742, 743, 382, 744, 445, 446, 448, 745, 746, 449, 450, 451, 452, 453, 454, 455, 456, 632, 631, 630, 629, 628, 627, 626, 625, 624, 517, 623, 622, 621, 137, 139, 138, 141, 140, 457, 326, 458, 633, 461, 460, 459, 747, 635, 634, 748, 636, 462, 463, 464, 749, 750, 465, 352, 751, 327, 466, 640, 639, 638, 637, 152, 151, 766, 5, 761, 467, 762, 4, 763, 370, 764, 331, 332, 765, 767, 371, 768, 644, 643, 642, 514, 515, 641, 847, 383, 848, 384, 849, 6, 850, 7, 8, 769, 770, 771, 772, 773, 774, 775, 776, 372, 777, 778, 779, 780, 468, 781, 469, 782, 470, 783, 784, 785, 786, 787, 647, 646, 645, 196, 195, 193, 198, 199, 202, 200, 194, 203, 201, 197, 788, 789, 790, 791, 792, 471, 472, 649, 648, 117, 120, 119, 125, 124, 123, 122, 118, 121, 793, 794, 795, 473, 796, 797, 798, 799, 800, 801, 474, 802, 475, 386, 385, 476, 803, 650, 265, 267, 269, 270, 272, 271, 268, 266, 804, 805, 477, 806, 478, 479, 389, 387, 388, 516, 651, 111, 112, 807, 808, 337, 809, 810, 811, 812, 480, 813, 338, 481, 482, 814, 390, 815, 652, 84, 87, 82, 83, 88, 89, 92, 90, 86, 91, 85, 816, 817, 818, 819, 820, 483, 821, 484, 392, 391, 485, 822, 486, 823, 653, 225, 227, 228, 229, 226, 224, 223, 824, 825, 826, 827, 828, 829, 830, 487, 831, 488, 832, 489, 397, 396, 490, 833, 393, 834, 394, 835, 395, 836, 658, 657, 656, 655, 654, 164, 166, 168, 169, 167, 163, 165, 837, 838, 839, 840, 841, 842, 491, 400, 399, 492, 843, 398, 844, 659, 156, 155, 154, 158, 159, 162, 160, 153, 161, 157, 851, 852, 853, 854, 855, 856, 493, 403, 402, 494, 857, 401, 858, 664, 663, 662, 661, 660, 129, 128, 127, 132, 133, 136, 134, 126, 131, 135, 130, 859, 404, 495, 665, 105, 107, 106, 104, 861, 862, 496, 353, 497, 865, 498, 499, 866, 863, 864, 867, 868, 869, 870, 339, 871, 340, 63, 60, 62, 61, 65, 59, 64, 914, 42, 877, 110, 915, 258, 916, 320, 503, 360, 361, 917, 321, 501, 362, 363, 502, 918, 354, 919, 359, 920, 322, 364, 506, 365, 374, 323, 504, 366, 367, 505, 921, 355, 922, 923, 411, 924, 925, 926, 406, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 407, 939, 940, 941, 942, 943, 342, 944, 507, 945, 508, 509, 946, 947, 948, 949, 950, 408, 951, 952, 953, 356, 954, 409, 955, 956, 957, 357, 958, 410, 959, 960, 961, 358, 962, 963, 964, 965, 343, 966, 967, 968, 341, 500, 405, 969, 971, 973, 972, 970, 510, 974, 975, 976, 511, 977, 978, 979, 980, 680, 375, 981, 982, 373, 512, 983, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 173, 172, 170, 171, 175, 185, 182, 183, 184, 177, 176, 174, 178, 180, 179, 181, 678, 679, 317, 316, 315 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_15078() local_unnamed_addr {
dec_label_pc_15078:
  %v5_1507c = load i32, i32* @r0, align 4
  ret i32 %v5_1507c

; uselistorder directives
  uselistorder i32* @r0, { 2, 10, 11, 99, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 57, 58, 60, 59, 25, 190, 191, 32, 33, 34, 35, 7, 3, 15, 16, 106, 107, 26, 192, 193, 195, 9, 13, 109, 12, 108, 95, 30, 96, 14, 97, 110, 194, 40, 22, 61, 62, 63, 64, 28, 18, 65, 66, 67, 68, 17, 196, 8, 20, 111, 21, 112, 6, 113, 114, 19, 115, 116, 117, 118, 0, 36, 41, 42, 37, 38, 39, 43, 45, 46, 47, 48, 49, 44, 50, 51, 52, 53, 54, 55, 56, 27, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 29, 81, 91, 92, 1, 5, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 98, 100, 101, 102, 103, 104, 119, 105, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 4, 23, 24, 31 }
}

define i32 @function_15080() local_unnamed_addr {
entry:
  %v3_15084 = load i32, i32* @r4, align 4
  %v0_1508c = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_15084)
  ret i32 %v0_1508c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 4, 5, 6, 2, 3, 1, 8 }
  uselistorder i32 0, { 119, 0, 896, 897, 898, 899, 121, 120, 900, 1285, 1286, 1287, 1288, 1289, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1290, 1291, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 33, 1310, 1311, 1312, 1313, 1314, 34, 1315, 1316, 1317, 35, 1318, 1319, 1320, 36, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1336, 1337, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 37, 1356, 1357, 1358, 1359, 1360, 38, 1361, 1362, 1363, 1364, 1365, 39, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 745, 746, 267, 747, 268, 654, 909, 910, 911, 912, 913, 748, 749, 1379, 1380, 1381, 1382, 269, 750, 1, 751, 752, 753, 1383, 1384, 1385, 122, 1386, 87, 1387, 85, 86, 1388, 1389, 1390, 270, 1394, 271, 1405, 1407, 576, 223, 1408, 272, 1406, 273, 274, 2, 1391, 1392, 123, 914, 250, 915, 277, 252, 251, 916, 917, 918, 919, 276, 921, 922, 275, 923, 1393, 279, 1395, 280, 253, 1396, 1397, 1399, 1400, 278, 926, 928, 929, 67, 224, 930, 927, 924, 925, 3, 867, 870, 868, 869, 225, 4, 933, 931, 932, 226, 124, 871, 872, 873, 874, 876, 877, 281, 5, 878, 6, 940, 941, 125, 934, 935, 936, 937, 938, 939, 7, 8, 920, 655, 656, 657, 282, 9, 283, 942, 943, 570, 856, 571, 944, 833, 945, 737, 946, 658, 947, 811, 659, 901, 1409, 1410, 80, 754, 284, 755, 756, 757, 758, 285, 759, 760, 761, 762, 763, 764, 765, 660, 948, 1398, 661, 949, 766, 784, 662, 572, 1401, 90, 1402, 1283, 663, 664, 1284, 879, 950, 1403, 1404, 10, 951, 107, 952, 953, 218, 217, 577, 91, 92, 93, 94, 601, 578, 69, 68, 108, 954, 955, 956, 957, 959, 958, 11, 960, 961, 220, 219, 579, 95, 96, 97, 98, 602, 580, 71, 70, 66, 76, 962, 603, 963, 964, 965, 99, 966, 967, 968, 969, 970, 126, 971, 581, 604, 582, 583, 972, 605, 116, 127, 973, 974, 975, 100, 976, 977, 978, 12, 606, 227, 14, 13, 128, 979, 129, 607, 15, 228, 130, 131, 262, 72, 132, 286, 665, 88, 767, 768, 981, 980, 982, 983, 40, 133, 984, 136, 135, 134, 263, 264, 265, 138, 137, 139, 287, 985, 986, 140, 880, 881, 117, 141, 987, 142, 666, 143, 988, 989, 990, 144, 991, 992, 667, 629, 145, 146, 671, 668, 630, 631, 632, 633, 644, 627, 608, 294, 628, 650, 651, 634, 635, 636, 609, 292, 637, 638, 610, 293, 639, 640, 611, 291, 641, 642, 612, 290, 643, 645, 613, 289, 646, 653, 614, 288, 647, 652, 648, 84, 73, 221, 222, 649, 575, 669, 295, 670, 230, 672, 109, 673, 296, 674, 677, 678, 148, 229, 675, 676, 297, 298, 679, 680, 254, 681, 682, 683, 684, 685, 686, 615, 687, 688, 81, 299, 690, 691, 692, 693, 694, 695, 696, 238, 237, 697, 300, 698, 101, 699, 700, 118, 701, 600, 702, 703, 704, 599, 705, 706, 707, 147, 301, 302, 708, 711, 712, 713, 714, 715, 149, 709, 150, 710, 16, 151, 689, 857, 858, 716, 717, 303, 718, 720, 152, 721, 722, 723, 724, 725, 726, 727, 153, 728, 255, 304, 729, 82, 305, 730, 719, 17, 731, 239, 732, 306, 733, 734, 735, 736, 307, 740, 616, 266, 155, 154, 232, 308, 738, 739, 231, 741, 742, 743, 74, 744, 156, 157, 309, 89, 769, 770, 771, 772, 235, 773, 774, 775, 234, 776, 777, 778, 779, 112, 780, 782, 781, 110, 111, 158, 233, 310, 783, 258, 256, 257, 113, 159, 77, 160, 785, 786, 103, 104, 78, 161, 162, 163, 240, 787, 114, 788, 789, 790, 236, 791, 164, 792, 793, 311, 794, 795, 796, 165, 166, 797, 167, 798, 105, 106, 79, 168, 169, 241, 799, 800, 801, 802, 170, 803, 804, 805, 171, 173, 172, 242, 807, 806, 174, 808, 809, 175, 810, 812, 180, 313, 813, 178, 179, 176, 177, 814, 815, 181, 816, 314, 315, 817, 312, 818, 182, 184, 183, 185, 820, 821, 819, 822, 18, 19, 20, 21, 22, 823, 186, 824, 187, 188, 243, 826, 825, 827, 829, 830, 828, 23, 24, 25, 26, 27, 831, 189, 832, 834, 835, 836, 75, 190, 192, 191, 244, 838, 837, 316, 839, 841, 842, 843, 844, 317, 845, 28, 29, 30, 840, 31, 32, 846, 193, 847, 848, 194, 196, 195, 245, 851, 849, 850, 318, 853, 852, 854, 197, 855, 859, 198, 200, 199, 246, 862, 861, 860, 319, 864, 863, 865, 201, 866, 247, 875, 320, 882, 883, 202, 884, 885, 886, 887, 203, 888, 321, 889, 890, 41, 891, 892, 893, 894, 895, 993, 204, 994, 902, 205, 903, 206, 995, 904, 905, 906, 907, 996, 997, 908, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 322, 1011, 584, 585, 586, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 42, 1053, 1054, 1055, 207, 208, 1056, 323, 1057, 1058, 1059, 1060, 587, 617, 1061, 1062, 1063, 43, 1064, 1065, 1066, 1067, 44, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 45, 1075, 1076, 213, 1077, 1078, 1079, 1080, 1081, 1082, 46, 1083, 1084, 1085, 47, 1086, 1087, 1088, 48, 1089, 1090, 1091, 1092, 326, 1106, 1107, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 588, 618, 1102, 1103, 1104, 1105, 589, 619, 1108, 1109, 1110, 49, 1111, 1112, 327, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 590, 620, 1121, 1122, 1123, 50, 1124, 1125, 1126, 1127, 51, 1128, 591, 1129, 1130, 1133, 1134, 592, 209, 1131, 1132, 210, 211, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 593, 621, 1146, 1147, 1148, 52, 1149, 1150, 1151, 1152, 1153, 1154, 53, 1155, 115, 1156, 1157, 1158, 1159, 594, 622, 1160, 1161, 1162, 54, 1163, 212, 1164, 1165, 1166, 55, 1167, 1168, 1169, 1170, 1171, 595, 623, 1172, 1173, 1174, 56, 1175, 1176, 1177, 57, 324, 325, 1178, 1179, 1180, 1181, 1182, 596, 624, 1183, 1184, 1185, 58, 1186, 1187, 1188, 59, 1189, 1190, 1191, 60, 1192, 1193, 1194, 61, 1195, 1196, 1197, 1198, 62, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1211, 1212, 597, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 248, 1224, 1227, 1228, 1231, 1232, 1233, 63, 1229, 1230, 1225, 1226, 1234, 1235, 215, 214, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 64, 216, 1246, 1247, 1248, 65, 1249, 1250, 1251, 1252, 1254, 83, 328, 1255, 1253, 1209, 1210, 102, 573, 574, 1256, 1257, 1258, 598, 249, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 259, 1279, 260, 1280, 261, 1281, 1282, 625, 626, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425 }
  uselistorder i32* @r4, { 40, 678, 682, 683, 686, 687, 527, 528, 529, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 180, 68, 533, 534, 535, 704, 705, 706, 707, 708, 709, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 710, 711, 5, 712, 713, 714, 715, 730, 731, 732, 733, 38, 734, 30, 721, 725, 726, 727, 728, 729, 716, 717, 718, 536, 537, 538, 539, 540, 541, 542, 543, 719, 720, 724, 544, 545, 546, 487, 6, 488, 489, 490, 7, 491, 8, 492, 493, 507, 9, 10, 508, 509, 510, 511, 512, 513, 547, 548, 11, 556, 557, 549, 550, 551, 552, 553, 554, 555, 69, 70, 71, 72, 73, 74, 558, 559, 560, 561, 458, 459, 562, 563, 399, 400, 564, 565, 166, 167, 566, 567, 75, 76, 568, 569, 326, 327, 77, 78, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 79, 80, 570, 571, 722, 723, 4, 81, 82, 572, 573, 217, 218, 243, 244, 83, 84, 680, 681, 85, 86, 684, 685, 514, 515, 574, 575, 576, 577, 87, 88, 89, 90, 219, 220, 221, 222, 223, 578, 579, 580, 91, 92, 93, 581, 582, 583, 584, 585, 586, 41, 42, 43, 44, 45, 46, 47, 48, 94, 95, 49, 50, 51, 52, 96, 97, 53, 56, 57, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 98, 99, 66, 67, 12, 100, 101, 102, 103, 104, 105, 111, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 0, 129, 117, 118, 119, 120, 121, 122, 106, 107, 108, 109, 110, 460, 461, 462, 463, 464, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 13, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 31, 172, 173, 174, 175, 176, 177, 178, 1, 179, 224, 225, 226, 2, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 258, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 3, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 14, 305, 15, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 16, 342, 17, 343, 18, 344, 19, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 20, 372, 21, 373, 22, 374, 23, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 419, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 24, 439, 25, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 465, 466, 467, 26, 468, 27, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 516, 520, 517, 518, 519, 521, 522, 523, 524, 525, 526, 587, 588, 589, 530, 531, 532, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 32, 621, 622, 37, 623, 29, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 36, 28, 636, 637, 638, 639, 640, 641, 642, 35, 643, 644, 645, 34, 646, 647, 648, 33, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 39, 679 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
