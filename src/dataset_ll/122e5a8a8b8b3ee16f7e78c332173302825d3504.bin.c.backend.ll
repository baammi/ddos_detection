source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_cbdc.14 = constant i32 -382906384
@global_var_11c74.16 = constant i32 -382909968
@global_var_1db44.20 = global i32 0
@global_var_b428.26 = constant i32 -382906384
@global_var_b894.28 = constant i32 -382906384
@global_var_ab9c.30 = constant i32 -382906384
@global_var_a4c4.32 = constant i32 -382906384
@global_var_9da0.34 = constant i32 -382906384
@global_var_9574.36 = constant i32 -382906384
@global_var_8f14.38 = constant i32 -382906384
@global_var_884c.40 = constant i32 -382906384
@global_var_1fbd0.42 = global i32 0
@global_var_1db48.53 = global i32 0
@global_var_1534c.55 = constant i32 47
@global_var_1fbd4.58 = local_unnamed_addr global i32 0
@global_var_1db4c.60 = global i32 0
@global_var_1fbdc.67 = local_unnamed_addr global i32 0
@global_var_1fbda.68 = local_unnamed_addr global i32 0
@global_var_c700.72 = constant [3 x i8] c"z\0C\00"
@global_var_1db50.74 = global i32 0
@global_var_15350.82 = constant i32 10
@global_var_101d8.88 = constant i32 -382910336
@global_var_15354.92 = constant i32 16777216
@global_var_1db58.94 = global i32 0
@global_var_1db64.96 = global i32 0
@global_var_1db5c.98 = global i32 0
@global_var_1db60.100 = global i32 0
@global_var_1535c.106 = constant [23 x i8] c"g1abc4dmo35hnp2lie0kjf\00"
@global_var_d96c.111 = constant i32 -509607925
@global_var_1fbf0.113 = global i32 0
@global_var_1db9c.115 = global i32 0
@global_var_1db68.117 = global i32 0
@global_var_1db94.119 = global i32 0
@global_var_1fbe8.126 = global i32 0
@global_var_1fbec.128 = global i32 0
@global_var_1db6e.131 = local_unnamed_addr global i32 0
@global_var_1db70.135 = local_unnamed_addr global i32 0
@global_var_1db74.136 = local_unnamed_addr global i32 0
@global_var_1db75.137 = local_unnamed_addr global i32 0
@global_var_1db8e.140 = local_unnamed_addr global i32 0
@global_var_153a8.142 = constant i32 0
@global_var_15374.144 = constant [5 x i8] c"7**1\00"
@global_var_1537c.146 = constant [5 x i8] c"$+.*\00"
@global_var_15384.148 = constant [9 x i8] c"-0+1prp|\00"
@global_var_15390.150 = constant [7 x i8] c"1 )+ 1\00"
@global_var_15398.152 = constant [8 x i8] c"! #$0)1\00"
@global_var_153a0.154 = constant [9 x i8] c"5$662*7!\00"
@global_var_153ac.156 = constant [9 x i8] c"tuut&-,+\00"
@global_var_153b8.158 = constant [6 x i8] c"$!(,+\00"
@global_var_153c0.160 = constant [6 x i8] c"3,?=3\00"
@global_var_153c8.162 = constant i32 740827396
@global_var_1db78.163 = local_unnamed_addr global i32 0
@global_var_1db76.164 = local_unnamed_addr global i32 0
@global_var_1db7c.165 = local_unnamed_addr global i32 0
@global_var_1db84.167 = local_unnamed_addr global i32 0
@global_var_1db90.168 = local_unnamed_addr global i32 0
@global_var_da7c.170 = constant i32 -382910352
@global_var_153d8.172 = constant [3 x i8] c"\0D\0A\00"
@global_var_153dc.174 = constant [5 x i8] c"ogin\00"
@global_var_153e4.176 = constant [8 x i8] c"assword\00"
@global_var_153f5.178 = constant i32 1159724031
@global_var_153ec.180 = constant i32 2095871
@global_var_153d0.185 = constant [6 x i8] c"enter\00"
@global_var_1fbf8.187 = global i32 0
@global_var_153f8.194 = constant [3 x i8] c"E:\00"
@global_var_1fc08.195 = local_unnamed_addr global i32 0
@global_var_1fc0c.196 = local_unnamed_addr global i32 0
@global_var_153fc.198 = constant [13 x i8] c"7**1<,k6,1 E\00"
@global_var_1fcb0.199 = local_unnamed_addr global i32 0
@global_var_1fcb4.200 = local_unnamed_addr global i32 0
@global_var_1540c.202 = constant i32 41214
@global_var_1fcb8.203 = local_unnamed_addr global i32 0
@global_var_1fcbc.204 = local_unnamed_addr global i32 0
@global_var_15410.206 = constant [59 x i8] c"\22*6-e1-$1e&-,+ 6 e#$(,)<e$1e1- e*1- 7e1$') e607 e$1 e$)*1E\00"
@global_var_1fc04.207 = local_unnamed_addr global i32 0
@global_var_1fc00.208 = local_unnamed_addr global i32 0
@global_var_1544c.210 = constant [7 x i8] c"6- ))E\00"
@global_var_1fc78.211 = local_unnamed_addr global i32 0
@global_var_1fc7c.212 = local_unnamed_addr global i32 0
@global_var_15454.214 = constant [8 x i8] c" +$') E\00"
@global_var_1fc80.215 = local_unnamed_addr global i32 0
@global_var_1fc84.216 = local_unnamed_addr global i32 0
@global_var_1545c.218 = constant [8 x i8] c"6<61 (E\00"
@global_var_1fc88.219 = local_unnamed_addr global i32 0
@global_var_1fc8c.220 = local_unnamed_addr global i32 0
@global_var_15464.222 = constant [4 x i8] c"6-E\00"
@global_var_1fc9c.223 = local_unnamed_addr global i32 0
@global_var_1fc98.224 = local_unnamed_addr global i32 0
@global_var_15468.226 = constant i32 724313962
@global_var_1fc94.227 = local_unnamed_addr global i32 0
@global_var_1fc90.228 = local_unnamed_addr global i32 0
@global_var_15480.230 = constant i32 269878280
@global_var_1fca4.231 = local_unnamed_addr global i32 0
@global_var_1fca0.232 = local_unnamed_addr global i32 0
@global_var_1549c.234 = constant [10 x i8] c"+&*77 &1E\00"
@global_var_1fcac.235 = local_unnamed_addr global i32 0
@global_var_1fca8.236 = local_unnamed_addr global i32 0
@global_var_154a8.238 = constant [17 x i8] c"j',+j'06<'*=e56E\00"
@global_var_1fcc4.239 = local_unnamed_addr global i32 0
@global_var_1fcc0.240 = local_unnamed_addr global i32 0
@global_var_154bc.242 = constant [23 x i8] c"j',+j'06<'*=e.,))eh|jE\00"
@global_var_1fccc.243 = local_unnamed_addr global i32 0
@global_var_1fcc8.244 = local_unnamed_addr global i32 0
@global_var_154d4.246 = constant [8 x i8] c"j57*&jE\00"
@global_var_1fc10.247 = local_unnamed_addr global i32 0
@global_var_1fc14.248 = local_unnamed_addr global i32 0
@global_var_154dc.250 = constant [6 x i8] c"j = E\00"
@global_var_1fc1c.251 = local_unnamed_addr global i32 0
@global_var_1fc18.252 = local_unnamed_addr global i32 0
@global_var_154e4.254 = constant [5 x i8] c"j#!E\00"
@global_var_1fc2c.255 = local_unnamed_addr global i32 0
@global_var_1fc28.256 = local_unnamed_addr global i32 0
@global_var_154ec.258 = constant [7 x i8] c"j($56E\00"
@global_var_1fc30.259 = local_unnamed_addr global i32 0
@global_var_1fc34.260 = local_unnamed_addr global i32 0
@global_var_154f4.262 = constant [15 x i8] c"j57*&j+ 1j1&5E\00"
@global_var_1fc38.263 = local_unnamed_addr global i32 0
@global_var_1fc3c.264 = local_unnamed_addr global i32 0
@global_var_15504.266 = constant [11 x i8] c"!37\0D )5 7E\00"
@global_var_1fc44.267 = local_unnamed_addr global i32 0
@global_var_1fc40.268 = local_unnamed_addr global i32 0
@global_var_15558.270 = constant i32 808064529
@global_var_1fc4c.271 = local_unnamed_addr global i32 0
@global_var_1fc48.272 = local_unnamed_addr global i32 0
@global_var_15510.274 = constant [18 x i8] c"j 1&j7 6*)3k&*+#E\00"
@global_var_1fc54.275 = local_unnamed_addr global i32 0
@global_var_1fc50.276 = local_unnamed_addr global i32 0
@global_var_15524.278 = constant [13 x i8] c"+$( 6 73 7eE\00"
@global_var_1fc58.279 = local_unnamed_addr global i32 0
@global_var_1fc5c.280 = local_unnamed_addr global i32 0
@global_var_15534.282 = constant [15 x i8] c"j! 3j2$1&-!*\22E\00"
@global_var_1fc60.283 = local_unnamed_addr global i32 0
@global_var_1fc64.284 = local_unnamed_addr global i32 0
@global_var_15544.286 = constant [20 x i8] c"j! 3j(,6&j2$1&-!*\22E\00"
@global_var_1fc68.287 = local_unnamed_addr global i32 0
@global_var_1fc6c.288 = local_unnamed_addr global i32 0
@global_var_1029c.294 = constant i32 -443088884
@global_var_1dbbc.311 = global i32 0
@global_var_106cc.313 = constant i32 -456978431
@global_var_10c64.331 = constant i32 -478871519
@global_var_116e4.345 = constant i32 -478805983
@global_var_bc78.349 = constant i32 -442695580
@global_var_11ac0.355 = constant i32 -382906384
@global_var_1dba0.363 = local_unnamed_addr global i32 0
@global_var_1334c.365 = constant i32 -509591552
@global_var_1dba4.372 = local_unnamed_addr global i32 0
@global_var_13d80.375 = constant i32 -382909968
@global_var_12124.376 = constant i32 -494075872
@global_var_101a0.377 = constant i32 -382910336
@global_var_15588.381 = constant [11 x i8] c"/proc/stat\00"
@global_var_15594.384 = constant i32 32
@global_var_15598.387 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_155a8.389 = constant [10 x i8] c"processor\00"
@global_var_155cc.391 = constant i32 604672
@global_var_122e4.394 = constant i32 -369098421
@global_var_1dbb4.407 = local_unnamed_addr global i32 0
@global_var_1dbb8.409 = local_unnamed_addr global i32 0
@global_var_155d0.412 = constant [10 x i8] c"/dev/null\00"
@global_var_11ef0.413 = constant i32 -442543860
@global_var_13ce4.418 = constant i32 -382910352
@global_var_10700.423 = constant i32 -369094754
@global_var_12cb0.436 = constant i32 -335545128
@global_var_ab94.438 = constant i32 -352321543
@global_var_13178.443 = constant i32 -382909456
@global_var_1fbcc.446 = local_unnamed_addr global i32 0
@global_var_153d4.454 = constant i32 114
@global_var_141a4.459 = constant i32 -382906384
@global_var_13c84.477 = constant i32 -509607926
@global_var_9ba4.481 = constant i32 -442695616
@global_var_158dc.483 = constant i32 0
@global_var_15138.484 = constant i32 -382909968
@global_var_9984.491 = constant i32 -369098701
@global_var_13fc8.495 = constant i32 -509607928
@global_var_1db24.2 = external global i8*
@global_var_1db40.18 = external global i8*
@global_var_1db41.24 = global i8 0
@global_var_1fbd8.65 = global i16* null
@1 = internal constant [4 x i8] c"\84\D9\01\00"
@global_var_1db54.86 = external global i8*
@global_var_1db98.121 = global i16* null
@global_var_1db6c.130 = external global i8*
@global_var_1db80.133 = global i16 0
@global_var_1db8c.134 = local_unnamed_addr global i8 0
@global_var_1db82.138 = local_unnamed_addr global i16 0
@global_var_1db8d.139 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  store i32 ptrtoint (i8** @global_var_1db24.2 to i32), i32* @r4, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1db24.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  %v2_80dc = load i32, i32* @r4, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %.0 = phi i32 [ %v3_80d4, %dec_label_pc_80c4 ], [ undef, %entry ]
  ret i32 %.0

; uselistorder directives
  uselistorder i8** @global_var_1db24.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %stack_var_0 = alloca i32, align 4
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_80ec
  %v3_80f0 = load i32, i32* @r1, align 4
  %v4_80f0 = inttoptr i32 %v3_80f0 to i32*
  %v5_80f0 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v5_80f0, i32* %v4_80f0, align 4
  br label %bb3

bb3:                                              ; preds = %bb, %dec_label_pc_80ec
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 121088 to i32*), align 256
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb3
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb3, %dec_label_pc_8124
  ret i32 121088

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_12a20(i32 ptrtoint (i32* @global_var_cbdc.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 86844, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_11ef0()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8190:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8190 = icmp eq i32 %arg1, 0
  br i1 %v2_8190, label %dec_label_pc_81d8, label %dec_label_pc_81a0

dec_label_pc_81a0:                                ; preds = %dec_label_pc_8190
  %v0_81a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81a0 = add i32 %v0_81a0, 4
  %v2_81a0 = inttoptr i32 %v1_81a0 to i8*
  %v3_81a0 = load i8, i8* %v2_81a0, align 1
  %v4_81a0 = zext i8 %v3_81a0 to i32
  %v9_81a4 = icmp eq i32 %v4_81a0, %arg3
  br i1 %v9_81a4, label %dec_label_pc_81e4, label %dec_label_pc_81c8.preheader

dec_label_pc_81c8.preheader:                      ; preds = %dec_label_pc_81a0
  br label %dec_label_pc_81c8

dec_label_pc_81b8:                                ; preds = %dec_label_pc_81c8
  %v1_81b8 = add i32 %v0_81c0.in, 12
  %v2_81b8 = inttoptr i32 %v1_81b8 to i8*
  %v3_81b8 = load i8, i8* %v2_81b8, align 1
  %v4_81b8 = zext i8 %v3_81b8 to i32
  %v9_81bc = icmp eq i32 %v4_81b8, %arg3
  br i1 %v9_81bc, label %dec_label_pc_81e4, label %dec_label_pc_81c8

dec_label_pc_81c8:                                ; preds = %dec_label_pc_81c8.preheader, %dec_label_pc_81b8
  %v0_81c0.in = phi i32 [ %v0_81a0, %dec_label_pc_81c8.preheader ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v0_81c8 = phi i32 [ 0, %dec_label_pc_81c8.preheader ], [ %v1_81c8, %dec_label_pc_81b8 ]
  %v0_81c0 = add i32 %v0_81c0.in, 8
  %v1_81c8 = add i32 %v0_81c8, 1
  %v9_81cc = icmp eq i32 %v1_81c8, %arg1
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  br i1 %v9_81cc, label %dec_label_pc_81d8, label %dec_label_pc_81b8

dec_label_pc_81d8:                                ; preds = %dec_label_pc_81c8, %dec_label_pc_8190, %dec_label_pc_81e4
  %v0_81d8 = phi i32 [ %arg4, %dec_label_pc_8190 ], [ %v2_81e4, %dec_label_pc_81e4 ], [ %arg4, %dec_label_pc_81c8 ]
  ret i32 %v0_81d8

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81b8, %dec_label_pc_81a0
  %v0_81e4 = phi i32 [ %v0_81a0, %dec_label_pc_81a0 ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v1_81e4 = inttoptr i32 %v0_81e4 to i32*
  %v2_81e4 = load i32, i32* %v1_81e4, align 4
  br label %dec_label_pc_81d8

; uselistorder directives
  uselistorder i32 %v1_81c8, { 1, 0 }
  uselistorder i32 %v0_81c0, { 1, 0, 2 }
  uselistorder i32 %v0_81c0.in, { 1, 0 }
  uselistorder i32 %v0_81a0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81c8, { 1, 0 }
}

define i32 @function_81ec(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_81ec:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81ec = icmp eq i32 %arg1, 0
  %v6_81f0 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_81ec, label %dec_label_pc_8234, label %dec_label_pc_81fc

dec_label_pc_81fc:                                ; preds = %dec_label_pc_81ec
  %v0_81fc = load i32, i32* %r1.global-to-local, align 4
  %v1_81fc = add i32 %v0_81fc, 4
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %arg3
  br i1 %v9_8200, label %dec_label_pc_8240, label %dec_label_pc_8224.preheader

dec_label_pc_8224.preheader:                      ; preds = %dec_label_pc_81fc
  br label %dec_label_pc_8224

dec_label_pc_8214:                                ; preds = %dec_label_pc_8224
  %v1_8214 = add i32 %v0_821c.in, 12
  %v2_8214 = inttoptr i32 %v1_8214 to i8*
  %v3_8214 = load i8, i8* %v2_8214, align 1
  %v4_8214 = zext i8 %v3_8214 to i32
  %v9_8218 = icmp eq i32 %v4_8214, %arg3
  br i1 %v9_8218, label %dec_label_pc_8240, label %dec_label_pc_8224

dec_label_pc_8224:                                ; preds = %dec_label_pc_8224.preheader, %dec_label_pc_8214
  %v0_821c.in = phi i32 [ %v0_81fc, %dec_label_pc_8224.preheader ], [ %v0_821c, %dec_label_pc_8214 ]
  %v0_8224 = phi i32 [ 0, %dec_label_pc_8224.preheader ], [ %v1_8224, %dec_label_pc_8214 ]
  %v0_821c = add i32 %v0_821c.in, 8
  %v1_8224 = add i32 %v0_8224, 1
  %v9_8228 = icmp eq i32 %v1_8224, %arg1
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  br i1 %v9_8228, label %dec_label_pc_8234, label %dec_label_pc_8214

dec_label_pc_8234:                                ; preds = %dec_label_pc_8224, %dec_label_pc_8240, %dec_label_pc_81ec, %dec_label_pc_824c
  %v0_8234 = phi i32 [ %arg4, %dec_label_pc_8240 ], [ %arg4, %dec_label_pc_81ec ], [ %v1_824c, %dec_label_pc_824c ], [ %arg4, %dec_label_pc_8224 ]
  store i32 %v6_81f0, i32* @lr, align 4
  ret i32 %v0_8234

dec_label_pc_8240:                                ; preds = %dec_label_pc_8214, %dec_label_pc_81fc
  %v0_8240 = phi i32 [ %v0_81fc, %dec_label_pc_81fc ], [ %v0_821c, %dec_label_pc_8214 ]
  %v1_8240 = inttoptr i32 %v0_8240 to i32*
  %v2_8240 = load i32, i32* %v1_8240, align 4
  store i32 %v2_8240, i32* @r0, align 4
  %v2_8244 = icmp eq i32 %v2_8240, 0
  br i1 %v2_8244, label %dec_label_pc_8234, label %dec_label_pc_824c

dec_label_pc_824c:                                ; preds = %dec_label_pc_8240
  %v1_824c = call i32 @function_10710(i32 %v2_8240)
  br label %dec_label_pc_8234

; uselistorder directives
  uselistorder i32 %v1_8224, { 1, 0 }
  uselistorder i32 %v0_821c, { 1, 0, 2 }
  uselistorder i32 %v0_821c.in, { 1, 0 }
  uselistorder i32 %v0_81fc, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8234, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8224, { 1, 0 }
}

define i32 @function_8258(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8258:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8258 = icmp eq i32 %arg1, 0
  %v3_825c = load i32, i32* @r4, align 4
  store i32 %v3_825c, i32* %stack_var_-8, align 4
  %v6_825c = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8258, label %dec_label_pc_82a0, label %dec_label_pc_8268

dec_label_pc_8268:                                ; preds = %dec_label_pc_8258
  %v0_8268 = load i32, i32* %r1.global-to-local, align 4
  %v1_8268 = add i32 %v0_8268, 4
  %v2_8268 = inttoptr i32 %v1_8268 to i8*
  %v3_8268 = load i8, i8* %v2_8268, align 1
  %v4_8268 = zext i8 %v3_8268 to i32
  %v9_826c = icmp eq i32 %v4_8268, %arg3
  br i1 %v9_826c, label %dec_label_pc_82ac, label %dec_label_pc_8290.preheader

dec_label_pc_8290.preheader:                      ; preds = %dec_label_pc_8268
  %v2_8270 = add i32 %v0_8268, 8
  store i32 %v2_8270, i32* @ip, align 4
  br label %dec_label_pc_8290

dec_label_pc_8280:                                ; preds = %dec_label_pc_8290
  %v1_8280 = add i32 %v0_8288, 4
  %v2_8280 = inttoptr i32 %v1_8280 to i8*
  %v3_8280 = load i8, i8* %v2_8280, align 1
  %v4_8280 = zext i8 %v3_8280 to i32
  %v9_8284 = icmp eq i32 %v4_8280, %arg3
  %v1_8288 = add i32 %v0_8288, 8
  store i32 %v1_8288, i32* @ip, align 4
  br i1 %v9_8284, label %dec_label_pc_82ac, label %dec_label_pc_8290

dec_label_pc_8290:                                ; preds = %dec_label_pc_8290.preheader, %dec_label_pc_8280
  %v0_8288 = phi i32 [ %v2_8270, %dec_label_pc_8290.preheader ], [ %v1_8288, %dec_label_pc_8280 ]
  %v0_8290 = phi i32 [ 0, %dec_label_pc_8290.preheader ], [ %v1_8290, %dec_label_pc_8280 ]
  %v1_8290 = add i32 %v0_8290, 1
  store i32 %v1_8290, i32* @lr, align 4
  %v9_8294 = icmp eq i32 %v1_8290, %arg1
  store i32 %v0_8288, i32* %r1.global-to-local, align 4
  br i1 %v9_8294, label %dec_label_pc_82a0, label %dec_label_pc_8280

dec_label_pc_82a0:                                ; preds = %dec_label_pc_8290, %dec_label_pc_82ac, %dec_label_pc_8258, %dec_label_pc_82b8
  %v2_82a4 = phi i32 [ %v3_825c, %dec_label_pc_82ac ], [ %v3_825c, %dec_label_pc_8258 ], [ %v2_82a4.pre, %dec_label_pc_82b8 ], [ %v3_825c, %dec_label_pc_8290 ]
  %v0_82a0 = phi i32 [ %arg4, %dec_label_pc_82ac ], [ %arg4, %dec_label_pc_8258 ], [ %v3_82bc, %dec_label_pc_82b8 ], [ %arg4, %dec_label_pc_8290 ]
  store i32 %v2_82a4, i32* @r4, align 4
  store i32 %v6_825c, i32* @lr, align 4
  ret i32 %v0_82a0

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8280, %dec_label_pc_8268
  %v0_82ac = phi i32 [ %v0_8268, %dec_label_pc_8268 ], [ %v0_8288, %dec_label_pc_8280 ]
  %v1_82ac = inttoptr i32 %v0_82ac to i32*
  %v2_82ac = load i32, i32* %v1_82ac, align 4
  %v2_82b0 = icmp eq i32 %v2_82ac, 0
  br i1 %v2_82b0, label %dec_label_pc_82a0, label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82ac
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_82bc = inttoptr i32 %v2_82ac to i8*
  %v3_82bc = call i32 @function_f8f0(i8* %v2_82bc, i32 10)
  %v2_82a4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_82a0

; uselistorder directives
  uselistorder i32 %v1_8290, { 1, 2, 0 }
  uselistorder i32 %v0_8288, { 0, 3, 2, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_82a0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8290, { 1, 0 }
}

define i32 @function_82c8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_82c8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_82c8 = load i32, i32* @r5, align 4
  %v9_82c8 = load i32, i32* @r6, align 4
  %v12_82c8 = load i32, i32* @r7, align 4
  %v18_82c8 = load i32, i32* @sb, align 4
  %v24_82c8 = load i32, i32* @fp, align 4
  %v2_82cc = icmp ugt i32 %arg2, 2
  %v7_82cc = icmp eq i32 %arg2, 3
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_82d8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_82d8, i32* @r5, align 4
  %v2_82dc = xor i1 %v7_82cc, true
  %v3_82dc = and i1 %v2_82cc, %v2_82dc
  br i1 %v3_82dc, label %dec_label_pc_82ec, label %dec_label_pc_82e0

dec_label_pc_82e0:                                ; preds = %dec_label_pc_8330, %.dec_label_pc_82e0_crit_edge, %dec_label_pc_8324, %dec_label_pc_8314, %dec_label_pc_82ec, %dec_label_pc_82c8, %dec_label_pc_84d8
  %v1_82e8 = phi i32 [ %v1_82e8.pre, %.dec_label_pc_82e0_crit_edge ], [ %v1_82f0, %dec_label_pc_8330 ], [ %v1_82f0, %dec_label_pc_8324 ], [ %v1_82f0, %dec_label_pc_8314 ], [ %v1_82f0, %dec_label_pc_82ec ], [ %v0_82d8, %dec_label_pc_82c8 ], [ %v0_84dc, %dec_label_pc_84d8 ]
  store i32 %v6_82c8, i32* @r5, align 4
  store i32 %v9_82c8, i32* @r6, align 4
  store i32 %v12_82c8, i32* @r7, align 4
  store i32 %v18_82c8, i32* @sb, align 4
  store i32 %v24_82c8, i32* @fp, align 4
  ret i32 %v1_82e8

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82c8
  %v1_82ec = inttoptr i32 %v0_82d8 to i32*
  %v2_82ec = load i32, i32* %v1_82ec, align 4
  %v1_82f0 = and i32 %v2_82ec, 16711680
  store i32 %v1_82f0, i32* %r0.global-to-local, align 4
  %v3_82f4 = udiv i32 %v2_82ec, 16777216
  %v1_82f8 = and i32 %v2_82ec, 65280
  %v4_82fc = udiv i32 %v1_82f0, 256
  %v5_82fc = or i32 %v4_82fc, %v3_82f4
  %v4_8300 = mul nuw nsw i32 %v1_82f8, 256
  %v5_8300 = or i32 %v5_82fc, %v4_8300
  store i32 %v5_8300, i32* %r3.global-to-local, align 4
  %v5_8304 = call i32 @llvm.bswap.i32(i32 %v2_82ec)
  store i32 %v5_8304, i32* %r1.global-to-local, align 4
  %v7_8308 = icmp eq i32 %arg2, 4
  store i1 %v7_8308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8308, label %dec_label_pc_82e0, label %dec_label_pc_8314

dec_label_pc_8314:                                ; preds = %dec_label_pc_82ec
  %v1_8314 = add i32 %v0_82d8, 4
  %v2_8314 = inttoptr i32 %v1_8314 to i8*
  %v3_8314 = load i8, i8* %v2_8314, align 1
  %v4_8314 = zext i8 %v3_8314 to i32
  store i32 %v4_8314, i32* %r3.global-to-local, align 4
  %v7_8318 = icmp eq i32 %arg2, 5
  store i1 %v7_8318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8318, label %dec_label_pc_82e0, label %dec_label_pc_8324

dec_label_pc_8324:                                ; preds = %dec_label_pc_8314
  %v1_8324 = add i32 %v0_82d8, 5
  %v2_8324 = inttoptr i32 %v1_8324 to i8*
  %v3_8324 = load i8, i8* %v2_8324, align 1
  %v4_8324 = zext i8 %v3_8324 to i32
  store i32 %v4_8324, i32* @sb, align 4
  %v2_8328 = icmp eq i8 %v3_8324, 0
  store i1 %v2_8328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8328, label %dec_label_pc_82e0, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_8324
  %v2_8334 = mul nuw nsw i32 %v4_8324, 5
  store i32 %v2_8334, i32* @r7, align 4
  %v1_8338 = add i32 %arg2, -6
  store i32 %v1_8338, i32* %r3.global-to-local, align 4
  %v3_833c = icmp ult i32 %v1_8338, %v2_8334
  %v9_833c = icmp eq i32 %v1_8338, %v2_8334
  store i1 %v9_833c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_833c, label %dec_label_pc_82e0, label %dec_label_pc_8344

dec_label_pc_8344:                                ; preds = %dec_label_pc_8330
  store i32 %v4_8324, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8338, i32* @r6, align 4
  %v2_8350 = call i32 @function_11528(i32 %v4_8324, i32 24)
  store i32 %v2_8350, i32* %ip.global-to-local, align 4
  %v0_835c = load i32, i32* @r7, align 4
  %v1_835c = load i32, i32* @r4, align 4
  %v2_835c = sub i32 %v1_835c, %v0_835c
  store i32 %v2_835c, i32* @r7, align 4
  %v0_8360 = load i32, i32* @r5, align 4
  %v1_8360 = add i32 %v0_8360, 11
  store i32 %v1_8360, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8364

dec_label_pc_8364:                                ; preds = %dec_label_pc_8364, %dec_label_pc_8344
  %v1_8368 = phi i32 [ %v1_8394, %dec_label_pc_8364 ], [ %v2_8350, %dec_label_pc_8344 ]
  %v0_8364 = phi i32 [ %v1_8390, %dec_label_pc_8364 ], [ %v1_8360, %dec_label_pc_8344 ]
  %v1_8364 = add i32 %v0_8364, -5
  %v2_8364 = inttoptr i32 %v1_8364 to i32*
  %v3_8364 = load i32, i32* %v2_8364, align 4
  store i32 %v3_8364, i32* %r1.global-to-local, align 4
  %v2_8368 = add i32 %v1_8368, 16
  %v3_8368 = inttoptr i32 %v2_8368 to i32*
  store i32 %v3_8364, i32* %v3_8368, align 4
  %v0_836c = load i32, i32* @r6, align 4
  %v1_836c = add i32 %v0_836c, -5
  store i32 %v1_836c, i32* @r6, align 4
  %v0_8370 = load i32, i32* %r0.global-to-local, align 4
  %v1_8370 = add i32 %v0_8370, -1
  %v2_8370 = inttoptr i32 %v1_8370 to i8*
  %v3_8370 = load i8, i8* %v2_8370, align 1
  %v0_8374 = load i32, i32* @r7, align 4
  %v1_8374 = add i32 %v0_8374, -6
  store i32 %v1_8374, i32* %r3.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  %v9_837c = icmp eq i32 %v1_836c, %v1_8374
  store i1 %v9_837c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_8370, i32* @r4, align 4
  %v2_8384 = load i32, i32* %ip.global-to-local, align 4
  %v3_8384 = add i32 %v2_8384, 20
  %v4_8384 = inttoptr i32 %v3_8384 to i8*
  store i8 %v3_8370, i8* %v4_8384, align 1
  %v0_8388 = load i32, i32* %r1.global-to-local, align 4
  %v1_8388 = load i32, i32* %ip.global-to-local, align 4
  %v2_8388 = add i32 %v1_8388, 4
  %v3_8388 = inttoptr i32 %v2_8388 to i32*
  store i32 %v0_8388, i32* %v3_8388, align 4
  %v0_838c = load i32, i32* @lr, align 4
  %v1_838c = trunc i32 %v0_838c to i16
  %v2_838c = load i32, i32* %ip.global-to-local, align 4
  %v3_838c = inttoptr i32 %v2_838c to i16*
  store i16 %v1_838c, i16* %v3_838c, align 2
  %v0_8390 = load i32, i32* %r0.global-to-local, align 4
  %v1_8390 = add i32 %v0_8390, 5
  store i32 %v1_8390, i32* %r0.global-to-local, align 4
  %v0_8394 = load i32, i32* %ip.global-to-local, align 4
  %v1_8394 = add i32 %v0_8394, 24
  store i32 %v1_8394, i32* %ip.global-to-local, align 4
  %v0_8398 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8398, label %dec_label_pc_839c, label %dec_label_pc_8364

dec_label_pc_839c:                                ; preds = %dec_label_pc_8364
  %v0_839c = load i32, i32* @r6, align 4
  %v2_839c = icmp eq i32 %v0_839c, 0
  store i1 %v2_839c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_839c, label %dec_label_pc_849c, label %dec_label_pc_83a4

dec_label_pc_83a4:                                ; preds = %dec_label_pc_839c
  %v0_83a4 = load i32, i32* @r4, align 4
  %v1_83a4 = inttoptr i32 %v0_83a4 to i8*
  %v2_83a4 = load i8, i8* %v1_83a4, align 1
  %v3_83a4 = zext i8 %v2_83a4 to i32
  store i32 %v3_83a4, i32* @r5, align 4
  %v2_83a8 = icmp eq i8 %v2_83a4, 0
  store i1 %v2_83a8, i1* %cpsr_z.global-to-local, align 1
  %v0_83ac = load i32, i32* @r7, align 4
  %v1_83ac = add i32 %v0_83ac, -7
  store i32 %v1_83ac, i32* @r8, align 4
  br i1 %v2_83a8, label %bb, label %dec_label_pc_83b8

bb:                                               ; preds = %dec_label_pc_83a4
  store i32 %v3_83a4, i32* @r6, align 4
  br label %dec_label_pc_846c

dec_label_pc_83b8:                                ; preds = %dec_label_pc_83a4
  store i32 %v3_83a4, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83c0 = call i32 @function_11528(i32 %v3_83a4, i32 8)
  store i32 %v2_83c0, i32* %r0.global-to-local, align 4
  %v0_83c4 = load i32, i32* @r8, align 4
  %v2_83c4 = icmp eq i32 %v0_83c4, 0
  store i1 %v2_83c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83c0, i32* @r6, align 4
  br i1 %v2_83c4, label %dec_label_pc_849c, label %dec_label_pc_83d0

dec_label_pc_83d0:                                ; preds = %dec_label_pc_83b8
  %v0_83d0 = load i32, i32* @r4, align 4
  %v1_83d0 = add i32 %v0_83d0, 1
  %v2_83d0 = inttoptr i32 %v1_83d0 to i8*
  %v3_83d0 = load i8, i8* %v2_83d0, align 1
  %v0_83d4 = load i32, i32* @r7, align 4
  %v7_83d4 = icmp eq i32 %v0_83d4, 8
  store i1 %v7_83d4, i1* %cpsr_z.global-to-local, align 1
  %v3_83d8 = add i32 %v2_83c0, 4
  %v4_83d8 = inttoptr i32 %v3_83d8 to i8*
  store i8 %v3_83d0, i8* %v4_83d8, align 1
  %v0_83dc = load i32, i32* @r4, align 4
  %v1_83dc = add i32 %v0_83dc, 1
  store i32 %v1_83dc, i32* %r3.global-to-local, align 4
  %v0_83e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83e0, label %dec_label_pc_849c, label %dec_label_pc_83e4

dec_label_pc_83e4:                                ; preds = %dec_label_pc_83d0
  %v1_83e4 = add i32 %v0_83dc, 2
  %v2_83e4 = inttoptr i32 %v1_83e4 to i8*
  %v3_83e4 = load i8, i8* %v2_83e4, align 1
  %v4_83e4 = zext i8 %v3_83e4 to i32
  store i32 %v4_83e4, i32* @r4, align 4
  %v0_83e8 = load i32, i32* @r7, align 4
  %v1_83e8 = add i32 %v0_83e8, -9
  store i32 %v1_83e8, i32* @r7, align 4
  %v9_83ec = icmp eq i32 %v1_83e8, %v4_83e4
  store i1 %v9_83ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_83e4, i32* %r1.global-to-local, align 4
  %v5_83f4 = icmp slt i32 %v1_83e8, %v4_83e4
  br i1 %v5_83f4, label %dec_label_pc_849c, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_83e4
  %v7_83f44711 = add i32 %v0_83dc, 3
  store i32 %v7_83f44711, i32* @r8, align 4
  %v6_83f8812 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_83f8812, i32* @sl, align 4
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_8444

dec_label_pc_8408:                                ; preds = %dec_label_pc_8444
  %v0_8408 = load i32, i32* @r7, align 4
  %v1_8408 = load i32, i32* @r4, align 4
  %v2_8408 = sub i32 %v0_8408, %v1_8408
  store i32 %v2_8408, i32* %r1.global-to-local, align 4
  %v9_8408 = icmp eq i32 %v0_8408, %v1_8408
  store i1 %v9_8408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8408, label %dec_label_pc_849c, label %dec_label_pc_8410

dec_label_pc_8410:                                ; preds = %dec_label_pc_8408
  %v3_8410 = mul i32 %v0_8464, 8
  store i32 %v3_8410, i32* %r3.global-to-local, align 4
  %v1_8414 = load i32, i32* @r8, align 4
  %v2_8414 = add i32 %v1_8414, %v1_8408
  %v3_8414 = inttoptr i32 %v2_8414 to i8*
  %v4_8414 = load i8, i8* %v3_8414, align 1
  %v0_8418 = load i32, i32* @r6, align 4
  %v2_8418 = add i32 %v0_8418, %v3_8410
  store i32 %v2_8418, i32* @sl, align 4
  %v1_841c = add i32 %v2_8408, -1
  store i32 %v1_841c, i32* %r3.global-to-local, align 4
  %v7_841c = icmp eq i32 %v2_8408, 1
  store i1 %v7_841c, i1* %cpsr_z.global-to-local, align 1
  %v3_8420 = add i32 %v2_8418, 4
  %v4_8420 = inttoptr i32 %v3_8420 to i8*
  store i8 %v4_8414, i8* %v4_8420, align 1
  %v0_8424 = load i32, i32* @r4, align 4
  %v1_8424 = load i32, i32* @r8, align 4
  %v2_8424 = add i32 %v1_8424, %v0_8424
  store i32 %v2_8424, i32* %r1.global-to-local, align 4
  %v0_8428 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8428, label %dec_label_pc_849c, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8410
  %v1_842c = add i32 %v2_8424, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v4_842c = zext i8 %v3_842c to i32
  store i32 %v4_842c, i32* @r4, align 4
  %v0_8430 = load i32, i32* %r3.global-to-local, align 4
  %v1_8430 = add i32 %v0_8430, -1
  store i32 %v1_8430, i32* @r7, align 4
  %v2_8434 = sub i32 %v1_8430, %v4_842c
  %tmp46 = sub i32 0, %v2_8434
  %v6_8434 = and i32 %v1_8430, %tmp46
  %v7_8434 = icmp slt i32 %v6_8434, 0
  %v8_8434 = icmp slt i32 %v2_8434, 0
  %v9_8434 = icmp eq i32 %v1_8430, %v4_842c
  store i1 %v9_8434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_842c, i32* %r1.global-to-local, align 4
  %v2_843c = xor i1 %v8_8434, %v7_8434
  br i1 %v2_843c, label %dec_label_pc_849c, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v2_8424, 2
  store i32 %v1_8440, i32* @r8, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %.thread10, %dec_label_pc_8440
  %v0_8448 = phi i32 [ %v4_83e4, %.thread10 ], [ %v4_842c, %dec_label_pc_8440 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_8448 = add nuw nsw i32 %v0_8448, 1
  store i32 %v2_8448, i32* %r0.global-to-local, align 4
  %v2_844c = call i32 @function_11528(i32 %v2_8448, i32 1)
  store i32 %v2_844c, i32* %r0.global-to-local, align 4
  %v0_8450 = load i32, i32* @fp, align 4
  %v1_8450 = add i32 %v0_8450, 1
  store i32 %v1_8450, i32* @fp, align 4
  %v1_8454 = load i32, i32* @sl, align 4
  %v2_8454 = inttoptr i32 %v1_8454 to i32*
  store i32 %v2_844c, i32* %v2_8454, align 4
  %v0_8458 = load i32, i32* @r8, align 4
  store i32 %v0_8458, i32* %r1.global-to-local, align 4
  %v0_845c = load i32, i32* @r4, align 4
  %v3_8460 = call i32 @function_f83c(i32 %v2_844c, i32 %v0_8458, i32 %v0_845c)
  store i32 %v3_8460, i32* %r0.global-to-local, align 4
  %v0_8464 = load i32, i32* @fp, align 4
  %v1_8464 = load i32, i32* @r5, align 4
  %v9_8464 = icmp eq i32 %v0_8464, %v1_8464
  store i1 %v9_8464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8464, label %dec_label_pc_846c, label %dec_label_pc_8408

dec_label_pc_846c:                                ; preds = %dec_label_pc_8444, %bb
  %v0_846c = call i32 @function_10600()
  store i32 %v0_846c, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8474 = inttoptr i32 %v0_846c to i32*
  store i32 0, i32* %v2_8474, align 4
  %v0_8478 = call i32 @function_fec8()
  store i32 %v0_8478, i32* %r0.global-to-local, align 4
  %v7_847c = icmp eq i32 %v0_8478, -1
  %. = zext i1 %v7_847c to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %v2_8488 = icmp eq i32 %v0_8478, 0
  store i1 %v2_8488, i1* %cpsr_z.global-to-local, align 1
  %tmp49 = icmp slt i32 %v0_8478, 1
  br i1 %tmp49, label %bb50, label %.thread14

.thread14:                                        ; preds = %dec_label_pc_846c
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_849c

bb50:                                             ; preds = %dec_label_pc_846c
  %v2_8494 = icmp eq i1 %v7_847c, false
  store i1 %v2_8494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8494, label %dec_label_pc_84e4, label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %dec_label_pc_842c, %dec_label_pc_8410, %dec_label_pc_8408, %dec_label_pc_83e4, %.thread14, %bb50, %dec_label_pc_83d0, %dec_label_pc_83b8, %dec_label_pc_839c
  store i32 %v2_8350, i32* %r3.global-to-local, align 4
  %v2_84a0 = icmp eq i32 %v2_8350, 0
  store i1 %v2_84a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84a0, label %bb52, label %bb51

bb51:                                             ; preds = %dec_label_pc_849c
  store i32 %v2_8350, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %dec_label_pc_849c, %bb51
  store i32 33964, i32* @lr, align 4
  %v1_84a8 = xor i1 %v2_84a0, true
  call void @__pseudo_cond_branch(i1 %v1_84a8, i32 ptrtoint (i32* @global_var_11c74.16 to i32))
  %v0_84ac = load i32, i32* @r6, align 4
  %v2_84ac = icmp eq i32 %v0_84ac, 0
  store i1 %v2_84ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ac, label %.dec_label_pc_82e0_crit_edge, label %dec_label_pc_84b4

.dec_label_pc_82e0_crit_edge:                     ; preds = %bb52
  %v1_82e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_82e0

dec_label_pc_84b4:                                ; preds = %bb52
  %v0_84b4 = load i32, i32* @r5, align 4
  %v2_84b4 = icmp eq i32 %v0_84b4, 0
  store i1 %v2_84b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84b4, label %dec_label_pc_84d8, label %dec_label_pc_84bc

dec_label_pc_84bc:                                ; preds = %dec_label_pc_84b4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_84c0

dec_label_pc_84c0:                                ; preds = %dec_label_pc_84c0, %dec_label_pc_84bc
  %v1_84c0 = phi i32 [ 0, %dec_label_pc_84bc ], [ %v1_84cc, %dec_label_pc_84c0 ]
  %v0_84c0 = phi i32 [ %v0_84ac, %dec_label_pc_84bc ], [ %v0_84d8.pre, %dec_label_pc_84c0 ]
  %v4_84c0 = mul i32 %v1_84c0, 8
  %v5_84c0 = add i32 %v4_84c0, %v0_84c0
  %v6_84c0 = inttoptr i32 %v5_84c0 to i32*
  %v7_84c0 = load i32, i32* %v6_84c0, align 4
  store i32 %v7_84c0, i32* %r0.global-to-local, align 4
  %v2_84c4 = icmp eq i32 %v7_84c0, 0
  store i1 %v2_84c4, i1* %cpsr_z.global-to-local, align 1
  store i32 33996, i32* @lr, align 4
  %v1_84c8 = xor i1 %v2_84c4, true
  call void @__pseudo_cond_branch(i1 %v1_84c8, i32 ptrtoint (i32* @global_var_11c74.16 to i32))
  %v0_84cc = load i32, i32* @r4, align 4
  %v1_84cc = add i32 %v0_84cc, 1
  store i32 %v1_84cc, i32* @r4, align 4
  %v0_84d0 = load i32, i32* @r5, align 4
  %v9_84d0 = icmp eq i32 %v0_84d0, %v1_84cc
  store i1 %v9_84d0, i1* %cpsr_z.global-to-local, align 1
  %v0_84d8.pre = load i32, i32* @r6, align 4
  br i1 %v9_84d0, label %dec_label_pc_84d8, label %dec_label_pc_84c0

dec_label_pc_84d8:                                ; preds = %dec_label_pc_84c0, %dec_label_pc_84b4
  %v0_84d8 = phi i32 [ %v0_84ac, %dec_label_pc_84b4 ], [ %v0_84d8.pre, %dec_label_pc_84c0 ]
  store i32 %v0_84d8, i32* @r0, align 4
  %v0_84dc = call i32 @function_11c74()
  store i32 %v0_84dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_82e0

dec_label_pc_84e4:                                ; preds = %bb50
  store i32 ptrtoint (i8** @global_var_1db40.18 to i32), i32* %r3.global-to-local, align 4
  %v2_84e8 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_84e8 = zext i8 %v2_84e8 to i32
  store i32 %v3_84e8, i32* %r0.global-to-local, align 4
  %v2_84ec = icmp eq i8 %v2_84e8, 0
  store i1 %v2_84ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ec, label %dec_label_pc_8550, label %dec_label_pc_84f4

dec_label_pc_84f4:                                ; preds = %dec_label_pc_84e4
  store i32 ptrtoint (i32* @global_var_1db44.20 to i32), i32* %r3.global-to-local, align 4
  %v2_84f8 = load i32, i32* @global_var_1db44.20, align 4
  store i32 %v2_84f8, i32* %r1.global-to-local, align 4
  %v1_84fc = inttoptr i32 %v2_84f8 to i32*
  %v2_84fc = load i32, i32* %v1_84fc, align 4
  store i32 %v2_84fc, i32* %ip.global-to-local, align 4
  %v1_8504 = add i32 %v2_84fc, 4
  %v2_8504 = inttoptr i32 %v1_8504 to i8*
  %v3_8504 = load i8, i8* %v2_8504, align 1
  %v4_8504 = zext i8 %v3_8504 to i32
  store i32 %v4_8504, i32* %r3.global-to-local, align 4
  %v9_8508 = icmp eq i8 %v3_8504, %v3_8314
  store i1 %v9_8508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8508, label %dec_label_pc_8530, label %dec_label_pc_8510

dec_label_pc_8510:                                ; preds = %dec_label_pc_84f4, %dec_label_pc_851c
  %v0_8510 = phi i32 [ %v1_8510, %dec_label_pc_851c ], [ 0, %dec_label_pc_84f4 ]
  %v1_8510 = add i32 %v0_8510, 1
  %v9_8514 = icmp eq i32 %v1_8510, %v3_84e8
  store i1 %v9_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8514, label %dec_label_pc_8550, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_8510
  %v4_851c = mul i32 %v1_8510, 4
  %v5_851c = add i32 %v4_851c, %v2_84f8
  %v6_851c = inttoptr i32 %v5_851c to i32*
  %v7_851c = load i32, i32* %v6_851c, align 4
  store i32 %v7_851c, i32* %ip.global-to-local, align 4
  %v1_8524 = add i32 %v7_851c, 4
  %v2_8524 = inttoptr i32 %v1_8524 to i8*
  %v3_8524 = load i8, i8* %v2_8524, align 1
  %v4_8524 = zext i8 %v3_8524 to i32
  store i32 %v4_8524, i32* %r3.global-to-local, align 4
  %v9_8528 = icmp eq i8 %v3_8524, %v3_8314
  store i1 %v9_8528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8528, label %dec_label_pc_8530, label %dec_label_pc_8510

dec_label_pc_8530:                                ; preds = %dec_label_pc_851c, %dec_label_pc_84f4
  %v0_8544 = phi i32 [ %v2_84fc, %dec_label_pc_84f4 ], [ %v7_851c, %dec_label_pc_851c ]
  store i32 %v5_8304, i32* %r0.global-to-local, align 4
  %v0_8538 = load i32, i32* @sb, align 4
  store i32 %v0_8538, i32* %r1.global-to-local, align 4
  %v0_8540 = load i32, i32* @r5, align 4
  store i32 %v0_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = inttoptr i32 %v0_8544 to i32*
  %v2_8544 = load i32, i32* %v1_8544, align 4
  store i32 %v2_8544, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v2_8544)
  br label %dec_label_pc_8550

dec_label_pc_8550:                                ; preds = %dec_label_pc_8510, %dec_label_pc_84e4, %dec_label_pc_8530
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_8554 = call i32 @function_12018(i32 0)
  store i32 %v1_8554, i32* %r0.global-to-local, align 4
  %v0_8558 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8558, label %bb54, label %.thread17

bb54:                                             ; preds = %dec_label_pc_8550
  br label %.thread17

.thread17:                                        ; preds = %dec_label_pc_8550, %bb54
  ret i32 %v1_8554

; uselistorder directives
  uselistorder i1 %v9_8528, { 1, 0 }
  uselistorder i32 %v1_8510, { 1, 2, 0 }
  uselistorder i1 %v9_8508, { 1, 0 }
  uselistorder i32 %v0_84dc, { 1, 0 }
  uselistorder i32 %v1_84cc, { 1, 2, 0 }
  uselistorder i1 %v2_84a0, { 0, 2, 1 }
  uselistorder i1 %v2_8494, { 1, 0 }
  uselistorder i1 %v7_847c, { 1, 0 }
  uselistorder i32 %v0_8478, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8464, { 1, 0 }
  uselistorder i32 %v2_8434, { 1, 0 }
  uselistorder i32 %v1_8430, { 2, 0, 1, 3 }
  uselistorder i32 %v4_842c, { 0, 2, 1, 3 }
  uselistorder i32 %v3_8410, { 1, 0 }
  uselistorder i32 %v3_83a4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8394, { 1, 0 }
  uselistorder i32 %v1_8390, { 1, 0 }
  uselistorder i32 %v2_8350, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_8324, { 1, 0, 2, 3 }
  uselistorder i32 %v5_8304, { 1, 0 }
  uselistorder i32 %v1_82f0, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_82ec, { 1, 2, 0, 3 }
  uselistorder i32 %v0_82d8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 6, 7, 3, 4, 5, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 3, 2, 4, 8, 6, 18, 7, 9, 10, 12, 11, 19, 20, 13, 14, 15, 16, 17, 21, 22, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 0, 12, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %dec_label_pc_8550, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8510, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %dec_label_pc_849c, { 5, 4, 0, 1, 2, 3, 6, 7, 8 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %dec_label_pc_82e0, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_8560(i32 %arg1) local_unnamed_addr {
dec_label_pc_8560:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8560 = load i32, i32* @r4, align 4
  store i32 %v3_8560, i32* %stack_var_-24, align 4
  %v6_8560 = load i32, i32* @r5, align 4
  %v9_8560 = load i32, i32* @r6, align 4
  %v12_8560 = load i32, i32* @r7, align 4
  %v15_8560 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_856c = call i32 @function_11528(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1db40.18 to i32), i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1db44.20 to i32), i32* @r6, align 4
  store i32 44636, i32* %r2.global-to-local, align 4
  store i32 %v2_856c, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1db41.24 to i32), i32* %r1.global-to-local, align 4
  %v2_858c = load i32, i32* @global_var_1db44.20, align 4
  %v2_8590 = inttoptr i32 %v2_856c to i32*
  store i32 44636, i32* %v2_8590, align 4
  %v3_8594 = load i32, i32* @r4, align 4
  %v4_8594 = add i32 %v3_8594, 4
  %v5_8594 = inttoptr i32 %v4_8594 to i8*
  store i8 0, i8* %v5_8594, align 1
  %v0_8598 = load i32, i32* %r1.global-to-local, align 4
  %v3_8598 = mul i32 %v0_8598, 4
  store i32 %v3_8598, i32* %r1.global-to-local, align 4
  %v5_859c = inttoptr i32 %v2_858c to i32*
  %v6_859c = call i32 @function_1165c(i32* %v5_859c, i32 %v3_8598, i32 44636, i32 0)
  %v2_85a0 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_85a0 = zext i8 %v2_85a0 to i32
  store i32 %v6_859c, i32* %r2.global-to-local, align 4
  %v0_85a8 = load i32, i32* @r4, align 4
  %v5_85a8 = mul nuw nsw i32 %v3_85a0, 4
  %v6_85a8 = add i32 %v5_85a8, %v6_859c
  %v7_85a8 = inttoptr i32 %v6_85a8 to i32*
  store i32 %v0_85a8, i32* %v7_85a8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1db41.24 to i32), i32* %r3.global-to-local, align 4
  %v1_85b8 = load i32, i32* @r6, align 4
  %v2_85b8 = inttoptr i32 %v1_85b8 to i32*
  store i32 %v6_859c, i32* %v2_85b8, align 4
  %v0_85bc = load i32, i32* %r3.global-to-local, align 4
  %v1_85bc = trunc i32 %v0_85bc to i8
  %v2_85bc = load i32, i32* @r5, align 4
  %v3_85bc = inttoptr i32 %v2_85bc to i8*
  store i8 %v1_85bc, i8* %v3_85bc, align 1
  %v2_85c0 = call i32 @function_11528(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_b428.26 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_85c0, i32* @r4, align 4
  store i32 ptrtoint (i8* @global_var_1db41.24 to i32), i32* %r1.global-to-local, align 4
  %v2_85d8 = load i32, i32* @global_var_1db44.20, align 4
  %v2_85dc = inttoptr i32 %v2_85c0 to i32*
  store i32 ptrtoint (i32* @global_var_b428.26 to i32), i32* %v2_85dc, align 4
  %v0_85e0 = load i32, i32* @r7, align 4
  %v1_85e0 = trunc i32 %v0_85e0 to i8
  %v2_85e0 = load i32, i32* @r4, align 4
  %v3_85e0 = add i32 %v2_85e0, 4
  %v4_85e0 = inttoptr i32 %v3_85e0 to i8*
  store i8 %v1_85e0, i8* %v4_85e0, align 1
  %v0_85e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_85e4 = mul i32 %v0_85e4, 4
  store i32 %v3_85e4, i32* %r1.global-to-local, align 4
  %v4_85e8 = inttoptr i32 %v2_85d8 to i32*
  %v5_85e8 = call i32 @function_1165c(i32* %v4_85e8, i32 %v3_85e4, i32 %v6_859c, i32 ptrtoint (i32* @global_var_b428.26 to i32))
  %v2_85ec = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_85ec = zext i8 %v2_85ec to i32
  store i32 %v3_85ec, i32* %r3.global-to-local, align 4
  store i32 %v5_85e8, i32* %r2.global-to-local, align 4
  %v0_85f4 = load i32, i32* @r4, align 4
  %v5_85f4 = mul nuw nsw i32 %v3_85ec, 4
  %v6_85f4 = add i32 %v5_85f4, %v5_85e8
  %v7_85f4 = inttoptr i32 %v6_85f4 to i32*
  store i32 %v0_85f4, i32* %v7_85f4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_85fc = load i32, i32* %r3.global-to-local, align 4
  %v1_85fc = load i32, i32* @r7, align 4
  %v2_85fc = add i32 %v1_85fc, %v0_85fc
  store i32 %v2_85fc, i32* %r3.global-to-local, align 4
  %v1_8604 = trunc i32 %v2_85fc to i8
  %v2_8604 = load i32, i32* @r5, align 4
  %v3_8604 = inttoptr i32 %v2_8604 to i8*
  store i8 %v1_8604, i8* %v3_8604, align 1
  %v0_8608 = load i32, i32* %r2.global-to-local, align 4
  %v1_8608 = load i32, i32* @r6, align 4
  %v2_8608 = inttoptr i32 %v1_8608 to i32*
  store i32 %v0_8608, i32* %v2_8608, align 4
  %v2_860c = call i32 @function_11528(i32 %v1_85fc, i32 8)
  %v2_8610 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_8610 = zext i8 %v2_8610 to i32
  store i32 ptrtoint (i32* @global_var_b894.28 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_860c, i32* @r4, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8620 = load i32, i32* @r7, align 4
  %v2_8620 = add i32 %v1_8620, %v3_8610
  store i32 %v2_8620, i32* %r1.global-to-local, align 4
  %v2_8624 = load i32, i32* @global_var_1db44.20, align 4
  %v2_8628 = inttoptr i32 %v2_860c to i32*
  store i32 ptrtoint (i32* @global_var_b894.28 to i32), i32* %v2_8628, align 4
  %v3_862c = load i32, i32* @r4, align 4
  %v4_862c = add i32 %v3_862c, 4
  %v5_862c = inttoptr i32 %v4_862c to i8*
  store i8 2, i8* %v5_862c, align 1
  %v0_8630 = load i32, i32* %r1.global-to-local, align 4
  %v3_8630 = mul i32 %v0_8630, 4
  store i32 %v3_8630, i32* %r1.global-to-local, align 4
  %v5_8634 = inttoptr i32 %v2_8624 to i32*
  %v6_8634 = call i32 @function_1165c(i32* %v5_8634, i32 %v3_8630, i32 ptrtoint (i32* @global_var_b894.28 to i32), i32 2)
  %v2_8638 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_8638 = zext i8 %v2_8638 to i32
  store i32 %v3_8638, i32* %r3.global-to-local, align 4
  store i32 %v6_8634, i32* %r2.global-to-local, align 4
  %v0_8640 = load i32, i32* @r4, align 4
  %v5_8640 = mul nuw nsw i32 %v3_8638, 4
  %v6_8640 = add i32 %v5_8640, %v6_8634
  %v7_8640 = inttoptr i32 %v6_8640 to i32*
  store i32 %v0_8640, i32* %v7_8640, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8648 = load i32, i32* %r3.global-to-local, align 4
  %v1_8648 = load i32, i32* @r7, align 4
  %v2_8648 = add i32 %v1_8648, %v0_8648
  store i32 %v2_8648, i32* %r3.global-to-local, align 4
  %v1_8650 = load i32, i32* @r6, align 4
  %v2_8650 = inttoptr i32 %v1_8650 to i32*
  store i32 %v6_8634, i32* %v2_8650, align 4
  %v0_8654 = load i32, i32* %r3.global-to-local, align 4
  %v1_8654 = trunc i32 %v0_8654 to i8
  %v2_8654 = load i32, i32* @r5, align 4
  %v3_8654 = inttoptr i32 %v2_8654 to i8*
  store i8 %v1_8654, i8* %v3_8654, align 1
  %v2_8658 = call i32 @function_11528(i32 %v1_8648, i32 8)
  %v2_865c = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_865c = zext i8 %v2_865c to i32
  store i32 ptrtoint (i32* @global_var_ab9c.30 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r8, align 4
  store i32 %v2_8658, i32* @r4, align 4
  %v1_866c = load i32, i32* @r7, align 4
  %v2_866c = add i32 %v1_866c, %v3_865c
  store i32 %v2_866c, i32* %r1.global-to-local, align 4
  %v2_8670 = load i32, i32* @global_var_1db44.20, align 4
  %v2_8674 = inttoptr i32 %v2_8658 to i32*
  store i32 ptrtoint (i32* @global_var_ab9c.30 to i32), i32* %v2_8674, align 4
  %v0_8678 = load i32, i32* @r8, align 4
  %v1_8678 = trunc i32 %v0_8678 to i8
  %v2_8678 = load i32, i32* @r4, align 4
  %v3_8678 = add i32 %v2_8678, 4
  %v4_8678 = inttoptr i32 %v3_8678 to i8*
  store i8 %v1_8678, i8* %v4_8678, align 1
  %v0_867c = load i32, i32* %r1.global-to-local, align 4
  %v3_867c = mul i32 %v0_867c, 4
  store i32 %v3_867c, i32* %r1.global-to-local, align 4
  %v4_8680 = inttoptr i32 %v2_8670 to i32*
  %v5_8680 = call i32 @function_1165c(i32* %v4_8680, i32 %v3_867c, i32 %v6_8634, i32 ptrtoint (i32* @global_var_ab9c.30 to i32))
  %v2_8684 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_8684 = zext i8 %v2_8684 to i32
  store i32 %v3_8684, i32* %r3.global-to-local, align 4
  store i32 %v5_8680, i32* %r2.global-to-local, align 4
  %v0_868c = load i32, i32* @r4, align 4
  %v5_868c = mul nuw nsw i32 %v3_8684, 4
  %v6_868c = add i32 %v5_868c, %v5_8680
  %v7_868c = inttoptr i32 %v6_868c to i32*
  store i32 %v0_868c, i32* %v7_868c, align 4
  %v0_8690 = load i32, i32* @r8, align 4
  store i32 %v0_8690, i32* %r1.global-to-local, align 4
  %v0_8694 = load i32, i32* %r3.global-to-local, align 4
  %v1_8694 = load i32, i32* @r7, align 4
  %v2_8694 = add i32 %v1_8694, %v0_8694
  store i32 %v2_8694, i32* %r3.global-to-local, align 4
  %v1_869c = trunc i32 %v2_8694 to i8
  %v2_869c = load i32, i32* @r5, align 4
  %v3_869c = inttoptr i32 %v2_869c to i8*
  store i8 %v1_869c, i8* %v3_869c, align 1
  %v0_86a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = inttoptr i32 %v1_86a0 to i32*
  store i32 %v0_86a0, i32* %v2_86a0, align 4
  %v2_86a4 = call i32 @function_11528(i32 %v1_8694, i32 %v0_8690)
  %v2_86a8 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_86a8 = zext i8 %v2_86a8 to i32
  store i32 ptrtoint (i32* @global_var_a4c4.32 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86a4, i32* @r4, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_86b8 = load i32, i32* @r7, align 4
  %v2_86b8 = add i32 %v1_86b8, %v3_86a8
  store i32 %v2_86b8, i32* %r1.global-to-local, align 4
  %v2_86bc = load i32, i32* @global_var_1db44.20, align 4
  %v2_86c0 = inttoptr i32 %v2_86a4 to i32*
  store i32 ptrtoint (i32* @global_var_a4c4.32 to i32), i32* %v2_86c0, align 4
  %v3_86c4 = load i32, i32* @r4, align 4
  %v4_86c4 = add i32 %v3_86c4, 4
  %v5_86c4 = inttoptr i32 %v4_86c4 to i8*
  store i8 3, i8* %v5_86c4, align 1
  %v0_86c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_86c8 = mul i32 %v0_86c8, 4
  store i32 %v3_86c8, i32* %r1.global-to-local, align 4
  %v5_86cc = inttoptr i32 %v2_86bc to i32*
  %v6_86cc = call i32 @function_1165c(i32* %v5_86cc, i32 %v3_86c8, i32 ptrtoint (i32* @global_var_a4c4.32 to i32), i32 3)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 %v3_86d0, i32* %r3.global-to-local, align 4
  store i32 %v6_86cc, i32* %r2.global-to-local, align 4
  %v0_86d8 = load i32, i32* @r4, align 4
  %v5_86d8 = mul nuw nsw i32 %v3_86d0, 4
  %v6_86d8 = add i32 %v5_86d8, %v6_86cc
  %v7_86d8 = inttoptr i32 %v6_86d8 to i32*
  store i32 %v0_86d8, i32* %v7_86d8, align 4
  %v0_86dc = load i32, i32* @r8, align 4
  store i32 %v0_86dc, i32* %r1.global-to-local, align 4
  %v0_86e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r7, align 4
  %v2_86e0 = add i32 %v1_86e0, %v0_86e0
  store i32 %v2_86e0, i32* %r3.global-to-local, align 4
  %v1_86e8 = trunc i32 %v2_86e0 to i8
  %v2_86e8 = load i32, i32* @r5, align 4
  %v3_86e8 = inttoptr i32 %v2_86e8 to i8*
  store i8 %v1_86e8, i8* %v3_86e8, align 1
  %v0_86ec = load i32, i32* %r2.global-to-local, align 4
  %v1_86ec = load i32, i32* @r6, align 4
  %v2_86ec = inttoptr i32 %v1_86ec to i32*
  store i32 %v0_86ec, i32* %v2_86ec, align 4
  %v2_86f0 = call i32 @function_11528(i32 %v1_86e0, i32 %v0_86dc)
  %v2_86f4 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_86f4 = zext i8 %v2_86f4 to i32
  store i32 ptrtoint (i32* @global_var_9da0.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86f0, i32* @r4, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_8704 = load i32, i32* @r7, align 4
  %v2_8704 = add i32 %v1_8704, %v3_86f4
  store i32 %v2_8704, i32* %r1.global-to-local, align 4
  %v2_8708 = load i32, i32* @global_var_1db44.20, align 4
  %v2_870c = inttoptr i32 %v2_86f0 to i32*
  store i32 ptrtoint (i32* @global_var_9da0.34 to i32), i32* %v2_870c, align 4
  %v3_8710 = load i32, i32* @r4, align 4
  %v4_8710 = add i32 %v3_8710, 4
  %v5_8710 = inttoptr i32 %v4_8710 to i8*
  store i8 4, i8* %v5_8710, align 1
  %v0_8714 = load i32, i32* %r1.global-to-local, align 4
  %v3_8714 = mul i32 %v0_8714, 4
  store i32 %v3_8714, i32* %r1.global-to-local, align 4
  %v5_8718 = inttoptr i32 %v2_8708 to i32*
  %v6_8718 = call i32 @function_1165c(i32* %v5_8718, i32 %v3_8714, i32 ptrtoint (i32* @global_var_9da0.34 to i32), i32 4)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 %v3_871c, i32* %r3.global-to-local, align 4
  store i32 %v6_8718, i32* %r2.global-to-local, align 4
  %v0_8724 = load i32, i32* @r4, align 4
  %v5_8724 = mul nuw nsw i32 %v3_871c, 4
  %v6_8724 = add i32 %v5_8724, %v6_8718
  %v7_8724 = inttoptr i32 %v6_8724 to i32*
  store i32 %v0_8724, i32* %v7_8724, align 4
  %v0_8728 = load i32, i32* @r8, align 4
  store i32 %v0_8728, i32* %r1.global-to-local, align 4
  %v0_872c = load i32, i32* %r3.global-to-local, align 4
  %v1_872c = load i32, i32* @r7, align 4
  %v2_872c = add i32 %v1_872c, %v0_872c
  store i32 %v2_872c, i32* %r3.global-to-local, align 4
  %v1_8734 = trunc i32 %v2_872c to i8
  %v2_8734 = load i32, i32* @r5, align 4
  %v3_8734 = inttoptr i32 %v2_8734 to i8*
  store i8 %v1_8734, i8* %v3_8734, align 1
  %v0_8738 = load i32, i32* %r2.global-to-local, align 4
  %v1_8738 = load i32, i32* @r6, align 4
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  store i32 %v0_8738, i32* %v2_8738, align 4
  %v2_873c = call i32 @function_11528(i32 %v1_872c, i32 %v0_8728)
  %v2_8740 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_8740 = zext i8 %v2_8740 to i32
  store i32 ptrtoint (i32* @global_var_9574.36 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_873c, i32* @r4, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8750 = load i32, i32* @r7, align 4
  %v2_8750 = add i32 %v1_8750, %v3_8740
  store i32 %v2_8750, i32* %r1.global-to-local, align 4
  %v2_8754 = load i32, i32* @global_var_1db44.20, align 4
  %v2_8758 = inttoptr i32 %v2_873c to i32*
  store i32 ptrtoint (i32* @global_var_9574.36 to i32), i32* %v2_8758, align 4
  %v3_875c = load i32, i32* @r4, align 4
  %v4_875c = add i32 %v3_875c, 4
  %v5_875c = inttoptr i32 %v4_875c to i8*
  store i8 5, i8* %v5_875c, align 1
  %v0_8760 = load i32, i32* %r1.global-to-local, align 4
  %v3_8760 = mul i32 %v0_8760, 4
  store i32 %v3_8760, i32* %r1.global-to-local, align 4
  %v5_8764 = inttoptr i32 %v2_8754 to i32*
  %v6_8764 = call i32 @function_1165c(i32* %v5_8764, i32 %v3_8760, i32 ptrtoint (i32* @global_var_9574.36 to i32), i32 5)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 %v3_8768, i32* %r3.global-to-local, align 4
  store i32 %v6_8764, i32* %r2.global-to-local, align 4
  %v0_8770 = load i32, i32* @r4, align 4
  %v5_8770 = mul nuw nsw i32 %v3_8768, 4
  %v6_8770 = add i32 %v5_8770, %v6_8764
  %v7_8770 = inttoptr i32 %v6_8770 to i32*
  store i32 %v0_8770, i32* %v7_8770, align 4
  %v0_8774 = load i32, i32* @r8, align 4
  store i32 %v0_8774, i32* %r1.global-to-local, align 4
  %v0_8778 = load i32, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r7, align 4
  %v2_8778 = add i32 %v1_8778, %v0_8778
  store i32 %v2_8778, i32* %r3.global-to-local, align 4
  %v1_8780 = trunc i32 %v2_8778 to i8
  %v2_8780 = load i32, i32* @r5, align 4
  %v3_8780 = inttoptr i32 %v2_8780 to i8*
  store i8 %v1_8780, i8* %v3_8780, align 1
  %v0_8784 = load i32, i32* %r2.global-to-local, align 4
  %v1_8784 = load i32, i32* @r6, align 4
  %v2_8784 = inttoptr i32 %v1_8784 to i32*
  store i32 %v0_8784, i32* %v2_8784, align 4
  %v2_8788 = call i32 @function_11528(i32 %v1_8778, i32 %v0_8774)
  %v2_878c = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_878c = zext i8 %v2_878c to i32
  store i32 ptrtoint (i32* @global_var_8f14.38 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8788, i32* @r4, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_879c = load i32, i32* @r7, align 4
  %v2_879c = add i32 %v1_879c, %v3_878c
  store i32 %v2_879c, i32* %r1.global-to-local, align 4
  %v2_87a0 = load i32, i32* @global_var_1db44.20, align 4
  %v2_87a4 = inttoptr i32 %v2_8788 to i32*
  store i32 ptrtoint (i32* @global_var_8f14.38 to i32), i32* %v2_87a4, align 4
  %v3_87a8 = load i32, i32* @r4, align 4
  %v4_87a8 = add i32 %v3_87a8, 4
  %v5_87a8 = inttoptr i32 %v4_87a8 to i8*
  store i8 6, i8* %v5_87a8, align 1
  %v0_87ac = load i32, i32* %r1.global-to-local, align 4
  %v3_87ac = mul i32 %v0_87ac, 4
  store i32 %v3_87ac, i32* %r1.global-to-local, align 4
  %v5_87b0 = inttoptr i32 %v2_87a0 to i32*
  %v6_87b0 = call i32 @function_1165c(i32* %v5_87b0, i32 %v3_87ac, i32 ptrtoint (i32* @global_var_8f14.38 to i32), i32 6)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 %v3_87b4, i32* %r3.global-to-local, align 4
  store i32 %v6_87b0, i32* %r2.global-to-local, align 4
  %v0_87bc = load i32, i32* @r4, align 4
  %v5_87bc = mul nuw nsw i32 %v3_87b4, 4
  %v6_87bc = add i32 %v5_87bc, %v6_87b0
  %v7_87bc = inttoptr i32 %v6_87bc to i32*
  store i32 %v0_87bc, i32* %v7_87bc, align 4
  %v0_87c0 = load i32, i32* @r8, align 4
  store i32 %v0_87c0, i32* %r1.global-to-local, align 4
  %v0_87c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r7, align 4
  %v2_87c4 = add i32 %v1_87c4, %v0_87c4
  store i32 %v2_87c4, i32* %r3.global-to-local, align 4
  %v1_87cc = trunc i32 %v2_87c4 to i8
  %v2_87cc = load i32, i32* @r5, align 4
  %v3_87cc = inttoptr i32 %v2_87cc to i8*
  store i8 %v1_87cc, i8* %v3_87cc, align 1
  %v0_87d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_87d0 = load i32, i32* @r6, align 4
  %v2_87d0 = inttoptr i32 %v1_87d0 to i32*
  store i32 %v0_87d0, i32* %v2_87d0, align 4
  %v2_87d4 = call i32 @function_11528(i32 %v1_87c4, i32 %v0_87c0)
  %v2_87d8 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_87d8 = zext i8 %v2_87d8 to i32
  store i32 ptrtoint (i32* @global_var_884c.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87d4, i32* @r4, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_87e8 = load i32, i32* @r7, align 4
  %v2_87e8 = add i32 %v1_87e8, %v3_87d8
  store i32 %v2_87e8, i32* %r1.global-to-local, align 4
  %v2_87ec = load i32, i32* @global_var_1db44.20, align 4
  %v2_87f0 = inttoptr i32 %v2_87d4 to i32*
  store i32 ptrtoint (i32* @global_var_884c.40 to i32), i32* %v2_87f0, align 4
  %v3_87f4 = load i32, i32* @r4, align 4
  %v4_87f4 = add i32 %v3_87f4, 4
  %v5_87f4 = inttoptr i32 %v4_87f4 to i8*
  store i8 7, i8* %v5_87f4, align 1
  %v0_87f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_87f8 = mul i32 %v0_87f8, 4
  store i32 %v3_87f8, i32* %r1.global-to-local, align 4
  %v5_87fc = inttoptr i32 %v2_87ec to i32*
  %v6_87fc = call i32 @function_1165c(i32* %v5_87fc, i32 %v3_87f8, i32 ptrtoint (i32* @global_var_884c.40 to i32), i32 7)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_1db40.18 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 %v3_8800, i32* %r3.global-to-local, align 4
  %v1_8804 = load i32, i32* @r6, align 4
  %v2_8804 = inttoptr i32 %v1_8804 to i32*
  store i32 %v6_87fc, i32* %v2_8804, align 4
  %v0_8808 = load i32, i32* @r4, align 4
  %v2_8808 = load i32, i32* %r3.global-to-local, align 4
  %v5_8808 = mul i32 %v2_8808, 4
  %v6_8808 = add i32 %v5_8808, %v6_87fc
  %v7_8808 = inttoptr i32 %v6_8808 to i32*
  store i32 %v0_8808, i32* %v7_8808, align 4
  %v0_880c = load i32, i32* %r3.global-to-local, align 4
  %v1_880c = load i32, i32* @r7, align 4
  %v2_880c = add i32 %v1_880c, %v0_880c
  store i32 %v2_880c, i32* %r2.global-to-local, align 4
  %v1_8814 = trunc i32 %v2_880c to i8
  %v2_8814 = load i32, i32* @r5, align 4
  %v3_8814 = inttoptr i32 %v2_8814 to i8*
  store i8 %v1_8814, i8* %v3_8814, align 1
  %v2_8818 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8818, i32* @r4, align 4
  store i32 %v6_8560, i32* @r5, align 4
  store i32 %v9_8560, i32* @r6, align 4
  store i32 %v12_8560, i32* @r7, align 4
  store i32 %v15_8560, i32* @r8, align 4
  ret i32 %v1_880c

; uselistorder directives
  uselistorder i32 %v1_880c, { 1, 0 }
  uselistorder i32 %v3_87f8, { 1, 0 }
  uselistorder i32 %v1_87c4, { 1, 0 }
  uselistorder i32 %v3_87ac, { 1, 0 }
  uselistorder i32 %v1_8778, { 1, 0 }
  uselistorder i32 %v3_8760, { 1, 0 }
  uselistorder i32 %v1_872c, { 1, 0 }
  uselistorder i32 %v3_8714, { 1, 0 }
  uselistorder i32 %v1_86e0, { 1, 0 }
  uselistorder i32 %v3_86c8, { 1, 0 }
  uselistorder i32 %v1_8694, { 1, 0 }
  uselistorder i32 %v3_867c, { 1, 0 }
  uselistorder i32 %v1_8648, { 1, 0 }
  uselistorder i32 %v6_8634, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8630, { 1, 0 }
  uselistorder i32 %v1_85fc, { 1, 0 }
  uselistorder i32 %v3_85e4, { 1, 0 }
  uselistorder i32 %v2_85c0, { 1, 0 }
  uselistorder i32 %v6_859c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8598, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r2.global-to-local, { 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 21 }
  uselistorder i32* %r1.global-to-local, { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i8* bitcast (i8** @global_var_1db40.18 to i8*), { 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_1db41.24 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_1db40.18, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1db40.18 to i32), { 1, 0 }
}

define i32 @function_884c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_884c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_884c = load i32, i32* @r4, align 4
  %v24_884c = load i32, i32* @fp, align 4
  %v27_884c = load i32, i32* @lr, align 4
  store i32 0, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_8878 = call i32 @function_11528(i32 %arg2, i32 4)
  %v0_887c = load i32, i32* @r4, align 4
  store i32 %v0_887c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8888 = load i32, i32* @sb, align 4
  store i32 %v0_8888, i32* %r3.global-to-local, align 4
  %v0_888c = load i32, i32* @r5, align 4
  store i32 %v0_888c, i32* %r0.global-to-local, align 4
  %v5_8890 = inttoptr i32 %v0_887c to i32*
  %v6_8890 = call i32 @function_8258(i32 %v0_888c, i32* %v5_8890, i32 2, i32 %v0_8888, i32 %v2_8878)
  %v1_889c = urem i32 %v6_8890, 256
  store i32 %v1_889c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_88a8 = load i32, i32* @r4, align 4
  store i32 %v0_88a8, i32* %r1.global-to-local, align 4
  %v0_88ac = load i32, i32* @r5, align 4
  store i32 %v0_88ac, i32* %r0.global-to-local, align 4
  %v5_88b0 = trunc i32 %v6_8890 to i8
  %v6_88b4 = inttoptr i32 %v0_88a8 to i32*
  %v7_88b4 = call i32 @function_8258(i32 %v0_88ac, i32* %v6_88b4, i32 3, i32 65535, i32 %v6_8890)
  %v0_88b8 = load i32, i32* @r4, align 4
  store i32 %v0_88b8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_88b4, i32* %fp.global-to-local, align 4
  %v0_88c8 = load i32, i32* @r5, align 4
  store i32 %v0_88c8, i32* %r0.global-to-local, align 4
  %v5_88cc = inttoptr i32 %v0_88b8 to i32*
  %v6_88cc = call i32 @function_8258(i32 %v0_88c8, i32* %v5_88cc, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_88d4 = urem i32 %v6_88cc, 256
  store i32 %v1_88d4, i32* %ip.global-to-local, align 4
  %v0_88d8 = load i32, i32* @r4, align 4
  store i32 %v0_88d8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_88e4 = load i32, i32* @r5, align 4
  store i32 %v0_88e4, i32* %r0.global-to-local, align 4
  %v6_88ec = inttoptr i32 %v0_88d8 to i32*
  %v7_88ec = call i32 @function_8258(i32 %v0_88e4, i32* %v6_88ec, i32 5, i32 1, i32 %v1_88d4)
  %v1_88f8 = urem i32 %v7_88ec, 256
  store i32 %v1_88f8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8904 = load i32, i32* @r4, align 4
  store i32 %v0_8904, i32* %r1.global-to-local, align 4
  %v0_8908 = load i32, i32* @r5, align 4
  store i32 %v0_8908, i32* %r0.global-to-local, align 4
  %v5_8910 = inttoptr i32 %v0_8904 to i32*
  %v6_8910 = call i32 @function_8258(i32 %v0_8908, i32* %v5_8910, i32 6, i32 65535, i32 %v1_88f8)
  %v0_891c = load i32, i32* @r4, align 4
  store i32 %v0_891c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_8928 = load i32, i32* @r5, align 4
  store i32 %v0_8928, i32* %r0.global-to-local, align 4
  %v5_892c = inttoptr i32 %v0_891c to i32*
  %v6_892c = call i32 @function_8258(i32 %v0_8928, i32* %v5_892c, i32 7, i32 65535, i32 %v6_8910)
  %v0_8930 = load i32, i32* @r4, align 4
  store i32 %v0_8930, i32* %r1.global-to-local, align 4
  %v0_8934 = load i32, i32* @sb, align 4
  store i32 %v0_8934, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_892c, i32* @r8, align 4
  %v0_8940 = load i32, i32* @r5, align 4
  store i32 %v0_8940, i32* %r0.global-to-local, align 4
  %v5_8944 = inttoptr i32 %v0_8930 to i32*
  %v6_8944 = call i32 @function_8258(i32 %v0_8940, i32* %v5_8944, i32 %v0_8934, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8954 = load i32, i32* @r4, align 4
  store i32 %v0_8954, i32* %r1.global-to-local, align 4
  %v0_8958 = load i32, i32* @r5, align 4
  store i32 %v0_8958, i32* %r0.global-to-local, align 4
  %v5_895c = inttoptr i32 %v0_8954 to i32*
  %v6_895c = call i32 @function_8258(i32 %v0_8958, i32* %v5_895c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8964 = urem i32 %v6_895c, 256
  store i32 %v1_8964, i32* %ip.global-to-local, align 4
  %v0_8968 = load i32, i32* @r4, align 4
  store i32 %v0_8968, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_8970 = load i32, i32* @sb, align 4
  store i32 %v0_8970, i32* %r3.global-to-local, align 4
  %v0_8974 = load i32, i32* @r5, align 4
  store i32 %v0_8974, i32* %r0.global-to-local, align 4
  %v5_897c = inttoptr i32 %v0_8968 to i32*
  %v6_897c = call i32 @function_8258(i32 %v0_8974, i32* %v5_897c, i32 18, i32 %v0_8970, i32 %v1_8964)
  %v0_8984 = load i32, i32* @r4, align 4
  store i32 %v0_8984, i32* %r1.global-to-local, align 4
  %v2_8988 = load i32, i32* @global_var_1fbd0.42, align 4
  store i32 %v2_8988, i32* %r3.global-to-local, align 4
  store i32 %v6_897c, i32* @r7, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_8994 = load i32, i32* @r5, align 4
  store i32 %v0_8994, i32* %r0.global-to-local, align 4
  %v5_8998 = inttoptr i32 %v0_8984 to i32*
  %v6_8998 = call i32 @function_8258(i32 %v0_8994, i32* %v5_8998, i32 19, i32 %v2_8988, i32 ptrtoint (i32* @0 to i32))
  %v0_89a0 = load i32, i32* @sb, align 4
  store i32 %v0_89a0, i32* %r0.global-to-local, align 4
  %v1_89a4 = inttoptr i32 %v0_89a0 to i32*
  %v2_89a4 = call i32 @function_fe58(i32* %v1_89a4)
  %v1_89a8 = load i32, i32* @r6, align 4
  %v2_89a8 = add i32 %v1_89a8, %v2_89a4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_89bc = call i32 @function_109c0(i32 2, i32 3, i32 6)
  store i32 %v3_89bc, i32* %r0.global-to-local, align 4
  %v7_89c0 = icmp eq i32 %v3_89bc, -1
  store i1 %v7_89c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_89c0, label %dec_label_pc_8ef8, label %dec_label_pc_89cc

dec_label_pc_89cc:                                ; preds = %dec_label_pc_884c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_89d4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_89d4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_89dc = load i32, i32* @sb, align 4
  store i32 %v0_89dc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_89e8 = call i32 @function_1097c(i32 %v3_89bc, i32 %v0_89dc, i32 3, i32 %v6_89d4, i32 4)
  store i32 %v5_89e8, i32* %r0.global-to-local, align 4
  %v7_89ec = icmp eq i32 %v5_89e8, -1
  store i1 %v7_89ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_89ec, label %dec_label_pc_8f04, label %dec_label_pc_89f4

dec_label_pc_89f4:                                ; preds = %dec_label_pc_89cc
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v3_89fc = mul i32 %v6_8910, 65536
  store i32 %v3_89fc, i32* %r1.global-to-local, align 4
  %v0_8a00 = load i32, i32* @r8, align 4
  %v0_8a04 = load i32, i32* %fp.global-to-local, align 4
  %v3_8a04 = mul i32 %v0_8a04, 65536
  store i32 %v3_8a04, i32* %fp.global-to-local, align 4
  %v0_8a08 = load i32, i32* @r7, align 4
  %v1_8a08 = urem i32 %v0_8a08, 256
  store i32 %v1_8a08, i32* @r7, align 4
  %v3_8a0c = urem i32 %v0_8a04, 65536
  store i32 %v3_8a0c, i32* %r3.global-to-local, align 4
  %v3_8a10 = urem i32 %v6_8910, 65536
  store i32 %v3_8a10, i32* %ip.global-to-local, align 4
  %v3_8a14 = urem i32 %v0_8a00, 65536
  %v2_8a18 = icmp eq i32 %arg2, 0
  store i1 %v2_8a18, i1* %cpsr_z.global-to-local, align 1
  %v0_8a28 = load i32, i32* @sb, align 4
  store i32 %v0_8a28, i32* %stack_var_-44, align 4
  br i1 %v2_8a18, label %dec_label_pc_8c30.preheader, label %dec_label_pc_8a3c

dec_label_pc_8a3c:                                ; preds = %dec_label_pc_89f4
  %v3_8a00 = mul i32 %v0_8a00, 65536
  %v3_8a40 = mul i32 %v6_8944, 65536
  %v1_8a44 = add i32 %v3_8a40, 4325376
  %v0_8a04.not = or i32 %v0_8a04, -65536
  %v1_8a48 = xor i32 %v0_8a04.not, 65535
  %v3_8a54 = mul i32 %v1_8a48, 65536
  store i32 %v3_8a54, i32* @r6, align 4
  %tmp68 = udiv i32 %v1_8a44, 256
  %v3_8a6c = and i32 %tmp68, 65280
  store i32 %v3_8a6c, i32* %r3.global-to-local, align 4
  %v1_8a70 = add i32 %v3_8a40, 524288
  %tmp69 = mul i32 %v0_8a04, 256
  %v3_8a74 = and i32 %tmp69, 65280
  %v1_8a78 = add i32 %v3_8a40, 1835008
  %tmp70 = mul nsw i32 %v1_8a48, 256
  %v3_8a7c = and i32 %tmp70, 65280
  %v4_8a80 = udiv i32 %v1_8a44, 16777216
  %v5_8a80 = or i32 %v4_8a80, %tmp68
  %v3_8a88 = udiv i32 %v1_8a78, 256
  %v5_8a8c = trunc i32 %v5_8a80 to i16
  %tmp71 = udiv i32 %v0_8a04, 256
  %v4_8a90 = urem i32 %tmp71, 256
  %v5_8a90 = or i32 %v4_8a90, %v3_8a74
  store i32 %v5_8a90, i32* @r7, align 4
  %tmp72 = udiv i32 %v1_8a48, 256
  %v4_8a94 = urem i32 %tmp72, 256
  %v5_8a94 = or i32 %v4_8a94, %v3_8a7c
  store i32 %v5_8a94, i32* @fp, align 4
  store i32 %v3_8a00, i32* %r2.global-to-local, align 4
  store i32 %v3_89fc, i32* %r1.global-to-local, align 4
  %v1_8aa0 = and i32 %v3_8a88, 65280
  %tmp73 = mul i32 %v6_8910, 256
  %v3_8aa4 = and i32 %tmp73, 65280
  %tmp74 = mul i32 %v0_8a00, 256
  %v3_8aa8 = and i32 %tmp74, 65280
  %v4_8ab0 = udiv i32 %v1_8a78, 16777216
  %v5_8ab0 = or i32 %v1_8aa0, %v4_8ab0
  store i32 %v5_8ab0, i32* @r5, align 4
  %tmp75 = udiv i32 %v6_8910, 256
  %v4_8ab4 = urem i32 %tmp75, 256
  %v5_8ab4 = or i32 %v4_8ab4, %v3_8aa4
  store i32 %v5_8ab4, i32* %r0.global-to-local, align 4
  %tmp76 = udiv i32 %v0_8a00, 256
  %v4_8ab8 = urem i32 %tmp76, 256
  %v5_8ab8 = or i32 %v4_8ab8, %v3_8aa8
  store i32 %v5_8ab8, i32* %ip.global-to-local, align 4
  %tmp77 = udiv i32 %v1_8a70, 256
  %v3_8abc = and i32 %tmp77, 65280
  store i32 %v3_8abc, i32* @lr, align 4
  %v5_8ac8 = trunc i32 %v5_8ab0 to i16
  %v4_8acc = udiv i32 %v1_8a70, 16777216
  %v5_8acc = or i32 %v3_8abc, %v4_8acc
  store i32 %v5_8acc, i32* @r8, align 4
  store i32 %v0_8a28, i32* @r4, align 4
  %v1_8b34 = trunc i32 %v6_88cc to i8
  %v2_8be8 = icmp eq i32 %v1_8a08, 0
  %sext = mul nuw i32 %v5_8ab4, 65536
  %v4_8c0c = sdiv i32 %sext, 65536
  %sext7 = mul nuw i32 %v5_8ab8, 65536
  %v4_8c14 = sdiv i32 %sext7, 65536
  br label %dec_label_pc_8ad4

dec_label_pc_8ad4:                                ; preds = %bb80, %dec_label_pc_8a3c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8ae0 = call i32 @function_11528(i32 1510, i32 4)
  store i32 %v2_8ae0, i32* %r0.global-to-local, align 4
  %v3_8ae8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8ae8, i32* %r2.global-to-local, align 4
  %v2_8aec = load i32, i32* @r4, align 4
  %v5_8aec = mul i32 %v2_8aec, 4
  %v6_8aec = add i32 %v5_8aec, %v2_8878
  %v7_8aec = inttoptr i32 %v6_8aec to i32*
  store i32 %v2_8ae0, i32* %v7_8aec, align 4
  store i32 %v2_8878, i32* %r1.global-to-local, align 4
  %v0_8af4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8af4 = mul i32 %v0_8af4, 32
  store i32 %v3_8af4, i32* %r3.global-to-local, align 4
  %v4_8af8 = mul i32 %v0_8af4, 4
  %v5_8af8 = add i32 %v4_8af8, %v2_8878
  %v6_8af8 = inttoptr i32 %v5_8af8 to i32*
  %v7_8af8 = load i32, i32* %v6_8af8, align 4
  store i32 %v7_8af8, i32* %r4.global-to-local, align 4
  %v5_8afc = mul i32 %v0_8af4, 24
  store i32 %v5_8afc, i32* %r3.global-to-local, align 4
  %v1_8b00 = load i32, i32* @sl, align 4
  %v2_8b00 = add i32 %v1_8b00, %v5_8afc
  store i32 %v2_8b00, i32* %lr.global-to-local, align 4
  %v1_8b04 = inttoptr i32 %v7_8af8 to i8*
  %v2_8b04 = load i8, i8* %v1_8b04, align 1
  %tmp = urem i8 %v2_8b04, 16
  %v1_8b08 = zext i8 %tmp to i32
  %v1_8b0c = or i32 %v1_8b08, 64
  store i32 %v1_8b0c, i32* %r3.global-to-local, align 4
  %v1_8b10 = trunc i32 %v1_8b0c to i8
  store i8 %v1_8b10, i8* %v1_8b04, align 1
  %v0_8b14 = load i32, i32* %r4.global-to-local, align 4
  %v1_8b14 = inttoptr i32 %v0_8b14 to i8*
  %v2_8b14 = load i8, i8* %v1_8b14, align 1
  %v1_8b18 = and i8 %v2_8b14, -16
  %v1_8b1c = or i8 %v1_8b18, 5
  store i32 %v1_88f8, i32* %r3.global-to-local, align 4
  store i8 %v1_8b1c, i8* %v1_8b14, align 1
  store i32 %v6_8890, i32* %r1.global-to-local, align 4
  %v2_8b2c = load i32, i32* %r4.global-to-local, align 4
  %v3_8b2c = add i32 %v2_8b2c, 1
  %v4_8b2c = inttoptr i32 %v3_8b2c to i8*
  store i8 %v5_88b0, i8* %v4_8b2c, align 1
  store i32 %v1_88d4, i32* %r2.global-to-local, align 4
  %v2_8b34 = load i32, i32* %r4.global-to-local, align 4
  %v3_8b34 = add i32 %v2_8b34, 8
  %v4_8b34 = inttoptr i32 %v3_8b34 to i8*
  store i8 %v1_8b34, i8* %v4_8b34, align 1
  %v0_8b38 = load i32, i32* %r3.global-to-local, align 4
  %v2_8b38 = icmp eq i32 %v0_8b38, 0
  store i1 %v2_8b38, i1* %cpsr_z.global-to-local, align 1
  %v2_8b40 = load i32, i32* %r4.global-to-local, align 4
  %v3_8b40 = add i32 %v2_8b40, 2
  %v4_8b40 = inttoptr i32 %v3_8b40 to i16*
  store i16 %v5_8a8c, i16* %v4_8b40, align 2
  %v2_8b48 = load i32, i32* %r4.global-to-local, align 4
  %v3_8b48 = add i32 %v2_8b48, 9
  %v4_8b48 = inttoptr i32 %v3_8b48 to i8*
  store i8 47, i8* %v4_8b48, align 1
  store i32 %v6_8998, i32* %r3.global-to-local, align 4
  %v1_8b50 = load i32, i32* %r4.global-to-local, align 4
  %v2_8b50 = add i32 %v1_8b50, 12
  %v3_8b50 = inttoptr i32 %v2_8b50 to i32*
  store i32 %v6_8998, i32* %v3_8b50, align 4
  %v0_8b54 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8b54, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_8ad4
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_8b58 = load i32, i32* %r4.global-to-local, align 4
  %v4_8b58 = add i32 %v3_8b58, 6
  %v5_8b58 = inttoptr i32 %v4_8b58 to i16*
  store i16 64, i16* %v5_8b58, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_8ad4, %bb
  %v0_8b5c = load i32, i32* %lr.global-to-local, align 4
  %v1_8b5c = add i32 %v0_8b5c, 16
  %v2_8b5c = inttoptr i32 %v1_8b5c to i32*
  %v3_8b5c = load i32, i32* %v2_8b5c, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_8b64 = load i32, i32* %r4.global-to-local, align 4
  %v2_8b64 = add i32 %v1_8b64, 16
  %v3_8b64 = inttoptr i32 %v2_8b64 to i32*
  store i32 %v3_8b5c, i32* %v3_8b64, align 4
  %v0_8b68 = load i32, i32* %r4.global-to-local, align 4
  %v1_8b68 = add i32 %v0_8b68, 24
  store i32 %v1_8b68, i32* %r0.global-to-local, align 4
  %v1_8b6c = add i32 %v0_8b68, 20
  store i32 %v1_8b6c, i32* %r1.global-to-local, align 4
  %v0_8b70 = load i32, i32* %ip.global-to-local, align 4
  %v1_8b70 = add i32 %v0_8b70, 101
  store i32 %v1_8b70, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_8b7c = load i32, i32* @r7, align 4
  %v1_8b7c = trunc i32 %v0_8b7c to i16
  %v3_8b7c = add i32 %v0_8b68, 4
  %v4_8b7c = inttoptr i32 %v3_8b7c to i16*
  store i16 %v1_8b7c, i16* %v4_8b7c, align 2
  %v0_8b80 = load i32, i32* %ip.global-to-local, align 4
  %v1_8b80 = trunc i32 %v0_8b80 to i16
  %v2_8b80 = load i32, i32* %r1.global-to-local, align 4
  %v3_8b80 = add i32 %v2_8b80, 2
  %v4_8b80 = inttoptr i32 %v3_8b80 to i16*
  store i16 %v1_8b80, i16* %v4_8b80, align 2
  %v0_8b84 = load i32, i32* %r3.global-to-local, align 4
  %v1_8b84 = trunc i32 %v0_8b84 to i8
  %v2_8b84 = load i32, i32* %r0.global-to-local, align 4
  %v3_8b84 = add i32 %v2_8b84, 13
  %v4_8b84 = inttoptr i32 %v3_8b84 to i8*
  store i8 %v1_8b84, i8* %v4_8b84, align 1
  %v0_8b88 = load i32, i32* %r2.global-to-local, align 4
  %v1_8b88 = trunc i32 %v0_8b88 to i8
  %v2_8b88 = load i32, i32* %r0.global-to-local, align 4
  %v3_8b88 = add i32 %v2_8b88, 12
  %v4_8b88 = inttoptr i32 %v3_8b88 to i8*
  store i8 %v1_8b88, i8* %v4_8b88, align 1
  %v0_8b8c = load i32, i32* %r4.global-to-local, align 4
  %v1_8b8c = add i32 %v0_8b8c, 38
  %v2_8b8c = inttoptr i32 %v1_8b8c to i8*
  %v3_8b8c = load i8, i8* %v2_8b8c, align 1
  %tmp86 = urem i8 %v3_8b8c, 16
  %v1_8b90 = zext i8 %tmp86 to i32
  %v1_8b94 = or i32 %v1_8b90, 64
  store i32 %v1_8b94, i32* %r3.global-to-local, align 4
  %v1_8b98 = trunc i32 %v1_8b94 to i8
  store i8 %v1_8b98, i8* %v2_8b8c, align 1
  %v0_8b9c = load i32, i32* %r4.global-to-local, align 4
  %v1_8b9c = add i32 %v0_8b9c, 38
  %v2_8b9c = inttoptr i32 %v1_8b9c to i8*
  %v3_8b9c = load i8, i8* %v2_8b9c, align 1
  %v4_8b9c = zext i8 %v3_8b9c to i32
  %v1_8ba0 = and i32 %v4_8b9c, 240
  %v1_8ba4 = or i32 %v1_8ba0, 5
  store i32 %v1_8ba4, i32* %r2.global-to-local, align 4
  %v1_8ba8 = trunc i32 %v1_8ba4 to i8
  store i8 %v1_8ba8, i8* %v2_8b9c, align 1
  store i32 %v6_8890, i32* %ip.global-to-local, align 4
  %v0_8bb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bb0 = add i32 %v0_8bb0, 38
  store i32 %v1_8bb0, i32* @r5, align 4
  %v3_8bb4 = add i32 %v0_8bb0, 39
  %v4_8bb4 = inttoptr i32 %v3_8bb4 to i8*
  store i8 %v5_88b0, i8* %v4_8bb4, align 1
  store i32 %v5_8ab0, i32* %lr.global-to-local, align 4
  %v2_8bbc = load i32, i32* @r5, align 4
  %v3_8bbc = add i32 %v2_8bbc, 2
  %v4_8bbc = inttoptr i32 %v3_8bbc to i16*
  store i16 %v5_8ac8, i16* %v4_8bbc, align 2
  store i32 %v1_88d4, i32* %r1.global-to-local, align 4
  %v0_8bc4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8bc4, label %.thread8, label %bb78

.thread8:                                         ; preds = %.thread
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb79

bb78:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v3_8bcc = load i32, i32* @r5, align 4
  %v4_8bcc = add i32 %v3_8bcc, 6
  %v5_8bcc = inttoptr i32 %v4_8bcc to i16*
  store i16 64, i16* %v5_8bcc, align 2
  %v0_8bd0.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t85 = trunc i32 %v0_8bd0.pre to i8
  br label %bb79

bb79:                                             ; preds = %.thread8, %bb78
  %v6_88cc.sink.off0 = phi i8 [ %v1_8b34, %.thread8 ], [ %extract.t85, %bb78 ]
  %v2_8bd0 = load i32, i32* @r5, align 4
  %v3_8bd0 = add i32 %v2_8bd0, 8
  %v4_8bd0 = inttoptr i32 %v3_8bd0 to i8*
  store i8 %v6_88cc.sink.off0, i8* %v4_8bd0, align 1
  %v0_8bd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8bd4 = trunc i32 %v0_8bd4 to i8
  %v2_8bd4 = load i32, i32* @r5, align 4
  %v3_8bd4 = add i32 %v2_8bd4, 9
  %v4_8bd4 = inttoptr i32 %v3_8bd4 to i8*
  store i8 %v1_8bd4, i8* %v4_8bd4, align 1
  %v0_8bd8 = load i32, i32* @fp, align 4
  %v1_8bd8 = trunc i32 %v0_8bd8 to i16
  %v2_8bd8 = load i32, i32* @r5, align 4
  %v3_8bd8 = add i32 %v2_8bd8, 4
  %v4_8bd8 = inttoptr i32 %v3_8bd8 to i16*
  store i16 %v1_8bd8, i16* %v4_8bd8, align 2
  %v0_8bdc = call i32 @function_d3a8()
  store i32 %v0_8bdc, i32* %r0.global-to-local, align 4
  store i32 %v1_8a08, i32* %ip.global-to-local, align 4
  store i1 %v2_8be8, i1* %cpsr_z.global-to-local, align 1
  %v1_8bec = sub i32 1023, %v0_8bdc
  store i32 %v1_8bec, i32* %r3.global-to-local, align 4
  br i1 %v2_8be8, label %.thread9, label %.thread10

.thread9:                                         ; preds = %bb79
  %v2_8bf4 = load i32, i32* @r5, align 4
  %v3_8bf4 = add i32 %v2_8bf4, 16
  %v4_8bf4 = inttoptr i32 %v3_8bf4 to i32*
  store i32 %v1_8bec, i32* %v4_8bf4, align 4
  br label %bb80

.thread10:                                        ; preds = %bb79
  %v1_8bf0 = load i32, i32* %r4.global-to-local, align 4
  %v2_8bf0 = add i32 %v1_8bf0, 16
  %v3_8bf0 = inttoptr i32 %v2_8bf0 to i32*
  %v4_8bf0 = load i32, i32* %v3_8bf0, align 4
  store i32 %v4_8bf0, i32* %r3.global-to-local, align 4
  %v2_8bf8 = load i32, i32* @r5, align 4
  %v3_8bf8 = add i32 %v2_8bf8, 16
  %v4_8bf8 = inttoptr i32 %v3_8bf8 to i32*
  store i32 %v4_8bf0, i32* %v4_8bf8, align 4
  br label %bb80

bb80:                                             ; preds = %.thread9, %.thread10
  %v1_8bfc = load i32, i32* @r5, align 4
  %v2_8bfc = add i32 %v1_8bfc, 12
  %v3_8bfc = inttoptr i32 %v2_8bfc to i32*
  store i32 %v0_8bdc, i32* %v3_8bfc, align 4
  %v3_8c00 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8c00, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v0_8c08 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c08 = add i32 %v0_8c08, 58
  store i32 %v1_8c08, i32* @r6, align 4
  store i32 %v4_8c0c, i32* %r1.global-to-local, align 4
  %v1_8c10 = add i32 %v3_8c00, 1
  store i32 %v1_8c10, i32* @r4, align 4
  store i32 %v4_8c14, i32* %r2.global-to-local, align 4
  %v9_8c18 = icmp eq i32 %v1_8c10, %arg2
  store i1 %v9_8c18, i1* %cpsr_z.global-to-local, align 1
  %v0_8c1c = load i32, i32* @r8, align 4
  %v1_8c1c = trunc i32 %v0_8c1c to i16
  %v3_8c1c = add i32 %v0_8c08, 62
  %v4_8c1c = inttoptr i32 %v3_8c1c to i16*
  store i16 %v1_8c1c, i16* %v4_8c1c, align 2
  %v0_8c20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c20 = trunc i32 %v0_8c20 to i16
  %v2_8c20 = load i32, i32* @r6, align 4
  %v3_8c20 = inttoptr i32 %v2_8c20 to i16*
  store i16 %v1_8c20, i16* %v3_8c20, align 2
  %v0_8c24 = load i32, i32* %r2.global-to-local, align 4
  %v1_8c24 = trunc i32 %v0_8c24 to i16
  %v2_8c24 = load i32, i32* @r6, align 4
  %v3_8c24 = add i32 %v2_8c24, 2
  %v4_8c24 = inttoptr i32 %v3_8c24 to i16*
  store i16 %v1_8c24, i16* %v4_8c24, align 2
  %v0_8c28 = load i32, i32* @r4, align 4
  store i32 %v0_8c28, i32* %stack_var_-44, align 4
  %v5_8c2c = icmp slt i32 %v1_8c10, %arg2
  br i1 %v5_8c2c, label %dec_label_pc_8ad4, label %dec_label_pc_8c30.preheader

dec_label_pc_8c30.preheader:                      ; preds = %bb80, %dec_label_pc_89f4
  %v1_8c4c = add i32 %v6_8944, 8
  %v1_8c50 = add i32 %v6_8944, 66
  %v2_8c5c = icmp eq i32 %v6_8998, -1
  %v7_8c5c = icmp eq i32 %v6_8998, -1
  %v3_8e54 = icmp eq i32 %v3_8a0c, 65535
  %v2_8ea4 = icmp eq i32 %v1_8a08, 0
  %v2_8cb8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8cd0 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8ce0 = ptrtoint i32* %stack_var_-56 to i32
  %v2_8cec = ptrtoint i32* %stack_var_-54 to i32
  %v2_8d00 = icmp eq i32 %v1_8964, 0
  br label %dec_label_pc_8c30

dec_label_pc_8c30:                                ; preds = %dec_label_pc_8c30.preheader, %dec_label_pc_8ee4
  store i1 %v2_8a18, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_8a18, label %dec_label_pc_8ee4, label %dec_label_pc_8c44

dec_label_pc_8c44:                                ; preds = %dec_label_pc_8c30
  store i32 %v6_8944, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_8c4c, i32* @fp, align 4
  store i32 %v1_8c50, i32* @sb, align 4
  br label %dec_label_pc_8db8

dec_label_pc_8c58:                                ; preds = %dec_label_pc_8db8
  store i32 %v6_8998, i32* %r1.global-to-local, align 4
  store i1 %v7_8c5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8c5c, label %dec_label_pc_8e44, label %dec_label_pc_8c64

dec_label_pc_8c64:                                ; preds = %dec_label_pc_8de4, %dec_label_pc_8c58
  store i32 %v3_8a0c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8e54, label %dec_label_pc_8e60, label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8e44.dec_label_pc_8c78_crit_edge, %dec_label_pc_8c64
  %v1_8c7c = phi i32 [ %v1_8c7c.pre, %dec_label_pc_8e44.dec_label_pc_8c78_crit_edge ], [ 65535, %dec_label_pc_8c64 ]
  store i32 %v3_8a10, i32* %r3.global-to-local, align 4
  %v9_8c7c = icmp eq i32 %v3_8a10, %v1_8c7c
  store i1 %v9_8c7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8c7c, label %dec_label_pc_8e88, label %dec_label_pc_8c84

dec_label_pc_8c84:                                ; preds = %dec_label_pc_8e60, %dec_label_pc_8c78
  %v1_8c88 = phi i32 [ %v1_8e80, %dec_label_pc_8e60 ], [ %v1_8c7c, %dec_label_pc_8c78 ]
  store i32 %v3_8a14, i32* %ip.global-to-local, align 4
  %v9_8c88 = icmp eq i32 %v3_8a14, %v1_8c88
  store i1 %v9_8c88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8c88, label %dec_label_pc_8e9c, label %dec_label_pc_8c90

dec_label_pc_8c90:                                ; preds = %dec_label_pc_8e88, %dec_label_pc_8c84
  store i32 %v1_8a08, i32* @lr, align 4
  store i1 %v2_8ea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8ea4, label %dec_label_pc_8eb8, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_8c90
  %v1_8c98 = load i32, i32* @r5, align 4
  %v2_8c98 = add i32 %v1_8c98, 16
  %v3_8c98 = inttoptr i32 %v2_8c98 to i32*
  %v4_8c98 = load i32, i32* %v3_8c98, align 4
  store i32 %v4_8c98, i32* %r3.global-to-local, align 4
  %v2_8c9c = load i32, i32* @r6, align 4
  %v3_8c9c = add i32 %v2_8c9c, 16
  %v4_8c9c = inttoptr i32 %v3_8c9c to i32*
  store i32 %v4_8c98, i32* %v4_8c9c, align 4
  br label %dec_label_pc_8ca4

dec_label_pc_8ca4:                                ; preds = %bb81, %.thread11, %dec_label_pc_8eb8
  %v0_8ca4 = call i32 @function_d3a8()
  store i32 %v0_8ca4, i32* %r0.global-to-local, align 4
  store i32 %v0_8ca4, i32* %stack_var_-48, align 4
  %v0_8cac = call i32 @function_d3a8()
  store i32 %v0_8cac, i32* %r0.global-to-local, align 4
  store i32 %v0_8cac, i32* %stack_var_-52, align 4
  %v0_8cb4 = call i32 @function_d3a8()
  store i32 %v2_8cb8, i32* %r1.global-to-local, align 4
  store i32 %v0_8cb4, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8cc4 = load i32, i32* @r7, align 4
  store i32 %v0_8cc4, i32* %r0.global-to-local, align 4
  %v3_8cc8 = call i32 @function_f83c(i32 %v0_8cc4, i32 %v2_8cb8, i32 4)
  %v0_8ccc = load i32, i32* @r7, align 4
  %v1_8ccc = add i32 %v0_8ccc, 6
  store i32 %v1_8ccc, i32* %r0.global-to-local, align 4
  store i32 %v2_8cd0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8cd8 = call i32 @function_f83c(i32 %v1_8ccc, i32 %v2_8cd0, i32 4)
  %v0_8cdc = load i32, i32* @r7, align 4
  %v1_8cdc = add i32 %v0_8cdc, 4
  store i32 %v1_8cdc, i32* %r0.global-to-local, align 4
  store i32 %v2_8ce0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8ce8 = call i32 @function_f83c(i32 %v1_8cdc, i32 %v2_8ce0, i32 2)
  store i32 %v2_8cec, i32* %r1.global-to-local, align 4
  %v0_8cf0 = load i32, i32* @r7, align 4
  %v1_8cf0 = add i32 %v0_8cf0, 10
  store i32 %v1_8cf0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8cf8 = call i32 @function_f83c(i32 %v1_8cf0, i32 %v2_8cec, i32 2)
  store i32 %v3_8cf8, i32* %r0.global-to-local, align 4
  store i32 %v1_8964, i32* %r1.global-to-local, align 4
  store i1 %v2_8d00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8d00, label %dec_label_pc_8d08, label %dec_label_pc_8ec4

dec_label_pc_8d08:                                ; preds = %dec_label_pc_8ca4, %dec_label_pc_8ec4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8d0c = load i32, i32* @r5, align 4
  %v3_8d0c = add i32 %v2_8d0c, 10
  %v4_8d0c = inttoptr i32 %v3_8d0c to i16*
  store i16 0, i16* %v4_8d0c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8d14 = load i32, i32* @r5, align 4
  store i32 %v0_8d14, i32* @r0, align 4
  %v2_8d18 = call i32 @function_bf78(i32 %v0_8d14, i32 20)
  %v3_8d18 = trunc i32 %v2_8d18 to i16
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_8d20 = load i32, i32* @r5, align 4
  %v4_8d20 = add i32 %v3_8d20, 10
  %v5_8d20 = inttoptr i32 %v4_8d20 to i16*
  store i16 %v3_8d18, i16* %v5_8d20, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8d28 = load i32, i32* %ip.global-to-local, align 4
  %v1_8d28 = trunc i32 %v0_8d28 to i16
  %v2_8d28 = load i32, i32* @r6, align 4
  %v3_8d28 = add i32 %v2_8d28, 10
  %v4_8d28 = inttoptr i32 %v3_8d28 to i16*
  store i16 %v1_8d28, i16* %v4_8d28, align 2
  %v0_8d2c = load i32, i32* @r6, align 4
  store i32 %v0_8d2c, i32* @r0, align 4
  %v2_8d30 = call i32 @function_bf78(i32 %v0_8d2c, i32 20)
  %v3_8d30 = trunc i32 %v2_8d30 to i16
  store i32 %v2_8d30, i32* %r0.global-to-local, align 4
  %v3_8d34 = load i32, i32* @r6, align 4
  %v4_8d34 = add i32 %v3_8d34, 10
  %v5_8d34 = inttoptr i32 %v4_8d34 to i16*
  store i16 %v3_8d30, i16* %v5_8d34, align 2
  %v2_8d3c = load i32, i32* @r8, align 4
  %v3_8d3c = add i32 %v2_8d3c, 6
  %v4_8d3c = inttoptr i32 %v3_8d3c to i16*
  store i16 0, i16* %v4_8d3c, align 2
  %v0_8d40 = load i32, i32* @r8, align 4
  store i32 %v0_8d40, i32* @r1, align 4
  %v1_8d44 = add i32 %v0_8d40, 4
  %v2_8d44 = inttoptr i32 %v1_8d44 to i16*
  %v3_8d44 = load i16, i16* %v2_8d44, align 2
  %v4_8d44 = zext i16 %v3_8d44 to i32
  store i32 %v4_8d44, i32* %r2.global-to-local, align 4
  %v0_8d48 = load i32, i32* @fp, align 4
  store i32 %v0_8d48, i32* %r3.global-to-local, align 4
  %v0_8d4c = load i32, i32* @r6, align 4
  store i32 %v0_8d4c, i32* %r0.global-to-local, align 4
  %v4_8d50 = call i32 @function_bfc8(i32 %v0_8d4c, i32 %v0_8d40, i32 %v4_8d44, i32 %v0_8d48)
  %v5_8d50 = trunc i32 %v4_8d50 to i16
  store i32 %v4_8d50, i32* %r0.global-to-local, align 4
  %v3_8d54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8d54, i32* %r2.global-to-local, align 4
  %v3_8d58 = mul i32 %v3_8d54, 32
  store i32 %v3_8d58, i32* %r3.global-to-local, align 4
  %v0_8d5c = load i32, i32* @r5, align 4
  %v1_8d5c = add i32 %v0_8d5c, 16
  %v2_8d5c = inttoptr i32 %v1_8d5c to i32*
  %v3_8d5c = load i32, i32* %v2_8d5c, align 4
  %v5_8d60 = mul i32 %v3_8d54, 24
  store i32 %v5_8d60, i32* %r3.global-to-local, align 4
  %v1_8d64 = load i32, i32* @sl, align 4
  %v2_8d64 = add i32 %v1_8d64, %v5_8d60
  store i32 %v2_8d64, i32* @lr, align 4
  %v2_8d68 = add i32 %v2_8d64, 4
  %v3_8d68 = inttoptr i32 %v2_8d68 to i32*
  store i32 %v3_8d5c, i32* %v3_8d68, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8d74 = load i32, i32* @r8, align 4
  %v4_8d74 = add i32 %v3_8d74, 6
  %v5_8d74 = inttoptr i32 %v4_8d74 to i16*
  store i16 %v5_8d50, i16* %v5_8d74, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8d7c = load i32, i32* %r1.global-to-local, align 4
  %v1_8d7c = trunc i32 %v0_8d7c to i16
  %v2_8d7c = load i32, i32* %r3.global-to-local, align 4
  %v3_8d7c = load i32, i32* @sl, align 4
  %v4_8d7c = add i32 %v3_8d7c, %v2_8d7c
  %v5_8d7c = inttoptr i32 %v4_8d7c to i16*
  store i16 %v1_8d7c, i16* %v5_8d7c, align 2
  %v0_8d80 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d80 = trunc i32 %v0_8d80 to i16
  %v2_8d80 = load i32, i32* @lr, align 4
  %v3_8d80 = add i32 %v2_8d80, 2
  %v4_8d80 = inttoptr i32 %v3_8d80 to i16*
  store i16 %v1_8d80, i16* %v4_8d80, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8d88 = load i32, i32* @r5, align 4
  store i32 %v0_8d88, i32* %r1.global-to-local, align 4
  store i32 %v3_89bc, i32* %r0.global-to-local, align 4
  %v0_8d90 = load i32, i32* @sb, align 4
  store i32 %v0_8d90, i32* %r2.global-to-local, align 4
  %v0_8d94 = load i32, i32* @lr, align 4
  %v0_8d98 = load i32, i32* %ip.global-to-local, align 4
  %v6_8d9c = call i32 @function_1093c(i32 %v3_89bc, i32 %v0_8d88, i32 %v0_8d90, i32 16384, i32 %v0_8d94, i32 %v0_8d98)
  %v3_8da0 = load i32, i32* %stack_var_-44, align 4
  %v1_8da4 = add i32 %v3_8da0, 1
  store i32 %v1_8da4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_8dac = icmp eq i32 %v1_8da4, %arg2
  store i1 %v9_8dac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8da4, i32* %stack_var_-44, align 4
  %v6_8db4 = icmp slt i32 %v1_8da4, %arg2
  br i1 %v6_8db4, label %dec_label_pc_8db8, label %dec_label_pc_8ee4

dec_label_pc_8db8:                                ; preds = %dec_label_pc_8d08, %dec_label_pc_8c44
  %v1_8dcc = phi i32 [ %v1_8da4, %dec_label_pc_8d08 ], [ 0, %dec_label_pc_8c44 ]
  %v5_8dbc = mul i32 %v1_8dcc, 24
  %v1_8dc0 = load i32, i32* @sl, align 4
  %v2_8dc0 = add i32 %v1_8dc0, %v5_8dbc
  store i32 %v2_8dc0, i32* %r3.global-to-local, align 4
  store i32 %v2_8878, i32* %lr.global-to-local, align 4
  %v1_8dc8 = add i32 %v2_8dc0, 20
  %v2_8dc8 = inttoptr i32 %v1_8dc8 to i8*
  %v3_8dc8 = load i8, i8* %v2_8dc8, align 1
  %v4_8dc8 = zext i8 %v3_8dc8 to i32
  store i32 %v4_8dc8, i32* %r2.global-to-local, align 4
  %v4_8dcc = mul i32 %v1_8dcc, 4
  %v5_8dcc = add i32 %v4_8dcc, %v2_8878
  %v6_8dcc = inttoptr i32 %v5_8dcc to i32*
  %v7_8dcc = load i32, i32* %v6_8dcc, align 4
  store i32 %v7_8dcc, i32* @r5, align 4
  %v2_8dd0 = icmp ugt i8 %v3_8dc8, 30
  %v7_8dd0 = icmp eq i8 %v3_8dc8, 31
  store i1 %v7_8dd0, i1* %cpsr_z.global-to-local, align 1
  %v1_8dd4 = add i32 %v7_8dcc, 24
  store i32 %v1_8dd4, i32* @r7, align 4
  %v1_8dd8 = add i32 %v7_8dcc, 38
  store i32 %v1_8dd8, i32* @r6, align 4
  %v1_8ddc = add i32 %v7_8dcc, 58
  store i32 %v1_8ddc, i32* @r8, align 4
  %v2_8de0 = xor i1 %v7_8dd0, true
  %v3_8de0 = and i1 %v2_8dd0, %v2_8de0
  br i1 %v3_8de0, label %dec_label_pc_8c58, label %dec_label_pc_8de4

dec_label_pc_8de4:                                ; preds = %dec_label_pc_8db8
  %v1_8de4 = add i32 %v2_8dc0, 16
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r4.global-to-local, align 4
  %v0_8de8 = call i32 @function_d3a8()
  store i32 %v0_8de8, i32* %r0.global-to-local, align 4
  %v3_8dec = load i32, i32* %stack_var_-44, align 4
  %v5_8df4 = mul i32 %v3_8dec, 24
  %v1_8df8 = and i32 %v3_8de4, 16711680
  store i32 %v1_8df8, i32* %ip.global-to-local, align 4
  %v3_8dfc = udiv i32 %v3_8de4, 16777216
  %v4_8e00 = udiv i32 %v1_8df8, 256
  %v5_8e00 = or i32 %v4_8e00, %v3_8dfc
  store i32 %v5_8e00, i32* %r2.global-to-local, align 4
  %v1_8e04 = load i32, i32* @sl, align 4
  %v2_8e04 = add i32 %v1_8e04, %v5_8df4
  store i32 %v2_8e04, i32* %r1.global-to-local, align 4
  %v1_8e08 = and i32 %v3_8de4, 65280
  store i32 %v1_8e08, i32* %r3.global-to-local, align 4
  %v1_8e0c = add i32 %v2_8e04, 20
  %v2_8e0c = inttoptr i32 %v1_8e0c to i8*
  %v3_8e0c = load i8, i8* %v2_8e0c, align 1
  %v4_8e0c = zext i8 %v3_8e0c to i32
  store i32 %v4_8e0c, i32* %ip.global-to-local, align 4
  %v5_8e14 = call i32 @llvm.bswap.i32(i32 %v3_8de4)
  %v7_8e18 = lshr i32 %v0_8de8, %v4_8e0c
  %v8_8e18 = add i32 %v7_8e18, %v5_8e14
  store i32 %v8_8e18, i32* %r2.global-to-local, align 4
  %v1_8e1c = and i32 %v8_8e18, 16711680
  store i32 %v1_8e1c, i32* %r0.global-to-local, align 4
  store i32 %v6_8998, i32* %r1.global-to-local, align 4
  %v5_8e34 = call i32 @llvm.bswap.i32(i32 %v8_8e18)
  store i32 %v5_8e34, i32* %r3.global-to-local, align 4
  store i1 %v7_8c5c, i1* %cpsr_z.global-to-local, align 1
  %v1_8e3c = load i32, i32* @r5, align 4
  %v2_8e3c = add i32 %v1_8e3c, 16
  %v3_8e3c = inttoptr i32 %v2_8e3c to i32*
  store i32 %v5_8e34, i32* %v3_8e3c, align 4
  br i1 %v2_8c5c, label %dec_label_pc_8e44, label %dec_label_pc_8c64

dec_label_pc_8e44:                                ; preds = %dec_label_pc_8de4, %dec_label_pc_8c58
  %v0_8e44 = call i32 @function_d3a8()
  store i32 %v0_8e44, i32* %r0.global-to-local, align 4
  store i32 %v3_8a0c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8e54, i1* %cpsr_z.global-to-local, align 1
  %v1_8e58 = load i32, i32* @r5, align 4
  %v2_8e58 = add i32 %v1_8e58, 12
  %v3_8e58 = inttoptr i32 %v2_8e58 to i32*
  store i32 %v0_8e44, i32* %v3_8e58, align 4
  br i1 %v3_8e54, label %dec_label_pc_8e60, label %dec_label_pc_8e44.dec_label_pc_8c78_crit_edge

dec_label_pc_8e44.dec_label_pc_8c78_crit_edge:    ; preds = %dec_label_pc_8e44
  %v1_8c7c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8e60:                                ; preds = %dec_label_pc_8e44, %dec_label_pc_8c64
  %v0_8e60 = call i32 @function_d3a8()
  %v3_8e68 = urem i32 %v0_8e60, 65536
  store i32 %v3_8e68, i32* %r0.global-to-local, align 4
  %v1_8e70 = sub nsw i32 999, %v3_8e68
  store i32 %v1_8e70, i32* %r3.global-to-local, align 4
  %v1_8e74 = trunc i32 %v0_8e60 to i16
  %v2_8e74 = load i32, i32* @r5, align 4
  %v3_8e74 = add i32 %v2_8e74, 4
  %v4_8e74 = inttoptr i32 %v3_8e74 to i16*
  store i16 %v1_8e74, i16* %v4_8e74, align 2
  %v0_8e78 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e78 = trunc i32 %v0_8e78 to i16
  %v2_8e78 = load i32, i32* @r6, align 4
  %v3_8e78 = add i32 %v2_8e78, 4
  %v4_8e78 = inttoptr i32 %v3_8e78 to i16*
  store i16 %v1_8e78, i16* %v4_8e78, align 2
  store i32 %v3_8a10, i32* %r3.global-to-local, align 4
  %v1_8e80 = load i32, i32* @r4, align 4
  %v9_8e80 = icmp eq i32 %v3_8a10, %v1_8e80
  store i1 %v9_8e80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8e80, label %dec_label_pc_8e88, label %dec_label_pc_8c84

dec_label_pc_8e88:                                ; preds = %dec_label_pc_8e60, %dec_label_pc_8c78
  %v0_8e88 = call i32 @function_d3a8()
  %v1_8e88 = trunc i32 %v0_8e88 to i16
  store i32 %v0_8e88, i32* %r0.global-to-local, align 4
  store i32 %v3_8a14, i32* %ip.global-to-local, align 4
  %v1_8e90 = load i32, i32* @r4, align 4
  %v9_8e90 = icmp eq i32 %v3_8a14, %v1_8e90
  store i1 %v9_8e90, i1* %cpsr_z.global-to-local, align 1
  %v3_8e94 = load i32, i32* @r5, align 4
  %v4_8e94 = add i32 %v3_8e94, 58
  %v5_8e94 = inttoptr i32 %v4_8e94 to i16*
  store i16 %v1_8e88, i16* %v5_8e94, align 2
  br i1 %v9_8e90, label %dec_label_pc_8e9c, label %dec_label_pc_8c90

dec_label_pc_8e9c:                                ; preds = %dec_label_pc_8e88, %dec_label_pc_8c84
  %v0_8e9c = call i32 @function_d3a8()
  %v1_8e9c = trunc i32 %v0_8e9c to i16
  store i32 %v0_8e9c, i32* %r0.global-to-local, align 4
  store i32 %v1_8a08, i32* @lr, align 4
  store i1 %v2_8ea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8ea4, label %.thread24, label %bb81

.thread24:                                        ; preds = %dec_label_pc_8e9c
  %v3_8eac25 = load i32, i32* @r8, align 4
  %v4_8eac26 = add i32 %v3_8eac25, 2
  %v5_8eac27 = inttoptr i32 %v4_8eac26 to i16*
  store i16 %v1_8e9c, i16* %v5_8eac27, align 2
  br label %dec_label_pc_8eb8

bb81:                                             ; preds = %dec_label_pc_8e9c
  %v1_8ea8 = load i32, i32* @r5, align 4
  %v2_8ea8 = add i32 %v1_8ea8, 16
  %v3_8ea8 = inttoptr i32 %v2_8ea8 to i32*
  %v4_8ea8 = load i32, i32* %v3_8ea8, align 4
  store i32 %v4_8ea8, i32* %r3.global-to-local, align 4
  %v3_8eac = load i32, i32* @r8, align 4
  %v4_8eac = add i32 %v3_8eac, 2
  %v5_8eac = inttoptr i32 %v4_8eac to i16*
  store i16 %v1_8e9c, i16* %v5_8eac, align 2
  %v1_8eb0 = load i32, i32* %r3.global-to-local, align 4
  %v2_8eb0 = load i32, i32* @r6, align 4
  %v3_8eb0 = add i32 %v2_8eb0, 16
  %v4_8eb0 = inttoptr i32 %v3_8eb0 to i32*
  store i32 %v1_8eb0, i32* %v4_8eb0, align 4
  br label %dec_label_pc_8ca4

dec_label_pc_8eb8:                                ; preds = %.thread24, %dec_label_pc_8c90
  %v0_8eb8 = call i32 @function_d3a8()
  store i32 %v0_8eb8, i32* %r0.global-to-local, align 4
  %v1_8ebc = load i32, i32* @r6, align 4
  %v2_8ebc = add i32 %v1_8ebc, 16
  %v3_8ebc = inttoptr i32 %v2_8ebc to i32*
  store i32 %v0_8eb8, i32* %v3_8ebc, align 4
  br label %dec_label_pc_8ca4

dec_label_pc_8ec4:                                ; preds = %dec_label_pc_8ca4
  %v0_8ec4 = load i32, i32* @r8, align 4
  %v1_8ec4 = add i32 %v0_8ec4, 8
  store i32 %v1_8ec4, i32* @r4, align 4
  store i32 %v1_8ec4, i32* %r0.global-to-local, align 4
  store i32 %v6_8944, i32* %r1.global-to-local, align 4
  %v2_8ed0 = call i32 @function_d46c(i32 %v1_8ec4, i32 %v6_8944)
  store i32 %v2_8ed0, i32* %r0.global-to-local, align 4
  store i32 %v6_8944, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8edc = load i32, i32* @r4, align 4
  %v4_8edc = add i32 %v2_8edc, %v6_8944
  %v5_8edc = inttoptr i32 %v4_8edc to i8*
  store i8 0, i8* %v5_8edc, align 1
  br label %dec_label_pc_8d08

dec_label_pc_8ee4:                                ; preds = %dec_label_pc_8d08, %dec_label_pc_8c30
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_8ee8 = call i32 @function_fe58(i32* null)
  store i32 %v2_8ee8, i32* %r0.global-to-local, align 4
  store i32 %v2_89a8, i32* %ip.global-to-local, align 4
  %v9_8ef0 = icmp eq i32 %v2_89a8, %v2_8ee8
  store i1 %v9_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v6_8ef4 = icmp slt i32 %v2_89a8, %v2_8ee8
  br i1 %v6_8ef4, label %dec_label_pc_8ef8, label %dec_label_pc_8c30

dec_label_pc_8ef8:                                ; preds = %dec_label_pc_8ee4, %dec_label_pc_884c, %dec_label_pc_8f04
  %v1_8f00 = phi i32 [ %v3_89bc, %dec_label_pc_884c ], [ %v1_8f08, %dec_label_pc_8f04 ], [ %v2_8ee8, %dec_label_pc_8ee4 ]
  store i32 %v3_884c, i32* %r4.global-to-local, align 4
  store i32 %v24_884c, i32* %fp.global-to-local, align 4
  store i32 %v27_884c, i32* %lr.global-to-local, align 4
  ret i32 %v1_8f00

dec_label_pc_8f04:                                ; preds = %dec_label_pc_89cc
  store i32 %v3_89bc, i32* %r0.global-to-local, align 4
  %v1_8f08 = call i32 @function_101d8(i32 %v3_89bc)
  store i32 %v1_8f08, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ef8

; uselistorder directives
  uselistorder i32 %v1_8f08, { 1, 0 }
  uselistorder i16 %v1_8e9c, { 1, 0 }
  uselistorder i32 %v0_8e9c, { 1, 0 }
  uselistorder i32 %v0_8e88, { 1, 0 }
  uselistorder i32 %v1_8e80, { 1, 0 }
  uselistorder i32 %v3_8e68, { 1, 0 }
  uselistorder i32 %v0_8e60, { 1, 0 }
  uselistorder i32 %v5_8e34, { 1, 0 }
  uselistorder i32 %v3_8de4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v7_8dcc, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8da4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_8d54, { 1, 0, 2 }
  uselistorder i32 %v4_8d50, { 1, 0 }
  uselistorder i32 %v2_8d30, { 1, 0 }
  uselistorder i1 %v2_8ea4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_8e54, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8c5c, { 2, 1, 0 }
  uselistorder i32 %v0_8bdc, { 1, 0, 2 }
  uselistorder i32 %v0_8af4, { 1, 2, 0 }
  uselistorder i32 %tmp68, { 1, 0 }
  uselistorder i32 %v1_8a48, { 2, 0, 1 }
  uselistorder i32 %v3_8a40, { 2, 1, 0 }
  uselistorder i1 %v2_8a18, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8a0c, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8a08, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v0_8a04, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_8a00, { 1, 0, 2, 3 }
  uselistorder i32 %v3_89fc, { 1, 0 }
  uselistorder i1 %v7_89ec, { 1, 0 }
  uselistorder i1 %v7_89c0, { 1, 0 }
  uselistorder i32 %v3_89bc, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_89a8, { 2, 1, 0 }
  uselistorder i32 %v6_8998, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_8964, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8944, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v6_8910, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_88f8, { 1, 2, 0 }
  uselistorder i32 %v1_88d4, { 3, 2, 1, 0 }
  uselistorder i32 %v6_88cc, { 1, 0 }
  uselistorder i32 %v6_8890, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_8878, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 19, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 15, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 7, 9, 8, 6, 10, 11, 13, 14, 12, 16, 15, 18, 17, 19, 5, 20, 21, 23, 22, 24, 25, 26, 27, 29, 28, 4, 30, 31, 32, 35, 33, 34, 3, 2, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 13, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 %arg2, { 6, 5, 4, 1, 0, 3, 2, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_8ef8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d08, { 1, 0 }
  uselistorder label %dec_label_pc_8ca4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8c30, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_8f14(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8f14:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_8f14 = load i32, i32* @r4, align 4
  %v24_8f14 = load i32, i32* @fp, align 4
  %v27_8f14 = load i32, i32* @lr, align 4
  store i32 0, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_8f40 = call i32 @function_11528(i32 %arg2, i32 4)
  %v0_8f44 = load i32, i32* @r4, align 4
  store i32 %v0_8f44, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8f50 = load i32, i32* @sb, align 4
  store i32 %v0_8f50, i32* %r3.global-to-local, align 4
  %v0_8f54 = load i32, i32* @r5, align 4
  %v5_8f58 = inttoptr i32 %v0_8f44 to i32*
  %v6_8f58 = call i32 @function_8258(i32 %v0_8f54, i32* %v5_8f58, i32 2, i32 %v0_8f50, i32 %v2_8f40)
  %v1_8f64 = urem i32 %v6_8f58, 256
  store i32 %v1_8f64, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8f70 = load i32, i32* @r4, align 4
  store i32 %v0_8f70, i32* %r1.global-to-local, align 4
  %v0_8f74 = load i32, i32* @r5, align 4
  %v5_8f78 = trunc i32 %v6_8f58 to i8
  %v6_8f7c = inttoptr i32 %v0_8f70 to i32*
  %v7_8f7c = call i32 @function_8258(i32 %v0_8f74, i32* %v6_8f7c, i32 3, i32 65535, i32 %v6_8f58)
  %v0_8f80 = load i32, i32* @r4, align 4
  store i32 %v0_8f80, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_8f90 = load i32, i32* @r5, align 4
  %v5_8f94 = inttoptr i32 %v0_8f80 to i32*
  %v6_8f94 = call i32 @function_8258(i32 %v0_8f90, i32* %v5_8f94, i32 4, i32 64, i32 %v7_8f7c)
  %v1_8f9c = urem i32 %v6_8f94, 256
  store i32 %v1_8f9c, i32* %ip.global-to-local, align 4
  %v0_8fa0 = load i32, i32* @r4, align 4
  store i32 %v0_8fa0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8fac = load i32, i32* @r5, align 4
  %v6_8fb4 = inttoptr i32 %v0_8fa0 to i32*
  %v7_8fb4 = call i32 @function_8258(i32 %v0_8fac, i32* %v6_8fb4, i32 5, i32 1, i32 %v1_8f9c)
  %v1_8fc0 = urem i32 %v7_8fb4, 256
  store i32 %v1_8fc0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8fcc = load i32, i32* @r4, align 4
  store i32 %v0_8fcc, i32* %r1.global-to-local, align 4
  %v0_8fd0 = load i32, i32* @r5, align 4
  %v5_8fd8 = inttoptr i32 %v0_8fcc to i32*
  %v6_8fd8 = call i32 @function_8258(i32 %v0_8fd0, i32* %v5_8fd8, i32 6, i32 65535, i32 %v1_8fc0)
  %v0_8fe0 = load i32, i32* @r4, align 4
  store i32 %v0_8fe0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8fd8, i32* %fp.global-to-local, align 4
  %v0_8ff0 = load i32, i32* @r5, align 4
  %v5_8ff4 = inttoptr i32 %v0_8fe0 to i32*
  %v6_8ff4 = call i32 @function_8258(i32 %v0_8ff0, i32* %v5_8ff4, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8ff8 = load i32, i32* @r4, align 4
  store i32 %v0_8ff8, i32* %r1.global-to-local, align 4
  %v0_8ffc = load i32, i32* @sb, align 4
  store i32 %v0_8ffc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8ff4, i32* @r8, align 4
  %v0_9008 = load i32, i32* @r5, align 4
  %v5_900c = inttoptr i32 %v0_8ff8 to i32*
  %v6_900c = call i32 @function_8258(i32 %v0_9008, i32* %v5_900c, i32 %v0_8ffc, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_901c = load i32, i32* @r4, align 4
  store i32 %v0_901c, i32* %r1.global-to-local, align 4
  %v0_9020 = load i32, i32* @r5, align 4
  %v5_9024 = inttoptr i32 %v0_901c to i32*
  %v6_9024 = call i32 @function_8258(i32 %v0_9020, i32* %v5_9024, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_902c = urem i32 %v6_9024, 256
  store i32 %v1_902c, i32* %ip.global-to-local, align 4
  %v0_9030 = load i32, i32* @r4, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_9038 = load i32, i32* @sb, align 4
  store i32 %v0_9038, i32* %r3.global-to-local, align 4
  %v0_903c = load i32, i32* @r5, align 4
  %v5_9044 = inttoptr i32 %v0_9030 to i32*
  %v6_9044 = call i32 @function_8258(i32 %v0_903c, i32* %v5_9044, i32 18, i32 %v0_9038, i32 %v1_902c)
  %v0_904c = load i32, i32* @r4, align 4
  store i32 %v0_904c, i32* %r1.global-to-local, align 4
  %v2_9050 = load i32, i32* @global_var_1fbd0.42, align 4
  store i32 %v2_9050, i32* %r3.global-to-local, align 4
  store i32 %v6_9044, i32* @r7, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_905c = load i32, i32* @r5, align 4
  %v5_9060 = inttoptr i32 %v0_904c to i32*
  %v6_9060 = call i32 @function_8258(i32 %v0_905c, i32* %v5_9060, i32 19, i32 %v2_9050, i32 ptrtoint (i32* @0 to i32))
  %v0_9068 = load i32, i32* @sb, align 4
  %v1_906c = inttoptr i32 %v0_9068 to i32*
  %v2_906c = call i32 @function_fe58(i32* %v1_906c)
  %v1_9070 = load i32, i32* @r6, align 4
  %v2_9070 = add i32 %v1_9070, %v2_906c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9084 = call i32 @function_109c0(i32 2, i32 3, i32 6)
  %v7_9088 = icmp eq i32 %v3_9084, -1
  store i1 %v7_9088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9088, label %dec_label_pc_9558, label %dec_label_pc_9094

dec_label_pc_9094:                                ; preds = %dec_label_pc_8f14
  store i32 1, i32* %stack_var_-44, align 4
  %v6_909c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_909c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_90a4 = load i32, i32* @sb, align 4
  store i32 %v0_90a4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_90b0 = call i32 @function_1097c(i32 %v3_9084, i32 %v0_90a4, i32 3, i32 %v6_909c, i32 4)
  %v7_90b4 = icmp eq i32 %v5_90b0, -1
  store i1 %v7_90b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90b4, label %dec_label_pc_9564, label %dec_label_pc_90bc

dec_label_pc_90bc:                                ; preds = %dec_label_pc_9094
  %v0_90bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_90d0 = load i32, i32* @r8, align 4
  %v3_90d4 = mul i32 %v7_8f7c, 65536
  store i32 %v3_90d4, i32* %r1.global-to-local, align 4
  %v0_90d8 = load i32, i32* @r7, align 4
  %v1_90d8 = urem i32 %v0_90d8, 256
  store i32 %v1_90d8, i32* @r7, align 4
  %v3_90dc = urem i32 %v0_90bc, 65536
  store i32 %v3_90dc, i32* %r3.global-to-local, align 4
  %v3_90e0 = urem i32 %v0_90d0, 65536
  store i32 %v3_90e0, i32* %ip.global-to-local, align 4
  %v2_90e4 = icmp eq i32 %arg2, 0
  store i1 %v2_90e4, i1* %cpsr_z.global-to-local, align 1
  %v0_90f4 = load i32, i32* @sb, align 4
  store i32 %v0_90f4, i32* %stack_var_-44, align 4
  %v3_90f8 = urem i32 %v7_8f7c, 65536
  store i32 %v3_90f8, i32* @fp, align 4
  br i1 %v2_90e4, label %dec_label_pc_92ec.preheader, label %dec_label_pc_9108

dec_label_pc_9108:                                ; preds = %dec_label_pc_90bc
  %v3_90d0 = mul i32 %v0_90d0, 65536
  %v3_90bc = mul i32 %v0_90bc, 65536
  %v3_910c = mul i32 %v6_900c, 65536
  %v1_9110 = add i32 %v3_910c, 3407872
  %tmp68 = udiv i32 %v1_9110, 256
  %v3_911c = and i32 %tmp68, 65280
  %v7_8f7c.not = or i32 %v7_8f7c, -65536
  %v1_9120 = xor i32 %v7_8f7c.not, 65535
  %v4_9124 = udiv i32 %v1_9110, 16777216
  %v5_9124 = or i32 %v3_911c, %v4_9124
  store i32 %v3_90d4, i32* %r3.global-to-local, align 4
  %tmp69 = mul i32 %v7_8f7c, 256
  %v3_913c = and i32 %tmp69, 65280
  %tmp70 = mul nsw i32 %v1_9120, 256
  %v3_9140 = and i32 %tmp70, 65280
  %tmp71 = udiv i32 %v7_8f7c, 256
  %v4_9144 = urem i32 %tmp71, 256
  %v5_9144 = or i32 %v4_9144, %v3_913c
  %tmp72 = udiv i32 %v1_9120, 256
  %v4_914c = urem i32 %tmp72, 256
  %v5_914c = or i32 %v4_914c, %v3_9140
  store i32 %v5_914c, i32* @r6, align 4
  store i32 %v3_90bc, i32* %r1.global-to-local, align 4
  store i32 %v3_90d0, i32* %r2.global-to-local, align 4
  %v1_9160 = add i32 %v3_910c, 524288
  %tmp73 = mul i32 %v0_90bc, 256
  %v3_9164 = and i32 %tmp73, 65280
  %v1_9168 = add i32 %v3_910c, 1835008
  store i32 %v1_9168, i32* @r5, align 4
  %tmp74 = mul i32 %v0_90d0, 256
  %v3_916c = and i32 %tmp74, 65280
  %v3_9174 = udiv i32 %v1_9168, 256
  %tmp75 = udiv i32 %v0_90bc, 256
  %v4_9178 = urem i32 %tmp75, 256
  %v5_9178 = or i32 %v4_9178, %v3_9164
  %tmp76 = udiv i32 %v0_90d0, 256
  %v4_917c = urem i32 %tmp76, 256
  %v5_917c = or i32 %v4_917c, %v3_916c
  store i32 %v5_917c, i32* %ip.global-to-local, align 4
  %v1_9180 = and i32 %v3_9174, 65280
  %tmp77 = udiv i32 %v1_9160, 256
  %v3_9184 = and i32 %tmp77, 65280
  store i32 %v3_9184, i32* @lr, align 4
  %v4_9198 = udiv i32 %v1_9160, 16777216
  %v5_9198 = or i32 %v3_9184, %v4_9198
  store i32 %v5_9198, i32* @r7, align 4
  %v4_919c = udiv i32 %v1_9168, 16777216
  %v5_919c = or i32 %v1_9180, %v4_919c
  store i32 %v5_919c, i32* @r8, align 4
  store i32 %v0_90f4, i32* @r4, align 4
  %v1_9200 = trunc i32 %v6_8f94 to i8
  %sext = mul nuw i32 %v5_9124, 65536
  %v4_9208 = sdiv i32 %sext, 65536
  %sext8 = mul nuw i32 %v5_9144, 65536
  %v4_920c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_914c, 65536
  %v4_9274 = sdiv i32 %sext9, 65536
  %v2_92a4 = icmp eq i32 %v1_90d8, 0
  %sext10 = mul nuw i32 %v5_9178, 65536
  %v4_92c8 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_917c, 65536
  %v4_92d0 = sdiv i32 %sext11, 65536
  %extract.t = trunc i32 %v4_9208 to i16
  br label %dec_label_pc_91a4

dec_label_pc_91a4:                                ; preds = %bb82, %dec_label_pc_9108
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_91b0 = call i32 @function_11528(i32 1510, i32 4)
  store i32 %v2_8f40, i32* %ip.global-to-local, align 4
  %v2_91bc = load i32, i32* @r4, align 4
  %v5_91bc = mul i32 %v2_91bc, 4
  %v6_91bc = add i32 %v5_91bc, %v2_8f40
  %v7_91bc = inttoptr i32 %v6_91bc to i32*
  store i32 %v2_91b0, i32* %v7_91bc, align 4
  %v3_91c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_91c0, i32* %r3.global-to-local, align 4
  %v0_91c4 = load i32, i32* %ip.global-to-local, align 4
  %v4_91c4 = mul i32 %v3_91c0, 4
  %v5_91c4 = add i32 %v0_91c4, %v4_91c4
  %v6_91c4 = inttoptr i32 %v5_91c4 to i32*
  %v7_91c4 = load i32, i32* %v6_91c4, align 4
  store i32 %v7_91c4, i32* %r4.global-to-local, align 4
  %v1_91c8 = inttoptr i32 %v7_91c4 to i8*
  %v2_91c8 = load i8, i8* %v1_91c8, align 1
  %tmp = urem i8 %v2_91c8, 16
  %v1_91cc = zext i8 %tmp to i32
  %v1_91d0 = or i32 %v1_91cc, 64
  store i32 %v1_91d0, i32* %r2.global-to-local, align 4
  %v1_91d4 = trunc i32 %v1_91d0 to i8
  store i8 %v1_91d4, i8* %v1_91c8, align 1
  %v0_91d8 = load i32, i32* %r3.global-to-local, align 4
  %v5_91dc = mul i32 %v0_91d8, 24
  store i32 %v5_91dc, i32* %r1.global-to-local, align 4
  %v0_91e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_91e0 = inttoptr i32 %v0_91e0 to i8*
  %v2_91e0 = load i8, i8* %v1_91e0, align 1
  %v1_91e4 = and i8 %v2_91e0, -16
  %v1_91e8 = or i8 %v1_91e4, 5
  store i32 %v1_8fc0, i32* %lr.global-to-local, align 4
  store i8 %v1_91e8, i8* %v1_91e0, align 1
  store i32 %v6_8f58, i32* %r2.global-to-local, align 4
  %v2_91f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_91f8 = add i32 %v2_91f8, 1
  %v4_91f8 = inttoptr i32 %v3_91f8 to i8*
  store i8 %v5_8f78, i8* %v4_91f8, align 1
  store i32 %v1_8f9c, i32* %r3.global-to-local, align 4
  %v2_9200 = load i32, i32* %r4.global-to-local, align 4
  %v3_9200 = add i32 %v2_9200, 8
  %v4_9200 = inttoptr i32 %v3_9200 to i8*
  store i8 %v1_9200, i8* %v4_9200, align 1
  %v0_9204 = load i32, i32* %lr.global-to-local, align 4
  %v2_9204 = icmp eq i32 %v0_9204, 0
  store i1 %v2_9204, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_9208, i32* %ip.global-to-local, align 4
  store i32 %v4_920c, i32* %lr.global-to-local, align 4
  br i1 %v2_9204, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_91a4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9214 = load i32, i32* %r4.global-to-local, align 4
  %v4_9214 = add i32 %v3_9214, 6
  %v5_9214 = inttoptr i32 %v4_9214 to i16*
  store i16 64, i16* %v5_9214, align 2
  %v0_9218.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t27 = trunc i32 %v0_9218.pre to i16
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_91a4, %bb
  %v0_9218.off0 = phi i16 [ %extract.t, %dec_label_pc_91a4 ], [ %extract.t27, %bb ]
  %v2_9218 = load i32, i32* %r4.global-to-local, align 4
  %v3_9218 = add i32 %v2_9218, 2
  %v4_9218 = inttoptr i32 %v3_9218 to i16*
  store i16 %v0_9218.off0, i16* %v4_9218, align 2
  %v0_921c = load i32, i32* %r4.global-to-local, align 4
  %v1_921c = add i32 %v0_921c, 20
  store i32 %v1_921c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v3_9228 = add i32 %v0_921c, 9
  %v4_9228 = inttoptr i32 %v3_9228 to i8*
  store i8 47, i8* %v4_9228, align 1
  %v0_922c = load i32, i32* %lr.global-to-local, align 4
  %v1_922c = trunc i32 %v0_922c to i16
  %v2_922c = load i32, i32* %r4.global-to-local, align 4
  %v3_922c = add i32 %v2_922c, 4
  %v4_922c = inttoptr i32 %v3_922c to i16*
  store i16 %v1_922c, i16* %v4_922c, align 2
  %v0_9230 = load i32, i32* %ip.global-to-local, align 4
  %v1_9230 = trunc i32 %v0_9230 to i16
  %v2_9230 = load i32, i32* %r2.global-to-local, align 4
  %v3_9230 = add i32 %v2_9230, 2
  %v4_9230 = inttoptr i32 %v3_9230 to i16*
  store i16 %v1_9230, i16* %v4_9230, align 2
  store i32 %v6_9060, i32* %lr.global-to-local, align 4
  %v0_9238 = load i32, i32* %r4.global-to-local, align 4
  %v1_9238 = add i32 %v0_9238, 24
  %v2_9238 = inttoptr i32 %v1_9238 to i8*
  %v3_9238 = load i8, i8* %v2_9238, align 1
  %v4_9238 = zext i8 %v3_9238 to i32
  store i32 %v4_9238, i32* %r2.global-to-local, align 4
  %v2_923c = add i32 %v0_9238, 12
  %v3_923c = inttoptr i32 %v2_923c to i32*
  store i32 %v6_9060, i32* %v3_923c, align 4
  %v0_9240 = load i32, i32* %r2.global-to-local, align 4
  %v1_9240 = and i32 %v0_9240, -241
  %v1_9244 = or i32 %v1_9240, 64
  store i32 %v1_9244, i32* %r2.global-to-local, align 4
  %v0_9248 = load i32, i32* %r1.global-to-local, align 4
  %v1_9248 = load i32, i32* @sl, align 4
  %v2_9248 = add i32 %v1_9248, %v0_9248
  store i32 %v2_9248, i32* %r1.global-to-local, align 4
  %v1_924c = add i32 %v2_9248, 16
  %v2_924c = inttoptr i32 %v1_924c to i32*
  %v3_924c = load i32, i32* %v2_924c, align 4
  store i32 %v3_924c, i32* %r1.global-to-local, align 4
  %v1_9250 = trunc i32 %v1_9244 to i8
  %v2_9250 = load i32, i32* %r4.global-to-local, align 4
  %v3_9250 = add i32 %v2_9250, 24
  %v4_9250 = inttoptr i32 %v3_9250 to i8*
  store i8 %v1_9250, i8* %v4_9250, align 1
  %v0_9254 = load i32, i32* %r4.global-to-local, align 4
  %v1_9254 = add i32 %v0_9254, 24
  %v2_9254 = inttoptr i32 %v1_9254 to i8*
  %v3_9254 = load i8, i8* %v2_9254, align 1
  %v1_9258 = and i8 %v3_9254, -16
  %v1_925c = or i8 %v1_9258, 5
  store i8 %v1_925c, i8* %v2_9254, align 1
  %v0_9264 = load i32, i32* %r1.global-to-local, align 4
  %v1_9264 = load i32, i32* %r4.global-to-local, align 4
  %v2_9264 = add i32 %v1_9264, 16
  %v3_9264 = inttoptr i32 %v2_9264 to i32*
  store i32 %v0_9264, i32* %v3_9264, align 4
  store i32 %v6_8f58, i32* %r1.global-to-local, align 4
  %v0_926c = load i32, i32* %r4.global-to-local, align 4
  %v1_926c = add i32 %v0_926c, 24
  store i32 %v1_926c, i32* @r5, align 4
  %v3_9270 = add i32 %v0_926c, 25
  %v4_9270 = inttoptr i32 %v3_9270 to i8*
  store i8 %v5_8f78, i8* %v4_9270, align 1
  store i32 %v4_9274, i32* %r2.global-to-local, align 4
  %v0_9278 = load i32, i32* @r8, align 4
  %v1_9278 = trunc i32 %v0_9278 to i16
  %v2_9278 = load i32, i32* @r5, align 4
  %v3_9278 = add i32 %v2_9278, 2
  %v4_9278 = inttoptr i32 %v3_9278 to i16*
  store i16 %v1_9278, i16* %v4_9278, align 2
  %v0_927c = load i32, i32* %r2.global-to-local, align 4
  %v1_927c = trunc i32 %v0_927c to i16
  %v2_927c = load i32, i32* @r5, align 4
  %v3_927c = add i32 %v2_927c, 4
  %v4_927c = inttoptr i32 %v3_927c to i16*
  store i16 %v1_927c, i16* %v4_927c, align 2
  store i32 %v1_8f9c, i32* %r3.global-to-local, align 4
  %v0_9284 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9284, label %bb79, label %bb78

bb78:                                             ; preds = %.thread
  store i32 64, i32* %ip.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %.thread, %bb78
  %v2_9288 = load i32, i32* @r5, align 4
  %v3_9288 = add i32 %v2_9288, 8
  %v4_9288 = inttoptr i32 %v3_9288 to i8*
  store i8 %v1_9200, i8* %v4_9288, align 1
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9290 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9290, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9290 = load i32, i32* %ip.global-to-local, align 4
  %v2_9290 = trunc i32 %v1_9290 to i16
  %v3_9290 = load i32, i32* @r5, align 4
  %v4_9290 = add i32 %v3_9290, 6
  %v5_9290 = inttoptr i32 %v4_9290 to i16*
  store i16 %v2_9290, i16* %v5_9290, align 2
  %v0_9294.pre = load i32, i32* %r3.global-to-local, align 4
  %extract.t28 = trunc i32 %v0_9294.pre to i8
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9294.off0 = phi i8 [ 17, %bb79 ], [ %extract.t28, %bb80 ]
  %v2_9294 = load i32, i32* @r5, align 4
  %v3_9294 = add i32 %v2_9294, 9
  %v4_9294 = inttoptr i32 %v3_9294 to i8*
  store i8 %v0_9294.off0, i8* %v4_9294, align 1
  %v0_9298 = call i32 @function_d3a8()
  store i32 %v1_90d8, i32* @lr, align 4
  store i1 %v2_92a4, i1* %cpsr_z.global-to-local, align 1
  %v1_92a8 = sub i32 1023, %v0_9298
  store i32 %v1_92a8, i32* %r3.global-to-local, align 4
  br i1 %v2_92a4, label %.thread12, label %.thread13

.thread12:                                        ; preds = %bb81
  %v2_92b0 = load i32, i32* @r5, align 4
  %v3_92b0 = add i32 %v2_92b0, 16
  %v4_92b0 = inttoptr i32 %v3_92b0 to i32*
  store i32 %v1_92a8, i32* %v4_92b0, align 4
  br label %bb82

.thread13:                                        ; preds = %bb81
  %v1_92ac = load i32, i32* %r4.global-to-local, align 4
  %v2_92ac = add i32 %v1_92ac, 16
  %v3_92ac = inttoptr i32 %v2_92ac to i32*
  %v4_92ac = load i32, i32* %v3_92ac, align 4
  store i32 %v4_92ac, i32* %r3.global-to-local, align 4
  %v2_92b4 = load i32, i32* @r5, align 4
  %v3_92b4 = add i32 %v2_92b4, 16
  %v4_92b4 = inttoptr i32 %v3_92b4 to i32*
  store i32 %v4_92ac, i32* %v4_92b4, align 4
  br label %bb82

bb82:                                             ; preds = %.thread12, %.thread13
  %v1_92b8 = load i32, i32* @r5, align 4
  %v2_92b8 = add i32 %v1_92b8, 12
  %v3_92b8 = inttoptr i32 %v2_92b8 to i32*
  store i32 %v0_9298, i32* %v3_92b8, align 4
  %v3_92bc = load i32, i32* %stack_var_-44, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_92c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_92c4 = add i32 %v0_92c4, 44
  store i32 %v1_92c4, i32* @r6, align 4
  store i32 %v4_92c8, i32* %r2.global-to-local, align 4
  %v1_92cc = add i32 %v3_92bc, 1
  store i32 %v1_92cc, i32* @r4, align 4
  store i32 %v4_92d0, i32* %r3.global-to-local, align 4
  %v9_92d4 = icmp eq i32 %v1_92cc, %arg2
  store i1 %v9_92d4, i1* %cpsr_z.global-to-local, align 1
  %v0_92d8 = load i32, i32* @r7, align 4
  %v1_92d8 = trunc i32 %v0_92d8 to i16
  %v3_92d8 = add i32 %v0_92c4, 48
  %v4_92d8 = inttoptr i32 %v3_92d8 to i16*
  store i16 %v1_92d8, i16* %v4_92d8, align 2
  %v0_92dc = load i32, i32* %r2.global-to-local, align 4
  %v1_92dc = trunc i32 %v0_92dc to i16
  %v2_92dc = load i32, i32* @r6, align 4
  %v3_92dc = inttoptr i32 %v2_92dc to i16*
  store i16 %v1_92dc, i16* %v3_92dc, align 2
  %v0_92e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_92e0 = trunc i32 %v0_92e0 to i16
  %v2_92e0 = load i32, i32* @r6, align 4
  %v3_92e0 = add i32 %v2_92e0, 2
  %v4_92e0 = inttoptr i32 %v3_92e0 to i16*
  store i16 %v1_92e0, i16* %v4_92e0, align 2
  %v0_92e4 = load i32, i32* @r4, align 4
  store i32 %v0_92e4, i32* %stack_var_-44, align 4
  %v5_92e8 = icmp slt i32 %v1_92cc, %arg2
  br i1 %v5_92e8, label %dec_label_pc_91a4, label %dec_label_pc_92ec.preheader

dec_label_pc_92ec.preheader:                      ; preds = %bb82, %dec_label_pc_90bc
  %v1_9308 = add i32 %v6_900c, 8
  %v1_930c = add i32 %v6_900c, 52
  %v2_9318 = icmp eq i32 %v6_9060, -1
  %v7_9318 = icmp eq i32 %v6_9060, -1
  %v2_94fc = icmp eq i32 %v1_90d8, 0
  %v2_9518 = icmp eq i32 %v1_902c, 0
  br label %dec_label_pc_92ec

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92ec.preheader, %dec_label_pc_9544
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_90e4, label %dec_label_pc_9544, label %dec_label_pc_9300

dec_label_pc_9300:                                ; preds = %dec_label_pc_92ec
  store i32 %v6_900c, i32* %lr.global-to-local, align 4
  store i32 %v1_9308, i32* @sb, align 4
  store i32 %v1_930c, i32* @r8, align 4
  br label %dec_label_pc_9418

dec_label_pc_9314:                                ; preds = %dec_label_pc_9418
  store i32 %v6_9060, i32* %r2.global-to-local, align 4
  store i1 %v7_9318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9318, label %dec_label_pc_94a0, label %dec_label_pc_9320

dec_label_pc_9320:                                ; preds = %dec_label_pc_9440, %dec_label_pc_9314
  store i32 65535, i32* @r4, align 4
  %v0_9328 = load i32, i32* @fp, align 4
  %v9_9328 = icmp eq i32 %v0_9328, 65535
  store i1 %v9_9328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9328, label %dec_label_pc_94b8, label %dec_label_pc_9330

dec_label_pc_9330:                                ; preds = %dec_label_pc_94a0.dec_label_pc_9330_crit_edge, %dec_label_pc_9320
  %v1_9334 = phi i32 [ %v1_9334.pre, %dec_label_pc_94a0.dec_label_pc_9330_crit_edge ], [ 65535, %dec_label_pc_9320 ]
  store i32 %v3_90dc, i32* %r3.global-to-local, align 4
  %v9_9334 = icmp eq i32 %v3_90dc, %v1_9334
  store i1 %v9_9334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9334, label %dec_label_pc_94e0, label %dec_label_pc_933c

dec_label_pc_933c:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_9330
  %v1_9340 = phi i32 [ %v1_94d8, %dec_label_pc_94b8 ], [ %v1_9334, %dec_label_pc_9330 ]
  store i32 %v3_90e0, i32* @ip, align 4
  %v9_9340 = icmp eq i32 %v3_90e0, %v1_9340
  store i1 %v9_9340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9340, label %dec_label_pc_94f4, label %dec_label_pc_9348

dec_label_pc_9348:                                ; preds = %dec_label_pc_94e0, %dec_label_pc_933c
  store i32 %v1_90d8, i32* @lr, align 4
  store i1 %v2_94fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94fc, label %dec_label_pc_9510, label %.thread14

.thread14:                                        ; preds = %dec_label_pc_9348
  %v1_9350 = load i32, i32* @r5, align 4
  %v2_9350 = add i32 %v1_9350, 16
  %v3_9350 = inttoptr i32 %v2_9350 to i32*
  %v4_9350 = load i32, i32* %v3_9350, align 4
  store i32 %v4_9350, i32* @r3, align 4
  %v2_9354 = load i32, i32* @r6, align 4
  %v3_9354 = add i32 %v2_9354, 16
  %v4_9354 = inttoptr i32 %v3_9354 to i32*
  store i32 %v4_9350, i32* %v4_9354, align 4
  br label %dec_label_pc_935c

dec_label_pc_935c:                                ; preds = %bb85, %.thread14
  store i32 %v1_902c, i32* %r1.global-to-local, align 4
  store i1 %v2_9518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9518, label %dec_label_pc_9368, label %dec_label_pc_9524

dec_label_pc_9368:                                ; preds = %dec_label_pc_935c, %dec_label_pc_9510, %dec_label_pc_9524
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_936c = load i32, i32* @r5, align 4
  %v3_936c = add i32 %v2_936c, 10
  %v4_936c = inttoptr i32 %v3_936c to i16*
  store i16 0, i16* %v4_936c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9374 = load i32, i32* @r5, align 4
  store i32 %v0_9374, i32* @r0, align 4
  %v2_9378 = call i32 @function_bf78(i32 %v0_9374, i32 20)
  %v3_9378 = trunc i32 %v2_9378 to i16
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9380 = load i32, i32* @r5, align 4
  %v4_9380 = add i32 %v3_9380, 10
  %v5_9380 = inttoptr i32 %v4_9380 to i16*
  store i16 %v3_9378, i16* %v5_9380, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9388 = load i32, i32* %ip.global-to-local, align 4
  %v1_9388 = trunc i32 %v0_9388 to i16
  %v2_9388 = load i32, i32* @r6, align 4
  %v3_9388 = add i32 %v2_9388, 10
  %v4_9388 = inttoptr i32 %v3_9388 to i16*
  store i16 %v1_9388, i16* %v4_9388, align 2
  %v0_938c = load i32, i32* @r6, align 4
  store i32 %v0_938c, i32* @r0, align 4
  %v2_9390 = call i32 @function_bf78(i32 %v0_938c, i32 20)
  %v3_9390 = trunc i32 %v2_9390 to i16
  %v3_9394 = load i32, i32* @r6, align 4
  %v4_9394 = add i32 %v3_9394, 10
  %v5_9394 = inttoptr i32 %v4_9394 to i16*
  store i16 %v3_9390, i16* %v5_9394, align 2
  %v2_939c = load i32, i32* @r7, align 4
  %v3_939c = add i32 %v2_939c, 6
  %v4_939c = inttoptr i32 %v3_939c to i16*
  store i16 0, i16* %v4_939c, align 2
  %v0_93a0 = load i32, i32* @r7, align 4
  store i32 %v0_93a0, i32* @r1, align 4
  %v1_93a4 = add i32 %v0_93a0, 4
  %v2_93a4 = inttoptr i32 %v1_93a4 to i16*
  %v3_93a4 = load i16, i16* %v2_93a4, align 2
  %v4_93a4 = zext i16 %v3_93a4 to i32
  store i32 %v4_93a4, i32* %r2.global-to-local, align 4
  %v0_93a8 = load i32, i32* @sb, align 4
  store i32 %v0_93a8, i32* %r3.global-to-local, align 4
  %v0_93ac = load i32, i32* @r6, align 4
  %v4_93b0 = call i32 @function_bfc8(i32 %v0_93ac, i32 %v0_93a0, i32 %v4_93a4, i32 %v0_93a8)
  %v5_93b0 = trunc i32 %v4_93b0 to i16
  %v3_93b4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_93b4, i32* %r2.global-to-local, align 4
  %v3_93b8 = mul i32 %v3_93b4, 32
  store i32 %v3_93b8, i32* %r3.global-to-local, align 4
  %v0_93bc = load i32, i32* @r5, align 4
  %v1_93bc = add i32 %v0_93bc, 16
  %v2_93bc = inttoptr i32 %v1_93bc to i32*
  %v3_93bc = load i32, i32* %v2_93bc, align 4
  %v5_93c0 = mul i32 %v3_93b4, 24
  store i32 %v5_93c0, i32* %r3.global-to-local, align 4
  %v1_93c4 = load i32, i32* @sl, align 4
  %v2_93c4 = add i32 %v1_93c4, %v5_93c0
  store i32 %v2_93c4, i32* @lr, align 4
  %v2_93c8 = add i32 %v2_93c4, 4
  %v3_93c8 = inttoptr i32 %v2_93c8 to i32*
  store i32 %v3_93bc, i32* %v3_93c8, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_93d4 = load i32, i32* @r7, align 4
  %v4_93d4 = add i32 %v3_93d4, 6
  %v5_93d4 = inttoptr i32 %v4_93d4 to i16*
  store i16 %v5_93b0, i16* %v5_93d4, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_93dc = load i32, i32* %r1.global-to-local, align 4
  %v1_93dc = trunc i32 %v0_93dc to i16
  %v2_93dc = load i32, i32* %r3.global-to-local, align 4
  %v3_93dc = load i32, i32* @sl, align 4
  %v4_93dc = add i32 %v3_93dc, %v2_93dc
  %v5_93dc = inttoptr i32 %v4_93dc to i16*
  store i16 %v1_93dc, i16* %v5_93dc, align 2
  %v0_93e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_93e0 = trunc i32 %v0_93e0 to i16
  %v2_93e0 = load i32, i32* @lr, align 4
  %v3_93e0 = add i32 %v2_93e0, 2
  %v4_93e0 = inttoptr i32 %v3_93e0 to i16*
  store i16 %v1_93e0, i16* %v4_93e0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_93e8 = load i32, i32* @r5, align 4
  store i32 %v0_93e8, i32* %r1.global-to-local, align 4
  %v0_93f0 = load i32, i32* @r8, align 4
  store i32 %v0_93f0, i32* %r2.global-to-local, align 4
  %v0_93f4 = load i32, i32* @lr, align 4
  %v0_93f8 = load i32, i32* %ip.global-to-local, align 4
  %v6_93fc = call i32 @function_1093c(i32 %v3_9084, i32 %v0_93e8, i32 %v0_93f0, i32 16384, i32 %v0_93f4, i32 %v0_93f8)
  %v3_9400 = load i32, i32* %stack_var_-44, align 4
  %v1_9404 = add i32 %v3_9400, 1
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_940c = icmp eq i32 %v1_9404, %arg2
  store i1 %v9_940c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9404, i32* %stack_var_-44, align 4
  %v6_9414 = icmp slt i32 %v1_9404, %arg2
  br i1 %v6_9414, label %dec_label_pc_9418, label %dec_label_pc_9544

dec_label_pc_9418:                                ; preds = %dec_label_pc_9368, %dec_label_pc_9300
  %v1_942c = phi i32 [ %v1_9404, %dec_label_pc_9368 ], [ 0, %dec_label_pc_9300 ]
  %v5_941c = mul i32 %v1_942c, 24
  %v1_9420 = load i32, i32* @sl, align 4
  %v2_9420 = add i32 %v1_9420, %v5_941c
  store i32 %v2_9420, i32* %r3.global-to-local, align 4
  store i32 %v2_8f40, i32* %r1.global-to-local, align 4
  %v1_9428 = add i32 %v2_9420, 20
  %v2_9428 = inttoptr i32 %v1_9428 to i8*
  %v3_9428 = load i8, i8* %v2_9428, align 1
  %v4_9428 = zext i8 %v3_9428 to i32
  store i32 %v4_9428, i32* %r2.global-to-local, align 4
  %v4_942c = mul i32 %v1_942c, 4
  %v5_942c = add i32 %v4_942c, %v2_8f40
  %v6_942c = inttoptr i32 %v5_942c to i32*
  %v7_942c = load i32, i32* %v6_942c, align 4
  store i32 %v7_942c, i32* @r5, align 4
  %v2_9430 = icmp ugt i8 %v3_9428, 30
  %v7_9430 = icmp eq i8 %v3_9428, 31
  store i1 %v7_9430, i1* %cpsr_z.global-to-local, align 1
  %v1_9434 = add i32 %v7_942c, 24
  store i32 %v1_9434, i32* @r6, align 4
  %v1_9438 = add i32 %v7_942c, 44
  store i32 %v1_9438, i32* @r7, align 4
  %v2_943c = xor i1 %v7_9430, true
  %v3_943c = and i1 %v2_9430, %v2_943c
  br i1 %v3_943c, label %dec_label_pc_9314, label %dec_label_pc_9440

dec_label_pc_9440:                                ; preds = %dec_label_pc_9418
  %v1_9440 = add i32 %v2_9420, 16
  %v2_9440 = inttoptr i32 %v1_9440 to i32*
  %v3_9440 = load i32, i32* %v2_9440, align 4
  store i32 %v3_9440, i32* %r4.global-to-local, align 4
  %v0_9444 = call i32 @function_d3a8()
  %v3_9448 = load i32, i32* %stack_var_-44, align 4
  %v5_9450 = mul i32 %v3_9448, 24
  %v1_9454 = and i32 %v3_9440, 16711680
  store i32 %v1_9454, i32* %ip.global-to-local, align 4
  %v3_9458 = udiv i32 %v3_9440, 16777216
  %v4_945c = udiv i32 %v1_9454, 256
  %v5_945c = or i32 %v4_945c, %v3_9458
  store i32 %v5_945c, i32* %r2.global-to-local, align 4
  %v1_9460 = load i32, i32* @sl, align 4
  %v2_9460 = add i32 %v1_9460, %v5_9450
  store i32 %v2_9460, i32* %r1.global-to-local, align 4
  %v1_9464 = and i32 %v3_9440, 65280
  store i32 %v1_9464, i32* %r3.global-to-local, align 4
  %v1_9468 = add i32 %v2_9460, 20
  %v2_9468 = inttoptr i32 %v1_9468 to i8*
  %v3_9468 = load i8, i8* %v2_9468, align 1
  %v4_9468 = zext i8 %v3_9468 to i32
  store i32 %v4_9468, i32* %ip.global-to-local, align 4
  %v5_9470 = call i32 @llvm.bswap.i32(i32 %v3_9440)
  %v7_9474 = lshr i32 %v0_9444, %v4_9468
  %v8_9474 = add i32 %v7_9474, %v5_9470
  %v1_9480 = and i32 %v8_9474, 65280
  store i32 %v1_9480, i32* %r1.global-to-local, align 4
  %v5_948c = call i32 @llvm.bswap.i32(i32 %v8_9474)
  store i32 %v5_948c, i32* %r3.global-to-local, align 4
  store i32 %v6_9060, i32* %r2.global-to-local, align 4
  store i1 %v7_9318, i1* %cpsr_z.global-to-local, align 1
  %v1_9498 = load i32, i32* @r5, align 4
  %v2_9498 = add i32 %v1_9498, 16
  %v3_9498 = inttoptr i32 %v2_9498 to i32*
  store i32 %v5_948c, i32* %v3_9498, align 4
  br i1 %v2_9318, label %dec_label_pc_94a0, label %dec_label_pc_9320

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9440, %dec_label_pc_9314
  %v0_94a0 = call i32 @function_d3a8()
  store i32 65535, i32* @r4, align 4
  %v0_94ac = load i32, i32* @fp, align 4
  %v9_94ac = icmp eq i32 %v0_94ac, 65535
  store i1 %v9_94ac, i1* %cpsr_z.global-to-local, align 1
  %v1_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = add i32 %v1_94b0, 12
  %v3_94b0 = inttoptr i32 %v2_94b0 to i32*
  store i32 %v0_94a0, i32* %v3_94b0, align 4
  br i1 %v9_94ac, label %dec_label_pc_94b8, label %dec_label_pc_94a0.dec_label_pc_9330_crit_edge

dec_label_pc_94a0.dec_label_pc_9330_crit_edge:    ; preds = %dec_label_pc_94a0
  %v1_9334.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9330

dec_label_pc_94b8:                                ; preds = %dec_label_pc_94a0, %dec_label_pc_9320
  %v0_94b8 = call i32 @function_d3a8()
  %v3_94c0 = urem i32 %v0_94b8, 65536
  %v1_94c8 = sub nsw i32 999, %v3_94c0
  store i32 %v1_94c8, i32* %r3.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94b8 to i16
  %v2_94cc = load i32, i32* @r5, align 4
  %v3_94cc = add i32 %v2_94cc, 4
  %v4_94cc = inttoptr i32 %v3_94cc to i16*
  store i16 %v1_94cc, i16* %v4_94cc, align 2
  %v0_94d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94d0 = trunc i32 %v0_94d0 to i16
  %v2_94d0 = load i32, i32* @r6, align 4
  %v3_94d0 = add i32 %v2_94d0, 4
  %v4_94d0 = inttoptr i32 %v3_94d0 to i16*
  store i16 %v1_94d0, i16* %v4_94d0, align 2
  store i32 %v3_90dc, i32* %r3.global-to-local, align 4
  %v1_94d8 = load i32, i32* @r4, align 4
  %v9_94d8 = icmp eq i32 %v3_90dc, %v1_94d8
  store i1 %v9_94d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_94d8, label %dec_label_pc_94e0, label %dec_label_pc_933c

dec_label_pc_94e0:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_9330
  %v0_94e0 = call i32 @function_d3a8()
  %v1_94e0 = trunc i32 %v0_94e0 to i16
  store i32 %v3_90e0, i32* @ip, align 4
  %v1_94e8 = load i32, i32* @r4, align 4
  %v9_94e8 = icmp eq i32 %v3_90e0, %v1_94e8
  store i1 %v9_94e8, i1* %cpsr_z.global-to-local, align 1
  %v3_94ec = load i32, i32* @r5, align 4
  %v4_94ec = add i32 %v3_94ec, 44
  %v5_94ec = inttoptr i32 %v4_94ec to i16*
  store i16 %v1_94e0, i16* %v5_94ec, align 2
  br i1 %v9_94e8, label %dec_label_pc_94f4, label %dec_label_pc_9348

dec_label_pc_94f4:                                ; preds = %dec_label_pc_94e0, %dec_label_pc_933c
  %v0_94f4 = call i32 @function_d3a8()
  %v1_94f4 = trunc i32 %v0_94f4 to i16
  store i32 %v1_90d8, i32* @lr, align 4
  store i1 %v2_94fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94fc, label %.thread29, label %bb85

.thread29:                                        ; preds = %dec_label_pc_94f4
  %v3_950430 = load i32, i32* @r7, align 4
  %v4_950431 = add i32 %v3_950430, 2
  %v5_950432 = inttoptr i32 %v4_950431 to i16*
  store i16 %v1_94f4, i16* %v5_950432, align 2
  br label %dec_label_pc_9510

bb85:                                             ; preds = %dec_label_pc_94f4
  %v1_9500 = load i32, i32* @r5, align 4
  %v2_9500 = add i32 %v1_9500, 16
  %v3_9500 = inttoptr i32 %v2_9500 to i32*
  %v4_9500 = load i32, i32* %v3_9500, align 4
  store i32 %v4_9500, i32* @r3, align 4
  %v3_9504 = load i32, i32* @r7, align 4
  %v4_9504 = add i32 %v3_9504, 2
  %v5_9504 = inttoptr i32 %v4_9504 to i16*
  store i16 %v1_94f4, i16* %v5_9504, align 2
  %v1_9508 = load i32, i32* @r3, align 4
  %v2_9508 = load i32, i32* @r6, align 4
  %v3_9508 = add i32 %v2_9508, 16
  %v4_9508 = inttoptr i32 %v3_9508 to i32*
  store i32 %v1_9508, i32* %v4_9508, align 4
  br label %dec_label_pc_935c

dec_label_pc_9510:                                ; preds = %.thread29, %dec_label_pc_9348
  %v0_9510 = call i32 @function_d3a8()
  store i32 %v1_902c, i32* %r1.global-to-local, align 4
  store i1 %v2_9518, i1* %cpsr_z.global-to-local, align 1
  %v1_951c = load i32, i32* @r6, align 4
  %v2_951c = add i32 %v1_951c, 16
  %v3_951c = inttoptr i32 %v2_951c to i32*
  store i32 %v0_9510, i32* %v3_951c, align 4
  br i1 %v2_9518, label %dec_label_pc_9368, label %dec_label_pc_9524

dec_label_pc_9524:                                ; preds = %dec_label_pc_935c, %dec_label_pc_9510
  %v0_9524 = load i32, i32* @r7, align 4
  %v1_9524 = add i32 %v0_9524, 8
  store i32 %v1_9524, i32* @r4, align 4
  store i32 %v6_900c, i32* %r1.global-to-local, align 4
  %v2_9530 = call i32 @function_d46c(i32 %v1_9524, i32 %v6_900c)
  store i32 %v6_900c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_953c = load i32, i32* @r4, align 4
  %v4_953c = add i32 %v2_953c, %v6_900c
  %v5_953c = inttoptr i32 %v4_953c to i8*
  store i8 0, i8* %v5_953c, align 1
  br label %dec_label_pc_9368

dec_label_pc_9544:                                ; preds = %dec_label_pc_9368, %dec_label_pc_92ec
  %v2_9548 = call i32 @function_fe58(i32* null)
  store i32 %v2_9070, i32* %ip.global-to-local, align 4
  %v9_9550 = icmp eq i32 %v2_9070, %v2_9548
  store i1 %v9_9550, i1* %cpsr_z.global-to-local, align 1
  %v6_9554 = icmp slt i32 %v2_9070, %v2_9548
  br i1 %v6_9554, label %dec_label_pc_9558, label %dec_label_pc_92ec

dec_label_pc_9558:                                ; preds = %dec_label_pc_9544, %dec_label_pc_8f14, %dec_label_pc_9564
  %v1_9560 = phi i32 [ %v3_9084, %dec_label_pc_8f14 ], [ %v1_9568, %dec_label_pc_9564 ], [ %v2_9548, %dec_label_pc_9544 ]
  store i32 %v3_8f14, i32* %r4.global-to-local, align 4
  store i32 %v24_8f14, i32* %fp.global-to-local, align 4
  store i32 %v27_8f14, i32* %lr.global-to-local, align 4
  ret i32 %v1_9560

dec_label_pc_9564:                                ; preds = %dec_label_pc_9094
  %v1_9568 = call i32 @function_101d8(i32 %v3_9084)
  br label %dec_label_pc_9558

; uselistorder directives
  uselistorder i16 %v1_94f4, { 1, 0 }
  uselistorder i32 %v1_94d8, { 1, 0 }
  uselistorder i32 %v0_94b8, { 1, 0 }
  uselistorder i32 %v5_948c, { 1, 0 }
  uselistorder i32 %v3_9440, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v7_942c, { 1, 0, 2 }
  uselistorder i32 %v1_9404, { 1, 2, 0, 3 }
  uselistorder i32 %v3_93b4, { 1, 0, 2 }
  uselistorder i1 %v2_9518, { 2, 3, 1, 0 }
  uselistorder i1 %v2_94fc, { 2, 3, 1, 0 }
  uselistorder i1 %v7_9318, { 2, 1, 0 }
  uselistorder i32 %v0_9298, { 1, 0 }
  uselistorder i32 %v1_9120, { 1, 0 }
  uselistorder i32 %v3_910c, { 2, 1, 0 }
  uselistorder i1 %v2_90e4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_90d8, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v3_90d4, { 1, 0 }
  uselistorder i32 %v0_90d0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_90bc, { 2, 0, 1, 3 }
  uselistorder i1 %v7_90b4, { 1, 0 }
  uselistorder i1 %v7_9088, { 1, 0 }
  uselistorder i32 %v3_9084, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_9070, { 2, 1, 0 }
  uselistorder i32 %v6_9060, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_902c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_900c, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_8fc0, { 1, 2, 0 }
  uselistorder i32 %v1_8f9c, { 3, 2, 1, 0 }
  uselistorder i32 %v6_8f94, { 1, 0 }
  uselistorder i32 %v7_8f7c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v6_8f58, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_8f40, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 10, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 32, 31, 34, 33, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 14, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 6, 5, 4, 7, 1, 0, 3, 2, 8, 9, 10 }
  uselistorder label %dec_label_pc_9558, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9524, { 1, 0 }
  uselistorder label %dec_label_pc_9368, { 2, 1, 0 }
  uselistorder label %dec_label_pc_92ec, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_9574(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9574:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp32 = call i8 @__decompiler_undefined_function_3()
  %tmp33 = call i16 @__decompiler_undefined_function_2()
  %tmp34 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp62 = call i16 @__decompiler_undefined_function_2()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9574 = load i32, i32* @r4, align 4
  %v27_9574 = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @fp, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_95a0 = call i32 @function_11528(i32 %arg2, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_95b0 = call i32 @function_11528(i32 %arg2, i32 4)
  %v0_95b4 = load i32, i32* @r4, align 4
  store i32 %v0_95b4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r7, align 4
  store i32 %v0_95c0, i32* %r3.global-to-local, align 4
  %v0_95c4 = load i32, i32* @r5, align 4
  store i32 %v0_95c4, i32* %r0.global-to-local, align 4
  %v5_95c8 = inttoptr i32 %v0_95b4 to i32*
  %v6_95c8 = call i32 @function_8258(i32 %v0_95c4, i32* %v5_95c8, i32 2, i32 %v0_95c0, i32 %v2_95b0)
  %v1_95d4 = urem i32 %v6_95c8, 256
  store i32 %v1_95d4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_95e0 = load i32, i32* @r4, align 4
  store i32 %v0_95e0, i32* %r1.global-to-local, align 4
  %v0_95e4 = load i32, i32* @r5, align 4
  store i32 %v0_95e4, i32* %r0.global-to-local, align 4
  %v5_95e8 = trunc i32 %v6_95c8 to i8
  %v6_95ec = inttoptr i32 %v0_95e0 to i32*
  %v7_95ec = call i32 @function_8258(i32 %v0_95e4, i32* %v6_95ec, i32 3, i32 65535, i32 %v6_95c8)
  %v0_95f0 = load i32, i32* @r4, align 4
  store i32 %v0_95f0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_95ec, i32* @r8, align 4
  %v0_9600 = load i32, i32* @r5, align 4
  store i32 %v0_9600, i32* %r0.global-to-local, align 4
  %v5_9604 = inttoptr i32 %v0_95f0 to i32*
  %v6_9604 = call i32 @function_8258(i32 %v0_9600, i32* %v5_9604, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_960c = urem i32 %v6_9604, 256
  store i32 %v1_960c, i32* %ip.global-to-local, align 4
  %v0_9610 = load i32, i32* @r4, align 4
  store i32 %v0_9610, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_961c = load i32, i32* @r5, align 4
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  %v5_9620 = trunc i32 %v6_9604 to i8
  %v6_9624 = inttoptr i32 %v0_9610 to i32*
  %v7_9624 = call i32 @function_8258(i32 %v0_961c, i32* %v6_9624, i32 5, i32 1, i32 %v6_9604)
  %v1_9630 = urem i32 %v7_9624, 256
  store i32 %v1_9630, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9638 = load i32, i32* @r4, align 4
  store i32 %v0_9638, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9640 = load i32, i32* @r5, align 4
  store i32 %v0_9640, i32* %r0.global-to-local, align 4
  %v5_9648 = inttoptr i32 %v0_9638 to i32*
  %v6_9648 = call i32 @function_8258(i32 %v0_9640, i32* %v5_9648, i32 7, i32 65535, i32 %v1_9630)
  %v0_964c = load i32, i32* @r4, align 4
  store i32 %v0_964c, i32* %r1.global-to-local, align 4
  %v3_9650 = mul i32 %v6_9648, 65536
  store i32 %v3_9650, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_9658 = load i32, i32* @r7, align 4
  store i32 %v0_9658, i32* %r3.global-to-local, align 4
  %v0_965c = load i32, i32* @r5, align 4
  store i32 %v0_965c, i32* %r0.global-to-local, align 4
  %v3_9660 = urem i32 %v6_9648, 65536
  store i32 %v3_9660, i32* @sb, align 4
  %v5_9664 = inttoptr i32 %v0_964c to i32*
  %v6_9664 = call i32 @function_8258(i32 %v0_965c, i32* %v5_9664, i32 10, i32 %v0_9658, i32 ptrtoint (i32* @0 to i32))
  %v1_966c = urem i32 %v6_9664, 256
  store i32 %v1_966c, i32* %ip.global-to-local, align 4
  %v0_9670 = load i32, i32* @r4, align 4
  store i32 %v0_9670, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_967c = load i32, i32* @r5, align 4
  store i32 %v0_967c, i32* %r0.global-to-local, align 4
  %v5_9684 = inttoptr i32 %v0_9670 to i32*
  %v6_9684 = call i32 @function_8258(i32 %v0_967c, i32* %v5_9684, i32 11, i32 1, i32 %v1_966c)
  %v1_968c = urem i32 %v6_9684, 256
  store i32 %v1_968c, i32* %ip.global-to-local, align 4
  %v0_9690 = load i32, i32* @r4, align 4
  store i32 %v0_9690, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_969c = load i32, i32* @r5, align 4
  store i32 %v0_969c, i32* %r0.global-to-local, align 4
  %v5_96a4 = inttoptr i32 %v0_9690 to i32*
  %v6_96a4 = call i32 @function_8258(i32 %v0_969c, i32* %v5_96a4, i32 12, i32 1, i32 %v1_968c)
  %v1_96ac = urem i32 %v6_96a4, 256
  store i32 %v1_96ac, i32* %ip.global-to-local, align 4
  %v0_96b0 = load i32, i32* @r4, align 4
  store i32 %v0_96b0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_96b8 = load i32, i32* @r7, align 4
  store i32 %v0_96b8, i32* %r3.global-to-local, align 4
  %v0_96bc = load i32, i32* @r5, align 4
  store i32 %v0_96bc, i32* %r0.global-to-local, align 4
  %v5_96c4 = inttoptr i32 %v0_96b0 to i32*
  %v6_96c4 = call i32 @function_8258(i32 %v0_96bc, i32* %v5_96c4, i32 13, i32 %v0_96b8, i32 %v1_96ac)
  %v1_96cc = urem i32 %v6_96c4, 256
  store i32 %v1_96cc, i32* %ip.global-to-local, align 4
  %v0_96d0 = load i32, i32* @r4, align 4
  store i32 %v0_96d0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_96d8 = load i32, i32* @r7, align 4
  store i32 %v0_96d8, i32* %r3.global-to-local, align 4
  %v0_96dc = load i32, i32* @r5, align 4
  store i32 %v0_96dc, i32* %r0.global-to-local, align 4
  %v5_96e4 = inttoptr i32 %v0_96d0 to i32*
  %v6_96e4 = call i32 @function_8258(i32 %v0_96dc, i32* %v5_96e4, i32 14, i32 %v0_96d8, i32 %v1_96cc)
  %v1_96ec = urem i32 %v6_96e4, 256
  store i32 %v1_96ec, i32* %ip.global-to-local, align 4
  %v0_96f0 = load i32, i32* @r4, align 4
  store i32 %v0_96f0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_96f8 = load i32, i32* @r7, align 4
  store i32 %v0_96f8, i32* %r3.global-to-local, align 4
  %v0_96fc = load i32, i32* @r5, align 4
  store i32 %v0_96fc, i32* %r0.global-to-local, align 4
  %v5_9704 = inttoptr i32 %v0_96f0 to i32*
  %v6_9704 = call i32 @function_8258(i32 %v0_96fc, i32* %v5_9704, i32 15, i32 %v0_96f8, i32 %v1_96ec)
  %v1_970c = urem i32 %v6_9704, 256
  store i32 %v1_970c, i32* %ip.global-to-local, align 4
  %v0_9710 = load i32, i32* @r7, align 4
  store i32 %v0_9710, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9718 = load i32, i32* @r4, align 4
  store i32 %v0_9718, i32* %r1.global-to-local, align 4
  %v0_971c = load i32, i32* @r5, align 4
  store i32 %v0_971c, i32* %r0.global-to-local, align 4
  %v5_9724 = inttoptr i32 %v0_9718 to i32*
  %v6_9724 = call i32 @function_8258(i32 %v0_971c, i32* %v5_9724, i32 %v0_9710, i32 768, i32 %v1_970c)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9730 = load i32, i32* @r4, align 4
  store i32 %v0_9730, i32* %r1.global-to-local, align 4
  %v0_9738 = load i32, i32* @r5, align 4
  store i32 %v0_9738, i32* %r0.global-to-local, align 4
  %v5_973c = inttoptr i32 %v0_9730 to i32*
  %v6_973c = call i32 @function_8258(i32 %v0_9738, i32* %v5_973c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9744 = urem i32 %v6_973c, 256
  store i32 %v1_9744, i32* %r3.global-to-local, align 4
  %v0_9748 = load i32, i32* @r7, align 4
  store i32 %v0_9748, i32* %r0.global-to-local, align 4
  %v1_9750 = inttoptr i32 %v0_9748 to i32*
  %v2_9750 = call i32 @function_fe58(i32* %v1_9750)
  %v1_9754 = load i32, i32* @r6, align 4
  %v2_9754 = add i32 %v1_9754, %v2_9750
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9768 = call i32 @function_109c0(i32 2, i32 3, i32 6)
  store i32 %v3_9768, i32* %r0.global-to-local, align 4
  %v7_976c = icmp eq i32 %v3_9768, -1
  store i32 %v3_9768, i32* @sl, align 4
  br i1 %v7_976c, label %dec_label_pc_9aac, label %dec_label_pc_9778

dec_label_pc_9778:                                ; preds = %dec_label_pc_9574
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9780 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9780, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_9788 = load i32, i32* @r7, align 4
  store i32 %v0_9788, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9794 = call i32 @function_1097c(i32 %v3_9768, i32 %v0_9788, i32 3, i32 %v6_9780, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9794, i32* %r0.global-to-local, align 4
  %v7_9798 = icmp eq i32 %v5_9794, -1
  br i1 %v7_9798, label %dec_label_pc_9aa4, label %dec_label_pc_97a0

dec_label_pc_97a0:                                ; preds = %dec_label_pc_9778
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_97a4 = load i32, i32* @r8, align 4
  %v3_97a8 = urem i32 %v0_97a4, 65536
  store i32 %v3_97a8, i32* @r3, align 4
  %v2_97ac = icmp eq i32 %arg2, 0
  %v0_97b0 = load i32, i32* @r7, align 4
  store i32 %v0_97b0, i32* %stack_var_-44, align 4
  %v5_97b4 = trunc i32 %v0_97a4 to i16
  br i1 %v2_97ac, label %dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge, label %dec_label_pc_97bc.preheader

dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge: ; preds = %dec_label_pc_97a0
  %.pre = sext i16 %v5_97b4 to i32
  %.pre94 = add i32 %v6_9724, 40
  br label %dec_label_pc_9948.preheader

dec_label_pc_97bc.preheader:                      ; preds = %dec_label_pc_97a0
  %v2_9800 = ptrtoint i32* %stack_var_-160 to i32
  %v2_9848 = ptrtoint i32* %stack_var_-64 to i32
  %v2_9860 = ptrtoint i32* %stack_var_-80 to i32
  %v2_9868 = ptrtoint i32* %stack_var_-336 to i32
  %v2_986c = ptrtoint i32* %stack_var_-48 to i32
  %v4_98f4 = zext i8 %tmp32 to i32
  %v1_98f8 = and i32 %v4_98f4, 18
  %v2_98fc = icmp eq i32 %v1_98f8, 18
  %v1_9bac = add i32 %v6_9724, 40
  %v4_9bec = sext i16 %v5_97b4 to i32
  %v3_9bf8 = udiv i32 %v4_9bec, 256
  %v1_9cd4 = urem i32 %v6_9664, 2
  %tmp95 = sub nsw i32 0, %v1_9cd4
  %v4_9cdc = and i32 %tmp95, 32
  %v1_9d08 = urem i32 %v6_96a4, 2
  %tmp96 = sub nsw i32 0, %v1_9d08
  %v4_9d10 = and i32 %tmp96, 8
  %v1_9d54 = urem i32 %v6_9704, 2
  %v3_98e0 = sext i16 %tmp62 to i32
  %v1_9904 = and i32 %v4_98f4, 5
  %v2_9904 = icmp eq i32 %v1_9904, 0
  %v4_9840 = add i32 %v2_9800, 98
  %v5_9840 = inttoptr i32 %v4_9840 to i16*
  %v1_9bf4 = mul nsw i32 %v4_9bec, 256
  %v4_9c04 = and i32 %v1_9bf4, 65280
  %v5_9c04 = or i32 %v4_9c04, %v3_9bf8
  %v1_9cec = urem i32 %v6_9684, 2
  %tmp97 = sub nsw i32 0, %v1_9cec
  %v4_9cf4 = and i32 %tmp97, 16
  %v1_9d20 = urem i32 %v6_96c4, 2
  %tmp98 = sub nsw i32 0, %v1_9d20
  %v4_9d28 = and i32 %tmp98, 4
  %v1_9d38 = urem i32 %v6_96e4, 2
  %tmp99 = sub nsw i32 0, %v1_9d38
  %v3_9d40 = and i32 %tmp99, 2
  br label %dec_label_pc_97bc.outer

dec_label_pc_97bc.outer:                          ; preds = %dec_label_pc_97bc.preheader, %.thread10
  %stack_var_-340.0.ph = phi i32 [ %tmp, %dec_label_pc_97bc.preheader ], [ %v0_9c38, %.thread10 ]
  %stack_var_-62.0.ph = phi i16 [ %tmp33, %dec_label_pc_97bc.preheader ], [ %stack_var_-62.2, %.thread10 ]
  %stack_var_-60.0.ph = phi i32 [ %tmp36, %dec_label_pc_97bc.preheader ], [ %v0_9b50, %.thread10 ]
  br label %dec_label_pc_97bc

dec_label_pc_97bc:                                ; preds = %dec_label_pc_97bc.outer, %dec_label_pc_9930
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_9930 ], [ %stack_var_-62.0.ph, %dec_label_pc_97bc.outer ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_9930 ], [ %stack_var_-60.0.ph, %dec_label_pc_97bc.outer ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_97c8 = call i32 @function_109c0(i32 2, i32 1, i32 0)
  store i32 %v3_97c8, i32* %r0.global-to-local, align 4
  %v7_97cc = icmp eq i32 %v3_97c8, -1
  store i32 %v3_97c8, i32* @r8, align 4
  br i1 %v7_97cc, label %dec_label_pc_9930, label %dec_label_pc_97d8

dec_label_pc_97d8:                                ; preds = %dec_label_pc_97bc, %dec_label_pc_990c
  %v0_97e0 = phi i32 [ %v3_9920, %dec_label_pc_990c ], [ %v3_97c8, %dec_label_pc_97bc ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_990c ], [ %stack_var_-62.0, %dec_label_pc_97bc ]
  %stack_var_-60.1 = phi i32 [ %v0_9b50, %dec_label_pc_990c ], [ %stack_var_-60.0, %dec_label_pc_97bc ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_97e0 = call i32 @function_1000c(i32 %v0_97e0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_97e8 = or i32 %v2_97e0, 2048
  store i32 %v1_97e8, i32* %r2.global-to-local, align 4
  %v0_97ec = load i32, i32* @r8, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v2_97f0 = call i32 @function_1000c(i32 %v0_97ec, i32 4)
  store i32 %v2_97f0, i32* %r0.global-to-local, align 4
  %v3_97f4 = load i32, i32* %stack_var_-44, align 4
  %v5_97fc = mul i32 %v3_97f4, 24
  store i32 %v2_9800, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v1_980c = load i32, i32* @fp, align 4
  %v2_980c = add i32 %v1_980c, %v5_97fc
  store i32 %v2_980c, i32* %r3.global-to-local, align 4
  %v1_9810 = add i32 %v2_980c, 20
  %v2_9810 = inttoptr i32 %v1_9810 to i8*
  %v3_9810 = load i8, i8* %v2_9810, align 1
  %v4_9810 = zext i8 %v3_9810 to i32
  store i32 %v4_9810, i32* %r2.global-to-local, align 4
  %v2_9814 = icmp ugt i8 %v3_9810, 30
  %v7_9814 = icmp eq i8 %v3_9810, 31
  %v2_9818 = xor i1 %v7_9814, true
  %v3_9818 = and i1 %v2_9814, %v2_9818
  br i1 %v3_9818, label %bb, label %bb72

bb:                                               ; preds = %dec_label_pc_97d8
  %v5_9818 = add i32 %v2_980c, 16
  %v6_9818 = inttoptr i32 %v5_9818 to i32*
  %v7_9818 = load i32, i32* %v6_9818, align 4
  store i32 %v7_9818, i32* %r3.global-to-local, align 4
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_97d8, %bb
  %v4_981c = phi i32 [ %v2_980c, %dec_label_pc_97d8 ], [ %v7_9818, %bb ]
  %v4_981c.stack_var_-60.1 = select i1 %v3_9818, i32 %v4_981c, i32 %stack_var_-60.1
  %v2_9820 = xor i1 %v2_9814, true
  %v3_9820 = or i1 %v7_9814, %v2_9820
  br i1 %v3_9820, label %dec_label_pc_9ab8, label %dec_label_pc_9824

dec_label_pc_9824:                                ; preds = %bb72, %dec_label_pc_9ab8
  %v0_9b50 = phi i32 [ %v5_9b04, %dec_label_pc_9ab8 ], [ %v4_981c.stack_var_-60.1, %bb72 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_982c = load i32, i32* @sb, align 4
  %v9_982c = icmp eq i32 %v0_982c, 65535
  br i1 %v9_982c, label %dec_label_pc_9b10, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_9824
  %v4_9830 = udiv i32 %v0_982c, 256
  %v2_9834 = urem i32 %v0_982c, 256
  store i32 %v2_9834, i32* %r2.global-to-local, align 4
  %v5_9838 = mul nuw nsw i32 %v2_9834, 256
  %v6_9838 = or i32 %v5_9838, %v4_9830
  store i32 %v6_9838, i32* %r3.global-to-local, align 4
  store i32 %v2_9800, i32* %ip.global-to-local, align 4
  %v2_9840 = trunc i32 %v6_9838 to i16
  store i16 %v2_9840, i16* %v5_9840, align 2
  br label %dec_label_pc_9848

dec_label_pc_9848:                                ; preds = %.thread7, %dec_label_pc_9b10
  %stack_var_-62.2 = phi i16 [ %v1_9b10, %dec_label_pc_9b10 ], [ %stack_var_-62.1, %.thread7 ]
  store i32 %v2_9848, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9850 = load i32, i32* @r8, align 4
  store i32 %v0_9850, i32* %r0.global-to-local, align 4
  %v3_9854 = call i32 @function_107a8(i32 %v0_9850, i32 %v2_9848, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_985c = call i32 @function_fe58(i32* null)
  store i32 %v2_985c, i32* %r0.global-to-local, align 4
  store i32 %v2_9860, i32* @r7, align 4
  store i32 %v2_985c, i32* @r4, align 4
  store i32 %v2_9868, i32* @r6, align 4
  %v9_98c0 = icmp eq i32 %tmp34, %v0_9b50
  %v4_98e8 = zext i16 %stack_var_-62.2 to i32
  %v9_98d4 = icmp eq i1 %v9_98c0, false
  %v9_98ec = icmp eq i32 %v3_98e0, %v4_98e8
  br label %dec_label_pc_9884

dec_label_pc_9874:                                ; preds = %.thread, %dec_label_pc_98dc, %dec_label_pc_9904, %bb76
  %v2_9874 = call i32 @function_fe58(i32* null)
  %v0_9878 = load i32, i32* @r4, align 4
  %v2_9878 = sub i32 %v2_9874, %v0_9878
  store i32 %v2_9878, i32* %r0.global-to-local, align 4
  %v8_9880 = icmp sgt i32 %v2_9878, 10
  br i1 %v8_9880, label %dec_label_pc_990c, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9874, %dec_label_pc_9848
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_9868, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9894 = load i32, i32* @sl, align 4
  store i32 %v0_9894, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_98a4 = call i32 @function_108c8(i32 %v0_9894, i32 %v2_9868, i32 256, i32 16384, i32 %v2_9860, i32 %v2_986c)
  store i32 %v6_98a4, i32* %r2.global-to-local, align 4
  %v7_98ac = icmp eq i32 %v6_98a4, -1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_98ac, label %dec_label_pc_9aac, label %dec_label_pc_98b8

dec_label_pc_98b8:                                ; preds = %dec_label_pc_9884
  store i32 %v0_9b50, i32* %r1.global-to-local, align 4
  store i32 %tmp34, i32* @r3, align 4
  %tmp100 = icmp ult i32 %v6_98a4, 41
  br i1 %tmp100, label %.thread, label %bb76

.thread:                                          ; preds = %dec_label_pc_98b8
  br label %dec_label_pc_9874

bb76:                                             ; preds = %dec_label_pc_98b8
  br i1 %v9_98d4, label %dec_label_pc_9874, label %dec_label_pc_98dc

dec_label_pc_98dc:                                ; preds = %bb76
  store i32 %v3_98e0, i32* @lr, align 4
  store i32 %v2_9800, i32* @r3, align 4
  store i32 %v4_98e8, i32* %r2.global-to-local, align 4
  br i1 %v9_98ec, label %dec_label_pc_98f4, label %dec_label_pc_9874

dec_label_pc_98f4:                                ; preds = %dec_label_pc_98dc
  store i32 %v4_98f4, i32* %r2.global-to-local, align 4
  store i32 %v1_98f8, i32* @r3, align 4
  br i1 %v2_98fc, label %dec_label_pc_9b44, label %dec_label_pc_9904

dec_label_pc_9904:                                ; preds = %dec_label_pc_98f4
  br i1 %v2_9904, label %dec_label_pc_9874, label %dec_label_pc_990c

dec_label_pc_990c:                                ; preds = %dec_label_pc_9904, %dec_label_pc_9874
  %v0_990c = load i32, i32* @r8, align 4
  store i32 %v0_990c, i32* %r0.global-to-local, align 4
  %v1_9910 = call i32 @function_101d8(i32 %v0_990c)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9920 = call i32 @function_109c0(i32 2, i32 1, i32 0)
  store i32 %v3_9920, i32* %r0.global-to-local, align 4
  %v3_9924 = icmp eq i32 %v3_9920, -1
  store i32 %v3_9920, i32* @r8, align 4
  br i1 %v3_9924, label %dec_label_pc_9930, label %dec_label_pc_97d8

dec_label_pc_9930:                                ; preds = %dec_label_pc_990c, %dec_label_pc_97bc
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_97bc ], [ %stack_var_-62.2, %dec_label_pc_990c ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_97bc ], [ %v0_9b50, %dec_label_pc_990c ]
  %v3_9930 = load i32, i32* %stack_var_-44, align 4
  %v1_9938 = add i32 %v3_9930, 1
  store i32 %v1_9938, i32* @r3, align 4
  store i32 %v1_9938, i32* %stack_var_-44, align 4
  %v5_9944 = icmp slt i32 %v1_9938, %arg2
  br i1 %v5_9944, label %dec_label_pc_97bc, label %dec_label_pc_9948.preheader

dec_label_pc_9948.preheader:                      ; preds = %.thread10, %dec_label_pc_9930, %dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge
  %v1_9980.pre-phi = phi i32 [ %.pre94, %dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge ], [ %v1_9bac, %dec_label_pc_9930 ], [ %v1_9bac, %.thread10 ]
  %v4_9a64.pre-phi = phi i32 [ %.pre, %dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge ], [ %v4_9bec, %dec_label_pc_9930 ], [ %v4_9bec, %.thread10 ]
  %v3_9960 = mul i32 %v6_9724, 65536
  %v1_9964 = add i32 %v3_9960, 1310720
  %tmp78 = udiv i32 %v1_9964, 256
  %v3_9970 = and i32 %tmp78, 65280
  %v2_9a7c = icmp eq i32 %v1_9744, 0
  %v4_9974 = udiv i32 %v1_9964, 16777216
  %v5_9974 = or i32 %v3_9970, %v4_9974
  %v1_997c = add i32 %v6_9724, 20
  br label %dec_label_pc_9948

dec_label_pc_9948:                                ; preds = %dec_label_pc_9948.preheader, %dec_label_pc_9b2c
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_97ac, label %dec_label_pc_9b2c, label %dec_label_pc_995c

dec_label_pc_995c:                                ; preds = %dec_label_pc_9948
  store i32 %v1_9964, i32* %r2.global-to-local, align 4
  store i32 %v6_9724, i32* @ip, align 4
  store i32 %v3_9970, i32* %r3.global-to-local, align 4
  store i32 %v5_9974, i32* @sb, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_997c, i32* @r8, align 4
  store i32 %v1_9980.pre-phi, i32* @r7, align 4
  br label %dec_label_pc_9a78

dec_label_pc_9988:                                ; preds = %dec_label_pc_9a78, %dec_label_pc_9a84
  %v2_998c = phi i32 [ %v7_9a60, %dec_label_pc_9a78 ], [ %v2_998c.pre, %dec_label_pc_9a84 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_998c = add i32 %v2_998c, 10
  %v4_998c = inttoptr i32 %v3_998c to i16*
  store i16 0, i16* %v4_998c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9994 = load i32, i32* @r5, align 4
  store i32 %v0_9994, i32* @r0, align 4
  %v2_9998 = call i32 @function_bf78(i32 %v0_9994, i32 20)
  %v3_9998 = trunc i32 %v2_9998 to i16
  store i32 %v2_9998, i32* %r0.global-to-local, align 4
  %v3_999c = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_95a0, i32* %ip.global-to-local, align 4
  %v3_99a4 = mul i32 %v3_999c, 16
  %v2_99a8 = add i32 %v3_99a4, %v2_95a0
  store i32 %v2_99a8, i32* %r1.global-to-local, align 4
  %v1_99ac = add i32 %v2_99a8, 4
  %v2_99ac = inttoptr i32 %v1_99ac to i32*
  %v3_99ac = load i32, i32* %v2_99ac, align 4
  %v3_99b0 = mul i32 %v3_99ac, 65536
  store i32 %v3_99b0, i32* %ip.global-to-local, align 4
  %tmp79 = mul i32 %v3_99ac, 256
  %v1_99b8 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v3_99ac, 256
  %v4_99bc = urem i32 %tmp80, 256
  %v5_99bc = or i32 %v4_99bc, %v1_99b8
  store i32 %v5_99bc, i32* %r3.global-to-local, align 4
  %v1_99c0 = add i32 %v3_99ac, 1
  store i32 %v1_99c0, i32* %r2.global-to-local, align 4
  store i32 %v1_99c0, i32* %v2_99ac, align 4
  %v0_99c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_99c8 = load i32, i32* @r6, align 4
  %v2_99c8 = add i32 %v1_99c8, 4
  %v3_99c8 = inttoptr i32 %v2_99c8 to i32*
  store i32 %v0_99c8, i32* %v3_99c8, align 4
  %v0_99cc = load i32, i32* %r1.global-to-local, align 4
  %v1_99cc = add i32 %v0_99cc, 8
  %v2_99cc = inttoptr i32 %v1_99cc to i32*
  %v3_99cc = load i32, i32* %v2_99cc, align 4
  %tmp81 = mul i32 %v3_99cc, 256
  %v1_99d8 = and i32 %tmp81, 65280
  %tmp82 = udiv i32 %v3_99cc, 256
  %v4_99dc = urem i32 %tmp82, 256
  %v5_99dc = or i32 %v4_99dc, %v1_99d8
  store i32 %v5_99dc, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v3_99e4 = load i32, i32* @r5, align 4
  %v4_99e4 = add i32 %v3_99e4, 10
  %v5_99e4 = inttoptr i32 %v4_99e4 to i16*
  store i16 %v3_9998, i16* %v5_99e4, align 2
  %v0_99e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_99e8 = load i32, i32* @r6, align 4
  %v2_99e8 = add i32 %v1_99e8, 8
  %v3_99e8 = inttoptr i32 %v2_99e8 to i32*
  store i32 %v0_99e8, i32* %v3_99e8, align 4
  %v0_99ec = load i32, i32* @lr, align 4
  %v1_99ec = trunc i32 %v0_99ec to i16
  %v2_99ec = load i32, i32* @r6, align 4
  %v3_99ec = add i32 %v2_99ec, 16
  %v4_99ec = inttoptr i32 %v3_99ec to i16*
  store i16 %v1_99ec, i16* %v4_99ec, align 2
  %v0_99f0 = load i32, i32* @r6, align 4
  store i32 %v0_99f0, i32* @r1, align 4
  %v0_99f4 = load i32, i32* @sb, align 4
  store i32 %v0_99f4, i32* %r2.global-to-local, align 4
  %v0_99f8 = load i32, i32* @r8, align 4
  store i32 %v0_99f8, i32* %r3.global-to-local, align 4
  %v0_99fc = load i32, i32* @r5, align 4
  store i32 %v0_99fc, i32* %r0.global-to-local, align 4
  %v4_9a00 = call i32 @function_bfc8(i32 %v0_99fc, i32 %v0_99f0, i32 %v0_99f4, i32 %v0_99f8)
  %v5_9a00 = trunc i32 %v4_9a00 to i16
  store i32 %v4_9a00, i32* %r0.global-to-local, align 4
  %v3_9a04 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9a04, i32* %r3.global-to-local, align 4
  %v3_9a08 = mul i32 %v3_9a04, 32
  store i32 %v3_9a08, i32* %lr.global-to-local, align 4
  %v3_9a0c = load i32, i32* @r6, align 4
  %v4_9a0c = add i32 %v3_9a0c, 16
  %v5_9a0c = inttoptr i32 %v4_9a0c to i16*
  store i16 %v5_9a00, i16* %v5_9a0c, align 2
  %v0_9a10 = load i32, i32* %lr.global-to-local, align 4
  %v1_9a10 = load i32, i32* %r3.global-to-local, align 4
  %tmp101 = mul i32 %v1_9a10, -8
  %v5_9a10 = add i32 %v0_9a10, %tmp101
  store i32 %v5_9a10, i32* %lr.global-to-local, align 4
  %v0_9a14 = load i32, i32* @r6, align 4
  %v1_9a14 = add i32 %v0_9a14, 2
  %v2_9a14 = inttoptr i32 %v1_9a14 to i16*
  %v3_9a14 = load i16, i16* %v2_9a14, align 2
  %v1_9a18 = load i32, i32* @fp, align 4
  %v2_9a18 = add i32 %v1_9a18, %v5_9a10
  store i32 %v2_9a18, i32* @lr, align 4
  %v3_9a1c = add i32 %v2_9a18, 2
  %v4_9a1c = inttoptr i32 %v3_9a1c to i16*
  store i16 %v3_9a14, i16* %v4_9a1c, align 2
  %v0_9a20 = load i32, i32* @r5, align 4
  store i32 %v0_9a20, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* @ip, align 4
  %v0_9a2c = load i32, i32* @sl, align 4
  store i32 %v0_9a2c, i32* %r0.global-to-local, align 4
  %v0_9a30 = load i32, i32* @r7, align 4
  store i32 %v0_9a30, i32* %r2.global-to-local, align 4
  %v0_9a34 = load i32, i32* @lr, align 4
  %v6_9a3c = call i32 @function_1093c(i32 %v0_9a2c, i32 %v0_9a20, i32 %v0_9a30, i32 16384, i32 %v0_9a34, i32 16)
  %v3_9a40 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9a40, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v1_9a48 = add i32 %v3_9a40, 1
  store i32 %v1_9a48, i32* %r0.global-to-local, align 4
  store i32 %v1_9a48, i32* %stack_var_-44, align 4
  %v7_9a54 = icmp slt i32 %v1_9a48, %arg2
  br i1 %v7_9a54, label %dec_label_pc_9a78, label %dec_label_pc_9b2c

dec_label_pc_9a78:                                ; preds = %dec_label_pc_995c, %dec_label_pc_9988
  %v1_9a60 = phi i32 [ %v1_9a48, %dec_label_pc_9988 ], [ 0, %dec_label_pc_995c ]
  store i32 %v2_95b0, i32* @lr, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_9a60 = mul i32 %v1_9a60, 4
  %v5_9a60 = add i32 %v4_9a60, %v2_95b0
  %v6_9a60 = inttoptr i32 %v5_9a60 to i32*
  %v7_9a60 = load i32, i32* %v6_9a60, align 4
  store i32 %v7_9a60, i32* @r5, align 4
  store i32 %v4_9a64.pre-phi, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r3, align 4
  %v1_9a70 = add i32 %v7_9a60, 20
  store i32 %v1_9a70, i32* @r6, align 4
  store i32 %v1_9744, i32* %r1.global-to-local, align 4
  br i1 %v2_9a7c, label %dec_label_pc_9988, label %dec_label_pc_9a84

dec_label_pc_9a84:                                ; preds = %dec_label_pc_9a78
  %v1_9a84 = add i32 %v7_9a60, 40
  store i32 %v1_9a84, i32* @r4, align 4
  store i32 %v1_9a84, i32* %r0.global-to-local, align 4
  store i32 %v6_9724, i32* %r1.global-to-local, align 4
  %v2_9a90 = call i32 @function_d46c(i32 %v1_9a84, i32 %v6_9724)
  store i32 %v2_9a90, i32* %r0.global-to-local, align 4
  store i32 %v6_9724, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9a9c = load i32, i32* @r4, align 4
  %v4_9a9c = add i32 %v2_9a9c, %v6_9724
  %v5_9a9c = inttoptr i32 %v4_9a9c to i8*
  store i8 0, i8* %v5_9a9c, align 1
  %v2_998c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9988

dec_label_pc_9aa4:                                ; preds = %dec_label_pc_9778
  %v0_9aa4 = load i32, i32* @sl, align 4
  store i32 %v0_9aa4, i32* %r0.global-to-local, align 4
  %v1_9aa8 = call i32 @function_101d8(i32 %v0_9aa4)
  store i32 %v1_9aa8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9aac

dec_label_pc_9aac:                                ; preds = %dec_label_pc_9884, %dec_label_pc_9b2c, %dec_label_pc_9574, %dec_label_pc_9aa4
  %v1_9ab4 = phi i32 [ %v3_9768, %dec_label_pc_9574 ], [ %v1_9aa8, %dec_label_pc_9aa4 ], [ %v2_9b30, %dec_label_pc_9b2c ], [ 0, %dec_label_pc_9884 ]
  store i32 %v3_9574, i32* %r4.global-to-local, align 4
  store i32 %v27_9574, i32* %lr.global-to-local, align 4
  ret i32 %v1_9ab4

dec_label_pc_9ab8:                                ; preds = %bb72
  %v1_9ab8 = add i32 %v4_981c, 16
  %v2_9ab8 = inttoptr i32 %v1_9ab8 to i32*
  %v3_9ab8 = load i32, i32* %v2_9ab8, align 4
  store i32 %v3_9ab8, i32* @r4, align 4
  %v0_9abc = call i32 @function_d3a8()
  store i32 %v0_9abc, i32* %r0.global-to-local, align 4
  %v3_9ac0 = load i32, i32* %stack_var_-44, align 4
  %v5_9ac8 = mul i32 %v3_9ac0, 24
  %v0_9acc = load i32, i32* @r4, align 4
  %v1_9acc = and i32 %v0_9acc, 16711680
  store i32 %v1_9acc, i32* %ip.global-to-local, align 4
  %v3_9ad0 = udiv i32 %v0_9acc, 16777216
  %v4_9ad4 = udiv i32 %v1_9acc, 256
  %v5_9ad4 = or i32 %v4_9ad4, %v3_9ad0
  store i32 %v5_9ad4, i32* %r2.global-to-local, align 4
  %v1_9ad8 = load i32, i32* @fp, align 4
  %v2_9ad8 = add i32 %v1_9ad8, %v5_9ac8
  store i32 %v2_9ad8, i32* %r1.global-to-local, align 4
  %v1_9adc = and i32 %v0_9acc, 65280
  store i32 %v1_9adc, i32* %r3.global-to-local, align 4
  %v1_9ae0 = add i32 %v2_9ad8, 20
  %v2_9ae0 = inttoptr i32 %v1_9ae0 to i8*
  %v3_9ae0 = load i8, i8* %v2_9ae0, align 1
  %v4_9ae0 = zext i8 %v3_9ae0 to i32
  store i32 %v4_9ae0, i32* %ip.global-to-local, align 4
  %v5_9ae8 = call i32 @llvm.bswap.i32(i32 %v0_9acc)
  %v7_9aec = lshr i32 %v0_9abc, %v4_9ae0
  %v8_9aec = add i32 %v7_9aec, %v5_9ae8
  store i32 %v8_9aec, i32* %r2.global-to-local, align 4
  %v1_9af0 = and i32 %v8_9aec, 16711680
  store i32 %v1_9af0, i32* %r0.global-to-local, align 4
  %v1_9afc = and i32 %v8_9aec, 65280
  store i32 %v1_9afc, i32* %r1.global-to-local, align 4
  %v5_9b04 = call i32 @llvm.bswap.i32(i32 %v8_9aec)
  store i32 %v5_9b04, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9824

dec_label_pc_9b10:                                ; preds = %dec_label_pc_9824
  %v0_9b10 = call i32 @function_d3a8()
  %v1_9b10 = trunc i32 %v0_9b10 to i16
  store i32 %v0_9b10, i32* %r0.global-to-local, align 4
  store i32 %v2_9800, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9848

dec_label_pc_9b2c:                                ; preds = %dec_label_pc_9988, %dec_label_pc_9948
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9b30 = call i32 @function_fe58(i32* null)
  store i32 %v2_9b30, i32* %r0.global-to-local, align 4
  store i32 %v2_9754, i32* %r2.global-to-local, align 4
  %v6_9b3c = icmp slt i32 %v2_9754, %v2_9b30
  br i1 %v6_9b3c, label %dec_label_pc_9aac, label %dec_label_pc_9948

dec_label_pc_9b44:                                ; preds = %dec_label_pc_98f4
  %v3_9b44 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9b44, i32* @r5, align 4
  store i32 %v2_95a0, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-340.0.ph, i32* %r0.global-to-local, align 4
  %v5_9b50 = mul i32 %v3_9b44, 16
  %v6_9b50 = add i32 %v5_9b50, %v2_95a0
  %v7_9b50 = inttoptr i32 %v6_9b50 to i32*
  store i32 %v0_9b50, i32* %v7_9b50, align 4
  %v0_9b54 = load i32, i32* %r0.global-to-local, align 4
  %v1_9b54 = add i32 %v0_9b54, 4
  %v2_9b54 = inttoptr i32 %v1_9b54 to i32*
  %v3_9b54 = load i32, i32* %v2_9b54, align 4
  %v1_9b58 = and i32 %v3_9b54, 16711680
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  %v5_9b6c = call i32 @llvm.bswap.i32(i32 %v3_9b54)
  store i32 %v5_9b6c, i32* %r3.global-to-local, align 4
  store i32 %v2_95a0, i32* %r1.global-to-local, align 4
  %v0_9b74 = load i32, i32* @r5, align 4
  %v3_9b74 = mul i32 %v0_9b74, 16
  %v2_9b78 = add i32 %v3_9b74, %v2_95a0
  store i32 %v2_9b78, i32* %ip.global-to-local, align 4
  %v2_9b7c = add i32 %v2_9b78, 4
  %v3_9b7c = inttoptr i32 %v2_9b7c to i32*
  store i32 %v5_9b6c, i32* %v3_9b7c, align 4
  store i32 %stack_var_-340.0.ph, i32* %r2.global-to-local, align 4
  %v1_9b84 = add i32 %stack_var_-340.0.ph, 8
  %v2_9b84 = inttoptr i32 %v1_9b84 to i32*
  %v3_9b84 = load i32, i32* %v2_9b84, align 4
  %v1_9b90 = and i32 %v3_9b84, 65280
  store i32 %v1_9b90, i32* %r2.global-to-local, align 4
  %v5_9b9c = call i32 @llvm.bswap.i32(i32 %v3_9b84)
  store i32 %v5_9b9c, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-340.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v6_9724, i32* %r0.global-to-local, align 4
  %v1_9ba8 = add i32 %stack_var_-340.0.ph, 2
  %v2_9ba8 = inttoptr i32 %v1_9ba8 to i16*
  %v3_9ba8 = load i16, i16* %v2_9ba8, align 2
  %v4_9ba8 = zext i16 %v3_9ba8 to i32
  store i32 %v4_9ba8, i32* %r1.global-to-local, align 4
  store i32 %v1_9bac, i32* @r4, align 4
  %v2_9bb0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9bb0 = add i32 %v2_9bb0, 12
  %v4_9bb0 = inttoptr i32 %v3_9bb0 to i16*
  store i16 %v3_9ba8, i16* %v4_9bb0, align 2
  %v0_9bb4 = load i32, i32* @lr, align 4
  %v1_9bb4 = trunc i32 %v0_9bb4 to i16
  %v2_9bb4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9bb4 = add i32 %v2_9bb4, 14
  %v4_9bb4 = inttoptr i32 %v3_9bb4 to i16*
  store i16 %v1_9bb4, i16* %v4_9bb4, align 2
  %v0_9bb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9bb8 = load i32, i32* %ip.global-to-local, align 4
  %v2_9bb8 = add i32 %v1_9bb8, 8
  %v3_9bb8 = inttoptr i32 %v2_9bb8 to i32*
  store i32 %v0_9bb8, i32* %v3_9bb8, align 4
  %v0_9bbc = load i32, i32* @r4, align 4
  store i32 %v0_9bbc, i32* @r0, align 4
  %v0_9bc0 = call i32 @function_10c08()
  store i32 %v0_9bc0, i32* %r0.global-to-local, align 4
  store i32 %v2_95b0, i32* %r3.global-to-local, align 4
  %v2_9bcc = load i32, i32* @r5, align 4
  %v5_9bcc = mul i32 %v2_9bcc, 4
  %v6_9bcc = add i32 %v5_9bcc, %v2_95b0
  %v7_9bcc = inttoptr i32 %v6_9bcc to i32*
  store i32 %v0_9bc0, i32* %v7_9bcc, align 4
  %v3_9bd0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9bd0, i32* %r2.global-to-local, align 4
  %v0_9bd4 = load i32, i32* %r3.global-to-local, align 4
  %v4_9bd4 = mul i32 %v3_9bd0, 4
  %v5_9bd4 = add i32 %v0_9bd4, %v4_9bd4
  %v6_9bd4 = inttoptr i32 %v5_9bd4 to i32*
  %v7_9bd4 = load i32, i32* %v6_9bd4, align 4
  store i32 %v7_9bd4, i32* %ip.global-to-local, align 4
  %v1_9bd8 = inttoptr i32 %v7_9bd4 to i8*
  %v2_9bd8 = load i8, i8* %v1_9bd8, align 1
  %tmp102 = urem i8 %v2_9bd8, 16
  %v1_9bdc = zext i8 %tmp102 to i32
  %v1_9be0 = or i32 %v1_9bdc, 64
  store i32 %v1_9be0, i32* %r3.global-to-local, align 4
  %v1_9be4 = trunc i32 %v1_9be0 to i8
  store i8 %v1_9be4, i8* %v1_9bd8, align 1
  %v0_9be8 = load i32, i32* %ip.global-to-local, align 4
  %v1_9be8 = inttoptr i32 %v0_9be8 to i8*
  %v2_9be8 = load i8, i8* %v1_9be8, align 1
  store i32 %v4_9bec, i32* %lr.global-to-local, align 4
  %v1_9bf0 = and i8 %v2_9be8, -16
  %v1_9bfc = or i8 %v1_9bf0, 5
  %v0_9c00 = load i32, i32* @r4, align 4
  %v3_9c00 = mul i32 %v0_9c00, 65536
  store i32 %v3_9c00, i32* %r4.global-to-local, align 4
  store i32 %v5_9c04, i32* %r1.global-to-local, align 4
  store i32 %v1_9630, i32* %r0.global-to-local, align 4
  store i8 %v1_9bfc, i8* %v1_9be8, align 1
  %v0_9c10 = load i32, i32* %r1.global-to-local, align 4
  %v1_9c10 = trunc i32 %v0_9c10 to i16
  %v2_9c10 = load i32, i32* %ip.global-to-local, align 4
  %v3_9c10 = add i32 %v2_9c10, 4
  %v4_9c10 = inttoptr i32 %v3_9c10 to i16*
  store i16 %v1_9c10, i16* %v4_9c10, align 2
  %v0_9c14 = load i32, i32* %r4.global-to-local, align 4
  %v3_9c14 = udiv i32 %v0_9c14, 256
  %v1_9c1c = and i32 %v3_9c14, 65280
  store i32 %v1_9c1c, i32* %r2.global-to-local, align 4
  %v2_9c20 = load i32, i32* %ip.global-to-local, align 4
  %v3_9c20 = add i32 %v2_9c20, 1
  %v4_9c20 = inttoptr i32 %v3_9c20 to i8*
  store i8 %v5_95e8, i8* %v4_9c20, align 1
  %v0_9c24 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c24 = load i32, i32* %r4.global-to-local, align 4
  %v4_9c24 = udiv i32 %v1_9c24, 16777216
  %v5_9c24 = or i32 %v4_9c24, %v0_9c24
  %v1_9c28 = trunc i32 %v5_9c24 to i16
  %v2_9c28 = load i32, i32* %ip.global-to-local, align 4
  %v3_9c28 = add i32 %v2_9c28, 2
  %v4_9c28 = inttoptr i32 %v3_9c28 to i16*
  store i16 %v1_9c28, i16* %v4_9c28, align 2
  %v0_9c30 = load i32, i32* %ip.global-to-local, align 4
  %v1_9c30 = add i32 %v0_9c30, 20
  store i32 %v1_9c30, i32* %r3.global-to-local, align 4
  %v3_9c34 = add i32 %v0_9c30, 8
  %v4_9c34 = inttoptr i32 %v3_9c34 to i8*
  store i8 %v5_9620, i8* %v4_9c34, align 1
  %v0_9c38 = load i32, i32* %r3.global-to-local, align 4
  %v2_9c40 = load i32, i32* %ip.global-to-local, align 4
  %v3_9c40 = add i32 %v2_9c40, 9
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 6, i8* %v4_9c40, align 1
  store i32 ptrtoint (i32* @global_var_1fbd0.42 to i32), i32* %r2.global-to-local, align 4
  %v2_9c48 = load i32, i32* @global_var_1fbd0.42, align 4
  store i32 %v2_9c48, i32* %r1.global-to-local, align 4
  %v1_9c4c = load i32, i32* %ip.global-to-local, align 4
  %v2_9c4c = add i32 %v1_9c4c, 12
  %v3_9c4c = inttoptr i32 %v2_9c4c to i32*
  store i32 %v2_9c48, i32* %v3_9c4c, align 4
  %v0_9c50 = load i32, i32* %r0.global-to-local, align 4
  %v2_9c50 = icmp eq i32 %v0_9c50, 0
  %v3_9c54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9c54, i32* %r3.global-to-local, align 4
  store i32 %v2_95a0, i32* %r0.global-to-local, align 4
  br i1 %v2_9c50, label %.thread10, label %bb83

bb83:                                             ; preds = %dec_label_pc_9b44
  store i32 64, i32* %lr.global-to-local, align 4
  %v3_9c60 = load i32, i32* %ip.global-to-local, align 4
  %v4_9c60 = add i32 %v3_9c60, 6
  %v5_9c60 = inttoptr i32 %v4_9c60 to i16*
  store i16 64, i16* %v5_9c60, align 2
  %v0_9c64.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_9c64.pre = load i32, i32* %r3.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_9b44, %bb83
  %v0_9c68 = phi i32 [ %v3_9c54, %dec_label_pc_9b44 ], [ %v1_9c64.pre, %bb83 ]
  %v1_9c6c = phi i32 [ %v2_95a0, %dec_label_pc_9b44 ], [ %v0_9c64.pre, %bb83 ]
  %v4_9c64 = mul i32 %v0_9c68, 16
  %v5_9c64 = add i32 %v4_9c64, %v1_9c6c
  %v6_9c64 = inttoptr i32 %v5_9c64 to i32*
  %v7_9c64 = load i32, i32* %v6_9c64, align 4
  store i32 %v7_9c64, i32* %r2.global-to-local, align 4
  store i32 %v5_9c64, i32* %r3.global-to-local, align 4
  %v1_9c70 = load i32, i32* %ip.global-to-local, align 4
  %v2_9c70 = add i32 %v1_9c70, 16
  %v3_9c70 = inttoptr i32 %v2_9c70 to i32*
  store i32 %v7_9c64, i32* %v3_9c70, align 4
  %v0_9c74 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c74 = add i32 %v0_9c74, 12
  %v2_9c74 = inttoptr i32 %v1_9c74 to i16*
  %v3_9c74 = load i16, i16* %v2_9c74, align 2
  %v4_9c74 = zext i16 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r1.global-to-local, align 4
  %v0_9c78 = load i32, i32* %ip.global-to-local, align 4
  %v1_9c78 = add i32 %v0_9c78, 40
  store i32 %v1_9c78, i32* @r4, align 4
  %v3_9c7c = add i32 %v0_9c78, 20
  %v4_9c7c = inttoptr i32 %v3_9c7c to i16*
  store i16 %v3_9c74, i16* %v4_9c7c, align 2
  store i32 %v0_9c38, i32* %ip.global-to-local, align 4
  %v0_9c84 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c84 = add i32 %v0_9c84, 8
  %v2_9c84 = inttoptr i32 %v1_9c84 to i32*
  %v3_9c84 = load i32, i32* %v2_9c84, align 4
  store i32 %v3_9c84, i32* %r1.global-to-local, align 4
  %v2_9c88 = add i32 %v0_9c38, 4
  %v3_9c88 = inttoptr i32 %v2_9c88 to i32*
  store i32 %v3_9c84, i32* %v3_9c88, align 4
  %v0_9c8c = load i32, i32* %ip.global-to-local, align 4
  %v1_9c8c = add i32 %v0_9c8c, 13
  %v2_9c8c = inttoptr i32 %v1_9c8c to i8*
  %v3_9c8c = load i8, i8* %v2_9c8c, align 1
  %v4_9c8c = zext i8 %v3_9c8c to i32
  store i32 %v4_9c8c, i32* %r2.global-to-local, align 4
  %v0_9c90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c90 = add i32 %v0_9c90, 4
  %v2_9c90 = inttoptr i32 %v1_9c90 to i32*
  %v3_9c90 = load i32, i32* %v2_9c90, align 4
  store i32 %v3_9c90, i32* %r1.global-to-local, align 4
  %v1_9c94 = add i32 %v0_9c90, 14
  %v2_9c94 = inttoptr i32 %v1_9c94 to i16*
  %v3_9c94 = load i16, i16* %v2_9c94, align 2
  %v4_9c94 = zext i16 %v3_9c94 to i32
  store i32 %v4_9c94, i32* %r3.global-to-local, align 4
  %v1_9c98 = or i32 %v4_9c8c, 1
  store i32 %v1_9c98, i32* %r2.global-to-local, align 4
  %v3_9c9c = add i32 %v0_9c8c, 2
  %v4_9c9c = inttoptr i32 %v3_9c9c to i16*
  store i16 %v3_9c94, i16* %v4_9c9c, align 2
  %v0_9ca0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9ca0 = trunc i32 %v0_9ca0 to i8
  %v2_9ca0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ca0 = add i32 %v2_9ca0, 13
  %v4_9ca0 = inttoptr i32 %v3_9ca0 to i8*
  store i8 %v1_9ca0, i8* %v4_9ca0, align 1
  %v0_9ca4 = load i32, i32* %ip.global-to-local, align 4
  %v1_9ca4 = add i32 %v0_9ca4, 12
  %v2_9ca4 = inttoptr i32 %v1_9ca4 to i8*
  %v3_9ca4 = load i8, i8* %v2_9ca4, align 1
  %v4_9ca4 = zext i8 %v3_9ca4 to i32
  store i32 %v4_9ca4, i32* %r3.global-to-local, align 4
  %v1_9ca8 = add i32 %v0_9ca4, 13
  %v2_9ca8 = inttoptr i32 %v1_9ca8 to i8*
  %v3_9ca8 = load i8, i8* %v2_9ca8, align 1
  %v4_9ca8 = zext i8 %v3_9ca8 to i32
  %tmp103 = urem i8 %v3_9ca4, 16
  %v1_9cac = zext i8 %tmp103 to i32
  %v1_9cb0 = or i32 %v1_9cac, 128
  store i32 %v1_9cb0, i32* %r3.global-to-local, align 4
  %v1_9cb4 = or i32 %v4_9ca8, 16
  store i32 %v1_9cb4, i32* %r2.global-to-local, align 4
  %v0_9cb8 = load i32, i32* %r1.global-to-local, align 4
  %v2_9cb8 = add i32 %v0_9ca4, 8
  %v3_9cb8 = inttoptr i32 %v2_9cb8 to i32*
  store i32 %v0_9cb8, i32* %v3_9cb8, align 4
  %v0_9cbc = load i32, i32* %r3.global-to-local, align 4
  %v1_9cbc = trunc i32 %v0_9cbc to i8
  %v2_9cbc = load i32, i32* %ip.global-to-local, align 4
  %v3_9cbc = add i32 %v2_9cbc, 12
  %v4_9cbc = inttoptr i32 %v3_9cbc to i8*
  store i8 %v1_9cbc, i8* %v4_9cbc, align 1
  %v0_9cc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cc0 = trunc i32 %v0_9cc0 to i8
  %v2_9cc0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9cc0 = add i32 %v2_9cc0, 13
  %v4_9cc0 = inttoptr i32 %v3_9cc0 to i8*
  store i8 %v1_9cc0, i8* %v4_9cc0, align 1
  %v0_9cc4 = call i32 @function_d3a8()
  %v1_9cc4 = trunc i32 %v0_9cc4 to i16
  store i32 %v0_9cc4, i32* %r0.global-to-local, align 4
  store i32 %v0_9c38, i32* %lr.global-to-local, align 4
  store i32 %v1_966c, i32* %r1.global-to-local, align 4
  %v1_9cd0 = add i32 %v0_9c38, 13
  %v2_9cd0 = inttoptr i32 %v1_9cd0 to i8*
  %v3_9cd0 = load i8, i8* %v2_9cd0, align 1
  %v4_9cd0 = zext i8 %v3_9cd0 to i32
  store i32 %v1_9cd4, i32* %r2.global-to-local, align 4
  %v1_9cd8 = and i32 %v4_9cd0, 223
  %v5_9cdc = or i32 %v1_9cd8, %v4_9cdc
  store i32 %v5_9cdc, i32* %r3.global-to-local, align 4
  %v1_9ce0 = trunc i32 %v5_9cdc to i8
  store i8 %v1_9ce0, i8* %v2_9cd0, align 1
  store i32 %v1_968c, i32* %ip.global-to-local, align 4
  %v0_9ce8 = load i32, i32* %lr.global-to-local, align 4
  %v1_9ce8 = add i32 %v0_9ce8, 13
  %v2_9ce8 = inttoptr i32 %v1_9ce8 to i8*
  %v3_9ce8 = load i8, i8* %v2_9ce8, align 1
  %v4_9ce8 = zext i8 %v3_9ce8 to i32
  store i32 %v1_9cec, i32* %r3.global-to-local, align 4
  %v1_9cf0 = and i32 %v4_9ce8, 239
  %v5_9cf4 = or i32 %v1_9cf0, %v4_9cf4
  store i32 %v5_9cf4, i32* %r2.global-to-local, align 4
  %v1_9cf8 = trunc i32 %v5_9cf4 to i8
  store i8 %v1_9cf8, i8* %v2_9ce8, align 1
  %v0_9cfc = load i32, i32* %lr.global-to-local, align 4
  %v1_9cfc = add i32 %v0_9cfc, 13
  %v2_9cfc = inttoptr i32 %v1_9cfc to i8*
  %v3_9cfc = load i8, i8* %v2_9cfc, align 1
  %v4_9cfc = zext i8 %v3_9cfc to i32
  store i32 %v1_96ac, i32* %lr.global-to-local, align 4
  store i32 %v0_9c38, i32* %r1.global-to-local, align 4
  store i32 %v1_9d08, i32* %r2.global-to-local, align 4
  %v1_9d0c = and i32 %v4_9cfc, 247
  %v5_9d10 = or i32 %v1_9d0c, %v4_9d10
  store i32 %v5_9d10, i32* %r3.global-to-local, align 4
  %v1_9d14 = trunc i32 %v5_9d10 to i8
  store i8 %v1_9d14, i8* %v2_9cd0, align 1
  store i32 %v1_96cc, i32* @ip, align 4
  %v0_9d1c = load i32, i32* %r1.global-to-local, align 4
  %v1_9d1c = add i32 %v0_9d1c, 13
  %v2_9d1c = inttoptr i32 %v1_9d1c to i8*
  %v3_9d1c = load i8, i8* %v2_9d1c, align 1
  %v4_9d1c = zext i8 %v3_9d1c to i32
  store i32 %v1_9d20, i32* %r3.global-to-local, align 4
  %v1_9d24 = and i32 %v4_9d1c, 251
  %v5_9d28 = or i32 %v1_9d24, %v4_9d28
  store i32 %v5_9d28, i32* %r2.global-to-local, align 4
  %v1_9d2c = trunc i32 %v5_9d28 to i8
  store i8 %v1_9d2c, i8* %v2_9d1c, align 1
  store i32 %v1_96ec, i32* @lr, align 4
  %v0_9d34 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d34 = add i32 %v0_9d34, 13
  %v2_9d34 = inttoptr i32 %v1_9d34 to i8*
  %v3_9d34 = load i8, i8* %v2_9d34, align 1
  %v4_9d34 = zext i8 %v3_9d34 to i32
  store i32 %v1_9d38, i32* %r2.global-to-local, align 4
  %v1_9d3c = and i32 %v4_9d34, 253
  %v4_9d40 = or i32 %v1_9d3c, %v3_9d40
  store i32 %v4_9d40, i32* %r3.global-to-local, align 4
  %v1_9d44 = trunc i32 %v4_9d40 to i8
  store i8 %v1_9d44, i8* %v2_9d34, align 1
  %v0_9d48 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d48 = add i32 %v0_9d48, 13
  %v2_9d48 = inttoptr i32 %v1_9d48 to i8*
  %v3_9d48 = load i8, i8* %v2_9d48, align 1
  %v4_9d48 = zext i8 %v3_9d48 to i32
  %v1_9d50 = and i32 %v4_9d48, 254
  %v2_9d58 = or i32 %v1_9d50, %v1_9d54
  store i32 %v2_9d58, i32* @r3, align 4
  store i32 %v0_9c38, i32* %r2.global-to-local, align 4
  %v1_9d60 = trunc i32 %v2_9d58 to i8
  store i8 %v1_9d60, i8* %v2_9cd0, align 1
  %v3_9d64 = load i32, i32* %r2.global-to-local, align 4
  %v4_9d64 = add i32 %v3_9d64, 14
  %v5_9d64 = inttoptr i32 %v4_9d64 to i16*
  store i16 %v1_9cc4, i16* %v5_9d64, align 2
  store i32 %v6_9724, i32* %r1.global-to-local, align 4
  %v0_9d6c = load i32, i32* @r4, align 4
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  %v2_9d70 = call i32 @function_d46c(i32 %v0_9d6c, i32 %v6_9724)
  store i32 %v2_9d70, i32* %r0.global-to-local, align 4
  store i32 %v6_9724, i32* %ip.global-to-local, align 4
  %v2_9d7c = load i32, i32* @r4, align 4
  %v4_9d7c = add i32 %v2_9d7c, %v6_9724
  %v5_9d7c = inttoptr i32 %v4_9d7c to i8*
  store i8 0, i8* %v5_9d7c, align 1
  %v3_9d80 = load i32, i32* %stack_var_-44, align 4
  %v1_9d88 = add i32 %v3_9d80, 1
  store i32 %v1_9d88, i32* @r3, align 4
  store i32 %v1_9d88, i32* %stack_var_-44, align 4
  %v5_9d94 = icmp slt i32 %v1_9d88, %arg2
  br i1 %v5_9d94, label %dec_label_pc_97bc.outer, label %dec_label_pc_9948.preheader

; uselistorder directives
  uselistorder i32 %v1_9d88, { 1, 0, 2 }
  uselistorder i8* %v2_9cd0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_9cc4, { 1, 0 }
  uselistorder i32 %v0_9c38, { 1, 2, 4, 3, 6, 5, 0 }
  uselistorder i32 %v5_9b6c, { 1, 0 }
  uselistorder i32 %v2_9b30, { 1, 2, 0 }
  uselistorder i32 %v0_9b10, { 1, 0 }
  uselistorder i32 %v0_9acc, { 1, 2, 0, 3 }
  uselistorder i32 %v7_9a60, { 0, 2, 3, 1 }
  uselistorder i32 %v1_9a48, { 1, 2, 0, 3 }
  uselistorder i32 %v5_9a10, { 1, 0 }
  uselistorder i32 %v4_9a00, { 1, 0 }
  uselistorder i32 %v3_99cc, { 1, 0 }
  uselistorder i32 %v3_99ac, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9998, { 1, 0 }
  uselistorder i32 %v3_9970, { 1, 0 }
  uselistorder i32 %v1_9964, { 2, 0, 1 }
  uselistorder i32 %v1_9938, { 1, 0, 2 }
  uselistorder i32 %v3_9920, { 0, 2, 3, 1 }
  uselistorder i32 %v4_98e8, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 3, 1, 2 }
  uselistorder i32 %v0_982c, { 1, 0, 2 }
  uselistorder i32 %v0_9b50, { 1, 0, 4, 5, 2, 3 }
  uselistorder i32 %v4_981c, { 1, 0 }
  uselistorder i1 %v7_9814, { 1, 0 }
  uselistorder i32 %v3_97c8, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %stack_var_-340.0.ph, { 3, 4, 1, 2, 0 }
  uselistorder i32 %v1_9d38, { 1, 0 }
  uselistorder i32 %v1_9d20, { 1, 0 }
  uselistorder i32 %v1_9cec, { 1, 0 }
  uselistorder i32 %v3_98e0, { 1, 0 }
  uselistorder i32 %v1_9d08, { 1, 0 }
  uselistorder i32 %v1_9cd4, { 1, 0 }
  uselistorder i32 %v4_9bec, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v1_9bac, { 2, 0, 1 }
  uselistorder i32 %v1_98f8, { 1, 0 }
  uselistorder i32 %v4_98f4, { 2, 0, 1 }
  uselistorder i32 %v2_9800, { 3, 2, 1, 4, 0 }
  uselistorder i16 %v5_97b4, { 1, 0 }
  uselistorder i32 %v0_97a4, { 1, 0 }
  uselistorder i32 %v3_9768, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_9754, { 1, 0 }
  uselistorder i32 %v1_9744, { 2, 1, 0 }
  uselistorder i32 %v6_9724, { 2, 7, 6, 5, 8, 3, 12, 11, 10, 13, 4, 0, 9, 1 }
  uselistorder i32 %v1_970c, { 1, 0 }
  uselistorder i32 %v1_96ec, { 1, 2, 0 }
  uselistorder i32 %v1_96cc, { 1, 2, 0 }
  uselistorder i32 %v1_96ac, { 1, 2, 0 }
  uselistorder i32 %v1_968c, { 1, 2, 0 }
  uselistorder i32 %v1_966c, { 1, 2, 0 }
  uselistorder i32 %v6_9648, { 1, 0 }
  uselistorder i32 %v1_9630, { 1, 2, 0 }
  uselistorder i32 %v6_9604, { 1, 2, 0 }
  uselistorder i32 %v6_95c8, { 1, 2, 0 }
  uselistorder i32 %v2_95b0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_95a0, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 38, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 7, 3, 4, 5, 6, 12, 8, 9, 10, 11, 14, 13, 16, 15, 17, 19, 18, 22, 20, 26, 21, 23, 25, 24, 29, 27, 28, 30, 31, 32, 34, 35, 33, 36, 38, 37, 40, 39, 43, 42, 41, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32 %arg2, { 2, 1, 4, 5, 3, 0, 6, 8, 7, 9, 10, 11 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %dec_label_pc_9aac, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_9a78, { 1, 0 }
  uselistorder label %dec_label_pc_9988, { 1, 0 }
  uselistorder label %dec_label_pc_9948, { 1, 0 }
  uselistorder label %dec_label_pc_9874, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9848, { 1, 0 }
  uselistorder label %dec_label_pc_9824, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_97d8, { 1, 0 }
  uselistorder label %dec_label_pc_97bc, { 1, 0 }
  uselistorder label %dec_label_pc_97bc.outer, { 1, 0 }
}

define i32 @function_9da0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9da0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_9da0 = load i32, i32* @sb, align 4
  %v24_9da0 = load i32, i32* @fp, align 4
  %v27_9da0 = load i32, i32* @lr, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_9dcc = call i32 @function_11528(i32 %arg2, i32 4)
  %v0_9dd0 = load i32, i32* @r4, align 4
  store i32 %v0_9dd0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_9ddc = load i32, i32* @sl, align 4
  store i32 %v0_9ddc, i32* %r3.global-to-local, align 4
  %v0_9de0 = load i32, i32* @r5, align 4
  store i32 %v0_9de0, i32* %r0.global-to-local, align 4
  %v5_9de4 = inttoptr i32 %v0_9dd0 to i32*
  %v6_9de4 = call i32 @function_8258(i32 %v0_9de0, i32* %v5_9de4, i32 2, i32 %v0_9ddc, i32 %v2_9dcc)
  %v1_9df0 = urem i32 %v6_9de4, 256
  store i32 %v1_9df0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9dfc = load i32, i32* @r4, align 4
  store i32 %v0_9dfc, i32* %r1.global-to-local, align 4
  %v0_9e00 = load i32, i32* @r5, align 4
  store i32 %v0_9e00, i32* %r0.global-to-local, align 4
  %v5_9e04 = trunc i32 %v6_9de4 to i8
  %v6_9e08 = inttoptr i32 %v0_9dfc to i32*
  %v7_9e08 = call i32 @function_8258(i32 %v0_9e00, i32* %v6_9e08, i32 3, i32 65535, i32 %v6_9de4)
  %v0_9e0c = load i32, i32* @r4, align 4
  store i32 %v0_9e0c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_9e1c = load i32, i32* @r5, align 4
  store i32 %v0_9e1c, i32* %r0.global-to-local, align 4
  %v5_9e20 = inttoptr i32 %v0_9e0c to i32*
  %v6_9e20 = call i32 @function_8258(i32 %v0_9e1c, i32* %v5_9e20, i32 4, i32 64, i32 %v7_9e08)
  %v1_9e28 = urem i32 %v6_9e20, 256
  store i32 %v1_9e28, i32* %ip.global-to-local, align 4
  %v0_9e2c = load i32, i32* @r4, align 4
  store i32 %v0_9e2c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_9e34 = load i32, i32* @sl, align 4
  store i32 %v0_9e34, i32* %r3.global-to-local, align 4
  %v0_9e38 = load i32, i32* @r5, align 4
  store i32 %v0_9e38, i32* %r0.global-to-local, align 4
  %v6_9e40 = inttoptr i32 %v0_9e2c to i32*
  %v7_9e40 = call i32 @function_8258(i32 %v0_9e38, i32* %v6_9e40, i32 5, i32 %v0_9e34, i32 %v1_9e28)
  %v1_9e4c = urem i32 %v7_9e40, 256
  store i32 %v1_9e4c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9e58 = load i32, i32* @r4, align 4
  store i32 %v0_9e58, i32* %r1.global-to-local, align 4
  %v0_9e5c = load i32, i32* @r5, align 4
  store i32 %v0_9e5c, i32* %r0.global-to-local, align 4
  %v5_9e64 = inttoptr i32 %v0_9e58 to i32*
  %v6_9e64 = call i32 @function_8258(i32 %v0_9e5c, i32* %v5_9e64, i32 6, i32 65535, i32 %v1_9e4c)
  %v0_9e6c = load i32, i32* @r4, align 4
  store i32 %v0_9e6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9e64, i32* %fp.global-to-local, align 4
  %v0_9e7c = load i32, i32* @r5, align 4
  store i32 %v0_9e7c, i32* %r0.global-to-local, align 4
  %v5_9e80 = inttoptr i32 %v0_9e6c to i32*
  %v6_9e80 = call i32 @function_8258(i32 %v0_9e7c, i32* %v5_9e80, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_9e88 = load i32, i32* @r4, align 4
  store i32 %v0_9e88, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v6_9e80, i32* %sb.global-to-local, align 4
  %v0_9e98 = load i32, i32* @r5, align 4
  store i32 %v0_9e98, i32* %r0.global-to-local, align 4
  %v5_9e9c = inttoptr i32 %v0_9e88 to i32*
  %v6_9e9c = call i32 @function_8258(i32 %v0_9e98, i32* %v5_9e9c, i32 16, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_9ea8 = load i32, i32* @r4, align 4
  store i32 %v0_9ea8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_9eb4 = load i32, i32* @r5, align 4
  store i32 %v0_9eb4, i32* %r0.global-to-local, align 4
  %v5_9eb8 = inttoptr i32 %v0_9ea8 to i32*
  %v6_9eb8 = call i32 @function_8258(i32 %v0_9eb4, i32* %v5_9eb8, i32 17, i32 65535, i32 %v6_9e9c)
  %v0_9ebc = load i32, i32* @r4, align 4
  store i32 %v0_9ebc, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_9ec8 = load i32, i32* @sl, align 4
  store i32 %v0_9ec8, i32* %r3.global-to-local, align 4
  %v0_9ecc = load i32, i32* @r5, align 4
  store i32 %v0_9ecc, i32* %r0.global-to-local, align 4
  %v5_9ed0 = inttoptr i32 %v0_9ebc to i32*
  %v6_9ed0 = call i32 @function_8258(i32 %v0_9ecc, i32* %v5_9ed0, i32 10, i32 %v0_9ec8, i32 %v6_9eb8)
  %v0_9ed4 = load i32, i32* @r4, align 4
  store i32 %v0_9ed4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ee4 = load i32, i32* @r5, align 4
  store i32 %v0_9ee4, i32* %r0.global-to-local, align 4
  %v5_9ee8 = inttoptr i32 %v0_9ed4 to i32*
  %v6_9ee8 = call i32 @function_8258(i32 %v0_9ee4, i32* %v5_9ee8, i32 11, i32 1, i32 %v6_9ed0)
  %v0_9eec = load i32, i32* @r4, align 4
  store i32 %v0_9eec, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_9ef8 = load i32, i32* @sl, align 4
  store i32 %v0_9ef8, i32* %r3.global-to-local, align 4
  %v0_9efc = load i32, i32* @r5, align 4
  store i32 %v0_9efc, i32* %r0.global-to-local, align 4
  %v5_9f00 = inttoptr i32 %v0_9eec to i32*
  %v6_9f00 = call i32 @function_8258(i32 %v0_9efc, i32* %v5_9f00, i32 12, i32 %v0_9ef8, i32 %v6_9ee8)
  %v0_9f04 = load i32, i32* @r4, align 4
  store i32 %v0_9f04, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_9f10 = load i32, i32* @sl, align 4
  store i32 %v0_9f10, i32* %r3.global-to-local, align 4
  %v0_9f14 = load i32, i32* @r5, align 4
  store i32 %v0_9f14, i32* %r0.global-to-local, align 4
  %v5_9f18 = inttoptr i32 %v0_9f04 to i32*
  %v6_9f18 = call i32 @function_8258(i32 %v0_9f14, i32* %v5_9f18, i32 13, i32 %v0_9f10, i32 %v6_9f00)
  %v0_9f1c = load i32, i32* @r4, align 4
  store i32 %v0_9f1c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_9f28 = load i32, i32* @sl, align 4
  store i32 %v0_9f28, i32* %r3.global-to-local, align 4
  %v0_9f2c = load i32, i32* @r5, align 4
  store i32 %v0_9f2c, i32* %r0.global-to-local, align 4
  %v5_9f30 = inttoptr i32 %v0_9f1c to i32*
  %v6_9f30 = call i32 @function_8258(i32 %v0_9f2c, i32* %v5_9f30, i32 14, i32 %v0_9f28, i32 %v6_9f18)
  %v0_9f34 = load i32, i32* @r4, align 4
  store i32 %v0_9f34, i32* %r1.global-to-local, align 4
  %v0_9f3c = load i32, i32* @sl, align 4
  store i32 %v0_9f3c, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  store i32 %v0_9f44, i32* %r0.global-to-local, align 4
  %v5_9f48 = inttoptr i32 %v0_9f34 to i32*
  %v6_9f48 = call i32 @function_8258(i32 %v0_9f44, i32* %v5_9f48, i32 15, i32 %v0_9f3c, i32 %v6_9f30)
  %v0_9f4c = load i32, i32* @r4, align 4
  store i32 %v0_9f4c, i32* %r1.global-to-local, align 4
  %v0_9f54 = load i32, i32* @sl, align 4
  store i32 %v0_9f54, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_9f5c = load i32, i32* @r5, align 4
  store i32 %v0_9f5c, i32* %r0.global-to-local, align 4
  %v5_9f60 = inttoptr i32 %v0_9f4c to i32*
  %v6_9f60 = call i32 @function_8258(i32 %v0_9f5c, i32* %v5_9f60, i32 %v0_9f54, i32 512, i32 %v6_9f48)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9f6c = load i32, i32* @r4, align 4
  store i32 %v0_9f6c, i32* %r1.global-to-local, align 4
  store i32 %v6_9f60, i32* @r8, align 4
  %v0_9f74 = load i32, i32* @r5, align 4
  store i32 %v0_9f74, i32* %r0.global-to-local, align 4
  %v5_9f78 = inttoptr i32 %v0_9f6c to i32*
  %v6_9f78 = call i32 @function_8258(i32 %v0_9f74, i32* %v5_9f78, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_9f84 = load i32, i32* @global_var_1fbd0.42, align 4
  store i32 %v2_9f84, i32* %r3.global-to-local, align 4
  %v1_9f88 = urem i32 %v6_9f78, 256
  store i32 %v1_9f88, i32* %ip.global-to-local, align 4
  %v0_9f8c = load i32, i32* @r4, align 4
  store i32 %v0_9f8c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_9f94 = load i32, i32* @r5, align 4
  store i32 %v0_9f94, i32* %r0.global-to-local, align 4
  %v5_9f9c = inttoptr i32 %v0_9f8c to i32*
  %v6_9f9c = call i32 @function_81ec(i32 %v0_9f94, i32* %v5_9f9c, i32 19, i32 %v2_9f84, i32 %v1_9f88)
  %v0_9fa4 = load i32, i32* @sl, align 4
  store i32 %v0_9fa4, i32* %r0.global-to-local, align 4
  %v1_9fa8 = inttoptr i32 %v0_9fa4 to i32*
  %v2_9fa8 = call i32 @function_fe58(i32* %v1_9fa8)
  %v1_9fac = load i32, i32* @r6, align 4
  %v2_9fac = add i32 %v1_9fac, %v2_9fa8
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9fc0 = call i32 @function_109c0(i32 2, i32 3, i32 6)
  store i32 %v3_9fc0, i32* %r0.global-to-local, align 4
  %v7_9fc4 = icmp eq i32 %v3_9fc0, -1
  store i1 %v7_9fc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9fc4, label %dec_label_pc_a4a8, label %dec_label_pc_9fd0

dec_label_pc_9fd0:                                ; preds = %dec_label_pc_9da0
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9fd8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9fd8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_9fe0 = load i32, i32* @sl, align 4
  store i32 %v0_9fe0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9fec = call i32 @function_1097c(i32 %v3_9fc0, i32 %v0_9fe0, i32 3, i32 %v6_9fd8, i32 4)
  store i32 %v5_9fec, i32* %r0.global-to-local, align 4
  %v7_9ff0 = icmp eq i32 %v5_9fec, -1
  store i1 %v7_9ff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ff0, label %dec_label_pc_a4b4, label %dec_label_pc_9ff8

dec_label_pc_9ff8:                                ; preds = %dec_label_pc_9fd0
  store i32 %v7_9e08, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_a004 = load i32, i32* %fp.global-to-local, align 4
  %v0_a008 = load i32, i32* %sb.global-to-local, align 4
  %v3_a008 = mul i32 %v0_a008, 65536
  store i32 %v3_a008, i32* %sb.global-to-local, align 4
  %v3_a00c = urem i32 %v7_9e08, 65536
  store i32 %v3_a00c, i32* %r2.global-to-local, align 4
  %v3_a010 = urem i32 %v0_a004, 65536
  store i32 %v3_a010, i32* %r3.global-to-local, align 4
  %v3_a014 = urem i32 %v0_a008, 65536
  store i32 %v3_a014, i32* %ip.global-to-local, align 4
  %v2_a018 = icmp eq i32 %arg2, 0
  store i1 %v2_a018, i1* %cpsr_z.global-to-local, align 1
  %v0_a01c = load i32, i32* @sl, align 4
  store i32 %v0_a01c, i32* %stack_var_-44, align 4
  br i1 %v2_a018, label %dec_label_pc_a258.preheader, label %dec_label_pc_a030

dec_label_pc_a030:                                ; preds = %dec_label_pc_9ff8
  %v0_a040 = load i32, i32* @r8, align 4
  %v3_a040 = mul i32 %v0_a040, 65536
  %v1_a048 = add i32 %v3_a040, 2621440
  %tmp59 = mul i32 %v0_a004, 256
  %v3_a054 = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_a008, 256
  %v3_a058 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_a004, 256
  %v4_a060 = urem i32 %tmp61, 256
  %v5_a060 = or i32 %v4_a060, %v3_a054
  %tmp62 = udiv i32 %v1_a048, 256
  %v3_a064 = and i32 %tmp62, 65280
  %tmp63 = mul i32 %v7_9e08, 256
  %v3_a068 = and i32 %tmp63, 65280
  %tmp64 = udiv i32 %v0_a008, 256
  %v4_a06c = urem i32 %tmp64, 256
  %v5_a06c = or i32 %v4_a06c, %v3_a058
  store i32 %v5_a06c, i32* @fp, align 4
  %v4_a07c = udiv i32 %v1_a048, 16777216
  %v5_a07c = or i32 %v3_a064, %v4_a07c
  store i32 %v5_a07c, i32* @lr, align 4
  %tmp65 = udiv i32 %v7_9e08, 256
  %v4_a080 = urem i32 %tmp65, 256
  %v5_a080 = or i32 %v4_a080, %v3_a068
  store i32 %v5_a080, i32* @r5, align 4
  %tmp66 = mul i32 %v6_9e9c, 256
  %v3_a08c = and i32 %tmp66, 65280
  %v1_a090 = urem i32 %v6_9ed0, 2
  %v1_a094 = urem i32 %v6_9ee8, 2
  %tmp67 = udiv i32 %v6_9e9c, 256
  %v4_a098 = urem i32 %tmp67, 256
  %v5_a098 = or i32 %v4_a098, %v3_a08c
  %v1_a0a4 = urem i32 %v6_9f00, 2
  store i32 %v1_a0a4, i32* %r2.global-to-local, align 4
  %v1_a0a8 = urem i32 %v6_9f18, 2
  store i32 %v1_a0a8, i32* %r3.global-to-local, align 4
  store i32 %v6_9f30, i32* %ip.global-to-local, align 4
  store i32 %v6_9f48, i32* %r0.global-to-local, align 4
  store i32 %v6_9f00, i32* %r1.global-to-local, align 4
  %v1_a0d0 = urem i32 %v6_9f30, 2
  store i32 %v1_a0d0, i32* @sb, align 4
  store i32 %v0_a01c, i32* @r4, align 4
  %v1_a0d8 = urem i32 %v6_9f00, 256
  store i32 %v1_a0d8, i32* @r6, align 4
  %v1_a0dc = urem i32 %v6_9f48, 2
  store i32 %v1_a0dc, i32* @sl, align 4
  %sext = mul nuw i32 %v5_a07c, 65536
  %v4_a150 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_a080, 65536
  %v4_a158 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_a060, 65536
  %v4_a174 = sdiv i32 %sext7, 65536
  %tmp = sub nsw i32 0, %v1_a094
  %v4_a1c4 = and i32 %tmp, 16
  %tmp70 = sub nsw i32 0, %v1_a0a4
  %v4_a1d8 = and i32 %tmp70, 8
  %tmp71 = sub nsw i32 0, %v1_a0a8
  %v4_a1ec = and i32 %tmp71, 4
  %v1_a144 = trunc i32 %v6_9e20 to i8
  br label %dec_label_pc_a0e0

dec_label_pc_a0e0:                                ; preds = %.thread9, %dec_label_pc_a030
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a0ec = call i32 @function_11528(i32 1510, i32 1)
  %v2_a0f4 = load i32, i32* @r4, align 4
  %v5_a0f4 = mul i32 %v2_a0f4, 4
  %v6_a0f4 = add i32 %v5_a0f4, %v2_9dcc
  %v7_a0f4 = inttoptr i32 %v6_a0f4 to i32*
  store i32 %v2_a0ec, i32* %v7_a0f4, align 4
  %v3_a0f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a0f8, i32* %r2.global-to-local, align 4
  %v5_a100 = mul i32 %v3_a0f8, 24
  %v1_a104 = load i32, i32* @r7, align 4
  %v2_a104 = add i32 %v1_a104, %v5_a100
  store i32 %v2_a104, i32* %r0.global-to-local, align 4
  store i32 %v2_9dcc, i32* %r3.global-to-local, align 4
  %v4_a10c = mul i32 %v3_a0f8, 4
  %v5_a10c = add i32 %v4_a10c, %v2_9dcc
  %v6_a10c = inttoptr i32 %v5_a10c to i32*
  %v7_a10c = load i32, i32* %v6_a10c, align 4
  store i32 %v7_a10c, i32* %r1.global-to-local, align 4
  %v1_a110 = inttoptr i32 %v7_a10c to i8*
  %v2_a110 = load i8, i8* %v1_a110, align 1
  %tmp72 = urem i8 %v2_a110, 16
  %v1_a114 = zext i8 %tmp72 to i32
  %v1_a118 = or i32 %v1_a114, 64
  store i32 %v1_a118, i32* %r3.global-to-local, align 4
  %v1_a11c = trunc i32 %v1_a118 to i8
  store i8 %v1_a11c, i8* %v1_a110, align 1
  %v0_a120 = load i32, i32* %r1.global-to-local, align 4
  %v1_a120 = inttoptr i32 %v0_a120 to i8*
  %v2_a120 = load i8, i8* %v1_a120, align 1
  %v1_a124 = and i8 %v2_a120, -16
  %v1_a128 = or i8 %v1_a124, 5
  store i32 %v1_9e4c, i32* %ip.global-to-local, align 4
  store i8 %v1_a128, i8* %v1_a120, align 1
  store i32 %v6_9de4, i32* %r2.global-to-local, align 4
  %v2_a138 = load i32, i32* %r1.global-to-local, align 4
  %v3_a138 = add i32 %v2_a138, 1
  %v4_a138 = inttoptr i32 %v3_a138 to i8*
  store i8 %v5_9e04, i8* %v4_a138, align 1
  store i32 %v1_9e28, i32* %r3.global-to-local, align 4
  %v0_a140 = load i32, i32* %ip.global-to-local, align 4
  %v2_a140 = icmp eq i32 %v0_a140, 0
  store i1 %v2_a140, i1* %cpsr_z.global-to-local, align 1
  %v2_a144 = load i32, i32* %r1.global-to-local, align 4
  %v3_a144 = add i32 %v2_a144, 8
  %v4_a144 = inttoptr i32 %v3_a144 to i8*
  store i8 %v1_a144, i8* %v4_a144, align 1
  %v0_a148 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a148, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a0e0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a14c = load i32, i32* %r1.global-to-local, align 4
  %v4_a14c = add i32 %v3_a14c, 6
  %v5_a14c = inttoptr i32 %v4_a14c to i16*
  store i16 64, i16* %v5_a14c, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a0e0, %bb
  store i32 %v4_a150, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_a158, i32* %r2.global-to-local, align 4
  %v2_a15c = load i32, i32* %r1.global-to-local, align 4
  %v3_a15c = add i32 %v2_a15c, 9
  %v4_a15c = inttoptr i32 %v3_a15c to i8*
  store i8 6, i8* %v4_a15c, align 1
  %v0_a160 = load i32, i32* %ip.global-to-local, align 4
  %v1_a160 = trunc i32 %v0_a160 to i16
  %v2_a160 = load i32, i32* %r1.global-to-local, align 4
  %v3_a160 = add i32 %v2_a160, 2
  %v4_a160 = inttoptr i32 %v3_a160 to i16*
  store i16 %v1_a160, i16* %v4_a160, align 2
  store i32 %v6_9f9c, i32* %ip.global-to-local, align 4
  %v1_a168 = load i32, i32* %r1.global-to-local, align 4
  %v2_a168 = add i32 %v1_a168, 12
  %v3_a168 = inttoptr i32 %v2_a168 to i32*
  store i32 %v6_9f9c, i32* %v3_a168, align 4
  %v0_a16c = load i32, i32* %r2.global-to-local, align 4
  %v1_a16c = trunc i32 %v0_a16c to i16
  %v2_a16c = load i32, i32* %r1.global-to-local, align 4
  %v3_a16c = add i32 %v2_a16c, 4
  %v4_a16c = inttoptr i32 %v3_a16c to i16*
  store i16 %v1_a16c, i16* %v4_a16c, align 2
  %v0_a170 = load i32, i32* %r0.global-to-local, align 4
  %v1_a170 = add i32 %v0_a170, 16
  %v2_a170 = inttoptr i32 %v1_a170 to i32*
  %v3_a170 = load i32, i32* %v2_a170, align 4
  store i32 %v3_a170, i32* %r2.global-to-local, align 4
  store i32 %v4_a174, i32* %r0.global-to-local, align 4
  %v1_a178 = load i32, i32* %r1.global-to-local, align 4
  %v2_a178 = add i32 %v1_a178, 16
  %v3_a178 = inttoptr i32 %v2_a178 to i32*
  store i32 %v3_a170, i32* %v3_a178, align 4
  %v0_a17c = load i32, i32* %r0.global-to-local, align 4
  %v1_a17c = trunc i32 %v0_a17c to i16
  %v2_a17c = load i32, i32* %r1.global-to-local, align 4
  %v3_a17c = add i32 %v2_a17c, 20
  %v4_a17c = inttoptr i32 %v3_a17c to i16*
  store i16 %v1_a17c, i16* %v4_a17c, align 2
  %v0_a180 = load i32, i32* %r1.global-to-local, align 4
  %v1_a180 = add i32 %v0_a180, 20
  store i32 %v1_a180, i32* @r4, align 4
  %v1_a184 = add i32 %v0_a180, 32
  %v2_a184 = inttoptr i32 %v1_a184 to i8*
  %v3_a184 = load i8, i8* %v2_a184, align 1
  %v4_a184 = zext i8 %v3_a184 to i32
  %v1_a188 = and i32 %v4_a184, 95
  store i32 %v1_a188, i32* %r3.global-to-local, align 4
  %v1_a18c = add i32 %v0_a180, 33
  %v2_a18c = inttoptr i32 %v1_a18c to i8*
  %v3_a18c = load i8, i8* %v2_a18c, align 1
  %v4_a18c = zext i8 %v3_a18c to i32
  store i32 %v4_a18c, i32* %r2.global-to-local, align 4
  %v1_a190 = or i32 %v1_a188, 80
  %v1_a194 = add i32 %v0_a180, 40
  store i32 %v1_a194, i32* @r5, align 4
  store i32 %v1_a090, i32* %r1.global-to-local, align 4
  %v1_a19c = trunc i32 %v1_a190 to i8
  store i8 %v1_a19c, i8* %v2_a184, align 1
  store i32 %v5_a098, i32* %r3.global-to-local, align 4
  %v0_a1a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a1a4 = and i32 %v0_a1a4, -33
  %v1_a1a8 = load i32, i32* %r1.global-to-local, align 4
  %v4_a1a8 = mul i32 %v1_a1a8, 32
  %v5_a1a8 = or i32 %v4_a1a8, %v1_a1a4
  store i32 %v5_a1a8, i32* %r2.global-to-local, align 4
  %v1_a1ac = load i32, i32* @r4, align 4
  %v2_a1ac = add i32 %v1_a1ac, 4
  %v3_a1ac = inttoptr i32 %v2_a1ac to i32*
  store i32 %v5_a098, i32* %v3_a1ac, align 4
  %v0_a1b0 = load i32, i32* @fp, align 4
  %v1_a1b0 = trunc i32 %v0_a1b0 to i16
  %v2_a1b0 = load i32, i32* @r4, align 4
  %v3_a1b0 = add i32 %v2_a1b0, 2
  %v4_a1b0 = inttoptr i32 %v3_a1b0 to i16*
  store i16 %v1_a1b0, i16* %v4_a1b0, align 2
  %v0_a1b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a1b4 = trunc i32 %v0_a1b4 to i8
  %v2_a1b4 = load i32, i32* @r4, align 4
  %v3_a1b4 = add i32 %v2_a1b4, 13
  %v4_a1b4 = inttoptr i32 %v3_a1b4 to i8*
  store i8 %v1_a1b4, i8* %v4_a1b4, align 1
  %v0_a1b8 = load i32, i32* @r4, align 4
  %v1_a1b8 = add i32 %v0_a1b8, 13
  %v2_a1b8 = inttoptr i32 %v1_a1b8 to i8*
  %v3_a1b8 = load i8, i8* %v2_a1b8, align 1
  %v4_a1b8 = zext i8 %v3_a1b8 to i32
  store i32 %v1_a094, i32* %ip.global-to-local, align 4
  %v1_a1c0 = and i32 %v4_a1b8, 239
  %v5_a1c4 = or i32 %v1_a1c0, %v4_a1c4
  store i32 %v5_a1c4, i32* %r3.global-to-local, align 4
  %v1_a1c8 = trunc i32 %v5_a1c4 to i8
  store i8 %v1_a1c8, i8* %v2_a1b8, align 1
  %v0_a1cc = load i32, i32* @r4, align 4
  %v1_a1cc = add i32 %v0_a1cc, 13
  %v2_a1cc = inttoptr i32 %v1_a1cc to i8*
  %v3_a1cc = load i8, i8* %v2_a1cc, align 1
  %v4_a1cc = zext i8 %v3_a1cc to i32
  store i32 %v1_a0a4, i32* %r0.global-to-local, align 4
  %v1_a1d4 = and i32 %v4_a1cc, 247
  %v5_a1d8 = or i32 %v1_a1d4, %v4_a1d8
  store i32 %v5_a1d8, i32* %r2.global-to-local, align 4
  %v1_a1dc = trunc i32 %v5_a1d8 to i8
  store i8 %v1_a1dc, i8* %v2_a1cc, align 1
  %v0_a1e0 = load i32, i32* @r4, align 4
  %v1_a1e0 = add i32 %v0_a1e0, 13
  %v2_a1e0 = inttoptr i32 %v1_a1e0 to i8*
  %v3_a1e0 = load i8, i8* %v2_a1e0, align 1
  %v4_a1e0 = zext i8 %v3_a1e0 to i32
  store i32 %v1_a0a8, i32* %r1.global-to-local, align 4
  %v1_a1e8 = and i32 %v4_a1e0, 251
  %v5_a1ec = or i32 %v1_a1e8, %v4_a1ec
  store i32 %v5_a1ec, i32* %r3.global-to-local, align 4
  %v1_a1f0 = trunc i32 %v5_a1ec to i8
  store i8 %v1_a1f0, i8* %v2_a1e0, align 1
  %v0_a1f4 = load i32, i32* @r4, align 4
  %v1_a1f4 = add i32 %v0_a1f4, 13
  %v2_a1f4 = inttoptr i32 %v1_a1f4 to i8*
  %v3_a1f4 = load i8, i8* %v2_a1f4, align 1
  %v4_a1f4 = zext i8 %v3_a1f4 to i32
  %v1_a1f8 = and i32 %v4_a1f4, 253
  %v1_a1fc = load i32, i32* @sb, align 4
  %v3_a1fc = mul i32 %v1_a1fc, 2
  %v4_a1fc = or i32 %v3_a1fc, %v1_a1f8
  store i32 %v4_a1fc, i32* %r2.global-to-local, align 4
  %v1_a200 = trunc i32 %v4_a1fc to i8
  store i8 %v1_a200, i8* %v2_a1f4, align 1
  %v0_a204 = load i32, i32* @r4, align 4
  %v1_a204 = add i32 %v0_a204, 13
  %v2_a204 = inttoptr i32 %v1_a204 to i8*
  %v3_a204 = load i8, i8* %v2_a204, align 1
  %v4_a204 = zext i8 %v3_a204 to i32
  %v1_a208 = and i32 %v4_a204, 254
  %v0_a20c = load i32, i32* @sl, align 4
  %v2_a20c = or i32 %v1_a208, %v0_a20c
  store i32 %v2_a20c, i32* %r3.global-to-local, align 4
  %v1_a210 = trunc i32 %v2_a20c to i8
  store i8 %v1_a210, i8* %v2_a204, align 1
  %v0_a214 = call i32 @function_d3a8()
  %v1_a214 = trunc i32 %v0_a214 to i16
  store i32 %v0_a214, i32* %r0.global-to-local, align 4
  %v0_a218 = load i32, i32* @r6, align 4
  %v2_a218 = icmp eq i32 %v0_a218, 0
  store i1 %v2_a218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a218, label %.thread9, label %bb68

bb68:                                             ; preds = %.thread
  %v1_a21c = load i32, i32* @r4, align 4
  %v2_a21c = add i32 %v1_a21c, 13
  %v3_a21c = inttoptr i32 %v2_a21c to i8*
  %v4_a21c = load i8, i8* %v3_a21c, align 1
  %v5_a21c = zext i8 %v4_a21c to i32
  %v2_a220 = or i32 %v5_a21c, 8
  store i32 %v2_a220, i32* @r3, align 4
  %v2_a224 = trunc i32 %v2_a220 to i8
  store i8 %v2_a224, i8* %v3_a21c, align 1
  br label %.thread9

.thread9:                                         ; preds = %.thread, %bb68
  %v3_a228 = load i32, i32* @r4, align 4
  %v4_a228 = add i32 %v3_a228, 14
  %v5_a228 = inttoptr i32 %v4_a228 to i16*
  store i16 %v1_a214, i16* %v5_a228, align 2
  %v0_a22c = load i32, i32* @r8, align 4
  store i32 %v0_a22c, i32* %r1.global-to-local, align 4
  %v0_a230 = load i32, i32* @r5, align 4
  store i32 %v0_a230, i32* %r0.global-to-local, align 4
  %v2_a234 = call i32 @function_d46c(i32 %v0_a230, i32 %v0_a22c)
  store i32 %v2_a234, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a23c = load i32, i32* @r5, align 4
  %v3_a23c = load i32, i32* @r8, align 4
  %v4_a23c = add i32 %v3_a23c, %v2_a23c
  %v5_a23c = inttoptr i32 %v4_a23c to i8*
  store i8 0, i8* %v5_a23c, align 1
  %v3_a240 = load i32, i32* %stack_var_-44, align 4
  %v1_a244 = add i32 %v3_a240, 1
  store i32 %v1_a244, i32* @r4, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v9_a24c = icmp eq i32 %v1_a244, %arg2
  store i1 %v9_a24c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a244, i32* %stack_var_-44, align 4
  %v5_a254 = icmp slt i32 %v1_a244, %arg2
  br i1 %v5_a254, label %dec_label_pc_a0e0, label %dec_label_pc_a258.preheader

dec_label_pc_a258.preheader:                      ; preds = %.thread9, %dec_label_pc_9ff8
  %v2_a294 = icmp eq i32 %v6_9f9c, -1
  %v7_a294 = icmp eq i32 %v6_9f9c, -1
  %v3_a408 = icmp eq i32 %v3_a00c, 65535
  %v2_a46c = icmp eq i32 %v1_9f88, 0
  br label %dec_label_pc_a258

dec_label_pc_a258:                                ; preds = %dec_label_pc_a258.preheader, %dec_label_pc_a494
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_a018, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a018, label %dec_label_pc_a494, label %dec_label_pc_a26c

dec_label_pc_a26c:                                ; preds = %dec_label_pc_a258
  %v0_a26c = load i32, i32* @r8, align 4
  %v3_a26c = mul i32 %v0_a26c, 65536
  %v1_a270 = add i32 %v3_a26c, 1310720
  store i32 %v1_a270, i32* %r2.global-to-local, align 4
  %tmp69 = udiv i32 %v1_a270, 256
  %v3_a278 = and i32 %tmp69, 65280
  store i32 %v3_a278, i32* %r3.global-to-local, align 4
  %v4_a27c = udiv i32 %v1_a270, 16777216
  %v5_a27c = or i32 %v3_a278, %v4_a27c
  store i32 %v5_a27c, i32* @fp, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_a284 = add i32 %v0_a26c, 20
  store i32 %v1_a284, i32* @sb, align 4
  %v1_a288 = add i32 %v0_a26c, 40
  store i32 %v1_a288, i32* @sl, align 4
  br label %dec_label_pc_a374

dec_label_pc_a290:                                ; preds = %dec_label_pc_a374
  store i32 %v6_9f9c, i32* %r0.global-to-local, align 4
  store i1 %v7_a294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a294, label %dec_label_pc_a3f8, label %dec_label_pc_a29c

dec_label_pc_a29c:                                ; preds = %dec_label_pc_a398, %dec_label_pc_a290
  store i32 %v3_a00c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a408, label %dec_label_pc_a414, label %dec_label_pc_a2b0

dec_label_pc_a2b0:                                ; preds = %dec_label_pc_a3f8.dec_label_pc_a2b0_crit_edge, %dec_label_pc_a29c
  %v1_a2b4 = phi i32 [ %v1_a2b4.pre, %dec_label_pc_a3f8.dec_label_pc_a2b0_crit_edge ], [ 65535, %dec_label_pc_a29c ]
  store i32 %v3_a010, i32* %r2.global-to-local, align 4
  %v9_a2b4 = icmp eq i32 %v3_a010, %v1_a2b4
  store i1 %v9_a2b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2b4, label %dec_label_pc_a428, label %dec_label_pc_a2bc

dec_label_pc_a2bc:                                ; preds = %dec_label_pc_a414.dec_label_pc_a2bc_crit_edge, %dec_label_pc_a2b0
  %v1_a2c0 = phi i32 [ %v1_a2c0.pre, %dec_label_pc_a414.dec_label_pc_a2bc_crit_edge ], [ %v1_a2b4, %dec_label_pc_a2b0 ]
  store i32 %v3_a014, i32* @r3, align 4
  %v9_a2c0 = icmp eq i32 %v3_a014, %v1_a2c0
  store i1 %v9_a2c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2c0, label %dec_label_pc_a43c, label %dec_label_pc_a2c8

dec_label_pc_a2c8:                                ; preds = %dec_label_pc_a428.dec_label_pc_a2c8_crit_edge, %dec_label_pc_a2bc
  %v1_a2cc = phi i32 [ %v1_a2cc.pre, %dec_label_pc_a428.dec_label_pc_a2c8_crit_edge ], [ %v1_a2c0, %dec_label_pc_a2bc ]
  store i32 %v6_9e9c, i32* @ip, align 4
  %v9_a2cc = icmp eq i32 %v6_9e9c, %v1_a2cc
  store i1 %v9_a2cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2cc, label %dec_label_pc_a450, label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a43c.dec_label_pc_a2d4_crit_edge, %dec_label_pc_a2c8
  %v1_a2d8 = phi i32 [ %v1_a2d8.pre, %dec_label_pc_a43c.dec_label_pc_a2d4_crit_edge ], [ %v1_a2cc, %dec_label_pc_a2c8 ]
  store i32 %v6_9eb8, i32* %r0.global-to-local, align 4
  %v9_a2d8 = icmp eq i32 %v6_9eb8, %v1_a2d8
  store i1 %v9_a2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2d8, label %dec_label_pc_a464, label %dec_label_pc_a2e0

dec_label_pc_a2e0:                                ; preds = %dec_label_pc_a450, %dec_label_pc_a2d4
  store i32 %v1_9f88, i32* %r1.global-to-local, align 4
  store i1 %v2_a46c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a46c, label %dec_label_pc_a2ec, label %dec_label_pc_a478

dec_label_pc_a2ec:                                ; preds = %dec_label_pc_a2e0, %dec_label_pc_a464, %dec_label_pc_a478
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a2f0 = load i32, i32* @r5, align 4
  %v3_a2f0 = add i32 %v2_a2f0, 10
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i16*
  store i16 0, i16* %v4_a2f0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a2f8 = load i32, i32* @r5, align 4
  store i32 %v0_a2f8, i32* @r0, align 4
  %v2_a2fc = call i32 @function_bf78(i32 %v0_a2f8, i32 20)
  %v3_a2fc = trunc i32 %v2_a2fc to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a304 = load i32, i32* @r5, align 4
  %v4_a304 = add i32 %v3_a304, 10
  %v5_a304 = inttoptr i32 %v4_a304 to i16*
  store i16 %v3_a2fc, i16* %v5_a304, align 2
  %v0_a308 = load i32, i32* @r6, align 4
  store i32 %v0_a308, i32* @r1, align 4
  %v0_a30c = load i32, i32* %r3.global-to-local, align 4
  %v1_a30c = trunc i32 %v0_a30c to i16
  %v3_a30c = add i32 %v0_a308, 16
  %v4_a30c = inttoptr i32 %v3_a30c to i16*
  store i16 %v1_a30c, i16* %v4_a30c, align 2
  %v0_a310 = load i32, i32* @fp, align 4
  store i32 %v0_a310, i32* %r2.global-to-local, align 4
  %v0_a314 = load i32, i32* @sb, align 4
  store i32 %v0_a314, i32* %r3.global-to-local, align 4
  %v0_a318 = load i32, i32* @r5, align 4
  store i32 %v0_a318, i32* %r0.global-to-local, align 4
  %v4_a31c = call i32 @function_bfc8(i32 %v0_a318, i32 %v0_a308, i32 %v0_a310, i32 %v0_a314)
  %v5_a31c = trunc i32 %v4_a31c to i16
  store i32 %v4_a31c, i32* %r0.global-to-local, align 4
  %v3_a320 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a320, i32* %r3.global-to-local, align 4
  %v3_a324 = mul i32 %v3_a320, 32
  store i32 %v3_a324, i32* %lr.global-to-local, align 4
  %v3_a328 = load i32, i32* @r6, align 4
  %v4_a328 = add i32 %v3_a328, 16
  %v5_a328 = inttoptr i32 %v4_a328 to i16*
  store i16 %v5_a31c, i16* %v5_a328, align 2
  %v0_a32c = load i32, i32* %lr.global-to-local, align 4
  %v1_a32c = load i32, i32* %r3.global-to-local, align 4
  %tmp73 = mul i32 %v1_a32c, -8
  %v5_a32c = add i32 %v0_a32c, %tmp73
  store i32 %v5_a32c, i32* %lr.global-to-local, align 4
  %v0_a330 = load i32, i32* @r6, align 4
  %v1_a330 = add i32 %v0_a330, 2
  %v2_a330 = inttoptr i32 %v1_a330 to i16*
  %v3_a330 = load i16, i16* %v2_a330, align 2
  %v1_a334 = load i32, i32* @r7, align 4
  %v2_a334 = add i32 %v1_a334, %v5_a32c
  store i32 %v2_a334, i32* @lr, align 4
  %v3_a338 = add i32 %v2_a334, 2
  %v4_a338 = inttoptr i32 %v3_a338 to i16*
  store i16 %v3_a330, i16* %v4_a338, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a344 = load i32, i32* @r5, align 4
  store i32 %v0_a344, i32* %r1.global-to-local, align 4
  store i32 %v3_9fc0, i32* %r0.global-to-local, align 4
  %v0_a34c = load i32, i32* @sl, align 4
  store i32 %v0_a34c, i32* %r2.global-to-local, align 4
  %v0_a354 = load i32, i32* @lr, align 4
  %v6_a358 = call i32 @function_1093c(i32 %v3_9fc0, i32 %v0_a344, i32 %v0_a34c, i32 16384, i32 %v0_a354, i32 16)
  %v3_a35c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a35c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_a364 = add i32 %v3_a35c, 1
  store i32 %v1_a364, i32* %r0.global-to-local, align 4
  %v9_a368 = icmp eq i32 %v1_a364, %arg2
  store i1 %v9_a368, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a364, i32* %stack_var_-44, align 4
  %v6_a370 = icmp slt i32 %v1_a364, %arg2
  br i1 %v6_a370, label %dec_label_pc_a374, label %dec_label_pc_a494

dec_label_pc_a374:                                ; preds = %dec_label_pc_a2ec, %dec_label_pc_a26c
  %v1_a388 = phi i32 [ %v1_a364, %dec_label_pc_a2ec ], [ 0, %dec_label_pc_a26c ]
  %v5_a378 = mul i32 %v1_a388, 24
  %v1_a37c = load i32, i32* @r7, align 4
  %v2_a37c = add i32 %v1_a37c, %v5_a378
  store i32 %v2_a37c, i32* %r3.global-to-local, align 4
  store i32 %v2_9dcc, i32* %ip.global-to-local, align 4
  %v1_a384 = add i32 %v2_a37c, 20
  %v2_a384 = inttoptr i32 %v1_a384 to i8*
  %v3_a384 = load i8, i8* %v2_a384, align 1
  %v4_a384 = zext i8 %v3_a384 to i32
  store i32 %v4_a384, i32* %r2.global-to-local, align 4
  %v4_a388 = mul i32 %v1_a388, 4
  %v5_a388 = add i32 %v4_a388, %v2_9dcc
  %v6_a388 = inttoptr i32 %v5_a388 to i32*
  %v7_a388 = load i32, i32* %v6_a388, align 4
  store i32 %v7_a388, i32* @r5, align 4
  %v2_a38c = icmp ugt i8 %v3_a384, 30
  %v7_a38c = icmp eq i8 %v3_a384, 31
  store i1 %v7_a38c, i1* %cpsr_z.global-to-local, align 1
  %v1_a390 = add i32 %v7_a388, 20
  store i32 %v1_a390, i32* @r6, align 4
  %v2_a394 = xor i1 %v7_a38c, true
  %v3_a394 = and i1 %v2_a38c, %v2_a394
  br i1 %v3_a394, label %dec_label_pc_a290, label %dec_label_pc_a398

dec_label_pc_a398:                                ; preds = %dec_label_pc_a374
  %v1_a398 = add i32 %v2_a37c, 16
  %v2_a398 = inttoptr i32 %v1_a398 to i32*
  %v3_a398 = load i32, i32* %v2_a398, align 4
  %v0_a39c = call i32 @function_d3a8()
  store i32 %v0_a39c, i32* %r0.global-to-local, align 4
  %v3_a3a0 = load i32, i32* %stack_var_-44, align 4
  %v5_a3a8 = mul i32 %v3_a3a0, 24
  %v1_a3ac = and i32 %v3_a398, 16711680
  store i32 %v1_a3ac, i32* %ip.global-to-local, align 4
  %v3_a3b0 = udiv i32 %v3_a398, 16777216
  %v4_a3b4 = udiv i32 %v1_a3ac, 256
  %v5_a3b4 = or i32 %v4_a3b4, %v3_a3b0
  store i32 %v5_a3b4, i32* %r2.global-to-local, align 4
  %v1_a3b8 = load i32, i32* @r7, align 4
  %v2_a3b8 = add i32 %v1_a3b8, %v5_a3a8
  store i32 %v2_a3b8, i32* %r1.global-to-local, align 4
  %v1_a3bc = and i32 %v3_a398, 65280
  store i32 %v1_a3bc, i32* %r3.global-to-local, align 4
  %v1_a3c0 = add i32 %v2_a3b8, 20
  %v2_a3c0 = inttoptr i32 %v1_a3c0 to i8*
  %v3_a3c0 = load i8, i8* %v2_a3c0, align 1
  %v4_a3c0 = zext i8 %v3_a3c0 to i32
  store i32 %v4_a3c0, i32* %ip.global-to-local, align 4
  %v5_a3c8 = call i32 @llvm.bswap.i32(i32 %v3_a398)
  %v7_a3cc = lshr i32 %v0_a39c, %v4_a3c0
  %v8_a3cc = add i32 %v7_a3cc, %v5_a3c8
  store i32 %v8_a3cc, i32* %r2.global-to-local, align 4
  %v1_a3dc = and i32 %v8_a3cc, 65280
  store i32 %v1_a3dc, i32* %r1.global-to-local, align 4
  store i32 %v6_9f9c, i32* %r0.global-to-local, align 4
  %v5_a3e8 = call i32 @llvm.bswap.i32(i32 %v8_a3cc)
  store i32 %v5_a3e8, i32* %r3.global-to-local, align 4
  store i1 %v7_a294, i1* %cpsr_z.global-to-local, align 1
  %v1_a3f0 = load i32, i32* @r5, align 4
  %v2_a3f0 = add i32 %v1_a3f0, 16
  %v3_a3f0 = inttoptr i32 %v2_a3f0 to i32*
  store i32 %v5_a3e8, i32* %v3_a3f0, align 4
  br i1 %v2_a294, label %dec_label_pc_a3f8, label %dec_label_pc_a29c

dec_label_pc_a3f8:                                ; preds = %dec_label_pc_a398, %dec_label_pc_a290
  %v0_a3f8 = call i32 @function_d3a8()
  store i32 %v0_a3f8, i32* %r0.global-to-local, align 4
  store i32 %v3_a00c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a408, i1* %cpsr_z.global-to-local, align 1
  %v1_a40c = load i32, i32* @r5, align 4
  %v2_a40c = add i32 %v1_a40c, 12
  %v3_a40c = inttoptr i32 %v2_a40c to i32*
  store i32 %v0_a3f8, i32* %v3_a40c, align 4
  br i1 %v3_a408, label %dec_label_pc_a414, label %dec_label_pc_a3f8.dec_label_pc_a2b0_crit_edge

dec_label_pc_a3f8.dec_label_pc_a2b0_crit_edge:    ; preds = %dec_label_pc_a3f8
  %v1_a2b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2b0

dec_label_pc_a414:                                ; preds = %dec_label_pc_a3f8, %dec_label_pc_a29c
  %v0_a414 = call i32 @function_d3a8()
  %v1_a414 = trunc i32 %v0_a414 to i16
  store i32 %v0_a414, i32* %r0.global-to-local, align 4
  store i32 %v3_a010, i32* %r2.global-to-local, align 4
  %v1_a41c = load i32, i32* @r4, align 4
  %v9_a41c = icmp eq i32 %v3_a010, %v1_a41c
  store i1 %v9_a41c, i1* %cpsr_z.global-to-local, align 1
  %v3_a420 = load i32, i32* @r5, align 4
  %v4_a420 = add i32 %v3_a420, 4
  %v5_a420 = inttoptr i32 %v4_a420 to i16*
  store i16 %v1_a414, i16* %v5_a420, align 2
  br i1 %v9_a41c, label %dec_label_pc_a428, label %dec_label_pc_a414.dec_label_pc_a2bc_crit_edge

dec_label_pc_a414.dec_label_pc_a2bc_crit_edge:    ; preds = %dec_label_pc_a414
  %v1_a2c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2bc

dec_label_pc_a428:                                ; preds = %dec_label_pc_a414, %dec_label_pc_a2b0
  %v0_a428 = call i32 @function_d3a8()
  %v1_a428 = trunc i32 %v0_a428 to i16
  store i32 %v0_a428, i32* %r0.global-to-local, align 4
  store i32 %v3_a014, i32* @r3, align 4
  %v1_a430 = load i32, i32* @r4, align 4
  %v9_a430 = icmp eq i32 %v3_a014, %v1_a430
  store i1 %v9_a430, i1* %cpsr_z.global-to-local, align 1
  %v3_a434 = load i32, i32* @r5, align 4
  %v4_a434 = add i32 %v3_a434, 20
  %v5_a434 = inttoptr i32 %v4_a434 to i16*
  store i16 %v1_a428, i16* %v5_a434, align 2
  br i1 %v9_a430, label %dec_label_pc_a43c, label %dec_label_pc_a428.dec_label_pc_a2c8_crit_edge

dec_label_pc_a428.dec_label_pc_a2c8_crit_edge:    ; preds = %dec_label_pc_a428
  %v1_a2cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2c8

dec_label_pc_a43c:                                ; preds = %dec_label_pc_a428, %dec_label_pc_a2bc
  %v0_a43c = call i32 @function_d3a8()
  %v1_a43c = trunc i32 %v0_a43c to i16
  store i32 %v0_a43c, i32* %r0.global-to-local, align 4
  store i32 %v6_9e9c, i32* @ip, align 4
  %v1_a444 = load i32, i32* @r4, align 4
  %v9_a444 = icmp eq i32 %v6_9e9c, %v1_a444
  store i1 %v9_a444, i1* %cpsr_z.global-to-local, align 1
  %v3_a448 = load i32, i32* @r6, align 4
  %v4_a448 = add i32 %v3_a448, 2
  %v5_a448 = inttoptr i32 %v4_a448 to i16*
  store i16 %v1_a43c, i16* %v5_a448, align 2
  br i1 %v9_a444, label %dec_label_pc_a450, label %dec_label_pc_a43c.dec_label_pc_a2d4_crit_edge

dec_label_pc_a43c.dec_label_pc_a2d4_crit_edge:    ; preds = %dec_label_pc_a43c
  %v1_a2d8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2d4

dec_label_pc_a450:                                ; preds = %dec_label_pc_a43c, %dec_label_pc_a2c8
  %v0_a450 = call i32 @function_d3a8()
  %v1_a454 = load i32, i32* @r6, align 4
  %v2_a454 = add i32 %v1_a454, 4
  %v3_a454 = inttoptr i32 %v2_a454 to i32*
  store i32 %v0_a450, i32* %v3_a454, align 4
  store i32 %v6_9eb8, i32* %r0.global-to-local, align 4
  %v1_a45c = load i32, i32* @r4, align 4
  %v9_a45c = icmp eq i32 %v6_9eb8, %v1_a45c
  store i1 %v9_a45c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a45c, label %dec_label_pc_a464, label %dec_label_pc_a2e0

dec_label_pc_a464:                                ; preds = %dec_label_pc_a450, %dec_label_pc_a2d4
  %v0_a464 = call i32 @function_d3a8()
  store i32 %v0_a464, i32* %r0.global-to-local, align 4
  store i32 %v1_9f88, i32* %r1.global-to-local, align 4
  store i1 %v2_a46c, i1* %cpsr_z.global-to-local, align 1
  %v1_a470 = load i32, i32* @r6, align 4
  %v2_a470 = add i32 %v1_a470, 8
  %v3_a470 = inttoptr i32 %v2_a470 to i32*
  store i32 %v0_a464, i32* %v3_a470, align 4
  br i1 %v2_a46c, label %dec_label_pc_a2ec, label %dec_label_pc_a478

dec_label_pc_a478:                                ; preds = %dec_label_pc_a2e0, %dec_label_pc_a464
  %v0_a478 = load i32, i32* @r5, align 4
  %v1_a478 = add i32 %v0_a478, 40
  store i32 %v1_a478, i32* @r4, align 4
  store i32 %v1_a478, i32* %r0.global-to-local, align 4
  %v0_a480 = load i32, i32* @r8, align 4
  store i32 %v0_a480, i32* %r1.global-to-local, align 4
  %v2_a484 = call i32 @function_d46c(i32 %v1_a478, i32 %v0_a480)
  store i32 %v2_a484, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a48c = load i32, i32* @r4, align 4
  %v3_a48c = load i32, i32* @r8, align 4
  %v4_a48c = add i32 %v3_a48c, %v2_a48c
  %v5_a48c = inttoptr i32 %v4_a48c to i8*
  store i8 0, i8* %v5_a48c, align 1
  br label %dec_label_pc_a2ec

dec_label_pc_a494:                                ; preds = %dec_label_pc_a2ec, %dec_label_pc_a258
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a498 = call i32 @function_fe58(i32* null)
  store i32 %v2_a498, i32* %r0.global-to-local, align 4
  store i32 %v2_9fac, i32* %r1.global-to-local, align 4
  %v9_a4a0 = icmp eq i32 %v2_9fac, %v2_a498
  store i1 %v9_a4a0, i1* %cpsr_z.global-to-local, align 1
  %v6_a4a4 = icmp slt i32 %v2_9fac, %v2_a498
  br i1 %v6_a4a4, label %dec_label_pc_a4a8, label %dec_label_pc_a258

dec_label_pc_a4a8:                                ; preds = %dec_label_pc_a494, %dec_label_pc_9da0, %dec_label_pc_a4b4
  %v1_a4b0 = phi i32 [ %v3_9fc0, %dec_label_pc_9da0 ], [ %v1_a4b8, %dec_label_pc_a4b4 ], [ %v2_a498, %dec_label_pc_a494 ]
  store i32 %v18_9da0, i32* %sb.global-to-local, align 4
  store i32 %v24_9da0, i32* %fp.global-to-local, align 4
  store i32 %v27_9da0, i32* %lr.global-to-local, align 4
  ret i32 %v1_a4b0

dec_label_pc_a4b4:                                ; preds = %dec_label_pc_9fd0
  store i32 %v3_9fc0, i32* %r0.global-to-local, align 4
  %v1_a4b8 = call i32 @function_101d8(i32 %v3_9fc0)
  store i32 %v1_a4b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a4a8

; uselistorder directives
  uselistorder i32 %v1_a4b8, { 1, 0 }
  uselistorder i32 %v0_a43c, { 1, 0 }
  uselistorder i32 %v0_a428, { 1, 0 }
  uselistorder i32 %v0_a414, { 1, 0 }
  uselistorder i32 %v5_a3e8, { 1, 0 }
  uselistorder i32 %v3_a398, { 2, 1, 3, 0 }
  uselistorder i32 %v1_a364, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_a32c, { 1, 0 }
  uselistorder i32 %v4_a31c, { 1, 0 }
  uselistorder i32 %v0_a26c, { 2, 1, 0 }
  uselistorder i1 %v2_a46c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_a408, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a294, { 2, 1, 0 }
  uselistorder i32 %v1_a244, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a214, { 1, 0 }
  uselistorder i32 %v0_a180, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a0a8, { 2, 0, 1 }
  uselistorder i32 %v1_a0a4, { 2, 0, 1 }
  uselistorder i32 %v1_a094, { 1, 0 }
  uselistorder i1 %v2_a018, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a00c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a008, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a004, { 1, 0, 2 }
  uselistorder i1 %v7_9ff0, { 1, 0 }
  uselistorder i1 %v7_9fc4, { 1, 0 }
  uselistorder i32 %v3_9fc0, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_9fac, { 2, 1, 0 }
  uselistorder i32 %v6_9f9c, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_9f88, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_9f00, { 0, 2, 1, 3 }
  uselistorder i32 %v6_9eb8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_9e9c, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_9e4c, { 1, 2, 0 }
  uselistorder i32 %v1_9e28, { 2, 1, 0 }
  uselistorder i32 %v6_9e20, { 1, 0 }
  uselistorder i32 %v7_9e08, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_9de4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_9dcc, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 11, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 7, 5, 8, 6, 9, 10, 11, 13, 12, 15, 14, 16, 18, 17, 19, 20, 21, 23, 22, 29, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 4, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 6, 5, 4, 7, 3, 2, 1, 0, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_a4a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a478, { 1, 0 }
  uselistorder label %dec_label_pc_a2ec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a258, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_a4c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a4c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_a4c4 = load i32, i32* @r4, align 4
  %v24_a4c4 = load i32, i32* @fp, align 4
  %v27_a4c4 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_a4f0 = call i32 @function_11528(i32 %arg2, i32 4)
  %v0_a4f4 = load i32, i32* @r4, align 4
  store i32 %v0_a4f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a4f0, i32* @sl, align 4
  %v0_a504 = load i32, i32* @r5, align 4
  store i32 %v0_a504, i32* %r0.global-to-local, align 4
  %v5_a508 = inttoptr i32 %v0_a4f4 to i32*
  %v6_a508 = call i32 @function_8258(i32 %v0_a504, i32* %v5_a508, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a520 = load i32, i32* @r4, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  %v0_a524 = load i32, i32* @r5, align 4
  store i32 %v0_a524, i32* %r0.global-to-local, align 4
  %v5_a528 = trunc i32 %v6_a508 to i8
  %v6_a52c = inttoptr i32 %v0_a520 to i32*
  %v7_a52c = call i32 @function_8258(i32 %v0_a524, i32* %v6_a52c, i32 3, i32 65535, i32 %v6_a508)
  %v0_a530 = load i32, i32* @r4, align 4
  store i32 %v0_a530, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a540 = load i32, i32* @r5, align 4
  store i32 %v0_a540, i32* %r0.global-to-local, align 4
  %v5_a544 = inttoptr i32 %v0_a530 to i32*
  %v6_a544 = call i32 @function_8258(i32 %v0_a540, i32* %v5_a544, i32 4, i32 64, i32 %v7_a52c)
  %v1_a54c = urem i32 %v6_a544, 256
  %v0_a550 = load i32, i32* @r4, align 4
  store i32 %v0_a550, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a55c = load i32, i32* @r5, align 4
  store i32 %v0_a55c, i32* %r0.global-to-local, align 4
  %v6_a564 = inttoptr i32 %v0_a550 to i32*
  %v7_a564 = call i32 @function_8258(i32 %v0_a55c, i32* %v6_a564, i32 5, i32 1, i32 %v1_a54c)
  %v1_a570 = urem i32 %v7_a564, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a57c = load i32, i32* @r4, align 4
  store i32 %v0_a57c, i32* %r1.global-to-local, align 4
  %v0_a580 = load i32, i32* @r5, align 4
  store i32 %v0_a580, i32* %r0.global-to-local, align 4
  %v5_a588 = inttoptr i32 %v0_a57c to i32*
  %v6_a588 = call i32 @function_8258(i32 %v0_a580, i32* %v5_a588, i32 6, i32 65535, i32 %v1_a570)
  %v0_a594 = load i32, i32* @r4, align 4
  store i32 %v0_a594, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r5, align 4
  store i32 %v0_a5a0, i32* %r0.global-to-local, align 4
  %v5_a5a4 = inttoptr i32 %v0_a594 to i32*
  %v6_a5a4 = call i32 @function_8258(i32 %v0_a5a0, i32* %v5_a5a4, i32 7, i32 65535, i32 %v6_a588)
  %v0_a5ac = load i32, i32* @r4, align 4
  store i32 %v0_a5ac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v6_a5a4, i32* %fp.global-to-local, align 4
  %v0_a5bc = load i32, i32* @r5, align 4
  store i32 %v0_a5bc, i32* %r0.global-to-local, align 4
  %v5_a5c0 = inttoptr i32 %v0_a5ac to i32*
  %v6_a5c0 = call i32 @function_8258(i32 %v0_a5bc, i32* %v5_a5c0, i32 16, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a5c4 = load i32, i32* @r4, align 4
  store i32 %v0_a5c4, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a5d4 = load i32, i32* @r5, align 4
  store i32 %v0_a5d4, i32* %r0.global-to-local, align 4
  %v5_a5d8 = inttoptr i32 %v0_a5c4 to i32*
  %v6_a5d8 = call i32 @function_8258(i32 %v0_a5d4, i32* %v5_a5d8, i32 17, i32 0, i32 %v6_a5c0)
  %v0_a5dc = load i32, i32* @r4, align 4
  store i32 %v0_a5dc, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a5ec = load i32, i32* @r5, align 4
  store i32 %v0_a5ec, i32* %r0.global-to-local, align 4
  %v5_a5f0 = inttoptr i32 %v0_a5dc to i32*
  %v6_a5f0 = call i32 @function_8258(i32 %v0_a5ec, i32* %v5_a5f0, i32 10, i32 0, i32 %v6_a5d8)
  %v0_a5f4 = load i32, i32* @r4, align 4
  store i32 %v0_a5f4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a604 = load i32, i32* @r5, align 4
  store i32 %v0_a604, i32* %r0.global-to-local, align 4
  %v5_a608 = inttoptr i32 %v0_a5f4 to i32*
  %v6_a608 = call i32 @function_8258(i32 %v0_a604, i32* %v5_a608, i32 11, i32 0, i32 %v6_a5f0)
  %v0_a60c = load i32, i32* @r4, align 4
  store i32 %v0_a60c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a61c = load i32, i32* @r5, align 4
  store i32 %v0_a61c, i32* %r0.global-to-local, align 4
  %v5_a620 = inttoptr i32 %v0_a60c to i32*
  %v6_a620 = call i32 @function_8258(i32 %v0_a61c, i32* %v5_a620, i32 12, i32 0, i32 %v6_a608)
  %v0_a624 = load i32, i32* @r4, align 4
  store i32 %v0_a624, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a634 = load i32, i32* @r5, align 4
  store i32 %v0_a634, i32* %r0.global-to-local, align 4
  %v5_a638 = inttoptr i32 %v0_a624 to i32*
  %v6_a638 = call i32 @function_8258(i32 %v0_a634, i32* %v5_a638, i32 13, i32 0, i32 %v6_a620)
  %v0_a63c = load i32, i32* @r4, align 4
  store i32 %v0_a63c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a64c = load i32, i32* @r5, align 4
  store i32 %v0_a64c, i32* %r0.global-to-local, align 4
  %v5_a650 = inttoptr i32 %v0_a63c to i32*
  %v6_a650 = call i32 @function_8258(i32 %v0_a64c, i32* %v5_a650, i32 14, i32 1, i32 %v6_a638)
  %v0_a654 = load i32, i32* @r4, align 4
  store i32 %v0_a654, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a664 = load i32, i32* @r5, align 4
  store i32 %v0_a664, i32* %r0.global-to-local, align 4
  %v5_a668 = inttoptr i32 %v0_a654 to i32*
  %v6_a668 = call i32 @function_8258(i32 %v0_a664, i32* %v5_a668, i32 15, i32 0, i32 %v6_a650)
  %v0_a670 = load i32, i32* @r4, align 4
  store i32 %v0_a670, i32* %r1.global-to-local, align 4
  %v2_a674 = load i32, i32* @global_var_1fbd0.42, align 4
  store i32 %v2_a674, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_a680 = load i32, i32* @r5, align 4
  store i32 %v0_a680, i32* %r0.global-to-local, align 4
  %v5_a684 = inttoptr i32 %v0_a670 to i32*
  %v6_a684 = call i32 @function_81ec(i32 %v0_a680, i32* %v5_a684, i32 19, i32 %v2_a674, i32 %v6_a668)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a690 = call i32 @function_fe58(i32* null)
  %v1_a694 = load i32, i32* @r6, align 4
  %v2_a694 = add i32 %v1_a694, %v2_a690
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a6a8 = call i32 @function_109c0(i32 2, i32 3, i32 6)
  store i32 %v3_a6a8, i32* %r0.global-to-local, align 4
  %v7_a6ac = icmp eq i32 %v3_a6a8, -1
  store i1 %v7_a6ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a6a8, i32* @r8, align 4
  br i1 %v7_a6ac, label %dec_label_pc_ab80, label %dec_label_pc_a6b8

dec_label_pc_a6b8:                                ; preds = %dec_label_pc_a4c4
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a6c0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a6c0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a6d4 = call i32 @function_1097c(i32 %v3_a6a8, i32 0, i32 3, i32 %v6_a6c0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_a6d4, i32* %r0.global-to-local, align 4
  %v7_a6d8 = icmp eq i32 %v5_a6d4, -1
  store i1 %v7_a6d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6d8, label %dec_label_pc_ab8c, label %dec_label_pc_a6e0

dec_label_pc_a6e0:                                ; preds = %dec_label_pc_a6b8
  %v3_a6ec = mul i32 %v7_a52c, 65536
  store i32 %v3_a6ec, i32* %r0.global-to-local, align 4
  %v0_a6f4 = load i32, i32* %fp.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_a5f0, i32* %r1.global-to-local, align 4
  %v3_a700 = urem i32 %v7_a52c, 65536
  store i32 %v3_a700, i32* %r2.global-to-local, align 4
  %v3_a704 = urem i32 %v6_a588, 65536
  store i32 %v3_a704, i32* %r3.global-to-local, align 4
  %v3_a708 = urem i32 %v0_a6f4, 65536
  %v0_a70c = load i32, i32* @sb, align 4
  %v2_a70c = icmp eq i32 %v0_a70c, 0
  store i1 %v2_a70c, i1* %cpsr_z.global-to-local, align 1
  %v1_a71c = urem i32 %v6_a5f0, 256
  store i32 %v1_a71c, i32* @fp, align 4
  br i1 %v2_a70c, label %dec_label_pc_a970.preheader, label %dec_label_pc_a724

dec_label_pc_a724:                                ; preds = %dec_label_pc_a6e0
  %trunc = trunc i32 %v7_a52c to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp60 = mul nuw nsw i32 %v3_a704, 256
  %v3_a750 = and i32 %tmp60, 65280
  %tmp61 = mul i32 %v0_a6f4, 256
  %v3_a754 = and i32 %tmp61, 65280
  %tmp62 = mul i32 %v6_a5c0, 256
  %v3_a758 = and i32 %tmp62, 65280
  %v1_a75c = urem i32 %v6_a5f0, 2
  %tmp63 = udiv i32 %v6_a588, 256
  %v4_a760 = urem i32 %tmp63, 256
  %v5_a760 = or i32 %v3_a750, %v4_a760
  %tmp64 = udiv i32 %v0_a6f4, 256
  %v4_a764 = urem i32 %tmp64, 256
  %v5_a764 = or i32 %v4_a764, %v3_a754
  store i32 %v5_a764, i32* @r5, align 4
  %tmp65 = udiv i32 %v6_a5c0, 256
  %v4_a768 = urem i32 %tmp65, 256
  %v5_a768 = or i32 %v4_a768, %v3_a758
  store i32 %v5_a768, i32* @lr, align 4
  %v1_a77c = urem i32 %v6_a608, 2
  store i32 %v1_a77c, i32* %r1.global-to-local, align 4
  %v1_a780 = urem i32 %v6_a620, 2
  store i32 %v1_a780, i32* %r2.global-to-local, align 4
  %v1_a784 = urem i32 %v6_a638, 2
  store i32 %v1_a784, i32* %r3.global-to-local, align 4
  %v1_a788 = urem i32 %v6_a650, 2
  store i32 %v1_a788, i32* @r6, align 4
  %v1_a78c = urem i32 %v6_a668, 2
  store i32 %v1_a78c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_a808 = trunc i32 %v6_a544 to i8
  %sext6 = mul nuw i32 %v5_a760, 65536
  %v4_a834 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_a764, 65536
  %v6_a870 = sdiv i32 %sext7, 65536
  %tmp = sub nsw i32 0, %v1_a77c
  %v4_a888 = and i32 %tmp, 16
  %tmp66 = sub nsw i32 0, %v1_a780
  %v4_a8a0 = and i32 %tmp66, 8
  %tmp67 = sub nsw i32 0, %v1_a784
  %v4_a8b4 = and i32 %tmp67, 4
  %tmp68 = sub nsw i32 0, %v1_a788
  %v3_a8c8 = and i32 %tmp68, 2
  br label %dec_label_pc_a7b4

dec_label_pc_a7b4:                                ; preds = %.thread, %dec_label_pc_a724
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_a7bc = call i32 @function_11528(i32 128, i32 1)
  store i32 %v2_a7bc, i32* %r0.global-to-local, align 4
  %v3_a7c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a7c0, i32* %r2.global-to-local, align 4
  %v1_a7c4 = load i32, i32* @sl, align 4
  %v2_a7c4 = load i32, i32* @r4, align 4
  %v5_a7c4 = mul i32 %v2_a7c4, 4
  %v6_a7c4 = add i32 %v5_a7c4, %v1_a7c4
  %v7_a7c4 = inttoptr i32 %v6_a7c4 to i32*
  store i32 %v2_a7bc, i32* %v7_a7c4, align 4
  %v0_a7c8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a7c8 = mul i32 %v0_a7c8, 32
  store i32 %v3_a7c8, i32* %r3.global-to-local, align 4
  %v0_a7cc = load i32, i32* @sl, align 4
  %v4_a7cc = mul i32 %v0_a7c8, 4
  %v5_a7cc = add i32 %v0_a7cc, %v4_a7cc
  %v6_a7cc = inttoptr i32 %v5_a7cc to i32*
  %v7_a7cc = load i32, i32* %v6_a7cc, align 4
  store i32 %v7_a7cc, i32* %r4.global-to-local, align 4
  %v5_a7d0 = mul i32 %v0_a7c8, 24
  store i32 %v5_a7d0, i32* %r3.global-to-local, align 4
  %v1_a7d4 = load i32, i32* @r7, align 4
  %v2_a7d4 = add i32 %v1_a7d4, %v5_a7d0
  store i32 %v2_a7d4, i32* %r0.global-to-local, align 4
  %v1_a7d8 = inttoptr i32 %v7_a7cc to i8*
  %v2_a7d8 = load i8, i8* %v1_a7d8, align 1
  %tmp69 = urem i8 %v2_a7d8, 16
  %v1_a7dc = zext i8 %tmp69 to i32
  %v1_a7e0 = or i32 %v1_a7dc, 64
  store i32 %v1_a7e0, i32* %r3.global-to-local, align 4
  %v1_a7e4 = trunc i32 %v1_a7e0 to i8
  store i8 %v1_a7e4, i8* %v1_a7d8, align 1
  %v0_a7e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a7e8 = inttoptr i32 %v0_a7e8 to i8*
  %v2_a7e8 = load i8, i8* %v1_a7e8, align 1
  %v1_a7ec = and i8 %v2_a7e8, -16
  %v1_a7f0 = or i8 %v1_a7ec, 5
  store i32 %v1_a570, i32* %r1.global-to-local, align 4
  store i8 %v1_a7f0, i8* %v1_a7e8, align 1
  %v2_a800 = load i32, i32* %r4.global-to-local, align 4
  %v3_a800 = add i32 %v2_a800, 1
  %v4_a800 = inttoptr i32 %v3_a800 to i8*
  store i8 %v5_a528, i8* %v4_a800, align 1
  store i32 %v1_a54c, i32* %r3.global-to-local, align 4
  %v2_a808 = load i32, i32* %r4.global-to-local, align 4
  %v3_a808 = add i32 %v2_a808, 8
  %v4_a808 = inttoptr i32 %v3_a808 to i8*
  store i8 %v1_a808, i8* %v4_a808, align 1
  %v0_a810 = load i32, i32* %r1.global-to-local, align 4
  %v2_a810 = icmp eq i32 %v0_a810, 0
  store i1 %v2_a810, i1* %cpsr_z.global-to-local, align 1
  %v2_a814 = load i32, i32* %r4.global-to-local, align 4
  %v3_a814 = add i32 %v2_a814, 4
  %v4_a814 = inttoptr i32 %v3_a814 to i16*
  store i16 %rev, i16* %v4_a814, align 2
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_a81c = load i32, i32* %r4.global-to-local, align 4
  %v3_a81c = add i32 %v2_a81c, 9
  %v4_a81c = inttoptr i32 %v3_a81c to i8*
  store i8 6, i8* %v4_a81c, align 1
  %v0_a820 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a820, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a7b4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a824 = load i32, i32* %r4.global-to-local, align 4
  %v4_a824 = add i32 %v3_a824, 6
  %v5_a824 = inttoptr i32 %v4_a824 to i16*
  store i16 64, i16* %v5_a824, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a7b4, %bb
  store i32 %v6_a684, i32* %r3.global-to-local, align 4
  %v1_a82c = load i32, i32* %r4.global-to-local, align 4
  %v2_a82c = add i32 %v1_a82c, 12
  %v3_a82c = inttoptr i32 %v2_a82c to i32*
  store i32 %v6_a684, i32* %v3_a82c, align 4
  %v0_a830 = load i32, i32* %r0.global-to-local, align 4
  %v1_a830 = add i32 %v0_a830, 16
  %v2_a830 = inttoptr i32 %v1_a830 to i32*
  %v3_a830 = load i32, i32* %v2_a830, align 4
  store i32 %v3_a830, i32* %r3.global-to-local, align 4
  store i32 %v4_a834, i32* %r0.global-to-local, align 4
  %v2_a83c = load i32, i32* %r4.global-to-local, align 4
  %v3_a83c = add i32 %v2_a83c, 2
  %v4_a83c = inttoptr i32 %v3_a83c to i16*
  store i16 15360, i16* %v4_a83c, align 2
  %v0_a840 = load i32, i32* %r3.global-to-local, align 4
  %v1_a840 = load i32, i32* %r4.global-to-local, align 4
  %v2_a840 = add i32 %v1_a840, 16
  %v3_a840 = inttoptr i32 %v2_a840 to i32*
  store i32 %v0_a840, i32* %v3_a840, align 4
  %v0_a844 = load i32, i32* %r0.global-to-local, align 4
  %v1_a844 = trunc i32 %v0_a844 to i16
  %v2_a844 = load i32, i32* %r4.global-to-local, align 4
  %v3_a844 = add i32 %v2_a844, 20
  %v4_a844 = inttoptr i32 %v3_a844 to i16*
  store i16 %v1_a844, i16* %v4_a844, align 2
  %v0_a848 = load i32, i32* %r4.global-to-local, align 4
  %v1_a848 = add i32 %v0_a848, 20
  store i32 %v1_a848, i32* %r1.global-to-local, align 4
  %v1_a84c = add i32 %v0_a848, 32
  %v2_a84c = inttoptr i32 %v1_a84c to i8*
  %v3_a84c = load i8, i8* %v2_a84c, align 1
  %v4_a84c = zext i8 %v3_a84c to i32
  store i32 %v4_a84c, i32* %r3.global-to-local, align 4
  %v1_a850 = add i32 %v0_a848, 33
  %v2_a850 = inttoptr i32 %v1_a850 to i8*
  %v3_a850 = load i8, i8* %v2_a850, align 1
  %v4_a850 = zext i8 %v3_a850 to i32
  store i32 %v1_a75c, i32* %r0.global-to-local, align 4
  %v1_a858 = urem i8 %v3_a84c, 16
  %v1_a85c = or i8 %v1_a858, -96
  %v1_a860 = and i32 %v4_a850, 223
  store i32 %v1_a860, i32* %r2.global-to-local, align 4
  store i8 %v1_a85c, i8* %v2_a84c, align 1
  %v0_a868 = load i32, i32* %r2.global-to-local, align 4
  %v1_a868 = load i32, i32* %r0.global-to-local, align 4
  %v4_a868 = mul i32 %v1_a868, 32
  %v5_a868 = or i32 %v4_a868, %v0_a868
  store i32 %v5_a868, i32* %r2.global-to-local, align 4
  store i32 %v5_a768, i32* %r0.global-to-local, align 4
  store i32 %v6_a870, i32* %r3.global-to-local, align 4
  %v1_a874 = trunc i32 %v5_a868 to i8
  %v2_a874 = load i32, i32* %r1.global-to-local, align 4
  %v3_a874 = add i32 %v2_a874, 13
  %v4_a874 = inttoptr i32 %v3_a874 to i8*
  store i8 %v1_a874, i8* %v4_a874, align 1
  %v0_a878 = load i32, i32* %r3.global-to-local, align 4
  %v1_a878 = trunc i32 %v0_a878 to i16
  %v2_a878 = load i32, i32* %r1.global-to-local, align 4
  %v3_a878 = add i32 %v2_a878, 2
  %v4_a878 = inttoptr i32 %v3_a878 to i16*
  store i16 %v1_a878, i16* %v4_a878, align 2
  %v0_a87c = load i32, i32* %r1.global-to-local, align 4
  %v1_a87c = add i32 %v0_a87c, 13
  %v2_a87c = inttoptr i32 %v1_a87c to i8*
  %v3_a87c = load i8, i8* %v2_a87c, align 1
  %v4_a87c = zext i8 %v3_a87c to i32
  store i32 %v1_a77c, i32* %r2.global-to-local, align 4
  %v1_a884 = and i32 %v4_a87c, 239
  %v5_a888 = or i32 %v1_a884, %v4_a888
  store i32 %v5_a888, i32* %r3.global-to-local, align 4
  %v0_a88c = load i32, i32* %r0.global-to-local, align 4
  %v2_a88c = add i32 %v0_a87c, 4
  %v3_a88c = inttoptr i32 %v2_a88c to i32*
  store i32 %v0_a88c, i32* %v3_a88c, align 4
  %v0_a890 = load i32, i32* %r3.global-to-local, align 4
  %v1_a890 = trunc i32 %v0_a890 to i8
  %v2_a890 = load i32, i32* %r1.global-to-local, align 4
  %v3_a890 = add i32 %v2_a890, 13
  %v4_a890 = inttoptr i32 %v3_a890 to i8*
  store i8 %v1_a890, i8* %v4_a890, align 1
  %v0_a894 = load i32, i32* %r1.global-to-local, align 4
  %v1_a894 = add i32 %v0_a894, 13
  %v2_a894 = inttoptr i32 %v1_a894 to i8*
  %v3_a894 = load i8, i8* %v2_a894, align 1
  %v4_a894 = zext i8 %v3_a894 to i32
  store i32 %v1_a780, i32* %r3.global-to-local, align 4
  %v1_a89c = and i32 %v4_a894, 247
  %v5_a8a0 = or i32 %v1_a89c, %v4_a8a0
  store i32 %v5_a8a0, i32* %r2.global-to-local, align 4
  %v1_a8a4 = trunc i32 %v5_a8a0 to i8
  store i8 %v1_a8a4, i8* %v2_a894, align 1
  %v0_a8a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8a8 = add i32 %v0_a8a8, 13
  %v2_a8a8 = inttoptr i32 %v1_a8a8 to i8*
  %v3_a8a8 = load i8, i8* %v2_a8a8, align 1
  %v4_a8a8 = zext i8 %v3_a8a8 to i32
  store i32 %v1_a784, i32* %r0.global-to-local, align 4
  %v1_a8b0 = and i32 %v4_a8a8, 251
  %v5_a8b4 = or i32 %v1_a8b0, %v4_a8b4
  store i32 %v5_a8b4, i32* %r3.global-to-local, align 4
  %v1_a8b8 = trunc i32 %v5_a8b4 to i8
  store i8 %v1_a8b8, i8* %v2_a8a8, align 1
  %v0_a8bc = load i32, i32* %r1.global-to-local, align 4
  %v1_a8bc = add i32 %v0_a8bc, 13
  %v2_a8bc = inttoptr i32 %v1_a8bc to i8*
  %v3_a8bc = load i8, i8* %v2_a8bc, align 1
  %v4_a8bc = zext i8 %v3_a8bc to i32
  store i32 %v1_a788, i32* %r3.global-to-local, align 4
  %v1_a8c4 = and i32 %v4_a8bc, 253
  %v4_a8c8 = or i32 %v1_a8c4, %v3_a8c8
  store i32 %v4_a8c8, i32* %r2.global-to-local, align 4
  %v1_a8cc = trunc i32 %v4_a8c8 to i8
  store i8 %v1_a8cc, i8* %v2_a8bc, align 1
  %v0_a8d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8d0 = add i32 %v0_a8d0, 13
  %v2_a8d0 = inttoptr i32 %v1_a8d0 to i8*
  %v3_a8d0 = load i8, i8* %v2_a8d0, align 1
  %v4_a8d0 = zext i8 %v3_a8d0 to i32
  store i32 %v1_a78c, i32* %r0.global-to-local, align 4
  %v1_a8d8 = and i32 %v4_a8d0, 254
  %v2_a8dc = or i32 %v1_a8d8, %v1_a78c
  store i32 %v2_a8dc, i32* %r3.global-to-local, align 4
  store i32 2, i32* @r5, align 4
  store i32 4, i32* @r6, align 4
  %v1_a8e8 = trunc i32 %v2_a8dc to i8
  store i8 %v1_a8e8, i8* %v2_a8d0, align 1
  %v0_a8ec = load i32, i32* @r5, align 4
  %v1_a8ec = trunc i32 %v0_a8ec to i8
  %v2_a8ec = load i32, i32* %r4.global-to-local, align 4
  %v3_a8ec = add i32 %v2_a8ec, 40
  %v4_a8ec = inttoptr i32 %v3_a8ec to i8*
  store i8 %v1_a8ec, i8* %v4_a8ec, align 1
  %v0_a8f0 = load i32, i32* @r6, align 4
  %v1_a8f0 = trunc i32 %v0_a8f0 to i8
  %v2_a8f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a8f0 = add i32 %v2_a8f0, 41
  %v4_a8f0 = inttoptr i32 %v3_a8f0 to i8*
  store i8 %v1_a8f0, i8* %v4_a8f0, align 1
  %v0_a8f4 = call i32 @function_d3a8()
  %v1_a8f8 = urem i32 %v0_a8f4, 16
  %v1_a8fc = or i32 %v1_a8f8, 1392
  %v1_a900 = add nuw nsw i32 %v1_a8fc, 8
  %v3_a904 = mul nuw nsw i32 %v1_a900, 65536
  store i32 %v3_a904, i32* %r0.global-to-local, align 4
  %v3_a908 = mul nuw nsw i32 %v1_a900, 256
  %v5_a910 = or i32 %v3_a908, 5
  %v1_a914 = trunc i32 %v5_a910 to i16
  %v2_a914 = load i32, i32* %r4.global-to-local, align 4
  %v3_a914 = add i32 %v2_a914, 42
  %v4_a914 = inttoptr i32 %v3_a914 to i16*
  store i16 %v1_a914, i16* %v4_a914, align 2
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_a920 = load i32, i32* %r4.global-to-local, align 4
  %v3_a920 = add i32 %v2_a920, 46
  %v4_a920 = inttoptr i32 %v3_a920 to i8*
  store i8 8, i8* %v4_a920, align 1
  %v0_a924 = load i32, i32* %r2.global-to-local, align 4
  %v1_a924 = trunc i32 %v0_a924 to i8
  %v2_a924 = load i32, i32* %r4.global-to-local, align 4
  %v3_a924 = add i32 %v2_a924, 47
  %v4_a924 = inttoptr i32 %v3_a924 to i8*
  store i8 %v1_a924, i8* %v4_a924, align 1
  %v0_a928 = load i32, i32* @r6, align 4
  %v1_a928 = trunc i32 %v0_a928 to i8
  %v2_a928 = load i32, i32* %r4.global-to-local, align 4
  %v3_a928 = add i32 %v2_a928, 44
  %v4_a928 = inttoptr i32 %v3_a928 to i8*
  store i8 %v1_a928, i8* %v4_a928, align 1
  %v0_a92c = load i32, i32* @r5, align 4
  %v1_a92c = trunc i32 %v0_a92c to i8
  %v2_a92c = load i32, i32* %r4.global-to-local, align 4
  %v3_a92c = add i32 %v2_a92c, 45
  %v4_a92c = inttoptr i32 %v3_a92c to i8*
  store i8 %v1_a92c, i8* %v4_a92c, align 1
  %v0_a930 = call i32 @function_d3a8()
  store i32 %v0_a930, i32* %r0.global-to-local, align 4
  %v2_a938 = load i32, i32* %r4.global-to-local, align 4
  %v3_a938 = add i32 %v2_a938, 59
  %v4_a938 = inttoptr i32 %v3_a938 to i8*
  store i8 6, i8* %v4_a938, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_a948 = load i32, i32* %r4.global-to-local, align 4
  %v2_a948 = add i32 %v1_a948, 48
  %v3_a948 = inttoptr i32 %v2_a948 to i32*
  store i32 %v0_a930, i32* %v3_a948, align 4
  %v0_a94c = load i32, i32* %r3.global-to-local, align 4
  %v1_a94c = load i32, i32* %r4.global-to-local, align 4
  %v2_a94c = add i32 %v1_a94c, 52
  %v3_a94c = inttoptr i32 %v2_a94c to i32*
  store i32 %v0_a94c, i32* %v3_a94c, align 4
  %v0_a950 = load i32, i32* %r2.global-to-local, align 4
  %v1_a950 = trunc i32 %v0_a950 to i8
  %v2_a950 = load i32, i32* %r4.global-to-local, align 4
  %v3_a950 = add i32 %v2_a950, 56
  %v4_a950 = inttoptr i32 %v3_a950 to i8*
  store i8 %v1_a950, i8* %v4_a950, align 1
  %v0_a954 = load i32, i32* %r1.global-to-local, align 4
  %v1_a954 = trunc i32 %v0_a954 to i8
  %v2_a954 = load i32, i32* %r4.global-to-local, align 4
  %v3_a954 = add i32 %v2_a954, 58
  %v4_a954 = inttoptr i32 %v3_a954 to i8*
  store i8 %v1_a954, i8* %v4_a954, align 1
  %v0_a958 = load i32, i32* %r1.global-to-local, align 4
  %v1_a958 = trunc i32 %v0_a958 to i8
  %v2_a958 = load i32, i32* %r4.global-to-local, align 4
  %v3_a958 = add i32 %v2_a958, 57
  %v4_a958 = inttoptr i32 %v3_a958 to i8*
  store i8 %v1_a958, i8* %v4_a958, align 1
  %v3_a95c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a95c, i32* %r3.global-to-local, align 4
  %v1_a960 = load i32, i32* %r2.global-to-local, align 4
  %v2_a960 = add i32 %v1_a960, %v3_a95c
  store i32 %v2_a960, i32* @r4, align 4
  %v1_a964 = load i32, i32* @sb, align 4
  %v9_a964 = icmp eq i32 %v2_a960, %v1_a964
  store i1 %v9_a964, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_a960, i32* %stack_var_-44, align 4
  %v5_a96c = icmp slt i32 %v2_a960, %v1_a964
  br i1 %v5_a96c, label %dec_label_pc_a7b4, label %dec_label_pc_a970.preheader

dec_label_pc_a970.preheader:                      ; preds = %.thread, %dec_label_pc_a6e0
  %v0_a97410 = phi i32 [ 0, %dec_label_pc_a6e0 ], [ %v1_a964, %.thread ]
  %v2_a98c = icmp eq i32 %v6_a684, -1
  %v7_a98c = icmp eq i32 %v6_a684, -1
  %v3_a9a0 = icmp eq i32 %v3_a700, 65535
  br label %dec_label_pc_a970

dec_label_pc_a970:                                ; preds = %dec_label_pc_ab6c.dec_label_pc_a970_crit_edge, %dec_label_pc_a970.preheader
  %v0_a974 = phi i32 [ %v0_a974.pre, %dec_label_pc_ab6c.dec_label_pc_a970_crit_edge ], [ %v0_a97410, %dec_label_pc_a970.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a974 = icmp eq i32 %v0_a974, 0
  store i1 %v2_a974, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a974, label %dec_label_pc_ab6c, label %dec_label_pc_a980

dec_label_pc_a980:                                ; preds = %dec_label_pc_a970
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aa64

dec_label_pc_a988:                                ; preds = %dec_label_pc_aa64
  store i32 %v6_a684, i32* %r3.global-to-local, align 4
  store i1 %v7_a98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a98c, label %dec_label_pc_aae4, label %dec_label_pc_a994

dec_label_pc_a994:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_a988
  store i32 %v3_a700, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9a0, label %dec_label_pc_ab00, label %dec_label_pc_a9a8

dec_label_pc_a9a8:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_a994
  %v1_a9ac = phi i32 [ %v1_aaf4, %dec_label_pc_aae4 ], [ 65535, %dec_label_pc_a994 ]
  store i32 %v3_a704, i32* %r1.global-to-local, align 4
  %v9_a9ac = icmp eq i32 %v3_a704, %v1_a9ac
  store i1 %v9_a9ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9ac, label %dec_label_pc_ab14, label %dec_label_pc_a9b4

dec_label_pc_a9b4:                                ; preds = %dec_label_pc_ab00.dec_label_pc_a9b4_crit_edge, %dec_label_pc_a9a8
  %v1_a9b8 = phi i32 [ %v1_a9b8.pre, %dec_label_pc_ab00.dec_label_pc_a9b4_crit_edge ], [ %v1_a9ac, %dec_label_pc_a9a8 ]
  store i32 %v3_a708, i32* %r2.global-to-local, align 4
  %v9_a9b8 = icmp eq i32 %v3_a708, %v1_a9b8
  store i1 %v9_a9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9b8, label %dec_label_pc_ab28, label %dec_label_pc_a9c0

dec_label_pc_a9c0:                                ; preds = %dec_label_pc_ab14.dec_label_pc_a9c0_crit_edge, %dec_label_pc_a9b4
  %v1_a9c4 = phi i32 [ %v1_a9c4.pre, %dec_label_pc_ab14.dec_label_pc_a9c0_crit_edge ], [ %v1_a9b8, %dec_label_pc_a9b4 ]
  store i32 %v6_a5c0, i32* %r3.global-to-local, align 4
  %v9_a9c4 = icmp eq i32 %v6_a5c0, %v1_a9c4
  store i1 %v9_a9c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9c4, label %dec_label_pc_ab3c, label %dec_label_pc_a9cc

dec_label_pc_a9cc:                                ; preds = %dec_label_pc_ab28.dec_label_pc_a9cc_crit_edge, %dec_label_pc_a9c0
  %v1_a9d0 = phi i32 [ %v1_a9d0.pre, %dec_label_pc_ab28.dec_label_pc_a9cc_crit_edge ], [ %v1_a9c4, %dec_label_pc_a9c0 ]
  store i32 %v6_a5d8, i32* %r0.global-to-local, align 4
  %v9_a9d0 = icmp eq i32 %v6_a5d8, %v1_a9d0
  store i1 %v9_a9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9d0, label %dec_label_pc_ab50, label %dec_label_pc_a9d8

dec_label_pc_a9d8:                                ; preds = %dec_label_pc_ab3c, %dec_label_pc_a9cc
  %v0_a9d8 = load i32, i32* @fp, align 4
  %v2_a9d8 = icmp eq i32 %v0_a9d8, 0
  store i1 %v2_a9d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a9d8, label %dec_label_pc_a9e0, label %dec_label_pc_ab60

dec_label_pc_a9e0:                                ; preds = %dec_label_pc_a9d8, %dec_label_pc_ab50, %dec_label_pc_ab60
  %v2_a9e4 = load i32, i32* @r5, align 4
  %v3_a9e4 = add i32 %v2_a9e4, 10
  %v4_a9e4 = inttoptr i32 %v3_a9e4 to i16*
  store i16 0, i16* %v4_a9e4, align 2
  %v0_a9e8 = load i32, i32* @r5, align 4
  store i32 %v0_a9e8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_a9f0 = call i32 @function_bf78(i32 %v0_a9e8, i32 20)
  %v3_a9f0 = trunc i32 %v2_a9f0 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a9f8 = load i32, i32* @r5, align 4
  %v4_a9f8 = add i32 %v3_a9f8, 10
  %v5_a9f8 = inttoptr i32 %v4_a9f8 to i16*
  store i16 %v3_a9f0, i16* %v5_a9f8, align 2
  %v0_a9fc = load i32, i32* @r6, align 4
  store i32 %v0_a9fc, i32* @r1, align 4
  %v0_aa00 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa00 = trunc i32 %v0_aa00 to i16
  %v3_aa00 = add i32 %v0_a9fc, 16
  %v4_aa00 = inttoptr i32 %v3_aa00 to i16*
  store i16 %v1_aa00, i16* %v4_aa00, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_aa0c = load i32, i32* @r5, align 4
  store i32 %v0_aa0c, i32* %r0.global-to-local, align 4
  %v4_aa10 = call i32 @function_bfc8(i32 %v0_aa0c, i32 %v0_a9fc, i32 10240, i32 40)
  %v5_aa10 = trunc i32 %v4_aa10 to i16
  store i32 %v4_aa10, i32* %r0.global-to-local, align 4
  %v3_aa14 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa14, i32* %r3.global-to-local, align 4
  %v3_aa18 = mul i32 %v3_aa14, 32
  store i32 %v3_aa18, i32* %lr.global-to-local, align 4
  %v3_aa1c = load i32, i32* @r6, align 4
  %v4_aa1c = add i32 %v3_aa1c, 16
  %v5_aa1c = inttoptr i32 %v4_aa1c to i16*
  store i16 %v5_aa10, i16* %v5_aa1c, align 2
  %v0_aa20 = load i32, i32* %lr.global-to-local, align 4
  %v1_aa20 = load i32, i32* %r3.global-to-local, align 4
  %tmp70 = mul i32 %v1_aa20, -8
  %v5_aa20 = add i32 %v0_aa20, %tmp70
  store i32 %v5_aa20, i32* %lr.global-to-local, align 4
  %v0_aa24 = load i32, i32* @r6, align 4
  %v1_aa24 = add i32 %v0_aa24, 2
  %v2_aa24 = inttoptr i32 %v1_aa24 to i16*
  %v3_aa24 = load i16, i16* %v2_aa24, align 2
  %v1_aa28 = load i32, i32* @r7, align 4
  %v2_aa28 = add i32 %v1_aa28, %v5_aa20
  store i32 %v2_aa28, i32* @lr, align 4
  %v3_aa2c = add i32 %v2_aa28, 2
  %v4_aa2c = inttoptr i32 %v3_aa2c to i16*
  store i16 %v3_aa24, i16* %v4_aa2c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_aa38 = load i32, i32* @r5, align 4
  store i32 %v0_aa38, i32* %r1.global-to-local, align 4
  %v0_aa3c = load i32, i32* @r8, align 4
  store i32 %v0_aa3c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_aa44 = load i32, i32* @lr, align 4
  %v6_aa4c = call i32 @function_1093c(i32 %v0_aa3c, i32 %v0_aa38, i32 60, i32 16384, i32 %v0_aa44, i32 16)
  %v3_aa50 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa50, i32* %r3.global-to-local, align 4
  %v1_aa54 = add i32 %v3_aa50, 1
  store i32 %v1_aa54, i32* %r0.global-to-local, align 4
  %v1_aa58 = load i32, i32* @sb, align 4
  %v9_aa58 = icmp eq i32 %v1_aa54, %v1_aa58
  store i1 %v9_aa58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa54, i32* %stack_var_-44, align 4
  %v6_aa60 = icmp slt i32 %v1_aa54, %v1_aa58
  br i1 %v6_aa60, label %dec_label_pc_aa64, label %dec_label_pc_ab6c

dec_label_pc_aa64:                                ; preds = %dec_label_pc_a9e0, %dec_label_pc_a980
  %v1_aa74 = phi i32 [ %v1_aa54, %dec_label_pc_a9e0 ], [ 0, %dec_label_pc_a980 ]
  %v5_aa68 = mul i32 %v1_aa74, 24
  %v1_aa6c = load i32, i32* @r7, align 4
  %v2_aa6c = add i32 %v1_aa6c, %v5_aa68
  store i32 %v2_aa6c, i32* %r3.global-to-local, align 4
  %v1_aa70 = add i32 %v2_aa6c, 20
  %v2_aa70 = inttoptr i32 %v1_aa70 to i8*
  %v3_aa70 = load i8, i8* %v2_aa70, align 1
  %v4_aa70 = zext i8 %v3_aa70 to i32
  store i32 %v4_aa70, i32* %r2.global-to-local, align 4
  %v0_aa74 = load i32, i32* @sl, align 4
  %v4_aa74 = mul i32 %v1_aa74, 4
  %v5_aa74 = add i32 %v0_aa74, %v4_aa74
  %v6_aa74 = inttoptr i32 %v5_aa74 to i32*
  %v7_aa74 = load i32, i32* %v6_aa74, align 4
  store i32 %v7_aa74, i32* @r5, align 4
  %v2_aa78 = icmp ugt i8 %v3_aa70, 30
  %v7_aa78 = icmp eq i8 %v3_aa70, 31
  store i1 %v7_aa78, i1* %cpsr_z.global-to-local, align 1
  %v1_aa7c = add i32 %v7_aa74, 20
  store i32 %v1_aa7c, i32* @r6, align 4
  %v2_aa80 = xor i1 %v7_aa78, true
  %v3_aa80 = and i1 %v2_aa78, %v2_aa80
  br i1 %v3_aa80, label %dec_label_pc_a988, label %dec_label_pc_aa84

dec_label_pc_aa84:                                ; preds = %dec_label_pc_aa64
  %v1_aa84 = add i32 %v2_aa6c, 16
  %v2_aa84 = inttoptr i32 %v1_aa84 to i32*
  %v3_aa84 = load i32, i32* %v2_aa84, align 4
  store i32 %v3_aa84, i32* %r4.global-to-local, align 4
  %v0_aa88 = call i32 @function_d3a8()
  store i32 %v0_aa88, i32* %r0.global-to-local, align 4
  %v3_aa8c = load i32, i32* %stack_var_-44, align 4
  %v5_aa94 = mul i32 %v3_aa8c, 24
  %v0_aa98 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa98 = and i32 %v0_aa98, 16711680
  %v3_aa9c = udiv i32 %v0_aa98, 16777216
  %v4_aaa0 = udiv i32 %v1_aa98, 256
  %v5_aaa0 = or i32 %v4_aaa0, %v3_aa9c
  store i32 %v5_aaa0, i32* %r2.global-to-local, align 4
  %v1_aaa4 = load i32, i32* @r7, align 4
  %v2_aaa4 = add i32 %v1_aaa4, %v5_aa94
  store i32 %v2_aaa4, i32* %r1.global-to-local, align 4
  %v1_aaa8 = and i32 %v0_aa98, 65280
  store i32 %v1_aaa8, i32* %r3.global-to-local, align 4
  %v1_aaac = add i32 %v2_aaa4, 20
  %v2_aaac = inttoptr i32 %v1_aaac to i8*
  %v3_aaac = load i8, i8* %v2_aaac, align 1
  %v4_aaac = zext i8 %v3_aaac to i32
  %v5_aab4 = call i32 @llvm.bswap.i32(i32 %v0_aa98)
  %v7_aab8 = lshr i32 %v0_aa88, %v4_aaac
  %v8_aab8 = add i32 %v7_aab8, %v5_aab4
  store i32 %v8_aab8, i32* %r2.global-to-local, align 4
  %v1_aabc = and i32 %v8_aab8, 16711680
  store i32 %v1_aabc, i32* %r0.global-to-local, align 4
  %v1_aac8 = and i32 %v8_aab8, 65280
  store i32 %v1_aac8, i32* %r1.global-to-local, align 4
  %v5_aad0 = call i32 @llvm.bswap.i32(i32 %v8_aab8)
  %v1_aad4 = load i32, i32* @r5, align 4
  %v2_aad4 = add i32 %v1_aad4, 16
  %v3_aad4 = inttoptr i32 %v2_aad4 to i32*
  store i32 %v5_aad0, i32* %v3_aad4, align 4
  store i32 %v6_a684, i32* %r3.global-to-local, align 4
  store i1 %v7_a98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a98c, label %dec_label_pc_aae4, label %dec_label_pc_a994

dec_label_pc_aae4:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_a988
  %v0_aae4 = call i32 @function_d3a8()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_aaec = load i32, i32* @r5, align 4
  %v2_aaec = add i32 %v1_aaec, 12
  %v3_aaec = inttoptr i32 %v2_aaec to i32*
  store i32 %v0_aae4, i32* %v3_aaec, align 4
  store i32 %v3_a700, i32* %r0.global-to-local, align 4
  %v0_aaf4 = load i32, i32* %r4.global-to-local, align 4
  %v1_aaf4 = add i32 %v0_aaf4, -1
  store i32 %v1_aaf4, i32* @r4, align 4
  %v9_aaf8 = icmp eq i32 %v3_a700, %v1_aaf4
  store i1 %v9_aaf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aaf8, label %dec_label_pc_ab00, label %dec_label_pc_a9a8

dec_label_pc_ab00:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_a994
  %v0_ab00 = call i32 @function_d3a8()
  %v1_ab00 = trunc i32 %v0_ab00 to i16
  store i32 %v0_ab00, i32* %r0.global-to-local, align 4
  store i32 %v3_a704, i32* %r1.global-to-local, align 4
  %v1_ab08 = load i32, i32* @r4, align 4
  %v9_ab08 = icmp eq i32 %v3_a704, %v1_ab08
  store i1 %v9_ab08, i1* %cpsr_z.global-to-local, align 1
  %v3_ab0c = load i32, i32* @r5, align 4
  %v4_ab0c = add i32 %v3_ab0c, 4
  %v5_ab0c = inttoptr i32 %v4_ab0c to i16*
  store i16 %v1_ab00, i16* %v5_ab0c, align 2
  br i1 %v9_ab08, label %dec_label_pc_ab14, label %dec_label_pc_ab00.dec_label_pc_a9b4_crit_edge

dec_label_pc_ab00.dec_label_pc_a9b4_crit_edge:    ; preds = %dec_label_pc_ab00
  %v1_a9b8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a9b4

dec_label_pc_ab14:                                ; preds = %dec_label_pc_ab00, %dec_label_pc_a9a8
  %v0_ab14 = call i32 @function_d3a8()
  %v1_ab14 = trunc i32 %v0_ab14 to i16
  store i32 %v0_ab14, i32* %r0.global-to-local, align 4
  store i32 %v3_a708, i32* %r2.global-to-local, align 4
  %v1_ab1c = load i32, i32* @r4, align 4
  %v9_ab1c = icmp eq i32 %v3_a708, %v1_ab1c
  store i1 %v9_ab1c, i1* %cpsr_z.global-to-local, align 1
  %v3_ab20 = load i32, i32* @r5, align 4
  %v4_ab20 = add i32 %v3_ab20, 20
  %v5_ab20 = inttoptr i32 %v4_ab20 to i16*
  store i16 %v1_ab14, i16* %v5_ab20, align 2
  br i1 %v9_ab1c, label %dec_label_pc_ab28, label %dec_label_pc_ab14.dec_label_pc_a9c0_crit_edge

dec_label_pc_ab14.dec_label_pc_a9c0_crit_edge:    ; preds = %dec_label_pc_ab14
  %v1_a9c4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a9c0

dec_label_pc_ab28:                                ; preds = %dec_label_pc_ab14, %dec_label_pc_a9b4
  %v0_ab28 = call i32 @function_d3a8()
  %v1_ab28 = trunc i32 %v0_ab28 to i16
  store i32 %v0_ab28, i32* %r0.global-to-local, align 4
  store i32 %v6_a5c0, i32* %r3.global-to-local, align 4
  %v1_ab30 = load i32, i32* @r4, align 4
  %v9_ab30 = icmp eq i32 %v6_a5c0, %v1_ab30
  store i1 %v9_ab30, i1* %cpsr_z.global-to-local, align 1
  %v3_ab34 = load i32, i32* @r6, align 4
  %v4_ab34 = add i32 %v3_ab34, 2
  %v5_ab34 = inttoptr i32 %v4_ab34 to i16*
  store i16 %v1_ab28, i16* %v5_ab34, align 2
  br i1 %v9_ab30, label %dec_label_pc_ab3c, label %dec_label_pc_ab28.dec_label_pc_a9cc_crit_edge

dec_label_pc_ab28.dec_label_pc_a9cc_crit_edge:    ; preds = %dec_label_pc_ab28
  %v1_a9d0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a9cc

dec_label_pc_ab3c:                                ; preds = %dec_label_pc_ab28, %dec_label_pc_a9c0
  %v0_ab3c = call i32 @function_d3a8()
  %v1_ab40 = load i32, i32* @r6, align 4
  %v2_ab40 = add i32 %v1_ab40, 4
  %v3_ab40 = inttoptr i32 %v2_ab40 to i32*
  store i32 %v0_ab3c, i32* %v3_ab40, align 4
  store i32 %v6_a5d8, i32* %r0.global-to-local, align 4
  %v1_ab48 = load i32, i32* @r4, align 4
  %v9_ab48 = icmp eq i32 %v6_a5d8, %v1_ab48
  store i1 %v9_ab48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ab48, label %dec_label_pc_ab50, label %dec_label_pc_a9d8

dec_label_pc_ab50:                                ; preds = %dec_label_pc_ab3c, %dec_label_pc_a9cc
  %v0_ab50 = call i32 @function_d3a8()
  store i32 %v0_ab50, i32* %r0.global-to-local, align 4
  %v0_ab54 = load i32, i32* @fp, align 4
  %v2_ab54 = icmp eq i32 %v0_ab54, 0
  store i1 %v2_ab54, i1* %cpsr_z.global-to-local, align 1
  %v1_ab58 = load i32, i32* @r6, align 4
  %v2_ab58 = add i32 %v1_ab58, 8
  %v3_ab58 = inttoptr i32 %v2_ab58 to i32*
  store i32 %v0_ab50, i32* %v3_ab58, align 4
  br i1 %v2_ab54, label %dec_label_pc_a9e0, label %dec_label_pc_ab60

dec_label_pc_ab60:                                ; preds = %dec_label_pc_a9d8, %dec_label_pc_ab50
  %v0_ab60 = call i32 @function_d3a8()
  %v1_ab60 = trunc i32 %v0_ab60 to i16
  store i32 %v0_ab60, i32* %r0.global-to-local, align 4
  %v3_ab64 = load i32, i32* @r6, align 4
  %v4_ab64 = add i32 %v3_ab64, 18
  %v5_ab64 = inttoptr i32 %v4_ab64 to i16*
  store i16 %v1_ab60, i16* %v5_ab64, align 2
  br label %dec_label_pc_a9e0

dec_label_pc_ab6c:                                ; preds = %dec_label_pc_a9e0, %dec_label_pc_a970
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ab70 = call i32 @function_fe58(i32* null)
  store i32 %v2_ab70, i32* %r0.global-to-local, align 4
  store i32 %v2_a694, i32* %r3.global-to-local, align 4
  %v9_ab78 = icmp eq i32 %v2_a694, %v2_ab70
  store i1 %v9_ab78, i1* %cpsr_z.global-to-local, align 1
  %v6_ab7c = icmp slt i32 %v2_a694, %v2_ab70
  br i1 %v6_ab7c, label %dec_label_pc_ab80, label %dec_label_pc_ab6c.dec_label_pc_a970_crit_edge

dec_label_pc_ab6c.dec_label_pc_a970_crit_edge:    ; preds = %dec_label_pc_ab6c
  %v0_a974.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_a970

dec_label_pc_ab80:                                ; preds = %dec_label_pc_ab6c, %dec_label_pc_a4c4, %dec_label_pc_ab8c
  %v1_ab88 = phi i32 [ %v3_a6a8, %dec_label_pc_a4c4 ], [ %v1_ab90, %dec_label_pc_ab8c ], [ %v2_ab70, %dec_label_pc_ab6c ]
  store i32 %v3_a4c4, i32* %r4.global-to-local, align 4
  store i32 %v24_a4c4, i32* %fp.global-to-local, align 4
  store i32 %v27_a4c4, i32* %lr.global-to-local, align 4
  ret i32 %v1_ab88

dec_label_pc_ab8c:                                ; preds = %dec_label_pc_a6b8
  %v0_ab8c = load i32, i32* @r8, align 4
  store i32 %v0_ab8c, i32* %r0.global-to-local, align 4
  %v1_ab90 = call i32 @function_101d8(i32 %v0_ab8c)
  store i32 %v1_ab90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ab80

; uselistorder directives
  uselistorder i32 %v1_ab90, { 1, 0 }
  uselistorder i32 %v0_ab60, { 1, 0 }
  uselistorder i32 %v0_ab28, { 1, 0 }
  uselistorder i32 %v0_ab14, { 1, 0 }
  uselistorder i32 %v0_ab00, { 1, 0 }
  uselistorder i32 %v1_aaf4, { 1, 2, 0 }
  uselistorder i32 %v0_aa98, { 1, 2, 0, 3 }
  uselistorder i32 %v1_aa54, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_aa20, { 1, 0 }
  uselistorder i32 %v4_aa10, { 1, 0 }
  uselistorder i1 %v3_a9a0, { 1, 0 }
  uselistorder i1 %v7_a98c, { 2, 1, 0 }
  uselistorder i32 %v2_a960, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a7c8, { 1, 2, 0 }
  uselistorder i32 %v1_a78c, { 2, 1, 0 }
  uselistorder i32 %v1_a788, { 2, 0, 1 }
  uselistorder i32 %v1_a784, { 2, 0, 1 }
  uselistorder i32 %v1_a780, { 2, 0, 1 }
  uselistorder i32 %v1_a77c, { 2, 0, 1 }
  uselistorder i32 %v3_a704, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_a700, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_a6f4, { 1, 0, 2 }
  uselistorder i1 %v7_a6d8, { 1, 0 }
  uselistorder i1 %v7_a6ac, { 1, 0 }
  uselistorder i32 %v3_a6a8, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_a694, { 2, 1, 0 }
  uselistorder i32 %v6_a684, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_a5d8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a5c0, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_a54c, { 1, 0 }
  uselistorder i32 %v6_a544, { 1, 0 }
  uselistorder i32 %v7_a52c, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 12, 5, 6, 7, 8, 9, 10, 11, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 9, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 7, 5, 8, 10, 11, 9, 12, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 33, 34, 35, 37, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ab80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ab60, { 1, 0 }
  uselistorder label %dec_label_pc_a9e0, { 2, 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ab9c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ab9c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  store i32 %arg2, i32* @fp, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* %stack_var_-80, align 4
  %v2_abc0 = call i32 @function_11528(i32 %arg2, i32 4)
  %v0_abcc = load i32, i32* @fp, align 4
  store i32 %v0_abcc, i32* %r0.global-to-local, align 4
  %v2_abd0 = call i32 @function_11528(i32 %v0_abcc, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_abdc = load i32, i32* @r5, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_abd0, i32* @sb, align 4
  %v0_abec = load i32, i32* @r4, align 4
  store i32 %v0_abec, i32* %r0.global-to-local, align 4
  %v5_abf0 = inttoptr i32 %v0_abdc to i32*
  %v6_abf0 = call i32 @function_8258(i32 %v0_abec, i32* %v5_abf0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_abf4 = load i32, i32* @r5, align 4
  %v0_ac00 = load i32, i32* @r6, align 4
  store i32 %v0_ac00, i32* %r3.global-to-local, align 4
  %v0_ac04 = load i32, i32* @r4, align 4
  store i32 %v0_ac04, i32* %r0.global-to-local, align 4
  %v3_ac08 = urem i32 %v6_abf0, 65536
  store i32 %v3_ac08, i32* @r8, align 4
  %v5_ac0c = inttoptr i32 %v0_abf4 to i32*
  %v6_ac0c = call i32 @function_8258(i32 %v0_ac04, i32* %v5_ac0c, i32 6, i32 %v0_ac00, i32 ptrtoint (i32* @0 to i32))
  %v0_ac10 = load i32, i32* @r5, align 4
  %v3_ac14 = mul i32 %v6_ac0c, 65536
  store i32 %v3_ac14, i32* @sl, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_ac20 = load i32, i32* @r4, align 4
  store i32 %v0_ac20, i32* %r0.global-to-local, align 4
  %v5_ac24 = inttoptr i32 %v0_ac10 to i32*
  %v6_ac24 = call i32 @function_8258(i32 %v0_ac20, i32* %v5_ac24, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v3_ac34 = urem i32 %v6_ac24, 65536
  store i32 %v3_ac34, i32* @ip, align 4
  %v0_ac38 = load i32, i32* @r5, align 4
  %v0_ac3c = load i32, i32* @r4, align 4
  store i32 %v0_ac3c, i32* %r0.global-to-local, align 4
  %v5_ac44 = inttoptr i32 %v0_ac38 to i32*
  %v6_ac44 = call i32 @function_8258(i32 %v0_ac3c, i32* %v5_ac44, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ac50 = urem i32 %v6_ac44, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v2_ac6c = call i32 @function_fe58(i32* null)
  store i32 %v2_ac6c, i32* %r0.global-to-local, align 4
  %v0_ac70 = load i32, i32* @sl, align 4
  %v3_ac70 = udiv i32 %v0_ac70, 65536
  %v1_ac74 = load i32, i32* @r6, align 4
  %v9_ac74 = icmp eq i32 %v3_ac70, %v1_ac74
  br i1 %v9_ac74, label %dec_label_pc_ae48, label %bb

bb:                                               ; preds = %dec_label_pc_ab9c
  %v4_ac7c = udiv i32 %v0_ac70, 16777216
  store i32 %v4_ac7c, i32* %r3.global-to-local, align 4
  %v1_ac80 = load i32, i32* @r7, align 4
  %v2_ac80 = add i32 %v1_ac80, %v2_ac6c
  store i32 %v2_ac80, i32* %r0.global-to-local, align 4
  %v2_ac78 = mul nuw nsw i32 %v3_ac70, 256
  %v6_ac84 = or i32 %v2_ac78, %v4_ac7c
  %extract.t58 = trunc i32 %v6_ac84 to i16
  br label %dec_label_pc_ac94

dec_label_pc_ac94:                                ; preds = %bb, %dec_label_pc_ae48
  %v6_ac84.sink.off0 = phi i16 [ %extract.t58, %bb ], [ %extract.t59, %dec_label_pc_ae48 ]
  %v0_ac8810 = phi i32 [ %v2_ac80, %bb ], [ %v2_ac8013, %dec_label_pc_ae48 ]
  %v0_ac94 = load i32, i32* @fp, align 4
  %v2_ac94 = icmp eq i32 %v0_ac94, 0
  br i1 %v2_ac94, label %dec_label_pc_adcc, label %dec_label_pc_ac9c

dec_label_pc_ac9c:                                ; preds = %dec_label_pc_ac94
  store i32 0, i32* @sl, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v2_acc8 = ptrtoint i32* %stack_var_-56 to i32
  %v4_ace8 = sext i16 %v6_ac84.sink.off0 to i32
  br label %dec_label_pc_ad1c

dec_label_pc_acac:                                ; preds = %.thread26, %dec_label_pc_ad58
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_acb8 = call i32 @function_109c0(i32 2, i32 2, i32 17)
  store i32 %v3_acb8, i32* %r0.global-to-local, align 4
  %v7_acbc = icmp eq i32 %v3_acb8, -1
  %v0_acc0 = load i32, i32* @sl, align 4
  %v1_acc0 = add i32 %v0_acc0, 1
  store i32 %v1_acc0, i32* @sl, align 4
  %v0_acc4 = load i32, i32* @r7, align 4
  %v1_acc4 = add i32 %v0_acc4, 24
  store i32 %v1_acc4, i32* @r7, align 4
  %v1_acd0 = load i32, i32* @r6, align 4
  %v2_acd0 = load i32, i32* @sb, align 4
  %v3_acd0 = add i32 %v2_acd0, %v1_acd0
  %v4_acd0 = inttoptr i32 %v3_acd0 to i32*
  store i32 %v3_acb8, i32* %v4_acd0, align 4
  br i1 %v7_acbc, label %dec_label_pc_adf0.loopexit14, label %dec_label_pc_acd8

dec_label_pc_acd8:                                ; preds = %dec_label_pc_acac
  store i32 2, i32* %stack_var_-56, align 4
  store i32 %v4_ace8, i32* %r3.global-to-local, align 4
  %v0_acf0 = load i32, i32* %r0.global-to-local, align 4
  %v3_acf0 = call i32 @function_10770(i32 %v0_acf0, i32 %v2_acc8, i32 16)
  store i32 %v3_acf0, i32* %r0.global-to-local, align 4
  %v0_acf4 = load i32, i32* @r5, align 4
  %v1_acf4 = add i32 %v0_acf4, 20
  %v2_acf4 = inttoptr i32 %v1_acf4 to i8*
  %v3_acf4 = load i8, i8* %v2_acf4, align 1
  %v4_acf4 = zext i8 %v3_acf4 to i32
  store i32 %v4_acf4, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_acf4, 32
  br i1 %tmp, label %dec_label_pc_ad6c, label %dec_label_pc_ad00

dec_label_pc_ad00:                                ; preds = %dec_label_pc_acd8
  %v0_ad00 = load i32, i32* @r6, align 4
  %v1_ad00 = load i32, i32* @sb, align 4
  %v2_ad00 = add i32 %v1_ad00, %v0_ad00
  %v3_ad00 = inttoptr i32 %v2_ad00 to i32*
  %v4_ad00 = load i32, i32* %v3_ad00, align 4
  store i32 %v4_ad00, i32* %r0.global-to-local, align 4
  %v3_ad0c = call i32 @function_107a8(i32 %v4_ad00, i32 %v0_acf4, i32 16)
  store i32 %v3_ad0c, i32* %r0.global-to-local, align 4
  %v0_ad10 = load i32, i32* @sl, align 4
  %v1_ad10 = load i32, i32* @fp, align 4
  %v9_ad10 = icmp eq i32 %v0_ad10, %v1_ad10
  %v0_ad14 = load i32, i32* @r6, align 4
  %v1_ad14 = add i32 %v0_ad14, 4
  store i32 %v1_ad14, i32* @r6, align 4
  br i1 %v9_ad10, label %dec_label_pc_adcc, label %dec_label_pc_ad1c

dec_label_pc_ad1c:                                ; preds = %dec_label_pc_ad6c, %dec_label_pc_ad00, %dec_label_pc_ac9c
  store i32 65535, i32* @r4, align 4
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_ad2c = call i32 @function_11528(i32 65535, i32 1)
  store i32 %v2_ad2c, i32* %r0.global-to-local, align 4
  %v0_ad30 = load i32, i32* @r8, align 4
  %v3_ad34 = udiv i32 %v0_ad30, 256
  %v1_ad30 = mul i32 %v0_ad30, 256
  %v4_ad38 = and i32 %v1_ad30, 65280
  %v5_ad38 = or i32 %v4_ad38, %v3_ad34
  store i32 %v5_ad38, i32* %r3.global-to-local, align 4
  %v2_ad3c = load i32, i32* %stack_var_-80, align 4
  %v1_ad40 = load i32, i32* @r7, align 4
  %v2_ad40 = add i32 %v1_ad40, %v2_ad3c
  store i32 %v2_ad40, i32* @r5, align 4
  %v1_ad48 = load i32, i32* @r4, align 4
  %v9_ad48 = icmp eq i32 %v0_ad30, %v1_ad48
  %v1_ad4c = load i32, i32* @r6, align 4
  %v3_ad4c = add i32 %v1_ad4c, %v2_abc0
  %v4_ad4c = inttoptr i32 %v3_ad4c to i32*
  store i32 %v2_ad2c, i32* %v4_ad4c, align 4
  br i1 %v9_ad48, label %dec_label_pc_ad58, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_ad1c
  %v1_ad5027 = load i32, i32* %r3.global-to-local, align 4
  %v2_ad5028 = trunc i32 %v1_ad5027 to i16
  %v3_ad5029 = load i32, i32* @r5, align 4
  %v4_ad5030 = add i32 %v3_ad5029, 2
  %v5_ad5031 = inttoptr i32 %v4_ad5030 to i16*
  store i16 %v2_ad5028, i16* %v5_ad5031, align 2
  br label %dec_label_pc_acac

dec_label_pc_ad58:                                ; preds = %dec_label_pc_ad1c
  %v0_ad58 = call i32 @function_d3a8()
  %v1_ad58 = trunc i32 %v0_ad58 to i16
  store i32 %v0_ad58, i32* %r0.global-to-local, align 4
  %v2_ad5c = load i32, i32* %stack_var_-80, align 4
  store i32 %v2_ad5c, i32* %r3.global-to-local, align 4
  %v1_ad60 = load i32, i32* @r7, align 4
  %v2_ad60 = add i32 %v1_ad60, %v2_ad5c
  store i32 %v2_ad60, i32* @r5, align 4
  %v4_ad64 = add i32 %v2_ad60, 2
  %v5_ad64 = inttoptr i32 %v4_ad64 to i16*
  store i16 %v1_ad58, i16* %v5_ad64, align 2
  br label %dec_label_pc_acac

dec_label_pc_ad6c:                                ; preds = %dec_label_pc_acd8
  %v1_ad6c = add i32 %v0_acf4, 16
  %v2_ad6c = inttoptr i32 %v1_ad6c to i32*
  %v3_ad6c = load i32, i32* %v2_ad6c, align 4
  store i32 %v3_ad6c, i32* @r4, align 4
  %v0_ad70 = call i32 @function_d3a8()
  store i32 %v0_ad70, i32* %r0.global-to-local, align 4
  %v0_ad74 = load i32, i32* @r4, align 4
  %v1_ad80 = and i32 %v0_ad74, 65280
  store i32 %v1_ad80, i32* %r3.global-to-local, align 4
  %v0_ad84 = load i32, i32* @r5, align 4
  %v1_ad84 = add i32 %v0_ad84, 20
  %v2_ad84 = inttoptr i32 %v1_ad84 to i8*
  %v3_ad84 = load i8, i8* %v2_ad84, align 1
  %v4_ad84 = zext i8 %v3_ad84 to i32
  %v5_ad8c = call i32 @llvm.bswap.i32(i32 %v0_ad74)
  %v7_ad90 = lshr i32 %v0_ad70, %v4_ad84
  %v8_ad90 = add i32 %v7_ad90, %v5_ad8c
  %v1_ad94 = and i32 %v8_ad90, 16711680
  store i32 %v1_ad94, i32* %r0.global-to-local, align 4
  %v5_ada8 = call i32 @llvm.bswap.i32(i32 %v8_ad90)
  store i32 %v5_ada8, i32* %r3.global-to-local, align 4
  %v2_adac = add i32 %v0_ad84, 4
  %v3_adac = inttoptr i32 %v2_adac to i32*
  store i32 %v5_ada8, i32* %v3_adac, align 4
  %v0_adb0 = load i32, i32* @r5, align 4
  %v0_adb4 = load i32, i32* @r6, align 4
  %v1_adb4 = load i32, i32* @sb, align 4
  %v2_adb4 = add i32 %v1_adb4, %v0_adb4
  %v3_adb4 = inttoptr i32 %v2_adb4 to i32*
  %v4_adb4 = load i32, i32* %v3_adb4, align 4
  store i32 %v4_adb4, i32* %r0.global-to-local, align 4
  %v3_adbc = call i32 @function_107a8(i32 %v4_adb4, i32 %v0_adb0, i32 16)
  store i32 %v3_adbc, i32* %r0.global-to-local, align 4
  %v0_adc0 = load i32, i32* @sl, align 4
  %v1_adc0 = load i32, i32* @fp, align 4
  %v9_adc0 = icmp eq i32 %v0_adc0, %v1_adc0
  %v0_adc4 = load i32, i32* @r6, align 4
  %v1_adc4 = add i32 %v0_adc4, 4
  store i32 %v1_adc4, i32* @r6, align 4
  br i1 %v9_adc0, label %dec_label_pc_adcc, label %dec_label_pc_ad1c

dec_label_pc_adcc:                                ; preds = %dec_label_pc_ad6c, %dec_label_pc_ad00, %dec_label_pc_ac94
  %v1_add021 = phi i32 [ 0, %dec_label_pc_ac94 ], [ %v0_adc0, %dec_label_pc_ad6c ], [ %v0_ad10, %dec_label_pc_ad00 ]
  store i32 0, i32* @r5, align 4
  %v2_ae04 = icmp eq i32 %v1_ac50, 0
  br label %dec_label_pc_add0

dec_label_pc_add0:                                ; preds = %dec_label_pc_add0.backedge, %dec_label_pc_adcc
  %v1_add0 = phi i32 [ %v1_add0.pre, %dec_label_pc_add0.backedge ], [ %v1_add021, %dec_label_pc_adcc ]
  %v1_ae08 = phi i32 [ %v0_add019, %dec_label_pc_add0.backedge ], [ 0, %dec_label_pc_adcc ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v5_add8 = icmp slt i32 %v1_ae08, %v1_add0
  br i1 %v5_add8, label %dec_label_pc_adfc, label %dec_label_pc_addc

dec_label_pc_addc:                                ; preds = %dec_label_pc_add0
  %v2_addc = call i32 @function_fe58(i32* null)
  store i32 %v2_addc, i32* %r0.global-to-local, align 4
  store i32 %v0_ac8810, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v6_adec = icmp slt i32 %v0_ac8810, %v2_addc
  br i1 %v6_adec, label %dec_label_pc_adf0, label %dec_label_pc_add0.backedge

dec_label_pc_adf0.loopexit14:                     ; preds = %dec_label_pc_acac
  %v1_adf8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_adf0

dec_label_pc_adf0:                                ; preds = %dec_label_pc_addc, %dec_label_pc_adf0.loopexit14
  %v1_adf8 = phi i32 [ %v1_adf8.pre, %dec_label_pc_adf0.loopexit14 ], [ %v2_addc, %dec_label_pc_addc ]
  ret i32 %v1_adf8

dec_label_pc_adfc:                                ; preds = %dec_label_pc_add0
  store i32 %v2_abc0, i32* @r3, align 4
  %v4_ae08 = mul i32 %v1_ae08, 4
  %v5_ae08 = add i32 %v4_ae08, %v2_abc0
  %v6_ae08 = inttoptr i32 %v5_ae08 to i32*
  %v7_ae08 = load i32, i32* %v6_ae08, align 4
  store i32 %v7_ae08, i32* @r4, align 4
  br i1 %v2_ae04, label %dec_label_pc_ae10, label %dec_label_pc_ae2c

dec_label_pc_ae10:                                ; preds = %dec_label_pc_adfc, %dec_label_pc_ae2c
  %v0_ae14 = phi i32 [ %v7_ae08, %dec_label_pc_adfc ], [ %v0_ae14.pre, %dec_label_pc_ae2c ]
  %v1_ae10 = phi i32 [ %v1_ae08, %dec_label_pc_adfc ], [ %v1_ae10.pre, %dec_label_pc_ae2c ]
  %v0_ae10 = load i32, i32* @sb, align 4
  %v4_ae10 = mul i32 %v1_ae10, 4
  %v5_ae10 = add i32 %v4_ae10, %v0_ae10
  %v6_ae10 = inttoptr i32 %v5_ae10 to i32*
  %v7_ae10 = load i32, i32* %v6_ae10, align 4
  store i32 %v7_ae10, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ae20 = call i32 @function_10904(i32 %v7_ae10, i32 %v0_ae14, i32 %v3_ac34, i32 16384)
  store i32 %v4_ae20, i32* %r0.global-to-local, align 4
  %v0_ae24 = load i32, i32* @r5, align 4
  %v1_ae24 = add i32 %v0_ae24, 1
  store i32 %v1_ae24, i32* @r5, align 4
  br label %dec_label_pc_add0.backedge

dec_label_pc_add0.backedge:                       ; preds = %dec_label_pc_ae10, %dec_label_pc_addc
  %v0_add019 = phi i32 [ %v1_ae24, %dec_label_pc_ae10 ], [ 0, %dec_label_pc_addc ]
  %v1_add0.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_add0

dec_label_pc_ae2c:                                ; preds = %dec_label_pc_adfc
  store i32 %v7_ae08, i32* %r0.global-to-local, align 4
  %v2_ae34 = call i32 @function_d46c(i32 %v7_ae08, i32 %v3_ac34)
  store i32 %v2_ae34, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ae40 = load i32, i32* @r4, align 4
  %v4_ae40 = add i32 %v3_ae40, %v3_ac34
  %v5_ae40 = inttoptr i32 %v4_ae40 to i8*
  store i8 0, i8* %v5_ae40, align 1
  %v1_ae10.pre = load i32, i32* @r5, align 4
  %v0_ae14.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ae10

dec_label_pc_ae48:                                ; preds = %dec_label_pc_ab9c
  %v1_ac8012 = load i32, i32* @r7, align 4
  %v2_ac8013 = add i32 %v1_ac8012, %v2_ac6c
  store i32 %v2_ac8013, i32* %r0.global-to-local, align 4
  %v0_ae48 = call i32 @function_d3a8()
  %v3_ae50 = urem i32 %v0_ae48, 65536
  store i32 %v3_ae50, i32* %r0.global-to-local, align 4
  %extract.t59 = trunc i32 %v0_ae48 to i16
  br label %dec_label_pc_ac94

; uselistorder directives
  uselistorder i32 %v0_ae48, { 1, 0 }
  uselistorder i32 %v2_ac8013, { 1, 0 }
  uselistorder i32 %v7_ae08, { 2, 1, 0, 3 }
  uselistorder i32 %v5_ada8, { 1, 0 }
  uselistorder i32 %v0_ad58, { 1, 0 }
  uselistorder i32 %v0_ad30, { 2, 0, 1 }
  uselistorder i32 %v3_acb8, { 1, 0, 2 }
  uselistorder i32 %v0_ac8810, { 1, 0 }
  uselistorder i32 %v4_ac7c, { 1, 0 }
  uselistorder i32 %v3_ac34, { 3, 2, 1, 0 }
  uselistorder i32 %v2_abc0, { 0, 2, 1 }
  uselistorder i32* %stack_var_-56, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 9, 10, 7, 8, 11, 13, 12, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 6, 5, 1, 7, 18, 9, 8, 12, 10, 11, 13, 14, 23, 21, 16, 15, 3, 19, 20, 17, 22, 25, 24, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ae10, { 1, 0 }
  uselistorder label %dec_label_pc_adf0, { 1, 0 }
  uselistorder label %dec_label_pc_acac, { 1, 0 }
  uselistorder label %dec_label_pc_ac94, { 1, 0 }
}

define i32 @function_ae5c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ae5c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_ae5c = load i32, i32* @lr, align 4
  store i32 0, i32* @r8, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_ae88 = call i32 @function_11528(i32 %arg2, i32 4)
  %v0_ae8c = load i32, i32* @r4, align 4
  store i32 %v0_ae8c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ae98 = load i32, i32* @r8, align 4
  store i32 %v0_ae98, i32* %r3.global-to-local, align 4
  %v0_ae9c = load i32, i32* @r5, align 4
  store i32 %v0_ae9c, i32* %r0.global-to-local, align 4
  %v5_aea0 = inttoptr i32 %v0_ae8c to i32*
  %v6_aea0 = call i32 @function_8258(i32 %v0_ae9c, i32* %v5_aea0, i32 2, i32 %v0_ae98, i32 %v2_ae88)
  %v1_aeac = urem i32 %v6_aea0, 256
  store i32 %v1_aeac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_aeb8 = load i32, i32* @r4, align 4
  store i32 %v0_aeb8, i32* %r1.global-to-local, align 4
  %v0_aebc = load i32, i32* @r5, align 4
  store i32 %v0_aebc, i32* %r0.global-to-local, align 4
  %v5_aec0 = trunc i32 %v6_aea0 to i8
  %v6_aec4 = inttoptr i32 %v0_aeb8 to i32*
  %v7_aec4 = call i32 @function_8258(i32 %v0_aebc, i32* %v6_aec4, i32 3, i32 65535, i32 %v6_aea0)
  %v0_aec8 = load i32, i32* @r4, align 4
  store i32 %v0_aec8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_aed8 = load i32, i32* @r5, align 4
  store i32 %v0_aed8, i32* %r0.global-to-local, align 4
  %v5_aedc = inttoptr i32 %v0_aec8 to i32*
  %v6_aedc = call i32 @function_8258(i32 %v0_aed8, i32* %v5_aedc, i32 4, i32 64, i32 %v7_aec4)
  %v1_aee4 = urem i32 %v6_aedc, 256
  store i32 %v1_aee4, i32* %ip.global-to-local, align 4
  %v0_aee8 = load i32, i32* @r4, align 4
  store i32 %v0_aee8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_aef0 = load i32, i32* @r8, align 4
  store i32 %v0_aef0, i32* %r3.global-to-local, align 4
  %v0_aef4 = load i32, i32* @r5, align 4
  store i32 %v0_aef4, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_aedc, 16777216
  %v5_aefc = sdiv i32 %sext, 16777216
  %v6_aefc = inttoptr i32 %v0_aee8 to i32*
  %v7_aefc = call i32 @function_8258(i32 %v0_aef4, i32* %v6_aefc, i32 5, i32 %v0_aef0, i32 %v5_aefc)
  %v1_af08 = urem i32 %v7_aefc, 256
  store i32 %v1_af08, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_af14 = load i32, i32* @r4, align 4
  store i32 %v0_af14, i32* %r1.global-to-local, align 4
  %v0_af18 = load i32, i32* @r5, align 4
  store i32 %v0_af18, i32* %r0.global-to-local, align 4
  %v5_af20 = inttoptr i32 %v0_af14 to i32*
  %v6_af20 = call i32 @function_8258(i32 %v0_af18, i32* %v5_af20, i32 6, i32 65535, i32 %v1_af08)
  %v0_af2c = load i32, i32* @r4, align 4
  store i32 %v0_af2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_af38 = load i32, i32* @r5, align 4
  store i32 %v0_af38, i32* %r0.global-to-local, align 4
  %v5_af3c = inttoptr i32 %v0_af2c to i32*
  %v6_af3c = call i32 @function_8258(i32 %v0_af38, i32* %v5_af3c, i32 7, i32 65535, i32 %v6_af20)
  %v0_af40 = load i32, i32* @r4, align 4
  store i32 %v0_af40, i32* %r1.global-to-local, align 4
  %v0_af48 = load i32, i32* @r8, align 4
  store i32 %v0_af48, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_af50 = load i32, i32* @r5, align 4
  store i32 %v0_af50, i32* %r0.global-to-local, align 4
  %v5_af54 = inttoptr i32 %v0_af40 to i32*
  %v6_af54 = call i32 @function_8258(i32 %v0_af50, i32* %v5_af54, i32 %v0_af48, i32 512, i32 %v6_af3c)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_af60 = load i32, i32* @r4, align 4
  store i32 %v0_af60, i32* %r1.global-to-local, align 4
  store i32 %v6_af54, i32* @sl, align 4
  %v0_af68 = load i32, i32* @r5, align 4
  store i32 %v0_af68, i32* %r0.global-to-local, align 4
  %v5_af6c = inttoptr i32 %v0_af60 to i32*
  %v6_af6c = call i32 @function_8258(i32 %v0_af68, i32* %v5_af6c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_af78 = load i32, i32* @global_var_1fbd0.42, align 4
  store i32 %v2_af78, i32* %r3.global-to-local, align 4
  %v1_af7c = urem i32 %v6_af6c, 256
  store i32 %v1_af7c, i32* %ip.global-to-local, align 4
  %v0_af80 = load i32, i32* @r4, align 4
  store i32 %v0_af80, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_af88 = load i32, i32* @r5, align 4
  store i32 %v0_af88, i32* %r0.global-to-local, align 4
  %v5_af90 = inttoptr i32 %v0_af80 to i32*
  %v6_af90 = call i32 @function_8258(i32 %v0_af88, i32* %v5_af90, i32 19, i32 %v2_af78, i32 %v1_af7c)
  store i32 %v6_af90, i32* @sb, align 4
  %v0_af98 = load i32, i32* @r8, align 4
  store i32 %v0_af98, i32* %r0.global-to-local, align 4
  %v1_af9c = inttoptr i32 %v0_af98 to i32*
  %v2_af9c = call i32 @function_fe58(i32* %v1_af9c)
  %v1_afa0 = load i32, i32* @r6, align 4
  %v2_afa0 = add i32 %v1_afa0, %v2_af9c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_afb4 = call i32 @function_109c0(i32 2, i32 3, i32 17)
  store i32 %v3_afb4, i32* %r0.global-to-local, align 4
  %v7_afb8 = icmp eq i32 %v3_afb4, -1
  store i32 %v3_afb4, i32* @fp, align 4
  br i1 %v7_afb8, label %dec_label_pc_b40c, label %dec_label_pc_afc4

dec_label_pc_afc4:                                ; preds = %dec_label_pc_ae5c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_afcc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_afcc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_afd4 = load i32, i32* @r8, align 4
  store i32 %v0_afd4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_afe0 = call i32 @function_1097c(i32 %v3_afb4, i32 %v0_afd4, i32 3, i32 %v6_afcc, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_afe0, i32* %r0.global-to-local, align 4
  %v7_afe4 = icmp eq i32 %v5_afe0, -1
  br i1 %v7_afe4, label %dec_label_pc_b418, label %dec_label_pc_afec

dec_label_pc_afec:                                ; preds = %dec_label_pc_afc4
  %v0_afec = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_aff8 = urem i32 %v0_afec, 65536
  %v3_affc = icmp ugt i32 %v3_aff8, 1459
  br i1 %v3_affc, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_afec
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_afec, %bb
  %storemerge = phi i32 [ 1460, %bb ], [ %v3_aff8, %dec_label_pc_afec ]
  %v0_b008 = phi i32 [ 1460, %bb ], [ %v3_aff8, %dec_label_pc_afec ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v6_af20, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v3_b01c = mul i32 %v6_af3c, 65536
  store i32 %v3_b01c, i32* %r2.global-to-local, align 4
  %v3_b024 = urem i32 %v7_aec4, 65536
  %v3_b028 = urem i32 %v6_af20, 65536
  store i32 %v3_b028, i32* %ip.global-to-local, align 4
  %v3_b02c = urem i32 %v6_af3c, 65536
  store i32 %v3_b02c, i32* %r0.global-to-local, align 4
  %v2_b030 = icmp eq i32 %arg2, 0
  %v0_b038 = load i32, i32* @r8, align 4
  store i32 %v0_b038, i32* %stack_var_-44, align 4
  br i1 %v2_b030, label %.dec_label_pc_b164.preheader_crit_edge, label %dec_label_pc_b04c

.dec_label_pc_b164.preheader_crit_edge:           ; preds = %bb41
  %.pre = add nuw nsw i32 %v0_b008, 8
  %.pre10 = add nuw nsw i32 %v0_b008, 28
  br label %dec_label_pc_b164.preheader

dec_label_pc_b04c:                                ; preds = %bb41
  %v1_b054 = add nuw nsw i32 %v0_b008, 28
  %v1_b058 = add nuw nsw i32 %v0_b008, 8
  %tmp42 = mul nuw nsw i32 %v3_b028, 256
  %v3_b068 = and i32 %tmp42, 65280
  %v3_b070 = mul i32 %v1_b054, 65536
  store i32 %v3_b070, i32* @lr, align 4
  %tmp43 = udiv i32 %v6_af20, 256
  %v4_b078 = urem i32 %tmp43, 256
  %v5_b078 = or i32 %v3_b068, %v4_b078
  store i32 %v5_b078, i32* @sl, align 4
  store i32 %v3_b01c, i32* %r1.global-to-local, align 4
  %tmp44 = mul i32 %v6_af3c, 256
  %v3_b090 = and i32 %tmp44, 65280
  %v2_b094 = icmp eq i32 %v1_af08, 0
  %tmp45 = mul nuw nsw i32 %v1_b054, 256
  %v3_b098 = and i32 %tmp45, 65280
  store i32 %v3_b098, i32* %r3.global-to-local, align 4
  %tmp46 = mul i32 %v7_aec4, 256
  %v3_b09c = and i32 %tmp46, 65280
  store i32 %v3_b09c, i32* %r2.global-to-local, align 4
  %tmp47 = mul nuw nsw i32 %v1_b058, 256
  %v3_b0a0 = and i32 %tmp47, 65280
  store i32 %v3_b0a0, i32* %ip.global-to-local, align 4
  %tmp48 = udiv i32 %v6_af3c, 256
  %v4_b0a4 = urem i32 %tmp48, 256
  %v5_b0a4 = or i32 %v4_b0a4, %v3_b090
  store i32 %v5_b0a4, i32* %r0.global-to-local, align 4
  %tmp49 = udiv i32 %v7_aec4, 256
  %v4_b0a8 = urem i32 %tmp49, 256
  %v5_b0a8 = or i32 %v4_b0a8, %v3_b09c
  store i32 %v5_b0a8, i32* @r8, align 4
  %tmp50 = udiv i32 %v1_b054, 256
  %v4_b0ac = urem i32 %tmp50, 256
  %v5_b0ac = or i32 %v4_b0ac, %v3_b098
  store i32 %v5_b0ac, i32* @r6, align 4
  %tmp51 = udiv i32 %v1_b058, 256
  %v4_b0b0 = urem i32 %tmp51, 256
  %v5_b0b0 = or i32 %v4_b0b0, %v3_b0a0
  store i32 %v5_b0b0, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %sext11 = mul nuw i32 %v5_b0a4, 65536
  %v4_b138 = sdiv i32 %sext11, 65536
  %v1_b11c = trunc i32 %v5_aefc to i8
  br i1 %v2_b094, label %dec_label_pc_b0c0, label %dec_label_pc_b34c

dec_label_pc_b0c0:                                ; preds = %dec_label_pc_b04c, %dec_label_pc_b0c0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b0cc = call i32 @function_11528(i32 1510, i32 1)
  store i32 %v2_b0cc, i32* %r0.global-to-local, align 4
  store i32 %v2_ae88, i32* %r2.global-to-local, align 4
  %v2_b0d8 = load i32, i32* @r4, align 4
  %v5_b0d8 = mul i32 %v2_b0d8, 4
  %v6_b0d8 = add i32 %v5_b0d8, %v2_ae88
  %v7_b0d8 = inttoptr i32 %v6_b0d8 to i32*
  store i32 %v2_b0cc, i32* %v7_b0d8, align 4
  %v3_b0dc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b0dc, i32* %r1.global-to-local, align 4
  %v0_b0e0 = load i32, i32* %r2.global-to-local, align 4
  %v4_b0e0 = mul i32 %v3_b0dc, 4
  %v5_b0e0 = add i32 %v0_b0e0, %v4_b0e0
  %v6_b0e0 = inttoptr i32 %v5_b0e0 to i32*
  %v7_b0e0 = load i32, i32* %v6_b0e0, align 4
  store i32 %v7_b0e0, i32* %r3.global-to-local, align 4
  %v1_b0e4 = inttoptr i32 %v7_b0e0 to i8*
  %v2_b0e4 = load i8, i8* %v1_b0e4, align 1
  %tmp = urem i8 %v2_b0e4, 16
  %v1_b0e8 = zext i8 %tmp to i32
  %v1_b0ec = or i32 %v1_b0e8, 64
  store i32 %v1_b0ec, i32* %r2.global-to-local, align 4
  %v1_b0f0 = trunc i32 %v1_b0ec to i8
  store i8 %v1_b0f0, i8* %v1_b0e4, align 1
  %v0_b0f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0f4 = inttoptr i32 %v0_b0f4 to i8*
  %v2_b0f4 = load i8, i8* %v1_b0f4, align 1
  %v1_b0f8 = and i8 %v2_b0f4, -16
  %v1_b0fc = or i8 %v1_b0f8, 5
  store i32 17, i32* %ip.global-to-local, align 4
  store i8 %v1_b0fc, i8* %v1_b0f4, align 1
  %v0_b108 = load i32, i32* %ip.global-to-local, align 4
  %v1_b108 = trunc i32 %v0_b108 to i8
  %v2_b108 = load i32, i32* %r3.global-to-local, align 4
  %v3_b108 = add i32 %v2_b108, 9
  %v4_b108 = inttoptr i32 %v3_b108 to i8*
  store i8 %v1_b108, i8* %v4_b108, align 1
  %v2_b110 = load i32, i32* %r3.global-to-local, align 4
  %v3_b110 = add i32 %v2_b110, 1
  %v4_b110 = inttoptr i32 %v3_b110 to i8*
  store i8 %v5_aec0, i8* %v4_b110, align 1
  %v0_b118 = load i32, i32* %r1.global-to-local, align 4
  %v3_b118 = mul i32 %v0_b118, 32
  store i32 %v3_b118, i32* %r0.global-to-local, align 4
  %v2_b11c = load i32, i32* %r3.global-to-local, align 4
  %v3_b11c = add i32 %v2_b11c, 8
  %v4_b11c = inttoptr i32 %v3_b11c to i8*
  store i8 %v1_b11c, i8* %v4_b11c, align 1
  %v0_b120 = load i32, i32* @sb, align 4
  %v1_b120 = load i32, i32* %r3.global-to-local, align 4
  %v2_b120 = add i32 %v1_b120, 12
  %v3_b120 = inttoptr i32 %v2_b120 to i32*
  store i32 %v0_b120, i32* %v3_b120, align 4
  %v0_b124 = load i32, i32* %r0.global-to-local, align 4
  %v1_b124 = load i32, i32* %r1.global-to-local, align 4
  %tmp53 = mul i32 %v1_b124, -8
  %v5_b124 = add i32 %v0_b124, %tmp53
  %v1_b128 = load i32, i32* @r7, align 4
  %v2_b128 = add i32 %v5_b124, %v1_b128
  store i32 %v2_b128, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_b130 = add i32 %v1_b124, 1
  store i32 %v1_b130, i32* @r4, align 4
  %v1_b134 = add i32 %v2_b128, 16
  %v2_b134 = inttoptr i32 %v1_b134 to i32*
  %v3_b134 = load i32, i32* %v2_b134, align 4
  store i32 %v3_b134, i32* %r2.global-to-local, align 4
  store i32 %v4_b138, i32* %r0.global-to-local, align 4
  %v0_b13c = load i32, i32* %r3.global-to-local, align 4
  %v1_b13c = add i32 %v0_b13c, 20
  store i32 %v1_b13c, i32* %r1.global-to-local, align 4
  %v0_b144 = load i32, i32* @r6, align 4
  %v1_b144 = trunc i32 %v0_b144 to i16
  %v3_b144 = add i32 %v0_b13c, 2
  %v4_b144 = inttoptr i32 %v3_b144 to i16*
  store i16 %v1_b144, i16* %v4_b144, align 2
  %v0_b148 = load i32, i32* @r8, align 4
  %v1_b148 = trunc i32 %v0_b148 to i16
  %v2_b148 = load i32, i32* %r3.global-to-local, align 4
  %v3_b148 = add i32 %v2_b148, 4
  %v4_b148 = inttoptr i32 %v3_b148 to i16*
  store i16 %v1_b148, i16* %v4_b148, align 2
  %v0_b14c = load i32, i32* %r2.global-to-local, align 4
  %v1_b14c = load i32, i32* %r3.global-to-local, align 4
  %v2_b14c = add i32 %v1_b14c, 16
  %v3_b14c = inttoptr i32 %v2_b14c to i32*
  store i32 %v0_b14c, i32* %v3_b14c, align 4
  %v0_b150 = load i32, i32* @sl, align 4
  %v1_b150 = trunc i32 %v0_b150 to i16
  %v2_b150 = load i32, i32* %r3.global-to-local, align 4
  %v3_b150 = add i32 %v2_b150, 20
  %v4_b150 = inttoptr i32 %v3_b150 to i16*
  store i16 %v1_b150, i16* %v4_b150, align 2
  %v0_b154 = load i32, i32* @r5, align 4
  %v1_b154 = trunc i32 %v0_b154 to i16
  %v2_b154 = load i32, i32* %r1.global-to-local, align 4
  %v3_b154 = add i32 %v2_b154, 4
  %v4_b154 = inttoptr i32 %v3_b154 to i16*
  store i16 %v1_b154, i16* %v4_b154, align 2
  %v0_b158 = load i32, i32* %r0.global-to-local, align 4
  %v1_b158 = trunc i32 %v0_b158 to i16
  %v2_b158 = load i32, i32* %r1.global-to-local, align 4
  %v3_b158 = add i32 %v2_b158, 2
  %v4_b158 = inttoptr i32 %v3_b158 to i16*
  store i16 %v1_b158, i16* %v4_b158, align 2
  %v0_b15c = load i32, i32* @r4, align 4
  store i32 %v0_b15c, i32* %stack_var_-44, align 4
  %v5_b160 = icmp slt i32 %v1_b130, %arg2
  br i1 %v5_b160, label %dec_label_pc_b0c0, label %dec_label_pc_b164.preheader

dec_label_pc_b164.preheader:                      ; preds = %dec_label_pc_b34c, %dec_label_pc_b0c0, %.dec_label_pc_b164.preheader_crit_edge
  %v1_b184.pre-phi = phi i32 [ %.pre10, %.dec_label_pc_b164.preheader_crit_edge ], [ %v1_b054, %dec_label_pc_b0c0 ], [ %v1_b054, %dec_label_pc_b34c ]
  %v1_b180.pre-phi = phi i32 [ %.pre, %.dec_label_pc_b164.preheader_crit_edge ], [ %v1_b058, %dec_label_pc_b0c0 ], [ %v1_b058, %dec_label_pc_b34c ]
  %v3_b2e4 = icmp eq i32 %v3_b024, 65535
  %v2_b320 = icmp eq i32 %v1_af7c, 0
  br label %dec_label_pc_b164

dec_label_pc_b164:                                ; preds = %dec_label_pc_b164.preheader, %dec_label_pc_b3f8
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b030, label %dec_label_pc_b3f8, label %dec_label_pc_b178

dec_label_pc_b178:                                ; preds = %dec_label_pc_b164
  store i32 %v0_b008, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_b180.pre-phi, i32* @sl, align 4
  store i32 %v1_b184.pre-phi, i32* @r8, align 4
  br label %dec_label_pc_b254

dec_label_pc_b18c:                                ; preds = %dec_label_pc_b254
  %v0_b18c = load i32, i32* @sb, align 4
  %v7_b18c = icmp eq i32 %v0_b18c, -1
  br i1 %v7_b18c, label %dec_label_pc_b2d4, label %dec_label_pc_b194

dec_label_pc_b194:                                ; preds = %dec_label_pc_b278, %dec_label_pc_b18c
  store i32 %v3_b024, i32* @ip, align 4
  store i32 65535, i32* @r4, align 4
  br i1 %v3_b2e4, label %dec_label_pc_b2f0, label %dec_label_pc_b1a8

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b2d4.dec_label_pc_b1a8_crit_edge, %dec_label_pc_b194
  %v1_b1ac = phi i32 [ %v1_b1ac.pre, %dec_label_pc_b2d4.dec_label_pc_b1a8_crit_edge ], [ 65535, %dec_label_pc_b194 ]
  store i32 %v3_b028, i32* %r0.global-to-local, align 4
  %v9_b1ac = icmp eq i32 %v3_b028, %v1_b1ac
  br i1 %v9_b1ac, label %dec_label_pc_b304, label %dec_label_pc_b1b4

dec_label_pc_b1b4:                                ; preds = %dec_label_pc_b2f0, %dec_label_pc_b1a8
  %v1_b1b8 = phi i32 [ %v1_b2fc, %dec_label_pc_b2f0 ], [ %v1_b1ac, %dec_label_pc_b1a8 ]
  store i32 %v3_b02c, i32* %r1.global-to-local, align 4
  %v9_b1b8 = icmp eq i32 %v3_b02c, %v1_b1b8
  br i1 %v9_b1b8, label %dec_label_pc_b318, label %dec_label_pc_b1c0

dec_label_pc_b1c0:                                ; preds = %dec_label_pc_b304, %dec_label_pc_b1b4
  store i32 %v1_af7c, i32* %r2.global-to-local, align 4
  br i1 %v2_b320, label %dec_label_pc_b1cc, label %dec_label_pc_b32c

dec_label_pc_b1cc:                                ; preds = %dec_label_pc_b1c0, %dec_label_pc_b318, %dec_label_pc_b32c
  %v2_b1d0 = load i32, i32* @r5, align 4
  %v3_b1d0 = add i32 %v2_b1d0, 10
  %v4_b1d0 = inttoptr i32 %v3_b1d0 to i16*
  store i16 0, i16* %v4_b1d0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b1d8 = load i32, i32* @r5, align 4
  store i32 %v0_b1d8, i32* @r0, align 4
  %v2_b1dc = call i32 @function_bf78(i32 %v0_b1d8, i32 20)
  %v3_b1dc = trunc i32 %v2_b1dc to i16
  store i32 %v2_b1dc, i32* %r0.global-to-local, align 4
  %v3_b1e0 = load i32, i32* @r5, align 4
  %v4_b1e0 = add i32 %v3_b1e0, 10
  %v5_b1e0 = inttoptr i32 %v4_b1e0 to i16*
  store i16 %v3_b1dc, i16* %v5_b1e0, align 2
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_b1e8 = load i32, i32* @r6, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 6
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i16*
  store i16 0, i16* %v4_b1e8, align 2
  %v0_b1ec = load i32, i32* @r6, align 4
  %v1_b1ec = add i32 %v0_b1ec, 4
  %v2_b1ec = inttoptr i32 %v1_b1ec to i16*
  %v3_b1ec = load i16, i16* %v2_b1ec, align 2
  %v4_b1ec = zext i16 %v3_b1ec to i32
  store i32 %v4_b1ec, i32* %r2.global-to-local, align 4
  store i32 %v0_b1ec, i32* @r1, align 4
  %v0_b1f4 = load i32, i32* @sl, align 4
  store i32 %v0_b1f4, i32* %r3.global-to-local, align 4
  %v0_b1f8 = load i32, i32* @r5, align 4
  store i32 %v0_b1f8, i32* %r0.global-to-local, align 4
  %v4_b1fc = call i32 @function_bfc8(i32 %v0_b1f8, i32 %v0_b1ec, i32 %v4_b1ec, i32 %v0_b1f4)
  %v5_b1fc = trunc i32 %v4_b1fc to i16
  store i32 %v4_b1fc, i32* %r0.global-to-local, align 4
  %v3_b200 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b200, i32* %r3.global-to-local, align 4
  %v3_b204 = mul i32 %v3_b200, 32
  store i32 %v3_b204, i32* %lr.global-to-local, align 4
  %v3_b208 = load i32, i32* @r6, align 4
  %v4_b208 = add i32 %v3_b208, 6
  %v5_b208 = inttoptr i32 %v4_b208 to i16*
  store i16 %v5_b1fc, i16* %v5_b208, align 2
  %v0_b20c = load i32, i32* %lr.global-to-local, align 4
  %v1_b20c = load i32, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v1_b20c, -8
  %v5_b20c = add i32 %v0_b20c, %tmp54
  store i32 %v5_b20c, i32* %lr.global-to-local, align 4
  %v0_b210 = load i32, i32* @r6, align 4
  %v1_b210 = add i32 %v0_b210, 2
  %v2_b210 = inttoptr i32 %v1_b210 to i16*
  %v3_b210 = load i16, i16* %v2_b210, align 2
  %v1_b214 = load i32, i32* @r7, align 4
  %v2_b214 = add i32 %v1_b214, %v5_b20c
  store i32 %v2_b214, i32* @lr, align 4
  %v3_b218 = add i32 %v2_b214, 2
  %v4_b218 = inttoptr i32 %v3_b218 to i16*
  store i16 %v3_b210, i16* %v4_b218, align 2
  %v0_b21c = load i32, i32* @r8, align 4
  store i32 %v0_b21c, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b228 = load i32, i32* @r5, align 4
  store i32 %v0_b228, i32* %r1.global-to-local, align 4
  %v0_b22c = load i32, i32* @fp, align 4
  store i32 %v0_b22c, i32* %r0.global-to-local, align 4
  %v0_b230 = load i32, i32* @lr, align 4
  %v6_b238 = call i32 @function_1093c(i32 %v0_b22c, i32 %v0_b228, i32 %v0_b21c, i32 16384, i32 %v0_b230, i32 16)
  %v3_b23c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b23c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v1_b244 = add i32 %v3_b23c, 1
  store i32 %v1_b244, i32* %r0.global-to-local, align 4
  store i32 %v1_b244, i32* %stack_var_-44, align 4
  %v6_b250 = icmp slt i32 %v1_b244, %arg2
  br i1 %v6_b250, label %dec_label_pc_b254, label %dec_label_pc_b3f8

dec_label_pc_b254:                                ; preds = %dec_label_pc_b1cc, %dec_label_pc_b178
  %v1_b268 = phi i32 [ %v1_b244, %dec_label_pc_b1cc ], [ 0, %dec_label_pc_b178 ]
  %v5_b258 = mul i32 %v1_b268, 24
  %v1_b260 = load i32, i32* @r7, align 4
  %v2_b260 = add i32 %v1_b260, %v5_b258
  store i32 %v2_b260, i32* @r3, align 4
  %v1_b264 = add i32 %v2_b260, 20
  %v2_b264 = inttoptr i32 %v1_b264 to i8*
  %v3_b264 = load i8, i8* %v2_b264, align 1
  %v4_b264 = zext i8 %v3_b264 to i32
  store i32 %v4_b264, i32* %r2.global-to-local, align 4
  %v4_b268 = mul i32 %v1_b268, 4
  %v5_b268 = add i32 %v4_b268, %v2_ae88
  %v6_b268 = inttoptr i32 %v5_b268 to i32*
  %v7_b268 = load i32, i32* %v6_b268, align 4
  store i32 %v7_b268, i32* @r5, align 4
  %v1_b270 = add i32 %v7_b268, 20
  store i32 %v1_b270, i32* @r6, align 4
  %tmp55 = icmp ugt i8 %v3_b264, 31
  br i1 %tmp55, label %dec_label_pc_b18c, label %dec_label_pc_b278

dec_label_pc_b278:                                ; preds = %dec_label_pc_b254
  %v1_b278 = add i32 %v2_b260, 16
  %v2_b278 = inttoptr i32 %v1_b278 to i32*
  %v3_b278 = load i32, i32* %v2_b278, align 4
  %v0_b27c = call i32 @function_d3a8()
  store i32 %v0_b27c, i32* %r0.global-to-local, align 4
  %v3_b280 = load i32, i32* %stack_var_-44, align 4
  %v5_b288 = mul i32 %v3_b280, 24
  %v1_b28c = and i32 %v3_b278, 16711680
  store i32 %v1_b28c, i32* %ip.global-to-local, align 4
  %v3_b290 = udiv i32 %v3_b278, 16777216
  %v4_b294 = udiv i32 %v1_b28c, 256
  %v5_b294 = or i32 %v4_b294, %v3_b290
  store i32 %v5_b294, i32* %r2.global-to-local, align 4
  %v1_b298 = load i32, i32* @r7, align 4
  %v2_b298 = add i32 %v1_b298, %v5_b288
  store i32 %v2_b298, i32* %r1.global-to-local, align 4
  %v1_b29c = and i32 %v3_b278, 65280
  store i32 %v1_b29c, i32* %r3.global-to-local, align 4
  %v1_b2a0 = add i32 %v2_b298, 20
  %v2_b2a0 = inttoptr i32 %v1_b2a0 to i8*
  %v3_b2a0 = load i8, i8* %v2_b2a0, align 1
  %v4_b2a0 = zext i8 %v3_b2a0 to i32
  store i32 %v4_b2a0, i32* %ip.global-to-local, align 4
  %v5_b2a8 = call i32 @llvm.bswap.i32(i32 %v3_b278)
  %v7_b2ac = lshr i32 %v0_b27c, %v4_b2a0
  %v8_b2ac = add i32 %v7_b2ac, %v5_b2a8
  store i32 %v8_b2ac, i32* %r2.global-to-local, align 4
  %v1_b2b0 = and i32 %v8_b2ac, 16711680
  store i32 %v1_b2b0, i32* %r0.global-to-local, align 4
  %v1_b2bc = and i32 %v8_b2ac, 65280
  store i32 %v1_b2bc, i32* %r1.global-to-local, align 4
  %v5_b2c4 = call i32 @llvm.bswap.i32(i32 %v8_b2ac)
  store i32 %v5_b2c4, i32* @r3, align 4
  %v0_b2c8 = load i32, i32* @sb, align 4
  %v3_b2c8 = icmp eq i32 %v0_b2c8, -1
  %v1_b2cc = load i32, i32* @r5, align 4
  %v2_b2cc = add i32 %v1_b2cc, 16
  %v3_b2cc = inttoptr i32 %v2_b2cc to i32*
  store i32 %v5_b2c4, i32* %v3_b2cc, align 4
  br i1 %v3_b2c8, label %dec_label_pc_b2d4, label %dec_label_pc_b194

dec_label_pc_b2d4:                                ; preds = %dec_label_pc_b278, %dec_label_pc_b18c
  %v0_b2d4 = call i32 @function_d3a8()
  store i32 %v0_b2d4, i32* %r0.global-to-local, align 4
  store i32 %v3_b024, i32* @ip, align 4
  store i32 65535, i32* @r4, align 4
  %v1_b2e8 = load i32, i32* @r5, align 4
  %v2_b2e8 = add i32 %v1_b2e8, 12
  %v3_b2e8 = inttoptr i32 %v2_b2e8 to i32*
  store i32 %v0_b2d4, i32* %v3_b2e8, align 4
  br i1 %v3_b2e4, label %dec_label_pc_b2f0, label %dec_label_pc_b2d4.dec_label_pc_b1a8_crit_edge

dec_label_pc_b2d4.dec_label_pc_b1a8_crit_edge:    ; preds = %dec_label_pc_b2d4
  %v1_b1ac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b1a8

dec_label_pc_b2f0:                                ; preds = %dec_label_pc_b2d4, %dec_label_pc_b194
  %v0_b2f0 = call i32 @function_d3a8()
  %v1_b2f0 = trunc i32 %v0_b2f0 to i16
  %v3_b2f4 = load i32, i32* @r5, align 4
  %v4_b2f4 = add i32 %v3_b2f4, 4
  %v5_b2f4 = inttoptr i32 %v4_b2f4 to i16*
  store i16 %v1_b2f0, i16* %v5_b2f4, align 2
  store i32 %v3_b028, i32* %r0.global-to-local, align 4
  %v1_b2fc = load i32, i32* @r4, align 4
  %v9_b2fc = icmp eq i32 %v3_b028, %v1_b2fc
  br i1 %v9_b2fc, label %dec_label_pc_b304, label %dec_label_pc_b1b4

dec_label_pc_b304:                                ; preds = %dec_label_pc_b2f0, %dec_label_pc_b1a8
  %v0_b304 = call i32 @function_d3a8()
  %v1_b304 = trunc i32 %v0_b304 to i16
  store i32 %v0_b304, i32* %r0.global-to-local, align 4
  store i32 %v3_b02c, i32* %r1.global-to-local, align 4
  %v1_b30c = load i32, i32* @r4, align 4
  %v9_b30c = icmp eq i32 %v3_b02c, %v1_b30c
  %v3_b310 = load i32, i32* @r5, align 4
  %v4_b310 = add i32 %v3_b310, 20
  %v5_b310 = inttoptr i32 %v4_b310 to i16*
  store i16 %v1_b304, i16* %v5_b310, align 2
  br i1 %v9_b30c, label %dec_label_pc_b318, label %dec_label_pc_b1c0

dec_label_pc_b318:                                ; preds = %dec_label_pc_b304, %dec_label_pc_b1b4
  %v0_b318 = call i32 @function_d3a8()
  %v1_b318 = trunc i32 %v0_b318 to i16
  store i32 %v0_b318, i32* %r0.global-to-local, align 4
  store i32 %v1_af7c, i32* %r2.global-to-local, align 4
  %v3_b324 = load i32, i32* @r6, align 4
  %v4_b324 = add i32 %v3_b324, 2
  %v5_b324 = inttoptr i32 %v4_b324 to i16*
  store i16 %v1_b318, i16* %v5_b324, align 2
  br i1 %v2_b320, label %dec_label_pc_b1cc, label %dec_label_pc_b32c

dec_label_pc_b32c:                                ; preds = %dec_label_pc_b1c0, %dec_label_pc_b318
  %v0_b32c = load i32, i32* @r5, align 4
  %v1_b32c = add i32 %v0_b32c, 28
  store i32 %v1_b32c, i32* @r4, align 4
  store i32 %v1_b32c, i32* %r0.global-to-local, align 4
  store i32 %v0_b008, i32* %r1.global-to-local, align 4
  %v2_b338 = call i32 @function_d46c(i32 %v1_b32c, i32 %v0_b008)
  store i32 %v2_b338, i32* %r0.global-to-local, align 4
  store i32 %v0_b008, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b344 = load i32, i32* @r4, align 4
  %v4_b344 = add i32 %v3_b344, %v0_b008
  %v5_b344 = inttoptr i32 %v4_b344 to i8*
  store i8 0, i8* %v5_b344, align 1
  br label %dec_label_pc_b1cc

dec_label_pc_b34c:                                ; preds = %dec_label_pc_b04c, %dec_label_pc_b34c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b358 = call i32 @function_11528(i32 1510, i32 1)
  store i32 %v2_b358, i32* %r0.global-to-local, align 4
  store i32 %v2_ae88, i32* %ip.global-to-local, align 4
  %v3_b360 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b360, i32* %r1.global-to-local, align 4
  %v2_b364 = load i32, i32* @r4, align 4
  %v5_b364 = mul i32 %v2_b364, 4
  %v6_b364 = add i32 %v5_b364, %v2_ae88
  %v7_b364 = inttoptr i32 %v6_b364 to i32*
  store i32 %v2_b358, i32* %v7_b364, align 4
  %v0_b368 = load i32, i32* %ip.global-to-local, align 4
  %v1_b368 = load i32, i32* %r1.global-to-local, align 4
  %v4_b368 = mul i32 %v1_b368, 4
  %v5_b368 = add i32 %v4_b368, %v0_b368
  %v6_b368 = inttoptr i32 %v5_b368 to i32*
  %v7_b368 = load i32, i32* %v6_b368, align 4
  store i32 %v7_b368, i32* %r3.global-to-local, align 4
  %v1_b36c = inttoptr i32 %v7_b368 to i8*
  %v2_b36c = load i8, i8* %v1_b36c, align 1
  %tmp56 = urem i8 %v2_b36c, 16
  %v1_b370 = zext i8 %tmp56 to i32
  %v1_b374 = or i32 %v1_b370, 64
  store i32 %v1_b374, i32* %r2.global-to-local, align 4
  %v1_b378 = trunc i32 %v1_b374 to i8
  store i8 %v1_b378, i8* %v1_b36c, align 1
  %v0_b37c = load i32, i32* %r3.global-to-local, align 4
  %v1_b37c = inttoptr i32 %v0_b37c to i8*
  %v2_b37c = load i8, i8* %v1_b37c, align 1
  %v1_b380 = and i8 %v2_b37c, -16
  %v1_b384 = or i8 %v1_b380, 5
  store i32 17, i32* %ip.global-to-local, align 4
  store i8 %v1_b384, i8* %v1_b37c, align 1
  %v0_b390 = load i32, i32* %ip.global-to-local, align 4
  %v1_b390 = trunc i32 %v0_b390 to i8
  %v2_b390 = load i32, i32* %r3.global-to-local, align 4
  %v3_b390 = add i32 %v2_b390, 9
  %v4_b390 = inttoptr i32 %v3_b390 to i8*
  store i8 %v1_b390, i8* %v4_b390, align 1
  %v2_b398 = load i32, i32* %r3.global-to-local, align 4
  %v3_b398 = add i32 %v2_b398, 1
  %v4_b398 = inttoptr i32 %v3_b398 to i8*
  store i8 %v5_aec0, i8* %v4_b398, align 1
  store i32 %v5_aefc, i32* %ip.global-to-local, align 4
  %v0_b3a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b3a0 = mul i32 %v0_b3a0, 32
  store i32 %v3_b3a0, i32* %r0.global-to-local, align 4
  %v2_b3a4 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3a4 = add i32 %v2_b3a4, 8
  %v4_b3a4 = inttoptr i32 %v3_b3a4 to i8*
  store i8 %v1_b11c, i8* %v4_b3a4, align 1
  %v0_b3a8 = load i32, i32* @sb, align 4
  %v1_b3a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_b3a8 = add i32 %v1_b3a8, 12
  %v3_b3a8 = inttoptr i32 %v2_b3a8 to i32*
  store i32 %v0_b3a8, i32* %v3_b3a8, align 4
  %v0_b3ac = load i32, i32* %r0.global-to-local, align 4
  %v1_b3ac = load i32, i32* %r1.global-to-local, align 4
  %tmp57 = mul i32 %v1_b3ac, -8
  %v5_b3ac = add i32 %v0_b3ac, %tmp57
  %v1_b3b0 = load i32, i32* @r7, align 4
  %v2_b3b0 = add i32 %v5_b3ac, %v1_b3b0
  store i32 %v2_b3b0, i32* %r2.global-to-local, align 4
  %v1_b3b4 = add i32 %v2_b3b0, 16
  %v2_b3b4 = inttoptr i32 %v1_b3b4 to i32*
  %v3_b3b4 = load i32, i32* %v2_b3b4, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v1_b3bc = load i32, i32* %r3.global-to-local, align 4
  %v2_b3bc = add i32 %v1_b3bc, 16
  %v3_b3bc = inttoptr i32 %v2_b3bc to i32*
  store i32 %v3_b3b4, i32* %v3_b3bc, align 4
  store i32 64, i32* %r2.global-to-local, align 4
  %v0_b3c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3c4 = add i32 %v0_b3c4, 1
  store i32 %v1_b3c4, i32* @r4, align 4
  %v0_b3c8 = load i32, i32* @r6, align 4
  %v1_b3c8 = trunc i32 %v0_b3c8 to i16
  %v2_b3c8 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 2
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i16*
  store i16 %v1_b3c8, i16* %v4_b3c8, align 2
  %v0_b3cc = load i32, i32* %r3.global-to-local, align 4
  %v1_b3cc = add i32 %v0_b3cc, 20
  store i32 %v1_b3cc, i32* %r1.global-to-local, align 4
  %v0_b3d0 = load i32, i32* @r8, align 4
  %v1_b3d0 = trunc i32 %v0_b3d0 to i16
  %v3_b3d0 = add i32 %v0_b3cc, 4
  %v4_b3d0 = inttoptr i32 %v3_b3d0 to i16*
  store i16 %v1_b3d0, i16* %v4_b3d0, align 2
  %v0_b3d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3d4 = trunc i32 %v0_b3d4 to i16
  %v2_b3d4 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3d4 = add i32 %v2_b3d4, 6
  %v4_b3d4 = inttoptr i32 %v3_b3d4 to i16*
  store i16 %v1_b3d4, i16* %v4_b3d4, align 2
  %v0_b3d8 = load i32, i32* @sl, align 4
  %v1_b3d8 = trunc i32 %v0_b3d8 to i16
  %v2_b3d8 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3d8 = add i32 %v2_b3d8, 20
  %v4_b3d8 = inttoptr i32 %v3_b3d8 to i16*
  store i16 %v1_b3d8, i16* %v4_b3d8, align 2
  store i32 %v4_b138, i32* %r3.global-to-local, align 4
  %v0_b3e0 = load i32, i32* @r4, align 4
  %v1_b3e0 = load i32, i32* %r0.global-to-local, align 4
  %v0_b3e4 = load i32, i32* @r5, align 4
  %v1_b3e4 = trunc i32 %v0_b3e4 to i16
  %v2_b3e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_b3e4 = add i32 %v2_b3e4, 4
  %v4_b3e4 = inttoptr i32 %v3_b3e4 to i16*
  store i16 %v1_b3e4, i16* %v4_b3e4, align 2
  %v0_b3e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3e8 = trunc i32 %v0_b3e8 to i16
  %v2_b3e8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b3e8 = add i32 %v2_b3e8, 2
  %v4_b3e8 = inttoptr i32 %v3_b3e8 to i16*
  store i16 %v1_b3e8, i16* %v4_b3e8, align 2
  %v0_b3ec = load i32, i32* @r4, align 4
  store i32 %v0_b3ec, i32* %stack_var_-44, align 4
  %v5_b3f0 = icmp slt i32 %v0_b3e0, %v1_b3e0
  br i1 %v5_b3f0, label %dec_label_pc_b34c, label %dec_label_pc_b164.preheader

dec_label_pc_b3f8:                                ; preds = %dec_label_pc_b1cc, %dec_label_pc_b164
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b3fc = call i32 @function_fe58(i32* null)
  store i32 %v2_b3fc, i32* %r0.global-to-local, align 4
  store i32 %v2_afa0, i32* %r3.global-to-local, align 4
  %v6_b408 = icmp slt i32 %v2_afa0, %v2_b3fc
  br i1 %v6_b408, label %dec_label_pc_b40c, label %dec_label_pc_b164

dec_label_pc_b40c:                                ; preds = %dec_label_pc_b3f8, %dec_label_pc_ae5c, %dec_label_pc_b418
  %v1_b414 = phi i32 [ %v3_afb4, %dec_label_pc_ae5c ], [ %v1_b41c, %dec_label_pc_b418 ], [ %v2_b3fc, %dec_label_pc_b3f8 ]
  store i32 %v27_ae5c, i32* %lr.global-to-local, align 4
  ret i32 %v1_b414

dec_label_pc_b418:                                ; preds = %dec_label_pc_afc4
  %v0_b418 = load i32, i32* @fp, align 4
  store i32 %v0_b418, i32* %r0.global-to-local, align 4
  %v1_b41c = call i32 @function_101d8(i32 %v0_b418)
  store i32 %v1_b41c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b40c

; uselistorder directives
  uselistorder i32 %v1_b41c, { 1, 0 }
  uselistorder i32 %v0_b318, { 1, 0 }
  uselistorder i32 %v0_b304, { 1, 0 }
  uselistorder i32 %v1_b2fc, { 1, 0 }
  uselistorder i32 %v5_b2c4, { 1, 0 }
  uselistorder i32 %v3_b278, { 2, 1, 3, 0 }
  uselistorder i32 %v1_b244, { 1, 2, 0, 3 }
  uselistorder i32 %v5_b20c, { 1, 0 }
  uselistorder i32 %v4_b1fc, { 1, 0 }
  uselistorder i32 %v0_b1ec, { 1, 0, 2 }
  uselistorder i32 %v2_b1dc, { 1, 0 }
  uselistorder i1 %v2_b320, { 1, 0 }
  uselistorder i32 %v1_b124, { 1, 0 }
  uselistorder i32 %v3_b0a0, { 1, 0 }
  uselistorder i32 %v3_b09c, { 1, 0 }
  uselistorder i32 %v3_b098, { 1, 0 }
  uselistorder i32 %v1_b058, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b054, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v3_b028, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_b01c, { 1, 0 }
  uselistorder i32 %v0_b008, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_afb4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_afa0, { 1, 0 }
  uselistorder i32 %v1_af7c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_af3c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_af08, { 2, 1, 0 }
  uselistorder i32 %v5_aefc, { 0, 2, 1 }
  uselistorder i32 %v7_aec4, { 1, 0, 2, 3 }
  uselistorder i32 %v6_aea0, { 1, 2, 0 }
  uselistorder i32 %v2_ae88, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 13, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 8, 3, 4, 5, 6, 7, 10, 9, 12, 11, 14, 15, 13, 17, 16, 19, 18, 20, 22, 21, 29, 23, 24, 25, 26, 27, 28, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32 %arg2, { 2, 5, 4, 6, 0, 3, 1, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_b40c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b34c, { 1, 0 }
  uselistorder label %dec_label_pc_b32c, { 1, 0 }
  uselistorder label %dec_label_pc_b1cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b164, { 1, 0 }
  uselistorder label %dec_label_pc_b0c0, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_b428(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b428:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_b428 = load i32, i32* @r4, align 4
  %v27_b428 = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @fp, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_b454 = call i32 @function_11528(i32 %arg2, i32 4)
  %v0_b458 = load i32, i32* @r4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b460 = load i32, i32* @r7, align 4
  store i32 %v0_b460, i32* %r3.global-to-local, align 4
  store i32 %v2_b454, i32* @sb, align 4
  %v0_b468 = load i32, i32* @r5, align 4
  %v5_b46c = inttoptr i32 %v0_b458 to i32*
  %v6_b46c = call i32 @function_8258(i32 %v0_b468, i32* %v5_b46c, i32 2, i32 %v0_b460, i32 ptrtoint (i32* @0 to i32))
  %v1_b478 = urem i32 %v6_b46c, 256
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b47c = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b488 = load i32, i32* @r5, align 4
  %v5_b48c = trunc i32 %v6_b46c to i8
  %v6_b490 = inttoptr i32 %v0_b47c to i32*
  %v7_b490 = call i32 @function_8258(i32 %v0_b488, i32* %v6_b490, i32 3, i32 65535, i32 %v6_b46c)
  %v0_b494 = load i32, i32* @r4, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b4a4 = load i32, i32* @r5, align 4
  %v5_b4a8 = inttoptr i32 %v0_b494 to i32*
  %v6_b4a8 = call i32 @function_8258(i32 %v0_b4a4, i32* %v5_b4a8, i32 4, i32 64, i32 %v7_b490)
  %v0_b4b0 = load i32, i32* @r4, align 4
  %v1_b4b4 = urem i32 %v6_b4a8, 256
  store i32 %v1_b4b4, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b4bc = load i32, i32* @r7, align 4
  store i32 %v0_b4bc, i32* %r3.global-to-local, align 4
  %v0_b4c0 = load i32, i32* @r5, align 4
  %sext5 = mul i32 %v6_b4a8, 16777216
  %v5_b4c8 = sdiv i32 %sext5, 16777216
  %v6_b4c8 = inttoptr i32 %v0_b4b0 to i32*
  %v7_b4c8 = call i32 @function_8258(i32 %v0_b4c0, i32* %v6_b4c8, i32 5, i32 %v0_b4bc, i32 %v5_b4c8)
  %v1_b4d4 = urem i32 %v7_b4c8, 256
  store i32 %v1_b4d4, i32* %ip.global-to-local, align 4
  %v0_b4d8 = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b4e4 = load i32, i32* @r5, align 4
  %v5_b4ec = inttoptr i32 %v0_b4d8 to i32*
  %v6_b4ec = call i32 @function_8258(i32 %v0_b4e4, i32* %v5_b4ec, i32 6, i32 65535, i32 %v1_b4d4)
  %v0_b4f4 = load i32, i32* @r4, align 4
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b504 = load i32, i32* @r5, align 4
  %v5_b508 = inttoptr i32 %v0_b4f4 to i32*
  %v6_b508 = call i32 @function_8258(i32 %v0_b504, i32* %v5_b508, i32 7, i32 27015, i32 %v6_b4ec)
  store i32 %v6_b508, i32* @r4, align 4
  %v0_b510 = load i32, i32* @r7, align 4
  store i32 %v0_b510, i32* %stack_var_-48, align 4
  %v1_b518 = inttoptr i32 %v0_b510 to i32*
  %v2_b518 = call i32 @function_fe58(i32* %v1_b518)
  %v1_b51c = load i32, i32* @r6, align 4
  %v2_b51c = add i32 %v1_b51c, %v2_b518
  %v1_b528 = call i32 @function_f370(i32 10)
  %v3_b534 = call i32 @function_f2ac(i32 10, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_b548 = call i32 @function_109c0(i32 2, i32 3, i32 17)
  %v7_b54c = icmp eq i32 %v3_b548, -1
  store i32 %v3_b548, i32* @sl, align 4
  br i1 %v7_b54c, label %dec_label_pc_b878, label %dec_label_pc_b558

dec_label_pc_b558:                                ; preds = %dec_label_pc_b428
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b560 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b560, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b568 = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b574 = call i32 @function_1097c(i32 %v3_b548, i32 %v0_b568, i32 3, i32 %v6_b560, i32 ptrtoint (i32* @0 to i32))
  %v7_b578 = icmp eq i32 %v5_b574, -1
  br i1 %v7_b578, label %dec_label_pc_b884, label %dec_label_pc_b580

dec_label_pc_b580:                                ; preds = %dec_label_pc_b558
  store i32 %v6_b4ec, i32* %r2.global-to-local, align 4
  %v0_b58c = load i32, i32* @r4, align 4
  %v3_b590 = mul i32 %v6_b4ec, 65536
  store i32 %v3_b590, i32* %ip.global-to-local, align 4
  %v3_b594 = urem i32 %v7_b490, 65536
  store i32 %v3_b594, i32* %r3.global-to-local, align 4
  %v3_b598 = urem i32 %v6_b4ec, 65536
  %v3_b59c = urem i32 %v0_b58c, 65536
  %v0_b5a0 = load i32, i32* @fp, align 4
  %v2_b5a0 = icmp eq i32 %v0_b5a0, 0
  %v0_b5a4 = load i32, i32* @r7, align 4
  store i32 %v0_b5a4, i32* %stack_var_-44, align 4
  br i1 %v2_b5a0, label %dec_label_pc_b6e4.preheader, label %dec_label_pc_b5b8

dec_label_pc_b5b8:                                ; preds = %dec_label_pc_b580
  %tmp38 = mul i32 %v7_b490, 256
  %v3_b5c0 = and i32 %tmp38, 65280
  store i32 %v3_b5c0, i32* %r3.global-to-local, align 4
  %tmp39 = mul i32 %v0_b58c, 256
  %v3_b5c4 = and i32 %tmp39, 65280
  %tmp40 = udiv i32 %v7_b490, 256
  %v4_b5cc = urem i32 %tmp40, 256
  %v5_b5cc = or i32 %v4_b5cc, %tmp38
  %tmp41 = udiv i32 %v0_b58c, 256
  %v4_b5d0 = urem i32 %tmp41, 256
  %v5_b5d0 = or i32 %v4_b5d0, %v3_b5c4
  store i32 %v5_b5d0, i32* @lr, align 4
  %tmp42 = mul i32 %v6_b4ec, 256
  %v3_b5d4 = and i32 %tmp42, 65280
  store i32 %v3_b5d4, i32* %r2.global-to-local, align 4
  %v5_b5d8 = trunc i32 %v5_b5cc to i16
  %tmp43 = udiv i32 %v6_b4ec, 256
  %v4_b5e0 = urem i32 %tmp43, 256
  %v5_b5e0 = or i32 %v4_b5e0, %v3_b5d4
  store i32 %v5_b5e0, i32* @r6, align 4
  store i32 %v0_b5a4, i32* @r4, align 4
  %sext = mul nuw i32 %v5_b5d0, 65536
  %v4_b6b0 = sdiv i32 %sext, 65536
  %v1_b65c = trunc i32 %v5_b4c8 to i8
  br label %dec_label_pc_b5e8

dec_label_pc_b5e8:                                ; preds = %.thread, %dec_label_pc_b5b8
  %v2_b5f0 = call i32 @function_11528(i32 128, i32 1)
  %v3_b5f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b5f4, i32* %r2.global-to-local, align 4
  %v1_b5f8 = load i32, i32* @sb, align 4
  %v2_b5f8 = load i32, i32* @r4, align 4
  %v5_b5f8 = mul i32 %v2_b5f8, 4
  %v6_b5f8 = add i32 %v5_b5f8, %v1_b5f8
  %v7_b5f8 = inttoptr i32 %v6_b5f8 to i32*
  store i32 %v2_b5f0, i32* %v7_b5f8, align 4
  %v0_b5fc = load i32, i32* %r2.global-to-local, align 4
  %v3_b5fc = mul i32 %v0_b5fc, 32
  store i32 %v3_b5fc, i32* %r3.global-to-local, align 4
  %v0_b600 = load i32, i32* @sb, align 4
  %v4_b600 = mul i32 %v0_b5fc, 4
  %v5_b600 = add i32 %v0_b600, %v4_b600
  %v6_b600 = inttoptr i32 %v5_b600 to i32*
  %v7_b600 = load i32, i32* %v6_b600, align 4
  store i32 %v7_b600, i32* @lr, align 4
  %v5_b604 = mul i32 %v0_b5fc, 24
  store i32 %v5_b604, i32* %r3.global-to-local, align 4
  %v1_b608 = load i32, i32* @r8, align 4
  %v2_b608 = add i32 %v1_b608, %v5_b604
  store i32 %v2_b608, i32* @r5, align 4
  %v1_b60c = inttoptr i32 %v7_b600 to i8*
  %v2_b60c = load i8, i8* %v1_b60c, align 1
  %tmp = urem i8 %v2_b60c, 16
  %v1_b610 = zext i8 %tmp to i32
  %v1_b614 = or i32 %v1_b610, 64
  store i32 %v1_b614, i32* %r3.global-to-local, align 4
  %v1_b61c = trunc i32 %v1_b614 to i8
  store i8 %v1_b61c, i8* %v1_b60c, align 1
  %v0_b620 = load i32, i32* @lr, align 4
  %v1_b620 = inttoptr i32 %v0_b620 to i8*
  %v2_b620 = load i8, i8* %v1_b620, align 1
  %v1_b624 = and i8 %v2_b620, -16
  %v1_b628 = or i8 %v1_b624, 5
  store i8 %v1_b628, i8* %v1_b620, align 1
  %v2_b634 = load i32, i32* @lr, align 4
  %v3_b634 = add i32 %v2_b634, 1
  %v4_b634 = inttoptr i32 %v3_b634 to i8*
  store i8 %v5_b48c, i8* %v4_b634, align 1
  %v3_b638 = load i32, i32* %stack_var_-48, align 4
  %v3_b63c = mul i32 %v3_b638, 65536
  %v1_b640 = add i32 %v3_b63c, 2097152
  %v3_b644 = udiv i32 %v1_b640, 256
  %v1_b648 = and i32 %v3_b644, 65280
  %v4_b64c = udiv i32 %v1_b640, 16777216
  %v5_b64c = or i32 %v1_b648, %v4_b64c
  store i32 %v5_b64c, i32* %r3.global-to-local, align 4
  store i32 %v1_b4d4, i32* %r4.global-to-local, align 4
  %v3_b658 = urem i32 %v3_b638, 65536
  store i32 %v3_b658, i32* %r2.global-to-local, align 4
  %v2_b65c = load i32, i32* @lr, align 4
  %v3_b65c = add i32 %v2_b65c, 8
  %v4_b65c = inttoptr i32 %v3_b65c to i8*
  store i8 %v1_b65c, i8* %v4_b65c, align 1
  %v0_b660 = load i32, i32* %r3.global-to-local, align 4
  %v1_b660 = trunc i32 %v0_b660 to i16
  %v2_b660 = load i32, i32* @lr, align 4
  %v3_b660 = add i32 %v2_b660, 2
  %v4_b660 = inttoptr i32 %v3_b660 to i16*
  store i16 %v1_b660, i16* %v4_b660, align 2
  %v0_b664 = load i32, i32* %r2.global-to-local, align 4
  %v1_b664 = mul i32 %v0_b664, 65536
  %v3_b66c = add i32 %v1_b664, 786432
  store i32 %v3_b66c, i32* %r2.global-to-local, align 4
  %v2_b670 = load i32, i32* @lr, align 4
  %v3_b670 = add i32 %v2_b670, 4
  %v4_b670 = inttoptr i32 %v3_b670 to i16*
  store i16 %v5_b5d8, i16* %v4_b670, align 2
  %v0_b674 = load i32, i32* %r2.global-to-local, align 4
  %v3_b674 = udiv i32 %v0_b674, 256
  %v1_b678 = and i32 %v3_b674, 65280
  %v4_b67c = udiv i32 %v0_b674, 16777216
  %v5_b67c = or i32 %v1_b678, %v4_b67c
  store i32 %v5_b67c, i32* %ip.global-to-local, align 4
  %v2_b684 = load i32, i32* @lr, align 4
  %v3_b684 = add i32 %v2_b684, 9
  %v4_b684 = inttoptr i32 %v3_b684 to i8*
  store i8 17, i8* %v4_b684, align 1
  %v0_b688 = load i32, i32* %r4.global-to-local, align 4
  %v2_b688 = icmp eq i32 %v0_b688, 0
  store i32 ptrtoint (i32* @global_var_1fbd0.42 to i32), i32* %r3.global-to-local, align 4
  br i1 %v2_b688, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b5e8
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_b694 = load i32, i32* @lr, align 4
  %v4_b694 = add i32 %v3_b694, 6
  %v5_b694 = inttoptr i32 %v4_b694 to i16*
  store i16 64, i16* %v5_b694, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b5e8, %bb
  %v2_b698 = load i32, i32* @global_var_1fbd0.42, align 4
  store i32 %v2_b698, i32* %r2.global-to-local, align 4
  %v1_b69c = load i32, i32* @lr, align 4
  %v2_b69c = add i32 %v1_b69c, 12
  %v3_b69c = inttoptr i32 %v2_b69c to i32*
  store i32 %v2_b698, i32* %v3_b69c, align 4
  %v0_b6a0 = load i32, i32* @r5, align 4
  %v1_b6a0 = add i32 %v0_b6a0, 16
  %v2_b6a0 = inttoptr i32 %v1_b6a0 to i32*
  %v3_b6a0 = load i32, i32* %v2_b6a0, align 4
  store i32 %v3_b6a0, i32* %r3.global-to-local, align 4
  %v0_b6a4 = load i32, i32* @lr, align 4
  %v1_b6a4 = add i32 %v0_b6a4, 20
  store i32 %v1_b6a4, i32* %r4.global-to-local, align 4
  %v0_b6a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b6a8 = trunc i32 %v0_b6a8 to i16
  %v3_b6a8 = add i32 %v0_b6a4, 24
  %v4_b6a8 = inttoptr i32 %v3_b6a8 to i16*
  store i16 %v1_b6a8, i16* %v4_b6a8, align 2
  %v0_b6ac = load i32, i32* %r3.global-to-local, align 4
  %v1_b6ac = load i32, i32* @lr, align 4
  %v2_b6ac = add i32 %v1_b6ac, 16
  %v3_b6ac = inttoptr i32 %v2_b6ac to i32*
  store i32 %v0_b6ac, i32* %v3_b6ac, align 4
  store i32 %v4_b6b0, i32* %ip.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_b6b8 = load i32, i32* @lr, align 4
  %v2_b6b8 = add i32 %v1_b6b8, 28
  %v3_b6b8 = inttoptr i32 %v2_b6b8 to i32*
  store i32 -1, i32* %v3_b6b8, align 4
  %v0_b6bc = load i32, i32* %ip.global-to-local, align 4
  %v1_b6bc = trunc i32 %v0_b6bc to i16
  %v2_b6bc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6bc = add i32 %v2_b6bc, 2
  %v4_b6bc = inttoptr i32 %v3_b6bc to i16*
  store i16 %v1_b6bc, i16* %v4_b6bc, align 2
  %v0_b6c0 = load i32, i32* @lr, align 4
  %v1_b6c0 = add i32 %v0_b6c0, 32
  %v0_b6c4 = load i32, i32* @r6, align 4
  %v1_b6c4 = trunc i32 %v0_b6c4 to i16
  %v3_b6c4 = add i32 %v0_b6c0, 20
  %v4_b6c4 = inttoptr i32 %v3_b6c4 to i16*
  store i16 %v1_b6c4, i16* %v4_b6c4, align 2
  %v3_b6c8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_b6c8, i32* %r2.global-to-local, align 4
  %v3_b6cc = call i32 @function_f83c(i32 %v1_b6c0, i32 %v3_b534, i32 %v3_b6c8)
  %v3_b6d0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b6d0, i32* %r3.global-to-local, align 4
  %v1_b6d4 = add i32 %v3_b6d0, 1
  store i32 %v1_b6d4, i32* @r4, align 4
  %v1_b6d8 = load i32, i32* @fp, align 4
  store i32 %v1_b6d4, i32* %stack_var_-44, align 4
  %v5_b6e0 = icmp slt i32 %v1_b6d4, %v1_b6d8
  br i1 %v5_b6e0, label %dec_label_pc_b5e8, label %dec_label_pc_b6e4.preheader

dec_label_pc_b6e4.preheader:                      ; preds = %.thread, %dec_label_pc_b580
  %v0_b6e8.ph = phi i32 [ 0, %dec_label_pc_b580 ], [ %v1_b6d8, %.thread ]
  %v3_b700 = icmp eq i32 %v3_b594, 65535
  br label %dec_label_pc_b6e4

dec_label_pc_b6e4:                                ; preds = %dec_label_pc_b6e4.preheader, %dec_label_pc_b864.dec_label_pc_b6e4_crit_edge
  %v0_b6e8 = phi i32 [ %v0_b6e8.pre, %dec_label_pc_b864.dec_label_pc_b6e4_crit_edge ], [ %v0_b6e8.ph, %dec_label_pc_b6e4.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b6e8 = icmp eq i32 %v0_b6e8, 0
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b6e8, label %dec_label_pc_b864, label %dec_label_pc_b6f4

dec_label_pc_b6f4:                                ; preds = %dec_label_pc_b6e4
  br label %dec_label_pc_b7a8

dec_label_pc_b6fc:                                ; preds = %dec_label_pc_b7a8
  br i1 %v3_b700, label %dec_label_pc_b830, label %dec_label_pc_b708

dec_label_pc_b708:                                ; preds = %dec_label_pc_b7d0.dec_label_pc_b708_crit_edge, %dec_label_pc_b6fc
  %v1_b70c = phi i32 [ %v1_b70c.pre, %dec_label_pc_b7d0.dec_label_pc_b708_crit_edge ], [ 65535, %dec_label_pc_b6fc ]
  store i32 %v3_b598, i32* %r2.global-to-local, align 4
  %v9_b70c = icmp eq i32 %v3_b598, %v1_b70c
  br i1 %v9_b70c, label %dec_label_pc_b844, label %dec_label_pc_b714

dec_label_pc_b714:                                ; preds = %dec_label_pc_b830.dec_label_pc_b714_crit_edge, %dec_label_pc_b708
  %v1_b718 = phi i32 [ %v1_b718.pre, %dec_label_pc_b830.dec_label_pc_b714_crit_edge ], [ %v1_b70c, %dec_label_pc_b708 ]
  store i32 %v3_b59c, i32* %r3.global-to-local, align 4
  %v9_b718 = icmp eq i32 %v3_b59c, %v1_b718
  br i1 %v9_b718, label %dec_label_pc_b858, label %dec_label_pc_b720

dec_label_pc_b720:                                ; preds = %dec_label_pc_b844, %dec_label_pc_b714, %dec_label_pc_b858
  store i32 0, i32* @r4, align 4
  %v2_b728 = load i32, i32* @r5, align 4
  %v3_b728 = add i32 %v2_b728, 10
  %v4_b728 = inttoptr i32 %v3_b728 to i16*
  store i16 0, i16* %v4_b728, align 2
  %v0_b72c = load i32, i32* @r5, align 4
  store i32 %v0_b72c, i32* @r0, align 4
  %v2_b730 = call i32 @function_bf78(i32 %v0_b72c, i32 20)
  %v3_b730 = trunc i32 %v2_b730 to i16
  %v3_b734 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_b734, i32* %r3.global-to-local, align 4
  %v3_b738 = load i32, i32* @r5, align 4
  %v4_b738 = add i32 %v3_b738, 10
  %v5_b738 = inttoptr i32 %v4_b738 to i16*
  store i16 %v3_b730, i16* %v5_b738, align 2
  %v0_b73c = load i32, i32* @r6, align 4
  store i32 %v0_b73c, i32* @r1, align 4
  %v1_b740 = add i32 %v0_b73c, 4
  %v2_b740 = inttoptr i32 %v1_b740 to i16*
  %v3_b740 = load i16, i16* %v2_b740, align 2
  %v4_b740 = zext i16 %v3_b740 to i32
  store i32 %v4_b740, i32* %r2.global-to-local, align 4
  %v0_b744 = load i32, i32* @r4, align 4
  %v1_b744 = trunc i32 %v0_b744 to i16
  %v3_b744 = add i32 %v0_b73c, 6
  %v4_b744 = inttoptr i32 %v3_b744 to i16*
  store i16 %v1_b744, i16* %v4_b744, align 2
  %v0_b748 = load i32, i32* %r3.global-to-local, align 4
  %v1_b748 = add i32 %v0_b748, 12
  store i32 %v1_b748, i32* %r3.global-to-local, align 4
  %v0_b74c = load i32, i32* @r5, align 4
  %v4_b750 = call i32 @function_bfc8(i32 %v0_b74c, i32 %v0_b73c, i32 %v4_b740, i32 %v1_b748)
  %v5_b750 = trunc i32 %v4_b750 to i16
  %v3_b754 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b754, i32* %r3.global-to-local, align 4
  %v3_b758 = mul i32 %v3_b754, 32
  store i32 %v3_b758, i32* %lr.global-to-local, align 4
  %v3_b75c = load i32, i32* @r6, align 4
  %v4_b75c = add i32 %v3_b75c, 6
  %v5_b75c = inttoptr i32 %v4_b75c to i16*
  store i16 %v5_b750, i16* %v5_b75c, align 2
  %v0_b760 = load i32, i32* %lr.global-to-local, align 4
  %v1_b760 = load i32, i32* %r3.global-to-local, align 4
  %tmp44 = mul i32 %v1_b760, -8
  %v5_b760 = add i32 %v0_b760, %tmp44
  store i32 %v5_b760, i32* %lr.global-to-local, align 4
  %v0_b764 = load i32, i32* @r6, align 4
  %v1_b764 = add i32 %v0_b764, 2
  %v2_b764 = inttoptr i32 %v1_b764 to i16*
  %v3_b764 = load i16, i16* %v2_b764, align 2
  %v3_b768 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_b768, i32* %r2.global-to-local, align 4
  %v1_b76c = load i32, i32* @r8, align 4
  %v2_b76c = add i32 %v1_b76c, %v5_b760
  store i32 %v2_b76c, i32* @lr, align 4
  %v3_b770 = add i32 %v2_b76c, 2
  %v4_b770 = inttoptr i32 %v3_b770 to i16*
  store i16 %v3_b764, i16* %v4_b770, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b77c = load i32, i32* @r5, align 4
  %v0_b780 = load i32, i32* %r2.global-to-local, align 4
  %v1_b780 = add i32 %v0_b780, 32
  store i32 %v1_b780, i32* %r2.global-to-local, align 4
  %v0_b784 = load i32, i32* @sl, align 4
  %v0_b788 = load i32, i32* @lr, align 4
  %v6_b790 = call i32 @function_1093c(i32 %v0_b784, i32 %v0_b77c, i32 %v1_b780, i32 16384, i32 %v0_b788, i32 16)
  %v3_b794 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b794, i32* %r3.global-to-local, align 4
  %v1_b798 = add i32 %v3_b794, 1
  %v1_b79c = load i32, i32* @fp, align 4
  store i32 %v1_b798, i32* %stack_var_-44, align 4
  %v6_b7a4 = icmp slt i32 %v1_b798, %v1_b79c
  br i1 %v6_b7a4, label %dec_label_pc_b7a8, label %dec_label_pc_b864

dec_label_pc_b7a8:                                ; preds = %dec_label_pc_b720, %dec_label_pc_b6f4
  %v1_b7b8 = phi i32 [ %v1_b798, %dec_label_pc_b720 ], [ 0, %dec_label_pc_b6f4 ]
  %v5_b7ac = mul i32 %v1_b7b8, 24
  %v1_b7b0 = load i32, i32* @r8, align 4
  %v2_b7b0 = add i32 %v1_b7b0, %v5_b7ac
  store i32 %v2_b7b0, i32* %r3.global-to-local, align 4
  %v1_b7b4 = add i32 %v2_b7b0, 20
  %v2_b7b4 = inttoptr i32 %v1_b7b4 to i8*
  %v3_b7b4 = load i8, i8* %v2_b7b4, align 1
  %v4_b7b4 = zext i8 %v3_b7b4 to i32
  store i32 %v4_b7b4, i32* %r2.global-to-local, align 4
  %v0_b7b8 = load i32, i32* @sb, align 4
  %v4_b7b8 = mul i32 %v1_b7b8, 4
  %v5_b7b8 = add i32 %v0_b7b8, %v4_b7b8
  %v6_b7b8 = inttoptr i32 %v5_b7b8 to i32*
  %v7_b7b8 = load i32, i32* %v6_b7b8, align 4
  store i32 %v7_b7b8, i32* @r5, align 4
  store i32 65535, i32* @r7, align 4
  %v1_b7c8 = add i32 %v7_b7b8, 20
  store i32 %v1_b7c8, i32* @r6, align 4
  %tmp45 = icmp ugt i8 %v3_b7b4, 31
  br i1 %tmp45, label %dec_label_pc_b6fc, label %dec_label_pc_b7d0

dec_label_pc_b7d0:                                ; preds = %dec_label_pc_b7a8
  %v1_b7d0 = add i32 %v2_b7b0, 16
  %v2_b7d0 = inttoptr i32 %v1_b7d0 to i32*
  %v3_b7d0 = load i32, i32* %v2_b7d0, align 4
  store i32 %v3_b7d0, i32* %r4.global-to-local, align 4
  %v0_b7d4 = call i32 @function_d3a8()
  %v3_b7d8 = load i32, i32* %stack_var_-44, align 4
  %v5_b7e0 = mul i32 %v3_b7d8, 24
  %v1_b7e4 = and i32 %v3_b7d0, 16711680
  store i32 %v1_b7e4, i32* %ip.global-to-local, align 4
  %v3_b7e8 = udiv i32 %v3_b7d0, 16777216
  %v4_b7ec = udiv i32 %v1_b7e4, 256
  %v5_b7ec = or i32 %v4_b7ec, %v3_b7e8
  store i32 %v5_b7ec, i32* %r2.global-to-local, align 4
  %v1_b7f0 = load i32, i32* @r8, align 4
  %v2_b7f0 = add i32 %v1_b7f0, %v5_b7e0
  %v1_b7f4 = and i32 %v3_b7d0, 65280
  store i32 %v1_b7f4, i32* %r3.global-to-local, align 4
  %v1_b7f8 = add i32 %v2_b7f0, 20
  %v2_b7f8 = inttoptr i32 %v1_b7f8 to i8*
  %v3_b7f8 = load i8, i8* %v2_b7f8, align 1
  %v4_b7f8 = zext i8 %v3_b7f8 to i32
  store i32 %v4_b7f8, i32* %ip.global-to-local, align 4
  %v5_b800 = call i32 @llvm.bswap.i32(i32 %v3_b7d0)
  %v7_b804 = lshr i32 %v0_b7d4, %v4_b7f8
  %v8_b804 = add i32 %v7_b804, %v5_b800
  store i32 %v8_b804, i32* %r2.global-to-local, align 4
  %v5_b820 = call i32 @llvm.bswap.i32(i32 %v8_b804)
  store i32 %v5_b820, i32* %r3.global-to-local, align 4
  %v1_b824 = load i32, i32* @r7, align 4
  %v9_b824 = icmp eq i32 %v3_b594, %v1_b824
  %v1_b828 = load i32, i32* @r5, align 4
  %v2_b828 = add i32 %v1_b828, 16
  %v3_b828 = inttoptr i32 %v2_b828 to i32*
  store i32 %v5_b820, i32* %v3_b828, align 4
  br i1 %v9_b824, label %dec_label_pc_b830, label %dec_label_pc_b7d0.dec_label_pc_b708_crit_edge

dec_label_pc_b7d0.dec_label_pc_b708_crit_edge:    ; preds = %dec_label_pc_b7d0
  %v1_b70c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b708

dec_label_pc_b830:                                ; preds = %dec_label_pc_b7d0, %dec_label_pc_b6fc
  %v0_b830 = call i32 @function_d3a8()
  %v1_b830 = trunc i32 %v0_b830 to i16
  store i32 %v3_b598, i32* %r2.global-to-local, align 4
  %v1_b838 = load i32, i32* @r7, align 4
  %v9_b838 = icmp eq i32 %v3_b598, %v1_b838
  %v3_b83c = load i32, i32* @r5, align 4
  %v4_b83c = add i32 %v3_b83c, 4
  %v5_b83c = inttoptr i32 %v4_b83c to i16*
  store i16 %v1_b830, i16* %v5_b83c, align 2
  br i1 %v9_b838, label %dec_label_pc_b844, label %dec_label_pc_b830.dec_label_pc_b714_crit_edge

dec_label_pc_b830.dec_label_pc_b714_crit_edge:    ; preds = %dec_label_pc_b830
  %v1_b718.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b714

dec_label_pc_b844:                                ; preds = %dec_label_pc_b830, %dec_label_pc_b708
  %v0_b844 = call i32 @function_d3a8()
  %v1_b844 = trunc i32 %v0_b844 to i16
  store i32 %v3_b59c, i32* %r3.global-to-local, align 4
  %v1_b84c = load i32, i32* @r7, align 4
  %v9_b84c = icmp eq i32 %v3_b59c, %v1_b84c
  %v3_b850 = load i32, i32* @r5, align 4
  %v4_b850 = add i32 %v3_b850, 20
  %v5_b850 = inttoptr i32 %v4_b850 to i16*
  store i16 %v1_b844, i16* %v5_b850, align 2
  br i1 %v9_b84c, label %dec_label_pc_b858, label %dec_label_pc_b720

dec_label_pc_b858:                                ; preds = %dec_label_pc_b844, %dec_label_pc_b714
  %v0_b858 = call i32 @function_d3a8()
  %v1_b858 = trunc i32 %v0_b858 to i16
  %v3_b85c = load i32, i32* @r6, align 4
  %v4_b85c = add i32 %v3_b85c, 2
  %v5_b85c = inttoptr i32 %v4_b85c to i16*
  store i16 %v1_b858, i16* %v5_b85c, align 2
  br label %dec_label_pc_b720

dec_label_pc_b864:                                ; preds = %dec_label_pc_b720, %dec_label_pc_b6e4
  %v2_b868 = call i32 @function_fe58(i32* null)
  store i32 %v2_b51c, i32* %ip.global-to-local, align 4
  %v6_b874 = icmp slt i32 %v2_b51c, %v2_b868
  br i1 %v6_b874, label %dec_label_pc_b878, label %dec_label_pc_b864.dec_label_pc_b6e4_crit_edge

dec_label_pc_b864.dec_label_pc_b6e4_crit_edge:    ; preds = %dec_label_pc_b864
  %v0_b6e8.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_b6e4

dec_label_pc_b878:                                ; preds = %dec_label_pc_b864, %dec_label_pc_b428, %dec_label_pc_b884
  %v1_b880 = phi i32 [ %v3_b548, %dec_label_pc_b428 ], [ %v1_b888, %dec_label_pc_b884 ], [ %v2_b868, %dec_label_pc_b864 ]
  store i32 %v3_b428, i32* %r4.global-to-local, align 4
  store i32 %v27_b428, i32* %lr.global-to-local, align 4
  ret i32 %v1_b880

dec_label_pc_b884:                                ; preds = %dec_label_pc_b558
  %v0_b884 = load i32, i32* @sl, align 4
  %v1_b888 = call i32 @function_101d8(i32 %v0_b884)
  br label %dec_label_pc_b878

; uselistorder directives
  uselistorder i32 %v5_b820, { 1, 0 }
  uselistorder i32 %v3_b7d0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_b798, { 1, 2, 0 }
  uselistorder i32 %v5_b760, { 1, 0 }
  uselistorder i32 %v0_b73c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b6d4, { 1, 0, 2 }
  uselistorder i32 %v3_b638, { 1, 0 }
  uselistorder i32 %v0_b5fc, { 1, 2, 0 }
  uselistorder i32 %v3_b5d4, { 1, 0 }
  uselistorder i32 %v3_b594, { 0, 2, 1 }
  uselistorder i32 %v0_b58c, { 1, 0, 2 }
  uselistorder i32 %v3_b548, { 1, 2, 3, 0 }
  uselistorder i32 %v2_b51c, { 1, 0 }
  uselistorder i32 %v6_b4ec, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v1_b4d4, { 1, 2, 0 }
  uselistorder i32 %v5_b4c8, { 1, 0 }
  uselistorder i32 %v7_b490, { 1, 0, 2, 3 }
  uselistorder i32 %v6_b46c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r4.global-to-local, { 4, 5, 0, 1, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 19, 20, 21, 30, 22, 23, 24, 25, 26, 27, 28, 29, 32, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r2.global-to-local, { 19, 20, 21, 27, 22, 23, 24, 25, 26, 28, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %ip.global-to-local, { 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_b878, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b720, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b6e4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b894(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b894:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v9_b894 = load i32, i32* @r6, align 4
  %v18_b894 = load i32, i32* @sb, align 4
  %v27_b894 = load i32, i32* @lr, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg1, i32* @fp, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_b8c4 = call i32 @function_11528(i32 %arg2, i32 4)
  %v0_b8c8 = load i32, i32* @r4, align 4
  store i32 %v0_b8c8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b8d4 = load i32, i32* @sl, align 4
  store i32 %v0_b8d4, i32* %r3.global-to-local, align 4
  %v0_b8d8 = load i32, i32* @r5, align 4
  store i32 %v0_b8d8, i32* %r0.global-to-local, align 4
  %v5_b8dc = inttoptr i32 %v0_b8c8 to i32*
  %v6_b8dc = call i32 @function_8258(i32 %v0_b8d8, i32* %v5_b8dc, i32 2, i32 %v0_b8d4, i32 %v2_b8c4)
  %v1_b8e8 = urem i32 %v6_b8dc, 256
  store i32 %v1_b8e8, i32* %ip.global-to-local, align 4
  %v0_b8ec = load i32, i32* @r4, align 4
  store i32 %v0_b8ec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b8f8 = load i32, i32* @r5, align 4
  store i32 %v0_b8f8, i32* %r0.global-to-local, align 4
  %v6_b900 = inttoptr i32 %v0_b8ec to i32*
  %v7_b900 = call i32 @function_8258(i32 %v0_b8f8, i32* %v6_b900, i32 3, i32 65535, i32 %v1_b8e8)
  %v0_b904 = load i32, i32* @r4, align 4
  store i32 %v0_b904, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b914 = load i32, i32* @r5, align 4
  store i32 %v0_b914, i32* %r0.global-to-local, align 4
  %v5_b918 = inttoptr i32 %v0_b904 to i32*
  %v6_b918 = call i32 @function_8258(i32 %v0_b914, i32* %v5_b918, i32 4, i32 64, i32 %v7_b900)
  %v0_b920 = load i32, i32* @r4, align 4
  store i32 %v0_b920, i32* %r1.global-to-local, align 4
  %v1_b924 = urem i32 %v6_b918, 256
  store i32 %v1_b924, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b92c = load i32, i32* @sl, align 4
  store i32 %v0_b92c, i32* %r3.global-to-local, align 4
  %v0_b930 = load i32, i32* @r5, align 4
  store i32 %v0_b930, i32* %r0.global-to-local, align 4
  %sext21 = mul i32 %v6_b918, 16777216
  %v5_b938 = sdiv i32 %sext21, 16777216
  %v6_b938 = inttoptr i32 %v0_b920 to i32*
  %v7_b938 = call i32 @function_8258(i32 %v0_b930, i32* %v6_b938, i32 5, i32 %v0_b92c, i32 %v5_b938)
  %v1_b944 = urem i32 %v7_b938, 256
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  %v0_b948 = load i32, i32* @r4, align 4
  store i32 %v0_b948, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b954 = load i32, i32* @r5, align 4
  store i32 %v0_b954, i32* %r0.global-to-local, align 4
  %v5_b95c = inttoptr i32 %v0_b948 to i32*
  %v6_b95c = call i32 @function_8258(i32 %v0_b954, i32* %v5_b95c, i32 6, i32 65535, i32 %v1_b944)
  %v0_b960 = load i32, i32* @r4, align 4
  store i32 %v0_b960, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @r5, align 4
  store i32 %v0_b970, i32* %r0.global-to-local, align 4
  %v5_b974 = inttoptr i32 %v0_b960 to i32*
  %v6_b974 = call i32 @function_8258(i32 %v0_b970, i32* %v5_b974, i32 7, i32 53, i32 %v6_b95c)
  %v0_b97c = load i32, i32* @r4, align 4
  store i32 %v0_b97c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v0_b98c = load i32, i32* @r5, align 4
  store i32 %v0_b98c, i32* %r0.global-to-local, align 4
  %v5_b990 = inttoptr i32 %v0_b97c to i32*
  %v6_b990 = call i32 @function_8258(i32 %v0_b98c, i32* %v5_b990, i32 9, i32 65535, i32 %v6_b974)
  %v0_b994 = load i32, i32* @r4, align 4
  store i32 %v0_b994, i32* %r1.global-to-local, align 4
  %v0_b99c = load i32, i32* @sl, align 4
  store i32 %v0_b99c, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_b9a4 = load i32, i32* @r5, align 4
  store i32 %v0_b9a4, i32* %r0.global-to-local, align 4
  %v5_b9a8 = inttoptr i32 %v0_b994 to i32*
  %v6_b9a8 = call i32 @function_8258(i32 %v0_b9a4, i32* %v5_b9a8, i32 %v0_b99c, i32 12, i32 %v6_b990)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_b9b0 = load i32, i32* @sl, align 4
  store i32 %v0_b9b0, i32* %r3.global-to-local, align 4
  %v0_b9b4 = load i32, i32* @r4, align 4
  store i32 %v0_b9b4, i32* %r1.global-to-local, align 4
  %v0_b9bc = load i32, i32* @r5, align 4
  store i32 %v0_b9bc, i32* %r0.global-to-local, align 4
  %v5_b9c0 = inttoptr i32 %v0_b9b4 to i32*
  %v6_b9c0 = call i32 @function_8190(i32 %v0_b9bc, i32* %v5_b9c0, i32 8, i32 %v0_b9b0, i32 %v6_b9a8)
  store i32 %v6_b9c0, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_b9cc = call i32 @function_f370(i32 11)
  %v0_b9d0 = load i32, i32* @sl, align 4
  store i32 %v0_b9d0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v2_b9d8 = inttoptr i32 %v0_b9d0 to i32*
  %v3_b9d8 = call i32 @function_f2ac(i32 11, i32* %v2_b9d8)
  store i32 %v3_b9d8, i32* %r0.global-to-local, align 4
  %v0_b9dc = load i32, i32* @sl, align 4
  store i32 %v0_b9dc, i32* %r1.global-to-local, align 4
  %v2_b9e0 = call i32 @function_fde4(i32 %v3_b9d8, i32 %v0_b9dc)
  store i32 %v2_b9e0, i32* @r4, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_b9ec = call i32 @function_f2d0(i32 11)
  store i32 %v1_b9ec, i32* %r0.global-to-local, align 4
  %v0_b9f0 = load i32, i32* @r4, align 4
  %v1_b9f0 = load i32, i32* @sl, align 4
  %v9_b9f0 = icmp eq i32 %v0_b9f0, %v1_b9f0
  store i1 %v9_b9f0, i1* %cpsr_z.global-to-local, align 1
  %v5_b9f4 = icmp slt i32 %v0_b9f0, %v1_b9f0
  br i1 %v5_b9f4, label %dec_label_pc_bab0, label %dec_label_pc_b9f8

dec_label_pc_b9f8:                                ; preds = %dec_label_pc_b894
  %v2_b9fc = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_b9fc, i32* %sb.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_b9fc, i32* %r1.global-to-local, align 4
  store i32 %v0_b9f0, i32* %r0.global-to-local, align 4
  %v1_ba0c = call i32 @function_ff70(i32 %v0_b9f0)
  store i32 %v1_ba0c, i32* @r6, align 4
  %v0_ba14 = load i32, i32* @r4, align 4
  store i32 %v0_ba14, i32* %r0.global-to-local, align 4
  %v1_ba18 = call i32 @function_101d8(i32 %v0_ba14)
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_ba20 = call i32 @function_f370(i32 12)
  %v0_ba24 = load i32, i32* @sl, align 4
  store i32 %v0_ba24, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v2_ba2c = inttoptr i32 %v0_ba24 to i32*
  %v3_ba2c = call i32 @function_f2ac(i32 12, i32* %v2_ba2c)
  %v0_ba30 = load i32, i32* @r6, align 4
  store i32 %v0_ba30, i32* @r1, align 4
  store i32 %v3_ba2c, i32* %r2.global-to-local, align 4
  store i32 %v2_b9fc, i32* %r0.global-to-local, align 4
  %v3_ba3c = bitcast i32* %stack_var_-2124 to i8*
  %v4_ba3c = call i32 @function_fb1c(i8* %v3_ba3c, i32 %v0_ba30, i32 %v3_ba2c)
  store i32 %v4_ba3c, i32* @r8, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_ba48 = call i32 @function_f2d0(i32 12)
  store i32 %v1_ba48, i32* %r0.global-to-local, align 4
  %v0_ba4c = load i32, i32* @r8, align 4
  %v7_ba4c = icmp eq i32 %v0_ba4c, -1
  store i1 %v7_ba4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba4c, label %dec_label_pc_bab0, label %dec_label_pc_ba54

dec_label_pc_ba54:                                ; preds = %dec_label_pc_b9f8
  %v0_ba54 = load i32, i32* @r6, align 4
  %v9_ba54 = icmp eq i32 %v0_ba54, %v0_ba4c
  store i1 %v9_ba54, i1* %cpsr_z.global-to-local, align 1
  %v7_ba58 = icmp sgt i32 %v0_ba54, %v0_ba4c
  br i1 %v7_ba58, label %dec_label_pc_ba5c, label %dec_label_pc_bab0

dec_label_pc_ba5c:                                ; preds = %dec_label_pc_ba54
  %v0_ba5c = load i32, i32* @sl, align 4
  store i32 %v0_ba5c, i32* %r1.global-to-local, align 4
  %v0_ba60 = load i32, i32* %sb.global-to-local, align 4
  %v2_ba60 = add i32 %v0_ba60, %v0_ba4c
  store i32 %v2_ba60, i32* %ip.global-to-local, align 4
  %v1_ba70 = add i32 %v0_ba54, -1
  br label %dec_label_pc_ba68

dec_label_pc_ba68:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_ba5c
  %v0_baa4 = phi i32 [ %v1_baa4, %dec_label_pc_baa4 ], [ %v0_ba4c, %dec_label_pc_ba5c ]
  %v0_ba8c = phi i32 [ %v0_ba8c27, %dec_label_pc_baa4 ], [ %v0_ba5c, %dec_label_pc_ba5c ]
  %v0_ba6c = phi i32 [ %v0_ba6c23, %dec_label_pc_baa4 ], [ %v0_ba5c, %dec_label_pc_ba5c ]
  %v0_ba74 = phi i32 [ %v1_ba74, %dec_label_pc_baa4 ], [ %v2_ba60, %dec_label_pc_ba5c ]
  %v1_ba68 = inttoptr i32 %v0_ba74 to i8*
  %v2_ba68 = load i8, i8* %v1_ba68, align 1
  %v3_ba68 = zext i8 %v2_ba68 to i32
  store i32 %v3_ba68, i32* %r0.global-to-local, align 4
  %v2_ba6c = icmp eq i32 %v0_ba6c, 0
  store i1 %v2_ba6c, i1* %cpsr_z.global-to-local, align 1
  %v1_ba74 = add i32 %v0_ba74, 1
  store i32 %v1_ba74, i32* %ip.global-to-local, align 4
  %v1_ba78 = add nsw i32 %v3_ba68, -48
  store i32 %v1_ba78, i32* @lr, align 4
  br i1 %v2_ba6c, label %dec_label_pc_ba80, label %dec_label_pc_ba90

dec_label_pc_ba80:                                ; preds = %dec_label_pc_ba68
  %v7_ba80 = icmp eq i8 %v2_ba68, 9
  store i1 %v7_ba80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba80, label %dec_label_pc_baa4, label %bb

bb:                                               ; preds = %dec_label_pc_ba80
  %v8_ba84 = icmp eq i8 %v2_ba68, 32
  store i1 %v8_ba84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ba84, label %dec_label_pc_baa4, label %dec_label_pc_ba8c

dec_label_pc_ba8c:                                ; preds = %bb
  %v1_ba8c = add i32 %v0_ba8c, 1
  store i32 %v1_ba8c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ba90

dec_label_pc_ba90:                                ; preds = %dec_label_pc_ba68, %dec_label_pc_ba8c
  %v0_ba8c28 = phi i32 [ %v0_ba8c, %dec_label_pc_ba68 ], [ %v1_ba8c, %dec_label_pc_ba8c ]
  %v0_ba6c24 = phi i32 [ %v0_ba6c, %dec_label_pc_ba68 ], [ %v1_ba8c, %dec_label_pc_ba8c ]
  %v7_ba90 = icmp eq i8 %v2_ba68, 46
  store i1 %v7_ba90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba90, label %dec_label_pc_ba9c, label %bb113

bb113:                                            ; preds = %dec_label_pc_ba90
  %v3_ba94 = icmp ugt i32 %v1_ba78, 8
  %v8_ba94 = icmp eq i32 %v1_ba78, 9
  store i1 %v8_ba94, i1* %cpsr_z.global-to-local, align 1
  %v2_ba98 = xor i1 %v8_ba94, true
  %v3_ba98 = and i1 %v3_ba94, %v2_ba98
  br i1 %v3_ba98, label %dec_label_pc_bf04, label %dec_label_pc_ba9c

dec_label_pc_ba9c:                                ; preds = %dec_label_pc_ba90, %bb113
  %v9_ba9c = icmp eq i32 %v1_ba70, %v0_baa4
  store i1 %v9_ba9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ba9c, label %dec_label_pc_bf04, label %dec_label_pc_baa4

dec_label_pc_baa4:                                ; preds = %dec_label_pc_ba80, %dec_label_pc_ba9c, %bb
  %v0_ba8c27 = phi i32 [ %v0_ba8c, %dec_label_pc_ba80 ], [ %v0_ba8c28, %dec_label_pc_ba9c ], [ %v0_ba8c, %bb ]
  %v0_ba6c23 = phi i32 [ 0, %dec_label_pc_ba80 ], [ %v0_ba6c24, %dec_label_pc_ba9c ], [ 0, %bb ]
  %v1_baa4 = add i32 %v0_baa4, 1
  %v9_baa8 = icmp eq i32 %v1_baa4, %v0_ba54
  store i1 %v9_baa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_baa8, label %dec_label_pc_bab0, label %dec_label_pc_ba68

dec_label_pc_bab0:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_ba54, %dec_label_pc_b9f8, %dec_label_pc_b894
  %v0_bab0 = call i32 @function_d3a8()
  %v1_bab4 = urem i32 %v0_bab0, 4
  store i32 %v1_bab4, i32* %r0.global-to-local, align 4
  %v2_bab8 = icmp eq i32 %v1_bab4, 3
  store i1 %v2_bab8, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_bab0 to i2
  switch i2 %trunc, label %dec_label_pc_bae48 [
    i2 0, label %dec_label_pc_bf50
    i2 1, label %dec_label_pc_bf64
    i2 -2, label %dec_label_pc_bf40
    i2 -1, label %dec_label_pc_bad4
  ]

dec_label_pc_bad4:                                ; preds = %dec_label_pc_bab0
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bae48:                               ; preds = %dec_label_pc_bab0
  unreachable

dec_label_pc_bae4:                                ; preds = %dec_label_pc_bf64, %dec_label_pc_bf50, %dec_label_pc_bf40, %dec_label_pc_bf04, %dec_label_pc_bad4
  %stack_var_-2184.0 = phi i32 [ 33686020, %dec_label_pc_bad4 ], [ 104859200, %dec_label_pc_bf40 ], [ 707416650, %dec_label_pc_bf64 ], [ 134744072, %dec_label_pc_bf50 ], [ %v1_bf34, %dec_label_pc_bf04 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bae8 = call i32 @function_fe58(i32* null)
  %v0_baec = load i32, i32* @r7, align 4
  %v2_baec = icmp eq i32 %v0_baec, 0
  store i1 %v2_baec, i1* %cpsr_z.global-to-local, align 1
  %v1_baf0 = load i32, i32* @fp, align 4
  %v2_baf0 = add i32 %v1_baf0, %v2_bae8
  store i32 %v2_baf0, i32* %r0.global-to-local, align 4
  br i1 %v2_baec, label %dec_label_pc_bedc, label %dec_label_pc_bafc

dec_label_pc_bafc:                                ; preds = %dec_label_pc_bae4
  store i32 %v0_baec, i32* %r0.global-to-local, align 4
  %v1_bb00 = inttoptr i32 %v0_baec to i8*
  %v2_bb00 = call i32 @function_f7cc(i8* %v1_bb00)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bb14 = call i32 @function_109c0(i32 2, i32 3, i32 17)
  store i32 %v3_bb14, i32* %r0.global-to-local, align 4
  %v7_bb18 = icmp eq i32 %v3_bb14, -1
  store i1 %v7_bb18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb18, label %dec_label_pc_bedc, label %dec_label_pc_bb24

dec_label_pc_bb24:                                ; preds = %dec_label_pc_bafc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bb2c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bb2c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bb40 = call i32 @function_1097c(i32 %v3_bb14, i32 0, i32 3, i32 %v6_bb2c, i32 4)
  store i32 %v5_bb40, i32* %r0.global-to-local, align 4
  %v7_bb44 = icmp eq i32 %v5_bb40, -1
  store i1 %v7_bb44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb44, label %dec_label_pc_bed4, label %dec_label_pc_bb4c

dec_label_pc_bb4c:                                ; preds = %dec_label_pc_bb24
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v3_bb60 = mul i32 %v7_b900, 65536
  store i32 %v3_bb60, i32* %r6.global-to-local, align 4
  %v3_bb68 = mul i32 %v6_b974, 65536
  store i32 %v3_bb68, i32* %sb.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_bb78 = urem i32 %v7_b900, 65536
  %v3_bb7c = urem i32 %v6_b95c, 65536
  store i32 %v3_bb7c, i32* %r0.global-to-local, align 4
  %v3_bb80 = urem i32 %v6_b974, 65536
  store i32 %v3_bb80, i32* %r1.global-to-local, align 4
  %v3_bb84 = urem i32 %v6_b990, 65536
  store i32 %v3_bb84, i32* %r2.global-to-local, align 4
  %v2_bb88 = icmp eq i32 %arg2, 0
  store i1 %v2_bb88, i1* %cpsr_z.global-to-local, align 1
  %v1_bb8c = urem i32 %v6_b9a8, 256
  store i32 %v1_bb8c, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bb88, label %dec_label_pc_beec.critedge, label %dec_label_pc_bba8

dec_label_pc_bba8:                                ; preds = %dec_label_pc_bb4c
  %v3_bb5c = mul i32 %v6_b990, 65536
  %v2_bbb4 = add i32 %v2_bb00, %v1_bb8c
  %v3_bbb8 = mul i32 %v2_bbb4, 65536
  %v1_bbc4 = add i32 %v3_bbb8, 1769472
  %tmp114 = mul nuw nsw i32 %v3_bb80, 256
  %v3_bbc8 = and i32 %tmp114, 65280
  %v1_bbcc = add i32 %v3_bbb8, 3080192
  %tmp115 = udiv i32 %v6_b974, 256
  %v4_bbdc = urem i32 %tmp115, 256
  %v5_bbdc = or i32 %v3_bbc8, %v4_bbdc
  store i32 %v5_bbdc, i32* @sb, align 4
  store i32 %v3_bb5c, i32* %ip.global-to-local, align 4
  %tmp116 = udiv i32 %v1_bbc4, 256
  %v3_bbe4 = and i32 %tmp116, 65280
  %tmp117 = udiv i32 %v1_bbcc, 256
  %v3_bbe8 = and i32 %tmp117, 65280
  store i32 %v3_bbe8, i32* %r2.global-to-local, align 4
  %tmp118 = mul i32 %v6_b990, 256
  %v3_bbec = and i32 %tmp118, 65280
  %v4_bbf0 = udiv i32 %v1_bbc4, 16777216
  %v5_bbf0 = or i32 %v3_bbe4, %v4_bbf0
  store i32 %v5_bbf0, i32* @fp, align 4
  %tmp119 = mul i32 %v7_b900, 256
  %v3_bbf8 = and i32 %tmp119, 65280
  store i32 %v3_bbf8, i32* %r1.global-to-local, align 4
  %v4_bbfc = udiv i32 %v1_bbcc, 16777216
  %v5_bbfc = or i32 %v3_bbe8, %v4_bbfc
  store i32 %v5_bbfc, i32* %r3.global-to-local, align 4
  %tmp120 = udiv i32 %v6_b990, 256
  %v4_bc00 = urem i32 %tmp120, 256
  %v5_bc00 = or i32 %v4_bc00, %v3_bbec
  store i32 %v5_bc00, i32* @r4, align 4
  store i32 %v2_bb00, i32* @lr, align 4
  %tmp121 = udiv i32 %v7_b900, 256
  %v4_bc08 = urem i32 %tmp121, 256
  %v5_bc08 = or i32 %v4_bc08, %v3_bbf8
  %tmp122 = mul i32 %v6_b95c, 256
  %v3_bc0c = and i32 %tmp122, 65280
  store i32 %v3_bc0c, i32* %r0.global-to-local, align 4
  %tmp123 = udiv i32 %v6_b95c, 256
  %v4_bc1c = urem i32 %tmp123, 256
  %v5_bc1c = or i32 %v4_bc1c, %v3_bc0c
  store i32 %v5_bc1c, i32* @r8, align 4
  store i32 0, i32* @r5, align 4
  %v1_bc24 = add i32 %v2_bb00, 1
  store i32 %v1_bc24, i32* @r6, align 4
  %v1_bc6c = trunc i32 %v6_b8dc to i8
  %sext = mul nuw i32 %v5_bbfc, 65536
  %v4_bc78 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_bc08, 65536
  %v4_bc7c = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_bc00, 65536
  %v4_bcd8 = sdiv i32 %sext7, 65536
  %v2_bcfc = icmp eq i32 %v2_bb00, 0
  %tmp124 = icmp slt i32 %v2_bb00, 1
  %v1_bc84 = trunc i32 %v5_b938 to i8
  br label %dec_label_pc_bc28

dec_label_pc_bc28:                                ; preds = %dec_label_pc_bd48, %dec_label_pc_bba8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_bc30 = call i32 @function_11528(i32 600, i32 1)
  store i32 %v2_bc30, i32* %r0.global-to-local, align 4
  store i32 %v2_b8c4, i32* %r1.global-to-local, align 4
  %v3_bc38 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc38, i32* %r3.global-to-local, align 4
  %v2_bc3c = load i32, i32* @r5, align 4
  %v5_bc3c = mul i32 %v2_bc3c, 4
  %v6_bc3c = add i32 %v5_bc3c, %v2_b8c4
  %v7_bc3c = inttoptr i32 %v6_bc3c to i32*
  store i32 %v2_bc30, i32* %v7_bc3c, align 4
  %v0_bc40 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc40 = load i32, i32* %r3.global-to-local, align 4
  %v4_bc40 = mul i32 %v1_bc40, 4
  %v5_bc40 = add i32 %v4_bc40, %v0_bc40
  %v6_bc40 = inttoptr i32 %v5_bc40 to i32*
  %v7_bc40 = load i32, i32* %v6_bc40, align 4
  store i32 %v7_bc40, i32* %r1.global-to-local, align 4
  %v1_bc44 = inttoptr i32 %v7_bc40 to i8*
  %v2_bc44 = load i8, i8* %v1_bc44, align 1
  %tmp = urem i8 %v2_bc44, 16
  %v1_bc48 = zext i8 %tmp to i32
  %v1_bc4c = or i32 %v1_bc48, 64
  store i32 %v1_bc4c, i32* %r2.global-to-local, align 4
  %v1_bc50 = trunc i32 %v1_bc4c to i8
  store i8 %v1_bc50, i8* %v1_bc44, align 1
  %v0_bc54 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc54 = inttoptr i32 %v0_bc54 to i8*
  %v2_bc54 = load i8, i8* %v1_bc54, align 1
  %v1_bc58 = and i8 %v2_bc54, -16
  %v1_bc5c = or i8 %v1_bc58, 5
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  store i8 %v1_bc5c, i8* %v1_bc54, align 1
  store i32 %v1_b8e8, i32* %lr.global-to-local, align 4
  %v2_bc6c = load i32, i32* %r1.global-to-local, align 4
  %v3_bc6c = add i32 %v2_bc6c, 1
  %v4_bc6c = inttoptr i32 %v3_bc6c to i8*
  store i8 %v1_bc6c, i8* %v4_bc6c, align 1
  store i32 %v5_b938, i32* %r3.global-to-local, align 4
  %v0_bc74 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc74 = icmp eq i32 %v0_bc74, 0
  store i1 %v2_bc74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_bc78, i32* %r0.global-to-local, align 4
  store i32 %v4_bc7c, i32* %r2.global-to-local, align 4
  br i1 %v2_bc74, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_bc28
  store i32 64, i32* %lr.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_bc28, %bb125
  %v2_bc84 = load i32, i32* %r1.global-to-local, align 4
  %v3_bc84 = add i32 %v2_bc84, 8
  %v4_bc84 = inttoptr i32 %v3_bc84 to i8*
  store i8 %v1_bc84, i8* %v4_bc84, align 1
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_bc8c = load i32, i32* %r1.global-to-local, align 4
  %v3_bc8c = add i32 %v2_bc8c, 9
  %v4_bc8c = inttoptr i32 %v3_bc8c to i8*
  store i8 17, i8* %v4_bc8c, align 1
  %v0_bc90 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc90, label %bb128, label %bb127

bb127:                                            ; preds = %bb126
  %v1_bc90 = load i32, i32* %lr.global-to-local, align 4
  %v2_bc90 = trunc i32 %v1_bc90 to i16
  %v3_bc90 = load i32, i32* %r1.global-to-local, align 4
  %v4_bc90 = add i32 %v3_bc90, 6
  %v5_bc90 = inttoptr i32 %v4_bc90 to i16*
  store i16 %v2_bc90, i16* %v5_bc90, align 2
  br label %bb128

bb128:                                            ; preds = %bb126, %bb127
  store i32 ptrtoint (i32* @global_var_1fbd0.42 to i32), i32* @lr, align 4
  %v0_bc98 = load i32, i32* %r0.global-to-local, align 4
  %v1_bc98 = trunc i32 %v0_bc98 to i16
  %v2_bc98 = load i32, i32* %r1.global-to-local, align 4
  %v3_bc98 = add i32 %v2_bc98, 2
  %v4_bc98 = inttoptr i32 %v3_bc98 to i16*
  store i16 %v1_bc98, i16* %v4_bc98, align 2
  %v0_bc9c = load i32, i32* %r2.global-to-local, align 4
  %v1_bc9c = trunc i32 %v0_bc9c to i16
  %v2_bc9c = load i32, i32* %r1.global-to-local, align 4
  %v3_bc9c = add i32 %v2_bc9c, 4
  %v4_bc9c = inttoptr i32 %v3_bc9c to i16*
  store i16 %v1_bc9c, i16* %v4_bc9c, align 2
  %v2_bca0 = load i32, i32* @global_var_1fbd0.42, align 4
  store i32 %v2_bca0, i32* %r3.global-to-local, align 4
  %v0_bca4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bca4 = add i32 %v0_bca4, 20
  store i32 %v1_bca4, i32* %r0.global-to-local, align 4
  %v1_bca8 = add i32 %v0_bca4, 41
  store i32 %v1_bca8, i32* %r2.global-to-local, align 4
  %v0_bcac = load i32, i32* @fp, align 4
  %v1_bcac = trunc i32 %v0_bcac to i16
  %v3_bcac = add i32 %v0_bca4, 24
  %v4_bcac = inttoptr i32 %v3_bcac to i16*
  store i16 %v1_bcac, i16* %v4_bcac, align 2
  %v0_bcb0 = load i32, i32* @sb, align 4
  %v1_bcb0 = trunc i32 %v0_bcb0 to i16
  %v2_bcb0 = load i32, i32* %r0.global-to-local, align 4
  %v3_bcb0 = add i32 %v2_bcb0, 2
  %v4_bcb0 = inttoptr i32 %v3_bcb0 to i16*
  store i16 %v1_bcb0, i16* %v4_bcb0, align 2
  %v0_bcb4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bcb4 = add i32 %v0_bcb4, 28
  store i32 %v1_bcb4, i32* %ip.global-to-local, align 4
  %v0_bcb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcb8 = load i32, i32* @sl, align 4
  %v2_bcb8 = add i32 %v1_bcb8, %v0_bcb8
  store i32 %v2_bcb8, i32* @r4, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_bcc4 = load i32, i32* @r8, align 4
  %v1_bcc4 = trunc i32 %v0_bcc4 to i16
  %v3_bcc4 = add i32 %v0_bcb4, 20
  %v4_bcc4 = inttoptr i32 %v3_bcc4 to i16*
  store i16 %v1_bcc4, i16* %v4_bcc4, align 2
  %v0_bcc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcc8 = load i32, i32* %r1.global-to-local, align 4
  %v2_bcc8 = add i32 %v1_bcc8, 12
  %v3_bcc8 = inttoptr i32 %v2_bcc8 to i32*
  store i32 %v0_bcc8, i32* %v3_bcc8, align 4
  %v0_bccc = load i32, i32* %r0.global-to-local, align 4
  %v1_bccc = trunc i32 %v0_bccc to i16
  %v2_bccc = load i32, i32* %ip.global-to-local, align 4
  %v3_bccc = add i32 %v2_bccc, 4
  %v4_bccc = inttoptr i32 %v3_bccc to i16*
  store i16 %v1_bccc, i16* %v4_bccc, align 2
  %v0_bcd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcd0 = trunc i32 %v0_bcd0 to i16
  %v2_bcd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bcd0 = add i32 %v2_bcd0, 2
  %v4_bcd0 = inttoptr i32 %v3_bcd0 to i16*
  store i16 %v1_bcd0, i16* %v4_bcd0, align 2
  store i32 %stack_var_-2184.0, i32* %r3.global-to-local, align 4
  store i32 %v4_bcd8, i32* %ip.global-to-local, align 4
  %v1_bcdc = load i32, i32* %r1.global-to-local, align 4
  %v2_bcdc = add i32 %v1_bcdc, 16
  %v3_bcdc = inttoptr i32 %v2_bcdc to i32*
  store i32 %stack_var_-2184.0, i32* %v3_bcdc, align 4
  %v0_bce0 = load i32, i32* %ip.global-to-local, align 4
  %v1_bce0 = trunc i32 %v0_bce0 to i16
  %v2_bce0 = load i32, i32* %r1.global-to-local, align 4
  %v3_bce0 = add i32 %v2_bce0, 28
  %v4_bce0 = inttoptr i32 %v3_bce0 to i16*
  store i16 %v1_bce0, i16* %v4_bce0, align 2
  %v0_bce4 = load i32, i32* @sl, align 4
  %v1_bce4 = trunc i32 %v0_bce4 to i8
  %v2_bce4 = load i32, i32* %r1.global-to-local, align 4
  %v3_bce4 = add i32 %v2_bce4, 40
  %v4_bce4 = inttoptr i32 %v3_bce4 to i8*
  store i8 %v1_bce4, i8* %v4_bce4, align 1
  %v0_bce8 = load i32, i32* @r4, align 4
  %v1_bce8 = add i32 %v0_bce8, 1
  store i32 %v1_bce8, i32* %r0.global-to-local, align 4
  %v0_bcec = load i32, i32* @r7, align 4
  store i32 %v0_bcec, i32* %r1.global-to-local, align 4
  %v0_bcf0 = load i32, i32* @r6, align 4
  store i32 %v0_bcf0, i32* %r2.global-to-local, align 4
  %v3_bcf4 = call i32 @function_f83c(i32 %v1_bce8, i32 %v0_bcec, i32 %v0_bcf0)
  store i32 %v3_bcf4, i32* %r0.global-to-local, align 4
  store i32 %v2_bb00, i32* %lr.global-to-local, align 4
  store i1 %v2_bcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp124, label %.dec_label_pc_bd48_crit_edge, label %dec_label_pc_bd0c

.dec_label_pc_bd48_crit_edge:                     ; preds = %bb128
  %v5_bd00 = load i32, i32* @r4, align 4
  store i32 %v5_bd00, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bd48

dec_label_pc_bd0c:                                ; preds = %bb128
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_bd10 = load i32, i32* @r4, align 4
  store i32 %v0_bd10, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bd18

dec_label_pc_bd18:                                ; preds = %.thread19, %dec_label_pc_bd0c
  %v1_bd20 = phi i32 [ %v1_bd2035, %.thread19 ], [ 0, %dec_label_pc_bd0c ]
  %v0_bd3417 = phi i32 [ %v0_bd40, %.thread19 ], [ 0, %dec_label_pc_bd0c ]
  %v1_bd18 = load i32, i32* @r7, align 4
  %v2_bd18 = add i32 %v1_bd18, %v0_bd3417
  %v3_bd18 = inttoptr i32 %v2_bd18 to i8*
  %v4_bd18 = load i8, i8* %v3_bd18, align 1
  %v6_bd18 = zext i8 %v4_bd18 to i32
  store i32 %v6_bd18, i32* %r3.global-to-local, align 4
  %v7_bd1c = icmp eq i8 %v4_bd18, 46
  store i1 %v7_bd1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bd1c, label %bb129, label %bb131

bb129:                                            ; preds = %dec_label_pc_bd18
  %v2_bd20 = trunc i32 %v1_bd20 to i8
  %v3_bd20 = load i32, i32* %r0.global-to-local, align 4
  %v4_bd20 = inttoptr i32 %v3_bd20 to i8*
  store i8 %v2_bd20, i8* %v4_bd20, align 1
  %v0_bd28.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_bd24 = load i32, i32* %ip.global-to-local, align 4
  %v1_bd24 = add i32 %v0_bd24, 1
  store i32 %v1_bd24, i32* %r2.global-to-local, align 4
  br i1 %v0_bd28.pr, label %bb132, label %bb130

bb130:                                            ; preds = %bb129
  %v2_bd2815 = urem i32 %v1_bd24, 256
  store i32 %v2_bd2815, i32* %ip.global-to-local, align 4
  store i32 %v2_bb00, i32* %r2.global-to-local, align 4
  %v0_bd34.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_bd34 = add i32 %v0_bd34.pre, 1
  store i32 %v1_bd34, i32* %r1.global-to-local, align 4
  br label %.thread19

bb131:                                            ; preds = %dec_label_pc_bd18
  %v1_bd2411 = add nsw i32 %v1_bd20, 1
  %v2_bd28 = urem i32 %v1_bd2411, 256
  store i32 %v2_bd28, i32* %ip.global-to-local, align 4
  store i32 %v2_bb00, i32* %r2.global-to-local, align 4
  %v1_bd3418 = add i32 %v0_bd3417, 1
  store i32 %v1_bd3418, i32* %r1.global-to-local, align 4
  br label %.thread19

bb132:                                            ; preds = %bb129
  store i32 %v2_bb00, i32* %r2.global-to-local, align 4
  %v1_bd30.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_bd30 = load i32, i32* @r4, align 4
  %v3_bd30 = add i32 %v2_bd30, %v1_bd30.pre
  store i32 %v3_bd30, i32* %r3.global-to-local, align 4
  %v1_bd3465 = add i32 %v1_bd30.pre, 1
  store i32 %v1_bd3465, i32* %r1.global-to-local, align 4
  %v2_bd38 = add i32 %v3_bd30, 1
  store i32 %v2_bd38, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %.thread19

.thread19:                                        ; preds = %bb131, %bb130, %bb132
  %v0_bd40 = phi i32 [ %v1_bd34, %bb130 ], [ %v1_bd3418, %bb131 ], [ %v1_bd3465, %bb132 ]
  %v1_bd2035 = phi i32 [ %v2_bd2815, %bb130 ], [ %v2_bd28, %bb131 ], [ 0, %bb132 ]
  %v9_bd40 = icmp eq i32 %v0_bd40, %v2_bb00
  store i1 %v9_bd40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd40, label %dec_label_pc_bd48.loopexit, label %dec_label_pc_bd18

dec_label_pc_bd48.loopexit:                       ; preds = %.thread19
  %v2_bd48.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_bd2035 to i8
  br label %dec_label_pc_bd48

dec_label_pc_bd48:                                ; preds = %.dec_label_pc_bd48_crit_edge, %dec_label_pc_bd48.loopexit
  %v0_bd48.pre.sink.off0 = phi i8 [ 0, %.dec_label_pc_bd48_crit_edge ], [ %extract.t71, %dec_label_pc_bd48.loopexit ]
  %v2_bd48 = phi i32 [ %v5_bd00, %.dec_label_pc_bd48_crit_edge ], [ %v2_bd48.pre, %dec_label_pc_bd48.loopexit ]
  %v3_bd48 = inttoptr i32 %v2_bd48 to i8*
  store i8 %v0_bd48.pre.sink.off0, i8* %v3_bd48, align 1
  %v3_bd4c = load i32, i32* %stack_var_-44, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_bd54 = add i32 %v3_bd4c, 1
  store i32 %v1_bd54, i32* @r5, align 4
  store i32 %v2_bb00, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_bd60 = load i32, i32* @r4, align 4
  %v2_bd60 = add i32 %v0_bd60, %v2_bb00
  store i32 %v2_bd60, i32* %r2.global-to-local, align 4
  %v9_bd64 = icmp eq i32 %v1_bd54, %arg2
  store i1 %v9_bd64, i1* %cpsr_z.global-to-local, align 1
  %v3_bd68 = add i32 %v2_bd60, 4
  %v4_bd68 = inttoptr i32 %v3_bd68 to i16*
  store i16 256, i16* %v4_bd68, align 2
  %v0_bd6c = load i32, i32* @lr, align 4
  %v1_bd6c = trunc i32 %v0_bd6c to i16
  %v2_bd6c = load i32, i32* %r2.global-to-local, align 4
  %v3_bd6c = add i32 %v2_bd6c, 2
  %v4_bd6c = inttoptr i32 %v3_bd6c to i16*
  store i16 %v1_bd6c, i16* %v4_bd6c, align 2
  %v0_bd70 = load i32, i32* @r5, align 4
  store i32 %v0_bd70, i32* %stack_var_-44, align 4
  %v8_bd74 = icmp slt i32 %v1_bd54, %arg2
  br i1 %v8_bd74, label %dec_label_pc_bc28, label %dec_label_pc_bd78

dec_label_pc_bd78:                                ; preds = %dec_label_pc_bd48, %dec_label_pc_beec
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 %v2_bb88, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bb88, label %dec_label_pc_beec, label %dec_label_pc_bd8c

dec_label_pc_bd8c:                                ; preds = %dec_label_pc_bd78
  store i32 %v2_bb00, i32* %r1.global-to-local, align 4
  %v1_bd90 = load i32, i32* @sl, align 4
  %v2_bd90 = add i32 %v1_bd90, %v2_bb00
  store i32 %v2_bd90, i32* %r3.global-to-local, align 4
  %v1_bd94 = add i32 %v2_bd90, 47
  store i32 %v1_bd94, i32* @fp, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_bd9c = add i32 %v2_bd90, 27
  store i32 %v1_bd9c, i32* @sb, align 4
  %v3_be78 = icmp eq i32 %v3_bb78, 65535
  %v3_bda8 = icmp eq i32 %v3_bb7c, 65535
  br label %dec_label_pc_be64

dec_label_pc_bda4:                                ; preds = %dec_label_pc_be64
  store i32 %v3_bb7c, i32* @ip, align 4
  store i1 %v3_bda8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bda8, label %dec_label_pc_bea0, label %dec_label_pc_bdb0

dec_label_pc_bdb0:                                ; preds = %dec_label_pc_be8c.dec_label_pc_bdb0_crit_edge, %dec_label_pc_bda4
  %v1_bdb4 = phi i32 [ %v1_bdb4.pre, %dec_label_pc_be8c.dec_label_pc_bdb0_crit_edge ], [ 65535, %dec_label_pc_bda4 ]
  store i32 %v3_bb80, i32* @lr, align 4
  %v9_bdb4 = icmp eq i32 %v3_bb80, %v1_bdb4
  store i1 %v9_bdb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bdb4, label %dec_label_pc_beb4, label %dec_label_pc_bdbc

dec_label_pc_bdbc:                                ; preds = %dec_label_pc_bea0.dec_label_pc_bdbc_crit_edge, %dec_label_pc_bdb0
  %v1_bdc0 = phi i32 [ %v1_bdc0.pre, %dec_label_pc_bea0.dec_label_pc_bdbc_crit_edge ], [ %v1_bdb4, %dec_label_pc_bdb0 ]
  store i32 %v3_bb84, i32* %r0.global-to-local, align 4
  %v9_bdc0 = icmp eq i32 %v3_bb84, %v1_bdc0
  store i1 %v9_bdc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bdc0, label %dec_label_pc_bec8, label %dec_label_pc_bdc8

dec_label_pc_bdc8:                                ; preds = %dec_label_pc_beb4, %dec_label_pc_bdbc, %dec_label_pc_bec8
  %v0_bdc8 = load i32, i32* @r7, align 4
  store i32 %v0_bdc8, i32* %r0.global-to-local, align 4
  %v0_bdcc = load i32, i32* @sl, align 4
  store i32 %v0_bdcc, i32* %r1.global-to-local, align 4
  %v2_bdd0 = call i32 @function_d46c(i32 %v0_bdc8, i32 %v0_bdcc)
  %v0_bdd4 = load i32, i32* @r8, align 4
  %v1_bdd4 = trunc i32 %v0_bdd4 to i8
  %v2_bdd4 = load i32, i32* @r7, align 4
  %v3_bdd4 = load i32, i32* @sl, align 4
  %v4_bdd4 = add i32 %v3_bdd4, %v2_bdd4
  %v5_bdd4 = inttoptr i32 %v4_bdd4 to i8*
  store i8 %v1_bdd4, i8* %v5_bdd4, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bddc = load i32, i32* @r8, align 4
  %v1_bddc = trunc i32 %v0_bddc to i16
  %v2_bddc = load i32, i32* @r4, align 4
  %v3_bddc = add i32 %v2_bddc, 10
  %v4_bddc = inttoptr i32 %v3_bddc to i16*
  store i16 %v1_bddc, i16* %v4_bddc, align 2
  %v0_bde0 = load i32, i32* @r4, align 4
  store i32 %v0_bde0, i32* @r0, align 4
  %v2_bde4 = call i32 @function_bf78(i32 %v0_bde0, i32 20)
  %v3_bde4 = trunc i32 %v2_bde4 to i16
  store i32 %v2_bde4, i32* %r0.global-to-local, align 4
  %v3_bde8 = load i32, i32* @r4, align 4
  %v4_bde8 = add i32 %v3_bde8, 10
  %v5_bde8 = inttoptr i32 %v4_bde8 to i16*
  store i16 %v3_bde4, i16* %v5_bde8, align 2
  %v0_bdec = load i32, i32* @r6, align 4
  store i32 %v0_bdec, i32* @r1, align 4
  %v1_bdf0 = add i32 %v0_bdec, 4
  %v2_bdf0 = inttoptr i32 %v1_bdf0 to i16*
  %v3_bdf0 = load i16, i16* %v2_bdf0, align 2
  %v4_bdf0 = zext i16 %v3_bdf0 to i32
  store i32 %v4_bdf0, i32* %r2.global-to-local, align 4
  %v0_bdf4 = load i32, i32* @r8, align 4
  %v1_bdf4 = trunc i32 %v0_bdf4 to i16
  %v3_bdf4 = add i32 %v0_bdec, 6
  %v4_bdf4 = inttoptr i32 %v3_bdf4 to i16*
  store i16 %v1_bdf4, i16* %v4_bdf4, align 2
  %v0_bdf8 = load i32, i32* @sb, align 4
  store i32 %v0_bdf8, i32* %r3.global-to-local, align 4
  %v0_bdfc = load i32, i32* @r4, align 4
  store i32 %v0_bdfc, i32* %r0.global-to-local, align 4
  %v4_be00 = call i32 @function_bfc8(i32 %v0_bdfc, i32 %v0_bdec, i32 %v4_bdf0, i32 %v0_bdf8)
  %v5_be00 = trunc i32 %v4_be00 to i16
  store i32 %v4_be00, i32* %r0.global-to-local, align 4
  %v3_be04 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_be04, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  %v3_be0c = mul i32 %v3_be04, 32
  store i32 %v3_be0c, i32* %ip.global-to-local, align 4
  %v3_be10 = load i32, i32* @r6, align 4
  %v4_be10 = add i32 %v3_be10, 6
  %v5_be10 = inttoptr i32 %v4_be10 to i16*
  store i16 %v5_be00, i16* %v5_be10, align 2
  store i32 %stack_var_-2184.0, i32* %r2.global-to-local, align 4
  %v0_be18 = load i32, i32* @r6, align 4
  %v1_be18 = add i32 %v0_be18, 2
  %v2_be18 = inttoptr i32 %v1_be18 to i16*
  %v3_be18 = load i16, i16* %v2_be18, align 2
  %v4_be18 = zext i16 %v3_be18 to i32
  store i32 %v4_be18, i32* %r6.global-to-local, align 4
  %v0_be1c = load i32, i32* %ip.global-to-local, align 4
  %v1_be1c = load i32, i32* %r3.global-to-local, align 4
  %tmp135 = mul i32 %v1_be1c, -8
  %v5_be1c = add i32 %v0_be1c, %tmp135
  %v1_be20 = load i32, i32* %r1.global-to-local, align 4
  %v2_be20 = add i32 %v1_be20, %v5_be1c
  store i32 %v2_be20, i32* %ip.global-to-local, align 4
  %v2_be24 = add i32 %v2_be20, 4
  %v3_be24 = inttoptr i32 %v2_be24 to i32*
  store i32 %stack_var_-2184.0, i32* %v3_be24, align 4
  %v0_be28 = load i32, i32* %r6.global-to-local, align 4
  %v1_be28 = trunc i32 %v0_be28 to i16
  %v2_be28 = load i32, i32* %ip.global-to-local, align 4
  %v3_be28 = add i32 %v2_be28, 2
  %v4_be28 = inttoptr i32 %v3_be28 to i16*
  store i16 %v1_be28, i16* %v4_be28, align 2
  %v0_be2c = load i32, i32* @r4, align 4
  store i32 %v0_be2c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_bb14, i32* %r0.global-to-local, align 4
  %v0_be38 = load i32, i32* @fp, align 4
  store i32 %v0_be38, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_be40 = load i32, i32* %ip.global-to-local, align 4
  %v6_be48 = call i32 @function_1093c(i32 %v3_bb14, i32 %v0_be2c, i32 %v0_be38, i32 16384, i32 %v0_be40, i32 16)
  %v3_be4c = load i32, i32* %stack_var_-44, align 4
  %v1_be50 = add i32 %v3_be4c, 1
  store i32 %v1_be50, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_be58 = icmp eq i32 %v1_be50, %arg2
  store i1 %v9_be58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_be50, i32* %stack_var_-44, align 4
  %v7_be60 = icmp slt i32 %v1_be50, %arg2
  br i1 %v7_be60, label %dec_label_pc_be64, label %dec_label_pc_beec

dec_label_pc_be64:                                ; preds = %dec_label_pc_bdc8, %dec_label_pc_bd8c
  %v1_be70 = phi i32 [ %v1_be50, %dec_label_pc_bdc8 ], [ 0, %dec_label_pc_bd8c ]
  store i32 %v2_b8c4, i32* %r2.global-to-local, align 4
  store i32 %v3_bb78, i32* @r3, align 4
  %v4_be70 = mul i32 %v1_be70, 4
  %v5_be70 = add i32 %v4_be70, %v2_b8c4
  %v6_be70 = inttoptr i32 %v5_be70 to i32*
  %v7_be70 = load i32, i32* %v6_be70, align 4
  store i32 %v7_be70, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_be78, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* @r8, align 4
  %v1_be80 = add i32 %v7_be70, 20
  store i32 %v1_be80, i32* @r6, align 4
  %v1_be84 = add i32 %v7_be70, 41
  store i32 %v1_be84, i32* @r7, align 4
  br i1 %v3_be78, label %dec_label_pc_be8c, label %dec_label_pc_bda4

dec_label_pc_be8c:                                ; preds = %dec_label_pc_be64
  %v0_be8c = call i32 @function_d3a8()
  %v1_be8c = trunc i32 %v0_be8c to i16
  store i32 %v0_be8c, i32* %r0.global-to-local, align 4
  store i32 %v3_bb7c, i32* @ip, align 4
  %v1_be94 = load i32, i32* @r5, align 4
  %v9_be94 = icmp eq i32 %v3_bb7c, %v1_be94
  store i1 %v9_be94, i1* %cpsr_z.global-to-local, align 1
  %v3_be98 = load i32, i32* @r4, align 4
  %v4_be98 = add i32 %v3_be98, 4
  %v5_be98 = inttoptr i32 %v4_be98 to i16*
  store i16 %v1_be8c, i16* %v5_be98, align 2
  br i1 %v9_be94, label %dec_label_pc_bea0, label %dec_label_pc_be8c.dec_label_pc_bdb0_crit_edge

dec_label_pc_be8c.dec_label_pc_bdb0_crit_edge:    ; preds = %dec_label_pc_be8c
  %v1_bdb4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bdb0

dec_label_pc_bea0:                                ; preds = %dec_label_pc_be8c, %dec_label_pc_bda4
  %v0_bea0 = call i32 @function_d3a8()
  %v1_bea0 = trunc i32 %v0_bea0 to i16
  store i32 %v0_bea0, i32* %r0.global-to-local, align 4
  store i32 %v3_bb80, i32* @lr, align 4
  %v1_bea8 = load i32, i32* @r5, align 4
  %v9_bea8 = icmp eq i32 %v3_bb80, %v1_bea8
  store i1 %v9_bea8, i1* %cpsr_z.global-to-local, align 1
  %v3_beac = load i32, i32* @r4, align 4
  %v4_beac = add i32 %v3_beac, 20
  %v5_beac = inttoptr i32 %v4_beac to i16*
  store i16 %v1_bea0, i16* %v5_beac, align 2
  br i1 %v9_bea8, label %dec_label_pc_beb4, label %dec_label_pc_bea0.dec_label_pc_bdbc_crit_edge

dec_label_pc_bea0.dec_label_pc_bdbc_crit_edge:    ; preds = %dec_label_pc_bea0
  %v1_bdc0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bdbc

dec_label_pc_beb4:                                ; preds = %dec_label_pc_bea0, %dec_label_pc_bdb0
  %v0_beb4 = call i32 @function_d3a8()
  %v1_beb4 = trunc i32 %v0_beb4 to i16
  %v3_beb8 = load i32, i32* @r6, align 4
  %v4_beb8 = add i32 %v3_beb8, 2
  %v5_beb8 = inttoptr i32 %v4_beb8 to i16*
  store i16 %v1_beb4, i16* %v5_beb8, align 2
  store i32 %v3_bb84, i32* %r0.global-to-local, align 4
  %v1_bec0 = load i32, i32* @r5, align 4
  %v9_bec0 = icmp eq i32 %v3_bb84, %v1_bec0
  store i1 %v9_bec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bec0, label %dec_label_pc_bec8, label %dec_label_pc_bdc8

dec_label_pc_bec8:                                ; preds = %dec_label_pc_beb4, %dec_label_pc_bdbc
  %v0_bec8 = call i32 @function_d3a8()
  %v1_bec8 = trunc i32 %v0_bec8 to i16
  store i32 %v0_bec8, i32* %r0.global-to-local, align 4
  %v3_becc = load i32, i32* @r4, align 4
  %v4_becc = add i32 %v3_becc, 28
  %v5_becc = inttoptr i32 %v4_becc to i16*
  store i16 %v1_bec8, i16* %v5_becc, align 2
  br label %dec_label_pc_bdc8

dec_label_pc_bed4:                                ; preds = %dec_label_pc_bb24
  store i32 %v3_bb14, i32* %r0.global-to-local, align 4
  %v1_bed8 = call i32 @function_101d8(i32 %v3_bb14)
  store i32 %v1_bed8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bedc

dec_label_pc_bedc:                                ; preds = %dec_label_pc_beec, %dec_label_pc_bafc, %dec_label_pc_bae4, %dec_label_pc_bed4
  %v1_bee8 = phi i32 [ %v3_bb14, %dec_label_pc_bafc ], [ %v2_baf0, %dec_label_pc_bae4 ], [ %v1_bed8, %dec_label_pc_bed4 ], [ %v2_bef0, %dec_label_pc_beec ]
  store i32 %v9_b894, i32* %r6.global-to-local, align 4
  store i32 %v18_b894, i32* %sb.global-to-local, align 4
  store i32 %v27_b894, i32* %lr.global-to-local, align 4
  ret i32 %v1_bee8

dec_label_pc_beec.critedge:                       ; preds = %dec_label_pc_bb4c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br label %dec_label_pc_beec

dec_label_pc_beec:                                ; preds = %dec_label_pc_bdc8, %dec_label_pc_beec.critedge, %dec_label_pc_bd78
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bef0 = call i32 @function_fe58(i32* null)
  store i32 %v2_bef0, i32* %r0.global-to-local, align 4
  %v9_bef8 = icmp eq i32 %v2_baf0, %v2_bef0
  store i1 %v9_bef8, i1* %cpsr_z.global-to-local, align 1
  %v6_befc = icmp slt i32 %v2_baf0, %v2_bef0
  br i1 %v6_befc, label %dec_label_pc_bedc, label %dec_label_pc_bd78

dec_label_pc_bf04:                                ; preds = %dec_label_pc_ba9c, %bb113
  %v0_baa4.lcssa = phi i32 [ %v1_ba70, %dec_label_pc_ba9c ], [ %v0_baa4, %bb113 ]
  %v2_bf08 = sub i32 %v0_baa4.lcssa, %v0_ba4c
  store i32 %v2_bf08, i32* @r4, align 4
  %v2_bf0c = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_ba60, i32* %r1.global-to-local, align 4
  store i32 %v2_bf0c, i32* %r0.global-to-local, align 4
  store i32 %v2_bf08, i32* %r2.global-to-local, align 4
  %v3_bf1c = call i32 @function_f83c(i32 %v2_bf0c, i32 %v2_ba60, i32 %v2_bf08)
  %v2_bf20 = ptrtoint i32* %stack_var_-40 to i32
  %v1_bf24 = load i32, i32* @r4, align 4
  %v2_bf24 = add i32 %v1_bf24, %v2_bf20
  store i32 %v2_bf24, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_bf0c, i32* @r0, align 4
  %v3_bf30 = add i32 %v2_bf24, -36
  %v4_bf30 = inttoptr i32 %v3_bf30 to i8*
  store i8 0, i8* %v4_bf30, align 1
  %v1_bf34 = call i32 @function_10710(i32 %v2_bf0c)
  store i32 %v1_bf34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bf40:                                ; preds = %dec_label_pc_bab0
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bf50:                                ; preds = %dec_label_pc_bab0
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bf64:                                ; preds = %dec_label_pc_bab0
  store i32 707416650, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bae4

; uselistorder directives
  uselistorder i32 %v1_bf34, { 1, 0 }
  uselistorder i32 %v2_bf0c, { 0, 1, 3, 2 }
  uselistorder i32 %v2_bf08, { 1, 0, 2 }
  uselistorder i32 %v2_bef0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_bec8, { 1, 0 }
  uselistorder i32 %v0_bea0, { 1, 0 }
  uselistorder i32 %v0_be8c, { 1, 0 }
  uselistorder i32 %v7_be70, { 1, 0, 2 }
  uselistorder i32 %v1_be50, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_be00, { 1, 0 }
  uselistorder i32 %v0_bdec, { 1, 0, 2, 3 }
  uselistorder i32 %v2_bde4, { 1, 0 }
  uselistorder i1 %v3_bda8, { 1, 0 }
  uselistorder i1 %v3_be78, { 1, 0 }
  uselistorder i32 %v1_bd30.pre, { 1, 0 }
  uselistorder i32 %v2_bd28, { 1, 0 }
  uselistorder i32 %v2_bd2815, { 1, 0 }
  uselistorder i32 %v0_bd3417, { 1, 0 }
  uselistorder i32 %v1_bd20, { 1, 0 }
  uselistorder i32 %v3_bc0c, { 1, 0 }
  uselistorder i32 %v3_bbf8, { 1, 0 }
  uselistorder i32 %v3_bbb8, { 1, 0 }
  uselistorder i32 %v1_bb8c, { 1, 0 }
  uselistorder i32 %v3_bb80, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_bb7c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_bb44, { 1, 0 }
  uselistorder i1 %v7_bb18, { 1, 0 }
  uselistorder i32 %v3_bb14, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_bb00, { 0, 13, 1, 8, 3, 6, 7, 5, 9, 11, 10, 4, 12, 2 }
  uselistorder i32 %v2_baf0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_baec, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2184.0, { 0, 3, 2, 1 }
  uselistorder i32 %v1_bab4, { 1, 0 }
  uselistorder i32 %v0_bab0, { 1, 0 }
  uselistorder i32 %v1_baa4, { 1, 0 }
  uselistorder i1 %v7_ba90, { 1, 0 }
  uselistorder i32 %v1_ba8c, { 1, 0, 2 }
  uselistorder i1 %v8_ba84, { 1, 0 }
  uselistorder i1 %v7_ba80, { 1, 0 }
  uselistorder i32 %v1_ba74, { 1, 0 }
  uselistorder i8 %v2_ba68, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ba6c, { 1, 0 }
  uselistorder i32 %v0_ba8c, { 1, 2, 3, 0 }
  uselistorder i32 %v2_ba60, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ba5c, { 1, 0, 2 }
  uselistorder i32 %v0_ba54, { 1, 0, 2, 3 }
  uselistorder i1 %v7_ba4c, { 1, 0 }
  uselistorder i32 %v0_ba4c, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_b9f0, { 1, 0, 2, 3 }
  uselistorder i32 %v6_b990, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v6_b974, { 0, 2, 1, 3 }
  uselistorder i32 %v6_b95c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b944, { 1, 2, 0 }
  uselistorder i32 %v5_b938, { 0, 2, 1 }
  uselistorder i32 %v7_b900, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_b8e8, { 2, 1, 0 }
  uselistorder i32 %v6_b8dc, { 1, 0 }
  uselistorder i32 %v2_b8c4, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 38, 9, 6, 7, 8, 10, 11, 12, 2, 13, 1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 3, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 2, 12, 1, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 47, 46, 48, 50, 49, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 67, 7, 5, 8, 6, 9, 11, 10, 12, 14, 13, 15, 17, 16, 18, 19, 21, 20, 22, 23, 24, 32, 25, 26, 27, 28, 29, 30, 31, 36, 33, 34, 35, 37, 39, 38, 41, 40, 42, 43, 44, 46, 45, 47, 48, 50, 49, 51, 53, 52, 55, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 32, 1, 2, 3, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 (i32)* @function_10710, { 1, 0 }
  uselistorder i32 41, { 1, 2, 3, 0 }
  uselistorder i8 17, { 1, 2, 0 }
  uselistorder i8 -16, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @function_8258, { 0, 73, 74, 75, 76, 77, 78, 79, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 }
  uselistorder i32 %arg2, { 3, 4, 6, 7, 0, 1, 5, 2, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_beec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bedc, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_bdc8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bd78, { 1, 0 }
  uselistorder label %dec_label_pc_bd48, { 1, 0 }
  uselistorder label %.thread19, { 2, 0, 1 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %dec_label_pc_baa4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ba9c, { 1, 0 }
  uselistorder label %dec_label_pc_ba90, { 1, 0 }
}

define i32 @function_bf78(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_bf78:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_bf9c, label %dec_label_pc_bf84

dec_label_pc_bf84:                                ; preds = %dec_label_pc_bf78
  %v0_bf8c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bf88

dec_label_pc_bf88:                                ; preds = %dec_label_pc_bf88, %dec_label_pc_bf84
  %v0_bf94 = phi i32 [ %v2_bf94, %dec_label_pc_bf88 ], [ 0, %dec_label_pc_bf84 ]
  %v0_bf8c = phi i32 [ %v5_bf8c, %dec_label_pc_bf88 ], [ %v0_bf8c.pre, %dec_label_pc_bf84 ]
  %v0_bf88 = phi i32 [ %v1_bf88, %dec_label_pc_bf88 ], [ %arg1, %dec_label_pc_bf84 ]
  %v1_bf88 = add i32 %v0_bf88, -2
  %v1_bf8c = inttoptr i32 %v0_bf8c to i16*
  %v2_bf8c = load i16, i16* %v1_bf8c, align 2
  %v3_bf8c = zext i16 %v2_bf8c to i32
  %v5_bf8c = add i32 %v0_bf8c, -2
  store i32 %v5_bf8c, i32* @r0, align 4
  %v2_bf94 = add i32 %v3_bf8c, %v0_bf94
  %v1_bf88.cmp = icmp ugt i32 %v1_bf88, 1
  br i1 %v1_bf88.cmp, label %dec_label_pc_bf88, label %dec_label_pc_bf9c.loopexit

dec_label_pc_bf9c.loopexit:                       ; preds = %dec_label_pc_bf88
  br label %dec_label_pc_bf9c

dec_label_pc_bf9c:                                ; preds = %dec_label_pc_bf78, %dec_label_pc_bf9c.loopexit
  %v1_bfa4 = phi i32 [ %v2_bf94, %dec_label_pc_bf9c.loopexit ], [ 0, %dec_label_pc_bf78 ]
  %v0_bf9c = phi i32 [ %v1_bf88, %dec_label_pc_bf9c.loopexit ], [ %arg1, %dec_label_pc_bf78 ]
  %v7_bf9c = icmp eq i32 %v0_bf9c, 1
  br i1 %v7_bf9c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_bf9c
  %v1_bfa0 = load i32, i32* @r0, align 4
  %v2_bfa0 = inttoptr i32 %v1_bfa0 to i8*
  %v3_bfa0 = load i8, i8* %v2_bfa0, align 1
  %v4_bfa0 = zext i8 %v3_bfa0 to i32
  %v3_bfa4 = add i32 %v1_bfa4, %v4_bfa0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bf9c, %bb
  %v0_bfa8 = phi i32 [ %v1_bfa4, %dec_label_pc_bf9c ], [ %v3_bfa4, %bb ]
  %v3_bfac = urem i32 %v0_bfa8, 65536
  %v4_bfb0 = udiv i32 %v0_bfa8, 65536
  %v5_bfb0 = add nuw nsw i32 %v4_bfb0, %v3_bfac
  %v4_bfb4 = udiv i32 %v5_bfb0, 65536
  %v5_bfb4 = add nuw nsw i32 %v4_bfb4, %v5_bfb0
  %v1_bfb8 = urem i32 %v5_bfb4, 65536
  %v3_bfc0 = xor i32 %v1_bfb8, 65535
  ret i32 %v3_bfc0

; uselistorder directives
  uselistorder i32 %v5_bfb0, { 1, 0 }
  uselistorder i32 %v5_bf8c, { 1, 0 }
  uselistorder i32 %v1_bf88, { 1, 0, 2 }
  uselistorder i32 %v0_bf8c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_bf9c, { 1, 0 }
}

define i32 @function_bfc8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bfc8:
  %v1_bfd8 = add i32 %arg1, 12
  %v2_bfd8 = inttoptr i32 %v1_bfd8 to i32*
  %v3_bfd8 = load i32, i32* %v2_bfd8, align 4
  %v1_bfdc = add i32 %arg1, 16
  %v2_bfdc = inttoptr i32 %v1_bfdc to i32*
  %v3_bfdc = load i32, i32* %v2_bfdc, align 4
  %v7_bfe0 = icmp sgt i32 %arg3, 1
  br i1 %v7_bfe0, label %dec_label_pc_bfec.preheader, label %dec_label_pc_c000

dec_label_pc_bfec.preheader:                      ; preds = %dec_label_pc_bfc8
  %v0_bff0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_bfec

dec_label_pc_bfec:                                ; preds = %dec_label_pc_bfec.preheader, %dec_label_pc_bfec
  %v0_bff8 = phi i32 [ 0, %dec_label_pc_bfec.preheader ], [ %v2_bff8, %dec_label_pc_bfec ]
  %v0_bff0 = phi i32 [ %v0_bff0.pre, %dec_label_pc_bfec.preheader ], [ %v5_bff0, %dec_label_pc_bfec ]
  %v0_bfec = phi i32 [ %arg3, %dec_label_pc_bfec.preheader ], [ %v1_bfec, %dec_label_pc_bfec ]
  %v1_bfec = add nsw i32 %v0_bfec, -2
  %v1_bff0 = inttoptr i32 %v0_bff0 to i16*
  %v2_bff0 = load i16, i16* %v1_bff0, align 2
  %v3_bff0 = zext i16 %v2_bff0 to i32
  %v5_bff0 = add i32 %v0_bff0, -2
  store i32 %v5_bff0, i32* @r1, align 4
  %v2_bff8 = add i32 %v3_bff0, %v0_bff8
  %v8_bffc = icmp sgt i32 %v1_bfec, 1
  br i1 %v8_bffc, label %dec_label_pc_bfec, label %dec_label_pc_c000.loopexit

dec_label_pc_c000.loopexit:                       ; preds = %dec_label_pc_bfec
  br label %dec_label_pc_c000

dec_label_pc_c000:                                ; preds = %dec_label_pc_c000.loopexit, %dec_label_pc_bfc8
  %v1_c00c = phi i32 [ %v2_bff8, %dec_label_pc_c000.loopexit ], [ 0, %dec_label_pc_bfc8 ]
  %v0_c000 = phi i32 [ %v1_bfec, %dec_label_pc_c000.loopexit ], [ %arg3, %dec_label_pc_bfc8 ]
  %v7_c000 = icmp eq i32 %v0_c000, 1
  br i1 %v7_c000, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c000
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c000
  %v1_c004 = load i32, i32* @r1, align 4
  %v2_c004 = inttoptr i32 %v1_c004 to i8*
  %v3_c004 = load i8, i8* %v2_c004, align 1
  %v4_c004 = zext i8 %v3_c004 to i32
  %v3_c00c = add i32 %v4_c004, %v1_c00c
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c034 = phi i32 [ %v1_c00c, %.thread ], [ %v3_c00c, %bb ]
  %v0_c014 = mul i32 %v3_bfd8, 65536
  %v3_c014 = udiv i32 %v0_c014, 65536
  %v3_c018 = urem i32 %v3_bfdc, 65536
  %v4_c020 = udiv i32 %v3_bfd8, 65536
  %v2_c01c = add nuw nsw i32 %v3_c018, %v4_c020
  %v5_c020 = add nuw nsw i32 %v2_c01c, %v3_c014
  %v1_c024 = add i32 %arg1, 9
  %v2_c024 = inttoptr i32 %v1_c024 to i8*
  %v3_c024 = load i8, i8* %v2_c024, align 1
  %v4_c024 = zext i8 %v3_c024 to i32
  %v4_c028 = udiv i32 %v3_bfdc, 65536
  %v3_c030 = mul nuw nsw i32 %v4_c024, 256
  %v5_c028 = add i32 %v4_c028, %arg2
  %v2_c02c = add i32 %v5_c028, %v1_c034
  %v2_c034 = add i32 %v2_c02c, %v5_c020
  %v2_c038 = add i32 %v2_c034, %v3_c030
  %tmp = icmp ult i32 %v2_c038, 65536
  br i1 %tmp, label %dec_label_pc_c058, label %dec_label_pc_c044

dec_label_pc_c044:                                ; preds = %bb19, %dec_label_pc_c044
  %v2_c04c5 = phi i32 [ %v2_c04c, %dec_label_pc_c044 ], [ %v2_c038, %bb19 ]
  %v3_c0506.in = phi i32 [ %v2_c04c, %dec_label_pc_c044 ], [ %v2_c038, %bb19 ]
  %v3_c0506 = udiv i32 %v3_c0506.in, 65536
  %v3_c048 = urem i32 %v2_c04c5, 65536
  %v2_c04c = add nuw nsw i32 %v3_c048, %v3_c0506
  %tmp20 = icmp ult i32 %v2_c04c, 65536
  br i1 %tmp20, label %dec_label_pc_c058.loopexit, label %dec_label_pc_c044

dec_label_pc_c058.loopexit:                       ; preds = %dec_label_pc_c044
  br label %dec_label_pc_c058

dec_label_pc_c058:                                ; preds = %dec_label_pc_c058.loopexit, %bb19
  %v0_c058 = phi i32 [ %v2_c04c, %dec_label_pc_c058.loopexit ], [ %v2_c038, %bb19 ]
  %v1_c058 = urem i32 %v0_c058, 65536
  %v3_c060 = xor i32 %v1_c058, 65535
  ret i32 %v3_c060

; uselistorder directives
  uselistorder i32 %v2_c04c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c038, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c00c, { 1, 0 }
  uselistorder i32 %v5_bff0, { 1, 0 }
  uselistorder i32 %v0_bff0, { 1, 0 }
  uselistorder i32 %v3_bfd8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c044, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_bfec, { 1, 0 }
}

define i32 @function_c06c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c06c:
  %v2_c078 = load i32, i32* @global_var_1db48.53, align 4
  %v2_c080 = call i32 @function_ffa4(i32 %v2_c078, i32 9)
  ret i32 %v2_c080
}

define i32 @function_c094(i32 %arg1) local_unnamed_addr {
dec_label_pc_c094:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c094 = load i32, i32* @r4, align 4
  %v6_c094 = load i32, i32* @r5, align 4
  %v9_c094 = load i32, i32* @r6, align 4
  %v12_c094 = load i32, i32* @r7, align 4
  %v15_c094 = load i32, i32* @r8, align 4
  %v18_c094 = load i32, i32* @sb, align 4
  %v21_c094 = load i32, i32* @sl, align 4
  %v24_c094 = load i32, i32* @fp, align 4
  %v27_c094 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c0b0 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c0b0, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 513, i32* @r2, align 4
  %v2_c0dc = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c0dc, i32* @fp, align 4
  %v3_c0e8 = call i32 @function_10650(i8* nonnull %stack_var_-585, i32 0)
  %v2_c0ec = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c0ec, i32* @sl, align 4
  %v0_c0f0 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c0fc = bitcast i32* %stack_var_-8777 to i8*
  %v3_c0fc = call i32 @function_10650(i8* %v2_c0fc, i32 %v0_c0f0)
  %v0_c104 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c110 = bitcast i32* %stack_var_-4681 to i8*
  %v3_c110 = call i32 @function_10650(i8* %v2_c110, i32 %v0_c104)
  %v2_c114 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c114, i32* @sb, align 4
  %v0_c118 = load i32, i32* %r4.global-to-local, align 4
  %v3_c118 = udiv i32 %v0_c118, 256
  %v1_c11c = urem i32 %v0_c118, 256
  store i32 %v1_c11c, i32* @r4, align 4
  %v3_c12c = trunc i32 %v3_c118 to i8
  %v4_c12c = call i32 @function_fbac(i8 %v3_c12c, i32 16, i32 %v2_c114)
  %v2_c134 = call i32 @function_f7cc(i8* nonnull %stack_var_-72)
  %v7_c138 = icmp eq i32 %v2_c134, 2
  br i1 %v7_c138, label %dec_label_pc_c5e4, label %dec_label_pc_c140

dec_label_pc_c140:                                ; preds = %dec_label_pc_c094, %dec_label_pc_c5e4
  %v1_c144 = call i32 @function_f370(i32 3)
  %v1_c14c = call i32 @function_f370(i32 4)
  %v1_c154 = call i32 @function_f370(i32 6)
  %v1_c15c = call i32 @function_f370(i32 8)
  %v0_c160 = load i32, i32* @r5, align 4
  %v2_c168 = inttoptr i32 %v0_c160 to i32*
  %v3_c168 = call i32 @function_f2ac(i32 8, i32* %v2_c168)
  %v0_c16c = load i32, i32* @r5, align 4
  %v2_c170 = call i32 @function_fde4(i32 %v3_c168, i32 %v0_c16c)
  %v7_c174 = icmp eq i32 %v2_c170, -1
  store i32 %v2_c170, i32* @r8, align 4
  br i1 %v7_c174, label %bb, label %dec_label_pc_c184.preheader

bb:                                               ; preds = %dec_label_pc_c140
  %v1_c17c = load i32, i32* @r5, align 4
  store i32 %v1_c17c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c5a4

dec_label_pc_c184.preheader:                      ; preds = %dec_label_pc_c140
  %v4_c19057 = call i32 @function_fa2c(i8* nonnull %stack_var_-585, i32 512, i32 %v2_c170)
  %v2_c19459 = icmp eq i32 %v4_c19057, 0
  br i1 %v2_c19459, label %dec_label_pc_c31c.loopexit, label %dec_label_pc_c19c.lr.ph

dec_label_pc_c19c.lr.ph:                          ; preds = %dec_label_pc_c184.preheader
  %v2_c1e4 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_c19c

dec_label_pc_c19c:                                ; preds = %dec_label_pc_c19c.lr.ph, %dec_label_pc_c184.backedge
  %v3_c1a0 = load i8, i8* %stack_var_-585, align 1
  %v4_c1a0 = sext i8 %v3_c1a0 to i32
  %v2_c1a4 = icmp eq i8 %v3_c1a0, 0
  br i1 %v2_c1a4, label %bb130, label %bb129

bb129:                                            ; preds = %dec_label_pc_c19c
  %v8_c1a8 = icmp eq i8 %v3_c1a0, 58
  br i1 %v8_c1a8, label %.thread8, label %dec_label_pc_c1bc

.thread8:                                         ; preds = %bb129
  br label %dec_label_pc_c1d4

bb130:                                            ; preds = %dec_label_pc_c19c
  br label %dec_label_pc_c1d4

dec_label_pc_c1bc:                                ; preds = %bb129
  %v1_c1c4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c1c0

dec_label_pc_c1c0:                                ; preds = %bb131, %dec_label_pc_c1bc
  %v0_c1c0 = phi i32 [ %v1_c1c0, %bb131 ], [ 0, %dec_label_pc_c1bc ]
  %v1_c1c0 = add i32 %v0_c1c0, 1
  %v2_c1c4 = add i32 %v1_c1c0, %v1_c1c4.pre
  %v3_c1c4 = inttoptr i32 %v2_c1c4 to i8*
  %v4_c1c4 = load i8, i8* %v3_c1c4, align 1
  %v6_c1c4 = zext i8 %v4_c1c4 to i32
  %v2_c1c8 = icmp eq i8 %v4_c1c4, 0
  br i1 %v2_c1c8, label %dec_label_pc_c1d4, label %bb131

bb131:                                            ; preds = %dec_label_pc_c1c0
  %v8_c1cc = icmp eq i8 %v4_c1c4, 58
  br i1 %v8_c1cc, label %dec_label_pc_c1d4, label %dec_label_pc_c1c0

dec_label_pc_c1d4:                                ; preds = %dec_label_pc_c1c0, %bb131, %bb130, %.thread8
  %v1_c200 = phi i32 [ 0, %.thread8 ], [ 0, %bb130 ], [ %v1_c1c0, %bb131 ], [ %v1_c1c0, %dec_label_pc_c1c0 ]
  %v0_c1d4 = phi i32 [ %v4_c1a0, %.thread8 ], [ %v4_c1a0, %bb130 ], [ %v6_c1c4, %bb131 ], [ %v6_c1c4, %dec_label_pc_c1c0 ]
  %v2_c1d4 = icmp eq i32 %v0_c1d4, 0
  br i1 %v2_c1d4, label %dec_label_pc_c184.backedge, label %dec_label_pc_c1dc

dec_label_pc_c184.backedge:                       ; preds = %dec_label_pc_c1d4, %dec_label_pc_c2a4, %dec_label_pc_c2f0, %dec_label_pc_c220
  %v0_c18c = load i32, i32* @r8, align 4
  %v4_c190 = call i32 @function_fa2c(i8* nonnull %stack_var_-585, i32 512, i32 %v0_c18c)
  %v2_c194 = icmp eq i32 %v4_c190, 0
  br i1 %v2_c194, label %dec_label_pc_c31c.loopexit, label %dec_label_pc_c19c

dec_label_pc_c1dc:                                ; preds = %dec_label_pc_c1d4
  %v1_c1e0 = add i32 %v1_c200, 2
  %v2_c1e8 = add i32 %v1_c1e0, %v2_c1e4
  %v1_c1ec = add i32 %v2_c1e8, -545
  %v2_c1ec = inttoptr i32 %v1_c1ec to i8*
  %v3_c1ec = load i8, i8* %v2_c1ec, align 1
  %v2_c1f0 = icmp eq i8 %v3_c1ec, 0
  br i1 %v2_c1f0, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_c1dc
  %v8_c1f4 = icmp eq i8 %v3_c1ec, 32
  br i1 %v8_c1f4, label %.thread13, label %dec_label_pc_c200

.thread13:                                        ; preds = %bb132
  store i32 %v1_c1e0, i32* @r5, align 4
  br label %dec_label_pc_c220

bb133:                                            ; preds = %dec_label_pc_c1dc
  store i32 %v1_c1e0, i32* @r5, align 4
  br label %dec_label_pc_c220

dec_label_pc_c200:                                ; preds = %bb132
  %v0_c200 = load i32, i32* @r6, align 4
  %v2_c200 = add i32 %v0_c200, %v1_c200
  br label %dec_label_pc_c208

dec_label_pc_c208:                                ; preds = %bb134, %dec_label_pc_c200
  %v0_c21416 = phi i32 [ %v1_c214, %bb134 ], [ %v1_c1e0, %dec_label_pc_c200 ]
  %v0_c21818 = phi i32 [ %v1_c218, %bb134 ], [ %v2_c200, %dec_label_pc_c200 ]
  %v1_c208 = add i32 %v0_c21818, 3
  %v2_c208 = inttoptr i32 %v1_c208 to i8*
  %v3_c208 = load i8, i8* %v2_c208, align 1
  %v2_c20c = icmp eq i8 %v3_c208, 0
  br i1 %v2_c20c, label %.thread15, label %bb134

.thread15:                                        ; preds = %dec_label_pc_c208
  %v1_c21417 = add i32 %v0_c21416, 1
  store i32 %v1_c21417, i32* @r5, align 4
  br label %dec_label_pc_c220

bb134:                                            ; preds = %dec_label_pc_c208
  %v8_c210 = icmp eq i8 %v3_c208, 32
  %v1_c214 = add i32 %v0_c21416, 1
  store i32 %v1_c214, i32* @r5, align 4
  %v1_c218 = add i32 %v0_c21818, 1
  br i1 %v8_c210, label %dec_label_pc_c220, label %dec_label_pc_c208

dec_label_pc_c220:                                ; preds = %bb134, %bb133, %.thread15, %.thread13
  %v1_c22c = phi i32 [ %v1_c21417, %.thread15 ], [ %v1_c1e0, %.thread13 ], [ %v1_c1e0, %bb133 ], [ %v1_c214, %bb134 ]
  %v0_c220 = load i32, i32* @r6, align 4
  %v2_c220 = add i32 %v0_c220, %v1_c1e0
  store i32 %v2_c220, i32* @r4, align 4
  %v2_c22c = add i32 %v1_c22c, %v2_c1e4
  store i32 0, i32* @r7, align 4
  %v3_c234 = add i32 %v2_c22c, -545
  %v4_c234 = inttoptr i32 %v3_c234 to i8*
  store i8 0, i8* %v4_c234, align 1
  %v0_c238 = load i32, i32* @r4, align 4
  %v1_c23c = inttoptr i32 %v0_c238 to i8*
  %v2_c23c = call i32 @function_f7cc(i8* %v1_c23c)
  store i32 %v2_c23c, i32* @r1, align 4
  %v0_c248 = load i32, i32* @r4, align 4
  %v3_c24c = inttoptr i32 %v0_c248 to i8*
  %v4_c24c = call i32 @function_fb1c(i8* %v3_c24c, i32 %v2_c23c, i32 %v2_c114)
  %v7_c250 = icmp eq i32 %v4_c24c, -1
  br i1 %v7_c250, label %dec_label_pc_c184.backedge, label %dec_label_pc_c26c.preheader

dec_label_pc_c26c.preheader:                      ; preds = %dec_label_pc_c220
  %v1_c254 = load i32, i32* @r7, align 4
  %v1_c258 = load i32, i32* @r6, align 4
  %v2_c258 = load i32, i32* @r5, align 4
  %v3_c258 = add i32 %v2_c258, %v1_c258
  store i32 %v1_c254, i32* @lr, align 4
  %v1_c26c49 = add i32 %v3_c258, 2
  %v2_c26c50 = inttoptr i32 %v1_c26c49 to i8*
  %v3_c26c51 = load i8, i8* %v2_c26c50, align 1
  %v2_c27053 = icmp eq i8 %v3_c26c51, 0
  %v1_c27455 = add i32 %v2_c258, 2
  br i1 %v2_c27053, label %dec_label_pc_c2a4, label %dec_label_pc_c27c

dec_label_pc_c27c:                                ; preds = %dec_label_pc_c26c.preheader, %dec_label_pc_c26c.backedge
  %v0_c2a484 = phi i32 [ %v0_c2a482, %dec_label_pc_c26c.backedge ], [ %v1_c254, %dec_label_pc_c26c.preheader ]
  %v0_c28c.pr = phi i32 [ %v0_c28c.pr71, %dec_label_pc_c26c.backedge ], [ %v1_c254, %dec_label_pc_c26c.preheader ]
  %v0_c5b8 = phi i32 [ %v0_c5b874, %dec_label_pc_c26c.backedge ], [ %v1_c254, %dec_label_pc_c26c.preheader ]
  %v0_c27479 = phi i32 [ %v1_c274, %dec_label_pc_c26c.backedge ], [ %v1_c27455, %dec_label_pc_c26c.preheader ]
  %v0_c29c = phi i32 [ %v0_c26c, %dec_label_pc_c26c.backedge ], [ %v3_c258, %dec_label_pc_c26c.preheader ]
  %v1_c280.in = phi i8 [ %v3_c26c, %dec_label_pc_c26c.backedge ], [ %v3_c26c51, %dec_label_pc_c26c.preheader ]
  %v7_c27c = icmp eq i8 %v1_c280.in, 9
  br i1 %v7_c27c, label %bb136, label %bb135

bb135:                                            ; preds = %dec_label_pc_c27c
  %v8_c280 = icmp eq i8 %v1_c280.in, 32
  br i1 %v8_c280, label %.thread27, label %dec_label_pc_c28c

.thread27:                                        ; preds = %bb135
  br label %dec_label_pc_c298

bb136:                                            ; preds = %dec_label_pc_c27c
  br label %dec_label_pc_c298

dec_label_pc_c28c:                                ; preds = %bb135
  %v7_c28c = icmp eq i32 %v0_c28c.pr, 1
  br i1 %v7_c28c, label %dec_label_pc_c5b8, label %dec_label_pc_c294

dec_label_pc_c294:                                ; preds = %dec_label_pc_c5b8, %dec_label_pc_c28c
  %v0_c29876 = phi i32 [ %v1_c5b8, %dec_label_pc_c5b8 ], [ %v0_c5b8, %dec_label_pc_c28c ]
  br label %dec_label_pc_c298

dec_label_pc_c298:                                ; preds = %bb136, %.thread27, %dec_label_pc_c294
  %v0_c298 = phi i32 [ %v0_c5b8, %.thread27 ], [ %v0_c5b8, %bb136 ], [ %v0_c29876, %dec_label_pc_c294 ]
  %v0_c28c.pr72 = phi i32 [ 1, %.thread27 ], [ 1, %bb136 ], [ 0, %dec_label_pc_c294 ]
  %v7_c2a0 = icmp sgt i32 %v0_c298, 6
  br i1 %v7_c2a0, label %dec_label_pc_c2a4, label %dec_label_pc_c26c.backedge

dec_label_pc_c2a4:                                ; preds = %dec_label_pc_c26c.backedge, %dec_label_pc_c298, %dec_label_pc_c26c.preheader
  %v1_c2f4 = phi i32 [ %v1_c27455, %dec_label_pc_c26c.preheader ], [ %v1_c274, %dec_label_pc_c26c.backedge ], [ %v0_c27479, %dec_label_pc_c298 ]
  %v0_c2a4 = phi i32 [ %v1_c254, %dec_label_pc_c26c.preheader ], [ %v0_c2a482, %dec_label_pc_c26c.backedge ], [ %v0_c2a484, %dec_label_pc_c298 ]
  %v2_c2a4 = icmp eq i32 %v0_c2a4, 0
  br i1 %v2_c2a4, label %dec_label_pc_c184.backedge, label %dec_label_pc_c2b0

dec_label_pc_c2b0:                                ; preds = %dec_label_pc_c2a4
  %v2_c2b8 = add i32 %v1_c2f4, %v2_c1e4
  %v1_c2bc = add i32 %v2_c2b8, -545
  %v2_c2bc = inttoptr i32 %v1_c2bc to i8*
  %v3_c2bc = load i8, i8* %v2_c2bc, align 1
  %v2_c2c0 = icmp eq i8 %v3_c2bc, 0
  br i1 %v2_c2c0, label %dec_label_pc_c2f0, label %bb137

bb137:                                            ; preds = %dec_label_pc_c2b0
  %v8_c2c4 = icmp eq i8 %v3_c2bc, 32
  br i1 %v8_c2c4, label %dec_label_pc_c2f0, label %dec_label_pc_c2cc

dec_label_pc_c2cc:                                ; preds = %bb137
  %v2_c2cc = add i32 %v1_c2f4, %v1_c258
  br label %dec_label_pc_c2d0

dec_label_pc_c2d0:                                ; preds = %bb138, %dec_label_pc_c2cc
  %v0_c2dc30 = phi i32 [ %v1_c2dc, %bb138 ], [ %v1_c2f4, %dec_label_pc_c2cc ]
  %v0_c2d0 = phi i32 [ %v1_c2d0, %bb138 ], [ %v2_c2cc, %dec_label_pc_c2cc ]
  %v1_c2d0 = add i32 %v0_c2d0, 1
  %v2_c2d0 = inttoptr i32 %v1_c2d0 to i8*
  %v3_c2d0 = load i8, i8* %v2_c2d0, align 1
  %v2_c2d4 = icmp eq i8 %v3_c2d0, 0
  br i1 %v2_c2d4, label %.thread29, label %bb138

.thread29:                                        ; preds = %dec_label_pc_c2d0
  %v1_c2dc31 = add i32 %v0_c2dc30, 1
  br label %dec_label_pc_c2e4

bb138:                                            ; preds = %dec_label_pc_c2d0
  %v8_c2d8 = icmp eq i8 %v3_c2d0, 32
  %v1_c2dc = add i32 %v0_c2dc30, 1
  br i1 %v8_c2d8, label %dec_label_pc_c2e4, label %dec_label_pc_c2d0

dec_label_pc_c2e4:                                ; preds = %bb138, %.thread29
  %v1_c2ec = phi i32 [ %v1_c2dc31, %.thread29 ], [ %v1_c2dc, %bb138 ]
  %v2_c2ec = add i32 %v1_c2ec, %v2_c1e4
  br label %dec_label_pc_c2f0

dec_label_pc_c2f0:                                ; preds = %dec_label_pc_c2b0, %bb137, %dec_label_pc_c2e4
  %v2_c2fc = phi i32 [ %v2_c2b8, %dec_label_pc_c2b0 ], [ %v2_c2b8, %bb137 ], [ %v2_c2ec, %dec_label_pc_c2e4 ]
  %v2_c2f4 = add i32 %v1_c2f4, %v1_c258
  store i32 %v2_c2f4, i32* @r4, align 4
  %v3_c2fc = add i32 %v2_c2fc, -545
  %v4_c2fc = inttoptr i32 %v3_c2fc to i8*
  store i8 0, i8* %v4_c2fc, align 1
  %v1_c300 = inttoptr i32 %v2_c2f4 to i8*
  %v2_c300 = call i32 @function_f7cc(i8* %v1_c300)
  %v8_c308 = icmp sgt i32 %v2_c300, 15
  br i1 %v8_c308, label %dec_label_pc_c184.backedge, label %dec_label_pc_c30c

dec_label_pc_c30c:                                ; preds = %dec_label_pc_c2f0
  %v0_c310 = load i32, i32* @r4, align 4
  %v2_c314 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_c314, i32* @r0, align 4
  %v2_c318 = bitcast i32* %stack_var_-56 to i8*
  %v3_c318 = call i32 @function_f7f4(i8* %v2_c318, i32 %v0_c310)
  br label %dec_label_pc_c31c

dec_label_pc_c31c.loopexit:                       ; preds = %dec_label_pc_c184.backedge, %dec_label_pc_c184.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre96 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_c31c

dec_label_pc_c31c:                                ; preds = %dec_label_pc_c31c.loopexit, %dec_label_pc_c30c
  %v1_c32c.pre-phi = phi i8* [ %.pre96, %dec_label_pc_c31c.loopexit ], [ %v2_c318, %dec_label_pc_c30c ]
  %v2_c328.pre-phi = phi i32 [ %.pre, %dec_label_pc_c31c.loopexit ], [ %v2_c314, %dec_label_pc_c30c ]
  %v0_c31c = load i32, i32* @r8, align 4
  %v1_c320 = call i32 @function_101d8(i32 %v0_c31c)
  %v2_c32c = call i32 @function_f7cc(i8* %v1_c32c.pre-phi)
  store i32 %v2_c32c, i32* @r4, align 4
  %v2_c330 = icmp eq i32 %v2_c32c, 0
  br i1 %v2_c330, label %dec_label_pc_c588, label %dec_label_pc_c33c

dec_label_pc_c33c:                                ; preds = %dec_label_pc_c31c
  %v3_c344 = call i32 @function_f2ac(i32 3, i32* null)
  %v1_c348 = call i32 @function_103d4(i32 %v3_c344)
  store i32 %v1_c348, i32* @sb, align 4
  %v2_c34c = icmp eq i32 %v1_c348, 0
  br i1 %v2_c34c, label %dec_label_pc_c57c, label %dec_label_pc_c35c.preheader

dec_label_pc_c35c.preheader:                      ; preds = %dec_label_pc_c33c
  store i32 0, i32* @r5, align 4
  %v1_c36044 = inttoptr i32 %v1_c348 to i32*
  %v2_c36045 = call i32 @function_10518(i32* %v1_c36044)
  %v2_c36447 = icmp eq i32 %v2_c36045, 0
  br i1 %v2_c36447, label %dec_label_pc_c570, label %dec_label_pc_c36c.preheader

dec_label_pc_c35c.loopexit:                       ; preds = %dec_label_pc_c374, %dec_label_pc_c384, %dec_label_pc_c3f0
  %v0_c35c = load i32, i32* @sb, align 4
  %v1_c360 = inttoptr i32 %v0_c35c to i32*
  %v2_c360 = call i32 @function_10518(i32* %v1_c360)
  %v2_c364 = icmp eq i32 %v2_c360, 0
  br i1 %v2_c364, label %dec_label_pc_c570, label %dec_label_pc_c36c.preheader

dec_label_pc_c36c.preheader:                      ; preds = %dec_label_pc_c35c.preheader, %dec_label_pc_c35c.loopexit
  %v0_c37492 = phi i32 [ %v2_c360, %dec_label_pc_c35c.loopexit ], [ %v2_c36045, %dec_label_pc_c35c.preheader ]
  br label %dec_label_pc_c36c

dec_label_pc_c36c:                                ; preds = %dec_label_pc_c36c.preheader, %dec_label_pc_c558
  %v0_c38c = phi i32 [ %v0_c37492, %dec_label_pc_c36c.preheader ], [ %v2_c564, %dec_label_pc_c558 ]
  %v0_c36c = load i32, i32* @r5, align 4
  %v2_c36c = icmp eq i32 %v0_c36c, 0
  br i1 %v2_c36c, label %dec_label_pc_c374, label %dec_label_pc_c570

dec_label_pc_c374:                                ; preds = %dec_label_pc_c36c
  %v1_c374 = add i32 %v0_c38c, 11
  %v2_c374 = inttoptr i32 %v1_c374 to i8*
  %v3_c374 = load i8, i8* %v2_c374, align 1
  %v4_c374 = zext i8 %v3_c374 to i32
  %v1_c378 = add nsw i32 %v4_c374, -48
  %tmp = icmp ugt i32 %v1_c378, 9
  br i1 %tmp, label %dec_label_pc_c35c.loopexit, label %dec_label_pc_c384

dec_label_pc_c384:                                ; preds = %dec_label_pc_c374
  store i32 %v1_c374, i32* @r7, align 4
  %v3_c390 = call i32 @function_f2ac(i32 3, i32* null)
  store i32 %v2_c0ec, i32* @r0, align 4
  %v3_c39c = call i32 @function_f7f4(i8* %v2_c110, i32 %v3_c390)
  %v2_c3a4 = call i32 @function_f7cc(i8* %v2_c110)
  %v0_c3a8 = load i32, i32* @r7, align 4
  %v1_c3ac = load i32, i32* @sl, align 4
  %v2_c3ac = add i32 %v1_c3ac, %v2_c3a4
  store i32 %v2_c3ac, i32* @r0, align 4
  %v2_c3b0 = inttoptr i32 %v2_c3ac to i8*
  %v3_c3b0 = call i32 @function_f7f4(i8* %v2_c3b0, i32 %v0_c3a8)
  %v2_c3b8 = call i32 @function_f7cc(i8* %v2_c110)
  %v0_c3bc = load i32, i32* @r5, align 4
  store i32 %v2_c3b8, i32* @r4, align 4
  %v2_c3c8 = inttoptr i32 %v0_c3bc to i32*
  %v3_c3c8 = call i32 @function_f2ac(i32 4, i32* %v2_c3c8)
  %v0_c3d0 = load i32, i32* @r4, align 4
  %v1_c3d0 = load i32, i32* @sl, align 4
  %v2_c3d0 = add i32 %v1_c3d0, %v0_c3d0
  store i32 %v2_c3d0, i32* @r0, align 4
  %v2_c3d4 = inttoptr i32 %v2_c3d0 to i8*
  %v3_c3d4 = call i32 @function_f7f4(i8* %v2_c3d4, i32 %v3_c3c8)
  %v3_c3e4 = call i32 @function_ff3c(i32 %v2_c0ec, i32 %v2_c0dc, i32 4096)
  %v7_c3e8 = icmp eq i32 %v3_c3e4, -1
  br i1 %v7_c3e8, label %dec_label_pc_c35c.loopexit, label %dec_label_pc_c3f0

dec_label_pc_c3f0:                                ; preds = %dec_label_pc_c384
  %v0_c3f0 = load i32, i32* @r5, align 4
  %v2_c3f8 = inttoptr i32 %v0_c3f0 to i32*
  %v3_c3f8 = call i32 @function_f2ac(i32 3, i32* %v2_c3f8)
  store i32 %v2_c0ec, i32* @r0, align 4
  %v3_c404 = call i32 @function_f7f4(i8* %v2_c110, i32 %v3_c3f8)
  %v2_c40c = call i32 @function_f7cc(i8* %v2_c110)
  %v0_c410 = load i32, i32* @r7, align 4
  %v1_c414 = load i32, i32* @sl, align 4
  %v2_c414 = add i32 %v1_c414, %v2_c40c
  store i32 %v2_c414, i32* @r0, align 4
  %v2_c418 = inttoptr i32 %v2_c414 to i8*
  %v3_c418 = call i32 @function_f7f4(i8* %v2_c418, i32 %v0_c410)
  %v2_c420 = call i32 @function_f7cc(i8* %v2_c110)
  %v0_c424 = load i32, i32* @r5, align 4
  store i32 %v2_c420, i32* @r4, align 4
  %v2_c430 = inttoptr i32 %v0_c424 to i32*
  %v3_c430 = call i32 @function_f2ac(i32 6, i32* %v2_c430)
  %v0_c438 = load i32, i32* @r4, align 4
  %v1_c438 = load i32, i32* @sl, align 4
  %v2_c438 = add i32 %v1_c438, %v0_c438
  store i32 %v2_c438, i32* @r0, align 4
  %v2_c43c = inttoptr i32 %v2_c438 to i8*
  %v3_c43c = call i32 @function_f7f4(i8* %v2_c43c, i32 %v3_c430)
  %v1_c444 = call i32 @function_103d4(i32 %v2_c0ec)
  store i32 %v1_c444, i32* @r8, align 4
  %v2_c448 = icmp eq i32 %v1_c444, 0
  br i1 %v2_c448, label %dec_label_pc_c35c.loopexit, label %dec_label_pc_c450.preheader

dec_label_pc_c450.preheader:                      ; preds = %dec_label_pc_c3f0
  %v1_c45439 = inttoptr i32 %v1_c444 to i32*
  %v2_c45440 = call i32 @function_10518(i32* %v1_c45439)
  store i32 %v2_c45440, i32* @r6, align 4
  %v2_c45842 = icmp eq i32 %v2_c45440, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c0dc, i32* @r0, align 4
  br i1 %v2_c45842, label %dec_label_pc_c558, label %dec_label_pc_c468thread-pre-split

dec_label_pc_c450.loopexit:                       ; preds = %dec_label_pc_c470, %dec_label_pc_c508
  %v0_c450 = load i32, i32* @r8, align 4
  %v1_c454 = inttoptr i32 %v0_c450 to i32*
  %v2_c454 = call i32 @function_10518(i32* %v1_c454)
  store i32 %v2_c454, i32* @r6, align 4
  %v2_c458 = icmp eq i32 %v2_c454, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c0dc, i32* @r0, align 4
  br i1 %v2_c458, label %dec_label_pc_c558, label %dec_label_pc_c468thread-pre-split

dec_label_pc_c468thread-pre-split:                ; preds = %dec_label_pc_c450.preheader, %dec_label_pc_c450.loopexit
  %v0_c468.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_c468

dec_label_pc_c468:                                ; preds = %dec_label_pc_c468thread-pre-split, %dec_label_pc_c530
  %v0_c468 = phi i32 [ %v0_c468.pr, %dec_label_pc_c468thread-pre-split ], [ 1, %dec_label_pc_c530 ]
  %v2_c468 = icmp eq i32 %v0_c468, 0
  br i1 %v2_c468, label %dec_label_pc_c470, label %dec_label_pc_c558

dec_label_pc_c470:                                ; preds = %dec_label_pc_c468
  %v0_c470 = call i32 @function_f860()
  %v0_c474 = load i32, i32* @r5, align 4
  %v2_c47c = inttoptr i32 %v0_c474 to i32*
  %v3_c47c = call i32 @function_f2ac(i32 3, i32* %v2_c47c)
  store i32 %v2_c0ec, i32* @r0, align 4
  %v3_c488 = call i32 @function_f7f4(i8* %v2_c110, i32 %v3_c47c)
  %v2_c490 = call i32 @function_f7cc(i8* %v2_c110)
  %v0_c494 = load i32, i32* @r7, align 4
  %v1_c498 = load i32, i32* @sl, align 4
  %v2_c498 = add i32 %v1_c498, %v2_c490
  store i32 %v2_c498, i32* @r0, align 4
  %v2_c49c = inttoptr i32 %v2_c498 to i8*
  %v3_c49c = call i32 @function_f7f4(i8* %v2_c49c, i32 %v0_c494)
  %v2_c4a4 = call i32 @function_f7cc(i8* %v2_c110)
  %v0_c4a8 = load i32, i32* @r5, align 4
  store i32 %v2_c4a4, i32* @r4, align 4
  %v2_c4b4 = inttoptr i32 %v0_c4a8 to i32*
  %v3_c4b4 = call i32 @function_f2ac(i32 6, i32* %v2_c4b4)
  %v0_c4bc = load i32, i32* @r4, align 4
  %v1_c4bc = load i32, i32* @sl, align 4
  %v2_c4bc = add i32 %v1_c4bc, %v0_c4bc
  store i32 %v2_c4bc, i32* @r0, align 4
  %v2_c4c0 = inttoptr i32 %v2_c4bc to i8*
  %v3_c4c0 = call i32 @function_f7f4(i8* %v2_c4c0, i32 %v3_c4b4)
  %v2_c4c8 = call i32 @function_f7cc(i8* %v2_c110)
  %v1_c4d0 = load i32, i32* @sl, align 4
  %v2_c4d0 = add i32 %v1_c4d0, %v2_c4c8
  store i32 %v2_c4d0, i32* @r0, align 4
  %v2_c4d4 = inttoptr i32 %v2_c4d0 to i8*
  %v3_c4d4 = call i32 @function_f7f4(i8* %v2_c4d4, i32 ptrtoint (i32* @global_var_1534c.55 to i32))
  %v2_c4dc = call i32 @function_f7cc(i8* %v2_c110)
  %v0_c4e0 = load i32, i32* @r6, align 4
  %v1_c4e0 = add i32 %v0_c4e0, 11
  %v1_c4e4 = load i32, i32* @sl, align 4
  %v2_c4e4 = add i32 %v1_c4e4, %v2_c4dc
  store i32 %v2_c4e4, i32* @r0, align 4
  %v2_c4e8 = inttoptr i32 %v2_c4e4 to i8*
  %v3_c4e8 = call i32 @function_f7f4(i8* %v2_c4e8, i32 %v1_c4e0)
  %v3_c4f8 = call i32 @function_ff3c(i32 %v2_c0ec, i32 %v2_c0dc, i32 4096)
  %v7_c4fc = icmp eq i32 %v3_c4f8, -1
  br i1 %v7_c4fc, label %dec_label_pc_c450.loopexit, label %dec_label_pc_c508

dec_label_pc_c508:                                ; preds = %dec_label_pc_c470
  %v2_c508 = call i32 @function_f7cc(i8* %v2_c0fc)
  store i32 %v2_c508, i32* @r1, align 4
  %v4_c51c = call i32 @function_fb1c(i8* %v2_c0fc, i32 %v2_c508, i32 %v2_c328.pre-phi)
  %v7_c520 = icmp eq i32 %v4_c51c, -1
  br i1 %v7_c520, label %dec_label_pc_c450.loopexit, label %dec_label_pc_c530

dec_label_pc_c530:                                ; preds = %dec_label_pc_c508
  %v0_c528 = load i32, i32* @r7, align 4
  %v2_c530 = inttoptr i32 %v0_c528 to i8*
  %v3_c530 = call i32 @function_f8f0(i8* %v2_c530, i32 10)
  %v2_c538 = call i32 @function_ffa4(i32 %v3_c530, i32 9)
  %v0_c53c = load i32, i32* @r8, align 4
  %v1_c540 = inttoptr i32 %v0_c53c to i32*
  %v2_c540 = call i32 @function_10518(i32* %v1_c540)
  store i32 %v2_c540, i32* @r6, align 4
  %v2_c544 = icmp eq i32 %v2_c540, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c0dc, i32* @r0, align 4
  br i1 %v2_c544, label %dec_label_pc_c558, label %dec_label_pc_c468

dec_label_pc_c558:                                ; preds = %dec_label_pc_c450.loopexit, %dec_label_pc_c530, %dec_label_pc_c468, %dec_label_pc_c450.preheader
  %v0_c558 = load i32, i32* @r8, align 4
  %v1_c55c = inttoptr i32 %v0_c558 to i32*
  %v2_c55c = call i32 @function_1020c(i32* %v1_c55c)
  %v0_c560 = load i32, i32* @sb, align 4
  %v1_c564 = inttoptr i32 %v0_c560 to i32*
  %v2_c564 = call i32 @function_10518(i32* %v1_c564)
  %v2_c568 = icmp eq i32 %v2_c564, 0
  br i1 %v2_c568, label %dec_label_pc_c570, label %dec_label_pc_c36c

dec_label_pc_c570:                                ; preds = %dec_label_pc_c35c.loopexit, %dec_label_pc_c558, %dec_label_pc_c36c, %dec_label_pc_c35c.preheader
  %v0_c570 = load i32, i32* @sb, align 4
  %v1_c574 = inttoptr i32 %v0_c570 to i32*
  %v2_c574 = call i32 @function_1020c(i32* %v1_c574)
  %v0_c578 = load i32, i32* @r5, align 4
  %v1_c578 = urem i32 %v0_c578, 256
  br label %dec_label_pc_c57c

dec_label_pc_c57c:                                ; preds = %dec_label_pc_c33c, %dec_label_pc_c570
  %storemerge = phi i32 [ %v1_c578, %dec_label_pc_c570 ], [ 0, %dec_label_pc_c33c ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_c580 = call i32 @function_120d0(i32 1)
  br label %dec_label_pc_c588

dec_label_pc_c588:                                ; preds = %dec_label_pc_c31c, %dec_label_pc_c57c
  %v1_c588 = call i32 @function_f2d0(i32 3)
  %v1_c590 = call i32 @function_f2d0(i32 4)
  %v1_c598 = call i32 @function_f2d0(i32 6)
  %v1_c5a0 = call i32 @function_f2d0(i32 8)
  %v0_c5a4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c5a4

dec_label_pc_c5a4:                                ; preds = %bb, %dec_label_pc_c588
  %v0_c5a4 = phi i32 [ %v1_c17c, %bb ], [ %v0_c5a4.pre, %dec_label_pc_c588 ]
  store i32 %v3_c094, i32* @r4, align 4
  store i32 %v6_c094, i32* @r5, align 4
  store i32 %v9_c094, i32* @r6, align 4
  store i32 %v12_c094, i32* @r7, align 4
  store i32 %v15_c094, i32* @r8, align 4
  store i32 %v18_c094, i32* @sb, align 4
  store i32 %v21_c094, i32* @sl, align 4
  store i32 %v24_c094, i32* @fp, align 4
  store i32 %v27_c094, i32* @lr, align 4
  ret i32 %v0_c5a4

dec_label_pc_c5b8:                                ; preds = %dec_label_pc_c28c
  %v1_c5b8 = add i32 %v0_c5b8, 1
  %v7_c5bc = icmp eq i32 %v0_c5b8, 0
  br i1 %v7_c5bc, label %dec_label_pc_c5c4, label %dec_label_pc_c294

dec_label_pc_c5c4:                                ; preds = %dec_label_pc_c5b8
  %v1_c5c4 = add i32 %v0_c29c, 3
  %v2_c5c4 = inttoptr i32 %v1_c5c4 to i8*
  %v3_c5c4 = load i8, i8* %v2_c5c4, align 1
  %v7_c5c8 = icmp eq i8 %v3_c5c4, 65
  br i1 %v7_c5c8, label %dec_label_pc_c5dc, label %dec_label_pc_c5d0

dec_label_pc_c5d0:                                ; preds = %dec_label_pc_c5c4, %dec_label_pc_c5dc
  %v0_c2a483 = phi i32 [ %v0_c2a484, %dec_label_pc_c5c4 ], [ 1, %dec_label_pc_c5dc ]
  br label %dec_label_pc_c26c.backedge

dec_label_pc_c26c.backedge:                       ; preds = %dec_label_pc_c5d0, %dec_label_pc_c298
  %v0_c2a482 = phi i32 [ %v0_c2a483, %dec_label_pc_c5d0 ], [ %v0_c2a484, %dec_label_pc_c298 ]
  %v0_c5b874 = phi i32 [ %v1_c5b8, %dec_label_pc_c5d0 ], [ %v0_c298, %dec_label_pc_c298 ]
  %v0_c28c.pr71 = phi i32 [ 0, %dec_label_pc_c5d0 ], [ %v0_c28c.pr72, %dec_label_pc_c298 ]
  %v0_c26c = add i32 %v0_c29c, 1
  %v1_c26c = add i32 %v0_c29c, 3
  %v2_c26c = inttoptr i32 %v1_c26c to i8*
  %v3_c26c = load i8, i8* %v2_c26c, align 1
  %v2_c270 = icmp eq i8 %v3_c26c, 0
  %v1_c274 = add i32 %v0_c27479, 1
  br i1 %v2_c270, label %dec_label_pc_c2a4, label %dec_label_pc_c27c

dec_label_pc_c5dc:                                ; preds = %dec_label_pc_c5c4
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_c5d0

dec_label_pc_c5e4:                                ; preds = %dec_label_pc_c094
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_c140

; uselistorder directives
  uselistorder i32 %v1_c274, { 1, 0 }
  uselistorder i8 %v3_c26c, { 1, 0 }
  uselistorder i32 %v0_c2a482, { 1, 0 }
  uselistorder i32 %v1_c5b8, { 1, 0 }
  uselistorder i32 %v2_c564, { 1, 0 }
  uselistorder i32 %v1_c2d0, { 1, 0 }
  uselistorder i32 %v0_c2dc30, { 1, 0 }
  uselistorder i32 %v1_c2f4, { 0, 3, 1, 2 }
  uselistorder i32 %v0_c298, { 1, 0 }
  uselistorder i32 %v0_c27479, { 1, 0 }
  uselistorder i32 %v0_c5b8, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_c2a484, { 1, 2, 0 }
  uselistorder i32 %v1_c27455, { 1, 0 }
  uselistorder i32 %v2_c258, { 1, 0 }
  uselistorder i32 %v1_c254, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_c214, { 0, 2, 1 }
  uselistorder i32 %v0_c21416, { 1, 0 }
  uselistorder i32 %v1_c1e0, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_c170, { 1, 2, 0 }
  uselistorder i32 %v0_c118, { 1, 0 }
  uselistorder i32 %v2_c114, { 1, 0, 2 }
  uselistorder i8* %v2_c0fc, { 1, 0, 2 }
  uselistorder i32 %v2_c0dc, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i32, i32, i32)* @function_ff3c, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_fa2c, { 1, 0 }
  uselistorder label %dec_label_pc_c5d0, { 1, 0 }
  uselistorder label %dec_label_pc_c5a4, { 1, 0 }
  uselistorder label %dec_label_pc_c588, { 1, 0 }
  uselistorder label %dec_label_pc_c57c, { 1, 0 }
  uselistorder label %dec_label_pc_c570, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_c558, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_c468, { 1, 0 }
  uselistorder label %dec_label_pc_c468thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_c450.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_c36c, { 1, 0 }
  uselistorder label %dec_label_pc_c36c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c35c.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c2f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c298, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c27c, { 1, 0 }
  uselistorder label %dec_label_pc_c220, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_c184.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c1d4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_c19c, { 1, 0 }
  uselistorder label %dec_label_pc_c140, { 1, 0 }
}

define i32 @function_c610(i32 %arg1) local_unnamed_addr {
dec_label_pc_c610:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %v3_c610 = load i32, i32* @r4, align 4
  %v6_c610 = load i32, i32* @r5, align 4
  %v9_c610 = load i32, i32* @r6, align 4
  %v12_c610 = load i32, i32* @r7, align 4
  %v15_c610 = load i32, i32* @r8, align 4
  %v18_c610 = load i32, i32* @sb, align 4
  %v21_c610 = load i32, i32* @sl, align 4
  %v24_c610 = load i32, i32* @fp, align 4
  %v2_c61c = call i32 @function_fe58(i32* null)
  store i32 %v2_c61c, i32* @r0, align 4
  store i32 %v2_c61c, i32* @r5, align 4
  %v0_c624 = call i32 @function_fec8()
  %v7_c628 = icmp eq i32 %v0_c624, -1
  %. = zext i1 %v7_c628 to i32
  %tmp69 = icmp slt i32 %v0_c624, 1
  %storemerge50 = select i1 %tmp69, i32 %., i32 1
  store i32 %storemerge50, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1db48.53 to i32), i32* %r3.global-to-local, align 4
  %v2_c644 = icmp eq i32 %storemerge50, 0
  store i32 %v0_c624, i32* @global_var_1db48.53, align 4
  br i1 %v2_c644, label %dec_label_pc_c65c, label %dec_label_pc_c650

dec_label_pc_c650:                                ; preds = %dec_label_pc_c6ac, %dec_label_pc_c610
  %v1_c658 = phi i32 [ %v0_c624, %dec_label_pc_c610 ], [ 0, %dec_label_pc_c6ac ]
  store i32 %v3_c610, i32* @r4, align 4
  store i32 %v6_c610, i32* @r5, align 4
  store i32 %v9_c610, i32* @r6, align 4
  store i32 %v12_c610, i32* @r7, align 4
  store i32 %v15_c610, i32* @r8, align 4
  store i32 %v18_c610, i32* @sb, align 4
  store i32 %v21_c610, i32* @sl, align 4
  store i32 %v24_c610, i32* @fp, align 4
  ret i32 %v1_c658

dec_label_pc_c65c:                                ; preds = %dec_label_pc_c610
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v1_c670 = call i32 @function_c094(i32 20736)
  %v2_c674 = icmp eq i32 %v1_c670, 0
  br i1 %v2_c674, label %dec_label_pc_c67c, label %dec_label_pc_c8d8

dec_label_pc_c67c:                                ; preds = %dec_label_pc_c65c, %dec_label_pc_c8d8, %dec_label_pc_c900
  %v1_c680 = call i32 @function_120d0(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_c688 = call i32 @function_10c08()
  %v1_c688 = inttoptr i32 %v0_c688 to i8*
  store i32 %v0_c688, i32* @global_var_1fbd4.58, align 4
  store i32 ptrtoint (i32* @global_var_1db4c.60 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i8 0, i8* %v1_c688, align 1
  %v0_c6a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6a0 = load i32, i32* %r3.global-to-local, align 4
  %v2_c6a0 = inttoptr i32 %v1_c6a0 to i32*
  store i32 %v0_c6a0, i32* %v2_c6a0, align 4
  %v0_c6a4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_c6a4, i32* @fp, align 4
  store i32 400, i32* @r6, align 4
  %v2_c7a0 = ptrtoint i32* %stack_var_-120 to i32
  %v2_c7ac = bitcast i32* %stack_var_-120 to i8*
  %v2_c80c = ptrtoint i32* %stack_var_-632 to i32
  br label %dec_label_pc_c6ac

dec_label_pc_c6ac:                                ; preds = %dec_label_pc_c76c, %dec_label_pc_c67c
  %v1_c6b0 = call i32 @function_f370(i32 3)
  %v3_c6bc = call i32 @function_f2ac(i32 3, i32* null)
  %v1_c6c0 = call i32 @function_103d4(i32 %v3_c6bc)
  store i32 %v1_c6c0, i32* @sl, align 4
  %v2_c6c4 = icmp eq i32 %v1_c6c0, 0
  br i1 %v2_c6c4, label %dec_label_pc_c650, label %dec_label_pc_c6cc

dec_label_pc_c6cc:                                ; preds = %dec_label_pc_c6ac
  %v1_c6d0 = call i32 @function_f2d0(i32 3)
  %v0_c6d431 = load i32, i32* @sl, align 4
  %v1_c6d832 = inttoptr i32 %v0_c6d431 to i32*
  %v2_c6d833 = call i32 @function_10518(i32* %v1_c6d832)
  %v2_c6dc35 = icmp eq i32 %v2_c6d833, 0
  br i1 %v2_c6dc35, label %dec_label_pc_c76c, label %dec_label_pc_c6e4.preheader

dec_label_pc_c6e4.preheader:                      ; preds = %dec_label_pc_c6cc, %dec_label_pc_c6d4.backedge
  %v0_c6e440 = phi i32 [ %v2_c6d8, %dec_label_pc_c6d4.backedge ], [ %v2_c6d833, %dec_label_pc_c6cc ]
  br label %dec_label_pc_c6e4

dec_label_pc_c6e4:                                ; preds = %dec_label_pc_c6e4.preheader, %dec_label_pc_c754
  %v0_c6f4 = phi i32 [ %v0_c6e440, %dec_label_pc_c6e4.preheader ], [ %v2_c760, %dec_label_pc_c754 ]
  %v1_c6e4 = add i32 %v0_c6f4, 11
  %v2_c6e4 = inttoptr i32 %v1_c6e4 to i8*
  %v3_c6e4 = load i8, i8* %v2_c6e4, align 1
  %v4_c6e4 = zext i8 %v3_c6e4 to i32
  %v1_c6e8 = add nsw i32 %v4_c6e4, -48
  store i32 %v1_c6e8, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_c6e8, 9
  br i1 %tmp, label %dec_label_pc_c6d4.backedge, label %dec_label_pc_c6f4

dec_label_pc_c6f4:                                ; preds = %dec_label_pc_c6e4
  store i32 %v1_c6e4, i32* @r4, align 4
  %v3_c700 = call i32 @function_f8f0(i8* %v2_c6e4, i32 10)
  %v0_c704 = load i32, i32* @r6, align 4
  store i32 %v3_c700, i32* @r8, align 4
  %v0_c70c = load i32, i32* @fp, align 4
  %v1_c70c = add i32 %v0_c70c, 1
  store i32 %v1_c70c, i32* @fp, align 4
  %v5_c710 = icmp slt i32 %v0_c704, %v3_c700
  %v2_c77c = call i32 @function_fe58(i32* null)
  br i1 %v5_c710, label %dec_label_pc_c778, label %dec_label_pc_c714

dec_label_pc_c714:                                ; preds = %dec_label_pc_c6f4
  %v0_c71c = load i32, i32* @r5, align 4
  %v2_c71c = sub i32 %v2_c77c, %v0_c71c
  %v7_c724 = icmp slt i32 %v2_c71c, 601
  br i1 %v7_c724, label %dec_label_pc_c72c, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_c714
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_c6d4.backedge

dec_label_pc_c72c:                                ; preds = %dec_label_pc_c714
  %v0_c72c = load i32, i32* @r8, align 4
  %v7_c730 = icmp slt i32 %v0_c72c, 401
  br i1 %v7_c730, label %dec_label_pc_c6d4.backedge, label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c72c
  %v2_c738 = load i32, i32* @fp, align 4
  %v3_c738 = zext i32 %v2_c738 to i64
  %v4_c738 = mul nuw i64 %v3_c738, 3435973837
  %v3_c73c1 = udiv i64 %v4_c738, 34359738368
  %v3_c7403 = mul nuw nsw i64 %v3_c73c1, 8
  %v3_c740 = trunc i64 %v3_c7403 to i32
  store i32 %v3_c740, i32* %r3.global-to-local, align 4
  %v2_c7445 = mul nuw nsw i64 %v3_c73c1, 2
  %v2_c744 = trunc i64 %v2_c7445 to i32
  %v2_c748 = add i32 %v3_c740, %v2_c744
  store i32 %v2_c748, i32* %r2.global-to-local, align 4
  %v9_c74c = icmp eq i32 %v2_c738, %v2_c748
  br i1 %v9_c74c, label %dec_label_pc_c754, label %dec_label_pc_c6d4.backedge

dec_label_pc_c754:                                ; preds = %dec_label_pc_c734
  %v1_c758 = call i32 @function_120d0(i32 1)
  %v0_c75c = load i32, i32* @sl, align 4
  %v1_c760 = inttoptr i32 %v0_c75c to i32*
  %v2_c760 = call i32 @function_10518(i32* %v1_c760)
  %v2_c764 = icmp eq i32 %v2_c760, 0
  br i1 %v2_c764, label %dec_label_pc_c76c, label %dec_label_pc_c6e4

dec_label_pc_c76c:                                ; preds = %dec_label_pc_c6d4.backedge, %dec_label_pc_c754, %dec_label_pc_c6cc
  %v0_c76c = load i32, i32* @sl, align 4
  %v1_c770 = inttoptr i32 %v0_c76c to i32*
  %v2_c770 = call i32 @function_1020c(i32* %v1_c770)
  br label %dec_label_pc_c6ac

dec_label_pc_c778:                                ; preds = %dec_label_pc_c6f4
  %v1_c788 = call i32 @function_f370(i32 3)
  %v1_c790 = call i32 @function_f370(i32 7)
  %v3_c79c = call i32 @function_f2ac(i32 3, i32* null)
  store i32 %v2_c7a0, i32* @sb, align 4
  store i32 %v2_c7a0, i32* @r0, align 4
  %v3_c7ac = call i32 @function_f7f4(i8* %v2_c7ac, i32 %v3_c79c)
  %v1_c7b0 = load i32, i32* @sb, align 4
  %v2_c7b0 = add i32 %v1_c7b0, %v3_c7ac
  store i32 %v2_c7b0, i32* @r5, align 4
  %v0_c7b4 = load i32, i32* @r4, align 4
  store i32 %v2_c7b0, i32* @r0, align 4
  %v2_c7bc = inttoptr i32 %v2_c7b0 to i8*
  %v3_c7bc = call i32 @function_f7f4(i8* %v2_c7bc, i32 %v0_c7b4)
  store i32 %v3_c7bc, i32* @r4, align 4
  %v3_c7cc = call i32 @function_f2ac(i32 7, i32* null)
  %v0_c7d4 = load i32, i32* @r4, align 4
  %v1_c7d4 = load i32, i32* @r5, align 4
  %v2_c7d4 = add i32 %v1_c7d4, %v0_c7d4
  store i32 %v2_c7d4, i32* @r0, align 4
  %v2_c7d8 = inttoptr i32 %v2_c7d4 to i8*
  %v3_c7d8 = call i32 @function_f7f4(i8* %v2_c7d8, i32 %v3_c7cc)
  %v1_c7e0 = call i32 @function_f2d0(i32 3)
  %v1_c7e8 = call i32 @function_f2d0(i32 7)
  %v2_c7f4 = call i32 @function_fde4(i32 %v2_c7a0, i32 0)
  %v7_c7f8 = icmp eq i32 %v2_c7f4, -1
  store i32 %v2_c7f4, i32* @r7, align 4
  br i1 %v7_c7f8, label %dec_label_pc_c8a4, label %dec_label_pc_c804

dec_label_pc_c804:                                ; preds = %dec_label_pc_c778
  %v1_c808 = call i32 @function_f370(i32 9)
  store i32 %v2_c80c, i32* @r6, align 4
  %v0_c81027 = load i32, i32* @r7, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v1_c81c28 = call i32 @function_ff70(i32 %v0_c81027)
  store i32 %v1_c81c28, i32* @r4, align 4
  %tmp72 = icmp slt i32 %v1_c81c28, 1
  br i1 %tmp72, label %dec_label_pc_c8c4, label %dec_label_pc_c828

dec_label_pc_c828:                                ; preds = %dec_label_pc_c804, %dec_label_pc_c810.backedge
  %v3_c830 = call i32 @function_f2ac(i32 9, i32* null)
  store i32 %v3_c830, i32* @r5, align 4
  %v3_c840 = call i32 @function_f2ac(i32 9, i32* null)
  %v1_c844 = inttoptr i32 %v3_c840 to i8*
  %v2_c844 = call i32 @function_f7cc(i8* %v1_c844)
  %v0_c848 = load i32, i32* @r4, align 4
  %v5_c84c = icmp slt i32 %v0_c848, %v2_c844
  br i1 %v5_c84c, label %dec_label_pc_c810.backedge, label %.thread12

dec_label_pc_c810.backedge:                       ; preds = %dec_label_pc_c874, %.thread12, %dec_label_pc_c828
  %v0_c810 = load i32, i32* @r7, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v1_c81c = call i32 @function_ff70(i32 %v0_c810)
  store i32 %v1_c81c, i32* @r4, align 4
  %tmp73 = icmp slt i32 %v1_c81c, 1
  br i1 %tmp73, label %dec_label_pc_c8c4, label %dec_label_pc_c828

.thread12:                                        ; preds = %dec_label_pc_c828
  %v1_c85819 = add i32 %v0_c848, -1
  store i32 %v1_c85819, i32* @r4, align 4
  %v2_c85820 = icmp eq i32 %v0_c848, 0
  br i1 %v2_c85820, label %dec_label_pc_c810.backedge, label %dec_label_pc_c860.lr.ph

dec_label_pc_c860.lr.ph:                          ; preds = %.thread12
  %v0_c860.pre = load i32, i32* @r5, align 4
  %v1_c864.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_c860

dec_label_pc_c860:                                ; preds = %dec_label_pc_c874, %dec_label_pc_c860.lr.ph
  %v0_c858 = phi i32 [ %v1_c85819, %dec_label_pc_c860.lr.ph ], [ %v1_c858, %dec_label_pc_c874 ]
  %v0_c874 = phi i32 [ 0, %dec_label_pc_c860.lr.ph ], [ %v1_c874, %dec_label_pc_c874 ]
  %v1_c860 = phi i32 [ 0, %dec_label_pc_c860.lr.ph ], [ %v1_c86043, %dec_label_pc_c874 ]
  %v2_c860 = add i32 %v1_c860, %v0_c860.pre
  %v3_c860 = inttoptr i32 %v2_c860 to i8*
  %v4_c860 = load i8, i8* %v3_c860, align 1
  %v6_c860 = zext i8 %v4_c860 to i32
  store i32 %v6_c860, i32* %r2.global-to-local, align 4
  %v2_c864 = add i32 %v0_c874, %v1_c864.pre
  %v3_c864 = inttoptr i32 %v2_c864 to i8*
  %v4_c864 = load i8, i8* %v3_c864, align 1
  %v6_c864 = zext i8 %v4_c864 to i32
  store i32 %v6_c864, i32* %r3.global-to-local, align 4
  %v9_c868 = icmp eq i8 %v4_c864, %v4_c860
  br i1 %v9_c868, label %dec_label_pc_c87c, label %bb74

bb74:                                             ; preds = %dec_label_pc_c860
  br label %dec_label_pc_c874

dec_label_pc_c874:                                ; preds = %bb74, %dec_label_pc_c87c
  %v1_c86043 = phi i32 [ %v1_c87c, %dec_label_pc_c87c ], [ 0, %bb74 ]
  %v1_c874 = add i32 %v0_c874, 1
  %v1_c858 = add i32 %v0_c858, -1
  store i32 %v1_c858, i32* @r4, align 4
  %v2_c858 = icmp eq i32 %v0_c858, 0
  br i1 %v2_c858, label %dec_label_pc_c810.backedge, label %dec_label_pc_c860

dec_label_pc_c87c:                                ; preds = %dec_label_pc_c860
  %v1_c87c = add i32 %v1_c860, 1
  %v9_c880 = icmp eq i32 %v2_c844, %v1_c87c
  br i1 %v9_c880, label %dec_label_pc_c888, label %dec_label_pc_c874

dec_label_pc_c888:                                ; preds = %dec_label_pc_c87c
  %v1_c88c = call i32 @function_f2d0(i32 9)
  %v0_c890 = load i32, i32* @r7, align 4
  %v1_c894 = call i32 @function_101d8(i32 %v0_c890)
  %v0_c898 = load i32, i32* @r8, align 4
  %v2_c8a0 = call i32 @function_ffa4(i32 %v0_c898, i32 9)
  br label %dec_label_pc_c8a4

dec_label_pc_c8a4:                                ; preds = %dec_label_pc_c778, %dec_label_pc_c8c4, %dec_label_pc_c888
  store i32 %v2_c7a0, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_c8ac = call i32 @function_f860()
  %v1_c8b4 = call i32 @function_120d0(i32 1)
  store i32 %v2_c77c, i32* @r5, align 4
  %v0_c8bc = load i32, i32* @r8, align 4
  store i32 %v0_c8bc, i32* @r6, align 4
  br label %dec_label_pc_c6d4.backedge

dec_label_pc_c6d4.backedge:                       ; preds = %dec_label_pc_c734, %dec_label_pc_c72c, %dec_label_pc_c6e4, %dec_label_pc_c8a4, %.thread7
  %v0_c6d4 = load i32, i32* @sl, align 4
  %v1_c6d8 = inttoptr i32 %v0_c6d4 to i32*
  %v2_c6d8 = call i32 @function_10518(i32* %v1_c6d8)
  %v2_c6dc = icmp eq i32 %v2_c6d8, 0
  br i1 %v2_c6dc, label %dec_label_pc_c76c, label %dec_label_pc_c6e4.preheader

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c810.backedge, %dec_label_pc_c804
  %v1_c8c8 = call i32 @function_f2d0(i32 9)
  %v0_c8cc = load i32, i32* @r7, align 4
  %v1_c8d0 = call i32 @function_101d8(i32 %v0_c8cc)
  br label %dec_label_pc_c8a4

dec_label_pc_c8d8:                                ; preds = %dec_label_pc_c65c
  %v2_c660 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_c660, i32* %r3.global-to-local, align 4
  %v0_c8e0 = load i32, i32* @r4, align 4
  store i32 %v0_c8e0, i32* %r2.global-to-local, align 4
  %v3_c8f0 = call i32 @function_109c0(i32 2, i32 1, i32 %v0_c8e0)
  %v7_c8f4 = icmp eq i32 %v3_c8f0, -1
  store i32 %v3_c8f0, i32* @r4, align 4
  br i1 %v7_c8f4, label %dec_label_pc_c67c, label %dec_label_pc_c900

dec_label_pc_c900:                                ; preds = %dec_label_pc_c8d8
  %v2_c900 = ptrtoint i32* %stack_var_-56 to i32
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_c908 = call i32 @function_10770(i32 %v3_c8f0, i32 %v2_c900, i32 16)
  %v0_c90c = load i32, i32* @r4, align 4
  %v2_c914 = call i32 @function_1085c(i32 %v0_c90c, i32 1)
  br label %dec_label_pc_c67c

; uselistorder directives
  uselistorder i32 %v3_c8f0, { 1, 2, 0 }
  uselistorder i32 %v2_c6d8, { 1, 0 }
  uselistorder i32 %v1_c87c, { 1, 0 }
  uselistorder i32 %v1_c858, { 1, 0 }
  uselistorder i32 %v1_c860, { 1, 0 }
  uselistorder i32 %v0_c874, { 1, 0 }
  uselistorder i32 %v0_c858, { 1, 0 }
  uselistorder i32 %v0_c848, { 1, 0, 2 }
  uselistorder i32 %v2_c844, { 1, 0 }
  uselistorder i32 %v2_c7f4, { 1, 0 }
  uselistorder i32 %v2_c760, { 1, 0 }
  uselistorder i32 %storemerge50, { 1, 0 }
  uselistorder i32 %v0_c624, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-56, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9 }
  uselistorder i32 (i32*)* @function_10518, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_103d4, { 2, 1, 0 }
  uselistorder i32* @global_var_1db48.53, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c6d4.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_c8a4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_c874, { 1, 0 }
  uselistorder label %dec_label_pc_c828, { 1, 0 }
  uselistorder label %dec_label_pc_c6e4, { 1, 0 }
  uselistorder label %dec_label_pc_c6e4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_c67c, { 2, 1, 0 }
}

define i32 @function_c92c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c92c:
  store i32 51524, i32* inttoptr (i32 121216 to i32*), align 128
  ret i32 %arg1
}

define i32 @function_c944() local_unnamed_addr {
dec_label_pc_c944:
  %v1_c94c = call i32 @function_f370(i32 2)
  store i32 ptrtoint (i16** @global_var_1fbd8.65 to i32), i32* @r4, align 4
  store i32 -261586247, i32* @global_var_1fbdc.67, align 4
  %v3_c964 = call i32 @function_f2ac(i32 2, i32* null)
  %v4_c964 = inttoptr i32 %v3_c964 to i16*
  %v3_c968 = load i16, i16* %v4_c964, align 2
  store i16 %v3_c968, i16* bitcast (i32* @global_var_1fbda.68 to i16*), align 4
  %v1_c974 = call i32 @function_f2d0(i32 2)
  ret i32 %v1_c974
}

define i32 @function_c988(i32 %arg1) local_unnamed_addr {
dec_label_pc_c988:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_c988 = load i32, i32* @r6, align 4
  %v12_c988 = load i32, i32* @r7, align 4
  %v15_c988 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_c9a4 = call i32 @function_109c0(i32 2, i32 1, i32 0)
  store i32 %v3_c9a4, i32* %r0.global-to-local, align 4
  store i32 121208, i32* @r6, align 4
  %v7_c9ac = icmp eq i32 %v3_c9a4, -1
  store i32 %v3_c9a4, i32* inttoptr (i32 121208 to i32*), align 8
  br i1 %v7_c9ac, label %dec_label_pc_c988.dec_label_pc_ca64_crit_edge, label %dec_label_pc_c9b8

dec_label_pc_c988.dec_label_pc_ca64_crit_edge:    ; preds = %dec_label_pc_c988
  %v1_ca6c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ca64

dec_label_pc_c9b8:                                ; preds = %dec_label_pc_c988
  %v2_c9b8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_c9b8, i32* @r3, align 4
  %v0_c9bc = load i32, i32* @r4, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_c9cc = load i32, i32* %r0.global-to-local, align 4
  %v5_c9cc = call i32 @function_1097c(i32 %v0_c9cc, i32 %v0_c9bc, i32 2, i32 %v2_c9b8, i32 4)
  store i32 %v5_c9cc, i32* %r0.global-to-local, align 4
  %v0_c9d0 = load i32, i32* @r6, align 4
  %v1_c9d0 = inttoptr i32 %v0_c9d0 to i32*
  %v2_c9d0 = load i32, i32* %v1_c9d0, align 4
  store i32 %v2_c9d0, i32* %r0.global-to-local, align 4
  %v2_c9e0 = call i32 @function_1000c(i32 %v2_c9d0, i32 3)
  %v0_c9e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_c9d0, i32* %r0.global-to-local, align 4
  %v2_c9f0 = call i32 @function_1000c(i32 %v2_c9d0, i32 %v0_c9e4)
  store i32 %v2_c9f0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_ca20 = call i32 @function_10600()
  store i32 %v0_ca20, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v2_ca28 = inttoptr i32 %v0_ca20 to i32*
  store i32 0, i32* %v2_ca28, align 4
  %v2_ca2c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_ca2c, i32* @r5, align 4
  store i32 %v0_ca20, i32* @r4, align 4
  %v0_ca3c = load i32, i32* @r6, align 4
  %v1_ca3c = inttoptr i32 %v0_ca3c to i32*
  %v2_ca3c = load i32, i32* %v1_ca3c, align 4
  store i32 %v2_ca3c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_ca48 = call i32 @function_10770(i32 %v2_ca3c, i32 %v2_ca2c, i32 16)
  store i32 %v3_ca48, i32* %r0.global-to-local, align 4
  %v7_ca4c = icmp eq i32 %v3_ca48, -1
  br i1 %v7_ca4c, label %dec_label_pc_ca70, label %dec_label_pc_ca54

dec_label_pc_ca54:                                ; preds = %dec_label_pc_c9b8
  %v2_ca5c = load i32, i32* inttoptr (i32 121208 to i32*), align 8
  store i32 %v2_ca5c, i32* %r0.global-to-local, align 4
  %v2_ca60 = call i32 @function_1085c(i32 %v2_ca5c, i32 1)
  store i32 %v2_ca60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ca64

dec_label_pc_ca64:                                ; preds = %dec_label_pc_c988.dec_label_pc_ca64_crit_edge, %dec_label_pc_ca7c, %dec_label_pc_ca54
  %v1_ca6c = phi i32 [ %v1_ca6c.pre, %dec_label_pc_c988.dec_label_pc_ca64_crit_edge ], [ %v1_cac4, %dec_label_pc_ca7c ], [ %v2_ca60, %dec_label_pc_ca54 ]
  store i32 %v9_c988, i32* @r6, align 4
  store i32 %v12_c988, i32* @r7, align 4
  store i32 %v15_c988, i32* @r8, align 4
  ret i32 %v1_ca6c

dec_label_pc_ca70:                                ; preds = %dec_label_pc_c9b8
  %v0_ca70 = load i32, i32* @r4, align 4
  %v1_ca70 = inttoptr i32 %v0_ca70 to i32*
  %v2_ca70 = load i32, i32* %v1_ca70, align 4
  %v7_ca74 = icmp eq i32 %v2_ca70, 99
  br i1 %v7_ca74, label %dec_label_pc_cacc, label %dec_label_pc_ca7c

dec_label_pc_ca7c:                                ; preds = %dec_label_pc_cacc, %bb, %dec_label_pc_ca70
  %v0_ca94 = load i32, i32* @r6, align 4
  %v1_ca94 = inttoptr i32 %v0_ca94 to i32*
  %v2_ca94 = load i32, i32* %v1_ca94, align 4
  store i32 %v2_ca94, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_caa4 = call i32 @function_107a8(i32 %v2_ca94, i32 %v2_ca2c, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_caac = call i32 @function_120d0(i32 5)
  store i32 %v1_caac, i32* %r0.global-to-local, align 4
  %v0_cab0 = load i32, i32* @r6, align 4
  %v1_cab0 = inttoptr i32 %v0_cab0 to i32*
  %v2_cab0 = load i32, i32* %v1_cab0, align 4
  store i32 %v2_cab0, i32* %r0.global-to-local, align 4
  %v1_cab4 = call i32 @function_101d8(i32 %v2_cab0)
  store i32 add (i32 ptrtoint ([3 x i8]* @global_var_c700.72 to i32), i32 7), i32* %r0.global-to-local, align 4
  %v1_cac0 = call i32 @function_c094(i32 add (i32 ptrtoint ([3 x i8]* @global_var_c700.72 to i32), i32 7))
  store i32 %v1_cac0, i32* %r0.global-to-local, align 4
  %v1_cac4 = call i32 @function_c988(i32 %v1_cac0)
  store i32 %v1_cac4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ca64

dec_label_pc_cacc:                                ; preds = %dec_label_pc_ca70
  %v0_cacc = load i32, i32* @r8, align 4
  %v1_cacc = inttoptr i32 %v0_cacc to i8*
  %v2_cacc = load i8, i8* %v1_cacc, align 1
  %v3_cacc = zext i8 %v2_cacc to i32
  %v1_cad0 = load i32, i32* @r7, align 4
  %v9_cad0 = icmp eq i32 %v3_cacc, %v1_cad0
  br i1 %v9_cad0, label %dec_label_pc_ca7c, label %bb

bb:                                               ; preds = %dec_label_pc_cacc
  %v2_cad8 = trunc i32 %v1_cad0 to i8
  store i8 %v2_cad8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_ca7c

; uselistorder directives
  uselistorder i32 %v1_cac4, { 1, 0 }
  uselistorder i32 %v2_ca2c, { 1, 0, 2 }
  uselistorder i32 %v2_c9d0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c9a4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 3, 4, 6, 5, 8, 7, 10, 9, 11, 13, 12, 14, 15, 17, 18, 19, 16 }
  uselistorder i32 (i32)* @function_c094, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_1085c, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10770, { 2, 1, 0 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder label %dec_label_pc_ca7c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ca64, { 1, 2, 0 }
}

define i32 @function_caec(i32 %arg1) local_unnamed_addr {
dec_label_pc_caec:
  %stack_var_-20 = alloca i32, align 4
  %v3_caec = load i32, i32* @r4, align 4
  %v6_caec = load i32, i32* @r5, align 4
  %v0_caf4 = call i32 @function_fec8()
  %v7_caf8 = icmp eq i32 %v0_caf4, -1
  %. = zext i1 %v7_caf8 to i32
  %tmp11 = icmp slt i32 %v0_caf4, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_cb14 = icmp eq i32 %storemerge4, 0
  store i32 %v0_caf4, i32* @global_var_1db50.74, align 4
  br i1 %v2_cb14, label %dec_label_pc_cb2c, label %dec_label_pc_cb20

dec_label_pc_cb20:                                ; preds = %dec_label_pc_caec
  store i32 %v3_caec, i32* @r4, align 4
  store i32 %v6_caec, i32* @r5, align 4
  ret i32 %v0_caf4

dec_label_pc_cb2c:                                ; preds = %dec_label_pc_caec
  store i32 1, i32* %stack_var_-20, align 4
  %v1_cb38 = call i32 @function_f370(i32 13)
  %v1_cb40 = call i32 @function_f370(i32 14)
  %v0_cb44 = load i32, i32* @r5, align 4
  %v2_cb4c = inttoptr i32 %v0_cb44 to i32*
  %v3_cb4c = call i32 @function_f2ac(i32 13, i32* %v2_cb4c)
  %v2_cb54 = call i32 @function_fde4(i32 %v3_cb4c, i32 2)
  %v7_cb58 = icmp eq i32 %v2_cb54, -1
  store i32 %v2_cb54, i32* @r4, align 4
  br i1 %v7_cb58, label %dec_label_pc_cba0, label %dec_label_pc_cb64

dec_label_pc_cb64:                                ; preds = %dec_label_pc_cba0, %dec_label_pc_cb2c
  %v0_cb70 = phi i32 [ %v2_cbb0, %dec_label_pc_cba0 ], [ %v2_cb54, %dec_label_pc_cb2c ]
  %v2_cb74 = ptrtoint i32* %stack_var_-20 to i32
  %v3_cb78 = call i32 @function_1014c(i32 %v0_cb70, i32 -2147199228, i32 %v2_cb74)
  br label %dec_label_pc_cb7c

dec_label_pc_cb7c:                                ; preds = %dec_label_pc_cb7c, %dec_label_pc_cb64
  %v0_cb88 = load i32, i32* @r4, align 4
  %v3_cb90 = call i32 @function_1014c(i32 %v0_cb88, i32 -2147199227, i32 0)
  %v1_cb98 = call i32 @function_120d0(i32 10)
  br label %dec_label_pc_cb7c

dec_label_pc_cba0:                                ; preds = %dec_label_pc_cb2c
  %v0_cba0 = load i32, i32* @r5, align 4
  %v2_cba8 = inttoptr i32 %v0_cba0 to i32*
  %v3_cba8 = call i32 @function_f2ac(i32 14, i32* %v2_cba8)
  %v2_cbb0 = call i32 @function_fde4(i32 %v3_cba8, i32 2)
  %v3_cbb4 = icmp eq i32 %v2_cbb0, -1
  store i32 %v2_cbb0, i32* @r4, align 4
  br i1 %v3_cbb4, label %dec_label_pc_cbc0, label %dec_label_pc_cb64

dec_label_pc_cbc0:                                ; preds = %dec_label_pc_cba0
  %v1_cbc4 = call i32 @function_f2d0(i32 13)
  %v1_cbcc = call i32 @function_f2d0(i32 14)
  %v0_cbd0 = load i32, i32* @r5, align 4
  %v1_cbd4 = call i32 @function_12018(i32 %v0_cbd0)
  %v0_cbd8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_cbd8, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_cbc0
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_cbc0, %bb14
  ret i32 %v1_cbd4

; uselistorder directives
  uselistorder i32 %v2_cbb0, { 1, 2, 0 }
  uselistorder i32 %v2_cb54, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_caf4, { 2, 1, 3, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_cbdc(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_cbdc:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v15_cbdc = load i32, i32* @r8, align 4
  %v2_cbec = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_cbec, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_cc04 = call i32 @function_10a58(i32* nonnull %stack_var_-64)
  store i32 %v2_cbec, i32* @r0, align 4
  %v2_cc10 = call i32 @function_10a14(i32 %v2_cbec, i32 2)
  %v0_cc14 = load i32, i32* @r5, align 4
  store i32 %v0_cc14, i32* %r2.global-to-local, align 4
  %v3_cc20 = call i32 @function_101a0(i32 %v0_cc14, i32 %v2_cbec, i32 %v0_cc14)
  %v2_cc2c = call i32 @function_10a6c(i32 17, i32 1)
  %v2_cc38 = call i32 @function_10a6c(i32 5, i32 51500)
  %v0_cc3c = call i32 @function_fa88()
  store i32 ptrtoint (i16** @global_var_1fbd8.65 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_1fbdc.67, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_cc3c, i32* @global_var_1fbd0.42, align 4
  store i16 5888, i16* bitcast (i32* @global_var_1fbda.68 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_1fbd8.65 to i16*), align 4
  %v6_cc64 = call i32 @function_f410(i32 %v0_cc3c, i32 ptrtoint (i32* @global_var_1fbd0.42 to i32), i32 ptrtoint (i16** @global_var_1fbd8.65 to i32), i32 5888)
  store i32 51524, i32* %r3.global-to-local, align 4
  store i32 121216, i32* @lr, align 4
  %v2_cc70 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_cc70, i32* @sb, align 4
  store i32 51524, i32* inttoptr (i32 121216 to i32*), align 128
  %v1_cc78 = call i32 @function_c988(i32 %v6_cc64)
  %v1_cc7c = call i32 @function_d404(i32 %v1_cc78)
  store i32 %v2_cc70, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_cc88 = call i32 @function_f860()
  %v0_cc8c = load i32, i32* @r6, align 4
  %v7_cc8c = icmp eq i32 %v0_cc8c, 2
  br i1 %v7_cc8c, label %dec_label_pc_cdbc, label %dec_label_pc_cc94

dec_label_pc_cc94:                                ; preds = %dec_label_pc_cdbc, %dec_label_pc_cbdc, %dec_label_pc_cdcc
  %v0_cc94 = call i32 @function_d3a8()
  store i32 %v0_cc94, i32* @r6, align 4
  %v0_cc9c = load i32, i32* @r8, align 4
  %v1_cc9c = inttoptr i32 %v0_cc9c to i32*
  %v2_cc9c = load i32, i32* %v1_cc9c, align 4
  %v1_cca0 = inttoptr i32 %v2_cc9c to i8*
  %v2_cca0 = call i32 @function_f7cc(i8* %v1_cca0)
  %v0_cca8 = load i32, i32* @r8, align 4
  %v1_cca8 = inttoptr i32 %v0_cca8 to i32*
  %v2_cca8 = load i32, i32* %v1_cca8, align 4
  %v1_ccac = inttoptr i32 %v2_cca8 to i8*
  %v2_ccac = call i32 @function_f7cc(i8* %v1_ccac)
  %v1_ccb0 = sub i32 20, %v2_cca0
  store i32 %v2_ccac, i32* @r4, align 4
  %v0_ccb8 = load i32, i32* @r6, align 4
  %v2_ccbc = call i32 @function_fda4(i32 %v0_ccb8, i32 %v1_ccb0)
  %v2_ccc0 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_ccc0, i32* @r5, align 4
  %v0_ccc4 = load i32, i32* @r4, align 4
  %v2_ccc4 = add i32 %v0_ccc4, %v1_ccb0
  store i32 %v2_ccc4, i32* @r4, align 4
  %v2_ccd0 = call i32 @function_d46c(i32 %v2_ccc0, i32 %v2_ccc4)
  %v2_ccd4 = ptrtoint i32* %stack_var_-40 to i32
  %v1_ccd8 = load i32, i32* @r4, align 4
  %v2_ccd8 = add i32 %v1_ccd8, %v2_ccd4
  store i32 %v2_ccd8, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_cce4 = load i32, i32* @r8, align 4
  %v1_cce4 = inttoptr i32 %v0_cce4 to i32*
  %v2_cce4 = load i32, i32* %v1_cce4, align 4
  store i32 %v2_cce4, i32* @r0, align 4
  %v3_cce8 = add i32 %v2_ccd8, -80
  %v4_cce8 = inttoptr i32 %v3_cce8 to i8*
  store i8 0, i8* %v4_cce8, align 1
  %v2_ccec = inttoptr i32 %v2_cce4 to i8*
  %v3_ccec = call i32 @function_f7f4(i8* %v2_ccec, i32 %v2_ccc0)
  store i32 32, i32* @r1, align 4
  store i32 %v2_ccc0, i32* @r0, align 4
  %v0_ccf8 = call i32 @function_f860()
  %v0_ccfc = call i32 @function_d3a8()
  store i32 %v0_ccfc, i32* @r7, align 4
  %v0_cd04 = load i32, i32* @r8, align 4
  %v1_cd04 = inttoptr i32 %v0_cd04 to i32*
  %v2_cd04 = load i32, i32* %v1_cd04, align 4
  %v1_cd08 = inttoptr i32 %v2_cd04 to i8*
  %v2_cd08 = call i32 @function_f7cc(i8* %v1_cd08)
  store i32 %v2_cd08, i32* @r6, align 4
  %v0_cd10 = load i32, i32* @r8, align 4
  %v1_cd10 = inttoptr i32 %v0_cd10 to i32*
  %v2_cd10 = load i32, i32* %v1_cd10, align 4
  %v1_cd14 = inttoptr i32 %v2_cd10 to i8*
  %v2_cd14 = call i32 @function_f7cc(i8* %v1_cd14)
  %v0_cd18 = load i32, i32* @r6, align 4
  %v1_cd18 = sub i32 20, %v0_cd18
  store i32 %v2_cd14, i32* @r4, align 4
  %v0_cd20 = load i32, i32* @r7, align 4
  %v2_cd24 = call i32 @function_fda4(i32 %v0_cd20, i32 %v1_cd18)
  %v0_cd28 = load i32, i32* @r4, align 4
  %v2_cd28 = add i32 %v0_cd28, %v1_cd18
  store i32 %v2_cd28, i32* @r4, align 4
  %v2_cd34 = call i32 @function_d46c(i32 %v2_ccc0, i32 %v2_cd28)
  store i32 %v2_ccd4, i32* %r2.global-to-local, align 4
  %v1_cd3c = load i32, i32* @r4, align 4
  %v2_cd3c = add i32 %v1_cd3c, %v2_ccd4
  store i32 %v2_cd3c, i32* %r3.global-to-local, align 4
  %v0_cd40 = load i32, i32* @sl, align 4
  %v1_cd40 = trunc i32 %v0_cd40 to i8
  %v3_cd40 = add i32 %v2_cd3c, -80
  %v4_cd40 = inttoptr i32 %v3_cd40 to i8*
  store i8 %v1_cd40, i8* %v4_cd40, align 1
  %v4_cd4c = call i32 @function_fe88(i32 15, i32 %v2_ccc0, i32 %v2_ccd4, i32 %v2_cd3c)
  %v1_cd54 = call i32 @function_f370(i32 1)
  %v3_cd64 = call i32 @function_f2ac(i32 1, i32* nonnull %stack_var_-48)
  %v3_cd68 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_cd68, i32* %r2.global-to-local, align 4
  %v2_cd74 = call i32 @function_100e4(i32 1, i32 %v3_cd64)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_cd84 = call i32 @function_100e4(i32 1, i32 ptrtoint (i32* @global_var_15350.82 to i32))
  %v1_cd8c = call i32 @function_f2d0(i32 1)
  %v1_cd90 = call i32 @function_8560(i32 %v1_cd8c)
  %v1_cd94 = call i32 @function_c610(i32 %v1_cd90)
  store i32 %v1_cd94, i32* @r0, align 4
  %v1_cd98 = call i32 @function_caec(i32 %v1_cd94)
  store i32 %v1_cd98, i32* @r0, align 4
  %v0_cd9c = call i32 @function_fec8()
  %v1_cda0 = load i32, i32* @sl, align 4
  %v7_cda4 = icmp sgt i32 %v0_cd9c, %v1_cda0
  br i1 %v7_cda4, label %dec_label_pc_cda8, label %dec_label_pc_cdf4

dec_label_pc_cda8:                                ; preds = %dec_label_pc_cc94
  store i32 %v15_cbdc, i32* %r8.global-to-local, align 4
  ret i32 %v1_cda0

dec_label_pc_cdbc:                                ; preds = %dec_label_pc_cbdc
  %v0_cdbc = load i32, i32* @r8, align 4
  %v1_cdbc = add i32 %v0_cdbc, 4
  %v2_cdbc = inttoptr i32 %v1_cdbc to i32*
  %v3_cdbc = load i32, i32* %v2_cdbc, align 4
  %v1_cdc0 = inttoptr i32 %v3_cdbc to i8*
  %v2_cdc0 = call i32 @function_f7cc(i8* %v1_cdc0)
  %v8_cdc8 = icmp sgt i32 %v2_cdc0, 31
  br i1 %v8_cdc8, label %dec_label_pc_cc94, label %dec_label_pc_cdcc

dec_label_pc_cdcc:                                ; preds = %dec_label_pc_cdbc
  %v0_cdcc = load i32, i32* @r8, align 4
  %v1_cdcc = add i32 %v0_cdcc, 4
  %v2_cdcc = inttoptr i32 %v1_cdcc to i32*
  %v3_cdcc = load i32, i32* %v2_cdcc, align 4
  store i32 %v2_cc70, i32* @r0, align 4
  %v2_cdd4 = bitcast i32* %stack_var_-152 to i8*
  %v3_cdd4 = call i32 @function_f7f4(i8* %v2_cdd4, i32 %v3_cdcc)
  %v0_cdd8 = load i32, i32* @r8, align 4
  %v1_cdd8 = add i32 %v0_cdd8, 4
  %v2_cdd8 = inttoptr i32 %v1_cdd8 to i32*
  %v3_cdd8 = load i32, i32* %v2_cdd8, align 4
  %v1_cde0 = inttoptr i32 %v3_cdd8 to i8*
  %v2_cde0 = call i32 @function_f7cc(i8* %v1_cde0)
  store i32 %v2_cde0, i32* @r1, align 4
  store i32 %v3_cdd8, i32* @r0, align 4
  %v0_cdec = call i32 @function_f860()
  br label %dec_label_pc_cc94

dec_label_pc_cdf4:                                ; preds = %dec_label_pc_cc94
  %v1_cdf4 = call i32 @function_10118(i32 %v0_cd9c)
  %v0_cdfc = load i32, i32* @sl, align 4
  %v1_ce00 = call i32 @function_101d8(i32 %v0_cdfc)
  %v1_ce08 = call i32 @function_101d8(i32 1)
  %v1_ce10 = call i32 @function_101d8(i32 2)
  store i32 121212, i32* @fp, align 4
  %v1_ce18 = call i32 @function_8560(i32 %v1_ce10)
  %v1_ce1c = call i32 @function_c610(i32 %v1_ce18)
  store i32 %v1_ce1c, i32* @r0, align 4
  %v1_ce20 = call i32 @function_caec(i32 %v1_ce1c)
  store i32 %v1_ce20, i32* @r0, align 4
  %v1_ce24 = call i32 @function_dca4(i32 %v1_ce20)
  %v0_ce28 = load i32, i32* @sl, align 4
  %v2_ce2c = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_ce2c, i32* @r7, align 4
  %v2_ce30 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_ce30, i32* @r6, align 4
  %v2_cf10 = ptrtoint i32* %stack_var_-72 to i32
  %v2_cf60 = ptrtoint i32* %stack_var_-168 to i32
  %v2_d13c = ptrtoint i32* %stack_var_-56 to i32
  %v2_d144 = ptrtoint i8** %stack_var_-42 to i32
  %v2_d2ec = ptrtoint i32* %stack_var_-1432 to i32
  %v2_d160 = ptrtoint i32* %stack_var_-52 to i32
  %v1_d214 = bitcast i32* %stack_var_-152 to i8*
  %v2_d1d4 = ptrtoint i32* %stack_var_-88 to i32
  %v1_d1f0 = sub i32 0, %v1_cdf4
  br label %dec_label_pc_ce34

dec_label_pc_ce34:                                ; preds = %dec_label_pc_d274, %dec_label_pc_d310, %bb43, %dec_label_pc_d210, %dec_label_pc_d044, %dec_label_pc_d034, %bb40, %dec_label_pc_d364, %dec_label_pc_d2d0, %dec_label_pc_d284, %dec_label_pc_d260, %dec_label_pc_d18c, %dec_label_pc_d0b4, %dec_label_pc_cfec, %dec_label_pc_cdf4
  %stack_var_-1436.0 = phi i32 [ %v0_ce28, %dec_label_pc_cdf4 ], [ %stack_var_-1436.0, %bb40 ], [ %stack_var_-1436.1, %dec_label_pc_d034 ], [ %stack_var_-1436.1, %dec_label_pc_d044 ], [ %stack_var_-1436.1, %bb43 ], [ %stack_var_-1436.1, %dec_label_pc_d284 ], [ %stack_var_-1436.1, %dec_label_pc_d0b4 ], [ %stack_var_-1436.1, %dec_label_pc_d310 ], [ %stack_var_-1436.1, %dec_label_pc_d364 ], [ %stack_var_-1436.1, %dec_label_pc_d2d0 ], [ %stack_var_-1436.1, %dec_label_pc_cfec ], [ %stack_var_-1436.1, %dec_label_pc_d210 ], [ %stack_var_-1436.1, %dec_label_pc_d260 ], [ %stack_var_-1436.1, %dec_label_pc_d18c ], [ %stack_var_-1436.1, %dec_label_pc_d274 ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ce40

dec_label_pc_ce40:                                ; preds = %dec_label_pc_ce40, %dec_label_pc_ce34
  %v1_ce44 = phi i32 [ %v1_ce48, %dec_label_pc_ce40 ], [ 4, %dec_label_pc_ce34 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ce44 = load i32, i32* @r7, align 4
  %v3_ce44 = add i32 %v2_ce44, %v1_ce44
  %v4_ce44 = inttoptr i32 %v3_ce44 to i32*
  store i32 0, i32* %v4_ce44, align 4
  %v0_ce48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ce48 = add i32 %v0_ce48, 4
  store i32 %v1_ce48, i32* %r3.global-to-local, align 4
  %v7_ce4c = icmp eq i32 %v1_ce48, 128
  br i1 %v7_ce4c, label %dec_label_pc_ce54, label %dec_label_pc_ce40

dec_label_pc_ce54:                                ; preds = %dec_label_pc_ce40
  %v0_ce54 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ce54, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ce5c

dec_label_pc_ce5c:                                ; preds = %dec_label_pc_ce5c, %dec_label_pc_ce54
  %v1_ce60 = phi i32 [ %v1_ce64, %dec_label_pc_ce5c ], [ 4, %dec_label_pc_ce54 ]
  store i32 0, i32* @r4, align 4
  %v2_ce60 = load i32, i32* @r6, align 4
  %v3_ce60 = add i32 %v2_ce60, %v1_ce60
  %v4_ce60 = inttoptr i32 %v3_ce60 to i32*
  store i32 0, i32* %v4_ce60, align 4
  %v0_ce64 = load i32, i32* %r3.global-to-local, align 4
  %v1_ce64 = add i32 %v0_ce64, 4
  store i32 %v1_ce64, i32* %r3.global-to-local, align 4
  %v7_ce68 = icmp eq i32 %v1_ce64, 128
  br i1 %v7_ce68, label %dec_label_pc_ce70, label %dec_label_pc_ce5c

dec_label_pc_ce70:                                ; preds = %dec_label_pc_ce5c
  store i32 121208, i32* %r3.global-to-local, align 4
  %v2_ce74 = load i32, i32* inttoptr (i32 121208 to i32*), align 8
  %v7_ce78 = icmp eq i32 %v2_ce74, -1
  br i1 %v7_ce78, label %dec_label_pc_cea4, label %dec_label_pc_ce80

dec_label_pc_ce80:                                ; preds = %dec_label_pc_ce70
  %v3_ce80 = udiv i32 %v2_ce74, 32
  %v3_ce84 = mul nuw nsw i32 %v3_ce80, 4
  store i32 %v2_ccd4, i32* %ip.global-to-local, align 4
  %v2_ce8c = add i32 %v3_ce84, %v2_ccd4
  store i32 %v2_ce8c, i32* %r3.global-to-local, align 4
  %v1_ce90 = add i32 %v2_ce8c, -240
  %v2_ce90 = inttoptr i32 %v1_ce90 to i32*
  %v3_ce90 = load i32, i32* %v2_ce90, align 4
  %v1_ce94 = urem i32 %v2_ce74, 32
  %v7_ce9c = shl i32 1, %v1_ce94
  %v8_ce9c = or i32 %v3_ce90, %v7_ce9c
  store i32 %v8_ce9c, i32* %r2.global-to-local, align 4
  store i32 %v8_ce9c, i32* %v2_ce90, align 4
  br label %dec_label_pc_cea4

dec_label_pc_cea4:                                ; preds = %dec_label_pc_ce70, %dec_label_pc_ce80
  %v0_cea4 = load i32, i32* @fp, align 4
  %v1_cea4 = inttoptr i32 %v0_cea4 to i32*
  %v2_cea4 = load i32, i32* %v1_cea4, align 4
  store i32 %v2_cea4, i32* @r3, align 4
  %v7_cea8 = icmp eq i32 %v2_cea4, -1
  store i32 121212, i32* %r8.global-to-local, align 4
  br i1 %v7_cea8, label %dec_label_pc_d0cc, label %dec_label_pc_ceb4

dec_label_pc_ceb4:                                ; preds = %dec_label_pc_d0cc, %dec_label_pc_cea4, %bb42
  %v2_ceb8 = load i8, i8* bitcast (i8** @global_var_1db54.86 to i8*), align 4
  %v3_ceb8 = zext i8 %v2_ceb8 to i32
  store i32 %v3_ceb8, i32* %r3.global-to-local, align 4
  %v2_cebc = icmp eq i8 %v2_ceb8, 0
  %v0_d008 = load i32, i32* @fp, align 4
  %v1_d008 = inttoptr i32 %v0_d008 to i32*
  %v2_d008 = load i32, i32* %v1_d008, align 4
  store i32 %v2_d008, i32* %ip.global-to-local, align 4
  %v3_d00c = udiv i32 %v2_d008, 32
  store i32 %v3_d00c, i32* %r3.global-to-local, align 4
  br i1 %v2_cebc, label %dec_label_pc_d008, label %dec_label_pc_cec4

dec_label_pc_cec4:                                ; preds = %dec_label_pc_ceb4
  %v3_ced0 = mul nuw nsw i32 %v3_d00c, 4
  %v2_ced4 = add i32 %v3_ced0, %v2_ccd4
  store i32 %v2_ced4, i32* %r3.global-to-local, align 4
  %v1_ced8 = add i32 %v2_ced4, -368
  %v2_ced8 = inttoptr i32 %v1_ced8 to i32*
  %v3_ced8 = load i32, i32* %v2_ced8, align 4
  %v1_cedc = urem i32 %v2_d008, 32
  %v7_cee4 = shl i32 1, %v1_cedc
  %v8_cee4 = or i32 %v3_ced8, %v7_cee4
  store i32 %v8_cee4, i32* %r2.global-to-local, align 4
  store i32 %v8_cee4, i32* %v2_ced8, align 4
  br label %dec_label_pc_ceec

dec_label_pc_ceec:                                ; preds = %dec_label_pc_d008, %dec_label_pc_cec4
  store i32 121208, i32* %r3.global-to-local, align 4
  %v2_cef0 = load i32, i32* inttoptr (i32 121208 to i32*), align 8
  store i32 0, i32* @lr, align 4
  %v0_cef8 = load i32, i32* %ip.global-to-local, align 4
  %v5_cefc = icmp slt i32 %v0_cef8, %v2_cef0
  br i1 %v5_cefc, label %bb40, label %bb

bb:                                               ; preds = %dec_label_pc_ceec
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_ceec, %bb
  %v0_cf0c = phi i32 [ %v2_cef0, %dec_label_pc_ceec ], [ %v0_cef8, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_cf0c = add i32 %v0_cf0c, 1
  store i32 %v2_cf10, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_ce30, i32* %r2.global-to-local, align 4
  %v5_cf28 = call i32 @function_fefc(i32 %v1_cf0c, i32 %v2_ce2c, i32 %v2_ce30, i32 0, i32 %v2_cf10)
  %v8_cf2c = icmp eq i32 %v5_cf28, -1
  br i1 %v8_cf2c, label %dec_label_pc_ce34, label %dec_label_pc_cf34

dec_label_pc_cf34:                                ; preds = %bb40
  %v6_cf28 = trunc i32 %v5_cf28 to i16
  %v3_cf34 = icmp eq i16 %v6_cf28, 0
  br i1 %v3_cf34, label %dec_label_pc_cf3c, label %dec_label_pc_cf70

dec_label_pc_cf3c:                                ; preds = %dec_label_pc_cf34
  %v5_cf48 = srem i32 %stack_var_-1436.0, 6
  %v4_cf50 = sub i32 %stack_var_-1436.0, %v5_cf48
  store i32 %v4_cf50, i32* %r3.global-to-local, align 4
  %v2_cf58 = icmp eq i32 %v5_cf48, 0
  %v1_cf5c = add i32 %stack_var_-1436.0, 1
  store i32 %v1_cf5c, i32* @lr, align 4
  store i32 %v2_cf60, i32* %r2.global-to-local, align 4
  %v7_cf64 = inttoptr i32 %v5_cf28 to i8*
  store i8* %v7_cf64, i8** %stack_var_-42, align 4
  br i1 %v2_cf58, label %dec_label_pc_d13c, label %dec_label_pc_cf70

dec_label_pc_cf70:                                ; preds = %dec_label_pc_cf34, %dec_label_pc_cf3c, %dec_label_pc_d13c
  %stack_var_-1436.1 = phi i32 [ %v1_cf5c, %dec_label_pc_d13c ], [ %v1_cf5c, %dec_label_pc_cf3c ], [ %stack_var_-1436.0, %dec_label_pc_cf34 ]
  store i32 121208, i32* %r3.global-to-local, align 4
  %v2_cf74 = load i32, i32* inttoptr (i32 121208 to i32*), align 8
  %v7_cf78 = icmp eq i32 %v2_cf74, -1
  br i1 %v7_cf78, label %dec_label_pc_cfa4, label %dec_label_pc_cf80

dec_label_pc_cf80:                                ; preds = %dec_label_pc_cf70
  %v3_cf80 = udiv i32 %v2_cf74, 32
  %v3_cf84 = mul nuw nsw i32 %v3_cf80, 4
  store i32 %v2_ccd4, i32* %ip.global-to-local, align 4
  %v2_cf8c = add i32 %v3_cf84, %v2_ccd4
  store i32 %v2_cf8c, i32* %r3.global-to-local, align 4
  %v1_cf90 = add i32 %v2_cf8c, -240
  %v2_cf90 = inttoptr i32 %v1_cf90 to i32*
  %v3_cf90 = load i32, i32* %v2_cf90, align 4
  %v1_cf94 = urem i32 %v2_cf74, 32
  %v6_cf98 = lshr i32 %v3_cf90, %v1_cf94
  store i32 %v6_cf98, i32* %r2.global-to-local, align 4
  %v1_cf9c = urem i32 %v6_cf98, 2
  %v2_cf9c = icmp eq i32 %v1_cf9c, 0
  br i1 %v2_cf9c, label %dec_label_pc_cfa4, label %dec_label_pc_d1c8

dec_label_pc_cfa4:                                ; preds = %dec_label_pc_cf80, %dec_label_pc_cf70
  %v2_cfa8 = load i8, i8* bitcast (i8** @global_var_1db54.86 to i8*), align 4
  %v3_cfa8 = zext i8 %v2_cfa8 to i32
  store i32 %v3_cfa8, i32* @r4, align 4
  %v2_cfac = icmp eq i8 %v2_cfa8, 0
  %v0_d034 = load i32, i32* @fp, align 4
  %v1_d034 = inttoptr i32 %v0_d034 to i32*
  %v2_d034 = load i32, i32* %v1_d034, align 4
  br i1 %v2_cfac, label %dec_label_pc_d034, label %dec_label_pc_cfb4

dec_label_pc_cfb4:                                ; preds = %dec_label_pc_cfa4
  %v3_cfb8 = udiv i32 %v2_d034, 32
  store i32 %v2_ccd4, i32* %r2.global-to-local, align 4
  %v3_cfc0 = mul nuw nsw i32 %v3_cfb8, 4
  %v2_cfc4 = add i32 %v3_cfc0, %v2_ccd4
  store i32 %v2_cfc4, i32* %r3.global-to-local, align 4
  %v1_cfc8 = add i32 %v2_cfc4, -368
  %v2_cfc8 = inttoptr i32 %v1_cfc8 to i32*
  %v3_cfc8 = load i32, i32* %v2_cfc8, align 4
  %v1_cfcc = urem i32 %v2_d034, 32
  %v6_cfd0 = lshr i32 %v3_cfc8, %v1_cfcc
  store i32 %v6_cfd0, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1db54.86 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_cfdc = urem i32 %v6_cfd0, 2
  %v2_cfdc = icmp eq i32 %v1_cfdc, 0
  store i8 0, i8* bitcast (i8** @global_var_1db54.86 to i8*), align 4
  store i32 121212, i32* @r5, align 4
  br i1 %v2_cfdc, label %dec_label_pc_cfec, label %dec_label_pc_d158

dec_label_pc_cfec:                                ; preds = %dec_label_pc_cfb4
  store i32 53236, i32* @lr, align 4
  %v1_cff0 = icmp ne i32 %v2_d034, -1
  call void @__pseudo_cond_branch(i1 %v1_cff0, i32 ptrtoint (i32* @global_var_101d8.88 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_cff8 = load i32, i32* @r5, align 4
  %v2_cff8 = inttoptr i32 %v1_cff8 to i32*
  store i32 -1, i32* %v2_cff8, align 4
  %v1_d000 = call i32 @function_120d0(i32 1)
  br label %dec_label_pc_ce34

dec_label_pc_d008:                                ; preds = %dec_label_pc_ceb4
  store i32 %v2_ccd4, i32* %r2.global-to-local, align 4
  %v3_d014 = mul nuw nsw i32 %v3_d00c, 4
  %v2_d018 = add i32 %v3_d014, %v2_ccd4
  store i32 %v2_d018, i32* %r3.global-to-local, align 4
  %v1_d01c = add i32 %v2_d018, -240
  %v2_d01c = inttoptr i32 %v1_d01c to i32*
  %v3_d01c = load i32, i32* %v2_d01c, align 4
  %v1_d020 = urem i32 %v2_d008, 32
  %v7_d028 = shl i32 1, %v1_d020
  %v8_d028 = or i32 %v3_d01c, %v7_d028
  store i32 %v8_d028, i32* %r2.global-to-local, align 4
  store i32 %v8_d028, i32* %v2_d01c, align 4
  br label %dec_label_pc_ceec

dec_label_pc_d034:                                ; preds = %dec_label_pc_cfa4
  %v7_d038 = icmp eq i32 %v2_d034, -1
  store i32 121212, i32* @r8, align 4
  br i1 %v7_d038, label %dec_label_pc_ce34, label %dec_label_pc_d044

dec_label_pc_d044:                                ; preds = %dec_label_pc_d034
  %v3_d044 = udiv i32 %v2_d034, 32
  store i32 %v2_ccd4, i32* %r2.global-to-local, align 4
  %v3_d04c = mul nuw nsw i32 %v3_d044, 4
  %v2_d050 = add i32 %v3_d04c, %v2_ccd4
  store i32 %v2_d050, i32* %r3.global-to-local, align 4
  %v1_d054 = add i32 %v2_d050, -240
  %v2_d054 = inttoptr i32 %v1_d054 to i32*
  %v3_d054 = load i32, i32* %v2_d054, align 4
  %v1_d058 = urem i32 %v2_d034, 32
  %v6_d05c = lshr i32 %v3_d054, %v1_d058
  store i32 %v6_d05c, i32* %r2.global-to-local, align 4
  %v1_d060 = urem i32 %v6_d05c, 2
  %v2_d060 = icmp eq i32 %v1_d060, 0
  br i1 %v2_d060, label %dec_label_pc_ce34, label %dec_label_pc_d068

dec_label_pc_d068:                                ; preds = %dec_label_pc_d044
  %v6_d06c = inttoptr i32 %v3_cfa8 to i8*
  store i8* %v6_d06c, i8** %stack_var_-42, align 4
  store i32 %v2_d144, i32* @sl, align 4
  %v0_d070 = call i32 @function_10600()
  %v0_d074 = load i32, i32* @r4, align 4
  %v2_d074 = inttoptr i32 %v0_d070 to i32*
  store i32 %v0_d074, i32* %v2_d074, align 4
  store i32 %v0_d070, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_d084 = load i32, i32* @r8, align 4
  %v1_d084 = inttoptr i32 %v0_d084 to i32*
  %v2_d084 = load i32, i32* %v1_d084, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_d090 = call i32 @function_10890(i32 %v2_d084, i32 %v2_d144, i32 2, i32 16386)
  %v7_d094 = icmp eq i32 %v4_d090, -1
  br i1 %v7_d094, label %dec_label_pc_d274, label %dec_label_pc_d09c

dec_label_pc_d09c:                                ; preds = %dec_label_pc_d068
  %v2_d09c = icmp eq i32 %v4_d090, 0
  br i1 %v2_d09c, label %dec_label_pc_d284, label %dec_label_pc_d0a4

dec_label_pc_d0a4:                                ; preds = %dec_label_pc_d09c
  store i32 %v2_cf60, i32* %ip.global-to-local, align 4
  %v3_d0a8 = load i8*, i8** %stack_var_-42, align 4
  %v4_d0a8 = ptrtoint i8* %v3_d0a8 to i32
  store i32 %v4_d0a8, i32* %r3.global-to-local, align 4
  %v2_d0ac = icmp eq i8* %v3_d0a8, null
  br i1 %v2_d0ac, label %dec_label_pc_d0b4, label %dec_label_pc_d2b4

dec_label_pc_d0b4:                                ; preds = %dec_label_pc_d0a4
  %v0_d0b4 = load i32, i32* @r8, align 4
  %v1_d0b4 = inttoptr i32 %v0_d0b4 to i32*
  %v2_d0b4 = load i32, i32* %v1_d0b4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_d0c0 = add i32 %v4_d0a8, 16384
  store i32 %v1_d0c0, i32* %r3.global-to-local, align 4
  %v4_d0c4 = call i32 @function_10890(i32 %v2_d0b4, i32 %v2_d144, i32 2, i32 %v1_d0c0)
  br label %dec_label_pc_ce34

dec_label_pc_d0cc:                                ; preds = %dec_label_pc_cea4
  %v0_d0d4 = load i32, i32* @r4, align 4
  store i32 %v0_d0d4, i32* %r2.global-to-local, align 4
  %v3_d0d8 = call i32 @function_109c0(i32 2, i32 1, i32 %v0_d0d4)
  %v7_d0dc = icmp eq i32 %v3_d0d8, -1
  store i32 %v3_d0d8, i32* @r5, align 4
  %v1_d0e4 = load i32, i32* %r8.global-to-local, align 4
  %v2_d0e4 = inttoptr i32 %v1_d0e4 to i32*
  store i32 %v3_d0d8, i32* %v2_d0e4, align 4
  br i1 %v7_d0dc, label %dec_label_pc_ceb4, label %dec_label_pc_d0ec

dec_label_pc_d0ec:                                ; preds = %dec_label_pc_d0cc
  %v0_d0ec = load i32, i32* @r4, align 4
  store i32 %v0_d0ec, i32* %r2.global-to-local, align 4
  %v2_d0f4 = call i32 @function_1000c(i32 %v3_d0d8, i32 3)
  %v1_d0fc = or i32 %v2_d0f4, 2048
  store i32 %v1_d0fc, i32* %r2.global-to-local, align 4
  %v0_d100 = load i32, i32* @r5, align 4
  %v2_d104 = call i32 @function_1000c(i32 %v0_d100, i32 4)
  %v2_d10c = load i32, i32* inttoptr (i32 121216 to i32*), align 128
  store i32 %v2_d10c, i32* %r3.global-to-local, align 4
  %v2_d110 = icmp eq i32 %v2_d10c, 0
  br i1 %v2_d110, label %bb42, label %bb41

bb41:                                             ; preds = %dec_label_pc_d0ec
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_d0ec, %bb41
  %v2_d118 = xor i1 %v2_d110, true
  call void @__pseudo_cond_branch(i1 %v2_d118, i32 %v2_d10c)
  store i32 ptrtoint (i8** @global_var_1db54.86 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d124 = load i32, i32* %r8.global-to-local, align 4
  %v1_d124 = inttoptr i32 %v0_d124 to i32*
  %v2_d124 = load i32, i32* %v1_d124, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1db54.86 to i8*), align 4
  %v4_d134 = call i32 @function_107a8(i32 %v2_d124, i32 ptrtoint (i16** @global_var_1fbd8.65 to i32), i32 16)
  br label %dec_label_pc_ceb4

dec_label_pc_d13c:                                ; preds = %dec_label_pc_cf3c
  %v0_d140 = load i32, i32* @fp, align 4
  %v1_d140 = inttoptr i32 %v0_d140 to i32*
  %v2_d140 = load i32, i32* %v1_d140, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d150 = call i32 @function_10904(i32 %v2_d140, i32 %v2_d144, i32 2, i32 16384)
  br label %dec_label_pc_cf70

dec_label_pc_d158:                                ; preds = %dec_label_pc_cfb4
  store i32 4, i32* @r4, align 4
  store i32 %v2_d160, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_d13c, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_d17c = call i32 @function_10818(i32 %v2_d034, i32 1, i32 4, i32 %v2_d160, i32 %v2_d13c)
  %v3_d180 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_d180, i32* %r3.global-to-local, align 4
  %v2_d184 = icmp eq i32 %v3_d180, 0
  br i1 %v2_d184, label %dec_label_pc_d210, label %dec_label_pc_d18c

dec_label_pc_d18c:                                ; preds = %dec_label_pc_d158
  %v0_d18c = load i32, i32* @r5, align 4
  %v1_d18c = inttoptr i32 %v0_d18c to i32*
  %v2_d18c = load i32, i32* %v1_d18c, align 4
  %v1_d190 = call i32 @function_101d8(i32 %v2_d18c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d198 = load i32, i32* @r5, align 4
  %v2_d198 = inttoptr i32 %v1_d198 to i32*
  store i32 -1, i32* %v2_d198, align 4
  %v0_d19c = call i32 @function_d3a8()
  %v3_d1a4 = zext i32 %v0_d19c to i64
  %v4_d1a4 = mul nuw i64 %v3_d1a4, 3435973837
  %v7_d1a4 = trunc i64 %v4_d1a4 to i32
  store i32 %v7_d1a4, i32* %ip.global-to-local, align 4
  %v3_d1a81 = udiv i64 %v4_d1a4, 34359738368
  %v3_d1ac3 = mul nuw nsw i64 %v3_d1a81, 8
  %v3_d1ac = trunc i64 %v3_d1ac3 to i32
  store i32 %v3_d1ac, i32* %r2.global-to-local, align 4
  %v2_d1b05 = mul nuw nsw i64 %v3_d1a81, 2
  %v2_d1b0 = trunc i64 %v2_d1b05 to i32
  %v2_d1b4 = add i32 %v3_d1ac, %v2_d1b0
  store i32 %v2_d1b4, i32* %r3.global-to-local, align 4
  %v2_d1b8 = sub i32 %v0_d19c, %v2_d1b4
  %v1_d1bc = add i32 %v2_d1b8, 1
  %v1_d1c0 = call i32 @function_120d0(i32 %v1_d1bc)
  br label %dec_label_pc_ce34

dec_label_pc_d1c8:                                ; preds = %dec_label_pc_cf80
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_d160, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_d1dc = call i32 @function_10738(i32 %v2_cf74, i32 %v2_d1d4, i32 %v2_d160, i32 16, i32 16)
  %v1_d1e0 = call i32 @function_da54(i32 %v5_d1dc)
  %v1_d1e4 = call i32 @function_c06c(i32 %v1_d1e0)
  store i32 %v1_cdf4, i32* @lr, align 4
  %v2_d1f4 = call i32 @function_ffa4(i32 %v1_d1f0, i32 9)
  store i32 ptrtoint (i32* @global_var_1db50.74 to i32), i32* %r3.global-to-local, align 4
  %v2_d1fc = load i32, i32* @global_var_1db50.74, align 4
  %v2_d200 = icmp eq i32 %v2_d1fc, 0
  br i1 %v2_d200, label %dec_label_pc_d208, label %dec_label_pc_d2a8

dec_label_pc_d208:                                ; preds = %dec_label_pc_d1c8, %dec_label_pc_d2a8
  %v1_d20c = call i32 @function_12018(i32 0)
  br label %dec_label_pc_d210

dec_label_pc_d210:                                ; preds = %dec_label_pc_d158, %dec_label_pc_d208
  %v2_d214 = call i32 @function_f7cc(i8* %v1_d214)
  %sext = mul i32 %v2_d214, 16777216
  %v1_d218 = sdiv i32 %sext, 16777216
  %v7_d218 = inttoptr i32 %v1_d218 to i8*
  store i8* %v7_d218, i8** %stack_var_-42, align 4
  %v0_d21c = call i32 @function_fa88()
  %v0_d224 = load i32, i32* @r4, align 4
  store i32 %v0_d224, i32* %r2.global-to-local, align 4
  store i32 %v0_d21c, i32* @global_var_1fbd0.42, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d234 = load i32, i32* @r5, align 4
  %v1_d234 = inttoptr i32 %v0_d234 to i32*
  %v2_d234 = load i32, i32* %v1_d234, align 4
  %v4_d238 = call i32 @function_10904(i32 %v2_d234, i32 ptrtoint (i32* @global_var_15354.92 to i32), i32 %v0_d224, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_d244 = load i32, i32* @r5, align 4
  %v1_d244 = inttoptr i32 %v0_d244 to i32*
  %v2_d244 = load i32, i32* %v1_d244, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_d250 = call i32 @function_10904(i32 %v2_d244, i32 %v2_d144, i32 1, i32 16384)
  %v3_d254 = load i8*, i8** %stack_var_-42, align 4
  %v4_d254 = ptrtoint i8* %v3_d254 to i32
  store i32 %v4_d254, i32* %r2.global-to-local, align 4
  %v3_d258 = icmp eq i8* %v3_d254, null
  br i1 %v3_d258, label %dec_label_pc_ce34, label %dec_label_pc_d260

dec_label_pc_d260:                                ; preds = %dec_label_pc_d210
  %v0_d260 = load i32, i32* @r5, align 4
  %v1_d260 = inttoptr i32 %v0_d260 to i32*
  %v2_d260 = load i32, i32* %v1_d260, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_d26c = call i32 @function_10904(i32 %v2_d260, i32 %v2_cc70, i32 %v4_d254, i32 16384)
  br label %dec_label_pc_ce34

dec_label_pc_d274:                                ; preds = %dec_label_pc_d2e4, %dec_label_pc_d068
  %v0_d274 = load i32, i32* @r5, align 4
  %v1_d274 = inttoptr i32 %v0_d274 to i32*
  %v2_d274 = load i32, i32* %v1_d274, align 4
  store i32 %v2_d274, i32* %r3.global-to-local, align 4
  %v7_d278 = icmp eq i32 %v2_d274, 4
  br i1 %v7_d278, label %dec_label_pc_ce34, label %bb43

bb43:                                             ; preds = %dec_label_pc_d274
  %v8_d27c = icmp eq i32 %v2_d274, 11
  br i1 %v8_d27c, label %dec_label_pc_ce34, label %dec_label_pc_d284

dec_label_pc_d284:                                ; preds = %dec_label_pc_d308, %bb43, %dec_label_pc_d09c
  %v0_d284 = load i32, i32* @fp, align 4
  %v1_d284 = inttoptr i32 %v0_d284 to i32*
  %v2_d284 = load i32, i32* %v1_d284, align 4
  store i32 53904, i32* @lr, align 4
  %v1_d28c = icmp ne i32 %v2_d284, -1
  call void @__pseudo_cond_branch(i1 %v1_d28c, i32 ptrtoint (i32* @global_var_101d8.88 to i32))
  store i32 121212, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 121212 to i32*), align 4
  %v1_d2a0 = call i32 @function_120d0(i32 1)
  br label %dec_label_pc_ce34

dec_label_pc_d2a8:                                ; preds = %dec_label_pc_d1c8
  %v2_d2ac = call i32 @function_ffa4(i32 %v2_d1fc, i32 9)
  br label %dec_label_pc_d208

dec_label_pc_d2b4:                                ; preds = %dec_label_pc_d0a4
  %v3_d2b4 = udiv i32 %v4_d0a8, 256
  %v1_d2b8 = urem i32 %v4_d0a8, 256
  store i32 %v1_d2b8, i32* %r3.global-to-local, align 4
  %v4_d2bc = mul nuw nsw i32 %v1_d2b8, 256
  %v5_d2bc = or i32 %v4_d2bc, %v3_d2b4
  %v6_d2bc = trunc i32 %v5_d2bc to i16
  store i32 %v5_d2bc, i32* %r2.global-to-local, align 4
  %v7_d2c8 = inttoptr i32 %v5_d2bc to i8*
  store i8* %v7_d2c8, i8** %stack_var_-42, align 4
  %tmp44 = icmp ult i16 %v6_d2bc, 1025
  br i1 %tmp44, label %dec_label_pc_d2e4, label %dec_label_pc_d2d0

dec_label_pc_d2d0:                                ; preds = %dec_label_pc_d2b4
  %v0_d2d0 = load i32, i32* @r8, align 4
  %v1_d2d0 = inttoptr i32 %v0_d2d0 to i32*
  %v2_d2d0 = load i32, i32* %v1_d2d0, align 4
  %v1_d2d4 = call i32 @function_101d8(i32 %v2_d2d0)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d2dc = load i32, i32* @r8, align 4
  %v2_d2dc = inttoptr i32 %v1_d2dc to i32*
  store i32 -1, i32* %v2_d2dc, align 4
  br label %dec_label_pc_ce34

dec_label_pc_d2e4:                                ; preds = %dec_label_pc_d2b4
  %v0_d2e4 = load i32, i32* @r4, align 4
  %v1_d2e4 = load i32, i32* @r5, align 4
  %v2_d2e4 = inttoptr i32 %v1_d2e4 to i32*
  store i32 %v0_d2e4, i32* %v2_d2e4, align 4
  store i32 %v2_d2ec, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_d2f4 = load i32, i32* @r8, align 4
  %v1_d2f4 = inttoptr i32 %v0_d2f4 to i32*
  %v2_d2f4 = load i32, i32* %v1_d2f4, align 4
  %v7_d2fc = call i32 @function_10890(i32 %v2_d2f4, i32 %v2_d2ec, i32 %v5_d2bc, i32 16386)
  %v7_d300 = icmp eq i32 %v7_d2fc, -1
  br i1 %v7_d300, label %dec_label_pc_d274, label %dec_label_pc_d308

dec_label_pc_d308:                                ; preds = %dec_label_pc_d2e4
  %v2_d308 = icmp eq i32 %v7_d2fc, 0
  br i1 %v2_d308, label %dec_label_pc_d284, label %dec_label_pc_d310

dec_label_pc_d310:                                ; preds = %dec_label_pc_d308
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d31c = load i32, i32* @r8, align 4
  %v1_d31c = inttoptr i32 %v0_d31c to i32*
  %v2_d31c = load i32, i32* %v1_d31c, align 4
  %v4_d320 = call i32 @function_10890(i32 %v2_d31c, i32 %v2_d144, i32 2, i32 16384)
  %v3_d328 = load i8*, i8** %stack_var_-42, align 4
  %v4_d328 = ptrtoint i8* %v3_d328 to i32
  %v3_d32c = udiv i32 %v4_d328, 256
  %v1_d330 = urem i32 %v4_d328, 256
  store i32 %v1_d330, i32* %r3.global-to-local, align 4
  %v4_d334 = mul nuw nsw i32 %v1_d330, 256
  %v5_d334 = or i32 %v4_d334, %v3_d32c
  store i32 %v5_d334, i32* %ip.global-to-local, align 4
  store i32 %v2_cf60, i32* @lr, align 4
  store i32 %v5_d334, i32* %r2.global-to-local, align 4
  %v0_d344 = load i32, i32* @r8, align 4
  %v1_d344 = inttoptr i32 %v0_d344 to i32*
  %v2_d344 = load i32, i32* %v1_d344, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_d34c = inttoptr i32 %v5_d334 to i8*
  store i8* %v6_d34c, i8** %stack_var_-42, align 4
  %v6_d350 = call i32 @function_10890(i32 %v2_d344, i32 %v2_d2ec, i32 %v5_d334, i32 16384)
  store i32 %v2_cf60, i32* %r2.global-to-local, align 4
  %v3_d358 = load i8*, i8** %stack_var_-42, align 4
  %v3_d35c = icmp eq i8* %v3_d358, null
  br i1 %v3_d35c, label %dec_label_pc_ce34, label %dec_label_pc_d364

dec_label_pc_d364:                                ; preds = %dec_label_pc_d310
  %v4_d358 = ptrtoint i8* %v3_d358 to i32
  %v5_d368 = call i32 @function_82c8(i32* nonnull %stack_var_-1432, i32 %v4_d358, i32 %v2_cf60)
  br label %dec_label_pc_ce34

; uselistorder directives
  uselistorder i8* %v3_d358, { 1, 0 }
  uselistorder i32 %v5_d334, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d328, { 1, 0 }
  uselistorder i32 %v7_d2fc, { 1, 0 }
  uselistorder i32 %v5_d2bc, { 1, 0, 3, 2 }
  uselistorder i32 %v3_d0d8, { 3, 2, 1, 0 }
  uselistorder i32 %v4_d0a8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d090, { 1, 0 }
  uselistorder i32 %v2_d034, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_cf74, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_cf5c, { 1, 0, 2 }
  uselistorder i32 %v5_cf28, { 1, 2, 0 }
  uselistorder i32 %v2_ce74, { 2, 1, 0 }
  uselistorder i32 %v1_ce64, { 1, 2, 0 }
  uselistorder i32 %v1_ce48, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v2_d160, { 1, 0, 2, 3 }
  uselistorder i32 %v2_d144, { 3, 0, 5, 4, 2, 1 }
  uselistorder i32 %v2_d13c, { 1, 0 }
  uselistorder i32 %v2_cf60, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_ce30, { 1, 0, 2 }
  uselistorder i32 %v2_ccd4, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7 }
  uselistorder i32 %v2_ccc0, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_cbec, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-152, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 33, 32, 36, 34, 35, 25, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 30, 31 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 25, 26 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 10, 5, 6, 11, 9 }
  uselistorder i32* @global_var_1db50.74, { 1, 2, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i8** @global_var_1db54.86 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1db54.86 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* inttoptr (i32 121208 to i32*), { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32)* @function_caec, { 1, 0 }
  uselistorder i32 (i32)* @function_c610, { 1, 0 }
  uselistorder i32 (i32)* @function_8560, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_f7f4, { 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 (i32, i32)* @function_d46c, { 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1fbd8.65 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @function_10a6c, { 1, 0 }
  uselistorder label %dec_label_pc_d210, { 1, 0 }
  uselistorder label %dec_label_pc_d208, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_cf70, { 2, 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_ceb4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cea4, { 1, 0 }
  uselistorder label %dec_label_pc_ce34, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_cc94, { 2, 0, 1 }
}

define i32 @function_d38c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_d38c:
  %cpsr_c.global-to-local = alloca i1, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v0_d38c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d38c, label %bb, label %dec_label_pc_d38c..thread1_crit_edge

dec_label_pc_d38c..thread1_crit_edge:             ; preds = %dec_label_pc_d38c
  %v0_d398.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

bb:                                               ; preds = %dec_label_pc_d38c
  %v2_d394 = load i32, i32* @r4, align 4
  %v3_d394 = load i32, i32* @fp, align 4
  %v4_d394 = add i32 %v3_d394, -1
  %v5_d394 = shl i32 1, %v4_d394
  %v6_d394 = and i32 %v5_d394, %v2_d394
  %v7_d394 = icmp ne i32 %v6_d394, 0
  store i1 %v7_d394, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_d38c..thread1_crit_edge, %bb
  %v0_d398 = phi i1 [ %v0_d398.pre, %dec_label_pc_d38c..thread1_crit_edge ], [ %v7_d394, %bb ]
  call void @__pseudo_cond_branch(i1 %v0_d398, i32 -22315444)
  %v0_d3a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d3a0, label %bb4, label %.thread2

bb4:                                              ; preds = %.thread1
  %v2_d3a4 = load i32, i32* @r4, align 4
  %v4_d3a4 = add i32 %arg3, -1
  %v5_d3a4 = shl i32 1, %v4_d3a4
  %v6_d3a4 = and i32 %v2_d3a4, %v5_d3a4
  %v7_d3a4 = icmp ne i32 %v6_d3a4, 0
  store i1 %v7_d3a4, i1* %cpsr_c.global-to-local, align 1
  br label %.thread2

.thread2:                                         ; preds = %.thread1, %bb4
  ret i32 %arg1

; uselistorder directives
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_d3a8() local_unnamed_addr {
dec_label_pc_d3a8:
  %v2_d3b4 = load i32, i32* @global_var_1db58.94, align 4
  %v2_d3b8 = load i32, i32* @global_var_1db64.96, align 4
  %v4_d3c4 = mul i32 %v2_d3b4, 2048
  %v5_d3c4 = xor i32 %v4_d3c4, %v2_d3b4
  store i32 %v5_d3c4, i32* @r3, align 4
  %v4_d3c8 = udiv i32 %v2_d3b8, 524288
  %v5_d3c8 = xor i32 %v4_d3c8, %v2_d3b8
  %v2_d3cc = load i32, i32* @global_var_1db5c.98, align 4
  %v2_d3d0 = load i32, i32* @global_var_1db60.100, align 4
  store i32 %v2_d3d0, i32* @ip, align 4
  %v2_d3d4 = xor i32 %v5_d3c8, %v5_d3c4
  %v4_d3d8 = udiv i32 %v5_d3c4, 256
  %v5_d3d8 = xor i32 %v2_d3d4, %v4_d3d8
  store i32 %v2_d3cc, i32* @global_var_1db58.94, align 4
  store i32 %v2_d3d0, i32* @global_var_1db5c.98, align 4
  store i32 %v2_d3b8, i32* @global_var_1db60.100, align 4
  store i32 %v5_d3d8, i32* @global_var_1db64.96, align 4
  ret i32 %v5_d3d8

; uselistorder directives
  uselistorder i32 %v2_d3b8, { 2, 1, 0 }
  uselistorder i32 %v2_d3b4, { 1, 0 }
}

define i32 @function_d404(i32 %arg1) local_unnamed_addr {
dec_label_pc_d404:
  %v2_d410 = call i32 @function_fe58(i32* null)
  store i32 %v2_d410, i32* @r0, align 4
  store i32 %v2_d410, i32* @global_var_1db58.94, align 4
  %v0_d41c = call i32 @function_fe44()
  store i32 %v0_d41c, i32* @r0, align 4
  %v0_d424 = call i32 @function_fdd0()
  %v2_d42c = xor i32 %v0_d41c, %v0_d424
  store i32 %v2_d42c, i32* @global_var_1db5c.98, align 4
  %v1_d434 = call i32 @function_1061c(i32 %v2_d42c)
  %v2_d438 = load i32, i32* @global_var_1db5c.98, align 4
  %v2_d444 = xor i32 %v2_d438, %v1_d434
  store i32 %v2_d444, i32* @global_var_1db64.96, align 4
  store i32 %v1_d434, i32* @global_var_1db60.100, align 4
  ret i32 %v1_d434

; uselistorder directives
  uselistorder i32 %v1_d434, { 1, 2, 0 }
}

define i32 @function_d46c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d46c:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-63 = alloca i32, align 4
  %v3_d46c = load i32, i32* @r4, align 4
  %v12_d46c = load i32, i32* @r7, align 4
  store i32 %arg2, i32* %fp.global-to-local, align 4
  %v2_d470 = icmp eq i32 %arg2, 0
  %v0_d478 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d478, i32* %sb.global-to-local, align 4
  br i1 %v2_d470, label %dec_label_pc_d504, label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d46c
  %v2_d480 = ptrtoint i32* %stack_var_-63 to i32
  store i32 %v2_d480, i32* @r0, align 4
  store i32 ptrtoint ([23 x i8]* @global_var_1535c.106 to i32), i32* @r1, align 4
  store i32 23, i32* @r2, align 4
  %v0_d48c = call i32 @function_10700()
  store i32 %v0_d48c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1db58.94 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1db5c.98 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1db60.100 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1db64.96 to i32), i32* %r6.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v1_d4d8 = bitcast i32* %stack_var_-63 to i8*
  %v2_d4e8 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_d4a4

dec_label_pc_d4a4:                                ; preds = %dec_label_pc_d4a4.dec_label_pc_d4a4_crit_edge, %dec_label_pc_d480
  %v1_d4c8 = phi i32 [ %v1_d4c8.pre, %dec_label_pc_d4a4.dec_label_pc_d4a4_crit_edge ], [ ptrtoint (i32* @global_var_1db58.94 to i32), %dec_label_pc_d480 ]
  %v2_d4a4 = load i32, i32* @global_var_1db64.96, align 4
  store i32 %v2_d4a4, i32* %r2.global-to-local, align 4
  %v2_d4a8 = load i32, i32* @global_var_1db58.94, align 4
  %v4_d4ac = udiv i32 %v2_d4a4, 524288
  %v5_d4ac = xor i32 %v4_d4ac, %v2_d4a4
  %v4_d4b0 = mul i32 %v2_d4a8, 2048
  %v5_d4b0 = xor i32 %v4_d4b0, %v2_d4a8
  %v2_d4b4 = xor i32 %v5_d4ac, %v5_d4b0
  %v2_d4b8 = load i32, i32* @global_var_1db5c.98, align 4
  %v2_d4bc = load i32, i32* @global_var_1db60.100, align 4
  store i32 %v2_d4bc, i32* @ip, align 4
  %v4_d4c0 = udiv i32 %v5_d4b0, 256
  %v5_d4c0 = xor i32 %v2_d4b4, %v4_d4c0
  store i32 %v5_d4c0, i32* @r4, align 4
  store i32 %v2_d480, i32* %r0.global-to-local, align 4
  %v2_d4c8 = inttoptr i32 %v1_d4c8 to i32*
  store i32 %v2_d4b8, i32* %v2_d4c8, align 4
  %v0_d4cc = load i32, i32* @ip, align 4
  %v1_d4cc = load i32, i32* %r8.global-to-local, align 4
  %v2_d4cc = inttoptr i32 %v1_d4cc to i32*
  store i32 %v0_d4cc, i32* %v2_d4cc, align 4
  %v0_d4d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d4d0 = load i32, i32* @r7, align 4
  %v2_d4d0 = inttoptr i32 %v1_d4d0 to i32*
  store i32 %v0_d4d0, i32* %v2_d4d0, align 4
  %v0_d4d4 = load i32, i32* @r4, align 4
  %v1_d4d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_d4d4 = inttoptr i32 %v1_d4d4 to i32*
  store i32 %v0_d4d4, i32* %v2_d4d4, align 4
  %v2_d4d8 = call i32 @function_f7cc(i8* %v1_d4d8)
  %v0_d4e0 = load i32, i32* @r4, align 4
  store i32 %v0_d4e0, i32* %r0.global-to-local, align 4
  %v2_d4e4 = call i32 @function_fda4(i32 %v0_d4e0, i32 %v2_d4d8)
  store i32 %v2_d4e4, i32* %r0.global-to-local, align 4
  %v2_d4ec = add i32 %v2_d4d8, %v2_d4e8
  %v1_d4f0 = add i32 %v2_d4ec, -23
  %v2_d4f0 = inttoptr i32 %v1_d4f0 to i8*
  %v3_d4f0 = load i8, i8* %v2_d4f0, align 1
  %v2_d4f4 = load i32, i32* %r5.global-to-local, align 4
  %v3_d4f4 = load i32, i32* %sb.global-to-local, align 4
  %v4_d4f4 = add i32 %v3_d4f4, %v2_d4f4
  %v5_d4f4 = inttoptr i32 %v4_d4f4 to i8*
  store i8 %v3_d4f0, i8* %v5_d4f4, align 1
  %v0_d4f8 = load i32, i32* %r5.global-to-local, align 4
  %v1_d4f8 = add i32 %v0_d4f8, 1
  store i32 %v1_d4f8, i32* %r5.global-to-local, align 4
  %v1_d4fc = load i32, i32* %fp.global-to-local, align 4
  %v9_d4fc = icmp eq i32 %v1_d4f8, %v1_d4fc
  br i1 %v9_d4fc, label %dec_label_pc_d504.loopexit, label %dec_label_pc_d4a4.dec_label_pc_d4a4_crit_edge

dec_label_pc_d4a4.dec_label_pc_d4a4_crit_edge:    ; preds = %dec_label_pc_d4a4
  %v1_d4c8.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_d4a4

dec_label_pc_d504.loopexit:                       ; preds = %dec_label_pc_d4a4
  %v1_d50c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d504

dec_label_pc_d504:                                ; preds = %dec_label_pc_d504.loopexit, %dec_label_pc_d46c
  %v1_d50c = phi i32 [ %v1_d50c.pre, %dec_label_pc_d504.loopexit ], [ %v0_d478, %dec_label_pc_d46c ]
  store i32 %v3_d46c, i32* @r4, align 4
  store i32 %v12_d46c, i32* @r7, align 4
  ret i32 %v1_d50c

; uselistorder directives
  uselistorder i32 %v2_d4a8, { 1, 0 }
  uselistorder i32 %v2_d4a4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 2, 5, 6, 0, 1 }
  uselistorder i32* @global_var_1db64.96, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1db60.100, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1db5c.98, { 2, 5, 3, 1, 0, 4 }
  uselistorder i32* @global_var_1db58.94, { 2, 4, 1, 0, 3 }
}

define i32 @function_d524(i32 %arg1) local_unnamed_addr {
dec_label_pc_d524:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d524 = load i32, i32* @r4, align 4
  store i32 %v3_d524, i32* %stack_var_-8, align 4
  %v6_d524 = load i32, i32* @lr, align 4
  %v0_d528 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_d528, i32* @r4, align 4
  %v2_d528 = icmp eq i32 %v0_d528, 0
  br i1 %v2_d528, label %dec_label_pc_d544, label %dec_label_pc_d530

dec_label_pc_d530:                                ; preds = %dec_label_pc_d524
  %v1_d530 = add i32 %v0_d528, 4
  %v2_d530 = inttoptr i32 %v1_d530 to i32*
  %v3_d530 = load i32, i32* %v2_d530, align 4
  store i32 %v3_d530, i32* %r0.global-to-local, align 4
  store i32 54588, i32* @lr, align 4
  %v1_d538 = icmp ne i32 %v3_d530, 0
  call void @__pseudo_cond_branch(i1 %v1_d538, i32 ptrtoint (i32* @global_var_11c74.16 to i32))
  %v0_d53c = load i32, i32* @r4, align 4
  store i32 %v0_d53c, i32* @r0, align 4
  %v0_d540 = call i32 @function_11c74()
  store i32 %v0_d540, i32* %r0.global-to-local, align 4
  %v2_d544.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_d544

dec_label_pc_d544:                                ; preds = %dec_label_pc_d524, %dec_label_pc_d530
  %v1_d548 = phi i32 [ 0, %dec_label_pc_d524 ], [ %v0_d540, %dec_label_pc_d530 ]
  %v2_d544 = phi i32 [ %v3_d524, %dec_label_pc_d524 ], [ %v2_d544.pre, %dec_label_pc_d530 ]
  store i32 %v2_d544, i32* @r4, align 4
  store i32 %v6_d524, i32* @lr, align 4
  ret i32 %v1_d548

; uselistorder directives
  uselistorder i32 %v0_d528, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_d544, { 1, 0 }
}

define i32 @function_d54c(i32 %arg1) local_unnamed_addr {
dec_label_pc_d54c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp79 = call i16 @__decompiler_undefined_function_2()
  %stack_var_-4280 = alloca i32, align 4
  %stack_var_-4292 = alloca i16, align 2
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2230 = alloca i32, align 4
  %stack_var_-2244 = alloca i16, align 2
  %stack_var_-2232 = alloca i32, align 4
  %v3_d54c = load i32, i32* @r4, align 4
  %v9_d54c = load i32, i32* @r6, align 4
  %v12_d54c = load i32, i32* @r7, align 4
  %v15_d54c = load i32, i32* @r8, align 4
  %v18_d54c = load i32, i32* @sb, align 4
  %v21_d54c = load i32, i32* @sl, align 4
  %v24_d54c = load i32, i32* @fp, align 4
  %v27_d54c = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_d564 = call i32 @function_11528(i32 1, i32 8)
  store i32 %v2_d564, i32* @fp, align 4
  %v0_d56c = load i32, i32* @r5, align 4
  store i32 %v0_d56c, i32* %r0.global-to-local, align 4
  %v1_d570 = inttoptr i32 %v0_d56c to i8*
  %v2_d570 = call i32 @function_f7cc(i8* %v1_d570)
  %v2_d578 = ptrtoint i16* %stack_var_-2244 to i32
  store i32 %v2_d578, i32* @sl, align 4
  %v2_d57c = ptrtoint i32* %stack_var_-2232 to i32
  store i32 %v2_d57c, i32* @sb, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_d584 = add i32 %v2_d570, 1
  store i32 %v1_d584, i32* %r0.global-to-local, align 4
  %v2_d588 = ptrtoint i32* %stack_var_-2230 to i32
  store i32 %v2_d588, i32* %r2.global-to-local, align 4
  store i32 %v2_d57c, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %v1_d584, i32* %r3.global-to-local, align 4
  %v2_d5c4146 = icmp eq i32 %v1_d584, 0
  store i1 %v2_d5c4146, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v1_d5cc147 = add i32 %v2_d588, -1
  store i32 %v1_d5cc147, i32* %r1.global-to-local, align 4
  %tmp116148 = icmp slt i32 %v1_d584, 1
  br i1 %tmp116148, label %dec_label_pc_d5d4, label %dec_label_pc_d598

dec_label_pc_d598:                                ; preds = %dec_label_pc_d54c, %bb115
  %v0_d598151 = phi i32 [ %v1_d5b8, %bb115 ], [ 0, %dec_label_pc_d54c ]
  %v1_d5a4150.off0 = phi i8 [ %extract.t152, %bb115 ], [ 0, %dec_label_pc_d54c ]
  %v2_d5d8149 = phi i32 [ %v1_d5bc, %bb115 ], [ %v2_d588, %dec_label_pc_d54c ]
  %v1_d598 = load i32, i32* @r5, align 4
  %v2_d598 = add i32 %v1_d598, %v0_d598151
  %v3_d598 = inttoptr i32 %v2_d598 to i8*
  %v4_d598 = load i8, i8* %v3_d598, align 1
  %v6_d598 = zext i8 %v4_d598 to i32
  store i32 %v6_d598, i32* %r3.global-to-local, align 4
  %v2_d59c = icmp eq i8 %v4_d598, 0
  store i1 %v2_d59c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d59c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d598
  %v8_d5a0 = icmp eq i8 %v4_d598, 46
  store i1 %v8_d5a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_d5a0, label %.thread, label %.thread7

.thread:                                          ; preds = %dec_label_pc_d598, %bb
  %v3_d5a4 = load i32, i32* %r6.global-to-local, align 4
  %v4_d5a4 = inttoptr i32 %v3_d5a4 to i8*
  store i8 %v1_d5a4150.off0, i8* %v4_d5a4, align 1
  %v0_d5a8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d5a8.pr, label %.thread9.thread13, label %.thread..thread7_crit_edge

.thread..thread7_crit_edge:                       ; preds = %.thread
  %v1_d5a8.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_d5a8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v1_d5a8.pre to i8
  br label %.thread7

.thread7:                                         ; preds = %.thread..thread7_crit_edge, %bb
  %v3_d5a8 = phi i32 [ %v3_d5a8.pre, %.thread..thread7_crit_edge ], [ %v2_d5d8149, %bb ]
  %v1_d5a8.off0 = phi i8 [ %extract.t, %.thread..thread7_crit_edge ], [ %v4_d598, %bb ]
  %v4_d5a8 = add i32 %v3_d5a8, -1
  %v5_d5a8 = inttoptr i32 %v4_d5a8 to i8*
  store i8 %v1_d5a8.off0, i8* %v5_d5a8, align 1
  %v0_d5ac.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d5ac.pr, label %.thread9, label %.thread12

.thread9.thread13:                                ; preds = %.thread
  %v1_d5ac = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_d5ac, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread9:                                         ; preds = %.thread7
  %v1_d5ac11 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_d5ac11, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread12:                                        ; preds = %.thread7
  %v1_d5b4 = load i32, i32* @lr, align 4
  %v2_d5b4 = urem i32 %v1_d5b4, 256
  store i32 %v2_d5b4, i32* %r4.global-to-local, align 4
  br label %bb115

bb115:                                            ; preds = %.thread9, %.thread9.thread13, %.thread12
  %v0_d5c833 = phi i32 [ 0, %.thread9.thread13 ], [ 0, %.thread9 ], [ %v2_d5b4, %.thread12 ]
  %v0_d5b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_d5b8 = add i32 %v0_d5b8, 1
  store i32 %v1_d5b8, i32* %ip.global-to-local, align 4
  %v0_d5bc = load i32, i32* %r2.global-to-local, align 4
  %v1_d5bc = add i32 %v0_d5bc, 1
  store i32 %v1_d5bc, i32* %r2.global-to-local, align 4
  %v1_d5c0.pre = load i32, i32* %r0.global-to-local, align 4
  %v2_d5c0 = sub i32 %v1_d5c0.pre, %v1_d5b8
  store i32 %v2_d5c0, i32* %r3.global-to-local, align 4
  %v2_d5c4 = icmp eq i32 %v2_d5c0, 0
  store i1 %v2_d5c4, i1* %cpsr_z.global-to-local, align 1
  %v1_d5c8 = add nuw nsw i32 %v0_d5c833, 1
  store i32 %v1_d5c8, i32* @lr, align 4
  store i32 %v0_d5bc, i32* %r1.global-to-local, align 4
  %tmp116 = icmp slt i32 %v2_d5c0, 1
  %extract.t152 = trunc i32 %v0_d5c833 to i8
  br i1 %tmp116, label %dec_label_pc_d5d4, label %dec_label_pc_d598

dec_label_pc_d5d4:                                ; preds = %bb115, %dec_label_pc_d54c
  %v1_d5cc.lcssa = phi i32 [ %v1_d5cc147, %dec_label_pc_d54c ], [ %v0_d5bc, %bb115 ]
  store i32 0, i32* @r4, align 4
  %v4_d5d8 = inttoptr i32 %v1_d5cc.lcssa to i8*
  store i8 0, i8* %v4_d5d8, align 1
  store i32 %v2_d57c, i32* %r0.global-to-local, align 4
  %v1_d5e0 = bitcast i32* %stack_var_-2232 to i8*
  %v2_d5e0 = call i32 @function_f7cc(i8* %v1_d5e0)
  %v2_d5e4 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_d5e4, i32* %r1.global-to-local, align 4
  %v1_d5e8 = load i32, i32* @sb, align 4
  %v2_d5e8 = add i32 %v1_d5e8, %v2_d5e0
  store i32 %v2_d5e8, i32* @r5, align 4
  %v0_d5f0 = load i32, i32* @r4, align 4
  store i32 %v0_d5f0, i32* %stack_var_-68, align 4
  store i32 %v2_d57c, i32* %r0.global-to-local, align 4
  %v2_d600 = call i32 @function_f7cc(i8* %v1_d5e0)
  %v1_d604 = add i32 %v2_d600, 17
  store i32 %v1_d604, i32* %r0.global-to-local, align 4
  %v0_d60c = call i32 @function_d3a8()
  %v1_d60c = sext i32 %v0_d60c to i64
  store i32 -2147450879, i32* %r3.global-to-local, align 4
  %v5_d618 = mul nuw nsw i64 %v1_d60c, 2147516417
  %v6_d618 = udiv i64 %v5_d618, 4294967296
  %v7_d618 = trunc i64 %v6_d618 to i32
  %v8_d618 = trunc i64 %v5_d618 to i32
  store i32 %v8_d618, i32* @lr, align 4
  store i32 %v7_d618, i32* %r2.global-to-local, align 4
  %v5_d61c4 = udiv i64 %v5_d618, 140737488355328
  %v5_d61c = trunc i64 %v5_d61c4 to i32
  %v6_d61c = add i32 %v5_d61c, %v0_d60c
  store i32 16, i32* @r1, align 4
  %v6_d628 = urem i32 %v6_d61c, 65536
  store i32 %v6_d628, i32* %ip.global-to-local, align 4
  %v2_d630 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_d630, i32* @r0, align 4
  %v5_d634 = trunc i32 %v6_d61c to i16
  %v0_d638 = call i32 @function_f860()
  store i32 %v0_d638, i32* %r0.global-to-local, align 4
  store i32 13568, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  %v0_d668 = load i32, i32* @r5, align 4
  %v1_d668 = add i32 %v0_d668, 1
  store i32 %v1_d668, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i16 %v5_d634, i16* %stack_var_-2244, align 2
  %v4_d67c = inttoptr i32 %v1_d668 to i16*
  store i16 256, i16* %v4_d67c, align 2
  %v0_d680 = load i32, i32* %r3.global-to-local, align 4
  %v1_d680 = trunc i32 %v0_d680 to i16
  %v2_d680 = load i32, i32* %r2.global-to-local, align 4
  %v3_d680 = add i32 %v2_d680, 2
  %v4_d680 = inttoptr i32 %v3_d680 to i16*
  store i16 %v1_d680, i16* %v4_d680, align 2
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_d718 = ptrtoint i32* %stack_var_-196 to i32
  %v2_d740 = ptrtoint i32* %stack_var_-40 to i32
  %v2_d76c = ptrtoint i32* %stack_var_-52 to i32
  %v2_d7b0 = ptrtoint i16* %stack_var_-4292 to i32
  %v2_d844 = ptrtoint i32* %stack_var_-4280 to i32
  %v1_d84c = bitcast i32* %stack_var_-4280 to i8*
  %v4_d870 = zext i16 %tmp79 to i32
  %v2_d874 = icmp eq i16 %tmp79, 0
  br label %dec_label_pc_d68c

dec_label_pc_d68c:                                ; preds = %dec_label_pc_d7f8, %dec_label_pc_d5d4
  %v1_d690 = phi i32 [ -1, %dec_label_pc_d5d4 ], [ %v0_d68c.pre, %dec_label_pc_d7f8 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_d5d4 ], [ %v1_d7f8, %dec_label_pc_d7f8 ]
  store i32 %storemerge, i32* @r8, align 4
  %v7_d68c = icmp eq i32 %v1_d690, -1
  store i1 %v7_d68c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d68c, label %bb118, label %bb117

bb117:                                            ; preds = %dec_label_pc_d68c
  store i32 %v1_d690, i32* %r0.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %dec_label_pc_d68c, %bb117
  store i32 54936, i32* @lr, align 4
  %v1_d694 = xor i1 %v7_d68c, true
  call void @__pseudo_cond_branch(i1 %v1_d694, i32 ptrtoint (i32* @global_var_101d8.88 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d6a4 = call i32 @function_109c0(i32 2, i32 2, i32 0)
  store i32 %v3_d6a4, i32* %r0.global-to-local, align 4
  %v7_d6a8 = icmp eq i32 %v3_d6a4, -1
  store i1 %v7_d6a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d6a4, i32* @r6, align 4
  br i1 %v7_d6a8, label %dec_label_pc_d838, label %dec_label_pc_d6b4

dec_label_pc_d6b4:                                ; preds = %bb118
  store i32 %v2_d630, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d6c0 = call i32 @function_107a8(i32 %v3_d6a4, i32 %v2_d630, i32 16)
  store i32 %v3_d6c0, i32* %r0.global-to-local, align 4
  %v7_d6c4 = icmp eq i32 %v3_d6c0, -1
  store i1 %v7_d6c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d6c4, label %dec_label_pc_d800, label %dec_label_pc_d6cc

dec_label_pc_d6cc:                                ; preds = %dec_label_pc_d6b4
  %v0_d6cc = load i32, i32* @r6, align 4
  store i32 %v0_d6cc, i32* %r0.global-to-local, align 4
  store i32 %v2_d578, i32* %r1.global-to-local, align 4
  store i32 %v1_d604, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_d6dc = call i32 @function_10904(i32 %v0_d6cc, i32 %v2_d578, i32 %v1_d604, i32 16384)
  store i32 %v4_d6dc, i32* %r0.global-to-local, align 4
  %v7_d6e0 = icmp eq i32 %v4_d6dc, -1
  store i1 %v7_d6e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d6e0, label %dec_label_pc_d800, label %dec_label_pc_d6e8

dec_label_pc_d6e8:                                ; preds = %dec_label_pc_d6cc
  %v0_d6e8 = load i32, i32* @r6, align 4
  store i32 %v0_d6e8, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_d6f4 = call i32 @function_1000c(i32 3, i32 %v0_d6e8)
  %v0_d6f8 = load i32, i32* @r6, align 4
  store i32 %v0_d6f8, i32* %r1.global-to-local, align 4
  %v1_d6fc = or i32 %v2_d6f4, 2048
  store i32 %v1_d6fc, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_d704 = call i32 @function_1000c(i32 4, i32 %v0_d6f8)
  store i32 %v2_d704, i32* %r0.global-to-local, align 4
  store i32 %v2_d5e4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-196, align 4
  store i32 %v2_d718, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d720

dec_label_pc_d720:                                ; preds = %dec_label_pc_d720, %dec_label_pc_d6e8
  %v1_d724 = phi i32 [ %v1_d728, %dec_label_pc_d720 ], [ 4, %dec_label_pc_d6e8 ]
  store i32 0, i32* @r4, align 4
  %v3_d724 = add i32 %v1_d724, %v2_d718
  %v4_d724 = inttoptr i32 %v3_d724 to i32*
  store i32 0, i32* %v4_d724, align 4
  %v0_d728 = load i32, i32* %r3.global-to-local, align 4
  %v1_d728 = add i32 %v0_d728, 4
  store i32 %v1_d728, i32* %r3.global-to-local, align 4
  %v7_d72c = icmp eq i32 %v1_d728, 128
  br i1 %v7_d72c, label %dec_label_pc_d734, label %dec_label_pc_d720

dec_label_pc_d734:                                ; preds = %dec_label_pc_d720
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_d734 = load i32, i32* @r6, align 4
  %v3_d734 = udiv i32 %v0_d734, 32
  %v3_d73c = mul nuw nsw i32 %v3_d734, 4
  store i32 %v3_d73c, i32* %r3.global-to-local, align 4
  %v2_d744 = add i32 %v3_d73c, %v2_d740
  store i32 %v2_d744, i32* @r5, align 4
  %v1_d748 = add i32 %v2_d744, -156
  %v2_d748 = inttoptr i32 %v1_d748 to i32*
  %v3_d748 = load i32, i32* %v2_d748, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_d750 = urem i32 %v0_d734, 32
  store i32 %v1_d750, i32* @r7, align 4
  %v7_d754 = shl i32 1, %v1_d750
  %v8_d754 = or i32 %v3_d748, %v7_d754
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_d754, i32* %v2_d748, align 4
  %v0_d764 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_d764, i32* %stack_var_-52, align 4
  store i32 %v2_d76c, i32* @lr, align 4
  store i32 %v2_d5e4, i32* @ip, align 4
  %v0_d774 = load i32, i32* @r6, align 4
  %v1_d774 = load i32, i32* %r3.global-to-local, align 4
  %v2_d774 = add i32 %v1_d774, %v0_d774
  store i32 %v2_d774, i32* %r0.global-to-local, align 4
  %v0_d77c = load i32, i32* @r4, align 4
  store i32 %v0_d77c, i32* %r2.global-to-local, align 4
  store i32 %v0_d77c, i32* %r3.global-to-local, align 4
  %v5_d788 = call i32 @function_fefc(i32 %v2_d774, i32 %v2_d718, i32 %v0_d77c, i32 %v0_d77c, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_d788, i32* %r0.global-to-local, align 4
  %v7_d78c = icmp eq i32 %v5_d788, -1
  store i1 %v7_d78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d78c, label %dec_label_pc_d810, label %dec_label_pc_d794

dec_label_pc_d794:                                ; preds = %dec_label_pc_d734
  %v1_d794 = load i32, i32* @r4, align 4
  %v9_d794 = icmp eq i32 %v5_d788, %v1_d794
  store i1 %v9_d794, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d794, label %dec_label_pc_d7f0, label %dec_label_pc_d79c

dec_label_pc_d79c:                                ; preds = %dec_label_pc_d794
  %v0_d79c = load i32, i32* @r5, align 4
  %v1_d79c = add i32 %v0_d79c, -156
  %v2_d79c = inttoptr i32 %v1_d79c to i32*
  %v3_d79c = load i32, i32* %v2_d79c, align 4
  %v1_d7a0 = load i32, i32* @r7, align 4
  %v6_d7a0 = ashr i32 %v3_d79c, %v1_d7a0
  store i32 %v6_d7a0, i32* %r3.global-to-local, align 4
  %v1_d7a4 = urem i32 %v6_d7a0, 2
  %v2_d7a4 = icmp eq i32 %v1_d7a4, 0
  store i1 %v2_d7a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d7a4, label %dec_label_pc_d810, label %dec_label_pc_d7ac

dec_label_pc_d7ac:                                ; preds = %dec_label_pc_d79c
  store i32 %v2_d7b0, i32* @r5, align 4
  store i32 %v2_d7b0, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d7c0 = load i32, i32* @r6, align 4
  store i32 %v0_d7c0, i32* %r0.global-to-local, align 4
  %v6_d7cc = call i32 @function_108c8(i32 %v0_d7c0, i32 %v2_d7b0, i32 2048, i32 16384, i32 %v1_d794, i32 %v1_d794)
  store i32 %v6_d7cc, i32* %r4.global-to-local, align 4
  %v0_d7d4 = load i32, i32* @sb, align 4
  store i32 %v0_d7d4, i32* %r0.global-to-local, align 4
  %v1_d7d8 = inttoptr i32 %v0_d7d4 to i8*
  %v2_d7d8 = call i32 @function_f7cc(i8* %v1_d7d8)
  %v1_d7dc = add i32 %v2_d7d8, 17
  store i32 %v1_d7dc, i32* %r0.global-to-local, align 4
  %v0_d7e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_d7e0 = icmp ult i32 %v0_d7e0, %v1_d7dc
  %v9_d7e0 = icmp eq i32 %v0_d7e0, %v1_d7dc
  store i1 %v9_d7e0, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_d7e0, label %dec_label_pc_d7f0, label %dec_label_pc_d844

dec_label_pc_d7f0:                                ; preds = %dec_label_pc_d7ac, %dec_label_pc_d844, %dec_label_pc_d870, %dec_label_pc_d794, %dec_label_pc_d838
  %v0_d7f0 = load i32, i32* @r8, align 4
  %v7_d7f0 = icmp eq i32 %v0_d7f0, 5
  store i1 %v7_d7f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d7f0, label %dec_label_pc_d810, label %dec_label_pc_d7f8

dec_label_pc_d7f8:                                ; preds = %dec_label_pc_d800, %dec_label_pc_d7f0
  %v0_d7f8 = phi i32 [ %v0_d808, %dec_label_pc_d800 ], [ %v0_d7f0, %dec_label_pc_d7f0 ]
  %v1_d7f8 = add i32 %v0_d7f8, 1
  %v0_d68c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d68c

dec_label_pc_d800:                                ; preds = %dec_label_pc_d6cc, %dec_label_pc_d6b4
  %v0_d800 = phi i32 [ %v4_d6dc, %dec_label_pc_d6cc ], [ %v3_d6c0, %dec_label_pc_d6b4 ]
  %v1_d800 = add i32 %v0_d800, 2
  store i32 %v1_d800, i32* %r0.global-to-local, align 4
  %v1_d804 = call i32 @function_120d0(i32 %v1_d800)
  store i32 %v1_d804, i32* %r0.global-to-local, align 4
  %v0_d808 = load i32, i32* @r8, align 4
  %v7_d808 = icmp eq i32 %v0_d808, 5
  store i1 %v7_d808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d808, label %dec_label_pc_d810, label %dec_label_pc_d7f8

dec_label_pc_d810:                                ; preds = %dec_label_pc_d800, %dec_label_pc_d7f0, %dec_label_pc_d79c, %dec_label_pc_d734, %dec_label_pc_d87c, %dec_label_pc_d888.backedge
  %v0_d810 = load i32, i32* @r6, align 4
  store i32 %v0_d810, i32* %r0.global-to-local, align 4
  %v1_d814 = call i32 @function_101d8(i32 %v0_d810)
  store i32 %v1_d814, i32* %r0.global-to-local, align 4
  %v0_d818 = load i32, i32* @fp, align 4
  %v1_d818 = inttoptr i32 %v0_d818 to i8*
  %v2_d818 = load i8, i8* %v1_d818, align 1
  %v3_d818 = zext i8 %v2_d818 to i32
  store i32 %v3_d818, i32* @r4, align 4
  %v2_d81c = icmp eq i8 %v2_d818, 0
  store i1 %v2_d81c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d81c, label %dec_label_pc_d960, label %dec_label_pc_d824

dec_label_pc_d824:                                ; preds = %dec_label_pc_d810, %dec_label_pc_d960
  %v0_d824 = phi i32 [ %v0_d818, %dec_label_pc_d810 ], [ %v0_d974, %dec_label_pc_d960 ]
  store i32 %v0_d824, i32* %r0.global-to-local, align 4
  store i32 %v3_d54c, i32* @r4, align 4
  store i32 %v9_d54c, i32* @r6, align 4
  store i32 %v12_d54c, i32* @r7, align 4
  store i32 %v15_d54c, i32* @r8, align 4
  store i32 %v18_d54c, i32* @sb, align 4
  store i32 %v21_d54c, i32* @sl, align 4
  store i32 %v24_d54c, i32* @fp, align 4
  store i32 %v27_d54c, i32* @lr, align 4
  ret i32 %v0_d824

dec_label_pc_d838:                                ; preds = %bb118
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_d83c = call i32 @function_120d0(i32 1)
  store i32 %v1_d83c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d7f0

dec_label_pc_d844:                                ; preds = %dec_label_pc_d7ac
  store i32 %v2_d844, i32* @sb, align 4
  store i32 %v2_d844, i32* %r0.global-to-local, align 4
  %v2_d84c = call i32 @function_f7cc(i8* %v1_d84c)
  %v4_d858 = load i16, i16* %stack_var_-4292, align 2
  %v5_d858 = sext i16 %v4_d858 to i32
  store i32 %v5_d858, i32* %r3.global-to-local, align 4
  store i32 %v6_d61c, i32* %r1.global-to-local, align 4
  %v1_d860 = load i32, i32* @sb, align 4
  %v9_d864 = icmp eq i16 %v4_d858, %v5_d634
  store i1 %v9_d864, i1* %cpsr_z.global-to-local, align 1
  %v2_d860 = add i32 %v2_d84c, 5
  %v1_d868 = add i32 %v2_d860, %v1_d860
  store i32 %v1_d868, i32* %r0.global-to-local, align 4
  br i1 %v9_d864, label %dec_label_pc_d870, label %dec_label_pc_d7f0

dec_label_pc_d870:                                ; preds = %dec_label_pc_d844
  store i32 %v4_d870, i32* %r3.global-to-local, align 4
  store i1 %v2_d874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d874, label %dec_label_pc_d7f0, label %dec_label_pc_d87c

dec_label_pc_d87c:                                ; preds = %dec_label_pc_d870
  %div = udiv i16 %tmp79, 256
  %v3_d87c = zext i16 %div to i32
  store i32 %v3_d87c, i32* %r2.global-to-local, align 4
  %v1_d880 = mul nuw nsw i32 %v4_d870, 256
  %v4_d884 = and i32 %v1_d880, 65280
  %v5_d884 = or i32 %v4_d884, %v3_d87c
  %v1_d888134 = add nsw i32 %v5_d884, -1
  %v3_d88c135 = mul i32 %v1_d888134, 65536
  store i32 %v3_d88c135, i32* %r3.global-to-local, align 4
  %v7_d890141 = icmp eq i32 %v3_d88c135, -65536
  store i1 %v7_d890141, i1* %cpsr_z.global-to-local, align 1
  %v3_d894142 = urem i32 %v1_d888134, 65536
  store i32 %v3_d894142, i32* @r8, align 4
  br i1 %v7_d890141, label %dec_label_pc_d810, label %dec_label_pc_d89c

dec_label_pc_d89c:                                ; preds = %dec_label_pc_d87c, %dec_label_pc_d888.backedge
  %v3_d894144 = phi i32 [ %v3_d894, %dec_label_pc_d888.backedge ], [ %v3_d894142, %dec_label_pc_d87c ]
  %v0_d8ec143 = phi i32 [ %storemerge29, %dec_label_pc_d888.backedge ], [ %v1_d868, %dec_label_pc_d87c ]
  store i32 %v0_d8ec143, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* @ip, align 4
  %v1_d8a818 = inttoptr i32 %v0_d8ec143 to i8*
  %v2_d8a819 = load i8, i8* %v1_d8a818, align 1
  %v3_d8a820 = zext i8 %v2_d8a819 to i32
  store i32 %v3_d8a820, i32* %r2.global-to-local, align 4
  %v2_d8ac21 = icmp eq i8 %v2_d8a819, 0
  store i1 %v2_d8ac21, i1* %cpsr_z.global-to-local, align 1
  %v3_d8b022 = mul nuw nsw i32 %v3_d8a820, 256
  store i32 %v3_d8b022, i32* %r1.global-to-local, align 4
  br i1 %v2_d8ac21, label %dec_label_pc_d8e4, label %dec_label_pc_d8b8.preheader

dec_label_pc_d8b8.preheader:                      ; preds = %dec_label_pc_d89c, %dec_label_pc_d8a8.backedge
  %v1_d984 = phi i32 [ %v1_d98450, %dec_label_pc_d8a8.backedge ], [ 1, %dec_label_pc_d89c ]
  %v0_d97c48 = phi i32 [ %v0_d97c, %dec_label_pc_d8a8.backedge ], [ 0, %dec_label_pc_d89c ]
  %v0_d8c446 = phi i32 [ %v3_d8b0, %dec_label_pc_d8a8.backedge ], [ %v3_d8b022, %dec_label_pc_d89c ]
  %v0_d8c044 = phi i32 [ %v1_d980, %dec_label_pc_d8a8.backedge ], [ %v0_d8ec143, %dec_label_pc_d89c ]
  %v0_d8b842 = phi i32 [ %v3_d8a8, %dec_label_pc_d8a8.backedge ], [ %v3_d8a820, %dec_label_pc_d89c ]
  br label %dec_label_pc_d8b8

dec_label_pc_d8b8:                                ; preds = %dec_label_pc_d8b8.preheader, %dec_label_pc_d8c0
  %v0_d97c = phi i32 [ %v0_d97c48, %dec_label_pc_d8b8.preheader ], [ 1, %dec_label_pc_d8c0 ]
  %v0_d8c4 = phi i32 [ %v0_d8c446, %dec_label_pc_d8b8.preheader ], [ %v3_d8dc, %dec_label_pc_d8c0 ]
  %v0_d980 = phi i32 [ %v0_d8c044, %dec_label_pc_d8b8.preheader ], [ %v2_d8cc, %dec_label_pc_d8c0 ]
  %v0_d8b8 = phi i32 [ %v0_d8b842, %dec_label_pc_d8b8.preheader ], [ %v3_d8d0, %dec_label_pc_d8c0 ]
  %v7_d8b8 = icmp eq i32 %v0_d8b8, 191
  store i1 %v7_d8b8, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v0_d8b8, 192
  br i1 %tmp, label %dec_label_pc_d97c, label %dec_label_pc_d8c0

dec_label_pc_d8c0:                                ; preds = %dec_label_pc_d8b8
  %v1_d8c0 = add i32 %v0_d980, 1
  %v2_d8c0 = inttoptr i32 %v1_d8c0 to i8*
  %v3_d8c0 = load i8, i8* %v2_d8c0, align 1
  %v4_d8c0 = zext i8 %v3_d8c0 to i32
  %v2_d8c4 = or i32 %v4_d8c0, -49152
  %v0_d8cc = load i32, i32* @r5, align 4
  %v1_d8c8 = add i32 %v0_d8cc, %v0_d8c4
  %v2_d8cc = add i32 %v1_d8c8, %v2_d8c4
  store i32 %v2_d8cc, i32* %r3.global-to-local, align 4
  %v1_d8d0 = inttoptr i32 %v2_d8cc to i8*
  %v2_d8d0 = load i8, i8* %v1_d8d0, align 1
  %v3_d8d0 = zext i8 %v2_d8d0 to i32
  store i32 %v3_d8d0, i32* %r2.global-to-local, align 4
  %v2_d8d4 = icmp eq i8 %v2_d8d0, 0
  store i1 %v2_d8d4, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_d8dc = mul nuw nsw i32 %v3_d8d0, 256
  store i32 %v3_d8dc, i32* %r1.global-to-local, align 4
  br i1 %v2_d8d4, label %dec_label_pc_d8e4, label %dec_label_pc_d8b8

dec_label_pc_d8e4:                                ; preds = %dec_label_pc_d8a8.backedge, %dec_label_pc_d8c0, %dec_label_pc_d89c
  %v1_d8e8 = phi i32 [ 1, %dec_label_pc_d89c ], [ %v1_d984, %dec_label_pc_d8c0 ], [ %v1_d98450, %dec_label_pc_d8a8.backedge ]
  %v0_d8e4 = phi i32 [ 0, %dec_label_pc_d89c ], [ 1, %dec_label_pc_d8c0 ], [ %v0_d97c, %dec_label_pc_d8a8.backedge ]
  %v7_d8e4 = icmp eq i32 %v0_d8e4, 1
  store i1 %v7_d8e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d8e4, label %bb119, label %bb120

bb119:                                            ; preds = %dec_label_pc_d8e4
  %v2_d8e8 = add i32 %v1_d8e8, 1
  store i32 %v2_d8e8, i32* @ip, align 4
  br label %bb120

bb120:                                            ; preds = %dec_label_pc_d8e4, %bb119
  %v1_d8ec = phi i32 [ %v1_d8e8, %dec_label_pc_d8e4 ], [ %v2_d8e8, %bb119 ]
  %v2_d8ec = add i32 %v1_d8ec, %v0_d8ec143
  store i32 %v2_d8ec, i32* @r4, align 4
  %v3_d8f0 = inttoptr i32 %v2_d8ec to i8*
  %v4_d8f0 = load i8, i8* %v3_d8f0, align 1
  %v6_d8f0 = zext i8 %v4_d8f0 to i32
  store i32 %v6_d8f0, i32* %r3.global-to-local, align 4
  %v1_d8f4 = add i32 %v2_d8ec, 1
  %v2_d8f4 = inttoptr i32 %v1_d8f4 to i8*
  %v3_d8f4 = load i8, i8* %v2_d8f4, align 1
  %v4_d8f4 = zext i8 %v3_d8f4 to i32
  store i32 %v4_d8f4, i32* %r2.global-to-local, align 4
  %v4_d8f8 = mul nuw nsw i32 %v4_d8f4, 256
  %v5_d8f8 = or i32 %v4_d8f8, %v6_d8f0
  store i32 %v5_d8f8, i32* %r3.global-to-local, align 4
  %v7_d8fc = icmp eq i32 %v5_d8f8, 256
  store i1 %v7_d8fc, i1* %cpsr_z.global-to-local, align 1
  %v1_d900 = add i32 %v2_d8ec, 10
  store i32 %v1_d900, i32* @r7, align 4
  br i1 %v7_d8fc, label %dec_label_pc_d99c, label %dec_label_pc_d908

dec_label_pc_d908:                                ; preds = %dec_label_pc_d99c, %bb120
  store i32 %v1_d900, i32* %r3.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_d91424 = inttoptr i32 %v1_d900 to i8*
  %v2_d91425 = load i8, i8* %v1_d91424, align 1
  %v3_d91426 = zext i8 %v2_d91425 to i32
  store i32 %v3_d91426, i32* %r2.global-to-local, align 4
  %v2_d91827 = icmp eq i8 %v2_d91425, 0
  store i1 %v2_d91827, i1* %cpsr_z.global-to-local, align 1
  %v3_d91c28 = mul nuw nsw i32 %v3_d91426, 256
  store i32 %v3_d91c28, i32* %r1.global-to-local, align 4
  br i1 %v2_d91827, label %dec_label_pc_d950, label %dec_label_pc_d924.preheader

dec_label_pc_d924.preheader:                      ; preds = %dec_label_pc_d908, %dec_label_pc_d914.backedge
  %v1_d994 = phi i32 [ %v1_d99465, %dec_label_pc_d914.backedge ], [ 1, %dec_label_pc_d908 ]
  %v0_d98c63 = phi i32 [ %v0_d98c, %dec_label_pc_d914.backedge ], [ 0, %dec_label_pc_d908 ]
  %v0_d93061 = phi i32 [ %v3_d91c, %dec_label_pc_d914.backedge ], [ %v3_d91c28, %dec_label_pc_d908 ]
  %v0_d92c59 = phi i32 [ %v1_d990, %dec_label_pc_d914.backedge ], [ %v1_d900, %dec_label_pc_d908 ]
  %v0_d92457 = phi i32 [ %v3_d914, %dec_label_pc_d914.backedge ], [ %v3_d91426, %dec_label_pc_d908 ]
  br label %dec_label_pc_d924

dec_label_pc_d924:                                ; preds = %dec_label_pc_d924.preheader, %dec_label_pc_d92c
  %v0_d98c = phi i32 [ %v0_d98c63, %dec_label_pc_d924.preheader ], [ 1, %dec_label_pc_d92c ]
  %v0_d930 = phi i32 [ %v0_d93061, %dec_label_pc_d924.preheader ], [ %v3_d948, %dec_label_pc_d92c ]
  %v0_d990 = phi i32 [ %v0_d92c59, %dec_label_pc_d924.preheader ], [ %v2_d938, %dec_label_pc_d92c ]
  %v0_d924 = phi i32 [ %v0_d92457, %dec_label_pc_d924.preheader ], [ %v3_d93c, %dec_label_pc_d92c ]
  %v7_d924 = icmp eq i32 %v0_d924, 191
  store i1 %v7_d924, i1* %cpsr_z.global-to-local, align 1
  %tmp159 = icmp ult i32 %v0_d924, 192
  br i1 %tmp159, label %dec_label_pc_d98c, label %dec_label_pc_d92c

dec_label_pc_d92c:                                ; preds = %dec_label_pc_d924
  %v1_d92c = add i32 %v0_d990, 1
  %v2_d92c = inttoptr i32 %v1_d92c to i8*
  %v3_d92c = load i8, i8* %v2_d92c, align 1
  %v4_d92c = zext i8 %v3_d92c to i32
  %v2_d930 = or i32 %v4_d92c, -49152
  %v0_d938 = load i32, i32* @r5, align 4
  %v1_d934 = add i32 %v0_d938, %v0_d930
  %v2_d938 = add i32 %v1_d934, %v2_d930
  store i32 %v2_d938, i32* %r3.global-to-local, align 4
  %v1_d93c = inttoptr i32 %v2_d938 to i8*
  %v2_d93c = load i8, i8* %v1_d93c, align 1
  %v3_d93c = zext i8 %v2_d93c to i32
  store i32 %v3_d93c, i32* %r2.global-to-local, align 4
  %v2_d940 = icmp eq i8 %v2_d93c, 0
  store i1 %v2_d940, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @ip, align 4
  %v3_d948 = mul nuw nsw i32 %v3_d93c, 256
  store i32 %v3_d948, i32* %r1.global-to-local, align 4
  br i1 %v2_d940, label %dec_label_pc_d950, label %dec_label_pc_d924

dec_label_pc_d950:                                ; preds = %dec_label_pc_d914.backedge, %dec_label_pc_d92c, %dec_label_pc_d908
  %v1_d954 = phi i32 [ 1, %dec_label_pc_d908 ], [ %v1_d994, %dec_label_pc_d92c ], [ %v1_d99465, %dec_label_pc_d914.backedge ]
  %v0_d950 = phi i32 [ 0, %dec_label_pc_d908 ], [ 1, %dec_label_pc_d92c ], [ %v0_d98c, %dec_label_pc_d914.backedge ]
  %v7_d950 = icmp eq i32 %v0_d950, 1
  store i1 %v7_d950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d950, label %bb121, label %bb122

bb121:                                            ; preds = %dec_label_pc_d950
  %v2_d954 = add i32 %v1_d954, 1
  store i32 %v2_d954, i32* %r0.global-to-local, align 4
  br label %bb122

bb122:                                            ; preds = %dec_label_pc_d9b0, %dec_label_pc_d950, %bb121
  %v1_d958 = phi i32 [ %v5_d9c8, %dec_label_pc_d9b0 ], [ %v1_d954, %dec_label_pc_d950 ], [ %v2_d954, %bb121 ]
  %v2_d958 = add i32 %v1_d958, %v1_d900
  br label %dec_label_pc_d888.backedge

dec_label_pc_d888.backedge:                       ; preds = %bb122, %dec_label_pc_d9d4
  %v0_d888.pre = phi i32 [ %v3_d894144, %bb122 ], [ %v0_d888.pre.pre, %dec_label_pc_d9d4 ]
  %storemerge29 = phi i32 [ %v2_d958, %bb122 ], [ %v2_da4c, %dec_label_pc_d9d4 ]
  store i32 %storemerge29, i32* %r0.global-to-local, align 4
  %v1_d888 = add i32 %v0_d888.pre, -1
  %v3_d88c = mul i32 %v1_d888, 65536
  store i32 %v3_d88c, i32* %r3.global-to-local, align 4
  %v7_d890 = icmp eq i32 %v3_d88c, -65536
  store i1 %v7_d890, i1* %cpsr_z.global-to-local, align 1
  %v3_d894 = urem i32 %v1_d888, 65536
  store i32 %v3_d894, i32* @r8, align 4
  br i1 %v7_d890, label %dec_label_pc_d810, label %dec_label_pc_d89c

dec_label_pc_d960:                                ; preds = %dec_label_pc_d810
  %v1_d960 = add i32 %v0_d818, 4
  %v2_d960 = inttoptr i32 %v1_d960 to i32*
  %v3_d960 = load i32, i32* %v2_d960, align 4
  store i32 %v3_d960, i32* %r0.global-to-local, align 4
  %v2_d964 = icmp eq i32 %v3_d960, 0
  store i1 %v2_d964, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_d96c.111 to i32), i32* @lr, align 4
  %v1_d968 = xor i1 %v2_d964, true
  call void @__pseudo_cond_branch(i1 %v1_d968, i32 ptrtoint (i32* @global_var_11c74.16 to i32))
  %v0_d96c = load i32, i32* @fp, align 4
  store i32 %v0_d96c, i32* @r0, align 4
  %v0_d970 = call i32 @function_11c74()
  store i32 %v0_d970, i32* %r0.global-to-local, align 4
  %v0_d974 = load i32, i32* @r4, align 4
  br label %dec_label_pc_d824

dec_label_pc_d97c:                                ; preds = %dec_label_pc_d8b8
  %v2_d97c = icmp eq i32 %v0_d97c, 0
  store i1 %v2_d97c, i1* %cpsr_z.global-to-local, align 1
  %v1_d980 = add i32 %v0_d980, 1
  store i32 %v1_d980, i32* %r3.global-to-local, align 4
  br i1 %v2_d97c, label %bb123, label %dec_label_pc_d8a8.backedge

dec_label_pc_d8a8.backedge:                       ; preds = %dec_label_pc_d97c, %bb123
  %v1_d98450 = phi i32 [ %v1_d984, %dec_label_pc_d97c ], [ %v2_d984, %bb123 ]
  %v1_d8a8 = inttoptr i32 %v1_d980 to i8*
  %v2_d8a8 = load i8, i8* %v1_d8a8, align 1
  %v3_d8a8 = zext i8 %v2_d8a8 to i32
  store i32 %v3_d8a8, i32* %r2.global-to-local, align 4
  %v2_d8ac = icmp eq i8 %v2_d8a8, 0
  store i1 %v2_d8ac, i1* %cpsr_z.global-to-local, align 1
  %v3_d8b0 = mul nuw nsw i32 %v3_d8a8, 256
  store i32 %v3_d8b0, i32* %r1.global-to-local, align 4
  br i1 %v2_d8ac, label %dec_label_pc_d8e4, label %dec_label_pc_d8b8.preheader

bb123:                                            ; preds = %dec_label_pc_d97c
  %v2_d984 = add i32 %v1_d984, 1
  store i32 %v2_d984, i32* @ip, align 4
  br label %dec_label_pc_d8a8.backedge

dec_label_pc_d98c:                                ; preds = %dec_label_pc_d924
  %v2_d98c = icmp eq i32 %v0_d98c, 0
  store i1 %v2_d98c, i1* %cpsr_z.global-to-local, align 1
  %v1_d990 = add i32 %v0_d990, 1
  store i32 %v1_d990, i32* %r3.global-to-local, align 4
  br i1 %v2_d98c, label %bb124, label %dec_label_pc_d914.backedge

dec_label_pc_d914.backedge:                       ; preds = %dec_label_pc_d98c, %bb124
  %v1_d99465 = phi i32 [ %v1_d994, %dec_label_pc_d98c ], [ %v2_d994, %bb124 ]
  %v1_d914 = inttoptr i32 %v1_d990 to i8*
  %v2_d914 = load i8, i8* %v1_d914, align 1
  %v3_d914 = zext i8 %v2_d914 to i32
  store i32 %v3_d914, i32* %r2.global-to-local, align 4
  %v2_d918 = icmp eq i8 %v2_d914, 0
  store i1 %v2_d918, i1* %cpsr_z.global-to-local, align 1
  %v3_d91c = mul nuw nsw i32 %v3_d914, 256
  store i32 %v3_d91c, i32* %r1.global-to-local, align 4
  br i1 %v2_d918, label %dec_label_pc_d950, label %dec_label_pc_d924.preheader

bb124:                                            ; preds = %dec_label_pc_d98c
  %v2_d994 = add i32 %v1_d994, 1
  store i32 %v2_d994, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d914.backedge

dec_label_pc_d99c:                                ; preds = %bb120
  %v1_d99c = add i32 %v2_d8ec, 2
  %v2_d99c = inttoptr i32 %v1_d99c to i8*
  %v3_d99c = load i8, i8* %v2_d99c, align 1
  %v4_d99c = zext i8 %v3_d99c to i32
  store i32 %v4_d99c, i32* %r3.global-to-local, align 4
  %v1_d9a0 = add i32 %v2_d8ec, 3
  %v2_d9a0 = inttoptr i32 %v1_d9a0 to i8*
  %v3_d9a0 = load i8, i8* %v2_d9a0, align 1
  %v4_d9a0 = zext i8 %v3_d9a0 to i32
  store i32 %v4_d9a0, i32* %r2.global-to-local, align 4
  %v4_d9a4 = mul nuw nsw i32 %v4_d9a0, 256
  %v5_d9a4 = or i32 %v4_d9a4, %v4_d99c
  store i32 %v5_d9a4, i32* %r3.global-to-local, align 4
  %v7_d9a8 = icmp eq i32 %v5_d9a4, 256
  store i1 %v7_d9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d9a8, label %dec_label_pc_d9b0, label %dec_label_pc_d908

dec_label_pc_d9b0:                                ; preds = %dec_label_pc_d99c
  %v1_d9b0 = add i32 %v2_d8ec, 9
  %v2_d9b0 = inttoptr i32 %v1_d9b0 to i8*
  %v3_d9b0 = load i8, i8* %v2_d9b0, align 1
  %v4_d9b0 = zext i8 %v3_d9b0 to i32
  store i32 %v4_d9b0, i32* %r2.global-to-local, align 4
  %v1_d9b4 = add i32 %v2_d8ec, 8
  %v2_d9b4 = inttoptr i32 %v1_d9b4 to i8*
  %v3_d9b4 = load i8, i8* %v2_d9b4, align 1
  %v4_d9b4 = zext i8 %v3_d9b4 to i32
  %v4_d9b8 = mul nuw nsw i32 %v4_d9b0, 256
  %v5_d9b8 = or i32 %v4_d9b4, %v4_d9b8
  %v3_d9bc = mul i32 %v5_d9b8, 65536
  store i32 %v3_d9bc, i32* %r3.global-to-local, align 4
  %v3_d9c0 = mul nuw nsw i32 %v4_d9b4, 256
  store i32 %v3_d9c0, i32* %r2.global-to-local, align 4
  %v5_d9c8 = or i32 %v3_d9c0, %v4_d9b0
  store i32 %v5_d9c8, i32* %r0.global-to-local, align 4
  %v7_d9cc = icmp eq i32 %v5_d9c8, 4
  store i1 %v7_d9cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d9cc, label %dec_label_pc_d9d4, label %bb122

dec_label_pc_d9d4:                                ; preds = %dec_label_pc_d9b0
  %v2_d9d4 = inttoptr i32 %v1_d900 to i8*
  %v3_d9d4 = load i8, i8* %v2_d9d4, align 1
  %v4_d9d4 = zext i8 %v3_d9d4 to i32
  store i32 %v4_d9d4, i32* %r3.global-to-local, align 4
  store i32 %v2_d5e4, i32* %r2.global-to-local, align 4
  %v1_d9e0 = add i32 %v2_d8ec, 11
  %v2_d9e0 = inttoptr i32 %v1_d9e0 to i8*
  %v3_d9e0 = load i8, i8* %v2_d9e0, align 1
  %v4_d9e0 = zext i8 %v3_d9e0 to i32
  store i32 %v4_d9e0, i32* %r2.global-to-local, align 4
  store i32 %v2_d5e4, i32* %r3.global-to-local, align 4
  %v1_d9ec = add i32 %v2_d8ec, 12
  %v2_d9ec = inttoptr i32 %v1_d9ec to i8*
  %v3_d9ec = load i8, i8* %v2_d9ec, align 1
  %v4_d9ec = zext i8 %v3_d9ec to i32
  store i32 %v4_d9ec, i32* %r3.global-to-local, align 4
  store i32 %v2_d5e4, i32* @ip, align 4
  %v1_d9f8 = add i32 %v2_d8ec, 13
  %v2_d9f8 = inttoptr i32 %v1_d9f8 to i8*
  %v3_d9f8 = load i8, i8* %v2_d9f8, align 1
  %v4_d9f8 = zext i8 %v3_d9f8 to i32
  store i32 %v4_d9f8, i32* %r2.global-to-local, align 4
  %v0_da00 = load i32, i32* @fp, align 4
  %v1_da00 = inttoptr i32 %v0_da00 to i8*
  %v2_da00 = load i8, i8* %v1_da00, align 1
  %v3_da00 = zext i8 %v2_da00 to i32
  %v1_da04 = mul nuw nsw i32 %v3_da00, 4
  %v3_da08 = add nuw nsw i32 %v1_da04, 4
  store i32 %v3_da08, i32* %r1.global-to-local, align 4
  %v1_da0c = add i32 %v0_da00, 4
  %v2_da0c = inttoptr i32 %v1_da0c to i32*
  %v3_da0c = load i32, i32* %v2_da0c, align 4
  store i32 %v3_da0c, i32* %r0.global-to-local, align 4
  %v3_da10 = sext i8 %v3_d9f8 to i32
  %v5_da10 = sext i8 %v3_d9ec to i32
  %v10_da10 = inttoptr i32 %v3_da0c to i32*
  %v11_da10 = call i32 @function_1165c(i32* %v10_da10, i32 %v3_da08, i32 %v3_da10, i32 %v5_da10)
  store i32 %v11_da10, i32* %r0.global-to-local, align 4
  %v0_da14 = load i32, i32* @fp, align 4
  %v1_da14 = inttoptr i32 %v0_da14 to i8*
  %v2_da14 = load i8, i8* %v1_da14, align 1
  %v3_da14 = zext i8 %v2_da14 to i32
  store i32 %v3_da14, i32* %r2.global-to-local, align 4
  %v4_da1c = sext i8 %v3_d9d4 to i32
  store i32 %v4_da1c, i32* %r3.global-to-local, align 4
  %v1_da20 = add nuw nsw i32 %v3_da14, 1
  store i32 %v1_da20, i32* %r1.global-to-local, align 4
  %v5_da24 = mul nuw nsw i32 %v3_da14, 4
  %v6_da24 = add i32 %v5_da24, %v11_da10
  %v7_da24 = inttoptr i32 %v6_da24 to i32*
  store i32 %v4_da1c, i32* %v7_da24, align 4
  %v1_da28 = load i32, i32* @fp, align 4
  %v2_da28 = add i32 %v1_da28, 4
  %v3_da28 = inttoptr i32 %v2_da28 to i32*
  store i32 %v11_da10, i32* %v3_da28, align 4
  %v0_da2c = load i32, i32* %r1.global-to-local, align 4
  %v1_da2c = trunc i32 %v0_da2c to i8
  %v2_da2c = load i32, i32* @fp, align 4
  %v3_da2c = inttoptr i32 %v2_da2c to i8*
  store i8 %v1_da2c, i8* %v3_da2c, align 1
  %v0_da30 = load i32, i32* @r4, align 4
  %v1_da30 = add i32 %v0_da30, 9
  %v2_da30 = inttoptr i32 %v1_da30 to i8*
  %v3_da30 = load i8, i8* %v2_da30, align 1
  %v4_da30 = zext i8 %v3_da30 to i32
  store i32 %v4_da30, i32* %r3.global-to-local, align 4
  %v1_da34 = add i32 %v0_da30, 8
  %v2_da34 = inttoptr i32 %v1_da34 to i8*
  %v3_da34 = load i8, i8* %v2_da34, align 1
  %v4_da34 = zext i8 %v3_da34 to i32
  %v4_da38 = mul nuw nsw i32 %v4_da30, 256
  %v5_da38 = or i32 %v4_da34, %v4_da38
  %v3_da3c = mul i32 %v5_da38, 65536
  store i32 %v3_da3c, i32* %r2.global-to-local, align 4
  %v3_da40 = mul nuw nsw i32 %v4_da34, 256
  store i32 %v3_da40, i32* %r3.global-to-local, align 4
  %v5_da48 = or i32 %v3_da40, %v4_da30
  store i32 %v5_da48, i32* %r0.global-to-local, align 4
  %v0_da4c = load i32, i32* @r7, align 4
  %v2_da4c = add i32 %v0_da4c, %v5_da48
  %v0_d888.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d888.backedge

; uselistorder directives
  uselistorder i32 %v3_da40, { 1, 0 }
  uselistorder i32 %v4_da30, { 1, 0, 2 }
  uselistorder i32 %v11_da10, { 1, 0, 2 }
  uselistorder i32 %v3_da08, { 1, 0 }
  uselistorder i32 %v5_d9c8, { 1, 2, 0 }
  uselistorder i32 %v3_d9c0, { 1, 0 }
  uselistorder i32 %v4_d9b0, { 1, 0, 2 }
  uselistorder i32 %v2_d994, { 1, 0 }
  uselistorder i32 %v3_d914, { 0, 2, 1 }
  uselistorder i32 %v1_d99465, { 1, 0 }
  uselistorder i32 %v1_d990, { 1, 2, 0 }
  uselistorder i32 %v2_d984, { 1, 0 }
  uselistorder i32 %v3_d8a8, { 0, 2, 1 }
  uselistorder i32 %v1_d98450, { 1, 0 }
  uselistorder i32 %v1_d980, { 1, 2, 0 }
  uselistorder i1 %v7_d890, { 1, 0 }
  uselistorder i32 %v1_d888, { 1, 0 }
  uselistorder i32 %storemerge29, { 1, 0 }
  uselistorder i32 %v3_d93c, { 0, 2, 1 }
  uselistorder i32 %v2_d938, { 1, 2, 0 }
  uselistorder i32 %v0_d98c, { 2, 0, 1 }
  uselistorder i32 %v1_d994, { 1, 2, 0 }
  uselistorder i32 %v3_d91c28, { 1, 0 }
  uselistorder i32 %v3_d91426, { 1, 0, 2 }
  uselistorder i32 %v1_d900, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v2_d8ec, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_d8d0, { 0, 2, 1 }
  uselistorder i32 %v2_d8cc, { 1, 2, 0 }
  uselistorder i32 %v0_d97c, { 2, 0, 1 }
  uselistorder i32 %v1_d984, { 1, 2, 0 }
  uselistorder i32 %v3_d8b022, { 1, 0 }
  uselistorder i32 %v3_d8a820, { 1, 0, 2 }
  uselistorder i32 %v0_d8ec143, { 3, 0, 1, 2 }
  uselistorder i32 %v3_d894142, { 1, 0 }
  uselistorder i1 %v7_d890141, { 1, 0 }
  uselistorder i32 %v1_d888134, { 1, 0 }
  uselistorder i1 %v9_d864, { 1, 0 }
  uselistorder i32 %v0_d824, { 1, 0 }
  uselistorder i32 %v0_d818, { 1, 0, 2 }
  uselistorder i32 %v0_d808, { 1, 0 }
  uselistorder i32 %v0_d7e0, { 1, 0 }
  uselistorder i32 %v1_d794, { 1, 0, 2 }
  uselistorder i1 %v7_d78c, { 1, 0 }
  uselistorder i32 %v5_d788, { 1, 0, 2 }
  uselistorder i32 %v1_d750, { 1, 0 }
  uselistorder i32 %v3_d73c, { 1, 0 }
  uselistorder i32 %v0_d734, { 1, 0 }
  uselistorder i32 %v1_d728, { 1, 2, 0 }
  uselistorder i1 %v7_d6e0, { 1, 0 }
  uselistorder i32 %v4_d6dc, { 1, 0, 2 }
  uselistorder i1 %v7_d6c4, { 1, 0 }
  uselistorder i32 %v3_d6c0, { 1, 0, 2 }
  uselistorder i1 %v7_d6a8, { 1, 0 }
  uselistorder i32 %v3_d6a4, { 2, 1, 0, 3 }
  uselistorder i1 %v7_d68c, { 2, 1, 0 }
  uselistorder i32 %v1_d690, { 1, 0 }
  uselistorder i32 %v2_d718, { 1, 0, 2 }
  uselistorder i16 %v5_d634, { 1, 0 }
  uselistorder i32 %v2_d630, { 1, 0, 2 }
  uselistorder i32 %v6_d61c, { 1, 2, 0 }
  uselistorder i64 %v5_d618, { 0, 2, 1 }
  uselistorder i32 %v1_d604, { 1, 0, 2 }
  uselistorder i32 %v1_d5bc, { 1, 0 }
  uselistorder i32 %v1_d5b8, { 1, 2, 0 }
  uselistorder i32 %v2_d5b4, { 1, 0 }
  uselistorder i1 %v8_d5a0, { 1, 0 }
  uselistorder i32 %v2_d578, { 1, 0, 2 }
  uselistorder i16* %stack_var_-2244, { 1, 0 }
  uselistorder i32* %stack_var_-68, { 0, 2, 1 }
  uselistorder i16* %stack_var_-4292, { 1, 0 }
  uselistorder i16 %tmp79, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 11, 14, 12, 13, 15, 17, 35, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 32, 33, 36 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 12, 8, 29, 10, 11, 28, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 4, 6, 3, 20, 5, 19, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 21, 23, 18 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 11, 6, 8, 7, 9, 10, 12, 15, 13, 14, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 33, 32, 31, 34, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 8, 2, 13, 3, 4, 14, 5, 6, 7, 34, 9, 10, 11, 12, 33, 36, 15, 16, 17, 18, 19, 20, 21, 22, 23, 35, 24, 25, 26, 27, 32, 29, 30, 28, 31, 37 }
  uselistorder i32 (i32)* @function_120d0, { 10, 9, 8, 7, 6, 0, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_d914.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d8a8.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d888.backedge, { 1, 0 }
  uselistorder label %bb122, { 0, 2, 1 }
  uselistorder label %dec_label_pc_d924, { 1, 0 }
  uselistorder label %dec_label_pc_d924.preheader, { 1, 0 }
  uselistorder label %bb120, { 1, 0 }
  uselistorder label %dec_label_pc_d8b8, { 1, 0 }
  uselistorder label %dec_label_pc_d8b8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d89c, { 1, 0 }
  uselistorder label %dec_label_pc_d824, { 1, 0 }
  uselistorder label %dec_label_pc_d810, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_d7f0, { 2, 1, 4, 0, 3 }
  uselistorder label %bb118, { 1, 0 }
  uselistorder label %bb115, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d598, { 1, 0 }
}

define i32 @function_da54(i32 %arg1) local_unnamed_addr {
dec_label_pc_da54:
  %v2_da60 = load i32, i32* @global_var_1fbf0.113, align 4
  %v2_da68 = call i32 @function_ffa4(i32 %v2_da60, i32 9)
  ret i32 %v2_da68
}

define i32 @function_da7c() local_unnamed_addr {
dec_label_pc_da7c:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_da7c = load i32, i32* @r4, align 4
  store i32 %v3_da7c, i32* %stack_var_-16, align 4
  %v12_da7c = load i32, i32* @lr, align 4
  %v0_da80 = load i32, i32* @r0, align 4
  store i32 %v0_da80, i32* %r5.global-to-local, align 4
  %v1_da84 = add i32 %v0_da80, 4
  %v2_da84 = inttoptr i32 %v1_da84 to i32*
  %v3_da84 = load i32, i32* %v2_da84, align 4
  store i32 %v3_da84, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 55976, i32* @lr, align 4
  %v1_daa4 = icmp ne i32 %v3_da84, -1
  call void @__pseudo_cond_branch(i1 %v1_daa4, i32 ptrtoint (i32* @global_var_101d8.88 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_dab4 = call i32 @function_109c0(i32 2, i32 1, i32 0)
  store i32 %v3_dab4, i32* %r0.global-to-local, align 4
  %v7_dab8 = icmp eq i32 %v3_dab4, -1
  %v1_dabc = load i32, i32* %r5.global-to-local, align 4
  %v2_dabc = add i32 %v1_dabc, 4
  %v3_dabc = inttoptr i32 %v2_dabc to i32*
  store i32 %v3_dab4, i32* %v3_dabc, align 4
  br i1 %v7_dab8, label %dec_label_pc_da7c.dec_label_pc_db34_crit_edge, label %dec_label_pc_dac4

dec_label_pc_da7c.dec_label_pc_db34_crit_edge:    ; preds = %dec_label_pc_da7c
  %v1_db3c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_db34

dec_label_pc_dac4:                                ; preds = %dec_label_pc_da7c
  %v2_da88 = ptrtoint i32* %stack_var_-32 to i32
  %v0_dac4 = load i32, i32* %r5.global-to-local, align 4
  %v1_dac4 = add i32 %v0_dac4, 28
  store i32 %v1_dac4, i32* @r0, align 4
  %v0_dac8 = load i32, i32* %r6.global-to-local, align 4
  %v2_dac8 = add i32 %v0_dac4, 24
  %v3_dac8 = inttoptr i32 %v2_dac8 to i32*
  store i32 %v0_dac8, i32* %v3_dac8, align 4
  store i32 256, i32* @r1, align 4
  %v0_dad0 = call i32 @function_f860()
  store i32 %v0_dad0, i32* %r0.global-to-local, align 4
  %v0_dad4 = load i32, i32* %r5.global-to-local, align 4
  %v1_dad4 = add i32 %v0_dad4, 4
  %v2_dad4 = inttoptr i32 %v1_dad4 to i32*
  %v3_dad4 = load i32, i32* %v2_dad4, align 4
  store i32 %v3_dad4, i32* %r4.global-to-local, align 4
  %v0_dad8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_dad8, i32* %r2.global-to-local, align 4
  store i32 %v3_dad4, i32* %r0.global-to-local, align 4
  %v2_dae4 = call i32 @function_1000c(i32 %v3_dad4, i32 3)
  %v1_daec = or i32 %v2_dae4, 2048
  store i32 %v1_daec, i32* %r2.global-to-local, align 4
  %v0_daf0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_daf0, i32* %r0.global-to-local, align 4
  %v2_daf4 = call i32 @function_1000c(i32 %v0_daf0, i32 4)
  store i32 %v2_daf4, i32* %r0.global-to-local, align 4
  %v2_dafc = load i32, i32* @global_var_1db9c.115, align 4
  store i32 %v2_dafc, i32* %r2.global-to-local, align 4
  %v1_db04 = load i32, i32* %r5.global-to-local, align 4
  %v2_db04 = add i32 %v1_db04, 12
  %v3_db04 = inttoptr i32 %v2_db04 to i32*
  store i32 1, i32* %v3_db04, align 4
  store i32 2, i32* @r3, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_db10 = load i32, i32* %r2.global-to-local, align 4
  %v1_db10 = load i32, i32* %r5.global-to-local, align 4
  %v2_db10 = add i32 %v1_db10, 8
  %v3_db10 = inttoptr i32 %v2_db10 to i32*
  store i32 %v0_db10, i32* %v3_db10, align 4
  %v0_db14 = load i32, i32* %r5.global-to-local, align 4
  %v1_db14 = add i32 %v0_db14, 16
  %v2_db14 = inttoptr i32 %v1_db14 to i32*
  %v3_db14 = load i32, i32* %v2_db14, align 4
  store i32 %v3_db14, i32* @ip, align 4
  %v1_db18 = add i32 %v0_db14, 4
  %v2_db18 = inttoptr i32 %v1_db18 to i32*
  %v3_db18 = load i32, i32* %v2_db18, align 4
  store i32 %v3_db18, i32* %r0.global-to-local, align 4
  %v1_db1c = add i32 %v0_db14, 20
  %v2_db1c = inttoptr i32 %v1_db1c to i16*
  %v3_db1c = load i16, i16* %v2_db1c, align 2
  %v4_db1c = zext i16 %v3_db1c to i32
  store i32 %v4_db1c, i32* %r5.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_db30 = call i32 @function_107a8(i32 %v3_db18, i32 %v2_da88, i32 16)
  store i32 %v3_db30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_db34

dec_label_pc_db34:                                ; preds = %dec_label_pc_da7c.dec_label_pc_db34_crit_edge, %dec_label_pc_dac4
  %v1_db3c = phi i32 [ %v1_db3c.pre, %dec_label_pc_da7c.dec_label_pc_db34_crit_edge ], [ %v3_db30, %dec_label_pc_dac4 ]
  %v2_db38 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_db38, i32* @r4, align 4
  store i32 %v12_da7c, i32* @lr, align 4
  ret i32 %v1_db3c

; uselistorder directives
  uselistorder i32 %v3_dab4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @function_f860, { 5, 6, 2, 1, 0, 4, 3 }
  uselistorder label %dec_label_pc_db34, { 1, 0 }
}

define i32 @function_db44(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_db44:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_db44 = load i32, i32* @r4, align 4
  %v6_db44 = load i32, i32* @r5, align 4
  %v9_db44 = load i32, i32* @r6, align 4
  %v12_db44 = load i32, i32* @r7, align 4
  %v15_db44 = load i32, i32* @r8, align 4
  %v18_db44 = load i32, i32* @sb, align 4
  %v21_db44 = load i32, i32* @sl, align 4
  %v24_db44 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1db68.117 to i32), i32* @fp, align 4
  %v2_db4c = load i32, i32* @global_var_1db68.117, align 4
  store i32 ptrtoint (i32* @global_var_1db94.119 to i32), i32* @sl, align 4
  %v1_db58 = add i32 %v2_db4c, 1
  store i32 %v1_db58, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_db64 = load i32, i32* @global_var_1db94.119, align 4
  store i32 %v2_db64, i32* %r0.global-to-local, align 4
  %v3_db68 = mul i32 %v1_db58, 16
  store i32 %v3_db68, i32* %r1.global-to-local, align 4
  %v4_db70 = inttoptr i32 %v2_db64 to i32*
  %v5_db70 = call i32 @function_1165c(i32* %v4_db70, i32 %v3_db68, i32 %arg3, i32 %v1_db58)
  %v2_db74 = load i32, i32* @global_var_1db68.117, align 4
  store i32 %v2_db74, i32* %r2.global-to-local, align 4
  store i32 %v5_db70, i32* @r8, align 4
  %v0_db7c = load i32, i32* @r5, align 4
  store i32 %v0_db7c, i32* %r0.global-to-local, align 4
  %v1_db84 = load i32, i32* @sl, align 4
  %v2_db84 = inttoptr i32 %v1_db84 to i32*
  store i32 %v5_db70, i32* %v2_db84, align 4
  %v1_db88 = inttoptr i32 %v0_db7c to i8*
  %v2_db88 = call i32 @function_f7cc(i8* %v1_db88)
  %sext = mul i32 %v2_db88, 16777216
  %v1_db8c = sdiv i32 %sext, 16777216
  %v2_db8c = add nsw i32 %v1_db8c, 1
  store i32 %v2_db8c, i32* @r4, align 4
  store i32 %v1_db8c, i32* @r7, align 4
  store i32 %v2_db8c, i32* @r0, align 4
  %v0_db98 = call i32 @function_10c08()
  store i32 %v0_db98, i32* %r0.global-to-local, align 4
  %v0_db9c = load i32, i32* @r5, align 4
  store i32 %v0_db9c, i32* %r1.global-to-local, align 4
  %v0_dba0 = load i32, i32* @r4, align 4
  store i32 %v0_dba0, i32* %r2.global-to-local, align 4
  store i32 %v0_db98, i32* %r6.global-to-local, align 4
  %v3_dba8 = call i32 @function_f83c(i32 %v0_db98, i32 %v0_db9c, i32 %v0_dba0)
  store i32 %v3_dba8, i32* %r0.global-to-local, align 4
  %v0_dbac = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_dbac, 1
  %extract.t6 = trunc i32 %v0_dbac to i8
  br i1 %tmp22, label %dec_label_pc_dbd0, label %dec_label_pc_dbb4

dec_label_pc_dbb4:                                ; preds = %dec_label_pc_db44
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dbb8

dec_label_pc_dbb8:                                ; preds = %dec_label_pc_dbb8, %dec_label_pc_dbb4
  %v2_dbc0 = phi i32 [ %v1_dbc4, %dec_label_pc_dbb8 ], [ 0, %dec_label_pc_dbb4 ]
  %v1_dbb8 = load i32, i32* %r6.global-to-local, align 4
  %v2_dbb8 = add i32 %v1_dbb8, %v2_dbc0
  %v3_dbb8 = inttoptr i32 %v2_dbb8 to i8*
  %v4_dbb8 = load i8, i8* %v3_dbb8, align 1
  %v6_dbb8 = zext i8 %v4_dbb8 to i32
  %v1_dbbc = xor i32 %v6_dbb8, 69
  store i32 %v1_dbbc, i32* %r3.global-to-local, align 4
  %v1_dbc0 = trunc i32 %v1_dbbc to i8
  store i8 %v1_dbc0, i8* %v3_dbb8, align 1
  %v0_dbc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_dbc4 = add i32 %v0_dbc4, 1
  store i32 %v1_dbc4, i32* %r2.global-to-local, align 4
  %v1_dbc8 = load i32, i32* @r7, align 4
  %v9_dbc8 = icmp eq i32 %v1_dbc4, %v1_dbc8
  br i1 %v9_dbc8, label %dec_label_pc_dbd0.loopexit, label %dec_label_pc_dbb8

dec_label_pc_dbd0.loopexit:                       ; preds = %dec_label_pc_dbb8
  %extract.t = trunc i32 %v1_dbc4 to i8
  br label %dec_label_pc_dbd0

dec_label_pc_dbd0:                                ; preds = %dec_label_pc_dbd0.loopexit, %dec_label_pc_db44
  %v0_dbe0.off0 = phi i8 [ %extract.t, %dec_label_pc_dbd0.loopexit ], [ %extract.t6, %dec_label_pc_db44 ]
  %v2_dbd0 = load i32, i32* @global_var_1db68.117, align 4
  %v2_dbd4 = load i32, i32* @global_var_1db94.119, align 4
  %v3_dbd8 = mul i32 %v2_dbd0, 16
  store i32 %v3_dbd8, i32* @sb, align 4
  %v2_dbdc = add i32 %v2_dbd4, %v3_dbd8
  store i32 %v2_dbdc, i32* %r2.global-to-local, align 4
  %v3_dbe0 = add i32 %v2_dbdc, 12
  %v4_dbe0 = inttoptr i32 %v3_dbe0 to i8*
  store i8 %v0_dbe0.off0, i8* %v4_dbe0, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_db74, i32* %r3.global-to-local, align 4
  %v0_dbec = load i32, i32* %r6.global-to-local, align 4
  %v1_dbec = load i32, i32* @r8, align 4
  %v5_dbec = mul i32 %v2_db74, 16
  %v6_dbec = add i32 %v1_dbec, %v5_dbec
  %v7_dbec = inttoptr i32 %v6_dbec to i32*
  store i32 %v0_dbec, i32* %v7_dbec, align 4
  %v2_dbf0 = load i32, i32* @global_var_1db94.119, align 4
  store i32 %v2_dbf0, i32* @r7, align 4
  %v1_dbf4 = inttoptr i32 %arg2 to i8*
  %v2_dbf4 = call i32 @function_f7cc(i8* %v1_dbf4)
  %sext1 = mul i32 %v2_dbf4, 16777216
  %v1_dbf8 = sdiv i32 %sext1, 16777216
  %v2_dbf8 = add nsw i32 %v1_dbf8, 1
  store i32 %v2_dbf8, i32* @r4, align 4
  store i32 %v1_dbf8, i32* @r6, align 4
  store i32 %v2_dbf8, i32* @r0, align 4
  %v0_dc04 = call i32 @function_10c08()
  store i32 %v0_dc04, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_dc0c = load i32, i32* @r4, align 4
  store i32 %v0_dc0c, i32* %r2.global-to-local, align 4
  store i32 %v0_dc04, i32* %r5.global-to-local, align 4
  %v3_dc14 = call i32 @function_f83c(i32 %v0_dc04, i32 %arg2, i32 %v0_dc0c)
  store i32 %v3_dc14, i32* %r0.global-to-local, align 4
  %v0_dc18 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_dc18, 1
  %extract.t8 = trunc i32 %v0_dc18 to i8
  br i1 %tmp23, label %dec_label_pc_dc3c, label %dec_label_pc_dc20

dec_label_pc_dc20:                                ; preds = %dec_label_pc_dbd0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_dc24

dec_label_pc_dc24:                                ; preds = %dec_label_pc_dc24, %dec_label_pc_dc20
  %v2_dc2c = phi i32 [ %v1_dc30, %dec_label_pc_dc24 ], [ 0, %dec_label_pc_dc20 ]
  %v1_dc24 = load i32, i32* %r5.global-to-local, align 4
  %v2_dc24 = add i32 %v1_dc24, %v2_dc2c
  %v3_dc24 = inttoptr i32 %v2_dc24 to i8*
  %v4_dc24 = load i8, i8* %v3_dc24, align 1
  %v6_dc24 = zext i8 %v4_dc24 to i32
  %v1_dc28 = xor i32 %v6_dc24, 69
  store i32 %v1_dc28, i32* %r3.global-to-local, align 4
  %v1_dc2c = trunc i32 %v1_dc28 to i8
  store i8 %v1_dc2c, i8* %v3_dc24, align 1
  %v0_dc30 = load i32, i32* %r2.global-to-local, align 4
  %v1_dc30 = add i32 %v0_dc30, 1
  store i32 %v1_dc30, i32* %r2.global-to-local, align 4
  %v1_dc34 = load i32, i32* @r6, align 4
  %v9_dc34 = icmp eq i32 %v1_dc30, %v1_dc34
  br i1 %v9_dc34, label %dec_label_pc_dc3c.loopexit, label %dec_label_pc_dc24

dec_label_pc_dc3c.loopexit:                       ; preds = %dec_label_pc_dc24
  %extract.t7 = trunc i32 %v1_dc30 to i8
  br label %dec_label_pc_dc3c

dec_label_pc_dc3c:                                ; preds = %dec_label_pc_dc3c.loopexit, %dec_label_pc_dbd0
  %v0_dc4c.off0 = phi i8 [ %extract.t7, %dec_label_pc_dc3c.loopexit ], [ %extract.t8, %dec_label_pc_dbd0 ]
  %v2_dc3c = load i32, i32* @global_var_1db68.117, align 4
  store i32 %v2_dc3c, i32* %r0.global-to-local, align 4
  %v2_dc40 = load i32, i32* @global_var_1db94.119, align 4
  %v3_dc44 = mul i32 %v2_dc3c, 16
  store i32 %v3_dc44, i32* %r1.global-to-local, align 4
  %v2_dc48 = or i32 %v3_dc44, 13
  %v3_dc4c = add i32 %v2_dc48, %v2_dc40
  %v4_dc4c = inttoptr i32 %v3_dc4c to i8*
  store i8 %v0_dc4c.off0, i8* %v4_dc4c, align 1
  store i32 ptrtoint (i16** @global_var_1db98.121 to i32), i32* %r4.global-to-local, align 4
  %v2_dc58 = load i16, i16* bitcast (i16** @global_var_1db98.121 to i16*), align 4
  %v3_dc58 = zext i16 %v2_dc58 to i32
  store i32 %v3_dc58, i32* %lr.global-to-local, align 4
  %v2_dc60 = load i32, i32* @global_var_1db94.119, align 4
  store i32 %v2_dc60, i32* %r2.global-to-local, align 4
  %v0_dc68 = load i32, i32* %r1.global-to-local, align 4
  %v2_dc68 = add i32 %v0_dc68, %v2_dc60
  store i32 %v2_dc68, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1db98.121 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_dc70 = load i32, i32* @sb, align 4
  %v1_dc70 = load i32, i32* @r7, align 4
  %v2_dc70 = add i32 %v1_dc70, %v0_dc70
  store i32 %v2_dc70, i32* %ip.global-to-local, align 4
  %v0_dc74 = load i32, i32* %r0.global-to-local, align 4
  %v1_dc74 = add i32 %v0_dc74, 1
  store i32 %v1_dc74, i32* %r0.global-to-local, align 4
  %v3_dc78 = add i32 %v2_dc68, 10
  %v4_dc78 = inttoptr i32 %v3_dc78 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1db98.121 to i32), i32 16), i32 16) to i16), i16* %v4_dc78, align 2
  %v0_dc7c = load i32, i32* %lr.global-to-local, align 4
  %v1_dc7c = trunc i32 %v0_dc7c to i16
  %v2_dc7c = load i32, i32* %r1.global-to-local, align 4
  %v3_dc7c = add i32 %v2_dc7c, 8
  %v4_dc7c = inttoptr i32 %v3_dc7c to i16*
  store i16 %v1_dc7c, i16* %v4_dc7c, align 2
  %v0_dc80 = load i32, i32* %r5.global-to-local, align 4
  %v1_dc80 = load i32, i32* %ip.global-to-local, align 4
  %v2_dc80 = add i32 %v1_dc80, 4
  %v3_dc80 = inttoptr i32 %v2_dc80 to i32*
  store i32 %v0_dc80, i32* %v3_dc80, align 4
  %v1_dc84 = load i32, i32* @fp, align 4
  %v2_dc84 = inttoptr i32 %v1_dc84 to i32*
  store i32 %v1_dc74, i32* %v2_dc84, align 4
  %v0_dc88 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc88 = trunc i32 %v0_dc88 to i16
  %v2_dc88 = load i32, i32* %r4.global-to-local, align 4
  %v3_dc88 = inttoptr i32 %v2_dc88 to i16*
  store i16 %v1_dc88, i16* %v3_dc88, align 2
  store i32 %v3_db44, i32* @r4, align 4
  store i32 %v6_db44, i32* @r5, align 4
  store i32 %v9_db44, i32* @r6, align 4
  store i32 %v12_db44, i32* @r7, align 4
  store i32 %v15_db44, i32* @r8, align 4
  store i32 %v18_db44, i32* @sb, align 4
  store i32 %v21_db44, i32* @sl, align 4
  store i32 %v24_db44, i32* @fp, align 4
  ret i32 %v1_dc74

; uselistorder directives
  uselistorder i32 %v3_dc44, { 1, 0 }
  uselistorder i32 %v1_dc30, { 0, 2, 3, 1 }
  uselistorder i32 %v0_dc04, { 1, 0, 2 }
  uselistorder i32 %v3_dbd8, { 1, 0 }
  uselistorder i32 %v1_dbc4, { 0, 2, 3, 1 }
  uselistorder i32 %v0_db98, { 1, 0, 2 }
  uselistorder i32 %v2_db74, { 1, 0, 2 }
  uselistorder i32 %v3_db68, { 1, 0 }
  uselistorder i32 %v1_db58, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @function_f7cc, { 5, 6, 0, 1, 2, 3, 4, 29, 7, 23, 24, 25, 26, 27, 28, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_dca4(i32 %arg1) local_unnamed_addr {
dec_label_pc_dca4:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp296 = call i32 @__decompiler_undefined_function_0()
  %tmp300 = call i32 @__decompiler_undefined_function_0()
  %tmp301 = call i32 @__decompiler_undefined_function_0()
  %tmp302 = call i16 @__decompiler_undefined_function_2()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_dca4 = load i32, i32* @r4, align 4
  %v6_dca4 = load i32, i32* @r5, align 4
  %v18_dca4 = load i32, i32* @sb, align 4
  %v21_dca4 = load i32, i32* @sl, align 4
  %v24_dca4 = load i32, i32* @fp, align 4
  %v0_dcb0 = call i32 @function_fec8()
  store i32 %v0_dcb0, i32* %r0.global-to-local, align 4
  %v7_dcb4 = icmp eq i32 %v0_dcb0, -1
  %. = zext i1 %v7_dcb4 to i32
  %tmp335 = icmp slt i32 %v0_dcb0, 1
  %storemerge294 = select i1 %tmp335, i32 %., i32 1
  store i32 %storemerge294, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1fbf0.113 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_dcd0 = icmp eq i32 %storemerge294, 0
  store i1 %v2_dcd0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_dcb0, i32* @global_var_1fbf0.113, align 4
  br i1 %v2_dcd0, label %dec_label_pc_dcec, label %dec_label_pc_dcdc

dec_label_pc_dcdc:                                ; preds = %dec_label_pc_dca4
  store i32 %v3_dca4, i32* %r4.global-to-local, align 4
  store i32 %v6_dca4, i32* @r5, align 4
  store i32 %v18_dca4, i32* @sb, align 4
  store i32 %v21_dca4, i32* @sl, align 4
  store i32 %v24_dca4, i32* @fp, align 4
  ret i32 %v0_dcb0

dec_label_pc_dcec:                                ; preds = %dec_label_pc_dca4
  %v0_dcec = call i32 @function_fa88()
  store i32 %v0_dcec, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1fbd0.42 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_dcec, i32* @global_var_1fbd0.42, align 4
  %v1_dcf8 = call i32 @function_d404(i32 %v0_dcec)
  %v0_dcfc = load i32, i32* @r4, align 4
  store i32 %v0_dcfc, i32* %r0.global-to-local, align 4
  %v1_dd00 = inttoptr i32 %v0_dcfc to i32*
  %v2_dd00 = call i32 @function_fe58(i32* %v1_dd00)
  store i32 ptrtoint (i32* @global_var_1db9c.115 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_dd00, i32* @global_var_1db9c.115, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_dd14 = call i32 @function_11528(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_1fbe8.126 to i32), i32* %r3.global-to-local, align 4
  %v0_dd1c = load i32, i32* @r4, align 4
  store i32 %v0_dd1c, i32* %stack_var_-52, align 4
  store i32 %v2_dd14, i32* @global_var_1fbe8.126, align 4
  store i32 %v0_dd1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dd28

dec_label_pc_dd28:                                ; preds = %dec_label_pc_dd28.dec_label_pc_dd28_crit_edge, %dec_label_pc_dcec
  %v2_dd34 = phi i32 [ %v2_dd34.pre, %dec_label_pc_dd28.dec_label_pc_dd28_crit_edge ], [ %v2_dd14, %dec_label_pc_dcec ]
  %v0_dd3c = phi i32 [ %v0_dd6c, %dec_label_pc_dd28.dec_label_pc_dd28_crit_edge ], [ %v0_dd1c, %dec_label_pc_dcec ]
  %v3_dd30 = mul i32 %v0_dd3c, 256
  store i32 %v3_dd30, i32* %ip.global-to-local, align 4
  %v2_dd44 = mul i32 %v0_dd3c, 288
  %v1_dd4c = add i32 %v0_dd3c, 1
  store i32 %v1_dd4c, i32* %r0.global-to-local, align 4
  %v2_dd50 = add i32 %v2_dd44, %v2_dd34
  store i32 %v2_dd50, i32* %r2.global-to-local, align 4
  store i32 %v2_dd50, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_dd64 = add i32 %v2_dd50, 4
  %v3_dd64 = inttoptr i32 %v2_dd64 to i32*
  store i32 -1, i32* %v3_dd64, align 4
  %v0_dd68 = load i32, i32* @r5, align 4
  %v1_dd68 = load i32, i32* %r1.global-to-local, align 4
  %v2_dd68 = add i32 %v1_dd68, 12
  %v3_dd68 = inttoptr i32 %v2_dd68 to i32*
  store i32 %v0_dd68, i32* %v3_dd68, align 4
  %v0_dd6c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_dd6c, i32* %stack_var_-52, align 4
  %v7_dd70 = icmp sgt i32 %v1_dd4c, 255
  br i1 %v7_dd70, label %dec_label_pc_dd74, label %dec_label_pc_dd28.dec_label_pc_dd28_crit_edge

dec_label_pc_dd28.dec_label_pc_dd28_crit_edge:    ; preds = %dec_label_pc_dd28
  %v2_dd34.pre = load i32, i32* @global_var_1fbe8.126, align 4
  br label %dec_label_pc_dd28

dec_label_pc_dd74:                                ; preds = %dec_label_pc_dd28
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_dd80 = call i32 @function_109c0(i32 2, i32 3, i32 6)
  store i32 %v3_dd80, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1fbec.128 to i32), i32* %r2.global-to-local, align 4
  %v2_dd88 = icmp eq i32 %v3_dd80, -1
  store i1 %v2_dd88, i1* %cpsr_c.global-to-local, align 1
  %v7_dd88 = icmp eq i32 %v3_dd80, -1
  store i1 %v7_dd88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_dd80, i32* %r4.global-to-local, align 4
  store i32 %v3_dd80, i32* @global_var_1fbec.128, align 4
  br i1 %v7_dd88, label %dec_label_pc_e394, label %dec_label_pc_dd98

dec_label_pc_dd98:                                ; preds = %dec_label_pc_dd74
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_dd9c = load i32, i32* @r5, align 4
  store i32 %v0_dd9c, i32* %r2.global-to-local, align 4
  %v2_dda0 = call i32 @function_1000c(i32 %v3_dd80, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_dda8 = or i32 %v2_dda0, 2048
  store i32 %v1_dda8, i32* %r2.global-to-local, align 4
  %v0_ddac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ddac, i32* %r0.global-to-local, align 4
  %v2_ddb0 = call i32 @function_1000c(i32 %v0_ddac, i32 4)
  %v2_ddb8 = load i32, i32* @global_var_1fbec.128, align 4
  store i32 %v2_ddb8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_ddc4 = load i32, i32* @r5, align 4
  store i32 %v0_ddc4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_ddcc = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_ddcc, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_dddc = call i32 @function_1097c(i32 %v2_ddb8, i32 %v0_ddc4, i32 3, i32 %v2_ddcc, i32 4)
  store i32 %v5_dddc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_dde0 = icmp eq i32 %v5_dddc, 0
  store i1 %v2_dde0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dde0, label %dec_label_pc_dde8, label %dec_label_pc_e388

dec_label_pc_dde8:                                ; preds = %dec_label_pc_dd98, %dec_label_pc_dde8
  %v0_dde8 = call i32 @function_d3a8()
  %v1_ddf4 = urem i32 %v0_dde8, 256
  store i32 %v1_ddf4, i32* %r3.global-to-local, align 4
  %tmp338 = udiv i32 %v0_dde8, 256
  %v3_ddf8 = urem i32 %tmp338, 256
  %v4_ddfc = mul nuw nsw i32 %v1_ddf4, 256
  %v5_ddfc = or i32 %v4_ddfc, %v3_ddf8
  store i32 %v5_ddfc, i32* %r0.global-to-local, align 4
  %v2_de00 = icmp ugt i32 %v5_ddfc, 1023
  store i1 %v2_de00, i1* %cpsr_c.global-to-local, align 1
  %v7_de00 = icmp eq i32 %v5_ddfc, 1024
  store i1 %v7_de00, i1* %cpsr_z.global-to-local, align 1
  %v3_de08 = icmp ult i32 %v5_ddfc, 1022
  br i1 %v3_de08, label %dec_label_pc_dde8, label %dec_label_pc_de0c

dec_label_pc_de0c:                                ; preds = %dec_label_pc_dde8
  %v5_de04.le = trunc i32 %v0_dde8 to i16
  store i32 ptrtoint (i8** @global_var_1db6c.130 to i32), i32* %r0.global-to-local, align 4
  %v2_de10 = load i8, i8* bitcast (i8** @global_var_1db6c.130 to i8*), align 4
  %v3_de10 = zext i8 %v2_de10 to i32
  %v1_de14 = and i32 %v3_de10, 240
  %v1_de18 = or i32 %v1_de14, 5
  store i32 %v1_de18, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_1db6c.130 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_1db6e.131 to i16*), align 4
  %v0_de38 = call i32 @function_d3a8()
  %v1_de38 = trunc i32 %v0_de38 to i16
  %v3_de40 = load i8, i8* @global_var_1db8c.134, align 1
  store i32 ptrtoint (i16* @global_var_1db80.133 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_1db6c.130 to i32), i32* %ip.global-to-local, align 4
  %v1_de50 = urem i8 %v3_de40, 16
  store i16 %v1_de38, i16* bitcast (i32* @global_var_1db70.135 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_de60 = or i8 %v1_de50, 80
  store i8 64, i8* bitcast (i32* @global_var_1db74.136 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1db75.137 to i8*), align 4
  store i8 %v1_de60, i8* @global_var_1db8c.134, align 1
  %v4_de70 = sext i16 %v5_de04.le to i32
  store i32 %v4_de70, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_1db82.138, align 2
  store i16 %v5_de04.le, i16* @global_var_1db80.133, align 2
  %v0_de80 = call i32 @function_d3a8()
  %v1_de80 = trunc i32 %v0_de80 to i16
  %v3_de88 = load i8, i8* @global_var_1db8d.139, align 1
  %v4_de88 = zext i8 %v3_de88 to i32
  store i32 ptrtoint (i16* @global_var_1db80.133 to i32), i32* %ip.global-to-local, align 4
  %v1_de90 = or i32 %v4_de88, 2
  store i32 %v1_de90, i32* %r3.global-to-local, align 4
  store i16 %v1_de80, i16* bitcast (i32* @global_var_1db8e.140 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_153a8.142 to i32), i32* %r1.global-to-local, align 4
  %v1_de9c = trunc i32 %v1_de90 to i8
  store i8 %v1_de9c, i8* @global_var_1db8d.139, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_dea8 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32 ptrtoint (i32* @global_var_153a8.142 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1537c.146 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_deb8 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32 ptrtoint ([5 x i8]* @global_var_1537c.146 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15384.148 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_dec8 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32 ptrtoint ([9 x i8]* @global_var_15384.148 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_15390.150 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15390.150 to i32), i32* %r1.global-to-local, align 4
  %v5_ded8 = call i32 @function_db44(i32 ptrtoint ([7 x i8]* @global_var_15390.150 to i32), i32 ptrtoint ([7 x i8]* @global_var_15390.150 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_15398.152 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_153a8.142 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_dee8 = call i32 @function_db44(i32 ptrtoint ([8 x i8]* @global_var_15398.152 to i32), i32 ptrtoint (i32* @global_var_153a8.142 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_153a0.154 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_def8 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32 ptrtoint ([9 x i8]* @global_var_153a0.154 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32* %r1.global-to-local, align 4
  %v5_df08 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_153ac.156 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_df18 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32 ptrtoint ([9 x i8]* @global_var_153ac.156 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_153b8.158 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_153b8.158 to i32), i32* %r1.global-to-local, align 4
  %v5_df28 = call i32 @function_db44(i32 ptrtoint ([6 x i8]* @global_var_153b8.158 to i32), i32 ptrtoint ([6 x i8]* @global_var_153b8.158 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_153c0.160 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_df38 = call i32 @function_db44(i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), i32 ptrtoint ([6 x i8]* @global_var_153c0.160 to i32), i32 9)
  store i32 ptrtoint (i32* @global_var_153c8.162 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_153a8.142 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v3_df48 = call i32 @function_db44(i32 ptrtoint (i32* @global_var_153c8.162 to i32), i32 ptrtoint (i32* @global_var_153a8.142 to i32), i32 5)
  store i32 %v3_df48, i32* %r0.global-to-local, align 4
  %v2_df50 = ptrtoint i32* %stack_var_-1866 to i32
  br label %dec_label_pc_df58

dec_label_pc_df58:                                ; preds = %dec_label_pc_e6ac, %dec_label_pc_de0c
  %stack_var_-1880.0 = phi i32 [ %tmp300, %dec_label_pc_de0c ], [ %stack_var_-1880.2, %dec_label_pc_e6ac ]
  %v0_e264 = phi i32 [ %v2_df50, %dec_label_pc_de0c ], [ %stack_var_-1888.1, %dec_label_pc_e6ac ]
  %stack_var_-1884.0 = phi i16 [ %v5_de04.le, %dec_label_pc_de0c ], [ %stack_var_-1884.1, %dec_label_pc_e6ac ]
  store i32 ptrtoint (i32* @global_var_1db9c.115 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r1.global-to-local, align 4
  %v2_df60 = load i32, i32* @global_var_1db9c.115, align 4
  store i32 %v2_df60, i32* @r4, align 4
  %v3_df64 = icmp uge i32 %stack_var_-1880.0, %v2_df60
  store i1 %v3_df64, i1* %cpsr_c.global-to-local, align 1
  %v9_df64 = icmp eq i32 %stack_var_-1880.0, %v2_df60
  store i1 %v9_df64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_df64, label %dec_label_pc_e1e8, label %dec_label_pc_df6c

dec_label_pc_df6c:                                ; preds = %dec_label_pc_df58
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_df70 = ptrtoint i32* %stack_var_-104 to i32
  store i32 0, i32* %stack_var_-52, align 4
  %v2_df78 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_df7c

dec_label_pc_df7c:                                ; preds = %bb366, %dec_label_pc_df6c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_df90 = call i32 @function_d3a8()
  %v1_df90 = trunc i32 %v0_df90 to i16
  store i32 %v0_df90, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1fbd0.42 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1db6c.130 to i32), i32* %ip.global-to-local, align 4
  %v2_df9c = load i32, i32* @global_var_1fbd0.42, align 4
  store i32 %v2_df9c, i32* %r3.global-to-local, align 4
  store i16 %v1_df90, i16* bitcast (i32* @global_var_1db70.135 to i16*), align 4
  store i32 %v2_df9c, i32* @global_var_1db78.163, align 4
  br label %dec_label_pc_dfa8

dec_label_pc_dfa8:                                ; preds = %dec_label_pc_e07c, %dec_label_pc_dfd8, %dec_label_pc_e0b0, %dec_label_pc_e0a4, %dec_label_pc_e098, %dec_label_pc_e08c, %.thread28, %bb357, %bb356, %bb355, %bb354, %bb353, %dec_label_pc_e074, %dec_label_pc_e06c, %bb349, %dec_label_pc_e03c, %dec_label_pc_e018, %bb342, %dec_label_pc_dfe8, %bb341, %dec_label_pc_dfd0, %bb340, %bb359, %dec_label_pc_df7c
  %v0_dfa8 = call i32 @function_d3a8()
  store i32 %v0_dfa8, i32* %r0.global-to-local, align 4
  %v1_dfac = urem i32 %v0_dfa8, 256
  store i32 %v1_dfac, i32* %r1.global-to-local, align 4
  %v3_dfb0 = udiv i32 %v0_dfa8, 256
  store i32 %v3_dfb0, i32* %r3.global-to-local, align 4
  %v3_dfb4 = udiv i32 %v0_dfa8, 65536
  store i32 %v3_dfb4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_dfb8 = icmp eq i32 %v1_dfac, 0
  store i1 %v2_dfb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dfb8, label %bb340, label %bb339

bb339:                                            ; preds = %dec_label_pc_dfa8
  %v3_dfbc = icmp ugt i32 %v1_dfac, 126
  store i1 %v3_dfbc, i1* %cpsr_c.global-to-local, align 1
  %v8_dfbc = icmp eq i32 %v1_dfac, 127
  store i1 %v8_dfbc, i1* %cpsr_z.global-to-local, align 1
  br label %bb340

bb340:                                            ; preds = %dec_label_pc_dfa8, %bb339
  %v0_dfcc = phi i1 [ true, %dec_label_pc_dfa8 ], [ %v8_dfbc, %bb339 ]
  %v1_dfc0 = urem i32 %v3_dfb0, 256
  store i32 %v1_dfc0, i32* %ip.global-to-local, align 4
  %v1_dfc4 = urem i32 %v3_dfb4, 256
  store i32 %v1_dfc4, i32* %r2.global-to-local, align 4
  %v1_dfc8 = and i32 %v0_dfa8, 8388608
  %v2_dfc8 = icmp ne i32 %v1_dfc8, 0
  store i1 %v2_dfc8, i1* %cpsr_c.global-to-local, align 1
  %v3_dfc8 = udiv i32 %v0_dfa8, 16777216
  store i32 %v3_dfc8, i32* %r0.global-to-local, align 4
  br i1 %v0_dfcc, label %dec_label_pc_dfa8, label %dec_label_pc_dfd0

dec_label_pc_dfd0:                                ; preds = %bb340
  %v2_dfd0 = icmp ugt i32 %v1_dfac, 2
  store i1 %v2_dfd0, i1* %cpsr_c.global-to-local, align 1
  %v7_dfd0 = icmp eq i32 %v1_dfac, 3
  store i1 %v7_dfd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dfd0, label %dec_label_pc_dfa8, label %dec_label_pc_dfd8

dec_label_pc_dfd8:                                ; preds = %dec_label_pc_dfd0
  %v1_dfd8 = add nsw i32 %v1_dfac, -15
  store i32 %v1_dfd8, i32* %r3.global-to-local, align 4
  %v2_dfdc = icmp ugt i32 %v1_dfac, 55
  store i1 %v2_dfdc, i1* %cpsr_c.global-to-local, align 1
  %v7_dfdc = icmp eq i32 %v1_dfac, 56
  store i1 %v7_dfdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dfdc, label %dec_label_pc_dfa8, label %bb341

bb341:                                            ; preds = %dec_label_pc_dfd8
  %v3_dfe0 = icmp ne i32 %v1_dfd8, 0
  store i1 %v3_dfe0, i1* %cpsr_c.global-to-local, align 1
  %v8_dfe0 = icmp eq i32 %v1_dfd8, 1
  store i1 %v8_dfe0, i1* %cpsr_z.global-to-local, align 1
  %v2_dfe4 = xor i1 %v3_dfe0, true
  %v3_dfe4 = or i1 %v8_dfe0, %v2_dfe4
  br i1 %v3_dfe4, label %dec_label_pc_dfa8, label %dec_label_pc_dfe8

dec_label_pc_dfe8:                                ; preds = %bb341
  %v2_dfe8 = icmp ugt i32 %v1_dfac, 9
  store i1 %v2_dfe8, i1* %cpsr_c.global-to-local, align 1
  %v7_dfe8 = icmp eq i32 %v1_dfac, 10
  store i1 %v7_dfe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dfe8, label %dec_label_pc_dfa8, label %dec_label_pc_dff0

dec_label_pc_dff0:                                ; preds = %dec_label_pc_dfe8
  %v2_dff0 = icmp ugt i32 %v1_dfac, 191
  store i1 %v2_dff0, i1* %cpsr_c.global-to-local, align 1
  %v7_dff0 = icmp eq i32 %v1_dfac, 192
  store i1 %v7_dff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dff0, label %bb342, label %dec_label_pc_dffc

bb342:                                            ; preds = %dec_label_pc_dff0
  %v3_dff4 = icmp ugt i32 %v1_dfc0, 167
  store i1 %v3_dff4, i1* %cpsr_c.global-to-local, align 1
  %v8_dff4 = icmp eq i32 %v1_dfc0, 168
  store i1 %v8_dff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_dff4, label %dec_label_pc_dfa8, label %dec_label_pc_dffc

dec_label_pc_dffc:                                ; preds = %dec_label_pc_dff0, %bb342
  %v7_dffc = icmp eq i32 %v1_dfac, 172
  %.419 = zext i1 %v7_dffc to i32
  store i32 %.419, i32* %r3.global-to-local, align 4
  %v2_e008 = icmp ugt i32 %v1_dfc0, 14
  store i1 %v2_e008, i1* %cpsr_c.global-to-local, align 1
  %v7_e008 = icmp eq i32 %v1_dfc0, 15
  store i1 %v7_e008, i1* %cpsr_z.global-to-local, align 1
  %v2_e00c = xor i1 %v2_e008, true
  %v3_e00c = or i1 %v7_e008, %v2_e00c
  br i1 %v3_e00c, label %.thread6, label %bb345

.thread6:                                         ; preds = %dec_label_pc_dffc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e020

bb345:                                            ; preds = %dec_label_pc_dffc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e010 = icmp eq i1 %v7_dffc, false
  store i1 %v2_e010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e010, label %dec_label_pc_e020, label %dec_label_pc_e018

dec_label_pc_e018:                                ; preds = %bb345
  %v2_e018 = icmp ugt i32 %v1_dfc0, 30
  store i1 %v2_e018, i1* %cpsr_c.global-to-local, align 1
  %v7_e018 = icmp eq i32 %v1_dfc0, 31
  store i1 %v7_e018, i1* %cpsr_z.global-to-local, align 1
  %v2_e01c = xor i1 %v2_e018, true
  %v3_e01c = or i1 %v7_e018, %v2_e01c
  br i1 %v3_e01c, label %dec_label_pc_dfa8, label %dec_label_pc_e020

dec_label_pc_e020:                                ; preds = %.thread6, %dec_label_pc_e018, %bb345
  %v7_e020 = icmp eq i32 %v1_dfac, 100
  %.420 = zext i1 %v7_e020 to i32
  store i32 %.420, i32* %r3.global-to-local, align 4
  %v2_e02c = icmp ugt i32 %v1_dfc0, 62
  store i1 %v2_e02c, i1* %cpsr_c.global-to-local, align 1
  %v7_e02c = icmp eq i32 %v1_dfc0, 63
  store i1 %v7_e02c, i1* %cpsr_z.global-to-local, align 1
  %v2_e030 = xor i1 %v2_e02c, true
  %v3_e030 = or i1 %v7_e02c, %v2_e030
  br i1 %v3_e030, label %.thread11, label %bb348

.thread11:                                        ; preds = %dec_label_pc_e020
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e044

bb348:                                            ; preds = %dec_label_pc_e020
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e034 = icmp eq i1 %v7_e020, false
  store i1 %v2_e034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e034, label %dec_label_pc_e044, label %dec_label_pc_e03c

dec_label_pc_e03c:                                ; preds = %bb348
  %v2_e03c = icmp ugt i32 %v1_dfc0, 125
  store i1 %v2_e03c, i1* %cpsr_c.global-to-local, align 1
  %v7_e03c = icmp eq i32 %v1_dfc0, 126
  store i1 %v7_e03c, i1* %cpsr_z.global-to-local, align 1
  %v2_e040 = xor i1 %v2_e03c, true
  %v3_e040 = or i1 %v7_e03c, %v2_e040
  br i1 %v3_e040, label %dec_label_pc_dfa8, label %dec_label_pc_e044

dec_label_pc_e044:                                ; preds = %.thread11, %dec_label_pc_e03c, %bb348
  %v2_e044 = icmp ugt i32 %v1_dfac, 168
  store i1 %v2_e044, i1* %cpsr_c.global-to-local, align 1
  %v7_e044 = icmp eq i32 %v1_dfac, 169
  store i1 %v7_e044, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e044, label %bb349, label %dec_label_pc_e050

bb349:                                            ; preds = %dec_label_pc_e044
  %v3_e048 = icmp eq i32 %v1_dfc0, 255
  store i1 %v3_e048, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e048, label %dec_label_pc_dfa8, label %dec_label_pc_e050

dec_label_pc_e050:                                ; preds = %dec_label_pc_e044, %bb349
  %v7_e050 = icmp eq i32 %v1_dfac, 198
  %.421 = zext i1 %v7_e050 to i32
  store i32 %.421, i32* %r3.global-to-local, align 4
  %v2_e05c = icmp ugt i32 %v1_dfc0, 16
  store i1 %v2_e05c, i1* %cpsr_c.global-to-local, align 1
  %v7_e05c = icmp eq i32 %v1_dfc0, 17
  store i1 %v7_e05c, i1* %cpsr_z.global-to-local, align 1
  %v2_e060 = xor i1 %v2_e05c, true
  %v3_e060 = or i1 %v7_e05c, %v2_e060
  br i1 %v3_e060, label %.thread17, label %bb352

.thread17:                                        ; preds = %dec_label_pc_e050
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e074

bb352:                                            ; preds = %dec_label_pc_e050
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e064 = icmp eq i1 %v7_e050, false
  store i1 %v2_e064, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e064, label %dec_label_pc_e074, label %dec_label_pc_e06c

dec_label_pc_e06c:                                ; preds = %bb352
  %v2_e06c = icmp ugt i32 %v1_dfc0, 18
  store i1 %v2_e06c, i1* %cpsr_c.global-to-local, align 1
  %v7_e06c = icmp eq i32 %v1_dfc0, 19
  store i1 %v7_e06c, i1* %cpsr_z.global-to-local, align 1
  %v2_e070 = xor i1 %v2_e06c, true
  %v3_e070 = or i1 %v7_e06c, %v2_e070
  br i1 %v3_e070, label %dec_label_pc_dfa8, label %dec_label_pc_e074

dec_label_pc_e074:                                ; preds = %.thread17, %dec_label_pc_e06c, %bb352
  %v2_e074 = icmp ugt i32 %v1_dfac, 222
  store i1 %v2_e074, i1* %cpsr_c.global-to-local, align 1
  %v7_e074 = icmp eq i32 %v1_dfac, 223
  store i1 %v7_e074, i1* %cpsr_z.global-to-local, align 1
  %v2_e078 = xor i1 %v7_e074, true
  %v3_e078 = and i1 %v2_e074, %v2_e078
  br i1 %v3_e078, label %dec_label_pc_dfa8, label %dec_label_pc_e07c

dec_label_pc_e07c:                                ; preds = %dec_label_pc_e074
  %v1_e07c = add nsw i32 %v1_dfac, -6
  store i32 %v1_e07c, i32* %r3.global-to-local, align 4
  %v2_e080 = icmp ugt i32 %v1_dfac, 10
  store i1 %v2_e080, i1* %cpsr_c.global-to-local, align 1
  %v7_e080 = icmp eq i32 %v1_dfac, 11
  store i1 %v7_e080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e080, label %dec_label_pc_dfa8, label %bb353

bb353:                                            ; preds = %dec_label_pc_e07c
  %v3_e084 = icmp ne i32 %v1_e07c, 0
  store i1 %v3_e084, i1* %cpsr_c.global-to-local, align 1
  %v8_e084 = icmp eq i32 %v1_e07c, 1
  store i1 %v8_e084, i1* %cpsr_z.global-to-local, align 1
  %v2_e088 = xor i1 %v3_e084, true
  %v3_e088 = or i1 %v8_e084, %v2_e088
  br i1 %v3_e088, label %dec_label_pc_dfa8, label %dec_label_pc_e08c

dec_label_pc_e08c:                                ; preds = %bb353
  %v2_e08c = icmp ugt i32 %v1_dfac, 21
  store i1 %v2_e08c, i1* %cpsr_c.global-to-local, align 1
  %v7_e08c = icmp eq i32 %v1_dfac, 22
  store i1 %v7_e08c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e08c, label %dec_label_pc_dfa8, label %bb354

bb354:                                            ; preds = %dec_label_pc_e08c
  %v3_e090 = icmp ugt i32 %v1_dfac, 20
  store i1 %v3_e090, i1* %cpsr_c.global-to-local, align 1
  %v8_e090 = icmp eq i32 %v1_dfac, 21
  store i1 %v8_e090, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e090, label %dec_label_pc_dfa8, label %dec_label_pc_e098

dec_label_pc_e098:                                ; preds = %bb354
  %v2_e098 = icmp ugt i32 %v1_dfac, 27
  store i1 %v2_e098, i1* %cpsr_c.global-to-local, align 1
  %v7_e098 = icmp eq i32 %v1_dfac, 28
  store i1 %v7_e098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e098, label %dec_label_pc_dfa8, label %bb355

bb355:                                            ; preds = %dec_label_pc_e098
  %v3_e09c = icmp ugt i32 %v1_dfac, 25
  store i1 %v3_e09c, i1* %cpsr_c.global-to-local, align 1
  %v8_e09c = icmp eq i32 %v1_dfac, 26
  store i1 %v8_e09c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e09c, label %dec_label_pc_dfa8, label %dec_label_pc_e0a4

dec_label_pc_e0a4:                                ; preds = %bb355
  %v2_e0a4 = icmp ugt i32 %v1_dfac, 29
  store i1 %v2_e0a4, i1* %cpsr_c.global-to-local, align 1
  %v7_e0a4 = icmp eq i32 %v1_dfac, 30
  store i1 %v7_e0a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0a4, label %dec_label_pc_dfa8, label %bb356

bb356:                                            ; preds = %dec_label_pc_e0a4
  %v3_e0a8 = icmp ugt i32 %v1_dfac, 28
  store i1 %v3_e0a8, i1* %cpsr_c.global-to-local, align 1
  %v8_e0a8 = icmp eq i32 %v1_dfac, 29
  store i1 %v8_e0a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e0a8, label %dec_label_pc_dfa8, label %dec_label_pc_e0b0

dec_label_pc_e0b0:                                ; preds = %bb356
  %v2_e0b0 = icmp ugt i32 %v1_dfac, 54
  store i1 %v2_e0b0, i1* %cpsr_c.global-to-local, align 1
  %v7_e0b0 = icmp eq i32 %v1_dfac, 55
  store i1 %v7_e0b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0b0, label %dec_label_pc_dfa8, label %bb357

bb357:                                            ; preds = %dec_label_pc_e0b0
  %v3_e0b4 = icmp ugt i32 %v1_dfac, 32
  store i1 %v3_e0b4, i1* %cpsr_c.global-to-local, align 1
  %v8_e0b4 = icmp eq i32 %v1_dfac, 33
  store i1 %v8_e0b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e0b4, label %dec_label_pc_dfa8, label %dec_label_pc_e0bc

dec_label_pc_e0bc:                                ; preds = %bb357
  %v2_e0bc = icmp ugt i32 %v1_dfac, 214
  store i1 %v2_e0bc, i1* %cpsr_c.global-to-local, align 1
  %v7_e0bc = icmp eq i32 %v1_dfac, 215
  store i1 %v7_e0bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0bc, label %.thread28, label %bb358

bb358:                                            ; preds = %dec_label_pc_e0bc
  %v3_e0c0 = icmp ugt i32 %v1_dfac, 213
  store i1 %v3_e0c0, i1* %cpsr_c.global-to-local, align 1
  %v8_e0c0 = icmp eq i32 %v1_dfac, 214
  store i1 %v8_e0c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e0c0, label %bb359, label %dec_label_pc_e0d0

.thread28:                                        ; preds = %dec_label_pc_e0bc
  br label %dec_label_pc_dfa8

bb359:                                            ; preds = %bb358
  br label %dec_label_pc_dfa8

dec_label_pc_e0d0:                                ; preds = %bb358
  %v5_e0dc = call i32 @llvm.bswap.i32(i32 %v0_dfa8)
  store i32 %v5_e0dc, i32* %r3.global-to-local, align 4
  %tmp360 = and i32 %v0_dfa8, 65280
  %tmp361 = call i32 @llvm.bswap.i32(i32 %tmp360)
  %v3_e0e4 = udiv i32 %v5_e0dc, 16777216
  %tmp362 = and i32 %v0_dfa8, 16711680
  %tmp363 = call i32 @llvm.bswap.i32(i32 %tmp362)
  %v4_e0ec = udiv i32 %tmp361, 256
  %v4_e0f0 = mul nuw nsw i32 %tmp363, 256
  store i32 ptrtoint (i8** @global_var_1db6c.130 to i32), i32* @r0, align 4
  %tmp364 = and i32 %v0_dfa8, 65536
  %v3_e0f8 = icmp ne i32 %tmp364, 0
  store i1 %v3_e0f8, i1* %cpsr_c.global-to-local, align 1
  %v4_e0f8 = mul i32 %v5_e0dc, 16777216
  %v5_e0ec = or i32 %v4_e0f8, %v3_e0e4
  %v5_e0f0 = or i32 %v5_e0ec, %v4_e0ec
  %v5_e0f8 = or i32 %v5_e0f0, %v4_e0f0
  store i32 %v5_e0f8, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_1db76.164 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_e0f8, i32* @global_var_1db7c.165, align 4
  %v3_e108 = call i32 @function_bf78(i32 ptrtoint (i8** @global_var_1db6c.130 to i32), i32 20)
  %v4_e108 = trunc i32 %v3_e108 to i16
  store i32 %v3_e108, i32* %r0.global-to-local, align 4
  %v3_e10c = load i32, i32* %stack_var_-52, align 4
  %v5_e11c = sdiv i32 %v3_e10c, 10
  %v3_e120 = mul i32 %v5_e11c, 8
  store i32 %v3_e120, i32* %r2.global-to-local, align 4
  %v2_e128 = mul i32 %v5_e11c, 10
  store i32 %v2_e128, i32* %r3.global-to-local, align 4
  %v3_e12c = icmp uge i32 %v3_e10c, %v2_e128
  store i1 %v3_e12c, i1* %cpsr_c.global-to-local, align 1
  %v9_e12c = icmp eq i32 %v3_e10c, %v2_e128
  store i1 %v9_e12c, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1db6c.130 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_e12c, label %bb365, label %.thread40

.thread40:                                        ; preds = %dec_label_pc_e0d0
  store i32 ptrtoint (i16* @global_var_1db80.133 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_e108, i16* bitcast (i32* @global_var_1db76.164 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1db6c.130 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1db80.133 to i32), i32 2) to i16*), align 2
  %v4_e14c = load i32, i32* @global_var_1db7c.165, align 4
  store i32 %v4_e14c, i32* @global_var_1db84.167, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb366

bb365:                                            ; preds = %dec_label_pc_e0d0
  store i16 %v4_e108, i16* bitcast (i32* @global_var_1db76.164 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1db6c.130 to i32), i32* %r0.global-to-local, align 4
  %v4_e14c34 = load i32, i32* @global_var_1db7c.165, align 4
  store i32 ptrtoint (i16* @global_var_1db80.133 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_e14c34, i32* @global_var_1db84.167, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1db80.133 to i32), i32 2) to i16*), align 2
  br label %bb366

bb366:                                            ; preds = %.thread40, %bb365
  store i16 0, i16* bitcast (i32* @global_var_1db90.168 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_1db80.133 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_e178 = call i32 @function_bfc8(i32 ptrtoint (i8** @global_var_1db6c.130 to i32), i32 sext (i16 ptrtoint (i16* @global_var_1db80.133 to i16) to i32), i32 5120, i32 20)
  %v7_e178 = trunc i32 %v6_e178 to i16
  store i32 ptrtoint (i8** @global_var_1db6c.130 to i32), i32* %r1.global-to-local, align 4
  %v2_e184 = load i32, i32* @global_var_1fbec.128, align 4
  store i16 %v7_e178, i16* bitcast (i32* @global_var_1db90.168 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_df70, i32* %ip.global-to-local, align 4
  store i32 %v2_e184, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_e1cc = call i32 @function_1093c(i32 %v2_e184, i32 ptrtoint (i8** @global_var_1db6c.130 to i32), i32 40, i32 16384, i32 %v2_df78, i32 16)
  store i32 %v7_e1cc, i32* %r0.global-to-local, align 4
  %v3_e1d0 = load i32, i32* %stack_var_-52, align 4
  %v1_e1d4 = add i32 %v3_e1d0, 1
  store i32 %v1_e1d4, i32* %r3.global-to-local, align 4
  %v3_e1d8 = icmp ugt i32 %v1_e1d4, 383
  store i1 %v3_e1d8, i1* %cpsr_c.global-to-local, align 1
  %v8_e1d8 = icmp eq i32 %v1_e1d4, 384
  store i1 %v8_e1d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e1d4, i32* %stack_var_-52, align 4
  %v5_e1e0 = icmp slt i32 %v1_e1d4, 384
  br i1 %v5_e1e0, label %dec_label_pc_df7c, label %dec_label_pc_e1e4

dec_label_pc_e1e4:                                ; preds = %bb366
  %v0_e1e4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_e1e8

dec_label_pc_e1e8:                                ; preds = %dec_label_pc_df58, %dec_label_pc_e1e4
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.0, %dec_label_pc_df58 ], [ %v0_e1e4, %dec_label_pc_e1e4 ]
  %v0_e1e8 = call i32 @function_10600()
  store i32 %v0_e264, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v1_e1f8 = add i32 %v0_e264, 20
  store i32 %v1_e1f8, i32* @r4, align 4
  %v2_e204 = inttoptr i32 %v0_e1e8 to i32*
  %v1_e254 = add i32 %v0_e264, 16
  %v2_e254 = inttoptr i32 %v1_e254 to i32*
  %v4_e290 = sext i16 %stack_var_-1884.0 to i32
  %v1_e264 = add i32 %v0_e264, 9
  %v2_e264 = inttoptr i32 %v1_e264 to i8*
  %v1_e2f8 = add i32 %v0_e264, 12
  %v2_e2f8 = inttoptr i32 %v1_e2f8 to i32*
  br label %dec_label_pc_e1fc

dec_label_pc_e1fc:                                ; preds = %dec_label_pc_e2c0, %dec_label_pc_e2b8, %dec_label_pc_e2b0, %dec_label_pc_e28c, %dec_label_pc_e27c, %dec_label_pc_e264, %dec_label_pc_e24c, %dec_label_pc_e2a8, %dec_label_pc_e29c, %dec_label_pc_e244, %dec_label_pc_e378, %dec_label_pc_e1e8
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %v2_e204, align 4
  %v2_e20c = load i32, i32* @global_var_1fbec.128, align 4
  store i32 %v2_e20c, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_e264, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e220 = load i32, i32* %ip.global-to-local, align 4
  %v6_e228 = call i32 @function_108c8(i32 %v2_e20c, i32 %v0_e264, i32 1514, i32 16384, i32 %v0_e220, i32 %v0_e220)
  store i32 %v6_e228, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e22c = icmp eq i32 %v6_e228, 0
  store i1 %v2_e22c, i1* %cpsr_z.global-to-local, align 1
  %tmp367 = icmp slt i32 %v6_e228, 1
  br i1 %tmp367, label %dec_label_pc_e39c, label %dec_label_pc_e234

dec_label_pc_e234:                                ; preds = %dec_label_pc_e1fc
  store i32 %v0_e1e8, i32* %ip.global-to-local, align 4
  %v2_e238 = load i32, i32* %v2_e204, align 4
  store i32 %v2_e238, i32* %r3.global-to-local, align 4
  %v2_e23c = icmp ugt i32 %v2_e238, 10
  store i1 %v2_e23c, i1* %cpsr_c.global-to-local, align 1
  %v7_e23c = icmp eq i32 %v2_e238, 11
  store i1 %v7_e23c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e23c, label %dec_label_pc_e39c, label %dec_label_pc_e244

dec_label_pc_e244:                                ; preds = %dec_label_pc_e234
  %v2_e244 = icmp ugt i32 %v6_e228, 38
  store i1 %v2_e244, i1* %cpsr_c.global-to-local, align 1
  %v7_e244 = icmp eq i32 %v6_e228, 39
  store i1 %v7_e244, i1* %cpsr_z.global-to-local, align 1
  %v2_e248 = xor i1 %v2_e244, true
  %v3_e248 = or i1 %v7_e244, %v2_e248
  br i1 %v3_e248, label %dec_label_pc_e1fc, label %dec_label_pc_e24c

dec_label_pc_e24c:                                ; preds = %dec_label_pc_e244
  store i32 ptrtoint (i32* @global_var_1fbd0.42 to i32), i32* %r0.global-to-local, align 4
  %v3_e254 = load i32, i32* %v2_e254, align 4
  store i32 %v3_e254, i32* %r2.global-to-local, align 4
  %v2_e258 = load i32, i32* @global_var_1fbd0.42, align 4
  store i32 %v2_e258, i32* %r3.global-to-local, align 4
  %v3_e25c = icmp uge i32 %v3_e254, %v2_e258
  store i1 %v3_e25c, i1* %cpsr_c.global-to-local, align 1
  %v9_e25c = icmp eq i32 %v3_e254, %v2_e258
  store i1 %v9_e25c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e25c, label %dec_label_pc_e264, label %dec_label_pc_e1fc

dec_label_pc_e264:                                ; preds = %dec_label_pc_e24c
  %v3_e264 = load i8, i8* %v2_e264, align 1
  %v4_e264 = zext i8 %v3_e264 to i32
  store i32 %v4_e264, i32* %r3.global-to-local, align 4
  %v2_e268 = icmp ugt i8 %v3_e264, 5
  store i1 %v2_e268, i1* %cpsr_c.global-to-local, align 1
  %v7_e268 = icmp eq i8 %v3_e264, 6
  store i1 %v7_e268, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e268, label %dec_label_pc_e270, label %dec_label_pc_e1fc

dec_label_pc_e270:                                ; preds = %dec_label_pc_e264
  %v0_e270 = load i32, i32* @r4, align 4
  %v1_e270 = inttoptr i32 %v0_e270 to i16*
  %v2_e270 = load i16, i16* %v1_e270, align 2
  %v3_e270 = zext i16 %v2_e270 to i32
  store i32 %v3_e270, i32* %ip.global-to-local, align 4
  %v2_e274 = icmp ugt i16 %v2_e270, 5887
  store i1 %v2_e274, i1* %cpsr_c.global-to-local, align 1
  %v7_e274 = icmp eq i16 %v2_e270, 5888
  store i1 %v7_e274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e274, label %dec_label_pc_e28c, label %dec_label_pc_e27c

dec_label_pc_e27c:                                ; preds = %dec_label_pc_e270
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_e284 = icmp ugt i16 %v2_e270, 4872
  store i1 %v3_e284, i1* %cpsr_c.global-to-local, align 1
  %v9_e284 = icmp eq i16 %v2_e270, 4873
  store i1 %v9_e284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e284, label %dec_label_pc_e28c, label %dec_label_pc_e1fc

dec_label_pc_e28c:                                ; preds = %dec_label_pc_e27c, %dec_label_pc_e270
  %v1_e28c = add i32 %v0_e270, 2
  %v2_e28c = inttoptr i32 %v1_e28c to i16*
  %v3_e28c = load i16, i16* %v2_e28c, align 2
  %v4_e28c = zext i16 %v3_e28c to i32
  store i32 %v4_e28c, i32* %r3.global-to-local, align 4
  store i32 %v4_e290, i32* %r1.global-to-local, align 4
  %v3_e294 = icmp uge i32 %v4_e28c, %v4_e290
  store i1 %v3_e294, i1* %cpsr_c.global-to-local, align 1
  %v9_e294 = icmp eq i32 %v4_e28c, %v4_e290
  store i1 %v9_e294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e294, label %dec_label_pc_e29c, label %dec_label_pc_e1fc

dec_label_pc_e29c:                                ; preds = %dec_label_pc_e28c
  %v1_e29c = add i32 %v0_e270, 13
  %v2_e29c = inttoptr i32 %v1_e29c to i8*
  %v3_e29c = load i8, i8* %v2_e29c, align 1
  %v4_e29c = zext i8 %v3_e29c to i32
  store i32 %v4_e29c, i32* %r3.global-to-local, align 4
  %v1_e2a0 = and i32 %v4_e29c, 2
  %v2_e2a0 = icmp eq i32 %v1_e2a0, 0
  store i1 %v2_e2a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e2a0, label %dec_label_pc_e1fc, label %dec_label_pc_e2a8

dec_label_pc_e2a8:                                ; preds = %dec_label_pc_e29c
  %v1_e2a8 = and i32 %v4_e29c, 16
  %v2_e2a8 = icmp eq i32 %v1_e2a8, 0
  store i1 %v2_e2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e2a8, label %dec_label_pc_e1fc, label %dec_label_pc_e2b0

dec_label_pc_e2b0:                                ; preds = %dec_label_pc_e2a8
  %v1_e2b0 = and i32 %v4_e29c, 4
  %v2_e2b0 = icmp eq i32 %v1_e2b0, 0
  store i1 %v2_e2b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e2b0, label %dec_label_pc_e2b8, label %dec_label_pc_e1fc

dec_label_pc_e2b8:                                ; preds = %dec_label_pc_e2b0
  %tmp = urem i8 %v3_e29c, 2
  %v2_e2b8 = icmp eq i8 %tmp, 0
  store i1 %v2_e2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e2b8, label %dec_label_pc_e2c0, label %dec_label_pc_e1fc

dec_label_pc_e2c0:                                ; preds = %dec_label_pc_e2b8
  %v1_e2c0 = add i32 %v0_e270, 8
  %v2_e2c0 = inttoptr i32 %v1_e2c0 to i32*
  %v3_e2c0 = load i32, i32* %v2_e2c0, align 4
  %v5_e2d8 = call i32 @llvm.bswap.i32(i32 %v3_e2c0)
  %v1_e2dc = add i32 %v5_e2d8, -1
  store i32 %v1_e2dc, i32* %r2.global-to-local, align 4
  %v3_e2e4 = udiv i32 %v1_e2dc, 16777216
  %v1_e2e0 = udiv i32 %v1_e2dc, 256
  %v4_e2e8 = and i32 %v1_e2e0, 65280
  %v5_e2e8 = or i32 %v4_e2e8, %v3_e2e4
  store i32 %v0_e264, i32* %r0.global-to-local, align 4
  %v1_e2f0 = and i32 %v1_e2dc, 65280
  store i32 %v1_e2f0, i32* %r1.global-to-local, align 4
  %v4_e2f4 = mul nuw nsw i32 %v1_e2f0, 256
  %v5_e2f4 = or i32 %v5_e2e8, %v4_e2f4
  store i32 %v5_e2f4, i32* %r3.global-to-local, align 4
  %v3_e2f8 = load i32, i32* %v2_e2f8, align 4
  store i32 %v3_e2f8, i32* @lr, align 4
  %v5_e2fc = call i32 @llvm.bswap.i32(i32 %v1_e2dc)
  store i32 %v5_e2fc, i32* %r3.global-to-local, align 4
  %v3_e300 = icmp uge i32 %v5_e2fc, %v3_e2f8
  store i1 %v3_e300, i1* %cpsr_c.global-to-local, align 1
  %v9_e300 = icmp eq i32 %v5_e2fc, %v3_e2f8
  store i1 %v9_e300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e300, label %dec_label_pc_e308, label %dec_label_pc_e1fc

dec_label_pc_e308:                                ; preds = %dec_label_pc_e2c0
  %v0_e308 = load i32, i32* @r5, align 4
  %v2_e308 = icmp ugt i32 %v0_e308, 254
  store i1 %v2_e308, i1* %cpsr_c.global-to-local, align 1
  %v7_e308 = icmp eq i32 %v0_e308, 255
  store i1 %v7_e308, i1* %cpsr_z.global-to-local, align 1
  %v8_e30c = icmp sgt i32 %v0_e308, 255
  br i1 %v8_e30c, label %dec_label_pc_e39c, label %dec_label_pc_e310

dec_label_pc_e310:                                ; preds = %dec_label_pc_e308
  %v2_e318 = load i32, i32* @global_var_1fbe8.126, align 4
  store i32 %v2_e318, i32* %r1.global-to-local, align 4
  %v3_e31c = mul i32 %v0_e308, 256
  store i32 %v3_e31c, i32* %r2.global-to-local, align 4
  %v2_e320 = mul i32 %v0_e308, 288
  store i32 %v2_e320, i32* %r3.global-to-local, align 4
  %v2_e324 = add i32 %v2_e318, %v2_e320
  store i32 %v2_e324, i32* @r0, align 4
  %v1_e328 = add i32 %v2_e324, 12
  %v2_e328 = inttoptr i32 %v1_e328 to i32*
  %v3_e328 = load i32, i32* %v2_e328, align 4
  store i32 %v3_e328, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e32c = icmp eq i32 %v3_e328, 0
  store i1 %v2_e32c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e32c, label %dec_label_pc_e370, label %dec_label_pc_e34c.preheader

dec_label_pc_e34c.preheader:                      ; preds = %dec_label_pc_e310
  %v2_e330 = add i32 %v0_e308, 1
  %v2_e338 = and i32 %v2_e330, 134217728
  %v3_e338 = icmp ne i32 %v2_e338, 0
  store i1 %v3_e338, i1* %cpsr_c.global-to-local, align 1
  %v3_e33c = mul i32 %v2_e330, 288
  %v3_e340 = add i32 %v2_e318, %v3_e33c
  store i32 %v3_e340, i32* %r3.global-to-local, align 4
  store i32 %v0_e308, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e34c

dec_label_pc_e34c:                                ; preds = %dec_label_pc_e34c.preheader, %dec_label_pc_e358
  %v0_e358 = phi i32 [ %v3_e340, %dec_label_pc_e34c.preheader ], [ %v1_e364, %dec_label_pc_e358 ]
  %v0_e34c = phi i32 [ %v0_e308, %dec_label_pc_e34c.preheader ], [ %v1_e34c, %dec_label_pc_e358 ]
  %v1_e34c = add i32 %v0_e34c, 1
  store i32 %v1_e34c, i32* %r2.global-to-local, align 4
  %v7_e350 = icmp eq i32 %v1_e34c, 256
  br i1 %v7_e350, label %dec_label_pc_e39c.loopexit, label %dec_label_pc_e358

dec_label_pc_e358:                                ; preds = %dec_label_pc_e34c
  store i32 %v0_e358, i32* @r0, align 4
  %v1_e35c = add i32 %v0_e358, 12
  %v2_e35c = inttoptr i32 %v1_e35c to i32*
  %v3_e35c = load i32, i32* %v2_e35c, align 4
  %v2_e360 = icmp eq i32 %v3_e35c, 0
  %v1_e364 = add i32 %v0_e358, 288
  store i32 %v1_e364, i32* %r3.global-to-local, align 4
  br i1 %v2_e360, label %dec_label_pc_e36c, label %dec_label_pc_e34c

dec_label_pc_e36c:                                ; preds = %dec_label_pc_e358
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e34c, i32* @r5, align 4
  br label %dec_label_pc_e370

dec_label_pc_e370:                                ; preds = %dec_label_pc_e310, %dec_label_pc_e36c
  %v1_e378 = phi i32 [ %v2_e324, %dec_label_pc_e310 ], [ %v0_e358, %dec_label_pc_e36c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e370 = icmp eq i32 %v1_e378, 0
  store i1 %v2_e370, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e370, label %dec_label_pc_e39c, label %dec_label_pc_e378

dec_label_pc_e378:                                ; preds = %dec_label_pc_e370
  %v2_e378 = add i32 %v1_e378, 16
  %v3_e378 = inttoptr i32 %v2_e378 to i32*
  store i32 %v3_e2f8, i32* %v3_e378, align 4
  %v0_e37c = load i32, i32* %ip.global-to-local, align 4
  %v1_e37c = trunc i32 %v0_e37c to i16
  %v2_e37c = load i32, i32* @r0, align 4
  %v3_e37c = add i32 %v2_e37c, 20
  %v4_e37c = inttoptr i32 %v3_e37c to i16*
  store i16 %v1_e37c, i16* %v4_e37c, align 2
  %v0_e380 = call i32 @function_da7c()
  store i32 %v0_e380, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e1fc

dec_label_pc_e388:                                ; preds = %dec_label_pc_dd98
  store i32 ptrtoint (i32* @global_var_1fbec.128 to i32), i32* %ip.global-to-local, align 4
  %v2_e38c = load i32, i32* @global_var_1fbec.128, align 4
  store i32 %v2_e38c, i32* %r0.global-to-local, align 4
  %v1_e390 = call i32 @function_101d8(i32 %v2_e38c)
  store i32 %v1_e390, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e394

dec_label_pc_e394:                                ; preds = %dec_label_pc_dd74, %dec_label_pc_e388
  %v0_e394 = load i32, i32* @r5, align 4
  store i32 %v0_e394, i32* %r0.global-to-local, align 4
  %v1_e398 = call i32 @function_12018(i32 %v0_e394)
  store i32 %v1_e398, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e39c

dec_label_pc_e39c.loopexit:                       ; preds = %dec_label_pc_e34c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e39c

dec_label_pc_e39c:                                ; preds = %dec_label_pc_e370, %dec_label_pc_e308, %dec_label_pc_e234, %dec_label_pc_e1fc, %dec_label_pc_e39c.loopexit, %dec_label_pc_e394
  %stack_var_-1876.0 = phi i32 [ %tmp296, %dec_label_pc_e394 ], [ %v0_e1e8, %dec_label_pc_e39c.loopexit ], [ %v0_e1e8, %dec_label_pc_e1fc ], [ %v0_e1e8, %dec_label_pc_e234 ], [ %v0_e1e8, %dec_label_pc_e308 ], [ %v0_e1e8, %dec_label_pc_e370 ]
  %stack_var_-1880.2 = phi i32 [ %tmp300, %dec_label_pc_e394 ], [ %stack_var_-1880.1, %dec_label_pc_e39c.loopexit ], [ %stack_var_-1880.1, %dec_label_pc_e1fc ], [ %stack_var_-1880.1, %dec_label_pc_e234 ], [ %stack_var_-1880.1, %dec_label_pc_e308 ], [ %stack_var_-1880.1, %dec_label_pc_e370 ]
  %stack_var_-1888.1 = phi i32 [ %tmp301, %dec_label_pc_e394 ], [ %v0_e264, %dec_label_pc_e39c.loopexit ], [ %v0_e264, %dec_label_pc_e1fc ], [ %v0_e264, %dec_label_pc_e234 ], [ %v0_e264, %dec_label_pc_e308 ], [ %v0_e264, %dec_label_pc_e370 ]
  %stack_var_-1884.1 = phi i16 [ %tmp302, %dec_label_pc_e394 ], [ %stack_var_-1884.0, %dec_label_pc_e39c.loopexit ], [ %stack_var_-1884.0, %dec_label_pc_e1fc ], [ %stack_var_-1884.0, %dec_label_pc_e234 ], [ %stack_var_-1884.0, %dec_label_pc_e308 ], [ %stack_var_-1884.0, %dec_label_pc_e370 ]
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_e3bc473 = load i32, i32* @sp, align 4
  %v3_e3bc474 = add i32 %v2_e3bc473, 1676
  %v4_e3bc475 = inttoptr i32 %v3_e3bc474 to i32*
  store i32 0, i32* %v4_e3bc475, align 4
  br label %dec_label_pc_e3a8.dec_label_pc_e3a8_crit_edge

dec_label_pc_e3a8.dec_label_pc_e3a8_crit_edge:    ; preds = %dec_label_pc_e39c, %dec_label_pc_e3a8.dec_label_pc_e3a8_crit_edge
  %v0_e3a8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e3ac = add i32 %v0_e3a8.pre, 4
  store i32 %v1_e3ac, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e3b4 = add i32 %v0_e3a8.pre, 1672
  store i32 %v1_e3b4, i32* %ip.global-to-local, align 4
  %v7_e3b8 = icmp eq i32 %v1_e3ac, 128
  %v2_e3bc = load i32, i32* @sp, align 4
  %v3_e3bc = add i32 %v2_e3bc, %v1_e3b4
  %v4_e3bc = inttoptr i32 %v3_e3bc to i32*
  store i32 0, i32* %v4_e3bc, align 4
  br i1 %v7_e3b8, label %dec_label_pc_e3c4, label %dec_label_pc_e3a8.dec_label_pc_e3a8_crit_edge

dec_label_pc_e3c4:                                ; preds = %dec_label_pc_e3a8.dec_label_pc_e3a8_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e3c4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e3c4, i32* %stack_var_-352, align 4
  %v1_e3d0467 = add i32 %v0_e3c4, 8
  store i32 %v1_e3d0467, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_e3d8468 = add i32 %v0_e3c4, 1548
  store i32 %v1_e3d8468, i32* @lr, align 4
  %v7_e3dc469 = icmp eq i32 %v1_e3d0467, 128
  %v2_e3e0470 = load i32, i32* @sp, align 4
  %v3_e3e0471 = add i32 %v2_e3e0470, %v1_e3d8468
  %v4_e3e0472 = inttoptr i32 %v3_e3e0471 to i32*
  store i32 0, i32* %v4_e3e0472, align 4
  br i1 %v7_e3dc469, label %dec_label_pc_e3e8, label %dec_label_pc_e3cc.dec_label_pc_e3cc_crit_edge

dec_label_pc_e3cc.dec_label_pc_e3cc_crit_edge:    ; preds = %dec_label_pc_e3c4, %dec_label_pc_e3cc.dec_label_pc_e3cc_crit_edge
  %v0_e3cc.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_e3d0 = add i32 %v0_e3cc.pre, 4
  store i32 %v1_e3d0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_e3d8 = add i32 %v0_e3cc.pre, 1544
  store i32 %v1_e3d8, i32* @lr, align 4
  %v7_e3dc = icmp eq i32 %v1_e3d0, 128
  %v2_e3e0 = load i32, i32* @sp, align 4
  %v3_e3e0 = add i32 %v2_e3e0, %v1_e3d8
  %v4_e3e0 = inttoptr i32 %v3_e3e0 to i32*
  store i32 0, i32* %v4_e3e0, align 4
  br i1 %v7_e3dc, label %dec_label_pc_e3e8, label %dec_label_pc_e3cc.dec_label_pc_e3cc_crit_edge

dec_label_pc_e3e8:                                ; preds = %dec_label_pc_e3cc.dec_label_pc_e3cc_crit_edge, %dec_label_pc_e3c4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e3e8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e3e8, i32* @r6, align 4
  store i32 %v0_e3e8, i32* @r5, align 4
  store i32 %v0_e3e8, i32* %stack_var_-52, align 4
  %v2_f278 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e444

dec_label_pc_e3f8:                                ; preds = %dec_label_pc_e474
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e460, i1* %cpsr_z.global-to-local, align 1
  %v1_f26c = add i32 %v2_e458, 4
  %v2_f26c = inttoptr i32 %v1_f26c to i32*
  %v3_f26c = load i32, i32* %v2_f26c, align 4
  br i1 %v7_e460, label %dec_label_pc_f26c, label %dec_label_pc_e400

dec_label_pc_e400:                                ; preds = %dec_label_pc_e3f8
  store i32 %v3_f26c, i32* %ip.global-to-local, align 4
  %v3_e404 = udiv i32 %v3_f26c, 32
  store i32 %v2_f278, i32* %r0.global-to-local, align 4
  %v3_e40c = mul nuw nsw i32 %v3_e404, 4
  %v2_e410 = add i32 %v3_e40c, %v2_f278
  store i32 %v2_e410, i32* %r3.global-to-local, align 4
  %v1_e414 = add i32 %v2_e410, -184
  %v2_e414 = inttoptr i32 %v1_e414 to i32*
  %v3_e414 = load i32, i32* %v2_e414, align 4
  %v1_e418 = urem i32 %v3_f26c, 32
  store i32 %v1_e418, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_e420 = shl i32 1, %v1_e418
  %v8_e420 = or i32 %v3_e414, %v7_e420
  store i32 %v8_e420, i32* %r2.global-to-local, align 4
  store i32 %v8_e420, i32* %v2_e414, align 4
  %v0_e428 = load i32, i32* @r6, align 4
  %v1_e428 = load i32, i32* %ip.global-to-local, align 4
  %v3_e428 = icmp uge i32 %v0_e428, %v1_e428
  store i1 %v3_e428, i1* %cpsr_c.global-to-local, align 1
  %v9_e428 = icmp eq i32 %v0_e428, %v1_e428
  store i1 %v9_e428, i1* %cpsr_z.global-to-local, align 1
  %v5_e42c = icmp slt i32 %v0_e428, %v1_e428
  br i1 %v5_e42c, label %bb368, label %bb369

bb368:                                            ; preds = %dec_label_pc_e400
  store i32 %v1_e428, i32* @r6, align 4
  br label %bb369

bb369:                                            ; preds = %.thread55, %bb375, %bb373, %bb418, %dec_label_pc_e4d8, %dec_label_pc_e400, %bb368
  %v3_e430 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_e430, i32* %r3.global-to-local, align 4
  %v1_e434 = add i32 %v3_e430, 1
  store i32 %v1_e434, i32* %r2.global-to-local, align 4
  %v2_e438 = icmp ugt i32 %v1_e434, 254
  store i1 %v2_e438, i1* %cpsr_c.global-to-local, align 1
  %v7_e438 = icmp eq i32 %v1_e434, 255
  store i1 %v7_e438, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e434, i32* %stack_var_-52, align 4
  %v8_e440 = icmp sgt i32 %v1_e434, 255
  br i1 %v8_e440, label %dec_label_pc_e4e4, label %dec_label_pc_e444

dec_label_pc_e444:                                ; preds = %bb369, %dec_label_pc_e3e8
  %v0_e450 = phi i32 [ %v1_e434, %bb369 ], [ %v0_e3e8, %dec_label_pc_e3e8 ]
  store i32 ptrtoint (i32* @global_var_1fbe8.126 to i32), i32* %r0.global-to-local, align 4
  %v3_e448 = mul i32 %v0_e450, 256
  store i32 %v3_e448, i32* %r3.global-to-local, align 4
  %v2_e44c = load i32, i32* @global_var_1fbe8.126, align 4
  store i32 %v2_e44c, i32* %r1.global-to-local, align 4
  %v2_e454 = mul i32 %v0_e450, 288
  store i32 %v2_e454, i32* %r2.global-to-local, align 4
  %v2_e458 = add i32 %v2_e44c, %v2_e454
  store i32 %v2_e458, i32* @r4, align 4
  %v1_e45c = add i32 %v2_e458, 12
  %v2_e45c = inttoptr i32 %v1_e45c to i32*
  %v3_e45c = load i32, i32* %v2_e45c, align 4
  store i32 %v3_e45c, i32* %ip.global-to-local, align 4
  %v2_e460 = icmp ne i32 %v3_e45c, 0
  store i1 %v2_e460, i1* %cpsr_c.global-to-local, align 1
  %v7_e460 = icmp eq i32 %v3_e45c, 1
  store i1 %v7_e460, i1* %cpsr_z.global-to-local, align 1
  %v2_e464 = xor i1 %v2_e460, true
  %v3_e464 = or i1 %v7_e460, %v2_e464
  br i1 %v3_e464, label %bb370, label %bb371

bb370:                                            ; preds = %dec_label_pc_e444
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb371

bb371:                                            ; preds = %dec_label_pc_e444, %bb370
  %v1_e484165 = phi i32 [ %v2_e44c, %dec_label_pc_e444 ], [ 5, %bb370 ]
  %v2_e468 = xor i1 %v7_e460, true
  %v3_e468 = and i1 %v2_e460, %v2_e468
  br i1 %v3_e468, label %bb372, label %bb373

bb372:                                            ; preds = %bb371
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb373

bb373:                                            ; preds = %bb371, %bb372
  %v1_e484 = phi i32 [ %v1_e484165, %bb371 ], [ 30, %bb372 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e46c = icmp eq i32 %v3_e45c, 0
  store i1 %v2_e46c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e46c, label %bb369, label %dec_label_pc_e474

dec_label_pc_e474:                                ; preds = %bb373
  store i32 ptrtoint (i32* @global_var_1db9c.115 to i32), i32* %r2.global-to-local, align 4
  %v2_e478 = load i32, i32* @global_var_1db9c.115, align 4
  store i32 %v2_e478, i32* %r3.global-to-local, align 4
  %v1_e47c = add i32 %v2_e458, 8
  %v2_e47c = inttoptr i32 %v1_e47c to i32*
  %v3_e47c = load i32, i32* %v2_e47c, align 4
  store i32 %v3_e47c, i32* %r2.global-to-local, align 4
  %v2_e480 = sub i32 %v2_e478, %v3_e47c
  store i32 %v2_e480, i32* %r3.global-to-local, align 4
  %v3_e484 = icmp uge i32 %v2_e480, %v1_e484
  store i1 %v3_e484, i1* %cpsr_c.global-to-local, align 1
  %v9_e484 = icmp eq i32 %v2_e480, %v1_e484
  store i1 %v9_e484, i1* %cpsr_z.global-to-local, align 1
  %v2_e488 = xor i1 %v3_e484, true
  %v3_e488 = or i1 %v9_e484, %v2_e488
  br i1 %v3_e488, label %dec_label_pc_e3f8, label %dec_label_pc_e48c

dec_label_pc_e48c:                                ; preds = %dec_label_pc_e474
  %v1_e48c = add i32 %v2_e458, 4
  %v2_e48c = inttoptr i32 %v1_e48c to i32*
  %v3_e48c = load i32, i32* %v2_e48c, align 4
  store i32 %v3_e48c, i32* %r0.global-to-local, align 4
  %v1_e490 = call i32 @function_101d8(i32 %v3_e48c)
  store i32 %v1_e490, i32* %r0.global-to-local, align 4
  %v0_e494 = load i32, i32* @r4, align 4
  %v1_e494 = add i32 %v0_e494, 12
  %v2_e494 = inttoptr i32 %v1_e494 to i32*
  %v3_e494 = load i32, i32* %v2_e494, align 4
  store i32 %v3_e494, i32* %r3.global-to-local, align 4
  %v2_e498 = icmp ugt i32 %v3_e494, 1
  store i1 %v2_e498, i1* %cpsr_c.global-to-local, align 1
  %v7_e498 = icmp eq i32 %v3_e494, 2
  store i1 %v7_e498, i1* %cpsr_z.global-to-local, align 1
  %v2_e49c = xor i1 %v2_e498, true
  %v3_e49c = or i1 %v7_e498, %v2_e49c
  br i1 %v3_e49c, label %bb374, label %.thread267

.thread267:                                       ; preds = %dec_label_pc_e48c
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_e4a4264268 = add i32 %v0_e494, 4
  %v3_e4a4265269 = inttoptr i32 %v2_e4a4264268 to i32*
  store i32 -1, i32* %v3_e4a4265269, align 4
  br label %bb375

bb374:                                            ; preds = %dec_label_pc_e48c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_e4a4261 = add i32 %v0_e494, 4
  %v3_e4a4262 = inttoptr i32 %v2_e4a4261 to i32*
  store i32 -1, i32* %v3_e4a4262, align 4
  %v4_e4a8 = load i32, i32* %r3.global-to-local, align 4
  %v5_e4a8 = load i32, i32* @r4, align 4
  %v6_e4a8 = add i32 %v5_e4a8, 12
  %v7_e4a8 = inttoptr i32 %v6_e4a8 to i32*
  store i32 %v4_e4a8, i32* %v7_e4a8, align 4
  %v4_e4ac = load i32, i32* %r3.global-to-local, align 4
  %v5_e4ac = trunc i32 %v4_e4ac to i8
  %v6_e4ac = load i32, i32* @r4, align 4
  %v7_e4ac = add i32 %v6_e4ac, 284
  %v8_e4ac = inttoptr i32 %v7_e4ac to i8*
  store i8 %v5_e4ac, i8* %v8_e4ac, align 1
  %v0_e4b0.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_e4b0.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb375

bb375:                                            ; preds = %.thread267, %bb374
  %v1_e4b0 = phi i1 [ %v1_e4b0.pre, %bb374 ], [ %v2_e498, %.thread267 ]
  %v0_e4b0 = phi i1 [ %v0_e4b0.pre, %bb374 ], [ false, %.thread267 ]
  %v2_e4b0 = xor i1 %v1_e4b0, true
  %v3_e4b0 = or i1 %v0_e4b0, %v2_e4b0
  br i1 %v3_e4b0, label %bb369, label %dec_label_pc_e4b4

dec_label_pc_e4b4:                                ; preds = %bb375
  %v0_e4b4 = load i32, i32* @r4, align 4
  %v1_e4b4 = add i32 %v0_e4b4, 284
  %v2_e4b4 = inttoptr i32 %v1_e4b4 to i8*
  %v3_e4b4 = load i8, i8* %v2_e4b4, align 1
  %v4_e4b4 = zext i8 %v3_e4b4 to i32
  %v1_e4b8 = add nuw nsw i32 %v4_e4b4, 1
  %v1_e4bc = urem i32 %v1_e4b8, 256
  store i32 %v1_e4bc, i32* %r3.global-to-local, align 4
  %v2_e4c0 = icmp ugt i32 %v1_e4bc, 9
  store i1 %v2_e4c0, i1* %cpsr_c.global-to-local, align 1
  %v7_e4c0 = icmp eq i32 %v1_e4bc, 10
  store i1 %v7_e4c0, i1* %cpsr_z.global-to-local, align 1
  %v1_e4c4 = trunc i32 %v1_e4b8 to i8
  store i8 %v1_e4c4, i8* %v2_e4b4, align 1
  %v0_e4c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e4c8, label %.thread55, label %dec_label_pc_e4d8

.thread55:                                        ; preds = %dec_label_pc_e4b4
  %v1_e4c8 = load i32, i32* %r3.global-to-local, align 4
  %v2_e4c8 = add i32 %v1_e4c8, -10
  store i32 %v2_e4c8, i32* %r3.global-to-local, align 4
  %v2_e4cc = load i32, i32* @r4, align 4
  %v3_e4cc = add i32 %v2_e4cc, 12
  %v4_e4cc = inttoptr i32 %v3_e4cc to i32*
  store i32 %v2_e4c8, i32* %v4_e4cc, align 4
  %v1_e4d0 = load i32, i32* %r3.global-to-local, align 4
  %v2_e4d0 = trunc i32 %v1_e4d0 to i8
  %v3_e4d0 = load i32, i32* @r4, align 4
  %v4_e4d0 = add i32 %v3_e4d0, 284
  %v5_e4d0 = inttoptr i32 %v4_e4d0 to i8*
  store i8 %v2_e4d0, i8* %v5_e4d0, align 1
  %v0_e4d4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e4d4.pr.pr, label %bb369, label %dec_label_pc_e4d8

dec_label_pc_e4d8:                                ; preds = %dec_label_pc_e4b4, %.thread55
  %v0_e4d8 = load i32, i32* @r4, align 4
  store i32 %v0_e4d8, i32* @r0, align 4
  %v0_e4dc = call i32 @function_da7c()
  store i32 %v0_e4dc, i32* %r0.global-to-local, align 4
  br label %bb369

dec_label_pc_e4e4:                                ; preds = %bb369
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_e4f0 = load i32, i32* @r5, align 4
  %v1_e4f0 = load i32, i32* @r6, align 4
  %v3_e4f0 = icmp uge i32 %v0_e4f0, %v1_e4f0
  store i1 %v3_e4f0, i1* %cpsr_c.global-to-local, align 1
  %v9_e4f0 = icmp eq i32 %v0_e4f0, %v1_e4f0
  store i1 %v9_e4f0, i1* %cpsr_z.global-to-local, align 1
  %v5_e4f4 = icmp slt i32 %v0_e4f0, %v1_e4f0
  %storemerge126 = select i1 %v5_e4f4, i32 %v1_e4f0, i32 %v0_e4f0
  %v2_e508 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_e508, i32* %ip.global-to-local, align 4
  %v2_e50c = ptrtoint i32* %stack_var_-224 to i32
  store i32 %v2_e50c, i32* %r1.global-to-local, align 4
  %v2_e510 = ptrtoint i32* %stack_var_-352 to i32
  store i32 %v2_e510, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e518 = add i32 %storemerge126, 1
  store i32 %v1_e518, i32* %r0.global-to-local, align 4
  %v5_e524 = call i32 @function_fefc(i32 %v1_e518, i32 %v2_e50c, i32 %v2_e510, i32 0, i32 %v2_e508)
  %v0_e528 = load i32, i32* @r4, align 4
  store i32 %v0_e528, i32* %r0.global-to-local, align 4
  %v1_e52c = inttoptr i32 %v0_e528 to i32*
  %v2_e52c = call i32 @function_fe58(i32* %v1_e52c)
  store i32 %v2_e52c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1db9c.115 to i32), i32* @lr, align 4
  %v0_e534 = load i32, i32* @r4, align 4
  store i32 %v0_e534, i32* %stack_var_-52, align 4
  store i32 %v2_e52c, i32* @global_var_1db9c.115, align 4
  %v2_e5c0 = inttoptr i32 %stack_var_-1876.0 to i32*
  %v2_ee0c = ptrtoint i32* %stack_var_-45 to i32
  %v2_ee20 = ptrtoint i32* %stack_var_-77 to i32
  %v2_eb40 = ptrtoint i32* %stack_var_-60 to i32
  %v2_ef50 = ptrtoint i32* %stack_var_-104 to i32
  %v2_f17c = ptrtoint i32* %stack_var_-96 to i32
  %v2_f1a8 = ptrtoint i32* %stack_var_-56 to i32
  %v2_f1d4 = ptrtoint i32* %stack_var_-42 to i32
  br label %dec_label_pc_e53c

dec_label_pc_e53c:                                ; preds = %dec_label_pc_e6ac, %dec_label_pc_e4e4
  %v0_e548 = phi i32 [ %v1_e6b0, %dec_label_pc_e6ac ], [ %v0_e534, %dec_label_pc_e4e4 ]
  store i32 ptrtoint (i32* @global_var_1fbe8.126 to i32), i32* %r0.global-to-local, align 4
  %v3_e540 = mul i32 %v0_e548, 256
  store i32 %v3_e540, i32* %r3.global-to-local, align 4
  %v2_e544 = load i32, i32* @global_var_1fbe8.126, align 4
  store i32 %v2_e544, i32* %r1.global-to-local, align 4
  %v2_e54c = mul i32 %v0_e548, 288
  store i32 %v2_e54c, i32* %r2.global-to-local, align 4
  %v2_e550 = add i32 %v2_e544, %v2_e54c
  store i32 %v2_e550, i32* @r6, align 4
  %v1_e554 = add i32 %v2_e550, 4
  %v2_e554 = inttoptr i32 %v1_e554 to i32*
  %v3_e554 = load i32, i32* %v2_e554, align 4
  store i32 %v3_e554, i32* %r0.global-to-local, align 4
  %v2_e558 = icmp eq i32 %v3_e554, -1
  store i1 %v2_e558, i1* %cpsr_c.global-to-local, align 1
  %v7_e558 = icmp eq i32 %v3_e554, -1
  store i1 %v7_e558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e558, label %dec_label_pc_e6ac, label %dec_label_pc_e560

dec_label_pc_e560:                                ; preds = %dec_label_pc_e53c
  %v3_e560 = udiv i32 %v3_e554, 32
  store i32 %v2_f278, i32* %r1.global-to-local, align 4
  %v3_e568 = mul nuw nsw i32 %v3_e560, 4
  store i32 %v3_e568, i32* @ip, align 4
  %v2_e56c = add i32 %v3_e568, %v2_f278
  store i32 %v2_e56c, i32* %r2.global-to-local, align 4
  %v1_e570 = add i32 %v2_e56c, -312
  %v2_e570 = inttoptr i32 %v1_e570 to i32*
  %v3_e570 = load i32, i32* %v2_e570, align 4
  %v1_e574 = urem i32 %v3_e554, 32
  store i32 %v1_e574, i32* %r1.global-to-local, align 4
  %v2_e578 = add nsw i32 %v1_e574, -1
  %v3_e578 = shl i32 1, %v2_e578
  %v4_e578 = and i32 %v3_e570, %v3_e578
  %v5_e578 = icmp ne i32 %v4_e578, 0
  store i1 %v5_e578, i1* %cpsr_c.global-to-local, align 1
  %v6_e578 = lshr i32 %v3_e570, %v1_e574
  store i32 %v6_e578, i32* %r3.global-to-local, align 4
  %v1_e57c = urem i32 %v6_e578, 2
  %v2_e57c = icmp eq i32 %v1_e57c, 0
  store i1 %v2_e57c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e57c, label %dec_label_pc_e584, label %dec_label_pc_f038

dec_label_pc_e584:                                ; preds = %dec_label_pc_e560, %dec_label_pc_f0e4
  %v1_e590 = phi i32 [ %v1_e574, %dec_label_pc_e560 ], [ %v1_e590.pre, %dec_label_pc_f0e4 ]
  %v0_e588 = phi i32 [ %v3_e568, %dec_label_pc_e560 ], [ %v0_e588.pre, %dec_label_pc_f0e4 ]
  store i32 %v2_f278, i32* @lr, align 4
  %v2_e588 = add i32 %v0_e588, %v2_f278
  store i32 %v2_e588, i32* %r2.global-to-local, align 4
  %v1_e58c = add i32 %v2_e588, -184
  %v2_e58c = inttoptr i32 %v1_e58c to i32*
  %v3_e58c = load i32, i32* %v2_e58c, align 4
  %v2_e590 = add i32 %v1_e590, -1
  %v3_e590 = shl i32 1, %v2_e590
  %v4_e590 = and i32 %v3_e58c, %v3_e590
  %v5_e590 = icmp ne i32 %v4_e590, 0
  store i1 %v5_e590, i1* %cpsr_c.global-to-local, align 1
  %v6_e590 = lshr i32 %v3_e58c, %v1_e590
  store i32 %v6_e590, i32* %r3.global-to-local, align 4
  %v1_e594 = urem i32 %v6_e590, 2
  %v2_e594 = icmp eq i32 %v1_e594, 0
  store i1 %v2_e594, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e594, label %dec_label_pc_e6ac, label %dec_label_pc_e59c.preheader

dec_label_pc_e59c.preheader:                      ; preds = %dec_label_pc_e584
  %v0_e59c149 = load i32, i32* @r6, align 4
  %v1_e59c150 = add i32 %v0_e59c149, 12
  %v2_e59c151 = inttoptr i32 %v1_e59c150 to i32*
  %v3_e59c152 = load i32, i32* %v2_e59c151, align 4
  store i32 %v3_e59c152, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5a0148154 = icmp eq i32 %v3_e59c152, 0
  store i1 %v2_e5a0148154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5a0148154, label %dec_label_pc_e6ac, label %dec_label_pc_e5a8.lr.ph

dec_label_pc_e59c.loopexit:                       ; preds = %dec_label_pc_eef4, %dec_label_pc_ed10, %dec_label_pc_ec28, %dec_label_pc_f248
  %v0_e59c = load i32, i32* @r6, align 4
  %v1_e59c = add i32 %v0_e59c, 12
  %v2_e59c = inttoptr i32 %v1_e59c to i32*
  %v3_e59c = load i32, i32* %v2_e59c, align 4
  store i32 %v3_e59c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5a0148 = icmp eq i32 %v3_e59c, 0
  store i1 %v2_e5a0148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5a0148, label %dec_label_pc_e6ac, label %dec_label_pc_e5a8.lr.ph

dec_label_pc_e5a8.lr.ph:                          ; preds = %dec_label_pc_e59c.preheader, %dec_label_pc_e59c.loopexit
  %v0_e5a8180 = phi i32 [ %v0_e59c, %dec_label_pc_e59c.loopexit ], [ %v0_e59c149, %dec_label_pc_e59c.preheader ]
  br label %dec_label_pc_e5a8

dec_label_pc_e5a0thread-pre-split.thread:         ; preds = %dec_label_pc_e764, %dec_label_pc_e838, %dec_label_pc_e90c, %dec_label_pc_e9e0, %dec_label_pc_eab4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e5a8

dec_label_pc_e5a0thread-pre-split.thread512:      ; preds = %dec_label_pc_eb18, %dec_label_pc_e970, %dec_label_pc_e89c, %dec_label_pc_ea44, %dec_label_pc_e7c8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e5a8

dec_label_pc_e5a0thread-pre-split:                ; preds = %dec_label_pc_e620
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5a0 = icmp eq i32 %v3_e620, 0
  store i1 %v2_e5a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5a0, label %dec_label_pc_e6ac, label %dec_label_pc_e5a8

dec_label_pc_e5a8:                                ; preds = %dec_label_pc_e5a0thread-pre-split.thread, %dec_label_pc_e5a0thread-pre-split, %dec_label_pc_e5a0thread-pre-split.thread512, %dec_label_pc_e5a8.lr.ph
  %v0_efe4 = phi i32 [ %v0_e5a8180, %dec_label_pc_e5a8.lr.ph ], [ %v0_e620, %dec_label_pc_e5a0thread-pre-split.thread512 ], [ %v0_e620, %dec_label_pc_e5a0thread-pre-split ], [ %v0_e620, %dec_label_pc_e5a0thread-pre-split.thread ]
  %v1_e5a8 = add i32 %v0_efe4, 24
  %v2_e5a8 = inttoptr i32 %v1_e5a8 to i32*
  %v3_e5a8 = load i32, i32* %v2_e5a8, align 4
  store i32 %v3_e5a8, i32* @r3, align 4
  %v2_e5ac = icmp ugt i32 %v3_e5a8, 255
  store i1 %v2_e5ac, i1* %cpsr_c.global-to-local, align 1
  %v7_e5ac = icmp eq i32 %v3_e5a8, 256
  store i1 %v7_e5ac, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_efe4, 28
  store i32 %.pre, i32* @fp, align 4
  br i1 %v7_e5ac, label %dec_label_pc_efe4, label %dec_label_pc_e5b8

dec_label_pc_e5b8:                                ; preds = %dec_label_pc_e5a8, %dec_label_pc_efe4
  store i32 %stack_var_-1876.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v2_e5c0, align 4
  %v0_e5c4 = load i32, i32* @r6, align 4
  %v1_e5c4 = add i32 %v0_e5c4, 24
  %v2_e5c4 = inttoptr i32 %v1_e5c4 to i32*
  %v3_e5c4 = load i32, i32* %v2_e5c4, align 4
  store i32 %v3_e5c4, i32* %r2.global-to-local, align 4
  %v0_e5c8 = load i32, i32* @fp, align 4
  %v2_e5c8 = add i32 %v0_e5c8, %v3_e5c4
  store i32 %v2_e5c8, i32* @r4, align 4
  %v1_e5cc = add i32 %v0_e5c4, 4
  %v2_e5cc = inttoptr i32 %v1_e5cc to i32*
  %v3_e5cc = load i32, i32* %v2_e5cc, align 4
  store i32 %v3_e5cc, i32* %r0.global-to-local, align 4
  %v1_e5d0 = sub i32 256, %v3_e5c4
  store i32 %v1_e5d0, i32* %r2.global-to-local, align 4
  store i32 %v2_e5c8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e5dc = call i32 @function_10890(i32 %v3_e5cc, i32 %v2_e5c8, i32 %v1_e5d0, i32 16384)
  store i32 %v4_e5dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5e0 = icmp eq i32 %v4_e5dc, 0
  store i1 %v2_e5e0, i1* %cpsr_z.global-to-local, align 1
  %tmp376 = icmp slt i32 %v4_e5dc, 1
  br i1 %tmp376, label %dec_label_pc_e658, label %dec_label_pc_e5e8

dec_label_pc_e5e8:                                ; preds = %dec_label_pc_e5b8
  %v0_e5e8 = load i32, i32* @r5, align 4
  store i32 %v0_e5e8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e5ec

dec_label_pc_e5ec:                                ; preds = %.thread62, %dec_label_pc_e5e8
  %v3_e5f8 = phi i32 [ %v1_e5fc, %.thread62 ], [ %v0_e5e8, %dec_label_pc_e5e8 ]
  %v1_e5ec = load i32, i32* @r4, align 4
  %v2_e5ec = add i32 %v1_e5ec, %v3_e5f8
  %v3_e5ec = inttoptr i32 %v2_e5ec to i8*
  %v4_e5ec = load i8, i8* %v3_e5ec, align 1
  %v6_e5ec = zext i8 %v4_e5ec to i32
  store i32 %v6_e5ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5f0 = icmp eq i8 %v4_e5ec, 0
  store i1 %v2_e5f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5f0, label %bb377, label %.thread62

bb377:                                            ; preds = %dec_label_pc_e5ec
  %v2_e5f4 = add nuw nsw i32 %v6_e5ec, 65
  store i32 %v2_e5f4, i32* %r3.global-to-local, align 4
  %v2_e5f8 = trunc i32 %v2_e5f4 to i8
  store i8 %v2_e5f8, i8* %v3_e5ec, align 1
  %v0_e5fc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread62

.thread62:                                        ; preds = %dec_label_pc_e5ec, %bb377
  %v0_e5fc = phi i32 [ %v3_e5f8, %dec_label_pc_e5ec ], [ %v0_e5fc.pre, %bb377 ]
  %v1_e5fc = add i32 %v0_e5fc, 1
  store i32 %v1_e5fc, i32* %r2.global-to-local, align 4
  %v3_e600 = icmp uge i32 %v1_e5fc, %v4_e5dc
  store i1 %v3_e600, i1* %cpsr_c.global-to-local, align 1
  %v9_e600 = icmp eq i32 %v1_e5fc, %v4_e5dc
  store i1 %v9_e600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e600, label %dec_label_pc_e608, label %dec_label_pc_e5ec

dec_label_pc_e608:                                ; preds = %.thread62, %dec_label_pc_e65c
  store i32 ptrtoint (i32* @global_var_1db9c.115 to i32), i32* @ip, align 4
  %v0_e60c = load i32, i32* @r6, align 4
  %v1_e60c = add i32 %v0_e60c, 24
  %v2_e60c = inttoptr i32 %v1_e60c to i32*
  %v3_e60c = load i32, i32* %v2_e60c, align 4
  %v2_e610 = load i32, i32* @global_var_1db9c.115, align 4
  store i32 %v2_e610, i32* %r2.global-to-local, align 4
  %v2_e614 = add i32 %v3_e60c, %v4_e5dc
  store i32 %v2_e614, i32* %r3.global-to-local, align 4
  store i32 %v2_e614, i32* %v2_e60c, align 4
  %v0_e61c = load i32, i32* %r2.global-to-local, align 4
  %v1_e61c = load i32, i32* @r6, align 4
  %v2_e61c = add i32 %v1_e61c, 8
  %v3_e61c = inttoptr i32 %v2_e61c to i32*
  store i32 %v0_e61c, i32* %v3_e61c, align 4
  br label %dec_label_pc_e620

dec_label_pc_e620:                                ; preds = %dec_label_pc_e73c, %dec_label_pc_e608
  %v0_e620 = load i32, i32* @r6, align 4
  %v1_e620 = add i32 %v0_e620, 12
  %v2_e620 = inttoptr i32 %v1_e620 to i32*
  %v3_e620 = load i32, i32* %v2_e620, align 4
  store i32 %v3_e620, i32* %r0.global-to-local, align 4
  %v1_e624 = add i32 %v3_e620, -2
  store i32 %v1_e624, i32* @r3, align 4
  %v7_e628 = icmp eq i32 %v1_e624, 8
  store i1 %v7_e628, i1* %cpsr_z.global-to-local, align 1
  %v5_e62c = and i32 %v1_e624, 1073741824
  %v6_e62c = icmp ne i32 %v5_e62c, 0
  store i1 %v6_e62c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_e620, label %dec_label_pc_e5a0thread-pre-split [
    i32 2, label %dec_label_pc_ed38
    i32 3, label %dec_label_pc_eb88
    i32 4, label %dec_label_pc_ec34
    i32 5, label %dec_label_pc_eab4
    i32 6, label %dec_label_pc_e90c
    i32 7, label %dec_label_pc_e838
    i32 8, label %dec_label_pc_e9e0
    i32 9, label %dec_label_pc_e764
    i32 10, label %dec_label_pc_e6c4
  ]

dec_label_pc_e658:                                ; preds = %dec_label_pc_e5b8
  br i1 %v2_e5e0, label %dec_label_pc_f29c, label %dec_label_pc_e65c

dec_label_pc_e65c:                                ; preds = %dec_label_pc_e658
  %v3_e65c = icmp eq i32 %v4_e5dc, -1
  store i1 %v3_e65c, i1* %cpsr_c.global-to-local, align 1
  %v8_e65c = icmp eq i32 %v4_e5dc, -1
  store i1 %v8_e65c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e65c, label %dec_label_pc_e664, label %dec_label_pc_e608

dec_label_pc_e664:                                ; preds = %dec_label_pc_e65c
  store i32 %stack_var_-1876.0, i32* %r2.global-to-local, align 4
  %v2_e668 = load i32, i32* %v2_e5c0, align 4
  store i32 %v2_e668, i32* %r3.global-to-local, align 4
  %v2_e66c = icmp ugt i32 %v2_e668, 10
  store i1 %v2_e66c, i1* %cpsr_c.global-to-local, align 1
  %v7_e66c = icmp eq i32 %v2_e668, 11
  store i1 %v7_e66c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e66c, label %dec_label_pc_e6ac, label %dec_label_pc_e674

dec_label_pc_e674:                                ; preds = %dec_label_pc_e664, %dec_label_pc_f29c
  %v0_e674 = load i32, i32* @r6, align 4
  %v1_e674 = add i32 %v0_e674, 4
  %v2_e674 = inttoptr i32 %v1_e674 to i32*
  %v3_e674 = load i32, i32* %v2_e674, align 4
  store i32 %v3_e674, i32* %r0.global-to-local, align 4
  %v1_e678 = call i32 @function_101d8(i32 %v3_e674)
  store i32 %v1_e678, i32* %r0.global-to-local, align 4
  %v0_e67c = load i32, i32* @r6, align 4
  %v1_e67c = add i32 %v0_e67c, 284
  %v2_e67c = inttoptr i32 %v1_e67c to i8*
  %v3_e67c = load i8, i8* %v2_e67c, align 1
  %v4_e67c = zext i8 %v3_e67c to i32
  %v1_e680 = add nuw nsw i32 %v4_e67c, 1
  %v1_e684 = urem i32 %v1_e680, 256
  store i32 %v1_e684, i32* %r3.global-to-local, align 4
  %v2_e688 = icmp ugt i32 %v1_e684, 8
  store i1 %v2_e688, i1* %cpsr_c.global-to-local, align 1
  %v7_e688 = icmp eq i32 %v1_e684, 9
  store i1 %v7_e688, i1* %cpsr_z.global-to-local, align 1
  %v1_e68c = trunc i32 %v1_e680 to i8
  store i8 %v1_e68c, i8* %v2_e67c, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_e694 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_e694 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_e694 = xor i1 %v1_e694, true
  %v3_e694 = and i1 %v0_e694, %v2_e694
  br i1 %v3_e694, label %bb378, label %.thread281

.thread281:                                       ; preds = %dec_label_pc_e674
  %v1_e698277282 = load i32, i32* @r6, align 4
  %v2_e698278283 = add i32 %v1_e698277282, 4
  %v3_e698279284 = inttoptr i32 %v2_e698278283 to i32*
  store i32 -1, i32* %v3_e698279284, align 4
  br label %bb379

bb378:                                            ; preds = %dec_label_pc_e674
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e698273 = load i32, i32* @r6, align 4
  %v2_e698274 = add i32 %v1_e698273, 4
  %v3_e698275 = inttoptr i32 %v2_e698274 to i32*
  store i32 -1, i32* %v3_e698275, align 4
  %v4_e69c = load i32, i32* %r3.global-to-local, align 4
  %v5_e69c = load i32, i32* @r6, align 4
  %v6_e69c = add i32 %v5_e69c, 12
  %v7_e69c = inttoptr i32 %v6_e69c to i32*
  store i32 %v4_e69c, i32* %v7_e69c, align 4
  %v4_e6a0 = load i32, i32* %r3.global-to-local, align 4
  %v5_e6a0 = trunc i32 %v4_e6a0 to i8
  %v6_e6a0 = load i32, i32* @r6, align 4
  %v7_e6a0 = add i32 %v6_e6a0, 284
  %v8_e6a0 = inttoptr i32 %v7_e6a0 to i8*
  store i8 %v5_e6a0, i8* %v8_e6a0, align 1
  %v0_e6a4.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_e6a4.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb379

bb379:                                            ; preds = %.thread281, %bb378
  %v1_e6a8 = phi i1 [ %v1_e6a4.pre, %bb378 ], [ %v0_e694, %.thread281 ]
  %v0_e6a8 = phi i1 [ %v0_e6a4.pre, %bb378 ], [ %v1_e694, %.thread281 ]
  %v2_e6a4 = xor i1 %v1_e6a8, true
  %v3_e6a4 = or i1 %v0_e6a8, %v2_e6a4
  br i1 %v3_e6a4, label %bb380, label %bb381

bb380:                                            ; preds = %bb379
  %v4_e6a4 = load i32, i32* @r6, align 4
  store i32 %v4_e6a4, i32* %r0.global-to-local, align 4
  br label %bb381

bb381:                                            ; preds = %bb379, %bb380
  store i32 59052, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_e6a4, i32 ptrtoint (i32* @global_var_da7c.170 to i32))
  br label %dec_label_pc_e6ac

dec_label_pc_e6ac:                                ; preds = %dec_label_pc_e59c.loopexit, %dec_label_pc_e5a0thread-pre-split, %dec_label_pc_e59c.preheader, %dec_label_pc_e664, %dec_label_pc_e584, %dec_label_pc_e53c, %dec_label_pc_f104, %bb381
  %v3_e6ac = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_e6ac, i32* %r3.global-to-local, align 4
  %v1_e6b0 = add i32 %v3_e6ac, 1
  store i32 %v1_e6b0, i32* @r4, align 4
  %v2_e6b4 = icmp ugt i32 %v1_e6b0, 254
  store i1 %v2_e6b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e6b4 = icmp eq i32 %v1_e6b0, 255
  store i1 %v7_e6b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e6b0, i32* %stack_var_-52, align 4
  %v7_e6bc = icmp slt i32 %v1_e6b0, 256
  br i1 %v7_e6bc, label %dec_label_pc_e53c, label %dec_label_pc_df58

dec_label_pc_e6c4:                                ; preds = %dec_label_pc_e620
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_e6c8 = call i32 @function_f370(i32 22)
  store i32 %v2_eb40, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_e6d8 = call i32 @function_f2ac(i32 22, i32* nonnull %stack_var_-60)
  %v3_e6dc = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e6d8, i32* %r2.global-to-local, align 4
  %v1_e6e4 = add i32 %v3_e6dc, -1
  store i32 %v1_e6e4, i32* %r3.global-to-local, align 4
  %v0_e6e8 = load i32, i32* @fp, align 4
  store i32 %v0_e6e8, i32* %r0.global-to-local, align 4
  %v0_e6ec = load i32, i32* @r6, align 4
  %v1_e6ec = add i32 %v0_e6ec, 24
  %v2_e6ec = inttoptr i32 %v1_e6ec to i32*
  %v3_e6ec = load i32, i32* %v2_e6ec, align 4
  store i32 %v3_e6ec, i32* %r1.global-to-local, align 4
  %v4_e6f0 = call i32 @function_f884(i32 %v0_e6e8, i32 %v3_e6ec, i32 %v3_e6d8, i32 %v1_e6e4)
  %v2_e6f4 = icmp eq i32 %v4_e6f0, -1
  store i1 %v2_e6f4, i1* %cpsr_c.global-to-local, align 1
  %v7_e6f4 = icmp eq i32 %v4_e6f0, -1
  store i1 %v7_e6f4, i1* %cpsr_z.global-to-local, align 1
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_eef8 = call i32 @function_f2d0(i32 22)
  br i1 %v7_e6f4, label %dec_label_pc_eef4, label %dec_label_pc_e6fc

dec_label_pc_e6fc:                                ; preds = %dec_label_pc_e6c4
  store i32 %v1_eef8, i32* %r0.global-to-local, align 4
  %v0_e704 = load i32, i32* @r6, align 4
  %v1_e704 = add i32 %v0_e704, 4
  %v2_e704 = inttoptr i32 %v1_e704 to i32*
  %v3_e704 = load i32, i32* %v2_e704, align 4
  store i32 %v3_e704, i32* %r0.global-to-local, align 4
  %v1_e708 = call i32 @function_101d8(i32 %v3_e704)
  store i32 %v1_e708, i32* %r0.global-to-local, align 4
  %v0_e70c = load i32, i32* @r6, align 4
  %v1_e70c = add i32 %v0_e70c, 284
  %v2_e70c = inttoptr i32 %v1_e70c to i8*
  %v3_e70c = load i8, i8* %v2_e70c, align 1
  %v4_e70c = zext i8 %v3_e70c to i32
  %v1_e710 = add nuw nsw i32 %v4_e70c, 1
  %v1_e714 = urem i32 %v1_e710, 256
  store i32 %v1_e714, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_e71c = icmp ugt i32 %v1_e714, 9
  store i1 %v2_e71c, i1* %cpsr_c.global-to-local, align 1
  %v7_e71c = icmp eq i32 %v1_e714, 10
  store i1 %v7_e71c, i1* %cpsr_z.global-to-local, align 1
  %v2_e720 = add i32 %v0_e70c, 4
  %v3_e720 = inttoptr i32 %v2_e720 to i32*
  store i32 -1, i32* %v3_e720, align 4
  %v0_e724 = load i32, i32* @r3, align 4
  %v1_e724 = trunc i32 %v0_e724 to i8
  %v2_e724 = load i32, i32* @r6, align 4
  %v3_e724 = add i32 %v2_e724, 284
  %v4_e724 = inttoptr i32 %v3_e724 to i8*
  store i8 %v1_e724, i8* %v4_e724, align 1
  %v0_e728 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e728, label %dec_label_pc_e72c, label %dec_label_pc_f02c

dec_label_pc_e72c:                                ; preds = %dec_label_pc_e6fc
  store i32 0, i32* @r3, align 4
  %v1_e730 = load i32, i32* @r6, align 4
  %v2_e730 = add i32 %v1_e730, 12
  %v3_e730 = inttoptr i32 %v2_e730 to i32*
  store i32 0, i32* %v3_e730, align 4
  %v0_e734 = load i32, i32* @r3, align 4
  %v1_e734 = trunc i32 %v0_e734 to i8
  %v2_e734 = load i32, i32* @r6, align 4
  %v3_e734 = add i32 %v2_e734, 284
  %v4_e734 = inttoptr i32 %v3_e734 to i8*
  store i8 %v1_e734, i8* %v4_e734, align 1
  br label %dec_label_pc_e738

dec_label_pc_e738:                                ; preds = %dec_label_pc_f02c, %dec_label_pc_e72c
  store i32 -1, i32* @r8, align 4
  br label %dec_label_pc_e73c

dec_label_pc_e73c:                                ; preds = %dec_label_pc_ec28, %dec_label_pc_eb30, %dec_label_pc_ea5c, %dec_label_pc_e988, %dec_label_pc_e8b4, %dec_label_pc_e7e0, %dec_label_pc_e738
  %v0_e73c = load i32, i32* @r6, align 4
  %v1_e73c = add i32 %v0_e73c, 24
  %v2_e73c = inttoptr i32 %v1_e73c to i32*
  %v3_e73c = load i32, i32* %v2_e73c, align 4
  %v0_e740 = load i32, i32* @r8, align 4
  %v2_e740 = sub i32 %v0_e740, %v3_e73c
  %v3_e740 = icmp uge i32 %v0_e740, %v3_e73c
  store i1 %v3_e740, i1* %cpsr_c.global-to-local, align 1
  %v4_e740 = xor i32 %v0_e740, %v3_e73c
  %v5_e740 = xor i32 %v2_e740, %v0_e740
  %v6_e740 = and i32 %v5_e740, %v4_e740
  %v7_e740 = icmp slt i32 %v6_e740, 0
  %v8_e740 = icmp slt i32 %v2_e740, 0
  %v9_e740 = icmp eq i32 %v0_e740, %v3_e73c
  store i1 %v9_e740, i1* %cpsr_z.global-to-local, align 1
  %v2_e744 = xor i1 %v8_e740, %v7_e740
  %v0_e740.v3_e73c = select i1 %v2_e744, i32 %v0_e740, i32 %v3_e73c
  store i32 %v0_e740.v3_e73c, i32* %r1.global-to-local, align 4
  %v2_e74c = sub i32 %v3_e73c, %v0_e740.v3_e73c
  store i32 %v2_e74c, i32* @r2, align 4
  store i32 %v2_e74c, i32* %v2_e73c, align 4
  %v0_e754 = load i32, i32* @fp, align 4
  %v1_e754 = load i32, i32* %r1.global-to-local, align 4
  %v2_e754 = add i32 %v1_e754, %v0_e754
  store i32 %v2_e754, i32* @r1, align 4
  store i32 %v0_e754, i32* @r0, align 4
  %v3_e75c = call i32 @function_106f0(i32 %v0_e754, i32 %v2_e754, i32 %v2_e74c)
  store i32 %v3_e75c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e620

dec_label_pc_e764:                                ; preds = %dec_label_pc_e620
  %v1_e764 = add i32 %v0_e620, 24
  %v2_e764 = inttoptr i32 %v1_e764 to i32*
  %v3_e764 = load i32, i32* %v2_e764, align 4
  store i32 %v3_e764, i32* %r2.global-to-local, align 4
  %v1_e768 = add i32 %v3_e764, -1
  store i32 %v1_e768, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e76c = icmp eq i32 %v1_e768, 0
  store i1 %v2_e76c, i1* %cpsr_z.global-to-local, align 1
  %tmp384 = icmp slt i32 %v1_e768, 1
  br i1 %tmp384, label %dec_label_pc_e5a0thread-pre-split.thread, label %dec_label_pc_e774

dec_label_pc_e774:                                ; preds = %dec_label_pc_e764
  %v2_e774 = add i32 %v1_e768, %v0_e620
  store i32 %v2_e774, i32* %r3.global-to-local, align 4
  %v1_e778 = add i32 %v2_e774, 28
  %v2_e778 = inttoptr i32 %v1_e778 to i8*
  %v3_e778 = load i8, i8* %v2_e778, align 1
  %v4_e778 = zext i8 %v3_e778 to i32
  store i32 %v4_e778, i32* %r3.global-to-local, align 4
  %v2_e77c = icmp ugt i8 %v3_e778, 61
  store i1 %v2_e77c, i1* %cpsr_c.global-to-local, align 1
  %v7_e77c = icmp eq i8 %v3_e778, 62
  store i1 %v7_e77c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e77c, label %dec_label_pc_e7e0, label %bb385

bb385:                                            ; preds = %dec_label_pc_e774
  %v3_e780 = icmp ugt i8 %v3_e778, 57
  store i1 %v3_e780, i1* %cpsr_c.global-to-local, align 1
  %v8_e780 = icmp eq i8 %v3_e778, 58
  store i1 %v8_e780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e780, label %dec_label_pc_e7e0, label %dec_label_pc_e788

dec_label_pc_e788:                                ; preds = %bb385
  %v2_e788 = icmp ugt i8 %v3_e778, 35
  store i1 %v2_e788, i1* %cpsr_c.global-to-local, align 1
  %v7_e788 = icmp eq i8 %v3_e778, 36
  store i1 %v7_e788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e788, label %dec_label_pc_e7e0, label %dec_label_pc_e790

dec_label_pc_e790:                                ; preds = %dec_label_pc_e788
  %v2_e790 = icmp ugt i8 %v3_e778, 34
  store i1 %v2_e790, i1* %cpsr_c.global-to-local, align 1
  %v7_e790 = icmp eq i8 %v3_e778, 35
  store i1 %v7_e790, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e790, label %dec_label_pc_e7e0, label %dec_label_pc_e798

dec_label_pc_e798:                                ; preds = %dec_label_pc_e790
  %v2_e798 = icmp ugt i8 %v3_e778, 36
  store i1 %v2_e798, i1* %cpsr_c.global-to-local, align 1
  %v7_e798 = icmp eq i8 %v3_e778, 37
  store i1 %v7_e798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e798, label %dec_label_pc_e7e0, label %dec_label_pc_e7c8.preheader

dec_label_pc_e7c8.preheader:                      ; preds = %dec_label_pc_e798
  %v3_e79c = add i32 %v0_e620, 28
  %v2_e7a0 = add i32 %v3_e79c, %v3_e764
  store i32 %v2_e7a0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e7c8

dec_label_pc_e7ac:                                ; preds = %bb386
  %v2_e7ac = icmp ugt i8 %v3_e7d0, 35
  store i1 %v2_e7ac, i1* %cpsr_c.global-to-local, align 1
  %v7_e7ac = icmp eq i8 %v3_e7d0, 36
  store i1 %v7_e7ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7ac, label %dec_label_pc_e7e0, label %dec_label_pc_e7b4

dec_label_pc_e7b4:                                ; preds = %dec_label_pc_e7ac
  %v2_e7b4 = icmp ugt i8 %v3_e7d0, 34
  store i1 %v2_e7b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7b4 = icmp eq i8 %v3_e7d0, 35
  store i1 %v7_e7b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7b4, label %dec_label_pc_e7e0, label %dec_label_pc_e7bc

dec_label_pc_e7bc:                                ; preds = %dec_label_pc_e7b4
  %v2_e7bc = icmp ugt i8 %v3_e7d0, 36
  store i1 %v2_e7bc, i1* %cpsr_c.global-to-local, align 1
  %v7_e7bc = icmp eq i8 %v3_e7d0, 37
  store i1 %v7_e7bc, i1* %cpsr_z.global-to-local, align 1
  %v1_e7c0 = add i32 %v0_e7c0, -1
  store i32 %v1_e7c0, i32* %r3.global-to-local, align 4
  br i1 %v7_e7bc, label %dec_label_pc_e7e0, label %dec_label_pc_e7c8

dec_label_pc_e7c8:                                ; preds = %dec_label_pc_e7c8.preheader, %dec_label_pc_e7bc
  %v0_e7c0 = phi i32 [ %v2_e7a0, %dec_label_pc_e7c8.preheader ], [ %v1_e7c0, %dec_label_pc_e7bc ]
  %v0_e7c8 = phi i32 [ %v1_e768, %dec_label_pc_e7c8.preheader ], [ %v1_e7c8, %dec_label_pc_e7bc ]
  %v1_e7c8 = add i32 %v0_e7c8, -1
  store i32 %v1_e7c8, i32* %r1.global-to-local, align 4
  %v2_e7c8 = icmp ne i32 %v0_e7c8, 0
  store i1 %v2_e7c8, i1* %cpsr_c.global-to-local, align 1
  %v7_e7c8 = icmp eq i32 %v0_e7c8, 1
  store i1 %v7_e7c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7c8, label %dec_label_pc_e5a0thread-pre-split.thread512, label %dec_label_pc_e7d0

dec_label_pc_e7d0:                                ; preds = %dec_label_pc_e7c8
  %v1_e7d0 = add i32 %v0_e7c0, -2
  %v2_e7d0 = inttoptr i32 %v1_e7d0 to i8*
  %v3_e7d0 = load i8, i8* %v2_e7d0, align 1
  %v4_e7d0 = zext i8 %v3_e7d0 to i32
  store i32 %v4_e7d0, i32* %r2.global-to-local, align 4
  %v2_e7d4 = icmp ugt i8 %v3_e7d0, 61
  store i1 %v2_e7d4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7d4 = icmp eq i8 %v3_e7d0, 62
  store i1 %v7_e7d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7d4, label %dec_label_pc_e7e0, label %bb386

bb386:                                            ; preds = %dec_label_pc_e7d0
  %v3_e7d8 = icmp ugt i8 %v3_e7d0, 57
  store i1 %v3_e7d8, i1* %cpsr_c.global-to-local, align 1
  %v8_e7d8 = icmp eq i8 %v3_e7d0, 58
  store i1 %v8_e7d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e7d8, label %dec_label_pc_e7e0, label %dec_label_pc_e7ac

dec_label_pc_e7e0:                                ; preds = %dec_label_pc_e7d0, %bb386, %dec_label_pc_e7bc, %dec_label_pc_e7b4, %dec_label_pc_e7ac, %dec_label_pc_e798, %dec_label_pc_e774, %dec_label_pc_e790, %dec_label_pc_e788, %bb385
  %v0_e7e4 = phi i32 [ %v1_e768, %dec_label_pc_e798 ], [ %v1_e768, %dec_label_pc_e774 ], [ %v1_e768, %dec_label_pc_e790 ], [ %v1_e768, %dec_label_pc_e788 ], [ %v1_e768, %bb385 ], [ %v1_e7c8, %dec_label_pc_e7ac ], [ %v1_e7c8, %dec_label_pc_e7b4 ], [ %v1_e7c8, %dec_label_pc_e7bc ], [ %v1_e7c8, %bb386 ], [ %v1_e7c8, %dec_label_pc_e7d0 ]
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_e7e4 = add i32 %v0_e7e4, 1
  store i32 %v1_e7e4, i32* @r8, align 4
  %v1_e7e8 = call i32 @function_f370(i32 19)
  store i32 %v2_eb40, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v3_e7f8 = call i32 @function_f2ac(i32 19, i32* nonnull %stack_var_-60)
  store i32 %v3_e7f8, i32* %r0.global-to-local, align 4
  %v3_e7fc = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e7fc, i32* %r2.global-to-local, align 4
  store i32 %v3_e7f8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e808 = load i32, i32* @r6, align 4
  %v1_e808 = add i32 %v0_e808, 4
  %v2_e808 = inttoptr i32 %v1_e808 to i32*
  %v3_e808 = load i32, i32* %v2_e808, align 4
  store i32 %v3_e808, i32* %r0.global-to-local, align 4
  %v4_e80c = call i32 @function_10904(i32 %v3_e808, i32 %v3_e7f8, i32 %v3_e7fc, i32 16384)
  store i32 %v4_e80c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_e81c = load i32, i32* @r6, align 4
  %v1_e81c = add i32 %v0_e81c, 4
  %v2_e81c = inttoptr i32 %v1_e81c to i32*
  %v3_e81c = load i32, i32* %v2_e81c, align 4
  store i32 %v3_e81c, i32* %r0.global-to-local, align 4
  %v4_e820 = call i32 @function_10904(i32 %v3_e81c, i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32 2, i32 16384)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_e828 = call i32 @function_f2d0(i32 19)
  store i32 %v1_e828, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_e830 = load i32, i32* @r6, align 4
  %v2_e830 = add i32 %v1_e830, 12
  %v3_e830 = inttoptr i32 %v2_e830 to i32*
  store i32 10, i32* %v3_e830, align 4
  br label %dec_label_pc_e73c

dec_label_pc_e838:                                ; preds = %dec_label_pc_e620
  %v1_e838 = add i32 %v0_e620, 24
  %v2_e838 = inttoptr i32 %v1_e838 to i32*
  %v3_e838 = load i32, i32* %v2_e838, align 4
  store i32 %v3_e838, i32* %r2.global-to-local, align 4
  %v1_e83c = add i32 %v3_e838, -1
  store i32 %v1_e83c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e840 = icmp eq i32 %v1_e83c, 0
  store i1 %v2_e840, i1* %cpsr_z.global-to-local, align 1
  %tmp387 = icmp slt i32 %v1_e83c, 1
  br i1 %tmp387, label %dec_label_pc_e5a0thread-pre-split.thread, label %dec_label_pc_e848

dec_label_pc_e848:                                ; preds = %dec_label_pc_e838
  %v2_e848 = add i32 %v1_e83c, %v0_e620
  store i32 %v2_e848, i32* %r3.global-to-local, align 4
  %v1_e84c = add i32 %v2_e848, 28
  %v2_e84c = inttoptr i32 %v1_e84c to i8*
  %v3_e84c = load i8, i8* %v2_e84c, align 1
  %v4_e84c = zext i8 %v3_e84c to i32
  store i32 %v4_e84c, i32* %r3.global-to-local, align 4
  %v2_e850 = icmp ugt i8 %v3_e84c, 61
  store i1 %v2_e850, i1* %cpsr_c.global-to-local, align 1
  %v7_e850 = icmp eq i8 %v3_e84c, 62
  store i1 %v7_e850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e850, label %dec_label_pc_e8b4, label %bb388

bb388:                                            ; preds = %dec_label_pc_e848
  %v3_e854 = icmp ugt i8 %v3_e84c, 57
  store i1 %v3_e854, i1* %cpsr_c.global-to-local, align 1
  %v8_e854 = icmp eq i8 %v3_e84c, 58
  store i1 %v8_e854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e854, label %dec_label_pc_e8b4, label %dec_label_pc_e85c

dec_label_pc_e85c:                                ; preds = %bb388
  %v2_e85c = icmp ugt i8 %v3_e84c, 35
  store i1 %v2_e85c, i1* %cpsr_c.global-to-local, align 1
  %v7_e85c = icmp eq i8 %v3_e84c, 36
  store i1 %v7_e85c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e85c, label %dec_label_pc_e8b4, label %dec_label_pc_e864

dec_label_pc_e864:                                ; preds = %dec_label_pc_e85c
  %v2_e864 = icmp ugt i8 %v3_e84c, 34
  store i1 %v2_e864, i1* %cpsr_c.global-to-local, align 1
  %v7_e864 = icmp eq i8 %v3_e84c, 35
  store i1 %v7_e864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e864, label %dec_label_pc_e8b4, label %dec_label_pc_e86c

dec_label_pc_e86c:                                ; preds = %dec_label_pc_e864
  %v2_e86c = icmp ugt i8 %v3_e84c, 36
  store i1 %v2_e86c, i1* %cpsr_c.global-to-local, align 1
  %v7_e86c = icmp eq i8 %v3_e84c, 37
  store i1 %v7_e86c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e86c, label %dec_label_pc_e8b4, label %dec_label_pc_e89c.preheader

dec_label_pc_e89c.preheader:                      ; preds = %dec_label_pc_e86c
  %v3_e870 = add i32 %v0_e620, 28
  %v2_e874 = add i32 %v3_e870, %v3_e838
  store i32 %v2_e874, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e89c

dec_label_pc_e880:                                ; preds = %bb389
  %v2_e880 = icmp ugt i8 %v3_e8a4, 35
  store i1 %v2_e880, i1* %cpsr_c.global-to-local, align 1
  %v7_e880 = icmp eq i8 %v3_e8a4, 36
  store i1 %v7_e880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e880, label %dec_label_pc_e8b4, label %dec_label_pc_e888

dec_label_pc_e888:                                ; preds = %dec_label_pc_e880
  %v2_e888 = icmp ugt i8 %v3_e8a4, 34
  store i1 %v2_e888, i1* %cpsr_c.global-to-local, align 1
  %v7_e888 = icmp eq i8 %v3_e8a4, 35
  store i1 %v7_e888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e888, label %dec_label_pc_e8b4, label %dec_label_pc_e890

dec_label_pc_e890:                                ; preds = %dec_label_pc_e888
  %v2_e890 = icmp ugt i8 %v3_e8a4, 36
  store i1 %v2_e890, i1* %cpsr_c.global-to-local, align 1
  %v7_e890 = icmp eq i8 %v3_e8a4, 37
  store i1 %v7_e890, i1* %cpsr_z.global-to-local, align 1
  %v1_e894 = add i32 %v0_e894, -1
  store i32 %v1_e894, i32* %r3.global-to-local, align 4
  br i1 %v7_e890, label %dec_label_pc_e8b4, label %dec_label_pc_e89c

dec_label_pc_e89c:                                ; preds = %dec_label_pc_e89c.preheader, %dec_label_pc_e890
  %v0_e894 = phi i32 [ %v2_e874, %dec_label_pc_e89c.preheader ], [ %v1_e894, %dec_label_pc_e890 ]
  %v0_e89c = phi i32 [ %v1_e83c, %dec_label_pc_e89c.preheader ], [ %v1_e89c, %dec_label_pc_e890 ]
  %v1_e89c = add i32 %v0_e89c, -1
  store i32 %v1_e89c, i32* %r1.global-to-local, align 4
  %v2_e89c = icmp ne i32 %v0_e89c, 0
  store i1 %v2_e89c, i1* %cpsr_c.global-to-local, align 1
  %v7_e89c = icmp eq i32 %v0_e89c, 1
  store i1 %v7_e89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e89c, label %dec_label_pc_e5a0thread-pre-split.thread512, label %dec_label_pc_e8a4

dec_label_pc_e8a4:                                ; preds = %dec_label_pc_e89c
  %v1_e8a4 = add i32 %v0_e894, -2
  %v2_e8a4 = inttoptr i32 %v1_e8a4 to i8*
  %v3_e8a4 = load i8, i8* %v2_e8a4, align 1
  %v4_e8a4 = zext i8 %v3_e8a4 to i32
  store i32 %v4_e8a4, i32* %r2.global-to-local, align 4
  %v2_e8a8 = icmp ugt i8 %v3_e8a4, 61
  store i1 %v2_e8a8, i1* %cpsr_c.global-to-local, align 1
  %v7_e8a8 = icmp eq i8 %v3_e8a4, 62
  store i1 %v7_e8a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8a8, label %dec_label_pc_e8b4, label %bb389

bb389:                                            ; preds = %dec_label_pc_e8a4
  %v3_e8ac = icmp ugt i8 %v3_e8a4, 57
  store i1 %v3_e8ac, i1* %cpsr_c.global-to-local, align 1
  %v8_e8ac = icmp eq i8 %v3_e8a4, 58
  store i1 %v8_e8ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e8ac, label %dec_label_pc_e8b4, label %dec_label_pc_e880

dec_label_pc_e8b4:                                ; preds = %dec_label_pc_e8a4, %bb389, %dec_label_pc_e890, %dec_label_pc_e888, %dec_label_pc_e880, %dec_label_pc_e86c, %dec_label_pc_e848, %dec_label_pc_e864, %dec_label_pc_e85c, %bb388
  %v0_e8b8 = phi i32 [ %v1_e83c, %dec_label_pc_e86c ], [ %v1_e83c, %dec_label_pc_e848 ], [ %v1_e83c, %dec_label_pc_e864 ], [ %v1_e83c, %dec_label_pc_e85c ], [ %v1_e83c, %bb388 ], [ %v1_e89c, %dec_label_pc_e880 ], [ %v1_e89c, %dec_label_pc_e888 ], [ %v1_e89c, %dec_label_pc_e890 ], [ %v1_e89c, %bb389 ], [ %v1_e89c, %dec_label_pc_e8a4 ]
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_e8b8 = add i32 %v0_e8b8, 1
  store i32 %v1_e8b8, i32* @r8, align 4
  %v1_e8bc = call i32 @function_f370(i32 16)
  store i32 %v2_eb40, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r0.global-to-local, align 4
  %v3_e8cc = call i32 @function_f2ac(i32 16, i32* nonnull %stack_var_-60)
  store i32 %v3_e8cc, i32* %r0.global-to-local, align 4
  %v3_e8d0 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e8d0, i32* %r2.global-to-local, align 4
  store i32 %v3_e8cc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e8dc = load i32, i32* @r6, align 4
  %v1_e8dc = add i32 %v0_e8dc, 4
  %v2_e8dc = inttoptr i32 %v1_e8dc to i32*
  %v3_e8dc = load i32, i32* %v2_e8dc, align 4
  store i32 %v3_e8dc, i32* %r0.global-to-local, align 4
  %v4_e8e0 = call i32 @function_10904(i32 %v3_e8dc, i32 %v3_e8cc, i32 %v3_e8d0, i32 16384)
  store i32 %v4_e8e0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_e8f0 = load i32, i32* @r6, align 4
  %v1_e8f0 = add i32 %v0_e8f0, 4
  %v2_e8f0 = inttoptr i32 %v1_e8f0 to i32*
  %v3_e8f0 = load i32, i32* %v2_e8f0, align 4
  store i32 %v3_e8f0, i32* %r0.global-to-local, align 4
  %v4_e8f4 = call i32 @function_10904(i32 %v3_e8f0, i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32 2, i32 16384)
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_e8fc = call i32 @function_f2d0(i32 16)
  store i32 %v1_e8fc, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_e904 = load i32, i32* @r6, align 4
  %v2_e904 = add i32 %v1_e904, 12
  %v3_e904 = inttoptr i32 %v2_e904 to i32*
  store i32 8, i32* %v3_e904, align 4
  br label %dec_label_pc_e73c

dec_label_pc_e90c:                                ; preds = %dec_label_pc_e620
  %v1_e90c = add i32 %v0_e620, 24
  %v2_e90c = inttoptr i32 %v1_e90c to i32*
  %v3_e90c = load i32, i32* %v2_e90c, align 4
  store i32 %v3_e90c, i32* %r2.global-to-local, align 4
  %v1_e910 = add i32 %v3_e90c, -1
  store i32 %v1_e910, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e914 = icmp eq i32 %v1_e910, 0
  store i1 %v2_e914, i1* %cpsr_z.global-to-local, align 1
  %tmp390 = icmp slt i32 %v1_e910, 1
  br i1 %tmp390, label %dec_label_pc_e5a0thread-pre-split.thread, label %dec_label_pc_e91c

dec_label_pc_e91c:                                ; preds = %dec_label_pc_e90c
  %v2_e91c = add i32 %v1_e910, %v0_e620
  store i32 %v2_e91c, i32* %r3.global-to-local, align 4
  %v1_e920 = add i32 %v2_e91c, 28
  %v2_e920 = inttoptr i32 %v1_e920 to i8*
  %v3_e920 = load i8, i8* %v2_e920, align 1
  %v4_e920 = zext i8 %v3_e920 to i32
  store i32 %v4_e920, i32* %r3.global-to-local, align 4
  %v2_e924 = icmp ugt i8 %v3_e920, 61
  store i1 %v2_e924, i1* %cpsr_c.global-to-local, align 1
  %v7_e924 = icmp eq i8 %v3_e920, 62
  store i1 %v7_e924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e924, label %dec_label_pc_e988, label %bb391

bb391:                                            ; preds = %dec_label_pc_e91c
  %v3_e928 = icmp ugt i8 %v3_e920, 57
  store i1 %v3_e928, i1* %cpsr_c.global-to-local, align 1
  %v8_e928 = icmp eq i8 %v3_e920, 58
  store i1 %v8_e928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e928, label %dec_label_pc_e988, label %dec_label_pc_e930

dec_label_pc_e930:                                ; preds = %bb391
  %v2_e930 = icmp ugt i8 %v3_e920, 35
  store i1 %v2_e930, i1* %cpsr_c.global-to-local, align 1
  %v7_e930 = icmp eq i8 %v3_e920, 36
  store i1 %v7_e930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e930, label %dec_label_pc_e988, label %dec_label_pc_e938

dec_label_pc_e938:                                ; preds = %dec_label_pc_e930
  %v2_e938 = icmp ugt i8 %v3_e920, 34
  store i1 %v2_e938, i1* %cpsr_c.global-to-local, align 1
  %v7_e938 = icmp eq i8 %v3_e920, 35
  store i1 %v7_e938, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e938, label %dec_label_pc_e988, label %dec_label_pc_e940

dec_label_pc_e940:                                ; preds = %dec_label_pc_e938
  %v2_e940 = icmp ugt i8 %v3_e920, 36
  store i1 %v2_e940, i1* %cpsr_c.global-to-local, align 1
  %v7_e940 = icmp eq i8 %v3_e920, 37
  store i1 %v7_e940, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e940, label %dec_label_pc_e988, label %dec_label_pc_e970.preheader

dec_label_pc_e970.preheader:                      ; preds = %dec_label_pc_e940
  %v3_e944 = add i32 %v0_e620, 28
  %v2_e948 = add i32 %v3_e944, %v3_e90c
  store i32 %v2_e948, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e970

dec_label_pc_e954:                                ; preds = %bb392
  %v2_e954 = icmp ugt i8 %v3_e978, 35
  store i1 %v2_e954, i1* %cpsr_c.global-to-local, align 1
  %v7_e954 = icmp eq i8 %v3_e978, 36
  store i1 %v7_e954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e954, label %dec_label_pc_e988, label %dec_label_pc_e95c

dec_label_pc_e95c:                                ; preds = %dec_label_pc_e954
  %v2_e95c = icmp ugt i8 %v3_e978, 34
  store i1 %v2_e95c, i1* %cpsr_c.global-to-local, align 1
  %v7_e95c = icmp eq i8 %v3_e978, 35
  store i1 %v7_e95c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e95c, label %dec_label_pc_e988, label %dec_label_pc_e964

dec_label_pc_e964:                                ; preds = %dec_label_pc_e95c
  %v2_e964 = icmp ugt i8 %v3_e978, 36
  store i1 %v2_e964, i1* %cpsr_c.global-to-local, align 1
  %v7_e964 = icmp eq i8 %v3_e978, 37
  store i1 %v7_e964, i1* %cpsr_z.global-to-local, align 1
  %v1_e968 = add i32 %v0_e968, -1
  store i32 %v1_e968, i32* %r3.global-to-local, align 4
  br i1 %v7_e964, label %dec_label_pc_e988, label %dec_label_pc_e970

dec_label_pc_e970:                                ; preds = %dec_label_pc_e970.preheader, %dec_label_pc_e964
  %v0_e968 = phi i32 [ %v2_e948, %dec_label_pc_e970.preheader ], [ %v1_e968, %dec_label_pc_e964 ]
  %v0_e970 = phi i32 [ %v1_e910, %dec_label_pc_e970.preheader ], [ %v1_e970, %dec_label_pc_e964 ]
  %v1_e970 = add i32 %v0_e970, -1
  store i32 %v1_e970, i32* %r1.global-to-local, align 4
  %v2_e970 = icmp ne i32 %v0_e970, 0
  store i1 %v2_e970, i1* %cpsr_c.global-to-local, align 1
  %v7_e970 = icmp eq i32 %v0_e970, 1
  store i1 %v7_e970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e970, label %dec_label_pc_e5a0thread-pre-split.thread512, label %dec_label_pc_e978

dec_label_pc_e978:                                ; preds = %dec_label_pc_e970
  %v1_e978 = add i32 %v0_e968, -2
  %v2_e978 = inttoptr i32 %v1_e978 to i8*
  %v3_e978 = load i8, i8* %v2_e978, align 1
  %v4_e978 = zext i8 %v3_e978 to i32
  store i32 %v4_e978, i32* %r2.global-to-local, align 4
  %v2_e97c = icmp ugt i8 %v3_e978, 61
  store i1 %v2_e97c, i1* %cpsr_c.global-to-local, align 1
  %v7_e97c = icmp eq i8 %v3_e978, 62
  store i1 %v7_e97c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e97c, label %dec_label_pc_e988, label %bb392

bb392:                                            ; preds = %dec_label_pc_e978
  %v3_e980 = icmp ugt i8 %v3_e978, 57
  store i1 %v3_e980, i1* %cpsr_c.global-to-local, align 1
  %v8_e980 = icmp eq i8 %v3_e978, 58
  store i1 %v8_e980, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e980, label %dec_label_pc_e988, label %dec_label_pc_e954

dec_label_pc_e988:                                ; preds = %dec_label_pc_e978, %bb392, %dec_label_pc_e964, %dec_label_pc_e95c, %dec_label_pc_e954, %dec_label_pc_e940, %dec_label_pc_e91c, %dec_label_pc_e938, %dec_label_pc_e930, %bb391
  %v0_e98c = phi i32 [ %v1_e910, %dec_label_pc_e940 ], [ %v1_e910, %dec_label_pc_e91c ], [ %v1_e910, %dec_label_pc_e938 ], [ %v1_e910, %dec_label_pc_e930 ], [ %v1_e910, %bb391 ], [ %v1_e970, %dec_label_pc_e954 ], [ %v1_e970, %dec_label_pc_e95c ], [ %v1_e970, %dec_label_pc_e964 ], [ %v1_e970, %bb392 ], [ %v1_e970, %dec_label_pc_e978 ]
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_e98c = add i32 %v0_e98c, 1
  store i32 %v1_e98c, i32* @r8, align 4
  %v1_e990 = call i32 @function_f370(i32 18)
  store i32 %v2_eb40, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v3_e9a0 = call i32 @function_f2ac(i32 18, i32* nonnull %stack_var_-60)
  store i32 %v3_e9a0, i32* %r0.global-to-local, align 4
  %v3_e9a4 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e9a4, i32* %r2.global-to-local, align 4
  store i32 %v3_e9a0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e9b0 = load i32, i32* @r6, align 4
  %v1_e9b0 = add i32 %v0_e9b0, 4
  %v2_e9b0 = inttoptr i32 %v1_e9b0 to i32*
  %v3_e9b0 = load i32, i32* %v2_e9b0, align 4
  store i32 %v3_e9b0, i32* %r0.global-to-local, align 4
  %v4_e9b4 = call i32 @function_10904(i32 %v3_e9b0, i32 %v3_e9a0, i32 %v3_e9a4, i32 16384)
  store i32 %v4_e9b4, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_e9c4 = load i32, i32* @r6, align 4
  %v1_e9c4 = add i32 %v0_e9c4, 4
  %v2_e9c4 = inttoptr i32 %v1_e9c4 to i32*
  %v3_e9c4 = load i32, i32* %v2_e9c4, align 4
  store i32 %v3_e9c4, i32* %r0.global-to-local, align 4
  %v4_e9c8 = call i32 @function_10904(i32 %v3_e9c4, i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32 2, i32 16384)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_e9d0 = call i32 @function_f2d0(i32 18)
  store i32 %v1_e9d0, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_e9d8 = load i32, i32* @r6, align 4
  %v2_e9d8 = add i32 %v1_e9d8, 12
  %v3_e9d8 = inttoptr i32 %v2_e9d8 to i32*
  store i32 7, i32* %v3_e9d8, align 4
  br label %dec_label_pc_e73c

dec_label_pc_e9e0:                                ; preds = %dec_label_pc_e620
  %v1_e9e0 = add i32 %v0_e620, 24
  %v2_e9e0 = inttoptr i32 %v1_e9e0 to i32*
  %v3_e9e0 = load i32, i32* %v2_e9e0, align 4
  store i32 %v3_e9e0, i32* %r2.global-to-local, align 4
  %v1_e9e4 = add i32 %v3_e9e0, -1
  store i32 %v1_e9e4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e9e8 = icmp eq i32 %v1_e9e4, 0
  store i1 %v2_e9e8, i1* %cpsr_z.global-to-local, align 1
  %tmp393 = icmp slt i32 %v1_e9e4, 1
  br i1 %tmp393, label %dec_label_pc_e5a0thread-pre-split.thread, label %dec_label_pc_e9f0

dec_label_pc_e9f0:                                ; preds = %dec_label_pc_e9e0
  %v2_e9f0 = add i32 %v1_e9e4, %v0_e620
  store i32 %v2_e9f0, i32* %r3.global-to-local, align 4
  %v1_e9f4 = add i32 %v2_e9f0, 28
  %v2_e9f4 = inttoptr i32 %v1_e9f4 to i8*
  %v3_e9f4 = load i8, i8* %v2_e9f4, align 1
  %v4_e9f4 = zext i8 %v3_e9f4 to i32
  store i32 %v4_e9f4, i32* %r3.global-to-local, align 4
  %v2_e9f8 = icmp ugt i8 %v3_e9f4, 61
  store i1 %v2_e9f8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9f8 = icmp eq i8 %v3_e9f4, 62
  store i1 %v7_e9f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9f8, label %dec_label_pc_ea5c, label %bb394

bb394:                                            ; preds = %dec_label_pc_e9f0
  %v3_e9fc = icmp ugt i8 %v3_e9f4, 57
  store i1 %v3_e9fc, i1* %cpsr_c.global-to-local, align 1
  %v8_e9fc = icmp eq i8 %v3_e9f4, 58
  store i1 %v8_e9fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9fc, label %dec_label_pc_ea5c, label %dec_label_pc_ea04

dec_label_pc_ea04:                                ; preds = %bb394
  %v2_ea04 = icmp ugt i8 %v3_e9f4, 35
  store i1 %v2_ea04, i1* %cpsr_c.global-to-local, align 1
  %v7_ea04 = icmp eq i8 %v3_e9f4, 36
  store i1 %v7_ea04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea04, label %dec_label_pc_ea5c, label %dec_label_pc_ea0c

dec_label_pc_ea0c:                                ; preds = %dec_label_pc_ea04
  %v2_ea0c = icmp ugt i8 %v3_e9f4, 34
  store i1 %v2_ea0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea0c = icmp eq i8 %v3_e9f4, 35
  store i1 %v7_ea0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea0c, label %dec_label_pc_ea5c, label %dec_label_pc_ea14

dec_label_pc_ea14:                                ; preds = %dec_label_pc_ea0c
  %v2_ea14 = icmp ugt i8 %v3_e9f4, 36
  store i1 %v2_ea14, i1* %cpsr_c.global-to-local, align 1
  %v7_ea14 = icmp eq i8 %v3_e9f4, 37
  store i1 %v7_ea14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea14, label %dec_label_pc_ea5c, label %dec_label_pc_ea44.preheader

dec_label_pc_ea44.preheader:                      ; preds = %dec_label_pc_ea14
  %v3_ea18 = add i32 %v0_e620, 28
  %v2_ea1c = add i32 %v3_ea18, %v3_e9e0
  store i32 %v2_ea1c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ea44

dec_label_pc_ea28:                                ; preds = %bb395
  %v2_ea28 = icmp ugt i8 %v3_ea4c, 35
  store i1 %v2_ea28, i1* %cpsr_c.global-to-local, align 1
  %v7_ea28 = icmp eq i8 %v3_ea4c, 36
  store i1 %v7_ea28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea28, label %dec_label_pc_ea5c, label %dec_label_pc_ea30

dec_label_pc_ea30:                                ; preds = %dec_label_pc_ea28
  %v2_ea30 = icmp ugt i8 %v3_ea4c, 34
  store i1 %v2_ea30, i1* %cpsr_c.global-to-local, align 1
  %v7_ea30 = icmp eq i8 %v3_ea4c, 35
  store i1 %v7_ea30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea30, label %dec_label_pc_ea5c, label %dec_label_pc_ea38

dec_label_pc_ea38:                                ; preds = %dec_label_pc_ea30
  %v2_ea38 = icmp ugt i8 %v3_ea4c, 36
  store i1 %v2_ea38, i1* %cpsr_c.global-to-local, align 1
  %v7_ea38 = icmp eq i8 %v3_ea4c, 37
  store i1 %v7_ea38, i1* %cpsr_z.global-to-local, align 1
  %v1_ea3c = add i32 %v0_ea3c, -1
  store i32 %v1_ea3c, i32* %r3.global-to-local, align 4
  br i1 %v7_ea38, label %dec_label_pc_ea5c, label %dec_label_pc_ea44

dec_label_pc_ea44:                                ; preds = %dec_label_pc_ea44.preheader, %dec_label_pc_ea38
  %v0_ea3c = phi i32 [ %v2_ea1c, %dec_label_pc_ea44.preheader ], [ %v1_ea3c, %dec_label_pc_ea38 ]
  %v0_ea44 = phi i32 [ %v1_e9e4, %dec_label_pc_ea44.preheader ], [ %v1_ea44, %dec_label_pc_ea38 ]
  %v1_ea44 = add i32 %v0_ea44, -1
  store i32 %v1_ea44, i32* %r1.global-to-local, align 4
  %v2_ea44 = icmp ne i32 %v0_ea44, 0
  store i1 %v2_ea44, i1* %cpsr_c.global-to-local, align 1
  %v7_ea44 = icmp eq i32 %v0_ea44, 1
  store i1 %v7_ea44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea44, label %dec_label_pc_e5a0thread-pre-split.thread512, label %dec_label_pc_ea4c

dec_label_pc_ea4c:                                ; preds = %dec_label_pc_ea44
  %v1_ea4c = add i32 %v0_ea3c, -2
  %v2_ea4c = inttoptr i32 %v1_ea4c to i8*
  %v3_ea4c = load i8, i8* %v2_ea4c, align 1
  %v4_ea4c = zext i8 %v3_ea4c to i32
  store i32 %v4_ea4c, i32* %r2.global-to-local, align 4
  %v2_ea50 = icmp ugt i8 %v3_ea4c, 61
  store i1 %v2_ea50, i1* %cpsr_c.global-to-local, align 1
  %v7_ea50 = icmp eq i8 %v3_ea4c, 62
  store i1 %v7_ea50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea50, label %dec_label_pc_ea5c, label %bb395

bb395:                                            ; preds = %dec_label_pc_ea4c
  %v3_ea54 = icmp ugt i8 %v3_ea4c, 57
  store i1 %v3_ea54, i1* %cpsr_c.global-to-local, align 1
  %v8_ea54 = icmp eq i8 %v3_ea4c, 58
  store i1 %v8_ea54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea54, label %dec_label_pc_ea5c, label %dec_label_pc_ea28

dec_label_pc_ea5c:                                ; preds = %dec_label_pc_ea4c, %bb395, %dec_label_pc_ea38, %dec_label_pc_ea30, %dec_label_pc_ea28, %dec_label_pc_ea14, %dec_label_pc_e9f0, %dec_label_pc_ea0c, %dec_label_pc_ea04, %bb394
  %v0_ea60 = phi i32 [ %v1_e9e4, %dec_label_pc_ea14 ], [ %v1_e9e4, %dec_label_pc_e9f0 ], [ %v1_e9e4, %dec_label_pc_ea0c ], [ %v1_e9e4, %dec_label_pc_ea04 ], [ %v1_e9e4, %bb394 ], [ %v1_ea44, %dec_label_pc_ea28 ], [ %v1_ea44, %dec_label_pc_ea30 ], [ %v1_ea44, %dec_label_pc_ea38 ], [ %v1_ea44, %bb395 ], [ %v1_ea44, %dec_label_pc_ea4c ]
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_ea60 = add i32 %v0_ea60, 1
  store i32 %v1_ea60, i32* @r8, align 4
  %v1_ea64 = call i32 @function_f370(i32 20)
  store i32 %v2_eb40, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_ea74 = call i32 @function_f2ac(i32 20, i32* nonnull %stack_var_-60)
  store i32 %v3_ea74, i32* %r0.global-to-local, align 4
  %v3_ea78 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ea78, i32* %r2.global-to-local, align 4
  store i32 %v3_ea74, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ea84 = load i32, i32* @r6, align 4
  %v1_ea84 = add i32 %v0_ea84, 4
  %v2_ea84 = inttoptr i32 %v1_ea84 to i32*
  %v3_ea84 = load i32, i32* %v2_ea84, align 4
  store i32 %v3_ea84, i32* %r0.global-to-local, align 4
  %v4_ea88 = call i32 @function_10904(i32 %v3_ea84, i32 %v3_ea74, i32 %v3_ea78, i32 16384)
  store i32 %v4_ea88, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ea98 = load i32, i32* @r6, align 4
  %v1_ea98 = add i32 %v0_ea98, 4
  %v2_ea98 = inttoptr i32 %v1_ea98 to i32*
  %v3_ea98 = load i32, i32* %v2_ea98, align 4
  store i32 %v3_ea98, i32* %r0.global-to-local, align 4
  %v4_ea9c = call i32 @function_10904(i32 %v3_ea98, i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_eaa4 = call i32 @function_f2d0(i32 20)
  store i32 %v1_eaa4, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_eaac = load i32, i32* @r6, align 4
  %v2_eaac = add i32 %v1_eaac, 12
  %v3_eaac = inttoptr i32 %v2_eaac to i32*
  store i32 9, i32* %v3_eaac, align 4
  br label %dec_label_pc_e73c

dec_label_pc_eab4:                                ; preds = %dec_label_pc_e620
  %v1_eab4 = add i32 %v0_e620, 24
  %v2_eab4 = inttoptr i32 %v1_eab4 to i32*
  %v3_eab4 = load i32, i32* %v2_eab4, align 4
  store i32 %v3_eab4, i32* %r2.global-to-local, align 4
  %v1_eab8 = add i32 %v3_eab4, -1
  store i32 %v1_eab8, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eabc = icmp eq i32 %v1_eab8, 0
  store i1 %v2_eabc, i1* %cpsr_z.global-to-local, align 1
  %tmp396 = icmp slt i32 %v1_eab8, 1
  br i1 %tmp396, label %dec_label_pc_e5a0thread-pre-split.thread, label %dec_label_pc_eac4

dec_label_pc_eac4:                                ; preds = %dec_label_pc_eab4
  %v2_eac4 = add i32 %v1_eab8, %v0_e620
  store i32 %v2_eac4, i32* %r3.global-to-local, align 4
  %v1_eac8 = add i32 %v2_eac4, 28
  %v2_eac8 = inttoptr i32 %v1_eac8 to i8*
  %v3_eac8 = load i8, i8* %v2_eac8, align 1
  %v4_eac8 = zext i8 %v3_eac8 to i32
  store i32 %v4_eac8, i32* %r3.global-to-local, align 4
  %v2_eacc = icmp ugt i8 %v3_eac8, 61
  store i1 %v2_eacc, i1* %cpsr_c.global-to-local, align 1
  %v7_eacc = icmp eq i8 %v3_eac8, 62
  store i1 %v7_eacc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eacc, label %dec_label_pc_eb30, label %bb397

bb397:                                            ; preds = %dec_label_pc_eac4
  %v3_ead0 = icmp ugt i8 %v3_eac8, 57
  store i1 %v3_ead0, i1* %cpsr_c.global-to-local, align 1
  %v8_ead0 = icmp eq i8 %v3_eac8, 58
  store i1 %v8_ead0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ead0, label %dec_label_pc_eb30, label %dec_label_pc_ead8

dec_label_pc_ead8:                                ; preds = %bb397
  %v2_ead8 = icmp ugt i8 %v3_eac8, 35
  store i1 %v2_ead8, i1* %cpsr_c.global-to-local, align 1
  %v7_ead8 = icmp eq i8 %v3_eac8, 36
  store i1 %v7_ead8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ead8, label %dec_label_pc_eb30, label %dec_label_pc_eae0

dec_label_pc_eae0:                                ; preds = %dec_label_pc_ead8
  %v2_eae0 = icmp ugt i8 %v3_eac8, 34
  store i1 %v2_eae0, i1* %cpsr_c.global-to-local, align 1
  %v7_eae0 = icmp eq i8 %v3_eac8, 35
  store i1 %v7_eae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eae0, label %dec_label_pc_eb30, label %dec_label_pc_eae8

dec_label_pc_eae8:                                ; preds = %dec_label_pc_eae0
  %v2_eae8 = icmp ugt i8 %v3_eac8, 36
  store i1 %v2_eae8, i1* %cpsr_c.global-to-local, align 1
  %v7_eae8 = icmp eq i8 %v3_eac8, 37
  store i1 %v7_eae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eae8, label %dec_label_pc_eb30, label %dec_label_pc_eb18.preheader

dec_label_pc_eb18.preheader:                      ; preds = %dec_label_pc_eae8
  %v3_eaec = add i32 %v0_e620, 28
  %v2_eaf0 = add i32 %v3_eaec, %v3_eab4
  store i32 %v2_eaf0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_eb18

dec_label_pc_eafc:                                ; preds = %bb398
  %v2_eafc = icmp ugt i8 %v3_eb20, 35
  store i1 %v2_eafc, i1* %cpsr_c.global-to-local, align 1
  %v7_eafc = icmp eq i8 %v3_eb20, 36
  store i1 %v7_eafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eafc, label %dec_label_pc_eb30, label %dec_label_pc_eb04

dec_label_pc_eb04:                                ; preds = %dec_label_pc_eafc
  %v2_eb04 = icmp ugt i8 %v3_eb20, 34
  store i1 %v2_eb04, i1* %cpsr_c.global-to-local, align 1
  %v7_eb04 = icmp eq i8 %v3_eb20, 35
  store i1 %v7_eb04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb04, label %dec_label_pc_eb30, label %dec_label_pc_eb0c

dec_label_pc_eb0c:                                ; preds = %dec_label_pc_eb04
  %v2_eb0c = icmp ugt i8 %v3_eb20, 36
  store i1 %v2_eb0c, i1* %cpsr_c.global-to-local, align 1
  %v7_eb0c = icmp eq i8 %v3_eb20, 37
  store i1 %v7_eb0c, i1* %cpsr_z.global-to-local, align 1
  %v1_eb10 = add i32 %v0_eb10, -1
  store i32 %v1_eb10, i32* %r3.global-to-local, align 4
  br i1 %v7_eb0c, label %dec_label_pc_eb30, label %dec_label_pc_eb18

dec_label_pc_eb18:                                ; preds = %dec_label_pc_eb18.preheader, %dec_label_pc_eb0c
  %v0_eb10 = phi i32 [ %v2_eaf0, %dec_label_pc_eb18.preheader ], [ %v1_eb10, %dec_label_pc_eb0c ]
  %v0_eb18 = phi i32 [ %v1_eab8, %dec_label_pc_eb18.preheader ], [ %v1_eb18, %dec_label_pc_eb0c ]
  %v1_eb18 = add i32 %v0_eb18, -1
  store i32 %v1_eb18, i32* %r1.global-to-local, align 4
  %v2_eb18 = icmp ne i32 %v0_eb18, 0
  store i1 %v2_eb18, i1* %cpsr_c.global-to-local, align 1
  %v7_eb18 = icmp eq i32 %v0_eb18, 1
  store i1 %v7_eb18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb18, label %dec_label_pc_e5a0thread-pre-split.thread512, label %dec_label_pc_eb20

dec_label_pc_eb20:                                ; preds = %dec_label_pc_eb18
  %v1_eb20 = add i32 %v0_eb10, -2
  %v2_eb20 = inttoptr i32 %v1_eb20 to i8*
  %v3_eb20 = load i8, i8* %v2_eb20, align 1
  %v4_eb20 = zext i8 %v3_eb20 to i32
  store i32 %v4_eb20, i32* %r2.global-to-local, align 4
  %v2_eb24 = icmp ugt i8 %v3_eb20, 61
  store i1 %v2_eb24, i1* %cpsr_c.global-to-local, align 1
  %v7_eb24 = icmp eq i8 %v3_eb20, 62
  store i1 %v7_eb24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb24, label %dec_label_pc_eb30, label %bb398

bb398:                                            ; preds = %dec_label_pc_eb20
  %v3_eb28 = icmp ugt i8 %v3_eb20, 57
  store i1 %v3_eb28, i1* %cpsr_c.global-to-local, align 1
  %v8_eb28 = icmp eq i8 %v3_eb20, 58
  store i1 %v8_eb28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eb28, label %dec_label_pc_eb30, label %dec_label_pc_eafc

dec_label_pc_eb30:                                ; preds = %dec_label_pc_eb20, %bb398, %dec_label_pc_eb0c, %dec_label_pc_eb04, %dec_label_pc_eafc, %dec_label_pc_eae8, %dec_label_pc_eac4, %dec_label_pc_eae0, %dec_label_pc_ead8, %bb397
  %v0_eb34 = phi i32 [ %v1_eab8, %dec_label_pc_eae8 ], [ %v1_eab8, %dec_label_pc_eac4 ], [ %v1_eab8, %dec_label_pc_eae0 ], [ %v1_eab8, %dec_label_pc_ead8 ], [ %v1_eab8, %bb397 ], [ %v1_eb18, %dec_label_pc_eafc ], [ %v1_eb18, %dec_label_pc_eb04 ], [ %v1_eb18, %dec_label_pc_eb0c ], [ %v1_eb18, %bb398 ], [ %v1_eb18, %dec_label_pc_eb20 ]
  store i32 17, i32* %r0.global-to-local, align 4
  %v1_eb34 = add i32 %v0_eb34, 1
  store i32 %v1_eb34, i32* @r8, align 4
  %v1_eb38 = call i32 @function_f370(i32 17)
  store i32 %v2_eb40, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r0.global-to-local, align 4
  %v3_eb48 = call i32 @function_f2ac(i32 17, i32* nonnull %stack_var_-60)
  store i32 %v3_eb48, i32* %r0.global-to-local, align 4
  %v3_eb4c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_eb4c, i32* %r2.global-to-local, align 4
  store i32 %v3_eb48, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eb58 = load i32, i32* @r6, align 4
  %v1_eb58 = add i32 %v0_eb58, 4
  %v2_eb58 = inttoptr i32 %v1_eb58 to i32*
  %v3_eb58 = load i32, i32* %v2_eb58, align 4
  store i32 %v3_eb58, i32* %r0.global-to-local, align 4
  %v4_eb5c = call i32 @function_10904(i32 %v3_eb58, i32 %v3_eb48, i32 %v3_eb4c, i32 16384)
  store i32 %v4_eb5c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_eb6c = load i32, i32* @r6, align 4
  %v1_eb6c = add i32 %v0_eb6c, 4
  %v2_eb6c = inttoptr i32 %v1_eb6c to i32*
  %v3_eb6c = load i32, i32* %v2_eb6c, align 4
  store i32 %v3_eb6c, i32* %r0.global-to-local, align 4
  %v4_eb70 = call i32 @function_10904(i32 %v3_eb6c, i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32 2, i32 16384)
  store i32 17, i32* %r0.global-to-local, align 4
  %v1_eb78 = call i32 @function_f2d0(i32 17)
  store i32 %v1_eb78, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_eb80 = load i32, i32* @r6, align 4
  %v2_eb80 = add i32 %v1_eb80, 12
  %v3_eb80 = inttoptr i32 %v2_eb80 to i32*
  store i32 6, i32* %v3_eb80, align 4
  br label %dec_label_pc_e73c

dec_label_pc_eb88:                                ; preds = %dec_label_pc_e620
  %v1_eb88 = add i32 %v0_e620, 24
  %v2_eb88 = inttoptr i32 %v1_eb88 to i32*
  %v3_eb88 = load i32, i32* %v2_eb88, align 4
  store i32 %v3_eb88, i32* %r1.global-to-local, align 4
  %v1_eb8c = add i32 %v3_eb88, -1
  store i32 %v1_eb8c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eb90 = icmp eq i32 %v1_eb8c, 0
  store i1 %v2_eb90, i1* %cpsr_z.global-to-local, align 1
  %tmp399 = icmp slt i32 %v1_eb8c, 1
  br i1 %tmp399, label %dec_label_pc_ec04, label %dec_label_pc_eb98

dec_label_pc_eb98:                                ; preds = %dec_label_pc_eb88
  %v2_eb98 = add i32 %v1_eb8c, %v0_e620
  store i32 %v2_eb98, i32* %r3.global-to-local, align 4
  %v1_eb9c = add i32 %v2_eb98, 28
  %v2_eb9c = inttoptr i32 %v1_eb9c to i8*
  %v3_eb9c = load i8, i8* %v2_eb9c, align 1
  %v4_eb9c = zext i8 %v3_eb9c to i32
  store i32 %v4_eb9c, i32* %r3.global-to-local, align 4
  %v2_eba0 = icmp ugt i8 %v3_eb9c, 61
  store i1 %v2_eba0, i1* %cpsr_c.global-to-local, align 1
  %v7_eba0 = icmp eq i8 %v3_eb9c, 62
  store i1 %v7_eba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eba0, label %dec_label_pc_ee7c, label %bb400

bb400:                                            ; preds = %dec_label_pc_eb98
  %v3_eba4 = icmp ugt i8 %v3_eb9c, 57
  store i1 %v3_eba4, i1* %cpsr_c.global-to-local, align 1
  %v8_eba4 = icmp eq i8 %v3_eb9c, 58
  store i1 %v8_eba4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eba4, label %dec_label_pc_ee7c, label %dec_label_pc_ebac

dec_label_pc_ebac:                                ; preds = %bb400
  %v2_ebac = icmp ugt i8 %v3_eb9c, 35
  store i1 %v2_ebac, i1* %cpsr_c.global-to-local, align 1
  %v7_ebac = icmp eq i8 %v3_eb9c, 36
  store i1 %v7_ebac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebac, label %dec_label_pc_ee7c, label %dec_label_pc_ebb4

dec_label_pc_ebb4:                                ; preds = %dec_label_pc_ebac
  %v2_ebb4 = icmp ugt i8 %v3_eb9c, 34
  store i1 %v2_ebb4, i1* %cpsr_c.global-to-local, align 1
  %v7_ebb4 = icmp eq i8 %v3_eb9c, 35
  store i1 %v7_ebb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebb4, label %dec_label_pc_ee7c, label %dec_label_pc_ebbc

dec_label_pc_ebbc:                                ; preds = %dec_label_pc_ebb4
  %v2_ebbc = icmp ugt i8 %v3_eb9c, 36
  store i1 %v2_ebbc, i1* %cpsr_c.global-to-local, align 1
  %v7_ebbc = icmp eq i8 %v3_eb9c, 37
  store i1 %v7_ebbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebbc, label %dec_label_pc_ee7c, label %dec_label_pc_ebfc.preheader

dec_label_pc_ebfc.preheader:                      ; preds = %dec_label_pc_ebbc
  %v3_ebc0 = add i32 %v0_e620, 28
  %v2_ebc4 = add i32 %v3_ebc0, %v3_eb88
  store i32 %v2_ebc4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ebfc

dec_label_pc_ebd0:                                ; preds = %dec_label_pc_ebfc
  %v1_ebd0 = add i32 %v0_ebf4, -2
  %v2_ebd0 = inttoptr i32 %v1_ebd0 to i8*
  %v3_ebd0 = load i8, i8* %v2_ebd0, align 1
  %v4_ebd0 = zext i8 %v3_ebd0 to i32
  store i32 %v4_ebd0, i32* %r2.global-to-local, align 4
  %v2_ebd4 = icmp ugt i8 %v3_ebd0, 61
  store i1 %v2_ebd4, i1* %cpsr_c.global-to-local, align 1
  %v7_ebd4 = icmp eq i8 %v3_ebd0, 62
  store i1 %v7_ebd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebd4, label %dec_label_pc_ee7c, label %bb401

bb401:                                            ; preds = %dec_label_pc_ebd0
  %v3_ebd8 = icmp ugt i8 %v3_ebd0, 57
  store i1 %v3_ebd8, i1* %cpsr_c.global-to-local, align 1
  %v8_ebd8 = icmp eq i8 %v3_ebd0, 58
  store i1 %v8_ebd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ebd8, label %dec_label_pc_ee7c, label %dec_label_pc_ebe0

dec_label_pc_ebe0:                                ; preds = %bb401
  %v2_ebe0 = icmp ugt i8 %v3_ebd0, 35
  store i1 %v2_ebe0, i1* %cpsr_c.global-to-local, align 1
  %v7_ebe0 = icmp eq i8 %v3_ebd0, 36
  store i1 %v7_ebe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebe0, label %dec_label_pc_ee7c, label %dec_label_pc_ebe8

dec_label_pc_ebe8:                                ; preds = %dec_label_pc_ebe0
  %v2_ebe8 = icmp ugt i8 %v3_ebd0, 34
  store i1 %v2_ebe8, i1* %cpsr_c.global-to-local, align 1
  %v7_ebe8 = icmp eq i8 %v3_ebd0, 35
  store i1 %v7_ebe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebe8, label %dec_label_pc_ee7c, label %dec_label_pc_ebf0

dec_label_pc_ebf0:                                ; preds = %dec_label_pc_ebe8
  %v2_ebf0 = icmp ugt i8 %v3_ebd0, 36
  store i1 %v2_ebf0, i1* %cpsr_c.global-to-local, align 1
  %v7_ebf0 = icmp eq i8 %v3_ebd0, 37
  store i1 %v7_ebf0, i1* %cpsr_z.global-to-local, align 1
  %v1_ebf4 = add i32 %v0_ebf4, -1
  store i32 %v1_ebf4, i32* %r3.global-to-local, align 4
  br i1 %v7_ebf0, label %dec_label_pc_ee7c, label %dec_label_pc_ebfc

dec_label_pc_ebfc:                                ; preds = %dec_label_pc_ebfc.preheader, %dec_label_pc_ebf0
  %v0_ebf4 = phi i32 [ %v2_ebc4, %dec_label_pc_ebfc.preheader ], [ %v1_ebf4, %dec_label_pc_ebf0 ]
  %v0_ebfc = phi i32 [ %v1_eb8c, %dec_label_pc_ebfc.preheader ], [ %v1_ebfc, %dec_label_pc_ebf0 ]
  %v1_ebfc = add i32 %v0_ebfc, -1
  store i32 %v1_ebfc, i32* %r0.global-to-local, align 4
  %v2_ebfc = icmp ne i32 %v0_ebfc, 0
  store i1 %v2_ebfc, i1* %cpsr_c.global-to-local, align 1
  %v7_ebfc = icmp eq i32 %v0_ebfc, 1
  store i1 %v7_ebfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebfc, label %dec_label_pc_ec04, label %dec_label_pc_ebd0

dec_label_pc_ec04:                                ; preds = %dec_label_pc_ebfc, %dec_label_pc_eb88
  %v0_ec04 = load i32, i32* @fp, align 4
  store i32 %v0_ec04, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_153dc.174 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_ec10 = call i32 @function_f884(i32 %v0_ec04, i32 %v3_eb88, i32 ptrtoint ([5 x i8]* @global_var_153dc.174 to i32), i32 4)
  store i32 %v5_ec10, i32* %r0.global-to-local, align 4
  %v2_ec14 = icmp eq i32 %v5_ec10, -1
  store i1 %v2_ec14, i1* %cpsr_c.global-to-local, align 1
  %v7_ec14 = icmp eq i32 %v5_ec10, -1
  store i1 %v7_ec14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_ec10, i32* @r8, align 4
  br i1 %v7_ec14, label %dec_label_pc_f248, label %dec_label_pc_ec20

dec_label_pc_ec20:                                ; preds = %dec_label_pc_f248, %dec_label_pc_ec04
  %v0_ec20 = phi i32 [ %v5_f258, %dec_label_pc_f248 ], [ %v5_ec10, %dec_label_pc_ec04 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec20 = icmp eq i32 %v0_ec20, 0
  store i1 %v2_ec20, i1* %cpsr_z.global-to-local, align 1
  %v5_ec24 = icmp sgt i32 %v0_ec20, 0
  br i1 %v5_ec24, label %dec_label_pc_ec20.dec_label_pc_ee80_crit_edge, label %dec_label_pc_ec28

dec_label_pc_ec20.dec_label_pc_ee80_crit_edge:    ; preds = %dec_label_pc_ec20
  %v0_ee80.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ee80

dec_label_pc_ec28:                                ; preds = %dec_label_pc_edf8, %bb409, %dec_label_pc_ed2c, %dec_label_pc_ec20, %dec_label_pc_ef40, %dec_label_pc_eebc, %dec_label_pc_ee80, %dec_label_pc_efc8
  %v0_ec28 = load i32, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec28 = icmp eq i32 %v0_ec28, 0
  store i1 %v2_ec28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec28, label %dec_label_pc_e59c.loopexit, label %dec_label_pc_e73c

dec_label_pc_ec34:                                ; preds = %dec_label_pc_e620
  %v1_ec34 = add i32 %v0_e620, 24
  %v2_ec34 = inttoptr i32 %v1_ec34 to i32*
  %v3_ec34 = load i32, i32* %v2_ec34, align 4
  store i32 %v3_ec34, i32* %r1.global-to-local, align 4
  %v1_ec38 = add i32 %v3_ec34, -1
  store i32 %v1_ec38, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ec3c = icmp eq i32 %v1_ec38, 0
  store i1 %v2_ec3c, i1* %cpsr_z.global-to-local, align 1
  %tmp402 = icmp slt i32 %v1_ec38, 1
  br i1 %tmp402, label %dec_label_pc_ed10, label %dec_label_pc_ec44

dec_label_pc_ec44:                                ; preds = %dec_label_pc_ec34
  %v2_ec44 = add i32 %v1_ec38, %v0_e620
  store i32 %v2_ec44, i32* %r3.global-to-local, align 4
  %v1_ec48 = add i32 %v2_ec44, 28
  %v2_ec48 = inttoptr i32 %v1_ec48 to i8*
  %v3_ec48 = load i8, i8* %v2_ec48, align 1
  %v4_ec48 = zext i8 %v3_ec48 to i32
  store i32 %v4_ec48, i32* %r3.global-to-local, align 4
  %v2_ec4c = icmp ugt i8 %v3_ec48, 61
  store i1 %v2_ec4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ec4c = icmp eq i8 %v3_ec48, 62
  store i1 %v7_ec4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec4c, label %dec_label_pc_eeb8, label %bb403

bb403:                                            ; preds = %dec_label_pc_ec44
  %v3_ec50 = icmp ugt i8 %v3_ec48, 57
  store i1 %v3_ec50, i1* %cpsr_c.global-to-local, align 1
  %v8_ec50 = icmp eq i8 %v3_ec48, 58
  store i1 %v8_ec50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ec50, label %dec_label_pc_eeb8, label %dec_label_pc_ec58

dec_label_pc_ec58:                                ; preds = %bb403
  %v2_ec58 = icmp ugt i8 %v3_ec48, 35
  store i1 %v2_ec58, i1* %cpsr_c.global-to-local, align 1
  %v7_ec58 = icmp eq i8 %v3_ec48, 36
  store i1 %v7_ec58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec58, label %dec_label_pc_eeb8, label %dec_label_pc_ec60

dec_label_pc_ec60:                                ; preds = %dec_label_pc_ec58
  %v2_ec60 = icmp ugt i8 %v3_ec48, 34
  store i1 %v2_ec60, i1* %cpsr_c.global-to-local, align 1
  %v7_ec60 = icmp eq i8 %v3_ec48, 35
  store i1 %v7_ec60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec60, label %dec_label_pc_eeb8, label %dec_label_pc_ed08.preheader

dec_label_pc_ed08.preheader:                      ; preds = %dec_label_pc_ec60
  %v3_ec64 = add i32 %v0_e620, 28
  %v2_ec68 = add i32 %v3_ec64, %v3_ec34
  store i32 %v2_ec68, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ed08

dec_label_pc_ece4:                                ; preds = %dec_label_pc_ed08
  %v1_ece4 = add i32 %v0_ed00, -2
  %v2_ece4 = inttoptr i32 %v1_ece4 to i8*
  %v3_ece4 = load i8, i8* %v2_ece4, align 1
  %v4_ece4 = zext i8 %v3_ece4 to i32
  store i32 %v4_ece4, i32* %r2.global-to-local, align 4
  %v2_ece8 = icmp ugt i8 %v3_ece4, 61
  store i1 %v2_ece8, i1* %cpsr_c.global-to-local, align 1
  %v7_ece8 = icmp eq i8 %v3_ece4, 62
  store i1 %v7_ece8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ece8, label %dec_label_pc_eeb8, label %bb404

bb404:                                            ; preds = %dec_label_pc_ece4
  %v3_ecec = icmp ugt i8 %v3_ece4, 57
  store i1 %v3_ecec, i1* %cpsr_c.global-to-local, align 1
  %v8_ecec = icmp eq i8 %v3_ece4, 58
  store i1 %v8_ecec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ecec, label %dec_label_pc_eeb8, label %dec_label_pc_ecf4

dec_label_pc_ecf4:                                ; preds = %bb404
  %v2_ecf4 = icmp ugt i8 %v3_ece4, 35
  store i1 %v2_ecf4, i1* %cpsr_c.global-to-local, align 1
  %v7_ecf4 = icmp eq i8 %v3_ece4, 36
  store i1 %v7_ecf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ecf4, label %dec_label_pc_eeb8, label %dec_label_pc_ecfc

dec_label_pc_ecfc:                                ; preds = %dec_label_pc_ecf4
  %v2_ecfc = icmp ugt i8 %v3_ece4, 34
  store i1 %v2_ecfc, i1* %cpsr_c.global-to-local, align 1
  %v7_ecfc = icmp eq i8 %v3_ece4, 35
  store i1 %v7_ecfc, i1* %cpsr_z.global-to-local, align 1
  %v1_ed00 = add i32 %v0_ed00, -1
  store i32 %v1_ed00, i32* %r3.global-to-local, align 4
  br i1 %v7_ecfc, label %dec_label_pc_eeb8, label %dec_label_pc_ed08

dec_label_pc_ed08:                                ; preds = %dec_label_pc_ed08.preheader, %dec_label_pc_ecfc
  %v0_ed00 = phi i32 [ %v2_ec68, %dec_label_pc_ed08.preheader ], [ %v1_ed00, %dec_label_pc_ecfc ]
  %v0_ed08 = phi i32 [ %v1_ec38, %dec_label_pc_ed08.preheader ], [ %v1_ed08, %dec_label_pc_ecfc ]
  %v1_ed08 = add i32 %v0_ed08, -1
  store i32 %v1_ed08, i32* %r0.global-to-local, align 4
  %v2_ed08 = icmp ne i32 %v0_ed08, 0
  store i1 %v2_ed08, i1* %cpsr_c.global-to-local, align 1
  %v7_ed08 = icmp eq i32 %v0_ed08, 1
  store i1 %v7_ed08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed08, label %dec_label_pc_ed10, label %dec_label_pc_ece4

dec_label_pc_ed10:                                ; preds = %dec_label_pc_ed08, %dec_label_pc_ec34
  %v0_ed10 = load i32, i32* @fp, align 4
  store i32 %v0_ed10, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_153e4.176 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_ed1c = call i32 @function_f884(i32 %v0_ed10, i32 %v3_ec34, i32 ptrtoint ([8 x i8]* @global_var_153e4.176 to i32), i32 7)
  store i32 %v5_ed1c, i32* %r0.global-to-local, align 4
  %v2_ed20 = icmp eq i32 %v5_ed1c, -1
  store i1 %v2_ed20, i1* %cpsr_c.global-to-local, align 1
  %v7_ed20 = icmp eq i32 %v5_ed1c, -1
  store i1 %v7_ed20, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_ed1c, i32* @r8, align 4
  br i1 %v7_ed20, label %dec_label_pc_e59c.loopexit, label %dec_label_pc_ed2c

dec_label_pc_ed2c:                                ; preds = %dec_label_pc_ed10
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ed2c = icmp eq i32 %v5_ed1c, 0
  store i1 %v2_ed2c, i1* %cpsr_z.global-to-local, align 1
  %tmp405 = icmp slt i32 %v5_ed1c, 1
  br i1 %tmp405, label %dec_label_pc_ec28, label %dec_label_pc_ed2c.dec_label_pc_eebc_crit_edge

dec_label_pc_ed2c.dec_label_pc_eebc_crit_edge:    ; preds = %dec_label_pc_ed2c
  %v0_eebc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_eebc

dec_label_pc_ed38:                                ; preds = %dec_label_pc_e620
  %v1_ed38 = add i32 %v0_e620, 24
  %v2_ed38 = inttoptr i32 %v1_ed38 to i32*
  %v3_ed38 = load i32, i32* %v2_ed38, align 4
  store i32 %v3_ed38, i32* %r2.global-to-local, align 4
  %v0_ed3c = load i32, i32* @fp, align 4
  store i32 %v0_ed3c, i32* @r4, align 4
  store i32 0, i32* @r8, align 4
  %v3_ed44139 = icmp eq i32 %v3_ed38, 0
  store i1 %v3_ed44139, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_ed44139, i1* %cpsr_z.global-to-local, align 1
  %v6_ed48146 = icmp sgt i32 %v3_ed38, 0
  br i1 %v6_ed48146, label %dec_label_pc_ed4c.preheader, label %dec_label_pc_edf8

dec_label_pc_ed44.loopexit:                       ; preds = %dec_label_pc_ed68
  %v2_ed70 = add i32 %v1_ed70, 2
  store i32 %v2_ed70, i32* @r4, align 4
  %v2_ed74 = add i32 %v1_ed74, 2
  store i32 %v2_ed74, i32* @r8, align 4
  %v3_ed44 = icmp uge i32 %v2_ed74, %v1_ed44
  store i1 %v3_ed44, i1* %cpsr_c.global-to-local, align 1
  %v9_ed44 = icmp eq i32 %v2_ed74, %v1_ed44
  store i1 %v9_ed44, i1* %cpsr_z.global-to-local, align 1
  %v6_ed48 = icmp slt i32 %v2_ed74, %v1_ed44
  br i1 %v6_ed48, label %dec_label_pc_ed4c.preheader, label %dec_label_pc_edf8

dec_label_pc_ed4c.preheader:                      ; preds = %dec_label_pc_ed38, %dec_label_pc_ed44.loopexit
  %v6_ee00223 = phi i32 [ %v6_ee00224, %dec_label_pc_ed44.loopexit ], [ %v0_e620, %dec_label_pc_ed38 ]
  %v1_ed74212 = phi i32 [ %v2_ed74, %dec_label_pc_ed44.loopexit ], [ 0, %dec_label_pc_ed38 ]
  %v1_ed58210 = phi i32 [ %v1_ed44, %dec_label_pc_ed44.loopexit ], [ %v3_ed38, %dec_label_pc_ed38 ]
  %v0_ed4c208 = phi i32 [ %v2_ed70, %dec_label_pc_ed44.loopexit ], [ %v0_ed3c, %dec_label_pc_ed38 ]
  br label %dec_label_pc_ed4c

dec_label_pc_ed4c:                                ; preds = %dec_label_pc_ed4c.preheader, %dec_label_pc_eddc
  %v6_ee00224 = phi i32 [ %v6_ee00223, %dec_label_pc_ed4c.preheader ], [ %v0_ede4, %dec_label_pc_eddc ]
  %v1_ed74 = phi i32 [ %v1_ed74212, %dec_label_pc_ed4c.preheader ], [ %v1_ede8, %dec_label_pc_eddc ]
  %v1_ed44 = phi i32 [ %v1_ed58210, %dec_label_pc_ed4c.preheader ], [ %v3_ede4, %dec_label_pc_eddc ]
  %v1_ed70 = phi i32 [ %v0_ed4c208, %dec_label_pc_ed4c.preheader ], [ %v1_edf0, %dec_label_pc_eddc ]
  %v1_ed4c = inttoptr i32 %v1_ed70 to i8*
  %v2_ed4c = load i8, i8* %v1_ed4c, align 1
  %v3_ed4c = zext i8 %v2_ed4c to i32
  store i32 %v3_ed4c, i32* @r3, align 4
  %v2_ed50 = icmp eq i8 %v2_ed4c, -1
  store i1 %v2_ed50, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_ed50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed50, label %dec_label_pc_ed58, label %dec_label_pc_edf8

dec_label_pc_ed58:                                ; preds = %dec_label_pc_ed4c
  %v0_ed58 = load i32, i32* @fp, align 4
  %v2_ed58 = add i32 %v0_ed58, %v1_ed44
  store i32 %v2_ed58, i32* %r1.global-to-local, align 4
  %v1_ed5c = add i32 %v1_ed70, 1
  store i32 %v1_ed5c, i32* @r5, align 4
  %v3_ed60 = icmp uge i32 %v2_ed58, %v1_ed5c
  store i1 %v3_ed60, i1* %cpsr_c.global-to-local, align 1
  %v9_ed60 = icmp eq i32 %v2_ed58, %v1_ed5c
  store i1 %v9_ed60, i1* %cpsr_z.global-to-local, align 1
  %v2_ed64 = xor i1 %v3_ed60, true
  %v3_ed64 = or i1 %v9_ed60, %v2_ed64
  br i1 %v3_ed64, label %dec_label_pc_edf8, label %dec_label_pc_ed68

dec_label_pc_ed68:                                ; preds = %dec_label_pc_ed58
  %v2_ed68 = inttoptr i32 %v1_ed5c to i8*
  %v3_ed68 = load i8, i8* %v2_ed68, align 1
  %v4_ed68 = zext i8 %v3_ed68 to i32
  store i32 %v4_ed68, i32* @r3, align 4
  %v2_ed6c = icmp eq i8 %v3_ed68, -1
  store i1 %v2_ed6c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_ed6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ed6c, label %dec_label_pc_ed44.loopexit, label %dec_label_pc_ed7c

dec_label_pc_ed7c:                                ; preds = %dec_label_pc_ed68
  %v2_ed7c = icmp ugt i8 %v3_ed68, -4
  store i1 %v2_ed7c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed7c = icmp eq i8 %v3_ed68, -3
  store i1 %v7_ed7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed7c, label %dec_label_pc_ee08, label %dec_label_pc_ed84

dec_label_pc_ed84:                                ; preds = %dec_label_pc_ed7c
  %v1_ed84 = add i32 %v1_ed70, 2
  store i32 %v1_ed84, i32* @r3, align 4
  %v3_ed88 = icmp uge i32 %v2_ed58, %v1_ed84
  store i1 %v3_ed88, i1* %cpsr_c.global-to-local, align 1
  %v9_ed88 = icmp eq i32 %v2_ed58, %v1_ed84
  store i1 %v9_ed88, i1* %cpsr_z.global-to-local, align 1
  %v2_ed8c = xor i1 %v3_ed88, true
  %v3_ed8c = or i1 %v9_ed88, %v2_ed8c
  br i1 %v3_ed8c, label %dec_label_pc_edf8, label %dec_label_pc_ed90

dec_label_pc_ed90:                                ; preds = %dec_label_pc_ee6c, %bb410, %.thread109, %dec_label_pc_ed84
  %v0_ed90 = load i32, i32* @r5, align 4
  %v1_ed90 = inttoptr i32 %v0_ed90 to i8*
  %v2_ed90 = load i8, i8* %v1_ed90, align 1
  %v3_ed90 = zext i8 %v2_ed90 to i32
  store i32 %v3_ed90, i32* %r3.global-to-local, align 4
  %v2_ed94 = icmp ugt i8 %v2_ed90, -4
  store i1 %v2_ed94, i1* %cpsr_c.global-to-local, align 1
  %v7_ed94 = icmp eq i8 %v2_ed90, -3
  store i1 %v7_ed94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed94, label %.thread101, label %dec_label_pc_eda4

.thread101:                                       ; preds = %dec_label_pc_ed90
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_ed90, align 1
  %v0_eda0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eda0.pr.pr, label %.thread104, label %.thread101.dec_label_pc_eda4thread-pre-split_crit_edge

.thread101.dec_label_pc_eda4thread-pre-split_crit_edge: ; preds = %.thread101
  %v0_eda4.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_eda4

dec_label_pc_eda4:                                ; preds = %dec_label_pc_ed90, %.thread101.dec_label_pc_eda4thread-pre-split_crit_edge
  %v0_eda4.pr = phi i32 [ %v0_eda4.pr.pre, %.thread101.dec_label_pc_eda4thread-pre-split_crit_edge ], [ %v3_ed90, %dec_label_pc_ed90 ]
  %v2_eda4 = icmp ugt i32 %v0_eda4.pr, 250
  store i1 %v2_eda4, i1* %cpsr_c.global-to-local, align 1
  %v7_eda4 = icmp eq i32 %v0_eda4.pr, 251
  store i1 %v7_eda4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eda4, label %bb406, label %.thread104

bb406:                                            ; preds = %dec_label_pc_eda4
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_edac = load i32, i32* @r5, align 4
  %v4_edac = inttoptr i32 %v3_edac to i8*
  store i8 -3, i8* %v4_edac, align 1
  br label %.thread104

.thread104:                                       ; preds = %dec_label_pc_eda4, %.thread101, %bb406
  %v0_edb0 = load i32, i32* @r4, align 4
  %v1_edb0 = add i32 %v0_edb0, 2
  %v2_edb0 = inttoptr i32 %v1_edb0 to i8*
  %v3_edb0 = load i8, i8* %v2_edb0, align 1
  %v4_edb0 = zext i8 %v3_edb0 to i32
  store i32 %v4_edb0, i32* %r3.global-to-local, align 4
  %v2_edb4 = icmp ugt i8 %v3_edb0, -4
  store i1 %v2_edb4, i1* %cpsr_c.global-to-local, align 1
  %v7_edb4 = icmp eq i8 %v3_edb0, -3
  store i1 %v7_edb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edb4, label %.thread105, label %dec_label_pc_edc4

.thread105:                                       ; preds = %.thread104
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_edb0, align 1
  %v0_edc0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_edc0.pr.pr, label %.thread108, label %.thread105.dec_label_pc_edc4thread-pre-split_crit_edge

.thread105.dec_label_pc_edc4thread-pre-split_crit_edge: ; preds = %.thread105
  %v0_edc4.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_edc4

dec_label_pc_edc4:                                ; preds = %.thread104, %.thread105.dec_label_pc_edc4thread-pre-split_crit_edge
  %v0_edc4.pr = phi i32 [ %v0_edc4.pr.pre, %.thread105.dec_label_pc_edc4thread-pre-split_crit_edge ], [ %v4_edb0, %.thread104 ]
  %v2_edc4 = icmp ugt i32 %v0_edc4.pr, 250
  store i1 %v2_edc4, i1* %cpsr_c.global-to-local, align 1
  %v7_edc4 = icmp eq i32 %v0_edc4.pr, 251
  store i1 %v7_edc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edc4, label %bb407, label %.thread108

bb407:                                            ; preds = %dec_label_pc_edc4
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_edcc = load i32, i32* @r4, align 4
  %v4_edcc = add i32 %v3_edcc, 2
  %v5_edcc = inttoptr i32 %v4_edcc to i8*
  store i8 -3, i8* %v5_edcc, align 1
  br label %.thread108

.thread108:                                       ; preds = %dec_label_pc_edc4, %.thread105, %bb407
  %v0_edd0 = load i32, i32* @r6, align 4
  %v1_edd0 = add i32 %v0_edd0, 4
  %v2_edd0 = inttoptr i32 %v1_edd0 to i32*
  %v3_edd0 = load i32, i32* %v2_edd0, align 4
  store i32 %v3_edd0, i32* %r0.global-to-local, align 4
  %v0_edd4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_eddc

dec_label_pc_eddc:                                ; preds = %dec_label_pc_f008, %.thread108
  %v0_ede0 = phi i32 [ %v3_f01c, %dec_label_pc_f008 ], [ %v3_edd0, %.thread108 ]
  %storemerge2 = phi i32 [ %v2_ee20, %dec_label_pc_f008 ], [ %v0_edd4, %.thread108 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_f008 ], [ 3, %.thread108 ]
  store i32 %storemerge2, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_ede0 = call i32 @function_10904(i32 %v0_ede0, i32 %storemerge2, i32 %storemerge, i32 16384)
  store i32 %v4_ede0, i32* %r0.global-to-local, align 4
  %v0_ede4 = load i32, i32* @r6, align 4
  %v1_ede4 = add i32 %v0_ede4, 24
  %v2_ede4 = inttoptr i32 %v1_ede4 to i32*
  %v3_ede4 = load i32, i32* %v2_ede4, align 4
  store i32 %v3_ede4, i32* %r2.global-to-local, align 4
  %v0_ede8 = load i32, i32* @r8, align 4
  %v1_ede8 = add i32 %v0_ede8, 3
  store i32 %v1_ede8, i32* @r8, align 4
  %v3_edec = icmp uge i32 %v1_ede8, %v3_ede4
  store i1 %v3_edec, i1* %cpsr_c.global-to-local, align 1
  %v9_edec = icmp eq i32 %v1_ede8, %v3_ede4
  store i1 %v9_edec, i1* %cpsr_z.global-to-local, align 1
  %v0_edf0 = load i32, i32* @r4, align 4
  %v1_edf0 = add i32 %v0_edf0, 3
  store i32 %v1_edf0, i32* @r4, align 4
  %v5_edf4 = icmp slt i32 %v1_ede8, %v3_ede4
  br i1 %v5_edf4, label %dec_label_pc_ed4c, label %dec_label_pc_edf8

dec_label_pc_edf8:                                ; preds = %dec_label_pc_ed44.loopexit, %dec_label_pc_ed4c, %dec_label_pc_eddc, %dec_label_pc_ed84, %dec_label_pc_ed58, %dec_label_pc_ed38, %dec_label_pc_ee08.dec_label_pc_edf8.loopexit_crit_edge
  %v6_ee00 = phi i32 [ %v0_ee38, %dec_label_pc_ee08.dec_label_pc_edf8.loopexit_crit_edge ], [ %v0_e620, %dec_label_pc_ed38 ], [ %v6_ee00224, %dec_label_pc_ed4c ], [ %v0_ede4, %dec_label_pc_eddc ], [ %v6_ee00224, %dec_label_pc_ed84 ], [ %v6_ee00224, %dec_label_pc_ed58 ], [ %v6_ee00224, %dec_label_pc_ed44.loopexit ]
  %v0_edf8 = phi i32 [ %v0_edf8.pre.pre, %dec_label_pc_ee08.dec_label_pc_edf8.loopexit_crit_edge ], [ 0, %dec_label_pc_ed38 ], [ %v1_ed74, %dec_label_pc_ed4c ], [ %v1_ede8, %dec_label_pc_eddc ], [ %v1_ed74, %dec_label_pc_ed84 ], [ %v1_ed74, %dec_label_pc_ed58 ], [ %v2_ed74, %dec_label_pc_ed44.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edf8 = icmp eq i32 %v0_edf8, 0
  store i1 %v2_edf8, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v0_edf8, 1
  br i1 %tmp408, label %dec_label_pc_ec28, label %bb409

bb409:                                            ; preds = %dec_label_pc_edf8
  store i32 3, i32* @r3, align 4
  %v7_ee00 = add i32 %v6_ee00, 12
  %v8_ee00 = inttoptr i32 %v7_ee00 to i32*
  store i32 3, i32* %v8_ee00, align 4
  br label %dec_label_pc_ec28

dec_label_pc_ee08:                                ; preds = %dec_label_pc_ed7c
  store i32 %v2_ee0c, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_153f5.178 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_ee0c, i32* @r0, align 4
  %v0_ee24 = call i32 @function_10700()
  store i32 9, i32* @r2, align 4
  store i32 %v2_ee20, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_153ec.180 to i32), i32* @r1, align 4
  %v0_ee34 = call i32 @function_10700()
  store i32 %v0_ee34, i32* %r0.global-to-local, align 4
  %v0_ee38 = load i32, i32* @r6, align 4
  %v1_ee38 = add i32 %v0_ee38, 24
  %v2_ee38 = inttoptr i32 %v1_ee38 to i32*
  %v3_ee38 = load i32, i32* %v2_ee38, align 4
  %v0_ee3c = load i32, i32* @r4, align 4
  %v1_ee3c = add i32 %v0_ee3c, 2
  store i32 %v1_ee3c, i32* %r2.global-to-local, align 4
  %v0_ee40 = load i32, i32* @fp, align 4
  %v2_ee40 = add i32 %v0_ee40, %v3_ee38
  store i32 %v2_ee40, i32* @r3, align 4
  %v3_ee44 = icmp uge i32 %v2_ee40, %v1_ee3c
  store i1 %v3_ee44, i1* %cpsr_c.global-to-local, align 1
  %v9_ee44 = icmp eq i32 %v2_ee40, %v1_ee3c
  store i1 %v9_ee44, i1* %cpsr_z.global-to-local, align 1
  %v2_ee48 = xor i1 %v3_ee44, true
  %v3_ee48 = or i1 %v9_ee44, %v2_ee48
  br i1 %v3_ee48, label %dec_label_pc_ee08.dec_label_pc_edf8.loopexit_crit_edge, label %dec_label_pc_ee4c

dec_label_pc_ee08.dec_label_pc_edf8.loopexit_crit_edge: ; preds = %dec_label_pc_ee08
  %v0_edf8.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_edf8

dec_label_pc_ee4c:                                ; preds = %dec_label_pc_ee08
  %v2_ee4c = inttoptr i32 %v1_ee3c to i8*
  %v3_ee4c = load i8, i8* %v2_ee4c, align 1
  %v4_ee4c = zext i8 %v3_ee4c to i32
  store i32 %v4_ee4c, i32* %r3.global-to-local, align 4
  %v2_ee50 = icmp ugt i8 %v3_ee4c, 30
  store i1 %v2_ee50, i1* %cpsr_c.global-to-local, align 1
  %v7_ee50 = icmp eq i8 %v3_ee4c, 31
  store i1 %v7_ee50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee50, label %dec_label_pc_f008, label %dec_label_pc_ee58

dec_label_pc_ee58:                                ; preds = %dec_label_pc_ee4c
  %v1_ee58 = inttoptr i32 %v0_ee3c to i8*
  %v2_ee58 = load i8, i8* %v1_ee58, align 1
  %v3_ee58 = zext i8 %v2_ee58 to i32
  store i32 %v3_ee58, i32* %r3.global-to-local, align 4
  %v2_ee5c = icmp ugt i8 %v2_ee58, -4
  store i1 %v2_ee5c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee5c = icmp eq i8 %v2_ee58, -3
  store i1 %v7_ee5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee5c, label %.thread109, label %dec_label_pc_ee6c

.thread109:                                       ; preds = %dec_label_pc_ee58
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_ee58, align 1
  %v0_ee68.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee68.pr.pr, label %dec_label_pc_ed90, label %.thread109.dec_label_pc_ee6cthread-pre-split_crit_edge

.thread109.dec_label_pc_ee6cthread-pre-split_crit_edge: ; preds = %.thread109
  %v0_ee6c.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ee6c

dec_label_pc_ee6c:                                ; preds = %dec_label_pc_ee58, %.thread109.dec_label_pc_ee6cthread-pre-split_crit_edge
  %v0_ee6c.pr = phi i32 [ %v0_ee6c.pr.pre, %.thread109.dec_label_pc_ee6cthread-pre-split_crit_edge ], [ %v3_ee58, %dec_label_pc_ee58 ]
  %v2_ee6c = icmp ugt i32 %v0_ee6c.pr, 250
  store i1 %v2_ee6c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee6c = icmp eq i32 %v0_ee6c.pr, 251
  store i1 %v7_ee6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee6c, label %bb410, label %dec_label_pc_ed90

bb410:                                            ; preds = %dec_label_pc_ee6c
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_ee74 = load i32, i32* @r4, align 4
  %v4_ee74 = inttoptr i32 %v3_ee74 to i8*
  store i8 -3, i8* %v4_ee74, align 1
  br label %dec_label_pc_ed90

dec_label_pc_ee7c:                                ; preds = %dec_label_pc_ebd0, %dec_label_pc_ebf0, %dec_label_pc_ebe8, %dec_label_pc_ebe0, %bb401, %dec_label_pc_ebbc, %dec_label_pc_eb98, %dec_label_pc_ebb4, %dec_label_pc_ebac, %bb400
  %v0_ee7c = phi i32 [ %v1_eb8c, %dec_label_pc_ebbc ], [ %v1_eb8c, %dec_label_pc_eb98 ], [ %v1_eb8c, %dec_label_pc_ebb4 ], [ %v1_eb8c, %dec_label_pc_ebac ], [ %v1_eb8c, %bb400 ], [ %v1_ebfc, %bb401 ], [ %v1_ebfc, %dec_label_pc_ebe0 ], [ %v1_ebfc, %dec_label_pc_ebe8 ], [ %v1_ebfc, %dec_label_pc_ebf0 ], [ %v1_ebfc, %dec_label_pc_ebd0 ]
  %v1_ee7c = add i32 %v0_ee7c, 1
  store i32 %v1_ee7c, i32* @r8, align 4
  br label %dec_label_pc_ee80

dec_label_pc_ee80:                                ; preds = %dec_label_pc_ec20.dec_label_pc_ee80_crit_edge, %dec_label_pc_ee7c
  %v0_ee80 = phi i32 [ %v0_ee80.pre, %dec_label_pc_ec20.dec_label_pc_ee80_crit_edge ], [ %v0_e620, %dec_label_pc_ee7c ]
  %v1_ee80 = inttoptr i32 %v0_ee80 to i32*
  %v2_ee80 = load i32, i32* %v1_ee80, align 4
  store i32 %v2_ee80, i32* %r3.global-to-local, align 4
  %v1_ee84 = add i32 %v0_ee80, 4
  %v2_ee84 = inttoptr i32 %v1_ee84 to i32*
  %v3_ee84 = load i32, i32* %v2_ee84, align 4
  store i32 %v3_ee84, i32* %r0.global-to-local, align 4
  %v1_ee88 = add i32 %v2_ee80, 12
  %v2_ee88 = inttoptr i32 %v1_ee88 to i8*
  %v3_ee88 = load i8, i8* %v2_ee88, align 1
  %v4_ee88 = zext i8 %v3_ee88 to i32
  store i32 %v4_ee88, i32* %r2.global-to-local, align 4
  %v1_ee8c = inttoptr i32 %v2_ee80 to i32*
  %v2_ee8c = load i32, i32* %v1_ee8c, align 4
  store i32 %v2_ee8c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ee94 = call i32 @function_10904(i32 %v3_ee84, i32 %v2_ee8c, i32 %v4_ee88, i32 16384)
  store i32 %v4_ee94, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ee9c = load i32, i32* @r6, align 4
  %v1_ee9c = add i32 %v0_ee9c, 4
  %v2_ee9c = inttoptr i32 %v1_ee9c to i32*
  %v3_ee9c = load i32, i32* %v2_ee9c, align 4
  store i32 %v3_ee9c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_eea8 = call i32 @function_10904(i32 %v3_ee9c, i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32 2, i32 16384)
  store i32 %v4_eea8, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_eeb0 = load i32, i32* @r6, align 4
  %v2_eeb0 = add i32 %v1_eeb0, 12
  %v3_eeb0 = inttoptr i32 %v2_eeb0 to i32*
  store i32 4, i32* %v3_eeb0, align 4
  br label %dec_label_pc_ec28

dec_label_pc_eeb8:                                ; preds = %dec_label_pc_ece4, %dec_label_pc_ecfc, %dec_label_pc_ecf4, %bb404, %dec_label_pc_ec60, %dec_label_pc_ec44, %dec_label_pc_ec58, %bb403
  %v0_eeb8 = phi i32 [ %v1_ec38, %dec_label_pc_ec60 ], [ %v1_ec38, %dec_label_pc_ec44 ], [ %v1_ec38, %dec_label_pc_ec58 ], [ %v1_ec38, %bb403 ], [ %v1_ed08, %bb404 ], [ %v1_ed08, %dec_label_pc_ecf4 ], [ %v1_ed08, %dec_label_pc_ecfc ], [ %v1_ed08, %dec_label_pc_ece4 ]
  %v1_eeb8 = add i32 %v0_eeb8, 1
  store i32 %v1_eeb8, i32* @r8, align 4
  br label %dec_label_pc_eebc

dec_label_pc_eebc:                                ; preds = %dec_label_pc_ed2c.dec_label_pc_eebc_crit_edge, %dec_label_pc_eeb8
  %v0_eebc = phi i32 [ %v0_eebc.pre, %dec_label_pc_ed2c.dec_label_pc_eebc_crit_edge ], [ %v0_e620, %dec_label_pc_eeb8 ]
  %v1_eebc = inttoptr i32 %v0_eebc to i32*
  %v2_eebc = load i32, i32* %v1_eebc, align 4
  store i32 %v2_eebc, i32* %r3.global-to-local, align 4
  %v1_eec0 = add i32 %v0_eebc, 4
  %v2_eec0 = inttoptr i32 %v1_eec0 to i32*
  %v3_eec0 = load i32, i32* %v2_eec0, align 4
  store i32 %v3_eec0, i32* %r0.global-to-local, align 4
  %v1_eec4 = add i32 %v2_eebc, 13
  %v2_eec4 = inttoptr i32 %v1_eec4 to i8*
  %v3_eec4 = load i8, i8* %v2_eec4, align 1
  %v4_eec4 = zext i8 %v3_eec4 to i32
  store i32 %v4_eec4, i32* %r2.global-to-local, align 4
  %v1_eec8 = add i32 %v2_eebc, 4
  %v2_eec8 = inttoptr i32 %v1_eec8 to i32*
  %v3_eec8 = load i32, i32* %v2_eec8, align 4
  store i32 %v3_eec8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_eed0 = call i32 @function_10904(i32 %v3_eec0, i32 %v3_eec8, i32 %v4_eec4, i32 16384)
  store i32 %v4_eed0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eed8 = load i32, i32* @r6, align 4
  %v1_eed8 = add i32 %v0_eed8, 4
  %v2_eed8 = inttoptr i32 %v1_eed8 to i32*
  %v3_eed8 = load i32, i32* %v2_eed8, align 4
  store i32 %v3_eed8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_eee4 = call i32 @function_10904(i32 %v3_eed8, i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), i32 2, i32 16384)
  store i32 %v4_eee4, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_eeec = load i32, i32* @r6, align 4
  %v2_eeec = add i32 %v1_eeec, 12
  %v3_eeec = inttoptr i32 %v2_eeec to i32*
  store i32 5, i32* %v3_eeec, align 4
  br label %dec_label_pc_ec28

dec_label_pc_eef4:                                ; preds = %dec_label_pc_e6c4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_ef00 = call i32 @function_f370(i32 21)
  store i32 %v2_eb40, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_ef10 = call i32 @function_f2ac(i32 21, i32* nonnull %stack_var_-60)
  store i32 %v3_ef10, i32* %r0.global-to-local, align 4
  %v3_ef14 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_ef10, i32* %r2.global-to-local, align 4
  %v1_ef1c = add i32 %v3_ef14, -1
  store i32 %v1_ef1c, i32* %r3.global-to-local, align 4
  %v0_ef20 = load i32, i32* @r6, align 4
  %v1_ef20 = add i32 %v0_ef20, 24
  %v2_ef20 = inttoptr i32 %v1_ef20 to i32*
  %v3_ef20 = load i32, i32* %v2_ef20, align 4
  store i32 %v3_ef20, i32* %r1.global-to-local, align 4
  %v0_ef24 = load i32, i32* @fp, align 4
  store i32 %v0_ef24, i32* %r0.global-to-local, align 4
  %v4_ef28 = call i32 @function_f884(i32 %v0_ef24, i32 %v3_ef20, i32 %v3_ef10, i32 %v1_ef1c)
  store i32 %v4_ef28, i32* @r8, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_ef34 = call i32 @function_f2d0(i32 21)
  store i32 %v1_ef34, i32* @r0, align 4
  %v0_ef38 = load i32, i32* @r8, align 4
  %v2_ef38 = icmp eq i32 %v0_ef38, -1
  store i1 %v2_ef38, i1* %cpsr_c.global-to-local, align 1
  %v7_ef38 = icmp eq i32 %v0_ef38, -1
  store i1 %v7_ef38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef38, label %dec_label_pc_e59c.loopexit, label %dec_label_pc_ef40

dec_label_pc_ef40:                                ; preds = %dec_label_pc_eef4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef40 = icmp eq i32 %v0_ef38, 0
  store i1 %v2_ef40, i1* %cpsr_z.global-to-local, align 1
  %tmp411 = icmp slt i32 %v0_ef38, 1
  br i1 %tmp411, label %dec_label_pc_ec28, label %dec_label_pc_ef48

dec_label_pc_ef48:                                ; preds = %dec_label_pc_ef40
  %v0_ef48 = load i32, i32* @r6, align 4
  %v1_ef48 = add i32 %v0_ef48, 20
  %v2_ef48 = inttoptr i32 %v1_ef48 to i16*
  %v3_ef48 = load i16, i16* %v2_ef48, align 2
  %v4_ef48 = zext i16 %v3_ef48 to i32
  store i32 %v4_ef48, i32* %r3.global-to-local, align 4
  %v1_ef4c = add i32 %v0_ef48, 16
  %v2_ef4c = inttoptr i32 %v1_ef4c to i32*
  %v3_ef4c = load i32, i32* %v2_ef4c, align 4
  store i32 %v3_ef4c, i32* %r2.global-to-local, align 4
  store i32 %v2_ef50, i32* @lr, align 4
  store i32 %v4_ef48, i32* %stack_var_-42, align 4
  store i32 %v3_ef4c, i32* %stack_var_-60, align 4
  %v1_ef5c = inttoptr i32 %v0_ef48 to i32*
  %v2_ef5c = load i32, i32* %v1_ef5c, align 4
  store i32 %v2_ef5c, i32* @sb, align 4
  %v0_ef60 = call i32 @function_fec8()
  store i32 %v0_ef60, i32* %r0.global-to-local, align 4
  %v7_ef64 = icmp eq i32 %v0_ef60, -1
  %.422 = zext i1 %v7_ef64 to i32
  store i32 %.422, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef70 = icmp eq i32 %v0_ef60, 0
  store i1 %v2_ef70, i1* %cpsr_z.global-to-local, align 1
  %tmp414 = icmp slt i32 %v0_ef60, 1
  br i1 %tmp414, label %bb415, label %.thread115

.thread115:                                       ; preds = %dec_label_pc_ef48
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_efc8

bb415:                                            ; preds = %dec_label_pc_ef48
  store i32 %.422, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef7c = icmp eq i1 %v7_ef64, false
  store i1 %v2_ef7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef7c, label %dec_label_pc_ef84, label %dec_label_pc_efc8

dec_label_pc_ef84:                                ; preds = %bb415
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ef90 = call i32 @function_109c0(i32 2, i32 1, i32 0)
  store i32 %v3_ef90, i32* %r0.global-to-local, align 4
  %v2_ef94 = icmp eq i32 %v3_ef90, -1
  store i1 %v2_ef94, i1* %cpsr_c.global-to-local, align 1
  %v7_ef94 = icmp eq i32 %v3_ef90, -1
  store i1 %v7_ef94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ef90, i32* @r7, align 4
  br i1 %v7_ef94, label %dec_label_pc_f240, label %dec_label_pc_efa0

dec_label_pc_efa0:                                ; preds = %dec_label_pc_ef84
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_efa4 = call i32 @function_f370(i32 23)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_efac = call i32 @function_f370(i32 24)
  %v0_efb0 = load i32, i32* @sl, align 4
  store i32 %v0_efb0, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v2_efb8 = inttoptr i32 %v0_efb0 to i32*
  %v3_efb8 = call i32 @function_f2ac(i32 23, i32* %v2_efb8)
  store i32 %v3_efb8, i32* %r0.global-to-local, align 4
  %v1_efbc = call i32 @function_d54c(i32 %v3_efb8)
  store i32 %v1_efbc, i32* %r0.global-to-local, align 4
  store i32 %v1_efbc, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_efc0 = icmp eq i32 %v1_efbc, 0
  store i1 %v3_efc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_efc0, label %dec_label_pc_efc8, label %dec_label_pc_f120

dec_label_pc_efc8:                                ; preds = %.thread115, %dec_label_pc_efa0, %bb415
  %v0_efc8 = load i32, i32* @r6, align 4
  %v1_efc8 = add i32 %v0_efc8, 4
  %v2_efc8 = inttoptr i32 %v1_efc8 to i32*
  %v3_efc8 = load i32, i32* %v2_efc8, align 4
  store i32 %v3_efc8, i32* %r0.global-to-local, align 4
  %v1_efcc = call i32 @function_101d8(i32 %v3_efc8)
  store i32 %v1_efcc, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r3, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_efd8 = load i32, i32* @r6, align 4
  %v2_efd8 = add i32 %v1_efd8, 4
  %v3_efd8 = inttoptr i32 %v2_efd8 to i32*
  store i32 -1, i32* %v3_efd8, align 4
  %v0_efdc = load i32, i32* %r2.global-to-local, align 4
  %v1_efdc = load i32, i32* @r6, align 4
  %v2_efdc = add i32 %v1_efdc, 12
  %v3_efdc = inttoptr i32 %v2_efdc to i32*
  store i32 %v0_efdc, i32* %v3_efdc, align 4
  br label %dec_label_pc_ec28

dec_label_pc_efe4:                                ; preds = %dec_label_pc_e5a8
  store i32 %.pre, i32* @r0, align 4
  %v1_efec = add i32 %v0_efe4, 92
  store i32 %v1_efec, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_eff4 = call i32 @function_106f0(i32 %.pre, i32 %v1_efec, i32 192)
  store i32 %v3_eff4, i32* %r0.global-to-local, align 4
  %v0_eff8 = load i32, i32* @r6, align 4
  %v1_eff8 = add i32 %v0_eff8, 24
  %v2_eff8 = inttoptr i32 %v1_eff8 to i32*
  %v3_eff8 = load i32, i32* %v2_eff8, align 4
  %v1_effc = add i32 %v3_eff8, -64
  store i32 %v1_effc, i32* %r3.global-to-local, align 4
  store i32 %v1_effc, i32* %v2_eff8, align 4
  br label %dec_label_pc_e5b8

dec_label_pc_f008:                                ; preds = %dec_label_pc_ee4c
  store i32 %v2_ee0c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_f014 = add i32 %v0_ee38, 4
  %v2_f014 = inttoptr i32 %v1_f014 to i32*
  %v3_f014 = load i32, i32* %v2_f014, align 4
  store i32 %v3_f014, i32* %r0.global-to-local, align 4
  %v4_f018 = call i32 @function_10904(i32 %v3_f014, i32 %v2_ee0c, i32 3, i32 16384)
  store i32 %v4_f018, i32* %r0.global-to-local, align 4
  %v0_f01c = load i32, i32* @r6, align 4
  %v1_f01c = add i32 %v0_f01c, 4
  %v2_f01c = inttoptr i32 %v1_f01c to i32*
  %v3_f01c = load i32, i32* %v2_f01c, align 4
  store i32 %v3_f01c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eddc

dec_label_pc_f02c:                                ; preds = %dec_label_pc_e6fc
  %v0_f02c = load i32, i32* @r6, align 4
  store i32 %v0_f02c, i32* @r0, align 4
  %v0_f030 = call i32 @function_da7c()
  store i32 %v0_f030, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e738

dec_label_pc_f038:                                ; preds = %dec_label_pc_e560
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_f1a8, i32* %r3.global-to-local, align 4
  store i32 %v2_eb40, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v5_f060 = call i32 @function_10818(i32 %v3_e554, i32 1, i32 4, i32 %v2_f1a8, i32 %v2_eb40)
  %v3_f064 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_f064, i32* %r3.global-to-local, align 4
  %v2_f068 = or i32 %v3_f064, %v5_f060
  store i32 %v2_f068, i32* %r0.global-to-local, align 4
  %v4_f068 = icmp eq i32 %v2_f068, 0
  store i1 %v4_f068, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_f068, label %dec_label_pc_f070, label %dec_label_pc_f104

dec_label_pc_f070:                                ; preds = %dec_label_pc_f038
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_f074 = load i32, i32* @r6, align 4
  %v2_f074 = add i32 %v1_f074, 12
  %v3_f074 = inttoptr i32 %v2_f074 to i32*
  store i32 2, i32* %v3_f074, align 4
  %v0_f078 = call i32 @function_d3a8()
  store i32 %v0_f078, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_1db98.121 to i32), i32* %r3.global-to-local, align 4
  %v2_f080 = load i16, i16* bitcast (i16** @global_var_1db98.121 to i16*), align 4
  %v3_f080 = zext i16 %v2_f080 to i32
  store i32 %v3_f080, i32* %r1.global-to-local, align 4
  %v3_f084 = call i32 @function_fda4(i32 %v0_f078, i32 %v3_f080)
  store i32 %v3_f084, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1db68.117 to i32), i32* %r3.global-to-local, align 4
  %v2_f08c = load i32, i32* @global_var_1db68.117, align 4
  store i32 %v2_f08c, i32* %ip.global-to-local, align 4
  %v1_f094 = load i32, i32* @r4, align 4
  %v9_f094 = icmp eq i32 %v2_f08c, %v1_f094
  store i1 %v9_f094, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_f080, i32* %r1.global-to-local, align 4
  %v7_f09c = icmp sgt i32 %v2_f08c, %v1_f094
  br i1 %v7_f09c, label %dec_label_pc_f0a0, label %dec_label_pc_f0e0

dec_label_pc_f0a0:                                ; preds = %dec_label_pc_f070
  %v2_f0a4 = load i32, i32* @global_var_1db94.119, align 4
  store i32 %v2_f0a4, i32* %r3.global-to-local, align 4
  store i32 %v1_f094, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f0c0

dec_label_pc_f0b0:                                ; preds = %dec_label_pc_f0d0, %dec_label_pc_f0c0
  %v1_f0b0 = add i32 %v0_f0b0, 1
  store i32 %v1_f0b0, i32* %r2.global-to-local, align 4
  %v9_f0b4 = icmp eq i32 %v1_f0b0, %v2_f08c
  %v1_f0b8 = add i32 %v0_f0b8, 16
  store i32 %v1_f0b8, i32* %r3.global-to-local, align 4
  br i1 %v9_f0b4, label %dec_label_pc_f0e0.loopexit, label %dec_label_pc_f0c0

dec_label_pc_f0c0:                                ; preds = %dec_label_pc_f0b0, %dec_label_pc_f0a0
  %v0_f0b0 = phi i32 [ %v1_f0b0, %dec_label_pc_f0b0 ], [ %v1_f094, %dec_label_pc_f0a0 ]
  %v0_f0b8 = phi i32 [ %v1_f0b8, %dec_label_pc_f0b0 ], [ %v2_f0a4, %dec_label_pc_f0a0 ]
  store i32 %v0_f0b8, i32* %r0.global-to-local, align 4
  %v1_f0c4 = add i32 %v0_f0b8, 8
  %v2_f0c4 = inttoptr i32 %v1_f0c4 to i16*
  %v3_f0c4 = load i16, i16* %v2_f0c4, align 2
  %v4_f0c4 = zext i16 %v3_f0c4 to i32
  store i32 %v4_f0c4, i32* %r3.global-to-local, align 4
  %tmp416 = icmp ugt i16 %v3_f0c4, %v2_f080
  br i1 %tmp416, label %dec_label_pc_f0b0, label %dec_label_pc_f0d0

dec_label_pc_f0d0:                                ; preds = %dec_label_pc_f0c0
  %v1_f0d0 = add i32 %v0_f0b8, 10
  %v2_f0d0 = inttoptr i32 %v1_f0d0 to i16*
  %v3_f0d0 = load i16, i16* %v2_f0d0, align 2
  %v4_f0d0 = zext i16 %v3_f0d0 to i32
  store i32 %v4_f0d0, i32* %r3.global-to-local, align 4
  %v3_f0d4 = icmp uge i16 %v3_f0d0, %v2_f080
  %v9_f0d4 = icmp eq i16 %v3_f0d0, %v2_f080
  %v2_f0d8 = xor i1 %v3_f0d4, true
  %v3_f0d8 = or i1 %v9_f0d4, %v2_f0d8
  br i1 %v3_f0d8, label %dec_label_pc_f0b0, label %dec_label_pc_f0e4.loopexit

dec_label_pc_f0e0.loopexit:                       ; preds = %dec_label_pc_f0b0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f0e0

dec_label_pc_f0e0:                                ; preds = %dec_label_pc_f0e0.loopexit, %dec_label_pc_f070
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f0e4

dec_label_pc_f0e4.loopexit:                       ; preds = %dec_label_pc_f0d0
  store i1 %v3_f0d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f0e4

dec_label_pc_f0e4:                                ; preds = %dec_label_pc_f0e4.loopexit, %dec_label_pc_f0e0
  %v0_f0f8 = phi i32 [ %v0_f0b8, %dec_label_pc_f0e4.loopexit ], [ 0, %dec_label_pc_f0e0 ]
  %v0_f0e4 = load i32, i32* @r6, align 4
  %v1_f0e4 = add i32 %v0_f0e4, 4
  %v2_f0e4 = inttoptr i32 %v1_f0e4 to i32*
  %v3_f0e4 = load i32, i32* %v2_f0e4, align 4
  %v3_f0e8 = udiv i32 %v3_f0e4, 32
  store i32 %v3_f0e8, i32* %r2.global-to-local, align 4
  %v1_f0ec = urem i32 %v3_f0e4, 32
  store i32 %v1_f0ec, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_f0f0 = mul nuw nsw i32 %v3_f0e8, 4
  store i32 %v3_f0f0, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_f0f8 = inttoptr i32 %v0_f0e4 to i32*
  store i32 %v0_f0f8, i32* %v2_f0f8, align 4
  %v0_f0fc = load i32, i32* %r3.global-to-local, align 4
  %v1_f0fc = load i32, i32* @r6, align 4
  %v2_f0fc = add i32 %v1_f0fc, 24
  %v3_f0fc = inttoptr i32 %v2_f0fc to i32*
  store i32 %v0_f0fc, i32* %v3_f0fc, align 4
  %v0_e588.pre = load i32, i32* @ip, align 4
  %v1_e590.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e584

dec_label_pc_f104:                                ; preds = %dec_label_pc_f038
  %v0_f104 = load i32, i32* @r6, align 4
  %v1_f104 = add i32 %v0_f104, 4
  %v2_f104 = inttoptr i32 %v1_f104 to i32*
  %v3_f104 = load i32, i32* %v2_f104, align 4
  store i32 %v3_f104, i32* %r0.global-to-local, align 4
  %v1_f108 = call i32 @function_101d8(i32 %v3_f104)
  store i32 %v1_f108, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_f110 = load i32, i32* @r4, align 4
  %v1_f110 = load i32, i32* @r6, align 4
  %v2_f110 = add i32 %v1_f110, 12
  %v3_f110 = inttoptr i32 %v2_f110 to i32*
  store i32 %v0_f110, i32* %v3_f110, align 4
  %v0_f114 = load i32, i32* %r3.global-to-local, align 4
  %v1_f114 = load i32, i32* @r6, align 4
  %v2_f114 = add i32 %v1_f114, 4
  %v3_f114 = inttoptr i32 %v2_f114 to i32*
  store i32 %v0_f114, i32* %v3_f114, align 4
  %v0_f118 = load i32, i32* @r4, align 4
  %v1_f118 = trunc i32 %v0_f118 to i8
  %v2_f118 = load i32, i32* @r6, align 4
  %v3_f118 = add i32 %v2_f118, 284
  %v4_f118 = inttoptr i32 %v3_f118 to i8*
  store i8 %v1_f118, i8* %v4_f118, align 1
  br label %dec_label_pc_e6ac

dec_label_pc_f120:                                ; preds = %dec_label_pc_efa0
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %v2_ef50, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v1_f12c = add i32 %v1_efbc, 4
  %v2_f12c = inttoptr i32 %v1_f12c to i32*
  %v3_f12c = load i32, i32* %v2_f12c, align 4
  store i32 %v3_f12c, i32* @r4, align 4
  %v0_f130 = call i32 @function_d3a8()
  store i32 %v0_f130, i32* %r0.global-to-local, align 4
  %v0_f134 = load i32, i32* @r5, align 4
  %v1_f134 = inttoptr i32 %v0_f134 to i8*
  %v2_f134 = load i8, i8* %v1_f134, align 1
  %v3_f134 = zext i8 %v2_f134 to i32
  store i32 %v3_f134, i32* %r1.global-to-local, align 4
  %v2_f138 = call i32 @function_fda4(i32 %v0_f130, i32 %v3_f134)
  store i32 %v2_f138, i32* %r0.global-to-local, align 4
  %v0_f13c = load i32, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_f13c = mul nuw nsw i32 %v3_f134, 4
  %v5_f13c = add i32 %v0_f13c, %v4_f13c
  %v6_f13c = inttoptr i32 %v5_f13c to i32*
  %v7_f13c = load i32, i32* %v6_f13c, align 4
  store i32 %v7_f13c, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v0_f144 = load i32, i32* @sl, align 4
  store i32 %v0_f144, i32* %r1.global-to-local, align 4
  %v2_f14c = inttoptr i32 %v0_f144 to i32*
  %v3_f14c = call i32 @function_f2ac(i32 24, i32* %v2_f14c)
  store i32 %v2_ef50, i32* %r2.global-to-local, align 4
  %v0_f15c = load i32, i32* @r5, align 4
  store i32 %v0_f15c, i32* %r0.global-to-local, align 4
  %v1_f160 = call i32 @function_d524(i32 %v0_f15c)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_f168 = call i32 @function_f2d0(i32 23)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_f170 = call i32 @function_f2d0(i32 24)
  %v0_f178 = load i32, i32* @r7, align 4
  store i32 %v0_f178, i32* %r0.global-to-local, align 4
  store i32 %v2_f17c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f184 = call i32 @function_107a8(i32 %v0_f178, i32 %v2_f17c, i32 16)
  store i32 %v3_f184, i32* %r0.global-to-local, align 4
  %v3_f188 = icmp eq i32 %v3_f184, -1
  store i1 %v3_f188, i1* %cpsr_c.global-to-local, align 1
  %v8_f188 = icmp eq i32 %v3_f184, -1
  store i1 %v8_f188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f188, label %dec_label_pc_f190, label %dec_label_pc_f1a0

dec_label_pc_f190:                                ; preds = %dec_label_pc_f120
  %v0_f190 = load i32, i32* @r7, align 4
  store i32 %v0_f190, i32* %r0.global-to-local, align 4
  %v1_f194 = call i32 @function_101d8(i32 %v0_f190)
  %v0_f198 = load i32, i32* @sl, align 4
  store i32 %v0_f198, i32* %r0.global-to-local, align 4
  %v1_f19c = call i32 @function_12018(i32 %v0_f198)
  store i32 %v1_f19c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f1a0

dec_label_pc_f1a0:                                ; preds = %dec_label_pc_f120, %dec_label_pc_f190
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_f1a8, i32* %r1.global-to-local, align 4
  %v0_f1ac = load i32, i32* @r7, align 4
  store i32 %v0_f1ac, i32* %r0.global-to-local, align 4
  %v0_f1b0 = load i32, i32* @sl, align 4
  store i32 %v0_f1b0, i32* %stack_var_-56, align 4
  %v5_f1b4 = call i32 @function_10904(i32 %v0_f1ac, i32 %v2_f1a8, i32 1, i32 16384)
  store i32 %v2_eb40, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f1c8 = load i32, i32* @r7, align 4
  store i32 %v0_f1c8, i32* %r0.global-to-local, align 4
  %v4_f1cc = call i32 @function_10904(i32 %v0_f1c8, i32 %v2_eb40, i32 4, i32 16384)
  store i32 %v2_f1d4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f1e0 = load i32, i32* @r7, align 4
  store i32 %v0_f1e0, i32* %r0.global-to-local, align 4
  %v4_f1e4 = call i32 @function_10904(i32 %v0_f1e0, i32 %v2_f1d4, i32 2, i32 16384)
  %v0_f1e8 = load i32, i32* @sb, align 4
  %v1_f1e8 = add i32 %v0_f1e8, 12
  store i32 %v1_f1e8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f1f4 = load i32, i32* @r7, align 4
  store i32 %v0_f1f4, i32* %r0.global-to-local, align 4
  %v4_f1f8 = call i32 @function_10904(i32 %v0_f1f4, i32 %v1_f1e8, i32 1, i32 16384)
  store i32 %v4_f1f8, i32* %r0.global-to-local, align 4
  %v0_f1fc = load i32, i32* @sb, align 4
  %v1_f1fc = inttoptr i32 %v0_f1fc to i32*
  %v2_f1fc = load i32, i32* %v1_f1fc, align 4
  store i32 %v2_f1fc, i32* %r1.global-to-local, align 4
  %v1_f200 = add i32 %v0_f1fc, 12
  %v2_f200 = inttoptr i32 %v1_f200 to i8*
  %v3_f200 = load i8, i8* %v2_f200, align 1
  %v4_f200 = zext i8 %v3_f200 to i32
  store i32 %v4_f200, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f208 = load i32, i32* @r7, align 4
  store i32 %v0_f208, i32* %r0.global-to-local, align 4
  %v4_f20c = call i32 @function_10904(i32 %v0_f208, i32 %v2_f1fc, i32 %v4_f200, i32 16384)
  %v0_f210 = load i32, i32* @sb, align 4
  %v1_f210 = add i32 %v0_f210, 13
  store i32 %v1_f210, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f21c = load i32, i32* @r7, align 4
  store i32 %v0_f21c, i32* %r0.global-to-local, align 4
  %v4_f220 = call i32 @function_10904(i32 %v0_f21c, i32 %v1_f210, i32 1, i32 16384)
  %v0_f224 = load i32, i32* @r7, align 4
  store i32 %v0_f224, i32* %r0.global-to-local, align 4
  %v0_f228 = load i32, i32* @sb, align 4
  %v1_f228 = add i32 %v0_f228, 13
  %v2_f228 = inttoptr i32 %v1_f228 to i8*
  %v3_f228 = load i8, i8* %v2_f228, align 1
  %v4_f228 = zext i8 %v3_f228 to i32
  store i32 %v4_f228, i32* %r2.global-to-local, align 4
  %v1_f22c = add i32 %v0_f228, 4
  %v2_f22c = inttoptr i32 %v1_f22c to i32*
  %v3_f22c = load i32, i32* %v2_f22c, align 4
  store i32 %v3_f22c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f234 = call i32 @function_10904(i32 %v0_f224, i32 %v3_f22c, i32 %v4_f228, i32 16384)
  %v0_f238 = load i32, i32* @r7, align 4
  store i32 %v0_f238, i32* %r0.global-to-local, align 4
  %v1_f23c = call i32 @function_101d8(i32 %v0_f238)
  store i32 %v1_f23c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f240

dec_label_pc_f240:                                ; preds = %dec_label_pc_ef84, %dec_label_pc_f1a0
  %v0_f240 = load i32, i32* @sl, align 4
  store i32 %v0_f240, i32* %r0.global-to-local, align 4
  %v1_f244 = call i32 @function_12018(i32 %v0_f240)
  store i32 %v1_f244, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f248

dec_label_pc_f248:                                ; preds = %dec_label_pc_ec04, %dec_label_pc_f240
  %v0_f248 = load i32, i32* @fp, align 4
  store i32 %v0_f248, i32* %r0.global-to-local, align 4
  %v0_f24c = load i32, i32* @r6, align 4
  %v1_f24c = add i32 %v0_f24c, 24
  %v2_f24c = inttoptr i32 %v1_f24c to i32*
  %v3_f24c = load i32, i32* %v2_f24c, align 4
  store i32 %v3_f24c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_153d0.185 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_f258 = call i32 @function_f884(i32 %v0_f248, i32 %v3_f24c, i32 ptrtoint ([6 x i8]* @global_var_153d0.185 to i32), i32 5)
  store i32 %v5_f258, i32* %r0.global-to-local, align 4
  %v3_f25c = icmp eq i32 %v5_f258, -1
  store i1 %v3_f25c, i1* %cpsr_c.global-to-local, align 1
  %v8_f25c = icmp eq i32 %v5_f258, -1
  store i1 %v8_f25c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_f258, i32* @r8, align 4
  br i1 %v3_f25c, label %dec_label_pc_e59c.loopexit, label %dec_label_pc_ec20

dec_label_pc_f26c:                                ; preds = %dec_label_pc_e3f8
  store i32 %v3_f26c, i32* %r0.global-to-local, align 4
  %v3_f270 = udiv i32 %v3_f26c, 32
  %v3_f274 = mul nuw nsw i32 %v3_f270, 4
  store i32 %v2_f278, i32* @lr, align 4
  %v2_f27c = add i32 %v3_f274, %v2_f278
  store i32 %v2_f27c, i32* %r3.global-to-local, align 4
  %v1_f280 = add i32 %v2_f27c, -312
  %v2_f280 = inttoptr i32 %v1_f280 to i32*
  %v3_f280 = load i32, i32* %v2_f280, align 4
  %v1_f284 = urem i32 %v3_f26c, 32
  store i32 %v1_f284, i32* %r1.global-to-local, align 4
  %v7_f288 = shl i32 1, %v1_f284
  %v8_f288 = or i32 %v3_f280, %v7_f288
  store i32 %v8_f288, i32* %r2.global-to-local, align 4
  %v0_f28c = load i32, i32* @r5, align 4
  %v3_f28c = icmp uge i32 %v0_f28c, %v3_f26c
  store i1 %v3_f28c, i1* %cpsr_c.global-to-local, align 1
  %v9_f28c = icmp eq i32 %v0_f28c, %v3_f26c
  store i1 %v9_f28c, i1* %cpsr_z.global-to-local, align 1
  %v5_f290 = icmp slt i32 %v0_f28c, %v3_f26c
  br i1 %v5_f290, label %bb417, label %bb418

bb417:                                            ; preds = %dec_label_pc_f26c
  store i32 %v3_f26c, i32* @r5, align 4
  br label %bb418

bb418:                                            ; preds = %dec_label_pc_f26c, %bb417
  store i32 %v8_f288, i32* %v2_f280, align 4
  br label %bb369

dec_label_pc_f29c:                                ; preds = %dec_label_pc_e658
  store i32 %stack_var_-1876.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_e5c0, align 4
  br label %dec_label_pc_e674

; uselistorder directives
  uselistorder i32 %v0_f28c, { 0, 2, 1 }
  uselistorder i32 %v1_f284, { 1, 0 }
  uselistorder i32 %v5_f258, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_f0e4, { 1, 0 }
  uselistorder i1 %v3_f0d4, { 1, 0 }
  uselistorder i32 %v0_f0b8, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_f08c, { 0, 2, 1, 3 }
  uselistorder i32 %v3_f01c, { 1, 0 }
  uselistorder i1 %v7_ef94, { 1, 0 }
  uselistorder i32 %v3_ef90, { 1, 0, 2, 3 }
  uselistorder i1 %v2_ef7c, { 1, 0 }
  uselistorder i32 %.422, { 1, 0 }
  uselistorder i1 %v7_ef64, { 1, 0 }
  uselistorder i32 %v0_ef60, { 2, 1, 0, 3 }
  uselistorder i1 %v7_ef38, { 1, 0 }
  uselistorder i32 %v0_ef38, { 2, 1, 0, 3 }
  uselistorder i32 %v0_eebc, { 1, 0 }
  uselistorder i32 %v0_ee80, { 1, 0 }
  uselistorder i32 %v0_ee6c.pr, { 1, 0 }
  uselistorder i32 %v0_ee38, { 1, 2, 0 }
  uselistorder i32 %v0_edf8, { 1, 0 }
  uselistorder i32 %v1_edf0, { 1, 0 }
  uselistorder i32 %v1_ede8, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_ede4, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_ede4, { 0, 2, 1 }
  uselistorder i32 %v0_edc4.pr, { 1, 0 }
  uselistorder i32 %v0_eda4.pr, { 1, 0 }
  uselistorder i1 %v7_ed7c, { 1, 0 }
  uselistorder i1 %v2_ed6c, { 1, 0, 2 }
  uselistorder i1 %v2_ed50, { 1, 0, 2 }
  uselistorder i32 %v1_ed70, { 1, 2, 3, 0 }
  uselistorder i32 %v1_ed44, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_ed74, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v7_ed20, { 1, 0 }
  uselistorder i32 %v5_ed1c, { 2, 3, 1, 0, 4, 5 }
  uselistorder i32 %v1_ed08, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_ed08, { 0, 2, 1 }
  uselistorder i32 %v0_ed00, { 1, 0 }
  uselistorder i1 %v7_ecfc, { 1, 0 }
  uselistorder i1 %v7_ecf4, { 1, 0 }
  uselistorder i1 %v8_ecec, { 1, 0 }
  uselistorder i1 %v7_ec60, { 1, 0 }
  uselistorder i1 %v7_ec58, { 1, 0 }
  uselistorder i1 %v8_ec50, { 1, 0 }
  uselistorder i32 %v1_ec38, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i32 %v3_ec34, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ec20, { 1, 0 }
  uselistorder i1 %v7_ec14, { 1, 0 }
  uselistorder i32 %v5_ec10, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_ebfc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_ebfc, { 0, 2, 1 }
  uselistorder i32 %v0_ebf4, { 1, 0 }
  uselistorder i1 %v7_ebf0, { 1, 0 }
  uselistorder i1 %v7_ebe8, { 1, 0 }
  uselistorder i1 %v7_ebe0, { 1, 0 }
  uselistorder i1 %v8_ebd8, { 1, 0 }
  uselistorder i1 %v7_ebbc, { 1, 0 }
  uselistorder i1 %v7_ebb4, { 1, 0 }
  uselistorder i1 %v7_ebac, { 1, 0 }
  uselistorder i1 %v8_eba4, { 1, 0 }
  uselistorder i32 %v1_eb8c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v3_eb88, { 1, 0, 2, 3 }
  uselistorder i1 %v8_eb28, { 1, 0 }
  uselistorder i8 %v3_eb20, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_eb18, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_eb18, { 0, 2, 1 }
  uselistorder i32 %v0_eb10, { 1, 0 }
  uselistorder i1 %v7_eb0c, { 1, 0 }
  uselistorder i1 %v7_eb04, { 1, 0 }
  uselistorder i1 %v7_eafc, { 1, 0 }
  uselistorder i1 %v7_eae8, { 1, 0 }
  uselistorder i1 %v7_eae0, { 1, 0 }
  uselistorder i1 %v7_ead8, { 1, 0 }
  uselistorder i1 %v8_ead0, { 1, 0 }
  uselistorder i32 %v1_eab8, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_ea54, { 1, 0 }
  uselistorder i8 %v3_ea4c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ea44, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_ea44, { 0, 2, 1 }
  uselistorder i32 %v0_ea3c, { 1, 0 }
  uselistorder i1 %v7_ea38, { 1, 0 }
  uselistorder i1 %v7_ea30, { 1, 0 }
  uselistorder i1 %v7_ea28, { 1, 0 }
  uselistorder i1 %v7_ea14, { 1, 0 }
  uselistorder i1 %v7_ea0c, { 1, 0 }
  uselistorder i1 %v7_ea04, { 1, 0 }
  uselistorder i1 %v8_e9fc, { 1, 0 }
  uselistorder i32 %v1_e9e4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_e980, { 1, 0 }
  uselistorder i8 %v3_e978, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e970, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_e970, { 0, 2, 1 }
  uselistorder i32 %v0_e968, { 1, 0 }
  uselistorder i1 %v7_e964, { 1, 0 }
  uselistorder i1 %v7_e95c, { 1, 0 }
  uselistorder i1 %v7_e954, { 1, 0 }
  uselistorder i1 %v7_e940, { 1, 0 }
  uselistorder i1 %v7_e938, { 1, 0 }
  uselistorder i1 %v7_e930, { 1, 0 }
  uselistorder i1 %v8_e928, { 1, 0 }
  uselistorder i32 %v1_e910, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_e8ac, { 1, 0 }
  uselistorder i8 %v3_e8a4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e89c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_e89c, { 0, 2, 1 }
  uselistorder i32 %v0_e894, { 1, 0 }
  uselistorder i1 %v7_e890, { 1, 0 }
  uselistorder i1 %v7_e888, { 1, 0 }
  uselistorder i1 %v7_e880, { 1, 0 }
  uselistorder i1 %v7_e86c, { 1, 0 }
  uselistorder i1 %v7_e864, { 1, 0 }
  uselistorder i1 %v7_e85c, { 1, 0 }
  uselistorder i1 %v8_e854, { 1, 0 }
  uselistorder i32 %v1_e83c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_e7d8, { 1, 0 }
  uselistorder i8 %v3_e7d0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e7c8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_e7c8, { 0, 2, 1 }
  uselistorder i32 %v0_e7c0, { 1, 0 }
  uselistorder i1 %v7_e7bc, { 1, 0 }
  uselistorder i1 %v7_e7b4, { 1, 0 }
  uselistorder i1 %v7_e7ac, { 1, 0 }
  uselistorder i1 %v7_e798, { 1, 0 }
  uselistorder i1 %v7_e790, { 1, 0 }
  uselistorder i1 %v7_e788, { 1, 0 }
  uselistorder i1 %v8_e780, { 1, 0 }
  uselistorder i32 %v1_e768, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_e754, { 1, 2, 0 }
  uselistorder i32 %v2_e740, { 1, 0 }
  uselistorder i32 %v0_e740, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_e73c, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_e714, { 2, 1, 0 }
  uselistorder i1 %v7_e6f4, { 1, 0 }
  uselistorder i32 %v1_e6b0, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_e694, { 1, 0 }
  uselistorder i32 %v1_e684, { 2, 1, 0 }
  uselistorder i32 %v1_e680, { 1, 0 }
  uselistorder i32 %v3_e620, { 1, 2, 3, 0 }
  uselistorder i32 %v0_e620, { 22, 20, 4, 0, 19, 5, 6, 23, 7, 8, 21, 9, 10, 24, 11, 12, 27, 13, 14, 25, 15, 16, 26, 17, 18, 28, 29, 3, 2, 1 }
  uselistorder i32 %v1_e5fc, { 1, 2, 3, 0 }
  uselistorder i32 %v3_e5f8, { 1, 0 }
  uselistorder i32 %v4_e5dc, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_e5c8, { 1, 0, 2 }
  uselistorder i32 %v3_e5c4, { 1, 0, 2 }
  uselistorder i32 %v0_efe4, { 1, 0, 2 }
  uselistorder i32 %v3_e58c, { 1, 0 }
  uselistorder i32 %v1_e574, { 3, 2, 1, 0 }
  uselistorder i32 %v3_e570, { 1, 0 }
  uselistorder i32 %v3_e568, { 1, 2, 0 }
  uselistorder i1 %v7_e558, { 1, 0 }
  uselistorder i32 %v3_e554, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_e548, { 1, 0 }
  uselistorder i32 %v2_f1a8, { 2, 3, 1, 0 }
  uselistorder i32 %v2_eb40, { 4, 5, 1, 0, 3, 10, 7, 9, 8, 6, 2 }
  uselistorder i32 %v2_ee20, { 1, 0 }
  uselistorder i32 %v1_e4f0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e4f0, { 0, 1, 3, 2 }
  uselistorder i32 %v1_e4bc, { 2, 1, 0 }
  uselistorder i32 %v1_e4b8, { 1, 0 }
  uselistorder i1 %v2_e498, { 1, 0, 2 }
  uselistorder i32 %v0_e494, { 1, 0, 2 }
  uselistorder i1 %v7_e460, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_e460, { 1, 0, 2 }
  uselistorder i32 %v2_e458, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_e44c, { 1, 0, 2 }
  uselistorder i32 %v0_e450, { 1, 0 }
  uselistorder i32 %v1_e434, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_e428, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e428, { 0, 2, 1 }
  uselistorder i32 %v1_e418, { 1, 0 }
  uselistorder i32 %v3_f26c, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v2_f278, { 0, 7, 1, 5, 2, 4, 3, 6 }
  uselistorder i32 %stack_var_-1876.0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e364, { 1, 0 }
  uselistorder i32 %v1_e34c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e358, { 0, 3, 2, 1 }
  uselistorder i32 %v0_e308, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_e2fc, { 2, 1, 0 }
  uselistorder i32 %v1_e2dc, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_e2b8, { 1, 0 }
  uselistorder i1 %v9_e284, { 1, 0 }
  uselistorder i32 %v1_e1d4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_e184, { 1, 0 }
  uselistorder i32 %v5_e11c, { 1, 0 }
  uselistorder i32 %v3_e10c, { 1, 2, 0 }
  uselistorder i16 %v4_e108, { 1, 0 }
  uselistorder i32 %v3_e108, { 1, 0 }
  uselistorder i1 %v2_e064, { 1, 0 }
  uselistorder i1 %v3_e048, { 1, 0, 2 }
  uselistorder i1 %v2_e034, { 1, 0 }
  uselistorder i1 %v2_e010, { 1, 0 }
  uselistorder i32 %v1_dfc0, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_dfac, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_dfa8, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_df90, { 1, 0 }
  uselistorder i32 %v0_e264, { 0, 1, 2, 3, 6, 7, 10, 9, 4, 5, 8, 12, 11 }
  uselistorder i32 %stack_var_-1880.0, { 0, 3, 2, 1 }
  uselistorder i16 %v5_de04.le, { 0, 2, 1 }
  uselistorder i32 %v0_dde8, { 2, 0, 1 }
  uselistorder i1 %v7_dd88, { 1, 0 }
  uselistorder i32 %v3_dd80, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_dd6c, { 1, 0 }
  uselistorder i32 %v2_dd50, { 1, 0, 2 }
  uselistorder i32 %v0_dd3c, { 1, 2, 0 }
  uselistorder i32 %storemerge294, { 1, 0 }
  uselistorder i32 %v0_dcb0, { 2, 1, 3, 0, 4 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-96, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-68, { 1, 0 }
  uselistorder i32* %stack_var_-224, { 1, 0 }
  uselistorder i32* %stack_var_-352, { 1, 0 }
  uselistorder i32* %stack_var_-60, { 7, 8, 9, 5, 10, 0, 11, 3, 12, 1, 13, 2, 14, 4, 15, 6, 16 }
  uselistorder i32 %tmp300, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 72, 73, 60, 61, 62, 63, 64, 65, 66, 67, 68, 74, 75, 76, 77, 78, 80, 79, 81, 82, 83, 85, 84, 86, 0, 87, 155, 69, 70, 14, 15, 16, 59, 57, 58, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 52, 51, 53, 54, 55, 56, 71, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 113, 110, 115, 157, 158, 116, 117, 159, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 156, 134, 135, 136, 137, 139, 138, 141, 140, 154, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153 }
  uselistorder i32* %r2.global-to-local, { 50, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 51, 52, 53, 54, 0, 43, 44, 45, 46, 47, 5, 6, 31, 32, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 48, 49, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 109, 110, 70, 71, 73, 72, 69, 112, 74, 113, 75, 114, 115, 76, 77, 78, 79, 80, 81, 82, 83, 84, 60, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 111, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108 }
  uselistorder i32* %r1.global-to-local, { 52, 53, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 54, 55, 56, 57, 58, 1, 46, 47, 48, 49, 3, 4, 32, 33, 0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 97, 98, 50, 51, 59, 60, 61, 62, 63, 65, 66, 67, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 99, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96 }
  uselistorder i32* %r0.global-to-local, { 113, 64, 63, 66, 65, 68, 67, 70, 69, 71, 73, 72, 74, 75, 76, 77, 78, 79, 81, 80, 82, 84, 83, 85, 86, 88, 87, 117, 114, 115, 116, 118, 120, 119, 89, 0, 2, 1, 122, 91, 90, 92, 94, 93, 95, 96, 98, 97, 99, 100, 101, 103, 102, 104, 8, 7, 10, 9, 60, 59, 62, 61, 3, 6, 5, 14, 11, 12, 13, 18, 15, 16, 17, 19, 21, 20, 23, 22, 25, 24, 26, 27, 29, 28, 31, 30, 33, 32, 34, 35, 37, 36, 39, 38, 41, 40, 42, 43, 45, 44, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 106, 108, 107, 109, 105, 110, 111, 112, 121, 125, 123, 124, 131, 126, 127, 128, 152, 129, 130, 132, 134, 133, 135, 140, 136, 139, 137, 138, 141, 143, 144, 142, 185, 145, 146, 149, 147, 148, 151, 150, 4, 184, 154, 153, 155, 157, 156, 159, 158, 160, 161, 162, 163, 164, 186, 165, 166, 167, 168, 169, 170, 171, 173, 172, 174, 179, 175, 176, 177, 178, 180, 181, 182, 183 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 6, 4, 5, 7, 22, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19, 20, 21 }
  uselistorder i1* %cpsr_z.global-to-local, { 123, 110, 111, 216, 217, 124, 125, 112, 113, 114, 18, 115, 117, 118, 1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 171, 24, 25, 30, 26, 27, 28, 29, 31, 32, 33, 34, 35, 116, 109, 36, 42, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 49, 50, 51, 55, 56, 57, 58, 59, 60, 64, 65, 66, 61, 62, 63, 67, 68, 69, 70, 71, 72, 76, 77, 78, 73, 74, 75, 79, 80, 81, 82, 83, 84, 88, 89, 90, 85, 86, 87, 91, 92, 93, 94, 95, 96, 100, 101, 102, 97, 98, 99, 103, 104, 105, 106, 107, 108, 119, 120, 121, 122, 126, 128, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 0, 218, 172, 173, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 151, 152, 150, 147, 148, 207, 208, 213, 153, 214, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 10, 189, 190, 191, 192, 193, 7, 194, 195, 196, 6, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 209, 215 }
  uselistorder i1* %cpsr_c.global-to-local, { 120, 107, 108, 109, 121, 208, 209, 122, 110, 111, 112, 12, 113, 115, 116, 1, 2, 3, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 162, 21, 22, 27, 23, 24, 25, 26, 28, 29, 30, 31, 32, 114, 106, 33, 39, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 49, 50, 51, 46, 47, 48, 52, 53, 54, 55, 56, 57, 61, 62, 63, 58, 59, 60, 64, 65, 66, 67, 68, 69, 73, 74, 75, 70, 71, 72, 76, 77, 78, 79, 80, 81, 85, 86, 87, 82, 83, 84, 88, 89, 90, 91, 92, 93, 97, 98, 99, 94, 95, 96, 100, 101, 102, 103, 104, 105, 117, 118, 119, 123, 125, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 0, 212, 164, 166, 135, 136, 137, 138, 139, 140, 141, 144, 146, 147, 145, 142, 143, 211, 201, 206, 148, 207, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 7, 182, 183, 184, 185, 186, 6, 187, 188, 189, 4, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 202, 210 }
  uselistorder i16* bitcast (i16** @global_var_1db98.121 to i16*), { 1, 0 }
  uselistorder i16** @global_var_1db98.121, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1db98.121 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10818, { 1, 0 }
  uselistorder i32 23, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 4, 5 }
  uselistorder i8 30, { 4, 0, 1, 5, 2, 3 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_153d8.172 to i32), { 5, 7, 6, 8, 0, 9, 3, 10, 1, 11, 2, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @function_10904, { 12, 11, 10, 9, 8, 7, 6, 28, 26, 25, 14, 13, 27, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11 }
  uselistorder i8 34, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 36, { 4, 5, 0, 1, 2, 3, 6, 7, 8, 9, 18, 19, 20, 21, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25 }
  uselistorder i8 35, { 4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 20, 21, 22, 23, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27 }
  uselistorder i8 58, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13, 14, 15 }
  uselistorder i8 57, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 62, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 61, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i32 (i32)* @function_f2d0, { 18, 17, 16, 23, 22, 21, 20, 19, 15, 0, 2, 1, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 (i32, i32, i32, i32)* @function_f884, { 2, 1, 4, 3, 0 }
  uselistorder i32 (i32, i32*)* @function_f2ac, { 5, 6, 7, 0, 1, 2, 3, 4, 8, 28, 26, 27, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 (i32)* @function_f370, { 18, 17, 16, 23, 22, 21, 20, 19, 15, 0, 2, 1, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 (i32, i32, i32, i32)* @function_10890, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_fefc, { 1, 2, 0 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_da7c, { 2, 1, 0 }
  uselistorder i32 254, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 5, { 11, 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_108c8, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_1093c, { 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_bfc8, { 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_1db84.167, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1db80.133 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @function_bf78, { 10, 9, 2, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i16* bitcast (i32* @global_var_1db76.164 to i16*), { 1, 0, 2 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 29, { 1, 0 }
  uselistorder i32 223, { 2, 0, 1 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_db44, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15374.144 to i32), { 0, 9, 1, 10, 2, 3, 4, 11, 5, 12, 6, 13, 7, 14, 8, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_153a8.142 to i32), { 1, 3, 2, 4, 0, 5 }
  uselistorder i8* @global_var_1db8d.139, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 1, 0, 2 }
  uselistorder i8 6, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i8 16, { 11, 0, 1, 3, 2, 12, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i16* @global_var_1db80.133, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_1db80.133 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_1db8c.134, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_1db6c.130, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1db6c.130 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_d3a8, { 65, 63, 62, 61, 60, 59, 58, 64, 57, 11, 10, 56, 55, 54, 53, 52, 15, 14, 13, 12, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_1097c, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 2048, { 6, 5, 2, 3, 4, 0, 1, 7, 8, 9 }
  uselistorder i32* @global_var_1fbec.128, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_1fbe8.126, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 2, 3, 6, 0, 1, 4, 5, 7 }
  uselistorder i32* @global_var_1db9c.115, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @function_fe58, { 0, 1, 2, 3, 4, 5, 6, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24 }
  uselistorder i32 (i32)* @function_d404, { 1, 0 }
  uselistorder i32* @global_var_1fbd0.42, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32 ptrtoint (i32* @global_var_1fbd0.42 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @function_fa88, { 2, 1, 0 }
  uselistorder i32* @global_var_1fbf0.113, { 0, 2, 1 }
  uselistorder i32 ()* @function_fec8, { 5, 4, 1, 0, 3, 2 }
  uselistorder label %bb418, { 1, 0 }
  uselistorder label %dec_label_pc_f248, { 1, 0 }
  uselistorder label %dec_label_pc_f240, { 1, 0 }
  uselistorder label %dec_label_pc_f1a0, { 1, 0 }
  uselistorder label %dec_label_pc_efc8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_eebc, { 1, 0 }
  uselistorder label %dec_label_pc_eeb8, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_ee80, { 1, 0 }
  uselistorder label %dec_label_pc_ee7c, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_ee6c, { 1, 0 }
  uselistorder label %dec_label_pc_edf8, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread108, { 2, 0, 1 }
  uselistorder label %dec_label_pc_edc4, { 1, 0 }
  uselistorder label %.thread104, { 2, 0, 1 }
  uselistorder label %dec_label_pc_eda4, { 1, 0 }
  uselistorder label %dec_label_pc_ed90, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ed4c, { 1, 0 }
  uselistorder label %dec_label_pc_ed4c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_ed08, { 1, 0 }
  uselistorder label %dec_label_pc_ec28, { 7, 4, 5, 6, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ebfc, { 1, 0 }
  uselistorder label %dec_label_pc_eb30, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_eb18, { 1, 0 }
  uselistorder label %dec_label_pc_ea5c, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_ea44, { 1, 0 }
  uselistorder label %dec_label_pc_e988, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_e970, { 1, 0 }
  uselistorder label %dec_label_pc_e8b4, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_e89c, { 1, 0 }
  uselistorder label %dec_label_pc_e7e0, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_e7c8, { 1, 0 }
  uselistorder label %dec_label_pc_e6ac, { 6, 7, 3, 1, 0, 2, 4, 5 }
  uselistorder label %bb381, { 1, 0 }
  uselistorder label %bb379, { 1, 0 }
  uselistorder label %dec_label_pc_e674, { 1, 0 }
  uselistorder label %dec_label_pc_e608, { 1, 0 }
  uselistorder label %.thread62, { 1, 0 }
  uselistorder label %dec_label_pc_e5b8, { 1, 0 }
  uselistorder label %dec_label_pc_e5a8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e5a0thread-pre-split.thread512, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_e5a0thread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e5a8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_e59c.loopexit, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_e584, { 1, 0 }
  uselistorder label %dec_label_pc_e4d8, { 1, 0 }
  uselistorder label %bb375, { 1, 0 }
  uselistorder label %bb373, { 1, 0 }
  uselistorder label %bb371, { 1, 0 }
  uselistorder label %bb369, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_e3cc.dec_label_pc_e3cc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e3a8.dec_label_pc_e3a8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e39c, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_e394, { 1, 0 }
  uselistorder label %dec_label_pc_e370, { 1, 0 }
  uselistorder label %dec_label_pc_e34c, { 1, 0 }
  uselistorder label %dec_label_pc_e1fc, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_e1e8, { 1, 0 }
  uselistorder label %bb366, { 1, 0 }
  uselistorder label %dec_label_pc_e074, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e050, { 1, 0 }
  uselistorder label %dec_label_pc_e044, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e020, { 1, 2, 0 }
  uselistorder label %dec_label_pc_dffc, { 1, 0 }
  uselistorder label %bb340, { 1, 0 }
  uselistorder label %dec_label_pc_dfa8, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_dde8, { 1, 0 }
}

define i32 @function_f2ac(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f2ac:
  store i32 ptrtoint (i32* @global_var_1fbf8.187 to i32), i32* @r2, align 4
  %v3_f2b0 = mul i32 %arg1, 8
  %v2_f2b4 = add i32 %v3_f2b0, ptrtoint (i32* @global_var_1fbf8.187 to i32)
  store i32 %v2_f2b4, i32* @r3, align 4
  %v2_f2b8 = icmp eq i32* %arg2, null
  br i1 %v2_f2b8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_f2ac
  %v3_f2c04 = inttoptr i32 %v2_f2b4 to i32*
  %v4_f2c05 = load i32, i32* %v3_f2c04, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_f2ac
  %v2_f2bc = add i32 %v3_f2b0, add (i32 ptrtoint (i32* @global_var_1fbf8.187 to i32), i32 4)
  %v3_f2bc = inttoptr i32 %v2_f2bc to i16*
  %v4_f2bc = load i16, i16* %v3_f2bc, align 4
  %v5_f2bc = zext i16 %v4_f2bc to i32
  store i32 %v5_f2bc, i32* @r3, align 4
  %v3_f2c0 = inttoptr i32 %v2_f2b4 to i32*
  %v4_f2c0 = load i32, i32* %v3_f2c0, align 4
  store i32 %v5_f2bc, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_f2c06 = phi i32 [ %v4_f2c05, %.thread ], [ %v4_f2c0, %bb ]
  ret i32 %v4_f2c06

; uselistorder directives
  uselistorder i32 %v2_f2b4, { 1, 0, 2 }
  uselistorder i32 %v3_f2b0, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_f2d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_f2d0:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f2d8 = mul i32 %arg1, 8
  %v2_f2dc = add i32 %v3_f2d8, ptrtoint (i32* @global_var_1fbf8.187 to i32)
  %v2_f2e0 = load i32, i32* inttoptr (i32 121224 to i32*), align 8
  %v1_f2e4 = add i32 %v3_f2d8, add (i32 ptrtoint (i32* @global_var_1fbf8.187 to i32), i32 4)
  %v2_f2e4 = inttoptr i32 %v1_f2e4 to i16*
  %v3_f2e4 = load i16, i16* %v2_f2e4, align 4
  %v3_f2e8 = udiv i32 %v2_f2e0, 256
  store i32 %v3_f2e8, i32* @r2, align 4
  %v2_f2ec = icmp eq i16 %v3_f2e4, 0
  store i1 %v2_f2ec, i1* @cpsr_z, align 1
  %v3_f2f0 = udiv i32 %v2_f2e0, 65536
  store i32 %v3_f2f0, i32* @r3, align 4
  %v3_f2f4 = load i32, i32* @r4, align 4
  store i32 %v3_f2f4, i32* %stack_var_-16, align 4
  %v1_f2f8 = urem i32 %v3_f2e8, 256
  store i32 %v1_f2f8, i32* %r6.global-to-local, align 4
  %v1_f2fc = urem i32 %v3_f2f0, 256
  store i32 %v1_f2fc, i32* %r5.global-to-local, align 4
  %v3_f300 = udiv i32 %v2_f2e0, 16777216
  store i32 %v3_f300, i32* %r4.global-to-local, align 4
  %v1_f304 = urem i32 %v2_f2e0, 256
  store i32 %v1_f304, i32* %lr.global-to-local, align 4
  br i1 %v2_f2ec, label %dec_label_pc_f360, label %dec_label_pc_f30c

dec_label_pc_f30c:                                ; preds = %dec_label_pc_f2d0
  store i32 0, i32* @ip, align 4
  %v1_f310 = inttoptr i32 %v2_f2dc to i32*
  br label %dec_label_pc_f310

dec_label_pc_f310:                                ; preds = %dec_label_pc_f310.dec_label_pc_f310_crit_edge, %dec_label_pc_f30c
  %v0_f318 = phi i32 [ %v0_f318.pre, %dec_label_pc_f310.dec_label_pc_f310_crit_edge ], [ %v1_f304, %dec_label_pc_f30c ]
  %v2_f31c = phi i32 [ %v1_f354, %dec_label_pc_f310.dec_label_pc_f310_crit_edge ], [ 0, %dec_label_pc_f30c ]
  %v2_f310 = load i32, i32* %v1_f310, align 4
  %v2_f314 = add i32 %v2_f310, %v2_f31c
  %v3_f314 = inttoptr i32 %v2_f314 to i8*
  %v4_f314 = load i8, i8* %v3_f314, align 1
  %v6_f314 = zext i8 %v4_f314 to i32
  %v2_f318 = xor i32 %v6_f314, %v0_f318
  %v1_f31c = trunc i32 %v2_f318 to i8
  store i8 %v1_f31c, i8* %v3_f314, align 1
  %v2_f320 = load i32, i32* %v1_f310, align 4
  %v0_f324 = load i32, i32* @ip, align 4
  %v2_f324 = add i32 %v0_f324, %v2_f320
  %v3_f324 = inttoptr i32 %v2_f324 to i8*
  %v4_f324 = load i8, i8* %v3_f324, align 1
  %v6_f324 = zext i8 %v4_f324 to i32
  %v0_f328 = load i32, i32* %r6.global-to-local, align 4
  %v2_f328 = xor i32 %v0_f328, %v6_f324
  %v1_f32c = trunc i32 %v2_f328 to i8
  store i8 %v1_f32c, i8* %v3_f324, align 1
  %v2_f330 = load i32, i32* %v1_f310, align 4
  %v0_f334 = load i32, i32* @ip, align 4
  %v2_f334 = add i32 %v0_f334, %v2_f330
  %v3_f334 = inttoptr i32 %v2_f334 to i8*
  %v4_f334 = load i8, i8* %v3_f334, align 1
  %v6_f334 = zext i8 %v4_f334 to i32
  %v0_f338 = load i32, i32* %r5.global-to-local, align 4
  %v2_f338 = xor i32 %v0_f338, %v6_f334
  %v1_f33c = trunc i32 %v2_f338 to i8
  store i8 %v1_f33c, i8* %v3_f334, align 1
  %v2_f340 = load i32, i32* %v1_f310, align 4
  %v0_f344 = load i32, i32* @ip, align 4
  %v2_f344 = add i32 %v0_f344, %v2_f340
  %v3_f344 = inttoptr i32 %v2_f344 to i8*
  %v4_f344 = load i8, i8* %v3_f344, align 1
  %v6_f344 = zext i8 %v4_f344 to i32
  %v0_f348 = load i32, i32* %r4.global-to-local, align 4
  %v2_f348 = xor i32 %v0_f348, %v6_f344
  store i32 %v2_f348, i32* @r3, align 4
  %v1_f34c = trunc i32 %v2_f348 to i8
  store i8 %v1_f34c, i8* %v3_f344, align 1
  %v3_f350 = load i16, i16* %v2_f2e4, align 4
  %v4_f350 = zext i16 %v3_f350 to i32
  store i32 %v4_f350, i32* @r2, align 4
  %v0_f354 = load i32, i32* @ip, align 4
  %v1_f354 = add i32 %v0_f354, 1
  store i32 %v1_f354, i32* @ip, align 4
  %v9_f358 = icmp eq i32 %v4_f350, %v1_f354
  store i1 %v9_f358, i1* @cpsr_z, align 1
  %v8_f35c = icmp sgt i32 %v4_f350, %v1_f354
  br i1 %v8_f35c, label %dec_label_pc_f310.dec_label_pc_f310_crit_edge, label %dec_label_pc_f360.loopexit

dec_label_pc_f310.dec_label_pc_f310_crit_edge:    ; preds = %dec_label_pc_f310
  %v0_f318.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f310

dec_label_pc_f360.loopexit:                       ; preds = %dec_label_pc_f310
  %v2_f360.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_f360

dec_label_pc_f360:                                ; preds = %dec_label_pc_f360.loopexit, %dec_label_pc_f2d0
  %v2_f360 = phi i32 [ %v2_f360.pre, %dec_label_pc_f360.loopexit ], [ %v3_f2f4, %dec_label_pc_f2d0 ]
  store i32 %v2_f360, i32* @r4, align 4
  ret i32 %v2_f2dc

; uselistorder directives
  uselistorder i32 %v1_f354, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f304, { 1, 0 }
  uselistorder i32 %v3_f2f0, { 1, 0 }
  uselistorder i32 %v3_f2e8, { 1, 0 }
  uselistorder i32 %v2_f2e0, { 3, 0, 1, 2 }
  uselistorder i32 %v3_f2d8, { 1, 0 }
}

define i32 @function_f370(i32 %arg1) local_unnamed_addr {
dec_label_pc_f370:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f378 = mul i32 %arg1, 8
  %v2_f37c = add i32 %v3_f378, ptrtoint (i32* @global_var_1fbf8.187 to i32)
  %v2_f380 = load i32, i32* inttoptr (i32 121224 to i32*), align 8
  %v1_f384 = add i32 %v3_f378, add (i32 ptrtoint (i32* @global_var_1fbf8.187 to i32), i32 4)
  %v2_f384 = inttoptr i32 %v1_f384 to i16*
  %v3_f384 = load i16, i16* %v2_f384, align 4
  %v3_f388 = udiv i32 %v2_f380, 256
  %v2_f38c = icmp eq i16 %v3_f384, 0
  %v3_f390 = udiv i32 %v2_f380, 65536
  %v3_f394 = load i32, i32* @r4, align 4
  store i32 %v3_f394, i32* %stack_var_-16, align 4
  %v1_f398 = urem i32 %v3_f388, 256
  store i32 %v1_f398, i32* %r6.global-to-local, align 4
  %v1_f39c = urem i32 %v3_f390, 256
  store i32 %v1_f39c, i32* %r5.global-to-local, align 4
  %v3_f3a0 = udiv i32 %v2_f380, 16777216
  store i32 %v3_f3a0, i32* %r4.global-to-local, align 4
  %v1_f3a4 = urem i32 %v2_f380, 256
  store i32 %v1_f3a4, i32* %lr.global-to-local, align 4
  br i1 %v2_f38c, label %dec_label_pc_f400, label %dec_label_pc_f3ac

dec_label_pc_f3ac:                                ; preds = %dec_label_pc_f370
  store i32 0, i32* @ip, align 4
  %v1_f3b0 = inttoptr i32 %v2_f37c to i32*
  br label %dec_label_pc_f3b0

dec_label_pc_f3b0:                                ; preds = %dec_label_pc_f3b0.dec_label_pc_f3b0_crit_edge, %dec_label_pc_f3ac
  %v0_f3b8 = phi i32 [ %v0_f3b8.pre, %dec_label_pc_f3b0.dec_label_pc_f3b0_crit_edge ], [ %v1_f3a4, %dec_label_pc_f3ac ]
  %v2_f3bc = phi i32 [ %v1_f3f4, %dec_label_pc_f3b0.dec_label_pc_f3b0_crit_edge ], [ 0, %dec_label_pc_f3ac ]
  %v2_f3b0 = load i32, i32* %v1_f3b0, align 4
  %v2_f3b4 = add i32 %v2_f3b0, %v2_f3bc
  %v3_f3b4 = inttoptr i32 %v2_f3b4 to i8*
  %v4_f3b4 = load i8, i8* %v3_f3b4, align 1
  %v6_f3b4 = zext i8 %v4_f3b4 to i32
  %v2_f3b8 = xor i32 %v6_f3b4, %v0_f3b8
  %v1_f3bc = trunc i32 %v2_f3b8 to i8
  store i8 %v1_f3bc, i8* %v3_f3b4, align 1
  %v2_f3c0 = load i32, i32* %v1_f3b0, align 4
  %v0_f3c4 = load i32, i32* @ip, align 4
  %v2_f3c4 = add i32 %v0_f3c4, %v2_f3c0
  %v3_f3c4 = inttoptr i32 %v2_f3c4 to i8*
  %v4_f3c4 = load i8, i8* %v3_f3c4, align 1
  %v6_f3c4 = zext i8 %v4_f3c4 to i32
  %v0_f3c8 = load i32, i32* %r6.global-to-local, align 4
  %v2_f3c8 = xor i32 %v0_f3c8, %v6_f3c4
  %v1_f3cc = trunc i32 %v2_f3c8 to i8
  store i8 %v1_f3cc, i8* %v3_f3c4, align 1
  %v2_f3d0 = load i32, i32* %v1_f3b0, align 4
  %v0_f3d4 = load i32, i32* @ip, align 4
  %v2_f3d4 = add i32 %v0_f3d4, %v2_f3d0
  %v3_f3d4 = inttoptr i32 %v2_f3d4 to i8*
  %v4_f3d4 = load i8, i8* %v3_f3d4, align 1
  %v6_f3d4 = zext i8 %v4_f3d4 to i32
  %v0_f3d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_f3d8 = xor i32 %v0_f3d8, %v6_f3d4
  %v1_f3dc = trunc i32 %v2_f3d8 to i8
  store i8 %v1_f3dc, i8* %v3_f3d4, align 1
  %v2_f3e0 = load i32, i32* %v1_f3b0, align 4
  %v0_f3e4 = load i32, i32* @ip, align 4
  %v2_f3e4 = add i32 %v0_f3e4, %v2_f3e0
  %v3_f3e4 = inttoptr i32 %v2_f3e4 to i8*
  %v4_f3e4 = load i8, i8* %v3_f3e4, align 1
  %v6_f3e4 = zext i8 %v4_f3e4 to i32
  %v0_f3e8 = load i32, i32* %r4.global-to-local, align 4
  %v2_f3e8 = xor i32 %v0_f3e8, %v6_f3e4
  %v1_f3ec = trunc i32 %v2_f3e8 to i8
  store i8 %v1_f3ec, i8* %v3_f3e4, align 1
  %v3_f3f0 = load i16, i16* %v2_f384, align 4
  %v4_f3f0 = zext i16 %v3_f3f0 to i32
  %v0_f3f4 = load i32, i32* @ip, align 4
  %v1_f3f4 = add i32 %v0_f3f4, 1
  store i32 %v1_f3f4, i32* @ip, align 4
  %v8_f3fc = icmp sgt i32 %v4_f3f0, %v1_f3f4
  br i1 %v8_f3fc, label %dec_label_pc_f3b0.dec_label_pc_f3b0_crit_edge, label %dec_label_pc_f400.loopexit

dec_label_pc_f3b0.dec_label_pc_f3b0_crit_edge:    ; preds = %dec_label_pc_f3b0
  %v0_f3b8.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f3b0

dec_label_pc_f400.loopexit:                       ; preds = %dec_label_pc_f3b0
  %v2_f400.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_f400

dec_label_pc_f400:                                ; preds = %dec_label_pc_f400.loopexit, %dec_label_pc_f370
  %v2_f400 = phi i32 [ %v2_f400.pre, %dec_label_pc_f400.loopexit ], [ %v3_f394, %dec_label_pc_f370 ]
  store i32 %v2_f400, i32* @r4, align 4
  ret i32 %v2_f37c

; uselistorder directives
  uselistorder i32 %v1_f3f4, { 1, 2, 0 }
  uselistorder i32 %v1_f3a4, { 1, 0 }
  uselistorder i32 %v2_f380, { 3, 0, 1, 2 }
  uselistorder i32 %v2_f37c, { 1, 0 }
  uselistorder i32 %v3_f378, { 1, 0 }
}

define i32 @function_f410(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f410:
  %stack_var_-24 = alloca i32, align 4
  %v3_f410 = load i32, i32* @r4, align 4
  store i32 %v3_f410, i32* %stack_var_-24, align 4
  %v6_f410 = load i32, i32* @r5, align 4
  %v9_f410 = load i32, i32* @r6, align 4
  %v12_f410 = load i32, i32* @r7, align 4
  %v15_f410 = load i32, i32* @r8, align 4
  store i32 2, i32* @r0, align 4
  %v0_f418 = call i32 @function_10c08()
  store i32 ptrtoint (i32* @global_var_1fbf8.187 to i32), i32* @r4, align 4
  store i32 2, i32* @r5, align 4
  store i32 %v0_f418, i32* @r6, align 4
  %v4_f430 = call i32 @function_f83c(i32 %v0_f418, i32 ptrtoint ([3 x i8]* @global_var_153f8.194 to i32), i32 2)
  store i32 12, i32* @r0, align 4
  %v0_f438 = load i32, i32* @r6, align 4
  store i32 %v0_f438, i32* @global_var_1fc08.195, align 4
  %v0_f43c = load i32, i32* @r5, align 4
  %v1_f43c = trunc i32 %v0_f43c to i16
  store i16 %v1_f43c, i16* bitcast (i32* @global_var_1fc0c.196 to i16*), align 4
  %v0_f440 = call i32 @function_10c08()
  store i32 %v0_f440, i32* @r6, align 4
  store i32 12, i32* @r8, align 4
  %v4_f454 = call i32 @function_f83c(i32 %v0_f440, i32 ptrtoint ([13 x i8]* @global_var_153fc.198 to i32), i32 12)
  %v0_f458 = load i32, i32* @r5, align 4
  store i32 %v0_f458, i32* @r0, align 4
  %v0_f45c = load i32, i32* @r6, align 4
  store i32 %v0_f45c, i32* @global_var_1fcb0.199, align 4
  %v0_f460 = load i32, i32* @r8, align 4
  %v1_f460 = trunc i32 %v0_f460 to i16
  store i16 %v1_f460, i16* bitcast (i32* @global_var_1fcb4.200 to i16*), align 4
  %v0_f464 = call i32 @function_10c08()
  %v0_f468 = load i32, i32* @r5, align 4
  store i32 %v0_f464, i32* @r6, align 4
  %v3_f474 = call i32 @function_f83c(i32 %v0_f464, i32 ptrtoint (i32* @global_var_1540c.202 to i32), i32 %v0_f468)
  store i32 58, i32* @r0, align 4
  %v0_f47c = load i32, i32* @r6, align 4
  store i32 %v0_f47c, i32* @global_var_1fcb8.203, align 4
  %v0_f480 = load i32, i32* @r5, align 4
  %v1_f480 = trunc i32 %v0_f480 to i16
  store i16 %v1_f480, i16* bitcast (i32* @global_var_1fcbc.204 to i16*), align 4
  %v0_f484 = call i32 @function_10c08()
  store i32 %v0_f484, i32* @r5, align 4
  %v4_f494 = call i32 @function_f83c(i32 %v0_f484, i32 ptrtoint ([59 x i8]* @global_var_15410.206 to i32), i32 58)
  store i32 6, i32* @r0, align 4
  store i16 58, i16* bitcast (i32* @global_var_1fc04.207 to i16*), align 4
  %v0_f4a4 = load i32, i32* @r5, align 4
  store i32 %v0_f4a4, i32* @global_var_1fc00.208, align 4
  %v0_f4a8 = call i32 @function_10c08()
  store i32 %v0_f4a8, i32* @r5, align 4
  store i32 6, i32* @r7, align 4
  %v4_f4bc = call i32 @function_f83c(i32 %v0_f4a8, i32 ptrtoint ([7 x i8]* @global_var_1544c.210 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r6, align 4
  %v0_f4c8 = load i32, i32* @r5, align 4
  store i32 %v0_f4c8, i32* @global_var_1fc78.211, align 4
  %v0_f4cc = load i32, i32* @r7, align 4
  %v1_f4cc = trunc i32 %v0_f4cc to i16
  store i16 %v1_f4cc, i16* bitcast (i32* @global_var_1fc7c.212 to i16*), align 4
  %v0_f4d0 = call i32 @function_10c08()
  %v0_f4d4 = load i32, i32* @r6, align 4
  store i32 %v0_f4d0, i32* @r5, align 4
  %v4_f4e0 = call i32 @function_f83c(i32 %v0_f4d0, i32 ptrtoint ([8 x i8]* @global_var_15454.214 to i32), i32 %v0_f4d4)
  %v0_f4e4 = load i32, i32* @r6, align 4
  store i32 %v0_f4e4, i32* @r0, align 4
  %v0_f4e8 = load i32, i32* @r5, align 4
  store i32 %v0_f4e8, i32* @global_var_1fc80.215, align 4
  %v1_f4ec = trunc i32 %v0_f4e4 to i16
  store i16 %v1_f4ec, i16* bitcast (i32* @global_var_1fc84.216 to i16*), align 4
  %v0_f4f0 = call i32 @function_10c08()
  %v0_f4f4 = load i32, i32* @r6, align 4
  store i32 %v0_f4f0, i32* @r5, align 4
  %v4_f500 = call i32 @function_f83c(i32 %v0_f4f0, i32 ptrtoint ([8 x i8]* @global_var_1545c.218 to i32), i32 %v0_f4f4)
  store i32 3, i32* @r0, align 4
  %v0_f508 = load i32, i32* @r5, align 4
  store i32 %v0_f508, i32* @global_var_1fc88.219, align 4
  %v0_f50c = load i32, i32* @r6, align 4
  %v1_f50c = trunc i32 %v0_f50c to i16
  store i16 %v1_f50c, i16* bitcast (i32* @global_var_1fc8c.220 to i16*), align 4
  %v0_f510 = call i32 @function_10c08()
  store i32 %v0_f510, i32* @r5, align 4
  %v4_f520 = call i32 @function_f83c(i32 %v0_f510, i32 ptrtoint ([4 x i8]* @global_var_15464.222 to i32), i32 3)
  store i32 20, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_1fc9c.223 to i16*), align 4
  %v0_f530 = load i32, i32* @r5, align 4
  store i32 %v0_f530, i32* @global_var_1fc98.224, align 4
  %v0_f534 = call i32 @function_10c08()
  store i32 %v0_f534, i32* @r5, align 4
  %v3_f544 = call i32 @function_f83c(i32 %v0_f534, i32 ptrtoint (i32* @global_var_15468.226 to i32), i32 20)
  store i32 25, i32* @r0, align 4
  store i16 20, i16* bitcast (i32* @global_var_1fc94.227 to i16*), align 4
  %v0_f554 = load i32, i32* @r5, align 4
  store i32 %v0_f554, i32* @global_var_1fc90.228, align 4
  %v0_f558 = call i32 @function_10c08()
  store i32 %v0_f558, i32* @r5, align 4
  %v3_f568 = call i32 @function_f83c(i32 %v0_f558, i32 ptrtoint (i32* @global_var_15480.230 to i32), i32 25)
  store i32 9, i32* @r0, align 4
  store i16 25, i16* bitcast (i32* @global_var_1fca4.231 to i16*), align 4
  %v0_f578 = load i32, i32* @r5, align 4
  store i32 %v0_f578, i32* @global_var_1fca0.232, align 4
  %v0_f57c = call i32 @function_10c08()
  store i32 %v0_f57c, i32* @r5, align 4
  %v4_f58c = call i32 @function_f83c(i32 %v0_f57c, i32 ptrtoint ([10 x i8]* @global_var_1549c.234 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_1fcac.235 to i16*), align 4
  %v0_f59c = load i32, i32* @r5, align 4
  store i32 %v0_f59c, i32* @global_var_1fca8.236, align 4
  %v0_f5a0 = call i32 @function_10c08()
  store i32 %v0_f5a0, i32* @r5, align 4
  %v4_f5b0 = call i32 @function_f83c(i32 %v0_f5a0, i32 ptrtoint ([17 x i8]* @global_var_154a8.238 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  store i16 16, i16* bitcast (i32* @global_var_1fcc4.239 to i16*), align 4
  %v0_f5c0 = load i32, i32* @r5, align 4
  store i32 %v0_f5c0, i32* @global_var_1fcc0.240, align 4
  %v0_f5c4 = call i32 @function_10c08()
  store i32 %v0_f5c4, i32* @r5, align 4
  %v4_f5d4 = call i32 @function_f83c(i32 %v0_f5c4, i32 ptrtoint ([23 x i8]* @global_var_154bc.242 to i32), i32 22)
  %v0_f5dc = load i32, i32* @r6, align 4
  store i32 %v0_f5dc, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_1fccc.243 to i16*), align 4
  %v0_f5e4 = load i32, i32* @r5, align 4
  store i32 %v0_f5e4, i32* @global_var_1fcc8.244, align 4
  %v0_f5e8 = call i32 @function_10c08()
  %v0_f5ec = load i32, i32* @r6, align 4
  store i32 %v0_f5e8, i32* @r5, align 4
  %v4_f5f8 = call i32 @function_f83c(i32 %v0_f5e8, i32 ptrtoint ([8 x i8]* @global_var_154d4.246 to i32), i32 %v0_f5ec)
  store i32 5, i32* @r0, align 4
  %v0_f600 = load i32, i32* @r5, align 4
  store i32 %v0_f600, i32* @global_var_1fc10.247, align 4
  %v0_f604 = load i32, i32* @r6, align 4
  %v1_f604 = trunc i32 %v0_f604 to i16
  store i16 %v1_f604, i16* bitcast (i32* @global_var_1fc14.248 to i16*), align 4
  %v0_f608 = call i32 @function_10c08()
  store i32 %v0_f608, i32* @r5, align 4
  %v4_f618 = call i32 @function_f83c(i32 %v0_f608, i32 ptrtoint ([6 x i8]* @global_var_154dc.250 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  store i16 5, i16* bitcast (i32* @global_var_1fc1c.251 to i16*), align 4
  %v0_f628 = load i32, i32* @r5, align 4
  store i32 %v0_f628, i32* @global_var_1fc18.252, align 4
  %v0_f62c = call i32 @function_10c08()
  store i32 %v0_f62c, i32* @r5, align 4
  %v4_f63c = call i32 @function_f83c(i32 %v0_f62c, i32 ptrtoint ([5 x i8]* @global_var_154e4.254 to i32), i32 4)
  %v0_f644 = load i32, i32* @r7, align 4
  store i32 %v0_f644, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_1fc2c.255 to i16*), align 4
  %v0_f64c = load i32, i32* @r5, align 4
  store i32 %v0_f64c, i32* @global_var_1fc28.256, align 4
  %v0_f650 = call i32 @function_10c08()
  %v0_f658 = load i32, i32* @r7, align 4
  store i32 %v0_f650, i32* @r5, align 4
  %v4_f660 = call i32 @function_f83c(i32 %v0_f650, i32 ptrtoint ([7 x i8]* @global_var_154ec.258 to i32), i32 %v0_f658)
  store i32 14, i32* @r0, align 4
  %v0_f668 = load i32, i32* @r5, align 4
  store i32 %v0_f668, i32* @global_var_1fc30.259, align 4
  %v0_f66c = load i32, i32* @r7, align 4
  %v1_f66c = trunc i32 %v0_f66c to i16
  store i16 %v1_f66c, i16* bitcast (i32* @global_var_1fc34.260 to i16*), align 4
  %v0_f670 = call i32 @function_10c08()
  store i32 %v0_f670, i32* @r5, align 4
  %v0_f680 = load i32, i32* @r6, align 4
  %v2_f680 = mul i32 %v0_f680, 2
  store i32 %v2_f680, i32* @r6, align 4
  %v4_f684 = call i32 @function_f83c(i32 %v0_f670, i32 ptrtoint ([15 x i8]* @global_var_154f4.262 to i32), i32 14)
  store i32 10, i32* @r0, align 4
  %v0_f68c = load i32, i32* @r5, align 4
  store i32 %v0_f68c, i32* @global_var_1fc38.263, align 4
  %v0_f690 = load i32, i32* @r6, align 4
  %v1_f690 = trunc i32 %v0_f690 to i16
  store i16 %v1_f690, i16* bitcast (i32* @global_var_1fc3c.264 to i16*), align 4
  %v0_f694 = call i32 @function_10c08()
  store i32 %v0_f694, i32* @r5, align 4
  %v4_f6a4 = call i32 @function_f83c(i32 %v0_f694, i32 ptrtoint ([11 x i8]* @global_var_15504.266 to i32), i32 10)
  store i32 21, i32* @r0, align 4
  store i16 10, i16* bitcast (i32* @global_var_1fc44.267 to i16*), align 4
  %v0_f6b4 = load i32, i32* @r5, align 4
  store i32 %v0_f6b4, i32* @global_var_1fc40.268, align 4
  %v0_f6b8 = call i32 @function_10c08()
  store i32 %v0_f6b8, i32* @r5, align 4
  %v3_f6c8 = call i32 @function_f83c(i32 %v0_f6b8, i32 ptrtoint (i32* @global_var_15558.270 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_1fc4c.271 to i16*), align 4
  %v0_f6d8 = load i32, i32* @r5, align 4
  store i32 %v0_f6d8, i32* @global_var_1fc48.272, align 4
  %v0_f6dc = call i32 @function_10c08()
  store i32 %v0_f6dc, i32* @r5, align 4
  %v4_f6ec = call i32 @function_f83c(i32 %v0_f6dc, i32 ptrtoint ([18 x i8]* @global_var_15510.274 to i32), i32 17)
  %v0_f6f4 = load i32, i32* @r8, align 4
  store i32 %v0_f6f4, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_1fc54.275 to i16*), align 4
  %v0_f6fc = load i32, i32* @r5, align 4
  store i32 %v0_f6fc, i32* @global_var_1fc50.276, align 4
  %v0_f700 = call i32 @function_10c08()
  %v0_f708 = load i32, i32* @r8, align 4
  store i32 %v0_f700, i32* @r5, align 4
  %v4_f710 = call i32 @function_f83c(i32 %v0_f700, i32 ptrtoint ([13 x i8]* @global_var_15524.278 to i32), i32 %v0_f708)
  %v0_f714 = load i32, i32* @r6, align 4
  store i32 %v0_f714, i32* @r0, align 4
  %v0_f718 = load i32, i32* @r5, align 4
  store i32 %v0_f718, i32* @global_var_1fc58.279, align 4
  %v0_f71c = load i32, i32* @r8, align 4
  %v1_f71c = trunc i32 %v0_f71c to i16
  store i16 %v1_f71c, i16* bitcast (i32* @global_var_1fc5c.280 to i16*), align 4
  %v0_f720 = call i32 @function_10c08()
  %v0_f728 = load i32, i32* @r6, align 4
  store i32 %v0_f720, i32* @r5, align 4
  %v4_f730 = call i32 @function_f83c(i32 %v0_f720, i32 ptrtoint ([15 x i8]* @global_var_15534.282 to i32), i32 %v0_f728)
  store i32 19, i32* @r0, align 4
  %v0_f738 = load i32, i32* @r5, align 4
  store i32 %v0_f738, i32* @global_var_1fc60.283, align 4
  %v0_f73c = load i32, i32* @r6, align 4
  %v1_f73c = trunc i32 %v0_f73c to i16
  store i16 %v1_f73c, i16* bitcast (i32* @global_var_1fc64.284 to i16*), align 4
  %v0_f740 = call i32 @function_10c08()
  %v4_f750 = call i32 @function_f83c(i32 %v0_f740, i32 ptrtoint ([20 x i8]* @global_var_15544.286 to i32), i32 19)
  store i32 %v0_f740, i32* @global_var_1fc68.287, align 4
  store i16 19, i16* bitcast (i32* @global_var_1fc6c.288 to i16*), align 4
  %v2_f760 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_f760, i32* @r4, align 4
  store i32 %v6_f410, i32* @r5, align 4
  store i32 %v9_f410, i32* @r6, align 4
  store i32 %v12_f410, i32* @r7, align 4
  store i32 %v15_f410, i32* @r8, align 4
  ret i32 %v4_f750

; uselistorder directives
  uselistorder i32 %v0_f720, { 1, 0 }
  uselistorder i32 %v0_f700, { 1, 0 }
  uselistorder i32 %v0_f650, { 1, 0 }
  uselistorder i32 %v0_f5e8, { 1, 0 }
  uselistorder i32 %v0_f4f0, { 1, 0 }
  uselistorder i32 %v0_f4d0, { 1, 0 }
  uselistorder i32 %v0_f464, { 1, 0 }
  uselistorder i32 %v0_f418, { 1, 0 }
  uselistorder i32 21, { 0, 8, 1, 5, 2, 6, 3, 7, 9, 4 }
  uselistorder i32 (i32, i32, i32)* @function_f83c, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1fbf8.187 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_f7cc(i8* %arg1) local_unnamed_addr {
dec_label_pc_f7cc:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_f7d0 = load i8, i8* %arg1, align 1
  %v2_f7d4 = icmp eq i8 %v3_f7d0, 0
  %v0_f7d8 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f7d4, i32 %v0_f7d8)
  br label %dec_label_pc_f7e0

dec_label_pc_f7e0:                                ; preds = %dec_label_pc_f7e0, %dec_label_pc_f7cc
  %v0_f7e0 = phi i32 [ %v1_f7e0, %dec_label_pc_f7e0 ], [ 0, %dec_label_pc_f7cc ]
  %v1_f7e0 = add i32 %v0_f7e0, 1
  %v2_f7e4 = add i32 %v1_f7e0, %tmp
  %v3_f7e4 = inttoptr i32 %v2_f7e4 to i8*
  %v4_f7e4 = load i8, i8* %v3_f7e4, align 1
  %v2_f7e8 = icmp eq i8 %v4_f7e4, 0
  br i1 %v2_f7e8, label %dec_label_pc_f7f0, label %dec_label_pc_f7e0

dec_label_pc_f7f0:                                ; preds = %dec_label_pc_f7e0
  ret i32 %v1_f7e0
}

define i32 @function_f7f4(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f7f4:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_f7f4 = load i8, i8* %arg1, align 1
  %v3_f7f4 = zext i8 %v2_f7f4 to i32
  %v2_f7f8 = icmp eq i8 %v2_f7f4, 0
  br i1 %v2_f7f8, label %bb, label %dec_label_pc_f804

bb:                                               ; preds = %dec_label_pc_f7f4
  store i32 %v3_f7f4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f818

dec_label_pc_f804:                                ; preds = %dec_label_pc_f7f4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f808

dec_label_pc_f808:                                ; preds = %dec_label_pc_f808, %dec_label_pc_f804
  %v0_f808 = phi i32 [ %v1_f808, %dec_label_pc_f808 ], [ 0, %dec_label_pc_f804 ]
  %v1_f808 = add i32 %v0_f808, 1
  store i32 %v1_f808, i32* %ip.global-to-local, align 4
  %v2_f80c = add i32 %v1_f808, %tmp
  %v3_f80c = inttoptr i32 %v2_f80c to i8*
  %v4_f80c = load i8, i8* %v3_f80c, align 1
  %v6_f80c = zext i8 %v4_f80c to i32
  store i32 %v6_f80c, i32* %r3.global-to-local, align 4
  %v2_f810 = icmp eq i8 %v4_f80c, 0
  br i1 %v2_f810, label %dec_label_pc_f818, label %dec_label_pc_f808

dec_label_pc_f818:                                ; preds = %dec_label_pc_f808, %bb
  %v0_f818 = phi i32 [ %v3_f7f4, %bb ], [ %v1_f808, %dec_label_pc_f808 ]
  store i32 %v0_f818, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f824

dec_label_pc_f820:                                ; preds = %dec_label_pc_f824
  %v0_f820 = load i32, i32* %r1.global-to-local, align 4
  %v1_f820 = add i32 %v0_f820, 1
  %v2_f820 = inttoptr i32 %v1_f820 to i8*
  %v3_f820 = load i8, i8* %v2_f820, align 1
  store i32 %v1_f820, i32* %r1.global-to-local, align 4
  %v0_f824.pr = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f824

dec_label_pc_f824:                                ; preds = %dec_label_pc_f818, %dec_label_pc_f820
  %v0_f82c.off0 = phi i8 [ %v2_f7f4, %dec_label_pc_f818 ], [ %v3_f820, %dec_label_pc_f820 ]
  %v0_f824 = phi i32 [ %v0_f818, %dec_label_pc_f818 ], [ %v0_f824.pr, %dec_label_pc_f820 ]
  %v1_f824 = add i32 %v0_f824, -1
  store i32 %v1_f824, i32* %r3.global-to-local, align 4
  %v3_f828 = icmp eq i32 %v0_f824, 0
  %v2_f82c = load i32, i32* @r0, align 4
  %v3_f82c = inttoptr i32 %v2_f82c to i8*
  store i8 %v0_f82c.off0, i8* %v3_f82c, align 1
  %v4_f82c = load i32, i32* @r0, align 4
  %v5_f82c = add i32 %v4_f82c, 1
  store i32 %v5_f82c, i32* @r0, align 4
  br i1 %v3_f828, label %dec_label_pc_f834, label %dec_label_pc_f820

dec_label_pc_f834:                                ; preds = %dec_label_pc_f824
  %v0_f834 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_f834

; uselistorder directives
  uselistorder i32 %v0_f824, { 1, 0 }
  uselistorder i32 %v0_f818, { 1, 0 }
  uselistorder i32 %v1_f808, { 0, 1, 3, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_f824, { 1, 0 }
}

define i32 @function_f83c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f83c:
  %v2_f83c = icmp eq i32 %arg3, 0
  %v0_f840 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f83c, i32 %v0_f840)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_f848

dec_label_pc_f848:                                ; preds = %dec_label_pc_f848, %dec_label_pc_f83c
  %v0_f848 = phi i32 [ %v1_f850, %dec_label_pc_f848 ], [ 0, %dec_label_pc_f83c ]
  %v2_f848 = add i32 %v0_f848, %arg2
  %v3_f848 = inttoptr i32 %v2_f848 to i8*
  %v4_f848 = load i8, i8* %v3_f848, align 1
  %v6_f848 = zext i8 %v4_f848 to i32
  store i32 %v6_f848, i32* @r3, align 4
  %v4_f84c = add i32 %v0_f848, %arg1
  %v5_f84c = inttoptr i32 %v4_f84c to i8*
  store i8 %v4_f848, i8* %v5_f84c, align 1
  %v0_f850 = load i32, i32* @ip, align 4
  %v1_f850 = add i32 %v0_f850, 1
  store i32 %v1_f850, i32* @ip, align 4
  %v9_f854 = icmp eq i32 %v1_f850, %arg3
  br i1 %v9_f854, label %dec_label_pc_f85c, label %dec_label_pc_f848

dec_label_pc_f85c:                                ; preds = %dec_label_pc_f848
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_f850, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_f860() local_unnamed_addr {
dec_label_pc_f860:
  %r2.global-to-local = alloca i32, align 4
  %v0_f860 = load i32, i32* @r1, align 4
  %v2_f860 = icmp eq i32 %v0_f860, 0
  %v0_f864 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f860, i32 %v0_f864)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f86c

dec_label_pc_f86c:                                ; preds = %dec_label_pc_f86c, %dec_label_pc_f860
  %v2_f870 = phi i32 [ %v1_f874, %dec_label_pc_f86c ], [ 0, %dec_label_pc_f860 ]
  store i32 0, i32* @r3, align 4
  %v3_f870 = load i32, i32* @r0, align 4
  %v4_f870 = add i32 %v3_f870, %v2_f870
  %v5_f870 = inttoptr i32 %v4_f870 to i8*
  store i8 0, i8* %v5_f870, align 1
  %v0_f874 = load i32, i32* %r2.global-to-local, align 4
  %v1_f874 = add i32 %v0_f874, 1
  store i32 %v1_f874, i32* %r2.global-to-local, align 4
  %v1_f878 = load i32, i32* @r1, align 4
  %v9_f878 = icmp eq i32 %v1_f874, %v1_f878
  br i1 %v9_f878, label %dec_label_pc_f880, label %dec_label_pc_f86c

dec_label_pc_f880:                                ; preds = %dec_label_pc_f86c
  %v1_f880 = load i32, i32* @r0, align 4
  ret i32 %v1_f880

; uselistorder directives
  uselistorder i32 %v1_f874, { 1, 2, 0 }
}

define i32 @function_f884(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f884:
  store i32 %arg4, i32* @r3, align 4
  %v7_f898 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_f898, label %dec_label_pc_f8a0, label %dec_label_pc_f8a8

dec_label_pc_f8a0:                                ; preds = %dec_label_pc_f8bc, %dec_label_pc_f8a8, %dec_label_pc_f884, %dec_label_pc_f8e8
  %storemerge = phi i32 [ %v1_f8e8, %dec_label_pc_f8e8 ], [ -1, %dec_label_pc_f884 ], [ -1, %dec_label_pc_f8a8 ], [ -1, %dec_label_pc_f8bc ]
  ret i32 %storemerge

dec_label_pc_f8a8:                                ; preds = %dec_label_pc_f884
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_f8a0, label %dec_label_pc_f8b0

dec_label_pc_f8b0:                                ; preds = %dec_label_pc_f8a8
  br label %dec_label_pc_f8c8

dec_label_pc_f8bc:                                ; preds = %bb, %dec_label_pc_f8dc
  %v1_f8c83 = phi i32 [ %v1_f8dc, %dec_label_pc_f8dc ], [ 0, %bb ]
  %v1_f8bc = add i32 %v0_f8e8, 1
  %v9_f8c0 = icmp eq i32 %v1_f8bc, %arg2
  br i1 %v9_f8c0, label %dec_label_pc_f8a0, label %dec_label_pc_f8c8

dec_label_pc_f8c8:                                ; preds = %dec_label_pc_f8bc, %dec_label_pc_f8b0
  %v0_f8e8 = phi i32 [ %v1_f8bc, %dec_label_pc_f8bc ], [ 0, %dec_label_pc_f8b0 ]
  %v1_f8c8 = phi i32 [ %v1_f8c83, %dec_label_pc_f8bc ], [ 0, %dec_label_pc_f8b0 ]
  %v2_f8c8 = add i32 %v1_f8c8, %arg3
  %v3_f8c8 = inttoptr i32 %v2_f8c8 to i8*
  %v4_f8c8 = load i8, i8* %v3_f8c8, align 1
  %v2_f8cc = add i32 %v0_f8e8, %arg1
  %v3_f8cc = inttoptr i32 %v2_f8cc to i8*
  %v4_f8cc = load i8, i8* %v3_f8cc, align 1
  %v6_f8cc = zext i8 %v4_f8cc to i32
  store i32 %v6_f8cc, i32* @r3, align 4
  %v9_f8d0 = icmp eq i8 %v4_f8cc, %v4_f8c8
  br i1 %v9_f8d0, label %dec_label_pc_f8dc, label %bb

bb:                                               ; preds = %dec_label_pc_f8c8
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_f8bc

dec_label_pc_f8dc:                                ; preds = %dec_label_pc_f8c8
  %v1_f8dc = add i32 %v1_f8c8, 1
  store i32 %v1_f8dc, i32* @ip, align 4
  %v9_f8e0 = icmp eq i32 %v1_f8dc, %arg4
  br i1 %v9_f8e0, label %dec_label_pc_f8e8, label %dec_label_pc_f8bc

dec_label_pc_f8e8:                                ; preds = %dec_label_pc_f8dc
  %v1_f8e8 = add i32 %v0_f8e8, 1
  br label %dec_label_pc_f8a0

; uselistorder directives
  uselistorder i32 %v1_f8dc, { 1, 2, 0 }
  uselistorder i32 %v1_f8c8, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f8bc, { 1, 0 }
  uselistorder label %dec_label_pc_f8a0, { 3, 0, 1, 2 }
}

define i32 @function_f8f0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f8f0:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_f8f0 = load i32, i32* @r4, align 4
  %v12_f8f0 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f900

dec_label_pc_f900:                                ; preds = %.thread, %dec_label_pc_f914, %bb, %dec_label_pc_f8f0
  %v0_f900 = phi i32 [ %tmp, %dec_label_pc_f8f0 ], [ %v5_f900, %bb ], [ %v5_f900, %dec_label_pc_f914 ], [ %v5_f900, %.thread ]
  %v1_f900 = inttoptr i32 %v0_f900 to i8*
  %v2_f900 = load i8, i8* %v1_f900, align 1
  %v5_f900 = add i32 %v0_f900, 1
  store i32 %v5_f900, i32* %r5.global-to-local, align 4
  %v7_f904 = icmp eq i8 %v2_f900, 9
  br i1 %v7_f904, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_f900
  br label %dec_label_pc_f900

bb:                                               ; preds = %dec_label_pc_f900
  %v3_f900 = zext i8 %v2_f900 to i32
  %v8_f908 = icmp eq i8 %v2_f900, 32
  store i32 %v3_f900, i32* @r4, align 4
  br i1 %v8_f908, label %dec_label_pc_f900, label %dec_label_pc_f914

dec_label_pc_f914:                                ; preds = %bb
  %v7_f914 = icmp eq i8 %v2_f900, 10
  br i1 %v7_f914, label %dec_label_pc_f900, label %dec_label_pc_f91c

dec_label_pc_f91c:                                ; preds = %dec_label_pc_f914
  %v7_f91c = icmp eq i8 %v2_f900, 45
  br i1 %v7_f91c, label %dec_label_pc_fa0c, label %dec_label_pc_f924

dec_label_pc_f924:                                ; preds = %dec_label_pc_f91c
  %v7_f924 = icmp eq i8 %v2_f900, 43
  br i1 %v7_f924, label %bb44, label %dec_label_pc_f934

bb44:                                             ; preds = %dec_label_pc_f924
  %v2_f928 = inttoptr i32 %v5_f900 to i8*
  %v3_f928 = load i8, i8* %v2_f928, align 1
  %v4_f928 = zext i8 %v3_f928 to i32
  store i32 %v4_f928, i32* @r4, align 4
  %v6_f928 = add i32 %v0_f900, 2
  store i32 %v6_f928, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f934

dec_label_pc_f934:                                ; preds = %bb44, %dec_label_pc_f924, %dec_label_pc_fa0c
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_fa0c ], [ 2147483647, %dec_label_pc_f924 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_fa0c ], [ 0, %dec_label_pc_f924 ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_f93c = call i32 @function_fda4(i32 %storemerge1, i32 %arg2)
  %v0_f940 = load i32, i32* @r7, align 4
  store i32 %v0_f940, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_f948 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f948, i32* @r1, align 4
  %v0_f94c = call i32 @function_fca8()
  store i32 0, i32* @ip, align 4
  %v0_f95c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f95c.outer

dec_label_pc_f95c.outer:                          ; preds = %.thread5, %dec_label_pc_f934
  %v2_f9d8.ph = phi i32 [ %v5_f9d8, %.thread5 ], [ 0, %dec_label_pc_f934 ]
  %v1_f99c.ph = phi i32 [ %v4_f9dc, %.thread5 ], [ %v0_f95c.pre, %dec_label_pc_f934 ]
  %v1_f9b4.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_f934 ]
  %v3_f9a8 = icmp uge i32 %v2_f9d8.ph, %v0_f94c
  %v9_f9a8 = icmp eq i32 %v2_f9d8.ph, %v0_f94c
  %v2_f9ac = xor i1 %v3_f9a8, true
  %v3_f9ac = or i1 %v9_f9a8, %v2_f9ac
  %v2_f9b0 = xor i1 %v9_f9a8, true
  %v3_f9b0 = and i1 %v3_f9a8, %v2_f9b0
  %v2_f9d0 = icmp eq i1 %v9_f9a8, false
  br label %dec_label_pc_f95c

dec_label_pc_f95c:                                ; preds = %dec_label_pc_f95c.outer, %dec_label_pc_f9e4
  %v1_f9b4 = phi i32 [ -1, %dec_label_pc_f9e4 ], [ %v1_f9b4.ph, %dec_label_pc_f95c.outer ]
  %v1_f99c = phi i32 [ %v3_f9e4, %dec_label_pc_f9e4 ], [ %v1_f99c.ph, %dec_label_pc_f95c.outer ]
  %v1_f95c = urem i32 %v1_f99c, 256
  %v1_f960 = add nsw i32 %v1_f95c, -48
  %v1_f968 = add nsw i32 %v1_f95c, -97
  %v1_f96c = add i32 %v1_f99c, -48
  %v1_f970 = add nsw i32 %v1_f95c, -65
  %tmp75 = icmp ult i32 %v1_f960, 10
  br i1 %tmp75, label %dec_label_pc_f9a0, label %dec_label_pc_f978

dec_label_pc_f978:                                ; preds = %dec_label_pc_f95c
  %v2_f978 = icmp ugt i32 %v1_f970, 24
  %v7_f978 = icmp eq i32 %v1_f970, 25
  %v2_f97c = xor i1 %v7_f978, true
  %v3_f97c = and i1 %v2_f978, %v2_f97c
  br i1 %v3_f97c, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_f978
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_f978, %bb45
  %v0_f99014 = phi i32 [ %v1_f96c, %dec_label_pc_f978 ], [ 0, %bb45 ]
  %v2_f980 = xor i1 %v2_f978, true
  %v3_f980 = or i1 %v7_f978, %v2_f980
  br i1 %v3_f980, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_f990 = phi i32 [ %v0_f99014, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_f97c, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_f988 = icmp ugt i32 %v1_f968, 24
  %v11_f988 = icmp eq i32 %v1_f968, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_f98c = phi i1 [ %v7_f978, %bb48 ], [ %v11_f988, %bb49 ]
  %v0_f98c = phi i1 [ %v2_f978, %bb48 ], [ %v6_f988, %bb49 ]
  %v2_f98c = xor i1 %v1_f98c, true
  %v3_f98c = and i1 %v0_f98c, %v2_f98c
  br i1 %v3_f98c, label %dec_label_pc_f9f0, label %dec_label_pc_f990

dec_label_pc_f990:                                ; preds = %bb50
  %v2_f990 = icmp eq i32 %v0_f990, 0
  %. = select i1 %v2_f990, i32 87, i32 55
  %v2_f99c = sub i32 %v1_f99c, %.
  br label %dec_label_pc_f9a0

dec_label_pc_f9a0:                                ; preds = %dec_label_pc_f95c, %dec_label_pc_f990
  %v0_f9b429 = phi i32 [ %v1_f970, %dec_label_pc_f95c ], [ %., %dec_label_pc_f990 ]
  %v3_f9d8 = phi i32 [ %v1_f96c, %dec_label_pc_f95c ], [ %v2_f99c, %dec_label_pc_f990 ]
  %v1_f9a0 = load i32, i32* %r6.global-to-local, align 4
  %v2_f9a0 = sub i32 %v3_f9d8, %v1_f9a0
  %v4_f9a0 = xor i32 %v1_f9a0, %v3_f9d8
  %v5_f9a0 = xor i32 %v2_f9a0, %v3_f9d8
  %v6_f9a0 = and i32 %v5_f9a0, %v4_f9a0
  %v7_f9a0 = icmp slt i32 %v6_f9a0, 0
  %v8_f9a0 = icmp slt i32 %v2_f9a0, 0
  %v2_f9a4 = xor i1 %v8_f9a0, %v7_f9a0
  br i1 %v2_f9a4, label %dec_label_pc_f9a8, label %dec_label_pc_f9f0

dec_label_pc_f9a8:                                ; preds = %dec_label_pc_f9a0
  br i1 %v3_f9ac, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_f9a8
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_f9a8, %bb53
  %v0_f9b428 = phi i32 [ %v0_f9b429, %dec_label_pc_f9a8 ], [ 0, %bb53 ]
  br i1 %v3_f9b0, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_f9b4 = phi i32 [ %v0_f9b428, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_f9b4, 0
  %v4_f9b4 = zext i1 %tmp76 to i32
  %v5_f9b4 = or i32 %v0_f9b4, %v4_f9b4
  %v7_f9b4 = icmp eq i32 %v5_f9b4, 0
  br i1 %v7_f9b4, label %dec_label_pc_f9bc, label %dec_label_pc_f9e4

dec_label_pc_f9bc:                                ; preds = %bb56
  %v1_f9c8 = load i32, i32* %r8.global-to-local, align 4
  %v2_f9c8 = sub i32 %v3_f9d8, %v1_f9c8
  %v4_f9c8 = xor i32 %v1_f9c8, %v3_f9d8
  %v5_f9c8 = xor i32 %v2_f9c8, %v3_f9d8
  %v6_f9c8 = and i32 %v5_f9c8, %v4_f9c8
  %v7_f9c8 = icmp slt i32 %v6_f9c8, 0
  %v8_f9c8 = icmp slt i32 %v2_f9c8, 0
  %v9_f9c8 = icmp eq i32 %v3_f9d8, %v1_f9c8
  %v3_f9cc = xor i1 %v8_f9c8, %v7_f9c8
  %v4_f9cc = or i1 %v9_f9c8, %v3_f9cc
  br i1 %v4_f9cc, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_f9bc
  store i32 1, i32* @ip, align 4
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_f9bc
  store i32 1, i32* @ip, align 4
  br i1 %v2_f9d0, label %.thread5, label %dec_label_pc_f9e4

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_f9d8 = mul i32 %v1_f9a0, %v2_f9d8.ph
  %v5_f9d8 = add i32 %v4_f9d8, %v3_f9d8
  %v1_f9dc = load i32, i32* %r5.global-to-local, align 4
  %v2_f9dc = inttoptr i32 %v1_f9dc to i8*
  %v3_f9dc = load i8, i8* %v2_f9dc, align 1
  %v4_f9dc = zext i8 %v3_f9dc to i32
  %v6_f9dc = add i32 %v1_f9dc, 1
  store i32 %v6_f9dc, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f95c.outer

dec_label_pc_f9e4:                                ; preds = %thread-pre-split, %bb56
  %v0_f9e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_f9e4 = inttoptr i32 %v0_f9e4 to i8*
  %v2_f9e4 = load i8, i8* %v1_f9e4, align 1
  %v3_f9e4 = zext i8 %v2_f9e4 to i32
  %v5_f9e4 = add i32 %v0_f9e4, 1
  store i32 %v5_f9e4, i32* %r5.global-to-local, align 4
  store i32 -1, i32* @ip, align 4
  br label %dec_label_pc_f95c

dec_label_pc_f9f0:                                ; preds = %dec_label_pc_f9a0, %bb50
  %v1_f9f0 = icmp slt i32 %v1_f9b4, 0
  %v0_fa1c = load i32, i32* %sl.global-to-local, align 4
  %v2_fa1c = icmp eq i32 %v0_fa1c, 0
  br i1 %v1_f9f0, label %dec_label_pc_fa1c, label %dec_label_pc_f9f8

dec_label_pc_f9f8:                                ; preds = %dec_label_pc_f9f0
  br i1 %v2_fa1c, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_f9f8
  %v2_f9fc = sub i32 0, %v2_f9d8.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_f9f8, %bb59
  %v1_fa08 = phi i32 [ -2147483648, %bb61 ], [ %v2_f9d8.ph, %dec_label_pc_f9f8 ], [ %v2_f9fc, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_f8f0, i32* @r4, align 4
  store i32 %v12_f8f0, i32* @r7, align 4
  ret i32 %v1_fa08

dec_label_pc_fa0c:                                ; preds = %dec_label_pc_f91c
  %v1_fa0c = inttoptr i32 %v5_f900 to i8*
  %v2_fa0c = load i8, i8* %v1_fa0c, align 1
  %v3_fa0c = zext i8 %v2_fa0c to i32
  store i32 %v3_fa0c, i32* @r4, align 4
  %v5_fa0c = add i32 %v0_f900, 2
  store i32 %v5_fa0c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f934

dec_label_pc_fa1c:                                ; preds = %dec_label_pc_f9f0
  br i1 %v2_fa1c, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_fa1c
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_fa1c
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_fa1c, { 1, 0 }
  uselistorder i32 %v2_f9c8, { 1, 0 }
  uselistorder i32 %v1_f9c8, { 1, 0, 2 }
  uselistorder i32 %v2_f9a0, { 1, 0 }
  uselistorder i32 %v3_f9d8, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_f978, { 1, 2, 0 }
  uselistorder i1 %v2_f978, { 1, 0, 2 }
  uselistorder i32 %v1_f95c, { 1, 2, 0 }
  uselistorder i32 %v1_f99c, { 1, 2, 0 }
  uselistorder i32 %v1_f9b4, { 1, 0 }
  uselistorder i1 %v9_f9a8, { 1, 0, 2 }
  uselistorder i1 %v3_f9a8, { 1, 0 }
  uselistorder i32 %v2_f9d8.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_f94c, { 1, 0 }
  uselistorder i32 %v5_f900, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_f900, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f900, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 25, { 4, 5, 0, 3, 2, 1 }
  uselistorder i8 32, { 2, 3, 4, 0, 5, 6, 7, 1 }
  uselistorder i8 9, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_f9a0, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_f95c, { 1, 0 }
  uselistorder label %dec_label_pc_f934, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f900, { 1, 2, 0, 3 }
}

define i32 @function_fa2c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fa2c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_fa2c = load i32, i32* @r4, align 4
  store i32 %v3_fa2c, i32* %stack_var_-24, align 4
  %v12_fa2c = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_fa44

dec_label_pc_fa44:                                ; preds = %dec_label_pc_fa68.dec_label_pc_fa44_crit_edge, %dec_label_pc_fa2c
  %v0_fa48 = phi i32 [ %v0_fa48.pre, %dec_label_pc_fa68.dec_label_pc_fa44_crit_edge ], [ %arg3, %dec_label_pc_fa2c ]
  %v1_fa50 = call i32 @function_ff70(i32 %v0_fa48)
  %v7_fa54 = icmp eq i32 %v1_fa50, 1
  %v0_fa5c = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_fa54, label %dec_label_pc_fa5c, label %dec_label_pc_fa74

dec_label_pc_fa5c:                                ; preds = %dec_label_pc_fa44
  %v1_fa5c = add i32 %v0_fa5c, 1
  store i32 %v1_fa5c, i32* %r5.global-to-local, align 4
  %v1_fa60 = load i32, i32* %r8.global-to-local, align 4
  %v6_fa64 = icmp slt i32 %v1_fa5c, %v1_fa60
  br i1 %v6_fa64, label %dec_label_pc_fa68, label %.loopexit

dec_label_pc_fa68:                                ; preds = %dec_label_pc_fa5c
  %v0_fa68 = load i32, i32* %r4.global-to-local, align 4
  %v1_fa68 = inttoptr i32 %v0_fa68 to i8*
  %v2_fa68 = load i8, i8* %v1_fa68, align 1
  %v5_fa68 = add i32 %v0_fa68, 1
  store i32 %v5_fa68, i32* %r4.global-to-local, align 4
  %v7_fa6c = icmp eq i8 %v2_fa68, 10
  br i1 %v7_fa6c, label %dec_label_pc_fa74, label %dec_label_pc_fa68.dec_label_pc_fa44_crit_edge

dec_label_pc_fa68.dec_label_pc_fa44_crit_edge:    ; preds = %dec_label_pc_fa68
  %v0_fa48.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_fa44

dec_label_pc_fa74:                                ; preds = %dec_label_pc_fa44, %dec_label_pc_fa68
  %v0_fa74 = phi i32 [ %v1_fa5c, %dec_label_pc_fa68 ], [ %v0_fa5c, %dec_label_pc_fa44 ]
  %v2_fa74 = icmp eq i32 %v0_fa74, 0
  br i1 %v2_fa74, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_fa74
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_fa5c, %dec_label_pc_fa74, %bb
  %v0_fa7c = load i32, i32* @r7, align 4
  %v2_fa80 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_fa80, i32* @r4, align 4
  store i32 %v12_fa2c, i32* @r7, align 4
  ret i32 %v0_fa7c

; uselistorder directives
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fa74, { 1, 0 }
}

define i32 @function_fa88() local_unnamed_addr {
dec_label_pc_fa88:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_fa98 = call i32 @function_10600()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_faa0 = inttoptr i32 %v0_fa98 to i32*
  store i32 0, i32* %v2_faa0, align 4
  %v0_faac = load i32, i32* %r4.global-to-local, align 4
  %v3_fab0 = call i32 @function_109c0(i32 2, i32 2, i32 %v0_faac)
  %v7_fab4 = icmp eq i32 %v3_fab0, -1
  store i32 %v3_fab0, i32* %r5.global-to-local, align 4
  br i1 %v7_fab4, label %bb, label %dec_label_pc_fac4

bb:                                               ; preds = %dec_label_pc_fa88
  %v1_fabc = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fb10

dec_label_pc_fac4:                                ; preds = %dec_label_pc_fa88
  %v2_fad0 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_fad0, i32* %r4.global-to-local, align 4
  %v0_fadc = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_faf0 = call i32 @function_107a8(i32 %v3_fab0, i32 %v2_fad0, i32 %v0_fadc)
  %v2_faf8 = ptrtoint i32* %stack_var_-20 to i32
  %v0_fafc = load i32, i32* %r5.global-to-local, align 4
  %v3_fb00 = call i32 @function_107e0(i32 %v0_fafc, i32 %v2_fad0, i32 %v2_faf8)
  %v1_fb08 = call i32 @function_101d8(i32 %v0_fafc)
  br label %dec_label_pc_fb10

dec_label_pc_fb10:                                ; preds = %bb, %dec_label_pc_fac4
  %storemerge = phi i32 [ 134744072, %dec_label_pc_fac4 ], [ %v1_fabc, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_fab0, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 134744072, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_107a8, { 6, 8, 5, 7, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_109c0, { 16, 18, 14, 15, 17, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fb10, { 1, 0 }
}

define i32 @function_fb1c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fb1c:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_fb20 = load i8, i8* %tmp, align 1
  %v2_fb24 = icmp eq i8 %v3_fb20, 0
  br i1 %v2_fb24, label %bb, label %dec_label_pc_fb38

bb:                                               ; preds = %dec_label_pc_fb1c
  %v4_fb20 = zext i8 %v3_fb20 to i32
  br label %dec_label_pc_fb4c

dec_label_pc_fb38:                                ; preds = %dec_label_pc_fb1c
  br label %dec_label_pc_fb3c

dec_label_pc_fb3c:                                ; preds = %dec_label_pc_fb3c, %dec_label_pc_fb38
  %v0_fb3c = phi i32 [ %v1_fb3c, %dec_label_pc_fb3c ], [ 0, %dec_label_pc_fb38 ]
  %v1_fb3c = add i32 %v0_fb3c, 1
  %v2_fb40 = add i32 %v1_fb3c, %arg2
  %v3_fb40 = inttoptr i32 %v2_fb40 to i8*
  %v4_fb40 = load i8, i8* %v3_fb40, align 1
  %v2_fb44 = icmp eq i8 %v4_fb40, 0
  br i1 %v2_fb44, label %dec_label_pc_fb4c, label %dec_label_pc_fb3c

dec_label_pc_fb4c:                                ; preds = %dec_label_pc_fb3c, %bb
  %v0_fb9021 = phi i32 [ %v4_fb20, %bb ], [ %v1_fb3c, %dec_label_pc_fb3c ]
  %v0_fb542 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_fb542, 1
  br i1 %tmp29, label %dec_label_pc_fba4, label %dec_label_pc_fb60

dec_label_pc_fb60:                                ; preds = %dec_label_pc_fb4c, %dec_label_pc_fb54.backedge
  %v0_fb58.in = phi i32 [ %v0_fb58, %dec_label_pc_fb54.backedge ], [ %v0_fb542, %dec_label_pc_fb4c ]
  %v1_fb6c = phi i32 [ %v1_fb6c15, %dec_label_pc_fb54.backedge ], [ 0, %dec_label_pc_fb4c ]
  %v0_fb60 = phi i32 [ %v5_fb60, %dec_label_pc_fb54.backedge ], [ %tmp23, %dec_label_pc_fb4c ]
  %v0_fb58 = add i32 %v0_fb58.in, -1
  %v1_fb60 = inttoptr i32 %v0_fb60 to i8*
  %v2_fb60 = load i8, i8* %v1_fb60, align 1
  %v3_fb60 = zext i8 %v2_fb60 to i32
  %v5_fb60 = add i32 %v0_fb60, 1
  %v1_fb64 = add nsw i32 %v3_fb60, -65
  %v2_fb6c = add i32 %v1_fb6c, %arg2
  %v3_fb6c = inttoptr i32 %v2_fb6c to i8*
  %v4_fb6c = load i8, i8* %v3_fb6c, align 1
  %v6_fb6c = zext i8 %v4_fb6c to i32
  %v1_fb70 = add nsw i32 %v6_fb6c, -65
  %tmp38 = icmp ult i32 %v1_fb64, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_fb60
  %v5_fb74 = or i32 %v3_fb60, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_fb60, %bb30
  %v0_fb80 = phi i32 [ %v3_fb60, %dec_label_pc_fb60 ], [ %v5_fb74, %bb30 ]
  %tmp39 = icmp ult i32 %v1_fb70, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_fb7c = or i32 %v6_fb6c, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_fb80 = phi i32 [ %v6_fb6c, %bb31 ], [ %v5_fb7c, %bb32 ]
  %v9_fb80 = icmp eq i32 %v0_fb80, %v1_fb80
  br i1 %v9_fb80, label %dec_label_pc_fb8c, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_fb54.backedge

dec_label_pc_fb54.backedge:                       ; preds = %bb34, %dec_label_pc_fb8c
  %v1_fb6c15 = phi i32 [ 0, %bb34 ], [ %v1_fb8c, %dec_label_pc_fb8c ]
  %tmp35 = icmp slt i32 %v0_fb58, 1
  br i1 %tmp35, label %dec_label_pc_fba4, label %dec_label_pc_fb60

dec_label_pc_fb8c:                                ; preds = %bb33
  %v1_fb8c = add i32 %v1_fb6c, 1
  %v9_fb90 = icmp eq i32 %v0_fb9021, %v1_fb8c
  br i1 %v9_fb90, label %dec_label_pc_fb98, label %dec_label_pc_fb54.backedge

dec_label_pc_fb98:                                ; preds = %dec_label_pc_fb8c
  %v2_fb98 = sub i32 %v5_fb60, %tmp23
  br label %dec_label_pc_fba4

dec_label_pc_fba4:                                ; preds = %dec_label_pc_fb54.backedge, %dec_label_pc_fb4c, %dec_label_pc_fb98
  %storemerge = phi i32 [ %v2_fb98, %dec_label_pc_fb98 ], [ -1, %dec_label_pc_fb4c ], [ -1, %dec_label_pc_fb54.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_fb8c, { 1, 0 }
  uselistorder i32 %v0_fb60, { 1, 0 }
  uselistorder i32 %v1_fb6c, { 1, 0 }
  uselistorder i8 %v3_fb20, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder label %dec_label_pc_fba4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fb54.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_fb60, { 1, 0 }
}

define i32 @function_fbac(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fbac:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_fbac = load i32, i32* @r4, align 4
  %v12_fbac = load i32, i32* @r7, align 4
  %v0_fbb0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_fbb0, i32* %r8.global-to-local, align 4
  %v2_fbb0 = icmp eq i32 %v0_fbb0, 0
  store i1 %v2_fbb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_fbb0, label %dec_label_pc_fc90, label %dec_label_pc_fbc0

dec_label_pc_fbc0:                                ; preds = %dec_label_pc_fbac
  %v3_fbc0 = icmp eq i8 %arg1, 0
  store i1 %v3_fbc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fbc0, label %.thread, label %dec_label_pc_fbd4

.thread:                                          ; preds = %dec_label_pc_fbc0
  %v4_fbc8 = inttoptr i32 %v0_fbb0 to i8*
  store i8 48, i8* %v4_fbc8, align 1
  %v0_fbcc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fbcc.pr.pr, label %.thread1, label %dec_label_pc_fbd4

.thread1:                                         ; preds = %.thread
  %v4_fbcc = load i32, i32* %r8.global-to-local, align 4
  %v5_fbcc = add i32 %v4_fbcc, 1
  %v6_fbcc = inttoptr i32 %v5_fbcc to i8*
  store i8 0, i8* %v6_fbcc, align 1
  %v0_fbd0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fbd0.pr.pr, label %dec_label_pc_fc90, label %dec_label_pc_fbd4

dec_label_pc_fbd4:                                ; preds = %dec_label_pc_fbc0, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_fbd8 = icmp eq i32 %arg2, 10
  store i1 %v7_fbd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbd8, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_fbd4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_fbd4
  %v4_fbd4 = zext i1 %tmp47 to i32
  store i32 %v4_fbd4, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_fbf88 = sub nsw i32 0, %tmp
  %tmp.v3_fbf88 = select i1 %phitmp, i32 %tmp, i32 %v3_fbf88
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_fbf88, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_fc04 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_fc04, i32* @r7, align 4
  br label %dec_label_pc_fc08

dec_label_pc_fc08:                                ; preds = %bb45, %.thread6
  %v0_fc08 = phi i32 [ %v0_fc2c, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_fc08, i32* %r0.global-to-local, align 4
  %v0_fc0c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fc0c, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_fc08, 16777216
  %v1_fc10 = sdiv i32 %sext, 16777216
  %v3_fc10 = call i32 @function_fda4(i32 %v1_fc10, i32 %v0_fc0c)
  %v7_fc14 = icmp eq i32 %v0_fc0c, 9
  store i1 %v7_fc14, i1* %cpsr_z.global-to-local, align 1
  %v1_fc18 = add i32 %v0_fc0c, 48
  %v0_fc1c = load i32, i32* @r4, align 4
  store i32 %v0_fc1c, i32* @r0, align 4
  %v7_fc20 = icmp sgt i32 %v0_fc0c, 9
  %extract.t = trunc i32 %v1_fc18 to i8
  br i1 %v7_fc20, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_fc08
  %v9_fc20 = add i32 %v0_fc0c, 55
  %extract.t27 = trunc i32 %v9_fc20 to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_fc08, %bb44
  %v0_fc28.off0 = phi i8 [ %extract.t, %dec_label_pc_fc08 ], [ %extract.t27, %bb44 ]
  %v0_fc24 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fc24, i32* @r1, align 4
  %v2_fc28 = load i32, i32* %r5.global-to-local, align 4
  %v3_fc28 = load i32, i32* @r7, align 4
  %v4_fc28 = add i32 %v3_fc28, %v2_fc28
  %v5_fc28 = inttoptr i32 %v4_fc28 to i8*
  store i8 %v0_fc28.off0, i8* %v5_fc28, align 1
  %v0_fc2c = call i32 @function_fca8()
  store i32 %v0_fc2c, i32* %r0.global-to-local, align 4
  store i32 %v0_fc2c, i32* @r4, align 4
  %v2_fc30 = icmp eq i32 %v0_fc2c, 0
  store i1 %v2_fc30, i1* %cpsr_z.global-to-local, align 1
  %v0_fc34 = load i32, i32* %r5.global-to-local, align 4
  %v1_fc34 = add i32 %v0_fc34, -1
  store i32 %v1_fc34, i32* %r5.global-to-local, align 4
  br i1 %v2_fc30, label %dec_label_pc_fc3c, label %dec_label_pc_fc08

dec_label_pc_fc3c:                                ; preds = %bb45
  %v0_fc3c = load i32, i32* %sl.global-to-local, align 4
  %v2_fc3c = icmp eq i32 %v0_fc3c, 0
  store i1 %v2_fc3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fc3c, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_fc3c
  %v3_fc40 = ptrtoint i32* %stack_var_-32 to i32
  %v3_fc44 = add i32 %v1_fc34, %v3_fc40
  store i32 %v3_fc44, i32* %r2.global-to-local, align 4
  %v4_fc4c = add i32 %v3_fc44, -34
  %v5_fc4c = inttoptr i32 %v4_fc4c to i8*
  store i8 45, i8* %v5_fc4c, align 1
  %v0_fc50.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_fc50.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_fc50.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_fc3c
  %v1_fc50 = phi i32 [ %v1_fc34, %dec_label_pc_fc3c ], [ %v1_fc50.pre, %.thread11 ]
  %v2_fc50 = add i32 %v1_fc50, 1
  store i32 %v2_fc50, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_fc5c = phi i32 [ %v2_fc50, %.thread12 ], [ %v1_fc50.pre, %.thread11 ]
  %v0_fc54 = load i32, i32* @r7, align 4
  %v2_fc54 = add i32 %v0_fc54, %v1_fc5c
  %v3_fc54 = inttoptr i32 %v2_fc54 to i8*
  %v4_fc54 = load i8, i8* %v3_fc54, align 1
  %v6_fc54 = zext i8 %v4_fc54 to i32
  %v2_fc58 = icmp eq i8 %v4_fc54, 0
  store i1 %v2_fc58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_fc54, i32* %r2.global-to-local, align 4
  br i1 %v2_fc58, label %dec_label_pc_fca0, label %dec_label_pc_fc68.preheader

dec_label_pc_fc68.preheader:                      ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc68

dec_label_pc_fc68:                                ; preds = %dec_label_pc_fc68.preheader, %dec_label_pc_fc68
  %v0_fc68 = phi i32 [ 0, %dec_label_pc_fc68.preheader ], [ %v1_fc68, %dec_label_pc_fc68 ]
  %v1_fc68 = add i32 %v0_fc68, 1
  store i32 %v1_fc68, i32* %r1.global-to-local, align 4
  %v2_fc6c = add i32 %v1_fc68, %v2_fc54
  %v3_fc6c = inttoptr i32 %v2_fc6c to i8*
  %v4_fc6c = load i8, i8* %v3_fc6c, align 1
  %v2_fc70 = icmp eq i8 %v4_fc6c, 0
  store i1 %v2_fc70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fc70, label %dec_label_pc_fc78, label %dec_label_pc_fc68

dec_label_pc_fc78:                                ; preds = %dec_label_pc_fc68, %dec_label_pc_fca0
  %v0_fc7c24 = phi i32 [ %v6_fc54, %dec_label_pc_fca0 ], [ %v1_fc68, %dec_label_pc_fc68 ]
  %v0_fc78 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_fc78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc7c

dec_label_pc_fc7c:                                ; preds = %dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge, %dec_label_pc_fc78
  %v2_fc88 = phi i32 [ %v5_fc88, %dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge ], [ %v0_fc78, %dec_label_pc_fc78 ]
  %v0_fc80 = phi i32 [ %v0_fc80.pre, %dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge ], [ %v2_fc54, %dec_label_pc_fc78 ]
  %v0_fc7c = phi i32 [ %v0_fc7c.pre, %dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge ], [ %v0_fc7c24, %dec_label_pc_fc78 ]
  %v1_fc7c = add i32 %v0_fc7c, -1
  store i32 %v1_fc7c, i32* %r1.global-to-local, align 4
  %v1_fc80 = inttoptr i32 %v0_fc80 to i8*
  %v2_fc80 = load i8, i8* %v1_fc80, align 1
  %v5_fc80 = add i32 %v0_fc80, 1
  store i32 %v5_fc80, i32* %r2.global-to-local, align 4
  %v3_fc84 = icmp eq i32 %v0_fc7c, 0
  store i1 %v3_fc84, i1* %cpsr_z.global-to-local, align 1
  %v3_fc88 = inttoptr i32 %v2_fc88 to i8*
  store i8 %v2_fc80, i8* %v3_fc88, align 1
  %v4_fc88 = load i32, i32* %r0.global-to-local, align 4
  %v5_fc88 = add i32 %v4_fc88, 1
  store i32 %v5_fc88, i32* %r0.global-to-local, align 4
  br i1 %v3_fc84, label %dec_label_pc_fc90, label %dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge

dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge:    ; preds = %dec_label_pc_fc7c
  %v0_fc7c.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_fc80.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fc7c

dec_label_pc_fc90:                                ; preds = %dec_label_pc_fc7c, %.thread1, %dec_label_pc_fbac
  %v0_fc90 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_fc90, i32* %r0.global-to-local, align 4
  store i32 %v3_fbac, i32* @r4, align 4
  store i32 %v12_fbac, i32* @r7, align 4
  ret i32 %v0_fc90

dec_label_pc_fca0:                                ; preds = %.thread11._crit_edge
  store i32 %v6_fc54, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc78

; uselistorder directives
  uselistorder i32 %v5_fc88, { 1, 0 }
  uselistorder i1 %v3_fc84, { 1, 0 }
  uselistorder i32 %v0_fc80, { 1, 0 }
  uselistorder i32 %v1_fc68, { 0, 1, 3, 2 }
  uselistorder i32 %v6_fc54, { 1, 0 }
  uselistorder i32 %v2_fc54, { 1, 0, 2, 3 }
  uselistorder i32 %v1_fc50.pre, { 1, 0 }
  uselistorder i32 %v1_fc34, { 1, 0, 2 }
  uselistorder i32 %v0_fc2c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_fc0c, { 2, 0, 1, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_fbb0, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 9, 10, 11, 12 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_fda4, { 4, 0, 6, 5, 1, 3, 2 }
  uselistorder label %dec_label_pc_fc78, { 1, 0 }
  uselistorder label %dec_label_pc_fc68, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_fbd4, { 2, 1, 0 }
}

define i32 @function_fca8() local_unnamed_addr {
dec_label_pc_fca8:
  %r2.global-to-local = alloca i32, align 4
  %v0_fca8 = load i32, i32* @r1, align 4
  %v1_fca8 = add i32 %v0_fca8, -1
  store i32 %v1_fca8, i32* %r2.global-to-local, align 4
  %v2_fca8 = icmp eq i32 %v0_fca8, 0
  %v7_fca8 = icmp eq i32 %v0_fca8, 1
  %v0_fcac = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_fca8, i32 %v0_fcac)
  br i1 %v2_fca8, label %dec_label_pc_fd90, label %dec_label_pc_fcb4

dec_label_pc_fcb4:                                ; preds = %dec_label_pc_fca8
  %v0_fcb4 = load i32, i32* @r0, align 4
  %v1_fcb4 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_fcb4, %v1_fcb4
  br i1 %tmp, label %dec_label_pc_fcbc, label %dec_label_pc_fd48

dec_label_pc_fcbc:                                ; preds = %dec_label_pc_fcb4
  %v1_fcbc = load i32, i32* %r2.global-to-local, align 4
  %v2_fcbc = and i32 %v1_fcbc, %v1_fcb4
  %v4_fcbc = icmp eq i32 %v2_fcbc, 0
  br i1 %v4_fcbc, label %dec_label_pc_fd54, label %dec_label_pc_fcc4

dec_label_pc_fcc4:                                ; preds = %dec_label_pc_fcbc
  %v3_fcc4 = icmp ult i32 %v1_fcb4, 536870912
  br i1 %v3_fcc4, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_fcc4
  %v4_fcc8 = mul i32 %v1_fcb4, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_fcc4, %.thread
  %v0_fce8.pr36.ph = phi i32 [ %v4_fcc8, %.thread ], [ %v1_fcb4, %dec_label_pc_fcc4 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_fcc4 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_fce8.pr36 = phi i32 [ %v4_fcdc, %bb81 ], [ %v0_fce8.pr36.ph, %.preheader.preheader ]
  %v1_fce0 = phi i32 [ %v4_fce0, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_fcd4 = icmp ugt i32 %v0_fce8.pr36, 268435455
  br i1 %v2_fcd4, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_fce8thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_fcd8 = icmp ult i32 %v0_fce8.pr36, %v0_fcb4
  br i1 %v4_fcd8, label %bb80, label %dec_label_pc_fce8thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_fcdc = and i32 %v0_fce8.pr36, 268435456
  %v3_fcdc = icmp eq i32 %v2_fcdc, 0
  %v4_fcdc = mul i32 %v0_fce8.pr36, 16
  br i1 %v3_fcdc, label %bb81, label %dec_label_pc_fce8.loopexit

bb81:                                             ; preds = %bb80
  %v2_fce0 = and i32 %v1_fce0, 268435456
  %v3_fce0 = icmp eq i32 %v2_fce0, 0
  %v4_fce0 = mul i32 %v1_fce0, 16
  br i1 %v3_fce0, label %.preheader, label %dec_label_pc_fce8thread-pre-split.loopexit.loopexit

dec_label_pc_fce8thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_fcf448.ph = phi i32 [ %v1_fce0, %bb ], [ %v4_fce0, %bb81 ]
  %v0_fce8.pr38.ph = phi i32 [ %v0_fce8.pr36, %bb ], [ %v4_fcdc, %bb81 ]
  br label %dec_label_pc_fce8thread-pre-split.loopexit

dec_label_pc_fce8thread-pre-split.loopexit:       ; preds = %dec_label_pc_fce8thread-pre-split.loopexit.loopexit, %.thread2
  %v1_fcf448 = phi i32 [ %v1_fce0, %.thread2 ], [ %v1_fcf448.ph, %dec_label_pc_fce8thread-pre-split.loopexit.loopexit ]
  %v0_fce8.pr38 = phi i32 [ %v0_fce8.pr36, %.thread2 ], [ %v0_fce8.pr38.ph, %dec_label_pc_fce8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_fce8thread-pre-split

dec_label_pc_fce8thread-pre-split:                ; preds = %dec_label_pc_fce8thread-pre-split.loopexit, %bb83
  %v1_fcf446 = phi i32 [ %v1_fcf448, %dec_label_pc_fce8thread-pre-split.loopexit ], [ %v3_fcf4, %bb83 ]
  %v0_fce8.pr = phi i32 [ %v0_fce8.pr38, %dec_label_pc_fce8thread-pre-split.loopexit ], [ %v3_fcf0, %bb83 ]
  br label %dec_label_pc_fce8

dec_label_pc_fce8.loopexit:                       ; preds = %bb80
  br label %dec_label_pc_fce8

dec_label_pc_fce8:                                ; preds = %dec_label_pc_fce8.loopexit, %dec_label_pc_fce8thread-pre-split
  %v1_fcf4 = phi i32 [ %v1_fcf446, %dec_label_pc_fce8thread-pre-split ], [ %v1_fce0, %dec_label_pc_fce8.loopexit ]
  %v1_fcf0 = phi i32 [ %v0_fce8.pr, %dec_label_pc_fce8thread-pre-split ], [ %v4_fcdc, %dec_label_pc_fce8.loopexit ]
  %v2_fce8 = icmp slt i32 %v1_fcf0, 0
  br i1 %v2_fce8, label %dec_label_pc_fcfc, label %bb82

bb82:                                             ; preds = %dec_label_pc_fce8
  %v4_fcec = icmp ult i32 %v1_fcf0, %v0_fcb4
  br i1 %v4_fcec, label %bb83, label %dec_label_pc_fcfc

bb83:                                             ; preds = %bb82
  %v3_fcf0 = mul i32 %v1_fcf0, 2
  %v2_fcf4 = icmp slt i32 %v1_fcf4, 0
  %v3_fcf4 = mul i32 %v1_fcf4, 2
  br i1 %v2_fcf4, label %dec_label_pc_fcfc, label %dec_label_pc_fce8thread-pre-split

dec_label_pc_fcfc:                                ; preds = %bb82, %dec_label_pc_fce8, %bb83
  %v2_fd0859 = phi i32 [ %v3_fcf4, %bb83 ], [ %v1_fcf4, %bb82 ], [ %v1_fcf4, %dec_label_pc_fce8 ]
  %v1_fd0051 = phi i32 [ %v3_fcf0, %bb83 ], [ %v1_fcf0, %bb82 ], [ %v1_fcf0, %dec_label_pc_fce8 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fd00

dec_label_pc_fd00:                                ; preds = %.thread11, %dec_label_pc_fcfc
  %v1_fd34 = phi i32 [ %v4_fd34, %.thread11 ], [ %v2_fd0859, %dec_label_pc_fcfc ]
  %v1_fd08 = phi i32 [ %v0_fd40, %.thread11 ], [ 0, %dec_label_pc_fcfc ]
  %v1_fd38 = phi i32 [ %v4_fd38, %.thread11 ], [ %v1_fd0051, %dec_label_pc_fcfc ]
  %v1_fd04 = phi i32 [ %v0_fd30, %.thread11 ], [ %v0_fcb4, %dec_label_pc_fcfc ]
  %v3_fd00 = icmp ult i32 %v1_fd04, %v1_fd38
  br i1 %v3_fd00, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_fd00
  %v3_fd04 = sub i32 %v1_fd04, %v1_fd38
  %v3_fd08 = or i32 %v1_fd08, %v1_fd34
  store i32 %v3_fd08, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_fd00, %bb84
  %v1_fd10 = phi i32 [ %v1_fd04, %dec_label_pc_fd00 ], [ %v3_fd04, %bb84 ]
  %v1_fd14 = phi i32 [ %v1_fd08, %dec_label_pc_fd00 ], [ %v3_fd08, %bb84 ]
  %v4_fd0c = udiv i32 %v1_fd38, 2
  %v6_fd0c = icmp ult i32 %v1_fd10, %v4_fd0c
  br i1 %v6_fd0c, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_fd10 = urem i32 %v1_fd38, 2
  %v4_fd10 = icmp eq i32 %v3_fd10, 0
  %v6_fd10 = sub i32 %v1_fd10, %v4_fd0c
  br i1 %v4_fd10, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_fd14 = udiv i32 %v1_fd34, 2
  %v6_fd14 = or i32 %v1_fd14, %v5_fd14
  store i32 %v6_fd14, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_fd1c = phi i32 [ %v6_fd10, %bb85 ], [ %v1_fd10, %.thread7 ], [ %v6_fd10, %bb86 ]
  %v1_fd20 = phi i32 [ %v1_fd14, %bb85 ], [ %v1_fd14, %.thread7 ], [ %v6_fd14, %bb86 ]
  %v4_fd18 = udiv i32 %v1_fd38, 4
  %v6_fd18 = icmp ult i32 %v1_fd1c, %v4_fd18
  br i1 %v6_fd18, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_fd1c = and i32 %v1_fd38, 2
  %v4_fd1c = icmp eq i32 %v3_fd1c, 0
  %v6_fd1c = sub i32 %v1_fd1c, %v4_fd18
  br i1 %v4_fd1c, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_fd20 = udiv i32 %v1_fd34, 4
  %v6_fd20 = or i32 %v1_fd20, %v5_fd20
  store i32 %v6_fd20, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_fd28 = phi i32 [ %v6_fd1c, %bb87 ], [ %v1_fd1c, %.thread8 ], [ %v6_fd1c, %bb88 ]
  %v1_fd2c = phi i32 [ %v1_fd20, %bb87 ], [ %v1_fd20, %.thread8 ], [ %v6_fd20, %bb88 ]
  %v4_fd24 = udiv i32 %v1_fd38, 8
  %v6_fd24 = icmp ult i32 %v1_fd28, %v4_fd24
  br i1 %v6_fd24, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_fd28 = and i32 %v1_fd38, 4
  %v4_fd28 = icmp eq i32 %v3_fd28, 0
  %v6_fd28 = sub i32 %v1_fd28, %v4_fd24
  br i1 %v4_fd28, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_fd2c = udiv i32 %v1_fd34, 8
  %v6_fd2c = or i32 %v1_fd2c, %v5_fd2c
  store i32 %v6_fd2c, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_fd40 = phi i32 [ %v1_fd2c, %bb89 ], [ %v1_fd2c, %.thread9 ], [ %v6_fd2c, %bb90 ]
  %v0_fd30 = phi i32 [ %v6_fd28, %bb89 ], [ %v1_fd28, %.thread9 ], [ %v6_fd28, %bb90 ]
  %v2_fd30 = icmp eq i32 %v0_fd30, 0
  br i1 %v2_fd30, label %dec_label_pc_fd40, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_fd34, 16
  br i1 %tmp138, label %dec_label_pc_fd40, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_fd34 = udiv i32 %v1_fd34, 16
  %v4_fd38 = udiv i32 %v1_fd38, 16
  br label %dec_label_pc_fd00

dec_label_pc_fd40:                                ; preds = %thread-pre-split, %bb91
  ret i32 %v0_fd40

dec_label_pc_fd48:                                ; preds = %dec_label_pc_fcb4
  %v9_fcb4 = icmp eq i32 %v0_fcb4, %v1_fcb4
  %. = zext i1 %v9_fcb4 to i32
  ret i32 %.

dec_label_pc_fd54:                                ; preds = %dec_label_pc_fcbc
  %v2_fd54 = icmp ugt i32 %v1_fcb4, 65535
  br i1 %v2_fd54, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_fd54
  %v2_fd58 = and i32 %v1_fcb4, 32768
  %v3_fd58 = icmp eq i32 %v2_fd58, 0
  %v4_fd58 = udiv i32 %v1_fcb4, 65536
  br i1 %v3_fd58, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_fd54
  %v0_fd6465 = phi i32 [ %v1_fcb4, %dec_label_pc_fd54 ], [ %v4_fd58, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_fd68 = phi i32 [ %v0_fd6465, %.thread16 ], [ %v4_fd58, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_fd64 = icmp ugt i32 %v1_fd68, 255
  br i1 %v2_fd64, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_fd68 = and i32 %v1_fd68, 128
  %v3_fd68 = icmp eq i32 %v2_fd68, 0
  %v4_fd68 = udiv i32 %v1_fd68, 256
  br i1 %v3_fd68, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_fd6c = or i32 %storemerge, 8
  store i32 %v2_fd6c, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_fd78 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_fd6c, %bb98 ]
  %v1_fd74 = phi i32 [ %v1_fd68, %bb96 ], [ %v4_fd68, %bb97 ], [ %v4_fd68, %bb98 ]
  %v2_fd70 = icmp ugt i32 %v1_fd74, 15
  br i1 %v2_fd70, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_fd74 = and i32 %v1_fd74, 8
  %v3_fd74 = icmp eq i32 %v2_fd74, 0
  %v4_fd74 = udiv i32 %v1_fd74, 16
  br i1 %v3_fd74, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_fd78 = add nsw i32 %v1_fd78, 4
  store i32 %v2_fd78, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_fd80 = phi i32 [ %v1_fd78, %.thread17 ], [ %v1_fd78, %bb99 ], [ %v2_fd78, %bb100 ]
  %v5_fd84 = phi i32 [ %v1_fd74, %.thread17 ], [ %v4_fd74, %bb99 ], [ %v4_fd74, %bb100 ]
  %v2_fd7c = icmp ugt i32 %v5_fd84, 3
  %v7_fd7c = icmp eq i32 %v5_fd84, 4
  %v2_fd80 = xor i1 %v7_fd7c, true
  %v3_fd80 = and i1 %v2_fd7c, %v2_fd80
  br i1 %v3_fd80, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_fd80 = add nsw i32 %v4_fd80, 3
  store i32 %v5_fd80, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_fd84 = phi i32 [ %v4_fd80, %.thread18 ], [ %v5_fd80, %bb101 ]
  %v2_fd84 = xor i1 %v2_fd7c, true
  %v3_fd84 = or i1 %v7_fd7c, %v2_fd84
  br i1 %v3_fd84, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_fd84 = udiv i32 %v5_fd84, 2
  %v9_fd84 = add i32 %v4_fd84, %v8_fd84
  store i32 %v9_fd84, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_fd88 = phi i32 [ %v4_fd84, %bb102 ], [ %v9_fd84, %bb103 ]
  %v6_fd88 = lshr i32 %v0_fcb4, %v1_fd88
  ret i32 %v6_fd88

dec_label_pc_fd90:                                ; preds = %dec_label_pc_fca8
  %v0_fd90 = load i32, i32* @lr, align 4
  %v0_fd94 = call i32 @function_fdbc()
  store i32 %v0_fd90, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_fd84, { 1, 0 }
  uselistorder i1 %v7_fd7c, { 1, 0 }
  uselistorder i32 %v4_fd74, { 1, 0 }
  uselistorder i32 %v1_fd74, { 1, 0, 2, 3 }
  uselistorder i32 %v2_fd6c, { 1, 0 }
  uselistorder i32 %v4_fd68, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_fd68, { 1, 0, 2, 3 }
  uselistorder i32 %v4_fd58, { 1, 0 }
  uselistorder i32 %v0_fd30, { 1, 0 }
  uselistorder i32 %v4_fd24, { 1, 0 }
  uselistorder i32 %v1_fd2c, { 1, 2, 0 }
  uselistorder i32 %v4_fd18, { 1, 0 }
  uselistorder i32 %v1_fd20, { 1, 2, 0 }
  uselistorder i32 %v4_fd0c, { 1, 0 }
  uselistorder i32 %v1_fd14, { 1, 2, 0 }
  uselistorder i32 %v1_fd38, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_fd08, { 1, 0 }
  uselistorder i32 %v1_fd34, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_fcf4, { 1, 0 }
  uselistorder i32 %v3_fcf0, { 1, 0 }
  uselistorder i32 %v1_fcf0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_fcf4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_fce0, { 1, 0 }
  uselistorder i32 %v4_fcdc, { 2, 1, 0 }
  uselistorder i32 %v1_fce0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_fce8.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_fcb4, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_fcb4, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_fca8, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_fd40, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_fcfc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fce8thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_fda4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fda4:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_fda8 = call i32 @function_fca8()
  %v2_fdb0 = mul i32 %v0_fda8, %arg2
  store i32 %v2_fdb0, i32* @r3, align 4
  ret i32 %v0_fda8

; uselistorder directives
  uselistorder i32 %v0_fda8, { 1, 0 }
}

define i32 @function_fdbc() local_unnamed_addr {
dec_label_pc_fdbc:
  %v1_fdc4 = call i32 @function_109f8(i32 8)
  ret i32 %v1_fdc4
}

define i32 @function_fdd0() local_unnamed_addr {
dec_label_pc_fdd0:
  %v1_fde0 = load i32, i32* @r0, align 4
  ret i32 %v1_fde0
}

define i32 @function_fde4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fde4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_fde4 = load i32, i32* @r2, align 4
  %v9_fde4 = load i32, i32* @r3, align 4
  store i32 %v9_fde4, i32* %stack_var_-4, align 4
  %v1_fdf4 = and i32 %arg2, 64
  %v2_fdf4 = icmp eq i32 %v1_fdf4, 0
  br i1 %v2_fdf4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_fde4
  %v3_fdfc = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_fdfc, i32* @r3, align 4
  %phitmp = urem i32 %v6_fde4, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_fde4, %bb
  %v0_fe00 = phi i32 [ 0, %dec_label_pc_fde4 ], [ %phitmp, %bb ]
  store i32 %v0_fe00, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_fe30, label %dec_label_pc_fe20

dec_label_pc_fe20:                                ; preds = %.thread
  %v0_fe20 = call i32 @function_10600()
  %v0_fe24 = load i32, i32* %r7.global-to-local, align 4
  %v1_fe24 = sub i32 0, %v0_fe24
  store i32 %v1_fe24, i32* @r3, align 4
  %v2_fe28 = inttoptr i32 %v0_fe20 to i32*
  store i32 %v1_fe24, i32* %v2_fe28, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_fe30

dec_label_pc_fe30:                                ; preds = %.thread, %dec_label_pc_fe20
  %v0_fe30 = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_fe20 ]
  ret i32 %v0_fe30

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_fe30, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_fe44() local_unnamed_addr {
dec_label_pc_fe44:
  %v1_fe54 = load i32, i32* @r0, align 4
  ret i32 %v1_fe54
}

define i32 @function_fe58(i32* %arg1) local_unnamed_addr {
dec_label_pc_fe58:
  %stack_var_-16 = alloca i32, align 4
  %v2_fe5c = ptrtoint i32* %stack_var_-16 to i32
  %v2_fe6c = call i32 @function_ffd8(i32 %v2_fe5c, i32 0)
  %v2_fe70 = load i32, i32* %stack_var_-16, align 4
  %v2_fe74 = icmp eq i32* %arg1, null
  br i1 %v2_fe74, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_fe58
  store i32 %v2_fe70, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_fe58, %bb
  ret i32 %v2_fe70

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_fe88(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fe88:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_febc, label %dec_label_pc_feac

dec_label_pc_feac:                                ; preds = %dec_label_pc_fe88
  %v0_feac = call i32 @function_10600()
  %v0_feb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_feb0 = sub i32 0, %v0_feb0
  %v2_feb4 = inttoptr i32 %v0_feac to i32*
  store i32 %v1_feb0, i32* %v2_feb4, align 4
  br label %dec_label_pc_febc

dec_label_pc_febc:                                ; preds = %dec_label_pc_fe88, %dec_label_pc_feac
  %v1_fec4 = phi i32 [ %arg1, %dec_label_pc_fe88 ], [ -1, %dec_label_pc_feac ]
  ret i32 %v1_fec4

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_febc, { 1, 0 }
}

define i32 @function_fec8() local_unnamed_addr {
dec_label_pc_fec8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_fec8 = load i32, i32* @r7, align 4
  store i32 %v3_fec8, i32* %stack_var_-8, align 4
  %v0_fed4 = load i32, i32* @r0, align 4
  store i32 %v0_fed4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_fed4, -4095
  br i1 %tmp, label %dec_label_pc_fef4, label %dec_label_pc_fee4

dec_label_pc_fee4:                                ; preds = %dec_label_pc_fec8
  %v0_fee4 = call i32 @function_10600()
  %v0_fee8 = load i32, i32* %r7.global-to-local, align 4
  %v1_fee8 = sub i32 0, %v0_fee8
  %v2_feec = inttoptr i32 %v0_fee4 to i32*
  store i32 %v1_fee8, i32* %v2_feec, align 4
  %v2_fef4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_fef4

dec_label_pc_fef4:                                ; preds = %dec_label_pc_fec8, %dec_label_pc_fee4
  %v1_fef8 = phi i32 [ %v0_fed4, %dec_label_pc_fec8 ], [ -1, %dec_label_pc_fee4 ]
  %v2_fef4 = phi i32 [ %v3_fec8, %dec_label_pc_fec8 ], [ %v2_fef4.pre, %dec_label_pc_fee4 ]
  store i32 %v2_fef4, i32* @r7, align 4
  ret i32 %v1_fef8

; uselistorder directives
  uselistorder i32 %v0_fed4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_fef4, { 1, 0 }
}

define i32 @function_fefc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_fefc:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_ff2c, label %dec_label_pc_ff1c

dec_label_pc_ff1c:                                ; preds = %dec_label_pc_fefc
  %v0_ff1c = call i32 @function_10600()
  %v0_ff20 = load i32, i32* %r4.global-to-local, align 4
  %v1_ff20 = sub i32 0, %v0_ff20
  %v2_ff24 = inttoptr i32 %v0_ff1c to i32*
  store i32 %v1_ff20, i32* %v2_ff24, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ff2c

dec_label_pc_ff2c:                                ; preds = %dec_label_pc_fefc, %dec_label_pc_ff1c
  %v0_ff2c = phi i32 [ %arg1, %dec_label_pc_fefc ], [ -1, %dec_label_pc_ff1c ]
  ret i32 %v0_ff2c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ff2c, { 1, 0 }
}

define i32 @function_ff3c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ff3c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ff3c = load i32, i32* @r7, align 4
  store i32 %v3_ff3c, i32* %stack_var_-8, align 4
  %v0_ff48 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ff48, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_ff48, -4095
  br i1 %tmp, label %dec_label_pc_ff68, label %dec_label_pc_ff58

dec_label_pc_ff58:                                ; preds = %dec_label_pc_ff3c
  %v0_ff58 = call i32 @function_10600()
  %v0_ff5c = load i32, i32* %r7.global-to-local, align 4
  %v1_ff5c = sub i32 0, %v0_ff5c
  %v2_ff60 = inttoptr i32 %v0_ff58 to i32*
  store i32 %v1_ff5c, i32* %v2_ff60, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_ff68.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ff68

dec_label_pc_ff68:                                ; preds = %dec_label_pc_ff3c, %dec_label_pc_ff58
  %v1_ff6c = phi i32 [ %v0_ff48, %dec_label_pc_ff3c ], [ -1, %dec_label_pc_ff58 ]
  %v2_ff68 = phi i32 [ %v3_ff3c, %dec_label_pc_ff3c ], [ %v2_ff68.pre, %dec_label_pc_ff58 ]
  store i32 %v2_ff68, i32* @r7, align 4
  ret i32 %v1_ff6c

; uselistorder directives
  uselistorder i32 %v0_ff48, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ff68, { 1, 0 }
}

define i32 @function_ff70(i32 %arg1) local_unnamed_addr {
dec_label_pc_ff70:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ff70 = load i32, i32* @r7, align 4
  store i32 %v3_ff70, i32* %stack_var_-8, align 4
  %v0_ff7c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ff7c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_ff7c, -4095
  br i1 %tmp, label %dec_label_pc_ff9c, label %dec_label_pc_ff8c

dec_label_pc_ff8c:                                ; preds = %dec_label_pc_ff70
  %v0_ff8c = call i32 @function_10600()
  %v0_ff90 = load i32, i32* %r7.global-to-local, align 4
  %v1_ff90 = sub i32 0, %v0_ff90
  %v2_ff94 = inttoptr i32 %v0_ff8c to i32*
  store i32 %v1_ff90, i32* %v2_ff94, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_ff9c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ff9c

dec_label_pc_ff9c:                                ; preds = %dec_label_pc_ff70, %dec_label_pc_ff8c
  %v1_ffa0 = phi i32 [ %v0_ff7c, %dec_label_pc_ff70 ], [ -1, %dec_label_pc_ff8c ]
  %v2_ff9c = phi i32 [ %v3_ff70, %dec_label_pc_ff70 ], [ %v2_ff9c.pre, %dec_label_pc_ff8c ]
  store i32 %v2_ff9c, i32* @r7, align 4
  ret i32 %v1_ffa0

; uselistorder directives
  uselistorder i32 %v0_ff7c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ff9c, { 1, 0 }
}

define i32 @function_ffa4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ffa4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ffa4 = load i32, i32* @r7, align 4
  store i32 %v3_ffa4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_ffcc, label %dec_label_pc_ffbc

dec_label_pc_ffbc:                                ; preds = %dec_label_pc_ffa4
  %v0_ffbc = call i32 @function_10600()
  %v0_ffc0 = load i32, i32* %r7.global-to-local, align 4
  %v1_ffc0 = sub i32 0, %v0_ffc0
  %v2_ffc4 = inttoptr i32 %v0_ffbc to i32*
  store i32 %v1_ffc0, i32* %v2_ffc4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_ffd0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ffcc

dec_label_pc_ffcc:                                ; preds = %dec_label_pc_ffa4, %dec_label_pc_ffbc
  %v2_ffd0 = phi i32 [ %v3_ffa4, %dec_label_pc_ffa4 ], [ %v2_ffd0.pre, %dec_label_pc_ffbc ]
  %v0_ffcc = phi i32 [ %arg1, %dec_label_pc_ffa4 ], [ -1, %dec_label_pc_ffbc ]
  store i32 %v2_ffd0, i32* @r7, align 4
  ret i32 %v0_ffcc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ffcc, { 1, 0 }
}

define i32 @function_ffd8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ffd8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ffd8 = load i32, i32* @r7, align 4
  store i32 %v3_ffd8, i32* %stack_var_-8, align 4
  %v0_ffe4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ffe4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_ffe4, -4095
  br i1 %tmp, label %dec_label_pc_10004, label %dec_label_pc_fff4

dec_label_pc_fff4:                                ; preds = %dec_label_pc_ffd8
  %v0_fff4 = call i32 @function_10600()
  %v0_fff8 = load i32, i32* %r7.global-to-local, align 4
  %v1_fff8 = sub i32 0, %v0_fff8
  store i32 %v1_fff8, i32* @r3, align 4
  %v2_fffc = inttoptr i32 %v0_fff4 to i32*
  store i32 %v1_fff8, i32* %v2_fffc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10004.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10004

dec_label_pc_10004:                               ; preds = %dec_label_pc_ffd8, %dec_label_pc_fff4
  %v1_10008 = phi i32 [ %v0_ffe4, %dec_label_pc_ffd8 ], [ -1, %dec_label_pc_fff4 ]
  %v2_10004 = phi i32 [ %v3_ffd8, %dec_label_pc_ffd8 ], [ %v2_10004.pre, %dec_label_pc_fff4 ]
  store i32 %v2_10004, i32* @r7, align 4
  ret i32 %v1_10008

; uselistorder directives
  uselistorder i32 %v0_ffe4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10004, { 1, 0 }
}

define i32 @function_1000c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_1000c = load i32, i32* @r3, align 4
  store i32 %v9_1000c, i32* %stack_var_-4, align 4
  %v2_10024 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10024, i32* @r3, align 4
  %v0_10048 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10048, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10048, -4095
  br i1 %tmp, label %dec_label_pc_10068, label %dec_label_pc_10058

dec_label_pc_10058:                               ; preds = %dec_label_pc_1000c
  %v0_10058 = call i32 @function_10600()
  %v0_1005c = load i32, i32* %r7.global-to-local, align 4
  %v1_1005c = sub i32 0, %v0_1005c
  store i32 %v1_1005c, i32* @r3, align 4
  %v2_10060 = inttoptr i32 %v0_10058 to i32*
  store i32 %v1_1005c, i32* %v2_10060, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10068

dec_label_pc_10068:                               ; preds = %dec_label_pc_1000c, %dec_label_pc_10058
  %v1_10074 = phi i32 [ %v0_10048, %dec_label_pc_1000c ], [ -1, %dec_label_pc_10058 ]
  ret i32 %v1_10074

; uselistorder directives
  uselistorder i32 %v0_10048, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10068, { 1, 0 }
}

define i32 @function_10078(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10078:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_100b4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_100b4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_100b4, -4095
  br i1 %tmp, label %dec_label_pc_100d4, label %dec_label_pc_100c4

dec_label_pc_100c4:                               ; preds = %dec_label_pc_10078
  %v0_100c4 = call i32 @function_10600()
  %v0_100c8 = load i32, i32* %r7.global-to-local, align 4
  %v1_100c8 = sub i32 0, %v0_100c8
  %v2_100cc = inttoptr i32 %v0_100c4 to i32*
  store i32 %v1_100c8, i32* %v2_100cc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_100d4

dec_label_pc_100d4:                               ; preds = %dec_label_pc_10078, %dec_label_pc_100c4
  %v1_100e0 = phi i32 [ %v0_100b4, %dec_label_pc_10078 ], [ -1, %dec_label_pc_100c4 ]
  ret i32 %v1_100e0

; uselistorder directives
  uselistorder i32 %v0_100b4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_100d4, { 1, 0 }
}

define i32 @function_100e4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100e4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_100e4 = load i32, i32* @r7, align 4
  store i32 %v3_100e4, i32* %stack_var_-8, align 4
  %v0_100f0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_100f0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_100f0, -4095
  br i1 %tmp, label %dec_label_pc_10110, label %dec_label_pc_10100

dec_label_pc_10100:                               ; preds = %dec_label_pc_100e4
  %v0_10100 = call i32 @function_10600()
  %v0_10104 = load i32, i32* %r7.global-to-local, align 4
  %v1_10104 = sub i32 0, %v0_10104
  %v2_10108 = inttoptr i32 %v0_10100 to i32*
  store i32 %v1_10104, i32* %v2_10108, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10110.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10110

dec_label_pc_10110:                               ; preds = %dec_label_pc_100e4, %dec_label_pc_10100
  %v1_10114 = phi i32 [ %v0_100f0, %dec_label_pc_100e4 ], [ -1, %dec_label_pc_10100 ]
  %v2_10110 = phi i32 [ %v3_100e4, %dec_label_pc_100e4 ], [ %v2_10110.pre, %dec_label_pc_10100 ]
  store i32 %v2_10110, i32* @r7, align 4
  ret i32 %v1_10114

; uselistorder directives
  uselistorder i32 %v0_100f0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10110, { 1, 0 }
}

define i32 @function_10118(i32 %arg1) local_unnamed_addr {
dec_label_pc_10118:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10118 = load i32, i32* @r7, align 4
  store i32 %v3_10118, i32* %stack_var_-8, align 4
  %v0_10124 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10124, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10124, -4095
  br i1 %tmp, label %dec_label_pc_10144, label %dec_label_pc_10134

dec_label_pc_10134:                               ; preds = %dec_label_pc_10118
  %v0_10134 = call i32 @function_10600()
  %v0_10138 = load i32, i32* %r7.global-to-local, align 4
  %v1_10138 = sub i32 0, %v0_10138
  %v2_1013c = inttoptr i32 %v0_10134 to i32*
  store i32 %v1_10138, i32* %v2_1013c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10144.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10144

dec_label_pc_10144:                               ; preds = %dec_label_pc_10118, %dec_label_pc_10134
  %v1_10148 = phi i32 [ %v0_10124, %dec_label_pc_10118 ], [ -1, %dec_label_pc_10134 ]
  %v2_10144 = phi i32 [ %v3_10118, %dec_label_pc_10118 ], [ %v2_10144.pre, %dec_label_pc_10134 ]
  store i32 %v2_10144, i32* @r7, align 4
  ret i32 %v1_10148

; uselistorder directives
  uselistorder i32 %v0_10124, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10144, { 1, 0 }
}

define i32 @function_1014c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1014c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_1014c = load i32, i32* @r3, align 4
  store i32 %v9_1014c, i32* %stack_var_-4, align 4
  %v2_10158 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_10158, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1018c, label %dec_label_pc_1017c

dec_label_pc_1017c:                               ; preds = %dec_label_pc_1014c
  %v0_1017c = call i32 @function_10600()
  %v0_10180 = load i32, i32* %r7.global-to-local, align 4
  %v1_10180 = sub i32 0, %v0_10180
  store i32 %v1_10180, i32* @r3, align 4
  %v2_10184 = inttoptr i32 %v0_1017c to i32*
  store i32 %v1_10180, i32* %v2_10184, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1018c

dec_label_pc_1018c:                               ; preds = %dec_label_pc_1014c, %dec_label_pc_1017c
  %v0_1018c = phi i32 [ %arg1, %dec_label_pc_1014c ], [ -1, %dec_label_pc_1017c ]
  ret i32 %v0_1018c

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1018c, { 1, 0 }
}

define i32 @function_101a0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_101a0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_101a0 = load i32, i32* @r7, align 4
  store i32 %v3_101a0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_101cc, label %dec_label_pc_101bc

dec_label_pc_101bc:                               ; preds = %dec_label_pc_101a0
  %v0_101bc = call i32 @function_10600()
  %v0_101c0 = load i32, i32* %r7.global-to-local, align 4
  %v1_101c0 = sub i32 0, %v0_101c0
  %v2_101c4 = inttoptr i32 %v0_101bc to i32*
  store i32 %v1_101c0, i32* %v2_101c4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_101d0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_101cc

dec_label_pc_101cc:                               ; preds = %dec_label_pc_101a0, %dec_label_pc_101bc
  %v2_101d0 = phi i32 [ %v3_101a0, %dec_label_pc_101a0 ], [ %v2_101d0.pre, %dec_label_pc_101bc ]
  %v0_101cc = phi i32 [ %arg1, %dec_label_pc_101a0 ], [ -1, %dec_label_pc_101bc ]
  store i32 %v2_101d0, i32* @r7, align 4
  ret i32 %v0_101cc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_101cc, { 1, 0 }
}

define i32 @function_101d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_101d8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_101d8 = load i32, i32* @r7, align 4
  store i32 %v3_101d8, i32* %stack_var_-8, align 4
  %v0_101e4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_101e4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_101e4, -4095
  br i1 %tmp, label %dec_label_pc_10204, label %dec_label_pc_101f4

dec_label_pc_101f4:                               ; preds = %dec_label_pc_101d8
  %v0_101f4 = call i32 @function_10600()
  %v0_101f8 = load i32, i32* %r7.global-to-local, align 4
  %v1_101f8 = sub i32 0, %v0_101f8
  store i32 %v1_101f8, i32* @r3, align 4
  %v2_101fc = inttoptr i32 %v0_101f4 to i32*
  store i32 %v1_101f8, i32* %v2_101fc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10204.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10204

dec_label_pc_10204:                               ; preds = %dec_label_pc_101d8, %dec_label_pc_101f4
  %v1_10208 = phi i32 [ %v0_101e4, %dec_label_pc_101d8 ], [ -1, %dec_label_pc_101f4 ]
  %v2_10204 = phi i32 [ %v3_101d8, %dec_label_pc_101d8 ], [ %v2_10204.pre, %dec_label_pc_101f4 ]
  store i32 %v2_10204, i32* @r7, align 4
  ret i32 %v1_10208

; uselistorder directives
  uselistorder i32 %v0_101e4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10204, { 1, 0 }
}

define i32 @function_1020c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1020c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_1020c = load i32, i32* @r4, align 4
  store i32 %v3_1020c, i32* %stack_var_-24, align 4
  %v9_1020c = load i32, i32* @r6, align 4
  %v12_1020c = load i32, i32* @r7, align 4
  %v15_1020c = load i32, i32* @r8, align 4
  %v18_1020c = load i32, i32* @lr, align 4
  %v2_10210 = load i32, i32* %arg1, align 4
  store i32 %v2_10210, i32* %r4.global-to-local, align 4
  %v3_10218 = icmp eq i32 %v2_10210, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 121092, i32* @r6, align 4
  br i1 %v3_10218, label %dec_label_pc_1022c, label %dec_label_pc_10240

dec_label_pc_1022c:                               ; preds = %dec_label_pc_1020c
  %v0_1022c = call i32 @function_10600()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_10234 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10234, i32* %r2.global-to-local, align 4
  %v2_10238 = inttoptr i32 %v0_1022c to i32*
  store i32 9, i32* %v2_10238, align 4
  %v0_102e0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_102e0

dec_label_pc_10240:                               ; preds = %dec_label_pc_1020c
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_10244 = add i32 %tmp, 24
  store i32 %v1_10244, i32* %r4.global-to-local, align 4
  store i32 %v1_10244, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_10258 = load i32, i32* inttoptr (i32 121164 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10258)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_10270 = load i32, i32* @r6, align 4
  %v2_10270 = add i32 %v0_10270, 16
  %v3_10270 = inttoptr i32 %v2_10270 to i32*
  %v4_10270 = load i32, i32* %v3_10270, align 4
  call void @__pseudo_branch(i32 %v4_10270)
  %v0_1027c = load i32, i32* @r7, align 4
  %v1_1027c = inttoptr i32 %v0_1027c to i32*
  %v2_1027c = load i32, i32* %v1_1027c, align 4
  store i32 %v2_1027c, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_1028c = load i32, i32* @r8, align 4
  store i32 %v0_1028c, i32* %v1_1027c, align 4
  %v0_10290 = load i32, i32* @r6, align 4
  %v1_10290 = load i32, i32* %r3.global-to-local, align 4
  %v2_10290 = add i32 %v1_10290, %v0_10290
  %v3_10290 = inttoptr i32 %v2_10290 to i32*
  %v4_10290 = load i32, i32* %v3_10290, align 4
  store i32 ptrtoint (i32* @global_var_1029c.294 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10290)
  %v0_1029c = load i32, i32* @r7, align 4
  %v1_1029c = add i32 %v0_1029c, 12
  %v2_1029c = inttoptr i32 %v1_1029c to i32*
  %v3_1029c = load i32, i32* %v2_1029c, align 4
  store i32 %v3_1029c, i32* @r0, align 4
  %v0_102a0 = call i32 @function_11c74()
  %v0_102a4 = load i32, i32* @r7, align 4
  store i32 %v0_102a4, i32* @r0, align 4
  %v0_102a8 = call i32 @function_11c74()
  %v0_102b0 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_102b0, -4095
  br i1 %tmp11, label %dec_label_pc_102dc, label %dec_label_pc_102cc

dec_label_pc_102cc:                               ; preds = %dec_label_pc_10240
  %v0_102cc = call i32 @function_10600()
  %v0_102d0 = load i32, i32* @r4, align 4
  %v1_102d0 = sub i32 0, %v0_102d0
  store i32 %v1_102d0, i32* %r3.global-to-local, align 4
  %v2_102d4 = inttoptr i32 %v0_102cc to i32*
  store i32 %v1_102d0, i32* %v2_102d4, align 4
  %v0_102d8 = load i32, i32* @r8, align 4
  br label %dec_label_pc_102dc

dec_label_pc_102dc:                               ; preds = %dec_label_pc_10240, %dec_label_pc_102cc
  %v0_102dc = phi i32 [ %v0_102b0, %dec_label_pc_10240 ], [ %v0_102d8, %dec_label_pc_102cc ]
  store i32 %v0_102dc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_102e0

dec_label_pc_102e0:                               ; preds = %dec_label_pc_1022c, %dec_label_pc_102dc
  %v0_102e0 = phi i32 [ %v0_102e0.pre, %dec_label_pc_1022c ], [ %v0_102dc, %dec_label_pc_102dc ]
  %v2_102e8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_102e8, i32* @r4, align 4
  store i32 %v9_1020c, i32* @r6, align 4
  store i32 %v12_1020c, i32* @r7, align 4
  store i32 %v15_1020c, i32* @r8, align 4
  store i32 %v18_1020c, i32* @lr, align 4
  ret i32 %v0_102e0

; uselistorder directives
  uselistorder i32 %v0_102b0, { 1, 0 }
  uselistorder label %dec_label_pc_102e0, { 1, 0 }
  uselistorder label %dec_label_pc_102dc, { 1, 0 }
}

define i32 @function_102f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_102f4:
  %v0_102f4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_102f4, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_102f4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_102f4, %bb
  %v10_10300 = phi i32 [ %arg1, %dec_label_pc_102f4 ], [ 0, %bb ]
  ret i32 %v10_10300

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10304(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10304:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_10304 = load i32, i32* @r5, align 4
  %v9_10304 = load i32, i32* @r6, align 4
  %v12_10304 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_10318 = call i32 @function_10c08()
  %v2_10320 = icmp eq i32 %v0_10318, 0
  store i32 121092, i32* @r6, align 4
  br i1 %v2_10320, label %bb, label %dec_label_pc_10330

bb:                                               ; preds = %dec_label_pc_10304
  br label %dec_label_pc_103bc

dec_label_pc_10330:                               ; preds = %dec_label_pc_10304
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_10334 = load i32, i32* @r4, align 4
  %v2_10334 = icmp ugt i32 %v0_10334, 511
  %v2_10338 = add i32 %v0_10318, 4
  %v3_10338 = inttoptr i32 %v2_10338 to i32*
  store i32 0, i32* %v3_10338, align 4
  %v0_1033c = load i32, i32* %r3.global-to-local, align 4
  %v2_1033c = add i32 %v0_10318, 16
  %v3_1033c = inttoptr i32 %v2_1033c to i32*
  store i32 %v0_1033c, i32* %v3_1033c, align 4
  %v0_10340 = load i32, i32* %r3.global-to-local, align 4
  %v2_10340 = add i32 %v0_10318, 8
  %v3_10340 = inttoptr i32 %v2_10340 to i32*
  store i32 %v0_10340, i32* %v3_10340, align 4
  br i1 %v2_10334, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_10330
  %v0_103482 = load i32, i32* @r4, align 4
  %v2_103483 = add i32 %v0_10318, 20
  %v3_103484 = inttoptr i32 %v2_103483 to i32*
  store i32 %v0_103482, i32* %v3_103484, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_10330
  %v1_10344 = load i32, i32* %r3.global-to-local, align 4
  %v2_10344 = add i32 %v1_10344, 512
  store i32 %v2_10344, i32* %r3.global-to-local, align 4
  %v0_10348 = load i32, i32* @r4, align 4
  %v2_10348 = add i32 %v0_10318, 20
  %v3_10348 = inttoptr i32 %v2_10348 to i32*
  store i32 %v0_10348, i32* %v3_10348, align 4
  %v1_1034c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_1034c, i32* %v3_10348, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_10318, i32* @r5, align 4
  %v0_10354 = load i32, i32* @r7, align 4
  %v2_10354 = inttoptr i32 %v0_10318 to i32*
  store i32 %v0_10354, i32* %v2_10354, align 4
  %v0_10358 = load i32, i32* @r5, align 4
  %v1_10358 = add i32 %v0_10358, 20
  %v2_10358 = inttoptr i32 %v1_10358 to i32*
  %v3_10358 = load i32, i32* %v2_10358, align 4
  store i32 %v3_10358, i32* %r1.global-to-local, align 4
  %v2_10360 = call i32 @function_11528(i32 1, i32 %v3_10358)
  %v2_10364 = icmp eq i32 %v2_10360, 0
  store i32 %v2_10360, i32* @r4, align 4
  %v1_1036c = load i32, i32* @r5, align 4
  %v2_1036c = add i32 %v1_1036c, 12
  %v3_1036c = inttoptr i32 %v2_1036c to i32*
  store i32 %v2_10360, i32* %v3_1036c, align 4
  br i1 %v2_10364, label %dec_label_pc_10374, label %dec_label_pc_10384

dec_label_pc_10374:                               ; preds = %bb17
  %v0_10374 = load i32, i32* @r5, align 4
  store i32 %v0_10374, i32* @r0, align 4
  %v0_10378 = call i32 @function_11c74()
  %v0_1037c = load i32, i32* @r4, align 4
  br label %dec_label_pc_103bc

dec_label_pc_10384:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_103ac = load i32, i32* @r5, align 4
  %v1_103ac = add i32 %v0_103ac, 24
  %v1_103b0 = inttoptr i32 %v1_103ac to i32*
  store i32 0, i32* %v1_103b0, align 4
  %v3_103b0 = add i32 %v0_103ac, 28
  %v4_103b0 = inttoptr i32 %v3_103b0 to i32*
  %v5_103b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_103b0, i32* %v4_103b0, align 4
  %v6_103b0 = add i32 %v0_103ac, 32
  %v7_103b0 = inttoptr i32 %v6_103b0 to i32*
  %v8_103b0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_103b0, i32* %v7_103b0, align 4
  %v9_103b0 = add i32 %v0_103ac, 36
  %v10_103b0 = inttoptr i32 %v9_103b0 to i32*
  %v11_103b0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_103b0, i32* %v10_103b0, align 4
  %v12_103b0 = add i32 %v0_103ac, 40
  %v2_103b4 = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_103b8 = inttoptr i32 %v12_103b0 to i32*
  store i32 %v2_103b4, i32* %v1_103b8, align 4
  %v3_103b8 = add i32 %v0_103ac, 44
  %v4_103b8 = inttoptr i32 %v3_103b8 to i32*
  %v5_103b8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_103b8, i32* %v4_103b8, align 4
  %v0_103bc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_103bc

dec_label_pc_103bc:                               ; preds = %bb, %dec_label_pc_10374, %dec_label_pc_10384
  %v0_103bc = phi i32 [ 0, %bb ], [ %v0_1037c, %dec_label_pc_10374 ], [ %v0_103bc.pre, %dec_label_pc_10384 ]
  store i32 %v6_10304, i32* @r5, align 4
  store i32 %v9_10304, i32* @r6, align 4
  store i32 %v12_10304, i32* @r7, align 4
  ret i32 %v0_103bc

; uselistorder directives
  uselistorder i32 %v2_10360, { 1, 0, 2 }
  uselistorder i32 %v0_10318, { 3, 2, 4, 0, 6, 5, 1, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 512, { 9, 8, 0, 4, 1, 5, 10, 6, 11, 7, 12, 2, 13, 3, 14 }
  uselistorder label %dec_label_pc_103bc, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_103d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_103d4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v6_103d4 = load i32, i32* @r7, align 4
  %v2_103dc = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_10404, label %dec_label_pc_103f4

dec_label_pc_103f4:                               ; preds = %dec_label_pc_103d4
  %v0_103f4 = call i32 @function_10600()
  %v0_103f8 = load i32, i32* @r7, align 4
  %v1_103f8 = sub i32 0, %v0_103f8
  %v2_103fc = inttoptr i32 %v0_103f4 to i32*
  store i32 %v1_103f8, i32* %v2_103fc, align 4
  br label %dec_label_pc_10428

dec_label_pc_10404:                               ; preds = %dec_label_pc_103d4
  %v1_10404 = icmp slt i32 %arg1, 0
  br i1 %v1_10404, label %dec_label_pc_10428, label %dec_label_pc_1040c

dec_label_pc_1040c:                               ; preds = %dec_label_pc_10404
  store i32 %v2_103dc, i32* @r1, align 4
  %v0_10410 = call i32 @function_12f28()
  %v1_10414 = icmp slt i32 %v0_10410, 0
  br i1 %v1_10414, label %dec_label_pc_1041c, label %dec_label_pc_10430

dec_label_pc_1041c:                               ; preds = %dec_label_pc_1040c
  br label %dec_label_pc_10428

dec_label_pc_10428:                               ; preds = %dec_label_pc_1041c, %dec_label_pc_10404, %dec_label_pc_103f4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1046c

dec_label_pc_10430:                               ; preds = %dec_label_pc_1040c
  %v0_10438 = load i32, i32* @r7, align 4
  %v3_1043c = call i32 @function_10078(i32 %v0_10438, i32 2, i32 1)
  %v0_10440 = load i32, i32* @r7, align 4
  %v2_10448 = call i32 @function_10304(i32 %v0_10440, i32 %tmp)
  store i32 %v2_10448, i32* %r4.global-to-local, align 4
  %v2_1044c = icmp eq i32 %v2_10448, 0
  br i1 %v2_1044c, label %dec_label_pc_10454, label %dec_label_pc_1046c

dec_label_pc_10454:                               ; preds = %dec_label_pc_10430
  %v0_10460 = call i32 @function_10600()
  %v2_10468 = inttoptr i32 %v0_10460 to i32*
  store i32 12, i32* %v2_10468, align 4
  %v0_1046c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1046c

dec_label_pc_1046c:                               ; preds = %dec_label_pc_10430, %dec_label_pc_10428, %dec_label_pc_10454
  %v0_1046c = phi i32 [ %v2_10448, %dec_label_pc_10430 ], [ 0, %dec_label_pc_10428 ], [ %v0_1046c.pre, %dec_label_pc_10454 ]
  store i32 %v6_103d4, i32* @r7, align 4
  ret i32 %v0_1046c

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_1046c, { 2, 0, 1 }
}

define i32 @function_1047c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1047c:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_1047c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1047c, label %bb, label %dec_label_pc_1047c._crit_edge

dec_label_pc_1047c._crit_edge:                    ; preds = %dec_label_pc_1047c
  br label %bb11

bb:                                               ; preds = %dec_label_pc_1047c
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_1047c._crit_edge, %bb
  %v2_10484 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_10484, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_10490 = call i32 @function_12f28()
  store i32 %v0_10490, i32* @r5, align 4
  %v2_10494 = icmp eq i32 %v0_10490, 0
  br i1 %v2_10494, label %dec_label_pc_1049c, label %dec_label_pc_10504

dec_label_pc_1049c:                               ; preds = %bb11
  %v1_104a0 = and i32 %tmp5, 61440
  store i32 %v1_104a0, i32* @r3, align 4
  %v7_104a4 = icmp eq i32 %v1_104a0, 16384
  br i1 %v7_104a4, label %dec_label_pc_104bc, label %dec_label_pc_104ac

dec_label_pc_104ac:                               ; preds = %dec_label_pc_1049c
  %v0_104ac = call i32 @function_10600()
  br label %dec_label_pc_104e8

dec_label_pc_104bc:                               ; preds = %dec_label_pc_1049c
  %v0_104bc = load i32, i32* @r4, align 4
  %v2_104c4 = call i32 @function_1000c(i32 %v0_104bc, i32 3)
  %v7_104c8 = icmp eq i32 %v2_104c4, -1
  br i1 %v7_104c8, label %dec_label_pc_10504, label %dec_label_pc_104d0

dec_label_pc_104d0:                               ; preds = %dec_label_pc_104bc
  %v1_104d0 = urem i32 %v2_104c4, 4
  %v7_104d4 = icmp eq i32 %v1_104d0, 1
  br i1 %v7_104d4, label %dec_label_pc_104dc, label %dec_label_pc_104f0

dec_label_pc_104dc:                               ; preds = %dec_label_pc_104d0
  %v0_104dc = call i32 @function_10600()
  br label %dec_label_pc_104e8

dec_label_pc_104e8:                               ; preds = %dec_label_pc_104ac, %dec_label_pc_104dc
  %storemerge2 = phi i32 [ %v0_104ac, %dec_label_pc_104ac ], [ %v0_104dc, %dec_label_pc_104dc ]
  %storemerge = phi i32 [ 20, %dec_label_pc_104ac ], [ 22, %dec_label_pc_104dc ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_104e8 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_104e8, align 4
  %v0_10508.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10508

dec_label_pc_104f0:                               ; preds = %dec_label_pc_104d0
  %v0_104f0 = load i32, i32* @r4, align 4
  %v2_104f8 = call i32 @function_10304(i32 %v0_104f0, i32 %tmp)
  store i32 %v2_104f8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10508

dec_label_pc_10504:                               ; preds = %bb11, %dec_label_pc_104bc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10508

dec_label_pc_10508:                               ; preds = %dec_label_pc_104f0, %dec_label_pc_104e8, %dec_label_pc_10504
  %v0_10508 = phi i32 [ %v2_104f8, %dec_label_pc_104f0 ], [ %v0_10508.pre, %dec_label_pc_104e8 ], [ 0, %dec_label_pc_10504 ]
  ret i32 %v0_10508

; uselistorder directives
  uselistorder i32 %v2_104c4, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_10304, { 1, 0 }
  uselistorder i32 ()* @function_12f28, { 1, 0 }
  uselistorder label %dec_label_pc_10508, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10504, { 1, 0 }
  uselistorder label %dec_label_pc_104e8, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_10518(i32* %arg1) local_unnamed_addr {
dec_label_pc_10518:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_10518 = load i32, i32* @r4, align 4
  %v6_10518 = load i32, i32* @r5, align 4
  %v9_10518 = load i32, i32* @r6, align 4
  %v12_10518 = load i32, i32* @r7, align 4
  %v15_10518 = load i32, i32* @lr, align 4
  store i32 121092, i32* @r6, align 4
  %v1_1052c = add i32 %tmp, 24
  store i32 %v1_1052c, i32* @r4, align 4
  %v4_10530 = load i32, i32* inttoptr (i32 121128 to i32*), align 8
  store i32 %v4_10530, i32* %r1.global-to-local, align 4
  store i32 %v1_1052c, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_10544 = load i32, i32* inttoptr (i32 121164 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_10544)
  %v0_10558 = load i32, i32* @r6, align 4
  %v2_10558 = add i32 %v0_10558, 16
  %v3_10558 = inttoptr i32 %v2_10558 to i32*
  %v4_10558 = load i32, i32* %v3_10558, align 4
  store i32 %v4_10558, i32* @ip, align 4
  store i32 66916, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10558)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_10568

dec_label_pc_10568:                               ; preds = %dec_label_pc_10598, %dec_label_pc_10518
  %v0_10568 = load i32, i32* @r5, align 4
  %v1_10568 = add i32 %v0_10568, 4
  %v2_10568 = inttoptr i32 %v1_10568 to i32*
  %v3_10568 = load i32, i32* %v2_10568, align 4
  store i32 %v3_10568, i32* %r2.global-to-local, align 4
  %v4_10568 = add i32 %v0_10568, 8
  %v5_10568 = inttoptr i32 %v4_10568 to i32*
  %v6_10568 = load i32, i32* %v5_10568, align 4
  %tmp10 = icmp ugt i32 %v6_10568, %v3_10568
  br i1 %tmp10, label %dec_label_pc_10598, label %dec_label_pc_10574

dec_label_pc_10574:                               ; preds = %dec_label_pc_10568
  %v1_10574 = inttoptr i32 %v0_10568 to i32*
  %v2_10574 = load i32, i32* %v1_10574, align 4
  %v1_10578 = add i32 %v0_10568, 12
  %v2_10578 = inttoptr i32 %v1_10578 to i32*
  %v3_10578 = load i32, i32* %v2_10578, align 4
  store i32 %v3_10578, i32* %r1.global-to-local, align 4
  %v1_1057c = add i32 %v0_10568, 20
  %v2_1057c = inttoptr i32 %v1_1057c to i32*
  %v3_1057c = load i32, i32* %v2_1057c, align 4
  store i32 %v3_1057c, i32* %r2.global-to-local, align 4
  %v4_10580 = call i32 @function_12e94(i32 %v2_10574, i32 %v3_10578, i32 %v3_1057c, i32 %v6_10568)
  %tmp9 = icmp slt i32 %v4_10580, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_10590

.thread:                                          ; preds = %dec_label_pc_10574
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_105c4

dec_label_pc_10590:                               ; preds = %dec_label_pc_10574
  %v1_10590 = load i32, i32* @r5, align 4
  %v2_10590 = add i32 %v1_10590, 8
  %v3_10590 = inttoptr i32 %v2_10590 to i32*
  store i32 %v4_10580, i32* %v3_10590, align 4
  %v0_10594 = load i32, i32* @r7, align 4
  %v1_10594 = load i32, i32* @r5, align 4
  %v2_10594 = add i32 %v1_10594, 4
  %v3_10594 = inttoptr i32 %v2_10594 to i32*
  store i32 %v0_10594, i32* %v3_10594, align 4
  %v0_10598.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10598

dec_label_pc_10598:                               ; preds = %dec_label_pc_10568, %dec_label_pc_10590
  %v1_105a8 = phi i32 [ %v0_10568, %dec_label_pc_10568 ], [ %v0_10598.pre, %dec_label_pc_10590 ]
  %v1_10598 = add i32 %v1_105a8, 4
  %v2_10598 = inttoptr i32 %v1_10598 to i32*
  %v3_10598 = load i32, i32* %v2_10598, align 4
  store i32 %v3_10598, i32* %r2.global-to-local, align 4
  %v1_1059c = add i32 %v1_105a8, 12
  %v2_1059c = inttoptr i32 %v1_1059c to i32*
  %v3_1059c = load i32, i32* %v2_1059c, align 4
  store i32 %v3_1059c, i32* %r1.global-to-local, align 4
  %v2_105a0 = add i32 %v3_1059c, %v3_10598
  store i32 %v2_105a0, i32* @r4, align 4
  %v1_105a4 = add i32 %v2_105a0, 4
  %v2_105a4 = inttoptr i32 %v1_105a4 to i32*
  %v3_105a4 = load i32, i32* %v2_105a4, align 4
  %v2_105a8 = add i32 %v1_105a8, 16
  %v3_105a8 = inttoptr i32 %v2_105a8 to i32*
  store i32 %v3_105a4, i32* %v3_105a8, align 4
  %v0_105ac = load i32, i32* @r4, align 4
  %v1_105ac = add i32 %v0_105ac, 8
  %v2_105ac = inttoptr i32 %v1_105ac to i16*
  %v3_105ac = load i16, i16* %v2_105ac, align 2
  %v4_105ac = zext i16 %v3_105ac to i32
  %v0_105b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_105b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_105b0 = add i32 %v1_105b0, %v0_105b0
  %v3_105b0 = inttoptr i32 %v2_105b0 to i32*
  %v4_105b0 = load i32, i32* %v3_105b0, align 4
  store i32 %v4_105b0, i32* %r1.global-to-local, align 4
  %v2_105b4 = add i32 %v0_105b0, %v4_105ac
  %v2_105b8 = icmp eq i32 %v4_105b0, 0
  %v1_105bc = load i32, i32* @r5, align 4
  %v2_105bc = add i32 %v1_105bc, 4
  %v3_105bc = inttoptr i32 %v2_105bc to i32*
  store i32 %v2_105b4, i32* %v3_105bc, align 4
  br i1 %v2_105b8, label %dec_label_pc_10568, label %dec_label_pc_105c4

dec_label_pc_105c4:                               ; preds = %dec_label_pc_10598, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_105d0 = load i32, i32* @r6, align 4
  %v2_105d0 = add i32 %v0_105d0, 24
  %v3_105d0 = inttoptr i32 %v2_105d0 to i32*
  %v4_105d0 = load i32, i32* %v3_105d0, align 4
  call void @__pseudo_branch(i32 %v4_105d0)
  %v0_105dc = load i32, i32* @r4, align 4
  store i32 %v3_10518, i32* @r4, align 4
  store i32 %v6_10518, i32* @r5, align 4
  store i32 %v9_10518, i32* @r6, align 4
  store i32 %v12_10518, i32* @r7, align 4
  store i32 %v15_10518, i32* @lr, align 4
  ret i32 %v0_105dc

; uselistorder directives
  uselistorder i32 %v1_105a8, { 0, 2, 1 }
  uselistorder i32 %v6_10568, { 1, 0 }
  uselistorder i32 %v0_10568, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_10598, { 1, 0 }
}

define i32 @function_105f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_105f0:
  %v0_105f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_105f0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_105f0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_105f0, %bb
  %v10_105fc = phi i32 [ %arg1, %dec_label_pc_105f0 ], [ 0, %bb ]
  ret i32 %v10_105fc

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_10600() local_unnamed_addr {
dec_label_pc_10600:
  store i32 121092, i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_1dbbc.311 to i32)
}

define i32 @function_1061c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1061c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_10620 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_10620, i32* @r0, align 4
  %v1_10628 = call i32 @function_13304(i32 %v2_10620)
  %v2_1062c = load i32, i32* %stack_var_-24, align 4
  %v2_10630 = add i32 %v2_1062c, %tmp
  %v2_10638 = mul i32 %v2_10630, 10000
  %v1_1063c = and i32 %v2_10638, 2147483632
  ret i32 %v1_1063c

; uselistorder directives
  uselistorder i32 %v2_10620, { 1, 0 }
}

define i32 @function_10650(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10650:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_10654 = load i32, i32* @r2, align 4
  %v8_10654 = icmp eq i32 %v0_10654, 8
  store i1 %v8_10654, i1* %cpsr_z.global-to-local, align 1
  %v5_10658 = icmp slt i32 %v0_10654, 8
  br i1 %v5_10658, label %dec_label_pc_106b8, label %dec_label_pc_1065c

dec_label_pc_1065c:                               ; preds = %dec_label_pc_10650
  %v4_1065c = mul i32 %arg2, 256
  %v5_1065c = or i32 %v4_1065c, %arg2
  %v4_10660 = mul i32 %v5_1065c, 65536
  %v5_10660 = or i32 %v4_10660, %v5_1065c
  store i32 %v5_10660, i32* %r1.global-to-local, align 4
  %v1_1066457 = urem i32 %tmp, 4
  %v2_1066458 = icmp eq i32 %v1_1066457, 0
  store i1 %v2_1066458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1066458, label %dec_label_pc_10674, label %bb

bb:                                               ; preds = %dec_label_pc_1065c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1065c ]
  %v3_1066859 = phi i32 [ %v6_10668, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1065c ]
  %v4_10668 = inttoptr i32 %v3_1066859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_10668, align 1
  %v5_10668 = load i32, i32* @r3, align 4
  %v6_10668 = add i32 %v5_10668, 1
  store i32 %v6_10668, i32* @r3, align 4
  %v0_1066c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_10678.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1066c.pr, label %dec_label_pc_10674, label %.thread

.thread:                                          ; preds = %bb
  %v2_1066c = add i32 %v0_10678.pr.pre, -1
  store i32 %v2_1066c, i32* @r2, align 4
  %v1_10664 = urem i32 %v6_10668, 4
  %v2_10664 = icmp eq i32 %v1_10664, 0
  store i1 %v2_10664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10664, label %dec_label_pc_10674, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_10668.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_10668.pre to i8
  br label %bb

dec_label_pc_10674:                               ; preds = %.thread, %bb, %dec_label_pc_1065c
  %v0_1068028 = phi i32 [ %tmp, %dec_label_pc_1065c ], [ %v6_10668, %bb ], [ %v6_10668, %.thread ]
  %v0_10678.pr = phi i32 [ %v0_10654, %dec_label_pc_1065c ], [ %v0_10678.pr.pre, %bb ], [ %v2_1066c, %.thread ]
  %v0_10674 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_10674, i32* @ip, align 4
  %v8_1067810 = icmp eq i32 %v0_10678.pr, 8
  store i1 %v8_1067810, i1* %cpsr_z.global-to-local, align 1
  %v5_1067c11 = icmp slt i32 %v0_10678.pr, 8
  br i1 %v5_1067c11, label %dec_label_pc_106b8, label %dec_label_pc_10680.preheader

dec_label_pc_10680.preheader:                     ; preds = %dec_label_pc_10674
  %v1_1068046 = inttoptr i32 %v0_1068028 to i32*
  store i32 %v0_10674, i32* %v1_1068046, align 4
  %v3_1068047 = add i32 %v0_1068028, 4
  %v4_1068048 = inttoptr i32 %v3_1068047 to i32*
  %v5_1068049 = load i32, i32* @ip, align 4
  store i32 %v5_1068049, i32* %v4_1068048, align 4
  %v6_1068050 = add i32 %v0_1068028, 8
  store i32 %v6_1068050, i32* @r3, align 4
  %v0_1068451 = load i32, i32* @r2, align 4
  %v1_1068452 = add i32 %v0_1068451, -8
  store i32 %v1_1068452, i32* %r2.global-to-local, align 4
  %v5_1068c53 = icmp slt i32 %v1_1068452, 8
  br i1 %v5_1068c53, label %dec_label_pc_10680.dec_label_pc_106b8.loopexit_crit_edge, label %dec_label_pc_10690

dec_label_pc_10690:                               ; preds = %dec_label_pc_10680.preheader, %dec_label_pc_10678.dec_label_pc_10680_crit_edge
  %v6_1068055 = phi i32 [ %v6_10680, %dec_label_pc_10678.dec_label_pc_10680_crit_edge ], [ %v6_1068050, %dec_label_pc_10680.preheader ]
  %v0_1068054 = phi i32 [ %v12_106ac, %dec_label_pc_10678.dec_label_pc_10680_crit_edge ], [ %v0_1068028, %dec_label_pc_10680.preheader ]
  %v1_10690 = inttoptr i32 %v6_1068055 to i32*
  %v2_10690 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_10690, i32* %v1_10690, align 4
  %v3_10690 = add i32 %v0_1068054, 12
  %v4_10690 = inttoptr i32 %v3_10690 to i32*
  %v5_10690 = load i32, i32* @ip, align 4
  store i32 %v5_10690, i32* %v4_10690, align 4
  %v6_10690 = add i32 %v0_1068054, 16
  store i32 %v6_10690, i32* @r3, align 4
  %v0_10694 = load i32, i32* %r2.global-to-local, align 4
  %v1_10694 = add i32 %v0_10694, -8
  store i32 %v1_10694, i32* %r2.global-to-local, align 4
  %v5_1069c = icmp slt i32 %v1_10694, 8
  br i1 %v5_1069c, label %dec_label_pc_10690.dec_label_pc_106b8.loopexit_crit_edge, label %dec_label_pc_106a0

dec_label_pc_106a0:                               ; preds = %dec_label_pc_10690
  %v1_106a0 = inttoptr i32 %v6_10690 to i32*
  %v2_106a0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_106a0, i32* %v1_106a0, align 4
  %v3_106a0 = add i32 %v0_1068054, 20
  %v4_106a0 = inttoptr i32 %v3_106a0 to i32*
  %v5_106a0 = load i32, i32* @ip, align 4
  store i32 %v5_106a0, i32* %v4_106a0, align 4
  %v6_106a0 = add i32 %v0_1068054, 24
  store i32 %v6_106a0, i32* @r3, align 4
  %v0_106a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_106a4 = add i32 %v0_106a4, -8
  store i32 %v1_106a4, i32* %r2.global-to-local, align 4
  %v5_106ac = icmp slt i32 %v1_106a4, 8
  br i1 %v5_106ac, label %dec_label_pc_106a0.dec_label_pc_106b8.loopexit_crit_edge, label %dec_label_pc_10678

dec_label_pc_10678:                               ; preds = %dec_label_pc_106a0
  %v7_106ac = inttoptr i32 %v6_106a0 to i32*
  %v8_106ac = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_106ac, i32* %v7_106ac, align 4
  %v9_106ac = add i32 %v0_1068054, 28
  %v10_106ac = inttoptr i32 %v9_106ac to i32*
  %v11_106ac = load i32, i32* @ip, align 4
  store i32 %v11_106ac, i32* %v10_106ac, align 4
  %v12_106ac = add i32 %v0_1068054, 32
  store i32 %v12_106ac, i32* @r3, align 4
  %v6_106b0 = load i32, i32* %r2.global-to-local, align 4
  %v7_106b0 = add i32 %v6_106b0, -8
  store i32 %v7_106b0, i32* %r2.global-to-local, align 4
  %v5_1067c = icmp slt i32 %v7_106b0, 8
  br i1 %v5_1067c, label %dec_label_pc_10678.dec_label_pc_106b8.loopexit_crit_edge, label %dec_label_pc_10678.dec_label_pc_10680_crit_edge

dec_label_pc_10678.dec_label_pc_10680_crit_edge:  ; preds = %dec_label_pc_10678
  %v2_10680.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_10680 = inttoptr i32 %v12_106ac to i32*
  store i32 %v2_10680.pre, i32* %v1_10680, align 4
  %v3_10680 = add i32 %v0_1068054, 36
  %v4_10680 = inttoptr i32 %v3_10680 to i32*
  %v5_10680 = load i32, i32* @ip, align 4
  store i32 %v5_10680, i32* %v4_10680, align 4
  %v6_10680 = add i32 %v0_1068054, 40
  store i32 %v6_10680, i32* @r3, align 4
  %v0_10684 = load i32, i32* %r2.global-to-local, align 4
  %v1_10684 = add i32 %v0_10684, -8
  store i32 %v1_10684, i32* %r2.global-to-local, align 4
  %v5_1068c = icmp slt i32 %v1_10684, 8
  br i1 %v5_1068c, label %dec_label_pc_10680.dec_label_pc_106b8.loopexit_crit_edge, label %dec_label_pc_10690

dec_label_pc_10678.dec_label_pc_106b8.loopexit_crit_edge: ; preds = %dec_label_pc_10678
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_106b8

dec_label_pc_10680.dec_label_pc_106b8.loopexit_crit_edge: ; preds = %dec_label_pc_10678.dec_label_pc_10680_crit_edge, %dec_label_pc_10680.preheader
  %v1_10684.lcssa = phi i32 [ %v1_1068452, %dec_label_pc_10680.preheader ], [ %v1_10684, %dec_label_pc_10678.dec_label_pc_10680_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_106b8

dec_label_pc_10690.dec_label_pc_106b8.loopexit_crit_edge: ; preds = %dec_label_pc_10690
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_106b8

dec_label_pc_106a0.dec_label_pc_106b8.loopexit_crit_edge: ; preds = %dec_label_pc_106a0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_106b8

dec_label_pc_106b8:                               ; preds = %dec_label_pc_10674, %dec_label_pc_10678.dec_label_pc_106b8.loopexit_crit_edge, %dec_label_pc_10680.dec_label_pc_106b8.loopexit_crit_edge, %dec_label_pc_10690.dec_label_pc_106b8.loopexit_crit_edge, %dec_label_pc_106a0.dec_label_pc_106b8.loopexit_crit_edge, %dec_label_pc_10650
  %v0_106c0 = phi i32 [ %v0_10654, %dec_label_pc_10650 ], [ %v1_106a4, %dec_label_pc_106a0.dec_label_pc_106b8.loopexit_crit_edge ], [ %v1_10694, %dec_label_pc_10690.dec_label_pc_106b8.loopexit_crit_edge ], [ %v1_10684.lcssa, %dec_label_pc_10680.dec_label_pc_106b8.loopexit_crit_edge ], [ %v7_106b0, %dec_label_pc_10678.dec_label_pc_106b8.loopexit_crit_edge ], [ %v0_10678.pr, %dec_label_pc_10674 ]
  %v2_106b8 = icmp eq i32 %v0_106c0, 0
  store i1 %v2_106b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_106b8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_106b8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_106b8
  %v1_106c0 = sub i32 7, %v0_106c0
  store i32 %v1_106c0, i32* %r2.global-to-local, align 4
  %v3_106c4 = mul i32 %v1_106c0, 4
  %v4_106c4 = add i32 %v3_106c4, ptrtoint (i32* @global_var_106cc.313 to i32)
  call void @__pseudo_branch(i32 %v4_106c4)
  %v0_106cc = load i32, i32* %r1.global-to-local, align 4
  %v1_106cc = trunc i32 %v0_106cc to i8
  %v2_106cc = load i32, i32* @r3, align 4
  %v3_106cc = inttoptr i32 %v2_106cc to i8*
  store i8 %v1_106cc, i8* %v3_106cc, align 1
  %v4_106cc = load i32, i32* @r3, align 4
  %v5_106cc = add i32 %v4_106cc, 1
  store i32 %v5_106cc, i32* %r3.global-to-local, align 4
  %v0_106d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_106d0 = trunc i32 %v0_106d0 to i8
  %v3_106d0 = inttoptr i32 %v5_106cc to i8*
  store i8 %v1_106d0, i8* %v3_106d0, align 1
  %v4_106d0 = load i32, i32* %r3.global-to-local, align 4
  %v5_106d0 = add i32 %v4_106d0, 1
  store i32 %v5_106d0, i32* %r3.global-to-local, align 4
  %v0_106d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_106d4 = trunc i32 %v0_106d4 to i8
  %v3_106d4 = inttoptr i32 %v5_106d0 to i8*
  store i8 %v1_106d4, i8* %v3_106d4, align 1
  %v4_106d4 = load i32, i32* %r3.global-to-local, align 4
  %v5_106d4 = add i32 %v4_106d4, 1
  store i32 %v5_106d4, i32* %r3.global-to-local, align 4
  %v0_106d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_106d8 = trunc i32 %v0_106d8 to i8
  %v3_106d8 = inttoptr i32 %v5_106d4 to i8*
  store i8 %v1_106d8, i8* %v3_106d8, align 1
  %v4_106d8 = load i32, i32* %r3.global-to-local, align 4
  %v5_106d8 = add i32 %v4_106d8, 1
  store i32 %v5_106d8, i32* %r3.global-to-local, align 4
  %v0_106dc = load i32, i32* %r1.global-to-local, align 4
  %v1_106dc = trunc i32 %v0_106dc to i8
  %v3_106dc = inttoptr i32 %v5_106d8 to i8*
  store i8 %v1_106dc, i8* %v3_106dc, align 1
  %v4_106dc = load i32, i32* %r3.global-to-local, align 4
  %v5_106dc = add i32 %v4_106dc, 1
  store i32 %v5_106dc, i32* %r3.global-to-local, align 4
  %v0_106e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_106e0 = trunc i32 %v0_106e0 to i8
  %v3_106e0 = inttoptr i32 %v5_106dc to i8*
  store i8 %v1_106e0, i8* %v3_106e0, align 1
  %v4_106e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_106e0 = add i32 %v4_106e0, 1
  store i32 %v5_106e0, i32* %r3.global-to-local, align 4
  %v0_106e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_106e4 = trunc i32 %v0_106e4 to i8
  %v3_106e4 = inttoptr i32 %v5_106e0 to i8*
  store i8 %v1_106e4, i8* %v3_106e4, align 1
  %v4_106e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_106e4 = add i32 %v4_106e4, 1
  store i32 %v5_106e4, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_10680, { 1, 0 }
  uselistorder i32 %v12_106ac, { 1, 2, 0 }
  uselistorder i32 %v0_1068054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_10678.pr, { 0, 2, 1 }
  uselistorder i32 %v6_10668, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1065c, { 1, 0 }
  uselistorder i32 %v0_10654, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 1, 4, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_106b8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_10690, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_106f0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_106f0:
  %v0_106f0 = call i32 @function_14580()
  ret i32 %v0_106f0
}

define i32 @function_10700() local_unnamed_addr {
dec_label_pc_10700:
  %v0_10700 = call i32 @function_14580()
  ret i32 %v0_10700
}

define i32 @function_10710(i32 %arg1) local_unnamed_addr {
dec_label_pc_10710:
  %stack_var_-12 = alloca i32, align 4
  %v2_10718 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_10718, i32* @r1, align 4
  %v0_1071c = call i32 @function_14dec()
  %v2_10720 = icmp eq i32 %v0_1071c, 0
  %v4_10724 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_10720, i32 -1, i32 %v4_10724
  ret i32 %storemerge
}

define i32 @function_10738(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10738:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10738 = load i32, i32* @r7, align 4
  store i32 %v3_10738, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10760, label %dec_label_pc_10750

dec_label_pc_10750:                               ; preds = %dec_label_pc_10738
  %v0_10750 = call i32 @function_10600()
  %v0_10754 = load i32, i32* %r7.global-to-local, align 4
  %v1_10754 = sub i32 0, %v0_10754
  %v2_10758 = inttoptr i32 %v0_10750 to i32*
  store i32 %v1_10754, i32* %v2_10758, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10764.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10760

dec_label_pc_10760:                               ; preds = %dec_label_pc_10738, %dec_label_pc_10750
  %v2_10764 = phi i32 [ %v3_10738, %dec_label_pc_10738 ], [ %v2_10764.pre, %dec_label_pc_10750 ]
  %v0_10760 = phi i32 [ %arg1, %dec_label_pc_10738 ], [ -1, %dec_label_pc_10750 ]
  store i32 %v2_10764, i32* @r7, align 4
  ret i32 %v0_10760

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10760, { 1, 0 }
}

define i32 @function_10770(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10770:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10770 = load i32, i32* @r7, align 4
  store i32 %v3_10770, i32* %stack_var_-8, align 4
  %v0_1077c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1077c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1077c, -4095
  br i1 %tmp, label %dec_label_pc_1079c, label %dec_label_pc_1078c

dec_label_pc_1078c:                               ; preds = %dec_label_pc_10770
  %v0_1078c = call i32 @function_10600()
  %v0_10790 = load i32, i32* %r7.global-to-local, align 4
  %v1_10790 = sub i32 0, %v0_10790
  %v2_10794 = inttoptr i32 %v0_1078c to i32*
  store i32 %v1_10790, i32* %v2_10794, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1079c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1079c

dec_label_pc_1079c:                               ; preds = %dec_label_pc_10770, %dec_label_pc_1078c
  %v1_107a0 = phi i32 [ %v0_1077c, %dec_label_pc_10770 ], [ -1, %dec_label_pc_1078c ]
  %v2_1079c = phi i32 [ %v3_10770, %dec_label_pc_10770 ], [ %v2_1079c.pre, %dec_label_pc_1078c ]
  store i32 %v2_1079c, i32* @r7, align 4
  ret i32 %v1_107a0

; uselistorder directives
  uselistorder i32 %v0_1077c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1079c, { 1, 0 }
}

define i32 @function_107a8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_107a8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_107a8 = load i32, i32* @r7, align 4
  store i32 %v3_107a8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_107d0, label %dec_label_pc_107c0

dec_label_pc_107c0:                               ; preds = %dec_label_pc_107a8
  %v0_107c0 = call i32 @function_10600()
  %v0_107c4 = load i32, i32* %r7.global-to-local, align 4
  %v1_107c4 = sub i32 0, %v0_107c4
  store i32 %v1_107c4, i32* @r3, align 4
  %v2_107c8 = inttoptr i32 %v0_107c0 to i32*
  store i32 %v1_107c4, i32* %v2_107c8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_107d4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_107d0

dec_label_pc_107d0:                               ; preds = %dec_label_pc_107a8, %dec_label_pc_107c0
  %v2_107d4 = phi i32 [ %v3_107a8, %dec_label_pc_107a8 ], [ %v2_107d4.pre, %dec_label_pc_107c0 ]
  %v0_107d0 = phi i32 [ %arg1, %dec_label_pc_107a8 ], [ -1, %dec_label_pc_107c0 ]
  store i32 %v2_107d4, i32* @r7, align 4
  ret i32 %v0_107d0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_107d0, { 1, 0 }
}

define i32 @function_107e0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_107e0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_107e0 = load i32, i32* @r7, align 4
  store i32 %v3_107e0, i32* %stack_var_-8, align 4
  %v0_107ec = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_107ec, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_107ec, -4095
  br i1 %tmp, label %dec_label_pc_1080c, label %dec_label_pc_107fc

dec_label_pc_107fc:                               ; preds = %dec_label_pc_107e0
  %v0_107fc = call i32 @function_10600()
  %v0_10800 = load i32, i32* %r7.global-to-local, align 4
  %v1_10800 = sub i32 0, %v0_10800
  %v2_10804 = inttoptr i32 %v0_107fc to i32*
  store i32 %v1_10800, i32* %v2_10804, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1080c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1080c

dec_label_pc_1080c:                               ; preds = %dec_label_pc_107e0, %dec_label_pc_107fc
  %v1_10810 = phi i32 [ %v0_107ec, %dec_label_pc_107e0 ], [ -1, %dec_label_pc_107fc ]
  %v2_1080c = phi i32 [ %v3_107e0, %dec_label_pc_107e0 ], [ %v2_1080c.pre, %dec_label_pc_107fc ]
  store i32 %v2_1080c, i32* @r7, align 4
  ret i32 %v1_10810

; uselistorder directives
  uselistorder i32 %v0_107ec, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1080c, { 1, 0 }
}

define i32 @function_10818(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10818:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1084c, label %dec_label_pc_1083c

dec_label_pc_1083c:                               ; preds = %dec_label_pc_10818
  %v0_1083c = call i32 @function_10600()
  %v0_10840 = load i32, i32* %r4.global-to-local, align 4
  %v1_10840 = sub i32 0, %v0_10840
  %v2_10844 = inttoptr i32 %v0_1083c to i32*
  store i32 %v1_10840, i32* %v2_10844, align 4
  br label %dec_label_pc_1084c

dec_label_pc_1084c:                               ; preds = %dec_label_pc_10818, %dec_label_pc_1083c
  %v1_10854 = phi i32 [ %arg1, %dec_label_pc_10818 ], [ -1, %dec_label_pc_1083c ]
  ret i32 %v1_10854

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1084c, { 1, 0 }
}

define i32 @function_1085c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1085c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1085c = load i32, i32* @r7, align 4
  store i32 %v3_1085c, i32* %stack_var_-8, align 4
  %v0_10868 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10868, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10868, -4095
  br i1 %tmp, label %dec_label_pc_10888, label %dec_label_pc_10878

dec_label_pc_10878:                               ; preds = %dec_label_pc_1085c
  %v0_10878 = call i32 @function_10600()
  %v0_1087c = load i32, i32* %r7.global-to-local, align 4
  %v1_1087c = sub i32 0, %v0_1087c
  %v2_10880 = inttoptr i32 %v0_10878 to i32*
  store i32 %v1_1087c, i32* %v2_10880, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10888.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10888

dec_label_pc_10888:                               ; preds = %dec_label_pc_1085c, %dec_label_pc_10878
  %v1_1088c = phi i32 [ %v0_10868, %dec_label_pc_1085c ], [ -1, %dec_label_pc_10878 ]
  %v2_10888 = phi i32 [ %v3_1085c, %dec_label_pc_1085c ], [ %v2_10888.pre, %dec_label_pc_10878 ]
  store i32 %v2_10888, i32* @r7, align 4
  ret i32 %v1_1088c

; uselistorder directives
  uselistorder i32 %v0_10868, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10888, { 1, 0 }
}

define i32 @function_10890(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10890:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10890 = load i32, i32* @r7, align 4
  store i32 %v3_10890, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_108b8, label %dec_label_pc_108a8

dec_label_pc_108a8:                               ; preds = %dec_label_pc_10890
  %v0_108a8 = call i32 @function_10600()
  %v0_108ac = load i32, i32* %r7.global-to-local, align 4
  %v1_108ac = sub i32 0, %v0_108ac
  %v2_108b0 = inttoptr i32 %v0_108a8 to i32*
  store i32 %v1_108ac, i32* %v2_108b0, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_108bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_108b8

dec_label_pc_108b8:                               ; preds = %dec_label_pc_10890, %dec_label_pc_108a8
  %v2_108bc = phi i32 [ %v3_10890, %dec_label_pc_10890 ], [ %v2_108bc.pre, %dec_label_pc_108a8 ]
  %v0_108b8 = phi i32 [ %arg1, %dec_label_pc_10890 ], [ -1, %dec_label_pc_108a8 ]
  store i32 %v2_108bc, i32* @r7, align 4
  ret i32 %v0_108b8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_108b8, { 1, 0 }
}

define i32 @function_108c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_108c8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_108c8 = load i32, i32* @r4, align 4
  store i32 %v3_108c8, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_108f8, label %dec_label_pc_108e8

dec_label_pc_108e8:                               ; preds = %dec_label_pc_108c8
  %v0_108e8 = call i32 @function_10600()
  %v0_108ec = load i32, i32* %r4.global-to-local, align 4
  %v1_108ec = sub i32 0, %v0_108ec
  %v2_108f0 = inttoptr i32 %v0_108e8 to i32*
  store i32 %v1_108ec, i32* %v2_108f0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_108fc.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_108f8

dec_label_pc_108f8:                               ; preds = %dec_label_pc_108c8, %dec_label_pc_108e8
  %v2_108fc = phi i32 [ %v3_108c8, %dec_label_pc_108c8 ], [ %v2_108fc.pre, %dec_label_pc_108e8 ]
  %v0_108f8 = phi i32 [ %arg1, %dec_label_pc_108c8 ], [ -1, %dec_label_pc_108e8 ]
  store i32 %v2_108fc, i32* @r4, align 4
  ret i32 %v0_108f8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_108f8, { 1, 0 }
}

define i32 @function_10904(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10904:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10904 = load i32, i32* @r7, align 4
  store i32 %v3_10904, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1092c, label %dec_label_pc_1091c

dec_label_pc_1091c:                               ; preds = %dec_label_pc_10904
  %v0_1091c = call i32 @function_10600()
  %v0_10920 = load i32, i32* %r7.global-to-local, align 4
  %v1_10920 = sub i32 0, %v0_10920
  store i32 %v1_10920, i32* @r3, align 4
  %v2_10924 = inttoptr i32 %v0_1091c to i32*
  store i32 %v1_10920, i32* %v2_10924, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10930.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1092c

dec_label_pc_1092c:                               ; preds = %dec_label_pc_10904, %dec_label_pc_1091c
  %v2_10930 = phi i32 [ %v3_10904, %dec_label_pc_10904 ], [ %v2_10930.pre, %dec_label_pc_1091c ]
  %v0_1092c = phi i32 [ %arg1, %dec_label_pc_10904 ], [ -1, %dec_label_pc_1091c ]
  store i32 %v2_10930, i32* @r7, align 4
  ret i32 %v0_1092c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1092c, { 1, 0 }
}

define i32 @function_1093c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1093c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1093c = load i32, i32* @r4, align 4
  store i32 %v3_1093c, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1096c, label %dec_label_pc_1095c

dec_label_pc_1095c:                               ; preds = %dec_label_pc_1093c
  %v0_1095c = call i32 @function_10600()
  %v0_10960 = load i32, i32* %r4.global-to-local, align 4
  %v1_10960 = sub i32 0, %v0_10960
  %v2_10964 = inttoptr i32 %v0_1095c to i32*
  store i32 %v1_10960, i32* %v2_10964, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10970.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_1096c

dec_label_pc_1096c:                               ; preds = %dec_label_pc_1093c, %dec_label_pc_1095c
  %v2_10970 = phi i32 [ %v3_1093c, %dec_label_pc_1093c ], [ %v2_10970.pre, %dec_label_pc_1095c ]
  %v0_1096c = phi i32 [ %arg1, %dec_label_pc_1093c ], [ -1, %dec_label_pc_1095c ]
  store i32 %v2_10970, i32* @r4, align 4
  ret i32 %v0_1096c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1096c, { 1, 0 }
}

define i32 @function_1097c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1097c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_109b0, label %dec_label_pc_109a0

dec_label_pc_109a0:                               ; preds = %dec_label_pc_1097c
  %v0_109a0 = call i32 @function_10600()
  %v0_109a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_109a4 = sub i32 0, %v0_109a4
  store i32 %v1_109a4, i32* @r3, align 4
  %v2_109a8 = inttoptr i32 %v0_109a0 to i32*
  store i32 %v1_109a4, i32* %v2_109a8, align 4
  br label %dec_label_pc_109b0

dec_label_pc_109b0:                               ; preds = %dec_label_pc_1097c, %dec_label_pc_109a0
  %v1_109b8 = phi i32 [ %arg1, %dec_label_pc_1097c ], [ -1, %dec_label_pc_109a0 ]
  ret i32 %v1_109b8

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_109b0, { 1, 0 }
}

define i32 @function_109c0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_109c0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_109c0 = load i32, i32* @r7, align 4
  store i32 %v3_109c0, i32* %stack_var_-8, align 4
  %v0_109cc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_109cc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_109cc, -4095
  br i1 %tmp, label %dec_label_pc_109ec, label %dec_label_pc_109dc

dec_label_pc_109dc:                               ; preds = %dec_label_pc_109c0
  %v0_109dc = call i32 @function_10600()
  %v0_109e0 = load i32, i32* %r7.global-to-local, align 4
  %v1_109e0 = sub i32 0, %v0_109e0
  store i32 %v1_109e0, i32* @r3, align 4
  %v2_109e4 = inttoptr i32 %v0_109dc to i32*
  store i32 %v1_109e0, i32* %v2_109e4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_109ec.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_109ec

dec_label_pc_109ec:                               ; preds = %dec_label_pc_109c0, %dec_label_pc_109dc
  %v1_109f0 = phi i32 [ %v0_109cc, %dec_label_pc_109c0 ], [ -1, %dec_label_pc_109dc ]
  %v2_109ec = phi i32 [ %v3_109c0, %dec_label_pc_109c0 ], [ %v2_109ec.pre, %dec_label_pc_109dc ]
  store i32 %v2_109ec, i32* @r7, align 4
  ret i32 %v1_109f0

; uselistorder directives
  uselistorder i32 %v0_109cc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_109ec, { 1, 0 }
}

define i32 @function_109f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_109f8:
  store i32 %arg1, i32* @r0, align 4
  %v3_109f8 = load i32, i32* @r4, align 4
  %v0_10a00 = call i32 @function_fe44()
  %v2_10a08 = call i32 @function_ffa4(i32 %v0_10a00, i32 %arg1)
  store i32 %v3_109f8, i32* @r4, align 4
  ret i32 %v2_10a08

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_ffa4, { 0, 6, 5, 4, 3, 2, 1 }
}

define i32 @function_10a14(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10a14:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_10a2c, label %dec_label_pc_10a24

dec_label_pc_10a24:                               ; preds = %dec_label_pc_10a14
  %v7_10a28 = icmp slt i32 %arg1, 65
  br i1 %v7_10a28, label %dec_label_pc_10a40, label %dec_label_pc_10a2c

dec_label_pc_10a2c:                               ; preds = %dec_label_pc_10a24, %dec_label_pc_10a14
  %v0_10a2c = call i32 @function_10600()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10a38 = inttoptr i32 %v0_10a2c to i32*
  store i32 22, i32* %v2_10a38, align 4
  %v0_10a48.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10a48

dec_label_pc_10a40:                               ; preds = %dec_label_pc_10a24
  %v0_10a40 = call i32 @function_10b48()
  store i32 %v0_10a40, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10a48

dec_label_pc_10a48:                               ; preds = %dec_label_pc_10a2c, %dec_label_pc_10a40
  %v0_10a48 = phi i32 [ %v0_10a48.pre, %dec_label_pc_10a2c ], [ %v0_10a40, %dec_label_pc_10a40 ]
  ret i32 %v0_10a48

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10a48, { 1, 0 }
}

define i32 @function_10a58(i32* %arg1) local_unnamed_addr {
dec_label_pc_10a58:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_10a60 = add i32 %tmp, 4
  %v3_10a60 = inttoptr i32 %v2_10a60 to i32*
  store i32 0, i32* %v3_10a60, align 4
  %v1_10a64 = load i32, i32* %r3.global-to-local, align 4
  %v2_10a64 = inttoptr i32 %v1_10a64 to i32*
  store i32 0, i32* %v2_10a64, align 4
  ret i32 0
}

define i32 @function_10a6c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10a6c:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10a6c = load i32, i32* @r4, align 4
  store i32 %v3_10a6c, i32* %stack_var_-16, align 4
  %v6_10a6c = load i32, i32* @r5, align 4
  %v9_10a6c = load i32, i32* @r6, align 4
  %v7_10a74 = icmp eq i32 %arg2, -1
  br i1 %v7_10a74, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_10a6c
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_10a6c
  %v2_10a7c = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_10a98

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10aa0

dec_label_pc_10a98:                               ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 121092, i32* @r6, align 4
  %v7_10a9c = icmp slt i32 %arg1, 65
  br i1 %v7_10a9c, label %dec_label_pc_10ab4, label %dec_label_pc_10aa0

dec_label_pc_10aa0:                               ; preds = %.thread16, %dec_label_pc_10a98
  %v0_10aa0 = call i32 @function_10600()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10aac = inttoptr i32 %v0_10aa0 to i32*
  store i32 22, i32* %v2_10aac, align 4
  %v0_10b0c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_10ab4:                               ; preds = %dec_label_pc_10a98
  %v2_10ab4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10ab4, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_10abc = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_10abc, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_10acc = call i32 @function_10b48()
  %v0_10ad4 = load i32, i32* @r5, align 4
  %v0_10ad8 = load i32, i32* @r6, align 4
  %v2_10ad8 = add i32 %v0_10ad8, 9068
  %v2_10adc = call i32 @function_10b24(i32 %v2_10ad8, i32 %v0_10ad4)
  store i32 %v2_10a7c, i32* %r2.global-to-local, align 4
  %v0_10af4 = load i32, i32* @r5, align 4
  %v3_10afc = call i32 @function_12d5c(i32 %v0_10af4, i32 %v2_10ab4, i32 %v2_10a7c)
  %v1_10b00 = icmp slt i32 %v3_10afc, 0
  br i1 %v1_10b00, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_10ab4
  %v5_10b04 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_10b04, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_10ab4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_10aa0, %bb32
  %v0_10b0c = phi i32 [ %v5_10b04, %bb31 ], [ %v0_10b0c.pre, %dec_label_pc_10aa0 ], [ -1, %bb32 ]
  %v2_10b14 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10b14, i32* @r4, align 4
  store i32 %v6_10a6c, i32* @r5, align 4
  store i32 %v9_10a6c, i32* @r6, align 4
  ret i32 %v0_10b0c

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 ()* @function_10b48, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 3, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10aa0, { 1, 0 }
}

define i32 @function_10b24(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10b24:
  %v1_10b24 = add i32 %arg2, -1
  %v3_10b28 = udiv i32 %v1_10b24, 32
  %v4_10b2c = mul nuw nsw i32 %v3_10b28, 4
  %v5_10b2c = add i32 %v4_10b2c, %arg1
  %v6_10b2c = inttoptr i32 %v5_10b2c to i32*
  %v7_10b2c = load i32, i32* %v6_10b2c, align 4
  %v1_10b30 = urem i32 %v1_10b24, 32
  %v7_10b38 = shl i32 1, %v1_10b30
  %v8_10b38 = and i32 %v7_10b2c, %v7_10b38
  %v10_10b38 = icmp ne i32 %v8_10b38, 0
  %. = zext i1 %v10_10b38 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_10b24, { 1, 0 }
}

define i32 @function_10b48() local_unnamed_addr {
dec_label_pc_10b48:
  %v0_10b48 = load i32, i32* @r1, align 4
  %v1_10b48 = add i32 %v0_10b48, -1
  %v3_10b4c = udiv i32 %v1_10b48, 32
  %v0_10b50 = load i32, i32* @r0, align 4
  %v4_10b50 = mul nuw nsw i32 %v3_10b4c, 4
  %v5_10b50 = add i32 %v0_10b50, %v4_10b50
  %v6_10b50 = inttoptr i32 %v5_10b50 to i32*
  %v7_10b50 = load i32, i32* %v6_10b50, align 4
  %v1_10b54 = urem i32 %v1_10b48, 32
  %v7_10b5c = shl i32 1, %v1_10b54
  %v8_10b5c = or i32 %v7_10b50, %v7_10b5c
  store i32 %v8_10b5c, i32* %v6_10b50, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10b48, { 1, 0 }
}

define i32 @function_10b6c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10b6c:
  %v1_10b6c = add i32 %arg2, -1
  %v3_10b70 = udiv i32 %v1_10b6c, 32
  %v4_10b74 = mul nuw nsw i32 %v3_10b70, 4
  %v5_10b74 = add i32 %v4_10b74, %arg1
  %v6_10b74 = inttoptr i32 %v5_10b74 to i32*
  %v7_10b74 = load i32, i32* %v6_10b74, align 4
  %v1_10b78 = urem i32 %v1_10b6c, 32
  %tmp = shl i32 -1, %v1_10b78
  %v8_10b80 = add i32 %tmp, -1
  %v9_10b80 = and i32 %v7_10b74, %v8_10b80
  store i32 %v9_10b80, i32* %v6_10b74, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10b6c, { 1, 0 }
}

define i32 @function_10b90(i32 %arg1) local_unnamed_addr {
dec_label_pc_10b90:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_10b90 = udiv i32 %arg1, 256
  store i32 %v3_10b90, i32* %r1.global-to-local, align 4
  %v2_10b94 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_10b94, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10b90
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10b90, %bb
  %v0_10ba0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10b94, i32 %v0_10ba0)
  %v0_10ba4 = load i32, i32* %r1.global-to-local, align 4
  %v1_10ba4 = add i32 %v0_10ba4, 1048320
  %v3_10ba8 = udiv i32 %v1_10ba4, 65536
  %v1_10bac = and i32 %v3_10ba8, 8
  %v6_10bb0 = shl i32 %v0_10ba4, %v1_10bac
  %v1_10bb4 = add i32 %v6_10bb0, 520192
  %v3_10bb8 = udiv i32 %v1_10bb4, 65536
  %v1_10bbc = and i32 %v3_10bb8, 4
  %v6_10bc0 = shl i32 %v6_10bb0, %v1_10bbc
  %v1_10bc4 = add i32 %v6_10bc0, 245760
  %v3_10bc8 = udiv i32 %v1_10bc4, 65536
  %v1_10bcc = and i32 %v3_10bc8, 2
  %v6_10bd0 = shl i32 %v6_10bc0, %v1_10bcc
  store i32 %v6_10bd0, i32* %r1.global-to-local, align 4
  %v1_10bd4 = sub nsw i32 13, %v1_10bac
  %v2_10bd8 = sub nsw i32 %v1_10bd4, %v1_10bbc
  %v3_10bdc = udiv i32 %v6_10bd0, 32768
  %v4_10bdc = sub nuw nsw i32 -1, %v3_10bdc
  %v4_10be0 = udiv i32 %v6_10bd0, 16384
  %v5_10be0 = and i32 %v4_10be0, %v4_10bdc
  %v2_10be4 = sub nsw i32 %v2_10bd8, %v1_10bcc
  %v2_10be8 = add nsw i32 %v2_10be4, %v5_10be0
  %v1_10bec = add nsw i32 %v2_10be8, 6
  %v0_10bf0 = load i32, i32* %ip.global-to-local, align 4
  %v6_10bf0 = lshr i32 %v0_10bf0, %v1_10bec
  %v3_10bf4 = mul nsw i32 %v2_10be8, 4
  %v1_10bf8 = add nsw i32 %v3_10bf4, 32
  %v1_10bfc = urem i32 %v6_10bf0, 4
  %v2_10c00 = or i32 %v1_10bfc, %v1_10bf8
  ret i32 %v2_10c00

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_10c08() local_unnamed_addr {
dec_label_pc_10c08:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_10c08 = load i32, i32* @r4, align 4
  %v6_10c08 = load i32, i32* @r5, align 4
  %v9_10c08 = load i32, i32* @r6, align 4
  %v12_10c08 = load i32, i32* @r7, align 4
  %v15_10c08 = load i32, i32* @r8, align 4
  %v18_10c08 = load i32, i32* @sb, align 4
  %v21_10c08 = load i32, i32* @sl, align 4
  %v24_10c08 = load i32, i32* @fp, align 4
  %v27_10c08 = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r1.global-to-local, align 4
  %v4_10c1c = load i32, i32* inttoptr (i32 121160 to i32*), align 8
  store i32 %v4_10c1c, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_10c28 = load i32, i32* inttoptr (i32 121128 to i32*), align 8
  store i32 %v4_10c28, i32* %r1.global-to-local, align 4
  %v0_10c2c = load i32, i32* @r0, align 4
  store i32 %v0_10c2c, i32* @r5, align 4
  store i32 %v4_10c1c, i32* %r2.global-to-local, align 4
  %v2_10c34 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_10c34, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %ip.global-to-local, align 4
  %v4_10c40 = load i32, i32* inttoptr (i32 121164 to i32*), align 4
  store i32 %v4_10c40, i32* %ip.global-to-local, align 4
  store i32 68684, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_10c40)
  %v0_10c4c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10c4c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r1.global-to-local, align 4
  %v4_10c58 = load i32, i32* inttoptr (i32 121108 to i32*), align 4
  store i32 %v4_10c58, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_10c64.331 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10c58)
  %v0_10c64 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_10c64, -32
  br i1 %tmp, label %dec_label_pc_10c80, label %dec_label_pc_10c6c

dec_label_pc_10c6c:                               ; preds = %dec_label_pc_10c08
  %v0_10c6c = call i32 @function_10600()
  store i32 %v0_10c6c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_10c78 = inttoptr i32 %v0_10c6c to i32*
  store i32 12, i32* %v2_10c78, align 4
  br label %dec_label_pc_114fc

dec_label_pc_10c80:                               ; preds = %dec_label_pc_10c08
  %v1_10c80 = add i32 %v0_10c64, 11
  store i32 %v1_10c80, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r2.global-to-local, align 4
  %v2_10c8c = icmp ugt i32 %v1_10c80, 14
  %v7_10c8c = icmp eq i32 %v1_10c80, 15
  %v2_10c90 = xor i1 %v7_10c8c, true
  %v3_10c90 = and i1 %v2_10c8c, %v2_10c90
  br i1 %v3_10c90, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_10c80
  %v5_10c90 = and i32 %v1_10c80, -8
  store i32 %v5_10c90, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_10c80, %bb
  %v4_10c94 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_10c94, i32* @r0, align 4
  %v1_10c98 = inttoptr i32 %v4_10c94 to i32*
  %v2_10c98 = load i32, i32* %v1_10c98, align 4
  store i32 %v2_10c98, i32* @r4, align 4
  %v2_10c9c = xor i1 %v2_10c8c, true
  %v3_10c9c = or i1 %v7_10c8c, %v2_10c9c
  br i1 %v3_10c9c, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_10ca0 = urem i32 %v2_10c98, 2
  %v2_10ca0 = icmp eq i32 %v1_10ca0, 0
  br i1 %v2_10ca0, label %dec_label_pc_10ca8, label %dec_label_pc_10cb8

dec_label_pc_10ca8:                               ; preds = %bb140
  %v2_10ca8 = icmp eq i32 %v2_10c98, 0
  br i1 %v2_10ca8, label %dec_label_pc_10cb0, label %dec_label_pc_11094

dec_label_pc_10cb0:                               ; preds = %dec_label_pc_10ca8
  %v0_10cb0 = call i32 @function_11ac0()
  store i32 %v0_10cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11094

dec_label_pc_10cb8:                               ; preds = %bb140
  %v0_10cb8 = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_10cb8, %v2_10c98
  br i1 %tmp201, label %dec_label_pc_10ce0, label %dec_label_pc_10cc0

dec_label_pc_10cc0:                               ; preds = %dec_label_pc_10cb8
  %v1_10cc0 = add i32 %v4_10c94, -4
  store i32 %v1_10cc0, i32* %r1.global-to-local, align 4
  %v3_10cc4 = udiv i32 %v0_10cb8, 8
  store i32 %v3_10cc4, i32* %r2.global-to-local, align 4
  %v4_10cc8 = mul nuw i32 %v3_10cc4, 4
  %v5_10cc8 = add i32 %v4_10cc8, %v1_10cc0
  %v6_10cc8 = inttoptr i32 %v5_10cc8 to i32*
  %v7_10cc8 = load i32, i32* %v6_10cc8, align 4
  store i32 %v7_10cc8, i32* %r0.global-to-local, align 4
  %v2_10ccc = icmp eq i32 %v7_10cc8, 0
  br i1 %v2_10ccc, label %dec_label_pc_10ce0, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_10cc0
  %v2_10cd0 = add i32 %v7_10cc8, 8
  %v3_10cd0 = inttoptr i32 %v2_10cd0 to i32*
  %v4_10cd0 = load i32, i32* %v3_10cd0, align 4
  store i32 %v4_10cd0, i32* %r3.global-to-local, align 4
  store i32 %v2_10cd0, i32* %r0.global-to-local, align 4
  store i32 %v2_10cd0, i32* %r4.global-to-local, align 4
  store i32 %v4_10cd0, i32* %v6_10cc8, align 4
  br label %dec_label_pc_114e0

dec_label_pc_10ce0:                               ; preds = %dec_label_pc_10cc0, %dec_label_pc_10cb8
  %tmp202 = icmp ugt i32 %v0_10cb8, 255
  br i1 %tmp202, label %dec_label_pc_10d30, label %dec_label_pc_10ce8

dec_label_pc_10ce8:                               ; preds = %dec_label_pc_10ce0
  store i32 121092, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_10cf0 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  %v3_10cf4 = udiv i32 %v0_10cb8, 8
  store i32 %v3_10cf4, i32* @r7, align 4
  %v4_10cf8 = mul nuw i32 %v3_10cf4, 8
  %v5_10cf8 = add i32 %v4_10cf0, %v4_10cf8
  store i32 %v5_10cf8, i32* %r3.global-to-local, align 4
  %v1_10cfc = add i32 %v5_10cf8, 44
  store i32 %v1_10cfc, i32* %ip.global-to-local, align 4
  %v1_10d00 = add i32 %v5_10cf8, 56
  %v2_10d00 = inttoptr i32 %v1_10d00 to i32*
  %v3_10d00 = load i32, i32* %v2_10d00, align 4
  store i32 %v3_10d00, i32* %r0.global-to-local, align 4
  %v9_10d04 = icmp eq i32 %v3_10d00, %v1_10cfc
  br i1 %v9_10d04, label %dec_label_pc_10e90, label %dec_label_pc_10d0c

dec_label_pc_10d0c:                               ; preds = %dec_label_pc_10ce8
  %v2_10d0c = add i32 %v3_10d00, %v0_10cb8
  store i32 %v2_10d0c, i32* %r3.global-to-local, align 4
  %v1_10d10 = add i32 %v2_10d0c, 4
  %v2_10d10 = inttoptr i32 %v1_10d10 to i32*
  %v3_10d10 = load i32, i32* %v2_10d10, align 4
  store i32 %v3_10d10, i32* %r2.global-to-local, align 4
  %v1_10d14 = add i32 %v3_10d00, 12
  %v2_10d14 = inttoptr i32 %v1_10d14 to i32*
  %v3_10d14 = load i32, i32* %v2_10d14, align 4
  store i32 %v3_10d14, i32* %r1.global-to-local, align 4
  %v1_10d18 = or i32 %v3_10d10, 1
  store i32 %v1_10d18, i32* %r2.global-to-local, align 4
  %v1_10d1c = add i32 %v3_10d00, 8
  store i32 %v1_10d1c, i32* %r4.global-to-local, align 4
  store i32 %v1_10d18, i32* %v2_10d10, align 4
  %v0_10d24 = load i32, i32* %ip.global-to-local, align 4
  %v1_10d24 = load i32, i32* %r1.global-to-local, align 4
  %v2_10d24 = add i32 %v1_10d24, 8
  %v3_10d24 = inttoptr i32 %v2_10d24 to i32*
  store i32 %v0_10d24, i32* %v3_10d24, align 4
  %v0_10d28 = load i32, i32* %r1.global-to-local, align 4
  %v1_10d28 = load i32, i32* %ip.global-to-local, align 4
  %v2_10d28 = add i32 %v1_10d28, 12
  %v3_10d28 = inttoptr i32 %v2_10d28 to i32*
  store i32 %v0_10d28, i32* %v3_10d28, align 4
  br label %dec_label_pc_114e0

dec_label_pc_10d30:                               ; preds = %dec_label_pc_10ce0
  store i32 %v0_10cb8, i32* %r0.global-to-local, align 4
  %v1_10d34 = call i32 @function_10b90(i32 %v0_10cb8)
  store i32 %v1_10d34, i32* %r0.global-to-local, align 4
  %v0_10d38 = load i32, i32* @r4, align 4
  %v1_10d38 = and i32 %v0_10d38, 2
  %v2_10d38 = icmp eq i32 %v1_10d38, 0
  store i32 %v1_10d34, i32* @r7, align 4
  br i1 %v2_10d38, label %dec_label_pc_10e90, label %dec_label_pc_10d44

dec_label_pc_10d44:                               ; preds = %dec_label_pc_10d30
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r1.global-to-local, align 4
  %v4_10d4c = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_10d4c, i32* @r0, align 4
  %v0_10d50 = call i32 @function_11ac0()
  store i32 %v0_10d50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10e90

dec_label_pc_10d58:                               ; preds = %dec_label_pc_10ea4
  %v1_10d58 = add i32 %v3_10ea4, 4
  %v2_10d58 = inttoptr i32 %v1_10d58 to i32*
  %v3_10d58 = load i32, i32* %v2_10d58, align 4
  store i32 %v3_10d58, i32* %r3.global-to-local, align 4
  %v0_10d5c = load i32, i32* @sl, align 4
  %v1_10d60 = and i32 %v3_10d58, -4
  store i32 %v1_10d60, i32* %r4.global-to-local, align 4
  %v1_10d64 = add i32 %v3_10ea4, 12
  %v2_10d64 = inttoptr i32 %v1_10d64 to i32*
  %v3_10d64 = load i32, i32* %v2_10d64, align 4
  store i32 %v3_10d64, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_10d5c, 255
  br i1 %tmp203, label %dec_label_pc_10dc0, label %dec_label_pc_10d6c

dec_label_pc_10d6c:                               ; preds = %dec_label_pc_10d58
  %v9_10d6c = icmp eq i32 %v3_10d64, %v0_10dc4
  br i1 %v9_10d6c, label %dec_label_pc_10d74, label %dec_label_pc_10dc0

dec_label_pc_10d74:                               ; preds = %dec_label_pc_10d6c
  %v0_10d74 = load i32, i32* @sb, align 4
  %v1_10d74 = add i32 %v0_10d74, 48
  %v2_10d74 = inttoptr i32 %v1_10d74 to i32*
  %v3_10d74 = load i32, i32* %v2_10d74, align 4
  store i32 %v3_10d74, i32* %r3.global-to-local, align 4
  %v9_10d78 = icmp eq i32 %v3_10ea4, %v3_10d74
  br i1 %v9_10d78, label %dec_label_pc_10d80, label %dec_label_pc_10dc0

dec_label_pc_10d80:                               ; preds = %dec_label_pc_10d74
  %v1_10d80 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_10d60, %v1_10d80
  br i1 %tmp204, label %dec_label_pc_10d88, label %dec_label_pc_10dc0

dec_label_pc_10d88:                               ; preds = %dec_label_pc_10d80
  %v2_10d88 = sub i32 %v1_10d60, %v0_10d5c
  store i32 %v2_10d88, i32* %r2.global-to-local, align 4
  %v2_10d8c = add i32 %v0_10d5c, %v3_10ea4
  store i32 %v2_10d8c, i32* %r3.global-to-local, align 4
  %v1_10d90 = or i32 %v0_10d5c, 1
  store i32 %v1_10d90, i32* %r0.global-to-local, align 4
  %v1_10d94 = or i32 %v2_10d88, 1
  store i32 %v1_10d94, i32* %r1.global-to-local, align 4
  %v1_10d98 = add i32 %v3_10ea4, 8
  store i32 %v1_10d98, i32* %r4.global-to-local, align 4
  %v2_10d9c = add i32 %v0_10dc4, 8
  %v3_10d9c = inttoptr i32 %v2_10d9c to i32*
  store i32 %v2_10d8c, i32* %v3_10d9c, align 4
  %v0_10da0 = load i32, i32* %r3.global-to-local, align 4
  %v1_10da0 = load i32, i32* %ip.global-to-local, align 4
  %v2_10da0 = add i32 %v1_10da0, 12
  %v3_10da0 = inttoptr i32 %v2_10da0 to i32*
  store i32 %v0_10da0, i32* %v3_10da0, align 4
  %v0_10da4 = load i32, i32* %r0.global-to-local, align 4
  %v1_10da4 = load i32, i32* @r6, align 4
  %v2_10da4 = add i32 %v1_10da4, 4
  %v3_10da4 = inttoptr i32 %v2_10da4 to i32*
  store i32 %v0_10da4, i32* %v3_10da4, align 4
  %v0_10da8 = load i32, i32* %r3.global-to-local, align 4
  %v1_10da8 = load i32, i32* @sb, align 4
  %v2_10da8 = add i32 %v1_10da8, 48
  %v3_10da8 = inttoptr i32 %v2_10da8 to i32*
  store i32 %v0_10da8, i32* %v3_10da8, align 4
  %v0_10dac = load i32, i32* %r2.global-to-local, align 4
  %v1_10dac = load i32, i32* %r3.global-to-local, align 4
  %v3_10dac = add i32 %v1_10dac, %v0_10dac
  %v4_10dac = inttoptr i32 %v3_10dac to i32*
  store i32 %v0_10dac, i32* %v4_10dac, align 4
  %v0_10db0 = load i32, i32* %r1.global-to-local, align 4
  %v1_10db0 = load i32, i32* %r3.global-to-local, align 4
  %v2_10db0 = add i32 %v1_10db0, 4
  %v3_10db0 = inttoptr i32 %v2_10db0 to i32*
  store i32 %v0_10db0, i32* %v3_10db0, align 4
  %v0_10db4 = load i32, i32* %ip.global-to-local, align 4
  %v1_10db4 = load i32, i32* %r3.global-to-local, align 4
  %v2_10db4 = add i32 %v1_10db4, 12
  %v3_10db4 = inttoptr i32 %v2_10db4 to i32*
  store i32 %v0_10db4, i32* %v3_10db4, align 4
  %v0_10db8 = load i32, i32* %ip.global-to-local, align 4
  %v1_10db8 = load i32, i32* %r3.global-to-local, align 4
  %v2_10db8 = add i32 %v1_10db8, 8
  %v3_10db8 = inttoptr i32 %v2_10db8 to i32*
  store i32 %v0_10db8, i32* %v3_10db8, align 4
  br label %dec_label_pc_114e0

dec_label_pc_10dc0:                               ; preds = %dec_label_pc_10d80, %dec_label_pc_10d74, %dec_label_pc_10d6c, %dec_label_pc_10d58
  %v9_10dc0 = icmp eq i32 %v1_10d60, %v0_10d5c
  %v2_10dc4 = add i32 %v3_10d64, 8
  %v3_10dc4 = inttoptr i32 %v2_10dc4 to i32*
  store i32 %v0_10dc4, i32* %v3_10dc4, align 4
  %v0_10dc8 = load i32, i32* %ip.global-to-local, align 4
  %v1_10dc8 = load i32, i32* %r5.global-to-local, align 4
  %v2_10dc8 = add i32 %v1_10dc8, 12
  %v3_10dc8 = inttoptr i32 %v2_10dc8 to i32*
  store i32 %v0_10dc8, i32* %v3_10dc8, align 4
  br i1 %v9_10dc0, label %dec_label_pc_10f20.loopexit, label %dec_label_pc_10ddc

dec_label_pc_10ddc:                               ; preds = %dec_label_pc_10dc0
  %v0_10ddc = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_10ddc, 255
  br i1 %tmp205, label %dec_label_pc_10e00, label %dec_label_pc_10de4

dec_label_pc_10de4:                               ; preds = %dec_label_pc_10ddc
  store i32 121092, i32* %r2.global-to-local, align 4
  %v1_10de8 = load i32, i32* %r8.global-to-local, align 4
  %v2_10de8 = add i32 %v1_10de8, 121092
  %v3_10de8 = inttoptr i32 %v2_10de8 to i32*
  %v4_10de8 = load i32, i32* %v3_10de8, align 4
  %v3_10dec = udiv i32 %v0_10ddc, 8
  store i32 %v3_10dec, i32* %r0.global-to-local, align 4
  %v4_10df0 = mul nuw i32 %v3_10dec, 8
  %v5_10df0 = add i32 %v4_10de8, %v4_10df0
  store i32 %v5_10df0, i32* %r3.global-to-local, align 4
  %v1_10df4 = add i32 %v5_10df0, 44
  store i32 %v1_10df4, i32* %ip.global-to-local, align 4
  %v1_10df8 = add i32 %v5_10df0, 52
  %v2_10df8 = inttoptr i32 %v1_10df8 to i32*
  %v3_10df8 = load i32, i32* %v2_10df8, align 4
  store i32 %v3_10df8, i32* @lr, align 4
  br label %dec_label_pc_10e58

dec_label_pc_10e00:                               ; preds = %dec_label_pc_10ddc
  store i32 %v0_10ddc, i32* %r0.global-to-local, align 4
  %v1_10e04 = call i32 @function_10b90(i32 %v0_10ddc)
  store i32 %v1_10e04, i32* %r0.global-to-local, align 4
  store i32 121092, i32* %ip.global-to-local, align 4
  %v1_10e0c = load i32, i32* %r8.global-to-local, align 4
  %v2_10e0c = add i32 %v1_10e0c, 121092
  %v3_10e0c = inttoptr i32 %v2_10e0c to i32*
  %v4_10e0c = load i32, i32* %v3_10e0c, align 4
  %v4_10e10 = mul i32 %v1_10e04, 8
  %v5_10e10 = add i32 %v4_10e0c, %v4_10e10
  store i32 %v5_10e10, i32* %r3.global-to-local, align 4
  %v1_10e14 = add i32 %v5_10e10, 44
  store i32 %v1_10e14, i32* %ip.global-to-local, align 4
  %v1_10e18 = add i32 %v5_10e10, 52
  %v2_10e18 = inttoptr i32 %v1_10e18 to i32*
  %v3_10e18 = load i32, i32* %v2_10e18, align 4
  store i32 %v3_10e18, i32* @lr, align 4
  %v9_10e1c = icmp eq i32 %v3_10e18, %v1_10e14
  br i1 %v9_10e1c, label %dec_label_pc_10e58, label %dec_label_pc_10e24

dec_label_pc_10e24:                               ; preds = %dec_label_pc_10e00
  %v1_10e24 = add i32 %v5_10e10, 56
  %v2_10e24 = inttoptr i32 %v1_10e24 to i32*
  %v3_10e24 = load i32, i32* %v2_10e24, align 4
  store i32 %v3_10e24, i32* %r1.global-to-local, align 4
  %v1_10e28 = add i32 %v3_10e24, 4
  %v2_10e28 = inttoptr i32 %v1_10e28 to i32*
  %v3_10e28 = load i32, i32* %v2_10e28, align 4
  store i32 %v3_10e28, i32* %r3.global-to-local, align 4
  %v0_10e2c = load i32, i32* %r4.global-to-local, align 4
  %v3_10e2c = icmp ult i32 %v0_10e2c, %v3_10e28
  br i1 %v3_10e2c, label %.thread, label %dec_label_pc_10e48.preheader

.thread:                                          ; preds = %dec_label_pc_10e24
  store i32 %v1_10e14, i32* @lr, align 4
  store i32 %v3_10e24, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10e58

dec_label_pc_10e48.preheader:                     ; preds = %dec_label_pc_10e24
  %v2_10e34 = or i32 %v0_10e2c, 1
  store i32 %v2_10e34, i32* %r2.global-to-local, align 4
  %v1_10e48179 = add i32 %v3_10e18, 4
  %v2_10e48180 = inttoptr i32 %v1_10e48179 to i32*
  %v3_10e48181 = load i32, i32* %v2_10e48180, align 4
  store i32 %v3_10e48181, i32* %r3.global-to-local, align 4
  %v3_10e4c183 = icmp ult i32 %v2_10e34, %v3_10e48181
  br i1 %v3_10e4c183, label %dec_label_pc_10e44, label %dec_label_pc_10e54

dec_label_pc_10e44:                               ; preds = %dec_label_pc_10e48.preheader, %dec_label_pc_10e44
  %v0_10e54184 = phi i32 [ %v3_10e44, %dec_label_pc_10e44 ], [ %v3_10e18, %dec_label_pc_10e48.preheader ]
  %v1_10e44 = add i32 %v0_10e54184, 8
  %v2_10e44 = inttoptr i32 %v1_10e44 to i32*
  %v3_10e44 = load i32, i32* %v2_10e44, align 4
  store i32 %v3_10e44, i32* @lr, align 4
  %v1_10e48 = add i32 %v3_10e44, 4
  %v2_10e48 = inttoptr i32 %v1_10e48 to i32*
  %v3_10e48 = load i32, i32* %v2_10e48, align 4
  store i32 %v3_10e48, i32* %r3.global-to-local, align 4
  %v3_10e4c = icmp ult i32 %v2_10e34, %v3_10e48
  br i1 %v3_10e4c, label %dec_label_pc_10e44, label %dec_label_pc_10e54

dec_label_pc_10e54:                               ; preds = %dec_label_pc_10e44, %dec_label_pc_10e48.preheader
  %v0_10e54.lcssa = phi i32 [ %v3_10e18, %dec_label_pc_10e48.preheader ], [ %v3_10e44, %dec_label_pc_10e44 ]
  %v1_10e54 = add i32 %v0_10e54.lcssa, 12
  %v2_10e54 = inttoptr i32 %v1_10e54 to i32*
  %v3_10e54 = load i32, i32* %v2_10e54, align 4
  store i32 %v3_10e54, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10e58

dec_label_pc_10e58:                               ; preds = %.thread, %dec_label_pc_10e00, %dec_label_pc_10de4, %dec_label_pc_10e54
  %v0_10e78 = phi i32 [ %v1_10e14, %dec_label_pc_10e00 ], [ %v1_10df4, %dec_label_pc_10de4 ], [ %v3_10e54, %dec_label_pc_10e54 ], [ %v3_10e24, %.thread ]
  %v0_10e6c = phi i32 [ %v1_10e04, %dec_label_pc_10e00 ], [ %v3_10dec, %dec_label_pc_10de4 ], [ %v1_10e04, %dec_label_pc_10e54 ], [ %v1_10e04, %.thread ]
  %v1_10e5c = phi i32 [ %v1_10e0c, %dec_label_pc_10e00 ], [ %v1_10de8, %dec_label_pc_10de4 ], [ %v1_10e0c, %dec_label_pc_10e54 ], [ %v1_10e0c, %.thread ]
  store i32 121092, i32* %r2.global-to-local, align 4
  %v2_10e5c = add i32 %v1_10e5c, 121092
  %v3_10e5c = inttoptr i32 %v2_10e5c to i32*
  %v4_10e5c = load i32, i32* %v3_10e5c, align 4
  %v3_10e60 = sdiv i32 %v0_10e6c, 32
  store i32 %v3_10e60, i32* %r3.global-to-local, align 4
  %v4_10e64 = mul nsw i32 %v3_10e60, 4
  %v5_10e64 = add i32 %v4_10e5c, %v4_10e64
  store i32 %v5_10e64, i32* %r1.global-to-local, align 4
  %v1_10e68 = add i32 %v5_10e64, 820
  %v2_10e68 = inttoptr i32 %v1_10e68 to i32*
  %v3_10e68 = load i32, i32* %v2_10e68, align 4
  %v1_10e6c = urem i32 %v0_10e6c, 32
  store i32 %v1_10e6c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_10e74 = shl i32 1, %v1_10e6c
  %v8_10e74 = or i32 %v3_10e68, %v7_10e74
  store i32 %v8_10e74, i32* %r3.global-to-local, align 4
  %v1_10e78 = load i32, i32* @r6, align 4
  %v2_10e78 = add i32 %v1_10e78, 12
  %v3_10e78 = inttoptr i32 %v2_10e78 to i32*
  store i32 %v0_10e78, i32* %v3_10e78, align 4
  %v0_10e7c = load i32, i32* @lr, align 4
  %v1_10e7c = load i32, i32* @r6, align 4
  %v2_10e7c = add i32 %v1_10e7c, 8
  %v3_10e7c = inttoptr i32 %v2_10e7c to i32*
  store i32 %v0_10e7c, i32* %v3_10e7c, align 4
  %v0_10e80 = load i32, i32* %r3.global-to-local, align 4
  %v1_10e80 = load i32, i32* %r1.global-to-local, align 4
  %v2_10e80 = add i32 %v1_10e80, 820
  %v3_10e80 = inttoptr i32 %v2_10e80 to i32*
  store i32 %v0_10e80, i32* %v3_10e80, align 4
  %v0_10e84 = load i32, i32* @r6, align 4
  %v1_10e84 = load i32, i32* @lr, align 4
  %v2_10e84 = add i32 %v1_10e84, 12
  %v3_10e84 = inttoptr i32 %v2_10e84 to i32*
  store i32 %v0_10e84, i32* %v3_10e84, align 4
  %v0_10e88 = load i32, i32* @r6, align 4
  %v1_10e88 = load i32, i32* %ip.global-to-local, align 4
  %v2_10e88 = add i32 %v1_10e88, 8
  %v3_10e88 = inttoptr i32 %v2_10e88 to i32*
  store i32 %v0_10e88, i32* %v3_10e88, align 4
  %v0_10ea4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_10e90:                               ; preds = %dec_label_pc_10d30, %dec_label_pc_10ce8, %dec_label_pc_10d44
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 121092, i32* %r1.global-to-local, align 4
  %v4_10e98 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_10e98, i32* @sb, align 4
  %v0_10e9c = load i32, i32* @sl, align 4
  %v1_10e9c = add i32 %v0_10e9c, 16
  store i32 %v1_10e9c, i32* @fp, align 4
  %v1_10ea0 = add i32 %v4_10e98, 52
  store i32 %v1_10ea0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_10ea4:                               ; preds = %dec_label_pc_10e58, %dec_label_pc_10e90
  %v0_10dc4 = phi i32 [ %v0_10ea4.pre, %dec_label_pc_10e58 ], [ %v1_10ea0, %dec_label_pc_10e90 ]
  %v1_10ea4 = add i32 %v0_10dc4, 12
  %v2_10ea4 = inttoptr i32 %v1_10ea4 to i32*
  %v3_10ea4 = load i32, i32* %v2_10ea4, align 4
  store i32 %v3_10ea4, i32* @r6, align 4
  %v9_10ea8 = icmp eq i32 %v3_10ea4, %v0_10dc4
  br i1 %v9_10ea8, label %dec_label_pc_10eb0, label %dec_label_pc_10d58

dec_label_pc_10eb0:                               ; preds = %dec_label_pc_10ea4
  %v0_10eb0 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_10eb0, 256
  %v0_10f68.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_10eb0.dec_label_pc_10f68_crit_edge, label %dec_label_pc_10eb8

dec_label_pc_10eb0.dec_label_pc_10f68_crit_edge:  ; preds = %dec_label_pc_10eb0
  %.pre200 = mul i32 %v0_10f68.pre, 8
  br label %dec_label_pc_10f68

dec_label_pc_10eb8:                               ; preds = %dec_label_pc_10eb0
  %v4_10eb8 = mul i32 %v0_10f68.pre, 8
  %v5_10eb8 = add i32 %v4_10eb8, %v0_10dc4
  store i32 %v5_10eb8, i32* %r3.global-to-local, align 4
  %v1_10ebc = add i32 %v5_10eb8, -8
  store i32 %v1_10ebc, i32* %r1.global-to-local, align 4
  %v1_10ec0 = add i32 %v5_10eb8, 4
  %v2_10ec0 = inttoptr i32 %v1_10ec0 to i32*
  %storemerge.pre = load i32, i32* %v2_10ec0, align 4
  br label %dec_label_pc_10f60

dec_label_pc_10ec8:                               ; preds = %dec_label_pc_10f60
  %v1_10ec8 = add i32 %v1_10ef0, 4
  %v2_10ec8 = inttoptr i32 %v1_10ec8 to i32*
  %v3_10ec8 = load i32, i32* %v2_10ec8, align 4
  store i32 %v3_10ec8, i32* %r3.global-to-local, align 4
  %v1_10ecc = and i32 %v3_10ec8, -4
  store i32 %v1_10ecc, i32* %r2.global-to-local, align 4
  %v3_10ed0 = icmp ult i32 %v1_10ecc, %v0_10eb0
  %v1_10ed4 = add i32 %v1_10ef0, 12
  %v2_10ed4 = inttoptr i32 %v1_10ed4 to i32*
  %v3_10ed4 = load i32, i32* %v2_10ed4, align 4
  store i32 %v3_10ed4, i32* %r0.global-to-local, align 4
  br i1 %v3_10ed0, label %dec_label_pc_10f60, label %dec_label_pc_10edc

dec_label_pc_10edc:                               ; preds = %dec_label_pc_10ec8
  %v1_10edc = add i32 %v1_10ef0, 8
  %v2_10edc = inttoptr i32 %v1_10edc to i32*
  %v3_10edc = load i32, i32* %v2_10edc, align 4
  store i32 %v3_10edc, i32* %r1.global-to-local, align 4
  %v1_10ee0 = add i32 %v3_10edc, 12
  %v2_10ee0 = inttoptr i32 %v1_10ee0 to i32*
  %v3_10ee0 = load i32, i32* %v2_10ee0, align 4
  store i32 %v3_10ee0, i32* %r3.global-to-local, align 4
  %v9_10ee4 = icmp eq i32 %v3_10ee0, %v1_10ef0
  br i1 %v9_10ee4, label %dec_label_pc_10eec, label %dec_label_pc_10ef8

dec_label_pc_10eec:                               ; preds = %dec_label_pc_10edc
  %v1_10eec = add i32 %v3_10ed4, 8
  %v2_10eec = inttoptr i32 %v1_10eec to i32*
  %v3_10eec = load i32, i32* %v2_10eec, align 4
  store i32 %v3_10eec, i32* %r3.global-to-local, align 4
  %v9_10ef0 = icmp eq i32 %v3_10eec, %v1_10ef0
  br i1 %v9_10ef0, label %dec_label_pc_10efc, label %dec_label_pc_10ef8

dec_label_pc_10ef8:                               ; preds = %dec_label_pc_10edc, %dec_label_pc_10eec
  %v0_10ef8 = call i32 @function_11ef0()
  store i32 %v0_10ef8, i32* %r0.global-to-local, align 4
  %v0_10efc.pre = load i32, i32* @sl, align 4
  %v1_10efc.pre = load i32, i32* @r2, align 4
  %v0_10f04.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_10efc

dec_label_pc_10efc:                               ; preds = %dec_label_pc_10eec, %dec_label_pc_10ef8
  %v1_10f04 = phi i32 [ %v3_10ed4, %dec_label_pc_10eec ], [ %v0_10ef8, %dec_label_pc_10ef8 ]
  %v0_10f04 = phi i32 [ %v3_10edc, %dec_label_pc_10eec ], [ %v0_10f04.pre, %dec_label_pc_10ef8 ]
  %v1_10efc = phi i32 [ %v1_10ecc, %dec_label_pc_10eec ], [ %v1_10efc.pre, %dec_label_pc_10ef8 ]
  %v0_10efc = phi i32 [ %v0_10eb0, %dec_label_pc_10eec ], [ %v0_10efc.pre, %dec_label_pc_10ef8 ]
  %v2_10efc = sub i32 %v1_10efc, %v0_10efc
  store i32 %v2_10efc, i32* %lr.global-to-local, align 4
  %v2_10f04 = add i32 %v1_10f04, 8
  %v3_10f04 = inttoptr i32 %v2_10f04 to i32*
  store i32 %v0_10f04, i32* %v3_10f04, align 4
  %v0_10f08 = load i32, i32* %r0.global-to-local, align 4
  %v1_10f08 = load i32, i32* %r1.global-to-local, align 4
  %v2_10f08 = add i32 %v1_10f08, 12
  %v3_10f08 = inttoptr i32 %v2_10f08 to i32*
  store i32 %v0_10f08, i32* %v3_10f08, align 4
  %v0_10f0c = load i32, i32* %ip.global-to-local, align 4
  %v1_10f0c = add i32 %v0_10f0c, 8
  store i32 %v1_10f0c, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_10efc, 15
  br i1 %tmp207, label %dec_label_pc_10f2c, label %dec_label_pc_10f14

dec_label_pc_10f14:                               ; preds = %dec_label_pc_10efc
  %v1_10f14 = load i32, i32* %r2.global-to-local, align 4
  %v2_10f14 = add i32 %v1_10f14, %v0_10f0c
  store i32 %v2_10f14, i32* %r2.global-to-local, align 4
  %v1_10f18 = add i32 %v2_10f14, 4
  %v2_10f18 = inttoptr i32 %v1_10f18 to i32*
  %v3_10f18 = load i32, i32* %v2_10f18, align 4
  store i32 %v3_10f18, i32* %r3.global-to-local, align 4
  store i32 %v1_10f0c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10f20

dec_label_pc_10f20.loopexit:                      ; preds = %dec_label_pc_10dc0
  %v1_10dcc = load i32, i32* @r6, align 4
  %v2_10dcc = load i32, i32* @sl, align 4
  %v3_10dcc = add i32 %v2_10dcc, %v1_10dcc
  store i32 %v3_10dcc, i32* %r2.global-to-local, align 4
  %v2_10dd0 = add i32 %v3_10dcc, 4
  %v3_10dd0 = inttoptr i32 %v2_10dd0 to i32*
  %v4_10dd0 = load i32, i32* %v3_10dd0, align 4
  store i32 %v4_10dd0, i32* %r3.global-to-local, align 4
  %v2_10dd4 = add i32 %v1_10dcc, 8
  store i32 %v2_10dd4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10f20

dec_label_pc_10f20:                               ; preds = %.dec_label_pc_10f20_crit_edge, %dec_label_pc_10f20.loopexit, %dec_label_pc_10f14
  %v1_10f24 = phi i32 [ %v4_11048, %.dec_label_pc_10f20_crit_edge ], [ %v3_10dcc, %dec_label_pc_10f20.loopexit ], [ %v2_10f14, %dec_label_pc_10f14 ]
  %v0_10f20 = phi i32 [ %v7_11048, %.dec_label_pc_10f20_crit_edge ], [ %v4_10dd0, %dec_label_pc_10f20.loopexit ], [ %v3_10f18, %dec_label_pc_10f14 ]
  %v1_10f20 = or i32 %v0_10f20, 1
  store i32 %v1_10f20, i32* %r3.global-to-local, align 4
  %v2_10f24 = add i32 %v1_10f24, 4
  %v3_10f24 = inttoptr i32 %v2_10f24 to i32*
  store i32 %v1_10f20, i32* %v3_10f24, align 4
  br label %dec_label_pc_114e0

dec_label_pc_10f2c:                               ; preds = %dec_label_pc_10efc
  %v1_10f2c = load i32, i32* @sl, align 4
  %v2_10f2c = add i32 %v1_10f2c, %v0_10f0c
  store i32 %v2_10f2c, i32* %r2.global-to-local, align 4
  %v1_10f30 = or i32 %v1_10f2c, 1
  store i32 %v1_10f30, i32* %r3.global-to-local, align 4
  %v0_10f34 = load i32, i32* %lr.global-to-local, align 4
  %v1_10f34 = or i32 %v0_10f34, 1
  store i32 %v1_10f34, i32* %r1.global-to-local, align 4
  store i32 %v1_10f0c, i32* %r4.global-to-local, align 4
  %v2_10f3c = add i32 %v0_10f0c, 4
  %v3_10f3c = inttoptr i32 %v2_10f3c to i32*
  store i32 %v1_10f30, i32* %v3_10f3c, align 4
  %v0_10f40 = load i32, i32* %r2.global-to-local, align 4
  %v1_10f40 = load i32, i32* @r6, align 4
  %v2_10f40 = add i32 %v1_10f40, 8
  %v3_10f40 = inttoptr i32 %v2_10f40 to i32*
  store i32 %v0_10f40, i32* %v3_10f40, align 4
  %v0_10f44 = load i32, i32* %r2.global-to-local, align 4
  %v1_10f44 = load i32, i32* @r6, align 4
  %v2_10f44 = add i32 %v1_10f44, 12
  %v3_10f44 = inttoptr i32 %v2_10f44 to i32*
  store i32 %v0_10f44, i32* %v3_10f44, align 4
  %v0_10f48 = load i32, i32* %lr.global-to-local, align 4
  %v1_10f48 = load i32, i32* %r2.global-to-local, align 4
  %v3_10f48 = add i32 %v1_10f48, %v0_10f48
  %v4_10f48 = inttoptr i32 %v3_10f48 to i32*
  store i32 %v0_10f48, i32* %v4_10f48, align 4
  %v0_10f4c = load i32, i32* %r1.global-to-local, align 4
  %v1_10f4c = load i32, i32* %r2.global-to-local, align 4
  %v2_10f4c = add i32 %v1_10f4c, 4
  %v3_10f4c = inttoptr i32 %v2_10f4c to i32*
  store i32 %v0_10f4c, i32* %v3_10f4c, align 4
  %v0_10f50 = load i32, i32* @r6, align 4
  %v1_10f50 = load i32, i32* %r2.global-to-local, align 4
  %v2_10f50 = add i32 %v1_10f50, 12
  %v3_10f50 = inttoptr i32 %v2_10f50 to i32*
  store i32 %v0_10f50, i32* %v3_10f50, align 4
  %v0_10f54 = load i32, i32* @r6, align 4
  %v1_10f54 = load i32, i32* %r2.global-to-local, align 4
  %v2_10f54 = add i32 %v1_10f54, 8
  %v3_10f54 = inttoptr i32 %v2_10f54 to i32*
  store i32 %v0_10f54, i32* %v3_10f54, align 4
  br label %dec_label_pc_114e0

dec_label_pc_10f60:                               ; preds = %dec_label_pc_10ec8, %dec_label_pc_10eb8
  %v1_10ef0 = phi i32 [ %storemerge.pre, %dec_label_pc_10eb8 ], [ %v3_10ed4, %dec_label_pc_10ec8 ]
  store i32 %v1_10ef0, i32* %ip.global-to-local, align 4
  %v9_10f60 = icmp eq i32 %v1_10ef0, %v1_10ebc
  br i1 %v9_10f60, label %dec_label_pc_10f68.loopexit, label %dec_label_pc_10ec8

dec_label_pc_10f68.loopexit:                      ; preds = %dec_label_pc_10f60
  br label %dec_label_pc_10f68

dec_label_pc_10f68:                               ; preds = %dec_label_pc_10eb0.dec_label_pc_10f68_crit_edge, %dec_label_pc_10f68.loopexit
  %v4_10f98.pre-phi = phi i32 [ %.pre200, %dec_label_pc_10eb0.dec_label_pc_10f68_crit_edge ], [ %v4_10eb8, %dec_label_pc_10f68.loopexit ]
  %v1_10f68 = add i32 %v0_10f68.pre, 1
  store i32 %v1_10f68, i32* %r2.global-to-local, align 4
  %v1_10f6c = urem i32 %v1_10f68, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 121092, i32* %r0.global-to-local, align 4
  %v6_10f78 = shl i32 1, %v1_10f6c
  store i32 %v6_10f78, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_10f80 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_10f80, i32* %r3.global-to-local, align 4
  %v3_10f84 = udiv i32 %v1_10f68, 32
  store i32 %v3_10f84, i32* @r5, align 4
  %v4_10f88 = mul nuw nsw i32 %v3_10f84, 4
  %v5_10f88 = add i32 %v4_10f80, %v4_10f88
  store i32 %v5_10f88, i32* %r2.global-to-local, align 4
  %v1_10f8c = add i32 %v5_10f88, 820
  %v2_10f8c = inttoptr i32 %v1_10f8c to i32*
  %v3_10f8c = load i32, i32* %v2_10f8c, align 4
  store i32 %v3_10f8c, i32* @r4, align 4
  %v1_10f90 = add i32 %v4_10f80, 52
  store i32 %v1_10f90, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_10f98 = add i32 %v1_10f90, %v4_10f98.pre-phi
  store i32 %v5_10f98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10f9c

dec_label_pc_10f9c:                               ; preds = %dec_label_pc_11004, %dec_label_pc_10f68
  %v1_10fa4 = phi i32 [ %v1_10fa4.pre, %dec_label_pc_11004 ], [ %v3_10f8c, %dec_label_pc_10f68 ]
  %v0_10fa4 = phi i32 [ %v0_10f9c.pre, %dec_label_pc_11004 ], [ %v6_10f78, %dec_label_pc_10f68 ]
  %v1_10f9c = sub i32 1, %v0_10fa4
  %v2_10f9c = icmp ult i32 %v0_10fa4, 2
  %v1_10f9c. = select i1 %v2_10f9c, i32 %v1_10f9c, i32 0
  store i32 %v1_10f9c., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_10fa4, %v1_10fa4
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_10f9c
  %v5_10fa8 = or i32 %v1_10f9c., 1
  store i32 %v5_10fa8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10fb4.preheader

bb142:                                            ; preds = %dec_label_pc_10f9c
  %v2_10fac = icmp eq i32 %v1_10f9c., 0
  br i1 %v2_10fac, label %.dec_label_pc_10ff0.preheader_crit_edge, label %dec_label_pc_10fb4.preheader

.dec_label_pc_10ff0.preheader_crit_edge:          ; preds = %bb142
  %v0_10fe854.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10ff0.preheader

dec_label_pc_10fb4.preheader:                     ; preds = %bb142, %.thread12
  %v0_10fb4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10fb4

dec_label_pc_10fb4:                               ; preds = %dec_label_pc_10fb4.preheader, %dec_label_pc_10fc0
  %v0_10fb4 = phi i32 [ %v0_10fb4.pre, %dec_label_pc_10fb4.preheader ], [ %v1_10fb4, %dec_label_pc_10fc0 ]
  %v1_10fb4 = add i32 %v0_10fb4, 1
  store i32 %v1_10fb4, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_10fb4, 2
  br i1 %tmp208, label %dec_label_pc_11094.loopexit, label %dec_label_pc_10fc0

dec_label_pc_10fc0:                               ; preds = %dec_label_pc_10fb4
  store i32 121092, i32* %r3.global-to-local, align 4
  %v1_10fc4 = load i32, i32* @r8, align 4
  %v2_10fc4 = add i32 %v1_10fc4, 121092
  %v3_10fc4 = inttoptr i32 %v2_10fc4 to i32*
  %v4_10fc4 = load i32, i32* %v3_10fc4, align 4
  store i32 %v4_10fc4, i32* %r2.global-to-local, align 4
  %v4_10fc8 = mul i32 %v1_10fb4, 4
  %v5_10fc8 = add i32 %v4_10fc4, %v4_10fc8
  store i32 %v5_10fc8, i32* %r3.global-to-local, align 4
  %v1_10fcc = add i32 %v5_10fc8, 820
  %v2_10fcc = inttoptr i32 %v1_10fcc to i32*
  %v3_10fcc = load i32, i32* %v2_10fcc, align 4
  store i32 %v3_10fcc, i32* @r4, align 4
  %v2_10fd0 = icmp eq i32 %v3_10fcc, 0
  br i1 %v2_10fd0, label %dec_label_pc_10fb4, label %dec_label_pc_10fd8

dec_label_pc_10fd8:                               ; preds = %dec_label_pc_10fc0
  %v4_10fd8 = mul i32 %v1_10fb4, 256
  %v5_10fd8 = add i32 %v4_10fc4, %v4_10fd8
  store i32 %v5_10fd8, i32* %r3.global-to-local, align 4
  %v1_10fdc = add i32 %v5_10fd8, 44
  store i32 %v1_10fdc, i32* %r0.global-to-local, align 4
  %v0_10fe0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_10fe0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10ff0.preheader

dec_label_pc_10ff0.preheader:                     ; preds = %.dec_label_pc_10ff0.preheader_crit_edge, %dec_label_pc_10fd8
  %v0_10fe854 = phi i32 [ %v1_10fdc, %dec_label_pc_10fd8 ], [ %v0_10fe854.pre, %.dec_label_pc_10ff0.preheader_crit_edge ]
  %v0_1100c = phi i32 [ %v3_10fcc, %dec_label_pc_10fd8 ], [ %v1_10fa4, %.dec_label_pc_10ff0.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_10fe0, %dec_label_pc_10fd8 ], [ %v0_10fa4, %.dec_label_pc_10ff0.preheader_crit_edge ]
  %v2_10ff051 = and i32 %ip.promoted, %v0_1100c
  %v4_10ff053 = icmp eq i32 %v2_10ff051, 0
  br i1 %v4_10ff053, label %dec_label_pc_10fe8, label %dec_label_pc_10ff8

dec_label_pc_10fe8:                               ; preds = %dec_label_pc_10ff0.preheader, %dec_label_pc_10fe8
  %v2_10fec56 = phi i32 [ %v2_10fec, %dec_label_pc_10fe8 ], [ %ip.promoted, %dec_label_pc_10ff0.preheader ]
  %v0_10fe855 = phi i32 [ %v1_10fe8, %dec_label_pc_10fe8 ], [ %v0_10fe854, %dec_label_pc_10ff0.preheader ]
  %v1_10fe8 = add i32 %v0_10fe855, 8
  %v2_10fec = mul i32 %v2_10fec56, 2
  %v2_10ff0 = and i32 %v2_10fec, %v0_1100c
  %v4_10ff0 = icmp eq i32 %v2_10ff0, 0
  br i1 %v4_10ff0, label %dec_label_pc_10fe8, label %dec_label_pc_10ff0.dec_label_pc_10ff8_crit_edge

dec_label_pc_10ff0.dec_label_pc_10ff8_crit_edge:  ; preds = %dec_label_pc_10fe8
  store i32 %v1_10fe8, i32* %r0.global-to-local, align 4
  store i32 %v2_10fec, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10ff8

dec_label_pc_10ff8:                               ; preds = %dec_label_pc_10ff0.dec_label_pc_10ff8_crit_edge, %dec_label_pc_10ff0.preheader
  %v0_11018 = phi i32 [ %v2_10fec, %dec_label_pc_10ff0.dec_label_pc_10ff8_crit_edge ], [ %ip.promoted, %dec_label_pc_10ff0.preheader ]
  %v0_1103c = phi i32 [ %v1_10fe8, %dec_label_pc_10ff0.dec_label_pc_10ff8_crit_edge ], [ %v0_10fe854, %dec_label_pc_10ff0.preheader ]
  %v1_10ff8 = add i32 %v0_1103c, 12
  %v2_10ff8 = inttoptr i32 %v1_10ff8 to i32*
  %v3_10ff8 = load i32, i32* %v2_10ff8, align 4
  store i32 %v3_10ff8, i32* @lr, align 4
  %v9_10ffc = icmp eq i32 %v3_10ff8, %v0_1103c
  br i1 %v9_10ffc, label %dec_label_pc_11004, label %dec_label_pc_11024

dec_label_pc_11004:                               ; preds = %dec_label_pc_10ff8
  store i32 121092, i32* %r0.global-to-local, align 4
  %v1_11008 = load i32, i32* @r8, align 4
  %v2_11008 = add i32 %v1_11008, 121092
  %v3_11008 = inttoptr i32 %v2_11008 to i32*
  %v4_11008 = load i32, i32* %v3_11008, align 4
  %v2_1100c = sub i32 -1, %v0_11018
  %v3_1100c = and i32 %v0_1100c, %v2_1100c
  store i32 %v3_1100c, i32* @r4, align 4
  %v1_11010 = load i32, i32* @r5, align 4
  %v4_11010 = mul i32 %v1_11010, 4
  %v5_11010 = add i32 %v4_11010, %v4_11008
  store i32 %v5_11010, i32* %r3.global-to-local, align 4
  %v1_11014 = add i32 %v0_1103c, 8
  store i32 %v1_11014, i32* %r0.global-to-local, align 4
  %v2_11018 = mul i32 %v0_11018, 2
  store i32 %v2_11018, i32* %ip.global-to-local, align 4
  %v2_1101c = add i32 %v5_11010, 820
  %v3_1101c = inttoptr i32 %v2_1101c to i32*
  store i32 %v3_1100c, i32* %v3_1101c, align 4
  %v0_10f9c.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_10fa4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10f9c

dec_label_pc_11024:                               ; preds = %dec_label_pc_10ff8
  %v1_11024 = add i32 %v3_10ff8, 4
  %v2_11024 = inttoptr i32 %v1_11024 to i32*
  %v3_11024 = load i32, i32* %v2_11024, align 4
  store i32 %v3_11024, i32* %r3.global-to-local, align 4
  %v1_11028 = and i32 %v3_11024, -4
  store i32 %v1_11028, i32* %r2.global-to-local, align 4
  %v0_1102c = load i32, i32* @sl, align 4
  %v2_1102c = sub i32 %v1_11028, %v0_1102c
  store i32 %v2_1102c, i32* %ip.global-to-local, align 4
  %v1_11030 = add i32 %v3_10ff8, 12
  %v2_11030 = inttoptr i32 %v1_11030 to i32*
  %v3_11030 = load i32, i32* %v2_11030, align 4
  store i32 %v3_11030, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_1102c, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_11024
  %v6_11038 = add i32 %v1_11028, %v3_10ff8
  store i32 %v6_11038, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_11024, %bb143
  %v2_1103c = add i32 %v3_11030, 8
  %v3_1103c = inttoptr i32 %v2_1103c to i32*
  store i32 %v0_1103c, i32* %v3_1103c, align 4
  %v0_11040 = load i32, i32* %r3.global-to-local, align 4
  %v1_11040 = load i32, i32* %r0.global-to-local, align 4
  %v2_11040 = add i32 %v1_11040, 12
  %v3_11040 = inttoptr i32 %v2_11040 to i32*
  store i32 %v0_11040, i32* %v3_11040, align 4
  %v4_11044 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_10f20_crit_edge, label %dec_label_pc_11050

.dec_label_pc_10f20_crit_edge:                    ; preds = %bb144
  %v5_11044 = add i32 %v4_11044, 8
  store i32 %v5_11044, i32* %r4.global-to-local, align 4
  %v4_11048 = load i32, i32* %r2.global-to-local, align 4
  %v5_11048 = add i32 %v4_11048, 4
  %v6_11048 = inttoptr i32 %v5_11048 to i32*
  %v7_11048 = load i32, i32* %v6_11048, align 4
  store i32 %v7_11048, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10f20

dec_label_pc_11050:                               ; preds = %bb144
  %v1_11050 = load i32, i32* @sl, align 4
  %v2_11050 = add i32 %v1_11050, %v4_11044
  store i32 %v2_11050, i32* %r1.global-to-local, align 4
  %v1_11058 = load i32, i32* @r6, align 4
  %v2_11058 = add i32 %v1_11058, 8
  %v3_11058 = inttoptr i32 %v2_11058 to i32*
  store i32 %v2_11050, i32* %v3_11058, align 4
  %v0_1105c = load i32, i32* %r1.global-to-local, align 4
  %v1_1105c = load i32, i32* @r6, align 4
  %v2_1105c = add i32 %v1_1105c, 12
  %v3_1105c = inttoptr i32 %v2_1105c to i32*
  store i32 %v0_1105c, i32* %v3_1105c, align 4
  %v0_11060 = load i32, i32* @r6, align 4
  %v1_11060 = load i32, i32* %r1.global-to-local, align 4
  %v2_11060 = add i32 %v1_11060, 8
  %v3_11060 = inttoptr i32 %v2_11060 to i32*
  store i32 %v0_11060, i32* %v3_11060, align 4
  %v0_11064 = load i32, i32* @r6, align 4
  %v1_11064 = load i32, i32* %r1.global-to-local, align 4
  %v2_11064 = add i32 %v1_11064, 12
  %v3_11064 = inttoptr i32 %v2_11064 to i32*
  store i32 %v0_11064, i32* %v3_11064, align 4
  %tmp210 = icmp ult i32 %v1_11050, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_11050
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r2.global-to-local, align 4
  %v8_11070 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v8_11070, i32* %r3.global-to-local, align 4
  %v4_11074 = load i32, i32* %r1.global-to-local, align 4
  %v6_11074 = add i32 %v8_11070, 48
  %v7_11074 = inttoptr i32 %v6_11074 to i32*
  store i32 %v4_11074, i32* %v7_11074, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_11050, %bb145
  %v0_11078 = load i32, i32* @sl, align 4
  %v1_11078 = or i32 %v0_11078, 1
  store i32 %v1_11078, i32* %r2.global-to-local, align 4
  %v0_1107c = load i32, i32* %ip.global-to-local, align 4
  %v1_1107c = or i32 %v0_1107c, 1
  store i32 %v1_1107c, i32* %r3.global-to-local, align 4
  %v0_11080 = load i32, i32* @lr, align 4
  %v1_11080 = add i32 %v0_11080, 8
  store i32 %v1_11080, i32* %r4.global-to-local, align 4
  %v2_11084 = add i32 %v0_11080, 4
  %v3_11084 = inttoptr i32 %v2_11084 to i32*
  store i32 %v1_11078, i32* %v3_11084, align 4
  %v0_11088 = load i32, i32* %ip.global-to-local, align 4
  %v1_11088 = load i32, i32* %r1.global-to-local, align 4
  %v3_11088 = add i32 %v1_11088, %v0_11088
  %v4_11088 = inttoptr i32 %v3_11088 to i32*
  store i32 %v0_11088, i32* %v4_11088, align 4
  %v0_1108c = load i32, i32* %r3.global-to-local, align 4
  %v1_1108c = load i32, i32* %r1.global-to-local, align 4
  %v2_1108c = add i32 %v1_1108c, 4
  %v3_1108c = inttoptr i32 %v2_1108c to i32*
  store i32 %v0_1108c, i32* %v3_1108c, align 4
  br label %dec_label_pc_114e0

dec_label_pc_11094.loopexit:                      ; preds = %dec_label_pc_10fb4
  br label %dec_label_pc_11094

dec_label_pc_11094:                               ; preds = %dec_label_pc_11094.loopexit, %dec_label_pc_10ca8, %dec_label_pc_10cb0
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %ip.global-to-local, align 4
  %v4_1109c = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_1109c, i32* @r0, align 4
  %v1_110a0 = add i32 %v4_1109c, 44
  %v2_110a0 = inttoptr i32 %v1_110a0 to i32*
  %v3_110a0 = load i32, i32* %v2_110a0, align 4
  store i32 %v3_110a0, i32* %ip.global-to-local, align 4
  %v1_110a4 = add i32 %v3_110a0, 4
  %v2_110a4 = inttoptr i32 %v1_110a4 to i32*
  %v3_110a4 = load i32, i32* %v2_110a4, align 4
  %v0_110a8 = load i32, i32* @sl, align 4
  %v1_110a8 = add i32 %v0_110a8, 16
  store i32 %v1_110a8, i32* %r1.global-to-local, align 4
  %v1_110ac = and i32 %v3_110a4, -4
  store i32 %v1_110ac, i32* %r3.global-to-local, align 4
  %v3_110b0 = icmp ult i32 %v1_110ac, %v1_110a8
  br i1 %v3_110b0, label %dec_label_pc_110e0, label %dec_label_pc_110bc

dec_label_pc_110bc:                               ; preds = %dec_label_pc_11094
  %v2_110bc = sub i32 %v1_110ac, %v0_110a8
  %v2_110c0 = add i32 %v0_110a8, %v3_110a0
  store i32 %v2_110c0, i32* %r1.global-to-local, align 4
  %v1_110c4 = or i32 %v2_110bc, 1
  store i32 %v1_110c4, i32* %r3.global-to-local, align 4
  %v1_110c8 = or i32 %v0_110a8, 1
  store i32 %v1_110c8, i32* %r2.global-to-local, align 4
  %v1_110cc = add i32 %v3_110a0, 8
  store i32 %v1_110cc, i32* %r4.global-to-local, align 4
  store i32 %v1_110c8, i32* %v2_110a4, align 4
  %v0_110d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_110d4 = load i32, i32* @r0, align 4
  %v2_110d4 = add i32 %v1_110d4, 44
  %v3_110d4 = inttoptr i32 %v2_110d4 to i32*
  store i32 %v0_110d4, i32* %v3_110d4, align 4
  %v0_110d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_110d8 = load i32, i32* %r1.global-to-local, align 4
  %v2_110d8 = add i32 %v1_110d8, 4
  %v3_110d8 = inttoptr i32 %v2_110d8 to i32*
  store i32 %v0_110d8, i32* %v3_110d8, align 4
  br label %dec_label_pc_114e0

dec_label_pc_110e0:                               ; preds = %dec_label_pc_11094
  %v1_110e0 = inttoptr i32 %v4_1109c to i32*
  %v2_110e0 = load i32, i32* %v1_110e0, align 4
  store i32 %v2_110e0, i32* %r3.global-to-local, align 4
  %v1_110e4 = and i32 %v2_110e0, 2
  store i32 %v1_110e4, i32* %ip.global-to-local, align 4
  %v2_110e4 = icmp eq i32 %v1_110e4, 0
  %v1_110e8 = add i32 %v4_1109c, 860
  %v2_110e8 = inttoptr i32 %v1_110e8 to i32*
  %v3_110e8 = load i32, i32* %v2_110e8, align 4
  store i32 %v3_110e8, i32* %r1.global-to-local, align 4
  br i1 %v2_110e4, label %dec_label_pc_11100, label %dec_label_pc_110f0

dec_label_pc_110f0:                               ; preds = %dec_label_pc_110e0
  %v0_110f0 = call i32 @function_11ac0()
  %v0_110f4 = load i32, i32* @sl, align 4
  %v1_110f4 = add i32 %v0_110f4, -7
  store i32 %v1_110f4, i32* @r0, align 4
  %v0_110f8 = call i32 @function_10c08()
  store i32 %v0_110f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_114dc

dec_label_pc_11100:                               ; preds = %dec_label_pc_110e0
  %v1_11100 = add i32 %v4_1109c, 844
  %v2_11100 = inttoptr i32 %v1_11100 to i32*
  %v3_11100 = load i32, i32* %v2_11100, align 4
  store i32 %v3_11100, i32* %r3.global-to-local, align 4
  %v3_11104 = icmp ult i32 %v0_110a8, %v3_11100
  %v1_11108 = add i32 %v3_110e8, -1
  store i32 %v1_11108, i32* %sb.global-to-local, align 4
  br i1 %v3_11104, label %dec_label_pc_111dc, label %dec_label_pc_11110

dec_label_pc_11110:                               ; preds = %dec_label_pc_11100
  %v1_11110 = add i32 %v4_1109c, 852
  %v2_11110 = inttoptr i32 %v1_11110 to i32*
  %v3_11110 = load i32, i32* %v2_11110, align 4
  store i32 %v3_11110, i32* %r2.global-to-local, align 4
  %v1_11114 = add i32 %v4_1109c, 848
  %v2_11114 = inttoptr i32 %v1_11114 to i32*
  %v3_11114 = load i32, i32* %v2_11114, align 4
  store i32 %v3_11114, i32* %r3.global-to-local, align 4
  %v6_1111c = icmp slt i32 %v3_11114, %v3_11110
  br i1 %v6_1111c, label %dec_label_pc_11120, label %dec_label_pc_111dc

dec_label_pc_11120:                               ; preds = %dec_label_pc_11110
  %v1_11120 = add i32 %v0_110a8, 10
  %v2_11124 = add i32 %v1_11120, %v3_110e8
  store i32 %v2_11124, i32* %r3.global-to-local, align 4
  %v2_11128 = sub i32 0, %v3_110e8
  %v3_11128 = and i32 %v2_11124, %v2_11128
  store i32 %v3_11128, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_11128, %v0_110a8
  br i1 %tmp211, label %dec_label_pc_11134, label %dec_label_pc_111dc

dec_label_pc_11134:                               ; preds = %dec_label_pc_11120
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_11128, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_1114c = call i32 @function_12cf4(i32 0, i32 %v3_11128, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_1114c, i32* %r0.global-to-local, align 4
  %v7_11150 = icmp eq i32 %v6_1114c, -1
  br i1 %v7_11150, label %dec_label_pc_11134.dec_label_pc_111dc_crit_edge, label %dec_label_pc_11158

dec_label_pc_11134.dec_label_pc_111dc_crit_edge:  ; preds = %dec_label_pc_11134
  %v1_11200.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_111dc

dec_label_pc_11158:                               ; preds = %dec_label_pc_11134
  %v1_11158 = urem i32 %v6_1114c, 8
  store i32 %v1_11158, i32* %r2.global-to-local, align 4
  %v2_11158 = icmp eq i32 %v1_11158, 0
  br i1 %v2_11158, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_11158
  %v2_1115c = sub nsw i32 8, %v1_11158
  store i32 %v2_1115c, i32* %r3.global-to-local, align 4
  %v2_11160 = load i32, i32* @r4, align 4
  %v3_11160 = sub i32 %v2_11160, %v2_1115c
  %v3_11164 = add i32 %v2_1115c, %v6_1114c
  store i32 %v3_11164, i32* %lr.global-to-local, align 4
  %v2_1116c = or i32 %v3_11160, 2
  store i32 %v2_1116c, i32* %r2.global-to-local, align 4
  %v5_11174 = inttoptr i32 %v3_11164 to i32*
  store i32 %v2_1115c, i32* %v5_11174, align 4
  %v1_11178 = load i32, i32* %r2.global-to-local, align 4
  %v2_11178 = load i32, i32* %lr.global-to-local, align 4
  %v3_11178 = add i32 %v2_11178, 4
  %v4_11178 = inttoptr i32 %v3_11178 to i32*
  store i32 %v1_11178, i32* %v4_11178, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_11158
  store i32 %v6_1114c, i32* %lr.global-to-local, align 4
  %v1_1117047 = load i32, i32* @r4, align 4
  %v2_1117048 = or i32 %v1_1117047, 2
  store i32 %v2_1117048, i32* %r3.global-to-local, align 4
  %v3_1117c = inttoptr i32 %v6_1114c to i32*
  store i32 0, i32* %v3_1117c, align 4
  %v1_11180 = load i32, i32* %r3.global-to-local, align 4
  %v2_11180 = load i32, i32* %lr.global-to-local, align 4
  %v3_11180 = add i32 %v2_11180, 4
  %v4_11180 = inttoptr i32 %v3_11180 to i32*
  store i32 %v1_11180, i32* %v4_11180, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 121092, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_1118c = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_1118c, i32* %ip.global-to-local, align 4
  %v1_11190 = add i32 %v4_1118c, 848
  %v2_11190 = inttoptr i32 %v1_11190 to i32*
  %v3_11190 = load i32, i32* %v2_11190, align 4
  store i32 %v3_11190, i32* %r3.global-to-local, align 4
  %v1_11194 = add i32 %v4_1118c, 856
  %v2_11194 = inttoptr i32 %v1_11194 to i32*
  %v3_11194 = load i32, i32* %v2_11194, align 4
  store i32 %v3_11194, i32* %r2.global-to-local, align 4
  %v1_11198 = add i32 %v3_11190, 1
  store i32 %v1_11198, i32* %r3.global-to-local, align 4
  %v7_111a0 = icmp sgt i32 %v1_11198, %v3_11194
  br i1 %v7_111a0, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_11198, i32* %v2_11194, align 4
  %v0_111a4.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_111a4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_111a4 = phi i32 [ %v4_1118c, %.thread27 ], [ %v1_111a4.pre, %bb147 ]
  %v0_111a4 = phi i32 [ %v1_11198, %.thread27 ], [ %v0_111a4.pre, %bb147 ]
  %v2_111a4 = add i32 %v1_111a4, 848
  %v3_111a4 = inttoptr i32 %v2_111a4 to i32*
  store i32 %v0_111a4, i32* %v3_111a4, align 4
  %v0_111a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_111a8 = add i32 %v0_111a8, 868
  %v2_111a8 = inttoptr i32 %v1_111a8 to i32*
  %v3_111a8 = load i32, i32* %v2_111a8, align 4
  store i32 %v3_111a8, i32* %r3.global-to-local, align 4
  %v1_111ac = add i32 %v0_111a8, 880
  %v2_111ac = inttoptr i32 %v1_111ac to i32*
  %v3_111ac = load i32, i32* %v2_111ac, align 4
  store i32 %v3_111ac, i32* %r2.global-to-local, align 4
  %v0_111b0 = load i32, i32* @r4, align 4
  %v2_111b0 = add i32 %v0_111b0, %v3_111a8
  store i32 %v2_111b0, i32* %r1.global-to-local, align 4
  %v1_111b4 = add i32 %v0_111a8, 872
  %v2_111b4 = inttoptr i32 %v1_111b4 to i32*
  %v3_111b4 = load i32, i32* %v2_111b4, align 4
  store i32 %v3_111b4, i32* %r3.global-to-local, align 4
  %v1_111bc = add i32 %v0_111a8, 884
  %v2_111bc = inttoptr i32 %v1_111bc to i32*
  %v3_111bc = load i32, i32* %v2_111bc, align 4
  store i32 %v3_111bc, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_111b0, %v3_111ac
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_111b0, i32* %v2_111ac, align 4
  %v0_111c4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_111c4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_111c4 = phi i32 [ %v0_111a8, %bb148 ], [ %v1_111c4.pre, %bb149 ]
  %v0_111c4 = phi i32 [ %v2_111b0, %bb148 ], [ %v0_111c4.pre, %bb149 ]
  %v2_111c4 = add i32 %v1_111c4, 868
  %v3_111c4 = inttoptr i32 %v2_111c4 to i32*
  store i32 %v0_111c4, i32* %v3_111c4, align 4
  %v0_111c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_111c8 = load i32, i32* %r3.global-to-local, align 4
  %v2_111c8 = add i32 %v1_111c8, %v0_111c8
  store i32 %v2_111c8, i32* %r1.global-to-local, align 4
  %v1_111cc = load i32, i32* %r2.global-to-local, align 4
  %v0_111d0 = load i32, i32* %lr.global-to-local, align 4
  %v1_111d0 = add i32 %v0_111d0, 8
  store i32 %v1_111d0, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_111c8, %v1_111cc
  br i1 %tmp213, label %bb151, label %dec_label_pc_114dc

bb151:                                            ; preds = %bb150
  %v5_111d4 = load i32, i32* %ip.global-to-local, align 4
  %v6_111d4 = add i32 %v5_111d4, 884
  %v7_111d4 = inttoptr i32 %v6_111d4 to i32*
  store i32 %v2_111c8, i32* %v7_111d4, align 4
  br label %dec_label_pc_114dc

dec_label_pc_111dc:                               ; preds = %dec_label_pc_11120, %dec_label_pc_11100, %dec_label_pc_11134.dec_label_pc_111dc_crit_edge, %dec_label_pc_11110
  %v1_11200 = phi i32 [ %v1_11200.pre, %dec_label_pc_11134.dec_label_pc_111dc_crit_edge ], [ %v0_110a8, %dec_label_pc_11110 ], [ %v0_110a8, %dec_label_pc_11100 ], [ %v0_110a8, %dec_label_pc_11120 ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %ip.global-to-local, align 4
  %v4_111e4 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_111e4, i32* %r3.global-to-local, align 4
  %v1_111e8 = add i32 %v4_111e4, 44
  %v2_111e8 = inttoptr i32 %v1_111e8 to i32*
  %v3_111e8 = load i32, i32* %v2_111e8, align 4
  store i32 %v3_111e8, i32* %r0.global-to-local, align 4
  %v1_111ec = add i32 %v4_111e4, 864
  %v2_111ec = inttoptr i32 %v1_111ec to i32*
  %v3_111ec = load i32, i32* %v2_111ec, align 4
  store i32 %v3_111ec, i32* %r2.global-to-local, align 4
  %v1_111f0 = add i32 %v4_111e4, 840
  %v2_111f0 = inttoptr i32 %v1_111f0 to i32*
  %v3_111f0 = load i32, i32* %v2_111f0, align 4
  store i32 %v3_111f0, i32* %r3.global-to-local, align 4
  %v1_111f4 = add i32 %v3_111e8, 4
  %v2_111f4 = inttoptr i32 %v1_111f4 to i32*
  %v3_111f4 = load i32, i32* %v2_111f4, align 4
  store i32 %v3_111f4, i32* %r1.global-to-local, align 4
  %v1_111fc = urem i32 %v3_111ec, 2
  %v2_111fc = icmp eq i32 %v1_111fc, 0
  %v1_111f8 = add i32 %v1_11200, 16
  %v2_11200 = add i32 %v1_111f8, %v3_111f0
  store i32 %v2_11200, i32* %r3.global-to-local, align 4
  %v1_11204 = and i32 %v3_111f4, -4
  store i32 %v1_11204, i32* @r8, align 4
  br i1 %v2_111fc, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_111dc
  %v3_11208 = sub i32 %v2_11200, %v1_11204
  store i32 %v3_11208, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_111dc, %bb152
  %v0_1120c = phi i32 [ %v2_11200, %dec_label_pc_111dc ], [ %v3_11208, %bb152 ]
  %v1_1120c = load i32, i32* %sb.global-to-local, align 4
  %v2_1120c = add i32 %v1_1120c, %v0_1120c
  store i32 %v2_1120c, i32* %r3.global-to-local, align 4
  %v1_11210 = sub i32 -1, %v1_1120c
  store i32 %v1_11210, i32* %fp.global-to-local, align 4
  %v2_11214 = and i32 %v2_1120c, %v1_11210
  store i32 %v2_11214, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_11214, 1
  br i1 %tmp154, label %dec_label_pc_11238, label %dec_label_pc_11224

dec_label_pc_11224:                               ; preds = %bb153
  store i32 %v2_11214, i32* %r0.global-to-local, align 4
  %v1_11228 = call i32 @function_12f80(i32 %v2_11214)
  store i32 %v1_11228, i32* %r0.global-to-local, align 4
  %v3_1122c = icmp eq i32 %v1_11228, -1
  store i32 %v1_11228, i32* @r4, align 4
  br i1 %v3_1122c, label %dec_label_pc_11238, label %dec_label_pc_112a4

dec_label_pc_11238:                               ; preds = %dec_label_pc_11224, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r1.global-to-local, align 4
  %v4_11240 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_11240, i32* %r6.global-to-local, align 4
  %v1_11244 = add i32 %v4_11240, 864
  %v2_11244 = inttoptr i32 %v1_11244 to i32*
  %v3_11244 = load i32, i32* %v2_11244, align 4
  store i32 %v3_11244, i32* %r3.global-to-local, align 4
  %v1_11248 = urem i32 %v3_11244, 2
  %v2_11248 = icmp eq i32 %v1_11248, 0
  br i1 %v2_11248, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_11238
  %v1_1124c = load i32, i32* @r8, align 4
  %v2_1124c = load i32, i32* %sb.global-to-local, align 4
  %v3_1124c = add i32 %v2_1124c, %v1_1124c
  %v2_11250 = load i32, i32* @r5, align 4
  %v3_11250 = add i32 %v3_1124c, %v2_11250
  store i32 %v3_11250, i32* %r3.global-to-local, align 4
  %v2_11254 = load i32, i32* %fp.global-to-local, align 4
  %v3_11254 = and i32 %v2_11254, %v3_11250
  store i32 %v3_11254, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_11238
  %v0_11258.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_11258 = phi i32 [ %v0_11258.pr, %.thread29thread-pre-split ], [ %v3_11254, %bb155 ]
  %v2_11258 = icmp ugt i32 %v0_11258, 1048575
  br i1 %v2_11258, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_11270 = phi i32 [ %v0_11258, %.thread29 ], [ 1048576, %bb156 ]
  %v1_11260 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_11270, %v1_11260
  br i1 %tmp214, label %dec_label_pc_11268, label %dec_label_pc_114cc

dec_label_pc_11268:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_11270, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_11284 = call i32 @function_12cf4(i32 0, i32 %v0_11270, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_11284, i32* %r0.global-to-local, align 4
  %v3_11288 = icmp eq i32 %v6_11284, -1
  %v8_11288 = icmp eq i32 %v6_11284, -1
  store i32 %v6_11284, i32* @r4, align 4
  br i1 %v8_11288, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_11268
  %v1_11290 = load i32, i32* %r6.global-to-local, align 4
  %v2_11290 = add i32 %v1_11290, 864
  %v3_11290 = inttoptr i32 %v2_11290 to i32*
  %v4_11290 = load i32, i32* %v3_11290, align 4
  %v2_11294 = load i32, i32* @r5, align 4
  %v3_11294 = add i32 %v2_11294, %v6_11284
  store i32 %v3_11294, i32* %r0.global-to-local, align 4
  %v2_11298 = and i32 %v4_11290, -2
  store i32 %v2_11298, i32* %r3.global-to-local, align 4
  store i32 %v2_11298, i32* %v3_11290, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_11268, %bb158
  br i1 %v3_11288, label %dec_label_pc_112a4, label %dec_label_pc_112a8

dec_label_pc_112a4:                               ; preds = %.thread32, %dec_label_pc_11224
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_112a8

dec_label_pc_112a8:                               ; preds = %.thread32, %dec_label_pc_112a4
  %v0_112a8 = load i32, i32* @r4, align 4
  %v7_112a8 = icmp eq i32 %v0_112a8, -1
  br i1 %v7_112a8, label %dec_label_pc_114cc, label %dec_label_pc_112b0

dec_label_pc_112b0:                               ; preds = %dec_label_pc_112a8
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r2.global-to-local, align 4
  %v4_112b8 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_112b8, i32* %ip.global-to-local, align 4
  store i32 %v3_111e8, i32* %r2.global-to-local, align 4
  %v1_112c0 = add i32 %v4_112b8, 872
  %v2_112c0 = inttoptr i32 %v1_112c0 to i32*
  %v3_112c0 = load i32, i32* %v2_112c0, align 4
  %v1_112c4 = load i32, i32* @r8, align 4
  %v2_112c4 = add i32 %v1_112c4, %v3_111e8
  store i32 %v2_112c4, i32* %r1.global-to-local, align 4
  %v0_112c8 = load i32, i32* @r5, align 4
  %v2_112c8 = add i32 %v0_112c8, %v3_112c0
  store i32 %v2_112c8, i32* %r3.global-to-local, align 4
  %v9_112cc = icmp eq i32 %v0_112a8, %v2_112c4
  br i1 %v9_112cc, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_112b0
  store i32 %v2_112c8, i32* %v2_112c0, align 4
  br label %dec_label_pc_112e8

bb159:                                            ; preds = %dec_label_pc_112b0
  %v1_112d0 = load i32, i32* %r0.global-to-local, align 4
  %v8_112d0 = icmp eq i32 %v1_112d0, -1
  store i32 %v2_112c8, i32* %v2_112c0, align 4
  br i1 %v8_112d0, label %.thread34, label %dec_label_pc_112e8

.thread34:                                        ; preds = %bb159
  %v1_112d8 = load i32, i32* @r5, align 4
  %v2_112d8 = load i32, i32* @r8, align 4
  %v3_112d8 = add i32 %v2_112d8, %v1_112d8
  %v2_112dc = or i32 %v3_112d8, 1
  store i32 %v2_112dc, i32* %r3.global-to-local, align 4
  %v2_112e0 = load i32, i32* %r2.global-to-local, align 4
  %v3_112e0 = add i32 %v2_112e0, 4
  %v4_112e0 = inttoptr i32 %v3_112e0 to i32*
  store i32 %v2_112dc, i32* %v4_112e0, align 4
  br label %dec_label_pc_11460

dec_label_pc_112e8:                               ; preds = %bb159, %.thread122
  %v0_112ec.pr = load i32, i32* @r8, align 4
  %v0_112e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_112e8 = add i32 %v0_112e8, 864
  %v2_112e8 = inttoptr i32 %v1_112e8 to i32*
  %v3_112e8 = load i32, i32* %v2_112e8, align 4
  store i32 %v3_112e8, i32* %r2.global-to-local, align 4
  %v2_112ec = icmp eq i32 %v0_112ec.pr, 0
  br i1 %v2_112ec, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_112e8
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_112e8
  %v2_112f4 = urem i32 %v3_112e8, 2
  store i32 %v2_112f4, i32* %r3.global-to-local, align 4
  %v2_112f8 = icmp eq i32 %v2_112f4, 0
  br i1 %v2_112f8, label %.thread40, label %dec_label_pc_11300

dec_label_pc_11300:                               ; preds = %.thread36
  %v0_11300 = load i32, i32* @r4, align 4
  %v1_11300 = load i32, i32* %r1.global-to-local, align 4
  %v3_11300 = icmp ult i32 %v0_11300, %v1_11300
  br i1 %v3_11300, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_11300
  %v2_11304 = and i32 %v3_112e8, -2
  store i32 %v2_11304, i32* %r3.global-to-local, align 4
  store i32 %v2_11304, i32* %v2_112e8, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_11300, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %ip.global-to-local, align 4
  %v4_11314 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_11314, i32* @r7, align 4
  %v1_11318 = add i32 %v4_11314, 864
  %v2_11318 = inttoptr i32 %v1_11318 to i32*
  %v3_11318 = load i32, i32* %v2_11318, align 4
  store i32 %v3_11318, i32* %r3.global-to-local, align 4
  %v1_1131c = urem i32 %v3_11318, 2
  store i32 %v1_1131c, i32* @r6, align 4
  %v2_1131c = icmp eq i32 %v1_1131c, 0
  br i1 %v2_1131c, label %dec_label_pc_113b0, label %dec_label_pc_11324

dec_label_pc_11324:                               ; preds = %.thread40
  %v0_11324 = load i32, i32* @r8, align 4
  %v2_11324 = icmp eq i32 %v0_11324, 0
  br i1 %v2_11324, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_11324
  %v2_11328 = add i32 %v4_11314, 872
  %v3_11328 = inttoptr i32 %v2_11328 to i32*
  %v4_11328 = load i32, i32* %v3_11328, align 4
  store i32 %v4_11328, i32* %r2.global-to-local, align 4
  %v1_1132c = load i32, i32* %r1.global-to-local, align 4
  %v2_1132c = load i32, i32* @r4, align 4
  %v3_1132c = sub i32 %v2_1132c, %v1_1132c
  %v3_11330 = add i32 %v3_1132c, %v4_11328
  store i32 %v3_11330, i32* %r3.global-to-local, align 4
  store i32 %v3_11330, i32* %v3_11328, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_11324, %bb161
  %v0_11338 = load i32, i32* @r4, align 4
  %v1_11338 = urem i32 %v0_11338, 8
  store i32 %v1_11338, i32* %r3.global-to-local, align 4
  %v2_11338 = icmp eq i32 %v1_11338, 0
  br i1 %v2_11338, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_1133c = sub nsw i32 8, %v1_11338
  store i32 %v2_1133c, i32* %r3.global-to-local, align 4
  %v3_11340 = add i32 %v2_1133c, %v0_11338
  store i32 %v3_11340, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_11348 = phi i32 [ 0, %.thread43 ], [ %v2_1133c, %bb162 ]
  %v1_11344 = load i32, i32* @r5, align 4
  %v2_11344 = add i32 %v1_11344, %v0_11338
  store i32 %v2_11344, i32* @r6, align 4
  %v1_11348 = load i32, i32* @r8, align 4
  %v2_11348 = add i32 %v2_11344, %v0_11348
  %v2_1134c = add i32 %v2_11348, %v1_11348
  store i32 %v2_1134c, i32* %r1.global-to-local, align 4
  %v1_11350 = load i32, i32* %sb.global-to-local, align 4
  %v2_11350 = add i32 %v1_11350, %v2_1134c
  %v1_11354 = load i32, i32* %fp.global-to-local, align 4
  %v2_11354 = and i32 %v1_11354, %v2_11350
  store i32 %v2_11354, i32* %r2.global-to-local, align 4
  %v2_11358 = sub i32 0, %v2_11344
  store i32 %v2_11358, i32* %r3.global-to-local, align 4
  %v2_1135c = sub i32 %v2_11354, %v2_11344
  store i32 %v2_1135c, i32* @r5, align 4
  store i32 %v2_1135c, i32* %r0.global-to-local, align 4
  br i1 %v2_11338, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_11338, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_11368 = call i32 @function_12f80(i32 %v2_1135c)
  store i32 %v1_11368, i32* %r0.global-to-local, align 4
  %v3_1136c = icmp eq i32 %v1_11368, -1
  br i1 %v3_1136c, label %dec_label_pc_11374, label %dec_label_pc_11384

dec_label_pc_11374:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11378 = call i32 @function_12f80(i32 0)
  store i32 %v1_11378, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_113dc

dec_label_pc_11384:                               ; preds = %bb164
  %v1_11384 = load i32, i32* @r4, align 4
  %v3_11384 = icmp ult i32 %v1_11368, %v1_11384
  br i1 %v3_11384, label %dec_label_pc_1138c, label %dec_label_pc_113dc

dec_label_pc_1138c:                               ; preds = %dec_label_pc_11384
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r0.global-to-local, align 4
  %v4_11394 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_11394, i32* %r2.global-to-local, align 4
  %v1_11398 = add i32 %v4_11394, 864
  %v2_11398 = inttoptr i32 %v1_11398 to i32*
  %v3_11398 = load i32, i32* %v2_11398, align 4
  %v0_1139c = load i32, i32* @r6, align 4
  store i32 %v0_1139c, i32* %r0.global-to-local, align 4
  %v1_113a0 = and i32 %v3_11398, -2
  store i32 %v1_113a0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_113a0, i32* %v2_11398, align 4
  br label %dec_label_pc_113dc

dec_label_pc_113b0:                               ; preds = %.thread40
  %v0_113b0 = load i32, i32* %r0.global-to-local, align 4
  %v3_113b0 = icmp eq i32 %v0_113b0, -1
  br i1 %v3_113b0, label %dec_label_pc_113b8, label %dec_label_pc_113d4

dec_label_pc_113b8:                               ; preds = %dec_label_pc_113b0
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_113bc = call i32 @function_12f80(i32 0)
  store i32 %v1_113bc, i32* %r0.global-to-local, align 4
  %v0_113c0 = load i32, i32* @r7, align 4
  %v1_113c0 = add i32 %v0_113c0, 872
  %v2_113c0 = inttoptr i32 %v1_113c0 to i32*
  %v3_113c0 = load i32, i32* %v2_113c0, align 4
  store i32 %v3_113c0, i32* %r2.global-to-local, align 4
  %v0_113c4 = load i32, i32* @r4, align 4
  %v0_113c8 = load i32, i32* @r5, align 4
  %v2_113c4 = add i32 %v3_113c0, %v1_113bc
  %v2_113c8 = sub i32 %v2_113c4, %v0_113c4
  %v2_113cc = sub i32 %v2_113c8, %v0_113c8
  store i32 %v2_113cc, i32* %r3.global-to-local, align 4
  store i32 %v2_113cc, i32* %v2_113c0, align 4
  %v0_113d8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_113d4

dec_label_pc_113d4:                               ; preds = %dec_label_pc_113b0, %dec_label_pc_113b8
  %v0_113d8 = phi i32 [ 0, %dec_label_pc_113b0 ], [ %v0_113d8.pre, %dec_label_pc_113b8 ]
  %v0_113d4 = load i32, i32* @r4, align 4
  store i32 %v0_113d4, i32* @r7, align 4
  store i32 %v0_113d8, i32* @r5, align 4
  br label %dec_label_pc_113dc

dec_label_pc_113dc:                               ; preds = %dec_label_pc_11384, %dec_label_pc_1138c, %dec_label_pc_11374, %dec_label_pc_113d4
  %v0_113dc = load i32, i32* %r0.global-to-local, align 4
  %v7_113dc = icmp eq i32 %v0_113dc, -1
  br i1 %v7_113dc, label %dec_label_pc_11460, label %dec_label_pc_113e4

dec_label_pc_113e4:                               ; preds = %dec_label_pc_113dc
  %v1_113e4 = load i32, i32* @r5, align 4
  %v2_113e4 = add i32 %v1_113e4, %v0_113dc
  %v0_113e8 = load i32, i32* @r7, align 4
  %v2_113e8 = sub i32 %v2_113e4, %v0_113e8
  %v1_113ec = or i32 %v2_113e8, 1
  %v2_113f0 = add i32 %v0_113e8, 4
  %v3_113f0 = inttoptr i32 %v2_113f0 to i32*
  store i32 %v1_113ec, i32* %v3_113f0, align 4
  store i32 121092, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_113fc = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_113fc, i32* @r6, align 4
  %v1_11400 = add i32 %v4_113fc, 872
  %v2_11400 = inttoptr i32 %v1_11400 to i32*
  %v3_11400 = load i32, i32* %v2_11400, align 4
  %v0_11404 = load i32, i32* @r8, align 4
  %v2_11404 = icmp eq i32 %v0_11404, 0
  %v0_11408 = load i32, i32* @r5, align 4
  %v2_11408 = add i32 %v0_11408, %v3_11400
  store i32 %v2_11408, i32* %r3.global-to-local, align 4
  store i32 %v2_11408, i32* %v2_11400, align 4
  %v0_11410 = load i32, i32* @r7, align 4
  %v1_11410 = load i32, i32* @r6, align 4
  %v2_11410 = add i32 %v1_11410, 44
  %v3_11410 = inttoptr i32 %v2_11410 to i32*
  store i32 %v0_11410, i32* %v3_11410, align 4
  br i1 %v2_11404, label %dec_label_pc_11460, label %dec_label_pc_11418

dec_label_pc_11418:                               ; preds = %dec_label_pc_113e4
  %v0_1141c = load i32, i32* @r8, align 4
  %v1_1141c = add i32 %v0_1141c, -12
  %v1_11420 = and i32 %v1_1141c, -8
  store i32 %v3_111e8, i32* %ip.global-to-local, align 4
  %v2_11428 = add i32 %v1_11420, %v3_111e8
  store i32 %v2_11428, i32* %r1.global-to-local, align 4
  %v2_1142c = icmp ugt i32 %v1_11420, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_11434 = or i32 %v1_11420, 1
  store i32 %v1_11434, i32* %r3.global-to-local, align 4
  store i32 %v1_11434, i32* %v2_111f4, align 4
  %v0_1143c = load i32, i32* %r2.global-to-local, align 4
  %v1_1143c = load i32, i32* %r1.global-to-local, align 4
  %v2_1143c = add i32 %v1_1143c, 8
  %v3_1143c = inttoptr i32 %v2_1143c to i32*
  store i32 %v0_1143c, i32* %v3_1143c, align 4
  %v0_11440 = load i32, i32* %r2.global-to-local, align 4
  %v1_11440 = load i32, i32* %r1.global-to-local, align 4
  %v2_11440 = add i32 %v1_11440, 4
  %v3_11440 = inttoptr i32 %v2_11440 to i32*
  store i32 %v0_11440, i32* %v3_11440, align 4
  br i1 %v2_1142c, label %dec_label_pc_11448, label %dec_label_pc_11460

dec_label_pc_11448:                               ; preds = %dec_label_pc_11418
  %v0_11448 = load i32, i32* @r6, align 4
  %v1_11448 = add i32 %v0_11448, 836
  %v2_11448 = inttoptr i32 %v1_11448 to i32*
  %v3_11448 = load i32, i32* %v2_11448, align 4
  store i32 %v3_11448, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_11450 = load i32, i32* %ip.global-to-local, align 4
  %v1_11450 = add i32 %v0_11450, 8
  store i32 %v1_11450, i32* @r0, align 4
  store i32 -1, i32* %v2_11448, align 4
  %v0_11458 = call i32 @function_11c74()
  store i32 %v0_11458, i32* %r0.global-to-local, align 4
  %v0_1145c = load i32, i32* @r4, align 4
  %v1_1145c = load i32, i32* @r6, align 4
  %v2_1145c = add i32 %v1_1145c, 836
  %v3_1145c = inttoptr i32 %v2_1145c to i32*
  store i32 %v0_1145c, i32* %v3_1145c, align 4
  br label %dec_label_pc_11460

dec_label_pc_11460:                               ; preds = %.thread34, %dec_label_pc_11418, %dec_label_pc_113e4, %dec_label_pc_113dc, %dec_label_pc_11448
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r0.global-to-local, align 4
  %v4_11468 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_11468, i32* %lr.global-to-local, align 4
  %v1_1146c = add i32 %v4_11468, 872
  store i32 %v1_1146c, i32* %r1.global-to-local, align 4
  %v1_11470 = inttoptr i32 %v1_1146c to i32*
  %v2_11470 = load i32, i32* %v1_11470, align 4
  store i32 %v2_11470, i32* %r1.global-to-local, align 4
  %v3_11470 = add i32 %v4_11468, 876
  %v4_11470 = inttoptr i32 %v3_11470 to i32*
  %v5_11470 = load i32, i32* %v4_11470, align 4
  store i32 %v5_11470, i32* %r3.global-to-local, align 4
  %v1_11478 = add i32 %v4_11468, 868
  %v2_11478 = inttoptr i32 %v1_11478 to i32*
  %v3_11478 = load i32, i32* %v2_11478, align 4
  store i32 %v3_11478, i32* %r3.global-to-local, align 4
  %v1_1147c = add i32 %v4_11468, 884
  %v2_1147c = inttoptr i32 %v1_1147c to i32*
  %v3_1147c = load i32, i32* %v2_1147c, align 4
  store i32 %v3_1147c, i32* %r2.global-to-local, align 4
  %v2_11480 = add i32 %v3_11478, %v2_11470
  store i32 %v2_11480, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_11470, %v5_11470
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_11460
  store i32 %v2_11470, i32* %v4_11470, align 4
  %v0_11488.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_11488.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_11460, %bb165
  %v1_11488 = phi i32 [ %v3_1147c, %dec_label_pc_11460 ], [ %v1_11488.pre, %bb165 ]
  %v4_1148c = phi i32 [ %v2_11480, %dec_label_pc_11460 ], [ %v0_11488.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_1148c, %v1_11488
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_1148c = load i32, i32* %lr.global-to-local, align 4
  %v6_1148c = add i32 %v5_1148c, 884
  %v7_1148c = inttoptr i32 %v6_1148c to i32*
  store i32 %v4_1148c, i32* %v7_1148c, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_11490 = load i32, i32* %lr.global-to-local, align 4
  %v1_11490 = add i32 %v0_11490, 44
  %v2_11490 = inttoptr i32 %v1_11490 to i32*
  %v3_11490 = load i32, i32* %v2_11490, align 4
  store i32 %v3_11490, i32* %ip.global-to-local, align 4
  %v1_11494 = add i32 %v3_11490, 4
  %v2_11494 = inttoptr i32 %v1_11494 to i32*
  %v3_11494 = load i32, i32* %v2_11494, align 4
  store i32 %v1_110a8, i32* %r1.global-to-local, align 4
  %v1_1149c = and i32 %v3_11494, -4
  store i32 %v1_1149c, i32* %r3.global-to-local, align 4
  %v3_114a0 = icmp ult i32 %v1_1149c, %v1_110a8
  br i1 %v3_114a0, label %dec_label_pc_114cc, label %dec_label_pc_114a8

dec_label_pc_114a8:                               ; preds = %bb168
  %v0_114a8 = load i32, i32* @sl, align 4
  %v2_114a8 = sub i32 %v1_1149c, %v0_114a8
  %v2_114ac = add i32 %v0_114a8, %v3_11490
  store i32 %v2_114ac, i32* %r1.global-to-local, align 4
  %v1_114b0 = or i32 %v2_114a8, 1
  store i32 %v1_114b0, i32* %r3.global-to-local, align 4
  %v1_114b4 = or i32 %v0_114a8, 1
  store i32 %v1_114b4, i32* %r2.global-to-local, align 4
  %v1_114b8 = add i32 %v3_11490, 8
  store i32 %v1_114b8, i32* %r0.global-to-local, align 4
  store i32 %v1_114b4, i32* %v2_11494, align 4
  %v0_114c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_114c0 = load i32, i32* %lr.global-to-local, align 4
  %v2_114c0 = add i32 %v1_114c0, 44
  %v3_114c0 = inttoptr i32 %v2_114c0 to i32*
  store i32 %v0_114c0, i32* %v3_114c0, align 4
  %v0_114c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_114c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_114c4 = add i32 %v1_114c4, 4
  %v3_114c4 = inttoptr i32 %v2_114c4 to i32*
  store i32 %v0_114c4, i32* %v3_114c4, align 4
  br label %dec_label_pc_114dc

dec_label_pc_114cc:                               ; preds = %bb157, %bb168, %dec_label_pc_112a8
  %v0_114cc = call i32 @function_10600()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_114d4 = inttoptr i32 %v0_114cc to i32*
  store i32 12, i32* %v2_114d4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_114dc

dec_label_pc_114dc:                               ; preds = %bb151, %bb150, %dec_label_pc_114a8, %dec_label_pc_110f0, %dec_label_pc_114cc
  %v0_114dc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_114dc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_114e0

dec_label_pc_114e0:                               ; preds = %.thread1, %dec_label_pc_110bc, %.thread121, %dec_label_pc_10f2c, %dec_label_pc_10f20, %dec_label_pc_10d88, %dec_label_pc_10d0c, %dec_label_pc_114dc
  store i32 %v2_10c34, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 121092, i32* %r2.global-to-local, align 4
  %v4_114f0 = load i32, i32* inttoptr (i32 121116 to i32*), align 4
  store i32 %v4_114f0, i32* @ip, align 4
  store i32 70908, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_114f0)
  br label %dec_label_pc_114fc

dec_label_pc_114fc:                               ; preds = %dec_label_pc_10c6c, %dec_label_pc_114e0
  %v0_114fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_114fc, i32* %r0.global-to-local, align 4
  store i32 %v3_10c08, i32* @r4, align 4
  store i32 %v6_10c08, i32* @r5, align 4
  store i32 %v9_10c08, i32* @r6, align 4
  store i32 %v12_10c08, i32* @r7, align 4
  store i32 %v15_10c08, i32* @r8, align 4
  store i32 %v18_10c08, i32* @sb, align 4
  store i32 %v21_10c08, i32* @sl, align 4
  store i32 %v24_10c08, i32* @fp, align 4
  store i32 %v27_10c08, i32* @lr, align 4
  ret i32 %v0_114fc

; uselistorder directives
  uselistorder i32 %v0_114a8, { 1, 0, 2 }
  uselistorder i32 %v3_11490, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1148c, { 1, 0 }
  uselistorder i32 %v2_11470, { 2, 0, 1, 3 }
  uselistorder i32 %v4_11468, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_11420, { 1, 2, 0 }
  uselistorder i32 %v0_113e8, { 1, 0 }
  uselistorder i32 %v0_113dc, { 1, 0 }
  uselistorder i32 %v2_113cc, { 1, 0 }
  uselistorder i32 %v2_1135c, { 2, 1, 0 }
  uselistorder i32 %v2_11344, { 1, 2, 0, 3 }
  uselistorder i32 %v2_1133c, { 1, 0, 2 }
  uselistorder i32 %v1_11338, { 2, 1, 0 }
  uselistorder i32 %v0_11338, { 3, 1, 2, 0 }
  uselistorder i32 %v1_1131c, { 1, 0 }
  uselistorder i32 %v2_112f4, { 1, 0 }
  uselistorder i32 %v3_112e8, { 1, 0, 2 }
  uselistorder i32 %v2_112c8, { 1, 0, 2 }
  uselistorder i32* %v2_112c0, { 1, 0, 2 }
  uselistorder i32 %v0_112a8, { 1, 0 }
  uselistorder i32 %v6_11284, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11270, { 2, 1, 0 }
  uselistorder i32 %v0_11258, { 1, 0 }
  uselistorder i32 %v2_11214, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11210, { 1, 0 }
  uselistorder i32 %v3_111e8, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_111c8, { 1, 0, 2 }
  uselistorder i32 %v2_111b0, { 1, 2, 0, 3 }
  uselistorder i32 %v1_11158, { 2, 1, 0 }
  uselistorder i32 %v6_1114c, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_11128, { 2, 1, 0, 3 }
  uselistorder i32 %v3_110e8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_110a8, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_110a0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1109c, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_11088, { 1, 0 }
  uselistorder i32 %v7_11048, { 1, 0 }
  uselistorder i32 %v4_11048, { 1, 0 }
  uselistorder i32 %v0_11018, { 1, 0 }
  uselistorder i32 %v2_10fec, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_10fe854, { 1, 0 }
  uselistorder i32 %v1_10fb4, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_10f9c., { 1, 2, 0 }
  uselistorder i32 %v0_10fa4, { 0, 1, 3, 2 }
  uselistorder i32 %v1_10fa4, { 1, 0 }
  uselistorder i32 %v3_10f84, { 1, 0 }
  uselistorder i32 %v4_10f80, { 1, 0, 2 }
  uselistorder i32 %v1_10ef0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10f48, { 1, 0 }
  uselistorder i32 %v1_10f2c, { 1, 0 }
  uselistorder i32 %v1_10dcc, { 1, 0 }
  uselistorder i32 %v0_10f0c, { 2, 0, 1, 3 }
  uselistorder i32 %v3_10ed4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_10f68.pre, { 1, 2, 0 }
  uselistorder i32 %v0_10eb0, { 2, 1, 0 }
  uselistorder i32 %v3_10ea4, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_10dc4, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_10e6c, { 1, 0 }
  uselistorder i32 %v3_10e60, { 1, 0 }
  uselistorder i32 %v0_10e6c, { 1, 0 }
  uselistorder i32 %v3_10e44, { 0, 2, 3, 1 }
  uselistorder i32 %v2_10e34, { 1, 0, 2 }
  uselistorder i32 %v3_10dec, { 2, 1, 0 }
  uselistorder i32 %v0_10ddc, { 3, 2, 1, 0 }
  uselistorder i32 %v0_10dac, { 1, 0 }
  uselistorder i32 %v1_10d60, { 2, 1, 0, 3 }
  uselistorder i32 %v0_10d5c, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_10d00, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_10cf4, { 1, 0 }
  uselistorder i32 %v3_10cc4, { 1, 0 }
  uselistorder i32 %v0_10cb8, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_10c98, { 0, 2, 1, 3 }
  uselistorder i1 %v7_10c8c, { 1, 0 }
  uselistorder i32 %v0_10c64, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 40, 41, 42, 44, 45, 46, 47, 0, 1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 89, 76, 77, 78, 79, 80, 82, 83, 84, 85, 109, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32* %r0.global-to-local, { 8, 6, 30, 7, 9, 10, 3, 22, 14, 11, 23, 12, 13, 16, 15, 20, 17, 24, 19, 18, 25, 21, 2, 27, 26, 28, 1, 29, 31, 36, 32, 33, 4, 34, 35, 37, 38, 39, 42, 43, 40, 41, 48, 45, 44, 46, 47, 49, 0, 50, 51, 52, 53, 5, 54, 57, 56, 55 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 11, 10, 12, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0, 22, 23, 34, 33, 41, 24, 42, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_12cf4, { 1, 0 }
  uselistorder i32 34, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_10b90, { 1, 0 }
  uselistorder label %dec_label_pc_114fc, { 1, 0 }
  uselistorder label %dec_label_pc_114e0, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_114dc, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_114cc, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_11460, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_113dc, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_113d4, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_112a8, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_111dc, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_11094, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_10fe8, { 1, 0 }
  uselistorder label %dec_label_pc_10ff0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10fb4, { 1, 0 }
  uselistorder label %dec_label_pc_10f68, { 1, 0 }
  uselistorder label %dec_label_pc_10efc, { 1, 0 }
  uselistorder label %dec_label_pc_10ef8, { 1, 0 }
  uselistorder label %dec_label_pc_10ea4, { 1, 0 }
  uselistorder label %dec_label_pc_10e90, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10e58, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_10e44, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_11510(i32 %arg1) local_unnamed_addr {
dec_label_pc_11510:
  %v0_11510 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11510, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_11510
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11510, %bb
  %v10_11524 = phi i32 [ %arg1, %dec_label_pc_11510 ], [ 0, %bb ]
  ret i32 %v10_11524

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_11528(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11528:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_11528 = load i32, i32* @r4, align 4
  %v6_11528 = load i32, i32* @r5, align 4
  %v9_11528 = load i32, i32* @r6, align 4
  %v12_11528 = load i32, i32* @lr, align 4
  %v2_11530 = icmp eq i32 %arg1, 0
  store i32 121092, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_11540 = mul i32 %arg2, %arg1
  store i32 %v2_11540, i32* @r6, align 4
  br i1 %v2_11530, label %dec_label_pc_11570, label %dec_label_pc_11548

dec_label_pc_11548:                               ; preds = %dec_label_pc_11528
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_11540, i32* @r0, align 4
  %v0_11550 = call i32 @function_fca8()
  %v0_11554 = load i32, i32* @r4, align 4
  %v9_11554 = icmp eq i32 %v0_11554, %v0_11550
  br i1 %v9_11554, label %dec_label_pc_11548.dec_label_pc_11570_crit_edge, label %dec_label_pc_1155c

dec_label_pc_11548.dec_label_pc_11570_crit_edge:  ; preds = %dec_label_pc_11548
  %v0_11574.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11570

dec_label_pc_1155c:                               ; preds = %dec_label_pc_11548
  %v0_1155c = call i32 @function_10600()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_11568 = inttoptr i32 %v0_1155c to i32*
  store i32 12, i32* %v2_11568, align 4
  br label %dec_label_pc_11634

dec_label_pc_11570:                               ; preds = %dec_label_pc_11548.dec_label_pc_11570_crit_edge, %dec_label_pc_11528
  %v0_1158c = phi i32 [ %v0_11574.pre, %dec_label_pc_11548.dec_label_pc_11570_crit_edge ], [ 121092, %dec_label_pc_11528 ]
  %v2_11574 = add i32 %v0_1158c, 68
  %v3_11574 = inttoptr i32 %v2_11574 to i32*
  %v4_11574 = load i32, i32* %v3_11574, align 4
  store i32 %v4_11574, i32* @r4, align 4
  %v2_1158c = add i32 %v0_1158c, 72
  %v3_1158c = inttoptr i32 %v2_1158c to i32*
  %v4_1158c = load i32, i32* %v3_1158c, align 4
  store i32 %v4_1158c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1158c)
  %v0_115a0 = load i32, i32* @r5, align 4
  %v2_115a0 = add i32 %v0_115a0, 16
  %v3_115a0 = inttoptr i32 %v2_115a0 to i32*
  %v4_115a0 = load i32, i32* %v3_115a0, align 4
  store i32 %v4_115a0, i32* %ip.global-to-local, align 4
  store i32 71084, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_115a0)
  %v0_115ac = load i32, i32* @r6, align 4
  store i32 %v0_115ac, i32* @r0, align 4
  %v0_115b0 = call i32 @function_10c08()
  store i32 %v0_115b0, i32* %r4.global-to-local, align 4
  %v2_115b4 = icmp eq i32 %v0_115b0, 0
  br i1 %v2_115b4, label %.thread, label %dec_label_pc_115bc

dec_label_pc_115bc:                               ; preds = %dec_label_pc_11570
  %v1_115bc = add i32 %v0_115b0, -4
  %v2_115bc = inttoptr i32 %v1_115bc to i32*
  %v3_115bc = load i32, i32* %v2_115bc, align 4
  %v1_115c0 = and i32 %v3_115bc, 2
  %v2_115c0 = icmp eq i32 %v1_115c0, 0
  br i1 %v2_115c0, label %dec_label_pc_115c8, label %.thread

dec_label_pc_115c8:                               ; preds = %dec_label_pc_115bc
  %v1_115c87 = add i32 %v3_115bc, -4
  %v1_115cc = and i32 %v1_115c87, -4
  store i32 %v1_115cc, i32* @r2, align 4
  %v3_115d0 = udiv i32 %v1_115cc, 4
  store i32 %v3_115d0, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_115cc, 36
  %v2_115d8 = icmp ult i32 %v1_115cc, 33
  %v3_115d8 = or i1 %tmp, %v2_115d8
  br i1 %v3_115d8, label %dec_label_pc_115e4, label %dec_label_pc_115dc

dec_label_pc_115dc:                               ; preds = %dec_label_pc_115c8
  %v2_115dc = inttoptr i32 %v0_115b0 to i8*
  %v3_115dc = call i32 @function_10650(i8* %v2_115dc, i32 0)
  br label %.thread

dec_label_pc_115e4:                               ; preds = %dec_label_pc_115c8
  %tmp8 = icmp eq i32 %v1_115cc, 16
  %v2_115e8 = inttoptr i32 %v0_115b0 to i32*
  store i32 0, i32* %v2_115e8, align 4
  %v1_115ec = load i32, i32* %r4.global-to-local, align 4
  %v2_115ec = add i32 %v1_115ec, 4
  %v3_115ec = inttoptr i32 %v2_115ec to i32*
  store i32 0, i32* %v3_115ec, align 4
  %v1_115f0 = load i32, i32* %r4.global-to-local, align 4
  %v2_115f0 = add i32 %v1_115f0, 8
  %v3_115f0 = inttoptr i32 %v2_115f0 to i32*
  store i32 0, i32* %v3_115f0, align 4
  %v2_115f4 = icmp ult i32 %v1_115cc, 13
  %v3_115f4 = or i1 %tmp8, %v2_115f4
  br i1 %v3_115f4, label %.thread, label %dec_label_pc_115f8

dec_label_pc_115f8:                               ; preds = %dec_label_pc_115e4
  %v0_115f8 = load i32, i32* %ip.global-to-local, align 4
  %v1_115fc = load i32, i32* %r4.global-to-local, align 4
  %v2_115fc = add i32 %v1_115fc, 12
  %v3_115fc = inttoptr i32 %v2_115fc to i32*
  store i32 0, i32* %v3_115fc, align 4
  %v1_11600 = load i32, i32* %r4.global-to-local, align 4
  %v2_11600 = add i32 %v1_11600, 16
  %v3_11600 = inttoptr i32 %v2_11600 to i32*
  store i32 0, i32* %v3_11600, align 4
  %tmp9 = icmp ult i32 %v0_115f8, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_11608

dec_label_pc_11608:                               ; preds = %dec_label_pc_115f8
  %v0_11608 = load i32, i32* %ip.global-to-local, align 4
  %v7_11608 = icmp eq i32 %v0_11608, 9
  %v1_1160c = load i32, i32* %r4.global-to-local, align 4
  %v2_1160c = add i32 %v1_1160c, 20
  %v3_1160c = inttoptr i32 %v2_1160c to i32*
  store i32 0, i32* %v3_1160c, align 4
  %v1_11610 = load i32, i32* %r4.global-to-local, align 4
  %v2_11610 = add i32 %v1_11610, 24
  %v3_11610 = inttoptr i32 %v2_11610 to i32*
  store i32 0, i32* %v3_11610, align 4
  br i1 %v7_11608, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_11608
  %v2_11614 = load i32, i32* %r4.global-to-local, align 4
  %v3_11614 = add i32 %v2_11614, 32
  %v4_11614 = inttoptr i32 %v3_11614 to i32*
  store i32 0, i32* %v4_11614, align 4
  %v2_11618 = load i32, i32* %r4.global-to-local, align 4
  %v3_11618 = add i32 %v2_11618, 28
  %v4_11618 = inttoptr i32 %v3_11618 to i32*
  store i32 0, i32* %v4_11618, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11608, %dec_label_pc_115bc, %dec_label_pc_115f8, %dec_label_pc_115e4, %dec_label_pc_11570, %dec_label_pc_115dc, %bb
  %v0_11628 = load i32, i32* @r5, align 4
  %v2_11628 = add i32 %v0_11628, 24
  %v3_11628 = inttoptr i32 %v2_11628 to i32*
  %v4_11628 = load i32, i32* %v3_11628, align 4
  store i32 %v4_11628, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_11628)
  br label %dec_label_pc_11634

dec_label_pc_11634:                               ; preds = %dec_label_pc_1155c, %.thread
  %v0_11634 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_11528, i32* @r4, align 4
  store i32 %v6_11528, i32* @r5, align 4
  store i32 %v9_11528, i32* @r6, align 4
  store i32 %v12_11528, i32* @lr, align 4
  ret i32 %v0_11634

; uselistorder directives
  uselistorder i32 %v1_115cc, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v0_115b0, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 33, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11634, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_11648(i32 %arg1) local_unnamed_addr {
dec_label_pc_11648:
  %v0_11648 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11648, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_11648
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11648, %bb
  %v10_11658 = phi i32 [ %arg1, %dec_label_pc_11648 ], [ 0, %bb ]
  ret i32 %v10_11658

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_1165c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1165c:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_1165c = load i32, i32* @r4, align 4
  %v6_1165c = load i32, i32* @r5, align 4
  %v9_1165c = load i32, i32* @r6, align 4
  %v12_1165c = load i32, i32* @r7, align 4
  %v15_1165c = load i32, i32* @r8, align 4
  %v18_1165c = load i32, i32* @sb, align 4
  %v21_1165c = load i32, i32* @sl, align 4
  %v24_1165c = load i32, i32* @fp, align 4
  %v27_1165c = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_11668 = icmp eq i32* %arg1, null
  store i32 121092, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_11668, label %dec_label_pc_1167c, label %dec_label_pc_1168c

dec_label_pc_1167c:                               ; preds = %dec_label_pc_1165c
  store i32 %arg2, i32* @r0, align 4
  %v0_11680 = call i32 @function_10c08()
  store i32 %v0_11680, i32* %r0.global-to-local, align 4
  store i32 %v0_11680, i32* @r4, align 4
  br label %dec_label_pc_119e4

dec_label_pc_1168c:                               ; preds = %dec_label_pc_1165c
  %v2_1168c = icmp eq i32 %arg2, 0
  br i1 %v2_1168c, label %dec_label_pc_11694, label %dec_label_pc_116a0

dec_label_pc_11694:                               ; preds = %dec_label_pc_1168c
  %v0_11694 = call i32 @function_11c74()
  store i32 %v0_11694, i32* %r0.global-to-local, align 4
  %v0_11698 = load i32, i32* @r6, align 4
  store i32 %v0_11698, i32* @r4, align 4
  br label %dec_label_pc_119e4

dec_label_pc_116a0:                               ; preds = %dec_label_pc_1168c
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_116a8 = load i32, i32* inttoptr (i32 121160 to i32*), align 8
  store i32 %v4_116a8, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_116a8, i32* %r2.global-to-local, align 4
  %v4_116b4 = load i32, i32* inttoptr (i32 121128 to i32*), align 8
  store i32 %v4_116b4, i32* %r1.global-to-local, align 4
  %v2_116b8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_116b8, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_116c0 = load i32, i32* inttoptr (i32 121164 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_116c0)
  %v0_116cc = load i32, i32* @r4, align 4
  store i32 %v0_116cc, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r1.global-to-local, align 4
  %v4_116d8 = load i32, i32* inttoptr (i32 121108 to i32*), align 4
  store i32 %v4_116d8, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_116e4.345 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_116d8)
  %v0_116e4 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_116e4, -32
  br i1 %tmp36, label %dec_label_pc_11700, label %dec_label_pc_116ec

dec_label_pc_116ec:                               ; preds = %dec_label_pc_116a0
  %v0_116ec = call i32 @function_10600()
  store i32 %v0_116ec, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_116f8 = inttoptr i32 %v0_116ec to i32*
  store i32 12, i32* %v2_116f8, align 4
  br label %dec_label_pc_119e4

dec_label_pc_11700:                               ; preds = %dec_label_pc_116a0
  %v1_11700 = add i32 %v0_116e4, 11
  store i32 %v1_11700, i32* %r0.global-to-local, align 4
  %v0_11704 = load i32, i32* @r5, align 4
  %v1_11704 = add i32 %v0_11704, -4
  %v2_11704 = inttoptr i32 %v1_11704 to i32*
  %v3_11704 = load i32, i32* %v2_11704, align 4
  store i32 %v3_11704, i32* %r2.global-to-local, align 4
  %v2_11708 = icmp ugt i32 %v1_11700, 14
  %v7_11708 = icmp eq i32 %v1_11700, 15
  %v2_1170c = xor i1 %v2_11708, true
  %v3_1170c = or i1 %v7_11708, %v2_1170c
  br i1 %v3_1170c, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_11700
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_11700, %bb
  %v2_11710 = xor i1 %v7_11708, true
  %v3_11710 = and i1 %v2_11708, %v2_11710
  br i1 %v3_11710, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_11710 = and i32 %v1_11700, -8
  store i32 %v5_11710, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_11714 = and i32 %v3_11704, 2
  %v2_11714 = icmp eq i32 %v1_11714, 0
  %v1_11718 = add i32 %v0_11704, -8
  store i32 %v1_11718, i32* @sl, align 4
  %v1_1171c = and i32 %v3_11704, -4
  store i32 %v1_1171c, i32* @r6, align 4
  br i1 %v2_11714, label %dec_label_pc_11724, label %dec_label_pc_118fc

dec_label_pc_11724:                               ; preds = %bb29
  %v1_11724 = load i32, i32* @sb, align 4
  %v3_11724 = icmp ult i32 %v1_1171c, %v1_11724
  br i1 %v3_11724, label %dec_label_pc_11730, label %bb30

bb30:                                             ; preds = %dec_label_pc_11724
  store i32 %v1_1171c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11894

dec_label_pc_11730:                               ; preds = %dec_label_pc_11724
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11738 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_11738, i32* %r0.global-to-local, align 4
  %v1_1173c = add i32 %v4_11738, 44
  %v2_1173c = inttoptr i32 %v1_1173c to i32*
  %v3_1173c = load i32, i32* %v2_1173c, align 4
  store i32 %v3_1173c, i32* %r3.global-to-local, align 4
  %v2_11740 = add i32 %v1_1171c, %v1_11718
  store i32 %v2_11740, i32* @r4, align 4
  %v9_11744 = icmp eq i32 %v2_11740, %v3_1173c
  %v1_11748 = add i32 %v2_11740, 4
  %v2_11748 = inttoptr i32 %v1_11748 to i32*
  %v3_11748 = load i32, i32* %v2_11748, align 4
  store i32 %v3_11748, i32* %r1.global-to-local, align 4
  br i1 %v9_11744, label %dec_label_pc_11750, label %dec_label_pc_1178c

dec_label_pc_11750:                               ; preds = %dec_label_pc_11730
  %v1_11750 = and i32 %v3_11748, -4
  %v2_11754 = add i32 %v1_11750, %v1_1171c
  store i32 %v2_11754, i32* %r1.global-to-local, align 4
  %v1_11758 = add i32 %v1_11724, 16
  store i32 %v1_11758, i32* %r3.global-to-local, align 4
  %v3_1175c = icmp ult i32 %v2_11754, %v1_11758
  br i1 %v3_1175c, label %dec_label_pc_117e0, label %dec_label_pc_11764

dec_label_pc_11764:                               ; preds = %dec_label_pc_11750
  %v2_11764 = sub i32 %v2_11754, %v1_11724
  %v1_11768 = urem i32 %v3_11704, 2
  %v2_1176c = add i32 %v1_11724, %v1_11718
  store i32 %v2_1176c, i32* %r1.global-to-local, align 4
  %v2_11770 = or i32 %v1_11724, %v1_11768
  store i32 %v2_11770, i32* %r2.global-to-local, align 4
  %v1_11774 = or i32 %v2_11764, 1
  store i32 %v1_11774, i32* %r3.global-to-local, align 4
  store i32 %v0_11704, i32* @r4, align 4
  store i32 %v2_11770, i32* %v2_11704, align 4
  %v0_11780 = load i32, i32* %r1.global-to-local, align 4
  %v1_11780 = load i32, i32* %r0.global-to-local, align 4
  %v2_11780 = add i32 %v1_11780, 44
  %v3_11780 = inttoptr i32 %v2_11780 to i32*
  store i32 %v0_11780, i32* %v3_11780, align 4
  %v0_11784 = load i32, i32* %r3.global-to-local, align 4
  %v1_11784 = load i32, i32* %r1.global-to-local, align 4
  %v2_11784 = add i32 %v1_11784, 4
  %v3_11784 = inttoptr i32 %v2_11784 to i32*
  store i32 %v0_11784, i32* %v3_11784, align 4
  br label %dec_label_pc_119c8

dec_label_pc_1178c:                               ; preds = %dec_label_pc_11730
  %v1_1178c = and i32 %v3_11748, -2
  %v2_11790 = add i32 %v1_1178c, %v2_11740
  store i32 %v2_11790, i32* %r3.global-to-local, align 4
  %v1_11794 = add i32 %v2_11790, 4
  %v2_11794 = inttoptr i32 %v1_11794 to i32*
  %v3_11794 = load i32, i32* %v2_11794, align 4
  store i32 %v3_11794, i32* %r3.global-to-local, align 4
  %v1_11798 = urem i32 %v3_11794, 2
  %v2_11798 = icmp eq i32 %v1_11798, 0
  br i1 %v2_11798, label %dec_label_pc_117a0, label %dec_label_pc_117e0

dec_label_pc_117a0:                               ; preds = %dec_label_pc_1178c
  %v1_117a0 = and i32 %v3_11748, -4
  store i32 %v1_117a0, i32* %r3.global-to-local, align 4
  %v2_117a4 = add i32 %v1_117a0, %v1_1171c
  store i32 %v2_117a4, i32* %r0.global-to-local, align 4
  %v3_117a8 = icmp ult i32 %v2_117a4, %v1_11724
  br i1 %v3_117a8, label %dec_label_pc_117e0, label %dec_label_pc_117b0

dec_label_pc_117b0:                               ; preds = %dec_label_pc_117a0
  %v1_117b0 = add i32 %v1_1171c, %v0_11704
  %v2_117b0 = inttoptr i32 %v1_117b0 to i32*
  %v3_117b0 = load i32, i32* %v2_117b0, align 4
  store i32 %v3_117b0, i32* %r1.global-to-local, align 4
  %v1_117b4 = add i32 %v3_117b0, 12
  %v2_117b4 = inttoptr i32 %v1_117b4 to i32*
  %v3_117b4 = load i32, i32* %v2_117b4, align 4
  store i32 %v3_117b4, i32* %r3.global-to-local, align 4
  %v9_117b8 = icmp eq i32 %v3_117b4, %v2_11740
  %v1_117bc = add i32 %v2_11740, 12
  %v2_117bc = inttoptr i32 %v1_117bc to i32*
  %v3_117bc = load i32, i32* %v2_117bc, align 4
  store i32 %v3_117bc, i32* %r2.global-to-local, align 4
  br i1 %v9_117b8, label %dec_label_pc_117c4, label %dec_label_pc_117d0

dec_label_pc_117c4:                               ; preds = %dec_label_pc_117b0
  %v1_117c4 = add i32 %v3_117bc, 8
  %v2_117c4 = inttoptr i32 %v1_117c4 to i32*
  %v3_117c4 = load i32, i32* %v2_117c4, align 4
  store i32 %v3_117c4, i32* %r3.global-to-local, align 4
  %v9_117c8 = icmp eq i32 %v3_117c4, %v2_11740
  br i1 %v9_117c8, label %dec_label_pc_117d4, label %dec_label_pc_117d0

dec_label_pc_117d0:                               ; preds = %dec_label_pc_117b0, %dec_label_pc_117c4
  %v0_117d0 = call i32 @function_11ef0()
  store i32 %v0_117d0, i32* %r0.global-to-local, align 4
  %v0_117d4.pre = load i32, i32* @r1, align 4
  %v1_117d4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_117d4

dec_label_pc_117d4:                               ; preds = %dec_label_pc_117c4, %dec_label_pc_117d0
  %v1_117d4 = phi i32 [ %v3_117bc, %dec_label_pc_117c4 ], [ %v1_117d4.pre, %dec_label_pc_117d0 ]
  %v0_117d4 = phi i32 [ %v3_117b0, %dec_label_pc_117c4 ], [ %v0_117d4.pre, %dec_label_pc_117d0 ]
  %v2_117d4 = add i32 %v1_117d4, 8
  %v3_117d4 = inttoptr i32 %v2_117d4 to i32*
  store i32 %v0_117d4, i32* %v3_117d4, align 4
  %v0_117d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_117d8 = load i32, i32* %r1.global-to-local, align 4
  %v2_117d8 = add i32 %v1_117d8, 12
  %v3_117d8 = inttoptr i32 %v2_117d8 to i32*
  store i32 %v0_117d8, i32* %v3_117d8, align 4
  %v1_11894.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11894

dec_label_pc_117e0:                               ; preds = %dec_label_pc_11750, %dec_label_pc_117a0, %dec_label_pc_1178c
  %v1_117e0 = add i32 %v1_11724, -7
  store i32 %v1_117e0, i32* @r0, align 4
  %v0_117e4 = call i32 @function_10c08()
  store i32 %v0_117e4, i32* @r0, align 4
  store i32 %v0_117e4, i32* %r1.global-to-local, align 4
  %v2_117e8 = icmp eq i32 %v0_117e4, 0
  br i1 %v2_117e8, label %bb31, label %dec_label_pc_117f4

bb31:                                             ; preds = %dec_label_pc_117e0
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_119c8

dec_label_pc_117f4:                               ; preds = %dec_label_pc_117e0
  %v1_117fc.pre = load i32, i32* @r4, align 4
  %v1_117f4 = add i32 %v0_117e4, -4
  %v2_117f4 = inttoptr i32 %v1_117f4 to i32*
  %v3_117f4 = load i32, i32* %v2_117f4, align 4
  store i32 %v3_117f4, i32* @r3, align 4
  %v1_117f8 = add i32 %v0_117e4, -8
  store i32 %v1_117f8, i32* @r7, align 4
  %v9_117fc = icmp eq i32 %v1_117f8, %v1_117fc.pre
  br i1 %v9_117fc, label %.thread2, label %dec_label_pc_1180c

.thread2:                                         ; preds = %dec_label_pc_117f4
  %v2_11800 = and i32 %v3_117f4, -4
  store i32 %v2_11800, i32* %r3.global-to-local, align 4
  %v2_11804 = load i32, i32* @r6, align 4
  %v3_11804 = add i32 %v2_11804, %v2_11800
  store i32 %v3_11804, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11894

dec_label_pc_1180c:                               ; preds = %dec_label_pc_117f4
  %v0_1180c = load i32, i32* @r6, align 4
  %v1_1180c = add i32 %v0_1180c, -4
  store i32 %v1_1180c, i32* @r2, align 4
  %v3_11810 = udiv i32 %v1_1180c, 4
  store i32 %v3_11810, i32* @ip, align 4
  %tmp37 = and i32 %v1_1180c, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_11818 = icmp ult i32 %v1_1180c, 36
  %v3_11818 = or i1 %tmp38, %v2_11818
  %v0_11828 = load i32, i32* @r5, align 4
  br i1 %v3_11818, label %dec_label_pc_11828, label %dec_label_pc_1181c

dec_label_pc_1181c:                               ; preds = %dec_label_pc_1180c
  store i32 %v0_11828, i32* @r1, align 4
  %v0_11820 = call i32 @function_10700()
  store i32 %v0_11820, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_11828:                               ; preds = %dec_label_pc_1180c
  %v1_11828 = inttoptr i32 %v0_11828 to i32*
  %v2_11828 = load i32, i32* %v1_11828, align 4
  store i32 %v2_11828, i32* %r3.global-to-local, align 4
  %v2_1182c = inttoptr i32 %v0_117e4 to i32*
  store i32 %v2_11828, i32* %v2_1182c, align 4
  %v0_11830 = load i32, i32* @r5, align 4
  %v1_11830 = add i32 %v0_11830, 4
  %v2_11830 = inttoptr i32 %v1_11830 to i32*
  %v3_11830 = load i32, i32* %v2_11830, align 4
  store i32 %v3_11830, i32* %r3.global-to-local, align 4
  %v1_11834 = load i32, i32* %r1.global-to-local, align 4
  %v2_11834 = add i32 %v1_11834, 4
  %v3_11834 = inttoptr i32 %v2_11834 to i32*
  store i32 %v3_11830, i32* %v3_11834, align 4
  %v0_11838 = load i32, i32* @r5, align 4
  %v1_11838 = add i32 %v0_11838, 8
  %v2_11838 = inttoptr i32 %v1_11838 to i32*
  %v3_11838 = load i32, i32* %v2_11838, align 4
  store i32 %v3_11838, i32* %r3.global-to-local, align 4
  %v0_1183c = load i32, i32* @ip, align 4
  %v1_11840 = load i32, i32* %r1.global-to-local, align 4
  %v2_11840 = add i32 %v1_11840, 8
  %v3_11840 = inttoptr i32 %v2_11840 to i32*
  store i32 %v3_11838, i32* %v3_11840, align 4
  %tmp39 = icmp ult i32 %v0_1183c, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_11848

dec_label_pc_11848:                               ; preds = %dec_label_pc_11828
  %v0_11848 = load i32, i32* @r5, align 4
  %v1_11848 = add i32 %v0_11848, 12
  %v2_11848 = inttoptr i32 %v1_11848 to i32*
  %v3_11848 = load i32, i32* %v2_11848, align 4
  store i32 %v3_11848, i32* %r3.global-to-local, align 4
  %v1_1184c = load i32, i32* %r1.global-to-local, align 4
  %v2_1184c = add i32 %v1_1184c, 12
  %v3_1184c = inttoptr i32 %v2_1184c to i32*
  store i32 %v3_11848, i32* %v3_1184c, align 4
  %v0_11850 = load i32, i32* @r5, align 4
  %v1_11850 = add i32 %v0_11850, 16
  %v2_11850 = inttoptr i32 %v1_11850 to i32*
  %v3_11850 = load i32, i32* %v2_11850, align 4
  store i32 %v3_11850, i32* %r3.global-to-local, align 4
  %v0_11854 = load i32, i32* @ip, align 4
  %v1_11858 = load i32, i32* %r1.global-to-local, align 4
  %v2_11858 = add i32 %v1_11858, 16
  %v3_11858 = inttoptr i32 %v2_11858 to i32*
  store i32 %v3_11850, i32* %v3_11858, align 4
  %tmp40 = icmp ult i32 %v0_11854, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_11860

dec_label_pc_11860:                               ; preds = %dec_label_pc_11848
  %v0_11860 = load i32, i32* @r5, align 4
  %v1_11860 = add i32 %v0_11860, 20
  %v2_11860 = inttoptr i32 %v1_11860 to i32*
  %v3_11860 = load i32, i32* %v2_11860, align 4
  store i32 %v3_11860, i32* %r3.global-to-local, align 4
  %v1_11864 = load i32, i32* %r1.global-to-local, align 4
  %v2_11864 = add i32 %v1_11864, 20
  %v3_11864 = inttoptr i32 %v2_11864 to i32*
  store i32 %v3_11860, i32* %v3_11864, align 4
  %v0_11868 = load i32, i32* @r5, align 4
  %v1_11868 = add i32 %v0_11868, 24
  %v2_11868 = inttoptr i32 %v1_11868 to i32*
  %v3_11868 = load i32, i32* %v2_11868, align 4
  store i32 %v3_11868, i32* %r3.global-to-local, align 4
  %v1_1186c = load i32, i32* %r1.global-to-local, align 4
  %v2_1186c = add i32 %v1_1186c, 24
  %v3_1186c = inttoptr i32 %v2_1186c to i32*
  store i32 %v3_11868, i32* %v3_1186c, align 4
  %v0_11870 = load i32, i32* @ip, align 4
  %v7_11870 = icmp eq i32 %v0_11870, 9
  br i1 %v7_11870, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_11860
  %v1_11874 = load i32, i32* @r5, align 4
  %v2_11874 = add i32 %v1_11874, 28
  %v3_11874 = inttoptr i32 %v2_11874 to i32*
  %v4_11874 = load i32, i32* %v3_11874, align 4
  store i32 %v4_11874, i32* %r3.global-to-local, align 4
  %v2_11878 = load i32, i32* %r1.global-to-local, align 4
  %v3_11878 = add i32 %v2_11878, 28
  %v4_11878 = inttoptr i32 %v3_11878 to i32*
  store i32 %v4_11874, i32* %v4_11878, align 4
  %v1_1187c = load i32, i32* @r5, align 4
  %v2_1187c = add i32 %v1_1187c, 32
  %v3_1187c = inttoptr i32 %v2_1187c to i32*
  %v4_1187c = load i32, i32* %v3_1187c, align 4
  store i32 %v4_1187c, i32* %r3.global-to-local, align 4
  %v2_11880 = load i32, i32* %r1.global-to-local, align 4
  %v3_11880 = add i32 %v2_11880, 32
  %v4_11880 = inttoptr i32 %v3_11880 to i32*
  store i32 %v4_1187c, i32* %v4_11880, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11860, %dec_label_pc_11848, %dec_label_pc_11828, %dec_label_pc_1181c, %bb32
  %v0_11884 = load i32, i32* @r5, align 4
  store i32 %v0_11884, i32* @r0, align 4
  %v0_11888 = call i32 @function_11c74()
  store i32 %v0_11888, i32* %r0.global-to-local, align 4
  %v0_1188c = load i32, i32* @r7, align 4
  %v1_1188c = add i32 %v0_1188c, 8
  store i32 %v1_1188c, i32* @r4, align 4
  br label %dec_label_pc_119c8

dec_label_pc_11894:                               ; preds = %bb30, %.thread2, %dec_label_pc_117d4
  %v0_118a8 = phi i32 [ %v3_11804, %.thread2 ], [ %v1_1171c, %bb30 ], [ %v1_11894.pre, %dec_label_pc_117d4 ]
  %v0_11894 = load i32, i32* @sb, align 4
  %v2_11894 = sub i32 %v0_118a8, %v0_11894
  store i32 %v2_11894, i32* %r1.global-to-local, align 4
  %v0_1189c = load i32, i32* @sl, align 4
  %v1_1189c = add i32 %v0_1189c, 4
  %v2_1189c = inttoptr i32 %v1_1189c to i32*
  %v3_1189c = load i32, i32* %v2_1189c, align 4
  %tmp41 = icmp ugt i32 %v2_11894, 15
  %v1_118c4 = urem i32 %v3_1189c, 2
  store i32 %v1_118c4, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_118c4, label %dec_label_pc_118a4

dec_label_pc_118a4:                               ; preds = %dec_label_pc_11894
  %v2_118a8 = or i32 %v1_118c4, %v0_118a8
  store i32 %v2_118a8, i32* %r3.global-to-local, align 4
  store i32 %v2_118a8, i32* %v2_1189c, align 4
  %v0_118b0 = load i32, i32* @sl, align 4
  %v1_118b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_118b0 = add i32 %v1_118b0, %v0_118b0
  store i32 %v2_118b0, i32* %r2.global-to-local, align 4
  %v1_118b4 = add i32 %v2_118b0, 4
  %v2_118b4 = inttoptr i32 %v1_118b4 to i32*
  %v3_118b4 = load i32, i32* %v2_118b4, align 4
  %v1_118b8 = or i32 %v3_118b4, 1
  store i32 %v1_118b8, i32* %r3.global-to-local, align 4
  store i32 %v1_118b8, i32* %v2_118b4, align 4
  br label %dec_label_pc_118f4

dec_label_pc_118c4:                               ; preds = %dec_label_pc_11894
  %v2_118c8 = add i32 %v0_1189c, %v0_11894
  store i32 %v2_118c8, i32* %r0.global-to-local, align 4
  %v2_118cc = or i32 %v1_118c4, %v0_11894
  store i32 %v2_118cc, i32* %r3.global-to-local, align 4
  %v1_118d0 = or i32 %v2_11894, 1
  store i32 %v1_118d0, i32* %r2.global-to-local, align 4
  store i32 %v2_118cc, i32* %v2_1189c, align 4
  %v0_118d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_118d8 = load i32, i32* %r0.global-to-local, align 4
  %v2_118d8 = add i32 %v1_118d8, 4
  %v3_118d8 = inttoptr i32 %v2_118d8 to i32*
  store i32 %v0_118d8, i32* %v3_118d8, align 4
  %v0_118dc = load i32, i32* %r0.global-to-local, align 4
  %v1_118dc = load i32, i32* %r1.global-to-local, align 4
  %v2_118dc = add i32 %v1_118dc, %v0_118dc
  store i32 %v2_118dc, i32* %r2.global-to-local, align 4
  %v1_118e0 = add i32 %v2_118dc, 4
  %v2_118e0 = inttoptr i32 %v1_118e0 to i32*
  %v3_118e0 = load i32, i32* %v2_118e0, align 4
  %v1_118e4 = or i32 %v3_118e0, 1
  store i32 %v1_118e4, i32* %r3.global-to-local, align 4
  store i32 %v1_118e4, i32* %v2_118e0, align 4
  %v0_118ec = load i32, i32* %r0.global-to-local, align 4
  %v1_118ec = add i32 %v0_118ec, 8
  store i32 %v1_118ec, i32* @r0, align 4
  %v0_118f0 = call i32 @function_11c74()
  store i32 %v0_118f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_118f4

dec_label_pc_118f4:                               ; preds = %dec_label_pc_118a4, %dec_label_pc_118c4
  %v0_118f4 = load i32, i32* @sl, align 4
  %v1_118f4 = add i32 %v0_118f4, 8
  store i32 %v1_118f4, i32* @r4, align 4
  br label %dec_label_pc_119c8

dec_label_pc_118fc:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r1.global-to-local, align 4
  %v4_11904 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_11904, i32* @r8, align 4
  %v2_11908 = inttoptr i32 %v1_11718 to i32*
  %v3_11908 = load i32, i32* %v2_11908, align 4
  store i32 %v3_11908, i32* @r4, align 4
  %v1_1190c = add i32 %v4_11904, 860
  %v2_1190c = inttoptr i32 %v1_1190c to i32*
  %v3_1190c = load i32, i32* %v2_1190c, align 4
  %v1_11910 = add i32 %v3_11908, 4
  %v1_11914 = add i32 %v3_1190c, -1
  store i32 %v1_11914, i32* %r2.global-to-local, align 4
  %v2_11918 = add i32 %v1_11910, %v1_11914
  %v1_1191c = load i32, i32* @sb, align 4
  %v2_1191c = add i32 %v2_11918, %v1_1191c
  store i32 %v2_1191c, i32* %r3.global-to-local, align 4
  %v2_11920 = sub i32 0, %v3_1190c
  %v3_11920 = and i32 %v2_1191c, %v2_11920
  store i32 %v3_11920, i32* @r7, align 4
  %v2_11924 = sub i32 %v3_11920, %v3_11908
  store i32 %v2_11924, i32* @fp, align 4
  %v9_11928 = icmp eq i32 %v1_1171c, %v2_11924
  br i1 %v9_11928, label %dec_label_pc_1199c, label %dec_label_pc_11930

dec_label_pc_11930:                               ; preds = %dec_label_pc_118fc
  %v2_11930 = sub i32 %v1_11718, %v3_11908
  store i32 %v2_11930, i32* %r0.global-to-local, align 4
  %v2_11934 = add i32 %v3_11908, %v1_1171c
  store i32 %v2_11934, i32* %r1.global-to-local, align 4
  store i32 %v3_11920, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_11940 = call i32 @function_132c4(i32 %v2_11930, i32 %v2_11934, i32 %v3_11920, i32 1)
  store i32 %v4_11940, i32* %r0.global-to-local, align 4
  %v7_11944 = icmp eq i32 %v4_11940, -1
  br i1 %v7_11944, label %dec_label_pc_11990, label %dec_label_pc_1194c

dec_label_pc_1194c:                               ; preds = %dec_label_pc_11930
  %v1_1194c = load i32, i32* @r4, align 4
  %v2_1194c = add i32 %v1_1194c, %v4_11940
  store i32 %v2_1194c, i32* %r0.global-to-local, align 4
  %v0_11950 = load i32, i32* @fp, align 4
  %v1_11950 = or i32 %v0_11950, 2
  store i32 %v1_11950, i32* %r3.global-to-local, align 4
  %v2_11954 = add i32 %v2_1194c, 4
  %v3_11954 = inttoptr i32 %v2_11954 to i32*
  store i32 %v1_11950, i32* %v3_11954, align 4
  %v0_11958 = load i32, i32* @r8, align 4
  %v1_11958 = add i32 %v0_11958, 868
  %v2_11958 = inttoptr i32 %v1_11958 to i32*
  %v3_11958 = load i32, i32* %v2_11958, align 4
  store i32 %v3_11958, i32* %r3.global-to-local, align 4
  %v1_1195c = add i32 %v0_11958, 880
  %v2_1195c = inttoptr i32 %v1_1195c to i32*
  %v3_1195c = load i32, i32* %v2_1195c, align 4
  store i32 %v3_1195c, i32* %r2.global-to-local, align 4
  %v0_11960 = load i32, i32* @r6, align 4
  %v2_11960 = sub i32 %v3_11958, %v0_11960
  store i32 %v2_11960, i32* %r3.global-to-local, align 4
  %v1_11964 = load i32, i32* @r7, align 4
  %v2_11964 = add i32 %v1_11964, %v2_11960
  store i32 %v2_11964, i32* %r1.global-to-local, align 4
  %v1_11968 = add i32 %v0_11958, 872
  %v2_11968 = inttoptr i32 %v1_11968 to i32*
  %v3_11968 = load i32, i32* %v2_11968, align 4
  store i32 %v3_11968, i32* %r3.global-to-local, align 4
  %v1_11970 = add i32 %v0_11958, 884
  %v2_11970 = inttoptr i32 %v1_11970 to i32*
  %v3_11970 = load i32, i32* %v2_11970, align 4
  store i32 %v3_11970, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_11964, %v3_1195c
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_1194c
  store i32 %v2_11964, i32* %v2_1195c, align 4
  %v0_11978.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11978.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_1194c, %bb33
  %v1_11978 = phi i32 [ %v0_11958, %dec_label_pc_1194c ], [ %v1_11978.pre, %bb33 ]
  %v0_11978 = phi i32 [ %v2_11964, %dec_label_pc_1194c ], [ %v0_11978.pre, %bb33 ]
  %v2_11978 = add i32 %v1_11978, 868
  %v3_11978 = inttoptr i32 %v2_11978 to i32*
  store i32 %v0_11978, i32* %v3_11978, align 4
  %v0_1197c = load i32, i32* %r1.global-to-local, align 4
  %v1_1197c = load i32, i32* %r3.global-to-local, align 4
  %v2_1197c = add i32 %v1_1197c, %v0_1197c
  store i32 %v2_1197c, i32* %r1.global-to-local, align 4
  %v1_11980 = load i32, i32* %r2.global-to-local, align 4
  %v0_11984 = load i32, i32* %r0.global-to-local, align 4
  %v1_11984 = add i32 %v0_11984, 8
  store i32 %v1_11984, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_1197c, %v1_11980
  br i1 %tmp43, label %bb35, label %dec_label_pc_119c8

bb35:                                             ; preds = %bb34
  %v5_11988 = load i32, i32* @r8, align 4
  %v6_11988 = add i32 %v5_11988, 884
  %v7_11988 = inttoptr i32 %v6_11988 to i32*
  store i32 %v2_1197c, i32* %v7_11988, align 4
  br label %dec_label_pc_119c8

dec_label_pc_11990:                               ; preds = %dec_label_pc_11930
  %v0_11990 = load i32, i32* @sb, align 4
  %v1_11990 = add i32 %v0_11990, 4
  store i32 %v1_11990, i32* %r3.global-to-local, align 4
  %v0_11994 = load i32, i32* @r6, align 4
  %v3_11994 = icmp ult i32 %v0_11994, %v1_11990
  br i1 %v3_11994, label %dec_label_pc_119a4, label %dec_label_pc_11990.dec_label_pc_1199c_crit_edge

dec_label_pc_11990.dec_label_pc_1199c_crit_edge:  ; preds = %dec_label_pc_11990
  %v0_1199c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1199c

dec_label_pc_1199c:                               ; preds = %dec_label_pc_11990.dec_label_pc_1199c_crit_edge, %dec_label_pc_118fc
  %v0_1199c = phi i32 [ %v0_1199c.pre, %dec_label_pc_11990.dec_label_pc_1199c_crit_edge ], [ %v0_11704, %dec_label_pc_118fc ]
  store i32 %v0_1199c, i32* @r4, align 4
  br label %dec_label_pc_119c8

dec_label_pc_119a4:                               ; preds = %dec_label_pc_11990
  %v1_119a4 = add i32 %v0_11990, -7
  store i32 %v1_119a4, i32* @r0, align 4
  %v0_119a8 = call i32 @function_10c08()
  store i32 %v0_119a8, i32* @r0, align 4
  store i32 %v0_119a8, i32* @r4, align 4
  %v2_119ac = icmp eq i32 %v0_119a8, 0
  br i1 %v2_119ac, label %dec_label_pc_119c8, label %dec_label_pc_119b4

dec_label_pc_119b4:                               ; preds = %dec_label_pc_119a4
  %v0_119b4 = load i32, i32* @r6, align 4
  %v1_119b4 = add i32 %v0_119b4, -8
  store i32 %v1_119b4, i32* @r2, align 4
  %v0_119b8 = load i32, i32* @r5, align 4
  store i32 %v0_119b8, i32* @r1, align 4
  %v0_119bc = call i32 @function_10700()
  %v0_119c0 = load i32, i32* @r5, align 4
  store i32 %v0_119c0, i32* @r0, align 4
  %v0_119c4 = call i32 @function_11c74()
  store i32 %v0_119c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_119c8

dec_label_pc_119c8:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_119a4, %dec_label_pc_1199c, %dec_label_pc_118f4, %.thread6, %dec_label_pc_11764, %dec_label_pc_119b4
  store i32 %v2_116b8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r2.global-to-local, align 4
  %v4_119d8 = load i32, i32* inttoptr (i32 121116 to i32*), align 4
  store i32 %v4_119d8, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_119d8)
  br label %dec_label_pc_119e4

dec_label_pc_119e4:                               ; preds = %dec_label_pc_116ec, %dec_label_pc_11694, %dec_label_pc_1167c, %dec_label_pc_119c8
  %v0_119e4 = load i32, i32* @r4, align 4
  store i32 %v0_119e4, i32* %r0.global-to-local, align 4
  store i32 %v3_1165c, i32* @r4, align 4
  store i32 %v6_1165c, i32* @r5, align 4
  store i32 %v9_1165c, i32* @r6, align 4
  store i32 %v12_1165c, i32* @r7, align 4
  store i32 %v15_1165c, i32* @r8, align 4
  store i32 %v18_1165c, i32* @sb, align 4
  store i32 %v21_1165c, i32* @sl, align 4
  store i32 %v24_1165c, i32* @fp, align 4
  store i32 %v27_1165c, i32* @lr, align 4
  ret i32 %v0_119e4

; uselistorder directives
  uselistorder i32 %v2_1197c, { 1, 0, 2 }
  uselistorder i32 %v2_11964, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11940, { 1, 0, 2 }
  uselistorder i32 %v3_11920, { 1, 0, 2, 3 }
  uselistorder i32 %v1_118c4, { 2, 1, 0 }
  uselistorder i32 %v2_11894, { 1, 0, 2 }
  uselistorder i32 %v0_11828, { 1, 0 }
  uselistorder i32 %v0_117e4, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_11748, { 0, 2, 1, 3 }
  uselistorder i32 %v2_11740, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_11724, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_1171c, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_11718, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_11708, { 1, 0 }
  uselistorder i32 %v0_11704, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_116e4, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 27, 5, 10, 6, 7, 8, 9, 20, 11, 13, 12, 19, 21, 14, 15, 16, 17, 18, 24, 23, 22, 25, 26 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_119e4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_119c8, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_118f4, { 1, 0 }
  uselistorder label %dec_label_pc_11894, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_117e0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_117d4, { 1, 0 }
  uselistorder label %dec_label_pc_117d0, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_119f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_119f8:
  %v0_119f8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_119f8, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_119f8
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_119f8, %bb
  %v10_11a0c = phi i32 [ %arg1, %dec_label_pc_119f8 ], [ 0, %bb ]
  ret i32 %v10_11a0c

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_11a10(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a10:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_11a10 = add i32 %arg2, 44
  %v2_11a10 = inttoptr i32 %v1_11a10 to i32*
  %v3_11a10 = load i32, i32* %v2_11a10, align 4
  %v1_11a18 = add i32 %v3_11a10, 4
  %v2_11a18 = inttoptr i32 %v1_11a18 to i32*
  %v3_11a18 = load i32, i32* %v2_11a18, align 4
  %v1_11a1c = add i32 %arg2, 860
  %v2_11a1c = inttoptr i32 %v1_11a1c to i32*
  %v3_11a1c = load i32, i32* %v2_11a1c, align 4
  store i32 %v3_11a1c, i32* @r4, align 4
  %v1_11a20 = and i32 %v3_11a18, -4
  store i32 %v1_11a20, i32* @r6, align 4
  %v1_11a24 = add i32 %v1_11a20, -17
  %v2_11a28 = add i32 %v1_11a24, %v3_11a1c
  store i32 %arg2, i32* @r5, align 4
  %v2_11a34 = sub i32 %v2_11a28, %arg1
  store i32 %v2_11a34, i32* @r0, align 4
  store i32 %v3_11a1c, i32* @r1, align 4
  %v0_11a3c = call i32 @function_fca8()
  %v1_11a40 = add i32 %v0_11a3c, -1
  store i32 %v1_11a40, i32* %r0.global-to-local, align 4
  %v0_11a44 = load i32, i32* @r4, align 4
  %v2_11a44 = mul i32 %v0_11a44, %v1_11a40
  store i32 %v2_11a44, i32* %r7.global-to-local, align 4
  %v2_11a48 = icmp eq i32 %v2_11a44, 0
  store i1 %v2_11a48, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_11a44, 1
  br i1 %tmp8, label %dec_label_pc_11ab0, label %dec_label_pc_11a50

dec_label_pc_11a50:                               ; preds = %dec_label_pc_11a10
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11a54 = call i32 @function_12f80(i32 0)
  store i32 %v1_11a54, i32* %r0.global-to-local, align 4
  %v0_11a58 = load i32, i32* @r5, align 4
  %v1_11a58 = add i32 %v0_11a58, 44
  %v2_11a58 = inttoptr i32 %v1_11a58 to i32*
  %v3_11a58 = load i32, i32* %v2_11a58, align 4
  %v0_11a5c = load i32, i32* @r6, align 4
  %v2_11a5c = add i32 %v0_11a5c, %v3_11a58
  %v9_11a60 = icmp eq i32 %v1_11a54, %v2_11a5c
  store i1 %v9_11a60, i1* @cpsr_z, align 1
  store i32 %v1_11a54, i32* @r4, align 4
  br i1 %v9_11a60, label %dec_label_pc_11a6c, label %dec_label_pc_11ab0

dec_label_pc_11a6c:                               ; preds = %dec_label_pc_11a50
  %v0_11a6c = load i32, i32* %r7.global-to-local, align 4
  %v1_11a6c = sub i32 0, %v0_11a6c
  store i32 %v1_11a6c, i32* %r0.global-to-local, align 4
  %v1_11a70 = call i32 @function_12f80(i32 %v1_11a6c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11a78 = call i32 @function_12f80(i32 0)
  store i32 %v1_11a78, i32* %r0.global-to-local, align 4
  %v7_11a7c = icmp eq i32 %v1_11a78, -1
  store i1 %v7_11a7c, i1* @cpsr_z, align 1
  br i1 %v7_11a7c, label %dec_label_pc_11ab0, label %dec_label_pc_11a84

dec_label_pc_11a84:                               ; preds = %dec_label_pc_11a6c
  %v0_11a84 = load i32, i32* @r4, align 4
  %v2_11a84 = sub i32 %v0_11a84, %v1_11a78
  store i32 %v2_11a84, i32* %r0.global-to-local, align 4
  %v9_11a84 = icmp eq i32 %v0_11a84, %v1_11a78
  store i1 %v9_11a84, i1* @cpsr_z, align 1
  br i1 %v9_11a84, label %dec_label_pc_11ab0, label %dec_label_pc_11a8c

dec_label_pc_11a8c:                               ; preds = %dec_label_pc_11a84
  %v0_11a8c = load i32, i32* @r5, align 4
  %v1_11a8c = add i32 %v0_11a8c, 872
  %v2_11a8c = inttoptr i32 %v1_11a8c to i32*
  %v3_11a8c = load i32, i32* %v2_11a8c, align 4
  %v1_11a90 = load i32, i32* @r6, align 4
  %v2_11a90 = sub i32 %v1_11a90, %v2_11a84
  store i32 %v2_11a90, i32* %r2.global-to-local, align 4
  %v1_11a94 = add i32 %v0_11a8c, 44
  %v2_11a94 = inttoptr i32 %v1_11a94 to i32*
  %v3_11a94 = load i32, i32* %v2_11a94, align 4
  store i32 %v3_11a94, i32* %r1.global-to-local, align 4
  %v2_11a98 = sub i32 %v3_11a8c, %v2_11a84
  %v1_11a9c = or i32 %v2_11a90, 1
  store i32 %v1_11a9c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_11a98, i32* %v2_11a8c, align 4
  %v0_11aa8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11aa8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11aa8 = add i32 %v1_11aa8, 4
  %v3_11aa8 = inttoptr i32 %v2_11aa8 to i32*
  store i32 %v0_11aa8, i32* %v3_11aa8, align 4
  %v1_11abc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ab4

dec_label_pc_11ab0:                               ; preds = %dec_label_pc_11a50, %dec_label_pc_11a84, %dec_label_pc_11a6c, %dec_label_pc_11a10
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ab4

dec_label_pc_11ab4:                               ; preds = %dec_label_pc_11a8c, %dec_label_pc_11ab0
  %v1_11abc = phi i32 [ %v1_11abc.pre, %dec_label_pc_11a8c ], [ 0, %dec_label_pc_11ab0 ]
  ret i32 %v1_11abc

; uselistorder directives
  uselistorder i1 %v7_11a7c, { 1, 0 }
  uselistorder i32 %v1_11a78, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_12f80, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_fca8, { 3, 2, 1, 4, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_11ab4, { 1, 0 }
  uselistorder label %dec_label_pc_11ab0, { 1, 2, 0, 3 }
}

define i32 @function_11ac0() local_unnamed_addr {
dec_label_pc_11ac0:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11ac0 = load i32, i32* @r4, align 4
  store i32 %v3_11ac0, i32* %stack_var_-36, align 4
  %v0_11ac4 = load i32, i32* @r0, align 4
  %v1_11ac4 = inttoptr i32 %v0_11ac4 to i32*
  %v2_11ac4 = load i32, i32* %v1_11ac4, align 4
  store i32 %v2_11ac4, i32* %r3.global-to-local, align 4
  %v2_11ac8 = icmp eq i32 %v2_11ac4, 0
  store i32 %v0_11ac4, i32* @r4, align 4
  br i1 %v2_11ac8, label %dec_label_pc_11c00.preheader, label %dec_label_pc_11adc

dec_label_pc_11c00.preheader:                     ; preds = %dec_label_pc_11ac0
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_11c0825 = add i32 %v0_11ac4, 52
  store i32 %v1_11c0825, i32* %r3.global-to-local, align 4
  %v2_11c1026 = add i32 %v0_11ac4, 60
  %v3_11c1027 = inttoptr i32 %v2_11c1026 to i32*
  store i32 %v1_11c0825, i32* %v3_11c1027, align 4
  %v0_11c1428 = load i32, i32* %r3.global-to-local, align 4
  %v2_11c1429 = add i32 %v0_11c1428, 12
  %v3_11c1430 = inttoptr i32 %v2_11c1429 to i32*
  store i32 %v0_11c1428, i32* %v3_11c1430, align 4
  br label %dec_label_pc_11c00.dec_label_pc_11c00_crit_edge

dec_label_pc_11adc:                               ; preds = %dec_label_pc_11ac0
  %v1_11adc = and i32 %v2_11ac4, -3
  %v3_11ae0 = udiv i32 %v2_11ac4, 8
  store i32 %v3_11ae0, i32* %r2.global-to-local, align 4
  store i32 %v1_11adc, i32* %v1_11ac4, align 4
  %v0_11ae8 = load i32, i32* @r0, align 4
  %v1_11ae8 = add i32 %v0_11ae8, -4
  store i32 %v1_11ae8, i32* %r3.global-to-local, align 4
  %v1_11aec = load i32, i32* %r2.global-to-local, align 4
  %v4_11aec = mul i32 %v1_11aec, 4
  %v5_11aec = add i32 %v4_11aec, %v1_11ae8
  store i32 %v5_11aec, i32* %sb.global-to-local, align 4
  %v1_11af0 = add i32 %v0_11ae8, 52
  store i32 %v1_11af0, i32* %r7.global-to-local, align 4
  %v1_11af4 = add i32 %v0_11ae8, 4
  store i32 %v1_11af4, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_11afc

dec_label_pc_11afc:                               ; preds = %dec_label_pc_11bf8, %dec_label_pc_11adc
  %v1_11bf010 = phi i32 [ %v1_11bf0, %dec_label_pc_11bf8 ], [ %v5_11aec, %dec_label_pc_11adc ]
  %v1_11b08 = phi i32 [ %v1_11bf8, %dec_label_pc_11bf8 ], [ %v1_11af4, %dec_label_pc_11adc ]
  %v1_11afc = inttoptr i32 %v1_11b08 to i32*
  %v2_11afc = load i32, i32* %v1_11afc, align 4
  store i32 %v2_11afc, i32* %r1.global-to-local, align 4
  %v2_11b00 = icmp eq i32 %v2_11afc, 0
  br i1 %v2_11b00, label %dec_label_pc_11bf0, label %dec_label_pc_11b08

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11afc
  %v0_11b08 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_11b08, i32* %v1_11afc, align 4
  %v0_11b0c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11b0c

dec_label_pc_11b0c:                               ; preds = %dec_label_pc_11be4, %dec_label_pc_11b08
  %v0_11b28 = phi i32 [ %v0_11be4, %dec_label_pc_11be4 ], [ %v0_11b0c.pre, %dec_label_pc_11b08 ]
  %v1_11b0c = add i32 %v0_11b28, 4
  %v2_11b0c = inttoptr i32 %v1_11b0c to i32*
  %v3_11b0c = load i32, i32* %v2_11b0c, align 4
  store i32 %v3_11b0c, i32* %r3.global-to-local, align 4
  %v1_11b10 = and i32 %v3_11b0c, -2
  store i32 %v1_11b10, i32* %lr.global-to-local, align 4
  %v2_11b14 = add i32 %v1_11b10, %v0_11b28
  store i32 %v2_11b14, i32* @r0, align 4
  %v1_11b18 = urem i32 %v3_11b0c, 2
  %v2_11b18 = icmp eq i32 %v1_11b18, 0
  %v1_11b1c = add i32 %v0_11b28, 8
  %v2_11b1c = inttoptr i32 %v1_11b1c to i32*
  %v3_11b1c = load i32, i32* %v2_11b1c, align 4
  store i32 %v3_11b1c, i32* %sl.global-to-local, align 4
  %v1_11b20 = add i32 %v2_11b14, 4
  %v2_11b20 = inttoptr i32 %v1_11b20 to i32*
  %v3_11b20 = load i32, i32* %v2_11b20, align 4
  store i32 %v3_11b20, i32* %r8.global-to-local, align 4
  br i1 %v2_11b18, label %dec_label_pc_11b28, label %dec_label_pc_11b5c

dec_label_pc_11b28:                               ; preds = %dec_label_pc_11b0c
  %v1_11b28 = inttoptr i32 %v0_11b28 to i32*
  %v2_11b28 = load i32, i32* %v1_11b28, align 4
  store i32 %v2_11b28, i32* %r5.global-to-local, align 4
  %v2_11b2c = sub i32 %v0_11b28, %v2_11b28
  store i32 %v2_11b2c, i32* %r3.global-to-local, align 4
  %v1_11b30 = add i32 %v2_11b2c, 8
  %v2_11b30 = inttoptr i32 %v1_11b30 to i32*
  %v3_11b30 = load i32, i32* %v2_11b30, align 4
  store i32 %v3_11b30, i32* %ip.global-to-local, align 4
  %v1_11b34 = add i32 %v3_11b30, 12
  %v2_11b34 = inttoptr i32 %v1_11b34 to i32*
  %v3_11b34 = load i32, i32* %v2_11b34, align 4
  store i32 %v3_11b34, i32* %r1.global-to-local, align 4
  %v9_11b38 = icmp eq i32 %v3_11b34, %v2_11b2c
  %v1_11b3c = add i32 %v2_11b2c, 12
  %v2_11b3c = inttoptr i32 %v1_11b3c to i32*
  %v3_11b3c = load i32, i32* %v2_11b3c, align 4
  store i32 %v3_11b3c, i32* %r2.global-to-local, align 4
  br i1 %v9_11b38, label %dec_label_pc_11b44, label %dec_label_pc_11ba0

dec_label_pc_11b44:                               ; preds = %dec_label_pc_11b28
  %v1_11b44 = add i32 %v3_11b3c, 8
  %v2_11b44 = inttoptr i32 %v1_11b44 to i32*
  %v3_11b44 = load i32, i32* %v2_11b44, align 4
  store i32 %v3_11b44, i32* %r3.global-to-local, align 4
  %v9_11b48 = icmp eq i32 %v3_11b44, %v2_11b2c
  br i1 %v9_11b48, label %dec_label_pc_11b50, label %dec_label_pc_11ba0

dec_label_pc_11b50:                               ; preds = %dec_label_pc_11b44
  store i32 %v3_11b30, i32* %v2_11b44, align 4
  %v0_11b54 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b54 = load i32, i32* %ip.global-to-local, align 4
  %v2_11b54 = add i32 %v1_11b54, 12
  %v3_11b54 = inttoptr i32 %v2_11b54 to i32*
  store i32 %v0_11b54, i32* %v3_11b54, align 4
  %v0_11b58 = load i32, i32* %lr.global-to-local, align 4
  %v1_11b58 = load i32, i32* %r5.global-to-local, align 4
  %v2_11b58 = add i32 %v1_11b58, %v0_11b58
  store i32 %v2_11b58, i32* %lr.global-to-local, align 4
  %v0_11b60.pre = load i32, i32* @r0, align 4
  %v0_11b64.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_11b5c

dec_label_pc_11b5c:                               ; preds = %dec_label_pc_11b0c, %dec_label_pc_11b50
  %v0_11bd4 = phi i32 [ %v1_11b10, %dec_label_pc_11b0c ], [ %v2_11b58, %dec_label_pc_11b50 ]
  %v0_11b64 = phi i32 [ %v3_11b20, %dec_label_pc_11b0c ], [ %v0_11b64.pre, %dec_label_pc_11b50 ]
  %v1_11b78 = phi i32 [ %v2_11b14, %dec_label_pc_11b0c ], [ %v0_11b60.pre, %dec_label_pc_11b50 ]
  %v0_11b5c = load i32, i32* @r4, align 4
  %v1_11b5c = add i32 %v0_11b5c, 44
  %v2_11b5c = inttoptr i32 %v1_11b5c to i32*
  %v3_11b5c = load i32, i32* %v2_11b5c, align 4
  store i32 %v3_11b5c, i32* %r3.global-to-local, align 4
  %v9_11b60 = icmp eq i32 %v1_11b78, %v3_11b5c
  %v1_11b64 = and i32 %v0_11b64, -4
  store i32 %v1_11b64, i32* %r5.global-to-local, align 4
  br i1 %v9_11b60, label %dec_label_pc_11bd4, label %dec_label_pc_11b6c

dec_label_pc_11b6c:                               ; preds = %dec_label_pc_11b5c
  %v2_11b6c = add i32 %v1_11b78, %v1_11b64
  store i32 %v2_11b6c, i32* %r3.global-to-local, align 4
  %v1_11b70 = add i32 %v2_11b6c, 4
  %v2_11b70 = inttoptr i32 %v1_11b70 to i32*
  %v3_11b70 = load i32, i32* %v2_11b70, align 4
  store i32 %v3_11b70, i32* %r3.global-to-local, align 4
  %v1_11b74 = urem i32 %v3_11b70, 2
  %v2_11b74 = icmp eq i32 %v1_11b74, 0
  %v2_11b78 = add i32 %v1_11b78, 4
  %v3_11b78 = inttoptr i32 %v2_11b78 to i32*
  store i32 %v1_11b64, i32* %v3_11b78, align 4
  br i1 %v2_11b74, label %dec_label_pc_11b80, label %dec_label_pc_11b6c.dec_label_pc_11bb0_crit_edge

dec_label_pc_11b6c.dec_label_pc_11bb0_crit_edge:  ; preds = %dec_label_pc_11b6c
  %v0_11bb4.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_11bb0

dec_label_pc_11b80:                               ; preds = %dec_label_pc_11b6c
  %v0_11b80 = load i32, i32* @r0, align 4
  %v1_11b80 = add i32 %v0_11b80, 8
  %v2_11b80 = inttoptr i32 %v1_11b80 to i32*
  %v3_11b80 = load i32, i32* %v2_11b80, align 4
  store i32 %v3_11b80, i32* %ip.global-to-local, align 4
  %v1_11b84 = add i32 %v3_11b80, 12
  %v2_11b84 = inttoptr i32 %v1_11b84 to i32*
  %v3_11b84 = load i32, i32* %v2_11b84, align 4
  store i32 %v3_11b84, i32* %r3.global-to-local, align 4
  %v9_11b88 = icmp eq i32 %v3_11b84, %v0_11b80
  %v1_11b8c = add i32 %v0_11b80, 12
  %v2_11b8c = inttoptr i32 %v1_11b8c to i32*
  %v3_11b8c = load i32, i32* %v2_11b8c, align 4
  store i32 %v3_11b8c, i32* %r2.global-to-local, align 4
  br i1 %v9_11b88, label %dec_label_pc_11b94, label %dec_label_pc_11ba0

dec_label_pc_11b94:                               ; preds = %dec_label_pc_11b80
  %v1_11b94 = add i32 %v3_11b8c, 8
  %v2_11b94 = inttoptr i32 %v1_11b94 to i32*
  %v3_11b94 = load i32, i32* %v2_11b94, align 4
  store i32 %v3_11b94, i32* %r3.global-to-local, align 4
  %v9_11b98 = icmp eq i32 %v3_11b94, %v0_11b80
  br i1 %v9_11b98, label %dec_label_pc_11ba4, label %dec_label_pc_11ba0

dec_label_pc_11ba0:                               ; preds = %dec_label_pc_11b80, %dec_label_pc_11b44, %dec_label_pc_11b28, %dec_label_pc_11b94
  %v0_11ba0 = call i32 @function_11ef0()
  store i32 %v0_11ba0, i32* @r0, align 4
  %v0_11ba4.pre = load i32, i32* @ip, align 4
  %v1_11ba4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_11ba4

dec_label_pc_11ba4:                               ; preds = %dec_label_pc_11b94, %dec_label_pc_11ba0
  %v1_11ba4 = phi i32 [ %v3_11b8c, %dec_label_pc_11b94 ], [ %v1_11ba4.pre, %dec_label_pc_11ba0 ]
  %v0_11ba4 = phi i32 [ %v3_11b80, %dec_label_pc_11b94 ], [ %v0_11ba4.pre, %dec_label_pc_11ba0 ]
  %v2_11ba4 = add i32 %v1_11ba4, 8
  %v3_11ba4 = inttoptr i32 %v2_11ba4 to i32*
  store i32 %v0_11ba4, i32* %v3_11ba4, align 4
  %v0_11ba8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11ba8 = load i32, i32* %ip.global-to-local, align 4
  %v2_11ba8 = add i32 %v1_11ba8, 12
  %v3_11ba8 = inttoptr i32 %v2_11ba8 to i32*
  store i32 %v0_11ba8, i32* %v3_11ba8, align 4
  %v0_11bac = load i32, i32* %lr.global-to-local, align 4
  %v1_11bac = load i32, i32* %r5.global-to-local, align 4
  %v2_11bac = add i32 %v1_11bac, %v0_11bac
  store i32 %v2_11bac, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_11bb0

dec_label_pc_11bb0:                               ; preds = %dec_label_pc_11b6c.dec_label_pc_11bb0_crit_edge, %dec_label_pc_11ba4
  %v0_11bb4 = phi i32 [ %v0_11bb4.pre, %dec_label_pc_11b6c.dec_label_pc_11bb0_crit_edge ], [ %v2_11bac, %dec_label_pc_11ba4 ]
  %v0_11bb0 = load i32, i32* %r7.global-to-local, align 4
  %v1_11bb0 = add i32 %v0_11bb0, 8
  %v2_11bb0 = inttoptr i32 %v1_11bb0 to i32*
  %v3_11bb0 = load i32, i32* %v2_11bb0, align 4
  store i32 %v3_11bb0, i32* %r2.global-to-local, align 4
  %v1_11bb4 = or i32 %v0_11bb4, 1
  store i32 %v1_11bb4, i32* %r3.global-to-local, align 4
  %v0_11bb8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11bb8, i32* %v2_11bb0, align 4
  %v0_11bbc = load i32, i32* %r1.global-to-local, align 4
  %v1_11bbc = load i32, i32* %r2.global-to-local, align 4
  %v2_11bbc = add i32 %v1_11bbc, 12
  %v3_11bbc = inttoptr i32 %v2_11bbc to i32*
  store i32 %v0_11bbc, i32* %v3_11bbc, align 4
  %v0_11bc0 = load i32, i32* %lr.global-to-local, align 4
  %v1_11bc0 = load i32, i32* %r1.global-to-local, align 4
  %v3_11bc0 = add i32 %v1_11bc0, %v0_11bc0
  %v4_11bc0 = inttoptr i32 %v3_11bc0 to i32*
  store i32 %v0_11bc0, i32* %v4_11bc0, align 4
  %v0_11bc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11bc4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11bc4 = add i32 %v1_11bc4, 4
  %v3_11bc4 = inttoptr i32 %v2_11bc4 to i32*
  store i32 %v0_11bc4, i32* %v3_11bc4, align 4
  %v0_11bc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11bc8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11bc8 = add i32 %v1_11bc8, 8
  %v3_11bc8 = inttoptr i32 %v2_11bc8 to i32*
  store i32 %v0_11bc8, i32* %v3_11bc8, align 4
  %v0_11bcc = load i32, i32* %r7.global-to-local, align 4
  %v1_11bcc = load i32, i32* %r1.global-to-local, align 4
  %v2_11bcc = add i32 %v1_11bcc, 12
  %v3_11bcc = inttoptr i32 %v2_11bcc to i32*
  store i32 %v0_11bcc, i32* %v3_11bcc, align 4
  br label %dec_label_pc_11be4

dec_label_pc_11bd4:                               ; preds = %dec_label_pc_11b5c
  %v2_11bd4 = add i32 %v1_11b64, %v0_11bd4
  %v1_11bd8 = or i32 %v2_11bd4, 1
  store i32 %v1_11bd8, i32* %r3.global-to-local, align 4
  %v1_11bdc = load i32, i32* %r1.global-to-local, align 4
  %v2_11bdc = add i32 %v1_11bdc, 4
  %v3_11bdc = inttoptr i32 %v2_11bdc to i32*
  store i32 %v1_11bd8, i32* %v3_11bdc, align 4
  %v0_11be0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11be0 = load i32, i32* @r4, align 4
  %v2_11be0 = add i32 %v1_11be0, 44
  %v3_11be0 = inttoptr i32 %v2_11be0 to i32*
  store i32 %v0_11be0, i32* %v3_11be0, align 4
  br label %dec_label_pc_11be4

dec_label_pc_11be4:                               ; preds = %dec_label_pc_11bb0, %dec_label_pc_11bd4
  %v0_11be4 = load i32, i32* %sl.global-to-local, align 4
  %v2_11be4 = icmp eq i32 %v0_11be4, 0
  store i32 %v0_11be4, i32* %r1.global-to-local, align 4
  br i1 %v2_11be4, label %dec_label_pc_11bf0.loopexit, label %dec_label_pc_11b0c

dec_label_pc_11bf0.loopexit:                      ; preds = %dec_label_pc_11be4
  %v0_11bf0.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_11bf0.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_11bf0

dec_label_pc_11bf0:                               ; preds = %dec_label_pc_11bf0.loopexit, %dec_label_pc_11afc
  %v1_11bf0 = phi i32 [ %v1_11bf0.pre, %dec_label_pc_11bf0.loopexit ], [ %v1_11bf010, %dec_label_pc_11afc ]
  %v0_11bf8 = phi i32 [ %v0_11bf0.pre, %dec_label_pc_11bf0.loopexit ], [ %v1_11b08, %dec_label_pc_11afc ]
  %v9_11bf0 = icmp eq i32 %v0_11bf8, %v1_11bf0
  br i1 %v9_11bf0, label %dec_label_pc_11c68, label %dec_label_pc_11bf8

dec_label_pc_11bf8:                               ; preds = %dec_label_pc_11bf0
  %v1_11bf8 = add i32 %v0_11bf8, 4
  store i32 %v1_11bf8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11afc

dec_label_pc_11c00.dec_label_pc_11c00_crit_edge:  ; preds = %dec_label_pc_11c00.preheader, %dec_label_pc_11c00.dec_label_pc_11c00_crit_edge
  %v0_11c00.pre = load i32, i32* @r4, align 4
  %v1_11c00.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_11c00 = mul i32 %v1_11c00.pre, 8
  %v5_11c00 = add i32 %v4_11c00, %v0_11c00.pre
  %v1_11c04 = add i32 %v1_11c00.pre, 1
  store i32 %v1_11c04, i32* %r2.global-to-local, align 4
  %v1_11c08 = add i32 %v5_11c00, 44
  store i32 %v1_11c08, i32* %r3.global-to-local, align 4
  %v2_11c10 = add i32 %v5_11c00, 52
  %v3_11c10 = inttoptr i32 %v2_11c10 to i32*
  store i32 %v1_11c08, i32* %v3_11c10, align 4
  %v0_11c14 = load i32, i32* %r3.global-to-local, align 4
  %v2_11c14 = add i32 %v0_11c14, 12
  %v3_11c14 = inttoptr i32 %v2_11c14 to i32*
  store i32 %v0_11c14, i32* %v3_11c14, align 4
  %v7_11c18 = icmp sgt i32 %v1_11c04, 95
  br i1 %v7_11c18, label %dec_label_pc_11c1c, label %dec_label_pc_11c00.dec_label_pc_11c00_crit_edge

dec_label_pc_11c1c:                               ; preds = %dec_label_pc_11c00.dec_label_pc_11c00_crit_edge
  %v0_11c1c = load i32, i32* @r4, align 4
  %v1_11c1c = inttoptr i32 %v0_11c1c to i32*
  %v2_11c1c = load i32, i32* %v1_11c1c, align 4
  store i32 %v2_11c1c, i32* %r2.global-to-local, align 4
  %v1_11c20 = add i32 %v0_11c1c, 864
  %v2_11c20 = inttoptr i32 %v1_11c20 to i32*
  %v3_11c20 = load i32, i32* %v2_11c20, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_11c28 = urem i32 %v2_11c1c, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_11c30 = or i32 %v3_11c20, 1
  store i32 %v1_11c30, i32* %r1.global-to-local, align 4
  %v1_11c34 = or i32 %v1_11c28, 72
  store i32 %v1_11c34, i32* %r2.global-to-local, align 4
  %v1_11c38 = add i32 %v0_11c1c, 52
  store i32 %v1_11c38, i32* %ip.global-to-local, align 4
  %v2_11c3c = add i32 %v0_11c1c, 840
  %v3_11c3c = inttoptr i32 %v2_11c3c to i32*
  store i32 0, i32* %v3_11c3c, align 4
  %v0_11c40 = load i32, i32* %r3.global-to-local, align 4
  %v1_11c40 = add i32 %v0_11c40, 65536
  store i32 %v1_11c40, i32* %r3.global-to-local, align 4
  %v0_11c44 = load i32, i32* %r0.global-to-local, align 4
  %v1_11c44 = load i32, i32* @r4, align 4
  %v2_11c44 = add i32 %v1_11c44, 836
  %v3_11c44 = inttoptr i32 %v2_11c44 to i32*
  store i32 %v0_11c44, i32* %v3_11c44, align 4
  %v0_11c48 = load i32, i32* %r0.global-to-local, align 4
  %v1_11c48 = load i32, i32* @r4, align 4
  %v2_11c48 = add i32 %v1_11c48, 844
  %v3_11c48 = inttoptr i32 %v2_11c48 to i32*
  store i32 %v0_11c48, i32* %v3_11c48, align 4
  %v1_11c4c = load i32, i32* @r4, align 4
  %v2_11c4c = add i32 %v1_11c4c, 852
  %v3_11c4c = inttoptr i32 %v2_11c4c to i32*
  store i32 %v1_11c40, i32* %v3_11c4c, align 4
  %v1_11c50 = load i32, i32* @r4, align 4
  %v2_11c50 = add i32 %v1_11c50, 864
  %v3_11c50 = inttoptr i32 %v2_11c50 to i32*
  store i32 %v1_11c30, i32* %v3_11c50, align 4
  %v1_11c54 = load i32, i32* @r4, align 4
  %v2_11c54 = inttoptr i32 %v1_11c54 to i32*
  store i32 %v1_11c34, i32* %v2_11c54, align 4
  %v0_11c58 = load i32, i32* %ip.global-to-local, align 4
  %v1_11c58 = load i32, i32* @r4, align 4
  %v2_11c58 = add i32 %v1_11c58, 44
  %v3_11c58 = inttoptr i32 %v2_11c58 to i32*
  store i32 %v0_11c58, i32* %v3_11c58, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_11c60 = call i32 @function_122c8(i32 30, i32 %v1_11c30, i32 %v1_11c34, i32 %v1_11c40)
  store i32 %v4_11c60, i32* @r0, align 4
  %v1_11c64 = load i32, i32* @r4, align 4
  %v2_11c64 = add i32 %v1_11c64, 860
  %v3_11c64 = inttoptr i32 %v2_11c64 to i32*
  store i32 %v4_11c60, i32* %v3_11c64, align 4
  br label %dec_label_pc_11c68

dec_label_pc_11c68:                               ; preds = %dec_label_pc_11bf0, %dec_label_pc_11c1c
  %v2_11c6c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11c6c, i32* @r4, align 4
  %v1_11c70 = load i32, i32* @r0, align 4
  ret i32 %v1_11c70

; uselistorder directives
  uselistorder i32 %v0_11c1c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11c14, { 1, 0 }
  uselistorder i32 %v1_11bf8, { 1, 0 }
  uselistorder i32 %v0_11be4, { 0, 2, 1 }
  uselistorder i32 %v0_11bc0, { 1, 0 }
  uselistorder i32 %v1_11b10, { 1, 0, 2 }
  uselistorder i32 %v0_11b28, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11ae8, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 12, 13, 14, 15, 16, 17, 18, 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 9 }
  uselistorder i32* %r2.global-to-local, { 7, 8, 10, 9, 11, 12, 13, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r1.global-to-local, { 3, 12, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2 }
  uselistorder i32* %lr.global-to-local, { 5, 6, 3, 1, 0, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 4, 5, 0, 1, 2, 3 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 5, 0, 3, 4, 2 }
  uselistorder label %dec_label_pc_11c68, { 1, 0 }
  uselistorder label %dec_label_pc_11c00.dec_label_pc_11c00_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_11be4, { 1, 0 }
  uselistorder label %dec_label_pc_11bb0, { 1, 0 }
  uselistorder label %dec_label_pc_11ba4, { 1, 0 }
  uselistorder label %dec_label_pc_11ba0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11b5c, { 1, 0 }
}

define i32 @function_11c74() local_unnamed_addr {
dec_label_pc_11c74:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_11c74 = load i32, i32* @r4, align 4
  %v6_11c74 = load i32, i32* @r5, align 4
  %v9_11c74 = load i32, i32* @r6, align 4
  %v12_11c74 = load i32, i32* @r7, align 4
  %v18_11c74 = load i32, i32* @lr, align 4
  %v0_11c7c = load i32, i32* @r0, align 4
  store i32 %v0_11c7c, i32* @r6, align 4
  %v2_11c7c = icmp eq i32 %v0_11c7c, 0
  %v2_11c80 = ptrtoint i32* %stack_var_-40 to i32
  store i32 add (i32 ptrtoint (i32* @global_var_bc78.349 to i32), i32 72844), i32* @r7, align 4
  br i1 %v2_11c7c, label %dec_label_pc_11e88, label %dec_label_pc_11c8c

dec_label_pc_11c8c:                               ; preds = %dec_label_pc_11c74
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_11c90 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_bc78.349 to i32), i32 72912) to i32*), align 4
  store i32 %v4_11c90, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_11c90, i32* %r2.global-to-local, align 4
  %v4_11c9c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_bc78.349 to i32), i32 72880) to i32*), align 4
  store i32 %v4_11c9c, i32* %r1.global-to-local, align 4
  store i32 %v2_11c80, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_11ca8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_bc78.349 to i32), i32 72916) to i32*), align 4
  store i32 %v4_11ca8, i32* %ip.global-to-local, align 4
  store i32 72884, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11ca8)
  %v0_11cb4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11cb4, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_11cbc = load i32, i32* @r7, align 4
  %v2_11cbc = add i32 %v0_11cbc, 16
  %v3_11cbc = inttoptr i32 %v2_11cbc to i32*
  %v4_11cbc = load i32, i32* %v3_11cbc, align 4
  store i32 %v4_11cbc, i32* %ip.global-to-local, align 4
  store i32 72904, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11cbc)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_11ccc = load i32, i32* @r7, align 4
  %v2_11ccc = add i32 %v0_11ccc, 32
  %v3_11ccc = inttoptr i32 %v2_11ccc to i32*
  %v4_11ccc = load i32, i32* %v3_11ccc, align 4
  store i32 %v4_11ccc, i32* @lr, align 4
  %v0_11cd0 = load i32, i32* @r6, align 4
  %v1_11cd0 = add i32 %v0_11cd0, -4
  %v2_11cd0 = inttoptr i32 %v1_11cd0 to i32*
  %v3_11cd0 = load i32, i32* %v2_11cd0, align 4
  store i32 %v3_11cd0, i32* %r2.global-to-local, align 4
  %v1_11cd4 = inttoptr i32 %v4_11ccc to i32*
  %v2_11cd4 = load i32, i32* %v1_11cd4, align 4
  store i32 %v2_11cd4, i32* %r3.global-to-local, align 4
  %v1_11cd8 = and i32 %v3_11cd0, -4
  store i32 %v1_11cd8, i32* %ip.global-to-local, align 4
  %v1_11cdc = add i32 %v0_11cd0, -8
  store i32 %v1_11cdc, i32* @r5, align 4
  store i32 %v1_11cdc, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_11cd8, %v2_11cd4
  br i1 %tmp, label %dec_label_pc_11d0c, label %dec_label_pc_11cec

dec_label_pc_11cec:                               ; preds = %dec_label_pc_11c8c
  %v1_11cec = or i32 %v2_11cd4, 3
  store i32 %v1_11cec, i32* %r3.global-to-local, align 4
  store i32 %v1_11cec, i32* %v1_11cd4, align 4
  %v3_11cf0 = load i32, i32* @lr, align 4
  %v4_11cf0 = add i32 %v3_11cf0, -8
  store i32 %v4_11cf0, i32* %lr.global-to-local, align 4
  %v0_11cf4 = load i32, i32* %ip.global-to-local, align 4
  %v3_11cf4 = udiv i32 %v0_11cf4, 8
  store i32 %v3_11cf4, i32* %r1.global-to-local, align 4
  %v1_11cf8 = add i32 %v3_11cf0, -4
  store i32 %v1_11cf8, i32* %r2.global-to-local, align 4
  %v4_11cfc = mul nuw i32 %v3_11cf4, 4
  %v5_11cfc = add i32 %v4_11cfc, %v1_11cf8
  %v6_11cfc = inttoptr i32 %v5_11cfc to i32*
  %v7_11cfc = load i32, i32* %v6_11cfc, align 4
  store i32 %v7_11cfc, i32* %r3.global-to-local, align 4
  %v1_11d00 = load i32, i32* @r5, align 4
  %v2_11d00 = add i32 %v1_11d00, 8
  %v3_11d00 = inttoptr i32 %v2_11d00 to i32*
  store i32 %v7_11cfc, i32* %v3_11d00, align 4
  %v0_11d04 = load i32, i32* @r5, align 4
  %v1_11d04 = load i32, i32* %r2.global-to-local, align 4
  %v2_11d04 = load i32, i32* %r1.global-to-local, align 4
  %v5_11d04 = mul i32 %v2_11d04, 4
  %v6_11d04 = add i32 %v5_11d04, %v1_11d04
  %v7_11d04 = inttoptr i32 %v6_11d04 to i32*
  store i32 %v0_11d04, i32* %v7_11d04, align 4
  br label %dec_label_pc_11e70

dec_label_pc_11d0c:                               ; preds = %dec_label_pc_11c8c
  %v1_11d0c = and i32 %v3_11cd0, 2
  %v2_11d0c = icmp eq i32 %v1_11d0c, 0
  br i1 %v2_11d0c, label %dec_label_pc_11d14, label %dec_label_pc_11e48

dec_label_pc_11d14:                               ; preds = %dec_label_pc_11d0c
  %v1_11d14 = or i32 %v2_11cd4, 1
  store i32 %v1_11d14, i32* %r3.global-to-local, align 4
  store i32 %v1_11d14, i32* %v1_11cd4, align 4
  %v0_11d1c = load i32, i32* @r6, align 4
  %v1_11d1c = add i32 %v0_11d1c, -4
  %v2_11d1c = inttoptr i32 %v1_11d1c to i32*
  %v3_11d1c = load i32, i32* %v2_11d1c, align 4
  store i32 %v3_11d1c, i32* %r3.global-to-local, align 4
  %v0_11d20 = load i32, i32* @r5, align 4
  %v1_11d20 = load i32, i32* %ip.global-to-local, align 4
  %v2_11d20 = add i32 %v1_11d20, %v0_11d20
  store i32 %v2_11d20, i32* %lr.global-to-local, align 4
  %v1_11d24 = urem i32 %v3_11d1c, 2
  %v2_11d24 = icmp eq i32 %v1_11d24, 0
  %v1_11d28 = add i32 %v2_11d20, 4
  %v2_11d28 = inttoptr i32 %v1_11d28 to i32*
  %v3_11d28 = load i32, i32* %v2_11d28, align 4
  store i32 %v3_11d28, i32* %r8.global-to-local, align 4
  br i1 %v2_11d24, label %dec_label_pc_11d30, label %dec_label_pc_11d64

dec_label_pc_11d30:                               ; preds = %dec_label_pc_11d14
  %v1_11d30 = add i32 %v0_11d1c, -8
  %v2_11d30 = inttoptr i32 %v1_11d30 to i32*
  %v3_11d30 = load i32, i32* %v2_11d30, align 4
  store i32 %v3_11d30, i32* %r1.global-to-local, align 4
  %v2_11d34 = sub i32 %v0_11d20, %v3_11d30
  store i32 %v2_11d34, i32* %r3.global-to-local, align 4
  %v1_11d38 = add i32 %v2_11d34, 8
  %v2_11d38 = inttoptr i32 %v1_11d38 to i32*
  %v3_11d38 = load i32, i32* %v2_11d38, align 4
  store i32 %v3_11d38, i32* %r2.global-to-local, align 4
  %v1_11d3c = add i32 %v3_11d38, 12
  %v2_11d3c = inttoptr i32 %v1_11d3c to i32*
  %v3_11d3c = load i32, i32* %v2_11d3c, align 4
  store i32 %v3_11d3c, i32* %r4.global-to-local, align 4
  %v9_11d40 = icmp eq i32 %v3_11d3c, %v2_11d34
  %v1_11d44 = add i32 %v2_11d34, 12
  %v2_11d44 = inttoptr i32 %v1_11d44 to i32*
  %v3_11d44 = load i32, i32* %v2_11d44, align 4
  store i32 %v3_11d44, i32* %r0.global-to-local, align 4
  br i1 %v9_11d40, label %dec_label_pc_11d4c, label %dec_label_pc_11db0

dec_label_pc_11d4c:                               ; preds = %dec_label_pc_11d30
  %v1_11d4c = add i32 %v3_11d44, 8
  %v2_11d4c = inttoptr i32 %v1_11d4c to i32*
  %v3_11d4c = load i32, i32* %v2_11d4c, align 4
  store i32 %v3_11d4c, i32* %r3.global-to-local, align 4
  %v9_11d50 = icmp eq i32 %v3_11d4c, %v2_11d34
  br i1 %v9_11d50, label %dec_label_pc_11d58, label %dec_label_pc_11db0

dec_label_pc_11d58:                               ; preds = %dec_label_pc_11d4c
  store i32 %v3_11d38, i32* %v2_11d4c, align 4
  %v0_11d5c = load i32, i32* %r0.global-to-local, align 4
  %v1_11d5c = load i32, i32* %r2.global-to-local, align 4
  %v2_11d5c = add i32 %v1_11d5c, 12
  %v3_11d5c = inttoptr i32 %v2_11d5c to i32*
  store i32 %v0_11d5c, i32* %v3_11d5c, align 4
  %v0_11d60 = load i32, i32* %ip.global-to-local, align 4
  %v1_11d60 = load i32, i32* %r1.global-to-local, align 4
  %v2_11d60 = add i32 %v1_11d60, %v0_11d60
  store i32 %v2_11d60, i32* %ip.global-to-local, align 4
  %v0_11d70.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_11d74.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_11d64

dec_label_pc_11d64:                               ; preds = %dec_label_pc_11d14, %dec_label_pc_11d58
  %v0_11df0 = phi i32 [ %v1_11d20, %dec_label_pc_11d14 ], [ %v2_11d60, %dec_label_pc_11d58 ]
  %v0_11d74 = phi i32 [ %v3_11d28, %dec_label_pc_11d14 ], [ %v0_11d74.pre, %dec_label_pc_11d58 ]
  %v1_11d88 = phi i32 [ %v2_11d20, %dec_label_pc_11d14 ], [ %v0_11d70.pre, %dec_label_pc_11d58 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_11d68 = load i32, i32* @r7, align 4
  %v2_11d68 = add i32 %v0_11d68, 32
  %v3_11d68 = inttoptr i32 %v2_11d68 to i32*
  %v4_11d68 = load i32, i32* %v3_11d68, align 4
  store i32 %v4_11d68, i32* %r2.global-to-local, align 4
  %v1_11d6c = add i32 %v4_11d68, 44
  %v2_11d6c = inttoptr i32 %v1_11d6c to i32*
  %v3_11d6c = load i32, i32* %v2_11d6c, align 4
  store i32 %v3_11d6c, i32* %r3.global-to-local, align 4
  %v9_11d70 = icmp eq i32 %v1_11d88, %v3_11d6c
  %v1_11d74 = and i32 %v0_11d74, -4
  store i32 %v1_11d74, i32* %r0.global-to-local, align 4
  br i1 %v9_11d70, label %dec_label_pc_11df0, label %dec_label_pc_11d7c

dec_label_pc_11d7c:                               ; preds = %dec_label_pc_11d64
  %v2_11d7c = add i32 %v1_11d88, %v1_11d74
  store i32 %v2_11d7c, i32* %r3.global-to-local, align 4
  %v1_11d80 = add i32 %v2_11d7c, 4
  %v2_11d80 = inttoptr i32 %v1_11d80 to i32*
  %v3_11d80 = load i32, i32* %v2_11d80, align 4
  store i32 %v3_11d80, i32* %r3.global-to-local, align 4
  %v1_11d84 = urem i32 %v3_11d80, 2
  %v2_11d84 = icmp eq i32 %v1_11d84, 0
  %v2_11d88 = add i32 %v1_11d88, 4
  %v3_11d88 = inttoptr i32 %v2_11d88 to i32*
  store i32 %v1_11d74, i32* %v3_11d88, align 4
  br i1 %v2_11d84, label %dec_label_pc_11d90, label %dec_label_pc_11d7c.dec_label_pc_11dc0_crit_edge

dec_label_pc_11d7c.dec_label_pc_11dc0_crit_edge:  ; preds = %dec_label_pc_11d7c
  %v0_11dd0.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11dc0

dec_label_pc_11d90:                               ; preds = %dec_label_pc_11d7c
  %v0_11d90 = load i32, i32* %lr.global-to-local, align 4
  %v1_11d90 = add i32 %v0_11d90, 8
  %v2_11d90 = inttoptr i32 %v1_11d90 to i32*
  %v3_11d90 = load i32, i32* %v2_11d90, align 4
  store i32 %v3_11d90, i32* %r1.global-to-local, align 4
  %v1_11d94 = add i32 %v3_11d90, 12
  %v2_11d94 = inttoptr i32 %v1_11d94 to i32*
  %v3_11d94 = load i32, i32* %v2_11d94, align 4
  store i32 %v3_11d94, i32* %r3.global-to-local, align 4
  %v9_11d98 = icmp eq i32 %v3_11d94, %v0_11d90
  %v1_11d9c = add i32 %v0_11d90, 12
  %v2_11d9c = inttoptr i32 %v1_11d9c to i32*
  %v3_11d9c = load i32, i32* %v2_11d9c, align 4
  store i32 %v3_11d9c, i32* %r2.global-to-local, align 4
  br i1 %v9_11d98, label %dec_label_pc_11da4, label %dec_label_pc_11db0

dec_label_pc_11da4:                               ; preds = %dec_label_pc_11d90
  %v1_11da4 = add i32 %v3_11d9c, 8
  %v2_11da4 = inttoptr i32 %v1_11da4 to i32*
  %v3_11da4 = load i32, i32* %v2_11da4, align 4
  store i32 %v3_11da4, i32* %r3.global-to-local, align 4
  %v9_11da8 = icmp eq i32 %v3_11da4, %v0_11d90
  br i1 %v9_11da8, label %dec_label_pc_11db4, label %dec_label_pc_11db0

dec_label_pc_11db0:                               ; preds = %dec_label_pc_11d90, %dec_label_pc_11d4c, %dec_label_pc_11d30, %dec_label_pc_11da4
  %v0_11db0 = call i32 @function_11ef0()
  store i32 %v0_11db0, i32* %r0.global-to-local, align 4
  %v0_11db4.pre = load i32, i32* @r1, align 4
  %v1_11db4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_11db4

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11da4, %dec_label_pc_11db0
  %v1_11db4 = phi i32 [ %v3_11d9c, %dec_label_pc_11da4 ], [ %v1_11db4.pre, %dec_label_pc_11db0 ]
  %v0_11db4 = phi i32 [ %v3_11d90, %dec_label_pc_11da4 ], [ %v0_11db4.pre, %dec_label_pc_11db0 ]
  %v2_11db4 = add i32 %v1_11db4, 8
  %v3_11db4 = inttoptr i32 %v2_11db4 to i32*
  store i32 %v0_11db4, i32* %v3_11db4, align 4
  %v0_11db8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11db8 = load i32, i32* %r1.global-to-local, align 4
  %v2_11db8 = add i32 %v1_11db8, 12
  %v3_11db8 = inttoptr i32 %v2_11db8 to i32*
  store i32 %v0_11db8, i32* %v3_11db8, align 4
  %v0_11dbc = load i32, i32* %ip.global-to-local, align 4
  %v1_11dbc = load i32, i32* %r0.global-to-local, align 4
  %v2_11dbc = add i32 %v1_11dbc, %v0_11dbc
  store i32 %v2_11dbc, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11dc0

dec_label_pc_11dc0:                               ; preds = %dec_label_pc_11d7c.dec_label_pc_11dc0_crit_edge, %dec_label_pc_11db4
  %v0_11dd0 = phi i32 [ %v0_11dd0.pre, %dec_label_pc_11d7c.dec_label_pc_11dc0_crit_edge ], [ %v2_11dbc, %dec_label_pc_11db4 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_11dc4 = load i32, i32* @r7, align 4
  %v2_11dc4 = add i32 %v0_11dc4, 32
  %v3_11dc4 = inttoptr i32 %v2_11dc4 to i32*
  %v4_11dc4 = load i32, i32* %v3_11dc4, align 4
  %v1_11dc8 = add i32 %v4_11dc4, 52
  store i32 %v1_11dc8, i32* %r3.global-to-local, align 4
  %v1_11dcc = add i32 %v4_11dc4, 60
  %v2_11dcc = inttoptr i32 %v1_11dcc to i32*
  %v3_11dcc = load i32, i32* %v2_11dcc, align 4
  store i32 %v3_11dcc, i32* %r1.global-to-local, align 4
  %v1_11dd0 = or i32 %v0_11dd0, 1
  store i32 %v1_11dd0, i32* %r2.global-to-local, align 4
  %v1_11dd4 = load i32, i32* %r4.global-to-local, align 4
  %v2_11dd4 = add i32 %v1_11dd4, 12
  %v3_11dd4 = inttoptr i32 %v2_11dd4 to i32*
  store i32 %v1_11dc8, i32* %v3_11dd4, align 4
  %v0_11dd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11dd8 = load i32, i32* %r4.global-to-local, align 4
  %v2_11dd8 = add i32 %v1_11dd8, 8
  %v3_11dd8 = inttoptr i32 %v2_11dd8 to i32*
  store i32 %v0_11dd8, i32* %v3_11dd8, align 4
  %v0_11ddc = load i32, i32* %r2.global-to-local, align 4
  %v1_11ddc = load i32, i32* %r4.global-to-local, align 4
  %v2_11ddc = add i32 %v1_11ddc, 4
  %v3_11ddc = inttoptr i32 %v2_11ddc to i32*
  store i32 %v0_11ddc, i32* %v3_11ddc, align 4
  %v0_11de0 = load i32, i32* %ip.global-to-local, align 4
  %v1_11de0 = load i32, i32* %r4.global-to-local, align 4
  %v3_11de0 = add i32 %v1_11de0, %v0_11de0
  %v4_11de0 = inttoptr i32 %v3_11de0 to i32*
  store i32 %v0_11de0, i32* %v4_11de0, align 4
  %v0_11de4 = load i32, i32* %r4.global-to-local, align 4
  %v1_11de4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11de4 = add i32 %v1_11de4, 12
  %v3_11de4 = inttoptr i32 %v2_11de4 to i32*
  store i32 %v0_11de4, i32* %v3_11de4, align 4
  %v0_11de8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11de8 = load i32, i32* %r3.global-to-local, align 4
  %v2_11de8 = add i32 %v1_11de8, 8
  %v3_11de8 = inttoptr i32 %v2_11de8 to i32*
  store i32 %v0_11de8, i32* %v3_11de8, align 4
  br label %dec_label_pc_11e00

dec_label_pc_11df0:                               ; preds = %dec_label_pc_11d64
  %v2_11df0 = add i32 %v1_11d74, %v0_11df0
  store i32 %v2_11df0, i32* %ip.global-to-local, align 4
  %v1_11df4 = or i32 %v2_11df0, 1
  store i32 %v1_11df4, i32* %r3.global-to-local, align 4
  %v0_11df8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11df8, i32* %v2_11d6c, align 4
  %v0_11dfc = load i32, i32* %r3.global-to-local, align 4
  %v1_11dfc = load i32, i32* %r4.global-to-local, align 4
  %v2_11dfc = add i32 %v1_11dfc, 4
  %v3_11dfc = inttoptr i32 %v2_11dfc to i32*
  store i32 %v0_11dfc, i32* %v3_11dfc, align 4
  br label %dec_label_pc_11e00

dec_label_pc_11e00:                               ; preds = %dec_label_pc_11dc0, %dec_label_pc_11df0
  %v0_11e00 = load i32, i32* %ip.global-to-local, align 4
  %v3_11e04 = icmp ult i32 %v0_11e00, 131070
  br i1 %v3_11e04, label %dec_label_pc_11e70, label %dec_label_pc_11e08

dec_label_pc_11e08:                               ; preds = %dec_label_pc_11e00
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_11e0c = load i32, i32* @r7, align 4
  %v2_11e0c = add i32 %v0_11e0c, 32
  %v3_11e0c = inttoptr i32 %v2_11e0c to i32*
  %v4_11e0c = load i32, i32* %v3_11e0c, align 4
  store i32 %v4_11e0c, i32* @r4, align 4
  %v1_11e10 = inttoptr i32 %v4_11e0c to i32*
  %v2_11e10 = load i32, i32* %v1_11e10, align 4
  store i32 %v2_11e10, i32* %r3.global-to-local, align 4
  %v1_11e14 = and i32 %v2_11e10, 2
  %v2_11e14 = icmp eq i32 %v1_11e14, 0
  br i1 %v2_11e14, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_11e08
  store i32 %v4_11e0c, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_11e08, %bb
  store i32 73248, i32* @lr, align 4
  %v1_11e1c = xor i1 %v2_11e14, true
  call void @__pseudo_cond_branch(i1 %v1_11e1c, i32 ptrtoint (i32* @global_var_11ac0.355 to i32))
  %v0_11e20 = load i32, i32* @r4, align 4
  %v1_11e20 = add i32 %v0_11e20, 44
  %v2_11e20 = inttoptr i32 %v1_11e20 to i32*
  %v3_11e20 = load i32, i32* %v2_11e20, align 4
  store i32 %v3_11e20, i32* %r3.global-to-local, align 4
  %v1_11e24 = add i32 %v3_11e20, 4
  %v2_11e24 = inttoptr i32 %v1_11e24 to i32*
  %v3_11e24 = load i32, i32* %v2_11e24, align 4
  store i32 %v3_11e24, i32* %r3.global-to-local, align 4
  %v1_11e28 = add i32 %v0_11e20, 836
  %v2_11e28 = inttoptr i32 %v1_11e28 to i32*
  %v3_11e28 = load i32, i32* %v2_11e28, align 4
  store i32 %v3_11e28, i32* %r2.global-to-local, align 4
  %v1_11e2c = and i32 %v3_11e24, -4
  store i32 %v1_11e2c, i32* %r3.global-to-local, align 4
  %v3_11e30 = icmp ult i32 %v1_11e2c, %v3_11e28
  br i1 %v3_11e30, label %dec_label_pc_11e70, label %dec_label_pc_11e38

dec_label_pc_11e38:                               ; preds = %bb15
  store i32 %v0_11e20, i32* %r1.global-to-local, align 4
  %v1_11e3c = add i32 %v0_11e20, 840
  %v2_11e3c = inttoptr i32 %v1_11e3c to i32*
  %v3_11e3c = load i32, i32* %v2_11e3c, align 4
  store i32 %v3_11e3c, i32* %r0.global-to-local, align 4
  %v2_11e40 = call i32 @function_11a10(i32 %v3_11e3c, i32 %v0_11e20)
  store i32 %v2_11e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e70

dec_label_pc_11e48:                               ; preds = %dec_label_pc_11d0c
  %v2_11e48 = inttoptr i32 %v1_11cdc to i32*
  %v3_11e48 = load i32, i32* %v2_11e48, align 4
  store i32 %v3_11e48, i32* %r0.global-to-local, align 4
  %v1_11e4c = add i32 %v4_11ccc, 848
  %v2_11e4c = inttoptr i32 %v1_11e4c to i32*
  %v3_11e4c = load i32, i32* %v2_11e4c, align 4
  store i32 %v3_11e4c, i32* %r2.global-to-local, align 4
  %v1_11e50 = add i32 %v4_11ccc, 868
  %v2_11e50 = inttoptr i32 %v1_11e50 to i32*
  %v3_11e50 = load i32, i32* %v2_11e50, align 4
  %v2_11e54 = add i32 %v3_11e48, %v1_11cd8
  store i32 %v2_11e54, i32* %r1.global-to-local, align 4
  %v1_11e58 = add i32 %v3_11e4c, -1
  store i32 %v1_11e58, i32* %r2.global-to-local, align 4
  %v2_11e5c = sub i32 %v3_11e50, %v2_11e54
  store i32 %v2_11e5c, i32* %r3.global-to-local, align 4
  store i32 %v2_11e5c, i32* %v2_11e50, align 4
  %v1_11e64 = load i32, i32* @lr, align 4
  %v2_11e64 = add i32 %v1_11e64, 848
  %v3_11e64 = inttoptr i32 %v2_11e64 to i32*
  store i32 %v1_11e58, i32* %v3_11e64, align 4
  %v0_11e68 = load i32, i32* %r0.global-to-local, align 4
  %v1_11e68 = load i32, i32* @r5, align 4
  %v2_11e68 = sub i32 %v1_11e68, %v0_11e68
  store i32 %v2_11e68, i32* %r0.global-to-local, align 4
  %v4_11e6c = call i32 @function_1325c(i32 %v2_11e68, i32 %v2_11e54, i32 %v1_11e58, i32 %v2_11e5c)
  store i32 %v4_11e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e70

dec_label_pc_11e70:                               ; preds = %bb15, %dec_label_pc_11e00, %dec_label_pc_11e38, %dec_label_pc_11cec, %dec_label_pc_11e48
  store i32 %v2_11c80, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_11e7c = load i32, i32* @r7, align 4
  %v2_11e7c = add i32 %v0_11e7c, 24
  %v3_11e7c = inttoptr i32 %v2_11e7c to i32*
  %v4_11e7c = load i32, i32* %v3_11e7c, align 4
  store i32 %v4_11e7c, i32* @ip, align 4
  store i32 73352, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11e7c)
  br label %dec_label_pc_11e88

dec_label_pc_11e88:                               ; preds = %dec_label_pc_11c74, %dec_label_pc_11e70
  store i32 %v3_11c74, i32* @r4, align 4
  store i32 %v6_11c74, i32* @r5, align 4
  store i32 %v9_11c74, i32* @r6, align 4
  store i32 %v12_11c74, i32* @r7, align 4
  store i32 %v18_11c74, i32* @lr, align 4
  ret i32 %v2_11c80

; uselistorder directives
  uselistorder i32 %v0_11e20, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_11de0, { 1, 0 }
  uselistorder i32 %v1_11d20, { 1, 0 }
  uselistorder i32 %v0_11d20, { 1, 0 }
  uselistorder i32 %v3_11cf4, { 1, 0 }
  uselistorder i32 %v1_11cd8, { 1, 0, 2 }
  uselistorder i32 %v2_11cd4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11ccc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11c7c, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 5, 0, 2, 3, 4, 1, 6, 7, 9, 8, 10, 11, 12, 14, 13 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_11e88, { 1, 0 }
  uselistorder label %dec_label_pc_11e70, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_11e00, { 1, 0 }
  uselistorder label %dec_label_pc_11dc0, { 1, 0 }
  uselistorder label %dec_label_pc_11db4, { 1, 0 }
  uselistorder label %dec_label_pc_11db0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11d64, { 1, 0 }
}

define i32 @function_11e98(i32 %arg1) local_unnamed_addr {
dec_label_pc_11e98:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_11e98 = load i1, i1* @cpsr_z, align 1
  %v2_11e98 = load i32, i32* @r4, align 4
  br i1 %v0_11e98, label %bb, label %dec_label_pc_11e98..thread4_crit_edge

dec_label_pc_11e98..thread4_crit_edge:            ; preds = %dec_label_pc_11e98
  %v0_11ec4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_11e98
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_11e98..thread4_crit_edge, %bb
  %v0_11ec4 = phi i32 [ %v0_11ec4.pre, %dec_label_pc_11e98..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_11e98, i32* %stack_var_-12, align 4
  %v6_11eb0 = load i32, i32* @r5, align 4
  %v9_11eb0 = load i32, i32* @lr, align 4
  %v4_11ec0 = load i32, i32* inttoptr (i32 121124 to i32*), align 4
  store i32 %v4_11ec0, i32* @r5, align 4
  store i32 %v0_11ec4, i32* @r4, align 4
  store i32 %v4_11ec0, i32* @r0, align 4
  %v0_11ed0 = call i32 @function_11ac0()
  %v0_11ed4 = load i32, i32* @r4, align 4
  store i32 %v0_11ed4, i32* %r0.global-to-local, align 4
  %v0_11ed8 = load i32, i32* @r5, align 4
  %v2_11ee0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11ee0, i32* @r4, align 4
  store i32 %v6_11eb0, i32* @r5, align 4
  store i32 %v9_11eb0, i32* @lr, align 4
  %v2_11ee4 = call i32 @function_11a10(i32 %v0_11ed4, i32 %v0_11ed8)
  store i32 %v2_11ee4, i32* %r0.global-to-local, align 4
  %v0_11ee8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11ee8, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_11eec = phi i32 [ %v2_11ee4, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_11eec

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_11a10, { 1, 0 }
  uselistorder i32 ()* @function_11ac0, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 121124 to i32*), { 17, 2, 1, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 3 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_11ef0() local_unnamed_addr {
dec_label_pc_11ef0:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 121092, i32* @r5, align 4
  %v4_11f08 = load i32, i32* inttoptr (i32 121108 to i32*), align 4
  store i32 73492, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11f08)
  %v2_11f24 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_11f30 = call i32 @function_101a0(i32 1, i32 %v2_11f24, i32 0)
  %v4_11f38 = load i32, i32* @global_var_1dba0.363, align 4
  %v2_11f3c = icmp eq i32 %v4_11f38, 0
  br i1 %v2_11f3c, label %dec_label_pc_11f44, label %dec_label_pc_11f84

dec_label_pc_11f44:                               ; preds = %dec_label_pc_11ef0
  store i32 1, i32* @global_var_1dba0.363, align 4
  br label %dec_label_pc_11f4c

dec_label_pc_11f4c:                               ; preds = %dec_label_pc_11f94, %dec_label_pc_11f44
  %v0_11f50 = load i32, i32* @r5, align 4
  %v2_11f50 = add i32 %v0_11f50, 160
  store i32 %v2_11f50, i32* @r4, align 4
  %v2_11f5c = add i32 %v0_11f50, 36
  %v3_11f5c = inttoptr i32 %v2_11f5c to i32*
  %v4_11f5c = load i32, i32* %v3_11f5c, align 4
  call void @__pseudo_branch(i32 %v4_11f5c)
  %v1_11f6c = call i32 @function_109f8(i32 6)
  %v0_11f78 = load i32, i32* @r5, align 4
  %v2_11f78 = add i32 %v0_11f78, 16
  %v3_11f78 = inttoptr i32 %v2_11f78 to i32*
  %v4_11f78 = load i32, i32* %v3_11f78, align 4
  store i32 73604, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11f78)
  %v4_11f88.pre = load i32, i32* @global_var_1dba0.363, align 4
  br label %dec_label_pc_11f84

dec_label_pc_11f84:                               ; preds = %dec_label_pc_11ef0, %dec_label_pc_11f4c
  %v0_11f98 = phi i32 [ %v4_11f38, %dec_label_pc_11ef0 ], [ %v4_11f88.pre, %dec_label_pc_11f4c ]
  %v7_11f8c = icmp eq i32 %v0_11f98, 1
  br i1 %v7_11f8c, label %dec_label_pc_11f94, label %dec_label_pc_11fd0

dec_label_pc_11f94:                               ; preds = %dec_label_pc_11f84
  %v2_11f94 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_11f94, i32* @r4, align 4
  store i32 2, i32* @global_var_1dba0.363, align 4
  store i32 20, i32* @r2, align 4
  %v2_11fac = bitcast i32* %stack_var_-28 to i8*
  %v3_11fac = call i32 @function_10650(i8* %v2_11fac, i32 0)
  %v3_11fc8 = call i32 @function_12d5c(i32 6, i32 %v2_11f94, i32 0)
  br label %dec_label_pc_11f4c

dec_label_pc_11fd0:                               ; preds = %dec_label_pc_11f84
  %v7_11fd0 = icmp eq i32 %v0_11f98, 2
  br i1 %v7_11fd0, label %dec_label_pc_11fd8, label %dec_label_pc_11fe4

dec_label_pc_11fd8:                               ; preds = %dec_label_pc_11fd0
  store i32 3, i32* @global_var_1dba0.363, align 4
  %v0_11fe0 = call i32 @function_11ef0()
  %v4_11fe4.pre = load i32, i32* @global_var_1dba0.363, align 4
  br label %dec_label_pc_11fe4

dec_label_pc_11fe4:                               ; preds = %dec_label_pc_11fd0, %dec_label_pc_11fd8
  %v1_11fec = phi i32 [ %v0_11f98, %dec_label_pc_11fd0 ], [ %v4_11fe4.pre, %dec_label_pc_11fd8 ]
  %v7_11fe8 = icmp eq i32 %v1_11fec, 3
  br i1 %v7_11fe8, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_11fe4
  store i32 4, i32* @global_var_1dba0.363, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11fe4, %bb
  call void @__pseudo_cond_branch(i1 %v7_11fe8, i32 ptrtoint (i32* @global_var_1334c.365 to i32))
  br label %dec_label_pc_11ffc

dec_label_pc_11ffc:                               ; preds = %dec_label_pc_11ffc, %.thread1
  %v0_11ffc = call i32 @function_11ef0()
  br label %dec_label_pc_11ffc

; uselistorder directives
  uselistorder i32 ()* @function_11ef0, { 2, 1, 5, 0, 6, 4, 3 }
  uselistorder i32 6, { 13, 14, 60, 3, 27, 28, 15, 26, 1, 29, 16, 30, 0, 17, 18, 19, 4, 20, 31, 32, 33, 5, 34, 35, 36, 37, 6, 38, 39, 40, 41, 7, 42, 8, 43, 44, 21, 45, 9, 46, 47, 48, 22, 49, 10, 50, 51, 23, 52, 53, 54, 55, 56, 24, 57, 11, 58, 61, 62, 63, 64, 65, 25, 66, 12, 67, 2, 59 }
  uselistorder i32* @global_var_1dba0.363, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 121108 to i32*), { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_11fe4, { 1, 0 }
  uselistorder label %dec_label_pc_11f84, { 1, 0 }
}

define i32 @function_12008(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12008:
  %v0_12008 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12008, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12008
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12008, %bb
  %v4_12014 = phi i32 [ %arg1, %dec_label_pc_12008 ], [ 0, %bb ]
  ret i32 %v4_12014

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12018(i32 %arg1) local_unnamed_addr {
dec_label_pc_12018:
  %stack_var_-16 = alloca i32, align 4
  store i32 121092, i32* @r5, align 4
  %v4_12024 = load i32, i32* inttoptr (i32 121180 to i32*), align 4
  store i32 %v4_12024, i32* @r4, align 4
  %v2_1202c = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_12044 = load i32, i32* inttoptr (i32 121164 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12044)
  %v0_12058 = load i32, i32* @r5, align 4
  %v2_12058 = add i32 %v0_12058, 16
  %v3_12058 = inttoptr i32 %v2_12058 to i32*
  %v4_12058 = load i32, i32* %v3_12058, align 4
  call void @__pseudo_branch(i32 %v4_12058)
  %v4_12068 = load i32, i32* @global_var_1dba4.372, align 4
  %v2_1206c = icmp eq i32 %v4_12068, 0
  br i1 %v2_1206c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12018
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12018, %bb
  %v2_12078 = xor i1 %v2_1206c, true
  call void @__pseudo_cond_branch(i1 %v2_12078, i32 %v4_12068)
  store i32 %v2_1202c, i32* @r0, align 4
  %v0_12088 = load i32, i32* @r5, align 4
  %v2_12088 = add i32 %v0_12088, 24
  %v3_12088 = inttoptr i32 %v2_12088 to i32*
  %v4_12088 = load i32, i32* %v3_12088, align 4
  call void @__pseudo_branch(i32 %v4_12088)
  %v0_12094 = call i32 @function_128e4()
  %v0_1209c = load i32, i32* @r5, align 4
  %v9_1209c = icmp eq i32 %v0_1209c, 39812
  br i1 %v9_1209c, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_120a4 = xor i1 %v9_1209c, true
  call void @__pseudo_cond_branch(i1 %v2_120a4, i32 ptrtoint (i32* @global_var_13d80.375 to i32))
  %v0_120a8 = load i32, i32* @r6, align 4
  %v1_120ac = call i32 @function_1334c(i32 %v0_120a8)
  %v0_120b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_120b0, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v2_120b0 = inttoptr i32 %v1_120ac to i64*
  %v3_120b0 = load i64, i64* %v2_120b0, align 4
  %v5_120b0 = trunc i64 %v3_120b0 to i32
  %v6_120b0 = udiv i64 %v3_120b0, 4294967296
  %v7_120b0 = trunc i64 %v6_120b0 to i32
  store i32 %v7_120b0, i32* @fp, align 4
  store i32 %v5_120b0, i32* @ip, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_120c8 = phi i32 [ %v1_120ac, %bb9 ], [ 0, %bb10 ]
  ret i32 %v10_120c8

; uselistorder directives
  uselistorder i1 %v9_1209c, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_120d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_120d0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_120d0 = load i32, i32* @r4, align 4
  %v6_120d0 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @ip, align 4
  %v2_120d4 = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_120d4, label %dec_label_pc_12168, label %dec_label_pc_120e4

dec_label_pc_120e4:                               ; preds = %dec_label_pc_120d0
  %v2_120f4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_12108 = call i32 @function_12d5c(i32 17, i32 0, i32 %v2_120f4)
  %v3_1210c = load i32, i32* %stack_var_-44, align 4
  %v7_12110 = icmp eq i32 %v3_1210c, 1
  br i1 %v7_12110, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_120e4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_120e4, %bb
  call void @__pseudo_cond_branch(i1 %v7_12110, i32 ptrtoint (i32* @global_var_101a0.377 to i32))
  %v2_12124 = ptrtoint i32* %stack_var_-16 to i32
  %v2_1212c = call i32 @function_13290(i32 %v2_12124, i32 %v2_12124)
  %v2_12130 = icmp eq i32 %v2_1212c, 0
  br i1 %v2_12130, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_12144 = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_12144, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_12154 = load i32, i32* %stack_var_-24, align 4
  %v1_12158 = and i32 %v3_12154, 65536
  %v2_12158 = icmp eq i32 %v1_12158, 0
  br i1 %v2_12158, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_12158, i32 ptrtoint (i32* @global_var_101a0.377 to i32))
  %v0_12168.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12168

dec_label_pc_12168:                               ; preds = %dec_label_pc_120d0, %.thread6
  %v0_12168 = phi i32 [ %v0_12168.pre, %.thread6 ], [ 0, %dec_label_pc_120d0 ]
  store i32 %v3_120d0, i32* @r4, align 4
  store i32 %v6_120d0, i32* @lr, align 4
  ret i32 %v0_12168

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_12d5c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12168, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_1217c() local_unnamed_addr {
dec_label_pc_1217c:
  %stack_var_-36 = alloca i32, align 4
  store i32 121092, i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_15588.381 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_1219c = call i32 @function_137c0(i32 ptrtoint ([11 x i8]* @global_var_15588.381 to i32))
  store i32 %v2_1219c, i32* @r6, align 4
  %v2_121a0 = icmp eq i32 %v2_1219c, 0
  br i1 %v2_121a0, label %dec_label_pc_12220, label %dec_label_pc_121a8

dec_label_pc_121a8:                               ; preds = %dec_label_pc_1217c
  store i32 224, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_15594.384 to i32), i32* @r8, align 4
  %v2_121b4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_121b4, i32* @r7, align 4
  br label %bb18

dec_label_pc_121bc:                               ; preds = %bb18
  %v3_121bc = load i32, i32* %stack_var_-36, align 4
  %v1_121c0 = inttoptr i32 %v3_121bc to i32*
  %v2_121c0 = load i32, i32* %v1_121c0, align 4
  %v1_121c4 = inttoptr i32 %v2_121c0 to i8*
  %v2_121c4 = load i8, i8* %v1_121c4, align 1
  %v7_121c8 = icmp eq i8 %v2_121c4, 99
  br i1 %v7_121c8, label %dec_label_pc_121d0, label %.backedge3

dec_label_pc_121d0:                               ; preds = %dec_label_pc_121bc
  %v1_121d0 = add i32 %v2_121c0, 1
  %v2_121d0 = inttoptr i32 %v1_121d0 to i8*
  %v3_121d0 = load i8, i8* %v2_121d0, align 1
  %v7_121d4 = icmp eq i8 %v3_121d0, 112
  br i1 %v7_121d4, label %dec_label_pc_121dc, label %.backedge3

dec_label_pc_121dc:                               ; preds = %dec_label_pc_121d0
  %v1_121dc = add i32 %v2_121c0, 2
  %v2_121dc = inttoptr i32 %v1_121dc to i8*
  %v3_121dc = load i8, i8* %v2_121dc, align 1
  %v7_121e0 = icmp eq i8 %v3_121dc, 117
  br i1 %v7_121e0, label %dec_label_pc_121e8, label %.backedge3

dec_label_pc_121e8:                               ; preds = %dec_label_pc_121dc
  %v1_121e8 = add i32 %v2_121c0, 3
  %v2_121e8 = inttoptr i32 %v1_121e8 to i8*
  %v3_121e8 = load i8, i8* %v2_121e8, align 1
  %v4_121e8 = zext i8 %v3_121e8 to i32
  %v0_121ec = load i32, i32* @r4, align 4
  %v1_121ec = load i32, i32* @sl, align 4
  %v2_121ec = add i32 %v1_121ec, %v0_121ec
  %v3_121ec = inttoptr i32 %v2_121ec to i32*
  %v4_121ec = load i32, i32* %v3_121ec, align 4
  %v2_121f0 = mul nuw nsw i32 %v4_121e8, 2
  %v2_121f4 = add i32 %v4_121ec, %v2_121f0
  %v3_121f4 = inttoptr i32 %v2_121f4 to i16*
  %v4_121f4 = load i16, i16* %v3_121f4, align 2
  %v1_121f8 = and i16 %v4_121f4, 8
  %v2_121f8 = icmp eq i16 %v1_121f8, 0
  br i1 %v2_121f8, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_121e8
  %v1_121fc = load i32, i32* @r5, align 4
  %v2_121fc = add i32 %v1_121fc, 1
  store i32 %v2_121fc, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_121e8, %dec_label_pc_121bc, %dec_label_pc_121d0, %dec_label_pc_121dc
  %v0_12200.pre = load i32, i32* @r6, align 4
  %v0_1220c.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_121a8
  %v0_1220c = phi i32 [ %v0_1220c.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_15594.384 to i32), %dec_label_pc_121a8 ]
  %v0_12200 = phi i32 [ %v0_12200.pre, %.backedge3 ], [ %v2_1219c, %dec_label_pc_121a8 ]
  %v4_12210 = inttoptr i32 %v0_12200 to i32*
  %v5_12210 = call i32 @function_13464(i32* %v4_12210, i32 %v2_121b4, i32 258, i32 %v0_1220c)
  %v2_12214 = icmp eq i32 %v5_12210, 0
  br i1 %v2_12214, label %dec_label_pc_12284, label %dec_label_pc_121bc

dec_label_pc_12220:                               ; preds = %dec_label_pc_1217c
  store i32 ptrtoint ([14 x i8]* @global_var_15598.387 to i32), i32* @r0, align 4
  %v2_12228 = call i32 @function_137c0(i32 ptrtoint ([14 x i8]* @global_var_15598.387 to i32))
  store i32 %v2_12228, i32* @r6, align 4
  %v2_1222c = icmp eq i32 %v2_12228, 0
  br i1 %v2_1222c, label %bb19, label %dec_label_pc_12238

bb19:                                             ; preds = %dec_label_pc_12220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12284

dec_label_pc_12238:                               ; preds = %dec_label_pc_12220
  store i32 ptrtoint ([10 x i8]* @global_var_155a8.389 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_155cc.391 to i32), i32* @r7, align 4
  %v2_12248 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12248, i32* @r4, align 4
  br label %bb21

dec_label_pc_12250:                               ; preds = %bb21
  %v0_1227c = load i32, i32* @r8, align 4
  %v1_1227c = inttoptr i32 %v0_1227c to i8*
  %v3_12250 = load i32, i32* %stack_var_-36, align 4
  %v1_12254 = inttoptr i32 %v3_12250 to i32*
  %v2_12254 = load i32, i32* %v1_12254, align 4
  store i32 %v2_12254, i32* @r1, align 4
  %v4_12258 = call i32 @function_14a70(i8* %v1_1227c, i32 %v2_12254)
  %v2_1225c = icmp eq i32 %v4_12258, 0
  br i1 %v2_1225c, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_12250
  %v1_12260 = load i32, i32* @r5, align 4
  %v2_12260 = add i32 %v1_12260, 1
  store i32 %v2_12260, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_12250
  %v0_1226c.pre = load i32, i32* @r7, align 4
  %v0_12270.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_12238
  %v0_12270 = phi i32 [ %v0_12270.pre, %.backedge ], [ %v2_12228, %dec_label_pc_12238 ]
  %v0_1226c = phi i32 [ %v0_1226c.pre, %.backedge ], [ ptrtoint (i32* @global_var_155cc.391 to i32), %dec_label_pc_12238 ]
  %v4_12274 = inttoptr i32 %v0_12270 to i32*
  %v5_12274 = call i32 @function_13464(i32* %v4_12274, i32 %v2_12248, i32 459266, i32 %v0_1226c)
  %v2_12278 = icmp eq i32 %v5_12274, 0
  br i1 %v2_12278, label %dec_label_pc_12284, label %dec_label_pc_12250

dec_label_pc_12284:                               ; preds = %bb18, %bb21, %bb19
  %v0_12284 = load i32, i32* @r6, align 4
  %v1_12288 = inttoptr i32 %v0_12284 to i32*
  %v2_12288 = call i32 @function_1378c(i32* %v1_12288)
  %v0_1228c = load i32, i32* @r5, align 4
  %v2_1228c = icmp eq i32 %v0_1228c, 0
  %.v0_1228c = select i1 %v2_1228c, i32 1, i32 %v0_1228c
  ret i32 %.v0_1228c

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @function_137c0, { 1, 0 }
  uselistorder label %dec_label_pc_12284, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_122c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_122c8:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_126b0

bb:                                               ; preds = %dec_label_pc_122c8
  %v7_122dc = mul i32 %arg1, 4
  %v8_122dc = add i32 %v7_122dc, ptrtoint (i32* @global_var_122e4.394 to i32)
  call void @__pseudo_branch(i32 %v8_122dc)
  br label %dec_label_pc_126b0

dec_label_pc_126b0:                               ; preds = %bb, %dec_label_pc_122c8
  %v0_126b0 = call i32 @function_10600()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_126bc = inttoptr i32 %v0_126b0 to i32*
  store i32 22, i32* %v2_126bc, align 4
  %v0_1286c = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_1286c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_128e4() local_unnamed_addr {
dec_label_pc_12908.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_128e4 = load i32, i32* @r4, align 4
  store i32 %v3_128e4, i32* %stack_var_-16, align 4
  store i32 121084, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12908

dec_label_pc_12908:                               ; preds = %dec_label_pc_12908.dec_label_pc_12908_crit_edge, %dec_label_pc_12908.lr.ph
  %v1_12908 = phi i32 [ %v1_12914, %dec_label_pc_12908.dec_label_pc_12908_crit_edge ], [ 0, %dec_label_pc_12908.lr.ph ]
  %v0_12908 = phi i32 [ %v0_12908.pre, %dec_label_pc_12908.dec_label_pc_12908_crit_edge ], [ 121084, %dec_label_pc_12908.lr.ph ]
  %v4_12908 = mul i32 %v1_12908, 4
  %v5_12908 = add i32 %v4_12908, %v0_12908
  %v6_12908 = inttoptr i32 %v5_12908 to i32*
  %v7_12908 = load i32, i32* %v6_12908, align 4
  call void @__pseudo_branch(i32 %v7_12908)
  %v0_12914 = load i32, i32* %r4.global-to-local, align 4
  %v1_12914 = add i32 %v0_12914, -1
  store i32 %v1_12914, i32* %r4.global-to-local, align 4
  %v2_12914 = icmp eq i32 %v0_12914, 0
  br i1 %v2_12914, label %dec_label_pc_1291c, label %dec_label_pc_12908.dec_label_pc_12908_crit_edge

dec_label_pc_12908.dec_label_pc_12908_crit_edge:  ; preds = %dec_label_pc_12908
  %v0_12908.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12908

dec_label_pc_1291c:                               ; preds = %dec_label_pc_12908
  %v4_12920 = load i32, i32* @global_var_1dbb4.407, align 4
  %v2_12924 = icmp eq i32 %v4_12920, 0
  br i1 %v2_12924, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_1291c
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_1291c, %bb
  %v2_1292c = xor i1 %v2_12924, true
  call void @__pseudo_cond_branch(i1 %v2_1292c, i32 %v4_12920)
  %v4_12934 = load i32, i32* @global_var_1dbb8.409, align 4
  %v2_12938 = icmp eq i32 %v4_12934, 0
  br i1 %v2_12938, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_12940 = xor i1 %v2_12938, true
  call void @__pseudo_cond_branch(i1 %v2_12940, i32 %v4_12934)
  %v2_12944 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12944, i32* %r4.global-to-local, align 4
  %v1_12948 = load i32, i32* @r0, align 4
  ret i32 %v1_12948

; uselistorder directives
  uselistorder i32 %v1_12914, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_12960(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12960:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_12974 = call i32 @function_1000c(i32 %arg1, i32 1)
  %v3_1297c = icmp eq i32 %v2_12974, -1
  store i32 121092, i32* @r3, align 4
  br i1 %v3_1297c, label %dec_label_pc_12988, label %dec_label_pc_129a0

dec_label_pc_12988:                               ; preds = %dec_label_pc_12960
  %v0_1298c = load i32, i32* %r5.global-to-local, align 4
  %v3_12994 = call i32 @function_fde4(i32 ptrtoint ([10 x i8]* @global_var_155d0.412 to i32), i32 %v0_1298c)
  %v1_12998 = load i32, i32* %r4.global-to-local, align 4
  %v1_1299c = icmp ne i32 %v3_12994, %v1_12998
  call void @__pseudo_cond_branch(i1 %v1_1299c, i32 ptrtoint (i32* @global_var_11ef0.413 to i32))
  br label %dec_label_pc_129a0

dec_label_pc_129a0:                               ; preds = %dec_label_pc_12960, %dec_label_pc_12988
  %v1_129a8 = phi i32 [ %v2_12974, %dec_label_pc_12960 ], [ %v3_12994, %dec_label_pc_12988 ]
  ret i32 %v1_129a8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_129a0, { 1, 0 }
}

define i32 @function_129b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_129b4:
  %r4.global-to-local = alloca i32, align 4
  store i32 121092, i32* %r4.global-to-local, align 4
  %v4_129c4 = load i32, i32* inttoptr (i32 121184 to i32*), align 32
  %v1_129c8 = inttoptr i32 %v4_129c4 to i32*
  %v2_129c8 = load i32, i32* %v1_129c8, align 4
  %v2_129cc = icmp eq i32 %v2_129c8, 0
  br i1 %v2_129cc, label %dec_label_pc_129d4, label %dec_label_pc_12a08

dec_label_pc_129d4:                               ; preds = %dec_label_pc_129b4
  %v4_129d8 = load i32, i32* inttoptr (i32 121144 to i32*), align 8
  %v2_129e0 = icmp eq i32 %v4_129d8, 0
  store i32 4096, i32* %v1_129c8, align 4
  br i1 %v2_129e0, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_129d4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_129d4, %bb
  %v2_129ec = xor i1 %v2_129e0, true
  call void @__pseudo_cond_branch(i1 %v2_129ec, i32 %v4_129d8)
  %v0_129f4 = load i32, i32* %r4.global-to-local, align 4
  %v2_129fc = icmp eq i32 %v0_129f4, 39968
  br i1 %v2_129fc, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_12a04 = xor i1 %v2_129fc, true
  call void @__pseudo_cond_branch(i1 %v2_12a04, i32 ptrtoint (i32* @global_var_13ce4.418 to i32))
  br label %dec_label_pc_12a08

dec_label_pc_12a08:                               ; preds = %dec_label_pc_129b4, %bb6
  %v1_12a0c = load i32, i32* @r0, align 4
  ret i32 %v1_12a0c

; uselistorder directives
  uselistorder i1 %v2_129fc, { 1, 0 }
  uselistorder label %dec_label_pc_12a08, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_12a20(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_12a20:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_12a28 = add i32 %tmp, 4
  store i32 %v1_12a28, i32* %ip.global-to-local, align 4
  %v2_12a2c = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 121092, i32* @r6, align 4
  %v3_12a38 = mul i32 %arg2, 4
  store i32 %v3_12a38, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_12a40 = load i32, i32* inttoptr (i32 121112 to i32*), align 8
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_12a48 = ptrtoint i32* %stack_var_-120 to i32
  %v4_12a4c = load i32, i32* inttoptr (i32 121120 to i32*), align 32
  store i32 %v4_12a4c, i32* %r4.global-to-local, align 4
  %v2_12a54 = add i32 %v1_12a28, %v3_12a38
  store i32 %v2_12a54, i32* %ip.global-to-local, align 4
  %v9_12a58 = icmp eq i32 %v2_12a54, %v2_12a2c
  store i1 %v9_12a58, i1* %cpsr_z.global-to-local, align 1
  %v2_12a5c = inttoptr i32 %v4_12a40 to i32*
  store i32 %arg7, i32* %v2_12a5c, align 4
  store i32 692, i32* %r2.global-to-local, align 4
  %v0_12a68 = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_12a58, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_12a20
  %v1_12a6c = load i32, i32* @r7, align 4
  %v2_12a6c = load i32, i32* %r5.global-to-local, align 4
  %v3_12a6c = add i32 %v2_12a6c, %v1_12a6c
  store i32 %v3_12a6c, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_1dbb8.409, align 4
  %v0_12a74 = load i32, i32* %ip.global-to-local, align 4
  %v1_12a74 = load i32, i32* %r4.global-to-local, align 4
  %v2_12a74 = inttoptr i32 %v1_12a74 to i32*
  store i32 %v0_12a74, i32* %v2_12a74, align 4
  store i32 120, i32* @r2, align 4
  %v1_12a80 = load i32, i32* %r3.global-to-local, align 4
  %v2_12a80 = load i32, i32* %r4.global-to-local, align 4
  %v3_12a80 = inttoptr i32 %v2_12a80 to i32*
  store i32 %v1_12a80, i32* %v3_12a80, align 4
  br label %bb57

.critedge:                                        ; preds = %dec_label_pc_12a20
  store i32 %arg6, i32* @global_var_1dbb8.409, align 4
  %v0_12a74.c = load i32, i32* %ip.global-to-local, align 4
  %v1_12a74.c = load i32, i32* %r4.global-to-local, align 4
  %v2_12a74.c = inttoptr i32 %v1_12a74.c to i32*
  store i32 %v0_12a74.c, i32* %v2_12a74.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb57

bb57:                                             ; preds = %.critedge, %bb
  store i32 %v2_12a48, i32* %r0.global-to-local, align 4
  %v2_12a8c = bitcast i32* %stack_var_-120 to i8*
  %v3_12a8c = call i32 @function_10650(i8* %v2_12a8c, i32 0)
  store i32 %v3_12a8c, i32* %r0.global-to-local, align 4
  %v0_12a90 = load i32, i32* %r4.global-to-local, align 4
  %v1_12a90 = inttoptr i32 %v0_12a90 to i32*
  %storemerge.pre = load i32, i32* %v1_12a90, align 4
  br label %dec_label_pc_12a9c

dec_label_pc_12a9c:                               ; preds = %dec_label_pc_12a9c, %bb57
  %storemerge = phi i32 [ %storemerge.pre, %bb57 ], [ %v4_12a9c, %dec_label_pc_12a9c ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_12a9c = inttoptr i32 %storemerge to i32*
  %v2_12a9c = load i32, i32* %v1_12a9c, align 4
  store i32 %v2_12a9c, i32* %r3.global-to-local, align 4
  %v4_12a9c = add i32 %storemerge, 4
  store i32 %v4_12a9c, i32* %r2.global-to-local, align 4
  %v2_12aa0 = icmp eq i32 %v2_12a9c, 0
  br i1 %v2_12aa0, label %dec_label_pc_12aac, label %dec_label_pc_12a9c

dec_label_pc_12aac:                               ; preds = %dec_label_pc_12a9c
  store i32 %v4_12a9c, i32* @r4, align 4
  store i32 %v2_12a48, i32* @r5, align 4
  %v1_12ad029 = inttoptr i32 %v4_12a9c to i32*
  %v2_12ad030 = load i32, i32* %v1_12ad029, align 4
  store i32 %v2_12ad030, i32* %r3.global-to-local, align 4
  %v2_12ad432 = icmp eq i32 %v2_12ad030, 0
  store i1 %v2_12ad432, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12ad432, label %dec_label_pc_12adc, label %dec_label_pc_12ab8

dec_label_pc_12ab8:                               ; preds = %dec_label_pc_12aac, %dec_label_pc_12ad0
  %v5_12abc = phi i32 [ %v2_12ad0, %dec_label_pc_12ad0 ], [ %v2_12ad030, %dec_label_pc_12aac ]
  %v2_12ab8 = icmp ugt i32 %v5_12abc, 13
  %v7_12ab8 = icmp eq i32 %v5_12abc, 14
  store i1 %v7_12ab8, i1* %cpsr_z.global-to-local, align 1
  %v2_12abc = xor i1 %v2_12ab8, true
  %v3_12abc = or i1 %v7_12ab8, %v2_12abc
  br i1 %v3_12abc, label %bb58, label %bb59

bb58:                                             ; preds = %dec_label_pc_12ab8
  %v4_12abc = load i32, i32* @r5, align 4
  %v6_12abc = and i32 %v5_12abc, 536870912
  %v7_12abc = icmp ne i32 %v6_12abc, 0
  %v8_12abc = mul i32 %v5_12abc, 8
  %v9_12abc = add i32 %v4_12abc, %v8_12abc
  store i32 %v9_12abc, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_12ab8, %bb58
  %v1_12ac8 = phi i1 [ %v2_12ab8, %dec_label_pc_12ab8 ], [ %v7_12abc, %bb58 ]
  %v2_12ac0 = xor i1 %v1_12ac8, true
  %v3_12ac0 = or i1 %v7_12ab8, %v2_12ac0
  br i1 %v3_12ac0, label %bb60, label %dec_label_pc_12ad0

bb60:                                             ; preds = %bb59
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12ad0

dec_label_pc_12ad0:                               ; preds = %bb59, %bb60
  call void @__pseudo_cond_branch(i1 %v3_12ac0, i32 ptrtoint (i32* @global_var_10700.423 to i32))
  %v0_12acc = load i32, i32* @r4, align 4
  %v1_12acc = add i32 %v0_12acc, 8
  store i32 %v1_12acc, i32* @r4, align 4
  %v1_12ad0 = inttoptr i32 %v1_12acc to i32*
  %v2_12ad0 = load i32, i32* %v1_12ad0, align 4
  store i32 %v2_12ad0, i32* %r3.global-to-local, align 4
  %v2_12ad4 = icmp eq i32 %v2_12ad0, 0
  store i1 %v2_12ad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12ad4, label %dec_label_pc_12adc, label %dec_label_pc_12ab8

dec_label_pc_12adc:                               ; preds = %dec_label_pc_12ad0, %dec_label_pc_12aac
  store i32 %v2_12a48, i32* %r0.global-to-local, align 4
  %v1_12ae0 = call i32 @function_14ee4(i32 %v2_12a48)
  store i32 %v1_12ae0, i32* @r0, align 4
  %v1_12ae4 = call i32 @function_129b4(i32 %v1_12ae0)
  store i32 %v1_12ae4, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* @r2, align 4
  %v0_12af0 = load i32, i32* @r6, align 4
  %v2_12af0 = add i32 %v0_12af0, 92
  %v3_12af0 = inttoptr i32 %v2_12af0 to i32*
  %v4_12af0 = load i32, i32* %v3_12af0, align 4
  store i32 %tmp52, i32* @r3, align 4
  %v2_12af8 = icmp eq i32 %tmp53, 0
  store i1 %v2_12af8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12af8, label %bb61, label %bb62

bb61:                                             ; preds = %dec_label_pc_12adc
  store i32 4096, i32* @r2, align 4
  br label %bb62

bb62:                                             ; preds = %dec_label_pc_12adc, %bb61
  %v0_12b04 = phi i32 [ %tmp53, %dec_label_pc_12adc ], [ 4096, %bb61 ]
  %v3_12b00 = icmp eq i32 %tmp52, -1
  %v8_12b00 = icmp eq i32 %tmp52, -1
  store i1 %v8_12b00, i1* %cpsr_z.global-to-local, align 1
  %v2_12b04 = inttoptr i32 %v4_12af0 to i32*
  store i32 %v0_12b04, i32* %v2_12b04, align 4
  br i1 %v3_12b00, label %dec_label_pc_12b0c, label %dec_label_pc_12b34

dec_label_pc_12b0c:                               ; preds = %bb62
  %v0_12b0c = call i32 @function_12e24()
  store i32 %v0_12b0c, i32* @r0, align 4
  store i32 %v0_12b0c, i32* @r4, align 4
  %v0_12b14 = call i32 @function_12e80()
  store i32 %v0_12b14, i32* @r0, align 4
  %v0_12b18 = load i32, i32* @r4, align 4
  %v9_12b18 = icmp eq i32 %v0_12b18, %v0_12b14
  store i1 %v9_12b18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12b18, label %dec_label_pc_12b20, label %dec_label_pc_12b5c

dec_label_pc_12b20:                               ; preds = %dec_label_pc_12b0c
  %v1_12b20 = call i32 @function_12fec(i32 %v0_12b14)
  store i32 %v1_12b20, i32* @r0, align 4
  store i32 %v1_12b20, i32* @r4, align 4
  %v0_12b28 = call i32 @function_12e6c()
  store i32 %v0_12b28, i32* @r0, align 4
  %v0_12b2c = load i32, i32* @r4, align 4
  %v9_12b2c = icmp eq i32 %v0_12b2c, %v0_12b28
  store i1 %v9_12b2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12b2c, label %dec_label_pc_12b34, label %dec_label_pc_12b5c

dec_label_pc_12b34:                               ; preds = %dec_label_pc_12b20, %bb62
  store i32 %tmp52, i32* @r2, align 4
  store i1 %v8_12b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12b00, label %dec_label_pc_12b80, label %dec_label_pc_12b40

dec_label_pc_12b40:                               ; preds = %dec_label_pc_12b34
  store i32 %tmp51, i32* @r3, align 4
  %v9_12b44 = icmp eq i32 %tmp52, %tmp51
  store i1 %v9_12b44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12b44, label %dec_label_pc_12b4c, label %dec_label_pc_12b5c

dec_label_pc_12b4c:                               ; preds = %dec_label_pc_12b40
  store i32 %tmp50, i32* @r2, align 4
  store i32 %tmp49, i32* @r3, align 4
  %v9_12b54 = icmp eq i32 %tmp50, %tmp49
  store i1 %v9_12b54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12b54, label %dec_label_pc_12b80, label %dec_label_pc_12b5c

dec_label_pc_12b5c:                               ; preds = %dec_label_pc_12b40, %dec_label_pc_12b20, %dec_label_pc_12b0c, %dec_label_pc_12b4c
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_12b64 = call i32 @function_12960(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_12b70 = call i32 @function_12960(i32 1, i32 32770)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_12b7c = call i32 @function_12960(i32 2, i32 32770)
  store i32 %v2_12b7c, i32* @r0, align 4
  br label %dec_label_pc_12b80

dec_label_pc_12b80:                               ; preds = %dec_label_pc_12b4c, %dec_label_pc_12b34, %dec_label_pc_12b5c
  %v0_12b80 = load i32, i32* @r7, align 4
  %v1_12b80 = inttoptr i32 %v0_12b80 to i32*
  %v2_12b80 = load i32, i32* %v1_12b80, align 4
  store i32 %v2_12b80, i32* %r2.global-to-local, align 4
  store i32 208, i32* %r3.global-to-local, align 4
  %v1_12b88 = load i32, i32* @r6, align 4
  %v3_12b88 = add i32 %v1_12b88, 208
  %v4_12b88 = inttoptr i32 %v3_12b88 to i32*
  store i32 %v2_12b80, i32* %v4_12b88, align 4
  %v0_12b8c = load i32, i32* @r7, align 4
  %v1_12b8c = inttoptr i32 %v0_12b8c to i32*
  %v2_12b8c = load i32, i32* %v1_12b8c, align 4
  store i32 %v2_12b8c, i32* @r4, align 4
  %v2_12b90 = icmp eq i32 %v2_12b8c, 0
  store i1 %v2_12b90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12b90, label %dec_label_pc_12c34.lr.ph, label %dec_label_pc_12b98

dec_label_pc_12b98:                               ; preds = %dec_label_pc_12b80
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_12b9c = load i32, i32* @r6, align 4
  %v2_12b9c = add i32 %v0_12b9c, 112
  %v3_12b9c = inttoptr i32 %v2_12b9c to i32*
  %v4_12b9c = load i32, i32* %v3_12b9c, align 4
  store i32 %v4_12b9c, i32* %r3.global-to-local, align 4
  %v2_12ba0 = inttoptr i32 %v4_12b9c to i32*
  store i32 %v2_12b8c, i32* %v2_12ba0, align 4
  %v0_12ba8 = load i32, i32* @r7, align 4
  %v1_12ba8 = inttoptr i32 %v0_12ba8 to i32*
  %v2_12ba8 = load i32, i32* %v1_12ba8, align 4
  store i32 %v2_12ba8, i32* %r0.global-to-local, align 4
  %v4_12bac = call i32 @function_14b20(i32 %v2_12ba8, i32 47, i32 %v2_12b80, i32 %v4_12b9c)
  store i32 %v4_12bac, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_12bb4 = icmp eq i32 %v4_12bac, 0
  store i1 %v2_12bb4, i1* %cpsr_z.global-to-local, align 1
  %v0_12bb8 = load i32, i32* @r6, align 4
  %v2_12bb8 = add i32 %v0_12bb8, 60
  %v3_12bb8 = inttoptr i32 %v2_12bb8 to i32*
  %v4_12bb8 = load i32, i32* %v3_12bb8, align 4
  store i32 %v4_12bb8, i32* %r2.global-to-local, align 4
  br i1 %v2_12bb4, label %.thread46, label %bb63

.thread46:                                        ; preds = %dec_label_pc_12b98
  %v2_12bc047 = inttoptr i32 %v4_12bb8 to i32*
  store i32 0, i32* %v2_12bc047, align 4
  br label %dec_label_pc_12c34.lr.ph

bb63:                                             ; preds = %dec_label_pc_12b98
  %v2_12bbc = add i32 %v4_12bac, 1
  store i32 %v2_12bbc, i32* %r3.global-to-local, align 4
  %v2_12bc0 = inttoptr i32 %v4_12bb8 to i32*
  store i32 %v4_12bac, i32* %v2_12bc0, align 4
  %v1_12bc4 = load i32, i32* %r3.global-to-local, align 4
  %v2_12bc4 = load i32, i32* %r2.global-to-local, align 4
  %v3_12bc4 = inttoptr i32 %v2_12bc4 to i32*
  store i32 %v1_12bc4, i32* %v3_12bc4, align 4
  br label %dec_label_pc_12c34.lr.ph

dec_label_pc_12c34.lr.ph:                         ; preds = %.thread46, %bb63, %dec_label_pc_12b80
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_12bdc = load i32, i32* @r6, align 4
  %v2_12bdc = add i32 %v0_12bdc, -12
  store i32 %v2_12bdc, i32* %r8.global-to-local, align 4
  store i32 688, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_1dbb4.407, align 4
  %v2_12c0c = icmp eq i32 %v0_12a68, 0
  store i1 %v2_12c0c, i1* %cpsr_z.global-to-local, align 1
  %v2_12c14 = xor i1 %v2_12c0c, true
  call void @__pseudo_cond_branch(i1 %v2_12c14, i32 %v0_12a68)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_12c28 = load i32, i32* @r6, align 4
  %v2_12c28 = add i32 %v0_12c28, -12
  store i32 %v2_12c28, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12c34

dec_label_pc_12c34:                               ; preds = %dec_label_pc_12c34.dec_label_pc_12c34_crit_edge, %dec_label_pc_12c34.lr.ph
  %v1_12c34 = phi i32 [ %v1_12c40, %dec_label_pc_12c34.dec_label_pc_12c34_crit_edge ], [ 0, %dec_label_pc_12c34.lr.ph ]
  %v0_12c34 = phi i32 [ %v0_12c34.pre, %dec_label_pc_12c34.dec_label_pc_12c34_crit_edge ], [ %v2_12c28, %dec_label_pc_12c34.lr.ph ]
  %v4_12c34 = mul i32 %v1_12c34, 4
  %v5_12c34 = add i32 %v4_12c34, %v0_12c34
  %v6_12c34 = inttoptr i32 %v5_12c34 to i32*
  %v7_12c34 = load i32, i32* %v6_12c34, align 4
  store i32 %v7_12c34, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_12c34)
  %v0_12c40 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c40 = add i32 %v0_12c40, 1
  store i32 %v1_12c40, i32* %r4.global-to-local, align 4
  %v1_12c44 = load i32, i32* %r5.global-to-local, align 4
  %v3_12c44 = icmp ult i32 %v1_12c40, %v1_12c44
  %v9_12c44 = icmp eq i32 %v1_12c40, %v1_12c44
  store i1 %v9_12c44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12c44, label %dec_label_pc_12c34.dec_label_pc_12c34_crit_edge, label %dec_label_pc_12c4c

dec_label_pc_12c34.dec_label_pc_12c34_crit_edge:  ; preds = %dec_label_pc_12c34
  %v0_12c34.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12c34

dec_label_pc_12c4c:                               ; preds = %dec_label_pc_12c34
  %v0_12c50.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_12c50 = add i32 %v0_12c50.pre, 104
  %v3_12c50 = inttoptr i32 %v2_12c50 to i32*
  %v4_12c50 = load i32, i32* %v3_12c50, align 4
  store i32 %v4_12c50, i32* %r2.global-to-local, align 4
  store i32 %v4_12c50, i32* %r3.global-to-local, align 4
  %v2_12c58 = icmp eq i32 %v4_12c50, 0
  store i1 %v2_12c58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12c58, label %dec_label_pc_12c70, label %dec_label_pc_12c60

dec_label_pc_12c60:                               ; preds = %dec_label_pc_12c4c
  call void @__pseudo_branch(i32 %v4_12c50)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12c6c = load i32, i32* @r0, align 4
  %v2_12c6c = inttoptr i32 %v1_12c6c to i32*
  store i32 0, i32* %v2_12c6c, align 4
  %v0_12c74.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12c70

dec_label_pc_12c70:                               ; preds = %dec_label_pc_12c4c, %dec_label_pc_12c60
  %v0_12c74 = phi i32 [ %v0_12c50.pre, %dec_label_pc_12c4c ], [ %v0_12c74.pre, %dec_label_pc_12c60 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_12c74 = add i32 %v0_12c74, 80
  %v3_12c74 = inttoptr i32 %v2_12c74 to i32*
  %v4_12c74 = load i32, i32* %v3_12c74, align 4
  store i32 %v4_12c74, i32* %r2.global-to-local, align 4
  store i32 %v4_12c74, i32* %r3.global-to-local, align 4
  %v2_12c7c = icmp eq i32 %v4_12c74, 0
  store i1 %v2_12c7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12c7c, label %dec_label_pc_12c94, label %dec_label_pc_12c84

dec_label_pc_12c84:                               ; preds = %dec_label_pc_12c70
  call void @__pseudo_branch(i32 %v4_12c74)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12c90 = load i32, i32* @r0, align 4
  %v2_12c90 = inttoptr i32 %v1_12c90 to i32*
  store i32 0, i32* %v2_12c90, align 4
  %v0_12c98.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12c94

dec_label_pc_12c94:                               ; preds = %dec_label_pc_12c70, %dec_label_pc_12c84
  %v0_12c98 = phi i32 [ %v0_12c74, %dec_label_pc_12c70 ], [ %v0_12c98.pre, %dec_label_pc_12c84 ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_12c98 = add i32 %v0_12c98, 28
  %v3_12c98 = inttoptr i32 %v2_12c98 to i32*
  %v4_12c98 = load i32, i32* %v3_12c98, align 4
  store i32 %v4_12c98, i32* %r3.global-to-local, align 4
  %v1_12ca0 = inttoptr i32 %v4_12c98 to i32*
  %v2_12ca0 = load i32, i32* %v1_12ca0, align 4
  store i32 %v2_12ca0, i32* %r2.global-to-local, align 4
  %v0_12ca4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_12ca4, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_12cb0 = call i32 @function_12018(i32 %v0_12ca4)
  store i32 %v1_12cb0, i32* %r0.global-to-local, align 4
  %v0_12cb4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12cb4, label %bb64, label %.thread8

bb64:                                             ; preds = %dec_label_pc_12c94
  %v2_12cb8 = load i32, i32* %r4.global-to-local, align 4
  %v8_12cb8 = shl i32 %v2_12cb8, %v1_12cb0
  %v9_12cb8 = and i32 %v8_12cb8, %v1_12cb0
  %v2_12cbc = load i32, i32* @ip, align 4
  %v8_12cbc = shl i32 %v2_12cbc, %v9_12cb8
  %v9_12cbc = and i32 %v8_12cbc, %v9_12cb8
  store i32 %v9_12cbc, i32* %r0.global-to-local, align 4
  %v2_12cc0 = trunc i32 %v9_12cbc to i16
  %v4_12cc0 = inttoptr i32 %v9_12cbc to i16*
  store i16 %v2_12cc0, i16* %v4_12cc0, align 2
  %v5_12cc0 = load i32, i32* %r4.global-to-local, align 4
  %v6_12cc0 = load i32, i32* %r0.global-to-local, align 4
  %v7_12cc0 = sub i32 %v6_12cc0, %v5_12cc0
  %v2_12cc4 = load i32, i32* @ip, align 4
  %v8_12cc4 = ashr i32 %v2_12cc4, %v7_12cc0
  %v9_12cc4 = and i32 %v8_12cc4, %v7_12cc0
  %v2_12cc8 = load i32, i32* %r2.global-to-local, align 4
  %v3_12cc8 = and i32 %v9_12cc4, %v2_12cc8
  store i32 %v3_12cc8, i32* %r8.global-to-local, align 4
  %v2_12ccc = inttoptr i32 %v9_12cc4 to i64*
  %v3_12ccc = load i64, i64* %v2_12ccc, align 4
  %v6_12ccc = udiv i64 %v3_12ccc, 4294967296
  %v7_12ccc = trunc i64 %v6_12ccc to i32
  %v9_12ccc = sub i32 %v7_12ccc, %v9_12cc4
  %v5_12cd0 = sub i32 32, %v9_12ccc
  %v6_12cd0 = shl i32 %v9_12ccc, %v5_12cd0
  %v9_12cd0 = and i32 %v6_12cd0, %v9_12ccc
  %v8_12cd4 = lshr i32 %v2_12cc4, %v9_12cd0
  %v9_12cd4 = and i32 %v8_12cd4, %v9_12cd0
  store i32 %v9_12cd4, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12c94, %bb64
  %v10_12cd4 = phi i32 [ %v1_12cb0, %dec_label_pc_12c94 ], [ %v9_12cd4, %bb64 ]
  ret i32 %v10_12cd4

; uselistorder directives
  uselistorder i32 %v9_12cc4, { 2, 1, 0 }
  uselistorder i32 %v9_12cbc, { 1, 0, 2 }
  uselistorder i32 %v1_12cb0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12c50.pre, { 1, 0 }
  uselistorder i32 %v1_12c44, { 1, 0 }
  uselistorder i32 %v1_12c40, { 3, 2, 1, 0 }
  uselistorder i32 %v4_12bb8, { 1, 0, 2 }
  uselistorder i1 %v8_12b00, { 1, 2, 0 }
  uselistorder i32 %v2_12ad0, { 1, 2, 0 }
  uselistorder i1 %v2_12ab8, { 1, 0 }
  uselistorder i32 %v5_12abc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12a9c, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_12a68, { 1, 0 }
  uselistorder i32 %v2_12a48, { 1, 0, 2, 3 }
  uselistorder i32 %v3_12a38, { 1, 0 }
  uselistorder i32 %tmp52, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp49, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 0, 5, 7, 6, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 15, 16, 17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 1, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 2, 6, 7, 8, 9, 10, 11, 12, 1, 13, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 8, 4, 0, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 16, 1, 18 }
  uselistorder i32 (i32)* @function_12018, { 0, 6, 5, 4, 3, 1, 2 }
  uselistorder i32 47, { 0, 2, 3, 4, 1 }
  uselistorder i32 (i32, i32)* @function_12960, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_12c94, { 1, 0 }
  uselistorder label %dec_label_pc_12c70, { 1, 0 }
  uselistorder label %dec_label_pc_12c34.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12b80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12b5c, { 3, 0, 1, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %dec_label_pc_12ad0, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_12ab8, { 1, 0 }
}

define i32 @function_12cf4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_12cf4:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12cf4 = load i32, i32* @r4, align 4
  store i32 %v3_12cf4, i32* %stack_var_-16, align 4
  %v3_12d00 = urem i32 %arg3, 4096
  %v2_12d04 = icmp eq i32 %v3_12d00, 0
  br i1 %v2_12d04, label %dec_label_pc_12d20, label %dec_label_pc_12d0c

dec_label_pc_12d0c:                               ; preds = %dec_label_pc_12cf4
  %v0_12d0c = call i32 @function_10600()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12d18 = inttoptr i32 %v0_12d0c to i32*
  store i32 22, i32* %v2_12d18, align 4
  %v0_12d50.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d50

dec_label_pc_12d20:                               ; preds = %dec_label_pc_12cf4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12d4c, label %dec_label_pc_12d3c

dec_label_pc_12d3c:                               ; preds = %dec_label_pc_12d20
  %v0_12d3c = call i32 @function_10600()
  %v0_12d40 = load i32, i32* %r4.global-to-local, align 4
  %v1_12d40 = sub i32 0, %v0_12d40
  %v2_12d44 = inttoptr i32 %v0_12d3c to i32*
  store i32 %v1_12d40, i32* %v2_12d44, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12d4c

dec_label_pc_12d4c:                               ; preds = %dec_label_pc_12d20, %dec_label_pc_12d3c
  %v0_12d4c = phi i32 [ %arg1, %dec_label_pc_12d20 ], [ -1, %dec_label_pc_12d3c ]
  store i32 %v0_12d4c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d50

dec_label_pc_12d50:                               ; preds = %dec_label_pc_12d0c, %dec_label_pc_12d4c
  %v0_12d50 = phi i32 [ %v0_12d50.pre, %dec_label_pc_12d0c ], [ %v0_12d4c, %dec_label_pc_12d4c ]
  %v2_12d54 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12d54, i32* @r4, align 4
  ret i32 %v0_12d50

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12d50, { 1, 0 }
  uselistorder label %dec_label_pc_12d4c, { 1, 0 }
}

define i32 @function_12d5c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12d5c:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12d5c = load i32, i32* @r4, align 4
  %v6_12d5c = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_12d64 = icmp eq i32 %arg2, 0
  store i32 add (i32 ptrtoint (i32* @global_var_ab94.438 to i32), i32 77168), i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_12d64, label %dec_label_pc_12db8, label %dec_label_pc_12d7c

dec_label_pc_12d7c:                               ; preds = %dec_label_pc_12d5c
  %v1_12d7c = add i32 %arg2, 4
  %v2_12d7c = inttoptr i32 %v1_12d7c to i32*
  %v3_12d7c = load i32, i32* %v2_12d7c, align 4
  store i32 %v3_12d7c, i32* @r3, align 4
  %v1_12d80 = and i32 %v3_12d7c, 67108864
  %v2_12d80 = icmp eq i32 %v1_12d80, 0
  br i1 %v2_12d80, label %dec_label_pc_12d88, label %dec_label_pc_12db8

dec_label_pc_12d88:                               ; preds = %dec_label_pc_12d7c
  store i32 20, i32* @r2, align 4
  %v2_12d8c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12d8c, i32* @r0, align 4
  %v0_12d90 = call i32 @function_10700()
  store i32 %v2_12d8c, i32* @ip, align 4
  %v0_12db8.pre = load i32, i32* @r5, align 4
  %v0_12dc0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12db8

dec_label_pc_12db8:                               ; preds = %dec_label_pc_12d7c, %dec_label_pc_12d5c, %dec_label_pc_12d88
  %v0_12dc0 = phi i32 [ %arg3, %dec_label_pc_12d7c ], [ %arg3, %dec_label_pc_12d5c ], [ %v0_12dc0.pre, %dec_label_pc_12d88 ]
  %v0_12dbc = phi i32 [ %arg2, %dec_label_pc_12d7c ], [ 0, %dec_label_pc_12d5c ], [ %v2_12d8c, %dec_label_pc_12d88 ]
  %v0_12db8 = phi i32 [ %arg1, %dec_label_pc_12d7c ], [ %arg1, %dec_label_pc_12d5c ], [ %v0_12db8.pre, %dec_label_pc_12d88 ]
  %v4_12dc8 = call i32 @function_13318(i32 %v0_12db8, i32 %v0_12dbc, i32 %v0_12dc0, i32 8)
  store i32 %v3_12d5c, i32* @r4, align 4
  store i32 %v6_12d5c, i32* @r5, align 4
  ret i32 %v4_12dc8

; uselistorder directives
  uselistorder label %dec_label_pc_12db8, { 2, 0, 1 }
}

define i32 @function_12ddc(i32 %arg1) local_unnamed_addr {
dec_label_pc_12ddc:
  %v0_12ddc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12ddc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12ddc
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12ddc, %bb
  %v0_12df0 = phi i32 [ %arg1, %dec_label_pc_12ddc ], [ 0, %bb ]
  ret i32 %v0_12df0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12dfc() local_unnamed_addr {
dec_label_pc_12dfc:
  %v4_12e08 = load i32, i32* inttoptr (i32 121184 to i32*), align 32
  %v1_12e0c = inttoptr i32 %v4_12e08 to i32*
  %v2_12e0c = load i32, i32* %v1_12e0c, align 4
  %v2_12e10 = icmp eq i32 %v2_12e0c, 0
  br i1 %v2_12e10, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_12dfc
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_12dfc, %bb
  %v1_12e18 = phi i32 [ %v2_12e0c, %dec_label_pc_12dfc ], [ 4096, %bb ]
  ret i32 %v1_12e18

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_12e24() local_unnamed_addr {
dec_label_pc_12e24:
  %v1_12e34 = load i32, i32* @r0, align 4
  ret i32 %v1_12e34
}

define i32 @function_12e38(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12e38:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12e38 = load i32, i32* @r7, align 4
  store i32 %v3_12e38, i32* %stack_var_-8, align 4
  %v0_12e44 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12e44, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12e44, -4095
  br i1 %tmp, label %dec_label_pc_12e64, label %dec_label_pc_12e54

dec_label_pc_12e54:                               ; preds = %dec_label_pc_12e38
  %v0_12e54 = call i32 @function_10600()
  %v0_12e58 = load i32, i32* %r7.global-to-local, align 4
  %v1_12e58 = sub i32 0, %v0_12e58
  %v2_12e5c = inttoptr i32 %v0_12e54 to i32*
  store i32 %v1_12e58, i32* %v2_12e5c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12e64.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12e64

dec_label_pc_12e64:                               ; preds = %dec_label_pc_12e38, %dec_label_pc_12e54
  %v1_12e68 = phi i32 [ %v0_12e44, %dec_label_pc_12e38 ], [ -1, %dec_label_pc_12e54 ]
  %v2_12e64 = phi i32 [ %v3_12e38, %dec_label_pc_12e38 ], [ %v2_12e64.pre, %dec_label_pc_12e54 ]
  store i32 %v2_12e64, i32* %r7.global-to-local, align 4
  ret i32 %v1_12e68

; uselistorder directives
  uselistorder i32 %v0_12e44, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12e64, { 1, 0 }
}

define i32 @function_12e6c() local_unnamed_addr {
dec_label_pc_12e6c:
  %v1_12e7c = load i32, i32* @r0, align 4
  ret i32 %v1_12e7c
}

define i32 @function_12e80() local_unnamed_addr {
dec_label_pc_12e80:
  %v1_12e90 = load i32, i32* @r0, align 4
  ret i32 %v1_12e90
}

define i32 @function_12e94(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12e94:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_12e94 = load i32, i32* @r5, align 4
  %v18_12e94 = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12ec4, label %dec_label_pc_12eb0

dec_label_pc_12eb0:                               ; preds = %dec_label_pc_12e94
  %v0_12eb0 = call i32 @function_10600()
  %v0_12eb4 = load i32, i32* @r5, align 4
  %v1_12eb4 = sub i32 0, %v0_12eb4
  store i32 %v1_12eb4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  %v2_12ebc = inttoptr i32 %v0_12eb0 to i32*
  store i32 %v1_12eb4, i32* %v2_12ebc, align 4
  br label %dec_label_pc_12f18

dec_label_pc_12ec4:                               ; preds = %dec_label_pc_12e94
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12ec4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_12ecc = add i32 %arg2, %arg1
  store i32 %v3_12ecc, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12ec4, %bb
  %v1_12f084 = phi i32 [ %v18_12e94, %dec_label_pc_12ec4 ], [ %v3_12ecc, %bb ]
  %v0_12f042 = phi i32 [ 141, %dec_label_pc_12ec4 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_12f18, label %dec_label_pc_12f04

dec_label_pc_12ed8:                               ; preds = %dec_label_pc_12f04
  %v1_12ed8 = add i32 %v0_12ed8, 8
  %v2_12ed8 = inttoptr i32 %v1_12ed8 to i16*
  %v3_12ed8 = load i16, i16* %v2_12ed8, align 2
  %v4_12ed8 = zext i16 %v3_12ed8 to i32
  %v2_12edc = add i32 %v4_12ed8, %v0_12ed8
  store i32 %v2_12edc, i32* %r3.global-to-local, align 4
  %v1_12ee0 = add i32 %v2_12edc, -1
  %v2_12ee0 = inttoptr i32 %v1_12ee0 to i8*
  %v3_12ee0 = load i8, i8* %v2_12ee0, align 1
  %v4_12ee0 = zext i8 %v3_12ee0 to i32
  store i32 %v4_12ee0, i32* @r4, align 4
  %v1_12ee4 = call i32 @function_14a10(i32 %v1_12f04)
  %v0_12ee8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12ee8, i32* @r1, align 4
  %v1_12eec = add i32 %v1_12ee4, 1
  store i32 %v1_12eec, i32* @r2, align 4
  %v0_12ef0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_12ef0, i32* @r0, align 4
  %v3_12ef4 = call i32 @function_106f0(i32 %v0_12ef0, i32 %v0_12ee8, i32 %v1_12eec)
  %v0_12ef8 = load i32, i32* %r7.global-to-local, align 4
  %v1_12ef8 = add i32 %v0_12ef8, 8
  %v2_12ef8 = inttoptr i32 %v1_12ef8 to i16*
  %v3_12ef8 = load i16, i16* %v2_12ef8, align 2
  %v4_12ef8 = zext i16 %v3_12ef8 to i32
  store i32 %v4_12ef8, i32* %r3.global-to-local, align 4
  %v0_12efc = load i32, i32* @r4, align 4
  %v1_12efc = trunc i32 %v0_12efc to i8
  %v3_12efc = add i32 %v0_12ef8, 10
  %v4_12efc = inttoptr i32 %v3_12efc to i8*
  store i8 %v1_12efc, i8* %v4_12efc, align 1
  %v0_12f00 = load i32, i32* %r7.global-to-local, align 4
  %v1_12f00 = load i32, i32* %r3.global-to-local, align 4
  %v2_12f00 = add i32 %v1_12f00, %v0_12f00
  store i32 %v2_12f00, i32* %r7.global-to-local, align 4
  %v1_12f08.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_12f04

dec_label_pc_12f04:                               ; preds = %.thread, %dec_label_pc_12ed8
  %v1_12f08 = phi i32 [ %v1_12f08.pre, %dec_label_pc_12ed8 ], [ %v1_12f084, %.thread ]
  %v0_12ed8 = phi i32 [ %v2_12f00, %dec_label_pc_12ed8 ], [ %v0_12f042, %.thread ]
  %v1_12f04 = add i32 %v0_12ed8, 10
  store i32 %v1_12f04, i32* %r6.global-to-local, align 4
  %v3_12f08 = icmp ult i32 %v0_12ed8, %v1_12f08
  %v1_12f10 = add i32 %v0_12ed8, 11
  store i32 %v1_12f10, i32* %r8.global-to-local, align 4
  br i1 %v3_12f08, label %dec_label_pc_12ed8, label %dec_label_pc_12f18

dec_label_pc_12f18:                               ; preds = %dec_label_pc_12f04, %.thread, %dec_label_pc_12eb0
  %v0_12f18 = load i32, i32* @r5, align 4
  store i32 %v6_12e94, i32* @r5, align 4
  store i32 %v18_12e94, i32* @sl, align 4
  ret i32 %v0_12f18

; uselistorder directives
  uselistorder i32 %v1_12f04, { 1, 0 }
  uselistorder i32 %v0_12ed8, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_12e94, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12f04, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12f28() local_unnamed_addr {
dec_label_pc_12f28:
  %r7.global-to-local = alloca i32, align 4
  %v0_12f30 = load i32, i32* @r1, align 4
  store i32 %v0_12f30, i32* @r3, align 4
  %v0_12f40 = load i32, i32* @r0, align 4
  store i32 %v0_12f40, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12f40, -4095
  br i1 %tmp, label %dec_label_pc_12f60, label %dec_label_pc_12f4c

dec_label_pc_12f4c:                               ; preds = %dec_label_pc_12f28
  %v0_12f4c = call i32 @function_10600()
  %v0_12f50 = load i32, i32* %r7.global-to-local, align 4
  %v1_12f50 = sub i32 0, %v0_12f50
  store i32 %v1_12f50, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_12f58 = inttoptr i32 %v0_12f4c to i32*
  store i32 %v1_12f50, i32* %v2_12f58, align 4
  br label %dec_label_pc_12f70

dec_label_pc_12f60:                               ; preds = %dec_label_pc_12f28
  %v2_12f60 = icmp eq i32 %v0_12f40, 0
  br i1 %v2_12f60, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12f60
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12f60, %bb
  call void @__pseudo_cond_branch(i1 %v2_12f60, i32 ptrtoint (i32* @global_var_13178.443 to i32))
  br label %dec_label_pc_12f70

dec_label_pc_12f70:                               ; preds = %dec_label_pc_12f4c, %.thread
  %v0_12f70 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_12f70

; uselistorder directives
  uselistorder i32 %v0_12f40, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12f70, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12f80(i32 %arg1) local_unnamed_addr {
dec_label_pc_12f80:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12f80 = load i32, i32* @r4, align 4
  store i32 %v3_12f80, i32* %stack_var_-16, align 4
  store i32 121092, i32* %r4.global-to-local, align 4
  %v4_12f90 = load i32, i32* @global_var_1fbcc.446, align 4
  %v2_12f94 = icmp eq i32 %v4_12f90, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_12f94, label %dec_label_pc_12fa0, label %dec_label_pc_12fb0

dec_label_pc_12fa0:                               ; preds = %dec_label_pc_12f80
  %v1_12fa4 = call i32 @function_14f1c(i32 0)
  %v1_12fa8 = icmp slt i32 %v1_12fa4, 0
  br i1 %v1_12fa8, label %dec_label_pc_12fd4, label %dec_label_pc_12fb0thread-pre-split

dec_label_pc_12fb0thread-pre-split:               ; preds = %dec_label_pc_12fa0
  %v0_12fb4.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_12fb0.pre = load i32, i32* @global_var_1fbcc.446, align 4
  br label %dec_label_pc_12fb0

dec_label_pc_12fb0:                               ; preds = %dec_label_pc_12fb0thread-pre-split, %dec_label_pc_12f80
  %v0_12fc0 = phi i32 [ %v4_12fb0.pre, %dec_label_pc_12fb0thread-pre-split ], [ %v4_12f90, %dec_label_pc_12f80 ]
  %v1_12fc4 = phi i32 [ %v0_12fb4.pr, %dec_label_pc_12fb0thread-pre-split ], [ %arg1, %dec_label_pc_12f80 ]
  %v2_12fb4 = icmp eq i32 %v1_12fc4, 0
  store i32 %v0_12fc0, i32* %r4.global-to-local, align 4
  br i1 %v2_12fb4, label %dec_label_pc_12fd8, label %dec_label_pc_12fc0

dec_label_pc_12fc0:                               ; preds = %dec_label_pc_12fb0
  %v2_12fc4 = add i32 %v1_12fc4, %v0_12fc0
  %v1_12fc8 = call i32 @function_14f1c(i32 %v2_12fc4)
  %v1_12fcc = icmp slt i32 %v1_12fc8, 0
  br i1 %v1_12fcc, label %dec_label_pc_12fd4, label %dec_label_pc_12fc0.dec_label_pc_12fd8_crit_edge

dec_label_pc_12fc0.dec_label_pc_12fd8_crit_edge:  ; preds = %dec_label_pc_12fc0
  %v0_12fd8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12fd8

dec_label_pc_12fd4:                               ; preds = %dec_label_pc_12fc0, %dec_label_pc_12fa0
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12fd8

dec_label_pc_12fd8:                               ; preds = %dec_label_pc_12fb0, %dec_label_pc_12fc0.dec_label_pc_12fd8_crit_edge, %dec_label_pc_12fd4
  %v0_12fd8 = phi i32 [ %v0_12fd8.pre, %dec_label_pc_12fc0.dec_label_pc_12fd8_crit_edge ], [ -1, %dec_label_pc_12fd4 ], [ %v0_12fc0, %dec_label_pc_12fb0 ]
  %v2_12fdc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12fdc, i32* @r4, align 4
  ret i32 %v0_12fd8

; uselistorder directives
  uselistorder i32 %v0_12fc0, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_14f1c, { 1, 0 }
  uselistorder label %dec_label_pc_12fd8, { 2, 1, 0 }
}

define i32 @function_12fec(i32 %arg1) local_unnamed_addr {
dec_label_pc_12fec:
  %v1_12ffc = load i32, i32* @r0, align 4
  ret i32 %v1_12ffc
}

define i32 @function_13000(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13000:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_13000 = load i32, i32* @r4, align 4
  store i32 %v3_13000, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_13018 = inttoptr i32 %arg2 to i8*
  %v3_13018 = call i32 @function_10650(i8* %v2_13018, i32 0)
  %v2_1301c = load i32, i32* %arg1, align 4
  store i32 %v2_1301c, i32* %r3.global-to-local, align 4
  %v3_1301c = add i32 %tmp, 4
  %v4_1301c = inttoptr i32 %v3_1301c to i32*
  %v5_1301c = load i32, i32* %v4_1301c, align 4
  store i32 %v5_1301c, i32* %r4.global-to-local, align 4
  %v0_13020 = load i32, i32* %r5.global-to-local, align 4
  %v1_13020 = inttoptr i32 %v0_13020 to i32*
  store i32 %v2_1301c, i32* %v1_13020, align 4
  %v3_13020 = add i32 %v0_13020, 4
  %v4_13020 = inttoptr i32 %v3_13020 to i32*
  %v5_13020 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13020, i32* %v4_13020, align 4
  %v0_13024 = load i32, i32* %r6.global-to-local, align 4
  %v1_13024 = add i32 %v0_13024, 12
  %v2_13024 = inttoptr i32 %v1_13024 to i32*
  %v3_13024 = load i32, i32* %v2_13024, align 4
  %v1_13028 = load i32, i32* %r5.global-to-local, align 4
  %v2_13028 = add i32 %v1_13028, 12
  %v3_13028 = inttoptr i32 %v2_13028 to i32*
  store i32 %v3_13024, i32* %v3_13028, align 4
  %v0_1302c = load i32, i32* %r6.global-to-local, align 4
  %v1_1302c = add i32 %v0_1302c, 96
  store i32 %v1_1302c, i32* %r3.global-to-local, align 4
  %v1_13030 = inttoptr i32 %v1_1302c to i32*
  %v2_13030 = load i32, i32* %v1_13030, align 4
  store i32 %v2_13030, i32* %r3.global-to-local, align 4
  %v3_13030 = add i32 %v0_1302c, 100
  %v4_13030 = inttoptr i32 %v3_13030 to i32*
  %v5_13030 = load i32, i32* %v4_13030, align 4
  store i32 %v5_13030, i32* %r4.global-to-local, align 4
  %v1_13034 = add i32 %v0_1302c, 56
  %v2_13034 = inttoptr i32 %v1_13034 to i32*
  %v3_13034 = load i32, i32* %v2_13034, align 4
  store i32 %v3_13034, i32* %r2.global-to-local, align 4
  %v1_13038 = load i32, i32* %r5.global-to-local, align 4
  %v2_13038 = add i32 %v1_13038, 96
  %v3_13038 = inttoptr i32 %v2_13038 to i32*
  store i32 %v2_13030, i32* %v3_13038, align 4
  %v0_1303c = load i32, i32* %r4.global-to-local, align 4
  %v1_1303c = load i32, i32* %r5.global-to-local, align 4
  %v2_1303c = add i32 %v1_1303c, 100
  %v3_1303c = inttoptr i32 %v2_1303c to i32*
  store i32 %v0_1303c, i32* %v3_1303c, align 4
  %v0_13040 = load i32, i32* %r6.global-to-local, align 4
  %v1_13040 = add i32 %v0_13040, 24
  store i32 %v1_13040, i32* %ip.global-to-local, align 4
  %v1_13044 = inttoptr i32 %v1_13040 to i32*
  %v2_13044 = load i32, i32* %v1_13044, align 4
  store i32 %v2_13044, i32* %ip.global-to-local, align 4
  %v3_13044 = add i32 %v0_13040, 28
  %v4_13044 = inttoptr i32 %v3_13044 to i32*
  %v5_13044 = load i32, i32* %v4_13044, align 4
  store i32 %v5_13044, i32* %lr.global-to-local, align 4
  %v0_13048 = load i32, i32* %r2.global-to-local, align 4
  %v1_13048 = load i32, i32* %r5.global-to-local, align 4
  %v2_13048 = add i32 %v1_13048, 56
  %v3_13048 = inttoptr i32 %v2_13048 to i32*
  store i32 %v0_13048, i32* %v3_13048, align 4
  %v0_1304c = load i32, i32* %r6.global-to-local, align 4
  %v1_1304c = add i32 %v0_1304c, 72
  store i32 %v1_1304c, i32* %r3.global-to-local, align 4
  %v1_13050 = add i32 %v0_1304c, 32
  store i32 %v1_13050, i32* %r7.global-to-local, align 4
  %v1_13054 = inttoptr i32 %v1_13050 to i32*
  %v2_13054 = load i32, i32* %v1_13054, align 4
  store i32 %v2_13054, i32* %r7.global-to-local, align 4
  %v3_13054 = add i32 %v0_1304c, 36
  %v4_13054 = inttoptr i32 %v3_13054 to i32*
  %v5_13054 = load i32, i32* %v4_13054, align 4
  store i32 %v5_13054, i32* %r8.global-to-local, align 4
  %v1_13058 = inttoptr i32 %v1_1304c to i32*
  %v2_13058 = load i32, i32* %v1_13058, align 4
  %v3_13058 = add i32 %v0_1304c, 76
  %v4_13058 = inttoptr i32 %v3_13058 to i32*
  %v5_13058 = load i32, i32* %v4_13058, align 4
  store i32 %v5_13058, i32* %r1.global-to-local, align 4
  %v0_1305c = load i32, i32* %r5.global-to-local, align 4
  %v1_1305c = add i32 %v0_1305c, 72
  %v1_13060 = inttoptr i32 %v1_1305c to i32*
  store i32 %v2_13058, i32* %v1_13060, align 4
  %v3_13060 = add i32 %v0_1305c, 76
  %v4_13060 = inttoptr i32 %v3_13060 to i32*
  %v5_13060 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13060, i32* %v4_13060, align 4
  %v0_13064 = load i32, i32* %r7.global-to-local, align 4
  %v1_13064 = load i32, i32* %r5.global-to-local, align 4
  %v2_13064 = add i32 %v1_13064, 32
  %v3_13064 = inttoptr i32 %v2_13064 to i32*
  store i32 %v0_13064, i32* %v3_13064, align 4
  %v0_13068 = load i32, i32* %r8.global-to-local, align 4
  %v1_13068 = load i32, i32* %r5.global-to-local, align 4
  %v2_13068 = add i32 %v1_13068, 36
  %v3_13068 = inttoptr i32 %v2_13068 to i32*
  store i32 %v0_13068, i32* %v3_13068, align 4
  %v0_1306c = load i32, i32* %r6.global-to-local, align 4
  %v1_1306c = add i32 %v0_1306c, 80
  store i32 %v1_1306c, i32* %r3.global-to-local, align 4
  %v1_13070 = add i32 %v0_1306c, 48
  store i32 %v1_13070, i32* %r7.global-to-local, align 4
  %v1_13074 = inttoptr i32 %v1_13070 to i32*
  %v2_13074 = load i32, i32* %v1_13074, align 4
  store i32 %v2_13074, i32* %r7.global-to-local, align 4
  %v3_13074 = add i32 %v0_1306c, 52
  %v4_13074 = inttoptr i32 %v3_13074 to i32*
  %v5_13074 = load i32, i32* %v4_13074, align 4
  store i32 %v5_13074, i32* %r8.global-to-local, align 4
  %v1_13078 = inttoptr i32 %v1_1306c to i32*
  %v2_13078 = load i32, i32* %v1_13078, align 4
  %v3_13078 = add i32 %v0_1306c, 84
  %v4_13078 = inttoptr i32 %v3_13078 to i32*
  %v5_13078 = load i32, i32* %v4_13078, align 4
  store i32 %v5_13078, i32* %r1.global-to-local, align 4
  %v1_1307c = add i32 %v0_1306c, 16
  %v2_1307c = inttoptr i32 %v1_1307c to i32*
  %v3_1307c = load i32, i32* %v2_1307c, align 4
  store i32 %v3_1307c, i32* %r2.global-to-local, align 4
  %v0_13080 = load i32, i32* %r5.global-to-local, align 4
  %v1_13080 = add i32 %v0_13080, 80
  %v1_13084 = inttoptr i32 %v1_13080 to i32*
  store i32 %v2_13078, i32* %v1_13084, align 4
  %v3_13084 = add i32 %v0_13080, 84
  %v4_13084 = inttoptr i32 %v3_13084 to i32*
  %v5_13084 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13084, i32* %v4_13084, align 4
  %v0_13088 = load i32, i32* %r7.global-to-local, align 4
  %v1_13088 = load i32, i32* %r5.global-to-local, align 4
  %v2_13088 = add i32 %v1_13088, 48
  %v3_13088 = inttoptr i32 %v2_13088 to i32*
  store i32 %v0_13088, i32* %v3_13088, align 4
  %v0_1308c = load i32, i32* %r8.global-to-local, align 4
  %v1_1308c = load i32, i32* %r5.global-to-local, align 4
  %v2_1308c = add i32 %v1_1308c, 52
  %v3_1308c = inttoptr i32 %v2_1308c to i32*
  store i32 %v0_1308c, i32* %v3_1308c, align 4
  %v0_13090 = load i32, i32* %r2.global-to-local, align 4
  %v1_13090 = load i32, i32* %r5.global-to-local, align 4
  %v2_13090 = add i32 %v1_13090, 16
  %v3_13090 = inttoptr i32 %v2_13090 to i32*
  store i32 %v0_13090, i32* %v3_13090, align 4
  %v0_13094 = load i32, i32* %r6.global-to-local, align 4
  %v1_13094 = add i32 %v0_13094, 88
  store i32 %v1_13094, i32* %r3.global-to-local, align 4
  %v1_13098 = add i32 %v0_13094, 20
  %v2_13098 = inttoptr i32 %v1_13098 to i32*
  %v3_13098 = load i32, i32* %v2_13098, align 4
  store i32 %v3_13098, i32* %r2.global-to-local, align 4
  %v1_1309c = inttoptr i32 %v1_13094 to i32*
  %v2_1309c = load i32, i32* %v1_1309c, align 4
  %v3_1309c = add i32 %v0_13094, 92
  %v4_1309c = inttoptr i32 %v3_1309c to i32*
  %v5_1309c = load i32, i32* %v4_1309c, align 4
  store i32 %v5_1309c, i32* %r1.global-to-local, align 4
  %v1_130a0 = add i32 %v0_13094, 64
  store i32 %v1_130a0, i32* %r6.global-to-local, align 4
  %v1_130a4 = inttoptr i32 %v1_130a0 to i32*
  %v2_130a4 = load i32, i32* %v1_130a4, align 4
  store i32 %v2_130a4, i32* %r6.global-to-local, align 4
  %v3_130a4 = add i32 %v0_13094, 68
  %v4_130a4 = inttoptr i32 %v3_130a4 to i32*
  %v5_130a4 = load i32, i32* %v4_130a4, align 4
  store i32 %v5_130a4, i32* %r7.global-to-local, align 4
  %v0_130a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_130a8 = add i32 %v0_130a8, 88
  store i32 %v1_130a8, i32* %r3.global-to-local, align 4
  %v2_130ac = add i32 %v0_130a8, 20
  %v3_130ac = inttoptr i32 %v2_130ac to i32*
  store i32 %v3_13098, i32* %v3_130ac, align 4
  %v0_130b0 = load i32, i32* %ip.global-to-local, align 4
  %v1_130b0 = load i32, i32* %r5.global-to-local, align 4
  %v2_130b0 = add i32 %v1_130b0, 24
  %v3_130b0 = inttoptr i32 %v2_130b0 to i32*
  store i32 %v0_130b0, i32* %v3_130b0, align 4
  %v0_130b4 = load i32, i32* %lr.global-to-local, align 4
  %v1_130b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_130b4 = add i32 %v1_130b4, 28
  %v3_130b4 = inttoptr i32 %v2_130b4 to i32*
  store i32 %v0_130b4, i32* %v3_130b4, align 4
  %v0_130b8 = load i32, i32* %r6.global-to-local, align 4
  %v1_130b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_130b8 = add i32 %v1_130b8, 64
  %v3_130b8 = inttoptr i32 %v2_130b8 to i32*
  store i32 %v0_130b8, i32* %v3_130b8, align 4
  %v0_130bc = load i32, i32* %r7.global-to-local, align 4
  %v1_130bc = load i32, i32* %r5.global-to-local, align 4
  %v2_130bc = add i32 %v1_130bc, 68
  %v3_130bc = inttoptr i32 %v2_130bc to i32*
  store i32 %v0_130bc, i32* %v3_130bc, align 4
  %v0_130c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_130c0 = inttoptr i32 %v0_130c0 to i32*
  store i32 %v2_1309c, i32* %v1_130c0, align 4
  %v3_130c0 = add i32 %v0_130c0, 4
  %v4_130c0 = inttoptr i32 %v3_130c0 to i32*
  %v5_130c0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_130c0, i32* %v4_130c0, align 4
  %v2_130c4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_130c4, i32* %r4.global-to-local, align 4
  ret i32 %v2_1309c

; uselistorder directives
  uselistorder i32 %v0_13094, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_1306c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 1, 0, 2 }
  uselistorder i32 104, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_130cc(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_130cc:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_130cc = load i32, i32* @r4, align 4
  store i32 %v3_130cc, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_130e4 = inttoptr i32 %arg2 to i8*
  %v3_130e4 = call i32 @function_10650(i8* %v2_130e4, i32 0)
  %v2_130e8 = load i32, i32* %arg1, align 4
  %v3_130e8 = add i32 %tmp, 4
  %v4_130e8 = inttoptr i32 %v3_130e8 to i32*
  %v5_130e8 = load i32, i32* %v4_130e8, align 4
  store i32 %v5_130e8, i32* %r4.global-to-local, align 4
  %v0_130ec = load i32, i32* %r6.global-to-local, align 4
  %v1_130ec = inttoptr i32 %v0_130ec to i32*
  store i32 %v2_130e8, i32* %v1_130ec, align 4
  %v3_130ec = add i32 %v0_130ec, 4
  %v4_130ec = inttoptr i32 %v3_130ec to i32*
  %v5_130ec = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_130ec, i32* %v4_130ec, align 4
  %v0_130f0 = load i32, i32* %r5.global-to-local, align 4
  %v1_130f0 = add i32 %v0_130f0, 32
  %v1_130f4 = inttoptr i32 %v1_130f0 to i32*
  %v2_130f4 = load i32, i32* %v1_130f4, align 4
  %v3_130f4 = add i32 %v0_130f0, 36
  %v4_130f4 = inttoptr i32 %v3_130f4 to i32*
  %v5_130f4 = load i32, i32* %v4_130f4, align 4
  store i32 %v5_130f4, i32* %r4.global-to-local, align 4
  %v1_130f8 = add i32 %v0_130f0, 96
  %v2_130f8 = inttoptr i32 %v1_130f8 to i32*
  %v3_130f8 = load i32, i32* %v2_130f8, align 4
  store i32 %v3_130f8, i32* %r2.global-to-local, align 4
  %v1_130fc = load i32, i32* %r6.global-to-local, align 4
  %v2_130fc = add i32 %v1_130fc, 32
  %v3_130fc = inttoptr i32 %v2_130fc to i32*
  store i32 %v2_130f4, i32* %v3_130fc, align 4
  %v0_13100 = load i32, i32* %r4.global-to-local, align 4
  %v1_13100 = load i32, i32* %r6.global-to-local, align 4
  %v2_13100 = add i32 %v1_13100, 36
  %v3_13100 = inttoptr i32 %v2_13100 to i32*
  store i32 %v0_13100, i32* %v3_13100, align 4
  %v0_13104 = load i32, i32* %r2.global-to-local, align 4
  %v1_13104 = load i32, i32* %r6.global-to-local, align 4
  %v2_13104 = add i32 %v1_13104, 12
  %v3_13104 = inttoptr i32 %v2_13104 to i32*
  store i32 %v0_13104, i32* %v3_13104, align 4
  %v0_13108 = load i32, i32* %r5.global-to-local, align 4
  %v1_13108 = add i32 %v0_13108, 48
  %v2_13108 = inttoptr i32 %v1_13108 to i32*
  %v3_13108 = load i32, i32* %v2_13108, align 4
  %v1_1310c = add i32 %v0_13108, 24
  store i32 %v1_1310c, i32* %ip.global-to-local, align 4
  %v1_13110 = inttoptr i32 %v1_1310c to i32*
  %v2_13110 = load i32, i32* %v1_13110, align 4
  store i32 %v2_13110, i32* %ip.global-to-local, align 4
  %v3_13110 = add i32 %v0_13108, 28
  %v4_13110 = inttoptr i32 %v3_13110 to i32*
  %v5_13110 = load i32, i32* %v4_13110, align 4
  store i32 %v5_13110, i32* %lr.global-to-local, align 4
  %v1_13114 = load i32, i32* %r6.global-to-local, align 4
  %v2_13114 = add i32 %v1_13114, 44
  %v3_13114 = inttoptr i32 %v2_13114 to i32*
  store i32 %v3_13108, i32* %v3_13114, align 4
  %v0_13118 = load i32, i32* %r5.global-to-local, align 4
  %v1_13118 = add i32 %v0_13118, 64
  %v2_13118 = inttoptr i32 %v1_13118 to i32*
  %v3_13118 = load i32, i32* %v2_13118, align 4
  %v1_1311c = add i32 %v0_13118, 56
  %v2_1311c = inttoptr i32 %v1_1311c to i32*
  %v3_1311c = load i32, i32* %v2_1311c, align 4
  store i32 %v3_1311c, i32* %r2.global-to-local, align 4
  %v1_13120 = load i32, i32* %r6.global-to-local, align 4
  %v2_13120 = add i32 %v1_13120, 52
  %v3_13120 = inttoptr i32 %v2_13120 to i32*
  store i32 %v3_13118, i32* %v3_13120, align 4
  %v0_13124 = load i32, i32* %r2.global-to-local, align 4
  %v1_13124 = load i32, i32* %r6.global-to-local, align 4
  %v2_13124 = add i32 %v1_13124, 48
  %v3_13124 = inttoptr i32 %v2_13124 to i32*
  store i32 %v0_13124, i32* %v3_13124, align 4
  %v0_13128 = load i32, i32* %r5.global-to-local, align 4
  %v1_13128 = add i32 %v0_13128, 72
  %v1_1312c = inttoptr i32 %v1_13128 to i32*
  %v2_1312c = load i32, i32* %v1_1312c, align 4
  %v3_1312c = add i32 %v0_13128, 76
  %v4_1312c = inttoptr i32 %v3_1312c to i32*
  %v5_1312c = load i32, i32* %v4_1312c, align 4
  store i32 %v5_1312c, i32* %r1.global-to-local, align 4
  %v0_13130 = load i32, i32* %r6.global-to-local, align 4
  %v1_13130 = add i32 %v0_13130, 56
  %v1_13134 = inttoptr i32 %v1_13130 to i32*
  store i32 %v2_1312c, i32* %v1_13134, align 4
  %v3_13134 = add i32 %v0_13130, 60
  %v4_13134 = inttoptr i32 %v3_13134 to i32*
  %v5_13134 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13134, i32* %v4_13134, align 4
  %v0_13138 = load i32, i32* %r5.global-to-local, align 4
  %v1_13138 = add i32 %v0_13138, 80
  %v1_1313c = inttoptr i32 %v1_13138 to i32*
  %v2_1313c = load i32, i32* %v1_1313c, align 4
  %v3_1313c = add i32 %v0_13138, 84
  %v4_1313c = inttoptr i32 %v3_1313c to i32*
  %v5_1313c = load i32, i32* %v4_1313c, align 4
  store i32 %v5_1313c, i32* %r1.global-to-local, align 4
  %v0_13140 = load i32, i32* %r6.global-to-local, align 4
  %v1_13140 = add i32 %v0_13140, 64
  %v1_13144 = inttoptr i32 %v1_13140 to i32*
  store i32 %v2_1313c, i32* %v1_13144, align 4
  %v3_13144 = add i32 %v0_13140, 68
  %v4_13144 = inttoptr i32 %v3_13144 to i32*
  %v5_13144 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13144, i32* %v4_13144, align 4
  %v0_13148 = load i32, i32* %r5.global-to-local, align 4
  %v1_13148 = add i32 %v0_13148, 16
  %v2_13148 = inttoptr i32 %v1_13148 to i32*
  %v3_13148 = load i32, i32* %v2_13148, align 4
  %v1_1314c = load i32, i32* %r6.global-to-local, align 4
  %v2_1314c = add i32 %v1_1314c, 16
  %v3_1314c = inttoptr i32 %v2_1314c to i32*
  store i32 %v3_13148, i32* %v3_1314c, align 4
  %v0_13150 = load i32, i32* %r5.global-to-local, align 4
  %v1_13150 = add i32 %v0_13150, 88
  %v1_13154 = add i32 %v0_13150, 20
  %v2_13154 = inttoptr i32 %v1_13154 to i32*
  %v3_13154 = load i32, i32* %v2_13154, align 4
  store i32 %v3_13154, i32* %r2.global-to-local, align 4
  %v1_13158 = inttoptr i32 %v1_13150 to i32*
  %v2_13158 = load i32, i32* %v1_13158, align 4
  %v3_13158 = add i32 %v0_13150, 92
  %v4_13158 = inttoptr i32 %v3_13158 to i32*
  %v5_13158 = load i32, i32* %v4_13158, align 4
  store i32 %v5_13158, i32* %r1.global-to-local, align 4
  %v0_1315c = load i32, i32* %r6.global-to-local, align 4
  %v1_1315c = add i32 %v0_1315c, 72
  %v1_13160 = inttoptr i32 %v1_1315c to i32*
  store i32 %v2_13158, i32* %v1_13160, align 4
  %v3_13160 = add i32 %v0_1315c, 76
  %v4_13160 = inttoptr i32 %v3_13160 to i32*
  %v5_13160 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13160, i32* %v4_13160, align 4
  %v0_13164 = load i32, i32* %r2.global-to-local, align 4
  %v1_13164 = load i32, i32* %r6.global-to-local, align 4
  %v2_13164 = add i32 %v1_13164, 20
  %v3_13164 = inttoptr i32 %v2_13164 to i32*
  store i32 %v0_13164, i32* %v3_13164, align 4
  %v0_13168 = load i32, i32* %ip.global-to-local, align 4
  %v1_13168 = load i32, i32* %r6.global-to-local, align 4
  %v2_13168 = add i32 %v1_13168, 24
  %v3_13168 = inttoptr i32 %v2_13168 to i32*
  store i32 %v0_13168, i32* %v3_13168, align 4
  %v0_1316c = load i32, i32* %lr.global-to-local, align 4
  %v1_1316c = load i32, i32* %r6.global-to-local, align 4
  %v2_1316c = add i32 %v1_1316c, 28
  %v3_1316c = inttoptr i32 %v2_1316c to i32*
  store i32 %v0_1316c, i32* %v3_1316c, align 4
  %v2_13170 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13170, i32* %r4.global-to-local, align 4
  ret i32 %v2_13158

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 84, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_13178(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13178:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_13194 = inttoptr i32 %arg2 to i8*
  %v3_13194 = call i32 @function_10650(i8* %v2_13194, i32 0)
  %v1_13198 = add i32 %tmp, 4
  %v2_13198 = inttoptr i32 %v1_13198 to i32*
  %v3_13198 = load i32, i32* %v2_13198, align 4
  %v2_1319c = load i32, i32* %arg1, align 4
  store i32 %v2_1319c, i32* %r8.global-to-local, align 4
  %v1_131a0 = load i32, i32* %r5.global-to-local, align 4
  %v2_131a0 = add i32 %v1_131a0, 12
  %v3_131a0 = inttoptr i32 %v2_131a0 to i32*
  store i32 %v3_13198, i32* %v3_131a0, align 4
  %v0_131a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_131a4 = add i32 %v0_131a4, 20
  %v2_131a4 = inttoptr i32 %v1_131a4 to i32*
  %v3_131a4 = load i32, i32* %v2_131a4, align 4
  %v1_131a8 = add i32 %v0_131a4, 16
  %v2_131a8 = inttoptr i32 %v1_131a8 to i32*
  %v3_131a8 = load i32, i32* %v2_131a8, align 4
  store i32 %v3_131a8, i32* %r6.global-to-local, align 4
  %v1_131ac = load i32, i32* %r5.global-to-local, align 4
  %v2_131ac = add i32 %v1_131ac, 44
  %v3_131ac = inttoptr i32 %v2_131ac to i32*
  store i32 %v3_131a4, i32* %v3_131ac, align 4
  %v0_131b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_131b0 = add i32 %v0_131b0, 24
  %v2_131b0 = inttoptr i32 %v1_131b0 to i32*
  %v3_131b0 = load i32, i32* %v2_131b0, align 4
  %v1_131b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_131b4 = add i32 %v1_131b4, 48
  %v3_131b4 = inttoptr i32 %v2_131b4 to i32*
  store i32 %v3_131b0, i32* %v3_131b4, align 4
  %v0_131b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_131b8 = add i32 %v0_131b8, 28
  %v2_131b8 = inttoptr i32 %v1_131b8 to i32*
  %v3_131b8 = load i32, i32* %v2_131b8, align 4
  %v1_131bc = load i32, i32* %r5.global-to-local, align 4
  %v2_131bc = add i32 %v1_131bc, 52
  %v3_131bc = inttoptr i32 %v2_131bc to i32*
  store i32 %v3_131b8, i32* %v3_131bc, align 4
  %v0_131c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_131c0 = add i32 %v0_131c0, 32
  %v1_131c4 = inttoptr i32 %v1_131c0 to i32*
  %v2_131c4 = load i32, i32* %v1_131c4, align 4
  %v3_131c4 = add i32 %v0_131c0, 36
  %v4_131c4 = inttoptr i32 %v3_131c4 to i32*
  %v5_131c4 = load i32, i32* %v4_131c4, align 4
  store i32 %v5_131c4, i32* %r1.global-to-local, align 4
  %v0_131c8 = load i32, i32* %r5.global-to-local, align 4
  %v1_131c8 = add i32 %v0_131c8, 56
  %v1_131cc = inttoptr i32 %v1_131c8 to i32*
  store i32 %v2_131c4, i32* %v1_131cc, align 4
  %v3_131cc = add i32 %v0_131c8, 60
  %v4_131cc = inttoptr i32 %v3_131cc to i32*
  %v5_131cc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_131cc, i32* %v4_131cc, align 4
  %v0_131d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_131d0 = add i32 %v0_131d0, 40
  %v1_131d4 = inttoptr i32 %v1_131d0 to i32*
  %v2_131d4 = load i32, i32* %v1_131d4, align 4
  %v3_131d4 = add i32 %v0_131d0, 44
  %v4_131d4 = inttoptr i32 %v3_131d4 to i32*
  %v5_131d4 = load i32, i32* %v4_131d4, align 4
  store i32 %v5_131d4, i32* %r1.global-to-local, align 4
  %v0_131d8 = load i32, i32* %r5.global-to-local, align 4
  %v1_131d8 = add i32 %v0_131d8, 64
  %v1_131dc = inttoptr i32 %v1_131d8 to i32*
  store i32 %v2_131d4, i32* %v1_131dc, align 4
  %v3_131dc = add i32 %v0_131d8, 68
  %v4_131dc = inttoptr i32 %v3_131dc to i32*
  %v5_131dc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_131dc, i32* %v4_131dc, align 4
  %v0_131e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_131e0 = add i32 %v0_131e0, 48
  %v1_131e4 = inttoptr i32 %v1_131e0 to i32*
  %v2_131e4 = load i32, i32* %v1_131e4, align 4
  %v3_131e4 = add i32 %v0_131e0, 52
  %v4_131e4 = inttoptr i32 %v3_131e4 to i32*
  %v5_131e4 = load i32, i32* %v4_131e4, align 4
  store i32 %v5_131e4, i32* %r1.global-to-local, align 4
  %v1_131e8 = add i32 %v0_131e0, 8
  %v2_131e8 = inttoptr i32 %v1_131e8 to i16*
  %v3_131e8 = load i16, i16* %v2_131e8, align 2
  %v4_131e8 = zext i16 %v3_131e8 to i32
  store i32 %v4_131e8, i32* %r2.global-to-local, align 4
  %v1_131ec = add i32 %v0_131e0, 10
  %v2_131ec = inttoptr i32 %v1_131ec to i16*
  %v3_131ec = load i16, i16* %v2_131ec, align 2
  %v4_131ec = zext i16 %v3_131ec to i32
  store i32 %v4_131ec, i32* %ip.global-to-local, align 4
  %v1_131f0 = add i32 %v0_131e0, 12
  %v2_131f0 = inttoptr i32 %v1_131f0 to i16*
  %v3_131f0 = load i16, i16* %v2_131f0, align 2
  %v4_131f0 = zext i16 %v3_131f0 to i32
  store i32 %v4_131f0, i32* %lr.global-to-local, align 4
  %v1_131f4 = add i32 %v0_131e0, 14
  %v2_131f4 = inttoptr i32 %v1_131f4 to i16*
  %v3_131f4 = load i16, i16* %v2_131f4, align 2
  %v4_131f4 = zext i16 %v3_131f4 to i32
  store i32 %v4_131f4, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_13200 = load i32, i32* %r5.global-to-local, align 4
  %v1_13200 = add i32 %v0_13200, 72
  %v1_13204 = inttoptr i32 %v1_13200 to i32*
  store i32 %v2_131e4, i32* %v1_13204, align 4
  %v3_13204 = add i32 %v0_13200, 76
  %v4_13204 = inttoptr i32 %v3_13204 to i32*
  %v5_13204 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_13204, i32* %v4_13204, align 4
  %v0_13208 = load i32, i32* %r5.global-to-local, align 4
  %v1_13208 = inttoptr i32 %v0_13208 to i32*
  %v2_13208 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_13208, i32* %v1_13208, align 4
  %v3_13208 = add i32 %v0_13208, 4
  %v4_13208 = inttoptr i32 %v3_13208 to i32*
  %v5_13208 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_13208, i32* %v4_13208, align 4
  %v0_1320c = load i32, i32* %r6.global-to-local, align 4
  %v1_1320c = load i32, i32* %r5.global-to-local, align 4
  %v2_1320c = add i32 %v1_1320c, 32
  %v3_1320c = inttoptr i32 %v2_1320c to i32*
  store i32 %v0_1320c, i32* %v3_1320c, align 4
  %v0_13210 = load i32, i32* %r7.global-to-local, align 4
  %v1_13210 = load i32, i32* %r5.global-to-local, align 4
  %v2_13210 = add i32 %v1_13210, 36
  %v3_13210 = inttoptr i32 %v2_13210 to i32*
  store i32 %v0_13210, i32* %v3_13210, align 4
  %v0_13214 = load i32, i32* %r2.global-to-local, align 4
  %v1_13214 = load i32, i32* %r5.global-to-local, align 4
  %v2_13214 = add i32 %v1_13214, 16
  %v3_13214 = inttoptr i32 %v2_13214 to i32*
  store i32 %v0_13214, i32* %v3_13214, align 4
  %v0_13218 = load i32, i32* %ip.global-to-local, align 4
  %v1_13218 = load i32, i32* %r5.global-to-local, align 4
  %v2_13218 = add i32 %v1_13218, 20
  %v3_13218 = inttoptr i32 %v2_13218 to i32*
  store i32 %v0_13218, i32* %v3_13218, align 4
  %v0_1321c = load i32, i32* %lr.global-to-local, align 4
  %v1_1321c = load i32, i32* %r5.global-to-local, align 4
  %v2_1321c = add i32 %v1_1321c, 24
  %v3_1321c = inttoptr i32 %v2_1321c to i32*
  store i32 %v0_1321c, i32* %v3_1321c, align 4
  %v0_13220 = load i32, i32* %r4.global-to-local, align 4
  %v1_13220 = load i32, i32* %r5.global-to-local, align 4
  %v2_13220 = add i32 %v1_13220, 28
  %v3_13220 = inttoptr i32 %v2_13220 to i32*
  store i32 %v0_13220, i32* %v3_13220, align 4
  ret i32 %v2_131e4

; uselistorder directives
  uselistorder i32 %v0_131e0, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 68, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 60, { 3, 4, 1, 5, 6, 0, 2, 7 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @function_13230() local_unnamed_addr {
dec_label_pc_13230:
  %stack_var_-16 = alloca i32, align 4
  %v2_13234 = ptrtoint i32* %stack_var_-16 to i32
  %v2_13240 = call i32 @function_14f68(i32 7, i32 %v2_13234)
  %v1_13244 = icmp slt i32 %v2_13240, 0
  %v5_13248 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_13244, i32 256, i32 %v5_13248
  ret i32 %storemerge
}

define i32 @function_1325c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1325c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1325c = load i32, i32* @r7, align 4
  store i32 %v3_1325c, i32* %stack_var_-8, align 4
  %v0_13268 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13268, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13268, -4095
  br i1 %tmp, label %dec_label_pc_13288, label %dec_label_pc_13278

dec_label_pc_13278:                               ; preds = %dec_label_pc_1325c
  %v0_13278 = call i32 @function_10600()
  %v0_1327c = load i32, i32* %r7.global-to-local, align 4
  %v1_1327c = sub i32 0, %v0_1327c
  %v2_13280 = inttoptr i32 %v0_13278 to i32*
  store i32 %v1_1327c, i32* %v2_13280, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13288.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13288

dec_label_pc_13288:                               ; preds = %dec_label_pc_1325c, %dec_label_pc_13278
  %v1_1328c = phi i32 [ %v0_13268, %dec_label_pc_1325c ], [ -1, %dec_label_pc_13278 ]
  %v2_13288 = phi i32 [ %v3_1325c, %dec_label_pc_1325c ], [ %v2_13288.pre, %dec_label_pc_13278 ]
  store i32 %v2_13288, i32* @r7, align 4
  ret i32 %v1_1328c

; uselistorder directives
  uselistorder i32 %v0_13268, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13288, { 1, 0 }
}

define i32 @function_13290(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13290:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13290 = load i32, i32* @r7, align 4
  store i32 %v3_13290, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_132b8, label %dec_label_pc_132a8

dec_label_pc_132a8:                               ; preds = %dec_label_pc_13290
  %v0_132a8 = call i32 @function_10600()
  %v0_132ac = load i32, i32* %r7.global-to-local, align 4
  %v1_132ac = sub i32 0, %v0_132ac
  %v2_132b0 = inttoptr i32 %v0_132a8 to i32*
  store i32 %v1_132ac, i32* %v2_132b0, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_132bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_132b8

dec_label_pc_132b8:                               ; preds = %dec_label_pc_13290, %dec_label_pc_132a8
  %v2_132bc = phi i32 [ %v3_13290, %dec_label_pc_13290 ], [ %v2_132bc.pre, %dec_label_pc_132a8 ]
  %v0_132b8 = phi i32 [ %arg1, %dec_label_pc_13290 ], [ -1, %dec_label_pc_132a8 ]
  store i32 %v2_132bc, i32* @r7, align 4
  ret i32 %v0_132b8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_132b8, { 1, 0 }
}

define i32 @function_132c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_132c4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_132f8, label %dec_label_pc_132e8

dec_label_pc_132e8:                               ; preds = %dec_label_pc_132c4
  %v0_132e8 = call i32 @function_10600()
  %v0_132ec = load i32, i32* %r4.global-to-local, align 4
  %v1_132ec = sub i32 0, %v0_132ec
  %v2_132f0 = inttoptr i32 %v0_132e8 to i32*
  store i32 %v1_132ec, i32* %v2_132f0, align 4
  br label %dec_label_pc_132f8

dec_label_pc_132f8:                               ; preds = %dec_label_pc_132c4, %dec_label_pc_132e8
  %v1_13300 = phi i32 [ %arg1, %dec_label_pc_132c4 ], [ -1, %dec_label_pc_132e8 ]
  ret i32 %v1_13300

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_132f8, { 1, 0 }
}

define i32 @function_13304(i32 %arg1) local_unnamed_addr {
dec_label_pc_13304:
  %v1_13314 = load i32, i32* @r0, align 4
  ret i32 %v1_13314
}

define i32 @function_13318(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13318:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13318 = load i32, i32* @r7, align 4
  store i32 %v3_13318, i32* %stack_var_-8, align 4
  %v0_13324 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13324, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13324, -4095
  br i1 %tmp, label %dec_label_pc_13344, label %dec_label_pc_13334

dec_label_pc_13334:                               ; preds = %dec_label_pc_13318
  %v0_13334 = call i32 @function_10600()
  %v0_13338 = load i32, i32* %r7.global-to-local, align 4
  %v1_13338 = sub i32 0, %v0_13338
  %v2_1333c = inttoptr i32 %v0_13334 to i32*
  store i32 %v1_13338, i32* %v2_1333c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_13344.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13344

dec_label_pc_13344:                               ; preds = %dec_label_pc_13318, %dec_label_pc_13334
  %v1_13348 = phi i32 [ %v0_13324, %dec_label_pc_13318 ], [ -1, %dec_label_pc_13334 ]
  %v2_13344 = phi i32 [ %v3_13318, %dec_label_pc_13318 ], [ %v2_13344.pre, %dec_label_pc_13334 ]
  store i32 %v2_13344, i32* @r7, align 4
  ret i32 %v1_13348

; uselistorder directives
  uselistorder i32 %v0_13324, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13344, { 1, 0 }
}

define i32 @function_1334c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1334c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13350.outer

dec_label_pc_13350.outer:                         ; preds = %dec_label_pc_13368, %dec_label_pc_1334c
  %v0_13350.ph = phi i32 [ %v0_13350.pre.pre, %dec_label_pc_13368 ], [ %arg1, %dec_label_pc_1334c ]
  %tmp = icmp ult i32 %v0_13350.ph, -4095
  br label %dec_label_pc_13350

dec_label_pc_13350:                               ; preds = %dec_label_pc_13350.outer, %dec_label_pc_13350
  br i1 %tmp, label %dec_label_pc_13350, label %dec_label_pc_13368

dec_label_pc_13368:                               ; preds = %dec_label_pc_13350
  %v0_13368 = call i32 @function_10600()
  %v1_1336c = sub i32 0, %v0_13350.ph
  %v2_13370 = inttoptr i32 %v0_13368 to i32*
  store i32 %v1_1336c, i32* %v2_13370, align 4
  %v0_13350.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13350.outer

; uselistorder directives
  uselistorder i32 %v0_13350.ph, { 1, 0 }
  uselistorder label %dec_label_pc_13350, { 1, 0 }
}

define i32 @function_13378(i32* %arg1) local_unnamed_addr {
dec_label_pc_13378:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 121092, i32* @r6, align 4
  %v1_1338c = add i32 %tmp, 24
  store i32 %v1_1338c, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_133a4 = load i32, i32* inttoptr (i32 121164 to i32*), align 4
  store i32 %v4_133a4, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_133a4)
  %v0_133b8 = load i32, i32* @r6, align 4
  %v2_133b8 = add i32 %v0_133b8, 16
  %v3_133b8 = inttoptr i32 %v2_133b8 to i32*
  %v4_133b8 = load i32, i32* %v3_133b8, align 4
  store i32 %v4_133b8, i32* %ip.global-to-local, align 4
  store i32 78788, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_133b8)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_133c8

dec_label_pc_133c8:                               ; preds = %dec_label_pc_133f8, %dec_label_pc_13378
  %v0_133c8 = load i32, i32* @r5, align 4
  %v1_133c8 = add i32 %v0_133c8, 4
  %v2_133c8 = inttoptr i32 %v1_133c8 to i32*
  %v3_133c8 = load i32, i32* %v2_133c8, align 4
  %v4_133c8 = add i32 %v0_133c8, 8
  %v5_133c8 = inttoptr i32 %v4_133c8 to i32*
  %v6_133c8 = load i32, i32* %v5_133c8, align 4
  %tmp10 = icmp ugt i32 %v6_133c8, %v3_133c8
  br i1 %tmp10, label %dec_label_pc_133f8, label %dec_label_pc_133d4

dec_label_pc_133d4:                               ; preds = %dec_label_pc_133c8
  %v1_133d4 = inttoptr i32 %v0_133c8 to i32*
  %v2_133d4 = load i32, i32* %v1_133d4, align 4
  %v1_133d8 = add i32 %v0_133c8, 12
  %v2_133d8 = inttoptr i32 %v1_133d8 to i32*
  %v3_133d8 = load i32, i32* %v2_133d8, align 4
  %v1_133dc = add i32 %v0_133c8, 20
  %v2_133dc = inttoptr i32 %v1_133dc to i32*
  %v3_133dc = load i32, i32* %v2_133dc, align 4
  %v4_133e0 = inttoptr i32 %v3_133d8 to i32*
  %v5_133e0 = call i32 @function_14f9c(i32 %v2_133d4, i32* %v4_133e0, i32 %v3_133dc, i32 %v6_133c8)
  %tmp9 = icmp slt i32 %v5_133e0, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_133f0

.thread:                                          ; preds = %dec_label_pc_133d4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13428

dec_label_pc_133f0:                               ; preds = %dec_label_pc_133d4
  %v1_133f0 = load i32, i32* @r5, align 4
  %v2_133f0 = add i32 %v1_133f0, 8
  %v3_133f0 = inttoptr i32 %v2_133f0 to i32*
  store i32 %v5_133e0, i32* %v3_133f0, align 4
  %v0_133f4 = load i32, i32* @r7, align 4
  %v1_133f4 = load i32, i32* @r5, align 4
  %v2_133f4 = add i32 %v1_133f4, 4
  %v3_133f4 = inttoptr i32 %v2_133f4 to i32*
  store i32 %v0_133f4, i32* %v3_133f4, align 4
  %v0_133f8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_133f8

dec_label_pc_133f8:                               ; preds = %dec_label_pc_133c8, %dec_label_pc_133f0
  %v1_1341c = phi i32 [ %v0_133c8, %dec_label_pc_133c8 ], [ %v0_133f8.pre, %dec_label_pc_133f0 ]
  %v1_133f8 = add i32 %v1_1341c, 4
  %v2_133f8 = inttoptr i32 %v1_133f8 to i32*
  %v3_133f8 = load i32, i32* %v2_133f8, align 4
  %v1_133fc = add i32 %v1_1341c, 12
  %v2_133fc = inttoptr i32 %v1_133fc to i32*
  %v3_133fc = load i32, i32* %v2_133fc, align 4
  %v2_13400 = add i32 %v3_133fc, %v3_133f8
  store i32 %v2_13400, i32* @r4, align 4
  %v3_13404 = inttoptr i32 %v2_13400 to i32*
  %v4_13404 = load i32, i32* %v3_13404, align 4
  %v1_13408 = add i32 %v2_13400, 4
  %v2_13408 = inttoptr i32 %v1_13408 to i32*
  %v3_13408 = load i32, i32* %v2_13408, align 4
  %v1_1340c = add i32 %v2_13400, 16
  %v2_1340c = inttoptr i32 %v1_1340c to i16*
  %v3_1340c = load i16, i16* %v2_1340c, align 2
  %v4_1340c = zext i16 %v3_1340c to i32
  %v1_13410 = add i32 %v2_13400, 8
  %v2_13410 = inttoptr i32 %v1_13410 to i32*
  %v3_13410 = load i32, i32* %v2_13410, align 4
  store i32 %v3_13410, i32* %ip.global-to-local, align 4
  %v2_13414 = add i32 %v4_1340c, %v3_133f8
  %v2_13418 = or i32 %v3_13408, %v4_13404
  %v4_13418 = icmp eq i32 %v2_13418, 0
  store i32 %v2_13414, i32* %v2_133f8, align 4
  %v0_13420 = load i32, i32* %ip.global-to-local, align 4
  %v1_13420 = load i32, i32* @r5, align 4
  %v2_13420 = add i32 %v1_13420, 16
  %v3_13420 = inttoptr i32 %v2_13420 to i32*
  store i32 %v0_13420, i32* %v3_13420, align 4
  br i1 %v4_13418, label %dec_label_pc_133c8, label %dec_label_pc_13428

dec_label_pc_13428:                               ; preds = %dec_label_pc_133f8, %.thread
  %v0_13434 = load i32, i32* @r6, align 4
  %v2_13434 = add i32 %v0_13434, 24
  %v3_13434 = inttoptr i32 %v2_13434 to i32*
  %v4_13434 = load i32, i32* %v3_13434, align 4
  store i32 %v4_13434, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13434)
  %v0_13440 = load i32, i32* @r4, align 4
  ret i32 %v0_13440

; uselistorder directives
  uselistorder i32 %v2_13400, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_1341c, { 1, 0 }
  uselistorder i32 %v6_133c8, { 1, 0 }
  uselistorder i32 %v0_133c8, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_133f8, { 1, 0 }
}

define i32 @function_13454(i32 %arg1) local_unnamed_addr {
dec_label_pc_13454:
  %v0_13454 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13454, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13454
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13454, %bb
  %v10_13460 = phi i32 [ %arg1, %dec_label_pc_13454 ], [ 0, %bb ]
  ret i32 %v10_13460

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_13464(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13464:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_13464 = load i32, i32* @r4, align 4
  %v6_13464 = load i32, i32* @r5, align 4
  %v9_13464 = load i32, i32* @r6, align 4
  %v12_13464 = load i32, i32* @r7, align 4
  %v15_13464 = load i32, i32* @r8, align 4
  %v18_13464 = load i32, i32* @sb, align 4
  %v21_13464 = load i32, i32* @sl, align 4
  %v24_13464 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_13468 = icmp eq i32* %arg1, null
  store i1 %v2_13468, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_13468, label %dec_label_pc_13778, label %dec_label_pc_13480

dec_label_pc_13480:                               ; preds = %dec_label_pc_13464
  %v1_13480 = urem i32 %arg3, 256
  store i32 %v1_13480, i32* @sb, align 4
  %v1_13484 = udiv i32 %arg3, 256
  %v3_13488 = urem i32 %v1_13484, 256
  %v3_1348c = mul nuw nsw i32 %v1_13480, 4
  %v1_13494 = or i32 %v3_1348c, 1
  %v1_134a0 = and i32 %arg3, 131072
  %v1_134a4 = add nsw i32 %v1_13480, -1
  %v1_134b0 = and i32 %arg3, 262144
  store i32 %v1_134b0, i32* %r2.global-to-local, align 4
  %v1_134b4 = and i32 %arg3, 65536
  store i32 %v1_134b4, i32* %r3.global-to-local, align 4
  store i32 %v1_134b4, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_134c4 = add i32 %arg4, 1
  store i32 %v1_134c4, i32* @sl, align 4
  %v2_13644 = inttoptr i32 %arg2 to i32*
  %v2_13654 = icmp eq i32 %v1_134a0, 0
  %v2_136ac = icmp eq i32 %v1_134b0, 0
  br label %dec_label_pc_134c8

dec_label_pc_134c8:                               ; preds = %dec_label_pc_134c8.backedge, %dec_label_pc_13480
  %v2_134e4 = phi i32 [ %v0_134c8.pre, %dec_label_pc_134c8.backedge ], [ %tmp, %dec_label_pc_13480 ]
  %v1_134c8 = add i32 %v2_134e4, 4
  %v2_134c8 = inttoptr i32 %v1_134c8 to i32*
  %v3_134c8 = load i32, i32* %v2_134c8, align 4
  store i32 %v3_134c8, i32* %r3.global-to-local, align 4
  %v2_134cc = icmp eq i32 %v3_134c8, 0
  store i1 %v2_134cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_134cc, label %dec_label_pc_134d4, label %dec_label_pc_1351c

dec_label_pc_134d4:                               ; preds = %dec_label_pc_134c8
  %v1_134d4 = add i32 %v2_134e4, 16
  %v2_134d4 = inttoptr i32 %v1_134d4 to i32*
  %v3_134d4 = load i32, i32* %v2_134d4, align 4
  store i32 %v3_134d4, i32* %r3.global-to-local, align 4
  %v2_134d8 = icmp eq i32 %v3_134d4, 0
  store i1 %v2_134d8, i1* %cpsr_z.global-to-local, align 1
  %v1_134dc = add i32 %v2_134e4, 8
  %v2_134dc = inttoptr i32 %v1_134dc to i32*
  %v3_134dc = load i32, i32* %v2_134dc, align 4
  store i32 %v3_134dc, i32* %r3.global-to-local, align 4
  br i1 %v2_134d8, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_134d4
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_134d4, align 4
  %v0_134e8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_134d4, %bb
  %v0_134e8 = phi i32 [ %v0_134e8.pre, %bb ], [ %v3_134dc, %dec_label_pc_134d4 ]
  %v2_134e8 = icmp eq i32 %v0_134e8, 0
  store i1 %v2_134e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_134e8, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_13494, i32* %r3.global-to-local, align 4
  %v2_134f0 = load i32, i32* @r5, align 4
  %v3_134f0 = add i32 %v2_134f0, 8
  %v4_134f0 = inttoptr i32 %v3_134f0 to i32*
  store i32 %v1_13494, i32* %v4_134f0, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_134f4 = load i32, i32* @r5, align 4
  %v1_134f4 = add i32 %v0_134f4, 16
  %v2_134f4 = inttoptr i32 %v1_134f4 to i32*
  %v3_134f4 = load i32, i32* %v2_134f4, align 4
  store i32 %v3_134f4, i32* %r0.global-to-local, align 4
  %v1_134f8 = add i32 %v0_134f4, 8
  %v2_134f8 = inttoptr i32 %v1_134f8 to i32*
  %v3_134f8 = load i32, i32* %v2_134f8, align 4
  store i32 %v3_134f8, i32* %r3.global-to-local, align 4
  %v2_134fc = add i32 %v3_134f8, %v3_134f4
  store i32 %v2_134fc, i32* @r0, align 4
  %v0_13500 = call i32 @function_10c08()
  store i32 %v0_13500, i32* %r0.global-to-local, align 4
  %v2_13504 = icmp eq i32 %v0_13500, 0
  store i1 %v2_13504, i1* %cpsr_z.global-to-local, align 1
  %v1_13508 = load i32, i32* @r5, align 4
  %v2_13508 = add i32 %v1_13508, 4
  %v3_13508 = inttoptr i32 %v2_13508 to i32*
  store i32 %v0_13500, i32* %v3_13508, align 4
  br i1 %v2_13504, label %dec_label_pc_13778, label %dec_label_pc_13510

dec_label_pc_13510:                               ; preds = %.thread
  %v0_13510 = load i32, i32* @r5, align 4
  %v1_13510 = add i32 %v0_13510, 20
  %v2_13510 = inttoptr i32 %v1_13510 to i32*
  %v3_13510 = load i32, i32* %v2_13510, align 4
  %v1_13514 = or i32 %v3_13510, 1
  store i32 %v1_13514, i32* %r3.global-to-local, align 4
  store i32 %v1_13514, i32* %v2_13510, align 4
  %v0_1351c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1351c

dec_label_pc_1351c:                               ; preds = %dec_label_pc_134c8, %dec_label_pc_13510
  %v1_13524 = phi i32 [ %v2_134e4, %dec_label_pc_134c8 ], [ %v0_1351c.pre, %dec_label_pc_13510 ]
  %v1_1351c = add i32 %v1_13524, 4
  %v2_1351c = inttoptr i32 %v1_1351c to i32*
  %v3_1351c = load i32, i32* %v2_1351c, align 4
  store i32 %v3_1351c, i32* %r2.global-to-local, align 4
  %v4_1351c = add i32 %v1_13524, 8
  %v5_1351c = inttoptr i32 %v4_1351c to i32*
  %v6_1351c = load i32, i32* %v5_1351c, align 4
  %v2_13520 = add i32 %v6_1351c, %v3_1351c
  store i32 %v2_13520, i32* %r3.global-to-local, align 4
  %v2_13524 = add i32 %v1_13524, 12
  %v3_13524 = inttoptr i32 %v2_13524 to i32*
  store i32 %v2_13520, i32* %v3_13524, align 4
  %v0_13528 = load i32, i32* @fp, align 4
  store i32 %v0_13528, i32* @r6, align 4
  br label %dec_label_pc_1352c

dec_label_pc_1352c:                               ; preds = %dec_label_pc_135b8, %dec_label_pc_135a4, %dec_label_pc_1351c
  %v0_13534 = phi i32 [ %v0_13528, %dec_label_pc_1351c ], [ %v1_135a4, %dec_label_pc_135a4 ], [ %v0_13534.pre.pre, %dec_label_pc_135b8 ]
  %v0_1352c = load i32, i32* @r5, align 4
  %v1_1352c = add i32 %v0_1352c, 12
  store i32 %v1_1352c, i32* %r0.global-to-local, align 4
  %v1_13530 = inttoptr i32 %v1_1352c to i32*
  %v2_13530 = load i32, i32* %v1_13530, align 4
  store i32 %v2_13530, i32* %r0.global-to-local, align 4
  %v3_13530 = add i32 %v0_1352c, 16
  %v4_13530 = inttoptr i32 %v3_13530 to i32*
  %v5_13530 = load i32, i32* %v4_13530, align 4
  %v2_13534 = add i32 %v2_13530, %v0_13534
  store i32 %v2_13534, i32* %r0.global-to-local, align 4
  %v2_13538 = sub i32 %v5_13530, %v0_13534
  %v1_1353c = inttoptr i32 %v0_1352c to i32*
  %v2_1353c = load i32, i32* %v1_1353c, align 4
  store i32 %v2_1353c, i32* %r2.global-to-local, align 4
  %v3_13540 = call i32 @function_13f60(i32 %v2_13534, i32 %v2_13538, i32 %v2_1353c)
  store i32 %v3_13540, i32* %r0.global-to-local, align 4
  store i32 %v3_13540, i32* %r4.global-to-local, align 4
  %v2_13544 = icmp eq i32 %v3_13540, 0
  store i1 %v2_13544, i1* %cpsr_z.global-to-local, align 1
  %v0_1354c = load i32, i32* @r5, align 4
  %v1_1354c = add i32 %v0_1354c, 12
  br i1 %v2_13544, label %dec_label_pc_1354c, label %dec_label_pc_13564

dec_label_pc_1354c:                               ; preds = %dec_label_pc_1352c
  store i32 %v1_1354c, i32* %r0.global-to-local, align 4
  %v1_13550 = inttoptr i32 %v1_1354c to i32*
  %v2_13550 = load i32, i32* %v1_13550, align 4
  store i32 %v2_13550, i32* %r0.global-to-local, align 4
  %v3_13550 = add i32 %v0_1354c, 16
  %v4_13550 = inttoptr i32 %v3_13550 to i32*
  %v5_13550 = load i32, i32* %v4_13550, align 4
  store i32 %v5_13550, i32* @r2, align 4
  %v2_13558 = inttoptr i32 %v2_13550 to i8*
  %v3_13558 = call i32 @function_10650(i8* %v2_13558, i32 0)
  store i32 %v3_13558, i32* %r0.global-to-local, align 4
  %v0_1355c = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1377c

dec_label_pc_13564:                               ; preds = %dec_label_pc_1352c
  %v2_13564 = inttoptr i32 %v1_1354c to i32*
  %v3_13564 = load i32, i32* %v2_13564, align 4
  store i32 %v3_13564, i32* @r4, align 4
  %v1_13568 = load i32, i32* @r6, align 4
  %v2_13568 = add i32 %v1_13568, %v3_13564
  store i32 %v2_13568, i32* %r0.global-to-local, align 4
  %v1_1356c = call i32 @function_14a10(i32 %v2_13568)
  %v0_13574 = load i32, i32* @r6, align 4
  %v2_13574 = add i32 %v0_13574, %v1_1356c
  store i32 %v2_13574, i32* @r6, align 4
  %v0_13578 = load i32, i32* @r4, align 4
  store i32 %v0_13578, i32* @r0, align 4
  %v2_1357c = call i32 @function_14c5c(i32 %v0_13578, i32 10)
  store i32 %v2_1357c, i32* %r0.global-to-local, align 4
  %v2_13580 = icmp eq i32 %v2_1357c, 0
  store i1 %v2_13580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13580, label %dec_label_pc_135ac, label %dec_label_pc_13588

dec_label_pc_13588:                               ; preds = %dec_label_pc_13564
  %v1_13588 = inttoptr i32 %v2_1357c to i8*
  %v2_13588 = load i8, i8* %v1_13588, align 1
  %v3_13588 = zext i8 %v2_13588 to i32
  %v1_1358c = add nuw nsw i32 %v3_13588, 255
  %v1_13590 = urem i32 %v1_1358c, 256
  store i32 %v1_13590, i32* %r3.global-to-local, align 4
  %v7_13594 = icmp eq i32 %v1_13590, 92
  store i1 %v7_13594, i1* %cpsr_z.global-to-local, align 1
  %v1_13598 = trunc i32 %v1_1358c to i8
  store i8 %v1_13598, i8* %v1_13588, align 1
  %v0_1359c = load i32, i32* @r6, align 4
  %v1_1359c = add i32 %v0_1359c, -1
  store i32 %v1_1359c, i32* @r6, align 4
  %v0_135a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_135a0, label %dec_label_pc_135a4, label %dec_label_pc_13630

dec_label_pc_135a4:                               ; preds = %dec_label_pc_13588
  %v1_135a4 = add i32 %v0_1359c, -2
  store i32 %v1_135a4, i32* @r6, align 4
  br label %dec_label_pc_1352c

dec_label_pc_135ac:                               ; preds = %dec_label_pc_13564
  %v0_135ac = load i32, i32* @r5, align 4
  %v1_135ac = add i32 %v0_135ac, 20
  %v2_135ac = inttoptr i32 %v1_135ac to i32*
  %v3_135ac = load i32, i32* %v2_135ac, align 4
  store i32 %v3_135ac, i32* %r3.global-to-local, align 4
  %v2_135b0 = icmp eq i32 %v3_135ac, 0
  store i1 %v2_135b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_135b0, label %dec_label_pc_135e8, label %dec_label_pc_135b8

dec_label_pc_135b8:                               ; preds = %dec_label_pc_135ac
  %v1_135b8 = add i32 %v0_135ac, 16
  %v2_135b8 = inttoptr i32 %v1_135b8 to i32*
  %v3_135b8 = load i32, i32* %v2_135b8, align 4
  store i32 %v3_135b8, i32* %r3.global-to-local, align 4
  %v1_135bc = add i32 %v0_135ac, 8
  %v2_135bc = inttoptr i32 %v1_135bc to i32*
  %v3_135bc = load i32, i32* %v2_135bc, align 4
  %v1_135c0 = add i32 %v3_135b8, 4096
  store i32 %v1_135c0, i32* %r3.global-to-local, align 4
  %v2_135c4 = add i32 %v3_135bc, %v1_135c0
  store i32 %v1_135c0, i32* %v2_135b8, align 4
  %v0_135cc = load i32, i32* @r5, align 4
  %v1_135cc = add i32 %v0_135cc, 4
  %v2_135cc = inttoptr i32 %v1_135cc to i32*
  %v3_135cc = load i32, i32* %v2_135cc, align 4
  store i32 %v3_135cc, i32* %r0.global-to-local, align 4
  %v4_135d0 = inttoptr i32 %v3_135cc to i32*
  %v5_135d0 = call i32 @function_1165c(i32* %v4_135d0, i32 %v2_135c4, i32 %v2_1353c, i32 %v1_135c0)
  store i32 %v5_135d0, i32* %r0.global-to-local, align 4
  %v0_135d4 = load i32, i32* @r5, align 4
  %v1_135d4 = add i32 %v0_135d4, 8
  %v2_135d4 = inttoptr i32 %v1_135d4 to i32*
  %v3_135d4 = load i32, i32* %v2_135d4, align 4
  %v2_135d8 = add i32 %v3_135d4, %v5_135d0
  store i32 %v2_135d8, i32* %r3.global-to-local, align 4
  %v2_135dc = add i32 %v0_135d4, 12
  %v3_135dc = inttoptr i32 %v2_135dc to i32*
  store i32 %v2_135d8, i32* %v3_135dc, align 4
  %v1_135e0 = load i32, i32* @r5, align 4
  %v2_135e0 = add i32 %v1_135e0, 4
  %v3_135e0 = inttoptr i32 %v2_135e0 to i32*
  store i32 %v5_135d0, i32* %v3_135e0, align 4
  %v0_13534.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1352c

dec_label_pc_135e8:                               ; preds = %dec_label_pc_135ac, %.dec_label_pc_135e8_crit_edge
  %v0_135e8 = phi i32 [ %v0_135e8.pre, %.dec_label_pc_135e8_crit_edge ], [ %v0_135ac, %dec_label_pc_135ac ]
  %v1_135e8 = inttoptr i32 %v0_135e8 to i32*
  %v2_135e8 = load i32, i32* %v1_135e8, align 4
  %v1_135ec = add i32 %v2_135e8, 52
  %v2_135ec = inttoptr i32 %v1_135ec to i32*
  %v3_135ec = load i32, i32* %v2_135ec, align 4
  store i32 %v3_135ec, i32* %r3.global-to-local, align 4
  %v2_135f0 = icmp eq i32 %v3_135ec, 0
  store i1 %v2_135f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_135f0, label %dec_label_pc_1361c, label %dec_label_pc_135f8

dec_label_pc_135f8:                               ; preds = %dec_label_pc_135e8
  %v1_135f8 = add i32 %v2_135e8, 16
  %v2_135f8 = inttoptr i32 %v1_135f8 to i32*
  %v3_135f8 = load i32, i32* %v2_135f8, align 4
  store i32 %v3_135f8, i32* %r2.global-to-local, align 4
  %v1_135fc = add i32 %v2_135e8, 24
  %v2_135fc = inttoptr i32 %v1_135fc to i32*
  %v3_135fc = load i32, i32* %v2_135fc, align 4
  store i32 %v3_135fc, i32* %r3.global-to-local, align 4
  %v3_13600 = icmp ult i32 %v3_135f8, %v3_135fc
  %v9_13600 = icmp eq i32 %v3_135f8, %v3_135fc
  store i1 %v9_13600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13600, label %dec_label_pc_13624thread-pre-split, label %dec_label_pc_13610

dec_label_pc_13610:                               ; preds = %dec_label_pc_135f8
  store i32 %v2_135e8, i32* %r0.global-to-local, align 4
  %v1_13614 = inttoptr i32 %v2_135e8 to i16*
  %v2_13614 = call i32 @function_143b0(i16* %v1_13614)
  store i32 %v2_13614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13624

dec_label_pc_1361c:                               ; preds = %dec_label_pc_135e8
  store i32 %v2_135e8, i32* %r0.global-to-local, align 4
  %v1_13620 = call i32 @function_13e84(i32 %v2_135e8)
  store i32 %v1_13620, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13624

dec_label_pc_13624thread-pre-split:               ; preds = %dec_label_pc_135f8
  %v2_13604 = inttoptr i32 %v3_135f8 to i8*
  %v3_13604 = load i8, i8* %v2_13604, align 1
  %v4_13604 = zext i8 %v3_13604 to i32
  store i32 %v4_13604, i32* %r0.global-to-local, align 4
  %v6_13604 = add i32 %v3_135f8, 1
  store i32 %v6_13604, i32* %r2.global-to-local, align 4
  store i32 %v6_13604, i32* %v2_135f8, align 4
  %v0_13624.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13624

dec_label_pc_13624:                               ; preds = %dec_label_pc_13624thread-pre-split, %dec_label_pc_13610, %dec_label_pc_1361c
  %v1_13628 = phi i32 [ %v0_13624.pr, %dec_label_pc_13624thread-pre-split ], [ %v2_13614, %dec_label_pc_13610 ], [ %v1_13620, %dec_label_pc_1361c ]
  %v7_13624 = icmp eq i32 %v1_13628, 10
  store i1 %v7_13624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13624, label %dec_label_pc_13630.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_13624
  %v8_13628 = icmp eq i32 %v1_13628, -1
  store i1 %v8_13628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_13628, label %dec_label_pc_13630.loopexit, label %.dec_label_pc_135e8_crit_edge

.dec_label_pc_135e8_crit_edge:                    ; preds = %bb68
  %v0_135e8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_135e8

dec_label_pc_13630.loopexit:                      ; preds = %bb68, %dec_label_pc_13624
  %v0_13630.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13630

dec_label_pc_13630:                               ; preds = %dec_label_pc_13588, %dec_label_pc_13630.loopexit
  %v0_13630 = phi i32 [ %v0_13630.pre, %dec_label_pc_13630.loopexit ], [ %v1_1359c, %dec_label_pc_13588 ]
  %v7_13630 = icmp eq i32 %v0_13630, -1
  store i1 %v7_13630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13630, label %dec_label_pc_13778, label %dec_label_pc_13638

dec_label_pc_13638:                               ; preds = %dec_label_pc_13630
  %v0_13638 = load i32, i32* @r5, align 4
  %v1_13638 = add i32 %v0_13638, 4
  %v2_13638 = inttoptr i32 %v1_13638 to i32*
  %v3_13638 = load i32, i32* %v2_13638, align 4
  store i32 %v3_13638, i32* %r0.global-to-local, align 4
  store i32 %v3_1348c, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_13638, i32* %v2_13644, align 4
  %v0_13648 = load i32, i32* @fp, align 4
  %v2_1364c = inttoptr i32 %v3_13638 to i8*
  %v3_1364c = call i32 @function_10650(i8* %v2_1364c, i32 %v0_13648)
  store i32 %v3_1364c, i32* %r0.global-to-local, align 4
  store i32 %v1_134a0, i32* %r2.global-to-local, align 4
  store i1 %v2_13654, i1* %cpsr_z.global-to-local, align 1
  %v0_13658 = load i32, i32* @r5, align 4
  %v1_13658 = add i32 %v0_13658, 12
  %v2_13658 = inttoptr i32 %v1_13658 to i32*
  %v3_13658 = load i32, i32* %v2_13658, align 4
  store i32 %v3_13658, i32* @r4, align 4
  br i1 %v2_13654, label %dec_label_pc_13670, label %dec_label_pc_13660

dec_label_pc_13660:                               ; preds = %dec_label_pc_13638
  store i32 %v3_13658, i32* @r0, align 4
  %v0_13664 = load i32, i32* @sl, align 4
  %v2_13668 = inttoptr i32 %v3_13658 to i8*
  %v3_13668 = call i32 @function_14ad4(i8* %v2_13668, i32 %v0_13664)
  store i32 %v3_13668, i32* %r0.global-to-local, align 4
  %v0_1366c = load i32, i32* @r4, align 4
  %v2_1366c = add i32 %v0_1366c, %v3_13668
  store i32 %v2_1366c, i32* @r4, align 4
  br label %dec_label_pc_13670

dec_label_pc_13670:                               ; preds = %dec_label_pc_13638, %dec_label_pc_13660
  %v0_1374813 = phi i32 [ %v3_13658, %dec_label_pc_13638 ], [ %v2_1366c, %dec_label_pc_13660 ]
  %v1_13670 = inttoptr i32 %v0_1374813 to i8*
  %v2_13670 = load i8, i8* %v1_13670, align 1
  %v3_13670 = zext i8 %v2_13670 to i32
  store i32 %v3_13670, i32* %r2.global-to-local, align 4
  %v2_13674 = icmp eq i8 %v2_13670, 0
  store i1 %v2_13674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13674, label %dec_label_pc_134c8.backedge, label %dec_label_pc_1367c

dec_label_pc_134c8.backedge:                      ; preds = %dec_label_pc_13670, %dec_label_pc_13770, %dec_label_pc_1367c
  %v0_134c8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_134c8

dec_label_pc_1367c:                               ; preds = %dec_label_pc_13670
  %v0_1367c = load i32, i32* @r7, align 4
  %v1_1367c = inttoptr i32 %v0_1367c to i8*
  %v2_1367c = load i8, i8* %v1_1367c, align 1
  %v3_1367c = zext i8 %v2_1367c to i32
  store i32 %v3_1367c, i32* %r3.global-to-local, align 4
  %v9_13680 = icmp eq i8 %v2_1367c, %v2_13670
  store i1 %v9_13680, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13680, label %dec_label_pc_134c8.backedge, label %dec_label_pc_13748.preheader

dec_label_pc_13748.preheader:                     ; preds = %dec_label_pc_1367c
  %v1_13684 = load i32, i32* @fp, align 4
  store i32 %v1_13684, i32* @r6, align 4
  %v2_1374815 = load i8, i8* %v1_13670, align 1
  %v3_1374816 = zext i8 %v2_1374815 to i32
  store i32 %v3_1374816, i32* %r2.global-to-local, align 4
  %v2_1374c17 = icmp eq i8 %v2_1374815, 0
  store i1 %v2_1374c17, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1374c17, label %dec_label_pc_13764, label %dec_label_pc_13754.preheader

dec_label_pc_13754.preheader:                     ; preds = %dec_label_pc_13748.preheader
  %v2_1375482 = load i8, i8* %v1_1367c, align 1
  %v3_1375483 = zext i8 %v2_1375482 to i32
  store i32 %v3_1375483, i32* %r3.global-to-local, align 4
  %v9_1375886 = icmp eq i8 %v2_1375482, %v2_1374815
  store i1 %v9_1375886, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1375886, label %dec_label_pc_13764, label %bb74

dec_label_pc_13690:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_13694 = load i32, i32* %v2_13644, align 4
  store i32 %v2_13694, i32* %r3.global-to-local, align 4
  store i32 %v1_134a4, i32* %r2.global-to-local, align 4
  %v9_1369c = icmp eq i32 %v2_136a088, %v1_134a4
  store i1 %v9_1369c, i1* %cpsr_z.global-to-local, align 1
  %v5_136a0 = mul i32 %v2_136a088, 4
  %v6_136a0 = add i32 %v2_13694, %v5_136a0
  %v7_136a0 = inttoptr i32 %v6_136a0 to i32*
  store i32 %v0_136a087, i32* %v7_136a0, align 4
  br i1 %v9_1369c, label %dec_label_pc_136a8, label %dec_label_pc_136b4

dec_label_pc_136a8:                               ; preds = %dec_label_pc_13690
  store i32 %v1_134b0, i32* %r3.global-to-local, align 4
  store i1 %v2_136ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_136ac, label %dec_label_pc_136b4, label %dec_label_pc_136d4

dec_label_pc_136b4:                               ; preds = %dec_label_pc_136a8, %dec_label_pc_13690
  %v0_136b4 = load i32, i32* @r7, align 4
  %v1_136b4 = inttoptr i32 %v0_136b4 to i8*
  %v2_136b4 = load i8, i8* %v1_136b4, align 1
  %v3_136b4 = zext i8 %v2_136b4 to i32
  store i32 %v3_136b4, i32* %r3.global-to-local, align 4
  %v2_136b8 = icmp eq i8 %v2_136b4, 0
  store i1 %v2_136b8, i1* %cpsr_z.global-to-local, align 1
  %v0_136bc = load i32, i32* @r4, align 4
  store i32 %v0_136bc, i32* @r0, align 4
  %v1_136c0 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_136b8, i32 %v1_136c0, i32 %v0_136b4
  store i32 %storemerge, i32* @r1, align 4
  %v0_136c8 = call i32 @function_14a90()
  store i32 %v0_136c8, i32* %r0.global-to-local, align 4
  %v0_136cc = load i32, i32* @r4, align 4
  %v2_136cc = add i32 %v0_136cc, %v0_136c8
  store i32 %v2_136cc, i32* @r4, align 4
  br label %dec_label_pc_1370c

dec_label_pc_136d4:                               ; preds = %dec_label_pc_136a8
  %v0_136d4 = load i32, i32* @r4, align 4
  store i32 %v0_136d4, i32* @r0, align 4
  %v0_136d8 = load i32, i32* @r7, align 4
  %v1_136d8 = inttoptr i32 %v0_136d8 to i8*
  %v2_136d8 = load i8, i8* %v1_136d8, align 1
  %v3_136d8 = zext i8 %v2_136d8 to i32
  %v5_136dc = call i32 @function_14b70(i32 %v0_136d4, i32 %v3_136d8, i32 %v1_134a4, i32 %v1_134b0)
  store i32 %v5_136dc, i32* %r0.global-to-local, align 4
  store i32 %v1_134a0, i32* %r2.global-to-local, align 4
  store i1 %v2_13654, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_136dc, i32* @r4, align 4
  br i1 %v2_13654, label %dec_label_pc_1370c, label %dec_label_pc_136f8

dec_label_pc_136f4:                               ; preds = %dec_label_pc_136f8
  %v1_136f4 = add i32 %v0_1370c.pre, -1
  store i32 %v1_136f4, i32* @r4, align 4
  br label %dec_label_pc_136f8

dec_label_pc_136f8:                               ; preds = %dec_label_pc_136d4, %dec_label_pc_136f4
  %v0_136f8 = phi i32 [ %v1_136f4, %dec_label_pc_136f4 ], [ %v5_136dc, %dec_label_pc_136d4 ]
  %v1_136f8 = add i32 %v0_136f8, -1
  %v2_136f8 = inttoptr i32 %v1_136f8 to i8*
  %v3_136f8 = load i8, i8* %v2_136f8, align 1
  %v4_136f8 = zext i8 %v3_136f8 to i32
  %v0_136fc = load i32, i32* @sl, align 4
  store i32 %v0_136fc, i32* @r0, align 4
  %v2_13700 = call i32 @function_14c5c(i32 %v0_136fc, i32 %v4_136f8)
  store i32 %v2_13700, i32* %r0.global-to-local, align 4
  %v2_13704 = icmp eq i32 %v2_13700, 0
  store i1 %v2_13704, i1* %cpsr_z.global-to-local, align 1
  %v0_1370c.pre = load i32, i32* @r4, align 4
  br i1 %v2_13704, label %dec_label_pc_1370c, label %dec_label_pc_136f4

dec_label_pc_1370c:                               ; preds = %dec_label_pc_136f8, %dec_label_pc_136d4, %dec_label_pc_136b4
  %v3_13718 = phi i32 [ %v5_136dc, %dec_label_pc_136d4 ], [ %v2_136cc, %dec_label_pc_136b4 ], [ %v0_1370c.pre, %dec_label_pc_136f8 ]
  %v1_1370c = inttoptr i32 %v3_13718 to i8*
  %v2_1370c = load i8, i8* %v1_1370c, align 1
  %v3_1370c = zext i8 %v2_1370c to i32
  store i32 %v3_1370c, i32* %r2.global-to-local, align 4
  %v0_13710 = load i32, i32* @r7, align 4
  %v1_13710 = inttoptr i32 %v0_13710 to i8*
  %v2_13710 = load i8, i8* %v1_13710, align 1
  %v3_13710 = zext i8 %v2_13710 to i32
  store i32 %v3_13710, i32* %r3.global-to-local, align 4
  %v9_13714 = icmp eq i8 %v2_13710, %v2_1370c
  store i1 %v9_13714, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13714, label %bb71, label %dec_label_pc_13720

bb71:                                             ; preds = %dec_label_pc_1370c
  %v1_13718 = load i32, i32* @fp, align 4
  %v2_13718 = trunc i32 %v1_13718 to i8
  store i8 %v2_13718, i8* %v1_1370c, align 1
  %v0_1371c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1371c.pr, label %bb73, label %.dec_label_pc_13720_crit_edge

.dec_label_pc_13720_crit_edge:                    ; preds = %bb71
  %v0_13720.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13720

dec_label_pc_13720:                               ; preds = %.dec_label_pc_13720_crit_edge, %dec_label_pc_1370c
  %v0_13720 = phi i32 [ %v0_13720.pre, %.dec_label_pc_13720_crit_edge ], [ %v3_1370c, %dec_label_pc_1370c ]
  %v2_13720 = icmp eq i32 %v0_13720, 0
  store i1 %v2_13720, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13720, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_13720
  %v1_13724 = load i32, i32* @fp, align 4
  %v2_13724 = trunc i32 %v1_13724 to i8
  %v3_13724 = load i32, i32* @r4, align 4
  %v4_13724 = inttoptr i32 %v3_13724 to i8*
  store i8 %v2_13724, i8* %v4_13724, align 1
  %v5_13724 = load i32, i32* @r4, align 4
  %v6_13724 = add i32 %v5_13724, 1
  store i32 %v6_13724, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_13720, %bb72
  %v2_13728 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_13728, i32* %r3.global-to-local, align 4
  %v2_1372c = icmp eq i32 %v2_13728, 0
  store i1 %v2_1372c, i1* %cpsr_z.global-to-local, align 1
  %v0_13748.pre = load i32, i32* @r4, align 4
  br i1 %v2_1372c, label %dec_label_pc_13744, label %dec_label_pc_13734

dec_label_pc_13734:                               ; preds = %bb73
  store i32 %v0_13748.pre, i32* @r0, align 4
  %v0_13738 = load i32, i32* @sl, align 4
  %v2_1373c = inttoptr i32 %v0_13748.pre to i8*
  %v3_1373c = call i32 @function_14ad4(i8* %v2_1373c, i32 %v0_13738)
  store i32 %v3_1373c, i32* %r0.global-to-local, align 4
  %v0_13740 = load i32, i32* @r4, align 4
  %v2_13740 = add i32 %v0_13740, %v3_1373c
  store i32 %v2_13740, i32* @r4, align 4
  br label %dec_label_pc_13744

dec_label_pc_13744:                               ; preds = %bb73, %dec_label_pc_13734
  %v0_13748 = phi i32 [ %v2_13740, %dec_label_pc_13734 ], [ %v0_13748.pre, %bb73 ]
  %v0_13744 = load i32, i32* @r6, align 4
  %v1_13744 = add i32 %v0_13744, 1
  store i32 %v1_13744, i32* @r6, align 4
  %v1_13748 = inttoptr i32 %v0_13748 to i8*
  %v2_13748 = load i8, i8* %v1_13748, align 1
  %v3_13748 = zext i8 %v2_13748 to i32
  store i32 %v3_13748, i32* %r2.global-to-local, align 4
  %v2_1374c = icmp eq i8 %v2_13748, 0
  store i1 %v2_1374c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1374c, label %dec_label_pc_13764, label %dec_label_pc_13744.dec_label_pc_13754_crit_edge

dec_label_pc_13744.dec_label_pc_13754_crit_edge:  ; preds = %dec_label_pc_13744
  %v0_13754.pre = load i32, i32* @r7, align 4
  %v1_13754 = inttoptr i32 %v0_13754.pre to i8*
  %v2_13754 = load i8, i8* %v1_13754, align 1
  %v3_13754 = zext i8 %v2_13754 to i32
  store i32 %v3_13754, i32* %r3.global-to-local, align 4
  %v9_13758 = icmp eq i8 %v2_13754, %v2_13748
  store i1 %v9_13758, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13758, label %dec_label_pc_13764, label %bb74

bb74:                                             ; preds = %dec_label_pc_13754.preheader, %dec_label_pc_13744.dec_label_pc_13754_crit_edge
  %v2_136a088 = phi i32 [ %v1_13744, %dec_label_pc_13744.dec_label_pc_13754_crit_edge ], [ %v1_13684, %dec_label_pc_13754.preheader ]
  %v0_136a087 = phi i32 [ %v0_13748, %dec_label_pc_13744.dec_label_pc_13754_crit_edge ], [ %v0_1374813, %dec_label_pc_13754.preheader ]
  %v2_1375c = load i32, i32* @sb, align 4
  %v3_1375c = sub i32 %v2_136a088, %v2_1375c
  %v5_1375c = xor i32 %v2_1375c, %v2_136a088
  %v6_1375c = xor i32 %v3_1375c, %v2_136a088
  %v7_1375c = and i32 %v6_1375c, %v5_1375c
  %v8_1375c = icmp slt i32 %v7_1375c, 0
  %v9_1375c = icmp slt i32 %v3_1375c, 0
  %v10_1375c = icmp eq i32 %v2_136a088, %v2_1375c
  store i1 %v10_1375c, i1* %cpsr_z.global-to-local, align 1
  %v2_13760 = xor i1 %v9_1375c, %v8_1375c
  br i1 %v2_13760, label %dec_label_pc_13690, label %dec_label_pc_13764

dec_label_pc_13764:                               ; preds = %dec_label_pc_13754.preheader, %bb74, %dec_label_pc_13744, %dec_label_pc_13744.dec_label_pc_13754_crit_edge, %dec_label_pc_13748.preheader
  %v0_13768 = phi i32 [ %v1_13684, %dec_label_pc_13748.preheader ], [ %v1_13684, %dec_label_pc_13754.preheader ], [ %v2_136a088, %bb74 ], [ %v1_13744, %dec_label_pc_13744 ], [ %v1_13744, %dec_label_pc_13744.dec_label_pc_13754_crit_edge ]
  store i32 %v3_13488, i32* %r2.global-to-local, align 4
  %v9_13768 = icmp eq i32 %v0_13768, %v3_13488
  store i1 %v9_13768, i1* %cpsr_z.global-to-local, align 1
  %v6_1376c = icmp slt i32 %v0_13768, %v3_13488
  br i1 %v6_1376c, label %dec_label_pc_13770, label %dec_label_pc_1377c

dec_label_pc_13770:                               ; preds = %dec_label_pc_13764
  %v0_13770 = load i32, i32* @r8, align 4
  %v1_13770 = and i32 %v0_13770, 1048576
  %v2_13770 = icmp eq i32 %v1_13770, 0
  store i1 %v2_13770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13770, label %dec_label_pc_134c8.backedge, label %dec_label_pc_13778

dec_label_pc_13778:                               ; preds = %dec_label_pc_13770, %dec_label_pc_13630, %.thread, %dec_label_pc_13464
  br label %dec_label_pc_1377c

dec_label_pc_1377c:                               ; preds = %dec_label_pc_13764, %dec_label_pc_1354c, %dec_label_pc_13778
  %v0_1377c = phi i32 [ %v0_1355c, %dec_label_pc_1354c ], [ 0, %dec_label_pc_13778 ], [ %v0_13768, %dec_label_pc_13764 ]
  store i32 %v0_1377c, i32* %r0.global-to-local, align 4
  store i32 %v3_13464, i32* @r4, align 4
  store i32 %v6_13464, i32* @r5, align 4
  store i32 %v9_13464, i32* @r6, align 4
  store i32 %v12_13464, i32* @r7, align 4
  store i32 %v15_13464, i32* @r8, align 4
  store i32 %v18_13464, i32* @sb, align 4
  store i32 %v21_13464, i32* @sl, align 4
  store i32 %v24_13464, i32* @fp, align 4
  ret i32 %v0_1377c

; uselistorder directives
  uselistorder i32 %v0_1377c, { 1, 0 }
  uselistorder i32 %v0_13768, { 0, 2, 1 }
  uselistorder i32 %v3_1375c, { 1, 0 }
  uselistorder i32 %v2_1375c, { 1, 0, 2 }
  uselistorder i32 %v2_136a088, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_13758, { 1, 0 }
  uselistorder i32 %v0_13748.pre, { 0, 2, 1 }
  uselistorder i32 %v5_136dc, { 1, 0, 2, 3 }
  uselistorder i1 %v9_1375886, { 1, 0 }
  uselistorder i1 %v9_13680, { 1, 0 }
  uselistorder i32 %v3_13658, { 0, 2, 1, 3 }
  uselistorder i1 %v7_13630, { 1, 0 }
  uselistorder i1 %v8_13628, { 1, 0 }
  uselistorder i32 %v3_135f8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_135e8, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v5_135d0, { 1, 0, 2 }
  uselistorder i32 %v1_135c0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_135ac, { 0, 2, 1, 3 }
  uselistorder i32 %v1_135a4, { 1, 0 }
  uselistorder i32 %v1_13590, { 1, 0 }
  uselistorder i32 %v1_1358c, { 1, 0 }
  uselistorder i32 %v1_1354c, { 2, 0, 1 }
  uselistorder i32 %v0_13534, { 1, 0 }
  uselistorder i32 %v1_13524, { 0, 2, 1 }
  uselistorder i1 %v2_13654, { 1, 0, 2, 3 }
  uselistorder i32 %v1_134b0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_134a4, { 2, 1, 0 }
  uselistorder i32 %v3_1348c, { 1, 0 }
  uselistorder i32 %v3_13488, { 2, 1, 0 }
  uselistorder i32 %v1_13480, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 25, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 16, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 33, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 (i32*, i32, i32, i32)* @function_1165c, { 0, 2, 1, 5, 6, 7, 8, 9, 10, 11, 3, 4 }
  uselistorder i32 92, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 (i32)* @function_14a10, { 1, 0 }
  uselistorder i32* @sl, { 5, 6, 7, 8, 9, 10, 11, 41, 0, 42, 43, 12, 13, 118, 119, 120, 121, 122, 123, 126, 127, 128, 1, 129, 130, 131, 132, 133, 134, 136, 2, 135, 138, 137, 139, 140, 141, 142, 14, 15, 16, 17, 18, 19, 27, 28, 23, 24, 25, 26, 20, 21, 22, 29, 30, 31, 32, 33, 34, 37, 35, 36, 3, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 113, 114, 116, 117, 143, 146, 144, 145, 147, 148, 125, 124, 4 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_1377c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13764, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_13744, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_136f8, { 1, 0 }
  uselistorder label %dec_label_pc_134c8.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13670, { 1, 0 }
  uselistorder label %dec_label_pc_13630, { 1, 0 }
  uselistorder label %dec_label_pc_13624, { 0, 2, 1 }
  uselistorder label %dec_label_pc_135e8, { 1, 0 }
  uselistorder label %dec_label_pc_1351c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_1378c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1378c:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_13790 = icmp eq i32* %arg1, null
  br i1 %v2_13790, label %dec_label_pc_137b8, label %dec_label_pc_13798

dec_label_pc_13798:                               ; preds = %dec_label_pc_1378c
  %v2_13798 = load i32, i32* %arg1, align 4
  %v1_1379c = inttoptr i32 %v2_13798 to i16*
  %v2_1379c = call i32 @function_13808(i16* %v1_1379c)
  %v0_137a0 = load i32, i32* @r4, align 4
  %v1_137a0 = add i32 %v0_137a0, 20
  %v2_137a0 = inttoptr i32 %v1_137a0 to i32*
  %v3_137a0 = load i32, i32* %v2_137a0, align 4
  %v2_137a4 = icmp eq i32 %v3_137a0, 0
  br i1 %v2_137a4, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_13798
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_13798, %bb
  store i32 79792, i32* @lr, align 4
  %v1_137ac = xor i1 %v2_137a4, true
  call void @__pseudo_cond_branch(i1 %v1_137ac, i32 ptrtoint (i32* @global_var_11c74.16 to i32))
  %v0_137b0 = load i32, i32* @r4, align 4
  store i32 %v0_137b0, i32* @r0, align 4
  %v0_137b4 = call i32 @function_11c74()
  br label %dec_label_pc_137b8

dec_label_pc_137b8:                               ; preds = %dec_label_pc_1378c, %bb6
  %v1_137bc = phi i32 [ 0, %dec_label_pc_1378c ], [ %v0_137b4, %bb6 ]
  ret i32 %v1_137bc

; uselistorder directives
  uselistorder i32* null, { 0, 4, 5, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 2, 17, 18, 19, 20, 21, 7, 22, 23, 24, 25, 26, 3, 27, 28, 29 }
  uselistorder label %dec_label_pc_137b8, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_137c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_137c0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_137cc = load i32, i32* @r4, align 4
  store i32 %v3_137cc, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_153d4.454 to i32), i32* @r1, align 4
  %v0_137d4 = call i32 @function_139bc()
  store i32 %v0_137d4, i32* %r0.global-to-local, align 4
  store i32 %v0_137d4, i32* @r4, align 4
  %v2_137d8 = icmp eq i32 %v0_137d4, 0
  br i1 %v2_137d8, label %bb, label %dec_label_pc_137e4

bb:                                               ; preds = %dec_label_pc_137c0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_137e4:                               ; preds = %dec_label_pc_137c0
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_137ec = call i32 @function_11528(i32 1, i32 24)
  store i32 %v2_137ec, i32* %r0.global-to-local, align 4
  %v2_137f0 = icmp eq i32 %v2_137ec, 0
  br i1 %v2_137f0, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_137e4
  %v1_137f4 = load i32, i32* @r4, align 4
  %v3_137f4 = inttoptr i32 %v2_137ec to i32*
  store i32 %v1_137f4, i32* %v3_137f4, align 4
  %v1_137fc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_137e4, %bb4
  %v1_137fc = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_137e4 ], [ %v1_137fc.pre, %bb4 ]
  %v2_137f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137f8, i32* @r4, align 4
  ret i32 %v1_137fc

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 0, 4 }
  uselistorder i32 (i32, i32)* @function_11528, { 35, 32, 33, 34, 31, 14, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 1, 0, 7, 6, 5, 4, 3, 2, 13, 12, 11, 10, 9, 8 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_13808(i16* %arg1) local_unnamed_addr {
dec_label_pc_13808:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13808 = load i32, i32* @r4, align 4
  store i32 %v3_13808, i32* %stack_var_-36, align 4
  %v6_13808 = load i32, i32* @r5, align 4
  %v9_13808 = load i32, i32* @r6, align 4
  %v12_13808 = load i32, i32* @r7, align 4
  %v2_1380c = add i32 %tmp, 52
  %v3_1380c = inttoptr i32 %v2_1380c to i32*
  %v4_1380c = load i32, i32* %v3_1380c, align 4
  %v1_13814 = sub i32 1, %v4_1380c
  %v2_13814 = icmp ult i32 %v4_1380c, 2
  br i1 %v2_13814, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_13808
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_13808, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_13814, %dec_label_pc_13808 ]
  %v0_1381c = phi i32 [ 0, %bb ], [ %v1_13814, %dec_label_pc_13808 ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_1381c = icmp eq i32 %v0_1381c, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 121092, i32* @r6, align 4
  br i1 %v2_1381c, label %dec_label_pc_13868, label %dec_label_pc_13830

dec_label_pc_13830:                               ; preds = %bb18
  %v4_13848 = load i32, i32* inttoptr (i32 121164 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_13848)
  %v0_1385c = load i32, i32* @r6, align 4
  %v2_1385c = add i32 %v0_1385c, 16
  %v3_1385c = inttoptr i32 %v2_1385c to i32*
  %v4_1385c = load i32, i32* %v3_1385c, align 4
  call void @__pseudo_branch(i32 %v4_1385c)
  %v0_13868.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13868

dec_label_pc_13868:                               ; preds = %bb18, %dec_label_pc_13830
  %v1_13870 = phi i32 [ %tmp, %bb18 ], [ %v0_13868.pre, %dec_label_pc_13830 ]
  %v1_13868 = inttoptr i32 %v1_13870 to i16*
  %v2_13868 = load i16, i16* %v1_13868, align 2
  %v3_13868 = zext i16 %v2_13868 to i32
  %v1_1386c = and i32 %v3_13868, 64
  %v2_1386c = icmp eq i32 %v1_1386c, 0
  br i1 %v2_1386c, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_13868
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_13868, %bb19
  %storemerge26 = phi i32 [ %v1_13870, %bb19 ], [ %v1_1386c, %dec_label_pc_13868 ]
  %v1_13874 = xor i1 %v2_1386c, true
  call void @__pseudo_cond_branch(i1 %v1_13874, i32 ptrtoint (i32* @global_var_141a4.459 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_1387c = load i32, i32* @r5, align 4
  %v1_1387c = add i32 %v0_1387c, 4
  %v2_1387c = inttoptr i32 %v1_1387c to i32*
  %v3_1387c = load i32, i32* %v2_1387c, align 4
  %v1_13880 = call i32 @function_101d8(i32 %v3_1387c)
  %v0_13888 = load i32, i32* @r6, align 4
  %v2_13894 = add i32 %v0_13888, 108
  %v3_13894 = inttoptr i32 %v2_13894 to i32*
  %v4_13894 = load i32, i32* %v3_13894, align 4
  store i32 %v4_13894, i32* @r7, align 4
  %v1_1389c = load i32, i32* @r5, align 4
  %v2_1389c = add i32 %v1_1389c, 4
  %v3_1389c = inttoptr i32 %v2_1389c to i32*
  store i32 -1, i32* %v3_1389c, align 4
  %v0_138a4 = load i32, i32* @r6, align 4
  %v2_138a4 = add i32 %v0_138a4, 72
  %v3_138a4 = inttoptr i32 %v2_138a4 to i32*
  %v4_138a4 = load i32, i32* %v3_138a4, align 4
  %v1_138ac = icmp slt i32 %v1_13880, 0
  store i32 %v4_138a4, i32* %stack_var_-80, align 4
  br i1 %v1_138ac, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_138a4)
  %v0_138d4 = load i32, i32* @r6, align 4
  %v2_138d4 = add i32 %v0_138d4, 16
  %v3_138d4 = inttoptr i32 %v2_138d4 to i32*
  %v4_138d4 = load i32, i32* %v3_138d4, align 4
  call void @__pseudo_branch(i32 %v4_138d4)
  %v0_138e4 = load i32, i32* @r6, align 4
  %v2_138e4 = add i32 %v0_138e4, 12
  %v3_138e4 = inttoptr i32 %v2_138e4 to i32*
  %v4_138e4 = load i32, i32* %v3_138e4, align 4
  %v1_138e8 = inttoptr i32 %v4_138e4 to i32*
  %v2_138e8 = load i32, i32* %v1_138e8, align 4
  %v1_138f0 = add i32 %v2_138e8, 1
  %v2_138f4 = add i32 %v0_138e4, 24
  %v3_138f4 = inttoptr i32 %v2_138f4 to i32*
  %v4_138f4 = load i32, i32* %v3_138f4, align 4
  store i32 %v4_138f4, i32* @r4, align 4
  store i32 %v1_138f0, i32* %v1_138e8, align 4
  call void @__pseudo_branch(i32 %v4_138f4)
  %v0_1390c = load i32, i32* @r5, align 4
  %v1_1390c = inttoptr i32 %v0_1390c to i16*
  %v2_1390c = load i16, i16* %v1_1390c, align 2
  %v1_13910 = and i16 %v2_1390c, 24576
  %v1_13914 = or i16 %v1_13910, 48
  %v0_13918 = load i32, i32* %sb.global-to-local, align 4
  %v2_13918 = icmp eq i32 %v0_13918, 0
  store i16 %v1_13914, i16* %v1_1390c, align 2
  br i1 %v2_13918, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_1392c = xor i1 %v2_13918, true
  call void @__pseudo_cond_branch(i1 %v2_1392c, i32 %v4_138f4)
  %v0_13930 = load i32, i32* @r5, align 4
  %v1_13930 = inttoptr i32 %v0_13930 to i16*
  %v2_13930 = load i16, i16* %v1_13930, align 2
  %v1_13934 = and i16 %v2_13930, 16384
  %v2_13934 = icmp eq i16 %v1_13934, 0
  br i1 %v2_13934, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_1393c = xor i1 %v2_13934, true
  call void @__pseudo_cond_branch(i1 %v1_1393c, i32 ptrtoint (i32* @global_var_11c74.16 to i32))
  %v2_13948 = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_13948)
  call void @__pseudo_branch(i32 %v4_138d4)
  %v0_13968 = load i32, i32* @r6, align 4
  %v2_13968 = add i32 %v0_13968, 48
  %v3_13968 = inttoptr i32 %v2_13968 to i32*
  %v4_13968 = load i32, i32* %v3_13968, align 4
  %v1_1396c = inttoptr i32 %v4_13968 to i32*
  %v2_1396c = load i32, i32* %v1_1396c, align 4
  %v1_13970 = add i32 %v2_1396c, 1
  store i32 %v1_13970, i32* %v1_1396c, align 4
  call void @__pseudo_branch(i32 %v4_138f4)
  %v0_13988 = call i32 @function_1401c()
  %v0_1398c = load i32, i32* %sl.global-to-local, align 4
  %v2_13994 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13994, i32* @r4, align 4
  store i32 %v6_13808, i32* @r5, align 4
  store i32 %v9_13808, i32* @r6, align 4
  store i32 %v12_13808, i32* @r7, align 4
  ret i32 %v0_1398c

; uselistorder directives
  uselistorder i1 %v2_13934, { 1, 0 }
  uselistorder i32 %v4_138f4, { 0, 2, 1, 3 }
  uselistorder i32 %v4_1380c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_101d8, { 29, 23, 28, 27, 22, 26, 25, 21, 20, 19, 24, 18, 17, 3, 2, 1, 16, 15, 14, 13, 12, 11, 4, 10, 9, 8, 7, 6, 5, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_13868, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_139a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_139a0:
  %v0_139a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_139a0, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_139a0
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_139a0, %bb
  %v10_139b8 = phi i32 [ %arg1, %dec_label_pc_139a0 ], [ 0, %bb ]
  ret i32 %v10_139b8

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_139bc() local_unnamed_addr {
dec_label_pc_139bc:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_139cc = call i32 @function_139dc()
  ret i32 %v0_139cc
}

define i32 @function_139dc() local_unnamed_addr {
dec_label_pc_139dc:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_139dc = load i32, i32* @r4, align 4
  store i32 %v3_139dc, i32* %stack_var_-36, align 4
  %v6_139dc = load i32, i32* @r5, align 4
  %v9_139dc = load i32, i32* @r6, align 4
  %v18_139dc = load i32, i32* @sb, align 4
  %v24_139dc = load i32, i32* @fp, align 4
  %v0_139e0 = load i32, i32* @r1, align 4
  %v1_139e0 = inttoptr i32 %v0_139e0 to i8*
  %v2_139e0 = load i8, i8* %v1_139e0, align 1
  %v3_139e0 = zext i8 %v2_139e0 to i32
  store i32 %v3_139e0, i32* @ip, align 4
  %v7_139e8 = icmp eq i8 %v2_139e0, 114
  store i32 121092, i32* @fp, align 4
  %v2_139f0 = ptrtoint i32* %stack_var_-72 to i32
  %v0_139f4 = load i32, i32* @r0, align 4
  store i32 %v0_139f4, i32* @r6, align 4
  %v0_139f8 = load i32, i32* @r2, align 4
  store i32 %v0_139f8, i32* @sb, align 4
  %v0_139fc = load i32, i32* @r3, align 4
  store i32 %v0_139fc, i32* @r5, align 4
  br i1 %v7_139e8, label %dec_label_pc_13a48, label %dec_label_pc_13a04

dec_label_pc_13a04:                               ; preds = %dec_label_pc_139dc
  %v7_13a04 = icmp eq i8 %v2_139e0, 119
  br i1 %v7_13a04, label %bb, label %dec_label_pc_13a10

bb:                                               ; preds = %dec_label_pc_13a04
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_13a4c

dec_label_pc_13a10:                               ; preds = %dec_label_pc_13a04
  %v7_13a10 = icmp eq i8 %v2_139e0, 97
  br i1 %v7_13a10, label %bb32, label %dec_label_pc_13a1c

bb32:                                             ; preds = %dec_label_pc_13a10
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_13a4c

dec_label_pc_13a1c:                               ; preds = %dec_label_pc_13a10, %dec_label_pc_13ad0, %dec_label_pc_13aa4
  %v0_13a1c = call i32 @function_10600()
  store i32 %v0_13a1c, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_13a24 = load i32, i32* @sb, align 4
  %v2_13a24 = icmp eq i32 %v0_13a24, 0
  %v2_13a28 = inttoptr i32 %v0_13a1c to i32*
  store i32 22, i32* %v2_13a28, align 4
  br i1 %v2_13a24, label %dec_label_pc_13c9c, label %dec_label_pc_13a30

dec_label_pc_13a30:                               ; preds = %dec_label_pc_13af4._crit_edge, %dec_label_pc_13a1c
  %v0_13a30 = load i32, i32* @sb, align 4
  %v1_13a30 = inttoptr i32 %v0_13a30 to i16*
  %v2_13a30 = load i16, i16* %v1_13a30, align 2
  %v3_13a30 = zext i16 %v2_13a30 to i32
  store i32 %v3_13a30, i32* %r3.global-to-local, align 4
  %v1_13a34 = and i32 %v3_13a30, 8192
  %v2_13a34 = icmp eq i32 %v1_13a34, 0
  br i1 %v2_13a34, label %dec_label_pc_13c9c, label %dec_label_pc_13a3c

dec_label_pc_13a3c:                               ; preds = %dec_label_pc_13a30
  store i32 %v0_13a30, i32* @r0, align 4
  %v0_13a40 = call i32 @function_11c74()
  store i32 %v0_13a40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13c9c

dec_label_pc_13a48:                               ; preds = %dec_label_pc_139dc
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13a4c

dec_label_pc_13a4c:                               ; preds = %bb, %bb32, %dec_label_pc_13a48
  %v1_13a64 = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_13a48 ]
  %v1_13a4c = add i32 %v0_139e0, 1
  %v2_13a4c = inttoptr i32 %v1_13a4c to i8*
  %v3_13a4c = load i8, i8* %v2_13a4c, align 1
  %v7_13a50 = icmp eq i8 %v3_13a4c, 98
  %v1_13a4c.v0_139e0 = select i1 %v7_13a50, i32 %v1_13a4c, i32 %v0_139e0
  store i32 %v1_13a4c.v0_139e0, i32* %r3.global-to-local, align 4
  %v1_13a5c = add i32 %v1_13a4c.v0_139e0, 1
  %v2_13a5c = inttoptr i32 %v1_13a5c to i8*
  %v3_13a5c = load i8, i8* %v2_13a5c, align 1
  %v4_13a5c = zext i8 %v3_13a5c to i32
  store i32 %v4_13a5c, i32* @r3, align 4
  %v7_13a60 = icmp eq i8 %v3_13a5c, 43
  br i1 %v7_13a60, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_13a4c
  store i32 %v1_13a64, i32* @r3, align 4
  %v2_13a68 = add nuw nsw i32 %v1_13a64, 1
  store i32 %v2_13a68, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_13a4c, %bb35
  %v2_13a6c = icmp eq i32 %v0_139f8, 0
  br i1 %v2_13a6c, label %dec_label_pc_13a74, label %dec_label_pc_13a9c

dec_label_pc_13a74:                               ; preds = %.thread3
  store i32 80, i32* @r0, align 4
  %v0_13a78 = call i32 @function_10c08()
  store i32 %v0_13a78, i32* %r0.global-to-local, align 4
  store i32 %v0_13a78, i32* @sb, align 4
  %v3_13a7c = icmp eq i32 %v0_13a78, 0
  br i1 %v3_13a7c, label %dec_label_pc_13ca0, label %dec_label_pc_13a84

dec_label_pc_13a84:                               ; preds = %dec_label_pc_13a74
  %v2_13a88 = add i32 %v0_13a78, 8
  %v3_13a88 = inttoptr i32 %v2_13a88 to i32*
  store i32 0, i32* %v3_13a88, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_13a90 = load i32, i32* @sb, align 4
  %v3_13a90 = inttoptr i32 %v2_13a90 to i16*
  store i16 8192, i16* %v3_13a90, align 2
  %v0_13a94 = load i32, i32* @sb, align 4
  %v1_13a94 = add i32 %v0_13a94, 56
  store i32 %v1_13a94, i32* @r0, align 4
  %v1_13a98 = call i32 @function_13d4c(i32 %v1_13a94)
  store i32 %v1_13a98, i32* %r0.global-to-local, align 4
  %v0_13a9c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13a9c

dec_label_pc_13a9c:                               ; preds = %.thread3, %dec_label_pc_13a84
  %v0_13af4 = phi i32 [ %v0_139fc, %.thread3 ], [ %v0_13a9c.pre, %dec_label_pc_13a84 ]
  %v1_13a9c = icmp slt i32 %v0_13af4, 0
  br i1 %v1_13a9c, label %dec_label_pc_13af4, label %dec_label_pc_13aa4

dec_label_pc_13aa4:                               ; preds = %dec_label_pc_13a9c
  %v0_13aa8 = load i32, i32* @r4, align 4
  %v2_13aa8 = and i32 %v0_13aa8, 131075
  %v1_13aac = add nuw nsw i32 %v2_13aa8, 1
  store i32 %v1_13aac, i32* %r2.global-to-local, align 4
  %v0_13ab0 = load i32, i32* @r6, align 4
  %v1_13ab0 = add i32 %v0_13ab0, 1
  %v2_13ab4 = and i32 %v1_13ab0, %v1_13aac
  store i32 %v2_13ab4, i32* %r3.global-to-local, align 4
  %v9_13ab8 = icmp eq i32 %v2_13ab4, %v1_13aac
  %v1_13abc = load i32, i32* @sb, align 4
  %v2_13abc = add i32 %v1_13abc, 4
  %v3_13abc = inttoptr i32 %v2_13abc to i32*
  store i32 %v0_13af4, i32* %v3_13abc, align 4
  br i1 %v9_13ab8, label %dec_label_pc_13ac4, label %dec_label_pc_13a1c

dec_label_pc_13ac4:                               ; preds = %dec_label_pc_13aa4
  %v0_13ac4 = load i32, i32* @r4, align 4
  %v1_13ac4 = load i32, i32* @r6, align 4
  %v2_13ac4 = sub i32 -1, %v1_13ac4
  %v3_13ac4 = and i32 %v0_13ac4, %v2_13ac4
  store i32 %v3_13ac4, i32* @r3, align 4
  %v1_13ac8 = and i32 %v3_13ac4, 1024
  %v2_13ac8 = icmp eq i32 %v1_13ac8, 0
  br i1 %v2_13ac8, label %dec_label_pc_13ae8, label %dec_label_pc_13ad0

dec_label_pc_13ad0:                               ; preds = %dec_label_pc_13ac4
  %v0_13ad0 = load i32, i32* @r5, align 4
  store i32 %v0_13ad0, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_13adc = call i32 @function_1000c(i32 %v0_13ad0, i32 4)
  store i32 %v2_13adc, i32* %r0.global-to-local, align 4
  %v2_13ae0 = icmp eq i32 %v2_13adc, 0
  br i1 %v2_13ae0, label %dec_label_pc_13ad0.dec_label_pc_13ae8_crit_edge, label %dec_label_pc_13a1c

dec_label_pc_13ad0.dec_label_pc_13ae8_crit_edge:  ; preds = %dec_label_pc_13ad0
  %v0_13ae8.pre = load i32, i32* @r6, align 4
  %v0_13aec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13ae8

dec_label_pc_13ae8:                               ; preds = %dec_label_pc_13ad0.dec_label_pc_13ae8_crit_edge, %dec_label_pc_13ac4
  %v0_13aec = phi i32 [ %v0_13aec.pre, %dec_label_pc_13ad0.dec_label_pc_13ae8_crit_edge ], [ %v0_13ac4, %dec_label_pc_13ac4 ]
  %v0_13ae8 = phi i32 [ %v0_13ae8.pre, %dec_label_pc_13ad0.dec_label_pc_13ae8_crit_edge ], [ %v1_13ac4, %dec_label_pc_13ac4 ]
  %v1_13ae8 = and i32 %v0_13ae8, 131072
  store i32 %v1_13ae8, i32* %r3.global-to-local, align 4
  %v2_13aec = or i32 %v1_13ae8, %v0_13aec
  store i32 %v2_13aec, i32* @r4, align 4
  br label %dec_label_pc_13b18

dec_label_pc_13af4:                               ; preds = %dec_label_pc_13a9c
  %v7_13af4 = icmp eq i32 %v0_13af4, -1
  %v0_13b00.pre = load i32, i32* @r4, align 4
  br i1 %v7_13af4, label %dec_label_pc_13af4._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_13af4
  %v2_13af8 = or i32 %v0_13b00.pre, 131072
  store i32 %v2_13af8, i32* @r4, align 4
  br label %dec_label_pc_13af4._crit_edge

dec_label_pc_13af4._crit_edge:                    ; preds = %dec_label_pc_13af4, %bb36
  %v0_13b00 = phi i32 [ %v2_13af8, %bb36 ], [ %v0_13b00.pre, %dec_label_pc_13af4 ]
  %v0_13afc = load i32, i32* @r6, align 4
  store i32 %v0_13afc, i32* %r0.global-to-local, align 4
  store i32 %v0_13b00, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_13b08 = call i32 @function_fde4(i32 %v0_13afc, i32 %v0_13b00)
  store i32 %v2_13b08, i32* %r0.global-to-local, align 4
  %v1_13b0c = icmp slt i32 %v2_13b08, 0
  %v1_13b10 = load i32, i32* @sb, align 4
  %v2_13b10 = add i32 %v1_13b10, 4
  %v3_13b10 = inttoptr i32 %v2_13b10 to i32*
  store i32 %v2_13b08, i32* %v3_13b10, align 4
  br i1 %v1_13b0c, label %dec_label_pc_13a30, label %.dec_label_pc_13b18_crit_edge

.dec_label_pc_13b18_crit_edge:                    ; preds = %dec_label_pc_13af4._crit_edge
  %v0_13b1c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13b18

dec_label_pc_13b18:                               ; preds = %.dec_label_pc_13b18_crit_edge, %dec_label_pc_13ae8
  %v0_13b34 = phi i32 [ %v0_13b1c.pre, %.dec_label_pc_13b18_crit_edge ], [ %v2_13aec, %dec_label_pc_13ae8 ]
  %v0_13b18 = load i32, i32* @sb, align 4
  %v1_13b18 = inttoptr i32 %v0_13b18 to i16*
  %v2_13b18 = load i16, i16* %v1_13b18, align 2
  %v3_13b18 = zext i16 %v2_13b18 to i32
  %v1_13b1c = urem i32 %v0_13b34, 4
  %v1_13b20 = and i32 %v0_13b34, 1024
  %v1_13b24 = and i32 %v3_13b18, 8192
  %v1_13b28 = add nuw nsw i32 %v1_13b1c, 1
  %v2_13b2c = or i32 %v1_13b24, %v1_13b20
  store i32 %v2_13b2c, i32* %r3.global-to-local, align 4
  %v1_13b30 = xor i32 %v1_13b28, 3
  store i32 %v1_13b30, i32* %r1.global-to-local, align 4
  %v1_13b34 = and i32 %v0_13b34, 131072
  store i32 %v1_13b34, i32* %r2.global-to-local, align 4
  %v2_13b34 = icmp eq i32 %v1_13b34, 0
  %v1_13b38 = add i32 %v0_13b18, 4
  %v2_13b38 = inttoptr i32 %v1_13b38 to i32*
  %v3_13b38 = load i32, i32* %v2_13b38, align 4
  store i32 %v3_13b38, i32* @r5, align 4
  br i1 %v2_13b34, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_13b18
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_13b18, %bb37
  %v0_13b44 = phi i32 [ 0, %dec_label_pc_13b18 ], [ 32768, %bb37 ]
  %v4_13b40 = mul nuw nsw i32 %v1_13b30, 16
  %v5_13b40 = or i32 %v2_13b2c, %v4_13b40
  store i32 %v5_13b40, i32* %r3.global-to-local, align 4
  %v2_13b44 = or i32 %v0_13b44, %v5_13b40
  store i32 %v2_13b44, i32* %r2.global-to-local, align 4
  %v8_13b48 = icmp eq i32 %v3_13b38, 2147483647
  %v1_13b4c = trunc i32 %v2_13b44 to i16
  store i16 %v1_13b4c, i16* %v1_13b18, align 2
  br i1 %v8_13b48, label %dec_label_pc_13b7c, label %dec_label_pc_13b54

dec_label_pc_13b54:                               ; preds = %bb38
  %v0_13b54 = call i32 @function_10600()
  store i32 %v0_13b54, i32* @r4, align 4
  %v0_13b5c = load i32, i32* @r5, align 4
  store i32 %v0_13b5c, i32* @r0, align 4
  %v1_13b60 = inttoptr i32 %v0_13b54 to i32*
  %v2_13b60 = load i32, i32* %v1_13b60, align 4
  store i32 %v2_13b60, i32* @r5, align 4
  %v1_13b64 = call i32 @function_14d4c(i32 %v0_13b5c)
  store i32 %v1_13b64, i32* %r0.global-to-local, align 4
  %v2_13b68 = icmp eq i32 %v1_13b64, 0
  br i1 %v2_13b68, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_13b54
  %v1_13b6c = load i32, i32* @sb, align 4
  %v2_13b6c = inttoptr i32 %v1_13b6c to i16*
  %v3_13b6c = load i16, i16* %v2_13b6c, align 2
  %v4_13b6c = zext i16 %v3_13b6c to i32
  %v2_13b70 = or i32 %v4_13b6c, 256
  store i32 %v2_13b70, i32* %r3.global-to-local, align 4
  %v2_13b74 = trunc i32 %v2_13b70 to i16
  store i16 %v2_13b74, i16* %v2_13b6c, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_13b54, %bb39
  %v0_13b78 = load i32, i32* @r5, align 4
  %v1_13b78 = load i32, i32* @r4, align 4
  %v2_13b78 = inttoptr i32 %v1_13b78 to i32*
  store i32 %v0_13b78, i32* %v2_13b78, align 4
  br label %dec_label_pc_13b7c

dec_label_pc_13b7c:                               ; preds = %bb38, %.thread5
  %v0_13b7c = load i32, i32* @sb, align 4
  %v1_13b7c = add i32 %v0_13b7c, 8
  %v2_13b7c = inttoptr i32 %v1_13b7c to i32*
  %v3_13b7c = load i32, i32* %v2_13b7c, align 4
  store i32 %v3_13b7c, i32* %r3.global-to-local, align 4
  %v2_13b80 = icmp eq i32 %v3_13b7c, 0
  br i1 %v2_13b80, label %dec_label_pc_13b88, label %bb40

dec_label_pc_13b88:                               ; preds = %dec_label_pc_13b7c
  store i32 4096, i32* @r0, align 4
  %v0_13b8c = call i32 @function_10c08()
  store i32 %v0_13b8c, i32* %r0.global-to-local, align 4
  %v2_13b90 = icmp eq i32 %v0_13b8c, 0
  %v1_13ba0.pre = load i32, i32* @sb, align 4
  br i1 %v2_13b90, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13b88
  %v2_13b94 = inttoptr i32 %v1_13ba0.pre to i16*
  %v3_13b94 = load i16, i16* %v2_13b94, align 2
  %v4_13b94 = zext i16 %v3_13b94 to i32
  %v2_13b98 = add i32 %v0_13b8c, 4096
  store i32 %v2_13b98, i32* %r2.global-to-local, align 4
  %v2_13b9c = or i32 %v4_13b94, 16384
  store i32 %v2_13b9c, i32* %r3.global-to-local, align 4
  %v2_13ba0 = add i32 %v1_13ba0.pre, 8
  %v3_13ba0 = inttoptr i32 %v2_13ba0 to i32*
  store i32 %v0_13b8c, i32* %v3_13ba0, align 4
  %v1_13ba4 = load i32, i32* %r2.global-to-local, align 4
  %v2_13ba4 = load i32, i32* @sb, align 4
  %v3_13ba4 = add i32 %v2_13ba4, 12
  %v4_13ba4 = inttoptr i32 %v3_13ba4 to i32*
  store i32 %v1_13ba4, i32* %v4_13ba4, align 4
  %v1_13ba8 = load i32, i32* %r3.global-to-local, align 4
  %v2_13ba8 = trunc i32 %v1_13ba8 to i16
  %v3_13ba8 = load i32, i32* @sb, align 4
  %v4_13ba8 = inttoptr i32 %v3_13ba8 to i16*
  store i16 %v2_13ba8, i16* %v4_13ba8, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_13b88
  %v2_13ba019 = add i32 %v1_13ba0.pre, 8
  %v3_13ba020 = inttoptr i32 %v2_13ba019 to i32*
  store i32 0, i32* %v3_13ba020, align 4
  %v2_13bac = load i32, i32* @sb, align 4
  %v3_13bac = add i32 %v2_13bac, 12
  %v4_13bac = inttoptr i32 %v3_13bac to i32*
  store i32 0, i32* %v4_13bac, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_13b7c, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_13bb8 = load i32, i32* @fp, align 4
  %v2_13bb8 = add i32 %v0_13bb8, 56
  %v3_13bb8 = inttoptr i32 %v2_13bb8 to i32*
  %v4_13bb8 = load i32, i32* %v3_13bb8, align 4
  store i32 %v4_13bb8, i32* %r3.global-to-local, align 4
  %v2_13bbc = load i32, i32* @sb, align 4
  %v3_13bbc = add i32 %v2_13bbc, 2
  %v4_13bbc = inttoptr i32 %v3_13bbc to i8*
  store i8 0, i8* %v4_13bbc, align 1
  %v0_13bc0 = load i32, i32* @sb, align 4
  %v1_13bc0 = inttoptr i32 %v0_13bc0 to i16*
  %v2_13bc0 = load i16, i16* %v1_13bc0, align 2
  %v3_13bc0 = zext i16 %v2_13bc0 to i32
  store i32 %v3_13bc0, i32* %r2.global-to-local, align 4
  %v0_13bc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_13bc4 = inttoptr i32 %v0_13bc4 to i32*
  %v2_13bc4 = load i32, i32* %v1_13bc4, align 4
  store i32 %v2_13bc4, i32* %r1.global-to-local, align 4
  %v1_13bc8 = add i32 %v0_13bc0, 8
  %v2_13bc8 = inttoptr i32 %v1_13bc8 to i32*
  %v3_13bc8 = load i32, i32* %v2_13bc8, align 4
  store i32 %v3_13bc8, i32* %r3.global-to-local, align 4
  %v1_13bcc = and i32 %v3_13bc0, 8192
  %v2_13bcc = icmp eq i32 %v1_13bcc, 0
  %v2_13bd0 = add i32 %v0_13bc0, 20
  %v3_13bd0 = inttoptr i32 %v2_13bd0 to i32*
  store i32 %v3_13bc8, i32* %v3_13bd0, align 4
  %v0_13bd4 = load i32, i32* %r0.global-to-local, align 4
  %v1_13bd4 = load i32, i32* @sb, align 4
  %v2_13bd4 = add i32 %v1_13bd4, 44
  %v3_13bd4 = inttoptr i32 %v2_13bd4 to i32*
  store i32 %v0_13bd4, i32* %v3_13bd4, align 4
  %v0_13bd8 = load i32, i32* %r1.global-to-local, align 4
  %v1_13bd8 = load i32, i32* @sb, align 4
  %v2_13bd8 = add i32 %v1_13bd8, 52
  %v3_13bd8 = inttoptr i32 %v2_13bd8 to i32*
  store i32 %v0_13bd8, i32* %v3_13bd8, align 4
  %v0_13bdc = load i32, i32* %r3.global-to-local, align 4
  %v1_13bdc = load i32, i32* @sb, align 4
  %v2_13bdc = add i32 %v1_13bdc, 24
  %v3_13bdc = inttoptr i32 %v2_13bdc to i32*
  store i32 %v0_13bdc, i32* %v3_13bdc, align 4
  %v0_13be0 = load i32, i32* %r3.global-to-local, align 4
  %v1_13be0 = load i32, i32* @sb, align 4
  %v2_13be0 = add i32 %v1_13be0, 28
  %v3_13be0 = inttoptr i32 %v2_13be0 to i32*
  store i32 %v0_13be0, i32* %v3_13be0, align 4
  %v0_13be4 = load i32, i32* %r3.global-to-local, align 4
  %v1_13be4 = load i32, i32* @sb, align 4
  %v2_13be4 = add i32 %v1_13be4, 16
  %v3_13be4 = inttoptr i32 %v2_13be4 to i32*
  store i32 %v0_13be4, i32* %v3_13be4, align 4
  br i1 %v2_13bcc, label %dec_label_pc_13ca0, label %dec_label_pc_13bec

dec_label_pc_13bec:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_13bf0 = load i32, i32* @fp, align 4
  %v2_13bf0 = add i32 %v0_13bf0, 36
  %v3_13bf0 = inttoptr i32 %v2_13bf0 to i32*
  %v4_13bf0 = load i32, i32* %v3_13bf0, align 4
  store i32 %v4_13bf0, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_13bf8 = add i32 %v0_13bf0, 108
  %v3_13bf8 = inttoptr i32 %v2_13bf8 to i32*
  %v4_13bf8 = load i32, i32* %v3_13bf8, align 4
  store i32 %v4_13bf8, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_13c00 = ptrtoint i32* %stack_var_-56 to i32
  %v2_13c04 = add i32 %v0_13bf0, 72
  %v3_13c04 = inttoptr i32 %v2_13c04 to i32*
  %v4_13c04 = load i32, i32* %v3_13c04, align 4
  store i32 %v4_13bf0, i32* %r1.global-to-local, align 4
  store i32 %v4_13bf8, i32* %r2.global-to-local, align 4
  store i32 %v2_13c00, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13c04)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_13c20 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13c20, i32* %r0.global-to-local, align 4
  %v0_13c24 = load i32, i32* @fp, align 4
  %v2_13c24 = add i32 %v0_13c24, 16
  %v3_13c24 = inttoptr i32 %v2_13c24 to i32*
  %v4_13c24 = load i32, i32* %v3_13c24, align 4
  call void @__pseudo_branch(i32 %v4_13c24)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_13c34 = load i32, i32* @fp, align 4
  %v2_13c34 = add i32 %v0_13c34, 96
  %v3_13c34 = inttoptr i32 %v2_13c34 to i32*
  %v4_13c34 = load i32, i32* %v3_13c34, align 4
  store i32 %v4_13c34, i32* %r4.global-to-local, align 4
  %v0_13c38 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13c38, i32* %r1.global-to-local, align 4
  store i32 %v4_13c34, i32* %r2.global-to-local, align 4
  store i32 %v2_139f0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13c04)
  store i32 %v4_13c34, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13c24)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_13c5c = load i32, i32* @fp, align 4
  %v2_13c5c = add i32 %v0_13c5c, 44
  %v3_13c5c = inttoptr i32 %v2_13c5c to i32*
  %v4_13c5c = load i32, i32* %v3_13c5c, align 4
  store i32 %v4_13c5c, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_13c64 = inttoptr i32 %v4_13c5c to i32*
  %v2_13c64 = load i32, i32* %v1_13c64, align 4
  store i32 %v2_13c64, i32* %r2.global-to-local, align 4
  store i32 %v2_139f0, i32* %r0.global-to-local, align 4
  %v1_13c6c = load i32, i32* @sb, align 4
  %v2_13c6c = add i32 %v1_13c6c, 32
  %v3_13c6c = inttoptr i32 %v2_13c6c to i32*
  store i32 %v2_13c64, i32* %v3_13c6c, align 4
  %v0_13c70 = load i32, i32* @fp, align 4
  %v1_13c70 = load i32, i32* %r3.global-to-local, align 4
  %v2_13c70 = add i32 %v1_13c70, %v0_13c70
  %v3_13c70 = inttoptr i32 %v2_13c70 to i32*
  %v4_13c70 = load i32, i32* %v3_13c70, align 4
  store i32 %v4_13c70, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_13c78 = load i32, i32* @sb, align 4
  %v1_13c78 = load i32, i32* @ip, align 4
  %v2_13c78 = inttoptr i32 %v1_13c78 to i32*
  store i32 %v0_13c78, i32* %v2_13c78, align 4
  call void @__pseudo_branch(i32 %v4_13c70)
  store i32 %v2_13c00, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13c70)
  br label %dec_label_pc_13ca0

dec_label_pc_13c9c:                               ; preds = %dec_label_pc_13a30, %dec_label_pc_13a1c, %dec_label_pc_13a3c
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_13ca0

dec_label_pc_13ca0:                               ; preds = %bb40, %dec_label_pc_13a74, %dec_label_pc_13bec, %dec_label_pc_13c9c
  %v0_13ca0 = load i32, i32* @sb, align 4
  store i32 %v0_13ca0, i32* %r0.global-to-local, align 4
  %v2_13ca8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13ca8, i32* %r4.global-to-local, align 4
  store i32 %v6_139dc, i32* @r5, align 4
  store i32 %v9_139dc, i32* @r6, align 4
  store i32 %v18_139dc, i32* @sb, align 4
  store i32 %v24_139dc, i32* @fp, align 4
  ret i32 %v0_13ca0

; uselistorder directives
  uselistorder i32 %v1_13ba0.pre, { 2, 1, 0 }
  uselistorder i32 %v0_13b34, { 1, 2, 0 }
  uselistorder i32 %v0_13b00, { 1, 0 }
  uselistorder i32 %v1_13ac4, { 1, 0 }
  uselistorder i32 %v0_13ac4, { 1, 0 }
  uselistorder i32 %v1_13aac, { 1, 0, 2 }
  uselistorder i32 %v1_13a64, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 4, 3, 5, 6, 7, 8, 9, 10, 12, 11, 14, 13, 15, 16, 17, 18 }
  uselistorder i32 16384, { 45, 0, 46, 33, 63, 34, 64, 35, 65, 36, 66, 37, 67, 38, 68, 16, 69, 15, 47, 1, 49, 31, 50, 2, 61, 32, 62, 30, 48, 3, 51, 4, 52, 5, 53, 6, 54, 7, 55, 8, 56, 9, 57, 10, 58, 11, 59, 12, 60, 39, 72, 13, 73, 14, 74, 17, 70, 40, 71, 20, 75, 19, 76, 42, 77, 43, 78, 18, 79, 41, 80, 81, 21, 82, 22, 83, 23, 84, 44, 85, 24, 86, 25, 87, 27, 88, 26, 89, 28, 90, 29, 91 }
  uselistorder i32 4096, { 7, 8, 9, 1, 0, 2, 15, 3, 10, 11, 5, 12, 4, 6, 13, 14 }
  uselistorder i32 32768, { 1, 4, 2, 0, 3 }
  uselistorder i32 (i32, i32)* @function_fde4, { 6, 0, 2, 1, 5, 4, 3 }
  uselistorder i32 (i32, i32)* @function_1000c, { 14, 0, 13, 8, 7, 10, 9, 12, 11, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 ()* @function_10c08, { 36, 35, 34, 4, 3, 2, 0, 1, 6, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5 }
  uselistorder i32 80, { 5, 2, 3, 4, 0, 1, 6 }
  uselistorder i8 43, { 1, 0 }
  uselistorder i32 ()* @function_11c74, { 12, 11, 5, 4, 3, 2, 0, 8, 7, 6, 10, 9, 1 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 115, 97, 98, 99, 100, 106, 108, 107, 109, 25, 26, 20, 21, 22, 23, 24, 27, 28, 40, 39, 45, 46, 41, 42, 43, 44, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0, 68, 69, 70, 71, 72, 73, 74, 1, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 110, 111, 112, 113, 114, 101, 102, 103, 2, 104, 105 }
  uselistorder i32* @sb, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 104, 105, 106, 107, 108, 109, 110, 111, 116, 119, 117, 118, 120, 33, 34, 35, 36, 37, 49, 50, 45, 46, 47, 48, 38, 39, 40, 41, 42, 43, 44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 1, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 121, 122, 123, 124, 125, 126, 127, 128, 129, 112, 113, 114, 115 }
  uselistorder label %dec_label_pc_13ca0, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_13c9c, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13b7c, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_13af4._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13a9c, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_13a4c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13a1c, { 1, 2, 0 }
}

define i32 @function_13cb4(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13cb4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_13cb4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13cb4, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_13cb4
  %v1_13cbc = load i32, i32* %r2.global-to-local, align 4
  %v2_13cbc = load i32, i32* %r3.global-to-local, align 4
  %v3_13cbc = and i32 %v2_13cbc, %v1_13cbc
  %v2_13cc0 = trunc i32 %v3_13cbc to i16
  %v4_13cc0 = inttoptr i32 %v3_13cbc to i16*
  store i16 %v2_13cc0, i16* %v4_13cc0, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_13cb4, %bb
  %v0_13ce8 = call i32 @function_10600()
  store i32 %v0_13ce8, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_13cf4 = inttoptr i32 %v0_13ce8 to i32*
  %v2_13cf4 = load i32, i32* %v1_13cf4, align 4
  store i32 %v2_13cf4, i32* @r6, align 4
  %v1_13cf8 = call i32 @function_14d4c(i32 0)
  %v2_13d00 = icmp eq i32 %v1_13cf8, 0
  store i32 121092, i32* @r4, align 4
  br i1 %v2_13d00, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 304, i32* %r2.global-to-local, align 4
  %v5_13d0c = load i16, i16* inttoptr (i32 121396 to i16*), align 4
  %v7_13d0c = zext i16 %v5_13d0c to i32
  %v2_13d10 = xor i32 %v7_13d0c, 256
  store i32 %v2_13d10, i32* @r3, align 4
  %v2_13d14 = trunc i32 %v2_13d10 to i16
  store i16 %v2_13d14, i16* inttoptr (i32 121396 to i16*), align 4
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_13d1c = call i32 @function_14d4c(i32 1)
  %v2_13d20 = icmp eq i32 %v1_13d1c, 0
  br i1 %v2_13d20, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_13d28 = load i32, i32* @r4, align 4
  %v3_13d28 = add i32 %v1_13d28, 304
  store i32 %v3_13d28, i32* %r2.global-to-local, align 4
  %v2_13d2c = add i32 %v1_13d28, 384
  %v3_13d2c = inttoptr i32 %v2_13d2c to i16*
  %v4_13d2c = load i16, i16* %v3_13d2c, align 2
  %v5_13d2c = zext i16 %v4_13d2c to i32
  %v2_13d30 = xor i32 %v5_13d2c, 256
  store i32 %v2_13d30, i32* %r3.global-to-local, align 4
  %v2_13d34 = trunc i32 %v2_13d30 to i16
  store i16 %v2_13d34, i16* %v3_13d2c, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_13d38 = load i32, i32* @r6, align 4
  %v1_13d38 = load i32, i32* @r5, align 4
  %v2_13d38 = inttoptr i32 %v1_13d38 to i32*
  store i32 %v0_13d38, i32* %v2_13d38, align 4
  ret i32 %v1_13d1c

; uselistorder directives
  uselistorder i32 %v3_13cbc, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32)* @function_14d4c, { 2, 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_13d4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13d4c:
  store i32 add (i32 ptrtoint (i32* @global_var_9ba4.481 to i32), i32 81248), i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_158dc.483 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_13d68 = call i32 @function_10700()
  ret i32 %v0_13d68
}

define i32 @function_13e54(i32 %arg1) local_unnamed_addr {
dec_label_pc_13e54:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13e54 = load i32, i32* @r4, align 4
  store i32 %v3_13e54, i32* %stack_var_-8, align 4
  %v1_13e58 = add i32 %arg1, 8
  %v2_13e58 = inttoptr i32 %v1_13e58 to i32*
  %v3_13e58 = load i32, i32* %v2_13e58, align 4
  %v1_13e5c = add i32 %arg1, 16
  %v2_13e5c = inttoptr i32 %v1_13e5c to i32*
  %v3_13e5c = load i32, i32* %v2_13e5c, align 4
  %v9_13e60 = icmp eq i32 %v3_13e5c, %v3_13e58
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_13e60, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_13e54
  store i32 %v3_13e58, i32* %v2_13e5c, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_13e54, %bb
  %v1_13e6c = xor i1 %v9_13e60, true
  call void @__pseudo_cond_branch(i1 %v1_13e6c, i32 ptrtoint (i32* @global_var_15138.484 to i32))
  %v0_13e70 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e70 = add i32 %v0_13e70, 8
  %v2_13e70 = inttoptr i32 %v1_13e70 to i32*
  %v3_13e70 = load i32, i32* %v2_13e70, align 4
  %v1_13e74 = add i32 %v0_13e70, 16
  %v2_13e74 = inttoptr i32 %v1_13e74 to i32*
  %v3_13e74 = load i32, i32* %v2_13e74, align 4
  %v2_13e78 = sub i32 %v3_13e74, %v3_13e70
  %v2_13e7c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13e7c, i32* @r4, align 4
  ret i32 %v2_13e78

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_13e84(i32 %arg1) local_unnamed_addr {
dec_label_pc_13e84:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13e84 = load i32, i32* @r4, align 4
  store i32 %v3_13e84, i32* %stack_var_-16, align 4
  %v6_13e84 = load i32, i32* @r5, align 4
  %v12_13e84 = load i32, i32* @lr, align 4
  %v1_13e88 = add i32 %arg1, 52
  %v2_13e88 = inttoptr i32 %v1_13e88 to i32*
  %v3_13e88 = load i32, i32* %v2_13e88, align 4
  %v2_13e90 = icmp eq i32 %v3_13e88, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 121092, i32* %r6.global-to-local, align 4
  br i1 %v2_13e90, label %dec_label_pc_13ec8, label %dec_label_pc_13ea4

dec_label_pc_13ea4:                               ; preds = %dec_label_pc_13e84
  %v1_13ea4 = add i32 %arg1, 16
  %v2_13ea4 = inttoptr i32 %v1_13ea4 to i32*
  %v3_13ea4 = load i32, i32* %v2_13ea4, align 4
  %v1_13ea8 = add i32 %arg1, 24
  %v2_13ea8 = inttoptr i32 %v1_13ea8 to i32*
  %v3_13ea8 = load i32, i32* %v2_13ea8, align 4
  %v3_13eac = icmp ult i32 %v3_13ea4, %v3_13ea8
  br i1 %v3_13eac, label %.thread, label %dec_label_pc_13ebc

.thread:                                          ; preds = %dec_label_pc_13ea4
  %v2_13eb0 = inttoptr i32 %v3_13ea4 to i8*
  %v3_13eb0 = load i8, i8* %v2_13eb0, align 1
  %v4_13eb0 = zext i8 %v3_13eb0 to i32
  store i32 %v4_13eb0, i32* %r4.global-to-local, align 4
  %v6_13eb0 = add i32 %v3_13ea4, 1
  store i32 %v6_13eb0, i32* %v2_13ea4, align 4
  br label %dec_label_pc_13f3c

dec_label_pc_13ebc:                               ; preds = %dec_label_pc_13ea4
  %v1_13ebc = inttoptr i32 %arg1 to i16*
  %v2_13ebc = call i32 @function_143b0(i16* %v1_13ebc)
  store i32 %v2_13ebc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f3c

dec_label_pc_13ec8:                               ; preds = %dec_label_pc_13e84
  %v1_13ecc = add i32 %arg1, 56
  store i32 %v1_13ecc, i32* @r4, align 4
  %v4_13ee0 = load i32, i32* inttoptr (i32 121164 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_13ee0)
  %v0_13ef4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13ef4 = add i32 %v0_13ef4, 16
  %v3_13ef4 = inttoptr i32 %v2_13ef4 to i32*
  %v4_13ef4 = load i32, i32* %v3_13ef4, align 4
  store i32 81664, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13ef4)
  %v0_13f00 = load i32, i32* @r5, align 4
  %v1_13f00 = add i32 %v0_13f00, 16
  %v2_13f00 = inttoptr i32 %v1_13f00 to i32*
  %v3_13f00 = load i32, i32* %v2_13f00, align 4
  %v1_13f04 = add i32 %v0_13f00, 24
  %v2_13f04 = inttoptr i32 %v1_13f04 to i32*
  %v3_13f04 = load i32, i32* %v2_13f04, align 4
  %v3_13f08 = icmp ult i32 %v3_13f00, %v3_13f04
  br i1 %v3_13f08, label %.thread2, label %dec_label_pc_13f18

.thread2:                                         ; preds = %dec_label_pc_13ec8
  %v2_13f0c = inttoptr i32 %v3_13f00 to i8*
  %v3_13f0c = load i8, i8* %v2_13f0c, align 1
  %v4_13f0c = zext i8 %v3_13f0c to i32
  store i32 %v4_13f0c, i32* %r4.global-to-local, align 4
  %v6_13f0c = add i32 %v3_13f00, 1
  store i32 %v6_13f0c, i32* %v2_13f00, align 4
  br label %dec_label_pc_13f24

dec_label_pc_13f18:                               ; preds = %dec_label_pc_13ec8
  %v1_13f1c = inttoptr i32 %v0_13f00 to i16*
  %v2_13f1c = call i32 @function_143b0(i16* %v1_13f1c)
  store i32 %v2_13f1c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13f24

dec_label_pc_13f24:                               ; preds = %.thread2, %dec_label_pc_13f18
  %v0_13f30 = load i32, i32* %r6.global-to-local, align 4
  %v2_13f30 = add i32 %v0_13f30, 24
  %v3_13f30 = inttoptr i32 %v2_13f30 to i32*
  %v4_13f30 = load i32, i32* %v3_13f30, align 4
  store i32 %v4_13f30, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_13f30)
  br label %dec_label_pc_13f3c

dec_label_pc_13f3c:                               ; preds = %.thread, %dec_label_pc_13ebc, %dec_label_pc_13f24
  %v0_13f3c = load i32, i32* %r4.global-to-local, align 4
  %v2_13f44 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13f44, i32* @r4, align 4
  store i32 %v6_13e84, i32* @r5, align 4
  store i32 %v12_13e84, i32* @lr, align 4
  ret i32 %v0_13f3c

; uselistorder directives
  uselistorder i32 %v3_13f00, { 1, 0, 2 }
  uselistorder i32 %v3_13ea4, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 5, 1, 4, 3, 0, 2 }
  uselistorder label %dec_label_pc_13f3c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13f24, { 1, 0 }
}

define i32 @function_13f50(i32 %arg1) local_unnamed_addr {
dec_label_pc_13f50:
  %v0_13f50 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13f50, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13f50
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13f50, %bb
  %v10_13f5c = phi i32 [ %arg1, %dec_label_pc_13f50 ], [ 0, %bb ]
  ret i32 %v10_13f5c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_13f60(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13f60:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13f60 = load i32, i32* @r4, align 4
  store i32 %v3_13f60, i32* %stack_var_-28, align 4
  %v6_13f60 = load i32, i32* @r5, align 4
  %v9_13f60 = load i32, i32* @r6, align 4
  %v12_13f60 = load i32, i32* @r7, align 4
  %v21_13f60 = load i32, i32* @lr, align 4
  %v1_13f64 = add i32 %arg3, 52
  %v2_13f64 = inttoptr i32 %v1_13f64 to i32*
  %v3_13f64 = load i32, i32* %v2_13f64, align 4
  %v1_13f6c = sub i32 1, %v3_13f64
  %v2_13f6c = icmp ult i32 %v3_13f64, 2
  br i1 %v2_13f6c, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_13f60
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_13f60, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_13f6c, %dec_label_pc_13f60 ]
  %v0_13f74 = phi i32 [ 0, %bb ], [ %v1_13f6c, %dec_label_pc_13f60 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_13f74 = icmp eq i32 %v0_13f74, 0
  store i32 add (i32 ptrtoint (i32* @global_var_9984.491 to i32), i32 81792), i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_13f74, label %dec_label_pc_13fc8, label %dec_label_pc_13f90

dec_label_pc_13f90:                               ; preds = %bb16
  %v1_13f94 = add i32 %arg3, 56
  store i32 %v1_13f94, i32* @r4, align 4
  %v4_13fa8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_9984.491 to i32), i32 81864) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_13fa8)
  %v0_13fbc = load i32, i32* @r5, align 4
  %v2_13fbc = add i32 %v0_13fbc, 16
  %v3_13fbc = inttoptr i32 %v2_13fbc to i32*
  %v4_13fbc = load i32, i32* %v3_13fbc, align 4
  store i32 %v4_13fbc, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_13fc8.495 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13fbc)
  %v0_13fc8.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_13fcc.pre = load i32, i32* @r7, align 4
  %v0_13fd0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13fc8

dec_label_pc_13fc8:                               ; preds = %bb16, %dec_label_pc_13f90
  %v0_13fd0 = phi i32 [ %arg3, %bb16 ], [ %v0_13fd0.pre, %dec_label_pc_13f90 ]
  %v0_13fcc = phi i32 [ %arg2, %bb16 ], [ %v0_13fcc.pre, %dec_label_pc_13f90 ]
  %v0_13fc8 = phi i32 [ %arg1, %bb16 ], [ %v0_13fc8.pre, %dec_label_pc_13f90 ]
  %v3_13fd4 = inttoptr i32 %v0_13fc8 to i8*
  %v4_13fd4 = call i32 @function_144dc(i8* %v3_13fd4, i32 %v0_13fcc, i32 %v0_13fd0)
  %v0_13fd8 = load i32, i32* %sl.global-to-local, align 4
  %v2_13fd8 = icmp eq i32 %v0_13fd8, 0
  store i32 %v4_13fd4, i32* %r4.global-to-local, align 4
  br i1 %v2_13fd8, label %dec_label_pc_13fc8..thread3_crit_edge, label %bb17

dec_label_pc_13fc8..thread3_crit_edge:            ; preds = %dec_label_pc_13fc8
  %v0_13ff4.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_13fc8
  %v1_13fec = load i32, i32* @r5, align 4
  %v3_13fec = add i32 %v1_13fec, 24
  %v4_13fec = inttoptr i32 %v3_13fec to i32*
  %v5_13fec = load i32, i32* %v4_13fec, align 4
  store i32 %v5_13fec, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_13fc8..thread3_crit_edge, %bb17
  %v0_13ff4 = phi i32 [ %v0_13ff4.pre, %dec_label_pc_13fc8..thread3_crit_edge ], [ %v5_13fec, %bb17 ]
  %v2_13ff4 = xor i1 %v2_13fd8, true
  call void @__pseudo_cond_branch(i1 %v2_13ff4, i32 %v0_13ff4)
  %v0_13ff8 = load i32, i32* %r4.global-to-local, align 4
  %v2_14000 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_14000, i32* %r4.global-to-local, align 4
  store i32 %v6_13f60, i32* @r5, align 4
  store i32 %v9_13f60, i32* @r6, align 4
  store i32 %v12_13f60, i32* @r7, align 4
  store i32 %v21_13f60, i32* @lr, align 4
  ret i32 %v0_13ff8

; uselistorder directives
  uselistorder i32 %v3_13f64, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 52, { 8, 9, 10, 11, 12, 2, 13, 6, 7, 3, 16, 17, 1, 18, 0, 19, 20, 4, 5, 14, 15 }
  uselistorder i32 %arg3, { 0, 3, 1, 2 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_13fc8, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_1400c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1400c:
  %v0_1400c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1400c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1400c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1400c, %bb
  %v10_14018 = phi i32 [ %arg1, %dec_label_pc_1400c ], [ 0, %bb ]
  ret i32 %v10_14018

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_1401c() local_unnamed_addr {
dec_label_pc_1401c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_1401c = load i32, i32* @r4, align 4
  store i32 %v3_1401c, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %r6.global-to-local, align 4
  %v4_1402c = load i32, i32* inttoptr (i32 121128 to i32*), align 8
  store i32 %v4_1402c, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_14034 = load i32, i32* inttoptr (i32 121200 to i32*), align 16
  store i32 %v4_14034, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_14040 = load i32, i32* inttoptr (i32 121164 to i32*), align 4
  store i32 %v4_14040, i32* %r7.global-to-local, align 4
  %v2_1404c = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_14040)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14060 = load i32, i32* %r6.global-to-local, align 4
  %v2_14060 = add i32 %v0_14060, 16
  %v3_14060 = inttoptr i32 %v2_14060 to i32*
  %v4_14060 = load i32, i32* %v3_14060, align 4
  store i32 %v4_14060, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14060)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_14070 = load i32, i32* %r6.global-to-local, align 4
  %v2_14070 = add i32 %v0_14070, 12
  %v3_14070 = inttoptr i32 %v2_14070 to i32*
  %v4_14070 = load i32, i32* %v3_14070, align 4
  store i32 %v4_14070, i32* %r3.global-to-local, align 4
  %v1_14074 = inttoptr i32 %v4_14070 to i32*
  %v2_14074 = load i32, i32* %v1_14074, align 4
  store i32 %v2_14074, i32* %r3.global-to-local, align 4
  %v7_14078 = icmp eq i32 %v2_14074, 1
  br i1 %v7_14078, label %dec_label_pc_14080, label %dec_label_pc_14140

dec_label_pc_14080:                               ; preds = %dec_label_pc_1401c
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_14084 = add i32 %v0_14070, 48
  %v3_14084 = inttoptr i32 %v2_14084 to i32*
  %v4_14084 = load i32, i32* %v3_14084, align 4
  store i32 %v4_14084, i32* %r3.global-to-local, align 4
  %v1_14088 = inttoptr i32 %v4_14084 to i32*
  %v2_14088 = load i32, i32* %v1_14088, align 4
  store i32 %v2_14088, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_14088, 1
  br i1 %tmp30, label %dec_label_pc_14140, label %dec_label_pc_14094

dec_label_pc_14094:                               ; preds = %dec_label_pc_14080
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_14098 = add i32 %v0_14070, 96
  %v3_14098 = inttoptr i32 %v2_14098 to i32*
  %v4_14098 = load i32, i32* %v3_14098, align 4
  store i32 %v4_14098, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14040)
  call void @__pseudo_branch(i32 %v4_14060)
  %v0_140c0 = load i32, i32* %r6.global-to-local, align 4
  %v2_140c0 = add i32 %v0_140c0, 44
  %v3_140c0 = inttoptr i32 %v2_140c0 to i32*
  %v4_140c0 = load i32, i32* %v3_140c0, align 4
  store i32 %v4_140c0, i32* %r3.global-to-local, align 4
  %v1_140c4 = inttoptr i32 %v4_140c0 to i32*
  %v2_140c4 = load i32, i32* %v1_140c4, align 4
  store i32 %v2_140c4, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_1411011 = icmp eq i32 %v2_140c4, 0
  br i1 %v2_1411011, label %dec_label_pc_1411c, label %dec_label_pc_140d4

dec_label_pc_140d4:                               ; preds = %dec_label_pc_14094, %dec_label_pc_1410c
  %v0_140f82 = phi i32 [ %v0_1410c, %dec_label_pc_1410c ], [ %v2_140c4, %dec_label_pc_14094 ]
  %v1_140d4 = inttoptr i32 %v0_140f82 to i16*
  %v2_140d4 = load i16, i16* %v1_140d4, align 2
  %v3_140d4 = zext i16 %v2_140d4 to i32
  store i32 %v3_140d4, i32* %r3.global-to-local, align 4
  %v2_140d8 = and i32 %v3_140d4, 32816
  %v7_140dc = icmp eq i32 %v2_140d8, 48
  %v1_140e0 = add i32 %v0_140f82, 32
  %v2_140e0 = inttoptr i32 %v1_140e0 to i32*
  %v3_140e0 = load i32, i32* %v2_140e0, align 4
  store i32 %v3_140e0, i32* %r5.global-to-local, align 4
  br i1 %v7_140dc, label %dec_label_pc_140ec, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_140d4
  store i32 %v0_140f82, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1410c

dec_label_pc_140ec:                               ; preds = %dec_label_pc_140d4
  %v0_140ec = load i32, i32* %r7.global-to-local, align 4
  %v2_140ec = icmp eq i32 %v0_140ec, 0
  br i1 %v2_140ec, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_140ec
  %v1_140f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_140f0 = load i32, i32* %r8.global-to-local, align 4
  %v3_140f0 = add i32 %v2_140f0, %v1_140f0
  %v4_140f0 = inttoptr i32 %v3_140f0 to i32*
  %v5_140f0 = load i32, i32* %v4_140f0, align 4
  store i32 %v5_140f0, i32* %r3.global-to-local, align 4
  %v3_140f4 = inttoptr i32 %v5_140f0 to i32*
  store i32 %v3_140e0, i32* %v3_140f4, align 4
  %v0_140f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_140f8 = inttoptr i32 %v0_140f8 to i16*
  %v2_140f8 = load i16, i16* %v1_140f8, align 2
  %v3_140f8 = zext i16 %v2_140f8 to i32
  store i32 %v3_140f8, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_140ec
  %v2_140f88 = load i16, i16* %v1_140d4, align 2
  %v3_140f89 = zext i16 %v2_140f88 to i32
  store i32 %v3_140f89, i32* %r3.global-to-local, align 4
  %v3_140fc = add i32 %v0_140ec, 32
  %v4_140fc = inttoptr i32 %v3_140fc to i32*
  store i32 %v3_140e0, i32* %v4_140fc, align 4
  %v0_14100.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_14100 = phi i32 [ %v3_140f8, %.thread ], [ %v0_14100.pre, %bb ]
  %v1_14100 = and i32 %v0_14100, 8192
  %v2_14100 = icmp eq i32 %v1_14100, 0
  br i1 %v2_14100, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_14108 = xor i1 %v2_14100, true
  call void @__pseudo_cond_branch(i1 %v1_14108, i32 ptrtoint (i32* @global_var_11c74.16 to i32))
  %v0_1410c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1410c

dec_label_pc_1410c:                               ; preds = %.thread21, %bb33
  %v0_1410c = phi i32 [ %v0_1410c.pre, %bb33 ], [ %v3_140e0, %.thread21 ]
  store i32 %v0_1410c, i32* %r4.global-to-local, align 4
  %v2_14110 = icmp eq i32 %v0_1410c, 0
  br i1 %v2_14110, label %dec_label_pc_14110.dec_label_pc_1411c_crit_edge, label %dec_label_pc_140d4

dec_label_pc_14110.dec_label_pc_1411c_crit_edge:  ; preds = %dec_label_pc_1410c
  %v0_14128.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1411c

dec_label_pc_1411c:                               ; preds = %dec_label_pc_14110.dec_label_pc_1411c_crit_edge, %dec_label_pc_14094
  %v0_14128 = phi i32 [ %v0_14128.pre, %dec_label_pc_14110.dec_label_pc_1411c_crit_edge ], [ %v0_140c0, %dec_label_pc_14094 ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_14128 = add i32 %v0_14128, 24
  %v3_14128 = inttoptr i32 %v2_14128 to i32*
  %v4_14128 = load i32, i32* %v3_14128, align 4
  call void @__pseudo_branch(i32 %v4_14128)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_14138 = load i32, i32* %r6.global-to-local, align 4
  %v2_14138 = add i32 %v0_14138, 48
  %v3_14138 = inttoptr i32 %v2_14138 to i32*
  %v4_14138 = load i32, i32* %v3_14138, align 4
  store i32 %v4_14138, i32* %r3.global-to-local, align 4
  %v0_1413c = load i32, i32* %r4.global-to-local, align 4
  %v2_1413c = inttoptr i32 %v4_14138 to i32*
  store i32 %v0_1413c, i32* %v2_1413c, align 4
  %v0_14144.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14140

dec_label_pc_14140:                               ; preds = %dec_label_pc_1401c, %dec_label_pc_14080, %dec_label_pc_1411c
  %v0_14144 = phi i32 [ %v0_14070, %dec_label_pc_1401c ], [ %v0_14070, %dec_label_pc_14080 ], [ %v0_14144.pre, %dec_label_pc_1411c ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_14144 = add i32 %v0_14144, 12
  %v3_14144 = inttoptr i32 %v2_14144 to i32*
  %v4_14144 = load i32, i32* %v3_14144, align 4
  %v1_14148 = inttoptr i32 %v4_14144 to i32*
  %v2_14148 = load i32, i32* %v1_14148, align 4
  %v1_1414c = add i32 %v2_14148, -1
  store i32 %v1_1414c, i32* %v1_14148, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_14160 = load i32, i32* %r6.global-to-local, align 4
  %v2_14160 = add i32 %v0_14160, 24
  %v3_14160 = inttoptr i32 %v2_14160 to i32*
  %v4_14160 = load i32, i32* %v3_14160, align 4
  call void @__pseudo_branch(i32 %v4_14160)
  %v2_14170 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14170, i32* %r4.global-to-local, align 4
  ret i32 %v2_1404c

; uselistorder directives
  uselistorder i32 %v0_1410c, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 6, 1, 7, 2, 3, 4, 5, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 20, 21, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* inttoptr (i32 121128 to i32*), { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_14140, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1410c, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_140d4, { 1, 0 }
}

define i32 @function_1417c(i16* %arg1) local_unnamed_addr {
dec_label_pc_1417c:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_1417c = load i1, i1* @cpsr_z, align 1
  %v2_1417c = load i32, i32* @r4, align 4
  br i1 %v0_1417c, label %bb, label %dec_label_pc_1417c..thread8_crit_edge

dec_label_pc_1417c..thread8_crit_edge:            ; preds = %dec_label_pc_1417c
  %v0_141b8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread8

bb:                                               ; preds = %dec_label_pc_1417c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_1417c..thread8_crit_edge, %bb
  %v0_14358 = phi i32 [ %v0_141b8.pre, %dec_label_pc_1417c..thread8_crit_edge ], [ 0, %bb ]
  store i32 %v2_1417c, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 121092, i32* %sb.global-to-local, align 4
  %v4_141b4 = load i32, i32* inttoptr (i32 121136 to i32*), align 16
  store i32 %v4_141b4, i32* %r3.global-to-local, align 4
  %v9_141b8 = icmp eq i32 %v0_14358, %v4_141b4
  store i32 %v0_14358, i32* %fp.global-to-local, align 4
  br i1 %v9_141b8, label %bb49, label %dec_label_pc_141d0

bb49:                                             ; preds = %.thread8
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_141e0

dec_label_pc_141d0:                               ; preds = %.thread8
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_141d4 = icmp eq i32 %v0_14358, 0
  br i1 %v2_141d4, label %dec_label_pc_141e0, label %dec_label_pc_14348

dec_label_pc_141e0:                               ; preds = %bb49, %dec_label_pc_141d0
  %stack_var_-60.1.in = phi i32 [ 0, %bb49 ], [ 256, %dec_label_pc_141d0 ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_141f4 = load i32, i32* inttoptr (i32 121200 to i32*), align 16
  store i32 %v4_141f4, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_141fc = ptrtoint i32* %stack_var_-56 to i32
  %v4_14200 = load i32, i32* inttoptr (i32 121164 to i32*), align 4
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_141fc, i32* %r0.global-to-local, align 4
  store i32 %v4_141f4, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14200)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14220 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14220, i32* %r0.global-to-local, align 4
  %v0_14224 = load i32, i32* %sb.global-to-local, align 4
  %v2_14224 = add i32 %v0_14224, 16
  %v3_14224 = inttoptr i32 %v2_14224 to i32*
  %v4_14224 = load i32, i32* %v3_14224, align 4
  call void @__pseudo_branch(i32 %v4_14224)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_14234 = add i32 %v0_14224, 12
  %v3_14234 = inttoptr i32 %v2_14234 to i32*
  %v4_14234 = load i32, i32* %v3_14234, align 4
  store i32 %v4_14234, i32* %r2.global-to-local, align 4
  %v1_14238 = inttoptr i32 %v4_14234 to i32*
  %v2_14238 = load i32, i32* %v1_14238, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_14240 = add i32 %v2_14238, 1
  store i32 %v1_14240, i32* %r3.global-to-local, align 4
  %v2_14244 = add i32 %v0_14224, 24
  %v3_14244 = inttoptr i32 %v2_14244 to i32*
  %v4_14244 = load i32, i32* %v3_14244, align 4
  store i32 %v1_14240, i32* %v1_14238, align 4
  store i32 %v2_141fc, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14244)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_14260 = load i32, i32* %sb.global-to-local, align 4
  %v2_14260 = add i32 %v0_14260, 96
  %v3_14260 = inttoptr i32 %v2_14260 to i32*
  %v4_14260 = load i32, i32* %v3_14260, align 4
  store i32 %v4_14260, i32* @r4, align 4
  store i32 %v4_14260, i32* %r2.global-to-local, align 4
  store i32 %v2_141fc, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14200)
  %v0_14278 = load i32, i32* @r4, align 4
  store i32 %v0_14278, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14224)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_14288 = load i32, i32* %sb.global-to-local, align 4
  %v2_14288 = add i32 %v0_14288, 44
  %v3_14288 = inttoptr i32 %v2_14288 to i32*
  %v4_14288 = load i32, i32* %v3_14288, align 4
  store i32 %v4_14288, i32* %r3.global-to-local, align 4
  store i32 %v2_141fc, i32* %r0.global-to-local, align 4
  %v1_14294 = inttoptr i32 %v4_14288 to i32*
  %v2_14294 = load i32, i32* %v1_14294, align 4
  store i32 %v2_14294, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_14244)
  %v0_142a0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_142a0, i32* @r6, align 4
  %v2_142a4 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_142a4, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_14338.pr = load i32, i32* @r7, align 4
  %v2_1433828 = icmp eq i32 %v0_14338.pr, 0
  br i1 %v2_1433828, label %dec_label_pc_14340, label %dec_label_pc_142ac

dec_label_pc_142ac:                               ; preds = %dec_label_pc_141e0, %dec_label_pc_14334
  %v0_142b8 = phi i32 [ %v3_14334, %dec_label_pc_14334 ], [ %v0_14338.pr, %dec_label_pc_141e0 ]
  %v1_142ac = inttoptr i32 %v0_142b8 to i16*
  %v2_142ac = load i16, i16* %v1_142ac, align 2
  %v3_142ac = zext i16 %v2_142ac to i32
  store i32 %v3_142ac, i32* %r3.global-to-local, align 4
  %v1_142b0 = and i32 %v3_142ac, 64
  %v2_142b0 = icmp eq i32 %v1_142b0, 0
  br i1 %v2_142b0, label %dec_label_pc_14334, label %dec_label_pc_142b8

dec_label_pc_142b8:                               ; preds = %dec_label_pc_142ac
  %v1_142b8 = add i32 %v0_142b8, 56
  store i32 %v1_142b8, i32* @r4, align 4
  store i32 %v1_142b8, i32* %r2.global-to-local, align 4
  store i32 %v2_141fc, i32* %r0.global-to-local, align 4
  %v0_142c8 = load i32, i32* %sb.global-to-local, align 4
  %v1_142c8 = load i32, i32* %fp.global-to-local, align 4
  %v2_142c8 = add i32 %v1_142c8, %v0_142c8
  %v3_142c8 = inttoptr i32 %v2_142c8 to i32*
  %v4_142c8 = load i32, i32* %v3_142c8, align 4
  call void @__pseudo_branch(i32 %v4_142c8)
  %v0_142d4 = load i32, i32* @r4, align 4
  store i32 %v0_142d4, i32* %r0.global-to-local, align 4
  %v0_142d8 = load i32, i32* %sb.global-to-local, align 4
  %v1_142d8 = load i32, i32* @r8, align 4
  %v2_142d8 = add i32 %v1_142d8, %v0_142d8
  %v3_142d8 = inttoptr i32 %v2_142d8 to i32*
  %v4_142d8 = load i32, i32* %v3_142d8, align 4
  call void @__pseudo_branch(i32 %v4_142d8)
  %v0_142e4 = load i32, i32* @r7, align 4
  %v1_142e4 = inttoptr i32 %v0_142e4 to i16*
  %v2_142e4 = load i16, i16* %v1_142e4, align 2
  %v3_142e4 = zext i16 %v2_142e4 to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_142ec = or i32 %v3_142e4, %stack_var_-60.1.in
  %v1_142f0 = xor i32 %v2_142ec, 320
  store i32 %v1_142f0, i32* %r3.global-to-local, align 4
  %v1_142f4 = and i32 %v1_142f0, 832
  %v2_142f4 = icmp eq i32 %v1_142f4, 0
  br i1 %v2_142f4, label %dec_label_pc_142fc, label %bb50

dec_label_pc_142fc:                               ; preds = %dec_label_pc_142b8
  store i32 %v0_142e4, i32* %r0.global-to-local, align 4
  %v1_14300 = call i32 @function_13e54(i32 %v0_142e4)
  store i32 %v1_14300, i32* %r0.global-to-local, align 4
  %v2_14304 = icmp eq i32 %v1_14300, 0
  br i1 %v2_14304, label %.thread16, label %.thread17

.thread16:                                        ; preds = %dec_label_pc_142fc
  %v1_14308 = load i32, i32* @r7, align 4
  %v2_14308 = inttoptr i32 %v1_14308 to i16*
  %v3_14308 = load i16, i16* %v2_14308, align 2
  %v4_14308 = zext i16 %v3_14308 to i32
  store i32 %v4_14308, i32* %r3.global-to-local, align 4
  %v2_1430c = add i32 %v1_14308, 8
  %v3_1430c = inttoptr i32 %v2_1430c to i32*
  %v4_1430c = load i32, i32* %v3_1430c, align 4
  store i32 %v4_1430c, i32* %r2.global-to-local, align 4
  %v2_14310 = and i32 %v4_14308, 65471
  store i32 %v2_14310, i32* %r3.global-to-local, align 4
  %v3_14314 = add i32 %v1_14308, 28
  %v4_14314 = inttoptr i32 %v3_14314 to i32*
  store i32 %v4_1430c, i32* %v4_14314, align 4
  %v1_14318 = load i32, i32* %r3.global-to-local, align 4
  %v2_14318 = trunc i32 %v1_14318 to i16
  %v3_14318 = load i32, i32* @r7, align 4
  %v4_14318 = inttoptr i32 %v3_14318 to i16*
  store i16 %v2_14318, i16* %v4_14318, align 2
  br label %bb50

.thread17:                                        ; preds = %dec_label_pc_142fc
  store i32 -1, i32* @r6, align 4
  br label %bb50

bb50:                                             ; preds = %.thread16, %dec_label_pc_142b8, %.thread17
  store i32 %v2_141fc, i32* %r0.global-to-local, align 4
  %v0_14328 = load i32, i32* %sb.global-to-local, align 4
  %v1_14328 = load i32, i32* %sl.global-to-local, align 4
  %v2_14328 = add i32 %v1_14328, %v0_14328
  %v3_14328 = inttoptr i32 %v2_14328 to i32*
  %v4_14328 = load i32, i32* %v3_14328, align 4
  call void @__pseudo_branch(i32 %v4_14328)
  %v0_14334.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_14334

dec_label_pc_14334:                               ; preds = %dec_label_pc_142ac, %bb50
  %v0_14334 = phi i32 [ %v0_142b8, %dec_label_pc_142ac ], [ %v0_14334.pre, %bb50 ]
  %v1_14334 = add i32 %v0_14334, 32
  %v2_14334 = inttoptr i32 %v1_14334 to i32*
  %v3_14334 = load i32, i32* %v2_14334, align 4
  store i32 %v3_14334, i32* @r7, align 4
  %v2_14338 = icmp eq i32 %v3_14334, 0
  br i1 %v2_14338, label %dec_label_pc_14340, label %dec_label_pc_142ac

dec_label_pc_14340:                               ; preds = %dec_label_pc_14334, %dec_label_pc_141e0
  %v0_14340 = call i32 @function_1401c()
  store i32 %v0_14340, i32* %r0.global-to-local, align 4
  %v0_1437c.pre = load i32, i32* @r6, align 4
  br label %bb52

dec_label_pc_14348:                               ; preds = %dec_label_pc_141d0
  %v1_14348 = inttoptr i32 %v0_14358 to i16*
  %v2_14348 = load i16, i16* %v1_14348, align 2
  %v3_14348 = zext i16 %v2_14348 to i32
  %v1_1434c = and i32 %v3_14348, 64
  store i32 %v1_1434c, i32* %r3.global-to-local, align 4
  %v2_1434c = icmp eq i32 %v1_1434c, 0
  br i1 %v2_1434c, label %bb51, label %dec_label_pc_14358

bb51:                                             ; preds = %dec_label_pc_14348
  br label %bb52

dec_label_pc_14358:                               ; preds = %dec_label_pc_14348
  %v1_14358 = call i32 @function_13e54(i32 %v0_14358)
  store i32 %v1_14358, i32* %r0.global-to-local, align 4
  %v2_1435c = icmp eq i32 %v1_14358, 0
  br i1 %v2_1435c, label %.thread24, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_14358
  br label %bb52

.thread24:                                        ; preds = %dec_label_pc_14358
  %v1_14360 = load i32, i32* %fp.global-to-local, align 4
  %v2_14360 = inttoptr i32 %v1_14360 to i16*
  %v3_14360 = load i16, i16* %v2_14360, align 2
  %v4_14360 = zext i16 %v3_14360 to i32
  store i32 %v4_14360, i32* %r3.global-to-local, align 4
  %v2_14364 = add i32 %v1_14360, 8
  %v3_14364 = inttoptr i32 %v2_14364 to i32*
  %v4_14364 = load i32, i32* %v3_14364, align 4
  store i32 %v4_14364, i32* %r2.global-to-local, align 4
  %v2_14368 = and i32 %v4_14360, 65471
  store i32 %v2_14368, i32* %r3.global-to-local, align 4
  %v2_1436c = trunc i32 %v2_14368 to i16
  store i16 %v2_1436c, i16* %v2_14360, align 2
  %v1_14370 = load i32, i32* %r2.global-to-local, align 4
  %v2_14370 = load i32, i32* %fp.global-to-local, align 4
  %v3_14370 = add i32 %v2_14370, 28
  %v4_14370 = inttoptr i32 %v3_14370 to i32*
  store i32 %v1_14370, i32* %v4_14370, align 4
  br label %bb52

bb52:                                             ; preds = %bb51, %.thread26, %dec_label_pc_14340, %.thread24
  %v0_1437c = phi i32 [ -1, %.thread26 ], [ 0, %bb51 ], [ %v0_1437c.pre, %dec_label_pc_14340 ], [ 0, %.thread24 ]
  store i32 %v0_1437c, i32* %r0.global-to-local, align 4
  %v2_14384 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14384, i32* %r4.global-to-local, align 4
  ret i32 %v0_1437c

; uselistorder directives
  uselistorder i32 %v0_1437c, { 1, 0 }
  uselistorder i32 %v3_14334, { 1, 2, 0 }
  uselistorder i32 %v0_142e4, { 1, 0, 2 }
  uselistorder i32 %v0_14224, { 1, 0, 2 }
  uselistorder i32 %v0_14358, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 6, 5, 16, 7, 9, 8, 10, 12, 11, 13, 14, 15, 2, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 ()* @function_1401c, { 1, 0 }
  uselistorder i32 56, { 8, 9, 10, 1, 2, 11, 13, 4, 5, 6, 7, 0, 3, 12, 14 }
  uselistorder i32* @r8, { 9, 10, 11, 12, 13, 14, 15, 16, 2, 17, 147, 148, 3, 149, 150, 151, 167, 168, 169, 170, 171, 6, 172, 173, 174, 175, 176, 177, 178, 179, 81, 82, 83, 84, 85, 42, 43, 44, 45, 46, 47, 48, 31, 33, 34, 22, 24, 4, 18, 19, 20, 21, 23, 32, 25, 26, 27, 28, 29, 30, 35, 36, 49, 50, 51, 52, 5, 37, 0, 38, 39, 40, 8, 41, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 95, 96, 97, 99, 100, 101, 102, 103, 105, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 180, 181, 1, 185, 182, 183, 184, 186, 187, 188, 189, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 161, 162, 163, 7, 165, 166 }
  uselistorder i32* inttoptr (i32 121164 to i32*), { 0, 1, 2, 3, 4, 5, 6, 9, 7, 8 }
  uselistorder i32 72, { 0, 1, 2, 3, 4, 5, 15, 11, 12, 13, 14, 6, 16, 7, 8, 9, 10 }
  uselistorder label %bb52, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_14334, { 1, 0 }
  uselistorder label %bb50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_142ac, { 1, 0 }
  uselistorder label %dec_label_pc_141e0, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @function_14390(i32 %arg1) local_unnamed_addr {
dec_label_pc_14390:
  %v0_14390 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14390, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_14390
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_14390, %bb
  %v5_143ac = phi i32 [ %arg1, %dec_label_pc_14390 ], [ 0, %bb ]
  ret i32 %v5_143ac

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_143b0(i16* %arg1) local_unnamed_addr {
dec_label_pc_143b0:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_143b0 = load i32, i32* @r4, align 4
  store i32 %v3_143b0, i32* %stack_var_-12, align 4
  %v6_143b0 = load i32, i32* @r5, align 4
  %v9_143b0 = load i32, i32* @lr, align 4
  %v0_143b4 = load i32, i32* @r0, align 4
  %v1_143b4 = add i32 %v0_143b4, 16
  %v2_143b4 = inttoptr i32 %v1_143b4 to i32*
  %v3_143b4 = load i32, i32* %v2_143b4, align 4
  store i32 %v3_143b4, i32* %r2.global-to-local, align 4
  %v1_143b8 = add i32 %v0_143b4, 24
  %v2_143b8 = inttoptr i32 %v1_143b8 to i32*
  %v3_143b8 = load i32, i32* %v2_143b8, align 4
  %v3_143bc = icmp ult i32 %v3_143b4, %v3_143b8
  store i32 %v0_143b4, i32* @r4, align 4
  br i1 %v3_143bc, label %bb, label %dec_label_pc_143dc

bb:                                               ; preds = %dec_label_pc_143b0
  %v2_143c8 = inttoptr i32 %v3_143b4 to i8*
  %v3_143c8 = load i8, i8* %v2_143c8, align 1
  %v4_143c8 = zext i8 %v3_143c8 to i32
  store i32 %v4_143c8, i32* %r0.global-to-local, align 4
  %v6_143c8 = add i32 %v3_143b4, 1
  store i32 %v6_143c8, i32* %r2.global-to-local, align 4
  store i32 %v6_143c8, i32* %v2_143b4, align 4
  br label %dec_label_pc_144c8

dec_label_pc_143dc:                               ; preds = %dec_label_pc_143b0
  store i32 121092, i32* @r5, align 4
  %v1_143dc = inttoptr i32 %v0_143b4 to i16*
  %v2_143dc = load i16, i16* %v1_143dc, align 2
  %v3_143dc = zext i16 %v2_143dc to i32
  %v1_143e0 = and i32 %v3_143dc, 131
  %tmp24 = icmp ugt i32 %v1_143e0, 128
  br i1 %tmp24, label %dec_label_pc_143fc, label %dec_label_pc_143ec

dec_label_pc_143ec:                               ; preds = %dec_label_pc_143dc
  store i32 128, i32* @r1, align 4
  %v0_143f0 = call i32 @function_1521c()
  store i32 %v0_143f0, i32* %r0.global-to-local, align 4
  %v2_143f4 = icmp eq i32 %v0_143f0, 0
  br i1 %v2_143f4, label %dec_label_pc_143ec.dec_label_pc_143fc_crit_edge, label %dec_label_pc_144c4

dec_label_pc_143ec.dec_label_pc_143fc_crit_edge:  ; preds = %dec_label_pc_143ec
  %v0_143fc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_143fc

dec_label_pc_143fc:                               ; preds = %dec_label_pc_143ec.dec_label_pc_143fc_crit_edge, %dec_label_pc_143dc
  %v2_1443c = phi i32 [ %v0_143fc.pre, %dec_label_pc_143ec.dec_label_pc_143fc_crit_edge ], [ %v0_143b4, %dec_label_pc_143dc ]
  %v1_143fc = inttoptr i32 %v2_1443c to i16*
  %v2_143fc = load i16, i16* %v1_143fc, align 2
  %v3_143fc = zext i16 %v2_143fc to i32
  store i32 %v3_143fc, i32* %r2.global-to-local, align 4
  %v1_14400 = and i32 %v3_143fc, 2
  %v2_14400 = icmp eq i32 %v1_14400, 0
  br i1 %v2_14400, label %dec_label_pc_1442c, label %dec_label_pc_14408

dec_label_pc_14408:                               ; preds = %dec_label_pc_143fc
  %tmp25 = urem i16 %v2_143fc, 2
  %v1_14408 = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_14408
  %v4_1440c = and i32 %tmp21, 4
  %v5_1440c = add i32 %v4_1440c, %v2_1443c
  %v1_14410 = add i32 %v5_1440c, 36
  %v2_14410 = inttoptr i32 %v1_14410 to i8*
  %v3_14410 = load i8, i8* %v2_14410, align 1
  %v4_14410 = zext i8 %v3_14410 to i32
  %v1_14414 = add nsw i32 %v3_143fc, -1
  store i32 %v1_14414, i32* %r2.global-to-local, align 4
  store i32 %v4_14410, i32* %r0.global-to-local, align 4
  %v2_14420 = add i32 %v2_1443c, 40
  %v3_14420 = inttoptr i32 %v2_14420 to i32*
  store i32 0, i32* %v3_14420, align 4
  %v0_14424 = load i32, i32* %r2.global-to-local, align 4
  %v1_14424 = trunc i32 %v0_14424 to i16
  %v2_14424 = load i32, i32* @r4, align 4
  %v3_14424 = inttoptr i32 %v2_14424 to i16*
  store i16 %v1_14424, i16* %v3_14424, align 2
  br label %dec_label_pc_144c8

dec_label_pc_1442c:                               ; preds = %dec_label_pc_143fc
  %v1_1442c = add i32 %v2_1443c, 16
  %v1_14430 = inttoptr i32 %v1_1442c to i32*
  %v2_14430 = load i32, i32* %v1_14430, align 4
  %v3_14430 = add i32 %v2_1443c, 20
  %v4_14430 = inttoptr i32 %v3_14430 to i32*
  %v5_14430 = load i32, i32* %v4_14430, align 4
  %v9_14434 = icmp eq i32 %v5_14430, %v2_14430
  br i1 %v9_14434, label %dec_label_pc_14444, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_1442c
  %v2_14438 = inttoptr i32 %v2_14430 to i8*
  %v3_14438 = load i8, i8* %v2_14438, align 1
  %v4_14438 = zext i8 %v3_14438 to i32
  store i32 %v4_14438, i32* %r0.global-to-local, align 4
  %v6_14438 = add i32 %v2_14430, 1
  store i32 %v6_14438, i32* %v1_14430, align 4
  br label %dec_label_pc_144c8

dec_label_pc_14444:                               ; preds = %dec_label_pc_1442c
  %v1_14444 = add i32 %v2_1443c, 4
  %v2_14444 = inttoptr i32 %v1_14444 to i32*
  %v3_14444 = load i32, i32* %v2_14444, align 4
  %v7_14448 = icmp eq i32 %v3_14444, -2
  br i1 %v7_14448, label %.thread8, label %dec_label_pc_1445c

.thread8:                                         ; preds = %dec_label_pc_14444
  %v2_1444c = or i16 %v2_143fc, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_1444c, i16* %v1_143fc, align 2
  br label %dec_label_pc_144c8

dec_label_pc_1445c:                               ; preds = %dec_label_pc_14444
  %v1_1445c = and i32 %v3_143fc, 768
  %v2_1445c = icmp eq i32 %v1_1445c, 0
  br i1 %v2_1445c, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_1445c
  %v1_14464 = load i32, i32* @r5, align 4
  %v3_14464 = add i32 %v1_14464, 44
  %v4_14464 = inttoptr i32 %v3_14464 to i32*
  %v5_14464 = load i32, i32* %v4_14464, align 4
  store i32 %v5_14464, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_1445c, %bb22
  %v1_14468 = xor i1 %v2_1445c, true
  call void @__pseudo_cond_branch(i1 %v1_14468, i32 ptrtoint (i32* @global_var_141a4.459 to i32))
  %v0_1446c = load i32, i32* @r4, align 4
  %v1_1446c = add i32 %v0_1446c, 8
  store i32 %v1_1446c, i32* %r2.global-to-local, align 4
  %v1_14470 = inttoptr i32 %v1_1446c to i32*
  %v2_14470 = load i32, i32* %v1_14470, align 4
  store i32 %v2_14470, i32* %r2.global-to-local, align 4
  %v3_14470 = add i32 %v0_1446c, 12
  %v4_14470 = inttoptr i32 %v3_14470 to i32*
  %v5_14470 = load i32, i32* %v4_14470, align 4
  %v9_14474 = icmp eq i32 %v5_14470, %v2_14470
  br i1 %v9_14474, label %dec_label_pc_144a8, label %dec_label_pc_1447c

dec_label_pc_1447c:                               ; preds = %.thread10
  %v2_1447c = add i32 %v0_1446c, 24
  %v3_1447c = inttoptr i32 %v2_1447c to i32*
  store i32 %v2_14470, i32* %v3_1447c, align 4
  %v0_14480 = load i32, i32* @r4, align 4
  store i32 %v0_14480, i32* %r0.global-to-local, align 4
  %v2_14484 = call i32 @function_151ec(i32 %v0_14480)
  store i32 %v2_14484, i32* %r0.global-to-local, align 4
  %v2_14488 = icmp eq i32 %v2_14484, 0
  br i1 %v2_14488, label %dec_label_pc_144c4, label %dec_label_pc_14490

dec_label_pc_14490:                               ; preds = %dec_label_pc_1447c
  %v0_14490 = load i32, i32* @r4, align 4
  %v1_14490 = add i32 %v0_14490, 20
  %v2_14490 = inttoptr i32 %v1_14490 to i32*
  %v3_14490 = load i32, i32* %v2_14490, align 4
  %v2_14494 = add i32 %v0_14490, 24
  %v3_14494 = inttoptr i32 %v2_14494 to i32*
  store i32 %v3_14490, i32* %v3_14494, align 4
  %v0_14498 = load i32, i32* @r4, align 4
  %v1_14498 = add i32 %v0_14498, 16
  %v2_14498 = inttoptr i32 %v1_14498 to i32*
  %v3_14498 = load i32, i32* %v2_14498, align 4
  %v1_1449c = inttoptr i32 %v3_14498 to i8*
  %v2_1449c = load i8, i8* %v1_1449c, align 1
  %v3_1449c = zext i8 %v2_1449c to i32
  store i32 %v3_1449c, i32* %r0.global-to-local, align 4
  %v5_1449c = add i32 %v3_14498, 1
  store i32 %v5_1449c, i32* %v2_14498, align 4
  br label %dec_label_pc_144c8

dec_label_pc_144a8:                               ; preds = %.thread10
  %v1_144a8 = inttoptr i32 %v0_1446c to i16*
  store i32 %v0_1446c, i32* %r0.global-to-local, align 4
  %v2_144ac = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_144b4 = call i32 @function_150e0(i16* %v1_144a8, i32 %v2_144ac, i32 1)
  store i32 %v5_144b4, i32* %r0.global-to-local, align 4
  %v2_144b8 = icmp eq i32 %v5_144b4, 0
  br i1 %v2_144b8, label %dec_label_pc_144c4, label %bb23

bb23:                                             ; preds = %dec_label_pc_144a8
  %v4_144bc = load i8, i8* %stack_var_-17, align 1
  %v5_144bc = sext i8 %v4_144bc to i32
  store i32 %v5_144bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_144c8

dec_label_pc_144c4:                               ; preds = %dec_label_pc_144a8, %dec_label_pc_143ec, %dec_label_pc_1447c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_144c8

dec_label_pc_144c8:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_14490, %dec_label_pc_14408, %dec_label_pc_144c4
  %v2_144cc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_144cc, i32* @r4, align 4
  store i32 %v6_143b0, i32* @r5, align 4
  store i32 %v9_143b0, i32* @lr, align 4
  %v1_144d0 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_144d0

; uselistorder directives
  uselistorder i32 %v2_14430, { 1, 0, 2 }
  uselistorder i32 %v2_1443c, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_143b4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_143b4, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 1, 0, 4, 3, 2, 10, 5, 6, 7, 8, 9, 13, 12 }
  uselistorder i32 768, { 1, 0, 2 }
  uselistorder i32 128, { 5, 0, 4, 7, 1, 8, 6, 9, 10, 2, 3, 11, 12 }
  uselistorder label %dec_label_pc_144c8, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_144c4, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_144dc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_144dc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_144dc = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_144e0 = icmp eq i32 %arg2, 0
  store i1 %v2_144e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_14568, label %dec_label_pc_14550.preheader

dec_label_pc_14550.preheader:                     ; preds = %dec_label_pc_144dc
  store i32 %tmp, i32* @r5, align 4
  %v1_145502 = add i32 %arg2, -1
  store i32 %v1_145502, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_145508 = icmp eq i32 %arg2, 1
  store i1 %v7_145508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_145508, label %dec_label_pc_14558, label %dec_label_pc_144fc

dec_label_pc_144fc:                               ; preds = %dec_label_pc_14550.preheader, %dec_label_pc_14550.backedge.dec_label_pc_144fc_crit_edge
  %v0_14520 = phi i32 [ %v0_144fc.pre, %dec_label_pc_14550.backedge.dec_label_pc_144fc_crit_edge ], [ %arg3, %dec_label_pc_14550.preheader ]
  %v1_144fc = add i32 %v0_14520, 16
  %v2_144fc = inttoptr i32 %v1_144fc to i32*
  %v3_144fc = load i32, i32* %v2_144fc, align 4
  store i32 %v3_144fc, i32* %r2.global-to-local, align 4
  %v1_14500 = add i32 %v0_14520, 24
  %v2_14500 = inttoptr i32 %v1_14500 to i32*
  %v3_14500 = load i32, i32* %v2_14500, align 4
  store i32 %v3_14500, i32* %r3.global-to-local, align 4
  %v3_14504 = icmp uge i32 %v3_144fc, %v3_14500
  store i1 %v3_14504, i1* %cpsr_c.global-to-local, align 1
  %v9_14504 = icmp eq i32 %v3_144fc, %v3_14500
  store i1 %v9_14504, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14504, label %dec_label_pc_14520, label %dec_label_pc_1450c

dec_label_pc_1450c:                               ; preds = %dec_label_pc_144fc
  %v1_1450c = inttoptr i32 %v3_144fc to i8*
  %v2_1450c = load i8, i8* %v1_1450c, align 1
  %v3_1450c = zext i8 %v2_1450c to i32
  store i32 %v3_1450c, i32* %r3.global-to-local, align 4
  %v5_1450c = add i32 %v3_144fc, 1
  store i32 %v5_1450c, i32* %r2.global-to-local, align 4
  %v2_14510 = load i32, i32* @r5, align 4
  %v3_14510 = inttoptr i32 %v2_14510 to i8*
  store i8 %v2_1450c, i8* %v3_14510, align 1
  %v4_14510 = load i32, i32* @r5, align 4
  %v5_14510 = add i32 %v4_14510, 1
  store i32 %v5_14510, i32* @r5, align 4
  %v0_14514 = load i32, i32* %r3.global-to-local, align 4
  %v2_14514 = icmp ugt i32 %v0_14514, 9
  store i1 %v2_14514, i1* %cpsr_c.global-to-local, align 1
  %v7_14514 = icmp eq i32 %v0_14514, 10
  store i1 %v7_14514, i1* %cpsr_z.global-to-local, align 1
  %v0_14518 = load i32, i32* %r2.global-to-local, align 4
  %v1_14518 = load i32, i32* @r4, align 4
  %v2_14518 = add i32 %v1_14518, 16
  %v3_14518 = inttoptr i32 %v2_14518 to i32*
  store i32 %v0_14518, i32* %v3_14518, align 4
  br i1 %v7_14514, label %dec_label_pc_14558, label %dec_label_pc_14550.backedge

dec_label_pc_14520:                               ; preds = %dec_label_pc_144fc
  %v1_14520 = inttoptr i32 %v0_14520 to i16*
  %v3_14524 = call i32 @function_143b0(i16* %v1_14520)
  %v3_14528 = icmp eq i32 %v3_14524, -1
  store i1 %v3_14528, i1* %cpsr_c.global-to-local, align 1
  %v8_14528 = icmp eq i32 %v3_14524, -1
  store i1 %v8_14528, i1* %cpsr_z.global-to-local, align 1
  %v1_1452c = urem i32 %v3_14524, 256
  store i32 %v1_1452c, i32* %r3.global-to-local, align 4
  br i1 %v3_14528, label %dec_label_pc_14534, label %dec_label_pc_1454c

dec_label_pc_14534:                               ; preds = %dec_label_pc_14520
  %v0_14534 = load i32, i32* @r4, align 4
  %v1_14534 = inttoptr i32 %v0_14534 to i16*
  %v2_14534 = load i16, i16* %v1_14534, align 2
  %v3_14534 = zext i16 %v2_14534 to i32
  store i32 %v3_14534, i32* %r3.global-to-local, align 4
  %v1_14538 = and i32 %v3_14534, 8
  %v2_14538 = icmp eq i32 %v1_14538, 0
  store i1 %v2_14538, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14538, label %dec_label_pc_14558, label %dec_label_pc_14568

dec_label_pc_1454c:                               ; preds = %dec_label_pc_14520
  %v1_14544 = trunc i32 %v3_14524 to i8
  %v2_14544 = load i32, i32* @r5, align 4
  %v3_14544 = inttoptr i32 %v2_14544 to i8*
  store i8 %v1_14544, i8* %v3_14544, align 1
  %v4_14544 = load i32, i32* @r5, align 4
  %v5_14544 = add i32 %v4_14544, 1
  store i32 %v5_14544, i32* @r5, align 4
  %v0_14548 = load i32, i32* %r3.global-to-local, align 4
  %v2_14548 = icmp ugt i32 %v0_14548, 9
  store i1 %v2_14548, i1* %cpsr_c.global-to-local, align 1
  %v7_14548 = icmp eq i32 %v0_14548, 10
  store i1 %v7_14548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14548, label %dec_label_pc_14558, label %dec_label_pc_14550.backedge

dec_label_pc_14550.backedge:                      ; preds = %dec_label_pc_1454c, %dec_label_pc_1450c
  %v0_14550 = load i32, i32* %r6.global-to-local, align 4
  %v1_14550 = add i32 %v0_14550, -1
  store i32 %v1_14550, i32* %r6.global-to-local, align 4
  %v2_14550 = icmp ne i32 %v0_14550, 0
  store i1 %v2_14550, i1* %cpsr_c.global-to-local, align 1
  %v7_14550 = icmp eq i32 %v0_14550, 1
  store i1 %v7_14550, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14550, label %dec_label_pc_14558, label %dec_label_pc_14550.backedge.dec_label_pc_144fc_crit_edge

dec_label_pc_14550.backedge.dec_label_pc_144fc_crit_edge: ; preds = %dec_label_pc_14550.backedge
  %v0_144fc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_144fc

dec_label_pc_14558:                               ; preds = %dec_label_pc_1454c, %dec_label_pc_14550.backedge, %dec_label_pc_1450c, %dec_label_pc_14550.preheader, %dec_label_pc_14534
  %v0_14558 = load i32, i32* @r5, align 4
  %v1_14558 = load i32, i32* @r7, align 4
  %v3_14558 = icmp uge i32 %v0_14558, %v1_14558
  store i1 %v3_14558, i1* %cpsr_c.global-to-local, align 1
  %v9_14558 = icmp eq i32 %v0_14558, %v1_14558
  store i1 %v9_14558, i1* %cpsr_z.global-to-local, align 1
  %v2_1455c = xor i1 %v9_14558, true
  %v3_1455c = and i1 %v3_14558, %v2_1455c
  br i1 %v3_1455c, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_14558
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_14560 = inttoptr i32 %v0_14558 to i8*
  store i8 0, i8* %v7_14560, align 1
  %v0_14564.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_14564.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_14558, %bb
  %v1_14564 = phi i1 [ %v1_14564.pre, %bb ], [ %v9_14558, %dec_label_pc_14558 ]
  %v0_14564 = phi i1 [ %v0_14564.pre, %bb ], [ %v3_14558, %dec_label_pc_14558 ]
  %v2_14564 = xor i1 %v1_14564, true
  %v3_14564 = and i1 %v0_14564, %v2_14564
  br i1 %v3_14564, label %.dec_label_pc_1456c_crit_edge, label %dec_label_pc_14568

.dec_label_pc_1456c_crit_edge:                    ; preds = %.thread14
  %v0_1456c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1456c

dec_label_pc_14568:                               ; preds = %dec_label_pc_144dc, %dec_label_pc_14534, %.thread14
  br label %dec_label_pc_1456c

dec_label_pc_1456c:                               ; preds = %.dec_label_pc_1456c_crit_edge, %dec_label_pc_14568
  %v0_1456c = phi i32 [ %v0_1456c.pre, %.dec_label_pc_1456c_crit_edge ], [ 0, %dec_label_pc_14568 ]
  store i32 %v6_144dc, i32* @r5, align 4
  ret i32 %v0_1456c

; uselistorder directives
  uselistorder i1 %v9_14558, { 1, 0, 2 }
  uselistorder i32 %v1_14558, { 1, 0 }
  uselistorder i32 %v0_14558, { 0, 2, 1 }
  uselistorder i32 %v0_14550, { 2, 0, 1 }
  uselistorder i32 %v0_14548, { 1, 0 }
  uselistorder i32 %v3_14524, { 2, 1, 0, 3 }
  uselistorder i32 %v0_14514, { 1, 0 }
  uselistorder i32 %v3_144fc, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_14520, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i1 true, { 0, 1, 69, 94, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 67, 26, 27, 28, 29, 30, 74, 73, 31, 95, 96, 86, 97, 98, 34, 99, 35, 36, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 32, 33, 110, 111, 112, 65, 68, 85, 84, 47, 48, 49, 113, 50, 51, 75, 76, 80, 77, 81, 71, 79, 114, 72, 83, 115, 37, 116, 38, 39, 40, 117, 87, 88, 41, 42, 118, 89, 90, 43, 44, 119, 91, 92, 45, 46, 70, 120, 121, 82, 122, 52, 78, 53, 54, 66, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 93 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_1456c, { 1, 0 }
  uselistorder label %dec_label_pc_14568, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_14558, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_144fc, { 1, 0 }
}

define i32 @function_14580() local_unnamed_addr {
dec_label_pc_14580:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_14580 = load i32, i32* @r1, align 4
  %v1_14580 = load i32, i32* @r0, align 4
  %v2_14580 = sub i32 %v0_14580, %v1_14580
  %v3_14580 = icmp ult i32 %v0_14580, %v1_14580
  %v4_14580 = xor i32 %v1_14580, %v0_14580
  %v5_14580 = xor i32 %v2_14580, %v0_14580
  %v6_14580 = and i32 %v5_14580, %v4_14580
  %v7_14580 = icmp slt i32 %v6_14580, 0
  store i1 %v7_14580, i1* %cpsr_v.global-to-local, align 1
  %v8_14580 = icmp slt i32 %v2_14580, 0
  store i1 %v8_14580, i1* %cpsr_n.global-to-local, align 1
  %v9_14580 = icmp eq i32 %v0_14580, %v1_14580
  store i1 %v9_14580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14580, label %dec_label_pc_147d4, label %dec_label_pc_14588

dec_label_pc_14588:                               ; preds = %dec_label_pc_14580
  br i1 %v9_14580, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_14588
  %merge = phi i32 [ %v0_14580, %dec_label_pc_14588 ], [ %v2_14868, %bb150 ], [ %v11_14884, %bb153 ], [ %v7_14884, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_14588
  %v5_1458c = inttoptr i32 %v1_14580 to i8*
  store i8* %v5_1458c, i8** %stack_var_-8, align 4
  %v8_1458c = load i32, i32* @lr, align 4
  %v0_14590 = load i32, i32* @r2, align 4
  %v2_14590 = add i32 %v0_14590, -4
  store i32 %v2_14590, i32* %r2.global-to-local, align 4
  %v4_14590 = sub i32 3, %v0_14590
  %v5_14590 = and i32 %v4_14590, %v0_14590
  %v6_14590 = icmp slt i32 %v5_14590, 0
  store i1 %v6_14590, i1* %cpsr_v.global-to-local, align 1
  %v7_14590 = icmp slt i32 %v2_14590, 0
  store i1 %v7_14590, i1* %cpsr_n.global-to-local, align 1
  %v8_14590 = icmp eq i32 %v0_14590, 4
  store i1 %v8_14590, i1* %cpsr_z.global-to-local, align 1
  %v5_14594 = icmp slt i32 %v0_14590, 4
  br i1 %v5_14594, label %bb140, label %dec_label_pc_14598

dec_label_pc_14598:                               ; preds = %bb
  %v1_14598 = urem i32 %v1_14580, 4
  store i32 %v1_14598, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14598 = icmp eq i32 %v1_14598, 0
  store i1 %v2_14598, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14598, label %dec_label_pc_145a0, label %dec_label_pc_1464c

dec_label_pc_145a0:                               ; preds = %dec_label_pc_14598
  %v1_145a0 = urem i32 %v0_14580, 4
  store i32 %v1_145a0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_145a0 = icmp eq i32 %v1_145a0, 0
  store i1 %v2_145a0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_14580 to i2
  br i1 %v2_145a0, label %dec_label_pc_145a8, label %dec_label_pc_1467c

dec_label_pc_145a8:                               ; preds = %dec_label_pc_145a0, %dec_label_pc_14674
  %v0_145c094 = phi i32 [ %v1_14580, %dec_label_pc_145a0 ], [ %v0_1479c77, %dec_label_pc_14674 ]
  %v0_145bc93 = phi i32 [ %v0_14580, %dec_label_pc_145a0 ], [ %v0_14674, %dec_label_pc_14674 ]
  %v0_145a8 = phi i32 [ %v2_14590, %dec_label_pc_145a0 ], [ %v2_1466c, %dec_label_pc_14674 ]
  %v1_145a8 = add i32 %v0_145a8, -8
  store i32 %v1_145a8, i32* %r2.global-to-local, align 4
  %v3_145a8 = sub i32 7, %v0_145a8
  %v4_145a8 = and i32 %v3_145a8, %v0_145a8
  %v5_145a8 = icmp slt i32 %v4_145a8, 0
  store i1 %v5_145a8, i1* %cpsr_v.global-to-local, align 1
  %v6_145a8 = icmp slt i32 %v1_145a8, 0
  store i1 %v6_145a8, i1* %cpsr_n.global-to-local, align 1
  %v7_145a8 = icmp eq i32 %v0_145a8, 8
  store i1 %v7_145a8, i1* %cpsr_z.global-to-local, align 1
  %v2_145ac = xor i1 %v6_145a8, %v5_145a8
  br i1 %v2_145ac, label %dec_label_pc_145fc, label %dec_label_pc_145b0

dec_label_pc_145b0:                               ; preds = %dec_label_pc_145a8
  %v1_145b0 = add i32 %v0_145a8, -28
  store i32 %v1_145b0, i32* %r2.global-to-local, align 4
  %v3_145b0 = sub i32 27, %v0_145a8
  %v4_145b0 = and i32 %v3_145b0, %v1_145a8
  %v5_145b0 = icmp slt i32 %v4_145b0, 0
  store i1 %v5_145b0, i1* %cpsr_v.global-to-local, align 1
  %v6_145b0 = icmp slt i32 %v1_145b0, 0
  store i1 %v6_145b0, i1* %cpsr_n.global-to-local, align 1
  %v7_145b0 = icmp eq i32 %v1_145a8, 20
  store i1 %v7_145b0, i1* %cpsr_z.global-to-local, align 1
  %v2_145b4 = xor i1 %v6_145b0, %v5_145b0
  br i1 %v2_145b4, label %dec_label_pc_145e8, label %dec_label_pc_145b8

dec_label_pc_145b8:                               ; preds = %dec_label_pc_145b0
  %v0_145b8 = load i32, i32* @r4, align 4
  store i32 %v0_145b8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_145bc

dec_label_pc_145bc:                               ; preds = %dec_label_pc_145bc.dec_label_pc_145bc_crit_edge, %dec_label_pc_145b8
  %v0_145c0 = phi i32 [ %v12_145c8, %dec_label_pc_145bc.dec_label_pc_145bc_crit_edge ], [ %v0_145c094, %dec_label_pc_145b8 ]
  %v0_145bc = phi i32 [ %v0_145bc.pre, %dec_label_pc_145bc.dec_label_pc_145bc_crit_edge ], [ %v0_145bc93, %dec_label_pc_145b8 ]
  %v1_145bc = inttoptr i32 %v0_145bc to i32*
  %v2_145bc = load i32, i32* %v1_145bc, align 4
  %v3_145bc = add i32 %v0_145bc, 4
  %v4_145bc = inttoptr i32 %v3_145bc to i32*
  %v5_145bc = load i32, i32* %v4_145bc, align 4
  store i32 %v5_145bc, i32* %r4.global-to-local, align 4
  %v6_145bc = add i32 %v0_145bc, 8
  %v7_145bc = inttoptr i32 %v6_145bc to i32*
  %v8_145bc = load i32, i32* %v7_145bc, align 4
  store i32 %v8_145bc, i32* %ip.global-to-local, align 4
  %v9_145bc = add i32 %v0_145bc, 12
  %v10_145bc = inttoptr i32 %v9_145bc to i32*
  %v11_145bc = load i32, i32* %v10_145bc, align 4
  store i32 %v11_145bc, i32* %lr.global-to-local, align 4
  %v12_145bc = add i32 %v0_145bc, 16
  store i32 %v12_145bc, i32* %r1.global-to-local, align 4
  %v1_145c0 = inttoptr i32 %v0_145c0 to i32*
  store i32 %v2_145bc, i32* %v1_145c0, align 4
  %v3_145c0 = add i32 %v0_145c0, 4
  %v4_145c0 = inttoptr i32 %v3_145c0 to i32*
  %v5_145c0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_145c0, i32* %v4_145c0, align 4
  %v6_145c0 = add i32 %v0_145c0, 8
  %v7_145c0 = inttoptr i32 %v6_145c0 to i32*
  %v8_145c0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_145c0, i32* %v7_145c0, align 4
  %v9_145c0 = add i32 %v0_145c0, 12
  %v10_145c0 = inttoptr i32 %v9_145c0 to i32*
  %v11_145c0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_145c0, i32* %v10_145c0, align 4
  %v12_145c0 = add i32 %v0_145c0, 16
  store i32 %v12_145c0, i32* %r0.global-to-local, align 4
  %v0_145c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_145c4 = inttoptr i32 %v0_145c4 to i32*
  %v2_145c4 = load i32, i32* %v1_145c4, align 4
  store i32 %v2_145c4, i32* @r3, align 4
  %v3_145c4 = add i32 %v0_145c4, 4
  %v4_145c4 = inttoptr i32 %v3_145c4 to i32*
  %v5_145c4 = load i32, i32* %v4_145c4, align 4
  store i32 %v5_145c4, i32* %r4.global-to-local, align 4
  %v6_145c4 = add i32 %v0_145c4, 8
  %v7_145c4 = inttoptr i32 %v6_145c4 to i32*
  %v8_145c4 = load i32, i32* %v7_145c4, align 4
  store i32 %v8_145c4, i32* @ip, align 4
  %v9_145c4 = add i32 %v0_145c4, 12
  %v10_145c4 = inttoptr i32 %v9_145c4 to i32*
  %v11_145c4 = load i32, i32* %v10_145c4, align 4
  store i32 %v11_145c4, i32* %lr.global-to-local, align 4
  %v12_145c4 = add i32 %v0_145c4, 16
  store i32 %v12_145c4, i32* @r1, align 4
  %v1_145c8 = inttoptr i32 %v12_145c0 to i32*
  store i32 %v2_145c4, i32* %v1_145c8, align 4
  %v3_145c8 = add i32 %v0_145c0, 20
  %v4_145c8 = inttoptr i32 %v3_145c8 to i32*
  %v5_145c8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_145c8, i32* %v4_145c8, align 4
  %v6_145c8 = add i32 %v0_145c0, 24
  %v7_145c8 = inttoptr i32 %v6_145c8 to i32*
  %v8_145c8 = load i32, i32* @ip, align 4
  store i32 %v8_145c8, i32* %v7_145c8, align 4
  %v9_145c8 = add i32 %v0_145c0, 28
  %v10_145c8 = inttoptr i32 %v9_145c8 to i32*
  %v11_145c8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_145c8, i32* %v10_145c8, align 4
  %v12_145c8 = add i32 %v0_145c0, 32
  store i32 %v12_145c8, i32* @r0, align 4
  %v0_145cc = load i32, i32* %r2.global-to-local, align 4
  %v1_145cc = add i32 %v0_145cc, -32
  store i32 %v1_145cc, i32* %r2.global-to-local, align 4
  %v3_145cc = sub i32 31, %v0_145cc
  %v4_145cc = and i32 %v3_145cc, %v0_145cc
  %v5_145cc = icmp slt i32 %v4_145cc, 0
  %v6_145cc = icmp slt i32 %v1_145cc, 0
  %v2_145d0 = xor i1 %v6_145cc, %v5_145cc
  br i1 %v2_145d0, label %dec_label_pc_145d4, label %dec_label_pc_145bc.dec_label_pc_145bc_crit_edge

dec_label_pc_145bc.dec_label_pc_145bc_crit_edge:  ; preds = %dec_label_pc_145bc
  %v0_145bc.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_145bc

dec_label_pc_145d4:                               ; preds = %dec_label_pc_145bc
  %v1_145d4 = add i32 %v0_145cc, -16
  %v3_145d4 = add i32 %v0_145cc, 2147483616
  %v4_145d4 = and i32 %v1_145d4, %v3_145d4
  %v5_145d4 = icmp slt i32 %v4_145d4, 0
  store i1 %v5_145d4, i1* %cpsr_v.global-to-local, align 1
  %v6_145d4 = icmp slt i32 %v1_145d4, 0
  store i1 %v6_145d4, i1* %cpsr_n.global-to-local, align 1
  %v7_145d4 = icmp eq i32 %v1_145d4, 0
  store i1 %v7_145d4, i1* %cpsr_z.global-to-local, align 1
  %v2_145d8 = xor i1 %v6_145d4, %v5_145d4
  br i1 %v2_145d8, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_145d4
  %v3_145d8 = load i32, i32* @r1, align 4
  %v4_145d8 = inttoptr i32 %v3_145d8 to i32*
  %v5_145d8 = load i32, i32* %v4_145d8, align 4
  store i32 %v5_145d8, i32* @r3, align 4
  %v6_145d8 = add i32 %v3_145d8, 4
  %v7_145d8 = inttoptr i32 %v6_145d8 to i32*
  %v8_145d8 = load i32, i32* %v7_145d8, align 4
  store i32 %v8_145d8, i32* %r4.global-to-local, align 4
  %v9_145d8 = add i32 %v3_145d8, 8
  %v10_145d8 = inttoptr i32 %v9_145d8 to i32*
  %v11_145d8 = load i32, i32* %v10_145d8, align 4
  store i32 %v11_145d8, i32* @ip, align 4
  %v12_145d8 = add i32 %v3_145d8, 12
  %v13_145d8 = inttoptr i32 %v12_145d8 to i32*
  %v14_145d8 = load i32, i32* %v13_145d8, align 4
  store i32 %v14_145d8, i32* %lr.global-to-local, align 4
  %v15_145d8 = add i32 %v3_145d8, 16
  store i32 %v15_145d8, i32* @r1, align 4
  %v4_145dc = inttoptr i32 %v12_145c8 to i32*
  store i32 %v5_145d8, i32* %v4_145dc, align 4
  %v6_145dc = add i32 %v0_145c0, 36
  %v7_145dc = inttoptr i32 %v6_145dc to i32*
  %v8_145dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_145dc, i32* %v7_145dc, align 4
  %v9_145dc = add i32 %v0_145c0, 40
  %v10_145dc = inttoptr i32 %v9_145dc to i32*
  %v11_145dc = load i32, i32* @ip, align 4
  store i32 %v11_145dc, i32* %v10_145dc, align 4
  %v12_145dc = add i32 %v0_145c0, 44
  %v13_145dc = inttoptr i32 %v12_145dc to i32*
  %v14_145dc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_145dc, i32* %v13_145dc, align 4
  %v15_145dc = add i32 %v0_145c0, 48
  store i32 %v15_145dc, i32* @r0, align 4
  %v3_145e0 = load i32, i32* %r2.global-to-local, align 4
  %v4_145e0 = add i32 %v3_145e0, -16
  store i32 %v4_145e0, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_145d4, %bb136
  %v3_145f0102111 = phi i32 [ %v15_145dc, %bb136 ], [ %v12_145c8, %dec_label_pc_145d4 ]
  %v0_145e8.pre = phi i32 [ %v4_145e0, %bb136 ], [ %v1_145cc, %dec_label_pc_145d4 ]
  %v2_145e4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_145e4, i32* @r4, align 4
  br label %dec_label_pc_145e8

dec_label_pc_145e8:                               ; preds = %dec_label_pc_145b0, %bb137
  %v3_145f0101 = phi i32 [ %v0_145c094, %dec_label_pc_145b0 ], [ %v3_145f0102111, %bb137 ]
  %v0_145e8 = phi i32 [ %v1_145b0, %dec_label_pc_145b0 ], [ %v0_145e8.pre, %bb137 ]
  %v1_145e8 = add i32 %v0_145e8, 20
  store i32 %v1_145e8, i32* %r2.global-to-local, align 4
  %v3_145e8 = sub i32 0, %v0_145e8
  %v4_145e8 = and i32 %v1_145e8, %v3_145e8
  %v5_145e8 = icmp slt i32 %v4_145e8, 0
  store i1 %v5_145e8, i1* %cpsr_v.global-to-local, align 1
  %v6_145e8 = icmp slt i32 %v1_145e8, 0
  store i1 %v6_145e8, i1* %cpsr_n.global-to-local, align 1
  %v7_145e8 = icmp eq i32 %v1_145e8, 0
  store i1 %v7_145e8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_145ec

dec_label_pc_145ec:                               ; preds = %.thread115, %dec_label_pc_145e8
  %v0_145fc.pre157 = phi i32 [ %v0_145fc.pre, %.thread115 ], [ %v1_145e8, %dec_label_pc_145e8 ]
  %v3_145f0 = phi i32 [ %v3_145f099116, %.thread115 ], [ %v3_145f0101, %dec_label_pc_145e8 ]
  %v1_145f4 = phi i1 [ %v1_145f8, %.thread115 ], [ %v5_145e8, %dec_label_pc_145e8 ]
  %v0_145f4 = phi i1 [ %v0_145f8, %.thread115 ], [ %v6_145e8, %dec_label_pc_145e8 ]
  %v2_145ec = xor i1 %v1_145f4, %v0_145f4
  br i1 %v2_145ec, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_145ec
  %v3_145ec = load i32, i32* @r1, align 4
  %v4_145ec = inttoptr i32 %v3_145ec to i32*
  %v5_145ec = load i32, i32* %v4_145ec, align 4
  store i32 %v5_145ec, i32* @r3, align 4
  %v6_145ec = add i32 %v3_145ec, 4
  %v7_145ec = inttoptr i32 %v6_145ec to i32*
  %v8_145ec = load i32, i32* %v7_145ec, align 4
  store i32 %v8_145ec, i32* @ip, align 4
  %v9_145ec = add i32 %v3_145ec, 8
  %v10_145ec = inttoptr i32 %v9_145ec to i32*
  %v11_145ec = load i32, i32* %v10_145ec, align 4
  store i32 %v11_145ec, i32* %lr.global-to-local, align 4
  %v12_145ec = add i32 %v3_145ec, 12
  store i32 %v12_145ec, i32* @r1, align 4
  %v4_145f0 = inttoptr i32 %v3_145f0 to i32*
  store i32 %v5_145ec, i32* %v4_145f0, align 4
  %v6_145f0 = add i32 %v3_145f0, 4
  %v7_145f0 = inttoptr i32 %v6_145f0 to i32*
  %v8_145f0 = load i32, i32* @ip, align 4
  store i32 %v8_145f0, i32* %v7_145f0, align 4
  %v9_145f0 = add i32 %v3_145f0, 8
  %v10_145f0 = inttoptr i32 %v9_145f0 to i32*
  %v11_145f0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_145f0, i32* %v10_145f0, align 4
  %v12_145f0 = add i32 %v3_145f0, 12
  store i32 %v12_145f0, i32* @r0, align 4
  %v3_145f4 = load i32, i32* %r2.global-to-local, align 4
  %v4_145f4 = add i32 %v3_145f4, -12
  store i32 %v4_145f4, i32* %r2.global-to-local, align 4
  %v6_145f4 = sub i32 11, %v3_145f4
  %v7_145f4 = and i32 %v6_145f4, %v3_145f4
  %v8_145f4 = icmp slt i32 %v7_145f4, 0
  store i1 %v8_145f4, i1* %cpsr_v.global-to-local, align 1
  %v9_145f4 = icmp slt i32 %v4_145f4, 0
  store i1 %v9_145f4, i1* %cpsr_n.global-to-local, align 1
  %v10_145f4 = icmp eq i32 %v3_145f4, 12
  store i1 %v10_145f4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_145ec, %bb138
  %v0_145fc.pre = phi i32 [ %v4_145f4, %bb138 ], [ %v0_145fc.pre157, %dec_label_pc_145ec ]
  %v3_145f099116 = phi i32 [ %v12_145f0, %bb138 ], [ %v3_145f0, %dec_label_pc_145ec ]
  %v1_145f8 = phi i1 [ %v8_145f4, %bb138 ], [ %v1_145f4, %dec_label_pc_145ec ]
  %v0_145f8 = phi i1 [ %v9_145f4, %bb138 ], [ %v0_145f4, %dec_label_pc_145ec ]
  %v2_145f8 = xor i1 %v1_145f8, %v0_145f8
  br i1 %v2_145f8, label %dec_label_pc_145fc, label %dec_label_pc_145ec

dec_label_pc_145fc:                               ; preds = %.thread115, %dec_label_pc_145a8
  %v4_1460c = phi i32 [ %v0_145c094, %dec_label_pc_145a8 ], [ %v3_145f099116, %.thread115 ]
  %v0_145fc = phi i32 [ %v1_145a8, %dec_label_pc_145a8 ], [ %v0_145fc.pre, %.thread115 ]
  %v1_145fc = add i32 %v0_145fc, 8
  store i32 %v1_145fc, i32* %r2.global-to-local, align 4
  %v3_145fc = sub i32 0, %v0_145fc
  %v4_145fc = and i32 %v1_145fc, %v3_145fc
  %v5_145fc = icmp slt i32 %v4_145fc, 0
  store i1 %v5_145fc, i1* %cpsr_v.global-to-local, align 1
  %v6_145fc = icmp slt i32 %v1_145fc, 0
  store i1 %v6_145fc, i1* %cpsr_n.global-to-local, align 1
  %v7_145fc = icmp eq i32 %v1_145fc, 0
  store i1 %v7_145fc, i1* %cpsr_z.global-to-local, align 1
  %v2_14600 = xor i1 %v6_145fc, %v5_145fc
  br i1 %v2_14600, label %bb140, label %dec_label_pc_14604

dec_label_pc_14604:                               ; preds = %dec_label_pc_145fc
  %v1_14604 = add i32 %v0_145fc, 4
  store i32 %v1_14604, i32* %r2.global-to-local, align 4
  %v3_14604 = sub i32 -5, %v0_145fc
  %v4_14604 = and i32 %v3_14604, %v1_145fc
  %v5_14604 = icmp slt i32 %v4_14604, 0
  store i1 %v5_14604, i1* %cpsr_v.global-to-local, align 1
  %v6_14604 = icmp slt i32 %v1_14604, 0
  store i1 %v6_14604, i1* %cpsr_n.global-to-local, align 1
  %v7_14604 = icmp eq i32 %v1_145fc, 4
  store i1 %v7_14604, i1* %cpsr_z.global-to-local, align 1
  %v2_14608 = xor i1 %v6_14604, %v5_14604
  %v3_14608 = load i32, i32* @r1, align 4
  %v4_14608 = inttoptr i32 %v3_14608 to i32*
  %v5_14608 = load i32, i32* %v4_14608, align 4
  store i32 %v5_14608, i32* @r3, align 4
  %v7_14608 = add i32 %v3_14608, 4
  br i1 %v2_14608, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_14604
  store i32 %v7_14608, i32* @r1, align 4
  %v5_1460c = inttoptr i32 %v4_1460c to i32*
  store i32 %v5_14608, i32* %v5_1460c, align 4
  %v6_1460c = load i32, i32* @r0, align 4
  %v7_1460c = add i32 %v6_1460c, 4
  store i32 %v7_1460c, i32* @r0, align 4
  %v0_1461c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_14604
  %v7_14610 = inttoptr i32 %v7_14608 to i32*
  %v8_14610 = load i32, i32* %v7_14610, align 4
  store i32 %v8_14610, i32* @ip, align 4
  %v9_14610 = add i32 %v3_14608, 8
  store i32 %v9_14610, i32* @r1, align 4
  %v4_14614 = inttoptr i32 %v4_1460c to i32*
  store i32 %v5_14608, i32* %v4_14614, align 4
  %v6_14614 = add i32 %v4_1460c, 4
  %v7_14614 = inttoptr i32 %v6_14614 to i32*
  %v8_14614 = load i32, i32* @ip, align 4
  store i32 %v8_14614, i32* %v7_14614, align 4
  %v9_14614 = add i32 %v4_1460c, 8
  store i32 %v9_14614, i32* @r0, align 4
  %v3_14618 = load i32, i32* %r2.global-to-local, align 4
  %v4_14618 = add i32 %v3_14618, -4
  store i32 %v4_14618, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_145fc, %bb, %dec_label_pc_147cc, %dec_label_pc_14760, %dec_label_pc_146f4, %bb139
  %v0_1461c = phi i32 [ %v0_1461c.pre, %.thread122 ], [ %v2_1466c, %.thread128 ], [ %v1_145fc, %dec_label_pc_145fc ], [ %v2_14590, %bb ], [ %v0_1461c61, %dec_label_pc_147cc ], [ %v0_1461c60, %dec_label_pc_14760 ], [ %v0_1461c59, %dec_label_pc_146f4 ], [ %v4_14618, %bb139 ]
  %v1_1461c = add i32 %v0_1461c, 4
  store i32 %v1_1461c, i32* %r2.global-to-local, align 4
  %v3_1461c = sub i32 0, %v0_1461c
  %v4_1461c = and i32 %v1_1461c, %v3_1461c
  %v5_1461c = icmp slt i32 %v4_1461c, 0
  store i1 %v5_1461c, i1* %cpsr_v.global-to-local, align 1
  %v6_1461c = icmp slt i32 %v1_1461c, 0
  store i1 %v6_1461c, i1* %cpsr_n.global-to-local, align 1
  %v7_1461c = icmp eq i32 %v1_1461c, 0
  store i1 %v7_1461c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1461c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_14624.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_14620 = load i8*, i8** %stack_var_-8, align 4
  %v4_14620 = ptrtoint i8* %v3_14620 to i32
  store i32 %v4_14620, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_14624 = phi i32 [ %v0_14624.pre, %bb140.bb142_crit_edge ], [ %v8_1458c, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_1461c, i32 %v0_14624)
  %v0_14628 = load i32, i32* %r2.global-to-local, align 4
  %v1_14628 = add i32 %v0_14628, -2
  %v3_14628 = sub i32 1, %v0_14628
  %v4_14628 = and i32 %v3_14628, %v0_14628
  %v5_14628 = icmp slt i32 %v4_14628, 0
  store i1 %v5_14628, i1* %cpsr_v.global-to-local, align 1
  %v6_14628 = icmp slt i32 %v1_14628, 0
  store i1 %v6_14628, i1* %cpsr_n.global-to-local, align 1
  %v7_14628 = icmp eq i32 %v0_14628, 2
  store i1 %v7_14628, i1* %cpsr_z.global-to-local, align 1
  %v0_1462c = load i32, i32* @r1, align 4
  %v1_1462c = inttoptr i32 %v0_1462c to i8*
  %v2_1462c = load i8, i8* %v1_1462c, align 1
  %v5_1462c = add i32 %v0_1462c, 1
  store i32 %v5_1462c, i32* %r1.global-to-local, align 4
  %v2_14630 = load i32, i32* @r0, align 4
  %v3_14630 = inttoptr i32 %v2_14630 to i8*
  store i8 %v2_1462c, i8* %v3_14630, align 1
  %v4_14630 = load i32, i32* @r0, align 4
  %v5_14630 = add i32 %v4_14630, 1
  store i32 %v5_14630, i32* %r0.global-to-local, align 4
  %v0_14634 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14634 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14634 = xor i1 %v0_14634, %v1_14634
  br i1 %v2_14634, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_14634 = load i32, i32* %r1.global-to-local, align 4
  %v4_14634 = inttoptr i32 %v3_14634 to i8*
  %v5_14634 = load i8, i8* %v4_14634, align 1
  %v8_14634 = add i32 %v3_14634, 1
  store i32 %v8_14634, i32* %r1.global-to-local, align 4
  %v6_14638 = inttoptr i32 %v5_14630 to i8*
  store i8 %v5_14634, i8* %v6_14638, align 1
  %v7_14638 = load i32, i32* %r0.global-to-local, align 4
  %v8_14638 = add i32 %v7_14638, 1
  store i32 %v8_14638, i32* %r0.global-to-local, align 4
  %v1_1463c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1463c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_14640 = phi i32 [ %v8_14638, %bb143 ], [ %v5_14630, %bb142 ]
  %v2_14640 = phi i1 [ %v2_1463c.pre, %bb143 ], [ %v1_14634, %bb142 ]
  %v1_14640 = phi i1 [ %v1_1463c.pre, %bb143 ], [ %v0_14634, %bb142 ]
  %v0_1463c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_1463c = xor i1 %v2_14640, %v1_14640
  %v4_1463c = or i1 %v0_1463c, %v3_1463c
  br i1 %v4_1463c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_1463c = load i32, i32* %r1.global-to-local, align 4
  %v6_1463c = inttoptr i32 %v5_1463c to i8*
  %v7_1463c = load i8, i8* %v6_1463c, align 1
  %v10_1463c = add i32 %v5_1463c, 1
  store i32 %v10_1463c, i32* %r1.global-to-local, align 4
  %v8_14640 = inttoptr i32 %v7_14640 to i8*
  store i8 %v7_1463c, i8* %v8_14640, align 1
  %v9_14640 = load i32, i32* %r0.global-to-local, align 4
  %v10_14640 = add i32 %v9_14640, 1
  store i32 %v10_14640, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_14644 = load i8*, i8** %stack_var_-8, align 4
  %v3_14644 = ptrtoint i8* %v2_14644 to i32
  store i32 %v3_14644, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_1458c)
  %v0_1464c.pre = load i32, i32* @ip, align 4
  %v0_14654.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_14658.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1464c

dec_label_pc_1464c:                               ; preds = %dec_label_pc_14598, %.thread126
  %v2_14658 = phi i32 [ %v1_14580, %dec_label_pc_14598 ], [ %v2_14658.pre, %.thread126 ]
  %v0_14654 = phi i32 [ %v0_14580, %dec_label_pc_14598 ], [ %v0_14654.pre, %.thread126 ]
  %v0_1464c = phi i32 [ %v1_14598, %dec_label_pc_14598 ], [ %v0_1464c.pre, %.thread126 ]
  %v1_1464c = sub i32 4, %v0_1464c
  store i32 %v1_1464c, i32* @ip, align 4
  %v1_14650 = add i32 %v1_1464c, -2
  %v3_14650 = sub i32 1, %v1_1464c
  %v4_14650 = and i32 %v3_14650, %v1_1464c
  %v5_14650 = icmp slt i32 %v4_14650, 0
  store i1 %v5_14650, i1* %cpsr_v.global-to-local, align 1
  %v6_14650 = icmp slt i32 %v1_14650, 0
  store i1 %v6_14650, i1* %cpsr_n.global-to-local, align 1
  %v7_14650 = icmp eq i32 %v1_1464c, 2
  store i1 %v7_14650, i1* %cpsr_z.global-to-local, align 1
  %v1_14654 = inttoptr i32 %v0_14654 to i8*
  %v2_14654 = load i8, i8* %v1_14654, align 1
  %v3_14654 = zext i8 %v2_14654 to i32
  store i32 %v3_14654, i32* @r3, align 4
  %v5_14654 = add i32 %v0_14654, 1
  store i32 %v5_14654, i32* @r1, align 4
  %v3_14658 = inttoptr i32 %v2_14658 to i8*
  store i8 %v2_14654, i8* %v3_14658, align 1
  %v4_14658 = load i32, i32* @r0, align 4
  %v5_14658 = add i32 %v4_14658, 1
  store i32 %v5_14658, i32* @r0, align 4
  %v0_1465c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1465c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_1465c = xor i1 %v0_1465c, %v1_1465c
  br i1 %v2_1465c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_1464c
  %v3_1465c = load i32, i32* @r1, align 4
  %v4_1465c = inttoptr i32 %v3_1465c to i8*
  %v5_1465c = load i8, i8* %v4_1465c, align 1
  %v6_1465c = zext i8 %v5_1465c to i32
  store i32 %v6_1465c, i32* @r3, align 4
  %v8_1465c = add i32 %v3_1465c, 1
  store i32 %v8_1465c, i32* @r1, align 4
  %v6_14660 = inttoptr i32 %v5_14658 to i8*
  store i8 %v5_1465c, i8* %v6_14660, align 1
  %v7_14660 = load i32, i32* @r0, align 4
  %v8_14660 = add i32 %v7_14660, 1
  store i32 %v8_14660, i32* @r0, align 4
  %v1_14664.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14664.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_1464c, %bb145
  %v7_14668 = phi i32 [ %v8_14660, %bb145 ], [ %v5_14658, %dec_label_pc_1464c ]
  %v2_14668 = phi i1 [ %v2_14664.pre, %bb145 ], [ %v1_1465c, %dec_label_pc_1464c ]
  %v1_14668 = phi i1 [ %v1_14664.pre, %bb145 ], [ %v0_1465c, %dec_label_pc_1464c ]
  %v0_14664 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14664 = xor i1 %v2_14668, %v1_14668
  %v4_14664 = or i1 %v0_14664, %v3_14664
  br i1 %v4_14664, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_14664 = load i32, i32* @r1, align 4
  %v6_14664 = inttoptr i32 %v5_14664 to i8*
  %v7_14664 = load i8, i8* %v6_14664, align 1
  %v8_14664 = zext i8 %v7_14664 to i32
  store i32 %v8_14664, i32* @r3, align 4
  %v10_14664 = add i32 %v5_14664, 1
  store i32 %v10_14664, i32* @r1, align 4
  %v8_14668 = inttoptr i32 %v7_14668 to i8*
  store i8 %v7_14664, i8* %v8_14668, align 1
  %v9_14668 = load i32, i32* @r0, align 4
  %v10_14668 = add i32 %v9_14668, 1
  store i32 %v10_14668, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_1479c77 = phi i32 [ %v10_14668, %bb146 ], [ %v7_14668, %.thread127 ]
  %v0_1466c = load i32, i32* %r2.global-to-local, align 4
  %v1_1466c = load i32, i32* @ip, align 4
  %v2_1466c = sub i32 %v0_1466c, %v1_1466c
  store i32 %v2_1466c, i32* %r2.global-to-local, align 4
  %v4_1466c = xor i32 %v1_1466c, %v0_1466c
  %v5_1466c = xor i32 %v2_1466c, %v0_1466c
  %v6_1466c = and i32 %v5_1466c, %v4_1466c
  %v7_1466c = icmp slt i32 %v6_1466c, 0
  store i1 %v7_1466c, i1* %cpsr_v.global-to-local, align 1
  %v8_1466c = icmp slt i32 %v2_1466c, 0
  store i1 %v8_1466c, i1* %cpsr_n.global-to-local, align 1
  %v9_1466c = icmp eq i32 %v0_1466c, %v1_1466c
  store i1 %v9_1466c, i1* %cpsr_z.global-to-local, align 1
  %v2_14670 = xor i1 %v8_1466c, %v7_1466c
  br i1 %v2_14670, label %bb140, label %dec_label_pc_14674

dec_label_pc_14674:                               ; preds = %.thread128
  %v0_14674 = load i32, i32* @r1, align 4
  %v1_14674 = urem i32 %v0_14674, 4
  store i32 %v1_14674, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14674 = icmp eq i32 %v1_14674, 0
  store i1 %v2_14674, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_14674 to i2
  br i1 %v2_14674, label %dec_label_pc_145a8, label %dec_label_pc_1467c

dec_label_pc_1467c:                               ; preds = %dec_label_pc_145a0, %dec_label_pc_14674
  %v0_1479c76 = phi i32 [ %v1_14580, %dec_label_pc_145a0 ], [ %v0_1479c77, %dec_label_pc_14674 ]
  %v0_14704 = phi i32 [ %v2_14590, %dec_label_pc_145a0 ], [ %v2_1466c, %dec_label_pc_14674 ]
  %v0_14684.off0 = phi i2 [ %extract.t, %dec_label_pc_145a0 ], [ %extract.t131, %dec_label_pc_14674 ]
  %v0_1467c = phi i32 [ %v0_14580, %dec_label_pc_145a0 ], [ %v0_14674, %dec_label_pc_14674 ]
  %v1_1467c = and i32 %v0_1467c, -4
  store i32 %v1_1467c, i32* %r1.global-to-local, align 4
  %v1_14680 = inttoptr i32 %v1_1467c to i32*
  %v2_14680 = load i32, i32* %v1_14680, align 4
  store i32 %v2_14680, i32* %lr.global-to-local, align 4
  %v4_14680 = add i32 %v1_1467c, 4
  store i32 %v4_14680, i32* %r1.global-to-local, align 4
  %v1_146fc = add i32 %v0_14704, -12
  %v3_146fc = sub i32 11, %v0_14704
  %v4_146fc = and i32 %v3_146fc, %v0_14704
  %v5_146fc = icmp slt i32 %v4_146fc, 0
  store i1 %v5_146fc, i1* %cpsr_v.global-to-local, align 1
  %v6_146fc = icmp slt i32 %v1_146fc, 0
  store i1 %v6_146fc, i1* %cpsr_n.global-to-local, align 1
  %v7_146fc = icmp eq i32 %v0_14704, 12
  store i1 %v7_146fc, i1* %cpsr_z.global-to-local, align 1
  %v2_14700 = xor i1 %v6_146fc, %v5_146fc
  switch i2 %v0_14684.off0, label %dec_label_pc_14690 [
    i2 -1, label %dec_label_pc_14768
    i2 -2, label %dec_label_pc_146fc
  ]

dec_label_pc_14690:                               ; preds = %dec_label_pc_1467c
  br i1 %v2_14700, label %dec_label_pc_146dc, label %dec_label_pc_14698

dec_label_pc_14698:                               ; preds = %dec_label_pc_14690
  store i32 %v1_146fc, i32* %r2.global-to-local, align 4
  %v3_1469c = load i32, i32* @r4, align 4
  store i32 %v3_1469c, i32* %stack_var_-16, align 4
  %v6_1469c = load i32, i32* @r5, align 4
  store i32 %v6_1469c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_146a0

dec_label_pc_146a0:                               ; preds = %dec_label_pc_146a0.dec_label_pc_146a0_crit_edge, %dec_label_pc_14698
  %v0_146c4 = phi i32 [ %v12_146c4, %dec_label_pc_146a0.dec_label_pc_146a0_crit_edge ], [ %v0_1479c76, %dec_label_pc_14698 ]
  %v0_146a4 = phi i32 [ %v0_146a4.pre, %dec_label_pc_146a0.dec_label_pc_146a0_crit_edge ], [ %v4_14680, %dec_label_pc_14698 ]
  %v0_146a0 = phi i32 [ %v0_146a0.pre, %dec_label_pc_146a0.dec_label_pc_146a0_crit_edge ], [ %v2_14680, %dec_label_pc_14698 ]
  %v3_146a0 = udiv i32 %v0_146a0, 256
  %v1_146a4 = inttoptr i32 %v0_146a4 to i32*
  %v2_146a4 = load i32, i32* %v1_146a4, align 4
  store i32 %v2_146a4, i32* %r4.global-to-local, align 4
  %v3_146a4 = add i32 %v0_146a4, 4
  %v4_146a4 = inttoptr i32 %v3_146a4 to i32*
  %v5_146a4 = load i32, i32* %v4_146a4, align 4
  store i32 %v5_146a4, i32* %r5.global-to-local, align 4
  %v6_146a4 = add i32 %v0_146a4, 8
  %v7_146a4 = inttoptr i32 %v6_146a4 to i32*
  %v8_146a4 = load i32, i32* %v7_146a4, align 4
  store i32 %v8_146a4, i32* %ip.global-to-local, align 4
  %v9_146a4 = add i32 %v0_146a4, 12
  %v10_146a4 = inttoptr i32 %v9_146a4 to i32*
  %v11_146a4 = load i32, i32* %v10_146a4, align 4
  store i32 %v11_146a4, i32* %lr.global-to-local, align 4
  %v12_146a4 = add i32 %v0_146a4, 16
  store i32 %v12_146a4, i32* %r1.global-to-local, align 4
  %v4_146a8 = mul i32 %v2_146a4, 16777216
  %v5_146a8 = or i32 %v4_146a8, %v3_146a0
  store i32 %v5_146a8, i32* @r3, align 4
  %v3_146ac = udiv i32 %v2_146a4, 256
  %v4_146b0 = mul i32 %v5_146a4, 16777216
  %v5_146b0 = or i32 %v4_146b0, %v3_146ac
  store i32 %v5_146b0, i32* %r4.global-to-local, align 4
  %v3_146b4 = udiv i32 %v5_146a4, 256
  %v4_146b8 = mul i32 %v8_146a4, 16777216
  %v5_146b8 = or i32 %v4_146b8, %v3_146b4
  store i32 %v5_146b8, i32* %r5.global-to-local, align 4
  %v3_146bc = udiv i32 %v8_146a4, 256
  %v4_146c0 = mul i32 %v11_146a4, 16777216
  %v5_146c0 = or i32 %v4_146c0, %v3_146bc
  store i32 %v5_146c0, i32* @ip, align 4
  %v1_146c4 = inttoptr i32 %v0_146c4 to i32*
  store i32 %v5_146a8, i32* %v1_146c4, align 4
  %v3_146c4 = add i32 %v0_146c4, 4
  %v4_146c4 = inttoptr i32 %v3_146c4 to i32*
  %v5_146c4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_146c4, i32* %v4_146c4, align 4
  %v6_146c4 = add i32 %v0_146c4, 8
  %v7_146c4 = inttoptr i32 %v6_146c4 to i32*
  %v8_146c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_146c4, i32* %v7_146c4, align 4
  %v9_146c4 = add i32 %v0_146c4, 12
  %v10_146c4 = inttoptr i32 %v9_146c4 to i32*
  %v11_146c4 = load i32, i32* @ip, align 4
  store i32 %v11_146c4, i32* %v10_146c4, align 4
  %v12_146c4 = add i32 %v0_146c4, 16
  store i32 %v12_146c4, i32* @r0, align 4
  %v0_146c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_146c8 = add i32 %v0_146c8, -16
  store i32 %v1_146c8, i32* %r2.global-to-local, align 4
  %v3_146c8 = sub i32 15, %v0_146c8
  %v4_146c8 = and i32 %v3_146c8, %v0_146c8
  %v5_146c8 = icmp slt i32 %v4_146c8, 0
  %v6_146c8 = icmp slt i32 %v1_146c8, 0
  %v2_146cc = xor i1 %v6_146c8, %v5_146c8
  br i1 %v2_146cc, label %dec_label_pc_146d0, label %dec_label_pc_146a0.dec_label_pc_146a0_crit_edge

dec_label_pc_146a0.dec_label_pc_146a0_crit_edge:  ; preds = %dec_label_pc_146a0
  %v0_146a0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_146a4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_146a0

dec_label_pc_146d0:                               ; preds = %dec_label_pc_146a0
  %v2_146d0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_146d0, i32* @r4, align 4
  %v5_146d0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_146d0, i32* @r5, align 4
  %v1_146d4 = add i32 %v0_146c8, -4
  store i32 %v1_146d4, i32* %r2.global-to-local, align 4
  %v3_146d4 = add i32 %v0_146c8, 2147483632
  %v4_146d4 = and i32 %v1_146d4, %v3_146d4
  %v5_146d4 = icmp slt i32 %v4_146d4, 0
  store i1 %v5_146d4, i1* %cpsr_v.global-to-local, align 1
  %v6_146d4 = icmp slt i32 %v1_146d4, 0
  store i1 %v6_146d4, i1* %cpsr_n.global-to-local, align 1
  %v7_146d4 = icmp eq i32 %v1_146d4, 0
  store i1 %v7_146d4, i1* %cpsr_z.global-to-local, align 1
  %v2_146d8 = xor i1 %v6_146d4, %v5_146d4
  br i1 %v2_146d8, label %dec_label_pc_146f4, label %dec_label_pc_146dc

dec_label_pc_146dc:                               ; preds = %dec_label_pc_146d0, %dec_label_pc_14690, %dec_label_pc_146dc
  %v1_146e8 = phi i32 [ %v4_146e8, %dec_label_pc_146dc ], [ %v12_146c4, %dec_label_pc_146d0 ], [ %v0_1479c76, %dec_label_pc_14690 ]
  %v0_146dc = load i32, i32* %lr.global-to-local, align 4
  %v3_146dc = udiv i32 %v0_146dc, 256
  store i32 %v3_146dc, i32* %ip.global-to-local, align 4
  %v0_146e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_146e0 = inttoptr i32 %v0_146e0 to i32*
  %v2_146e0 = load i32, i32* %v1_146e0, align 4
  store i32 %v2_146e0, i32* %lr.global-to-local, align 4
  %v4_146e0 = add i32 %v0_146e0, 4
  store i32 %v4_146e0, i32* %r1.global-to-local, align 4
  %v4_146e4 = mul i32 %v2_146e0, 16777216
  %v5_146e4 = or i32 %v4_146e4, %v3_146dc
  store i32 %v5_146e4, i32* @ip, align 4
  %v2_146e8 = inttoptr i32 %v1_146e8 to i32*
  store i32 %v5_146e4, i32* %v2_146e8, align 4
  %v3_146e8 = load i32, i32* @r0, align 4
  %v4_146e8 = add i32 %v3_146e8, 4
  store i32 %v4_146e8, i32* @r0, align 4
  %v0_146ec = load i32, i32* %r2.global-to-local, align 4
  %v1_146ec = add i32 %v0_146ec, -4
  store i32 %v1_146ec, i32* %r2.global-to-local, align 4
  %v3_146ec = sub i32 3, %v0_146ec
  %v4_146ec = and i32 %v3_146ec, %v0_146ec
  %v5_146ec = icmp slt i32 %v4_146ec, 0
  %v6_146ec = icmp slt i32 %v1_146ec, 0
  %v2_146f0 = xor i1 %v6_146ec, %v5_146ec
  br i1 %v2_146f0, label %dec_label_pc_146f4.loopexit, label %dec_label_pc_146dc

dec_label_pc_146f4.loopexit:                      ; preds = %dec_label_pc_146dc
  %v7_146ec = icmp eq i32 %v0_146ec, 4
  store i1 %v5_146ec, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_146ec, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_146ec, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_146f4

dec_label_pc_146f4:                               ; preds = %dec_label_pc_146f4.loopexit, %dec_label_pc_146d0
  %v0_1461c59 = phi i32 [ %v1_146ec, %dec_label_pc_146f4.loopexit ], [ %v1_146d4, %dec_label_pc_146d0 ]
  %v0_146f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_146f4 = add i32 %v0_146f4, -3
  store i32 %v1_146f4, i32* @r1, align 4
  br label %bb140

dec_label_pc_146fc:                               ; preds = %dec_label_pc_1467c
  br i1 %v2_14700, label %dec_label_pc_14748, label %dec_label_pc_14704

dec_label_pc_14704:                               ; preds = %dec_label_pc_146fc
  store i32 %v1_146fc, i32* %r2.global-to-local, align 4
  %v3_14708 = load i32, i32* @r4, align 4
  store i32 %v3_14708, i32* %stack_var_-16, align 4
  %v6_14708 = load i32, i32* @r5, align 4
  store i32 %v6_14708, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1470c

dec_label_pc_1470c:                               ; preds = %dec_label_pc_1470c.dec_label_pc_1470c_crit_edge, %dec_label_pc_14704
  %v0_14730 = phi i32 [ %v12_14730, %dec_label_pc_1470c.dec_label_pc_1470c_crit_edge ], [ %v0_1479c76, %dec_label_pc_14704 ]
  %v0_14710 = phi i32 [ %v0_14710.pre, %dec_label_pc_1470c.dec_label_pc_1470c_crit_edge ], [ %v4_14680, %dec_label_pc_14704 ]
  %v0_1470c = phi i32 [ %v0_1470c.pre, %dec_label_pc_1470c.dec_label_pc_1470c_crit_edge ], [ %v2_14680, %dec_label_pc_14704 ]
  %v3_1470c = udiv i32 %v0_1470c, 65536
  %v1_14710 = inttoptr i32 %v0_14710 to i32*
  %v2_14710 = load i32, i32* %v1_14710, align 4
  store i32 %v2_14710, i32* %r4.global-to-local, align 4
  %v3_14710 = add i32 %v0_14710, 4
  %v4_14710 = inttoptr i32 %v3_14710 to i32*
  %v5_14710 = load i32, i32* %v4_14710, align 4
  store i32 %v5_14710, i32* %r5.global-to-local, align 4
  %v6_14710 = add i32 %v0_14710, 8
  %v7_14710 = inttoptr i32 %v6_14710 to i32*
  %v8_14710 = load i32, i32* %v7_14710, align 4
  store i32 %v8_14710, i32* %ip.global-to-local, align 4
  %v9_14710 = add i32 %v0_14710, 12
  %v10_14710 = inttoptr i32 %v9_14710 to i32*
  %v11_14710 = load i32, i32* %v10_14710, align 4
  store i32 %v11_14710, i32* %lr.global-to-local, align 4
  %v12_14710 = add i32 %v0_14710, 16
  store i32 %v12_14710, i32* %r1.global-to-local, align 4
  %v4_14714 = mul i32 %v2_14710, 65536
  %v5_14714 = or i32 %v4_14714, %v3_1470c
  store i32 %v5_14714, i32* @r3, align 4
  %v3_14718 = udiv i32 %v2_14710, 65536
  %v4_1471c = mul i32 %v5_14710, 65536
  %v5_1471c = or i32 %v4_1471c, %v3_14718
  store i32 %v5_1471c, i32* %r4.global-to-local, align 4
  %v3_14720 = udiv i32 %v5_14710, 65536
  %v4_14724 = mul i32 %v8_14710, 65536
  %v5_14724 = or i32 %v4_14724, %v3_14720
  store i32 %v5_14724, i32* %r5.global-to-local, align 4
  %v3_14728 = udiv i32 %v8_14710, 65536
  %v4_1472c = mul i32 %v11_14710, 65536
  %v5_1472c = or i32 %v4_1472c, %v3_14728
  store i32 %v5_1472c, i32* @ip, align 4
  %v1_14730 = inttoptr i32 %v0_14730 to i32*
  store i32 %v5_14714, i32* %v1_14730, align 4
  %v3_14730 = add i32 %v0_14730, 4
  %v4_14730 = inttoptr i32 %v3_14730 to i32*
  %v5_14730 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14730, i32* %v4_14730, align 4
  %v6_14730 = add i32 %v0_14730, 8
  %v7_14730 = inttoptr i32 %v6_14730 to i32*
  %v8_14730 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14730, i32* %v7_14730, align 4
  %v9_14730 = add i32 %v0_14730, 12
  %v10_14730 = inttoptr i32 %v9_14730 to i32*
  %v11_14730 = load i32, i32* @ip, align 4
  store i32 %v11_14730, i32* %v10_14730, align 4
  %v12_14730 = add i32 %v0_14730, 16
  store i32 %v12_14730, i32* @r0, align 4
  %v0_14734 = load i32, i32* %r2.global-to-local, align 4
  %v1_14734 = add i32 %v0_14734, -16
  store i32 %v1_14734, i32* %r2.global-to-local, align 4
  %v3_14734 = sub i32 15, %v0_14734
  %v4_14734 = and i32 %v3_14734, %v0_14734
  %v5_14734 = icmp slt i32 %v4_14734, 0
  %v6_14734 = icmp slt i32 %v1_14734, 0
  %v2_14738 = xor i1 %v6_14734, %v5_14734
  br i1 %v2_14738, label %dec_label_pc_1473c, label %dec_label_pc_1470c.dec_label_pc_1470c_crit_edge

dec_label_pc_1470c.dec_label_pc_1470c_crit_edge:  ; preds = %dec_label_pc_1470c
  %v0_1470c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_14710.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1470c

dec_label_pc_1473c:                               ; preds = %dec_label_pc_1470c
  %v2_1473c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1473c, i32* @r4, align 4
  %v5_1473c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_1473c, i32* @r5, align 4
  %v1_14740 = add i32 %v0_14734, -4
  store i32 %v1_14740, i32* %r2.global-to-local, align 4
  %v3_14740 = add i32 %v0_14734, 2147483632
  %v4_14740 = and i32 %v1_14740, %v3_14740
  %v5_14740 = icmp slt i32 %v4_14740, 0
  store i1 %v5_14740, i1* %cpsr_v.global-to-local, align 1
  %v6_14740 = icmp slt i32 %v1_14740, 0
  store i1 %v6_14740, i1* %cpsr_n.global-to-local, align 1
  %v7_14740 = icmp eq i32 %v1_14740, 0
  store i1 %v7_14740, i1* %cpsr_z.global-to-local, align 1
  %v2_14744 = xor i1 %v6_14740, %v5_14740
  br i1 %v2_14744, label %dec_label_pc_14760, label %dec_label_pc_14748

dec_label_pc_14748:                               ; preds = %dec_label_pc_1473c, %dec_label_pc_146fc, %dec_label_pc_14748
  %v1_14754 = phi i32 [ %v4_14754, %dec_label_pc_14748 ], [ %v12_14730, %dec_label_pc_1473c ], [ %v0_1479c76, %dec_label_pc_146fc ]
  %v0_14748 = load i32, i32* %lr.global-to-local, align 4
  %v3_14748 = udiv i32 %v0_14748, 65536
  store i32 %v3_14748, i32* %ip.global-to-local, align 4
  %v0_1474c = load i32, i32* %r1.global-to-local, align 4
  %v1_1474c = inttoptr i32 %v0_1474c to i32*
  %v2_1474c = load i32, i32* %v1_1474c, align 4
  store i32 %v2_1474c, i32* %lr.global-to-local, align 4
  %v4_1474c = add i32 %v0_1474c, 4
  store i32 %v4_1474c, i32* %r1.global-to-local, align 4
  %v4_14750 = mul i32 %v2_1474c, 65536
  %v5_14750 = or i32 %v4_14750, %v3_14748
  store i32 %v5_14750, i32* @ip, align 4
  %v2_14754 = inttoptr i32 %v1_14754 to i32*
  store i32 %v5_14750, i32* %v2_14754, align 4
  %v3_14754 = load i32, i32* @r0, align 4
  %v4_14754 = add i32 %v3_14754, 4
  store i32 %v4_14754, i32* @r0, align 4
  %v0_14758 = load i32, i32* %r2.global-to-local, align 4
  %v1_14758 = add i32 %v0_14758, -4
  store i32 %v1_14758, i32* %r2.global-to-local, align 4
  %v3_14758 = sub i32 3, %v0_14758
  %v4_14758 = and i32 %v3_14758, %v0_14758
  %v5_14758 = icmp slt i32 %v4_14758, 0
  %v6_14758 = icmp slt i32 %v1_14758, 0
  %v2_1475c = xor i1 %v6_14758, %v5_14758
  br i1 %v2_1475c, label %dec_label_pc_14760.loopexit, label %dec_label_pc_14748

dec_label_pc_14760.loopexit:                      ; preds = %dec_label_pc_14748
  %v7_14758 = icmp eq i32 %v0_14758, 4
  store i1 %v5_14758, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_14758, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_14758, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14760

dec_label_pc_14760:                               ; preds = %dec_label_pc_14760.loopexit, %dec_label_pc_1473c
  %v0_1461c60 = phi i32 [ %v1_14758, %dec_label_pc_14760.loopexit ], [ %v1_14740, %dec_label_pc_1473c ]
  %v0_14760 = load i32, i32* %r1.global-to-local, align 4
  %v1_14760 = add i32 %v0_14760, -2
  store i32 %v1_14760, i32* @r1, align 4
  br label %bb140

dec_label_pc_14768:                               ; preds = %dec_label_pc_1467c
  br i1 %v2_14700, label %dec_label_pc_147b4, label %dec_label_pc_14770

dec_label_pc_14770:                               ; preds = %dec_label_pc_14768
  store i32 %v1_146fc, i32* %r2.global-to-local, align 4
  %v3_14774 = load i32, i32* @r4, align 4
  store i32 %v3_14774, i32* %stack_var_-16, align 4
  %v6_14774 = load i32, i32* @r5, align 4
  store i32 %v6_14774, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14778

dec_label_pc_14778:                               ; preds = %dec_label_pc_14778.dec_label_pc_14778_crit_edge, %dec_label_pc_14770
  %v0_1479c = phi i32 [ %v12_1479c, %dec_label_pc_14778.dec_label_pc_14778_crit_edge ], [ %v0_1479c76, %dec_label_pc_14770 ]
  %v0_1477c = phi i32 [ %v0_1477c.pre, %dec_label_pc_14778.dec_label_pc_14778_crit_edge ], [ %v4_14680, %dec_label_pc_14770 ]
  %v0_14778 = phi i32 [ %v0_14778.pre, %dec_label_pc_14778.dec_label_pc_14778_crit_edge ], [ %v2_14680, %dec_label_pc_14770 ]
  %v3_14778 = udiv i32 %v0_14778, 16777216
  %v1_1477c = inttoptr i32 %v0_1477c to i32*
  %v2_1477c = load i32, i32* %v1_1477c, align 4
  store i32 %v2_1477c, i32* %r4.global-to-local, align 4
  %v3_1477c = add i32 %v0_1477c, 4
  %v4_1477c = inttoptr i32 %v3_1477c to i32*
  %v5_1477c = load i32, i32* %v4_1477c, align 4
  store i32 %v5_1477c, i32* %r5.global-to-local, align 4
  %v6_1477c = add i32 %v0_1477c, 8
  %v7_1477c = inttoptr i32 %v6_1477c to i32*
  %v8_1477c = load i32, i32* %v7_1477c, align 4
  store i32 %v8_1477c, i32* %ip.global-to-local, align 4
  %v9_1477c = add i32 %v0_1477c, 12
  %v10_1477c = inttoptr i32 %v9_1477c to i32*
  %v11_1477c = load i32, i32* %v10_1477c, align 4
  store i32 %v11_1477c, i32* %lr.global-to-local, align 4
  %v12_1477c = add i32 %v0_1477c, 16
  store i32 %v12_1477c, i32* %r1.global-to-local, align 4
  %v4_14780 = mul i32 %v2_1477c, 256
  %v5_14780 = or i32 %v4_14780, %v3_14778
  store i32 %v5_14780, i32* @r3, align 4
  %v3_14784 = udiv i32 %v2_1477c, 16777216
  %v4_14788 = mul i32 %v5_1477c, 256
  %v5_14788 = or i32 %v4_14788, %v3_14784
  store i32 %v5_14788, i32* %r4.global-to-local, align 4
  %v3_1478c = udiv i32 %v5_1477c, 16777216
  %v4_14790 = mul i32 %v8_1477c, 256
  %v5_14790 = or i32 %v4_14790, %v3_1478c
  store i32 %v5_14790, i32* %r5.global-to-local, align 4
  %v3_14794 = udiv i32 %v8_1477c, 16777216
  %v4_14798 = mul i32 %v11_1477c, 256
  %v5_14798 = or i32 %v4_14798, %v3_14794
  store i32 %v5_14798, i32* @ip, align 4
  %v1_1479c = inttoptr i32 %v0_1479c to i32*
  store i32 %v5_14780, i32* %v1_1479c, align 4
  %v3_1479c = add i32 %v0_1479c, 4
  %v4_1479c = inttoptr i32 %v3_1479c to i32*
  %v5_1479c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1479c, i32* %v4_1479c, align 4
  %v6_1479c = add i32 %v0_1479c, 8
  %v7_1479c = inttoptr i32 %v6_1479c to i32*
  %v8_1479c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1479c, i32* %v7_1479c, align 4
  %v9_1479c = add i32 %v0_1479c, 12
  %v10_1479c = inttoptr i32 %v9_1479c to i32*
  %v11_1479c = load i32, i32* @ip, align 4
  store i32 %v11_1479c, i32* %v10_1479c, align 4
  %v12_1479c = add i32 %v0_1479c, 16
  store i32 %v12_1479c, i32* @r0, align 4
  %v0_147a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_147a0 = add i32 %v0_147a0, -16
  store i32 %v1_147a0, i32* %r2.global-to-local, align 4
  %v3_147a0 = sub i32 15, %v0_147a0
  %v4_147a0 = and i32 %v3_147a0, %v0_147a0
  %v5_147a0 = icmp slt i32 %v4_147a0, 0
  %v6_147a0 = icmp slt i32 %v1_147a0, 0
  %v2_147a4 = xor i1 %v6_147a0, %v5_147a0
  br i1 %v2_147a4, label %dec_label_pc_147a8, label %dec_label_pc_14778.dec_label_pc_14778_crit_edge

dec_label_pc_14778.dec_label_pc_14778_crit_edge:  ; preds = %dec_label_pc_14778
  %v0_14778.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_1477c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14778

dec_label_pc_147a8:                               ; preds = %dec_label_pc_14778
  %v2_147a8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_147a8, i32* @r4, align 4
  %v5_147a8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_147a8, i32* @r5, align 4
  %v1_147ac = add i32 %v0_147a0, -4
  store i32 %v1_147ac, i32* %r2.global-to-local, align 4
  %v3_147ac = add i32 %v0_147a0, 2147483632
  %v4_147ac = and i32 %v1_147ac, %v3_147ac
  %v5_147ac = icmp slt i32 %v4_147ac, 0
  store i1 %v5_147ac, i1* %cpsr_v.global-to-local, align 1
  %v6_147ac = icmp slt i32 %v1_147ac, 0
  store i1 %v6_147ac, i1* %cpsr_n.global-to-local, align 1
  %v7_147ac = icmp eq i32 %v1_147ac, 0
  store i1 %v7_147ac, i1* %cpsr_z.global-to-local, align 1
  %v2_147b0 = xor i1 %v6_147ac, %v5_147ac
  br i1 %v2_147b0, label %dec_label_pc_147cc, label %dec_label_pc_147b4

dec_label_pc_147b4:                               ; preds = %dec_label_pc_147a8, %dec_label_pc_14768, %dec_label_pc_147b4
  %v1_147c0 = phi i32 [ %v4_147c0, %dec_label_pc_147b4 ], [ %v12_1479c, %dec_label_pc_147a8 ], [ %v0_1479c76, %dec_label_pc_14768 ]
  %v0_147b4 = load i32, i32* %lr.global-to-local, align 4
  %v3_147b4 = udiv i32 %v0_147b4, 16777216
  store i32 %v3_147b4, i32* %ip.global-to-local, align 4
  %v0_147b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_147b8 = inttoptr i32 %v0_147b8 to i32*
  %v2_147b8 = load i32, i32* %v1_147b8, align 4
  store i32 %v2_147b8, i32* %lr.global-to-local, align 4
  %v4_147b8 = add i32 %v0_147b8, 4
  store i32 %v4_147b8, i32* %r1.global-to-local, align 4
  %v4_147bc = mul i32 %v2_147b8, 256
  %v5_147bc = or i32 %v4_147bc, %v3_147b4
  store i32 %v5_147bc, i32* @ip, align 4
  %v2_147c0 = inttoptr i32 %v1_147c0 to i32*
  store i32 %v5_147bc, i32* %v2_147c0, align 4
  %v3_147c0 = load i32, i32* @r0, align 4
  %v4_147c0 = add i32 %v3_147c0, 4
  store i32 %v4_147c0, i32* @r0, align 4
  %v0_147c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_147c4 = add i32 %v0_147c4, -4
  store i32 %v1_147c4, i32* %r2.global-to-local, align 4
  %v3_147c4 = sub i32 3, %v0_147c4
  %v4_147c4 = and i32 %v3_147c4, %v0_147c4
  %v5_147c4 = icmp slt i32 %v4_147c4, 0
  %v6_147c4 = icmp slt i32 %v1_147c4, 0
  %v2_147c8 = xor i1 %v6_147c4, %v5_147c4
  br i1 %v2_147c8, label %dec_label_pc_147cc.loopexit, label %dec_label_pc_147b4

dec_label_pc_147cc.loopexit:                      ; preds = %dec_label_pc_147b4
  %v7_147c4 = icmp eq i32 %v0_147c4, 4
  store i1 %v5_147c4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_147c4, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_147c4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_147cc

dec_label_pc_147cc:                               ; preds = %dec_label_pc_147cc.loopexit, %dec_label_pc_147a8
  %v0_1461c61 = phi i32 [ %v1_147c4, %dec_label_pc_147cc.loopexit ], [ %v1_147ac, %dec_label_pc_147a8 ]
  %v0_147cc = load i32, i32* %r1.global-to-local, align 4
  %v1_147cc = add i32 %v0_147cc, -1
  store i32 %v1_147cc, i32* @r1, align 4
  br label %bb140

dec_label_pc_147d4:                               ; preds = %dec_label_pc_14580
  %v1_147d4 = load i32, i32* @r2, align 4
  %v2_147d4 = add i32 %v1_147d4, %v0_14580
  store i32 %v2_147d4, i32* %r1.global-to-local, align 4
  %v2_147d8 = add i32 %v1_147d4, %v1_14580
  store i32 %v2_147d8, i32* %r0.global-to-local, align 4
  %v2_147dc = add i32 %v1_147d4, -4
  store i32 %v2_147dc, i32* %r2.global-to-local, align 4
  %v4_147dc = sub i32 3, %v1_147d4
  %v5_147dc = and i32 %v4_147dc, %v1_147d4
  %v6_147dc = icmp slt i32 %v5_147dc, 0
  store i1 %v6_147dc, i1* %cpsr_v.global-to-local, align 1
  %v7_147dc = icmp slt i32 %v2_147dc, 0
  store i1 %v7_147dc, i1* %cpsr_n.global-to-local, align 1
  %v8_147dc = icmp eq i32 %v1_147d4, 4
  store i1 %v8_147dc, i1* %cpsr_z.global-to-local, align 1
  %v5_147e0 = icmp slt i32 %v1_147d4, 4
  br i1 %v5_147e0, label %bb150, label %dec_label_pc_147e4

dec_label_pc_147e4:                               ; preds = %dec_label_pc_147d4
  %v1_147e4 = urem i32 %v2_147d8, 4
  store i32 %v1_147e4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_147e4 = icmp eq i32 %v1_147e4, 0
  store i1 %v2_147e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_147e4, label %dec_label_pc_147ec, label %dec_label_pc_1488c

dec_label_pc_147ec:                               ; preds = %dec_label_pc_147e4
  %v1_147ec = urem i32 %v2_147d4, 4
  store i32 %v1_147ec, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_147ec = icmp eq i32 %v1_147ec, 0
  store i1 %v2_147ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_147ec, label %dec_label_pc_147f4, label %dec_label_pc_148b8

dec_label_pc_147f4:                               ; preds = %dec_label_pc_147ec, %dec_label_pc_148b0
  %v0_1480c37 = phi i32 [ %v2_147d8, %dec_label_pc_147ec ], [ %v0_1490020, %dec_label_pc_148b0 ]
  %v0_1480836 = phi i32 [ %v2_147d4, %dec_label_pc_147ec ], [ %v0_148b0, %dec_label_pc_148b0 ]
  %v0_147f4 = phi i32 [ %v2_147dc, %dec_label_pc_147ec ], [ %v2_148a8, %dec_label_pc_148b0 ]
  %v2_147f4 = add i32 %v0_147f4, -8
  store i32 %v2_147f4, i32* %r2.global-to-local, align 4
  %v4_147f4 = sub i32 7, %v0_147f4
  %v5_147f4 = and i32 %v4_147f4, %v0_147f4
  %v6_147f4 = icmp slt i32 %v5_147f4, 0
  store i1 %v6_147f4, i1* %cpsr_v.global-to-local, align 1
  %v7_147f4 = icmp slt i32 %v2_147f4, 0
  store i1 %v7_147f4, i1* %cpsr_n.global-to-local, align 1
  %v8_147f4 = icmp eq i32 %v0_147f4, 8
  store i1 %v8_147f4, i1* %cpsr_z.global-to-local, align 1
  %v5_147f8 = icmp slt i32 %v0_147f4, 8
  br i1 %v5_147f8, label %dec_label_pc_14844, label %dec_label_pc_147fc

dec_label_pc_147fc:                               ; preds = %dec_label_pc_147f4
  %v3_147fc = load i32, i32* @r4, align 4
  %v5_147fc = inttoptr i32 %v3_147fc to i8*
  store i8* %v5_147fc, i8** %stack_var_-8, align 4
  %v8_147fc = load i32, i32* @lr, align 4
  %v2_14800 = add i32 %v0_147f4, -28
  store i32 %v2_14800, i32* %r2.global-to-local, align 4
  %v4_14800 = sub i32 27, %v0_147f4
  %v5_14800 = and i32 %v4_14800, %v2_147f4
  %v6_14800 = icmp slt i32 %v5_14800, 0
  store i1 %v6_14800, i1* %cpsr_v.global-to-local, align 1
  %v7_14800 = icmp slt i32 %v2_14800, 0
  store i1 %v7_14800, i1* %cpsr_n.global-to-local, align 1
  %v8_14800 = icmp eq i32 %v2_147f4, 20
  store i1 %v8_14800, i1* %cpsr_z.global-to-local, align 1
  %v5_14804 = icmp slt i32 %v2_147f4, 20
  br i1 %v5_14804, label %dec_label_pc_14820, label %dec_label_pc_14808

dec_label_pc_14808:                               ; preds = %dec_label_pc_147fc, %dec_label_pc_14808.dec_label_pc_14808_crit_edge
  %v0_1480c = phi i32 [ %v1_14814, %dec_label_pc_14808.dec_label_pc_14808_crit_edge ], [ %v0_1480c37, %dec_label_pc_147fc ]
  %v0_14808 = phi i32 [ %v0_14808.pre, %dec_label_pc_14808.dec_label_pc_14808_crit_edge ], [ %v0_1480836, %dec_label_pc_147fc ]
  %v1_14808 = add i32 %v0_14808, -4
  %v2_14808 = inttoptr i32 %v1_14808 to i32*
  %v3_14808 = load i32, i32* %v2_14808, align 4
  %v4_14808 = add i32 %v0_14808, -8
  %v5_14808 = inttoptr i32 %v4_14808 to i32*
  %v6_14808 = load i32, i32* %v5_14808, align 4
  store i32 %v6_14808, i32* %r4.global-to-local, align 4
  %v7_14808 = add i32 %v0_14808, -12
  %v8_14808 = inttoptr i32 %v7_14808 to i32*
  %v9_14808 = load i32, i32* %v8_14808, align 4
  store i32 %v9_14808, i32* %ip.global-to-local, align 4
  %v10_14808 = add i32 %v0_14808, -16
  %v11_14808 = inttoptr i32 %v10_14808 to i32*
  %v12_14808 = load i32, i32* %v11_14808, align 4
  store i32 %v12_14808, i32* %lr.global-to-local, align 4
  store i32 %v10_14808, i32* %r1.global-to-local, align 4
  %v1_1480c = add i32 %v0_1480c, -16
  %v2_1480c = inttoptr i32 %v1_1480c to i32*
  store i32 %v3_14808, i32* %v2_1480c, align 4
  %v4_1480c = add i32 %v0_1480c, -12
  %v5_1480c = inttoptr i32 %v4_1480c to i32*
  %v6_1480c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1480c, i32* %v5_1480c, align 4
  %v7_1480c = add i32 %v0_1480c, -8
  %v8_1480c = inttoptr i32 %v7_1480c to i32*
  %v9_1480c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_1480c, i32* %v8_1480c, align 4
  %v10_1480c = add i32 %v0_1480c, -4
  %v11_1480c = inttoptr i32 %v10_1480c to i32*
  %v12_1480c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1480c, i32* %v11_1480c, align 4
  store i32 %v1_1480c, i32* %r0.global-to-local, align 4
  %v0_14810 = load i32, i32* %r1.global-to-local, align 4
  %v1_14810 = add i32 %v0_14810, -4
  %v2_14810 = inttoptr i32 %v1_14810 to i32*
  %v3_14810 = load i32, i32* %v2_14810, align 4
  store i32 %v3_14810, i32* @r3, align 4
  %v4_14810 = add i32 %v0_14810, -8
  %v5_14810 = inttoptr i32 %v4_14810 to i32*
  %v6_14810 = load i32, i32* %v5_14810, align 4
  store i32 %v6_14810, i32* %r4.global-to-local, align 4
  %v7_14810 = add i32 %v0_14810, -12
  %v8_14810 = inttoptr i32 %v7_14810 to i32*
  %v9_14810 = load i32, i32* %v8_14810, align 4
  store i32 %v9_14810, i32* @ip, align 4
  %v10_14810 = add i32 %v0_14810, -16
  %v11_14810 = inttoptr i32 %v10_14810 to i32*
  %v12_14810 = load i32, i32* %v11_14810, align 4
  store i32 %v12_14810, i32* %lr.global-to-local, align 4
  store i32 %v10_14810, i32* %r1.global-to-local, align 4
  %v1_14814 = add i32 %v0_1480c, -32
  %v2_14814 = inttoptr i32 %v1_14814 to i32*
  store i32 %v3_14810, i32* %v2_14814, align 4
  %v4_14814 = add i32 %v0_1480c, -28
  %v5_14814 = inttoptr i32 %v4_14814 to i32*
  %v6_14814 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_14814, i32* %v5_14814, align 4
  %v7_14814 = add i32 %v0_1480c, -24
  %v8_14814 = inttoptr i32 %v7_14814 to i32*
  %v9_14814 = load i32, i32* @ip, align 4
  store i32 %v9_14814, i32* %v8_14814, align 4
  %v10_14814 = add i32 %v0_1480c, -20
  %v11_14814 = inttoptr i32 %v10_14814 to i32*
  %v12_14814 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14814, i32* %v11_14814, align 4
  store i32 %v1_14814, i32* %r0.global-to-local, align 4
  %v0_14818 = load i32, i32* %r2.global-to-local, align 4
  %v2_14818 = add i32 %v0_14818, -32
  store i32 %v2_14818, i32* %r2.global-to-local, align 4
  %v6_1481c = icmp slt i32 %v0_14818, 32
  br i1 %v6_1481c, label %dec_label_pc_14820.loopexit, label %dec_label_pc_14808.dec_label_pc_14808_crit_edge

dec_label_pc_14808.dec_label_pc_14808_crit_edge:  ; preds = %dec_label_pc_14808
  %v0_14808.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14808

dec_label_pc_14820.loopexit:                      ; preds = %dec_label_pc_14808
  %v4_14818 = sub i32 31, %v0_14818
  %v5_14818 = and i32 %v4_14818, %v0_14818
  %v6_14818 = icmp slt i32 %v5_14818, 0
  %v7_14818 = icmp slt i32 %v2_14818, 0
  store i1 %v6_14818, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14818, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14820

dec_label_pc_14820:                               ; preds = %dec_label_pc_14820.loopexit, %dec_label_pc_147fc
  %v6_14828 = phi i32 [ %v1_14814, %dec_label_pc_14820.loopexit ], [ %v0_1480c37, %dec_label_pc_147fc ]
  %v0_14830.pr = phi i32 [ %v2_14818, %dec_label_pc_14820.loopexit ], [ %v2_14800, %dec_label_pc_147fc ]
  %v4_14820 = add i32 %v0_14830.pr, 16
  %v6_14820 = sub i32 0, %v0_14830.pr
  %v7_14820 = and i32 %v4_14820, %v6_14820
  %v8_14820 = icmp slt i32 %v7_14820, 0
  store i1 %v8_14820, i1* %cpsr_v.global-to-local, align 1
  %v9_14820 = icmp slt i32 %v4_14820, 0
  store i1 %v9_14820, i1* %cpsr_n.global-to-local, align 1
  %v10_14820 = icmp eq i32 %v4_14820, 0
  store i1 %v10_14820, i1* %cpsr_z.global-to-local, align 1
  %v5_14824 = icmp slt i32 %v0_14830.pr, -16
  br i1 %v5_14824, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_14820
  %v6_14824 = load i32, i32* %r1.global-to-local, align 4
  %v7_14824 = add i32 %v6_14824, -4
  %v8_14824 = inttoptr i32 %v7_14824 to i32*
  %v9_14824 = load i32, i32* %v8_14824, align 4
  store i32 %v9_14824, i32* @r3, align 4
  %v10_14824 = add i32 %v6_14824, -8
  %v11_14824 = inttoptr i32 %v10_14824 to i32*
  %v12_14824 = load i32, i32* %v11_14824, align 4
  store i32 %v12_14824, i32* %r4.global-to-local, align 4
  %v13_14824 = add i32 %v6_14824, -12
  %v14_14824 = inttoptr i32 %v13_14824 to i32*
  %v15_14824 = load i32, i32* %v14_14824, align 4
  store i32 %v15_14824, i32* @ip, align 4
  %v16_14824 = add i32 %v6_14824, -16
  %v17_14824 = inttoptr i32 %v16_14824 to i32*
  %v18_14824 = load i32, i32* %v17_14824, align 4
  store i32 %v18_14824, i32* %lr.global-to-local, align 4
  store i32 %v16_14824, i32* %r1.global-to-local, align 4
  %v7_14828 = add i32 %v6_14828, -16
  %v8_14828 = inttoptr i32 %v7_14828 to i32*
  store i32 %v9_14824, i32* %v8_14828, align 4
  %v10_14828 = add i32 %v6_14828, -12
  %v11_14828 = inttoptr i32 %v10_14828 to i32*
  %v12_14828 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_14828, i32* %v11_14828, align 4
  %v13_14828 = add i32 %v6_14828, -8
  %v14_14828 = inttoptr i32 %v13_14828 to i32*
  %v15_14828 = load i32, i32* @ip, align 4
  store i32 %v15_14828, i32* %v14_14828, align 4
  %v16_14828 = add i32 %v6_14828, -4
  %v17_14828 = inttoptr i32 %v16_14828 to i32*
  %v18_14828 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_14828, i32* %v17_14828, align 4
  store i32 %v7_14828, i32* %r0.global-to-local, align 4
  %v6_1482c = load i32, i32* %r2.global-to-local, align 4
  %v7_1482c = add i32 %v6_1482c, -16
  store i32 %v7_1482c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14820, %bb147
  %v6_14838 = phi i32 [ %v7_14828, %bb147 ], [ %v6_14828, %dec_label_pc_14820 ]
  %v0_14830 = phi i32 [ %v7_1482c, %bb147 ], [ %v0_14830.pr, %dec_label_pc_14820 ]
  %v4_14830 = add i32 %v0_14830, 20
  store i32 %v4_14830, i32* %r2.global-to-local, align 4
  %v6_14830 = sub i32 0, %v0_14830
  %v7_14830 = and i32 %v4_14830, %v6_14830
  %v8_14830 = icmp slt i32 %v7_14830, 0
  store i1 %v8_14830, i1* %cpsr_v.global-to-local, align 1
  %v9_14830 = icmp slt i32 %v4_14830, 0
  store i1 %v9_14830, i1* %cpsr_n.global-to-local, align 1
  %v10_14830 = icmp eq i32 %v4_14830, 0
  store i1 %v10_14830, i1* %cpsr_z.global-to-local, align 1
  %v5_14834 = icmp slt i32 %v0_14830, -20
  br i1 %v5_14834, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_14834 = load i32, i32* %r1.global-to-local, align 4
  %v7_14834 = add i32 %v6_14834, -4
  %v8_14834 = inttoptr i32 %v7_14834 to i32*
  %v9_14834 = load i32, i32* %v8_14834, align 4
  store i32 %v9_14834, i32* @r3, align 4
  %v10_14834 = add i32 %v6_14834, -8
  %v11_14834 = inttoptr i32 %v10_14834 to i32*
  %v12_14834 = load i32, i32* %v11_14834, align 4
  store i32 %v12_14834, i32* @ip, align 4
  %v13_14834 = add i32 %v6_14834, -12
  %v14_14834 = inttoptr i32 %v13_14834 to i32*
  %v15_14834 = load i32, i32* %v14_14834, align 4
  store i32 %v15_14834, i32* %lr.global-to-local, align 4
  store i32 %v13_14834, i32* %r1.global-to-local, align 4
  %v7_14838 = add i32 %v6_14838, -12
  %v8_14838 = inttoptr i32 %v7_14838 to i32*
  store i32 %v9_14834, i32* %v8_14838, align 4
  %v10_14838 = add i32 %v6_14838, -8
  %v11_14838 = inttoptr i32 %v10_14838 to i32*
  %v12_14838 = load i32, i32* @ip, align 4
  store i32 %v12_14838, i32* %v11_14838, align 4
  %v13_14838 = add i32 %v6_14838, -4
  %v14_14838 = inttoptr i32 %v13_14838 to i32*
  %v15_14838 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_14838, i32* %v14_14838, align 4
  store i32 %v7_14838, i32* %r0.global-to-local, align 4
  %v6_1483c = load i32, i32* %r2.global-to-local, align 4
  %v7_1483c = add i32 %v6_1483c, -12
  store i32 %v7_1483c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_1485c45 = phi i32 [ %v6_14838, %.thread2 ], [ %v7_14838, %bb148 ]
  %v0_1484443 = phi i32 [ %v4_14830, %.thread2 ], [ %v7_1483c, %bb148 ]
  %v2_14840 = load i8*, i8** %stack_var_-8, align 4
  %v3_14840 = ptrtoint i8* %v2_14840 to i32
  store i32 %v3_14840, i32* @r4, align 4
  store i32 %v8_147fc, i32* @lr, align 4
  br label %dec_label_pc_14844

dec_label_pc_14844:                               ; preds = %dec_label_pc_147f4, %.thread4
  %v7_14854 = phi i32 [ %v0_1480c37, %dec_label_pc_147f4 ], [ %v6_1485c45, %.thread4 ]
  %v0_14844 = phi i32 [ %v2_147f4, %dec_label_pc_147f4 ], [ %v0_1484443, %.thread4 ]
  %v2_14844 = add i32 %v0_14844, 8
  store i32 %v2_14844, i32* %r2.global-to-local, align 4
  %v4_14844 = sub i32 0, %v0_14844
  %v5_14844 = and i32 %v2_14844, %v4_14844
  %v6_14844 = icmp slt i32 %v5_14844, 0
  store i1 %v6_14844, i1* %cpsr_v.global-to-local, align 1
  %v7_14844 = icmp slt i32 %v2_14844, 0
  store i1 %v7_14844, i1* %cpsr_n.global-to-local, align 1
  %v8_14844 = icmp eq i32 %v2_14844, 0
  store i1 %v8_14844, i1* %cpsr_z.global-to-local, align 1
  %v5_14848 = icmp slt i32 %v0_14844, -8
  br i1 %v5_14848, label %bb150, label %dec_label_pc_1484c

dec_label_pc_1484c:                               ; preds = %dec_label_pc_14844
  %v6_1484c = add i32 %v0_14844, 4
  store i32 %v6_1484c, i32* %r2.global-to-local, align 4
  %v8_1484c = sub i32 -5, %v0_14844
  %v9_1484c = and i32 %v8_1484c, %v2_14844
  %v10_1484c = icmp slt i32 %v9_1484c, 0
  store i1 %v10_1484c, i1* %cpsr_v.global-to-local, align 1
  %v11_1484c = icmp slt i32 %v6_1484c, 0
  store i1 %v11_1484c, i1* %cpsr_n.global-to-local, align 1
  %v12_1484c = icmp eq i32 %v2_14844, 4
  store i1 %v12_1484c, i1* %cpsr_z.global-to-local, align 1
  %v5_14850 = icmp slt i32 %v2_14844, 4
  %v6_14850 = load i32, i32* %r1.global-to-local, align 4
  %v7_14850 = add i32 %v6_14850, -4
  %v8_14850 = inttoptr i32 %v7_14850 to i32*
  %v9_14850 = load i32, i32* %v8_14850, align 4
  store i32 %v9_14850, i32* @r3, align 4
  br i1 %v5_14850, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_1484c
  store i32 %v7_14850, i32* %r1.global-to-local, align 4
  %v8_14854 = add i32 %v7_14854, -4
  %v9_14854 = inttoptr i32 %v8_14854 to i32*
  store i32 %v9_14850, i32* %v9_14854, align 4
  %v10_14854 = load i32, i32* %r0.global-to-local, align 4
  %v11_14854 = add i32 %v10_14854, -4
  store i32 %v11_14854, i32* %r0.global-to-local, align 4
  %v0_14864.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_1484c
  %v10_14858 = add i32 %v6_14850, -8
  %v11_14858 = inttoptr i32 %v10_14858 to i32*
  %v12_14858 = load i32, i32* %v11_14858, align 4
  store i32 %v12_14858, i32* @ip, align 4
  store i32 %v10_14858, i32* %r1.global-to-local, align 4
  %v7_1485c = add i32 %v7_14854, -8
  %v8_1485c = inttoptr i32 %v7_1485c to i32*
  store i32 %v9_14850, i32* %v8_1485c, align 4
  %v10_1485c = add i32 %v7_14854, -4
  %v11_1485c = inttoptr i32 %v10_1485c to i32*
  %v12_1485c = load i32, i32* @ip, align 4
  store i32 %v12_1485c, i32* %v11_1485c, align 4
  store i32 %v7_1485c, i32* %r0.global-to-local, align 4
  %v6_14860 = load i32, i32* %r2.global-to-local, align 4
  %v7_14860 = add i32 %v6_14860, -4
  store i32 %v7_14860, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %dec_label_pc_14844, %dec_label_pc_147d4, %.thread14, %dec_label_pc_14a08, %dec_label_pc_1499c, %dec_label_pc_14930, %bb149
  %v2_14868 = phi i32 [ %v11_14854, %.thread8 ], [ %v7_14854, %dec_label_pc_14844 ], [ %v2_147d8, %dec_label_pc_147d4 ], [ %v0_1490020, %.thread14 ], [ %v2_1487453, %dec_label_pc_14a08 ], [ %v2_1487452, %dec_label_pc_1499c ], [ %v2_1487451, %dec_label_pc_14930 ], [ %v7_1485c, %bb149 ]
  %v0_14864 = phi i32 [ %v0_14864.pre, %.thread8 ], [ %v2_14844, %dec_label_pc_14844 ], [ %v2_147dc, %dec_label_pc_147d4 ], [ %v2_148a8, %.thread14 ], [ %v0_1486449, %dec_label_pc_14a08 ], [ %v0_1486448, %dec_label_pc_1499c ], [ %v0_1486447, %dec_label_pc_14930 ], [ %v7_14860, %bb149 ]
  %v1_14864 = add i32 %v0_14864, 4
  store i32 %v1_14864, i32* %r2.global-to-local, align 4
  %v3_14864 = sub i32 0, %v0_14864
  %v4_14864 = and i32 %v1_14864, %v3_14864
  %v5_14864 = icmp slt i32 %v4_14864, 0
  store i1 %v5_14864, i1* %cpsr_v.global-to-local, align 1
  %v6_14864 = icmp slt i32 %v1_14864, 0
  store i1 %v6_14864, i1* %cpsr_n.global-to-local, align 1
  %v7_14864 = icmp eq i32 %v1_14864, 0
  store i1 %v7_14864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14864, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_1486c = add i32 %v0_14864, 2
  %v3_1486c = sub i32 -3, %v0_14864
  %v4_1486c = and i32 %v3_1486c, %v1_14864
  %v5_1486c = icmp slt i32 %v4_1486c, 0
  store i1 %v5_1486c, i1* %cpsr_v.global-to-local, align 1
  %v6_1486c = icmp slt i32 %v1_1486c, 0
  store i1 %v6_1486c, i1* %cpsr_n.global-to-local, align 1
  %v7_1486c = icmp eq i32 %v1_14864, 2
  store i1 %v7_1486c, i1* %cpsr_z.global-to-local, align 1
  %v0_14870 = load i32, i32* %r1.global-to-local, align 4
  %v1_14870 = add i32 %v0_14870, -1
  %v2_14870 = inttoptr i32 %v1_14870 to i8*
  %v3_14870 = load i8, i8* %v2_14870, align 1
  %v4_14870 = zext i8 %v3_14870 to i32
  store i32 %v4_14870, i32* @r3, align 4
  store i32 %v1_14870, i32* %r1.global-to-local, align 4
  %v3_14874 = add i32 %v2_14868, -1
  %v4_14874 = inttoptr i32 %v3_14874 to i8*
  store i8 %v3_14870, i8* %v4_14874, align 1
  %v5_14874 = load i32, i32* %r0.global-to-local, align 4
  %v6_14874 = add i32 %v5_14874, -1
  store i32 %v6_14874, i32* %r0.global-to-local, align 4
  %v0_14878 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14878 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14878 = xor i1 %v0_14878, %v1_14878
  br i1 %v2_14878, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_14878 = load i32, i32* %r1.global-to-local, align 4
  %v4_14878 = add i32 %v3_14878, -1
  %v5_14878 = inttoptr i32 %v4_14878 to i8*
  %v6_14878 = load i8, i8* %v5_14878, align 1
  %v7_14878 = zext i8 %v6_14878 to i32
  store i32 %v7_14878, i32* @r3, align 4
  store i32 %v4_14878, i32* %r1.global-to-local, align 4
  %v6_1487c = add i32 %v5_14874, -2
  %v7_1487c = inttoptr i32 %v6_1487c to i8*
  store i8 %v6_14878, i8* %v7_1487c, align 1
  %v8_1487c = load i32, i32* %r0.global-to-local, align 4
  %v9_1487c = add i32 %v8_1487c, -1
  store i32 %v9_1487c, i32* %r0.global-to-local, align 4
  %v1_14880.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14880.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_14884 = phi i32 [ %v9_1487c, %bb152 ], [ %v6_14874, %bb151 ]
  %v2_14884 = phi i1 [ %v2_14880.pre, %bb152 ], [ %v1_14878, %bb151 ]
  %v1_14884 = phi i1 [ %v1_14880.pre, %bb152 ], [ %v0_14878, %bb151 ]
  %v0_14880 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14880 = xor i1 %v2_14884, %v1_14884
  %v4_14880 = or i1 %v0_14880, %v3_14880
  br i1 %v4_14880, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_14880 = load i32, i32* %r1.global-to-local, align 4
  %v6_14880 = add i32 %v5_14880, -1
  %v7_14880 = inttoptr i32 %v6_14880 to i8*
  %v8_14880 = load i8, i8* %v7_14880, align 1
  %v9_14880 = zext i8 %v8_14880 to i32
  store i32 %v9_14880, i32* @r3, align 4
  store i32 %v6_14880, i32* %r1.global-to-local, align 4
  %v8_14884 = add i32 %v7_14884, -1
  %v9_14884 = inttoptr i32 %v8_14884 to i8*
  store i8 %v8_14880, i8* %v9_14884, align 1
  %v10_14884 = load i32, i32* %r0.global-to-local, align 4
  %v11_14884 = add i32 %v10_14884, -1
  store i32 %v11_14884, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_1488c:                               ; preds = %dec_label_pc_147e4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_1488c = icmp eq i32 %v1_147e4, 1
  store i1 %v8_1488c, i1* %cpsr_n.global-to-local, align 1
  %v9_1488c = icmp eq i32 %v1_147e4, 2
  store i1 %v9_1488c, i1* %cpsr_z.global-to-local, align 1
  %v1_14890 = add i32 %v2_147d4, -1
  %v2_14890 = inttoptr i32 %v1_14890 to i8*
  %v3_14890 = load i8, i8* %v2_14890, align 1
  %v4_14890 = zext i8 %v3_14890 to i32
  store i32 %v4_14890, i32* @r3, align 4
  store i32 %v1_14890, i32* %r1.global-to-local, align 4
  %v3_14894 = add i32 %v2_147d8, -1
  %v4_14894 = inttoptr i32 %v3_14894 to i8*
  store i8 %v3_14890, i8* %v4_14894, align 1
  %v5_14894 = load i32, i32* %r0.global-to-local, align 4
  %v6_14894 = add i32 %v5_14894, -1
  store i32 %v6_14894, i32* %r0.global-to-local, align 4
  br i1 %v8_1488c, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_1488c
  %v6_14898 = load i32, i32* %r1.global-to-local, align 4
  %v7_14898 = add i32 %v6_14898, -1
  %v8_14898 = inttoptr i32 %v7_14898 to i8*
  %v9_14898 = load i8, i8* %v8_14898, align 1
  %v10_14898 = zext i8 %v9_14898 to i32
  store i32 %v10_14898, i32* @r3, align 4
  store i32 %v7_14898, i32* %r1.global-to-local, align 4
  %v9_1489c = add i32 %v5_14894, -2
  %v10_1489c = inttoptr i32 %v9_1489c to i8*
  store i8 %v9_14898, i8* %v10_1489c, align 1
  %v11_1489c = load i32, i32* %r0.global-to-local, align 4
  %v12_1489c = add i32 %v11_1489c, -1
  store i32 %v12_1489c, i32* %r0.global-to-local, align 4
  br i1 %v9_1488c, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_148a0 = load i32, i32* %r1.global-to-local, align 4
  %v9_148a0 = add i32 %v8_148a0, -1
  %v10_148a0 = inttoptr i32 %v9_148a0 to i8*
  %v11_148a0 = load i8, i8* %v10_148a0, align 1
  %v12_148a0 = zext i8 %v11_148a0 to i32
  store i32 %v12_148a0, i32* @r3, align 4
  store i32 %v9_148a0, i32* %r1.global-to-local, align 4
  %v11_148a4 = add i32 %v11_1489c, -2
  %v12_148a4 = inttoptr i32 %v11_148a4 to i8*
  store i8 %v11_148a0, i8* %v12_148a4, align 1
  %v13_148a4 = load i32, i32* %r0.global-to-local, align 4
  %v14_148a4 = add i32 %v13_148a4, -1
  store i32 %v14_148a4, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_1488c, %bb155
  %v0_1490020 = phi i32 [ %v12_1489c, %bb154 ], [ %v6_14894, %dec_label_pc_1488c ], [ %v14_148a4, %bb155 ]
  %v0_148a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_148a8 = load i32, i32* @ip, align 4
  %v2_148a8 = sub i32 %v0_148a8, %v1_148a8
  store i32 %v2_148a8, i32* %r2.global-to-local, align 4
  %v4_148a8 = xor i32 %v1_148a8, %v0_148a8
  %v5_148a8 = xor i32 %v2_148a8, %v0_148a8
  %v6_148a8 = and i32 %v5_148a8, %v4_148a8
  %v7_148a8 = icmp slt i32 %v6_148a8, 0
  store i1 %v7_148a8, i1* %cpsr_v.global-to-local, align 1
  %v8_148a8 = icmp slt i32 %v2_148a8, 0
  store i1 %v8_148a8, i1* %cpsr_n.global-to-local, align 1
  %v9_148a8 = icmp eq i32 %v0_148a8, %v1_148a8
  store i1 %v9_148a8, i1* %cpsr_z.global-to-local, align 1
  %v5_148ac = icmp slt i32 %v0_148a8, %v1_148a8
  br i1 %v5_148ac, label %bb150, label %dec_label_pc_148b0

dec_label_pc_148b0:                               ; preds = %.thread14
  %v0_148b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_148b0 = urem i32 %v0_148b0, 4
  store i32 %v1_148b0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_148b0 = icmp eq i32 %v1_148b0, 0
  store i1 %v2_148b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_148b0, label %dec_label_pc_147f4, label %dec_label_pc_148b8

dec_label_pc_148b8:                               ; preds = %dec_label_pc_147ec, %dec_label_pc_148b0
  %v0_1490019 = phi i32 [ %v2_147d8, %dec_label_pc_147ec ], [ %v0_1490020, %dec_label_pc_148b0 ]
  %v0_149ac = phi i32 [ %v2_147dc, %dec_label_pc_147ec ], [ %v2_148a8, %dec_label_pc_148b0 ]
  %v0_148b8 = phi i32 [ %v2_147d4, %dec_label_pc_147ec ], [ %v0_148b0, %dec_label_pc_148b0 ]
  %v0_148c0 = phi i32 [ %v1_147ec, %dec_label_pc_147ec ], [ %v1_148b0, %dec_label_pc_148b0 ]
  %v1_148b8 = and i32 %v0_148b8, -4
  store i32 %v1_148b8, i32* %r1.global-to-local, align 4
  %v1_148bc = inttoptr i32 %v1_148b8 to i32*
  %v2_148bc = load i32, i32* %v1_148bc, align 4
  store i32 %v2_148bc, i32* @r3, align 4
  %v7_148c0 = icmp ult i32 %v0_148c0, 2
  %v2_149a4 = add i32 %v0_149ac, -12
  %v4_149a4 = sub i32 11, %v0_149ac
  %v5_149a4 = and i32 %v4_149a4, %v0_149ac
  %v6_149a4 = icmp slt i32 %v5_149a4, 0
  store i1 %v6_149a4, i1* %cpsr_v.global-to-local, align 1
  %v7_149a4 = icmp slt i32 %v2_149a4, 0
  store i1 %v7_149a4, i1* %cpsr_n.global-to-local, align 1
  %v8_149a4 = icmp eq i32 %v0_149ac, 12
  store i1 %v8_149a4, i1* %cpsr_z.global-to-local, align 1
  %v5_149a8 = icmp slt i32 %v0_149ac, 12
  br i1 %v7_148c0, label %dec_label_pc_149a4, label %dec_label_pc_148c8

dec_label_pc_148c8:                               ; preds = %dec_label_pc_148b8
  %v8_148c0 = icmp eq i32 %v0_148c0, 2
  br i1 %v8_148c0, label %dec_label_pc_14938, label %dec_label_pc_148cc

dec_label_pc_148cc:                               ; preds = %dec_label_pc_148c8
  br i1 %v5_149a8, label %dec_label_pc_14918, label %dec_label_pc_148d4

dec_label_pc_148d4:                               ; preds = %dec_label_pc_148cc
  store i32 %v2_149a4, i32* %r2.global-to-local, align 4
  %v3_148d8 = load i32, i32* @r4, align 4
  store i32 %v3_148d8, i32* %stack_var_-12, align 4
  %v6_148d8 = load i32, i32* @r5, align 4
  %v8_148d8 = inttoptr i32 %v6_148d8 to i8*
  store i8* %v8_148d8, i8** %stack_var_-8, align 4
  %v11_148d8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_148dc

dec_label_pc_148dc:                               ; preds = %dec_label_pc_148dc.dec_label_pc_148dc_crit_edge, %dec_label_pc_148d4
  %v0_14900 = phi i32 [ %v1_14900, %dec_label_pc_148dc.dec_label_pc_148dc_crit_edge ], [ %v0_1490019, %dec_label_pc_148d4 ]
  %v0_148e0 = phi i32 [ %v0_148e0.pre, %dec_label_pc_148dc.dec_label_pc_148dc_crit_edge ], [ %v1_148b8, %dec_label_pc_148d4 ]
  %v0_148dc = phi i32 [ %v0_148dc.pre, %dec_label_pc_148dc.dec_label_pc_148dc_crit_edge ], [ %v2_148bc, %dec_label_pc_148d4 ]
  %v3_148dc = mul i32 %v0_148dc, 256
  store i32 %v3_148dc, i32* %lr.global-to-local, align 4
  %v1_148e0 = add i32 %v0_148e0, -4
  %v2_148e0 = inttoptr i32 %v1_148e0 to i32*
  %v3_148e0 = load i32, i32* %v2_148e0, align 4
  store i32 %v3_148e0, i32* @r3, align 4
  %v4_148e0 = add i32 %v0_148e0, -8
  %v5_148e0 = inttoptr i32 %v4_148e0 to i32*
  %v6_148e0 = load i32, i32* %v5_148e0, align 4
  store i32 %v6_148e0, i32* %r4.global-to-local, align 4
  %v7_148e0 = add i32 %v0_148e0, -12
  %v8_148e0 = inttoptr i32 %v7_148e0 to i32*
  %v9_148e0 = load i32, i32* %v8_148e0, align 4
  store i32 %v9_148e0, i32* %r5.global-to-local, align 4
  %v10_148e0 = add i32 %v0_148e0, -16
  %v11_148e0 = inttoptr i32 %v10_148e0 to i32*
  %v12_148e0 = load i32, i32* %v11_148e0, align 4
  store i32 %v10_148e0, i32* %r1.global-to-local, align 4
  %v4_148e4 = udiv i32 %v12_148e0, 16777216
  %v5_148e4 = or i32 %v4_148e4, %v3_148dc
  store i32 %v5_148e4, i32* %lr.global-to-local, align 4
  %v3_148e8 = mul i32 %v12_148e0, 256
  %v4_148ec = udiv i32 %v9_148e0, 16777216
  %v5_148ec = or i32 %v3_148e8, %v4_148ec
  store i32 %v5_148ec, i32* @ip, align 4
  %v3_148f0 = mul i32 %v9_148e0, 256
  %v4_148f4 = udiv i32 %v6_148e0, 16777216
  %v5_148f4 = or i32 %v3_148f0, %v4_148f4
  store i32 %v5_148f4, i32* %r5.global-to-local, align 4
  %v3_148f8 = mul i32 %v6_148e0, 256
  %v4_148fc = udiv i32 %v3_148e0, 16777216
  %v5_148fc = or i32 %v3_148f8, %v4_148fc
  store i32 %v5_148fc, i32* %r4.global-to-local, align 4
  %v1_14900 = add i32 %v0_14900, -16
  %v2_14900 = inttoptr i32 %v1_14900 to i32*
  store i32 %v5_148fc, i32* %v2_14900, align 4
  %v4_14900 = add i32 %v0_14900, -12
  %v5_14900 = inttoptr i32 %v4_14900 to i32*
  %v6_14900 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14900, i32* %v5_14900, align 4
  %v7_14900 = add i32 %v0_14900, -8
  %v8_14900 = inttoptr i32 %v7_14900 to i32*
  %v9_14900 = load i32, i32* @ip, align 4
  store i32 %v9_14900, i32* %v8_14900, align 4
  %v10_14900 = add i32 %v0_14900, -4
  %v11_14900 = inttoptr i32 %v10_14900 to i32*
  %v12_14900 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14900, i32* %v11_14900, align 4
  store i32 %v1_14900, i32* %r0.global-to-local, align 4
  %v0_14904 = load i32, i32* %r2.global-to-local, align 4
  %v2_14904 = add i32 %v0_14904, -16
  store i32 %v2_14904, i32* %r2.global-to-local, align 4
  %v6_14908 = icmp slt i32 %v0_14904, 16
  br i1 %v6_14908, label %dec_label_pc_1490c, label %dec_label_pc_148dc.dec_label_pc_148dc_crit_edge

dec_label_pc_148dc.dec_label_pc_148dc_crit_edge:  ; preds = %dec_label_pc_148dc
  %v0_148dc.pre = load i32, i32* @r3, align 4
  %v0_148e0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_148dc

dec_label_pc_1490c:                               ; preds = %dec_label_pc_148dc
  %v2_1490c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1490c, i32* @r4, align 4
  %v5_1490c = load i8*, i8** %stack_var_-8, align 4
  %v6_1490c = ptrtoint i8* %v5_1490c to i32
  store i32 %v6_1490c, i32* @r5, align 4
  store i32 %v11_148d8, i32* @lr, align 4
  %v2_14910 = add i32 %v0_14904, -4
  store i32 %v2_14910, i32* %r2.global-to-local, align 4
  %v4_14910 = add i32 %v0_14904, 2147483632
  %v5_14910 = and i32 %v2_14910, %v4_14910
  %v6_14910 = icmp slt i32 %v5_14910, 0
  store i1 %v6_14910, i1* %cpsr_v.global-to-local, align 1
  %v7_14910 = icmp slt i32 %v2_14910, 0
  store i1 %v7_14910, i1* %cpsr_n.global-to-local, align 1
  %v8_14910 = icmp eq i32 %v2_14910, 0
  store i1 %v8_14910, i1* %cpsr_z.global-to-local, align 1
  %v5_14914 = icmp slt i32 %v2_14904, -12
  br i1 %v5_14914, label %dec_label_pc_14930, label %dec_label_pc_14918

dec_label_pc_14918:                               ; preds = %dec_label_pc_1490c, %dec_label_pc_148cc, %dec_label_pc_14918
  %v1_14924 = phi i32 [ %v5_14924, %dec_label_pc_14918 ], [ %v1_14900, %dec_label_pc_1490c ], [ %v0_1490019, %dec_label_pc_148cc ]
  %v0_14918 = load i32, i32* @r3, align 4
  %v3_14918 = mul i32 %v0_14918, 256
  store i32 %v3_14918, i32* %ip.global-to-local, align 4
  %v0_1491c = load i32, i32* %r1.global-to-local, align 4
  %v1_1491c = add i32 %v0_1491c, -4
  %v2_1491c = inttoptr i32 %v1_1491c to i32*
  %v3_1491c = load i32, i32* %v2_1491c, align 4
  store i32 %v3_1491c, i32* @r3, align 4
  store i32 %v1_1491c, i32* %r1.global-to-local, align 4
  %v4_14920 = udiv i32 %v3_1491c, 16777216
  %v5_14920 = or i32 %v4_14920, %v3_14918
  store i32 %v5_14920, i32* @ip, align 4
  %v2_14924 = add i32 %v1_14924, -4
  %v3_14924 = inttoptr i32 %v2_14924 to i32*
  store i32 %v5_14920, i32* %v3_14924, align 4
  %v4_14924 = load i32, i32* %r0.global-to-local, align 4
  %v5_14924 = add i32 %v4_14924, -4
  store i32 %v5_14924, i32* %r0.global-to-local, align 4
  %v0_14928 = load i32, i32* %r2.global-to-local, align 4
  %v2_14928 = add i32 %v0_14928, -4
  store i32 %v2_14928, i32* %r2.global-to-local, align 4
  %v6_1492c = icmp slt i32 %v0_14928, 4
  br i1 %v6_1492c, label %dec_label_pc_14930.loopexit, label %dec_label_pc_14918

dec_label_pc_14930.loopexit:                      ; preds = %dec_label_pc_14918
  %v4_14928 = sub i32 3, %v0_14928
  %v5_14928 = and i32 %v4_14928, %v0_14928
  %v6_14928 = icmp slt i32 %v5_14928, 0
  %v7_14928 = icmp slt i32 %v2_14928, 0
  store i1 %v6_14928, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14928, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14930

dec_label_pc_14930:                               ; preds = %dec_label_pc_14930.loopexit, %dec_label_pc_1490c
  %v2_1487451 = phi i32 [ %v5_14924, %dec_label_pc_14930.loopexit ], [ %v1_14900, %dec_label_pc_1490c ]
  %v0_1486447 = phi i32 [ %v2_14928, %dec_label_pc_14930.loopexit ], [ %v2_14910, %dec_label_pc_1490c ]
  %v0_14930 = load i32, i32* %r1.global-to-local, align 4
  %v1_14930 = add i32 %v0_14930, 3
  store i32 %v1_14930, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_14938:                               ; preds = %dec_label_pc_148c8
  br i1 %v5_149a8, label %dec_label_pc_14984, label %dec_label_pc_14940

dec_label_pc_14940:                               ; preds = %dec_label_pc_14938
  store i32 %v2_149a4, i32* %r2.global-to-local, align 4
  %v3_14944 = load i32, i32* @r4, align 4
  store i32 %v3_14944, i32* %stack_var_-12, align 4
  %v6_14944 = load i32, i32* @r5, align 4
  %v8_14944 = inttoptr i32 %v6_14944 to i8*
  store i8* %v8_14944, i8** %stack_var_-8, align 4
  %v11_14944 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14948

dec_label_pc_14948:                               ; preds = %dec_label_pc_14948.dec_label_pc_14948_crit_edge, %dec_label_pc_14940
  %v0_1496c = phi i32 [ %v1_1496c, %dec_label_pc_14948.dec_label_pc_14948_crit_edge ], [ %v0_1490019, %dec_label_pc_14940 ]
  %v0_1494c = phi i32 [ %v0_1494c.pre, %dec_label_pc_14948.dec_label_pc_14948_crit_edge ], [ %v1_148b8, %dec_label_pc_14940 ]
  %v0_14948 = phi i32 [ %v0_14948.pre, %dec_label_pc_14948.dec_label_pc_14948_crit_edge ], [ %v2_148bc, %dec_label_pc_14940 ]
  %v3_14948 = mul i32 %v0_14948, 65536
  store i32 %v3_14948, i32* %lr.global-to-local, align 4
  %v1_1494c = add i32 %v0_1494c, -4
  %v2_1494c = inttoptr i32 %v1_1494c to i32*
  %v3_1494c = load i32, i32* %v2_1494c, align 4
  store i32 %v3_1494c, i32* @r3, align 4
  %v4_1494c = add i32 %v0_1494c, -8
  %v5_1494c = inttoptr i32 %v4_1494c to i32*
  %v6_1494c = load i32, i32* %v5_1494c, align 4
  store i32 %v6_1494c, i32* %r4.global-to-local, align 4
  %v7_1494c = add i32 %v0_1494c, -12
  %v8_1494c = inttoptr i32 %v7_1494c to i32*
  %v9_1494c = load i32, i32* %v8_1494c, align 4
  store i32 %v9_1494c, i32* %r5.global-to-local, align 4
  %v10_1494c = add i32 %v0_1494c, -16
  %v11_1494c = inttoptr i32 %v10_1494c to i32*
  %v12_1494c = load i32, i32* %v11_1494c, align 4
  store i32 %v10_1494c, i32* %r1.global-to-local, align 4
  %v4_14950 = udiv i32 %v12_1494c, 65536
  %v5_14950 = or i32 %v4_14950, %v3_14948
  store i32 %v5_14950, i32* %lr.global-to-local, align 4
  %v3_14954 = mul i32 %v12_1494c, 65536
  %v4_14958 = udiv i32 %v9_1494c, 65536
  %v5_14958 = or i32 %v3_14954, %v4_14958
  store i32 %v5_14958, i32* @ip, align 4
  %v3_1495c = mul i32 %v9_1494c, 65536
  %v4_14960 = udiv i32 %v6_1494c, 65536
  %v5_14960 = or i32 %v3_1495c, %v4_14960
  store i32 %v5_14960, i32* %r5.global-to-local, align 4
  %v3_14964 = mul i32 %v6_1494c, 65536
  %v4_14968 = udiv i32 %v3_1494c, 65536
  %v5_14968 = or i32 %v3_14964, %v4_14968
  store i32 %v5_14968, i32* %r4.global-to-local, align 4
  %v1_1496c = add i32 %v0_1496c, -16
  %v2_1496c = inttoptr i32 %v1_1496c to i32*
  store i32 %v5_14968, i32* %v2_1496c, align 4
  %v4_1496c = add i32 %v0_1496c, -12
  %v5_1496c = inttoptr i32 %v4_1496c to i32*
  %v6_1496c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_1496c, i32* %v5_1496c, align 4
  %v7_1496c = add i32 %v0_1496c, -8
  %v8_1496c = inttoptr i32 %v7_1496c to i32*
  %v9_1496c = load i32, i32* @ip, align 4
  store i32 %v9_1496c, i32* %v8_1496c, align 4
  %v10_1496c = add i32 %v0_1496c, -4
  %v11_1496c = inttoptr i32 %v10_1496c to i32*
  %v12_1496c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1496c, i32* %v11_1496c, align 4
  store i32 %v1_1496c, i32* %r0.global-to-local, align 4
  %v0_14970 = load i32, i32* %r2.global-to-local, align 4
  %v2_14970 = add i32 %v0_14970, -16
  store i32 %v2_14970, i32* %r2.global-to-local, align 4
  %v6_14974 = icmp slt i32 %v0_14970, 16
  br i1 %v6_14974, label %dec_label_pc_14978, label %dec_label_pc_14948.dec_label_pc_14948_crit_edge

dec_label_pc_14948.dec_label_pc_14948_crit_edge:  ; preds = %dec_label_pc_14948
  %v0_14948.pre = load i32, i32* @r3, align 4
  %v0_1494c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14948

dec_label_pc_14978:                               ; preds = %dec_label_pc_14948
  %v2_14978 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14978, i32* @r4, align 4
  %v5_14978 = load i8*, i8** %stack_var_-8, align 4
  %v6_14978 = ptrtoint i8* %v5_14978 to i32
  store i32 %v6_14978, i32* @r5, align 4
  store i32 %v11_14944, i32* @lr, align 4
  %v2_1497c = add i32 %v0_14970, -4
  store i32 %v2_1497c, i32* %r2.global-to-local, align 4
  %v4_1497c = add i32 %v0_14970, 2147483632
  %v5_1497c = and i32 %v2_1497c, %v4_1497c
  %v6_1497c = icmp slt i32 %v5_1497c, 0
  store i1 %v6_1497c, i1* %cpsr_v.global-to-local, align 1
  %v7_1497c = icmp slt i32 %v2_1497c, 0
  store i1 %v7_1497c, i1* %cpsr_n.global-to-local, align 1
  %v8_1497c = icmp eq i32 %v2_1497c, 0
  store i1 %v8_1497c, i1* %cpsr_z.global-to-local, align 1
  %v5_14980 = icmp slt i32 %v2_14970, -12
  br i1 %v5_14980, label %dec_label_pc_1499c, label %dec_label_pc_14984

dec_label_pc_14984:                               ; preds = %dec_label_pc_14978, %dec_label_pc_14938, %dec_label_pc_14984
  %v1_14990 = phi i32 [ %v5_14990, %dec_label_pc_14984 ], [ %v1_1496c, %dec_label_pc_14978 ], [ %v0_1490019, %dec_label_pc_14938 ]
  %v0_14984 = load i32, i32* @r3, align 4
  %v3_14984 = mul i32 %v0_14984, 65536
  store i32 %v3_14984, i32* %ip.global-to-local, align 4
  %v0_14988 = load i32, i32* %r1.global-to-local, align 4
  %v1_14988 = add i32 %v0_14988, -4
  %v2_14988 = inttoptr i32 %v1_14988 to i32*
  %v3_14988 = load i32, i32* %v2_14988, align 4
  store i32 %v3_14988, i32* @r3, align 4
  store i32 %v1_14988, i32* %r1.global-to-local, align 4
  %v4_1498c = udiv i32 %v3_14988, 65536
  %v5_1498c = or i32 %v4_1498c, %v3_14984
  store i32 %v5_1498c, i32* @ip, align 4
  %v2_14990 = add i32 %v1_14990, -4
  %v3_14990 = inttoptr i32 %v2_14990 to i32*
  store i32 %v5_1498c, i32* %v3_14990, align 4
  %v4_14990 = load i32, i32* %r0.global-to-local, align 4
  %v5_14990 = add i32 %v4_14990, -4
  store i32 %v5_14990, i32* %r0.global-to-local, align 4
  %v0_14994 = load i32, i32* %r2.global-to-local, align 4
  %v2_14994 = add i32 %v0_14994, -4
  store i32 %v2_14994, i32* %r2.global-to-local, align 4
  %v6_14998 = icmp slt i32 %v0_14994, 4
  br i1 %v6_14998, label %dec_label_pc_1499c.loopexit, label %dec_label_pc_14984

dec_label_pc_1499c.loopexit:                      ; preds = %dec_label_pc_14984
  %v4_14994 = sub i32 3, %v0_14994
  %v5_14994 = and i32 %v4_14994, %v0_14994
  %v6_14994 = icmp slt i32 %v5_14994, 0
  %v7_14994 = icmp slt i32 %v2_14994, 0
  store i1 %v6_14994, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14994, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1499c

dec_label_pc_1499c:                               ; preds = %dec_label_pc_1499c.loopexit, %dec_label_pc_14978
  %v2_1487452 = phi i32 [ %v5_14990, %dec_label_pc_1499c.loopexit ], [ %v1_1496c, %dec_label_pc_14978 ]
  %v0_1486448 = phi i32 [ %v2_14994, %dec_label_pc_1499c.loopexit ], [ %v2_1497c, %dec_label_pc_14978 ]
  %v0_1499c = load i32, i32* %r1.global-to-local, align 4
  %v1_1499c = add i32 %v0_1499c, 2
  store i32 %v1_1499c, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_149a4:                               ; preds = %dec_label_pc_148b8
  br i1 %v5_149a8, label %dec_label_pc_149f0, label %dec_label_pc_149ac

dec_label_pc_149ac:                               ; preds = %dec_label_pc_149a4
  store i32 %v2_149a4, i32* %r2.global-to-local, align 4
  %v3_149b0 = load i32, i32* @r4, align 4
  store i32 %v3_149b0, i32* %stack_var_-12, align 4
  %v6_149b0 = load i32, i32* @r5, align 4
  %v8_149b0 = inttoptr i32 %v6_149b0 to i8*
  store i8* %v8_149b0, i8** %stack_var_-8, align 4
  %v11_149b0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_149b4

dec_label_pc_149b4:                               ; preds = %dec_label_pc_149b4.dec_label_pc_149b4_crit_edge, %dec_label_pc_149ac
  %v0_149d8 = phi i32 [ %v1_149d8, %dec_label_pc_149b4.dec_label_pc_149b4_crit_edge ], [ %v0_1490019, %dec_label_pc_149ac ]
  %v0_149b8 = phi i32 [ %v0_149b8.pre, %dec_label_pc_149b4.dec_label_pc_149b4_crit_edge ], [ %v1_148b8, %dec_label_pc_149ac ]
  %v0_149b4 = phi i32 [ %v0_149b4.pre, %dec_label_pc_149b4.dec_label_pc_149b4_crit_edge ], [ %v2_148bc, %dec_label_pc_149ac ]
  %v3_149b4 = mul i32 %v0_149b4, 16777216
  store i32 %v3_149b4, i32* %lr.global-to-local, align 4
  %v1_149b8 = add i32 %v0_149b8, -4
  %v2_149b8 = inttoptr i32 %v1_149b8 to i32*
  %v3_149b8 = load i32, i32* %v2_149b8, align 4
  store i32 %v3_149b8, i32* @r3, align 4
  %v4_149b8 = add i32 %v0_149b8, -8
  %v5_149b8 = inttoptr i32 %v4_149b8 to i32*
  %v6_149b8 = load i32, i32* %v5_149b8, align 4
  store i32 %v6_149b8, i32* %r4.global-to-local, align 4
  %v7_149b8 = add i32 %v0_149b8, -12
  %v8_149b8 = inttoptr i32 %v7_149b8 to i32*
  %v9_149b8 = load i32, i32* %v8_149b8, align 4
  store i32 %v9_149b8, i32* %r5.global-to-local, align 4
  %v10_149b8 = add i32 %v0_149b8, -16
  %v11_149b8 = inttoptr i32 %v10_149b8 to i32*
  %v12_149b8 = load i32, i32* %v11_149b8, align 4
  store i32 %v10_149b8, i32* %r1.global-to-local, align 4
  %v4_149bc = udiv i32 %v12_149b8, 256
  %v5_149bc = or i32 %v4_149bc, %v3_149b4
  store i32 %v5_149bc, i32* %lr.global-to-local, align 4
  %v3_149c0 = mul i32 %v12_149b8, 16777216
  %v4_149c4 = udiv i32 %v9_149b8, 256
  %v5_149c4 = or i32 %v3_149c0, %v4_149c4
  store i32 %v5_149c4, i32* @ip, align 4
  %v3_149c8 = mul i32 %v9_149b8, 16777216
  %v4_149cc = udiv i32 %v6_149b8, 256
  %v5_149cc = or i32 %v3_149c8, %v4_149cc
  store i32 %v5_149cc, i32* %r5.global-to-local, align 4
  %v3_149d0 = mul i32 %v6_149b8, 16777216
  %v4_149d4 = udiv i32 %v3_149b8, 256
  %v5_149d4 = or i32 %v3_149d0, %v4_149d4
  store i32 %v5_149d4, i32* %r4.global-to-local, align 4
  %v1_149d8 = add i32 %v0_149d8, -16
  %v2_149d8 = inttoptr i32 %v1_149d8 to i32*
  store i32 %v5_149d4, i32* %v2_149d8, align 4
  %v4_149d8 = add i32 %v0_149d8, -12
  %v5_149d8 = inttoptr i32 %v4_149d8 to i32*
  %v6_149d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_149d8, i32* %v5_149d8, align 4
  %v7_149d8 = add i32 %v0_149d8, -8
  %v8_149d8 = inttoptr i32 %v7_149d8 to i32*
  %v9_149d8 = load i32, i32* @ip, align 4
  store i32 %v9_149d8, i32* %v8_149d8, align 4
  %v10_149d8 = add i32 %v0_149d8, -4
  %v11_149d8 = inttoptr i32 %v10_149d8 to i32*
  %v12_149d8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_149d8, i32* %v11_149d8, align 4
  store i32 %v1_149d8, i32* %r0.global-to-local, align 4
  %v0_149dc = load i32, i32* %r2.global-to-local, align 4
  %v2_149dc = add i32 %v0_149dc, -16
  store i32 %v2_149dc, i32* %r2.global-to-local, align 4
  %v6_149e0 = icmp slt i32 %v0_149dc, 16
  br i1 %v6_149e0, label %dec_label_pc_149e4, label %dec_label_pc_149b4.dec_label_pc_149b4_crit_edge

dec_label_pc_149b4.dec_label_pc_149b4_crit_edge:  ; preds = %dec_label_pc_149b4
  %v0_149b4.pre = load i32, i32* @r3, align 4
  %v0_149b8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_149b4

dec_label_pc_149e4:                               ; preds = %dec_label_pc_149b4
  %v2_149e4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_149e4, i32* @r4, align 4
  %v5_149e4 = load i8*, i8** %stack_var_-8, align 4
  %v6_149e4 = ptrtoint i8* %v5_149e4 to i32
  store i32 %v6_149e4, i32* @r5, align 4
  store i32 %v11_149b0, i32* @lr, align 4
  %v2_149e8 = add i32 %v0_149dc, -4
  store i32 %v2_149e8, i32* %r2.global-to-local, align 4
  %v4_149e8 = add i32 %v0_149dc, 2147483632
  %v5_149e8 = and i32 %v2_149e8, %v4_149e8
  %v6_149e8 = icmp slt i32 %v5_149e8, 0
  store i1 %v6_149e8, i1* %cpsr_v.global-to-local, align 1
  %v7_149e8 = icmp slt i32 %v2_149e8, 0
  store i1 %v7_149e8, i1* %cpsr_n.global-to-local, align 1
  %v8_149e8 = icmp eq i32 %v2_149e8, 0
  store i1 %v8_149e8, i1* %cpsr_z.global-to-local, align 1
  %v5_149ec = icmp slt i32 %v2_149dc, -12
  br i1 %v5_149ec, label %dec_label_pc_14a08, label %dec_label_pc_149f0

dec_label_pc_149f0:                               ; preds = %dec_label_pc_149e4, %dec_label_pc_149a4, %dec_label_pc_149f0
  %v1_149fc = phi i32 [ %v5_149fc, %dec_label_pc_149f0 ], [ %v1_149d8, %dec_label_pc_149e4 ], [ %v0_1490019, %dec_label_pc_149a4 ]
  %v0_149f0 = load i32, i32* @r3, align 4
  %v3_149f0 = mul i32 %v0_149f0, 16777216
  store i32 %v3_149f0, i32* %ip.global-to-local, align 4
  %v0_149f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_149f4 = add i32 %v0_149f4, -4
  %v2_149f4 = inttoptr i32 %v1_149f4 to i32*
  %v3_149f4 = load i32, i32* %v2_149f4, align 4
  store i32 %v3_149f4, i32* @r3, align 4
  store i32 %v1_149f4, i32* %r1.global-to-local, align 4
  %v4_149f8 = udiv i32 %v3_149f4, 256
  %v5_149f8 = or i32 %v4_149f8, %v3_149f0
  store i32 %v5_149f8, i32* @ip, align 4
  %v2_149fc = add i32 %v1_149fc, -4
  %v3_149fc = inttoptr i32 %v2_149fc to i32*
  store i32 %v5_149f8, i32* %v3_149fc, align 4
  %v4_149fc = load i32, i32* %r0.global-to-local, align 4
  %v5_149fc = add i32 %v4_149fc, -4
  store i32 %v5_149fc, i32* %r0.global-to-local, align 4
  %v0_14a00 = load i32, i32* %r2.global-to-local, align 4
  %v2_14a00 = add i32 %v0_14a00, -4
  store i32 %v2_14a00, i32* %r2.global-to-local, align 4
  %v6_14a04 = icmp slt i32 %v0_14a00, 4
  br i1 %v6_14a04, label %dec_label_pc_14a08.loopexit, label %dec_label_pc_149f0

dec_label_pc_14a08.loopexit:                      ; preds = %dec_label_pc_149f0
  %v4_14a00 = sub i32 3, %v0_14a00
  %v5_14a00 = and i32 %v4_14a00, %v0_14a00
  %v6_14a00 = icmp slt i32 %v5_14a00, 0
  %v7_14a00 = icmp slt i32 %v2_14a00, 0
  store i1 %v6_14a00, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14a00, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14a08

dec_label_pc_14a08:                               ; preds = %dec_label_pc_14a08.loopexit, %dec_label_pc_149e4
  %v2_1487453 = phi i32 [ %v5_149fc, %dec_label_pc_14a08.loopexit ], [ %v1_149d8, %dec_label_pc_149e4 ]
  %v0_1486449 = phi i32 [ %v2_14a00, %dec_label_pc_14a08.loopexit ], [ %v2_149e8, %dec_label_pc_149e4 ]
  %v0_14a08 = load i32, i32* %r1.global-to-local, align 4
  %v1_14a08 = add i32 %v0_14a08, 1
  store i32 %v1_14a08, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_149fc, { 0, 2, 1 }
  uselistorder i32 %v3_149f0, { 1, 0 }
  uselistorder i32 %v2_149e8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_149d8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_149b8, { 1, 0 }
  uselistorder i32 %v3_149b4, { 1, 0 }
  uselistorder i32 %v0_149b8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_149d8, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14990, { 0, 2, 1 }
  uselistorder i32 %v3_14984, { 1, 0 }
  uselistorder i32 %v2_1497c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_1496c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_1494c, { 1, 0 }
  uselistorder i32 %v3_14948, { 1, 0 }
  uselistorder i32 %v0_1494c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1496c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14924, { 0, 2, 1 }
  uselistorder i32 %v3_14918, { 1, 0 }
  uselistorder i32 %v2_14910, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14900, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_148e0, { 1, 0 }
  uselistorder i32 %v3_148dc, { 1, 0 }
  uselistorder i32 %v0_148e0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14900, { 3, 2, 1, 0 }
  uselistorder i1 %v5_149a8, { 2, 0, 1 }
  uselistorder i32 %v0_148c0, { 1, 0 }
  uselistorder i32 %v0_149ac, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1490019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_148b0, { 2, 1, 0 }
  uselistorder i32 %v0_148b0, { 2, 0, 1 }
  uselistorder i32 %v2_148a8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_148a8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_148a8, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1490020, { 2, 1, 0 }
  uselistorder i32 %v11_14884, { 1, 0 }
  uselistorder i32 %v7_14884, { 1, 0 }
  uselistorder i32 %v1_14864, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_14864, { 1, 2, 0, 3 }
  uselistorder i32 %v2_14868, { 1, 0 }
  uselistorder i32 %v7_1485c, { 0, 2, 1 }
  uselistorder i32 %v10_14858, { 1, 0 }
  uselistorder i32 %v9_14850, { 1, 0, 2 }
  uselistorder i32 %v6_1484c, { 1, 0 }
  uselistorder i32 %v2_14844, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_14844, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_14854, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14838, { 0, 2, 1 }
  uselistorder i32 %v13_14834, { 1, 0 }
  uselistorder i32 %v4_14830, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_14830, { 2, 0, 1 }
  uselistorder i32 %v6_14838, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14828, { 0, 2, 1 }
  uselistorder i32 %v16_14824, { 1, 0 }
  uselistorder i32 %v4_14820, { 1, 2, 0 }
  uselistorder i32 %v0_14830.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_14828, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_14814, { 0, 3, 2, 1 }
  uselistorder i32 %v10_14810, { 1, 0 }
  uselistorder i32 %v1_1480c, { 1, 0 }
  uselistorder i32 %v10_14808, { 1, 0 }
  uselistorder i32 %v0_14808, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1480c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_14800, { 0, 2, 1 }
  uselistorder i32 %v2_147f4, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_147f4, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1480c37, { 1, 2, 0 }
  uselistorder i32 %v1_147ec, { 2, 1, 0 }
  uselistorder i32 %v1_147e4, { 2, 3, 1, 0 }
  uselistorder i32 %v2_147dc, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_147d8, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_147d4, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_147d4, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_147c4, { 0, 2, 1 }
  uselistorder i32 %v4_147c0, { 1, 0 }
  uselistorder i32 %v3_147b4, { 1, 0 }
  uselistorder i32 %v1_147ac, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_147a0, { 1, 0 }
  uselistorder i32 %v12_1479c, { 0, 2, 1 }
  uselistorder i32 %v8_1477c, { 1, 0, 2 }
  uselistorder i32 %v5_1477c, { 1, 0, 2 }
  uselistorder i32 %v2_1477c, { 1, 0, 2 }
  uselistorder i32 %v0_1477c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1479c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_14758, { 0, 2, 1 }
  uselistorder i32 %v4_14754, { 1, 0 }
  uselistorder i32 %v3_14748, { 1, 0 }
  uselistorder i32 %v1_14740, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14734, { 1, 0 }
  uselistorder i32 %v12_14730, { 0, 2, 1 }
  uselistorder i32 %v8_14710, { 1, 0, 2 }
  uselistorder i32 %v5_14710, { 1, 0, 2 }
  uselistorder i32 %v2_14710, { 1, 0, 2 }
  uselistorder i32 %v0_14710, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14730, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_146ec, { 0, 2, 1 }
  uselistorder i32 %v4_146e8, { 1, 0 }
  uselistorder i32 %v3_146dc, { 1, 0 }
  uselistorder i32 %v1_146d4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_146c8, { 1, 0 }
  uselistorder i32 %v12_146c4, { 0, 2, 1 }
  uselistorder i32 %v8_146a4, { 1, 0, 2 }
  uselistorder i32 %v5_146a4, { 1, 0, 2 }
  uselistorder i32 %v2_146a4, { 1, 0, 2 }
  uselistorder i32 %v0_146a4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_146c4, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_14700, { 0, 2, 1 }
  uselistorder i32 %v1_146fc, { 2, 0, 1, 3 }
  uselistorder i32 %v4_14680, { 2, 0, 1, 3 }
  uselistorder i32 %v2_14680, { 2, 0, 1, 3 }
  uselistorder i32 %v0_14704, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1479c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_14674, { 1, 0 }
  uselistorder i32 %v0_14674, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1466c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1466c, { 1, 0, 2 }
  uselistorder i32 %v0_1466c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_1479c77, { 1, 0 }
  uselistorder i32 %v1_1464c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_14654, { 1, 0 }
  uselistorder i32 %v0_14628, { 3, 0, 1, 2 }
  uselistorder i32 %v1_1461c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_14608, { 1, 0, 2 }
  uselistorder i32 %v1_14604, { 1, 0 }
  uselistorder i32 %v1_145fc, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_145fc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_145f4, { 0, 2, 1 }
  uselistorder i32 %v3_145f4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_145f4, { 1, 0 }
  uselistorder i1 %v1_145f4, { 1, 0 }
  uselistorder i32 %v3_145f0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_145e8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_145d4, { 1, 2, 0 }
  uselistorder i32 %v1_145cc, { 0, 2, 1 }
  uselistorder i32 %v12_145c8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_145bc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_145c0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_145b0, { 0, 2, 1 }
  uselistorder i32 %v1_145a8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_145a8, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_145a0, { 1, 0 }
  uselistorder i32 %v1_14598, { 2, 1, 0 }
  uselistorder i32 %v2_14590, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_14590, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_1458c, { 1, 0 }
  uselistorder i32 %v2_14580, { 1, 0 }
  uselistorder i32 %v1_14580, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_14580, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 69, 1, 2, 3, 4, 5, 70, 6, 7, 8, 9, 10, 71, 11, 12, 67, 68, 72, 28, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 56, 2, 4, 6, 8, 5, 57, 7, 9, 11, 54, 10, 58, 53, 55, 59, 62, 60, 66, 67, 12, 13, 14, 16, 15, 17, 18, 61, 19, 20, 63, 21, 64, 22, 65, 23, 24, 25, 26, 27, 30, 28, 40, 29, 31, 34, 32, 41, 33, 35, 38, 36, 42, 37, 39, 43, 44, 47, 45, 48, 46, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 28, 1, 2, 29, 3, 4, 30, 5, 27, 33, 34, 6, 7, 19, 8, 10, 9, 11, 12, 31, 13, 14, 32, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 7, 2, 9, 3, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 0, 19, 20, 21, 22, 23, 6, 24, 4, 25, 5, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 7, 2, 9, 3, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 6, 23, 4, 24, 5, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 7, 2, 9, 3, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23, 24, 6, 25, 4, 26, 5, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 4, 5, 3, 1, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 7, 8, 9, 0, 15, 1, 16, 10, 11, 3, 4, 5, 12, 6, 13, 2, 14 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 30, 2, 4, 5, 3, 6, 7, 8, 9, 19, 35, 40, 38, 39, 37, 31, 32, 20, 21, 33, 34, 36, 25, 26, 27, 22, 28, 29, 14, 15, 10, 11, 12, 13, 16, 17, 18, 23, 24, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 7, 8, 9, 15, 24, 26, 10, 11, 12, 0, 13, 14, 16, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 1, 23, 25 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 48, { 0, 2, 4, 11, 3, 5, 6, 12, 13, 7, 8, 9, 10, 17, 18, 19, 14, 15, 16, 1 }
  uselistorder i32 40, { 2, 6, 8, 1, 4, 3, 7, 9, 5, 10, 11, 12, 13, 14, 15, 17, 16, 0 }
  uselistorder i32 36, { 4, 19, 5, 6, 7, 20, 8, 17, 9, 18, 10, 11, 12, 0, 1, 13, 2, 14, 3, 15, 16 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 1, 2, 3, 0 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1 }
  uselistorder i32 24, { 0, 56, 57, 58, 59, 8, 9, 10, 12, 11, 13, 1, 14, 60, 61, 62, 15, 63, 16, 17, 64, 18, 55, 88, 89, 51, 52, 53, 54, 19, 20, 21, 22, 99, 100, 23, 103, 24, 2, 25, 90, 91, 26, 92, 49, 50, 75, 27, 76, 28, 77, 82, 83, 29, 78, 79, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 81, 84, 85, 86, 87, 30, 31, 32, 33, 3, 34, 35, 93, 36, 37, 4, 38, 39, 40, 41, 42, 43, 94, 44, 5, 95, 96, 97, 98, 45, 46, 104, 47, 6, 105, 7, 101, 48, 102 }
  uselistorder i32 27, { 1, 0, 2, 3 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32* @lr, { 159, 160, 161, 162, 163, 164, 165, 166, 167, 4, 5, 6, 7, 8, 9, 10, 11, 12, 3, 46, 47, 168, 169, 13, 14, 122, 123, 124, 125, 126, 127, 115, 116, 117, 128, 141, 142, 129, 130, 131, 132, 133, 134, 135, 2, 136, 137, 139, 140, 138, 48, 49, 50, 51, 52, 53, 143, 144, 145, 54, 146, 147, 29, 15, 30, 31, 32, 33, 0, 37, 38, 34, 35, 36, 16, 17, 18, 19, 20, 21, 22, 24, 23, 1, 25, 26, 27, 28, 39, 40, 41, 42, 43, 44, 45, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 104, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 148, 149, 150, 151, 152, 153, 154, 158, 118, 119, 120, 121, 155, 156, 157, 95, 96 }
  uselistorder label %dec_label_pc_149f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14984, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14918, { 2, 0, 1 }
  uselistorder label %dec_label_pc_148b8, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_14844, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_14808, { 1, 0 }
  uselistorder label %dec_label_pc_147f4, { 1, 0 }
  uselistorder label %dec_label_pc_147b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14748, { 2, 0, 1 }
  uselistorder label %dec_label_pc_146dc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1467c, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_1464c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_145e8, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_145a8, { 1, 0 }
}

define i32 @function_14a10(i32 %arg1) local_unnamed_addr {
dec_label_pc_14a10:
  %v1_14a10 = and i32 %arg1, -4
  %v1_14a14 = inttoptr i32 %v1_14a10 to i32*
  %v2_14a14 = load i32, i32* %v1_14a14, align 4
  %v1_14a18 = urem i32 %arg1, 4
  store i32 %v1_14a18, i32* @r3, align 4
  %v2_14a18 = icmp eq i32 %v1_14a18, 0
  %v1_14a1c = sub nsw i32 0, %v1_14a18
  br i1 %v2_14a18, label %.preheader.preheader, label %dec_label_pc_14a24

dec_label_pc_14a24:                               ; preds = %dec_label_pc_14a10
  %v1_14a24 = or i32 %v2_14a14, 255
  %v7_14a28 = icmp eq i32 %v1_14a18, 1
  br i1 %v7_14a28, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_14a24
  %v9_14a2c = or i32 %v2_14a14, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_14a24, %bb
  %v8_14a34 = phi i32 [ %v1_14a24, %dec_label_pc_14a24 ], [ %v9_14a2c, %bb ]
  %v1_14a30 = add nsw i32 %v1_14a18, -2
  store i32 %v1_14a30, i32* @r3, align 4
  %v7_14a34 = icmp eq i32 %v1_14a18, 3
  br i1 %v7_14a34, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_14a34 = or i32 %v8_14a34, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_14a10
  %v1_14a44.ph = phi i32 [ %v2_14a14, %dec_label_pc_14a10 ], [ %v9_14a34, %bb34 ], [ %v8_14a34, %bb33 ]
  %v1_14a3838 = urem i32 %v1_14a44.ph, 256
  %v2_14a3839 = icmp eq i32 %v1_14a3838, 0
  %v2_14a3c40 = and i32 %v1_14a44.ph, 65280
  %v3_14a3c41 = icmp eq i32 %v2_14a3c40, 0
  %or.cond42 = or i1 %v2_14a3839, %v3_14a3c41
  %v2_14a4043 = and i32 %v1_14a44.ph, 16711680
  %v3_14a4044 = icmp eq i32 %v2_14a4043, 0
  %or.cond3145 = or i1 %v3_14a4044, %or.cond42
  %v4_14a4446 = icmp ult i32 %v1_14a44.ph, 16777216
  %or.cond3247 = or i1 %v4_14a4446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_14a54, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_14a481349 = phi i32 [ %v2_14a4814, %.thread4 ], [ %v1_14a1c, %.preheader.preheader ]
  %v1_14a4c48.in = phi i32 [ %v1_14a4c48, %.thread4 ], [ %v1_14a10, %.preheader.preheader ]
  %v1_14a4c48 = add i32 %v1_14a4c48.in, 4
  %v2_14a4814 = add i32 %v1_14a481349, 4
  %v2_14a4c = inttoptr i32 %v1_14a4c48 to i32*
  %v3_14a4c = load i32, i32* %v2_14a4c, align 4
  %v1_14a38 = urem i32 %v3_14a4c, 256
  %v2_14a38 = icmp eq i32 %v1_14a38, 0
  %v2_14a3c = and i32 %v3_14a4c, 65280
  %v3_14a3c = icmp eq i32 %v2_14a3c, 0
  %or.cond = or i1 %v2_14a38, %v3_14a3c
  %v2_14a40 = and i32 %v3_14a4c, 16711680
  %v3_14a40 = icmp eq i32 %v2_14a40, 0
  %or.cond31 = or i1 %v3_14a40, %or.cond
  %v4_14a44 = icmp ult i32 %v3_14a4c, 16777216
  %or.cond32 = or i1 %v4_14a44, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_14a54, label %.thread4

dec_label_pc_14a54:                               ; preds = %.thread4, %.preheader.preheader
  %v1_14a4813.lcssa = phi i32 [ %v1_14a1c, %.preheader.preheader ], [ %v2_14a4814, %.thread4 ]
  %v2_14a38.lcssa = phi i1 [ %v2_14a3839, %.preheader.preheader ], [ %v2_14a38, %.thread4 ]
  %v3_14a3c.lcssa = phi i1 [ %v3_14a3c41, %.preheader.preheader ], [ %v3_14a3c, %.thread4 ]
  %v3_14a40.lcssa = phi i1 [ %v3_14a4044, %.preheader.preheader ], [ %v3_14a40, %.thread4 ]
  br i1 %v2_14a38.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_14a54
  %v2_14a58 = add i32 %v1_14a4813.lcssa, 1
  br i1 %v3_14a3c.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_14a6017 = add i32 %v1_14a4813.lcssa, 2
  br i1 %v3_14a40.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_14a68 = add i32 %v1_14a4813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_14a54, %bb35, %bb36, %bb37
  %v1_14a6c = phi i32 [ %v2_14a58, %bb35 ], [ %v2_14a6017, %bb36 ], [ %v2_14a68, %bb37 ], [ %v1_14a4813.lcssa, %dec_label_pc_14a54 ]
  ret i32 %v1_14a6c

; uselistorder directives
  uselistorder i32 %v1_14a4813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_14a4c, { 3, 2, 1, 0 }
  uselistorder i32 %v1_14a44.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_14a18, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 1, 0, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 15 }
  uselistorder i32 -2, { 1, 3, 4, 2, 6, 7, 8, 0, 5, 22, 21, 23, 24, 25, 14, 15, 16, 17, 18, 19, 20, 9, 10, 11, 12, 13 }
  uselistorder i32 65535, { 2, 91, 0, 1, 13, 12, 3, 4, 43, 44, 23, 45, 22, 46, 15, 14, 5, 25, 47, 24, 48, 50, 16, 49, 6, 51, 52, 27, 53, 26, 54, 55, 56, 57, 28, 58, 59, 17, 60, 7, 31, 61, 62, 63, 30, 64, 29, 65, 67, 18, 66, 8, 68, 69, 35, 70, 32, 71, 33, 72, 34, 73, 19, 74, 75, 36, 76, 37, 77, 80, 81, 20, 78, 79, 9, 40, 82, 38, 83, 39, 84, 86, 21, 85, 10, 11, 87, 88, 42, 89, 41, 90 }
  uselistorder i32 -4, { 40, 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 37, 38, 39 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_14a70(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_14a74.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_14a70

dec_label_pc_14a70:                               ; preds = %bb3, %bb
  %v0_14a74 = phi i32 [ %v0_14a74.pre, %bb ], [ %v5_14a74, %bb3 ]
  %v0_14a70 = phi i32 [ %tmp, %bb ], [ %v5_14a70, %bb3 ]
  %v1_14a70 = inttoptr i32 %v0_14a70 to i8*
  %v2_14a70 = load i8, i8* %v1_14a70, align 1
  %v1_14a74 = inttoptr i32 %v0_14a74 to i8*
  %v2_14a74 = load i8, i8* %v1_14a74, align 1
  %v3_14a74 = zext i8 %v2_14a74 to i32
  %v2_14a78 = icmp eq i8 %v2_14a70, 0
  br i1 %v2_14a78, label %.dec_label_pc_14a84_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_14a70
  %v5_14a74 = add i32 %v0_14a74, 1
  %v5_14a70 = add i32 %v0_14a70, 1
  %v3_14a70 = zext i8 %v2_14a70 to i32
  %v10_14a7c = icmp eq i8 %v2_14a70, %v2_14a74
  br i1 %v10_14a7c, label %dec_label_pc_14a70, label %dec_label_pc_14a84

.dec_label_pc_14a84_crit_edge:                    ; preds = %dec_label_pc_14a70
  br label %dec_label_pc_14a84

dec_label_pc_14a84:                               ; preds = %bb3, %.dec_label_pc_14a84_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_14a84_crit_edge ], [ %v3_14a70, %bb3 ]
  %v2_14a84.pre-phi = sub nsw i32 %.pn, %v3_14a74
  ret i32 %v2_14a84.pre-phi

; uselistorder directives
  uselistorder i8 %v2_14a70, { 0, 2, 1 }
  uselistorder i32 %v0_14a70, { 1, 0 }
  uselistorder i32 %v0_14a74, { 1, 0 }
  uselistorder label %dec_label_pc_14a84, { 1, 0 }
}

define i32 @function_14a90() local_unnamed_addr {
dec_label_pc_14a90:
  %stack_var_-16 = alloca i32, align 4
  %v3_14a90 = load i32, i32* @r4, align 4
  store i32 %v3_14a90, i32* %stack_var_-16, align 4
  %v6_14a90 = load i32, i32* @r5, align 4
  %v9_14a90 = load i32, i32* @r6, align 4
  %v0_14a94 = load i32, i32* @r0, align 4
  %v0_14a98 = load i32, i32* @r1, align 4
  store i32 %v0_14a98, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_14ab48 = inttoptr i32 %v0_14a94 to i8*
  %v2_14ab49 = load i8, i8* %v1_14ab48, align 1
  %v2_14ab811 = icmp eq i8 %v2_14ab49, 0
  store i32 %v0_14a98, i32* @r0, align 4
  %v1_14ac012 = add i32 %v0_14a94, 1
  store i32 %v1_14ac012, i32* @r4, align 4
  br i1 %v2_14ab811, label %dec_label_pc_14ac8, label %dec_label_pc_14aa4

dec_label_pc_14aa4:                               ; preds = %dec_label_pc_14a90, %dec_label_pc_14ab0
  %v3_14ab414.in = phi i8 [ %v2_14ab4, %dec_label_pc_14ab0 ], [ %v2_14ab49, %dec_label_pc_14a90 ]
  %v0_14abc13 = phi i32 [ %v0_14abc.pre, %dec_label_pc_14ab0 ], [ %v0_14a98, %dec_label_pc_14a90 ]
  %v3_14ab414 = zext i8 %v3_14ab414.in to i32
  %v2_14aa4 = call i32 @function_14c5c(i32 %v0_14abc13, i32 %v3_14ab414)
  %v2_14aa8 = icmp eq i32 %v2_14aa4, 0
  %v0_14ab0 = load i32, i32* @r5, align 4
  br i1 %v2_14aa8, label %dec_label_pc_14ab0, label %dec_label_pc_14ac8

dec_label_pc_14ab0:                               ; preds = %dec_label_pc_14aa4
  %v1_14ab0 = add i32 %v0_14ab0, 1
  %v0_14ab4.pre = load i32, i32* @r4, align 4
  %v0_14abc.pre = load i32, i32* @r6, align 4
  store i32 %v1_14ab0, i32* @r5, align 4
  %v1_14ab4 = inttoptr i32 %v0_14ab4.pre to i8*
  %v2_14ab4 = load i8, i8* %v1_14ab4, align 1
  %v2_14ab8 = icmp eq i8 %v2_14ab4, 0
  store i32 %v0_14abc.pre, i32* @r0, align 4
  %v1_14ac0 = add i32 %v0_14ab4.pre, 1
  store i32 %v1_14ac0, i32* @r4, align 4
  br i1 %v2_14ab8, label %dec_label_pc_14ac8, label %dec_label_pc_14aa4

dec_label_pc_14ac8:                               ; preds = %dec_label_pc_14ab0, %dec_label_pc_14aa4, %dec_label_pc_14a90
  %v0_14ac8 = phi i32 [ 0, %dec_label_pc_14a90 ], [ %v0_14ab0, %dec_label_pc_14aa4 ], [ %v1_14ab0, %dec_label_pc_14ab0 ]
  %v2_14acc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14acc, i32* @r4, align 4
  store i32 %v6_14a90, i32* @r5, align 4
  store i32 %v9_14a90, i32* @r6, align 4
  ret i32 %v0_14ac8

; uselistorder directives
  uselistorder i8 %v2_14ab4, { 1, 0 }
  uselistorder i32 %v0_14abc.pre, { 1, 0 }
  uselistorder i32 %v0_14ab4.pre, { 1, 0 }
  uselistorder i32* @r6, { 28, 3, 29, 30, 4, 31, 32, 33, 5, 34, 35, 23, 24, 36, 37, 6, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 7, 8, 55, 56, 57, 58, 59, 60, 61, 62, 25, 26, 27, 9, 10, 11, 389, 390, 391, 392, 393, 394, 395, 63, 12, 64, 13, 65, 387, 388, 336, 340, 341, 342, 343, 337, 338, 339, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 344, 369, 370, 371, 345, 346, 347, 348, 349, 14, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 365, 367, 361, 362, 363, 364, 366, 368, 113, 114, 0, 115, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 89, 138, 139, 140, 141, 142, 143, 144, 90, 66, 145, 91, 92, 93, 94, 95, 70, 71, 87, 88, 67, 68, 69, 16, 15, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 96, 97, 98, 99, 100, 101, 102, 146, 147, 148, 2, 1, 149, 150, 151, 152, 153, 154, 155, 21, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 103, 104, 17, 105, 106, 107, 108, 109, 110, 111, 112, 166, 167, 168, 169, 170, 171, 172, 180, 173, 174, 175, 176, 177, 178, 179, 181, 18, 182, 183, 184, 185, 186, 187, 201, 202, 203, 204, 22, 205, 206, 207, 19, 208, 209, 210, 214, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 225, 222, 223, 224, 226, 227, 228, 229, 230, 231, 236, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 248, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 260, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 270, 271, 272, 274, 275, 276, 277, 284, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 296, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 372, 373, 374, 380, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 20, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335 }
  uselistorder label %dec_label_pc_14aa4, { 1, 0 }
}

define i32 @function_14ad4(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14ad4:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_14b042 = load i32, i32* @r0, align 4
  %v1_14b043 = inttoptr i32 %v0_14b042 to i8*
  %v2_14b044 = load i8, i8* %v1_14b043, align 1
  %v3_14b045 = zext i8 %v2_14b044 to i32
  store i32 %v3_14b045, i32* @ip, align 4
  %v2_14b086 = icmp eq i8 %v2_14b044, 0
  br i1 %v2_14b086, label %dec_label_pc_14b14, label %dec_label_pc_14ae8.preheader

dec_label_pc_14ae0:                               ; preds = %dec_label_pc_14ae8
  %v3_14ae8 = zext i8 %v2_14ae8 to i32
  %v1_14af0 = add i32 %v0_14af0, 1
  %v9_14ae0 = icmp eq i32 %v0_14ae010, %v3_14ae8
  br i1 %v9_14ae0, label %dec_label_pc_14afc, label %dec_label_pc_14ae8

dec_label_pc_14ae8:                               ; preds = %dec_label_pc_14ae8.preheader, %dec_label_pc_14ae0
  %v0_14af0 = phi i32 [ %tmp, %dec_label_pc_14ae8.preheader ], [ %v1_14af0, %dec_label_pc_14ae0 ]
  %v1_14ae8 = inttoptr i32 %v0_14af0 to i8*
  %v2_14ae8 = load i8, i8* %v1_14ae8, align 1
  %v2_14aec = icmp eq i8 %v2_14ae8, 0
  br i1 %v2_14aec, label %dec_label_pc_14b14, label %dec_label_pc_14ae0

dec_label_pc_14afc:                               ; preds = %dec_label_pc_14ae0
  %v1_14afc = add i32 %v0_14afc, 1
  %v1_14b00 = add i32 %v0_14b00, 1
  %v1_14b04 = inttoptr i32 %v1_14b00 to i8*
  %v2_14b04 = load i8, i8* %v1_14b04, align 1
  %v3_14b04 = zext i8 %v2_14b04 to i32
  store i32 %v3_14b04, i32* @ip, align 4
  %v2_14b08 = icmp eq i8 %v2_14b04, 0
  br i1 %v2_14b08, label %dec_label_pc_14b14, label %dec_label_pc_14ae8.preheader

dec_label_pc_14ae8.preheader:                     ; preds = %dec_label_pc_14ad4, %dec_label_pc_14afc
  %v0_14b00 = phi i32 [ %v1_14b00, %dec_label_pc_14afc ], [ %v0_14b042, %dec_label_pc_14ad4 ]
  %v0_14afc = phi i32 [ %v1_14afc, %dec_label_pc_14afc ], [ 0, %dec_label_pc_14ad4 ]
  %v0_14ae010 = phi i32 [ %v3_14b04, %dec_label_pc_14afc ], [ %v3_14b045, %dec_label_pc_14ad4 ]
  br label %dec_label_pc_14ae8

dec_label_pc_14b14:                               ; preds = %dec_label_pc_14afc, %dec_label_pc_14ae8, %dec_label_pc_14ad4
  %v0_14b14 = phi i32 [ 0, %dec_label_pc_14ad4 ], [ %v0_14afc, %dec_label_pc_14ae8 ], [ %v1_14afc, %dec_label_pc_14afc ]
  ret i32 %v0_14b14

; uselistorder directives
  uselistorder i32 %v0_14af0, { 1, 0 }
  uselistorder label %dec_label_pc_14ae8.preheader, { 1, 0 }
}

define i32 @function_14b20(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14b20:
  store i32 %arg1, i32* @r0, align 4
  %v1_14b24 = urem i32 %arg2, 256
  store i32 %v1_14b24, i32* @r4, align 4
  %v2_14b24 = icmp eq i32 %v1_14b24, 0
  br i1 %v2_14b24, label %dec_label_pc_14b38, label %dec_label_pc_14b4c.preheader

dec_label_pc_14b4c.preheader:                     ; preds = %dec_label_pc_14b20
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_14b543 = call i32 @function_14c5c(i32 %arg1, i32 %v1_14b24)
  %v2_14b585 = icmp eq i32 %v2_14b543, 0
  br i1 %v2_14b585, label %dec_label_pc_14b60, label %dec_label_pc_14b44

dec_label_pc_14b38:                               ; preds = %dec_label_pc_14b20
  %v2_14b3c = call i32 @function_14c5c(i32 %arg1, i32 0)
  br label %dec_label_pc_14b64

dec_label_pc_14b44:                               ; preds = %dec_label_pc_14b4c.preheader, %dec_label_pc_14b44
  %v2_14b546 = phi i32 [ %v2_14b54, %dec_label_pc_14b44 ], [ %v2_14b543, %dec_label_pc_14b4c.preheader ]
  store i32 %v2_14b546, i32* @r5, align 4
  %v1_14b48 = add i32 %v2_14b546, 1
  store i32 %v1_14b48, i32* @r0, align 4
  %v0_14b50 = load i32, i32* @r4, align 4
  %v2_14b54 = call i32 @function_14c5c(i32 %v1_14b48, i32 %v0_14b50)
  %v2_14b58 = icmp eq i32 %v2_14b54, 0
  br i1 %v2_14b58, label %dec_label_pc_14b60, label %dec_label_pc_14b44

dec_label_pc_14b60:                               ; preds = %dec_label_pc_14b44, %dec_label_pc_14b4c.preheader
  %v0_14b60 = load i32, i32* @r5, align 4
  br label %dec_label_pc_14b64

dec_label_pc_14b64:                               ; preds = %dec_label_pc_14b38, %dec_label_pc_14b60
  %storemerge = phi i32 [ %v2_14b3c, %dec_label_pc_14b38 ], [ %v0_14b60, %dec_label_pc_14b60 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_14b54, { 1, 0 }
  uselistorder i32 %v1_14b48, { 1, 0 }
  uselistorder i32 %v1_14b24, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_14c5c, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_14b64, { 1, 0 }
  uselistorder label %dec_label_pc_14b44, { 1, 0 }
}

define i32 @function_14b70(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14b70:
  %v1_14b74 = urem i32 %arg1, 256
  %v0_14b942 = load i32, i32* @r0, align 4
  %v1_14b943 = urem i32 %v0_14b942, 4
  %v2_14b944 = icmp eq i32 %v1_14b943, 0
  br i1 %v2_14b944, label %dec_label_pc_14b9c, label %dec_label_pc_14b7c

dec_label_pc_14b7c:                               ; preds = %dec_label_pc_14b70, %dec_label_pc_14b90
  %v0_14b90 = phi i32 [ %v1_14b90, %dec_label_pc_14b90 ], [ %v0_14b942, %dec_label_pc_14b70 ]
  %v1_14b7c = inttoptr i32 %v0_14b90 to i8*
  %v2_14b7c = load i8, i8* %v1_14b7c, align 1
  %v3_14b7c = zext i8 %v2_14b7c to i32
  %v9_14b80 = icmp eq i32 %v3_14b7c, %v1_14b74
  br i1 %v9_14b80, label %dec_label_pc_14c4c, label %dec_label_pc_14b88

dec_label_pc_14b88:                               ; preds = %dec_label_pc_14b7c
  %v2_14b88 = icmp eq i8 %v2_14b7c, 0
  br i1 %v2_14b88, label %dec_label_pc_14c4c, label %dec_label_pc_14b90

dec_label_pc_14b90:                               ; preds = %dec_label_pc_14b88
  %v1_14b90 = add i32 %v0_14b90, 1
  %v1_14b94 = urem i32 %v1_14b90, 4
  %v2_14b94 = icmp eq i32 %v1_14b94, 0
  br i1 %v2_14b94, label %dec_label_pc_14b9c, label %dec_label_pc_14b7c

dec_label_pc_14b9c:                               ; preds = %dec_label_pc_14b90, %dec_label_pc_14b70
  %v0_14ba0 = phi i32 [ %v0_14b942, %dec_label_pc_14b70 ], [ %v1_14b90, %dec_label_pc_14b90 ]
  %v4_14b9c = mul nuw nsw i32 %v1_14b74, 256
  %v5_14b9c = or i32 %v4_14b9c, %v1_14b74
  %v4_14ba4 = mul i32 %v5_14b9c, 65536
  %v5_14ba4 = or i32 %v4_14ba4, %v5_14b9c
  br label %dec_label_pc_14ba8

dec_label_pc_14ba8:                               ; preds = %dec_label_pc_14c44, %dec_label_pc_14be4, %dec_label_pc_14b9c
  %v0_14c0c = phi i32 [ %v0_14ba0, %dec_label_pc_14b9c ], [ %v4_14ba8, %dec_label_pc_14be4 ], [ %v4_14ba8, %dec_label_pc_14c44 ]
  %v1_14ba8 = inttoptr i32 %v0_14c0c to i32*
  %v2_14ba8 = load i32, i32* %v1_14ba8, align 4
  %v4_14ba8 = add i32 %v0_14c0c, 4
  %v2_14bb0 = xor i32 %v2_14ba8, %v5_14ba4
  %v2_14bb4 = add i32 %v2_14bb0, 2130640639
  store i32 %v2_14bb4, i32* @ip, align 4
  %v2_14bbc = add i32 %v2_14ba8, 2130640639
  %v1_14bc0 = sub i32 -1, %v2_14ba8
  %v2_14bc4 = xor i32 %v2_14bbc, %v1_14bc0
  %v2_14bd0 = and i32 %v2_14bc4, -2130640640
  %v2_14bd8 = icmp eq i32 %v2_14bd0, 0
  br i1 %v2_14bd8, label %dec_label_pc_14be4, label %dec_label_pc_14bec

dec_label_pc_14be4:                               ; preds = %dec_label_pc_14ba8
  %v1_14bcc = sub i32 -1, %v2_14bb0
  %v2_14bd4 = xor i32 %v2_14bb4, %v1_14bcc
  %v2_14bdc = and i32 %v2_14bd4, -2130640640
  %v2_14be4 = icmp eq i32 %v2_14bdc, 0
  br i1 %v2_14be4, label %dec_label_pc_14ba8, label %dec_label_pc_14bec

dec_label_pc_14bec:                               ; preds = %dec_label_pc_14ba8, %dec_label_pc_14be4
  %v2_14bec = inttoptr i32 %v0_14c0c to i8*
  %v3_14bec = load i8, i8* %v2_14bec, align 1
  %v4_14bec = zext i8 %v3_14bec to i32
  %v9_14bf0 = icmp eq i32 %v4_14bec, %v1_14b74
  br i1 %v9_14bf0, label %dec_label_pc_14c4c, label %dec_label_pc_14bfc

dec_label_pc_14bfc:                               ; preds = %dec_label_pc_14bec
  %v2_14bfc = icmp eq i8 %v3_14bec, 0
  br i1 %v2_14bfc, label %dec_label_pc_14c4c, label %dec_label_pc_14c04

dec_label_pc_14c04:                               ; preds = %dec_label_pc_14bfc
  %v1_14c04 = add i32 %v0_14c0c, 1
  %v2_14c04 = inttoptr i32 %v1_14c04 to i8*
  %v3_14c04 = load i8, i8* %v2_14c04, align 1
  %v4_14c04 = zext i8 %v3_14c04 to i32
  %v9_14c08 = icmp eq i32 %v4_14c04, %v1_14b74
  br i1 %v9_14c08, label %dec_label_pc_14c4c, label %dec_label_pc_14c14

dec_label_pc_14c14:                               ; preds = %dec_label_pc_14c04
  %v2_14c14 = icmp eq i8 %v3_14c04, 0
  br i1 %v2_14c14, label %dec_label_pc_14c4c, label %dec_label_pc_14c1c

dec_label_pc_14c1c:                               ; preds = %dec_label_pc_14c14
  %v1_14c1c = add i32 %v0_14c0c, 2
  %v2_14c1c = inttoptr i32 %v1_14c1c to i8*
  %v3_14c1c = load i8, i8* %v2_14c1c, align 1
  %v4_14c1c = zext i8 %v3_14c1c to i32
  %v9_14c20 = icmp eq i32 %v4_14c1c, %v1_14b74
  br i1 %v9_14c20, label %dec_label_pc_14c4c, label %dec_label_pc_14c2c

dec_label_pc_14c2c:                               ; preds = %dec_label_pc_14c1c
  %v2_14c2c = icmp eq i8 %v3_14c1c, 0
  br i1 %v2_14c2c, label %dec_label_pc_14c4c, label %dec_label_pc_14c34

dec_label_pc_14c34:                               ; preds = %dec_label_pc_14c2c
  %v1_14c34 = add i32 %v0_14c0c, 3
  %v2_14c34 = inttoptr i32 %v1_14c34 to i8*
  %v3_14c34 = load i8, i8* %v2_14c34, align 1
  %v4_14c34 = zext i8 %v3_14c34 to i32
  %v9_14c38 = icmp eq i32 %v4_14c34, %v1_14b74
  br i1 %v9_14c38, label %dec_label_pc_14c4c, label %dec_label_pc_14c44

dec_label_pc_14c44:                               ; preds = %dec_label_pc_14c34
  %v2_14c44 = icmp eq i8 %v3_14c34, 0
  br i1 %v2_14c44, label %dec_label_pc_14c4c, label %dec_label_pc_14ba8

dec_label_pc_14c4c:                               ; preds = %dec_label_pc_14b88, %dec_label_pc_14b7c, %dec_label_pc_14c44, %dec_label_pc_14c34, %dec_label_pc_14c2c, %dec_label_pc_14c1c, %dec_label_pc_14c14, %dec_label_pc_14c04, %dec_label_pc_14bfc, %dec_label_pc_14bec
  %v1_14c50 = phi i32 [ %v1_14c34, %dec_label_pc_14c44 ], [ %v1_14c34, %dec_label_pc_14c34 ], [ %v1_14c1c, %dec_label_pc_14c2c ], [ %v1_14c1c, %dec_label_pc_14c1c ], [ %v1_14c04, %dec_label_pc_14c14 ], [ %v1_14c04, %dec_label_pc_14c04 ], [ %v0_14c0c, %dec_label_pc_14bfc ], [ %v0_14c0c, %dec_label_pc_14bec ], [ %v0_14b90, %dec_label_pc_14b7c ], [ %v0_14b90, %dec_label_pc_14b88 ]
  ret i32 %v1_14c50

; uselistorder directives
  uselistorder i32 %v4_14ba8, { 1, 0 }
  uselistorder i32 %v2_14ba8, { 0, 2, 1 }
  uselistorder i32 %v0_14c0c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_14b9c, { 1, 0 }
  uselistorder i32 %v1_14b90, { 1, 0, 2 }
  uselistorder i32 %v0_14b942, { 2, 1, 0 }
  uselistorder i32 %v1_14b74, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_14c4c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_14bec, { 1, 0 }
  uselistorder label %dec_label_pc_14b7c, { 1, 0 }
}

define i32 @function_14c5c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14c5c:
  %v1_14c60 = urem i32 %arg1, 256
  %v0_14c803 = load i32, i32* @r0, align 4
  %v1_14c804 = urem i32 %v0_14c803, 4
  %v2_14c805 = icmp eq i32 %v1_14c804, 0
  br i1 %v2_14c805, label %dec_label_pc_14c88, label %dec_label_pc_14c68

dec_label_pc_14c68:                               ; preds = %dec_label_pc_14c5c, %dec_label_pc_14c7c
  %v0_14c7c = phi i32 [ %v1_14c7c, %dec_label_pc_14c7c ], [ %v0_14c803, %dec_label_pc_14c5c ]
  %v1_14c68 = inttoptr i32 %v0_14c7c to i8*
  %v2_14c68 = load i8, i8* %v1_14c68, align 1
  %v3_14c68 = zext i8 %v2_14c68 to i32
  %v9_14c6c = icmp eq i32 %v3_14c68, %v1_14c60
  br i1 %v9_14c6c, label %dec_label_pc_14d3c, label %dec_label_pc_14c74

dec_label_pc_14c74:                               ; preds = %dec_label_pc_14c68
  %v2_14c74 = icmp eq i8 %v2_14c68, 0
  br i1 %v2_14c74, label %dec_label_pc_14d38, label %dec_label_pc_14c7c

dec_label_pc_14c7c:                               ; preds = %dec_label_pc_14c74
  %v1_14c7c = add i32 %v0_14c7c, 1
  %v1_14c80 = urem i32 %v1_14c7c, 4
  %v2_14c80 = icmp eq i32 %v1_14c80, 0
  br i1 %v2_14c80, label %dec_label_pc_14c88, label %dec_label_pc_14c68

dec_label_pc_14c88:                               ; preds = %dec_label_pc_14c7c, %dec_label_pc_14c5c
  %v0_14c8c = phi i32 [ %v0_14c803, %dec_label_pc_14c5c ], [ %v1_14c7c, %dec_label_pc_14c7c ]
  %v4_14c88 = mul nuw nsw i32 %v1_14c60, 256
  %v5_14c88 = or i32 %v4_14c88, %v1_14c60
  %v4_14c90 = mul i32 %v5_14c88, 65536
  %v5_14c90 = or i32 %v4_14c90, %v5_14c88
  br label %dec_label_pc_14c94

dec_label_pc_14c94:                               ; preds = %dec_label_pc_14d30, %dec_label_pc_14cd0, %dec_label_pc_14c88
  %v0_14cf8 = phi i32 [ %v0_14c8c, %dec_label_pc_14c88 ], [ %v4_14c94, %dec_label_pc_14cd0 ], [ %v4_14c94, %dec_label_pc_14d30 ]
  %v1_14c94 = inttoptr i32 %v0_14cf8 to i32*
  %v2_14c94 = load i32, i32* %v1_14c94, align 4
  %v4_14c94 = add i32 %v0_14cf8, 4
  %v2_14c9c = xor i32 %v2_14c94, %v5_14c90
  %v2_14ca0 = add i32 %v2_14c9c, 2130640639
  store i32 %v2_14ca0, i32* @ip, align 4
  %v2_14ca8 = add i32 %v2_14c94, 2130640639
  %v1_14cac = sub i32 -1, %v2_14c94
  %v2_14cb0 = xor i32 %v2_14ca8, %v1_14cac
  %v2_14cbc = and i32 %v2_14cb0, -2130640640
  %v2_14cc4 = icmp eq i32 %v2_14cbc, 0
  br i1 %v2_14cc4, label %dec_label_pc_14cd0, label %dec_label_pc_14cd8

dec_label_pc_14cd0:                               ; preds = %dec_label_pc_14c94
  %v1_14cb8 = sub i32 -1, %v2_14c9c
  %v2_14cc0 = xor i32 %v2_14ca0, %v1_14cb8
  %v2_14cc8 = and i32 %v2_14cc0, -2130640640
  %v2_14cd0 = icmp eq i32 %v2_14cc8, 0
  br i1 %v2_14cd0, label %dec_label_pc_14c94, label %dec_label_pc_14cd8

dec_label_pc_14cd8:                               ; preds = %dec_label_pc_14c94, %dec_label_pc_14cd0
  %v2_14cd8 = inttoptr i32 %v0_14cf8 to i8*
  %v3_14cd8 = load i8, i8* %v2_14cd8, align 1
  %v4_14cd8 = zext i8 %v3_14cd8 to i32
  %v9_14cdc = icmp eq i32 %v4_14cd8, %v1_14c60
  br i1 %v9_14cdc, label %dec_label_pc_14d3c, label %dec_label_pc_14ce8

dec_label_pc_14ce8:                               ; preds = %dec_label_pc_14cd8
  %v2_14ce8 = icmp eq i8 %v3_14cd8, 0
  br i1 %v2_14ce8, label %dec_label_pc_14d38, label %dec_label_pc_14cf0

dec_label_pc_14cf0:                               ; preds = %dec_label_pc_14ce8
  %v1_14cf0 = add i32 %v0_14cf8, 1
  %v2_14cf0 = inttoptr i32 %v1_14cf0 to i8*
  %v3_14cf0 = load i8, i8* %v2_14cf0, align 1
  %v4_14cf0 = zext i8 %v3_14cf0 to i32
  %v9_14cf4 = icmp eq i32 %v4_14cf0, %v1_14c60
  br i1 %v9_14cf4, label %dec_label_pc_14d3c, label %dec_label_pc_14d00

dec_label_pc_14d00:                               ; preds = %dec_label_pc_14cf0
  %v2_14d00 = icmp eq i8 %v3_14cf0, 0
  br i1 %v2_14d00, label %dec_label_pc_14d38, label %dec_label_pc_14d08

dec_label_pc_14d08:                               ; preds = %dec_label_pc_14d00
  %v1_14d08 = add i32 %v0_14cf8, 2
  %v2_14d08 = inttoptr i32 %v1_14d08 to i8*
  %v3_14d08 = load i8, i8* %v2_14d08, align 1
  %v4_14d08 = zext i8 %v3_14d08 to i32
  %v9_14d0c = icmp eq i32 %v4_14d08, %v1_14c60
  br i1 %v9_14d0c, label %dec_label_pc_14d3c, label %dec_label_pc_14d18

dec_label_pc_14d18:                               ; preds = %dec_label_pc_14d08
  %v2_14d18 = icmp eq i8 %v3_14d08, 0
  br i1 %v2_14d18, label %dec_label_pc_14d38, label %dec_label_pc_14d20

dec_label_pc_14d20:                               ; preds = %dec_label_pc_14d18
  %v1_14d20 = add i32 %v0_14cf8, 3
  %v2_14d20 = inttoptr i32 %v1_14d20 to i8*
  %v3_14d20 = load i8, i8* %v2_14d20, align 1
  %v4_14d20 = zext i8 %v3_14d20 to i32
  %v9_14d24 = icmp eq i32 %v4_14d20, %v1_14c60
  br i1 %v9_14d24, label %dec_label_pc_14d3c, label %dec_label_pc_14d30

dec_label_pc_14d30:                               ; preds = %dec_label_pc_14d20
  %v2_14d30 = icmp eq i8 %v3_14d20, 0
  br i1 %v2_14d30, label %dec_label_pc_14d38, label %dec_label_pc_14c94

dec_label_pc_14d38:                               ; preds = %dec_label_pc_14c74, %dec_label_pc_14d30, %dec_label_pc_14d18, %dec_label_pc_14d00, %dec_label_pc_14ce8
  br label %dec_label_pc_14d3c

dec_label_pc_14d3c:                               ; preds = %dec_label_pc_14c68, %dec_label_pc_14d20, %dec_label_pc_14d08, %dec_label_pc_14cf0, %dec_label_pc_14cd8, %dec_label_pc_14d38
  %v1_14d40 = phi i32 [ 0, %dec_label_pc_14d38 ], [ %v1_14d20, %dec_label_pc_14d20 ], [ %v1_14d08, %dec_label_pc_14d08 ], [ %v1_14cf0, %dec_label_pc_14cf0 ], [ %v0_14cf8, %dec_label_pc_14cd8 ], [ %v0_14c7c, %dec_label_pc_14c68 ]
  ret i32 %v1_14d40

; uselistorder directives
  uselistorder i32 %v4_14c94, { 1, 0 }
  uselistorder i32 %v2_14c94, { 0, 2, 1 }
  uselistorder i32 %v0_14cf8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_14c88, { 1, 0 }
  uselistorder i32 %v1_14c7c, { 1, 0, 2 }
  uselistorder i32 %v0_14c803, { 2, 1, 0 }
  uselistorder i32 %v1_14c60, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 3, 4, 1, 5, 69, 70, 117, 71, 72, 73, 74, 75, 76, 78, 79, 118, 7, 111, 28, 112, 27, 113, 39, 114, 77, 40, 87, 29, 80, 81, 2, 82, 83, 84, 41, 21, 88, 30, 89, 42, 90, 43, 91, 44, 85, 45, 86, 46, 47, 48, 49, 50, 51, 52, 53, 0, 92, 8, 54, 55, 56, 57, 93, 58, 23, 22, 59, 94, 60, 31, 95, 10, 9, 61, 32, 96, 12, 11, 62, 97, 33, 98, 99, 25, 24, 63, 100, 34, 101, 14, 13, 64, 102, 35, 103, 65, 104, 16, 15, 66, 105, 36, 106, 18, 17, 67, 107, 37, 108, 20, 19, 68, 115, 38, 116, 26, 109, 6, 110 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 148, 149, 147, 152, 26, 27, 28, 29, 30, 31, 32, 33, 146, 34, 35, 36, 38, 37, 40, 39, 41, 42, 2, 43, 0, 3, 44, 45, 47, 46, 1, 50, 48, 49, 51, 57, 52, 58, 53, 59, 54, 55, 56, 62, 63, 64, 65, 60, 61, 145, 67, 66, 69, 68, 71, 72, 73, 70, 76, 74, 75, 78, 79, 80, 77, 81, 82, 84, 85, 83, 86, 150, 87, 90, 88, 91, 89, 93, 94, 95, 92, 96, 101, 97, 102, 98, 103, 99, 100, 105, 106, 107, 104, 108, 151, 109, 110, 111, 113, 112, 114, 122, 115, 123, 116, 124, 117, 125, 118, 126, 119, 120, 121, 128, 129, 130, 131, 127, 132, 137, 133, 138, 134, 135, 136, 140, 142, 143, 144, 139, 141 }
  uselistorder label %dec_label_pc_14d3c, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_14d38, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_14cd8, { 1, 0 }
  uselistorder label %dec_label_pc_14c68, { 1, 0 }
}

define i32 @function_14d4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_14d4c:
  %stack_var_-68 = alloca i32, align 4
  %v2_14d54 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_14d54, i32* @r1, align 4
  %v0_14d58 = call i32 @function_14d70()
  %v1_14d5c = sub i32 1, %v0_14d58
  %v2_14d5c = icmp ult i32 %v0_14d58, 2
  br i1 %v2_14d5c, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_14d4c
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_14d4c, %bb
  %v1_14d6c = phi i32 [ %v1_14d5c, %dec_label_pc_14d4c ], [ 0, %bb ]
  ret i32 %v1_14d6c

; uselistorder directives
  uselistorder i32 %v0_14d58, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_14d70() local_unnamed_addr {
dec_label_pc_14d70:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_3()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_14d70 = load i32, i32* @r4, align 4
  %v6_14d70 = load i32, i32* @r5, align 4
  %v2_14d78 = ptrtoint i32* %stack_var_-52 to i32
  %v0_14d7c = load i32, i32* @r1, align 4
  store i32 %v0_14d7c, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_14d88 = load i32, i32* @r0, align 4
  %v3_14d88 = call i32 @function_1014c(i32 %v0_14d88, i32 21505, i32 %v2_14d78)
  store i32 %v3_14d88, i32* %r0.global-to-local, align 4
  store i32 %v3_14d88, i32* @r5, align 4
  %v2_14d8c = icmp eq i32 %v3_14d88, 0
  br i1 %v2_14d8c, label %dec_label_pc_14d94, label %dec_label_pc_14dd8

dec_label_pc_14d94:                               ; preds = %dec_label_pc_14d70
  %v4_14da0 = zext i8 %tmp to i32
  store i32 %v4_14da0, i32* @ip, align 4
  %v3_14da4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_14da4, i32* @r3, align 4
  %v1_14da8 = load i32, i32* @r4, align 4
  %v2_14da8 = add i32 %v1_14da8, 4
  %v3_14da8 = inttoptr i32 %v2_14da8 to i32*
  %v0_14dac = load i32, i32* %r1.global-to-local, align 4
  %v1_14dac = load i32, i32* @r4, align 4
  %v2_14dac = add i32 %v1_14dac, 8
  %v3_14dac = inttoptr i32 %v2_14dac to i32*
  store i32 %v0_14dac, i32* %v3_14dac, align 4
  %v0_14db0 = load i32, i32* %r0.global-to-local, align 4
  %v1_14db0 = load i32, i32* @r4, align 4
  %v2_14db0 = add i32 %v1_14db0, 12
  %v3_14db0 = inttoptr i32 %v2_14db0 to i32*
  store i32 %v0_14db0, i32* %v3_14db0, align 4
  %v2_14db4 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_14db4, i32* @r1, align 4
  %v1_14dbc = load i32, i32* @r4, align 4
  %v2_14dbc = inttoptr i32 %v1_14dbc to i32*
  store i32 %v3_14da4, i32* %v2_14dbc, align 4
  %v0_14dc0 = load i32, i32* @ip, align 4
  %v1_14dc0 = trunc i32 %v0_14dc0 to i8
  %v2_14dc0 = load i32, i32* @r4, align 4
  %v3_14dc0 = add i32 %v2_14dc0, 16
  %v4_14dc0 = inttoptr i32 %v3_14dc0 to i8*
  store i8 %v1_14dc0, i8* %v4_14dc0, align 1
  %v0_14dc4 = load i32, i32* @r4, align 4
  %v1_14dc4 = add i32 %v0_14dc4, 17
  store i32 %v1_14dc4, i32* %r0.global-to-local, align 4
  %v4_14dc8 = call i32 @function_152b4(i32 %v1_14dc4, i32 %v2_14db4, i32 19, i32 %v3_14da4)
  store i32 %v4_14dc8, i32* %r0.global-to-local, align 4
  %v0_14dcc = load i32, i32* @r5, align 4
  store i32 %v0_14dcc, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_14dd4 = inttoptr i32 %v4_14dc8 to i8*
  %v3_14dd4 = call i32 @function_10650(i8* %v2_14dd4, i32 %v0_14dcc)
  store i32 %v3_14dd4, i32* %r0.global-to-local, align 4
  %v0_14dd8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14dd8

dec_label_pc_14dd8:                               ; preds = %dec_label_pc_14d70, %dec_label_pc_14d94
  %v0_14dd8 = phi i32 [ %v3_14d88, %dec_label_pc_14d70 ], [ %v0_14dd8.pre, %dec_label_pc_14d94 ]
  store i32 %v0_14dd8, i32* %r0.global-to-local, align 4
  store i32 %v3_14d70, i32* @r4, align 4
  store i32 %v6_14d70, i32* @r5, align 4
  ret i32 %v0_14dd8

; uselistorder directives
  uselistorder i32 %v0_14dd8, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*, i32)* @function_10650, { 8, 2, 3, 4, 0, 1, 11, 10, 9, 5, 6, 7 }
  uselistorder i32 13, { 11, 10, 0, 1, 13, 14, 12, 15, 2, 3, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 9, 23, 24, 25, 26, 27, 28, 29, 30, 4, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 5, 42, 43 }
  uselistorder i32 17, { 13, 1, 2, 19, 3, 14, 4, 15, 5, 16, 20, 17, 18, 6, 21, 7, 22, 8, 23, 24, 25, 9, 26, 10, 11, 27, 12, 28, 29, 30, 0 }
  uselistorder i32 (i32, i32, i32)* @function_1014c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14dd8, { 1, 0 }
}

define i32 @function_14dec() local_unnamed_addr {
dec_label_pc_14dec:
  %r0.global-to-local = alloca i32, align 4
  %v0_14df4 = load i32, i32* @r0, align 4
  %v2_14df4 = icmp eq i32 %v0_14df4, 0
  %v0_14dfc = load i32, i32* @r1, align 4
  br i1 %v2_14df4, label %dec_label_pc_14ed0, label %dec_label_pc_14e04

dec_label_pc_14e04:                               ; preds = %dec_label_pc_14dec
  br label %dec_label_pc_14e1c

dec_label_pc_14e1c:                               ; preds = %dec_label_pc_14e04, %dec_label_pc_14e94
  %v1_14e94 = phi i32 [ 0, %dec_label_pc_14e04 ], [ %v5_14e94, %dec_label_pc_14e94 ]
  %v0_14e98 = phi i32 [ 1, %dec_label_pc_14e04 ], [ %v1_14e98, %dec_label_pc_14e94 ]
  %v0_14e1c = phi i32 [ %v0_14df4, %dec_label_pc_14e04 ], [ %v0_14e1c12, %dec_label_pc_14e94 ]
  %v1_14e1c = inttoptr i32 %v0_14e1c to i8*
  %v2_14e1c = load i8, i8* %v1_14e1c, align 1
  %v3_14e1c = zext i8 %v2_14e1c to i32
  %v4_14e20 = load i32, i32* inttoptr (i32 121316 to i32*), align 4
  %v2_14e24 = mul nuw nsw i32 %v3_14e1c, 2
  %v2_14e28 = add i32 %v2_14e24, %v4_14e20
  %v3_14e28 = inttoptr i32 %v2_14e28 to i16*
  %v4_14e28 = load i16, i16* %v3_14e28, align 2
  %v1_14e2c = and i16 %v4_14e28, 8
  %v2_14e2c = icmp eq i16 %v1_14e2c, 0
  br i1 %v2_14e2c, label %dec_label_pc_14ed0, label %dec_label_pc_14e34

dec_label_pc_14e34:                               ; preds = %dec_label_pc_14e1c
  br label %dec_label_pc_14e54

dec_label_pc_14e3c:                               ; preds = %dec_label_pc_14e54
  %v2_14e3c = mul i32 %v0_14e94, 10
  %v1_14e40 = add i32 %v2_14e3c, -48
  %v2_14e44 = add i32 %v3_14e54, %v1_14e40
  %v8_14e4c = icmp sgt i32 %v2_14e44, 255
  br i1 %v8_14e4c, label %dec_label_pc_14ed0, label %dec_label_pc_14e50

dec_label_pc_14e50:                               ; preds = %dec_label_pc_14e3c
  %v1_14e50 = add i32 %v0_14e84, 1
  store i32 %v1_14e50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14e54

dec_label_pc_14e54:                               ; preds = %dec_label_pc_14e34, %dec_label_pc_14e50
  %v0_14e94 = phi i32 [ 0, %dec_label_pc_14e34 ], [ %v2_14e44, %dec_label_pc_14e50 ]
  %v0_14e84 = phi i32 [ %v0_14e1c, %dec_label_pc_14e34 ], [ %v1_14e50, %dec_label_pc_14e50 ]
  %v1_14e54 = inttoptr i32 %v0_14e84 to i8*
  %v2_14e54 = load i8, i8* %v1_14e54, align 1
  %v3_14e54 = zext i8 %v2_14e54 to i32
  %v2_14e58 = mul nuw nsw i32 %v3_14e54, 2
  %v2_14e5c = add i32 %v2_14e58, %v4_14e20
  %v3_14e5c = inttoptr i32 %v2_14e5c to i16*
  %v4_14e5c = load i16, i16* %v3_14e5c, align 2
  %v6_14e5c = zext i16 %v4_14e5c to i32
  %v1_14e60 = and i32 %v6_14e5c, 8
  %v2_14e60 = icmp eq i32 %v1_14e60, 0
  br i1 %v2_14e60, label %dec_label_pc_14e68, label %dec_label_pc_14e3c

dec_label_pc_14e68:                               ; preds = %dec_label_pc_14e54
  %v7_14e68 = icmp eq i32 %v0_14e98, 4
  br i1 %v7_14e68, label %dec_label_pc_14e80, label %dec_label_pc_14e70

dec_label_pc_14e70:                               ; preds = %dec_label_pc_14e68
  %v7_14e70 = icmp eq i8 %v2_14e54, 46
  br i1 %v7_14e70, label %dec_label_pc_14e78, label %dec_label_pc_14ed0

dec_label_pc_14e78:                               ; preds = %dec_label_pc_14e70
  %v1_14e78 = add i32 %v0_14e84, 1
  store i32 %v1_14e78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14e94

dec_label_pc_14e80:                               ; preds = %dec_label_pc_14e68
  %v2_14e80 = icmp eq i8 %v2_14e54, 0
  %v1_14e84 = add i32 %v0_14e84, 1
  store i32 %v1_14e84, i32* %r0.global-to-local, align 4
  br i1 %v2_14e80, label %dec_label_pc_14e94, label %dec_label_pc_14e8c

dec_label_pc_14e8c:                               ; preds = %dec_label_pc_14e80
  %v1_14e8c = and i32 %v6_14e5c, 32
  %v2_14e8c = icmp eq i32 %v1_14e8c, 0
  br i1 %v2_14e8c, label %dec_label_pc_14ed0, label %dec_label_pc_14e94

dec_label_pc_14e94:                               ; preds = %dec_label_pc_14e8c, %dec_label_pc_14e80, %dec_label_pc_14e78
  %v0_14e1c12 = phi i32 [ %v1_14e84, %dec_label_pc_14e8c ], [ %v1_14e84, %dec_label_pc_14e80 ], [ %v1_14e78, %dec_label_pc_14e78 ]
  %v4_14e94 = mul i32 %v1_14e94, 256
  %v5_14e94 = or i32 %v0_14e94, %v4_14e94
  %v1_14e98 = add nuw nsw i32 %v0_14e98, 1
  %v7_14ea0 = icmp slt i32 %v1_14e98, 5
  br i1 %v7_14ea0, label %dec_label_pc_14e1c, label %dec_label_pc_14ea4

dec_label_pc_14ea4:                               ; preds = %dec_label_pc_14e94
  %v2_14ea4 = icmp eq i32 %v0_14dfc, 0
  br i1 %v2_14ea4, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_14ea4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14ed4

bb:                                               ; preds = %dec_label_pc_14ea4
  %v4_14ea8 = udiv i32 %v5_14e94, 16777216
  %v2_14eac = udiv i32 %v5_14e94, 256
  %v5_14eb0 = and i32 %v2_14eac, 65280
  %v2_14eb4 = and i32 %v5_14e94, 65280
  %v5_14eb8 = mul nuw nsw i32 %v2_14eb4, 256
  %v5_14ebc = mul i32 %v0_14e94, 16777216
  %v6_14eb0 = or i32 %v4_14ea8, %v5_14ebc
  %v6_14eb8 = or i32 %v6_14eb0, %v5_14eb0
  %v6_14ebc = or i32 %v6_14eb8, %v5_14eb8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_14ec8 = inttoptr i32 %v0_14dfc to i32*
  store i32 %v6_14ebc, i32* %v3_14ec8, align 4
  %v1_14ed8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14ed4

dec_label_pc_14ed0:                               ; preds = %dec_label_pc_14e70, %dec_label_pc_14e8c, %dec_label_pc_14e1c, %dec_label_pc_14e3c, %dec_label_pc_14dec
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14ed4

dec_label_pc_14ed4:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_14ed0
  %v1_14ed8 = phi i32 [ %v1_14ed8.pre, %bb ], [ 0, %dec_label_pc_14ed0 ], [ 1, %.thread7.thread ]
  ret i32 %v1_14ed8

; uselistorder directives
  uselistorder i32 %v1_14e98, { 1, 0 }
  uselistorder i32 %v5_14e94, { 2, 0, 1, 3 }
  uselistorder i32 %v0_14e84, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 6, 3, 4, 5 }
  uselistorder i32 65280, { 55, 2, 6, 1, 46, 3, 7, 0, 8, 9, 10, 11, 12, 38, 47, 48, 49, 13, 14, 15, 50, 51, 16, 17, 18, 19, 39, 52, 4, 53, 54, 20, 21, 40, 56, 57, 41, 22, 23, 24, 25, 26, 58, 59, 60, 61, 42, 43, 44, 5, 62, 63, 27, 64, 28, 29, 30, 31, 45, 66, 32, 33, 34, 67, 35, 36, 37, 65 }
  uselistorder i32 16777216, { 0, 1, 66, 65, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 31, 30, 33, 32, 35, 34, 36, 37, 39, 38, 40, 41, 42, 44, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67 }
  uselistorder i32 5, { 13, 0, 45, 14, 28, 16, 24, 15, 23, 3, 2, 29, 17, 30, 31, 1, 25, 26, 27, 18, 19, 32, 20, 5, 33, 6, 34, 7, 35, 21, 8, 36, 9, 37, 38, 10, 39, 11, 40, 46, 12, 47, 4, 41, 42, 22, 43, 44 }
  uselistorder i32 32, { 97, 49, 47, 86, 87, 88, 89, 92, 93, 82, 83, 84, 85, 102, 50, 51, 55, 52, 56, 53, 57, 54, 58, 59, 98, 99, 60, 100, 68, 69, 67, 70, 71, 72, 73, 74, 75, 62, 63, 1, 64, 2, 65, 4, 3, 61, 66, 76, 101, 6, 5, 8, 7, 10, 9, 48, 77, 94, 12, 11, 14, 13, 16, 15, 18, 17, 81, 20, 19, 22, 21, 23, 25, 24, 27, 26, 28, 29, 31, 30, 90, 91, 32, 95, 33, 96, 34, 35, 36, 37, 38, 39, 78, 40, 41, 42, 79, 43, 0, 44, 45, 46, 80 }
  uselistorder i8 0, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 28, 27, 19, 29, 3, 17, 4, 30, 32, 31, 20, 33, 34, 35, 0, 18, 36, 37, 38, 39, 40, 41, 42, 43, 44, 1, 47, 49, 46, 21, 48, 22, 50, 51, 45, 2, 52, 53, 54, 24, 55, 58, 25, 56, 57, 23, 59, 60, 61, 62, 63, 64, 5, 65, 66, 67, 68, 69, 70, 71, 72, 26, 73, 74, 75, 76, 77, 78, 79 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 255, { 5, 14, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i32 10, { 2, 24, 25, 26, 4, 36, 38, 37, 60, 39, 0, 8, 30, 31, 9, 27, 28, 21, 3, 32, 22, 10, 1, 23, 33, 11, 34, 35, 29, 12, 13, 14, 5, 40, 41, 42, 43, 15, 16, 44, 45, 46, 47, 48, 17, 49, 50, 51, 6, 52, 53, 54, 18, 7, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 19, 66, 20 }
  uselistorder i16 0, { 0, 1, 2, 5, 6, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 2, { 3, 4, 140, 57, 58, 53, 270, 271, 67, 272, 273, 59, 274, 275, 146, 141, 147, 142, 89, 276, 5, 148, 277, 63, 252, 6, 7, 253, 8, 9, 52, 248, 10, 11, 12, 249, 254, 13, 14, 15, 16, 68, 255, 256, 17, 18, 0, 143, 257, 19, 258, 90, 20, 139, 21, 22, 23, 24, 25, 91, 93, 92, 60, 61, 26, 73, 169, 170, 94, 162, 99, 163, 96, 171, 95, 164, 97, 155, 98, 161, 149, 150, 151, 152, 153, 154, 74, 156, 75, 157, 76, 158, 77, 159, 78, 160, 69, 27, 28, 172, 175, 176, 100, 64, 144, 177, 101, 178, 103, 173, 102, 174, 165, 166, 29, 104, 105, 106, 167, 168, 107, 80, 179, 109, 180, 108, 79, 181, 110, 182, 30, 31, 32, 111, 183, 185, 112, 113, 114, 116, 65, 117, 115, 184, 118, 119, 120, 121, 122, 186, 62, 66, 187, 188, 189, 190, 191, 192, 193, 194, 195, 123, 196, 81, 197, 198, 199, 200, 201, 202, 124, 82, 203, 204, 205, 206, 207, 208, 209, 210, 125, 211, 83, 212, 213, 54, 126, 127, 128, 214, 215, 216, 217, 218, 219, 220, 1, 33, 34, 35, 36, 37, 38, 129, 221, 84, 222, 223, 224, 225, 39, 226, 227, 40, 41, 42, 43, 44, 45, 130, 228, 85, 229, 230, 231, 232, 233, 234, 131, 235, 132, 236, 133, 237, 2, 46, 47, 48, 49, 50, 51, 134, 238, 86, 239, 240, 55, 241, 242, 243, 244, 245, 246, 135, 87, 247, 259, 56, 260, 261, 136, 262, 137, 263, 264, 265, 266, 267, 138, 268, 88, 269, 70, 250, 71, 72, 251, 145 }
  uselistorder label %dec_label_pc_14ed4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14ed0, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_14e54, { 1, 0 }
  uselistorder label %dec_label_pc_14e1c, { 1, 0 }
}

define i32 @function_14ee4(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ee4:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 121092, i32* %r2.global-to-local, align 4
  %v4_14ef0 = load i32, i32* inttoptr (i32 121192 to i32*), align 8
  %v4_14ef8 = load i32, i32* inttoptr (i32 121156 to i32*), align 4
  store i32 %v4_14ef8, i32* %r1.global-to-local, align 4
  %v1_14efc = add i32 %arg1, 44
  %v2_14efc = inttoptr i32 %v1_14efc to i32*
  %v3_14efc = load i32, i32* %v2_14efc, align 4
  %v1_14f00 = add i32 %arg1, 28
  %v2_14f00 = inttoptr i32 %v1_14f00 to i32*
  %v3_14f00 = load i32, i32* %v2_14f00, align 4
  store i32 %v3_14f00, i32* %r2.global-to-local, align 4
  %v2_14f04 = inttoptr i32 %v4_14ef0 to i32*
  store i32 %v3_14efc, i32* %v2_14f04, align 4
  %v0_14f08 = load i32, i32* %r2.global-to-local, align 4
  %v1_14f08 = load i32, i32* %r1.global-to-local, align 4
  %v2_14f08 = inttoptr i32 %v1_14f08 to i32*
  store i32 %v0_14f08, i32* %v2_14f08, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 39, 0, 1, 3, 4, 5, 2, 6, 7, 8, 12, 9, 13, 11, 23, 24, 25, 26, 27, 28, 20, 21, 22, 18, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 10, 14, 15, 16, 17 }
  uselistorder i32 121092, { 44, 1, 45, 46, 2, 3, 4, 5, 47, 48, 6, 49, 7, 50, 51, 52, 10, 11, 9, 8, 12, 13, 39, 35, 33, 32, 34, 36, 37, 38, 31, 40, 26, 28, 27, 25, 24, 29, 30, 21, 20, 23, 22, 19, 18, 17, 16, 41, 42, 43, 53, 0, 54, 55, 14, 15 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_14f14(i32 %arg1) local_unnamed_addr {
dec_label_pc_14f14:
  %v0_14f14 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14f14, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14f14
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14f14, %bb
  %v4_14f18 = phi i32 [ %arg1, %dec_label_pc_14f14 ], [ 0, %bb ]
  ret i32 %v4_14f18

; uselistorder directives
  uselistorder i1* @cpsr_z, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 29, 11, 12, 13, 25, 26, 27, 28, 14, 15, 16, 17, 18, 19, 23, 24, 20, 21, 22, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14f1c(i32 %arg1) local_unnamed_addr {
dec_label_pc_14f58:
  store i32 %arg1, i32* @global_var_1fbcc.446, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_1fbcc.446, { 1, 0, 2 }
}

define i32 @function_14f68(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14f68:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14f68 = load i32, i32* @r7, align 4
  store i32 %v3_14f68, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14f90, label %dec_label_pc_14f80

dec_label_pc_14f80:                               ; preds = %dec_label_pc_14f68
  %v0_14f80 = call i32 @function_10600()
  %v0_14f84 = load i32, i32* %r7.global-to-local, align 4
  %v1_14f84 = sub i32 0, %v0_14f84
  %v2_14f88 = inttoptr i32 %v0_14f80 to i32*
  store i32 %v1_14f84, i32* %v2_14f88, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_14f94.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_14f90

dec_label_pc_14f90:                               ; preds = %dec_label_pc_14f68, %dec_label_pc_14f80
  %v2_14f94 = phi i32 [ %v3_14f68, %dec_label_pc_14f68 ], [ %v2_14f94.pre, %dec_label_pc_14f80 ]
  %v0_14f90 = phi i32 [ %arg1, %dec_label_pc_14f68 ], [ -1, %dec_label_pc_14f80 ]
  store i32 %v2_14f94, i32* %r7.global-to-local, align 4
  ret i32 %v0_14f90

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14f90, { 1, 0 }
}

define i32 @function_14f9c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14f9c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_14fa0 = load i32, i32* @r4, align 4
  %v6_14fa0 = load i32, i32* @r5, align 4
  %v12_14fa0 = load i32, i32* @r7, align 4
  %v1_14fa4 = add i32 %arg3, 14
  %v2_14fac = ptrtoint i32* %stack_var_-72 to i32
  %v1_14fb0 = and i32 %v1_14fa4, -8
  %v2_14fb4 = sub i32 %v2_14fac, %v1_14fb0
  %v1_14fb8 = add i32 %v2_14fb4, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_14fb8, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_14ff4, label %dec_label_pc_14fe0

dec_label_pc_14fe0:                               ; preds = %dec_label_pc_14f9c
  %v0_14fe0 = call i32 @function_10600()
  %v0_14fe4 = load i32, i32* %r4.global-to-local, align 4
  %v1_14fe4 = sub i32 0, %v0_14fe4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14fec = inttoptr i32 %v0_14fe0 to i32*
  store i32 %v1_14fe4, i32* %v2_14fec, align 4
  %v0_14ffc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14ffc

dec_label_pc_14ff4:                               ; preds = %dec_label_pc_14f9c
  br i1 false, label %dec_label_pc_14ffc, label %dec_label_pc_15004

dec_label_pc_14ffc:                               ; preds = %dec_label_pc_14ff4, %dec_label_pc_14fe0
  %v0_14ffc = phi i32 [ -1, %dec_label_pc_14ff4 ], [ %v0_14ffc.pre, %dec_label_pc_14fe0 ]
  store i32 %v0_14ffc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_150d0

dec_label_pc_15004:                               ; preds = %dec_label_pc_14ff4
  %v2_15004 = add i32 %v1_14fb8, %arg1
  %v2_15008 = add i32 %tmp, %arg3
  store i32 %v2_15008, i32* @ip, align 4
  store i32 %v1_14fb8, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_150b8

dec_label_pc_15024:                               ; preds = %dec_label_pc_150b8
  %v1_15024 = add i32 %v0_15078, 16
  %v2_15024 = inttoptr i32 %v1_15024 to i16*
  %v3_15024 = load i16, i16* %v2_15024, align 2
  %v4_15024 = zext i16 %v3_15024 to i32
  %v1_15028 = add nuw nsw i32 %v4_15024, 7
  %v1_1502c = and i32 %v1_15028, 131064
  store i32 %v1_1502c, i32* %r2.global-to-local, align 4
  %v2_15034 = add i32 %v1_1502c, %v0_15080
  store i32 %v2_15034, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_15034, %v2_15008
  br i1 %tmp26, label %dec_label_pc_15040, label %dec_label_pc_15074

dec_label_pc_15040:                               ; preds = %dec_label_pc_15024
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_15048 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15048, i32* %r2.global-to-local, align 4
  %v0_1504c = load i32, i32* %sl.global-to-local, align 4
  %v1_15050 = load i32, i32* @sp, align 4
  %v2_15050 = inttoptr i32 %v1_15050 to i32*
  store i32 0, i32* %v2_15050, align 4
  %v4_15054 = call i32 @function_152d8(i32 %arg1, i32 0, i32 %v0_15048, i32 %v0_1504c)
  %v0_15058 = load i32, i32* @r5, align 4
  %v1_15058 = load i32, i32* %r6.global-to-local, align 4
  %v9_15058 = icmp eq i32 %v0_15058, %v1_15058
  br i1 %v9_15058, label %dec_label_pc_15060, label %dec_label_pc_150cc

dec_label_pc_15060:                               ; preds = %dec_label_pc_15040
  %v0_15060 = call i32 @function_10600()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_1506c = inttoptr i32 %v0_15060 to i32*
  store i32 22, i32* %v2_1506c, align 4
  %v0_150d0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_150d0

dec_label_pc_15074:                               ; preds = %dec_label_pc_15024
  %v1_15074 = inttoptr i32 %v0_15078 to i32*
  %v2_15074 = load i32, i32* %v1_15074, align 4
  %v3_15074 = add i32 %v0_15078, 4
  %v4_15074 = inttoptr i32 %v3_15074 to i32*
  %v5_15074 = load i32, i32* %v4_15074, align 4
  store i32 %v5_15074, i32* %r4.global-to-local, align 4
  %v1_15078 = add i32 %v0_15078, 8
  store i32 %v1_15078, i32* %sb.global-to-local, align 4
  %v1_1507c = inttoptr i32 %v1_15078 to i32*
  %v2_1507c = load i32, i32* %v1_1507c, align 4
  store i32 %v2_1507c, i32* %sb.global-to-local, align 4
  %v3_1507c = add i32 %v0_15078, 12
  %v4_1507c = inttoptr i32 %v3_1507c to i32*
  %v5_1507c = load i32, i32* %v4_1507c, align 4
  store i32 %v5_1507c, i32* %sl.global-to-local, align 4
  %v1_15080 = inttoptr i32 %v0_15080 to i32*
  store i32 %v2_15074, i32* %v1_15080, align 4
  %v3_15080 = add i32 %v0_15080, 4
  %v4_15080 = inttoptr i32 %v3_15080 to i32*
  %v5_15080 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15080, i32* %v4_15080, align 4
  %v0_15084 = load i32, i32* @r7, align 4
  %v1_15084 = add i32 %v0_15084, 8
  %v1_15088 = inttoptr i32 %v1_15084 to i32*
  %v2_15088 = load i32, i32* %v1_15088, align 4
  %v3_15088 = add i32 %v0_15084, 12
  %v4_15088 = inttoptr i32 %v3_15088 to i32*
  %v5_15088 = load i32, i32* %v4_15088, align 4
  store i32 %v5_15088, i32* @r4, align 4
  %v1_1508c = load i32, i32* @r5, align 4
  %v2_1508c = add i32 %v1_1508c, 8
  %v3_1508c = inttoptr i32 %v2_1508c to i32*
  store i32 %v2_15088, i32* %v3_1508c, align 4
  %v0_15090 = load i32, i32* @r4, align 4
  %v1_15090 = load i32, i32* @r5, align 4
  %v2_15090 = add i32 %v1_15090, 12
  %v3_15090 = inttoptr i32 %v2_15090 to i32*
  store i32 %v0_15090, i32* %v3_15090, align 4
  %v0_15094 = load i32, i32* %r2.global-to-local, align 4
  %v1_15094 = trunc i32 %v0_15094 to i16
  %v2_15094 = load i32, i32* @r5, align 4
  %v3_15094 = add i32 %v2_15094, 16
  %v4_15094 = inttoptr i32 %v3_15094 to i16*
  store i16 %v1_15094, i16* %v4_15094, align 2
  %v0_15098 = load i32, i32* @r7, align 4
  %v1_15098 = add i32 %v0_15098, 18
  %v2_15098 = inttoptr i32 %v1_15098 to i8*
  %v3_15098 = load i8, i8* %v2_15098, align 1
  %v4_15098 = zext i8 %v3_15098 to i32
  store i32 %v4_15098, i32* @r3, align 4
  %v2_1509c = load i32, i32* @r5, align 4
  %v3_1509c = add i32 %v2_1509c, 18
  %v4_1509c = inttoptr i32 %v3_1509c to i8*
  store i8 %v3_15098, i8* %v4_1509c, align 1
  %v0_150a0 = load i32, i32* @r7, align 4
  %v1_150a0 = add i32 %v0_150a0, 16
  %v2_150a0 = inttoptr i32 %v1_150a0 to i16*
  %v3_150a0 = load i16, i16* %v2_150a0, align 2
  %v4_150a0 = zext i16 %v3_150a0 to i32
  %v1_150a4 = add nsw i32 %v4_150a0, -19
  store i32 %v1_150a4, i32* @r2, align 4
  %v0_150a8 = call i32 @function_10700()
  %v0_150ac = load i32, i32* @r7, align 4
  %v1_150ac = add i32 %v0_150ac, 16
  %v2_150ac = inttoptr i32 %v1_150ac to i16*
  %v3_150ac = load i16, i16* %v2_150ac, align 2
  %v4_150ac = zext i16 %v3_150ac to i32
  %v0_150b0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_150b0, i32* @r5, align 4
  %v2_150b4 = add i32 %v4_150ac, %v0_150ac
  store i32 %v2_150b4, i32* @r7, align 4
  br label %dec_label_pc_150b8

dec_label_pc_150b8:                               ; preds = %dec_label_pc_15004, %dec_label_pc_15074
  %v0_15080 = phi i32 [ %tmp, %dec_label_pc_15004 ], [ %v0_150b0, %dec_label_pc_15074 ]
  %v0_15078 = phi i32 [ %v1_14fb8, %dec_label_pc_15004 ], [ %v2_150b4, %dec_label_pc_15074 ]
  %v3_150bc = icmp ult i32 %v0_15078, %v2_15004
  %v1_150c0 = add i32 %v0_15080, 19
  store i32 %v1_150c0, i32* @r0, align 4
  %v1_150c4 = add i32 %v0_15078, 19
  store i32 %v1_150c4, i32* @r1, align 4
  br i1 %v3_150bc, label %dec_label_pc_15024, label %dec_label_pc_150cc.loopexit

dec_label_pc_150cc.loopexit:                      ; preds = %dec_label_pc_150b8
  %v0_150cc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_150cc

dec_label_pc_150cc:                               ; preds = %dec_label_pc_150cc.loopexit, %dec_label_pc_15040
  %v1_150cc = phi i32 [ %v0_15080, %dec_label_pc_150cc.loopexit ], [ %v0_15058, %dec_label_pc_15040 ]
  %v0_150cc = phi i32 [ %v0_150cc.pre, %dec_label_pc_150cc.loopexit ], [ %v1_15058, %dec_label_pc_15040 ]
  %v2_150cc = sub i32 %v1_150cc, %v0_150cc
  store i32 %v2_150cc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_150d0

dec_label_pc_150d0:                               ; preds = %dec_label_pc_15060, %dec_label_pc_14ffc, %dec_label_pc_150cc
  %v0_150d0 = phi i32 [ %v0_150d0.pre, %dec_label_pc_15060 ], [ %v0_14ffc, %dec_label_pc_14ffc ], [ %v2_150cc, %dec_label_pc_150cc ]
  store i32 %v3_14fa0, i32* %r4.global-to-local, align 4
  store i32 %v6_14fa0, i32* @r5, align 4
  store i32 %v12_14fa0, i32* @r7, align 4
  ret i32 %v0_150d0

; uselistorder directives
  uselistorder i32 %v0_15078, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_15080, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_14fb8, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 10, 11, 0, 3, 15, 4, 12, 5, 13, 6, 14, 16, 1, 17, 7, 18, 2, 19, 8, 20, 9, 21 }
  uselistorder i32* @r3, { 7, 8, 48, 49, 87, 88, 2, 89, 90, 91, 3, 92, 93, 94, 4, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 0, 113, 114, 115, 116, 9, 6, 10, 11, 12, 13, 14, 50, 51, 117, 126, 127, 128, 121, 77, 78, 79, 80, 81, 60, 65, 15, 16, 17, 132, 129, 130, 131, 1, 133, 134, 135, 122, 18, 82, 39, 40, 41, 123, 124, 125, 83, 118, 119, 120, 84, 31, 5, 52, 85, 53, 54, 56, 57, 33, 25, 32, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 34, 35, 36, 37, 42, 43, 45, 44, 38, 86, 46, 47, 55, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76 }
  uselistorder i32 18, { 7, 8, 2, 9, 3, 10, 4, 11, 6, 12, 5, 13, 0, 14, 1, 15 }
  uselistorder i32 22, { 1, 0, 11, 2, 3, 4, 5, 6, 7, 15, 8, 12, 9, 13, 10, 14, 16 }
  uselistorder i32* @sp, { 2, 3, 1, 4, 0 }
  uselistorder i32 7, { 24, 22, 23, 9, 0, 1, 38, 10, 27, 11, 25, 12, 26, 2, 13, 28, 14, 15, 16, 17, 18, 29, 4, 30, 19, 31, 5, 20, 32, 6, 33, 7, 34, 8, 35, 21, 37, 3, 36 }
  uselistorder i32* @ip, { 7, 8, 9, 78, 10, 11, 6, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 3, 112, 113, 114, 115, 116, 117, 118, 119, 120, 12, 0, 13, 14, 15, 16, 17, 121, 122, 123, 124, 31, 125, 63, 4, 57, 58, 59, 60, 61, 62, 64, 65, 66, 129, 126, 127, 128, 1, 130, 32, 67, 68, 2, 69, 18, 19, 70, 71, 72, 41, 42, 43, 44, 45, 46, 33, 34, 35, 36, 37, 38, 5, 27, 28, 29, 30, 20, 21, 22, 23, 24, 25, 26, 73, 74, 75, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 76, 77 }
  uselistorder i1 false, { 0, 19, 20, 21, 34, 15, 18, 35, 36, 37, 38, 39, 2, 1, 22, 25, 24, 23, 26, 4, 6, 33, 32, 16, 17, 7, 29, 5, 13, 14, 8, 9, 10, 27, 3, 11, 12, 30, 31, 28, 40 }
  uselistorder i32 -8, { 37, 17, 18, 19, 20, 21, 22, 16, 15, 9, 14, 13, 12, 11, 23, 24, 25, 26, 27, 39, 28, 29, 30, 31, 32, 38, 40, 33, 41, 36, 10, 34, 35, 8, 0, 1, 4, 3, 2, 5, 6, 7 }
  uselistorder i32 14, { 11, 13, 21, 7, 8, 9, 0, 12, 10, 3, 4, 5, 6, 14, 15, 1, 16, 17, 18, 19, 2, 20 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_150d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_150b8, { 1, 0 }
}

define i32 @function_150e0(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_150e0:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_150e0 = load i32, i32* @r4, align 4
  store i32 %v3_150e0, i32* %stack_var_-12, align 4
  %v0_150e4 = load i32, i32* %r0.global-to-local, align 4
  %v1_150e4 = inttoptr i32 %v0_150e4 to i16*
  %v2_150e4 = load i16, i16* %v1_150e4, align 2
  %v3_150e4 = zext i16 %v2_150e4 to i32
  %v1_150e8 = and i32 %v3_150e4, 4
  store i32 %v1_150e8, i32* %r5.global-to-local, align 4
  %v2_150e8 = icmp eq i32 %v1_150e8, 0
  store i32 %v0_150e4, i32* %r4.global-to-local, align 4
  br i1 %v2_150e8, label %dec_label_pc_150fc, label %bb

bb:                                               ; preds = %dec_label_pc_150e0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_150fc:                               ; preds = %dec_label_pc_150e0
  %v1_150fc = icmp slt i32 %arg2, 0
  br i1 %v1_150fc, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_150fc
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_150fc, %bb18
  %v1_15104 = add i32 %v0_150e4, 4
  %v2_15104 = inttoptr i32 %v1_15104 to i32*
  %v3_15104 = load i32, i32* %v2_15104, align 4
  store i32 %v3_15104, i32* %r0.global-to-local, align 4
  %v1_15108 = call i32 @function_ff70(i32 %v3_15104)
  store i32 %v1_15108, i32* %r0.global-to-local, align 4
  %v5_15110 = icmp sgt i32 %v1_15108, 0
  br i1 %v5_15110, label %.thread7, label %dec_label_pc_15114

dec_label_pc_15114:                               ; preds = %bb19
  %v2_1510c = icmp eq i32 %v1_15108, 0
  %v0_15114 = load i32, i32* %r4.global-to-local, align 4
  %v1_15114 = inttoptr i32 %v0_15114 to i16*
  %v2_15114 = load i16, i16* %v1_15114, align 2
  br i1 %v2_1510c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_15114
  %v2_15118 = or i16 %v2_15114, 4
  store i16 %v2_15118, i16* %v1_15114, align 2
  %v1_15134.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_15114
  %v2_1511c = or i16 %v2_15114, 8
  store i16 %v2_1511c, i16* %v1_15114, align 2
  %v1_15128 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_15128, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_15134 = phi i32 [ %v1_15134.pre, %bb20 ], [ 0, %bb ], [ %v1_15108, %bb19 ], [ %v1_15128, %bb21 ]
  %v2_15130 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15130, i32* @r4, align 4
  ret i32 %v1_15134

; uselistorder directives
  uselistorder i16 %v2_15114, { 1, 0 }
  uselistorder i32 %v1_15108, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 6, 0, 1 }
  uselistorder i32 (i32)* @function_ff70, { 1, 3, 4, 0, 2 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_15138(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15138:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_15138 = load i32, i32* @r4, align 4
  store i32 %v3_15138, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_151502 = icmp eq i32 %arg3, 0
  store i1 %v2_151502, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_151502, label %dec_label_pc_151e0, label %dec_label_pc_15158

dec_label_pc_15150thread-pre-split:               ; preds = %dec_label_pc_15158
  %v3_15170 = load i32, i32* %r6.global-to-local, align 4
  %v5_15170 = add i32 %v3_15170, %v3_15168
  store i32 %v5_15170, i32* %r6.global-to-local, align 4
  %v4_15174 = load i32, i32* %r5.global-to-local, align 4
  %v5_15174 = sub i32 %v4_15174, %v3_15168
  store i32 %v5_15174, i32* %r5.global-to-local, align 4
  %v2_15150 = icmp eq i32 %v5_15174, 0
  store i1 %v2_15150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15150, label %dec_label_pc_15150.dec_label_pc_151e0.loopexit_crit_edge, label %dec_label_pc_15150thread-pre-split.dec_label_pc_15158_crit_edge

dec_label_pc_15150thread-pre-split.dec_label_pc_15158_crit_edge: ; preds = %dec_label_pc_15150thread-pre-split
  %v3_15158.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_15164.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15158

dec_label_pc_15158:                               ; preds = %dec_label_pc_15138, %dec_label_pc_15150thread-pre-split.dec_label_pc_15158_crit_edge
  %v0_15164 = phi i32 [ %v0_15164.pre, %dec_label_pc_15150thread-pre-split.dec_label_pc_15158_crit_edge ], [ %tmp, %dec_label_pc_15138 ]
  %v0_15160 = phi i32 [ %v5_15170, %dec_label_pc_15150thread-pre-split.dec_label_pc_15158_crit_edge ], [ %arg2, %dec_label_pc_15138 ]
  %v3_15158 = phi i32 [ %v3_15158.pre, %dec_label_pc_15150thread-pre-split.dec_label_pc_15158_crit_edge ], [ 2147483647, %dec_label_pc_15138 ]
  %v0_1515c.in = phi i32 [ %v5_15174, %dec_label_pc_15150thread-pre-split.dec_label_pc_15158_crit_edge ], [ %arg3, %dec_label_pc_15138 ]
  %v3_1515c = phi i32 [ %v5_15174, %dec_label_pc_15150thread-pre-split.dec_label_pc_15158_crit_edge ], [ %arg3, %dec_label_pc_15138 ]
  %v0_1515c = icmp slt i32 %v0_1515c.in, 0
  %storemerge = select i1 %v0_1515c, i32 %v3_15158, i32 %v3_1515c
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_15160, i32* %r1.global-to-local, align 4
  %v1_15164 = add i32 %v0_15164, 4
  %v2_15164 = inttoptr i32 %v1_15164 to i32*
  %v3_15164 = load i32, i32* %v2_15164, align 4
  %v3_15168 = call i32 @function_100e4(i32 %v3_15164, i32 %v0_15160)
  %v1_1516c = icmp slt i32 %v3_15168, 0
  %v2_1516c = icmp eq i32 %v3_15168, 0
  store i1 %v2_1516c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_1516c, label %dec_label_pc_1517c, label %dec_label_pc_15150thread-pre-split

dec_label_pc_1517c:                               ; preds = %dec_label_pc_15158
  %v0_1517c = load i32, i32* %r4.global-to-local, align 4
  %v1_1517c = inttoptr i32 %v0_1517c to i16*
  %v2_1517c = load i16, i16* %v1_1517c, align 2
  %v3_1517c = zext i16 %v2_1517c to i32
  store i32 %v3_1517c, i32* %r3.global-to-local, align 4
  %v1_15180 = add i32 %v0_1517c, 8
  store i32 %v1_15180, i32* %r1.global-to-local, align 4
  %v1_15184 = inttoptr i32 %v1_15180 to i32*
  %v2_15184 = load i32, i32* %v1_15184, align 4
  store i32 %v2_15184, i32* %r1.global-to-local, align 4
  %v3_15184 = add i32 %v0_1517c, 12
  %v4_15184 = inttoptr i32 %v3_15184 to i32*
  %v5_15184 = load i32, i32* %v4_15184, align 4
  %v1_15188 = or i32 %v3_1517c, 8
  store i32 %v1_15188, i32* %r3.global-to-local, align 4
  %v2_1518c = sub i32 %v5_15184, %v2_15184
  store i32 %v2_1518c, i32* %r2.global-to-local, align 4
  %v9_1518c = icmp eq i32 %v5_15184, %v2_15184
  store i1 %v9_1518c, i1* %cpsr_z.global-to-local, align 1
  %v1_15190 = trunc i32 %v1_15188 to i16
  store i16 %v1_15190, i16* %v1_1517c, align 2
  br i1 %v9_1518c, label %dec_label_pc_1517c.dec_label_pc_151dc_crit_edge, label %dec_label_pc_15198

dec_label_pc_1517c.dec_label_pc_151dc_crit_edge:  ; preds = %dec_label_pc_1517c
  %v0_151dc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_151dc

dec_label_pc_15198:                               ; preds = %dec_label_pc_1517c
  %v0_15198 = load i32, i32* %r2.global-to-local, align 4
  %v1_15198 = load i32, i32* %r5.global-to-local, align 4
  %v3_15198 = icmp ult i32 %v0_15198, %v1_15198
  %v9_15198 = icmp eq i32 %v0_15198, %v1_15198
  store i1 %v9_15198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15198, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_15198
  store i32 %v1_15198, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_15198, %bb23
  %v2_151ac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_151c0
  %v2_151ac = phi i32 [ %v2_151ac.pre, %.preheader ], [ %v1_151c4, %dec_label_pc_151c0 ]
  %v0_151a0 = load i32, i32* %r6.global-to-local, align 4
  %v1_151a0 = inttoptr i32 %v0_151a0 to i8*
  %v2_151a0 = load i8, i8* %v1_151a0, align 1
  %v3_151a0 = zext i8 %v2_151a0 to i32
  store i32 %v3_151a0, i32* %r3.global-to-local, align 4
  %v7_151a4 = icmp eq i8 %v2_151a0, 10
  store i1 %v7_151a4, i1* %cpsr_z.global-to-local, align 1
  %v1_151a8 = add i32 %v0_151a0, 1
  store i32 %v1_151a8, i32* %r6.global-to-local, align 4
  %v3_151ac = inttoptr i32 %v2_151ac to i8*
  store i8 %v2_151a0, i8* %v3_151ac, align 1
  %v0_151b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_151b0, label %dec_label_pc_151b4, label %dec_label_pc_151c0

dec_label_pc_151b4:                               ; preds = %bb24
  %v0_151b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_151b4 = inttoptr i32 %v0_151b4 to i16*
  %v2_151b4 = load i16, i16* %v1_151b4, align 2
  %v3_151b4 = zext i16 %v2_151b4 to i32
  store i32 %v3_151b4, i32* %r3.global-to-local, align 4
  %v1_151b8 = and i32 %v3_151b4, 256
  %v2_151b8 = icmp eq i32 %v1_151b8, 0
  store i1 %v2_151b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_151b8, label %dec_label_pc_151c0, label %dec_label_pc_151b4.dec_label_pc_151cc_crit_edge

dec_label_pc_151b4.dec_label_pc_151cc_crit_edge:  ; preds = %dec_label_pc_151b4
  %v0_151d0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_151cc

dec_label_pc_151c0:                               ; preds = %dec_label_pc_151b4, %bb24
  %v0_151c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_151c0 = add i32 %v0_151c0, -1
  store i32 %v1_151c0, i32* %r2.global-to-local, align 4
  %v7_151c0 = icmp eq i32 %v0_151c0, 1
  store i1 %v7_151c0, i1* %cpsr_z.global-to-local, align 1
  %v0_151c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_151c4 = add i32 %v0_151c4, 1
  store i32 %v1_151c4, i32* %r1.global-to-local, align 4
  br i1 %v7_151c0, label %dec_label_pc_151c0.dec_label_pc_151cc_crit_edge, label %bb24

dec_label_pc_151c0.dec_label_pc_151cc_crit_edge:  ; preds = %dec_label_pc_151c0
  %v0_151cc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_151cc

dec_label_pc_151cc:                               ; preds = %dec_label_pc_151b4.dec_label_pc_151cc_crit_edge, %dec_label_pc_151c0.dec_label_pc_151cc_crit_edge
  %v0_151d0 = phi i32 [ %v1_151c4, %dec_label_pc_151c0.dec_label_pc_151cc_crit_edge ], [ %v0_151d0.pre, %dec_label_pc_151b4.dec_label_pc_151cc_crit_edge ]
  %v0_151cc = phi i32 [ %v0_151cc.pre, %dec_label_pc_151c0.dec_label_pc_151cc_crit_edge ], [ %v0_151b4, %dec_label_pc_151b4.dec_label_pc_151cc_crit_edge ]
  %v1_151cc = add i32 %v0_151cc, 8
  %v2_151cc = inttoptr i32 %v1_151cc to i32*
  %v3_151cc = load i32, i32* %v2_151cc, align 4
  store i32 %v3_151cc, i32* %r3.global-to-local, align 4
  %v2_151d0 = add i32 %v0_151cc, 16
  %v3_151d0 = inttoptr i32 %v2_151d0 to i32*
  store i32 %v0_151d0, i32* %v3_151d0, align 4
  %v0_151d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_151d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_151d4 = sub i32 %v1_151d4, %v0_151d4
  store i32 %v2_151d4, i32* %r3.global-to-local, align 4
  %v1_151d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_151d8 = sub i32 %v1_151d8, %v2_151d4
  store i32 %v2_151d8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_151dc

dec_label_pc_151dc:                               ; preds = %dec_label_pc_1517c.dec_label_pc_151dc_crit_edge, %dec_label_pc_151cc
  %v0_151dc = phi i32 [ %v0_151dc.pre, %dec_label_pc_1517c.dec_label_pc_151dc_crit_edge ], [ %v2_151d8, %dec_label_pc_151cc ]
  %v1_151dc = load i32, i32* @r7, align 4
  %v2_151dc = sub i32 %v1_151dc, %v0_151dc
  br label %dec_label_pc_151e0

dec_label_pc_15150.dec_label_pc_151e0.loopexit_crit_edge: ; preds = %dec_label_pc_15150thread-pre-split
  %v0_151e0.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_151e0

dec_label_pc_151e0:                               ; preds = %dec_label_pc_15138, %dec_label_pc_15150.dec_label_pc_151e0.loopexit_crit_edge, %dec_label_pc_151dc
  %v0_151e0 = phi i32 [ %v2_151dc, %dec_label_pc_151dc ], [ %v0_151e0.pre.pre, %dec_label_pc_15150.dec_label_pc_151e0.loopexit_crit_edge ], [ 0, %dec_label_pc_15138 ]
  %v2_151e4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_151e4, i32* %r4.global-to-local, align 4
  ret i32 %v0_151e0

; uselistorder directives
  uselistorder i32 %v0_151cc, { 1, 0 }
  uselistorder i32 %v1_151c4, { 0, 2, 1 }
  uselistorder i32 %v0_151c0, { 1, 0 }
  uselistorder i32 %v1_15198, { 0, 2, 1 }
  uselistorder i32 %v0_15198, { 1, 0 }
  uselistorder i32 %v5_15184, { 1, 0 }
  uselistorder i32 %v2_15184, { 1, 0, 2 }
  uselistorder i32 %v3_15168, { 2, 3, 0, 1 }
  uselistorder i32 %v0_15160, { 1, 0 }
  uselistorder i32 %v5_15174, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 4, 2, 3, 1, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 4, 3, 5, 6, 1, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 1, 4, 2, 5, 6, 7, 8, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32 256, { 263, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 256, 264, 261, 262, 265, 33, 35, 34, 36, 255, 0, 260, 1, 37, 38, 39, 40, 42, 43, 44, 41, 46, 47, 48, 45, 49, 258, 50, 269, 270, 51, 52, 53, 272, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 64, 66, 67, 259, 273, 271, 68, 69, 70, 71, 266, 72, 73, 74, 75, 76, 267, 77, 78, 79, 80, 268, 81, 82, 83, 84, 86, 85, 87, 89, 88, 90, 92, 91, 93, 274, 94, 95, 275, 106, 100, 96, 107, 101, 108, 102, 97, 98, 103, 104, 109, 105, 99, 110, 111, 112, 113, 114, 115, 116, 123, 120, 117, 124, 121, 125, 122, 118, 119, 126, 127, 128, 129, 140, 135, 141, 136, 142, 137, 143, 138, 130, 131, 132, 133, 144, 139, 134, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 158, 162, 159, 163, 160, 155, 156, 157, 164, 165, 166, 167, 168, 178, 179, 173, 169, 180, 174, 181, 175, 170, 176, 182, 177, 171, 172, 183, 184, 185, 186, 187, 188, 193, 191, 189, 194, 192, 190, 195, 257, 276, 196, 198, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 216, 223, 217, 224, 218, 219, 212, 213, 225, 220, 226, 221, 214, 215, 222, 227, 228, 229, 230, 231, 232, 237, 244, 238, 245, 239, 233, 234, 246, 240, 247, 241, 242, 235, 236, 243, 248, 249, 250, 251, 252, 253, 254 }
  uselistorder i8 10, { 1, 2, 0 }
  uselistorder i32 (i32, i32)* @function_100e4, { 2, 1, 0 }
  uselistorder i32 4, { 195, 196, 197, 189, 190, 319, 198, 439, 4, 5, 199, 6, 7, 68, 0, 8, 80, 75, 76, 9, 440, 77, 441, 58, 10, 11, 78, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 12, 459, 460, 461, 462, 463, 464, 57, 465, 466, 467, 468, 469, 470, 13, 14, 79, 471, 200, 92, 201, 15, 202, 93, 203, 204, 205, 206, 127, 207, 208, 209, 210, 211, 212, 16, 191, 192, 193, 194, 277, 278, 184, 185, 186, 187, 188, 472, 128, 94, 473, 17, 474, 129, 130, 59, 380, 381, 382, 383, 384, 385, 131, 132, 18, 386, 387, 388, 389, 390, 391, 392, 393, 133, 378, 379, 349, 350, 351, 352, 353, 354, 355, 356, 357, 19, 358, 359, 360, 394, 20, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 134, 135, 136, 409, 410, 413, 416, 411, 412, 95, 137, 414, 50, 415, 417, 418, 419, 421, 138, 22, 21, 420, 139, 140, 141, 247, 142, 51, 23, 24, 279, 280, 281, 282, 283, 25, 284, 422, 423, 183, 26, 27, 96, 248, 60, 28, 233, 97, 234, 143, 235, 250, 251, 29, 252, 81, 98, 99, 213, 214, 236, 237, 216, 217, 218, 101, 230, 231, 232, 215, 100, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 238, 239, 54, 53, 253, 69, 254, 30, 255, 56, 55, 256, 31, 249, 257, 258, 263, 102, 265, 103, 266, 104, 267, 268, 264, 259, 105, 260, 261, 262, 240, 144, 241, 52, 32, 242, 243, 33, 244, 61, 70, 106, 245, 246, 269, 67, 66, 65, 270, 107, 34, 35, 36, 37, 38, 39, 271, 63, 62, 272, 64, 108, 273, 274, 275, 109, 276, 110, 111, 112, 285, 145, 286, 287, 288, 289, 290, 146, 147, 113, 291, 40, 114, 293, 82, 294, 295, 148, 296, 297, 149, 150, 298, 115, 299, 83, 300, 301, 151, 152, 302, 153, 303, 304, 305, 154, 155, 306, 116, 307, 84, 308, 156, 157, 309, 310, 311, 117, 85, 312, 313, 158, 314, 315, 316, 159, 160, 1, 118, 317, 86, 318, 320, 321, 161, 322, 323, 162, 163, 2, 71, 324, 119, 326, 87, 327, 328, 329, 330, 164, 165, 331, 332, 166, 333, 334, 120, 335, 3, 336, 88, 337, 121, 338, 339, 340, 167, 341, 342, 343, 344, 168, 169, 123, 345, 72, 346, 122, 347, 89, 348, 424, 425, 170, 426, 427, 428, 124, 429, 125, 430, 431, 432, 171, 172, 126, 433, 73, 434, 90, 435, 91, 438, 173, 41, 361, 174, 42, 362, 175, 43, 363, 176, 74, 44, 364, 365, 177, 45, 366, 178, 46, 367, 179, 47, 368, 180, 48, 369, 181, 49, 370, 371, 182, 372, 373, 374, 375, 376, 377, 436, 437, 325, 292 }
  uselistorder i32 2147483647, { 1, 5, 0, 2, 3, 4 }
  uselistorder i32* @r7, {}
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_151e0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_151dc, { 1, 0 }
  uselistorder label %dec_label_pc_151cc, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_15158, { 1, 0 }
}

define i32 @function_151ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_151ec:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_151ec = load i32, i32* @r4, align 4
  store i32 %v3_151ec, i32* %stack_var_-8, align 4
  %v1_151f0 = add i32 %arg1, 8
  %v1_151f4 = inttoptr i32 %v1_151f0 to i32*
  %v2_151f4 = load i32, i32* %v1_151f4, align 4
  %v3_151f4 = add i32 %arg1, 12
  %v4_151f4 = inttoptr i32 %v3_151f4 to i32*
  %v5_151f4 = load i32, i32* %v4_151f4, align 4
  %v2_151f8 = sub i32 %v5_151f4, %v2_151f4
  store i32 %v2_151f8, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_15200 = inttoptr i32 %arg1 to i16*
  %v4_15200 = call i32 @function_150e0(i16* %v3_15200, i32 %v2_151f4, i32 %v2_151f8)
  %v0_15204 = load i32, i32* @r4, align 4
  %v1_15204 = add i32 %v0_15204, 8
  %v2_15204 = inttoptr i32 %v1_15204 to i32*
  %v3_15204 = load i32, i32* %v2_15204, align 4
  store i32 %v3_15204, i32* %r2.global-to-local, align 4
  %v2_15208 = add i32 %v3_15204, %v4_15200
  %v2_1520c = add i32 %v0_15204, 20
  %v3_1520c = inttoptr i32 %v2_1520c to i32*
  store i32 %v2_15208, i32* %v3_1520c, align 4
  %v0_15210 = load i32, i32* %r2.global-to-local, align 4
  %v1_15210 = load i32, i32* @r4, align 4
  %v2_15210 = add i32 %v1_15210, 16
  %v3_15210 = inttoptr i32 %v2_15210 to i32*
  store i32 %v0_15210, i32* %v3_15210, align 4
  %v2_15214 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15214, i32* @r4, align 4
  ret i32 %v4_15200

; uselistorder directives
  uselistorder i32 %v4_15200, { 1, 0 }
  uselistorder i32 20, { 29, 110, 3, 111, 112, 1, 113, 30, 9, 31, 32, 33, 34, 28, 47, 48, 24, 25, 26, 27, 114, 10, 115, 101, 102, 104, 2, 49, 11, 50, 51, 0, 12, 39, 38, 13, 35, 14, 36, 15, 37, 41, 42, 4, 43, 16, 44, 23, 40, 45, 46, 52, 54, 5, 53, 55, 56, 57, 58, 59, 60, 6, 61, 62, 63, 64, 65, 66, 68, 69, 17, 67, 70, 71, 72, 73, 74, 75, 77, 78, 18, 76, 79, 80, 81, 82, 84, 85, 19, 83, 86, 87, 88, 89, 90, 91, 93, 20, 92, 94, 95, 96, 99, 7, 97, 21, 98, 100, 105, 108, 8, 106, 22, 107, 109, 103 }
  uselistorder i32 (i16*, i32, i32)* @function_150e0, { 1, 0 }
  uselistorder i32 12, { 10, 11, 39, 12, 13, 42, 6, 166, 167, 168, 169, 170, 172, 173, 171, 174, 175, 176, 177, 178, 179, 180, 14, 15, 16, 17, 19, 18, 20, 43, 44, 21, 45, 46, 47, 48, 49, 40, 41, 84, 85, 36, 37, 38, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 2, 115, 116, 117, 118, 119, 22, 120, 138, 23, 24, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 157, 150, 151, 152, 153, 154, 155, 156, 158, 159, 25, 160, 3, 86, 87, 26, 88, 89, 7, 63, 64, 59, 60, 65, 66, 61, 51, 57, 58, 50, 52, 53, 54, 55, 56, 62, 67, 68, 69, 5, 70, 71, 72, 73, 75, 76, 77, 27, 78, 28, 79, 29, 80, 30, 81, 83, 82, 74, 4, 161, 90, 31, 91, 32, 92, 33, 93, 34, 94, 95, 96, 97, 98, 99, 100, 101, 35, 102, 103, 104, 8, 105, 106, 107, 108, 109, 110, 9, 111, 112, 113, 114, 162, 163, 164, 165, 0, 1 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_1521c() local_unnamed_addr {
dec_label_pc_1521c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1521c = load i32, i32* @r4, align 4
  store i32 %v3_1521c, i32* %stack_var_-12, align 4
  %v0_15220 = load i32, i32* @r0, align 4
  %v1_15220 = inttoptr i32 %v0_15220 to i16*
  %v2_15220 = load i16, i16* %v1_15220, align 2
  %v3_15220 = zext i16 %v2_15220 to i32
  store i32 %v3_15220, i32* %r3.global-to-local, align 4
  %v0_15224 = load i32, i32* @r1, align 4
  %v2_15224 = and i32 %v0_15224, %v3_15220
  %v4_15224 = icmp eq i32 %v2_15224, 0
  store i32 %v0_15220, i32* @r4, align 4
  br i1 %v4_15224, label %dec_label_pc_15234, label %dec_label_pc_15244

dec_label_pc_15234:                               ; preds = %dec_label_pc_1521c
  %v1_15234 = and i32 %v3_15220, 2176
  %v2_15234 = icmp eq i32 %v1_15234, 0
  br i1 %v2_15234, label %dec_label_pc_1523c, label %dec_label_pc_15250

dec_label_pc_1523c:                               ; preds = %dec_label_pc_15234
  %v2_1523c = or i32 %v0_15224, %v3_15220
  store i32 %v2_1523c, i32* %r3.global-to-local, align 4
  %v1_15240 = trunc i32 %v2_1523c to i16
  store i16 %v1_15240, i16* %v1_15220, align 2
  %v0_15244.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15244

dec_label_pc_15244:                               ; preds = %dec_label_pc_1521c, %dec_label_pc_1523c
  %v0_15244 = phi i32 [ %v0_15220, %dec_label_pc_1521c ], [ %v0_15244.pre, %dec_label_pc_1523c ]
  %v1_15244 = inttoptr i32 %v0_15244 to i16*
  %v2_15244 = load i16, i16* %v1_15244, align 2
  %v3_15244 = zext i16 %v2_15244 to i32
  store i32 %v3_15244, i32* %r3.global-to-local, align 4
  %v1_15248 = and i32 %v3_15244, 16
  store i32 %v1_15248, i32* %r5.global-to-local, align 4
  %v2_15248 = icmp eq i32 %v1_15248, 0
  br i1 %v2_15248, label %dec_label_pc_15270, label %dec_label_pc_15250

dec_label_pc_15250:                               ; preds = %dec_label_pc_15234, %dec_label_pc_15244
  %v0_15250 = call i32 @function_10600()
  store i32 %v0_15250, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_15258 = inttoptr i32 %v0_15250 to i32*
  store i32 9, i32* %v2_15258, align 4
  br label %dec_label_pc_1525c

dec_label_pc_1525c:                               ; preds = %dec_label_pc_15278, %dec_label_pc_15250
  %v0_1525c = load i32, i32* @r4, align 4
  %v1_1525c = inttoptr i32 %v0_1525c to i16*
  %v2_1525c = load i16, i16* %v1_1525c, align 2
  %v3_1525c = zext i16 %v2_1525c to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_15264 = or i32 %v3_1525c, 8
  store i32 %v1_15264, i32* %r3.global-to-local, align 4
  %v1_15268 = trunc i32 %v1_15264 to i16
  store i16 %v1_15268, i16* %v1_1525c, align 2
  %v1_152b0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_152a8

dec_label_pc_15270:                               ; preds = %dec_label_pc_15244
  %v1_15270 = and i32 %v3_15244, 64
  %v2_15270 = icmp eq i32 %v1_15270, 0
  br i1 %v2_15270, label %dec_label_pc_15298, label %dec_label_pc_15278

dec_label_pc_15278:                               ; preds = %dec_label_pc_15270
  %v0_15278 = load i32, i32* @r0, align 4
  %v1_15278 = call i32 @function_13e54(i32 %v0_15278)
  store i32 %v1_15278, i32* %r0.global-to-local, align 4
  %v2_1527c = icmp eq i32 %v1_15278, 0
  br i1 %v2_1527c, label %dec_label_pc_15284, label %dec_label_pc_1525c

dec_label_pc_15284:                               ; preds = %dec_label_pc_15278
  %v0_15284 = load i32, i32* @r4, align 4
  %v1_15284 = inttoptr i32 %v0_15284 to i16*
  %v2_15284 = load i16, i16* %v1_15284, align 2
  %v3_15284 = zext i16 %v2_15284 to i32
  store i32 %v3_15284, i32* %r3.global-to-local, align 4
  %v1_15288 = add i32 %v0_15284, 8
  %v2_15288 = inttoptr i32 %v1_15288 to i32*
  %v3_15288 = load i32, i32* %v2_15288, align 4
  %v1_1528c = and i32 %v3_15284, 65471
  store i32 %v1_1528c, i32* %r3.global-to-local, align 4
  %v2_15290 = add i32 %v0_15284, 28
  %v3_15290 = inttoptr i32 %v2_15290 to i32*
  store i32 %v3_15288, i32* %v3_15290, align 4
  %v0_15294 = load i32, i32* %r3.global-to-local, align 4
  %v1_15294 = trunc i32 %v0_15294 to i16
  %v2_15294 = load i32, i32* @r4, align 4
  %v3_15294 = inttoptr i32 %v2_15294 to i16*
  store i16 %v1_15294, i16* %v3_15294, align 2
  %v0_15298.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15298

dec_label_pc_15298:                               ; preds = %dec_label_pc_15270, %dec_label_pc_15284
  %v2_152a0 = phi i32 [ %v0_15244, %dec_label_pc_15270 ], [ %v0_15298.pre, %dec_label_pc_15284 ]
  %v1_15298 = inttoptr i32 %v2_152a0 to i16*
  %v2_15298 = load i16, i16* %v1_15298, align 2
  %v3_15298 = zext i16 %v2_15298 to i32
  %v1_1529c = or i32 %v3_15298, 1
  store i32 %v1_1529c, i32* %r3.global-to-local, align 4
  %v1_152a0 = trunc i32 %v1_1529c to i16
  store i16 %v1_152a0, i16* %v1_15298, align 2
  %v0_152a4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_152a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_152a8

dec_label_pc_152a8:                               ; preds = %dec_label_pc_1525c, %dec_label_pc_15298
  %v1_152b0 = phi i32 [ %v1_152b0.pre, %dec_label_pc_1525c ], [ %v0_152a4, %dec_label_pc_15298 ]
  %v2_152ac = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_152ac, i32* @r4, align 4
  ret i32 %v1_152b0

; uselistorder directives
  uselistorder i32 %v3_15220, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32 28, { 20, 44, 7, 21, 22, 23, 33, 34, 18, 11, 19, 12, 13, 14, 15, 41, 42, 43, 8, 16, 0, 24, 1, 25, 2, 26, 3, 27, 4, 28, 5, 29, 6, 30, 9, 17, 32, 31, 35, 36, 37, 38, 39, 40, 10 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_13e54, { 0, 2, 1 }
  uselistorder i32 64, { 12, 13, 14, 15, 18, 8, 9, 10, 11, 48, 16, 17, 19, 20, 2, 21, 22, 23, 3, 24, 25, 26, 27, 4, 28, 29, 30, 5, 31, 32, 33, 6, 34, 35, 36, 0, 37, 38, 39, 40, 41, 7, 42, 43, 44, 45, 46, 1, 47 }
  uselistorder i32 8, { 70, 71, 72, 73, 74, 75, 76, 63, 64, 65, 66, 124, 77, 211, 32, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 78, 79, 80, 81, 82, 83, 84, 26, 85, 86, 87, 88, 89, 90, 91, 92, 93, 67, 68, 69, 107, 108, 109, 42, 229, 230, 53, 155, 156, 157, 158, 159, 160, 161, 162, 5, 54, 163, 164, 165, 166, 167, 168, 169, 170, 6, 140, 141, 142, 143, 144, 145, 146, 147, 171, 172, 173, 174, 175, 7, 176, 177, 8, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 188, 189, 190, 191, 55, 21, 192, 193, 194, 56, 57, 9, 196, 197, 198, 199, 201, 202, 58, 10, 203, 11, 200, 35, 36, 33, 34, 23, 24, 29, 30, 37, 231, 110, 111, 112, 113, 43, 61, 27, 12, 13, 20, 14, 15, 16, 17, 98, 44, 94, 62, 31, 99, 100, 101, 22, 25, 103, 18, 45, 104, 46, 105, 106, 102, 95, 96, 47, 97, 48, 49, 50, 114, 60, 38, 115, 116, 117, 118, 119, 28, 120, 121, 122, 123, 2, 125, 126, 127, 3, 128, 129, 130, 131, 132, 133, 134, 4, 135, 136, 137, 138, 139, 204, 205, 206, 207, 208, 148, 39, 149, 40, 150, 41, 151, 51, 152, 59, 19, 153, 52, 154, 209, 210, 0, 1 }
  uselistorder i32 9, { 4, 27, 22, 23, 49, 50, 5, 36, 3, 37, 6, 32, 28, 7, 8, 29, 24, 33, 2, 25, 34, 26, 9, 35, 10, 30, 31, 11, 12, 13, 14, 15, 16, 17, 18, 0, 19, 1, 20, 51, 38, 39, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53 }
  uselistorder i32 16, { 95, 96, 97, 89, 90, 91, 92, 98, 29, 30, 31, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 99, 100, 101, 102, 103, 2, 1, 22, 43, 44, 45, 46, 106, 47, 107, 104, 105, 48, 49, 108, 8, 50, 51, 109, 110, 52, 53, 111, 112, 93, 94, 54, 131, 132, 85, 86, 87, 88, 55, 56, 57, 58, 189, 190, 191, 192, 59, 194, 3, 60, 195, 196, 0, 197, 198, 61, 21, 133, 62, 134, 63, 64, 9, 20, 10, 11, 4, 12, 13, 65, 120, 66, 121, 70, 116, 122, 117, 67, 113, 68, 114, 69, 115, 125, 126, 127, 32, 84, 71, 72, 14, 81, 15, 16, 73, 123, 124, 74, 118, 119, 35, 34, 33, 128, 36, 129, 37, 75, 76, 130, 38, 199, 77, 135, 136, 137, 138, 23, 139, 140, 141, 142, 143, 144, 145, 24, 146, 147, 148, 78, 149, 79, 39, 150, 151, 25, 152, 153, 17, 154, 155, 5, 40, 156, 157, 158, 26, 159, 160, 161, 162, 163, 6, 41, 164, 165, 166, 82, 18, 83, 167, 27, 168, 169, 170, 19, 28, 171, 80, 172, 173, 7, 42, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 185, 187, 188, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 210, 212, 213, 193 }
  uselistorder i32* @r1, { 15, 14, 54, 16, 17, 18, 19, 1, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 2, 87, 88, 20, 21, 22, 23, 0, 39, 40, 9, 24, 3, 61, 59, 60, 4, 62, 5, 30, 31, 10, 55, 25, 41, 11, 63, 64, 42, 7, 65, 43, 44, 32, 26, 27, 28, 34, 33, 29, 66, 35, 36, 37, 38, 45, 46, 47, 8, 48, 67, 68, 6, 49, 50, 51, 52, 53, 56, 57, 58, 69, 13, 12 }
  uselistorder label %dec_label_pc_152a8, { 1, 0 }
  uselistorder label %dec_label_pc_15298, { 1, 0 }
  uselistorder label %dec_label_pc_15250, { 1, 0 }
  uselistorder label %dec_label_pc_15244, { 1, 0 }
}

define i32 @function_152b4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_152b4:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_152b4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_152c4 = call i32 @function_10700()
  %v0_152c8 = load i32, i32* @r5, align 4
  %v1_152c8 = load i32, i32* @r4, align 4
  %v2_152c8 = add i32 %v1_152c8, %v0_152c8
  store i32 %v6_152b4, i32* @r5, align 4
  ret i32 %v2_152c8

; uselistorder directives
  uselistorder i32 ()* @function_10700, { 4, 8, 7, 0, 3, 2, 6, 5, 1 }
  uselistorder i32* @r5, { 44, 45, 46, 47, 30, 31, 32, 33, 34, 35, 36, 37, 38, 48, 4, 49, 50, 51, 576, 577, 578, 52, 26, 53, 0, 54, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 22, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 28, 29, 77, 78, 79, 80, 81, 82, 5, 83, 84, 85, 86, 87, 88, 89, 6, 90, 91, 92, 9, 93, 94, 7, 95, 96, 97, 98, 99, 100, 8, 101, 102, 103, 104, 105, 106, 39, 10, 40, 41, 42, 43, 237, 238, 239, 240, 241, 242, 591, 11, 592, 593, 601, 602, 107, 108, 109, 110, 111, 112, 113, 594, 595, 596, 597, 598, 599, 600, 114, 115, 116, 117, 506, 507, 511, 512, 513, 514, 515, 508, 509, 510, 469, 470, 471, 12, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 516, 517, 540, 13, 541, 542, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 2, 531, 532, 533, 534, 535, 14, 536, 537, 538, 539, 135, 136, 137, 138, 139, 243, 244, 15, 245, 246, 247, 248, 249, 27, 118, 250, 16, 251, 252, 253, 254, 255, 256, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 122, 123, 124, 119, 120, 121, 189, 190, 191, 192, 193, 194, 195, 196, 202, 203, 204, 205, 206, 207, 197, 198, 199, 200, 201, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 225, 227, 228, 220, 221, 222, 223, 1, 224, 226, 229, 17, 230, 231, 232, 233, 234, 235, 236, 257, 258, 259, 260, 261, 23, 262, 263, 264, 265, 266, 267, 268, 24, 269, 25, 270, 271, 272, 273, 274, 275, 276, 277, 18, 278, 19, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 303, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 324, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 20, 337, 338, 339, 340, 341, 342, 343, 3, 345, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 360, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 21, 421, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 447, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 543, 544, 545, 546, 547, 554, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505 }
  uselistorder i32* @r2, { 7, 10, 11, 34, 35, 12, 13, 14, 15, 16, 17, 22, 8, 9, 23, 36, 40, 41, 42, 43, 1, 46, 37, 2, 3, 30, 31, 4, 32, 5, 0, 44, 6, 45, 38, 39, 27, 28, 29, 21, 18, 19, 20, 33, 24, 25, 26 }
}

define i32 @function_152d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_152d8:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15318, label %dec_label_pc_15304

dec_label_pc_15304:                               ; preds = %dec_label_pc_152d8
  %v0_15304 = call i32 @function_10600()
  %v0_15308 = load i32, i32* %r4.global-to-local, align 4
  %v1_15308 = sub i32 0, %v0_15308
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_15310 = inttoptr i32 %v0_15304 to i32*
  store i32 %v1_15308, i32* %v2_15310, align 4
  %v0_15320.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15320

dec_label_pc_15318:                               ; preds = %dec_label_pc_152d8
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_15318 = icmp eq i32 %arg1, 0
  br i1 %v2_15318, label %dec_label_pc_1532c, label %dec_label_pc_15320

dec_label_pc_15320:                               ; preds = %dec_label_pc_15318, %dec_label_pc_15304
  %v0_15320 = phi i32 [ %arg1, %dec_label_pc_15318 ], [ %v0_15320.pre, %dec_label_pc_15304 ]
  br label %dec_label_pc_15330

dec_label_pc_1532c:                               ; preds = %dec_label_pc_15318
  br label %dec_label_pc_15330

dec_label_pc_15330:                               ; preds = %dec_label_pc_15320, %dec_label_pc_1532c
  %v1_15338 = phi i32 [ %v0_15320, %dec_label_pc_15320 ], [ %tmp8, %dec_label_pc_1532c ]
  ret i32 %v1_15338

; uselistorder directives
  uselistorder i32 -1, { 240, 246, 162, 241, 242, 243, 108, 244, 109, 245, 78, 79, 80, 81, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 163, 164, 0, 165, 147, 247, 248, 166, 110, 249, 167, 1, 82, 250, 251, 151, 252, 168, 3, 2, 169, 170, 111, 317, 112, 113, 276, 114, 290, 101, 291, 277, 278, 279, 115, 239, 116, 292, 293, 4, 171, 172, 173, 294, 174, 5, 175, 6, 176, 152, 295, 10, 177, 178, 9, 11, 296, 8, 179, 180, 83, 7, 181, 84, 85, 86, 87, 182, 183, 184, 95, 258, 259, 12, 260, 117, 297, 118, 119, 298, 120, 285, 121, 287, 122, 261, 123, 275, 124, 125, 262, 126, 288, 127, 286, 128, 263, 100, 161, 13, 281, 185, 129, 299, 130, 319, 131, 264, 132, 265, 133, 266, 134, 280, 135, 321, 136, 300, 137, 318, 138, 283, 139, 282, 140, 267, 141, 142, 143, 320, 186, 187, 188, 93, 98, 14, 15, 301, 99, 94, 149, 150, 189, 19, 190, 20, 191, 268, 153, 253, 21, 192, 88, 22, 193, 194, 18, 195, 196, 197, 198, 17, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 254, 144, 255, 23, 218, 219, 103, 102, 269, 16, 220, 221, 222, 24, 223, 106, 107, 104, 105, 224, 25, 225, 146, 270, 89, 26, 27, 226, 97, 28, 29, 30, 31, 32, 145, 256, 257, 96, 160, 159, 35, 155, 271, 154, 272, 34, 156, 273, 33, 36, 37, 157, 274, 38, 39, 40, 41, 42, 227, 43, 90, 44, 45, 47, 228, 148, 46, 91, 48, 49, 50, 51, 52, 53, 54, 229, 55, 158, 284, 56, 57, 230, 58, 59, 60, 61, 231, 62, 232, 63, 64, 65, 233, 66, 67, 234, 68, 69, 70, 71, 72, 235, 73, 74, 75, 236, 76, 77, 92, 237, 238, 289 }
  uselistorder i32 ()* @function_10600, { 60, 26, 29, 28, 27, 62, 59, 58, 5, 4, 21, 39, 17, 38, 37, 61, 16, 15, 14, 20, 11, 13, 12, 55, 54, 10, 9, 8, 25, 23, 53, 40, 52, 51, 22, 24, 50, 57, 56, 36, 34, 33, 32, 7, 2, 49, 48, 47, 35, 0, 6, 3, 30, 31, 46, 19, 45, 1, 44, 43, 42, 41, 18 }
  uselistorder i32 1, { 251, 250, 767, 593, 331, 332, 333, 594, 228, 768, 769, 770, 595, 198, 200, 199, 201, 195, 194, 196, 197, 596, 32, 31, 30, 597, 35, 36, 33, 39, 37, 34, 38, 598, 249, 244, 243, 425, 450, 426, 972, 973, 974, 975, 438, 377, 600, 599, 345, 346, 771, 601, 429, 1065, 430, 772, 1066, 773, 774, 775, 777, 776, 413, 602, 779, 778, 907, 908, 1067, 431, 1068, 1069, 1070, 1071, 1072, 1073, 763, 1074, 1075, 1076, 1077, 1078, 1079, 764, 586, 604, 603, 380, 381, 386, 388, 387, 382, 379, 383, 385, 384, 783, 780, 781, 782, 448, 432, 51, 49, 50, 53, 52, 483, 784, 785, 786, 787, 605, 587, 47, 48, 788, 608, 607, 606, 40, 43, 41, 44, 45, 46, 42, 484, 789, 610, 609, 341, 344, 342, 339, 340, 343, 790, 611, 328, 327, 326, 791, 792, 612, 136, 135, 613, 161, 485, 766, 28, 29, 793, 794, 795, 796, 797, 798, 799, 800, 433, 616, 615, 614, 351, 350, 355, 353, 352, 354, 801, 802, 803, 618, 617, 6, 7, 486, 804, 619, 262, 805, 806, 807, 808, 809, 487, 620, 71, 74, 73, 72, 75, 488, 76, 270, 621, 246, 245, 95, 622, 94, 623, 88, 87, 624, 55, 60, 54, 59, 63, 62, 58, 61, 56, 57, 625, 70, 69, 67, 66, 68, 64, 65, 626, 275, 276, 283, 284, 280, 281, 279, 282, 277, 278, 627, 209, 210, 407, 909, 101, 104, 102, 103, 628, 174, 173, 629, 107, 630, 318, 319, 1080, 489, 1081, 490, 1082, 631, 257, 252, 258, 256, 254, 259, 253, 260, 255, 159, 491, 178, 177, 632, 336, 337, 120, 420, 810, 811, 812, 633, 910, 636, 635, 634, 27, 637, 1083, 439, 492, 639, 638, 640, 108, 1015, 1018, 1019, 1020, 641, 369, 374, 375, 373, 372, 376, 370, 371, 1021, 1022, 1023, 1024, 642, 358, 361, 357, 360, 364, 356, 366, 367, 365, 363, 368, 362, 359, 1016, 1017, 493, 111, 110, 109, 112, 1000, 494, 1001, 1002, 1003, 1004, 1005, 643, 267, 268, 266, 269, 330, 329, 1025, 1026, 1027, 1028, 1029, 1030, 455, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 496, 1039, 1040, 1041, 1042, 1043, 495, 1044, 1045, 1046, 1047, 1048, 644, 392, 394, 390, 393, 397, 400, 396, 398, 399, 395, 401, 391, 335, 334, 497, 498, 872, 424, 648, 647, 646, 645, 211, 287, 434, 16, 649, 286, 285, 119, 650, 317, 651, 26, 652, 160, 653, 146, 654, 86, 85, 89, 655, 264, 263, 656, 118, 657, 172, 171, 658, 219, 659, 813, 814, 815, 816, 817, 818, 819, 1084, 8, 9, 10, 11, 660, 911, 499, 113, 114, 820, 661, 227, 500, 662, 212, 456, 501, 663, 242, 240, 241, 664, 117, 116, 115, 665, 180, 179, 666, 261, 667, 231, 668, 97, 96, 669, 156, 155, 214, 213, 670, 100, 99, 671, 134, 133, 672, 215, 673, 176, 175, 674, 158, 157, 320, 675, 338, 301, 676, 677, 226, 408, 1049, 378, 912, 913, 914, 915, 419, 916, 679, 678, 84, 82, 81, 79, 80, 77, 78, 83, 934, 435, 935, 436, 936, 681, 680, 348, 347, 349, 917, 918, 919, 682, 305, 304, 302, 303, 1050, 1051, 1052, 427, 440, 0, 416, 482, 1053, 272, 271, 273, 274, 836, 837, 838, 502, 920, 389, 1054, 922, 921, 923, 307, 306, 308, 1055, 683, 952, 684, 93, 92, 91, 90, 937, 685, 291, 290, 289, 288, 441, 503, 839, 504, 840, 457, 841, 873, 506, 874, 516, 842, 517, 518, 822, 824, 507, 821, 509, 823, 510, 825, 508, 826, 827, 511, 828, 829, 514, 830, 831, 512, 832, 833, 513, 834, 835, 515, 843, 875, 876, 877, 519, 878, 879, 880, 520, 881, 765, 884, 883, 505, 882, 885, 886, 521, 887, 888, 889, 442, 896, 897, 421, 522, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 232, 238, 237, 235, 236, 239, 234, 233, 890, 891, 523, 892, 893, 524, 894, 895, 141, 140, 139, 145, 142, 143, 144, 138, 137, 525, 526, 700, 699, 404, 405, 402, 403, 406, 844, 845, 846, 847, 848, 849, 850, 409, 418, 851, 852, 443, 410, 853, 854, 855, 856, 411, 417, 857, 858, 444, 412, 859, 527, 860, 861, 528, 862, 529, 863, 864, 437, 867, 865, 866, 414, 415, 868, 530, 869, 708, 589, 707, 706, 705, 704, 703, 702, 588, 701, 19, 18, 23, 22, 25, 21, 20, 24, 709, 17, 1056, 711, 710, 185, 186, 184, 183, 182, 181, 188, 187, 870, 871, 132, 533, 458, 898, 899, 459, 900, 531, 532, 534, 901, 902, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 592, 714, 713, 712, 13, 15, 14, 12, 545, 422, 546, 725, 549, 548, 547, 903, 727, 726, 130, 131, 550, 551, 552, 904, 905, 553, 449, 554, 906, 423, 555, 731, 730, 729, 728, 106, 105, 924, 930, 2, 445, 925, 556, 926, 1, 927, 451, 928, 446, 447, 929, 931, 932, 452, 933, 590, 735, 734, 591, 733, 732, 265, 1057, 460, 461, 1058, 3, 4, 5, 938, 939, 940, 428, 453, 454, 941, 942, 943, 944, 945, 558, 946, 557, 947, 559, 948, 949, 950, 739, 738, 737, 736, 164, 163, 166, 169, 167, 168, 162, 165, 170, 953, 954, 955, 560, 561, 741, 740, 189, 192, 193, 191, 190, 956, 957, 562, 958, 959, 960, 961, 563, 962, 564, 463, 462, 565, 963, 742, 222, 223, 225, 224, 220, 221, 964, 566, 965, 466, 464, 465, 744, 743, 229, 230, 966, 967, 968, 567, 969, 568, 569, 970, 467, 971, 745, 310, 313, 314, 316, 315, 309, 312, 311, 976, 977, 978, 570, 979, 571, 469, 468, 572, 981, 573, 982, 746, 123, 126, 127, 129, 128, 121, 125, 124, 122, 983, 984, 985, 986, 987, 988, 574, 989, 575, 990, 576, 474, 473, 577, 991, 470, 992, 471, 993, 472, 994, 752, 751, 750, 749, 748, 747, 202, 205, 206, 208, 207, 203, 204, 995, 996, 997, 578, 477, 476, 579, 998, 475, 999, 753, 148, 152, 153, 154, 147, 151, 150, 149, 1059, 1060, 1061, 580, 480, 479, 581, 1062, 478, 1063, 758, 757, 756, 755, 754, 293, 297, 298, 300, 299, 292, 296, 295, 294, 1006, 481, 582, 759, 216, 218, 217, 1007, 1008, 583, 1011, 584, 585, 1012, 1009, 1010, 1013, 1014, 325, 322, 323, 321, 324, 1064, 760, 98, 980, 247, 951, 248, 761, 762 }
  uselistorder i32 %arg1, { 1, 3, 4, 0, 2 }
  uselistorder label %dec_label_pc_15330, { 1, 0 }
}

define i32 @function_1533c() local_unnamed_addr {
entry:
  %v3_15340 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_15340)
  %v31_15348 = load i32, i32* @r0, align 4
  ret i32 %v31_15348

; uselistorder directives
  uselistorder i32* @r0, { 30, 25, 19, 56, 55, 162, 13, 4, 5, 199, 6, 29, 7, 57, 0, 58, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 1, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 59, 27, 53, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 12, 22, 132, 133, 15, 28, 10, 226, 228, 229, 43, 44, 45, 46, 47, 48, 49, 50, 11, 18, 74, 75, 227, 76, 178, 21, 51, 52, 179, 2, 180, 181, 182, 177, 169, 36, 170, 171, 172, 37, 173, 174, 14, 190, 191, 183, 184, 185, 186, 187, 188, 189, 84, 85, 16, 86, 9, 20, 134, 135, 136, 137, 175, 17, 23, 24, 192, 138, 193, 26, 139, 140, 141, 142, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 79, 111, 32, 77, 78, 80, 112, 115, 116, 117, 118, 119, 120, 113, 114, 81, 82, 83, 194, 33, 34, 40, 39, 121, 122, 41, 42, 123, 124, 125, 126, 127, 128, 129, 130, 131, 35, 143, 144, 145, 146, 147, 148, 149, 8, 150, 151, 152, 153, 154, 155, 156, 195, 196, 3, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 197, 198, 176, 38, 164, 31 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 59, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 2, 3, 64, 65, 66, 67, 60, 48, 61, 62, 63, 68, 69, 70, 49, 50, 51, 44, 45, 46, 52, 56, 57, 53, 54, 55, 71, 38, 39, 40, 41, 42, 43, 47, 58 }
  uselistorder i32 0, { 469, 470, 479, 480, 481, 482, 483, 83, 484, 485, 486, 0, 487, 247, 45, 488, 289, 489, 490, 491, 276, 277, 471, 472, 477, 1, 84, 85, 803, 804, 805, 806, 115, 116, 807, 492, 117, 86, 963, 964, 965, 248, 493, 494, 495, 249, 966, 46, 250, 967, 968, 64, 35, 36, 496, 54, 2, 76, 77, 683, 55, 56, 57, 684, 685, 969, 970, 971, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 974, 975, 986, 987, 988, 989, 990, 991, 992, 993, 26, 994, 995, 996, 997, 998, 27, 999, 1000, 1001, 28, 1002, 1003, 1004, 29, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1029, 1030, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 30, 1048, 1049, 1050, 1051, 1052, 31, 1053, 1054, 1055, 1056, 1057, 32, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 118, 497, 449, 498, 499, 500, 501, 502, 290, 291, 503, 504, 87, 88, 89, 505, 506, 510, 507, 508, 509, 251, 263, 511, 512, 90, 119, 515, 513, 514, 252, 516, 91, 517, 518, 3, 4, 92, 519, 463, 464, 292, 465, 520, 521, 522, 47, 48, 523, 524, 525, 120, 526, 527, 528, 529, 530, 293, 531, 532, 533, 534, 535, 536, 93, 537, 538, 539, 540, 5, 6, 121, 123, 541, 122, 542, 124, 543, 94, 544, 549, 550, 545, 546, 547, 552, 553, 554, 125, 555, 556, 557, 558, 559, 548, 551, 560, 95, 473, 474, 475, 1073, 1074, 850, 686, 870, 478, 687, 688, 278, 689, 294, 466, 295, 467, 871, 872, 873, 126, 874, 690, 691, 692, 468, 476, 96, 127, 1075, 1076, 875, 876, 296, 1080, 1081, 297, 1082, 1083, 128, 254, 1084, 1085, 298, 49, 1086, 1087, 299, 1094, 1095, 1098, 441, 253, 1099, 300, 1096, 1097, 1077, 1078, 450, 129, 237, 561, 563, 562, 130, 564, 565, 566, 301, 567, 78, 693, 71, 694, 132, 131, 695, 97, 1079, 98, 303, 304, 1089, 302, 99, 448, 100, 133, 882, 883, 884, 885, 886, 134, 887, 888, 889, 890, 891, 892, 893, 135, 877, 305, 878, 879, 306, 880, 881, 101, 851, 307, 136, 852, 853, 854, 855, 856, 102, 140, 141, 137, 139, 146, 145, 143, 144, 138, 142, 894, 895, 919, 920, 103, 896, 897, 150, 148, 149, 898, 899, 156, 155, 112, 147, 900, 901, 902, 903, 904, 905, 269, 268, 279, 308, 906, 907, 908, 50, 909, 152, 151, 153, 154, 111, 910, 911, 255, 912, 913, 79, 914, 915, 916, 917, 918, 7, 8, 606, 607, 51, 104, 9, 280, 309, 921, 922, 923, 773, 822, 608, 676, 609, 610, 823, 774, 611, 808, 1100, 1101, 58, 105, 696, 697, 698, 157, 568, 569, 158, 699, 704, 705, 706, 707, 159, 281, 160, 270, 271, 310, 700, 161, 701, 702, 106, 708, 924, 1090, 612, 613, 614, 703, 1093, 925, 1088, 737, 709, 615, 857, 616, 311, 1091, 74, 1092, 10, 926, 927, 75, 928, 929, 930, 931, 932, 162, 933, 442, 451, 443, 444, 934, 452, 113, 163, 710, 711, 712, 72, 264, 713, 714, 164, 37, 165, 312, 617, 715, 716, 717, 936, 935, 937, 938, 939, 940, 33, 166, 941, 942, 943, 167, 65, 66, 313, 287, 288, 580, 169, 168, 170, 718, 171, 719, 720, 172, 944, 945, 314, 173, 721, 174, 175, 757, 176, 738, 618, 179, 619, 620, 315, 621, 582, 583, 177, 178, 584, 586, 570, 67, 38, 240, 241, 571, 572, 453, 573, 585, 316, 581, 454, 574, 455, 575, 456, 576, 457, 577, 458, 578, 459, 579, 587, 588, 317, 589, 622, 440, 623, 318, 624, 625, 257, 256, 626, 627, 628, 629, 181, 180, 630, 631, 632, 460, 238, 633, 61, 62, 239, 634, 59, 60, 319, 636, 637, 445, 638, 639, 640, 641, 642, 320, 643, 644, 645, 265, 114, 447, 646, 647, 648, 446, 649, 650, 321, 651, 322, 652, 655, 656, 657, 182, 653, 183, 654, 12, 11, 184, 635, 590, 591, 592, 69, 39, 593, 68, 40, 594, 595, 323, 596, 324, 597, 325, 598, 599, 601, 185, 186, 600, 266, 41, 63, 272, 602, 187, 13, 603, 946, 947, 604, 605, 658, 326, 659, 661, 188, 662, 663, 664, 665, 666, 667, 668, 190, 189, 669, 327, 670, 328, 671, 329, 660, 673, 273, 675, 330, 672, 353, 354, 331, 674, 332, 678, 461, 193, 192, 191, 259, 333, 677, 258, 679, 680, 681, 42, 682, 194, 334, 73, 722, 723, 724, 725, 262, 726, 727, 728, 261, 729, 730, 731, 732, 195, 733, 735, 734, 107, 108, 196, 260, 198, 197, 736, 199, 200, 52, 201, 739, 740, 80, 81, 53, 741, 202, 203, 242, 742, 205, 743, 206, 204, 335, 744, 745, 747, 746, 748, 207, 749, 750, 282, 751, 752, 753, 208, 209, 754, 210, 756, 211, 758, 212, 759, 760, 70, 761, 762, 213, 763, 764, 765, 214, 767, 215, 243, 768, 766, 769, 770, 771, 216, 772, 775, 218, 777, 778, 217, 776, 779, 109, 337, 338, 780, 781, 339, 340, 782, 336, 783, 784, 219, 785, 786, 220, 221, 787, 788, 110, 789, 790, 14, 15, 16, 17, 791, 792, 222, 284, 793, 794, 341, 795, 342, 796, 343, 797, 344, 798, 345, 799, 346, 800, 283, 801, 347, 802, 809, 810, 223, 812, 813, 224, 244, 814, 811, 815, 816, 817, 18, 19, 20, 818, 225, 821, 824, 825, 43, 826, 226, 827, 828, 227, 245, 830, 829, 348, 831, 833, 834, 835, 349, 836, 21, 22, 23, 832, 24, 25, 837, 228, 838, 839, 229, 842, 843, 844, 246, 845, 840, 841, 847, 846, 848, 230, 849, 948, 949, 231, 951, 952, 953, 232, 350, 955, 954, 950, 957, 958, 956, 959, 233, 962, 274, 858, 351, 859, 44, 860, 82, 861, 862, 863, 275, 864, 352, 865, 866, 867, 34, 267, 868, 869, 960, 234, 961, 819, 235, 820, 236, 755, 285, 462, 286, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116 }
  uselistorder i32* @r4, { 37, 50, 51, 52, 7, 53, 54, 55, 8, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 43, 44, 45, 66, 67, 68, 69, 70, 71, 72, 73, 74, 656, 657, 75, 76, 9, 1, 77, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 10, 78, 79, 80, 81, 82, 83, 84, 85, 86, 11, 87, 88, 91, 92, 93, 94, 38, 95, 96, 97, 98, 99, 100, 89, 90, 39, 40, 101, 102, 12, 103, 13, 104, 14, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 15, 125, 126, 127, 16, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 46, 47, 48, 49, 41, 42, 567, 568, 259, 260, 674, 675, 676, 569, 570, 679, 684, 685, 686, 687, 688, 689, 690, 677, 140, 141, 142, 261, 262, 263, 678, 680, 683, 143, 144, 145, 146, 571, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 17, 588, 589, 590, 591, 572, 573, 574, 575, 506, 507, 508, 509, 510, 511, 512, 513, 514, 18, 515, 516, 517, 518, 519, 520, 521, 522, 523, 592, 614, 615, 616, 617, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 34, 606, 607, 0, 608, 609, 610, 611, 612, 613, 179, 180, 181, 681, 682, 618, 619, 455, 456, 264, 265, 266, 267, 268, 269, 270, 147, 148, 149, 271, 272, 273, 6, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 2, 284, 285, 286, 620, 621, 19, 622, 623, 624, 182, 183, 184, 336, 337, 302, 303, 159, 160, 185, 186, 187, 188, 150, 151, 152, 153, 154, 155, 156, 157, 158, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 215, 216, 217, 3, 218, 209, 210, 211, 212, 213, 214, 203, 204, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 625, 626, 627, 628, 629, 177, 178, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 234, 235, 236, 237, 238, 239, 240, 245, 228, 229, 230, 231, 232, 241, 242, 243, 244, 246, 247, 248, 249, 250, 33, 252, 251, 32, 253, 254, 255, 256, 257, 4, 258, 287, 20, 5, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 315, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 21, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 22, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 23, 389, 24, 390, 25, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 26, 417, 27, 418, 28, 419, 29, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 30, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 630, 631, 632, 633, 31, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 652, 653, 654, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 649, 650, 651, 436, 35, 36, 655 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16* @__decompiler_undefined_function_1() local_unnamed_addr

declare i16 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

attributes #0 = { nounwind readnone }
